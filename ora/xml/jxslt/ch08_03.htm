<html><head><title>Identifying the Browser (Java and XSLT)</title><link rel="stylesheet" type="text/css" href="../style/style1.css" />

<meta name="DC.Creator" content="Eric M. Burke" /><meta name="DC.Format" content="text/xml" scheme="MIME" /><meta name="DC.Language" content="en-US" /><meta name="DC.Publisher" content="O'Reilly &amp; Associates, Inc." /><meta name="DC.Source" scheme="ISBN" content="0596001453L" /><meta name="DC.Subject.Keyword" content="stuff" /><meta name="DC.Title" content="Java and XSLT" /><meta name="DC.Type" content="Text.Monograph" />

</head><body bgcolor="#ffffff">

<img src="gifs/smbanner.gif" usemap="#banner-map" border="0" alt="Book Home" /><map name="banner-map"><area shape="rect" coords="1,-2,616,66" href="index.htm" alt="Java and XSLT" /><area shape="rect" coords="629,-11,726,25" href="jobjects/fsearch.htm" alt="Search this book" /></map>

<div class="navbar"><table width="684" border="0"><tr><td align="left" valign="top" width="228"><a href="ch08_02.htm"><img src="../gifs/txtpreva.gif" alt="Previous" border="0" /></a></td><td align="center" valign="top" width="228" /><td align="right" valign="top" width="228"><a href="ch08_04.htm"><img src="../gifs/txtnexta.gif" alt="Next" border="0" /></a></td></tr></table></div>



<h2 class="sect1">8.3. Identifying the Browser</h2>

<p><a name="INDEX-945" />
<a name="INDEX-946" />A strength of XSLT is its ability to
help keep data and presentation separate. As you know, supporting
different transformations is a matter of writing different XSLT
stylesheets. Figuring out which stylesheet to apply is the only
missing piece. For web applications, the
<tt class="literal">User-Agent</tt><a name="INDEX-947" /> HTTP header offers the solution.
</p>

<p>HTTP requests consist of a header followed by content; the header
contains name/value pairs of data, allowing the client and server to
exchange additional information with each other. The text shown in
<a href="ch08_03.htm">Example 8-7</a> contains the complete HTTP request
issued by Netscape 6.0 when running on Windows
2000.<a name="INDEX-948" />
</p>

<a name="javaxslt-CHP-8-EX-7" /><div class="example">
<h4 class="objtitle">Example 8-7. Netscape 6 HTTP request </h4>
<blockquote><pre class="code">GET / HTTP/1.1
Host: localhost:80
<tt class="userinput"><b>User-Agent: Mozilla/5.0 (Windows; U; Windows NT 5.0; en-US; m18) Gecko/20001108</b></tt> 
Netscape6/6.0
Accept: */*
Accept-Language: en
Accept-Encoding: gzip,deflate,compress,identity
Keep-Alive: 300
Connection: keep-alive</pre></blockquote>
</div>

<p>For the purposes of browser detection, the value of
<tt class="literal">User-Agent</tt> must be parsed to determine what kind
of browser is requesting information from the servlet. Based on this
information, the servlet can select an appropriate XSLT stylesheet
that supports the particular strengths and weaknesses of the browser
in question.
</p>

<p>Unfortunately, there are hundreds of variations of
<tt class="literal">User-Agent</tt>, and browser vendors do not rigorously
adhere to any standard format. The common browsers can be identified,
however, with a small amount of parsing logic. <a href="ch08_03.htm">Table 8-2</a> lists some of the more common browsers you
might encounter.<a name="INDEX-949" />
</p>

<a name="javaxslt-CHP-8-TABLE-2" /><h4 class="objtitle">Table 8-2. Common User-Agent values </h4><table border="1" cellpadding="3">



<tr>
<th>
<p>User-Agent</p>
</th>
<th>
<p>Browser</p>
</th>
</tr>


<tr>
<td>
<p>Lynx/2.8rel.3 libwww-FM/2.14</p>
</td>
<td>
<p>Lynx 2.8rel3</p>
</td>
</tr>
<tr>
<td>
<p>Mozilla/4.0 (compatible; MSIE 4.0; Windows NT)</p>
</td>
<td>
<p>Internet Explorer 4.0</p>
</td>
</tr>
<tr>
<td>
<p>Mozilla/4.0 (compatible; MSIE 5.5; Windows NT 5.0)</p>
</td>
<td>
<p>Internet Explorer 5.5</p>
</td>
</tr>
<tr>
<td>
<p>Mozilla/4.08 [en] (WinNT; U ;Nav)</p>
</td>
<td>
<p>Netscape 4.08</p>
</td>
</tr>
<tr>
<td>
<p>Mozilla/5.0 (Windows; U; Windows NT 5.0; en-US; m18) Gecko/20001108
Netscape 6/6.0
</p>
</td>
<td>
<p>Netscape 6</p>
</td>
</tr>
<tr>
<td>
<p>Mozilla/3.0 (compatible; Opera/3.0; Windows 95/NT4) v3.1</p>
</td>
<td>
<p>Opera 3.0</p>
</td>
</tr>

</table><p>

<p>The first browser, <a name="INDEX-950" />Lynx, is listed because it is the
most common text-only browser. Whenever the
<tt class="literal">User-Agent</tt> begins with <tt class="literal">Lynx</tt>,
your web application can select an XSLT stylesheet that omits all
graphics from the web page.
</p>

<p>The three most popular browsers are clearly Microsoft Internet
Explorer, <a name="INDEX-951" />Netscape Navigator, and Opera
Software's Opera. Of these three browsers, Navigator was
available first, and its <tt class="literal">User-Agent</tt> always begins
with <tt class="literal">Mozilla</tt>. In the early days of web
development, many sites checked for this and only provided fancy
versions of their web sites to Netscape browsers.
</p>

<p>When <a name="INDEX-952" />Microsoft
Internet Explorer became available, it had to begin its
<tt class="literal">User-Agent</tt> string with <tt class="literal">Mozilla</tt>
to maintain compatibility with many existing web sites. Therefore,
you cannot simply check for <tt class="literal">Mozilla</tt> to determine
the browser type. As you can see in <a href="ch08_03.htm">Table 8-2</a>,
Microsoft browsers include the text <tt class="literal">MSIE</tt> followed
by the version number, making them easily identifiable.
</p>

<p>A more recent entry, <a name="INDEX-953" />Opera, also begins with
<tt class="literal">Mozilla</tt>. The <tt class="literal">User-Agent</tt> for
Opera browsers always contains <tt class="literal">Opera/[version];</tt>,
where <tt class="literal">[version]</tt> is something like
<tt class="literal">2.0</tt> or <tt class="literal">3.0</tt>. With these rules in
mind, the algorithm for detecting a browser might look something like
this:
</p>

<blockquote><pre class="code">if (begins-with "Lynx") {
  browser is only capable of displaying text
}
else if (contains "MSIE") {
  browser is Internet Explorer
}
else if (contains "Opera") {
  browser is Opera
}
else if (begins-with "Mozilla") {
  browser is Netscape-compatible
}
else {
  browser is unknown
}</pre></blockquote>

<p>In a <a name="INDEX-954" />servlet, the following
code is used to obtain the value of <tt class="literal">User-Agent</tt>:
</p>

<blockquote><pre class="code">protected void doGet(HttpServletRequest req, HttpServletResponse res)
        throws IOException, ServletException {<tt class="userinput"><b>
    String userAgent = req.getHeader("User-Agent");</b></tt>
    String xslt = null;<tt class="userinput"><b>
    if (userAgent.startsWith("Lynx")) {</b></tt><tt class="userinput"><b>
        xslt = "textHomePage.xslt";</b></tt><tt class="userinput"><b>
    } else {</b></tt><tt class="userinput"><b>
        xslt = "htmlHomePage.xslt";</b></tt><tt class="userinput"><b>
    }</b></tt>
    ...    </pre></blockquote>

<p>For more sophisticated applications, it is desirable to use a utility
class that can identify the browser, its version number, and possibly
even its platform. Although you can certainly write your own class
using basic <tt class="literal">java.lang.String</tt> operations, a better
option is to use an existing API that someone else has written. The
screen capture shown in <a href="ch08_03.htm">Figure 8-4</a> illustrates the
output from a simple servlet that identifies various pieces of
information about the browser.
</p>

<a name="javaxslt-CHP-8-FIG-4" /><div class="figure"><img src="figs/jxt_0804.gif" alt="Figure 8-4" width="481" height="173" /></div><h4 class="objtitle">Figure 8-4. Browser detection</h4>

<p>This servlet utilizes the
<tt class="literal">org.apache.turbine.util.BrowserDetector</tt><a name="INDEX-955" />
<a name="INDEX-956" />
<a name="INDEX-957" />
class, which is part of Apache's Turbine web application
framework.<a href="#FOOTNOTE-38">[38]</a> This class actually has only one
dependency on anything else in Turbine, so you can either comment out
its reference to Turbine's <tt class="literal">RunData</tt> class or
simply include the Turbine JAR files in your CLASSPATH.<a href="#FOOTNOTE-39">[39]</a>
<a name="INDEX-958" /> <a name="INDEX-959" />Turbine
can be obtained from <a href="../../../../../../jakarta.apache.org/">http://jakarta.apache.org</a>. The code for the
servlet is shown in <a href="ch08_03.htm">Example 8-8</a>.<a name="INDEX-960" />
</p><blockquote class="footnote"> <a name="FOOTNOTE-38" /><p> [38] This example is based on Version 2.1 of
Turbine.</p> </blockquote><blockquote class="footnote">
<a name="FOOTNOTE-39" /><p> [39] Be sure to read and follow the Apache licensing agreement if
you extract this class from Turbine.</p> </blockquote>

<a name="javaxslt-CHP-8-EX-8" /><div class="example">
<h4 class="objtitle">Example 8-8. BrowserID.java </h4>
<a name="INDEX-961" /><a name="INDEX-962" /><blockquote><pre class="code">import java.io.*;
import javax.servlet.*;
import javax.servlet.http.*;

<tt class="userinput"><b>import org.apache.turbine.util.BrowserDetector;</b></tt>

public class BrowserID extends HttpServlet {

    protected void doGet(HttpServletRequest req, HttpServletResponse res)
            throws IOException, ServletException {
        <tt class="userinput"><b>BrowserDetector bd = new BrowserDetector(req.getHeader(
                "User-Agent"));</b></tt>
         
        res.setContentType("text/plain");

        PrintWriter pw = res.getWriter( );
        pw.println("User-Agent  : " + bd.getUserAgentString( ));
        pw.println("Supports CSS: " + bd.isCssOK( ));
        pw.println("JavaScript  : " + bd.isJavascriptOK( ));
        pw.println("Browser Name: " + bd.getBrowserName( ));
        pw.println("Platform    : " + bd.getBrowserPlatform( ));
        pw.println("Version     : " + bd.getBrowserVersion( ));
    }
}
</pre></blockquote>
</div>



<hr width="684" align="left" />
<div class="navbar"><table width="684" border="0"><tr><td align="left" valign="top" width="228"><a href="ch08_02.htm"><img src="../gifs/txtpreva.gif" alt="Previous" border="0" /></a></td><td align="center" valign="top" width="228"><a href="index.htm"><img src="../gifs/txthome.gif" alt="Home" border="0" /></a></td><td align="right" valign="top" width="228"><a href="ch08_04.htm"><img src="../gifs/txtnexta.gif" alt="Next" border="0" /></a></td></tr><tr><td align="left" valign="top" width="228">8.2. Session Tracking Without Cookies</td><td align="center" valign="top" width="228"><a href="index/index.htm"><img src="../gifs/index.gif" alt="Book Index" border="0" /></a></td><td align="right" valign="top" width="228">8.4. Servlet Filters</td></tr></table></div>
<hr width="684" align="left" />

<img src="../gifs/navbar.gif" usemap="#library-map" border="0" alt="Library Navigation Links" />
<p><p><font size="-1"><a href="copyrght.htm">Copyright &copy; 2002</a> O'Reilly &amp; Associates. All rights reserved.</font></p>

<map name="library-map"><area shape="rect" coords="0,0,85,93" href="../index.htm"><area shape="rect" coords="85,0,180,98" href="../sax2/index.htm"><area shape="rect" coords="182,-1,261,100" href="../xmlnut/index.htm"><area shape="rect" coords="263,1,384,96" href="../jxml/index.htm"><area shape="rect" coords="386,1,463,100" href="index.htm"><area shape="rect" coords="466,1,533,112" href="../xslt/index.htm"><area shape="rect" coords="535,-1,610,108" href="../schema/index.htm"><area shape="rect" coords="613,1,696,121" href="../pxml/index.htm"></map>

</body></html>