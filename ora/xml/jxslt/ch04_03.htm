<html><head><title>XSLT and EJB (Java and XSLT)</title><link rel="stylesheet" type="text/css" href="../style/style1.css" />

<meta name="DC.Creator" content="Eric M. Burke" /><meta name="DC.Format" content="text/xml" scheme="MIME" /><meta name="DC.Language" content="en-US" /><meta name="DC.Publisher" content="O'Reilly &amp; Associates, Inc." /><meta name="DC.Source" scheme="ISBN" content="0596001453L" /><meta name="DC.Subject.Keyword" content="stuff" /><meta name="DC.Title" content="Java and XSLT" /><meta name="DC.Type" content="Text.Monograph" />

</head><body bgcolor="#ffffff">

<img src="gifs/smbanner.gif" usemap="#banner-map" border="0" alt="Book Home" /><map name="banner-map"><area shape="rect" coords="1,-2,616,66" href="index.htm" alt="Java and XSLT" /><area shape="rect" coords="629,-11,726,25" href="jobjects/fsearch.htm" alt="Search this book" /></map>

<div class="navbar"><table width="684" border="0"><tr><td align="left" valign="top" width="228"><a href="ch04_02.htm"><img src="../gifs/txtpreva.gif" alt="Previous" border="0" /></a></td><td align="center" valign="top" width="228" /><td align="right" valign="top" width="228"><a href="ch04_04.htm"><img src="../gifs/txtnexta.gif" alt="Next" border="0" /></a></td></tr></table></div>



<h2 class="sect1">4.3. XSLT and EJB</h2>

<p><a name="INDEX-471" /> <a name="INDEX-472" />Now
that the options for web tier development have been examined,
let's look at how the web tier interacts with other tiers in
large enterprise class systems. A typical EJB architecture involves a
thin browser client, a servlet-driven web tier, and EJB on an
application server tier. <a href="ch04_03.htm">Figure 4-7</a> expands upon
the conceptual XSLT model presented earlier.
</p>

<a name="javaxslt-CHP-4-FIG-7" /><div class="figure"><img src="figs/jxt_0407.gif" alt="Figure 4-7" width="455" height="242" /></div><h4 class="objtitle">Figure 4-7. XSLT and EJB architecture</h4>

<p>This diagram is much closer to the true physical model of a multitier
web application that uses XSLT. The arrows indicate the overall flow
of a single request, originating with the client. This client is
typically a web browser, but it could be a cell phone or some other
device. The client request goes to a single servlet and is handed off
to something called
<tt class="literal">RequestHandler</tt><a name="INDEX-473" />.
In the pattern outlined here, you create numerous subclasses of
<tt class="literal">RequestHandler</tt>. Each subclass is responsible for
validation and presentation logic for a small set of related
functions. One manageable strategy is to design one subclass of
<tt class="literal">RequestHandler</tt> for each web page in the
application. Another approach is to create fine-grained request
handlers that handle one specific task, which can be beneficial if
the same piece of functionality is invoked from many different
screens in your application.
</p>

<p>The request handler interacts with the application server via EJB
components. The normal pattern is to execute commands on session
beans, which in turn get their data from entity beans. The internal
behavior of the EJB layer is irrelevant to the web tier, however.
Once the EJB method call is complete, one or more "data
objects" are returned to the web tier. From this point, the
data object must be converted to XML.
</p>

<p>The conversion to XML can be handled in a few different ways. One
common approach is to write methods in the data objects themselves
that know how to generate a fragment of XML, or perhaps an entire
document. Another approach is to write an XML adapter class for each
data object. Instead of embedding the XML generation code into the
data object, the adapter class generates the XML. This approach has
the advantage of keeping the data objects lightweight and clean, but
it does result in additional classes to write. In either approach, it
is preferable to return XML as a DOM or JDOM tree, rather than raw
XML text. If the XML is returned as raw text, it will have to be
parsed right back into memory by the XSLT processor. Returning the
XML as a data structure allows the tree to be passed directly to the
XSLT processor without the additional parsing step.
</p>

<p>Yet another approach is to return XML directly from the EJB
components, thus eliminating the intermediate data objects. <a href="ch09_01.htm">Chapter 9, "Development Environment, Testing, and Performance"</a> will examine this in detail, primarily from a
performance perspective. The main drawback to consider is that XML
tends to be very verbose. Sending large-text XML files from the
application server to the web server may be less efficient than
sending serialized Java objects. You could compress the data, but
that would add processor overhead for compression and decompression.
</p>

<p>Regardless of how the XML is generated, the final step shown in <a href="ch04_03.htm">Figure 4-7</a> is to pass the XML and stylesheet to the XSLT
processor for transformation. The result tree is sent directly to the
client, thus fulfilling the request. If the client is a browser, the
XSLT stylesheet will probably transform the XML into HTML or XHTML.
For a nonbrowser client, however, it is conceivable that the XML data
is delivered directly without any XSLT transformation.
</p>

<a name="javaxslt-CHP-4-SECT-3.1" /><div class="sect2">
<h3 class="sect2">4.3.1. Tradeoffs</h3>

<p>Scalability is a key motivation for a multitier EJB architecture. In
such an architecture, each tier can execute on a different machine.
Additional performance gains are possible when multiple servers are
clustered on each tier. Another motivating factor is reliability. If
one machine fails, a redundant machine can continue processing. When
updates are made, new versions of software can be deployed to one
machine at a time, preventing long outages. Security is improved by
strictly regulating access to the data tier via EJB components.
</p>

<p>Yet another motivation for a distributed system is simplicity,
although a basic EJB application is far more complex than a simple
two-tier application. Yes, distributed systems are complex, but for
highly complex applications this approach simplifies your work by
dividing independent tasks across tiers. One group of programmers can
work on the EJB components, while another works on the request
handler classes on the web tier. Yet another group of designers can
work on XML and XSLT, while your database expert focuses on the
database.
</p>

<p>For simple applications, a multitier EJB approach is overkill and
will likely harm performance. If your web site serves only a few
hundred visitors per day, then eliminating EJB could be much faster
because there is no additional application tier to hop
through.<a href="#FOOTNOTE-16">[16]</a><a name="INDEX-474" /> <a name="INDEX-475" />
</p><blockquote class="footnote"> <a name="FOOTNOTE-16" /><p> [16] Keep in mind that other benefits of EJB,
such as security, will be lost.</p> </blockquote>

</div>


<hr width="684" align="left" />
<div class="navbar"><table width="684" border="0"><tr><td align="left" valign="top" width="228"><a href="ch04_02.htm"><img src="../gifs/txtpreva.gif" alt="Previous" border="0" /></a></td><td align="center" valign="top" width="228"><a href="index.htm"><img src="../gifs/txthome.gif" alt="Home" border="0" /></a></td><td align="right" valign="top" width="228"><a href="ch04_04.htm"><img src="../gifs/txtnexta.gif" alt="Next" border="0" /></a></td></tr><tr><td align="left" valign="top" width="228">4.2. The Universal Design</td><td align="center" valign="top" width="228"><a href="index/index.htm"><img src="../gifs/index.gif" alt="Book Index" border="0" /></a></td><td align="right" valign="top" width="228">4.4. Summary of Key Approaches</td></tr></table></div>
<hr width="684" align="left" />

<img src="../gifs/navbar.gif" usemap="#library-map" border="0" alt="Library Navigation Links" />
<p><p><font size="-1"><a href="copyrght.htm">Copyright &copy; 2002</a> O'Reilly &amp; Associates. All rights reserved.</font></p>

<map name="library-map"><area shape="rect" coords="0,0,85,93" href="../index.htm"><area shape="rect" coords="85,0,180,98" href="../sax2/index.htm"><area shape="rect" coords="182,-1,261,100" href="../xmlnut/index.htm"><area shape="rect" coords="263,1,384,96" href="../jxml/index.htm"><area shape="rect" coords="386,1,463,100" href="index.htm"><area shape="rect" coords="466,1,533,112" href="../xslt/index.htm"><area shape="rect" coords="535,-1,610,108" href="../schema/index.htm"><area shape="rect" coords="613,1,696,121" href="../pxml/index.htm"></map>

</body></html>