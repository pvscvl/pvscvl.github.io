<html><head><title>Getting Started (Java and XSLT)</title><link rel="stylesheet" type="text/css" href="../style/style1.css" />

<meta name="DC.Creator" content="Eric M. Burke" /><meta name="DC.Format" content="text/xml" scheme="MIME" /><meta name="DC.Language" content="en-US" /><meta name="DC.Publisher" content="O'Reilly &amp; Associates, Inc." /><meta name="DC.Source" scheme="ISBN" content="0596001453L" /><meta name="DC.Subject.Keyword" content="stuff" /><meta name="DC.Title" content="Java and XSLT" /><meta name="DC.Type" content="Text.Monograph" />

</head><body bgcolor="#ffffff">

<img src="gifs/smbanner.gif" usemap="#banner-map" border="0" alt="Book Home" /><map name="banner-map"><area shape="rect" coords="1,-2,616,66" href="index.htm" alt="Java and XSLT" /><area shape="rect" coords="629,-11,726,25" href="jobjects/fsearch.htm" alt="Search this book" /></map>

<div class="navbar"><table width="684" border="0"><tr><td align="left" valign="top" width="228"><a href="ch01_03.htm"><img src="../gifs/txtpreva.gif" alt="Previous" border="0" /></a></td><td align="center" valign="top" width="228" /><td align="right" valign="top" width="228"><a href="ch01_05.htm"><img src="../gifs/txtnexta.gif" alt="Next" border="0" /></a></td></tr></table></div>



<h2 class="sect1">1.4. Getting Started</h2>

<p>The best way to get started with new technologies is to experiment.
For example, if you do not know XSLT, you should experiment with
plenty of stylesheets as you work through the next two chapters.
Aside from trying out the examples that appear in this book, you may
want to invent a simple XML data file that represents something of
interest to you, such as your personal music collection or family
tree. Using XSLT stylesheets, try to create web pages that show your
data in many different formats.
</p>

<p>Once the basics of XSLT are out of the way, servlets will be your
next big challenge. Although the servlet API is not particularly
difficult to learn, configuration and deployment issues can make it
difficult to debug and test your applications. The best advice is to
start small, writing a very basic application that proves your
environment is configured correctly before moving on to more
sophisticated examples.
<a name="INDEX-144" />Apache's Tomcat
is probably the best <em class="emphasis">servlet
container</em><a name="INDEX-145" /> for beginners because it is free,
easy to configure, and is the official reference implementation for
Sun's servlet API. A servlet container is the server that runs
servlets. <a href="ch06_01.htm">Chapter 6, "Servlet Basics and XSLT"</a> covers the essentials of the
servlet API, but for all the details you will want to pick up a copy
of <em class="filename">Java Servlet Programming</em> by Jason Hunter
(O'Reilly). You definitely want to get the second edition
because it covers the dramatic changes that were introduced in
Version 2.2 of the servlet API.
</p>

<a name="javaxslt-CHP-1-SECT-4.1" /><div class="sect2">
<h3 class="sect2">1.4.1. Java XSLT Processor Choices</h3>

<p><a name="INDEX-146" />
<a name="INDEX-147" />Although <a name="INDEX-148" />this book uses primarily Sun's
JAXP and Apache's Xalan, many other XSLT processors are
available. Processors based on other languages may offer much higher
performance when invoked from the command line, primarily because
they do not incur the overhead of a Java Virtual Machine (JVM) at
application startup time. When using XSLT from a servlet, however,
the <a name="INDEX-149" />JVM is already running, so startup time is
no longer an issue. Pure Java processors are great for servlets
because of the ease with which they can be embedded into the web
application. Simply adding a JAR file to the CLASSPATH is generally
all that must be done.
</p>

<p>Putting an up-to-date list of XSLT processors into a book is futile
because the market is maturing too fast. Some of the currently
popular Java-based processors are listed here, but a quick web search
for "XSLT Processors" would be prudent before you decide
to standardize on a particular tool, as new processors are constantly
appearing. We will see how to use Xalan in the next chapter; a few
other choices are listed here.
</p>

<a name="javaxslt-CHP-1-SECT-4.1.1" /><div class="sect3">
<h3 class="sect3">1.4.1.1. XT</h3>

<p><a name="INDEX-150" />
<a name="INDEX-151" />XT was one of the
earliest XSLT processors, written by James Clark. If you read the
XSLT specification, you may recognize him as the editor of the XSLT
specification. As the XSLT specification evolved, XT followed a
parallel path of evolution, making it a leader in terms of standards
compliance. At the time of this writing, however, XT had not been
updated as recently as some of the other Java- based processors.
Version 19991105 of XT implements the W3C's
proposed-recommendation (PR-xslt-19991008) version of XSLT and is
available at <a href="../../../../../../www.jclark.com/xml/xt.html">http://www.jclark.com/xml/xt.html</a>. Like the
other processors listed here, XT is free.
</p>

</div>

<a name="javaxslt-CHP-1-SECT-4.1.2" /><div class="sect3">
<h3 class="sect3">1.4.1.2. LotusXSL</h3>

<p><a name="INDEX-152" />
<a name="INDEX-153" />LotusXSL is a Java
XSLT processor from <a name="INDEX-154" />IBM Alphaworks available at
<a name="INDEX-155" /><a href="../../../../../../www.alphaworks.ibm.com/">http://www.alphaworks.ibm.com</a>. In November
1999 IBM donated LotusXSL to Apache, forming the basis for Xalan.
LotusXSL continued to exist as a separate product. However, it is
currently a thin wrapper around the Xalan processor. Future versions
of LotusXSL may add features above and beyond those offered by Xalan,
but there doesn't seem to be a compelling reason to choose
LotusXSL unless you are already using it.
</p>

</div>

<a name="javaxslt-CHP-1-SECT-4.1.3" /><div class="sect3">
<h3 class="sect3">1.4.1.3. SAXON</h3>

<p><a name="INDEX-156" />
<a name="INDEX-157" />The SAXON XSLT
processor from Michael Kay is available at <a name="INDEX-158" /><a href="../../../../../../saxon.sourceforge.net/">http://saxon.sourceforge.net</a>. SAXON is open
source software in accordance with the Mozilla Public License and is
a very popular alternative to Xalan. SAXON provides full support for
the current XSLT specification and is very well documented. It also
provides several value-added features such as the ability to output
multiple result trees from the same transformation and update the
values of variables within stylesheets.
</p>

<p>To transform a document using SAXON, first include
<em class="filename">saxon.jar</em> in your CLASSPATH. Then type
<tt class="userinput"><b>java com.icl.saxon.StyleSheet -?</b></tt> to list all
available options. The basic syntax for transforming a stylesheet is
as follows:
</p>

<blockquote><pre class="code">java com.icl.saxon.StyleSheet [options] source-doc style-doc [ params...]</pre></blockquote>

<p>To transform the <em class="filename">presidents.xml</em> file and send
the results to standard output, type the following:
</p>

<blockquote><pre class="code">java com.icl.saxon.StyleSheet presidents.xml presidents.xslt</pre></blockquote>

</div>

<a name="javaxslt-CHP-1-SECT-4.1.4" /><div class="sect3">
<h3 class="sect3">1.4.1.4. JAXP</h3>

<p><a name="INDEX-159" />
<a name="INDEX-160" />Version 1.1 of Sun's Java API
for XML Processing (JAXP) contains support for XSLT
<a name="INDEX-161" />transformations, a notable omission
from earlier versions of JAXP. It can be downloaded from <a href="../../../../../../java.sun.com/xml">http://java.sun.com/xml</a>. Parsing XML and
transforming XSLT are not the primary focus of JAXP. Instead, the key
goal is to provide a standard Java interface to a wide variety of XML
parsers and XSLT processors. Although JAXP does include reference
implementations of XML parsers and an XSLT processor, its key benefit
is the choice of tools afforded to Java developers. Vendor lock-in
should be much less of an issue thanks to JAXP.
</p>

<p>Since JAXP is primarily a Java-based API, we will cover its
programmatic interfaces in depth as we talk about XSLT programming
techniques in <a href="ch05_01.htm">Chapter 5, "XSLT Processing with Java"</a>. JAXP currently includes
Apache's Xalan as its default XSLT processor, so the Xalan
instructions presented in <a href="ch02_01.htm">Chapter 2, "XSLT Part 1 -- The Basics"</a> will also
apply to JAXP.<a name="INDEX-162" /> 
</p>

</div>
</div>


<hr width="684" align="left" />
<div class="navbar"><table width="684" border="0"><tr><td align="left" valign="top" width="228"><a href="ch01_03.htm"><img src="../gifs/txtpreva.gif" alt="Previous" border="0" /></a></td><td align="center" valign="top" width="228"><a href="index.htm"><img src="../gifs/txthome.gif" alt="Home" border="0" /></a></td><td align="right" valign="top" width="228"><a href="ch01_05.htm"><img src="../gifs/txtnexta.gif" alt="Next" border="0" /></a></td></tr><tr><td align="left" valign="top" width="228">1.3. Beyond Dynamic Web Pages</td><td align="center" valign="top" width="228"><a href="index/index.htm"><img src="../gifs/index.gif" alt="Book Index" border="0" /></a></td><td align="right" valign="top" width="228">1.5. Web Browser Support for XSLT</td></tr></table></div>
<hr width="684" align="left" />

<img src="../gifs/navbar.gif" usemap="#library-map" border="0" alt="Library Navigation Links" />
<p><p><font size="-1"><a href="copyrght.htm">Copyright &copy; 2002</a> O'Reilly &amp; Associates. All rights reserved.</font></p>

<map name="library-map"><area shape="rect" coords="0,0,85,93" href="../index.htm"><area shape="rect" coords="85,0,180,98" href="../sax2/index.htm"><area shape="rect" coords="182,-1,261,100" href="../xmlnut/index.htm"><area shape="rect" coords="263,1,384,96" href="../jxml/index.htm"><area shape="rect" coords="386,1,463,100" href="index.htm"><area shape="rect" coords="466,1,533,112" href="../xslt/index.htm"><area shape="rect" coords="535,-1,610,108" href="../schema/index.htm"><area shape="rect" coords="613,1,696,121" href="../pxml/index.htm"></map>

</body></html>