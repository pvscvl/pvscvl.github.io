<html><head><title>Parameters and Variables (Java and XSLT)</title><link rel="stylesheet" type="text/css" href="../style/style1.css" />

<meta name="DC.Creator" content="Eric M. Burke" /><meta name="DC.Format" content="text/xml" scheme="MIME" /><meta name="DC.Language" content="en-US" /><meta name="DC.Publisher" content="O'Reilly &amp; Associates, Inc." /><meta name="DC.Source" scheme="ISBN" content="0596001453L" /><meta name="DC.Subject.Keyword" content="stuff" /><meta name="DC.Title" content="Java and XSLT" /><meta name="DC.Type" content="Text.Monograph" />

</head><body bgcolor="#ffffff">

<img src="gifs/smbanner.gif" usemap="#banner-map" border="0" alt="Book Home" /><map name="banner-map"><area shape="rect" coords="1,-2,616,66" href="index.htm" alt="Java and XSLT" /><area shape="rect" coords="629,-11,726,25" href="jobjects/fsearch.htm" alt="Search this book" /></map>

<div class="navbar"><table width="684" border="0"><tr><td align="left" valign="top" width="228"><a href="ch03_01.htm"><img src="../gifs/txtpreva.gif" alt="Previous" border="0" /></a></td><td align="center" valign="top" width="228" /><td align="right" valign="top" width="228"><a href="ch03_03.htm"><img src="../gifs/txtnexta.gif" alt="Next" border="0" /></a></td></tr></table></div>



<h2 class="sect1">3.2. Parameters and Variables</h2>

<p><a name="INDEX-328" />As
in other programming languages, it is often desirable to set up a
variable whose value is reused in several places throughout a
stylesheet. If the title of a book is displayed repeatedly, then it
makes sense to store that title in a variable rather than scan
through the XML data and locate the title repeatedly. It can also be
beneficial to set up a variable once and pass it as a parameter to
one or more templates. These templates often use
<tt class="literal">&lt;xsl:if&gt;</tt> or
<tt class="literal">&lt;xsl:choose&gt;</tt> to produce different content
depending on the value of the parameter that was passed.
</p>

<a name="javaxslt-CHP-3-SECT-2.1" /><div class="sect2">
<h3 class="sect2">3.2.1. &lt;xsl:variable&gt;</h3>

<p>Variables in XSLT are defined with the
<tt class="literal">&lt;xsl:variable&gt;</tt><a name="INDEX-329" />
<a name="INDEX-330" />
element and can be global or local. A <a name="INDEX-331" />global variable is defined at the
"top-level" of a stylesheet, which means that it is
defined outside of any templates as a direct child of the
<tt class="literal">&lt;xsl:stylesheet&gt;</tt> element. Top-level
variables are visible throughout the entire stylesheet, even in
templates that occur before the variable declaration.
</p>

<p>The other place to define a variable is inside of a template. These
variables are visible only to elements that follow the
<tt class="literal">&lt;xsl:variable&gt;</tt> declaration within that
template and to their descendants. The code in <a href="ch03_01.htm">Example 3-2</a> showed this form of
<tt class="literal">&lt;xsl:variable&gt;</tt> as a mechanism to define the
font color.
</p>

<a name="javaxslt-CHP-3-SECT-2.1.1" /><div class="sect3">
<h3 class="sect3">3.2.1.1. Defining variables</h3>

<p><a name="INDEX-332" />Variables
can be defined in one of three ways:
</p>

<blockquote><pre class="code">&lt;xsl:variable name="homePage"&gt;index.html&lt;/xsl:variable&gt;
&lt;xsl:variable name="lastPresident"select="president[position() = last( )]/name"/&gt;
&lt;xsl:variable name="empty"/&gt;</pre></blockquote>

<p>In the first example, the content of
<tt class="literal">&lt;xsl:variable&gt;</tt> specifies the variable value.
In the simple example listed here, the text
<tt class="literal">index.html</tt> is assigned to the
<tt class="literal">homePage</tt> variable. More complex content is
certainly possible, as shown earlier in <a href="ch03_01.htm">Example 3-2</a>.
</p>

<p>The second way to define a variable relies on the
<tt class="literal">select</tt> attribute. The value is an XPath
expression, so in this case we are selecting the name of the last
president in the list.
</p>

<p>Finally, a variable without a <tt class="literal">select</tt> attribute or
content is bound to an empty string. The example shown in item 3 is
equivalent to:
</p>

<blockquote><pre class="code">&lt;xsl:variable name="empty" select="''"/&gt;</pre></blockquote>

</div>

<a name="javaxslt-CHP-3-SECT-2.1.2" /><div class="sect3">
<h3 class="sect3">3.2.1.2. Using variables</h3>

<p>To use a variable, refer to the variable name with a
<tt class="literal">$</tt><a name="INDEX-333" />
<a name="INDEX-334" />
character. In the following example, an XPath location path is used
to select the name of the last president. This text is then stored in
the <tt class="literal">lastPresident</tt> variable:
</p>

<blockquote><pre class="code">&lt;xsl:variable name="lastPresident" select="president[position() = last( )]/name"/&gt;</pre></blockquote>

<p>Later in the same stylesheet, the <tt class="literal">lastPresident</tt>
variable can be displayed using the following fragment of code:
</p>

<blockquote><pre class="code"><tt class="userinput"><b>
&lt;xsl:value-of select="$lastPresident"/&gt;</b></tt></pre></blockquote>
<p>Since the select attribute of &lt;xsl:value-of&gt; expects to see an
XPath expression, $lastPresident is treated as something dynamic,
rather than as static text. To use a
<a name="INDEX-335" />variable within an HTML
attribute value, however, you must use the <a name="INDEX-336" />attribute value template (AVT) syntax,
placing braces around the variable reference:
</p>
<blockquote><pre class="code">
&lt;a href="{$homePage}"&gt;Click here to return to the home page...&lt;/a&gt;</pre></blockquote>

<p>Without the braces, the variable would be misinterpreted as literal
text rather than treated dynamically.
</p>

<p>The primary limitation of
<a name="INDEX-337" />variables
is that they cannot be changed. It is impossible, for example, to use
a variable as a counter in an <tt class="literal">&lt;xsl:for-each&gt;</tt>
loop. This can be frustrating to programmers accustomed to variables
that can be changed, but can often be overcome with some ingenuity.
It usually comes down to passing a parameter to a template instead of
using a global variable and then recursively calling the template
again with an incremented parameter value. An example of this
technique will be presented shortly.
</p>

<p>Another XSLT trick involves combining the variable initialization
with <tt class="literal">&lt;xsl:choose&gt;</tt>. Since variables cannot be
changed, you cannot first declare a variable and then assign its
value later on. The workaround is to place the variable definition as
a child of <tt class="literal">&lt;xsl:variable&gt;</tt>, perhaps using
<tt class="literal">&lt;xsl:choose&gt;</tt> as follows:
</p>

<blockquote><pre class="code"><tt class="userinput"><b>
&lt;xsl:variable name="midName"&gt;</b></tt>
  &lt;xsl:choose&gt;
    &lt;xsl:when test="middleName"&gt;<tt class="userinput"><b>
      &lt;xsl:value-of select="middleName"/&gt;</b></tt>
    &lt;/xsl:when&gt;
    &lt;xsl:otherwise&gt;<tt class="userinput"><b>
      &lt;xsl:text&gt; &lt;/xsl:text&gt;</b></tt>
    &lt;/xsl:otherwise&gt;
  &lt;/xsl:choose&gt;<tt class="userinput"><b>
&lt;/xsl:variable&gt;</b></tt></pre></blockquote>
<p>This code defines a variable called midName. If the
&lt;middleName&gt; element is present, its value is assigned to
midName. Otherwise, a blank space is assigned.<a name="INDEX-338" /> <a name="INDEX-339" />
</p>

</div>
</div>
<a name="javaxslt-CHP-3-SECT-2.2" /><div class="sect2">
<h3 class="sect2">3.2.2. &lt;xsl:call-template&gt; and Named Templates</h3>

<p><a name="INDEX-340" />Up until this point, all of the
templates have been tightly coupled to the actual data in the XML
source. For example, the following template matches an
&lt;employee&gt; element; therefore, &lt;employee&gt; must be
contained within your XML data:
</p>
<blockquote><pre class="code">
&lt;xsl:template match="employee"&gt;
...content, perhaps display the name and SSN for the employee
&lt;/xsl:template&gt;</pre></blockquote>

<p>But in many cases, you may wish to use this template for types of
elements other than <tt class="literal">&lt;employee&gt;</tt>. In addition
to <tt class="literal">&lt;employee&gt;</tt> elements, you may want to use
this same code to output information for a
<tt class="literal">&lt;programmer&gt;</tt> or
<tt class="literal">&lt;manager&gt;</tt> element. In these circumstances,
<tt class="literal">&lt;xsl:call-template&gt;</tt><a name="INDEX-341" />
<a name="INDEX-342" /> can be used to
explicitly invoke a template by name, rather than matching a pattern
in the XML data. The template will have the following form:
</p>

<blockquote><pre class="code">&lt;xsl:template name="formatSSN"&gt;
...content
&lt;/xsl:template&gt;</pre></blockquote>

<p>This template will be used to support the following XML data, in
which both <tt class="literal">&lt;manager&gt;</tt> and
<tt class="literal">&lt;programmer&gt;</tt> elements have
<tt class="literal">ssn</tt> attributes. Using a single named template
avoids the necessity to write one template for
<tt class="literal">&lt;manager&gt;</tt> and another for
<tt class="literal">&lt;programmer&gt;</tt>. We will see an example XSLT
stylesheet when we discuss parameters.
</p>

<blockquote><pre class="code">&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;team&gt;
  &lt;manager ssn="230568737"&gt;
    &lt;name&gt;Aidan Burke&lt;/name&gt;
  &lt;/manager&gt;
  &lt;programmer ssn="393776766"&gt;
    &lt;name&gt;Jennifer Burke&lt;/name&gt;
  &lt;/programmer&gt;
  &lt;programmer ssn="993885777"&gt;
    &lt;name&gt;Bill Tellam&lt;/name&gt;
  &lt;/programmer&gt;
&lt;/team&gt;</pre></blockquote>

</div>
<a name="javaxslt-CHP-3-SECT-2.3" /><div class="sect2">
<h3 class="sect2">3.2.3. &lt;xsl:param&gt;and &lt;xsl:with-param&gt;</h3>

<p>It is difficult to use named templates without
<a name="INDEX-343" />parameters, and
parameters can also be used for regular templates. Parameters allow
the same template to take on different behavior depending on data the
caller provides, resulting in more reusable code fragments. In the
case of a named template, parameters allow data such as a social
security number to be passed into the template. <a href="ch03_02.htm">Example 3-3</a> contains a complete stylesheet that
demonstrates how to pass the <tt class="literal">ssn</tt> parameter into a
named template.
</p>

<a name="javaxslt-CHP-3-EX-3" /><div class="example">
<h4 class="objtitle">Example 3-3. namedTemplate.xslt </h4>
<blockquote><pre class="code">&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;xsl:stylesheet version="1.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform"&gt;
  &lt;xsl:output method="html"/&gt;
  &lt;xsl:template match="/"&gt;
    &lt;html&gt;
      &lt;body&gt;
        &lt;h3&gt;Team Members&lt;/h3&gt;
        &lt;ul&gt;
        <tt class="userinput"><b>&lt;xsl:for-each select="team/manager|team/programmer"&gt;</b></tt>
          &lt;xsl:sort select="name"/&gt;
          &lt;li&gt;
            &lt;xsl:value-of select="name"/&gt;
            &lt;xsl:text&gt;, ssn = &lt;/xsl:text&gt;
            <tt class="userinput"><b>&lt;xsl:call-template name="formatSSN"&gt;
              &lt;xsl:with-param name="ssn" select="@ssn"/&gt;
            &lt;/xsl:call-template&gt;</b></tt>
          &lt;/li&gt;
        &lt;/xsl:for-each&gt;
        &lt;/ul&gt;
      &lt;/body&gt;
    &lt;/html&gt;
  &lt;/xsl:template&gt;

  &lt;!-- a named template that formats a 9 digit SSN
       by inserting '-' characters --&gt;
  <tt class="userinput"><b>&lt;xsl:template name="formatSSN"&gt;
    &lt;xsl:param name="ssn"/&gt;</b></tt>
    &lt;xsl:value-of select="substring($ssn, 1, 3)"/&gt;
    &lt;xsl:text&gt;-&lt;/xsl:text&gt;
    &lt;xsl:value-of select="substring($ssn, 4, 2)"/&gt;
    &lt;xsl:text&gt;-&lt;/xsl:text&gt;
    &lt;xsl:value-of select="substring($ssn, 6)"/&gt;
  &lt;/xsl:template&gt;
&lt;/xsl:stylesheet&gt;</pre></blockquote>
</div>

<p>This stylesheet displays the managers and programmers in a list,
sorted by name. The <tt class="literal">&lt;xsl:for-each&gt;</tt> element
selects the <em class="emphasis">union</em> of
<tt class="literal">team/manager</tt> and
<tt class="literal">team/programmer</tt>, so all of the managers and
programmers are listed. The pipe operator
(<tt class="literal">|</tt><a name="INDEX-344" />) computes the union of its two
operands:
</p>

<blockquote><pre class="code">&lt;xsl:for-each select="team/manager|team/programmer"&gt;</pre></blockquote>

<p>For each manager or programmer, the content of the
<tt class="literal">&lt;name&gt;</tt> element is printed, followed by the
value of the <tt class="literal">ssn</tt> attribute, which is passed as a
parameter to the <tt class="literal">formatSSN</tt> template. Passing one
or more parameters is accomplished by adding
<tt class="literal">&lt;xsl:with-param&gt;</tt><a name="INDEX-345" />
<a name="INDEX-346" /> as a child of
<tt class="literal">&lt;xsl:call-template&gt;</tt><a name="INDEX-347" />
<a name="INDEX-348" />. To pass
additional parameters, simply list additional
<tt class="literal">&lt;xsl:with-param&gt;</tt> elements, all as children
of <tt class="literal">&lt;xsl:call-template&gt;</tt>.
</p>

<p>At the receiving end, <tt class="literal">&lt;xsl:param&gt;</tt> is used as
follows:
</p>

<blockquote><pre class="code"><tt class="userinput"><b>
&lt;xsl:template name="formatSSN"&gt;</b></tt><tt class="userinput"><b>
  &lt;xsl:param name="ssn"/&gt;</b></tt><tt class="userinput"><b>
  ...</b></tt>
</pre></blockquote>
<p>In this case, the value of the ssn parameter defaults to an empty
string if it is not passed. In order to specify a default value for a
parameter, use the select attribute. In the following example, the
zeros are in apostrophes in order to treat the default value as a
string rather than as an XPath expression:
</p><blockquote><pre class="code">
<tt class="userinput"><b>
&lt;xsl:param name="ssn" select="'000000000'"/&gt;</b></tt>
</pre></blockquote>
<p>Within the formatSSN template, you can see that the substring( )
function selects portions of the social security number string. More
details on substring( ) and other string-formatting functions are
discussed later in this chapter.<a name="INDEX-349" /> 
</p>

</div>
<a name="javaxslt-CHP-3-SECT-2.4" /><div class="sect2">
<h3 class="sect2">3.2.4. Incrementing Variables</h3>

<p><a name="INDEX-350" />Unfortunately,
there is no standard way to increment a variable in XSLT. Once a
variable has been defined, it cannot be changed. This is comparable
to a final field in Java. In some circumstances, however, recursion
combined with template parameters can achieve similar results. The
XML shown in <a href="ch03_02.htm">Example 3-4</a> will be used to illustrate
one such approach.
</p>

<a name="javaxslt-CHP-3-EX-4" /><div class="example">
<h4 class="objtitle">Example 3-4. familyTree.xml </h4>
<blockquote><pre class="code">&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;?xml-stylesheet type="text/xsl" href="familyTree.xslt"?&gt;
&lt;person name="Otto"&gt;
  &lt;person name="Sandra"&gt;
    &lt;person name="Jeremy"&gt;
      &lt;person name="Eliana"/&gt;
    &lt;/person&gt;
    &lt;person name="Eric"&gt;
      &lt;person name="Aidan"/&gt;
    &lt;/person&gt;
    &lt;person name="Philip"&gt;
      &lt;person name="Alex"/&gt;
      &lt;person name="Andy"/&gt;
    &lt;/person&gt;
  &lt;/person&gt;
&lt;/person&gt;</pre></blockquote>
</div>

<p>As you can see, the XML is structured recursively. Each
<tt class="literal">&lt;person&gt;</tt> element can contain any number of
<tt class="literal">&lt;person&gt;</tt> children, which in turn can contain
additional <tt class="literal">&lt;person&gt;</tt> children. This is
certainly a simplified family tree, but this recursive pattern does
occur in many XML documents. When displaying this family tree, it is
desirable to indent the text according to the ancestry. Otto would be
at the root, Sandra would be indented by one space, and her children
would be indented by an additional space. This gives a visual
indication of the relationships between the people. For example:
</p>

<blockquote><pre class="code">Otto
  Sandra
    Jeremy
      Eliana
    Eric
      Aidan
    Philip
      Alex
      Andy </pre></blockquote>

<p>The XSLT stylesheet that produces this output is shown in <a href="ch03_02.htm">Example 3-5</a>. 
</p>

<a name="javaxslt-CHP-3-EX-5" /><div class="example">
<h4 class="objtitle">Example 3-5. familyTree.xslt </h4>
<blockquote><pre class="code">&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;xsl:stylesheet version="1.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform"&gt;
  &lt;xsl:output method="html"/&gt;
  
  &lt;!-- processing begins here --&gt;
  &lt;xsl:template match="/"&gt;
    &lt;html&gt;
      &lt;body&gt;
        &lt;!-- select the top level person --&gt;
        <tt class="userinput"><b>&lt;xsl:apply-templates select="person"&gt;
          &lt;xsl:with-param name="level" select="'0'"/&gt;
        &lt;/xsl:apply-templates&gt;</b></tt>
      &lt;/body&gt;
    &lt;/html&gt;
  &lt;/xsl:template&gt;
  
  &lt;!-- Output information for a person and recursively select
       all children. --&gt;
  &lt;xsl:template match="person"&gt;
    <tt class="userinput"><b>&lt;xsl:param name="level"/&gt;</b></tt>
  
    &lt;!-- indent according to the level --&gt;
    &lt;div style="text-indent:{$level}em"&gt;
      &lt;xsl:value-of select="@name"/&gt;
    &lt;/div&gt;
  
    &lt;!-- recursively select children, incrementing the level --&gt;
    <tt class="userinput"><b>&lt;xsl:apply-templates select="person"&gt;
      &lt;xsl:with-param name="level" select="$level + 1"/&gt;
    &lt;/xsl:apply-templates&gt;</b></tt>
  &lt;/xsl:template&gt;
&lt;/xsl:stylesheet&gt;</pre></blockquote>
</div>

<p>As usual, this stylesheet begins by matching the document root and
outputting a basic HTML document. It then selects the root
<tt class="literal">&lt;person&gt;</tt> element, passing
<tt class="literal">level=0</tt> as the parameter to the template that
matches <tt class="literal">person</tt>:
</p>

<blockquote><pre class="code">&lt;xsl:apply-templates select="person"&gt;
  &lt;xsl:with-param name="level" select="'0'"/&gt;
&lt;/xsl:apply-templates&gt;</pre></blockquote>

<p>The <tt class="literal">person</tt> template uses an HTML
<tt class="literal">&lt;div&gt;</tt> tag to display each person's
name on a new line and specifies a text indent in
<tt class="literal">em</tt> s. In Cascading Style Sheets, one
<tt class="literal">em</tt> is supposed to be equal to the width of the
lowercase letter <tt class="literal">m</tt> in the current font. Finally,
the <tt class="literal">person</tt> template is invoked recursively,
passing in <tt class="literal">$level + 1</tt> as the parameter. Although
this does not increment an existing variable, it does pass a new
local variable to the template with a larger value than before. Other
than tricks with recursive processing, there is really no way to
increment the values of variables in XSLT.<a name="INDEX-351" /><a name="INDEX-352" />
</p>

</div>
<a name="javaxslt-CHP-3-SECT-2.5" /><div class="sect2">
<h3 class="sect2">3.2.5. Template Modes</h3>

<p>The final variation on <a name="INDEX-353" />templates is that of the
<tt class="literal">mode</tt><a name="INDEX-354" />.
This feature is similar to parameters but a little simpler, sometimes
resulting in cleaner code. Modes make it possible for multiple
templates to match the same pattern, each using a different mode of
operation. One template may display data in verbose mode, while
another may display the same data in abbreviated mode. There are no
predefined modes; you make them up. The <tt class="literal">mode</tt>
attribute looks like this:
</p>

<blockquote><pre class="code">&lt;xsl:template match="name" mode="verbose"&gt;
   ...display the full name
&lt;/xsl:template&gt;

&lt;xsl:template match="name" mode="abbreviated"&gt;
   ...omit the middle name
&lt;/xsl:template&gt;</pre></blockquote>

<p>In order to instantiate the appropriate template, a
<tt class="literal">mode</tt> attribute must be added to
<tt class="literal">&lt;xsl:apply-templates&gt;</tt> as follows:
</p>

<blockquote><pre class="code">&lt;xsl:apply-templates select="president/name" mode="verbose"/&gt;</pre></blockquote>

<p>If the <tt class="literal">mode</tt> attribute is omitted, then the
processor searches for a matching template that does not have a mode.
In the code shown here, both templates have modes, so you must
include a mode on <tt class="literal">&lt;xsl:apply-templates&gt;</tt> in
order for one of your templates to be instantiated.
</p>

<p>A complete stylesheet is shown in <a href="ch03_02.htm">Example 3-6</a>. In
this example, the name of a president may occur inside either a table
or a list. Instead of passing a parameter to the
<tt class="literal">president</tt> template, two modes of operation are
defined. In <tt class="literal">table</tt><a name="INDEX-355" /> mode, the template displays the name as a
row in a table. In <tt class="literal">list</tt><a name="INDEX-356" /> mode, the name is displayed as an HTML
list item.
</p>

<a name="javaxslt-CHP-3-EX-6" /><div class="example">
<h4 class="objtitle">Example 3-6. Template modes </h4>
<blockquote><pre class="code">&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;xsl:stylesheet version="1.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform"&gt;
  &lt;xsl:output method="html"/&gt;
  
  &lt;!--
    ** Demonstrates how to use template modes
    --&gt;
  &lt;xsl:template match="/"&gt;
    &lt;html&gt;
      &lt;body&gt;

        &lt;h2&gt;Presidents in an HTML Table&lt;/h2&gt;
        &lt;table border="1"&gt;
          &lt;tr&gt;
            &lt;th&gt;Last Name&lt;/th&gt;
            &lt;th&gt;First Name&lt;/th&gt;
          &lt;/tr&gt;
          <tt class="userinput"><b>&lt;xsl:apply-templates select="//president" mode="table"/&gt;</b></tt>
        &lt;/table&gt;
        
        &lt;h2&gt;Presidents in an Unordered List&lt;/h2&gt;
        &lt;ul&gt;
          <tt class="userinput"><b>&lt;xsl:apply-templates select="//president" mode="list"/&gt;</b></tt>
        &lt;/ul&gt;
      &lt;/body&gt;
    &lt;/html&gt;
  &lt;/xsl:template&gt;
  
  &lt;!--
    ** Display a president's name as a table row
    --&gt;
  <tt class="userinput"><b>&lt;xsl:template match="president" mode="table"&gt;</b></tt>
    &lt;tr&gt;
      &lt;td&gt;
        &lt;xsl:value-of select="name/last"/&gt;
      &lt;/td&gt;
      &lt;td&gt;
        &lt;xsl:value-of select="name/first"/&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
  &lt;/xsl:template&gt;
  
  &lt;!--
    ** Display a president's name as a list item
    --&gt;
  <tt class="userinput"><b>&lt;xsl:template match="president" mode="list"&gt;</b></tt>
    &lt;li&gt;
      &lt;xsl:value-of select="name/last"/&gt;
      &lt;xsl:text&gt;, &lt;/xsl:text&gt;
      &lt;xsl:value-of select="name/first"/&gt;
    &lt;/li&gt;
  &lt;/xsl:template&gt;
  
&lt;/xsl:stylesheet&gt;</pre></blockquote>
</div>

</div>
<a name="javaxslt-CHP-3-SECT-2.6" /><div class="sect2">
<h3 class="sect2">3.2.6. &lt;xsl:template&gt; Syntax Summary</h3>

<p>Sorting through all of the possible variations of
<tt class="literal">&lt;xsl:template&gt;</tt><a name="INDEX-357" /> is a
seemingly difficult task, but we have really only covered three
attributes:
</p>

<dl>
<dt><tt class="literal">match</tt></dt>
<dd>
Specifies the node in the XML data that a template applies to</p>
</dd>

</dl>

<dl>
<dt><tt class="literal">name</tt></dt>
<dd>
Defines an arbitrary name for a template, independent of specific XML
data
</p>
</dd>

</dl>

<dl>
<dt><tt class="literal">mode</tt></dt>
<dd>
Similar to method overloading in Java, allowing multiple versions of
a template that match the same pattern
</p>
</dd>

</dl>

<p>The only attribute we have not discussed in detail is
<tt class="literal">priority</tt>, which is used to resolve conflicts when
more than one template matches. The XSLT specification defines a very
specific set of steps for processors to follow when more than one
template rule matches.<a href="#FOOTNOTE-11">[11]</a>
From a code maintenance perspective, it is a good idea to avoid
conflicting template rules within a stylesheet. When combining
multiple stylesheets, however, you may find yourself with conflicting
template rules. In these cases, specifying a higher numeric priority
for one of the conflicting templates can resolve the problem. <a href="ch03_02.htm">Table 3-1</a> provides a few summarized examples of the
various forms of <tt class="literal">&lt;xsl:template&gt;</tt>.
</p><blockquote class="footnote"> <a name="FOOTNOTE-11" /><p> [11] See section 5.5 of the XSLT
specification at <a href="../../../../../../www.w3.org/TR/xslt">http://www.w3.org/TR/xslt</a>.</p> </blockquote>

<a name="javaxslt-CHP-3-TABLE-1" /><h4 class="objtitle">Table 3-1. Summary of common template syntax </h4><table border="1" cellpadding="3">



<tr>
<th>
<p>Template example</p>
</th>
<th>
<p>Notes</p>
</th>
</tr>


<tr>
<td>
<blockquote><pre class="code">&lt;xsl:template match="president"&gt;
  ...
&lt;/xsl:template&gt;</pre></blockquote>
</td>
<td>
<p>Matches <tt class="literal">president</tt> nodes in the source XML document</p>
</td>
</tr>
<tr>
<td>
<blockquote><pre class="code">&lt;xsl:template name="formatName"&gt;
  &lt;xsl:param name="style"/&gt;
  ...
&lt;/xsl:template&gt;</pre></blockquote>
</td>
<td>
<p>Defines a named template; used in conjunction with
&lt;<tt class="literal">xsl:call-template&gt;</tt> and
&lt;<tt class="literal">xsl:with-param&gt;</tt>
</p>
</td>
</tr>
<tr>
<td>
<blockquote><pre class="code">&lt;xsl:template match="customer"
    mode="myModeName"&gt;
  ...
&lt;/xsl:template&gt;</pre></blockquote>
</td>
<td>
<p>Matches <tt class="literal">customer</tt> nodes when
&lt;<tt class="literal">xsl:apply-templates&gt;</tt> also uses
<tt class="literal">mode="myModeName"</tt>
</p>
</td>
</tr>

</table><p>

</div>


<hr width="684" align="left" />
<div class="navbar"><table width="684" border="0"><tr><td align="left" valign="top" width="228"><a href="ch03_01.htm"><img src="../gifs/txtpreva.gif" alt="Previous" border="0" /></a></td><td align="center" valign="top" width="228"><a href="index.htm"><img src="../gifs/txthome.gif" alt="Home" border="0" /></a></td><td align="right" valign="top" width="228"><a href="ch03_03.htm"><img src="../gifs/txtnexta.gif" alt="Next" border="0" /></a></td></tr><tr><td align="left" valign="top" width="228">3. XSLT Part 2 -- Beyond the Basics</td><td align="center" valign="top" width="228"><a href="index/index.htm"><img src="../gifs/index.gif" alt="Book Index" border="0" /></a></td><td align="right" valign="top" width="228">3.3. Combining Multiple Stylesheets</td></tr></table></div>
<hr width="684" align="left" />

<img src="../gifs/navbar.gif" usemap="#library-map" border="0" alt="Library Navigation Links" />
<p><p><font size="-1"><a href="copyrght.htm">Copyright &copy; 2002</a> O'Reilly &amp; Associates. All rights reserved.</font></p>

<map name="library-map"><area shape="rect" coords="0,0,85,93" href="../index.htm"><area shape="rect" coords="85,0,180,98" href="../sax2/index.htm"><area shape="rect" coords="182,-1,261,100" href="../xmlnut/index.htm"><area shape="rect" coords="263,1,384,96" href="../jxml/index.htm"><area shape="rect" coords="386,1,463,100" href="index.htm"><area shape="rect" coords="466,1,533,112" href="../xslt/index.htm"><area shape="rect" coords="535,-1,610,108" href="../schema/index.htm"><area shape="rect" coords="613,1,696,121" href="../pxml/index.htm"></map>

</body></html>