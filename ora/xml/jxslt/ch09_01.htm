<html><head><title>Development Environment, Testing, and Performance (Java and XSLT)</title><link rel="stylesheet" type="text/css" href="../style/style1.css" />

<meta name="DC.Creator" content="Eric M. Burke" /><meta name="DC.Format" content="text/xml" scheme="MIME" /><meta name="DC.Language" content="en-US" /><meta name="DC.Publisher" content="O'Reilly &amp; Associates, Inc." /><meta name="DC.Source" scheme="ISBN" content="0596001453L" /><meta name="DC.Subject.Keyword" content="stuff" /><meta name="DC.Title" content="Java and XSLT" /><meta name="DC.Type" content="Text.Monograph" />

</head><body bgcolor="#ffffff">

<img src="gifs/smbanner.gif" usemap="#banner-map" border="0" alt="Book Home" /><map name="banner-map"><area shape="rect" coords="1,-2,616,66" href="index.htm" alt="Java and XSLT" /><area shape="rect" coords="629,-11,726,25" href="jobjects/fsearch.htm" alt="Search this book" /></map>

<div class="navbar"><table width="684" border="0"><tr><td align="left" valign="top" width="228"><a href="ch08_06.htm"><img src="../gifs/txtpreva.gif" alt="Previous" border="0" /></a></td><td align="center" valign="top" width="228" /><td align="right" valign="top" width="228"><a href="ch09_02.htm"><img src="../gifs/txtnexta.gif" alt="Next" border="0" /></a></td></tr></table></div>


<h1 class="chapter">Chapter 9. Development Environment, Testing, and Performance</h1>
<div class="htmltoc"><h4 class="tochead">Contents:</h4>
  <p> <a href="#javaxslt-CHP-9-SECT-1">Development Environment</a><br />
<a href="ch09_02.htm">Testing and Debugging</a><br />
<a href="ch09_03.htm">Performance Techniques</a><br /></p></div><p><a name="INDEX-1068" /></a>This chapter provides an overview
of many different technologies that comprise a typical Java and XSLT
<a name="INDEX-1069" /></a>software development environment.
Once the most commonly used tools are introduced, strategies for
testing XSLT and tuning performance are presented. Instead of
presenting specific performance benchmarks for various XSLT
processors, this chapter's focus is on effective programming
techniques that should be applicable to a wide range of tools. XSLT
is a very young technology, and tools are improving all the time.
</p><div class="sect1"><a name="javaxslt-CHP-9-SECT-1" /></a>
<h2 class="sect1">9.1. Development Environment</h2>

<p>Specialized, lightweight <a name="INDEX-1070" /></a>development tools have never been more
important to Java developers. Commercial integrated development
environments (IDEs) are now only one small piece of a larger suite of
essential tools used by a majority of Java development projects.
These build tools such as Ant, testing tools such as JUnit, and
various XML parsers and XSLT processors. <a href="ch09_01.htm">Figure 9-1</a>
illustrates some of the tools found in a typical Java and XSLT
development environment.
</p>

<a name="javaxslt-CHP-9-FIG-1" /></a><div class="figure"><img src="figs/jxt_0901.gif" alt="Figure 9-1" width="318" height="243" /></div><h4 class="objtitle">Figure 9-1. Common Java, XML, and XSLT tools</h4>

<p>Although this is a typical development environment, it can be a large
number of tools to keep track of. <a href="ch09_01.htm">Table 9-1</a>
summarizes how each of these tools is used.
</p>

<a name="javaxslt-CHP-9-TABLE-1" /></a><h4 class="objtitle">Table 9-1. Tool overview </h4><table border="1" cellpadding="3">



<tr>
<th>
<p>Tool</p>
</th>
<th>
<p>Description</p>
</th>
</tr>


<tr>
<td>
<p>Java 2 SDK</p>
</td>
<td>
<p>The Java 2 software development kit, i.e., the JDK.</p>
</td>
</tr>
<tr>
<td>
<p>Apache's JMeter</p>
</td>
<td>
<p>A stress-testing tool, primarily used to test scalability and
performance of servlets and web sites.
</p>
</td>
</tr>
<tr>
<td>
<p>EJB Container</p>
</td>
<td>
<p>Enterprise JavaBeans server, such as JBoss, Enhydra, WebLogic, or
WebSphere.
</p>
</td>
</tr>
<tr>
<td>
<p>XML Parser</p>
</td>
<td>
<p>Xerces, Crimson, or another SAX and/or DOM parser.</p>
</td>
</tr>
<tr>
<td>
<p>XSLT Processor</p>
</td>
<td>
<p>Xalan, SAXON, or any other XSLT processor.</p>
</td>
</tr>
<tr>
<td>
<p>Servlet Container</p>
</td>
<td>
<p>Apache's Tomcat or any other servlet host. Many application
servers include both servlet containers and EJB containers.
</p>
</td>
</tr>
<tr>
<td>
<p>JAXP</p>
</td>
<td>
<p>Provides a common API to XML parsers and XSLT processors. </p>
</td>
</tr>
<tr>
<td>
<p>Apache's Ant</p>
</td>
<td>
<p>A Java replacement for <em class="filename">make</em>. Ant build files
provide a consistent way for every member of the development team to
compile and test code.
</p>
</td>
</tr>
<tr>
<td>
<p>IDE</p>
</td>
<td>
<p>An integrated development environment, such as Borland's
JBuilder.
</p>
</td>
</tr>
<tr>
<td>
<p>JUnit</p>
</td>
<td>
<p>An open source unit testing framework.</p>
</td>
</tr>

</table><p>

<p>Some individual tools are much more powerful when used in the context
of an overall development environment.
<a name="INDEX-1071" /></a>JUnit is much more
effective when used in combination with
<a name="INDEX-1072" /></a>Ant, because Ant ensures
that every developer on the team is compiling and testing with the
same settings. This means that unit tests executed by one developer
should work the same way for everyone else. Without Ant, unit tests
that succeed for one developer may fail for others, since they may be
using different versions of some tools.
</p>

<a name="javaxslt-CHP-9-SECT-1.1" /></a><div class="sect2">
<h3 class="sect2">9.1.1. CLASSPATH Issues</h3>

<p><a name="INDEX-1073" /></a>The migration from first generation
XML parsers and XSLT processors has been a somewhat painful
experience for Java developers. Although the newer APIs are great,
older JAR files linger throughout many applications and directories,
causing more than their fair share of configuration difficulties.
This section describes some of the most common problems and offers
advice for configuring several popular tools.
</p>

<a name="javaxslt-CHP-9-SECT-1.1.1" /></a><div class="sect3">
<h3 class="sect3">9.1.1.1. JAR hell?</h3>

<p><a name="INDEX-1074" /></a>A common complaint against Microsoft
Windows systems is known as "DLL Hell." This refers to
problems that occur when two applications require different versions
of the same DLL file. Installing a new application may overwrite an
older version of a DLL file that existing applications depend on,
causing erratic behavior or outright system crashes.<a href="#FOOTNOTE-45">[45]</a>
</p><blockquote class="footnote">
<a name="FOOTNOTE-45" /></a><p> [45] Commonly referred to as the blue screen of death.</p>
</blockquote>

<p>More frequently than ever before, Java developers must contend with
incompatible <a name="INDEX-1075" /></a>JAR file
versions. For instance, JAXP 1.0 and JAXP 1.1 both ship with a JAR
file named <em class="filename">jaxp.jar</em>. Applications that require
JAXP 1.1 functionality will fail if the 1.0 version of
<em class="filename">jaxp.jar</em> is listed on the CLASSPATH earlier than
the newer version. This happens more often than developers expect,
because many commercial and open source development tools ship with
XML parsers and XSLT processors. The installation routines for these
tools may install JAR files without informing developers or asking
for their consent.
</p>

<p>The simple fix is to locate and remove old versions of JAR files.
This is easier said than done, because in many cases (such as JAXP),
the version number is not part of the JAR filename. Since many tools
ignore or modify the CLASSPATH when they are executed, simply
removing older JAR files from the CLASSPATH will not eradicate all
problems. Instructions for fixing this problem in Ant, Tomcat, and
JBuilder are coming up.
</p>

<p>Some JAR files are beginning to include version information inside of
the
<em class="filename">META-INF/MANIFEST.MF</em><a name="INDEX-1076" /></a> file. This is called the manifest and can
be extracted with the following command, where
<em class="filename">filename.jar</em> is the name of the JAR file:
</p>

<blockquote><pre class="code">jar -xf filename.jar META-INF/MANIFEST.MF</pre></blockquote>

<p>Once extracted, the manifest can be viewed with any text editor.
<a href="ch09_01.htm">Example 9-1</a> shows the content of the manifest from
Version 1.0 of <em class="filename">jaxp.jar</em>:
</p>

<a name="javaxslt-CHP-9-EX-1" /></a><div class="example">
<h4 class="objtitle">Example 9-1. Version 1.0 jaxp.jar manifest contents </h4>
<blockquote><pre class="code">Manifest-Version: 1.0
Specification-Title:  Java API for XML Parsing Interfaces
Specification-Vendor: Sun Microsystems
Created-By: 1.2.2 (Sun Microsystems Inc.)
Specification-Version: 1.0.0

Name: javax/xml/parsers
Package-Version: 1.0.0
Specification-Title:  Java API for XML Parsing
Specification-Vendor: Sun Microsystems
Sealed: true
Specification-Version: 1.0.0
Package-Vendor: Sun Microsystems, Inc.
Package-Title: javax.xml.parsers</pre></blockquote>
</div>

<p>This manifest makes it quite easy to identify the contents of this
JAR file. Although Sun's products tend to be very good about
this, the manifest contents are entirely optional, and many other
products omit all manifest information.
</p>

</div>

<a name="javaxslt-CHP-9-SECT-1.1.2" /></a><div class="sect3">
<h3 class="sect3">9.1.1.2. Sealing violations</h3>

<p>The dreaded "sealing violation" is one of the more
cryptic exceptions encountered. <a href="ch09_01.htm">Example 9-2</a> shows a
stack trace that is displayed when a sealing violation occurs.
</p>

<a name="javaxslt-CHP-9-EX-2" /></a><div class="example">
<h4 class="objtitle">Example 9-2. Sealing violation stack trace </h4>
<blockquote><pre class="code"><tt class="userinput"><b>Exception in thread "main" java.lang.SecurityException: sealing violation</b></tt>
  at java.net.URLClassLoader.defineClass(URLClassLoader.java:234)
  at java.net.URLClassLoader.access$100(URLClassLoader.java:56)
  at java.net.URLClassLoader$1.run(URLClassLoader.java:195)
  at java.security.AccessController.doPrivileged(Native Method)
  at java.net.URLClassLoader.findClass(URLClassLoader.java:188)
  at java.lang.ClassLoader.loadClass(ClassLoader.java:297)
  at sun.misc.Launcher$AppClassLoader.loadClass(Launcher.java:286)
  at java.lang.ClassLoader.loadClass(ClassLoader.java:253)
  at java.lang.ClassLoader.loadClassInternal(ClassLoader.java:313)
  at java.lang.Class.forName0(Native Method)
  at java.lang.Class.forName(Class.java:120)
  at javax.xml.transform.TransformerFactory.newInstance(TransformerFactory.java:117)
  <tt class="userinput"><b>at Test.main(Test.java:17)</b></tt></pre></blockquote>
</div>

<p>This exception is hard to diagnose because the error message is not
very descriptive, and the stack trace consists mostly of internal
Java classes. According to the stack trace, line 17 of
<em class="filename">Test.java</em> caused the problem. Here it is:
</p>

<blockquote><pre class="code">TransformerFactory transFact = TransformerFactory.newInstance( );</pre></blockquote>

<p>Actually, this line of code is perfectly correct. The problem lies in
the CLASSPATH instead. The key to understanding this error is the
sealing violation description. This indicates that one or more
<em class="emphasis">sealed</em> <a name="INDEX-1077" /></a>JAR files are on the CLASSPATH in the
wrong order.
</p>

<p>A sealed JAR file has a manifest entry <tt class="literal">Sealed:
true</tt>, as shown in <a href="ch09_01.htm">Example 9-1</a>.<a href="#FOOTNOTE-46">[46]</a> The package sealing mechanism was
introduced in Java Version 1.2 to enforce version consistency.
Whenever a package is sealed, all classes in that package must be
loaded from the same JAR file. If some of the classes are loaded from
one JAR file and others from another, an instance of
<tt class="literal">java.lang.SecurityException</tt><a name="INDEX-1078" /></a>
is thrown. <a href="ch09_01.htm">Figure 9-2</a> illustrates the problem.
</p><blockquote class="footnote">
<a name="FOOTNOTE-46" /></a><p> [46] It is also possible to seal individual packages within a JAR
file. Refer to the Java 2 Standard Edition documentation for more
information.</p> </blockquote>

<a name="javaxslt-CHP-9-FIG-2" /></a><div class="figure"><img src="figs/jxt_0902.gif" alt="Figure 9-2" width="457" height="217" /></div><h4 class="objtitle">Figure 9-2. Sealing violation</h4>

<p>In this diagram, <em class="filename">parser.jar</em> is listed on the
CLASSPATH before <em class="filename">crimson.jar</em>. This is a problem
because Java applications search JAR files in the order in which they
appear on the CLASSPATH. Once the
<tt class="literal">org.xml.sax.SAXException</tt> class has been loaded by
the JVM, any additional classes or interfaces in the
<tt class="literal">org.xml.sax</tt> package must be loaded from
<em class="filename">parser.jar</em> because it is sealed. When the
application requests an instance of
<tt class="literal">ContentHandler</tt>, the class loader attempts to load
the requested class file from <em class="filename">crimson.jar</em>, which
triggers the <tt class="literal">SecurityException</tt> shown in <a href="ch09_01.htm">Example 9-2</a>. The simple fix to this problem is to remove
<em class="filename">parser.jar</em> from the CLASSPATH, which will load
all classes in the <tt class="literal">org.xml.sax</tt> package from
<em class="filename">crimson.jar</em>.
</p>

</div>

<a name="javaxslt-CHP-9-SECT-1.1.3" /></a><div class="sect3">
<h3 class="sect3">9.1.1.3. Other exceptions and errors</h3>

<p>Other various "configuration" exceptions defined by
<a name="INDEX-1079" /></a>JAXP are
<tt class="literal">javax.xml.transform.TransformerConfigurationException</tt><a name="INDEX-1080" /></a> and
<tt class="literal">javax.xml.parsers.Factory</tt><a name="INDEX-1081" /></a>
<a name="INDEX-1082" /></a>-<tt class="literal">ConfigurationError</tt>.
These may occur when an older version of
<em class="filename">jaxp.jar</em> is still listed on the CLASSPATH. Since
JAXP 1.0 is not aware of SAX 2, DOM 2, or XSLT transformations,
applications requesting any of these new features may see one of
these exceptions when JAXP 1.0 is installed instead of JAXP 1.1.
</p>

<p>As mentioned earlier, the filename <em class="filename">jaxp.jar</em> is
used with Versions 1.0 and 1.1 of JAXP. Therefore, special care must
be taken to ensure that the newer copy is present instead of the old
one. Since <a name="INDEX-1083" /></a>JAXP 1.1 is backwards-compatible
with Version 1.0, the older version can be safely replaced without
breaking currently installed applications that depend on it.
</p>

<p>The easiest exception to debug is
<tt class="literal">java.lang.ClassNotFoundException</tt><a name="INDEX-1084" /></a>
<a name="INDEX-1085" /></a>.
This may occur when JAXP 1.1 is listed on the CLASSPATH. However, an
XSLT processor or XML parser is not listed. To remedy this situation,
merely add a JAXP-compliant parser and XSLT processor to the
CLASSPATH.
</p>

</div>

<a name="javaxslt-CHP-9-SECT-1.1.4" /></a><div class="sect3">
<h3 class="sect3">9.1.1.4. Java optional packages</h3>

<p>The <a name="INDEX-1086" /></a>Java VM does not simply load classes based
on the <a name="INDEX-1087" /></a>CLASSPATH environment variable. Before
searching the CLASSPATH, the VM attempts to load classes from an
optional package directory. An
<em class="emphasis">installed</em><a name="INDEX-1088" /></a> optional package is a JAR file located
in the Java 2 Runtime Environment's
<em class="filename">lib/ext</em> directory or in the
<em class="filename">jre/lib/ext</em> directory of the Java 2 SDK.
</p>

<p>If an installed optional package is not located, the VM then searches
for <em class="emphasis">download</em><a name="INDEX-1089" /></a> optional packages. These are
JAR files that are explicitly referenced by the
<tt class="literal">Class-Path</tt> manifest header of another JAR file.
For example, a manifest might contain the following line:
</p>

<blockquote><pre class="code">Class-Path: jaxp.jar</pre></blockquote>

<p>In this case, the VM would look for <em class="filename">jaxp.jar</em> in
the same directory as the JAR file that contains the manifest entry.
</p>

<p>The best way to ensure that the correct version of XML parser, XSLT
processor, and JAXP are installed is to manually copy the required
JAR files to the installed optional package directory. Software
developers should have the Java 2 SDK installed and should place JAR
files in the <em class="filename">JAVA_HOME/jre/lib/ext</em> directory.
End users, however, will probably use the Java 2 Runtime Environment
instead of the entire SDK. For these users, the JAR files can be
installed to the <em class="filename">lib/ext</em> directory where the JRE
is installed.
</p>

<p>To uninstall a Java optional package, merely delete the JAR file from
the appropriate directory.<a name="INDEX-1090" /></a> 
</p>

</div>

<a name="javaxslt-CHP-9-SECT-1.1.5" /></a><div class="sect3">
<h3 class="sect3">9.1.1.5. Java IDEs</h3>

<p><a name="INDEX-1091" /></a> <a name="INDEX-1092" /></a>Many
developers use tools such as Borland's
<a name="INDEX-1093" /></a>JBuilder as Java
development environments. These tools can introduce problems because
they typically include a copy of the Java 2 SDK. When running and
compiling within the IDE, the VM uses the tool's own Java
directory rather than the Sun Java 2 SDK that is probably already
installed elsewhere on the system. <a href="ch09_01.htm">Figure 9-3</a> is a
typical directory structure that illustrates this potential problem.
</p>

<a name="javaxslt-CHP-9-FIG-3" /></a><div class="figure"><img src="figs/jxt_0903.gif" alt="Figure 9-3" width="478" height="409" /></div><h4 class="objtitle">Figure 9-3. Typical directory structure</h4>

<p>In this example, JBuilder is properly configured with JAXP 1.1, the
Crimson XML parser, and the Xalan 2.0 JAR file. This means that
compilation, running, and debugging will all work properly within the
JBuilder IDE. But once the application is executed outside of
JBuilder, it will probably fail. This is because the Java 2 SDK
contains the older JAXP 1.0 JAR file and its older XML parser.
</p>

<p>Merely adding the newer JAXP-related JAR files to the CLASSPATH will
probably introduce a sealing exception rather than fix the problem,
because the VM will still load files from the installed optional
package directory before searching the CLASSPATH. One way to fix this
problem is to replace <em class="filename">jaxp.jar</em> and
<em class="filename">parser.jar</em> with the same JAR files found in
JBuilder's directory. Another option is to update the JAVA_HOME
environment variable and PATH to point to JBuilder's version of
Java.
</p>

</div>
</div>
<a name="javaxslt-CHP-9-SECT-1.2" /></a><div class="sect2">
<h3 class="sect2">9.1.2. Ant</h3>

<p><a name="INDEX-1094" /></a>Configuring
JAR files and the CLASSPATH on a single developer's machine can
be difficult; keeping an entire team of developers in sync requires
support from tools. For this reason, it is critical that every team
member use the same build process when testing and integrating code
changes. In this section, we take a brief look at Apache's Ant.
</p>

<p>As discussed in <a href="ch03_01.htm">Chapter 3, "XSLT Part 2 -- Beyond the Basics"</a>, Apache's Ant is a
Java-based build tool that is an excellent alternative to
<em class="filename">make.<a href="#FOOTNOTE-47">[47]</a></em>
<a name="INDEX-1095" /></a>Ant is good for numerous reasons,
including:
</p><blockquote class="footnote"> <a name="FOOTNOTE-47" /></a><p> [47] These notes apply to Ant 1.3. Newer
versions of Ant may handle JAR files differently.</p>
</blockquote>

<ul><li>
<p>Its XML build files are easier to create than Makefiles.</p>
</li><li>
<p>It is written in Java and is quite portable.</p>
</li><li>
<p>Builds are extremely fast because the same VM instance is used for
most steps in the build process.
</p>
</li></ul>
<p>Ant can be acquired form <a href="../../../../../../jakarta.apache.org/ant">http://jakarta.apache.org/ant</a>.<a href="#FOOTNOTE-48">[48]</a>
</p><blockquote class="footnote">
<a name="FOOTNOTE-48" /></a><p> [48] The original author of Ant is working on a new Java build tool
called Amber, available at <a href="../../../../../../www.xiyo.org/Amber">http://www.xiyo.org/Amber</a>.</p> </blockquote>

<a name="javaxslt-CHP-9-SECT-1.2.1" /></a><div class="sect3">
<h3 class="sect3">9.1.2.1. Installing Ant</h3>

<p><a name="INDEX-1096" /></a>To
install Ant, simply download the binary distribution and uncompress
to a convenient directory. Then set the ANT_HOME environment variable
to point to this directory and JAVA_HOME to point to the Java
installation directory. To test, type <tt class="userinput"><b>ant
-version</b></tt>. This should display something similar to the
following:
</p>

<blockquote><pre class="code">Ant version 1.3 compiled on March 2 2001</pre></blockquote>

<p>Since <a name="INDEX-1097" /></a>Ant is written in Java, care must be
taken to avoid conflicts with Ant's JAR files and JAR files
found in the system CLASSPATH. This is a particular concern when
using Ant to drive the XSLT transformation process because Ant ships
with JAXP 1.0 <a name="INDEX-1098" /></a>JAR files that are not compatible with
newer JAXP 1.1 implementations.
</p>

<p>Once Ant is installed, update
<em class="filename">ANT_HOME/lib/jaxp.jar</em> and
<em class="filename">ANT_HOME/lib/parser.jar</em>, which are part of the
older JAXP 1.0 reference implementation. Any JAR files added to the
<em class="filename">ANT_HOME/lib</em> directory are automatically added
to Ant's CLASSPATH and will be seen by the various Ant tasks
during the build process. Simply adding JAXP 1.1-compatible JAR files
to the <em class="filename">ANT_HOME/lib</em> directory will prevent most
conflicts with newer applications that require DOM 2, SAX 2, or
support for XSLT transformations.
</p>

</div>

<a name="javaxslt-CHP-9-SECT-1.2.2" /></a><div class="sect3">
<h3 class="sect3">9.1.2.2. A typical Ant build file</h3>

<p><a name="INDEX-1099" /></a>The best way to learn about Ant is to
download it, read the first part of the user manual, and then study
several example build files. <a href="ch09_01.htm">Example 9-3</a> presents
one such build file, which can be used to compile some of the example
code in this chapter as well as perform an XSLT transformation.
</p>

<a name="javaxslt-CHP-9-EX-3" /></a><div class="example">
<h4 class="objtitle">Example 9-3. build.xml </h4>
<blockquote><pre class="code">&lt;?xml version="1.0"?&gt;
&lt;!--
  *******************************************************
  ** Example Ant build file as shown in <a href="ch09_01.htm">Chapter 9, "Development Environment, Testing, and Performance"</a>.
  **
  ** Assumes the following directory structure:
  **  examples
  **    +-chapters
  **    |   +-chap9
  **    |       build.xml (this file)
  **    |       aidan.xml (example XML file)
  **    |       condensePerson.xslt (example XSLT file)
  **    +-common
  **    |   +-src
  **    |       +-com/oreilly/javaxslt/swingtrans/...
  **    |
  **    +-build (created by this build file)
  **
  ****************************************************--&gt;
<tt class="userinput"><b>&lt;project name="chap9" default="help" basedir="../.."&gt;</b></tt>

  &lt;!--
  *******************************************************
  ** Global properties.
  ****************************************************--&gt;
  &lt;property name="builddir" value="build"/&gt;

  <tt class="userinput"><b>&lt;path id="thirdparty.class.path"&gt;
    &lt;pathelement path="lib/saxon_6.2.2.jar"/&gt;
    &lt;pathelement path="lib/jaxp_1.1.jar"/&gt;
    &lt;pathelement path="lib/servlet_2.3.jar"/&gt;
    &lt;pathelement path="lib/junit_3.5.jar"/&gt;
    &lt;pathelement path="lib/jdom_beta6.jar"/&gt;
  &lt;/path&gt;</b></tt>
  
  &lt;!--
  *******************************************************
  ** Create the output directory structure.
  ****************************************************--&gt;
  &lt;target name="prepare"&gt;
    &lt;mkdir dir="${builddir}"/&gt;
  &lt;/target&gt;

  &lt;!--
  *******************************************************
  ** Show a brief usage message. This is the default
  ** target, and shows up when the user types "ant"
  ****************************************************--&gt;
  &lt;target name="help" description="Show a brief help message"&gt;
    &lt;echo message=<a href="ch09_01.htm">Chapter 9, "Development Environment, Testing, and Performance"</a> Example Ant Build File"/&gt;
    &lt;echo message="Type 'ant -projecthelp' for more assistance..."/&gt;
  &lt;/target&gt;

  &lt;!--
  ********************************************************
  ** Remove the entire build directory
  *****************************************************--&gt;
  &lt;target name="clean" 
        description="Remove all generated code"&gt;
    &lt;delete dir="${builddir}"/&gt;
  &lt;/target&gt;

  &lt;!--
  ********************************************************
  ** Compile the com.oreilly.javaxslt.swingtrans package
  *****************************************************--&gt;
  <tt class="userinput"><b>&lt;target name="compile" depends="prepare"
        description="Compile the SwingTransformer application"&gt;
    &lt;javac srcdir="common/src" destdir="${builddir}"
            includes="com/oreilly/javaxslt/swingtrans/**"&gt;
      &lt;classpath refid="thirdparty.class.path"/&gt;
    &lt;/javac&gt;
  &lt;/target&gt;</b></tt>

  &lt;!--
  ********************************************************
  ** Run com.oreilly.javaxslt.swingtrans.SwingTransformer
  *****************************************************--&gt;
  &lt;target name="run" depends="compile"
        description="Run the SwingTransformer application"&gt;
    &lt;java fork="yes" 
          classname="com.oreilly.javaxslt.swingtrans.SwingTransformer"&gt;
      &lt;classpath&gt;
        &lt;pathelement path="${builddir}"/&gt;
      &lt;/classpath&gt;
      &lt;classpath refid="thirdparty.class.path"/&gt;
    &lt;/java&gt;
  &lt;/target&gt;

  &lt;!--
  ********************************************************
  ** Performs an XSLT transformation. If either the XML
  ** file or the XSLT stylesheet change, the transformation
  ** is performed again.
  **
  ** basedir - specifies the location of the XSLT
  ** destdir - a required attribute, however Ant 1.3 is
  **           ignoring this. The messages on the console
  **           indicate that the destdir is being used,
  **           however it was found that the "out"
  **           attribute also has to specify the output
  **           directory.
  *****************************************************--&gt;
  <tt class="userinput"><b>&lt;target name="transform" 
        description="Perform an XSLT transformation"&gt;
    &lt;style processor="trax"
        basedir="chapters/chap9"
        destdir="${builddir}"
        style="condensePerson.xslt"
        in="chapters/chap9/aidan.xml" 
        out="${builddir}/aidan_condensed.xml"&gt;

      &lt;!-- pass a stylesheet parameter --&gt;
      &lt;param name="includeMiddle" expression="yes"/&gt;
    &lt;/style&gt;
  &lt;/target&gt;</b></tt>
&lt;/project&gt;</pre></blockquote>
</div>

<p>All Ant build files are XML and have a
<tt class="literal">&lt;project&gt;</tt> root element. This specifies the
default target, as well as the base directory. Each of the targets is
specified using <tt class="literal">&lt;target&gt;</tt> elements, which can
have dependencies on each other. Targets, in turn, contain tasks,
which are responsible for performing individual units of work.
</p>

<p><a name="INDEX-1100" /></a>The
CLASSPATH used by various tasks can be defined once and reused
throughout the build file. The <tt class="literal">&lt;path&gt;</tt>
element is emphasized in <a href="ch09_01.htm">Example 9-3</a>, including
several JAR files from the <em class="filename">lib</em> directory. For
instance:
</p>

<blockquote><pre class="code">&lt;pathelement path="lib/servlet_2.3.jar"/&gt;</pre></blockquote>

<p>This illustrates two key points about defining a consistent
development environment. First, it is a good idea to rename JAR files
to include version numbers. This is a great way to avoid conflicts
and unexpected errors, because different versions of most tools use
the same filenames for JAR files. By renaming them, it is easier to
keep track of what is installed on the system. The only drawback to
this approach is that build files must be manually updated whenever
new versions of JAR files are installed.
</p>

<p>Second, this particular Ant build file defines its own CLASSPATH,
rather than relying on the developer's CLASSPATH. Relying on
the CLASSPATH environment variable introduces problems because each
developer on a team may have a completely different set of JAR files
defined in his environment. By encoding everything in the Ant build
file, everyone will compile and test with the same setup.
</p>

<p>The following target shows how the build file compiles the
application:
</p>

<blockquote><pre class="code">&lt;target name="compile" depends="prepare"
      description="Compile the SwingTransformer application"&gt;
  &lt;javac srcdir="common/src" destdir="${builddir}"
          includes="com/oreilly/javaxslt/swingtrans/**"&gt;
    &lt;classpath refid="thirdparty.class.path"/&gt;
  &lt;/javac&gt;
&lt;/target&gt;</pre></blockquote>

<p>So, to execute this target, simply type <tt class="userinput"><b>ant
compile</b></tt> from the command prompt. Since this target
depends on the <tt class="literal">prepare</tt> target, the
<em class="filename">build</em> directory will be created before the code
is compiled. Fortunately, the <tt class="literal">&lt;javac&gt;</tt> task
is smart enough to compile only source code files that have changes
since the last build, making Ant much faster than manually typing
<tt class="userinput"><b>javac *.java</b></tt>.
</p>

<p>The <tt class="literal">srcdir</tt> and <tt class="literal">destdir</tt>
attributes are relative to the <tt class="literal">basedir</tt> that was
specified in the <tt class="literal">&lt;project&gt;</tt> element. Since
Ant always uses forward slashes (<tt class="literal">/</tt>) as path
separators, these relative directories will work on Windows and
Unix/Linux systems. As you might guess, the
<tt class="literal">includes</tt> attribute defines a filter that limits
which files are included in the build.
</p>

<p>The last target in this build file performs an XSLT transformation
using Ant's <tt class="literal">&lt;style&gt;</tt> task, which is
described next.<a name="INDEX-1101" /></a> 
</p>

</div>

<a name="javaxslt-CHP-9-SECT-1.2.3" /></a><div class="sect3">
<h3 class="sect3">9.1.2.3. Transforming using Ant's style task</h3>

<p><a name="INDEX-1102" /></a>
<a name="INDEX-1103" /></a>Of particular interest to XSLT developers
is Ant's <tt class="literal">&lt;style&gt;</tt> task. This is a core
task that performs one or more XSLT
<a name="INDEX-1104" /></a>transformations. Ant's JAXP JAR
files must be updated as described earlier for this task to work.
Here is a simple example of this task:
</p>

<blockquote><pre class="code">&lt;style basedir="." destdir="." style="sample.xslt" processor="trax"
    in="company.xml" out="report.txt"/&gt;</pre></blockquote>

<p>This will look in the project's base directory for the
specified XML and XSLT files, placing the output into
<em class="filename">report.txt</em>. The processor is
<tt class="literal">trax</tt>, which means the same thing as JAXP 1.1. Ant
will use the first JAXP-compliant processor found on the CLASSPATH.
<a href="ch09_01.htm">Table 9-2</a> lists the complete set of attributes for
the <tt class="literal">style</tt>
task.<a name="INDEX-1105" /></a>
</p>

<a name="javaxslt-CHP-9-TABLE-2" /></a><h4 class="objtitle">Table 9-2. Ant style attributes </h4><table border="1" cellpadding="3">




<tr>
<th>
<p>Attribute</p>
</th>
<th>
<p>Description</p>
</th>
<th>
<p>Required?</p>
</th>
</tr>


<tr>
<td>
<p><tt class="literal">basedir</tt></p>
</td>
<td>
<p>The directory where XML files are located.</p>
</td>
<td>
<p>yes</p>
</td>
</tr>
<tr>
<td>
<p><tt class="literal">destdir</tt></p>
</td>
<td>
<p>The directory where the result tree should be placed.</p>
</td>
<td>
<p>yes</p>
</td>
</tr>
<tr>
<td>
<p><tt class="literal">extension</tt></p>
</td>
<td>
<p>The default filename extension for the result of the
transformation(s).
</p>
</td>
<td>
<p>no</p>
</td>
</tr>
<tr>
<td>
<p><tt class="literal">style</tt></p>
</td>
<td>
<p>The XSLT stylesheet filename.</p>
</td>
<td>
<p>yes</p>
</td>
</tr>
<tr>
<td>
<p><tt class="literal">processor</tt></p>
</td>
<td>
<p>Specifies which XSLT processor is used. Legal values are
"trax" for a TrAX-compliant processor, "xslp"
for the XSL:P processor, and "xalan" for Xalan Version
1.x. May also contain the name of a class that implements
<tt class="literal">org.apache.tools.ant.taskdefs.XSLTLiaison</tt>. When
omitted, defaults to "trax."
</p>
</td>
<td>
<p>no</p>
</td>
</tr>
<tr>
<td>
<p><tt class="literal">includes</tt></p>
</td>
<td>
<p>The comma-separated list of file patterns to include.</p>
</td>
<td>
<p>no</p>
</td>
</tr>
<tr>
<td>
<p><tt class="literal">includesfile</tt></p>
</td>
<td>
<p>The name of a file that contains include patterns.</p>
</td>
<td>
<p>no</p>
</td>
</tr>
<tr>
<td>
<p><tt class="literal">excludes</tt></p>
</td>
<td>
<p>The comma-separated list of file patterns to exclude.</p>
</td>
<td>
<p>no</p>
</td>
</tr>
<tr>
<td>
<p><tt class="literal">excludesfile</tt></p>
</td>
<td>
<p>The name of a file that contains exclude patterns.</p>
</td>
<td>
<p>no</p>
</td>
</tr>
<tr>
<td>
<p><tt class="literal">defaultexcludes</tt></p>
</td>
<td>
<p>May be "yes" or "no," defaults to
"yes."
</p>
</td>
<td>
<p>no</p>
</td>
</tr>
<tr>
<td>
<p><tt class="literal">in</tt></p>
</td>
<td>
<p>A single XML file input.</p>
</td>
<td>
<p>no</p>
</td>
</tr>
<tr>
<td>
<p><tt class="literal">out</tt></p>
</td>
<td>
<p>A single output filename.</p>
</td>
<td>
<p>no</p>
</td>
</tr>

</table><p>

<p>The pattern attributes, such as <tt class="literal">includes</tt> and
<tt class="literal">excludes</tt>, work just like other patterns in Ant.
Basically, these allow the task to filter which files are included
and excluded from the transformations. When omitted, all files in the
base directory are included. Here is how an entire directory of XML
files can be transformed:
</p>

<blockquote><pre class="code">&lt;style basedir="xmlfiles" includes="*.xml" destdir="build/doc" style="report.xslt"
    extension="html"/&gt;</pre></blockquote>

<p>As shown back in <a href="ch09_01.htm">Example 9-3</a>, parameters can be
passed using nested <tt class="literal">&lt;param&gt;</tt> elements. This
element has required <tt class="literal">name</tt> and
<tt class="literal">expression</tt> attributes:
</p>

<a name="INDEX-1106" /></a><blockquote><pre class="code">&lt;style basedir="xmlfiles" includes="*.xml" destdir="build/doc" style="report.xslt"
    extension="html"&gt;<tt class="userinput"><b>
  &lt;param name="reportType" expression="'detailed'"/&gt;</b></tt>
&lt;/style&gt;</pre></blockquote>

</div>
</div>
<a name="javaxslt-CHP-9-SECT-1.3" /></a><div class="sect2">
<h3 class="sect2">9.1.3. Tomcat</h3>

<p><a name="INDEX-1107" /></a>Apache's Tomcat
is a Servlet and JSP container and has been mentioned throughout this
book. It is available from <a href="../../../../../../jakarta.apache.org/tomcat">http://jakarta.apache.org/tomcat</a>. Tomcat is
fairly easy to install and configure:
</p>

<ul><li>
<p>Download the latest Tomcat release build for your operating system.</p>
</li><li>
<p>Uncompress the distribution to a directory.</p>
</li><li>
<p>Set the TOMCAT_HOME environment variable to point to this directory.</p>
</li><li>
<p>Set the JAVA_HOME environment variable to point to your Java
distribution.
</p>
</li></ul>
<p>Since web applications are required to read configuration information
from their XML deployment descriptors (<em class="filename">web.xml</em>),
all current versions of Tomcat ship with an XML parser.
</p>

<a name="javaxslt-CHP-9-SECT-1.3.1" /></a><div class="sect3">
<h3 class="sect3">9.1.3.1. Configuring Tomcat 3.2.x</h3>

<p>Tomcat 3.2.x includes several JAR files in its
<em class="filename">$TOMCAT_HOME/lib</em> directory. Among these are
<em class="filename">jaxp.jar</em> and <em class="filename">parser.jar</em>,
which support JAXP Version 1.0 along with a SAX 1.0 and DOM 1.0 XML
parser. Any JAR file added to the <em class="filename">lib</em> directory
becomes available to every web application. Tomcat uses a simple
script to locate <em class="filename">*.jar</em> in the
<em class="filename">lib</em> directory, adding each JAR file to the
CLASSPATH as it is encountered. The order of inclusion depends on how
the operating system lists files, which is generally alphabetically.
The complete CLASSPATH used by Tomcat 3.2.x includes the following:
</p>

<ul><li>
<p><em class="filename">$TOMCAT_HOME/classes</em></p>
</li><li>
<p><em class="filename">$TOMCAT_HOME/lib/*.jar</em></p>
</li><li>
<p>Any existing CLASSPATH</p>
</li><li>
<p><em class="filename">$JAVA_HOME/jre/lib/tools.jar</em></p>
</li></ul>
<p>Although the <em class="filename">lib</em> directory provides a convenient
way to install utility code that all web applications must use,
conflicts arise when individual applications require different
versions of SAX, DOM, or JAXP. If Tomcat finds an older version of
one of these tools before it finds a newer version, exceptions
typically occur. For instance, a sealing violation exception may
occur if the existing CLASSPATH contains the newer
<em class="filename">crimson.jar</em>, but an older version of
<em class="filename">parser.jar</em> is still present.
</p>

<p>The best approach to fully configure Tomcat 3.2.x for XML support is
as follows:
</p>

<ul><li>
<p>Remove <em class="filename">jaxp.jar</em> and
<em class="filename">parser.jar</em> from the
<em class="filename">$TOMCAT_HOME/lib</em> directory.
</p>
</li><li>
<p>Install the following files from the JAXP 1.1 distribution into the
<em class="filename">$TOMCAT_HOME/lib</em> directory:
<em class="filename">jaxp.jar</em>, <em class="filename">crimson.jar</em>, and
<em class="filename">xalan.jar</em>.
</p>
</li></ul>
<p>Of course, JAXP 1.1 supports other tools besides Crimson and Xalan.
If you prefer, simply replace <em class="filename">crimson.jar</em> and
<em class="filename">xalan.jar</em> with competing products that are JAXP
1.1-compatible.
</p>

</div>

<a name="javaxslt-CHP-9-SECT-1.3.2" /></a><div class="sect3">
<h3 class="sect3">9.1.3.2. Configuring Tomcat 4.0.x</h3>

<p>Tomcat 4.0 improves upon Tomcat 3.2.x configuration issues in two key
ways. First, the user's existing CLASSPATH is no longer
appended to Tomcat's CLASSPATH. This helps to avoid situations
where code works for one developer (who happens to have some critical
file on her CLASSPATH) but fails for other developers who have
slightly different personal CLASSPATH configurations.
</p>

<p>Secondly, Tomcat 4.0 no longer places JAXP JAR files in a location
visible to web applications. This means that if XML support is
required, you must install the proper XML JAR files before anything
will work. This is far better than the old Tomcat model, because it
avoids unexpected collisions with XML libraries used internally by
Tomcat. Instead, if you forget to install XML support, you simply see
a <tt class="literal">java.lang.NoClassDefFoundError</tt>.
</p>

<p>To install XML support into Tomcat 4.0, simply install the required
JAR files into the <em class="filename">$TOMCAT_HOME/lib</em> directory.
These will then be available to all web applications. The other
option is to install JAR files into the
<em class="filename">WEB-INF/lib</em> directory of individual web
applications. With this approach, each application can use different
versions of various packages without fear of conflicts.<a name="INDEX-1108" /></a>
</p>

</div>
</div>
</div>

<hr width="684" align="left" />
<div class="navbar"><table width="684" border="0"><tr><td align="left" valign="top" width="228"><a href="ch08_06.htm"><img src="../gifs/txtpreva.gif" alt="Previous" border="0" /></a></td><td align="center" valign="top" width="228"><a href="index.htm"><img src="../gifs/txthome.gif" alt="Home" border="0" /></a></td><td align="right" valign="top" width="228"><a href="ch09_02.htm"><img src="../gifs/txtnexta.gif" alt="Next" border="0" /></a></td></tr><tr><td align="left" valign="top" width="228">8.6. Internationalization with XSLT</td><td align="center" valign="top" width="228"><a href="index/index.htm"><img src="../gifs/index.gif" alt="Book Index" border="0" /></a></td><td align="right" valign="top" width="228">9.2. Testing and Debugging</td></tr></table></div>
<hr width="684" align="left" />

<img src="../gifs/navbar.gif" usemap="#library-map" border="0" alt="Library Navigation Links" />
<p><p><font size="-1"><a href="copyrght.htm">Copyright &copy; 2002</a> O'Reilly &amp; Associates. All rights reserved.</font></p>

<map name="library-map"><area shape="rect" coords="0,0,85,93" href="../index.htm"><area shape="rect" coords="85,0,180,98" href="../sax2/index.htm"><area shape="rect" coords="182,-1,261,100" href="../xmlnut/index.htm"><area shape="rect" coords="263,1,384,96" href="../jxml/index.htm"><area shape="rect" coords="386,1,463,100" href="index.htm"><area shape="rect" coords="466,1,533,112" href="../xslt/index.htm"><area shape="rect" coords="535,-1,610,108" href="../schema/index.htm"><area shape="rect" coords="613,1,696,121" href="../pxml/index.htm"></map>

</body></html>