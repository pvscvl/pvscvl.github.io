<html><head><title>The Universal Design (Java and XSLT)</title><link rel="stylesheet" type="text/css" href="../style/style1.css" />

<meta name="DC.Creator" content="Eric M. Burke" /><meta name="DC.Format" content="text/xml" scheme="MIME" /><meta name="DC.Language" content="en-US" /><meta name="DC.Publisher" content="O'Reilly &amp; Associates, Inc." /><meta name="DC.Source" scheme="ISBN" content="0596001453L" /><meta name="DC.Subject.Keyword" content="stuff" /><meta name="DC.Title" content="Java and XSLT" /><meta name="DC.Type" content="Text.Monograph" />

</head><body bgcolor="#ffffff">

<img src="gifs/smbanner.gif" usemap="#banner-map" border="0" alt="Book Home" /><map name="banner-map"><area shape="rect" coords="1,-2,616,66" href="index.htm" alt="Java and XSLT" /><area shape="rect" coords="629,-11,726,25" href="jobjects/fsearch.htm" alt="Search this book" /></map>

<div class="navbar"><table width="684" border="0"><tr><td align="left" valign="top" width="228"><a href="ch04_01.htm"><img src="../gifs/txtpreva.gif" alt="Previous" border="0" /></a></td><td align="center" valign="top" width="228" /><td align="right" valign="top" width="228"><a href="ch04_03.htm"><img src="../gifs/txtnexta.gif" alt="Next" border="0" /></a></td></tr></table></div>



<h2 class="sect1">4.2. The Universal Design</h2>

<p>Despite the proliferation of APIs, frameworks, and template engines,
most web application approaches seem to be consolidating around the
idea of <a name="INDEX-448" />model-view-controller
(MVC). Clean separation between data, presentation, and programming
logic is a key goal of this design. Most web frameworks implement
this pattern, and the hybrid approach of JSP and servlets follows it.
XSLT implementations also use this pattern, which leads to the
conclusion that model-view-controller is truly a universal approach
to development on the web tier.
</p>

<a name="javaxslt-CHP-4-SECT-2.1" /><div class="sect2">
<h3 class="sect2">4.2.1. Web Frameworks</h3>

<p>A <a name="INDEX-449" />framework
is a value-added class library that makes it easier to develop
certain types of applications. For example, an imaging framework may
contain APIs for reading, writing, and displaying several image
formats. This makes it much easier to build applications because
someone else already figured out how to structure your application.
</p>

<p>Servlet frameworks are no different. Now that servlets, JSP, and
hybrid approaches have been available for a few years, common
architectural patterns are emerging as "best practices."
These include separation of Java code and HTML generation, using
servlets in conjunction with JSP, and other variations. Once basic
patterns and themes are understood, it becomes desirable to write
common frameworks that automate the mundane tasks of building web
applications.
</p>

<p>The most important tradeoff you make when selecting a framework is
vendor lock-in versus open standards. At this time, there are no open
standards for frameworks. Although there are numerous open source
frameworks, none is backed by a standards organization or even
Sun's Java Community Process. The low-level servlet and JSP
APIs are very well defined and widely implemented Java standard
extensions. But a <a name="INDEX-450" />framework
can offer much more sophisticated features such as enhanced error
checking, database connection pooling, custom tag libraries, and
other value-added features. As you add more framework-specific
features, however, your flexibility to choose another framework or
vendor quickly diminishes.
</p>

<p>One typical framework is
<a name="INDEX-451" />
<a name="INDEX-452" />Turbine,
which is one of many different frameworks supported by Apache.
Turbine is a large framework with many value-added features
including:
</p>

<ul><li>
<p>Database connection pooling, integration with object to relational
mapping tools, and relational database abstractions
</p>
</li><li>
<p>Integration with numerous template engines</p>
</li><li>
<p>Role-based security and access control lists</p>
</li><li>
<p>Web browser detection</p>
</li><li>
<p>Integration with JavaMail</p>
</li></ul>
<p>This is only a short list of Turbine's features. At its core,
however, the compelling reason to use a framework like Turbine is the
underlying object model. The fundamental approach of Turbine is to
cleanly separate validation logic, the servlet itself, and page
rendering into distinctly different modules. In fact, Turbine uses a
single servlet, so your validation and rendering logic have to go
elsewhere. The approach is to define helper classes called
<em class="emphasis">actions</em><a name="INDEX-453" />,
which are responsible for validation of incoming requests. Once an
action has validated the inbound request, other classes such as
<tt class="literal">Layout</tt>, <tt class="literal">Page</tt>, and
<tt class="literal">Navigation</tt> are responsible for rendering a view
back to the browser.
</p>

<p>When compared to a pure XML/XSLT approach, frameworks have the
advantage of value-added features. If you remove all of the non-web
features, such as database connection pooling and
object-to-relational mapping tools, you will see that the underlying
model-view-controller architecture is very easy to implement. You
should be wary of any framework that provides too much
non-web-related functionality because many of these features should
be placed on the application server instead of the web server anyway.
The remainder of this chapter is devoted to showing you how to
structure a complex web application without committing yourself to a
specific framework.
</p>

</div>
<a name="javaxslt-CHP-4-SECT-2.2" /><div class="sect2">
<h3 class="sect2">4.2.2. Model-View-Controller</h3>

<p>Cleanly separating data and presentation logic is important. What
exactly are the <a name="INDEX-454" />benefits?
First and foremost, when data is completely isolated from the user
interface, changes can be made to the visual appearance of an
application without affecting the underlying data. This is
particularly important in web applications that have to support
multiple incompatible browsers or even WML, XHTML Basic, or HTML. It
is much harder to adapt to new user interface requirements when data
and presentation are mixed.
</p>

<p><a name="INDEX-455" />Programming
logic should also be separated from data and presentation logic. To a
certain extent, programming logic must depend in part on both data
and presentation. But you can generally isolate business logic, which
depends on the data, and presentation logic, which depends on the
user interface. <a href="ch04_02.htm">Figure 4-4</a> illustrates these
dependencies.
</p>

<a name="javaxslt-CHP-4-FIG-4" /><div class="figure"><img src="figs/jxt_0404.gif" alt="Figure 4-4" width="117" height="216" /></div><h4 class="objtitle">Figure 4-4. Dependencies</h4>

<p>The arrows indicate dependencies. For example, if your underlying
data changes, then the business logic will probably have to change.
However, that does not always flow up and break your presentation
logic. In general, if changes are sweeping, it is hard to avoid
affecting upper layers, but minor changes can almost always be
encapsulated. If the implementation of your business logic changes,
however, there is no reason to change the underlying data. Likewise,
you should be able to make changes to the presentation logic without
breaking the business logic. Later in this chapter, we will see how
Java, XML, and XSLT can be utilized to satisfy these dependencies.
</p>

<p><a name="INDEX-456" />The
dominant pattern in scalable web sites is model-view-controller. The
MVC pattern originated with Smalltalk-80 as a way to develop
graphical user interfaces in an object-oriented way. The basics are
simple. GUI components represent the
<a name="INDEX-457" />view and are
responsible for displaying visual information to the user. The
<a name="INDEX-458" />model contains
application data. The
<a name="INDEX-459" />controller is
responsible for coordinating between the model and the view. It
intercepts events from the view components, queries the model for its
current state, makes modifications to the model, and notifies the
view of changes to the model. <a href="ch04_02.htm">Figure 4-5</a>
illustrates the interaction between these three components.
</p>

<a name="javaxslt-CHP-4-FIG-5" /><div class="figure"><img src="figs/jxt_0405.gif" alt="Figure 4-5" width="373" height="142" /></div><h4 class="objtitle">Figure 4-5. Model-view-controller</h4>

<p><a name="INDEX-460" />As
shown, the <tt class="literal">Model</tt>, <tt class="literal">View</tt>, and
<tt class="literal">Controller</tt> are either abstract classes or
interfaces. The concrete classes are application-specific, and the
open arrows indicate the direction of association between the various
classes. For example, the abstract <tt class="literal">Model</tt> sends
notifications only to the abstract <tt class="literal">View</tt>, but
<tt class="literal">ConcreteView</tt> knows about its
<tt class="literal">ConcreteModel</tt>. This makes sense when you consider
how hard it would be to create a specific view, such as a customer
editor panel, without knowledge of a specific data model like
<tt class="literal">Customer</tt>. Since the <tt class="literal">Model</tt> only
knows about <tt class="literal">View</tt> instances in an abstract way,
however, it can send generic notifications when it changes, allowing
new views to be attached later.
</p>

<p>It is important to remember that this is just a pattern; specific
implementations may vary somewhat and use different class names. One
variation is to eliminate the explicit references from
<tt class="literal">ConcreteView</tt> to <tt class="literal">ConcreteModel</tt>
and from <tt class="literal">Model</tt> to <tt class="literal">View</tt>. In this
approach, the <tt class="literal">Controller</tt> would take a more
prevalent role. A common theme in Java is to remove the explicit
controller using data models and view components that send
notifications to event listeners. Although typically thought of in
terms of GUI applications, the MVC architecture is not limited to
this domain. For web applications, it is commonly used in:
</p>

<ul><li>
<p>The hybrid servlet + JSP approach</p>
</li><li>
<p>Most servlet frameworks</p>
</li><li>
<p>The XSLT approach</p>
</li></ul>
<p>In the hybrid approach, the servlet is the controller and the JSP is
the view. It is assumed that the data will be retrieved from a
database or Enterprise JavaBeans (EJB) components, which act as the
model. A good framework may make the distinction between model, view,
and controller more explicit. Instead of using the servlet as a
controller, a common pattern is to use a single servlet that
delegates work to helper classes that act as controllers. Each of
these classes is equivalent to <tt class="literal">ConcreteController</tt>
in <a href="ch04_02.htm">Figure 4-5</a> and has knowledge of specific web
pages and data.
</p>

<p>Although originally intended for Smalltalk GUIs, MVC has always been
one of the most frequently used patterns in all sorts of GUIs, from
Motif to Java. On the web, MVC is also prevalent, although a few
mechanics are slightly different. In a web environment, we are
restricted to the HTTP protocol, which is
<em class="emphasis">stateless</em><a name="INDEX-461" /> <a name="INDEX-462" />.
With each click of a hyperlink, the browser must establish a new
connection to the web server. Once the page has been delivered, the
connection is broken. It is impossible for the server to initiate a
conversation with the client, so the server merely waits until the
next request arrives.
</p>

<p><a name="INDEX-463" />Implementing MVC in this stateless
architecture results in looser coupling between the controller and
the view. In a GUI environment, the controller immediately notifies
the view of any changes to the underlying model. In a web
environment, the controller must maintain state information as it
waits for the browser to make another request. As each browser
request arrives, it is the controller's job to validate the
request and forward commands on to the model. The controller then
sends the results back to the view.
</p>

<p>This may all sound academic and vague at this point. The next few
sections will present much more detailed diagrams that show exactly
how MVC is implemented for an XSLT-driven web site.
</p>

</div>
<a name="javaxslt-CHP-4-SECT-2.3" /><div class="sect2">
<h3 class="sect2">4.2.3. XSLT Implementation</h3>

<p><a name="INDEX-464" />All of the approaches presented up to this
point are, of course, building up to the XSLT approach. In many
respects, the XSLT approach is simultaneously the most powerful and
the easiest to understand. For a single web page, the XSLT approach
is probably harder than a servlet or JSP to configure. Configuration
of the XML parser and XSLT processor can be quite difficult, mostly
due to CLASSPATH issues.<a href="#FOOTNOTE-15">[15]</a> But as the complexity of a web
application increases, the benefits of using XSLT become obvious.
Figuring out how to tackle these complex web applications is the real
goal of this chapter.
</p><blockquote class="footnote"> <a name="FOOTNOTE-15" /><p> [15] This can be a frustrating
experience when the servlet container comes with an older XML parser
that uses DOM or SAX Version 1. Most XSLT processors require Version
2 parsers.</p> </blockquote>

<p>The XSLT approach maps fairly directly to the MVC pattern. The XML
represents the model, the servlet represents the controller, and the
XSLT produces HTML, which represents the view. The XSLT stylesheets
may contain a minimal amount of logic, potentially blurring the line
between view and controller. <a href="ch04_02.htm">Figure 4-6</a> represents
a conceptual view of how the XSLT approach maps to MVC.
</p>

<a name="javaxslt-CHP-4-FIG-6" /><div class="figure"><img src="figs/jxt_0406.gif" alt="Figure 4-6" width="343" height="164" /></div><h4 class="objtitle">Figure 4-6. XSLT conceptual model</h4>

<p>One weakness common to every approach other than XSLT is the
HTML-centric viewpoint. In every example presented thus far, it was
assumed that we generated HTML. What happens when the requirement to
support cellular phones arises? It is very likely that these devices
will not use HTML. Instead, they will use WML, XHTML Basic, or some
other technology that has not been invented yet. For now, consider
that you would have to write brand new servlets or JSPs to support
these devices when using traditional approaches. Any programming
logic embedded into JSP pages would be duplicated or would have to be
factored out into common helper classes. In a pure servlet approach,
the hardcoded HTML generation logic would have to be completely
rewritten.
</p>

<p>XSLT offers an elegant solution -- simply create a second
stylesheet. Instead of transforming XML into HTML, this new
stylesheet transforms XML into WML. You can even support different
web browsers with the XSLT approach. Again, just write different
stylesheets for browser-specific functions. Since XSLT stylesheets
can import and include functionality from other stylesheets, much of
the code can be shared and reused across a project.
</p>

<p>Regardless of what your XSLT will produce, start by producing the
XML. For the schedule web application, the XML is dynamic and must be
programmatically generated. JDOM code is shown in <a href="ch04_02.htm">Example 4-4</a>, which produces the XML necessary to create
the schedule web page. <a name="INDEX-465" />
</p>

<a name="javaxslt-CHP-4-EX-4" /><div class="example">
<h4 class="objtitle">Example 4-4. ScheduleJDOM.java </h4>
<a name="INDEX-466" /><blockquote><pre class="code">package chap4;

import java.text.SimpleDateFormat;
import org.jdom.*;
import org.jdom.output.*;

/**
 * Produces a JDOM Document for a tv schedule.
 */
public class ScheduleJDOM {
    private SimpleDateFormat dateFmt = new SimpleDateFormat("hh:mm a");

    /**
     * Simple main( ) method for printing the XML document to System.out,
     * useful for testing.
     */
    public static void main(String[] args) throws Exception {
        Document doc = new ScheduleJDOM().getTodaysShows( );
        new XMLOutputter("  ", true, "UTF-8").output(doc, System.out);
    }

    /**
     * @return a new JDOM Document for all TV shows scheduled for today.
     */
    public Document getTodaysShows( ) {
        Schedule sched = Schedule.getInstance( );
        Show[] shows = sched.getTodaysShows( );

        Element rootElem = new Element("schedule");

        for (int i=0; i&lt;shows.length; i++) {
            rootElem.addContent(createShowElement(shows[i]));
        }
        return new Document(rootElem);
    }

    /**
     * A helper method to convert a Show object into a JDOM Element.
     */
    public Element createShowElement(Show show) {
        Element e = new Element("show");
        e.addContent(new Element("channel").setText(
                Integer.toString(show.getChannel( ))));
        e.addContent(new Element("from").setText(
                this.dateFmt.format(show.getStartTime( ))));
        e.addContent(new Element("to").setText(
                this.dateFmt.format(show.getEndTime( ))));
        e.addContent(new Element("title").setText(show.getTitle( )));
        return e;
    }
}</pre></blockquote>
</div>

<p>You might be wondering why this JDOM code is that much better than
the servlet code, which also used Java to programmatically produce
output. The difference is fundamental and important. With this JDOM
example, <tt class="literal">println( )</tt> statements are not used.
Instead, a data structure representing the television schedule is
created. By virtue of the JDOM API, the data structure is guaranteed
to produce well-formed XML. We could very easily add a DTD, writing a
unit test that validates the integrity of the generated data
structure.
</p>

<p>In addition to ensuring the integrity of the data, the JDOM code will
typically be much smaller than the servlet or JSP code. In this basic
web page, the servlet and JSP were quite small because the HTML did
not contain any significant formatting or layout. In a real-world web
page, however, the servlet and JSP will continue to grow in
complexity as the HTML layout gets more sophisticated, while the JDOM
code remains exactly the same.
</p>

<p>Although the XSLT stylesheet will get larger as the HTML gets more
complex, this is arguably less of a problem because the presentation
logic is completely separated from the underlying XML data. Once
fully tested, the XSLT can be deployed to the web server without
recompiling the Java code or restarting the servlet.
<a name="INDEX-467" />The XML data produced by JDOM is shown
in <a href="ch04_02.htm">Example 4-5</a>.
</p>

<a name="javaxslt-CHP-4-EX-5" /><div class="example">
<h4 class="objtitle">Example 4-5. XML for schedule web page </h4>
<blockquote><pre class="code">&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;?xml-stylesheet type="text/xsl" href="schedule.xslt"?&gt;
&lt;schedule&gt;
  &lt;show&gt;
    &lt;channel&gt;2&lt;/channel&gt;
    &lt;from&gt;06:00 AM&lt;/from&gt;
    &lt;to&gt;06:30 AM&lt;/to&gt;
    &lt;title&gt;Baseball&lt;/title&gt;
  &lt;/show&gt;
  &lt;show&gt;
    &lt;channel&gt;3&lt;/channel&gt;
    &lt;from&gt;06:00 AM&lt;/from&gt;
    &lt;to&gt;08:00 AM&lt;/to&gt;
    &lt;title&gt;Stand up Comedy&lt;/title&gt;
  &lt;/show&gt;
  ...remaining XML omitted
&lt;/schedule&gt;</pre></blockquote>
</div>

<p>The stylesheet that produces the exact same output as the JSP and
servlet is listed in <a href="ch04_02.htm">Example 4-6</a>.
</p>

<a name="javaxslt-CHP-4-EX-6" /><div class="example">
<h4 class="objtitle">Example 4-6. schedule.xslt </h4>
<blockquote><pre class="code">&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;xsl:stylesheet version="1.0" 
  xmlns:xsl="http://www.w3.org/1999/XSL/Transform"&gt;
  &lt;xsl:output method="html"/&gt;
  
  &lt;!-- ========== Produce the HTML Document ========== --&gt;
  <tt class="userinput"><b>&lt;xsl:template match="/"&gt;</b></tt>
    &lt;html&gt;
      &lt;head&gt;&lt;title&gt;Today's Shows&lt;/title&gt;&lt;/head&gt;
      &lt;body&gt;
        &lt;h1&gt;Today's Shows&lt;/h1&gt;
        &lt;table cellpadding="3" border="1" cellspacing="0"&gt;
          &lt;tr&gt;
            &lt;th&gt;Channel&lt;/th&gt;
            &lt;th&gt;From&lt;/th&gt;
            &lt;th&gt;To&lt;/th&gt;
            &lt;th&gt;Title&lt;/th&gt;
          &lt;/tr&gt;
          
          &lt;!-- ===== select the shows ===== --&gt;
          <tt class="userinput"><b>&lt;xsl:apply-templates select="schedule/show"/&gt;</b></tt>
        &lt;/table&gt;
      &lt;/body&gt;
    &lt;/html&gt;
  &lt;/xsl:template&gt;
  
  &lt;!-- ======== Display each show as a row in the table ======== --&gt;
  &lt;xsl:template match="show"&gt;
    &lt;tr&gt;
      &lt;td&gt;<tt class="userinput"><b>&lt;xsl:value-of select="channel"/&gt;</b></tt>&lt;/td&gt;
      &lt;td&gt;<tt class="userinput"><b>&lt;xsl:value-of select="from"/&gt;</b></tt>&lt;/td&gt;
      &lt;td&gt;<tt class="userinput"><b>&lt;xsl:value-of select="to"/&gt;</b></tt>&lt;/td&gt;
      &lt;td&gt;<tt class="userinput"><b>&lt;xsl:value-of select="title"/&gt;</b></tt>&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/xsl:template&gt;
<tt class="userinput"><b>&lt;/xsl:stylesheet&gt;</b></tt></pre></blockquote>
</div>

<p>The remaining piece of the puzzle is to write a servlet that combines
all of these pieces and delivers the result of the XSLT
transformation to the client (see <a href="ch06_01.htm">Chapter 6, "Servlet Basics and XSLT"</a>). In a
nutshell, the servlet acts as a controller between the various
components, doing very little of the actual work. The client request
is intercepted by the servlet, which tells
<tt class="literal">ScheduleJDOM</tt> to produce the XML data. This XML is
then fed into an XSLT processor such as Xalan, along with
<em class="filename">schedule.xslt</em>. Finally, the output is sent to
the browser as HTML, XHTML, WML, or some other format.
</p>

<a name="ch04-13-fm2xml" /><blockquote><b>NOTE:</b> 

Another interesting option made possible by this architecture is allowing the client to request raw XML without any kind of XSLT transformation. This allows your web site to support nonbrowser clients that wish to extract meaningful business data in a portable way.
</p></blockquote>
<p>We examined the weaknesses of other approaches, so it is only fair to
take a critical look at the XSLT approach. First, XSLT is a new
language that developers or web content authors have to learn.
Although the syntax is strange, it can be argued that XSLT is easier
to learn than a sophisticated programming language like Java. There
is resistance on this front, however, which is typical of a new
technology that is unfamiliar.
</p>

<p>The second potential weakness of the XSLT approach is runtime
performance. There is a performance penalty associated with XSLT
transformation. Fortunately, there are numerous optimizations that
can be applied. The most common involves the caching of stylesheets
so they do not have to be parsed with each request. This and other
techniques for optimization will be covered in later chapters.
</p>

<p>Since XSLT stylesheets are actually XML documents, any available XML
editor will work for XSLT. But eventually we should see more and more
specialized XSLT editors that hide some of the implementation details
for nonprogrammers. As with first-generation Java GUI builders, these
early tools may not generate stylesheets as cleanly as a handcoded
effort.
</p>

</div>
<a name="javaxslt-CHP-4-SECT-2.4" /><div class="sect2">
<h3 class="sect2">4.2.4. Development and Maintenance Benefits of XSLT</h3>

<p><a name="INDEX-468" />As mentioned earlier, testing JSPs
can be difficult. Since they can be executed only within a JSP
container, automated unit tests must start a web server and invoke
the JSP via HTTP requests in order to test their output. The
XSLT-based web approach does not suffer from this problem.
</p>

<p>Referring back to <a href="ch04_02.htm">Figure 4-6</a>, you can see that the
data model in an XSLT web application is represented as XML. This XML
is generated independently of the servlet container, so a unit test
can simply create the XML and validate it against a DTD or XML
Schema. Tools such as XML Spy make it easy to create XSLT stylesheets
and test them interactively against sample XML files long before they
are ever deployed to a servlet container. XML Spy is available from
<a href="../../../../../../www.xmlspy.com/">http://www.xmlspy.com</a>. If you are
looking for alternatives, a directory of XML tools can be found at
<a href="../../../../../../www.xmlsoftware.com/">http://www.xmlsoftware.com</a>.
</p>

<p>The XSLT processor is another piece of the puzzle that is not tied to
the servlet in any way. Because the processor is an independent
component, additional unit tests can perform
<a name="INDEX-469" />transformations by applying the XSLT
stylesheets to the XML data, again without any interference from a
web server or servlet container. If your stylesheets produce XHTML
instead of HTML, the output can be easily validated against one of
the W3C DTDs for XHTML. JUnit, an open source unit-testing tool, can
be used for all of these tests. It can be downloaded from <a href="../../../../../../www.junit.org/">http://www.junit.org</a>.<a name="INDEX-470" />
</p>

</div>


<hr width="684" align="left" />
<div class="navbar"><table width="684" border="0"><tr><td align="left" valign="top" width="228"><a href="ch04_01.htm"><img src="../gifs/txtpreva.gif" alt="Previous" border="0" /></a></td><td align="center" valign="top" width="228"><a href="index.htm"><img src="../gifs/txthome.gif" alt="Home" border="0" /></a></td><td align="right" valign="top" width="228"><a href="ch04_03.htm"><img src="../gifs/txtnexta.gif" alt="Next" border="0" /></a></td></tr><tr><td align="left" valign="top" width="228">4. Java-Based Web Technologies</td><td align="center" valign="top" width="228"><a href="index/index.htm"><img src="../gifs/index.gif" alt="Book Index" border="0" /></a></td><td align="right" valign="top" width="228">4.3. XSLT and EJB</td></tr></table></div>
<hr width="684" align="left" />

<img src="../gifs/navbar.gif" usemap="#library-map" border="0" alt="Library Navigation Links" />
<p><p><font size="-1"><a href="copyrght.htm">Copyright &copy; 2002</a> O'Reilly &amp; Associates. All rights reserved.</font></p>

<map name="library-map"><area shape="rect" coords="0,0,85,93" href="../index.htm"><area shape="rect" coords="85,0,180,98" href="../sax2/index.htm"><area shape="rect" coords="182,-1,261,100" href="../xmlnut/index.htm"><area shape="rect" coords="263,1,384,96" href="../jxml/index.htm"><area shape="rect" coords="386,1,463,100" href="index.htm"><area shape="rect" coords="466,1,533,112" href="../xslt/index.htm"><area shape="rect" coords="535,-1,610,108" href="../schema/index.htm"><area shape="rect" coords="613,1,696,121" href="../pxml/index.htm"></map>

</body></html>