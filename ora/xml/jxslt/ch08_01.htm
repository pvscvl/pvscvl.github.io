<html><head><title>Additional Techniques (Java and XSLT)</title><link rel="stylesheet" type="text/css" href="../style/style1.css" />

<meta name="DC.Creator" content="Eric M. Burke" /><meta name="DC.Format" content="text/xml" scheme="MIME" /><meta name="DC.Language" content="en-US" /><meta name="DC.Publisher" content="O'Reilly &amp; Associates, Inc." /><meta name="DC.Source" scheme="ISBN" content="0596001453L" /><meta name="DC.Subject.Keyword" content="stuff" /><meta name="DC.Title" content="Java and XSLT" /><meta name="DC.Type" content="Text.Monograph" />

</head><body bgcolor="#ffffff">

<img src="gifs/smbanner.gif" usemap="#banner-map" border="0" alt="Book Home" /><map name="banner-map"><area shape="rect" coords="1,-2,616,66" href="index.htm" alt="Java and XSLT" /><area shape="rect" coords="629,-11,726,25" href="jobjects/fsearch.htm" alt="Search this book" /></map>

<div class="navbar"><table width="684" border="0"><tr><td align="left" valign="top" width="228"><a href="ch07_05.htm"><img src="../gifs/txtpreva.gif" alt="Previous" border="0" /></a></td><td align="center" valign="top" width="228" /><td align="right" valign="top" width="228"><a href="ch08_02.htm"><img src="../gifs/txtnexta.gif" alt="Next" border="0" /></a></td></tr></table></div>


<h1 class="chapter">Chapter 8. Additional Techniques</h1>
<div class="htmltoc"><h4 class="tochead">Contents:</h4>
  <p> <a href="#javaxslt-CHP-8-SECT-1">XSLT Page Layout Templates</a><br />
<a href="ch08_02.htm">Session Tracking Without Cookies</a><br />
<a href="ch08_03.htm">Identifying the Browser</a><br />
<a href="ch08_04.htm">Servlet Filters</a><br />
<a href="ch08_05.htm">XSLT as a Code Generator</a><br />
<a href="ch08_06.htm">Internationalization with XSLT</a><br /></p></div><p>This chapter presents solutions to a few commonly encountered
problems that were not covered in previous chapters, such as
implementing session tracking without browser cookies, detecting the
browser type, and using XSLT as a rudimentary code generator. None of
these techniques are remarkably difficult to implement or use.
However, they all build upon the technologies presented throughout
this book and are important for programmers to understand. The
chapter concludes with advice for internationalization using XSLT and
Java.
</p><div class="sect1"><a name="javaxslt-CHP-8-SECT-1" /></a>
<h2 class="sect1">8.1. XSLT Page Layout Templates</h2>

<p><a name="INDEX-899" /></a> <a name="INDEX-900" /></a>In many cases, dynamically generated,
highly interactive web applications are overkill. A small company may
need only a static web site that displays job openings, new product
announcements, and other basic information. Corporate intranets
present another common scenario. In a typical intranet, a large
number of departments and individual project teams may be responsible
for various web sites within the corporation. Many of these groups
are composed of nonprogrammers who can create basic
<a name="INDEX-901" /></a>XHTML pages but are not technical enough
to write XML, XSLT, and servlets. In either scenario, consistent look
and feel are essential.
</p>

<p>XSLT is very effective for defining consistent page layout. In the
approach outlined here, web page authors create XHTML pages using
whatever tools they are familiar with. These pages should not use
frames or include <a name="INDEX-902" /></a>navigation areas. As <a href="ch08_01.htm">Figure 8-1</a> shows, an <a name="INDEX-903" /></a>XSLT stylesheet is used to insert
navigation areas on the top and left sides of input XHTML pages. This
is why individual pages should not attempt to insert their own
navigation areas.
</p>

<a name="javaxslt-CHP-8-FIG-1" /></a><div class="figure"><img src="figs/jxt_0801.gif" alt="Figure 8-1" width="405" height="156" /></div><h4 class="objtitle">Figure 8-1. XSLT template layout</h4>

<p>Since the top navigation area is dynamic, page authors must also
include a
<tt class="literal">&lt;meta&gt;</tt><a name="INDEX-904" /></a> tag in every XHTML page
that is published:
</p>

<blockquote><pre class="code">&lt;meta name="navigationCategory" content="home"/&gt;</pre></blockquote>

<p>This tag allows the top navigation area to visually highlight the
category that the current page belongs to.<a href="#FOOTNOTE-35">[35]</a> The XSLT stylesheet selects this tag and generates the
appropriate XHTML for the navigation area. As shown in <a href="ch08_01.htm">Figure 8-2</a>, the sample stylesheet uses hyperlinks for
each of the navigation categories. This same approach also works for
fancy graphical navigation areas.
</p><blockquote class="footnote"> <a name="FOOTNOTE-35" /></a><p> [35] You can
extend this technique by adding a second
<tt class="literal">&lt;meta&gt;</tt> tag for subcategories.</p>
</blockquote>

<p>Since a single stylesheet controls page layout, changes to this
stylesheet are visible across the entire web site. The code for the
home page is listed in <a href="ch08_01.htm">Example 8-1</a>. The required
elements are emphasized.
</p>

<a name="javaxslt-CHP-8-EX-1" /></a><div class="example">
<h4 class="objtitle">Example 8-1. home.xml</h4><a name="INDEX-905" /></a>
<blockquote><pre class="code"><tt class="userinput"><b>&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;html&gt;
  &lt;head&gt;
    &lt;title&gt;Home Page&lt;/title&gt;
    &lt;meta name="navigationCategory" content="home"/&gt;
  &lt;/head&gt;
  &lt;body&gt;</b></tt>
    &lt;h1&gt;Welcome to the Home Page!&lt;/h1&gt;
    &lt;div&gt;
      This is a normal XHTML page that authors 
      create. The guidelines are as follows:
      &lt;ul&gt;
        &lt;li&gt;Each page must be valid XHTML&lt;/li&gt;
        &lt;li&gt;Each page must have a meta tag that 
            indicates the navigation category.&lt;/li&gt;
        &lt;li&gt;The templatePage.xslt stylesheet will add 
            the top and side navigation bars.&lt;/li&gt;
      &lt;/ul&gt;
      Pages are published to the WEB-INF/xml directory 
      of a web app. This forces clients to access pages
      through a Servlet, because the Servlet container
      prevents direct access to anything under WEB-INF.
    &lt;/div&gt;
  <tt class="userinput"><b>&lt;/body&gt;
&lt;/html&gt; </b></tt></pre></blockquote>
</div>

<a name="javaxslt-CHP-8-FIG-2" /></a><div class="figure"><img src="figs/jxt_0802.gif" alt="Figure 8-2" width="481" height="430" /></div><h4 class="objtitle">Figure 8-2. XHTML output with navigation areas</h4>

<p>Since XSLT is used to insert the appropriate navigation areas, all
pages must be well-formed XML. This is a good practice, and anyone
who knows HTML should be able to make the transition to
XHTML.<a href="#FOOTNOTE-36">[36]</a> Programmers can provide scripts for page authors to run
that validate the XML against one of the XHTML DTDs, reporting errors
before pages are published to the web site.
</p><blockquote class="footnote"> <a name="FOOTNOTE-36" /></a><p> [36] HTML TIDY is a free tool that converts HTML to
XHTML. It is available at <a href="../../../../../../www.w3.org/People/Raggett/tidy">http://www.w3.org/People/Raggett/tidy</a>.</p>
</blockquote>

<a name="ch08-3-fm2xml" /></a><blockquote><b>NOTE:</b> 

Strictly adhering to XHTML DTDs makes it much easier for programmers to write all sorts of programs that manage web site content because page content is consistently structured and can be easily parsed.
<p></p>
</blockquote>
<p>The XSLT stylesheet searches for the <tt class="literal">&lt;meta&gt;</tt>
tag; therefore, <tt class="literal">&lt;html&gt;</tt>,
<tt class="literal">&lt;head&gt;</tt>, and <tt class="literal">&lt;meta&gt;</tt>
are required elements. If the <tt class="literal">&lt;meta&gt;</tt> tag is
not found, the navigation category defaults to "unknown,"
and none of the navigation links are highlighted. Any content found
inside of <tt class="literal">&lt;head&gt;</tt> and
<tt class="literal">&lt;body&gt;</tt> is simply copied to the appropriate
location within the result tree document. <a href="ch08_01.htm">Example 8-2</a> lists the XSLT stylesheet that inserts the
navigation areas.<a name="INDEX-906" /></a>
</p>

<a name="javaxslt-CHP-8-EX-2" /></a><div class="example">
<h4 class="objtitle">Example 8-2. templatePage.xslt </h4>
<blockquote><pre class="code">&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;!--
*********************************************************************
** A stylesheet used by every page on a web site. This stylesheet
** defines where the page header and navigation bar are placed.
******************************************************************--&gt;
&lt;xsl:stylesheet version="1.0" 
   xmlns:xsl="http://www.w3.org/1999/XSL/Transform"&gt;

  &lt;!--
  *******************************************************************
  ** The result tree is XHTML
  ****************************************************************--&gt;
  &lt;xsl:output method="xml"
     doctype-public="-//W3C//DTD XHTML 1.0 Transitional//EN"
     doctype-system="http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd"
     encoding="UTF-8"/&gt;

  &lt;!--
  *******************************************************************
  ** The navigation category is determined by the &lt;meta&gt; tag in the 
  ** source XHTML document. The top navigation bar uses this variable.
  ****************************************************************--&gt;
  <tt class="userinput"><b>&lt;xsl:variable name="global.nav.category"&gt;
    &lt;xsl:choose&gt;
      &lt;xsl:when test="/html/head/meta[@name='navigationCategory']"&gt;
        &lt;xsl:value-of select="/html/head/meta
                [@name='navigationCategory']/@content"/&gt;
      &lt;/xsl:when&gt;
      &lt;xsl:otherwise&gt;
        &lt;xsl:text&gt;unknown&lt;/xsl:text&gt;
      &lt;/xsl:otherwise&gt;
    &lt;/xsl:choose&gt;
  &lt;/xsl:variable&gt;</b></tt>
  
  &lt;!--
  *******************************************************************
  ** This template produces the XHTML document.
  ****************************************************************--&gt;
  &lt;xsl:template match="/"&gt;
    &lt;html xmlns="http://www.w3.org/1999/xhtml"&gt;
      <tt class="userinput"><b>&lt;!-- copy the &lt;head&gt; from the source document --&gt;
      &lt;xsl:copy-of select="html/head"/&gt;</b></tt>

      &lt;body&gt;
        &lt;!-- this table defines the overall layout of the page --&gt;
        &lt;table width="100%" cellpadding="4" 
               cellspacing="0" border="0"&gt;
          &lt;tr bgcolor="#f0f0f0"&gt;
            &lt;td colspan="2"&gt;
              <tt class="userinput"><b>&lt;xsl:call-template name="createTopNavbar"/&gt;</b></tt>
            &lt;/td&gt;
          &lt;/tr&gt;
          &lt;tr valign="top"&gt;
            &lt;td bgcolor="#cccccc" width="150px"&gt;
               <tt class="userinput"><b>&lt;xsl:call-template name="createLeftNavbar"/&gt;</b></tt>
            &lt;/td&gt;
            &lt;td bgcolor="white"&gt;
              &lt;!--
              *******************************************************
              ** Copy all contents of the &lt;body&gt; from the source
              ** XHTML document to the result tree XHTML document.
              ****************************************************--&gt;
              <tt class="userinput"><b>&lt;xsl:copy-of select="html/body/* | html/body/text( )"/&gt;</b></tt>
            &lt;/td&gt;
          &lt;/tr&gt;
        &lt;/table&gt;
      &lt;/body&gt;
    &lt;/html&gt;
  &lt;/xsl:template&gt;

  &lt;!--
  *******************************************************************
  ** This template produces the top navigation bar.
  ****************************************************************--&gt;
  &lt;xsl:template name="createTopNavbar"&gt;
    <tt class="userinput"><b>&lt;xsl:call-template name="navButton"&gt;
      &lt;xsl:with-param name="category" select="'home'"/&gt;
      &lt;xsl:with-param name="displayName" select="'Home'"/&gt;
      &lt;xsl:with-param name="url" select="'home.xml'"/&gt;
    &lt;/xsl:call-template&gt;</b></tt>
    |
    &lt;xsl:call-template name="navButton"&gt;
      &lt;xsl:with-param name="category" select="'company'"/&gt;
      &lt;xsl:with-param name="displayName" select="'Company'"/&gt;
      &lt;xsl:with-param name="url" select="'company.xml'"/&gt;
    &lt;/xsl:call-template&gt;
    |
    &lt;xsl:call-template name="navButton"&gt;
      &lt;xsl:with-param name="category" select="'products'"/&gt;
      &lt;xsl:with-param name="displayName" select="'Products'"/&gt;
      &lt;xsl:with-param name="url" select="'products.xml'"/&gt;
    &lt;/xsl:call-template&gt;
    |
    &lt;xsl:call-template name="navButton"&gt;
      &lt;xsl:with-param name="category" select="'jobs'"/&gt;
      &lt;xsl:with-param name="displayName" select="'Jobs'"/&gt;
      &lt;xsl:with-param name="url" select="'jobs.xml'"/&gt;
    &lt;/xsl:call-template&gt;
  &lt;/xsl:template&gt;

  &lt;!--
  *******************************************************************
  ** This template produces a "button" in the top navigation bar.
  ****************************************************************--&gt;
  &lt;xsl:template name="navButton"&gt;
    &lt;xsl:param name="category"/&gt;
    &lt;xsl:param name="displayName"/&gt;
    &lt;xsl:param name="url"/&gt;
    &lt;xsl:choose&gt;
      &lt;!-- The current category is displayed as text --&gt;
      <tt class="userinput"><b>&lt;xsl:when test="$category = $global.nav.category"&gt;
        &lt;xsl:value-of select="$displayName"/&gt;
      &lt;/xsl:when&gt;</b></tt>

      &lt;!-- All other categories are displayed as hyperlinks --&gt;
      <tt class="userinput"><b>&lt;xsl:otherwise&gt;
        &lt;a href="{$url}"&gt;
          &lt;xsl:value-of select="$displayName"/&gt;
        &lt;/a&gt;
      &lt;/xsl:otherwise&gt;</b></tt>
    &lt;/xsl:choose&gt;
  &lt;/xsl:template&gt;
  
  &lt;!--
  *******************************************************************
  ** This template creates the left navigation area.
  ****************************************************************--&gt;
  &lt;xsl:template name="createLeftNavbar"&gt;
    Left Navigation Area
  &lt;/xsl:template&gt;
&lt;/xsl:stylesheet&gt; </pre></blockquote>
</div>

<p><a name="INDEX-907" /></a>This
stylesheet is quite simple in concept. First, it sets up the
<tt class="literal">global.nav.category</tt> variable. The stylesheet uses
<a name="INDEX-908" /></a>
<a name="INDEX-909" /></a>XPath to check for the existence of a
<tt class="literal">&lt;meta&gt;</tt> tag that contains a
<tt class="literal">navigationCategory</tt> attribute:
</p>

<blockquote><pre class="code">&lt;xsl:variable name="global.nav.category"&gt;
  &lt;xsl:choose&gt;<tt class="userinput"><b>
    &lt;xsl:when test="/html/head/meta[@name='navigationCategory']"&gt;</b></tt>
      &lt;xsl:value-of select="/html/head/meta
              [@name='navigationCategory']/@content"/&gt;
    &lt;/xsl:when&gt;
    &lt;xsl:otherwise&gt;
      &lt;xsl:text&gt;unknown&lt;/xsl:text&gt;
    &lt;/xsl:otherwise&gt;
  &lt;/xsl:choose&gt;
&lt;/xsl:variable&gt;</pre></blockquote>

<p>The first part of the XPath expression used by
<tt class="literal">&lt;xsl:when&gt;</tt> locates any
<tt class="literal">&lt;meta&gt;</tt> tags:
</p>

<blockquote><pre class="code">/html/head/meta</pre></blockquote>

<p>Next, a predicate is used to narrow down the list to the one
<tt class="literal">&lt;meta&gt;</tt> tag that contains a
<tt class="literal">navigationCategory</tt> attribute:
</p>

<blockquote><pre class="code">[@name='navigationCategory']</pre></blockquote>

<p>If this is found, the value of the <tt class="literal">content</tt>
attribute is assigned to the <tt class="literal">global.nav.category</tt>
variable. Otherwise, the value is <tt class="literal">unknown</tt>.
</p>

<p>The XSLT stylesheet then contains a template that matches the
<tt class="literal">/</tt> pattern. This template defines the overall XHTML
page layout by creating a <tt class="literal">&lt;table&gt;</tt>. The
document <tt class="literal">&lt;head&gt;</tt>, however, is simply copied
from the input XHTML document:
</p>

<blockquote><pre class="code">&lt;xsl:copy-of select="html/head"/&gt;</pre></blockquote>

<p>Because the original <tt class="literal">&lt;head&gt;</tt> is merely copied
to the result tree, any styles or scripts that page authors include
in their own documents are preserved. The only drawback occurs when
people define CSS styles that change the look and feel of the
navigation areas, such as changing the fonts and colors used in a
page. If this is a concern, you might want to include logic in the
XSLT stylesheet that ignores all <tt class="literal">&lt;style&gt;</tt>
tags and <tt class="literal">style</tt> attributes in the original XHTML
document.
</p>

<p>Once the <tt class="literal">&lt;head&gt;</tt> is copied, the XSLT
stylesheet creates the <tt class="literal">&lt;body&gt;</tt> for the result
tree. An XHTML <tt class="literal">&lt;table&gt;</tt> controls the overall
page layout, and named XSLT templates are used to create the
navigation areas:
</p>

<blockquote><pre class="code">&lt;xsl:call-template name="createTopNavbar"/&gt;
...
&lt;xsl:call-template name="createLeftNavbar"/&gt;</pre></blockquote>

<p>The <tt class="literal">createTopNavbar</tt> template is somewhat more
complicated because it contains logic to display the current category
differently. The <tt class="literal">createLeftNavbar</tt> template, on the
other hand, simply copies some static content to the result. Finally,
the contents of the <tt class="literal">&lt;body&gt;</tt> tag are copied
from the original document to the result tree:
</p>

<blockquote><pre class="code">&lt;xsl:copy-of select="html/body/* | html/body/text( )"/&gt;</pre></blockquote>

<p>Unlike the <tt class="literal">&lt;head&gt;</tt>, the
<tt class="literal">&lt;body&gt;</tt> is not copied directly. Instead, all
elements and text within the <tt class="literal">&lt;body&gt;</tt> are
copied. This prevents the following invalid XHTML from being
produced:
</p>

<blockquote><pre class="code">&lt;tr&gt;&lt;td&gt;&lt;body&gt;...&lt;/body&gt;&lt;/td&gt;&lt;/tr&gt;</pre></blockquote>

<p>The
<tt class="literal">createTopNavbar</tt><a name="INDEX-910" /></a>
<a name="INDEX-911" /></a>
named template is used to create the row of links in the top
navigation area. For each navigation category, it calls the
<tt class="literal">navButton</tt> template:
</p>

<blockquote><pre class="code">&lt;xsl:call-template name="navButton"&gt;
  &lt;xsl:with-param name="category" select="'home'"/&gt;
  &lt;xsl:with-param name="displayName" select="'Home'"/&gt;
  &lt;xsl:with-param name="url" select="'home.xml'"/&gt;
&lt;/xsl:call-template&gt;</pre></blockquote>

<p>The <tt class="literal">category</tt> parameter allows the
<tt class="literal">navButton</tt> template to determine if the
<tt class="literal">displayName</tt> parameter should be displayed as a
hyperlink or text. The code to do this is emphasized in the
<tt class="literal">navButton</tt> template (in <a href="ch08_01.htm">Example 8-2</a>) and is not repeated here.
</p>

<p>None of this works without a servlet driving the process. In this
example, all XHTML pages are stored in the web application's
<em class="filename">WEB-INF</em> directory and saved with
<em class="filename">.xml</em> filename extensions. Remember that these
are the original web pages and do not contain any navigation areas.
They are stored in the <em class="filename">WEB-INF</em> directory to
ensure that clients cannot access them directly. Instead, clients
must use a servlet called <tt class="literal">TemplateServlet</tt> to
request all pages. This servlet locates the XML file, performs the
XSLT transformation using <em class="filename">templatePage.xslt</em>, and
sends the result tree back to the client browser. The entire process
is transparent to clients because they see only the results of the
transformation.
</p>

<p><a href="ch08_01.htm">Table 8-1</a> <a name="INDEX-912" /></a> <a name="INDEX-913" /></a>shows the complete structure of the
WAR file that supports this example.
</p>

<a name="javaxslt-CHP-8-TABLE-1" /></a><h4 class="objtitle">Table 8-1. WAR file contents </h4><table border="1" cellpadding="3">



<tr>
<th>
<p>File</p>
</th>
<th>
<p>Description</p>
</th>
</tr>


<tr>
<td>
<p><em class="filename">WEB-INF/web.xml</em></p>
</td>
<td>
<p>The deployment descriptor (see <a href="ch08_01.htm">Example 8-3</a>)</p>
</td>
</tr>
<tr>
<td>
<p><em class="filename">WEB-INF/classes/chap8/TemplateServlet.class</em></p>
</td>
<td>
<p>The servlet that drives the XSLT transformation (see <a href="ch08_01.htm">Example 8-4</a>) 
</p>
</td>
</tr>
<tr>
<td>
<p><em class="filename">WEB-INF/lib/javaxslt.jar</em></p>
</td>
<td>
<p>Contains the <tt class="literal">StylesheetCache</tt> class</p>
</td>
</tr>
<tr>
<td>
<p><em class="filename">WEB-INF/xml/company.xml</em></p>
</td>
<td>
<p>An example web page</p>
</td>
</tr>
<tr>
<td>
<p><em class="filename">WEB-INF/xml/home.xml</em></p>
</td>
<td>
<p>An example web page (see <a href="ch08_01.htm">Example 8-1</a>)</p>
</td>
</tr>
<tr>
<td>
<p><em class="filename">WEB-INF/xml/jobs.xml</em></p>
</td>
<td>
<p>An example web page</p>
</td>
</tr>
<tr>
<td>
<p><em class="filename">WEB-INF/xml/products.xml</em></p>
</td>
<td>
<p>An example web page</p>
</td>
</tr>
<tr>
<td>
<p><em class="filename">WEB-INF/xslt/templatePage.xslt</em></p>
</td>
<td>
<p>The XSLT stylesheet (see <a href="ch08_01.htm">Example 8-2</a>)</p>
</td>
</tr>

</table><p>

<p>The <a name="INDEX-914" /></a> <a name="INDEX-915" /></a>deployment descriptor,
<em class="filename">web.xml</em><a name="INDEX-916" /></a> <a name="INDEX-917" /></a>,
is shown in <a href="ch08_01.htm">Example 8-3</a>.
</p>

<a name="javaxslt-CHP-8-EX-3" /></a><div class="example">
<h4 class="objtitle">Example 8-3. Deployment descriptor </h4>
<blockquote><pre class="code">&lt;?xml version="1.0" encoding="ISO-8859-1"?&gt;
&lt;!DOCTYPE web-app PUBLIC "-//Sun Microsystems, Inc.//DTD Web Application 2.2//EN"
  "http://java.sun.com/j2ee/dtds/web-app_2.2.dtd"&gt;
&lt;web-app&gt;
  &lt;servlet&gt;
    &lt;servlet-name&gt;template&lt;/servlet-name&gt;
    &lt;servlet-class&gt;chap8.TemplateServlet&lt;/servlet-class&gt;
  &lt;/servlet&gt;
  &lt;servlet-mapping&gt;
    &lt;servlet-name&gt;template&lt;/servlet-name&gt;
    &lt;url-pattern&gt;/template/*&lt;/url-pattern&gt;
  &lt;/servlet-mapping&gt;
&lt;/web-app&gt; </pre></blockquote>
</div>

<p>Since all files are protected under the <em class="filename">WEB-INF</em>
directory, the <tt class="literal">/template/*</tt> URL pattern specified
in the deployment descriptor is the only way for clients to access
this application. The URL users type into their browser is:
<em class="emphasis">http://localhost:8080/chap8/template/home.xml</em>.
</p>

<p>This displays the page shown earlier in <a href="ch08_01.htm">Figure 8-2</a>.
In this URL, the word <tt class="literal">template</tt> maps to the
servlet, and <tt class="literal">/home.xml</tt> is the <em class="emphasis">path
information</em>. This is retrieved by the servlet using the
<tt class="literal">getPathInfo( )</tt> method of
<tt class="literal">HttpServletRequest</tt>.
<a name="INDEX-918" /></a>The source code for <a name="INDEX-919" /></a><tt class="literal">TemplateServlet</tt>
is shown in <a href="ch08_01.htm">Example 8-4</a>.
</p>

<a name="javaxslt-CHP-8-EX-4" /></a><div class="example">
<h4 class="objtitle">Example 8-4. TemplateServlet.java </h4>
<a name="INDEX-920" /></a><blockquote><pre class="code">package chap8;

import com.oreilly.javaxslt.util.StylesheetCache;
import java.io.*;
import java.net.*;
import javax.servlet.*;
import javax.servlet.http.*;
import javax.xml.transform.*;
import javax.xml.transform.stream.*;

/**
 * Applies a standard stylesheet to every XML page on a site.
 */
public class TemplateServlet extends HttpServlet {
    private String xsltFileName;

    /**
     * Locate the template stylesheet during servlet initialization.
     */
    public void init( ) throws UnavailableException {
        <tt class="userinput"><b>ServletContext ctx = getServletContext( );
        this.xsltFileName = ctx.getRealPath(
                    "/WEB-INF/xslt/templatePage.xslt");</b></tt>
        File f = new File(this.xsltFileName);

        if (!f.exists( )) {
            throw new UnavailableException(
                    "Unable to locate XSLT stylesheet: "
                    + this.xsltFileName, 30);
        }
    }

    public void doGet(HttpServletRequest req, HttpServletResponse res)
            throws ServletException, IOException {
        try {
            // use the ServletContext to locate the XML file
            <tt class="userinput"><b>ServletContext ctx = getServletContext( );
            String xmlFileName = ctx.getRealPath("/WEB-INF/xml"
                    + req.getPathInfo( ));</b></tt>

            // verify that the file exists
            if (!new File(xmlFileName).exists( )) {
                res.sendError(HttpServletResponse.SC_NOT_FOUND, xmlFileName);
            } else {
                res.setContentType("text/html");

                // load the XML file
                Source xmlSource = new StreamSource(new BufferedReader(
                        new FileReader(xmlFileName)));

                // use a cached version of the XSLT
                Transformer trans =
                        StylesheetCache.newTransformer(xsltFileName);
                trans.transform(xmlSource, new StreamResult(res.getWriter( )));
            }
        } catch (TransformerConfigurationException tce) {
            throw new ServletException(tce);
        } catch (TransformerException te) {
            throw new ServletException(te);
        }
    }
}</pre></blockquote>
</div>

<p>This is a fairly basic servlet whose sole purpose is to locate XML
files and perform XSLT transformations. The <tt class="literal">init(
)</tt><a name="INDEX-921" /></a>
method is used to locate <em class="filename">templatePage.xslt</em> from
the <em class="filename">WEB-INF/xslt</em> directory:
</p>

<blockquote><pre class="code">ServletContext ctx = getServletContext( );
this.xsltFileName = ctx.getRealPath(
            "/WEB-INF/xslt/templatePage.xslt");</pre></blockquote>

<p>As discussed in earlier chapters, the <tt class="literal">getRealPath(
)</tt> method converts the path into a system-specific pathname.
This allows the <tt class="literal">StylesheetCache</tt> class to locate
the XSLT stylesheet properly. Later, in the <tt class="literal">doGet(
)</tt> method of the servlet, the same method is used to locate
the requested XML file:
</p>

<blockquote><pre class="code">ServletContext ctx = getServletContext( );
String xmlFileName = ctx.getRealPath("/WEB-INF/xml"
        + req.getPathInfo( ));</pre></blockquote>

<p>As shown back in the source for <tt class="literal">TemplateServlet</tt>,
it then checks for the existence of this file and sends an error if
necessary. Otherwise, it uses JAXP to perform the XSLT
transformation. This is where the navigation areas get added to the
document.
</p>

<a name="javaxslt-CHP-8-SIDEBAR-1" /></a><blockquote><table border="1" cellpadding="6"><tr><td>
<h4 class="objtitle">More on Caching</h4>
&nbsp;
<p>In the <tt class="literal">TemplateServlet</tt> class, the
<a name="INDEX-922" /></a>
<a name="INDEX-923" /></a>XSLT
stylesheets are cached using the
<tt class="literal">com.oreilly.javaxslt.util.StylesheetCache</tt> class.
In this particular example, however, the XML data and XSLT
stylesheets are all static files. Because these files are not
dynamically generated, it becomes possible to cache the
transformation <em class="emphasis">result</em>, yielding the highest
possible performance. The next chapter discusses a class called
<tt class="literal">ResultCache</tt> that makes this possible.
</p>
</td></tr></table><p></blockquote>

<p>Using XSLT stylesheets for page layout templates is a useful
technique because individual page authors do not have to duplicate
headers, footers, and navigation areas into every page they create.
By centralizing page layout in one or more standard XSLT stylesheets,
fewer changes are required to update the look of an entire web
site.<a name="INDEX-924" /></a>
<a name="INDEX-925" /></a>
</p>

</div>

<hr width="684" align="left" />
<div class="navbar"><table width="684" border="0"><tr><td align="left" valign="top" width="228"><a href="ch07_05.htm"><img src="../gifs/txtpreva.gif" alt="Previous" border="0" /></a></td><td align="center" valign="top" width="228"><a href="index.htm"><img src="../gifs/txthome.gif" alt="Home" border="0" /></a></td><td align="right" valign="top" width="228"><a href="ch08_02.htm"><img src="../gifs/txtnexta.gif" alt="Next" border="0" /></a></td></tr><tr><td align="left" valign="top" width="228">7.5. Finishing Touches</td><td align="center" valign="top" width="228"><a href="index/index.htm"><img src="../gifs/index.gif" alt="Book Index" border="0" /></a></td><td align="right" valign="top" width="228">8.2. Session Tracking Without Cookies</td></tr></table></div>
<hr width="684" align="left" />

<img src="../gifs/navbar.gif" usemap="#library-map" border="0" alt="Library Navigation Links" />
<p><p><font size="-1"><a href="copyrght.htm">Copyright &copy; 2002</a> O'Reilly &amp; Associates. All rights reserved.</font></p>

<map name="library-map"><area shape="rect" coords="0,0,85,93" href="../index.htm"><area shape="rect" coords="85,0,180,98" href="../sax2/index.htm"><area shape="rect" coords="182,-1,261,100" href="../xmlnut/index.htm"><area shape="rect" coords="263,1,384,96" href="../jxml/index.htm"><area shape="rect" coords="386,1,463,100" href="index.htm"><area shape="rect" coords="466,1,533,112" href="../xslt/index.htm"><area shape="rect" coords="535,-1,610,108" href="../schema/index.htm"><area shape="rect" coords="613,1,696,121" href="../pxml/index.htm"></map>

</body></html>