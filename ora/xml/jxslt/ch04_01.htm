<html><head><title>Java-Based Web Technologies (Java and XSLT)</title><link rel="stylesheet" type="text/css" href="../style/style1.css" />

<meta name="DC.Creator" content="Eric M. Burke" /><meta name="DC.Format" content="text/xml" scheme="MIME" /><meta name="DC.Language" content="en-US" /><meta name="DC.Publisher" content="O'Reilly &amp; Associates, Inc." /><meta name="DC.Source" scheme="ISBN" content="0596001453L" /><meta name="DC.Subject.Keyword" content="stuff" /><meta name="DC.Title" content="Java and XSLT" /><meta name="DC.Type" content="Text.Monograph" />

</head><body bgcolor="#ffffff">

<img src="gifs/smbanner.gif" usemap="#banner-map" border="0" alt="Book Home" /><map name="banner-map"><area shape="rect" coords="1,-2,616,66" href="index.htm" alt="Java and XSLT" /><area shape="rect" coords="629,-11,726,25" href="jobjects/fsearch.htm" alt="Search this book" /></map>

<div class="navbar"><table width="684" border="0"><tr><td align="left" valign="top" width="228"><a href="ch03_06.htm"><img src="../gifs/txtpreva.gif" alt="Previous" border="0" /></a></td><td align="center" valign="top" width="228" /><td align="right" valign="top" width="228"><a href="ch04_02.htm"><img src="../gifs/txtnexta.gif" alt="Next" border="0" /></a></td></tr></table></div>


<h1 class="chapter">Chapter 4. Java-Based Web Technologies</h1>
<div class="htmltoc"><h4 class="tochead">Contents:</h4>
  <p> <a href="#javaxslt-CHP-4-SECT-1">Traditional Approaches</a><br />
<a href="ch04_02.htm">The Universal Design</a><br />
<a href="ch04_03.htm">XSLT and EJB</a><br />
<a href="ch04_04.htm">Summary of Key Approaches</a><br /></p></div><p><a name="INDEX-419" /></a>In a perfect world, a single web
development technology would be inexpensive, easy to maintain, offer
rapid response time, and be highly scalable. It would also be
portable to any operating system or hardware platform and would adapt
well to future requirement changes. It would support access from
wireless devices, standalone client applications, and web browsers,
all with minimal changes to code.
</p>

<p>No perfect solution exists, nor is one likely to exist anytime soon.
If it did, many of us would be out of work. A big part of software
engineering is recognizing that tradeoffs are inevitable and knowing
when to sacrifice one set of goals in order to deliver the maximum
value to your customer or business. For example, far too many
programmers focus on raw performance metrics without any
consideration for ease of development or maintainability by
nonexperts. These decisions are hard and are often subjective, based
on individual experience and preferences.
</p>

<p>The goal of this chapter is to look at the highlights of several
popular technologies for web application development using Java and
see how each measures up to an XSLT-based approach. The focus is on
<em class="emphasis">architecture</em>, which implies a high-level
viewpoint without emphasis on specific implementation details.
Although XSLT offers a good balance between performance,
maintainability, and flexibility, it is not the right solution for
all applications. It is hoped that the comparisons made here will
help you decide if XSLT is the right choice for your web
applications.
</p><div class="sect1"><a name="javaxslt-CHP-4-SECT-1" /></a>
<h2 class="sect1">4.1. Traditional Approaches</h2>

<p>Before delving into more sophisticated options, let's step back
and look at a few basic approaches to web development using Java. For
small web applications or moderately dynamic web sites, these
approaches may be sufficient. As you might suspect, however, none of
these approaches hold up as well as XML and XSLT when your sites get
more complex.
</p>

<a name="javaxslt-CHP-4-SECT-1.1" /></a><div class="sect2">
<h3 class="sect2">4.1.1. CGI</h3>

<p><a name="INDEX-420" /></a>Common Gateway Interface (CGI) is a
protocol for interfacing external applications, which can be written
in just about any language, with web servers. The most common
language choices for CGI are C and Perl. This interface is
accomplished in a number of ways, depending on the type of request.
For example, parameters associated with an <tt class="literal">HTTP
GET</tt> request are passed to the CGI script via the
<tt class="literal">QUERY_STRING</tt> environment variable. <tt class="literal">HTTP
POST</tt> data, on the other hand, is piped to the standard
input stream of the CGI script. CGI always sends results back to the
web server via its standard output.
</p>

<p>Ordinary CGI programs are invoked from the web server as external
programs, which is the most notable difference when compared with
servlets. With each request from the browser, the web server spawns a
new process to run the CGI program. Aside from the obvious
performance penalty, this also makes it difficult to maintain
<em class="emphasis">state information</em> between requests. A web-based
shopping cart is a perfect example of state information that must be
preserved between requests. <a href="ch04_01.htm">Figure 4-1</a> illustrates
the CGI process.
</p>

<a name="javaxslt-CHP-4-FIG-1" /></a><div class="figure"><img src="figs/jxt_0401.gif" alt="Figure 4-1" width="388" height="191" /></div><h4 class="objtitle">Figure 4-1. CGI process</h4>

<a name="ch04-4-fm2xml" /></a><blockquote><b>NOTE:</b> 

FastCGI is an alternative to CGI with two notable differences. First, FastCGI processes do not exit with each request/response cycle. Second, the environment variable and pipe I/O mechanism of CGI has been eschewed in favor of TCP connections, allowing FastCGI programs to be distributed to different servers. The net result is that FastCGI eliminates the most vexing problems of CGI while making it easy to salvage existing CGI programs.
<p></p></blockquote>
<p>Although technically possible, using Java for CGI programming is not
generally a good idea. In fact, it is an awful idea! The Java Virtual
Machine (<a name="INDEX-421" /></a>JVM) would have to be launched with each
and every request, which would be painfully slow. Any Java programmer
knows that application startup time has never been one of the
strengths of Java. Servlets had to address this issue first. What was
needed was a new approach in which the JVM was loaded a single time
and left running even when no requests came in. The term
<em class="emphasis">servlet engine</em> referred to the JVM that hosted
the servlets, often serving a dual role as an HTTP web server.
</p>

</div>
<a name="javaxslt-CHP-4-SECT-1.2" /></a><div class="sect2">
<h3 class="sect2">4.1.2. Servlets as CGI Replacements</h3>

<p>Sun's
<a name="INDEX-422" /></a>
<a name="INDEX-423" /></a>Java servlet API
was originally released way back in 1997 when Java was mostly a
client-side development language. Servlets were originally marketed
and used as replacements for CGI programs. Developers were quick to
adopt servlets because of their advantages over CGI.
</p>

<p>Since the servlet engine can run for as long as the web server runs,
servlets can be loaded into memory once and kept around for
subsequent requests. This is easy to accomplish in Java because
servlets are really nothing more than Java classes. The JVM simply
loads the servlet objects into memory, hanging on to the references
for as long as the web application runs.
</p>

<p>The persistent nature of servlets results in two additional benefits,
both of which push servlets well beyond the capabilities of basic
CGI. First, state information can be preserved in memory for long
periods of time. Even though the browser loses its connection to the
web server after each request/response cycle, servlets can store
objects in memory until the browser reconnects for the next page.
Secondly, since Java has built-in threading capability, it is
possible for numerous clients to share the same servlet instance.
Creating additional threads is far more efficient than spawning
additional external processes, making servlets very good performers.
</p>

<p>Early versions of the Java servlet API did not specify the mechanism
for
<em class="emphasis">deployment</em><a name="INDEX-424" /></a>
<a name="INDEX-425" /></a> (i.e.,
installation) onto servers. Although the servlet API was consistent,
deployment onto different servlet engines was completely vendor
specific. With Version 2.2 of the servlet API, however, proprietary
servlet engines were dropped in favor of a generic
<a name="INDEX-426" /></a><em class="emphasis">servlet
container</em> specification. The idea of a container is to
formalize the relationship between a servlet and the environment in
which it resides. This made it possible to deploy the same servlet on
any vendor's container without any changes.
</p>

<p>Along with the servlet container came the concept of a <em class="emphasis">web
application</em><a name="INDEX-427" /></a>. A web application consists of a
collection of servlets, static web pages, images, or any other
resources that may be needed. The standard unit of deployment for web
applications is the <a name="INDEX-428" /></a>Web Application Archive (WAR) file,
which is actually just a Java Application Archive (JAR) file that
uses a standard directory structure and has a
<em class="filename">.war</em> file extension. In fact, you use the
<em class="filename">jar</em> command to create WAR files. Along with the
WAR file comes a <em class="emphasis">deployment
descriptor</em><a name="INDEX-429" /></a>, which is an XML configuration file
that specifies all configuration aspects of a web application. The
important details of WAR files and deployment descriptors will be
outlined in <a href="ch06_01.htm">Chapter 6, "Servlet Basics and XSLT"</a>.
</p>

<p>Servlets are simple to implement, portable, can be deployed to any
servlet container in a consistent way, and offer high performance.
Because of these advantages, servlets are the underlying technology
for every other approach discussed in this chapter. When used in
isolation, however, servlets do have limitations. These limitations
manifest themselves as web applications grow increasingly complex and
web pages become more sophisticated.
</p>

<p>The screen shot shown in <a href="ch04_01.htm">Figure 4-2</a> shows a simple
web page that lists television shows for the current day. In this
first implementation, a servlet is used. It will be followed with a
JavaServer Pages (JSP) implementation presented later in this
chapter.
</p>

<a name="javaxslt-CHP-4-FIG-2" /></a><div class="figure"><img src="figs/jxt_0402.gif" alt="Figure 4-2" width="460" height="386" /></div><h4 class="objtitle">Figure 4-2. ScheduleServlet output</h4>

<p>The <tt class="literal">Schedule</tt><a name="INDEX-430" /></a> Java class has a method called
<tt class="literal">getTodaysShows(
)</tt><a name="INDEX-431" /></a>, that returns an array of
<tt class="literal">Show</tt> objects. The array is already sorted, which
reduces the amount of work that the servlet has to do to generate
this page. The <tt class="literal">Schedule</tt> and
<tt class="literal">Show</tt><a name="INDEX-432" /></a> classes are used for all of the
remaining examples in this chapter. Ideally, this will help
demonstrate that no matter which approach you take, keeping business
logic and database access code out of the servlet makes it easier to
move to new technologies without rewriting all of your code. The code
for
<em class="filename">ScheduleServlet.java</em><a name="INDEX-433" /></a>
is shown in <a href="ch04_01.htm">Example 4-1</a>. This is typical of a
first-generation servlet, generating its output using a series of
<tt class="literal">println( )</tt><a name="INDEX-434" /></a> statements.
</p>

<a name="javaxslt-CHP-4-EX-1" /></a><div class="example">
<h4 class="objtitle">Example 4-1. ScheduleServlet.java </h4>
<blockquote><pre class="code">package chap4;

import java.io.*;
import java.text.SimpleDateFormat;
import javax.servlet.*;
import javax.servlet.http.*;

public class ScheduleServlet extends HttpServlet {
    public void doGet(HttpServletRequest request,
            HttpServletResponse response) throws IOException,
            ServletException {

        SimpleDateFormat dateFmt = new SimpleDateFormat("hh:mm a");

        Show[] shows = Schedule.getInstance().getTodaysShows( );

        response.setContentType("text/html");
        PrintWriter pw = response.getWriter( );
        pw.println("&lt;html&gt;&lt;head&gt;&lt;title&gt;Today's Shows&lt;/title&gt;&lt;/head&gt;&lt;body&gt;");
        pw.println("&lt;h1&gt;Today's Shows&lt;/h1&gt;");
        pw.println("&lt;table border=\"1\" cellpadding=\"3\"");
        pw.println(" cellspacing=\"0\"&gt;");

        pw.println("&lt;tr&gt;&lt;th&gt;Channel&lt;/th&gt;&lt;th&gt;From&lt;/th&gt;");
        pw.println("&lt;th&gt;To&lt;/th&gt;&lt;th&gt;Title&lt;/th&gt;&lt;/tr&gt;");

        for (int i=0; i&lt;shows.length; i++) {
            pw.println("&lt;tr&gt;");
            pw.print("&lt;td&gt;");
            pw.print(shows[i].getChannel( ));
            pw.println("&lt;/td&gt;");
            pw.print("&lt;td&gt;");
            pw.print(dateFmt.format(shows[i].getStartTime( )));
            pw.println("&lt;/td&gt;");
            pw.print("&lt;td&gt;");
            pw.print(dateFmt.format(shows[i].getEndTime( )));
            pw.println("&lt;/td&gt;");
            pw.print("&lt;td&gt;");
            pw.print(shows[i].getTitle( ));
            pw.println("&lt;/td&gt;");
            pw.println("&lt;/tr&gt;");
        }
        pw.println("&lt;/table&gt;");
        pw.println("&lt;/body&gt;");
        pw.println("&lt;/html&gt;");
    }
}</pre></blockquote>
</div>

<p>If you are interested in the details of servlet coding, be sure to
read <a href="ch06_01.htm">Chapter 6, "Servlet Basics and XSLT"</a>. For now, focus on how the HTML is
generated. All of those <tt class="literal">println( )</tt> statements look
innocuous enough in this short example, but a "real" web
page will have thousands of <tt class="literal">println( )</tt> statements,
resulting in code that is quite difficult to maintain over the years.
Generally, you will want to factor that code out into a series of
methods or objects that generate fragments of the HTML. However, this
approach is still tedious and error prone.
</p>

<p>The main problems are development scalability and future
maintainability. The code becomes increasingly difficult to write as
your pages get more complex, and it becomes very difficult to make
changes to the HTML when new requirements arrive. Web content authors
and graphic designers are all but locked out of the process since it
takes a programmer to create and modify the code. Each minor change
requires your programming staff to recompile, test, and deploy to the
servlet container.
</p>

<p>Beyond the tedious nature of HTML generation, first-generation
servlets tend to do too much. It is not clear where error handling,
form processing, business logic, and HTML generation are supposed to
reside. Although we are able to leverage two helper classes to
generate the list of shows, a more rigorous approach will be required
for complex web applications. All of the remaining technologies
presented in this chapter are designed to address one or more of
these issues, which become increasingly important as web applications
get more sophisticated.
</p>

</div>
<a name="javaxslt-CHP-4-SECT-1.3" /></a><div class="sect2">
<h3 class="sect2">4.1.3. JSP</h3>

<p><a name="INDEX-435" /></a>You have no doubt heard about JSP. This
is a hot area in web development right now with some pretty hefty
claims about productivity improvements. The argument is simple:
instead of embedding HTML code into Java servlets, which requires a
Java programmer, why not start out with static HTML? Then add special
tags to this HTML that are dynamically expanded by the JSP engine,
thus producing a dynamic web page. <a href="ch04_01.htm">Example 4-2</a>
contains a very simple example of JSP that produces exactly the same
output as
<tt class="literal">ScheduleServlet</tt>.<a name="INDEX-436" /></a>
</p>

<a name="javaxslt-CHP-4-EX-2" /></a><div class="example">
<h4 class="objtitle">Example 4-2. schedule.jsp </h4>
<blockquote><pre class="code"><tt class="userinput"><b>&lt;%@ page import="chap4.*,java.text.*" %&gt;
&lt;%! SimpleDateFormat dateFmt = new SimpleDateFormat("hh:mm a"); %&gt;</b></tt>
&lt;html&gt;
  &lt;head&gt;
    &lt;title&gt;Today's Shows&lt;/title&gt;
  &lt;/head&gt;
&lt;body&gt;
&lt;h1&gt;Today's Shows&lt;/h1&gt;
<tt class="userinput"><b>&lt;% Show[] shows = Schedule.getInstance().getTodaysShows( ); %&gt;</b></tt>
&lt;table border="1" cellpadding="3" cellspacing="0"&gt;
  &lt;tr&gt;&lt;th&gt;Channel&lt;/th&gt;&lt;th&gt;From&lt;/th&gt;&lt;th&gt;To&lt;/th&gt;&lt;th&gt;Title&lt;/th&gt;&lt;/tr&gt;

  <tt class="userinput"><b>&lt;% for (int i=0; i&lt;shows.length; i++) { %&gt;</b></tt>
  &lt;tr&gt;
    &lt;td&gt;<tt class="userinput"><b>&lt;%= shows[i].getChannel( ) %&gt;</b></tt>&lt;/td&gt;
	&lt;td&gt;<tt class="userinput"><b>&lt;%= dateFmt.format(shows[i].getStartTime( )) %&gt;</b></tt>&lt;/td&gt;
	&lt;td&gt;<tt class="userinput"><b>&lt;%= dateFmt.format(shows[i].getEndTime( )) %&gt;</b></tt>&lt;/td&gt;
	&lt;td&gt;<tt class="userinput"><b>&lt;%= shows[i].getTitle( ) %&gt;</b></tt>&lt;/td&gt;
  &lt;/tr&gt;
  <tt class="userinput"><b>&lt;% } %&gt;</b></tt>
&lt;/table&gt;
&lt;/body&gt;
&lt;/html&gt;</pre></blockquote>
</div>

<p>As <em class="filename">schedule.jsp</em> shows, most of the JSP is static
HTML with dynamic content sprinkled in here and there using special
JSP tags. When a client first requests a JSP, the entire page is
translated into source code for a servlet. This generated servlet
code is then compiled and loaded into memory for use by subsequent
requests. During the translation process, JSP tags are replaced with
dynamic content, so the end user only sees the HTML output as if the
entire page was static.
</p>

<p>Runtime performance of JSP is comparable to hand-coded servlets
because the static content in the JSP is generally replaced with a
series of <tt class="literal">println( )</tt> statements in the generated
servlet code. The only major performance hit occurs for the first
person to visit the JSP, because it will have to be translated and
compiled. Most JSP containers provide options to precompile the JSP,
so even this hit can be avoided.
</p>

<p><a name="INDEX-437" /></a>Debugging in JSP can be somewhat
challenging. Since JSP pages are machine translated into Java
classes, method signatures and class names are not always intuitive.
When a programming error occurs, you are often faced with ugly stack
traces that show up directly in the browser. You do have the option
of specifying an error page to be displayed whenever an unexpected
condition occurs. This gives the end user a more friendly error
message, but does little to help you diagnose the problem.
</p>

<p>Here is a portion of what Apache's Tomcat shows in the web
browser when the closing curly brace (<tt class="literal">}</tt>) is
accidentally omitted from the loop shown in the JSP example:
</p>

<blockquote><pre class="code">A Servlet Exception Has Occurred
org.apache.jasper.JasperException: Unable to compile class for
JSP..\work\localhost\chap4\_0002fschedule_0002ejspschedule_jsp_2.java:104:
'catch' without 'try'.
        } catch (Throwable t) {
          ^
..\work\localhost\chap4\_0002fschedule_0002ejspschedule_jsp_2.java:112:
'try' without 'catch' or 'finally'.
}
^
..\work\localhost\chap4\_0002fschedule_0002ejspschedule_jsp_2.java:112:
'}' expected.
}
 ^
3 errors

at org.apache.jasper.compiler.Compiler.compile(Compiler.java:294)
at org.apache.jasper.servlet.JspServlet.doLoadJSP(JspServlet.java:478)
...remainder of stack trace omitted</pre></blockquote>

<p>The remainder of the stack trace is not very helpful because it
simply lists methods that are internal to Tomcat.
<tt class="literal">_0002fschedule_0002ejspschedule_jsp_2</tt> is the name
of the Java servlet class that was generated. The line numbers refer
to positions in this generated code, rather than in the JSP itself.
</p>

<p><a name="INDEX-438" /></a>Embedding HTML directly into servlets is
not appealing because it requires a programmer to maintain. With JSP,
you often embed Java code into HTML. Although the embedding is
reversed, you still have not cleanly separated HTML generation and
programming logic. Think about the problems you encounter when the
validation logic in a JSP goes beyond a simple one-page example. Do
you really want hundreds of lines of Java code sprinkled throughout
your HTML, surrounded by those pretty <tt class="literal">&lt;% %&gt;</tt>
tags? Unfortunately, far too many JSP pages have a substantial amount
of Java code embedded directly in the HTML.
</p>

<p>The first few iterations of JSP did not offer bulletproof approaches
for separating Java code from the HTML. Although <em class="emphasis">JavaBeans
tags</em> were offered in an attempt to remove some Java code,
the level of sophistication was quite limited. These tags allow JSPs
to interact with helper classes written according to Sun's
JavaBeans API (<a href="../../../../../../java.sun.com/products/javabeans">http://java.sun.com/products/javabeans</a>).
Recent trends in the JSP specification have made substantial
improvements. The big push right now is for custom tags,<a href="#FOOTNOTE-14">[14]</a> which finally allow
you to remove the Java code from your pages. A web page with custom
tags may look like <a href="ch04_01.htm">Example 4-3</a>.
</p><blockquote class="footnote">
<a name="FOOTNOTE-14" /></a><p> [14] Technically, programmers create custom actions, which are
invoked using custom JSP tags.</p> </blockquote>

<a name="javaxslt-CHP-4-EX-3" /></a><div class="example">
<h4 class="objtitle">Example 4-3. JSP with custom tags </h4>
<blockquote><pre class="code">&lt;%@ taglib uri="/my_taglib" prefix="abc" %&gt;
&lt;html&gt;
&lt;head&gt;
&lt;title&gt;JSP Tag Library Demonstration&lt;/title&gt;
&lt;/head&gt;
&lt;body&gt;
  &lt;abc:standardHeader/&gt;
  &lt;abc:companyLogo/&gt;
  
  &lt;h1&gt;Recent Announcements&lt;/h1&gt;
  &lt;abc:announcements filter="recent"/&gt;
  
  &lt;h1&gt;Job Openings&lt;/h1&gt;
  &lt;abc:jobOpenings department="hr"/&gt;
  &lt;abc:standardFooter/&gt;
&lt;/body&gt;
&lt;/html&gt;</pre></blockquote>
</div>

<p>As you can see, custom tags look like normal XML tags with a
<em class="emphasis">namespace prefix</em><a name="INDEX-439" /></a> <a name="INDEX-440" /></a>. Namespace prefixes are used to
give XML tags unique names. Because you select the prefix for each
tag library, you can use libraries from many different vendors
without fear of naming conflicts. These tags are mapped to Java
classes called <em class="emphasis">tag
handlers</em><a name="INDEX-441" /></a>
<a name="INDEX-442" /></a> that are
responsible for the actual work. In fact, the JSP specification does
not limit the underlying implementation to Java, so other languages
can be used if the JSP container supports it. Using the custom tag
approach, programmers in your company can produce a set of approved
tags for creating corporate logos, search boxes, navigation bars, and
page footers. Nonprogrammers can focus on HTML layout, oblivious to
the underlying tag handler code. The main drawback to this approach
is the current lack of standard tags. Although several open source
projects are underway to develop custom tag libraries, it is unlikely
that you will be able to find an existing custom tag for every
requirement.
</p>

<p>One persistent problem with a pure <a name="INDEX-443" /></a>JSP
approach is that of complex validation. Although JSP with custom tags
can be an ideal approach for <em class="emphasis">displaying</em> pages,
the approach falls apart when a JSP is used to validate the input
from a complex HTML form. In this situation, it is almost inevitable
that Java code -- perhaps a lot of it -- will creep into the
page. This is where a hybrid approach (JSP and servlets), which will
be covered in the next section, is desirable.
</p>

<p>Compared with an XML/XSLT approach, JSP requires a lot more effort to
cleanly separate presentation from the underlying data and
programming logic. For web sites that are mostly static, JSP can be
easy for nonprogrammers to create, since they work directly in HTML.
When dynamic content becomes more prevalent, your options are to
embed lots of Java code into the JSP, create custom tags, or perhaps
write Java beans that output fragments of HTML. Embedding code into
the JSP is not desirable because of the ugly syntax and maintenance
difficulties. The other approaches do hide code from the JSP author,
but some part of your web application (to be consistent) is still
cranking out HTML from Java code, either in custom tags or JavaBeans
components. This still raises serious questions about the ability to
make quick changes to your HTML without recompiling and deploying
your Java code.
</p>

<p>Another weakness of JSPs in comparison with XML and XSLT becomes
obvious when you try to test your web application. With JSP, it is
virtually impossible to test your code outside the bounds of a web
browser and servlet container. In order to write a simple automated
unit test against a JSP, you have to start a web server and invoke
your JSPs via HTTP requests. With XML and XSLT, on the other hand,
you can programmatically generate the XML data without a web browser
or server. This XML can then be validated against a DTD or schema.
You can also test the XSLT stylesheets using command-line tools
without deploying to a servlet container or starting a web server.
The result of the transformation can even be validated again with a
DTD if you use XHTML instead of HTML.<a name="INDEX-444" /></a> 
</p>

</div>
<a name="javaxslt-CHP-4-SECT-1.4" /></a><div class="sect2">
<h3 class="sect2">4.1.4. Template Engines</h3>

<p><a name="INDEX-445" /></a>Before
moving on, let's discuss template engines. A quick search on
the Internet reveals that template engines are abundant, each
claiming to be better than JSP for various reasons. For the most
part, template engines have a lot in common with JSP, particularly if
you restrict yourself to custom tags. There are some differences,
however:
</p>

<ul><li>
<p>Template engines typically forbid you from embedding Java code into
pages. Although JSP allows Java code along with HTML, it is not
considered good form.
</p>
</li><li>
<p>Most template engines are not compiled, so they do not have the same
problems that JSP has with error messages. They also start up faster
on the first invocation, which can make development easier. The
effect on end users is minimal. From a deployment perspective, you do
not need a Java compiler on the web server as you do with JSP.
</p>
</li><li>
<p>Template engines come with an existing library of tags or simple
scripting languages. JSP does not provide any standard tags, although
numerous libraries are available from other vendors and open source
projects. The JSP API is open, so you can create your own custom tags
with a fair amount of effort. Template engines have their own unique
mechanisms for integrating with underlying Java code.
</p>
</li><li>
<p>JSP has the backing of Sun and is pretty much available out of the
box on any servlet container. The main benefit of a
"standard" is the wide availability of documentation,
knowledgeable people, and examples. There are many implementations of
JSP to choose from.
</p>
</li></ul>
</div>
<a name="javaxslt-CHP-4-SECT-1.5" /></a><div class="sect2">
<h3 class="sect2">4.1.5. The Hybrid Approach</h3>

<p>Since JSP now has custom tags, you can remove (hide, actually) all of
the Java code when "rendering," or generating a page to
send to the browser. When a complex HTML form is posted to the JSP,
however, you still have problems. You must verify that all fields are
present, verify that the data is within bounds, and clean up the data
by checking for null values and trimming all strings. Validation is
not particularly difficult, but it can be tedious and requires a lot
of custom code. You do not want to embed that code directly into a
JSP because of the debugging and maintenance issues.
</p>

<p>The solution is a hybrid approach, in which a servlet works in
conjunction with a JSP. The servlet API has a nice class called
<tt class="literal">RequestDispatcher</tt><a name="INDEX-446" /></a> <a name="INDEX-447" /></a> that allows server-side forwarding and
including. This is the normal mechanism for interaction between the
servlet and JSP. <a href="ch04_01.htm">Figure 4-3</a> illustrates this design
at a high level.
</p>

<a name="javaxslt-CHP-4-FIG-3" /></a><div class="figure"><img src="figs/jxt_0403.gif" alt="Figure 4-3" width="392" height="221" /></div><h4 class="objtitle">Figure 4-3. Hybrid JSP/servlet approach</h4>

<p>This approach combines the best features of servlets with the best
features of JSPs. The arrows indicate the flow of control whenever
the browser issues a request. The job of the servlet is to intercept
the request, validate that the form data is correct, and delegate
control to an appropriate JSP. Delegation occurs via
<tt class="literal">javax.servlet.RequestDispatcher</tt>, which is a
standard part of the servlet API. The JSP simply renders the page,
ideally using custom tags and no Java code mixed with the HTML.
</p>

<p>The main issue with this approach becomes evident when your web site
begins to grow beyond a few pages. You must make a decision between
one large servlet that intercepts all requests, a separate servlet
per page, or helper classes responsible for processing individual
pages. This is not a difficult technological challenge, but rather a
problem of organization and consistency. This is where web frameworks
can lend a helping hand.
</p>

</div>
</div>

<hr width="684" align="left" />
<div class="navbar"><table width="684" border="0"><tr><td align="left" valign="top" width="228"><a href="ch03_06.htm"><img src="../gifs/txtpreva.gif" alt="Previous" border="0" /></a></td><td align="center" valign="top" width="228"><a href="index.htm"><img src="../gifs/txthome.gif" alt="Home" border="0" /></a></td><td align="right" valign="top" width="228"><a href="ch04_02.htm"><img src="../gifs/txtnexta.gif" alt="Next" border="0" /></a></td></tr><tr><td align="left" valign="top" width="228">3.6. Ant Documentation Stylesheet</td><td align="center" valign="top" width="228"><a href="index/index.htm"><img src="../gifs/index.gif" alt="Book Index" border="0" /></a></td><td align="right" valign="top" width="228">4.2. The Universal Design</td></tr></table></div>
<hr width="684" align="left" />

<img src="../gifs/navbar.gif" usemap="#library-map" border="0" alt="Library Navigation Links" />
<p><p><font size="-1"><a href="copyrght.htm">Copyright &copy; 2002</a> O'Reilly &amp; Associates. All rights reserved.</font></p>

<map name="library-map"><area shape="rect" coords="0,0,85,93" href="../index.htm"><area shape="rect" coords="85,0,180,98" href="../sax2/index.htm"><area shape="rect" coords="182,-1,261,100" href="../xmlnut/index.htm"><area shape="rect" coords="263,1,384,96" href="../jxml/index.htm"><area shape="rect" coords="386,1,463,100" href="index.htm"><area shape="rect" coords="466,1,533,112" href="../xslt/index.htm"><area shape="rect" coords="535,-1,610,108" href="../schema/index.htm"><area shape="rect" coords="613,1,696,121" href="../pxml/index.htm"></map>

</body></html>