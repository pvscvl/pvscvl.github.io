<html><head><title>Formatting Text and Numbers (Java and XSLT)</title><link rel="stylesheet" type="text/css" href="../style/style1.css" />

<meta name="DC.Creator" content="Eric M. Burke" /><meta name="DC.Format" content="text/xml" scheme="MIME" /><meta name="DC.Language" content="en-US" /><meta name="DC.Publisher" content="O'Reilly &amp; Associates, Inc." /><meta name="DC.Source" scheme="ISBN" content="0596001453L" /><meta name="DC.Subject.Keyword" content="stuff" /><meta name="DC.Title" content="Java and XSLT" /><meta name="DC.Type" content="Text.Monograph" />

</head><body bgcolor="#ffffff">

<img src="gifs/smbanner.gif" usemap="#banner-map" border="0" alt="Book Home" /><map name="banner-map"><area shape="rect" coords="1,-2,616,66" href="index.htm" alt="Java and XSLT" /><area shape="rect" coords="629,-11,726,25" href="jobjects/fsearch.htm" alt="Search this book" /></map>

<div class="navbar"><table width="684" border="0"><tr><td align="left" valign="top" width="228"><a href="ch03_03.htm"><img src="../gifs/txtpreva.gif" alt="Previous" border="0" /></a></td><td align="center" valign="top" width="228" /><td align="right" valign="top" width="228"><a href="ch03_05.htm"><img src="../gifs/txtnexta.gif" alt="Next" border="0" /></a></td></tr></table></div>



<h2 class="sect1">3.4. Formatting Text and Numbers</h2>

<p>XSLT and XPath define a small set of functions to manipulate text and
numbers. These allow you to concatenate strings, extract substrings,
determine the length of a string, and perform other similar tasks.
While these features do not approach the capabilities offered by a
programming language like Java, they do allow for some of the most
common string manipulation tasks.
</p>

<a name="javaxslt-CHP-3-SECT-4.1" /><div class="sect2">
<h3 class="sect2">3.4.1. Number Formatting</h3>

<p><a name="INDEX-364" /> <a name="INDEX-365" />The <tt class="literal">format-number(
)</tt><a name="INDEX-366" />
<a name="INDEX-367" /> function is provided by XSLT to convert
numbers such as <tt class="literal">123</tt> into formatted numbers such as
<tt class="literal">$123.00</tt>. The function takes the following form:
</p>

<blockquote><pre class="code">string format-number(number, string, string?)</pre></blockquote>

<p>The first parameter is the number to format, the second is a format
string, and the third (optional) is the name of an
<tt class="literal">&lt;xsl:decimal-format&gt;</tt> element. We will cover
only the first two parameters in this book. Interestingly enough, the
behavior of the <tt class="literal">format-number( )</tt> function is
defined by the JDK 1.1.x version of the
<tt class="literal">java.text.DecimalFormat</tt> class. For complete
information on the syntax of the second argument, refer to the
JavaDocs for JDK 1.1.x.
</p>

<p>Outputting <a name="INDEX-368" />currencies is a common use for the
<tt class="literal">format-number( )</tt> function. The pattern
<tt class="literal">$#,##0.00</tt> can properly format a number into just
about any U.S. currency. <a href="ch03_04.htm">Table 3-2</a> demonstrates
several possible inputs and results for this pattern.
</p>

<a name="javaxslt-CHP-3-TABLE-2" /><h4 class="objtitle">Table 3-2. Formatting currencies using $#,##0.00 </h4><table border="1" cellpadding="3">



<tr>
<th>
<p>Number</p>
</th>
<th>
<p>Result</p>
</th>
</tr>


<tr>
<td>
<p>0</p>
</td>
<td>
<p>$0.00</p>
</td>
</tr>
<tr>
<td>
<p>0.9</p>
</td>
<td>
<p>$0.90</p>
</td>
</tr>
<tr>
<td>
<p>0.919</p>
</td>
<td>
<p>$0.92</p>
</td>
</tr>
<tr>
<td>
<p>10</p>
</td>
<td>
<p>$10.00</p>
</td>
</tr>
<tr>
<td>
<p>1000</p>
</td>
<td>
<p>$1,000.00</p>
</td>
</tr>
<tr>
<td>
<p>12345.12345</p>
</td>
<td>
<p>$12,345.12</p>
</td>
</tr>

</table><p>

<p>The XSLT code to utilize this function may look something like this:</p>

<blockquote><pre class="code">&lt;xsl:value-of select="format-number(amt,'$#,##0.00')"/&gt;</pre></blockquote>

<p>It is assumed that <tt class="literal">amt</tt> is some element in the XML
data,<a href="#FOOTNOTE-12">[12]</a> such as <tt class="literal">&lt;amt&gt;1000&lt;/amt&gt;</tt>.
The <tt class="literal">#</tt> and <tt class="literal">0</tt> characters are
placeholders for digits and behave exactly as
<tt class="literal">java.text.DecimalFormat</tt> specifies. Basically,
<tt class="literal">0</tt> is a placeholder for any digit, while
<tt class="literal">#</tt> is a placeholder that is absent when the input
value is 0.
</p><blockquote class="footnote"> <a name="FOOTNOTE-12" /><p> [12] The XSLT specification does not define what
happens if the XML data does not contain a valid number.</p>
</blockquote>

<p>Besides currencies, another common format is
<a name="INDEX-369" />percentages. To output a percentage,
end the format pattern with a <tt class="literal">%</tt> character. The
following XSLT code shows a few examples:
</p>

<blockquote><pre class="code">&lt;!-- outputs 0% --&gt;
&lt;xsl:value-of select="format-number(0,'0%')"/&gt;

&lt;!-- outputs 10% --&gt;
&lt;xsl:value-of select="format-number(0.1,'0%')"/&gt;

&lt;!-- outputs 100% --&gt;
&lt;xsl:value-of select="format-number(1,'0%')"/&gt;</pre></blockquote>

<p>As before, the first parameter to the <tt class="literal">format-number(
)</tt> function is the actual number to be formatted, and the
second parameter is the pattern. The 0 in the pattern indicates that
at least one digit should always be displayed. The
<tt class="literal">%</tt> character also has the side effect of
multiplying the value by 100 so it is displayed as a percentage.
Consequently, 0.15 is displayed as 15%, and 1 is displayed as 100%.
</p>

<p>To test more patterns, the XML data shown in <a href="ch03_04.htm">Example 3-8</a> can be used. This works in conjunction with
<em class="filename">numberFormatting.xslt</em> to display every
combination of format and number listed in the XML data.
</p>

<a name="javaxslt-CHP-3-EX-8" /><div class="example">
<h4 class="objtitle">Example 3-8. numberFormatting.xml </h4>
<blockquote><pre class="code">&lt;?xml version="1.0" encoding="UTF-8"?&gt;
<tt class="userinput"><b>&lt;?xml-stylesheet type="text/xsl" href="numberFormatting.xslt"?&gt;</b></tt>
&lt;numberFormatting&gt;
  &lt;formatSamples&gt;
    &lt;!-- add more &lt;format&gt; elements to test more combinations--&gt;
    &lt;format&gt;$#,##0.00&lt;/format&gt;
    &lt;format&gt;#.#&lt;/format&gt;
    &lt;format&gt;0.#&lt;/format&gt;
    &lt;format&gt;0.0&lt;/format&gt;    
    &lt;format&gt;0%&lt;/format&gt;
    &lt;format&gt;0.0#&lt;/format&gt;
  &lt;/formatSamples&gt;
  &lt;numberSamples&gt;
    &lt;!-- add more &lt;number&gt; elements to test more combinations --&gt;
    &lt;number&gt;-10&lt;/number&gt;
    &lt;number&gt;-1&lt;/number&gt;
    &lt;number&gt;0&lt;/number&gt;
    &lt;number&gt;0.000123&lt;/number&gt;
    &lt;number&gt;0.1&lt;/number&gt;
    &lt;number&gt;0.9&lt;/number&gt;
    &lt;number&gt;0.91&lt;/number&gt;
    &lt;number&gt;0.919&lt;/number&gt;
    &lt;number&gt;1&lt;/number&gt;
    &lt;number&gt;10&lt;/number&gt;
    &lt;number&gt;100&lt;/number&gt;
    &lt;number&gt;1000&lt;/number&gt;
    &lt;number&gt;10000&lt;/number&gt;
    &lt;number&gt;12345.12345&lt;/number&gt;
    &lt;number&gt;55555.55555&lt;/number&gt;
  &lt;/numberSamples&gt;
&lt;/numberFormatting&gt;</pre></blockquote>
</div>

<p>The
<a name="INDEX-370" />stylesheet,
<em class="filename">numberFormatting.xslt</em>, is shown in <a href="ch03_04.htm">Example 3-9</a>. Comments in the code explain what happens at
each step. To test new patterns and numbers, just edit the XML data
and apply the transformation again. Since the XML file references the
stylesheet with <tt class="literal">&lt;?xml-stylesheet?&gt;</tt>, you can
simply load the XML into an XSLT compliant web browser and click on
the Reload button to see changes as they are made.
</p>

<a name="javaxslt-CHP-3-EX-9" /><div class="example">
<h4 class="objtitle">Example 3-9. numberFormatting.xslt </h4>
<blockquote><pre class="code">&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;xsl:stylesheet version="1.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform"&gt;
  &lt;xsl:output method="html"/&gt;
  &lt;xsl:template match="/"&gt;
    &lt;html&gt;
      &lt;body&gt;
        &lt;!-- loop over each of the sample formats --&gt;
        <tt class="userinput"><b>&lt;xsl:for-each select="numberFormatting/formatSamples/format"&gt;</b></tt>
          &lt;h2&gt;
            &lt;!-- show the format as a heading --&gt;
            &lt;xsl:value-of select="."/&gt;
          &lt;/h2&gt;
          &lt;table border="1" cellpadding="2" cellspacing="0"&gt;
            &lt;tr&gt;
              &lt;th&gt;Number&lt;/th&gt;
              &lt;th&gt;Result&lt;/th&gt;
            &lt;/tr&gt;
            
            &lt;!-- pass the format as a parameter to the template that
                  shows each number --&gt;
            <tt class="userinput"><b>&lt;xsl:apply-templates select="/numberFormatting/numberSamples/number"&gt;
              &lt;xsl:with-param name="fmt" select="."/&gt;
            &lt;/xsl:apply-templates&gt;</b></tt>
          &lt;/table&gt;
        <tt class="userinput"><b>&lt;/xsl:for-each&gt;</b></tt>
      &lt;/body&gt;
    &lt;/html&gt;
  &lt;/xsl:template&gt;
  
  &lt;!-- output the number followed by the result of the format-number function --&gt;
  &lt;xsl:template match="number"&gt;
    <tt class="userinput"><b>&lt;xsl:param name="fmt"/&gt;</b></tt>
    &lt;tr&gt;
      &lt;td align="right"&gt;
        &lt;xsl:value-of select="."/&gt;
      &lt;/td&gt;
      &lt;td align="right"&gt;
        &lt;!-- the first param is a dot, representing the text content
             of the &lt;number&gt; element --&gt;
        <tt class="userinput"><b>&lt;xsl:value-of select="format-number(.,$fmt)"/&gt;</b></tt>
      &lt;/td&gt;
    &lt;/tr&gt;
  &lt;/xsl:template&gt;
&lt;/xsl:stylesheet&gt;</pre></blockquote>
</div>

<p>This stylesheet first loops over the list of
<tt class="literal">&lt;format&gt;</tt> elements:
</p>

<blockquote><pre class="code">&lt;xsl:for-each select="numberFormatting/formatSamples/format"&gt;</pre></blockquote>

<p>Within the loop, all of the <tt class="literal">&lt;number&gt;</tt>
elements are selected. This means that every format is applied to
every number:
</p>

<a name="INDEX-371" /><a name="INDEX-372" /><blockquote><pre class="code">&lt;xsl:apply-templates select="/numberFormatting/numberSamples/number"&gt;
</pre></blockquote>

</div>
<a name="javaxslt-CHP-3-SECT-4.2" /><div class="sect2">
<h3 class="sect2">3.4.2. Text Formatting</h3>

<p><a name="INDEX-373" /> <a name="INDEX-374" />Several text-formatting functions
are defined by the XPath specification, allowing code in an XSLT
stylesheet to perform such operations as concatenating two or more
strings, extracting a substring, and computing the length of a
string. Unlike strings in Java, all strings in XSLT and XPath are
indexed from position 1 instead of position 0.
</p>

<p>Let's suppose that a stylesheet defines the following variables:</p>

<blockquote><pre class="code">&lt;xsl:variable name="firstName" select="'Eric'"/&gt;
&lt;xsl:variable name="lastName" select="'Burke'"/&gt;
&lt;xsl:variable name="middleName" select="'Matthew'"/&gt;
&lt;xsl:variable name="fullName" 
    select="concat($firstName, ' ', $middleName, ' ', $lastName)"/&gt;</pre></blockquote>

<p>In the first three variables, apostrophes are used to indicate that
the values are strings. Without the apostrophes, the XSLT processor
would treat these as XPath expressions and attempt to select nodes
from the XML input data. The third variable,
<tt class="literal">fullName</tt>, demonstrates how the <tt class="literal">concat(
)</tt> function is used to concatenate two or more strings
together. The function simply takes a comma-separated list of strings
as arguments and returns the concatenated results. In this case, the
value for <tt class="literal">fullName</tt> is "Eric Matthew
Burke."
</p>

<p><a href="ch03_04.htm">Table 3-3</a> provides additional examples of string
functions. The variables in this table are the same ones from the
previous example. In the first column, the return type of the
function is listed first, followed by the function name and the list
of parameters. The second and third columns provide an example usage
and the output from that example.
</p>

<a name="javaxslt-CHP-3-TABLE-3" /><h4 class="objtitle">Table 3-3. String function examples </h4><table border="1" cellpadding="3">




<tr>
<th>
<p>Function syntax</p>
</th>
<th>
<p>Example</p>
</th>
<th>
<p>Output</p>
</th>
</tr>


<tr>
<td>
<blockquote><pre class="code">string concat
(string,string,string*)</pre></blockquote>
</td>
<td>
<blockquote><pre class="code">concat($firstName, ' ', $lastName)</pre></blockquote>
</td>
<td>
<p>Eric Burke</p>
</td>
</tr>
<tr>
<td>
<blockquote><pre class="code">boolean starts-with
(string,string)</pre></blockquote>
</td>
<td>
<blockquote><pre class="code">starts-with($firstName, 'Er')</pre></blockquote>
</td>
<td>
<p>true</p>
</td>
</tr>
<tr>
<td>
<blockquote><pre class="code">boolean contains(string,string)</pre></blockquote>
</td>
<td>
<blockquote><pre class="code">contains($fullName, 'Smith')</pre></blockquote>
</td>
<td>
<p>false</p>
</td>
</tr>
<tr>
<td>
<blockquote><pre class="code">string substring-before
(string,string)</pre></blockquote>
</td>
<td>
<blockquote><pre class="code">substring-before($fullName, ' ')</pre></blockquote>
</td>
<td>
<p>Eric</p>
</td>
</tr>
<tr>
<td>
<blockquote><pre class="code">string substring-after
(string,string)</pre></blockquote>
</td>
<td>
<blockquote><pre class="code">substring-after($fullName, ' ')</pre></blockquote>
</td>
<td>
<p>Matthew Burke </p>
</td>
</tr>
<tr>
<td>
<blockquote><pre class="code">string substring
(string,number,number?)</pre></blockquote>
</td>
<td>
<blockquote><pre class="code">substring($middleName,1,1)</pre></blockquote>
</td>
<td>
<p>M</p>
</td>
</tr>
<tr>
<td>
<blockquote><pre class="code">number string-length(string?)</pre></blockquote>
</td>
<td>
<blockquote><pre class="code">string-length($fullName)</pre></blockquote>
</td>
<td>
<p>18</p>
</td>
</tr>
<tr>
<td>
<blockquote><pre class="code">string normalize-space(string?)</pre></blockquote>
</td>
<td>
<blockquote><pre class="code">normalize-space(' testing ')</pre></blockquote>
</td>
<td>
<p>testing</p>
</td>
</tr>
<tr>
<td>
<blockquote><pre class="code">string translate
(string,string,string)</pre></blockquote>
</td>
<td>
<blockquote><pre class="code">translate('test','aeiou','AEIOU')</pre></blockquote>
</td>
<td>
<p>tEst</p>
</td>
</tr>

</table><p>

<p>All string comparisons, such as <tt class="literal">starts-with()</tt> and
<tt class="literal">contains( )</tt>, are case-sensitive. There is no
concept of case-insensitive comparison in XSLT. One potential
workaround is to convert both strings to upper- or lowercase, and
then perform the comparison. Converting a string to upper- or
lowercase is not directly supported by a function in the current
implementation of XSLT, but the <tt class="literal">translate( )</tt>
function can be used to perform the task. The following XSLT snippet
converts a string from lower- to uppercase:
</p>

<blockquote><pre class="code">translate($text,
    'abcdefghijklmnopqrstuvwxyz',
    'ABCDEFGHIJKLMNOPQRSTUVWXYZ')</pre></blockquote>

<p>In the <tt class="literal">substring-before( )</tt> and
<tt class="literal">substring-after( )</tt> functions, the second argument
contains a delimiter string. This delimiter does not have to be a
single character, and an empty string is returned if the delimiter is
not found. These functions could be used to parse formatted data such
as dates:
</p>

<blockquote><pre class="code">&lt;date&gt;06/25/1999&lt;/date&gt;</pre></blockquote>

<p>The XSLT used to extract the month, day, and year looks like this:</p>

<blockquote><pre class="code">&lt;xsl:variable name="dateStr" select="//date"/&gt;
&lt;xsl:variable name="dayYear" select="substring-after($dateStr, '/')"/&gt;
Month: &lt;xsl:value-of select="substring-before($dateStr, '/')"/&gt; &lt;br/&gt;
Day: &lt;xsl:value-of select="substring-before($dayYear, '/')"/&gt; &lt;br/&gt;
Year: &lt;xsl:value-of select="substring-after($dayYear, '/')"/&gt;</pre></blockquote>

<p>In the first line of code, the <tt class="literal">dateStr</tt> variable is
initialized to contain the full date. The next line then creates the
<tt class="literal">dayYear</tt> variable, which contains everything after
the first <tt class="literal">/</tt> character -- at this point,
<tt class="literal">dateStr=06/25/1999</tt> and
<tt class="literal">dayYear=25/1999</tt>. In Java, this is slightly easier
because you simply create an instance of the
<tt class="literal">StringTokenizer</tt> class and iterate through the
tokens or use the <tt class="literal">lastIndexOf( )</tt> method of
<tt class="literal">java.lang.String</tt> to locate the second
<tt class="literal">/</tt>. With XSLT, the options are somewhat more
limited. The remaining lines continue chopping up the variables into
<tt class="literal">substrings</tt>, again delimiting on the
<tt class="literal">/</tt> character. The output is as follows:
</p>

<blockquote><pre class="code">Month: 06
Day: 25
Year: 1999</pre></blockquote>

<p>Another form of the <tt class="literal">substring( )</tt> function takes
one or two number arguments, indicating the starting index and the
optional length of the <tt class="literal">substring</tt>. If the second
number is omitted, the <tt class="literal">substring</tt> continues until
the end of the input string. The starting index always begins at
position 1, so <tt class="literal">substring("abcde",2,3)</tt> returns
<tt class="literal">bcd</tt>, and <tt class="literal">substring("abcde",2)</tt>
returns <tt class="literal">bcde</tt>.<a name="INDEX-375" /> <a name="INDEX-376" /> 
</p>

</div>


<hr width="684" align="left" />
<div class="navbar"><table width="684" border="0"><tr><td align="left" valign="top" width="228"><a href="ch03_03.htm"><img src="../gifs/txtpreva.gif" alt="Previous" border="0" /></a></td><td align="center" valign="top" width="228"><a href="index.htm"><img src="../gifs/txthome.gif" alt="Home" border="0" /></a></td><td align="right" valign="top" width="228"><a href="ch03_05.htm"><img src="../gifs/txtnexta.gif" alt="Next" border="0" /></a></td></tr><tr><td align="left" valign="top" width="228">3.3. Combining Multiple Stylesheets</td><td align="center" valign="top" width="228"><a href="index/index.htm"><img src="../gifs/index.gif" alt="Book Index" border="0" /></a></td><td align="right" valign="top" width="228">3.5. Schema Evolution</td></tr></table></div>
<hr width="684" align="left" />

<img src="../gifs/navbar.gif" usemap="#library-map" border="0" alt="Library Navigation Links" />
<p><p><font size="-1"><a href="copyrght.htm">Copyright &copy; 2002</a> O'Reilly &amp; Associates. All rights reserved.</font></p>

<map name="library-map"><area shape="rect" coords="0,0,85,93" href="../index.htm"><area shape="rect" coords="85,0,180,98" href="../sax2/index.htm"><area shape="rect" coords="182,-1,261,100" href="../xmlnut/index.htm"><area shape="rect" coords="263,1,384,96" href="../jxml/index.htm"><area shape="rect" coords="386,1,463,100" href="index.htm"><area shape="rect" coords="466,1,533,112" href="../xslt/index.htm"><area shape="rect" coords="535,-1,610,108" href="../schema/index.htm"><area shape="rect" coords="613,1,696,121" href="../pxml/index.htm"></map>

</body></html>