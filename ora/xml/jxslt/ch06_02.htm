<html><head><title>WAR Files and Deployment (Java and XSLT)</title><link rel="stylesheet" type="text/css" href="../style/style1.css" />

<meta name="DC.Creator" content="Eric M. Burke" /><meta name="DC.Format" content="text/xml" scheme="MIME" /><meta name="DC.Language" content="en-US" /><meta name="DC.Publisher" content="O'Reilly &amp; Associates, Inc." /><meta name="DC.Source" scheme="ISBN" content="0596001453L" /><meta name="DC.Subject.Keyword" content="stuff" /><meta name="DC.Title" content="Java and XSLT" /><meta name="DC.Type" content="Text.Monograph" />

</head><body bgcolor="#ffffff">

<img src="gifs/smbanner.gif" usemap="#banner-map" border="0" alt="Book Home" /><map name="banner-map"><area shape="rect" coords="1,-2,616,66" href="index.htm" alt="Java and XSLT" /><area shape="rect" coords="629,-11,726,25" href="jobjects/fsearch.htm" alt="Search this book" /></map>

<div class="navbar"><table width="684" border="0"><tr><td align="left" valign="top" width="228"><a href="ch06_01.htm"><img src="../gifs/txtpreva.gif" alt="Previous" border="0" /></a></td><td align="center" valign="top" width="228" /><td align="right" valign="top" width="228"><a href="ch06_03.htm"><img src="../gifs/txtnexta.gif" alt="Next" border="0" /></a></td></tr></table></div>



<h2 class="sect1">6.2. WAR Files and Deployment</h2>

<p>In the servlet model, <a name="INDEX-641" />Web Application Archive (WAR) files are
the unit of deployment. WAR files enable portability across a wide
range of servlet containers regardless of the vendor. The good news
is that WAR files are very easy to create and require only that you
carefully follow the guidelines for file and directory names. If you
are careful to avoid spelling errors and misplaced files, you should
not have any problem with WAR files.
</p>

<a name="javaxslt-CHP-6-SECT-2.1" /><div class="sect2">
<h3 class="sect2">6.2.1. WAR Files</h3>

<p><a href="ch06_02.htm">Figure 6-2</a> <a name="INDEX-642" />shows the standard structure of a WAR
file. Since a WAR file is really just a JAR file with a
<em class="filename">.war</em> extension, you can utilize the
<em class="filename">jar</em><a name="INDEX-643" /> command to create your WAR files.
</p>

<a name="javaxslt-CHP-6-FIG-2" /><div class="figure"><img src="figs/jxt_0602.gif" alt="Figure 6-2" width="485" height="305" /></div><h4 class="objtitle">Figure 6-2. WAR file structure</h4>

<p>To create a WAR file, simply arrange your files into the directory
structure shown in <a href="ch06_02.htm">Figure 6-2</a> and issue the
following command from the directory that contains
<em class="filename">index.html</em>:<a href="#FOOTNOTE-23">[23]</a>
</p><blockquote class="footnote">
<a name="FOOTNOTE-23" /><p> [23] <em class="filename">index.html</em> is the
"home page" for a web application.</p>
</blockquote>

<blockquote><pre class="code">jar -cvfM ../appname.war</pre></blockquote>

<p>This command assumes that the WAR file will be placed in the parent
of your current working directory; the forward slash
(<tt class="literal">/</tt><a name="INDEX-644" /> <a name="INDEX-645" />) works on Windows as well as Unix
clients. Once the WAR file has been created, you can view its
contents by changing to its directory and issuing the following
command:
</p>

<blockquote><pre class="code">jar -tvf appname.war .</pre></blockquote>

<p>This shows the <a name="INDEX-646" />table of contents for the WAR file,
which must match the structure shown in <a href="ch06_02.htm">Figure 6-2</a>.
</p>

<p>The topmost directory in the WAR file is publicly accessible to web
browsers and should contain your JSP and HTML files. You can also
create subdirectories, which will also be visible to the client. A
common practice is to create an <em class="filename">images</em> directory
for storing your graphic files.
</p>

<p>The <em class="filename">WEB-INF</em><a name="INDEX-647" /> <a name="INDEX-648" /> directory is always hidden from
clients that access your web application. The deployment descriptor,
<em class="filename">web.xml</em>, is located here, as are the
<em class="filename">classes</em> and <em class="filename">lib</em>
directories. As <a href="ch06_02.htm">Figure 6-2</a> indicates, the
<em class="filename">classes</em> directory becomes available to your
application's <tt class="literal">ClassLoader</tt>. Any JAR files
contained in the <em class="filename">lib</em> directory are also
available to your code, making it very easy to deploy third-party
libraries along with a web application. The folder
<em class="filename">other_directories</em> can be anything you want and
will also be hidden from clients since it resides under the
<em class="filename">WEB-INF</em> directory. Although clients cannot see
any of these directories and files directly, your servlet can access
these resources programmatically and then deliver that content.
</p>

</div>
<a name="javaxslt-CHP-6-SECT-2.2" /><div class="sect2">
<h3 class="sect2">6.2.2. Deployment Descriptor</h3>

<p>The <a name="INDEX-649" />
<a name="INDEX-650" />deployment descriptor is always
called
<em class="filename">web.xml</em><a name="INDEX-651" />
and must be placed directly in the <em class="filename">WEB-INF</em>
directory of your web application. The job of the deployment
descriptor is to provide the servlet container with complete
configuration information about a web application. This may include
security attributes, aliases for servlets and other resources,
<em class="emphasis">initialization parameters</em>, and even graphical
icons for Integrated Development Environments (IDEs) to utilize. For
our needs, a very small subset of this functionality will be
sufficient. For <tt class="literal">SplashScreenServlet</tt>, we need to
list the Java class of the servlet, an alias for that servlet, and a
URL mapping. The complete deployment descriptor for
<tt class="literal">SplashScreenServlet</tt> is listed in <a href="ch06_02.htm">Example 6-2</a>.<a name="INDEX-652" />
</p>

<a name="javaxslt-CHP-6-EX-2" /><div class="example">
<h4 class="objtitle">Example 6-2. web.xml for SplashScreenServlet.java </h4>
<blockquote><pre class="code">&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;!DOCTYPE web-app
  PUBLIC "-//Sun Microsystems, Inc.//DTD Web Application 2.2//EN"
  "http://java.sun.com/j2ee/dtds/web-app_2.2.dtd"&gt;
&lt;web-app&gt;
  &lt;servlet&gt;
    &lt;!-- define an alias for the Servlet --&gt;
    &lt;servlet-name&gt;splashScreen&lt;/servlet-name&gt;
    &lt;servlet-class&gt;chap6.SplashScreenServlet&lt;/servlet-class&gt;
  &lt;/servlet&gt;

  &lt;servlet-mapping&gt;
    &lt;!-- associate the Servlet with a URL pattern --&gt;
    &lt;servlet-name&gt;splashScreen&lt;/servlet-name&gt;
    &lt;url-pattern&gt;/splash/*&lt;/url-pattern&gt;
  &lt;/servlet-mapping&gt;
&lt;/web-app&gt;</pre></blockquote>
</div>

<p>The
<tt class="literal">DOCTYPE</tt><a name="INDEX-653" />
is a required element of a deployment descriptor and must match what
is shown in <a href="ch06_02.htm">Example 6-2</a>. The only caveat is that
newer versions of the servlet specification, such as Version 2.3, use
a different version number in the <a name="INDEX-654" />deployment descriptor. Unless you are
using 2.3 features, however, you should stick with 2.2 to remain
compatible with as many servlet containers as possible.
</p>

<p>A
<a name="INDEX-655" />servlet
definition lists the fully qualified package and class name of the
servlet class, as well a name for that servlet. Whenever another
section in the deployment descriptor wishes to reference this
particular servlet, it uses the name specified here:
</p>

<blockquote><pre class="code">&lt;servlet&gt;
  &lt;servlet-name&gt;splashScreen&lt;/servlet-name&gt;
  &lt;servlet-class&gt;chap6.SplashScreenServlet&lt;/servlet-class&gt;
&lt;/servlet&gt;</pre></blockquote>

<p>As you can see in <a href="ch06_02.htm">Example 6-2</a>, the servlet mapping
uses this name in order to associate a URL pattern with this
particular servlet. This pattern will show up in the address that
users type into their web browsers when they access this servlet. In
this case, the URL to <tt class="literal">SplashScreenServlet</tt> is:
</p>

<blockquote class="simplelist">

<p><em class="emphasis">http://hostname:port/chap6/splash</em></p>

</blockquote>

<p>This is the form that Tomcat defaults to, having the following
components:
</p>

<dl>
<dt><tt class="literal">hostname:port</tt></dt>
<dd>
Typically <tt class="literal">localhost:8080</tt>, although Tomcat can be
configured to run on any port number
</p>
</dd>

</dl>

<dl>
<dt><tt class="literal">chap6</tt></dt>
<dd>
The name of your web application, which is deployed in
<em class="filename">chap6.war</em> for this example
</p>
</dd>

</dl>

<dl>
<dt><tt class="literal">splash</tt></dt>
<dd>
Part of the URL pattern for the servlet</p>
</dd>

</dl>

<p>Wildcards in the URL pattern indicate that any text will match. Since
the deployment descriptor listed <tt class="literal">/splash/*</tt> as the
pattern, any of the following URLs also invoke
<tt class="literal">SplashScreenServlet</tt>:
</p>

<ul><li>
<p><em class="emphasis">http://localhost:8080/chap6/splash/</em></tt> 
</p>
</li><li>
<p><em class="emphasis">http://localhost:8080/chap6/splash/whatever.html</em></tt>
</p>
</li><li>
<p><em class="emphasis">http://localhost:8080/chap6/splash/a/b/c</em></tt> 
</p>
</li></ul>
</div>
<a name="javaxslt-CHP-6-SECT-2.3" /><div class="sect2">
<h3 class="sect2">6.2.3. Deploying SplashScreenServlet to Tomcat</h3>

<p><a name="INDEX-656" />The simple steps for getting
<tt class="literal">SplashScreenServlet</tt> up and running are to compile
the code, create the deployment descriptor listed in <a href="ch06_02.htm">Example 6-2</a>, and create the WAR file using the
<em class="filename">jar</em></tt> utility. The WAR file contents for this
servlet are shown in <a href="ch06_02.htm">Figure 6-3</a>.
</p>

<a name="javaxslt-CHP-6-FIG-3" /><div class="figure"><img src="figs/jxt_0603.gif" alt="Figure 6-3" width="364" height="220" /></div><h4 class="objtitle">Figure 6-3. SplashScreenServlet WAR file</h4>

<p>Once you have created <em class="filename">chap6.war</em></tt>, be sure to
execute <tt class="userinput"><b>jar -tvf chap6.war</b></tt> to confirm that the
contents are structured properly. The final step is to simply copy
the entire JAR file to Tomcat's <em class="filename">webapps</em></tt>
directory.
</p>

<a name="ch06-8-fm2xml" /><blockquote><b>NOTE:</b> 

If a WAR file is copied into the <em class="filename">webapps</em></tt> directory while Tomcat is running, it will not be recognized. Simply restart Tomcat to begin using the web application.
</p>
</blockquote>
<p>Once the WAR file has been copied, you can execute
<em class="filename">startup.bat</em></tt> or <em class="filename">startup.sh</em></tt>
in Tomcat's <em class="filename">bin</em></tt> directory and then enter
<em class="emphasis">http://localhost:8080/chap6/splash</em></tt> into your
favorite web browser. If you see error messages, check to see that
the JAVA_HOME and TOMCAT_HOME environment variables are properly set.
You can also look in Tomcat's <em class="filename">webapps</em></tt>
directory to see if the WAR file is properly expanded. When a web
application is first invoked, Tomcat expands the WAR file into its
actual directory structure. When you look in the
<em class="filename">webapps</em></tt> directory, you should see
<em class="filename">chap6.war</em></tt> as well as the
<em class="filename">chap6</em></tt> directory.
</p>

<p>If all else fails, check the documentation for Tomcat, double check
your deployment descriptor, and try the example servlets that come
with Tomcat. To see the Tomcat home page, start Tomcat and visit
<em class="emphasis">http://localhost:8080</em></tt>. If this
does not work, then something more fundamental is wrong with your
Tomcat installation.
</p>

</div>
<a name="javaxslt-CHP-6-SECT-2.4" /><div class="sect2">
<h3 class="sect2">6.2.4. Servlet API Highlights</h3>

<p><a name="INDEX-657" />We
will see more complex servlets throughout this book, but a recurring
theme is to minimize dependence on obscure servlet tricks and focus
instead on using XML and XSLT to generate a majority of the content
in your web application. To make this happen, it is necessary to look
at a few of the commonly used classes that are part of the <a name="INDEX-658" />servlet
package. 
</p>

<p>The
<tt class="literal">javax.servlet.ServletConfig</tt><a name="INDEX-659" />
<a name="INDEX-660" />
class provides initialization parameters to a servlet at startup
time. Each servlet has the following method, which is called once
when the servlet is first initialized:
</p>

<blockquote><pre class="code">public void init(ServletConfig config) throws ServletException</pre></blockquote>

<p>The <tt class="literal">ServletConfig</tt> object provides name/value
<tt class="literal">String</tt> pairs used to configure servlets without
hardcoding values into the application code. For example, you might
write code that looks like this:
</p>

<blockquote><pre class="code">String xmlLocation = config.getInitParameter("xmlLocation");</pre></blockquote>

<p>Since <tt class="literal">xmlLocation</tt> is an initialization parameter
that is part of the XML deployment descriptor, its value does not
have to be hardcoded into your application. For additional examples,
see <a href="ch06_03.htm">Section 6.3.6, "Locating Stylesheets with Initialization Parameters"</a> later in this chapter.
</p>

<p>Another important class is
<tt class="literal">javax.servlet.ServletContext</tt><a name="INDEX-661" />
<a name="INDEX-662" />.
This class does a lot more than <tt class="literal">ServletConfig</tt>, and
its instance is shared among a group of servlets. Use
<tt class="literal">ServletConfig</tt> to obtain a reference to the
<tt class="literal">ServletContext</tt>:
</p>

<blockquote><pre class="code">// config is an instance of ServletConfig
ServletContext ctx = config.getServletContext( );</pre></blockquote>

<p>Later in this book, we will focus on
<tt class="literal">ServletContext</tt>'s ability to locate
<em class="emphasis">resources</em></tt> in a portable way. You may be familiar
with the <tt class="literal">getResource(
)</tt><a name="INDEX-663" />
<a name="INDEX-664" /> and <tt class="literal">getResourceAsStream(
)</tt><a name="INDEX-665" />
<a name="INDEX-666" /> methods on
<tt class="literal">java.lang.Class</tt>. These methods allow you to locate
files and directories based on the system CLASSPATH.
</p>

<p><tt class="literal">ServletContext</tt> provides its own
<tt class="literal">getResource( )</tt> and <tt class="literal">getResourceAsStream(
)</tt> methods, but they are not based on CLASSPATH. Instead,
the directory locations are based on the location of the current web
application. For example, you can write something such as:
</p>

<blockquote><pre class="code">context.getResource("/WEB-INF/stylesheets/home.xslt")</pre></blockquote>

<p>to load a stylesheet from the current WAR file. Regardless of where
Tomcat was installed, this approach will always locate the stylesheet
without hardcoding a path name such as
<em class="filename">C:\path\..</em></tt>..<a name="INDEX-667" /><a name="INDEX-668" /> 
</p>

</div>


<hr width="684" align="left" />
<div class="navbar"><table width="684" border="0"><tr><td align="left" valign="top" width="228"><a href="ch06_01.htm"><img src="../gifs/txtpreva.gif" alt="Previous" border="0" /></a></td><td align="center" valign="top" width="228"><a href="index.htm"><img src="../gifs/txthome.gif" alt="Home" border="0" /></a></td><td align="right" valign="top" width="228"><a href="ch06_03.htm"><img src="../gifs/txtnexta.gif" alt="Next" border="0" /></a></td></tr><tr><td align="left" valign="top" width="228">6. Servlet Basics and XSLT</td><td align="center" valign="top" width="228"><a href="index/index.htm"><img src="../gifs/index.gif" alt="Book Index" border="0" /></a></td><td align="right" valign="top" width="228">6.3. Another Servlet Example</td></tr></table></div>
<hr width="684" align="left" />

<img src="../gifs/navbar.gif" usemap="#library-map" border="0" alt="Library Navigation Links" />
<p><p><font size="-1"><a href="copyrght.htm">Copyright &copy; 2002</a> O'Reilly &amp; Associates. All rights reserved.</font></p>

<map name="library-map"><area shape="rect" coords="0,0,85,93" href="../index.htm"><area shape="rect" coords="85,0,180,98" href="../sax2/index.htm"><area shape="rect" coords="182,-1,261,100" href="../xmlnut/index.htm"><area shape="rect" coords="263,1,384,96" href="../jxml/index.htm"><area shape="rect" coords="386,1,463,100" href="index.htm"><area shape="rect" coords="466,1,533,112" href="../xslt/index.htm"><area shape="rect" coords="535,-1,610,108" href="../schema/index.htm"><area shape="rect" coords="613,1,696,121" href="../pxml/index.htm"></map>

</body></html>