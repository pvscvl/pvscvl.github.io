<html><head><title>Beyond Dynamic Web Pages (Java and XSLT)</title><link rel="stylesheet" type="text/css" href="../style/style1.css" />

<meta name="DC.Creator" content="Eric M. Burke" /><meta name="DC.Format" content="text/xml" scheme="MIME" /><meta name="DC.Language" content="en-US" /><meta name="DC.Publisher" content="O'Reilly &amp; Associates, Inc." /><meta name="DC.Source" scheme="ISBN" content="0596001453L" /><meta name="DC.Subject.Keyword" content="stuff" /><meta name="DC.Title" content="Java and XSLT" /><meta name="DC.Type" content="Text.Monograph" />

</head><body bgcolor="#ffffff">

<img src="gifs/smbanner.gif" usemap="#banner-map" border="0" alt="Book Home" /><map name="banner-map"><area shape="rect" coords="1,-2,616,66" href="index.htm" alt="Java and XSLT" /><area shape="rect" coords="629,-11,726,25" href="jobjects/fsearch.htm" alt="Search this book" /></map>

<div class="navbar"><table width="684" border="0"><tr><td align="left" valign="top" width="228"><a href="ch01_02.htm"><img src="../gifs/txtpreva.gif" alt="Previous" border="0" /></a></td><td align="center" valign="top" width="228" /><td align="right" valign="top" width="228"><a href="ch01_04.htm"><img src="../gifs/txtnexta.gif" alt="Next" border="0" /></a></td></tr></table></div>



<h2 class="sect1">1.3. Beyond Dynamic Web Pages</h2>

<p>You probably know a little bit about
<a name="INDEX-129" />servlets already.
Essentially, they are Java classes that run on the web tier, offering
a high-performance, portable alternative to CGI scripts.
<a name="INDEX-130" />Java
servlets are great for extracting data from a database and then
generating XHTML for the browser. They are also good for validating
HTTP POST or GET requests from browsers, allowing people to fill out
job applications or order books online. But more powerful techniques
are required when you create web <em class="emphasis">applications</em>
instead of simple web <em class="emphasis">sites</em>.
</p>

<a name="javaxslt-CHP-1-SECT-3.1" /><div class="sect2">
<h3 class="sect2">1.3.1. Web Development Challenges</h3>

<p><a name="INDEX-131" />When
<a name="INDEX-132" />compared
to GUI applications based on Swing or AWT, developing for the Web can
be much more difficult. Most of the difficulties you will encounter
can be traced to one of the following:
</p>

<ul><li>
<p>Hypertext Transfer Protocol (HTTP)</p>
</li><li>
<p>HTML limitations</p>
</li><li>
<p>browser compatibility problems</p>
</li><li>
<p>concurrency issues</p>
</li></ul>
<p><a name="INDEX-133" />HTTP is a fairly simple protocol that
enables a client to communicate with a server. Web browsers almost
always use HTTP to communicate with web servers, although they may
use other protocols such as HTTPS for secure connections or even FTP
for file downloads. HTTP is a request/response protocol, and the
browser must initiate the request. Each time you click on a
hyperlink, your browser issues a new request to a web server. The
server processes the request and sends a response, thus finishing the
exchange.
</p>

<p>This request/response cycle is easy to understand but makes it
tedious to develop an application that maintains <em class="emphasis">state
information</em><a name="INDEX-134" /> as the user moves through a complex
web application. For example, as a user adds items to a shopping
cart, a servlet must store that data somewhere while waiting for the
client to make another request. When that request arrives, the
servlet has to associate the cart with that particular client, since
the servlet could be dealing with hundreds or thousands of concurrent
clients. Other than establishing a timeout period, the servlet has no
idea when the client abandons the cart, deciding to shop on a
competitor's site instead. The HTTP protocol makes it
impossible for the server to initiate a conversation with the client,
so the servlet cannot periodically ping the client as it can with a
"normal" client/server application.
</p>

<p><a name="INDEX-135" />HTML itself can be another hindrance to
web application development. It was not designed to compete with
feature-rich GUI toolkits, yet customers are increasingly demanding
that applications of all sorts become "web enabled." This
presents a significant challenge because HTML offers only a small set
of primitive GUI components. Sophisticated HTML generation is not the
subject of this book, but we will see how to use XSLT to separate
complex HTML generation code from underlying programming logic and
servlet code. As HTML grows ever more complex, the benefits of a
clean separation become increasingly obvious.
</p>

<p>As you probably well know, browsers are not entirely compatible with
one another. As a web application developer, this generally means
that you have to test on a wide variety of platforms. XSLT offers
support in this area because you can write reusable stylesheets for
the consistent parts of HTML and import or include browser-specific
stylesheet fragments to work around browser incompatibilities. Of
course, the underlying XML data and programming logic is shared
across all browsers, even though you may have multiple stylesheets.
</p>

<p>Finally, we have the issue of
<a name="INDEX-136" />concurrency. In
the servlet model, a single servlet instance must handle multiple
concurrent requests. Although you can explicitly synchronize access
to a servlet, this often results in performance degradation as
individual client requests queue up, waiting for their turn.
Processing requests in parallel will be an important part of our
XSLT-based servlet designs in later chapters.
</p>

</div>
<a name="javaxslt-CHP-1-SECT-3.2" /><div class="sect2">
<h3 class="sect2">1.3.2. Web Applications</h3>

<p>The difference between a "web site" and a
"<a name="INDEX-137" />web application" is subjective.
Although some of the technologies are the same, web applications tend
to be far more interactive and more difficult to create than typical
web sites. For example, a web site is mostly read-only, with
occasional forms for submitting information. For this, simple
technologies such as HTML combined with JavaServer Pages (JSPs) can
do the job. A web application, on the other hand, is typically a
custom application intended to perform a specific business or
technical function. They are often written as replacements for
existing systems in an effort to enable browser-based access. When
replacing existing systems, developers are typically asked to
duplicate all of the existing functionality, using a web browser and
HTML. This is difficult at best because of HTML's limited
support for sophisticated GUI components. Most of the screens in a
web application are dynamically generated and customized on a
per-user basis, while many pages on a typical web site are static.
</p>

<p>Java, XML, and XSLT are suitable for web applications because of the
high degree of modularity they offer. While one programmer develops
the back-end data access code, a graphic designer can be working on
the HTML user interface. Yet another servlet expert can be working on
the web tier, while someone else is defining and creating the XML
data. Programmers and graphic designers will typically work together
to define the XSLT stylesheets, although the current lack of
interactive tools may make this more of a programming task.
</p>

<p>Another reason XML is suitable for web applications is its unique
ability to interoperate with back-end business systems and databases.
Once an XML layer has been added to your data tier, the web tier can
extract that data in XML form regardless of which operating system or
hardware platform is used. XSLT can then convert that XML into HTML
without a great deal of custom coding, resulting in less work for
your development team.<a name="INDEX-138" /> 
</p>

</div>
<a name="javaxslt-CHP-1-SECT-3.3" /><div class="sect2">
<h3 class="sect2">1.3.3. Nonbrowser Clients</h3>

<p><a name="INDEX-139" />While web sites typically deliver HTML
to browsers, web applications may be asked to interoperate with
applications other than browsers. It is typical to provide
feature-rich Swing GUI clients for use within a company, while remote
workers access the system via an XHTML interface through a web
browser. An XML approach is key in this environment because the raw
XML can be sent to the Swing client, while XSLT can be used to
generate the XHTML views from the same XML data.
</p>

<p>If your XML is not in the correct format, XSLT can also be used to
transform it into another variant of XML. For example, a client
application may expect to see:
</p>

<blockquote><pre class="code">&lt;name&gt;Eric Burke&lt;/name&gt;</pre></blockquote>

<p>But the XML data on the web tier deals with the data as:</p>

<blockquote><pre class="code">&lt;firstName&gt;Eric&lt;/firstName&gt;&lt;lastName&gt;Burke&lt;/lastName&gt;</pre></blockquote>

<p>In this case, XSLT can be used to transform the XML into the
simplified format that the client expects.
</p>

<a name="javaxslt-CHP-1-SECT-3.3.1" /><div class="sect3">
<h3 class="sect3">1.3.3.1. SOAP</h3>

<p>Sending raw XML data to clients is a good approach because it
interoperates with any operating system, hardware platform, or
programming language. Allowing Visual Basic clients to extract XML
data from a web application allows existing client software to be
salvaged while enabling remote access to enterprise data using a more
portable solution such as Java. But defining a custom XML format is
tedious because it requires you to manually write code that encodes
and decodes messages between the client and the web application.
</p>

<p><a name="INDEX-140" />Simple Object Access Protocol (SOAP)
is a standardized protocol for exchanging data using XML messages.
SOAP was originally introduced by Microsoft but has been submitted to
the W3C for standardization and is endorsed by many companies. SOAP
is fairly simple, allowing vendors to quickly create tools that
simplify data exchange between web applications and any type of
client.
</p>

<p>Since SOAP messages are implemented using XML, they can be created
and updated using XSLT stylesheets. This means that data can be
extracted from a relational database as XML, transformed with XSLT
into a standard SOAP message, and then delivered to a client
application written in any language. For more information on SOAP
standardization efforts, visit <a href="../../../../../../www.w3.org/TR/SOAP">http://www.w3.org/TR/SOAP</a>.
</p>

</div>
</div>
<a name="javaxslt-CHP-1-SECT-3.4" /><div class="sect2">
<h3 class="sect2">1.3.4. Wireless</h3>

<p>Cell phones, personal digital assistants (PDAs), and other handheld
devices seem to be the next big thing. From a marketing perspective,
it is not entirely clear how the business model of the Web will
translate to the world of wireless. It is also unclear which
technologies will be used for this new generation of devices. One
currently popular technology is <a name="INDEX-141" />Wireless Application
Protocol (WAP), which uses an XML markup language called
<a name="INDEX-142" />Wireless Markup Language (WML) to
render pages. Other languages have been proposed, such as Compact
HTML (CHTML), but perhaps the most promising prospect is
<a name="INDEX-143" />XHTML Basic.
XHTML Basic is backed by the W3C and is primarily based on several
XHTML modules. Its designers had the luxury of coming after WML, so
they could incorporate many WML concepts and build on that
experience.
</p>

<p>Because of the uncertainties in the wireless arena, an XML and XSLT
approach is the safest available today. Encoding your data in XML
enables flexibility to support any markup language or protocol on the
client, hopefully without rewriting major pieces of Java code.
Instead, new XSLT stylesheets are written to support new devices and
protocols. An added benefit of XSLT is its ability to support both
traditional browser clients and newer wireless clients from the same
underlying XML data and Java business logic.
</p>

</div>


<hr width="684" align="left" />
<div class="navbar"><table width="684" border="0"><tr><td align="left" valign="top" width="228"><a href="ch01_02.htm"><img src="../gifs/txtpreva.gif" alt="Previous" border="0" /></a></td><td align="center" valign="top" width="228"><a href="index.htm"><img src="../gifs/txthome.gif" alt="Home" border="0" /></a></td><td align="right" valign="top" width="228"><a href="ch01_04.htm"><img src="../gifs/txtnexta.gif" alt="Next" border="0" /></a></td></tr><tr><td align="left" valign="top" width="228">1.2. XML Review</td><td align="center" valign="top" width="228"><a href="index/index.htm"><img src="../gifs/index.gif" alt="Book Index" border="0" /></a></td><td align="right" valign="top" width="228">1.4. Getting Started</td></tr></table></div>
<hr width="684" align="left" />

<img src="../gifs/navbar.gif" usemap="#library-map" border="0" alt="Library Navigation Links" />
<p><p><font size="-1"><a href="copyrght.htm">Copyright &copy; 2002</a> O'Reilly &amp; Associates. All rights reserved.</font></p>

<map name="library-map"><area shape="rect" coords="0,0,85,93" href="../index.htm"><area shape="rect" coords="85,0,180,98" href="../sax2/index.htm"><area shape="rect" coords="182,-1,261,100" href="../xmlnut/index.htm"><area shape="rect" coords="263,1,384,96" href="../jxml/index.htm"><area shape="rect" coords="386,1,463,100" href="index.htm"><area shape="rect" coords="466,1,533,112" href="../xslt/index.htm"><area shape="rect" coords="535,-1,610,108" href="../schema/index.htm"><area shape="rect" coords="613,1,696,121" href="../pxml/index.htm"></map>

</body></html>