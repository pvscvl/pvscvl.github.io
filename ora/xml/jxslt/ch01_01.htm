<html><head><title>Introduction  (Java and XSLT)</title><link rel="stylesheet" type="text/css" href="../style/style1.css" />

<meta name="DC.Creator" content="Eric M. Burke" /><meta name="DC.Format" content="text/xml" scheme="MIME" /><meta name="DC.Language" content="en-US" /><meta name="DC.Publisher" content="O'Reilly &amp; Associates, Inc." /><meta name="DC.Source" scheme="ISBN" content="0596001453L" /><meta name="DC.Subject.Keyword" content="stuff" /><meta name="DC.Title" content="Java and XSLT" /><meta name="DC.Type" content="Text.Monograph" />

</head><body bgcolor="#ffffff">

<img src="gifs/smbanner.gif" usemap="#banner-map" border="0" alt="Book Home" /><map name="banner-map"><area shape="rect" coords="1,-2,616,66" href="index.htm" alt="Java and XSLT" /><area shape="rect" coords="629,-11,726,25" href="jobjects/fsearch.htm" alt="Search this book" /></map>

<div class="navbar"><table width="684" border="0"><tr><td align="left" valign="top" width="228"><a href="ch00_06.htm"><img src="../gifs/txtpreva.gif" alt="Previous" border="0" /></a></td><td align="center" valign="top" width="228" /><td align="right" valign="top" width="228"><a href="ch01_02.htm"><img src="../gifs/txtnexta.gif" alt="Next" border="0" /></a></td></tr></table></div>


<h1 class="chapter">Chapter 1. Introduction </h1>
<div class="htmltoc"><h4 class="tochead">Contents:</h4>
  <p> <a href="#javaxslt-CHP-1-SECT-1">Java, XSLT, and the Web</a><br />
<a href="ch01_02.htm">XML Review</a><br />
<a href="ch01_03.htm">Beyond Dynamic Web Pages</a><br />
<a href="ch01_04.htm">Getting Started</a><br />
<a href="ch01_05.htm">Web Browser Support for XSLT</a><br /></p></div><p>When <a name="INDEX-28" /></a>XML
first appeared, people widely believed that it was the imminent
successor to HTML. This viewpoint was influenced by a variety of
factors, including media hype, wishful thinking, and simple confusion
about the number of new technologies associated with XML. The reality
is that millions of web sites are written in HTML, and no widely used
browser fully supports XML and its related standards. Even when
browser vendors incorporate full support for XML and its family of
related technologies, it will take years before enough people use
these new versions to justify rewriting most web sites in XML.
Although maintaining compatibility with older browsers is essential,
companies should not hesitate to move forward with XML and related
technologies on the server.
</p>

<p>From the browser perspective, HTML will remain dominant on the Web
for many years to come. Looking beneath the hood will reveal a much
different picture, however, in which HTML is used only during the
last instant of presentation. Web applications must support a
multitude of browsers, and the easiest way to do this is to simply
<em class="emphasis">transform</em><a name="INDEX-29" /></a>
data into HTML before sending it to the client. On the server side,
XML is the preferred way to process and exchange data because it is
portable, standard, and easy to work with. This is where Java and
XSLT enter the picture.
</p><div class="sect1"><a name="javaxslt-CHP-1-SECT-1" /></a>
<h2 class="sect1">1.1. Java, XSLT, and the Web</h2>

<p><a name="INDEX-30" /></a>Extensible Stylesheet Language
Transformations (XSLT) is designed to transform XML data into some
other form, most commonly HTML, XHTML, or another XML format. An
<em class="emphasis">XSLT processor</em><a name="INDEX-31" /></a> <a name="INDEX-32" /></a>, such as Apache's Xalan, performs
<a name="INDEX-33" /></a>transformations
using one or more XSLT
<em class="emphasis">stylesheets</em><a name="INDEX-34" /></a>
<a name="INDEX-35" /></a>,
which are also XML documents. As <a href="ch01_01.htm">Figure 1-1</a>
illustrates, XSLT can be utilized on the web tier while web browsers
on the client tier deal only with HTML.
</p>

<a name="javaxslt-CHP-1-FIG-1" /></a><div class="figure"><img src="figs/jxt_0101.gif" alt="Figure 1-1" width="492" height="174" /></div><h4 class="objtitle">Figure 1-1. XSLT transformation</h4>

<p>Typically in an XSLT- and Java-based web application,
<a name="INDEX-36" /></a>XML data is generated dynamically
based on database queries. Although some newer databases can export
data directly as XML, you will often write custom Java code to
extract data using JDBC and convert it to XML. This XML data, such as
a customized list of benefit elections or perhaps an airline schedule
for a specific time window, may be different for each client using
the application. In order to display this XML data on most browsers,
it must first be converted to HTML. As <a href="ch01_01.htm">Figure 1-1</a>
shows, the XML data is fed into the processor as one input, and an
XSLT stylesheet is provided as a second input. The output is then
sent directly to the web browser as a stream of HTML. The XSLT
stylesheet produces HTML formatting instructions, while the XML
provides raw data.
</p>

<a name="javaxslt-CHP-1-SECT-1.1" /></a><div class="sect2">
<h3 class="sect2">1.1.1. What's Wrong with HTML?</h3>

<p><a name="INDEX-37" /></a>One of the fundamental problems with HTML
is its haphazard implementation. Although the specification for HTML
is available from the World Wide Web Consortium (W3C), its evolution
was driven mostly by competition between Netscape and Microsoft
rather than a thoughtful design process and open standards. This
resulted in a bloated language littered with browser-specific tags
and varying support for standards. Since no two browsers support the
exact same set of HTML features, web authors often limit themselves
to a subset of HTML. Another approach is to create and maintain
separate copies of each web page, which take advantage of the unique
features found in a particular browser. The limitations of HTML are
compounded for dynamic sites, in which Java programs are often
responsible for accessing enterprise data sources and presenting that
information through the browser.
</p>

<p>Extracting information from back-end data sources is much more
difficult than simple web page authoring. This requires skilled
developers who know how to interact with Enterprise JavaBeans or
relational databases. Since skilled Java developers are a scarce and
expensive resource, it makes sense to let them work on the back-end
data sources and business logic while web page developers and less
experienced programmers work on the HTML user interface. As we will
see in <a href="ch04_01.htm">Chapter 4, "Java-Based Web Technologies"</a>, this can be difficult with
traditional Java servlet approaches because Java code is often
cluttered with HTML generation code.
</p>

</div>
<a name="javaxslt-CHP-1-SECT-1.2" /></a><div class="sect2">
<h3 class="sect2">1.1.2. Keeping Data and Presentation Separate</h3>

<p>HTML does not separate data from presentation. For example, the
following fragment of HTML displays some information about a
customer. In it, data fields such as "Aidan" and
"Burke" are clearly intertwined with formatting elements
such as <tt class="literal">&lt;tr&gt;</tt> and
<tt class="literal">&lt;td&gt;</tt>:
</p>

<blockquote><pre class="code">&lt;h3&gt;Customer Information&lt;/h3&gt;
&lt;table border="1" cellpadding="2" cellspacing="0"&gt;
  &lt;tr&gt;&lt;td&gt;First Name:&lt;/td&gt;&lt;td&gt;Aidan&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;Last Name:&lt;/td&gt;&lt;td&gt;Burke&lt;/td&gt;&lt;/tr&gt;
  &lt;!-- etc... --&gt;
&lt;/table&gt;</pre></blockquote>

<p>Traditionally, this sort of HTML is generated dynamically using
<tt class="literal">println( )</tt> statements in a servlet, or perhaps
through a JavaServer Page (JSP). Both require Java programmers, and
neither technology explicitly keeps business logic and data separated
from the HTML generation code. To support multiple incompatible
browsers, you have to be careful to avoid duplication of a lot of
Java code and the HTML itself. This places additional burdens on Java
developers who should be working on more important problems.
</p>

<p>There are ways to keep programming logic separate from the HTML
generation, but <em class="emphasis">extracting</em> meaningful data from
HTML pages is next to impossible. This is because the HTML does not
clearly indicate how its data is structured. A human can look at HTML
and determine what its fields mean, but it is quite difficult to
write a computer program that can reliably extract meaningful data.
Although you can search for text patterns such as <tt class="literal">First
Name:</tt> followed by <tt class="literal">&lt;td&gt;</tt>, this
approach<a href="#FOOTNOTE-1">[1]</a> fails as soon as
the presentation is modified. For example, changing the page as
follows would cause this approach to fail:
</p><blockquote class="footnote"> <a name="FOOTNOTE-1" /></a><p> [1] This approach is commonly known as
"screen scraping."</p> </blockquote>

<blockquote><pre class="code">&lt;tr&gt;&lt;td&gt;Full Name:&lt;/td&gt;&lt;td&gt;Aidan Burke&lt;/td&gt;&lt;/tr&gt;</pre></blockquote>

</div>
<a name="javaxslt-CHP-1-SECT-1.3" /></a><div class="sect2">
<h3 class="sect2">1.1.3. The XSLT Solution</h3>

<p><a name="INDEX-38" /></a>XSLT makes it possible to
define clearly the roles of Java, XML, XSLT, and HTML.
<a name="INDEX-39" /></a> <a name="INDEX-40" /></a>Java is used for business logic, database
queries and updates, and for creating XML data. The XML is
responsible for raw data, while XSLT transforms the XML into HTML for
viewing by a browser. A key advantage of this approach is the clean
separation between the XML data and the HTML views. In order to
support multiple browsers, multiple XSLT stylesheets are written, but
the same XML data is reused on the server. In the previous example,
the XML data for the customer did not contain any formatting
instructions:
</p>

<blockquote><pre class="code">&lt;customer&gt;
  &lt;firstName&gt;Aidan&lt;/firstName&gt;
  &lt;lastName&gt;Burke&lt;/lastName&gt;
&lt;/customer&gt;</pre></blockquote>

<p>Since XML contains only data, it is almost always much simpler than
HTML. Additionally, XML can be created using a Java API such as JDOM
(<a href="../../../../../../www.jdom.org/">http://www.jdom.org</a>). This
facilitates error checking and validation, something that cannot be
achieved if you are simply printing HTML as text using
<tt class="literal">PrintWriter</tt> and <tt class="literal">println( )</tt>
statements in a servlet.
</p>

<p>Best of all, the XML-generation code has to be written only once. The
XML data can then be transformed by any number of XSLT stylesheets in
order to support different browsers, alternate languages, or even
nonbrowser devices such as web-enabled cell phones.
</p>

</div>
</div>

<hr width="684" align="left" />
<div class="navbar"><table width="684" border="0"><tr><td align="left" valign="top" width="228"><a href="ch00_06.htm"><img src="../gifs/txtpreva.gif" alt="Previous" border="0" /></a></td><td align="center" valign="top" width="228"><a href="index.htm"><img src="../gifs/txthome.gif" alt="Home" border="0" /></a></td><td align="right" valign="top" width="228"><a href="ch01_02.htm"><img src="../gifs/txtnexta.gif" alt="Next" border="0" /></a></td></tr><tr><td align="left" valign="top" width="228">0.6. Acknowledgments</td><td align="center" valign="top" width="228"><a href="index/index.htm"><img src="../gifs/index.gif" alt="Book Index" border="0" /></a></td><td align="right" valign="top" width="228">1.2. XML Review</td></tr></table></div>
<hr width="684" align="left" />

<img src="../gifs/navbar.gif" usemap="#library-map" border="0" alt="Library Navigation Links" />
<p><p><font size="-1"><a href="copyrght.htm">Copyright &copy; 2002</a> O'Reilly &amp; Associates. All rights reserved.</font></p>

<map name="library-map"><area shape="rect" coords="0,0,85,93" href="../index.htm"><area shape="rect" coords="85,0,180,98" href="../sax2/index.htm"><area shape="rect" coords="182,-1,261,100" href="../xmlnut/index.htm"><area shape="rect" coords="263,1,384,96" href="../jxml/index.htm"><area shape="rect" coords="386,1,463,100" href="index.htm"><area shape="rect" coords="466,1,533,112" href="../xslt/index.htm"><area shape="rect" coords="535,-1,610,108" href="../schema/index.htm"><area shape="rect" coords="613,1,696,121" href="../pxml/index.htm"></map>

</body></html>