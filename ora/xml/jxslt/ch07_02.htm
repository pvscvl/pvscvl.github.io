<html><head><title>Prototyping the XML (Java and XSLT)</title><link rel="stylesheet" type="text/css" href="../style/style1.css" />

<meta name="DC.Creator" content="Eric M. Burke" /><meta name="DC.Format" content="text/xml" scheme="MIME" /><meta name="DC.Language" content="en-US" /><meta name="DC.Publisher" content="O'Reilly &amp; Associates, Inc." /><meta name="DC.Source" scheme="ISBN" content="0596001453L" /><meta name="DC.Subject.Keyword" content="stuff" /><meta name="DC.Title" content="Java and XSLT" /><meta name="DC.Type" content="Text.Monograph" />

</head><body bgcolor="#ffffff">

<img src="gifs/smbanner.gif" usemap="#banner-map" border="0" alt="Book Home" /><map name="banner-map"><area shape="rect" coords="1,-2,616,66" href="index.htm" alt="Java and XSLT" /><area shape="rect" coords="629,-11,726,25" href="jobjects/fsearch.htm" alt="Search this book" /></map>

<div class="navbar"><table width="684" border="0"><tr><td align="left" valign="top" width="228"><a href="ch07_01.htm"><img src="../gifs/txtpreva.gif" alt="Previous" border="0" /></a></td><td align="center" valign="top" width="228" /><td align="right" valign="top" width="228"><a href="ch07_03.htm"><img src="../gifs/txtnexta.gif" alt="Next" border="0" /></a></td></tr></table></div>



<h2 class="sect1">7.2. Prototyping the XML</h2>

<p>Once the requirements and screen flow are well understood, it is
possible to move on to a more rigorous design process. Web sites
based on XSLT are highly modular, facilitating a design and
implementation process that can be farmed out to several members of a
development team. Each piece can be developed and tested
independently before finally bringing everything together into the
completed web application.
</p>

<a name="javaxslt-CHP-7-SECT-2.1" /><div class="sect2">
<h3 class="sect2">7.2.1. XHTML Prototypes</h3>

<p><a name="INDEX-777" />Creating <a name="INDEX-778" />user interface prototypes
is an early task that can be handed off to less experienced
programmers or perhaps to a dedicated web page designer. At this
stage in the game, an overly complex and graphical web interface is
not required. The bells and whistles can be added later by merely
updating XSLT stylesheets. In fact, too much effort at this early
stage can make it more difficult to figure out what the XML and XSLT
should look like.
</p>

<p>Since the front end will be created using <em class="emphasis">XHTML
Strict</em><a name="INDEX-779" />, a separate cascading style sheet (CSS)
will be required to make the pages look presentable.<a href="#FOOTNOTE-25">[25]</a> The strict variant of
XHTML does not allow most of the HTML 4.0 formatting tags, but
instead encourages the use of CSS. <a href="ch07_02.htm">Example 7-1</a>
contains the complete CSS file used by the
<a name="INDEX-780" />
<a name="INDEX-781" />discussion forum.
</p><blockquote class="footnote">
<a name="FOOTNOTE-25" /><p> [25] See <a href="../../../../../../www.w3.org/TR/xhtml1">http://www.w3.org/TR/xhtml1</a> for more
information on XHTML Strict.</p> </blockquote>

<a name="javaxslt-CHP-7-EX-1" /><div class="example">
<h4 class="objtitle">Example 7-1. forum.css </h4>
<blockquote><pre class="code">body {
  font-family : Verdana, Geneva, Arial, Helvetica, sans-serif;
}

.box1 { 
  border: 3px solid Navy;
  text-align: center;
  padding: 4px;
  margin : 2px;
  background-color: #c0c0c0;
}

.box2 { 
  border: 1px solid Navy;
  padding: 4px;
  margin: 2px;
  background-color: #FFFFCC;
}

h1 { 
  font-size: 22pt;
  font-weight: normal;
  margin: 0px 0px 0px 0px;
}

h2 {
  font-size: 18pt;
  font-weight: normal;
  margin: 0px 0px 0px 0px;
}

h3 {
  font-size: 14pt;
  font-weight: normal;
  margin: 0px 0px 0px 0px;
}

ul { 
  margin-top: 0px;
}

.msgSummaryLine { 
  font-size: smaller;
  font-weight: normal;
}

a:hover { 
  background-color:yellow;
}
 
.error { 
  font-weight: bold;
  color: red;
}</pre></blockquote>
</div>

<p>Each of the XHTML web pages refers to this CSS file using the
following syntax:
</p>

<blockquote><pre class="code">&lt;link type="text/css" rel="stylesheet" href="/forum/forum.css" /&gt;</pre></blockquote>

<p>This is a great technique because it keeps the size of the XSLT
stylesheets and each XHTML page much smaller. Changes to fonts and
colors can be made in the single CSS file and are immediately
reflected throughout the web application. The primary obstacle at
this time is noncompliant web browsers. Although support for CSS is
gradually improving, web pages must be tested on a variety of
browsers to identify formatting problems.
</p>

<a name="ch07-7-fm2xml" /><blockquote><b>NOTE:</b> 

A common theme presented throughout this book is the separation of data and presentation that XSLT supports. CSS expands upon this theme by separating XHTML content from many aspects of its visual presentation. CSS and XSLT are very different technologies that complement one another nicely.
</p></blockquote>
<p>Most of the code in a CSS file is fairly self-explanatory. For
example, the <tt class="literal">h2</tt> style applies to
<tt class="literal">&lt;h2&gt;</tt> elements in the XHTML. One style
element that many programmers may not be familiar with is:
</p>

<blockquote><pre class="code">.box2 { 
  border: 1px solid Navy;
  padding: 4px;
  margin: 2px;
  background-color: #FFFFCC;
}</pre></blockquote>

<p>The dot in <tt class="literal">.box2</tt> indicates a <em class="emphasis">style
class</em><a name="INDEX-782" />
definition. Here is how the <tt class="literal">box2</tt> style class is
used in the XHTML:
</p>

<blockquote><pre class="code">&lt;div class="box2"&gt;Messages for March, 2001&lt;/div&gt;</pre></blockquote>

<p>The advantage of a style class is that it can be applied to any
element in the XHTML. In this case, a thin border and yellow
background are applied to any element that has the
<tt class="literal">box2</tt> class.
</p>

<p>The web page designers should create basic representations of every
page in the application at this point. The home page is shown in
<a href="ch07_02.htm">Figure 7-2</a>.
</p>

<a name="javaxslt-CHP-7-FIG-2" /><div class="figure"><img src="figs/jxt_0702.gif" alt="Figure 7-2" width="453" height="489" /></div><h4 class="objtitle">Figure 7-2. Home page prototype</h4>

<p>The complete XHTML source code for the home page is shown in <a href="ch07_02.htm">Example 7-2</a>. As shown, the actual hyperlinks are not valid
because the design for the servlets has not been completed, and the
final URLs are probably unknown at this point. At any rate, this is
only prototype code, because the actual XHTML web pages are dynamic
and will be produced as the result of an XSLT transformation from XML
data.<a name="INDEX-783" />
</p>

<a name="javaxslt-CHP-7-EX-2" /><div class="example">
<h4 class="objtitle">Example 7-2. Home page XHTML source </h4>
<blockquote><pre class="code">&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
    "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd"&gt;
&lt;html xmlns="http://www.w3.org/1999/xhtml"&gt;
  &lt;head&gt;
    &lt;title&gt;Discussion Forum Home&lt;/title&gt;
    &lt;link href="../docroot/forum.css" rel="stylesheet" type="text/css" /&gt;
  &lt;/head&gt;
  &lt;body&gt;
    &lt;div class="box1"&gt;
      &lt;h1&gt;Discussion Forum Home&lt;/h1&gt;
    &lt;/div&gt;
    &lt;div class="box2"&gt;
      &lt;h2&gt;Java Programming&lt;/h2&gt;
      &lt;div&gt;General programming questions about Java.&lt;/div&gt;
      &lt;div style="margin-left: 2em;"&gt;
        &lt;p&gt;
          &lt;a href="link_to_post_message"&gt;Post Message&lt;/a&gt;
        to Java Programming&lt;/p&gt;
        &lt;a href="link_to_feb_messages"&gt;Feb, 2001&lt;/a&gt; | 
        &lt;a href="link_to_mar_messages"&gt;Mar, 2001&lt;/a&gt; | 
        &lt;a href="link_to_apr_messages"&gt;Apr, 2001&lt;/a&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class="box2"&gt;
      &lt;h2&gt;XSLT Basics&lt;/h2&gt;
      &lt;div&gt;Writing effective XSLT stylesheets.&lt;/div&gt;
      &lt;div style="margin-left: 2em;"&gt;
        &lt;p&gt;
        &lt;a href="link_to_post_message"&gt;Post Message&lt;/a&gt; to XSLT Basics&lt;/p&gt;
        &lt;a href="link_to_feb_messages"&gt;Feb, 2001&lt;/a&gt; | 
        &lt;a href="link_to_mar_messages"&gt;Mar, 2001&lt;/a&gt; | 
        &lt;a href="link_to_apr_messages"&gt;Apr, 2001&lt;/a&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class="box2"&gt;
      &lt;h2&gt;Sample empty board&lt;/h2&gt;
      &lt;div&gt;This board has no messages.&lt;/div&gt;
      &lt;div style="margin-left: 2em;"&gt;
        &lt;p&gt;
          &lt;a href="link_to_post_msg"&gt;Post Message&lt;/a&gt;
        to Sample empty board&lt;/p&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/body&gt;
&lt;/html&gt;</pre></blockquote>
</div>

<p><tt class="literal">&lt;div&gt;</tt><a name="INDEX-784" />
<a name="INDEX-785" /> and
<tt class="literal">&lt;span&gt;</tt> tags may be unfamiliar because they
were ignored by many HTML authors until CSS became more prevalent.
Basically, a <tt class="literal">&lt;div&gt;</tt> tag is wrapped around any
number of other elements, turning them into a block-level element
group. The <tt class="literal">&lt;span&gt;</tt> tag is similar, but it is
an inline element. This means that <tt class="literal">&lt;span&gt;</tt>
tags will be embedded into the current line, while
<tt class="literal">&lt;div&gt;</tt> tags will wrap to a new line much like
<tt class="literal">&lt;p&gt;</tt> or <tt class="literal">&lt;h1&gt;</tt> tags
do. The ability to define style classes make
<tt class="literal">&lt;div&gt;</tt> and <tt class="literal">&lt;span&gt;</tt>
particularly useful for XHTML Strict, which disallows deprecated HTML
4.0 elements such as <tt class="literal">&lt;font&gt;</tt>. Although
<tt class="literal">&lt;span&gt;</tt> is not used in this particular
example, <tt class="literal">&lt;div&gt;</tt> is used frequently to
introduce line breaks and to apply styles using CSS.
</p>

<p>The next prototype, shown in <a href="ch07_02.htm">Figure 7-3</a>, shows what
a message board looks like. XHTML source code for the remaining
screens is not listed here.
</p>

<a name="javaxslt-CHP-7-FIG-3" /><div class="figure"><img src="figs/jxt_0703.gif" alt="Figure 7-3" width="481" height="363" /></div><h4 class="objtitle">Figure 7-3. View Month prototype</h4>

<p>Messages that are replies to other messages are indented a few
spaces. Later, a simple change to the XSLT stylesheet can be employed
to show graphical folders or other icons in front of each message.
The next screen, shown in <a href="ch07_02.htm">Figure 7-4</a>, shows how
users can post new messages to the discussion forum.
</p>

<a name="javaxslt-CHP-7-FIG-4" /><div class="figure"><img src="figs/jxt_0704.gif" alt="Figure 7-4" width="481" height="348" /></div><h4 class="objtitle">Figure 7-4. Post Message prototype</h4>

<p>This page is also used to reply to an existing message. Although not
shown here, the title changes to "Reply to Message," and
the subject and message text are pre-filled with text from the
original message. If the user submits this form without filling in
all values, the web page is redisplayed with an error message.
</p>

<p>The final screen prototype is shown in <a href="ch07_02.htm">Figure 7-5</a>.
This screen allows users to view existing messages.
</p>

<a name="javaxslt-CHP-7-FIG-5" /><div class="figure"><img src="figs/jxt_0705.gif" alt="Figure 7-5" width="481" height="420" /></div><h4 class="objtitle">Figure 7-5. View Message prototype</h4>

</div>
<a name="javaxslt-CHP-7-SECT-2.2" /><div class="sect2">
<h3 class="sect2">7.2.2. XML Samples</h3>

<p><a name="INDEX-786" /> <a name="INDEX-787" />While page designers are hard at work on
the XHTML prototype screens, someone else can be working on sample
XML data for each web page. Although different people may work on
these tasks, a certain degree of coordination is critical at this
point. The prototype XHTML pages may look great, but the XML must
provide the data to enable those pages to be created. The XML
designer will also have to work with the people who are designing the
back-end data sources to determine if the desired data is even
available.
</p>

<p>When designing <a name="INDEX-788" />XML, the
focus should be on data rather than presentation. All of the fonts
and colors that are part of the CSS should have absolutely zero
impact on the design of the XML. The XML will contain additional data
that is not displayed, however. For example, creating hyperlinks
requires some sort of identifier for each object. This allows the
servlet to figure out which message the user clicked on. The XML data
contains the identifier for the message, but the actual XHTML markup
for the hyperlink comes from an XSLT stylesheet.
</p>

<p>The XML data for the home page is shown in <a href="ch07_02.htm">Example 7-3</a>. Because the XML does not contain presentation
information, it is smaller than the XHTML markup.
</p>

<a name="javaxslt-CHP-7-EX-3" /><div class="example">
<h4 class="objtitle">Example 7-3. home.xml </h4>
<blockquote><pre class="code">&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;?xml-stylesheet type="text/xsl" href="../xslt/home.xslt"?&gt;
&lt;home&gt;
  &lt;board id="0"&gt;
    &lt;name&gt;Java Programming&lt;/name&gt;
    &lt;description&gt;General programming questions about Java.&lt;/description&gt;
    &lt;messages month="1" year="2001"/&gt;
    &lt;messages month="2" year="2001"/&gt;
    &lt;messages month="3" year="2001"/&gt;
  &lt;/board&gt;
  &lt;board id="1"&gt;
    &lt;name&gt;XSLT Basics&lt;/name&gt;
    &lt;description&gt;Writing effective XSLT stylesheets&lt;/description&gt;
    &lt;messages month="1" year="2001"/&gt;
    &lt;messages month="2" year="2001"/&gt;
    &lt;messages month="3" year="2001"/&gt;
  &lt;/board&gt;
  &lt;board id="3"&gt;
    &lt;name&gt;Sample empty board&lt;/name&gt;
    &lt;description&gt;This board has no messages.&lt;/description&gt;
  &lt;/board&gt;
&lt;/home&gt;</pre></blockquote>
</div>

<p>Do not forget that this is still just a prototype XML file. The
actual XML data will be dynamically generated by JDOM once the
application is finished; this XML prototype code is used only for
testing and development purposes.
</p>

<p>In this XML data, each message board is represented by a
<tt class="literal">&lt;board&gt;</tt> element that has an
<tt class="literal">id</tt> attribute. When the user clicks on the
"Post Message" web page hyperlink, this id is used to
figure out which message board he or she wants to post to. The list
of <tt class="literal">&lt;messages&gt;</tt> elements indicates months that
have messages in them. These do not need <tt class="literal">id</tt>
attributes because the month and year are used in the hyperlink.
</p>

<p>The second line of the XML links to the XSLT stylesheet:</p>

<blockquote><pre class="code">&lt;?xml-stylesheet type="text/xsl" href="../xslt/home.xslt"?&gt;</pre></blockquote>

<p>This is not used in the final application but is very useful during
the prototyping and development process. By linking to the
stylesheet, the transformation can be quickly viewed in an
XSLT-compatible web browser by simply loading the XML page.
</p>

<a name="javaxslt-CHP-7-SIDEBAR-1" /><blockquote><table border="1" cellpadding="6"><tr><td>
<h4 class="objtitle">Iterative Design</h4>
&nbsp;
<p><a name="INDEX-789" />
<a name="INDEX-790" />The examples shown in this chapter are
the result of several attempts to get the design "right."
As in other areas of software design, figuring out what to place in
the XHTML, XML, and XSLT is an iterative process that requires
several attempts before the design can be finalized.
</p>
&nbsp;
<p>In a nutshell, the process works something like this:</p>
&nbsp;
<ul><li>
<p>Prototype the web pages using HTML or XHTML.</p>
</li></ul>
<ul><li>
<p>Create the XML datafile prototypes and optionally create DTDs.</p>
</li></ul>
<ul><li>
<p>Create XSLT stylesheets that transform the XML into XHTML.</p>
</li></ul>
<ul><li>
<p>Design and create back-end data sources and classes that know how to
produce the required XML data.
</p>
</li></ul>
<ul><li>
<p>Create servlets that tie everything together.</p>
</li></ul>
<p>As each piece of the application is implemented, missing or redundant
features will manifest themselves in other areas. This is where the
iterative process comes into effect. If some features are not right
the first time, simply refine the prototypes and repeat various steps
in the process until all the pieces fit together.
</p>
</td></tr></table><p></blockquote>

<p>The next XML file, shown in <a href="ch07_02.htm">Example 7-4</a>, contains
data for the "View Month" page.
</p>

<a name="javaxslt-CHP-7-EX-4" /><div class="example">
<h4 class="objtitle">Example 7-4. viewMonth.xml </h4>
<blockquote><pre class="code">&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;?xml-stylesheet type="text/xsl" href="../xslt/viewMonth.xslt"?&gt;
&lt;viewMonth month="1" year="2001"&gt;
  &lt;board id="1"&gt;
    &lt;name&gt;Java Programming&lt;/name&gt;
    &lt;description&gt;General programming questions about Java.&lt;/description&gt;
  &lt;/board&gt;
  &lt;message id="1" day="1"&gt;
    &lt;subject&gt;First test message&lt;/subject&gt;
    &lt;authorEmail&gt;burke_e@yahoo.com&lt;/authorEmail&gt;
    &lt;message id="2" day="2"&gt;
      &lt;subject&gt;Re: First test message&lt;/subject&gt;
      &lt;authorEmail&gt;aidan@nowhere.com&lt;/authorEmail&gt;
    &lt;/message&gt;
  &lt;/message&gt;
  &lt;message id="3" day="4"&gt;
    &lt;subject&gt;Another test message&lt;/subject&gt;
    &lt;authorEmail&gt;burke_e@yahoo.com&lt;/authorEmail&gt;
  &lt;/message&gt;
&lt;/viewMonth&gt;</pre></blockquote>
</div>

<p>Moving on to <a href="ch07_02.htm">Example 7-5</a>, we have the XML for the
"Post/Reply Message" page.
</p>

<a name="javaxslt-CHP-7-EX-5" /><div class="example">
<h4 class="objtitle">Example 7-5. postMsg.xml </h4>
<blockquote><pre class="code">&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;?xml-stylesheet type="text/xsl" href="../xslt/postMsg.xslt"?&gt;
&lt;postMsg&gt;
  &lt;board id="1"&gt;
    &lt;name&gt;Java Programming&lt;/name&gt;
    &lt;description&gt;The board description...&lt;/description&gt;
  &lt;/board&gt;
  &lt;inResponseTo id="4"&gt;
    &lt;subject&gt;Test Subject&lt;/subject&gt;
  &lt;/inResponseTo&gt;
  <tt class="userinput"><b>&lt;error code="ALL_FIELDS_REQUIRED"/&gt;
  &lt;prefill&gt;
    &lt;subject&gt;Test Subject&lt;/subject&gt;
    &lt;authorEmail&gt;&lt;/authorEmail&gt;
    &lt;message&gt;My Message&lt;/message&gt;
  &lt;/prefill&gt;</b></tt>
&lt;/postMsg&gt;</pre></blockquote>
</div>

<p>This XML is used for both posting new messages and replying to
existing messages because the web pages are virtually identical, and
the data is the same in both cases. The
<tt class="literal">&lt;error&gt;</tt> and
<tt class="literal">&lt;prefill&gt;</tt> elements were not part of the
original prototype, but it was quickly determined that these were
needed if the user did not provide information for all required
fields. When the "Post New Message" page is first
displayed, these XML elements are not present. After the user clicks
on the Submit button, however, these elements are inserted into the
XML if a field is missing and the page needs to be redisplayed.
</p>

<p><a name="INDEX-791" />
<a name="INDEX-792" />And finally, the
XML for the "View Message" page is shown in <a href="ch07_02.htm">Example 7-6</a>. 
</p>

<a name="javaxslt-CHP-7-EX-6" /><div class="example">
<h4 class="objtitle">Example 7-6. viewMsg.xml </h4>
<blockquote><pre class="code">&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;?xml-stylesheet type="text/xsl" href="../xslt/viewMsg.xslt"?&gt;
&lt;message id="5" month="1" day="4" year="2001"&gt;
  &lt;board id="1"&gt;
    &lt;name&gt;Java Programming&lt;/name&gt;
  &lt;/board&gt;
  &lt;inResponseTo id="4"&gt;
    &lt;subject&gt;Test Subject&lt;/subject&gt;
  &lt;/inResponseTo&gt;
  &lt;subject&gt;Re: Test Subject&lt;/subject&gt;
  &lt;authorEmail&gt;burke_e@yahoo.com&lt;/authorEmail&gt;
  &lt;text&gt;This is a test of the message
   text.&lt;/text&gt;
&lt;/message&gt;</pre></blockquote>
</div>

<p>A quick study of this data reveals that
<em class="filename">postMsg.xml</em> and <em class="filename">viewMsg.xml</em>
have many similarities. A few modifications to either XML file will
enable us to reuse the same JDOM code later when producing these
pages. The alternative is to keep these pages separate, which results
in at least one additional Java class later on. The advantage of
keeping these files separate is so that the XML generation code does
not have to be cluttered up with a lot of
<tt class="literal">if</tt>/<tt class="literal">else</tt> statements to figure
out the mode of operation it is in.
</p>

</div>
<a name="javaxslt-CHP-7-SECT-2.3" /><div class="sect2">
<h3 class="sect2">7.2.3. XSLT Stylesheets</h3>

<p>Yet another member of the development team can be assigned to the
task of creating <a name="INDEX-793" /> <a name="INDEX-794" />XSLT stylesheets, although he or
she will have to wait until the XML and XHTML prototypes are
complete. More often than not, the person designing the XML will be
the one creating the initial XSLT stylesheets.
</p>

<p>At this point in the process, a tool such as <a name="INDEX-795" />XML Spy can be invaluable.<a href="#FOOTNOTE-26">[26]</a> The
ability to edit the XSLT stylesheet and click on the Refresh button
in an IDE makes development a snap. Alternately, an
<a name="INDEX-796" />XSLT-compatible web browser can quickly
display changes as stylesheets are edited. As explained in <a href="ch01_01.htm">Chapter 1, "Introduction "</a>,
<a name="INDEX-797" />Microsoft's Internet Explorer 5.x
supports XSLT, provided that the updated <em class="filename">msxml</em>
parser is installed using the <em class="filename">xmlinst</em>
utility.<a href="#FOOTNOTE-27">[27]</a>
</p><blockquote class="footnote">
<a name="FOOTNOTE-26" /><p> [26] XML Spy is a commercial XML editor that works nicely for XSLT
development. It is available at <a href="../../../../../../www.xmlspy.com/">http://www.xmlspy.com</a>.</p> </blockquote><blockquote class="footnote"> <a name="FOOTNOTE-27" /><p> [27] As this is written, IE 6.0 is in beta
testing. It supports the latest XSLT specification. The Mozilla
browser will also support XSLT at some point.</p> </blockquote>

<p><a href="ch07_02.htm">Example 7-7</a> <a name="INDEX-798" /> <a name="INDEX-799" />shows the XSLT for the discussion forum
home page.<a name="INDEX-800" />
</p>

<a name="javaxslt-CHP-7-EX-7" /><div class="example">
<h4 class="objtitle">Example 7-7. XSLT for the home page </h4>
<blockquote><pre class="code">&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;!--
***********************************************************
** home.xslt
**
** Transforms the home page into XHTML
***********************************************************
--&gt;
&lt;xsl:stylesheet version="1.0" 
  xmlns:xsl="http://www.w3.org/1999/XSL/Transform"&gt;
  <tt class="userinput"><b>&lt;xsl:import href="utils.xslt"/&gt;
  &lt;xsl:param name="rootDir" select="'../docroot/'"/&gt;
  &lt;xsl:output method="xml" version="1.0" encoding="UTF-8" 
    indent="yes" 
    doctype-public="-//W3C//DTD XHTML 1.0 Strict//EN" 
    doctype-system="http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd"/&gt;</b></tt>
  
  &lt;!--
  **********************************************************
  ** Create the XHTML web page
  *******************************************************--&gt;
  &lt;xsl:template match="/"&gt;
    &lt;html xmlns="http://www.w3.org/1999/xhtml"&gt;
      &lt;head&gt;
        &lt;title&gt;Discussion Forum Home&lt;/title&gt;
        <tt class="userinput"><b>&lt;link href="{$rootDir}forum.css" 
            rel="stylesheet" type="text/css"/&gt;</b></tt>
      &lt;/head&gt;
      &lt;body&gt;
        &lt;div class="box1"&gt;
          &lt;h1&gt;Discussion Forum Home&lt;/h1&gt;
        &lt;/div&gt;
        &lt;xsl:apply-templates select="home/board"/&gt;
      &lt;/body&gt;
    &lt;/html&gt;
  &lt;/xsl:template&gt;
  
  &lt;!--
  **********************************************************
  ** Output a box for each board in the discussion forum
  **********************************************************
  --&gt;
  &lt;xsl:template match="board"&gt;
    &lt;xsl:variable name="boardID" select="@id"/&gt;
    
    &lt;div class="box2"&gt;
      &lt;h2&gt;&lt;xsl:value-of select="name"/&gt;&lt;/h2&gt;
      &lt;div&gt;&lt;xsl:value-of select="description"/&gt;&lt;/div&gt;
      &lt;div style="margin-left: 2em;"&gt;
        &lt;!-- create a link so the user can post a new message
             to this board --&gt;
        &lt;p&gt;
        <tt class="userinput"><b>&lt;a href="/forum/main/postMsg?mode=postNewMsg&amp;amp;boardID={@id}"&gt;Post Message&lt;/a&gt;</b></tt>
        to &lt;xsl:value-of select="name"/&gt;
        &lt;/p&gt;
        
        &lt;!-- For each month that has messages, show the 
             month name and year number as a link --&gt;
        &lt;xsl:for-each select="messages"&gt;
         &lt;ahref="forum/main/viewMonth?boardID={$boardID}&amp;amp;month={@month}&amp;amp;year=
         {@year}"&gt;
            <tt class="userinput"><b>&lt;xsl:call-template name="utils.printShortMonthName"&gt;
              &lt;xsl:with-param name="monthNumber" select="@month"/&gt;
            &lt;/xsl:call-template&gt;</b></tt>
            &lt;xsl:text&gt;, &lt;/xsl:text&gt;
            &lt;xsl:value-of select="@year"/&gt;
          &lt;/a&gt;
          &lt;!-- put a pipe character after 
               all but the last month --&gt;
          &lt;xsl:if test="position() != last( )"&gt;
            &lt;xsl:text&gt; | &lt;/xsl:text&gt;
          &lt;/xsl:if&gt;
        &lt;/xsl:for-each&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/xsl:template&gt;
&lt;/xsl:stylesheet&gt;</pre></blockquote>
</div>

<p><a name="INDEX-801" />This
stylesheet opens with the usual
<tt class="literal">&lt;xsl:stylesheet&gt;</tt> tag and then proceeds to
import <em class="filename">utils.xslt</em>. This is a stylesheet that
contains common templates for formatting dates. Since these utilities
are needed on just about every page, they are defined a common file
that is imported, as shown here. This stylesheet also takes a
parameter named <tt class="literal">rootDir</tt>, allowing the web
application to specify the location of the document root directory:
</p>

<blockquote><pre class="code">&lt;xsl:param name="rootDir" select="'../docroot/'"/&gt;</pre></blockquote>

<p>The <tt class="literal">select</tt> attribute defines a default value for
this parameter if none was specified. During the stylesheet
development process, the XSLT is tested using a static XML file. This
is done outside of a web application, so the parameter is not
specified and the root directory defaults to
<tt class="literal">../docroot/</tt>. This makes it possible to locate the
CSS file during development, when developers are working from a
static directory structure on their file systems. Later, when the
XSLT stylesheet is deployed to a web application and the servlet is
running, the servlet can specify a different value for this parameter
that indicates a directory relative to the web application context.
This is a useful technique whenever a stylesheet has to reference
external resources such as CSS files, JavaScript files, or images.
</p>

<p>Next, the <tt class="literal">&lt;xsl:output&gt;</tt> element is used to
set up XHTML output. The <em class="filename">XHTML 1.0 Strict</em> DTD is
used, which eliminates many deprecated HTML 4.0 features. Because the
strict DTD does away with many formatting tags, a CSS file is
required to make the pages look presentable. All the XSLT needs to do
is produce HTML code that references the external stylesheet, as
shown here:
</p>

<blockquote><pre class="code">&lt;html xmlns="http://www.w3.org/1999/xhtml"&gt;
  &lt;head&gt;
    &lt;title&gt;Discussion Forum Home&lt;/title&gt;<tt class="userinput"><b>
    &lt;link href="{$rootDir}forum.css" </b></tt><tt class="userinput"><b>
        rel="stylesheet" type="text/css"/&gt;</b></tt>
  &lt;/head&gt;</pre></blockquote>

<p>The XSLT processor does not actually deal with the CSS file. From the
perspective of XSLT, the <tt class="literal">&lt;link&gt;</tt> tag is just
text that is copied to the result tree during the transformation
process. Later, when the web browser displays the XHTML page, the
actual CSS file is loaded. This technique is great because styles can
be shared across all web pages without complicating the XSLT
stylesheets.
</p>

<p>The remainder of the stylesheet is pretty basic -- just matching
patterns in the XML and producing XHTML content to the result tree.
One important thing to point out here is the way that hyperlinks are
created:
</p>

<blockquote><pre class="code">&lt;a href="/forum/main/postMsg?mode=postNewMsg&amp;amp;boardID={@id}"&gt;Post Message&lt;/a&gt;</pre></blockquote>

<p>Since the ampersand character
(<tt class="literal">&amp;</tt><a name="INDEX-802" />) is not allowed in an XML
attribute value, it must be written using the
<tt class="literal">&amp;amp;</tt> built-in entity. As it turns out,
browsers deal with this just fine, and the hyperlink works
anyway.<a href="#FOOTNOTE-28">[28]</a>
</p><blockquote class="footnote"> <a name="FOOTNOTE-28" /><p> [28] We will see this again when dealing with WML
in <a href="ch10_01.htm">Chapter 10, "Wireless Applications"</a>.</p> </blockquote>

<a name="javaxslt-CHP-7-SIDEBAR-2" /><blockquote><table border="1" cellpadding="6"><tr><td>
<h4 class="objtitle">What Is the URL?</h4>
&nbsp;
<p><a name="INDEX-803" />You
may be wondering how you are supposed to know what each hyperlink is
actually supposed to be. At this stage of the game, you probably will
not know, and your links will actually look something like this:
</p>
&nbsp;
<blockquote><pre class="code">&lt;a href="TODO: link to post a new message"&gt;Post Message&lt;/a&gt;</pre></blockquote>
&nbsp;
<p>This is fine for now, because you really won't know what to put
there until the servlets are fully designed. Part of the servlet
design process involves figuring out what parameters are required and
what the legal values are. Until this work has been completed,
however, an educated guess or "TODO" comment is fine.
</p>
</td></tr></table><p></blockquote>

<p>Another key piece of this stylesheet shows how to call a utility
template:
</p>

<blockquote><pre class="code"><tt class="userinput"><b>
&lt;xsl:call-template name="utils.printShortMonthName"&gt;</b></tt><tt class="userinput"><b>
  &lt;xsl:with-param name="monthNumber" select="@month"/&gt;</b></tt><tt class="userinput"><b>
&lt;/xsl:call-template&gt;</b></tt></pre></blockquote>
<p>The utils.printShortMonthName template is part of
utils.xslt<a name="INDEX-804" /> and is
invoked just like a local template. The only difference is that the
current stylesheet must import utils.xslt or the code will fail.
Prefixing the template name with utils. has nothing to do with the
actual filename; it is a convention adopted only for this application
that makes the code a little easier to read, reducing the chances for
naming conflicts.
</p>

<p>The reusable XSLT stylesheet, utils.xslt, is shown next in <a href="ch07_02.htm">Example 7-8</a>. 
</p>

<a name="javaxslt-CHP-7-EX-8" /><div class="example">
<h4 class="objtitle">Example 7-8. Reusable XSLT code </h4>
<blockquote><pre class="code">&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;xsl:stylesheet version="1.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform"&gt;
  
  &lt;xsl:template name="utils.printShortMonthName"&gt;
    &lt;xsl:param name="monthNumber"/&gt;
    &lt;xsl:choose&gt;
      &lt;xsl:when test="$monthNumber='0'"&gt;Jan&lt;/xsl:when&gt;
      &lt;xsl:when test="$monthNumber='1'"&gt;Feb&lt;/xsl:when&gt;
      &lt;xsl:when test="$monthNumber='2'"&gt;Mar&lt;/xsl:when&gt;
      &lt;xsl:when test="$monthNumber='3'"&gt;Apr&lt;/xsl:when&gt;
      &lt;xsl:when test="$monthNumber='4'"&gt;May&lt;/xsl:when&gt;
      &lt;xsl:when test="$monthNumber='5'"&gt;Jun&lt;/xsl:when&gt;
      &lt;xsl:when test="$monthNumber='6'"&gt;Jul&lt;/xsl:when&gt;
      &lt;xsl:when test="$monthNumber='7'"&gt;Aug&lt;/xsl:when&gt;
      &lt;xsl:when test="$monthNumber='8'"&gt;Sep&lt;/xsl:when&gt;
      &lt;xsl:when test="$monthNumber='9'"&gt;Oct&lt;/xsl:when&gt;
      &lt;xsl:when test="$monthNumber='10'"&gt;Nov&lt;/xsl:when&gt;
      &lt;xsl:when test="$monthNumber='11'"&gt;Dec&lt;/xsl:when&gt;
    &lt;/xsl:choose&gt;
  &lt;/xsl:template&gt;
  
  &lt;xsl:template name="utils.printLongMonthName"&gt;
    &lt;xsl:param name="monthNumber"/&gt;
    &lt;xsl:choose&gt;
      &lt;xsl:when test="$monthNumber='0'"&gt;January&lt;/xsl:when&gt;
      &lt;xsl:when test="$monthNumber='1'"&gt;February&lt;/xsl:when&gt;
      &lt;xsl:when test="$monthNumber='2'"&gt;March&lt;/xsl:when&gt;
      &lt;xsl:when test="$monthNumber='3'"&gt;April&lt;/xsl:when&gt;
      &lt;xsl:when test="$monthNumber='4'"&gt;May&lt;/xsl:when&gt;
      &lt;xsl:when test="$monthNumber='5'"&gt;June&lt;/xsl:when&gt;
      &lt;xsl:when test="$monthNumber='6'"&gt;July&lt;/xsl:when&gt;
      &lt;xsl:when test="$monthNumber='7'"&gt;August&lt;/xsl:when&gt;
      &lt;xsl:when test="$monthNumber='8'"&gt;September&lt;/xsl:when&gt;
      &lt;xsl:when test="$monthNumber='9'"&gt;October&lt;/xsl:when&gt;
      &lt;xsl:when test="$monthNumber='10'"&gt;November&lt;/xsl:when&gt;
      &lt;xsl:when test="$monthNumber='11'"&gt;December&lt;/xsl:when&gt;
    &lt;/xsl:choose&gt;
  &lt;/xsl:template&gt;
&lt;/xsl:stylesheet&gt;</pre></blockquote>
</div>

<p>Month numbers are indexed from position 0 to be consistent with the
<tt class="literal">java.util.Calendar</tt> class, which also uses 0 to
represent January. The templates convert the month number into an
English month name.
</p>

<p><em class="filename">viewMonth.xslt</em><a name="INDEX-805" />
<a name="INDEX-806" />
is shown in <a href="ch07_02.htm">Example 7-9</a>. It generates an XHTML page
that shows all messages in a month for a particular board.
</p>

<a name="javaxslt-CHP-7-EX-9" /><div class="example">
<h4 class="objtitle">Example 7-9. XSLT for the View Month page </h4>
<blockquote><pre class="code">&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;!--
***********************************************************
** viewMonth.xslt
**
** Shows a month-view of messages in a given board.
***********************************************************
--&gt;
&lt;xsl:stylesheet version="1.0" 
  xmlns:xsl="http://www.w3.org/1999/XSL/Transform"&gt;
  &lt;xsl:import href="utils.xslt"/&gt;
  &lt;xsl:param name="rootDir" select="'../docroot/'"/&gt;
  &lt;xsl:output method="xml" version="1.0" encoding="UTF-8" 
    indent="yes" 
    doctype-public="-//W3C//DTD XHTML 1.0 Strict//EN" 
    doctype-system="http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd"/&gt;
  <tt class="userinput"><b>&lt;!-- ================= Global Variables ================= --&gt;
  &lt;xsl:variable name="global.boardName" select="/viewMonth/board/name"/&gt;
  &lt;xsl:variable name="global.boardID" select="/viewMonth/board/@id"/&gt;
  &lt;xsl:variable name="global.monthNum" select="/viewMonth/@month"/&gt;
  &lt;xsl:variable name="global.yearNum" select="/viewMonth/@year"/&gt;</b></tt>
  
  &lt;!--
  **********************************************************
  ** Create the XHTML web page
  *******************************************************--&gt;
  &lt;xsl:template match="/"&gt;
    &lt;html xmlns="http://www.w3.org/1999/xhtml"&gt;
      &lt;head&gt;
        &lt;title&gt;
          &lt;xsl:value-of select="$global.boardName"/&gt;
        &lt;/title&gt;
        &lt;!-- reference an external CSS file to keep this
             XSLT stylesheet smaller --&gt;
        &lt;link href="{$rootDir}forum.css" 
            rel="stylesheet" type="text/css"/&gt;
      &lt;/head&gt;
      &lt;body&gt;
        &lt;div class="box1"&gt;
          &lt;h1&gt;
            &lt;xsl:value-of select="$global.boardName"/&gt;
          &lt;/h1&gt;
        &lt;/div&gt;
        &lt;div class="box2"&gt;
          &lt;xsl:text&gt;Messages for &lt;/xsl:text&gt;
          &lt;xsl:call-template name="utils.printLongMonthName"&gt;
            &lt;xsl:with-param name="monthNumber" select="$global.monthNum"/&gt;
          &lt;/xsl:call-template&gt;
          &lt;xsl:text&gt;, &lt;/xsl:text&gt;
          &lt;xsl:value-of select="$global.yearNum"/&gt;
        &lt;/div&gt;
        &lt;!-- ===== Quick Actions ====== --&gt;
        &lt;h3&gt;Quick Actions&lt;/h3&gt;
        &lt;ul&gt;
          &lt;li&gt;
            &lt;a href="postMsg?mode=postNewMsg&amp;amp;boardID={$global.boardID}"&gt;
          Post&lt;/a&gt; a new message...&lt;/li&gt;
          &lt;li&gt;Return to the &lt;a href="home"&gt;home page&lt;/a&gt;...&lt;/li&gt;
        &lt;/ul&gt;
        &lt;!-- ===== Recursively show the message tree ===== --&gt;
        &lt;xsl:apply-templates select="viewMonth/message"/&gt;
      &lt;/body&gt;
    &lt;/html&gt;
  &lt;/xsl:template&gt;

  &lt;!--
  **********************************************************
  ** Display a one-line summary for each message.
  *******************************************************--&gt;
  <tt class="userinput"><b>&lt;xsl:template match="message"&gt;
    &lt;xsl:param name="indent" select="0"/&gt;
    
    &lt;!-- indent according to the 'indent' parameter --&gt;
    &lt;div style="margin-left: {$indent}em;"&gt;
      &lt;a href="viewMsg?msgID={@id}"&gt;
        &lt;xsl:value-of select="subject"/&gt;
      &lt;/a&gt;</b></tt>
      &lt;xsl:text&gt; posted by &lt;/xsl:text&gt;
      &lt;xsl:apply-templates select="authorEmail"/&gt;
      &lt;xsl:text&gt; on &lt;/xsl:text&gt;
      &lt;xsl:value-of select="@day"/&gt;
      &lt;xsl:text disable-output-escaping="yes"&gt;&amp;amp;nbsp;
      &lt;xsl:call-template name="utils.printShortMonthName"&gt;
        &lt;xsl:with-param name="monthNumber" select="$global.monthNum"/&gt;
      &lt;/xsl:call-template&gt;
            &lt;xsl:text disable-output-escaping="yes"&gt;&amp;amp;nbsp;
      &lt;xsl:value-of select="$global.yearNum"/&gt;
      
      <tt class="userinput"><b>&lt;!-- recursively select all messages that are 
          responses to this one. Increment the indentation 
          with each call --&gt;
      &lt;xsl:apply-templates select="message"&gt;
        &lt;xsl:with-param name="indent" select="$indent + 1"/&gt;
      &lt;/xsl:apply-templates&gt;
    &lt;/div&gt;
  &lt;/xsl:template&gt;</b></tt>
  
  &lt;!--
  **********************************************************
  ** Show the author's email address.
  *******************************************************--&gt;
  &lt;xsl:template match="authorEmail"&gt;
    &lt;a href="mailto:{.}"&gt;
      &lt;xsl:value-of select="."/&gt;
    &lt;/a&gt;
  &lt;/xsl:template&gt;
&lt;/xsl:stylesheet&gt;</pre></blockquote>
</div>

<p><a name="INDEX-807" />
<a name="INDEX-808" />Because
<em class="filename">viewMonth.xslt</em> shows a summary view of a large
number of messages, the actual text content for each message is not
included in the output. Instead, the message subject, author, and
create date are displayed. These lines are grouped and indented
according to replies, making threads of discussion immediately
visible.
</p>

<p>This stylesheet declares a series of global variables. These can be
referenced throughout the stylesheet and are designed to make the
code more maintainable. Since each variable is prefixed with
<tt class="literal">global.</tt>, the code is easy to understand when using
the variables:
</p>

<blockquote><pre class="code">&lt;xsl:value-of select="$global.boardName"/&gt;</pre></blockquote>

<a name="ch07-12-fm2xml" /><blockquote><b>NOTE:</b> 
The <tt class="literal">global.</tt><a name="INDEX-809" /> naming convention is not a standard
part of XSLT. It is just a convention used here to make the XSLT more
self-documenting.
</p>
</blockquote>

<p>The interesting part of this stylesheet involves construction of the
tree of messages. Since messages in the XML are hierarchical, the
XSLT must recursively process the data to properly show threads of
discussion. Here is another look at a portion of the
<em class="filename">viewMonth.xml</em> file presented earlier in this
chapter:
</p>

<blockquote><pre class="code">&lt;viewMonth month="1" year="2001"&gt;
  &lt;board id="1"&gt;
    &lt;name&gt;Java Programming&lt;/name&gt;
    &lt;description&gt;General programming questions about Java.&lt;/description&gt;
  &lt;/board&gt;<tt class="userinput"><b>
  &lt;message id="1" day="1"&gt;</b></tt>
    &lt;subject&gt;First test message&lt;/subject&gt;
    &lt;authorEmail&gt;burke_e@yahoo.com&lt;/authorEmail&gt;<tt class="userinput"><b>
    &lt;message id="2" day="2"&gt;</b></tt>
      &lt;subject&gt;Re: First test message&lt;/subject&gt;
      &lt;authorEmail&gt;aidan@nowhere.com&lt;/authorEmail&gt;<tt class="userinput"><b>
    &lt;/message&gt;</b></tt><tt class="userinput"><b>
  &lt;/message&gt;</b></tt><tt class="userinput"><b>
  &lt;message id="3" day="4"&gt;</b></tt>
    &lt;subject&gt;Another test message&lt;/subject&gt;
    &lt;authorEmail&gt;burke_e@yahoo.com&lt;/authorEmail&gt;<tt class="userinput"><b>
  &lt;/message&gt;</b></tt>
&lt;/viewMonth&gt;</pre></blockquote>

<p>In the XSLT stylesheet, the first part of the recursive process
selects all <tt class="literal">&lt;message&gt;</tt> elements occurring
immediately below the <tt class="literal">&lt;viewMonth&gt;</tt> element:
</p>

<blockquote><pre class="code">&lt;xsl:apply-templates select="viewMonth/message"/&gt;</pre></blockquote>

<p>This selects messages with ids <tt class="literal">1</tt> and
<tt class="literal">3</tt>, causing the following template to be
instantiated:
</p>

<blockquote><pre class="code">&lt;xsl:template match="message"&gt;
  &lt;xsl:param name="indent" select="0"/&gt;</pre></blockquote>

<p>This template takes a parameter for the level of indentation. If the
parameter is not specified, as in this first usage, it defaults to
<tt class="literal">0</tt>. This code is followed by very basic XSLT code
to produce a one-line summary of the current message, and then the
template recursively instantiates itself:
</p>

<blockquote><pre class="code">&lt;xsl:apply-templates select="message"&gt;
  &lt;xsl:with-param name="indent" select="$indent + 1"/&gt;
&lt;/xsl:apply-templates&gt;</pre></blockquote>

<p>This efficiently selects all <tt class="literal">&lt;message&gt;</tt>
elements that occur immediately within the current message and
increments the indentation by <tt class="literal">1</tt>. This allows the
stylesheet to indent replies appropriately. The recursive process
continues until no messages remain.
</p>

<p>Another stylesheet, <em class="filename">viewMsg.xslt</em>, is responsible
for displaying a single message. This is a simple XSLT stylesheet and
can be found in <a href="appa_01.htm">Appendix A, "Discussion Forum Code"</a>. The only remaining
stylesheet, <em class="filename">postMsg.xslt</em>, is shown in <a href="ch07_02.htm">Example 7-10</a>. This stylesheet supports two modes of
operation. Therefore, it is more complicated than the previous
examples.<a name="INDEX-810" />
<a name="INDEX-811" />
</p>

<a name="javaxslt-CHP-7-EX-10" /><div class="example">
<h4 class="objtitle">Example 7-10. XSLT for the Post/Reply message page </h4>
<blockquote><pre class="code">&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;!--
***********************************************************
** postMsg.xslt
**
** Creates the "Post New Message" XHTML page and the
** "Reply to Message" XHTML page.
***********************************************************
--&gt;
&lt;xsl:stylesheet version="1.0" 
  xmlns:xsl="http://www.w3.org/1999/XSL/Transform"&gt;
  &lt;xsl:import href="utils.xslt"/&gt;
  
  &lt;!-- pass the root directory as a parameter, thus
       allowing this stylesheet to refer to the CSS file --&gt;
  &lt;xsl:param name="rootDir" select="'../docroot/'"/&gt;
  
  &lt;xsl:output method="xml" version="1.0" encoding="UTF-8" 
    indent="yes" 
    doctype-public="-//W3C//DTD XHTML 1.0 Strict//EN" 
    doctype-system="http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd"/&gt;

  &lt;!-- ===== Global Variables ===== --&gt;
  &lt;xsl:variable name="global.subject" select="/postMsg/prefill/subject"/&gt;
  &lt;xsl:variable name="global.email" select="/postMsg/prefill/authorEmail"/&gt;
  &lt;xsl:variable name="global.message" select="/postMsg/prefill/message"/&gt;
  
  <tt class="userinput"><b>&lt;xsl:variable name="global.title"&gt;
    &lt;xsl:choose&gt;
      &lt;xsl:when test="/postMsg/inResponseTo"&gt;
        &lt;xsl:text&gt;Reply to Message&lt;/xsl:text&gt;
      &lt;/xsl:when&gt;
      &lt;xsl:otherwise&gt;
        &lt;xsl:text&gt;Post New Message&lt;/xsl:text&gt;
      &lt;/xsl:otherwise&gt;
    &lt;/xsl:choose&gt;
  &lt;/xsl:variable&gt;</b></tt>
    
  &lt;!--
  **********************************************************
  ** Create the XHTML web page
  *******************************************************--&gt;
  &lt;xsl:template match="/"&gt;
    &lt;html xmlns="http://www.w3.org/1999/xhtml"&gt;
      &lt;head&gt;
        &lt;title&gt;&lt;xsl:value-of select="$global.title"/&gt;&lt;/title&gt;
        &lt;link href="{$rootDir}forum.css"
            rel="stylesheet" type="text/css"/&gt;
      &lt;/head&gt;
      &lt;body&gt;
        &lt;!-- show the page title and board name --&gt;
        &lt;div class="box1"&gt;
          &lt;h1&gt;&lt;xsl:value-of select="$global.title"/&gt;&lt;/h1&gt;
          &lt;div&gt;
            &lt;xsl:value-of select="postMsg/board/name"/&gt;
          &lt;/div&gt;
        &lt;/div&gt;
        &lt;xsl:apply-templates select="postMsg/inResponseTo"/&gt;
        
        &lt;div class="box2"&gt;
          &lt;!-- optionally display error message --&gt;
          &lt;xsl:if test="postMsg/error/@code='ALL_FIELDS_REQUIRED'"&gt;
            &lt;p class="error"&gt;All fields are required...&lt;/p&gt;
          &lt;/xsl:if&gt;
          
          &lt;!-- Create an XHTML form. The user will provide
               the subject, and Email address, and 
               the message text --&gt;
          &lt;form method="post" action="postMsg"&gt;
            &lt;div&gt;
            &lt;input type="hidden" name="boardID" 
                value="{postMsg/board/@id}"/&gt;
            
            <tt class="userinput"><b>&lt;!-- Determine the mode of operation --&gt;
            &lt;xsl:choose&gt;
              &lt;xsl:when test="/postMsg/inResponseTo"&gt;
                &lt;input type="hidden" name="origMsgID"
                         value="{postMsg/inResponseTo/@id}"/&gt;
                &lt;input type="hidden" name="mode" value="replyToMsg"/&gt;
              &lt;/xsl:when&gt;
              &lt;xsl:otherwise&gt;
                &lt;input type="hidden" name="mode" value="postNewMsg"/&gt;
              &lt;/xsl:otherwise&gt;
            &lt;/xsl:choose&gt;</b></tt>
            &lt;/div&gt;
            
            &lt;!-- Show the input fields in a table to
                 keep things aligned properly --&gt;
            &lt;table&gt;
              &lt;tr&gt;
                &lt;td&gt;Subject:&lt;/td&gt;
                &lt;td&gt;
                  &lt;input type="text" name="msgSubject" 
                      value="{$global.subject}" size="60" maxlength="70"/&gt;
                &lt;/td&gt;
              &lt;/tr&gt;
              &lt;tr&gt;
                &lt;td nowrap="nowrap"&gt;Your Email:&lt;/td&gt;
                &lt;td&gt;
                  &lt;input type="text" name="authorEmail" 
                      value="{$global.email}" size="60" maxlength="70"/&gt;
                &lt;/td&gt;
              &lt;/tr&gt;
              &lt;tr valign="top"&gt;
                &lt;td&gt;Message:&lt;/td&gt;
                &lt;td&gt;
                  &lt;!-- xsl:text prevents the XSLT processor from collapsing to
                       &lt;textarea/&gt;, which caused problems with many browsers. --&gt;
                  &lt;textarea name="msgText" wrap="hard" rows="12" 
                      cols="60"&gt;&lt;xsl:value-of 
                      select="$global.message"/&gt;&lt;xsl:text&gt; &lt;/xsl:text&gt;&lt;/textarea&gt;
                &lt;/td&gt;
              &lt;/tr&gt;
              &lt;!-- The last table row contains a submit
                   and cancel button --&gt;
              &lt;tr&gt;
                &lt;td&gt; &lt;/td&gt;
                &lt;td&gt;
                  &lt;input type="submit" name="submitBtn" value="Submit"/&gt;
                  &lt;input type="submit" name="cancelBtn" value="Cancel"/&gt;
                &lt;/td&gt;
              &lt;/tr&gt;
            &lt;/table&gt;
          &lt;/form&gt;
        &lt;/div&gt;
      &lt;/body&gt;
    &lt;/html&gt;
  &lt;/xsl:template&gt;
  
  &lt;!--
  **********************************************************
  ** Show the text: 'In Response to: Msg Subject'
  *******************************************************--&gt;  
  &lt;xsl:template match="inResponseTo"&gt;
    &lt;div&gt;
      In Response to:
      &lt;span style="font-weight: bold;"&gt;
      &lt;xsl:value-of select="subject"/&gt;
      &lt;/span&gt;
    &lt;/div&gt;
  &lt;/xsl:template&gt;
&lt;/xsl:stylesheet&gt; </pre></blockquote>
</div>

<p>Since this stylesheet must work for posting new messages as well as
for replying to messages, it must determine the appropriate mode of
operation. This can be accomplished by checking for the existence of
elements that occur only in one mode or the other. For example, the
<tt class="literal">&lt;inResponseTo&gt;</tt> XML element occurs only when
the user replies to an existing message. Therefore, the XSLT
stylesheet can define a variable for the page title as follows:
</p>

<blockquote><pre class="code">&lt;xsl:variable name="global.title"&gt;
  &lt;xsl:choose&gt;
    &lt;xsl:when test="/postMsg/inResponseTo"&gt;
      &lt;xsl:text&gt;Reply to Message&lt;/xsl:text&gt;
    &lt;/xsl:when&gt;
    &lt;xsl:otherwise&gt;
      &lt;xsl:text&gt;Post New Message&lt;/xsl:text&gt;
    &lt;/xsl:otherwise&gt;
  &lt;/xsl:choose&gt;
&lt;/xsl:variable&gt;</pre></blockquote>

<p><tt class="literal">&lt;xsl:when test="/postMsg/inResponseTo"&gt;</tt>
returns <tt class="literal">true</tt> when the
<tt class="literal">&lt;inResponseTo&gt;</tt> element exists in the
original XML data. In this case, the <tt class="literal">global.title</tt>
variable is set to "Reply to Message." Otherwise, the
title defaults to "Post New Message."
</p>

<p>This stylesheet optionally displays an error message when the user
partially fills out the XHTML form and submits the data. The servlet
redisplays the page with an error message, allowing the user to fix
the problem. It does this by inserting the following XML element into
the data:
</p>

<blockquote><pre class="code">&lt;error code="ALL_FIELDS_REQUIRED"/&gt;</pre></blockquote>

<p>The XSLT stylesheet tests for the existence of this element as
follows:
</p>

<blockquote><pre class="code">&lt;xsl:if test="postMsg/error/@code='ALL_FIELDS_REQUIRED'"&gt;
   &lt;p class="error"&gt;All fields are required...&lt;/p&gt;
&lt;/xsl:if&gt;</pre></blockquote>

<p>An additional trick used in this stylesheet involves its interaction
with a servlet. When the user submits the XHTML form data, the
servlet must determine which mode of operation the user was in. For
this task, the servlet looks for a request parameter called
<tt class="literal">mode</tt>. Legal values for this parameter are
<tt class="literal">replyToMsg</tt> and <tt class="literal">postNewMsg</tt>.
Since the user is submitting an XHTML form, the easiest way to pass
this data is via a hidden form field named <tt class="literal">mode</tt>.
Here is the code that does the work:
</p>

<blockquote><pre class="code">&lt;xsl:choose&gt;
  &lt;xsl:when test="/postMsg/inResponseTo"&gt;
    &lt;input type="hidden" name="origMsgID"
         value="{postMsg/inResponseTo/@id}"/&gt;
    &lt;input type="hidden" name="mode" value="replyToMsg"/&gt;
  &lt;/xsl:when&gt;
  &lt;xsl:otherwise&gt;
    &lt;input type="hidden" name="mode" value="postNewMsg"/&gt;
  &lt;/xsl:otherwise&gt;
&lt;/xsl:choose&gt;</pre></blockquote>

<p>The stylesheet also inserts a hidden form field that contains the
original message ID whenever the mode is
<tt class="literal">replyToMsg</tt>. On the servlet side, the code looks
something like this:
</p>

<a name="INDEX-812" /><a name="INDEX-813" /><a name="INDEX-814" /><a name="INDEX-815" /><blockquote><pre class="code">public void doGet(HttpServletRequest request, HttpServletResponse response) ... {
    String mode = request.getParameter("mode");
    if ("replyToMsg".equals(mode)) {
        String origMsgID = request.getParameter("origMsgID");
        ....

</pre></blockquote>

</div>


<hr width="684" align="left" />
<div class="navbar"><table width="684" border="0"><tr><td align="left" valign="top" width="228"><a href="ch07_01.htm"><img src="../gifs/txtpreva.gif" alt="Previous" border="0" /></a></td><td align="center" valign="top" width="228"><a href="index.htm"><img src="../gifs/txthome.gif" alt="Home" border="0" /></a></td><td align="right" valign="top" width="228"><a href="ch07_03.htm"><img src="../gifs/txtnexta.gif" alt="Next" border="0" /></a></td></tr><tr><td align="left" valign="top" width="228">7. Discussion Forum</td><td align="center" valign="top" width="228"><a href="index/index.htm"><img src="../gifs/index.gif" alt="Book Index" border="0" /></a></td><td align="right" valign="top" width="228">7.3. Making the XML Dynamic</td></tr></table></div>
<hr width="684" align="left" />

<img src="../gifs/navbar.gif" usemap="#library-map" border="0" alt="Library Navigation Links" />
<p><p><font size="-1"><a href="copyrght.htm">Copyright &copy; 2002</a> O'Reilly &amp; Associates. All rights reserved.</font></p>

<map name="library-map"><area shape="rect" coords="0,0,85,93" href="../index.htm"><area shape="rect" coords="85,0,180,98" href="../sax2/index.htm"><area shape="rect" coords="182,-1,261,100" href="../xmlnut/index.htm"><area shape="rect" coords="263,1,384,96" href="../jxml/index.htm"><area shape="rect" coords="386,1,463,100" href="index.htm"><area shape="rect" coords="466,1,533,112" href="../xslt/index.htm"><area shape="rect" coords="535,-1,610,108" href="../schema/index.htm"><area shape="rect" coords="613,1,696,121" href="../pxml/index.htm"></map>

</body></html>