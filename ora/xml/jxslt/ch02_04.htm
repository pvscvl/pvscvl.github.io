<html><head><title>XPath Basics (Java and XSLT)</title><link rel="stylesheet" type="text/css" href="../style/style1.css" />

<meta name="DC.Creator" content="Eric M. Burke" /><meta name="DC.Format" content="text/xml" scheme="MIME" /><meta name="DC.Language" content="en-US" /><meta name="DC.Publisher" content="O'Reilly &amp; Associates, Inc." /><meta name="DC.Source" scheme="ISBN" content="0596001453L" /><meta name="DC.Subject.Keyword" content="stuff" /><meta name="DC.Title" content="Java and XSLT" /><meta name="DC.Type" content="Text.Monograph" />

</head><body bgcolor="#ffffff">

<img src="gifs/smbanner.gif" usemap="#banner-map" border="0" alt="Book Home" /><map name="banner-map"><area shape="rect" coords="1,-2,616,66" href="index.htm" alt="Java and XSLT" /><area shape="rect" coords="629,-11,726,25" href="jobjects/fsearch.htm" alt="Search this book" /></map>

<div class="navbar"><table width="684" border="0"><tr><td align="left" valign="top" width="228"><a href="ch02_03.htm"><img src="../gifs/txtpreva.gif" alt="Previous" border="0" /></a></td><td align="center" valign="top" width="228" /><td align="right" valign="top" width="228"><a href="ch02_05.htm"><img src="../gifs/txtnexta.gif" alt="Next" border="0" /></a></td></tr></table></div>



<h2 class="sect1">2.4. XPath Basics</h2>

<p><a name="INDEX-256" />XPath
is another recommendation from the W3C and is designed for use by
XSLT and another technology called XPointer. The primary goal of
XPath is to define a mechanism for addressing portions of an XML
document, which means it is used for locating element nodes,
attribute nodes, text nodes, and anything else that can occur in an
XML document. XPath treats these nodes as part of a tree structure
rather than dealing with XML as a text string. XSLT also relies on
the tree structure that XPath defines. In addition to addressing,
XPath contains a set of functions to format text, convert to and from
numbers, and deal with booleans.
</p>

<p>Unlike XSLT,
<a name="INDEX-257" />XPath
itself is not expressed using XML syntax. A simplified syntax makes
sense when you consider that XPath is most commonly used inside of
attribute values within other XML documents. XPath includes both a
verbose syntax and a set of abbreviations, which end up looking a lot
like path names on a file system or web site.
</p>

<a name="javaxslt-CHP-2-SECT-4.1" /><div class="sect2">
<h3 class="sect2">2.4.1. How XSLT Uses XPath</h3>

<p>XSLT uses <a name="INDEX-258" /> <a name="INDEX-259" />XPath in three basic ways:
</p>

<ul><li>
<p><a name="INDEX-260" /> <a name="INDEX-261" />To select and match patterns in the
original XML data. Using XPath in this manner is the focus of this
chapter. You see this most often in <tt class="literal">&lt;xsl:template
match="pattern"&gt;</tt> and <tt class="literal">&lt;xsl:apply-templates
select="node-set-expression"/&gt;</tt>. In either case, XPath
syntax is used to locate various types of nodes.
</p>
</li><li>
<p>To support conditional processing. We will see the exact syntax of
<tt class="literal">&lt;xsl:if&gt;</tt> and
<tt class="literal">&lt;xsl:choose&gt;</tt> in the next chapter, both of
which rely on XPath's ability to represent boolean values of
<tt class="literal">true</tt> and <tt class="literal">false</tt>.
</p>
</li><li>
<p>To generate text. A number of string formatting instructions are
provided, giving you the ability to concatenate strings, manipulate
substrings, and convert from other data types to strings. Again, this
will be covered in the next chapter.
</p>
</li></ul>
</div>
<a name="javaxslt-CHP-2-SECT-4.2" /><div class="sect2">
<h3 class="sect2">2.4.2. Axes</h3>

<p><a name="INDEX-262" />Whenever
XSLT uses XPath, something in the XML data is considered to be the
current context node.
<a name="INDEX-263" /> <a name="INDEX-264" />XPath defines seven different types of
nodes, each representing a different part of the XML data. These are
the document root, elements, text, attributes, processing
instructions, comments, and nodes representing namespaces. An axis
represents a relationship to the current context node, which may be
any one of the preceding seven items.
</p>

<p>A few examples should clear things up. One axis is
<tt class="literal">child</tt><a name="INDEX-265" />, representing all immediate children of
the context node. From our earlier <em class="filename">schedule.xml</em>
example, the <tt class="literal">child</tt> axis of
<tt class="literal">&lt;name&gt;</tt> includes the
<tt class="literal">&lt;first&gt;</tt> and <tt class="literal">&lt;last&gt;</tt>
elements. Another axis is
<tt class="literal">parent</tt><a name="INDEX-266" />, which represents the immediate parent of
the context node. In many cases the axis is empty. For example, the
document root node has no <tt class="literal">parent</tt> axis. <a href="ch02_04.htm">Figure 2-4</a> illustrates some of the other axes.
</p>

<a name="javaxslt-CHP-2-FIG-4" /><div class="figure"><img src="figs/jxt_0204.gif" alt="Figure 2-4" width="380" height="393" /></div><h4 class="objtitle">Figure 2-4. XPath axes</h4>

<p>As you can see, the second <tt class="literal">&lt;department&gt;</tt>
element is the context node. The diagram illustrates how some of the
more common axes relate to this node. Although the names are
singular, in most cases the axes represent node sets rather than
individual nodes. The code:
</p>

<blockquote><pre class="code">&lt;xsl:apply-templates select="child::team"/&gt;</pre></blockquote>

<p>selects all <tt class="literal">&lt;team&gt;</tt> children, not just the
first one. <a href="ch02_04.htm">Table 2-1</a> lists the available axes in
alphabetical order, along with a brief description of each.
</p>

<a name="javaxslt-CHP-2-TABLE-1" /><h4 class="objtitle">Table 2-1. Axes summary </h4><table border="1" cellpadding="3">



<tr>
<th>
<p>Axis name</p>
</th>
<th>
<p>Description</p>
</th>
</tr>


<tr>
<td>
<blockquote><pre class="code">ancestor</pre></blockquote>
</td>
<td>
<p>The parent of the context node, its parent, and so on until the root
node is reached. The ancestor of the root is an empty node set.
</p>
</td>
</tr>
<tr>
<td>
<blockquote><pre class="code">ancestor-or-self</pre></blockquote>
</td>
<td>
<p>The same as <tt class="literal">ancestor</tt>, with the addition of the
context node. The root node is always included.
</p>
</td>
</tr>
<tr>
<td>
<blockquote><pre class="code">attribute</pre></blockquote>
</td>
<td>
<p>All attributes of the context node.</p>
</td>
</tr>
<tr>
<td>
<blockquote><pre class="code">child</pre></blockquote>
</td>
<td>
<p>All immediate children of the context node. Attributes and namespace
nodes are not included.
</p>
</td>
</tr>
<tr>
<td>
<blockquote><pre class="code">descendant</pre></blockquote>
</td>
<td>
<p>All children, grandchildren, and so forth. Attribute and namespace
nodes are not considered descendants of element nodes.
</p>
</td>
</tr>
<tr>
<td>
<blockquote><pre class="code">descendant-or-self</pre></blockquote>
</td>
<td>
<p>Same as <tt class="literal">descendant</tt>, with the addition of the
context node.
</p>
</td>
</tr>
<tr>
<td>
<blockquote><pre class="code">following</pre></blockquote>
</td>
<td>
<p>All elements in the document that occur after the context node.
Descendants of the context node are not included.
</p>
</td>
</tr>
<tr>
<td>
<blockquote><pre class="code">following-sibling</pre></blockquote>
</td>
<td>
<p>All following nodes in the document that have the same parent as the
context node.
</p>
</td>
</tr>
<tr>
<td>
<blockquote><pre class="code">namespace</pre></blockquote>
</td>
<td>
<p>The namespace nodes of the context node.</p>
</td>
</tr>
<tr>
<td>
<blockquote><pre class="code">parent</pre></blockquote>
</td>
<td>
<p>The immediate parent of the context node, if a parent exists.</p>
</td>
</tr>
<tr>
<td>
<blockquote><pre class="code">preceding</pre></blockquote>
</td>
<td>
<p>All nodes in the document that occur before the context node, except
for ancestors, attribute nodes, and namespace nodes.
</p>
</td>
</tr>
<tr>
<td>
<blockquote><pre class="code">preceding-sibling</pre></blockquote>
</td>
<td>
<p>All nodes in the document that occur before the context node and have
the same parent. This axis is empty if the context node is an
attribute node or a namespace node.
</p>
</td>
</tr>
<tr>
<td>
<blockquote><pre class="code">self</pre></blockquote>
</td>
<td>
<p>The context node itself.</p>
</td>
</tr>

</table><p>

</div>
<a name="javaxslt-CHP-2-SECT-4.3" /><div class="sect2">
<h3 class="sect2">2.4.3. Location Steps</h3>

<p>As you may have guessed, an axis alone is only a piece of the puzzle.
A <em class="emphasis">location step</em><a name="INDEX-267" /> is a more complex construct used by XPath
and XSLT to select a node set from the XML data. Location steps have
the following syntax:
</p>

<blockquote><pre class="code">axis::node-test[predicate-1]...[predicate-n]</pre></blockquote>

<p>The axis and node-test are separated by double colons and are
followed by zero or more predicates. As mentioned, the job of the
axis is to specify the relationship between the context node and the
node-test. The node-test allows you to specify the type of node that
will be selected, and the predicates filter the resulting node set.
</p>

<p>Once again, discussion of XSLT and XPath tends to sound overly
technical until you see a few basic examples. Let's start with
a basic fragment of XML:
</p>

<blockquote><pre class="code">&lt;message&gt;<tt class="userinput"><b>
  &lt;header&gt; &lt;!-- the context node --&gt;</b></tt>
    &lt;subject&gt;Hello, World&lt;/subject&gt;
    &lt;date mm="03" dd="01" yy="2002"/&gt;
    &lt;sender&gt;pres@whitehouse.gov&lt;/sender&gt;
    &lt;recipient&gt;burke_e@ociweb.com&lt;/recipient&gt;
    &lt;recipient&gt;burke_e@yahoo.com&lt;/recipient&gt;
    &lt;recipient&gt;aidan@burke.com&lt;/recipient&gt;
  &lt;/header&gt;
  &lt;body&gt;
    ...
  &lt;/body&gt;
&lt;/message&gt;</pre></blockquote>

<p>If the <tt class="literal">&lt;header&gt;</tt> is the context node, then
<tt class="literal">child::subject</tt> will select the
<tt class="literal">&lt;subject&gt;</tt> node,
<tt class="literal">child::recipient</tt> will select the set of all
<tt class="literal">&lt;recipient&gt;</tt> nodes, and
<tt class="literal">child::*</tt> will select all children of
<tt class="literal">&lt;header&gt;</tt>. The asterisk
(<tt class="literal">*</tt><a name="INDEX-268" />) character is a wildcard that
represents all nodes of the <em class="filename">principal node
type</em><a name="INDEX-269" />. Each axis has a principal node type,
which is always <tt class="literal">element</tt> unless the axis is
<tt class="literal">attribute</tt> or <tt class="literal">namespace</tt>. If
<tt class="literal">&lt;date&gt;</tt> is the context node, then
<tt class="literal">attribute::yy</tt> will select the
<tt class="literal">yy</tt> attribute, and <tt class="literal">attribute::*</tt>
will select all attributes of the <tt class="literal">&lt;date&gt;</tt>
element.
</p>

<p>Without any predicates, a location step can result in zero or more
nodes. Adding a predicate simply filters the resulting node set,
generally reducing the size of the resulting node set. Adding
additional predicates applies additional filters. For example,
<tt class="literal">child::recipient[position( )=1]</tt> will initially
select all <tt class="literal">&lt;recipient&gt;</tt> elements from the
previous example then filter (reduce) the list down to the first one:
<tt class="literal">burke_e@ociweb.com</tt>. Positions start at 1, rather
than 0. As <a href="ch02_04.htm">Example 2-8</a> will show, predicates can
contain any XPath expression and can become quite
sophisticated.<a name="INDEX-270" /> 
</p>

</div>
<a name="javaxslt-CHP-2-SECT-4.4" /><div class="sect2">
<h3 class="sect2">2.4.4. Location Paths</h3>

<p><em class="emphasis">Location paths</em><a name="INDEX-271" /> consist of one or more location steps,
separated by slash (<tt class="literal">/</tt>) characters. An absolute
location path begins with the slash (<tt class="literal">/</tt>) character
and is relative to the document root. All other types of location
paths are relative to the context node. Paths are evaluated from left
to right, just like a path in a file system or a web site. The XML
shown in <a href="ch02_04.htm">Example 2-7</a> is a portion of a larger file
containing basic information about U.S. presidents. This is used to
demonstrate a few more XSLT and XPath examples.
</p>

<a name="javaxslt-CHP-2-EX-7" /><div class="example">
<h4 class="objtitle">Example 2-7. presidents.xml </h4>
<blockquote><pre class="code">&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;?xml-stylesheet type="text/xsl" href="xpathExamples.xslt"?&gt;
&lt;presidents&gt;
  &lt;president&gt;
    &lt;term from="1789" to="1797"/&gt;
    &lt;name&gt;
      &lt;first&gt;George&lt;/first&gt;
      &lt;last&gt;Washington&lt;/last&gt;
    &lt;/name&gt;
    &lt;party&gt;Federalist&lt;/party&gt;
    &lt;vicePresident&gt;
      &lt;name&gt;
        &lt;first&gt;John&lt;/first&gt;
        &lt;last&gt;Adams&lt;/last&gt;
      &lt;/name&gt;
    &lt;/vicePresident&gt;
  &lt;/president&gt;
  &lt;president&gt;
    &lt;term from="1797" to="1801"/&gt;
    &lt;name&gt;
      &lt;first&gt;John&lt;/first&gt;
      &lt;last&gt;Adams&lt;/last&gt;
    &lt;/name&gt;
    &lt;party&gt;Federalist&lt;/party&gt;
    &lt;vicePresident&gt;
      &lt;name&gt;
        &lt;first&gt;Thomas&lt;/first&gt;
        &lt;last&gt;Jefferson&lt;/last&gt;
      &lt;/name&gt;
    &lt;/vicePresident&gt;
  &lt;/president&gt;
    /**
    * remaining presidents omitted
    */</pre></blockquote>
</div>

<p>The complete file is too long to list here but is included with the
downloadable files for this book. The
<tt class="literal">&lt;vicePresident&gt;</tt> element can occur many times
or not at all because some presidents did not have vice presidents.
Names can also contain optional <tt class="literal">&lt;middle&gt;</tt>
elements. Using this XML data, the XSLT stylesheet in <a href="ch02_04.htm">Example 2-8</a> shows several location paths.
</p>

<a name="javaxslt-CHP-2-EX-8" /><div class="example">
<h4 class="objtitle">Example 2-8. Location paths </h4>
<blockquote><pre class="code">&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;xsl:stylesheet version="1.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform"&gt;
  &lt;xsl:output method="html" /&gt;
  &lt;xsl:template match="/"&gt;
    &lt;html&gt;
    &lt;body&gt;
    &lt;h1&gt;XPath Examples&lt;/h1&gt;
    
    The third president was:
    &lt;ul&gt;
      <tt class="userinput"><b>&lt;xsl:apply-templates select="presidents/president[position( ) = 3]/name"/&gt;</b></tt>
    &lt;/ul&gt;
    
    Presidents without vice presidents were:
    &lt;ul&gt;
      &lt;xsl:apply-templates 
          <tt class="userinput"><b>select="presidents/president[count(vicePresident) = 0]/name"/&gt;</b></tt>
    &lt;/ul&gt;
    
    Presidents elected before 1800 were:
    &lt;ul&gt;
      &lt;xsl:apply-templates
          <tt class="userinput"><b>select="presidents/president[term/@from &amp;lt; 1800]/name"/&gt;</b></tt>
    &lt;/ul&gt;

    Presidents with more than one vice president were:
    &lt;ul&gt;
      &lt;xsl:apply-templates
          <tt class="userinput"><b>select="descendant::president[count(vicePresident) &gt; 1]/name"/&gt;</b></tt>
    &lt;/ul&gt;
    
    Presidents named John were:
    &lt;ul&gt;
      &lt;xsl:apply-templates
          <tt class="userinput"><b>select="presidents/president/name[child::first='John']"/&gt;</b></tt>
    &lt;/ul&gt;
    
    Presidents elected between 1800 and 1850 were:
    &lt;ul&gt;
      &lt;xsl:apply-templates
           <tt class="userinput"><b>select="presidents/president[(term/@from &gt; 1800) and 
                   (term/@from &amp;lt; 1850)]/name"/&gt;</b></tt>
    &lt;/ul&gt;

    &lt;/body&gt;
    &lt;/html&gt;
  &lt;/xsl:template&gt;
  

  &lt;xsl:template match="name"&gt;
    &lt;li&gt;
      &lt;xsl:value-of select="first"/&gt;
      &lt;xsl:text&gt; &lt;/xsl:text&gt;
      &lt;xsl:value-of select="middle"/&gt;
      &lt;xsl:text&gt; &lt;/xsl:text&gt;
      &lt;xsl:value-of select="last"/&gt;
    &lt;/li&gt;
  &lt;/xsl:template&gt;
&lt;/xsl:stylesheet&gt;</pre></blockquote>
</div>

<p>In the first <tt class="literal">&lt;xsl:apply-templates&gt;</tt> element,
the location path is as follows:
</p>

<blockquote><pre class="code">presidents/president[position( ) = 3]/name</pre></blockquote>

<p>This path consists of three location steps separated by slash
(<tt class="literal">/</tt>) characters, but the final step is what we want
to select. This path is read from left to right, so it first selects
the <tt class="literal">&lt;presidents&gt;</tt> children of the current
context. The next step is relative to the
<tt class="literal">&lt;presidents&gt;</tt> context and selects all
<tt class="literal">&lt;president&gt;</tt> children. It then filters the
list according to the predicate. The third
<tt class="literal">&lt;president&gt;</tt> element is now the context, and
its <tt class="literal">&lt;name&gt;</tt> children are selected. Since each
president has only one <tt class="literal">&lt;name&gt;</tt>, the template
that matches <tt class="literal">"name"</tt> is instantiated only once.
</p>

<p>This location path shows how to perform basic numeric comparisons:</p>

<blockquote><pre class="code">presidents/president[term/@from &amp;lt; 1800]/name</pre></blockquote>

<p>Since the less-than (<tt class="literal">&lt;</tt>) character cannot appear
in an XML attribute value, the <tt class="literal">&amp;lt;</tt> entity
must be substituted. In this particular example, we use the
<tt class="literal">@</tt> abbreviated syntax to represent the attribute
axis.
</p>

</div>
<a name="javaxslt-CHP-2-SECT-4.5" /><div class="sect2">
<h3 class="sect2">2.4.5. Abbreviated Syntax</h3>

<p><a name="INDEX-272" />Using <tt class="literal">descendant::</tt>,
<tt class="literal">child::</tt>, <tt class="literal">parent::</tt>, and other
axes is very verbose, requiring a lot of typing. Fortunately, XPath
supports an abbreviated syntax for many of these axes that requires a
lot less effort. The abbreviated syntax has the added advantage in
that it looks like you are navigating the file system, so it tends to
be somewhat more intuitive. <a href="ch02_04.htm">Table 2-2</a> compares the
abbreviated syntax to the verbose syntax. The abbreviated syntax is
almost always used and will be used throughout the remainder of this
book.
</p>

<a name="javaxslt-CHP-2-TABLE-2" /><h4 class="objtitle">Table 2-2. Abbreviated syntax </h4><table border="1" cellpadding="3">



<tr>
<th>
<p>Abbreviation</p>
</th>
<th>
<p>Axis</p>
</th>
</tr>


<tr>
<td>
<blockquote><pre class="code">//</pre></blockquote>
</td>
<td>
<blockquote><pre class="code">descendant</pre></blockquote>
</td>
</tr>
<tr>
<td>
<blockquote><pre class="code">.</pre></blockquote>
</td>
<td>
<blockquote><pre class="code">self</pre></blockquote>
</td>
</tr>
<tr>
<td>
<blockquote><pre class="code">..</pre></blockquote>
</td>
<td>
<blockquote><pre class="code">parent</pre></blockquote>
</td>
</tr>
<tr>
<td>
<blockquote><pre class="code">@</pre></blockquote>
</td>
<td>
<blockquote><pre class="code">attribute</pre></blockquote>
</td>
</tr>
<tr>
<td>
&nbsp;
</td>
<td>
<blockquote><pre class="code">child</pre></blockquote>
</td>
</tr>

</table><p>

<p>In the last row, the abbreviation for the child axis is blank,
indicating that <tt class="literal">child::</tt> is an implicit part of a
location step. This means that <tt class="literal">vicePresident/name</tt>
is equivalent to <tt class="literal">child::vicePresident/child::name</tt>.
Additional explanations follow:
</p>

<ul><li>
<p><tt class="literal">vicePresident</tt> selects the
<tt class="literal">vicePresident</tt> children of the context node.
</p>
</li><li>
<p><tt class="literal">vicePresident/name</tt> selects all
<tt class="literal">name</tt> children of <tt class="literal">vicePresident</tt>
children of the context node.
</p>
</li><li>
<p><tt class="literal">//name</tt> selects all <tt class="literal">name</tt>
descendants of the context node.
</p>
</li><li>
<p><tt class="literal">.</tt> selects the context node.</p>
</li><li>
<p><tt class="literal">../term/@from</tt> selects the <tt class="literal">from</tt>
attribute of <tt class="literal">term</tt> children of the context
node's parent.<a name="INDEX-273" /> 
</p>
</li></ul>
</div>


<hr width="684" align="left" />
<div class="navbar"><table width="684" border="0"><tr><td align="left" valign="top" width="228"><a href="ch02_03.htm"><img src="../gifs/txtpreva.gif" alt="Previous" border="0" /></a></td><td align="center" valign="top" width="228"><a href="index.htm"><img src="../gifs/txthome.gif" alt="Home" border="0" /></a></td><td align="right" valign="top" width="228"><a href="ch02_05.htm"><img src="../gifs/txtnexta.gif" alt="Next" border="0" /></a></td></tr><tr><td align="left" valign="top" width="228">2.3. Another XSLT Example, Using XHTML</td><td align="center" valign="top" width="228"><a href="index/index.htm"><img src="../gifs/index.gif" alt="Book Index" border="0" /></a></td><td align="right" valign="top" width="228">2.5. Looping and Sorting</td></tr></table></div>
<hr width="684" align="left" />

<img src="../gifs/navbar.gif" usemap="#library-map" border="0" alt="Library Navigation Links" />
<p><p><font size="-1"><a href="copyrght.htm">Copyright &copy; 2002</a> O'Reilly &amp; Associates. All rights reserved.</font></p>

<map name="library-map"><area shape="rect" coords="0,0,85,93" href="../index.htm"><area shape="rect" coords="85,0,180,98" href="../sax2/index.htm"><area shape="rect" coords="182,-1,261,100" href="../xmlnut/index.htm"><area shape="rect" coords="263,1,384,96" href="../jxml/index.htm"><area shape="rect" coords="386,1,463,100" href="index.htm"><area shape="rect" coords="466,1,533,112" href="../xslt/index.htm"><area shape="rect" coords="535,-1,610,108" href="../schema/index.htm"><area shape="rect" coords="613,1,696,121" href="../pxml/index.htm"></map>

</body></html>