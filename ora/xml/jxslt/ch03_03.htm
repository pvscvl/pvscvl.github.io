<html><head><title>Combining Multiple Stylesheets (Java and XSLT)</title><link rel="stylesheet" type="text/css" href="../style/style1.css" />

<meta name="DC.Creator" content="Eric M. Burke" /><meta name="DC.Format" content="text/xml" scheme="MIME" /><meta name="DC.Language" content="en-US" /><meta name="DC.Publisher" content="O'Reilly &amp; Associates, Inc." /><meta name="DC.Source" scheme="ISBN" content="0596001453L" /><meta name="DC.Subject.Keyword" content="stuff" /><meta name="DC.Title" content="Java and XSLT" /><meta name="DC.Type" content="Text.Monograph" />

</head><body bgcolor="#ffffff">

<img src="gifs/smbanner.gif" usemap="#banner-map" border="0" alt="Book Home" /><map name="banner-map"><area shape="rect" coords="1,-2,616,66" href="index.htm" alt="Java and XSLT" /><area shape="rect" coords="629,-11,726,25" href="jobjects/fsearch.htm" alt="Search this book" /></map>

<div class="navbar"><table width="684" border="0"><tr><td align="left" valign="top" width="228"><a href="ch03_02.htm"><img src="../gifs/txtpreva.gif" alt="Previous" border="0" /></a></td><td align="center" valign="top" width="228" /><td align="right" valign="top" width="228"><a href="ch03_04.htm"><img src="../gifs/txtnexta.gif" alt="Next" border="0" /></a></td></tr></table></div>



<h2 class="sect1">3.3. Combining Multiple Stylesheets</h2>

<p><a name="INDEX-358" />Through template parameters, named
templates, and template modes, we have seen how to create more
reusable fragments of code that begin to resemble function calls. By
combining multiple stylesheets, one can begin to develop libraries of
reusable XSLT templates that can dramatically increase productivity.
</p>

<p>Productivity gains occur because programmers are not writing the same
code over and over for each stylesheet. Reusable code is placed into
a single stylesheet and imported or included into other stylesheets.
Another advantage of this technique is maintainability. XSLT syntax
can get ugly, and modularizing code into small fragments can greatly
enhance readability. For example, we have seen several examples
related to the list of presidents so far. Since we almost always want
to display the name of a president or vice president, name-formatting
templates should be broken out into a separate stylesheet. <a href="ch03_03.htm">Example 3-7</a> shows a stylesheet designed for reuse by other
stylesheets.
</p>

<a name="javaxslt-CHP-3-EX-7" /><div class="example">
<h4 class="objtitle">Example 3-7. nameFormatting.xslt </h4>
<blockquote><pre class="code">&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;xsl:stylesheet version="1.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform"&gt;
  &lt;xsl:output method="html"/&gt;
  &lt;!--
    ** Show a name formatted like: "Burke, Eric Matthew"
    --&gt;
  <tt class="userinput"><b>&lt;xsl:template match="name" mode="lastFirstMiddle"&gt;</b></tt>
    &lt;xsl:value-of select="last"/&gt;
    &lt;xsl:text&gt;, &lt;/xsl:text&gt;
    &lt;xsl:value-of select="first"/&gt;
    &lt;xsl:for-each select="middle"&gt;
      &lt;xsl:text&gt; disable-output-escaping="yes"&gt;&amp;amp;nbsp;&lt;/xsl:text&gt;
      &lt;xsl:value-of select="."/&gt;
    &lt;/xsl:for-each&gt;
  &lt;/xsl:template&gt;

  &lt;!--
    ** Show a name formatted like: "Eric Matthew Burke"
    --&gt;
  <tt class="userinput"><b>&lt;xsl:template match="name" mode="firstMiddleLast"&gt;</b></tt>
    &lt;xsl:value-of select="first"/&gt;
    &lt;xsl:for-each select="middle"&gt;
      &lt;xsl:text&gt; disable-output-escaping="yes"&gt;&amp;amp;nbsp;&lt;/xsl:text&gt;
      &lt;xsl:value-of select="."/&gt;
    &lt;/xsl:for-each&gt;
    &lt;xsl:text&gt; disable-output-escaping="yes"&gt;&amp;amp;nbsp;&lt;/xsl:text&gt;
    &lt;xsl:value-of select="last"/&gt;
  &lt;/xsl:template&gt;
&lt;/xsl:stylesheet&gt;</pre></blockquote>
</div>

<p>The code in <a href="ch03_03.htm">Example 3-7</a> uses template modes to
determine which template is instantiated. Adding additional templates
would be simple, and those changes would be available to any
stylesheet that included or imported this one. This stylesheet was
designed to be reused by other stylesheets, so it does not include a
template that matches the root node.
</p>

<p>For large web sites, the ability to import or include stylesheets is
crucial. It almost goes without saying that every web page on a large
site will contain the same navigation bar, footer, and perhaps a
common heading region. Standalone stylesheet fragments included by
other stylesheets should generate all of these reusable elements.
This allows you to modify something like the copyright notice on your
page footer in one place, and those changes are reflected across the
entire web site without any programming changes.
</p>

<a name="javaxslt-CHP-3-SECT-3.1" /><div class="sect2">
<h3 class="sect2">3.3.1. &lt;xsl:include&gt;</h3>

<p>The <tt class="literal">&lt;xsl:include&gt;</tt><a name="INDEX-359" />
<a name="INDEX-360" /> element allows one
stylesheet to include another. It is only allowed as a top-level
element, meaning that <tt class="literal">&lt;xsl:include&gt;</tt> elements
are siblings to <tt class="literal">&lt;xsl:template&gt;</tt> elements in
the stylesheet structure. The syntax of
<tt class="literal">&lt;xsl:include&gt;</tt> is:
</p>

<blockquote><pre class="code">&lt;xsl:include href="uri-reference"/&gt;</pre></blockquote>

<p>When a stylesheet includes another, the included stylesheet is
effectively inserted in place of the
<tt class="literal">&lt;xsl:include&gt;</tt> element. Actually, the
children of its <tt class="literal">&lt;xsl:stylesheet&gt;</tt> element are
inserted into the including document. It is possible to include many
other stylesheets and for those stylesheets to include others.
</p>

<p>Inclusion is a relatively simple mechanism because the resulting
stylesheet behaves exactly as if you had typed all included elements
into the including stylesheet. This can result in problems when two
conflicting template rules are included, so you must be careful to
plan ahead to avoid any conflicts. When a conflict occurs, the XSLT
processor should report an error and halt.
</p>

</div>
<a name="javaxslt-CHP-3-SECT-3.2" /><div class="sect2">
<h3 class="sect2">3.3.2. &lt;xsl:import&gt;</h3>

<p><a name="INDEX-361" />
<a name="INDEX-362" />Importing (rather
than including) a stylesheet adds some intelligence to the process.
When conflicts occur, the importing stylesheet takes precedence over
any imported stylesheets. Unlike
<tt class="literal">&lt;xsl:include&gt;</tt>,
<tt class="literal">&lt;xsl:import&gt;</tt> elements must occur before any
other element children of <tt class="literal">&lt;xsl:stylesheet&gt;</tt>,
as shown here:
</p>

<blockquote><pre class="code">&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;xsl:stylesheet version="1.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform"&gt;<tt class="userinput"><b>
  &lt;!-- xsl:import must occur before any other top-level elements --&gt;</b></tt><tt class="userinput"><b>
  &lt;xsl:import href="pageElements.xslt"/&gt;</b></tt><tt class="userinput"><b>
  &lt;xsl:import href="globalConstants.xslt"/&gt;</b></tt>
  &lt;xsl:output method="html"/&gt;
  &lt;xsl:template match="/"&gt;
    &lt;html&gt;
      ...
    &lt;/html&gt;
  &lt;/xsl:template&gt;<tt class="userinput"><b>
  &lt;!-- but xsl:include can occur anywhere, provided it is a top-level element --&gt;</b></tt><tt class="userinput"><b>
  &lt;xsl:include href="nameFormatting.xslt"/&gt;</b></tt>
&lt;/xsl:stylesheet&gt;</pre></blockquote>

<p>For the purposes of most web sites, the most common usage pattern is
for each page to import or include common stylesheet fragments, such
as templates to produce page headers, footers, and other reusable
elements on a web site. Once a stylesheet has been included or
imported, its templates can be used as if they were in the current
stylesheet.
</p>

<p>The key reason to use <tt class="literal">&lt;xsl:import&gt;</tt> instead
of <tt class="literal">&lt;xsl:include&gt;</tt> is to avoid conflicts. If
your stylesheet already has a template that matches
<tt class="literal">pageHeader</tt>, you will not be able to include
<em class="filename">pageElements.xslt</em> if it also has that template.
On the other hand, you can use <tt class="literal">&lt;xsl:import&gt;</tt>.
In this case, your own <tt class="literal">pageHeader</tt> template will
take priority over the imported <tt class="literal">pageHeader</tt>.
</p>

<a name="ch03-17-fm2xml" /><blockquote><b>NOTE:</b> 

Changing all <tt class="literal">&lt;xsl:import&gt;</tt> elements to <tt class="literal">&lt;xsl:include&gt;</tt> will help identify any naming conflicts you did not know about.<a name="INDEX-363" />
</p></blockquote>
</div>


<hr width="684" align="left" />
<div class="navbar"><table width="684" border="0"><tr><td align="left" valign="top" width="228"><a href="ch03_02.htm"><img src="../gifs/txtpreva.gif" alt="Previous" border="0" /></a></td><td align="center" valign="top" width="228"><a href="index.htm"><img src="../gifs/txthome.gif" alt="Home" border="0" /></a></td><td align="right" valign="top" width="228"><a href="ch03_04.htm"><img src="../gifs/txtnexta.gif" alt="Next" border="0" /></a></td></tr><tr><td align="left" valign="top" width="228">3.2. Parameters and Variables</td><td align="center" valign="top" width="228"><a href="index/index.htm"><img src="../gifs/index.gif" alt="Book Index" border="0" /></a></td><td align="right" valign="top" width="228">3.4. Formatting Text and Numbers</td></tr></table></div>
<hr width="684" align="left" />

<img src="../gifs/navbar.gif" usemap="#library-map" border="0" alt="Library Navigation Links" />
<p><p><font size="-1"><a href="copyrght.htm">Copyright &copy; 2002</a> O'Reilly &amp; Associates. All rights reserved.</font></p>

<map name="library-map"><area shape="rect" coords="0,0,85,93" href="../index.htm"><area shape="rect" coords="85,0,180,98" href="../sax2/index.htm"><area shape="rect" coords="182,-1,261,100" href="../xmlnut/index.htm"><area shape="rect" coords="263,1,384,96" href="../jxml/index.htm"><area shape="rect" coords="386,1,463,100" href="index.htm"><area shape="rect" coords="466,1,533,112" href="../xslt/index.htm"><area shape="rect" coords="535,-1,610,108" href="../schema/index.htm"><area shape="rect" coords="613,1,696,121" href="../pxml/index.htm"></map>

</body></html>