<html><head><title>Servlet Basics and XSLT (Java and XSLT)</title><link rel="stylesheet" type="text/css" href="../style/style1.css" />

<meta name="DC.Creator" content="Eric M. Burke" /><meta name="DC.Format" content="text/xml" scheme="MIME" /><meta name="DC.Language" content="en-US" /><meta name="DC.Publisher" content="O'Reilly &amp; Associates, Inc." /><meta name="DC.Source" scheme="ISBN" content="0596001453L" /><meta name="DC.Subject.Keyword" content="stuff" /><meta name="DC.Title" content="Java and XSLT" /><meta name="DC.Type" content="Text.Monograph" />

</head><body bgcolor="#ffffff">

<img src="gifs/smbanner.gif" usemap="#banner-map" border="0" alt="Book Home" /><map name="banner-map"><area shape="rect" coords="1,-2,616,66" href="index.htm" alt="Java and XSLT" /><area shape="rect" coords="629,-11,726,25" href="jobjects/fsearch.htm" alt="Search this book" /></map>

<div class="navbar"><table width="684" border="0"><tr><td align="left" valign="top" width="228"><a href="ch05_04.htm"><img src="../gifs/txtpreva.gif" alt="Previous" border="0" /></a></td><td align="center" valign="top" width="228" /><td align="right" valign="top" width="228"><a href="ch06_02.htm"><img src="../gifs/txtnexta.gif" alt="Next" border="0" /></a></td></tr></table></div>


<h1 class="chapter">Chapter 6. Servlet Basics and XSLT</h1>
<div class="htmltoc"><h4 class="tochead">Contents:</h4>
  <p> <a href="#javaxslt-CHP-6-SECT-1">Servlet Syntax</a><br />
<a href="ch06_02.htm">WAR Files and Deployment</a><br />
<a href="ch06_03.htm">Another Servlet Example</a><br />
<a href="ch06_04.htm">Stylesheet Caching Revisited</a><br />
<a href="ch06_05.htm">Servlet Threading Issues</a><br /></p></div><p><a name="INDEX-612" /></a>XSLT and servlets are a natural fit. Java
is a cross-platform programming language, XML provides portable data,
and XSLT provides a way to transform that data without cluttering up
your servlet code with HTML. Because your data can be transformed
into many different formats, you can also achieve portability across
a variety of browsers and other devices. Best of all, a clean
separation between data, presentation, and programming logic allow
changes to be made to the look and feel of a web site without digging
in to Java code. This makes it possible, for example, to sell highly
customizable web applications. You can encourage your customers to
modify the XSLT stylesheets to create custom page layouts and
corporate logos, while preventing access to your internal Java
business logic.
</p>

<p>As discussed in previous chapters, an initial challenge faced with
XSLT and servlets is the initial configuration. Getting started with
a <a name="INDEX-613" /></a>web application is typically harder than
client-only applications because there are more pieces to assemble.
With a Swing application, for instance, you can start with a single
class that has a <tt class="literal">main( )</tt> method. But with a web
application, you must create an XML deployment descriptor in addition
to the servlet, package everything up into a WAR file, and properly
deploy to a servlet container. When errors occur, you see something
like "HTTP 404 -- File not found," which is not
particularly helpful.
</p>

<p>The goal of this chapter is to introduce servlet syntax with
particular emphasis on configuration and deployment issues. Once
servlet syntax has been covered, integration with XSLT stylesheets
and XML is covered, illustrated by the implementation of a basic web
application. By the time you have worked through this material, you
should have confidence to move on to the more complicated examples
found in the remainder of this book.
</p><div class="sect1"><a name="javaxslt-CHP-6-SECT-1" /></a>
<h2 class="sect1">6.1. Servlet Syntax</h2>

<p><a name="INDEX-614" /></a>Servlet
architecture was covered in <a href="ch04_01.htm">Chapter 4, "Java-Based Web Technologies"</a>, along with
comparisons to many other approaches. The architecture of a system is
a mile-high view, ignoring implementation details so you can focus on
the big picture. We now need to dig into the low-level syntax issues
to proceed with the really interesting examples in later chapters.
For a complete discussion of servlets, check out Jason Hunter's
<em class="citetitle">Java Servlet Programming</em> (O'Reilly). Be
sure to look for the second edition because so much has changed in
the servlet world since this book was first published.
</p>

<a name="javaxslt-CHP-6-SECT-1.1" /></a><div class="sect2">
<h3 class="sect2">6.1.1. Splash Screen Servlet Example</h3>

<p>Our first servlet example will produce an application splash screen.
The servlet will receive a request from a browser and output a simple
HTML web page. <a href="ch06_01.htm">Figure 6-1</a> contains the class
diagram for <tt class="literal">SplashScreenServlet</tt>, which extends
from <tt class="literal">HttpServlet</tt>.
</p>

<a name="javaxslt-CHP-6-FIG-1" /></a><div class="figure"><img src="figs/jxt_0601.gif" alt="Figure 6-1" width="198" height="182" /></div><h4 class="objtitle">Figure 6-1. SplashScreenServlet class diagram</h4>

<p>When writing servlets, you almost always extend from
<tt class="literal">HttpServlet</tt><a name="INDEX-615" /></a>. In our example, we override the
<tt class="literal">doGet( )</tt><a name="INDEX-616" /></a>
<a name="INDEX-617" /></a> method, which is called every time the
browser issues an HTTP GET request to the server.
<a name="INDEX-618" /></a>GET requests
occur whenever the user types in a URL, clicks on a hyperlink, or
submits an HTML form with GET as the <tt class="literal">method</tt>
attribute. The other common type of request is POST, which is used by
HTML forms with POST as the <tt class="literal">method</tt> attribute. For
example:
</p>

<blockquote><pre class="code">&lt;form action="someServlet" method="POST"&gt;
...form contents
&lt;/form&gt;</pre></blockquote>

<p>In the case of <a name="INDEX-619" /></a>POST requests, your servlet simply
overrides the <tt class="literal">doPost( )</tt><a name="INDEX-620" /></a>
<a name="INDEX-621" /></a> method instead of <tt class="literal">doGet(
)</tt>. Each of these methods takes two parameters:
<tt class="literal">HttpServletRequest</tt><a name="INDEX-622" /></a> and
<tt class="literal">HttpServletResponse</tt><a name="INDEX-623" /></a>. The request contains information
from the client to the servlet, and the response allows the servlet
to send data back to the client. This correlates directly to the
request/response nature of HTTP itself. <a href="ch06_01.htm">Example 6-1</a>
contains the complete source code for our simple servlet.<a name="INDEX-624" /></a>
</p>

<a name="javaxslt-CHP-6-EX-1" /></a><div class="example">
<h4 class="objtitle">Example 6-1. SplashScreenServlet.java </h4>
<blockquote><pre class="code">package chap6;

import java.io.*;
import javax.servlet.*;
import javax.servlet.http.*;

/**
 * A simple Servlet example that displays a "Splash Screen"
 * for a web application.
 */
public class SplashScreenServlet extends HttpServlet {
  public String getServletInfo( ) {
    return "Shows an application splash screen.";
  }

  protected void doGet(HttpServletRequest request,
                    HttpServletResponse response)
      throws IOException, ServletException {

    // demonstrate how to get parameters from the request
    String nextURL = request.getParameter("nextURL");
    if (nextURL == null) {
      nextURL = "/";
    }

    response.setContentType("text/html");
    PrintWriter pw = response.getWriter( );
    pw.println("&lt;html&gt;");
    pw.println("&lt;head&gt;&lt;title&gt;Splash Screen&lt;/title&gt;&lt;/head&gt;");
    pw.println("&lt;body&gt;");

    pw.println("&lt;div align='center' style='border: 1px navy solid;'&gt;");
    pw.println("&lt;h1&gt;Welcome to Java and XSLT&lt;/h1&gt;");
    pw.println("&lt;h3&gt;O'Reilly and Associates&lt;/h3&gt;");
    pw.println("&lt;p&gt;First Edition, 2001&lt;/p&gt;&lt;hr&gt;");
    pw.println("&lt;a href='" + nextURL + "'&gt;Click here to continue...&lt;/a&gt;");
    pw.println("&lt;/div&gt;");
    pw.println("&lt;/body&gt;");
    pw.println("&lt;/html&gt;");
  }
}</pre></blockquote>
</div>

<p>Beginning with the <tt class="literal">import</tt> statements, note that
the servlet API is in the <tt class="literal">javax.servlet</tt> and
<tt class="literal">javax.servlet.http</tt> packages. These packages are
not part of the Java 2 Standard Edition; they are considered a
required API of the Java 2 Platform Enterprise Edition. Although many
servlet implementations are available, Apache's
<a name="INDEX-625" /></a> <a name="INDEX-626" /></a>Tomcat is
the reference implementation officially sanctioned by Sun. Every
example in this book works with Version 4.0 of Tomcat and should also
work on any compliant servlet implementation. You can download Tomcat
at <a href="../../../../../../jakarta.apache.org/">http://jakarta.apache.org</a>.
</p>

<p>As shown in <a href="ch06_01.htm">Figure 6-1</a>,
<tt class="literal">SplashScreenServlet</tt> is a subclass of
<tt class="literal">HttpServlet</tt>. The first method we override is
<tt class="literal">getServletInfo(
)</tt><a name="INDEX-627" /></a>
<a name="INDEX-628" /></a>, which simply returns a brief description
of this servlet. Although optional, this text will show up in the
administrative console of many servlet containers.
</p>

<p>The <tt class="literal">doGet( )</tt><a name="INDEX-629" /></a>
<a name="INDEX-630" /></a> method is next, which is designed to handle
each client request. It is important to remember that this method
needs to be thread-safe, because many clients could potentially share
this servlet instance and call <tt class="literal">doGet( )</tt>
concurrently. You may notice that <tt class="literal">doGet( )</tt> is a
<tt class="literal">protected</tt> method. The call sequence is as follows:
</p>

<ol><li>
<p>The servlet container invokes the <tt class="literal">service( )</tt>
method on <tt class="literal">HttpServlet</tt>.
</p>
</li><li>
<p><tt class="literal">HttpServlet</tt> figures out the type of request (GET,
POST, ...).
</p>
</li><li>
<p><tt class="literal">HttpServlet</tt> invokes the corresponding method
(<tt class="literal">doGet( )</tt>, <tt class="literal">doPost( )</tt>, ...).
</p>
</li></ol>
<p>Since the <tt class="literal">doGet( )</tt> method is called from its
parent class, it can be <tt class="literal">protected</tt>. If you do not
override the <tt class="literal">doGet( )</tt> method, the default behavior
in <tt class="literal">HttpServlet</tt> is to return an error page back to
the client. If you also want to support POST, you must override the
<tt class="literal">doPost( )</tt> method. One common technique is to have
the <tt class="literal">doGet( )</tt> method call the <tt class="literal">doPost(
)</tt> method, or vice-versa. This allows the same servlet to
support both GET and POST without duplicating any code.
</p>

<p>The <tt class="literal">doGet( )</tt> implementation is very
straightforward. The first thing it does is check for the existence
of a parameter called <tt class="literal">nextURL</tt>. This is part of the
request that the browser issues to the servlet. For example, typing
the following URL into your browser will include the next URL
parameter:
</p>

<blockquote><pre class="code"><tt class="userinput"><b>http://localhost:8080/chap6/splash?nextURL=http://www.oreilly.com</b></tt></pre></blockquote>

<p>If the <tt class="literal">nextURL</tt> parameter is not specified, its
value will be <tt class="literal">null</tt>. For this reason, servlets must
always check for <tt class="literal">null</tt> when getting parameters from
the request:
</p>

<blockquote><pre class="code">String nextURL = request.getParameter("nextURL");
if (nextURL == null) {
  nextURL = "/";
}</pre></blockquote>

<p>In our example, <tt class="literal">null</tt> causes an error, so we
replace <tt class="literal">nextURL</tt> with a forward slash character
(<tt class="literal">/</tt>). As you might guess, this is a relative URL
that points to the root directory. In the case of a servlet running
on Tomcat, the root directory will point to Tomcat's home page.
This is not the same as the root directory on your file system. In
<a name="INDEX-631" /></a>Tomcat, the root directory can be
found under <em class="filename">TOMCAT_HOME/webapps/ROOT</em>, where
<em class="filename">TOMCAT_HOME</em> points to the installation directory
of Tomcat.
</p>

<p>The <tt class="literal">getParameter(
)</tt><a name="INDEX-632" /></a>
<a name="INDEX-633" /></a> method is also used for retrieving values
from an HTML form. When an HTML form is submitted, each component on
the form should have a name associated with it, such as
<tt class="literal">firstName</tt>, <tt class="literal">lastName</tt>, or
<tt class="literal">ssn</tt>. The servlet retrieves the form values simply
by calling <tt class="literal">request.getParameter( )</tt> for each form
element. It is always a good idea to check for
<tt class="literal">null</tt> and trim whitespace before accepting any of
these parameters. When the form element is missing, the parameter
value will be <tt class="literal">null</tt>. This could indicate an error
in your HTML or perhaps an intentional attack on your web site.
</p>

<p>The
<tt class="literal">HttpServletResponse</tt><a name="INDEX-634" /></a> class provides access to either a
<tt class="literal">PrintWriter</tt> or an <tt class="literal">OutputStream</tt>,
depending on whether you wish to send text or binary data to the
client. For HTML or XML data, use the
<tt class="literal">HttpServletResponse.getWriter(
)</tt><a name="INDEX-635" /></a>
<a name="INDEX-636" /></a> method. For images or other types of binary
data, use the <tt class="literal">HttpServletResponse.getOutputStream(
)</tt><a name="INDEX-637" /></a>
<a name="INDEX-638" /></a> method. You may also note that we set the
content type of the response prior to getting the writer:
</p>

<blockquote><pre class="code">response.setContentType("text/html");
PrintWriter pw = response.getWriter( );</pre></blockquote>

<p>This is important because the HTTP response consists of a header
followed by the actual content. The content type is one of the header
values, so it must be sent prior to the actual data. Without going
into too many servlet details, it is a good practice to always set
the content type before getting the writer. In future examples, we
will occasionally use <tt class="literal">text/xml</tt> as the content
type, but only when sending raw XML data to the client.
</p>

<p>The remainder of <tt class="literal">SplashScreenServlet</tt> simply prints
out an HTML response:
</p>

<blockquote><pre class="code">pw.println("&lt;html&gt;");
pw.println("&lt;head&gt;&lt;title&gt;Splash Screen&lt;/title&gt;&lt;/head&gt;");
pw.println("&lt;body&gt;");

pw.println("&lt;div align='center' style='border: 1px navy solid;'&gt;");
pw.println("&lt;h1&gt;Welcome to Java and XSLT&lt;/h1&gt;");
pw.println("&lt;h3&gt;O'Reilly and Associates&lt;/h3&gt;");
pw.println("&lt;p&gt;First Edition, 2001&lt;/p&gt;&lt;hr&gt;");
pw.println("&lt;a href='" + nextURL + "'&gt;Click here to continue...&lt;/a&gt;");
pw.println("&lt;/div&gt;");
pw.println("&lt;/body&gt;");
pw.println("&lt;/html&gt;");</pre></blockquote>

<p>As you can see, the <tt class="literal">nextURL</tt> parameter is used to
create a hyperlink to the next page. This is why a value of
<tt class="literal">null</tt> is unacceptable for this example.
</p>

<p>This approach works fine for simple examples, but quickly gets out of
hand for complex pages. This is because all but the most basic web
pages require hundreds, if not thousands, of lines of HTML to create
fancy tables, colors, and graphics. For reasons discussed in <a href="ch05_01.htm">Chapter 5, "XSLT Processing with Java"</a>, hardcoding that HTML into the servlet is
simply unacceptable in a sophisticated web application.<a name="INDEX-639" /></a><a name="INDEX-640" /></a>
</p>

</div>
</div>

<hr width="684" align="left" />
<div class="navbar"><table width="684" border="0"><tr><td align="left" valign="top" width="228"><a href="ch05_04.htm"><img src="../gifs/txtpreva.gif" alt="Previous" border="0" /></a></td><td align="center" valign="top" width="228"><a href="index.htm"><img src="../gifs/txthome.gif" alt="Home" border="0" /></a></td><td align="right" valign="top" width="228"><a href="ch06_02.htm"><img src="../gifs/txtnexta.gif" alt="Next" border="0" /></a></td></tr><tr><td align="left" valign="top" width="228">5.4. Stylesheet Compilation</td><td align="center" valign="top" width="228"><a href="index/index.htm"><img src="../gifs/index.gif" alt="Book Index" border="0" /></a></td><td align="right" valign="top" width="228">6.2. WAR Files and Deployment</td></tr></table></div>
<hr width="684" align="left" />

<img src="../gifs/navbar.gif" usemap="#library-map" border="0" alt="Library Navigation Links" />
<p><p><font size="-1"><a href="copyrght.htm">Copyright &copy; 2002</a> O'Reilly &amp; Associates. All rights reserved.</font></p>

<map name="library-map"><area shape="rect" coords="0,0,85,93" href="../index.htm"><area shape="rect" coords="85,0,180,98" href="../sax2/index.htm"><area shape="rect" coords="182,-1,261,100" href="../xmlnut/index.htm"><area shape="rect" coords="263,1,384,96" href="../jxml/index.htm"><area shape="rect" coords="386,1,463,100" href="index.htm"><area shape="rect" coords="466,1,533,112" href="../xslt/index.htm"><area shape="rect" coords="535,-1,610,108" href="../schema/index.htm"><area shape="rect" coords="613,1,696,121" href="../pxml/index.htm"></map>

</body></html>