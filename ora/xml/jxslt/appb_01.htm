<html><head><title>JAXP API Reference (Java and XSLT)</title><link rel="stylesheet" type="text/css" href="../style/style1.css" />

<meta name="DC.Creator" content="Eric M. Burke" /><meta name="DC.Format" content="text/xml" scheme="MIME" /><meta name="DC.Language" content="en-US" /><meta name="DC.Publisher" content="O'Reilly &amp; Associates, Inc." /><meta name="DC.Source" scheme="ISBN" content="0596001453L" /><meta name="DC.Subject.Keyword" content="stuff" /><meta name="DC.Title" content="Java and XSLT" /><meta name="DC.Type" content="Text.Monograph" />

</head><body bgcolor="#ffffff">

<img src="gifs/smbanner.gif" usemap="#banner-map" border="0" alt="Book Home" /><map name="banner-map"><area shape="rect" coords="1,-2,616,66" href="index.htm" alt="Java and XSLT" /><area shape="rect" coords="629,-11,726,25" href="jobjects/fsearch.htm" alt="Search this book" /></map>

<div class="navbar"><table width="684" border="0"><tr><td align="left" valign="top" width="228"><a href="appa_01.htm"><img src="../gifs/txtpreva.gif" alt="Previous" border="0" /></a></td><td align="center" valign="top" width="228" /><td align="right" valign="top" width="228"><a href="appc_01.htm"><img src="../gifs/txtnexta.gif" alt="Next" border="0" /></a></td></tr></table></div>


<h1 class="chapter">Appendix B. JAXP API Reference</h1><p><a name="INDEX-1219" />This appendix summarizes Version 1.1 of
the Java API for XML Processing (JAXP).<a href="#FOOTNOTE-58">[58]</a> JAXP provides a standard way
for Java programs to interact with XML parsers and XSLT processors
and is freely available from <a name="INDEX-1220" />
<a name="INDEX-1221" /><a href="../../../../../../java.sun.com/xml">http://java.sun.com/xml</a>. JAXP also includes
classes and interfaces for DOM and SAX; these are not listed here.
</p><blockquote class="footnote"> <a name="FOOTNOTE-58" /><p> [58] Before
transformation support was added, JAXP stood for "Java API for
XML Parsing."</p> </blockquote>

<p>The biggest changes from JAXP 1.0 to JAXP 1.1 are support for level 2
of DOM and SAX, as well as an entirely new plugability layer for
performing transformations. JAXP 1.1 also refines the algorithm used
for locating implementation classes for the three supported
plugability layers. This algorithm is discussed in <a href="ch05_01.htm">Chapter 5, "XSLT Processing with Java"</a>, in the "Introduction to JAXP 1.1"
section.
</p>

<a name="INDEX-1222" /><a name="INDEX-1223" /><a name="INDEX-1224" /><a name="INDEX-1225" /><a name="INDEX-1226" /><a name="INDEX-1227" /><a name="INDEX-1228" /><a name="INDEX-1229" /><a name="INDEX-1230" /><a name="INDEX-1231" /><a name="INDEX-1232" /><a name="INDEX-1233" /><a name="INDEX-1234" /><a name="INDEX-1235" /><a name="INDEX-1236" /><a name="INDEX-1237" /><a name="INDEX-1238" /><a name="INDEX-1239" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b>Package: javax.xml.parsers</b></font></td><td align="right"><i></i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><table width="515" border="0" cellpadding="5"><tr><td align="left" /><td align="right" /></tr></table>
<p><a name="INDEX-1222" />
<a name="INDEX-1223" />The
classes in this package support parsing using <a name="INDEX-1224" />Simple
API for XML (SAX) 2 and Document Object Model (DOM) Level 2. These
classes do not perform the actual parsing work; instead, they
delegate to plugable parser implementations such as Apache's
Crimson or Xerces.
</p>

<h4 class="refsect1">DocumentBuilder</h4>

<p><a name="INDEX-1225" />
<a name="INDEX-1226" />Instances
of this class define an API for parsing XML from a variety of input
sources, as well as for creating new DOM <tt class="literal">Document</tt>
objects from scratch. The <tt class="literal">DocumentBuilder</tt> instance
should be obtained from the <tt class="literal">DocumentBuilderFactory</tt>
instance. Once an instance has been obtained, the
<tt class="literal">newDocument( )</tt> method can be used to construct new
DOM <tt class="literal">Document</tt> objects without resorting to the
implementation of specific code.
</p>

<blockquote><pre class="code">public abstract class DocumentBuilder {
    protected DocumentBuilder( );
    public abstract DOMImplementation getDOMImplementation( );
    public abstract boolean isNamespaceAware( );
    public abstract boolean isValidating( );
    public abstract Document newDocument( );
    public Document parse(InputStream is, String systemId)
        throws SAXException, IOException;
    public Document parse(String uri)
        throws SAXException, IOException;
    public Document parse(File f)
        throws SAXException, IOException;
    public abstract Document parse(InputSource is)
        throws SAXException, IOException;
    public Document parse(InputStream is)
        throws SAXException, IOException;
    public abstract void setEntityResolver(EntityResolver er);
    public abstract void setErrorHandler(ErrorHandler eh);
}</pre></blockquote>


<h4 class="refsect1">DocumentBuilderFactory</h4>

<p><a name="INDEX-1227" />
<a name="INDEX-1228" />This
class allows instances of <tt class="literal">DocumentBuilder</tt> to be
constructed using a factory pattern, insulating application code from
specific DOM implementations. Various methods in this class allow
programs to specify which features the parser will support. If these
features are not available, the <tt class="literal">newDocumentBuilder(
)</tt> throws a <tt class="literal">ParserConfigurationException</tt>.
The various accessor methods, such as <tt class="literal">isNamespaceAware(
)</tt>, do not indicate whether the underlying parser actually
supports a given feature. Instead, these methods indicate whether the
application configured those features on this
<tt class="literal">DocumentBuilderFactory</tt> instance. Before using this
class, call the <tt class="literal">newInstance( )</tt> method to create an
instance of it. This object is then used to construct an instance of
<tt class="literal">DocumentBuilder</tt> using the
<tt class="literal">newDocumentBuilder( )</tt> method.
</p>

<blockquote><pre class="code">public abstract class DocumentBuilderFactory {
    protected DocumentBuilderFactory( );
    public abstract Object getAttribute(String name)
        throws IllegalArgumentException;
    public boolean isCoalescing( );
    public boolean isExpandEntityReferences( );
    public boolean isIgnoringComments( );
    public boolean isIgnoringElementContentWhitespace( );
    public boolean isNamespaceAware( );
    public boolean isValidating( );
    public abstract DocumentBuilder newDocumentBuilder( )
        throws ParserConfigurationException;
    public static DocumentBuilderFactory newInstance( );
    public abstract void setAttribute(String name, Object value)
        throws IllegalArgumentException;
    public void setCoalescing(boolean coalescing);
    public void setExpandEntityReferences(boolean expandEntityRef);
    public void setIgnoringComments(boolean ignoreComments);
    public void setIgnoringElementContentWhitespace(boolean whitespace);
    public void setNamespaceAware(boolean awareness);
    public void setValidating(boolean validating);
}</pre></blockquote>


<h4 class="refsect1">FactoryConfigurationError</h4>

<p><a name="INDEX-1229" />
<a name="INDEX-1230" />This
indicates that the class for a parser factory could not be located or
instantiated. If this error occurs, something is not installed
correctly on the system. Refer to <a href="ch05_01.htm">Chapter 5, "XSLT Processing with Java"</a> for
information on the algorithm that JAXP uses to locate parser
implementations.
</p>

<blockquote><pre class="code">public class FactoryConfigurationError
        extends Error {
    public FactoryConfigurationError(String msg);
    public FactoryConfigurationError(Exception e);
    public FactoryConfigurationError(Exception e, String msg);
    public FactoryConfigurationError( );
    public Exception getException( );
    public String getMessage( );
}</pre></blockquote>


<h4 class="refsect1">ParserConfigurationException</h4>

<p><a name="INDEX-1231" />
<a name="INDEX-1232" />According
to the API specification, represents "a serious configuration
error." Generally, this means that the factory cannot provide a
parser with the requested features. For instance, a programmer may
ask for a namespace-aware parser, but the only parser available does
not support namespaces.<a href="#FOOTNOTE-59">[59]</a>
</p><blockquote class="footnote"> <a name="FOOTNOTE-59" /><p> [59] XSLT processing requires
namespace-aware XML parsers.</p> </blockquote>

<blockquote><pre class="code">public class ParserConfigurationException
        extends Exception {
    public ParserConfigurationException(String msg);
    public ParserConfigurationException( );
}</pre></blockquote>


<h4 class="refsect1">SAXParser</h4>

<p><a name="INDEX-1233" />
<a name="INDEX-1234" />This
class defines a wrapper around an underlying SAX parser
implementation. It was part of JAXP 1.0 and supports both SAX 1 and
SAX 2 features. If possible, programmers should avoid methods that
use <tt class="literal">HandlerBase</tt>, because this is a deprecated SAX
1 interface. Instead, use the methods that deal with
<tt class="literal">DefaultHandler</tt>.
</p>

<blockquote><pre class="code">public abstract class SAXParser {
    protected SAXParser( );
    public abstract Parser getParser( )
        throws SAXException;
    public abstract Object getProperty(String name)
        throws SAXNotRecognizedException, SAXNotSupportedException;
    public abstract XMLReader getXMLReader( )
        throws SAXException;
    public abstract boolean isNamespaceAware( );
    public abstract boolean isValidating( );
    public void parse(InputStream is, DefaultHandler dh, String systemId)
        throws SAXException, IOException;
    public void parse(InputStream is, DefaultHandler p1)
        throws SAXException, IOException;
    public void parse(InputStream is, HandlerBase hb, String systemId)
        throws SAXException, IOException;
    public void parse(File f, HandlerBase hb)
        throws SAXException, IOException;
    public void parse(InputStream is, HandlerBase hb)
        throws SAXException, IOException;
    public void parse(String uri, HandlerBase hb)
        throws SAXException, IOException;
    public void parse(InputSource is, HandlerBase hb)
        throws SAXException, IOException;
    public void parse(InputSource is, DefaultHandler dh)
        throws SAXException, IOException;
    public void parse(String systemId, DefaultHandler dh)
        throws SAXException, IOException;
    public void parse(File f, DefaultHandler dh)
        throws SAXException, IOException;
    public abstract void setProperty(String name, Object value)
        throws SAXNotRecognizedException, SAXNotSupportedException;
}</pre></blockquote>


<h4 class="refsect1">SAXParserFactory</h4>

<p><a name="INDEX-1235" />
<a name="INDEX-1236" />This
class defines a factory for creating instances of SAX parsers. Before
creating these instances, use the <tt class="literal">setFeature( )</tt>
method to define which parsing features are required of the parser to
be created. See <a href="../../../../../../www.megginson.com/SAX/Java/features.html">http://www.megginson.com/SAX/Java/features.html</a>
for a list of core SAX 2 features.
</p>

<a name="INDEX-1237" /><a name="INDEX-1238" /><a name="INDEX-1239" /><blockquote><pre class="code">public abstract class SAXParserFactory {
    protected SAXParserFactory( );
    public abstract boolean getFeature(String name)
        throws ParserConfigurationException, SAXNotRecognizedException,
        SAXNotSupportedException;
    public boolean isNamespaceAware( );
    public boolean isValidating( );
    public static SAXParserFactory newInstance( );
    public abstract SAXParser newSAXParser( )
        throws ParserConfigurationException, SAXException;
    public abstract void setFeature(String name, boolean value)
        throws ParserConfigurationException, SAXNotRecognizedException,
        SAXNotSupportedException;
    public void setNamespaceAware(boolean awareness);
    public void setValidating(boolean validating);
}
</pre></blockquote>

</div>

<a name="INDEX-1240" /><a name="INDEX-1241" /><a name="INDEX-1242" /><a name="INDEX-1243" /><a name="INDEX-1244" /><a name="INDEX-1245" /><a name="INDEX-1246" /><a name="INDEX-1247" /><a name="INDEX-1248" /><a name="INDEX-1249" /><a name="INDEX-1250" /><a name="INDEX-1251" /><a name="INDEX-1252" /><a name="INDEX-1253" /><a name="INDEX-1254" /><a name="INDEX-1255" /><a name="INDEX-1256" /><a name="INDEX-1257" /><a name="INDEX-1258" /><a name="INDEX-1259" /><a name="INDEX-1260" /><a name="INDEX-1261" /><a name="INDEX-1262" /><a name="INDEX-1263" /><a name="INDEX-1264" /><a name="INDEX-1265" /><a name="INDEX-1266" /><a name="INDEX-1267" /><a name="INDEX-1268" /><a name="INDEX-1269" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b>Package: javax.xml.transform</b></font></td><td align="right"><i></i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><table width="515" border="0" cellpadding="5"><tr><td align="left" /><td align="right" /></tr></table>
<p><a name="INDEX-1240" />
<a name="INDEX-1241" />This
package defines an API for performing <a name="INDEX-1242" />transformations. Although these are
common XSLT transformations, the API is flexible enough to support
other transformation technologies. Like the
<tt class="literal">javax.xml.parsers</tt> package, the classes and
interfaces in this package hide vendor-specific implementation code.
JAXP 1.1 ships with Xalan as its reference implementation for
transformations; different processors can be plugged in.
</p>

<h4 class="refsect1">ErrorListener</h4>

<p><a name="INDEX-1243" />
<a name="INDEX-1244" />This
interface allows applications to implement custom error handling. If
an error listener is not registered, errors are written to
<tt class="literal">System.err</tt>. More details on this interface can be
found in <a href="ch09_01.htm">Chapter 9, "Development Environment, Testing, and Performance"</a>.
</p>

<blockquote><pre class="code">public interface ErrorListener {
    void error(TransformerException exception)
        throws TransformerException;
    void fatalError(TransformerException exception)
        throws TransformerException;
    void warning(TransformerException exception)
        throws TransformerException;
}</pre></blockquote>


<h4 class="refsect1">OutputKeys</h4>

<p><a name="INDEX-1245" />
<a name="INDEX-1246" />These
are constant definitions for legal output property settings on the
<tt class="literal">Transformer</tt> interface. They map directly to the
legal attributes for the <tt class="literal">&lt;xsl:output&gt;</tt>
element. Programmatically specified output properties take priority
over output properties specified in the XSLT stylesheet.
</p>

<blockquote><pre class="code">public class OutputKeys {
    public static final String CDATA_SECTION_ELEMENTS = "cdata-section-elements";
    public static final String DOCTYPE_PUBLIC = "doctype-public";
    public static final String DOCTYPE_SYSTEM = "doctype-system";
    public static final String ENCODING = "encoding";
    public static final String INDENT = "indent";
    public static final String MEDIA_TYPE = "media-type";
    public static final String METHOD = "method";
    public static final String OMIT_XML_DECLARATION = "omit-xml-declaration";
    public static final String STANDALONE = "standalone";
    public static final String VERSION = "version";
}</pre></blockquote>


<h4 class="refsect1">Result</h4>

<p><a name="INDEX-1247" />
<a name="INDEX-1248" />This
is a common interface for classes that produce a transformation
result. <tt class="literal">DOMResult</tt>, <tt class="literal">SAXResult</tt>,
and <tt class="literal">StreamResult</tt> are implementing classes. The two
constants in this interface are used when specifying whether output
escaping is performed, as discussed in section 16.4 of the XSLT
specification at <a href="../../../../../../www.w3.org/TR/xslt">http://www.w3.org/TR/xslt</a>. The system id is
optional but can be helpful when displaying error messages or
warnings.
</p>

<blockquote><pre class="code">public interface Result {
    public static final String PI_DISABLE_OUTPUT_ESCAPING =
        "javax.xml.transform.disable-output-escaping";
    public static final String PI_ENABLE_OUTPUT_ESCAPING =
       "javax.xml.transform.enable-output-escaping";
    String getSystemId( );
    void setSystemId(String systemId);
}</pre></blockquote>


<h4 class="refsect1">Source</h4>

<p><a name="INDEX-1249" />
<a name="INDEX-1250" />This
is a generic interface implemented by <tt class="literal">DOMSource</tt>,
<tt class="literal">SAXSource</tt>, and <tt class="literal">StreamSource</tt>.
The system id is particularly important for <tt class="literal">Source</tt>
because it allows the processor to resolve relative URI references
within the XML and XSLT inputs.<a href="#FOOTNOTE-60">[60]</a>
</p><blockquote class="footnote"> <a name="FOOTNOTE-60" /><p> [60] URI references are
found in elements such as <tt class="literal">&lt;xsl:import&gt;</tt> and
<tt class="literal">&lt;xsl:include&gt;</tt>.</p> </blockquote>

<blockquote><pre class="code">public interface Source {
    String getSystemId( );
    void setSystemId(String systemId);
}</pre></blockquote>


<h4 class="refsect1">SourceLocator</h4>

<p><a name="INDEX-1251" />
<a name="INDEX-1252" />Instances
of this interface are useful when reporting locations of error
messages and warnings. Application programmers retrieve
<tt class="literal">SourceLocator</tt> instances from
<tt class="literal">TransformerException</tt>'s <tt class="literal">getLocator(
)</tt> method.
</p>

<blockquote><pre class="code">public interface SourceLocator {
    int getColumnNumber( );
    int getLineNumber( );
    String getPublicId( );
    String getSystemId( );
}</pre></blockquote>


<h4 class="refsect1">Templates</h4>

<p><a name="INDEX-1253" />
<a name="INDEX-1254" />These
instances represent "compiled" transformation
instructions. Whether a particular XSLT processor actually compiles
stylesheets is implementation-dependent. However,
<tt class="literal">Templates</tt> objects are guaranteed to be
thread-safe. This makes them ideal for servlet environments, where it
is desirable to parse an XSLT stylesheet once then cache it in memory
as a <tt class="literal">Templates</tt> object. The output properties are a
read-only representation of the <tt class="literal">&lt;xsl:output&gt;</tt>
stylesheet element.
</p>

<blockquote><pre class="code">public interface Templates {
    Properties getOutputProperties( );
    Transformer newTransformer( )
        throws TransformerConfigurationException;
}</pre></blockquote>


<h4 class="refsect1">Transformer</h4>

<p><a name="INDEX-1255" />
<a name="INDEX-1256" />Instances
of this class perform one or more transformations. Although
<tt class="literal">Transformer</tt> objects can be reused, they are not
thread-safe and therefore cannot be used concurrently. Output
property names are defined by the <tt class="literal">OutputKeys</tt> class
and map to the <tt class="literal">&lt;xsl:output&gt;</tt> stylesheet
element. Parameters, on the other hand, are stylesheet parameters and
map to top-level <tt class="literal">&lt;xsl:param&gt;</tt> elements. The
<tt class="literal">getParameter()</tt> method returns only parameters that
have been programmatically set.
</p>

<blockquote><pre class="code">public abstract class Transformer {
    protected Transformer( );
    public abstract void clearParameters( );
    public abstract ErrorListener getErrorListener( );
    public abstract Properties getOutputProperties( );
    public abstract String getOutputProperty(String name)
        throws IllegalArgumentException;
    public abstract Object getParameter(String name);
    public abstract URIResolver getURIResolver( );
    public abstract void setErrorListener(ErrorListener listener)
        throws IllegalArgumentException;
    public abstract void setOutputProperties(Properties oformat)
        throws IllegalArgumentException;
    public abstract void setOutputProperty(String name, String value)
        throws IllegalArgumentException;
    public abstract void setParameter(String name, Object value);
    public abstract void setURIResolver(URIResolver resolver);
    public abstract void transform(Source xmlSource, Result outputTarget)
        throws TransformerException;
}</pre></blockquote>


<h4 class="refsect1">TransformerConfigurationException</h4>

<p><a name="INDEX-1257" />
<a name="INDEX-1258" />This
exception indicates a serious problem and may occur when an XSLT
stylesheet has syntax errors that prevent instantiation of a
<tt class="literal">Transformer</tt> instance. This class can wrap around
other exceptions. For example, an underlying parser exception may be
wrapped by an instance of this class.
</p>

<blockquote><pre class="code">public class TransformerConfigurationException
        extends TransformerException {
    public TransformerConfigurationException(String msg);
    public TransformerConfigurationException(Throwable e);
    public TransformerConfigurationException(String msg, Throwable e);
    public TransformerConfigurationException(String msg, SourceLocator locator);
    public TransformerConfigurationException(String msg, SourceLocator locator,
        Throwable e);
    public TransformerConfigurationException( );
}</pre></blockquote>


<h4 class="refsect1">TransformerException</h4>

<p><a name="INDEX-1259" />
<a name="INDEX-1260" />This
is a general-purpose exception that occurs during transformation. If
an <tt class="literal">ErrorListener</tt> is registered, the processor
should try to report exceptions there first. Otherwise, exceptions
are written to <tt class="literal">System.err</tt>. The quality of error
messages varies widely across different XSLT processors. This class
can wrap around other exceptions.
</p>

<blockquote><pre class="code">public class TransformerException
        extends Exception {
    public TransformerException(String msg, Throwable e);
    public TransformerException(String msg, SourceLocator locator);
    public TransformerException(Throwable e);
    public TransformerException(String msg);
    public TransformerException(String msg, SourceLocator locator, Throwable e);
    public Throwable getCause( );
    public Throwable getException( );
    public String getLocationAsString( );
    public SourceLocator getLocator( );
    public String getMessageAndLocation( );
    public synchronized Throwable initCause(Throwable cause);
    public void printStackTrace(PrintStream ps);
    public void printStackTrace(PrintWriter pw);
    public void printStackTrace( );
    public void setLocator(SourceLocator locator);
}</pre></blockquote>


<h4 class="refsect1">TransformerFactory</h4>

<p><a name="INDEX-1261" />
<a name="INDEX-1262" />This
defines a portable way to access different
<tt class="literal">TransformerFactory</tt> instances and is the key
abstraction that masks differences between XSLT processors from
different vendors.
</p>

<blockquote><pre class="code">public abstract class TransformerFactory {
    protected TransformerFactory( );
    public abstract Source getAssociatedStylesheet(Source source, String media,
        String title, String charset) throws TransformerConfigurationException;
    public abstract Object getAttribute(String name)
        throws IllegalArgumentException;
    public abstract ErrorListener getErrorListener( );
    public abstract boolean getFeature(String name);
    public abstract URIResolver getURIResolver( );
    public static TransformerFactory newInstance( )
        throws TransformerFactoryConfigurationError;
    public abstract Templates newTemplates(Source source)
        throws TransformerConfigurationException;
    public abstract Transformer newTransformer(Source source)
        throws TransformerConfigurationException;
    public abstract Transformer newTransformer( )
        throws TransformerConfigurationException;
    public abstract void setAttribute(String name, Object value)
        throws IllegalArgumentException;
    public abstract void setErrorListener(ErrorListener listener)
        throws IllegalArgumentException;
    public abstract void setURIResolver(URIResolver resolver);
}</pre></blockquote>


<h4 class="refsect1">TransformerFactoryConfigurationError</h4>

<p><a name="INDEX-1263" />
<a name="INDEX-1264" />This
error is typically seen when a transformer factory class cannot be
instantiated. This is a good indicator of CLASSPATH problems.
</p>

<blockquote><pre class="code">public class TransformerFactoryConfigurationError
        extends Error {
    public TransformerFactoryConfigurationError(String msg);
    public TransformerFactoryConfigurationError(Exception e);
    public TransformerFactoryConfigurationError(Exception e, String msg);
    public TransformerFactoryConfigurationError( );
    public Exception getException( );
    public String getMessage( );
}</pre></blockquote>


<h4 class="refsect1">URIResolver</h4>

<p><a name="INDEX-1265" />
<a name="INDEX-1266" />In
most cases, the JAXP provides a <tt class="literal">URIResolver</tt>
instance. By creating a custom implementation, however, applications
can define how relative URI references in XSLT stylesheets are
resolved. For instance, the <tt class="literal">URIResolver</tt> defines
how <tt class="literal">&lt;xsl:include href="header.xslt"/&gt;</tt>
locates <em class="filename">header.xslt</em>.
</p>

<a name="INDEX-1267" /><a name="INDEX-1268" /><a name="INDEX-1269" /><blockquote><pre class="code">public interface URIResolver {
    Source resolve(String href, String base)
        throws TransformerException;
}
</pre></blockquote>

</div>

<a name="INDEX-1270" /><a name="INDEX-1271" /><a name="INDEX-1272" /><a name="INDEX-1273" /><a name="INDEX-1274" /><a name="INDEX-1275" /><a name="INDEX-1276" /><a name="INDEX-1277" /><a name="INDEX-1278" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b>Package: javax.xml.transform.dom</b></font></td><td align="right"><i></i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><table width="515" border="0" cellpadding="5"><tr><td align="left" /><td align="right" /></tr></table>
<p><a name="INDEX-1270" />
<a name="INDEX-1271" />This
package defines how to perform
<a name="INDEX-1272" />transformations using DOM.
</p>

<h4 class="refsect1">DOMLocator</h4>

<p><a name="INDEX-1273" />
<a name="INDEX-1274" />This
interface allows applications to locate the DOM node where an error
occurs. Since <tt class="literal">TransformerException</tt> returns
instances of <tt class="literal">SourceLocator</tt>, applications must
downcast to obtain <tt class="literal">DOMLocator</tt> objects.
</p>

<blockquote><pre class="code">public interface DOMLocator
        extends SourceLocator {
    Node getOriginatingNode( );
}</pre></blockquote>


<h4 class="refsect1">DOMResult</h4>

<p><a name="INDEX-1275" />
<a name="INDEX-1276" />This
class allows transformation results to be stored in a DOM tree. If
the default constructor is used, the XSLT processor creates a DOM
<tt class="literal">Document</tt> node. Otherwise, applications can specify
a DOM <tt class="literal">Document</tt>,
<tt class="literal">DocumentFragment</tt>, or <tt class="literal">Element</tt>
node as the constructor parameter.
</p>

<p>The <tt class="literal">FEATURE</tt> constant is used with
<tt class="literal">TransformerFactory.getFeature( )</tt> to determine if
the factory supports <tt class="literal">DOMResult</tt>.
</p>

<blockquote><pre class="code">public class DOMResult
        implements Result {
    public static final String FEATURE = 
        "http://javax.xml.transform.dom.DOMResult/feature";
    public DOMResult(Node node);
    public DOMResult(Node node, String systemId);
    public DOMResult( );
    public Node getNode( );
    public String getSystemId( );
    public void setNode(Node node);
    public void setSystemId(String systemId);
}</pre></blockquote>


<h4 class="refsect1">DOMSource</h4>

<p><a name="INDEX-1277" />
<a name="INDEX-1278" />This
class allows a DOM tree to be used as an input source. In practice,
the <tt class="literal">node</tt> parameter is usually an instance of a DOM
<tt class="literal">Document</tt>. However, XSLT processors may also
support any other type of DOM <tt class="literal">Node</tt>. The system id
is still important for resolving relative URI references.
</p>

<blockquote><pre class="code">public class DOMSource
        implements Source {
    public static final String FEATURE =
        "http://javax.xml.transform.dom.DOMSource/feature";
    public DOMSource(Node node);
    public DOMSource(Node node, String systemId);
    public DOMSource( );
    public Node getNode( );
    public String getSystemId( );
    public void setNode(Node node);
    public void setSystemId(String systemId);
}</pre></blockquote>

</div>

<a name="INDEX-1279" /><a name="INDEX-1280" /><a name="INDEX-1281" /><a name="INDEX-1282" /><a name="INDEX-1283" /><a name="INDEX-1284" /><a name="INDEX-1285" /><a name="INDEX-1286" /><a name="INDEX-1287" /><a name="INDEX-1288" /><a name="INDEX-1289" /><a name="INDEX-1290" /><a name="INDEX-1291" /><a name="INDEX-1292" /><a name="INDEX-1293" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b>Package: javax.xml.transform.sax</b></font></td><td align="right"><i></i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><table width="515" border="0" cellpadding="5"><tr><td align="left" /><td align="right" /></tr></table>
<p><a name="INDEX-1279" />
<a name="INDEX-1280" />This
package defines how to perform
<a name="INDEX-1281" />transformations
using SAX. Example usages can be found in <a href="ch05_01.htm">Chapter 5, "XSLT Processing with Java"</a>. 
</p>

<h4 class="refsect1">SAXResult</h4>

<p><a name="INDEX-1282" />
<a name="INDEX-1283" />This
class makes it possible to emit SAX events as the result of a
transformation. The <tt class="literal">ContentHandler</tt> parameter
receives these events.
</p>

<blockquote><pre class="code">public class SAXResult
        implements Result {
    public static final String FEATURE =
        "http://javax.xml.transform.sax.SAXResult/feature";
    public SAXResult(ContentHandler handler);
    public SAXResult( );
    public ContentHandler getHandler( );
    public LexicalHandler getLexicalHandler( );
    public String getSystemId( );
    public void setHandler(ContentHandler handler);
    public void setLexicalHandler(LexicalHandler handler);
    public void setSystemId(String systemId);
}</pre></blockquote>


<h4 class="refsect1">SAXSource</h4>

<p><a name="INDEX-1284" />
<a name="INDEX-1285" />This
allows output from a SAX parser to be fed into an XSLT processor for
transformation. It is also used to build <tt class="literal">Templates</tt>
or <tt class="literal">Transformer</tt> objects using
<tt class="literal">TransformerFactory</tt>.
</p>

<blockquote><pre class="code">public class SAXSource
        implements Source {
    public static final String FEATURE =
        "http://javax.xml.transform.sax.SAXSource/feature";
    public SAXSource(XMLReader reader, InputSource inputSource);
    public SAXSource(InputSource inputSource);
    public SAXSource( );
    public InputSource getInputSource( );
    public String getSystemId( );
    public XMLReader getXMLReader( );
    public void setInputSource(InputSource inputSource);
    public void setSystemId(String systemId);
    public void setXMLReader(XMLReader reader);
    public static InputSource sourceToInputSource(Source source);
}</pre></blockquote>


<h4 class="refsect1">SAXTransformerFactory</h4>

<p><a name="INDEX-1286" />
<a name="INDEX-1287" />This
is a subclass of <tt class="literal">TransformerFactory</tt> that adds
SAX-specific methods. To create an instance of this class, create a
<tt class="literal">TransformerFactory</tt> instance and downcast if
<tt class="literal">transFact.getFeature(SAXTransformerFactory.FEATURE)</tt>
returns <tt class="literal">true</tt>.
</p>

<blockquote><pre class="code">public abstract class SAXTransformerFactory
        extends TransformerFactory {
    public static final String FEATURE =
        "http://javax.xml.transform.sax.SAXTransformerFactory/feature";
    public static final String FEATURE_XMLFILTER =
        "http://javax.xml.transform.sax.SAXTransformerFactory/feature/xmlfilter";
    protected SAXTransformerFactory( );
    public abstract TemplatesHandler newTemplatesHandler( )
        throws TransformerConfigurationException;
    public abstract TransformerHandler newTransformerHandler(Templates templates)
        throws TransformerConfigurationException;
    public abstract TransformerHandler newTransformerHandler( )
        throws TransformerConfigurationException;
    public abstract TransformerHandler newTransformerHandler(Source src)
        throws TransformerConfigurationException;
    public abstract XMLFilter newXMLFilter(Templates templates)
        throws TransformerConfigurationException;
    public abstract XMLFilter newXMLFilter(Source src)
        throws TransformerConfigurationException;
}</pre></blockquote>


<h4 class="refsect1">TemplatesHandler</h4>

<p><a name="INDEX-1288" />
<a name="INDEX-1289" />This
acts as a SAX 2 <tt class="literal">ContentHandler</tt>, which receives SAX
events as a document is parsed. Once parsing is complete, it returns
a <tt class="literal">Templates</tt> object. Instances are constructed
using <tt class="literal">SAXTransformerFactory</tt>.
</p>

<blockquote><pre class="code">public interface TemplatesHandler
        extends ContentHandler {
    String getSystemId( );
    Templates getTemplates( );
    void setSystemId(String systemId);
}</pre></blockquote>


<h4 class="refsect1">TransformerHandler</h4>

<p><a name="INDEX-1290" />
<a name="INDEX-1291" />Instances
of this interface receive SAX events and produce
<tt class="literal">Transformer</tt> objects once parsing is complete.
Instances are constructed using
<tt class="literal">SAXTransformerFactory</tt>.
</p>

<a name="INDEX-1292" /><a name="INDEX-1293" /><blockquote><pre class="code">public interface TransformerHandler
        extends ContentHandler, LexicalHandler, DTDHandler {
    String getSystemId( );
    Transformer getTransformer( );
    void setResult(Result result)
        throws IllegalArgumentException;
    void setSystemId(String systemId);
}
</pre></blockquote>

</div>

<a name="INDEX-1294" /><a name="INDEX-1295" /><a name="INDEX-1296" /><a name="INDEX-1297" /><a name="INDEX-1298" /><a name="INDEX-1299" /><a name="INDEX-1300" /><a name="INDEX-1301" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b>Package: javax.xml.transform.stream</b></font></td><td align="right"><i></i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><table width="515" border="0" cellpadding="5"><tr><td align="left" /><td align="right" /></tr></table>
<p><a name="INDEX-1294" />
<a name="INDEX-1295" />This
package defines how to perform
<a name="INDEX-1296" />transformations
using Java I/O streams.
</p>

<h4 class="refsect1">StreamResult</h4>

<p><a name="INDEX-1297" />
<a name="INDEX-1298" />This
allows transformation results to be sent to a
<tt class="literal">File</tt>, <tt class="literal">Writer</tt>, or
<tt class="literal">OutputStream</tt>.
</p>

<blockquote><pre class="code">public class StreamResult
        implements Result {
    public static final String FEATURE =
        "http://javax.xml.transform.stream.StreamResult/feature";
    public StreamResult(OutputStream outputStream);
    public StreamResult(Writer writer);
    public StreamResult(String systemId);
    public StreamResult(File f);
    public StreamResult( );
    public OutputStream getOutputStream( );
    public String getSystemId( );
    public Writer getWriter( );
    public void setOutputStream(OutputStream outputStream);
    public void setSystemId(File f);
    public void setSystemId(String systemId);
    public void setWriter(Writer writer);
}</pre></blockquote>


<h4 class="refsect1">StreamSource</h4>

<p><a name="INDEX-1299" />
<a name="INDEX-1300" />This
supports input from a <tt class="literal">URL</tt>,
<tt class="literal">File</tt>, <tt class="literal">Reader</tt>, or
<tt class="literal">InputStream</tt>. The system id is used to resolve
relative URLs in the XML and XSLT.
</p>

<a name="INDEX-1301" /><blockquote><pre class="code">public class StreamSource
        implements Source {
    public static final String FEATURE = 
        "http://javax.xml.transform.stream.StreamSource/feature";
    public StreamSource(InputStream inputStream);
    public StreamSource(InputStream inputStream, String systemId);
    public StreamSource(Reader reader);
    public StreamSource(Reader reader, String systemId);
    public StreamSource(String systemId);
    public StreamSource(File f);
    public StreamSource( );
    public InputStream getInputStream( );
    public String getPublicId( );
    public Reader getReader( );
    public String getSystemId( );
    public void setInputStream(InputStream inputStream);
    public void setPublicId(String systemId);
    public void setReader(Reader reader);
    public void setSystemId(File f);
    public void setSystemId(String systemId);
}</pre></blockquote>

</div>

<hr width="684" align="left" />
<div class="navbar"><table width="684" border="0"><tr><td align="left" valign="top" width="228"><a href="appa_01.htm"><img src="../gifs/txtpreva.gif" alt="Previous" border="0" /></a></td><td align="center" valign="top" width="228"><a href="index.htm"><img src="../gifs/txthome.gif" alt="Home" border="0" /></a></td><td align="right" valign="top" width="228"><a href="appc_01.htm"><img src="../gifs/txtnexta.gif" alt="Next" border="0" /></a></td></tr><tr><td align="left" valign="top" width="228">A. Discussion Forum Code</td><td align="center" valign="top" width="228"><a href="index/index.htm"><img src="../gifs/index.gif" alt="Book Index" border="0" /></a></td><td align="right" valign="top" width="228">C. XSLT Quick Reference</td></tr></table></div>
<hr width="684" align="left" />

<img src="../gifs/navbar.gif" usemap="#library-map" border="0" alt="Library Navigation Links" />
<p><p><font size="-1"><a href="copyrght.htm">Copyright &copy; 2002</a> O'Reilly &amp; Associates. All rights reserved.</font></p>

<map name="library-map"><area shape="rect" coords="0,0,85,93" href="../index.htm"><area shape="rect" coords="85,0,180,98" href="../sax2/index.htm"><area shape="rect" coords="182,-1,261,100" href="../xmlnut/index.htm"><area shape="rect" coords="263,1,384,96" href="../jxml/index.htm"><area shape="rect" coords="386,1,463,100" href="index.htm"><area shape="rect" coords="466,1,533,112" href="../xslt/index.htm"><area shape="rect" coords="535,-1,610,108" href="../schema/index.htm"><area shape="rect" coords="613,1,696,121" href="../pxml/index.htm"></map>

</body></html>