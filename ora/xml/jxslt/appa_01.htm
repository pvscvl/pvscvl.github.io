<html><head><title>Discussion Forum Code (Java and XSLT)</title><link rel="stylesheet" type="text/css" href="../style/style1.css" />

<meta name="DC.Creator" content="Eric M. Burke" /><meta name="DC.Format" content="text/xml" scheme="MIME" /><meta name="DC.Language" content="en-US" /><meta name="DC.Publisher" content="O'Reilly &amp; Associates, Inc." /><meta name="DC.Source" scheme="ISBN" content="0596001453L" /><meta name="DC.Subject.Keyword" content="stuff" /><meta name="DC.Title" content="Java and XSLT" /><meta name="DC.Type" content="Text.Monograph" />

</head><body bgcolor="#ffffff">

<img src="gifs/smbanner.gif" usemap="#banner-map" border="0" alt="Book Home" /><map name="banner-map"><area shape="rect" coords="1,-2,616,66" href="index.htm" alt="Java and XSLT" /><area shape="rect" coords="629,-11,726,25" href="jobjects/fsearch.htm" alt="Search this book" /></map>

<div class="navbar"><table width="684" border="0"><tr><td align="left" valign="top" width="228"><a href="ch10_04.htm"><img src="../gifs/txtpreva.gif" alt="Previous" border="0" /></a></td><td align="center" valign="top" width="228" /><td align="right" valign="top" width="228"><a href="appb_01.htm"><img src="../gifs/txtnexta.gif" alt="Next" border="0" /></a></td></tr></table></div>


<h1 class="chapter">Appendix A. Discussion Forum Code</h1><p>This appendix contains all of the remaining code from the discussion
forum example presented in <a href="ch07_01.htm">Chapter 7, "Discussion Forum"</a>. These are
the "simple" files that did not merit a lot of
explanation in the text. All of the source code can be downloaded
from this book's companion web site at <a href="../../../../../../www.oreilly.com/catalog/javaxslt">http://www.oreilly.com/catalog/javaxslt</a>.
</p>

<p><a name="INDEX-1201" /><em class="filename">BoardSummaryImpl.java(1)</em>
(shown in <a href="appa_01.htm">Example A-1</a>) provides a default
implementation of the <a name="INDEX-1202" /> <a name="INDEX-1203" /><tt class="literal">BoardSummary</tt>
interface. 
</p>

<a name="javaxslt-APP-A-EX-1" /><div class="example">
<h4 class="objtitle">Example A-1. BoardSummaryImpl.java(1) </h4>
<blockquote><pre class="code">package com.oreilly.forum.domain;

import com.oreilly.forum.domain.*;
import java.util.*;

/**
 * An implementation of the BoardSummary interface.
 */
public class BoardSummaryImpl implements BoardSummary {
    private long id;
    private String name;
    private String description;
    private List monthsWithMessages;

    /**
     * @param monthsWithMessages a list of MonthYear objects.
     */
    public BoardSummaryImpl(long id, String name, String description,
            List monthsWithMessages) {
        this.id = id;
        this.name = name;
        this.description = description;
        this.monthsWithMessages = monthsWithMessages;

    }

    public long getID( ) {
        return this.id;
    }

    public String getName( ) {
        return this.name;
    }

    public String getDescription( ) {
        return this.description;
    }

    /**
     * @return an iterator of &lt;code&gt;MonthYear&lt;/code&gt; objects.
     */
    public Iterator getMonthsWithMessages( ) {
        return this.monthsWithMessages.iterator( );
    }
} </pre></blockquote>
</div>

<p><em class="filename">BoardSummaryImpl.java(2)</em><a name="INDEX-1204" />
(shown in <a href="appa_01.htm">Example A-2</a>) is an alternate
implementation of the <tt class="literal">BoardSummary</tt> interface. This
class is used by the fake data implementation, which is useful for
testing purposes when a database is not available.
</p>

<a name="javaxslt-APP-A-EX-2" /><div class="example">
<h4 class="objtitle">Example A-2. BoardSummaryImpl.java(2) </h4>
<a name="INDEX-1205" /><a name="INDEX-1206" /><blockquote><pre class="code">package com.oreilly.forum.fakeimpl;

import com.oreilly.forum.domain.*;

import java.util.*;

public class BoardSummaryImpl implements BoardSummary {
    private long id;
    private String name;
    private String description;
    // a list of MonthYear objects
    private List monthsWithMessages;

    public BoardSummaryImpl(long id, String name, String description) {
        this.id = id;
        this.name = name;
        this.description = description;
        this.monthsWithMessages = new ArrayList( );
    }

    public void messageAdded(Message msg) {
        DayMonthYear createDate = msg.getCreateDate( );

        // update the monthsWithMessages list
        Iterator iter = this.monthsWithMessages.iterator( );
        while (iter.hasNext( )) {
            MonthYear curMonth = (MonthYear) iter.next( );
            if (createDate.getMonth() == curMonth.getMonth( )
                    &amp;&amp; createDate.getYear() == curMonth.getYear( )) {
                return;
            }
        }

        this.monthsWithMessages.add(createDate);
    }

    public long getID( ) {
        return this.id;
    }

    public String getName( ) {
        return this.name;
    }

    public String getDescription( ) {
        return this.description;
    }

    public Iterator getMonthsWithMessages( ) {
        return this.monthsWithMessages.iterator( );
    }
} 
</pre></blockquote>
</div>

<p><em class="filename">DataException.java</em><a name="INDEX-1207" />
(shown in <a href="appa_01.htm">Example A-3</a>) is a generic exception that
occurs when something goes wrong with the underlying database. This
prevents database-specific code from creeping into the application,
making it possible to migrate to other data sources in the future.
</p>

<a name="javaxslt-APP-A-EX-3" /><div class="example">
<h4 class="objtitle">Example A-3. DataException.java </h4>
<blockquote><pre class="code">package com.oreilly.forum.adapter;

/**
 * An exception that indicates some operation with the back-end
 * data source failed.
 */
public class DataException extends Exception {
    private Throwable rootCause;

    /**
     * Wrap a DataException around another throwable.
     */
    public DataException(Throwable rootCause) {
        super(rootCause.getMessage( ));
        this.rootCause = rootCause;
    }

    /**
     * Construct an exception with the specified detail message.
     */
    public DataException(String message) {
        super(message);
    }

    /**
     * @return a reference to the root exception or null.
     */
    public Throwable getRootCause( ) {
        return this.rootCause;
    }
} </pre></blockquote>
</div>

<p><em class="filename">DataUtil.java</em><a name="INDEX-1208" /> (shown
in <a href="appa_01.htm">Example A-4</a>) is a simple utility method that
deals with dates.
</p>

<a name="javaxslt-APP-A-EX-4" /><div class="example">
<h4 class="objtitle">Example A-4. DateUtil.java </h4>
<blockquote><pre class="code">package com.oreilly.forum.domain;

import java.util.*;

/**
 * Misc utility functions for dates. Methods are synchronized because
 * the same Calendar instance is shared.
 */
public final class DateUtil {

    private static Calendar cal = Calendar.getInstance( );

    /**
     * @return the day of the month for a given date.
     */
    public synchronized static int getDayOfMonth(Date date) {
        cal.setTime(date);
        return cal.get(Calendar.DAY_OF_MONTH);
    }

    /**
     * @return the month number for a given date.
     */
    public synchronized static int getMonth(Date date) {
        cal.setTime(date);
        return cal.get(Calendar.MONTH);
    }

    /**
     * @return the year number for the given date.
     */
    public synchronized static int getYear(Date date) {
        cal.setTime(date);
        return cal.get(Calendar.YEAR);
    }

    private DateUtil( ) {
    }
}</pre></blockquote>
</div>

<p><em class="filename">DayMonthYear.java</em><a name="INDEX-1209" />
(shown in <a href="appa_01.htm">Example A-5</a>) is a helper class that groups
a day, month, and year together. It also supports comparisons for
sorting purposes.
</p>

<a name="javaxslt-APP-A-EX-5" /><div class="example">
<h4 class="objtitle">Example A-5. DayMonthYear.java </h4>
<blockquote><pre class="code">package com.oreilly.forum.domain;

import java.util.Date;

/**
 * Represents a day, month, and year.
 */
public class DayMonthYear extends MonthYear {
    private int day;

    public DayMonthYear( ) {
        this(new Date( ));
    }

    public DayMonthYear(Date date) {
        super(date);
        this.day = DateUtil.getDayOfMonth(date);
    }

    public DayMonthYear(int day, int month, int year) {
        super(month, year);
        this.day = day;
    }

    public int getDay( ) {
        return this.day;
    }

    public boolean equals(Object obj) {
        if (obj instanceof DayMonthYear) {
            DayMonthYear rhs = (DayMonthYear) obj;
            return super.equals(obj) &amp;&amp; this.day == rhs.day;
        }
        return false;
    }

    public int hashCode( ) {
        return super.hashCode( ) ^ this.day;
    }

    public int compareTo(Object obj) {
        DayMonthYear rhs = (DayMonthYear) obj;
        int comparison = super.compareTo(obj);
        if (comparison == 0) {
            if (this.day &lt; rhs.day) {
                return -1;
            } else if (this.day &gt; rhs.day) {
                return 1;
            }
        }
        return comparison;
    }

    public String toString( ) {
        return getMonth() + "/" + getDay() + "/" + getYear( );
    }
}</pre></blockquote>
</div>

<p><em class="filename">FakeDataAdapter.java</em><a name="INDEX-1210" />
(shown in <a href="appa_01.htm">Example A-6</a>) allows the discussion forum
to be executed without any database. This class was written before
the database was implemented, and is useful for testing purposes
only.
</p>

<a name="javaxslt-APP-A-EX-6" /><div class="example">
<h4 class="objtitle">Example A-6. FakeDataAdapter.java </h4>
<blockquote><pre class="code">package com.oreilly.forum.fakeimpl;

import com.oreilly.forum.*;
import com.oreilly.forum.adapter.*;
import com.oreilly.forum.domain.*;
import java.util.*;

public class FakeDataAdapter extends DataAdapter {
    // a list of BoardSummary objects
    private List allBoards;
    private static long nextMessageID = 0;
    private Map messageMap = new HashMap( );

    public FakeDataAdapter( ) throws DataException {
        this.allBoards = new ArrayList( );

        BoardSummary bs0 = new BoardSummaryImpl(0L,
                "Java Programming",
                "General programming questions about Java.");
        BoardSummary bs1 = new BoardSummaryImpl(1L,
                "XSLT Stylesheet Techniques",
                "Writing effective XSLT stylesheets.");
        this.allBoards.add(bs0);
        this.allBoards.add(bs1);

        this.postNewMessage(0L, "First subject in Java Prog",
                "burke_e@yahoo.com", "Sample message text");

    }

    /**
     * @param msgID must be a valid message identifier.
     * @return the message with the specified id.
     * @throws DataException if msgID does not exist or a database
     * error occurs.
     */
    public Message getMessage(long msgID) throws DataException {
        Message msg = (Message) this.messageMap.get(new Long(msgID));
        if (msg != null) {
            return msg;
        }
        throw new DataException("Invalid msgID");
    }

    /**
     * If no messages exist for the specified board and month, return
     * an empty iterator.
     * @return an iterator of &lt;code&gt;MessageSummary&lt;/code&gt; objects.
     * @throws DataException if the boardID is illegal or a database
     * error occurs.
     */
    public Iterator getAllMessages(long boardID, MonthYear month)
            throws DataException {
        // this is slow, but works fine for a fake implementation
        List msgs = new ArrayList( );
        Iterator iter = this.messageMap.values().iterator( );
        while (iter.hasNext( )) {
            MessageSummary curMsg = (MessageSummary) iter.next( );
            if (curMsg.getBoard().getID( ) == boardID
                    &amp;&amp; month.containsInMonth(curMsg.getCreateDate( ))) {
                msgs.add(curMsg);
            }
        }
        return msgs.iterator( );
    }

    /**
     * Add a reply to an existing message.
     *
     * @throws DataException if a database error occurs, or if any
     * parameter is illegal.
     */
    public Message replyToMessage(long origMsgID, String msgSubject,
            String authorEmail, String msgText) throws DataException {
        MessageSummary origMsg = getMessage(origMsgID);
        long msgID = getNextMessageID( );

        Message msg = new MessageImpl(msgID, new DayMonthYear( ), origMsg.getBoard( ),
                msgSubject, authorEmail, msgText, origMsgID);

        this.messageMap.put(new Long(msg.getID( )), msg);
        return msg;
    }

    /**
     * Post a new message.
     *
     * @return the newly created message.
     * @throws DataException if a database error occurs, or if any
     * parameter is illegal.
     */
    public Message postNewMessage(long boardID, String msgSubject,
            String authorEmail, String msgText) throws DataException {
        BoardSummary boardSum = getBoardSummary(boardID);
        long msgID = getNextMessageID( );

        Message msg = new MessageImpl(msgID, new DayMonthYear( ), boardSum,
                msgSubject, authorEmail, msgText, -1);
        this.messageMap.put(new Long(msg.getID( )), msg);

        ((BoardSummaryImpl) boardSum).messageAdded(msg);

        return msg;
    }

    /**
     * @return an iterator of &lt;code&gt;BoardSummary&lt;/code&gt; objects.
     */
    public Iterator getAllBoards( ) throws DataException {
        return this.allBoards.iterator( );
    }

    public BoardSummary getBoardSummary(long boardID)
            throws DataException {
        Iterator iter = getAllBoards( );
        while (iter.hasNext( )) {
            BoardSummary curBoard = (BoardSummary) iter.next( );
            if (curBoard.getID( ) == boardID) {
                return curBoard;
            }
        }
        throw new DataException("Illegal boardID: " + boardID);
    }

    private synchronized static long getNextMessageID( ) {
        nextMessageID++;
        return nextMessageID;
    }
} </pre></blockquote>
</div>

<p><em class="filename">MessageImpl.java</em><a name="INDEX-1211" />
(shown in <a href="appa_01.htm">Example A-7</a>) is an implementation of the
<tt class="literal">Message</tt><a name="INDEX-1212" />
<a name="INDEX-1213" />
interface.
</p>

<a name="javaxslt-APP-A-EX-7" /><div class="example">
<h4 class="objtitle">Example A-7. MessageImpl.java </h4>
<blockquote><pre class="code">package com.oreilly.forum.domain;

import java.util.*;

/**
 * An implementation of the Message interface.
 */
public class MessageImpl extends MessageSummaryImpl implements Message {
    private String text;

    /**
     * Construct a new instance of this class.
     */
    public MessageImpl(long id, DayMonthYear createDate,
            BoardSummary board, String subject, String authorEmail,
            String text, long inReplyTo) {
        super(id, createDate, board, subject, authorEmail, inReplyTo);
        this.text = text;
    }

    /**
     * @return the text of this message.
     */
    public String getText( ) {
        return this.text;
    }
} </pre></blockquote>
</div>

<p><em class="filename">MessageSummaryImpl.java</em><a name="INDEX-1214" />
<a name="INDEX-1215" />
<a name="INDEX-1216" />
(shown in <a href="appa_01.htm">Example A-8</a>) is an implementation of the
<tt class="literal">MessageSummary</tt> interface.
</p>

<a name="javaxslt-APP-A-EX-8" /><div class="example">
<h4 class="objtitle">Example A-8. MessageSummaryImpl.java </h4>
<blockquote><pre class="code">package com.oreilly.forum.domain;

import java.util.*;

/**
 * Implementation of the MessageSummary interface.
 */
public class MessageSummaryImpl implements MessageSummary {
    private long id;
    private BoardSummary board;
    private String subject;
    private String authorEmail;
    private DayMonthYear createDate;
    private long inReplyTo;

    public MessageSummaryImpl(long id, DayMonthYear createDate,
            BoardSummary board, String subject, String authorEmail,
            long inReplyTo) {
        this.id = id;
        this.createDate = createDate;
        this.board = board;
        this.subject = subject;
        this.authorEmail = authorEmail;
        this.inReplyTo = inReplyTo;
    }

    public long getInReplyTo( ) {
        return this.inReplyTo;
    }

    public long getID( ) {
        return this.id;
    }

    public DayMonthYear getCreateDate( ) {
        return this.createDate;
    }

    public BoardSummary getBoard( ) {
        return this.board;
    }

    public String getSubject( ) {
        return this.subject;
    }

    public String getAuthorEmail( ) {
        return this.authorEmail;
    }

    public boolean equals(Object obj) {
        if (obj instanceof MessageSummaryImpl) {
            MessageSummaryImpl rhs = (MessageSummaryImpl) obj;
            return this.id == rhs.id;
        }
        return false;
    }

    public int hashCode( ) {
        return (int) this.id;
    }

    /**
     * Sorts by create date followed by message subject.
     */
    public int compareTo(Object obj) {
        if (this == obj) {
            return 0;
        }
        MessageSummaryImpl rhs = (MessageSummaryImpl) obj;

        int comparison = this.createDate.compareTo(rhs.createDate);
        if (comparison != 0) {
            return comparison;
        }

        comparison = this.subject.compareTo(rhs.subject);
        if (comparison != 0) {
            return comparison;
        }

        return 0;
    }
} </pre></blockquote>
</div>

<p><em class="filename">MonthYear.java</em><a name="INDEX-1217" />
(shown in <a href="appa_01.htm">Example A-9</a>) groups a month and year
together. It also supports sorting.
</p>

<a name="javaxslt-APP-A-EX-9" /><div class="example">
<h4 class="objtitle">Example A-9. MonthYear.java </h4>
<blockquote><pre class="code">package com.oreilly.forum.domain;

import java.io.Serializable;
import java.util.*;

/**
 * Represents a month and a year.
 */
public class MonthYear implements Comparable, Serializable {
    private int month;
    private int year;

    /**
     * Construct a new object representing the current instant in time.
     */
    public MonthYear( ) {
        this(new Date( ));
    }

    /**
     * Construct a new object with the given date.
     */
    public MonthYear(Date date) {
        this(DateUtil.getMonth(date), DateUtil.getYear(date));
    }

    /**
     * Construct a new object with the given month and year.
     * @param month a zero-based month, just like java.util.Calendar.
     */
    public MonthYear(int month, int year) {
        this.month = month;
        this.year = year;
    }

    /**
     * Compare this MonthYear object to another.
     */
    public int compareTo(Object obj) {
        MonthYear rhs = (MonthYear) obj;
        // first compare year
        if (this.year &lt; rhs.year) {
            return -1;
        } else if (this.year &gt; rhs.year) {
            return 1;
        }
        // then month
        if (this.month &lt; rhs.month) {
            return -1;
        } else if (this.month &gt; rhs.month) {
            return 1;
        }

        return 0;
    }

    /**
     * @return true if the specified date occurs sometime during this month.
     */
    public boolean containsInMonth(DayMonthYear date) {
        return date.getMonth( ) == this.month
                &amp;&amp; date.getYear( ) == this.year;
    }

    /**
     * @return the month number, starting with 0 for January.
     */
    public int getMonth( ) {
        return this.month;
    }

    /**
     * @return the year number.
     */
    public int getYear( ) {
        return this.year;
    }

    public boolean equals(Object obj) {
        if (obj instanceof MonthYear) {
            MonthYear rhs = (MonthYear) obj;
            return this.month == rhs.month
                    &amp;&amp; this.year == rhs.year;
        }
        return false;
    }

    public int hashCode( ) {
        return this.month ^ this.year;
    }
}</pre></blockquote>
</div>

<p>The <tt class="literal">viewMsg.xslt</tt><a name="INDEX-1218" /> XSLT stylesheet (shown in <a href="appa_01.htm">Example A-10</a>) displays a web page for a single message.
</p>

<a name="javaxslt-APP-A-EX-10" /><div class="example">
<h4 class="objtitle">Example A-10. viewMsg.xslt </h4>
<blockquote><pre class="code">&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;!--
***********************************************************
** viewMsg.xslt
**
** Shows details for a specific message.
***********************************************************
--&gt;
&lt;xsl:stylesheet version="1.0" 
  xmlns:xsl="http://www.w3.org/1999/XSL/Transform"&gt;
  &lt;xsl:import href="utils.xslt"/&gt;
  &lt;xsl:param name="rootDir" select="'../docroot/'"/&gt;
  &lt;xsl:output method="xml" version="1.0" encoding="UTF-8" 
    indent="yes" 
    doctype-public="-//W3C//DTD XHTML 1.0 Strict//EN" 
    doctype-system="http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd"/&gt;
    
   &lt;!--
  **********************************************************
  ** Create the XHTML web page
  *******************************************************--&gt;
  &lt;xsl:template match="/"&gt;
    &lt;html xmlns="http://www.w3.org/1999/xhtml"&gt;
      &lt;head&gt;
        &lt;title&gt;View Message&lt;/title&gt;
        &lt;link href="{$rootDir}forum.css" 
            rel="stylesheet" type="text/css"/&gt;
      &lt;/head&gt;
      &lt;body&gt;
        &lt;div class="box1"&gt;
          &lt;h1&gt;View Message&lt;/h1&gt;
          &lt;div&gt;
            &lt;xsl:value-of select="message/board/name"/&gt;
          &lt;/div&gt;
        &lt;/div&gt;
        &lt;!-- ===== Quick Actions ====== --&gt;
        &lt;h3&gt;Quick Actions&lt;/h3&gt;
        &lt;ul&gt;
          &lt;li&gt;Return to 
                           &lt;!-- long line wrapped --&gt;
          &lt;a href="viewMonth?boardID={message/board/@id}&amp;amp;month={
               message/@month}&amp;amp;year={message/@year}"&gt;
              &lt;xsl:call-template name="utils.printLongMonthName"&gt;
                &lt;xsl:with-param name="monthNumber" select="message/@month"/&gt;
              &lt;/xsl:call-template&gt;,
          &lt;xsl:value-of select="message/@year"/&gt;
            &lt;/a&gt; messages for &lt;xsl:value-of select="message/board/name"/&gt;
          &lt;/li&gt;
          &lt;li&gt;Return to the &lt;a href="home"&gt;home page&lt;/a&gt;
          &lt;/li&gt;
          &lt;li&gt;
            &lt;a href="postMsg?mode=replyToMsg&amp;amp;origMsgID={message/@id}"&gt;Reply&lt;/a&gt; 
              to this message&lt;/li&gt;
        &lt;/ul&gt;
        &lt;h3&gt;Message&lt;/h3&gt;
        &lt;div class="box2"&gt;
          &lt;xsl:apply-templates select="message"/&gt;
        &lt;/div&gt;
      &lt;/body&gt;
    &lt;/html&gt;
  &lt;/xsl:template&gt;
  
  &lt;!--
  **********************************************************
  ** Show details for the &lt;message&gt; element
  *******************************************************--&gt;
  &lt;xsl:template match="message"&gt;
    &lt;div&gt;
      &lt;div style="font-weight: bold;"&gt;
        &lt;xsl:value-of select="subject"/&gt;
      &lt;/div&gt;
      &lt;xsl:text&gt; posted by &lt;/xsl:text&gt;
      &lt;a href="mailto:{authorEmail}"&gt;
        &lt;xsl:value-of select="authorEmail"/&gt;
      &lt;/a&gt;
      &lt;xsl:text&gt; on &lt;/xsl:text&gt;
      &lt;xsl:call-template name="utils.printShortMonthName"&gt;
        &lt;xsl:with-param name="monthNumber" select="@month"/&gt;
      &lt;/xsl:call-template&gt;
      &lt;xsl:text&gt; &lt;/xsl:text&gt;
      &lt;xsl:value-of select="@day"/&gt;
      &lt;xsl:text&gt;, &lt;/xsl:text&gt;
      &lt;xsl:value-of select="@year"/&gt;
      &lt;xsl:apply-templates select="inResponseTo"/&gt;
    &lt;/div&gt;
    &lt;pre&gt;
      &lt;xsl:value-of select="text"/&gt;
    &lt;/pre&gt;
  &lt;/xsl:template&gt;
  
  &lt;!--
  **********************************************************
  ** Show a link to the message that this one is in
  ** response to.
  *******************************************************--&gt;
  &lt;xsl:template match="inResponseTo"&gt;
    &lt;div style="text-indent: 2em;"&gt;
      &lt;xsl:text&gt;In response to &lt;/xsl:text&gt;
      &lt;a href="viewMsg?msgID={@id}"&gt;
        &lt;xsl:value-of select="subject"/&gt;
      &lt;/a&gt;
    &lt;/div&gt;
  &lt;/xsl:template&gt;
&lt;/xsl:stylesheet&gt;</pre></blockquote>
</div>



<hr width="684" align="left" />
<div class="navbar"><table width="684" border="0"><tr><td align="left" valign="top" width="228"><a href="ch10_04.htm"><img src="../gifs/txtpreva.gif" alt="Previous" border="0" /></a></td><td align="center" valign="top" width="228"><a href="index.htm"><img src="../gifs/txthome.gif" alt="Home" border="0" /></a></td><td align="right" valign="top" width="228"><a href="appb_01.htm"><img src="../gifs/txtnexta.gif" alt="Next" border="0" /></a></td></tr><tr><td align="left" valign="top" width="228">10.4. The Future of Wireless</td><td align="center" valign="top" width="228"><a href="index/index.htm"><img src="../gifs/index.gif" alt="Book Index" border="0" /></a></td><td align="right" valign="top" width="228">B. JAXP API Reference</td></tr></table></div>
<hr width="684" align="left" />

<img src="../gifs/navbar.gif" usemap="#library-map" border="0" alt="Library Navigation Links" />
<p><p><font size="-1"><a href="copyrght.htm">Copyright &copy; 2002</a> O'Reilly &amp; Associates. All rights reserved.</font></p>

<map name="library-map"><area shape="rect" coords="0,0,85,93" href="../index.htm"><area shape="rect" coords="85,0,180,98" href="../sax2/index.htm"><area shape="rect" coords="182,-1,261,100" href="../xmlnut/index.htm"><area shape="rect" coords="263,1,384,96" href="../jxml/index.htm"><area shape="rect" coords="386,1,463,100" href="index.htm"><area shape="rect" coords="466,1,533,112" href="../xslt/index.htm"><area shape="rect" coords="535,-1,610,108" href="../schema/index.htm"><area shape="rect" coords="613,1,696,121" href="../pxml/index.htm"></map>

</body></html>