<html><head><title>Another XSLT Example, Using XHTML (Java and XSLT)</title><link rel="stylesheet" type="text/css" href="../style/style1.css" />

<meta name="DC.Creator" content="Eric M. Burke" /><meta name="DC.Format" content="text/xml" scheme="MIME" /><meta name="DC.Language" content="en-US" /><meta name="DC.Publisher" content="O'Reilly &amp; Associates, Inc." /><meta name="DC.Source" scheme="ISBN" content="0596001453L" /><meta name="DC.Subject.Keyword" content="stuff" /><meta name="DC.Title" content="Java and XSLT" /><meta name="DC.Type" content="Text.Monograph" />

</head><body bgcolor="#ffffff">

<img src="gifs/smbanner.gif" usemap="#banner-map" border="0" alt="Book Home" /><map name="banner-map"><area shape="rect" coords="1,-2,616,66" href="index.htm" alt="Java and XSLT" /><area shape="rect" coords="629,-11,726,25" href="jobjects/fsearch.htm" alt="Search this book" /></map>

<div class="navbar"><table width="684" border="0"><tr><td align="left" valign="top" width="228"><a href="ch02_02.htm"><img src="../gifs/txtpreva.gif" alt="Previous" border="0" /></a></td><td align="center" valign="top" width="228" /><td align="right" valign="top" width="228"><a href="ch02_04.htm"><img src="../gifs/txtnexta.gif" alt="Next" border="0" /></a></td></tr></table></div>



<h2 class="sect1">2.3. Another XSLT Example, Using XHTML</h2>

<p><a href="ch02_03.htm">Example 2-5</a> <a name="INDEX-244" />contains <a name="INDEX-245" />XML <a name="INDEX-246" />data from an imaginary scheduling
program. A schedule has an owner followed by a list of appointments.
Each appointment has a date, start time, end time, subject, location,
and optional notes. Needless to say, a true scheduling application
probably has a lot more data, such as repeating appointments, alarms,
categories, and many other bells and whistles. Assuming that the
scheduler stores its data in XML files, we can easily add features
later by writing a <a name="INDEX-247" />stylesheet
to convert the existing XML files to some new format.
</p>

<a name="javaxslt-CHP-2-EX-5" /><div class="example">
<h4 class="objtitle">Example 2-5. schedule.xml </h4>
<blockquote><pre class="code">&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;?xml-stylesheet type="text/xsl" href="schedule.xslt"?&gt;
&lt;schedule&gt;
  &lt;owner&gt;
    &lt;name&gt;
      &lt;first&gt;Eric&lt;/first&gt;
      &lt;last&gt;Burke&lt;/last&gt;
    &lt;/name&gt;
  &lt;/owner&gt;
  &lt;appointment&gt;
    &lt;when&gt;
      &lt;date month="03" day="15" year="2001"/&gt;
      &lt;startTime hour="09" minute="30"/&gt;
      &lt;endTime hour="10" minute="30"/&gt;
    &lt;/when&gt;
    &lt;subject&gt;Interview potential new hire&lt;/subject&gt;
    &lt;location&gt;Rm 103&lt;/location&gt;
    &lt;note&gt;Ask Bob for an updated resume.&lt;/note&gt;
  &lt;/appointment&gt;
  &lt;appointment&gt;
    &lt;when&gt;
      &lt;date month="03" day="15" year="2001"/&gt;
      &lt;startTime hour="15" minute="30"/&gt;
      &lt;endTime hour="16" minute="30"/&gt;
    &lt;/when&gt;
    &lt;subject&gt;Dr. Appointment&lt;/subject&gt;
    &lt;location&gt;1532 Main Street&lt;/location&gt;
  &lt;/appointment&gt;
  &lt;appointment&gt;
    &lt;when&gt;
      &lt;date month="03" day="16" year="2001"/&gt;
      &lt;startTime hour="11" minute="30"/&gt;
      &lt;endTime hour="12" minute="30"/&gt;
    &lt;/when&gt;
    &lt;subject&gt;Lunch w/Boss&lt;/subject&gt;
    &lt;location&gt;Pizza Place on First Capitol Drive&lt;/location&gt;
  &lt;/appointment&gt;
&lt;/schedule&gt;</pre></blockquote>
</div>

<p><a name="INDEX-248" />As
you can see, the XML document uses both attributes
(<tt class="literal">month="03"</tt>) and child elements to represent its
data. XSLT has the ability to search for and transform both types of
data, as well as comments, processing instructions, and text. In our
current document, the appointments are stored in chronological order.
Later, we will see how to change the sort order using
<tt class="literal">&lt;xsl:sort&gt;</tt>.
</p>

<p>Unlike the earlier example, the second line of <a href="ch02_03.htm">Example 2-5</a> contains a reference to the XSLT stylesheet:
</p>

<blockquote><pre class="code">&lt;?xml-stylesheet type="text/xsl" href="schedule.xslt"?&gt;</pre></blockquote>

<p>This processing instruction is entirely optional. When viewing the
XML document in a web browser that supports XSLT, this is the
stylesheet that is used. If you apply the stylesheet from the command
line or from a server-side process, however, you normally specify
both the XML document and the XSLT document as parameters to the
processor. Because of this capability, the processing instruction
shown does not force that particular stylesheet to be used. From a
development perspective, including this line quickly displays your
work because you simply load the XML document into a compatible web
browser, and the stylesheet is loaded automatically.
</p>

<a name="ch02-15-fm2xml" /><blockquote><b>NOTE:</b> 

In this book, the <tt class="literal">xml-stylesheet</tt> processing instruction uses <tt class="literal">type="text/xsl"</tt>. However, some processors use <tt class="literal">type="text/xml"</tt>, which does not work with Microsoft Internet Explorer. The XSLT specification contains one example, which uses <tt class="literal">"text/xml"</tt>.
</p></blockquote>
<p><a href="ch02_03.htm">Figure 2-3</a> shows the XHTML output from an XSLT
transformation of <em class="filename">schedule.xml</em>. As you can see,
the stylesheet is capable of producing content that does not appear
in the original XML data, such as <tt class="literal">"Subject:"</tt>. It
can also selectively copy element content and attribute values from
the XML source to the result tree; nothing requires every piece of
data to be copied.
</p>

<a name="javaxslt-CHP-2-FIG-3" /><div class="figure"><img src="figs/jxt_0203.gif" alt="Figure 2-3" width="388" height="416" /></div><h4 class="objtitle">Figure 2-3. XHTML output</h4>

<p>The XSLT stylesheet that produces this output is shown in <a href="ch02_03.htm">Example 2-6</a>. As mentioned previously, XSLT stylesheets
must be well-formed XML documents. Once again, we use
<em class="filename">.xslt</em> as the <a name="INDEX-249" />
<a name="INDEX-250" />filename extension, but
<em class="filename">.xsl</em> is also common. This stylesheet is based on
the skeleton document presented in <a href="ch02_02.htm">Example 2-4</a>.
However, it produces XHTML instead of HTML.<a name="INDEX-251" />
</p>

<a name="javaxslt-CHP-2-EX-6" /><div class="example">
<h4 class="objtitle">Example 2-6. schedule.xslt </h4>
<blockquote><pre class="code">&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;xsl:stylesheet
    version="1.0"
    xmlns:xsl="http://www.w3.org/1999/XSL/Transform"&gt;
  <tt class="userinput"><b>&lt;xsl:output method="xml"
      doctype-public="-//W3C//DTD XHTML 1.0 Transitional//EN"
      doctype-system="http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd"/&gt;</b></tt>
  &lt;!--****************************************************************
      ** "/" template
      *************************************************************--&gt;
  &lt;xsl:template match="/"&gt;
    <tt class="userinput"><b>&lt;html xmlns="http://www.w3.org/1999/xhtml"&gt;</b></tt>
      &lt;head&gt;
        &lt;title&gt;Schedule&lt;/title&gt;
      &lt;/head&gt;
      &lt;body&gt;
        &lt;h2 align="center"&gt;
          &lt;xsl:value-of select="schedule/owner/name/first"/&gt;
          &lt;xsl:text disable-output-escaping="yes"&gt;&amp;amp;nbsp;&lt;/xsl:text&gt;
          &lt;xsl:value-of select="schedule/owner/name/last"/&gt;'s Schedule&lt;/h2&gt;
        &lt;xsl:apply-templates select="schedule/appointment"/&gt;
      &lt;/body&gt;
    &lt;/html&gt;
  &lt;/xsl:template&gt;
  &lt;!--***************************************************************
      ** "appointment" template
      ************************************************************--&gt;
  &lt;xsl:template match="appointment"&gt;
    &lt;hr/&gt;
    &lt;h3&gt;Appointment&lt;/h3&gt;
    &lt;xsl:apply-templates select="when"/&gt;
    &lt;table&gt;
      &lt;tr&gt;
        &lt;td&gt;Subject:&lt;/td&gt;
        &lt;td&gt;
          &lt;xsl:value-of select="subject"/&gt;
        &lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
        &lt;td&gt;Location:&lt;/td&gt;
        &lt;td&gt;
          &lt;xsl:value-of select="location"/&gt;
        &lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
        &lt;td&gt;Note:&lt;/td&gt;
        &lt;td&gt;
          &lt;xsl:value-of select="note"/&gt;
        &lt;/td&gt;
      &lt;/tr&gt;
    &lt;/table&gt;
  &lt;/xsl:template&gt;
  &lt;!--****************************************************************
       ** "when" template
       *************************************************************--&gt;
  &lt;xsl:template match="when"&gt;
    &lt;p&gt;
      &lt;xsl:value-of select="date/@month"/&gt;
      &lt;xsl:text&gt;/&lt;/xsl:text&gt;
      &lt;xsl:value-of select="date/@day"/&gt;
      &lt;xsl:text&gt;/&lt;/xsl:text&gt;
      &lt;xsl:value-of select="date/@year"/&gt;
      from
      &lt;xsl:value-of select="startTime/@hour"/&gt;
      &lt;xsl:text&gt;:&lt;/xsl:text&gt;
      &lt;xsl:value-of select="startTime/@minute"/&gt;
      until
      &lt;xsl:value-of select="endTime/@hour"/&gt;
      &lt;xsl:text&gt;:&lt;/xsl:text&gt;
      &lt;xsl:value-of select="endTime/@minute"/&gt;
    &lt;/p&gt;
  &lt;/xsl:template&gt;
&lt;/xsl:stylesheet&gt;</pre></blockquote>
</div>

<p>The first part of this stylesheet should look familiar. The first
four lines are typical of just about any stylesheet you will write.
Next, the output method is specified as <tt class="literal">xml</tt>
because this stylesheet is producing XHTML instead of HTML:
</p>

<blockquote><pre class="code">&lt;xsl:output method="xml"
    doctype-public="-//W3C//DTD XHTML 1.0 Transitional//EN"
    doctype-system="http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd"/&gt;</pre></blockquote>

<p>The <tt class="literal">&lt;xsl:output&gt;</tt> element produces the
following XHTML content:
</p>

<blockquote><pre class="code">&lt;?xml version="1.0" encoding="UTF-16"?&gt;
&lt;!DOCTYPE html PUBLIC
  "-//W3C//DTD XHTML 1.0 Transitional//EN" 
  "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd"&gt;</pre></blockquote>

<p>Moving on, the first template in the stylesheet matches
<tt class="literal">"/"</tt> and outputs the skeleton for the XHTML
document. Another requirement for XHTML is the namespace attribute on
the <tt class="literal">&lt;html&gt;</tt> element:
</p>

<blockquote><pre class="code">&lt;html xmlns="http://www.w3.org/1999/xhtml"&gt;</pre></blockquote>

<p>The remainder of <em class="filename">schedule.xslt</em> consists of
additional templates, each of which matches a particular pattern in
the XML input.
</p>

<a name="ch02-16-fm2xml" /><blockquote><b>NOTE:</b> 

Because of its XML syntax, XSLT stylesheets can be hard to read. If you prefix each template with a distinctive comment block as shown in <a href="ch02_03.htm">Example 2-6</a>, it is fairly easy to see the overall structure of the stylesheet. Without consistent indentation and comments, the markup tends to run together, making the stylesheet much harder to understand and maintain.
</p></blockquote>
<p>The <tt class="literal">&lt;xsl:text&gt;</tt> element is used to insert
additional text into the result tree. Although plain text is allowed
in XSLT stylesheets, the <tt class="literal">&lt;xsl:text&gt;</tt> element
allows more explicit control over whitespace handling. As shown here,
a nonbreaking space is inserted into the result tree:
</p>

<blockquote><pre class="code"><tt class="userinput"><b>
&lt;xsl:text disable-output-escaping="yes"&gt;&amp;amp;nbsp;&lt;/xsl:text&gt;</b></tt></pre></blockquote>
<p>Unfortunately, the following syntax does not work:</p>
<blockquote><pre class="code">
&lt;!-- does not work... --&gt;
&lt;xsl:text&gt;&amp;nbsp;&lt;/xsl:text&gt;</pre></blockquote>

<p>This is because <tt class="literal">&amp;nbsp;</tt> is not one of the five
built-in entities supported by XML. Since XSLT stylesheets are always
well-formed XML, the parser complains when
<tt class="literal">&amp;nbsp;</tt> is found in the stylesheet. Replacing
the first ampersand character with <tt class="literal">&amp;amp</tt>;
allows the XML parser to read the stylesheet into memory. The XML
parser interprets this entity and sends the following markup to the
XSLT processor:
</p>

<blockquote><pre class="code">&lt;!-- this is what the XSLT processor sees, after the XML parser
     interprets the &amp;amp; entity --&gt;
&lt;xsl:text disable-output-escaping="yes"&gt;&amp;nbsp;&lt;/xsl:text&gt;</pre></blockquote>

<p>The second piece of this solution is the
<tt class="literal">disable-output-escaping="yes"</tt> attribute. Without
this attribute the XSLT processor may attempt to escape the
nonbreaking space by converting it into an actual character. This
causes many web browsers to display question marks because they
cannot interpret the character. Disabling output escaping tells the
XSLT processor to pass <tt class="literal">&amp;nbsp;</tt> to the result
tree. Web browsers then interpret and display the nonbreaking space
properly.
</p>

<p>In the final template shown in <a href="ch02_03.htm">Example 2-6</a>, you may
notice the element <tt class="literal">&lt;xsl:value-of
select="date/@month"/&gt;</tt>. The <tt class="literal">@</tt>
character represents an attribute, so in this case the stylesheet is
outputting the value of the month attribute on the date element. For
this element:
</p>

<blockquote><pre class="code">&lt;date month="03" day="15" year="2001"/&gt;,</pre></blockquote>

<p>the value <tt class="literal">"03"</tt> is copied to the result
tree.<a name="INDEX-252" /><a name="INDEX-253" /><a name="INDEX-254" /><a name="INDEX-255" /> 
</p>



<hr width="684" align="left" />
<div class="navbar"><table width="684" border="0"><tr><td align="left" valign="top" width="228"><a href="ch02_02.htm"><img src="../gifs/txtpreva.gif" alt="Previous" border="0" /></a></td><td align="center" valign="top" width="228"><a href="index.htm"><img src="../gifs/txthome.gif" alt="Home" border="0" /></a></td><td align="right" valign="top" width="228"><a href="ch02_04.htm"><img src="../gifs/txtnexta.gif" alt="Next" border="0" /></a></td></tr><tr><td align="left" valign="top" width="228">2.2. Transformation Process</td><td align="center" valign="top" width="228"><a href="index/index.htm"><img src="../gifs/index.gif" alt="Book Index" border="0" /></a></td><td align="right" valign="top" width="228">2.4. XPath Basics</td></tr></table></div>
<hr width="684" align="left" />

<img src="../gifs/navbar.gif" usemap="#library-map" border="0" alt="Library Navigation Links" />
<p><p><font size="-1"><a href="copyrght.htm">Copyright &copy; 2002</a> O'Reilly &amp; Associates. All rights reserved.</font></p>

<map name="library-map"><area shape="rect" coords="0,0,85,93" href="../index.htm"><area shape="rect" coords="85,0,180,98" href="../sax2/index.htm"><area shape="rect" coords="182,-1,261,100" href="../xmlnut/index.htm"><area shape="rect" coords="263,1,384,96" href="../jxml/index.htm"><area shape="rect" coords="386,1,463,100" href="index.htm"><area shape="rect" coords="466,1,533,112" href="../xslt/index.htm"><area shape="rect" coords="535,-1,610,108" href="../schema/index.htm"><area shape="rect" coords="613,1,696,121" href="../pxml/index.htm"></map>

</body></html>