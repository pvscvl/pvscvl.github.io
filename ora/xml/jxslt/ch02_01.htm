<html><head><title>XSLT Part 1 -- The Basics (Java and XSLT)</title><link rel="stylesheet" type="text/css" href="../style/style1.css" />

<meta name="DC.Creator" content="Eric M. Burke" /><meta name="DC.Format" content="text/xml" scheme="MIME" /><meta name="DC.Language" content="en-US" /><meta name="DC.Publisher" content="O'Reilly &amp; Associates, Inc." /><meta name="DC.Source" scheme="ISBN" content="0596001453L" /><meta name="DC.Subject.Keyword" content="stuff" /><meta name="DC.Title" content="Java and XSLT" /><meta name="DC.Type" content="Text.Monograph" />

</head><body bgcolor="#ffffff">

<img src="gifs/smbanner.gif" usemap="#banner-map" border="0" alt="Book Home" /><map name="banner-map"><area shape="rect" coords="1,-2,616,66" href="index.htm" alt="Java and XSLT" /><area shape="rect" coords="629,-11,726,25" href="jobjects/fsearch.htm" alt="Search this book" /></map>

<div class="navbar"><table width="684" border="0"><tr><td align="left" valign="top" width="228"><a href="ch01_05.htm"><img src="../gifs/txtpreva.gif" alt="Previous" border="0" /></a></td><td align="center" valign="top" width="228" /><td align="right" valign="top" width="228"><a href="ch02_02.htm"><img src="../gifs/txtnexta.gif" alt="Next" border="0" /></a></td></tr></table></div>


<h1 class="chapter">Chapter 2. XSLT Part 1 -- The Basics</h1>
<div class="htmltoc"><h4 class="tochead">Contents:</h4>
  <p> <a href="#javaxslt-CHP-2-SECT-1">XSLT Introduction</a><br />
<a href="ch02_02.htm">Transformation Process</a><br />
<a href="ch02_03.htm">Another XSLT Example, Using XHTML</a><br />
<a href="ch02_04.htm">XPath Basics</a><br />
<a href="ch02_05.htm">Looping and Sorting</a><br />
<a href="ch02_06.htm">Outputting Dynamic Attributes</a><br /></p></div><p><a name="INDEX-172" /></a>Extensible Stylesheet Language (XSL)
is a specification from the <a name="INDEX-173" /></a> <a name="INDEX-174" /></a>World Wide Web Consortium (W3C)
and is broken down into two complementary technologies: XSL
Formatting Objects and XSL Transformations (XSLT). XSL Formatting
Objects, a language for defining formatting such as fonts and page
layout, is not covered in this book. XSLT, on the other hand, was
primarily designed to transform a well-formed XML document into
<a name="INDEX-175" /></a>XSL
Formatting Objects.
</p>

<p>Even though XSLT was designed to support XSL Formatting Objects, it
has emerged as the preferred technology for all sorts of
<a name="INDEX-176" /></a>transformations.
Transformation from XML to HTML is the most common, but XSLT can also
be used to transform well-formed XML into just about any text file
format. This will give XML- and XSLT-based web sites a major leg up
as wireless devices become more prevalent because XSLT can also be
used to transform XML into Wireless Markup Language or some other
stripped-down format that wireless devices will require.
</p><div class="sect1"><a name="javaxslt-CHP-2-SECT-1" /></a>
<h2 class="sect1">2.1. XSLT Introduction</h2>

<p><a name="INDEX-177" /></a>Why
is transformation so important? XML provides a simple syntax for
defining markup, but it is up to individuals and organizations to
define specific markup languages. There is no guarantee that two
organizations will use the exact same markup; in fact, you may
struggle to agree on consistent formats within the same group or
company. One group may use <tt class="literal">&lt;employee&gt;</tt>, while
others may use <tt class="literal">&lt;worker&gt;</tt> or
<tt class="literal">&lt;associate&gt;</tt>. In order to share data, the XML
data has to be transformed into a common format. This is where XSLT
shines -- it eliminates the need to write custom computer programs
to transform data. Instead, you simply create one or more XSLT
stylesheets.
</p>

<p>An <a name="INDEX-178" /></a>XSLT
processor is an application that applies an <a name="INDEX-179" /></a>XSLT stylesheet to an XML data
source. Instead of modifying the original XML data, the result of the
transformation is copied into something called a <em class="emphasis">result
tree</em><a name="INDEX-180" /></a>,
which can be directed to a static file, sent directly to an output
stream, or even piped into another XSLT processor for further
transformations. <a href="ch02_01.htm">Figure 2-1</a> illustrates the
transformation process, showing how the XML input, XSLT stylesheet,
XSLT processor, and result tree relate to one another.
</p>

<a name="javaxslt-CHP-2-FIG-1" /></a><div class="figure"><img src="figs/jxt_0201.gif" alt="Figure 2-1" width="403" height="120" /></div><h4 class="objtitle">Figure 2-1. XSLT transformation</h4>

<p>The XML input and XSLT stylesheet are normally two separate
entities.<a href="#FOOTNOTE-5">[5]</a> For the examples in
this chapter, the XML will always reside in a text file. In future
chapters, however, we will see how to improve performance by dealing
with the XML as an in-memory object tree. This makes sense from a
Java/XSLT perspective because most web applications will generate XML
dynamically rather than deal with a series of static files. Since the
XML data and XSLT stylesheet are clearly separated, it is very
plausible to write several different stylesheets that convert the
same XML into radically different formats.
</p><blockquote class="footnote"> <a name="FOOTNOTE-5" /></a><p> [5] Section 2.7 of the XSLT specification
covers embedded stylesheets.</p> </blockquote>

<p>XSLT transformation can occur on either the client or server,
although server-side
<a name="INDEX-181" /></a>transformations are currently dominant.
Since a vast majority of Internet users do not use XSLT-compliant
browsers (at the time of this writing), the typical model is to
transform XML into HTML on the web server so the browser sees only
the resulting HTML. In a closed corporate environment where the
browser feature set can be controlled, moving the XSLT transformation
process to the browser can improve scalability and reduce network
traffic.
</p>

<p>It should be noted that <a name="INDEX-182" /></a> <a name="INDEX-183" /></a>XSLT
stylesheets do not perform the same function as Cascading Style
Sheets (CSS), which you may be familiar with. In the CSS model, style
elements are applied to HTML or XML on the web browser, affecting
formatting such as fonts and colors. CSS do not produce a separate
result tree and cannot be applied in advance using a standalone
processor as XSLT can. The CSS processing model operates on the
underlying data in a top down fashion in a single pass, while XSLT
can iterate and perform conditional logic on the XML data. Although
XSLT can produce style instructions, its true role is that of a
transformation language rather than a style language.
<a name="INDEX-184" /></a>XSL
Formatting Objects, on the other hand, is a style language that is
much more comparable to CSS.
</p>

<p>For wireless applications, HTML is not typically generated. Instead,
Wireless Markup Language (WML) is the current standard for cell
phones and other wireless devices. In the future, new standards such
as XHTML Basic may be used. When using an XSLT approach, the same XML
data can be transformed into many forms, all via different
stylesheets. Regardless of how many stylesheets are used, the XML
data will remain unchanged. A typical web site might have the
following
<a name="INDEX-185" /></a>stylesheets
for a single XML home page:
</p>

<dl>
<dt><i><em class="filename">homeBasic.xslt</em></i></dt>
<dd>
For older web browsers<p></p>
</dd>

</dl>

<dl>
<dt><i><em class="filename">homeIE5.xslt</em></i></dt>
<dd>
Takes advantage of newer Internet Explorer features<p></p>
</dd>

</dl>

<dl>
<dt><i><em class="filename">homeMozilla.xslt</em></i></dt>
<dd>
Takes advantage of newer Netscape features<p></p>
</dd>

</dl>

<dl>
<dt><i><em class="filename">homeWML.xslt</em></i></dt>
<dd>
Transforms into Wireless Markup Language<p></p>
</dd>

</dl>

<dl>
<dt><i><em class="filename">homeB2B.xslt</em></i></dt>
<dd>
Transforms the XML into another XML format, suitable for
"B2B-style" XML data feeds to customers
<p></p>
</dd>

</dl>

<p><em class="emphasis">Schema evolution</em><a name="INDEX-186" /></a> implies an upgrade to an existing
data source where the structure of the data must be modified. When
the data is stored in XML format, XSLT can be used to support schema
evolution. For example, Version 1.0 of your application may store all
of its files in XML format, but Version 2.0 might add new features
that cannot be supported by the old 1.0 file format. A perfect
solution is to write a single stylesheet to transform all of the old
1.0 XML files to the new 2.0 file format.<a name="INDEX-187" /></a>
</p>

<a name="javaxslt-CHP-2-SECT-1.1" /></a><div class="sect2">
<h3 class="sect2">2.1.1. An XSLT Example</h3>

<p>You need three components to perform XSLT
<a name="INDEX-188" /></a>transformations: an XML data
source, an XSLT stylesheet, and an XSLT processor. The XSLT
stylesheet is actually a well-formed XML document, so the XSLT
processor will also include or use an XML parser. Apache's
<a name="INDEX-189" /></a>Xalan is used for most
of the examples in this book; the previous chapter listed several
other processors that you may want to investigate. You can download
<a name="INDEX-190" /></a>Xalan from
<a href="../../../../../../xml.apache.org/">http://xml.apache.org</a>. It uses
and includes Apache's Xerces parser, but can be configured to
use other parsers. The ability to swap out parsers is important
because this gives you the flexibility to use the latest innovations
as competing (and perhaps faster) parsers are released.
</p>

<p><a href="ch02_01.htm">Example 2-1</a> represents an early prototype of a
<a name="INDEX-191" /></a>discussion forum home page. The
complete discussion forum application will be developed in <a href="ch07_01.htm">Chapter 7, "Discussion Forum"</a>. This is the raw XML data, without any
formatting instructions or HTML. As you can see, the home page simply
lists the message boards that the user can choose to view.
</p>

<a name="javaxslt-CHP-2-EX-1" /></a><div class="example">
<h4 class="objtitle">Example 2-1. discussionForumHome.xml </h4>
<blockquote><pre class="code">&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;discussionForumHome&gt;
  &lt;messageBoard id="1" name="Java Programming"/&gt;
  &lt;messageBoard id="2" name="XML Programming"/&gt;
  &lt;messageBoard id="3" name="XSLT Questions"/&gt;
&lt;/discussionForumHome&gt;</pre></blockquote>
</div>

<p>It is assumed that this data will be generated dynamically as the
result of a database query, rather than hardcoded as a static XML
file. Regardless of its origin, the XML data says nothing about how
to actually display the web page. For clarity, we will keep the XSLT
stylesheet fairly simple at this point. The <a name="INDEX-192" /></a> <a name="INDEX-193" /></a>beauty of an XML/XSLT
approach is that you can beef up the stylesheet later on without
compromising any of the underlying XML data structures. Even more
importantly, the Java code that will generate the XML data does not
have to be cluttered up with HTML and user interface logic; it just
produces the basic XML data. Once the format of the data has been
defined, a Java programmer can begin working on the database logic
and XML generation code, while another team member begins writing the
XSLT stylesheets.
</p>

<p><a href="ch02_01.htm">Example 2-2</a> lists the XSLT stylesheet that produces
the home page. Don't worry if not everything in this first
example makes sense. XSLT is, after all, a completely new language.
We will cover everything in detail throughout the remainder of this
and the next chapter.
</p>

<a name="javaxslt-CHP-2-EX-2" /></a><div class="example">
<h4 class="objtitle">Example 2-2. discussionForumHome.xslt </h4>
<blockquote><pre class="code">&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;xsl:stylesheet
    version="1.0"
    xmlns:xsl="http://www.w3.org/1999/XSL/Transform"&gt;
  &lt;xsl:output method="html"/&gt;

  &lt;!-- match the document root --&gt;
  <tt class="userinput"><b>&lt;xsl:template match="/"&gt;</b></tt>
    &lt;html&gt;
      &lt;head&gt;
        &lt;title&gt;Discussion Forum Home Page&lt;/title&gt;
      &lt;/head&gt;
      &lt;body&gt;
        &lt;h1&gt;Discussion Forum Home Page&lt;/h1&gt;
        &lt;h3&gt;Please select a message board to view:&lt;/h3&gt;
        &lt;ul&gt;
          <tt class="userinput"><b>&lt;xsl:apply-templates select="discussionForumHome/messageBoard"/&gt;</b></tt>
        &lt;/ul&gt;
      &lt;/body&gt;
    &lt;/html&gt;
  &lt;/xsl:template&gt;

  &lt;!-- match a &lt;messageBoard&gt; element --&gt;
  <tt class="userinput"><b>&lt;xsl:template match="messageBoard"&gt;</b></tt>
    &lt;li&gt;
      &lt;a href="viewForum?id={@id}"&gt;
        &lt;xsl:value-of select="@name"/&gt;
      &lt;/a&gt;
    &lt;/li&gt;
  &lt;/xsl:template&gt;
&lt;/xsl:stylesheet&gt;</pre></blockquote>
</div>

<a name="ch02-4-fm2xml" /></a><blockquote><b>NOTE:</b> 
The filename extension for XSLT stylesheets is irrelevant. In this
book,<tt class="literal">.xslt</tt> is used. Many stylesheet authors prefer
<tt class="literal">.xsl</tt>.
<p></p>
</blockquote>

<p>The first thing that should jump out immediately is the fact that the
<a name="INDEX-194" /></a>XSLT stylesheet is also a
well-formed XML document. Do not let the <tt class="literal">xsl:</tt>
namespace prefix fool you -- everything in this document adheres
to the same basic rules that every other XML document must follow.
Like other XML files, the first line of the stylesheet is an XML
declaration:
</p>

<blockquote><pre class="code">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</pre></blockquote>

<p>Unless you are dealing with internationalization issues, this will
remain unchanged for every stylesheet you write. This line is
immediately followed by the <a name="INDEX-195" /></a>document root element, which contains
the remainder of the stylesheet:
</p>

<blockquote><pre class="code">&lt;xsl:stylesheet
    version="1.0" 
    xmlns:xsl="http://www.w3.org/1999/XSL/Transform"&gt;</pre></blockquote>

<p>The <tt class="literal">&lt;xsl:stylesheet&gt;</tt><a name="INDEX-196" /></a>
<a name="INDEX-197" /></a> element has two
attributes in this case. The first, <tt class="literal">version="1.0"</tt>,
specifies the version of the XSLT specification. Although this is the
current version at the time of this writing, the next version of the
XSLT specification is well underway and may be finished by the time
you read this. You can stay abreast of the latest
<a name="INDEX-198" /></a>XSLT developments by visiting the
W3C home page at <a href="../../../../../../www.w3.org/">http://www.w3.org</a>.
</p>

<p><a name="INDEX-199" /></a>
<a name="INDEX-200" /></a>The next attribute
declares the <a name="INDEX-201" /></a>XML namespace, defining the
meaning of the <tt class="literal">xsl:</tt> prefix you see on all of the
XSLT elements. The prefix <tt class="literal">xsl</tt> is conventional, but
could be anything you choose. This is useful if your document already
uses the <tt class="literal">xsl</tt> prefix for other elements, and you do
not want to introduce a naming conflict. This is really the entire
point of
<a name="INDEX-202" /></a>namespaces: they
help to avoid name conflicts. In XML,
<tt class="literal">&lt;a:book&gt;</tt> and
<tt class="literal">&lt;b:book&gt;</tt> can be discerned from one another
because each book has a different namespace prefix. Since you pick
the namespace prefix, this avoids the possibility that two vendors
will use conflicting prefixes.
</p>

<p>In the case of XSLT, the namespace prefix does not have to be
<tt class="literal">xsl</tt>, but the value does have to be <a href="../../../../../../www.w3.org/1999/XSL/Transform">http://www.w3.org/1999/XSL/Transform</a>. The
value of a namespace is not necessarily a real web site, but the
syntax is convenient because it helps ensure uniqueness. In the case
of XSLT, 1999 represents the year that the URL was allocated for this
purpose, and is not related to the version number. It is almost
certain that future versions of XSLT will continue to use this same
URL.
</p>
<blockquote><b>WARNING:</b> <a name="INDEX-203" /></a>Even the slightest typo in the namespace will render the stylesheet useless for most processors. The text must match <a href="../../../../../../www.w3.org/1999/XSL/Transform">http://www.w3.org/1999/XSL/Transform</a> exactly, or your stylesheet will not be processed. Spelling or capitalization errors are a common mistake and should be the first thing you check when things are not working as you expect.
<p></p></blockquote>
<p>The next line of the stylesheet simply indicates that the result tree
should be treated as an HTML document instead of an XML document:
</p>

<blockquote><pre class="code">&lt;xsl:output method="html"/&gt;</pre></blockquote>

<p>In Version 1.0 of XSLT, processors are not required to fully support
this element. Xalan does, however, so we will include this in all of
our stylesheets. Since the XSLT stylesheet itself must be written as
well-formed XML, some HTML tags are difficult to include. Instead of
writing <tt class="literal">&lt;hr&gt;</tt>, you must write
<tt class="literal">&lt;hr/&gt;</tt> in your stylesheet. When the output
method is html, processors such as Xalan will remove the slash
(<tt class="literal">/</tt>) character from the result tree, which produces
HTML that typical web browsers expect.
</p>

<p>The remainder of our stylesheet consists of two
<em class="emphasis">templates</em><a name="INDEX-204" /></a>
<a name="INDEX-205" /></a>.
Each matches some pattern in the XML input document and is
responsible for producing output to the result tree. The first
template is repeated as follows:
</p>

<blockquote><pre class="code"><tt class="userinput"><b>
&lt;xsl:template match="/"&gt;</b></tt>
  &lt;html&gt;
    &lt;head&gt;
      &lt;title&gt;Discussion Forum Home Page&lt;/title&gt;
    &lt;/head&gt;
    &lt;body&gt;
      &lt;h1&gt;Discussion Forum Home Page&lt;/h1&gt;
      &lt;h3&gt;Please select a message board to view:&lt;/h3&gt;
      &lt;ul&gt;<tt class="userinput"><b>
        &lt;xsl:apply-templates select="discussionForumHome/messageBoard"/&gt;</b></tt>
      &lt;/ul&gt;
    &lt;/body&gt;
  &lt;/html&gt;<tt class="userinput"><b>
&lt;/xsl:template&gt;</b></tt></pre></blockquote>
<p>When the XSLT processor begins its transformation process, it looks
in your stylesheet for a template that matches the
"/"<a name="INDEX-206" /></a> pattern. This pattern matches the source
XML document that is being transformed. You may recall from <a href="ch01_01.htm">Chapter 1, "Introduction "</a> that DOM uses the Document interface to
represent the document, which is what we are matching here. This is
always the starting point for processing, so nearly every stylesheet
you write will contain a template similar to this one. Since this is
the first template to be instantiated, it is also where we create the
framework for the resulting HTML document. The second template, which
matches the "messageBoard" pattern, is currently ignored. This is
because the processor is only looking at the root of the XML
document, and the &lt;messageBoard&gt; element is nested beneath the
&lt;discussionForumHome&gt; element.
</p>

<p>Most of the tags in this template do not start with &lt;xsl:, so they
are simply copied to the result tree. In fact, the only dynamic
content in this particular template is the following line, which
tells the processor to continue the transformation process:
</p>
<blockquote><pre class="code">
&lt;xsl:apply-templates select="discussionForumHome/messageBoard"/&gt;</pre></blockquote>

<p>Without this line, the transformation process would be complete
because the <tt class="literal">"/"</tt> pattern was already located and a
corresponding template was instantiated. The
<tt class="literal">&lt;xsl:apply-templates&gt;</tt> element tells the XSLT
processor to begin a new search for elements in the source XML
document that match the
<tt class="literal">"discussionForumHome/messageBoard"</tt> pattern and to
instantiate an additional template that matches. As we will see
shortly, the transformation process is recursive and must be driven
by XSLT elements such as
<tt class="literal">&lt;xsl:apply-templates&gt;</tt>. Simply including one
or more <tt class="literal">&lt;xsl:template&gt;</tt> elements in a
stylesheet does not mean that they will be instantiated.
</p>

<p>In this example, the <tt class="literal">&lt;xsl:apply-templates&gt;</tt>
element tells the XSLT processor to first select all
<tt class="literal">&lt;discussionForumHome&gt;</tt> elements of the
<em class="emphasis">current node</em><a name="INDEX-207" /></a>. The current node is
<tt class="literal">"/"</tt><a name="INDEX-208" /></a> <a name="INDEX-209" /></a>, or the top of the document, so it only
selects the <tt class="literal">&lt;discussionForumHome&gt;</tt> element
that occurs at the document's root level. If another
<tt class="literal">&lt;discussionForumHome&gt;</tt> element is deeply
nested within the XML document, it will not be selected by this
pattern. Assuming that the processor locates the
<tt class="literal">&lt;discussionForumHome&gt;</tt> element, it then
searches for all of its <tt class="literal">&lt;messageBoard&gt;</tt>
children.
</p>

<a name="ch02-5-fm2xml" /></a><blockquote><b>NOTE:</b> 

The <tt class="literal">select</tt> attribute in <tt class="literal">&lt;xsl:apply-templates&gt;</tt> does not have to be the same as the <tt class="literal">match</tt> attribute in <tt class="literal">&lt;xsl:template&gt;</tt>. Although the stylesheet presented in <a href="ch02_01.htm">Example 2-2</a> could have specified <tt class="literal">&lt;xsl:template match="discussionForumHome/messageBoard"&gt;</tt> for the second template, this would limit the reusability of the template. Specifically, it could only be applied to <tt class="literal">&lt;messageBoard&gt;</tt> elements that occur as direct children of <tt class="literal">&lt;discussionForumHome&gt;</tt> elements. Since our template matches only <tt class="literal">"messageBoard"</tt>, it can be reused for <tt class="literal">&lt;messageBoard&gt;</tt> elements that appear anywhere in the XML document.
<p></p></blockquote>
<p>For each <tt class="literal">&lt;messageBoard&gt;</tt> child, the processor
looks for the template in your stylesheet that provides the best
match. Since our stylesheet contains a template that matches the
<tt class="literal">"messageBoard"</tt> pattern exactly, it is instantiated
for each of the <tt class="literal">&lt;messageBoard&gt;</tt> elements. The
job of this template is to produce a single HTML list item tag for
each <tt class="literal">&lt;messageBoard&gt;</tt> element:
</p>

<blockquote><pre class="code">&lt;xsl:template match="messageBoard"&gt;<tt class="userinput"><b>
  &lt;li&gt;</b></tt>
    &lt;a href="viewForum?id={@id}"&gt;
      &lt;xsl:value-of select="@name"/&gt;
    &lt;/a&gt;<tt class="userinput"><b>
  &lt;/li&gt;</b></tt>
&lt;/xsl:template&gt;</pre></blockquote>

<p>As you can see, the list item must be properly terminated; HTML-style
standalone <tt class="literal">&lt;li&gt;</tt> tags are not allowed because
they break the requirement that XSLT stylesheets be well-formed XML.
Terminating the element with <tt class="literal">&lt;/li&gt;</tt> also
works with HTML, so this is the approach you must take. The hyperlink
is a best guess at this point in the design process because the
servlet has not been defined yet. Later, when we develop a servlet to
actually process this web page, we will update the link to point to
the correct servlet.
</p>

<p>In the stylesheet, <tt class="literal">@</tt><a name="INDEX-210" /></a> is used to select the
values of attributes. Curly braces
(<tt class="literal">{})</tt><a name="INDEX-211" /></a> are known as an <em class="emphasis">attribute
value template</em> and will be discussed in <a href="ch03_01.htm">Chapter 3, "XSLT Part 2 -- Beyond the Basics"</a>. If you look back at <a href="ch02_01.htm">Example 2-1</a>, you will see that each message board has two
attributes, <tt class="literal">id</tt> and <tt class="literal">name</tt>:
</p>

<blockquote><pre class="code">&lt;messageBoard id="1" name="Java Programming"/&gt;</pre></blockquote>

<p>When the stylesheet processor is executed and the result tree
generated, we end up with the HTML shown in <a href="ch02_01.htm">Example 2-3</a>. The HTML is minimal at this point, which is
exactly what you want. Fancy changes to the page layout can be added
later; the important concept is that programmers can get started
right away with the underlying application logic because of the clean
separation between data and presentation that XML and XSLT provide.
</p>

<a name="javaxslt-CHP-2-EX-3" /></a><div class="example">
<h4 class="objtitle">Example 2-3. discussionForumHome.html </h4>
<blockquote><pre class="code">&lt;html&gt;
  &lt;head&gt;
    &lt;title&gt;Discussion Forum Home Page&lt;/title&gt;
  &lt;/head&gt;
  &lt;body&gt;
    &lt;h1&gt;Discussion Forum Home Page&lt;/h1&gt;
    &lt;h3&gt;Please select a message board to view:&lt;/h3&gt;
    &lt;ul&gt;
      &lt;li&gt;
        &lt;a href="viewForum?id=1"&gt;Java Programming&lt;/a&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;a href="viewForum?id=2"&gt;XML Programming&lt;/a&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;a href="viewForum?id=3"&gt;XSLT Questions&lt;/a&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/body&gt;
&lt;/html&gt;</pre></blockquote>
</div>

</div>
<a name="javaxslt-CHP-2-SECT-1.2" /></a><div class="sect2">
<h3 class="sect2">2.1.2. Trying It Out</h3>

<p>To try things out, download the examples for this book and locate
<em class="filename">discussionForumHome.xml</em> and
<em class="filename">discussionForumHome.xslt</em>. They can be found in
the <em class="filename">chap1</em> directory. If you would rather type in
the examples, you can use any text editor or a dedicated XML editor
such as <a name="INDEX-212" /></a>
<a name="INDEX-213" /></a>
<a name="INDEX-214" /></a>Altova's XML Spy (<a href="../../../../../../www.xmlspy.com/">http://www.xmlspy.com</a>). After downloading and
unzipping the <a name="INDEX-215" /></a>Xalan distribution from Apache,
simply add <em class="filename">xalan.jar</em> and
<em class="filename">erces.jar</em> to your CLASSPATH. The transformation
can then be initiated with the following command:
</p>

<blockquote><pre class="code">java org.apache.xalan.xslt.Process -IN discussionForumHome.xml -XSL 
discussionForumHome.xslt</pre></blockquote>

<p>This will apply the stylesheet, sending the resulting HTML content to
standard output. Adding <tt class="userinput"><b>-OUT</b></tt><tt><em class="replaceable"><tt>filename</tt></em></tt> to the command will
cause Xalan to send the result tree directly to a file. To see the
complete list of Xalan options, just type <tt class="userinput"><b>java
org.apache.xalan.xslt.Process</b></tt>. For example, the
<tt class="literal">-TT</tt> option allows you to see (trace) which
templates are being called.
</p>

<a name="ch02-7-fm2xml" /></a><blockquote><b>NOTE:</b> 

Xalan's <tt class="literal">-IN</tt> and <tt class="literal">-XSL</tt> parameters accept URLs as arguments rather than as file names. A simple filename will work if the files are in the current working directory, but you may need to use a full URL syntax, such as <em class="filename">file:///path/file.ext</em>, when the file is located elsewhere.
<p></p></blockquote>
<p>In <a href="ch05_01.htm">Chapter 5, "XSLT Processing with Java"</a>, we will show how to invoke Xalan and
other XSLT processors from Java code, which is far more efficient
because a separate Java Virtual Machine (JVM) does not have to be
invoked for each transformation. Although it can take several seconds
to start the JVM, the actual XSLT transformations will usually occur
in milliseconds.
</p>

<p>Another option is to find a web browser that supports XSLT, which
allows you to edit your stylesheet and hit the "Reload"
button to view the transformation.
</p>

</div>
</div>

<hr width="684" align="left" />
<div class="navbar"><table width="684" border="0"><tr><td align="left" valign="top" width="228"><a href="ch01_05.htm"><img src="../gifs/txtpreva.gif" alt="Previous" border="0" /></a></td><td align="center" valign="top" width="228"><a href="index.htm"><img src="../gifs/txthome.gif" alt="Home" border="0" /></a></td><td align="right" valign="top" width="228"><a href="ch02_02.htm"><img src="../gifs/txtnexta.gif" alt="Next" border="0" /></a></td></tr><tr><td align="left" valign="top" width="228">1.5. Web Browser Support for XSLT</td><td align="center" valign="top" width="228"><a href="index/index.htm"><img src="../gifs/index.gif" alt="Book Index" border="0" /></a></td><td align="right" valign="top" width="228">2.2. Transformation Process</td></tr></table></div>
<hr width="684" align="left" />

<img src="../gifs/navbar.gif" usemap="#library-map" border="0" alt="Library Navigation Links" />
<p><p><font size="-1"><a href="copyrght.htm">Copyright &copy; 2002</a> O'Reilly &amp; Associates. All rights reserved.</font></p>

<map name="library-map"><area shape="rect" coords="0,0,85,93" href="../index.htm"><area shape="rect" coords="85,0,180,98" href="../sax2/index.htm"><area shape="rect" coords="182,-1,261,100" href="../xmlnut/index.htm"><area shape="rect" coords="263,1,384,96" href="../jxml/index.htm"><area shape="rect" coords="386,1,463,100" href="index.htm"><area shape="rect" coords="466,1,533,112" href="../xslt/index.htm"><area shape="rect" coords="535,-1,610,108" href="../schema/index.htm"><area shape="rect" coords="613,1,696,121" href="../pxml/index.htm"></map>

</body></html>