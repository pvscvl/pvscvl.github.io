<html><head><title>Internationalization with XSLT (Java and XSLT)</title><link rel="stylesheet" type="text/css" href="../style/style1.css" />

<meta name="DC.Creator" content="Eric M. Burke" /><meta name="DC.Format" content="text/xml" scheme="MIME" /><meta name="DC.Language" content="en-US" /><meta name="DC.Publisher" content="O'Reilly &amp; Associates, Inc." /><meta name="DC.Source" scheme="ISBN" content="0596001453L" /><meta name="DC.Subject.Keyword" content="stuff" /><meta name="DC.Title" content="Java and XSLT" /><meta name="DC.Type" content="Text.Monograph" />

</head><body bgcolor="#ffffff">

<img src="gifs/smbanner.gif" usemap="#banner-map" border="0" alt="Book Home" /><map name="banner-map"><area shape="rect" coords="1,-2,616,66" href="index.htm" alt="Java and XSLT" /><area shape="rect" coords="629,-11,726,25" href="jobjects/fsearch.htm" alt="Search this book" /></map>

<div class="navbar"><table width="684" border="0"><tr><td align="left" valign="top" width="228"><a href="ch08_05.htm"><img src="../gifs/txtpreva.gif" alt="Previous" border="0" /></a></td><td align="center" valign="top" width="228" /><td align="right" valign="top" width="228"><a href="ch09_01.htm"><img src="../gifs/txtnexta.gif" alt="Next" border="0" /></a></td></tr></table></div>



<h2 class="sect1">8.6. Internationalization with XSLT</h2>

<p><a name="INDEX-1022" /> <a name="INDEX-1023" />In
this section, we explore the key techniques for internationalization
(i18n) using XSLT. Although both Java and XSLT offer excellent
support for i18n, pulling everything together into a working
application is quite challenging. Hopefully this material will help
to minimize some of the common obstacles.
</p>

<a name="javaxslt-CHP-8-SECT-6.1" /><div class="sect2">
<h3 class="sect2">8.6.1. XSLT Stylesheet Design</h3>

<p><a name="INDEX-1024" />In its simplest form, i18n is
accomplished by providing a separate XSLT stylesheet for each
supported language. While this is easy to visualize, it results in
far too much duplication of effort. This is because XSLT stylesheets
typically contain some degree of programming logic in addition to
pure display information. To illustrate this point,
<em class="filename">directory.xml</em><a name="INDEX-1025" />
is presented in <a href="ch08_06.htm">Example 8-16</a>. This is a very basic
XML datafile that will be transformed using either English or Spanish
XSLT stylesheets.
</p>

<a name="javaxslt-CHP-8-EX-16" /><div class="example">
<h4 class="objtitle">Example 8-16. directory.xml </h4>
<blockquote><pre class="code">&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;directory&gt;
  &lt;employee category="manager"&gt;
    &lt;name&gt;Joe Smith&lt;/name&gt;
    &lt;phone&gt;4-0192&lt;/phone&gt;
  &lt;/employee&gt;
  &lt;employee category="programmer"&gt;
    &lt;name&gt;Sally Jones&lt;/name&gt;
    &lt;phone&gt;4-2831&lt;/phone&gt;
  &lt;/employee&gt;
  &lt;employee category="programmer"&gt;
    &lt;name&gt;Roger Clark&lt;/name&gt;
    &lt;phone&gt;4-3345&lt;/phone&gt;
  &lt;/employee&gt;
&lt;/directory&gt;</pre></blockquote>
</div>

<p>The screen shot shown in <a href="ch08_06.htm">Figure 8-6</a> shows how an
XSLT stylesheet transforms this XML into HTML.
</p>

<p>And finally, <a href="ch08_06.htm">Example 8-17</a> lists the XSLT stylesheet
that produces this output.
</p>

<a name="javaxslt-CHP-8-FIG-6" /><div class="figure"><img src="figs/jxt_0806.gif" alt="Figure 8-6" width="402" height="268" /></div><h4 class="objtitle">Figure 8-6. English XSLT output</h4>

<a name="javaxslt-CHP-8-EX-17" /><div class="example">
<h4 class="objtitle">Example 8-17. directory_basic.xslt </h4>
<blockquote><pre class="code">&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;xsl:stylesheet version="1.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform"&gt;
  &lt;xsl:output method="html" encoding="UTF-8"/&gt;
  &lt;xsl:template match="/"&gt;
    &lt;html&gt;
      &lt;head&gt;
        <tt class="userinput"><b>&lt;title&gt;Employee Directory&lt;/title&gt;</b></tt>
      &lt;/head&gt;
      &lt;body&gt;
        <tt class="userinput"><b>&lt;h1&gt;Employee Directory&lt;/h1&gt;</b></tt>
        &lt;table cellpadding="4" cellspacing="0" border="1"&gt;
          &lt;tr&gt;
            <tt class="userinput"><b>&lt;th&gt;Name&lt;/th&gt;
            &lt;th&gt;Category&lt;/th&gt;
            &lt;th&gt;Phone&lt;/th&gt;</b></tt>
          &lt;/tr&gt;
          &lt;xsl:for-each select="directory/employee"&gt;
            &lt;tr&gt;
              &lt;td&gt;
                &lt;xsl:value-of select="name"/&gt;
              &lt;/td&gt;
              &lt;td&gt;
                &lt;xsl:choose&gt;
                  &lt;xsl:when test="@category='manager'"&gt;
                    <tt class="userinput"><b>&lt;xsl:text&gt;Manager&lt;/xsl:text&gt;</b></tt>
                  &lt;/xsl:when&gt;
                  &lt;xsl:when test="@category='programmer'"&gt;
                    <tt class="userinput"><b>&lt;xsl:text&gt;Programmer&lt;/xsl:text&gt;</b></tt>
                  &lt;/xsl:when&gt;
                  &lt;xsl:otherwise&gt;
                    <tt class="userinput"><b>&lt;xsl:text&gt;Other&lt;/xsl:text&gt;</b></tt>
                  &lt;/xsl:otherwise&gt;
                &lt;/xsl:choose&gt;
              &lt;/td&gt;
              &lt;td&gt;
                &lt;xsl:value-of select="phone"/&gt;
              &lt;/td&gt;
            &lt;/tr&gt;
          &lt;/xsl:for-each&gt;
        &lt;/table&gt;
      &lt;/body&gt;
    &lt;/html&gt;
  &lt;/xsl:template&gt;
&lt;/xsl:stylesheet&gt;</pre></blockquote>
</div>

<p>In this stylesheet, all
<em class="emphasis">locale-specific</em><a name="INDEX-1026" /> content is highlighted. This is
information that must be changed to support a different language. As
you can see, only a small portion of the XSLT is specific to the
English language and is embedded directly within the stylesheet
logic. The entire stylesheet must be rewritten to support another
language.
</p>

<p>Fortunately, there is an easy solution to this problem.
<a name="INDEX-1027" />XSLT
stylesheets can import other stylesheets; templates and variables in
the importing stylesheet take precedence over conflicting items in
the imported stylesheet. By isolating locale-specific content, we can
use <tt class="literal">&lt;xsl:import&gt;</tt><a name="INDEX-1028" /> to support multiple
languages while reusing all of the stylesheet logic. <a href="ch08_06.htm">Example 8-18</a> shows a revised version of our XSLT
stylesheet.<a name="INDEX-1029" />
<a name="INDEX-1030" />
</p>

<a name="javaxslt-CHP-8-EX-18" /><div class="example">
<h4 class="objtitle">Example 8-18. directory_en.xslt </h4>
<blockquote><pre class="code">&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;xsl:stylesheet version="1.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform"&gt;
  &lt;xsl:output method="html" encoding="UTF-8"/&gt;
  
  <tt class="userinput"><b>&lt;!-- Isolate locale-specific content --&gt;
  &lt;xsl:variable name="lang.pageTitle" select="'Employee Directory'"/&gt;
  &lt;xsl:variable name="lang.nameHeading" select="'Name'"/&gt;
  &lt;xsl:variable name="lang.categoryHeading" select="'Category'"/&gt;
  &lt;xsl:variable name="lang.phoneHeading" select="'Phone'"/&gt;
  &lt;xsl:variable name="lang.manager" select="'Manager'"/&gt;
  &lt;xsl:variable name="lang.programmer" select="'Programmer'"/&gt;
  &lt;xsl:variable name="lang.other" select="'Other'"/&gt;</b></tt>
  
  &lt;xsl:template match="/"&gt;
    &lt;html&gt;
      &lt;head&gt;
        <tt class="userinput"><b>&lt;title&gt;&lt;xsl:value-of select="$lang.pageTitle"/&gt;&lt;/title&gt;</b></tt>
      &lt;/head&gt;
      &lt;body&gt;
        <tt class="userinput"><b>&lt;h1&gt;&lt;xsl:value-of select="$lang.pageTitle"/&gt;&lt;/h1&gt;</b></tt>
        &lt;table cellpadding="4" cellspacing="0" border="1"&gt;
          &lt;tr&gt;
            <tt class="userinput"><b>&lt;th&gt;&lt;xsl:value-of select="$lang.nameHeading"/&gt;&lt;/th&gt;
            &lt;th&gt;&lt;xsl:value-of select="$lang.categoryHeading"/&gt;&lt;/th&gt;
            &lt;th&gt;&lt;xsl:value-of select="$lang.phoneHeading"/&gt;&lt;/th&gt;</b></tt>
          &lt;/tr&gt;
          &lt;xsl:for-each select="directory/employee"&gt;
            &lt;tr&gt;
              &lt;td&gt;
                &lt;xsl:value-of select="name"/&gt;
              &lt;/td&gt;
              &lt;td&gt;
                &lt;xsl:choose&gt;
                  &lt;xsl:when test="@category='manager'"&gt;
                    <tt class="userinput"><b>&lt;xsl:value-of select="$lang.manager"/&gt;</b></tt>
                  &lt;/xsl:when&gt;
                  &lt;xsl:when test="@category='programmer'"&gt;
                    <tt class="userinput"><b>&lt;xsl:value-of select="$lang.programmer"/&gt;</b></tt>
                  &lt;/xsl:when&gt;
                  &lt;xsl:otherwise&gt;
                    <tt class="userinput"><b>&lt;xsl:value-of select="$lang.other"/&gt;</b></tt>
                  &lt;/xsl:otherwise&gt;
                &lt;/xsl:choose&gt;
              &lt;/td&gt;
              &lt;td&gt;
                &lt;xsl:value-of select="phone"/&gt;
              &lt;/td&gt;
            &lt;/tr&gt;
          &lt;/xsl:for-each&gt;
        &lt;/table&gt;
      &lt;/body&gt;
    &lt;/html&gt;
  &lt;/xsl:template&gt;
&lt;/xsl:stylesheet&gt;</pre></blockquote>
</div>

<p>The XSLT stylesheet is now much more amenable to i18n. All
locale-specific content is declared as a series of variables.
Therefore, importing stylesheets can override them. The
<tt class="literal">lang.</tt> naming convention makes the stylesheet more
maintainable; it is not a requirement or part of the XSLT
specification. Other than isolating this content, the remainder of
the stylesheet is exactly the same as it was before.
</p>

<p>The Spanish version of the stylesheet is shown in <a href="ch08_06.htm">Example 8-19</a>.<a name="INDEX-1031" />
<a name="INDEX-1032" /> 
</p>

<a name="javaxslt-CHP-8-EX-19" /><div class="example">
<h4 class="objtitle">Example 8-19. directory_es.xslt </h4>
<blockquote><pre class="code">&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;xsl:stylesheet version="1.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform"&gt;
  <tt class="userinput"><b>&lt;xsl:import href="directory_en.xslt"/&gt;
  &lt;xsl:output method="html" encoding="UTF-8"/&gt;</b></tt>
  
  &lt;!-- Isolate locale-specific content --&gt;
  &lt;xsl:variable name="lang.pageTitle" select="'Empleado gu&#xED;a telef&#xF3;nica'"/&gt;
  &lt;xsl:variable name="lang.nameHeading" select="'Nombre'"/&gt;
  &lt;xsl:variable name="lang.categoryHeading" select="'Categor&#xED;a'"/&gt;
  &lt;xsl:variable name="lang.phoneHeading" select="'Tel&#xE9;fono'"/&gt;
  &lt;xsl:variable name="lang.manager" select="'Gerente'"/&gt;
  &lt;xsl:variable name="lang.programmer" select="'Programador'"/&gt;
  &lt;xsl:variable name="lang.other" select="'Otro'"/&gt;
  
&lt;/xsl:stylesheet&gt;</pre></blockquote>
</div>

<p>The Spanish stylesheet is much shorter because it merely overrides
each of the locale-specific variables. The
<tt class="literal">&lt;xsl:import&gt;</tt> is key:
</p>

<blockquote><pre class="code">&lt;xsl:import href="directory_en.xslt"/&gt;</pre></blockquote>

<p>Because of <a name="INDEX-1033" />XSLT conflict-resolution rules, the
variables defined in <em class="filename">directory_es.xslt</em> take
precedence over those defined in
<em class="filename">directory_en.xslt</em>. The same logic can be applied
to templates, as well. This is useful in scenarios where the
importing stylesheet needs to change behavior in addition to simply
defining text translations.
</p>

<p>The following line is optional:</p>

<blockquote><pre class="code">&lt;xsl:output method="html" encoding="UTF-8"/&gt;</pre></blockquote>

<p>In this example, the output method and encoding are identical to the
English version of the stylesheet, so this line has no effect.
However, the importing stylesheet may specify a different output
method and encoding if desired.
</p>

<p>To perform the Spanish transformation using
<a name="INDEX-1034" />Xalan, issue the following
command:
</p>

<blockquote><pre class="code">$ java org.apache.xalan.xslt.Process -IN directory.xml -XSL directory_es.xslt</pre></blockquote>

<p><a href="ch08_06.htm">Figure 8-7</a> shows the result of this transformation
when displayed in a web browser.
</p>

<a name="javaxslt-CHP-8-FIG-7" /><div class="figure"><img src="figs/jxt_0807.gif" alt="Figure 8-7" width="334" height="268" /></div><h4 class="objtitle">Figure 8-7. Spanish output</h4>

<a name="ch08-16-fm2xml" /><blockquote><b>NOTE:</b> 

In the i18n example stylesheets presented in this chapter, common functionality is placed into one stylesheet. Importing stylesheets then replace locale-specific text. This same technique can be applied to any stylesheet and is particularly important when writing custom XSLT for a specific browser. Most of your code should be portable across a variety of browsers and should be placed into reusable stylesheets. The parts that change should be placed into browser-specific stylesheets that import the common stylesheets.
</p></blockquote>
</div>
<a name="javaxslt-CHP-8-SECT-6.2" /><div class="sect2">
<h3 class="sect2">8.6.2. Encodings</h3>

<p>A <em class="emphasis">character
encoding</em><a name="INDEX-1035" /> is a numeric representation of a
particular character.<a href="#FOOTNOTE-41">[41]</a> The <a name="INDEX-1036" />US-ASCII encoding for the
<tt class="literal">A</tt> character, for example, is 65. When computers
read and write files using US-ASCII encoding, each character is
stored as one byte of data. Of this byte, only seven bits are
actually used to represent characters. The first (most significant)
bit must always be 0. Therefore, US-ASCII can represent only 128
different characters. Of course, this presents a problem for
languages that require more than 128 characters. For these languages,
another character encoding must be used.
</p><blockquote class="footnote"> <a name="FOOTNOTE-41" /><p> [41] Refer to <em class="citetitle">Java
Internationalization</em> by Andy Deitsch and David Czarnecki
(O'Reilly) for more detailed information on character
encodings.</p> </blockquote>

<p>The most comprehensive character encoding is called
<a name="INDEX-1037" />ISO/IEC
10646. This is also known as the <a name="INDEX-1038" />Universal Character Set (UCS) and
allocates a 32-bit number for each character. Although this allows
UCS to uniquely identify every character in every language, it is not
directly compatible with most computer software. Also, using 32 bits
to represent each character results in a lot of wasted memory.
</p>

<p><a name="INDEX-1039" />Unicode is the
official implementation of ISO/IEC 10646 and currently uses 16-bit
characters. You can learn more about <a name="INDEX-1040" />Unicode
at <a href="../../../../../../www.unicode.org/">http://www.unicode.org</a>.
<a name="INDEX-1041" />UCS Transformation Formats (UTFs) are
designed to support the UCS encoding while maintaining compatibility
with existing computer software and encodings. UTF-8 and UTF-16 are
the most common transformation formats, and all XML parsers and XSLT
processors are required to support both.
</p>

<p>If you deal mostly with English text,
<a name="INDEX-1042" />UTF-8 is the most
efficient and easiest to use. Because the first 128 UTF-8 characters
are the same as the US-ASCII characters, existing applications can
utilize many UTF-8 files transparently. When additional characters
are required, however, UTF-8 encoding will use up to three bytes per
character.
</p>

<p><a name="INDEX-1043" />UTF-16 is more
efficient than UTF-8 for Chinese, Japanese, and Korean (CJK)
ideographs. When using UTF-16, each character requires two bytes,
while many will require three bytes under UTF-8 encoding. Either
UTF-8 or UTF-16 should work. However, it is wise to test actual
transformations with both encodings to determine which results in the
smallest file for your particular data. On a pragmatic note, many
applications and operating systems, particularly Unix and Linux
variants, offer better support for UTF-8 encoding.
</p>

<p>As nearly every XSLT example in this book has shown, the
<tt class="literal">&lt;xsl:output&gt;</tt><a name="INDEX-1044" /> element determines the encoding of the
XSLT result tree:
</p>

<blockquote><pre class="code">&lt;xsl:output method="html" encoding="UTF-16"/&gt;</pre></blockquote>

<p>If this element is missing from the stylesheet, the XSLT processor is
supposed to default to either UTF-8 or UTF-16 encoding.<a href="#FOOTNOTE-42">[42]</a>
</p><blockquote class="footnote">
<a name="FOOTNOTE-42" /><p> [42] The XSLT specification does not say how the processor is
supposed to select between UTF-8 and UTF-16.</p> </blockquote>

<a name="javaxslt-CHP-8-SECT-6.2.1" /><div class="sect3">
<h3 class="sect3">8.6.2.1. Creating the XML and XSLT</h3>

<p>The XML input data, XSLT stylesheet, and result tree do not have to
use the same character encodings or language. For example, an XSLT
stylesheet may be encoded in UTF-16, but may specify UTF-8 as its
output method:
</p>

<blockquote><pre class="code"><tt class="userinput"><b>
&lt;?xml version="1.0" encoding="UTF-16"?&gt;</b></tt>
&lt;xsl:stylesheet version="1.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform"&gt;<tt class="userinput"><b>
  &lt;xsl:output method="html" encoding="UTF-8"/&gt;</b></tt>
...</pre></blockquote>

<p>Even though the first line specifies UTF-16, it is important that the
text editor used to create this stylesheet actually uses UTF-16
encoding when saving the file. Otherwise, tools such as XML Spy
(<a href="../../../../../../www.xmlspy.com/">http://www.xmlspy.com</a>) may
report errors as shown in <a href="ch08_06.htm">Figure 8-8</a>.
</p>

<a name="javaxslt-CHP-8-FIG-8" /><div class="figure"><img src="figs/jxt_0808.gif" alt="Figure 8-8" width="481" height="106" /></div><h4 class="objtitle">Figure 8-8. Error dialog</h4>

<p>To further complicate matters, there are actually two variants of
<a name="INDEX-1045" />UTF-16.
In UTF-16 Little Endian (UTF-16LE) encoding, the low byte of each
two-byte character precedes the high byte. As expected, the high byte
precedes the low byte in UTF-16 Big Endian (UTF-16BE) encoding.
Fortunately, XML parsers can determine the encoding of a file by
looking for a byte order mark. In UTF-16LE, the first byte of the
file should start with 0xFFFE. In UTF-16BE files, the byte order mark
is 0xFEFF.
</p>

<p>For the upcoming Chinese example, the <a name="INDEX-1046" /><a name="INDEX-1047" />NJStar Chinese word processor
(<a href="../../../../../../www.njstar.com/">http://www.njstar.com</a>) was used to input the
Chinese characters. This is an example of an editor that has the
ability to input ideographs and store files in various encodings. The
<a name="INDEX-1048" />Windows NT version of Notepad can save
files in Unicode (UTF-16LE) format, and the Windows 2000 version of
Notepad adds support for UTF-8 and UTF-16BE.
</p>

<p>If all else fails, encoded text files can be created with Java using
the
<tt class="literal">java.io.OutputStreamWriter</tt><a name="INDEX-1049" /> class as follows:
</p>

<blockquote><pre class="code">FileOutputStream fos = new FileOutputStream("myFile.xml");
// the OutputStreamWriter specifies the encoding of the file<tt class="userinput"><b>
PrintWriter pw = new PrintWriter(new OutputStreamWriter(fos, "UTF-16"));</b></tt>
...write to pw just like any other PrintWriter
pw.close( );</pre></blockquote>

</div>
</div>
<a name="javaxslt-CHP-8-SECT-6.3" /><div class="sect2">
<h3 class="sect2">8.6.3. Putting It All Together</h3>

<p>Getting all of the pieces to work together is often the trickiest
aspect of i18n. To demonstrate the concepts, we will now look at XML
datafiles, XSLT stylesheets, and a servlet that work together to
support any combination of English, Chinese, and Spanish. A basic
HTML form makes it possible for users to select which XML file and
XSLT stylesheet will be used to perform a transformation. The screen
shot in <a href="ch08_06.htm">Figure 8-9</a> shows what this web page looks
like.
</p>

<a name="javaxslt-CHP-8-FIG-9" /><div class="figure"><img src="figs/jxt_0809.gif" alt="Figure 8-9" width="289" height="346" /></div><h4 class="objtitle">Figure 8-9. XML and XSLT language selection</h4>

<p>As you can see, there are three versions of the XML data, one for
each language. Other than the language, the three files are
identical. There are also three versions of the XSLT stylesheet, and
the user can select any combination of XML and XSLT language. The
character encoding for the resulting transformation is also
configurable. UTF-8 and UTF-16 are compatible with Unicode and can
display the Spanish and Chinese characters directly. ISO-8859-1,
however, can display only extended character sets using entities such
as <tt class="literal">&amp;#25991;</tt>.
</p>

<p>In this example, users explicitly specify their language preference.
It is also possible to write a servlet that uses the
<tt class="literal">Accept-Language</tt><a name="INDEX-1050" /> HTTP header, which may contain a
list of preferred languages:
</p>

<blockquote><pre class="code">en, es, ja</pre></blockquote>

<p>From this list, the application can attempt to select the appropriate
language and character encoding without prompting the user. Chapter
13 of <em class="emphasis">Java Servlet Programming, Second Edition</em>
by Jason Hunter (O'Reilly) presents a detailed discussion of
this technique along with a class called
<tt class="literal">LocaleNegotiator</tt> that maps more than 30 language
codes to their appropriate character encodings.
</p>

<p>In <a href="ch08_06.htm">Figure 8-10</a>, the results of three different
transformations are displayed. In the first window, a Chinese XSLT
stylesheet is applied to a Chinese XML datafile. In the second
window, the English version of the XSLT stylesheet is applied to the
Spanish XML data. Finally, the Spanish XSLT stylesheet is applied to
the Chinese XML data.
</p>

<a name="javaxslt-CHP-8-FIG-10" /><div class="figure"><img src="figs/jxt_0810.gif" alt="Figure 8-10" width="460" height="288" /></div><h4 class="objtitle">Figure 8-10. Several language combinations</h4>

<p>The <a name="INDEX-1051" />character
encoding is generally transparent to the user. Switching to a
different encoding makes no difference to the output displayed in
<a href="ch08_06.htm">Figure 8-10</a>. However, it does make a difference when
the page source is viewed. For example, when the output is UTF-8, the
actual Chinese or Spanish characters are displayed in the source of
the HTML page. When using ISO-8859-A, however, the source code looks
something like this:
</p>

<blockquote><pre class="code">&lt;html&gt;
&lt;head&gt;
&lt;META http-equiv="Content-Type" content="text/html; charset=ISO-8859-1"&gt;<tt class="userinput"><b>
&lt;title&gt;&amp;#20013;&amp;#25991;XSLT&lt;/title&gt;</b></tt>
&lt;/head&gt;
&lt;body&gt;<tt class="userinput"><b>
&lt;h1&gt;&amp;#20013;&amp;#25991;XSLT&lt;/h1&gt;</b></tt>
...remainder of page omitted</pre></blockquote>

<p>As you can see, the Chinese characters are replaced by their
corresponding character entities, such as
<tt class="literal">&amp;#20013;</tt>. The XSLT processor creates these
entities automatically when the output encoding type cannot display
the characters directly.
</p>

<a name="javaxslt-CHP-8-SIDEBAR-2" /><blockquote><table border="1" cellpadding="6"><tr><td>
<h4 class="objtitle">Browser Fonts</h4>
&nbsp;
<p><a name="INDEX-1052" />Recent
versions of any major web browser can display UTF-8 and UTF-16
encoded characters without problems. Font configuration is the
primary concern. If you are using
<a name="INDEX-1053" /> <a name="INDEX-1054" />Internet Explorer, be sure to
select the View <img src="figs/U2192.gif" alt="Figure 8.6.3" /> Encoding <img src="figs/U2192.gif" alt="Figure 8.6.3" /> Auto Select menu option.
Under Netscape 6, the View <img src="figs/U2192.gif" alt="Figure 8.6.3" /> Character Coding <img src="figs/U2192.gif" alt="Figure 8.6.3" /> Auto
Detect menu option is comparable. If you run the examples and see
question marks and garbled text, this is a good indication that the
proper fonts are not installed on your system.
</p>
&nbsp;
<p>For the Chinese examples shown in this chapter, the Windows 2000
SimHei and SimSun fonts were installed. These and many other fonts
are included with Windows 2000 but are not automatically installed
unless the appropriate language settings are selected under the
regional options window. This window can be found in the Windows 2000
Control Panel. A good source for font information on other versions
of Windows is Fontboard at <a href="../../../../../../www.geocities.com/fontboard">http://www.geocities.com/fontboard</a>.
</p>
&nbsp;
<p><a name="INDEX-1055" />Sun Solaris users should start at the
Sun Global Application Developer Corner web site at <a href="../../../../../../www.sun.com/developers/gadc/">http://www.sun.com/developers/gadc/</a>. This
offers information on internationalization support in the latest
versions of the Solaris operating system. For other versions of Unix
or Linux, a good starting point is the Netscape 6 Help menu. The
International Users option brings up a web page that provides
numerous sources of fonts for various versions of Unix and Linux on
which Netscape runs.
</p>
</td></tr></table><p></blockquote>

<a name="javaxslt-CHP-8-SECT-6.3.1" /><div class="sect3">
<h3 class="sect3">8.6.3.1. XML data</h3>

<p>Each of the three <a name="INDEX-1056" />XML datafiles used by
this example follows the format shown in <a href="ch08_06.htm">Example 8-20</a>. As you can see, the XML data merely lists
translations from English to another language. All three files follow
the same naming convention: <em class="filename">numbers_english.xml</em>,
<em class="filename">numbers_spanish.xml</em>, and
<em class="filename">numbers_chinese.xml</em>.
</p>

<a name="javaxslt-CHP-8-EX-20" /><div class="example">
<h4 class="objtitle">Example 8-20. numbers_spanish.xml </h4>
<blockquote><pre class="code">&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;numbers&gt;
  &lt;language&gt;Espa&#xF1;ol (Spanish)&lt;/language&gt;
  &lt;number english="one"&gt;uno&lt;/number&gt;
  &lt;number english="two"&gt;dos&lt;/number&gt;
  &lt;number english="three"&gt;tres&lt;/number&gt;
  &lt;number english="four"&gt;cuatro&lt;/number&gt;
  &lt;number english="five"&gt;cinco&lt;/number&gt;
  &lt;number english="six"&gt;seis&lt;/number&gt;
  &lt;number english="seven"&gt;siete&lt;/number&gt;
  &lt;number english="eight"&gt;ocho&lt;/number&gt;
  &lt;number english="nine"&gt;nueve&lt;/number&gt;
  &lt;number english="ten"&gt;diez&lt;/number&gt;
&lt;/numbers&gt;</pre></blockquote>
</div>

</div>

<a name="javaxslt-CHP-8-SECT-6.3.2" /><div class="sect3">
<h3 class="sect3">8.6.3.2. XSLT stylesheets</h3>

<p><a name="INDEX-1057" />The
<em class="filename">numbers_english.xslt</em> stylesheet is shown in
<a href="ch08_06.htm">Example 8-21</a> and follows the same pattern that was
introduced earlier in this chapter. Specifically, it isolates
locale-specific data as a series of
variables.<a name="INDEX-1058" />
</p>

<a name="javaxslt-CHP-8-EX-21" /><div class="example">
<h4 class="objtitle">Example 8-21. numbers_english.xslt </h4>
<blockquote><pre class="code">&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;xsl:stylesheet version="1.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform"&gt;
  <tt class="userinput"><b>&lt;xsl:output method="html" encoding="UTF-8"/&gt;
  
  &lt;xsl:variable name="lang.pageTitle"&gt;XSLT in English&lt;/xsl:variable&gt;
  &lt;xsl:variable name="lang.tableCaption"&gt;
    Here is a table of numbers:
  &lt;/xsl:variable&gt;
  &lt;xsl:variable name="lang.englishHeading"&gt;English&lt;/xsl:variable&gt;</b></tt>
  
  &lt;xsl:template match="/"&gt;
    &lt;html&gt;
      &lt;head&gt;
        &lt;title&gt;&lt;xsl:value-of select="$lang.pageTitle"/&gt;&lt;/title&gt;
      &lt;/head&gt;
      &lt;body&gt;
        &lt;xsl:apply-templates select="numbers"/&gt;
      &lt;/body&gt;
    &lt;/html&gt;
  &lt;/xsl:template&gt;
  &lt;xsl:template match="numbers"&gt;
    &lt;h1&gt;&lt;xsl:value-of select="$lang.pageTitle"/&gt;&lt;/h1&gt;
    &lt;xsl:value-of select="$lang.tableCaption"/&gt;
    &lt;table border="1"&gt;
      &lt;tr&gt;
        &lt;th&gt;&lt;xsl:value-of select="$lang.englishHeading"/&gt;&lt;/th&gt;
        &lt;th&gt;
          &lt;xsl:value-of select="language"/&gt;
        &lt;/th&gt;
      &lt;/tr&gt;
      &lt;xsl:apply-templates select="number"/&gt;
    &lt;/table&gt;
  &lt;/xsl:template&gt;
  &lt;xsl:template match="number"&gt;
    &lt;tr&gt;
      &lt;td&gt;
        &lt;xsl:value-of select="@english"/&gt;
      &lt;/td&gt;
      &lt;td&gt;
        &lt;xsl:value-of select="."/&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
  &lt;/xsl:template&gt;
&lt;/xsl:stylesheet&gt;</pre></blockquote>
</div>

<p>As you can see, the default output encoding of this stylesheet is
UTF-8. This can (and will) be overridden by the servlet, however. The
Spanish stylesheet, <em class="filename">numbers_spanish.xslt</em>, is
shown in <a href="ch08_06.htm">Example 8-22</a>.<a name="INDEX-1059" />
</p>

<a name="javaxslt-CHP-8-EX-22" /><div class="example">
<h4 class="objtitle">Example 8-22. numbers_spanish.xslt </h4>
<blockquote><pre class="code">&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;xsl:stylesheet version="1.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform"&gt;
  <tt class="userinput"><b>&lt;xsl:import href="numbers_english.xslt"/&gt;
  
  &lt;xsl:variable name="lang.pageTitle"&gt;XSLT en Espa&#xF1;ol&lt;/xsl:variable&gt;
  &lt;xsl:variable name="lang.tableCaption"&gt;
    Aqu&#xED; est&#xE1; un vector de n&#xFA;meros:
  &lt;/xsl:variable&gt;
  &lt;xsl:variable name="lang.englishHeading"&gt;Ingl&#xE9;s&lt;/xsl:variable&gt;</b></tt>

&lt;/xsl:stylesheet&gt;</pre></blockquote>
</div>

<p>The Chinese stylesheet,
<em class="filename">numbers_chinese.xslt</em><a name="INDEX-1060" />,
is not listed here because it is structured exactly like the Spanish
stylesheet. In both cases, <em class="filename">numbers_english.xslt</em>
is imported, and the three variables are overridden with
language-specific text.
</p>

</div>

<a name="javaxslt-CHP-8-SECT-6.3.3" /><div class="sect3">
<h3 class="sect3">8.6.3.3. Web page and servlet</h3>

<p><a name="INDEX-1061" />The
user begins with the web page that was shown in <a href="ch08_06.htm">Figure 8-9</a>. The HTML source for this page is listed in
<a href="ch08_06.htm">Example 8-23</a>. The language and encoding selections
are posted to a servlet when the user clicks on the Submit
button.<a name="INDEX-1062" />
</p>

<a name="javaxslt-CHP-8-EX-23" /><div class="example">
<h4 class="objtitle">Example 8-23. i18n.html </h4>
<blockquote><pre class="code">&lt;html&gt;
&lt;head&gt;
&lt;title&gt;Internationalization Demo&lt;/title&gt;
&lt;/head&gt;
&lt;body&gt;
<tt class="userinput"><b>&lt;form method="post" action="/chap8/languageDemo"&gt;</b></tt>
  &lt;table border="1"&gt;
    &lt;tr valign="top"&gt;
    &lt;td&gt;XML Language:&lt;/td&gt;
    &lt;td&gt;
      <tt class="userinput"><b>&lt;input type="radio" name="xmlLanguage" 
             checked="checked" value="english"&gt; English&lt;br /&gt;
      &lt;input type="radio" name="xmlLanguage" value="spanish"&gt; Spanish&lt;br /&gt;
      &lt;input type="radio" name="xmlLanguage" value="chinese"&gt; Chinese</b></tt>
    &lt;/td&gt;
  &lt;/tr&gt;
  
  &lt;tr valign="top"&gt;
    &lt;td&gt;XSLT Language:&lt;/td&gt;
    &lt;td&gt;
      <tt class="userinput"><b>&lt;input type="radio" name="xsltLanguage" 
              checked="checked" value="english"&gt; English&lt;br /&gt;
      &lt;input type="radio" name="xsltLanguage" value="spanish"&gt; Spanish&lt;br /&gt;
      &lt;input type="radio" name="xsltLanguage" value="chinese"&gt; Chinese</b></tt>
    &lt;/td&gt;
  &lt;/tr&gt;

  &lt;tr valign="top"&gt;
    &lt;td&gt;Character Encoding:&lt;/td&gt;
    &lt;td&gt;
      <tt class="userinput"><b>&lt;input type="radio" name="charEnc" value="ISO-8859-1"&gt; ISO-8859-1&lt;br /&gt;
      &lt;input type="radio" name="charEnc" value="UTF-8" 
               checked="checked"&gt; UTF-8&lt;br /&gt;
      &lt;input type="radio" name="charEnc" value="UTF-16"&gt; UTF-16&lt;br /&gt;</b></tt>
    &lt;/td&gt;
  &lt;/tr&gt;
  &lt;/table&gt;
  
  &lt;p&gt;
  &lt;input type="submit" name="submitBtn" value="Submit"&gt;
  &lt;/p&gt;
&lt;/form&gt;
&lt;/body&gt;
&lt;/html&gt;</pre></blockquote>
</div>

<p>The
<a name="INDEX-1063" />
<a name="INDEX-1064" />servlet,
<em class="filename">LanguageDemo.java</em>, is shown in <a href="ch08_06.htm">Example 8-24</a>. This servlet accepts input from the
<em class="filename">i18n.html</em> web page and then applies the XSLT
transformation.
</p>

<a name="javaxslt-CHP-8-EX-24" /><div class="example">
<h4 class="objtitle">Example 8-24. LanguageDemo.java servlet </h4>
<blockquote><pre class="code">package chap8;

import java.io.*;
import javax.servlet.*;
import javax.servlet.http.*;
import javax.xml.transform.*;
import javax.xml.transform.stream.*;

/**
 * Allows any combination of English, Spanish, and Chinese XML
 * and XSLT.
 */
public class LanguageDemo extends HttpServlet {

    public void doPost(HttpServletRequest req, HttpServletResponse res)
            throws ServletException, IOException {
        ServletContext ctx = getServletContext( );

        // these are all required parameters from the HTML form
        String xmlLang = req.getParameter("xmlLanguage");
        String xsltLang = req.getParameter("xsltLanguage");
        String charEnc = req.getParameter("charEnc");

        // convert to system-dependent path names
        <tt class="userinput"><b>String xmlFileName = ctx.getRealPath(
                "/WEB-INF/xml/numbers_" + xmlLang + ".xml");
        String xsltFileName = ctx.getRealPath(
                "/WEB-INF/xslt/numbers_" + xsltLang + ".xslt");

        // do this BEFORE calling HttpServletResponse.getWriter( )
        res.setContentType("text/html; charset=" + charEnc);</b></tt>

        try {
            <tt class="userinput"><b>Source xmlSource = new StreamSource(new File(xmlFileName));
            Source xsltSource = new StreamSource(new File(xsltFileName));</b></tt>

            TransformerFactory transFact = TransformerFactory.newInstance( );
            Transformer trans = transFact.newTransformer(xsltSource);

            <tt class="userinput"><b>trans.setOutputProperty(OutputKeys.ENCODING, charEnc);

            // note: res.getWriter( ) will use the encoding type that was
            //       specified earlier in the call to res.setContentType( )
            trans.transform(xmlSource, new StreamResult(res.getWriter( )));</b></tt>

        } catch (TransformerConfigurationException tce) {
            throw new ServletException(tce);
        } catch (TransformerException te) {
            throw new ServletException(te);
        }
    }
}</pre></blockquote>
</div>

<p>After getting the three request parameters for XML, XSLT, and
encoding, the servlet converts the XML and XSLT names to actual
filenames:
</p>

<blockquote><pre class="code">String xmlFileName = ctx.getRealPath(
        "/WEB-INF/xml/numbers_" + xmlLang + ".xml");
String xsltFileName = ctx.getRealPath(
        "/WEB-INF/xslt/numbers_" + xsltLang + ".xslt");</pre></blockquote>

<p>Because the XML files and XSLT stylesheets are named consistently, it
is easy to determine the filenames. The next step is to set the
content type of the response:
</p>

<blockquote><pre class="code">// do this BEFORE calling HttpServletResponse.getWriter( )
res.setContentType("text/html; charset=" + charEnc);</pre></blockquote>

<p>This is a critical step that instructs the servlet container to send
the response to the client using the specified encoding type. This
gets inserted into the <tt class="literal">Content-Type</tt> HTTP response
header, allowing the browser to determine which encoding to expect.
In our example, the three possible character encodings result in the
following possible content types:
</p>

<blockquote><pre class="code">Content-Type: text/html; charset=ISO-8869-1
Content-Type: text/html; charset=UTF-8
Content-Type: text/html; charset=UTF-16</pre></blockquote>

<p>Next, the servlet uses the
<tt class="literal">javax.xml.transform.Source</tt> interface and the
<tt class="literal">javax.xml.transform.stream.StreamSource</tt> class to
read from the XML and XSLT files:
</p>

<blockquote><pre class="code">Source xmlSource = new StreamSource(new File(xmlFileName));
Source xsltSource = new StreamSource(new File(xsltFileName));</pre></blockquote>

<p>By using <tt class="literal">java.io.File</tt>, the
<tt class="literal">StreamSource</tt> will correctly determine the encoding
of the XML and XSLT files by looking at the XML declaration within
each of the files. The <tt class="literal">StreamSource</tt> constructor
also accepts <tt class="literal">InputStream</tt> or
<tt class="literal">Reader</tt> as parameters. Special precautions must be
taken with the <tt class="literal">Reader</tt> constructors, because Java
<tt class="literal">Reader</tt> implementations use the default Java
character encoding, which is determined when the VM starts up. The
<tt class="literal">InputStreamReader</tt> is used to explicitly specify an
encoding as follows:
</p>

<blockquote><pre class="code">Source xmlSource = new StreamSource(new InputStreamReader(
        new FileInputStream(xmlFileName), "UTF-8"));</pre></blockquote>

<p>For more information on how Java uses encodings, see the JavaDoc
package description for the <tt class="literal">java.lang</tt> package.
</p>

<p>Our servlet then overrides the XSLT stylesheet's output
encoding as follows:
</p>

<blockquote><pre class="code">trans.setOutputProperty(OutputKeys.ENCODING, charEnc);</pre></blockquote>

<p>This takes precedence over the encoding that was specified in the
<tt class="literal">&lt;xsl:output&gt;</tt> element shown earlier in <a href="ch08_06.htm">Example 8-21</a>. 
</p>

<p>Finally, the servlet performs the transformation, sending the result
tree to a <tt class="literal">Writer</tt> obtained from
<tt class="literal">HttpServletResponse</tt>:
</p>

<blockquote><pre class="code">// note: res.getWriter( ) will use the encoding type that was
//       specified earlier in the call to res.setContentType( )
trans.transform(xmlSource, new StreamResult(res.getWriter( )));</pre></blockquote>

<p>As the comment indicates, the servlet container should set up the
<tt class="literal">Writer</tt> to use the correct character encoding, as
specified by the <tt class="literal">Content-Type</tt> HTTP
header.<a href="#FOOTNOTE-43">[43]</a>
</p><blockquote class="footnote"> <a name="FOOTNOTE-43" /><p> [43] UTF-16 works under Tomcat 3.2.x but fails
under Tomcat 4.0 beta 5. Hopefully this will be addressed in later
versions of Tomcat.</p> </blockquote>

</div>
</div>
<a name="javaxslt-CHP-8-SECT-6.4" /><div class="sect2">
<h3 class="sect2">8.6.4. I18n Troubleshooting Checklist </h3>

<p><a name="INDEX-1065" />Here
are a few things to consider when problems occur. First, rule out
obvious problems:
</p>

<ul><li>
<p>Visit a web site that uses the language you are trying to produce.
For example, <a href="../../../../../../www.chinadaily.com.cn/">http://www.chinadaily.com.cn/</a> has
an option to view the site in Chinese. This will confirm that your
browser loads the correct fonts.
</p>
</li><li>
<p>Test your application with English XML data and XSLT stylesheets to
verify that the transformations are performed correctly.
</p>
</li><li>
<p>Perform the XSLT transformation on the command line. Save the result
to a file and view with a Unicode-compatible text editor. If all else
fails, view with a binary editor to see how the characters are being
encoded.
</p>
</li><li>
<p>Verify that your XML parser supports the encodings you are trying to
parse.<a href="#FOOTNOTE-44">[44]</a>
</p><blockquote class="footnote"> <a name="FOOTNOTE-44" /><p> [44] Encoding supported by Apache's Xerces
parser are documented at <a href="../../../../../../xml.apache.org/xerces-j/faq-general.html">http://xml.apache.org/xerces-j/faq-general.html</a>.</p>
</blockquote>
</li></ul>
<p>If these tests do not uncover the problem, try the following:</p>

<ul><li>
<p>Stick with UTF-8 encoding until problems are resolved. This is the
most compatible encoding.
</p>
</li><li>
<p>Verify that the servlet sets the <tt class="literal">Content-Type</tt>
header to:
</p>

<blockquote><pre class="code">Content-Type: text/html; charset=UTF-8</pre></blockquote>
</li></ul>
<ul><li>
<p>Verify that the XSLT stylesheet sets the appropriate encoding on the
<tt class="literal">&lt;xsl:output&gt;</tt> element or override the
encoding programmatically:
</p>

<blockquote><pre class="code">transformer.setOutputProperty(OutputKeys.ENCODING, "UTF-8");</pre></blockquote>
</li></ul>
<ul><li>
<p>Insert some code into the servlet that performs the transformation
but sends the result to a file instead of the
<tt class="literal">HttpServletResponse</tt>'s
<tt class="literal">Writer</tt>. Inspect this file with a
Unicode-compatible text editor.
</p>
</li><li>
<p>Use <tt class="literal">java.io.File</tt> or
<tt class="literal">java.io.InputStream</tt> instead of
<tt class="literal">java.io.Reader</tt> when reading XML and XSLT
files.<a name="INDEX-1066" /> <a name="INDEX-1067" /> 
</p>
</li></ul>
</div>


<hr width="684" align="left" />
<div class="navbar"><table width="684" border="0"><tr><td align="left" valign="top" width="228"><a href="ch08_05.htm"><img src="../gifs/txtpreva.gif" alt="Previous" border="0" /></a></td><td align="center" valign="top" width="228"><a href="index.htm"><img src="../gifs/txthome.gif" alt="Home" border="0" /></a></td><td align="right" valign="top" width="228"><a href="ch09_01.htm"><img src="../gifs/txtnexta.gif" alt="Next" border="0" /></a></td></tr><tr><td align="left" valign="top" width="228">8.5. XSLT as a Code Generator</td><td align="center" valign="top" width="228"><a href="index/index.htm"><img src="../gifs/index.gif" alt="Book Index" border="0" /></a></td><td align="right" valign="top" width="228">9. Development Environment, Testing, and Performance</td></tr></table></div>
<hr width="684" align="left" />

<img src="../gifs/navbar.gif" usemap="#library-map" border="0" alt="Library Navigation Links" />
<p><p><font size="-1"><a href="copyrght.htm">Copyright &copy; 2002</a> O'Reilly &amp; Associates. All rights reserved.</font></p>

<map name="library-map"><area shape="rect" coords="0,0,85,93" href="../index.htm"><area shape="rect" coords="85,0,180,98" href="../sax2/index.htm"><area shape="rect" coords="182,-1,261,100" href="../xmlnut/index.htm"><area shape="rect" coords="263,1,384,96" href="../jxml/index.htm"><area shape="rect" coords="386,1,463,100" href="index.htm"><area shape="rect" coords="466,1,533,112" href="../xslt/index.htm"><area shape="rect" coords="535,-1,610,108" href="../schema/index.htm"><area shape="rect" coords="613,1,696,121" href="../pxml/index.htm"></map>

</body></html>