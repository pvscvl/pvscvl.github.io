<html><head><title>Looping and Sorting (Java and XSLT)</title><link rel="stylesheet" type="text/css" href="../style/style1.css" />

<meta name="DC.Creator" content="Eric M. Burke" /><meta name="DC.Format" content="text/xml" scheme="MIME" /><meta name="DC.Language" content="en-US" /><meta name="DC.Publisher" content="O'Reilly &amp; Associates, Inc." /><meta name="DC.Source" scheme="ISBN" content="0596001453L" /><meta name="DC.Subject.Keyword" content="stuff" /><meta name="DC.Title" content="Java and XSLT" /><meta name="DC.Type" content="Text.Monograph" />

</head><body bgcolor="#ffffff">

<img src="gifs/smbanner.gif" usemap="#banner-map" border="0" alt="Book Home" /><map name="banner-map"><area shape="rect" coords="1,-2,616,66" href="index.htm" alt="Java and XSLT" /><area shape="rect" coords="629,-11,726,25" href="jobjects/fsearch.htm" alt="Search this book" /></map>

<div class="navbar"><table width="684" border="0"><tr><td align="left" valign="top" width="228"><a href="ch02_04.htm"><img src="../gifs/txtpreva.gif" alt="Previous" border="0" /></a></td><td align="center" valign="top" width="228" /><td align="right" valign="top" width="228"><a href="ch02_06.htm"><img src="../gifs/txtnexta.gif" alt="Next" border="0" /></a></td></tr></table></div>



<h2 class="sect1">2.5. Looping and Sorting</h2>

<p>As shown throughout this chapter, you can use
<tt class="literal">&lt;xsl:apply-templates ...&gt;</tt> to search for
patterns in an XML document. This type of processing is sometimes
referred to as a "<a name="INDEX-274" /> <a name="INDEX-275" />data driven" approach because the
data of the XML file drives the selection process. Another style of
XSLT programming is called "<a name="INDEX-276" />template driven," which
means that the template's code tends to drive the selection
process.
</p>

<a name="javaxslt-CHP-2-SECT-5.1" /><div class="sect2">
<h3 class="sect2">2.5.1. Looping with &lt;xsl:for-each&gt;</h3>

<p>Sometimes it is convenient to explicitly drive the selection process
with an
<tt class="literal">&lt;xsl:for-each&gt;</tt><a name="INDEX-277" />
<a name="INDEX-278" /> element, which is
reminiscent of traditional programming techniques. In this approach,
you explicitly loop over a collection of nodes without instantiating
a separate template as <tt class="literal">&lt;xsl:apply-templates&gt;</tt>
does. The syntax for <tt class="literal">&lt;xsl:for-each&gt;</tt> is as
follows:
</p>

<blockquote><pre class="code">&lt;xsl:for-each select="president"&gt;
  ...content for each president element
&lt;/xsl:for-each&gt;</pre></blockquote>

<p>The <tt class="literal">select</tt> attribute can contain any XPath
location path, and the loop will iterate over each element in the
resulting node set. In this example, the context is
<tt class="literal">&lt;president&gt;</tt> for all content within the loop.
Nested loops are possible and could be used to loop over the list of
<tt class="literal">&lt;vicePresident&gt;</tt> elements.
</p>

</div>
<a name="javaxslt-CHP-2-SECT-5.2" /><div class="sect2">
<h3 class="sect2">2.5.2. Sorting</h3>

<p><a name="INDEX-279" />Sorting can be
applied in either a data-driven or template-driven approach. In
either case,
<tt class="literal">&lt;xsl:sort&gt;</tt><a name="INDEX-280" /> is added
as a child element to something else. By adding several consecutive
<tt class="literal">&lt;xsl:sort&gt;</tt> elements, you can accomplish
multifield sorting. Each sort can be in ascending or descending
order, and the data type for sorting is either
<tt class="literal">"number"</tt> or <tt class="literal">"text"</tt>. The sort
order defaults to ascending. Some examples of
<tt class="literal">&lt;xsl:sort&gt;</tt> include:
</p>

<blockquote><pre class="code">&lt;xsl:sort select="first"/&gt;
&lt;xsl:sort select="last" order="descending"/&gt;
&lt;xsl:sort select="term/@from" order="descending" data-type="number"/&gt;
&lt;xsl:sort select="name/first" data-type="text" case-order="upper-first"/&gt;</pre></blockquote>

<p>In the last line, the <tt class="literal">case-order</tt> attribute
specifies that uppercase letters should be alphabetized before
lowercase letters. The other accepted value for this attribute is
<tt class="literal">lower-first</tt>. According to the specification, the
default behavior is "language dependent."
</p>

</div>
<a name="javaxslt-CHP-2-SECT-5.3" /><div class="sect2">
<h3 class="sect2">2.5.3. Looping and Sorting Examples</h3>

<p><a name="INDEX-281" />The easiest way to learn about looping
and sorting is to play around with a lot of small examples. The code
in <a href="ch02_05.htm">Example 2-9</a> applies numerous different looping
and sorting strategies to our list of presidents. Comments in the
code indicate what is happening at each step.
</p>

<a name="javaxslt-CHP-2-EX-9" /><div class="example">
<h4 class="objtitle">Example 2-9. Looping and sorting </h4>
<blockquote><pre class="code">&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;xsl:stylesheet version="1.0" 
      xmlns:xsl="http://www.w3.org/1999/XSL/Transform"&gt;
  &lt;xsl:output method="html"/&gt;
  &lt;xsl:template match="/"&gt;
    &lt;html&gt;
      &lt;body&gt;
        &lt;h1&gt;Sorting Examples&lt;/h1&gt;
        &lt;xsl:apply-templates select="presidents"/&gt;
      &lt;/body&gt;
    &lt;/html&gt;
  &lt;/xsl:template&gt;
  &lt;!--********************************************************************
      ** presidents template
      *****************************************************************--&gt;
  &lt;xsl:template match="presidents"&gt;
    &lt;!--*****************************************************************
        ** Sorting using xsl:for-each
        **************************************************************--&gt;
    &lt;h2&gt;All presidents sorted by first name using xsl:for-each&lt;/h2&gt;
    &lt;xsl:for-each select="president"&gt;
      &lt;xsl:sort select="name/first"/&gt;
      &lt;xsl:apply-templates select="name"/&gt;
    &lt;/xsl:for-each&gt;
    &lt;!--*****************************************************************
        ** Sorting using xsl:apply-templates
        **************************************************************--&gt;
    &lt;h2&gt;All presidents sorted by first name using xsl:apply-templates&lt;/h2&gt;
    &lt;xsl:apply-templates select="president/name"&gt;
      &lt;xsl:sort select="first"/&gt;
    &lt;/xsl:apply-templates&gt;
    &lt;h2&gt;All presidents sorted by date using xsl:apply-templates&lt;/h2&gt;
    &lt;xsl:apply-templates select="president/name"&gt;
      &lt;xsl:sort select="../term/@from" data-type="number" order="descending"/&gt;
    &lt;/xsl:apply-templates&gt;
    &lt;!--*****************************************************************
        ** Multi-field sorting
        **************************************************************--&gt;
    &lt;h2&gt;Multi-field sorting example&lt;/h2&gt;
    &lt;xsl:apply-templates select="president/name"&gt;
      &lt;xsl:sort select="last"/&gt;
      &lt;xsl:sort select="first" order="descending"/&gt;
    &lt;/xsl:apply-templates&gt;
    &lt;!--*****************************************************************
        ** Nested xsl:for-each loops
        **************************************************************--&gt;
    &lt;h2&gt;All presidents and vice presidents using xsl:for-each&lt;/h2&gt;
    &lt;ul&gt;
      &lt;xsl:for-each select="president"&gt;
        &lt;xsl:sort select="name/first" order="descending"/&gt;
        &lt;li&gt;
          &lt;xsl:apply-templates select="name"/&gt;
        &lt;/li&gt;
        &lt;ul&gt;
          &lt;xsl:for-each select="vicePresident"&gt;
            &lt;xsl:sort select="name/first"/&gt;
            &lt;li&gt;
              &lt;xsl:apply-templates select="name"/&gt;
            &lt;/li&gt;
          &lt;/xsl:for-each&gt;
        &lt;/ul&gt;
      &lt;/xsl:for-each&gt;
    &lt;/ul&gt;
    &lt;!--*****************************************************************
        ** Same as previous, only using xsl:apply-templates
        **************************************************************--&gt;
    &lt;h2&gt;All presidents and vice presidents using xsl:apply-templates&lt;/h2&gt;
    &lt;ul&gt;
      &lt;xsl:apply-templates select="president"&gt;
        &lt;xsl:sort select="name/first" order="descending"/&gt;
      &lt;/xsl:apply-templates&gt;
    &lt;/ul&gt;
  &lt;/xsl:template&gt;
  &lt;!--*****************************************************************
      ** 'president' template, outputs the president's name and vice
      **             president's name.
      **************************************************************--&gt;
  &lt;xsl:template match="president"&gt;
    &lt;li&gt;
      &lt;xsl:apply-templates select="name"/&gt;
    &lt;/li&gt;
    &lt;ul&gt;
      &lt;xsl:for-each select="vicePresident"&gt;
        &lt;xsl:sort select="name/first"/&gt;
        &lt;li&gt;
          &lt;xsl:apply-templates select="name"/&gt;
        &lt;/li&gt;
      &lt;/xsl:for-each&gt;
    &lt;/ul&gt;
  &lt;/xsl:template&gt;
  &lt;!--*****************************************************************
      ** name template, outputs first, middle, and last name
      **************************************************************--&gt;
  &lt;xsl:template match="name"&gt;
    &lt;xsl:text disable-output-escaping="yes"&gt;&amp;amp;nbsp;&lt;/xsl:text&gt;
    &lt;xsl:value-of select="first"/&gt;
    &lt;xsl:text disable-output-escaping="yes"&gt;&amp;amp;nbsp;&lt;/xsl:text&gt;
    &lt;xsl:value-of select="middle"/&gt;
    &lt;xsl:text disable-output-escaping="yes"&gt;&amp;amp;nbsp;&lt;/xsl:text&gt;
    &lt;xsl:value-of select="last"/&gt;
    &lt;br/&gt;
  &lt;/xsl:template&gt;
&lt;/xsl:stylesheet&gt;</pre></blockquote>
</div>

<p>Notice that when applying a sort to
<tt class="literal">&lt;xsl:apply-templates&gt;</tt>, that element can no
longer be an empty element. Instead, one or more
<tt class="literal">&lt;xsl:sort&gt;</tt> elements are added as children of
<tt class="literal">&lt;xsl:apply-templates&gt;</tt>. You should also note
that sorting cannot occur in the <tt class="literal">&lt;xsl:template
match="name"&gt;</tt> element. The reason for this is simple: at
the <tt class="literal">&lt;xsl:apply-templates&gt;</tt> end, you have a
list of nodes to sort. By the time the processing reaches
<tt class="literal">&lt;xsl:template match="name"&gt;</tt>, the search has
narrowed down to a single <tt class="literal">&lt;name&gt;</tt>, so there
is no node list left to sort.<a name="INDEX-282" /> 
</p>

</div>


<hr width="684" align="left" />
<div class="navbar"><table width="684" border="0"><tr><td align="left" valign="top" width="228"><a href="ch02_04.htm"><img src="../gifs/txtpreva.gif" alt="Previous" border="0" /></a></td><td align="center" valign="top" width="228"><a href="index.htm"><img src="../gifs/txthome.gif" alt="Home" border="0" /></a></td><td align="right" valign="top" width="228"><a href="ch02_06.htm"><img src="../gifs/txtnexta.gif" alt="Next" border="0" /></a></td></tr><tr><td align="left" valign="top" width="228">2.4. XPath Basics</td><td align="center" valign="top" width="228"><a href="index/index.htm"><img src="../gifs/index.gif" alt="Book Index" border="0" /></a></td><td align="right" valign="top" width="228">2.6. Outputting Dynamic Attributes</td></tr></table></div>
<hr width="684" align="left" />

<img src="../gifs/navbar.gif" usemap="#library-map" border="0" alt="Library Navigation Links" />
<p><p><font size="-1"><a href="copyrght.htm">Copyright &copy; 2002</a> O'Reilly &amp; Associates. All rights reserved.</font></p>

<map name="library-map"><area shape="rect" coords="0,0,85,93" href="../index.htm"><area shape="rect" coords="85,0,180,98" href="../sax2/index.htm"><area shape="rect" coords="182,-1,261,100" href="../xmlnut/index.htm"><area shape="rect" coords="263,1,384,96" href="../jxml/index.htm"><area shape="rect" coords="386,1,463,100" href="index.htm"><area shape="rect" coords="466,1,533,112" href="../xslt/index.htm"><area shape="rect" coords="535,-1,610,108" href="../schema/index.htm"><area shape="rect" coords="613,1,696,121" href="../pxml/index.htm"></map>

</body></html>