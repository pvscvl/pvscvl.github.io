<html><head><title>Unicode, Character Sets, and Encodings (Perl and XML)</title><link rel="stylesheet" type="text/css" href="../style/style1.css" />

<meta name="DC.Creator" content="Erik T. Ray and Jason McIntosh" /><meta name="DC.Format" content="text/xml" scheme="MIME" /><meta name="DC.Language" content="en-US" /><meta name="DC.Publisher" content="O'Reilly &amp; Associates, Inc." /><meta name="DC.Source" scheme="ISBN" content="059600205XL" /><meta name="DC.Subject.Keyword" content="stuff" /><meta name="DC.Title" content="Perl and XML" /><meta name="DC.Type" content="Text.Monograph" />

</head><body bgcolor="#ffffff">

<img alt="Book Home" border="0" src="gifs/smbanner.gif" usemap="#banner-map" /><map name="banner-map"><area shape="rect" coords="1,-2,616,66" href="index.htm" alt="Perl &amp; XML" /><area shape="rect" coords="629,-11,726,25" href="jobjects/fsearch.htm" alt="Search this book" /></map>

<div class="navbar"><table width="684" border="0"><tr><td align="left" valign="top" width="228"><a href="ch02_05.htm"><img alt="Previous" border="0" src="../gifs/txtpreva.gif" /></a></td><td align="center" valign="top" width="228" /><td align="right" valign="top" width="228"><a href="ch02_07.htm"><img alt="Next" border="0" src="../gifs/txtnexta.gif" /></a></td></tr></table></div>



<h2 class="sect1">2.6. Unicode, Character Sets, and Encodings</h2>

<p>At<a name="INDEX-115" /> low levels,
computers<a name="INDEX-116" /> see text as a series of
positive<a name="INDEX-117" /> integer numbers mapped onto
character sets, which are collections of numbered characters (and
sometimes control codes) that some standards body created. A very
common collection is the venerable <a name="INDEX-118" />US-ASCII character set,
which contains 128 characters, including upper- and lowercase letters
of the Latin alphabet, numerals, various symbols and space
characters, and a few special print codes inherited from the old days
of teletype terminals. By adding on the eighth bit, this 7-bit system
is extended into a larger set with twice as many characters, such as
ISO-Latin1, used in many Unix systems. These characters include other
European characters, such as Latin letters with accents, Icelandic
characters, ligatures, footnote marks, and legal symbols. Alas,
humanity, a species bursting with both creativity and pride, has
invented many more linguistic symbols than can be mapped onto an
8-bit number.
</p>

<p>For this reason, a new character encoding architecture called Unicode
has gained acceptance as the standard way to represent every written
script in which people might want to store data (or write computer
code). Depending on the flavor used, it uses up to 32 bits to
describe a character, giving the standard room for millions of
individual glyphs. For over a decade, the <a name="INDEX-119" />Unicode Consortium has been filling
up this space with characters ranging from the entire
<a name="INDEX-120" />Han
<a name="INDEX-121" />Chinese
character set to various mathematical, notational, and signage
symbols, and still leaves the encoding space with enough room to grow
for the coming millennium or two.
</p>

<p>Given all this effort we're putting into hyping it,
it shouldn't surprise you to learn that, while an
XML document can use any type of encoding, it will by default assume
the Unicode-flavored, variable-length encoding known as
<a name="INDEX-122" />UTF-8. This encoding uses between one
and six bytes to encode the number that represents the
character's Unicode address and the
character's length in bytes, if that address is
greater than 255. It's possible to write an entire
document in 1-byte characters and have it be indistinguishable from
<a name="INDEX-123" />ISO
Latin-1 (a humble address block with addresses ranging from 0 to
255), but if you need the occasional high character, or if you need a
lot of them (as you would when storing Asian-language data, for
example), it's easy to encode in UTF-8.
Unicode-aware processors handle the encoding correctly and display
the right glyphs, while older applications simply ignore the
multibyte characters and pass them through unharmed. Since Version
5.6, Perl has handled UTF-8 characters with increasing finesse.
We'll discuss Perl's handling of
Unicode in more depth in <a href="ch03_01.htm">Chapter 3, "XML Basics: Reading and Writing"</a>.
</p>



<hr width="684" align="left" />
<div class="navbar"><table width="684" border="0"><tr><td align="left" valign="top" width="228"><a href="ch02_05.htm"><img alt="Previous" border="0" src="../gifs/txtpreva.gif" /></a></td><td align="center" valign="top" width="228"><a href="index.htm"><img alt="Home" border="0" src="../gifs/txthome.gif" /></a></td><td align="right" valign="top" width="228"><a href="ch02_07.htm"><img alt="Next" border="0" src="../gifs/txtnexta.gif" /></a></td></tr><tr><td align="left" valign="top" width="228">2.5. Entities</td><td align="center" valign="top" width="228"><a href="index/index.htm"><img alt="Book Index" border="0" src="../gifs/index.gif" /></a></td><td align="right" valign="top" width="228">2.7. The XML Declaration</td></tr></table></div>
<hr width="684" align="left" />

<img alt="Library Navigation Links" border="0" src="../gifs/navbar.gif" usemap="#library-map" />
<p><p><font size="-1"><a href="copyrght.htm">Copyright &copy; 2002</a> O'Reilly &amp; Associates. All rights reserved.</font></p>

<map name="library-map"><area shape="rect" coords="0,0,85,93" href="../index.htm"><area shape="rect" coords="85,0,180,98" href="../sax2/index.htm"><area shape="rect" coords="182,-1,261,100" href="../xmlnut/index.htm"><area shape="rect" coords="263,1,384,96" href="../jxml/index.htm"><area shape="rect" coords="386,1,463,100" href="../jxslt/index.htm"><area shape="rect" coords="466,1,533,112" href="../xslt/index.htm"><area shape="rect" coords="535,-1,610,108" href="../schema/index.htm"><area shape="rect" coords="613,1,696,121" href="index.htm"></map>

</body></html>