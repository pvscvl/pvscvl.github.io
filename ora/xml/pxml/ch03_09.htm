<html><head><title>Character Sets and Encodings (Perl and XML)</title><link rel="stylesheet" type="text/css" href="../style/style1.css" />

<meta name="DC.Creator" content="Erik T. Ray and Jason McIntosh" /><meta name="DC.Format" content="text/xml" scheme="MIME" /><meta name="DC.Language" content="en-US" /><meta name="DC.Publisher" content="O'Reilly &amp; Associates, Inc." /><meta name="DC.Source" scheme="ISBN" content="059600205XL" /><meta name="DC.Subject.Keyword" content="stuff" /><meta name="DC.Title" content="Perl and XML" /><meta name="DC.Type" content="Text.Monograph" />

</head><body bgcolor="#ffffff">

<img alt="Book Home" border="0" src="gifs/smbanner.gif" usemap="#banner-map" /><map name="banner-map"><area shape="rect" coords="1,-2,616,66" href="index.htm" alt="Perl &amp; XML" /><area shape="rect" coords="629,-11,726,25" href="jobjects/fsearch.htm" alt="Search this book" /></map>

<div class="navbar"><table width="684" border="0"><tr><td align="left" valign="top" width="228"><a href="ch03_08.htm"><img alt="Previous" border="0" src="../gifs/txtpreva.gif" /></a></td><td align="center" valign="top" width="228" /><td align="right" valign="top" width="228"><a href="ch04_01.htm"><img alt="Next" border="0" src="../gifs/txtnexta.gif" /></a></td></tr></table></div>



<h2 class="sect1">3.9. Character Sets and Encodings</h2>

<p>No<a name="INDEX-292" /> matter<a name="INDEX-293" /> how you choose to manage your
program's output, you must keep in mind the concept
of character encoding -- the protocol your output XML document
uses to represent the various symbols of its language, be they an
alphabet of letters or a catalog of ideographs and diacritical marks.
Character encoding may represent the trickiest part of XML-slinging,
perhaps especially so for programmers in Western Europe and the
Americas, most of whom have not explored the universe of possible
encodings beyond the 128 characters of ASCII.
</p>

<p>While it's technically legal for an XML
document's <tt class="literal">encoding</tt> declaration
to contain the name of any text encoding scheme, the only ones that
XML processors are, according to spec, required to understand are
<a name="INDEX-294" />UTF-8 and <a name="INDEX-295" />UTF-16. UTF-8 and UTF-16 are two
flavors of <em class="emphasis">Unicode</em><a name="INDEX-296" />, a recent and powerful
character encoding architecture that embraces every funny little
squiggle a person might care to make.
</p>

<p>In this section, we conspire with Perl and XML to nudge you gently
into thinking about Unicode, if you're not pondering
it already. While you can do everything described in this book by
using the legacy encoding of your choice, you'll
find, as time passes, that you're swimming against
the current.
</p>

<a name="perlxml-CHP-3-SECT-9.1" /><div class="sect2">
<h3 class="sect2">3.9.1. Unicode, Perl, and XML</h3>

<p><a name="INDEX-297" />Unicode has crept
in as the digital age's way of uniting the thousands
of different writing systems that have paid the salaries of monks and
linguists for centuries. Of course, if you program in an environment
where non-ASCII characters are found in abundance,
you're probably already familiar with it. However,
even then, much of your text processing work might be restricted to
low-bit Latin alphanumerics, simply because that's
been the character set of choice -- of fiat, really -- for the
Internet. Unicode hopes to change this trend, Perl hopes to help, and
sneaky little XML is already doing so.
</p>

<p>As any Unicode-evangelizing document will tell you,<a href="#FOOTNOTE-20">[20]</a> Unicode is great for internationalizing code. It lets
programmers come up with localization solutions without the
additional worry of juggling different character architectures.
</p><blockquote class="footnote">
<a name="FOOTNOTE-20" /><p>[20]These documents include Chapter 15 of
O'Reilly's <em class="citetitle">Programming
Perl, Third Edition</em> and the FAQ that the Unicode
consortium hosts at <a href="../../../../../../unicode.org/unicode/faq/">http://unicode.org/unicode/faq/</a>.</p>
</blockquote>

<p>However, Unicode's importance increases by an order
of magnitude when you introduce the question of data representation.
The languages that a given program's users (or
programmers) might prefer is one thing, but as computing becomes more
ubiquitous, it touches more people's lives in more
ways every day, and some of these people speak Kurku. By
understanding the basics of Unicode, you can see how it can help to
transparently keep all the data you'll ever work
with, no matter the script, in one architecture.
</p>

</div>
<a name="perlxml-CHP-3-SECT-9.2" /><div class="sect2">
<h3 class="sect2">3.9.2. Unicode Encodings</h3>

<p>We are careful to separate the words
"architecture" and
"encoding" because Unicode actually
represents one of the former that contains several of the latter.
</p>

<p>In Unicode, every discrete squiggle that's gained
official recognition, from A to <img align="absmiddle" src="figs/U03B1.gif" /> to <img src="figs/smile.gif">, has its own<a name="INDEX-298" /> <em class="emphasis">code point</em> -- a unique positive integer that serves as its <a name="INDEX-299" />address in the whole map of Unicode. For example, the first letter of the Latin alphabet, capitalized, lives at the hexadecimal address <tt class="literal">0x0041</tt> (as it does in ASCII and friends), and the other two symbols, the lowercase Greek alpha and the smileyface, are found in <tt class="literal">0x03B1</tt> and <tt class="literal">0x263A</tt>, respectively. A character can be constructed from any one of these code points, or by combining several of them. Many code points are dedicated to holding the various <a name="INDEX-300" />diacritical marks, such as accents and radicals, that many scripts use in conjunction with<a name="INDEX-301" /> base alphabetical or <a name="INDEX-302" />ideographic glyphs. </p>
<p>These addresses, as well as those of the tens of thousands (and, in
time, hundreds of thousands) of other glyphs on the map, remain true
across Unicode's encodings. The only difference lies
in the way these numbers are encoded in the ones and zeros that make
up the document at its lowest level.
</p>

<p>Unicode officially supports three types of encoding, all named
<a name="INDEX-303" /> <a name="INDEX-304" />UTF (short
for Unicode Transformation Format), followed by a number representing
the smallest bit-size any character might take. The encodings are
UTF-8, UTF-16, and UTF-32. UTF-8 is the most flexible of all, and is
therefore the one that Perl has adopted.
</p>

<a name="perlxml-CHP-3-SECT-9.2.1" /><div class="sect3">
<h3 class="sect3">3.9.2.1. UTF-8</h3>

<p>The <a name="INDEX-305" />UTF-8 encoding, arguably the most
Perlish in its impish trickery, is also the most efficient since
it's the only one that can pack characters into
single bytes. For that reason, UTF-8 is the default encoding for XML
documents: if XML documents specify no encoding in their
declarations, then processors should assume that they use UTF-8.
</p>

<p>Each character appearing within a document encoded with UTF-8 uses as
many bytes as it has to in order to represent that
character's code point, up to a maximum of six
bytes. Thus, the character A, with the itty-bitty address of
<tt class="literal">0x41</tt>, gets one byte to represent it, while our
friend <img src="figs/smile.gif"> lives way up the street in one of Unicode's blocks of miscellaneous doohickeys, with the address <tt class="literal">0x263A</tt>. It takes three bytes for itself -- two for the character's code point number and one that signals to text processors that there are, in fact, multiple bytes to this character. Several centuries from now, after Earth begrudgingly joins the Galactic Friendship Union and we find ourselves needing to encode the characters from countless off-planet civilizations, bytes four through six will come in quite handy. </p>
</div>

<a name="perlxml-CHP-3-SECT-9.2.2" /><div class="sect3">
<h3 class="sect3">3.9.2.2. UTF-16</h3>

<p>The UTF-16 encoding uses a full two bytes to represent the character
in question, even if its ordinal is small enough to fit into one
(which is how UTF-8 would handle it). If, on the other hand, the
character is rare enough to have a very high ordinal, then it gets an
additional two bytes tacked onto it (called a surrogate pair),
bringing that one character's total length to four
bytes.
</p>

<a name="ch03-25-fm2xml" /><blockquote><b>TIP:</b> 
Because Unicode 2.0 used a 16-bits-per-character style as its sole
supported encoding, many people, and the programs they write, talk
about the "Unicode encoding" when
they really mean Unicode UTF-16. Even new
applications' "Save
As..." dialog boxes sometimes offer
"Unicode" and
"UTF-8" as separate choices, even
though these labels don't make much sense in Unicode
3.2 terminology.
</p>
</blockquote>

</div>

<a name="perlxml-CHP-3-SECT-9.2.3" /><div class="sect3">
<h3 class="sect3">3.9.2.3. UTF-32</h3>

<p><a name="INDEX-306" />UTF-32 works a lot like
UTF-16, but eliminates any question of variable character size by
declaring that every invoked Unicode-mapped glyph shall occupy
exactly four bytes. Because of its maximum maximosity, this encoding
doesn't see much practical use, since all but the
most unusual communication would have significantly more than half of
its total mass made up of leading zeros, which
doesn't work wonders for efficiency. However, if
guaranteed character width is an inflexible issue, this encoding can
handle all the million-plus glyph addresses that Unicode
accommodates. Of the three major Unicode encodings, UTF-32 is the one
that XML <a name="INDEX-307" />parsers aren't
obliged to understand. Hence, you probably don't
need to worry about it, either.
</p>

</div>
</div>
<a name="perlxml-CHP-3-SECT-9.3" /><div class="sect2">
<h3 class="sect2">3.9.3. Other Encodings</h3>

<p>The XML standard defines 21 names for character sets that parsers
might use (beyond the two they're required to know,
UTF-8 and UTF-16). These names range from
<tt class="literal">ISO-8859-1</tt> (ASCII plus 128 characters outside the
Latin alphabet) to <tt class="literal">Shift_JIS</tt>, a Microsoftian
encoding for Japanese ideographs. While they're not
Unicode encodings per se, each character within them maps to one or
more Unicode code points (and vice versa, allowing for round-tripping
between common encodings by way of Unicode).
</p>

<p>XML parsers in Perl all have their own ways of dealing with other
encodings. Some may need an extra little nudge.
<tt class="literal">XML::Parser</tt><a name="INDEX-308" />, for example, is weak in its raw state
because its underlying library, Expat, understands only a handful of
non-Unicode encodings. Fortunately, you can give it a helping hand by
installing Clark Cooper's
<tt class="literal">XML::Encoding</tt> module, an
<tt class="literal">XML::Parser</tt> subclass that can read and understand
map files (themselves XML documents) that bind the character code
points of other encodings to their Unicode addresses.
</p>

<a name="perlxml-CHP-3-SECT-9.3.1" /><div class="sect3">
<h3 class="sect3">3.9.3.1. Core Perl support </h3>

<p>As with XML, Perl's relationship with Unicode has
heated up at a cautious but inevitable pace.<a href="#FOOTNOTE-21">[21]</a>
Generally, you should use Perl version 5.6 or greater to work with
Unicode properly in your code. If you do have 5.6 or greater, consult
its <tt class="literal">perlunicode</tt> manpage for details on how deep
its support runs, as each release since then has gradually deepened
its loving embrace with Unicode. If you have an even earlier Perl,
whew, you really ought to consider upgrading it. You can eke by with
some of the tools we'll mention later in this
chapter, but hacking Perl and XML means hacking in Unicode, and
you'll notice the lack of core support for it.
</p><blockquote class="footnote"> <a name="FOOTNOTE-21" /><p>[21]The
romantic metaphor may start to break down for you here, but you
probably understand by now that Perl's polyamorous
proclivities help make it the language that it is.</p> </blockquote>

<p>Currently, the most recent stable Perl release, 5.6.1, contains
partial support for <a name="INDEX-309" />Unicode. Invoking the <tt class="literal">use
utf8</tt> pragma tells Perl to use UTF-8 encoding with most of
its string-handling functions. Perl also allows code to exist in
UTF-8, allowing identifiers built from characters living beyond
ASCII's one-byte reach. This can prove very useful
for hackers who primarily think in glyphs outside the Latin alphabet.
</p>

<p>Perl 5.8's Unicode support will be much more
complete, allowing UTF-8 and regular expressions to play nice. The
5.8 distribution also introduces the <tt class="literal">Encode</tt> module
to Perl's standard library, which will allow any
Perl programmer to shift text from legacy encodings to Unicode
without fuss:
</p>

<blockquote><pre class="code">use Encode 'from_to';
from_to($data, "iso-8859-3", "utf-8"); # from legacy to
utf-8</pre></blockquote>

<p>Finally, Perl 6, being a redesign of the whole language that includes
everything the Perl community learned over the last dozen years, will
naturally have an even more intimate relationship with Unicode (and
will give us an excuse to print a second edition of this book in a
few years). Stay tuned to the usual information channels for
continuing developments on this front as we see what happens.
</p>

</div>
</div>
<a name="perlxml-CHP-3-SECT-9.4" /><div class="sect2">
<h3 class="sect2">3.9.4. Encoding Conversion</h3>

<p>If <a name="INDEX-310" />
<a name="INDEX-311" /> <a name="INDEX-312" />you use a version of Perl older than
5.8, you'll need a little extra help when switching
from one encoding to another. Fortunately, your toolbox contains some
ratchety little devices to assist you.
</p>

<a name="perlxml-CHP-3-SECT-9.4.1" /><div class="sect3">
<h3 class="sect3">3.9.4.1. iconv and Text::Iconv</h3>

<p><tt class="literal">iconv</tt><a name="INDEX-313" /> is a library and program available for
Windows and Unix (inlcuding Mac OS X) that provides an easy interface
for turning a document of type A into one of type B. On the Unix
command line, you can use it like this:
</p>

<blockquote><pre class="code">$ <tt class="userinput"><b>iconv -f latin1 -t utf8 my_file.txt &gt; my_unicode_file.txt</b></tt></pre></blockquote>

<p>If you have <tt class="literal">iconv</tt> on your system, you can also
grab the
<tt class="literal">Text::Iconv</tt><a name="INDEX-314" /> Perl module from CPAN, which gives you a
Perl API to this library. This allows you to quickly re-encode
on-disk files or strings in memory.
</p>

</div>

<a name="perlxml-CHP-3-SECT-9.4.2" /><div class="sect3">
<h3 class="sect3">3.9.4.2. Unicode::String</h3>

<p>A more portable solution comes in the form of the
<tt class="literal">Unicode::String</tt><a name="INDEX-315" /> module, which needs no underlying C
library. The module's basic API is as blissfully
simple as all basic APIs should be. Got a string? Feed it to the
class's constructor method and get back an object
holding that string, as well as a bevy of methods that let you squash
and stretch it in useful and amusing ways. <a href="ch03_09.htm">Example 3-12</a> tests the module.
</p>

<a name="perlxml-CHP-3-EX-12" /><div class="example">
<h4 class="objtitle">Example 3-12. Unicode test </h4>
<blockquote><pre class="code">use Unicode::String;

my $string = "This sentence exists in ASCII and UTF-8, but not UTF-16. Darn!\n";
my $u = Unicode::String-&gt;new($string);

# $u now holds an object representing a stringful of 16-bit characters

# It uses overloading so Perl string operators do what you expect!
$u .= "\n\nOh, hey, it's Unicode all of a sudden. Hooray!!\n"

# print as UTF-16 (also known as UCS2)
print $u-&gt;ucs2;

# print as something more human-readable
print $u-&gt;utf8;</pre></blockquote>
</div>

<p>The module's many methods allow you to downgrade
your strings, too -- specifically, the <tt class="literal">utf7</tt>
method lets you pop the eighth bit off of UTF-8 characters, which is
acceptable if you need to throw a bunch of ASCII characters at a
receiver that would flip out if it saw chains of UTF-8 marching
proudly its way instead of the austere and solitary encodings of old.
</p>

<a name="ch03-32-fm2xml" /><blockquote><b>WARNING:</b> 
<tt class="literal">XML::Parser</tt> sometimes seems a little too eager to
get you into Unicode. No matter what a document's
declared encoding is, it silently transforms all characters with
higher Unicode code points into UTF-8, and if you ask the parser for
your data back, it delivers those characters back to you in that
manner. This silent transformation can be an unpleasant surprise. If
you use <tt class="literal">XML::Parser</tt> as the core of any processing
software you write, be aware that you may need to use the convertion
tools mentioned in this section to massage your data into a more
suitable format.
</p>
</blockquote>

</div>

<a name="perlxml-CHP-3-SECT-9.4.3" /><div class="sect3">
<h3 class="sect3">3.9.4.3. Byte order marks</h3>

<p>If, for some reason, you have an XML document from an unknown source
and have no idea what its encoding might be, it may behoove you to
check for the presence of a <em class="emphasis">byte order
mark</em><a name="INDEX-316" /> <a name="INDEX-317" /> (BOM) at the start of the document.
Documents that use Unicode's UTF-16 and UTF-32
encodings are endian-dependent (while UTF-8 escapes this fate by
nature of its peculiar protocol). Not knowing which end of a byte
carries the significant bit will make reading these documents similar
to reading them in a mirror, rendering their content into a garble
that your programs will not appreciate.
</p>

<p>Unicode defines a special code point, <tt class="literal">U+FEFF</tt>, as
the byte order mark. According to the Unicode specification,
documents using the UTF-16 or UTF-32 encodings have the option of
dedicating their first two or four bytes to this character.<a href="#FOOTNOTE-22">[22]</a> This way, if a program
carefully inspecting the document scans the first two bits and sees
that they're <tt class="literal">0xFE</tt> and
<tt class="literal">0xFF</tt>, in that order, it knows
it's big-endian UTF-16. On the other hand, if it
sees <tt class="literal">0xFF 0xFE</tt>, it knows that document is
little-endian because there is no Unicode code point of
<tt class="literal">U+FFFE</tt>. (UTF-32's big- and
little-endian BOMs have more padding: <tt class="literal">0x00 0x00 0xFE
0xFF</tt> and <tt class="literal">0xFF 0xFE 0x00 0x00</tt>,
respectively.)
</p><blockquote class="footnote">
<a name="FOOTNOTE-22" /><p>[22]UTF-8 has its own byte order mark, but its purpose is to
identify the document at UTF-8, and thus has little use in the XML
world. The UTF-8 encoding doesn't have to worry
about any of this endianness business since all its characters are
made of strung-together byte sequences that are always read from
first to last instead of little boxes holding byte pairs whose order
may be questionable.</p> </blockquote>

<p>The XML specification states that UTF-16- and UTF-32-encoded
documents must use a BOM, but, referring to the Unicode
specification, we see that documents created by the engines of sane
and benevolent masters will arrive to you in network order. In other
words, they arrive to you in a big-endian fashion, which was some
time ago declared as the order to use when transmitting data between
machines. Conversely, because you are sane and benevolent, you should
always transmit documents in network order when
you're not sure which order to use. However, if you
ever find yourself in doubt that you've received a
sane document, just close your eyes and hum this tune:
</p>

<blockquote><pre class="code">open XML_FILE, $filename or die "Can't read $filename: $!";
my $bom; # will hold possible byte order mark

# read the first two bytes
read XML_FILE, $bom, 2;

# Fetch their numeric values, via Perl's ord() function
my $ord1 = ord(substr($bom,0,1));
my $ord2 = ord(substr($bom,1,1));

if ($ord1 == 0xFE &amp;&amp; $ord2 == 0xFF) {
  # It looks like a UTF-16 big-endian document!
  # ... act accordingly here ...
} elsif ($ord1 == 0xFF &amp;&amp; $ord2 == 0xEF) {
  # Oh, someone was naughty and sent us a UTF-16 little-endian document.
  # Probably we'll want to effect a byteswap on the thing before working with it.
} else {
  # No byte order mark detected.
}</pre></blockquote>

<p>You might run this example as a last-ditch effort if your parser
complains that it can't find any XML in the
document. The first line might indeed be a valid <tt class="literal">&lt;?xml
... &gt;</tt> declaration<a name="INDEX-318" /> <a name="INDEX-319" /> <a name="INDEX-320" />, but<a name="INDEX-321" /> your<a name="INDEX-322" /> parser sees<a name="INDEX-323" /> some<a name="INDEX-324" /> gobbledygook
instead.
</p>

</div>
</div>


<hr width="684" align="left" />
<div class="navbar"><table width="684" border="0"><tr><td align="left" valign="top" width="228"><a href="ch03_08.htm"><img alt="Previous" border="0" src="../gifs/txtpreva.gif" /></a></td><td align="center" valign="top" width="228"><a href="index.htm"><img alt="Home" border="0" src="../gifs/txthome.gif" /></a></td><td align="right" valign="top" width="228"><a href="ch04_01.htm"><img alt="Next" border="0" src="../gifs/txtnexta.gif" /></a></td></tr><tr><td align="left" valign="top" width="228">3.8. XML::Writer</td><td align="center" valign="top" width="228"><a href="index/index.htm"><img alt="Book Index" border="0" src="../gifs/index.gif" /></a></td><td align="right" valign="top" width="228">4. Event Streams</td></tr></table></div>
<hr width="684" align="left" />

<img alt="Library Navigation Links" border="0" src="../gifs/navbar.gif" usemap="#library-map" />
<p><p><font size="-1"><a href="copyrght.htm">Copyright &copy; 2002</a> O'Reilly &amp; Associates. All rights reserved.</font></p>

<map name="library-map"><area shape="rect" coords="0,0,85,93" href="../index.htm"><area shape="rect" coords="85,0,180,98" href="../sax2/index.htm"><area shape="rect" coords="182,-1,261,100" href="../xmlnut/index.htm"><area shape="rect" coords="263,1,384,96" href="../jxml/index.htm"><area shape="rect" coords="386,1,463,100" href="../jxslt/index.htm"><area shape="rect" coords="466,1,533,112" href="../xslt/index.htm"><area shape="rect" coords="535,-1,610,108" href="../schema/index.htm"><area shape="rect" coords="613,1,696,121" href="index.htm"></map>

</body></html>
