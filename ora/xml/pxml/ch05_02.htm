<html><head><title>DTD Handlers (Perl and XML)</title><link rel="stylesheet" type="text/css" href="../style/style1.css" />

<meta name="DC.Creator" content="Erik T. Ray and Jason McIntosh" /><meta name="DC.Format" content="text/xml" scheme="MIME" /><meta name="DC.Language" content="en-US" /><meta name="DC.Publisher" content="O'Reilly &amp; Associates, Inc." /><meta name="DC.Source" scheme="ISBN" content="059600205XL" /><meta name="DC.Subject.Keyword" content="stuff" /><meta name="DC.Title" content="Perl and XML" /><meta name="DC.Type" content="Text.Monograph" />

</head><body bgcolor="#ffffff">

<img alt="Book Home" border="0" src="gifs/smbanner.gif" usemap="#banner-map" /><map name="banner-map"><area shape="rect" coords="1,-2,616,66" href="index.htm" alt="Perl &amp; XML" /><area shape="rect" coords="629,-11,726,25" href="jobjects/fsearch.htm" alt="Search this book" /></map>

<div class="navbar"><table width="684" border="0"><tr><td align="left" valign="top" width="228"><a href="ch05_01.htm"><img alt="Previous" border="0" src="../gifs/txtpreva.gif" /></a></td><td align="center" valign="top" width="228" /><td align="right" valign="top" width="228"><a href="ch05_03.htm"><img alt="Next" border="0" src="../gifs/txtnexta.gif" /></a></td></tr></table></div>



<h2 class="sect1">5.2. DTD Handlers</h2>

<p><tt class="literal">XML::Parser::PerlSAX</tt><a name="INDEX-380" /> <a name="INDEX-381" /><a name="INDEX-382" />
supports another group of handlers used to process DTD
events<a name="INDEX-383" />
<a name="INDEX-384" />.
It takes care of anything that appears before the root element, such
as the XML declaration, doctype declaration, and the internal subset
of entity and element declarations, which are collectively called the
<em class="emphasis">document prolog</em><a name="INDEX-385" />. If you want to output
the document literally as you read it (e.g., in a filter program),
you need to define some of these handlers to reproduce the document
prolog. Defining these handlers is just what we needed in the
previous example.
</p>

<p>You can use these handlers for other purposes. For example, you may
need to pre-load entity definitions for special processing rather
than rely on the parser to do its default substitution for you. These
handlers are listed in <a href="ch05_02.htm">Table 5-2</a>.
</p>

<a name="perlxml-CHP-5-TABLE-2" /><h4 class="objtitle">Table 5-2. PerlSAX DTD handlers </h4><table border="1">




<tr>
<th>
<p>Method name</p>
</th>
<th>
<p>Event</p>
</th>
<th>
<p>Properties</p>
</th>
</tr>


<tr>
<td>
<p><tt class="literal">entity_decl</tt><a name="INDEX-386" />
</p>
</td>
<td>
<p>The parser sees an entity declaration (internal or external, parsed
or unparsed).
</p>
</td>
<td>
<p><tt class="literal">Name, Value, PublicId, SystemId, Notation</tt></p>
</td>
</tr>
<tr>
<td>
<p><tt class="literal">notation_decl</tt><a name="INDEX-387" />
</p>
</td>
<td>
<p>The parser found a notation declaration. </p>
</td>
<td>
<p><tt class="literal">Name, PublicId, SystemId, Base</tt></p>
</td>
</tr>
<tr>
<td>
<p><tt class="literal">unparsed_entity_decl</tt><a name="INDEX-388" />
</p>
</td>
<td>
<p>The parser found a declaration for an unparsed entity (e.g., a binary
data entity).
</p>
</td>
<td>
<p><tt class="literal">Name, PublicId, SystemId, Base</tt></p>
</td>
</tr>
<tr>
<td>
<p><tt class="literal">element_decl</tt><a name="INDEX-389" />
</p>
</td>
<td>
<p>An element declaration was found. </p>
</td>
<td>
<p><tt class="literal">Name, Model</tt></p>
</td>
</tr>
<tr>
<td>
<p><tt class="literal">attlist_decl</tt><a name="INDEX-390" />
</p>
</td>
<td>
<p>An element's attribute list declaration was
encountered.
</p>
</td>
<td>
<p><tt class="literal">ElementName, AttributeName, Type, Fixed</tt></p>
</td>
</tr>
<tr>
<td>
<p><tt class="literal">doctype_decl</tt><a name="INDEX-391" />
</p>
</td>
<td>
<p>The parser found the document type declaration. </p>
</td>
<td>
<p><tt class="literal">Name, SystemId, PublicId, Internal</tt></p>
</td>
</tr>
<tr>
<td>
<p><tt class="literal">xml_decl</tt><a name="INDEX-392" />
</p>
</td>
<td>
<p>The XML declaration was encountered. </p>
</td>
<td>
<p><tt class="literal">Version, Encoding, Standalone</tt></p>
</td>
</tr>

</table><p>

<p>The <tt class="literal">entity_decl( )</tt> handler is called for all
kinds of entity declarations unless a more specific handler is
defined. Thus, unparsed entity declarations trigger the
<tt class="literal">entity_decl( )</tt> handler unless
you've defined an <tt class="literal">unparsed_entity_decl(
)</tt>, which will take precedence.
</p>

<p><tt class="literal">entity_decl( )</tt>'s parameters
vary depending on the entity type. The <tt class="literal">Value</tt>
parameter is set for internal entities, but not external ones.
Likewise, <tt class="literal">PublicId</tt> and
<tt class="literal">SystemId</tt>, parameters that tell an XML processor
where to find the file containing the entity's
value, is not set for internal entities, only external ones.
<tt class="literal">Base</tt> tells the procesor what to use for a base URL
if the <tt class="literal">SystemId</tt> contains a relative location.
</p>

<p>Notation declarations are a special feature of DTDs that allow you to
assign a special type identifier to an entity. For example, you could
declare an entity to be of type
"date" to tell the XML processor
that the entity should be treated as that kind of data.
It's not used very often in XML, so we
won't go into it further.
</p>

<p>The <tt class="literal">Model</tt> property of the <tt class="literal">element_decl(
)</tt> contains the content model, or grammar, for an element.
This property describes what is allowed to go inside an element
according to the DTD.
</p>

<p>An attribute list declaration in a DTD can contain more than one
attribute description. Fortunately, the parser breaks these
descriptions up into individual calls to the <tt class="literal">attlist_decl(
)</tt> handler for each attribute.
</p>

<p>The document type declaration is an optional part of the document at
the top, just under the XML declaration. The parameter
<tt class="literal">Name</tt> is the name of the root element in your
document. <tt class="literal">PublicId</tt> and <tt class="literal">SystemId</tt>
tell the processor where to find the external DTD. Finally, the
<tt class="literal">Internal</tt> parameter contains the whole internal
subset as a string, in case you want to skip the individual entity
and element declaration handling.
</p>

<p>As an example, let's say you wanted to add to the
filter example code to output the document prolog exactly as it was
encountered by the parser. You'd need to define
handlers like the program in <a href="ch05_02.htm">Example 5-4</a>.
</p>

<a name="perlxml-CHP-5-EX-4" /><div class="example">
<h4 class="objtitle">Example 5-4. A better filter </h4>
<blockquote><pre class="code"># handle xml declaration
#
sub xml_decl {
    my( $self, $properties ) = @_;
    output( "&lt;?xml version=\"" . $properties-&gt;{'Version'} . "\"" );
    my $encoding = $properties-&gt;{'Encoding'};
    output( " encoding=\"$encoding\"" ) if( $encoding );
    my $standalone = $properties-&gt;{'Standalone'};
    output( " standalone=\"$standalone\"" ) if( $standalone );
    output( "?&gt;\n" );
}

#
# handle doctype declaration:
# try to duplicate the original
#
sub doctype_decl {
    my( $self, $properties ) = @_;
    output( "\n&lt;!DOCTYPE " . $properties-&gt;{'Name'} . "\n" );
    my $pubid = $properties-&gt;{'PublicId'};
    if( $pubid ) {
        output( "  PUBLIC \"$pubid\"\n" );
        output( "  \"" . $properties-&gt;{'SystemId'} . "\"\n" );
    } else {
        output( "  SYSTEM \"" . $properties-&gt;{'SystemId'} . "\"\n" );
    }
    my $intset = $properties-&gt;{'Internal'};
    if( $intset ) {
        $in_intset = 1;
        output( "[\n" );
    } else {
        output( "&gt;\n" );
    }
}

#
# handle entity declaration in internal subset:
# recreate the original declaration as it was
#
sub entity_decl {
    my( $self, $properties ) = @_;
    my $name = $properties-&gt;{'Name'};
    output( "&lt;!ENTITY $name " );
    my $pubid = $properties-&gt;{'PublicId'};
    my $sysid = $properties-&gt;{'SystemId'};
    if( $pubid ) {
        output( "PUBLIC \"$pubid\" \"$sysid\"" );
    } elsif( $sysid ) {
        output( "SYSTEM \"$sysid\"" );
    } else {
        output( "\"" . $properties-&gt;{'Value'} . "\"" );
    }
    output( "&gt;\n" );
}</pre></blockquote>
</div>

<p>Now let's see how the output from our filter looks.
The result is in <a href="ch05_02.htm">Example 5-5</a>.
</p>

<a name="perlxml-CHP-5-EX-5" /><div class="example">
<h4 class="objtitle">Example 5-5. Output from the filter </h4>
<blockquote><pre class="code">&lt;?xml version="1.0"?&gt;

&lt;!DOCTYPE book
  SYSTEM "/usr/local/prod/sgml/db.dtd"
[
&lt;!ENTITY thingy "hoo hah blah blah"&gt;
]&gt;
&lt;book id="mybook"&gt;

  &lt;title&gt;GRXL in a Nutshell&lt;/title&gt;
  &lt;chapter id="intro"&gt;
    &lt;title&gt;What is GRXL?&lt;/title&gt;
&lt;comment&gt; need a better title &lt;/comment&gt;
    &lt;para&gt;
Yet another acronym.  That was our attitude at first, but then we saw 
the amazing uses of this new technology called
&lt;literal&gt;GRXL&lt;/literal&gt;.  Consider the following program:
    &lt;/para&gt;

    &lt;programlisting&gt;AH aof -- %%%%
{{{{{{ let x = 0 }}}}}}
  print!  &lt;lineannotation&gt;wow&lt;/lineannotation&gt;
or not!&lt;/programlisting&gt;
&lt;comment&gt; what font should we use? &lt;/comment&gt;
    &lt;para&gt;
What does it do?  Who cares?  It's just lovely to look at.  In fact,
I'd have to say, "&amp;thingy;".
    &lt;/para&gt;

  &lt;/chapter&gt;
&lt;/book&gt;</pre></blockquote>
</div>

<p>That's much better. Now we have a complete filter
program. The basic handlers take care of elements and everything
inside them. The DTD handlers deal with whatever happens<a name="INDEX-393" />
outside<a name="INDEX-394" /> <a name="INDEX-395" /> of the<a name="INDEX-396" /> <a name="INDEX-397" /> root element.
</p>



<hr width="684" align="left" />
<div class="navbar"><table width="684" border="0"><tr><td align="left" valign="top" width="228"><a href="ch05_01.htm"><img alt="Previous" border="0" src="../gifs/txtpreva.gif" /></a></td><td align="center" valign="top" width="228"><a href="index.htm"><img alt="Home" border="0" src="../gifs/txthome.gif" /></a></td><td align="right" valign="top" width="228"><a href="ch05_03.htm"><img alt="Next" border="0" src="../gifs/txtnexta.gif" /></a></td></tr><tr><td align="left" valign="top" width="228">5. SAX</td><td align="center" valign="top" width="228"><a href="index/index.htm"><img alt="Book Index" border="0" src="../gifs/index.gif" /></a></td><td align="right" valign="top" width="228">5.3. External Entity Resolution</td></tr></table></div>
<hr width="684" align="left" />

<img alt="Library Navigation Links" border="0" src="../gifs/navbar.gif" usemap="#library-map" />
<p><p><font size="-1"><a href="copyrght.htm">Copyright &copy; 2002</a> O'Reilly &amp; Associates. All rights reserved.</font></p>

<map name="library-map"><area shape="rect" coords="0,0,85,93" href="../index.htm"><area shape="rect" coords="85,0,180,98" href="../sax2/index.htm"><area shape="rect" coords="182,-1,261,100" href="../xmlnut/index.htm"><area shape="rect" coords="263,1,384,96" href="../jxml/index.htm"><area shape="rect" coords="386,1,463,100" href="../jxslt/index.htm"><area shape="rect" coords="466,1,533,112" href="../xslt/index.htm"><area shape="rect" coords="535,-1,610,108" href="../schema/index.htm"><area shape="rect" coords="613,1,696,121" href="index.htm"></map>

</body></html>