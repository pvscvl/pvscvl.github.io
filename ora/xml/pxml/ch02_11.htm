<html><head><title>Schemas (Perl and XML)</title><link rel="stylesheet" type="text/css" href="../style/style1.css" />

<meta name="DC.Creator" content="Erik T. Ray and Jason McIntosh" /><meta name="DC.Format" content="text/xml" scheme="MIME" /><meta name="DC.Language" content="en-US" /><meta name="DC.Publisher" content="O'Reilly &amp; Associates, Inc." /><meta name="DC.Source" scheme="ISBN" content="059600205XL" /><meta name="DC.Subject.Keyword" content="stuff" /><meta name="DC.Title" content="Perl and XML" /><meta name="DC.Type" content="Text.Monograph" />

</head><body bgcolor="#ffffff">

<img alt="Book Home" border="0" src="gifs/smbanner.gif" usemap="#banner-map" /><map name="banner-map"><area shape="rect" coords="1,-2,616,66" href="index.htm" alt="Perl &amp; XML" /><area shape="rect" coords="629,-11,726,25" href="jobjects/fsearch.htm" alt="Search this book" /></map>

<div class="navbar"><table width="684" border="0"><tr><td align="left" valign="top" width="228"><a href="ch02_10.htm"><img alt="Previous" border="0" src="../gifs/txtpreva.gif" /></a></td><td align="center" valign="top" width="228" /><td align="right" valign="top" width="228"><a href="ch02_12.htm"><img alt="Next" border="0" src="../gifs/txtnexta.gif" /></a></td></tr></table></div>



<h2 class="sect1">2.11. Schemas</h2>

<p>Several proposed alternate language schemas address the shortcomings
of DTD declarations. The W3C's recommended language
for doing this is called <a name="INDEX-149" />
<a name="INDEX-150" />XML Schema. You should know, however, that
it is only one of many competing schema-type languages, some of which
may be better suited to your needs. If you prefer to use a competing
schema, check CPAN to see if a module has been written to handle your
favorite flavor of schemas.
</p>

<p>Unlike DTD syntax, XML Schemas are themselves XML documents, making
it possible to use many XML tools to edit them. Their real power,
however, is in their fine-grained control over the form your data
takes. This control makes it more attractive for documents for which
checking the quality of data is at least as important as ensuring it
has the proper structure. <a href="ch02_11.htm">Example 2-4</a> shows a schema
designed to model census forms, where data type checking is
necessary.
</p>

<a name="perlxml-CHP-2-EX-4" /><div class="example">
<h4 class="objtitle">Example 2-4. An XML schema </h4>
<blockquote><pre class="code">&lt;xs:schema xmlns:xs="http://www.w3.org/2001/XMLSchema-instance"&gt;

  &lt;xs:annotation&gt;
    &lt;xs:documentation&gt;
      Census form for the Republic of Oz
      Department of Paperwork, Emerald City
    &lt;/xs:documentation&gt;
  &lt;/xs:annotation&gt;

  &lt;xs:element name="census" type="CensusType"/&gt;

  &lt;xs:complexType name="CensusType"&gt;
    &lt;xs:element name="censustaker" type="xs:decimal" minoccurs="0"/&gt;
    &lt;xs:element name="address" type="Address"/&gt;
    &lt;xs:element name="occupants" type="Occupants"/&gt;
    &lt;xs:attribute name="date" type="xs:date"/&gt;
  &lt;/xs:complexType&gt;

  &lt;xs:complexType name="Address"&gt;
    &lt;xs:element name="number" type="xs:decimal"/&gt;
    &lt;xs:element name="street" type="xs:string"/&gt;
    &lt;xs:element name="city"   type="xs:string"/&gt;
    &lt;xs:element name="province"  type="xs:string"/&gt;
    &lt;xs:attribute name="postalcode" type="PCode"/&gt;
  &lt;/xs:complexType&gt;

  &lt;xs:simpleType name="PCode" base="xs:string"&gt;
    &lt;xs:pattern value="[A-Z]-d{3}"/&gt;
  &lt;/xs:simpleType&gt;

  &lt;xs:complexType name="Occupants"&gt;
    &lt;xs:element name="occupant" minOccurs="1" maxOccurs="20"&gt;
     &lt;xs:complexType&gt;
      &lt;xs:element name="firstname" type="xs:string"/&gt;
      &lt;xs:element name="surname" type="xs:string"/&gt;
      &lt;xs:element name="age"&gt;
       &lt;xs:simpleType base="xs:positive-integer"&gt;
        &lt;xs:maxExclusive value="200"/&gt;
       &lt;/xs:simpleType&gt;
      &lt;/xs:element&gt;
     &lt;/xs:complexType&gt;
    &lt;/xs:element&gt;
   &lt;/xs:complexType&gt;

&lt;/xs:schema&gt;</pre></blockquote>
</div>

<p>The first line identifies this document as a schema and associates it
with the XML Schema namespace. The next structure,
<tt class="literal">&lt;annotation&gt;</tt>, is a place to document the
schema's purpose and other details. After this
documentation, we get into the fun stuff and start declaring element
types.
</p>

<p>We start by declaring the root of our document type, an element
called <tt class="literal">&lt;census&gt;</tt>. The declaration is an
element of type <tt class="literal">&lt;xs:element&gt;</tt>. Its attributes
assign the name "census" and type
of description for <tt class="literal">&lt;census&gt;</tt>,
"CensusType". In schemas, unlike
DTDs, the content descriptions are often kept separate from the
declarations, making it easier to define generic element types and
assign multiple elements to them. Further down in the schema is the
actual content description, an
<tt class="literal">&lt;xs:complexType&gt;</tt> element with
<tt class="literal">name="CensusType"</tt>. It specifies that a
<tt class="literal">&lt;census&gt;</tt> contains an optional
<tt class="literal">&lt;censustaker&gt;</tt>, followed by a required
<tt class="literal">&lt;occupants&gt;</tt> and a required
<tt class="literal">&lt;address&gt;</tt>. It also must have an attribute
called <tt class="literal">date</tt>.
</p>

<p>Both the attribute <tt class="literal">date</tt> and the element
<tt class="literal">&lt;censustaker&gt;</tt> have specific data patterns
assigned in the description of <tt class="literal">&lt;census&gt;</tt>: a
date and a decimal number. If your <tt class="literal">&lt;census&gt;</tt>
document had anything but a numerical value as its content, it would
be an error according to this schema. You couldn't
get this level of control with DTDs.
</p>

<p>Schemas can check for many types. These types include numerical
values like bytes, floating-point numbers, long integers, binary
numbers, and boolean values; patterns for marking times and
durations; Internet addresses and URLs; IDs, IDREFs, and other types
borrowed from DTDs; and strings of character data.
</p>

<p>An element type description uses properties called
<em class="emphasis">facets</em><a name="INDEX-151" /> to set even more detailed
limits on content. For example, the schema above gives the
<tt class="literal">&lt;age&gt;</tt> element, whose data type is
<tt class="literal">positive-integer</tt>, a maximum value of 200 using the
<tt class="literal">max-inclusive</tt> facet. XML Schemas have many other
facets, including <tt class="literal">precision</tt>,
<tt class="literal">scale</tt>, <tt class="literal">encoding</tt>,
<tt class="literal">pattern</tt>, <tt class="literal">enumeration</tt>, and
<tt class="literal">max-length</tt>.
</p>

<p>The <tt class="literal">Address</tt> description introduces a new concept:
user-defined patterns. With this technique, we define
<tt class="literal">postalcode</tt> with a pattern code:
<tt class="literal">[A-Z]-d{3}</tt>. Using this code is like saying,
"Accept any alphabetic character followed by a dash
and three digits." If no data type fits your needs,
you can always make up a new one.
</p>

<p>Schemas are an exciting new technology that makes XML more useful,
especially with data-specific applications such as data entry forms.
We'll leave a full account of its uses and forms for
another book.
</p>

<a name="perlxml-CHP-2-SECT-11.1" /><div class="sect2">
<h3 class="sect2">2.11.1. Other Schema Strategies</h3>

<p>While it has the blessing of the W3C, XML Schema is not the only
schema option available for flexible document validation. Some
programmers prefer the methods available through specifications like
RelaxNG (available at
<a href="../../../../../../www.oasis-open.org/committees/relax-ng/">http://www.oasis-open.org/committees/relax-ng/</a>)
or Schematron
(<a href="../../../../../../www.ascc.net/xml/resource/schematron/schematron.html">http://www.ascc.net/xml/resource/schematron/schematron.html</a>),
which achieve the same goals through different philosophical means.
Since the latter specification has Perl implementations that are
currently available<a name="INDEX-152" /> <a name="INDEX-153" />, we'll examine it
further in <a href="ch03_01.htm">Chapter 3, "XML Basics: Reading and Writing"</a>.
</p>

</div>


<hr width="684" align="left" />
<div class="navbar"><table width="684" border="0"><tr><td align="left" valign="top" width="228"><a href="ch02_10.htm"><img alt="Previous" border="0" src="../gifs/txtpreva.gif" /></a></td><td align="center" valign="top" width="228"><a href="index.htm"><img alt="Home" border="0" src="../gifs/txthome.gif" /></a></td><td align="right" valign="top" width="228"><a href="ch02_12.htm"><img alt="Next" border="0" src="../gifs/txtnexta.gif" /></a></td></tr><tr><td align="left" valign="top" width="228">2.10. Declaring Elements and Attributes</td><td align="center" valign="top" width="228"><a href="index/index.htm"><img alt="Book Index" border="0" src="../gifs/index.gif" /></a></td><td align="right" valign="top" width="228">2.12. Transformations</td></tr></table></div>
<hr width="684" align="left" />

<img alt="Library Navigation Links" border="0" src="../gifs/navbar.gif" usemap="#library-map" />
<p><p><font size="-1"><a href="copyrght.htm">Copyright &copy; 2002</a> O'Reilly &amp; Associates. All rights reserved.</font></p>

<map name="library-map"><area shape="rect" coords="0,0,85,93" href="../index.htm"><area shape="rect" coords="85,0,180,98" href="../sax2/index.htm"><area shape="rect" coords="182,-1,261,100" href="../xmlnut/index.htm"><area shape="rect" coords="263,1,384,96" href="../jxml/index.htm"><area shape="rect" coords="386,1,463,100" href="../jxslt/index.htm"><area shape="rect" coords="466,1,533,112" href="../xslt/index.htm"><area shape="rect" coords="535,-1,610,108" href="../schema/index.htm"><area shape="rect" coords="613,1,696,121" href="index.htm"></map>

</body></html>