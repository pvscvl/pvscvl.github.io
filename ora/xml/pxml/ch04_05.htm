<html><head><title>XML::PYX (Perl and XML)</title><link rel="stylesheet" type="text/css" href="../style/style1.css" />

<meta name="DC.Creator" content="Erik T. Ray and Jason McIntosh" /><meta name="DC.Format" content="text/xml" scheme="MIME" /><meta name="DC.Language" content="en-US" /><meta name="DC.Publisher" content="O'Reilly &amp; Associates, Inc." /><meta name="DC.Source" scheme="ISBN" content="059600205XL" /><meta name="DC.Subject.Keyword" content="stuff" /><meta name="DC.Title" content="Perl and XML" /><meta name="DC.Type" content="Text.Monograph" />

</head><body bgcolor="#ffffff">

<img alt="Book Home" border="0" src="gifs/smbanner.gif" usemap="#banner-map" /><map name="banner-map"><area shape="rect" coords="1,-2,616,66" href="index.htm" alt="Perl &amp; XML" /><area shape="rect" coords="629,-11,726,25" href="jobjects/fsearch.htm" alt="Search this book" /></map>

<div class="navbar"><table width="684" border="0"><tr><td align="left" valign="top" width="228"><a href="ch04_04.htm"><img alt="Previous" border="0" src="../gifs/txtpreva.gif" /></a></td><td align="center" valign="top" width="228" /><td align="right" valign="top" width="228"><a href="ch04_06.htm"><img alt="Next" border="0" src="../gifs/txtnexta.gif" /></a></td></tr></table></div>



<h2 class="sect1">4.5. XML::PYX</h2>

<p>In<a name="INDEX-341" /> <a name="INDEX-342" />
the Perl universe, standard APIs have been slow to catch on for many
reasons. CPAN, the vast storehouse of publicly offered modules, grows
organically, with no central authority to approve of a submission.
Also, with XML, a relative newcomer on the data format scene, the
Perl community has only begun to work out standard solutions.
</p>

<p>We can characterize the first era of XML hacking in Perl to be the
age of nonstandard parsers. It's a time when
documentation is scarce and modules are experimental. There is much
creativity and innovation, and just as much idiosyncrasy and
quirkiness. Surprisingly, many of the tools that first appeared on
the horizon were quite useful. It's fascinating
territory for historians and developers alike.
</p>

<p><tt class="literal">XML::PYX</tt> is one of these early parsers. Streams
naturally lend themselves to the concept of pipelines, where data
output from one program can be plugged into another, creating a chain
of processors. There's no reason why XML
can't be handled that way, so an innovative and
elegant processing style has evolved around this concept.
Essentially, the XML is repackaged as a stream of easily recognizable
and transmutable symbols, even as a command-line utility.
</p>

<p>One example of this repackaging is PYX, a symbolic encoding of XML
markup that is friendly to text processing languages like Perl. It
presents each XML event on a separate line very cleverly. Many Unix
programs like <em class="emphasis">awk</em><a name="INDEX-343" /> and
<em class="emphasis">grep</em><a name="INDEX-344" /> are line oriented, so they work
well with PYX. Lines are happy in Perl too.
</p>

<p><a href="ch04_05.htm">Table 4-1</a> summarizes the notation of PYX. </p>

<a name="perlxml-CHP-4-TABLE-1" /><h4 class="objtitle">Table 4-1. PYX notation </h4><table border="1">



<tr>
<th>
<p>Symbol</p>
</th>
<th>
<p>Represents</p>
</th>
</tr>


<tr>
<td>
<p><a name="INDEX-345" /> <a name="INDEX-346" />(
</p>
</td>
<td>
<p>An element start tag</p>
</td>
</tr>
<tr>
<td>
<p>)</p>
</td>
<td>
<p>An element end tag</p>
</td>
</tr>
<tr>
<td>
<p><a name="INDEX-347" />
<a name="INDEX-348" />-
</p>
</td>
<td>
<p>Character data</p>
</td>
</tr>
<tr>
<td>
<p><a name="INDEX-349" /> <a name="INDEX-350" />A
</p>
</td>
<td>
<p>An attribute</p>
</td>
</tr>
<tr>
<td>
<p><a name="INDEX-351" /> <a name="INDEX-352" />?
</p>
</td>
<td>
<p>A processing instruction</p>
</td>
</tr>

</table><p>

<p>For every event coming through the stream, PYX starts a new line,
beginning with one of the five symbols shown in <a href="ch04_05.htm">Table 4-1</a>. This line is followed by the element name or
whatever other data is pertinent. Special characters are escaped with
a backslash, as you would see in Perl code.
</p>

<p>Here's how a parser converting an XML document into
PYX notation would look. The following code is XML input by the
parser:
</p>

<blockquote><pre class="code">&lt;shoppinglist&gt;
  &lt;!-- brand is not important --&gt;
  &lt;item&gt;toothpaste&lt;/item&gt;
  &lt;item&gt;rocket engine&lt;/item&gt;
  &lt;item optional="yes"&gt;caviar&lt;/item&gt;
&lt;/shoppinglist&gt;</pre></blockquote>

<p>As PYX, it would look like this: </p>

<blockquote><pre class="code">(shoppinglist
-\n
(item
-toothpaste
)item
-\n
(item
-rocket engine
)item
-\n
(item
Aoptional yes
-caviar
)item
-\n
)shoppinglist</pre></blockquote>

<p>Notice that the comment didn't come through in the
PYX translation. PYX is a little simplistic in some ways, omitting
some details in the markup. It will not alert you to CDATA markup
sections, although it will let the content pass through. Perhaps the
most serious loss is character entity references that disappear from
the stream. You should make sure you don't need that
information before working with PYX.
</p>

<p>Matt <a name="INDEX-353" />Sergeant
has written a module, <tt class="literal">XML::PYX</tt>, which parses XML
and translates it into PYX. The compact program in <a href="ch04_05.htm">Example 4-2</a> strips out all XML element tags, leaving only
the character data.
</p>

<a name="perlxml-CHP-4-EX-2" /><div class="example">
<h4 class="objtitle">Example 4-2. PYX parser </h4>
<blockquote><pre class="code">use XML::PYX;

# initialize parser and generate PYX
my $parser = XML::PYX::Parser-&gt;new;
my $pyx;
if (defined ( $ARGV[0] )) {
  $pyx = $parser-&gt;parsefile( $ARGV[0] );
}

# filter out the tags
foreach( split( / /, $pyx )) {
  print $' if( /^-/ );
}</pre></blockquote>
</div>

<p>PYX is an interesting alternative to SAX and DOM for quick-and-dirty
XML processing. It's useful for simple tasks like
element counting, separating content from markup, and reporting
simple events. However, it does lack sophistication, making it less
attractive<a name="INDEX-354" /> <a name="INDEX-355" /> for complex processing.
</p>



<hr width="684" align="left" />
<div class="navbar"><table width="684" border="0"><tr><td align="left" valign="top" width="228"><a href="ch04_04.htm"><img alt="Previous" border="0" src="../gifs/txtpreva.gif" /></a></td><td align="center" valign="top" width="228"><a href="index.htm"><img alt="Home" border="0" src="../gifs/txthome.gif" /></a></td><td align="right" valign="top" width="228"><a href="ch04_06.htm"><img alt="Next" border="0" src="../gifs/txtnexta.gif" /></a></td></tr><tr><td align="left" valign="top" width="228">4.4. Stream Applications</td><td align="center" valign="top" width="228"><a href="index/index.htm"><img alt="Book Index" border="0" src="../gifs/index.gif" /></a></td><td align="right" valign="top" width="228">4.6. XML::Parser</td></tr></table></div>
<hr width="684" align="left" />

<img alt="Library Navigation Links" border="0" src="../gifs/navbar.gif" usemap="#library-map" />
<p><p><font size="-1"><a href="copyrght.htm">Copyright &copy; 2002</a> O'Reilly &amp; Associates. All rights reserved.</font></p>

<map name="library-map"><area shape="rect" coords="0,0,85,93" href="../index.htm"><area shape="rect" coords="85,0,180,98" href="../sax2/index.htm"><area shape="rect" coords="182,-1,261,100" href="../xmlnut/index.htm"><area shape="rect" coords="263,1,384,96" href="../jxml/index.htm"><area shape="rect" coords="386,1,463,100" href="../jxslt/index.htm"><area shape="rect" coords="466,1,533,112" href="../xslt/index.htm"><area shape="rect" coords="535,-1,610,108" href="../schema/index.htm"><area shape="rect" coords="613,1,696,121" href="index.htm"></map>

</body></html>