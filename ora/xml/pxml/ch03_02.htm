<html><head><title>XML::Parser (Perl and XML)</title><link rel="stylesheet" type="text/css" href="../style/style1.css" />

<meta name="DC.Creator" content="Erik T. Ray and Jason McIntosh" /><meta name="DC.Format" content="text/xml" scheme="MIME" /><meta name="DC.Language" content="en-US" /><meta name="DC.Publisher" content="O'Reilly &amp; Associates, Inc." /><meta name="DC.Source" scheme="ISBN" content="059600205XL" /><meta name="DC.Subject.Keyword" content="stuff" /><meta name="DC.Title" content="Perl and XML" /><meta name="DC.Type" content="Text.Monograph" />

</head><body bgcolor="#ffffff">

<img alt="Book Home" border="0" src="gifs/smbanner.gif" usemap="#banner-map" /><map name="banner-map"><area shape="rect" coords="1,-2,616,66" href="index.htm" alt="Perl &amp; XML" /><area shape="rect" coords="629,-11,726,25" href="jobjects/fsearch.htm" alt="Search this book" /></map>

<div class="navbar"><table width="684" border="0"><tr><td align="left" valign="top" width="228"><a href="ch03_01.htm"><img alt="Previous" border="0" src="../gifs/txtpreva.gif" /></a></td><td align="center" valign="top" width="228" /><td align="right" valign="top" width="228"><a href="ch03_03.htm"><img alt="Next" border="0" src="../gifs/txtnexta.gif" /></a></td></tr></table></div>



<h2 class="sect1">3.2. XML::Parser</h2>

<p>Writing <a name="INDEX-199" />a
<a name="INDEX-200" />parser requires a lot of work. You
can't be sure if you've covered
everything without a lot of testing. Unless you're a
mutant who loves to write efficient, low-level parser code, your
program will probably be slow and resource-intensive. The good news
is that a wide variety of free, high quality, and easy-to-use XML
parser packages (written by friendly mutants) already exist to help
you. People have bashed Perl and XML together for years, and you have
a barnful of conveniently pre-invented wheels at your disposal.
</p>

<p>Where do Perl programmers go to find ready-made modules to use in
their programs? They go to the <a name="INDEX-201" />Comprehensive Perl Archive Network
(CPAN), a many-mirrored public resource full of free, open-source
Perl code. If you aren't familiar with using CPAN,
you must change your isolationist ways and learn to become a
programmer of the world. You'll find a multitude of
modules authored by folks who have walked the path of Perl and XML
before you, and who've chosen to share the tools
they've made with the rest of the world.
</p>



<a name="ch03-7-fm2xml" /><blockquote><b>TIP:</b> 
Don't think of CPAN as a catalog of ready-made
solutions for all specific XML problems. Rather, look at it as a
toolbox or a source of building blocks you can assemble and configure
to craft a solution. While some modules specialize in popular XML
applications like RSS and SOAP, most are more general-purpose.
Chances are, you won't find a module that
specifically addresses your needs. You'll more
likely take one of the general XML modules and adapt it somehow.
We'll show that this process is painless and reveal
several ways to configure general modules to your particular
application.
</p>
</blockquote>

<p>XML parsers differ from one another in two major ways. First, they
differ in their <em class="emphasis">parsing
style</em><a name="INDEX-202" />
<a name="INDEX-203" />, which is how the parser works with
XML. There are a few different strategies, such as building a data
structure or creating an event stream. Another attribute of parsers,
called
<em class="emphasis">standards-completeness</em><a name="INDEX-204" />, is a spectrum ranging from ad hoc
on one extreme to an exhaustive, standards-based solution on the
other. The balance on the latter axis is slowly moving from the
eccentric, nonstandard side toward the other end as the Perl
community agrees on how to implement major standards like SAX and
DOM.
</p>

<p>The <tt class="literal">XML::Parser</tt> module is the great-grandpappy of
all Perl-based XML processors. It is a multifaceted parser, offering
a handful of different parsing styles. On the standards axis,
it's closer to ad hoc than standards-compliant;
however, being the first efficient XML parser to appear on the Perl
horizon, it has a dear place in our hearts and is still very useful.
While <tt class="literal">XML::Parser</tt> uses a nonstandard API and has a
reputation for getting a bit persnickety over some issues, it
<em class="emphasis">works</em>. It parses documents with reasonable speed
and flexibility, and as all Perl hackers know, people tend to glom
onto the first usable solution that appears on the radar, no matter
how ugly it is. Thus, nearly all of the first few
years' worth of Perl and XML modules and programs
based themselves on <tt class="literal">XML::Parser</tt>.
</p>

<p>Since 2001 or so, however, other low-level parsing modules have
emerged that base themselves on faster and more standards-compliant
core libraries. We'll touch on these modules
shortly. However, we'll start out with an
examination of <tt class="literal">XML::Parser</tt>, giving a nod to its
venerability and functionality.
</p>

<p>In the early days of XML, a skilled programmer named James
<a name="INDEX-205" />Clark wrote an
XML parser library in <a name="INDEX-206" />C and called it <a name="INDEX-207" />Expat.<a href="#FOOTNOTE-15">[15]</a> Fast,
efficient, and very stable, it became the parser of choice among
early adopters of XML. To bring XML into the Perl realm, Larry
<a name="INDEX-208" />Wall wrote a
low-level API for it and called the module
<tt class="literal">XML::Parser::Expat</tt><a name="INDEX-209" />. Then he built a layer on top of that,
<tt class="literal">XML::Parser</tt>, to serve as a general-purpose parser
for everybody. Now maintained by Clark Cooper,
<tt class="literal">XML::Parser</tt> has served as the foundation of many
XML modules.
</p><blockquote class="footnote"> <a name="FOOTNOTE-15" /><p>[15]James
Clark is a big name in the XML community. He tirelessly promotes the
standard with his free tools and involvement with the W3C. You can
see his work at <a href="../../../../../../www.jclark.com/">http://www.jclark.com/</a>. Clark is also editor
of the XSLT and XPath recommendation documents at <a href="../../../../../../www.w3.org/">http://www.w3.org/</a>.</p> </blockquote>

<p>The C underpinnings are the secret to
<tt class="literal">XML::Parser</tt>'s success.
We've seen how to write a basic parser in Perl. If
you apply our previous example to a large XML document,
you'll wait a long time before it finishes. Others
have written complete XML parsers in Perl that are portable to any
system, but you'll find much better performance in a
compiled C parser like Expat. Fortunately, as with every other Perl
module based on C code (and there are actually lots of these modules
because they're not too hard to make, thanks to
Perl's standard <a name="INDEX-210" />XS library),<a href="#FOOTNOTE-16">[16]</a> it's easy to forget
you're driving Expat around when you use
<tt class="literal">XML::Parser</tt>.
</p><blockquote class="footnote"> <a name="FOOTNOTE-16" /><p>[16]See
<tt class="literal">man perlxs</tt> or Chapter 25 of
O'Reilly's <em class="emphasis">Programming
Perl, Third Edition</em> for more information.</p>
</blockquote>

<a name="perlxml-CHP-3-SECT-2.1" /><div class="sect2">
<h3 class="sect2">3.2.1. Example: Well-Formedness Checker Revisited</h3>

<p>To<a name="INDEX-211" />
show how
<tt class="literal">XML::Parser</tt><a name="INDEX-212" /> might be used, let's
return to the well-formedness checker problem. It's
very easy to create this tool with <tt class="literal">XML::Parser</tt>, as
shown in <a href="ch03_02.htm">Example 3-2</a>.
</p>

<a name="perlxml-CHP-3-EX-2" /><div class="example">
<h4 class="objtitle">Example 3-2. Well-formedness checker using XML::Parser </h4>
<blockquote><pre class="code">use XML::Parser;

my $xmlfile = shift @ARGV;              # the file to parse

# initialize parser object and parse the string
my $parser = XML::Parser-&gt;new( ErrorContext =&gt; 2 );
eval { $parser-&gt;parsefile( $xmlfile ); };

# report any error that stopped parsing, or announce success
if( $@ ) {
    $@ =~ s/at \/.*?$//s;               # remove module line number
    print STDERR "\nERROR in '$file':\n$@\n";
} else {
    print STDERR "'$file' is well-formed\n";
}</pre></blockquote>
</div>

<p>Here's how this program works. First, we create a
new <tt class="literal">XML::Parser</tt> object to do the parsing. Using an
object rather than a static function call means that we can configure
the parser once and then process multiple files without the overhead
of repeatedly recreating the parser. The object retains your settings
and keeps the Expat parser routine alive for as long as you want to
parse files, and then cleans everything up when
you're done.
</p>

<p>Next, we call the <tt class="literal">parsefile(
)</tt><a name="INDEX-213" /> method inside an
<tt class="literal">eval</tt><a name="INDEX-214" /> block because
<tt class="literal">XML::Parser</tt> tends to be a little overzealous when
dealing with parse errors. If we didn't use an
<tt class="literal">eval</tt> block, our program would
<tt class="literal">die</tt> before we had a chance to do any cleanup. We
check the variable <tt class="literal">$@</tt> for content in case there
was an error. If there was, we remove the line number of the module
at which the parse method "died"
and then print out the message.
</p>

<p>When initializing the parser object, we set an option
<tt class="literal">ErrorContext =&gt; 2</tt>.
<tt class="literal">XML::Parser</tt> has several options you can set to
control parsing. This one is a directive sent straight to the Expat
parser that remembers the context in which errors occur and saves two
lines before the error. When we print out the error message, it tells
us what line the error happened on and prints out the region of text
with an arrow pointing to the offending mistake.
</p>

<p>Here's an example of our checker choking on a
syntactic faux pas (where we decided to name our program
<em class="emphasis">xwf</em> as an XML well-formedness checker):
</p>

<blockquote><pre class="code">$ <tt class="userinput"><b>xwf ch01.xml</b></tt> 

ERROR in 'ch01.xml':

not well-formed (invalid token) at line 66, column 22, byte 2354:

&lt;chapter id="dorothy-in-oz"&gt;
&lt;title&gt;Lions, Tigers &amp; Bears&lt;/title&gt;
=====================^</pre></blockquote>

<p>Notice how simple it is to set up the parser and get powerful
results. What you don't see until you run the
program yourself is that it's fast. When you type
the command, you get a result in a split second.
</p>

<p>You can configure the parser to work in different ways. You
don't have to parse a file, for example. Use the
method <tt class="literal">parse( )</tt><a name="INDEX-215" /> to parse a text string instead. Or, you
could give it the option <tt class="literal">NoExpand =&gt; 1</tt> to
override default entity expansion with your own entity resolver
routine. You could use this option to prevent the parser from opening
external entities, limiting the scope of its checking.
</p>

<p>Although the well-formedness checker is a very useful tool that you
certainly want in your XML toolbox if you work with XML files often,
it only scratches the surface of what we can do with
<tt class="literal">XML::Parser</tt>. We'll see in the
next section that a parser's most important role is
in shoveling packaged data into your program. How it does this
depends on the particular style you select.
</p>

</div>
<a name="perlxml-CHP-3-SECT-2.2" /><div class="sect2">
<h3 class="sect2">3.2.2. Parsing Styles</h3>

<p><tt class="literal">XML::Parser</tt><a name="INDEX-216" />
<a name="INDEX-217" /> <a name="INDEX-218" /> supports several different styles of
parsing to suit various development strategies. The style
doesn't change how the parser reads XML. Rather, it
changes how it presents the results of parsing. If you need a
persistent structure containing the document, you can have it. Or, if
you'd prefer to have the parser call a set of
routines you write, you can do it that way. You can set the style
when you initialize the object by setting the value of
<tt class="literal">style</tt>. Here's a quick summary of
the available styles:
</p>

<dl>
<a name="INDEX-219" /><dt><i>Debug</i></dt>
<dd>
<p>This style prints the document to <tt class="literal">STDOUT</tt>,
formatted as an outline (deeper elements are indented more).
<tt class="literal">parse( )</tt> doesn't return
anything special to your program.
</p>
</dd>


<a name="INDEX-220" /><dt><i>Tree</i></dt>
<dd>
<p>This style creates a hierarchical, tree-shaped data structure that
your program can use for processing. All elements and their data are
crystallized in this form, which consists of nested hashes and
arrays.
</p>
</dd>


<a name="INDEX-221" /><dt><i>Object</i></dt>
<dd>
<p>Like <tt class="literal">tree</tt>, this method returns a reference to a
hierarchical data structure representing the document. However,
instead of using simple data aggregates like hashes and lists, it
consists of objects that are specialized to contain XML markup
objects.
</p>
</dd>


<a name="INDEX-222" /><dt><i>Subs</i></dt>
<dd>
<p>This style lets you set up <em class="emphasis">callback
functions</em><a name="INDEX-223" /> to handle individual
elements. Create a package of routines named after the elements they
should handle and tell the parser about this package by using the
<tt class="literal">pkg</tt> option. Every time the parser finds a start
tag for an element called <tt class="literal">&lt;fooby&gt;</tt>, it will
look for the function <tt class="literal">fooby( )</tt> in your package.
When it finds the end tag for the element, it will try to call the
function <tt class="literal">_fooby( )</tt> in your package. The parser
will pass critical information like references to content and
attributes to the function, so you can do whatever processing you
need to do with it.
</p>
</dd>


<a name="INDEX-224" /><dt><i>Stream</i></dt>
<dd>
<p>Like <tt class="literal">Subs</tt>, you can define callbacks for handling
particular XML components, but callbacks are more general than
element names. You can write functions called
<em class="emphasis">handlers</em><a name="INDEX-225" /> to be called for
"<a name="INDEX-226" />events" like the start of
an element (any element, not just a particular kind), a set of
character data, or a processing instruction. You must register the
handler package with either the <tt class="literal">Handlers</tt> option or
the <tt class="literal">setHandlers( )</tt> method.
</p>
</dd>


<a name="INDEX-227" /><dt><i><em class="replaceable">custom</em></i></dt>
<dd>
<p>You can subclass the <tt class="literal">XML::Parser</tt> class with your
own object. Doing so is useful for creating a parser-like API for a
more specific application. For example, the
<tt class="literal">XML::Parser::PerlSAX</tt> module uses this strategy to
implement the SAX event processing standard.
</p>
</dd>

</dl>

<p><a href="ch03_02.htm">Example 3-3</a> is a program that uses
<tt class="literal">XML::Parser</tt> with <tt class="literal">Style</tt> set to
<tt class="literal">Tree</tt>. In this mode, the parser reads the whole XML
document while building a data structure. When finished, it hands our
program a reference to the structure that we can play with.
</p>

<a name="perlxml-CHP-3-EX-3" /><div class="example">
<h4 class="objtitle">Example 3-3. An XML tree builder </h4>
<blockquote><pre class="code">use XML::Parser;

# initialize parser and read the file
$parser = new XML::Parser( Style =&gt; 'Tree' );
my $tree = $parser-&gt;parsefile( shift @ARGV );

# serialize the structure
use Data::Dumper;
print Dumper( $tree );</pre></blockquote>
</div>

<p>In tree mode, the <tt class="literal">parsefile(
)</tt><a name="INDEX-228" /> method returns a reference to a data
structure containing the document, encoded as lists and hashes. We
use <tt class="literal">Data::Dumper</tt>, a handy module that serializes
data structures, to view the result. <a href="ch03_02.htm">Example 3-4</a> is
the datafile.
</p>

<a name="perlxml-CHP-3-EX-4" /><div class="example">
<h4 class="objtitle">Example 3-4. An XML datafile </h4>
<blockquote><pre class="code">&lt;preferences&gt;
  &lt;font role="console"&gt;
    &lt;fname&gt;Courier&lt;/name&gt;
    &lt;size&gt;9&lt;/size&gt;
  &lt;/font&gt;
  &lt;font role="default"&gt;
    &lt;fname&gt;Times New Roman&lt;/name&gt;
    &lt;size&gt;14&lt;/size&gt;
  &lt;/font&gt;
  &lt;font role="titles"&gt;
    &lt;fname&gt;Helvetica&lt;/name&gt;
    &lt;size&gt;10&lt;/size&gt;
  &lt;/font&gt;
&lt;/preferences&gt;</pre></blockquote>
</div>

<p>With this datafile, the program produces the following output
(condensed and indented to be easier to read):
</p>

<blockquote><pre class="code">$tree = [ 
          'preferences', [ 
            {}, 0, '\n', 
            'font', [ 
              { 'role' =&gt; 'console' }, 0, '\n',
              'size', [ {}, 0, '9' ], 0, '\n', 
              'fname', [ {}, 0, 'Courier' ], 0, '\n'
            ], 0, '\n',
            'font', [ 
              { 'role' =&gt; 'default' }, 0, '\n',
              'fname', [ {}, 0, 'Times New Roman' ], 0, '\n',
              'size', [ {}, 0, '14' ], 0, '\n'
            ], 0, '\n', 
            'font', [ 
               { 'role' =&gt; 'titles' }, 0, '\n',
               'size', [ {}, 0, '10' ], 0, '\n',
               'fname', [ {}, 0, 'Helvetica' ], 0, '\n',
            ], 0, '\n',
          ]
        ];</pre></blockquote>

<p>It's a lot easier to write code that dissects the
above structure than to write a parser of your own. We know, because
the parser returned a data structure instead of dying mid-parse, that
the document was 100 percent well-formed XML. In <a href="ch04_01.htm">Chapter 4, "Event Streams"</a>, we will use the <tt class="literal">Stream</tt>
mode of <tt class="literal">XML::Parser</tt>, and in <a href="ch06_01.htm">Chapter 6, "Tree Processing"</a>, we'll<a name="INDEX-229" /> talk more about
trees and objects.
</p>

</div>


<hr width="684" align="left" />
<div class="navbar"><table width="684" border="0"><tr><td align="left" valign="top" width="228"><a href="ch03_01.htm"><img alt="Previous" border="0" src="../gifs/txtpreva.gif" /></a></td><td align="center" valign="top" width="228"><a href="index.htm"><img alt="Home" border="0" src="../gifs/txthome.gif" /></a></td><td align="right" valign="top" width="228"><a href="ch03_03.htm"><img alt="Next" border="0" src="../gifs/txtnexta.gif" /></a></td></tr><tr><td align="left" valign="top" width="228">3. XML Basics: Reading and Writing</td><td align="center" valign="top" width="228"><a href="index/index.htm"><img alt="Book Index" border="0" src="../gifs/index.gif" /></a></td><td align="right" valign="top" width="228">3.3. Stream-Based Versus Tree-Based Processing</td></tr></table></div>
<hr width="684" align="left" />

<img alt="Library Navigation Links" border="0" src="../gifs/navbar.gif" usemap="#library-map" />
<p><p><font size="-1"><a href="copyrght.htm">Copyright &copy; 2002</a> O'Reilly &amp; Associates. All rights reserved.</font></p>

<map name="library-map"><area shape="rect" coords="0,0,85,93" href="../index.htm"><area shape="rect" coords="85,0,180,98" href="../sax2/index.htm"><area shape="rect" coords="182,-1,261,100" href="../xmlnut/index.htm"><area shape="rect" coords="263,1,384,96" href="../jxml/index.htm"><area shape="rect" coords="386,1,463,100" href="../jxslt/index.htm"><area shape="rect" coords="466,1,533,112" href="../xslt/index.htm"><area shape="rect" coords="535,-1,610,108" href="../schema/index.htm"><area shape="rect" coords="613,1,696,121" href="index.htm"></map>

</body></html>