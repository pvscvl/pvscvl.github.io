<html><head><title>Event Streams (Perl and XML)</title><link rel="stylesheet" type="text/css" href="../style/style1.css" />

<meta name="DC.Creator" content="Erik T. Ray and Jason McIntosh" /><meta name="DC.Format" content="text/xml" scheme="MIME" /><meta name="DC.Language" content="en-US" /><meta name="DC.Publisher" content="O'Reilly &amp; Associates, Inc." /><meta name="DC.Source" scheme="ISBN" content="059600205XL" /><meta name="DC.Subject.Keyword" content="stuff" /><meta name="DC.Title" content="Perl and XML" /><meta name="DC.Type" content="Text.Monograph" />

</head><body bgcolor="#ffffff">

<img alt="Book Home" border="0" src="gifs/smbanner.gif" usemap="#banner-map" /><map name="banner-map"><area shape="rect" coords="1,-2,616,66" href="index.htm" alt="Perl &amp; XML" /><area shape="rect" coords="629,-11,726,25" href="jobjects/fsearch.htm" alt="Search this book" /></map>

<div class="navbar"><table width="684" border="0"><tr><td align="left" valign="top" width="228"><a href="ch03_09.htm"><img alt="Previous" border="0" src="../gifs/txtpreva.gif" /></a></td><td align="center" valign="top" width="228" /><td align="right" valign="top" width="228"><a href="ch04_02.htm"><img alt="Next" border="0" src="../gifs/txtnexta.gif" /></a></td></tr></table></div>



<h1 class="chapter">Chapter 4. Event Streams</h1>
<div class="htmltoc"><h4 class="tochead">Contents:</h4><p>
<a href="ch04_01.htm">Working with Streams</a><br />
<a href="ch04_02.htm">Events and Handlers</a><br />
<a href="ch04_03.htm">The Parser as Commodity</a><br />
<a href="ch04_04.htm">Stream Applications</a><br />
<a href="ch04_05.htm">XML::PYX</a><br />
<a href="ch04_06.htm">XML::Parser</a><br /></p></div>



<p>Now<a name="INDEX-325" /> <a name="INDEX-326" />
that you're all warmed up with parsers and have
enough knowledge to make you slightly dangerous,
we'll analyze one of the two important styles of XML
processing: event streams. We'll look at some
examples that show the basic theory of stream processing and graduate
with a full treatment of the standard Simple API for XML (SAX).
</p>


<div class="sect1"><a name="perlxml-CHP-4-SECT-1" />
<h2 class="sect1">4.1. Working with Streams</h2>

<p>In <a name="INDEX-327" />the world of computer science, a
<em class="emphasis">stream</em><a name="INDEX-328" />
is a sequence of data chunks to be processed. A file, for example, is
a sequence of characters (one or more bytes each, depending on the
encoding). A program using this data can open a filehandle to the
file, creating a character stream, and it can choose to read in data
in chunks of whatever size it chooses. Streams can be dynamically
generated too, whether from another program, received over a network,
or typed in by a user. A stream is an abstraction, making the source
of the data irrelevant for the purpose of processing.
</p>

<p>To summarize, here are a stream's important
qualities:
</p>

<ul><li>
<p>It consists of a sequence of data fragments. </p>
</li><li>
<p>The order of fragments transmitted is significant. </p>
</li><li>
<p>The source of data (e.g., file or program output) is not important. </p>
</li></ul>
<p>XML streams are just clumpy character streams. Each data clump,
called a <em class="emphasis">token</em><a name="INDEX-329" /> in parser parlance, is a
conglomeration of one or more characters. Each token corresponds to a
type of markup, such as an element start or end tag, a string of
character data, or a processing instruction. It's
very easy for parsers to dice up XML in this way, requiring minimal
resources and time.
</p>

<p>What makes XML streams different from character streams is that the
context of each token matters; you can't just pump
out a stream of random tags and data and expect an XML processor to
make sense of it. For example, a stream of ten start tags followed by
no end tags is not very useful, and definitely not well-formed XML.
Any data that isn't well-formed will be rejected.
After all, the whole purpose of XML is to package data in a way that
guarantees the integrity of a document's structure
and labeling, right?
</p>

<p>These contextual rules are helpful to the parser as well as the
front-end processor. XML was designed to be very easy to parse,
unlike other markup languages that can require look-ahead or
look-behind. For example, SGML does not have a rule requiring
nonempty elements to have an end tag. To know when an element ends
requires sophisticated reasoning by the parser. This requirement
leads to code complexity, slower processing speed, and increased
memory usage.
</p>

</div>












<hr width="684" align="left" />
<div class="navbar"><table width="684" border="0"><tr><td align="left" valign="top" width="228"><a href="ch03_09.htm"><img alt="Previous" border="0" src="../gifs/txtpreva.gif" /></a></td><td align="center" valign="top" width="228"><a href="index.htm"><img alt="Home" border="0" src="../gifs/txthome.gif" /></a></td><td align="right" valign="top" width="228"><a href="ch04_02.htm"><img alt="Next" border="0" src="../gifs/txtnexta.gif" /></a></td></tr><tr><td align="left" valign="top" width="228">3.9. Character Sets and Encodings</td><td align="center" valign="top" width="228"><a href="index/index.htm"><img alt="Book Index" border="0" src="../gifs/index.gif" /></a></td><td align="right" valign="top" width="228">4.2. Events and Handlers</td></tr></table></div>
<hr width="684" align="left" />

<img alt="Library Navigation Links" border="0" src="../gifs/navbar.gif" usemap="#library-map" />
<p><p><font size="-1"><a href="copyrght.htm">Copyright &copy; 2002</a> O'Reilly &amp; Associates. All rights reserved.</font></p>

<map name="library-map"><area shape="rect" coords="0,0,85,93" href="../index.htm"><area shape="rect" coords="85,0,180,98" href="../sax2/index.htm"><area shape="rect" coords="182,-1,261,100" href="../xmlnut/index.htm"><area shape="rect" coords="263,1,384,96" href="../jxml/index.htm"><area shape="rect" coords="386,1,463,100" href="../jxslt/index.htm"><area shape="rect" coords="466,1,533,112" href="../xslt/index.htm"><area shape="rect" coords="535,-1,610,108" href="../schema/index.htm"><area shape="rect" coords="613,1,696,121" href="index.htm"></map>

</body></html>