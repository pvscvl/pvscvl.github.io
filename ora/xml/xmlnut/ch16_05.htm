<html><head><title>Empty Elements (XML in a Nutshell, 2nd Edition)</title><link rel="stylesheet" type="text/css" href="../style/style1.css" />

<meta name="DC.Creator" content="Elliotte Rusty Harold and W. Scott Means" /><meta name="DC.Format" content="text/xml" scheme="MIME" /><meta name="DC.Language" content="en-US" /><meta name="DC.Publisher" content="O'Reilly &amp; Associates, Inc." /><meta name="DC.Source" scheme="ISBN" content="0-596-00292-0" /><meta name="DC.Subject.Keyword" content="stuff" /><meta name="DC.Title" content="XML in a Nutshell, 2nd Edition" /><meta name="DC.Type" content="Text.Monograph" />

</head><body bgcolor="#ffffff">

<img src="gifs/smbanner.gif" usemap="#banner-map" border="0" alt="Book Home" /><map name="banner-map"><area shape="rect" coords="1,-2,616,66" href="index.htm" alt="XML in a Nutshell" /><area shape="rect" coords="629,-11,726,25" href="jobjects/fsearch.htm" alt="Search this book" /></map>

<div class="navbar"><table width="684" border="0"><tr><td align="left" valign="top" width="228"><a href="ch16_04.htm"><img src="../gifs/txtpreva.gif" alt="Previous" border="0" /></a></td><td align="center" valign="top" width="228" /><td align="right" valign="top" width="228"><a href="ch16_06.htm"><img src="../gifs/txtnexta.gif" alt="Next" border="0" /></a></td></tr></table></div>



<h2 class="sect1">16.5. Empty Elements</h2>

<p>In many cases, <a name="IXT-16-240104" />
<a name="IXT-16-240105" />
<a name="IXT-16-240106" />
<a name="IXT-16-240107" />it is useful to declare an element that
cannot contain anything. Most of these elements convey all of their
information via attributes or simply by their position in relation to
other elements (e.g., the <tt class="literal">br</tt> element from XHTML).
</p>

<p>Let's add a contact-information element to the
<tt class="literal">address</tt> element that will be used to contain a
list of ways to contact a person. <a href="ch16_05.htm">Example 16-8</a> shows
the sample <a name="IXT-16-240108" />instance document after adding the new
<tt class="literal">contacts</tt> element and a sample phone entry.
</p>

<a name="xmlnut2-CHP-16-EX-8" /><div class="example">
<h4 class="objtitle">Example 16-8. addressdoc.xml with contact element </h4>
<blockquote><pre class="code">&lt;?xml version="1.0"?&gt;
&lt;addr:address xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="http://namespaces.oreilly.com/xmlnut/address 
      address-schema.xsd"
    xmlns:addr="http://namespaces.oreilly.com/xmlnut/address"
    addr:language="en"&gt;
  &lt;addr:fullName&gt;
    &lt;addr:first&gt;William&lt;/addr:first&gt;
    &lt;addr:middle&gt;Scott&lt;/addr:middle&gt;
    &lt;addr:last&gt;Means&lt;/addr:last&gt;
  &lt;/addr:fullName&gt;
  &lt;addr:contacts&gt;
    &lt;addr:phone addr:label="888.737.1752"/&gt;
  &lt;/addr:contacts&gt;
&lt;/addr:address&gt;</pre></blockquote>
</div>

<p>Supporting this new content requires further modifications to the
schema document. Although it would be possible to declare the new
element inline within the existing address-element declaration, for
clarity it makes sense to create a new global type and reference it
by name:
</p>

<blockquote><pre class="code">&lt;xs:element name="address"&gt;
  &lt;xs:complexType&gt;
    &lt;xs:sequence&gt;
      &lt;xs:element name="fullName"&gt;
. . .
      &lt;/xs:element&gt;
      &lt;xs:element name="contacts" type="addr:contactsType" minOccurs="0"/&gt;
    &lt;/xs:sequence&gt;
  &lt;xs:attributeGroup ref="addr:nationality"/&gt;
  &lt;/xs:complexType&gt;
&lt;/xs:element&gt;</pre></blockquote>

<p>The declaration for the new <tt class="literal">contactsType</tt> complex
type looks like this:
</p>

<blockquote><pre class="code">&lt;xs:complexType name="contactsType"&gt;
  &lt;xs:sequence&gt;
    &lt;xs:element name="phone" minOccurs="0"&gt;
      &lt;xs:complexType&gt;
        &lt;xs:attribute name="number" type="xs:string"/&gt;
      &lt;/xs:complexType&gt;
    &lt;/xs:element&gt;
  &lt;/xs:sequence&gt;
&lt;/xs:complexType&gt;</pre></blockquote>

<p>The syntax used to declare an empty element is actually very simple.
Notice that the <tt class="literal">xs:element</tt> declaration for the
previous <tt class="literal">phone</tt> element contains a complex type
definition that only includes a single attribute declaration. This
tells the schema processor that the <tt class="literal">phone</tt> element
may only contain complex content (elements), and since no additional
nested element declarations are provided, it must remain empty.
</p>

<a name="xmlnut2-CHP-16-SECT-5.1" /><div class="sect2">
<h3 class="sect2">16.5.1. complexContent</h3>

<p>The preceding example actually took a shortcut with the schema
language. One of the early <tt class="literal">fullName</tt> element
declarations used the <tt class="literal">xs:simpleContent</tt> element to
indicate that the element could only contain simple content (no
nested elements). There is a corresponding content-declaration
element that specifies that a complex type can only contain complex
content (elements). This is the <tt class="literal">xs:complexContent</tt>
<a name="IXT-16-240109" /> <a name="IXT-16-240110" />element.
</p>

<p>When the <tt class="literal">phone</tt> element was declared using an
<tt class="literal">xs:complexType</tt><a name="IXT-16-240111" /> element with no nested element
declarations, the schema processor automatically inferred that it
should contain only complex content. The <tt class="literal">phone</tt>
element declaration could be rewritten like so, using the
<tt class="literal">xs:complexContent</tt> element:
</p>

<blockquote><pre class="code">&lt;xs:element name="phone" minOccurs="0"&gt;
  &lt;xs:complexType&gt;
    &lt;xs:complexContent&gt;
      &lt;xs:restriction base="xs:anyType"&gt;
        &lt;xs:attribute name="number" type="xs:string"/&gt;
      &lt;/xs:restriction&gt;
    &lt;/xs:complexContent&gt;
  &lt;/xs:complexType&gt;
&lt;/xs:element&gt;</pre></blockquote>

<p>The most common reason to use the
<tt class="literal">xs:complexContent</tt> element is to
<a name="IXT-16-240112" />derive a complex type from an existing
type. This example derives a new type by restriction from the
built-in <tt class="literal">xs:anyType</tt><a name="IXT-16-240113" /> type. <tt class="literal">xs:anyType</tt> is the
root of all of the built-in schema types and represents an
unrestricted sequence of characters and markup. Since the
<tt class="literal">xs:complexType</tt> indicates that the element can only
contain element content, the effect of this restriction is to prevent
the element from containing either character data or markup.
</p>

</div>


<hr width="684" align="left" />
<div class="navbar"><table width="684" border="0"><tr><td align="left" valign="top" width="228"><a href="ch16_04.htm"><img src="../gifs/txtpreva.gif" alt="Previous" border="0" /></a></td><td align="center" valign="top" width="228"><a href="index.htm"><img src="../gifs/txthome.gif" alt="Home" border="0" /></a></td><td align="right" valign="top" width="228"><a href="ch16_06.htm"><img src="../gifs/txtnexta.gif" alt="Next" border="0" /></a></td></tr><tr><td align="left" valign="top" width="228">16.4. Complex Types</td><td align="center" valign="top" width="228"><a href="index/index.htm"><img src="../gifs/index.gif" alt="Book Index" border="0" /></a></td><td align="right" valign="top" width="228">16.6. Simple Content</td></tr></table></div>
<hr width="684" align="left" />

<img src="../gifs/navbar.gif" usemap="#library-map" border="0" alt="Library Navigation Links" />
<p><p><font size="-1"><a href="copyrght.htm">Copyright &copy; 2002</a> O'Reilly &amp; Associates. All rights reserved.</font></p>

<map name="library-map">
<area shape="rect" coords="0,0,85,93" href="../index.htm"><area shape="rect" coords="85,0,180,98" href="../sax2/index.htm"><area shape="rect" coords="182,-1,261,100" href="index.htm"><area shape="rect" coords="263,1,384,96" href="../jxml/index.htm"><area shape="rect" coords="386,1,463,100" href="../jxslt/index.htm"><area shape="rect" coords="466,1,533,112" href="../xslt/index.htm"><area shape="rect" coords="535,-1,610,108" href="../schema/index.htm"><area shape="rect" coords="613,1,696,121" href="../pxml/index.htm">
</map>

</body></html>