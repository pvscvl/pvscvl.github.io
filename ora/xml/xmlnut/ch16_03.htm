<html><head><title>Working with Namespaces (XML in a Nutshell, 2nd Edition)</title><link rel="stylesheet" type="text/css" href="../style/style1.css" />

<meta name="DC.Creator" content="Elliotte Rusty Harold and W. Scott Means" /><meta name="DC.Format" content="text/xml" scheme="MIME" /><meta name="DC.Language" content="en-US" /><meta name="DC.Publisher" content="O'Reilly &amp; Associates, Inc." /><meta name="DC.Source" scheme="ISBN" content="0-596-00292-0" /><meta name="DC.Subject.Keyword" content="stuff" /><meta name="DC.Title" content="XML in a Nutshell, 2nd Edition" /><meta name="DC.Type" content="Text.Monograph" />

</head><body bgcolor="#ffffff">

<img src="gifs/smbanner.gif" usemap="#banner-map" border="0" alt="Book Home" /><map name="banner-map"><area shape="rect" coords="1,-2,616,66" href="index.htm" alt="XML in a Nutshell" /><area shape="rect" coords="629,-11,726,25" href="jobjects/fsearch.htm" alt="Search this book" /></map>

<div class="navbar"><table width="684" border="0"><tr><td align="left" valign="top" width="228"><a href="ch16_02.htm"><img src="../gifs/txtpreva.gif" alt="Previous" border="0" /></a></td><td align="center" valign="top" width="228" /><td align="right" valign="top" width="228"><a href="ch16_04.htm"><img src="../gifs/txtnexta.gif" alt="Next" border="0" /></a></td></tr></table></div>



<h2 class="sect1">16.3. Working with Namespaces</h2>

<p>So far, <a name="xmlnut2-IDXTERM-1400" /> <a name="xmlnut2-IDXTERM-1401" />namespaces have only been dealt with as
they relate to the schema processor and schema language itself. But
the schema specification was written with the intention that schemas
could support and describe XML namespaces. In an ideal world, any XML
parser with access to the Internet would be able to validate any XML
document, given only that document's namespace. In
fact, the Resource Directory Description Language (RDDL) standard is
an attempt to build the framework that will enable this functionality
and is described in detail in <a href="ch14_01.htm">Chapter 14</a>.
</p>

<a name="xmlnut2-CHP-16-SECT-3.1" /><div class="sect2">
<h3 class="sect2">16.3.1. Target Namespaces</h3>

<p>Associating a schema with a particular XML namespace is extremely
simple: add a
<tt class="literal">targetNamespace</tt><a name="IXT-16-240082" />
<a name="IXT-16-240083" />
<a name="IXT-16-240084" /> attribute to the root
<tt class="literal">xs:schema</tt><a name="IXT-16-240085" /> element, like so:
</p>

<blockquote><pre class="code">&lt;xs:schema xmlns:xs="http://www.w3.org/2001/XMLSchema"
  targetNamespace="http://namespaces.oreilly.com/xmlnut/address"&gt;</pre></blockquote>



<a name="ch16-22-fm2xml" /><blockquote><b>TIP:</b> 
It is important to remember that many XML 1.0 documents are not
associated with namespaces at all. To validate these documents, it is
necessary to use a schema that doesn't have a
<tt class="literal">targetNamespace</tt> attribute. When developing schemas
that are not associated with a target namespace, you should
explicitly qualify schema elements (like
<tt class="literal">xs:element</tt>) to keep them from being confused with
global declarations for your application. </p>
</blockquote>

<p>However, making that
simple change impacts numerous other parts of the example
application. Trying to validate the <tt class="literal">addressdoc.xml</tt>
document as it stands (with the
<tt class="literal">xsi:noNamespaceSchemaLocation</tt> attribute) causes
the Xerces schema processor to report this validity error: </p>


<blockquote><pre class="code">General Schema Error: Schema in address-schema.xsd has a different target 
namespace from the one specified in the instance document :.</pre></blockquote>

<p>To rectify this, it is necessary to change the instance document to
reference the new, namespace-enabled schema properly. This is done
using the xsi:schemaLocation attribute, like so:
</p>

<blockquote><pre class="code">&lt;fullName xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://namespaces.oreilly.com/xmlnut/address 
    address-schema.xsd"
  language="en"&gt;Scott Means&lt;/fullName&gt;</pre></blockquote>

<p>Notice that the
<tt class="literal">schemaLocation</tt><a name="IXT-16-240086" /> attribute value contains two tokens.
The first is the target namespace URI that matches the target
namespace of the schema document. The second is the physical location
of the actual schema document.
</p>

<p>Unfortunately, there are still problems. If this document is
validated, the validator will report errors like these two:
</p>

<blockquote><pre class="code">Element type "fullName" must be declared.
Attribute "language" must be declared for element type "fullName".</pre></blockquote>

<p>This is because, even though a schema location has been declared, the
element still doesn't actually belong to a
namespace. Either a default namespace must be declared or a namespace
prefix that matches the target namespace of the schema must be used.
The following document uses a default namespace:
</p>

<blockquote><pre class="code">&lt;fullName xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://namespaces.oreilly.com/xmlnut/address 
    address-schema.xsd"
  xmlns="http://namespaces.oreilly.com/xmlnut/address"
  language="en"&gt;Scott Means&lt;/fullName&gt;</pre></blockquote>

<p>But before this document can be successfully validated, it is
necessary to fix one other problem that was introduced when a target
namespace was added to the schema. Within the element declaration for
the <tt class="literal">fullName</tt> element, there is a reference to the
<tt class="literal">nationality</tt> attribute group. By associating the
schema with a target namespace, every global declaration has been
implicitly associated with that namespace. This means that the
<tt class="literal">ref</tt> attribute of the attribute group element in
the element declaration must be updated to point to an attribute
group that belongs to the new target namespace.
</p>

<p>The clearest way to do this is to declare a new namespace prefix in
the schema that maps to the target namespace and use it to prefix any
references to global declarations:
</p>

<blockquote><pre class="code">&lt;xs:schema xmlns:xs="http://www.w3.org/2001/XMLSchema"
  targetNamespace="http://namespaces.oreilly.com/xmlnut/address"
  xmlns:addr="http://namespaces.oreilly.com/xmlnut/address"&gt;
. . .
        &lt;xs:attributeGroup ref="addr:nationality"/&gt;
. . .</pre></blockquote>

<p>Now, having made these three simple changes, the document will once
again validate cleanly against the schema.
</p>



<a name="ch16-24-fm2xml" /><blockquote><b>TIP:</b> 
The obvious lesson from this is that namespaces should be
incorporated into your schema design as early as possible. If not,
there will likely be a large amount of cleanup involved as various
assumptions that used to be true are no longer valid.
</p>
</blockquote>

</div>
<a name="xmlnut2-CHP-16-SECT-3.2" /><div class="sect2">
<h3 class="sect2">16.3.2. Controlling Qualification</h3>

<p>One <a name="IXT-16-240087" />
<a name="IXT-16-240088" />of the major headaches with DTDs
is that they have no explicit support for
<a name="IXT-16-240089" />namespace
<a name="IXT-16-240090" />prefixes since they
predate the <em class="emphasis">Namespaces in XML</em> recommendation.
Although <em class="emphasis">Namespaces in XML</em> went to great pains
to explain that prefixes were only placeholders and only the
namespace URIs really matter, it was painful and awkward to design a
DTD that could support arbitrary prefixes. Schemas correct this by
validating against namespace URIs and local names rather than
prefixed names.
</p>

<p>The
<tt class="literal">elementFormDefault</tt><a name="IXT-16-240091" /> and
<tt class="literal">attributeFormDefault</tt><a name="IXT-16-240092" /> attributes of
the <tt class="literal">xs:schema</tt><a name="IXT-16-240093" /> element control whether locally
declared elements and attributes must be namespace-qualified within
<a name="IXT-16-240094" />instance documents. Suppose the
<tt class="literal">attributeFormDefault</tt> attribute is set to
<tt class="literal">qualified</tt> in the schema like this:
</p>

<blockquote><pre class="code">&lt;xs:schema xmlns:xs="http://www.w3.org/2001/XMLSchema"
  targetNamespace="http://namespaces.oreilly.com/xmlnut/address"
  xmlns:addr="http://namespaces.oreilly.com/xmlnut/address"
  attributeFormDefault="qualified"&gt;</pre></blockquote>

<p>Now, if <tt class="literal">addressdoc.xml</tt> is validated against the
schema, the validator reports the following error:
</p>

<blockquote><pre class="code">Attribute "language" must be declared for element type "fullName".</pre></blockquote>

<p>Since the default attribute form has been set to
<tt class="literal">qualified</tt>, the schema processor
doesn't recognize the unqualified
<tt class="literal">language</tt> attribute as belonging to the same schema
as the <tt class="literal">fullName</tt> element. This is because
attributes, unlike elements, don't inherit the
default namespace from the <tt class="literal">xmlns="..."</tt> attribute.
They must always be explicitly prefixed if they need to belong to a
particular namespace.
</p>

<p>The easiest way to fix the instance document is to declare an
explicit namespace prefix and use it to qualify the element and
attribute, as shown in <a href="ch16_03.htm">Example 16-5</a>.
</p>

<a name="xmlnut2-CHP-16-EX-5" /><div class="example">
<h4 class="objtitle">Example 16-5. addressdoc.xml with explicit namespace prefix </h4>
<blockquote><pre class="code">&lt;?xml version="1.0"?&gt;
&lt;addr:fullName xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://namespaces.oreilly.com/xmlnut/address 
    address-schema.xsd"
  xmlns:addr="http://namespaces.oreilly.com/xmlnut/address"
  addr:language="en"&gt;Scott Means&lt;/addr:fullName&gt;</pre></blockquote>
</div>

<p>The <tt class="literal">elementFormDefault</tt> attribute serves the same
function in regards to namespace qualification of nested elements. If
it is set to <tt class="literal">qualified</tt>, nested elements must
belong to the target namespace of the schema (either through a
default namespace declaration or an explicit <a name="IXTR3-182" /> <a name="IXTR3-183" />prefix).
</p>

</div>


<hr width="684" align="left" />
<div class="navbar"><table width="684" border="0"><tr><td align="left" valign="top" width="228"><a href="ch16_02.htm"><img src="../gifs/txtpreva.gif" alt="Previous" border="0" /></a></td><td align="center" valign="top" width="228"><a href="index.htm"><img src="../gifs/txthome.gif" alt="Home" border="0" /></a></td><td align="right" valign="top" width="228"><a href="ch16_04.htm"><img src="../gifs/txtnexta.gif" alt="Next" border="0" /></a></td></tr><tr><td align="left" valign="top" width="228">16.2. Schema Basics</td><td align="center" valign="top" width="228"><a href="index/index.htm"><img src="../gifs/index.gif" alt="Book Index" border="0" /></a></td><td align="right" valign="top" width="228">16.4. Complex Types</td></tr></table></div>
<hr width="684" align="left" />

<img src="../gifs/navbar.gif" usemap="#library-map" border="0" alt="Library Navigation Links" />
<p><p><font size="-1"><a href="copyrght.htm">Copyright &copy; 2002</a> O'Reilly &amp; Associates. All rights reserved.</font></p>

<map name="library-map">
<area shape="rect" coords="0,0,85,93" href="../index.htm"><area shape="rect" coords="85,0,180,98" href="../sax2/index.htm"><area shape="rect" coords="182,-1,261,100" href="index.htm"><area shape="rect" coords="263,1,384,96" href="../jxml/index.htm"><area shape="rect" coords="386,1,463,100" href="../jxslt/index.htm"><area shape="rect" coords="466,1,533,112" href="../xslt/index.htm"><area shape="rect" coords="535,-1,610,108" href="../schema/index.htm"><area shape="rect" coords="613,1,696,121" href="../pxml/index.htm">
</map>

</body></html>
