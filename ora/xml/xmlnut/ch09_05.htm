<html><head><title>Unabbreviated Location Paths (XML in a Nutshell, 2nd Edition)</title><link rel="stylesheet" type="text/css" href="../style/style1.css" />

<meta name="DC.Creator" content="Elliotte Rusty Harold and W. Scott Means" /><meta name="DC.Format" content="text/xml" scheme="MIME" /><meta name="DC.Language" content="en-US" /><meta name="DC.Publisher" content="O'Reilly &amp; Associates, Inc." /><meta name="DC.Source" scheme="ISBN" content="0-596-00292-0" /><meta name="DC.Subject.Keyword" content="stuff" /><meta name="DC.Title" content="XML in a Nutshell, 2nd Edition" /><meta name="DC.Type" content="Text.Monograph" />

</head><body bgcolor="#ffffff">

<img src="gifs/smbanner.gif" usemap="#banner-map" border="0" alt="Book Home" /><map name="banner-map"><area shape="rect" coords="1,-2,616,66" href="index.htm" alt="XML in a Nutshell" /><area shape="rect" coords="629,-11,726,25" href="jobjects/fsearch.htm" alt="Search this book" /></map>

<div class="navbar"><table width="684" border="0"><tr><td align="left" valign="top" width="228"><a href="ch09_04.htm"><img src="../gifs/txtpreva.gif" alt="Previous" border="0" /></a></td><td align="center" valign="top" width="228" /><td align="right" valign="top" width="228"><a href="ch09_06.htm"><img src="../gifs/txtnexta.gif" alt="Next" border="0" /></a></td></tr></table></div>



<h2 class="sect1">9.5. Unabbreviated Location Paths</h2>

<p>Up <a name="xmlnut2-IDXTERM-880" /> <a name="xmlnut2-IDXTERM-881" />
<a name="xmlnut2-IDXTERM-882" />until this point, we've
been using what are called <em class="emphasis">abbreviated location
paths</em>. These are much easier to type, much less verbose,
and much more familiar to most people. They're also
the kind of XPath expression that works best for XSLT match patterns.
However, XPath also offers an unabbreviated syntax for location
paths, which is more verbose but perhaps less cryptic and definitely
more flexible.
</p>

<p>Every <a name="IXT-9-239020" />location step in a location path has two
required parts, an <a name="IXT-9-239021" />
<a name="IXT-9-239022" />
<a name="IXT-9-239023" />axis and a
<a name="IXT-9-239024" />
<a name="IXT-9-239025" />
<a name="IXT-9-239026" />node test, and one optional part, the
<a name="IXT-9-239027" />predicates. The axis tells you
which direction to travel from the context node to look for the next
nodes. The node test tells you which nodes to include along that
axis, and the predicates further reduce the nodes according to some
expression.
</p>

<p>In an abbreviated location path, the axis and the node test are
combined, while in an unabbreviated location path,
they're separated by a <a name="IXT-9-239028" />double
colon (<tt class="literal">::)</tt>. For example, the abbreviated location
path <tt class="literal">people/person/@id</tt> is composed of three
location steps. The first step selects <tt class="literal">people</tt>
element nodes along the child axis. The second step selects
<tt class="literal">person</tt> element nodes along the child axis. The
third step selects <tt class="literal">id</tt> attribute nodes along the
attribute axis. When rewritten using the unabbreviated syntax, the
same location path is
<tt class="literal">child::people/child::person/attribute::id</tt>.
</p>

<p>These full, unabbreviated location paths may be absolute if they
start from the root node, just as abbreviated paths can be. For
example, the full form
<tt class="literal">/child::people/child::person</tt> is equivalent to the
abbreviated form <tt class="literal">/people/person</tt>.
</p>

<p>Unabbreviated location paths may have and be used in predicates as
well. For example, the abbreviated path
<tt class="literal">/people/person[@born&lt;1950]/name[first_name="Alan"]</tt>
becomes <tt class="literal">/child::people/child::person[ attribute::born &lt;
1950 ]</tt> <tt class="literal">/child::name[ child::first_name = "Alan"
]</tt> in the full form.
</p>

<p>Overall, the unabbreviated form is quite verbose and not much used in
practice. It isn't even allowed in XSLT match
patterns. However, it does offer one crucial ability that makes it
essential to know: it is the only way to access most of the axes from
which XPath expressions can choose nodes. The abbreviated syntax lets
you walk along the <a name="IXT-9-239029" />child, <a name="IXT-9-239030" />parent, <a name="IXT-9-239031" />self, <a name="IXT-9-239032" />attribute, and
<a name="IXT-9-239033" />descendant-or-self axes. The unabbreviated
syntax adds eight more:
</p>

<dl>
<dt><i>The ancestor axis</i></dt>
<dd>
<a name="IXT-9-239034" />All element
nodes that contain the <a name="IXT-9-239035" />context node, that is, the parent node,
the parent's parent, the parent's
parent's parent, and so on up through the root node
in reverse document order.
</p>
</dd>


<dt><i>The following-sibling axis</i></dt>
<dd>
<a name="IXT-9-239036" />All
nodes that follow the context node and are children of the same
parent node in document order. Attribute and namespace nodes do not
have any siblings.
</p>
</dd>


<dt><i>The preceding-sibling axis</i></dt>
<dd>
<a name="IXT-9-239037" />All
nodes that precede the context node and are children of the same
parent node in reverse document order. Attribute and namespace nodes
do not have any siblings.
</p>
</dd>


<dt><i>The following axis</i></dt>
<dd>
<a name="IXT-9-239038" />All nodes
that follow the end of the context node in document order except for
attribute and namespace nodes.
</p>
</dd>


<dt><i>The preceding axis</i></dt>
<dd>
<a name="IXT-9-239039" />All nodes
that precede the start of the context node in reverse document order
except for attribute and namespace nodes.
</p>
</dd>


<dt><i>The namespace axis</i></dt>
<dd>
<a name="IXT-9-239040" />All
namespaces in scope on the context node, whether declared on the
context node or one of its ancestors.
</p>
</dd>


<dt><i>The descendant axis</i></dt>
<dd>
<a name="IXT-9-239041" />All
descendants of the context node but not the context node itself.
</p>
</dd>


<dt><i>The ancestor-or-self axis</i></dt>
<dd>
<a name="IXT-9-239042" />All
ancestors of the context node and the context node itself.
</p>
</dd>

</dl>

<p><a href="ch09_05.htm">Example 9-4</a> demonstrates several of these axes using
the full unabbreviated syntax. The goal is to produce a list of
<tt class="literal">person</tt> <a name="IXT-9-239043" />elements that look more or less like
this (after accounting for whitespace):
</p>

<blockquote><pre class="code">&lt;dt&gt;Richard P Feynman&lt;/dt&gt;
&lt;dd&gt;
  &lt;ul&gt;
    &lt;li&gt;physicist&lt;/li&gt;
    &lt;li&gt;Playing the bongoes&lt;/li&gt;
  &lt;/ul&gt;
&lt;/dd&gt;</pre></blockquote>

<a name="xmlnut2-CHP-9-EX-4" /><div class="example">
<h4 class="objtitle">Example 9-4. An XSLT stylesheet that uses unabbreviated XPath syntax </h4>
<blockquote><pre class="code">&lt;?xml version="1.0"?&gt;
&lt;xsl:stylesheet version="1.0"
                xmlns:xsl="http://www.w3.org/1999/XSL/Transform"&gt;

  &lt;xsl:template match="/"&gt;
    &lt;dl&gt;
      &lt;xsl:apply-templates select="descendant::person"/&gt;
    &lt;/dl&gt;
  &lt;/xsl:template&gt;

  &lt;xsl:template match="person"&gt;
    &lt;dt&gt;&lt;xsl:value-of select="child::name"/&gt;&lt;/dt&gt;
    &lt;dd&gt;
      &lt;ul&gt;
        &lt;xsl:apply-templates select="child::name/following-sibling::*"/&gt;
      &lt;/ul&gt;
    &lt;/dd&gt;
  &lt;/xsl:template&gt;

  &lt;xsl:template match="*"&gt;
    &lt;li&gt;&lt;xsl:value-of select="self::*"/&gt;&lt;/li&gt;
  &lt;/xsl:template&gt;

  &lt;xsl:template match="homepage"
               xmlns:xlink="http://www.w3.org/1999/xlink"&gt;
    &lt;li&gt;&lt;xsl:value-of select="attribute::xlink:href"/&gt;&lt;/li&gt;
  &lt;/xsl:template&gt;

&lt;/xsl:stylesheet&gt;</pre></blockquote>
</div>

<p>The first template rule matches the root node. It applies templates
to all descendants of the root node that happen to be
<tt class="literal">person</tt> elements. That is, it moves from the root
node along the <tt class="literal">descendant</tt> axis with a node test of
<tt class="literal">person</tt>. This XPath expression could have been
rewritten in the abbreviated syntax as <tt class="literal">//person</tt>.
</p>

<p>The second template rule matches <tt class="literal">person</tt> elements.
It places the value of the <tt class="literal">name</tt> child of each
<tt class="literal">person</tt> element in a <tt class="literal">dt</tt> element.
The location path used here, <tt class="literal">child::name</tt>, could
have been rewritten in the abbreviated syntax as the single word
<tt class="literal">name</tt>. Then it applies templates to all elements
that follow the <tt class="literal">name</tt> element at the same level of
the hierarchy. It begins at the context node
<tt class="literal">person</tt> element, then moves along the child axis to
find the <tt class="literal">name</tt> element. From there it moves along
the <tt class="literal">following-sibling</tt> axis looking for elements of
any type (<tt class="literal">*</tt>) after the <tt class="literal">name</tt>
element that are also children of the same <tt class="literal">person</tt>
element. There is no abbreviated equivalent for the
<tt class="literal">following-sibling</tt> axis, so this really is the
simplest way to make this statement.
</p>

<p>The third template rule matches any element not matched by another
template rule. It simply wraps that element in an
<tt class="literal">li</tt> element. The XPath <tt class="literal">self::*</tt>
selects the value of the currently matched element, that is, the
context node. This expression could have been abbreviated as a single
period.
</p>

<p>The fourth and final template rule matches
<tt class="literal">homepage</tt> elements. In this case we need to select
the value of <tt class="literal">xlink:href</tt> attribute, so we move from
the context <tt class="literal">homepage</tt> node along the attribute
axis. The node test is looking for the <tt class="literal">xlink:href</tt>
attributes. (More properly, it's looking for an
attribute with the local name <tt class="literal">href</tt> whose prefix is
mapped to the <a href="../../../../../../www.w3.org/1999/xlink">http://www.w3.org/1999/xlink</a> namespace
<a name="IXTR3-27" />
<a name="IXTR3-28" />
<a name="IXTR3-29" />URI.)
</p>



<hr width="684" align="left" />
<div class="navbar"><table width="684" border="0"><tr><td align="left" valign="top" width="228"><a href="ch09_04.htm"><img src="../gifs/txtpreva.gif" alt="Previous" border="0" /></a></td><td align="center" valign="top" width="228"><a href="index.htm"><img src="../gifs/txthome.gif" alt="Home" border="0" /></a></td><td align="right" valign="top" width="228"><a href="ch09_06.htm"><img src="../gifs/txtnexta.gif" alt="Next" border="0" /></a></td></tr><tr><td align="left" valign="top" width="228">9.4. Predicates</td><td align="center" valign="top" width="228"><a href="index/index.htm"><img src="../gifs/index.gif" alt="Book Index" border="0" /></a></td><td align="right" valign="top" width="228">9.6. General XPath Expressions</td></tr></table></div>
<hr width="684" align="left" />

<img src="../gifs/navbar.gif" usemap="#library-map" border="0" alt="Library Navigation Links" />
<p><p><font size="-1"><a href="copyrght.htm">Copyright &copy; 2002</a> O'Reilly &amp; Associates. All rights reserved.</font></p>

<map name="library-map">
<area shape="rect" coords="0,0,85,93" href="../index.htm"><area shape="rect" coords="85,0,180,98" href="../sax2/index.htm"><area shape="rect" coords="182,-1,261,100" href="index.htm"><area shape="rect" coords="263,1,384,96" href="../jxml/index.htm"><area shape="rect" coords="386,1,463,100" href="../jxslt/index.htm"><area shape="rect" coords="466,1,533,112" href="../xslt/index.htm"><area shape="rect" coords="535,-1,610,108" href="../schema/index.htm"><area shape="rect" coords="613,1,696,121" href="../pxml/index.htm">
</map>

</body></html>