<html><head><title>Direct Display of XML in Browsers (XML in a Nutshell, 2nd Edition)</title><link rel="stylesheet" type="text/css" href="../style/style1.css" />

<meta name="DC.Creator" content="Elliotte Rusty Harold and W. Scott Means" /><meta name="DC.Format" content="text/xml" scheme="MIME" /><meta name="DC.Language" content="en-US" /><meta name="DC.Publisher" content="O'Reilly &amp; Associates, Inc." /><meta name="DC.Source" scheme="ISBN" content="0-596-00292-0" /><meta name="DC.Subject.Keyword" content="stuff" /><meta name="DC.Title" content="XML in a Nutshell, 2nd Edition" /><meta name="DC.Type" content="Text.Monograph" />

</head><body bgcolor="#ffffff">

<img src="gifs/smbanner.gif" usemap="#banner-map" border="0" alt="Book Home" /><map name="banner-map"><area shape="rect" coords="1,-2,616,66" href="index.htm" alt="XML in a Nutshell" /><area shape="rect" coords="629,-11,726,25" href="jobjects/fsearch.htm" alt="Search this book" /></map>

<div class="navbar"><table width="684" border="0"><tr><td align="left" valign="top" width="228"><a href="ch07_01.htm"><img src="../gifs/txtpreva.gif" alt="Previous" border="0" /></a></td><td align="center" valign="top" width="228" /><td align="right" valign="top" width="228"><a href="ch07_03.htm"><img src="../gifs/txtnexta.gif" alt="Next" border="0" /></a></td></tr></table></div>



<h2 class="sect1">7.2. Direct Display of XML in Browsers</h2>

<p>Ultimately, <a name="xmlnut2-IDXTERM-604" /> <a name="xmlnut2-IDXTERM-605" /> <a name="xmlnut2-IDXTERM-606" />
<a name="xmlnut2-IDXTERM-607" />one
<a name="IXT-7-239252" />hopes
<a name="IXT-7-239253" />that browsers will be able to display not
just XHTML documents but any XML document as well. Since
it's too much to ask that browsers provide semantics
for all XML applications both current and yet-to-be-invented,
stylesheets will be attached to each document to provide instructions
about how each element will be rendered.
</p>

<p>The current major stylesheet languages are:</p>

<ul><li>
<p><a name="IXT-7-239254" /> <a name="IXT-7-239255" />Cascading Style Sheets Level 1
(CSS1)
</p>
</li><li>
<p><a name="IXT-7-239256" /> <a name="IXT-7-239257" />Cascading Style Sheets Level 2
(CSS2)
</p>
</li><li>
<p>XSL Transformations 1.0</p>
</li></ul>
<p>Eventually, there will be still more versions of these, including at
least CSS3 and XSLT 2.0. However, let's begin by
looking at how and how well existing style languages are supported by
existing browsers.
</p>

<a name="xmlnut2-CHP-7-SECT-2.1" /><div class="sect2">
<h3 class="sect2">7.2.1. The xml-stylesheet Processing Instruction</h3>

<p>The <a name="xmlnut2-IDXTERM-614" />stylesheet associated with a document is
indicated by an <tt class="literal">xml-stylesheet</tt> processing
instruction in the document's prolog, which comes
after the XML declaration but before the root element start-tag. This
processing instruction uses pseudoattributes to describe the
stylesheet (that is, they look like attributes but are not attributes
because <tt class="literal">xml-stylesheet</tt> is a processing instruction
and not an element).
</p>

<a name="xmlnut2-CHP-7-SECT-2.1.1" /><div class="sect3">
<h3 class="sect3">7.2.1.1. The required href and type pseudoattributes</h3>

<p>There <a name="xmlnut2-IDXTERM-615" />are two required
pseudoattributes for <tt class="literal">xml-stylesheet</tt> processing
<a name="IXT-7-239258" />instructions. The value of the
<tt class="literal">href</tt> pseudoattribute gives the URL, possibly
relative, where the stylesheet can be found. The
<tt class="literal">type</tt><a name="IXT-7-239259" /> pseudoattribute value specifies
the MIME media type of the stylesheet, text/css for cascading
stylesheets, application/xml for XSLT stylesheets. In <a href="ch07_02.htm">Example 7-3</a>, the <tt class="literal">xml-stylesheet</tt>
processing instruction tells browsers to apply the CSS stylesheet
<em class="filename">person.css</em> to this document before showing it to
the reader.
</p>

<a name="xmlnut2-CHP-7-EX-3" /><div class="example">
<h4 class="objtitle">Example 7-3. A very simple yet complete XML document </h4>
<blockquote><pre class="code">&lt;?xml version="1.0"?&gt;
<b class="emphasis-bold">&lt;?xml-stylesheet href="person.css" type="text/css"?&gt;</b>
&lt;person&gt;
  Alan Turing
&lt;/person&gt;</pre></blockquote>
</div>



<a name="ch07-16-fm2xml" /><blockquote><b>TIP:</b> 
Microsoft Internet Explorer uses <tt class="literal">type="text/xsl"</tt>
for XSLT stylesheets. However, the <tt class="literal">text/xsl</tt> MIME
media type has not been and will not be registered with the
<a name="IXT-7-239260" /> <a name="IXT-7-239261" />IANA. It is a
figment of Microsoft's imagination. In the future,
<tt class="literal">application/xslt+xml</tt> will probably be registered
to identify <a name="IXT-7-239262" />XSLT stylesheets specifically.</p>
</blockquote>               
 <p>In
addition to these two required pseudoattributes, there are four
optional pseudoattributes: </p> <ul><li>
<p><tt class="literal">media</tt></p> </li><li>
<p><tt class="literal">charset</tt></p> </li><li>
<p><tt class="literal">alternate</tt></p> </li><li>
<p><tt class="literal">title</tt></p> </li></ul>


</div>

<a name="xmlnut2-CHP-7-SECT-2.1.2" /><div class="sect3">
<h3 class="sect3">7.2.1.2. The media pseudoattribute</h3>

<p>The <tt class="literal">media</tt><a name="IXT-7-239263" /> pseudoattribute contains a
short string identifying for which medium this stylesheet should be
used, for example, paper, onscreen display, television, and so forth.
It can specify either a single medium or a comma-separated list of
mediums. The recognized values include:
</p>

<dl>
<dt><tt class="literal">screen</tt></dt>
<dd>
Computer monitors </p>
</dd>


<dt><tt class="literal">tty</tt></dt>
<dd>
Teletypes, terminals, xterms, and other monospaced, text-only devices</p>
</dd>


<dt><tt class="literal">tv</tt></dt>
<dd>
Televisions, WebTVs, video game consoles, and the like</p>
</dd>


<dt><tt class="literal">projection</tt></dt>
<dd>
Slides, transparencies, and direct-from-laptop presentations that
will be shown to an audience on a large screen
</p>
</dd>


<dt><tt class="literal">handheld</tt></dt>
<dd>
PDAs, cell phones, GameBoys, and the like </p>
</dd>


<dt><tt class="literal">print</tt></dt>
<dd>
Paper</p>
</dd>


<dt><tt class="literal">braille</tt></dt>
<dd>
Tactile feedback devices for the sight-impaired</p>
</dd>


<dt><tt class="literal">aural</tt></dt>
<dd>
Screen readers and speech synthesizers</p>
</dd>


<dt><tt class="literal">all</tt></dt>
<dd>
All of the previously mentioned plus any that
haven't been invented yet
</p>
</dd>

</dl>

<p>For example, this <tt class="literal">xml-stylesheet</tt> processing
instruction says that the CSS stylesheet at the URL <em class="emphasis">http://www.cafeconleche.org/style/titus.css</em></tt>
should be used for television, projection, and print:
</p>

<blockquote><pre class="code">&lt;?xml-stylesheet href="http://www.cafeconleche.org/style/titus.css"
                 type="text/css" media="tv, projection, print"?&gt;</pre></blockquote>

</div>

<a name="xmlnut2-CHP-7-SECT-2.1.3" /><div class="sect3">
<h3 class="sect3">7.2.1.3. The charset pseudoattribute</h3>

<p>The <tt class="literal">charset</tt><a name="IXT-7-239264" /> pseudoattribute specifies in
which character set the stylesheet is written, using the same values
as the encoding declaration uses. For example, to say that the CSS
stylesheet <em class="filename">koran.css</em></tt> is written in the
ISO-8859-6 character set, you'd use this processing
instruction:
</p>

<blockquote><pre class="code">&lt;?xml-stylesheet href="koran.css" type="text/css" charset="ISO-8859-6"?&gt;</pre></blockquote>

</div>

<a name="xmlnut2-CHP-7-SECT-2.1.4" /><div class="sect3">
<h3 class="sect3">7.2.1.4. The alternate and title pseudoattributes</h3>

<p>The <tt class="literal">alternate</tt><a name="IXT-7-239265" /> <a name="IXT-7-239266" />pseudoattribute specifies
whether this is the primary stylesheet for its media type or an
alternate one for special cases. The default value is
<tt class="literal">no</tt>, which indicates that it is the primary
stylesheet. If <tt class="literal">alternate</tt> has the value
<tt class="literal">yes</tt>, then the browser may (but does not have to)
present the user a choice from among the alternate stylesheets. If it
does offer a choice, then it uses the value of the
<tt class="literal">title</tt> pseudoattribute to tell the user how the
stylesheets differ. For example, these three
<tt class="literal">xml-stylesheet</tt> processing instructions offer the
user a choice between large, small, and medium text:
</p>

<blockquote><pre class="code">&lt;?xml-stylesheet href="big.css" type="text/css"
                 alternate="yes" title="Large fonts"?&gt;
&lt;?xml-stylesheet href="small.css" type="text/css"
                 alternate="yes" title="Small fonts"?&gt;
&lt;?xml-stylesheet href="medium.css" type="text/css" title="Normal fonts"?&gt;</pre></blockquote>

<p>Browsers that aren't able to ask the user to choose
a stylesheet will simply pick the first nonalternate sheet that most
closely matches <a name="IXTR3-45" /><a name="IXTR3-46" />its media-type
(<tt class="literal">screen</tt> for a typical web browser).
</p>

</div>
</div>
<a name="xmlnut2-CHP-7-SECT-2.2" /><div class="sect2">
<h3 class="sect2">7.2.2. Internet Explorer</h3>

<p>Microsoft <a name="IXT-7-239267" />Internet
<a name="IXT-7-239268" />Explorer 4.0 (IE4) includes an XML parser
that can be accessed from VBScript or JavaScript. This is used
internally to support channels and the Active Desktop. Your own
JavaScript and VBScript programs can use this parser to read XML data
and insert it into the web page. However, anything more
straightforward, like simply displaying a page of XML from a
specified URL, is beyond IE4's capabilities.
Furthermore, IE4 doesn't understand any stylesheet
language when applied to XML.
</p>

<p>Internet Explorer 5 (IE5) and 5.5 (IE 5.5) do understand XML, though
their parser is more than a little buggy; it rejects a number of
documents it shouldn't reject, most embarrassingly
the XML 1.0 specification itself. Internet Explorer 6 (IE6) has
improved XML support somewhat, but is still not completely
conformant.
</p>

<p>IE5 and later can directly display XML files, with or without an
associated stylesheet. If no stylesheet is provided, then IE5 uses a
default, built-in
<a name="IXT-7-239269" />XSLT stylesheet that displays the tree
structure of the XML document along with a little DHTML to allow the
user to collapse and expand nodes in the tree. <a href="ch07_02.htm">Figure 7-1</a> shows IE5 displaying <a href="ch06_03.htm">Example 6-1</a> from the last chapter.
</p>

<a name="xmlnut2-CHP-7-FIG-1" /><div class="figure"><img src="figs/XIAN2_0701.gif" alt="Figure 7-1" width="431" /></div><h4 class="objtitle">Figure 7-1. A document that uses IE5's built-in stylesheet</h4>

<p>IE5 also supports parts of CSS Level 1 and a little of CSS Level 2.
However, the support is spotty and inconsistent. Even some aspects of
CSS that work for HTML documents fail when applied to XML documents.
IE 5.5 and IE6 slightly improve coverage of CSS, but
don't support all CSS properties and selectors. In
fact, many CSS features that work in IE6 for HTML still
don't work when applied to XML documents.
</p>

<p>IE5 and IE 5.5 support their own custom version of XSLT, based on a
very early working draft of the XSLT specification. They do
<em class="emphasis">not</em></tt> support XSLT 1.0. You can tell the
difference by looking at the namespace of the stylesheet. A
stylesheet written for IE5 uses the <a href="../../../../../../www.w3.org/TR/WD-xsl">http://www.w3.org/TR/WD-xsl</a> namespace,
whereas a stylesheet designed for standard-compliant XSLT processors
uses the <a href="../../../../../../www.w3.org/1999/XSL/Transform">http://www.w3.org/1999/XSL/Transform</a>
namespace. Despite superficial similarities, these two languages are
not compatible. A stylesheet written for IE5 will not work with any
other XSLT processor, and a stylesheet written using standard XSLT
1.0 will not work in IE5. IE6 supports both real XSLT and
Microsoft's nonstandard dialect.
</p>

</div>
<a name="xmlnut2-CHP-7-SECT-2.3" /><div class="sect2">
<h3 class="sect2">7.2.3. Netscape and Mozilla</h3>

<p>Netscape 4.x and <a name="IXT-7-239270" /> <a name="IXT-7-239271" />earlier do not provide any significant
support for displaying XML in the browser. Netscape 4.0.6 and later
do use XML internally for some features such as
"What's Related."
However, the parser used isn't accessible to the
page author, even through JavaScript.
</p>

<p>Mozilla and Netscape 6.0 do fully support display of XML in the
browser. CSS Level 2 is completely supported. Mozilla can read an XML
web page, download the associated CSS stylesheet, apply it to the
document, and display the result to the end user, all completely
automatically and more or less exactly as XML on the Web was always
meant to work.
</p>

<p><a name="IXT-7-239272" />
<a name="IXT-7-239273" />Netscape 6.2 also supports XSLT 1.0, but
at the time of this writing the support is fairly buggy, and really
hard to get working. You have to serve the files from a web server
(not the local disk) and the web server must supply the exactly right
MIME media types for the XML document and its stylesheet. Even then
the transform fails about half the time. Mozilla 1.0 does have the
best XSLT support of any current browser, so it seems likely that
future versions of Netscape 6 (which is based on earlier betas of
Mozilla) will do a better job. Mozilla also partially supports
MathML; and there's a third party effort underway to
support SVG graphics. However, this probably won't
be ready for Mozilla 1.0.
</p>

</div>
<a name="xmlnut2-CHP-7-SECT-2.4" /><div class="sect2">
<h3 class="sect2">7.2.4. Alternative Approaches</h3>

<p>Authoring your web pages in XML does not necessarily require serving
them in XML. Fourth-generation and earlier browsers that
don't support XML in any significant way will be
with us for years to come. Servicing users with these browsers
requires standard, ordinary HTML that works in any browser back to
Mosaic 1.0.
</p>

<p>One popular option is to write the pages in XML, but serve them in
HTML. When the server receives a request for an XML document, it
automatically converts the document to HTML and sends the converted
document instead. More sophisticated servers can cache the converted
documents. They can also recognize browsers that support XML and send
them the raw XML instead.
</p>

<p>The preferred way to perform the conversion is with an XSLT
stylesheet and a Java servlet. Indeed, most XSLT engines such as
Xalan-J and SAXON include servlets that do exactly this. However,
other schemes are possible, for instance, using PHP or CGI instead of
a servlet. The key is to make sure that browsers only receive what
they know how to read and display. We'll talk more
about XSLT in the next <a name="IXTR3-47" /> <a name="IXTR3-48" /> <a name="IXTR3-49" /> <a name="IXTR3-50" />chapter. 
</p>

</div>


<hr width="684" align="left" />
<div class="navbar"><table width="684" border="0"><tr><td align="left" valign="top" width="228"><a href="ch07_01.htm"><img src="../gifs/txtpreva.gif" alt="Previous" border="0" /></a></td><td align="center" valign="top" width="228"><a href="index.htm"><img src="../gifs/txthome.gif" alt="Home" border="0" /></a></td><td align="right" valign="top" width="228"><a href="ch07_03.htm"><img src="../gifs/txtnexta.gif" alt="Next" border="0" /></a></td></tr><tr><td align="left" valign="top" width="228">7. XML on the Web</td><td align="center" valign="top" width="228"><a href="index/index.htm"><img src="../gifs/index.gif" alt="Book Index" border="0" /></a></td><td align="right" valign="top" width="228">7.3. Authoring Compound Documents with Modular XHTML</td></tr></table></div>
<hr width="684" align="left" />

<img src="../gifs/navbar.gif" usemap="#library-map" border="0" alt="Library Navigation Links" />
<p><p><font size="-1"><a href="copyrght.htm">Copyright &copy; 2002</a> O'Reilly &amp; Associates. All rights reserved.</font></p>

<map name="library-map">
<area shape="rect" coords="0,0,85,93" href="../index.htm"><area shape="rect" coords="85,0,180,98" href="../sax2/index.htm"><area shape="rect" coords="182,-1,261,100" href="index.htm"><area shape="rect" coords="263,1,384,96" href="../jxml/index.htm"><area shape="rect" coords="386,1,463,100" href="../jxslt/index.htm"><area shape="rect" coords="466,1,533,112" href="../xslt/index.htm"><area shape="rect" coords="535,-1,610,108" href="../schema/index.htm"><area shape="rect" coords="613,1,696,121" href="../pxml/index.htm">
</map>

</body></html>