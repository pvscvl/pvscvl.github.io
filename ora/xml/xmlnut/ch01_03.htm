<html><head><title>How XML Works (XML in a Nutshell, 2nd Edition)</title><link rel="stylesheet" type="text/css" href="../style/style1.css" />

<meta name="DC.Creator" content="Elliotte Rusty Harold and W. Scott Means" /><meta name="DC.Format" content="text/xml" scheme="MIME" /><meta name="DC.Language" content="en-US" /><meta name="DC.Publisher" content="O'Reilly &amp; Associates, Inc." /><meta name="DC.Source" scheme="ISBN" content="0-596-00292-0" /><meta name="DC.Subject.Keyword" content="stuff" /><meta name="DC.Title" content="XML in a Nutshell, 2nd Edition" /><meta name="DC.Type" content="Text.Monograph" />

</head><body bgcolor="#ffffff">

<img src="gifs/smbanner.gif" usemap="#banner-map" border="0" alt="Book Home" /><map name="banner-map"><area shape="rect" coords="1,-2,616,66" href="index.htm" alt="XML in a Nutshell" /><area shape="rect" coords="629,-11,726,25" href="jobjects/fsearch.htm" alt="Search this book" /></map>

<div class="navbar"><table width="684" border="0"><tr><td align="left" valign="top" width="228"><a href="ch01_02.htm"><img src="../gifs/txtpreva.gif" alt="Previous" border="0" /></a></td><td align="center" valign="top" width="228" /><td align="right" valign="top" width="228"><a href="ch01_04.htm"><img src="../gifs/txtnexta.gif" alt="Next" border="0" /></a></td></tr></table></div>



<h2 class="sect1">1.3. How XML Works</h2>

<p><a href="ch01_03.htm">Example 1-1</a>
<a name="IXT-1-239612" />shows a simple XML document. This
particular XML document might be seen in an inventory-control system
or a stock database. It marks up the data with tags and attributes
describing the color, size, bar-code number, manufacturer, name of
the product, and so on.
</p>

<a name="xmlnut2-CHP-1-EX-1" /><div class="example">
<h4 class="objtitle">Example 1-1. An XML document </h4>
<blockquote><pre class="code">&lt;?xml version="1.0"?&gt;
&lt;product barcode="2394287410"&gt;
  &lt;manufacturer&gt;Verbatim&lt;/manufacturer&gt;
  &lt;name&gt;DataLife MF 2HD&lt;/name&gt;
  &lt;quantity&gt;10&lt;/quantity&gt;
  &lt;size&gt;3.5"&lt;/size&gt;
  &lt;color&gt;black&lt;/color&gt;
  &lt;description&gt;floppy disks&lt;/description&gt;
&lt;/product&gt;</pre></blockquote>
</div>

<p>This document is text and might well be stored in a text file. You
can edit this file with any standard text editor such as BBEdit,
jEdit, UltraEdit, Emacs, or vi. You do not need a special XML editor.
Indeed, we find most general-purpose XML editors to be far more
trouble than they're worth and much harder to use
than simply editing documents in a text editor.
</p>

<p>Programs that actually try to understand the contents of the XML
document--that is, do more than merely treat it as any other
text file--will use an
<a name="IXT-1-239613" /><em class="emphasis">XML
parser</em> to read the document. The parser is responsible for
dividing the document into individual elements, attributes, and other
pieces. It passes the contents of the XML document to an application
piece by piece. If at any point the parser detects a violation of the
well-formedness rules of XML, then it reports the error to the
application and stops parsing. In some cases the parser may read
further in the document, past the original error, so that it can
detect and report other errors that occur later in the document.
However, once it has detected the first well-formedness error, it
will no longer pass along the contents of the elements and attributes
it encounters.
</p>

<p>Individual <a name="IXT-1-239614" />
<a name="IXT-1-239615" />XML applications normally dictate more
precise rules about exactly which elements and attributes are allowed
where. For instance, you wouldn't expect to find a
<tt class="literal">G_Clef</tt> element when reading a biology document.
Some of these rules can be precisely specified
<a name="IXT-1-239616" />with a schema written in any of several
languages including the W3C XML Schema Language, RELAX NG, and DTDs.
A document may contain a URI indicating where the schema can be
found. Some XML parsers will notice this and compare the document to
its schema as they read it to see if the document satisfies the
constraints specified there. Such a parser is called a
<em class="emphasis">validating parser</em><a name="IXT-1-239617" /> <a name="IXT-1-239618" />. A violation of those constraints is
called a <em class="emphasis">validity
error</em><a name="IXT-1-239619" />
<a name="IXT-1-239620" />,
and the whole process of checking a document against a schema is
called <em class="emphasis">validation</em>. If a validating parser finds
a validity error, it will report it to the application on whose
behalf it's parsing the document. This application
can then decide whether it wishes to continue parsing the document.
However, validity errors are not necessarily fatal (unlike
<a name="IXT-1-239621" />
<a name="IXT-1-239622" />well-formedness
errors), and an application may choose to ignore them. Not all
parsers are validating parsers. Some merely check for
well-formedness.
</p>

<p>The application that receives data from the parser may be:</p>

<ul><li>
<p>A web browser such as Netscape Navigator or Internet Explorer that
displays the document to a reader
</p>
</li><li>
<p>A word processor such as StarOffice Writer that loads the XML
document for editing
</p>
</li><li>
<p>A database such as Microsoft SQL Server that stores the XML data in a
new record
</p>
</li><li>
<p>A drawing program such as Adobe Illustrator that interprets the XML
as two-dimensional coordinates for the contents of a picture
</p>
</li><li>
<p>A spreadsheet such as Gnumeric that parses the XML to find numbers
and functions used in a calculation
</p>
</li><li>
<p>A personal finance program such as Microsoft Money that sees the XML
as a bank statement
</p>
</li><li>
<p>A syndication program that reads the XML document and extracts the
headlines for today's news
</p>
</li><li>
<p>A program that you yourself wrote in Java, C, Python or some other
language that does exactly what you want it to do
</p>
</li><li>
<p>Almost anything else</p>
</li></ul>
<p>XML is an <em class="emphasis">extremely</em> flexible format for data. It
is used for all of this and a lot more. These are real examples. In
theory, any data that can be stored in a computer can be stored in
XML format. In practice, XML is suitable for storing and exchanging
any data that can plausibly be encoded as text. It's
only really unsuitable for multimedia data such as photographs,
recorded sound, video, and other very large bit sequences.
</p>



<hr width="684" align="left" />
<div class="navbar"><table width="684" border="0"><tr><td align="left" valign="top" width="228"><a href="ch01_02.htm"><img src="../gifs/txtpreva.gif" alt="Previous" border="0" /></a></td><td align="center" valign="top" width="228"><a href="index.htm"><img src="../gifs/txthome.gif" alt="Home" border="0" /></a></td><td align="right" valign="top" width="228"><a href="ch01_04.htm"><img src="../gifs/txtnexta.gif" alt="Next" border="0" /></a></td></tr><tr><td align="left" valign="top" width="228">1.2. Portable Data</td><td align="center" valign="top" width="228"><a href="index/index.htm"><img src="../gifs/index.gif" alt="Book Index" border="0" /></a></td><td align="right" valign="top" width="228">1.4. The Evolution of XML</td></tr></table></div>
<hr width="684" align="left" />

<img src="../gifs/navbar.gif" usemap="#library-map" border="0" alt="Library Navigation Links" />
<p><p><font size="-1"><a href="copyrght.htm">Copyright &copy; 2002</a> O'Reilly &amp; Associates. All rights reserved.</font></p>

<map name="library-map">
<area shape="rect" coords="0,0,85,93" href="../index.htm"><area shape="rect" coords="85,0,180,98" href="../sax2/index.htm"><area shape="rect" coords="182,-1,261,100" href="index.htm"><area shape="rect" coords="263,1,384,96" href="../jxml/index.htm"><area shape="rect" coords="386,1,463,100" href="../jxslt/index.htm"><area shape="rect" coords="466,1,533,112" href="../xslt/index.htm"><area shape="rect" coords="535,-1,610,108" href="../schema/index.htm"><area shape="rect" coords="613,1,696,121" href="../pxml/index.htm">
</map>

</body></html>