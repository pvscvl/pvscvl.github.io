<html><head><title>Templates and Template Rules (XML in a Nutshell, 2nd Edition)</title><link rel="stylesheet" type="text/css" href="../style/style1.css" />

<meta name="DC.Creator" content="Elliotte Rusty Harold and W. Scott Means" /><meta name="DC.Format" content="text/xml" scheme="MIME" /><meta name="DC.Language" content="en-US" /><meta name="DC.Publisher" content="O'Reilly &amp; Associates, Inc." /><meta name="DC.Source" scheme="ISBN" content="0-596-00292-0" /><meta name="DC.Subject.Keyword" content="stuff" /><meta name="DC.Title" content="XML in a Nutshell, 2nd Edition" /><meta name="DC.Type" content="Text.Monograph" />

</head><body bgcolor="#ffffff">

<img src="gifs/smbanner.gif" usemap="#banner-map" border="0" alt="Book Home" /><map name="banner-map"><area shape="rect" coords="1,-2,616,66" href="index.htm" alt="XML in a Nutshell" /><area shape="rect" coords="629,-11,726,25" href="jobjects/fsearch.htm" alt="Search this book" /></map>

<div class="navbar"><table width="684" border="0"><tr><td align="left" valign="top" width="228"><a href="ch08_03.htm"><img src="../gifs/txtpreva.gif" alt="Previous" border="0" /></a></td><td align="center" valign="top" width="228" /><td align="right" valign="top" width="228"><a href="ch08_05.htm"><img src="../gifs/txtnexta.gif" alt="Next" border="0" /></a></td></tr></table></div>



<h2 class="sect1">8.4. Templates and Template Rules</h2>

<p>To <a name="IXT-8-239716" />control what output is created
from what input, you add template rules to the XSLT
<a name="IXT-8-239717" />stylesheet. Each template rule is
represented by <a name="IXT-8-239718" />an <tt class="literal">xsl:template</tt>
element. This element has a <tt class="literal">match</tt> attribute that
contains an XPath pattern identifying the input it matches; it also
contains a template that is instantiated and output when the pattern
is matched. The terminology is a little tricky here: the
<tt class="literal">xsl:template</tt> element is a template rule that
contains a template. An <tt class="literal">xsl:template</tt> element is
not itself the template.
</p>

<p>The simplest match pattern is an element name. Thus, this template
rule says that every time a <tt class="literal">person</tt> element is
seen, the stylesheet processor should emit the text
"A Person":
</p>

<blockquote><pre class="code">&lt;xsl:template match="person"&gt;A Person&lt;/xsl:template&gt;</pre></blockquote>

<p><a href="ch08_04.htm">Example 8-4</a> is a complete stylesheet that uses this
template rule.
</p>

<a name="xmlnut2-CHP-8-EX-4" /><div class="example">
<h4 class="objtitle">Example 8-4. A very simple XSLT stylesheet </h4>
<blockquote><pre class="code">&lt;?xml version="1.0"?&gt;
&lt;xsl:stylesheet version="1.0"
                xmlns:xsl="http://www.w3.org/1999/XSL/Transform"&gt;

  &lt;xsl:template match="person"&gt;A Person&lt;/xsl:template&gt;

&lt;/xsl:stylesheet&gt;</pre></blockquote>
</div>

<p>Applying this stylesheet to the document in <a href="ch08_01.htm">Example 8-1</a> produces this output:
</p>

<blockquote><pre class="code">&lt;?xml version="1.0" encoding="utf-8"?&gt;

 A Person

 A Person</pre></blockquote>

<p>There were two <tt class="literal">person</tt> elements in the input
document. Each time the processor saw one, it emitted the text
"A Person." The whitespace outside
the <tt class="literal">person</tt> elements was preserved, but everything
inside the <tt class="literal">person</tt> elements was replaced by the
contents of the template rule, which is called the
<em class="emphasis">template</em>.
</p>

<p>The text "A Person" is called
<a name="IXT-8-239719" /><em class="firstterm">literal data
characters</em>, which is a fancy way of saying plain text
that is copied from the stylesheet into the output document. A
template may also contain <em class="firstterm">literal result
elements</em><a name="IXT-8-239720" />, i.e., markup that is copied from the
stylesheet to the output document. For instance, <a href="ch08_04.htm">Example 8-5</a> wraps the text "A
Person" in between <tt class="literal">&lt;p&gt;</tt> and
<tt class="literal">&lt;/p&gt;</tt> tags:
</p>

<a name="xmlnut2-CHP-8-EX-5" /><div class="example">
<h4 class="objtitle">Example 8-5. A simple XSLT stylesheet with literal result elements </h4>
<blockquote><pre class="code">&lt;?xml version="1.0"?&gt;
&lt;xsl:stylesheet version="1.0"
                xmlns:xsl="http://www.w3.org/1999/XSL/Transform"&gt;

  &lt;xsl:template match="person"&gt;
    &lt;p&gt;A Person&lt;/p&gt;
  &lt;/xsl:template&gt;

&lt;/xsl:stylesheet&gt;</pre></blockquote>
</div>

<p>The output from this stylesheet is:</p>

<blockquote><pre class="code">&lt;?xml version="1.0" encoding="utf-8"?&gt;

  &lt;p&gt;A Person&lt;/p&gt;

  &lt;p&gt;A Person&lt;/p&gt;</pre></blockquote>

<p>The <tt class="literal">&lt;p&gt;</tt> and <tt class="literal">&lt;/p&gt;</tt>
tags were copied from the input to the output. The only major
restriction on the markup you may output is that it must be
<a name="IXT-8-239721" />well-formed XML because the
stylesheet must be well-formed XML. For instance, you cannot write a
template rule like this:
</p>

<blockquote><pre class="code">&lt;xsl:template match="person"&gt;
  A Person&lt;p&gt;
&lt;/xsl:template&gt;</pre></blockquote>

<p>Here the <tt class="literal">&lt;p&gt;</tt> start-tag has no matching
end-tag, and, therefore, the stylesheet is malformed. Any other
markup you include in your XSLT stylesheet must be similarly
well-formed. Empty-element tags must end with
<tt class="literal">/&gt;</tt>; attribute values must be quoted; less-than
signs must be escaped as <tt class="literal">&amp;lt;</tt>; all entity
references must be declared in a DTD except for the five predefined
ones, and so forth. XSLT has no exceptions to the rules of
well-formedness.
</p>



<hr width="684" align="left" />
<div class="navbar"><table width="684" border="0"><tr><td align="left" valign="top" width="228"><a href="ch08_03.htm"><img src="../gifs/txtpreva.gif" alt="Previous" border="0" /></a></td><td align="center" valign="top" width="228"><a href="index.htm"><img src="../gifs/txthome.gif" alt="Home" border="0" /></a></td><td align="right" valign="top" width="228"><a href="ch08_05.htm"><img src="../gifs/txtnexta.gif" alt="Next" border="0" /></a></td></tr><tr><td align="left" valign="top" width="228">8.3. Stylesheet Processors</td><td align="center" valign="top" width="228"><a href="index/index.htm"><img src="../gifs/index.gif" alt="Book Index" border="0" /></a></td><td align="right" valign="top" width="228">8.5. Calculating the Value of an Element with xsl:value-of</td></tr></table></div>
<hr width="684" align="left" />

<img src="../gifs/navbar.gif" usemap="#library-map" border="0" alt="Library Navigation Links" />
<p><p><font size="-1"><a href="copyrght.htm">Copyright &copy; 2002</a> O'Reilly &amp; Associates. All rights reserved.</font></p>

<map name="library-map">
<area shape="rect" coords="0,0,85,93" href="../index.htm"><area shape="rect" coords="85,0,180,98" href="../sax2/index.htm"><area shape="rect" coords="182,-1,261,100" href="index.htm"><area shape="rect" coords="263,1,384,96" href="../jxml/index.htm"><area shape="rect" coords="386,1,463,100" href="../jxslt/index.htm"><area shape="rect" coords="466,1,533,112" href="../xslt/index.htm"><area shape="rect" coords="535,-1,610,108" href="../schema/index.htm"><area shape="rect" coords="613,1,696,121" href="../pxml/index.htm">
</map>

</body></html>