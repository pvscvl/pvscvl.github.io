<html><head><title>Applying Templates with xsl:apply-templates (XML in a Nutshell, 2nd Edition)</title><link rel="stylesheet" type="text/css" href="../style/style1.css" />

<meta name="DC.Creator" content="Elliotte Rusty Harold and W. Scott Means" /><meta name="DC.Format" content="text/xml" scheme="MIME" /><meta name="DC.Language" content="en-US" /><meta name="DC.Publisher" content="O'Reilly &amp; Associates, Inc." /><meta name="DC.Source" scheme="ISBN" content="0-596-00292-0" /><meta name="DC.Subject.Keyword" content="stuff" /><meta name="DC.Title" content="XML in a Nutshell, 2nd Edition" /><meta name="DC.Type" content="Text.Monograph" />

</head><body bgcolor="#ffffff">

<img src="gifs/smbanner.gif" usemap="#banner-map" border="0" alt="Book Home" /><map name="banner-map"><area shape="rect" coords="1,-2,616,66" href="index.htm" alt="XML in a Nutshell" /><area shape="rect" coords="629,-11,726,25" href="jobjects/fsearch.htm" alt="Search this book" /></map>

<div class="navbar"><table width="684" border="0"><tr><td align="left" valign="top" width="228"><a href="ch08_05.htm"><img src="../gifs/txtpreva.gif" alt="Previous" border="0" /></a></td><td align="center" valign="top" width="228" /><td align="right" valign="top" width="228"><a href="ch08_07.htm"><img src="../gifs/txtnexta.gif" alt="Next" border="0" /></a></td></tr></table></div>



<h2 class="sect1">8.6. Applying Templates with xsl:apply-templates</h2>

<p>By default, <a name="xmlnut2-IDXTERM-779" />an <a name="xmlnut2-IDXTERM-780" />XSLT processor reads the input XML
document from top to bottom, starting at the root of the document and
working its way down using <a name="IXT-8-239724" />
<a name="IXT-8-239725" />preorder traversal. Template rules are
activated in the order in which they match elements encountered
during this traversal. This means a template rule for a parent will
be activated before template rules matching the
parent's children.
</p>

<p>However, one of the things a template can do is change the order of
traversal. That is, it can specify which element(s) should be
processed next. It can specify that an element(s) should be processed
in the middle of processing another element. It can even prevent
particular elements from being processed. In fact, Examples 8-4
through 8-6 all implicitly prevent the child elements of each
<tt class="literal">person</tt> element from being processed. Instead, they
provided their own instructions about what the XSLT processor was and
was not to do with those children.
</p>

<p>The <tt class="literal">xsl:apply-templates</tt> element lets you make
explicit your choice of processing order. Its
<tt class="literal">select</tt> attribute contains an XPath expression
telling the XSLT processor which nodes to process at that point in
the output tree.
</p>

<p>For example, suppose you wanted to list the names of the people in
the input document; however, you want to put the last names first,
regardless of the order in which they occur in the input document,
and you don't want to output the professions or
hobbies. First you need a name template that looks like this:
</p>

<blockquote><pre class="code">&lt;xsl:template match="name"&gt;
  &lt;xsl:value-of select="last_name"/&gt;,
  &lt;xsl:value-of select="first_name"/&gt;
&lt;/xsl:template&gt;</pre></blockquote>

<p>However, this alone isn't enough; if this were all
there was in the stylesheet, not only would the output include the
names, it would also include the professions and hobbies. You also
need a person template rule that says to apply templates to
<tt class="literal">name</tt> children only, but not to any other child
elements like <tt class="literal">profession</tt> or
<tt class="literal">hobby</tt>. This template rule does that:
</p>

<blockquote><pre class="code">&lt;xsl:template match="person"&gt;
  &lt;xsl:apply-templates select="name"/&gt;
&lt;/xsl:template&gt;</pre></blockquote>

<p><a href="ch08_06.htm">Example 8-7</a> shows the complete stylesheet.</p>

<a name="xmlnut2-CHP-8-EX-7" /><div class="example">
<h4 class="objtitle">Example 8-7. A simple XSLT stylesheet that uses xsl:apply-templates </h4>
<blockquote><pre class="code">&lt;?xml version="1.0"?&gt;
&lt;xsl:stylesheet version="1.0"
                xmlns:xsl="http://www.w3.org/1999/XSL/Transform"&gt;

  &lt;xsl:template match="name"&gt;
    &lt;xsl:value-of select="last_name"/&gt;,
    &lt;xsl:value-of select="first_name"/&gt;
  &lt;/xsl:template&gt;

  &lt;xsl:template match="person"&gt;
    &lt;xsl:apply-templates select="name"/&gt;
  &lt;/xsl:template&gt;

&lt;/xsl:stylesheet&gt;</pre></blockquote>
</div>

<p>When an XSLT processor applies this stylesheet to <a href="ch08_01.htm">Example 8-1</a>, this is output:
</p>

<blockquote><pre class="code">&lt;?xml version="1.0" encoding="utf-8"?&gt;

  Turing,
    Alan

  Feynman,
    Richard</pre></blockquote>

<p>The order of the template rules in the stylesheet
doesn't matter. It's only the order
of the elements in the input document that matters.
</p>

<p>Applying templates is also important when the child elements have
templates of their own, even if you don't need to
reorder the elements. For example, let's suppose you
want a template rule for the root <tt class="literal">people</tt> element
that wraps the entire document in an HTML header and body. Its
template will need to use <tt class="literal">xsl:apply-templates</tt> to
indicate where it wants the children of the root element to be
placed. That template rule might look like this:
</p>

<blockquote><pre class="code">&lt;xsl:template match="people"&gt;
  &lt;html&gt;
    &lt;head&gt;&lt;title&gt;Famous Scientists&lt;/title&gt;&lt;/head&gt;
    &lt;body&gt;
      &lt;xsl:apply-templates select="person"/&gt;
    &lt;/body&gt;
  &lt;/html&gt;
&lt;/xsl:template&gt;</pre></blockquote>

<p>This template tells the XSLT processor to replace every
<tt class="literal">people</tt> element in the input document (of which
there is only one in <a href="ch08_01.htm">Example 8-1</a>) with an
<tt class="literal">html</tt> element. This <tt class="literal">html</tt> element
contains some literal character data and several
<a name="IXT-8-239726" />literal result elements of which one is a
<tt class="literal">body</tt> element. The <tt class="literal">body</tt> element
contains an <tt class="literal">xsl:apply-templates</tt> element telling
the XSLT processor to process all the <tt class="literal">person</tt>
children of the current <tt class="literal">people</tt> element and insert
the output of any matched templates into the <tt class="literal">body</tt>
element of the output document.
</p>

<p>If you'd rather apply templates to all types of
children of the <tt class="literal">people</tt> element, rather than just
<tt class="literal">person</tt> children, you can omit the
<tt class="literal">select</tt> attribute as demonstrated in <a href="ch08_06.htm">Example 8-8</a>. You can also use the more complicated
<a name="IXTR3-110" />XPath
expressions discussed in the next chapter to be more precise about
which elements you want to apply templates to.
</p>

<a name="xmlnut2-CHP-8-EX-8" /><div class="example">
<h4 class="objtitle">Example 8-8. An XSLT stylesheet that generates a complete HTML document </h4>
<blockquote><pre class="code">&lt;?xml version="1.0"?&gt;
&lt;xsl:stylesheet version="1.0"
                xmlns:xsl="http://www.w3.org/1999/XSL/Transform"&gt;

  &lt;xsl:template match="people"&gt;
    &lt;html&gt;
      &lt;head&gt;&lt;title&gt;Famous Scientists&lt;/title&gt;&lt;/head&gt;
      &lt;body&gt;
        &lt;xsl:apply-templates/&gt;
      &lt;/body&gt;
    &lt;/html&gt;
  &lt;/xsl:template&gt;

  &lt;xsl:template match="name"&gt;
    &lt;p&gt;&lt;xsl:value-of select="last_name"/&gt;,
    &lt;xsl:value-of select="first_name"/&gt;&lt;/p&gt;
  &lt;/xsl:template&gt;

  &lt;xsl:template match="person"&gt;
    &lt;xsl:apply-templates select="name"/&gt;
  &lt;/xsl:template&gt;

&lt;/xsl:stylesheet&gt;</pre></blockquote>
</div>

<p>When an XSLT processor applies this stylesheet to <a href="ch08_01.htm">Example 8-1</a>, it outputs the well-formed HTML document
shown in <a href="ch08_06.htm">Example 8-9</a>. Look closely at this example,
and you may spot an important change that was not explicitly caused
by the instructions in the stylesheet.
</p>

<a name="xmlnut2-CHP-8-EX-9" /><div class="example">
<h4 class="objtitle">Example 8-9. The HTML document produced by applying <a href="ch08_06.htm">Example 8-8</a> to <a href="ch08_01.htm">Example 8-1</a> </h4>
<blockquote><pre class="code">&lt;html&gt;
&lt;head&gt;
&lt;title&gt;Famous Scientists&lt;/title&gt;
&lt;/head&gt;
&lt;body&gt;
  &lt;p&gt;Turing,
    Alan&lt;/p&gt;
  &lt;p&gt;Feynman,
    Richard&lt;/p&gt;
&lt;/body&gt;
&lt;/html&gt;</pre></blockquote>
</div>

<p>The difference between <a href="ch08_06.htm">Example 8-9</a> and all the
previous output examples is that the text declaration has
disappeared! Although there is an XSLT element you can use to specify
whether you want a text declaration preceding your output
(<tt class="literal">xsl:output</tt>), we haven't used
that here. Instead, the XSLT processor noted that the root output
element was <tt class="literal">html</tt>, and it adjusted itself
accordingly. Since HTML output is such a common case, XSLT has
special rules just to handle it. As well as omitting the text
declaration, the processor will use HTML empty-element syntax like
<tt class="literal">&lt;br&gt;</tt> instead of XML empty-element syntax
like <tt class="literal">&lt;br/&gt;</tt> in the output document. (The
input document and stylesheet must still be well-formed XML.) There
are about half a dozen other changes the XSLT processor will make
when it knows it's outputting HTML, all designed to
make the output more acceptable to existing web browsers than
<a name="IXTR3-111" />is <a name="IXTR3-112" />well-formed XML.
</p>



<hr width="684" align="left" />
<div class="navbar"><table width="684" border="0"><tr><td align="left" valign="top" width="228"><a href="ch08_05.htm"><img src="../gifs/txtpreva.gif" alt="Previous" border="0" /></a></td><td align="center" valign="top" width="228"><a href="index.htm"><img src="../gifs/txthome.gif" alt="Home" border="0" /></a></td><td align="right" valign="top" width="228"><a href="ch08_07.htm"><img src="../gifs/txtnexta.gif" alt="Next" border="0" /></a></td></tr><tr><td align="left" valign="top" width="228">8.5. Calculating the Value of an Element with xsl:value-of</td><td align="center" valign="top" width="228"><a href="index/index.htm"><img src="../gifs/index.gif" alt="Book Index" border="0" /></a></td><td align="right" valign="top" width="228">8.7. The Built-in Template Rules</td></tr></table></div>
<hr width="684" align="left" />

<img src="../gifs/navbar.gif" usemap="#library-map" border="0" alt="Library Navigation Links" />
<p><p><font size="-1"><a href="copyrght.htm">Copyright &copy; 2002</a> O'Reilly &amp; Associates. All rights reserved.</font></p>

<map name="library-map">
<area shape="rect" coords="0,0,85,93" href="../index.htm"><area shape="rect" coords="85,0,180,98" href="../sax2/index.htm"><area shape="rect" coords="182,-1,261,100" href="index.htm"><area shape="rect" coords="263,1,384,96" href="../jxml/index.htm"><area shape="rect" coords="386,1,463,100" href="../jxslt/index.htm"><area shape="rect" coords="466,1,533,112" href="../xslt/index.htm"><area shape="rect" coords="535,-1,610,108" href="../schema/index.htm"><area shape="rect" coords="613,1,696,121" href="../pxml/index.htm">
</map>

</body></html>