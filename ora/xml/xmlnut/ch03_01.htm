<html><head><title>Document Type Definitions (DTDs) (XML in a Nutshell, 2nd Edition)</title><link rel="stylesheet" type="text/css" href="../style/style1.css" />

<meta name="DC.Creator" content="Elliotte Rusty Harold and W. Scott Means" /><meta name="DC.Format" content="text/xml" scheme="MIME" /><meta name="DC.Language" content="en-US" /><meta name="DC.Publisher" content="O'Reilly &amp; Associates, Inc." /><meta name="DC.Source" scheme="ISBN" content="0-596-00292-0" /><meta name="DC.Subject.Keyword" content="stuff" /><meta name="DC.Title" content="XML in a Nutshell, 2nd Edition" /><meta name="DC.Type" content="Text.Monograph" />

</head><body bgcolor="#ffffff">

<img src="gifs/smbanner.gif" usemap="#banner-map" border="0" alt="Book Home" /><map name="banner-map"><area shape="rect" coords="1,-2,616,66" href="index.htm" alt="XML in a Nutshell" /><area shape="rect" coords="629,-11,726,25" href="jobjects/fsearch.htm" alt="Search this book" /></map>

<div class="navbar"><table width="684" border="0"><tr><td align="left" valign="top" width="228"><a href="ch02_10.htm"><img src="../gifs/txtpreva.gif" alt="Previous" border="0" /></a></td><td align="center" valign="top" width="228" /><td align="right" valign="top" width="228"><a href="ch03_02.htm"><img src="../gifs/txtnexta.gif" alt="Next" border="0" /></a></td></tr></table></div>


<h1 class="chapter">Chapter 3. Document Type Definitions (DTDs)</h1>
<div class="htmltoc"><h4 class="tochead">Contents:</h4><p>
<a href="ch03_01.htm">Validation</a><br />
<a href="ch03_02.htm">Element Declarations</a><br />
<a href="ch03_03.htm">Attribute Declarations</a><br />
<a href="ch03_04.htm">General Entity Declarations</a><br />
<a href="ch03_05.htm">External Parsed General Entities</a><br />
<a href="ch03_06.htm">External Unparsed Entities and Notations</a><br />
<a href="ch03_07.htm">Parameter Entities</a><br />
<a href="ch03_08.htm">Conditional Inclusion</a><br />
<a href="ch03_09.htm">Two DTD Examples</a><br />
<a href="ch03_10.htm">Locating Standard DTDs </a><br /></p></div><p>While <a name="xmlnut2-IDXTERM-176" />XML is
extremely flexible, not all the programs that read particular XML
documents are so flexible. Many programs can work with only some XML
applications but not others. For example, Adobe Illustrator 10 can
read and write Scalable Vector Graphics (SVG) files, but you
wouldn't expect it to understand a Platform for
Privacy Preferences (P3P) document. And within a particular XML
application, it's often important to ensure that a
given document indeed adheres to the rules of that XML application.
For instance, in XHTML, <tt class="literal">li</tt> elements should only be
children of <tt class="literal">ul</tt> or <tt class="literal">ol</tt> elements.
Browsers may not know what to do with them, or may act
inconsistently, if <tt class="literal">li</tt> elements appear in the
middle of a <tt class="literal">blockquote</tt> or <tt class="literal">p</tt>
element.
</p><p>The solution to this dilemma is a <em class="firstterm">document type
definition</em> (DTD). DTDs are written in a formal syntax
that explains precisely which elements and entities may appear where
in the document and what the elements' contents and
attributes are. A DTD can make statements such as "A
<tt class="literal">ul</tt> element only contains <tt class="literal">li</tt>
elements" or "Every
<tt class="literal">employee</tt> element must have a
<tt class="literal">social_security_number</tt>
attribute." Different XML applications can use
different DTDs to specify what they do and do not allow.
</p><p>A validating parser compares a document to its DTD and lists any
places where the document differs from the constraints specified in
the DTD.<a href="#FOOTNOTE-3">[3]</a> The program can then decide what it wants to do about any
violations. Some programs may reject the document. Others may try to
fix the document or reject just the invalid element. Validation is an
optional step in processing XML. A validity error is not necessarily
a fatal error like a
<a name="IXT-3-239739" />
<a name="IXT-3-239740" />well-formedness
<a name="IXT-3-239741" />
<a name="IXT-3-239742" />error,
though some applications may choose to treat it as one.
</p><blockquote class="footnote"> <a name="FOOTNOTE-3" /><p> [3]The document type
<em class="firstterm">declaration</em> and the document type
<em class="firstterm">definition</em> are two different things. The
abbreviation <em class="firstterm">DTD</em> is properly used only to
refer to the document type <em class="firstterm">definition</em>.</p>
</blockquote><div class="sect1"><a name="xmlnut2-CHP-3-SECT-1" />
<h2 class="sect1">3.1. Validation</h2>

<p>A <a name="xmlnut2-IDXTERM-181" />
<a name="xmlnut2-IDXTERM-182" />valid document includes a
<em class="emphasis">document type declaration</em> that identifies the
DTD the document satisfies. The DTD lists all the elements,
attributes, and entities the document uses and the contexts in which
it uses them. The DTD may list items the document does not use as
well. Validity operates on the principle that everything not
permitted is forbidden. Everything in the document must match a
declaration in the DTD. If a document has a document type declaration
and the document satisfies the DTD that the document type declaration
indicates, then the document is said to be
<em class="emphasis">valid</em>. If it does not, it is said to be
<em class="emphasis">invalid</em>.
</p>

<p>There are many things the DTD does not say. In particular, it does
not say the following:
</p>

<ul><li>
<p>What the root element of the document is</p>
</li><li>
<p>How many of instances of each kind of element appear in the document</p>
</li><li>
<p>What the character data inside the elements looks like</p>
</li><li>
<p>The semantic meaning of an element; for instance, whether it contains
a date or a person's name
</p>
</li></ul>
<p>DTDs allow you to place some constraints on the form an XML document
takes, but there can be quite a bit of flexibility within those
limits. A DTD never says anything about the length, structure,
meaning, allowed values, or other aspects of the text content of an
element.
</p>

<p>Validity is optional. A parser reading an XML document may or may not
check for validity. If it does check for validity, the program
receiving data from the parser may or may not care about validity
errors. In some cases, such as feeding records into a database, a
validity error may be quite serious, indicating that a required field
is missing, for example. In other cases, rendering a web page
perhaps, a validity error may not be so important, and you can work
around it. Well-formedness is required of all XML documents; validity
is not. Your documents and your programs can use it or not as you
find needful.
</p>

<a name="xmlnut2-CHP-3-SECT-1.1" /><div class="sect2">
<h3 class="sect2">3.1.1. A Simple DTD Example</h3>

<p>Recall <a href="ch02_02.htm">Example 2-2</a> from the last chapter; this
described a person. The person had a name and three professions. The
name had a first name and a last name. The particular person
described in that example was Alan <a name="xmlnut2-IDXTERM-183" />Turing. However, that's
not relevant for DTDs. A DTD only describes the general type, not the
specific instance. A DTD for person documents would say that a
<tt class="literal">person</tt> element contains one
<tt class="literal">name</tt> child element and zero or more
<tt class="literal">profession</tt> child elements. It would further say
that each <tt class="literal">name</tt> element contains a
<tt class="literal">first_name</tt> child element and a
<tt class="literal">last_name</tt> child element. Finally it would state
that the <tt class="literal">first_name</tt>, <tt class="literal">last_name</tt>,
and <tt class="literal">profession</tt> elements all contain text. <a href="ch03_01.htm">Example 3-1</a> is a DTD that describes such a
<tt class="literal">person</tt> element.
</p>

<a name="xmlnut2-CHP-3-EX-1" /><div class="example">
<h4 class="objtitle">Example 3-1. A DTD for the person </h4>
<blockquote><pre class="code">&lt;!ELEMENT person     (name, profession*)&gt;
&lt;!ELEMENT name       (first_name, last_name)&gt;
&lt;!ELEMENT first_name (#PCDATA)&gt;
&lt;!ELEMENT last_name  (#PCDATA)&gt;
&lt;!ELEMENT profession (#PCDATA)&gt;</pre></blockquote>
</div>

<p>This DTD would probably be stored in a separate file from the
documents it describes. This allows it to be easily referenced from
multiple XML documents. However, it can be included inside the XML
document if that's convenient, using the document
type declaration we discuss later in this section. If it is stored in
a separate file, then that file would most likely be named
<em class="filename">person.dtd</em>, or something similar. The
<em class="emphasis">.dtd</em> extension is fairly standard though not
specifically required by the XML specification. If this file were
served by a web server, it would be given the MIME media type
<tt class="literal">application/xml-dtd</tt>.
</p>

<p>Each line of <a href="ch03_01.htm">Example 3-1</a> is an
<a name="IXT-3-239743" /><em class="emphasis">element
declaration</em>. The first line declares the
<tt class="literal">person</tt> element; the second line declares the
<tt class="literal">name</tt> element; the third line declares the
<tt class="literal">first_name</tt> element; and so on. However, the line
breaks aren't relevant except for legibility.
Although it's customary to put only one declaration
on each line, it's not required. Long declarations
can even span multiple lines.
</p>

<p>The first element declaration in <a href="ch03_01.htm">Example 3-1</a> states
that each <tt class="literal">person</tt> element must contain exactly one
<tt class="literal">name</tt> child element followed by zero or more
<tt class="literal">profession</tt> elements. The asterisk after profession
stands for "zero or more." Thus,
every person must have a name and may or may not have a profession or
multiple professions. However, the name must come before all
professions. For example, this <tt class="literal">person</tt> element is
valid:
</p>

<blockquote><pre class="code">&lt;person&gt;
  &lt;name&gt;
    &lt;first_name&gt;Alan&lt;/first_name&gt;
    &lt;last_name&gt;Turing&lt;/last_name&gt;
  &lt;/name&gt;
&lt;/person&gt;</pre></blockquote>

<p>However, this <tt class="literal">person</tt> element is not valid because
it omits the name:
</p>

<blockquote><pre class="code">&lt;person&gt;
  &lt;profession&gt;computer scientist&lt;/profession&gt;
  &lt;profession&gt;mathematician&lt;/profession&gt;
  &lt;profession&gt;cryptographer&lt;/profession&gt;
&lt;/person&gt;</pre></blockquote>

<p>This <tt class="literal">person</tt> element is not valid because a
<tt class="literal">profession</tt> element comes before the
<tt class="literal">name</tt>:
</p>

<blockquote><pre class="code">&lt;person&gt;
  &lt;profession&gt;computer scientist&lt;/profession&gt;
  &lt;name&gt;
    &lt;first_name&gt;Alan&lt;/first_name&gt;
    &lt;last_name&gt;Turing&lt;/last_name&gt;
  &lt;/name&gt;
  &lt;profession&gt;mathematician&lt;/profession&gt;
  &lt;profession&gt;cryptographer&lt;/profession&gt;
&lt;/person&gt;</pre></blockquote>

<p>The <tt class="literal">person</tt> element may not contain any element
except those listed in its declaration. The only extra character data
it can contain is whitespace. For example, this is an invalid
<tt class="literal">person</tt> element because it adds a
<tt class="literal">publication</tt> element:
</p>

<blockquote><pre class="code">&lt;person&gt;
  &lt;name&gt;
    &lt;first_name&gt;Alan&lt;/first_name&gt;
    &lt;last_name&gt;Turing&lt;/last_name&gt;
  &lt;/name&gt;
  &lt;profession&gt;mathematician&lt;/profession&gt;
  &lt;profession&gt;cryptographer&lt;/profession&gt;
<b class="emphasis-bold">  &lt;publication&gt;On Computable Numbers...&lt;/publication&gt;</b>
&lt;/person&gt;</pre></blockquote>

<p>This is an invalid <tt class="literal">person</tt> element because it adds
some text outside the allowed children:
</p>

<blockquote><pre class="code">&lt;person&gt;
  &lt;name&gt;
    &lt;first_name&gt;Alan&lt;/first_name&gt;
    &lt;last_name&gt;Turing&lt;/last_name&gt;
  &lt;/name&gt;
  was a &lt;profession&gt;computer scientist&lt;/profession&gt;,
  a &lt;profession&gt;mathematician&lt;/profession&gt;, and a
  &lt;profession&gt;cryptographer&lt;/profession&gt;
&lt;/person&gt;</pre></blockquote>

<p>In all these examples of invalid elements, you could change the DTD
to make these elements valid. All the examples are well-formed, after
all. However, with the DTD in <a href="ch03_01.htm">Example 3-1</a>, they are
not valid.
</p>

<p>The <tt class="literal">name</tt> declaration says that each
<tt class="literal">name</tt> element must contain exactly one
<tt class="literal">first_name</tt> element followed by exactly one
<tt class="literal">last_name</tt> element. All other variations are
forbidden.
</p>

<p>The remaining three declarations--<tt class="literal">first_name</tt>,
<tt class="literal">last_name</tt>, and
<tt class="literal">profession</tt>--all say that their elements must
<a name="IXT-3-239744" />contain <tt class="literal">#PCDATA</tt>. This
is a DTD keyword standing for <em class="emphasis">parsed character
data</em><a name="IXT-3-239745" /> <a name="IXT-3-239746" />--that
is, raw text possibly containing entity references such as
<tt class="literal">&amp;amp;</tt> and <tt class="literal">&amp;lt;</tt>, but not
containing any tags or child elements.
</p>

<p><a href="ch03_01.htm">Example 3-1</a> placed the most complicated and
highest-level declaration at the top. However,
that's not required. For instance, <a href="ch03_01.htm">Example 3-2</a> is an equivalent DTD that simply reorders the
declarations. DTDs allow forward, backward, and circular references
to other declarations.
</p>

<a name="xmlnut2-CHP-3-EX-2" /><div class="example">
<h4 class="objtitle">Example 3-2. An alternate DTD for the person element </h4>
<blockquote><pre class="code">&lt;!ELEMENT first_name (#PCDATA)&gt;
&lt;!ELEMENT last_name  (#PCDATA)&gt;
&lt;!ELEMENT profession (#PCDATA)&gt;
&lt;!ELEMENT name       (first_name, last_name)&gt;
&lt;!ELEMENT person     (name, profession*)&gt;</pre></blockquote>
</div>

</div>
<a name="xmlnut2-CHP-3-SECT-1.2" /><div class="sect2">
<h3 class="sect2">3.1.2. The Document Type Declaration</h3>

<p>A valid <a name="IXT-3-239747" />document includes a reference to the
DTD to which it should be compared. This is given in the
document's single <a name="IXT-3-239748" />
<a name="IXT-3-239749" />document type declaration. A document
type declaration looks like this:
</p>

<blockquote><pre class="code">&lt;!DOCTYPE person SYSTEM "http://www.cafeconleche.org/dtds/person.dtd"&gt;</pre></blockquote>

<p>This says that the root element of the document is
<tt class="literal">person</tt> and that the DTD for this document can be
found at the URI <a href="../../../../../../www.cafeconleche.org/dtds/person.dtd">http://www.cafeconleche.org/dtds/person.dtd</a>.
</p>



<a name="ch03-6-fm2xml" /><blockquote><b>TIP:</b> 
<a name="IXT-3-239750" /> <a name="IXT-3-239751" />URI stands
for Uniform Resource Identifier. URIs are a superset of
URLs<a name="IXT-3-239752" /> <a name="IXT-3-239753" />. They include not only URLs but
also Uniform Resource Names (URNs). A URN allows you to identify a
resource such as the DTD for SVGs irrespective of its location.
Indeed, the resource might exist at multiple locations, all equally
authoritative. In practice, the only URIs in wide use today are
URLs.</p>
</blockquote>

<p>The document type declaration is included in the
<a name="IXT-3-239754" />prolog
of the XML document after the XML declaration but before the root
element. (The prolog is everything in the XML document before the
root element start-tag.) <a href="ch03_01.htm">Example 3-3</a> demonstrates.
</p>


<a name="xmlnut2-CHP-3-EX-3" /><div class="example">
<h4 class="objtitle">Example 3-3. A valid person document </h4>
<blockquote><pre class="code">&lt;?xml version="1.0" standalone="no"?&gt;
<b class="emphasis-bold">&lt;!DOCTYPE person SYSTEM "http://www.cafeconleche.org/dtds/person.dtd"&gt;</b>
&lt;person&gt;
  &lt;name&gt;
    &lt;first_name&gt;Alan&lt;/first_name&gt;
    &lt;last_name&gt;Turing&lt;/last_name&gt;
  &lt;/name&gt;
  &lt;profession&gt;computer scientist&lt;/profession&gt;
  &lt;profession&gt;mathematician&lt;/profession&gt;
  &lt;profession&gt;cryptographer&lt;/profession&gt;
&lt;/person&gt;</pre></blockquote>
</div>

<p>If the document resides at the same base site as the DTD, you can use
a relative URL instead of the absolute form. For example:
</p>

<blockquote><pre class="code">&lt;!DOCTYPE person SYSTEM "/dtds/person.dtd"&gt;</pre></blockquote>

<p>You can even use just the filename if the DTD is in the same
directory as the document:
</p>

<blockquote><pre class="code">&lt;!DOCTYPE person SYSTEM "person.dtd"&gt;</pre></blockquote>

<a name="xmlnut2-CHP-3-SECT-1.2.1" /><div class="sect3">
<h3 class="sect3">3.1.2.1. Public IDs</h3>

<p>Standard DTDs may actually be stored at multiple URLs. For example,
if you're drawing an SVG picture on your laptop at
the beach, you probably want to validate your drawing without opening
a network connection to the W3C's web site where the
official SVG DTD resides. Such DTDs may be associated with public
IDs. The name of the public ID uniquely identifies the XML
application in use. At the same time, a backup URI is also included
in case the validator does not recognize the public ID. To indicate
that you're specifying a public ID, use the keyword
<a name="IXT-3-239755" /><tt class="literal">PUBLIC</tt> in place
of <a name="IXT-3-239756" /><tt class="literal">SYSTEM</tt>. For
example, this document type declaration refers to the Rich Site
Summary (RSS) DTD standardized by Netscape:
</p>

<blockquote><pre class="code">&lt;!DOCTYPE rss PUBLIC "-//Netscape Communications//DTD RSS 0.91//EN"
              "http://my.netscape.com/publish/formats/rss-0.91.dtd"&gt;</pre></blockquote>

<p>A local catalog server can be used to convert the public IDs into the
most appropriate URLs for the local environment. The catalogs
themselves can be written in XML, specifically, the OASIS XML catalog
format (<a href="../../../../../../www.oasis-open.org/committees/entity/spec.html">http://www.oasis-open.org/committees/entity/spec.html</a>).
In practice, however, PUBLIC IDs aren't used very
much. Almost all validators rely on the URI to actually validate the
document.
</p>

</div>
</div>
<a name="xmlnut2-CHP-3-SECT-1.3" /><div class="sect2">
<h3 class="sect2">3.1.3. Internal DTD Subsets</h3>

<p>When <a name="IXT-3-239757" /><a name="IXT-3-239758" />you're first
<a name="IXT-3-239759" />developing a DTD, it's
often useful to keep the DTD and the canonical example document in
the same file so you can modify and check them simultaneously.
Therefore, the document type declaration may actually contain the DTD
between square brackets rather than referencing it at an external
URI. <a href="ch03_01.htm">Example 3-4</a> demonstrates.
</p>

<a name="xmlnut2-CHP-3-EX-4" /><div class="example">
<h4 class="objtitle">Example 3-4. A valid person document with an internal DTD </h4>
<blockquote><pre class="code">&lt;?xml version="1.0"?&gt;
<b class="emphasis-bold">&lt;!DOCTYPE person [</b>
<b class="emphasis-bold">  &lt;!ELEMENT first_name (#PCDATA)&gt;</b>
<b class="emphasis-bold">  &lt;!ELEMENT last_name  (#PCDATA)&gt;</b>
<b class="emphasis-bold">  &lt;!ELEMENT profession (#PCDATA)&gt;</b>
<b class="emphasis-bold">  &lt;!ELEMENT name       (first_name, last_name)&gt;</b>
<b class="emphasis-bold">  &lt;!ELEMENT person     (name, profession*)&gt;</b>
<b class="emphasis-bold">]&gt;</b>
&lt;person&gt;
  &lt;name&gt;
    &lt;first_name&gt;Alan&lt;/first_name&gt;
    &lt;last_name&gt;Turing&lt;/last_name&gt;
  &lt;/name&gt;
  &lt;profession&gt;computer scientist&lt;/profession&gt;
  &lt;profession&gt;mathematician&lt;/profession&gt;
  &lt;profession&gt;cryptographer&lt;/profession&gt;
&lt;/person&gt;</pre></blockquote>
</div>

<p>Some <a name="IXTR3-124" />document type declarations contain
some declarations directly but link in others using a
<tt class="literal">SYSTEM</tt> or <tt class="literal">PUBLIC</tt> identifier.
For example, this document type declaration declares the
<tt class="literal">profession</tt> and <tt class="literal">person</tt> elements
itself but relies on the file <em class="filename">name.dtd</em> to
contain the declaration of the name element:
</p>

<blockquote><pre class="code">&lt;!DOCTYPE person SYSTEM "name.dtd" [
  &lt;!ELEMENT profession (#PCDATA)&gt;
  &lt;!ELEMENT person (name, profession*)&gt;
]&gt;</pre></blockquote>

<p>The part of the DTD between the brackets is called the
<em class="emphasis">internal DTD subset</em>. All the parts that come
from outside this document are called the
<a name="IXT-3-239760" /><em class="emphasis">external DTD
subset</em>. Together they make up the complete DTD. As a
general rule, the two different subsets must be compatible. Neither
can override the element declarations the other makes. For example,
if <em class="filename">name.dtd</em> also declared the
<tt class="literal">person</tt> element, then there would be a problem.
However, entity declarations can be overridden with some important
consequences for DTD structure and design, which
we'll see shortly when we discuss entities.
</p>

<p>When you use an external DTD subset, you should give the
<a name="IXT-3-239761" /><tt class="literal">standalone</tt> attribute of
the XML declaration the value <tt class="literal">no</tt>. For example:
</p>

<blockquote><pre class="code">&lt;?xml version="1.0" encoding="UTF-8" standalone="no"?&gt;</pre></blockquote>



<a name="ch03-10-fm2xml" /><blockquote><b>TIP:</b> 
Actually, the XML specification includes four very detailed rules
about exactly when the presence of an external DTD subset does and
does not require the <tt class="literal">standalone</tt> attribute to have
the value <tt class="literal">no</tt>. However, the net effect of these
rules is that almost all XML documents that use external DTD subsets
require <tt class="literal">standalone</tt> to have the value
<tt class="literal">no</tt>. Since setting <tt class="literal">standalone</tt> to
<tt class="literal">no</tt> is always permitted even when
it's not required, it's simply not
worth worrying about the uncommon cases.</p></blockquote>
 <p>A validating processor
is required to read the external DTD subset. A nonvalidating
processor may do so, but is not required to, even if
<tt class="literal">standalone</tt> has the value <tt class="literal">no</tt>.
This means that if the external subset makes declarations that have
consequences for the content of a document (for instance, providing
default values for attributes) then the content of the document
depends on which parser you're using and how
it's configured. This has led to no end of
confusion. Although some of the earliest XML parsers did not resolve
external entities, most of the parsers still being used can do so and
generally will do so. You should read the external DTD subset unless
efficiency is a major concern or you're very
familiar with the structure of the documents you're
parsing. </p>


</div>
<a name="xmlnut2-CHP-3-SECT-1.4" /><div class="sect2">
<h3 class="sect2">3.1.4. Validating a Document</h3>

<p>As a general rule, <a name="IXT-3-239762" />web browsers do not validate documents but
only check them for well-formedness. If you're
writing your own programs to process XML, you can use the
parser's API to validate documents. If
you're writing documents by hand and you want to
validate them, you can either use one of the online validators or run
a local program to validate the document.
</p>

<p><a name="IXT-3-239763" />The online
validators are probably the easiest way to validate your documents.
There are two of note:
</p>

<ul><li>
<p>The <a name="IXT-3-239764" /> <a name="IXT-3-239765" />Brown
University Scholarly Technology Group's XML
Validation Form at <a href="../../../../../../www.stg.brown.edu/service/xmlvalid/">http://www.stg.brown.edu/service/xmlvalid/</a>
</p>
</li><li>
<p>Richard Tobin's <a name="IXT-3-239766" />XML well-formedness checker and
validator at <a href="../../../../../../www.cogsci.ed.ac.uk/~richard/xml-check.html">http://www.cogsci.ed.ac.uk/%7Erichard/xml-check.html</a>
</p>
</li></ul>
<p>First, you have to place the document and associated DTDs on a
publicly accessible web server. Next, load one of the previous URLs
in a browser, and type the URL of the document
you're checking into the online form. The validating
server will retrieve your document and tell you what, if any,
<a name="IXT-3-239767" />
<a name="IXT-3-239768" />errors
it found. <a href="ch03_01.htm">Figure 3-1</a> shows the results of using the
Brown validator on a simple invalid but well-formed document.
</p>

<a name="xmlnut2-CHP-3-FIG-1" /><div class="figure"><img src="figs/XIAN2_0301.gif" alt="Figure 3-1" width="431" /></div><h4 class="objtitle">Figure 3-1. Validity errors detected by the Brown University online validator</h4>

<p>Most XML parser class libraries include a simple program to validate
documents you can use if you're comfortable
installing and using command-line programs. In Xerces 1.x, that
program is <a name="IXT-3-239769" /><em class="filename">sax.SAXCount</em>. (Xerces
2.x uses <em class="filename">sax.Counter</em> instead.) Use the
<tt class="literal">-v</tt> flag to turn on validation. (By default,
<em class="filename">SAXCount</em> only checks for well-formedness.) Then
pass the URLs or filenames of the documents you wish to validate to
the <em class="filename">SAXCount</em> program on the command line like
this:
</p>

<blockquote><pre class="code">C:\&gt;<tt class="userinput"><b>java sax.SAXCount -v invalid_fibonacci.xml</b></tt>
[Error] invalid_fibonacci.xml:8:10: Element type "title" must be declared.
[Error] invalid_fibonacci.xml:110:22: The content of element type 
"Fibonacci_Numbers" must match "(fibonacci)*".
fibonacci.xml: 541 ms (103 elems, 101 attrs, 307 spaces, 1089 chars)</pre></blockquote>

<p>You can see from this output that the document
<em class="filename">invalid_fibonacci.xml</em> has two validity errors
that need to be <a name="IXTR3-125" /> <a name="IXTR3-126" />fixed: the first in line 8 and the
second in line 110.
</p>

<p>There are also some simple GUI programs for validating XML documents,
including the Topologi Schematron Validator for Windows (<a href="../../../../../../www.topologi.com/">http://www.topologi.com</a>) shown in <a href="ch03_01.htm">Figure 3-2</a>. Despite the name, this product can actually
validate documents against schemas written in multiple languages,
including DTDs and the W3C XML Schema Language, as well as
Schematron.
</p>

<a name="xmlnut2-CHP-3-FIG-2" /><div class="figure"><img src="figs/XIAN2_0302.gif" alt="Figure 3-2" width="431" /></div><h4 class="objtitle">Figure 3-2. Validity errors detected by the Topologi Schematron Validator </h4>

</div>
</div>

<hr width="684" align="left" />
<div class="navbar"><table width="684" border="0"><tr><td align="left" valign="top" width="228"><a href="ch02_10.htm"><img src="../gifs/txtpreva.gif" alt="Previous" border="0" /></a></td><td align="center" valign="top" width="228"><a href="index.htm"><img src="../gifs/txthome.gif" alt="Home" border="0" /></a></td><td align="right" valign="top" width="228"><a href="ch03_02.htm"><img src="../gifs/txtnexta.gif" alt="Next" border="0" /></a></td></tr><tr><td align="left" valign="top" width="228">2.10. Checking Documents for Well-Formedness</td><td align="center" valign="top" width="228"><a href="index/index.htm"><img src="../gifs/index.gif" alt="Book Index" border="0" /></a></td><td align="right" valign="top" width="228">3.2. Element Declarations</td></tr></table></div>
<hr width="684" align="left" />

<img src="../gifs/navbar.gif" usemap="#library-map" border="0" alt="Library Navigation Links" />
<p><p><font size="-1"><a href="copyrght.htm">Copyright &copy; 2002</a> O'Reilly &amp; Associates. All rights reserved.</font></p>

<map name="library-map">
<area shape="rect" coords="0,0,85,93" href="../index.htm"><area shape="rect" coords="85,0,180,98" href="../sax2/index.htm"><area shape="rect" coords="182,-1,261,100" href="index.htm"><area shape="rect" coords="263,1,384,96" href="../jxml/index.htm"><area shape="rect" coords="386,1,463,100" href="../jxslt/index.htm"><area shape="rect" coords="466,1,533,112" href="../xslt/index.htm"><area shape="rect" coords="535,-1,610,108" href="../schema/index.htm"><area shape="rect" coords="613,1,696,121" href="../pxml/index.htm">
      </map>

</body></html>