<html><head><title>The Evolution of XML (XML in a Nutshell, 2nd Edition)</title><link rel="stylesheet" type="text/css" href="../style/style1.css" />

<meta name="DC.Creator" content="Elliotte Rusty Harold and W. Scott Means" /><meta name="DC.Format" content="text/xml" scheme="MIME" /><meta name="DC.Language" content="en-US" /><meta name="DC.Publisher" content="O'Reilly &amp; Associates, Inc." /><meta name="DC.Source" scheme="ISBN" content="0-596-00292-0" /><meta name="DC.Subject.Keyword" content="stuff" /><meta name="DC.Title" content="XML in a Nutshell, 2nd Edition" /><meta name="DC.Type" content="Text.Monograph" />

</head><body bgcolor="#ffffff">

<img src="gifs/smbanner.gif" usemap="#banner-map" border="0" alt="Book Home" /><map name="banner-map"><area shape="rect" coords="1,-2,616,66" href="index.htm" alt="XML in a Nutshell" /><area shape="rect" coords="629,-11,726,25" href="jobjects/fsearch.htm" alt="Search this book" /></map>

<div class="navbar"><table width="684" border="0"><tr><td align="left" valign="top" width="228"><a href="ch01_03.htm"><img src="../gifs/txtpreva.gif" alt="Previous" border="0" /></a></td><td align="center" valign="top" width="228" /><td align="right" valign="top" width="228"><a href="ch02_01.htm"><img src="../gifs/txtnexta.gif" alt="Next" border="0" /></a></td></tr></table></div>



<h2 class="sect1">1.4. The Evolution of XML</h2>

<p>XML <a name="xmlnut2-IDXTERM-54" />is a descendant of SGML, the Standard
Generalized Markup <a name="IXT-1-239623" />
<a name="IXT-1-239624" />Language. The language that would
eventually become SGML was invented by Charles
<a name="IXT-1-239625" />F.
Goldfarb, Ed <a name="IXT-1-239626" />Mosher, and Ray <a name="IXT-1-239627" />Lorie at IBM in the 1970s and developed by
several hundred people around the world until its eventual adoption
as ISO standard 8879 in 1986. SGML was intended to solve many of the
same problems XML solves in much the same way XML solves them. It is
a semantic and structural markup language for text documents. SGML is
extremely powerful and achieved some success in the U.S. military and
government, in the aerospace sector, and in other domains that needed
ways of efficiently managing technical documents that were tens of
thousands of pages long.
</p>

<p>SGML's biggest success was
<a name="IXT-1-239628" />HTML, which is an SGML application.
However, HTML is just one SGML application. It does not have or offer
anywhere near the full power of SGML itself. Since it restricts
authors to a finite set of tags designed to describe web
pages--and describes them in a fairly presentationally oriented
way at that--it's really little more than a
traditional markup language that has been adopted by web browsers. It
doesn't lend itself to use beyond the single
application of web-page design. You would not use HTML to exchange
data between incompatible databases or to send updated product
catalogs to retailer sites, for example. HTML does web pages, and it
does them very well, but it only does web pages.
</p>

<p>SGML was the obvious choice for other applications that took
advantage of the Internet but were not simple web pages for humans to
read. The problem was that SGML is complicated--very, very
complicated. The official SGML specification is over 150 very
technical pages. It covers many special cases and unlikely scenarios.
It is so complex that almost no software has ever implemented it
fully. Programs that implemented or relied on different subsets of
SGML were often incompatible with each other. The special feature one
program considered essential would be considered extraneous fluff and
omitted by the next program.
</p>

<p>In 1996, Jon <a name="IXT-1-239629" />Bosak, Tim <a name="IXT-1-239630" />Bray, C. M.
<a name="IXT-1-239631" />Sperberg-McQueen, James
<a name="IXT-1-239632" />Clark, and
several others began work on a
"lite" version of SGML that
retained most of SGML's power while trimming a lot
of the features that had proven redundant, too complicated to
implement, confusing to end users, or simply not useful over the
previous 20 years of experience with SGML. The result, in February of
1998, was XML 1.0, and it was an immediate success. Many developers
who knew they needed a structural markup language but
hadn't been able to bring themselves to accept
SGML's complexity adopted XML whole-heartedly. It
was used in domains ranging from legal court filings to hog farming.
</p>

<p>However, XML 1.0 was just the beginning. The next standard out of the
gate was <em class="emphasis">Namespaces in XML</em>, an effort to allow
markup from different XML applications to be used in the same
document without conflicting. Thus a web page about books could have
a <tt class="literal">title</tt> element that referred to the title of the
page and <tt class="literal">title</tt> elements that referred to the title
of a book, and the two would not conflict.
</p>

<p><a name="IXT-1-239633" /> <a name="IXT-1-239634" />Next up was the
Extensible Stylesheet Language (XSL), an XML application for
transforming XML documents into a form that could be viewed in web
browsers. This soon split into XSL Transformations
(<a name="IXT-1-239635" />XSLT) and
<a name="IXT-1-239636" />XSL Formatting Objects (XSL-FO). XSLT
has become a general-purpose language for transforming one XML
document into another, whether for web-page display or some other
purpose. XSL-FO is an XML application for describing the layout of
both printed pages and web pages that rivals PostScript for its power
and expressiveness.
</p>

<p>However, XSL is not the only option for styling XML documents. The
<a name="IXT-1-239637" />
<a name="IXT-1-239638" />Cascading Style Sheets (CSS) language was
already in use for HTML documents when XML was invented, and it
proved to be a reasonable fit to XML as well. With the advent of
<a name="IXT-1-239639" /> <a name="IXT-1-239640" />CSS Level 2, the
<a name="IXT-1-239641" />W3C made styling XML documents an
explicit goal for CSS and gave it equal importance to HTML. The
<a name="IXT-1-239642" /> <a name="IXT-1-239643" />pre-existing
Document Style Sheet and Semantics Language (DSSSL) was also adopted
from its roots in the SGML world to style XML documents for print and
the Web.
</p>

<p>The <a name="IXT-1-239644" /> <a name="IXT-1-239645" />Extensible Linking
Language, XLink, began by defining more powerful linking constructs
that could connect XML documents in a hypertext network that made
HTML's <tt class="literal">A</tt> tag look like it is an
abbreviation for "anemic." It also
split into two separate standards: XLink for describing the
connections between documents and
<a name="IXT-1-239646" />XPointer for
addressing the individual parts of an XML document. At this point, it
was noticed that both XPointer and XSLT were developing fairly
sophisticated yet incompatible syntaxes to do exactly the same thing:
identify particular elements of an XML document. Consequently, the
addressing parts of both specifications were split off and combined
into a third specification,
<a name="IXT-1-239647" />XPath.
</p>

<p>Another piece of the puzzle was a uniform interface for accessing the
contents of the XML document from inside a Java, JavaScript, or C++
program. The simplest API was merely to treat the document as an
object that contained other objects. Indeed, work was already
underway inside and outside the W3C to define such a Document Object
Model (DOM) for HTML. Expanding this effort to cover XML was not
hard.
</p>

<p>Outside the W3C, David <a name="IXT-1-239648" />Megginson,
<a name="IXT-1-239649" />Peter
Murray-Rust, and other members of the <a href="xml-dev">xml-dev</a> mailing list recognized that third
party XML parsers, while all compatible in the documents they could
parse, were incompatible in their APIs. This led to the development
of the <a name="IXT-1-239650" />Simple API for XML, SAX. In 2000, SAX2 was
released to add greater configurability in parsing, namespace
support, and a cleaner API.
</p>

<p>One of the surprises during the evolution of XML was that developers
used it more for data-oriented structures such as serialized objects
and database records than for the narrative structures for which SGML
had traditionally been used. DTDs worked very well for narrative
structures, but had some limits when faced with the data-oriented
structures developers were actually creating. In particular, the lack
of data typing and the fact that DTDs were not themselves XML
documents were perceived as major problems. A number of companies and
individuals began working on <a name="IXT-1-239651" />
<a name="IXT-1-239652" />schema languages that addressed
these deficiencies. Many of these proposals were submitted to the
W3C, which formed a working group to try to merge the best parts of
all of these and come up with something greater than the sum of its
parts. In 2001, this group released Version 1.0 of the W3C XML Schema
Language. Unfortunately, they produced something overly complex and
burdensome. Consequently, several developers went back to the drawing
board to invent cleaner, simpler, more elegant schema languages,
including <a name="IXT-1-239653" />RELAX NG and
<a name="IXT-1-239654" />Schematron.
</p>

<p>Eventually, it became apparent that XML 1.0, XPath, the W3C XML
Schema Language, SAX, and DOM all had similar but subtly different
conceptual models of the structure of an XML document. For instance,
XPath and SAX don't consider CDATA sections to be
anything more than syntax sugar, but DOM does treat them differently
than plain-text nodes. Thus the W3C XML Core Working Group began work
on an <a name="IXT-1-239655" />XML Information Set that all these standards
could rely on and refer to.
</p>

<p>Development of extensions to the core XML specification continues.
Future directions include:
</p>

<dl>
<dt><i>XML Query Language</i></dt>
<dd>
<a name="IXT-1-239656" />
<a name="IXT-1-239657" />A
fourth-generation language for extracting information that meets
specified criteria from one or more XML documents
</p>
</dd>


<dt><i>Canonical XML</i></dt>
<dd>
<a name="IXT-1-239658" />
<a name="IXT-1-239659" />A
standard algorithm for determining whether two XML documents are the
same after insignificant details, such as whether single or double
quotes delimit attribute values, are accounted for
</p>
</dd>


<dt><i>XInclude</i></dt>
<dd>
<a name="IXT-1-239660" />A means of building
a single XML document out of multiple well-formed, potentially valid
XML documents and pieces thereof
</p>
</dd>


<dt><i>XML Signatures</i></dt>
<dd>
<a name="IXT-1-239661" />
<a name="IXT-1-239662" />A standard
for digitally signing XML documents, embedding those signatures in
XML documents, and authenticating the resulting documents
</p>
</dd>


<dt><i>XML Encryption</i></dt>
<dd>
<a name="IXT-1-239663" />
<a name="IXT-1-239664" />A standard
XML syntax for encrypted digital content, including portions of XML
documents
</p>
</dd>


<dt><i>SAX 2.1</i></dt>
<dd>
<a name="IXT-1-239665" />A set of small
extensions to SAX2 that provides extra information about an XML
document recommended by the Infoset, including the XML declaration
</p>
</dd>


<dt><i>DOM Level 3</i></dt>
<dd>
<a name="IXT-1-239666" />Many additional
classes, interfaces, and methods that build on top of DOM2 to provide
schema support, standard means of loading and saving XML documents,
and many more additional capabilities
</p>
</dd>


<dt><i>XFragment </i></dt>
<dd>
<a name="IXT-1-239667" />An effort to make
sense out of pieces of XML documents that may not be well-formed
documents when considered in isolation
</p>
</dd>

</dl>

<p>Doubtless, many new extensions of XML remain to be invented. XML has
proven itself a solid foundation for many <a name="IXTR3-99" />diverse
technologies.
</p>





<hr width="684" align="left" />
<div class="navbar"><table width="684" border="0"><tr><td align="left" valign="top" width="228"><a href="ch01_03.htm"><img src="../gifs/txtpreva.gif" alt="Previous" border="0" /></a></td><td align="center" valign="top" width="228"><a href="index.htm"><img src="../gifs/txthome.gif" alt="Home" border="0" /></a></td><td align="right" valign="top" width="228"><a href="ch02_01.htm"><img src="../gifs/txtnexta.gif" alt="Next" border="0" /></a></td></tr><tr><td align="left" valign="top" width="228">1.3. How XML Works</td><td align="center" valign="top" width="228"><a href="index/index.htm"><img src="../gifs/index.gif" alt="Book Index" border="0" /></a></td><td align="right" valign="top" width="228">2. XML Fundamentals</td></tr></table></div>
<hr width="684" align="left" />

<img src="../gifs/navbar.gif" usemap="#library-map" border="0" alt="Library Navigation Links" />
<p><p><font size="-1"><a href="copyrght.htm">Copyright &copy; 2002</a> O'Reilly &amp; Associates. All rights reserved.</font></p>

<map name="library-map">
<area shape="rect" coords="0,0,85,93" href="../index.htm"><area shape="rect" coords="85,0,180,98" href="../sax2/index.htm"><area shape="rect" coords="182,-1,261,100" href="index.htm"><area shape="rect" coords="263,1,384,96" href="../jxml/index.htm"><area shape="rect" coords="386,1,463,100" href="../jxslt/index.htm"><area shape="rect" coords="466,1,533,112" href="../xslt/index.htm"><area shape="rect" coords="535,-1,610,108" href="../schema/index.htm"><area shape="rect" coords="613,1,696,121" href="../pxml/index.htm">
</map>

</body></html>