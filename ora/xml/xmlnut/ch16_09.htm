<html><head><title>Controlling Type Derivation (XML in a Nutshell, 2nd Edition)</title><link rel="stylesheet" type="text/css" href="../style/style1.css" />

<meta name="DC.Creator" content="Elliotte Rusty Harold and W. Scott Means" /><meta name="DC.Format" content="text/xml" scheme="MIME" /><meta name="DC.Language" content="en-US" /><meta name="DC.Publisher" content="O'Reilly &amp; Associates, Inc." /><meta name="DC.Source" scheme="ISBN" content="0-596-00292-0" /><meta name="DC.Subject.Keyword" content="stuff" /><meta name="DC.Title" content="XML in a Nutshell, 2nd Edition" /><meta name="DC.Type" content="Text.Monograph" />

</head><body bgcolor="#ffffff">

<img src="gifs/smbanner.gif" usemap="#banner-map" border="0" alt="Book Home" /><map name="banner-map"><area shape="rect" coords="1,-2,616,66" href="index.htm" alt="XML in a Nutshell" /><area shape="rect" coords="629,-11,726,25" href="jobjects/fsearch.htm" alt="Search this book" /></map>

<div class="navbar"><table width="684" border="0"><tr><td align="left" valign="top" width="228"><a href="ch16_08.htm"><img src="../gifs/txtpreva.gif" alt="Previous" border="0" /></a></td><td align="center" valign="top" width="228" /><td align="right" valign="top" width="228"><a href="ch17_01.htm"><img src="../gifs/txtnexta.gif" alt="Next" border="0" /></a></td></tr></table></div>



<h2 class="sect1">16.9. Controlling Type Derivation</h2>

<p>Just <a name="xmlnut2-IDXTERM-1549" />as some
object-oriented programming languages allow the creator of an object
to dictate the limits on how an object can be extended, the schema
language allows schema authors to place restrictions on type
extension and restriction.
</p>

<a name="xmlnut2-CHP-16-SECT-9.1" /><div class="sect2">
<h3 class="sect2">16.9.1. Abstract Elements and Types</h3>

<p>The <tt class="literal">abstract</tt><a name="IXT-16-240189" /> <a name="IXT-16-240190" />
<a name="IXT-16-240191" /> attribute applies to type and
element declarations. When it is set to <tt class="literal">true</tt>, that
element or type cannot appear directly in an
<a name="IXT-16-240192" />instance document. If an element
is declared as abstract, a member of a substitution group based on
that element must appear. If a type is declared as abstract, no
element declared with that type may appear in an instance document.
</p>

</div>
<a name="xmlnut2-CHP-16-SECT-9.2" /><div class="sect2">
<h3 class="sect2">16.9.2. The Final Attribute</h3>

<p>Until <a name="IXT-16-240193" />
<a name="IXT-16-240194" />now, the schema has placed no
restrictions on how other types or elements could be derived from its
elements and types. The <tt class="literal">final</tt> attribute can be
added to a <a name="IXT-16-240195" />complex type definition and set to either
<tt class="literal">#all</tt>, <tt class="literal">extension</tt>, or
<tt class="literal">restriction</tt>. On a simple type definition it can be
set to <tt class="literal">#all</tt> or a list containing any combination
of the values <tt class="literal">list</tt>, <tt class="literal">union</tt>,
and/or <tt class="literal">restriction</tt>, in any order. When a type is
derived from another type that has the <tt class="literal">final</tt>
attribute set, the schema processor verifies that the desired
derivation is legal. For example, a <tt class="literal">final</tt>
attribute could prevent the <tt class="literal">physicalAddressType</tt>
type from being extended:
</p>

<blockquote><pre class="code">&lt;xs:complexType name="physicalAddressType" final="extension"&gt;</pre></blockquote>

<p>Since the main schema in <tt class="literal">address-schema.xsd</tt>
attempts to redefine the <tt class="literal">physicalAddressType</tt> in an
<tt class="literal">xs:redefine</tt> block, the schema processor generates
the following errors when it attempts to validate the instance
document:
</p>

<blockquote><pre class="code">ComplexType 'physicalAddressType': cos-ct-extends.1.1: Derivation by 
extension is forbidden by either the base type physicalAddressType_redefined 
or the schema.
Attribute "addr:latitude" must be declared for element type "physicalAddress".
Attribute "addr:longitude" must be declared for element type 
"physicalAddress".</pre></blockquote>

<p>The first error is a result of trying to extend a type that has been
marked to prevent extension. The next two errors occur because the
new, extended type was not parsed and applied to the content in the
document. Now that you've seen how this works,
removing this particular "feature"
from the <tt class="literal">physicalAddressType</tt> definition gets the
schema working again.
</p>

</div>
<a name="xmlnut2-CHP-16-SECT-9.3" /><div class="sect2">
<h3 class="sect2">16.9.3. Setting fixed Facets</h3>

<p>Similar to the <tt class="literal">final</tt> attribute, the
<tt class="literal">fixed</tt><a name="IXT-16-240196" />
<a name="IXT-16-240197" /> attribute is provided to mark
certain facets of simple types as immutable. Facets that have been
marked as <tt class="literal">fixed="true"</tt> cannot be overridden in
derived types.
</p>

</div>
<a name="xmlnut2-CHP-16-SECT-9.4" /><div class="sect2">
<h3 class="sect2">16.9.4. Uniqueness and Keys</h3>

<p>Perhaps <a name="xmlnut2-IDXTERM-1559" /> <a name="xmlnut2-IDXTERM-1560" />one of the most welcome features of
schemas is the ability to express more sophisticated relationships
between values in elements and attributes of a document. The
limitations of the primitive index capability provided by the XML 1.0
<tt class="literal">ID</tt> and <tt class="literal">IDREF</tt> attributes became
readily apparent as documents began to include multiple distinct
types of element data with complex data keys. The two facilities for
enforcing element uniqueness in schemas are the
<tt class="literal">xs:unique</tt> and <tt class="literal">xs:key</tt> elements.
</p>

<a name="xmlnut2-CHP-16-SECT-9.4.1" /><div class="sect3">
<h3 class="sect3">16.9.4.1. Forcing uniqueness</h3>

<p>The <tt class="literal">xs:unique</tt><a name="IXT-16-240198" /> element enforces element and attribute
value uniqueness for a specified set of elements in a schema
document. This uniqueness constraint is constructed in two phases.
First, the set of all of the elements to be evaluated is defined
using a restricted XPath expression. Next, the precise element and
attribute values that must be unique are defined.
</p>

<p>To illustrate, let's add logic to the address schema
to prevent the same phone number from appearing multiple times within
a given <tt class="literal">contacts</tt> element. To add this restriction,
the element declaration for <tt class="literal">contacts</tt> includes a
uniqueness constraint:
</p>

<blockquote><pre class="code">&lt;xs:element name="contacts" type="addr:contactsType" minOccurs="0"&gt;
  &lt;xs:unique name="phoneNums"&gt;
    &lt;xs:selector xpath="phone"/&gt;
    &lt;xs:field xpath="@addr:number"/&gt;
  &lt;/xs:unique&gt;
&lt;/xs:element&gt;</pre></blockquote>

<p>Now, if a given <tt class="literal">contacts</tt> element contains two
<tt class="literal">phone</tt> elements with the same value for their
<tt class="literal">number</tt> attributes, the schema processor will
generate an error.
</p>

<p>This is the basic algorithm that the schema processor follows to
enforce these restrictions:
</p>

<ol><li>
<p>Use the <tt class="literal">xpath</tt> attribute of the single
<tt class="literal">xs:selector</tt><a name="IXT-16-240199" /> element to build a set of all of the
elements to which the restriction will apply.
</p>
</li><li>
<p>Logically combine the values referenced by each
<tt class="literal">xs:field</tt><a name="IXT-16-240200" /> element for each selected element.
Compare the combinations of values that you get for each of the
elements.
</p>
</li><li>
<p>Report any conflicts as a validity error.</p>
</li></ol>


<a name="ch16-67-fm2xml" /><blockquote><b>TIP:</b> 
The very perceptive among you, are right: the
<tt class="literal">contactsType</tt> type definition only permits a single
<tt class="literal">phone</tt> child element. So this particular
restriction would not be very useful. Modifying the
<tt class="literal">contactsType</tt> definition to permit multiple child
elements is not difficult.
</p>
</blockquote>

</div>

<a name="xmlnut2-CHP-16-SECT-9.4.2" /><div class="sect3">
<h3 class="sect3">16.9.4.2. Keys and references</h3>

<p>The <tt class="literal">xs:key</tt><a name="xmlnut2-IDXTERM-1564" />
element is closely <a name="xmlnut2-IDXTERM-1565" /> <a name="xmlnut2-IDXTERM-1566" />related to the
<tt class="literal">xs:unique</tt> element. Logically, the
<tt class="literal">xs:key</tt> element functions exactly the same way the
<tt class="literal">xs:unique</tt> element does. It uses the
<tt class="literal">xs:selector</tt> element to define a set of elements it
applies to, then one or more <tt class="literal">xs:field</tt> elements are
used to define which values make up this particular key. The major
difference is that, in the case of the <tt class="literal">xs:key</tt>
element, uniqueness is not the only desired property of these
elements. The goal of the <tt class="literal">xs:key</tt> element is to
define a set of elements that can be referenced using the
<tt class="literal">xs:keyref</tt><a name="IXT-16-240201" /> element. Having created a fairly
full-featured <tt class="literal">address</tt> element, creating a
collection of these elements called <tt class="literal">addressBook</tt>
would be an excellent way to show this feature in operation.
</p>

<p>First, the new <tt class="literal">addressBook</tt> element is declared,
including a key based on the <tt class="literal">ssn</tt> attribute of each
<tt class="literal">address</tt> entry:
</p>

<blockquote><pre class="code">&lt;xs:element name="addressBook"&gt;
  &lt;xs:complexType&gt;
    &lt;xs:sequence maxOccurs="unbounded"&gt;
      &lt;xs:element ref="addr:address"/&gt;
    &lt;/xs:sequence&gt;
  &lt;/xs:complexType&gt;
  &lt;xs:key name="ssnKey"&gt;
    &lt;xs:selector xpath="addr:address"/&gt;
    &lt;xs:field xpath="@addr:ssn"/&gt;
  &lt;/xs:key&gt;
 &lt;/xs:element&gt;</pre></blockquote>

<p>Now that the key is defined, you can add a new element to the
<tt class="literal">address</tt> element declaration that connects a
particular address record with another record. For example, to list
references to the children of a particular person in the address
book, add the following declaration for a <tt class="literal">kids</tt>
element:
</p>

<blockquote><pre class="code">&lt;xs:element name="address"&gt;
  &lt;xs:complexType&gt;
    &lt;xs:sequence&gt;
      &lt;xs:element name="fullName"&gt;
. . .
      &lt;/xs:element&gt;
      &lt;xs:element name="kids" minOccurs="0"&gt;
        &lt;xs:complexType&gt;
          &lt;xs:sequence maxOccurs="unbounded"&gt;
            &lt;xs:element name="kid"&gt;
              &lt;xs:complexType&gt;
                &lt;xs:attribute name="ssn" type="addr:ssn"/&gt;
              &lt;/xs:complexType&gt;
            &lt;/xs:element&gt;
          &lt;/xs:sequence&gt;
        &lt;/xs:complexType&gt;
      &lt;/xs:element&gt;
. . .
    &lt;/xs:sequence&gt;
  &lt;xs:attributeGroup ref="addr:nationality"/&gt;
  &lt;xs:attribute name="ssn" type="addr:ssn"/&gt;
  &lt;xs:anyAttribute namespace="http://www.w3.org/1999/xlink"
      processContents="skip"/&gt;
  &lt;/xs:complexType&gt;
 &lt;/xs:element&gt;</pre></blockquote>

<p>Now, an <tt class="literal">xs:keyref</tt> element in the
<tt class="literal">addressBook</tt> element declaration enforces the
constraint that the <tt class="literal">ssn</tt> attribute of a particular
<tt class="literal">kid</tt> element must match an <tt class="literal">ssn</tt>
attribute on an <tt class="literal">address</tt> element in the current
document:
</p>

<blockquote><pre class="code">&lt;xs:element name="addressBook"&gt;
. . .
  &lt;xs:key name="ssnKey"&gt;
    &lt;xs:selector xpath="addr:address"/&gt;
    &lt;xs:field xpath="@addr:ssn"/&gt;
  &lt;/xs:key&gt;
  &lt;xs:keyref name="kidSSN" refer="addr:ssnKey"&gt;
    &lt;xs:selector xpath="addr:address/kids/kid"/&gt;
    &lt;xs:field xpath="@addr:ssn"/&gt;
  &lt;/xs:keyref&gt;
 &lt;/xs:element&gt;</pre></blockquote>

<p>Now, if any <tt class="literal">kid</tt> element in an instance document
refers to a nonexistent <tt class="literal">address</tt> record, the schema
validat<a name="IXTR3-203" />
<a name="IXTR3-204" />or
<a name="IXTR3-205" />will <a name="IXTR3-206" /> <a name="IXTR3-207" />generate <a name="IXTR3-208" />an <a name="IXTR3-209" />error.
</p>



</div>
</div>


<hr width="684" align="left" />
<div class="navbar"><table width="684" border="0"><tr><td align="left" valign="top" width="228"><a href="ch16_08.htm"><img src="../gifs/txtpreva.gif" alt="Previous" border="0" /></a></td><td align="center" valign="top" width="228"><a href="index.htm"><img src="../gifs/txthome.gif" alt="Home" border="0" /></a></td><td align="right" valign="top" width="228"><a href="ch17_01.htm"><img src="../gifs/txtnexta.gif" alt="Next" border="0" /></a></td></tr><tr><td align="left" valign="top" width="228">16.8. Allowing Any Content</td><td align="center" valign="top" width="228"><a href="index/index.htm"><img src="../gifs/index.gif" alt="Book Index" border="0" /></a></td><td align="right" valign="top" width="228">17. Programming Models</td></tr></table></div>
<hr width="684" align="left" />

<img src="../gifs/navbar.gif" usemap="#library-map" border="0" alt="Library Navigation Links" />
<p><p><font size="-1"><a href="copyrght.htm">Copyright &copy; 2002</a> O'Reilly &amp; Associates. All rights reserved.</font></p>

<map name="library-map">
<area shape="rect" coords="0,0,85,93" href="../index.htm"><area shape="rect" coords="85,0,180,98" href="../sax2/index.htm"><area shape="rect" coords="182,-1,261,100" href="index.htm"><area shape="rect" coords="263,1,384,96" href="../jxml/index.htm"><area shape="rect" coords="386,1,463,100" href="../jxslt/index.htm"><area shape="rect" coords="466,1,533,112" href="../xslt/index.htm"><area shape="rect" coords="535,-1,610,108" href="../schema/index.htm"><area shape="rect" coords="613,1,696,121" href="../pxml/index.htm">
</map>

</body></html>