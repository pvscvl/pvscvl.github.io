<html><head><title>Authoring Compound Documents with Modular XHTML (XML in a Nutshell, 2nd Edition)</title><link rel="stylesheet" type="text/css" href="../style/style1.css" />

<meta name="DC.Creator" content="Elliotte Rusty Harold and W. Scott Means" /><meta name="DC.Format" content="text/xml" scheme="MIME" /><meta name="DC.Language" content="en-US" /><meta name="DC.Publisher" content="O'Reilly &amp; Associates, Inc." /><meta name="DC.Source" scheme="ISBN" content="0-596-00292-0" /><meta name="DC.Subject.Keyword" content="stuff" /><meta name="DC.Title" content="XML in a Nutshell, 2nd Edition" /><meta name="DC.Type" content="Text.Monograph" />

</head><body bgcolor="#ffffff">

<img src="gifs/smbanner.gif" usemap="#banner-map" border="0" alt="Book Home" /><map name="banner-map"><area shape="rect" coords="1,-2,616,66" href="index.htm" alt="XML in a Nutshell" /><area shape="rect" coords="629,-11,726,25" href="jobjects/fsearch.htm" alt="Search this book" /></map>

<div class="navbar"><table width="684" border="0"><tr><td align="left" valign="top" width="228"><a href="ch07_02.htm"><img src="../gifs/txtpreva.gif" alt="Previous" border="0" /></a></td><td align="center" valign="top" width="228" /><td align="right" valign="top" width="228"><a href="ch07_04.htm"><img src="../gifs/txtnexta.gif" alt="Next" border="0" /></a></td></tr></table></div>



<h2 class="sect1">7.3. Authoring Compound Documents with Modular XHTML</h2>

<p><a name="IXT-7-239274" />XHTML 1.1 <a name="xmlnut2-IDXTERM-639" />divides the <a name="xmlnut2-IDXTERM-640" />three XHTML DTDs into individual
<a name="xmlnut2-IDXTERM-641" />modules. <a name="xmlnut2-IDXTERM-642" />Parameter entities connect the modules
by including or leaving out particular modules. Modules include:
</p>

<dl>
<dt><i>Structure Module, <tt class="literal">%xhtml-struct.module;</tt></i></dt>
<dd>
<a name="IXT-7-239275" /><a name="IXT-7-239276" />The
absolute bare minimum of elements needed for an HTML document:
<tt class="literal">html</tt>, <tt class="literal">head</tt>,
<tt class="literal">title</tt>, and <tt class="literal">body</tt>
</p>
</dd>


<dt><i>Text Module, <tt class="literal">%xhtml-text.module;</tt></i></dt>
<dd>
<a name="IXT-7-239277" /><a name="IXT-7-239278" />The
basic elements that contain text and other inline elements:
<tt class="literal">abbr</tt>, <tt class="literal">acronym</tt>,
<tt class="literal">address</tt>, <tt class="literal">blockquote</tt>,
<tt class="literal">br</tt>, <tt class="literal">cite</tt>,
<tt class="literal">code</tt>, <tt class="literal">dfn</tt>,
<tt class="literal">div</tt>, <tt class="literal">em</tt>, <tt class="literal">h1</tt>,
<tt class="literal">h2</tt>, <tt class="literal">h3</tt>, <tt class="literal">h4</tt>,
<tt class="literal">h5</tt>, <tt class="literal">h6</tt>, <tt class="literal">kbd</tt>,
<tt class="literal">p</tt>, <tt class="literal">pre</tt>, <tt class="literal">q</tt>,
<tt class="literal">samp</tt>, <tt class="literal">span</tt>,
<tt class="literal">strong</tt>, and <tt class="literal">var</tt>
</p>
</dd>


<dt><i>Hypertext Module, <tt class="literal">%xhtml-hypertext.module;</tt></i></dt>
<dd>
<a name="IXT-7-239279" />Elements
<a name="IXT-7-239280" />used
for linking, that is, the <tt class="literal">a</tt> element
</p>
</dd>


<dt><i>List Module, <tt class="literal">%xhtml-list.module;</tt></i></dt>
<dd>
<a name="IXT-7-239281" /><a name="IXT-7-239282" />Elements
used for the three kinds of lists: <tt class="literal">dl</tt>,
<tt class="literal">dt</tt>, <tt class="literal">dd</tt>, <tt class="literal">ul</tt>,
<tt class="literal">ol</tt>, and <tt class="literal">li</tt>
</p>
</dd>


<dt><i>Applet Module, <tt class="literal">%xhtml-applet.module;</tt></i></dt>
<dd>
<a name="IXT-7-239283" />Elements
<a name="IXT-7-239284" />needed
for Java applets: <tt class="literal">applet</tt> and
<tt class="literal">param</tt>
</p>
</dd>


<dt><i>Presentation Module, <tt class="literal">%xhtml-pres.module;</tt></i></dt>
<dd>
<a name="IXT-7-239285" /><a name="IXT-7-239286" />Presentation
oriented markup, that is, the <tt class="literal">b</tt>,
<tt class="literal">big</tt>, <tt class="literal">hr</tt>, <tt class="literal">i</tt>,
<tt class="literal">small</tt>, <tt class="literal">sub</tt>,
<tt class="literal">sup</tt>, and <tt class="literal">tt</tt> elements
</p>
</dd>


<dt><i>Edit Module, <tt class="literal">%xhtml-edit.module;</tt></i></dt>
<dd>
<a name="IXT-7-239287" />Elements
<a name="IXT-7-239288" />for
revision tracking: <tt class="literal">del</tt> and <tt class="literal">ins</tt>
</p>
</dd>


<dt><i>Bi-directional Text Module, <tt class="literal">%xhtml-bdo.module;</tt></i></dt>
<dd>
<a name="IXT-7-239289" /><a name="IXT-7-239290" />An
indication of directionality when text in left-to-right languages,
like English and French, is mixed with text in right-to-left
languages, like Hebrew and Arabic
</p>
</dd>


<dt><i>Basic Forms Module, <tt class="literal">%xhtml-basic-form.module;</tt></i></dt>
<dd>
<a name="IXT-7-239291" />Forms
<a name="IXT-7-239292" />as
defined in HTML 3.2 using the <tt class="literal">form</tt>,
<tt class="literal">input</tt>, <tt class="literal">select</tt>,
<tt class="literal">option</tt>, and <tt class="literal">textarea</tt> elements
</p>
</dd>


<dt><i>Forms Module, <tt class="literal">%xhtml-form.module;</tt></i></dt>
<dd>
<a name="IXT-7-239293" />Forms
<a name="IXT-7-239294" />as
defined in HTML 4.0 using the <tt class="literal">form</tt>,
<tt class="literal">input</tt>, <tt class="literal">select</tt>,
<tt class="literal">option</tt>, <tt class="literal">textarea</tt>,
<tt class="literal">button</tt>, <tt class="literal">fieldset</tt>,
<tt class="literal">label</tt>, <tt class="literal">legend</tt>, and
<tt class="literal">optgroup</tt> elements
</p>
</dd>


<dt><i>Basic Tables Module, <tt class="literal">%xhtml-basic-table.module;</tt></i></dt>
<dd>
<a name="IXT-7-239295" />Minimal
<a name="IXT-7-239296" />table
support including only the <tt class="literal">table</tt>,
<tt class="literal">caption</tt>, <tt class="literal">th</tt>,
<tt class="literal">tr</tt>, and <tt class="literal">td</tt> elements
</p>
</dd>


<dt><i>Tables Module, <tt class="literal">%xhtml-table.module;</tt></i></dt>
<dd>
<a name="IXT-7-239297" />More <a name="IXT-7-239298" />complete
table support including not only the <tt class="literal">table</tt>,
<tt class="literal">caption</tt>, <tt class="literal">th</tt>,
<tt class="literal">tr</tt>, and <tt class="literal">td</tt> elements, but also
the <tt class="literal">col</tt>, <tt class="literal">colgroup</tt>,
<tt class="literal">tbody</tt>, <tt class="literal">thead</tt>, and
<tt class="literal">tfoot</tt> elements
</p>
</dd>


<dt><i>Image Module, <tt class="literal">%xhtml-image.module;</tt></i></dt>
<dd>
<a name="IXT-7-239299" />The
<tt class="literal">img</tt><a name="IXT-7-239300" />
element
</p>
</dd>


<dt><i>Client-side Image Map Module, <tt class="literal">%xhtml-csismap.module;</tt></i></dt>
<dd>
<a name="IXT-7-239301" />The
<tt class="literal">map</tt><a name="IXT-7-239302" />
and <tt class="literal">area</tt> elements, as well as extra attributes for
several other elements needed to support client-side image maps
</p>
</dd>


<dt><i>Server-side Image Map Module, <tt class="literal">%xhtml-ssismap.module;</tt></i></dt>
<dd>
<a name="IXT-7-239303" /><a name="IXT-7-239304" />Doesn't
provide any new elements, but adds the <tt class="literal">ismap</tt>
attribute to the <tt class="literal">img</tt> element
</p>
</dd>


<dt><i>Object Module, <tt class="literal">%xhtml-object.module;</tt></i></dt>
<dd>
<a name="IXT-7-239305" />The
<tt class="literal">object</tt><a name="IXT-7-239306" />
element used to embed executable content like Java applets and
ActiveX controls in web pages
</p>
</dd>


<dt><i>Param Module, <tt class="literal">%xhtml-param.module;</tt></i></dt>
<dd>
<a name="IXT-7-239307" /><a name="IXT-7-239308" />Used
to pass parameters from web pages to their embedded executable
content like Java applets and ActiveX controls
</p>
</dd>


<dt><i>Frames Module, <tt class="literal">%xhtml-frames.module;</tt></i></dt>
<dd>
<a name="IXT-7-239309" />The <a name="IXT-7-239310" />elements
needed to implement frames including <tt class="literal">frame</tt>,
<tt class="literal">frameset</tt>, and <tt class="literal">noframes</tt>
</p>
</dd>


<dt><i>Iframe Module <tt class="literal">%xhtml-iframe.mod;</tt></i></dt>
<dd>
<a name="IXT-7-239311" />The
<tt class="literal">iframe</tt><a name="IXT-7-239312" />
element used for inline frames
</p>
</dd>


<dt><i>Intrinsic Events, <tt class="literal">%xhtml-events.module;</tt></i></dt>
<dd>
<a name="IXT-7-239313" />Attributes
<a name="IXT-7-239314" />to
support scripting like <tt class="literal">onsubmit</tt> and
<tt class="literal">onfocus</tt> that are attached to elements declared in
other modules
</p>
</dd>


<dt><i>Metainformation Module, <tt class="literal">%xhtml-meta.module;</tt></i></dt>
<dd>
<a name="IXT-7-239315" />The
<tt class="literal">meta</tt><a name="IXT-7-239316" />
element used in headers
</p>
</dd>


<dt><i>Scripting Module, <tt class="literal">%xhtml-script.module;</tt></i></dt>
<dd>
<a name="IXT-7-239317" />Elements
<a name="IXT-7-239318" />that
support JavaScript and VBScript: <tt class="literal">script</tt> and
<tt class="literal">noscript</tt>
</p>
</dd>


<dt><i>Stylesheet Module, <tt class="literal">%xhtml-style.module;</tt></i></dt>
<dd>
<a name="IXT-7-239319" />The
<tt class="literal">style</tt><a name="IXT-7-239320" />
element used to define Cascading Style Sheets
</p>
</dd>


<dt><i>Link Module, <tt class="literal">%xhtml-link.module;</tt></i></dt>
<dd>
<a name="IXT-7-239321" />The
<tt class="literal">link</tt><a name="IXT-7-239322" />
element that specifies relationships to various external documents
such as translations, glossaries, and previous and next pages
</p>
</dd>


<dt><i>Base Module, <tt class="literal">%xhtml-base.module;</tt></i></dt>
<dd>
<a name="IXT-7-239323" />The
<tt class="literal">base</tt><a name="IXT-7-239324" />
element that specifies a URL against which relative URLs are resolved
</p>
</dd>


<dt><i>Target Module, <tt class="literal">%xhtml-target.module;</tt></i></dt>
<dd>
<a name="IXT-7-239325" />The
<tt class="literal">target</tt><a name="IXT-7-239326" />
attribute used to specify the destination frame or window of a link
</p>
</dd>


<dt><i>Style Attribute Module, <tt class="literal">%xhtml-inlstyle.module;</tt></i></dt>
<dd>
<a name="IXT-7-239327" />The
<tt class="literal">style</tt><a name="IXT-7-239328" />
attribute used to attach CSS styles to individual elements in the
document
</p>
</dd>


<dt><i>Name Identification Module, <tt class="literal">%xhtml-nameident.module;</tt></i></dt>
<dd>
<a name="IXT-7-239329" />The
<tt class="literal">name</tt><a name="IXT-7-239330" />
attribute that is a deprecated earlier version of the
<tt class="literal">id</tt> attribute
</p>
</dd>


<dt><i>Legacy Module, <tt class="literal">%xhtml-legacy.module;</tt></i></dt>
<dd>
<a name="IXT-7-239331" />Deprecated
<a name="IXT-7-239332" />elements
and attributes including the <tt class="literal">basefont</tt>,
<tt class="literal">center</tt>, <tt class="literal">font</tt>,
<tt class="literal">s</tt>, <tt class="literal">strike</tt>, and
<tt class="literal">u</tt> elements
</p>
</dd>


<dt><i>Ruby Module, <tt class="literal">%xhtml11-ruby.module;</tt></i></dt>
<dd>
<a name="IXT-7-239333" />The
<tt class="literal">ruby</tt><a name="IXT-7-239334" />,
<tt class="literal">rbc</tt>, <tt class="literal">rtc</tt>,
<tt class="literal">rb</tt>, <tt class="literal">rt</tt>, and
<tt class="literal">rp</tt> elements used in East Asian text to place small
amounts of text next to the body text, <a name="IXTR3-51" />generally <a name="IXTR3-52" />indicating <a name="IXTR3-53" />pronunciation
</p>
</dd>

</dl>

<a name="xmlnut2-CHP-7-SECT-3.1" /><div class="sect2">
<h3 class="sect2">7.3.1. Mixing XHTML into Your Applications</h3>

<p>The <a name="xmlnut2-IDXTERM-706" />advantage to
dividing HTML into all these different modules is that you can pick
and choose the pieces you want. If your documents use tables, you
include the table module. If your documents don't
use tables, then you can leave it out. You get only the functionality
you actually need.
</p>

<p>For example, let's suppose you're
designing a DTD for a catalog. Each item in the catalog is a
<tt class="literal">catalog_entry</tt> element. Each
<tt class="literal">catalog_entry</tt> contains a <tt class="literal">name</tt>,
a <tt class="literal">price</tt>, an <tt class="literal">item_number</tt>, a
<tt class="literal">color</tt>, a <tt class="literal">size</tt>, and various
other common elements you're likely to find in
catalogs. Furthermore, each <tt class="literal">catalog_entry</tt> contains
a <tt class="literal">description</tt> of the item. The
<tt class="literal">description</tt> contains formatted narrative text. In
other words, it looks something like this:
</p>

<blockquote><pre class="code">  &lt;catalog_entry&gt;
    &lt;name&gt;Aluminum Duck Drainer&lt;/name&gt;
    &lt;price&gt;34.99&lt;/price&gt;
    &lt;item_number&gt;54X8&lt;/item_number&gt;
    &lt;color&gt;silver&lt;/color&gt;
    &lt;size&gt;XL&lt;/size&gt;
<b class="emphasis-bold">    &lt;description&gt;</b>
<b class="emphasis-bold">      &lt;p&gt;</b>
<b class="emphasis-bold">       This sturdy &lt;strong&gt;silver&lt;/strong&gt; colored</b>
<b class="emphasis-bold">       sink stopper dignifies the &lt;em&gt;finest</b>
<b class="emphasis-bold">       kitchens&lt;/em&gt;. It makes a great gift for</b>
<b class="emphasis-bold">      &lt;/p&gt;</b>
<b class="emphasis-bold">      &lt;ul&gt;</b>
<b class="emphasis-bold">        &lt;li&gt;Christmas&lt;/li&gt;</b>
<b class="emphasis-bold">        &lt;li&gt;Birthdays&lt;/li&gt;</b>
<b class="emphasis-bold">        &lt;li&gt;Mother's Day&lt;/li&gt;</b>
<b class="emphasis-bold">      &lt;/ul&gt;</b>
<b class="emphasis-bold">      &lt;p&gt;and all other occasions!&lt;/p&gt;</b>
<b class="emphasis-bold">    &lt;/description&gt;</b>
  &lt;/catalog_entry&gt;</pre></blockquote>

<p>It's easy enough to write this markup. The tricky
part is validating it. Rather than reinventing a complete DTD to
describe all the formatting that's needed in
straightforward narrative descriptions, you can reuse XHTML. The
XHTML 1.1 DTD <a name="xmlnut2-IDXTERM-707" />makes heavy use of parameter
entity references to define content specifications and attribute
lists for the different elements. Three <a name="IXT-7-239335" />entity references are of particular note:
</p>

<dl>
<dt><tt class="literal">%Inline.mix;</tt></dt>
<dd>
<a name="IXT-7-239336" />A
choice containing all the elements that don't
generally require a line break such as <tt class="literal">em</tt>,
<tt class="literal">a</tt>, and <tt class="literal">q</tt>. That is, it resolves
to:
</p>


<blockquote><pre class="code">br | span | em | strong | dfn | code | samp | kbd | var | cite | abbr | 
acronym | q | tt | i | b | big | small | sub | sup | bdo | a | img | map 
| applet | ruby | input | select | textarea | label | button | ins | del 
| script | noscript</pre></blockquote>
</dd>


<dt><tt class="literal">%Block.mix;</tt></dt>
<dd>
<a name="IXT-7-239337" />A choice containing all the
elements that generally require a line break like
<tt class="literal">p</tt>, <tt class="literal">blockquote</tt>, and
<tt class="literal">ul</tt>. That is, it resolves to:
</p>

<blockquote><pre class="code">h1 | h2 | h3| h4 | h5 | h6| ul| ol| dl| p | div | pre| blockquote 
| address | hr | table | form | fieldset | ins | del | script | noscript</pre></blockquote></dd>


<dt><tt class="literal">%Flow.mix;</tt></dt>
<dd>
<a name="IXT-7-239338" />A choice containing both of the
previous; that is, it resolves to:
</p>


<blockquote><pre class="code">h1 | h2 | h3 | h4 | h5 | h6 | ul | ol | dl | p | div | pre | blockquote 
| address | hr | table | form | fieldset | br | span | em | strong | dfn 
| code | samp | kbd | var | cite | abbr | acronym | q | tt | i | b | big 
| small | sub | sup | bdo | a | img | map | applet | ruby | input | 
select | textarea | label | button | ins | del | script | noscript</pre></blockquote>
</dd>

</dl>

<p>You can declare that the <tt class="literal">description</tt> element
contains essentially any legal XHTML fragment, like this:
</p>

<blockquote><pre class="code">&lt;!ENTITY % xhtml PUBLIC "-//W3C//DTD XHTML 1.1//EN" "xhtml11.dtd"&gt;
%xhtml;
&lt;!ELEMENT description (#PCDATA | %Flow.mix;)*&gt;</pre></blockquote>

<p>If you wanted to require <tt class="literal">description</tt> to contain
only block elements at the top level, you'd instead
declare it like this:
</p>

<blockquote><pre class="code">&lt;!ENTITY % xhtml PUBLIC "-//W3C//DTD XHTML 1.1//EN" "xhtml11.dtd"&gt;
%xhtml;
&lt;!ELEMENT description ((%Block.mix;)*)&gt;</pre></blockquote>

<p>The first two lines import the <a name="IXT-7-239339" />XHTML driver DTD from a
relative URL. You can get this DTD and the other local files it
depends on from the zip archive at <a href="../../../../../../www.w3.org/TR/xhtml11/xhtml11.zip">http://www.w3.org/TR/xhtml11/xhtml11.zip</a>. The
second line uses an entity reference defined in that DTD to set the
content specification for the <tt class="literal">description</tt> element.
</p>



<a name="ch07-26-fm2xml" /><blockquote><b>TIP:</b> 
The XHTML 1.1 driver DTD imports modules from two other W3C
specifications, <a name="IXT-7-239340" />Modularization of XHTML
(<a href="../../../../../../www.w3.org/TR/xhtml-modularization">http://www.w3.org/TR/xhtml-modularization</a>)
and <a name="IXT-7-239341" />Ruby Annotation (<a href="../../../../../../www.w3.org/TR/ruby">http://www.w3.org/TR/ruby</a>), using absolute
URLs that point to the W3C's web site. If
you're not reliably connected to the Internet at
high speed, you might want to use the flat version of this DTD,
<em class="filename">xhtml11-flat.dtd</em></tt>, instead. This bundles all the
different modules in a single file. </p>
</blockquote>
<p>Unfortunately, this goes a
little too far. It includes not only the pieces of HTML you want,
such as <tt class="literal">p</tt>, <tt class="literal">em</tt>, and
<tt class="literal">ul</tt>, but also a lot of elements you
don't want in a printed catalog, such as
<tt class="literal">a</tt>, <tt class="literal">applet</tt>,
<tt class="literal">map</tt>, and a lot more. However, you can omit these.
The main XHTML DTD imports each module inside an
<tt class="literal">INCLUDE</tt>/<tt class="literal">IGNORE</tt> block, such as
this one for the hypertext module: </p>


<blockquote><pre class="code">&lt;!-- Hypertext Module (required) ................................. --&gt;
&lt;!ENTITY % xhtml-hypertext.module "INCLUDE" &gt;
&lt;![%xhtml-hypertext.module;[
&lt;!ENTITY % xhtml-hypertext.mod
 PUBLIC "-//W3C//ELEMENTS XHTML Hypertext 1.0//EN"
   "http://www.w3.org/TR/xhtml-modularization/DTD/xhtml-hypertext-1.mod" &gt;
%xhtml-hypertext.mod;]]&gt;</pre></blockquote>

<p>If the <tt class="literal">%xhtml-hypertext.module;</tt> parameter entity
reference has previously been defined as <tt class="literal">IGNORE</tt>
instead of <tt class="literal">INCLUDE</tt>, that declaration takes
precedence; all the elements and attributes defined in the hypertext
module (specifically, the <tt class="literal">a</tt> element) are left out
of the resulting DTD.
</p>

<p>Let's say you just want the Structure, Basic Text,
and List modules. Then you use a driver DTD that redefines the
parameter entity references for the other modules as
<tt class="literal">IGNORE</tt>. <a href="ch07_03.htm">Example 7-4</a> demonstrates.
</p>

<a name="xmlnut2-CHP-7-EX-4" /><div class="example">
<h4 class="objtitle">Example 7-4. A catalog DTD that uses basic XHTML but omits a lot of elements </h4>
<a name="IXTR3-54" /><a name="IXTR3-55" /><blockquote><pre class="code">&lt;!ELEMENT catalog (catalog_entry*)&gt;
&lt;!ELEMENT catalog_entry (name, price, item_number, color, size, description)&gt;
&lt;!ELEMENT name (#PCDATA)&gt;
&lt;!ELEMENT size (#PCDATA)&gt;
&lt;!ELEMENT price (#PCDATA)&gt;
&lt;!ELEMENT item_number (#PCDATA)&gt;
&lt;!ELEMENT color (#PCDATA)&gt;

&lt;!-- throw away the modules we don't need --&gt;
&lt;!ENTITY % xhtml-hypertext.module "IGNORE" &gt;
&lt;!ENTITY % xhtml-ruby.module      "IGNORE" &gt;
&lt;!ENTITY % xhtml-edit.module      "IGNORE" &gt;
&lt;!ENTITY % xhtml-pres.module      "IGNORE" &gt;
&lt;!ENTITY % xhtml-applet.module    "IGNORE" &gt;
&lt;!ENTITY % xhtml-param.module     "IGNORE" &gt;
&lt;!ENTITY % xhtml-bidi.module      "IGNORE" &gt;
&lt;!ENTITY % xhtml-form.module      "IGNORE" &gt;
&lt;!ENTITY % xhtml-table.module     "IGNORE" &gt;
&lt;!ENTITY % xhtml-image.module     "IGNORE" &gt;
&lt;!ENTITY % xhtml-csismap.module   "IGNORE" &gt;
&lt;!ENTITY % xhtml-ssismap.module   "IGNORE" &gt;
&lt;!ENTITY % xhtml-meta.module      "IGNORE" &gt;
&lt;!ENTITY % xhtml-script.module    "IGNORE" &gt;
&lt;!ENTITY % xhtml-style.module     "IGNORE" &gt;
&lt;!ENTITY % xhtml-link.module      "IGNORE" &gt;
&lt;!ENTITY % xhtml-base.module      "IGNORE" &gt;

&lt;!-- import the XHTML DTD, at least those parts we aren't ignoring.
     You will probably need to change the system ID to point to
     whatever directory you've stored the DTD in.
--&gt;
&lt;!ENTITY % xhtml11.mod PUBLIC "-//W3C//DTD XHTML 1.1//EN"
                              "xhtml11/DTD/xhtml11.dtd"&gt;
%xhtml11.mod;
 
&lt;!ELEMENT description ( %Block.mix; )+&gt; </pre></blockquote>
</div>

</div>
<a name="xmlnut2-CHP-7-SECT-3.2" /><div class="sect2">
<h3 class="sect2">7.3.2. Mixing Your Applications into XHTML</h3>

<p>An <a name="IXT-7-239342" />even more important feature
of Modular XHTML is the option to add new elements that HTML
doesn't support. For instance, to include SVG
pictures in your documents, you just have to import the SVG DTD and
redefine the <tt class="literal">Misc.extra</tt> parameter entity to allow
the SVG root element <tt class="literal">svg</tt>. (This only lets you
validate XHTML document that contain SVG markup. It
doesn't magically give the browser the ability to
render these pictures.) You accomplish this by redefining any of
three <a name="IXT-7-239343" />parameter entity references:
</p>

<dl>
<dt><tt class="literal">%Inline.extra;</tt></dt>
<dd>
<a name="IXT-7-239344" />Place
the root elements of your application here if you want them to be
added to the content specifications of inline elements such as
<tt class="literal">span</tt>, <tt class="literal">em</tt>,
<tt class="literal">code</tt>, and <tt class="literal">textarea</tt>.
</p>
</dd>


<dt><tt class="literal">%Block.extra;</tt></dt>
<dd>
<a name="IXT-7-239345" />Place
the root elements of your application here if you want them to be
added to the content specifications of block elements such as
<tt class="literal">div</tt>, <tt class="literal">h1</tt>, <tt class="literal">p</tt>,
and <tt class="literal">pre</tt>.
</p>
</dd>


<dt><tt class="literal">%Misc.extra;</tt></dt>
<dd>
<a name="IXT-7-239346" />Place the root elements of your
application here if you want them to be added to the content
specifications of both block and inline elements.
</p>
</dd>

</dl>

<p>The definition of each of these parameter entities should be a list
of the elements you want to add to the content specification
separated by vertical bars and beginning with a vertical bar. For
instance, to include MathML equations as both inline and block
elements, you'd import the MathML DTD and redefine
the <tt class="literal">Misc.extra</tt> parameter entity to include the
MathML root element <tt class="literal">math</tt> like this:
</p>

<blockquote><pre class="code">&lt;!ENTITY % Misc.extra "| math"&gt;</pre></blockquote>

<p>If you wanted to allow block-level MathML equations and SVG pictures,
you'd import their respective DTDs and redefine the
<tt class="literal">Block.extra</tt> parameter entity like this:
</p>

<blockquote><pre class="code">&lt;!ENTITY % Block.extra "| math | svg"&gt;</pre></blockquote>

<p>Order is important here. The MathML DTD and the
<tt class="literal">Block.extra</tt> declaration both have to be parsed
before the XHTML DTD is parsed. <a href="ch07_03.htm">Example 7-5</a>
demonstrates with a DTD that mixes MathML 1.0 and XHTML, throwing in
a namespace declaration for good measure.
</p>

<a name="xmlnut2-CHP-7-EX-5" /><div class="example">
<h4 class="objtitle">Example 7-5. A DTD that mixes MathML into XHTML and MathML </h4>
<blockquote><pre class="code">&lt;!ENTITY % mathml SYSTEM "mathml/mathml.dtd"&gt;
%mathml;

&lt;!ATTLIST math xmlns CDATA #FIXED "http://www.w3.org/1998/Math/MathML"&gt;

&lt;!ENTITY % Misc.extra "| math"&gt;

&lt;!ENTITY % xhtml PUBLIC "-//W3C//DTD XHTML 1.1//EN" "xhtml11/DTD/xhtml11.dtd"&gt;
%xhtml;</pre></blockquote>
</div>

<p>You can also mix new elements like <tt class="literal">math</tt> into
individual elements like <tt class="literal">p</tt> without changing all
the other block elements. The content specification for each XHTML
element is defined by a parameter entity named
<em class="replaceable"><tt>Element</tt></em><tt class="literal">.content</tt>, for
example, <tt class="literal">%p.content;</tt>,
<tt class="literal">%em.content;</tt>, <tt class="literal">%td.content;</tt> and
so forth. The standard definition of <tt class="literal">p.content</tt>
looks like this:
</p>

<blockquote><pre class="code">&lt;!ENTITY % p.content
     "( #PCDATA | %Inline.mix; )*" &gt;</pre></blockquote>

<p>To allow the <tt class="literal">math</tt> element to be a child of
<tt class="literal">p</tt> elements, but not of every other block element,
you would redefine <tt class="literal">p.content</tt> like this:
</p>

<blockquote><pre class="code">&lt;!ENTITY % p.content "( #PCDATA | %Inline.mix; | math )*" &gt;</pre></blockquote>

<p>The XHTML 1.1 DTD is quite sophisticated. There are a lot more tricks
you can play by mixing and matching different parts of the DTD,
mostly by defining and redefining different parameter entity
references. The easiest way to learn about these is by reading the
raw DTDs. In many cases, the comments in the DTD are more descriptive
and accurate than the prose specification.
</p>

</div>
<a name="xmlnut2-CHP-7-SECT-3.3" /><div class="sect2">
<h3 class="sect2">7.3.3. Mixing Your Own XHTML</h3>

<p>The <a name="xmlnut2-IDXTERM-720" />XHTML 1.1 DTD does not include all of
the modules that are available. For instance, frames and the legacy
presentational elements are deliberately omitted and cannot easily be
turned on. This is the W3C's not-so-subtle way of
telling you that you shouldn't be using these
elements in the first place. If you do want to use them,
you'll need to create your own complete DTD using
the individual modules you require.
</p>

<p>To do this, first you must define the namespace URI and prefixed
names for your elements and attributes. The
<a name="IXT-7-239347" />W3C provides a template you can adapt for
this purpose at <a href="../../../../../../www.w3.org/TR/xhtml-modularization/DTD/templates/template-qname-1.mod">http://www.w3.org/TR/xhtml-modularization/DTD/templates/template-qname-1.mod</a>.
<a href="ch07_03.htm">Example 7-6</a> demonstrates with a DTD fragment that
defines the names for the <tt class="literal">today</tt> and
<tt class="literal">quoteoftheday</tt> elements that one of the authors
uses on his web sites. The module is based on the W3C-provided
template.
</p>

<a name="xmlnut2-CHP-7-EX-6" /><div class="example">
<h4 class="objtitle">Example 7-6. A DTD module to define the today and quoteoftheday elements' names and namespaces </h4>
<blockquote><pre class="code">&lt;!-- ........................................................... --&gt;
&lt;!-- CafeML Qualified Names Module ............................. --&gt;
&lt;!-- file: cafe-qname-1.mod

     This is an extension of XHTML, a reformulation of HTML as
     a modular XML application.

     This DTD module is identified by the PUBLIC and SYSTEM identifiers:

PUBLIC "-//Elliotte Rusty Harold//ELEMENTS CafeML Qualified Names 1.0//EN"
       "cafe-qname-1.mod"

     Revisions:
     (none)
     ........................................................... --&gt;

&lt;!-- NOTES:  Using the CafeML Qualified Names Extension

     This is a module for a markup language 'CafeML',
     which currently declares two extension elements, quoteoftheday
     and today. The parameter entity naming convention uses uppercase
     for the entity name and lowercase for namespace prefixes, hence
     this example uses 'CAFEML' and 'cafeml' respectively.

     Please note the three case variants:

         'CafeML'   the human-readable markup language name
         'CAFEML'   used as a parameter entity name prefix
         'cafeml'   used as the default namespace prefix

     The %NS.prefixed; conditional section keyword must be declared
     as "INCLUDE" in order to allow prefixing be used.
--&gt;

&lt;!-- :::::::::::::::::::::::::::::::::::::::::::::::::::::::::::: --&gt;

&lt;!-- CafeML Qualified Names

     This module is contained in two parts, labeled Section 'A' and 'B':

       Section A declares parameter entities to support namespace-
       qualified names, namespace declarations, and name prefixing
       for CafeML.

       Section B declares parameter entities used to provide
       namespace-qualified names for all CafeML element types.

     The recommended step-by-step program for creating conforming
     modules is enumerated below, and spans both the CafeML Qualified
     Names Template and CafeML Extension Template modules.
--&gt;
&lt;!-- Section A: CafeML XML Namespace Framework :::::::::::::::::::: --&gt;

&lt;!-- 1. Declare a %CAFEML.prefixed; conditional section keyword, used
        to activate namespace prefixing. The default value should
        inherit '%NS.prefixed;' from the DTD driver, so that unless
        overridden, the default behavior follows the overall DTD
        prefixing scheme.
--&gt;
&lt;!ENTITY % NS.prefixed "IGNORE" &gt;
&lt;!ENTITY % CAFEML.prefixed "%NS.prefixed;" &gt;

&lt;!-- 2. Declare a parameter entity (e.g., %CAFEML.xmlns;) containing
        the URI reference used to identify the Module namespace:
--&gt;
&lt;!ENTITY % CAFEML.xmlns  "http://www.cafeconleche.org/xmlns/cafeml" &gt;

&lt;!-- 3. Declare parameter entities (eg., %CAFEML.prefix;) containing
        the default namespace prefix string(s) to use when prefixing
        is enabled. This may be overridden in the DTD driver or the
        internal subset of a document instance. If no default prefix
        is desired, this may be declared as an empty string.

     NOTE: As specified in [XMLNAMES], the namespace prefix serves
     as a proxy for the URI reference, and is not in itself significant.
--&gt;
&lt;!ENTITY % CAFEML.prefix  "cafeml" &gt;

&lt;!-- 4. Declare parameter entities (eg., %CAFEML.pfx;) containing the
        colonized prefix(es) (eg., '%CAFEML.prefix;:') used when
        prefixing is active, an empty string when it is not.
--&gt;
&lt;![%CAFEML.prefixed;[
&lt;!ENTITY % CAFEML.pfx  "%CAFEML.prefix;:" &gt;
]]&gt;
&lt;!ENTITY % CAFEML.pfx  "" &gt;

&lt;!-- 5. The parameter entity %CAFEML.xmlns.extra.attrib; may be
        redeclared to contain any non-CafeML namespace declaration
        attributes for namespaces embedded in CafeML. When prefixing
        is active it contains the prefixed xmlns attribute and any
        namespace declarations embedded in CafeML, otherwise an empty
        string.
--&gt;
&lt;![%CAFEML.prefixed;[
&lt;!ENTITY % CAFEML.xmlns.extra.attrib
      "xmlns:%CAFEML.prefix; %URI.datatype;   #FIXED '%CAFEML.xmlns;'" &gt;
]]&gt;
&lt;!ENTITY % CAFEML.xmlns.extra.attrib "" &gt;

&lt;!ENTITY % XHTML.xmlns.extra.attrib
      "%CAFEML.xmlns.extra.attrib;"
&gt;

&lt;!-- Section B: CafeML Qualified Names ::::::::::::::::::::::::::::: --&gt;

&lt;!-- This section declares parameter entities used to provide
     namespace-qualified names for all CafeML element types.
--&gt;
&lt;!-- module:  cafe-1.mod --&gt;
&lt;!ENTITY % CAFEML.quoteoftheday.qname  "%CAFEML.pfx;quoteoftheday" &gt;
&lt;!ENTITY % CAFEML.today.qname   "%CAFEML.pfx;today" &gt;

&lt;!-- end of cafe-qname-1.mod --&gt;</pre></blockquote>
</div>

<p>Next you have to define the elements and attributes with these names
in a module of your own creation. The
<a name="IXT-7-239348" />W3C provides a template, which you can
adapt for this purpose, at <a href="../../../../../../www.w3.org/TR/xhtml-modularization/DTD/templates/template-1.mod">http://www.w3.org/TR/xhtml-modularization/DTD/templates/template-1.mod</a>.
This template uses the same techniques and follows the same patterns
as XHTML's built-in modules, for example, parameter
entity references that resolve to <tt class="literal">INCLUDE</tt> or
<tt class="literal">IGNORE</tt>.
</p>

<p><a href="ch07_03.htm">Example 7-7</a> demonstrates with a DTD fragment that
defines the <tt class="literal">today</tt> and
<tt class="literal">quoteoftheday</tt> elements. The
<tt class="literal">today</tt> element can contain any block-level content
through the <tt class="literal">Block.mix</tt> parameter entity and has a
required <tt class="literal">date</tt> attribute. The
<tt class="literal">quoteoftheday</tt> element always contains exactly one
<tt class="literal">blockquote</tt> element followed by exactly one
<tt class="literal">p</tt> element with no attributes.
</p>

<a name="xmlnut2-CHP-7-EX-7" /><div class="example">
<h4 class="objtitle">Example 7-7. A DTD module to define the today and quoteoftheday elements </h4>
<blockquote><pre class="code">&lt;!-- ............................................................ --&gt;
&lt;!-- CAFEML Extension Template Module ........................... --&gt;
&lt;!-- file: CafeML-1.mod

     This is an extension of XHTML, a reformulation of HTML as
     a modular XML application.

     This DTD module is identified by the PUBLIC and SYSTEM identifiers:

       PUBLIC "Elliotte Rusty Harold//ELEMENTS CafeML Qualified Names 1.0//EN"
       SYSTEM "CafeML-1.mod"

     Revisions:
     (none)
     ........................................................... --&gt;

&lt;!-- Extension Template

     This sample template module declares two extension elements,
     today and quoteoftheday. The parameter entity naming
     convention uses uppercase for the entity name and lowercase
     for namespace prefixes. Hence this example uses 'CAFEML' and
     'cafe' respectively.

     This module declares parameter entities used to provide
     namespace-qualified names for all CAFEML element types,
     as well as an extensible framework for attribute-based
     namespace declarations on all element types.

     The %NS.prefixed; conditional section keyword must be
     declared as "INCLUDE" in order to allow prefixing to be used.
     By default, foreign (i.e., non-XHTML) namespace modules should
     inherit %NS.prefixed; from XHTML, but this can be overridden
     when prefixing of only the non-XHTML markup is desired.

     XHTML's default value for the 'namespace prefix' is an empty
     string. The Prefix value can be redeclared either in a DTD
     driver or in a document's internal subset as appropriate.

     NOTE: As specified in [XMLNAMES], the namespace prefix serves as
     a proxy for the URI reference, and is not in itself significant.
--&gt;

&lt;!-- ................................................................  --&gt;

&lt;!-- 1. Declare the xmlns attributes used by CAFEML dependent on whether
        CAFEML's prefixing is active. This should be used on all CAFEML
        element types as part of CAFEML's common attributes.

        If the entire DTD is namespace-prefixed, CAFEML should inherit
        %NS.decl.attrib;. Otherwise it should declare %NS.decl.attrib;
        plus a default xmlns attribute on its own element types.
--&gt;
&lt;![%CAFEML.prefixed;[
&lt;!ENTITY % CAFEML.xmlns.attrib
     "%NS.decl.attrib;"
&gt;
]]&gt;
&lt;!ENTITY % CAFEML.xmlns.attrib
     "xmlns        %URI.datatype;           #FIXED '%CAFEML.xmlns;'"
&gt;

&lt;!-- now include the module's various markup declarations ........ --&gt;

&lt;!ENTITY % CAFEML.Common.attrib
     "%CAFEML.xmlns.attrib;
      id           ID                       #IMPLIED"
&gt;

&lt;!-- 2. In the attribute list for each element, declare the XML Namespace
        declarations that are legal in the document instance by including
        the %NamespaceDecl.attrib; parameter entity in the ATTLIST of
        each element type.
--&gt;

&lt;!ENTITY % CAFEML.today.qname  "today" &gt;
&lt;!ELEMENT %CAFEML.today.qname;  ( %Flow.mix; )* &gt;
&lt;!ATTLIST %CAFEML.today.qname;
      %CAFEML.Common.attrib;
      date CDATA #REQUIRED
&gt;

&lt;!ENTITY % CAFEML.quoteoftheday.qname  "quoteoftheday" &gt;
&lt;!ELEMENT %CAFEML.quoteoftheday.qname;  ( %blockquote.qname;,
                                          %p.qname; ) &gt;
&lt;!ATTLIST %CAFEML.quoteoftheday.qname;
      %CAFEML.Common.attrib;
&gt;

&lt;!-- 3. If the module adds attributes to elements defined in modules that
        do not share the namespace of this module, declare those
        attributes so that they use the %CAFEML.pfx; prefix. For example:

&lt;!ENTITY % CAFEML.img.myattr.qname "%CAFEML.pfx;myattr" &gt;
&lt;!ATTLIST %img.qname;
      %CAFEML.img.myattr.qname;  CDATA      #IMPLIED
&gt;

 This would add a myattr attribute to the img element of the Image Module,
 but the attribute's name will be the qualified name, including prefix,
 when prefixes are selected for a document instance.

 We do not need to do this for this module.

--&gt;

&lt;!-- end of CafeML-1.mod --&gt;</pre></blockquote>
</div>

<p>Next you need to write a document model module that defines the
<a name="xmlnut2-IDXTERM-723" /> <a name="xmlnut2-IDXTERM-724" />parameter
entities used for content specifications in the various
modules--not only the CafeML modules, but the XHTML modules as
well. (This is how your elements become part of the various XHTML
elements.) The W3C does not provide a template for this purpose.
However, it's normally easy to adapt the document
model module from either XHTML 1.1 or XHTML Basic to include your new
elements. <a href="ch07_03.htm">Example 7-8</a> is a document model module
based on the XHTML 1.1 document model module.
</p>

<a name="xmlnut2-CHP-7-EX-8" /><div class="example">
<h4 class="objtitle">Example 7-8. A document model module for CafeML </h4>
<blockquote><pre class="code">&lt;!-- ............................................................ --&gt;
&lt;!-- CafeML Model Module  ....................................... --&gt;
&lt;!-- file: CafeML-model-1.mod

  PUBLIC "-//Elliotte Rusty Harold//ELEMENTS XHTML CafeML Model 1.0//EN"
  SYSTEM "CafeML-model-1.mod"

     xmlns:cafeml="http://www.cafeconleche.org/xmlns/cafeml"
     ............................................................ --&gt;

&lt;!-- Define the content model for Misc.extra --&gt;
&lt;!ENTITY % Misc.extra
     "| %CAFEML.today.qname; | %CAFEML.quoteoftheday.qname; "&gt;

&lt;!-- ....................  Inline Elements  ..................... --&gt;

&lt;!ENTITY % HeadOpts.mix
     "( %meta.qname; )*" &gt;

&lt;!ENTITY % I18n.class "" &gt;

&lt;!ENTITY % InlStruct.class "%br.qname; | %span.qname;" &gt;

&lt;!ENTITY % InlPhras.class
     "| %em.qname; | %strong.qname; | %dfn.qname; | %code.qname;
      | %samp.qname; | %kbd.qname; | %var.qname; | %cite.qname;
      | %abbr.qname; | %acronym.qname; | %q.qname;" &gt;

&lt;!ENTITY % InlPres.class "" &gt;

&lt;!ENTITY % Anchor.class "| %a.qname;" &gt;

&lt;!ENTITY % InlSpecial.class "| %img.qname; " &gt;

&lt;!ENTITY % Inline.extra "" &gt;

&lt;!-- %Inline.class; includes all inline elements,
     used as a component in mixes
--&gt;
&lt;!ENTITY % Inline.class
     "%InlStruct.class;
      %InlPhras.class;
      %InlPres.class;
      %Anchor.class;
      %InlSpecial.class;"
&gt;

&lt;!-- %InlNoAnchor.class; includes all non-anchor inlines,
     used as a component in mixes
--&gt;

&lt;!ENTITY % InlNoAnchor.class
     "%InlStruct.class;
      %InlPhras.class;
      %InlPres.class;
      %InlSpecial.class;"
&gt;

&lt;!-- %InlNoAnchor.mix; includes all non-anchor inlines
--&gt;
&lt;!ENTITY % InlNoAnchor.mix
     "%InlNoAnchor.class;
      %Misc.class;"
&gt;

&lt;!-- %Inline.mix; includes all inline elements, including %Misc.class;
--&gt;
&lt;!ENTITY % Inline.mix
     "%Inline.class;
      %Misc.class;"
&gt;

&lt;!-- .....................  Block Elements  ...................... --&gt;
&lt;!ENTITY % Heading.class
     "%h1.qname; | %h2.qname; | %h3.qname;
      | %h4.qname; | %h5.qname; | %h6.qname;" &gt;

&lt;!ENTITY % List.class "%ul.qname; | %ol.qname; | %dl.qname;" &gt;

&lt;!ENTITY % BlkStruct.class "%p.qname; | %div.qname;" &gt;

&lt;!ENTITY % BlkPhras.class
     "| %pre.qname; | %blockquote.qname; | %address.qname;" &gt;

&lt;!ENTITY % BlkPres.class "| %hr.qname;" &gt;

&lt;!ENTITY % Block.extra "" &gt;

&lt;!ENTITY % Table.class "| %table.qname;" &gt;

&lt;!ENTITY % BlkSpecial.class
     "%Table.class;"
&gt;

&lt;!-- %Block.class; includes all block elements,
     used as an component in mixes
--&gt;
&lt;!ENTITY % Block.class
     "%BlkStruct.class;
      %BlkPhras.class;
      %BlkPres.class;
      %BlkSpecial.class;
      %Block.extra;"
&gt;

&lt;!-- %Block.mix; includes all block elements plus %Misc.class;
--&gt;
&lt;!ENTITY % Block.mix
     "%Heading.class;
      | %List.class;
      | %Block.class;
      %Misc.class;"
&gt;

&lt;!-- ................  All Content Elements  .................. --&gt;

&lt;!-- %Flow.mix; includes all text content, block and inline
--&gt;
&lt;!ENTITY % Flow.mix
     "%Heading.class;
      | %List.class;
      | %Block.class;
      | %Inline.class;
      %Misc.class;"
&gt;

&lt;!-- special content model for pre element --&gt;
&lt;!ENTITY % pre.content
    "( #PCDATA
     | %Inline.class; )*"
&gt;

&lt;!-- end of CafeML-model-1.mod --&gt;</pre></blockquote>
</div>

<p>Finally, <a name="IXTR3-56" />
<a name="IXTR3-57" />replace
<a name="xmlnut2-IDXTERM-727" /> <a name="xmlnut2-IDXTERM-728" />the standard XHTML DTD, which
only imports the normal XHTML modules, with a new one that imports
the standard modules you want, as well as any new modules
you've defined. Again, the W3C offers a template for
this purpose, which you can download from <a href="../../../../../../www.w3.org/TR/xhtml-modularization/DTD/templates/template.dtd">http://www.w3.org/TR/xhtml-modularization/DTD/templates/template.dtd</a>.
This template is a minimal DTD that makes the necessary imports and
declares the necessary parameter entity references upon which all the
other modules depend. <a href="ch07_03.htm">Example 7-9</a> is a DTD based on
this template. It merges in the element module defined in <a href="ch07_03.htm">Example 7-7</a>, as well as the standard XHTML tables, images,
meta, and block presentation modules.
</p>

<a name="xmlnut2-CHP-7-EX-9" /><div class="example">
<h4 class="objtitle">Example 7-9. An XHTML DTD that mixes in the Cafe DTD </h4>
<a name="IXTR3-58" /><a name="IXTR3-59" /><a name="IXTR3-60" /><a name="IXTR3-61" /><blockquote><pre class="code">&lt;!-- ................................................................. --&gt;
&lt;!-- XHTML + CafeML DTD  ............................................. --&gt;
&lt;!-- file: CafeML.dtd --&gt;

&lt;!-- CafeML DTD --&gt;
&lt;!-- Please use this formal public identifier to identify it:
         "-//Elliotte Rusty Harold//DTD XHTML CafeDTD//EN"
--&gt;
&lt;!ENTITY % XHTML.version  "-//W3C//DTD XHTML CafeDTD//EN" &gt;

&lt;!-- Bring in any qualified name modules outside of XHTML --&gt;
&lt;!ENTITY % CAFEML-qname.mod SYSTEM "cafe-qname-1.mod"&gt;
%CAFEML-qname.mod;

&lt;!-- Define any extra prefixed namespaces that this DTD relies upon --&gt;
&lt;!ENTITY NS.prefixed.extras.attrib "" &gt;

&lt;!-- Define the Content Model file for the framework to use --&gt;
&lt;!ENTITY % xhtml-model.mod SYSTEM "CafeML-model-1.mod" &gt;

&lt;!-- reserved for future use with document profiles --&gt;
&lt;!ENTITY % XHTML.profile  "" &gt;

&lt;!-- Bi-directional text support
     This feature-test entity is used to declare elements
     and attributes used for internationalization support.
     Set it to INCLUDE or IGNORE as appropriate for your markup language.
--&gt;
&lt;!ENTITY % XHTML.bidi            "IGNORE" &gt;

&lt;!-- ::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::: --&gt;
&lt;!-- Pre-Framework Redeclaration placeholder  .................... --&gt;
&lt;!-- This serves as a location to insert markup declarations
     into the DTD prior to the framework declarations.
--&gt;
&lt;!ENTITY % xhtml-prefw-redecl.module "IGNORE" &gt;
&lt;![%xhtml-prefw-redecl.module;[
%xhtml-prefw-redecl.mod;
&lt;!-- end of xhtml-prefw-redecl.module --&gt;]]&gt;

&lt;!-- The events module should be included here if you need it. In this
     skeleton it is IGNOREd.
--&gt;
&lt;!ENTITY % xhtml-events.module "IGNORE" &gt;

&lt;!-- Modular Framework Module  ................................... --&gt;
&lt;!ENTITY % xhtml-framework.module "INCLUDE" &gt;
&lt;![%xhtml-framework.module;[
&lt;!ENTITY % xhtml-framework.mod
     PUBLIC "-//W3C//ENTITIES XHTML 1.1 Modular Framework 1.0//EN"
            "xhtml-framework-1.mod" &gt;
%xhtml-framework.mod;]]&gt;

&lt;!-- Post-Framework Redeclaration placeholder  ................... --&gt;
&lt;!-- This serves as a location to insert markup declarations
     into the DTD following the framework declarations.
--&gt;
&lt;!ENTITY % xhtml-postfw-redecl.module "IGNORE" &gt;
&lt;![%xhtml-postfw-redecl.module;[
%xhtml-postfw-redecl.mod;
&lt;!-- end of xhtml-postfw-redecl.module --&gt;]]&gt;

&lt;!-- Text Module (required)  ............................... --&gt;
&lt;!ENTITY % xhtml-text.module "INCLUDE" &gt;
&lt;![%xhtml-text.module;[
&lt;!ENTITY % xhtml-text.mod
     PUBLIC "-//W3C//ELEMENTS XHTML 1.1 Text 1.0//EN"
            "xhtml-text-1.mod" &gt;
%xhtml-text.mod;]]&gt;

&lt;!-- Hypertext Module (required) ................................. --&gt;
&lt;!ENTITY % xhtml-hypertext.module "INCLUDE" &gt;
&lt;![%xhtml-hypertext.module;[
&lt;!ENTITY % xhtml-hypertext.mod
     PUBLIC "-//W3C//ELEMENTS XHTML 1.1 Hypertext 1.0//EN"
            "xhtml-hypertext-1.mod" &gt;
%xhtml-hypertext.mod;]]&gt;

&lt;!-- Lists Module (required)  .................................... --&gt;
&lt;!ENTITY % xhtml-list.module "INCLUDE" &gt;
&lt;![%xhtml-list.module;[
&lt;!ENTITY % xhtml-list.mod
     PUBLIC "-//W3C//ELEMENTS XHTML 1.1 Lists 1.0//EN"
            "xhtml-list-1.mod" &gt;
%xhtml-list.mod;]]&gt;

&lt;!-- Your modules can be included here.  Use the basic form defined above,
     and be sure to include the public FPI definition in your catalog file
     for each module that you define. You may also include W3C-defined
     modules at this point.
--&gt;
&lt;!-- CafeML Module (custom module)  ....................... --&gt;
&lt;!ENTITY % cafeml.module "INCLUDE" &gt;
&lt;![%cafeml.module;[
&lt;!ENTITY % cafeml.mod
     PUBLIC "-//Cafe con Leche//XHTML Extensions today 1.0//EN"
            "CafeML-1.mod" &gt;
%cafeml.mod;]]&gt;

&lt;!-- Tables Module (optional)  ....................... --&gt;
&lt;!ENTITY % xhtml-table.module "INCLUDE" &gt;
&lt;![%xhtml-table.module;[
&lt;!ENTITY % xhtml-table.mod
     PUBLIC "-//W3C//ELEMENTS XHTML Tables 1.0//EN"
            "xhtml-table-1.mod" &gt;
%xhtml-table.mod;]]&gt;

&lt;!-- Meta Module (optional)  ....................... --&gt;
&lt;!ENTITY % xhtml-meta.module "INCLUDE" &gt;
&lt;![%xhtml-meta.module;[
&lt;!ENTITY % xhtml-meta.mod
     PUBLIC "-//W3C//ELEMENTS XHTML Meta 1.0//EN"
            "xhtml-meta-1.mod" &gt;
%xhtml-meta.mod;]]&gt;

&lt;!-- Image Module (optional)  ....................... --&gt;
&lt;!ENTITY % xhtml-image.module "INCLUDE" &gt;
&lt;![%xhtml-image.module;[
&lt;!ENTITY % xhtml-image.mod
     PUBLIC "-//W3C//ELEMENTS XHTML Images 1.0//EN"
            "xhtml-image-1.mod" &gt;
%xhtml-image.mod;]]&gt;

&lt;!-- Block Presentation Module (optional)  ....................... --&gt;
&lt;!ENTITY % xhtml-blkpres.module "INCLUDE" &gt;
&lt;![%xhtml-blkpres.module;[
&lt;!ENTITY % xhtml-blkpres.mod
     PUBLIC "-//W3C//ELEMENTS XHTML Block Presentation 1.0//EN"
            "xhtml-blkpres-1.mod" &gt;
%xhtml-blkpres.mod;]]&gt;

&lt;!-- Document Structure Module (required)  ....................... --&gt;
&lt;!ENTITY % xhtml-struct.module "INCLUDE" &gt;
&lt;![%xhtml-struct.module;[
&lt;!ENTITY % xhtml-struct.mod
     PUBLIC "-//W3C//ELEMENTS XHTML 1.1 Document Structure 1.0//EN"
            "xhtml-struct-1.mod" &gt;
%xhtml-struct.mod;]]&gt;

 
&lt;!-- end of CAFEML DTD  .............................................. --&gt; 
&lt;!-- ................................................................. --&gt; </pre></blockquote>
</div>

</div>


<hr width="684" align="left" />
<div class="navbar"><table width="684" border="0"><tr><td align="left" valign="top" width="228"><a href="ch07_02.htm"><img src="../gifs/txtpreva.gif" alt="Previous" border="0" /></a></td><td align="center" valign="top" width="228"><a href="index.htm"><img src="../gifs/txthome.gif" alt="Home" border="0" /></a></td><td align="right" valign="top" width="228"><a href="ch07_04.htm"><img src="../gifs/txtnexta.gif" alt="Next" border="0" /></a></td></tr><tr><td align="left" valign="top" width="228">7.2. Direct Display of XML in Browsers</td><td align="center" valign="top" width="228"><a href="index/index.htm"><img src="../gifs/index.gif" alt="Book Index" border="0" /></a></td><td align="right" valign="top" width="228">7.4. Prospects for Improved Web-Search Methods</td></tr></table></div>
<hr width="684" align="left" />

<img src="../gifs/navbar.gif" usemap="#library-map" border="0" alt="Library Navigation Links" />
<p><p><font size="-1"><a href="copyrght.htm">Copyright &copy; 2002</a> O'Reilly &amp; Associates. All rights reserved.</font></p>

<map name="library-map">
<area shape="rect" coords="0,0,85,93" href="../index.htm"><area shape="rect" coords="85,0,180,98" href="../sax2/index.htm"><area shape="rect" coords="182,-1,261,100" href="index.htm"><area shape="rect" coords="263,1,384,96" href="../jxml/index.htm"><area shape="rect" coords="386,1,463,100" href="../jxslt/index.htm"><area shape="rect" coords="466,1,533,112" href="../xslt/index.htm"><area shape="rect" coords="535,-1,610,108" href="../schema/index.htm"><area shape="rect" coords="613,1,696,121" href="../pxml/index.htm">
</map>

</body></html>