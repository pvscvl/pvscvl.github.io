<html><head><title>Ranges (XML in a Nutshell, 2nd Edition)</title><link rel="stylesheet" type="text/css" href="../style/style1.css" />

<meta name="DC.Creator" content="Elliotte Rusty Harold and W. Scott Means" /><meta name="DC.Format" content="text/xml" scheme="MIME" /><meta name="DC.Language" content="en-US" /><meta name="DC.Publisher" content="O'Reilly &amp; Associates, Inc." /><meta name="DC.Source" scheme="ISBN" content="0-596-00292-0" /><meta name="DC.Subject.Keyword" content="stuff" /><meta name="DC.Title" content="XML in a Nutshell, 2nd Edition" /><meta name="DC.Type" content="Text.Monograph" />

</head><body bgcolor="#ffffff">

<img src="gifs/smbanner.gif" usemap="#banner-map" border="0" alt="Book Home" /><map name="banner-map"><area shape="rect" coords="1,-2,616,66" href="index.htm" alt="XML in a Nutshell" /><area shape="rect" coords="629,-11,726,25" href="jobjects/fsearch.htm" alt="Search this book" /></map>

<div class="navbar"><table width="684" border="0"><tr><td align="left" valign="top" width="228"><a href="ch11_06.htm"><img src="../gifs/txtpreva.gif" alt="Previous" border="0" /></a></td><td align="center" valign="top" width="228" /><td align="right" valign="top" width="228"><a href="ch12_01.htm"><img src="../gifs/txtnexta.gif" alt="Next" border="0" /></a></td></tr></table></div>



<h2 class="sect1">11.7. Ranges</h2>

<p>A <a name="xmlnut2-IDXTERM-1094" /> <a name="xmlnut2-IDXTERM-1095" />range is the span of parsed character data
between two points. It may or may not represent a well-formed chunk
of XML. For example, a range can include an
element's start-tag but not its end-tag. This makes
ranges suitable for uses such as representing the text a user
selected with the mouse. Ranges are created with four functions
XPointer adds to XPath:
</p>

<ul><li>
<p><tt class="literal">range( )</tt></p>
</li><li>
<p><tt class="literal">range-to( )</tt></p>
</li><li>
<p><tt class="literal">range-inside( )</tt></p>
</li><li>
<p><tt class="literal">string-range( )</tt></p>
</li></ul>
<a name="xmlnut2-CHP-11-SECT-7.1" /><div class="sect2">
<h3 class="sect2">11.7.1. The range( ) function</h3>

<p>The <tt class="literal">range(
)</tt><a name="IXT-11-239688" />
function takes as an argument an XPath expression that returns a
location set. For each location in this set, the <tt class="literal">range(
)</tt> function returns a range exactly covering that location;
that is, the start-point of the range is the point immediately before
the location, and the end-point of the range is the point immediately
after the location. If the location is an element node, then the
range begins right before the element's start-tag
and finishes right after the element's end-tag. For
example, consider this XPointer:
</p>

<blockquote><pre class="code">xpointer(range(//title))</pre></blockquote>

<p>When applied to <a href="ch11_06.htm">Example 11-1</a>, it selects a range
exactly covering the single <tt class="literal">title</tt> element. If
there were more than one <tt class="literal">title</tt> element in the
document then it would return one range for each such
<tt class="literal">title</tt> element. If there were no
<tt class="literal">title</tt> elements in the document, then it
wouldn't return any ranges.
</p>

<p>Now consider this XPointer:</p>

<blockquote><pre class="code">xpointer(range(/novel/*))</pre></blockquote>

<p>If applied to <a href="ch11_06.htm">Example 11-1</a>, it returns three ranges,
one covering each of the three child elements of the
<tt class="literal">novel</tt> root element.
</p>

</div>
<a name="xmlnut2-CHP-11-SECT-7.2" /><div class="sect2">
<h3 class="sect2">11.7.2. The range-inside( ) function</h3>

<p>The <tt class="literal">range-inside(
)</tt><a name="IXT-11-239689" />
function takes as an argument an XPath expression that returns a
location set. For each location in this set, it returns a range
exactly covering the contents of that location. For anything except
an element node this will be the same as the range returned by
<tt class="literal">range( )</tt>. For an element node, this range includes
everything inside the element, but not the element's
start-tag or end-tag. For example, when applied to <a href="ch11_06.htm">Example 11-1</a>,
<tt class="literal">xpointer(range-inside(//title))</tt> returns a range
covering <tt class="literal">The Wonderful Wizard of Oz</tt> but not
<tt class="literal">&lt;title&gt;The</tt> <tt class="literal">Wonderful Wizard of
Oz&lt;/title&gt;</tt>. For a comment, processing instruction,
attribute, text, or namespace node, this range covers the string
value of that node. For a range, this range is the range itself. For
a point, this range begins and ends with that point.
</p>

</div>
<a name="xmlnut2-CHP-11-SECT-7.3" /><div class="sect2">
<h3 class="sect2">11.7.3. The range-to( ) function</h3>

<p>The <tt class="literal">range-to(
)</tt><a name="IXT-11-239690" />
function is evaluated with respect to a context node. It takes a
location set as an argument that should return exactly one location.
The start-points of the context nodes are the start-points of the
ranges it returns. The end-point of the argument is the end-point of
the ranges. If the context node set contains multiple nodes, then the
<tt class="literal">range-to( )</tt> function returns multiple ranges.
</p>



<a name="ch11-16-fm2xml" /><blockquote><b>TIP:</b> 
This function is underspecified in the XPointer candidate
recommendation. In particular, what should happen if the argument
contains more or less than one location is not clear. </p>
</blockquote>

<p>For
instance, suppose you want to produce a single range that covers
everything between <tt class="literal">&lt;title&gt;</tt> and
<tt class="literal">&lt;/year&gt;</tt> in <a href="ch11_06.htm">Example 11-1</a>.
This XPointer does that by starting with the start-point of the
<tt class="literal">title</tt> element and continuing to the end-point of
the <tt class="literal">year</tt> element: </p>


<blockquote><pre class="code">xpointer(//title/range-to(year))</pre></blockquote>

<p>Ranges do not necessarily have to cover well-formed fragments of XML.
For instance, the start-tag of an element can be included but the
end-tag left out. This XPointer selects <tt class="literal">&lt;title&gt;The
Wonderful Wizard of Oz</tt>:
</p>

<blockquote><pre class="code">xpointer(//title/range-to(text( )))</pre></blockquote>

<p>It starts at the start-point of the <tt class="literal">title</tt> element,
but it finishes at the end-point of the <tt class="literal">title</tt>
element's text node child, thereby omitting the
end-tag.
</p>

</div>
<a name="xmlnut2-CHP-11-SECT-7.4" /><div class="sect2">
<h3 class="sect2">11.7.4. The string-range( ) function</h3>

<p>The <tt class="literal">string-range(
)</tt><a name="IXT-11-239691" />
function is unusual. Rather than operating on a location set
including various tags, comments, processing instructions, and so
forth, it operates on the text of a document after all markup has
been stripped from it. Tags are more or less ignored.
</p>

<p>The <tt class="literal">string-range( )</tt> function takes as arguments an
XPath expression identifying locations and a substring to try to
match against the XPath string value of each of those locations. It
returns one range for each match, exactly covering the matched
string. Matches are case sensitive. For example, this XPointer
produces ranges for all occurrences of the word
"Wizard" in
<tt class="literal">title</tt> elements in the document:
</p>

<blockquote><pre class="code">xpointer(string-range(//title, "Wizard"))</pre></blockquote>

<p>If there are multiple matches, then multiple ranges are returned. For
example, this XPointer returns two ranges when applied to <a href="ch11_06.htm">Example 11-1</a>, one covering the W in
"Wonderful" and one covering the W
in "Wizard":
</p>

<blockquote><pre class="code">xpointer(string-range(//title, "W"))</pre></blockquote>



<a name="ch11-19-fm2xml" /><blockquote><b>TIP:</b> 
This function is also underspecified in the XPointer candidate
recommendation. In particular, it is not clear what happens when
there are overlapping matches. </p>
</blockquote>

<p>You can also specify an offset
and a length to the function so that strings start a certain number
of characters from the beginning of the match and continue for a
specified number of characters. The point before the first character
in the string to search is 1. For example, this XPointer selects the
first four characters after the word
"Wizard" in
<tt class="literal">title</tt> elements: </p>


<blockquote><pre class="code">xpointer(string-range(//title, "Wizard", 7, 4))</pre></blockquote>

<p>Nonpositive indices work backwards in the document before the
beginning of the match. For example, this XPointer selects the first
four characters before the word
"Wizard" in
<tt class="literal">title</tt> elements:
</p>

<a name="IXTR3-102" /><blockquote><pre class="code">xpointer(string-range(//title, "Wizard", -3, 4))</pre></blockquote>

<p>If the offset or length causes the range to fall outside the
document, then no range is returned.
</p>

<p>Since string ranges can begin and end at pretty much any character in
the text content of a document, they're the way to
indicate points that don't fall on node boundaries.
Simply create a string range that either begins or ends at the
position you want to point to, and then use <tt class="literal">start-point(
)</tt><a name="IXTR3-103" /> or <tt class="literal">end-point(
)</tt><a name="IXTR3-104" /> on that range. For example, this
XPointer returns the point immediately before the <a name="IXTR3-105" /> <a name="IXTR3-106" />word
"Wizard" in the
<tt class="literal">title</tt> element in Listing 11-1:
</p>

<blockquote><pre class="code">xpointerstart-point(start-pointxpointer(string-range(//title, "Wizard")))</pre></blockquote>

</div>
<a name="xmlnut2-CHP-11-SECT-7.5" /><div class="sect2">
<h3 class="sect2">11.7.5. Relative XPointers</h3>

<p>Normally, an
<a name="IXT-11-239692" /> <a name="IXT-11-239693" />XPointer is a fragment identifier
attached to a URL. The root node of the document the URL points to is
the context location for the XPointer. However, XPointers can also be
used by themselves without explicit URLs in XML documents. By
default, the <a name="IXT-11-239694" />context node for such an XPointer is
the root node of the document where the XPointer appears. However,
either the <tt class="literal">here( )</tt> or the <tt class="literal">origin(
)</tt> function can change the context node for the
XPointer's XPath expression.
</p>

</div>
<a name="xmlnut2-CHP-11-SECT-7.6" /><div class="sect2">
<h3 class="sect2">11.7.6. here( )</h3>

<p>The <tt class="literal">here(
)</tt><a name="IXT-11-239695" /> function
is only used inside XML documents. It refers to the node that
contains the XPointer or, if the node that contains the XPointer is a
text node, the element node that contains that text node.
<tt class="literal">here( )</tt> is useful in relative links. For example,
these <tt class="literal">navigation</tt> elements link to the
<tt class="literal">page</tt> elements preceding and following the pages in
which they're contained.
</p>

<blockquote><pre class="code">&lt;page&gt;
  content of the page...
  &lt;navigation xlink:type="simple"
    xlink:href="#xpointer(here( )/../../preceding-sibling::page[1])"&gt;
    Previous
  &lt;/navigation&gt;
  &lt;navigation xlink:type="simple"
    xlink:href="#xpointer(here( )/../../following-sibling::page[1])"&gt;
    Next
  &lt;/navigation&gt;
&lt;/page&gt;</pre></blockquote>

<p>In these elements, the <tt class="literal">here( )</tt> function refers to
the <tt class="literal">xlink:href</tt> attribute nodes that contain the
XPointer. The first <tt class="literal">..</tt> selects the
<tt class="literal">navigation</tt> parent element. The second
<tt class="literal">..</tt> selects its parent <tt class="literal">page</tt>
element, and the final location step selects the previous or next
<tt class="literal">page</tt> element.
</p>

</div>
<a name="xmlnut2-CHP-11-SECT-7.7" /><div class="sect2">
<h3 class="sect2">11.7.7. origin( )</h3>

<p>The <tt class="literal">origin(
)</tt><a name="IXT-11-239696" />
function is useful when the document has been loaded from an
out-of-line link. It refers to the node from which the user is
initiating traversal, even if that is not the node that defines the
link. For example, consider an extended link like this one. It has
many <tt class="literal">novel</tt> elements, each of which is a locator
that shares the same label:
</p>

<blockquote><pre class="code">&lt;series xlink:type="extended" xmlns:xlink="http://www.w3.org/1999/xlink"&gt;

  &lt;!-- locator elements --&gt;
  &lt;novel xlink:type="locator" xlink:label="oz"
         xlink:href="ftp://archive.org/pub/etext/etext93/wizoz10.txt"&gt;
    &lt;title&gt;The Wonderful Wizard of Oz&lt;/title&gt;
    &lt;year&gt;1900&lt;/year&gt;
  &lt;/novel&gt;
  &lt;novel xlink:type="locator" xlink:label="oz"
         xlink:href="ftp://archive.org/pub/etext/etext93/ozland10.txt"&gt;
    &lt;title&gt;The Marvelous Land of Oz&lt;/title&gt;
    &lt;year&gt;1904&lt;/year&gt;
  &lt;/novel&gt;
  &lt;novel xlink:type="locator" xlink:label="oz"
         xlink:href="ftp://archive.org/pub/etext/etext93/wizoz10.txt"&gt;
    &lt;title&gt;Ozma of Oz&lt;/title&gt;
    &lt;year&gt;1907&lt;/year&gt;
  &lt;/novel&gt;
  &lt;!-- many more novel elements... --&gt;

  &lt;sequel xlink:type="locator" xlink:label="next"
        xlink:href="#xpointer(origin( )/following-sibling::novel[1])" /&gt;
  &lt;next xlink:type="arc" xlink:from="oz" xlink:to="next" /&gt;

&lt;/series&gt;</pre></blockquote>

<p>The <tt class="literal">sequel</tt> element uses an XPointer and the
<tt class="literal">origin( )</tt> function to define a locator that points
to the following <tt class="literal">novel</tt> in the series. If the user
is reading <em class="emphasis">The Wonderful Wizard of Oz</em>, then the
<tt class="literal">sequel</tt> element locates <em class="emphasis">The Marvelous
Land of Oz</em>. If the user is reading <em class="emphasis">The Marvelous
Land of Oz</em>, then that same <tt class="literal">sequel</tt>
element locates <em class="emphasis">Ozma of Oz</em>, and so on. The
<tt class="literal">next</tt> element defines links from each
<tt class="literal">novel</tt> (since they all share the label
<tt class="literal">oz</tt>) to its sequel. The ending resource changes
from one novel to the next.
</p>



</div>


<hr width="684" align="left" />
<div class="navbar"><table width="684" border="0"><tr><td align="left" valign="top" width="228"><a href="ch11_06.htm"><img src="../gifs/txtpreva.gif" alt="Previous" border="0" /></a></td><td align="center" valign="top" width="228"><a href="index.htm"><img src="../gifs/txthome.gif" alt="Home" border="0" /></a></td><td align="right" valign="top" width="228"><a href="ch12_01.htm"><img src="../gifs/txtnexta.gif" alt="Next" border="0" /></a></td></tr><tr><td align="left" valign="top" width="228">11.6. Points</td><td align="center" valign="top" width="228"><a href="index/index.htm"><img src="../gifs/index.gif" alt="Book Index" border="0" /></a></td><td align="right" valign="top" width="228">12. Cascading Style Sheets </td></tr></table></div>
<hr width="684" align="left" />

<img src="../gifs/navbar.gif" usemap="#library-map" border="0" alt="Library Navigation Links" />
<p><p><font size="-1"><a href="copyrght.htm">Copyright &copy; 2002</a> O'Reilly &amp; Associates. All rights reserved.</font></p>

<map name="library-map">
<area shape="rect" coords="0,0,85,93" href="../index.htm"><area shape="rect" coords="85,0,180,98" href="../sax2/index.htm"><area shape="rect" coords="182,-1,261,100" href="index.htm"><area shape="rect" coords="263,1,384,96" href="../jxml/index.htm"><area shape="rect" coords="386,1,463,100" href="../jxslt/index.htm"><area shape="rect" coords="466,1,533,112" href="../xslt/index.htm"><area shape="rect" coords="535,-1,610,108" href="../schema/index.htm"><area shape="rect" coords="613,1,696,121" href="../pxml/index.htm">
</map>

</body></html>