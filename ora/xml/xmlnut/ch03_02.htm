<html><head><title>Element Declarations (XML in a Nutshell, 2nd Edition)</title><link rel="stylesheet" type="text/css" href="../style/style1.css" />

<meta name="DC.Creator" content="Elliotte Rusty Harold and W. Scott Means" /><meta name="DC.Format" content="text/xml" scheme="MIME" /><meta name="DC.Language" content="en-US" /><meta name="DC.Publisher" content="O'Reilly &amp; Associates, Inc." /><meta name="DC.Source" scheme="ISBN" content="0-596-00292-0" /><meta name="DC.Subject.Keyword" content="stuff" /><meta name="DC.Title" content="XML in a Nutshell, 2nd Edition" /><meta name="DC.Type" content="Text.Monograph" />

</head><body bgcolor="#ffffff">

<img src="gifs/smbanner.gif" usemap="#banner-map" border="0" alt="Book Home" /><map name="banner-map"><area shape="rect" coords="1,-2,616,66" href="index.htm" alt="XML in a Nutshell" /><area shape="rect" coords="629,-11,726,25" href="jobjects/fsearch.htm" alt="Search this book" /></map>

<div class="navbar"><table width="684" border="0"><tr><td align="left" valign="top" width="228"><a href="ch03_01.htm"><img src="../gifs/txtpreva.gif" alt="Previous" border="0" /></a></td><td align="center" valign="top" width="228" /><td align="right" valign="top" width="228"><a href="ch03_03.htm"><img src="../gifs/txtnexta.gif" alt="Next" border="0" /></a></td></tr></table></div>



<h2 class="sect1">3.2. Element Declarations</h2>

<p>Every <a name="xmlnut2-IDXTERM-214" /> <a name="xmlnut2-IDXTERM-215" /> <a name="xmlnut2-IDXTERM-216" />element
<a name="IXT-3-239770" />used in a valid document must be
declared in the document's DTD with an element
declaration. Element declarations have this basic form:
</p>

<blockquote><pre class="code">&lt;!ELEMENT <em class="replaceable"><tt>element_name</em> <em class="replaceable">content_specification</tt></em>&gt;</pre></blockquote>

<p>The name of the element can be any legal XML name. The
<a name="IXT-3-239771" /><em class="emphasis">content
specification</em> specifies what children the element may or
must have in what order. Content specifications can be quite complex.
They can say, for example, that an element must have three child
elements of a given type, or two children of one type followed by
another element of a second type, or any elements chosen from seven
different types interspersed with text.
</p>

<a name="xmlnut2-CHP-3-SECT-2.1" /><div class="sect2">
<h3 class="sect2">3.2.1. #PCDATA</h3>

<p><a name="IXT-3-239772" />About the simplest content specification
is one that says an element may only contain parsed character data,
but may not contain any child elements of any type. In this case the
content specification consists of the keyword
<tt class="literal">#PCDATA</tt> inside parentheses. For example, this
declaration says that a <tt class="literal">phone_number</tt> element may
contain text, but may not contain elements:
</p>

<blockquote><pre class="code">&lt;!ELEMENT phone_number (#PCDATA)&gt;</pre></blockquote>

</div>
<a name="xmlnut2-CHP-3-SECT-2.2" /><div class="sect2">
<h3 class="sect2">3.2.2. Child Elements</h3>

<p>Another <a name="IXT-3-239773" />simple content specification is one
that says the element must have exactly one child of a given type. In
this case, the content specification simply consists of the name of
the child element inside parentheses. For example, this declaration
says that a <tt class="literal">fax</tt> element must contain exactly one
<tt class="literal">phone_number</tt> element:
</p>

<blockquote><pre class="code">&lt;!ELEMENT fax (phone_number)&gt;</pre></blockquote>

<p>A <tt class="literal">fax</tt> element may not contain anything else except
the <tt class="literal">phone_number</tt> element, and it may not contain
more or less than one of those.
</p>

</div>
<a name="xmlnut2-CHP-3-SECT-2.3" /><div class="sect2">
<h3 class="sect2">3.2.3. Sequences</h3>

<p>In practice, however, a content specification that lists exactly one
child element is rare. Most elements contain either parsed character
data or (at least potentially) multiple child elements. The simplest
way to indicate multiple child elements is to separate them with
commas. This is called a <a name="IXT-3-239774" /><em class="emphasis">sequence</em>. It
indicates that the named elements must appear in the specified order.
For example, this element declaration says that a
<tt class="literal">name</tt> element must contain exactly one
<tt class="literal">first_name</tt> child element followed by exactly one
<tt class="literal">last_name</tt> child element:
</p>

<blockquote><pre class="code">&lt;!ELEMENT name (first_name, last_name)&gt;</pre></blockquote>

<p>Given this declaration, this <tt class="literal">name</tt> element is valid:</p>

<blockquote><pre class="code">&lt;name&gt;
  &lt;first_name&gt;Madonna&lt;/first_name&gt;
  &lt;last_name&gt;Ciconne&lt;/last_name&gt;
&lt;/name&gt;</pre></blockquote>

<p>However, this one is not valid because it flips the order of two
elements:
</p>

<blockquote><pre class="code">&lt;name&gt;
  &lt;last_name&gt;Ciconne&lt;/last_name&gt;
  &lt;first_name&gt;Madonna&lt;/first_name&gt;
&lt;/name&gt;</pre></blockquote>

<p>This element is invalid because it omits the
<tt class="literal">last_name</tt> element:
</p>

<blockquote><pre class="code">&lt;name&gt;
  &lt;first_name&gt;Madonna&lt;/first_name&gt;
&lt;/name&gt;</pre></blockquote>

<p>This one is invalid because it adds a <tt class="literal">middle_name</tt>
element:
</p>

<blockquote><pre class="code">&lt;name&gt;
  &lt;first_name&gt;Madonna&lt;/first_name&gt;
  &lt;middle_name&gt;Louise&lt;/middle_name&gt;
  &lt;last_name&gt;Ciconne&lt;/last_name&gt;
&lt;/name&gt;</pre></blockquote>

</div>
<a name="xmlnut2-CHP-3-SECT-2.4" /><div class="sect2">
<h3 class="sect2">3.2.4. The Number of Children</h3>

<p>As <a name="IXT-3-239775" /> <a name="IXT-3-239776" />the previous examples
indicate, not all instances of a given element necessarily have
exactly the same children. You can affix one of three
<a name="IXT-3-239777" />
<a name="IXT-3-239778" />suffixes to an element name in a content
specification to indicate how many of that element are expected at
that position. These suffixes are:
</p>

<dl>
<dt><i>?</i></dt>
<dd>
<a name="IXT-3-239779" />Zero or one of the element is allowed.
</p>
</dd>


<dt><i>*</i></dt>
<dd>
<a name="IXT-3-239780" />Zero or more of the element is
allowed.
</p>
</dd>


<dt><i>+</i></dt>
<dd>
<a name="IXT-3-239781" />One or more of the element is
required.
</p>
</dd>

</dl>

<p>For example, this declaration says that a <tt class="literal">name</tt>
element must contain a <tt class="literal">first_name</tt>, may or may not
contain a <tt class="literal">middle_name</tt>, and may or may not contain
a <tt class="literal">last_name</tt>:
</p>

<blockquote><pre class="code">&lt;!ELEMENT name (first_name, middle_name?, last_name?)&gt;</pre></blockquote>

<p>Given this declaration, all these <tt class="literal">name</tt> elements
are valid:
</p>

<blockquote><pre class="code">&lt;name&gt;
  &lt;first_name&gt;Madonna&lt;/first_name&gt;
  &lt;last_name&gt;Ciconne&lt;/last_name&gt;
&lt;/name&gt;
&lt;name&gt;
  &lt;first_name&gt;Madonna&lt;/first_name&gt;
  &lt;middle_name&gt;Louise&lt;/middle_name&gt;
  &lt;last_name&gt;Ciconne&lt;/last_name&gt;
&lt;/name&gt;
&lt;name&gt;
  &lt;first_name&gt;Madonna&lt;/first_name&gt;
&lt;/name&gt;</pre></blockquote>

<p>However, these are not valid:</p>

<blockquote><pre class="code">&lt;name&gt;
  &lt;first_name&gt;George&lt;/first_name&gt;
  &lt;!-- only one middle name is allowed --&gt;
  &lt;middle_name&gt;Herbert&lt;/middle_name&gt;
  &lt;middle_name&gt;Walker&lt;/middle_name&gt;
  &lt;last_name&gt;Bush&lt;/last_name&gt;
&lt;/name&gt;
&lt;name&gt;
  &lt;!-- first name must precede last name --&gt;
  &lt;last_name&gt;Ciconne&lt;/last_name&gt;
  &lt;first_name&gt;Madonna&lt;/first_name&gt;
&lt;/name&gt;</pre></blockquote>

<p>You can allow for multiple middle names by placing an asterisk after
the <tt class="literal">middle_name</tt>:
</p>

<blockquote><pre class="code">&lt;!ELEMENT name (first_name, middle_name*, last_name?)&gt;</pre></blockquote>

<p>If you wanted to require a <tt class="literal">middle_name</tt> to be
included, but still allow for multiple middle names,
you'd use a plus sign instead, like this:
</p>

<blockquote><pre class="code">&lt;!ELEMENT name (first_name, middle_name+, last_name?)&gt;</pre></blockquote>

</div>
<a name="xmlnut2-CHP-3-SECT-2.5" /><div class="sect2">
<h3 class="sect2">3.2.5. Choices</h3>

<p>Sometimes <a name="IXT-3-239782" />one instance of an element may
contain one kind of child, and another instance may contain a
different child. This can be indicated with a
<em class="emphasis">choice</em></tt>. A choice is a list of
<a name="IXT-3-239783" />element names separated by vertical bars.
For example, this declaration says that a
<tt class="literal">methodResponse</tt> element contains either a
<tt class="literal">params</tt> child or a <tt class="literal">fault</tt> child:
</p>

<blockquote><pre class="code">&lt;!ELEMENT methodResponse (params | fault)&gt;</pre></blockquote>

<p>However, it cannot contain both at once. Each
<tt class="literal">methodResponse</tt> element must contain one or the
other.
</p>

<p>Choices can be extended to an indefinite number of possible elements.
For example, this declaration says that each <tt class="literal">digit</tt>
element can contain exactly one of the child elements named
<tt class="literal">zero</tt>, <tt class="literal">one</tt>,
<tt class="literal">two</tt>, <tt class="literal">three</tt>,
<tt class="literal">four</tt>, <tt class="literal">five</tt>,
<tt class="literal">six</tt>, <tt class="literal">seven</tt>,
<tt class="literal">eight</tt>, or <tt class="literal">nine</tt>:
</p>

<blockquote><pre class="code">&lt;!ELEMENT digit
 (zero | one | two | three | four | five | six | seven | eight | nine)
&gt;</pre></blockquote>

</div>
<a name="xmlnut2-CHP-3-SECT-2.6" /><div class="sect2">
<h3 class="sect2">3.2.6. Parentheses</h3>

<p>Individually, <a name="IXT-3-239784" /> <a name="IXT-3-239785" />choices,
sequences, and suffixes are fairly limited. However, they can be
combined in arbitrarily complex fashions to describe most reasonable
content models. Either a choice or a sequence can be enclosed in
parentheses. When so enclosed, the choice or sequence can be suffixed
with a <tt class="literal">?</tt>, <tt class="literal">*</tt>, or
<tt class="literal">+</tt>. Furthermore, the parenthesized item can be
nested inside other choices or sequences.
</p>

<p>For example, let's suppose you want to say that a
<tt class="literal">circle</tt> element contains a
<tt class="literal">center</tt> element and either a
<tt class="literal">radius</tt> or a <tt class="literal">diameter</tt> element,
but not both. This declaration does that:
</p>

<blockquote><pre class="code">&lt;!ELEMENT circle (center, (radius | diameter))&gt;</pre></blockquote>

<p>To continue with a geometry example, suppose a
<tt class="literal">center</tt> element can either be defined in terms of
Cartesian or polar coordinates. Then each center contains either an
<tt class="literal">x</tt> and a <tt class="literal">y</tt> or an
<tt class="literal">r</tt> and a <img src="figs/U03B8.gif" alt="Figure " />. We would declare this using
two small sequences, each of which is parenthesized and combined in a
choice:
</p>

<p>
<tt class="literal">&lt;!ELEMENT center ((x, y) | (r, <img src="figs/U03B8.gif" alt="Figure " />))&gt;</tt>
</p>
<p>Suppose you don't really care whether the
<tt class="literal">x</tt> element comes before the <tt class="literal">y</tt>
element or vice versa, nor do you care whether <tt class="literal">r</tt>
comes before <img src="figs/U03B8.gif" alt="Figure " />. Then you can expand the choice to cover
all four possibilities:
</p>
<p>
<tt class="literal">&lt;!ELEMENT center ((x, y) | (y, x) | (r, <img src="figs/U03B8.gif" alt="Figure " />) | (<img src="figs/U03B8.gif" alt="Figure " />, r) )&gt;</tt>
</p>
<p>As the number of elements in the sequence grows, the number of
permutations grows more than exponentially. Thus, this technique
really isn't practical past two or three child
elements. DTDs are not very good at saying you want n instances of A
and m instances of B, but you don't really care
which order they come in.
</p>

<p>Suffixes can be applied to parenthesized elements too. For instance,
let's suppose that a polygon is defined by
individual coordinates for each vertex, given in order. For example,
this is a right triangle:
</p>

<img src="figs/p39a.gif" alt="Figure 3.2.6" />



<p>What we want to say is that a polygon is composed of three or more
pairs of x-y or r-<img src="figs/U03B8.gif" alt="Figure " /> coordinates. An <tt class="literal">x</tt>
is always followed by a <tt class="literal">y</tt>, and an
<tt class="literal">r</tt> is always followed by a <img src="figs/U03B8.gif" alt="Figure " />. This
declaration does that:
</p>

<img src="figs/p39b.gif" alt="Figure 3.2.6" />




<p>The plus sign is applied to <tt class="literal">((x,</tt>
<tt class="literal">y)</tt> <tt class="literal">|</tt> <tt class="literal">(r,</tt>
<img src="figs/U03B8.gif" alt="Figure " /><tt class="literal">))</tt>. 
</p>

<p>To return to the name example, suppose you want to say that a name
can contain just a first name, just a last name, or a first name and
a last name with an indefinite number of middle names. This
declaration achieves that:
</p>

<blockquote><pre class="code">&lt;!ELEMENT name (last_name
               | (first_name, ( (middle_name+, last_name) | (last_name?) )
               ) &gt;</pre></blockquote>

</div>
<a name="xmlnut2-CHP-3-SECT-2.7" /><div class="sect2">
<h3 class="sect2">3.2.7. Mixed Content</h3>

<p>In <a name="IXT-3-239786" />narrative documents it's
common for a single element to contain both child elements and
un-marked up, nonwhitespace character data. For example, recall this
<tt class="literal">definition</tt> element from <a href="ch02_01.htm">Chapter 2</a>: 
</p>

<blockquote><pre class="code">&lt;definition&gt;The &lt;term&gt;Turing Machine&lt;/term&gt; is an abstract finite 
state automaton with infinite memory that can be proven equivalent 
to any any other finite state automaton with arbitrarily large memory. 
Thus what is true for a Turing machine is true for all equivalent 
machines no matter how implemented.
&lt;/definition&gt;</pre></blockquote>

<p>The <tt class="literal">definition</tt> element contains some nonwhitespace
text and a <tt class="literal">term</tt> child. This is called
<em class="emphasis">mixed content</em></tt>. An element that contains mixed
content is declared like this:
</p>

<blockquote><pre class="code">&lt;!ELEMENT definition (#PCDATA | term)*&gt;</pre></blockquote>

<p>This says that a <tt class="literal">definition</tt> element may contain
parsed character data and <tt class="literal">term</tt> children. It does
not specify in which order they appear, nor how many instances of
each appear. This declaration allows a <tt class="literal">definition</tt>
to have one <tt class="literal">term</tt> child, no <tt class="literal">term</tt>
children, or twenty-three <tt class="literal">term</tt> children.
</p>

<p>You can add any number of other child elements to the list of mixed
content, though <tt class="literal">#PCDATA</tt> must always be the first
child in the list. For example, this declaration says that a
<tt class="literal">paragraph</tt> element may contain any number of
<tt class="literal">name</tt>, <tt class="literal">profession</tt>,
<tt class="literal">footnote</tt>, <tt class="literal">emphasize</tt>, and
<tt class="literal">date</tt> elements in any order, interspersed with
parsed character data:
</p>

<blockquote><pre class="code">&lt;!ELEMENT paragraph
  (#PCDATA | name | profession | footnote | emphasize | date )*
&gt;</pre></blockquote>

<p>This is the <em class="emphasis">only</em></tt> way to indicate that an element
contains mixed content. You cannot say, for example, that there must
be exactly one <tt class="literal">term</tt> child of the
<tt class="literal">definition</tt> element, as well as parsed character
data. You cannot say that the parsed character data must all come
after the <tt class="literal">term</tt> child. You cannot use parentheses
around a mixed-content declaration to make it part of a larger
grouping. You can only say that the element contains any number of
any elements from a particular list in any order, as well as
undifferentiated parsed character data.
</p>

</div>
<a name="xmlnut2-CHP-3-SECT-2.8" /><div class="sect2">
<h3 class="sect2">3.2.8. Empty Elements</h3>

<p>Some <a name="IXT-3-239787" />elements do not have any content
at all. These are called <em class="emphasis">empty elements</em></tt> and are
sometimes <a name="IXT-3-239788" />written with a closing
<tt class="literal">/&gt;</tt>. For example:
</p>

<blockquote><pre class="code">&lt;image source="bus.jpg" width="152" height="345"
       alt="Alan Turing standing in front of a bus"
/&gt;</pre></blockquote>

<p>These elements are declared by using the keyword
<tt class="literal">EMPTY</tt> for the content specification. For example:
</p>

<blockquote><pre class="code">&lt;!ELEMENT image EMPTY&gt;</pre></blockquote>

<p>This merely says that the <tt class="literal">image</tt> element must be
empty, not that it must be written with an empty-element tag. Given
this declaration, this is also a valid <tt class="literal">image</tt>
element:
</p>

<blockquote><pre class="code">&lt;image source="bus.jpg" width="152" height="345"
       alt="Alan Turing standing in front of a bus"&gt;&lt;/image&gt;</pre></blockquote>

<p>If an element is empty, then it can contain nothing, not even
whitespace. For instance, this is an invalid <tt class="literal">image</tt>
element:
</p>

<blockquote><pre class="code">&lt;image source="bus.jpg" width="152" height="345"
       alt="Alan Turing standing in front of a bus"&gt;
&lt;/image&gt;</pre></blockquote>

</div>
<a name="xmlnut2-CHP-3-SECT-2.9" /><div class="sect2">
<h3 class="sect2">3.2.9. ANY</h3>

<p>Very <a name="IXT-3-239789" />loose
DTDs occasionally want to say that an element exists without making
any assertions about what it may or may not contain. In this case you
can specify the keyword <tt class="literal">ANY</tt> as the content
specification. For example, this declaration says that a
<tt class="literal">page</tt> element can contain any content including
mixed content, child elements, and even other <tt class="literal">page</tt>
elements:
</p>

<blockquote><pre class="code">&lt;!ELEMENT page ANY&gt;</pre></blockquote>

<p>The children that actually appear in the <tt class="literal">page</tt>
elements' content in the document must still be
declared in element declarations of their own. <tt class="literal">ANY</tt>
does not allow you to use undeclared elements.
</p>

<p><tt class="literal">ANY</tt> is sometimes useful when
you're just beginning to design the DTD and document
structure and you don't yet have a clear picture of
how everything fits together. However, it's
extremely bad form to use <tt class="literal">ANY</tt> in finished DTDs.
About the only time you'll see it used is when
external DTD subsets and entities may change in uncontrollable ways.
However, this is actually quite rare. You'd really
only need this if you were writing a DTD for an application like XSLT
or RDF that wraps content from arbitrary, unknown XML <a name="IXTR3-127" /> <a name="IXTR3-128" /> <a name="IXTR3-129" />applications.
</p>

</div>


<hr width="684" align="left" />
<div class="navbar"><table width="684" border="0"><tr><td align="left" valign="top" width="228"><a href="ch03_01.htm"><img src="../gifs/txtpreva.gif" alt="Previous" border="0" /></a></td><td align="center" valign="top" width="228"><a href="index.htm"><img src="../gifs/txthome.gif" alt="Home" border="0" /></a></td><td align="right" valign="top" width="228"><a href="ch03_03.htm"><img src="../gifs/txtnexta.gif" alt="Next" border="0" /></a></td></tr><tr><td align="left" valign="top" width="228">3. Document Type Definitions </td><td align="center" valign="top" width="228"><a href="index/index.htm"><img src="../gifs/index.gif" alt="Book Index" border="0" /></a></td><td align="right" valign="top" width="228">3.3. Attribute Declarations</td></tr></table></div>
<hr width="684" align="left" />

<img src="../gifs/navbar.gif" usemap="#library-map" border="0" alt="Library Navigation Links" />
<p><p><font size="-1"><a href="copyrght.htm">Copyright &copy; 2002</a> O'Reilly &amp; Associates. All rights reserved.</font></p>

<map name="library-map">
<area shape="rect" coords="0,0,85,93" href="../index.htm"><area shape="rect" coords="85,0,180,98" href="../sax2/index.htm"><area shape="rect" coords="182,-1,261,100" href="index.htm"><area shape="rect" coords="263,1,384,96" href="../jxml/index.htm"><area shape="rect" coords="386,1,463,100" href="../jxslt/index.htm"><area shape="rect" coords="466,1,533,112" href="../xslt/index.htm"><area shape="rect" coords="535,-1,610,108" href="../schema/index.htm"><area shape="rect" coords="613,1,696,121" href="../pxml/index.htm">
</map>

</body></html>