<html><head><title>Parameter Entities (XML in a Nutshell, 2nd Edition)</title><link rel="stylesheet" type="text/css" href="../style/style1.css" />

<meta name="DC.Creator" content="Elliotte Rusty Harold and W. Scott Means" /><meta name="DC.Format" content="text/xml" scheme="MIME" /><meta name="DC.Language" content="en-US" /><meta name="DC.Publisher" content="O'Reilly &amp; Associates, Inc." /><meta name="DC.Source" scheme="ISBN" content="0-596-00292-0" /><meta name="DC.Subject.Keyword" content="stuff" /><meta name="DC.Title" content="XML in a Nutshell, 2nd Edition" /><meta name="DC.Type" content="Text.Monograph" />

</head><body bgcolor="#ffffff">

<img src="gifs/smbanner.gif" usemap="#banner-map" border="0" alt="Book Home" /><map name="banner-map"><area shape="rect" coords="1,-2,616,66" href="index.htm" alt="XML in a Nutshell" /><area shape="rect" coords="629,-11,726,25" href="jobjects/fsearch.htm" alt="Search this book" /></map>

<div class="navbar"><table width="684" border="0"><tr><td align="left" valign="top" width="228"><a href="ch03_06.htm"><img src="../gifs/txtpreva.gif" alt="Previous" border="0" /></a></td><td align="center" valign="top" width="228" /><td align="right" valign="top" width="228"><a href="ch03_08.htm"><img src="../gifs/txtnexta.gif" alt="Next" border="0" /></a></td></tr></table></div>



<h2 class="sect1">3.7. Parameter Entities</h2>

<p><a name="IXT-3-239833" />It is not uncommon for multiple
elements <a name="xmlnut2-IDXTERM-312" /><a name="IXT-3-239834" />to share all or
part of the same attribute lists and content specifications. For
instance, any element that's a simple XLink will
have <tt class="literal">xlink:type</tt> and <tt class="literal">xlink:href</tt>
attributes, and perhaps <tt class="literal">xlink:show</tt> and
<tt class="literal">xlink:actuate</tt> attributes. In XHTML, a
<tt class="literal">th</tt> element and a <tt class="literal">td</tt> element
contain more or less the same content. Repeating the same content
specifications or attribute lists in multiple element declarations is
tedious and error-prone. It's entirely possible to
add a newly defined child element to the declaration of some of the
elements but forget to include it in others.
</p>

<p>For example, consider an XML application for residential real-estate
listings that provides separate elements for apartments, sublets,
coops for sale, condos for sale, and houses for sale. The element
declarations might look like this:
</p>

<blockquote><pre class="code">&lt;!ELEMENT apartment (address, footage, rooms, baths, rent)&gt;
&lt;!ELEMENT sublet    (address, footage, rooms, baths, rent)&gt;
&lt;!ELEMENT coop      (address, footage, rooms, baths, price)&gt;
&lt;!ELEMENT condo     (address, footage, rooms, baths, price)&gt;
&lt;!ELEMENT house     (address, footage, rooms, baths, price)&gt;</pre></blockquote>

<p>There's a lot of overlap between the declarations,
i.e., a lot of repeated text. And if you later decide you need to add
an additional element, <tt class="literal">available_date</tt> for
instance, then you need to add it to all five declarations. It would
be preferable to define a constant that can hold the common parts of
the content specification for all five kinds of listings and refer to
that constant from inside the content specification of each element.
Then to add or delete something from all the listings,
you'd only need to change the definition of the
constant.
</p>

<p>An entity reference is the obvious candidate here. However, general
entity references are not allowed to provide replacement text for a
content specification or attribute list, only for parts of the DTD
that will be included in the XML document itself. Instead, XML
provides a new construct exclusively for use inside DTDs, the
<em class="emphasis">parameter entity</em>, which is referred to by a
<a name="xmlnut2-IDXTERM-314" /><em class="emphasis">parameter entity
reference</em>. Parameter entities behave like and are declared
almost exactly like a general entity. However, they use a
<tt class="literal">%</tt> instead of an <tt class="literal">&amp;</tt>, and they
can only be used in a DTD while general entities can only be used in
the document content.
</p>

<a name="xmlnut2-CHP-3-SECT-7.1" /><div class="sect2">
<h3 class="sect2">3.7.1. Parameter Entity Syntax</h3>

<p>A <a name="IXT-3-239835" />parameter entity reference is declared much
like a general entity reference. However, an extra percent sign is
placed between the <tt class="literal">&lt;!ENTITY</tt> and the name of the
entity. For example:
</p>

<blockquote><pre class="code">&lt;!ENTITY % residential_content "address, footage, rooms, baths"&gt;
&lt;!ENTITY % rental_content      "rent"&gt;
&lt;!ENTITY % purchase_content    "price"&gt;</pre></blockquote>

<p>Parameter entities are dereferenced in the same way as a general
entity reference, only with a percent sign instead of an ampersand:
</p>

<blockquote><pre class="code">&lt;!ELEMENT apartment (%residential_content;, %rental_content;)&gt;
&lt;!ELEMENT sublet    (%residential_content;, %rental_content;)&gt;
&lt;!ELEMENT coop      (%residential_content;, %purchase_content;)&gt;
&lt;!ELEMENT condo     (%residential_content;, %purchase_content;)&gt;
&lt;!ELEMENT house     (%residential_content;, %purchase_content;)&gt;</pre></blockquote>

<p>When the parser reads these declarations, it substitutes the
entity's replacement text for the entity reference.
Now all you have to do to add an <tt class="literal">available_date</tt>
element to the content specification of all five listing types is add
it to the <tt class="literal">residential_content</tt> entity like this:
</p>

<blockquote><pre class="code">&lt;!ENTITY % residential_content "address, footage, rooms,
                                baths, available_date"&gt;</pre></blockquote>

<p>The same technique works equally well for attribute types and element
names. You'll see several examples of this in the
next chapter on namespaces and in <a href="ch09_01.htm">Chapter 9</a>.
</p>

<p>This trick is limited to <a name="IXT-3-239836" />external DTDs.
<a name="IXT-3-239837" />Internal DTD subsets do not allow
parameter entity references to be only part of a markup declaration.
However, parameter entity references can be used in internal DTD
subsets to insert one or more entire markup declarations, typically
through external parameter entities.
</p>

</div>
<a name="xmlnut2-CHP-3-SECT-7.2" /><div class="sect2">
<h3 class="sect2">3.7.2. Redefining Parameter Entities</h3>

<p><a name="IXT-3-239838" />What
makes parameter entity references particularly powerful is that they
can be redefined. If a document uses both internal and external DTD
subsets, then the internal DTD subset can specify new replacement
text for the entities. If <tt class="literal">ELEMENT</tt> and
<tt class="literal">ATTLIST</tt> declarations in the external DTD subset
are written indirectly with parameter entity references instead of
directly with literal element names, the internal DTD subset can
change the DTD for the document. For instance, a single document
could add a <tt class="literal">bedrooms</tt> child element to the listings
by redefining the <tt class="literal">residential_content</tt> entity like
this:
</p>

<blockquote><pre class="code">&lt;!ENTITY % residential_content "address, footage, rooms,
                                bedrooms, baths, available_date"&gt;</pre></blockquote>

<p>In the event of conflicting entity declarations, the first one
encountered takes precedence. The parser reads the internal DTD
subset first. Thus the internal definition of the
<tt class="literal">residential_content</tt> entity is used. When the
parser reads the external DTD subset, every declaration that uses the
<tt class="literal">residential_content</tt> entity will contain a
<tt class="literal">bedrooms</tt> child element it
wouldn't otherwise have.
</p>

<p>Modular XHTML, which we'll discuss in <a href="ch07_01.htm">Chapter 7</a>, makes heavy use of this technique to allow
particular documents to select only the subset of HTML that they
actually need.
</p>

</div>
<a name="xmlnut2-CHP-3-SECT-7.3" /><div class="sect2">
<h3 class="sect2">3.7.3. External DTD Subsets</h3>

<p>Real-world <a name="IXT-3-239839" />DTDs can be quite complex. The SVG DTD is
over 1,000 lines long. The XHTML 1.0 strict DTD (the smallest of the
three XHTML DTDs) is more than 1,500 lines long. And these are only
medium-sized DTDs. The DocBook XML DTD is over 11,000 lines long. It
can be hard to work with, comprehend, and modify such a large DTD
when it's stored in a single monolithic file.
</p>

<p>Fortunately, DTDs can be broken up into independent pieces. For
instance, the DocBook DTD is distributed in 28 separate pieces
covering different parts of the spec: one for tables, one for
notations, one for entity declarations, and so on. These different
pieces are then combined at validation time using
<a name="IXT-3-239840" /><em class="emphasis">external parameter entity
references</em>.
</p>

<p>An external parameter entity is declared using a normal
<tt class="literal">ENTITY</tt> declaration with a % sign just like a
normal parameter entity. However, rather than including the
replacement text directly, the declaration contains the
<tt class="literal">SYSTEM</tt> keyword followed by a URI to the DTD piece
it wants to include. For example, the following
<tt class="literal">ENTITY</tt> declaration defines an external entity
called names whose content is taken from the file at the relative URI
<em class="emphasis">names.dtd</em>. Then the parameter
entity reference <tt class="literal">%names;</tt> inserts the contents of
that file into the current DTD.
</p>

<blockquote><pre class="code">&lt;!ENTITY % names SYSTEM "names.dtd"&gt;
%names;</pre></blockquote>

<p>You can use either relative or absolute URIs as convenient. In most
situations, relative URIs are <a name="IXTR3-144" />more practical.
</p>

</div>


<hr width="684" align="left" />
<div class="navbar"><table width="684" border="0"><tr><td align="left" valign="top" width="228"><a href="ch03_06.htm"><img src="../gifs/txtpreva.gif" alt="Previous" border="0" /></a></td><td align="center" valign="top" width="228"><a href="index.htm"><img src="../gifs/txthome.gif" alt="Home" border="0" /></a></td><td align="right" valign="top" width="228"><a href="ch03_08.htm"><img src="../gifs/txtnexta.gif" alt="Next" border="0" /></a></td></tr><tr><td align="left" valign="top" width="228">3.6. External Unparsed Entities and Notations</td><td align="center" valign="top" width="228"><a href="index/index.htm"><img src="../gifs/index.gif" alt="Book Index" border="0" /></a></td><td align="right" valign="top" width="228">3.8. Conditional Inclusion</td></tr></table></div>
<hr width="684" align="left" />

<img src="../gifs/navbar.gif" usemap="#library-map" border="0" alt="Library Navigation Links" />
<p><p><font size="-1"><a href="copyrght.htm">Copyright &copy; 2002</a> O'Reilly &amp; Associates. All rights reserved.</font></p>

<map name="library-map">
<area shape="rect" coords="0,0,85,93" href="../index.htm"><area shape="rect" coords="85,0,180,98" href="../sax2/index.htm"><area shape="rect" coords="182,-1,261,100" href="index.htm"><area shape="rect" coords="263,1,384,96" href="../jxml/index.htm"><area shape="rect" coords="386,1,463,100" href="../jxslt/index.htm"><area shape="rect" coords="466,1,533,112" href="../xslt/index.htm"><area shape="rect" coords="535,-1,610,108" href="../schema/index.htm"><area shape="rect" coords="613,1,696,121" href="../pxml/index.htm">
</map>

</body></html>