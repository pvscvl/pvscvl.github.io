<html><head><title>Two DTD Examples (XML in a Nutshell, 2nd Edition)</title><link rel="stylesheet" type="text/css" href="../style/style1.css" />

<meta name="DC.Creator" content="Elliotte Rusty Harold and W. Scott Means" /><meta name="DC.Format" content="text/xml" scheme="MIME" /><meta name="DC.Language" content="en-US" /><meta name="DC.Publisher" content="O'Reilly &amp; Associates, Inc." /><meta name="DC.Source" scheme="ISBN" content="0-596-00292-0" /><meta name="DC.Subject.Keyword" content="stuff" /><meta name="DC.Title" content="XML in a Nutshell, 2nd Edition" /><meta name="DC.Type" content="Text.Monograph" />

</head><body bgcolor="#ffffff">

<img src="gifs/smbanner.gif" usemap="#banner-map" border="0" alt="Book Home" /><map name="banner-map"><area shape="rect" coords="1,-2,616,66" href="index.htm" alt="XML in a Nutshell" /><area shape="rect" coords="629,-11,726,25" href="jobjects/fsearch.htm" alt="Search this book" /></map>

<div class="navbar"><table width="684" border="0"><tr><td align="left" valign="top" width="228"><a href="ch03_08.htm"><img src="../gifs/txtpreva.gif" alt="Previous" border="0" /></a></td><td align="center" valign="top" width="228" /><td align="right" valign="top" width="228"><a href="ch03_10.htm"><img src="../gifs/txtnexta.gif" alt="Next" border="0" /></a></td></tr></table></div>



<h2 class="sect1">3.9. Two DTD Examples</h2>

<p>Some of the best techniques for DTD design only become apparent when
you look at larger documents. In this section, we'll
develop DTDs that cover the two different document formats for
describing people that were presented in <a href="ch02_03.htm">Example 2-4</a>
and <a href="ch02_03.htm">Example 2-5</a> of the last chapter.
</p>

<a name="xmlnut2-CHP-3-SECT-9.1" /><div class="sect2">
<h3 class="sect2">3.9.1. Data-Oriented DTDs</h3>

<p>Data-<a name="IXT-3-239845" />
<a name="IXT-3-239846" />oriented
DTDs are very straightforward. They make heavy use of sequences,
occasional use of choices, and almost no use of mixed content. <a href="ch03_09.htm">Example 3-6</a> shows such a DTD. Since this is a small
example, and since it's easier to understand when
both the document and the DTD are on the same page,
we've made this an internal DTD included in the
document. <a name="IXT-3-239847" />However, it would be easy to take it out
and put it in a separate file.
</p>

<a name="xmlnut2-CHP-3-EX-6" /><div class="example">
<h4 class="objtitle">Example 3-6. A flexible yet data-oriented DTD describing people </h4>
<blockquote><pre class="code">&lt;?xml version="1.0"?&gt;
&lt;!DOCTYPE person  [
  &lt;!ELEMENT person (name+, profession*)&gt;
  &lt;!ELEMENT name EMPTY&gt;
  &lt;!ATTLIST name first CDATA #REQUIRED
                 last  CDATA #REQUIRED&gt;
  &lt;!-- The first and last attributes are required to be present
       but they may be empty. For example,
       &lt;name first="Cher" last=""&gt; --&gt;
  &lt;!ELEMENT profession EMPTY&gt;
  &lt;!ATTLIST profession value CDATA #REQUIRED&gt;
]&gt;
&lt;person&gt;
  &lt;name first="Alan" last="Turing"/&gt;
  &lt;profession value="computer scientist"/&gt;
  &lt;profession value="mathematician"/&gt;
  &lt;profession value="cryptographer"/&gt;
&lt;/person&gt;</pre></blockquote>
</div>

<p>The DTD here is contained completely inside the internal DTD subset.
First a person <tt class="literal">ELEMENT</tt> declaration states that
each <tt class="literal">person</tt> must have one or more
<tt class="literal">name</tt> children, and zero or more
<tt class="literal">profession</tt> children, in that order. This allows
for the possibility that a person changes his name or uses aliases.
It assumes that each person has at least one name but may not have a
profession.
</p>

<p>This declaration also requires that all <tt class="literal">name</tt>
elements precede all <tt class="literal">profession</tt> elements. Here the
DTD is less flexible than it ideally would be.
There's no particular reason that the names have to
come first. However, if we were to allow more random ordering, it
would be hard to say that there must be at least one
<tt class="literal">name</tt>. One of the weaknesses of DTDs is that it
occasionally forces extra sequence order on you when all you really
need is a constraint on the number of some element. Schemas are more
flexible in this regard.
</p>

<p>Both <tt class="literal">name</tt> and <tt class="literal">profession</tt>
elements are empty so their declarations are very simple. The
attribute declarations are a little more complex. In all three cases
the form of the attribute is open, so all three attributes are
declared to have type <tt class="literal">CDATA</tt>. All three are also
required. However, note the use of comments to suggest a solution for
edge cases such as celebrities with no last names. Comments are an
essential tool for making sense of otherwise obfuscated DTDs.
</p>

</div>
<a name="xmlnut2-CHP-3-SECT-9.2" /><div class="sect2">
<h3 class="sect2">3.9.2. Narrative-Oriented DTDs</h3>

<p><a name="IXT-3-239848" />
<a name="IXT-3-239849" />Narrative-oriented
DTDs tend be a lot looser and make much heavier use of mixed content
than do DTDs that describe more database-like documents.
Consequently, they tend to be written from the bottom up, starting
with the smallest elements and building up to the largest. They also
tend to use parameter entities to group together similar content
specifications and attribute lists.
</p>

<p><a href="ch03_09.htm">Example 3-7</a> is a standalone DTD for biographies like
the one shown in <a href="ch02_03.htm">Example 2-5</a> of the last chapter.
Notice that not everything it declares is actually present in <a href="ch02_03.htm">Example 2-5</a>. That's often the case with
narrative documents. For instance, not all web pages contain
unordered lists, but the XHTML DTD still needs to declare the
<tt class="literal">ul</tt> element for those XHTML documents that do
include them. Also, notice that a few attributes present in <a href="ch02_03.htm">Example 2-5</a> have been made into fixed defaults here. Thus,
they could be omitted from the document itself, once it is attached
to this DTD.
</p>

<a name="xmlnut2-CHP-3-EX-7" /><div class="example">
<h4 class="objtitle">Example 3-7. A narrative-oriented DTD for biographies </h4>
<blockquote><pre class="code">&lt;!ATTLIST biography xmlns:xlink CDATA #FIXED
                                       "http://www.w3.org/1999/xlink"&gt;

&lt;!ELEMENT person (first_name, last_name)&gt;
&lt;!-- Birth and death dates are given in the form yyyy/mm/dd --&gt;
&lt;!ATTLIST person born CDATA #IMPLIED
                 died CDATA #IMPLIED&gt;

&lt;!ELEMENT date   (month, day, year)&gt;
&lt;!ELEMENT month  (#PCDATA)&gt;
&lt;!ELEMENT day    (#PCDATA)&gt;
&lt;!ELEMENT year   (#PCDATA)&gt;

&lt;!-- xlink:href must contain a URI.--&gt;
&lt;!ATTLIST emphasize xlink:type (simple) #IMPLIED
                    xlink:href CDATA   #IMPLIED&gt;

&lt;!ELEMENT profession (#PCDATA)&gt;
&lt;!ELEMENT footnote   (#PCDATA)&gt;

&lt;!-- The source is given according to the Chicago Manual of Style
     citation conventions --&gt;
&lt;!ATTLIST footnote source CDATA #REQUIRED&gt;

&lt;!ELEMENT first_name (#PCDATA)&gt;
&lt;!ELEMENT last_name  (#PCDATA)&gt;

&lt;!ELEMENT image EMPTY&gt;
&lt;!ATTLIST image source CDATA   #REQUIRED
                width  NMTOKEN #REQUIRED
                height NMTOKEN #REQUIRED
                ALT    CDATA   #IMPLIED
&gt;
&lt;!ENTITY % top_level "( #PCDATA | image | paragraph | definition 
                      | person | profession | emphasize | last_name
                      | first_name | footnote | date )*"&gt;

&lt;!ELEMENT paragraph  %top_level; &gt;
&lt;!ELEMENT definition %top_level; &gt;
&lt;!ELEMENT emphasize  %top_level; &gt;
&lt;!ELEMENT biography  %top_level; &gt;</pre></blockquote>
</div>

<p>The root <tt class="literal">biography</tt> element has a classic
mixed-content declaration. Since there are several elements that can
contain other elements in a fairly unpredictable fashion, we group
all the possible top-level elements (elements that appear as
immediate children of the root element) in a single
<tt class="literal">top_level</tt> entity reference. Then we can make all
of them potential children of each other in a straightforward way.
This also makes it much easier to add new elements in the future.
That's important since this one small example is
almost certainly not broad enough to cover all possible biographies.
</p>

</div>


<hr width="684" align="left" />
<div class="navbar"><table width="684" border="0"><tr><td align="left" valign="top" width="228"><a href="ch03_08.htm"><img src="../gifs/txtpreva.gif" alt="Previous" border="0" /></a></td><td align="center" valign="top" width="228"><a href="index.htm"><img src="../gifs/txthome.gif" alt="Home" border="0" /></a></td><td align="right" valign="top" width="228"><a href="ch03_10.htm"><img src="../gifs/txtnexta.gif" alt="Next" border="0" /></a></td></tr><tr><td align="left" valign="top" width="228">3.8. Conditional Inclusion</td><td align="center" valign="top" width="228"><a href="index/index.htm"><img src="../gifs/index.gif" alt="Book Index" border="0" /></a></td><td align="right" valign="top" width="228">3.10. Locating Standard DTDs </td></tr></table></div>
<hr width="684" align="left" />

<img src="../gifs/navbar.gif" usemap="#library-map" border="0" alt="Library Navigation Links" />
<p><p><font size="-1"><a href="copyrght.htm">Copyright &copy; 2002</a> O'Reilly &amp; Associates. All rights reserved.</font></p>

<map name="library-map">
<area shape="rect" coords="0,0,85,93" href="../index.htm"><area shape="rect" coords="85,0,180,98" href="../sax2/index.htm"><area shape="rect" coords="182,-1,261,100" href="index.htm"><area shape="rect" coords="263,1,384,96" href="../jxml/index.htm"><area shape="rect" coords="386,1,463,100" href="../jxslt/index.htm"><area shape="rect" coords="466,1,533,112" href="../xslt/index.htm"><area shape="rect" coords="535,-1,610,108" href="../schema/index.htm"><area shape="rect" coords="613,1,696,121" href="../pxml/index.htm">
</map>

</body></html>