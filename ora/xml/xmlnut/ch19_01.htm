<html><head><title>Simple API for XML (SAX) (XML in a Nutshell, 2nd Edition)</title><link rel="stylesheet" type="text/css" href="../style/style1.css" />

<meta name="DC.Creator" content="Elliotte Rusty Harold and W. Scott Means" /><meta name="DC.Format" content="text/xml" scheme="MIME" /><meta name="DC.Language" content="en-US" /><meta name="DC.Publisher" content="O'Reilly &amp; Associates, Inc." /><meta name="DC.Source" scheme="ISBN" content="0-596-00292-0" /><meta name="DC.Subject.Keyword" content="stuff" /><meta name="DC.Title" content="XML in a Nutshell, 2nd Edition" /><meta name="DC.Type" content="Text.Monograph" />

</head><body bgcolor="#ffffff">

<img src="gifs/smbanner.gif" usemap="#banner-map" border="0" alt="Book Home" /><map name="banner-map"><area shape="rect" coords="1,-2,616,66" href="index.htm" alt="XML in a Nutshell" /><area shape="rect" coords="629,-11,726,25" href="jobjects/fsearch.htm" alt="Search this book" /></map>

<div class="navbar"><table width="684" border="0"><tr><td align="left" valign="top" width="228"><a href="ch18_07.htm"><img src="../gifs/txtpreva.gif" alt="Previous" border="0" /></a></td><td align="center" valign="top" width="228" /><td align="right" valign="top" width="228"><a href="ch19_02.htm"><img src="../gifs/txtnexta.gif" alt="Next" border="0" /></a></td></tr></table></div>


<h1 class="chapter">Chapter 19. Simple API for XML (SAX)</h1>
<div class="htmltoc"><h4 class="tochead">Contents:</h4><p>
<a href="ch19_01.htm">The ContentHandler Interface</a><br />
<a href="ch19_02.htm">SAX Features and Properties</a><br />
<a href="ch19_03.htm">Filters</a><br /></p></div><p><a name="xmlnut2-IDXTERM-1684" />The Simple API for XML
(SAX) is a straightforward, event-based API for reading XML
documents. Many different XML parsers, including Xerces, Crimson,
MSXML, the Oracle XML Parser for Java, and &#xC6;lfred,
implement the SAX API. SAX was originally defined as a Java API and
is primarily intended for parsers written in Java. Therefore, this
chapter focuses on the Java version of the API. However, SAX has been
ported to most other major object-oriented languages, including C++,
Python, Perl, and Eiffel. The translation from Java is usually fairly
obvious.
</p><p>The <a name="IXT-19-239924" />SAX API
is unusual among XML APIs because it's an
event-based push model rather than a tree-based pull model. As the
XML parser reads an XML document, it sends your program information
from the document in real time. Each time the parser sees a
start-tag, an end-tag, character data, or a processing instruction,
it tells your program. The document is presented to your program one
piece at a time from beginning to end. You can either save the pieces
you're interested in until the entire document has
been read or process the information as soon as you receive it. You
do not have to wait for the entire document to be read before acting
on the data at the beginning of the document. Most importantly, the
entire document does not have to reside in memory. This feature makes
SAX the API of choice for very large documents that do not fit into
available memory.
</p><a name="ch19-3-fm2xml" /><blockquote><b>TIP:</b> 
This chapter covers SAX2 exclusively. In 2002 all major parsers that
support SAX support SAX2. The major change in SAX2 from SAX1 is the
addition of namespace support. This addition necessitated changing
the names and signatures of almost every method and class in SAX. The
old SAX1 methods and classes are still available, but
they're now deprecated, and you
shouldn't use them. </p>
</blockquote><p>SAX is primarily a
collection of interfaces in the
<tt class="literal">org.xml.sax</tt><a name="IXT-19-239925" /> <a name="IXT-19-239926" />
package. One such interface is
<tt class="literal">XMLReader</tt><a name="IXT-19-239927" /> <a name="IXT-19-239928" />.
This interface represents the XML parser. It declares methods to
parse a document and configure the parsing process, for instance, by
turning validation on or off. To parse a document with
<a name="IXT-19-239929" />SAX, first create an instance of
<tt class="literal">XMLReader</tt> with the
<tt class="literal">XMLReaderFactory</tt><a name="IXT-19-239930" /> <a name="IXT-19-239931" /> class in the
<tt class="literal">org.xml.sax.helpers</tt> package. This class has a
static <a name="IXT-19-239932" /><tt class="literal">createXMLReader( )</tt>
factory method that produces the parser-specific implementation of
the <tt class="literal">XMLReader</tt> interface. The Java system property
<tt class="literal">org.xml.sax.driver</tt> specifies the concrete class to
instantiate: </p><blockquote><pre class="code">try {
  XMLReader parser = XMLReaderFactory.createXMLReader( );
  // parse the document...
}
catch (SAXException e) {
  // couldn't create the XMLReader
}</pre></blockquote><p>The call to <tt class="literal">XMLReaderFactory.createXMLReader( )</tt> is
wrapped in a <tt class="literal">try</tt>-<tt class="literal">catch</tt> block
that catches
<tt class="literal">SAXException</tt><a name="IXT-19-239933" /> <a name="IXT-19-239934" />.
This is the generic checked exception superclass for almost anything
that can go wrong while parsing an XML document. In this case, it
means either that the <tt class="literal">org.xml.sax.driver</tt> system
property wasn't set or that it was set to the name
of a class that Java couldn't find in the class
path.
</p><p>You can choose which concrete class to instantiate by passing its
name as a string to the <tt class="literal">createXMLReader( )</tt> method.
This code fragment instantiates the Xerces parser by name:
</p><blockquote><pre class="code">try {
  XMLReader parser = XMLReaderFactory.createXMLReader(
   "org.apache.xerces.parsers.SAXParser");
  // parse the document...
}
catch (SAXException e) {
  // couldn't create the XMLReader
}</pre></blockquote><p>Now that you've created a parser,
you're ready to parse some documents with it. Pass
the system ID of the document you want to parse to the
<a name="IXT-19-239935" /><tt class="literal">parse( )</tt> method. The
system ID is either an absolute or a relative URL encoded in a
string. For example, this code fragment parses the document at
<em class="emphasis">http://www.slashdot.org/slashdot.xml</em>:
</p><blockquote><pre class="code">try {
  XMLReader parser = XMLReaderFactory.createXMLReader( );
  parser.parse("http://www.slashdot.org/slashdot.xml");
}
catch (SAXParseException e) {
  // Well-formedness error
}
catch (SAXException e) {
  // Could not find an XMLReader implementation class
}
catch (IOException e) {
  // Some sort of I/O error prevented the document from being completely
  // downloaded from the server
}</pre></blockquote><p>The <tt class="literal">parse( )</tt> method throws a
<tt class="literal">SAXParseException</tt> if the document is malformed, an
<tt class="literal">IOException</tt> if an I/O error such as a broken
socket occurs while the document is being read, and a
<tt class="literal">SAXException</tt> if anything else goes wrong.
Otherwise, it returns <tt class="literal">void</tt>. To receive information
from the parser as it reads the document, you must configure it with
a <tt class="literal">ContentHandler</tt>.
</p><div class="sect1"><a name="xmlnut2-CHP-19-SECT-1" />
<h2 class="sect1">19.1. The ContentHandler Interface</h2>

<p><a name="xmlnut2-IDXTERM-1697" /> <a name="xmlnut2-IDXTERM-1698" /><tt class="literal">ContentHandler</tt>, shown
in stripped-down form in <a href="ch19_01.htm">Example 19-1</a>, is an
interface in the <a name="xmlnut2-IDXTERM-1699" /><tt class="literal">org.xml.sax</tt> package.
You implement this interface in a class of your own devising. Next,
you configure an <a name="IXT-19-239936" /><tt class="literal">XMLReader</tt> with an
instance of your implementation. As the <tt class="literal">XMLReader</tt>
reads the document, it invokes the methods in your object to tell
your program what's in the XML document. You can
respond to these method invocations in any way you see fit.
</p>



<a name="ch19-6-fm2xml" /><blockquote><b>TIP:</b> 
This class has no relation to the moribund
<tt class="literal">java.net.ContentHandler</tt><a name="IXT-19-239937" /> class. However, you may encounter a
name conflict if you import both <tt class="literal">java.net.*</tt> and
<tt class="literal">org.xml.sax.*</tt> in the same class.
It's better to import just the
<tt class="literal">java.net</tt> classes you actually need, rather than
the entire package.
</p>
</blockquote>

<a name="xmlnut2-CHP-19-EX-1" /><div class="example">
<h4 class="objtitle">Example 19-1. The org.xml.sax.ContentHandler Interface </h4>
<blockquote><pre class="code">package org.xml.sax;

public interface ContentHandler {
    public void setDocumentLocator(Locator locator);
    public void startDocument( ) throws SAXException;
    public void endDocument( ) throws SAXException;
    public void startPrefixMapping(String prefix, String uri)
     throws SAXException;
    public void endPrefixMapping(String prefix) throws SAXException;
    public void startElement(String namespaceURI, String localName,
     String qualifiedName, Attributes atts) throws SAXException;
    public void endElement(String namespaceURI, String localName,
     String qualifiedName) throws SAXException;
    public void characters(char[] text, int start, int length)
     throws SAXException;
    public void ignorableWhitespace(char[] text, int start, int length)
     throws SAXException;
    public void processingInstruction(String target, String data)
     throws SAXException;
    public void skippedEntity(String name) throws SAXException;

}</pre></blockquote>
</div>

<p>Every time the <tt class="literal">XMLReader</tt> reads a piece of the
document, it calls a method in its <tt class="literal">ContentHandler</tt>.
Suppose a parser reads the simple document shown in <a href="ch19_01.htm">Example 19-2</a>.
</p>

<a name="xmlnut2-CHP-19-EX-2" /><div class="example">
<h4 class="objtitle">Example 19-2. A simple XML document </h4>
<blockquote><pre class="code">&lt;?xml version="1.0" encoding="ISO-8859-1"?&gt;
&lt;?xml-stylesheet type='text/css' href='person.css'?&gt;
&lt;!DOCTYPE person SYSTEM "person.dtd"&gt;
&lt;person xmlns="http://xml.oreilly.com/person"&gt;
  &lt;name:name xmlns:name="http://xml.oreilly.com/name"&gt;
    &lt;name:first&gt;Sydney&lt;/name:first&gt;
    &lt;name:last&gt;Lee&lt;/name:last&gt;
  &lt;/name:name&gt;
  &lt;assignment project_id="p2"/&gt;
&lt;/person&gt;</pre></blockquote>
</div>

<p>The <a name="xmlnut2-IDXTERM-1702" /> <a name="xmlnut2-IDXTERM-1703" />parser will call these methods in its
<tt class="literal">ContentHandler</tt> with these arguments in this order.
The values of the arguments passed to each method are given after
each method name:
</p>
<a name="IXT-19-239938" />

<ol><li>
<blockquote><pre class="code">setDocumentLocator(Locator locator)
locator: org.apache.xerces.readers.DefaultEntityHandler@1f953d</pre></blockquote>

</li><li>
<a name="IXT-19-239939" /><blockquote><pre class="code">startDocument( )</pre></blockquote>

</li><li>
<a name="IXT-19-239940" /><blockquote><pre class="code">processingInstruction(String target, String data)
target: "xml-stylesheet"
data: "type='text/css' href='person.css'"</pre></blockquote>

</li><li>
<a name="IXT-19-239941" /><blockquote><pre class="code">startPrefixMapping(String prefix, String namespaceURI)
prefix: ""
namespaceURI: "http://xml.oreilly.com/person"</pre></blockquote>

</li><li>
<a name="IXT-19-239942" /><blockquote><pre class="code">startElement(String namespaceURI, String localName, 
String qualifiedName, Attributes atts)
namespaceURI: "http://xml.oreilly.com/person"
localName: "person"
qualifiedName: "person"
atts: {} (no attributes, an empty list)</pre></blockquote>

</li><li>
<a name="ch19-idx-976802-1" /><blockquote><pre class="code">ignorableWhitespace(char[] text, int start, int length)
text: &lt;?xml version="1.0" encoding="ISO-8859-1"?&gt;
&lt;?xml-stylesheet type='text/css' href='person.css'?&gt;
&lt;!DOCTYPE person SYSTEM "person.dtd"&gt;
&lt;person xmlns="http://xml.oreilly.com/person"&gt;
  &lt;name:name xmlns:name="http://xml.oreilly.com/name"&gt;
    &lt;name:first&gt;Sydney&lt;/name:first&gt;
    &lt;name:last&gt;Lee&lt;/name:last&gt;
  &lt;/name:name&gt;
  &lt;assignment project_id="p2"/&gt;
&lt;/person&gt;
start: 181
length: 3</pre></blockquote>

</li><li>
<blockquote><pre class="code">startPrefixMapping(String prefix, String uri)
prefix: "name"
uri: "http://xml.oreilly.com/name")</pre></blockquote>

</li><li>
<blockquote><pre class="code">startElement(String namespaceURI, String localName, 
String qualifiedName, Attributes atts)
namespaceURI: "http://xml.oreilly.com/name"
localName: "name"
qualifiedName: "name:name"
atts: {} (no attributes, an empty list)</pre></blockquote>

</li><li>
<blockquote><pre class="code">ignorableWhitespace(char[] text, int start, int length)
text: &lt;?xml version="1.0" encoding="ISO-8859-1"?&gt;
&lt;?xml-stylesheet type='text/css' href='person.css'?&gt;
&lt;!DOCTYPE person SYSTEM "person.dtd"&gt;
&lt;person xmlns="http://xml.oreilly.com/person"&gt;
  &lt;name:name xmlns:name="http://xml.oreilly.com/name"&gt;
    &lt;name:first&gt;Sydney&lt;/name:first&gt;
    &lt;name:last&gt;Lee&lt;/name:last&gt;
  &lt;/name:name&gt;
  &lt;assignment project_id="p2"/&gt;
&lt;/person&gt;
start: 236
length: 5</pre></blockquote>

</li><li>
<blockquote><pre class="code">startElement(String namespaceURI, String localName, 
String qualifiedName, Attributes atts)
namespaceURI: "http://xml.oreilly.com/name"
localName: "first"
qualifiedName: "name:first"
atts: {} (no attributes, an empty list)</pre></blockquote>

</li><li>
<a name="IXT-19-239943" /><blockquote><pre class="code">characters(char[] text, int start, int length)
text: &lt;?xml version="1.0" encoding="ISO-8859-1"?&gt;
&lt;?xml-stylesheet type='text/css' href='person.css'?&gt;
&lt;!DOCTYPE person SYSTEM "person.dtd"&gt;
&lt;person xmlns="http://xml.oreilly.com/person"&gt;
  &lt;name:name xmlns:name="http://xml.oreilly.com/name"&gt;
    &lt;name:first&gt;Sydney&lt;/name:first&gt;
    &lt;name:last&gt;Lee&lt;/name:last&gt;
  &lt;/name:name&gt;
  &lt;assignment project_id="p2"/&gt;
&lt;/person&gt;
start: 253
length: 6</pre></blockquote>

</li><li>
<a name="IXT-19-239944" /><blockquote><pre class="code">endElement(String namespaceURI, String localName, String qualifiedName)
namespaceURI: "http://xml.oreilly.com/name"
localName: "first"
qualifiedName: "name:first"</pre></blockquote>

</li><li>
<blockquote><pre class="code">ignorableWhitespace(char[] text, int start, int length)
text: &lt;?xml version="1.0" encoding="ISO-8859-1"?&gt;
&lt;?xml-stylesheet type='text/css' href='person.css'?&gt;
&lt;!DOCTYPE person SYSTEM "person.dtd"&gt;
&lt;person xmlns="http://xml.oreilly.com/person"&gt;
  &lt;name:name xmlns:name="http://xml.oreilly.com/name"&gt;
    &lt;name:first&gt;Sydney&lt;/name:first&gt;
    &lt;name:last&gt;Lee&lt;/name:last&gt;
  &lt;/name:name&gt;
  &lt;assignment project_id="p2"/&gt;
&lt;/person&gt;
start: 272
length: 5</pre></blockquote>

</li><li>
<blockquote><pre class="code">startElement(String namespaceURI, String localName, String qualifiedName, Attributes atts)
namespaceURI: "http://xml.oreilly.com/name"
localName: "last"
qualifiedName: "name:last"
atts: {} (no attributes, an empty list)</pre></blockquote>

</li><li>
<blockquote><pre class="code">characters(char[] text, int start, int length)
text: &lt;?xml version="1.0" encoding="ISO-8859-1"?&gt;
&lt;?xml-stylesheet type='text/css' href='person.css'?&gt;
&lt;!DOCTYPE person SYSTEM "person.dtd"&gt;
&lt;person xmlns="http://xml.oreilly.com/person"&gt;
  &lt;name:name xmlns:name="http://xml.oreilly.com/name"&gt;
    &lt;name:first&gt;Sydney&lt;/name:first&gt;
    &lt;name:last&gt;Lee&lt;/name:last&gt;
  &lt;/name:name&gt;
  &lt;assignment project_id="p2"/&gt;
&lt;/person&gt;
start: 288
length: 3</pre></blockquote>

</li><li>
<blockquote><pre class="code">endElement(String namespaceURI, String localName, String qualifiedName)
namespaceURI: "http://xml.oreilly.com/name"
localName: "last"
qualifiedName: "name:last"</pre></blockquote>

</li><li>
<blockquote><pre class="code">ignorableWhitespace(char[] text, int start, int length)
text: &lt;?xml version="1.0" encoding="ISO-8859-1"?&gt;
&lt;?xml-stylesheet type='text/css' href='person.css'?&gt;
&lt;!DOCTYPE person SYSTEM "person.dtd"&gt;
&lt;person xmlns="http://xml.oreilly.com/person"&gt;
  &lt;name:name xmlns:name="http://xml.oreilly.com/name"&gt;
    &lt;name:first&gt;Sydney&lt;/name:first&gt;
    &lt;name:last&gt;Lee&lt;/name:last&gt;
  &lt;/name:name&gt;
  &lt;assignment project_id="p2"/&gt;
&lt;/person&gt;
start: 303
length: 3</pre></blockquote>

</li><li>
<blockquote><pre class="code">endElement(String namespaceURI, String localName, String qualifiedName)
namespaceURI: "http://xml.oreilly.com/name"
localName: "name"
qualifiedName: "name:name"</pre></blockquote>

</li><li>
<a name="IXT-19-239945" /><blockquote><pre class="code">endPrefixMapping(String prefix)
prefix: "name"</pre></blockquote>

</li><li>
<blockquote><pre class="code">ignorableWhitespace(char[] text, int start, int length)
text: &lt;?xml version="1.0" encoding="ISO-8859-1"?&gt;
&lt;?xml-stylesheet type='text/css' href='person.css'?&gt;
&lt;!DOCTYPE person SYSTEM "person.dtd"&gt;
&lt;person xmlns="http://xml.oreilly.com/person"&gt;
  &lt;name:name xmlns:name="http://xml.oreilly.com/name"&gt;
    &lt;name:first&gt;Sydney&lt;/name:first&gt;
    &lt;name:last&gt;Lee&lt;/name:last&gt;
  &lt;/name:name&gt;
  &lt;assignment project_id="p2"/&gt;
&lt;/person&gt;
start: 318
length: 3</pre></blockquote>

</li><li>
<blockquote><pre class="code">startElement(String namespaceURI, String localName, String qualifiedName, Attributes atts)
namespaceURI: "http://xml.oreilly.com/person"
localName: "assignment"
qualifiedName: "assignment
atts: {project_id="p2"}</pre></blockquote>

</li><li>
<blockquote><pre class="code">endElement(String namespaceURI, String localName, String qualifiedName)
namespaceURI: "http://xml.oreilly.com/person"
localName: "assignment"
qualifiedName: "assignment"</pre></blockquote>

</li><li>
<a name="IXTR3-157" /><blockquote><pre class="code">ignorableWhitespace(char[] text, int start, int length)
text: &lt;?xml version="1.0" encoding="ISO-8859-1"?&gt;
&lt;?xml-stylesheet type='text/css' href='person.css'?&gt;
&lt;!DOCTYPE person SYSTEM "person.dtd"&gt;
&lt;person xmlns="http://xml.oreilly.com/person"&gt;
  &lt;name:name xmlns:name="http://xml.oreilly.com/name"&gt;
    &lt;name:first&gt;Sydney&lt;/name:first&gt;
    &lt;name:last&gt;Lee&lt;/name:last&gt;
  &lt;/name:name&gt;
  &lt;assignment project_id="p2"/&gt;
&lt;/person&gt;
start: 350
length: 1</pre></blockquote>

</li><li>
<blockquote><pre class="code">endElement(String namespaceURI, String localName, String qualifiedName)
namespaceURI: "http://xml.oreilly.com/person"
localName: "person"
qualifiedName: "person"</pre></blockquote>

</li><li>
<blockquote><pre class="code">endPrefixMapping(String prefix)
prefix: ""</pre></blockquote>

</li><li>
<a name="IXT-19-239946" /><blockquote><pre class="code">endDocument( )</pre></blockquote>

</li></ol>

<p>Some <a name="IXTR3-158" />
<a name="IXTR3-159" />pieces
<a name="IXT-19-239947" />of this are not deterministic. Note
that the <tt class="literal">char</tt> array passed to each call to
<tt class="literal">characters( )</tt> and <tt class="literal">ignorableWhitespace(
)</tt> actually contains the entire document! The specific text
block that the parser really returns is indicated by the second two
arguments. This is an optimization that Xerces-J performs. Other
parsers are free to pass different <tt class="literal">char</tt> arrays as
long as they set the <tt class="literal">start</tt> and
<tt class="literal">length</tt> arguments to match. Indeed, the parser is
also free to split a long run of plain text across multiple calls to
<tt class="literal">characters( )</tt> or <tt class="literal">ignorableWhitespace(
)</tt>, so you cannot assume that these methods necessarily
return the longest possible contiguous run of plain text. Other
details that may change from parser to parser include attribute order
within a tag and whether a <tt class="literal">Locator</tt> object is
provided by calling <tt class="literal">setDocumentLocator( )</tt>.
</p>

<p>Suppose <a name="xmlnut2-IDXTERM-1707" />you want to count the
number of elements, attributes, processing instructions, and
characters of plain text that exist in a given XML document. To do
so, first write a class that implements the
<tt class="literal">ContentHandler</tt> interface. The current count of
each of the four items of interest is stored in a field. The field
values are initialized to zero in the
<a name="IXT-19-239948" /><tt class="literal">startDocument( )</tt>
method, which is called exactly once for each document parsed. Each
callback method in the class increments the relevant field. The
<tt class="literal">endDocument( )</tt> method reports the total for that
document. <a href="ch19_01.htm">Example 19-3</a> is such a class.
</p>

<a name="xmlnut2-CHP-19-EX-3" /><div class="example">
<h4 class="objtitle">Example 19-3. The XMLCounter ContentHandler </h4>
<blockquote><pre class="code">import org.xml.sax.*;

public class XMLCounter implements ContentHandler {

  private int numberOfElements;
  private int numberOfAttributes;
  private int numberOfProcessingInstructions;
  private int numberOfCharacters;

  public void startDocument( ) throws SAXException {
    numberOfElements = 0;
    numberOfAttributes = 0;
    numberOfProcessingInstructions = 0;
    numberOfCharacters = 0;
  }

  // We should count either the start-tag of the element or the end-tag,
  // but not both. Empty elements are reported by each of these methods.
  public void startElement(String namespaceURI, String localName,
   String qualifiedName, Attributes atts) throws SAXException {
    numberOfElements++;
    numberOfAttributes += atts.getLength( );
  }

  public void endElement(String namespaceURI, String localName,
   String qualifiedName) throws SAXException {}

  public void characters(char[] text, int start, int length)
   throws SAXException {
    numberOfCharacters += length;
  }

  public void ignorableWhitespace(char[] text, int start, int length)
   throws SAXException {
    numberOfCharacters += length;
  }

  public void processingInstruction(String target, String data)
   throws SAXException {
    numberOfProcessingInstructions++;
  }

  // Now that the document is done, we can print out the final results
  public void endDocument( ) throws SAXException {
    System.out.println("Number of elements: " + numberOfElements);
    System.out.println("Number of attributes: " + numberOfAttributes);
    System.out.println("Number of processing instructions: "
     + numberOfProcessingInstructions);
    System.out.println("Number of characters of plain text: "
     + numberOfCharacters);
  }

  // Do-nothing methods we have to implement only to fulfill
  // the interface requirements:
  public void setDocumentLocator(Locator locator) {}
  public void startPrefixMapping(String prefix, String uri)
   throws SAXException {}
  public void endPrefixMapping(String prefix) throws SAXException {}
  public void skippedEntity(String name) throws SAXException {}

}</pre></blockquote>
</div>



<a name="ch19-8-fm2xml" /><blockquote><b>TIP:</b> 
This class needs to override most methods in the
<a name="IXT-19-239949" /><tt class="literal">ContentHandler</tt>
interface. However, if you only really want to provide one or two
<tt class="literal">ContentHandler</tt> methods, you may want to subclass
the
<tt class="literal">DefaultHandler</tt><a name="IXT-19-239950" /> <a name="IXT-19-239951" /> class instead. This adapter class
implements all methods in the <tt class="literal">ContentHandler</tt>
interface with do-nothing methods, so you only have to override
methods in which you're genuinely interested.</p>
</blockquote>

<p>Next, build an <a name="IXT-19-239952" /><tt class="literal">XMLReader</tt>, and
configure it with an instance of this class. Finally, parse the
documents you want to count, as in <a href="ch19_01.htm">Example 19-4</a>.
</p>


<a name="xmlnut2-CHP-19-EX-4" /><div class="example">
<h4 class="objtitle">Example 19-4. The DocumentStatistics driver class  </h4>
<blockquote><pre class="code">import org.xml.sax.*;
import org.xml.sax.helpers.*;
import java.io.IOException;

public class DocumentStatistics {

  public static void main(String[] args) {

    XMLReader parser;
    try {
     parser = XMLReaderFactory.createXMLReader( );
    }
    catch (SAXException e) {
      // fall back on Xerces parser by name
      try {
        parser = XMLReaderFactory.createXMLReader(
         "org.apache.xerces.parsers.SAXParser");
      }
      catch (SAXException ee) {
        System.err.println("Couldn't locate a SAX parser");
        return;
      }
    }

    if (args.length == 0) {
      System.out.println(
       "Usage: java DocumentStatistics URL1 URL2...");
    }

    // Install the Content Handler
    parser.setContentHandler(new XMLCounter( ));

    // start parsing...
    for (int i = 0; i &lt; args.length; i++) {

      // command line should offer URIs or file names
      try {
        parser.parse(args[i]);
      }
      catch (SAXParseException e) { // well-formedness error
        System.out.println(args[i] + " is not well formed.");
        System.out.println(e.getMessage( )
         + " at line " + e.getLineNumber( )
         + ", column " + e.getColumnNumber( ));
      }
      catch (SAXException e) { // some other kind of error
        System.out.println(e.getMessage( ));
      }
      catch (IOException e) {
        System.out.println("Could not report on " + args[i]
         + " because of the IOException " + e);
      }

    }

  }

}</pre></blockquote>
</div>

<p>Running the program in <a href="ch19_01.htm">Example 19-4</a> across the
document in <a href="ch19_01.htm">Example 19-2</a> results in the following
output:
</p>

<blockquote><pre class="code">D:\books\xian\examples\18&gt;java DocumentStatistics 18-2.xml
Number of elements: 5
Number of attributes: 1
Number of processing instructions: 1
Number of characters of plain text: 29</pre></blockquote>

<p>This generic program of <a href="ch19_01.htm">Example 19-4</a> works on any
well-formed XML document. Most SAX programs are more specific and
only work with certain XML applications. They look for particular
elements or attributes in particular places and respond to them
accordingly. They may rely on patterns that are enforced by a
validating parser. Still, this behavior comprises the fundamentals of
<a name="IXTR3-160" />SAX.
</p>

<p>The <a name="IXT-19-239953" />complicated
part of most SAX programs is the data structure you must build to
store information returned by the parser until
you're ready to use it. Sometimes this information
can be as complicated as the XML document itself, in which case you
may be better off using DOM, which at least provides a ready-made
data structure for an XML document. You usually want only some
information, though, and the data structure you construct should be
less complex than the <a name="IXTR3-161" />document <a name="IXTR3-162" /> <a name="IXTR3-163" />itself. 
</p>

</div>

<hr width="684" align="left" />
<div class="navbar"><table width="684" border="0"><tr><td align="left" valign="top" width="228"><a href="ch18_07.htm"><img src="../gifs/txtpreva.gif" alt="Previous" border="0" /></a></td><td align="center" valign="top" width="228"><a href="index.htm"><img src="../gifs/txthome.gif" alt="Home" border="0" /></a></td><td align="right" valign="top" width="228"><a href="ch19_02.htm"><img src="../gifs/txtnexta.gif" alt="Next" border="0" /></a></td></tr><tr><td align="left" valign="top" width="228">18.7. A Simple DOM Application</td><td align="center" valign="top" width="228"><a href="index/index.htm"><img src="../gifs/index.gif" alt="Book Index" border="0" /></a></td><td align="right" valign="top" width="228">19.2. SAX Features and Properties</td></tr></table></div>
<hr width="684" align="left" />

<img src="../gifs/navbar.gif" usemap="#library-map" border="0" alt="Library Navigation Links" />
<p><p><font size="-1"><a href="copyrght.htm">Copyright &copy; 2002</a> O'Reilly &amp; Associates. All rights reserved.</font></p>

<map name="library-map">
<area shape="rect" coords="0,0,85,93" href="../index.htm"><area shape="rect" coords="85,0,180,98" href="../sax2/index.htm"><area shape="rect" coords="182,-1,261,100" href="index.htm"><area shape="rect" coords="263,1,384,96" href="../jxml/index.htm"><area shape="rect" coords="386,1,463,100" href="../jxslt/index.htm"><area shape="rect" coords="466,1,533,112" href="../xslt/index.htm"><area shape="rect" coords="535,-1,610,108" href="../schema/index.htm"><area shape="rect" coords="613,1,696,121" href="../pxml/index.htm">
      </map>

</body></html>