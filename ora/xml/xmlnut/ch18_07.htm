<html><head><title>A Simple DOM Application (XML in a Nutshell, 2nd Edition)</title><link rel="stylesheet" type="text/css" href="../style/style1.css" />

<meta name="DC.Creator" content="Elliotte Rusty Harold and W. Scott Means" /><meta name="DC.Format" content="text/xml" scheme="MIME" /><meta name="DC.Language" content="en-US" /><meta name="DC.Publisher" content="O'Reilly &amp; Associates, Inc." /><meta name="DC.Source" scheme="ISBN" content="0-596-00292-0" /><meta name="DC.Subject.Keyword" content="stuff" /><meta name="DC.Title" content="XML in a Nutshell, 2nd Edition" /><meta name="DC.Type" content="Text.Monograph" />

</head><body bgcolor="#ffffff">

<img src="gifs/smbanner.gif" usemap="#banner-map" border="0" alt="Book Home" /><map name="banner-map"><area shape="rect" coords="1,-2,616,66" href="index.htm" alt="XML in a Nutshell" /><area shape="rect" coords="629,-11,726,25" href="jobjects/fsearch.htm" alt="Search this book" /></map>

<div class="navbar"><table width="684" border="0"><tr><td align="left" valign="top" width="228"><a href="ch18_06.htm"><img src="../gifs/txtpreva.gif" alt="Previous" border="0" /></a></td><td align="center" valign="top" width="228" /><td align="right" valign="top" width="228"><a href="ch19_01.htm"><img src="../gifs/txtnexta.gif" alt="Next" border="0" /></a></td></tr></table></div>



<h2 class="sect1">18.7. A Simple DOM Application</h2>

<p><a href="ch18_07.htm">Example 18-1</a> <a name="xmlnut2-IDXTERM-1681" />illustrates how you might use the
interfaces discussed in this chapter in a typical programming
situation. This application takes a document that uses the
<em class="emphasis">furniture.dtd</em> sample DTD from <a href="ch20_01.htm">Chapter 20</a> and validates that the parts list included in
the document matches the actual parts used within the document.
</p>

<a name="xmlnut2-CHP-18-EX-1" /><div class="example">
<h4 class="objtitle">Example 18-1. Parts checker application </h4>
<blockquote><pre class="code">/**
 * PartsCheck.java
 *
 * DOM Usage example from the O'Reilly _XML in a Nutshell_ book.
 *
 */
  
// we'll use the Apache Software Foundation's Xerces parser.
import org.apache.xerces.parsers.*;
import org.apache.xerces.framework.*;
  
// import the DOM and SAX interfaces
import org.w3c.dom.*;
import org.xml.sax.*;
  
// get the necessary java support classes
import java.io.*;
import java.util.*;
  
/**
 * This class is designed to check the parts list of an XML document that
 * represents a piece of furniture for validity.  It uses the DOM to
 * analyze the actual furniture description and then check it against the
 * parts list that is embedded in the document.
 */
public class PartsCheck {
  // static constants
  public static final String FURNITURE_NS =
      "http://namespaces.oreilly.com/furniture/";
  // contains the true part count, keyed by part number
  HashMap m_hmTruePartsList = new HashMap( );
  
  /**
   * The main function that allows this class to be invoked from the command
   * line.  Check each document provided on the command line for validity.
   */
  public static void main(String[] args) {
    PartsCheck pc = new PartsCheck( );
  
    try {
      for (int i = 0; i &lt; args.length; i++) {
        pc.validatePartsList(args[i]);
      }
    } catch (Exception e) {
      System.err.println(e);
    }
  }
  
  /**
   * Given a system identifier for an XML document, this function compares
   * the actual parts used to the declared parts list within the document.  It
   * prints warnings to standard error if the lists don't agree.
   */
  public void validatePartsList(String strXMLSysID) throws IOException,
      SAXException
  {
    // create a new parser
    DOMParser dp = new DOMParser( );
  
    // parse the document and get the DOM Document interface
    dp.parse(strXMLSysID);
    Document doc = dp.getDocument( );
  
    // get an accurate parts list count
    countParts(doc.getDocumentElement( ), 1);
  
    // compare it to the parts list in the document
    reconcilePartsList(doc);
  }
  
  /**
   * Updates the true parts list by adding the count to the current count
   * for the part number given.
   */
  private void recordPart(String strPartNum, int cCount)
  {
    if (!m_hmTruePartsList.containsKey(strPartNum)) {
      // this part isn't listed yet
      m_hmTruePartsList.put(strPartNum, new Integer(cCount));
    } else {
      // update the count
      Integer cUpdate = (Integer)m_hmTruePartsList.get(strPartNum);
      m_hmTruePartsList.put(strPartNum, new Integer(cUpdate.intValue( ) + cCount));
    }
  }
  
  /**
   * Counts the parts referenced by and below the given node.
   */
  private void countParts(Node nd, int cRepeat)
  {
    // start the local repeat count at 1
    int cLocalRepeat = 1;
  
    // make sure we should process this element
    if (FURNITURE_NS.equals(nd.getNamespaceURI( ))) {
      Node ndTemp;
  
      if ((ndTemp = nd.getAttributes( ).getNamedItem("repeat")) != null) {
        // this node specifies a repeat count for its children
        cLocalRepeat = Integer.parseInt(ndTemp.getNodeValue( ));
      }
  
      if ((ndTemp = nd.getAttributes( ).getNamedItem("part_num")) != null) {
        // start the count at 1
        int cCount = 1;
        String strPartNum = ndTemp.getNodeValue( );
  
        if ((ndTemp = nd.getAttributes( ).getNamedItem("count")) != null) {
          // more than one part needed by this node
          cCount = Integer.parseInt(ndTemp.getNodeValue( ));
        }
  
        // multiply the local count by the repeat passed in from the parent
        cCount *= cRepeat;
  
        // add the new parts count to the total
        recordPart(strPartNum, cCount);
      }
    }
  
    // now process the children
    NodeList nl = nd.getChildNodes( );
    Node ndCur;
  
    for (int i = 0; i &lt; nl.getLength( ); i++) {
      ndCur = nl.item(i);
  
      if (ndCur.getNodeType( ) == Node.ELEMENT_NODE) {
        // recursively count the parts for the child, using the local repeat
        countParts(ndCur, cLocalRepeat);
      }
    }
  }
  
  /**
   * This method reconciles the true parts list against the list in the document.
   */
  private void reconcilePartsList(Document doc)
  {
    Iterator iReal = m_hmTruePartsList.keySet().iterator( );
  
    String strPartNum;
    int cReal;
    Node ndCheck;
  
    // loop through all of the parts in the true parts list
    while (iReal.hasNext( )) {
      strPartNum = (String)iReal.next( );
      cReal = ((Integer)m_hmTruePartsList.get(strPartNum)).intValue( );
  
      // find the part list element in the document
      ndCheck = doc.getElementById(strPartNum);
  
      if (ndCheck == null) {
        // this part isn't even listed!
        System.err.println("missing &lt;part_name&gt; element for part #" +
            strPartNum + " (count " + cReal + ")");
      } else {
        Node ndTemp;
  
        if ((ndTemp = ndCheck.getAttributes( ).getNamedItem("count")) != null) {
          int cCheck = Integer.parseInt(ndTemp.getNodeValue( ));
  
          if (cCheck != cReal) {
            // counts don't agree
            System.err.println("&lt;part_name&gt; element for part #" +
                strPartNum + " is incorrect:  true part count = " + cReal +
                " (count in document is " + cCheck + ")");
          }
        } else {
          // they didn't provide a count for this part!
          System.err.println("missing count attribute for part #" +
              strPartNum + " (count " + cReal + ")");
        }
      }
    }
  }
}</pre></blockquote>
</div>

<p>When this application is run over the
<em class="emphasis">bookcase.xml</em> sample document from <a href="ch20_01.htm">Chapter 20</a>, it generates the following output:
</p>

<blockquote><pre class="code">missing count attribute for part #HC (count 8)
  
&lt;part_name&gt; element for part #A is incorrect:  true part count = 2 (count in document is 1)</pre></blockquote>

<p>To compile and use this sample application, download and install the
Xerces Java Parser from the Apache-XML project
(<a href="../../../../../../xml.apache.org/xerces-j">http://xml.apache.org/xerces-j</a>). The code was
compiled and tested <a name="IXTR3-96" />with <a name="IXTR3-97" />Sun's JDK Version
1.3.1.
</p>





<hr width="684" align="left" />
<div class="navbar"><table width="684" border="0"><tr><td align="left" valign="top" width="228"><a href="ch18_06.htm"><img src="../gifs/txtpreva.gif" alt="Previous" border="0" /></a></td><td align="center" valign="top" width="228"><a href="index.htm"><img src="../gifs/txthome.gif" alt="Home" border="0" /></a></td><td align="right" valign="top" width="228"><a href="ch19_01.htm"><img src="../gifs/txtnexta.gif" alt="Next" border="0" /></a></td></tr><tr><td align="left" valign="top" width="228">18.6. Parsing a Document with DOM</td><td align="center" valign="top" width="228"><a href="index/index.htm"><img src="../gifs/index.gif" alt="Book Index" border="0" /></a></td><td align="right" valign="top" width="228">19. Simple API for XML </td></tr></table></div>
<hr width="684" align="left" />

<img src="../gifs/navbar.gif" usemap="#library-map" border="0" alt="Library Navigation Links" />
<p><p><font size="-1"><a href="copyrght.htm">Copyright &copy; 2002</a> O'Reilly &amp; Associates. All rights reserved.</font></p>

<map name="library-map">
<area shape="rect" coords="0,0,85,93" href="../index.htm"><area shape="rect" coords="85,0,180,98" href="../sax2/index.htm"><area shape="rect" coords="182,-1,261,100" href="index.htm"><area shape="rect" coords="263,1,384,96" href="../jxml/index.htm"><area shape="rect" coords="386,1,463,100" href="../jxslt/index.htm"><area shape="rect" coords="466,1,533,112" href="../xslt/index.htm"><area shape="rect" coords="535,-1,610,108" href="../schema/index.htm"><area shape="rect" coords="613,1,696,121" href="../pxml/index.htm">
</map>

</body></html>