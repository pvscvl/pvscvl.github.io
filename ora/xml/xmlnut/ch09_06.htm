<html><head><title>General XPath Expressions (XML in a Nutshell, 2nd Edition)</title><link rel="stylesheet" type="text/css" href="../style/style1.css" />

<meta name="DC.Creator" content="Elliotte Rusty Harold and W. Scott Means" /><meta name="DC.Format" content="text/xml" scheme="MIME" /><meta name="DC.Language" content="en-US" /><meta name="DC.Publisher" content="O'Reilly &amp; Associates, Inc." /><meta name="DC.Source" scheme="ISBN" content="0-596-00292-0" /><meta name="DC.Subject.Keyword" content="stuff" /><meta name="DC.Title" content="XML in a Nutshell, 2nd Edition" /><meta name="DC.Type" content="Text.Monograph" />

</head><body bgcolor="#ffffff">

<img src="gifs/smbanner.gif" usemap="#banner-map" border="0" alt="Book Home" /><map name="banner-map"><area shape="rect" coords="1,-2,616,66" href="index.htm" alt="XML in a Nutshell" /><area shape="rect" coords="629,-11,726,25" href="jobjects/fsearch.htm" alt="Search this book" /></map>

<div class="navbar"><table width="684" border="0"><tr><td align="left" valign="top" width="228"><a href="ch09_05.htm"><img src="../gifs/txtpreva.gif" alt="Previous" border="0" /></a></td><td align="center" valign="top" width="228" /><td align="right" valign="top" width="228"><a href="ch09_07.htm"><img src="../gifs/txtnexta.gif" alt="Next" border="0" /></a></td></tr></table></div>



<h2 class="sect1">9.6. General XPath Expressions</h2>

<p>So <a name="xmlnut2-IDXTERM-910" />far
we've focused on the very useful subset of XPath
expressions called <em class="firstterm">location paths</em>. Location
paths identify a set of nodes in an XML document and are used in XSLT
match patterns and select expressions. However, location paths are
not the only possible type of XPath expression. XPath expressions can
also return numbers, Booleans, and strings. For instance, these are
all legal XPath expressions:
</p>

<ul><li>
<p><tt class="literal">3.141529</tt></p>
</li><li>
<p><tt class="literal">2+2</tt></p>
</li><li>
<p><tt class="literal">'Rosalind Franklin'</tt></p>
</li><li>
<p><tt class="literal">true( )</tt></p>
</li><li>
<p><tt class="literal">32.5 &lt; 76.2</tt></p>
</li><li>
<p><tt class="literal">position()=last( )</tt></p>
</li></ul>
<p>XPath expressions that aren't node-sets
can't be used in the <tt class="literal">match</tt>
attribute of an <tt class="literal">xsl:template</tt> element. However,
they can be used as values for the <tt class="literal">select</tt>
attribute of <tt class="literal">xsl:value-of</tt> elements, as the well as
in location path predicates.
</p>

<a name="xmlnut2-CHP-9-SECT-6.1" /><div class="sect2">
<h3 class="sect2">9.6.1. Numbers</h3>

<p><a name="IXT-9-239044" />
<a name="IXT-9-239045" />There are no pure integers in XPath. All
numbers are 8-byte, IEEE 754 floating-point doubles, even if they
don't have an explicit decimal point. This format is
identical to Java's <tt class="literal">double</tt>
primitive type. As well as representing floating-point numbers
ranging from 4.94065645841246544e-324 to 1.79769313486231570e+308
(positive or negative) and zero, this type includes special
representations of positive and negative infinity and a special not a
number value (NaN) used as the result of operations like dividing
zero by zero.
</p>

<p>XPath provides the five basic <a name="IXT-9-239046" />
<a name="IXT-9-239047" />arithmetic operators that will be familiar
to any programmer:
</p>

<dl>
<dt><i>+</i></dt>
<dd>
<a name="IXT-9-239048" />Addition
</p>
</dd>


<dt><i>-</i></dt>
<dd>
<a name="IXT-9-239049" />Subtraction
</p>
</dd>


<dt><i>*</i></dt>
<dd>
<a name="IXT-9-239050" />Multiplication
</p>
</dd>


<dt><i>div</i></dt>
<dd>
<a name="IXT-9-239051" />Division
</p>
</dd>


<dt><i>mod</i></dt>
<dd>
<a name="IXT-9-239052" />Taking the remainder
</p>
</dd>

</dl>

<p>The more common forward slash couldn't be used for
division because it's already used to separate
location steps in a location path. Consequently, a new operator had
to be chosen. The word <tt class="literal">mod</tt> was chosen instead of
the more common <tt class="literal">%</tt> operator. Aside from these minor
differences in syntax, all five operators behave exactly as they do
in Java. For instance, 2+2 is 4, 6.5 div 1.5 is 4.33333333, 6.5 mod
1.5 is 0.5, and so on. Placing the element
<tt class="literal">&lt;xsl:value-of</tt>
<tt class="literal">select="6*7"/&gt;</tt> in an XSLT template inserts the
string <tt class="literal">42</tt> into the output tree when the template
is instantiated. More often, a stylesheet performs some simple
arithmetic on numbers read from the input document. For instance,
this template rule calculates the century in which a person was born:
</p>

<blockquote><pre class="code">&lt;xsl:template match="person"&gt;
  &lt;century&gt;
    &lt;xsl:value-of select="(@born - (@born mod 100)) div 100"/&gt;th
  &lt;/century&gt;
&lt;/xsl:template&gt;</pre></blockquote>

</div>
<a name="xmlnut2-CHP-9-SECT-6.2" /><div class="sect2">
<h3 class="sect2">9.6.2. Strings</h3>

<p>XPath <a name="IXT-9-239053" />
<a name="IXT-9-239054" />strings are ordered sequences of Unicode
characters such as "Fred", "Ethel", "<img src="figs/U0644.gif" alt="Figure " /><img src="figs/U0627.gif" alt="Figure " /><img src="figs/U0647.gif" alt="Figure " /><img src="figs/U0631.gif" alt="Figure " />", or "<img src="figs/U039E.gif" alt="Figure " /><img src="figs/U03B7.gif" alt="Figure " /><img src="figs/U03BD.gif" alt="Figure " /><img src="figs/U03BF.gif" alt="Figure " /><img src="figs/U03C2.gif" alt="Figure " />". String literals may be enclosed in either single or double quotes as convenient. The quotes are not themselves part of the string. The only restriction XPath places on a string literal is that it must not contain the kind of quote that delimits it. That is, if the string contains single quotes, it has to be enclosed in double quotes and vice versa. String literals may contain whitespace including tabs, carriage returns, and line feeds, as well as back slashes and other characters that would be illegal in many programming languages. However, if the XPath expression is part of an XML document, some of these possibilities may be ruled out by XML's well-formedness rules, depending on context.</p>
<p>You can use the <tt class="literal">=</tt> and <tt class="literal">!=</tt>
<a name="IXT-9-239055" />
<a name="IXT-9-239056" />comparison operators to check
whether two strings are the same. You can also use the
<a name="IXT-9-239057" />
<a name="IXT-9-239058" />relational <tt class="literal">&lt;</tt>,
<tt class="literal">&gt;</tt>, <tt class="literal">&lt;=</tt>, and
<tt class="literal">&gt;=</tt> operators to compare strings, but unless
both strings clearly represent numbers (e.g.,
<tt class="literal">"-7.5"</tt> or <tt class="literal">'54.2'</tt>), the results
are unlikely to make sense. In general, you can't
define any real notion of string order in Unicode without detailed
knowledge of the language in which the string is written.
</p>

<p>Other operations on strings are provided by XPath functions and will
be discussed shortly.
</p>

</div>
<a name="xmlnut2-CHP-9-SECT-6.3" /><div class="sect2">
<h3 class="sect2">9.6.3. Booleans</h3>

<p>A <a name="IXT-9-239059" />
<a name="IXT-9-239060" />Boolean is a value that has
exactly two states, true or false. Every Boolean must have one of
these binary values. XPath does not provide any Boolean literals. If
you use <tt class="literal">&lt;xsl:value-of select="true"/&gt;</tt> in an
XSLT stylesheet, then the XSLT processor looks for a child element of
the context node named <tt class="literal">true</tt>. However, the XPath
functions <tt class="literal">true( )</tt> and <tt class="literal">false( )</tt>
can substitute for the missing literals quite easily.
</p>

<p>Most of the time, however, Booleans are created by comparisons
between other objects, most commonly numbers. XPath provides all the
usual relational operators including <tt class="literal">=</tt>,
<tt class="literal">!=</tt>, <tt class="literal">&lt;</tt>,
<tt class="literal">&gt;</tt>, <tt class="literal">&gt;=</tt>, and
<tt class="literal">&lt;=</tt>. In addition, the <tt class="literal">and</tt> and
<tt class="literal">or</tt> operators can combine Boolean expressions
according to the usual rules of logic.
</p>

<p>Booleans are most commonly used in predicates of location paths. For
example, in the location step
<tt class="literal">person[profession="physicist"]</tt>,
<tt class="literal">profession="physicist"</tt> is a Boolean. It is either
true or false; there is no other possibility. Booleans are also
commonly used in the <tt class="literal">test</tt> attribute of
<tt class="literal">xsl:if</tt> and <tt class="literal">xsl:when</tt> elements.
For example, this XSLT template rule includes the
<tt class="literal">profession</tt> element in the output only if its
contents are "physicist" or
"computer scientist":
</p>

<blockquote><pre class="code"> &lt;xsl:template match="profession"&gt;
  &lt;xsl:if test=".='computer scientist' or .='physicist'"&gt;
    &lt;xsl:value-of select="."/&gt;
  &lt;/xsl:if&gt;
&lt;/xsl:template&gt;</pre></blockquote>

<p>This XSLT template rule italicizes the <tt class="literal">profession</tt>
element if and only if its content is the string
"computer scientist":
</p>

<blockquote><pre class="code">&lt;xsl:template match="profession"&gt;
  &lt;xsl:choose&gt;
    &lt;xsl:when test=".='computer scientist'"&gt;
      &lt;i&gt;&lt;xsl:value-of select="."/&gt;&lt;/i&gt;
    &lt;/xsl:when&gt;
    &lt;xsl:otherwise&gt;
      &lt;xsl:value-of select="."/&gt;
    &lt;/xsl:otherwise&gt;
  &lt;/xsl:choose&gt;
&lt;/xsl:template&gt;</pre></blockquote>

<p>Finally, there's a <tt class="literal">not( )</tt>
function that reverses the sense of its Boolean argument. For
example, if <tt class="literal">.='computer scientist'</tt> is true, then
<tt class="literal">not(.='computer scientist')</tt> is false and vice
<a name="IXTR3-30" />versa.
</p>

</div>


<hr width="684" align="left" />
<div class="navbar"><table width="684" border="0"><tr><td align="left" valign="top" width="228"><a href="ch09_05.htm"><img src="../gifs/txtpreva.gif" alt="Previous" border="0" /></a></td><td align="center" valign="top" width="228"><a href="index.htm"><img src="../gifs/txthome.gif" alt="Home" border="0" /></a></td><td align="right" valign="top" width="228"><a href="ch09_07.htm"><img src="../gifs/txtnexta.gif" alt="Next" border="0" /></a></td></tr><tr><td align="left" valign="top" width="228">9.5. Unabbreviated Location Paths</td><td align="center" valign="top" width="228"><a href="index/index.htm"><img src="../gifs/index.gif" alt="Book Index" border="0" /></a></td><td align="right" valign="top" width="228">9.7. XPath Functions</td></tr></table></div>
<hr width="684" align="left" />

<img src="../gifs/navbar.gif" usemap="#library-map" border="0" alt="Library Navigation Links" />
<p><p><font size="-1"><a href="copyrght.htm">Copyright &copy; 2002</a> O'Reilly &amp; Associates. All rights reserved.</font></p>

<map name="library-map">
<area shape="rect" coords="0,0,85,93" href="../index.htm"><area shape="rect" coords="85,0,180,98" href="../sax2/index.htm"><area shape="rect" coords="182,-1,261,100" href="index.htm"><area shape="rect" coords="263,1,384,96" href="../jxml/index.htm"><area shape="rect" coords="386,1,463,100" href="../jxslt/index.htm"><area shape="rect" coords="466,1,533,112" href="../xslt/index.htm"><area shape="rect" coords="535,-1,610,108" href="../schema/index.htm"><area shape="rect" coords="613,1,696,121" href="../pxml/index.htm">
</map>

</body></html>