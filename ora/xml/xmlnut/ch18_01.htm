<html><head><title>Document Object Model (DOM) (XML in a Nutshell, 2nd Edition)</title><link rel="stylesheet" type="text/css" href="../style/style1.css" />

<meta name="DC.Creator" content="Elliotte Rusty Harold and W. Scott Means" /><meta name="DC.Format" content="text/xml" scheme="MIME" /><meta name="DC.Language" content="en-US" /><meta name="DC.Publisher" content="O'Reilly &amp; Associates, Inc." /><meta name="DC.Source" scheme="ISBN" content="0-596-00292-0" /><meta name="DC.Subject.Keyword" content="stuff" /><meta name="DC.Title" content="XML in a Nutshell, 2nd Edition" /><meta name="DC.Type" content="Text.Monograph" />

</head><body bgcolor="#ffffff">

<img src="gifs/smbanner.gif" usemap="#banner-map" border="0" alt="Book Home" /><map name="banner-map"><area shape="rect" coords="1,-2,616,66" href="index.htm" alt="XML in a Nutshell" /><area shape="rect" coords="629,-11,726,25" href="jobjects/fsearch.htm" alt="Search this book" /></map>

<div class="navbar"><table width="684" border="0"><tr><td align="left" valign="top" width="228"><a href="ch17_02.htm"><img src="../gifs/txtpreva.gif" alt="Previous" border="0" /></a></td><td align="center" valign="top" width="228" /><td align="right" valign="top" width="228"><a href="ch18_02.htm"><img src="../gifs/txtnexta.gif" alt="Next" border="0" /></a></td></tr></table></div>


<h1 class="chapter">Chapter 18. Document Object Model (DOM)</h1>
<div class="htmltoc"><h4 class="tochead">Contents:</h4><p>
<a href="ch18_01.htm">DOM Foundations</a><br />
<a href="ch18_02.htm">Structure of the DOM Core</a><br />
<a href="ch18_03.htm">Node and Other Generic Interfaces</a><br />
<a href="ch18_04.htm">Specific Node-Type Interfaces</a><br />
<a href="ch18_05.htm">The DOMImplementation Interface</a><br />
<a href="ch18_06.htm">Parsing a Document with DOM</a><br />
<a href="ch18_07.htm">A Simple DOM Application</a><br /></p></div><p>The <a name="xmlnut2-IDXTERM-1612" />Document Object Model (DOM) defines an
API for accessing and manipulating XML documents as tree structures.
The DOM is defined by a set of W3C Recommendations that describe a
programming language-neutral object model used to store hierarchical
documents in memory. The most recently completed standard,
<a name="IXT-18-239535" />DOM Level 2,
provides models for manipulating XML documents, HTML documents, and
CSS stylesheets. This chapter covers only the parts of the DOM that
are applicable to processing XML documents.
</p><p>This chapter is based on the Document Object Model (DOM) Level 2 Core
Specification, which was released on November 13, 2000. This version
of the recommendation, along with any errata that have been reported,
is available on the W3C web site
(<a href="../../../../../../www.w3.org/TR/DOM-Level-2-Core/">http://www.w3.org/TR/DOM-Level-2-Core/</a> ). At
the time of this writing, the latest <a name="IXT-18-239536" />DOM Level 3 Core working draft had been
released on January 14, 2002. The working draft corrects omissions
and deficiencies in the Level 2 recommendation and includes some
basic support for integrating validation into DOM API document
manipulation. Additional modules of DOM Level 3 add support for
content models (DTDs and schemas), as well as support for loading and
saving XML into and out of DOM.
</p><div class="sect1"><a name="xmlnut2-CHP-18-SECT-1" />
<h2 class="sect1">18.1. DOM Foundations</h2>

<p>At its heart, the DOM is a set of APIs. Various DOM implementations
use their own objects to support the interfaces defined in the DOM
specification. The DOM interfaces themselves are specified in
modules, making it possible for implementations to support parts of
the DOM without having to support all of it. XML parsers, for
instance, aren't required to provide support for the
HTML-specific parts of the DOM, and modularization has provided a
simple mechanism that allows software developers to identify which
parts of the DOM are supported or are not supported by a particular
implementation.
</p>

<p>Successive versions of the <a name="IXT-18-239537" />DOM are defined as levels. The Level 1 DOM
was the W3C's first release, and it focused on
working with HTML and XML in a browser context. Effectively, it
supported dynamic HTML and provided a base for XML document
processing. Because it expected documents to exist already in a
browser context, Level 1 only described an object structure and how
to manipulate it, not how to load a document into that structure or
reserialize a document from that structure.
</p>

<p>Subsequent levels have added functionality. DOM Level 2, which was
published as a set of specifications, one per module, includes
updates for the Core and HTML modules of Level 1, as well as new
modules for Views, Events, Style, Traversal, and Range. DOM Level 3
will add Abstract Schemas, Load, Save, XPath, and updates to the Core
and Events modules.
</p>

<p>Other W3C specifications have defined extensions to the DOM
particular to their own needs. Mathematical Markup Language (MathML),
Scalable Vector Graphics (SVG), Synchronized Multimedia Integration
Language (SMIL), and SMIL Animation have all defined DOMs that
provide access to details of their own vocabularies.
</p>



<a name="ch18-4-fm2xml" /><blockquote><b>TIP:</b> 
For a complete picture of the requirements that all of these modules
are supposed to address, see <a href="../../../../../../www.w3.org/TR/DOM-Requirements">http://www.w3.org/TR/DOM-Requirements</a>. For a
listing of all of the DOM specifications, including those still in
progress, see <a href="../../../../../../www.w3.org/DOM/DOMTR">http://www.w3.org/DOM/DOMTR</a>. The DOM has also
been included by reference in a variety of other specifications,
notably the Java API for XML Processing (JAXP). </p>
</blockquote>

<p>Developers
using the DOM for XML processing typically rely on the Core module as
the foundation for their work. </p>


<a name="xmlnut2-CHP-18-SECT-1.1" /><div class="sect2">
<h3 class="sect2">18.1.1. DOM Notation</h3>

<p>The <a name="IXT-18-239538" />Document
<a name="IXT-18-239539" />Object <a name="IXT-18-239540" />Model is intended
to be operating system- and language- neutral; therefore, all DOM
interfaces are specified using the Interface Description Language
(IDL) notation defined by the Object Management Group organization
(<a href="../../../../../../www.omg.org/">http://www.omg.org</a>). To conform to the language
of the specification, this chapter and <a href="ch24_01.htm">Chapter 24</a>
will use IDL terminology when discussing interface specifics. For
example, the word "attribute" in
IDL-speak refers to what would be a member variable in C++. This
should not be confused with the XML term
"attribute," which is a name-value
pair that appears within an element's start-tag.
</p>

<p>The <a name="IXT-18-239541" />language-independent IDL
interface must then be translated (according to the rules set down by
the OMG) into a specific language binding. Take the following
interface, for example:
</p>

<blockquote><pre class="code">interface NodeList {
  Node               item(in unsigned long index);
  readonly attribute unsigned long    length;
};</pre></blockquote>

<p>This interface would be expressed as a Java interface like this:</p>

<blockquote><pre class="code">package org.w3c.dom;
  
   public interface NodeList {
       public Node item(int index);
  
       public int getLength( );
  
   }</pre></blockquote>

<p>The same interface would be described for ECMAScript this way:</p>

<blockquote><pre class="code">Object NodeList
   The NodeList object has the following properties:
     length
       This read-only property is of type Number.
   The NodeList object has the following methods:
     item(index)
       This method returns a Node object.
       The index parameter is of type Number.
       Note: This object can also be dereferenced using square
       bracket notation (e.g. obj[1]). Dereferencing with an
       integer index is equivalent to invoking the item method
       with that index.</pre></blockquote>

<p>The tables in this chapter represent the information DOM presents as
IDL conveying both the available features and when they became
available. DOM implementations vary in their implementation of these
features--be sure to check the document of the implementation
you choose for details on how precisely it supports the DOM
interfaces.
</p>

</div>
<a name="xmlnut2-CHP-18-SECT-1.2" /><div class="sect2">
<h3 class="sect2">18.1.2. DOM Strengths and Weaknesses</h3>

<p>Like all <a name="IXT-18-239542" />programming
tools, the DOM is better for addressing some classes of problems than
others. Since the DOM object hierarchy stores references between the
various nodes in a document, the entire document must be read and
parsed before it is available to a DOM application. This step also
demands that the entire document be stored in memory, often with a
significant amount of overhead. Some early DOM implementations
required many times the original document's size
when stored in memory. This memory usage model makes DOM unsuitable
for applications that deal with very large documents or have a need
to perform some intermediate processing on a document before it has
been completely parsed.
</p>

<p>However, for applications that require random access to different
portions of a document at different times or applications that need
to modify the structure of an XML document on the fly, DOM is one of
the most mature and best-supported technologies available.
</p>

</div>
</div>

<hr width="684" align="left" />
<div class="navbar"><table width="684" border="0"><tr><td align="left" valign="top" width="228"><a href="ch17_02.htm"><img src="../gifs/txtpreva.gif" alt="Previous" border="0" /></a></td><td align="center" valign="top" width="228"><a href="index.htm"><img src="../gifs/txthome.gif" alt="Home" border="0" /></a></td><td align="right" valign="top" width="228"><a href="ch18_02.htm"><img src="../gifs/txtnexta.gif" alt="Next" border="0" /></a></td></tr><tr><td align="left" valign="top" width="228">17.2. Common XML Processing Issues</td><td align="center" valign="top" width="228"><a href="index/index.htm"><img src="../gifs/index.gif" alt="Book Index" border="0" /></a></td><td align="right" valign="top" width="228">18.2. Structure of the DOM Core</td></tr></table></div>
<hr width="684" align="left" />

<img src="../gifs/navbar.gif" usemap="#library-map" border="0" alt="Library Navigation Links" />
<p><p><font size="-1"><a href="copyrght.htm">Copyright &copy; 2002</a> O'Reilly &amp; Associates. All rights reserved.</font></p>

<map name="library-map">
<area shape="rect" coords="0,0,85,93" href="../index.htm"><area shape="rect" coords="85,0,180,98" href="../sax2/index.htm"><area shape="rect" coords="182,-1,261,100" href="index.htm"><area shape="rect" coords="263,1,384,96" href="../jxml/index.htm"><area shape="rect" coords="386,1,463,100" href="../jxslt/index.htm"><area shape="rect" coords="466,1,533,112" href="../xslt/index.htm"><area shape="rect" coords="535,-1,610,108" href="../schema/index.htm"><area shape="rect" coords="613,1,696,121" href="../pxml/index.htm">
      </map>

</body></html>