<html><head><title>Introducing XML (XML in a Nutshell, 2nd Edition)</title><link rel="stylesheet" type="text/css" href="../style/style1.css" />

<meta name="DC.Creator" content="Elliotte Rusty Harold and W. Scott Means" /><meta name="DC.Format" content="text/xml" scheme="MIME" /><meta name="DC.Language" content="en-US" /><meta name="DC.Publisher" content="O'Reilly &amp; Associates, Inc." /><meta name="DC.Source" scheme="ISBN" content="0-596-00292-0" /><meta name="DC.Subject.Keyword" content="stuff" /><meta name="DC.Title" content="XML in a Nutshell, 2nd Edition" /><meta name="DC.Type" content="Text.Monograph" />

</head><body bgcolor="#ffffff">

<img src="gifs/smbanner.gif" usemap="#banner-map" border="0" alt="Book Home" /><map name="banner-map"><area shape="rect" coords="1,-2,616,66" href="index.htm" alt="XML in a Nutshell" /><area shape="rect" coords="629,-11,726,25" href="jobjects/fsearch.htm" alt="Search this book" /></map>

<div class="navbar"><table width="684" border="0"><tr><td align="left" valign="top" width="228"><a href="part1.htm"><img src="../gifs/txtpreva.gif" alt="Previous" border="0" /></a></td><td align="center" valign="top" width="228" /><td align="right" valign="top" width="228"><a href="ch01_02.htm"><img src="../gifs/txtnexta.gif" alt="Next" border="0" /></a></td></tr></table></div>


<h1 class="chapter">Chapter 1. Introducing XML</h1>
<div class="htmltoc"><h4 class="tochead">Contents:</h4><p>
<a href="ch01_01.htm">The Benefits of XML</a><br />
<a href="ch01_02.htm">Portable Data</a><br />
<a href="ch01_03.htm">How XML Works</a><br />
<a href="ch01_04.htm">The Evolution of XML</a><br /></p></div><p>XML, the Extensible Markup Language, is a W3C-endorsed standard for
document markup. It defines a generic syntax used to mark up data
with simple, human-readable tags. It provides a standard format for
computer documents. This format is flexible enough to be customized
for domains as diverse as web sites, electronic data interchange,
vector graphics, genealogy, real-estate listings, object
serialization, remote procedure calls, voice-mail systems, and more.
</p><p>You can write your own programs that interact with, massage, and
manipulate the data in XML documents. If you do,
you'll have access to a wide range of free libraries
in a variety of languages that can read and write XML so that you can
focus on the unique needs of your program. Or you can use
off-the-shelf software, such as web browsers and text editors, to
work with XML documents. Some tools are able to work with any XML
document. Others are customized to support a particular XML
application in a particular domain, such as vector graphics, and may
not be of much use outside that domain. But in all cases, the same
underlying syntax is used, even if it's deliberately
hidden by the more user-friendly tools or restricted to a single
application.
</p><div class="sect1"><a name="xmlnut2-CHP-1-SECT-1" />
<h2 class="sect1">1.1. The Benefits of XML</h2>

<p>XML <a name="xmlnut2-IDXTERM-24" />is a metamarkup language for text
documents. Data is included in XML documents as strings of text. The
data is surrounded by text markup that describes the data.
XML's basic unit of data and markup is called an
<em class="emphasis">element</em>. The XML specification defines the exact
syntax this markup must follow: how elements are delimited by tags,
what a tag looks like, what names are acceptable for elements, where
attributes are placed, and so forth. Superficially, the markup in an
XML document looks a lot like the markup in an HTML document, but
there are some crucial differences.
</p>

<p>Most importantly, XML is a <em class="emphasis">metamarkup language</em>.
That means it doesn't have a fixed set of tags and
elements that are supposed to work for everybody in all areas of
interest for all time. Any attempt to create a finite set of such
tags is doomed to failure. Instead, XML allows developers and writers
to define the elements they need as they need them. Chemists can use
elements that describe molecules, atoms, bonds, reactions, and other
items encountered in chemistry. Real-estate agents can use elements
that describe apartments, rents, commissions, locations, and other
items needed for real estate. Musicians can use elements that
describe quarter notes, half notes, G-clefs, lyrics, and other
objects common in music. The <em class="emphasis">X</em> in XML stands for
<em class="emphasis">Extensible</em>. Extensible means that the language
can be extended and adapted to meet many different needs.
</p>

<p>Although XML is quite flexible in the elements it allows to be
defined, it is quite strict in many other respects. It provides a
grammar for XML documents that says where tags may be placed, what
they must look like, which element names are legal, how attributes
are attached to elements, and so forth. This grammar is specific
enough to allow the development of XML parsers that can read any XML
document. Documents that satisfy this grammar are said to be
<a name="IXT-1-239595" /><em class="emphasis">well-formed</em>.
Documents that are not well-formed are not allowed, any more than a C
program that contains a syntax error is allowed. XML processors will
reject documents that contain well-formedness errors.
</p>

<p>For reasons of interoperability, individuals or organizations may
agree to use only certain tags. These <a name="IXT-1-239596" />tag sets are called <em class="emphasis">XML
applications</em>. An XML application is not a software
application that uses XML, such as Mozilla or Microsoft Word. Rather,
it's an application of XML in a particular domain
like vector graphics or cooking.
</p>

<p>The markup in an XML document describes the structure of the
document. It lets you see which elements are associated with which
other elements. In a well-designed XML document, the markup also
describes the document's semantics. For instance,
the markup can indicate that an element is a date or a person or a
bar code. In well-designed XML applications, the markup says nothing
about how the document should be displayed. That is, it does not say
that an element is bold or italicized or a list item. XML is a
structural and semantic markup language, not a presentation
language.<a href="#FOOTNOTE-1">[1]</a>
</p><blockquote class="footnote"> <a name="FOOTNOTE-1" /><p> [1]A few XML applications, such as
<a name="IXT-1-239597" />XSL Formatting Objects, are designed to
describe the presentation of text. However, these are exceptions that
prove the rule. Although XSL-FO does describe presentation,
you'd never write an XSL-FO document directly.
Instead, you'd write a more semantically structured
XML document, then use an XSL Transformations stylesheet to change
the structure-oriented XML into presentation-oriented XML.</p>
</blockquote>

<p>The markup permitted in a particular XML application can be
documented in a
<em class="emphasis">schema</em><a name="IXT-1-239598" />. Particular document instances
can be compared to the schema. Documents that match the schema are
said to be
<a name="IXT-1-239599" /><em class="emphasis">valid</em>.
Documents that do not match are <em class="emphasis">invalid</em>.
Validity depends on the schema. That is, whether a document is valid
or invalid depends on which schema you compare it to. Not all
documents need to be valid. For many purposes it is enough that the
document merely be well-formed.
</p>

<p>There <a name="IXT-1-239600" />
<a name="IXT-1-239601" />are many different
XML <a name="IXT-1-239602" />
<a name="IXT-1-239603" />schema languages, with different
levels of expressivity. The most broadly supported schema language
and the only one defined by the XML 1.0 specification itself is the
<em class="emphasis">document type definition</em> (DTD). A DTD lists all
the legal markup and specifies where and how it may be included in a
document. DTDs are optional in XML. On the other hand, DTDs may not
always be enough. The DTD syntax is quite limited and does not allow
you to make many useful statements such as "This
element contains a number" or "This
string of text is a date between 1974 and 2032." The
W3C XML Schema Language (which sometimes goes by the misleadingly
generic label <em class="emphasis">schemas</em>) does allow you to express
constraints of this nature. Besides these two, there are many other
schema languages from which to choose, including
<a name="IXT-1-239604" />RELAX NG,
<a name="IXT-1-239605" />Schematron, <a name="IXT-1-239606" />Hook, and
<a name="IXT-1-239607" />Examplotron, and this is hardly an
exhaustive list.
</p>

<p>All current schema languages are purely declarative. However, there
are always some constraints that cannot be expressed in anything less
than a <a name="IXT-1-239608" />Turing complete programming language.
For example, given an XML document that represents an order, a Turing
complete language is required to multiply the
<tt class="literal">price</tt> of each <tt class="literal">order_item</tt> by its
<tt class="literal">quantity</tt>, sum them all up, and verify that the sum
equals the value of the <tt class="literal">subtotal</tt> element.
Today's schema languages are also incapable of
verifying extra-document constraints such as "Every
<tt class="literal">SKU</tt> element matches the SKU field of a record in
the products table of the inventory database." If
you're writing programs to read XML documents, you
can add code to verify statements like these, just as you would if
you were writing code to read a tab-delimited text file. The
difference is that XML parsers present you with the data in a much
more convenient format and do more of the work for you before you
have to resort to your own custom <a name="IXTR3-98" />code. 
</p>

<a name="xmlnut2-CHP-1-SECT-1.1" /><div class="sect2">
<h3 class="sect2">1.1.1. What XML Is Not</h3>

<p>XML is a markup language, and it is only a markup language.
It's important to remember that. The XML hype has
gotten so extreme that some people expect XML to do everything up to
and including washing the family dog.
</p>

<p>First of all, <em class="emphasis">XML is not a programming
language</em><b class="emphasis-bold">.</b>
There's no such thing as an XML compiler that reads
XML files and produces executable code. You might perhaps define a
scripting language that used a native XML format and was interpreted
by a binary program, but even this application would be
unusual.<a href="#FOOTNOTE-2">[2]</a> XML can
be used as a format for instructions to programs that do make things
happen, just like a traditional program may read a text config file
and take different action depending on what it sees there. Indeed,
there's no reason a config file
can't be XML instead of unstructured text. Some more
recent programs are beginning to use XML config files; but in all
cases it's the program taking action, not the XML
document itself. An XML document by itself simply
<em class="emphasis">is</em>. It does not <em class="emphasis">do</em>
anything.
</p><blockquote class="footnote"> <a name="FOOTNOTE-2" /><p> [2]At least one XML application, XSL
Transformations, has been proven to be Turing complete by
construction. See <a href="../../../../../../www.unidex.com/turing/utm.htm">http://www.unidex.com/turing/utm.htm</a> for one
universal Turing machine written in XSLT.</p> </blockquote>

<p>Secondly, <em class="emphasis">XML is not a network transport
protocol</em><b class="emphasis-bold">.</b> XML
won't send data across the network, any more than
HTML will. Data sent across the network using HTTP, FTP, NFS, or some
other protocol might happen to be encoded in an XML format, but again
there has to be some software outside the XML document that actually
does the sending.
</p>

<p>Finally, to mention the example where the hype most often obscures
the reality, <em class="emphasis">XML is not a database</em><b class="emphasis-bold">.</b> You're not going to replace
an Oracle or MySQL server with XML. A <a name="IXT-1-239609" />database can contain XML data, either as
a VARCHAR or a BLOB or as some custom XML data type, but the database
itself is not an XML document. You can store XML data into a database
on a server or retrieve data from a database in an XML format, but to
do this, you need to be running software written in a real
programming language such as C or Java. To store XML in a database,
software on the client side will send the XML data to the server
using an established network protocol such as TCP/IP. Software on the
server side will receive the XML data, parse it, and store it in the
database. To retrieve an XML document from a database,
you'll generally pass through some middleware
product like Enhydra that makes SQL queries against the database and
formats the result set as XML before returning it to the client.
Indeed, some databases may integrate this software code into their
core server or provide plug-ins to do it such as the Oracle XSQL
servlet. XML serves very well as a ubiquitous, platform-independent
transport format in these scenarios. However, it is not the database,
and it shouldn't be used as one.
</p>

</div>
</div>

<hr width="684" align="left" />
<div class="navbar"><table width="684" border="0"><tr><td align="left" valign="top" width="228"><a href="part1.htm"><img src="../gifs/txtpreva.gif" alt="Previous" border="0" /></a></td><td align="center" valign="top" width="228"><a href="index.htm"><img src="../gifs/txthome.gif" alt="Home" border="0" /></a></td><td align="right" valign="top" width="228"><a href="ch01_02.htm"><img src="../gifs/txtnexta.gif" alt="Next" border="0" /></a></td></tr><tr><td align="left" valign="top" width="228">I. XML Concepts</td><td align="center" valign="top" width="228"><a href="index/index.htm"><img src="../gifs/index.gif" alt="Book Index" border="0" /></a></td><td align="right" valign="top" width="228">1.2. Portable Data</td></tr></table></div>
<hr width="684" align="left" />

<img src="../gifs/navbar.gif" usemap="#library-map" border="0" alt="Library Navigation Links" />
<p><p><font size="-1"><a href="copyrght.htm">Copyright &copy; 2002</a> O'Reilly &amp; Associates. All rights reserved.</font></p>

<map name="library-map">
<area shape="rect" coords="0,0,85,93" href="../index.htm"><area shape="rect" coords="85,0,180,98" href="../sax2/index.htm"><area shape="rect" coords="182,-1,261,100" href="index.htm"><area shape="rect" coords="263,1,384,96" href="../jxml/index.htm"><area shape="rect" coords="386,1,463,100" href="../jxslt/index.htm"><area shape="rect" coords="466,1,533,112" href="../xslt/index.htm"><area shape="rect" coords="535,-1,610,108" href="../schema/index.htm"><area shape="rect" coords="613,1,696,121" href="../pxml/index.htm">
      </map>

</body></html>