<html><head><title>DOM Reference (XML in a Nutshell, 2nd Edition)</title><link rel="stylesheet" type="text/css" href="../style/style1.css" />

<meta name="DC.Creator" content="Elliotte Rusty Harold and W. Scott Means" /><meta name="DC.Format" content="text/xml" scheme="MIME" /><meta name="DC.Language" content="en-US" /><meta name="DC.Publisher" content="O'Reilly &amp; Associates, Inc." /><meta name="DC.Source" scheme="ISBN" content="0-596-00292-0" /><meta name="DC.Subject.Keyword" content="stuff" /><meta name="DC.Title" content="XML in a Nutshell, 2nd Edition" /><meta name="DC.Type" content="Text.Monograph" />

</head><body bgcolor="#ffffff">

<img src="gifs/smbanner.gif" usemap="#banner-map" border="0" alt="Book Home" /><map name="banner-map"><area shape="rect" coords="1,-2,616,66" href="index.htm" alt="XML in a Nutshell" /><area shape="rect" coords="629,-11,726,25" href="jobjects/fsearch.htm" alt="Search this book" /></map>

<div class="navbar"><table width="684" border="0"><tr><td align="left" valign="top" width="228"><a href="ch23_04.htm"><img src="../gifs/txtpreva.gif" alt="Previous" border="0" /></a></td><td align="center" valign="top" width="228" /><td align="right" valign="top" width="228"><a href="ch24_02.htm"><img src="../gifs/txtnexta.gif" alt="Next" border="0" /></a></td></tr></table></div>


<h1 class="chapter">Chapter 24. DOM Reference</h1>
<div class="htmltoc"><h4 class="tochead">Contents:</h4><p>
<a href="ch24_01.htm">Object Hierarchy</a><br />
<a href="ch24_02.htm">Object Reference</a><br /></p></div><p>The <a name="xmlnut2-IDXTERM-2303" />Document
<a name="IXT-24-240675" />Object <a name="xmlnut2-IDXTERM-2305" /> <a name="xmlnut2-IDXTERM-2306" />Model (DOM) is
a language- and platform-independent object framework for
manipulating structured documents (see <a href="ch18_01.htm">Chapter 18</a>
for additional information). The current W3C recommendation specifies
what is called <a name="IXT-24-240676" />the <a name="IXT-24-240677" />Level 2 DOM.
The full Level 2 DOM is designed to support editing of HTML
documents, with several classes and methods specific to HTML document
structures. This larger DOM is built on top of a smaller, but
complete, subset called the <a name="IXT-24-240678" />Core DOM. Only the Core DOM is required to
support editing of XML documents.
</p><a name="ch24-3-fm2xml" /><blockquote><b>TIP:</b> 
Other parts of DOM Level 2 may be useful for specific kinds of XML
processing, particularly the Style, Traversal, and Range modules.
</p>
</blockquote><p>This reference section documents the Levels 1 and 2 Core DOM
objects, using the language-neutral OMG IDL object descriptions.
Included with each IDL description is the language-specific binding
for the
<a name="IXT-24-240679" />Java programming language. Level
2-only constructs are indicated using the
<sup class="superscript">2</sup> symbol after the given attribute or
method name. </p><a name="ch24-4-fm2xml" /><blockquote><b>TIP:</b> 
This chapter is based on the Document Object Model (DOM) Level 2 Core
Specification, which was released on November 13, 2000. The latest
version of this recommendation, along with any errata that have been
reported, is available on the W3C DOM Activity's web
site (<a href="../../../../../../www.w3.org/DOM/DOMTR">http://www.w3.org/DOM/DOMTR</a>). </p>
</blockquote><p>The
<a name="IXT-24-240680" />DOM
<a name="IXT-24-240681" />structures a document as a hierarchy
of <tt class="literal">Node</tt> objects. The <tt class="literal">Node</tt>
interface is the base interface for every member of a DOM document
tree. It exposes attributes common to every type of document object
and provides a few simple methods to retrieve type-specific
information without resorting to downcasting. This interface also
exposes all methods used to query, insert, and remove objects from
the document hierarchy. The <tt class="literal">Node</tt> interface makes
it easier to build general- purpose tree-manipulation routines that
are not dependent on specific-document element types. </p><a name="ch24-8-fm2xml" /><a name="IXT-24-240696" /><a name="IXT-24-240697" /><a name="IXT-24-240698" /><a name="IXT-24-240699" /><a name="IXT-24-240700" /><a name="IXT-24-240701" /><a name="IXT-24-240702" /><a name="IXT-24-240703" /><a name="IXT-24-240704" /><a name="IXT-24-240705" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b>Attr</b></font></td><td align="right"><i></i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><table width="515" border="0" cellpadding="5"><tr><td align="left" /><td align="right" /></tr></table><p>The <tt class="literal">Attr</tt><a name="IXT-24-240696" /> interface represents the value assigned
to an attribute of an XML element. Since the
<tt class="literal">attributes</tt> <tt class="literal">NamedNodeList</tt>
attribute of the <tt class="literal">Element</tt> interface is the only
access to <tt class="literal">Attr</tt> objects within the DOM, the
<tt class="literal">parentNode</tt>, <tt class="literal">previousSibling</tt>,
and <tt class="literal">nextSibling</tt> attributes always return
<tt class="literal">null</tt>. Although the <tt class="literal">Attr</tt>
interface inherits the <tt class="literal">Node</tt> base interface, many
basic <tt class="literal">Node</tt> methods are not applicable.
</p><p>An XML <a name="IXT-24-240697" />element
<a name="IXT-24-240698" />can acquire an attribute in several ways.
An element has an attribute value if:
</p><ul><li>
<p>The XML document explicitly provides an attribute value.</p>
</li><li>
<p>The document DTD specifies a default attribute value.</p>
</li><li>
<p>An attribute is added programmatically using the
<tt class="literal">setAttribute( )</tt><a name="IXT-24-240699" /> or <tt class="literal">setAttributeNode(
)</tt><a name="IXT-24-240700" /> methods of the <tt class="literal">Element</tt>
interface.
</p>
</li></ul><p>Though an <tt class="literal">Attr</tt> node is not officially part of the
DOM document tree, it can be the parent of a value subtree. An
<tt class="literal">Attr</tt> object can have
<tt class="literal">EntityReference</tt> objects as children. The
<tt class="literal">value</tt> attribute provides the expanded
<tt class="literal">DOMString</tt> representation of this attribute. To
determine if any entity replacements were made, it is necessary to
check the <tt class="literal">Attr</tt> node for child nodes.
</p><blockquote><pre class="code">//Get the element's size attribute as an Attr object
Attr attrName = elem.getAttributeNode("size");</pre></blockquote>
<h4 class="refsect1">Attributes</h4>


<p>The <a name="IXT-24-240701" />following attributes are defined for the
<tt class="literal">Attr</tt> object:
</p>
<blockquote><a name="IXT-24-240702" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b>name: DOMString</b></font></td><td align="right"><i></i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><table width="515" border="0" cellpadding="5"><tr><td align="left" /><td align="right" /></tr></table><p><a name="IXT-24-240702" />The name of the attribute.
Read-only.
</p>
<h4 class="refsect1">Java binding</h4>

<blockquote><pre class="code">Public String getName( );</pre></blockquote>


<h4 class="refsect1">Java example</h4>

<blockquote><pre class="code">// Dump element attribute names
Attr attr;
    
for (int i = 0; i &lt; elem.getAttributes().getLength( ); i++) {
    // temporarily alias the attribute
    attr = (Attr)elem.getAttributes( ).item(i);
    System.out.println(attr.getName( ));
    }</pre></blockquote>
</div></blockquote><blockquote><a name="IXT-24-240703" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b>ownerElement: Element2</b></font></td><td align="right"><i></i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><table width="515" border="0" cellpadding="5"><tr><td align="left" /><td align="right" /></tr></table><p><a name="IXT-24-240703" />This property provides a link to the
<tt class="literal">Element</tt> object that owns this attribute. If the
attribute is currently unowned, it equals <tt class="literal">null</tt>.
Read-only.
</p>
<h4 class="refsect1">Java binding</h4>

<blockquote><pre class="code">public Element getOwnerElement( );</pre></blockquote>
</div></blockquote><blockquote><a name="IXT-24-240704" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b>specified: boolean</b></font></td><td align="right"><i></i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><table width="515" border="0" cellpadding="5"><tr><td align="left" /><td align="right" /></tr></table><p>This indicates<a name="IXT-24-240704" /> whether this attribute was
explicitly set in the XML source for the parent element or it is a
default value specified in the DTD. Read-only.
</p>
<h4 class="refsect1">Java binding</h4>

<blockquote><pre class="code">public boolean getSpecified( );</pre></blockquote>


<h4 class="refsect1">Java example</h4>

<blockquote><pre class="code">// Dump element attribute names
for (int i = 0; i &lt; elem.getAttributes().getLength( ); i++) {
    // temporarily alias the attribute
    attr = (Attr)elem.getAttributes( ).item(i);
    // only show attributes that were explicitly included in the XML 
    //source file
     // (i.e. ignore default attributes from the DTD.)
     if (attr.getSpecified( )) {
         System.out.println(attr.getName( ));
    }
}</pre></blockquote>
</div></blockquote><blockquote><a name="IXT-24-240705" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b>value: DOMString</b></font></td><td align="right"><i></i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><table width="515" border="0" cellpadding="5"><tr><td align="left" /><td align="right" /></tr></table><p><a name="IXT-24-240705" />This attribute provides a simple way
to set and retreive the <tt class="literal">Attr</tt>
object's text value. When used to get the text
value, the attribute includes the expanded value of any general
entity references. When used to set the value, it creates a child
Text node that contains the string value. Attempting to set the value
on a read-only node raises the NO_MODIFICATION_ALLOWED_ERR DOM
exception.
</p>
<h4 class="refsect1">Java bindings</h4>

<blockquote><pre class="code">public String getValue( );
public void setValue(String value);</pre></blockquote>


<h4 class="refsect1">Java example</h4>

<blockquote><pre class="code">// Make all attribute values lowercase
Attr attr;

for (int i = 0; i &lt; elem.getAttributes().getLength( ); i++) {
    attr = (Attr)elem.getAttributes( ).item(i);
    attr.setValue(attr.getValue().toLowerCase( ));
}</pre></blockquote>

</div></blockquote></div><a name="ch24-17-fm2xml" /><a name="IXT-24-240706" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b>CDATASection</b></font></td><td align="right"><i></i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><table width="515" border="0" cellpadding="5"><tr><td align="left" /><td align="right" /></tr></table><p>The <tt class="literal">CDATASection</tt><a name="IXT-24-240706" /> interface contains the
unparsed, unescaped data contained within <tt class="literal">CDATA</tt>
blocks in an XML document. Though this interface inherits the
<tt class="literal">Text</tt> interface, adjacent
<tt class="literal">CDATASection</tt> blocks are not merged by the
<tt class="literal">normalize( )</tt> method of the
<tt class="literal">Element</tt> interface.
</p>
<h4 class="refsect1">Java example</h4>

<blockquote><pre class="code">// Open an XML source file
try {
    FileInputStream fis = new FileInputStream("phone_list.xml");
    StringBuffer sb = new StringBuffer( );
    // read the XML source file into memory
    int ch;
    while ((ch = fis.read( )) != -1) {
        sb.append((char)ch);
    }
    
    // now, create a CDATASection object to contain it within
    // an element of our document using the CDATA facility
    CDATASection ndCDATA = doc.createCDATASection(sb.toString( ));
} catch (IOException e) {
    ...</pre></blockquote>


<p><tt class="literal">CDATASection</tt> is a pure subclass of the
<tt class="literal">Text</tt> interface and has no attributes or methods of
its own. See the <a href="ch24_01.htm">Text</a>
interface section of this chapter for a list of applicable methods
for accessing character data in nodes of this type.
</p>

</div><a name="ch24-49597" /><a name="xmlnut2-IDXTERM-2328" /><a name="IXT-24-240707" /><a name="IXT-24-240708" /><a name="IXT-24-240709" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b>CharacterData</b></font></td><td align="right"><i></i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><table width="515" border="0" cellpadding="5"><tr><td align="left" /><td align="right" /></tr></table><p>The <tt class="literal">CharacterData</tt><a name="xmlnut2-IDXTERM-2328" /> interface is completely abstract,
extending the basic <tt class="literal">Node</tt> interface only to support
manipulation of character data. Every DOM object type that deals with
text data inherits, directly or indirectly, from this interface.
</p><p>This interface's string-handling facilities are
similar to those found in most modern programming languages. Like
C/C++ string-processing routines, all
<tt class="literal">CharacterData</tt> routines are zero-based.
</p>
<h4 class="refsect1">Java example</h4>

<blockquote><pre class="code">// Create a new, unattached Text node
Text ndText = doc.createTextNode("The truth is out there.");
// cast it to the CharacterData interface
CharacterData ndCD = (CharacterData)ndText;</pre></blockquote>


<h4 class="refsect1">Attributes</h4>


<p>The following <a name="IXT-24-240707" />attributes are defined for
<tt class="literal">CharacterData</tt>:
</p>
<blockquote><a name="IXT-24-240708" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b>data: DOMString</b></font></td><td align="right"><i></i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><table width="515" border="0" cellpadding="5"><tr><td align="left" /><td align="right" /></tr></table><p><a name="IXT-24-240708" />This attribute allows access to the
"raw" data of the
<tt class="literal">CharacterData</tt> node. Though a given DOM
implementation cannot arbitrarily limit the amount of character data
that can be stored in a <tt class="literal">CharacterData</tt> node, you
may need to use the <tt class="literal">substringData</tt> method to
retrieve the data in manageable sections because of implementation
constraints.
</p>
<h4 class="refsect1">Exceptions</h4>

<dl>
<dt><i>NO_MODIFICATION_ALLOWED_ERR</i></dt>
<dd>
Raised on a write attempt when the <tt class="literal">data</tt> attribute
is read-only for this DOM object type.
</p>
</dd>


<dt><i>DOMSTRING_SIZE_ERR</i></dt>
<dd>
Raised if the read value that would be returned is too large to be
contained by a <tt class="literal">DOMString</tt> type in the given
implementation.
</p>
</dd>

</dl>


<h4 class="refsect1">Java bindings</h4>

<blockquote><pre class="code">public String getData( ) throws DOMException;
public void setData(String data) throws DOMException;</pre></blockquote>


<h4 class="refsect1">Java example</h4>

<blockquote><pre class="code">// Quote the CharacterData node contents
CharacterData ndCD = 
 (CharacterData)doc.createTextNode("Unquoted text.");
...
ndCD.setData('\"' + ndCD.getData( ) + '\"');</pre></blockquote>
</div></blockquote><blockquote><a name="IXT-24-240709" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b>length: unsigned long</b></font></td><td align="right"><i></i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><table width="515" border="0" cellpadding="5"><tr><td align="left" /><td align="right" /></tr></table><p><a name="IXT-24-240709" />The size of the
<tt class="literal">DOMString</tt> stored in the <tt class="literal">data</tt>
attribute. For all methods of this interface that take an
<tt class="literal">index</tt> parameter, the valid range for the index is
&lt;= <tt class="literal">index</tt> &lt; <tt class="literal">length</tt>. This
value can be 0, since having an empty
<tt class="literal">CharacterData</tt> node is possible. Read-only.
</p>
<h4 class="refsect1">Java binding</h4>

<blockquote><pre class="code">public long getLength( );</pre></blockquote>


<h4 class="refsect1">Java example</h4>

<blockquote><pre class="code">// Display the contents of a CharacterData node
CharacterData ndCD = (CharacterData)doc.createTextNode("This string has
 30 characters.");

System.out.println("The string \'" + ndCD.getData( ) + "\' has " 
            + Long.toString(ndCD.getLength( )) + " characters.");</pre></blockquote>

</div></blockquote></div><a name="ch24-49597a" /><a name="xmlnut2-IDXTERM-2332" /><a name="IXT-24-240710" /><a name="IXT-24-240711" /><a name="IXT-24-240712" /><a name="IXT-24-240713" /><a name="IXT-24-240714" /><a name="IXTR3-2" /><a name="IXTR3-3" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b>CharacterData (continued)</b></font></td><td align="right"><i></i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><table width="515" border="0" cellpadding="5"><tr><td align="left" /><td align="right" /></tr></table>
<h4 class="refsect1">Methods</h4>


<p>The <a name="xmlnut2-IDXTERM-2332" />following methods are defined for
<tt class="literal">CharacterData</tt>:
</p>
<blockquote><a name="IXT-24-240710" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b>appendData: arg</b></font></td><td align="right"><i></i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><table width="515" border="0" cellpadding="5"><tr><td align="left" /><td align="right" /></tr></table><p><a name="IXT-24-240710" />This
method appends contents of the <tt class="literal">arg</tt> parameter to
the current contents of the <tt class="literal">data</tt> attribute.
</p>
<h4 class="refsect1">Argument</h4>

<dl>
<dt><i>arg: DOMString</i></dt>
<dd>
The string to append.</p>
</dd>

</dl>


<h4 class="refsect1">Exception</h4>

<dl>
<dt><i>NO_MODIFICATION_ALLOWED_ERR</i></dt>
<dd>
Raised if this node is read-only.</p>
</dd>

</dl>


<h4 class="refsect1">Java binding</h4>

<blockquote><pre class="code">public void appendData(String arg) throws DOMException;</pre></blockquote>


<h4 class="refsect1">Java example</h4>

<blockquote><pre class="code">// Append to an existing string
// Create a new Text object and reference the CharacterData interface

CharacterData ndCD = (CharacterData)doc.createTextNode("The truth is ");
// flip a coin

ndCD.appendData((Math.random( ) &lt; 0.5) ? "out there." : "in here.");
System.out.println(ndCD.getData( ));</pre></blockquote>
</div></blockquote><blockquote><a name="IXT-24-240711" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b>deleteData: offset, count</b></font></td><td align="right"><i></i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><table width="515" border="0" cellpadding="5"><tr><td align="left" /><td align="right" /></tr></table><p><a name="IXT-24-240711" />This
truncates the <tt class="literal">DOMString</tt> in the
<tt class="literal">data</tt> attribute. This method removes
<tt class="literal">count</tt> characters, starting at the
<tt class="literal">offset</tt> position.
</p>
<h4 class="refsect1">Arguments</h4>

<dl>
<dt><i>offset: unsigned long</i></dt>
<dd>
The position in the <tt class="literal">data</tt> attribute to remove
<tt class="literal">count</tt> characters.
</p>
</dd>


<dt><i>count: unsigned long</i></dt>
<dd>
The count of characters to remove. If the <tt class="literal">offset</tt> +
<tt class="literal">count</tt> is &gt;= the <tt class="literal">length</tt>
attribute, the remainder, starting at position
<tt class="literal">offset</tt>, is deleted.
</p>
</dd>

</dl>


<h4 class="refsect1">Exceptions</h4>

<dl>
<dt><i>INDEX_SIZE_ERR</i></dt>
<dd>
Raised if the offset parameter is not a valid zero-based index into
the data DOMString.
</p>
</dd>


<dt><i>NO_MODIFICATION_ALLOWED_ERR</i></dt>
<dd>
Raised if the node is read-only.</p>
</dd>

</dl>


<h4 class="refsect1">Java binding</h4>

<blockquote><pre class="code">public void deleteData(long offset, long count)
               throws DOMException;</pre></blockquote>


<h4 class="refsect1">Java example</h4>

<blockquote><pre class="code">// Create a new Text object and reference the CharacterData interface
CharacterData ndCD = (CharacterData)doc.createTextNode("The truth is
                      not out there.");

// change of heart
ndCD.deleteData(12, 4);

System.out.println(ndCD.getData( ));</pre></blockquote>
</div></blockquote><blockquote><a name="IXT-24-240712" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b>insertData: offsec, arg</b></font></td><td align="right"><i></i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><table width="515" border="0" cellpadding="5"><tr><td align="left" /><td align="right" /></tr></table><p><a name="IXT-24-240712" />This
method takes a string, splits the <tt class="literal">data</tt>
attribute's current contents at the given
<tt class="literal">offset</tt>, then inserts the string from the
<tt class="literal">arg</tt> parameter between the two substrings.
</p>
<h4 class="refsect1">Arguments</h4>

<dl>
<dt><i>offset: unsigned long</i></dt>
<dd>
The zero-based offset in the <tt class="literal">data</tt> attribute where
the insertion is made.
</p>
</dd>


<dt><i>arg: DOMString</i></dt>
<dd>
The string to be inserted.</p>
</dd>

</dl>


<h4 class="refsect1">Exceptions</h4>

<dl>
<dt><i>INDEX_SIZE_ERR</i></dt>
<dd>
Raised if the <tt class="literal">offset</tt> parameter is not a valid,
zero-based index into the data <tt class="literal">DOMString</tt>.
</p>
</dd>


<dt><i>NO_MODIFICATION_ALLOWED_ERR</i></dt>
<dd>
Raised if the node is read-only.</p>
</dd>

</dl>


<h4 class="refsect1">Java binding</h4>

<blockquote><pre class="code">public void insertData(long offset, String arg) throws
  DOMException;</pre></blockquote>


<h4 class="refsect1">Java example</h4>

<blockquote><pre class="code">// Insert data into a string
boolean fCynical = true;

// create a new Text object, and reference the CharacterData interface
CharacterData ndCD = (CharacterData)doc.createTextNode("The truth is
                      out there.");

...

// check for cynicism
if (fCynical) {
    ndCD.insertData(12, " not");
}

System.out.println(ndCD.getData( ));</pre></blockquote>
</div></blockquote><blockquote><a name="IXT-24-240713" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b>replaceData: offset, count, arg</b></font></td><td align="right"><i></i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><table width="515" border="0" cellpadding="5"><tr><td align="left" /><td align="right" /></tr></table><p><a name="IXT-24-240713" />This
replaces a substring within the <tt class="literal">data</tt> attribute
with another string value <tt class="literal">arg</tt>, using the specifed
<tt class="literal">offset</tt> and <tt class="literal">count</tt> parameters.
</p>
<h4 class="refsect1">Arguments</h4>

<dl>
<dt><i>offset: long</i></dt>
<dd>
The offset of the beginning of the replacement region.</p>
</dd>


<dt><i>count: long</i></dt>
<dd>
The number of characters to replace. If <tt class="literal">offset</tt> +
<tt class="literal">count</tt> <tt class="literal">is</tt> &gt;= the
<tt class="literal">length</tt> attribute, everything beyond the
<tt class="literal">offset</tt> character position is replaced.
</p>
</dd>


<dt><i>arg: DOMString</i></dt>
<dd>
The replacement string.</p>
</dd>

</dl>

<p>The <tt class="literal">replaceData</tt> operation is the equivalent of the
following code fragment:
</p>

<blockquote><pre class="code">cdNode.deleteData(offset, count);
     cdNode.insertData(offset, arg);</pre></blockquote>


<h4 class="refsect1">Exceptions</h4>

<dl>
<dt><i>INDEX_SIZE_ERR</i></dt>
<dd>
Raised if the <tt class="literal">offset</tt> parameter is not a valid,
zero-based index into the <tt class="literal">data</tt>
<tt class="literal">DOMString</tt>.
</p>
</dd>


<dt><i>NO_MODIFICATION_ALLOWED_ERR</i></dt>
<dd>
Raised if the node is read-only.</p>
</dd>

</dl>


<h4 class="refsect1">Java binding</h4>

<blockquote><pre class="code">public void replaceData(long offset, long count,
                        String arg) throws DOMException;</pre></blockquote>


<h4 class="refsect1">Java example</h4>

<blockquote><pre class="code"> // Create a new Text object and reference the CharacterData interface
CharacterData ndCD = (CharacterData)doc.createTextNode("The truth is
                      not out there.");

// replace the truth
String strFind = "truth";
String strReplace = "dog";
    
ndCD.replaceData(ndCD.getData().indexOf(strFind), strFind.length( ), 
                 strReplace);

System.out.println(ndCD.getData( ));</pre></blockquote>
</div></blockquote><blockquote><a name="IXT-24-240714" /><a name="IXTR3-2" /><a name="IXTR3-3" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b>substringData: offset, count</b></font></td><td align="right"><i></i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><table width="515" border="0" cellpadding="5"><tr><td align="left" /><td align="right" /></tr></table><p><a name="IXT-24-240714" />This
returns a <tt class="literal">DOMString</tt> that contains a subset of the
string stored in the <tt class="literal">data</tt> attribute. The
<tt class="literal">offset</tt> and <tt class="literal">count</tt> arguments
define the substring. Though the <tt class="literal">offset</tt> argument
must represent a valid position within the node data, the end-point
of the substring could fall past the end of the
<tt class="literal">data</tt> attribute. If this happens, the method
returns everything between the <tt class="literal">offset</tt> position and
the end of the <tt class="literal">data</tt> string.
</p>
<h4 class="refsect1">Arguments</h4>

<dl>
<dt><i>offset: unsigned long</i></dt>
<dd>
Zero-based, starting offset of the substring to return. A valid
offset must be &gt;= 0 and &lt; the <tt class="literal">length</tt>
attribute of the node.
</p>
</dd>


<dt><i>count: unsigned long</i></dt>
<dd>
Count of characters to return.</p>
</dd>

</dl>


<h4 class="refsect1">Exceptions</h4>

<dl>
<dt><i>INDEX_SIZE_ERR</i></dt>
<dd>
Raised if the given offset is &lt; 0, &gt;= the
<tt class="literal">length</tt> attribute, or if the
<tt class="literal">count</tt> parameter is negative.
</p>
</dd>


<dt><i>DOMSTRING_SIZE_ERR</i></dt>
<dd>
Raised if the value that would be returned is too large to be
contained by a <tt class="literal">DOMString</tt> type in the <a name="IXTR3-2" />given <a name="IXTR3-3" />implementation.
</p>
</dd>

</dl>


<h4 class="refsect1">Java binding</h4>

<blockquote><pre class="code">public String substringData(unsigned long offset, unsigned long count)
                 throws DOMException;</pre></blockquote>


<h4 class="refsect1">Java example</h4>

<blockquote><pre class="code">// Get a reference to the CharacterData interface
CharacterData ndCD = (CharacterData)doc.createTextNode("The truth is
                      out there.");

// we only want the "truth"
String strTruth = ndCD.substringData(4, 5);

System.out.println("The substring is '" + strTruth + '\'');</pre></blockquote>

</div></blockquote></div><a name="ch24-70090" /><a name="IXT-24-240715" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b>Comment</b></font></td><td align="right"><i></i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><table width="515" border="0" cellpadding="5"><tr><td align="left" /><td align="right" /></tr></table><p>This <a name="IXT-24-240715" />object contains the text of an XML comment
(everything between the opening <tt class="literal">&lt;!--</tt> and
closing <tt class="literal">--&gt;</tt>). It inherits from
<tt class="literal">CharacterData</tt>.
</p><a name="ch24-48-fm2xml" /><blockquote><b>NOTE:</b> 
The DOM specification does not require XML parsers to preserve the
original document comments after the document is parsed. Some
implementations strip comments as part of the parsing process.
</p>
</blockquote>
<h4 class="refsect1">Java example</h4>

<blockquote><pre class="code">// Create a comment
Comment ndComment = doc.createComment("Document was parsed by 
                    DOM utility.");

// and add it to the document
doc.appendChild(ndComment);</pre></blockquote>

</div><a name="ch24-50-fm2xml" /><a name="xmlnut2-IDXTERM-2341" /><a name="IXT-24-240716" /><a name="IXT-24-240717" /><a name="IXT-24-240718" /><a name="IXT-24-240719" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b>Document</b></font></td><td align="right"><i></i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><table width="515" border="0" cellpadding="5"><tr><td align="left" /><td align="right" /></tr></table><p>The <tt class="literal">Document</tt><a name="xmlnut2-IDXTERM-2341" /> interface represents an entire,
well-formed XML document. Once the <tt class="literal">Document</tt> object
is created via the <tt class="literal">DOMImplementation</tt> interface,
you can access every aspect of the underlying XML document through
the various tree-navigation methods exposed by the
<tt class="literal">Node</tt> interface, the parent of the
<tt class="literal">Document</tt> interface.
</p><p>In DOM documents, document elements cannot exist outside of a parent
document. For this reason, the <tt class="literal">Document</tt> interface
exposes several factory methods used to create new document elements.
</p>
<h4 class="refsect1">Attributes</h4>


<p>The following <a name="IXT-24-240716" />attributes are defined for the
<tt class="literal">Document</tt> object:
</p>
<blockquote><a name="IXT-24-240717" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b>doctype: DocumentType</b></font></td><td align="right"><i></i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><table width="515" border="0" cellpadding="5"><tr><td align="left" /><td align="right" /></tr></table><p><a name="IXT-24-240717" />This attribute returns an instance of
the <tt class="literal">DocumentType</tt> interface representing the DTD
for this document. If no DTD was declared in the document, this
property is <tt class="literal">null</tt>. Read-only.
</p>
<h4 class="refsect1">Java binding</h4>

<blockquote><pre class="code">public DocumentType getDoctype( );</pre></blockquote>


<h4 class="refsect1">Java example</h4>

<blockquote><pre class="code">// Get the parsed DTD information for this document
DocumentType docType = docIn.getDoctype( );

if (docType == null) {
    System.out.println("warning: no DTD provided");
}</pre></blockquote>
</div></blockquote><blockquote><a name="IXT-24-240718" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b>documentElement: Element</b></font></td><td align="right"><i></i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><table width="515" border="0" cellpadding="5"><tr><td align="left" /><td align="right" /></tr></table><p><a name="IXT-24-240718" />This attribute points to the single
<tt class="literal">Element</tt> node that is the root of the XML document
tree. Read-only.
</p>
<h4 class="refsect1">Java binding</h4>

<blockquote><pre class="code">public Element getDocumentElement( );

// Identify the root element
Element elRoot = docIn.getDocumentElement( );
System.out.println("This is a '" + elRoot.getTagName( ) + "' document.");</pre></blockquote>
</div></blockquote><blockquote><a name="IXT-24-240719" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b>implementation: DOMImplementation</b></font></td><td align="right"><i></i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><table width="515" border="0" cellpadding="5"><tr><td align="left" /><td align="right" /></tr></table><p><a name="IXT-24-240719" />This returns a reference to the
<tt class="literal">DOMImplementation</tt> that is responsible for this
document. It is conceivable (using Adobe's SVG
plug-in within Microsoft's Internet Explorer, for
example) that a single application might use DOM objects from
multiple DOM implementations. Read-only.
</p>
<h4 class="refsect1">Java binding</h4>

<blockquote><pre class="code">public DOMImplementation getImplementation( );</pre></blockquote>


<h4 class="refsect1">Java example</h4>

<blockquote><pre class="code">// Ensure the support of DOM Level 1 XML
DOMImplementation di = doc.getImplementation( );
if (!di.hasFeature("XML", "1.0")) {
    return false;
}</pre></blockquote>

</div></blockquote></div><a name="ch24-50a-fm2xml" /><a name="xmlnut2-IDXTERM-2346" /><a name="IXT-24-240720" /><a name="IXT-24-240721" /><a name="IXT-24-240722" /><a name="IXT-24-240723" /><a name="IXT-24-240724" /><a name="IXT-24-240725" /><a name="IXT-24-240726" /><a name="IXT-24-240727" /><a name="IXT-24-240728" /><a name="IXT-24-240729" /><a name="IXT-24-240730" /><a name="IXT-24-240731" /><a name="IXT-24-240732" /><a name="IXT-24-240733" /><a name="IXTR3-4" /><a name="IXTR3-5" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b>Document (continued)</b></font></td><td align="right"><i></i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><table width="515" border="0" cellpadding="5"><tr><td align="left" /><td align="right" /></tr></table>
<h4 class="refsect1">Methods</h4>


<p>The <a name="xmlnut2-IDXTERM-2346" />following methods are defined for the
<tt class="literal">Document</tt> object:
</p>
<blockquote><a name="IXT-24-240720" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b>createAttribute: name</b></font></td><td align="right"><i></i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><table width="515" border="0" cellpadding="5"><tr><td align="left" /><td align="right" /></tr></table><p><a name="IXT-24-240720" />This function creates an
<tt class="literal">Attr</tt> object with the given name.
<tt class="literal">Attr</tt> nodes construct complex element attributes
that can include <tt class="literal">EntityReference</tt> objects and text
data.
</p>
<h4 class="refsect1">Argument</h4>

<dl>
<dt><i>name: DOMString</i></dt>
<dd>
The name of the XML attribute.</p>
</dd>

</dl>


<h4 class="refsect1">Return value</h4>


<p>The new <tt class="literal">Attr</tt> object.</p>


<h4 class="refsect1">Exception</h4>

<dl>
<dt><i>INVALID_CHARACTER_ERR</i></dt>
<dd>
Indicates that the name you passed to <tt class="literal">createAttribute(
)</tt> doesn't conform to a valid XML name. See
<a href="ch02_01.htm">Chapter 2</a> for the XML restrictions on name
construction.
</p>
</dd>

</dl>


<h4 class="refsect1">Java binding</h4>

<blockquote><pre class="code">public Attr createAttribute(String name) throws DOMException;</pre></blockquote>


<h4 class="refsect1">Java example</h4>

<blockquote><pre class="code">// Create an entity reference
EntityReference er = doc.createEntityReference("name_entity");
    
// must create an Attribute object to include an explicit
// entity reference
Attr attr = doc.createAttribute("name");
    
// append the entity reference
attr.appendChild(er);</pre></blockquote>
</div></blockquote><blockquote><a name="IXT-24-240721" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b>createAttributeNS: namespaceURI, qualifiedName2</b></font></td><td align="right"><i></i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><table width="515" border="0" cellpadding="5"><tr><td align="left" /><td align="right" /></tr></table><p><a name="IXT-24-240721" />This method serves the same purpose as the
<tt class="literal">createAttribute</tt> method, but includes support for
XML namespaces. See <a href="ch04_01.htm">Chapter 4</a> for more information
about namespaces.
</p>
<h4 class="refsect1">Arguments</h4>

<dl>
<dt><i>namespaceURI: DOMString</i></dt>
<dd>
The URI associated with the namespace prefix in the
<tt class="literal">qualifiedName</tt> parameter.
</p>
</dd>


<dt><i>qualifiedName: DOMString</i></dt>
<dd>
The name of the attribute to instantiate; includes the namespace
prefix associated with the namespace URI given in the
<tt class="literal">namespaceURI</tt> parameter.
</p>
</dd>

</dl>


<h4 class="refsect1">Return value</h4>


<p>The new <tt class="literal">Attr</tt> object is returned with the following
attribute values:
</p>

<a name="ch24-65-fm2xml" /><table border="1" cellpadding="3">



<tr>
<th>
<p>Attribute</p>
</th>
<th>
<p>Value</p>
</th>
</tr>


<tr>
<td>
<blockquote><pre class="code">Node.nodeName</pre></blockquote>
</td>
<td>
<p>The complete, fully qualified name given in the
<tt class="literal">qualifiedName</tt> parameter
</p>
</td>
</tr>
<tr>
<td>
<blockquote><pre class="code">Node.namespaceURI</pre></blockquote>
</td>
<td>
<p>The given namespace URI</p>
</td>
</tr>
<tr>
<td>
<blockquote><pre class="code">Node.prefix</pre></blockquote>
</td>
<td>
<p>The namespace prefix, which is parsed from the
<tt class="literal">qualifiedName</tt> parameter
</p>
</td>
</tr>
<tr>
<td>
<blockquote><pre class="code">Node.localName</pre></blockquote>
</td>
<td>
<p>The local part of the qualified name, located to the right of the
<tt class="literal">:</tt> character
</p>
</td>
</tr>
<tr>
<td>
<blockquote><pre class="code">Attr.name</pre></blockquote>
</td>
<td>
<p>The qualifiedName</p>
</td>
</tr>

</table><p>


<h4 class="refsect1">Exceptions</h4>

<dl>
<dt><i>INVALID_CHARACTER_ERR</i></dt>
<dd>
Indicates that the name passed to <tt class="literal">createAttributeNS(
)</tt> doesn't conform to a valid XML name. See
<a href="ch02_01.htm">Chapter 2</a> for the XML restrictions on name
construction.
</p>
</dd>


<dt><i>NAMESPACE_ERR</i></dt>
<dd>
Raised if the <tt class="literal">qualifiedName</tt> is malformed or has a
prefix but no <tt class="literal">namespaceURI</tt>, or if the reserved
<tt class="literal">xml</tt> namespace prefix was used incorrectly.
</p>
</dd>

</dl>


<h4 class="refsect1">Java binding</h4>

<blockquote><pre class="code">public Attr createAttributeNS(String namespaceURI, String qualifiedName)
               throws DOMException;</pre></blockquote>
</div></blockquote><blockquote><a name="IXT-24-240722" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b>createCDATASection: data</b></font></td><td align="right"><i></i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><table width="515" border="0" cellpadding="5"><tr><td align="left" /><td align="right" /></tr></table><p><a name="IXT-24-240722" />This creates a new
<tt class="literal">CDATASection</tt> node that contains the data text.
<tt class="literal">CDATASection</tt> nodes contain non-XML text content
that would be inconvenient or impractical to quote using the standard
XML entities, such as <tt class="literal">&amp;amp;</tt>,
<tt class="literal">&amp;lt;</tt>, or <tt class="literal">&amp;gt;</tt>.
</p>
<h4 class="refsect1">Argument</h4>

<dl>
<dt><i>data: DOMString</i></dt>
<dd>
The text contained by the new <tt class="literal">CDATASection</tt> object.</p>
</dd>

</dl>


<h4 class="refsect1">Exception</h4>

<dl>
<dt><i>NOT_SUPPORTED_ERR</i></dt>
<dd>
Occurs if you try to call this method on an HTML document.</p>
</dd>

</dl>


<h4 class="refsect1">Java binding</h4>

<blockquote><pre class="code">public CDATASection createCDATASection(String data) throws DOMException;</pre></blockquote>


<h4 class="refsect1">Java example</h4>

<blockquote><pre class="code">// Use CDATASection to embed XML characters
CDATASection cds = doc.createCDATASection("
&lt;xml_example&gt;This is sample text.&lt;/xml_example&gt;
");</pre></blockquote>
</div></blockquote><blockquote><a name="IXT-24-240723" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b>createComment: data</b></font></td><td align="right"><i></i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><table width="515" border="0" cellpadding="5"><tr><td align="left" /><td align="right" /></tr></table><p><a name="IXT-24-240723" />This
returns a new <tt class="literal">Comment</tt> node containing the
specified string. See the <a href="ch24_01.htm">Comment</a> object reference earlier in
this chapter for special restrictions that apply to the contents of
<tt class="literal">Comment</tt> nodes.
</p>
<h4 class="refsect1">Argument</h4>

<dl>
<dt><i>data: DOMString</i></dt>
<dd>
The comment text.</p>
</dd>

</dl>


<h4 class="refsect1">Comment text restriction</h4>


<p>The XML specification indicates that the <tt class="literal">--</tt>
characters must not appear in the comment text for compatibility
reasons. Despite this warning, some DOM implementations
don't flag comments containing double hyphens as
syntax errors.
</p>


<h4 class="refsect1">Java binding</h4>

<blockquote><pre class="code">public Comment createComment(String data);</pre></blockquote>


<h4 class="refsect1">Java example</h4>

<blockquote><pre class="code">// Create a timestamp comment
StringBuffer sb = new StringBuffer( );
Date dtNow = new Date( );

sb.append("\tModified " + dtNow.toString( ) + '\n');

Comment cmt = doc.createComment(sb.toString( ));</pre></blockquote>
</div></blockquote><blockquote><a name="IXT-24-240724" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b>createDocumentFragment( ) </b></font></td><td align="right"><i></i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><table width="515" border="0" cellpadding="5"><tr><td align="left" /><td align="right" /></tr></table><p><a name="IXT-24-240724" />This returns an empty
<tt class="literal">DocumentFragment</tt> object. See the <a href="ch24_01.htm">DocumentFragment</a> reference later in this
chapter for a discussion of a document fragment's
uses and limitations.
</p>
<h4 class="refsect1">Java binding</h4>

<blockquote><pre class="code">public DocumentFragment createDocumentFragment( );</pre></blockquote>
</div></blockquote><blockquote><a name="IXT-24-240725" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b>createElement: tagName</b></font></td><td align="right"><i></i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><table width="515" border="0" cellpadding="5"><tr><td align="left" /><td align="right" /></tr></table><p><a name="IXT-24-240725" />This
creates a new, empty <tt class="literal">Element</tt> node for use within
the parent document. The element name is given as an argument to the
method. The resulting <tt class="literal">Element</tt> node belongs to the
parent <tt class="literal">Document</tt> object, but is not part of the
document element hierarchy. See <a href="ch24_01.htm">Node</a> later in this
chapter for more information about how the document hierarchy
manipulation methods are used.
</p>
<h4 class="refsect1">Argument</h4>

<dl>
<dt><i>tagName: DOMString</i></dt>
<dd>
The XML name used to create the new <tt class="literal">Element</tt> node.
This name is assigned to the <tt class="literal">nodeName</tt> attribute of
the resulting <tt class="literal">Element</tt> node.
</p>
</dd>

</dl>


<h4 class="refsect1">Return value</h4>


<p>The new <tt class="literal">Element</tt> object.</p>


<h4 class="refsect1">Exception</h4>

<dl>
<dt><i>INVALID_CHARACTER_ERR</i></dt>
<dd>
Indicates that the name you passed to <tt class="literal">createElement(
)</tt> doesn't conform to a valid XML name. See
<a href="ch02_01.htm">Chapter 2</a> for the XML restrictions on name
construction.
</p>
</dd>

</dl>


<h4 class="refsect1">Java binding</h4>

<blockquote><pre class="code">public Element createElement(String tagName) throws DOMException;</pre></blockquote>


<h4 class="refsect1">Java example</h4>

<blockquote><pre class="code">// Create the new my_tag Element
Element elOut = doc.createElement("my_tag");</pre></blockquote>
</div></blockquote><blockquote><a name="IXT-24-240726" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b>createElementNS: namespaceURI, qualifiedName2</b></font></td><td align="right"><i></i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><table width="515" border="0" cellpadding="5"><tr><td align="left" /><td align="right" /></tr></table><p><a name="IXT-24-240726" />This method serves the same purpose as the
<tt class="literal">createElement</tt> method, but includes support for XML
namespaces. See <a href="ch04_01.htm">Chapter 4</a> for more information
about namespaces.
</p>
<h4 class="refsect1">Arguments</h4>

<dl>
<dt><i>namespaceURI: DOMString</i></dt>
<dd>
The URI associated with the namespace prefix in the
<tt class="literal">qualifiedName</tt> parameter.
</p>
</dd>


<dt><i>qualifiedName: DOMString</i></dt>
<dd>
The name of the element to instantiate, including the namespace
prefix associated with the namespace URI given in the
<tt class="literal">namespaceURI</tt> parameter.
</p>
</dd>

</dl>


<h4 class="refsect1">Return value</h4>


<p>The new <tt class="literal">Element</tt> object is returned with the
following attribute values:
</p>

<a name="ch24-84-fm2xml" /><table border="1" cellpadding="3">



<tr>
<th>
<p>Attribute</p>
</th>
<th>
<p>Value</p>
</th>
</tr>


<tr>
<td>
<blockquote><pre class="code">Node.nodeName</pre></blockquote>
</td>
<td>
<p>The complete, fully qualified name given in the
<tt class="literal">qualifiedName</tt> parameter
</p>
</td>
</tr>
<tr>
<td>
<blockquote><pre class="code">Node.namespaceURI</pre></blockquote>
</td>
<td>
<p>The given namespace URI</p>
</td>
</tr>
<tr>
<td>
<blockquote><pre class="code">Node.prefix</pre></blockquote>
</td>
<td>
<p>The namespace prefix, which is parsed from the
<tt class="literal">qualifiedName</tt> parameter
</p>
</td>
</tr>
<tr>
<td>
<blockquote><pre class="code">Node.localName</pre></blockquote>
</td>
<td>
<p>The local part of the qualified name, located to the right of the
<tt class="literal">:</tt> character
</p>
</td>
</tr>
<tr>
<td>
<blockquote><pre class="code">Element.tagName</pre></blockquote>
</td>
<td>
<p>The full element tag name, which is the same as the
<tt class="literal">qualifiedName</tt>
</p>
</td>
</tr>

</table><p>


<h4 class="refsect1">Exceptions</h4>

<dl>
<dt><i>INVALID_CHARACTER_ERR</i></dt>
<dd>
Indicates that the name you passed to <tt class="literal">createElementNS(
)</tt> doesn't conform to a valid XML name. See
<a href="ch02_01.htm">Chapter 2</a> for the XML restrictions on name
construction.
</p>
</dd>


<dt><i>NAMESPACE_ERR</i></dt>
<dd>
Raised if the <tt class="literal">qualifiedName</tt> is malformed, has a
prefix but no <tt class="literal">namespaceURI</tt>, or if the reserved
<tt class="literal">xml</tt> namespace prefix was used incorrectly.
</p>
</dd>

</dl>


<h4 class="refsect1">Java binding</h4>

<blockquote><pre class="code">public Element createElementNS(String namespaceURI, 
                               String qualifiedName)
                  throws DOMException;</pre></blockquote>
</div></blockquote><blockquote><a name="IXT-24-240727" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b>createEntityReference: name</b></font></td><td align="right"><i></i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><table width="515" border="0" cellpadding="5"><tr><td align="left" /><td align="right" /></tr></table><p><a name="IXT-24-240727" />This creates an
<tt class="literal">EntityReference</tt> object.
</p>
<h4 class="refsect1">Argument</h4>

<dl>
<dt><i>name: DOMString</i></dt>
<dd>
The name of the XML entity to be referenced. The name must match an
XML entity declaration that is valid in the current document.
</p>
</dd>

</dl>


<h4 class="refsect1">Exceptions</h4>

<dl>
<dt><i>INVALID_CHARACTER_ERR</i></dt>
<dd>
Indicates that the name you passed to <tt class="literal">createEntityReference(
)</tt> doesn't conform to a valid XML name. See
<a href="ch02_01.htm">Chapter 2</a> for the XML restrictions on name
construction.
</p>
</dd>


<dt><i>NOT_SUPPORTED_ERR</i></dt>
<dd>
Generated if you attempted to create an entity reference using an
HTML document.
</p>
</dd>

</dl>


<h4 class="refsect1">Java binding</h4>

<blockquote><pre class="code">public EntityReference createEntityReference(String name)
                          throws DOMException;</pre></blockquote>


<h4 class="refsect1">Java example</h4>

<blockquote><pre class="code">// Create an entity reference
EntityReference er = doc.createEntityReference("name_entity");</pre></blockquote>
</div></blockquote><blockquote><a name="IXT-24-240728" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b>createProcessingInstruction: target, data</b></font></td><td align="right"><i></i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><table width="515" border="0" cellpadding="5"><tr><td align="left" /><td align="right" /></tr></table><p><a name="IXT-24-240728" />This creates a new
<tt class="literal">ProcessingInstruction</tt> node with the given
<em class="emphasis">target</em></tt> name and <em class="emphasis">data</em></tt>
values. The processing-instruction target name
"xml" (case insensitive) is
reserved by the XML working group and can't be used
by an application.
</p>
<h4 class="refsect1">Arguments</h4>

<dl>
<dt><i>target: DOMString</i></dt>
<dd>
The target name of the processing instruction. This name identifies
the application that will interpret the data portion of the
instruction.
</p>
</dd>


<dt><i>data: DOMString</i></dt>
<dd>
The application-specific data for the resulting
<tt class="literal">ProcessingInstruction</tt> node.
</p>
</dd>

</dl>


<h4 class="refsect1">Exceptions</h4>

<dl>
<dt><i>INVALID_CHARACTER_ERR</i></dt>
<dd>
Indicates that the name you passed in to
<tt class="literal">createProcessing</tt> <tt class="literal">Instruction</tt>
doesn't conform to a valid XML name. See <a href="ch02_01.htm">Chapter 2</a> for the XML restrictions on name construction.
</p>
</dd>


<dt><i>NOT_SUPPORTED_ERR</i></dt>
<dd>
Generated if you attempt to create a
<tt class="literal">ProcessingInstruction</tt> using an HTML document.
</p>
</dd>

</dl>


<h4 class="refsect1">Java binding</h4>

<blockquote><pre class="code">public ProcessingInstruction createProcessingInstruction(String target,
                                String data) throws DOMException;</pre></blockquote>


<h4 class="refsect1">Java example</h4>

<blockquote><pre class="code">// Add the application-specific processing instruction
ProcessingInstruction pi = doc.createProcessingInstruction("my_app",
            "action=\"save\"");</pre></blockquote>
</div></blockquote><blockquote><a name="IXT-24-240729" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b>createTextNode: data</b></font></td><td align="right"><i></i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><table width="515" border="0" cellpadding="5"><tr><td align="left" /><td align="right" /></tr></table><p><a name="IXT-24-240729" />This
creates a new <tt class="literal">Text</tt> node that contains the given
<tt class="literal">data</tt> string.
</p>
<h4 class="refsect1">Argument</h4>

<dl>
<dt><i>data: DOMString</i></dt>
<dd>
The string that will be the contents of the new node.</p>
</dd>

</dl>


<h4 class="refsect1">Java binding</h4>

<blockquote><pre class="code">public Text createTextNode(String data);</pre></blockquote>


<h4 class="refsect1">Java example</h4>

<blockquote><pre class="code">// Create a new node that contains character data
Text txtDesc = doc.createTextNode("Character data contents for a new
                                  Element.");</pre></blockquote>
</div></blockquote><blockquote><a name="IXT-24-240730" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b>getElementById: elementID2</b></font></td><td align="right"><i></i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><table width="515" border="0" cellpadding="5"><tr><td align="left" /><td align="right" /></tr></table><p><a name="IXT-24-240730" />This
method returns the <tt class="literal">Element</tt> node with the given
value for its ID attribute.
</p><a name="ch24-99-fm2xml" /><blockquote><b>NOTE:</b> 
It is important not to confuse attributes that have the name
<tt class="literal">ID</tt> with ID attributes. <em class="emphasis">ID
attributes</em> are attributes that were declared with the ID
attribute type within the document type definition. See the <a href="ch20_03.htm">Attribute List Declaration</a> section in <a href="ch20_01.htm">Chapter 20</a> for more information about ID attributes.
</p>
</blockquote>
<h4 class="refsect1">Argument</h4>

<dl>
<dt><i>elementID: DOMString</i></dt>
<dd>
The unique ID value for the desired element.</p>
</dd>

</dl>


<h4 class="refsect1">Return value</h4>


<p>A single <tt class="literal">Element</tt> object that has the requested ID
attribute or null, if no match is found.
</p>


<h4 class="refsect1">Java binding</h4>

<blockquote><pre class="code">public Element getElementById(String elementId);</pre></blockquote>
</div></blockquote><blockquote><a name="IXT-24-240731" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b>getElementsByTagName: tagName</b></font></td><td align="right"><i></i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><table width="515" border="0" cellpadding="5"><tr><td align="left" /><td align="right" /></tr></table><p><a name="IXT-24-240731" />This function returns a list of
<tt class="literal">Element</tt> nodes from the current document whose
<tt class="literal">tagName</tt> attribute matches the given
<tt class="literal">tagName</tt> parameter. The nodes are returned in the
same order in which they appear in the source document.
</p>
<h4 class="refsect1">Argument</h4>

<dl>
<dt><i>tagName: DOMString</i></dt>
<dd>
The name of the tag to use as a filter. The special name * matches
any tag.
</p>
</dd>

</dl>


<h4 class="refsect1">Java binding</h4>

<blockquote><pre class="code">public NodeList getElementsByTagName(String tagName);</pre></blockquote>


<h4 class="refsect1">Java example</h4>

<blockquote><pre class="code">// Get a list of all phone numbers in the document
NodeList nl = doc.getElementsByTagName("phone_number");</pre></blockquote>
</div></blockquote><blockquote><a name="IXT-24-240732" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b>getElementsByTagNameNS: namespaceURI, localName2</b></font></td><td align="right"><i></i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><table width="515" border="0" cellpadding="5"><tr><td align="left" /><td align="right" /></tr></table><p><a name="IXT-24-240732" />Like the
<tt class="literal">getElementsByTagName( )</tt> method, this method
returns a list of <tt class="literal">Element</tt> nodes (a
<tt class="literal">NodeList</tt> object) that match the criteria given in
the <tt class="literal">namespaceURI</tt> and <tt class="literal">localName</tt>
parameters. The resulting list contains all elements matching the
namespace URI and local name restrictions, as they would be
encountered in the original order of the document on which the tree
was constructed.
</p>
<h4 class="refsect1">Arguments</h4>

<dl>
<dt><i>namespaceURI: DOMString</i></dt>
<dd>
The namespace URI of the elements to be matched. The special * value
matches any namespace.
</p>
</dd>


<dt><i>localName: DOMString</i></dt>
<dd>
The local name part of the elements to be matched. The special value
* matches any local name.
</p>
</dd>

</dl>


<h4 class="refsect1">Java binding</h4>

<blockquote><pre class="code">public NodeList getElementsByTagNameNS(String namespaceURI,
                                       String localName);</pre></blockquote>
</div></blockquote><blockquote><a name="IXT-24-240733" /><a name="IXTR3-4" /><a name="IXTR3-5" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b>importNode: importedNode, deep2</b></font></td><td align="right"><i></i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><table width="515" border="0" cellpadding="5"><tr><td align="left" /><td align="right" /></tr></table><p><a name="IXT-24-240733" />This
method's name is somewhat deceptive. It creates a
copy of a <tt class="literal">Node</tt> object from another document that
can be inserted within the current document's node
hierarchy. Specifics of this copy operation vary, depending on the
type of copied node.
</p><a name="ch24-108-fm2xml" /><table border="1" cellpadding="3">




<tr>
<th>
<p>Node type</p>
</th>
<th>
<p>Result</p>
</th>
<th>
<p>Effect of deep flag</p>
</th>
</tr>


<tr>
<td>
<blockquote><pre class="code">ATTRIBUTE_NODE</pre></blockquote>
</td>
<td>
<p>Copies the source attribute and all its children. The
<tt class="literal">ownerElement</tt> attribute is set to
<tt class="literal">null</tt>, and the <tt class="literal">specified</tt> flag is
set to <tt class="literal">true</tt>.
</p>
</td>
<td>
<p>None.</p>
</td>
</tr>
<tr>
<td>
<blockquote><pre class="code">DOCUMENT_FRAGMENT_NODE</pre></blockquote>
</td>
<td>
<p>Creates an empty <tt class="literal">DocumentFragment</tt> node.</p>
</td>
<td>
<p>Fully copies the children of the source
<tt class="literal">DocumentFragment</tt> node.
</p>
</td>
</tr>
<tr>
<td>
<blockquote><pre class="code">DOCUMENT_NODE</pre></blockquote>
</td>
<td>
<p>Cannot be imported.</p>
</td>
<td>
<p>N/A.</p>
</td>
</tr>
<tr>
<td>
<blockquote><pre class="code">DOCUMENT_TYPE_NODE</pre></blockquote>
</td>
<td>
<p>Cannot be imported.</p>
</td>
<td>
<p>N/A.</p>
</td>
</tr>
<tr>
<td>
<blockquote><pre class="code">ELEMENT_NODE</pre></blockquote>
</td>
<td>
<p>Copies the attribute nodes with the <tt class="literal">specified</tt> flag
set to the new element.
</p>
</td>
<td>
<p>Recursively copies all the source element's children.</p>
</td>
</tr>
<tr>
<td>
<blockquote><pre class="code">ENTITY_NODE</pre></blockquote>
</td>
<td>
<p>Copies the <tt class="literal">publicId</tt>, <tt class="literal">systemId</tt>,
and <tt class="literal">notationName</tt> attributes.
</p>
</td>
<td>
<p>Recursively copies all of the <tt class="literal">Entity</tt>
node's children.
</p>
</td>
</tr>
<tr>
<td>
<blockquote><pre class="code">ENTITY_REFERENCE_NODE</pre></blockquote>
</td>
<td>
<p>Copies only the <tt class="literal">EntityReference</tt> node. Its value,
if any, is taken from the DTD of the document doing the import.
</p>
</td>
<td>
<p>None.</p>
</td>
</tr>
<tr>
<td>
<blockquote><pre class="code">NOTATION_NODE</pre></blockquote>
</td>
<td>
<p>Imports the <tt class="literal">notation</tt> node, but since in Level 2
the <tt class="literal">DocumentType</tt> interface is read-only, it cannot
be included in the target document.
</p>
</td>
<td>
<p>None.</p>
</td>
</tr>
<tr>
<td>
<blockquote><pre class="code">PROCESSING_INSTRUCTION_ NODE</pre></blockquote>
</td>
<td>
<p>Copies the <tt class="literal">target</tt> and <tt class="literal">data</tt>
values.
</p>
</td>
<td>
<p>None.</p>
</td>
</tr>
<tr>
<td>
<blockquote><pre class="code">TEXT_NODE,
CDATA_SECTION_NODE, COMMENT_NODE</pre></blockquote>
</td>
<td>
<p>Copies the <tt class="literal">data</tt> and <tt class="literal">length</tt>
attributes.
</p>
</td>
<td>
<p>None.</p>
</td>
</tr>

</table>The new (copied) node object is returned based on the arguments.</p>
<h4 class="refsect1">Arguments</h4>

<dl>
<dt><i>importedNode: Node</i></dt>
<dd>
The node duplicated for use in the current document hierarchy.</p>
</dd>


<dt><i>deep: boolean</i></dt>
<dd>
Whether to copy the single node given or the entire subtree of its
children. For details, see the previous table.
</p>
</dd>

</dl>


<h4 class="refsect1">Exception</h4>

<dl>
<dt><i>NOT_SUPPORTED_ERR</i></dt>
<dd>
Thrown if an attempt is made to import an unsupported Node type, such
as a <a name="IXTR3-4" />Document <a name="IXTR3-5" />node. 
</p>
</dd>

</dl>


<h4 class="refsect1">Java binding</h4>

<blockquote><pre class="code">public Node importNode(Node importedNode, boolean deep)
    throws DOMException;</pre></blockquote>

</div></blockquote></div><a name="ch24-44384" /><a name="IXT-24-240734" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b>DocumentFragment</b></font></td><td align="right"><i></i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><table width="515" border="0" cellpadding="5"><tr><td align="left" /><td align="right" /></tr></table><p>The
<tt class="literal">DocumentFragment</tt><a name="IXT-24-240734" /> is a lightweight container used
to store XML document fragments temporarily. Since it has no
properties or methods of its own, it can only provide the same
functionality exposed by the <tt class="literal">Node</tt> object. It is
intended to serve as a container for at least one well-formed XML
subtree.
</p><p>This object's most obvious application is in the
case of clipboard or drag-and-drop operations in a visual editor. The
user may elect to select several sub-trees that appear at the same
level of the tree to be copied:
</p><blockquote><pre class="code">&lt;xml_example&gt;
    &lt;caption&gt;&lt;filename&gt;sample.xml&lt;/filename&gt; before DocumentFragment
     copy operation&lt;/caption&gt;
    &lt;document&gt;
        &lt;parent&gt;
            &lt;child_1&gt;&lt;/child_1&gt;
            &lt;child_2&gt;&lt;/child_2&gt;
        &lt;/parent&gt;
        &lt;parent&gt;
        &lt;/parent&gt;
    &lt;/document&gt;
&lt;/xml_example&gt;</pre></blockquote><p>If the user decides to copy the two child nodes to the clipboard, the
DOM application would:
</p><ul><li>
<p>Create a <tt class="literal">DocumentFragment</tt> object.</p>
</li><li>
<p>Attach copies of the child nodes to the new object using the
<tt class="literal">cloneNode( )</tt> and <tt class="literal">appendChild( )</tt>
methods.
</p>


<blockquote><pre class="code">&lt;xml_example&gt;
    &lt;caption&gt;DocumentFragment object on clipboard.&lt;/caption&gt;
    &lt;DocumentFragment frame="dashed"&gt;
        &lt;child_1&gt;&lt;/child_1&gt;
        &lt;child_2&gt;&lt;/child_2&gt;
    &lt;/DocumentFragment&gt;
&lt;/xml_example&gt;</pre></blockquote>
</li></ul><p>Then, when the user decides to paste the copied nodes to a new
location, the new <tt class="literal">DocumentFragment</tt> node is passed
to this target node's <tt class="literal">appendChild(
)</tt> method. During the copy operation, the
<tt class="literal">DocumentFragment</tt> node itself is ignored, and only
the children are attached to the target node.
</p><blockquote><pre class="code">&lt;xml_example&gt;
    &lt;caption&gt;&lt;filename&gt;sample.xml&lt;/filename&gt; after DocumentFragment copy 
     operation&lt;/caption&gt;
    &lt;document&gt;
        &lt;parent&gt;
            &lt;child_1&gt;&lt;/child_1&gt;
            &lt;child_2&gt;&lt;/child_2&gt;
        &lt;/parent&gt;
        &lt;parent&gt;
            &lt;child_1&gt;&lt;/child_1&gt;
            &lt;child_2&gt;&lt;/child_2&gt;
        &lt;/parent&gt;
    &lt;/document&gt;
&lt;/xml_example&gt;</pre></blockquote>
<h4 class="refsect1">Java example</h4>

<blockquote><pre class="code">// Create a Document Fragment object
DocumentFragment dfNorm = doc.createDocumentFragment( );</pre></blockquote>

</div><a name="ch24-113-fm2xml" /><a name="xmlnut2-IDXTERM-2364" /><a name="IXT-24-240735" /><a name="IXT-24-240736" /><a name="IXT-24-240737" /><a name="IXT-24-240738" /><a name="IXT-24-240739" /><a name="IXT-24-240740" /><a name="IXTR3-6" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b>DocumentType</b></font></td><td align="right"><i></i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><table width="515" border="0" cellpadding="5"><tr><td align="left" /><td align="right" /></tr></table><p>The <tt class="literal">Document</tt><a name="xmlnut2-IDXTERM-2364" /> interface includes a single attribute,
<tt class="literal">docType</tt>, that points either to a description of
the DTD for the current document or to <tt class="literal">null</tt> if
none exists.
</p>
<h4 class="refsect1">Java example</h4>

<blockquote><pre class="code">// get document type information
    DocumentType dtDoc = doc.getDoctype( );</pre></blockquote>


<h4 class="refsect1">Attributes</h4>


<p>The <tt class="literal">DocumentType</tt> object contains the following
attributes:
</p>
<blockquote><a name="IXT-24-240735" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b>entities: NamedNodeMap</b></font></td><td align="right"><i></i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><table width="515" border="0" cellpadding="5"><tr><td align="left" /><td align="right" /></tr></table><p><a name="IXT-24-240735" />This attribute provides a list of all
general entities declared in the document's DTD. If
the same entity is declared more than once within a single document,
only the first occurrence is preserved in this
<tt class="literal">NamedNodeMap</tt>. Note that parameter entity
declarations are not available through the
<tt class="literal">DocumentType</tt> interface. Each member of this list
implements the <tt class="literal">Entity</tt> interface. Read-only.
</p>
<h4 class="refsect1">Java binding</h4>

<blockquote><pre class="code">public NamedNodeMap getEntities( );</pre></blockquote>


<h4 class="refsect1">Java example</h4>

<blockquote><pre class="code">// Dump the document entities
NamedNodeMap nnm = doc.getDoctype().getEntities( );

Entity ndEnt;
for (int i = 0; i &lt; nnm.getLength( ); i++) {
    ndEnt = (Entity)nnm.item(i);

    System.out.println(ndEnt.getNodeName( ));

    if (ndEnt.getPublicId( ) != null) {
        System.out.println("\tPublic Identifier: " +
                           ndEnt.getPublicId( ));
    }

    if (ndEnt.getSystemId( ) != null) {
        System.out.println("\tSystem Identifier: " +
                           ndEnt.getSystemId( ));
    }

    if (ndEnt.getNotationName( ) != null) {
        System.out.println("\tNotation Name: " +
                           ndEnt.getNotationName( ));
    }
}</pre></blockquote>
</div></blockquote><blockquote><a name="IXT-24-240736" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b>internalSubset: DOMString</b></font></td><td align="right"><i></i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><table width="515" border="0" cellpadding="5"><tr><td align="left" /><td align="right" /></tr></table><p><a name="IXT-24-240736" />This attribute contains the
document's internal subset as a string value. The
content's actual format depends on the level of
support provided by a particular XML parser. Read-only.
</p>
<h4 class="refsect1">Java binding</h4>

<blockquote><pre class="code">public String getInternalSubset( );</pre></blockquote>
</div></blockquote><blockquote><a name="IXT-24-240737" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b>name: DOMString</b></font></td><td align="right"><i></i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><table width="515" border="0" cellpadding="5"><tr><td align="left" /><td align="right" /></tr></table><p><a name="IXT-24-240737" />This is the name of the DTD, which
is the XML name following the XML DOCTYPE keyword in the source
document. Read-only.
</p>
<h4 class="refsect1">Java binding</h4>

<blockquote><pre class="code">public String getName( );</pre></blockquote>


<h4 class="refsect1">Java example</h4>

<blockquote><pre class="code">// Display document type information
DocumentType dtDoc = doc.getDoctype( );

System.out.println("This is a " + dtDoc.getName( ) + " document.");</pre></blockquote>
</div></blockquote><blockquote><a name="IXT-24-240738" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b>notations: NamedNodeMap</b></font></td><td align="right"><i></i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><table width="515" border="0" cellpadding="5"><tr><td align="left" /><td align="right" /></tr></table><p><a name="IXT-24-240738" />A <tt class="literal">NamedNodeMap</tt>
contains a list of XML notation declarations for the current
document. Each member of this list implements the
<tt class="literal">Notation</tt> interface, and the list itself is
read-only.
</p>
<h4 class="refsect1">Java binding</h4>

<blockquote><pre class="code">public NamedNodeMap getNotations( );</pre></blockquote>


<h4 class="refsect1">Java example</h4>

<blockquote><pre class="code">// Dump the document notations
NamedNodeMap nnm = doc.getDoctype().getNotations( );
Notation ndNotation;
for (int i = 0; i &lt; nnm.getLength( ); i++) {
    ndNotation = (Notation)nnm.item(i);

    System.out.println(ndNotation.getNodeName( ));
    if (ndNotation.getPublicId( ) != null) {
        System.out.println("\tPublic Identifier: " +
                           ndNotation.getPublicId( ));
    }
    if (ndNotation.getSystemId( ) != null) {
        System.out.println("\tSystem Identifier: " +
                           ndNotation.getSystemId( ));
    }
}</pre></blockquote>
</div></blockquote><blockquote><a name="IXT-24-240739" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b>publicId: DOMString</b></font></td><td align="right"><i></i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><table width="515" border="0" cellpadding="5"><tr><td align="left" /><td align="right" /></tr></table><p><a name="IXT-24-240739" />This is the public identifier of the
external subset. Read-only.
</p>
<h4 class="refsect1">Java binding</h4>

<blockquote><pre class="code">public String getPublicId( );</pre></blockquote>
</div></blockquote><blockquote><a name="IXT-24-240740" /><a name="IXTR3-6" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b>systemId: DOMString</b></font></td><td align="right"><i></i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><table width="515" border="0" cellpadding="5"><tr><td align="left" /><td align="right" /></tr></table><p><a name="IXT-24-240740" />The system identifier (URI) of this
document's external subset. <a name="IXTR3-6" />Read-only.
</p>
<h4 class="refsect1">Java binding</h4>

<blockquote><pre class="code">public String getSystemId( );</pre></blockquote>

</div></blockquote></div><a name="ch24-125-fm2xml" /><a name="xmlnut2-IDXTERM-2372" /><a name="xmlnut2-IDXTERM-2373" /><a name="IXT-24-240741" /><a name="IXT-24-240742" /><a name="IXT-24-240743" /><a name="IXT-24-240744" /><a name="IXT-24-240745" /><a name="IXT-24-240746" /><a name="IXT-24-240747" /><a name="IXT-24-240748" /><a name="IXT-24-240749" /><a name="IXT-24-240750" /><a name="IXT-24-240751" /><a name="IXT-24-240752" /><a name="IXT-24-240753" /><a name="IXT-24-240754" /><a name="IXT-24-240755" /><a name="IXTR3-7" /><a name="IXTR3-8" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b>DOMException</b></font></td><td align="right"><i></i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><table width="515" border="0" cellpadding="5"><tr><td align="left" /><td align="right" /></tr></table><p>For <a name="xmlnut2-IDXTERM-2372" />languages and runtime platforms that
support them, structured exceptions provide a way to separate the
code that deals with abnormal or unexpected problems from the normal
flow of execution. For languages that don't support
exceptions, such as ECMAScript or Perl, these conditions are reported
to your program as error codes from the method that recognized the
condition.
</p><p>The <tt class="literal">ExceptionCode</tt><a name="xmlnut2-IDXTERM-2373" /> is an integer value that indicates what
type of exception was detected. The following
<tt class="literal">ExceptionCodes</tt> are defined, with unused numeric
codes reserved for future use by the W3C:
</p><blockquote><a name="IXT-24-240741" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b>INDEX_SIZE_ERR [unsigned short, value: 1]</b></font></td><td align="right"><i></i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><table width="515" border="0" cellpadding="5"><tr><td align="left" /><td align="right" /></tr></table><p><a name="IXT-24-240741" />An index outside the expected range was
passed to a method that accepts an index. The expected range for most
collections is <tt class="literal">0 &lt;= index &lt; collection.
length</tt>.
</p>
<h4 class="refsect1">Java binding</h4>

<blockquote><pre class="code">public static final short INDEX_SIZE_ERR = 1;</pre></blockquote>
</div></blockquote><blockquote><a name="IXT-24-240742" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b>DOMSTRING_SIZE_ERR [unsigned short, value: 2]</b></font></td><td align="right"><i></i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><table width="515" border="0" cellpadding="5"><tr><td align="left" /><td align="right" /></tr></table><p><a name="IXT-24-240742" />The <tt class="literal">DOMString</tt> that
would be returned from a method is too large.
</p>
<h4 class="refsect1">Java binding</h4>

<blockquote><pre class="code">public static final short DOMSTRING_SIZE_ERR = 2;</pre></blockquote>
</div></blockquote><blockquote><a name="IXT-24-240743" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b>HIERARCHY_REQUEST_ERR [unsigned short, value: 3 ]</b></font></td><td align="right"><i></i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><table width="515" border="0" cellpadding="5"><tr><td align="left" /><td align="right" /></tr></table><p><a name="IXT-24-240743" />The node insertion you requested violates
the document structure's integrity. For example, the
insertion would cause a node to become one of its own children.
</p>
<h4 class="refsect1">Java binding</h4>

<blockquote><pre class="code">public static final short HIERARCHY_REQUEST_ERR = 3;</pre></blockquote>
</div></blockquote><blockquote><a name="IXT-24-240744" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b>WRONG_DOCUMENT_ERR [unsigned short, value: 4 ]</b></font></td><td align="right"><i></i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><table width="515" border="0" cellpadding="5"><tr><td align="left" /><td align="right" /></tr></table><p><a name="IXT-24-240744" />An attempt to insert a node from one
document directly into another. A given implementer of the DOM
framework determines whether this insertion generates an error.
</p>
<h4 class="refsect1">Java binding</h4>

<blockquote><pre class="code">public static final short WRONG_DOCUMENT_ERR = 4;</pre></blockquote>
</div></blockquote><blockquote><a name="IXT-24-240745" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b>INVALID_CHARACTER_ERR [unsigned short, value: 5 ]</b></font></td><td align="right"><i></i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><table width="515" border="0" cellpadding="5"><tr><td align="left" /><td align="right" /></tr></table><p><a name="IXT-24-240745" />An invalid character was used in a name,
e.g., trying to create an Element object with the name <tt class="literal">"my
element"</tt>, as spaces are not allowed.
</p>
<h4 class="refsect1">Java binding</h4>

<blockquote><pre class="code">public static final short INVALID_CHARACTER_ERR = 5;</pre></blockquote>
</div></blockquote><blockquote><a name="IXT-24-240746" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b>NO_DATA_ALLOWED_ERR [unsigned short, value: 6 ]</b></font></td><td align="right"><i></i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><table width="515" border="0" cellpadding="5"><tr><td align="left" /><td align="right" /></tr></table><p><a name="IXT-24-240746" />Data was assigned to a node that
doesn't support data, like an
<tt class="literal">Element</tt> node.
</p>
<h4 class="refsect1">Java binding</h4>

<blockquote><pre class="code">public static final short NO_DATA_ALLOWED_ERR = 6;</pre></blockquote>
</div></blockquote><blockquote><a name="IXT-24-240747" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b>NO_MODIFICATION_ALLOWED_ERR [unsigned short, value: 7 ]</b></font></td><td align="right"><i></i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><table width="515" border="0" cellpadding="5"><tr><td align="left" /><td align="right" /></tr></table><p><a name="IXT-24-240747" />An attempt was made to modify a node that
cannot be modified.
</p>
<h4 class="refsect1">Java binding</h4>

<blockquote><pre class="code">public static final short NO_MODIFICATION_ALLOWED_ERR = 7;</pre></blockquote>
</div></blockquote><blockquote><a name="IXT-24-240748" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b>NOT_FOUND_ERR [unsigned short, value: 8 ]</b></font></td><td align="right"><i></i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><table width="515" border="0" cellpadding="5"><tr><td align="left" /><td align="right" /></tr></table><p><a name="IXT-24-240748" />A node was modified in a context in which
it could not be found.
</p>
<h4 class="refsect1">Java binding</h4>

<blockquote><pre class="code">public static final short NOT_FOUND_ERR = 8;</pre></blockquote>
</div></blockquote><blockquote><a name="IXT-24-240749" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b>NOT_SUPPORTED_ERR [unsigned short, value: 9 ]</b></font></td><td align="right"><i></i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><table width="515" border="0" cellpadding="5"><tr><td align="left" /><td align="right" /></tr></table><p><a name="IXT-24-240749" />If in the specific implementation of the
DOM you chose not to implement an optional feature, this exception
would be thrown.
</p>
<h4 class="refsect1">Java binding</h4>

<blockquote><pre class="code">public static final short NOT_SUPPORTED_ERR = 9;</pre></blockquote>
</div></blockquote><blockquote><a name="IXT-24-240750" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b>INUSE_ATTRIBUTE_ERR [unsigned short, value: 10 ]</b></font></td><td align="right"><i></i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><table width="515" border="0" cellpadding="5"><tr><td align="left" /><td align="right" /></tr></table><p><a name="IXT-24-240750" />An attempt was made to add an attribute
that was already in use elsewhere. This error could occur if you
acquired an attribute via the <tt class="literal">getAttributeNode( )</tt>
method and tried to add the same object instance to another element
using the <tt class="literal">setAttributeNode( )</tt> method. You would
first need to create a new <tt class="literal">Attr</tt> object, probably
using the <tt class="literal">cloneNode( )</tt> method.
</p>
<h4 class="refsect1">Java binding</h4>

<blockquote><pre class="code">public static final short INUSE_ATTRIBUTE_ERR = 10;</pre></blockquote>
</div></blockquote><blockquote><a name="IXT-24-240751" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b>INVALID_STATE_ERR [unsigned short, value: 11]2</b></font></td><td align="right"><i></i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><table width="515" border="0" cellpadding="5"><tr><td align="left" /><td align="right" /></tr></table><p><a name="IXT-24-240751" />An attempt was made to use an object that
is no longer usable.
</p>
<h4 class="refsect1">Java binding</h4>

<blockquote><pre class="code">public static final short INVALID_STATE_ERR = 11;</pre></blockquote>
</div></blockquote><blockquote><a name="IXT-24-240752" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b>SYNTAX_ERR [unsigned short, value: 12]2</b></font></td><td align="right"><i></i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><table width="515" border="0" cellpadding="5"><tr><td align="left" /><td align="right" /></tr></table><p><a name="IXT-24-240752" />An invalid or illegal string was
specified.
</p>
<h4 class="refsect1">Java binding</h4>

<blockquote><pre class="code">public static final short SYNTAX_ERR = 12;</pre></blockquote>
</div></blockquote><blockquote><a name="IXT-24-240753" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b>INVALID_MODIFICATION_ERR [unsigned short, value: 13]2</b></font></td><td align="right"><i></i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><table width="515" border="0" cellpadding="5"><tr><td align="left" /><td align="right" /></tr></table><p><a name="IXT-24-240753" />An attempt was made to change the
type's underlying object.
</p>
<h4 class="refsect1">Java binding</h4>

<blockquote><pre class="code">public static final short INVALID_MODIFICATION_ERR = 13;</pre></blockquote>
</div></blockquote><blockquote><a name="IXT-24-240754" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b>NAMESPACE_ERR [unsigned short, value: 14]2</b></font></td><td align="right"><i></i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><table width="515" border="0" cellpadding="5"><tr><td align="left" /><td align="right" /></tr></table><p><a name="IXT-24-240754" />An attempt was made to use a method that
supports XML namespaces in a way that would violate namespace rules.
This error could occur if a qualified name were given to a method
without a corresponding namespace URI.
</p>
<h4 class="refsect1">Java binding</h4>

<blockquote><pre class="code">public static final short NAMESPACE_ERR = 14;</pre></blockquote>
</div></blockquote><blockquote><a name="IXT-24-240755" /><a name="IXTR3-7" /><a name="IXTR3-8" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b>INVALID_ACCESS_ERR [unsigned short, value: 15]2</b></font></td><td align="right"><i></i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><table width="515" border="0" cellpadding="5"><tr><td align="left" /><td align="right" /></tr></table><p><a name="IXT-24-240755" />The underlying object does not support a
parameter <a name="IXTR3-7" />or <a name="IXTR3-8" />operation.
</p>
<h4 class="refsect1">Java binding</h4>

<blockquote><pre class="code">public static final short INVALID_ACCESS_ERR = 15;</pre></blockquote>

</div></blockquote></div><a name="ch24-23753" /><a name="xmlnut2-IDXTERM-2391" /><a name="IXT-24-240756" /><a name="IXT-24-240757" /><a name="IXT-24-240758" /><a name="IXTR3-9" /><a name="IXT-24-240759" /><a name="IXT-24-240760" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b>DOMImplementation</b></font></td><td align="right"><i></i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><table width="515" border="0" cellpadding="5"><tr><td align="left" /><td align="right" /></tr></table><p>The <tt class="literal">DOMImplementation</tt><a name="xmlnut2-IDXTERM-2391" />
interface provides global information about the DOM implementation
you currently use. The only way to obtain a reference to the
<tt class="literal">DOMImplementation</tt> interface is through the
<tt class="literal">getImplementation( )</tt> method of the
<tt class="literal">Document</tt> object.
</p>
<h4 class="refsect1">Java example</h4>

<blockquote><pre class="code">// Check for DOM Level 1 support
DOMImplementation di = doc.getImplementation( );
// make sure that DOM Level 1 XML is supported
if (!di.hasFeature("XML", "1.0")) {
    return null;
}</pre></blockquote>


<h4 class="refsect1">Methods</h4>


<p>The <tt class="literal">DOMImplementation</tt> object defines the following
methods:
</p>
<blockquote><a name="IXT-24-240756" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b>createDocument: namespaceURI, qualifiedName, doctype2</b></font></td><td align="right"><i></i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><table width="515" border="0" cellpadding="5"><tr><td align="left" /><td align="right" /></tr></table><p><a name="IXT-24-240756" />Creates a new, empty
<tt class="literal">Document</tt> object with the given document type. It
also creates the single, top-level document element using the given
qualified name and namespace URI.
</p>
<h4 class="refsect1">Arguments</h4>

<dl>
<dt><i>namespaceURI: DOMString</i></dt>
<dd>
The namespace URI used to create the top-level document element. Can
be <tt class="literal">null</tt> if no namespace is used.
</p>
</dd>


<dt><i>qualifiedName: DOMString</i></dt>
<dd>
The namespace-aware qualified name of the top-level document element
to be created. The prefix given in this parameter is associated with
the namespace URI given in the <tt class="literal">namespaceURI</tt>
parameter.
</p>
</dd>


<dt><i>doctype: DOMString</i></dt>
<dd>
The document type definition object to be associated with the new
document. If this parameter is not <tt class="literal">null</tt>, the
<tt class="literal">DocumentType</tt> node's
<tt class="literal">ownerDocument</tt> attribute is set to point to the new
document object.
</p>
</dd>

</dl>


<h4 class="refsect1">Exceptions</h4>

<dl>
<dt><i>INVALID_CHARACTER_ERR</i></dt>
<dd>
Indicates that the <tt class="literal">qualifiedName</tt> parameter has a
malformed XML identifier.
</p>
</dd>


<dt><i>NAMESPACE_ERR</i></dt>
<dd>
Raised if an inconsistency exists between the values given for the
<tt class="literal">namespaceURI</tt> and the
<tt class="literal">qualifiedName</tt> parameters. Passing in a qualified
name with a namespace prefix and not passing in a namespace URI is
illegal. This can also be generated if a reserved namespace prefix,
such as <tt class="literal">"xml"</tt>, is given with an incorrect
namespace URI.
</p>
</dd>


<dt><i>WRONG_DOCUMENT_ERR</i></dt>
<dd>
Raised if the <tt class="literal">DocumentType</tt> node passed in the
<tt class="literal">doctype</tt> parameter is already associated with
another document object. New <tt class="literal">DocumentType</tt> objects
must be created using the new <tt class="literal">createDocumentType</tt>
method of the <tt class="literal">DOMImplementation</tt> interface.
</p>
</dd>

</dl>


<h4 class="refsect1">Java binding</h4>

<blockquote><pre class="code">public Document createDocument(String namespaceURI,
    String qualifiedName, DocumentType doctype) throws DOMException;</pre></blockquote>
</div></blockquote><blockquote><a name="IXT-24-240757" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b>createDocumentType: qualifiedName, publicId, systemId2</b></font></td><td align="right"><i></i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><table width="515" border="0" cellpadding="5"><tr><td align="left" /><td align="right" /></tr></table><p><a name="IXT-24-240757" />Creates an empty
<tt class="literal">DocumentType</tt> node that is not associated with any
document. No entity declarations or notations are available in this
new, empty <tt class="literal">DocumentType</tt> object. No support
currently exists in the DOM to populate this object.
</p>
<h4 class="refsect1">Arguments</h4>

<dl>
<dt><i>qualifiedName: DOMString</i></dt>
<dd>
The qualified name of the document type to be created. </p>
</dd>


<dt><i>publicId: DOMString</i></dt>
<dd>
The external subset's public identifier. </p>
</dd>


<dt><i>systemId: DOMString</i></dt>
<dd>
The system identifier (URI) of the external subset to be created. </p>
</dd>

</dl>


<h4 class="refsect1">Return value</h4>


<p>A new <tt class="literal">DocumentType</tt> object with the
<tt class="literal">ownerDocument</tt> attribute set to
<tt class="literal">null</tt>.
</p>


<h4 class="refsect1">Exceptions</h4>

<dl>
<dt><i>INVALID_CHARACTER_ERR</i></dt>
<dd>
Indicates that the <tt class="literal">qualifiedName</tt> parameter has a
malformed XML identifier.
</p>
</dd>


<dt><i>NAMESPACE_ERR</i></dt>
<dd>
Raised if the qualified name is malformed.</p>
</dd>

</dl>


<h4 class="refsect1">Java binding</h4>

<blockquote><pre class="code">public DocumentType createDocumentType(String qualifiedName,
         String publicId, String systemId) throws DOMException;</pre></blockquote>
</div></blockquote><blockquote><a name="ch24-28730" /><a name="IXT-24-240758" /><a name="IXTR3-9" /><a name="IXT-24-240759" /><a name="IXT-24-240760" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b>hasFeature: feature, version</b></font></td><td align="right"><i></i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><table width="515" border="0" cellpadding="5"><tr><td align="left" /><td align="right" /></tr></table><p><a name="IXT-24-240758" />Tests to
see if the DOM implementation supports a given named feature package.
It returns <tt class="literal">true</tt> if the particular version of the
specified feature is available; otherwise, returns
<tt class="literal">false</tt>.
</p>
<h4 class="refsect1">Arguments</h4>

<dl>
<dt><i>feature: DOMString</i></dt>
<dd>
The package name of the feature to test. The following feature names
(and others listed at <a href="../../../../../../www.w3.org/TR/DOM-Level-2-Core/introduction.html-ID-Conformance">http://www.w3.org/TR/DOM-Level-2-Core/introduction.html-ID-Conformance</a>)
are valid:
</p>
</dd>


<dt><i>XML</i></dt>
<dd>
Supports DOM Level 1.0 or 2.0 Core objects.</p>
</dd>


<dt><i>HTML</i></dt>
<dd>
Supports DOM Level 1.0 or 2.0 HTML objects.</p>
</dd>


<dt><i>version: DOMString</i></dt>
<dd>
Represents the DOM version level of the specified feature to test. If
no version<tt class="literal">null</tt> number is specified, the function
returns <tt class="literal">true</tt> if any version is supported.
</p>
</dd>

</dl>


<h4 class="refsect1">Java binding</h4>

<blockquote><pre class="code">public boolean hasFeature(String feature, String version);</pre></blockquote>


<h4 class="refsect1">Java example</h4>

<blockquote><pre class="code">// Make sure that DOM Level 1 XML is supported
if (!di.hasFeature("XML", "1.0")) {
    return null;
}</pre></blockquote>



<a name="ch24-154-fm2xml" /><blockquote><b>NOTE:</b> 
The HTML-specific DOM objects are beyond the scope of this book, but
they are extremely useful tools for building applications that
perform transformations on HTML documents. An excellent reference to
the HTML DOM objects can be found in <a name="IXTR3-9" />the book <em class="emphasis">Dynamic HTML: The
Definitive
Reference</em><a name="IXT-24-240759" />, by Danny <a name="IXT-24-240760" />Goodman (O'Reilly &amp;
Associates).
</p>
</blockquote>

</div></blockquote></div><a name="ch24-155-fm2xml" /><a name="xmlnut2-IDXTERM-2398" /><a name="IXT-24-240761" /><a name="IXT-24-240762" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b>Element</b></font></td><td align="right"><i></i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><table width="515" border="0" cellpadding="5"><tr><td align="left" /><td align="right" /></tr></table><p>The <a name="xmlnut2-IDXTERM-2398" /><tt class="literal">Element</tt> object type
provides access to the XML document's structure and
data. Every XML element is translated into a single
<tt class="literal">Element</tt> node. The document's root
element is accessible through the <tt class="literal">documentElement</tt>
property of the <tt class="literal">Document</tt> object. From this node,
it is possible to re-create the full structure of the original XML
document by traversing the element tree.
</p>
<h4 class="refsect1">Java example</h4>

<blockquote><pre class="code">// Get the XML document's root element
Element elem = doc.getDocumentElement( );</pre></blockquote>


<p>This interface extends the basic <tt class="literal">Node</tt> interface to
allow access to the XML attributes of the document element. Two sets
of methods allow access to attribute values, either as
<tt class="literal">Attr</tt> object trees or as simple
<tt class="literal">DOMStrings</tt>.
</p>


<h4 class="refsect1">Attribute</h4>


<p>The <tt class="literal">Element</tt><a name="IXT-24-240761" />
object defines one attribute that contains the XML tag name:
</p>
<blockquote><a name="IXT-24-240762" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b>tagName: DOMString</b></font></td><td align="right"><i></i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><table width="515" border="0" cellpadding="5"><tr><td align="left" /><td align="right" /></tr></table><p><a name="IXT-24-240762" />The XML tag name from the original
document.
</p>
<h4 class="refsect1">Java binding</h4>

<blockquote><pre class="code">public String getTagName( );

// Show the name of the root element tag
Element elem = doc.getDocumentElement( );
System.out.println("This is a " + elem.getTagName( ) + " document.");</pre></blockquote>

</div></blockquote></div><a name="ch24-155a-fm2xml" /><a name="IXT-24-240763" /><a name="IXT-24-240764" /><a name="IXT-24-240765" /><a name="IXT-24-240766" /><a name="IXT-24-240767" /><a name="IXT-24-240768" /><a name="IXT-24-240769" /><a name="IXT-24-240770" /><a name="IXT-24-240771" /><a name="IXT-24-240772" /><a name="IXT-24-240773" /><a name="IXT-24-240774" /><a name="IXT-24-240775" /><a name="IXT-24-240776" /><a name="IXT-24-240777" /><a name="IXT-24-240778" /><a name="IXTR3-10" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b>Element (continued)</b></font></td><td align="right"><i></i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><table width="515" border="0" cellpadding="5"><tr><td align="left" /><td align="right" /></tr></table>
<h4 class="refsect1">Methods</h4>


<p>The following methods are defined for this object:</p>
<blockquote><a name="IXT-24-240763" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b>getAttribute: name</b></font></td><td align="right"><i></i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><table width="515" border="0" cellpadding="5"><tr><td align="left" /><td align="right" /></tr></table><p><a name="IXT-24-240763" />Returns the attribute specified by the
<tt class="literal">name</tt> parameter as a <tt class="literal">DOMString</tt>.
See the <a href="ch24_01.htm">getAttributeNode:name</a> for a
complete explanation of how an attribute value is determined. This
returns an empty string if no attribute is set and if no default
attribute value was specified in the DTD.
</p>
<h4 class="refsect1">Java binding</h4>

<blockquote><pre class="code">public String getAttribute(String name);</pre></blockquote>


<h4 class="refsect1">Java example</h4>

<blockquote><pre class="code">// Check for the name attribute
Element elem = doc.getDocumentElement( );

if (elem.getAttribute("name") == "") {
    System.out.println("warning: " + elem.getTagName( ) +
                   " element: no name attribute");
}</pre></blockquote>
</div></blockquote><blockquote><a name="IXT-24-240764" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b>getAttributeNS: namespaceURI, localName2</b></font></td><td align="right"><i></i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><table width="515" border="0" cellpadding="5"><tr><td align="left" /><td align="right" /></tr></table><p><a name="IXT-24-240764" />Returns an attribute as a
<tt class="literal">DOMString</tt>, based on the namespace and local part
of the qualified name.
</p>
<h4 class="refsect1">Arguments</h4>

<dl>
<dt><i>namespaceURI: DOMString</i></dt>
<dd>
The namespace URI of the attribute to return.</p>
</dd>


<dt><i>localName: DOMString</i></dt>
<dd>
The local name portion of the qualified attribute name to return.</p>
</dd>

</dl>


<h4 class="refsect1">Return value</h4>


<p>Returns an empty string if no attribute is set and if no default
attribute value was specified in the DTD.
</p>


<h4 class="refsect1">Java binding</h4>

<blockquote><pre class="code">public String getAttributeNS(String namespaceURI, String localName);</pre></blockquote>
</div></blockquote><blockquote><a name="ch24-getAttrNodenam" /><a name="IXT-24-240765" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b>getAttributeNode: name</b></font></td><td align="right"><i></i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><table width="515" border="0" cellpadding="5"><tr><td align="left" /><td align="right" /></tr></table><p><a name="IXT-24-240765" />Retrieves the <tt class="literal">Attr</tt> for
the <tt class="literal">name</tt> attribute. Returns a reference to the
attribute object if it is found; otherwise, <tt class="literal">null</tt>.
</p>
<h4 class="refsect1">Arguments</h4>

<dl>
<dt><i>name: DOMString</i></dt>
<dd>
Name of the attribute to retrieve.</p>
</dd>

</dl>


<h4 class="refsect1">Java binding</h4>

<blockquote><pre class="code">public Attr getAttributeNode(String name);</pre></blockquote>


<h4 class="refsect1">Java example</h4>

<blockquote><pre class="code">// Use the id attribute
Attr attr;

if ((attr = elem.getAttributeNode("id")) == null) {
    System.out.println("warning: element " + elem.getTagName( ) + 
                       ": no id attribute provided.");
}</pre></blockquote>
</div></blockquote><blockquote><a name="IXT-24-240766" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b>getAttributeNodeNS: namespaceURI, localName2</b></font></td><td align="right"><i></i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><table width="515" border="0" cellpadding="5"><tr><td align="left" /><td align="right" /></tr></table><p><a name="IXT-24-240766" />Retrieves the <tt class="literal">Attr</tt>
object for the attribute specified by the given namespace URI and
local name. Returns a reference to the attribute object if it is
found; otherwise returns <tt class="literal">null</tt>.
</p>
<h4 class="refsect1">Arguments</h4>

<dl>
<dt><i>namespaceURI: DOMString</i></dt>
<dd>
Namespace URI of the target attribute.</p>
</dd>


<dt><i>localName: DOMString</i></dt>
<dd>
Local name of the target attribute. The local name is the part of the
name to the right of the <tt class="literal">:</tt> in a qualified name.
</p>
</dd>

</dl>


<h4 class="refsect1">Java binding</h4>

<blockquote><pre class="code">public Attr getAttributeNodeNS(String namespaceURI, String localName);</pre></blockquote>
</div></blockquote><blockquote><a name="IXT-24-240767" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b>getElementsByTagName: name</b></font></td><td align="right"><i></i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><table width="515" border="0" cellpadding="5"><tr><td align="left" /><td align="right" /></tr></table><p><a name="IXT-24-240767" />Returns a
<tt class="literal">NodeList</tt> of all descendant
<tt class="literal">Element</tt> nodes whose <tt class="literal">tagName</tt>
attribute matches the given <tt class="literal">name</tt> parameter. The
nodes are returned in the same order in which they would be
encountered in a preorder traversal of the document tree. A preorder
traversal conforms to the order in which the XML elements appear in
the source document.
</p>
<h4 class="refsect1">Argument</h4>

<dl>
<dt><i>name: DOMString</i></dt>
<dd>
The name of the tag to use as a filter. The special name * matches
any tag.
</p>
</dd>

</dl>


<h4 class="refsect1">Java binding</h4>

<blockquote><pre class="code">public NodeList getElementsByTagName(String name);</pre></blockquote>


<h4 class="refsect1">Java example</h4>

<blockquote><pre class="code">// Find every address element in the document
Element elem = doc.getDocumentElement( );
NodeList nlAddrs = elem.getElementsByTagName("address");</pre></blockquote>
</div></blockquote><blockquote><a name="IXT-24-240768" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b>getElementsByTagNameNS: namespaceURI, localName2</b></font></td><td align="right"><i></i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><table width="515" border="0" cellpadding="5"><tr><td align="left" /><td align="right" /></tr></table><p><a name="IXT-24-240768" />Like the
<tt class="literal">getElementsByTagName</tt> method, returns a list of
<tt class="literal">Element</tt> nodes, descendants of the
<tt class="literal">Element</tt> node on which the method is called, that
match the criteria given in the <tt class="literal">namespaceURI</tt> and
<tt class="literal">localName</tt> parameters. The resulting list contains
all elements matching the namespace URI and local name restrictions,
as they would be encountered in a preorder traversal of the document
tree.
</p>
<h4 class="refsect1">Arguments</h4>

<dl>
<dt><i>namespaceURI: DOMString</i></dt>
<dd>
The namespace URI of elements to be matched. The special * value
matches any namespace.
</p>
</dd>


<dt><i>localName: DOMString</i></dt>
<dd>
The local name part of elements to be matched. The special value *
matches any local name.
</p>
</dd>

</dl>


<h4 class="refsect1">Java binding</h4>

<blockquote><pre class="code">public NodeList getElementsByTagNameNS(String namespaceURI,
                                       String localName);</pre></blockquote>
</div></blockquote><blockquote><a name="IXT-24-240769" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b>hasAttribute: name2</b></font></td><td align="right"><i></i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><table width="515" border="0" cellpadding="5"><tr><td align="left" /><td align="right" /></tr></table><p><a name="IXT-24-240769" />Returns <tt class="literal">true</tt> if
an attribute with the given name has been set or has a default value.
Returns <tt class="literal">false</tt> if the attribute
isn't defined.
</p>
<h4 class="refsect1">Argument</h4>

<dl>
<dt><i>name: DOMString</i></dt>
<dd>
The name of the attribute to be identified.</p>
</dd>

</dl>


<h4 class="refsect1">Java binding</h4>

<blockquote><pre class="code">public boolean hasAttribute(String name);</pre></blockquote>
</div></blockquote><blockquote><a name="IXT-24-240770" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b>hasAttributeNS: namespaceURI, localName2</b></font></td><td align="right"><i></i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><table width="515" border="0" cellpadding="5"><tr><td align="left" /><td align="right" /></tr></table><p><a name="IXT-24-240770" />Returns <tt class="literal">true</tt> if
an attribute with the given <tt class="literal">namespaceURI</tt> and
<tt class="literal">localName</tt> has been set or has a default value.
Returns <tt class="literal">false</tt> if the attribute
isn't defined.
</p>
<h4 class="refsect1">Arguments</h4>

<dl>
<dt><i>namespaceURI: DOMString</i></dt>
<dd>
The namespace URI of the attribute to be identified.</p>
</dd>


<dt><i>localName: DOMString</i></dt>
<dd>
The local name of the attribute to be identified.</p>
</dd>

</dl>


<h4 class="refsect1">Java binding</h4>

<blockquote><pre class="code">public boolean hasAttribute(String namespaceURI, String localName);</pre></blockquote>
</div></blockquote><blockquote><a name="IXT-24-240771" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b>normalize</b></font></td><td align="right"><i></i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><table width="515" border="0" cellpadding="5"><tr><td align="left" /><td align="right" /></tr></table><p><a name="IXT-24-240771" />Traverses the subtree of the current
<tt class="literal">Element</tt>, combining adjacent
<tt class="literal">Text</tt> nodes into a single node.
</p><a name="ch24-180-fm2xml" /><blockquote><b>NOTE:</b> 
This method was moved to the <tt class="literal">Node</tt> interface as
part of the DOM Level 2 specification. It is still accessible from
the <tt class="literal">Element</tt> interface, as it inherits from the
<tt class="literal">Node</tt> interface.
</p>
</blockquote>
<h4 class="refsect1">Java binding</h4>

<blockquote><pre class="code">public void normalize( );</pre></blockquote>


<h4 class="refsect1">Java example</h4>

<blockquote><pre class="code">// Merge all adjacent text nodes below this element
elem.normalize( );</pre></blockquote>
</div></blockquote><blockquote><a name="IXT-24-240772" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b>removeAttribute: name</b></font></td><td align="right"><i></i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><table width="515" border="0" cellpadding="5"><tr><td align="left" /><td align="right" /></tr></table><p><a name="IXT-24-240772" />Removes the named element attribute from
this element's <tt class="literal">attributes</tt>
collection. If the attribute to be removed has a default value
declared in the DTD, subsequent attempts to retrieve the attribute
value return the default value.
</p>
<h4 class="refsect1">Argument</h4>

<dl>
<dt><i>name: DOMString</i></dt>
<dd>
Name of the attribute to remove.</p>
</dd>

</dl>


<h4 class="refsect1">Exception</h4>

<dl>
<dt><i>NO_MODIFICATION_ALLOWED_ERR</i></dt>
<dd>
Raised if the element is read-only.</p>
</dd>

</dl>


<h4 class="refsect1">Java binding</h4>

<blockquote><pre class="code">public void removeAttribute(String name) throws DOMException;</pre></blockquote>


<h4 class="refsect1">Java example</h4>

<blockquote><pre class="code">// Remove the unique ID
...
elem.removeAttribute("id");
...</pre></blockquote>
</div></blockquote><blockquote><a name="IXT-24-240773" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b>removeAttributeNS: namespaceURI, localName2</b></font></td><td align="right"><i></i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><table width="515" border="0" cellpadding="5"><tr><td align="left" /><td align="right" /></tr></table><p><a name="IXT-24-240773" />Uses the given namespace URI and local
name parameters to remove the desired attribute from the
element's <tt class="literal">attributes</tt> collection.
</p>
<h4 class="refsect1">Arguments</h4>

<dl>
<dt><i>namespaceURI: DOMString</i></dt>
<dd>
Namespace URI of the target attribute.</p>
</dd>


<dt><i>localName: DOMString</i></dt>
<dd>
Local name part of the target attribute. The local name is the part
to the right of the final <tt class="literal">:</tt> in a qualified name.
</p>
</dd>

</dl>


<h4 class="refsect1">Exception</h4>

<dl>
<dt><i>NO_MODIFICATION_ALLOWED_ERR</i></dt>
<dd>
Raised if the element is read-only.</p>
</dd>

</dl>


<h4 class="refsect1">Java binding</h4>

<blockquote><pre class="code">public void removeAttributeNS(String namespaceURI, String localName)
               throws DOMException;</pre></blockquote>
</div></blockquote><blockquote><a name="IXT-24-240774" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b>removeAttributeNode: oldAttr</b></font></td><td align="right"><i></i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><table width="515" border="0" cellpadding="5"><tr><td align="left" /><td align="right" /></tr></table><p><a name="IXT-24-240774" />Removes the referenced attribute node from
this element's <tt class="literal">attributes</tt>
collection. If the attribute to be removed has a default value
declared in the DTD, subsequent attempts to retrieve the attribute
value return the default value.
</p>
<h4 class="refsect1">Argument</h4>

<dl>
<dt><i>oldAttr: Attr</i></dt>
<dd>
The attribute node to remove.</p>
</dd>

</dl>


<h4 class="refsect1">Exceptions</h4>

<dl>
<dt><i>NO_MODIFICATION_ALLOWED_ERR</i></dt>
<dd>
Raised if the node is read-only.</p>
</dd>


<dt><i>NOT_FOUND_ERR</i></dt>
<dd>
Raised if no attribute name matching the <tt class="literal">oldAttr</tt>
parameter is found in the map.
</p>
</dd>

</dl>


<h4 class="refsect1">Java binding</h4>

<blockquote><pre class="code">public Attr removeAttributeNode(Attr oldAttr) throws DOMException;</pre></blockquote>


<h4 class="refsect1">Java example</h4>

<blockquote><pre class="code">// Find and remove temporary attributes
Attr attr;

if ((attr = elem.getAttributeNode("temp")) != null) {
    // remove it
    elem.removeAttributeNode(attr);
}</pre></blockquote>
</div></blockquote><blockquote><a name="IXT-24-240775" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b>setAttribute: name, value</b></font></td><td align="right"><i></i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><table width="515" border="0" cellpadding="5"><tr><td align="left" /><td align="right" /></tr></table><p><a name="IXT-24-240775" />Sets
the attribute specified by the <tt class="literal">name</tt> parameter to
the <tt class="literal">DOMString</tt> passed in the
<tt class="literal">value</tt> argument. The string is not parsed for
entity references and is set as a <tt class="literal">Text</tt> node child
of the corresponding member of the <tt class="literal">attributes</tt>
collection. If an attribute with the given name already exists, the
value is set to the <tt class="literal">value</tt> argument.
</p>
<h4 class="refsect1">Arguments</h4>

<dl>
<dt><i>name: DOMString</i></dt>
<dd>
The attribute name to set or modify.</p>
</dd>


<dt><i>value: DOMString</i></dt>
<dd>
The new attribute value.</p>
</dd>

</dl>


<h4 class="refsect1">Exceptions</h4>

<dl>
<dt><i>INVALID_CHARACTER_ERR</i></dt>
<dd>
Indicates that the attribute name you passed in
doesn't represent a valid XML attribute name.
</p>
</dd>


<dt><i>NO_MODIFICATION_ALLOWED_ERR</i></dt>
<dd>
Raised if the element is read-only.</p>
</dd>

</dl>


<h4 class="refsect1">Java binding</h4>

<blockquote><pre class="code">public void setAttribute(String name, String value) throws DOMException;</pre></blockquote>


<h4 class="refsect1">Java example</h4>

<blockquote><pre class="code">// Check for the name attribute
if (elem.getAttribute("name") == "") {
    // oh well, set a reasonable default
    elem.setAttribute("name", elem.getTagName( ));
}</pre></blockquote>
</div></blockquote><blockquote><a name="IXT-24-240776" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b>setAttributeNS: namespaceURI, qualifiedName, value2</b></font></td><td align="right"><i></i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><table width="515" border="0" cellpadding="5"><tr><td align="left" /><td align="right" /></tr></table><p><a name="IXT-24-240776" />This
method is the namespace-enabled version of the basic
<tt class="literal">setAttribute</tt> method. The namespace URI and the
qualified name update the <tt class="literal">attributes</tt> collection of
the element in question.
</p>
<h4 class="refsect1">Arguments</h4>

<dl>
<dt><i>namespaceURI: DOMString</i></dt>
<dd>
The namespace URI of the attribute value to set.</p>
</dd>


<dt><i>qualifiedName: DOMString</i></dt>
<dd>
The qualified name (including namespace prefix) of the new value to
set.
</p>
</dd>


<dt><i>value: DOMString</i></dt>
<dd>
The new attribute value.</p>
</dd>

</dl>


<h4 class="refsect1">Exceptions</h4>

<dl>
<dt><i>INVALID_CHARACTER_ERR</i></dt>
<dd>
Indicates that the attribute name you passed in
doesn't represent a valid XML attribute name.
</p>
</dd>


<dt><i>NO_MODIFICATION_ALLOWED_ERR</i></dt>
<dd>
Raised if the element is read-only.</p>
</dd>


<dt><i>NAMESPACE_ERR</i></dt>
<dd>
Raised if the <tt class="literal">namespaceURI</tt> and
<tt class="literal">qualifiedName</tt> parameters would violate rules
concerning namespaces. If the qualified name includes a prefix, the
namespace URI cannot be null or an empty string. If the reserved
<tt class="literal">xml</tt> or <tt class="literal">xmlns</tt> prefixes are used,
the namespace URI must match the corresponding specified system URI.
See <a href="ch04_01.htm">Chapter 4</a> for more information about
namespaces and prefixes.
</p>
</dd>

</dl>


<h4 class="refsect1">Java binding</h4>

<blockquote><pre class="code">public void setAttributeNS(String namespaceURI, String qualifiedName,
                           String value) throws DOMException;</pre></blockquote>
</div></blockquote><blockquote><a name="IXT-24-240777" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b>setAttributeNode: newAttr</b></font></td><td align="right"><i></i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><table width="515" border="0" cellpadding="5"><tr><td align="left" /><td align="right" /></tr></table><p><a name="IXT-24-240777" />Sets or replaces the attribute in the
<tt class="literal">Node</tt> interface's
<tt class="literal">attributes</tt> collection with the given
<tt class="literal">Attr</tt> object. The attribute name is retrieved from
the name attribute of the new attribute object. If an
<tt class="literal">Attr</tt> object with the given name already exists in
the <tt class="literal">attributes</tt> collection, this method returns a
reference to the old <tt class="literal">Attr</tt> object. Otherwise, it
returns <tt class="literal">null</tt>.
</p>
<h4 class="refsect1">Argument</h4>

<dl>
<dt><i>newAttr: Attr</i></dt>
<dd>
The new <tt class="literal">Attr</tt> object to set.</p>
</dd>

</dl>


<h4 class="refsect1">Exceptions</h4>

<dl>
<dt><i>WRONG_DOCUMENT_ERR</i></dt>
<dd>
Raised if the <tt class="literal">newAttr</tt> node was created in a
document different than the parent node.
</p>
</dd>


<dt><i>NO_MODIFICATION_ALLOWED_ERR</i></dt>
<dd>
Raised if the new parent node is read-only.</p>
</dd>


<dt><i>INUSE_ATTRIBUTE_ERR</i></dt>
<dd>
Raised if another <tt class="literal">Element</tt> already uses the new
<tt class="literal">Attr</tt> node. Each element must have a distinct
<tt class="literal">Attr</tt> object.
</p>
</dd>

</dl>


<h4 class="refsect1">Java binding</h4>

<blockquote><pre class="code">public Attr setAttributeNode(Attr newAttr) throws DOMException;</pre></blockquote>


<h4 class="refsect1">Java example</h4>

<blockquote><pre class="code">// Make sure you have an id attribute to work with
Attr attr;

if ((attr = elem.getAttributeNode("id")) == null) {
    // add a default, unique id
    attr = doc.createAttribute("id");

    elem.setAttributeNode(attr);

    // continue processing
}</pre></blockquote>
</div></blockquote><blockquote><a name="IXT-24-240778" /><a name="IXTR3-10" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b>setAttributeNodeNS: newAttr2</b></font></td><td align="right"><i></i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><table width="515" border="0" cellpadding="5"><tr><td align="left" /><td align="right" /></tr></table><p><a name="IXT-24-240778" />Sets or replaces the attribute in the
element's <tt class="literal">attributes</tt> collection
that matches the namespace URI and the given <tt class="literal">Attr</tt>
object's local name. This operation is identical to
the <tt class="literal">setAttributeNode</tt> method, except that it
considers namespace differences between attributes. If an
<tt class="literal">Attr</tt> object with the given name in the
<tt class="literal">attributes</tt> collection already exists, this method
returns a reference to the old <tt class="literal">Attr</tt> object;
otherwise, it returns <tt class="literal">null</tt>.
</p>
<h4 class="refsect1">Argument</h4>

<dl>
<dt><i>newAttr: Attr</i></dt>
<dd>
The new <tt class="literal">Attr</tt> object to set.</p>
</dd>

</dl>


<h4 class="refsect1">Exceptions</h4>

<dl>
<dt><i>WRONG_DOCUMENT_ERR</i></dt>
<dd>
Raised if the <tt class="literal">newAttr</tt> node was created in a
different document than the parent node.
</p>
</dd>


<dt><i>NO_MODIFICATION_ALLOWED_ERR</i></dt>
<dd>
Raised if the new parent node is read-only.</p>
</dd>


<dt><i>INUSE_ATTRIBUTE_ERR</i></dt>
<dd>
Raised if another <tt class="literal">Element</tt> already uses the
<tt class="literal">newAttr</tt> node. Each element must have a unique
<tt class="literal">Attr</tt> <a name="IXTR3-10" />object.
</p>
</dd>

</dl>


<h4 class="refsect1">Java binding</h4>

<blockquote><pre class="code">public Attr setAttributeNodeNS(Attr newAttr) throws DOMException;</pre></blockquote>

</div></blockquote></div><a name="ch24-208-fm2xml" /><a name="IXT-24-240779" /><a name="IXT-24-240780" /><a name="IXT-24-240781" /><a name="IXT-24-240782" /><a name="IXT-24-240783" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b>Entity</b></font></td><td align="right"><i></i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><table width="515" border="0" cellpadding="5"><tr><td align="left" /><td align="right" /></tr></table><p>The <tt class="literal">Entity</tt><a name="IXT-24-240779" /> object represents a given general XML
entity's replacement value. Depending on whether a
given DOM implementation is validating or nonvalidating and whether
it chooses to expand entity references inline during parsing,
<tt class="literal">Entity</tt> objects may not be available to the DOM
user.
</p>
<h4 class="refsect1">Java example</h4>

<blockquote><pre class="code">// Locate the my_entity entity declaration
Entity ndEnt = (Entity)doc.getDoctype().getEntities( ).
    getNamedItem("my_entity");</pre></blockquote>


<h4 class="refsect1">Attributes</h4>


<p>The <a name="IXT-24-240780" />following read-only attributes are defined
for the <tt class="literal">Entity</tt> object:
</p>
<blockquote><a name="IXT-24-240781" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b>notationName: </b></font></td><td align="right"><i></i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><table width="515" border="0" cellpadding="5"><tr><td align="left" /><td align="right" /></tr></table><p><a name="IXT-24-240781" />If this entity is unparsed, the
entity's notation name. For parsed entities, this
attribute is <tt class="literal">null</tt>.
</p>
<h4 class="refsect1">Java binding</h4>

<blockquote><pre class="code">public String getNotationName( );</pre></blockquote>


<h4 class="refsect1">Java example</h4>

<blockquote><pre class="code">// Find out if it's a parsed entity
boolean fParsedEnt = ndEnt.getNotationName( ) == null;</pre></blockquote>
</div></blockquote><blockquote><a name="IXT-24-240782" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b>publicId: DOMString</b></font></td><td align="right"><i></i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><table width="515" border="0" cellpadding="5"><tr><td align="left" /><td align="right" /></tr></table><p><a name="IXT-24-240782" />The public identifier URL (URI)
given for this entity, or <tt class="literal">null</tt> if none was
specified.
</p>
<h4 class="refsect1">Java binding</h4>

<blockquote><pre class="code">public String getPublicId( );</pre></blockquote>


<h4 class="refsect1">Java example</h4>

<blockquote><pre class="code">// Locate the my_entity entity declaration
Entity ndEnt = (Entity)doc.getDoctype().getEntities( ).getNamedItem("my_
entity");
    
// if my_entity type was found and there is a public-ID (URL)...
if (ndEnt != null &amp;&amp; ndEnt.getPublicId( ) != null) {
    try {
        // ...get the URL protocol
        URL urlSys = new URL(ndEnt.getPublicId( ));
        System.out.println("Entity " + ndEnt.getNodeName( ) +
                           ": protocol " + urlSys.getProtocol( ));
    } catch (MalformedURLException e) {
    }
}</pre></blockquote>
</div></blockquote><blockquote><a name="IXT-24-240783" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b>systemId: DOMString</b></font></td><td align="right"><i></i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><table width="515" border="0" cellpadding="5"><tr><td align="left" /><td align="right" /></tr></table><p><a name="IXT-24-240783" />The system identifier URL (URI)
given for this entity, or <tt class="literal">null</tt> if none was
specified.
</p>
<h4 class="refsect1">Java binding</h4>

<blockquote><pre class="code">public String getSystemId( );</pre></blockquote>


<h4 class="refsect1">Java example</h4>

<blockquote><pre class="code">// Get the Public ID or System ID for this entity
Entity ndEnt = (Entity)doc.getDoctype().getEntities( ).getNamedItem("my_ entity");

String strURL = ndEnt.getPublicId( );
    
// if can't find the public URL
if (strURL == null) {
    // find the system URL
    strURL = ndEnt.getSystemId( );
}</pre></blockquote>

</div></blockquote></div><a name="ch24-217-fm2xml" /><a name="IXT-24-240784" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b>EntityReference</b></font></td><td align="right"><i></i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><table width="515" border="0" cellpadding="5"><tr><td align="left" /><td align="right" /></tr></table><p><tt class="literal">EntityReference</tt>
<a name="IXT-24-240784" />nodes appear within the document hierarchy
wherever an XML general entity reference is embedded within the
source document. Depending on the DOM implementation, a corresponding
<tt class="literal">Entity</tt> object may exist in the
<tt class="literal">entities</tt> collection of the
<tt class="literal">docType</tt> attribute of the
<tt class="literal">Document</tt> object. If such an entity exists, then
the child nodes of both the <tt class="literal">Entity</tt> and
<tt class="literal">EntityReference</tt> represent the replacement text
associated with the given entity.
</p>
<h4 class="refsect1">Java example</h4>

<blockquote><pre class="code">// Create a new entity reference
EntityReference ndER = doc.createEntityReference("my_entity");</pre></blockquote>

</div><a name="ch24-219-fm2xml" /><a name="xmlnut2-IDXTERM-2424" /><a name="IXT-24-240785" /><a name="IXT-24-240786" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b>NamedNodeMap</b></font></td><td align="right"><i></i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><table width="515" border="0" cellpadding="5"><tr><td align="left" /><td align="right" /></tr></table><p>The <a name="xmlnut2-IDXTERM-2424" /><tt class="literal">NamedNodeMap</tt> interface
provides a mechanism used to retrieve Node objects from a collection
by name. Though this interface exposes the same methods and
attributes as the <tt class="literal">NodeList</tt> class, they are not
related. While it is possible to enumerate the nodes in a
<tt class="literal">NamedNodeMap</tt> using the <tt class="literal">item( )</tt>
method and <tt class="literal">length</tt> attribute, the nodes are not
guaranteed to be in any particular order.
</p>
<h4 class="refsect1">Java example</h4>

<blockquote><pre class="code">// Get an element's attributes
NamedNodeMap nnm = elem.getAttributes( );</pre></blockquote>


<h4 class="refsect1">Attribute</h4>


<p>The <tt class="literal">NamedNodeMap</tt><a name="IXT-24-240785" /> defines one attribute:
</p>
<blockquote><a name="IXT-24-240786" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b>length: unsigned long</b></font></td><td align="right"><i></i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><table width="515" border="0" cellpadding="5"><tr><td align="left" /><td align="right" /></tr></table><p><a name="IXT-24-240786" />The total number of
<tt class="literal">Node</tt> objects in the list.
</p>
<h4 class="refsect1">Java binding</h4>

<blockquote><pre class="code">public long getLength( );</pre></blockquote>


<h4 class="refsect1">Java example</h4>

<blockquote><pre class="code">// Iterate over the attribute list
for (int i = 0; i &lt; nnm.getLength( ); i++) {
    ...
}</pre></blockquote>

</div></blockquote></div><a name="ch24-219a-fm2xml" /><a name="IXT-24-240787" /><a name="IXT-24-240788" /><a name="IXT-24-240789" /><a name="IXT-24-240790" /><a name="IXT-24-240791" /><a name="IXT-24-240792" /><a name="IXT-24-240793" /><a name="IXTR3-11" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b>NamedNodeMap (continued)</b></font></td><td align="right"><i></i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><table width="515" border="0" cellpadding="5"><tr><td align="left" /><td align="right" /></tr></table>
<h4 class="refsect1">Methods</h4>


<p>The following methods are defined for the
<tt class="literal">NamedNodeMap</tt> object:
</p>
<blockquote><a name="IXT-24-240787" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b>getNamedItem: name</b></font></td><td align="right"><i></i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><table width="515" border="0" cellpadding="5"><tr><td align="left" /><td align="right" /></tr></table><p><a name="IXT-24-240787" />Returns a reference to the node with the
given <tt class="literal">nodeName</tt> property specified by name.
</p>
<h4 class="refsect1">Argument</h4>

<dl>
<dt><i>name: DOMString</i></dt>
<dd>
Name of the node to retrieve.</p>
</dd>

</dl>


<h4 class="refsect1">Java binding</h4>

<blockquote><pre class="code">public Node getNamedItem(String name);</pre></blockquote>


<h4 class="refsect1">Java example</h4>

<blockquote><pre class="code">// Check to see if an ID attribute exists
// in this map, and add it if necessary
// nnm was created by getting the attributes
// from an element
if (nnm.getNamedItem("id") == null) {
    // get the document
    Document doc = elem.getOwnerDocument( );
    // create a new attribute Node
    Attr attrID = doc.createAttribute("id");

    // set the attribute value
    attrID.appendChild(doc.createTextNode(makeUniqueID(elem)));
    // ... and add it to the NamedNodeMap
    nnm.setNamedItem(attrID);
}</pre></blockquote>
</div></blockquote><blockquote><a name="IXT-24-240788" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b>getNamedItemNS: namespaceURI, localName2</b></font></td><td align="right"><i></i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><table width="515" border="0" cellpadding="5"><tr><td align="left" /><td align="right" /></tr></table><p><a name="IXT-24-240788" />Extends the basic
<tt class="literal">getNamedItem</tt> method to include support for
namespaces. Instead of finding an item in the list based only on the
local part of the node name, it is possible to incorporate the
namespace URI into the search.
</p>
<h4 class="refsect1">Arguments</h4>

<dl>
<dt><i>namespaceURI: DOMString</i></dt>
<dd>
Namespace URI of the node to retrieve.</p>
</dd>


<dt><i>localName: DOMString</i></dt>
<dd>
Local name of the node to retrieve.</p>
</dd>

</dl>


<h4 class="refsect1">Java binding</h4>

<blockquote><pre class="code">public Node getNamedItemNS(String namespaceURI, String localName);</pre></blockquote>
</div></blockquote><blockquote><a name="IXT-24-240789" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b>item: index</b></font></td><td align="right"><i></i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><table width="515" border="0" cellpadding="5"><tr><td align="left" /><td align="right" /></tr></table><p><a name="IXT-24-240789" />Returns a
reference to the <tt class="literal">Node</tt> object at position
<tt class="literal">index</tt>. If the given index is &lt; 0 or &gt;= the
<tt class="literal">length</tt> attribute of the
<tt class="literal">NodeList</tt>, this function returns
<tt class="literal">null</tt>.
</p>
<h4 class="refsect1">Argument</h4>

<dl>
<dt><i>index: unsigned long</i></dt>
<dd>
Zero-based index of the list of the node to return.</p>
</dd>

</dl>


<h4 class="refsect1">Java binding</h4>

<blockquote><pre class="code">public Node item(long index);</pre></blockquote>


<h4 class="refsect1">Java example</h4>

<blockquote><pre class="code">// Remove the last attribute from the list
if (nnm.getLength( ) &gt; 0) {
    nnm.removeNamedItem(nnm.item(nnm.getLength()-1).getNodeName( ));
}</pre></blockquote>
</div></blockquote><blockquote><a name="IXT-24-240790" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b>removeNamedItem: name</b></font></td><td align="right"><i></i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><table width="515" border="0" cellpadding="5"><tr><td align="left" /><td align="right" /></tr></table><p><a name="IXT-24-240790" />Removes the <tt class="literal">Node</tt> object
with the <tt class="literal">nodeName</tt> property that matches the
<tt class="literal">name</tt> parameter and returns a reference to the
removed object. If the node you plan to remove is an
<tt class="literal">Attr</tt> node and if it has a defined default value,
the node will be replaced immediately with a new
<tt class="literal">Node</tt> object set to the default value.
</p>
<h4 class="refsect1">Argument</h4>

<dl>
<dt><i>name: DOMString</i></dt>
<dd>
The <tt class="literal">nodeName</tt> value of the node to be removed.</p>
</dd>

</dl>


<h4 class="refsect1">Exception</h4>

<dl>
<dt><i>NOT_FOUND_ERR</i></dt>
<dd>
Raised if no node matching the <tt class="literal">name</tt> parameter is
found in the map.
</p>
</dd>

</dl>


<h4 class="refsect1">Java binding</h4>

<blockquote><pre class="code">public Node removeNamedItem(String name) throws DOMException;</pre></blockquote>


<h4 class="refsect1">Java example</h4>

<blockquote><pre class="code">// Remove the ID node attribute
NamedNodeMap nnm = elem.getAttributes( );

if (nnm.removeNamedItem("id") == null) {
    System.err.println("no ID attribute found");
}</pre></blockquote>
</div></blockquote><blockquote><a name="IXT-24-240791" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b>removeNamedItemNS: namespaceURI, localName2</b></font></td><td align="right"><i></i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><table width="515" border="0" cellpadding="5"><tr><td align="left" /><td align="right" /></tr></table><p><a name="IXT-24-240791" />Removes the <tt class="literal">Node</tt> object
with the matching <tt class="literal">namespaceURI</tt> and
<tt class="literal">localName</tt> properties and returns a reference to
the removed object. If the node you plan to remove is an
<tt class="literal">Attr</tt> node and if it has a defined default value, a
new <tt class="literal">Node</tt> object set to the default value will
replace the node immediately.
</p>
<h4 class="refsect1">Arguments</h4>

<dl>
<dt><i>namespaceURI: DOMString</i></dt>
<dd>
Namespace URI of the node to retrieve.</p>
</dd>


<dt><i>localName: DOMString</i></dt>
<dd>
Local name of the node to retrieve.</p>
</dd>

</dl>


<h4 class="refsect1">Exception</h4>

<dl>
<dt><i>NOT_FOUND_ERR</i></dt>
<dd>
Raised if no node matching the <tt class="literal">namespaceURI</tt> and
<tt class="literal">localName</tt> parameter is found in the map.
</p>
</dd>

</dl>


<h4 class="refsect1">Java binding</h4>

<blockquote><pre class="code">public Node removeNamedItemNS(String namespaceURI, String localName);</pre></blockquote>
</div></blockquote><blockquote><a name="IXT-24-240792" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b>setNamedItem: arg</b></font></td><td align="right"><i></i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><table width="515" border="0" cellpadding="5"><tr><td align="left" /><td align="right" /></tr></table><p><a name="IXT-24-240792" />Inserts the given <tt class="literal">Node</tt>
object into the list, using its <tt class="literal">nodeName</tt>
attribute. Since many DOM node types expose the same, hardcoded value
for this property, storing only one of them in a single
<tt class="literal">NamedNodeMap</tt> is possible. Each subsequent
insertion overwrites the previous node entry. See the <a href="ch24_01.htm">nodeName: DOMString</a> topic for a discussion of
these special name values.
</p><p>This method returns a reference to the <tt class="literal">Node</tt> object
that the new node replaces. If no nodes with the same
<tt class="literal">nodeName</tt> value are currently in the map, this
method returns <tt class="literal">null</tt>.
</p>
<h4 class="refsect1">Argument</h4>

<dl>
<dt><i>arg: Node</i></dt>
<dd>
The <tt class="literal">Node</tt> object to be stored in the map. The value
of the <tt class="literal">nodeName</tt> property is used as the lookup
key. A node with the same <tt class="literal">nodeName</tt> value as the
new node is replaced with the node referenced by
<tt class="literal">arg</tt>.
</p>
</dd>

</dl>


<h4 class="refsect1">Exceptions</h4>

<dl>
<dt><i>WRONG_DOCUMENT_ERR</i></dt>
<dd>
Raised if a document different than the creator of the target
<tt class="literal">NamedNodeMap</tt> created the arg node.
</p>
</dd>


<dt><i>NO_MODIFICATION_ALLOWED_ERR</i></dt>
<dd>
Raised if the <tt class="literal">NamedNodeMap</tt> is read-only.</p>
</dd>


<dt><i>INUSE_ATTRIBUTE_ERR</i></dt>
<dd>
Raised if the <tt class="literal">arg</tt> node is an
<tt class="literal">Attr</tt> node that is already in use by another
element's <tt class="literal">attributes</tt> map.
</p>
</dd>

</dl>


<h4 class="refsect1">Java binding</h4>

<blockquote><pre class="code">public Node setNamedItem(Node arg) throws DOMException;</pre></blockquote>


<h4 class="refsect1">Java example</h4>

<blockquote><pre class="code">// Check to see if an ID attribute exists
// in this map, and add it if necessary
if (nnm.getNamedItem("id") == null) {
    // get the document
    Document doc = elem.getOwnerDocument( );
    // create a new attribute Node
    Attr attrID = doc.createAttribute("id");

    // set the attribute value
    attrID.appendChild(doc.createTextNode(makeUniqueID(elem)));

    // ... and add it to the NamedNodeMap
    nnm.setNamedItem(attrID);
}</pre></blockquote>
</div></blockquote><blockquote><a name="IXT-24-240793" /><a name="IXTR3-11" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b>setNamedItemNS: arg2</b></font></td><td align="right"><i></i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><table width="515" border="0" cellpadding="5"><tr><td align="left" /><td align="right" /></tr></table><p><a name="IXT-24-240793" />Identical in function to the basic
<tt class="literal">setNamedItem</tt> method, except that it considers
namespace properties in the <tt class="literal">Node</tt> object. A
reference to the replaced <tt class="literal">Node</tt> object is returned.
</p>
<h4 class="refsect1">Argument</h4>

<dl>
<dt><i>arg: Node</i></dt>
<dd>
The <tt class="literal">Node</tt> object to be stored in the map. The
values of the <tt class="literal">namespaceURI</tt> and
<tt class="literal">localName</tt> properties are used as the lookup key.
If another node with identical values for these two properties
exists, the new node replaces it.
</p>
</dd>

</dl>


<h4 class="refsect1">Exceptions</h4>

<dl>
<dt><i>WRONG_DOCUMENT_ERR</i></dt>
<dd>
Raised if a document different than the creator of the target
<tt class="literal">NamedNodeMap</tt> created the <tt class="literal">arg</tt>
node.
</p>
</dd>


<dt><i>NO_MODIFICATION_ALLOWED_ERR</i></dt>
<dd>
Raised if the <tt class="literal">NamedNodeMap</tt> is read-only.</p>
</dd>


<dt><i>INUSE_ATTRIBUTE_ERR</i></dt>
<dd>
Raised if the <tt class="literal">arg</tt> node is an
<tt class="literal">Attr</tt> node already in use by another
element's <tt class="literal">attributes</tt><a name="IXTR3-11" /> map.
</p>
</dd>

</dl>


<h4 class="refsect1">Java binding</h4>

<blockquote><pre class="code">public Node setNamedItemNS(Node arg) throws DOMException;</pre></blockquote>

</div></blockquote></div><a name="ch24-10060" /><a name="xmlnut2-IDXTERM-2435" /><a name="IXT-24-240794" /><a name="IXT-24-240795" /><a name="IXT-24-240796" /><a name="IXT-24-240797" /><a name="IXT-24-240798" /><a name="IXT-24-240799" /><a name="IXT-24-240800" /><a name="IXT-24-240801" /><a name="IXT-24-240802" /><a name="IXT-24-240803" /><a name="IXT-24-240804" /><a name="IXT-24-240805" /><a name="IXT-24-240806" /><a name="IXT-24-240807" /><a name="IXT-24-240808" /><a name="IXT-24-240809" /><a name="IXT-24-240810" /><a name="IXT-24-240811" /><a name="IXT-24-240812" /><a name="IXT-24-240813" /><a name="IXT-24-240814" /><a name="IXT-24-240815" /><a name="IXT-24-240816" /><a name="IXT-24-240817" /><a name="IXT-24-240818" /><a name="IXT-24-240819" /><a name="IXT-24-240820" /><a name="IXT-24-240821" /><a name="IXT-24-240822" /><a name="IXT-24-240823" /><a name="IXT-24-240824" /><a name="IXT-24-240825" /><a name="IXT-24-240826" /><a name="IXT-24-240827" /><a name="IXT-24-240828" /><a name="IXT-24-240829" /><a name="IXT-24-240830" /><a name="IXT-24-240831" /><a name="IXT-24-240832" /><a name="IXT-24-240833" /><a name="IXT-24-240834" /><a name="IXT-24-240835" /><a name="IXT-24-240836" /><a name="IXT-24-240837" /><a name="IXT-24-240838" /><a name="IXT-24-240839" /><a name="IXT-24-240840" /><a name="IXT-24-240841" /><a name="IXT-24-240842" /><a name="IXT-24-240843" /><a name="IXTR3-12" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b>Node</b></font></td><td align="right"><i></i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><table width="515" border="0" cellpadding="5"><tr><td align="left" /><td align="right" /></tr></table><p>The <tt class="literal">Node</tt> interface is the base interface for every
member of a DOM document tree. It exposes attributes common to every
type of document object and provides simple methods to retrieve
type-specific information without resorting to downcasting. For
instance, the <tt class="literal">attributes</tt> list provides access to
the <tt class="literal">Element</tt> object's attributes,
but it would have no meaning for a
<tt class="literal">ProcessingInstruction</tt> node. (Extracting
pseudoattributes from a processing instruction requires your
application to parse the contents of the processing instruction.)
</p><p>This interface also exposes all methods for querying, inserting, and
removing objects from the document hierarchy. The
<tt class="literal">Node</tt> interface makes it easier to build
general-purpose tree-manipulation routines that are not dependent on
specific document element types.
</p>
<h4 class="refsect1">Attributes</h4>


<p>The <a name="xmlnut2-IDXTERM-2435" />following attributes provide information
about where the <tt class="literal">Node</tt> object is located within the
document tree. These attributes are read-only. Additional methods
allow the insertion and removal of nodes from the document tree.
</p>
<blockquote><a name="IXT-24-240794" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b>attributes: NamedNodeMap</b></font></td><td align="right"><i></i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><table width="515" border="0" cellpadding="5"><tr><td align="left" /><td align="right" /></tr></table><p><a name="IXT-24-240794" />Has meaning only for
<tt class="literal">Element</tt> objects. It provides access to a list of
<tt class="literal">Attr</tt> objects in a <tt class="literal">NamedNodeMap</tt>.
For all other object types, it returns <tt class="literal">null</tt>.
</p>
<h4 class="refsect1">Java binding</h4>

<blockquote><pre class="code">public NamedNodeMap getAttributes( );

// List the attributes of an Element node
NamedNodeMap nnm = doc.getDocumentElement().getAttributes( );

if (nnm != null) {

    for (int i = 0; i &lt; nnm.getLength( ); i++) {
        // print the attribute and value
        System.out.println(nnm.item(i).getNodeName( ) + " = \"" +
                           nnm.item(i).getNodeValue( ) + "\"");
    }
}</pre></blockquote>
</div></blockquote><blockquote><a name="IXT-24-240795" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b>childNodes: NodeList</b></font></td><td align="right"><i></i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><table width="515" border="0" cellpadding="5"><tr><td align="left" /><td align="right" /></tr></table><p><a name="IXT-24-240795" />Returns a <tt class="literal">NodeList</tt>
containing a reference to every child of this
<tt class="literal">Node</tt>.
</p>
<h4 class="refsect1">Java binding</h4>

<blockquote><pre class="code">public NodeList getChildNodes( );</pre></blockquote>


<h4 class="refsect1">Java example</h4>

<blockquote><pre class="code">// List the text contents of an element
NodeList nlChildren = elem.getChildNodes( );
Node ndChild;

for (int iNode = 0; iNode &lt; nlChildren.getLength( ); iNode++) {
    ndChild = nlChildren.item(iNode);

    if (ndChild.getNodeType( ) == Node.TEXT_NODE) {
        System.out.println(ndChild.getNodeValue( ));
    }
}   </pre></blockquote>

<a name="xmlnut2-CHP-24-SIDEBAR-1" /><blockquote><table border="1" cellpadding="6"><tr><td>
<h4 class="objtitle">Dynamic Tree References</h4>
&nbsp;
<p>Throughout the DOM, several places return lists or collections of
nodes that represent the current state of the document tree. These
references are all live; any modifications to the document hierarchy,
made by inserting or removing nodes, are reflected in the list
immediately.
</p>
&nbsp;
<p>Whether due to multithreading or unforeseen side effects of procedure
calls, the contents of the list being used could change. To reduce
the likelihood of difficult-to-find bugs resulting from stale values,
request values (such as the length of a list) directly from the
<tt class="literal">NodeList</tt> or <tt class="literal">NamedNodeMap</tt>
objects. This option is safer than storing values in intermediate
variables.
</p>
</td></tr></table><p></blockquote>


</div></blockquote><blockquote><a name="IXT-24-240796" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b>firstChild: Node</b></font></td><td align="right"><i></i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><table width="515" border="0" cellpadding="5"><tr><td align="left" /><td align="right" /></tr></table><p><a name="IXT-24-240796" />Points to the head of the linked list
of children of this node. If no child nodes exist, it returns
<tt class="literal">null</tt>.
</p>
<h4 class="refsect1">Java binding</h4>

<blockquote><pre class="code">public Node getFirstChild( );</pre></blockquote>


<h4 class="refsect1">Java example</h4>

<blockquote><pre class="code">// List the contents of a node
for (Node nd = ndDump.getFirstChild( ); nd != null;
     nd = nd.getNextSibling( )) {
    if (nd.getNodeValue( ) != null) {
        System.out.println(nd.getNodeValue( ));
    }
}</pre></blockquote>
</div></blockquote><blockquote><a name="IXT-24-240797" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b>lastChild: Node</b></font></td><td align="right"><i></i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><table width="515" border="0" cellpadding="5"><tr><td align="left" /><td align="right" /></tr></table><p><a name="IXT-24-240797" />Returns a pointer to the end of a
given <tt class="literal">Node</tt> object's linked list
of child nodes. If no children exist, it returns
<tt class="literal">null</tt>.
</p>
<h4 class="refsect1">Java binding</h4>

<blockquote><pre class="code">public Node getLastChild( );</pre></blockquote>


<h4 class="refsect1">Java example</h4>

<blockquote><pre class="code">// List the value of a node in reverse order
for (Node nd = ndDump.getLastChild( ); nd != null;
     nd = nd.getPreviousSibling( )) {
    if (nd.getNodeValue( ) != null) {
        System.out.println(nd.getNodeValue( ));
    }
}</pre></blockquote>
</div></blockquote><blockquote><a name="IXT-24-240798" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b>localName: DOMString2</b></font></td><td align="right"><i></i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><table width="515" border="0" cellpadding="5"><tr><td align="left" /><td align="right" /></tr></table><p><a name="IXT-24-240798" />Returns the local part of the fully
qualified node name. This part of the name is to the right of the
final <tt class="literal">:</tt> in a namespace-qualified name.
</p>
<h4 class="refsect1">Java binding</h4>

<blockquote><pre class="code">public String getLocalName( );</pre></blockquote>
</div></blockquote><blockquote><a name="IXT-24-240799" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b>namespaceURI: DOMString2</b></font></td><td align="right"><i></i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><table width="515" border="0" cellpadding="5"><tr><td align="left" /><td align="right" /></tr></table><p><a name="IXT-24-240799" />Represents the namespace URI given to
this <tt class="literal">Node</tt> object at creation time; returns
<tt class="literal">null</tt> if no namespace was given. The value is
<tt class="literal">null</tt> if the node's been created
by a
<tt class="literal">create</tt><em class="replaceable"><tt>NodeType</tt></em><tt class="literal">(
)</tt> method rather than a
<tt class="literal">create</tt><em class="replaceable"><tt>NodeTypeNS</tt></em><tt class="literal">(
)</tt> method.
</p>
<h4 class="refsect1">Java binding</h4>

<blockquote><pre class="code">public String getNamespaceURI( );</pre></blockquote>
</div></blockquote><blockquote><a name="IXT-24-240800" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b>nextSibling: Node</b></font></td><td align="right"><i></i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><table width="515" border="0" cellpadding="5"><tr><td align="left" /><td align="right" /></tr></table><p><a name="IXT-24-240800" />Returns the next node in the sibling
list. If this node is the end of the list,
<tt class="literal">nextSibling</tt> returns <tt class="literal">null</tt>.
</p>
<h4 class="refsect1">Java binding</h4>

<blockquote><pre class="code">public Node getNextSibling( );</pre></blockquote>


<h4 class="refsect1">Java example</h4>

<blockquote><pre class="code">// List the contents of a node
for (Node nd = ndDump.getFirstChild( ); nd != null;
     nd = nd.getNextSibling( )) {
    if (nd.getNodeValue( ) != null) {
        System.out.println(nd.getNodeValue( ));
    }
}</pre></blockquote>
</div></blockquote><blockquote><a name="ch24-nodeNameDOM" /><a name="IXT-24-240801" /><a name="IXT-24-240802" /><a name="IXT-24-240803" /><a name="IXT-24-240804" /><a name="IXT-24-240805" /><a name="IXT-24-240806" /><a name="IXT-24-240807" /><a name="IXT-24-240808" /><a name="IXT-24-240809" /><a name="IXT-24-240810" /><a name="IXT-24-240811" /><a name="IXT-24-240812" /><a name="IXT-24-240813" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b>nodeName: DOMString</b></font></td><td align="right"><i></i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><table width="515" border="0" cellpadding="5"><tr><td align="left" /><td align="right" /></tr></table><p><a name="IXT-24-240801" />Intended to represent the underlying
DOM object's name. Depending on the object type,
this attribute may map to another attribute of the object or a
constant string:
</p><a name="ch24-260-fm2xml" /><table border="1" cellpadding="3">



<tr>
<th>
<p>Object type</p>
</th>
<th>
<p>nodeName</p>
</th>
</tr>


<tr>
<td>
<a name="IXT-24-240802" /><blockquote><pre class="code">Element</pre></blockquote>
</td>
<td>
<p>Tag name</p>
</td>
</tr>
<tr>
<td>
<a name="IXT-24-240803" /><blockquote><pre class="code">Attr</pre></blockquote>
</td>
<td>
<p>Attribute name</p>
</td>
</tr>
<tr>
<td>
<a name="IXT-24-240804" /><blockquote><pre class="code">Text</pre></blockquote>
</td>
<td>
<p>"#text"</p>
</td>
</tr>
<tr>
<td>
<a name="IXT-24-240805" /><blockquote><pre class="code">CDATASection</pre></blockquote>
</td>
<td>
<p>"#cdata-section"</p>
</td>
</tr>
<tr>
<td>
<a name="IXT-24-240806" /><blockquote><pre class="code">EntityReference</pre></blockquote>
</td>
<td>
<p>Name of entity referenced</p>
</td>
</tr>
<tr>
<td>
<a name="IXT-24-240807" /><blockquote><pre class="code">Entity</pre></blockquote>
</td>
<td>
<p>Entity name</p>
</td>
</tr>
<tr>
<td>
<a name="IXT-24-240808" /><blockquote><pre class="code">ProcessingInstruction</pre></blockquote>
</td>
<td>
<p>Target</p>
</td>
</tr>
<tr>
<td>
<a name="IXT-24-240809" /><blockquote><pre class="code">Comment</pre></blockquote>
</td>
<td>
<p>"#comment"</p>
</td>
</tr>
<tr>
<td>
<a name="IXT-24-240810" /><blockquote><pre class="code">Document</pre></blockquote>
</td>
<td>
<p>"#document"</p>
</td>
</tr>
<tr>
<td>
<a name="IXT-24-240811" /><blockquote><pre class="code">DocumentType</pre></blockquote>
</td>
<td>
<p>Document type name</p>
</td>
</tr>
<tr>
<td>
<a name="IXT-24-240812" /><blockquote><pre class="code">DocumentFragment</pre></blockquote>
</td>
<td>
<p>"#document-fragment"</p>
</td>
</tr>
<tr>
<td>
<a name="IXT-24-240813" /><blockquote><pre class="code">Notation</pre></blockquote>
</td>
<td>
<p>Notation name</p>
</td>
</tr>

</table><p>
<h4 class="refsect1">Java binding</h4>

<blockquote><pre class="code">public String getNodeName( );

// Print the document root tag name
Node ndDoc = (Node)doc.getDocumentElement( );
System.out.println("Document root element type: " + ndDoc.getNodeName( ));</pre></blockquote>
</div></blockquote><blockquote><a name="IXT-24-240814" /><a name="IXT-24-240815" /><a name="IXT-24-240816" /><a name="IXT-24-240817" /><a name="IXT-24-240818" /><a name="IXT-24-240819" /><a name="IXT-24-240820" /><a name="IXT-24-240821" /><a name="IXT-24-240822" /><a name="IXT-24-240823" /><a name="IXT-24-240824" /><a name="IXT-24-240825" /><a name="IXT-24-240826" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b>nodeType: unsigned short</b></font></td><td align="right"><i></i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><table width="515" border="0" cellpadding="5"><tr><td align="left" /><td align="right" /></tr></table><p><a name="IXT-24-240814" />Contains a value that indicates the
true type of the object referenced through the
<tt class="literal">Node</tt> interface. The following table shows this
attribute's possible values, along with the actual
object types they represent:
</p><a name="ch24-262-fm2xml" /><table border="1" cellpadding="3">




<tr>
<th>
<p>Constant name</p>
</th>
<th>
<p>Object type</p>
</th>
<th>
<p>Constant value</p>
</th>
</tr>


<tr>
<td>
<a name="IXT-24-240815" /><blockquote><pre class="code">ELEMENT_NODE</pre></blockquote>
</td>
<td>
<p>Element</p>
</td>
<td>
<p>1</p>
</td>
</tr>
<tr>
<td>
<a name="IXT-24-240816" /><blockquote><pre class="code">ATTRIBUTE_NODE</pre></blockquote>
</td>
<td>
<p>Attr</p>
</td>
<td>
<p>2</p>
</td>
</tr>
<tr>
<td>
<a name="IXT-24-240817" /><blockquote><pre class="code">TEXT_NODE</pre></blockquote>
</td>
<td>
<p>Text</p>
</td>
<td>
<p>3</p>
</td>
</tr>
<tr>
<td>
<a name="IXT-24-240818" /><blockquote><pre class="code">CDATA_SECTION_NODE</pre></blockquote>
</td>
<td>
<p>CDATASection</p>
</td>
<td>
<p>4</p>
</td>
</tr>
<tr>
<td>
<a name="IXT-24-240819" /><blockquote><pre class="code">ENTITY_REFERENCE_NODE</pre></blockquote>
</td>
<td>
<p>EntityReference</p>
</td>
<td>
<p>5</p>
</td>
</tr>
<tr>
<td>
<a name="IXT-24-240820" /><blockquote><pre class="code">ENTITY_NODE</pre></blockquote>
</td>
<td>
<p>Entity</p>
</td>
<td>
<p>6</p>
</td>
</tr>
<tr>
<td>
<a name="IXT-24-240821" /><blockquote><pre class="code">PROCESSING_INSTRUCTION_NODE</pre></blockquote>
</td>
<td>
<p>ProcessingInstruction</p>
</td>
<td>
<p>7</p>
</td>
</tr>
<tr>
<td>
<a name="IXT-24-240822" /><blockquote><pre class="code">COMMENT_NODE</pre></blockquote>
</td>
<td>
<p>Comment</p>
</td>
<td>
<p>8</p>
</td>
</tr>
<tr>
<td>
<a name="IXT-24-240823" /><blockquote><pre class="code">DOCUMENT_NODE</pre></blockquote>
</td>
<td>
<p>Document</p>
</td>
<td>
<p>9</p>
</td>
</tr>
<tr>
<td>
<a name="IXT-24-240824" /><blockquote><pre class="code">DOCUMENT_TYPE_NODE</pre></blockquote>
</td>
<td>
<p>DocumentType</p>
</td>
<td>
<p>10</p>
</td>
</tr>
<tr>
<td>
<a name="IXT-24-240825" /><blockquote><pre class="code">DOCUMENT_FRAGMENT_NODE</pre></blockquote>
</td>
<td>
<p>DocumentFragment</p>
</td>
<td>
<p>11</p>
</td>
</tr>
<tr>
<td>
<a name="IXT-24-240826" /><blockquote><pre class="code">NOTATION_NODE</pre></blockquote>
</td>
<td>
<p>Notation</p>
</td>
<td>
<p>12</p>
</td>
</tr>

</table>The parent-child and sibling relationships between nodes can be
visualized as two doubly linked lists. One list links parents to
children, while the other links nodes that exist at the same level.
</p>
<h4 class="refsect1">Java binding</h4>

<blockquote><pre class="code">public short getNodeType( );</pre></blockquote>


<h4 class="refsect1">Java example</h4>

<blockquote><pre class="code">// Check to see if a node is an Element type node
public boolean isElement(Node nd) {
    return nd.getNodeType( ) == Node.ELEMENT_NODE;
}</pre></blockquote>
</div></blockquote><blockquote><a name="IXT-24-240827" /><a name="IXT-24-240828" /><a name="IXT-24-240829" /><a name="IXT-24-240830" /><a name="IXT-24-240831" /><a name="IXT-24-240832" /><a name="IXT-24-240833" /><a name="IXT-24-240834" /><a name="IXT-24-240835" /><a name="IXT-24-240836" /><a name="IXT-24-240837" /><a name="IXT-24-240838" /><a name="IXT-24-240839" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b>nodeValue: DOMString</b></font></td><td align="right"><i></i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><table width="515" border="0" cellpadding="5"><tr><td align="left" /><td align="right" /></tr></table><p><a name="IXT-24-240827" />Intended to provide a reasonable
string value for the underlying DOM object. Depending on the
<tt class="literal">nodeType</tt>, this property may be read-only, read/
write, or <tt class="literal">null</tt>.
</p><a name="ch24-265-fm2xml" /><table border="1" cellpadding="3">



<tr>
<th>
<p>Object type</p>
</th>
<th>
<p>nodeValue</p>
</th>
</tr>


<tr>
<td>
<a name="IXT-24-240828" /><blockquote><pre class="code">Element</pre></blockquote>
</td>
<td>
<p>null</p>
</td>
</tr>
<tr>
<td>
<a name="IXT-24-240829" /><blockquote><pre class="code">Attr</pre></blockquote>
</td>
<td>
<p>Attribute value</p>
</td>
</tr>
<tr>
<td>
<a name="IXT-24-240830" /><blockquote><pre class="code">Text</pre></blockquote>
</td>
<td>
<p>Text node content</p>
</td>
</tr>
<tr>
<td>
<a name="IXT-24-240831" /><blockquote><pre class="code">CDATASection</pre></blockquote>
</td>
<td>
<p>CDATA section content</p>
</td>
</tr>
<tr>
<td>
<a name="IXT-24-240832" /><blockquote><pre class="code">EntityReference</pre></blockquote>
</td>
<td>
<p>null</p>
</td>
</tr>
<tr>
<td>
<a name="IXT-24-240833" /><blockquote><pre class="code">Entity</pre></blockquote>
</td>
<td>
<p>null</p>
</td>
</tr>
<tr>
<td>
<a name="IXT-24-240834" /><blockquote><pre class="code">ProcessingInstruction</pre></blockquote>
</td>
<td>
<p>Entire content, excluding the target</p>
</td>
</tr>
<tr>
<td>
<a name="IXT-24-240835" /><blockquote><pre class="code">Comment</pre></blockquote>
</td>
<td>
<p>Comment content</p>
</td>
</tr>
<tr>
<td>
<a name="IXT-24-240836" /><blockquote><pre class="code">Document</pre></blockquote>
</td>
<td>
<p>null</p>
</td>
</tr>
<tr>
<td>
<a name="IXT-24-240837" /><blockquote><pre class="code">DocumentType</pre></blockquote>
</td>
<td>
<p>null</p>
</td>
</tr>
<tr>
<td>
<a name="IXT-24-240838" /><blockquote><pre class="code">DocumentFragment</pre></blockquote>
</td>
<td>
<p>null</p>
</td>
</tr>
<tr>
<td>
<a name="IXT-24-240839" /><blockquote><pre class="code">Notation</pre></blockquote>
</td>
<td>
<p>null</p>
</td>
</tr>

</table><p>
<h4 class="refsect1">Exceptions</h4>

<dl>
<dt><i>NO_MODIFICATION_ALLOWED_ERR</i></dt>
<dd>
Indicates the <tt class="literal">nodeValue</tt> attribute is read-only for
this DOM object type.
</p>
</dd>


<dt><i>DOMSTRING_SIZE_ERR</i></dt>
<dd>
This exception is raised if the value that would be returned is too
large to be contained by a <tt class="literal">DOMString</tt> type in the
given implementation.
</p>
</dd>

</dl>


<h4 class="refsect1">Java bindings</h4>

<blockquote><pre class="code">public String getNodeValue( ) throws DOMException;
public void setNodeValue(String nodeValue) throws DOMException;</pre></blockquote>


<h4 class="refsect1">Java example</h4>

<blockquote><pre class="code">// If this node is a text node, make the value lowercase
if (nd.getNodeType( ) == Node.TEXT_NODE) {
    // make it lowercase
    nd.setNodeValue(nd.getNodeValue().toLowerCase( ));
}</pre></blockquote>
</div></blockquote><blockquote><a name="IXT-24-240840" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b>ownerDocument: Document</b></font></td><td align="right"><i></i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><table width="515" border="0" cellpadding="5"><tr><td align="left" /><td align="right" /></tr></table><p><a name="IXT-24-240840" />Returns a reference to the
<tt class="literal">Document</tt> used to create this
<tt class="literal">Node</tt> object. Since the <tt class="literal">Document</tt>
object is the only mechanism exposed for creating new nodes, even
these newly created, empty nodes have the
<tt class="literal">ownerDocument</tt> property set. This attribute can be
<tt class="literal">null</tt> only for <tt class="literal">Document</tt> nodes
and <tt class="literal">DocumentType</tt> nodes that are not yet part of a
document. You can't move a node directly to another
document; instead you must import it. This property can be useful for
checking where a node came from.
</p>
<h4 class="refsect1">Java binding</h4>

<blockquote><pre class="code">public Document getOwnerDocument( );</pre></blockquote>


<h4 class="refsect1">Java example</h4>

<blockquote><pre class="code">// Add my two cents
Document doc = elem.getOwnerDocument( );
Text txtAdd = doc.createTextNode("My $.02");
elem.appendChild(txtAdd);</pre></blockquote>
</div></blockquote><blockquote><a name="IXT-24-240841" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b>parentNode: Node</b></font></td><td align="right"><i></i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><table width="515" border="0" cellpadding="5"><tr><td align="left" /><td align="right" /></tr></table><p><a name="IXT-24-240841" />Provides a reference to the parent of
this node. All node types, except <tt class="literal">Document</tt>,
<tt class="literal">DocumentFragment</tt>, and <tt class="literal">Attr</tt>, may
have a parent node. Every node within a <tt class="literal">Document</tt>
hierarchy has a parent. Nodes that are not part of the document tree,
such as new nodes and nodes removed from the document using the
<tt class="literal">replaceChild( )</tt> or <tt class="literal">removeChild(
)</tt> methods, have a <tt class="literal">parentNode</tt> attribute
of <tt class="literal">null</tt>.
</p>
<h4 class="refsect1">Java binding</h4>

<blockquote><pre class="code">Node getParentNode( );</pre></blockquote>


<h4 class="refsect1">Java example</h4>

<blockquote><pre class="code">// Unlink an element from the document tree
elem.getParentNode( ).removeChild(elem);</pre></blockquote>
</div></blockquote><blockquote><a name="IXT-24-240842" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b>prefix: DOMString2</b></font></td><td align="right"><i></i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><table width="515" border="0" cellpadding="5"><tr><td align="left" /><td align="right" /></tr></table><p><a name="IXT-24-240842" />Represents the namespace prefix of
this node, used for nodes that support namespace prefixes. For
<tt class="literal">ELEMENT_NODE</tt> and <tt class="literal">ATTRIBUTE_NODE</tt>
type nodes, changing the namespace prefix also affects the
<tt class="literal">nodeName</tt>, <tt class="literal">tagName</tt>, and
<tt class="literal">name</tt> attributes. Since these properties hold the
qualified name of the node, changing the prefix also updates it.
</p>
<h4 class="refsect1">Exceptions</h4>

<dl>
<dt><i>INVALID_CHARACTER_ERR</i></dt>
<dd>
Raised if the <tt class="literal">prefix</tt> includes an illegal character.</p>
</dd>


<dt><i>NO_MODIFICATION_ALLOWED_ERR</i></dt>
<dd>
Indicates that the <tt class="literal">prefix</tt> attribute is read-only
for this DOM object type.
</p>
</dd>


<dt><i>NAMESPACE_ERR</i></dt>
<dd>
Raised if the <tt class="literal">prefix</tt> is malformed, according to
the rules of namespace identifier formation. This exception is also
raised if the <tt class="literal">namespaceURI</tt> attribute is
<tt class="literal">null</tt>, or if an attempt was made to violate the XML
rules of identifier formation. Such an attempt includes invalid use
of the <tt class="literal">xml</tt> or <tt class="literal">xmlns</tt> identifier.
For more information about namespaces, see <a href="ch04_01.htm">Chapter 4</a>. 
</p>
</dd>

</dl>


<h4 class="refsect1">Java bindings</h4>

<blockquote><pre class="code">public String getPrefix( );
public void setPrefix(String prefix) throws DOMException;</pre></blockquote>
</div></blockquote><blockquote><a name="IXT-24-240843" /><a name="IXTR3-12" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b>previousSibling: Node</b></font></td><td align="right"><i></i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><table width="515" border="0" cellpadding="5"><tr><td align="left" /><td align="right" /></tr></table><p><a name="IXT-24-240843" />Returns the preceding node in the
sibling list. If this node is the head of the sibling list, it
<a name="IXTR3-12" />returns
<tt class="literal">null</tt>.
</p>
<h4 class="refsect1">Java binding</h4>

<blockquote><pre class="code">public Node getPreviousSibling( );</pre></blockquote>


<h4 class="refsect1">Java example</h4>

<blockquote><pre class="code">// List the value of a node in reverse order
for (Node nd = ndDump.getLastChild( ); nd != null;
     nd = nd.getPreviousSibling( )) {
    if (nd.getNodeValue( ) != null) {
        System.out.println(nd.getNodeValue( ));
    }
}</pre></blockquote>
</div></blockquote></div><a name="ch24-10060a-fm2xml" /><a name="xmlnut2-IDXTERM-2451" /><a name="IXT-24-240844" /><a name="IXT-24-240845" /><a name="IXT-24-240846" /><a name="IXT-24-240847" /><a name="IXT-24-240848" /><a name="IXT-24-240849" /><a name="IXT-24-240850" /><a name="IXT-24-240851" /><a name="IXT-24-240852" /><a name="IXTR3-13" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b>Node (continued)</b></font></td><td align="right"><i></i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><table width="515" border="0" cellpadding="5"><tr><td align="left" /><td align="right" /></tr></table>
<h4 class="refsect1">Methods</h4>


<p>The <a name="xmlnut2-IDXTERM-2451" />following methods are defined for
<tt class="literal">Node</tt> interface objects:
</p>
<blockquote><a name="IXT-24-240844" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b>appendChild: newchild</b></font></td><td align="right"><i></i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><table width="515" border="0" cellpadding="5"><tr><td align="left" /><td align="right" /></tr></table><p><a name="IXT-24-240844" />Appends
the <tt class="literal">newchild</tt> node to the end of the child list. If
<tt class="literal">newchild</tt> is already linked into the document tree,
it is unlinked before the append is performed. This method returns a
reference to the <tt class="literal">newchild</tt> node.
</p>
<h4 class="refsect1">Argument</h4>

<dl>
<dt><i>newchild: Node</i></dt>
<dd>
The node to append. If the node is a
<tt class="literal">DocumentFragment</tt> node, the children of
<tt class="literal">newchild</tt> are appended in sequence to the end of
the node's child list.
</p>
</dd>

</dl>


<h4 class="refsect1">Exceptions</h4>

<dl>
<dt><i>HIERARCHY_REQUEST_ERR</i></dt>
<dd>
Raised if the insert operation violates at least one document
structure rule. For instance, the node doesn't allow
children or doesn't allow children of the
<tt class="literal">newchild</tt> node type. This exception is also raised
if the operation creates a circular reference (i.e., it tries to
insert a node's parent as a node's
child).
</p>
</dd>


<dt><i>WRONG_DOCUMENT_ERR</i></dt>
<dd>
Raised if the <tt class="literal">newchild</tt> node is created in a
different document than that of the new parent node.
</p>
</dd>


<dt><i>NO_MODIFICATION_ALLOWED_ERR</i></dt>
<dd>
Raised if the new parent node is read-only.</p>
</dd>

</dl>


<h4 class="refsect1">Java binding</h4>

<blockquote><pre class="code">public Node appendChild(Node newChild) throws DOMException;</pre></blockquote>


<h4 class="refsect1">Java example</h4>

<blockquote><pre class="code">// Move the first child to the end of the child node list
if (elem.getFirstChild( ) != null) {
    elem.appendChild( elem.getFirstChild( ) );
}</pre></blockquote>
</div></blockquote><blockquote><a name="IXT-24-240845" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b>cloneNode: deep</b></font></td><td align="right"><i></i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><table width="515" border="0" cellpadding="5"><tr><td align="left" /><td align="right" /></tr></table><p><a name="IXT-24-240845" />Returns a
copy of the node without a parent node. If the cloned node is
specified as <tt class="literal">deep</tt> (true), the subtree under the
node is also copied. Otherwise, the cloned node does not contain
child nodes.
</p>
<h4 class="refsect1">Argument</h4>

<dl>
<dt><i>deep: boolean</i></dt>
<dd>
If <tt class="literal">true</tt>, child nodes are copied to the cloned
node. If <tt class="literal">false</tt>, only the original node is copied.
</p>
</dd>

</dl>


<h4 class="refsect1">Java binding</h4>

<blockquote><pre class="code">public Node cloneNode(boolean deep);</pre></blockquote>


<h4 class="refsect1">Java example</h4>

<blockquote><pre class="code">// Make a copy of this element and all children
elem.cloneNode(true);</pre></blockquote>
</div></blockquote><blockquote><a name="IXT-24-240846" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b>hasAttributes ( )</b></font></td><td align="right"><i></i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><table width="515" border="0" cellpadding="5"><tr><td align="left" /><td align="right" /></tr></table><p><a name="IXT-24-240846" />Indicates whether an
<tt class="literal">Element</tt> node has any attributes. Returns
<tt class="literal">true</tt> if the node has attributes; otherwise, it
returns <tt class="literal">false</tt>.
</p>
<h4 class="refsect1">Java binding</h4>

<blockquote><pre class="code">public boolean hasAttributes( );</pre></blockquote>
</div></blockquote><blockquote><a name="IXT-24-240847" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b>hasChildNodes ( )</b></font></td><td align="right"><i></i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><table width="515" border="0" cellpadding="5"><tr><td align="left" /><td align="right" /></tr></table><p><a name="IXT-24-240847" />Provides a quick way to determine if a
node has children. Returns <tt class="literal">true</tt> if the node has
any children; otherwise, it returns <tt class="literal">false</tt>.
</p>
<h4 class="refsect1">Java binding</h4>

<blockquote><pre class="code">public boolean hasChildNodes( );</pre></blockquote>
</div></blockquote><blockquote><a name="IXT-24-240848" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b>insertBefore: newchild, refchild</b></font></td><td align="right"><i></i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><table width="515" border="0" cellpadding="5"><tr><td align="left" /><td align="right" /></tr></table><p><a name="IXT-24-240848" />Inserts the <tt class="literal">Node</tt> object
<tt class="literal">newchild</tt> into the child list of the parent node
that invokes it. The <tt class="literal">refchild</tt> parameter allows you
to specify where to insert the new node in the list. If
<tt class="literal">refchild</tt> is <tt class="literal">null</tt>, the new node
is inserted at the end of the child list. (This behavior is the same
as <tt class="literal">appendChild</tt>.) If it is not
<tt class="literal">null</tt>, the new node is inserted into the list in
front of the specified node. If the <tt class="literal">newchild</tt> node
is already part of the document tree, it is unlinked before it is
inserted in its new position. Also, if the
<tt class="literal">newchild</tt> node references a
<tt class="literal">DocumentFragment</tt> object, each of its children are
inserted, in order, before the <tt class="literal">refchild</tt> node. A
reference to the <tt class="literal">newchild</tt> node is returned.
</p>
<h4 class="refsect1">Arguments</h4>

<dl>
<dt><i>newchild: Node</i></dt>
<dd>
The new node to insert.</p>
</dd>


<dt><i>refchild: Node</i></dt>
<dd>
The node that follows the new node in the child list, or
<tt class="literal">null</tt>, if the new node is inserted at the end of
the child list.
</p>
</dd>

</dl>


<h4 class="refsect1">Exceptions</h4>

<dl>
<dt><i>HIERARCHY_REQUEST_ERR</i></dt>
<dd>
Raised if the insert operation would violate at least one document
structure rule. For instance, the node doesn't allow
children or doesn't allow children of the
<tt class="literal">newchild</tt> node type. This exception is also raised
if the operation creates a circular reference (i.e., it tries to
insert a node's parent as a node's
child).
</p>
</dd>


<dt><i>WRONG_DOCUMENT_ERR</i></dt>
<dd>
Raised if the <tt class="literal">newchild</tt> node was created in a
document different than that of the new parent node.
</p>
</dd>


<dt><i>NO_MODIFICATION_ALLOWED_ERR</i></dt>
<dd>
Raised if the new parent node is read-only.</p>
</dd>


<dt><i>NOT_FOUND_ERR</i></dt>
<dd>
Raised if the node pointed to by <tt class="literal">refchild</tt> is not a
child of the node performing the insert.
</p>
</dd>

</dl>


<h4 class="refsect1">Java binding</h4>

<blockquote><pre class="code">public Node insertBefore(Node newChild, Node refChild)
               throws DOMException;</pre></blockquote>


<h4 class="refsect1">Java example</h4>

<blockquote><pre class="code">// Insert a new node at the head of the child list of a parent node
ndParent.insertBefore(ndNew, ndParent.getFirstChild( ));</pre></blockquote>
</div></blockquote><blockquote><a name="IXT-24-240849" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b>isSupported: feature, version2</b></font></td><td align="right"><i></i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><table width="515" border="0" cellpadding="5"><tr><td align="left" /><td align="right" /></tr></table><p><a name="IXT-24-240849" />Checks
to see if a particular DOM feature is available for this
implementation. For more information about the feature names, see the
<a href="ch24_01.htm">hasFeature: feature, version</a> method of the <a href="ch24_01.htm">DOMImplementation</a> object earlier in this
chapter. This method returns true if the feature is available,
<tt class="literal">false</tt> if it is not.
</p>
<h4 class="refsect1">Arguments</h4>

<dl>
<dt><i>feature: DOMString</i></dt>
<dd>
The name of the feature to test for. See detail of the <a href="ch24_01.htm">hasFeature: feature, version</a> method of the <a href="ch24_01.htm">DOMImplementation</a> object for a list of this
parameter's valid values.
</p>
</dd>


<dt><i>version: DOMString</i></dt>
<dd>
The version number of the feature to test. For DOM Level 2, Version
1, this string should be 2.0. If the version is not specified, this
method tests for any version of the feature.
</p>
</dd>

</dl>


<h4 class="refsect1">Java binding</h4>

<blockquote><pre class="code">public boolean supports(String feature, String version);</pre></blockquote>
</div></blockquote><blockquote><a name="IXT-24-240850" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b>normalize ( ) 2</b></font></td><td align="right"><i></i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><table width="515" border="0" cellpadding="5"><tr><td align="left" /><td align="right" /></tr></table><p><a name="IXT-24-240850" />Recursively combines all adjacent
<tt class="literal">Text</tt> nodes into a single node. It also removes
empty <tt class="literal">Text</tt> nodes from the document tree. This
operation is useful for operations that require absolute references
within a document or if two documents must be compared.
</p>
<h4 class="refsect1">Java binding</h4>

<blockquote><pre class="code">public void normalize( );</pre></blockquote>
</div></blockquote><blockquote><a name="IXT-24-240851" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b>removeChild: oldchild</b></font></td><td align="right"><i></i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><table width="515" border="0" cellpadding="5"><tr><td align="left" /><td align="right" /></tr></table><p><a name="IXT-24-240851" />Unlinks
the <tt class="literal">oldchild</tt> node from the child list of a given
node and returns a reference to the now detached
<tt class="literal">Node</tt> object.
</p>
<h4 class="refsect1">Argument</h4>

<dl>
<dt><i>oldchild: Node</i></dt>
<dd>
The node to be removed.</p>
</dd>

</dl>


<h4 class="refsect1">Exceptions</h4>

<dl>
<dt><i>NO_MODIFICATION_ALLOWED_ERR</i></dt>
<dd>
Raised if the parent node is read-only.</p>
</dd>


<dt><i>NOT_FOUND_ERR</i></dt>
<dd>
Raised if the <tt class="literal">oldchild</tt> node is not a child of this
node.
</p>
</dd>

</dl>


<h4 class="refsect1">Java binding</h4>

<blockquote><pre class="code">public Node removeChild(Node oldChild) throws DOMException;</pre></blockquote>


<h4 class="refsect1">Java example</h4>

<blockquote><pre class="code">// Unlink an element and all its children
// from the document tree
elem.getParentNode( ).removeChild(elem);</pre></blockquote>
</div></blockquote><blockquote><a name="IXT-24-240852" /><a name="IXTR3-13" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b>replaceChild: newchild, oldchild</b></font></td><td align="right"><i></i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><table width="515" border="0" cellpadding="5"><tr><td align="left" /><td align="right" /></tr></table><p><a name="IXT-24-240852" />Replaces the child node
<tt class="literal">oldchild</tt> with <tt class="literal">newchild</tt>. If
<tt class="literal">newchild</tt> is currently linked into the document
tree, it is removed before the replace is performed. The method
returns a reference to the <tt class="literal">oldchild</tt> node.
</p>
<h4 class="refsect1">Arguments</h4>

<dl>
<dt><i>newchild: Node</i></dt>
<dd>
The node to be inserted.</p>
</dd>


<dt><i>oldchild: Node</i></dt>
<dd>
The node being replaced.</p>
</dd>

</dl>


<h4 class="refsect1">Exceptions</h4>

<dl>
<dt><i>HIERARCHY_REQUEST_ERR</i></dt>
<dd>
Raised if the insert operation violates at least one document
structure rule. For instance, the node doesn't allow
children or doesn't allow children of the
<tt class="literal">newchild</tt> node type. This exception is also raised
if the operation creates a circular reference (i.e., it tries to
insert a node's parent as a node's
child).
</p>
</dd>


<dt><i>WRONG_DOCUMENT_ERR</i></dt>
<dd>
Raised if the <tt class="literal">newchild</tt> node was created in a
different document than the new parent node.
</p>
</dd>


<dt><i>NO_MODIFICATION_ALLOWED_ERR</i></dt>
<dd>
Raised if the new parent node is read-only.</p>
</dd>


<dt><i>NOT_FOUND_ERR</i></dt>
<dd>
Raised if the node pointed to by <tt class="literal">oldchild</tt> is not a
child of the node performing <a name="IXTR3-13" />the replacement.
</p>
</dd>

</dl>


<h4 class="refsect1">Java binding</h4>

<blockquote><pre class="code">public Node replaceChild(Node newChild, Node oldChild)
               throws DOMException;</pre></blockquote>


<h4 class="refsect1">Java example</h4>

<blockquote><pre class="code">// Replace an old node with a new one
ndOld.getParentNode( ).replaceChild(ndNew, ndOld);</pre></blockquote>

</div></blockquote></div><a name="ch24-302-fm2xml" /><a name="IXT-24-240853" /><a name="IXT-24-240854" /><a name="IXT-24-240855" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b>NodeList</b></font></td><td align="right"><i></i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><table width="515" border="0" cellpadding="5"><tr><td align="left" /><td align="right" /></tr></table><p>The <tt class="literal">NodeList</tt><a name="IXT-24-240853" /> interface allows DOM classes to expose an
ordered collection of nodes. A <tt class="literal">NodeList</tt> represents
a read-only, zero-based array of <tt class="literal">Node</tt> objects.
Since no mechanism exists for creating, adding, or removing nodes
from a <tt class="literal">NodeList</tt>, DOM users cannot use this class
as a general-purpose utility class.
</p>
<h4 class="refsect1">Java example</h4>

<blockquote><pre class="code">// List the text contents of an element
NodeList nlChildren = elem.getChildNodes( );
Node ndChild;

for (int iNode = 0; iNode &lt; nlChildren.getLength( ); iNode++) {
    ndChild = nlChildren.item(iNode);

    if (ndChild.getNodeType( ) == Node.TEXT_NODE) {
        System.out.println(ndChild.getNodeValue( ));
    }
}</pre></blockquote>


<h4 class="refsect1">Attributes</h4>


<p>The <tt class="literal">NodeList</tt><a name="IXT-24-240854" />
interface defines one attribute:
</p>
<blockquote><a name="IXT-24-240855" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b>length: unsigned long </b></font></td><td align="right"><i></i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><table width="515" border="0" cellpadding="5"><tr><td align="left" /><td align="right" /></tr></table><p><a name="IXT-24-240855" />The total number of
<tt class="literal">Node</tt> objects in the list.
</p>
<h4 class="refsect1">Java binding</h4>

<blockquote><pre class="code">public long getLength( );</pre></blockquote>

</div></blockquote></div><a name="ch24-302b-fm2xml" /><a name="IXT-24-240856" /><a name="IXT-24-240857" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b>NodeList (continued)</b></font></td><td align="right"><i></i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><table width="515" border="0" cellpadding="5"><tr><td align="left" /><td align="right" /></tr></table>
<h4 class="refsect1">Methods</h4>


<p>The <tt class="literal">NodeList</tt><a name="IXT-24-240856" />
interface defines one method:
</p>
<blockquote><a name="IXT-24-240857" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b>item: </b></font></td><td align="right"><i></i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><table width="515" border="0" cellpadding="5"><tr><td align="left" /><td align="right" /></tr></table><p><a name="IXT-24-240857" />Returns a
reference to the <tt class="literal">Node</tt> object at position
<tt class="literal">index</tt> or returns <tt class="literal">null</tt> if the
index is invalid. If the index given is &lt; 0 or &gt;= the
<tt class="literal">length</tt> attribute of the
<tt class="literal">NodeList</tt>, this function returns
<tt class="literal">null</tt>.
</p>
<h4 class="refsect1">Argument</h4>

<dl>
<dt><i>index: unsigned long</i></dt>
<dd>
Zero-based index into the list of the <tt class="literal">Node</tt> to
return.
</p>
</dd>

</dl>


<h4 class="refsect1">Java binding</h4>

<blockquote><pre class="code">public Node item(long index);</pre></blockquote>

</div></blockquote></div><a name="ch24-309-fm2xml" /><a name="IXT-24-240858" /><a name="IXT-24-240859" /><a name="IXT-24-240860" /><a name="IXT-24-240861" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b>ProcessingInstruction</b></font></td><td align="right"><i></i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><table width="515" border="0" cellpadding="5"><tr><td align="left" /><td align="right" /></tr></table><p>This <a name="IXT-24-240858" />interface provides access to the contents
of an XML processing instruction. Processing instructions provide a
mechanism for embedding commands to an XML processing application
that is in line with the XML content.
</p>
<h4 class="refsect1">Java example</h4>

<blockquote><pre class="code">// Add an application-specific processing instruction
ProcessingInstruction pi = doc.createProcessingInstruction("my_app",
        "action=\"save\"");</pre></blockquote>


<h4 class="refsect1">Attributes</h4>


<p>The <a name="IXT-24-240859" />interface defines two attributes:
</p>
<blockquote><a name="IXT-24-240860" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b>data: DOMString</b></font></td><td align="right"><i></i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><table width="515" border="0" cellpadding="5"><tr><td align="left" /><td align="right" /></tr></table><p><a name="IXT-24-240860" />Returns the data portion of this
processing instruction. The data portion is identified starting at
the first nonwhitespace character after the <tt class="literal">target</tt>
token and ending at the closing ?&gt;.
</p>
<h4 class="refsect1">Write exception</h4>

<dl>
<dt><i>NO_MODIFICATION_ALLOWED_ERR</i></dt>
<dd>
Raised if the node is read-only.</p>
</dd>

</dl>


<h4 class="refsect1">Java bindings</h4>

<blockquote><pre class="code">public String getData( );
public void setData(String data) throws DOMException;</pre></blockquote>


<h4 class="refsect1">Java example</h4>

<blockquote><pre class="code">// Check the application's data attribute
if (pi.getTarget( ) == "MY_APPLICATION") {
    // check the data attribute for my own application-specific info
    if (pi.getData( ) == "CHECK_SIBLINGS") {
        // check the siblings
        ...
    }

    pi.setData("SIBLINGS_CHECKED");
}</pre></blockquote>
</div></blockquote><blockquote><a name="IXT-24-240861" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b>target: DOMString</b></font></td><td align="right"><i></i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><table width="515" border="0" cellpadding="5"><tr><td align="left" /><td align="right" /></tr></table><p><a name="IXT-24-240861" />Returns the target portion of this
processing instruction. The target is the first whitespace-delimited
token within the processing-instruction block.
</p><p>Processing instructions are meant to embed application-specific
instructions for automatic content generation, parsing, etc., within
the XML stream. The instruction's
<tt class="literal">target</tt> portion is the flag that allows different
processing applications to coexist. Applications that use processing
instructions for formatting should ignore processing instructions
they do not recognize.
</p>
<h4 class="refsect1">Java binding</h4>

<blockquote><pre class="code">public String getTarget( );

// Check to see if your application is targeted
if (pi.getTarget( ) == "MY_APPLICATION") {
    // do my application-specific processing here
}</pre></blockquote>

</div></blockquote></div><a name="ch24-81129" /><a name="IXT-24-240862" /><a name="IXT-24-240863" /><a name="IXT-24-240864" /><a name="IXTR3-14" /><a name="IXTR3-15" /><a name="IXTR3-16" /><a name="IXTR3-17" /><a name="IXTR3-18" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b>Text</b></font></td><td align="right"><i></i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><table width="515" border="0" cellpadding="5"><tr><td align="left" /><td align="right" /></tr></table><p><tt class="literal">Text</tt> <a name="IXT-24-240862" />nodes contain the nonmarkup character data
contained within the XML document. After the XML document is parsed,
exactly one <tt class="literal">Text</tt> node exists for each
uninterrupted block of nonmarkup text:
</p><blockquote><pre class="code">&lt;text_node&gt;This is text.&lt;/text_node&gt;</pre></blockquote>
<h4 class="refsect1">Method</h4>


<p>The <a name="IXT-24-240863" />following
method is defined for the <tt class="literal">Text</tt> interface:
</p>
<blockquote><a name="IXT-24-240864" /><a name="IXTR3-14" /><a name="IXTR3-15" /><a name="IXTR3-16" /><a name="IXTR3-17" /><a name="IXTR3-18" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b>splitText: offset</b></font></td><td align="right"><i></i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><table width="515" border="0" cellpadding="5"><tr><td align="left" /><td align="right" /></tr></table><p><a name="IXT-24-240864" />Splits a
<tt class="literal">Text</tt> node into two adjacent
<tt class="literal">Text</tt> nodes. The contents of the original node are
divided at the given split offset, with the second substring used as
the new node's value. The first substring remains in
the original node. If the node is currently linked into the DOM tree,
the new node with the split content becomes the next sibling of the
original node. A new <tt class="literal">Text</tt> node containing the
second part of the split data is returned.
</p>
<h4 class="refsect1">Argument</h4>

<dl>
<dt><i>offset (unsigned long)</i></dt>
<dd>
Zero-based offset where the split occurs.</p>
</dd>

</dl>


<h4 class="refsect1">Exceptions</h4>

<dl>
<dt><i>INDEX_SIZE_ERR</i></dt>
<dd>
Raised if the offset given is &lt; 0 and &gt;= the
<tt class="literal">length</tt> attribute.
</p>
</dd>


<dt><i>NO_MODIFICATION_ALLOWED_ERR</i></dt>
<dd>
Raised if the element is read-only.</p>
</dd>

</dl>


<h4 class="refsect1">Java binding</h4>

<blockquote><pre class="code">public Text splitText(long offset) throws DOMException;</pre></blockquote>


<h4 class="refsect1">Java example</h4>

<blockquote><pre class="code">// Make one Text node
long = doc.createTextNode("This text is split.");

// and split it
Text ndSplit = ndText.splitText(9);</pre></blockquote>



<a name="ch24-322-fm2xml" /><blockquote><b>NOTE:</b> 
<tt class="literal">Text</tt> is a subclass of the
<tt class="literal">CharacterData</tt> interface. See the <a href="ch24_01.htm">CharacterData</a> interface section in this
chapter for a list of applicable methods for accessing character data
<a name="IXTR3-14" />in
<a name="IXTR3-15" /><a name="IXTR3-16" />nodes of <a name="IXTR3-17" /> <a name="IXTR3-18" />this type.
</p>
</blockquote>



</div></blockquote></div><div class="sect1"><a name="xmlnut2-CHP-24-SECT-1" />
<h2 class="sect1">24.1. Object Hierarchy</h2>

<p>The <a name="IXT-24-240682" />following <a name="IXT-24-240683" />table shows the DOM object
hierarchy:
</p>

<a name="ch24-6-fm2xml" /><table border="1" cellpadding="3">



<tr>
<th>
<p>Object</p>
</th>
<th>
<p>Permitted child objects</p>
</th>
</tr>


<tr>
<td>
<a name="IXT-24-240684" /><blockquote><pre class="code">Document</pre></blockquote>
</td>
<td>
<p><tt class="literal">Element</tt> (one is the maximum)</p>
&nbsp;
<p><tt class="literal">ProcessingInstruction</tt></p>
&nbsp;
<p><tt class="literal">Comment</tt></p>
&nbsp;
<p><tt class="literal">DocumentType</tt> (one is the maximum)</p>
</td>
</tr>
<tr>
<td>
<a name="IXT-24-240685" /><blockquote><pre class="code">DocumentFragment</pre></blockquote>
</td>
<td>
<blockquote><pre class="code">Element
ProcessingInstruction
Comment
Text
CDATASection
EntityReference</pre></blockquote>
</td>
</tr>
<tr>
<td>
<a name="IXT-24-240686" /><blockquote><pre class="code">DocumentType</pre></blockquote>
</td>
<td>
<p>None (leaf node)</p>
</td>
</tr>
<tr>
<td>
<a name="IXT-24-240687" /><blockquote><pre class="code">EntityReference</pre></blockquote>
</td>
<td>
<blockquote><pre class="code">Element
ProcessingInstruction
Comment
Text
CDATASection
EntityReference</pre></blockquote>
</td>
</tr>
<tr>
<td>
<a name="IXT-24-240688" /><blockquote><pre class="code">Element</pre></blockquote>
</td>
<td>
<blockquote><pre class="code">Element
Text
Comment
ProcessingInstruction
CDATASection
EntityReference</pre></blockquote>
</td>
</tr>
<tr>
<td>
<a name="IXT-24-240689" /><blockquote><pre class="code">Attr</pre></blockquote>
</td>
<td>
<blockquote><pre class="code">Text
EntityReference</pre></blockquote>
</td>
</tr>
<tr>
<td>
<a name="IXT-24-240690" /><blockquote><pre class="code">ProcessingInstruction </pre></blockquote>
</td>
<td>
<p>None (leaf node)</p>
</td>
</tr>
<tr>
<td>
<a name="IXT-24-240691" /><blockquote><pre class="code">Comment</pre></blockquote>
</td>
<td>
<p>None (leaf node)</p>
</td>
</tr>
<tr>
<td>
<a name="IXT-24-240692" /><blockquote><pre class="code">Text</pre></blockquote>
</td>
<td>
<p>None (leaf node)</p>
</td>
</tr>
<tr>
<td>
<a name="IXT-24-240693" /><blockquote><pre class="code">CDATASection</pre></blockquote>
</td>
<td>
<p>None (leaf node)</p>
</td>
</tr>
<tr>
<td>
<a name="IXT-24-240694" /><blockquote><pre class="code">Entity</pre></blockquote>
</td>
<td>
<blockquote><pre class="code">Element
ProcessingInstruction
Comment
Text
CDATASection
EntityReference</pre></blockquote>
</td>
</tr>
<tr>
<td>
<a name="IXT-24-240695" /><blockquote><pre class="code">Notation</pre></blockquote>
</td>
<td>
<p>None (leaf node)</p>
</td>
</tr>

</table><p>

</div>

<hr width="684" align="left" />
<div class="navbar"><table width="684" border="0"><tr><td align="left" valign="top" width="228"><a href="ch23_04.htm"><img src="../gifs/txtpreva.gif" alt="Previous" border="0" /></a></td><td align="center" valign="top" width="228"><a href="index.htm"><img src="../gifs/txthome.gif" alt="Home" border="0" /></a></td><td align="right" valign="top" width="228"><a href="ch24_02.htm"><img src="../gifs/txtnexta.gif" alt="Next" border="0" /></a></td></tr><tr><td align="left" valign="top" width="228">23.4. TrAX</td><td align="center" valign="top" width="228"><a href="index/index.htm"><img src="../gifs/index.gif" alt="Book Index" border="0" /></a></td><td align="right" valign="top" width="228">24.2. Object Reference</td></tr></table></div>
<hr width="684" align="left" />

<img src="../gifs/navbar.gif" usemap="#library-map" border="0" alt="Library Navigation Links" />
<p><p><font size="-1"><a href="copyrght.htm">Copyright &copy; 2002</a> O'Reilly &amp; Associates. All rights reserved.</font></p>

<map name="library-map">
<area shape="rect" coords="0,0,85,93" href="../index.htm"><area shape="rect" coords="85,0,180,98" href="../sax2/index.htm"><area shape="rect" coords="182,-1,261,100" href="index.htm"><area shape="rect" coords="263,1,384,96" href="../jxml/index.htm"><area shape="rect" coords="386,1,463,100" href="../jxslt/index.htm"><area shape="rect" coords="466,1,533,112" href="../xslt/index.htm"><area shape="rect" coords="535,-1,610,108" href="../schema/index.htm"><area shape="rect" coords="613,1,696,121" href="../pxml/index.htm">
      </map>

</body></html>