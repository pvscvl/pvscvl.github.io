<html><head><title>Programming Models (XML in a Nutshell, 2nd Edition)</title><link rel="stylesheet" type="text/css" href="../style/style1.css" />

<meta name="DC.Creator" content="Elliotte Rusty Harold and W. Scott Means" /><meta name="DC.Format" content="text/xml" scheme="MIME" /><meta name="DC.Language" content="en-US" /><meta name="DC.Publisher" content="O'Reilly &amp; Associates, Inc." /><meta name="DC.Source" scheme="ISBN" content="0-596-00292-0" /><meta name="DC.Subject.Keyword" content="stuff" /><meta name="DC.Title" content="XML in a Nutshell, 2nd Edition" /><meta name="DC.Type" content="Text.Monograph" />

</head><body bgcolor="#ffffff">

<img src="gifs/smbanner.gif" usemap="#banner-map" border="0" alt="Book Home" /><map name="banner-map"><area shape="rect" coords="1,-2,616,66" href="index.htm" alt="XML in a Nutshell" /><area shape="rect" coords="629,-11,726,25" href="jobjects/fsearch.htm" alt="Search this book" /></map>

<div class="navbar"><table width="684" border="0"><tr><td align="left" valign="top" width="228"><a href="ch16_09.htm"><img src="../gifs/txtpreva.gif" alt="Previous" border="0" /></a></td><td align="center" valign="top" width="228" /><td align="right" valign="top" width="228"><a href="ch17_02.htm"><img src="../gifs/txtnexta.gif" alt="Next" border="0" /></a></td></tr></table></div>


<h1 class="chapter">Chapter 17. Programming Models</h1>
<div class="htmltoc"><h4 class="tochead">Contents:</h4><p>
<a href="ch17_01.htm">Common XML Processing Models</a><br />
<a href="ch17_02.htm">Common XML Processing Issues</a><br /></p></div><p>This <a name="xmlnut2-IDXTERM-1575" />chapter briefly explains the most popular
programming models for parsing and manipulating XML data in use
today. <em class="firstterm">XML processing</em> includes a diverse set
of tools, which require different approaches but offer distinct
advantages and disadvantages.
</p><a name="ch17-3-fm2xml" /><blockquote><b>TIP:</b> 
XML processors of all kinds are available in a wide variety of
languages, including C, C#, C++, COBOL, Haskell, Java, JavaScript
(ECMAScript/JScript), Pascal, Perl, Python, Ruby, SmallTalk, Tcl, and
Visual Basic. If you can't find XML support built
into your programming environment, a quick search will likely locate
a library. XML.com maintains a list of
<a name="IXT-17-240430" />XML
resources that may be a good place to start at <a href="../../../../../../www.xml.com/resourceguide/">http://www.xml.com/resourceguide/</a>.
</p>
</blockquote><div class="sect1"><a name="xmlnut2-CHP-17-SECT-1" />
<h2 class="sect1">17.1. Common XML Processing Models</h2>

<p>XML's <a name="xmlnut2-IDXTERM-1577" />structured and labeled text can be
processed by developers in several of ways. Programs can look at XML
as text, as a stream of events, as a tree, or as a serialization of
some other structure. Tools supporting all of these options are
widely available.
</p>

<a name="xmlnut2-CHP-17-SECT-1.1" /><div class="sect2">
<h3 class="sect2">17.1.1. Treating XML as Text</h3>

<p>At <a name="IXT-17-240431" />their
foundation, XML documents are text. The content and markup are both
represented as text, and text-editing tools can be extremely useful
for XML document inspection, creation, and modification.
XML's textual foundations make it possible for
developers to work with XML directly, using XML-specific tools only
when they choose.
</p>

<p>Despite this textual nature, however, XML presents some serious
limitations for programs that attempt to process XML documents as
text documents. It is possible to process extremely simple XML
documents reliably using basic textual tools like
<a name="IXT-17-240432" />regular expressions, but this
becomes much more difficult as features such as attribute defaulting,
entity processing, and namespaces are added to documents. Using these
features is extremely difficult when treating a document purely as
text.
</p>

<p><a name="IXT-17-240433" />Textual tools are a key part of the
XML toolset, however. Many developers use text editors such as
<em class="emphasis">vi</em>, Emacs, NotePad, WordPad, BBEdit, and
UltraEdit to create or modify XML documents. Regular expressions
-- in environments such as sed, grep, Perl, and Python --
can be used for search and replace or for tweaking documents prior to
XML parsing or XSLT processing. These tools can also be very useful
for searching and querying the information in XML documents, even
without an understanding of the surrounding structure.
</p>

<p>Textual tools may also be applied to the results of an XML
<a name="IXT-17-240434" />parser. Regular expressions and
similar text-processing tools can be applied usefully to the results
of an XML parse, working on the document when its XML-specific nature
has already been resolved. The W3C's XML Schema, for
instance, includes regular-expression matching as one mechanism for
validating data types, as discussed in <a href="ch16_01.htm">Chapter 16</a>.
A smart search and replace or spell checker might process only the
contents of elements (and perhaps attributes), not the markup that
defines the structures.
</p>

<p>Text-based processing can be preformed in conjunction with other XML
processing. Parsing and then reserializing XML documents after other
processing has taken place doesn't always produce
the desired results. XSLT, for instance, will remove entity
references and replace them with entity content. Preserving entities
requires replacing them in the original document with unique
placeholders, and then replacing the placeholder as it appears in the
result. With regular expressions, this is quite easy to do.
Developers may also need to replace particular characters with
references to images; this approach can be very useful where an
obscure or nonstandard glyph is needed in XHTML.
</p>

<a name="ch17-6-fm2xml" /><blockquote><b>WARNING:</b> 
XML's dependence on Unicode means that developers
need to be careful about the text-processing tools they choose. Many
development environments have been upgraded to support Unicode, but
there are still tools available that don't. Before
using text-processing tools on the results of an XML parse, make sure
they support Unicode. Text-processing tools being applied to raw XML
documents must support the character encoding used for the document.
</p>
</blockquote>

</div>
<a name="xmlnut2-CHP-17-SECT-1.2" /><div class="sect2">
<h3 class="sect2">17.1.2. Treating XML as Events</h3>

<p>As <a name="xmlnut2-IDXTERM-1582" />an XML
<a name="xmlnut2-IDXTERM-1583" /> <a name="xmlnut2-IDXTERM-1584" />parser
reads a document, it moves from the beginning of the document to the
end. It may pause to retrieve external resources--for a DTD or
an external entity, for instance--but it builds an
understanding of the document as it moves along. Enforcing
well-formedness and validity constraints and applying namespaces
requires keeping track of context; applying attribute defaults and
entities requires keeping a list of appropriate content to insert;
but the end result is a complete
"reading" of the XML document.
</p>

<p>Event-based parsers report this reading as it happens, in a stream of
events representing the information in the document. The
"events" are, for example, the
start of an element, the content of an element, and the end of an
element. For example, given this document:
</p>

<blockquote><pre class="code">&lt;name&gt;&lt;given&gt;Keith&lt;/given&gt;&lt;family&gt;Johnson&lt;/family&gt;&lt;/name&gt;</pre></blockquote>

<p>an event-based parser might report events such as this:</p>

<blockquote><pre class="code">startElement:name
startElement:given
content: Keith
endElement:given
startElement:family
content:Johnson
endElement:family
endElement:name</pre></blockquote>

<p>The list and structure of events can become much more complex as
features, such as namespaces, attributes, whitespace between
elements, comments, processing instructions, and entities are added,
but the basic mechanism is quite simple and generally very efficient.
</p>

<p>Event-based parsers only have to keep track of a limited amount of
information. They need to understand the contents of DTDs (and
possibly schemas), if the documents use them, and they need to
maintain context stacks for element names and namespace declarations.
They don't need to build a complete record of the
document as they parse it, which minimizes the amount of memory
needed for the parse.
</p>

<p>Event-based parsers require the consumer of the events to do a lot
more work, however. Processing events typically means the creation of
a state machine, i.e., code that understands current context and can
route the information in the events to the proper consumer. Because
events occur as the document is read, applications must be prepared
to discard results should a fatal error occur partway through the
document. Applications can't depend on information
that occurs later in a document to interpret the current event,
either, making it hard to use some kinds of XPaths, for instance, in
an event-based environment. These factors can make it difficult to
work directly with event-based parsers.
</p>

<p>Despite the potential difficulty, event-based parsers are very useful
for a wide variety of tasks.
<a name="IXT-17-240435" />Filters can process and modify events
before passing them to another processor, efficiently performing a
wide range of transformations. Filters can be stacked, providing a
relatively simple means of building XML processing pipelines, where
the information from one processor flows directly into another.
Applications that want to feed information directly from XML
documents into their own internal structures may find events to be
the most efficient means of doing that. Even parsers that report XML
documents as complete trees, as described in the next section,
typically build those trees from a stream of events.
</p>



<a name="ch17-9-fm2xml" /><blockquote><b>TIP:</b> 
The Simple API for XML (SAX), described in <a href="ch19_01.htm">Chapter 19</a> and <a href="ch25_01.htm">Chapter 25</a>, is the most
commonly used event-based API. SAX2, the current version of SAX, is
hosted at <a href="../../../../../../www.saxproject.org/">http://www.saxproject.org</a>.Expat, which is a widely used XML parser written in C,
also uses an event-based API. For more information on the expat
parser and <a name="IXTR3-222" /> <a name="IXTR3-223" />its <a name="IXTR3-224" />API, see <a href="../../../../../../www.jclark.com/xml/expat.html">http://www.jclark.com/xml/expat.html</a>.
</p>
</blockquote>

</div>
<a name="xmlnut2-CHP-17-SECT-1.3" /><div class="sect2">
<h3 class="sect2">17.1.3. Treating XML as Tree Models</h3>

<p>XML <a name="IXT-17-240436" />documents,
<a name="IXT-17-240437" />because of the requirements for
well-formedness, describe tree structures. Documents typically
contain an element that then contains text, attributes, and other
elements, and these may contain elements, text, and attributes, and
so on. Declarations, comments, and processing instructions enrich the
mix, but all basically hold positions in the overall tree.
</p>

<p>There are a wide variety of tree models for XML documents. XPath
(described in <a href="ch09_01.htm">Chapter 9</a>), used in XSLT
transformations, has a slightly different set of expectations than
does the Document Object Model (DOM) API, which is also different
from the XML Information Set (Infoset), another W3C project. XML
Schema (described in <a href="ch16_01.htm">Chapter 16</a> and <a href="ch21_01.htm">Chapter 21</a>) defines a Post-Schema Validation Infoset
(PSVI), which has more information in it (derived from the XML
Schema) than any of the others.
</p>

<p>Developers who want to manipulate documents from their programs
typically use APIs that provide access to an object model
representing the XML document. Tree-based APIs typically present a
model of an entire document to an application once parsing has
successfully concluded. Applications don't have to
worry about figuring out context or dealing with rollback when an
error is encountered, since the tree model and parsing already
address those issues. Rather than following a stream of events, an
application can just navigate a tree to find the desired pieces of a
document. Browsers and editors can present or modify the tree in
conformance with user or script requests, using the tree as a
persistent reference to the current content of the document.
</p>

<p>Working with a tree model of a document isn't very
different conceptually from working with a document as text. The
entire document is always available, and moving around well-formed
portions of a document or modifying them is fairly easy. The complete
set of context for any given part of the document is always
available. Developers can use XPath expressions to locate content and
make decisions based on content anywhere in the document where APIs
support XPath. (DOM Level 3 adds formal support for XPath, and
various implementations provide their own support.)
</p>

<p>Tree models of documents have a few drawbacks. They can take up large
chunks of memory, typically multiplying the original
document's size. Navigating documents can require
additional processing after the parse, as developers have more
options available to them. (Tree models don't impose
the same kinds of discipline as event-based processing.) Both of
these issues can make it difficult to scale and share applications
that rely on tree models, though they may still be appropriate where
small numbers of documents or small documents are being used.
</p>



<a name="ch17-12-fm2xml" /><blockquote><b>TIP:</b> 
The Document Object Model (DOM), described in <a href="ch18_01.htm">Chapter 18</a> and <a href="ch24_01.htm">Chapter 24</a>, is the most
common tree-based API. JDOM (<a href="../../../../../../jdom.org/">http://jdom.org/</a>) and DOM4J (<a href="../../../../../../dom4j.org/">http://dom4j.org/</a>) are Java-only alternatives.
</p>
</blockquote>

</div>
<a name="xmlnut2-CHP-17-SECT-1.4" /><div class="sect2">
<h3 class="sect2">17.1.4. Transformations</h3>

<p>Another <a name="IXT-17-240438" />facility available to the XML
programmer is a form of the XML transformation library. The
Extensible Stylesheet Language Transformation (XSLT) language,
covered in <a href="ch08_01.htm">Chapter 8</a>, is the most popular tool
currently available for transforming XML to HTML, XML, or any other
regular language that can be expressed in XSLT. In some cases, using
a transformation to perform pre- or post-processing on XML data when
processing it with either DOM or SAX might be simpler or more
efficient. For instance, XSLT could be used as a preprocessor for a
screen-scraping application that starts from XHTML documents. A
script could extract the meaningful features from the XHTML document
and pour them into an application-specific XML format.
</p>

<p>Transformations may be used by themselves, in browsers, or at the
command line, but many XSLT implementations and other transformation
tools offer SAX or DOM interfaces, simplifying the task of using them
to build pipelines.
</p>

</div>
<a name="xmlnut2-CHP-17-SECT-1.5" /><div class="sect2">
<h3 class="sect2">17.1.5. Abstracting XML Away</h3>

<p>Developers <a name="IXT-17-240439" />who
want to take advantage of XML's cross-platform
benefits but have no patience for the details of markup can use
various tools that rely on XML but don't require
direct exposure to XML's structures. Web Services,
mentioned in <a href="ch15_01.htm">Chapter 15</a>, can be seen as a move in
this direction. You can still touch the XML directly if you need to,
but toolkits make it easier to avoid doing so.
</p>

<p>These kinds of applications are generally built as a layer on top of
event- or tree-based processing, presenting their own API to the
underlying information. This level of abstraction may be very useful
in some cases or an inefficient inconvenience in others.
It's probably helpful to understand more direct
connections to XML if you need to evaluate the advantages and
disadvantages of abstraction, as well as provide a bridge to systems
that don't support a particular abstraction layer
but still need access to the information.
</p>

</div>
<a name="xmlnut2-CHP-17-SECT-1.6" /><div class="sect2">
<h3 class="sect2">17.1.6. Standards and Extensions</h3>

<p>The <a name="IXT-17-240440" />SAX
and DOM specifications, along with the various core XML
specifications, provide a foundation for XML processing.
Implementations of these standards, especially implementations of the
DOM, sometimes vary from the specification. Some extensions are
themselves formally specified--Scalable Vector Graphics (SVG),
for instance, specifies extensions to the DOM that are specific to
working with SVG. Others are just kind of tacked on, adding
functionality that a programmer or vendor felt was important but
wasn't in the original specification. The multiple
levels and modules of the DOM have also led to developers claiming
support for the DOM, but actually supporting particular subsets (or
extensions) of the available specifications.
</p>

<p>Porting standards also leads to variations. SAX was developed for
Java, and the core SAX project only defines a Java API. The DOM uses
Interface Definition Language (IDL) to define its API, but different
implementations have interpreted the IDL slightly differently. SAX2
and the DOM are somewhat portable, but moving between environments
may require some unlearning and relearning.
</p>

<p>Some environments also offer libraries well outside the SAX and DOM
interfaces. Perl and Python both offer libraries that combine event
and tree processing--for instance, permitting applications to
work on partial trees rather than SAX events or full DOM trees.
Microsoft .NET's XMLReader offers similarly flexible
processing. These approaches do not make moving between environments
easy, but they can be very useful.
</p>

</div>
<a name="xmlnut2-CHP-17-SECT-1.7" /><div class="sect2">
<h3 class="sect2">17.1.7. Combining Approaches</h3>

<p>While text, events, trees, and transformations may seem very
different, it isn't unusual to combine them. Most
parsers that produce DOM trees also offer the option of SAX events,
and there are a number of tools that can create DOM trees from SAX
events or vice versa. Some tools that accept and generate SAX events
actually build internal trees--many XSLT processors operate
this way, using optimized internal models for their trees rather than
the generic DOM. XSLT processors themselves often accept either SAX
events or DOM trees as input and can produce these models (or text)
for their output.
</p>

<p>Most programmers who want direct access to XML documents start with
DOM trees, which are easier to figure out initially. If they have
problems that are better solved in event-based environments, they can
either rewrite their code for events--it's a
big change--or mix and match event processing with tree
<a name="IXTR3-225" />processing.
</p>

</div>
</div>

<hr width="684" align="left" />
<div class="navbar"><table width="684" border="0"><tr><td align="left" valign="top" width="228"><a href="ch16_09.htm"><img src="../gifs/txtpreva.gif" alt="Previous" border="0" /></a></td><td align="center" valign="top" width="228"><a href="index.htm"><img src="../gifs/txthome.gif" alt="Home" border="0" /></a></td><td align="right" valign="top" width="228"><a href="ch17_02.htm"><img src="../gifs/txtnexta.gif" alt="Next" border="0" /></a></td></tr><tr><td align="left" valign="top" width="228">16.9. Controlling Type Derivation</td><td align="center" valign="top" width="228"><a href="index/index.htm"><img src="../gifs/index.gif" alt="Book Index" border="0" /></a></td><td align="right" valign="top" width="228">17.2. Common XML Processing Issues</td></tr></table></div>
<hr width="684" align="left" />

<img src="../gifs/navbar.gif" usemap="#library-map" border="0" alt="Library Navigation Links" />
<p><p><font size="-1"><a href="copyrght.htm">Copyright &copy; 2002</a> O'Reilly &amp; Associates. All rights reserved.</font></p>

<map name="library-map">
<area shape="rect" coords="0,0,85,93" href="../index.htm"><area shape="rect" coords="85,0,180,98" href="../sax2/index.htm"><area shape="rect" coords="182,-1,261,100" href="index.htm"><area shape="rect" coords="263,1,384,96" href="../jxml/index.htm"><area shape="rect" coords="386,1,463,100" href="../jxslt/index.htm"><area shape="rect" coords="466,1,533,112" href="../xslt/index.htm"><area shape="rect" coords="535,-1,610,108" href="../schema/index.htm"><area shape="rect" coords="613,1,696,121" href="../pxml/index.htm">
      </map>

</body></html>