<html><head><title>Document Permanence  (XML in a Nutshell, 2nd Edition)</title><link rel="stylesheet" type="text/css" href="../style/style1.css" />

<meta name="DC.Creator" content="Elliotte Rusty Harold and W. Scott Means" /><meta name="DC.Format" content="text/xml" scheme="MIME" /><meta name="DC.Language" content="en-US" /><meta name="DC.Publisher" content="O'Reilly &amp; Associates, Inc." /><meta name="DC.Source" scheme="ISBN" content="0-596-00292-0" /><meta name="DC.Subject.Keyword" content="stuff" /><meta name="DC.Title" content="XML in a Nutshell, 2nd Edition" /><meta name="DC.Type" content="Text.Monograph" />

</head><body bgcolor="#ffffff">

<img src="gifs/smbanner.gif" usemap="#banner-map" border="0" alt="Book Home" /><map name="banner-map"><area shape="rect" coords="1,-2,616,66" href="index.htm" alt="XML in a Nutshell" /><area shape="rect" coords="629,-11,726,25" href="jobjects/fsearch.htm" alt="Search this book" /></map>

<div class="navbar"><table width="684" border="0"><tr><td align="left" valign="top" width="228"><a href="ch06_04.htm"><img src="../gifs/txtpreva.gif" alt="Previous" border="0" /></a></td><td align="center" valign="top" width="228" /><td align="right" valign="top" width="228"><a href="ch06_06.htm"><img src="../gifs/txtnexta.gif" alt="Next" border="0" /></a></td></tr></table></div>



<h2 class="sect1">6.5. Document Permanence </h2>

<p>XML <a name="xmlnut2-IDXTERM-562" />documents that are intended for computers to
read are often transitory. For instance, if you create a SOAP
document that represents a request to Windows server running .NET,
then that document exists for just as long as it takes the client to
send it to the server and for the server to parse it into its
internal data structures. After that's done, the
document will be discarded. It probably won't be
around for two minutes, much less two years. It's an
ephemeral communication between two systems, with no more permanence
than any of billions of other messages that computers exchange on a
daily basis, most of which are never even written to disk, much less
archived for posterity.
</p>

<p>Some applications do store more permanent computer-oriented data in
XML. For instance, XML is the native file format of the Gnumeric
spreadsheet. On the other hand, this format is really only understood
by Gnumeric and perhaps the other Gnome applications.
It's designed to meet the specific needs of that one
program. Exchanging data with other applications, including ones that
haven't even been invented yet, is a secondary
concern.
</p>

<p>XML documents meant for humans tend to be more permanent and less
software bound, however. If you encode the Declaration of
Independence in XML, you want people to be able to read it in two,
two hundred, or two thousand years. You also want them to be able to
read it with any convenient tool, including ones not invented yet.
These requirements have some important implications for both the XML
applications you design to hold the data and the tools you use to
read and write them.
</p>

<p>The first rule is that the format should be very well documented.
There should be a
<a name="IXT-6-240004" />DTD, and that DTD should be very well
commented. Furthermore, there should be a significant amount of prose
documentation as well. Prose documentation can't
substitute for the formal documentation of a DTD, but
it's an invaluable asset in understanding the DTD.
</p>

<p>Standard formats like DocBook and TEI should be preferred to custom,
one-off XML applications. You should avoid proprietary DTDs that are
owned by any one person or company and whose future may depend on the
fortunes of that company or individual. Even DTDs that come from
nonprofit consortia like OASIS or TEI should be licensed sufficiently
liberally so that intellectual property restrictions
won't let anyone throw up road blocks in your path.
At least one DTD purveyor has gone so far as to file for patents on
its DTDs. These DTDs should be avoided like the plague. Stick to DTDs
that may be freely copied and shared and that can be retrieved from
many different locations.
</p>

<p>Once you've settled on a standard DTD, try to avoid
modifying it if you possibly can. If you absolutely must modify it,
then document your changes in excruciating, redundant detail. Include
comments in both your DTDs and documents, explaining what
you've done. Use the parameter entities built into
the DTDs to add new element types or subtract old ones, rather than
modifying the DTD files themselves.
</p>

<p>Conversely, the format shouldn't be too hard to
reverse engineer if the documentation is lost. Make sure full names
are used throughout for element and attribute names.
DocBook's <tt class="literal">para</tt> element is
superior to TEI's <tt class="literal">p</tt> element.
<tt class="literal">Paragraph</tt> would be better still.
</p>

<p>All of the inherent structure of the document should be indicated by
<a name="IXT-6-240005" />markup and markup
alone. It should not be left for the user to infer, nor should it be
encoded using whitespace or other separators. For instance,
here's an example of what not to do from SVG:
</p>

<blockquote><pre class="code">&lt;polygon style="fill: blue; stroke: green; stroke-width: 12"
         points="350,75  379,161 469,161 397,215 423,301 350,250
                 277,301 303,215 231,161 321,161" /&gt;</pre></blockquote>

<p>The <tt class="literal">style</tt> attribute contains three separate and
barely related items. Understanding this element requires parsing the
non-XML CSS format. The <tt class="literal">points</tt> attribute is even
worse. It's a long list of numbers, but
there's no information about what each number is.
You can't, for instance, see which are the x and
which are the y coordinates. An approach like this is preferable:
</p>

<blockquote><pre class="code">&lt;polygon fill="blue" stroke="green" stroke-width="12"&gt;
  &lt;point x="350" y="75"/&gt;
  &lt;point x="379" y="161"/&gt;
  &lt;point x="469" y="161"/&gt;
  &lt;point x="397" y="215"/&gt;
  &lt;point x="423" y="301"/&gt;
  &lt;point x="350" y="250"/&gt;
  &lt;point x="277" y="301"/&gt;
  &lt;point x="303" y="215"/&gt;
  &lt;point x="231" y="161"/&gt;
  &lt;point x="321" y="161"/&gt;
&lt;/polygon&gt;</pre></blockquote>

<p>The attribute-based style syntax is actually allowed in SVG. However,
the debate over which form to use for coordinates was quite heated in
the W3C SVG working group. In the end the working group decided
(wrongly, in our opinion) that the more verbose form would never be
adopted because of its size, even though most members felt it was
more in keeping with the spirit of XML. We think the working group
overemphasized the importance of document size in an era of
exponentially growing hard disks and network bandwidth, not to
mention ignoring the ease with which the second format could be
compressed for transport or storage.
</p>

<p><a name="IXT-6-240006" />Stylesheets are important.
We're all familiar with the injunction to separate
presentation from content. You've heard enough
warnings about not including mere style information like italics and
font choices in your XML documents. However, be careful not to go the
other way and include content in your stylesheets either. Author
names, titles, copyrights and other such information that changes
from document to document belongs in the document, not the
stylesheet, even if it's metainformation about the
document rather than the actual content of the document.
</p>

<p>Always keep in mind that you're not just writing for
the next couple months or years, but possibly for the next couple
thousand of years. Have pity on the poor historians who are going to
have to decipher your markup with limited <a name="IXTR3-178" />tools to help them.
</p>



<hr width="684" align="left" />
<div class="navbar"><table width="684" border="0"><tr><td align="left" valign="top" width="228"><a href="ch06_04.htm"><img src="../gifs/txtpreva.gif" alt="Previous" border="0" /></a></td><td align="center" valign="top" width="228"><a href="index.htm"><img src="../gifs/txthome.gif" alt="Home" border="0" /></a></td><td align="right" valign="top" width="228"><a href="ch06_06.htm"><img src="../gifs/txtnexta.gif" alt="Next" border="0" /></a></td></tr><tr><td align="left" valign="top" width="228">6.4. DocBook</td><td align="center" valign="top" width="228"><a href="index/index.htm"><img src="../gifs/index.gif" alt="Book Index" border="0" /></a></td><td align="right" valign="top" width="228">6.6. Transformation and Presentation</td></tr></table></div>
<hr width="684" align="left" />

<img src="../gifs/navbar.gif" usemap="#library-map" border="0" alt="Library Navigation Links" />
<p><p><font size="-1"><a href="copyrght.htm">Copyright &copy; 2002</a> O'Reilly &amp; Associates. All rights reserved.</font></p>

<map name="library-map">
<area shape="rect" coords="0,0,85,93" href="../index.htm"><area shape="rect" coords="85,0,180,98" href="../sax2/index.htm"><area shape="rect" coords="182,-1,261,100" href="index.htm"><area shape="rect" coords="263,1,384,96" href="../jxml/index.htm"><area shape="rect" coords="386,1,463,100" href="../jxslt/index.htm"><area shape="rect" coords="466,1,533,112" href="../xslt/index.htm"><area shape="rect" coords="535,-1,610,108" href="../schema/index.htm"><area shape="rect" coords="613,1,696,121" href="../pxml/index.htm">
</map>

</body></html>