<html><head><title>XSLT Functions (XML in a Nutshell, 2nd Edition)</title><link rel="stylesheet" type="text/css" href="../style/style1.css" />

<meta name="DC.Creator" content="Elliotte Rusty Harold and W. Scott Means" /><meta name="DC.Format" content="text/xml" scheme="MIME" /><meta name="DC.Language" content="en-US" /><meta name="DC.Publisher" content="O'Reilly &amp; Associates, Inc." /><meta name="DC.Source" scheme="ISBN" content="0-596-00292-0" /><meta name="DC.Subject.Keyword" content="stuff" /><meta name="DC.Title" content="XML in a Nutshell, 2nd Edition" /><meta name="DC.Type" content="Text.Monograph" />

</head><body bgcolor="#ffffff">

<img src="gifs/smbanner.gif" usemap="#banner-map" border="0" alt="Book Home" /><map name="banner-map"><area shape="rect" coords="1,-2,616,66" href="index.htm" alt="XML in a Nutshell" /><area shape="rect" coords="629,-11,726,25" href="jobjects/fsearch.htm" alt="Search this book" /></map>

<div class="navbar"><table width="684" border="0"><tr><td align="left" valign="top" width="228"><a href="ch23_02.htm"><img src="../gifs/txtpreva.gif" alt="Previous" border="0" /></a></td><td align="center" valign="top" width="228" /><td align="right" valign="top" width="228"><a href="ch23_04.htm"><img src="../gifs/txtnexta.gif" alt="Next" border="0" /></a></td></tr></table></div>



<h2 class="sect1">23.3. XSLT Functions</h2>

<p>XSLT <a name="xmlnut2-IDXTERM-2276" />
<a name="xmlnut2-IDXTERM-2277" />supports
all functions defined in XPath. In addition, it defines 10 extra
functions. Most XSLT processors also make several extension functions
available and allow you to write your own extension functions in Java
or other languages. The extension API is nonstandard and processor
dependent.
</p>

<p>XPath and XSLT functions are weakly typed. Although one type or
another is occasionally preferred, the processor normally converts
any type you pass in to the type the function expects. Functions that
only take node-sets as arguments are an exception to the weak-typing
rule. Other data types including strings, numbers, and booleans
cannot be converted to node-sets automatically.
</p>

<p>XPath and XSLT functions also use optional arguments, which are
filled in with defaults if omitted. In the following sections, we
list the most common and useful variations of each function.
</p>



<a name="ch23-92-fm2xml" /><a name="IXT-23-240652" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b>current( ) </b></font></td><td align="right"><i>
</i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><table width="515" border="0" cellpadding="5"><tr><td align="left"><pre>
<a name="IXT-23-240652" />node-set current( )
</pre></td><td align="right" /></tr></table>The <tt class="literal">current( )</tt> function returns a node-set
containing a single node, the current node. Outside of an XPath
predicate, the current node and the context node (represented by a
period in the abbreviated XPath syntax) are identical. However, in a
predicate, the current node may change based on other contents in the
predicate, while the context node stays the same.
</p></div>

<a name="ch23-93-fm2xml" /><a name="IXT-23-240653" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b>document( ) </b></font></td><td align="right"><i>
</i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><table width="515" border="0" cellpadding="5"><tr><td align="left"><pre>
<a name="IXT-23-240653" />node-set document(string uri)
node-set document(node-set uris)
node-set document(string uri, node-set base)
node-set document(node-set uris, node-set base)
</pre></td><td align="right" /></tr></table>The <tt class="literal">document( )</tt> function loads the XML document at
the URI specified by the first argument and returns a node-set
containing that document's root node. The URI is
normally given as a string, but may be given as another type that is
converted to a string. If the URI is given as a node-set, then each
node in the set is converted to a string, and the returned node-set
includes root nodes of all documents referenced by the URI argument.
</p><p>If the URI contains a fragment identifier, then the node-set returned
may indicate something other than the root node and thus contain more
than one node. If an error occurs while retrieving a document, most
XSLT processors stop processing the stylesheet.
</p><p>The <tt class="literal">document( )</tt> function may also take a node-set
as an optional second argument, in which case the first node (in
document order) in this set is used as the base URI with which to
resolve relative URIs given in the first argument. If the second
argument is omitted, then base URIs are resolved relative to the
stylesheet's location.
</p></div>

<a name="ch23-94-fm2xml" /><a name="IXT-23-240654" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b>element-available( )</b></font></td><td align="right"><i>
</i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><table width="515" border="0" cellpadding="5"><tr><td align="left"><pre>
<a name="IXT-23-240654" />boolean element-available(string qualifiedElementName)
</pre></td><td align="right" /></tr></table><tt class="literal">element-available( )</tt> returns true if and only if
the argument identifies an XSLT element the processor recognizes. If
the qualified name maps to a non-null namespace URI, then it refers
to an extension element. Otherwise, it refers to a standard XSLT
element. Assuming use of a fully conformant processor, you
don't need to use this function to test for standard
elements; just use it for extension elements.
</p></div>

<a name="ch23-95-fm2xml" /><a name="IXT-23-240655" /><a name="IXT-23-240656" /><a name="IXT-23-240657" /><a name="IXT-23-240658" /><a name="IXT-23-240659" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b>format-number( ) </b></font></td><td align="right"><i>
</i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><table width="515" border="0" cellpadding="5"><tr><td align="left"><pre>
<a name="IXT-23-240655" />string format-number(number x, string pattern)
string format-number(number x, string pattern, string decimalFormat)
</pre></td><td align="right" /></tr></table>The <tt class="literal">format-number( )</tt> <a name="IXT-23-240656" />function
<a name="IXT-23-240657" />converts the number <tt class="literal">x</tt>
to a string using the pattern specified by the second argument, as
well as the <tt class="literal">xsl:decimal-format</tt> element named by
the third argument (or the default decimal format, if the third
argument is omitted).
</p><p>This function's behavior is modeled after the
<tt class="literal">java.text.DecimalFormat</tt> class in Java 1.1 (not 1.2
or later). See
<a href="../../../../../../java.sun.com/products/jdk/1.1/docs/api/java.text.DecimalFormat.html">http://java.sun.com/products/jdk/1.1/docs/api/java.text.DecimalFormat.html</a>
for full documentation of the pattern passed as the second argument.
</p><p>The pattern specifies whether leading and trailing zeros should be
printed, whether the number's fractional part is
printed, the number of digits in a group, and the leading and
trailing suffixes for negative and positive numbers. The patterns are
described using an almost <a name="IXT-23-240658" /> <a name="IXT-23-240659" />Backus-Naur Form grammar, given
here:
</p><blockquote><pre class="code">pattern     -&gt;  subpattern{;subpattern}
subpattern  -&gt;  {prefix}integer{.fraction}{suffix}
prefix      -&gt;  '\\u0000'..'\\uFFFD' - specialCharacters
suffix      -&gt;  '\\u0000'..'\\uFFFD' - specialCharacters
integer     -&gt;  '#'* '0'* '0'
fraction    -&gt;  '0'* '#'*</pre></blockquote><p>The first line is not pure BNF. The first subpattern is used for
positive numbers. The second subpattern, which may not be present, is
used for negative numbers. If it's not present,
negative numbers use the positive format, but are prefixed with a
minus sign. <a href="ch23_03.htm">Table 23-1</a> defines the symbols used in
the grammar.
</p><a name="xmlnut2-CHP-23-TABLE-1" /><h4 class="objtitle">Table 23-1. Symbols used in the pattern grammar </h4><table border="1" cellpadding="3">



<tr>
<th>
<p>Symbol</p>
</th>
<th>
<p>Meaning</p>
</th>
</tr>


<tr>
<td>
<p>0</p>
</td>
<td>
<p>A digit, including leading or trailing zeros; may be set to a
different character using the <tt class="literal">zero-digit</tt> attribute
of <tt class="literal">xsl:decimal-format</tt>.
</p>
</td>
</tr>
<tr>
<td>
<p>#</p>
</td>
<td>
<p>A digit, except for leading or trailing zero; may be set to a
different character using the <tt class="literal">digit</tt> attribute of
<tt class="literal">xsl:decimal-format</tt>.
</p>
</td>
</tr>
<tr>
<td>
<p>.</p>
</td>
<td>
<p>A decimal separator; may be set to a different character using the
<tt class="literal">decimal-separator</tt> attribute of
<tt class="literal">xsl:decimal-format</tt>.
</p>
</td>
</tr>
<tr>
<td>
<p>,</p>
</td>
<td>
<p>A grouping separator; may be set to a different character using
<tt class="literal">xsl:decimal-format</tt>'s
<tt class="literal">grouping-separator</tt> attribute.
</p>
</td>
</tr>
<tr>
<td>
<p>;</p>
</td>
<td>
<p>Separates the positive and negative format patterns in a format
string; may be set to a different character using the
<tt class="literal">pattern-separator</tt> attribute of
<tt class="literal">xsl:decimal-format</tt>.
</p>
</td>
</tr>
<tr>
<td>
<p>-</p>
</td>
<td>
<p>A default negative prefix; may be set to a different character using
<tt class="literal">xsl:decimal-format</tt>'s
<tt class="literal">minus-sign</tt> attribute.
</p>
</td>
</tr>
<tr>
<td>
<p>%</p>
</td>
<td>
<p>Multiplies by 100 and shows as percentage; may be set to a different
character using
<tt class="literal">xsl:decimal-format</tt>'s
<tt class="literal">percent</tt> attribute.
</p>
</td>
</tr>
<tr>
<td>
<p><img src="figs/U2030.gif" alt="Figure " /></p>
</td>
<td>
<p>Multiplies by 1,000 and shows as per mille; may be set to a different
character using
<tt class="literal">xsl:decimal-format</tt>'s
<tt class="literal">permille</tt> attribute.
</p>
</td>
</tr>
<tr>
<td>
<p>X</p>
</td>
<td>
<p>Indicates that any other character can be used in the prefix or
suffix.
</p>
</td>
</tr>
<tr>
<td>
<p>'</p>
</td>
<td>
<p>Used to quote special characters in a prefix or suffix.</p>
</td>
</tr>

</table>For instance, #,##0.### is a common decimal-format pattern. The #
mark indicates any digit character except a leading or trailing zero.
The comma is the grouping separator. The period is the decimal
separator. The 0 is a digit that is printed even if
it's a nonsignificant zero. This pattern is
interpreted as follows:
</p><ol><li>
<p>The integer part contains as many digits as necessary.</p>
</li><li>
<p>The grouping separator separates every three digits.</p>
</li><li>
<p>If the integer part only contains zeros, a single zero is placed
before the decimal separator.
</p>
</li><li>
<p>Up to three digits are printed after the decimal point. However, any
trailing zeros are not printed.
</p>
</li><li>
<p>No separate pattern is included for negative numbers. Thus, negative
numbers are printed the same as positive numbers, but prefixed with a
minus sign.
</p>
</li></ol></div>



<a name="ch23-96-fm2xml" /><a name="IXT-23-240660" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b>function-available( ) </b></font></td><td align="right"><i>
</i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><table width="515" border="0" cellpadding="5"><tr><td align="left"><pre>
<a name="IXT-23-240660" />boolean function-available(string qualifiedName)
</pre></td><td align="right" /></tr></table><tt class="literal">function-available( )</tt> returns true if the argument
identifies a function in the processor's function
library; false otherwise. If the qualified name maps to a non-null
namespace URI, then it refers to an extension function. Otherwise, it
refers to a built-in function from XPath or XSLT. Assuming
you're using a fully conformant processor, however,
you don't need to test for standard functions, only
for extension functions.
</p></div>

<a name="ch23-97-fm2xml" /><a name="IXT-23-240661" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b>generate-id( ) </b></font></td><td align="right"><i>
</i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><table width="515" border="0" cellpadding="5"><tr><td align="left"><pre>
<a name="IXT-23-240661" />string generate-id(node-set node)
string generate-id( )
</pre></td><td align="right" /></tr></table>The <tt class="literal">generate-id( )</tt> function returns a string that
can be used as the value of an ID type attribute. This function
always produces the same string for the same node and a different
string for a different node. If the node-set contains more than one
node, then only the first node in the set is considered. If the
argument is omitted, then the node-set is set to the context node. If
the node-set is empty, then the empty string is returned.
</p></div>

<a name="ch23-98-fm2xml" /><a name="IXT-23-240662" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b>key( ) </b></font></td><td align="right"><i>
</i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><table width="515" border="0" cellpadding="5"><tr><td align="left"><pre>
<a name="IXT-23-240662" />node-set key(string keyName, string value)
node-set key(string keyName, node-set values)
</pre></td><td align="right" /></tr></table>The <tt class="literal">key( )</tt> function returns a node-set containing
all nodes in the source document that have a key with the name given
by the first argument and the value given by the second argument. If
the second argument is a node-set, then the node-set returned
contains all nodes that have a key with the specified name and a
value that matches that of any node in the second argument.
Otherwise, the returned node-set contains all nodes that have a key
with the specified name and a value that matches the second
argument's string value. Key names and values are
assigned to nodes using the <tt class="literal">xsl:key</tt> element.
</p></div>

<a name="ch23-99-fm2xml" /><a name="IXT-23-240663" /><a name="IXT-23-240664" /><a name="IXT-23-240665" /><a name="IXT-23-240666" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b>system-property( ) </b></font></td><td align="right"><i>
</i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><table width="515" border="0" cellpadding="5"><tr><td align="left"><pre>
<a name="IXT-23-240663" />object system-property(string qualifiedPropertyName)
</pre></td><td align="right" /></tr></table>The <tt class="literal">system-property( )</tt> function returns the value
of the named property. The type of the returned object is processor-
and property-dependent. If the processor does not recognize the
property name, then it returns an empty string.
</p><p>XSLT processors are required to recognize and return values for these
three properties:
</p><dl>
<dt><tt class="literal">xsl:version</tt></dt>
<dd>
<a name="IXT-23-240664" />A
number specifying the version of XSLT implemented by the processor;
this is normally 1.0, but may become 2.0 during this
book's life span.
</p>
</dd>


<dt><tt class="literal">xsl:vendor</tt></dt>
<dd>
<a name="IXT-23-240665" />A
string identifying the XSLT processor's vendor; for
instance, Apache Software Foundation for Xalan or SAXON 6.4.4 from
Michael Kay for SAXON.
</p>
</dd>


<dt><tt class="literal">xsl:vendor-url</tt></dt>
<dd>
<a name="IXT-23-240666" />A
string containing a URL for the XSLT processor's
vendor; for instance, <tt class="literal">http://xml.apache.org/xalan</tt>
for Xalan or <tt class="literal">http://saxon.sourceforge.net</tt> for
SAXON.
</p>
</dd>

</dl><p>Implementations may also recognize and return values for other
processor-dependent properties.
</p></div>

<a name="ch23-100-fm2xml" /><a name="IXT-23-240667" /><a name="IXTR3-245" /><a name="IXTR3-246" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b>unparsed-entity-uri( )</b></font></td><td align="right"><i>
</i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><table width="515" border="0" cellpadding="5"><tr><td align="left"><pre>
string unparsed-entity-uri(string entityName)
</pre></td><td align="right" /></tr></table>The <tt class="literal">unparsed-entity-uri( )</tt> function returns the
URI of the unparsed entity with the specified name declared in the
source document's DTD or the empty string, if no
unparsed entity with that name exists.
</p><a name="IXTR3-245" /><a name="IXTR3-246" /></div>


<hr width="684" align="left" />
<div class="navbar"><table width="684" border="0"><tr><td align="left" valign="top" width="228"><a href="ch23_02.htm"><img src="../gifs/txtpreva.gif" alt="Previous" border="0" /></a></td><td align="center" valign="top" width="228"><a href="index.htm"><img src="../gifs/txthome.gif" alt="Home" border="0" /></a></td><td align="right" valign="top" width="228"><a href="ch23_04.htm"><img src="../gifs/txtnexta.gif" alt="Next" border="0" /></a></td></tr><tr><td align="left" valign="top" width="228">23.2. XSLT Elements</td><td align="center" valign="top" width="228"><a href="index/index.htm"><img src="../gifs/index.gif" alt="Book Index" border="0" /></a></td><td align="right" valign="top" width="228">23.4. TrAX</td></tr></table></div>
<hr width="684" align="left" />

<img src="../gifs/navbar.gif" usemap="#library-map" border="0" alt="Library Navigation Links" />
<p><p><font size="-1"><a href="copyrght.htm">Copyright &copy; 2002</a> O'Reilly &amp; Associates. All rights reserved.</font></p>

<map name="library-map">
<area shape="rect" coords="0,0,85,93" href="../index.htm"><area shape="rect" coords="85,0,180,98" href="../sax2/index.htm"><area shape="rect" coords="182,-1,261,100" href="index.htm"><area shape="rect" coords="263,1,384,96" href="../jxml/index.htm"><area shape="rect" coords="386,1,463,100" href="../jxslt/index.htm"><area shape="rect" coords="466,1,533,112" href="../xslt/index.htm"><area shape="rect" coords="535,-1,610,108" href="../schema/index.htm"><area shape="rect" coords="613,1,696,121" href="../pxml/index.htm">
</map>

</body></html>