<html><head><title>XML Syntax (XML in a Nutshell, 2nd Edition)</title><link rel="stylesheet" type="text/css" href="../style/style1.css" />

<meta name="DC.Creator" content="Elliotte Rusty Harold and W. Scott Means" /><meta name="DC.Format" content="text/xml" scheme="MIME" /><meta name="DC.Language" content="en-US" /><meta name="DC.Publisher" content="O'Reilly &amp; Associates, Inc." /><meta name="DC.Source" scheme="ISBN" content="0-596-00292-0" /><meta name="DC.Subject.Keyword" content="stuff" /><meta name="DC.Title" content="XML in a Nutshell, 2nd Edition" /><meta name="DC.Type" content="Text.Monograph" />

</head><body bgcolor="#ffffff">

<img src="gifs/smbanner.gif" usemap="#banner-map" border="0" alt="Book Home" /><map name="banner-map"><area shape="rect" coords="1,-2,616,66" href="index.htm" alt="XML in a Nutshell" /><area shape="rect" coords="629,-11,726,25" href="jobjects/fsearch.htm" alt="Search this book" /></map>

<div class="navbar"><table width="684" border="0"><tr><td align="left" valign="top" width="228"><a href="ch20_02.htm"><img src="../gifs/txtpreva.gif" alt="Previous" border="0" /></a></td><td align="center" valign="top" width="228" /><td align="right" valign="top" width="228"><a href="ch20_04.htm"><img src="../gifs/txtnexta.gif" alt="Next" border="0" /></a></td></tr></table></div>



<h2 class="sect1">20.3. XML Syntax</h2>

<p>For each section of this reference that maps directly to an XML
language structure, an informal syntax reference describes theat
structure's form. The following conventions are used
with these syntax blocks:
</p>

<a name="ch20-5-fm2xml" /><table border="1" cellpadding="3">



<tr>
<th>
<p>Format</p>
</th>
<th>
<p>Meaning</p>
</th>
</tr>


<tr>
<td>
<p><b class="emphasis-bold">DOCTYPE</b></p>
</td>
<td>
<p>Bold text indicates literal characters that must appear as written
within the document (e.g., <b class="emphasis-bold">DOCTYPE</b>).
</p>
</td>
</tr>
<tr>
<td>
<p><em class="emphasis">encoding-name</em></p>
</td>
<td>
<p>Italicized text indicates that the user must replace the text with
real data. The item indicates what type of data should be inserted
(e.g., <em class="emphasis">encoding-name</em> = en-us).
</p>
</td>
</tr>
<tr>
<td>
<p>|</p>
</td>
<td>
<p>The vertical bar | indicates that only one out of a list of possible
values can be selected.
</p>
</td>
</tr>
<tr>
<td>
<p>[ ]</p>
</td>
<td>
<p>Square brackets indicate that a particular portion of the syntax is
optional.
</p>
</td>
</tr>

</table><p>

<a name="xmlnut2-CHP-20-SECT-3.1" /><div class="sect2">
<h3 class="sect2">20.3.1. Global Syntax Structures</h3>

<p>Every XML document is broken into two primary sections: the
<em class="firstterm">prolog</em><a name="IXT-20-240252" /> and the <em class="firstterm">document
element</em><a name="IXT-20-240253" />. A few documents may also have comments
or processing instructions that follow the root element in a sort of
<em class="emphasis">epilog</em> (an unofficial term). The prolog contains
structural information about the particular type of XML document you
are writing, including the XML declaration and document type
declaration. The prolog is optional, and if a document does not need
to be validated against a DTD, it can be omitted completely. The only
required structure in a well-formed XML document is the top-level
document element itself.
</p>

<p>The following <a name="xmlnut2-IDXTERM-1804" /> <a name="xmlnut2-IDXTERM-1805" />syntax structures are common to the
entire XML document. Unless otherwise noted within a subsequent
reference item, the following structures can appear anywhere within
an XML document.
</p>

<a name="ch20-7-fm2xml" /><a name="IXT-20-240254" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b>Whitespace</b></font></td><td align="right"><i></i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><table width="515" border="0" cellpadding="5"><tr><td align="left" /><td align="right" /></tr></table><p><em class="emphasis">Whitespace</em>
<a name="IXT-20-240254" />is defined as a space, tab, or empty line
(which is composed of a carriage return, line feed, or combination of
the two). Whitespace serves the same purpose in XML as it does in
most programming and natural languages: to separate tokens and
language elements from one another. XML has simplified the task of
determining which whitespace is significant to an application and
which is not. To an XML parser, all whitespace in element content is
significant and will be passed to the client application. Whitespace
within tags--for instance, between attributes--is not
significant. Consider the following example:
</p><blockquote><pre class="code">&lt;p&gt;  This sentence has extraneous 
  line breaks.&lt;/p&gt;</pre></blockquote><p>After parsing, the character data from this example element is passed
to the underlying application as:
</p><blockquote><pre class="code">   This sentence has extraneous
line breaks.</pre></blockquote><p>Though XML specifies that all whitespace in element content be
preserved for use by the client application, an additional facility
is available to the XML author to further hint that an element's character data's space
and formatting should be preserved. For more information, see the
discussion of the <tt class="literal">xml:space</tt> attribute in <a href="ch20_03.htm">Special Attributes</a> later in this
chapter.
</p></div>

<a name="ch20-8-fm2xml" /><a name="IXT-20-240255" /><a name="IXT-20-240256" /><a name="IXT-20-240257" /><a name="IXT-20-240258" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b>Names</b></font></td><td align="right"><i></i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><table width="515" border="0" cellpadding="5"><tr><td align="left" /><td align="right" /></tr></table><p>To
<a name="IXT-20-240255" />
<a name="IXT-20-240256" />ease
the burden of those who write XML parsers, XML names must adhere to
the following lexical conventions:
</p><ul><li>
<p>Begin with a letter, <tt class="literal">_</tt>, or <tt class="literal">:</tt>
character.
</p>
</li><li>
<p>After the first character, be composed only of letters, digits,
<tt class="literal">.</tt>, <tt class="literal">-</tt>, <tt class="literal">_</tt>, and
<tt class="literal">:</tt> characters.
</p>
</li></ul><p>In this context, a letter is any Unicode character that matches the
<tt class="literal">Letter</tt> production from the EBNF grammar at the end
of this chapter.
</p><p>According to the XML 1.0 specification, the <tt class="literal">:</tt>
<a name="IXT-20-240257" />character may be used freely within names,
although the character is now officially reserved as part of the
<em class="emphasis">Namespaces in XML</em><a name="IXT-20-240258" /> recommendation. Even if a document
does not use namespaces, the colon should still not be used within
identifiers to maintain compatibility with namespace-aware parsers.
See the <a href="ch20_03.htm">Section 20.3.4</a> in
this chapter for more information about how namespace-aware
identifiers are formed.
</p><p>Names should also avoid starting with the three-letter sequence X, M,
L, unless specifically sanctioned by an XML specification.
</p></div>

<a name="ch20-9-fm2xml" /><a name="IXT-20-240259" /><a name="IXT-20-240260" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b>Character References</b></font></td><td align="right"><i>
</i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><table width="515" border="0" cellpadding="5"><tr><td align="left"><pre><a name="IXT-20-240259" />
<b class="emphasis-bold">&amp;#</b><em class="emphasis">decimal-number</em><b class="emphasis-bold">;
&amp;#x</b><em class="emphasis">hexadecimal-number</em>;
</pre></td><td align="right" /></tr></table>All XML parsers are based on the Unicode character set, no matter
what the external encoding of the XML file is. It is theoretically
possible to author documents directly in Unicode, but many
text-editing, storage, and delivery systems still use the ASCII
character set. To allow XML authors to include Unicode characters in
their documents' content without forcing them to
abandon their existing editing tools, XML provides the
<em class="emphasis">character reference</em> mechanism.
</p><p>A character reference allows an author to insert a
<a name="IXT-20-240260" />Unicode character by number
into the output stream produced by the parser to an XML application.
Consider an XML document that includes the following character data:
</p><blockquote><pre class="code">&amp;#xa9; 2002 O'Reilly &amp;#38; Associates</pre></blockquote><p>In this example, the parser would replace the character reference
with the actual Unicode character and pass it to the client
application:
</p><blockquote><pre class="code">&#xA9; 2002 O'Reilly &amp; Associates</pre></blockquote><p>Character references may not be used in element or attribute names,
though they may be used in attribute values.
</p></div>

<a name="ch20-10-fm2xml" /><a name="IXT-20-240261" /><a name="IXT-20-240262" /><a name="IXT-20-240263" /><a name="IXT-20-240264" /><a name="IXT-20-240265" /><a name="IXT-20-240266" /><a name="IXT-20-240267" /><a name="IXT-20-240268" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b>Predefined Entities</b></font></td><td align="right"><i></i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><table width="515" border="0" cellpadding="5"><tr><td align="left" /><td align="right" /></tr></table><p><a name="IXT-20-240261" /> <a name="IXT-20-240262" />Besides
user-defined entity references, XML includes the five named entity
references shown in <a href="ch20_03.htm">Table 20-1</a> that can be used
without being declared. These references are a subset of those
available in HTML documents.
</p><a name="xmlnut2-CHP-20-TABLE-1" /><h4 class="objtitle">Table 20-1. Predefined entities </h4><table border="1" cellpadding="3">




<tr>
<th>
<p>Entity</p>
</th>
<th>
<p>Character</p>
</th>
<th>
<p>XML declaration</p>
</th>
</tr>


<tr>
<td>
<a name="IXT-20-240263" /><blockquote><pre class="code">&amp;lt;</pre></blockquote>
</td>
<td>
<p>&lt;</p>
</td>
<td>
<a name="IXT-20-240264" /><blockquote><pre class="code">&lt;!ENTITY lt "&amp;#38;#60;"&gt;</pre></blockquote>
</td>
</tr>
<tr>
<td>
<a name="IXT-20-240265" /><blockquote><pre class="code">&amp;gt;</pre></blockquote>
</td>
<td>
<p>&gt;</p>
</td>
<td>
<blockquote><pre class="code">&lt;!ENTITY gt "&amp;#62;"&gt;</pre></blockquote>
</td>
</tr>
<tr>
<td>
<a name="IXT-20-240266" /><blockquote><pre class="code">&amp;amp;</pre></blockquote>
</td>
<td>
<p>&amp;</p>
</td>
<td>
<blockquote><pre class="code">&lt;!ENTITY amp "&amp;#38;#38;"&gt;</pre></blockquote>
</td>
</tr>
<tr>
<td>
<a name="IXT-20-240267" /><blockquote><pre class="code">&amp;apos;</pre></blockquote>
</td>
<td>
<p>"</p>
</td>
<td>
<blockquote><pre class="code">&lt;!ENTITY apos "&amp;#39;"&gt;</pre></blockquote>
</td>
</tr>
<tr>
<td>
<a name="IXT-20-240268" /><blockquote><pre class="code">&amp;quot;</pre></blockquote>
</td>
<td>
<p>"</p>
</td>
<td>
<blockquote><pre class="code">&lt;!ENTITY quot "&amp;#34;"&gt;</pre></blockquote>
</td>
</tr>

</table>The <tt class="literal">&amp;lt;</tt> and <tt class="literal">&amp;amp;</tt>
entities must be used wherever <tt class="literal">&lt;</tt> or
<tt class="literal">&amp;</tt> appear in document content. The
<tt class="literal">&amp;gt;</tt> entity is frequently used wherever
<tt class="literal">&gt;</tt> appears in document content, but is only
mandatory to avoid putting the sequence <tt class="literal">]]&gt;</tt>
into content. <tt class="literal">&amp;apos;</tt> and
<tt class="literal">&amp;quot;</tt> are generally used only within
attribute values to avoid conflicts between the value and the quotes
used to contain the value.
</p><p>Though the parser must recognize these entities regardless of whether
they have been declared, you can declare them in your DTD without
generating errors.
</p><p>The presence of these "special"
predefined entities creates a conundrum within an XML document.
Because it is possible to use these references without declaring
them, it is possible to have a valid XML document that includes
references to entities that were never declared. The XML
specification actually encourages document authors to declare these
entities to maintain the integrity of the entity
declaration-reference rule. In practical terms, declaring these
entities only adds unnecessary complexity to your document.
</p></div>

<a name="ch20-X_Ref491016163" /><a name="IXT-20-240269" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b>CDATA (Character Data) Sections</b></font></td><td align="right"><i></i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><table width="515" border="0" cellpadding="5"><tr><td align="left"><pre>
&lt;<b class="emphasis-bold">!</b>[<b class="emphasis-bold">CDATA</b>[<em class="emphasis">unescaped character &amp; markup data</em>]]<b class="emphasis-bold">&gt;</b>
</pre></td><td align="right" /></tr></table>XML <a name="IXT-20-240269" />documents consist of markup
and character data. The <tt class="literal">&lt;</tt> or
<tt class="literal">&amp;</tt> characters cannot be included inside normal
character data without using a character or entity reference, such as
<tt class="literal">&amp;amp;</tt> or <tt class="literal">&amp;#38;</tt>. By
using a reference, the resulting <tt class="literal">&lt;</tt> and
<tt class="literal">&amp;</tt> characters are not recognized as markup by
the parser, but will become part of the data stream to the
parser's client application.
</p><p>For large blocks of character data--particularly if the data
contains markup, such as an HTML or XML fragment--the
<tt class="literal">CDATA</tt> section can be used. Within a
<tt class="literal">CDATA</tt> block, every character between the opening
and closing tag is considered character data. Thus, special
characters can be included in a <tt class="literal">CDATA</tt> section with
impunity, except for the <tt class="literal">CDATA</tt> closing sequence,
<tt class="literal">]]&gt;</tt>.
</p><p><tt class="literal">CDATA</tt> sections are very useful for tasks such as
enclosing XML or HTML documents inside of tutorials explaining how to
use markup, but it is difficult to process the contents of
<tt class="literal">CDATA</tt> sections using XSLT, the DOM, or SAX as
anything other than text.
</p><a name="ch20-11-fm2xml" /><blockquote><b>NOTE:</b> 
<tt class="literal">CDATA</tt> sections cannot be nested. The character
sequence <tt class="literal">]]&gt;</tt> cannot appear within data that is
being escaped, or the <tt class="literal">CDATA</tt> block will be closed
prematurely. This situation should not be a problem ordinarily, but
if an application includes XML documents as unparsed character data,
it is important to be aware of this constraint. If it is necessary to
include the <tt class="literal">CDATA</tt> closing sequence in the data,
close the open <tt class="literal">CDATA</tt> section, include the closing
characters using character references to escape them, then reopen the
<tt class="literal">CDATA</tt> section to contain the rest of the character
data.
</p>
</blockquote></div>

<a name="ch20-12-fm2xml" /><a name="IXT-20-240270" /><a name="IXT-20-240271" /><a name="IXT-20-240272" /><a name="IXT-20-240273" /><a name="IXT-20-240274" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b>Entity References</b></font></td><td align="right"><i></i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><table width="515" border="0" cellpadding="5"><tr><td align="left" /><td align="right" /></tr></table><p>An <a name="IXT-20-240270" />XML entity can best be
understood as a macro replacement facility, in which the replacement
can be either parsed (the text becomes part of the XML document) or
unparsed. If unparsed, the entity declaration points to external
binary data that cannot be parsed. Additionally, the replacement text
for parsed entities can come from a string or the contents of an
external file. During parsing, a parsed entity reference is replaced
by the substitution text that is specified in the entity declaration.
The replacement text is then reparsed until no more entity or
character references remain.
</p><p>To simplify <a name="IXT-20-240271" />document parsing, two distinct types
of entities are used in different situations: general and parameter.
The basic syntax for referencing both entity types is almost
identical, but specific rules apply to where each type can be used.
</p><blockquote><a name="IXT-20-240272" /><a name="IXT-20-240273" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b>Parameter Entity References</b></font></td><td align="right"><i>
</i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><table width="515" border="0" cellpadding="5"><tr><td align="left"><pre><b class="emphasis-bold">%</b><em class="emphasis">name</em><b class="emphasis-bold">;</b></pre></td><td align="right" /></tr></table><p>When an XML parser encounters a parameter entity reference within a
document's DTD, it replaces the reference with the
entity's text. Whether the replacement text is
included as a literal or included from an external entity, the parser
continues parsing the replacement text as if it had always been a
part of the document. This parsing has interesting implications for
nested entity references:
</p><blockquote><pre class="code">&lt;!ENTITY % YEAR "2001"&gt;
&lt;!ENTITY COPYRIGHT "&amp;#xa9; %YEAR;"&gt;
. . .
&lt;copyright_notice&gt;&amp;COPYRIGHT;&lt;/copyright_notice&gt;</pre></blockquote><p>After the necessary entity replacements are made, the previous
example would yield the following canonical element:
</p><blockquote><pre class="code">&lt;copyright_notice&gt;&#xA9; 2001&lt;/copyright_notice&gt;</pre></blockquote><a name="ch20-13-fm2xml" /><blockquote><b>WARNING:</b> 
XML treats <a name="IXT-20-240273" />parameter entity references
differently depending on where they appear within the DTD. References
within the literal value of an entity declaration (such as
<tt class="literal">Copyright &amp;#xa9; %YEAR;</tt>) are valid only as
part of the external subset. Within the internal subset, parameter
entity references may occur only where a complete markup declaration
could exist. In other words, within the internal subset, parameter
references can be used only to include complete markup declarations.
</p>
</blockquote><p>Parameter entity references are recognized only within the DTD;
therefore, the <tt class="literal">%</tt> character has no significance
within character data and does not need to be escaped.
</p></div></blockquote><blockquote><a name="IXT-20-240274" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b>General Entity References</b></font></td><td align="right"><i></i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><table width="515" border="0" cellpadding="5"><tr><td align="left"><pre><b class="emphasis-bold">&amp;</b><em class="emphasis">name</em><b class="emphasis-bold">;</b></pre></td><td align="right" /></tr></table><p><a name="IXT-20-240274" />General entity references
are recognized only within the parsed character data in the body of
an XML document. They may appear within the parsed character data
contained in an element start- and end-tag, or within the value of an
attribute. They are not recognized within a
document's DTD (except inside default values for
attributes) or within <tt class="literal">CDATA</tt> sections.
</p><a name="ch20-15-fm2xml" /><blockquote><b>NOTE:</b> 
The sequence of operations that occurs when a parsed general entity
is included by the XML parser can lead to interesting side effects.
An entity's replacement text is, in turn, read by
the parser. If character or general entity replacements exist in the
entity replacement text, they are also parsed and included as parsing
continues.
</p>
</blockquote></div></blockquote></div>


<a name="ch20-X_Ref491015515" /><a name="IXT-20-240275" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b>Comments</b></font></td><td align="right"><i>
</i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><table width="515" border="0" cellpadding="5"><tr><td align="left"><pre>
<a name="IXT-20-240275" /><b class="emphasis-bold">&lt;!--</b> <tt class="literal" /><em class="emphasis">comment text</em><b class="emphasis-bold"> --&gt;</b>
</pre></td><td align="right" /></tr></table>Comments can appear anywhere in your document or DTD, outside of
other markup tags. XML parsers are not required to preserve contents
of comment blocks, so they should be used only to store information
that is not a part of your application. In reality, most information
you might consider storing in a comment block probably should be made
an official part of your XML application. Rather than storing data
that will be read and acted on by an application in a comment, as is
frequently done in HTML documents, you should store it within the
element structure of the actual XML document. Enhancing the
readability of a complex DTD or temporarily disabling blocks of
markup are effective uses of comments.
</p><a name="ch20-16-fm2xml" /><blockquote><b>NOTE:</b> 
The character sequence <tt class="literal">--</tt> cannot be included
within a comment block, except as part of the tag closing text.
Because comments cannot be nested, commenting out a comment block is
impossible. If large blocks of markup that include comments must be
temporarily disabled, consider wrapping them in a
<tt class="literal">CDATA</tt> section to cause the parser to read them as
simple text instead of markup.
</p>
</blockquote></div>

<a name="ch20-X_Ref491015553" /><a name="IXT-20-240276" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b>Processing Instructions</b></font></td><td align="right"><i>
</i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><table width="515" border="0" cellpadding="5"><tr><td align="left"><pre>
<a name="IXT-20-240276" /><b class="emphasis-bold">&lt;?</b><em class="emphasis">target </em>[<em class="emphasis">processing-instruction data</em>]<b class="emphasis-bold">?&gt;</b>
</pre></td><td align="right" /></tr></table>Processing instructions provide an escape mechanism that allows an
XML application to include instructions to an XML processor that are
not part of the XML markup or character data. The processing
instruction target can be any legal XML name, except
<tt class="literal">xml</tt> in any combination of upper- and lowercase
(see <a href="ch02_01.htm">Chapter 2</a>). Linking to a stylesheet to
provide formatting instructions for a document is a common use of
this mechanism. According to the principles of XML, formatting
instructions should remain separate from the actual content of a
document, but some mechanism must associate the two. Processing
instructions are significant only to applications that recognize
them.
</p><p>The notation facility can indicate exactly what type of processing
instruction is included, and each individual XML application must
decide what to do with the additional data. No action is required by
an XML parser when it recognizes that a particular processing
instruction matches a declared notation. When this facility is used,
applications that do not recognize the public or system identifiers
of a given processing instruction target should realize that they
could not properly interpret its data portion.
</p></div>

<a name="xmlnut2-CHP-20-SIDEBAR-1" /><blockquote><table border="1" cellpadding="6"><tr><td>
<h4 class="objtitle">Character Encoding Autodetection</h4>
&nbsp;
<p>The XML <a name="IXT-20-240277" />declaration must be the very first item in
a document so that the XML parser can determine which character
encoding was used to store the document. A chicken-and-egg problem
exists, involving the XML declaration's
<tt class="literal">encoding="..."</tt> clause: the parser
can't parse the clause if it
doesn't know what character encoding the document
uses. However, since the first five characters of your document must
be the string <tt class="literal">&lt;?xml</tt> (if it includes an XML
declaration), the parser can read the first few bytes of your
document and, in most cases, determine the character encoding before
it has read the <tt class="literal">encoding</tt> declaration.
</p>
</td></tr></table><p></blockquote>

<a name="ch20-17-fm2xml" /><a name="IXT-20-240278" /><a name="IXT-20-240279" /><a name="IXT-20-240280" /><a name="IXT-20-240281" /><a name="IXT-20-240282" /><a name="IXT-20-240283" /><a name="IXT-20-240284" /><a name="IXT-20-240285" /><a name="IXTR3-210" /><a name="IXTR3-211" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b>XML Declaration</b></font></td><td align="right"><i>
</i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><table width="515" border="0" cellpadding="5"><tr><td align="left"><pre>
<a name="IXT-20-240278" /><b class="emphasis-bold">&lt;?xml version="</b><em class="emphasis">1.0</em><b class="emphasis-bold">" </b>[<b class="emphasis-bold">encoding="</b><em class="emphasis">encoding-name</em><b class="emphasis-bold">"</b>][ <b class="emphasis-bold">standalone="</b><em class="emphasis">yes</em>|<em class="emphasis">no</em><b class="emphasis-bold">"</b>]<b class="emphasis-bold">?&gt;</b>
</pre></td><td align="right" /></tr></table>The XML declaration serves several purposes. It tells the parser what
version of the specification was used, how the document is encoded,
and whether the document is completely self-contained or has
references to external entities.
</p><p>The XML declaration, if included, must be the first thing that
appears in an XML document. Nothing, except possibly a Unicode
byte-order mark, may appear before this structure's
initial <tt class="literal">&lt;</tt> character.
</p><blockquote><a name="IXT-20-240279" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b>Version Information</b></font></td><td align="right"><i></i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><table width="515" border="0" cellpadding="5"><tr><td align="left"><pre>... <b class="emphasis-bold">version="</b><em class="emphasis">1.0</em><b class="emphasis-bold">"</b> ...</pre></td><td align="right" /></tr></table><p><a name="IXT-20-240279" />The version information attribute denotes
which version of the XML specification was used to create the current
document. At this time, the only valid version is
<tt class="literal">1.0</tt>. 
</p></div></blockquote><blockquote><a name="IXT-20-240280" /><a name="IXT-20-240281" /><a name="IXT-20-240282" /><a name="IXT-20-240283" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b>Encoding Declaration</b></font></td><td align="right"><i></i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><table width="515" border="0" cellpadding="5"><tr><td align="left"><pre>... <b class="emphasis-bold">encoding="</b><em class="emphasis">encoding-name</em><b class="emphasis-bold">" </b>... </pre></td><td align="right" /></tr></table><p><a name="IXT-20-240280" />
<a name="IXT-20-240281" />The
encoding declaration, if present, indicates which character-encoding
scheme was used to store the document. Although all XML documents are
ultimately handled as Unicode by the parser, the external storage
scheme may be anything from an ASCII text file using the Latin-1
character set (ISO-8859-1) to a file with native Japanese characters.
</p><p>XML parsers may also recognize other encodings, but the XML
specification only requires that they recognize
<a name="IXT-20-240282" />UTF-8 and
<a name="IXT-20-240283" />UTF-16 encoded documents. Many
parsers also support additional character encodings. For a thorough
discussion of character-encoding schemes, see <a href="ch26_01.htm">Chapter 26</a>.
</p></div></blockquote><blockquote><a name="IXT-20-240284" /><a name="IXT-20-240285" /><a name="IXTR3-210" /><a name="IXTR3-211" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b>Standalone Declaration</b></font></td><td align="right"><i></i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><table width="515" border="0" cellpadding="5"><tr><td align="left"><pre>... <b class="emphasis-bold">standalone="</b><em class="emphasis">yes</em>|<em class="emphasis">no</em><b class="emphasis-bold">" </b>... </pre></td><td align="right" /></tr></table><p><a name="IXT-20-240284" />
<a name="IXT-20-240285" />If
a document is completely self contained (the DTD, if there is one, is
contained completely within the original document), then the
<tt class="literal">standalone="yes"</tt> declaration may be used. If this
declaration is not given, the value <tt class="literal">no</tt> is assumed,
and all external entities are read and parsed. It is possible to
convert any document in which <tt class="literal">standalone="no"</tt> to a
standalone document by replacing each external entity reference with
the text contained in the external entity file.
</p><p>From the standpoint of an XML application developer, this flag has no
effect on how a document is parsed. However, if it is given, it must
be accurate. Setting <tt class="literal">standalone="yes"</tt> when a
document does require DTD declarations that are not present in the
main document file is a violation of XML validity <a name="IXTR3-210" /> <a name="IXTR3-211" />rules.
</p></div></blockquote></div>

</div>
<a name="xmlnut2-CHP-20-SECT-3.2" /><div class="sect2">
<h3 class="sect2">20.3.2. DTD (Document Type Definition)</h3>


<p><a href="ch02_01.htm">Chapter 2</a> <a name="xmlnut2-IDXTERM-1834" />explained the difference
between well-formed and valid documents. Well-formed documents that
include and conform to a given DTD are considered valid. Documents
that include a DTD and violate the rules of that DTD are invalid. The
DTD is comprised of the <tt class="literal">DOCTYPE</tt> declaration and
both the <em class="emphasis">internal subset</em> (declarations contained
directly within the document) and the <em class="emphasis">external
subset</em> (declarations that are included from outside the
main document).
</p>

<a name="ch20-20-fm2xml" /><a name="IXT-20-240286" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b>Parameter Entities</b></font></td><td align="right"><i></i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><table width="515" border="0" cellpadding="5"><tr><td align="left" /><td align="right" /></tr></table><p>The <a name="IXT-20-240286" />parameter entity mechanism is a simple macro
replacement facility that is only valid within the context of the
DTD. Parameter entities are declared and then referenced from within
markup or possibly from within other entity declarations. The source
of the entity replacement text can be either a literal string or the
contents of an external file. Parameter entities simplify maintenance
of large, complex documents by allowing authors to build libraries of
commonly used entity declarations.
</p></div>

<a name="ch20-X_Ref491015923" /><a name="IXT-20-240287" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b>Parameter Entity Declarations</b></font></td><td align="right"><i>
</i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><table width="515" border="0" cellpadding="5"><tr><td align="left"><pre>
<a name="IXT-20-240287" /><b class="emphasis-bold">&lt;!ENTITY %</b><em class="emphasis"> name </em><b class="emphasis-bold">"</b><em class="emphasis">Replacement text.</em><b class="emphasis-bold">"&gt;
&lt;!ENTITY %</b> <em class="emphasis">name</em> <b class="emphasis-bold">SYSTEM</b>
     <b class="emphasis-bold">"</b><em class="emphasis">system-literal</em><b class="emphasis-bold">"&gt;
&lt;!ENTITY %</b> <em class="emphasis">name</em> <b class="emphasis-bold">PUBLIC "</b><em class="emphasis">pubid-literal</em><b class="emphasis-bold">" </b>
    <b class="emphasis-bold">"</b><em class="emphasis">system-literal</em><b class="emphasis-bold">"&gt;</b>
</pre></td><td align="right" /></tr></table>Parameter entities are declared within the
document's DTD and must be declared before they are
used. The declaration provides two key pieces of information:
</p><ul><li>
<p>The name of the entity, which is used when it is referenced</p>
</li><li>
<p>The replacement text, either directly or indirectly through a link to
an external entity
</p>
</li></ul><p>Be aware that an XML parser performs some preprocessing on the
replacement text before it is used in an entity reference. Most
importantly, parameter entity references in the replacement text are
recursively expanded before the final version of the replacement text
is stored. Character references are also replaced immediately with
the specified character. This replacement can lead to unexpected side
effects, particularly when constructing parameter entities that
declare other parameter entities. For full disclosure of how entity
replacement is implemented by an XML parser and what kinds of
unexpected side effects can occur, see Appendix D of the XML 1.0
specification. The specification is available on the World Wide Web
Consortium web site (<a href="../../../../../../www.w3.org/TR/REC-xml">http://www.w3.org/TR/REC-xml#sec-entexpand</a> ).
</p></div>

<a name="ch20-21-fm2xml" /><a name="IXT-20-240288" /><a name="IXT-20-240289" /><a name="IXT-20-240290" /><a name="IXT-20-240291" /><a name="IXT-20-240292" /><a name="IXT-20-240293" /><a name="IXT-20-240294" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b>General Entities</b></font></td><td align="right"><i></i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><table width="515" border="0" cellpadding="5"><tr><td align="left" /><td align="right" /></tr></table><p>General entities are declared within the document type definition and
then referenced within the document's text and
attribute content. When the document is parsed, the
entity's replacement text is substituted for the
entity reference. The parser then resumes parsing, starting with the
text that was just replaced.
</p><p><a name="IXT-20-240288" />
<a name="IXT-20-240289" />General entities are declared within
the DTD using a superset of the syntax used to declare parameter
entities. Besides the ability to declare internal parsed entities and
external parsed entities, you can declare external unparsed entities
and associate an XML notation name with them.
</p><p>Internal <a name="IXT-20-240290" /> <a name="IXT-20-240291" />entities
are used when the replacement text can be efficiently stored inline
as a literal string. The replacement text within an internal entity
is included completely in the entity declaration itself, obviating
the need for an external file to contain the replacement text. This
situation closely resembles the string replacement macro facilities
found in many popular programming languages and environments:
</p><blockquote><pre class="code"><b class="emphasis-bold">&lt;!ENTITY </b><em class="emphasis">name</em><b class="emphasis-bold"> "</b><em class="emphasis">Replacement text</em><b class="emphasis-bold">"&gt;</b></pre></blockquote><p>There <a name="IXT-20-240292" /> <a name="IXT-20-240293" /> <a name="IXT-20-240294" />are two types of external entities: parsed
and unparsed. When a parsed entity is referenced, the contents of the
external entity are included in the document, and the XML parser
resumes parsing, starting with the newly included text. When an
unparsed entity is referenced, the parser supplies the application
with the unparsed entity's URI, but it does not
insert that data into the document or parse it. What to do with that
URI is up to the application. Any entity declared with an XML
notation name associated with it is an external unparsed entity, and
any references to it within the document must be made using attribute
values of type <tt class="literal">ENITITY</tt> or
<tt class="literal">ENTITIES</tt>:
</p><blockquote><pre class="code"><b class="emphasis-bold">&lt;!ENTITY</b> <em class="emphasis">name</em> <b class="emphasis-bold">SYSTEM</b> 
<b class="emphasis-bold">    "</b><em class="emphasis">system-literal</em><b class="emphasis-bold">"&gt;</b>
<b class="emphasis-bold">&lt;!ENTITY</b> <em class="emphasis">name </em><b class="emphasis-bold">PUBLIC </b>
    <b class="emphasis-bold">"</b><em class="emphasis">pubid-literal</em><b class="emphasis-bold">" "</b><em class="emphasis">system-literal</em><b class="emphasis-bold">"&gt;</b></pre></blockquote></div>

<a name="ch20-22-fm2xml" /><a name="IXT-20-240295" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b>Text Declarations</b></font></td><td align="right"><i>
</i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><table width="515" border="0" cellpadding="5"><tr><td align="left"><pre>
<b class="emphasis-bold">&lt;?xml</b>[ <b class="emphasis-bold">version="</b><em class="emphasis">1.0</em><b class="emphasis-bold">"</b>] <b class="emphasis-bold">encoding="</b><em class="emphasis">encoding-name</em><b class="emphasis-bold">"?&gt;</b>
</pre></td><td align="right" /></tr></table><a name="IXT-20-240295" />Files that contain external
parsed entities must include a text declaration if the entity file
uses a character encoding other than UTF-8 or UTF-16. This
declaration would be followed by the replacement text of the external
parsed entity.
</p><a name="ch20-24-fm2xml" /><blockquote><b>NOTE:</b> 
External parsed entities may contain only document content or a
completely well-formed subset of the DTD. This restriction is
significant because it indicates that external parameter entities
cannot be used to play token-pasting games by splitting XML syntax
constructs into multiple files, then expecting the parser to
reassemble them.
</p>
</blockquote></div>

<a name="ch20-25-fm2xml" /><a name="IXT-20-240296" /><a name="IXT-20-240297" /><a name="IXT-20-240298" /><a name="IXT-20-240299" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b>Unparsed Entities</b></font></td><td align="right"><i></i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><table width="515" border="0" cellpadding="5"><tr><td align="left" /><td align="right" /></tr></table><p>It may be necessary <a name="IXT-20-240296" />
<a name="IXT-20-240297" />
<a name="IXT-20-240298" /> <a name="IXT-20-240299" />at times to include data in your XML
document that should not be parsed. For instance, your XML document
may need to include pointers to graphics files that will be used by
an application. These files are logically part of the document, but
should not be parsed. The XML language allows you to declare external
unparsed entities that can be included as attribute values within the
content of your document:
</p><blockquote><pre class="code"><b class="emphasis-bold">&lt;!ENTITY</b> <em class="emphasis">name</em> <b class="emphasis-bold">SYSTEM</b>  
<b class="emphasis-bold">    "</b><em class="emphasis">system-literal</em><b class="emphasis-bold">" NDATA </b><em class="emphasis">notation_name</em> <b class="emphasis-bold">&gt;</b>
<b class="emphasis-bold">&lt;!ENTITY</b> <em class="emphasis">name</em> <b class="emphasis-bold">PUBLIC "</b><em class="emphasis">pubid-literal</em><b class="emphasis-bold"> "</b>
    "<em class="emphasis">system-literal</em>" <b class="emphasis-bold">NDATA</b> <em class="emphasis">notation_name</em> &gt;</pre></blockquote><p>To include unparsed entities, you must first declare a notation that
will be referenced in the actual entity declaration:
</p><blockquote><pre class="code">&lt;!NOTATION gif SYSTEM "images/gif"&gt;</pre></blockquote><p>Then declaring the entity itself is possible:</p><blockquote><pre class="code">&lt;!ENTITY bookcase_pic SYSTEM "bookcase.gif" NDATA gif&gt;</pre></blockquote><p>As an unparsed general entity, it can be referenced only as an
attribute value of type <tt class="literal">ENTITY</tt> or
<tt class="literal">ENTITIES</tt>:
</p><blockquote><pre class="code">&lt;picture src="bookcase_pic" type="gif"/&gt;</pre></blockquote><p>When an XML parser parses this element, the information contained in
the entity and notation declarations can be used to identify the
actual type of data stored in the external entity. For example, a
program could choose to display the contents of a GIF external entity
on the screen, once the actual format is known.
</p><a name="ch20-27-fm2xml" /><blockquote><b>NOTE:</b> 
XLink and similar mechanisms are commonly used in place of unparsed
entities.
</p>
</blockquote></div>

<a name="ch20-X_Ref491015708" /><a name="IXT-20-240300" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b>External Subset</b></font></td><td align="right"><i></i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><table width="515" border="0" cellpadding="5"><tr><td align="left" /><td align="right" /></tr></table><p>The <a name="IXT-20-240300" />document type declaration
can include part or all of the document type definition from an
external file. This external portion of the DTD is referred to as the
external DTD subset and may contain markup declarations, conditional
sections, and parameter entity references. It must include a text
declaration if the character encoding is not UTF-8 or UTF-16:
</p><blockquote><pre class="code"><b class="emphasis-bold">&lt;?xml</b>[<em class="emphasis"> </em><b class="emphasis-bold">version="</b><em class="emphasis">1.0</em><b class="emphasis-bold">"</b>]<em class="emphasis"> </em><b class="emphasis-bold">encoding="</b><em class="emphasis">encoding-name</em><b class="emphasis-bold">"?&gt;</b></pre></blockquote><p>This declaration (if present) would then be followed by a series of
complete DTD markup statements, including <tt class="literal">ELEMENT</tt>,
<tt class="literal">ATTLIST</tt>, <tt class="literal">ENTITY</tt>, and
<tt class="literal">NOTATION</tt> declarations, as well as conditional
sections, and processing instructions. For example:
</p><blockquote><pre class="code">&lt;!ELEMENT furniture_item (desc, %extra_tags; user_tags?, parts_list, 
    assembly+)&gt;

&lt;!ATTLIST furniture_item
    xmlns CDATA #FIXED "http://namespaces.oreilly.com/furniture/"
&gt;
...</pre></blockquote></div>

<a name="ch20-28-fm2xml" /><a name="IXT-20-240301" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b>Internal DTD Subset</b></font></td><td align="right"><i></i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><table width="515" border="0" cellpadding="5"><tr><td align="left" /><td align="right" /></tr></table><p>The <a name="IXT-20-240301" />internal DTD subset is the
portion of the document type definition included directly within the
document type declaration between the <tt class="literal">[</tt> and
<tt class="literal">]</tt> characters. The internal DTD subset can contain
markup declarations and parameter entity references, but not
conditional sections. A single document may have both internal and
external DTD subsets, which, when taken together, form the complete
document type definition. The following example shows the internal
subset, which appears between the <tt class="literal">[</tt> and
<tt class="literal">]</tt> characters:
</p><blockquote><pre class="code">&lt;!DOCTYPE furniture_item SYSTEM "furniture.dtd"
[
&lt;!ENTITY % bookcase_ex SYSTEM "Bookcase_ex.ent"&gt;

%bookcase_ex;

&lt;!ENTITY bookcase_pic SYSTEM "bookcase.gif" NDATA gif&gt;
&lt;!ENTITY parts_list SYSTEM "parts_list.ent"&gt;
]&gt;</pre></blockquote></div>

<a name="ch20-29-fm2xml" /><a name="xmlnut2-IDXTERM-1851" /><a name="IXT-20-240302" /><a name="IXT-20-240303" /><a name="IXT-20-240304" /><a name="IXT-20-240305" /><a name="IXT-20-240306" /><a name="IXT-20-240307" /><a name="IXT-20-240308" /><a name="IXT-20-240309" /><a name="IXT-20-240310" /><a name="IXT-20-240311" /><a name="IXT-20-240312" /><a name="IXT-20-240313" /><a name="IXT-20-240314" /><a name="IXT-20-240315" /><a name="IXT-20-240316" /><a name="IXT-20-240317" /><a name="IXT-20-240318" /><a name="IXT-20-240319" /><a name="IXT-20-240320" /><a name="IXT-20-240321" /><a name="IXT-20-240322" /><a name="IXT-20-240323" /><a name="IXT-20-240324" /><a name="IXT-20-240325" /><a name="IXT-20-240326" /><a name="IXT-20-240327" /><a name="IXT-20-240328" /><a name="IXT-20-240329" /><a name="IXT-20-240330" /><a name="IXT-20-240331" /><a name="IXTR3-212" /><a name="IXT-20-240332" /><a name="IXT-20-240333" /><a name="IXT-20-240334" /><a name="IXTR3-213" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b>Element Type Declaration</b></font></td><td align="right"><i></i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><table width="515" border="0" cellpadding="5"><tr><td align="left" /><td align="right" /></tr></table><p>Element <a name="xmlnut2-IDXTERM-1851" />type declarations provide a template for
the actual element instances that appear within an XML document. The
declaration determines what type of content, if any, can be contained
within elements with the given name. The following sections describe
the various element content options available.
</p><a name="ch20-31-fm2xml" /><blockquote><b>NOTE:</b> 
Since
<a name="IXT-20-240302" />namespaces are not explicitly
included in the XML 1.0 recommendation, element and attribute
declarations within a DTD must give the complete (qualified) name
that will be used in the target document. This means that if
namespace prefixes will be used in instance documents, the DTD must
declare them just as they will appear, prefixes and all. While
parameter entities may allow instance documents to use different
prefixes, this still makes complete and seamless integration of
namespaces into a DTD-based application very awkward.
</p>
</blockquote><blockquote><a name="IXT-20-240303" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b>Empty Element Type</b></font></td><td align="right"><i></i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><table width="515" border="0" cellpadding="5"><tr><td align="left"><pre><a name="IXT-20-240303" /><b class="emphasis-bold">&lt;!ELEMENT</b><em class="emphasis"> name </em><b class="emphasis-bold">EMPTY&gt;</b></pre></td><td align="right" /></tr></table><p>Elements that are declared empty cannot contain content or nested
elements. Within the document, empty elements may use one of the
following two syntax forms:
</p><blockquote><pre class="code"><b class="emphasis-bold">&lt;</b><em class="emphasis">name</em> <b class="emphasis-bold">[</b><em class="emphasis">attribute</em><b class="emphasis-bold">="</b><em class="emphasis">value</em><b class="emphasis-bold">"</b><em class="emphasis"> </em><b class="emphasis-bold">...]/&gt;</b>
<b class="emphasis-bold">&lt;</b><em class="emphasis">name</em> <b class="emphasis-bold">[</b><em class="emphasis">attribute</em><b class="emphasis-bold">="</b><em class="emphasis">value</em><b class="emphasis-bold">"</b><em class="emphasis"> </em><b class="emphasis-bold">...]&gt;&lt;/</b><em class="emphasis">name</em><b class="emphasis-bold">&gt;</b></pre></blockquote></div></blockquote><blockquote><a name="IXT-20-240304" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b>Any Element Type</b></font></td><td align="right"><i></i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><table width="515" border="0" cellpadding="5"><tr><td align="left"><pre><a name="IXT-20-240304" /><b class="emphasis-bold">&lt;!ELEMENT</b><em class="emphasis"> name </em><b class="emphasis-bold">ANY&gt;</b></pre></td><td align="right" /></tr></table><p>This content specifier acts as a wildcard, allowing elements of this
type to contain character data or instances of any valid element
types that are declared in the DTD.
</p></div></blockquote><blockquote><a name="IXT-20-240305" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b>Mixed Content Element Type</b></font></td><td align="right"><i></i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><table width="515" border="0" cellpadding="5"><tr><td align="left"><pre><a name="IXT-20-240305" /><b class="emphasis-bold">&lt;!ELEMENT</b><em class="emphasis"> name </em><b class="emphasis-bold">(#PCDATA</b><em class="emphasis"> </em>[<em class="emphasis"> </em><b class="emphasis-bold">|</b><em class="emphasis"> name</em>]<b class="emphasis-bold">+)*&gt;
&lt;!ELEMENT</b><em class="emphasis"> name </em><b class="emphasis-bold">(#PCDATA)&gt;</b></pre></td><td align="right" /></tr></table>Element declarations that include the <tt class="literal">#PCDATA</tt>
token can include text content mixed with other nested elements that
are declared in the optional portion of the element declaration. If
the <tt class="literal">#PCDATA</tt> token is used, it is not possible to
limit the number of times or sequence in which other nested elements
are mixed with the parsed character data. If only text content is
desired, the asterisk is optional.
</p></div></blockquote><blockquote><a name="IXT-20-240306" /><a name="IXT-20-240307" /><a name="IXT-20-240308" /><a name="IXT-20-240309" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b>Constrained Child Nodes</b></font></td><td align="right"><i></i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><table width="515" border="0" cellpadding="5"><tr><td align="left"><pre><b class="emphasis-bold">&lt;!ELEMENT</b><em class="emphasis"> name </em><b class="emphasis-bold">(</b><em class="emphasis">child_node_regexp</em><b class="emphasis-bold">)</b>[<b class="emphasis-bold">? | * | +</b>]<b class="emphasis-bold">&gt;</b></pre></td><td align="right" /></tr></table><a name="IXT-20-240306" /><p>XML provides a simple regular-expression syntax that can be used to
limit the order and number of child elements within a parent element.
This language includes the following operators:
</p><a name="ch20-32-fm2xml" /><table border="1" cellpadding="3">



<tr>
<th>
<p>Operator</p>
</th>
<th>
<p>Meaning</p>
</th>
</tr>


<tr>
<td>
<blockquote><pre class="code">Name</pre></blockquote>
</td>
<td>
<p>Matches an element of the given name</p>
</td>
</tr>
<tr>
<td>
<blockquote><pre class="code">( ... )</pre></blockquote>
</td>
<td>
<p>Groups expressions for processing as sets of sequences (using the
comma as a separator) or choices (using | as a separator)
</p>
</td>
</tr>
<tr>
<td>
<a name="IXT-20-240307" /><blockquote><pre class="code">?</pre></blockquote>
</td>
<td>
<p>Indicates that the preceding name or expression can occur zero or one
times at this point in the document
</p>
</td>
</tr>
<tr>
<td>
<a name="IXT-20-240308" /><blockquote><pre class="code">*</pre></blockquote>
</td>
<td>
<p>Indicates that the preceding name or expression can occur zero or
more times at this point in the document
</p>
</td>
</tr>
<tr>
<td>
<a name="IXT-20-240309" /><blockquote><pre class="code">+</pre></blockquote>
</td>
<td>
<p>Indicates that the preceding name or expression must occur one or
more times at this point in the document
</p>
</td>
</tr>

</table></div></blockquote><blockquote><a name="ch20-29-AttrLisDecl" /><a name="IXT-20-240310" /><a name="IXT-20-240311" /><a name="IXT-20-240312" /><a name="IXT-20-240313" /><a name="IXT-20-240314" /><a name="IXT-20-240315" /><a name="IXT-20-240316" /><a name="IXT-20-240317" /><a name="IXT-20-240318" /><a name="IXT-20-240319" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b><i>Attribute List Declaration</i></b></font></td><td align="right"><i></i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><table width="515" border="0" cellpadding="5"><tr><td align="left"><pre><b class="emphasis-bold">&lt;!ATTLIST</b><em class="emphasis"> element_name </em>[<em class="emphasis">attribute_name attribute_type default_decl</em>]<b class="emphasis-bold">*&gt;</b></pre></td><td align="right" /></tr></table><a name="IXT-20-240310" /><p>In a valid XML document it is necessary to declare the attribute
names, types, and default values that are used with each element
type.
</p><p>The attribute name must obey the rules for XML identifiers, and no
duplicate attribute names may exist within a single declaration.
</p><p><a name="IXT-20-240311" />Attributes
are declared as having a specific type. Depending on the declared
type, a validating XML parser will constrain the values that appear
in instances of those attributes within a document. The following
table lists the various attribute types and their meanings:
</p><a name="ch20-33-fm2xml" /><table border="1" cellpadding="3">



<tr>
<th>
<p>Attribute type</p>
</th>
<th>
<p>Meaning</p>
</th>
</tr>


<tr>
<td>
<p><a name="IXT-20-240312" /><tt class="literal">CDATA</tt>
</p>
</td>
<td>
<p>Simple character data.</p>
</td>
</tr>
<tr>
<td>
<p><a name="IXT-20-240313" /><tt class="literal">ID</tt>
</p>
</td>
<td>
<p>A unique <tt class="literal">ID</tt> value within the current XML document.
No two <tt class="literal">ID</tt> attribute values within a document can
have the same value, and no element can have two attributes of type
<tt class="literal">ID</tt>.
</p>
</td>
</tr>
<tr>
<td>
<p><a name="IXT-20-240314" />IDREF,
<a name="IXT-20-240315" />IDREFS
</p>
</td>
<td>
<p>A single reference to an element <tt class="literal">ID</tt>
(<tt class="literal">IDREF</tt>) or a list of <tt class="literal">IDs</tt>
(<tt class="literal">IDREFS</tt>), separated by spaces. Every
<tt class="literal">ID</tt> token must refer to a valid
<tt class="literal">ID</tt> located somewhere within the document that
appears as the <tt class="literal">ID</tt> type
attribute's value.
</p>
</td>
</tr>
<tr>
<td>
<p><a name="IXT-20-240316" />ENTITY, <a name="IXT-20-240317" />ENTITIES
</p>
</td>
<td>
<p>A single reference to a declared unparsed external entity
(<tt class="literal">ENTITY</tt>) or a list of references
(<tt class="literal">ENTITIES</tt>), separated by spaces.
</p>
</td>
</tr>
<tr>
<td>
<p><a name="IXT-20-240318" />NMTOKEN, <a name="IXT-20-240319" />NMTOKENS
</p>
</td>
<td>
<p>A single name token value (<tt class="literal">NMTOKEN</tt>) or a list of
name tokens (<tt class="literal">NMTOKENS</tt>), separated by spaces.
</p>
</td>
</tr>

</table></div></blockquote><blockquote><a name="IXT-20-240320" /><a name="IXT-20-240321" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b><i>NOTATION Attribute Type</i></b></font></td><td align="right"><i></i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><table width="515" border="0" cellpadding="5"><tr><td align="left"><pre><a name="IXT-20-240320" />
<a name="IXT-20-240321" />... <b class="emphasis-bold">NOTATION (</b><em class="emphasis">notation </em>[<b class="emphasis-bold">|</b><em class="emphasis"> notation</em>]<b class="emphasis-bold">*)</b> ...</pre></td><td align="right" /></tr></table>The <tt class="literal">NOTATION</tt> attribute mechanism lets XML document
authors indicate that the character content of some elements obey the
rules of some formal language other than XML. The following short
sample document shows how notations might be used to specify the type
of programming language stored in the
<tt class="literal">code_fragment</tt> element:
</p><blockquote><pre class="code">&lt;?xml version="1.0"?&gt;
&lt;!DOCTYPE code_fragment
[
&lt;!NOTATION java_code PUBLIC "Java source code"&gt;
&lt;!NOTATION c_code PUBLIC "C source code"&gt;
&lt;!NOTATION perl_code PUBLIC "Perl source code"&gt;
&lt;!ELEMENT code_fragment (#PCDATA)&gt;
&lt;!ATTLIST code_fragment
          code_lang NOTATION (java_code | c_code | perl_code) #REQUIRED&gt;

]&gt;
&lt;code_fragment code_lang="c_code"&gt;
    main( ) { printf("Hello, world."); }
&lt;/code_fragment&gt;</pre></blockquote></div></blockquote><blockquote><a name="IXT-20-240322" /><a name="IXT-20-240323" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b>Enumeration Attribute Type</b></font></td><td align="right"><i></i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><table width="515" border="0" cellpadding="5"><tr><td align="left"><pre><a name="IXT-20-240322" />
<a name="IXT-20-240323" />... <b class="emphasis-bold">(</b><em class="emphasis">name_token </em>[<b class="emphasis-bold">|</b><em class="emphasis"> name_token</em>]<b class="emphasis-bold">*)</b><em class="emphasis"> ...</em></pre></td><td align="right" /></tr></table>This syntax limits the possible values of the given attribute to one
of the name tokens from the provided list:
</p><blockquote><pre class="code">&lt;!ELEMENT door EMPTY&gt;
&lt;!ATTLIST door
          state (open | closed | missing) "open"&gt;
. . .
&lt;door state="closed"/&gt;</pre></blockquote></div></blockquote><blockquote><a name="IXT-20-240324" /><a name="IXT-20-240325" /><a name="IXT-20-240326" /><a name="IXT-20-240327" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b>Default Values</b></font></td><td align="right"><i></i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><table width="515" border="0" cellpadding="5"><tr><td align="left" /><td align="right" /></tr></table><p>If an optional attribute is not present on a given element, a default
value may be provided to be passed by the XML parser to the client
application. <a name="IXT-20-240324" />The following table shows various forms of
the attribute default value clause and their meanings:
</p><a name="ch20-34-fm2xml" /><table border="1" cellpadding="3">



<tr>
<th>
<p>Default value clause</p>
</th>
<th>
<p>Explanation</p>
</th>
</tr>


<tr>
<td>
<p><a name="IXT-20-240325" /><tt class="literal">#REQUIRED</tt>
</p>
</td>
<td>
<p>A value must be provided for this attribute.</p>
</td>
</tr>
<tr>
<td>
<p><a name="IXT-20-240326" /><tt class="literal">#IMPLIED</tt>
</p>
</td>
<td>
<p>A value may or may not be provided for this attribute.</p>
</td>
</tr>
<tr>
<td>
<p><a name="IXT-20-240327" /><tt class="literal">[#FIXED ]</tt>
<tt class="literal">"</tt><em class="emphasis">default
value</em><tt class="literal">"</tt>
</p>
</td>
<td>
<p>If this attribute has no explicit value, the XML parser substitutes
the given default value. If the <tt class="literal">#FIXED</tt> token is
provided, this attribute's value must match the
given default value. In either case, the parent element always has an
attribute with this name.
</p>
</td>
</tr>

</table>The <tt class="literal">#FIXED</tt> modifier indicates that the attribute
may contain only the value given in the attribute declaration.
Although redundant, it is possible to provide an explicit attribute
value on an element when the attribute was declared as
<tt class="literal">#FIXED</tt>. The only restriction is that the attribute
value must exactly match the value given in the
<tt class="literal">#FIXED</tt> declaration.
</p></div></blockquote><blockquote><a name="xmlnut2-CHP-20-REFENTRY-special_attributes" /><a name="IXT-20-240328" /><a name="IXT-20-240329" /><a name="IXT-20-240330" /><a name="IXT-20-240331" /><a name="IXTR3-212" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b>Special Attributes</b></font></td><td align="right"><i></i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><table width="515" border="0" cellpadding="5"><tr><td align="left" /><td align="right" /></tr></table><p><a name="IXT-20-240328" />
<a name="IXT-20-240329" />Some
attributes are significant to XML and must be declared and
implemented in a particular way:
</p><dl>
<dt><tt class="literal">xml:space</tt></dt>
<dd>
The <tt class="literal">xml:space</tt><a name="IXT-20-240330" /> attribute tells an XML application
whether the whitespace within the specified element is significant:
</p>
<blockquote><pre class="code">&lt;!ATTLIST<em class="emphasis"> element_name </em></tt>xml:space (default|preserve)<em class="emphasis"> </em></tt>
  default_decl<b class="emphasis-bold">&gt;</b>
&lt;!ATTLIST<em class="emphasis"> element_name </em></tt>xml:space (default) #FIXED 'default' &gt;
&lt;!ATTLIST<em class="emphasis"> element_name </em></tt>xml:space (preserve) #FIXED 'preserve' &gt;</pre></blockquote>
</dd>


<dt><tt class="literal">xml:lang</tt></dt>
<dd>
For <a name="IXT-20-240331" />an element's
character content, the <tt class="literal">xml:lang</tt> attribute allows a
document author to specify the human language for an
element's character content. If used in a valid XML
document, the document type definition must include an attribute type
declaration with the <tt class="literal">xml:lang</tt> attribute name. See
<a href="ch05_01.htm">Chapter 5</a> for an explanation of language support
in <a name="IXTR3-212" />XML.
</p>
</dd>

</dl></div></blockquote><blockquote><a name="IXT-20-240332" /><a name="IXT-20-240333" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b>Notation Declaration</b></font></td><td align="right"><i></i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><table width="515" border="0" cellpadding="5"><tr><td align="left"><pre><a name="IXT-20-240332" />
<a name="IXT-20-240333" /><b class="emphasis-bold">&lt;!NOTATION</b><em class="emphasis"> notation_name </em><b class="emphasis-bold">SYSTEM "</b><em class="emphasis">system-literal</em><b class="emphasis-bold">"&gt;
&lt;!NOTATION</b> <em class="emphasis">notation_name</em> <b class="emphasis-bold">PUBLIC "</b><em class="emphasis">pubid-literal</em><b class="emphasis-bold">"&gt;
&lt;!NOTATION</b> <em class="emphasis">notation_name</em> <b class="emphasis-bold">PUBLIC "</b><em class="emphasis">pubid-literal</em><b class="emphasis-bold">" "</b><em class="emphasis">system-literal</em><b class="emphasis-bold">"&gt;</b></pre></td><td align="right" /></tr></table>Notation declarations are used to provide information to an XML
application about the format of the document's
unparsed content. Notations are used by unparsed external entities,
processing instructions, and some attribute values.
</p><p>Notation information is not significant to the XML parser, but it is
preserved for use by the client application. The public and system
identifiers are made available to the client application so that it
may correctly interpret non-XML data and processing instructions.
</p></div></blockquote><blockquote><a name="IXT-20-240334" /><a name="IXTR3-213" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b>Conditional Sections</b></font></td><td align="right"><i></i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><table width="515" border="0" cellpadding="5"><tr><td align="left" /><td align="right" /></tr></table><p>The <a name="IXT-20-240334" />conditional section markup provides
support for conditionally including and excluding content at parse
time within an XML document's external subset.
Conditional sections are not allowed within a
document's internal subset. The following example
illustrates a likely application of conditional <a name="IXTR3-213" />sections:
</p><blockquote><pre class="code">&lt;!ENTITY % debug 'IGNORE' &gt;
&lt;!ENTITY % release 'INCLUDE' &gt;
 
&lt;!ELEMENT addend (#PCDATA)&gt;
&lt;!ELEMENT result (#PCDATA)&gt;
 
&lt;![%debug;[
&lt;!ELEMENT sum (addend+, result)&gt;
]]&gt;
&lt;![%release;[
&lt;!ELEMENT sum (result)&gt;
]]&gt;</pre></blockquote></div></blockquote></div>
</div>
<a name="xmlnut2-CHP-20-SECT-3.3" /><div class="sect2">
<h3 class="sect2">20.3.3. Document Body</h3>

<p>Elements <a name="IXT-20-240335" />are an XML
document's lifeblood. They provide the structure for
character data and attribute values that make up a particular
instance of an XML document type definition. The
<tt class="literal">!ELEMENT</tt> and <tt class="literal">!ATTLIST</tt>
declarations from the DTD restrict the possible contents of an
element within a valid XML document. Combining elements and/or
attributes that violate these restrictions generates an error in a
validating parser.
</p>

<a name="ch20-X_Ref491016133" /><a name="IXT-20-240336" /><a name="IXT-20-240337" /><a name="IXT-20-240338" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b>Start-Tags and End-Tags</b></font></td><td align="right"><i>
</i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><table width="515" border="0" cellpadding="5"><tr><td align="left"><pre>
<a name="IXT-20-240336" />
<a name="IXT-20-240337" />
<a name="IXT-20-240338" /><b class="emphasis-bold">&lt;</b><em class="emphasis">element_name </em>[<em class="emphasis">attribute_name</em><b class="emphasis-bold">="</b><em class="emphasis">attribute value</em><b class="emphasis-bold">"</b>]<b class="emphasis-bold">*&gt; ...&lt;/</b><em class="emphasis">element_name</em><b class="emphasis-bold">&gt;</b>
</pre></td><td align="right" /></tr></table>Elements that have content (either character data, other elements, or
both) must start with a start-tag and end with an element end-tag.
</p></div>

<a name="ch20-X_Ref491016271" /><a name="IXT-20-240339" /><a name="IXT-20-240340" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b>Empty-Element Tags</b></font></td><td align="right"><i>
</i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><table width="515" border="0" cellpadding="5"><tr><td align="left"><pre>
<b class="emphasis-bold">&lt;</b><em class="emphasis">element_name </em>[<em class="emphasis">attribute_name</em><b class="emphasis-bold">="</b><em class="emphasis">attribute value</em><b class="emphasis-bold">"</b>]<b class="emphasis-bold">*&gt;&lt;/</b><em class="emphasis">empty_element</em><b class="emphasis-bold">&gt;
&lt;</b><em class="emphasis">element_name </em>[<em class="emphasis">attribute_name</em><b class="emphasis-bold">="</b><em class="emphasis">attribute value</em><b class="emphasis-bold">"</b>]<b class="emphasis-bold">* /&gt;</b>
</pre></td><td align="right" /></tr></table>Empty <a name="IXT-20-240339" />
<a name="IXT-20-240340" />elements
have no content and are written using either the start- and end-tag
syntax mentioned previously or the empty-element syntax. The two
forms are functionally identical, but the empty-element syntax is
more succinct and more frequently used.
</p></div>

<a name="ch20-36-fm2xml" /><a name="IXT-20-240341" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b>Attributes</b></font></td><td align="right"><i>
</i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><table width="515" border="0" cellpadding="5"><tr><td align="left"><pre>
<a name="IXT-20-240341" /><em class="emphasis">attribute_name</em><b class="emphasis-bold">="</b><em class="emphasis">attribute value</em><b class="emphasis-bold">"</b>
<em class="emphasis">attribute_name</em><b class="emphasis-bold">='</b><em class="emphasis">attribute value</em><b class="emphasis-bold">'</b>
</pre></td><td align="right" /></tr></table>Elements may include attributes. The order of attributes within an
element tag is not significant and is not guaranteed to be preserved
by an XML parser. Attribute values must appear within either single
or double quotations. Attribute values within a document must conform
to the rules explained in <a href="ch20_04.htm">Section 20.4.1</a>
of this chapter.
</p><p>Note that whitespace may appear around the <tt class="literal">=</tt>
character.
</p><p>The value that appears in the quoted string is tested for validity,
depending on the attribute type provided in the
<tt class="literal">!ATTLIST</tt> declaration for the element type.
Attribute values can contain general entity references, but cannot
contain references to external parsed entities. See <a href="ch20_04.htm">Section 20.4.1</a>
of this chapter for more information about attribute-value
restrictions.
</p></div>


</div>
<a name="xmlnut2-CHP-20-SECT-3.4" /><div class="sect2">
<h3 class="sect2">20.3.4. Namespaces</h3>


<p>Although <a name="IXT-20-240342" />namespace support was not
part of the original XML 1.0 recommendation, <em class="emphasis">Namespaces in
XML</em><a name="IXT-20-240343" /> was approved less than a year later
(January 14, 1999). Namespaces are used to identify uniquely the
element and attribute names of a given XML application from those of
other applications. See <a href="ch04_01.htm">Chapter 4</a> for more
detailed information.
</p>

<p>The following sections describe how namespaces impact the formation
and interpretation of element and attribute names within an XML
document.
</p>


<a name="ch20-37-fm2xml" /><a name="IXT-20-240344" /><a name="IXT-20-240345" /><a name="IXT-20-240346" /><a name="IXT-20-240347" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b>Unqualified Names</b></font></td><td align="right"><i>
</i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><table width="515" border="0" cellpadding="5"><tr><td align="left"><pre>
<em class="emphasis">name</em>
</pre></td><td align="right" /></tr></table>An <a name="IXT-20-240344" />
<a name="IXT-20-240345" />unqualified
<a name="IXT-20-240346" />
<a name="IXT-20-240347" />name is
an XML element or attribute name that is not associated with a
namespace. This could be because it has no namespace prefix and no
default namespace has been declared. All unprefixed attribute names
are unqualified because they are never automatically associated with
a default namespace. XML parsers that do not implement namespace
support (of which there are very few) or parsers that have been
configured to ignore namespaces will always return unqualified names
to their client applications. Two unqualified names are considered to
be the same if they are lexically identical.
</p></div>

<a name="ch20-38-fm2xml" /><a name="IXT-20-240348" /><a name="IXT-20-240349" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b>Qualified Names</b></font></td><td align="right"><i>
</i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><table width="515" border="0" cellpadding="5"><tr><td align="left"><pre>
[<em class="emphasis">prefix</em><b class="emphasis-bold">:</b>]<em class="emphasis">local_part</em>
</pre></td><td align="right" /></tr></table>A <a name="IXT-20-240348" />
<a name="IXT-20-240349" />qualified name is an element
or attribute name that is associated with an XML namespace. There are
three possible types of qualified names:
</p><ul><li>
<p>Unprefixed element names that are contained within the scope of a
default namespace declaration
</p>
</li><li>
<p>Prefixed element names</p>
</li><li>
<p>Prefixed attribute names</p>
</li></ul><p>Unlike unqualified names, qualified names are considered the same
only if their namespace URIs (from their namespace declarations) and
their local parts match.
</p></div>

<a name="ch20-39-fm2xml" /><a name="IXT-20-240350" /><a name="IXT-20-240351" /><a name="IXT-20-240352" /><a name="IXT-20-240353" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b>Default Namespace Declaration</b></font></td><td align="right"><i>
</i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><table width="515" border="0" cellpadding="5"><tr><td align="left"><pre>
<b class="emphasis-bold">xmlns="</b><em class="emphasis">namespace_URI</em><b class="emphasis-bold">"</b>
</pre></td><td align="right" /></tr></table>When <a name="IXT-20-240350" />this
<a name="IXT-20-240351" /> <a name="IXT-20-240352" /> <a name="IXT-20-240353" />attribute is included in an element
start-tag, it and any unprefixed elements contained within it are
automatically associated with the namespace URI given. If the
<tt class="literal">xmlns</tt> attribute is set to the empty string, any
effective default namespace is ignored, and unprefixed elements are
not associated with any namespace.
</p><a name="ch20-41-fm2xml" /><blockquote><b>NOTE:</b> 
An important caveat about default namespace declarations is that they
do not affect unprefixed attributes. Unprefixed attributes are never
explicitly named in any namespace, even if their containing element
is.
</p>
</blockquote></div>

<a name="ch20-42-fm2xml" /><a name="IXT-20-240354" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b>Namespace Prefix Declaration</b></font></td><td align="right"><i>
</i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><table width="515" border="0" cellpadding="5"><tr><td align="left"><pre>
<b class="emphasis-bold">xmlns:</b><em class="emphasis">prefix</em><b class="emphasis-bold">="</b><em class="emphasis">namespace_URI</em><b class="emphasis-bold">"</b>
</pre></td><td align="right" /></tr></table>This <a name="IXT-20-240354" />declaration associates the
namespace URI given with the prefix name given. Once it has been
declared, the prefix may qualify the current element name, attribute
names, or any other element or attribute name within the scope of the
element that declares it. Nested elements may redefine a given
prefix, using a different namespace URI if desired.
</p></div>
</div>


<hr width="684" align="left" />
<div class="navbar"><table width="684" border="0"><tr><td align="left" valign="top" width="228"><a href="ch20_02.htm"><img src="../gifs/txtpreva.gif" alt="Previous" border="0" /></a></td><td align="center" valign="top" width="228"><a href="index.htm"><img src="../gifs/txthome.gif" alt="Home" border="0" /></a></td><td align="right" valign="top" width="228"><a href="ch20_04.htm"><img src="../gifs/txtnexta.gif" alt="Next" border="0" /></a></td></tr><tr><td align="left" valign="top" width="228">20.2. Annotated Sample Documents</td><td align="center" valign="top" width="228"><a href="index/index.htm"><img src="../gifs/index.gif" alt="Book Index" border="0" /></a></td><td align="right" valign="top" width="228">20.4. Constraints</td></tr></table></div>
<hr width="684" align="left" />

<img src="../gifs/navbar.gif" usemap="#library-map" border="0" alt="Library Navigation Links" />
<p><p><font size="-1"><a href="copyrght.htm">Copyright &copy; 2002</a> O'Reilly &amp; Associates. All rights reserved.</font></p>

<map name="library-map">
<area shape="rect" coords="0,0,85,93" href="../index.htm"><area shape="rect" coords="85,0,180,98" href="../sax2/index.htm"><area shape="rect" coords="182,-1,261,100" href="index.htm"><area shape="rect" coords="263,1,384,96" href="../jxml/index.htm"><area shape="rect" coords="386,1,463,100" href="../jxslt/index.htm"><area shape="rect" coords="466,1,533,112" href="../xslt/index.htm"><area shape="rect" coords="535,-1,610,108" href="../schema/index.htm"><area shape="rect" coords="613,1,696,121" href="../pxml/index.htm">
</map>

</body></html>