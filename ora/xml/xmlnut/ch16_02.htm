<html><head><title>Schema Basics (XML in a Nutshell, 2nd Edition)</title><link rel="stylesheet" type="text/css" href="../style/style1.css" />

<meta name="DC.Creator" content="Elliotte Rusty Harold and W. Scott Means" /><meta name="DC.Format" content="text/xml" scheme="MIME" /><meta name="DC.Language" content="en-US" /><meta name="DC.Publisher" content="O'Reilly &amp; Associates, Inc." /><meta name="DC.Source" scheme="ISBN" content="0-596-00292-0" /><meta name="DC.Subject.Keyword" content="stuff" /><meta name="DC.Title" content="XML in a Nutshell, 2nd Edition" /><meta name="DC.Type" content="Text.Monograph" />

</head><body bgcolor="#ffffff">

<img src="gifs/smbanner.gif" usemap="#banner-map" border="0" alt="Book Home" /><map name="banner-map"><area shape="rect" coords="1,-2,616,66" href="index.htm" alt="XML in a Nutshell" /><area shape="rect" coords="629,-11,726,25" href="jobjects/fsearch.htm" alt="Search this book" /></map>

<div class="navbar"><table width="684" border="0"><tr><td align="left" valign="top" width="228"><a href="ch16_01.htm"><img src="../gifs/txtpreva.gif" alt="Previous" border="0" /></a></td><td align="center" valign="top" width="228" /><td align="right" valign="top" width="228"><a href="ch16_03.htm"><img src="../gifs/txtnexta.gif" alt="Next" border="0" /></a></td></tr></table></div>



<h2 class="sect1">16.2. Schema Basics</h2>

<p>This section will construct, step by step, a simple
<a name="IXT-16-240032" />schema
document representing a typical address book entry, introducing
different features of the XML Schema language as needed. <a href="ch16_02.htm">Example 16-1</a> shows a very simple well-formed XML document.
</p>

<a name="xmlnut2-CHP-16-EX-1" /><div class="example">
<h4 class="objtitle">Example 16-1. addressdoc.xml </h4>
<blockquote><pre class="code">&lt;?xml version="1.0"?&gt;
&lt;fullName&gt;Scott Means&lt;/fullName&gt;</pre></blockquote>
</div>

<p>Assuming that the <tt class="literal">fullName</tt> element can only
contain a simple string value, the schema for this document would
look like <a href="ch16_02.htm">Example 16-2</a>.
</p>

<a name="xmlnut2-CHP-16-EX-2" /><div class="example">
<h4 class="objtitle">Example 16-2. address-schema.xsd </h4>
<blockquote><pre class="code">&lt;?xml version="1.0"?&gt;
&lt;xs:schema xmlns:xs="http://www.w3.org/2001/XMLSchema"&gt;
 &lt;xs:element name="fullName" type="xs:string"/&gt;
&lt;/xs:schema&gt;</pre></blockquote>
</div>

<p>It is also common to associate the sample instance document
explicitly with the schema document. Since the
<tt class="literal">fullName</tt> element is not in any namespace, the
<tt class="literal">xsi:noNamespaceSchemaLocation</tt> attribute is used as
shown in <a href="ch16_02.htm">Example 16-3</a>.
</p>

<a name="xmlnut2-CHP-16-EX-3" /><div class="example">
<h4 class="objtitle">Example 16-3. addressdoc.xml with schema reference </h4>
<blockquote><pre class="code">&lt;?xml version="1.0"?&gt;
&lt;fullName xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:noNamespaceSchemaLocation="address-schema.xsd"&gt;Scott Means&lt;/fullName&gt;</pre></blockquote>
</div>

<p>Validating <a name="IXT-16-240033" />
<a name="IXT-16-240034" />the simple document against
its schema requires a validating XML parser that supports schemas
such as the <a name="IXT-16-240035" />
<a name="IXT-16-240036" />open source
Xerces parser from the Apache XML Project (<a href="../../../../../../xml.apache.org/xerces-j/">http://xml.apache.org/xerces-j/</a> ). This is
written in Java and includes a command-line program called
<tt class="literal">dom.DOMWriter</tt> that can be used to validate
<em class="filename">addressdoc.xml</em> like this:
</p>

<blockquote><pre class="code">% java dom.DOMWriter -V -S addressdoc.xml</pre></blockquote>

<p>Since the document is valid, <tt class="literal">DOMWriter</tt> will simply
echo the input document to standard output. An invalid document will
cause the parser to generate an error message. For instance, adding
<tt class="literal">b</tt> elements to the contents of the
<tt class="literal">fullName</tt> element violates the schema rules:
</p>

<blockquote><pre class="code">&lt;?xml version="1.0"?&gt;
&lt;fullName xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:noNamespaceSchemaLocation="address-schema.xsd"
  &gt;Scott &lt;b&gt;Means&lt;/b&gt;&lt;/fullName&gt;</pre></blockquote>

<p>If this document were validated with <tt class="literal">DOMWriter</tt>,
the following validity errors would be detected by Xerces:
</p>

<blockquote><pre class="code">[Error] addressdoc.xml:4:13: Element type "b" must be declared.
[Error] addressdoc.xml:4:31: Datatype error: In element 'fullName' : Can not 
have element children within a simple type content.</pre></blockquote>

<a name="xmlnut2-CHP-16-SECT-2.1" /><div class="sect2">
<h3 class="sect2">16.2.1. Document Organization</h3>

<p>Now <a name="IXT-16-240037" />that there is a basic schema and
a valid document from which to work, it is time to examine the
structure of a schema document and its contents. Every schema
document consists of a single root
<tt class="literal">xs:schema</tt><a name="IXT-16-240038" /> element. This
<a name="IXT-16-240039" />element contains declarations for all
elements and attributes that may appear in a valid instance document.
</p>



<a name="ch16-9-fm2xml" /><blockquote><b>TIP:</b> 
The XML elements that make up an XML schema must belong to the XML
Schema namespace (<a href="../../../../../../www.w3.org/2001/XMLSchema">http://www.w3.org/2001/XMLSchema</a>), which is
frequently associated with the <tt class="literal">xs:</tt> prefix. For the
remainder of this chapter, all schema elements will be written using
the <tt class="literal">xs:</tt> prefix to indicate that they belong to the
Schema namespace. </p>
</blockquote>

<p>Instance elements declared by top-level
elements in the schema (immediate child elements of the
<tt class="literal">xs:schema</tt> element) are considered global elements.
For example, the simple schema in <a href="ch16_02.htm">Example 16-2</a>
globally declares one element: <tt class="literal">fullName</tt>. According
to the rules of schema construction, any element that is declared
globally may appear as the root element of an instance document.
</p> <p>In this case, since only one element has been declared,
that shouldn't be a problem. But when building more
complex schemas, this side effect must be taken into consideration.
If more than one element is declared globally, a schema-valid
document may not contain the root element you expect. </p>
<p>Naming conflicts are another potential problem with multiple
global declarations. When writing schema declarations, it is an error
to declare two things of the same type at the same scope. For
instance, trying to declare two global elements called
<tt class="literal">fullName</tt> would generate an error. But declaring an
element and an attribute with the same name would not create a
conflict, because the two names are not used in the same way. </p>


</div>
<a name="xmlnut2-CHP-16-SECT-2.2" /><div class="sect2">
<h3 class="sect2">16.2.2. Annotations</h3>

<p>Now <a name="xmlnut2-IDXTERM-1372" /> <a name="xmlnut2-IDXTERM-1373" />that there is a working schema,
it's good practice to include some documentary
material about who authored it, what it was for, any copyright
restrictions, etc. Since an XML schema document is an XML document in
its own right, one simple option would be to use XML comments to
include documentary information.
</p>

<p>The major drawback to using XML
<a name="IXT-16-240040" />comments is that parsers are not
obliged to keep comments intact when parsing XML documents, and
applications have to do a lot of work to negotiate their internal
structures. This increases the likelihood that, at some point,
important documentation will be lost during an otherwise harmless
transformation or editing procedure. Encoding documentation as markup
inline with the element and type declarations they refer to opens up
endless possibilities for automatic documentation generation.
</p>

<p>To accommodate this extra information, most schema elements may
contain an optional <tt class="literal">xs:annotation</tt><a name="xmlnut2-IDXTERM-1375" /> element as their first child element.
The annotation element may then, in turn, contain any combination of
<tt class="literal">xs:documentation</tt> and <tt class="literal">xs:appinfo</tt>
elements, which are provided to contain extra human-readable and
machine-readable information, respectively.
</p>

<a name="xmlnut2-CHP-16-SECT-2.2.1" /><div class="sect3">
<h3 class="sect3">16.2.2.1. The xs:documentation element</h3>

<p>As <a name="IXT-16-240041" />a concrete example,
let's add some authorship and copyright information
to the simple schema document, as shown in <a href="ch16_02.htm">Example 16-4</a>.
</p>

<a name="xmlnut2-CHP-16-EX-4" /><div class="example">
<h4 class="objtitle">Example 16-4. address-schema.xsd with annotation </h4>
<blockquote><pre class="code">&lt;xs:schema xmlns:xs="http://www.w3.org/2001/XMLSchema"&gt;
  
 &lt;xs:annotation&gt;
  &lt;xs:documentation xml:lang="en-us"&gt;
    Simple schema example from O'Reilly's
    &lt;a href="http://www.oreilly.com/catalog/xmlnut"&gt;XML in a Nutshell.&lt;/a&gt;
    Copyright 2002 O'Reilly &amp;amp; Associates
  &lt;/xs:documentation&gt;
 &lt;/xs:annotation&gt;
  
 &lt;xs:element name="fullName" type="xs:string"/&gt;
  
&lt;/xs:schema&gt;</pre></blockquote>
</div>

<p>The <tt class="literal">xs:documentation</tt> element permits an
<tt class="literal">xml:lang</tt> attribute to identify the language of the
brief message. This attribute can also be applied to the
<tt class="literal">xs:schema</tt> element to set the default language for
the entire document. For more information about using the
<tt class="literal">xml:lang</tt> attribute, see <a href="ch05_01.htm">Chapter 5</a> and <a href="ch20_01.htm">Chapter 20</a>.
</p>

<p>Also, notice that the documentation element contains additional
markup: an <tt class="literal">a</tt> element (&#xE0; la HTML). The
<tt class="literal">xs:documentation</tt> element is allowed to contain any
well-formed XML, not just schema elements. The <a href="ch16_08.htm">Section 16.8</a> later in this
chapter explains how this can be done in your own documents.
</p>

</div>

<a name="xmlnut2-CHP-16-SECT-2.2.2" /><div class="sect3">
<h3 class="sect3">16.2.2.2. The xs:appinfo element</h3>

<p>In reality, there is little difference between the
<tt class="literal">xs:documentation</tt> element and the
<a name="IXT-16-240042" /><tt class="literal">xs:appinfo</tt> element.
Either one can contain any combination of character data or markup
the schema author wants to include. But the developers of the schema
specification intended the <tt class="literal">xs:documentation</tt>
element to contain human-readable content, while the
<tt class="literal">xs:appinfo</tt> element would contain
application-specific extension information related to a particular
schema element.
</p>

<p>For example, let's say that it is necessary to
encode context-sensitive help text with each of the elements declared
in a schema. This text might be used to generate tool-tips in a GUI
or system prompts in a voicemail system. Either way, it would be very
convenient to associate this information directly with the particular
element in question using the <tt class="literal">xs:appinfo</tt> element,
like this:
</p>

<blockquote><pre class="code">. . .
&lt;xs:element name="fullName" type="xs:string"&gt;
  &lt;xs:annotation&gt;
    &lt;xs:appinfo&gt;
      &lt;help-text&gt;Enter the person's full name.&lt;/help-text&gt;
    &lt;/xs:appinfo&gt;
  &lt;/xs:annotation&gt;
 &lt;/xs:element&gt;
. . .</pre></blockquote>

<p>Although schemas allow very sophisticated and powerful rules to be
expressed, they cannot possibly encompass every conceivable need that
a schema developer might face. That is why it is important to
remember that there is a facility that can be used to include your
own application-specific information directly within the actual
schema declarations.
</p>



<a name="ch16-14-fm2xml" /><blockquote><b>TIP:</b> 
<a name="IXT-16-240043" />Schematron is especially well-suited to
use in annotations and is capable of checking a wide variety of
conditions well beyond the bounds of XML Schema. For more information
<a name="IXTR3-179" />
<a name="IXTR3-180" />about
<a name="IXTR3-181" />Schematron, see <a href="../../../../../../www.ascc.net/xml/resource/schematron/schematron.html">http://www.ascc.net/xml/resource/schematron/schematron.html</a>.
</p>
</blockquote>

</div>
</div>
<a name="xmlnut2-CHP-16-SECT-2.3" /><div class="sect2">
<h3 class="sect2">16.2.3. Element Declarations</h3>

<p>XML <a name="IXT-16-240044" />documents are composed primarily of nested
elements, and the
<tt class="literal">xs:element</tt><a name="IXT-16-240045" /> element is one of the most often-used
declarations in a typical schema. The simple example schema already
includes a single global element declaration that tells the schema
processor that <a name="IXT-16-240046" />instance documents must consist of a
single element called <tt class="literal">fullName</tt>:
</p>

<blockquote><pre class="code">&lt;xs:element name="fullName" type="xs:string"&gt;</pre></blockquote>

<p>This declaration uses two attributes to describe the element that can
appear in the instance document: <tt class="literal">name</tt> and
<tt class="literal">type</tt>. The <tt class="literal">name</tt> attribute is
self-explanatory, but the <tt class="literal">type</tt> attribute requires
some additional explanation.
</p>

</div>
<a name="xmlnut2-CHP-16-SECT-2.4" /><div class="sect2">
<h3 class="sect2">16.2.4. Simple Types</h3>

<p>Schemas <a name="IXT-16-240047" /> <a name="IXT-16-240048" /> <a name="IXT-16-240049" />support two different types of content:
simple and complex. Simple content equates with basic data types that
are found in most modern programming languages (strings, integers,
dates, times, etc.). Simple types cannot, by definition, contain
nested element content.
</p>

<p>In the previous example, the <tt class="literal">type="xs:string"</tt>
attribute/value pair tells the schema processor that this element can
only contain simple content of the built-in type
<tt class="literal">xs:string</tt>. <a href="ch16_02.htm">Table 16-1</a> lists a
representative sample of the built-in simple types that are defined
by the schema specification. See <a href="ch21_01.htm">Chapter 21</a> for a
complete listing.
</p>

<a name="xmlnut2-CHP-16-TABLE-1" /><h4 class="objtitle">Table 16-1. Built-in simple schema types </h4><table border="1" cellpadding="3">



<tr>
<th>
<p>Type</p>
</th>
<th>
<p>Description</p>
</th>
</tr>


<tr>
<td>
<a name="IXT-16-240050" /><blockquote><pre class="code">anyURI</pre></blockquote>
</td>
<td>
<p><a name="IXT-16-240051" />A Uniform Resource Identifier
</p>
</td>
</tr>
<tr>
<td>
<a name="IXT-16-240052" /><blockquote><pre class="code">base64Binary</pre></blockquote>
</td>
<td>
<p>Base64 content-encoded binary data</p>
</td>
</tr>
<tr>
<td>
<a name="IXT-16-240053" /><blockquote><pre class="code">boolean</pre></blockquote>
</td>
<td>
<p>May contain either true or false, 0 or 1</p>
</td>
</tr>
<tr>
<td>
<a name="IXT-16-240054" /><blockquote><pre class="code">byte</pre></blockquote>
</td>
<td>
<p>A signed byte quantity &gt;= -128 and &lt;= 127</p>
</td>
</tr>
<tr>
<td>
<a name="IXT-16-240055" /><blockquote><pre class="code">dateTime</pre></blockquote>
</td>
<td>
<p>An absolute date and time value combination</p>
</td>
</tr>
<tr>
<td>
<a name="IXT-16-240056" /><blockquote><pre class="code">duration</pre></blockquote>
</td>
<td>
<p>A relative amount of time, expressed in units of years, months, days,
hours, etc
</p>
</td>
</tr>
<tr>
<td>
<a name="IXT-16-240057" /><a name="IXT-16-240058" /><a name="IXT-16-240059" /><a name="IXT-16-240060" /><a name="IXT-16-240061" /><a name="IXT-16-240062" /><a name="IXT-16-240063" /><a name="IXT-16-240064" /><blockquote><pre class="code">ID, IDREF, IDREFS, 
ENTITY, ENTITIES, NOTATION, 
NMTOKEN, NMTOKENS</pre></blockquote>
</td>
<td>
<p>Same values as defined in the attribute declaration section of the
XML 1.0 recommendation
</p>
</td>
</tr>
<tr>
<td>
<a name="IXT-16-240065" /><blockquote><pre class="code">integer</pre></blockquote>
</td>
<td>
<p>Any positive or negative counting number</p>
</td>
</tr>
<tr>
<td>
<a name="IXT-16-240066" /><blockquote><pre class="code">language</pre></blockquote>
</td>
<td>
<p>May contain same values as <tt class="literal">xml:lang</tt> attribute from
XML 1.0 recommendation
</p>
</td>
</tr>
<tr>
<td>
<a name="IXT-16-240067" /><blockquote><pre class="code">Name</pre></blockquote>
</td>
<td>
<p>An XML name</p>
</td>
</tr>
<tr>
<td>
<a name="IXT-16-240068" /><blockquote><pre class="code">normalizedString</pre></blockquote>
</td>
<td>
<p>String with newline, tab, and carriage-return characters normalized
to spaces
</p>
</td>
</tr>
<tr>
<td>
<a name="IXT-16-240069" /><blockquote><pre class="code">string</pre></blockquote>
</td>
<td>
<p>Unicode string</p>
</td>
</tr>
<tr>
<td>
<a name="IXT-16-240070" /><blockquote><pre class="code">token</pre></blockquote>
</td>
<td>
<p>Same as <tt class="literal">normalizedString</tt> with multiple spaces
collapsed and leading and trailing spaces removed
</p>
</td>
</tr>

</table><p>

<p>Since attribute values cannot contain elements, attributes must
always be declared with simple types. Also, an element that is
declared to have a simple type cannot have any attributes. This means
that if an attribute must be added to the <tt class="literal">fullName</tt>
element, some fairly significant changes to the element declaration
are required.
</p>

</div>
<a name="xmlnut2-CHP-16-SECT-2.5" /><div class="sect2">
<h3 class="sect2">16.2.5. Attribute Declarations</h3>

<p>To <a name="IXT-16-240071" />
<a name="IXT-16-240072" />make the
<tt class="literal">fullName</tt> element more informative, it would be
nice to add a language attribute to provide a hint as to how it
should be pronounced. Although adding an attribute to an element
sounds like a fairly simple task, it is complicated by the fact that
elements with simple types (like <tt class="literal">xs:string</tt>) cannot
have attribute values.
</p>

<p>Attributes are declared using the
<tt class="literal">xs:attribute</tt><a name="IXT-16-240073" /> element. Attributes may be declared
globally by top-level <tt class="literal">xs:attribute</tt> elements (which
may be referenced from anywhere within the schema) or locally as part
of a complex type definition that is associated with a particular
element.
</p>

<p>To incorporate a <tt class="literal">language</tt> attribute into the
<tt class="literal">fullName</tt> element declaration, a new complex type
based on the built-in <tt class="literal">xs:string</tt> type must be
created. To do this, three new schema elements must be used:
<tt class="literal">xs:complexType</tt><a name="IXT-16-240074" />,
<tt class="literal">xs:simpleContent</tt><a name="IXT-16-240075" />, and
<tt class="literal">xs:extension</tt><a name="IXT-16-240076" />:
</p>

<blockquote><pre class="code">&lt;xs:element name="fullName"&gt;
  
  &lt;xs:complexType&gt;
    &lt;xs:simpleContent&gt;
      &lt;xs:extension base="xs:string"&gt;
        &lt;xs:attribute name="language" type="xs:language"/&gt;
      &lt;/xs:extension&gt;
    &lt;/xs:simpleContent&gt;
  &lt;/xs:complexType&gt;
  
&lt;/xs:element&gt;</pre></blockquote>

<p>This declaration no longer has a <tt class="literal">type</tt> attribute.
Instead it has an <tt class="literal">xs:complexType</tt> child element.
This element tells the schema processor that the
<tt class="literal">fullName</tt> element may have attributes, but the
<tt class="literal">xs:simpleContent</tt> element tells the processor that
the content of the element is a simple type. To specify what type of
simple content, it uses the <tt class="literal">base</tt> attribute of the
<tt class="literal">xs:extension</tt> element to
<em class="emphasis">derive</em><a name="IXT-16-240077" /> <a name="IXT-16-240078" />a new type
from the built-in <tt class="literal">xs:string</tt> type. The
<tt class="literal">xs:attribute</tt> element within the
<tt class="literal">xs:extension</tt> element indicates that this derived
type may have an attribute called <tt class="literal">language</tt> that
contains values conforming to the built-in simple type
<tt class="literal">xs:language</tt> (mentioned in <a href="ch16_02.htm">Table 16-1</a>). Type derivation is an important part of
schema creation and will be covered in more detail later in this
chapter.
</p>

<a name="xmlnut2-CHP-16-SECT-2.5.1" /><div class="sect3">
<h3 class="sect3">16.2.5.1. Attribute groups</h3>

<p>In DTDs, parameter entities are used to encapsulate repeated groups
of attribute declarations that are shared between different element
types. Schemas provide the same functionality in a more formal
fashion using the
<tt class="literal">xs:attributeGroup</tt><a name="IXT-16-240079" /> element.
</p>

<p>An <a name="IXT-16-240080" />attribute group is simply a named group of
<tt class="literal">xs:attribute</tt> declarations (or references to other
attribute groups) that can be referenced from within a
<a name="IXT-16-240081" />complex type definition. The
attribute group must be declared as a global element with a unique
<tt class="literal">name</tt> attribute. The group is referenced within a
complex type definition by including another
<tt class="literal">xs:attributeGroup</tt> element with a
<tt class="literal">ref</tt> attribute that matches the desired top-level
attribute group name.
</p>

<p>Within the <tt class="literal">fullName</tt> schema, an attribute group
could be used to create a package of attributes related to a
person's nationality. This package of attributes
could be used on several elements, including the
<tt class="literal">fullName</tt> element, without repeating the same
attribute declarations. Then, if it were later necessary to extend
this collection of attributes, it could be done in a single location:
</p>

<blockquote><pre class="code">&lt;xs:element name="fullName"&gt;
. . .
      &lt;xs:extension base="xs:string"&gt;
        &lt;xs:attributeGroup ref="nationality"/&gt;
      &lt;/xs:extension&gt;
. . .
&lt;/xs:element&gt;
  
&lt;xs:attributeGroup name="nationality"&gt;
  &lt;xs:attribute name="language" type="xs:language"/&gt;
&lt;/xs:attributeGroup&gt;</pre></blockquote>

</div>
</div>


<hr width="684" align="left" />
<div class="navbar"><table width="684" border="0"><tr><td align="left" valign="top" width="228"><a href="ch16_01.htm"><img src="../gifs/txtpreva.gif" alt="Previous" border="0" /></a></td><td align="center" valign="top" width="228"><a href="index.htm"><img src="../gifs/txthome.gif" alt="Home" border="0" /></a></td><td align="right" valign="top" width="228"><a href="ch16_03.htm"><img src="../gifs/txtnexta.gif" alt="Next" border="0" /></a></td></tr><tr><td align="left" valign="top" width="228">16. XML Schemas</td><td align="center" valign="top" width="228"><a href="index/index.htm"><img src="../gifs/index.gif" alt="Book Index" border="0" /></a></td><td align="right" valign="top" width="228">16.3. Working with Namespaces</td></tr></table></div>
<hr width="684" align="left" />

<img src="../gifs/navbar.gif" usemap="#library-map" border="0" alt="Library Navigation Links" />
<p><p><font size="-1"><a href="copyrght.htm">Copyright &copy; 2002</a> O'Reilly &amp; Associates. All rights reserved.</font></p>

<map name="library-map">
<area shape="rect" coords="0,0,85,93" href="../index.htm"><area shape="rect" coords="85,0,180,98" href="../sax2/index.htm"><area shape="rect" coords="182,-1,261,100" href="index.htm"><area shape="rect" coords="263,1,384,96" href="../jxml/index.htm"><area shape="rect" coords="386,1,463,100" href="../jxslt/index.htm"><area shape="rect" coords="466,1,533,112" href="../xslt/index.htm"><area shape="rect" coords="535,-1,610,108" href="../schema/index.htm"><area shape="rect" coords="613,1,696,121" href="../pxml/index.htm">
</map>

</body></html>