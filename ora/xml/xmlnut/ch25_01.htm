<html><head><title>SAX Reference (XML in a Nutshell, 2nd Edition)</title><link rel="stylesheet" type="text/css" href="../style/style1.css" />

<meta name="DC.Creator" content="Elliotte Rusty Harold and W. Scott Means" /><meta name="DC.Format" content="text/xml" scheme="MIME" /><meta name="DC.Language" content="en-US" /><meta name="DC.Publisher" content="O'Reilly &amp; Associates, Inc." /><meta name="DC.Source" scheme="ISBN" content="0-596-00292-0" /><meta name="DC.Subject.Keyword" content="stuff" /><meta name="DC.Title" content="XML in a Nutshell, 2nd Edition" /><meta name="DC.Type" content="Text.Monograph" />

</head><body bgcolor="#ffffff">

<img src="gifs/smbanner.gif" usemap="#banner-map" border="0" alt="Book Home" /><map name="banner-map"><area shape="rect" coords="1,-2,616,66" href="index.htm" alt="XML in a Nutshell" /><area shape="rect" coords="629,-11,726,25" href="jobjects/fsearch.htm" alt="Search this book" /></map>

<div class="navbar"><table width="684" border="0"><tr><td align="left" valign="top" width="228"><a href="ch24_02.htm"><img src="../gifs/txtpreva.gif" alt="Previous" border="0" /></a></td><td align="center" valign="top" width="228" /><td align="right" valign="top" width="228"><a href="ch25_02.htm"><img src="../gifs/txtnexta.gif" alt="Next" border="0" /></a></td></tr></table></div>


<h1 class="chapter">Chapter 25. SAX Reference</h1>
<div class="htmltoc"><h4 class="tochead">Contents:</h4><p>
<a href="ch25_01.htm">The org.xml.sax Package</a><br />
<a href="ch25_02.htm">The org.xml.sax.helpers Package</a><br />
<a href="ch25_03.htm">SAX Features and Properties</a><br />
<a href="ch25_04.htm">The org.xml.sax.ext Package</a><br /></p></div><p>SAX, <a name="xmlnut2-IDXTERM-2479" />the Simple
API for XML, is a straightforward, event-based API used to parse XML
documents. <a name="IXT-25-240966" />David Megginson, SAX's
original author, placed SAX in the public domain. SAX is bundled with
all parsers that implement the API, including Xerces, MSXML, Crimson,
the Oracle XML Parser for Java, and &#xC6;lfred. However, you
can also get it and the full source code from
<a href="../../../../../../sax.sourceforge.net/">http://sax.sourceforge.net/</a>.
</p><p>SAX was originally defined as a Java API and is intended primarily
for parsers written in Java, so this chapter will focus on its Java
implementation. However, its port to other object-oriented languages,
such as C++, Python, Perl, and Eiffel, is common and usually quite
similar.
</p><a name="ch25-3-fm2xml" /><blockquote><b>TIP:</b> 
This <a name="IXT-25-240967" />chapter
covers SAX2 exclusively. In 2002, all major parsers that support SAX
support SAX2. The major change from SAX1 to SAX2 was the addition of
namespace support. This addition necessitated changing the names and
signatures of almost every method and class in SAX. The old SAX1
methods and classes are still available, but they're
now deprecated and shouldn't be used.
</p>
</blockquote><div class="sect1"><a name="xmlnut2-CHP-25-SECT-1" />
<h2 class="sect1">25.1. The org.xml.sax Package</h2>

<p>The <a name="xmlnut2-IDXTERM-2482" /><tt class="literal">org.xml.sax</tt>
<a name="xmlnut2-IDXTERM-2483" />package contains the core interfaces
and classes that comprise the Simple API for XML.
</p>

<a name="ch25-5-fm2xml" /><a name="IXT-25-240968" /><a name="IXT-25-240969" /><a name="IXT-25-240970" /><a name="IXT-25-240971" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b>The Attributes Interface</b></font></td><td align="right"><i></i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><table width="515" border="0" cellpadding="5"><tr><td align="left" /><td align="right" /></tr></table><p>An <a name="IXT-25-240968" />object <a name="IXT-25-240969" />that implements the
<tt class="literal">Attributes</tt> interface represents a list of
attributes on a start-tag. The order of attributes in the list is not
guaranteed to match the order in the document itself.
<tt class="literal">Attributes</tt> objects are passed as arguments to the
<a name="IXT-25-240970" /><tt class="literal">startElement( )</tt> method
of <tt class="literal">ContentHandler</tt>. You can access particular
<a name="IXT-25-240971" />attributes
in three ways:
</p><ul><li>
<p>By number </p>
</li><li>
<p>By namespace URI and local name </p>
</li><li>
<p>By qualified (prefixed) name</p>
</li></ul><p>This list does not include namespace declaration attributes
(<tt class="literal">xmlns</tt> and
<tt class="literal">xmlns:</tt><em class="replaceable"><tt>prefix</tt></em>) unless
the
<em class="emphasis">http://xml.org/sax/features/namespace-prefixes</em>
feature is true. It is false by default.
</p><p>If the <em class="emphasis">namespace-prefixes</em> feature is false,
qualified name access may not be available; if the
<em class="emphasis">http://xml.org/sax/features/namespaces</em> feature
is false, local names and namespace URIs may not be available:
</p><blockquote><pre class="code">package org.xml.sax;

public interface <b class="emphasis-bold">Attributes</b> {

  public int    <b class="emphasis-bold">getLength</b>( );
  public String <b class="emphasis-bold">getURI</b>(int <em class="replaceable"><tt>index</tt></em>);
  public String <b class="emphasis-bold">getLocalName</b>(int <em class="replaceable"><tt>index</tt></em>);
  public String <b class="emphasis-bold">getQName</b>(int <em class="replaceable"><tt>index</tt></em>);
  public int    <b class="emphasis-bold">getIndex</b>(String <em class="replaceable"><tt>uri</em>, String <em class="replaceable">localName</tt></em>);
  public int    <b class="emphasis-bold">getIndex</b>(String <em class="replaceable"><tt>qualifiedName</tt></em>);
  public String <b class="emphasis-bold">getType</b>(int <em class="replaceable"><tt>index</tt></em>);
  public String <b class="emphasis-bold">getType</b>(String <em class="replaceable"><tt>uri</em>, String <em class="replaceable">localName</tt></em>);
  public String <b class="emphasis-bold">getType</b>(String <em class="replaceable"><tt>qualifiedName</tt></em>);
  public String <b class="emphasis-bold">getValue</b>(String <em class="replaceable"><tt>uri</em>, String <em class="replaceable">localName</tt></em>);
  public String <b class="emphasis-bold">getValue</b>(String <em class="replaceable"><tt>qualifiedName</tt></em>);
  public String <b class="emphasis-bold">getValue</b>(int <em class="replaceable"><tt>index</tt></em>);

}</pre></blockquote></div>

<a name="ch25-6-fm2xml" /><a name="IXT-25-240972" /><a name="IXT-25-240973" /><a name="IXT-25-240974" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b>The ContentHandler Interface </b></font></td><td align="right"><i></i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><table width="515" border="0" cellpadding="5"><tr><td align="left" /><td align="right" /></tr></table><p><tt class="literal">ContentHandler</tt> <a name="IXT-25-240972" />is
<a name="IXT-25-240973" />the key piece of SAX. Almost every SAX
program needs to use this interface.
<tt class="literal">ContentHandler</tt> is a callback interface. An
instance of this interface is passed to the parser via the
<a name="IXT-25-240974" /><tt class="literal">setContentHandler( )</tt>
method of <tt class="literal">XMLReader</tt>. As the parser reads the
document, it invokes the methods in its
<tt class="literal">ContentHandler</tt> to tell the program
what's in the document:
</p><blockquote><pre class="code">package org.xml.sax;

public interface <b class="emphasis-bold">ContentHandler</b> {

  public void <b class="emphasis-bold">setDocumentLocator</b>(Locator <em class="replaceable"><tt>locator</tt></em>);
  public void <b class="emphasis-bold">startDocument</b>( ) throws SAXException;
  public void <b class="emphasis-bold">endDocument</b>( ) throws SAXException;
  public void <b class="emphasis-bold">startPrefixMapping</b>(String <em class="replaceable"><tt>prefix</em>, String <em class="replaceable">uri</tt></em>)
   throws SAXException;
  public void <b class="emphasis-bold">endPrefixMapping</b>(String <em class="replaceable"><tt>prefix</tt></em>) throws SAXException;
  public void <b class="emphasis-bold">startElement</b>(String <em class="replaceable"><tt>namespaceURI</em>, String <em class="replaceable">localName</tt></em>,
   String <em class="replaceable"><tt>qualifiedName</em>, Attributes <em class="replaceable">atts</tt></em>) throws SAXException;
  public void <b class="emphasis-bold">endElement</b>(String <em class="replaceable"><tt>namespaceURI</em>, String <em class="replaceable">localName</tt></em>,
   String <em class="replaceable"><tt>qualifiedName</tt></em>) throws SAXException;
  public void <b class="emphasis-bold">characters</b>(char[] <em class="replaceable"><tt>text</em>, int <em class="replaceable">start</em>, int <em class="replaceable">length</tt></em>)
   throws SAXException;
  public void <b class="emphasis-bold">ignorableWhitespace</b>(char[] <em class="replaceable"><tt>text</em>, int <em class="replaceable">start</em>, int <em class="replaceable">length</tt></em>)
   throws SAXException;
  public void <b class="emphasis-bold">processingInstruction</b>(String <em class="replaceable"><tt>target</em>, String <em class="replaceable">data</tt></em>)
   throws SAXException;
  public void <b class="emphasis-bold">skippedEntity</b>(String <em class="replaceable"><tt>name</tt></em>) throws SAXException;

}</pre></blockquote></div>

<a name="ch25-7-fm2xml" /><a name="IXT-25-240975" /><a name="IXT-25-240976" /><a name="IXT-25-240977" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b>The DTDHandler Interface</b></font></td><td align="right"><i></i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><table width="515" border="0" cellpadding="5"><tr><td align="left" /><td align="right" /></tr></table><p>By <a name="IXT-25-240975" />passing <a name="IXT-25-240976" />an instance of the
<tt class="literal">DTDHandler</tt> interface to the
<a name="IXT-25-240977" /><tt class="literal">setDTDHandler( )</tt> method
of <tt class="literal">XMLReader</tt>, you can receive notification of
notation and unparsed entity declarations in the DTD. You can store
this information and use it later to retrieve information about the
unparsed entities you encounter while reading the document:
</p><blockquote><pre class="code">package org.xml.sax;

public interface <b class="emphasis-bold">DTDHandler</b> {

  public void <b class="emphasis-bold">notationDecl</b>(String <em class="replaceable"><tt>name</em>, String <em class="replaceable">publicID</em>, String <em class="replaceable">systemID</tt></em>)
   throws SAXException;
  public void <b class="emphasis-bold">unparsedEntityDecl</b>(String <em class="replaceable"><tt>name</em>, String <em class="replaceable">publicID</tt></em>,
   String <em class="replaceable"><tt>systemID</em>, String <em class="replaceable">notationName</tt></em>) throws SAXException;

}</pre></blockquote></div>

<a name="ch25-8-fm2xml" /><a name="IXT-25-240978" /><a name="IXT-25-240979" /><a name="IXT-25-240980" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b>The EntityResolver Interface</b></font></td><td align="right"><i></i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><table width="515" border="0" cellpadding="5"><tr><td align="left" /><td align="right" /></tr></table><p>By <a name="IXT-25-240978" />passing
<a name="IXT-25-240979" />an instance of the
<tt class="literal">EntityResolver</tt> interface to the
<a name="IXT-25-240980" /><tt class="literal">setEntityResolver( )</tt>
method of <tt class="literal">XMLReader</tt>, you can intercept parser
requests for external entities, such as the external DTD subset or
external parameter entities, and redirect those requests in order to
substitute different entities. For example, you could replace a
reference to a remote copy of a standard DTD with a local one or find
the sources for particular public IDs in a catalog. The interface is
also useful for applications that use URI types other than URLs:
</p><blockquote><pre class="code">package org.xml.sax;

public interface <b class="emphasis-bold">EntityResolver</b> {

  public InputSource <b class="emphasis-bold">resolveEntity</b>(String <em class="replaceable"><tt>publicID</em>, String <em class="replaceable">systemID</tt></em>)
   throws SAXException, IOException;

}</pre></blockquote></div>

<a name="ch25-9-fm2xml" /><a name="IXT-25-240981" /><a name="IXT-25-240982" /><a name="IXT-25-240983" /><a name="IXT-25-240984" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b>The ErrorHandler Interface</b></font></td><td align="right"><i></i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><table width="515" border="0" cellpadding="5"><tr><td align="left" /><td align="right" /></tr></table><p>By <a name="IXT-25-240981" />passing
<a name="IXT-25-240982" />an instance of the
<a name="IXT-25-240983" /><tt class="literal">ErrorHandler</tt>
interface to the <a name="IXT-25-240984" /><tt class="literal">setErrorHandler( )</tt>
method of <tt class="literal">XMLReader</tt>, you can provide custom
handling for particular classes of errors detected by the parser. For
example, you can choose whether to stop parsing when a validity error
is detected. The <tt class="literal">SAXParseException</tt> passed to each
of the three methods in this interface provides details about the
specific cause and location of the error:
</p><blockquote><pre class="code">package org.xml.sax;

public interface <b class="emphasis-bold">ErrorHandler</b> {

  public void <b class="emphasis-bold">warning</b>(SAXParseException <em class="replaceable"><tt>exception</tt></em>) throws SAXException;
  public void <b class="emphasis-bold">error</b>(SAXParseException <em class="replaceable"><tt>exception</tt></em>) throws SAXException;
  public void <b class="emphasis-bold">fatalError</b>(SAXParseException <em class="replaceable"><tt>exception</tt></em>)
   throws SAXException;

}</pre></blockquote><p>Warnings represent possible problems noticed by the parser that are
not technically violations of XML's well-formedness
or validity rules. For instance, a parser might issue a warning if an
<tt class="literal">xml:lang</tt> attribute's value was
not a legal ISO-639 language code. The most common kind of error is a
validity problem. The parser should report it, but it should also
continue processing. A fatal error violates well-formedness. The
parser should not continue parsing after reporting such an error.
</p></div>

<a name="ch25-10-fm2xml" /><a name="IXT-25-240985" /><a name="IXT-25-240986" /><a name="IXT-25-240987" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b>The Locator Interface</b></font></td><td align="right"><i></i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><table width="515" border="0" cellpadding="5"><tr><td align="left" /><td align="right" /></tr></table><p>Unlike <a name="IXT-25-240985" />most <a name="IXT-25-240986" />other interfaces in the
<tt class="literal">org.xml.sax</tt> package, the
<tt class="literal">Locator</tt> interface does not have to be implemented.
Instead, the parser has the option to provide an implementation. If
it does so, it passes its implementation to the
<a name="IXT-25-240987" /><tt class="literal">setDocumentLocator( )</tt>
method in your <tt class="literal">ContentHandler</tt> instance before it
calls <tt class="literal">startDocument( )</tt>. You can save a reference
to this object in a field in your <tt class="literal">ContentHandler</tt>
class, like this:
</p><blockquote><pre class="code">private Locator locator;

public void setDocumentLocator(Locator locator) {
  this.locator = locator;
}</pre></blockquote><p>Once you've found the locator, you can then use it
inside any other <tt class="literal">ContentHandler</tt> method, such as
<tt class="literal">startElement( )</tt> or <tt class="literal">characters(
)</tt>, to determine in exactly which document and at which line
and column the event took place. For instance, the locator allows you
to determine that a particular start-tag began on the third column of
the document's seventeenth line at the URL
<em class="emphasis">http://www.slashdot.org/slashdot.xml</em>:
</p><blockquote><pre class="code">package org.xml.sax;

public interface <b class="emphasis-bold">Locator</b> {

  public String <b class="emphasis-bold">getPublicId</b>( );
  public String <b class="emphasis-bold">getSystemId</b>( );
  public int    <b class="emphasis-bold">getLineNumber</b>( );
  public int    <b class="emphasis-bold">getColumnNumber</b>( );

}</pre></blockquote></div>

<a name="ch25-11-fm2xml" /><a name="IXT-25-240988" /><a name="IXT-25-240989" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b>The XMLFilter Interface</b></font></td><td align="right"><i></i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><table width="515" border="0" cellpadding="5"><tr><td align="left" /><td align="right" /></tr></table><p>An <a name="IXT-25-240988" /><tt class="literal">XMLFilter</tt>
<a name="IXT-25-240989" />is an <tt class="literal">XMLReader</tt>
that obtains its events from another parent
<tt class="literal">XMLReader</tt>, rather than reading it from a text
source such as <tt class="literal">InputStream</tt>. Filters can sit
between the original source XML and the application and modify data
in the original source before passing it to the application.
Implementing this interface directly is unusual. It is almost always
much easier to use the more complete
<tt class="literal">org.xml.sax.helpers.XMLFilterImpl</tt> class instead.
</p><blockquote><pre class="code">package org.xml.sax;

public interface <b class="emphasis-bold">XMLFilter</b> extends XMLReader {

  public void      <b class="emphasis-bold">setParent</b>(XMLReader <em class="replaceable"><tt>parent</tt></em>);
  public XMLReader <b class="emphasis-bold">getParent</b>( );

}</pre></blockquote></div>

<a name="ch25-12-fm2xml" /><a name="IXT-25-240990" /><a name="IXT-25-240991" /><a name="IXT-25-240992" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b>The XMLReader Interface</b></font></td><td align="right"><i></i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><table width="515" border="0" cellpadding="5"><tr><td align="left" /><td align="right" /></tr></table><p>The <a name="IXT-25-240990" /><tt class="literal">XMLReader</tt>
<a name="IXT-25-240991" />interface represents the
<a name="IXT-25-240992" />XML parser that reads XML
documents. You generally do not implement this interface yourself.
Instead, use the
<tt class="literal">org.xml.sax.helpers.XMLReaderFactory</tt> class to
build a parser-specific implementation. Then use this
parser's various setter methods to configure the
parsing process. Finally, invoke the <tt class="literal">parse( )</tt>
method to read the document, while calling back to methods in your
own implementations of <tt class="literal">ContentHandler</tt>,
<tt class="literal">ErrorHandler</tt>, <tt class="literal">EntityResolver</tt>,
and <tt class="literal">DTDHandler</tt> as the document is read:
</p><blockquote><pre class="code">package org.xml.sax;

public interface XMLReader {

  public boolean <b class="emphasis-bold">getFeature</b>(String <em class="replaceable"><tt>name</tt></em>)
   throws SAXNotRecognizedException, SAXNotSupportedException;
  public void    <b class="emphasis-bold">setFeature</b>(String <em class="replaceable"><tt>name</em>, boolean <em class="replaceable">value</tt></em>)
   throws SAXNotRecognizedException, SAXNotSupportedException;
  public Object  <b class="emphasis-bold">getProperty</b>(String <em class="replaceable"><tt>name</tt></em>)
   throws SAXNotRecognizedException, SAXNotSupportedException;

  public void    <b class="emphasis-bold">setProperty</b>(String <em class="replaceable"><tt>name</em>, Object <em class="replaceable">value</tt></em>)
   throws SAXNotRecognizedException, SAXNotSupportedException;
  public void           <b class="emphasis-bold">setEntityResolver</b>(EntityResolver <em class="replaceable"><tt>resolver</tt></em>);
  public EntityResolver <b class="emphasis-bold">getEntityResolver</b>( );
  public void           <b class="emphasis-bold">setDTDHandler</b>(DTDHandler <em class="replaceable"><tt>handler</tt></em>);
  public DTDHandler     <b class="emphasis-bold">getDTDHandler</b>( );
  public void           <b class="emphasis-bold">setContentHandler</b>(ContentHandler <em class="replaceable"><tt>handler</tt></em>);
  public ContentHandler <b class="emphasis-bold">getContentHandler</b>( );
  public void           <b class="emphasis-bold">setErrorHandler</b>(ErrorHandler <em class="replaceable"><tt>handler</tt></em>);
  public ErrorHandler   <b class="emphasis-bold">getErrorHandler</b>( );

  public void <b class="emphasis-bold">parse</b>(InputSource <em class="replaceable"><tt>input</tt></em>) throws IOException, SAXException;
  public void <b class="emphasis-bold">parse</b>(String <em class="replaceable"><tt>systemID</tt></em>) throws IOException, SAXException;

}</pre></blockquote></div>

<a name="ch25-13-fm2xml" /><a name="IXT-25-240993" /><a name="IXT-25-240994" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b>The InputSource Class</b></font></td><td align="right"><i></i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><table width="515" border="0" cellpadding="5"><tr><td align="left" /><td align="right" /></tr></table><p>The <a name="IXT-25-240993" /><tt class="literal">InputSource</tt>
<a name="IXT-25-240994" />class is an abstraction of a data source
from which the raw bytes of an XML document are read. It can wrap a
system ID, a public ID, an <tt class="literal">InputStream</tt>, or a
<tt class="literal">Reader</tt>. When given an
<tt class="literal">InputSource</tt>, the parser tries to read from the
<tt class="literal">Reader</tt>. If the <tt class="literal">InputSource</tt> does
not have a <tt class="literal">Reader</tt>, the parser will try to read
from the <tt class="literal">InputStream</tt> using the specified encoding.
If no encoding is specified, then it will try to autodetect the
encoding by reading the XML declaration. Finally, if neither a
<tt class="literal">Reader</tt> nor an <tt class="literal">InputStream</tt> has
been set, then the parser will open a connection to the URL given by
the system ID.
</p><blockquote><pre class="code">package org.xml.sax;

public class <b class="emphasis-bold">InputSource</b> {

    public <b class="emphasis-bold">InputSource</b>( );
    public <b class="emphasis-bold">InputSource</b>(String <em class="replaceable"><tt>systemID</tt></em>);
    public <b class="emphasis-bold">InputSource</b>(InputStream <em class="replaceable"><tt>byteStream</tt></em>);
    public <b class="emphasis-bold">InputSource</b>(Reader <em class="replaceable"><tt>reader</tt></em>);

    public void        <b class="emphasis-bold">setPublicId</b>(String <em class="replaceable"><tt>publicID</tt></em>);
    public String      <b class="emphasis-bold">getPublicId</b>( );
    public void        <b class="emphasis-bold">setSystemId</b>(String <em class="replaceable"><tt>systemID</tt></em>);
    public String      <b class="emphasis-bold">getSystemId</b>( );
    public void        <b class="emphasis-bold">setByteStream</b>(InputStream <em class="replaceable"><tt>byteStream</tt></em>);
    public InputStream <b class="emphasis-bold">getByteStream</b>( );
    public void        <b class="emphasis-bold">setEncoding</b>(String <em class="replaceable"><tt>encoding</tt></em>);
    public String      <b class="emphasis-bold">getEncoding</b>( );
    public void        <b class="emphasis-bold">setCharacterStream</b>(Reader <em class="replaceable"><tt>reader</tt></em>);
    public Reader      <b class="emphasis-bold">getCharacterStream</b>( );

}</pre></blockquote></div>

<a name="ch25-14-fm2xml" /><a name="IXT-25-240995" /><a name="IXT-25-240996" /><a name="xmlnut2-IDXTERM-2513" /><a name="IXT-25-240997" /><a name="IXT-25-240998" /><a name="IXT-25-240999" /><a name="IXT-25-241000" /><a name="IXT-25-241001" /><a name="IXT-25-241002" /><a name="IXT-25-241003" /><a name="IXT-25-241004" /><a name="IXT-25-241005" /><a name="IXT-25-241006" /><a name="IXTR3-252" /><a name="IXTR3-253" /><a name="IXTR3-254" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b>The SAXExceptions Class</b></font></td><td align="right"><i></i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><table width="515" border="0" cellpadding="5"><tr><td align="left" /><td align="right" /></tr></table><p><a name="IXT-25-240995" />Most <a name="IXT-25-240996" />exceptions <a name="xmlnut2-IDXTERM-2513" />thrown
<a name="IXT-25-240997" />by
SAX methods are instances of the <tt class="literal">SAXException</tt>
class or one of its subclasses. The single exception to this rule is
the <a name="IXT-25-240998" /><tt class="literal">parse( )</tt> method of
<tt class="literal">XMLReader</tt>, which may throw a raw
<tt class="literal">IOException</tt> if a purely I/O-related error occurs,
for example, if a socket is broken before the parser finishes reading
the document from the network.
</p><p>Besides the usual exception methods, such as <tt class="literal">getMessage(
)</tt> and <tt class="literal">printStackTrace( ),</tt> that
<tt class="literal">SAXException</tt> inherits from or overrides in its
superclasses, <tt class="literal">SAXException</tt> adds a
<a name="IXT-25-240999" /><tt class="literal">getException( )</tt> method
to return the nested exception that caused the
<tt class="literal">SAXException</tt> to be thrown in the first place:
</p><blockquote><pre class="code">package org.xml.sax;

public class <b class="emphasis-bold">SAXException</b> extends Exception {

    public <b class="emphasis-bold">SAXException</b>(String <em class="replaceable"><tt>message</tt></em>);
    public <b class="emphasis-bold">SAXException</b>(Exception <em class="replaceable"><tt>ex</tt></em>);
    public <b class="emphasis-bold">SAXException</b>(String <em class="replaceable"><tt>message</em>, Exception <em class="replaceable">ex</tt></em>);

    public String    <b class="emphasis-bold">getMessage</b>( );
    public Exception <b class="emphasis-bold">getException</b>( );
    public String    <b class="emphasis-bold">toString</b>( );

}</pre></blockquote><blockquote><a name="IXT-25-241000" /><a name="IXT-25-241001" /><a name="IXT-25-241002" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b>SAXParseException</b></font></td><td align="right"><i></i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><table width="515" border="0" cellpadding="5"><tr><td align="left" /><td align="right" /></tr></table><p>If the parser detects <a name="IXT-25-241000" />a <a name="IXT-25-241001" />well-formedness
<a name="IXT-25-241002" />error while reading a document, it throws
a <tt class="literal">SAXParseException</tt>, a subclass of
<tt class="literal">SAXException</tt>.
<tt class="literal">SAXParseException</tt> s are also passed as arguments to
the methods of the <tt class="literal">ErrorHandler</tt> interface, where
you can decide whether you want to throw them.
</p><p>Besides the methods it inherits from its superclasses, this class
adds methods to get the line number, column number, system ID, and
public ID of the document where the error was detected:
</p><blockquote><pre class="code">package org.xml.sax;

public class <b class="emphasis-bold">SAXParseException</b> extends SAXException {

  public <b class="emphasis-bold">SAXParseException</b>(String <em class="replaceable"><tt>message</em>, Locator <em class="replaceable">locator</tt></em>);
  public <b class="emphasis-bold">SAXParseException</b>(String <em class="replaceable"><tt>message</em>, Locator <em class="replaceable">locator</tt></em>, 
   Exception <em class="replaceable"><tt>e</tt></em>);
  public <b class="emphasis-bold">SAXParseException</b>(String <em class="replaceable"><tt>message</em>, String <em class="replaceable">publicID</tt></em>,
   String systemID, int lineNumber, int columnNumber);
  public <b class="emphasis-bold">SAXParseException</b>(String <em class="replaceable"><tt>message</em>, String <em class="replaceable">publicID</tt></em>,
   String <em class="replaceable"><tt>systemID</em>, int <em class="replaceable">lineNumber</em>, int <em class="replaceable">columnNumber</em>, Exception <em class="replaceable">e</tt></em>);

  public String <b class="emphasis-bold">getPublicId</b>( );
  public String <b class="emphasis-bold">getSystemId</b>( );
  public int    <b class="emphasis-bold">getLineNumber</b>( );
  public int    <b class="emphasis-bold">getColumnNumber</b>( );

}</pre></blockquote></div></blockquote><blockquote><a name="IXT-25-241003" /><a name="IXT-25-241004" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b>SAXNotRecognizedException</b></font></td><td align="right"><i></i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><table width="515" border="0" cellpadding="5"><tr><td align="left" /><td align="right" /></tr></table><p>A <a name="IXT-25-241003" />
<a name="IXT-25-241004" /><tt class="literal">SAXNotRecognizedException</tt>
is thrown if you attempt to set a property or feature the parser does
not recognize. Besides the constructors, all its methods are
inherited from superclasses:
</p><blockquote><pre class="code">package org.xml.sax;

public class <b class="emphasis-bold">SAXNotRecognizedException</b> extends SAXException {

  public <b class="emphasis-bold">SAXNotRecognizedException</b>( );
  public <b class="emphasis-bold">SAXNotRecognizedException</b>(String <em class="replaceable"><tt>message</tt></em>);

}</pre></blockquote></div></blockquote><blockquote><a name="IXT-25-241005" /><a name="IXT-25-241006" /><a name="IXTR3-252" /><a name="IXTR3-253" /><a name="IXTR3-254" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b>SAXNotSupportedException</b></font></td><td align="right"><i></i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><table width="515" border="0" cellpadding="5"><tr><td align="left" /><td align="right" /></tr></table><p>A <a name="IXT-25-241005" /><a name="IXT-25-241006" /><tt class="literal">SAXNotSupportedException</tt>
is thrown if you attempt to set a property or feature that the parser
recognizes, but either cannot set or get now or cannot set the value
to which you want to set it. Besides the constructors, all of its
methods are <a name="IXTR3-252" />inherited <a name="IXTR3-253" />from <a name="IXTR3-254" />superclasses: 
</p><blockquote><pre class="code">package org.xml.sax;

public class <b class="emphasis-bold">SAXNotSupportedException</b> extends SAXException {

  public <b class="emphasis-bold">SAXNotSupportedException</b>( );
  public <b class="emphasis-bold">SAXNotSupportedException</b>(String <em class="replaceable"><tt>message</tt></em>);

}</pre></blockquote></div></blockquote></div>
</div>

<hr width="684" align="left" />
<div class="navbar"><table width="684" border="0"><tr><td align="left" valign="top" width="228"><a href="ch24_02.htm"><img src="../gifs/txtpreva.gif" alt="Previous" border="0" /></a></td><td align="center" valign="top" width="228"><a href="index.htm"><img src="../gifs/txthome.gif" alt="Home" border="0" /></a></td><td align="right" valign="top" width="228"><a href="ch25_02.htm"><img src="../gifs/txtnexta.gif" alt="Next" border="0" /></a></td></tr><tr><td align="left" valign="top" width="228">24.2. Object Reference</td><td align="center" valign="top" width="228"><a href="index/index.htm"><img src="../gifs/index.gif" alt="Book Index" border="0" /></a></td><td align="right" valign="top" width="228">25.2. The org.xml.sax.helpers Package</td></tr></table></div>
<hr width="684" align="left" />

<img src="../gifs/navbar.gif" usemap="#library-map" border="0" alt="Library Navigation Links" />
<p><p><font size="-1"><a href="copyrght.htm">Copyright &copy; 2002</a> O'Reilly &amp; Associates. All rights reserved.</font></p>

<map name="library-map">
<area shape="rect" coords="0,0,85,93" href="../index.htm"><area shape="rect" coords="85,0,180,98" href="../sax2/index.htm"><area shape="rect" coords="182,-1,261,100" href="index.htm"><area shape="rect" coords="263,1,384,96" href="../jxml/index.htm"><area shape="rect" coords="386,1,463,100" href="../jxslt/index.htm"><area shape="rect" coords="466,1,533,112" href="../xslt/index.htm"><area shape="rect" coords="535,-1,610,108" href="../schema/index.htm"><area shape="rect" coords="613,1,696,121" href="../pxml/index.htm">
      </map>

</body></html>