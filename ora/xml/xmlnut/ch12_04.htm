<html><head><title>Selectors (XML in a Nutshell, 2nd Edition)</title><link rel="stylesheet" type="text/css" href="../style/style1.css" />

<meta name="DC.Creator" content="Elliotte Rusty Harold and W. Scott Means" /><meta name="DC.Format" content="text/xml" scheme="MIME" /><meta name="DC.Language" content="en-US" /><meta name="DC.Publisher" content="O'Reilly &amp; Associates, Inc." /><meta name="DC.Source" scheme="ISBN" content="0-596-00292-0" /><meta name="DC.Subject.Keyword" content="stuff" /><meta name="DC.Title" content="XML in a Nutshell, 2nd Edition" /><meta name="DC.Type" content="Text.Monograph" />

</head><body bgcolor="#ffffff">

<img src="gifs/smbanner.gif" usemap="#banner-map" border="0" alt="Book Home" /><map name="banner-map"><area shape="rect" coords="1,-2,616,66" href="index.htm" alt="XML in a Nutshell" /><area shape="rect" coords="629,-11,726,25" href="jobjects/fsearch.htm" alt="Search this book" /></map>

<div class="navbar"><table width="684" border="0"><tr><td align="left" valign="top" width="228"><a href="ch12_03.htm"><img src="../gifs/txtpreva.gif" alt="Previous" border="0" /></a></td><td align="center" valign="top" width="228" /><td align="right" valign="top" width="228"><a href="ch12_05.htm"><img src="../gifs/txtnexta.gif" alt="Next" border="0" /></a></td></tr></table></div>



<h2 class="sect1">12.4. Selectors</h2>

<p>CSS <a name="xmlnut2-IDXTERM-1134" />provides
<a name="xmlnut2-IDXTERM-1135" />limited abilities to select the elements
to which a given rule applies. Many stylesheets only use element
names and lists of element names separated by commas, as shown in
<a href="ch12_02.htm">Example 12-2</a>. However, CSS provides some other basic
selectors you can use, though they're by no means as
powerful as the XPath syntax of XSLT.
</p>

<a name="xmlnut2-CHP-12-SECT-4.1" /><div class="sect2">
<h3 class="sect2">12.4.1. The Universal Selector</h3>

<p>The <a name="IXT-12-240887" />asterisk matches any
element at all; that is, it applies the rule to everything in the
document that does not have a more specific, conflicting rule. For
example, this rule says that all elements in the document should use
a large font:
</p>

<blockquote><pre class="code">* {font-size: large}</pre></blockquote>

</div>
<a name="xmlnut2-CHP-12-SECT-4.2" /><div class="sect2">
<h3 class="sect2">12.4.2. Matching Descendants, Children, and Siblings</h3>

<p>An element name <tt class="literal">A</tt> followed by another element name
<tt class="literal">B</tt> matches all <tt class="literal">B</tt> elements that
are descendants of <tt class="literal">A</tt> elements. For example, this
rule matches <tt class="literal">quantity</tt> elements that are
descendants of <tt class="literal">ingredients</tt> elements, but not other
ones that appear elsewhere in the document:
</p>

<blockquote><pre class="code">ingredients quantity {font-size: medium}</pre></blockquote>

<p>If the two element names are separated by a <a name="IXT-12-240888" />greater than sign
(<tt class="literal">&gt;</tt>), then the second element must be an
immediate child of the first for the rule to apply. For example, this
rule gives <tt class="literal">quantity</tt> children of
<tt class="literal">ingredient</tt> elements the same
<tt class="literal">font-size</tt> as the <tt class="literal">ingredient</tt>
element:
</p>

<blockquote><pre class="code">ingredient &gt; quantity {font-size: inherit}</pre></blockquote>

<p>If the two element names are separated by a <a name="IXT-12-240889" />plus sign (<tt class="literal">+</tt>),
then the second element must be the next sibling element immediately
after the first element. For example, this style rule sets the
<tt class="literal">border-top-style</tt> property for only the first
<tt class="literal">story</tt> element following a
<tt class="literal">directions</tt> element:
</p>

<blockquote><pre class="code">directions + story {border-top-style: solid}</pre></blockquote>

</div>
<a name="xmlnut2-CHP-12-SECT-4.3" /><div class="sect2">
<h3 class="sect2">12.4.3. Attribute Selectors</h3>

<p>Square brackets <a name="IXT-12-240890" />allow you to select
<a name="IXT-12-240891" />elements
with particular attributes or attribute values. For example, this
rule hides all <tt class="literal">step</tt> elements that have an
<tt class="literal">optional</tt> attribute:
</p>

<blockquote><pre class="code">step[optional] {display: none}</pre></blockquote>

<p>This rule hides all elements that have an <tt class="literal">optional</tt>
attribute regardless of their name:
</p>

<blockquote><pre class="code">*[optional] {display: none}</pre></blockquote>

<p><a name="IXT-12-240892" />An equals sign selects an element by a
given attribute's value. For example, this rule
hides all <tt class="literal">step</tt> elements that have an
<tt class="literal">optional</tt> attribute with the value
<tt class="literal">yes</tt>:
</p>

<blockquote><pre class="code">step[optional="yes"] {display: none}</pre></blockquote>

<p>The <tt class="literal">~=</tt> <a name="IXT-12-240893" />operator selects elements that contain
a given word as part of the value of a specified attribute. The word
must be complete and separated from other words in the attribute
value by whitespace, as in a <tt class="literal">NMTOKENS</tt> or
<tt class="literal">ENTITIES</tt> attribute. That is, this is not a
substring match. For example, this rule makes bold all
<tt class="literal">recipe</tt> elements whose <tt class="literal">source</tt>
attribute contains the word
"Anderson":
</p>

<blockquote><pre class="code">recipe[source~="Anderson"] {font-weight: bold}</pre></blockquote>

<p>Finally, the <tt class="literal">|=</tt>
<a name="IXT-12-240894" />operator matches
against the first word in a hyphen-separated attribute value, such as
Anderson-Harold or fr-CA.
</p>

<p>CSS also provides a special syntax for selecting elements with a
given ID value, even when you don't know exactly
what the name of the ID type attribute is. Simply separate the ID
from the element name with a <a name="IXT-12-240895" />sharp sign
(<tt class="literal">#</tt>). For example, this rule applies to the single
<tt class="literal">step</tt> element whose ID type attribute has the value
P833:
</p>

<blockquote><pre class="code">step#P833 { font-weight: 800 }</pre></blockquote>

</div>
<a name="xmlnut2-CHP-12-SECT-4.4" /><div class="sect2">
<h3 class="sect2">12.4.4. Pseudoclass Selectors</h3>

<p><a name="IXT-12-240896" />Pseudoclass selectors match elements
according to a condition not involving their name. There are seven of
these. They are all separated from the element name by a colon. For
example, the
<tt class="literal">first-child</tt><a name="IXT-12-240897" /> pseudoclass matches the first child
element of the named element. When applied to <a href="ch12_01.htm">Example 12-1</a>, this rule italicizes the first, and only the
first, <tt class="literal">step</tt> element:
</p>

<blockquote><pre class="code">step:first-child {font-style: italic}</pre></blockquote>

<p>The <tt class="literal">link</tt><a name="IXT-12-240898" /> pseudoclass matches the named
element if and only if that element is the source of an as yet
unvisited link. For example, this rule makes all links in the
document blue and underlined:
</p>

<blockquote><pre class="code">*:link {color: blue; text-decoration: underline}</pre></blockquote>

<p>The <tt class="literal">visited</tt><a name="IXT-12-240899" /> pseudoclass applies to all visited
links of the specified type. For example, this rule marks all visited
links as purple and underlined:
</p>

<blockquote><pre class="code">*:visited {color: purple; text-decoration: underline}</pre></blockquote>

<p>The <tt class="literal">active</tt><a name="IXT-12-240900" /> pseudoclass applies to all elements
that the user is currently activating (for example, by clicking the
mouse on). Exactly what it means to activate an element depends on
the context, and indeed not all applications can activate elements.
For example, this rule marks all active elements as red:
</p>

<blockquote><pre class="code">*:active {color: red}</pre></blockquote>

<p>The linking pseudoclasses are not yet well-supported for XML
documents because most browsers don't recognize
XLinks. So far, Mozilla and Netscape 6, the only browsers that
recognize XLinks, are the only browsers that will apply these
pseudoclasses to XML.
</p>

<p>The <tt class="literal">hover</tt><a name="IXT-12-240901" /> pseudoclass applies to elements on
which the cursor is currently positioned but which the user has not
yet activated. For example, this rule marks all these elements as
green and underlined:
</p>

<blockquote><pre class="code">*:hover {color: green; text-decoration: underline}</pre></blockquote>

<p>The <tt class="literal">focus</tt><a name="IXT-12-240902" /> pseudoclass applies to the element
that currently has the focus. For example, this rule draws a
one-pixel red border around the element with the focus, assuming
there is such an element:
</p>

<blockquote><pre class="code">*:focus {border: 1px solid red }</pre></blockquote>

<p>Finally, the <tt class="literal">lang</tt><a name="IXT-12-240903" /> pseudoclass matches all elements in
the specified language as determined by the
<tt class="literal">xml:lang</tt> attribute. For example, this rule uses
the David New Hebrew font for all elements written in Hebrew (more
properly, all elements whose <tt class="literal">xml:lang</tt> attribute
has the value <tt class="literal">he</tt> or any subtype thereof).
</p>

<blockquote><pre class="code">*:lang(he) {font-family: "David New Hebrew"}</pre></blockquote>

</div>
<a name="xmlnut2-CHP-12-SECT-4.5" /><div class="sect2">
<h3 class="sect2">12.4.5. Pseudoelement Selectors</h3>

<p><a name="IXT-12-240904" />Pseudoelement selectors match things
that aren't actually elements. Like pseudoclass
selectors they're attached to an element selector by
a colon. There are four of these:
</p>

<ul><li>
<p><tt class="literal">first-letter</tt></p>
</li><li>
<p><tt class="literal">first-line</tt></p>
</li><li>
<p><tt class="literal">before</tt></p>
</li><li>
<p><tt class="literal">after</tt></p>
</li></ul>
<p>The <tt class="literal">first-letter</tt><a name="IXT-12-240905" /> pseudoelement selects the first
letter of an element. For example, this rule makes the first letter
of the <tt class="literal">story</tt> element a drop cap:
</p>

<blockquote><pre class="code">story:first-letter {
  font-size: 200%;
  font-weight: bold;
  float: left;
  padding-right: 3pt
}</pre></blockquote>

<p>The <tt class="literal">first-line</tt><a name="IXT-12-240906" /> pseudoelement applies formatting
to all characters in the first line of a block-level element. If the
browser window is resized so that characters move into or out of the
first line, then the formatting changes to match. For example, this
rule formats the first line of the <tt class="literal">story</tt> element
in small capitals instead of lowercase letters:
</p>

<blockquote><pre class="code">story:first-line {font-variant: small-caps}</pre></blockquote>

<p>The <tt class="literal">before</tt><a name="IXT-12-240907" /> and
<tt class="literal">after</tt><a name="IXT-12-240908" /> pseudoelements select the points
immediately before and after the specified element. You
can't really apply font or text styles to a
zero-width point, but you can insert text at that point using the
<tt class="literal">content</tt> property. For example, this rule inserts
the string "Ingredients!" before
the <tt class="literal">ingredients</tt> element:
</p>

<blockquote><pre class="code">ingredients:before {content: "Ingredients! "}</pre></blockquote>

<p>This rule places the number of the step in front of each
<tt class="literal">step</tt> element in <a name="IXTR3-248" />the <a name="IXTR3-249" />form 1., 2., 3., and so on:
</p>

<blockquote><pre class="code">step:before {
  content: counter(step) ". ";
  counter-increment: step;
}</pre></blockquote>

</div>


<hr width="684" align="left" />
<div class="navbar"><table width="684" border="0"><tr><td align="left" valign="top" width="228"><a href="ch12_03.htm"><img src="../gifs/txtpreva.gif" alt="Previous" border="0" /></a></td><td align="center" valign="top" width="228"><a href="index.htm"><img src="../gifs/txthome.gif" alt="Home" border="0" /></a></td><td align="right" valign="top" width="228"><a href="ch12_05.htm"><img src="../gifs/txtnexta.gif" alt="Next" border="0" /></a></td></tr><tr><td align="left" valign="top" width="228">12.3. Associating Stylesheets with XML Documents</td><td align="center" valign="top" width="228"><a href="index/index.htm"><img src="../gifs/index.gif" alt="Book Index" border="0" /></a></td><td align="right" valign="top" width="228">12.5. The Display Property</td></tr></table></div>
<hr width="684" align="left" />

<img src="../gifs/navbar.gif" usemap="#library-map" border="0" alt="Library Navigation Links" />
<p><p><font size="-1"><a href="copyrght.htm">Copyright &copy; 2002</a> O'Reilly &amp; Associates. All rights reserved.</font></p>

<map name="library-map">
<area shape="rect" coords="0,0,85,93" href="../index.htm"><area shape="rect" coords="85,0,180,98" href="../sax2/index.htm"><area shape="rect" coords="182,-1,261,100" href="index.htm"><area shape="rect" coords="263,1,384,96" href="../jxml/index.htm"><area shape="rect" coords="386,1,463,100" href="../jxslt/index.htm"><area shape="rect" coords="466,1,533,112" href="../xslt/index.htm"><area shape="rect" coords="535,-1,610,108" href="../schema/index.htm"><area shape="rect" coords="613,1,696,121" href="../pxml/index.htm">
</map>

</body></html>