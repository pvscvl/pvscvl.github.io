<html><head><title>The Built-in Template Rules (XML in a Nutshell, 2nd Edition)</title><link rel="stylesheet" type="text/css" href="../style/style1.css" />

<meta name="DC.Creator" content="Elliotte Rusty Harold and W. Scott Means" /><meta name="DC.Format" content="text/xml" scheme="MIME" /><meta name="DC.Language" content="en-US" /><meta name="DC.Publisher" content="O'Reilly &amp; Associates, Inc." /><meta name="DC.Source" scheme="ISBN" content="0-596-00292-0" /><meta name="DC.Subject.Keyword" content="stuff" /><meta name="DC.Title" content="XML in a Nutshell, 2nd Edition" /><meta name="DC.Type" content="Text.Monograph" />

</head><body bgcolor="#ffffff">

<img src="gifs/smbanner.gif" usemap="#banner-map" border="0" alt="Book Home" /><map name="banner-map"><area shape="rect" coords="1,-2,616,66" href="index.htm" alt="XML in a Nutshell" /><area shape="rect" coords="629,-11,726,25" href="jobjects/fsearch.htm" alt="Search this book" /></map>

<div class="navbar"><table width="684" border="0"><tr><td align="left" valign="top" width="228"><a href="ch08_06.htm"><img src="../gifs/txtpreva.gif" alt="Previous" border="0" /></a></td><td align="center" valign="top" width="228" /><td align="right" valign="top" width="228"><a href="ch08_08.htm"><img src="../gifs/txtnexta.gif" alt="Next" border="0" /></a></td></tr></table></div>



<h2 class="sect1">8.7. The Built-in Template Rules</h2>

<p>There are seven <a name="xmlnut2-IDXTERM-787" />kinds <a name="xmlnut2-IDXTERM-788" /> <a name="xmlnut2-IDXTERM-789" />of nodes in an <a name="xmlnut2-IDXTERM-790" /> <a name="xmlnut2-IDXTERM-791" />XML
document: the root node, element nodes, attribute nodes, text nodes,
comment nodes, processing instruction nodes, and namespace nodes.
XSLT provides a default built-in template rule for each of these
seven kinds of nodes that says what to do with that node if the
stylesheet author has not provided more specific instructions. These
rules use special wildcard XPath expressions to match all nodes of a
given type. Together these template rules have major effects on which
nodes are activated when.
</p>

<a name="xmlnut2-CHP-8-SECT-7.1" /><div class="sect2">
<h3 class="sect2">8.7.1. The Default Template Rule for Text and Attribute Nodes</h3>

<p>The
<a name="IXT-8-239727" />most <a name="IXT-8-239728" />basic <a name="xmlnut2-IDXTERM-794" />built-in template rule copies the value of
text and attribute nodes into the output document. It looks like
this:
</p>

<blockquote><pre class="code">&lt;xsl:template match="text( )|@*"&gt;
  &lt;xsl:value-of select="."/&gt;
&lt;/xsl:template&gt;</pre></blockquote>

<p>The <tt class="literal">text( )</tt> node test is an XPath pattern matching
all text nodes, just as <tt class="literal">first_name</tt> is an XPath
pattern matching all <tt class="literal">first_name</tt> element nodes.
<tt class="literal">@*</tt> is an XPath pattern matching all attribute
nodes. The vertical bar combines these two patterns so that the
template rule matches both text and attribute nodes. The
rule's template says that whenever a text or
attribute node is matched, the processor should output the value of
that node. For a text node, this value is simply the text in the
node. For an attribute, this value is the attribute value but not the
name.
</p>

<p><a href="ch08_07.htm">Example 8-10</a> is an XSLT stylesheet that pulls the
birth and death dates out of the <tt class="literal">born</tt> and
<tt class="literal">died</tt> attributes in <a href="ch08_01.htm">Example 8-1</a>.
The default template rule for attributes takes the value of the
attributes, but an explicit rule selects those values. The
<tt class="literal">@</tt> sign in <tt class="literal">@born</tt> and
<tt class="literal">@died</tt> indicates that these are attributes of the
matched element rather than child elements.
</p>

<a name="xmlnut2-CHP-8-EX-10" /><div class="example">
<h4 class="objtitle">Example 8-10. An XSLT stylesheet that reads attribute </h4>
<blockquote><pre class="code">&lt;?xml version="1.0"?&gt;
&lt;xsl:stylesheet version="1.0"
                xmlns:xsl="http://www.w3.org/1999/XSL/Transform"&gt;

  &lt;xsl:template match="people"&gt;
    &lt;html&gt;
      &lt;head&gt;&lt;title&gt;Famous Scientists&lt;/title&gt;&lt;/head&gt;
      &lt;body&gt;
        &lt;dl&gt;
          &lt;xsl:apply-templates/&gt;
        &lt;/dl&gt;
      &lt;/body&gt;
    &lt;/html&gt;
  &lt;/xsl:template&gt;

  &lt;xsl:template match="person"&gt;
    &lt;dt&gt;&lt;xsl:apply-templates select="name"/&gt;&lt;/dt&gt;
    &lt;dd&gt;&lt;ul&gt;
      &lt;li&gt;Born: &lt;xsl:apply-templates select="@born"/&gt;&lt;/li&gt;
      &lt;li&gt;Died: &lt;xsl:apply-templates select="@died"/&gt;&lt;/li&gt;
    &lt;/ul&gt;&lt;/dd&gt;
  &lt;/xsl:template&gt;

&lt;/xsl:stylesheet&gt;</pre></blockquote>
</div>

<p>When an XSLT processor applies this stylesheet to <a href="ch08_01.htm">Example 8-1</a>, it outputs the HTML document shown in <a href="ch08_07.htm">Example 8-11</a>. 
</p>

<a name="xmlnut2-CHP-8-EX-11" /><div class="example">
<h4 class="objtitle">Example 8-11. The HTML document produced by applying <a href="ch08_07.htm">Example 8-10</a> to <a href="ch08_01.htm">Example 8-1</a> </h4>
<blockquote><pre class="code">&lt;html&gt;
   &lt;head&gt;
      &lt;title&gt;Famous Scientists&lt;/title&gt;
   &lt;/head&gt;
   &lt;body&gt;
      &lt;dl&gt;

         &lt;dt&gt;
            Alan
            Turing
         &lt;/dt&gt;

         &lt;dd&gt;
            &lt;ul&gt;
               &lt;li&gt;Born: 1912&lt;/li&gt;
               &lt;li&gt;Died: 1954&lt;/li&gt;
            &lt;/ul&gt;
         &lt;/dd&gt;

         &lt;dt&gt;
            Richard
            P
            Feynman
         &lt;/dt&gt;
         &lt;dd&gt;
            &lt;ul&gt;
               &lt;li&gt;Born: 1918&lt;/li&gt;
               &lt;li&gt;Died: 1988&lt;/li&gt;
            &lt;/ul&gt;
         &lt;/dd&gt;

      &lt;/dl&gt;
   &lt;/body&gt;
&lt;/html&gt;</pre></blockquote>
</div>

<p>It's important to note that although this template
rule says what should happen when an attribute node is reached, by
default the XSLT processor never reaches attribute nodes and,
therefore, never outputs the value of an attribute. Attribute values
are output according to this template only if a specific rule applies
templates to them, and none of the default rules do this because
attributes are not considered to be children of their parents. In
other words, if element <tt class="literal">E</tt> has an attribute
<tt class="literal">A</tt>, then <tt class="literal">E</tt> is the parent of
<tt class="literal">A</tt>, but <tt class="literal">A</tt> is not the child of
<tt class="literal">E</tt>. (The biological metaphor breaks down here.)
Applying templates to the children of an element with
<tt class="literal">&lt;xsl:apply-templates/&gt;</tt> does not apply
templates to attributes of the element. To do that, the
<tt class="literal">xsl:apply-templates</tt> element must contain an XPath
expression specifically selecting attributes.
</p>

</div>
<a name="xmlnut2-CHP-8-SECT-7.2" /><div class="sect2">
<h3 class="sect2">8.7.2. The Default Template Rule for Element and Root Nodes</h3>

<p>The <a name="IXT-8-239729" />most <a name="IXT-8-239730" />important template rule is the one that
guarantees that children are processed. This is that rule:
</p>

<blockquote><pre class="code">&lt;xsl:template match="*|/"&gt;
  &lt;xsl:apply-templates/&gt;
&lt;/xsl:template&gt;</pre></blockquote>

<p>The asterisk <tt class="literal">*</tt> is an XPath wild-card pattern that
matches all element nodes, regardless of what name they have or what
namespace they're in. The forward slash
<tt class="literal">/</tt> is an XPath pattern that matches the root node.
This is the first node the processor selects for processing, and
therefore this is the first template rule the processor executes
(unless a nondefault template rule also matches the root node).
Again, the vertical bar combines these two expressions so that it
matches both the root node and element nodes. In isolation, this rule
means that the XSLT processor eventually finds and applies templates
to all nodes except attribute and namespace nodes because every
nonattribute, non-namespace node is either the root node, a child of
the root node, or a child of an element. Only attribute and namespace
nodes are not children of their parents. (You can think of them as
disinherited nodes.)
</p>

<p>Of course, templates may override the default behavior. For example,
when you include a template rule matching <tt class="literal">person</tt>
elements in your stylesheet, then children of the matched
<tt class="literal">person</tt> elements are not necessarily processed,
unless your own template says to process them.
</p>

</div>
<a name="xmlnut2-CHP-8-SECT-7.3" /><div class="sect2">
<h3 class="sect2">8.7.3. The Default Template Rule for Comment and Processing Instruction Nodes</h3>

<p><a name="IXT-8-239731" />This is the default
<a name="IXT-8-239732" />template rule for comments and processing
instructions:
</p>

<blockquote><pre class="code">&lt;xsl:template match="processing-instruction()|comment( )"/&gt;</pre></blockquote>

<p>It matches all comments and processing instructions. However, it does
not output anything into the result tree. That is, unless you provide
specific rules matching comments or processing instructions, no part
of these items will be copied from the input document to the output
document.
</p>

</div>
<a name="xmlnut2-CHP-8-SECT-7.4" /><div class="sect2">
<h3 class="sect2">8.7.4. The Default Template Rule for Namespace Nodes</h3>

<p>A similar
<a name="IXT-8-239733" />template rule matches namespace
nodes and instructs the processor not to copy any part of the
namespace node to the output. This is truly a built-in rule that must
be implemented in the XSLT processor's source code;
it can't even be written down in an XSLT stylesheet
because there's no such thing as an XPath pattern
matching a namespace node. That is, there's no
<tt class="literal">namespace( )</tt> node test in XPath. The XSLT
processor handles the insertion of any necessary namespace
declarations in the output document automatically, without any
special <a name="IXTR3-113" />assistance <a name="IXTR3-114" /> <a name="IXTR3-115" />from <a name="IXTR3-116" /> <a name="IXTR3-117" />namespace <a name="IXTR3-118" />templates.
</p>

</div>


<hr width="684" align="left" />
<div class="navbar"><table width="684" border="0"><tr><td align="left" valign="top" width="228"><a href="ch08_06.htm"><img src="../gifs/txtpreva.gif" alt="Previous" border="0" /></a></td><td align="center" valign="top" width="228"><a href="index.htm"><img src="../gifs/txthome.gif" alt="Home" border="0" /></a></td><td align="right" valign="top" width="228"><a href="ch08_08.htm"><img src="../gifs/txtnexta.gif" alt="Next" border="0" /></a></td></tr><tr><td align="left" valign="top" width="228">8.6. Applying Templates with xsl:apply-templates</td><td align="center" valign="top" width="228"><a href="index/index.htm"><img src="../gifs/index.gif" alt="Book Index" border="0" /></a></td><td align="right" valign="top" width="228">8.8. Modes</td></tr></table></div>
<hr width="684" align="left" />

<img src="../gifs/navbar.gif" usemap="#library-map" border="0" alt="Library Navigation Links" />
<p><p><font size="-1"><a href="copyrght.htm">Copyright &copy; 2002</a> O'Reilly &amp; Associates. All rights reserved.</font></p>

<map name="library-map">
<area shape="rect" coords="0,0,85,93" href="../index.htm"><area shape="rect" coords="85,0,180,98" href="../sax2/index.htm"><area shape="rect" coords="182,-1,261,100" href="index.htm"><area shape="rect" coords="263,1,384,96" href="../jxml/index.htm"><area shape="rect" coords="386,1,463,100" href="../jxslt/index.htm"><area shape="rect" coords="466,1,533,112" href="../xslt/index.htm"><area shape="rect" coords="535,-1,610,108" href="../schema/index.htm"><area shape="rect" coords="613,1,696,121" href="../pxml/index.htm">
</map>

</body></html>