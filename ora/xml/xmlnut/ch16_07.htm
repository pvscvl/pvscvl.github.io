<html><head><title>Mixed Content (XML in a Nutshell, 2nd Edition)</title><link rel="stylesheet" type="text/css" href="../style/style1.css" />

<meta name="DC.Creator" content="Elliotte Rusty Harold and W. Scott Means" /><meta name="DC.Format" content="text/xml" scheme="MIME" /><meta name="DC.Language" content="en-US" /><meta name="DC.Publisher" content="O'Reilly &amp; Associates, Inc." /><meta name="DC.Source" scheme="ISBN" content="0-596-00292-0" /><meta name="DC.Subject.Keyword" content="stuff" /><meta name="DC.Title" content="XML in a Nutshell, 2nd Edition" /><meta name="DC.Type" content="Text.Monograph" />

</head><body bgcolor="#ffffff">

<img src="gifs/smbanner.gif" usemap="#banner-map" border="0" alt="Book Home" /><map name="banner-map"><area shape="rect" coords="1,-2,616,66" href="index.htm" alt="XML in a Nutshell" /><area shape="rect" coords="629,-11,726,25" href="jobjects/fsearch.htm" alt="Search this book" /></map>

<div class="navbar"><table width="684" border="0"><tr><td align="left" valign="top" width="228"><a href="ch16_06.htm"><img src="../gifs/txtpreva.gif" alt="Previous" border="0" /></a></td><td align="center" valign="top" width="228" /><td align="right" valign="top" width="228"><a href="ch16_08.htm"><img src="../gifs/txtnexta.gif" alt="Next" border="0" /></a></td></tr></table></div>



<h2 class="sect1">16.7. Mixed Content</h2>

<p>XML 1.0 <a name="xmlnut2-IDXTERM-1505" /> <a name="xmlnut2-IDXTERM-1506" /> <a name="xmlnut2-IDXTERM-1507" /> <a name="xmlnut2-IDXTERM-1508" />provided the ability to declare an element
that could contain parsed character data (<tt class="literal">#PCDATA</tt>)
and unlimited occurrences of elements drawn from a provided list.
Schemas provide the same functionality plus the ability to control
the number and sequence in which elements appear within character
data.
</p>

<a name="xmlnut2-CHP-16-SECT-7.1" /><div class="sect2">
<h3 class="sect2">16.7.1. Allowing Mixed Content</h3>

<p>The <tt class="literal">mixed</tt> attribute of the
<tt class="literal">complexType</tt> element controls whether character
data may appear within the body of the element with which it is
associated. To illustrate this concept, <a href="ch16_07.htm">Example 16-9</a>
gives us a new schema that will be used to validate form-letter
documents.
</p>

<a name="xmlnut2-CHP-16-EX-9" /><div class="example">
<h4 class="objtitle">Example 16-9. formletter.xsd </h4>
<blockquote><pre class="code">&lt;xs:schema xmlns:xs="http://www.w3.org/2001/XMLSchema"&gt;
  &lt;xs:element name="letter"&gt;
    &lt;xs:complexType mixed="true"/&gt;
  &lt;/xs:element&gt;
&lt;/xs:schema&gt;</pre></blockquote>
</div>

<p>This schema seems to declare a single element called
<tt class="literal">body</tt> that may contain character data and nothing
else. But attempting to validate the following document produces an
error, as shown in <a href="ch16_07.htm">Example 16-10</a>.
</p>

<a name="xmlnut2-CHP-16-EX-10" /><div class="example">
<h4 class="objtitle">Example 16-10. formletterdoc.xml </h4>
<blockquote><pre class="code">&lt;letter xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:noNamespaceSchemaLocation="formletter.xsd"&gt;Hello!&lt;/letter&gt;</pre></blockquote>
</div>

<p>The following error is generated:</p>

<blockquote><pre class="code">The content of element type "letter" must match "EMPTY".</pre></blockquote>

<p>This is because there's no complex content for the
<tt class="literal">letter</tt> element. Setting <tt class="literal">mixed</tt>
to <tt class="literal">true</tt> is not the same as declaring an element
that may contain a string. The character data may only appear in
relation to other complex content, which leads to the subject of
relative element positioning.
</p>

</div>
<a name="xmlnut2-CHP-16-SECT-7.2" /><div class="sect2">
<h3 class="sect2">16.7.2. Controlling Element Placement</h3>

<p>You have already seen the
<tt class="literal">xs:sequence</tt><a name="IXT-16-240161" />
<a name="IXT-16-240162" /> element, which dictates that the
elements it contains must appear in exactly the same order in which
they appear within the sequence element. In addition to
<tt class="literal">xs:sequence</tt>, schemas also provide the
<tt class="literal">xs:choice</tt><a name="IXT-16-240163" /> <a name="IXT-16-240164" /> and <tt class="literal">xs:all</tt> elements
to control the order in which elements may appear. These elements may
be nested to create sophisticated element structures.
</p>

<p>Expanding the form-letter example, a sequence adds support for
various letter components to the <tt class="literal">formletter.xsd</tt>
schema:
</p>

<blockquote><pre class="code">&lt;xs:element name="letter"&gt;
  &lt;xs:complexType mixed="true"&gt;
    &lt;xs:sequence&gt;
      &lt;xs:element name="greeting"/&gt;
      &lt;xs:element name="body"/&gt;
      &lt;xs:element name="closing"/&gt;
    &lt;/xs:sequence&gt;
  &lt;/xs:complexType&gt;
&lt;/xs:element&gt;</pre></blockquote>

<p>Now, thanks to the <tt class="literal">xs:sequence</tt> element, a letter
must include a <tt class="literal">greeting</tt> element, a
<tt class="literal">body</tt> element, and a <tt class="literal">closing</tt>
element, in that order. But in some cases, what is desired is that
one and only one element appear from a collection of possibilities.
The <tt class="literal">xs:choice</tt> element supports this. For example,
if the <tt class="literal">greeting</tt> element needed to be restricted to
contain only one salutation out of a permissible list, it could be
declared to do so using <tt class="literal">xs:choice</tt>:
</p>

<blockquote><pre class="code">&lt;xs:element name="greeting"&gt;
  &lt;xs:complexType mixed="true"&gt;
    &lt;xs:choice&gt;
      &lt;xs:element name="hello"/&gt;
      &lt;xs:element name="hi"/&gt;
      &lt;xs:element name="dear"/&gt;
    &lt;/xs:choice&gt;
  &lt;/xs:complexType&gt;
&lt;/xs:element&gt;</pre></blockquote>

<p>Now one of the permitted salutations must appear in the
<tt class="literal">greeting</tt> element for the letter to be considered
valid.
</p>

<p>The remaining element-order enforcement construct is the
<tt class="literal">xs:all</tt> element. Unlike the
<tt class="literal">xs:sequence</tt> and <tt class="literal">xs:choice</tt>
elements, the <tt class="literal">xs:all</tt> element must appear at the
top of the content model and can only contain elements that are
optional or appear only once. The <tt class="literal">xs:all</tt> construct
tells the schema processor that each of the contained elements must
appear once in the target document, but can appear in any order. This
could be applied in the form-letter example. If the form letter had
certain elements that had to appear in the <tt class="literal">body</tt>
element, but not in any particular order, <tt class="literal">xs:all</tt>
could be used to control their appearance:
</p>

<blockquote><pre class="code">&lt;xs:element name="body"&gt;
  &lt;xs:complexType mixed="true"&gt;
    &lt;xs:all&gt;
      &lt;xs:element name="item"/&gt;
      &lt;xs:element name="price"/&gt;
      &lt;xs:element name="arrivalDate"/&gt;
    &lt;/xs:all&gt;
  &lt;/xs:complexType&gt;
&lt;/xs:element&gt;</pre></blockquote>

<p>This would allow the letter author to mix these elements into the
narrative without being restricted as to any particular order. Also,
it would prevent the author from inserting multiple references to the
same value by accident. A valid document instance, including the new
<tt class="literal">body</tt> content, might look like <a href="ch16_07.htm">Example 16-11</a>.
</p>

<a name="xmlnut2-CHP-16-EX-11" /><div class="example">
<h4 class="objtitle">Example 16-11. formletterdoc.xml </h4>
<blockquote><pre class="code">&lt;letter xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:noNamespaceSchemaLocation="formletter.xsd"&gt;
  &lt;greeting&gt;&lt;hello/&gt; Bob!&lt;/greeting&gt;
  &lt;body&gt;
    Thank you for ordering the &lt;item/&gt; ($&lt;price/&gt;), it should arrive
    by &lt;arrivalDate/&gt;.
  &lt;/body&gt;
  &lt;closing/&gt;
&lt;/letter&gt;</pre></blockquote>
</div>



<a name="ch16-47-fm2xml" /><blockquote><b>TIP:</b> 
The element order constructs are not just limited to complex types
with mixed content. If the <tt class="literal">mixed</tt> attribute is not
present, the declared sequence of child elements is still enforced,
but no character data is permitted between them.
</p>
</blockquote>

</div>
<a name="xmlnut2-CHP-16-SECT-7.3" /><div class="sect2">
<h3 class="sect2">16.7.3. Using Groups</h3>

<p>Just as the <tt class="literal">xs:attributeGroup</tt> element allows
commonly used attributes to be grouped together and referenced as a
unit, the <tt class="literal">xs:group</tt><a name="IXT-16-240165" /> element allows sequences, choices, and
model groups of individual element declarations to be grouped
together and given a unique name. These groups can then be included
in another element-content model using an <tt class="literal">xs:group</tt>
element with the <tt class="literal">ref</tt> attribute set to the same
value as the <tt class="literal">name</tt> attribute of the <a name="IXTR3-195" /> <a name="IXTR3-196" /> <a name="IXTR3-197" /> <a name="IXTR3-198" />source group.
</p>

</div>


<hr width="684" align="left" />
<div class="navbar"><table width="684" border="0"><tr><td align="left" valign="top" width="228"><a href="ch16_06.htm"><img src="../gifs/txtpreva.gif" alt="Previous" border="0" /></a></td><td align="center" valign="top" width="228"><a href="index.htm"><img src="../gifs/txthome.gif" alt="Home" border="0" /></a></td><td align="right" valign="top" width="228"><a href="ch16_08.htm"><img src="../gifs/txtnexta.gif" alt="Next" border="0" /></a></td></tr><tr><td align="left" valign="top" width="228">16.6. Simple Content</td><td align="center" valign="top" width="228"><a href="index/index.htm"><img src="../gifs/index.gif" alt="Book Index" border="0" /></a></td><td align="right" valign="top" width="228">16.8. Allowing Any Content</td></tr></table></div>
<hr width="684" align="left" />

<img src="../gifs/navbar.gif" usemap="#library-map" border="0" alt="Library Navigation Links" />
<p><p><font size="-1"><a href="copyrght.htm">Copyright &copy; 2002</a> O'Reilly &amp; Associates. All rights reserved.</font></p>

<map name="library-map">
<area shape="rect" coords="0,0,85,93" href="../index.htm"><area shape="rect" coords="85,0,180,98" href="../sax2/index.htm"><area shape="rect" coords="182,-1,261,100" href="index.htm"><area shape="rect" coords="263,1,384,96" href="../jxml/index.htm"><area shape="rect" coords="386,1,463,100" href="../jxslt/index.htm"><area shape="rect" coords="466,1,533,112" href="../xslt/index.htm"><area shape="rect" coords="535,-1,610,108" href="../schema/index.htm"><area shape="rect" coords="613,1,696,121" href="../pxml/index.htm">
</map>

</body></html>