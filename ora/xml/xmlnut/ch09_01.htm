<html><head><title>XPath (XML in a Nutshell, 2nd Edition)</title><link rel="stylesheet" type="text/css" href="../style/style1.css" />

<meta name="DC.Creator" content="Elliotte Rusty Harold and W. Scott Means" /><meta name="DC.Format" content="text/xml" scheme="MIME" /><meta name="DC.Language" content="en-US" /><meta name="DC.Publisher" content="O'Reilly &amp; Associates, Inc." /><meta name="DC.Source" scheme="ISBN" content="0-596-00292-0" /><meta name="DC.Subject.Keyword" content="stuff" /><meta name="DC.Title" content="XML in a Nutshell, 2nd Edition" /><meta name="DC.Type" content="Text.Monograph" />

</head><body bgcolor="#ffffff">

<img src="gifs/smbanner.gif" usemap="#banner-map" border="0" alt="Book Home" /><map name="banner-map"><area shape="rect" coords="1,-2,616,66" href="index.htm" alt="XML in a Nutshell" /><area shape="rect" coords="629,-11,726,25" href="jobjects/fsearch.htm" alt="Search this book" /></map>

<div class="navbar"><table width="684" border="0"><tr><td align="left" valign="top" width="228"><a href="ch08_11.htm"><img src="../gifs/txtpreva.gif" alt="Previous" border="0" /></a></td><td align="center" valign="top" width="228" /><td align="right" valign="top" width="228"><a href="ch09_02.htm"><img src="../gifs/txtnexta.gif" alt="Next" border="0" /></a></td></tr></table></div>


<h1 class="chapter">Chapter 9. XPath</h1>
<div class="htmltoc"><h4 class="tochead">Contents:</h4><p>
<a href="ch09_01.htm">The Tree Structure of an XML Document</a><br />
<a href="ch09_02.htm">Location Paths</a><br />
<a href="ch09_03.htm">Compound Location Paths</a><br />
<a href="ch09_04.htm">Predicates</a><br />
<a href="ch09_05.htm">Unabbreviated Location Paths</a><br />
<a href="ch09_06.htm">General XPath Expressions</a><br />
<a href="ch09_07.htm">XPath Functions</a><br /></p></div><p>XPath <a name="xmlnut2-IDXTERM-818" />is a
non-XML language for identifying particular parts of XML documents.
XPath lets you write expressions that refer to the first
<tt class="literal">person</tt> element in a document, the seventh child
element of the third <tt class="literal">person</tt> element, the
<tt class="literal">ID</tt> attribute of the first
<tt class="literal">person</tt> element whose contents are the string
"Fred Jones", all
<tt class="literal">xml-stylesheet</tt> processing instructions in the
document's prolog, and so forth. XPath indicates
nodes by position, relative position, type, content, and several
other criteria. XSLT uses XPath expressions to match and select
particular elements in the input document for copying into the output
document or further processing. XPointer uses XPath expressions to
identify the particular point in or part of an XML document to which
an XLink links. The W3C XML Schema Language uses XPath expressions to
define uniqueness and co-occurrence constraints. XForms relies on
XPath to bind form controls to instance data, express constraints on
user-entered values, and calculate values that depend on other
values.
</p><p>XPath expressions can also represent numbers, strings, or Booleans.
This lets XSLT stylesheets carry out simple arithmetic for purposes
such as numbering and cross-referencing figures, tables, and
equations. String manipulation in XPath lets XSLT perform tasks such
as making the title of a chapter uppercase in a headline or
extracting the last two digits from a year.
</p><div class="sect1"><a name="xmlnut2-CHP-9-SECT-1" />
<h2 class="sect1">9.1. The Tree Structure of an XML Document</h2>

<p>An <a name="xmlnut2-IDXTERM-819" />XML <a name="xmlnut2-IDXTERM-820" />document is a tree made up of nodes. Some
nodes contain one or more other nodes. There is exactly one root
node, which ultimately contains all other nodes. XPath is a language
for picking nodes and sets of nodes out of this tree. From the
perspective of XPath, there are seven kinds of nodes:
</p>

<ul><li>
<p>The root node</p>
</li><li>
<p>Element nodes</p>
</li><li>
<p>Text nodes</p>
</li><li>
<p>Attribute nodes</p>
</li><li>
<p>Comment nodes</p>
</li><li>
<p>Processing-instruction nodes</p>
</li><li>
<p>Namespace nodes</p>
</li></ul>
<p>One thing to note are the constructs not included in this list: CDATA
sections, entity references, and document type declarations. XPath
operates on an XML document after all these items have been merged
into the document. For instance, XPath cannot identify the first
CDATA section in a document or tell whether a particular attribute
value was directly included in the source element start-tag or merely
defaulted from the declaration of the element in a DTD.
</p>

<p>Consider the document in <a href="ch09_01.htm">Example 9-1</a>. This exhibits
all seven kinds of nodes. <a href="ch09_01.htm">Figure 9-1</a> is a
<a name="IXT-9-238968" />diagram
<a name="IXT-9-238969" />of the tree
structure of this document.
</p>

<a name="xmlnut2-CHP-9-FIG-1" /><div class="figure"><img src="figs/XIAN2_0901.gif" alt="Figure 9-1" width="734" /></div><h4 class="objtitle">Figure 9-1. The tree structure of <a href="ch09_01.htm">Example 9-1</a></h4>

<a name="xmlnut2-CHP-9-EX-1" /><div class="example">
<h4 class="objtitle">Example 9-1. The example XML document used in this chapter </h4>
<blockquote><pre class="code">&lt;?xml version="1.0"?&gt;
&lt;?xml-stylesheet type="application/xml" href="people.xsl"?&gt;
&lt;!DOCTYPE people [
 &lt;!ATTLIST homepage xlink:type CDATA #FIXED "simple"
                  xmlns:xlink CDATA #FIXED "http://www.w3.org/1999/xlink"&gt;
 &lt;!ATTLIST person id ID #IMPLIED&gt;
]&gt;
&lt;people&gt;

  &lt;person born="1912" died="1954" id="p342"&gt;
    &lt;name&gt;
      &lt;first_name&gt;Alan&lt;/first_name&gt;
      &lt;last_name&gt;Turing&lt;/last_name&gt;
    &lt;/name&gt;
    &lt;!-- Did the word computer scientist exist in Turing's day? --&gt;
    &lt;profession&gt;computer scientist&lt;/profession&gt;
    &lt;profession&gt;mathematician&lt;/profession&gt;
    &lt;profession&gt;cryptographer&lt;/profession&gt;
    &lt;homepage xlink:href="http://www.turing.org.uk/"/&gt;
  &lt;/person&gt;

  &lt;person born="1918" died="1988" id="p4567"&gt;
    &lt;name&gt;
      &lt;first_name&gt;Richard&lt;/first_name&gt;
      &lt;middle_initial&gt;&amp;#x50;&lt;/middle_initial&gt;
      &lt;last_name&gt;Feynman&lt;/last_name&gt;
    &lt;/name&gt;
    &lt;profession&gt;physicist&lt;/profession&gt;
    &lt;hobby&gt;Playing the bongoes&lt;/hobby&gt;
  &lt;/person&gt;

&lt;/people&gt;</pre></blockquote>
</div>

<p>The <a name="IXT-9-238970" />XPath data model has several nonobvious
features. First of all, the <a name="IXT-9-238971" />root
node of the tree is <em class="emphasis">not</em> the same as
<a name="IXT-9-238972" />the root element. The root node of the
tree contains the entire document including the root element, as well
as any comments and processing instructions that occur before the
root element start-tag or after the root element end-tag. In <a href="ch09_01.htm">Example 9-1</a>, this means the root node contains the
<tt class="literal">xml-stylesheet</tt> processing instruction, as well as
the root element <tt class="literal">people</tt>.
</p>

<p>However, the XPath data model does not include everything in the
document. In particular, the XML declaration, the DOCTYPE
declaration, and the various parts of the DTD are
<em class="emphasis">not</em> addressable via XPath, though if the DTD
provides default values for any attributes, then those attributes are
noted by XPath. The <tt class="literal">homepage</tt> element has an
<tt class="literal">xlink:type</tt> attribute that was supplied by the DTD.
Similarly, any references to parsed entities are resolved. Entity
references, character references, and CDATA sections are not
individually identifiable, though any data they contain is
addressable. For example, XSLT cannot make all the text in CDATA
sections bold because XPath doesn't know which text
is and isn't part of a CDATA section.
</p>

<p>Finally, <tt class="literal">xmlns</tt><a name="IXT-9-238973" /> and
<tt class="literal">xmlns:</tt><em class="replaceable"><tt>prefix</tt></em> attributes
are not considered attribute nodes, even though
that's how a non-namespace-aware parser will see
them. However, namespace nodes are attached to every element and
attribute node for which a declaration has scope. They are not only
attached to the single element where the namespace is <a name="IXTR3-23" />declared.
</p>

</div>

<hr width="684" align="left" />
<div class="navbar"><table width="684" border="0"><tr><td align="left" valign="top" width="228"><a href="ch08_11.htm"><img src="../gifs/txtpreva.gif" alt="Previous" border="0" /></a></td><td align="center" valign="top" width="228"><a href="index.htm"><img src="../gifs/txthome.gif" alt="Home" border="0" /></a></td><td align="right" valign="top" width="228"><a href="ch09_02.htm"><img src="../gifs/txtnexta.gif" alt="Next" border="0" /></a></td></tr><tr><td align="left" valign="top" width="228">8.11. Other XSLT Elements</td><td align="center" valign="top" width="228"><a href="index/index.htm"><img src="../gifs/index.gif" alt="Book Index" border="0" /></a></td><td align="right" valign="top" width="228">9.2. Location Paths</td></tr></table></div>
<hr width="684" align="left" />

<img src="../gifs/navbar.gif" usemap="#library-map" border="0" alt="Library Navigation Links" />
<p><p><font size="-1"><a href="copyrght.htm">Copyright &copy; 2002</a> O'Reilly &amp; Associates. All rights reserved.</font></p>

<map name="library-map">
<area shape="rect" coords="0,0,85,93" href="../index.htm"><area shape="rect" coords="85,0,180,98" href="../sax2/index.htm"><area shape="rect" coords="182,-1,261,100" href="index.htm"><area shape="rect" coords="263,1,384,96" href="../jxml/index.htm"><area shape="rect" coords="386,1,463,100" href="../jxslt/index.htm"><area shape="rect" coords="466,1,533,112" href="../xslt/index.htm"><area shape="rect" coords="535,-1,610,108" href="../schema/index.htm"><area shape="rect" coords="613,1,696,121" href="../pxml/index.htm">
      </map>

</body></html>