<html><head><title>Namespace Syntax (XML in a Nutshell, 2nd Edition)</title><link rel="stylesheet" type="text/css" href="../style/style1.css" />

<meta name="DC.Creator" content="Elliotte Rusty Harold and W. Scott Means" /><meta name="DC.Format" content="text/xml" scheme="MIME" /><meta name="DC.Language" content="en-US" /><meta name="DC.Publisher" content="O'Reilly &amp; Associates, Inc." /><meta name="DC.Source" scheme="ISBN" content="0-596-00292-0" /><meta name="DC.Subject.Keyword" content="stuff" /><meta name="DC.Title" content="XML in a Nutshell, 2nd Edition" /><meta name="DC.Type" content="Text.Monograph" />

</head><body bgcolor="#ffffff">

<img src="gifs/smbanner.gif" usemap="#banner-map" border="0" alt="Book Home" /><map name="banner-map"><area shape="rect" coords="1,-2,616,66" href="index.htm" alt="XML in a Nutshell" /><area shape="rect" coords="629,-11,726,25" href="jobjects/fsearch.htm" alt="Search this book" /></map>

<div class="navbar"><table width="684" border="0"><tr><td align="left" valign="top" width="228"><a href="ch04_01.htm"><img src="../gifs/txtpreva.gif" alt="Previous" border="0" /></a></td><td align="center" valign="top" width="228" /><td align="right" valign="top" width="228"><a href="ch04_03.htm"><img src="../gifs/txtnexta.gif" alt="Next" border="0" /></a></td></tr></table></div>



<h2 class="sect1">4.2. Namespace Syntax</h2>

<p>Namespaces <a name="xmlnut2-IDXTERM-356" />disambiguate elements with the same name
from each other by assigning elements and attributes to
<a name="IXT-4-239504" />URIs. Generally, all the elements from one
XML application are assigned to one URI, and all the elements from a
different XML application are assigned to a different URI. These URIs
are sometimes called <em class="emphasis">namespace names</em>. The URIs
partition the elements and attributes into disjoint sets. Elements
with the same name but different URIs are different elements.
Elements with the same name and the same URIs are the same. Most of
the time there's a one-to-one mapping between
namespaces and XML applications, though a few applications use
multiple namespaces to subdivide different parts of the application.
For instance, XSL uses different namespaces for XSL Transformations
(XSLT) and XSL Formatting Objects (XSL-FO).
</p>

<a name="xmlnut2-CHP-4-SECT-2.1" /><div class="sect2">
<h3 class="sect2">4.2.1. Qualified Names, Prefixes, and Local Parts</h3>

<p>Since URIs frequently contain characters such as /, %, and ~ that are
not legal in XML names, short prefixes such as <tt class="literal">rdf</tt>
and <tt class="literal">xsl</tt> stand in for them in element and attribute
names. Each <a name="IXT-4-239505" /> <a name="IXT-4-239506" />prefix
is associated with a URI. Names whose prefixes are associated with
the same URI are in the same namespace. Names whose prefixes are
associated with different URIs are in different namespaces. Prefixed
elements and attributes in namespaces have names that contain exactly
one colon. They look like this:
</p>

<blockquote><pre class="code">rdf:description
xlink:type
xsl:template</pre></blockquote>

<p>Everything before the colon is called the
<em class="emphasis">prefix</em>. Everything after the colon is called the
<a name="IXT-4-239507" /><em class="emphasis">local
part</em>. The complete name including the colon is called the
<a name="IXT-4-239508" />
<a name="IXT-4-239509" /><em class="emphasis">qualified
name</em>, <em class="emphasis">QName</em>, or
<a name="IXT-4-239510" /><em class="emphasis">raw
name</em>. The prefix identifies the namespace to which the
element or attribute belongs. The local part identifies the
particular element or attribute within the namespace.
</p>

<p>In a document that contains both <a name="IXT-4-239511" />SVG and <a name="IXT-4-239512" />MathML <tt class="literal">set</tt> elements, one
could be an <tt class="literal">svg:set</tt> element, and the other could
be a <tt class="literal">mathml:set</tt> element. Then
there'd be no confusion between them. In an XSLT
stylesheet that transforms documents into XSL formatting objects, the
XSLT processor would recognize elements with the prefix
<tt class="literal">xsl</tt> as XSLT instructions and elements with the
prefix <tt class="literal">fo</tt> as <a name="IXT-4-239513" />literal result elements.
</p>

<p>Prefixes may be composed from any legal XML name character except the
colon. Prefixes beginning with the three letters
<tt class="literal">xml</tt> (in any combination of case) are reserved for
use by XML and its related specifications. Otherwise,
you're free to name your prefixes in any way
that's convenient. One further restriction
namespaces add to XML 1.0 is that the local part may not contain any
colons. In short, the only legal uses of a colon in XML are to
separate a namespace prefix from the local part in a qualified name
or for the attributes XML itself defines, such as
<tt class="literal">xml:space</tt> and <tt class="literal">xml:lang</tt>.
</p>

</div>
<a name="xmlnut2-CHP-4-SECT-2.2" /><div class="sect2">
<h3 class="sect2">4.2.2. Binding Prefixes to URIs</h3>

<p>Each <a name="xmlnut2-IDXTERM-367" /> <a name="xmlnut2-IDXTERM-368" /> <a name="xmlnut2-IDXTERM-369" />prefix in a qualified name must be
associated with a URI. For example, all XSLT elements are associated
with the <em class="emphasis">http://www.w3.org/1999/XSL/Transform</em> URI. The
customary prefix <tt class="literal">xsl</tt> is used in place of the
longer URI <em class="emphasis">http://www.w3.org/1999/XSL/Transform</em>.
</p>



<a name="ch04-7-fm2xml" /><blockquote><b>TIP:</b> 
<a name="IXT-4-239514" />You can't use the URI
in the name directly. For one thing, the slashes in most URIs
aren't legal characters in XML names. However,
it's occasionally useful to refer to the full name
without assuming a particular prefix. One convention used on many XML
mailing lists and in XML documentation is to enclose the URI in curly
braces and prefix it to the name. For example, the qualified name
<tt class="literal">xsl:template</tt> might be written as the full name
<tt class="literal">{http://www.w3.org/1999/XSL/Transform}template</tt>.
Another convention is to append the local name to the namespace name
after a sharp sign so that it becomes a URI fragment identifier. For
example,
<tt class="literal">http://www.w3.org/1999/XSL/Transform#template</tt>.
However, both forms are only conveniences for communication among
human beings when the URI is important but the prefix
isn't. Neither an XML parser nor an XSLT processor
will accept or understand the long forms.</p>
</blockquote>
 <p>Prefixes are bound to
namespace URIs by attaching an
<tt class="literal">xmlns:</tt><em class="replaceable"><tt>prefix</tt></em> attribute
to the prefixed element or one of its ancestors. (The
<em class="replaceable"><tt>prefix</tt></em> should be replaced by the actual
prefix used.) For example, the <tt class="literal">xmlns:rdf</tt> attribute
of this <tt class="literal">rdf:RDF</tt> element binds the prefix
<tt class="literal">rdf</tt> to the namespace URI <em class="emphasis">http://www.w3.org/TR/REC-rdf-syntax#</em>: </p>


<blockquote><pre class="code"><b class="emphasis-bold">&lt;rdf:RDF xmlns:rdf="http://www.w3.org/TR/REC-rdf-syntax#"&gt;</b>
 &lt;rdf:Description
      about="http://www.cafeconleche.org/examples/impressionists.xml"&gt;
    &lt;title&gt; Impressionist Paintings &lt;/title&gt;
    &lt;creator&gt; Elliotte Rusty Harold &lt;/creator&gt;
    &lt;description&gt;
      A list of famous impressionist paintings organized
      by painter and date
    &lt;/description&gt;
    &lt;date&gt;2000-08-22&lt;/date&gt;
  &lt;/rdf:Description&gt;
&lt;/rdf:RDF&gt;</pre></blockquote>

<p>Bindings have scope within the element where they're
declared and within its contents. The <tt class="literal">xmlns:rdf</tt>
attribute declares the <tt class="literal">rdf</tt> prefix for the
<tt class="literal">rdf:RDF</tt> element, as well as its child elements. An
RDF processor will recognize <tt class="literal">rdf:RDF</tt> and
<tt class="literal">rdf:Description</tt> as RDF elements because both have
prefixes bound to the particular URI specified by the RDF
specification. It will not consider the <tt class="literal">title</tt>,
<tt class="literal">creator</tt>, <tt class="literal">description</tt>, and
<tt class="literal">date</tt> elements to be RDF elements because they do
not have prefixes bound to the <em class="emphasis">http://www.w3.org/TR/REC-rdf-syntax#</em> URI.
</p>

<p>The prefix can be declared in the topmost element that uses the
prefix or in any ancestor thereof. This may be the root element of
the document, or it may be an element at a lower level. For instance,
the Dublin Core elements could be attached to the <a href="../../../../../../purl.org/dc/">http://purl.org/dc/</a> namespace by adding an
<tt class="literal">xmlns:dc</tt> attribute to the
<tt class="literal">rdf:Description</tt> element, as shown in <a href="ch04_02.htm">Example 4-3</a>, since all Dublin Core elements in this
document appear inside a single <tt class="literal">rdf:Description</tt>
element. In other documents that spread the elements out more, it
might be more convenient to put the namespace declaration on the root
element. If necessary, a single element can include multiple
namespace declarations for different namespaces.
</p>

<a name="xmlnut2-CHP-4-EX-3" /><div class="example">
<h4 class="objtitle">Example 4-3. A document containing both SVG and XLinks </h4>
<blockquote><pre class="code">&lt;?xml version="1.0" encoding="ISO-8859-1" standalone="yes"?&gt;
&lt;catalog&gt;

  &lt;rdf:RDF xmlns:rdf="http://www.w3.org/TR/REC-rdf-syntax#"&gt;
<b class="emphasis-bold">    &lt;rdf:Description xmlns:dc="http://purl.org/dc/"</b>
<b class="emphasis-bold">       about="http://www.cafeconleche.org/examples/impressionists.xml"&gt;</b>
      &lt;dc:title&gt; Impressionist Paintings &lt;/dc:title&gt;
      &lt;dc:creator&gt; Elliotte Rusty Harold &lt;/dc:creator&gt;
      &lt;dc:description&gt;
        A list of famous impressionist paintings organized
        by painter and date
      &lt;/dc:description&gt;
      &lt;dc:date&gt;2000-08-22&lt;/dc:date&gt;
    &lt;/rdf:Description&gt;
  &lt;/rdf:RDF&gt;

  &lt;painting&gt;
    &lt;title&gt;Memory of the Garden at Etten&lt;/title&gt;
    &lt;artist&gt;Vincent Van Gogh&lt;/artist&gt;
    &lt;date&gt;November, 1888&lt;/date&gt;
    &lt;description&gt;
      Two women look to the left. A third works in her garden.
    &lt;/description&gt;
  &lt;/painting&gt;

  &lt;painting&gt;
    &lt;title&gt;The Swing&lt;/title&gt;
    &lt;artist&gt;Pierre-Auguste Renoir&lt;/artist&gt;
    &lt;date&gt;1876&lt;/date&gt;
    &lt;description&gt;
      A young girl on a swing. Two men and a toddler watch.
    &lt;/description&gt;
  &lt;/painting&gt;

  &lt;!-- Many more paintings... --&gt;

&lt;/catalog&gt;</pre></blockquote>
</div>

<p>A DTD for this document can include different content specifications
for the <tt class="literal">dc:description</tt> and
<tt class="literal">description</tt> elements. A stylesheet can attach
different styles to <tt class="literal">dc:title</tt> and
<tt class="literal">title</tt>. Software that sorts the catalog by date can
pay attention to the <tt class="literal">date</tt> elements and ignore the
<tt class="literal">dc:date</tt> elements.
</p>

<p>In this example, the elements without prefixes, such as
<tt class="literal">catalog</tt>, <tt class="literal">painting</tt>,
<tt class="literal">description</tt>, <tt class="literal">artist</tt>, and
<tt class="literal">title</tt>, are not in any namespace. Furthermore,
unprefixed attributes (such as the <tt class="literal">about</tt> attribute
of <tt class="literal">rdf:Description</tt> in the previous example) are
never in any namespace. Being an attribute of an element in the
<em class="emphasis">http://www.w3.org/TR/REC-rdf-syntax#</em>
namespace is not sufficient to put the attribute in the <em class="emphasis">http://www.w3.org/TR/REC-rdf-syntax#</em>
namespace. The only way an attribute belongs to a namespace is if it
has a declared prefix, like <tt class="literal">xlink:type</tt> and
<tt class="literal">xlink:href</tt>.
</p>

<p>It is possible to redefine a prefix within a document so that in one
element the prefix refers to one namespace URI, while in another
element it refers to a different namespace URI. In this case, the
closest ancestor element that declares the prefix takes precedence.
However, in most cases redefining prefixes is a very bad idea that
only leads to confusion and is not something you should actually
<a name="IXTR3-85" />
<a name="IXTR3-86" />
<a name="IXTR3-87" />do.
</p>

</div>
<a name="xmlnut2-CHP-4-SECT-2.3" /><div class="sect2">
<h3 class="sect2">4.2.3. Namespace URIs</h3>

<p>Many
<a name="IXT-4-239515" />XML
applications have customary prefixes. For example,
<a name="IXT-4-239516" />SVG elements often use the prefix
<tt class="literal">svg</tt>, and RDF elements often have the prefix
<tt class="literal">rdf</tt>. However, these prefixes are simply
conventions and can be changed based on necessity, convenience, or
whim. Before a prefix can be used, it must be bound to a URI like
<em class="emphasis">http://www.w3.org/2000/svg</em> or <em class="emphasis">http://www.w3.org/1999/02/22-rdf-syntax-ns#</em>.
It is these URIs that are standardized, not the prefixes. The prefix
can change as long as the URI stays the same. An RDF processor looks
for the RDF URI, not any particular prefix. As long as nobody outside
the <em class="emphasis">w3.org</em> domain uses namespace
URIs in the <em class="emphasis">w3.org</em> domain, and as
long as the W3C can keep a careful eye on what its people are using
for namespaces, all conflicts can be avoided.
</p>

<p>Namespace URIs do not necessarily point to any actual document or
page. In fact, they don't have to use the
<em class="emphasis">http</em> scheme. They might even use
some other protocol like <em class="emphasis">mailto</em>
in which URIs don't even point to documents.
However, if you're defining your own namespace using
an <em class="emphasis">http</em> URI, it would not be a
bad idea to place some documentation for the specification at the
namespace URI. The W3C got tired of receiving broken-link reports for
the namespace URIs in their specifications, so they added some simple
pages at their namespace URIs. For more formal purposes that offer
some hope of automated resolution and other features, you can place a
<a name="IXT-4-239517" />Resource Directory Description Language
(RDDL) document at the namespace URI. This possibility will be
discussed further in <a href="ch14_01.htm">Chapter 14</a>. You are by no
means required to do this, though. Many namespace URIs lead to
404-Not Found errors when you actually plug them into a web browser.
Namespace URIs are purely formal identifiers. They are not the
addresses of a page, and they are not meant to be followed as links.
</p>

<p>Parsers
<a name="IXT-4-239518" />compare namespace URIs on a
character-by-character basis. If the URIs differ in even a single
normally insignificant place, then they define separate namespaces.
For instance, <em class="emphasis">http://www.w3.org/1999/02/22-rdf-syntax-ns#</em>,
<em class="emphasis">http://WWW.W3.ORG/1999/02/22-rdf-syntax-ns#</em>,
<em class="emphasis">http://www.w3.org/1999/02/22-rdf-syntax-ns/</em>,
and <em class="emphasis">http://www.w3.org/1999/02/22-rdf-syntax-ns/index.rdf</em>
all point to the same page. However, only the first is the correct
namespace name for the RDF. These four URLs identify four separate
namespaces.
</p>

</div>
<a name="xmlnut2-CHP-4-SECT-2.4" /><div class="sect2">
<h3 class="sect2">4.2.4. Setting a Default Namespace with the xmlns Attribute</h3>

<p>You <a name="IXT-4-239519" /> <a name="IXT-4-239520" /> <a name="IXT-4-239521" />often
<a name="IXT-4-239522" />know
<a name="IXT-4-239523" />that all the content of a particular
element will come from a particular XML application. For instance,
inside an <a name="IXT-4-239524" />SVG <tt class="literal">svg</tt>
element, you're only likely to find other SVG
elements. You can indicate that an unprefixed element and all its
unprefixed descendant elements belong to a particular namespace by
attaching an <tt class="literal">xmlns</tt> attribute with no prefix to the
top element. For example:
</p>

<blockquote><pre class="code">&lt;svg xmlns="http://www.w3.org/2000/svg"
     width="12cm" height="10cm"&gt;
  &lt;ellipse rx="110" ry="130" /&gt;
  &lt;rect x="4cm" y="1cm" width="3cm" height="6cm" /&gt;
&lt;/svg&gt;</pre></blockquote>

<p>Here, although no elements have any prefixes, the
<tt class="literal">svg</tt>, <tt class="literal">ellipse</tt>, and
<tt class="literal">rect</tt> elements are in the
<em class="emphasis">http://www.w3.org/2000/svg</em> namespace.
</p>

<p>The attributes are a different story. Default namespaces only apply
to elements, not to attributes. Thus in the previous example the
<tt class="literal">width</tt>, <tt class="literal">height</tt>,
<tt class="literal">rx</tt>, <tt class="literal">ry</tt>, <tt class="literal">x</tt>,
and <tt class="literal">y</tt> attributes are not in any namespace.
</p>

<p>You can change the default namespace within a particular element by
adding an <tt class="literal">xmlns</tt> attribute to the element. <a href="ch04_02.htm">Example 4-4</a> is an XML document that initially sets the
default namespace to <em class="emphasis">http://www.w3.org/1999/xhtml</em> for all the
XHTML elements. This namespace declaration applies within most of the
document. However, the <tt class="literal">svg</tt> element has an
<tt class="literal">xmlns</tt> attribute that resets the default namespace
to <em class="emphasis">http://www.w3.org/2000/svg</em> for itself and its
content. The XLink information is included in attributes, however, so
these must be placed in the XLink namespace using explicit prefixes.
</p>

<a name="xmlnut2-CHP-4-EX-4" /><div class="example">
<h4 class="objtitle">Example 4-4. An XML document that uses default namespaces </h4>
<blockquote><pre class="code">&lt;?xml version="1.0"?&gt;
&lt;html xmlns="http://www.w3.org/1999/xhtml"
      xmlns:xlink="http://www.w3.org/1999/xlink"&gt;
  &lt;head&gt;&lt;title&gt;Three Namespaces&lt;/title&gt;&lt;/head&gt;
  &lt;body&gt;
    &lt;h1 align="center"&gt;An Ellipse and a Rectangle&lt;/h1&gt;
    &lt;svg xmlns="http://www.w3.org/2000/svg"
         width="12cm" height="10cm"&gt;
      &lt;ellipse rx="110" ry="130" /&gt;
      &lt;rect x="4cm" y="1cm" width="3cm" height="6cm" /&gt;
    &lt;/svg&gt;
    &lt;p xlink:type="simple" xlink:href="ellipses.html"&gt;
      More about ellipses
    &lt;/p&gt;
    &lt;p xlink:type="simple" xlink:href="rectangles.html"&gt;
      More about rectangles
    &lt;/p&gt;
    &lt;hr/&gt;
    &lt;p&gt;Last Modified May 13, 2000&lt;/p&gt;
  &lt;/body&gt;
&lt;/html&gt;</pre></blockquote>
</div>

<p>The default namespace does not apply to any elements or attributes
with prefixes. These still belong to whatever namespace to which
their prefix is bound. However, an unprefixed child element of a
prefixed element still belongs to the default namespace.
</p>

</div>
<a name="xmlnut2-CHP-4-SECT-2.5" /><div class="sect2">
<h3 class="sect2">4.2.5. Attribute Declarations for xmlns</h3>

<p>When namespaces are only being used to identify the elements and
attributes from a particular XML application, and not to distinguish
different elements with the same name, a DTD can attach a fixed
<tt class="literal">xmlns</tt> <a name="IXT-4-239525" />attribute to the primary container
elements for an application so that everything is placed in the right
namespace without explicit <tt class="literal">xmlns</tt> attributes in the
document. For example, this <a name="IXT-4-239526" /><tt class="literal">ATTLIST</tt> declaration
fixes the default namespace of all <tt class="literal">svg</tt> elements as
<em class="emphasis">http://www.w3.org/2000/</em>:
</p>

<blockquote><pre class="code">&lt;!ATTLIST svg xmlns CDATA #FIXED "http://www.w3.org/2000/"&gt;</pre></blockquote>

<p>This allows you to omit <tt class="literal">xmlns</tt> attributes from all
your <tt class="literal">svg</tt> elements.
</p>

<p>A document does not need to be valid to take advantage of this. All
that's required is that the parser read the DTD. All
parsers will read the internal DTD subset and process any such
<tt class="literal">ATTLIST</tt> declarations they find there. A few
nonvalidating parsers may skip external DTD subsets, and thus get
confused. Ideally, you should use a parser that can validate so that
it will at least be able to read the external DTD subset, though you
might use it with validation turned <a name="IXTR3-88" />off. 
</p>

</div>


<hr width="684" align="left" />
<div class="navbar"><table width="684" border="0"><tr><td align="left" valign="top" width="228"><a href="ch04_01.htm"><img src="../gifs/txtpreva.gif" alt="Previous" border="0" /></a></td><td align="center" valign="top" width="228"><a href="index.htm"><img src="../gifs/txthome.gif" alt="Home" border="0" /></a></td><td align="right" valign="top" width="228"><a href="ch04_03.htm"><img src="../gifs/txtnexta.gif" alt="Next" border="0" /></a></td></tr><tr><td align="left" valign="top" width="228">4. Namespaces </td><td align="center" valign="top" width="228"><a href="index/index.htm"><img src="../gifs/index.gif" alt="Book Index" border="0" /></a></td><td align="right" valign="top" width="228">4.3. How Parsers Handle Namespaces</td></tr></table></div>
<hr width="684" align="left" />

<img src="../gifs/navbar.gif" usemap="#library-map" border="0" alt="Library Navigation Links" />
<p><p><font size="-1"><a href="copyrght.htm">Copyright &copy; 2002</a> O'Reilly &amp; Associates. All rights reserved.</font></p>

<map name="library-map">
<area shape="rect" coords="0,0,85,93" href="../index.htm"><area shape="rect" coords="85,0,180,98" href="../sax2/index.htm"><area shape="rect" coords="182,-1,261,100" href="index.htm"><area shape="rect" coords="263,1,384,96" href="../jxml/index.htm"><area shape="rect" coords="386,1,463,100" href="../jxslt/index.htm"><area shape="rect" coords="466,1,533,112" href="../xslt/index.htm"><area shape="rect" coords="535,-1,610,108" href="../schema/index.htm"><area shape="rect" coords="613,1,696,121" href="../pxml/index.htm">
</map>

</body></html>