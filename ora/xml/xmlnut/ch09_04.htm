<html><head><title>Predicates (XML in a Nutshell, 2nd Edition)</title><link rel="stylesheet" type="text/css" href="../style/style1.css" />

<meta name="DC.Creator" content="Elliotte Rusty Harold and W. Scott Means" /><meta name="DC.Format" content="text/xml" scheme="MIME" /><meta name="DC.Language" content="en-US" /><meta name="DC.Publisher" content="O'Reilly &amp; Associates, Inc." /><meta name="DC.Source" scheme="ISBN" content="0-596-00292-0" /><meta name="DC.Subject.Keyword" content="stuff" /><meta name="DC.Title" content="XML in a Nutshell, 2nd Edition" /><meta name="DC.Type" content="Text.Monograph" />

</head><body bgcolor="#ffffff">

<img src="gifs/smbanner.gif" usemap="#banner-map" border="0" alt="Book Home" /><map name="banner-map"><area shape="rect" coords="1,-2,616,66" href="index.htm" alt="XML in a Nutshell" /><area shape="rect" coords="629,-11,726,25" href="jobjects/fsearch.htm" alt="Search this book" /></map>

<div class="navbar"><table width="684" border="0"><tr><td align="left" valign="top" width="228"><a href="ch09_03.htm"><img src="../gifs/txtpreva.gif" alt="Previous" border="0" /></a></td><td align="center" valign="top" width="228" /><td align="right" valign="top" width="228"><a href="ch09_05.htm"><img src="../gifs/txtnexta.gif" alt="Next" border="0" /></a></td></tr></table></div>



<h2 class="sect1">9.4. Predicates</h2>

<p>In <a name="IXT-9-239013" />
<a name="IXT-9-239014" />
<a name="IXT-9-239015" />general, an XPath expression may refer
to more than one node. Sometimes this is what you want, but sometimes
you want to further winnow the node-set. You want to select only some
of the nodes the expression returns. Each step in a location path may
(but does not have to) have a predicate that selects from the node
list current at that step in the expression. The predicate contains a
Boolean expression, which is tested for each node in the context node
list. If the expression is false, then that node is deleted from the
list. Otherwise, it's retained.
</p>

<p>For example, suppose you want to find all
<tt class="literal">profession</tt> elements whose value is
"physicist." The XPath expression
<tt class="literal">//profession[. = "physicist"]</tt> does this. Here the
period stands for the string value of the current node, the same as
would be returned by <tt class="literal">xsl:value-of</tt>. You can use
single quotes around the string instead of double quotes, which is
often useful when the XPath expression appears inside a double-quoted
attribute value, for example, <tt class="literal">&lt;xsl:apply-templates
select="//profession[.= 'physicist']" /&gt;</tt>.
</p>

<p>If you want to ask for all <tt class="literal">person</tt> elements that
have a <tt class="literal">profession</tt> child element with the value
"physicist," you'd
use the XPath expression
<tt class="literal">//person[profession="physicist"]</tt>. If you want to
find the <tt class="literal">person</tt> element with <tt class="literal">id</tt>
p4567, put an <tt class="literal">@</tt> in front of the name of the
attribute as in <tt class="literal">//person[@id="p4567"]</tt>.
</p>

<p>As well as the equals sign, XPath supports a full complement of
<a name="IXT-9-239016" /> <a name="IXT-9-239017" />relational operators
including <tt class="literal">&lt;</tt>, <tt class="literal">&gt;</tt>,
<tt class="literal">&gt;=</tt>, <tt class="literal">&lt;=</tt>, and
<tt class="literal">!=</tt>. For instance, the expression
<tt class="literal">//person[@born&lt;=1976]</tt> locates all
<tt class="literal">person</tt> elements in the document with a
<tt class="literal">born</tt> attribute whose numeric value is less than or
equal to 1976. Note that if this expression is used inside an XML
document, you still have to escape the less-than sign as
<tt class="literal">&amp;lt;</tt>, for example,
<tt class="literal">&lt;xsl:apply-templates select="//person[@born
&amp;lt;=</tt> <tt class="literal">1976]"/&gt;</tt>. XPath
doesn't get any special exemptions from the normal
well-formedness rules of XML. On the other hand, if the XPath
expression appears outside of an XML document, as it may in some uses
of XPointer, then you may not need to escape the less-than sign.
</p>

<p>XPath also provides Boolean <tt class="literal">and</tt> and
<tt class="literal">or</tt> operators to combine expressions logically. For
example, the XPath expression <tt class="literal">//person[@born&lt;=1920 and
@born&gt;=1910]</tt> selects all <tt class="literal">person</tt>
elements with <tt class="literal">born</tt> attribute values between 1910
and 1920 inclusive. <tt class="literal">//name[first_name="Richard" or
first_name="Dick"]</tt> selects all <tt class="literal">name</tt>
elements that have a <tt class="literal">first_name</tt> child with the
value of either Richard or Dick.
</p>

<p>In some cases the predicate may not be a Boolean, but it can be
converted to one in a straightforward fashion. Predicates that
evaluate to numbers are true if they're equal to the
position of the context node, otherwise false. Predicates that
indicate node-sets are true if the node-set is nonempty and false if
it's empty. String values are true if the string
isn't the empty string, false if it is. For example,
suppose you want to select only those <tt class="literal">name</tt>
elements in the document that have a
<tt class="literal">middle_initial</tt> child element. The XPath expression
<tt class="literal">//name</tt> selects all <tt class="literal">name</tt>
elements. The XPath expression
<tt class="literal">//name[middle_initial]</tt> selects all
<tt class="literal">name</tt> elements and then checks each one to see if
it has a <tt class="literal">middle_initial</tt> child element. Only those
that do are retained. When applied to <a href="ch09_01.htm">Example 9-1</a>,
this expression indicates <a name="IXT-9-239018" />Richard P. Feynman's
<tt class="literal">name</tt> element but not <a name="IXT-9-239019" />Alan Turing's.
</p>

<p>Any or all of the location steps in a location path can have
predicates. For example, the XPath expression
<tt class="literal">/people/person[@born &lt; 1950]/name[first_name =</tt>
<tt class="literal">"Alan"]</tt> first selects all
<tt class="literal">people</tt> child elements of the root element (of
which there's exactly one in <a href="ch09_01.htm">Example 9-1</a>). Then from those it chooses all
<tt class="literal">person</tt> elements whose <tt class="literal">born</tt>
attribute has a value numerically less than 1950. Finally, from that
group of elements, it selects all <tt class="literal">name</tt> child
elements that have a <tt class="literal">first_name</tt> child element with
the value <a name="IXTR3-26" />"Alan."
</p>



<hr width="684" align="left" />
<div class="navbar"><table width="684" border="0"><tr><td align="left" valign="top" width="228"><a href="ch09_03.htm"><img src="../gifs/txtpreva.gif" alt="Previous" border="0" /></a></td><td align="center" valign="top" width="228"><a href="index.htm"><img src="../gifs/txthome.gif" alt="Home" border="0" /></a></td><td align="right" valign="top" width="228"><a href="ch09_05.htm"><img src="../gifs/txtnexta.gif" alt="Next" border="0" /></a></td></tr><tr><td align="left" valign="top" width="228">9.3. Compound Location Paths</td><td align="center" valign="top" width="228"><a href="index/index.htm"><img src="../gifs/index.gif" alt="Book Index" border="0" /></a></td><td align="right" valign="top" width="228">9.5. Unabbreviated Location Paths</td></tr></table></div>
<hr width="684" align="left" />

<img src="../gifs/navbar.gif" usemap="#library-map" border="0" alt="Library Navigation Links" />
<p><p><font size="-1"><a href="copyrght.htm">Copyright &copy; 2002</a> O'Reilly &amp; Associates. All rights reserved.</font></p>

<map name="library-map">
<area shape="rect" coords="0,0,85,93" href="../index.htm"><area shape="rect" coords="85,0,180,98" href="../sax2/index.htm"><area shape="rect" coords="182,-1,261,100" href="index.htm"><area shape="rect" coords="263,1,384,96" href="../jxml/index.htm"><area shape="rect" coords="386,1,463,100" href="../jxslt/index.htm"><area shape="rect" coords="466,1,533,112" href="../xslt/index.htm"><area shape="rect" coords="535,-1,610,108" href="../schema/index.htm"><area shape="rect" coords="613,1,696,121" href="../pxml/index.htm">
</map>

</body></html>