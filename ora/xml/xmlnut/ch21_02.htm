<html><head><title>Schema Elements (XML in a Nutshell, 2nd Edition)</title><link rel="stylesheet" type="text/css" href="../style/style1.css" />

<meta name="DC.Creator" content="Elliotte Rusty Harold and W. Scott Means" /><meta name="DC.Format" content="text/xml" scheme="MIME" /><meta name="DC.Language" content="en-US" /><meta name="DC.Publisher" content="O'Reilly &amp; Associates, Inc." /><meta name="DC.Source" scheme="ISBN" content="0-596-00292-0" /><meta name="DC.Subject.Keyword" content="stuff" /><meta name="DC.Title" content="XML in a Nutshell, 2nd Edition" /><meta name="DC.Type" content="Text.Monograph" />

</head><body bgcolor="#ffffff">

<img src="gifs/smbanner.gif" usemap="#banner-map" border="0" alt="Book Home" /><map name="banner-map"><area shape="rect" coords="1,-2,616,66" href="index.htm" alt="XML in a Nutshell" /><area shape="rect" coords="629,-11,726,25" href="jobjects/fsearch.htm" alt="Search this book" /></map>

<div class="navbar"><table width="684" border="0"><tr><td align="left" valign="top" width="228"><a href="ch21_01.htm"><img src="../gifs/txtpreva.gif" alt="Previous" border="0" /></a></td><td align="center" valign="top" width="228" /><td align="right" valign="top" width="228"><a href="ch21_03.htm"><img src="../gifs/txtnexta.gif" alt="Next" border="0" /></a></td></tr></table></div>



<h2 class="sect1">21.2. Schema Elements</h2>

<p>The <a name="xmlnut2-IDXTERM-2001" /> <a name="xmlnut2-IDXTERM-2002" />W3C XML Schema
Language defines 42 elements, which naturally divide into several
categories:
</p>

<dl>
<dt><i>One root element</i></dt>
<dd>
<tt class="literal">xs:schema</tt></p>
</dd>


<dt><i>Three declaration elements</i></dt>
<dd>
<tt class="literal">xs:element</tt>, <tt class="literal">xs:attribute</tt>, and
<tt class="literal">xs:notation</tt>
</p>
</dd>


<dt><i>Eight elements for defining types</i></dt>
<dd>
<tt class="literal">xs:complexContent</tt>,
<tt class="literal">xs:complexType</tt>, <tt class="literal">xs:extension</tt>,
<tt class="literal">xs:list</tt>, <tt class="literal">xs:restriction</tt>,
<tt class="literal">xs:simpleContent</tt>,
<tt class="literal">xs:simpleType</tt>, and <tt class="literal">xs:union</tt>
</p>
</dd>


<dt><i>Seven elements for defining content models</i></dt>
<dd>
<tt class="literal">xs:all</tt>, <tt class="literal">xs:any</tt>,
<tt class="literal">xs:anyAttribute</tt>,
<tt class="literal">xs:attributeGroup</tt>, <tt class="literal">xs:choice</tt>,
<tt class="literal">xs:group</tt>, and <tt class="literal">xs:sequence</tt>
</p>
</dd>


<dt><i>Five elements for specifying identity constraints</i></dt>
<dd>
<tt class="literal">xs:field</tt>, <tt class="literal">xs:key</tt>,
<tt class="literal">xs:keyref</tt>, <tt class="literal">xs:selector</tt>, and
<tt class="literal">xs:unique</tt>
</p>
</dd>


<dt><i>Three elements for assembling schemas out of component parts</i></dt>
<dd>
<tt class="literal">xs:import</tt>, <tt class="literal">xs:include</tt>, and
<tt class="literal">xs:redefine</tt>
</p>
</dd>


<a name="IXT-21-239108" /><a name="IXT-21-239109" /><dt><b>12 facet elements for constraining 
simple types</b></dt>
<dd>
<tt class="literal">xs:enumeration</tt>,
<tt class="literal">xs:fractionDigits</tt>, <tt class="literal">xs:length</tt>,
<tt class="literal">xs:maxExclusive</tt>,
<tt class="literal">xs:maxInclusive</tt>, <tt class="literal">xs:maxLength</tt>,
<tt class="literal">xs:minExclusive</tt>,
<tt class="literal">xs:minInclusive</tt>, <tt class="literal">xs:minLength</tt>,
<tt class="literal">xs:pattern</tt>, <tt class="literal">xs:totalDigits</tt>, and
<tt class="literal">xs:whiteSpace</tt>
</p>
</dd>


<dt><i>Three elements for documenting schemas</i></dt>
<dd>
<tt class="literal">xs:appinfo</tt>, <tt class="literal">xs:annotation</tt>, and
<tt class="literal">xs:documentation</tt>
</p>
</dd>

</dl>

<p>Elements in this section are arranged alphabetically from
<tt class="literal">xs:any</tt> to <tt class="literal">xs:whiteSpace</tt>. Each
element begins with a sample implementation in the following form:
</p>

<blockquote><pre class="code">&lt;xs:elementName
   attribute1 = "<tt><em class="replaceable"><tt>allowed attribute values</tt></em></tt>"
   attribute2 = "<tt><em class="replaceable"><tt>allowed attribute values</tt></em></tt>"
&gt;
  &lt;!-- Content model --&gt;
&lt;/xs:elementName&gt;</pre></blockquote>

<p>Most attribute values can be expressed as one of the 44 XML Schema
built-in simple types, such as <tt class="literal">xs:string</tt>,
<tt class="literal">xs:ID</tt>, or <tt class="literal">xs:integer</tt>. Some
attribute values are specified as an enumeration of the legal values
in the form <tt class="literal">( value1 |</tt>
<tt class="userinput"><b>value2</b></tt> <tt class="literal">|</tt> <tt class="literal">value3 |
etc. )</tt>. In this case, the default value, if there is one,
is given in boldface.
</p>

<p>Element content models are given in a comment in the form they might
appear in an <tt class="literal">ELEMENT</tt> declaration in a DTD. For
example, an <tt class="literal">xs:all</tt> element may contain a single
optional <tt class="literal">xs:annotation</tt> child element followed by
zero or more <tt class="literal">xs:element</tt> elements. Thus its content
model is written like this:
</p>

<blockquote><pre class="code">&lt;!-- ( xs:annotation?, xs:element* ) --&gt;</pre></blockquote>

<a name="ch21-4-fm2xml" /><a name="IXT-21-239110" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b>xs:all</b></font></td><td align="right"><i></i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><table width="515" border="0" cellpadding="5"><tr><td align="left" /><td align="right" /></tr></table><blockquote><pre class="code">&lt;xs:all
  id = "<tt><em class="replaceable"><tt>ID</tt></em></tt>"
  maxOccurs = "<tt class="userinput"><b>1</b></tt>"
  minOccurs = "(0 | <tt class="userinput"><b>1</b></tt>)"&gt;
  &lt;!-- ( xs:annotation?, xs:element* ) --&gt;
&lt;/xs:all&gt;</pre></blockquote><p>The <tt class="literal">xs:all</tt><a name="IXT-21-239110" /> element indicates that every element
represented by one of its child <tt class="literal">xs:element</tt>
elements must appear. However, the order of the child elements in the
instance element does not matter. For example, an
<tt class="literal">xs:all</tt> element can require that each
<tt class="literal">FullName</tt> element have exactly one
<tt class="literal">FirstName</tt> child and exactly one
<tt class="literal">LastName</tt> child, but that the order of the two
child elements does not matter; the first name can come first or the
last name can come first.
</p><p>The <tt class="literal">xs:all</tt> element must be the top group in its
content model (i.e., an <tt class="literal">xs:group</tt>,
<tt class="literal">xs:choice</tt>, or <tt class="literal">xs:sequence</tt>
cannot contain an <tt class="literal">xs:all</tt> element). The complete
group represented by the <tt class="literal">xs:all</tt> element can occur
either zero or one time as indicated by its
<tt class="literal">minOccurs</tt> and <tt class="literal">maxOccurs</tt>
attributes. By default it must occur exactly once. Furthermore, the
<tt class="literal">minOccurs</tt> attribute of each of the individual
<tt class="literal">xs:element</tt> elements inside the
<tt class="literal">xs:all</tt> element must also be set to either 0 or 1,
and the <tt class="literal">maxOccurs</tt> attribute of each of these
elements must be set to 1. <tt class="literal">xs:all</tt> cannot indicate,
for example, that a <tt class="literal">FullName</tt> element must contain
between zero and five <tt class="literal">FirstName</tt> s and between one
and three <tt class="literal">LastName</tt> s in any order.
</p></div>

<a name="ch21-5-fm2xml" /><a name="IXT-21-239111" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b>xs:annotation</b></font></td><td align="right"><i></i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><table width="515" border="0" cellpadding="5"><tr><td align="left" /><td align="right" /></tr></table><blockquote><pre class="code">&lt;xs:annotation 
  id = "<tt><em class="replaceable"><tt>ID</tt></em></tt>"&gt;
  &lt;!-- ( xs:appinfo | xs:documentation )* --&gt;
&lt;/xs:annotation&gt;</pre></blockquote><p>The
<tt class="literal">xs:annotation</tt><a name="IXT-21-239111" /> element is ignored by schema
validators. Its purpose is to provide metainformation about the
schema or schema element in which it appears. Information intended
for human readers is placed in <tt class="literal">xs:documentation</tt>
child elements. Information intended for software programs is placed
in <tt class="literal">xs:appinfo</tt> child elements.
</p></div>

<a name="ch21-6-fm2xml" /><a name="IXT-21-239112" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b>xs:any</b></font></td><td align="right"><i></i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><table width="515" border="0" cellpadding="5"><tr><td align="left" /><td align="right" /></tr></table><blockquote><pre class="code">&lt;xs:any
  id = "<tt><em class="replaceable"><tt>ID</tt></em></tt>"
  maxOccurs = "<tt><em class="replaceable"><tt>nonNegativeInteger</tt></em></tt> | unbounded"
  minOccurs = "<tt><em class="replaceable"><tt>nonNegativeInteger</tt></em></tt>"
  namespace = " <tt><em class="replaceable"><tt>##any</em></tt> | <tt><em class="replaceable">##other</em></tt> | <tt><em class="replaceable">anyURI</em></tt>* <tt><em class="replaceable">##targetNamespace</em></tt>? <tt><em class="replaceable">##local?</tt></em></tt> "
  processContents = " lax | skip | strict "&gt;
  &lt;!-- xs:annotation? --&gt;
&lt;/xs:any&gt;</pre></blockquote><p>The wildcard element
<tt class="literal">xs:any</tt><a name="IXT-21-239112" /> is useful when writing schemas for
languages such as XSLT that routinely include markup from multiple
vocabularies that are unknown when the schema is written. It
indicates that between <tt class="literal">minOccurs</tt> and
<tt class="literal">maxOccurs</tt>, elements from one or more namespaces
identified by the <tt class="literal">namespace</tt> attribute may appear
at that position in a content model. As well as literal namespace
URIs, the special value <tt class="literal">##targetNamespace</tt> can be
included in the list to indicate that any element from the
schema's target namespace can be used. The special
value <tt class="literal">##local</tt> can be included in the list to
indicate that elements not in any namespace can be used. Instead of
the list of namespace URIs, you can use the special value
<tt class="literal">##any</tt> to indicate that all elements from any
namespace or no namespace are allowed, or the special value
<tt class="literal">##other</tt> to indicate that elements from namespaces
other than the schema's target namespace can be
used.
</p><p>The <tt class="literal">processContents</tt> attribute indicates whether
the elements represented by <tt class="literal">xs:any</tt> have to be
declared or whether they can be completely unfamiliar to the schema.
It has one of these three values:
</p><dl>
<dt><tt class="literal">strict</tt> </dt>
<dd>
Elements represented by this <tt class="literal">xs:any</tt> element must
be declared or have an <tt class="literal">xsi:type</tt> attribute.
Furthermore, the element must be valid according to its declaration
or type.
</p>
</dd>


<dt><tt class="literal">skip</tt> </dt>
<dd>
Elements represented by this <tt class="literal">xs:any</tt> element need
not be declared in the schema and need not be valid even if they are
declared.
</p>
</dd>


<dt><tt class="literal">lax</tt> </dt>
<dd>
Elements represented by this <tt class="literal">xs:any</tt> element must
be validated if they are declared or if they have an
<tt class="literal">xsi:type</tt> attribute, but must not be validated if
they are neither declared nor have an <tt class="literal">xsi:type</tt>
attribute.
</p>
</dd>

</dl><p>The default value is <tt class="literal">strict</tt>.</p></div>

<a name="ch21-7-fm2xml" /><a name="IXT-21-239113" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b>xs:anyAttribute</b></font></td><td align="right"><i></i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><table width="515" border="0" cellpadding="5"><tr><td align="left" /><td align="right" /></tr></table><blockquote><pre class="code">&lt;xs:anyAttribute
  id = "<em class="replaceable"><tt>ID</tt></em>"
  namespace = "<tt class="userinput"><b>##any</b></tt> | ##other | <em class="replaceable"><tt>anyURI</tt></em>* ##targetNamespace? ##local?"
  processContents = "(lax | skip | <tt class="userinput"><b>strict</b></tt>)" &gt;
  &lt;!-- (xs:annotation?) --&gt;
&lt;/xs:anyAttribute&gt;</pre></blockquote><p>The
<tt class="literal">xs:anyAttribute</tt><a name="IXT-21-239113" /> element appears inside
<tt class="literal">xs:complexType</tt> elements, where it indicates that
elements of that type can have any attribute from one or more
namespaces. It can also appear inside
<tt class="literal">xs:attributeGroup</tt> elements, where it adds
attributes from one or more namespaces as potential members of the
group. The <tt class="literal">namespace</tt> attribute contains a
whitespace-separated list of the namespace URIs that are allowed for
this element's attributes. As well as literal
namespace URIs, the special value
<tt class="literal">##targetNamespace</tt> can be included in the list to
indicate that any attribute from the schema's target
namespace can be used. The special value <tt class="literal">##local</tt>
can be included in the list, indicating that attributes not in any
namespace (unprefixed attributes) may be used. Instead of the list of
namespace URIs, you can use the special value
<tt class="literal">##any</tt> to indicate that all attributes from any
namespace are allowed or the special value <tt class="literal">##other</tt>
to indicate that attributes from namespaces other than the
schema's target namespace can be used.
</p><p>The <tt class="literal">processContents</tt> attribute indicates whether
the attributes themselves have to be declared, generally as top-level
attributes. It has one of these three values:
</p><dl>
<dt><tt class="literal">strict</tt> </dt>
<dd>
Attributes represented by this <tt class="literal">xs:anyAttribute</tt>
element must be declared, and the attribute must be valid according
to its declaration. This is the default.
</p>
</dd>


<dt><tt class="literal">lax</tt></dt>
<dd>
Attributes represented by this <tt class="literal">xs:anyAttribute</tt>
element must be validated if they are declared, but must not be
validated if they are not declared.
</p>
</dd>


<dt><tt class="literal">skip</tt> </dt>
<dd>
Attributes represented by this <tt class="literal">xs:anyAttribute</tt>
element need not be declared in the schema and need not be valid even
if they are declared.
</p>
</dd>

</dl></div>

<a name="ch21-8-fm2xml" /><a name="IXT-21-239114" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b>xs:appinfo</b></font></td><td align="right"><i></i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><table width="515" border="0" cellpadding="5"><tr><td align="left" /><td align="right" /></tr></table><blockquote><pre class="code">&lt;xs:appinfo
  source = "<tt><em class="replaceable"><tt>anyURI</tt></em></tt>"&gt;
  &lt;!-- any well-formed XML markup --&gt;
&lt;/xs:appinfo&gt;</pre></blockquote><p>The <tt class="literal">xs:appinfo</tt><a name="IXT-21-239114" /> element appears exclusively inside
<tt class="literal">xs:annotation</tt> elements, where it provides
machine-readable information about the schema or schema element
it's documenting. It has no effect on schema
validation. It can contain absolutely any XML markup: an XSLT
stylesheet for the schema, a schema for the schema, a schema in a
different schema language such as Schematron, or anything else you
can imagine. The only restriction is that the contents must be
well-formed. Alternately, instead of or in addition to including this
information directly, the <tt class="literal">source</tt> attribute can
point to it using a URI.
</p></div>

<a name="ch21-9-fm2xml" /><a name="IXT-21-239115" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b>xs:attribute </b></font></td><td align="right"><i></i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><table width="515" border="0" cellpadding="5"><tr><td align="left" /><td align="right" /></tr></table><blockquote><pre class="code">&lt;xs:attribute
  default = "<tt><em class="replaceable"><tt>string</tt></em></tt>"
  fixed = "<tt><em class="replaceable"><tt>string</tt></em></tt>"
  form = "( qualified | unqualified )
  id = "<tt><em class="replaceable"><tt>ID</tt></em></tt>"
  name = "<tt><em class="replaceable"><tt>NCName</tt></em></tt>"
  ref = "<tt><em class="replaceable"><tt>QName</tt></em></tt>"
  type = "<tt><em class="replaceable"><tt>QName</tt></em></tt>"
  use = "( <tt class="userinput"><b>optional</b></tt> | prohibited | required )"&gt;
  &lt;!-- ( xs:annotation?, xs:simpleType? ) --&gt;
&lt;/xs:attribute&gt;</pre></blockquote><p>The <tt class="literal">xs:attribute</tt> element declares an attribute.
Inside an <tt class="literal">xs:complexType</tt> element it indicates that
elements of that type can have an attribute with the specified name
and type.
</p>
<h4 class="refsect1">Attributes</h4>

<dl>
<dt><tt class="literal">id</tt>, optional</dt>
<dd>
An XML name unique among all of the ID-type attributes in this schema
document.
</p>
</dd>


<dt><tt class="literal">default</tt>, optional</dt>
<dd>
The default value of the attribute reported for those elements in the
instance document that do not contain an explicit specification of
this attribute.
</p>
</dd>


<dt><tt class="literal">fixed</tt>, optional</dt>
<dd>
A default value for this attribute that may not be overridden in the
instance document. An <tt class="literal">xs:attribute</tt> element cannot
have both <tt class="literal">fixed</tt> and <tt class="literal">default</tt>
attributes.
</p>
</dd>


<dt><tt class="literal">form</tt>, optional</dt>
<dd>
If this has the value <tt class="literal">qualified</tt>, then the
attribute must be in the schema's target namespace.
If this has the value <tt class="literal">unqualified</tt>, then the
attribute must not be in any namespace. The default value for this is
set by the <tt class="literal">attributeFormDefault</tt> attribute on the
root <tt class="literal">xs:schema</tt> element.
</p>
</dd>


<dt><tt class="literal">name</tt>, optional</dt>
<dd>
The local name of the attribute. </p>
</dd>


<dt><tt class="literal">ref</tt>, optional</dt>
<dd>
The qualified name of the attribute declared by a top-level
<tt class="literal">xs:attribute</tt> element elsewhere in the schema.
Either the <tt class="literal">name</tt> or <tt class="literal">ref</tt>
attribute should be provided, but not both.
</p>
</dd>


<dt><tt class="literal">type</tt>, optional</dt>
<dd>
The qualified name of the type of the attribute, either a built-in
simple type such as <tt class="literal">xs:integer</tt> or a user-defined
simple type.
</p>
</dd>


<dt><tt class="literal">use</tt>, optional</dt>
<dd>
One of the three keywords, <tt class="literal">optional</tt>,
<tt class="literal">prohibited</tt>, or <tt class="literal">required</tt>, which
have the following meanings:
</p>

<dl>
<dt><tt class="literal">optional</tt></dt>
<dd>
Authors of instance documents may or may not include this attribute
as they choose. This is the default.
</p>
</dd>


<dt><tt class="literal">prohibited</tt></dt>
<dd>
Authors of instance documents must not include this attribute. </p>
</dd>


<dt><tt class="literal">required</tt></dt>
<dd>
Authors of instance documents must include this attribute on all
elements of the requisite type.
</p>
</dd>

</dl>
</dd>

</dl>


<h4 class="refsect1">Contents</h4>


<p>The <tt class="literal">xs:attribute</tt> element may contain a single
<tt class="literal">xs:annotation</tt> element to describe itself. This has
no effect on the attribute type.
</p>

<p>In place of a <tt class="literal">type</tt> attribute, the
<tt class="literal">xs:attribute</tt> element may contain a single
<tt class="literal">xs:simpleType</tt> element that provides an anonymous
type for the attribute derived from a base simple type.
</p>

</div>

<a name="ch21-12-fm2xml" /><a name="IXT-21-239116" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b>xs:attributeGroup</b></font></td><td align="right"><i></i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><table width="515" border="0" cellpadding="5"><tr><td align="left" /><td align="right" /></tr></table><blockquote><pre class="code">&lt;xs:attributeGroup
  id = "<em class="replaceable"><tt>ID</tt></em>"
  name = "<em class="replaceable"><tt>NCName</tt></em>"
  ref = "<em class="replaceable"><tt>QName</tt></em>"&gt;
  &lt;!--
    ( xs:annotation?, (xs:attribute | xs:attributeGroup)*,
      xs:anyAttribute? )
   --&gt;
&lt;/xs:attributeGroup&gt;</pre></blockquote><p>The
<tt class="literal">xs:attributeGroup</tt><a name="IXT-21-239116" /> element is used in two ways. At the top
level of the schema, it has a <tt class="literal">name</tt> attribute and
defines a new attribute group. The attributes in the group are
indicated by the child elements of the
<tt class="literal">xs:attributeGroup</tt> element. Inside an
<tt class="literal">xs:complexType</tt> element or another
<tt class="literal">xs:attributeGroup</tt>, it has a <tt class="literal">ref</tt>
attribute but no <tt class="literal">name</tt> and adds the attributes in
the referenced group to the type or group's list of
attributes.
</p></div>

<a name="ch21-13-fm2xml" /><a name="IXT-21-239117" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b>xs:choice</b></font></td><td align="right"><i></i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><table width="515" border="0" cellpadding="5"><tr><td align="left" /><td align="right" /></tr></table><blockquote><pre class="code">&lt;xs:choice
  id = "<em class="replaceable"><tt>ID</tt></em>"
  maxOccurs = "( <em class="replaceable"><tt>nonNegativeInteger</tt></em> | unbounded )"
  minOccurs = "<em class="replaceable"><tt>nonNegativeInteger</tt></em>"&gt;
  &lt;!--
    ( xs:annotation?, (xs:element | xs:group | xs:choice
    | xs:sequence | xs:any)*)
  --&gt;
&lt;/xs:choice&gt;</pre></blockquote><p>The <tt class="literal">xs:choice</tt><a name="IXT-21-239117" /> element indicates that any element or
group represented by one of its child elements may appear at that
position in the instance document. At least
<tt class="literal">minOccurs</tt> elements from the choice must appear. At
most <tt class="literal">maxOccurs</tt> elements from the choice must
appear. The default for both <tt class="literal">minOccurs</tt> and
<tt class="literal">maxOccurs</tt> is <tt class="literal">1</tt>.
</p></div>

<a name="ch21-14-fm2xml" /><a name="IXT-21-239118" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b>xs:complexContent</b></font></td><td align="right"><i></i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><table width="515" border="0" cellpadding="5"><tr><td align="left" /><td align="right" /></tr></table><blockquote><pre class="code">&lt;xs:complexContent
  id = "<em class="replaceable"><tt>ID</tt></em>"
  mixed = "( true | false )"&gt;
  &lt;!-- ( xs:annotation?, (xs:restriction | xs:extension) ) --&gt;
&lt;/xs:complexContent&gt;</pre></blockquote><p>The
<tt class="literal">xs:complexContent</tt><a name="IXT-21-239118" /> element is used inside
<tt class="literal">xs:complexType</tt> elements to derive a new complex
type from an existing complex type by restriction or extension. When
deriving by extension, the <tt class="literal">mixed</tt> attribute must
have the same value as the base type's
<tt class="literal">mixed</tt> attribute. When deriving by restriction, the
<tt class="literal">mixed</tt> attribute can have the value
<tt class="literal">false</tt> to disallow mixed content that would be
allowed in the base type. It can have the value
<tt class="literal">true</tt> only if the base type allows mixed content.
In other words, a derived type can disallow mixed content
that's allowed in the base type, but cannot allow it
if the base type doesn't already allow it.
</p></div>

<a name="ch21-15-fm2xml" /><a name="IXT-21-239119" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b>xs:complexType</b></font></td><td align="right"><i></i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><table width="515" border="0" cellpadding="5"><tr><td align="left" /><td align="right" /></tr></table><blockquote><pre class="code">&lt;xs:complexType
  abstract = "( true | <tt class="userinput"><b>false</b></tt> )"
  block = "( #all | extension | restriction )"
  final = "( #all | extension | restriction )"
  id = "<em class="replaceable"><tt>ID</tt></em>"
  mixed = "( true | <tt class="userinput"><b>false</b></tt> )"
  name = "<em class="replaceable"><tt>NCName</tt></em>"
  &gt;
  &lt;!-- ( xs:annotation?, (xs:simpleContent | xs:complexContent
       | ((xs:group | xs:all | xs:choice | xs:sequence)?,
         ((xs:attribute | xs:attributeGroup)*, xs:anyAttribute?)))) --&gt;
&lt;/xs:complexType&gt;</pre></blockquote><p>The
<tt class="literal">xs:complexType</tt><a name="IXT-21-239119" /> element defines a new complex type,
that is, an element type that can potentially contain either child
elements, attributes, or both. The valid child elements and
attributes for elements of this type are specified by the contents of
the <tt class="literal">xs:complexType</tt> element. The
<tt class="literal">mixed</tt> attribute specifies whether the complex type
is allowed to contain text interspersed with its child elements. If
the <tt class="literal">xs:complexType</tt> element is a top-level element,
then it has a <tt class="literal">name</tt> attribute and defines a named
type. Otherwise, if the <tt class="literal">xs:complexType</tt> element
appears inside an <tt class="literal">xs:element</tt> element, then it does
not have a <tt class="literal">name</tt> attribute and defines an anonymous
type for that element alone.
</p><p>If the <tt class="literal">abstract</tt> attribute has the value
<tt class="literal">true</tt>, then no elements of this type can be
included in instance documents--only elements of subtypes
derived from this type, which are marked as elements of this type by
an <tt class="literal">xsi:type</tt> attribute. If the
<tt class="literal">final</tt> attribute has the value
<tt class="literal">restriction</tt>, then this type cannot be subtyped by
restriction. If the <tt class="literal">final</tt> attribute has the value
<tt class="literal">extension</tt>, then this type cannot be subtyped by
extension. If the <tt class="literal">final</tt> attribute has the value
<tt class="literal">#all</tt>, then this type cannot be subtyped by either
restriction or extension. The default value of the
<tt class="literal">final</tt> attribute is set by the
<tt class="literal">finalDefault</tt> attribute on the root
<tt class="literal">xs:schema</tt> element. If the <tt class="literal">block</tt>
attribute has the value <tt class="literal">extension</tt> or
<tt class="literal">restriction</tt>, then instances of this type cannot be
replaced in instance documents by instances of subtypes derived from
this type by extension or restriction, respectively, though such
subtypes may still be defined and used for other elements. If the
<tt class="literal">block</tt> attribute has the value
<tt class="literal">#all</tt>, then this type cannot be replaced in
instance documents by instances of any subtype. The default value of
the <tt class="literal">block</tt> attribute is set by the
<tt class="literal">blockDefault</tt> attribute on the root
<tt class="literal">xs:schema</tt> element.
</p></div>

<a name="ch21-16-fm2xml" /><a name="IXT-21-239120" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b>xs:documentation</b></font></td><td align="right"><i></i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><table width="515" border="0" cellpadding="5"><tr><td align="left" /><td align="right" /></tr></table><blockquote><pre class="code">&lt;xs:documentation
  source = "<em class="replaceable"><tt>anyURI</tt></em>"
  xml:lang = "<em class="replaceable"><tt>language</tt></em>"&gt;
  &lt;!-- any well-formed XML markup --&gt;
&lt;/xs:documentation&gt;</pre></blockquote><p>The
<tt class="literal">xs:documentation</tt><a name="IXT-21-239120" /> element appears exclusively inside
<tt class="literal">xs:annotation</tt> elements where it provides
human-readable information about the schema or schema element
it's annotating. It has no effect on schema
validation. It can contain absolutely any XML markup: XHTML, DocBook,
or just plain text. The only restriction is that the contents must be
well-formed. Alternately, instead of or in addition to including this
information directly, the <tt class="literal">source</tt> attribute can
point to it using a URI. The <tt class="literal">xml:lang</tt> attribute
can be used to indicate the language in which the description is
written. You could even include multiple
<tt class="literal">xs:documentation</tt> elements in different languages.
</p></div>

<a name="ch21-17-fm2xml" /><a name="IXT-21-239121" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b>xs:element</b></font></td><td align="right"><i></i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><table width="515" border="0" cellpadding="5"><tr><td align="left" /><td align="right" /></tr></table><blockquote><pre class="code">&lt;xs:element
  abstract = "( true | <tt class="userinput"><b>false</b></tt> )"
  block = "( #all | extension | restriction | substitution )"
  default = "<em class="replaceable"><tt>string</tt></em>"
  final = "( #all | extension | restriction )"
  fixed = "<em class="replaceable"><tt>string</tt></em>"
  form = "( qualified | unqualified )"
  id = "<em class="replaceable"><tt>ID</tt></em>"
  maxOccurs = "( <em class="replaceable"><tt>nonNegativeInteger</tt></em> | unbounded )"
  minOccurs = "<em class="replaceable"><tt>nonNegativeInteger</tt></em>"
  name = "<em class="replaceable"><tt>NCName</tt></em>"
  nillable = "( true | <tt class="userinput"><b>false</b></tt> )"
  ref = "<em class="replaceable"><tt>QName</tt></em>"
  substitutionGroup = "<em class="replaceable"><tt>QName</tt></em>"
  type = "<em class="replaceable"><tt>QName</tt></em>"&gt;
  &lt;!-- ( xs:annotation?,
       ((xs:simpleType | xs:complexType)?,
       (xs:unique | xs:key | xs:keyref)*) ) --&gt;
&lt;/xs:element&gt;</pre></blockquote><p>The <tt class="literal">xs:element</tt><a name="IXT-21-239121" /> element declares an element, including
its name and type. Used at the top level of the schema, it indicates
a potential root element. Used inside an
<tt class="literal">xs:complexType</tt> element, it indicates a potential
child element of another element. Alternately, instead of specifying
a name and a type, it can have a <tt class="literal">ref</tt> attribute
that points to an element declaration elsewhere in the schema.
</p>
<h4 class="refsect1">Attributes</h4>

<dl>
<dt><tt class="literal">id</tt>, optional</dt>
<dd>
<tt class="literal">id</tt> is an XML name unique within ID-type attributes
in this schema document.
</p>
</dd>


<dt><tt class="literal">abstract</tt>, optional</dt>
<dd>
If the <tt class="literal">abstract</tt> attribute has the value
<tt class="literal">true</tt>, then only elements from this
element's substitution group are allowed in instance
documents, not elements of this type itself.
</p>
</dd>


<dt><tt class="literal">default</tt>, optional</dt>
<dd>
<tt class="literal">default</tt> is the default value of the element
reported for empty elements of this type in the instance document.
</p>
</dd>


<dt><tt class="literal">block</tt>, optional</dt>
<dd>
If the <tt class="literal">block</tt> attribute contains the value
<tt class="literal">extension</tt>, <tt class="literal">restriction</tt>, or
<tt class="literal">substitution</tt>, then this element cannot be replaced
in instance documents and substitution groups by instances of
subtypes derived from this element's type by
extension, restriction, or substitution, respectively. If the
<tt class="literal">block</tt> attribute has the value
<tt class="literal">#all</tt>, then this element cannot be replaced in
instance documents by instances of any subtype of the
element's type.
</p>
</dd>


<dt><tt class="literal">final</tt>, optional</dt>
<dd>
The final attribute controls which elements can refer to this element
as the head of their substitution group. If the value contains the
keyword <tt class="literal">restriction</tt>, then restrictions of this
element's type cannot do so. If the value contains
the keyword <tt class="literal">extension</tt>, then extensions of this
element's type cannot do so. If the value is
<tt class="literal">#all</tt>, then neither extensions nor restrictions of
this type can do so.
</p>
</dd>


<dt><tt class="literal">form</tt>, optional</dt>
<dd>
If the <tt class="literal">form</tt> attribute has the value
<tt class="literal">qualified</tt>, then the element is in the
schema's target namespace. If it has the value
<tt class="literal">unqualified</tt>, then the element is not in any
namespace. The default value is set by the
<tt class="literal">elementFormDefault</tt> attribute on the root
<tt class="literal">xs:schema</tt> element. This attribute can only be used
on locally declared elements. All globally declared elements are
always in the schema's target namespace.
</p>
</dd>


<dt><tt class="literal">maxOccurs</tt>, optional</dt>
<dd>
This signifies the maximum number of times this element may be
repeated in valid instance documents.
</p>
</dd>


<dt><tt class="literal">minOccurs</tt>, optional</dt>
<dd>
This signifies the minimum number of times this element must be
repeated in valid instance documents.
</p>
</dd>


<dt><tt class="literal">name</tt>, optional</dt>
<dd>
This represents the name of the element. </p>
</dd>


<dt><tt class="literal">nillable</tt>, optional</dt>
<dd>
If <tt class="literal">nillable</tt> has the value <tt class="literal">true</tt>,
then this element can be specified as being
"nil" using an
<tt class="literal">xsi:nil="true"</tt> attribute in the instance document.
</p>
</dd>


<dt><tt class="literal">ref</tt>, optional</dt>
<dd>
This represents the qualified name of the element declared by a
top-level <tt class="literal">xs:element</tt> element elsewhere in the
schema.
</p>
</dd>


<dt><tt class="literal">type</tt>, optional</dt>
<dd>
This is the qualified name of the type of the element, either a
built-in simple type such as <tt class="literal">xs:integer</tt> or a
user-defined type.
</p>
</dd>


<dt><tt class="literal">substitutionGroup</tt>, optional</dt>
<dd>
This is the qualified name of a globally declared element for which
this element may substitute in instance documents.
</p>
</dd>

</dl>


<h4 class="refsect1">Contents</h4>


<p>The <tt class="literal">xs:element</tt> element may contain an optional
<tt class="literal">xs:annotation</tt>. If and only if the
<tt class="literal">xs:element</tt> element does not have a
<tt class="literal">type</tt> attribute, then it must have either an
<tt class="literal">xs:simpleType</tt> child element or an
<tt class="literal">xs:complexType</tt> child element that provides an
anonymous type for this element. Finally, it may have any number of
<tt class="literal">xs:key</tt>, <tt class="literal">xs:keyref</tt>, and
<tt class="literal">xs:unique</tt> elements to set uniqueness and identity
constraints.
</p>

</div>

<a name="ch21-20-fm2xml" /><a name="IXT-21-239122" /><a name="IXT-21-239123" /><a name="IXT-21-239124" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b>xs:enumeration </b></font></td><td align="right"><i></i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><table width="515" border="0" cellpadding="5"><tr><td align="left" /><td align="right" /></tr></table><blockquote><pre class="code">&lt;xs:enumeration
  id = "<tt><em class="replaceable"><tt>ID</tt></em></tt>"
  value = "<tt><em class="replaceable"><tt>anySimpleType</tt></em></tt>"&gt;
  &lt;!-- (xs:annotation?) --&gt;
&lt;/xs:enumeration&gt;</pre></blockquote><p>The
<tt class="literal">xs:enumeration</tt><a name="IXT-21-239122" /> <a name="IXT-21-239123" /> <a name="IXT-21-239124" />
facet element is used inside <tt class="literal">xs:restriction</tt>
elements to derive new simple types by listing all valid values. The
<tt class="literal">value</tt> attribute contains a single valid value of
the type specified by the parent
<tt class="literal">xs:restriction</tt>'s
<tt class="literal">base</tt> attribute. This
<tt class="literal">xs:restriction</tt> element contains one
<tt class="literal">xs:enumeration</tt> child element for each valid value.
</p></div>

<a name="ch21-21-fm2xml" /><a name="IXT-21-239125" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b>xs:extension</b></font></td><td align="right"><i></i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><table width="515" border="0" cellpadding="5"><tr><td align="left" /><td align="right" /></tr></table><blockquote><pre class="code">&lt;xs:extension
  base = "<tt><em class="replaceable"><tt>QName</tt></em></tt>"
  id = "<tt><em class="replaceable"><tt>ID</tt></em></tt>"&gt;
  &lt;!-- (xs:annotation?,
       ((xs:group | xs:all | xs:choice | xs:sequence)?,
       ((xs:attribute | xs:attributeGroup)*, xs:anyAttribute?))) --&gt;
&lt;/xs:extension&gt;</pre></blockquote><p>The <tt class="literal">xs:extension</tt><a name="IXT-21-239125" /> element is used inside
<tt class="literal">xs:simpleContent</tt> and
<tt class="literal">xs:complexContent</tt> elements to derive a new complex
type that adds attributes and/or child elements not present in the
base type. The base type being extended is given by the value of the
<tt class="literal">base</tt> attribute. The child elements and attributes
added to the base type's content model are specified
by the content of the <tt class="literal">xs:extension</tt> element. An
instance of such an extended type must have all the child elements
required by the base type followed by all the child elements required
in the <tt class="literal">xs:extension</tt>.
</p></div>

<a name="ch21-22-fm2xml" /><a name="IXT-21-239126" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b>xs:field</b></font></td><td align="right"><i></i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><table width="515" border="0" cellpadding="5"><tr><td align="left" /><td align="right" /></tr></table><blockquote><pre class="code">&lt;xs:field
  id = "<tt><em class="replaceable"><tt>ID</tt></em></tt>"
  xpath = "XPath expression"&gt;
  &lt;!-- (xs:annotation?) --&gt;
&lt;/xs:field&gt;</pre></blockquote><p>One or more <tt class="literal">xs:field</tt><a name="IXT-21-239126" /> elements are placed inside each
<tt class="literal">xs:unique</tt>, <tt class="literal">xs:key</tt>, and
<tt class="literal">xs:keyref</tt> element to define a value calculated by
the XPath expression in the <tt class="literal">xpath</tt> attribute. The
context node for this expression is set in turn to each element in
the node set selected by the <tt class="literal">xs:selector</tt> element.
</p><p>Not all XPath expressions are allowed here. In particular, the XPath
expression must limit itself to the child axis, except for the last
step, which may use the attribute axis. The only node tests used are
name tests (element and attribute names, the <tt class="literal">*</tt>
wildcard, and the
<tt><em class="replaceable"><tt>prefix</tt></em></tt><tt class="literal">:*</tt> wildcard).
Abbreviated syntax must be used, and predicates are not allowed.
Thus, <tt class="literal">person/name/first_name/@id</tt> is a legal XPath
expression for this attribute, but
<tt class="literal">person//name/@id</tt> is not. Several instances of this
restricted form of XPath expression can be combined with the vertical
bar so that <tt class="literal">person/name/first_name/@id |
person/name/last_name/@id</tt> is also an acceptable XPath
expression. Finally, the XPath expression may begin with
<tt class="literal">.//</tt> so that <tt class="literal">.//name/@id</tt> is
legal. However, this is the only place the descendant-or-self axis
can be used. No other forms of XPath expression are allowed here.
</p></div>

<a name="ch21-23-fm2xml" /><a name="IXT-21-239127" /><a name="IXT-21-239128" /><a name="IXT-21-239129" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b>xs:fractionDigits </b></font></td><td align="right"><i></i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><table width="515" border="0" cellpadding="5"><tr><td align="left" /><td align="right" /></tr></table><blockquote><pre class="code">&lt;xs:fractionDigits
  fixed = "( true | <tt class="userinput"><b>false</b></tt> )"
  id = "<tt><em class="replaceable"><tt>ID</tt></em></tt>"
  value = "<tt><em class="replaceable"><tt>nonNegativeInteger</tt></em></tt>" &gt;
  &lt;!-- (xs:annotation?) --&gt;
&lt;/xs:fractionDigits&gt;</pre></blockquote><p>The <tt class="literal">xs:fractionDigits</tt> facet element is used when
deriving from <tt class="literal">xs:decimal</tt> (and its subtypes) by
restriction. It limits the number of digits allowed after the decimal
point to at most the number specified by the <tt class="literal">value</tt>
attribute. This sets only the maximum number of digits after the
decimal point. If you want to set the minimum number of digits
required, you'll have to use the
<tt class="literal">xs:pattern</tt> element instead. If the
<tt class="literal">fixed</tt> attribute has the value
<tt class="literal">true</tt>, then types derived from this type are not
allowed to override the value of <tt class="literal">fractionDigits</tt>
given here.
</p></div>

<a name="ch21-24-fm2xml" /><a name="IXT-21-239130" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b>xs:group</b></font></td><td align="right"><i></i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><table width="515" border="0" cellpadding="5"><tr><td align="left" /><td align="right" /></tr></table><blockquote><pre class="code">&lt;xs:group
  name = "<tt><em class="replaceable"><tt>NCName</tt></em></tt>"
  ref  = "<tt><em class="replaceable"><tt>NCName</tt></em></tt>"
  minOccurs = "<tt><em class="replaceable"><tt>nonNegativeInteger</tt></em></tt>"
  maxOccurs = "<tt><em class="replaceable"><tt>nonNegativeInteger</tt></em></tt> | unbounded"&gt;
  &lt;!-- ( xs:annotation?, (xs:all | xs:choice | xs:sequence) ) --&gt;
&lt;/xs:group&gt;</pre></blockquote><p>The <tt class="literal">xs:group</tt><a name="IXT-21-239130" /> element can be used in two ways. As a
top-level element with a <tt class="literal">name</tt> attribute, it
defines a model group that can be referenced from complex types
elsewhere in the schema. The content model of the group is
established by a child <tt class="literal">xs:all</tt>,
<tt class="literal">xs:choice</tt>, or <tt class="literal">xs:sequence</tt>
element.
</p><p>The second use is inside a <tt class="literal">xs:complexType</tt> element.
Here the <tt class="literal">xs:group</tt> element indicates that the
contents of the group should appear at this point in the instance
document at least as many times as indicated by the
<tt class="literal">minOccurs</tt> attribute and at most as many times as
indicated by the <tt class="literal">maxOccurs</tt> attribute. The default
for both of these is 1. The group to be included is indicated by the
<tt class="literal">ref</tt> attribute that contains the name of a
top-level <tt class="literal">xs:group</tt> element found elsewhere in the
schema.
</p></div>

<a name="ch21-25-fm2xml" /><a name="IXT-21-239131" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b>xs:import</b></font></td><td align="right"><i></i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><table width="515" border="0" cellpadding="5"><tr><td align="left" /><td align="right" /></tr></table><blockquote><pre class="code">&lt;xs:import
  id = "<tt><em class="replaceable"><tt>ID</tt></em></tt>"
  namespace = "<tt><em class="replaceable"><tt>anyURI</tt></em></tt>"
  schemaLocation = "<tt><em class="replaceable"><tt>anyURI</tt></em></tt>" &gt;
  &lt;!-- ( xs:annotation? ) --&gt;
&lt;/xs:import&gt;</pre></blockquote><p>Since each schema document has exactly one target namespace, the
top-level <tt class="literal">xs:import</tt><a name="IXT-21-239131" /> element is needed to create schemas for
documents that involve multiple namespaces. The
<tt class="literal">namespace</tt> attribute contains the namespace URI for
the application that the imported schema describes. If the imported
schema describes elements and types in no namespace, then the
<tt class="literal">namespace</tt> attribute is omitted. The optional
<tt class="literal">schemaLocation</tt> attribute contains a relative or
absolute URL pointing to the actual location of the schema document
to import.
</p><p>There is no limit to import depth. Schema A can import schema B,
which itself imports schema C and schema D. In such a case, schema A
can use definitions and declarations from all four schemas. Even
recursion (schema A imports schema B, which imports schema A) is not
prohibited. Since the imported schema must describe a different
target namespace than the importing schema, conflicts between
definitions in the multiple schemas are normally not a problem.
However, if conflicts do arise, then the schema is in error and
cannot be used. There are no precedence rules for choosing between
multiple conflicting definitions or declarations.
</p></div>

<a name="ch21-26-fm2xml" /><a name="IXT-21-239132" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b>xs:include</b></font></td><td align="right"><i></i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><table width="515" border="0" cellpadding="5"><tr><td align="left" /><td align="right" /></tr></table><blockquote><pre class="code">&lt;xs:include
  id = "<tt><em class="replaceable"><tt>ID</tt></em></tt>"
  schemaLocation = "<tt><em class="replaceable"><tt>anyURI</tt></em></tt>"&gt;
  &lt;!-- (annotation?) --&gt;
&lt;/xs:include&gt;</pre></blockquote><p>The top-level
<tt class="literal">xs:include</tt><a name="IXT-21-239132" /> element is used to divide a schema into
multiple separate documents. The <tt class="literal">schemaLocation</tt>
attribute contains a relative or absolute URI pointing to the schema
document to include. It differs from <tt class="literal">xs:import</tt> in
that all included files describe the same target namespace.
</p><p>There is no limit to inclusion depth. Schema A can include schema B,
which itself includes schema C and schema D. In such a case, schema A
can use definitions and declarations from all four documents. Even
recursion (schema A includes schema B, which includes schema A) is
not prohibited, though it is strongly discouraged. Instance documents
would refer only to the top-level schema A in their
<tt class="literal">xsi:schemaLocation</tt> or
<tt class="literal">xsi:noNamespaceSchemaLocation</tt> attribute.
</p><p>Validation is performed after all includes are resolved. If there are
any conflicts between the including schema and an included
schema--for instance, one schema declares that the
<tt class="literal">FullName</tt> element has a simple type, and another
declares that the <tt class="literal">FullName</tt> element has a complex
type--then the schema is in error and cannot be used. Most of
the time schemas should be carefully managed so that each element and
type is defined in exactly one schema document.
</p></div>

<a name="ch21-27-fm2xml" /><a name="IXT-21-239133" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b>xs:key</b></font></td><td align="right"><i></i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><table width="515" border="0" cellpadding="5"><tr><td align="left" /><td align="right" /></tr></table><blockquote><pre class="code">&lt;xs:key
  id = "<tt><em class="replaceable"><tt>ID</tt></em></tt>"
  name = "<tt><em class="replaceable"><tt>NCName</tt></em></tt>" &gt;
  &lt;!-- (xs:annotation?, (xs:selector, xs:field+) ) --&gt;
&lt;/xs:key&gt;</pre></blockquote><p>Keys establish uniqueness and co-occurrence constraints among various
nodes in the document. For example, you can define a key for an
<tt class="literal">Employee</tt> element based on its
<tt class="literal">EmployeeNumber</tt> child element and then require that
each <tt class="literal">Assignment</tt> element have a
<tt class="literal">team</tt> attribute whose contents are a list of
employee keys.
</p><p>The <tt class="literal">xs:key</tt><a name="IXT-21-239133" /> element defines a new key. It appears
only as a child of an <tt class="literal">xs:element</tt> element following
the element's type. The name of the key is specified
by the <tt class="literal">name</tt> attribute. The elements that have a
value for this key are identified by the
<tt class="literal">xs:selector</tt> child element. The value of the key
for each of these nodes is given by the <tt class="literal">xs:field</tt>
child element and must be unique within that set. If there is more
than one <tt class="literal">xs:field</tt> child element, then the key has
multiple values.
</p></div>

<a name="ch21-28-fm2xml" /><a name="IXT-21-239134" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b>xs:keyref</b></font></td><td align="right"><i></i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><table width="515" border="0" cellpadding="5"><tr><td align="left" /><td align="right" /></tr></table><blockquote><pre class="code">&lt;xs:keyref
  id = "<tt><em class="replaceable"><tt>ID</tt></em></tt>"
  name = "<tt><em class="replaceable"><tt>NCName</tt></em></tt>"
  refer = "<tt><em class="replaceable"><tt>QName</tt></em></tt>" &gt;
  &lt;!-- (xs:annotation?, (xs:selector, xs:field+) ) --&gt;
&lt;/xs:keyref&gt;</pre></blockquote><p>The <tt class="literal">xs:keyref</tt><a name="IXT-21-239134" /> element is placed inside
<tt class="literal">xs:element</tt> elements to indicate that a certain
part of those elements must match the key with the name given by the
<tt class="literal">refer</tt> attribute. The value that is matched against
the specified key is determined by the XPath expressions used in the
<tt class="literal">xs:selector</tt> child and the
<tt class="literal">xs:field</tt> child elements.
</p></div>

<a name="ch21-29-fm2xml" /><a name="IXT-21-239135" /><a name="IXT-21-239136" /><a name="IXT-21-239137" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b>xs:length</b></font></td><td align="right"><i></i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><table width="515" border="0" cellpadding="5"><tr><td align="left" /><td align="right" /></tr></table><blockquote><pre class="code">&lt;xs:length
  fixed = "( true | <tt class="userinput"><b>false</b></tt> )"
  id = "<tt><em class="replaceable"><tt>ID</tt></em></tt>"
  value = "<tt><em class="replaceable"><tt>nonNegativeInteger</tt></em></tt>" &gt;
  &lt;!-- (xs:annotation?) --&gt;
&lt;/xs:length&gt;</pre></blockquote><p>The <tt class="literal">xs:length</tt><a name="IXT-21-239135" /> <a name="IXT-21-239136" />
<a name="IXT-21-239137" /> facet
element specifies the exact number of characters in a type derived
from <tt class="literal">xs:string</tt>, <tt class="literal">xs:QName</tt>,
<tt class="literal">xs:language</tt>, <tt class="literal">xs:anyURI</tt>, or
<tt class="literal">xs:NOTATION</tt>. When applied to a list type such as
<tt class="literal">xs:ENTITIES</tt>, this facet specifies the number of
items in the list. Finally, when applied to
<tt class="literal">xs:hexBinary</tt> and
<tt class="literal">xs:base64Binary</tt>, it specifies the number of
<em class="emphasis">bytes</em></tt> in the decoded data, rather than the
number of <em class="emphasis">characters</em></tt> in the encoded data. If the
<tt class="literal">fixed</tt> attribute has the value
<tt class="literal">true</tt>, then types derived from this type are not
allowed to override the value of <tt class="literal">length</tt> given
here.
</p></div>

<a name="ch21-30-fm2xml" /><a name="IXT-21-239138" /><a name="IXT-21-239139" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b>xs:list</b></font></td><td align="right"><i></i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><table width="515" border="0" cellpadding="5"><tr><td align="left" /><td align="right" /></tr></table><blockquote><pre class="code">&lt;xs:list
  id = "<tt><em class="replaceable"><tt>ID</tt></em></tt>"
  itemType = "<tt><em class="replaceable"><tt>QName</tt></em></tt>" &gt;
  &lt;!-- (xs:annotation?, (xs:simpleType?) ) --&gt;
&lt;/xs:list&gt;</pre></blockquote><p>The <tt class="literal">xs:list</tt><a name="IXT-21-239138" />
<a name="IXT-21-239139" /> element is placed inside an
<tt class="literal">xs:simpleType</tt> element to derive a new list simple
type from a base atomic type identified by the
<tt class="literal">itemType</tt> attribute. Alternately, instead of
referencing an existing simple type with <tt class="literal">itemType</tt>,
a new anonymous atomic type for the list can be created by an
<tt class="literal">xs:simpleType</tt> child element. In either case, the
newly defined simple type is a whitespace-separated list of
atomic-type instances.
</p></div>

<a name="ch21-31-fm2xml" /><a name="IXT-21-239140" /><a name="IXT-21-239141" /><a name="IXT-21-239142" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b>xs:maxExclusive </b></font></td><td align="right"><i></i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><table width="515" border="0" cellpadding="5"><tr><td align="left" /><td align="right" /></tr></table><blockquote><pre class="code">&lt;xs:maxExclusive
  fixed = "( true | <tt class="userinput"><b>false</b></tt> )"
  id = "<tt><em class="replaceable"><tt>ID</tt></em></tt>"
  value = "<tt><em class="replaceable"><tt>anySimpleType</tt></em></tt>" &gt;
  &lt;!-- (xs:annotation?) --&gt;
&lt;/xs:maxExclusive&gt;</pre></blockquote><p>The
<tt class="literal">xs:maxExclusive</tt><a name="IXT-21-239140" /> <a name="IXT-21-239141" />
<a name="IXT-21-239142" />
facet element applies to all ordered types, including
<tt class="literal">xs:decimal</tt>, <tt class="literal">xs:float</tt>,
<tt class="literal">xs:double</tt>, <tt class="literal">xs:date</tt>,
<tt class="literal">xs:duration</tt>, <tt class="literal">xs:dateTime</tt>,
<tt class="literal">xs:time</tt>, <tt class="literal">xs:gDay</tt>,
<tt class="literal">xs:gMonthYear</tt>, <tt class="literal">xs:gMonth</tt>,
<tt class="literal">xs:gYear</tt>, and their subtypes. The
<tt class="literal">value</tt> attribute contains the maximum value in a
form appropriate for the type. For example, the maximum for a type
derived from <tt class="literal">xs:integer</tt> might be 75; the maximum
for a type derived from <tt class="literal">xs:double</tt> might be
1.61803; and the maximum for a type derived from
<tt class="literal">xs:date</tt> might be 2001-09-26. All instances of this
type must be <em class="emphasis">strictly less than</em></tt> the maximum
value. They may not be equal to the maximum. If the
<tt class="literal">fixed</tt> attribute has the value
<tt class="literal">true</tt>, then types derived from this type are not
allowed to override the value of <tt class="literal">maxExclusive</tt>
given here.
</p></div>

<a name="ch21-32-fm2xml" /><a name="IXT-21-239143" /><a name="IXT-21-239144" /><a name="IXT-21-239145" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b>xs:maxInclusive</b></font></td><td align="right"><i></i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><table width="515" border="0" cellpadding="5"><tr><td align="left" /><td align="right" /></tr></table><blockquote><pre class="code">&lt;xs:maxInclusive
  fixed = "( true | <tt class="userinput"><b>false</b></tt> )"
  id = "<tt><em class="replaceable"><tt>ID</tt></em></tt>"
  value = "<tt><em class="replaceable"><tt>anySimpleType</tt></em></tt>" &gt;
  &lt;!-- (xs:annotation?) --&gt;
&lt;/xs:maxInclusive&gt;</pre></blockquote><p>The
<tt class="literal">xs:maxInclusive</tt><a name="IXT-21-239143" /> <a name="IXT-21-239144" />
<a name="IXT-21-239145" />
facet element applies to all ordered types, including
<tt class="literal">xs:decimal</tt>, <tt class="literal">xs:float</tt>,
<tt class="literal">xs:double</tt>, <tt class="literal">xs:date</tt>,
<tt class="literal">xs:duration</tt>, <tt class="literal">xs:dateTime</tt>,
<tt class="literal">xs:time</tt>, <tt class="literal">xs:gDay</tt>,
<tt class="literal">xs:gMonthYear</tt>, <tt class="literal">xs:gMonth</tt>,
<tt class="literal">xs:gYear</tt>, and their subtypes. The
<tt class="literal">value</tt> attribute contains the maximum value in a
form appropriate for the type. For example, the maximum for a type
derived from <tt class="literal">xs:integer</tt> might be 75; the maximum
for a type derived from <tt class="literal">xs:double</tt> might be
1.61803; and the maximum for a type derived from
<tt class="literal">xs:date</tt> might be 2001-09-26. All instances of this
type must be <em class="emphasis">less than or equal to</em></tt> the maximum
value. They may be equal to the maximum. If the
<tt class="literal">fixed</tt> attribute has the value
<tt class="literal">true</tt>, then types derived from this type are not
allowed to override the value of <tt class="literal">maxInclusive</tt>
given here.
</p></div>

<a name="ch21-33-fm2xml" /><a name="IXT-21-239146" /><a name="IXT-21-239147" /><a name="IXT-21-239148" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b>xs:maxLength</b></font></td><td align="right"><i></i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><table width="515" border="0" cellpadding="5"><tr><td align="left" /><td align="right" /></tr></table><blockquote><pre class="code">&lt;xs:maxLength
  fixed = "( true | <tt class="userinput"><b>false</b></tt> )"
  id = "<tt><em class="replaceable"><tt>ID</tt></em></tt>"
  value = "<tt><em class="replaceable"><tt>nonNegativeInteger</tt></em></tt>" &gt;
  &lt;!-- (xs:annotation?) --&gt;
&lt;/xs:maxLength&gt;</pre></blockquote><p>The <tt class="literal">xs:maxLength</tt><a name="IXT-21-239146" /> <a name="IXT-21-239147" />
<a name="IXT-21-239148" />
facet element specifies the maximum number of characters in a type
derived from <tt class="literal">xs:string</tt>,
<tt class="literal">xs:QName</tt>, <tt class="literal">xs:language</tt>,
<tt class="literal">xs:anyURI</tt>, or <tt class="literal">xs:NOTATION</tt>. It
can also be used to restrict <tt class="literal">xs:hexBinary</tt> and
<tt class="literal">xs:base64Binary</tt>. However, in this case, it refers
to the maximum number of <em class="emphasis">bytes</em></tt> in the decoded
data rather than the maximum number of
<em class="emphasis">characters</em></tt> in the encoded data. Finally, when
applied to a list type such as <tt class="literal">xs:IDREFS</tt>, it
describes the maximum number of items in the list. If the
<tt class="literal">fixed</tt> attribute has the value
<tt class="literal">true</tt>, then types derived from this type are not
allowed to override the value of <tt class="literal">maxLength</tt> given
here.
</p></div>

<a name="ch21-34-fm2xml" /><a name="IXT-21-239149" /><a name="IXT-21-239150" /><a name="IXT-21-239151" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b>xs:minExclusive </b></font></td><td align="right"><i></i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><table width="515" border="0" cellpadding="5"><tr><td align="left" /><td align="right" /></tr></table><blockquote><pre class="code">&lt;xs:minExclusive
  fixed = "( true | <tt class="userinput"><b>false</b></tt> )"
  id = "<tt><em class="replaceable"><tt>ID</tt></em></tt>"
  value = "<tt><em class="replaceable"><tt>anySimpleType</tt></em></tt>" &gt;
  &lt;!-- (xs:annotation?) --&gt;
&lt;/xs:minExclusive&gt;</pre></blockquote><p>The <tt class="literal">xs:minExclusive</tt> facet element applies to all
ordered types, including <tt class="literal">xs:decimal</tt>,
<tt class="literal">xs:float</tt>, <tt class="literal">xs:double</tt>,
<tt class="literal">xs:date</tt>, <tt class="literal">xs:duration</tt>,
<tt class="literal">xs:dateTime</tt>, <tt class="literal">xs:time</tt>,
<tt class="literal">xs:gDay</tt>, <tt class="literal">xs:gMonthYear</tt>,
<tt class="literal">xs:gMonth</tt>, <tt class="literal">xs:gYear</tt>, and their
subtypes. The <tt class="literal">value</tt> attribute contains the minimum
value in a form appropriate for the type. For example, the minimum
for a type derived from <tt class="literal">xs:integer</tt> might be 75;
the minimum for a type derived from <tt class="literal">xs:double</tt>
might be 1.61803; and the minimum for a type derived from
<tt class="literal">xs:date</tt> might be 2001-09-26. All instances of this
type must be <em class="emphasis">strictly greater than</em></tt> the minimum
value. They may not be equal to the minimum. If the
<tt class="literal">fixed</tt> attribute has the value
<tt class="literal">true</tt>, then types derived from this type are not
allowed to override the value of <tt class="literal">minExclusive</tt>
given here.
</p></div>

<a name="ch21-35-fm2xml" /><a name="IXT-21-239152" /><a name="IXT-21-239153" /><a name="IXT-21-239154" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b>xs:minInclusive</b></font></td><td align="right"><i></i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><table width="515" border="0" cellpadding="5"><tr><td align="left" /><td align="right" /></tr></table><blockquote><pre class="code">&lt;xs:minInclusive
  fixed = "( true | <tt class="userinput"><b>false</b></tt> )"
  id = "<tt><em class="replaceable"><tt>ID</tt></em></tt>"
  value = "<tt><em class="replaceable"><tt>anySimpleType</tt></em></tt>" &gt;
  &lt;!-- (xs:annotation?) --&gt;
&lt;/xs:minInclusive&gt;</pre></blockquote><p>The
<tt class="literal">xs:minInclusive</tt><a name="IXT-21-239152" /> <a name="IXT-21-239153" />
<a name="IXT-21-239154" />
facet element applies to all ordered types, including
<tt class="literal">xs:decimal</tt>, <tt class="literal">xs:float</tt>,
<tt class="literal">xs:double</tt>, <tt class="literal">xs:date</tt>,
<tt class="literal">xs:duration</tt>, <tt class="literal">xs:dateTime</tt>,
<tt class="literal">xs:time</tt>, <tt class="literal">xs:gDay</tt>,
<tt class="literal">xs:gMonthYear</tt>, <tt class="literal">xs:gMonth</tt>,
<tt class="literal">xs:gYear</tt>, and their subtypes. The
<tt class="literal">value</tt> attribute contains the minimum value in a
form appropriate for the type. For example, the minimum for a type
derived from <tt class="literal">xs:integer</tt> might be 75; the minimum
for a type derived from <tt class="literal">xs:double</tt> might be
1.61803; and the minimum for a type derived from
<tt class="literal">xs:date</tt> might be 2001-09-26. All instances of this
type must be <em class="emphasis">greater than or equal to</em></tt> the
minimum value. If the <tt class="literal">fixed</tt> attribute has the
value <tt class="literal">true</tt>, then types derived from this type are
not allowed to override the value of <tt class="literal">minInclusive</tt>
given here.
</p></div>

<a name="ch21-36-fm2xml" /><a name="IXT-21-239155" /><a name="IXT-21-239156" /><a name="IXT-21-239157" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b>xs:minLength</b></font></td><td align="right"><i></i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><table width="515" border="0" cellpadding="5"><tr><td align="left" /><td align="right" /></tr></table><blockquote><pre class="code">&lt;xs:minLength
  fixed = "( true | <tt class="userinput"><b>false</b></tt> )"
  id = "<tt><em class="replaceable"><tt>ID</tt></em></tt>"
  value = "<tt><em class="replaceable"><tt>nonNegativeInteger</tt></em></tt>" &gt;
  &lt;!-- (xs:annotation?) --&gt;
&lt;/xs:minLength&gt;</pre></blockquote><p>The <tt class="literal">xs:minLength</tt><a name="IXT-21-239155" /> <a name="IXT-21-239156" />
<a name="IXT-21-239157" />
facet element specifies the minimum number of characters in a type
derived from <tt class="literal">xs:string</tt>,
<tt class="literal">xs:QName</tt>, <tt class="literal">xs:language</tt>,
<tt class="literal">xs:anyURI</tt>, or <tt class="literal">xs:NOTATION</tt>. It
can also be used to restrict <tt class="literal">xs:hexBinary</tt> and
<tt class="literal">xs:base64Binary</tt>. However, in this case, it refers
to the minimum number of <em class="emphasis">bytes</em></tt> in the decoded
data rather than the minimum number of
<em class="emphasis">characters</em></tt> in the encoded data. Finally, when
applied to a list type such as <tt class="literal">xs:IDREFS</tt>, it
describes the minimum number of items in the list. If the
<tt class="literal">fixed</tt> attribute has the value
<tt class="literal">true</tt>, then types derived from this type are not
allowed to override the value of <tt class="literal">maxLength</tt> given
here.
</p></div>

<a name="ch21-37-fm2xml" /><a name="IXT-21-239158" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b>xs:notation</b></font></td><td align="right"><i></i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><table width="515" border="0" cellpadding="5"><tr><td align="left" /><td align="right" /></tr></table><blockquote><pre class="code">&lt;xs:notation
  id = "<tt><em class="replaceable"><tt>ID</tt></em></tt>"
  name = "<tt><em class="replaceable"><tt>NCName</tt></em></tt>"
  public = "<tt><em class="replaceable"><tt>PUBLIC identifier</tt></em></tt>"
  system = "<tt><em class="replaceable"><tt>anyURI</tt></em></tt>" &gt;
  &lt;!-- (xs:annotation?) --&gt;
&lt;/xs:notation&gt;</pre></blockquote><p>The top-level
<tt class="literal">xs:notation</tt><a name="IXT-21-239158" /> element defines a notation.
It's the schema equivalent of the
DTD's <tt class="literal">&lt;!NOTATION&gt;</tt>
declaration. Each notation has a name, a public ID, and a system ID
identified by the relevant attribute on this element.
</p></div>

<a name="ch21-38-fm2xml" /><a name="IXT-21-239159" /><a name="IXT-21-239160" /><a name="IXT-21-239161" /><a name="IXT-21-239162" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b>xs:pattern</b></font></td><td align="right"><i></i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><table width="515" border="0" cellpadding="5"><tr><td align="left" /><td align="right" /></tr></table><blockquote><pre class="code">&lt;xs:pattern
  id = "<tt><em class="replaceable"><tt>ID</tt></em></tt>"
  value = "<tt><em class="replaceable"><tt>regular expression</tt></em></tt>" &gt;
  &lt;!-- (xs:annotation?) --&gt;
&lt;/xs:pattern&gt;</pre></blockquote><p>The <tt class="literal">xs:pattern</tt><a name="IXT-21-239159" /> <a name="IXT-21-239160" />
<a name="IXT-21-239161" /> facet
element is used to derive new simple types by specifying a
<a name="IXT-21-239162" />regular expression against which values of
the type are compared. It applies to all simple types. The schema
regular-expression grammar is quite similar to that used in Perl 5.6
and later. (The big change from earlier versions of Perl is support
for Unicode character class-based regular expressions.) Most strings
and characters match themselves, but a few characters have special
meanings, as summarized in <a href="ch21_02.htm">Table 21-1</a>. In this
table, <tt><em class="replaceable"><tt>A</em></tt> and <tt><em class="replaceable">B</tt></em></tt>
are subexpressions; <tt><em class="replaceable"><tt>n</tt></em></tt> and
<tt><em class="replaceable"><tt>m</tt></em></tt> are non-negative integers;
<tt><em class="replaceable"><tt>a</em></tt>, <tt><em class="replaceable">b</tt></em></tt>,
<tt><em class="replaceable"><tt>c</em></tt>, and <tt><em class="replaceable">d</tt></em></tt> are
all single Unicode characters; and <tt><em class="replaceable"><tt>X</tt></em></tt> is a
name.
</p></div>
<a name="xmlnut2-CHP-21-TABLE-1" /><h4 class="objtitle">Table 21-1. XML Schema regular-expression syntax </h4><table border="1" cellpadding="3">



<tr>
<th>
<p>Pattern</p>
</th>
<th>
<p>Matches</p>
</th>
</tr>


<tr>
<td>
<p><tt class="literal">(</tt><tt><em class="replaceable"><tt>A</tt></em></tt><tt class="literal">)</tt></p>
</td>
<td>
<p>A string that matches <tt><em class="replaceable"><tt>A</tt></em></tt></p>
</td>
</tr>
<tr>
<td>
<p><tt><em class="replaceable"><tt>A</tt></em></tt> <tt class="literal">|</tt>
<tt><em class="replaceable"><tt>B</tt></em></tt>
</p>
</td>
<td>
<p>A string that matches <tt><em class="replaceable"><tt>A</tt></em></tt> or a string that
matches <tt><em class="replaceable"><tt>B</tt></em></tt>
</p>
</td>
</tr>
<tr>
<td>
<p><tt><em class="replaceable"><tt>AB</tt></em></tt></p>
</td>
<td>
<p>A string that matches <tt><em class="replaceable"><tt>A</tt></em></tt> followed by a
string that matches <tt><em class="replaceable"><tt>B</tt></em></tt>
</p>
</td>
</tr>
<tr>
<td>
<p><tt><em class="replaceable"><tt>A</tt></em></tt><tt class="literal">?</tt></p>
</td>
<td>
<p>Zero or one repetitions of a string that matches
<tt><em class="replaceable"><tt>A</tt></em></tt>
</p>
</td>
</tr>
<tr>
<td>
<p><tt><em class="replaceable"><tt>A</tt></em></tt><tt class="literal">*</tt></p>
</td>
<td>
<p>Zero or more repetitions of a string that matches
<tt><em class="replaceable"><tt>A</tt></em></tt>
</p>
</td>
</tr>
<tr>
<td>
<p><tt><em class="replaceable"><tt>A</tt></em></tt><tt class="literal">+</tt></p>
</td>
<td>
<p>One or more repetitions of a string that matches
<tt><em class="replaceable"><tt>A</tt></em></tt>
</p>
</td>
</tr>
<tr>
<td>
<p><tt><em class="replaceable"><tt>A</em></tt><tt class="literal">{</tt><tt><em class="replaceable">n</em></tt><tt class="literal">,</tt><tt><em class="replaceable">m</tt></em></tt><tt class="literal">}</tt>
</p>
</td>
<td>
<p>A sequence of between <tt><em class="replaceable"><tt>n</tt></em></tt> and
<tt><em class="replaceable"><tt>m</tt></em></tt> strings, each of which matches
<tt><em class="replaceable"><tt>A</tt></em></tt>
</p>
</td>
</tr>
<tr>
<td>
<p><tt><em class="replaceable"><tt>A</em></tt><tt class="literal">{</tt><tt><em class="replaceable">n</tt></em></tt><tt class="literal">}</tt>
</p>
</td>
<td>
<p>A sequence of exactly <tt><em class="replaceable"><tt>n</tt></em></tt> strings, each of
which matches <tt><em class="replaceable"><tt>A</tt></em></tt>
</p>
</td>
</tr>
<tr>
<td>
<p><tt><em class="replaceable"><tt>A</em></tt><tt class="literal">{</tt><tt><em class="replaceable">n</tt></em></tt><tt class="literal">,}</tt>
</p>
</td>
<td>
<p>A sequence of at least <tt><em class="replaceable"><tt>n</tt></em></tt> strings, each of
which matches <tt><em class="replaceable"><tt>A</tt></em></tt>
</p>
</td>
</tr>
<tr>
<td>
<p><tt class="literal">[</tt><tt><em class="replaceable"><tt>abcd</tt></em></tt><tt class="literal">]</tt>
</p>
</td>
<td>
<p>Exactly one of the characters listed inside the square brackets</p>
</td>
</tr>
<tr>
<td>
<p><tt class="literal">[^</tt><tt><em class="replaceable"><tt>abcd</tt></em></tt><tt class="literal">]</tt>
</p>
</td>
<td>
<p>Exactly one character not listed inside the square brackets</p>
</td>
</tr>
<tr>
<td>
<p><tt class="literal">[</tt><tt><em class="replaceable"><tt>a-z</tt></em></tt><tt class="literal">]</tt></p>
</td>
<td>
<p>Exactly one character with a Unicode value between
<tt><em class="replaceable"><tt>a</em></tt> and <tt><em class="replaceable">z</tt></em></tt>,
inclusive
</p>
</td>
</tr>
<tr>
<td>
<p><tt class="literal">[</tt><tt><em class="replaceable"><tt>a-z</em></tt><tt class="literal">-[</tt><tt><em class="replaceable">d-h</tt></em></tt><tt class="literal">]]</tt>
</p>
</td>
<td>
<p>Exactly one character included in the outer range but not in the
inner range
</p>
</td>
</tr>
<tr>
<td>
<p><tt class="literal">\n</tt> </p>
</td>
<td>
<p>The newline; <tt class="literal">&amp;#x0A;</tt></p>
</td>
</tr>
<tr>
<td>
<p><tt class="literal">\r</tt></p>
</td>
<td>
<p>The carriage return; <tt class="literal">&amp;#x0D;</tt></p>
</td>
</tr>
<tr>
<td>
<p><tt class="literal">\t</tt></p>
</td>
<td>
<p>The tab; <tt class="literal">&amp;#x09;</tt></p>
</td>
</tr>
<tr>
<td>
<p><tt class="literal">\\</tt></p>
</td>
<td>
<p>The backslash, \</p>
</td>
</tr>
<tr>
<td>
<p><tt class="literal">\|</tt></p>
</td>
<td>
<p>The vertical bar, |</p>
</td>
</tr>
<tr>
<td>
<p><tt class="literal">\.</tt></p>
</td>
<td>
<p>The period, .</p>
</td>
</tr>
<tr>
<td>
<p><tt class="literal">\-</tt></p>
</td>
<td>
<p>The hyphen, -</p>
</td>
</tr>
<tr>
<td>
<p><tt class="literal">\^</tt></p>
</td>
<td>
<p>The caret, ^</p>
</td>
</tr>
<tr>
<td>
<p><tt class="literal">\?</tt></p>
</td>
<td>
<p>The question mark, ?</p>
</td>
</tr>
<tr>
<td>
<p><tt class="literal">\*</tt></p>
</td>
<td>
<p>The asterisk, *</p>
</td>
</tr>
<tr>
<td>
<p><tt class="literal">\+</tt></p>
</td>
<td>
<p>The plus sign, +</p>
</td>
</tr>
<tr>
<td>
<p><tt class="literal">\{</tt></p>
</td>
<td>
<p>The left curly brace, {</p>
</td>
</tr>
<tr>
<td>
<p><tt class="literal">\}</tt></p>
</td>
<td>
<p>The right curly brace, }</p>
</td>
</tr>
<tr>
<td>
<p><tt class="literal">\(</tt></p>
</td>
<td>
<p>The left parenthesis, (</p>
</td>
</tr>
<tr>
<td>
<p><tt class="literal">\)</tt></p>
</td>
<td>
<p>The right parenthesis, )</p>
</td>
</tr>
<tr>
<td>
<p><tt class="literal">\[</tt></p>
</td>
<td>
<p>The left square bracket, [</p>
</td>
</tr>
<tr>
<td>
<p><tt class="literal">\]</tt></p>
</td>
<td>
<p>The right square bracket, ]</p>
</td>
</tr>
<tr>
<td>
<p><tt class="literal">.</tt></p>
</td>
<td>
<p>Any single character except the carriage return or line feed</p>
</td>
</tr>
<tr>
<td>
<p><tt class="literal">\s</tt></p>
</td>
<td>
<p>A space, tab, carriage return, or line feed</p>
</td>
</tr>
<tr>
<td>
<p><tt class="literal">\S</tt></p>
</td>
<td>
<p>Any single character except a space, tab, carriage return, or line
feed
</p>
</td>
</tr>
<tr>
<td>
<p><tt class="literal">\i</tt></p>
</td>
<td>
<p>An XML name-start character</p>
</td>
</tr>
<tr>
<td>
<p><tt class="literal">\c</tt></p>
</td>
<td>
<p>An XML name character</p>
</td>
</tr>
<tr>
<td>
<p><tt class="literal">\d</tt></p>
</td>
<td>
<p>A decimal digit</p>
</td>
</tr>
<tr>
<td>
<p><tt class="literal">\D</tt></p>
</td>
<td>
<p>Any single character except a decimal digit</p>
</td>
</tr>
<tr>
<td>
<p><tt class="literal">\w</tt></p>
</td>
<td>
<p>A "word character," that is, any
single character that is not a punctuation mark, a separator, or
"other" (as defined by Unicode)
</p>
</td>
</tr>
<tr>
<td>
<p><tt class="literal">\W</tt></p>
</td>
<td>
<p>Any single character that is a punctuation mark, a separator, or
"other" (as defined by Unicode)
</p>
</td>
</tr>
<tr>
<td>
<p><tt class="literal">\p{</tt><tt><em class="replaceable"><tt>X</tt></em></tt><tt class="literal">}</tt></p>
</td>
<td>
<p>Any single character from the Unicode character class
<tt><em class="replaceable"><tt>X</tt></em></tt>; character class names are listed in
<a href="ch21_02.htm">Table 21-2</a>
</p>
</td>
</tr>
<tr>
<td>
<p><tt class="literal">\P{</tt><tt><em class="replaceable"><tt>X</tt></em></tt><tt class="literal">}</tt></p>
</td>
<td>
<p>Any single character not in the Unicode character class
<tt><em class="replaceable"><tt>X</tt></em></tt>
</p>
</td>
</tr>
<tr>
<td>
<p><tt class="literal">\p{Is</tt><tt><em class="replaceable"><tt>X</tt></em></tt><tt class="literal">}</tt>
</p>
</td>
<td>
<p>Any single character from the Unicode character block
<tt><em class="replaceable"><tt>X</tt></em></tt>. Block names include BasicLatin,
Latin-1Supplement, LatinExtended-A, LatinExtended-B, IPAExtensions,
SpacingModifierLetters, CombiningDiacriticalMarks, Greek, Cyrillic,
Armenian, Hebrew, Arabic, Syriac, Thaana, Devanagari, Bengali,
Gurmukhi, Gujarati, Oriya, Tamil, Telugu, Kannada, Malayalam,
Sinhala, Thai, Lao, Tibetan, Myanmar, Georgian, HangulJamo, Ethiopic,
Cherokee, UnifiedCanadianAboriginalSyllabics, Ogham, Runic, Khmer,
Mongolian, LatinExtendedAdditional, GreekExtended,
GeneralPunctuation, SuperscriptsandSubscripts, CurrencySymbols,
CombiningMarksforSymbols, LetterlikeSymbols, NumberForms, Arrows,
MathematicalOperators, MiscellaneousTechnical, ControlPictures,
OpticalCharacterRecognition, EnclosedAlphanumerics, BoxDrawing,
BlockElements, GeometricShapes, MiscellaneousSymbols, Dingbats,
BraillePatterns, CJKRadicalsSupplement, KangxiRadicals,
IdeographicDescriptionCharacters, CJKSymbolsandPunctuation, Hiragana,
Katakana, Bopomofo, HangulCompatibilityJamo, Kanbun,
BopomofoExtended, EnclosedCJKLettersandMonths, CJKCompatibility,
CJKUnifiedIdeographsExtensionA, CJKUnifiedIdeographs, YiSyllables,
YiRadicals, HangulSyllables, HighSurrogates,
HighPrivateUseSurrogates, LowSurrogates, PrivateUse,
CJKCompatibilityIdeographs, AlphabeticPresentationForms,
ArabicPresentationForms-A, CombiningHalfMarks, CJKCompatibilityForms,
SmallFormVariants, ArabicPresentationForms-B, Specials,
HalfwidthandFullwidthForms, Specials, OldItalic, Gothic, Deseret,
ByzantineMusicalSymbols, MusicalSymbols,
MathematicalAlphanumericSymbols, CJKUnifiedIdeographsExtensionB,
CJKCompatibilityIdeographsSupplement, Tags, and PrivateUse. The
characters from many of these blocks are shown in <a href="ch26_01.htm">Chapter 26</a>.
</p>
</td>
</tr>
<tr>
<td>
<p><tt class="literal">\P{Is</tt><tt><em class="replaceable"><tt>X</tt></em></tt><tt class="literal">}</tt>
</p>
</td>
<td>
<p>Any single character not in the Unicode character block
<tt><em class="replaceable"><tt>X</tt></em></tt>
</p>
</td>
</tr>

</table><p>
<a name="IXT-21-239163" />
<a name="xmlnut2-CHP-21-TABLE-2" /><h4 class="objtitle">Table 21-2. Unicode character classes </h4><table border="1" cellpadding="3">



<tr>
<th>
<p>Unicode character class</p>
</th>
<th>
<p>Includes</p>
</th>
</tr>


<tr>
<td>
<p>L</p>
</td>
<td>
<p>Letters</p>
</td>
</tr>
<tr>
<td>
<p>Lu</p>
</td>
<td>
<p>Uppercase letters</p>
</td>
</tr>
<tr>
<td>
<p>Ll</p>
</td>
<td>
<p>Lowercase letters</p>
</td>
</tr>
<tr>
<td>
<p>Lt</p>
</td>
<td>
<p>Titlecase letters</p>
</td>
</tr>
<tr>
<td>
<p>Lm</p>
</td>
<td>
<p>Modifier letters</p>
</td>
</tr>
<tr>
<td>
<p>Lo</p>
</td>
<td>
<p>Other letters</p>
</td>
</tr>
<tr>
<td>
<p>M</p>
</td>
<td>
<p>All marks</p>
</td>
</tr>
<tr>
<td>
<p>Mn</p>
</td>
<td>
<p>Nonspacing marks</p>
</td>
</tr>
<tr>
<td>
<p>Mc</p>
</td>
<td>
<p>Spacing combining marks</p>
</td>
</tr>
<tr>
<td>
<p>Me</p>
</td>
<td>
<p>Enclosing marks</p>
</td>
</tr>
<tr>
<td>
<p>N</p>
</td>
<td>
<p>Numbers</p>
</td>
</tr>
<tr>
<td>
<p>Nd</p>
</td>
<td>
<p>Decimal digits</p>
</td>
</tr>
<tr>
<td>
<p>Nl</p>
</td>
<td>
<p>Number letters</p>
</td>
</tr>
<tr>
<td>
<p>No</p>
</td>
<td>
<p>Other numbers</p>
</td>
</tr>
<tr>
<td>
<p>P</p>
</td>
<td>
<p>Punctuation</p>
</td>
</tr>
<tr>
<td>
<p>Pc</p>
</td>
<td>
<p>Connector punctuation</p>
</td>
</tr>
<tr>
<td>
<p>Pd</p>
</td>
<td>
<p>Dashes</p>
</td>
</tr>
<tr>
<td>
<p>Ps</p>
</td>
<td>
<p>Opening punctuation</p>
</td>
</tr>
<tr>
<td>
<p>Pe</p>
</td>
<td>
<p>Closing punctuation</p>
</td>
</tr>
<tr>
<td>
<p>Pi</p>
</td>
<td>
<p>Initial quotes</p>
</td>
</tr>
<tr>
<td>
<p>Pf</p>
</td>
<td>
<p>Final quotes</p>
</td>
</tr>
<tr>
<td>
<p>Po</p>
</td>
<td>
<p>Other punctuation</p>
</td>
</tr>
<tr>
<td>
<p>Z</p>
</td>
<td>
<p>Separators</p>
</td>
</tr>
<tr>
<td>
<p>Zs</p>
</td>
<td>
<p>Spaces</p>
</td>
</tr>
<tr>
<td>
<p>Zl</p>
</td>
<td>
<p>Line breaks</p>
</td>
</tr>
<tr>
<td>
<p>Zp</p>
</td>
<td>
<p>Paragraph breaks</p>
</td>
</tr>
<tr>
<td>
<p>S</p>
</td>
<td>
<p>Symbols</p>
</td>
</tr>
<tr>
<td>
<p>Sm</p>
</td>
<td>
<p>Mathematical symbols</p>
</td>
</tr>
<tr>
<td>
<p>Sc</p>
</td>
<td>
<p>Currency symbols</p>
</td>
</tr>
<tr>
<td>
<p>Sk</p>
</td>
<td>
<p>Modifier symbols</p>
</td>
</tr>
<tr>
<td>
<p>So</p>
</td>
<td>
<p>Other symbols</p>
</td>
</tr>
<tr>
<td>
<p>C</p>
</td>
<td>
<p>Other characters (nonletters, nonsymbols, non-numbers, nonseparators)</p>
</td>
</tr>
<tr>
<td>
<p>Cc</p>
</td>
<td>
<p>Control characters</p>
</td>
</tr>
<tr>
<td>
<p>Cf</p>
</td>
<td>
<p>Format characters</p>
</td>
</tr>
<tr>
<td>
<p>Co</p>
</td>
<td>
<p>Private use characters </p>
</td>
</tr>
<tr>
<td>
<p>Cn</p>
</td>
<td>
<p>Unassigned code points </p>
</td>
</tr>

</table><p>

<a name="ch21-39-fm2xml" /><a name="IXT-21-239164" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b>xs:redefine</b></font></td><td align="right"><i></i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><table width="515" border="0" cellpadding="5"><tr><td align="left" /><td align="right" /></tr></table><blockquote><pre class="code">&lt;xs:redefine
  id = "<tt><em class="replaceable"><tt>ID</tt></em></tt>"
  schemaLocation = "<tt><em class="replaceable"><tt>anyURI</tt></em></tt>" &gt;
  &lt;!-- (annotation | (simpleType | complexType | group | attributeGroup))* 
    --&gt;
&lt;/xs:redefine&gt;</pre></blockquote><p>The <tt class="literal">xs:redefine</tt><a name="IXT-21-239164" /> element is used much like
<tt class="literal">xs:include</tt>. That is, it inserts definitions and
declarations for the same target namespace from a schema document
found at a URL specified by the <tt class="literal">schemaLocation</tt>
attribute. However, unlike <tt class="literal">xs:include</tt>,
<tt class="literal">xs:redefine</tt> can override type, model group, and
attribute group definitions from the included schema. The new type
and group definitions are children of the
<tt class="literal">xs:redefine</tt> element. They must extend or restrict
the original definition of the redefined type or group. Note,
however, that <tt class="literal">xs:redefine</tt> cannot override element
and attribute declarations made in the included schema.
</p></div>

<a name="ch21-40-fm2xml" /><a name="IXT-21-239165" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b>xs:restriction </b></font></td><td align="right"><i></i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><table width="515" border="0" cellpadding="5"><tr><td align="left" /><td align="right" /></tr></table><blockquote><pre class="code">&lt;xs:restriction
  base = "<tt><em class="replaceable"><tt>QName</tt></em></tt>"
  id = "<tt><em class="replaceable"><tt>ID</tt></em></tt>"&gt;
  &lt;!-- ( xs:annotation?, (
        (xs:simpleType?,
        ( xs:minExclusive | xs:minInclusive | xs:maxExclusive
        | xs:maxInclusive | xs:totalDigits | xs:fractionDigits
        | xs:length | xs:minLength | xs:maxLength | xs:enumeration
        | xs:whiteSpace | xs:pattern)*)
        | ( (xs:group | xs:all | xs:choice | xs:sequence)?,
          ((xs:attribute | xs:attributeGroup)*, xs:anyAttribute?) )
       ) --&gt;
&lt;/xs:restriction&gt;</pre></blockquote><p>The <tt class="literal">xs:restriction</tt> element derives a new type from
an existing base type identified by either a <tt class="literal">base</tt>
attribute or an <tt class="literal">xs:simpleType</tt> child element. When
deriving by restriction, all valid values of the derived type must
also be legal values of the base type. However, the reverse is not
true. The valid values of the derived type are a subset (almost
always a proper subset) of the valid values of the base type. For
derived simple types, the allowed values are identified by the
various facet child elements of the <tt class="literal">xs:restriction</tt>
element. For derived complex types, the allowed values are identified
by the same elements you'd find inside an
<tt class="literal">xs:complexType</tt> element--that is, zero or
one group elements such as <tt class="literal">xs:all</tt>,
<tt class="literal">xs:choice</tt>, or <tt class="literal">xs:sequence</tt>
followed by attribute representation elements such as
<tt class="literal">xs:attribute</tt>,
<tt class="literal">xs:attributeGroup</tt>, and
<tt class="literal">xs:anyAttribute</tt>.
</p></div>

<a name="ch21-41-fm2xml" /><a name="IXT-21-239166" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b>xs:schema</b></font></td><td align="right"><i></i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><table width="515" border="0" cellpadding="5"><tr><td align="left" /><td align="right" /></tr></table><blockquote><pre class="code">&lt;xs:schema
  attributeFormDefault = "( qualified | <tt class="userinput"><b>unqualified</b></tt> )"
  elementFormDefault   = "( qualified | <tt class="userinput"><b>unqualified</b></tt> )"
  blockDefault = "( #all | extension | restriction | substitution )
  finalDefault = "( #all | extension | restriction )
  id = "<tt><em class="replaceable"><tt>ID</tt></em></tt>"
  targetNamespace = "<tt><em class="replaceable"><tt>anyURI</tt></em></tt>"
  version = "token"
  xml:lang = "language" &gt;
  &lt;!-- (
         (xs:include | xs:import | xs:redefine | xs:annotation)*,
         (((xs:simpleType | xs:complexType | xs:group
          | xs:attributeGroup) | xs:element | xs:attribute
          | xs:notation), xs:annotation*)*
   ) --&gt;
&lt;/xs:schema&gt;</pre></blockquote><p><a name="IXT-21-239166" /><tt class="literal">xs:schema</tt> is the root
element of all schema documents. It contains all the top-level
elements described elsewhere in this chapter. First come all the
elements that somehow reference other schema documents, including
<tt class="literal">xs:include</tt>, <tt class="literal">xs:import</tt>, and
<tt class="literal">xs:redefine</tt>. These are followed by the various
elements that define types and groups and declare elements and
attributes. As usual, <tt class="literal">xs:annotation</tt> elements can
be placed anywhere that is convenient.
</p>
<h4 class="refsect1">Attributes</h4>

<dl>
<dt><tt class="literal">id</tt>, optional</dt>
<dd>
<tt class="literal">id</tt> is an XML name unique within ID-type attributes
in this schema document.
</p>
</dd>


<dt><tt class="literal">targetNamespace</tt>, optional</dt>
<dd>
The namespace URI for the XML application described by this schema.
If not present, then this schema describes elements in no namespace.
If the XML application uses multiple namespaces, then there must be a
separate schema document for each different namespace. These schemas
can be connected with <tt class="literal">xs:import</tt> elements.
</p>
</dd>


<dt><tt class="literal">version</tt>, optional</dt>
<dd>
You can use this attribute to specify the version of the schema,
e.g., 1.0, 1.0.1, 1.1, 1.2, 1.3b1, 2.0, etc. This refers to the
version of the specific schema, not the version of the W3C XML Schema
Language used in this document.
</p>
</dd>


<dt><tt class="literal">blockDefault</tt>, optional</dt>
<dd>
The <tt class="literal">blockDefault</tt> attribute establishes the default
value for the <tt class="literal">block</tt> attributes of
<tt class="literal">xs:element</tt> and <tt class="literal">xs:complexType</tt>
elements in this schema.
</p>
</dd>


<dt><tt class="literal">finalDefault</tt>, optional</dt>
<dd>
The <tt class="literal">finalDefault</tt> attribute establishes the default
value for the <tt class="literal">final</tt> attributes of
<tt class="literal">xs:element</tt> and <tt class="literal">xs:complexType</tt>
elements in this schema.
</p>
</dd>


<dt><tt class="literal">xml:lang</tt>, optional</dt>
<dd>
This is the human language in which this schema is primarily written,
such as <tt class="literal">en</tt> or <tt class="literal">fr-CA</tt>.
</p>
</dd>


<dt><tt class="literal">attributeFormDefault</tt>, optional</dt>
<dd>
This sets the default value for the <tt class="literal">form</tt> attribute
of <tt class="literal">xs:attribute</tt> elements. This specifies whether
or not locally declared attributes are namespace qualified by the
target namespace. If this attribute is not used, locally declared
attributes are unqualified unless the <tt class="literal">form</tt>
attribute of the <tt class="literal">xs:attribute</tt> element has the
value <tt class="literal">qualified</tt>.
</p>
</dd>


<dt><tt class="literal">elementFormDefault</tt>, optional</dt>
<dd>
This sets the default for the <tt class="literal">form</tt> attribute of
<tt class="literal">xs:element</tt> elements. This specifies whether
locally declared elements are namespace-qualified by the target
namespace. By default, locally declared elements are unqualified
unless the <tt class="literal">form</tt> attribute of the
<tt class="literal">xs:element</tt> element has the value
<tt class="literal">qualified</tt>.
</p>
</dd>

</dl>

<a name="ch21-43-fm2xml" /><blockquote><b>WARNING:</b> 
<tt class="literal">elementFormDefault</tt> is part of a misguided effort
to make child elements and attributes equivalent. If
you're using namespaces at all, just put all
elements in the target namespace of the schema and set
<tt class="literal">elementFormDefault</tt> to
<tt class="literal">qualified</tt>.
</p>
</blockquote>

</div>

<a name="ch21-44-fm2xml" /><a name="IXT-21-239167" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b>xs:selector</b></font></td><td align="right"><i></i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><table width="515" border="0" cellpadding="5"><tr><td align="left" /><td align="right" /></tr></table><blockquote><pre class="code">&lt;xs:selector
  id = "<tt><em class="replaceable"><tt>ID</tt></em></tt>"
  xpath = "XPath expression" &gt;
  &lt;!-- (xs:annotation?) --&gt;
&lt;/xs:selector&gt;</pre></blockquote><p>A single
<tt class="literal">xs:selector</tt><a name="IXT-21-239167" /> element is placed inside each
<tt class="literal">xs:unique</tt>, <tt class="literal">xs:key</tt>, and
<tt class="literal">xs:keyref</tt> element to specify the element nodes for
which the key on key reference is defined. The node set is selected
by an XPath expression contained in the value of the
<tt class="literal">xpath</tt> attribute. The context node for this XPath
expression is the element matched by the
<tt class="literal">xs:element</tt> declaration in which the
<tt class="literal">xs:unique</tt>, <tt class="literal">xs:key</tt>, or
<tt class="literal">xs:keyref</tt> element appears.
</p><p>Not all XPath expressions are allowed here. In particular, the XPath
expression must be an abbreviated location path that limits itself to
the child axis. The only node tests used are element name, the
<tt class="literal">*</tt> wildcard, and the
<tt><em class="replaceable"><tt>prefix</tt></em></tt><tt class="literal">:*</tt> wildcard.
Abbreviated syntax must be used; predicates are not allowed. Thus,
<tt class="literal">person/name/first_name</tt> is a legal XPath expression
for this attribute, but <tt class="literal">person//name</tt> and
<tt class="literal">name/first_name/@id</tt> are not. Several instances of
this restricted form of XPath expression can be combined with the
vertical bar so that <tt class="literal">person/name/first_name |
person/name/last_name</tt> is also an acceptable XPath
expression. Finally, the XPath expression may begin with
<tt class="literal">.//</tt> so that <tt class="literal">.//name</tt> is valid.
However, this is the only place the descendant-or-self axis can be
used. No other forms of XPath expression are allowed here.
</p></div>

<a name="ch21-45-fm2xml" /><a name="IXT-21-239168" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b>xs:sequence</b></font></td><td align="right"><i></i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><table width="515" border="0" cellpadding="5"><tr><td align="left" /><td align="right" /></tr></table><blockquote><pre class="code">&lt;xs:sequence
  id = "<tt><em class="replaceable"><tt>ID</tt></em></tt>"
  maxOccurs = "( <tt><em class="replaceable"><tt>nonNegativeInteger</tt></em></tt> | unbounded)"
  minOccurs = "<tt><em class="replaceable"><tt>nonNegativeInteger</tt></em></tt>" &gt;
  &lt;!-- (  xs:annotation?,
        ( xs:element | xs:group | xs:choice | xs:sequence | xs:any )*
       )
  --&gt;
&lt;/xs:sequence&gt;</pre></blockquote><p>The <tt class="literal">xs:sequence</tt><a name="IXT-21-239168" /> element indicates that the elements
represented by its child elements should appear at that position in
the instance document in the order they're listed
here. The sequence must repeat at least <tt class="literal">minOccurs</tt>
times and at most <tt class="literal">maxOccurs</tt> times. The default for
both <tt class="literal">minOccurs</tt> and <tt class="literal">maxOccurs</tt> is
1. The <tt class="literal">maxOccurs</tt> attribute can be set to
<tt class="literal">unbounded</tt> to indicate that the sequence may repeat
indefinitely.
</p></div>

<a name="ch21-46-fm2xml" /><a name="IXT-21-239169" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b>xs:simpleContent</b></font></td><td align="right"><i></i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><table width="515" border="0" cellpadding="5"><tr><td align="left" /><td align="right" /></tr></table><blockquote><pre class="code">&lt;xs:simpleContent
  id = "<tt><em class="replaceable"><tt>ID</tt></em></tt>" &gt;
  &lt;!-- (xs:annotation?, (xs:restriction | xs:extension)) --&gt;
&lt;/xs:simpleContent&gt;</pre></blockquote><p>The
<tt class="literal">xs:simpleContent</tt><a name="IXT-21-239169" /> element is used inside
<tt class="literal">xs:complexType</tt> elements whose content is a simple
type, such as <tt class="literal">xs:string</tt> or
<tt class="literal">xs:integer</tt>, rather than child elements or mixed
content. This is customarily done when the only reason an element has
a complex type instead of a simple type is for the purpose of
attributes.
</p></div>

<a name="ch21-47-fm2xml" /><a name="IXT-21-239170" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b>xs:simpleType</b></font></td><td align="right"><i></i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><table width="515" border="0" cellpadding="5"><tr><td align="left" /><td align="right" /></tr></table><blockquote><pre class="code">&lt;xs:simpleType
  final = "( #all | list | union | restriction )"
  id = "<tt><em class="replaceable"><tt>ID</tt></em></tt>"
  name = "<tt><em class="replaceable"><tt>NCName</tt></em></tt>" &gt;
  &lt;!-- (xs:annotation?, (xs:restriction | xs:list | xs:union)) --&gt;
&lt;/xs:simpleType&gt;</pre></blockquote><p>The
<tt class="literal">xs:simpleType</tt><a name="IXT-21-239170" /> element defines a new simple type for
elements and attributes. A simple type is composed purely of text but
no child elements--<tt class="literal">#PCDATA</tt>, in DTD
parlance. A top-level <tt class="literal">xs:simpleType</tt> element has a
name given in the <tt class="literal">name</tt> attribute by which it can
be referred to from the type attribute of
<tt class="literal">xs:element</tt> and <tt class="literal">xs:attribute</tt>
elements. Alternately, an <tt class="literal">xs:element</tt> or
<tt class="literal">xs:attribute</tt> element can have an
<tt class="literal">xs:simpleType</tt> child without a
<tt class="literal">name</tt> attribute that defines an <em class="emphasis">anonymous
type</em></tt> for that element or attribute.
</p><p>New types are derived from existing types in one of three ways: by
restricting the range of a base type using an
<tt class="literal">xs:restriction</tt> child element, by combining
multiple base types with an <tt class="literal">xs:union</tt> child
element, or by allowing multiple values of a base type separated by
whitespace with an <tt class="literal">xs:list</tt> child element.
</p><p>The <tt class="literal">final</tt> attribute can be used to prevent a
simple type from being subtyped. If <tt class="literal">final</tt> contains
the value <tt class="literal">list</tt>, the type cannot be extended by
listing. If <tt class="literal">final</tt> contains the value
<tt class="literal">restriction</tt>, the type cannot be extended by
restriction. If <tt class="literal">final</tt> contains the value
<tt class="literal">union</tt>, the type cannot become a member of a union.
These three values can be combined in a whitespace-separated list.
For instance, <tt class="literal">final="list union"</tt> prevents
derivation by list and union but not by restriction. If
<tt class="literal">final</tt> has the value <tt class="literal">#all</tt>, the
type cannot be used as a base type in any way.
</p></div>

<a name="ch21-48-fm2xml" /><a name="IXT-21-239171" /><a name="IXT-21-239172" /><a name="IXT-21-239173" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b>xs:totalDigits</b></font></td><td align="right"><i></i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><table width="515" border="0" cellpadding="5"><tr><td align="left" /><td align="right" /></tr></table><blockquote><pre class="code">&lt;xs:totalDigits
  fixed = "( true | <tt class="userinput"><b>false</b></tt> )"
  id = "<tt><em class="replaceable"><tt>ID</tt></em></tt>"
  value = "<tt><em class="replaceable"><tt>positiveInteger</tt></em></tt>" &gt;
  &lt;!-- (xs:annotation?) --&gt;
&lt;/xs:totalDigits&gt;</pre></blockquote><p>The
<tt class="literal">xs:totalDigits</tt><a name="IXT-21-239171" /> <a name="IXT-21-239172" />
<a name="IXT-21-239173" />
facet element is used when deriving from
<tt class="literal">xs:decimal</tt> elements and its descendants
(<tt class="literal">xs:integer</tt>, <tt class="literal">xs:long</tt>,
<tt class="literal">xs:nonNegativeInteger</tt>,
<tt class="literal">xs:unsignedLong</tt>, etc.) by restriction. It
specifies the maximum number of digits allowed in the number,
including both the integer and fractional parts, but not counting the
decimal point or the sign. This only sets the maximum number of
digits. If you want to specify a minimum number of digits, use the
<tt class="literal">xs:pattern</tt> element instead. If the
<tt class="literal">fixed</tt> attribute has the value
<tt class="literal">true</tt>, then types derived from this type are not
allowed to override the value of <tt class="literal">fractionDigits</tt>
given here.
</p></div>

<a name="ch21-49-fm2xml" /><a name="IXT-21-239174" /><a name="IXT-21-239175" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b>xs:union</b></font></td><td align="right"><i></i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><table width="515" border="0" cellpadding="5"><tr><td align="left" /><td align="right" /></tr></table><blockquote><pre class="code">&lt;xs:union
  id = "<tt><em class="replaceable"><tt>ID</tt></em></tt>"
  memberTypes = "List of QName" &gt;
  &lt;!-- (xs:annotation?, (xs:simpleType*)) --&gt;
&lt;/xs:union&gt;</pre></blockquote><p>The <tt class="literal">xs:union</tt><a name="IXT-21-239174" />
<a name="IXT-21-239175" /> element is placed inside an
<tt class="literal">xs:simpleType</tt> to indicate that an element or
attribute can contain any one of multiple types. For example, it can
say that an element can contain either an
<tt class="literal">xs:integer</tt> or an <tt class="literal">xs:token</tt>. The
names of the types that participate in the union are listed in the
<tt class="literal">memberTypes</tt> attribute separated by whitespace.
Furthermore, the types defined in the
<tt class="literal">xs:simpleType</tt> children of the
<tt class="literal">xs:union</tt> are also members of the union.
</p></div>

<a name="ch21-50-fm2xml" /><a name="IXT-21-239176" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b>xs:unique </b></font></td><td align="right"><i></i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><table width="515" border="0" cellpadding="5"><tr><td align="left" /><td align="right" /></tr></table><blockquote><pre class="code">&lt;xs:unique
  id = "<tt><em class="replaceable"><tt>ID</tt></em></tt>"
  name = "<tt><em class="replaceable"><tt>NCName</tt></em></tt>" &gt;
  &lt;!-- (xs:annotation?, xs:selector, xs:field+ ) --&gt;
&lt;/xs:unique&gt;</pre></blockquote><p>The <tt class="literal">xs:unique</tt> element requires that a specified
subset of elements and/or attributes in the instance document have
unique values calculated from each of those elements/attributes. This
is similar to the constraint imposed by declaring an attribute to
have type <tt class="literal">xs:ID</tt>, but much more flexible. The
<tt class="literal">xs:selector</tt> child element uses XPath to specify
the subset of nodes from the instance document over which uniqueness
is calculated. The <tt class="literal">xs:field</tt> children use XPath
expressions to specify what properties of those nodes must be unique
within the subset.
</p></div>

<a name="ch21-51-fm2xml" /><a name="IXT-21-239177" /><a name="IXT-21-239178" /><a name="IXT-21-239179" /><a name="IXTR3-35" /><a name="IXTR3-36" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b>xs:whiteSpace</b></font></td><td align="right"><i></i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><table width="515" border="0" cellpadding="5"><tr><td align="left" /><td align="right" /></tr></table><blockquote><pre class="code">&lt;xs:whiteSpace
  fixed = "( true | <tt class="userinput"><b>false</b></tt> )"
  id = "<tt><em class="replaceable"><tt>ID</tt></em></tt>"
  value = "(collapse | preserve | replace)" &gt;
  &lt;!-- (xs:annotation?) --&gt;
&lt;/xs:whiteSpace&gt;</pre></blockquote><p>The
<tt class="literal">xs:whiteSpace</tt><a name="IXT-21-239177" />
<a name="IXT-21-239178" /> <a name="IXT-21-239179" /> facet
element is unusual in that it does not constrain values. Instead, it
tells the validator how it should normalize whitespace before
validating the value against other facets. The
<tt class="literal">value</tt> attribute has one of three values:
</p><dl>
<dt><tt class="literal">preserve</tt></dt>
<dd>
All whitespace is significant; this is conceptually similar to the
<tt class="literal">pre</tt> element in HTML.
</p>
</dd>


<dt><tt class="literal">collapse</tt></dt>
<dd>
Before the value is validated, tabs, carriage returns, and line feeds
are replaced by spaces; leading and trailing whitespace is deleted;
and runs of more than one consecutive space are condensed to a single
space.
</p>
</dd>


<dt><tt class="literal">replace</tt></dt>
<dd>
Tabs, carriage returns, and line feeds are replaced by spaces before
the value <a name="IXTR3-35" /> <a name="IXTR3-36" />is validated.
</p>
</dd>

</dl></div>



<hr width="684" align="left" />
<div class="navbar"><table width="684" border="0"><tr><td align="left" valign="top" width="228"><a href="ch21_01.htm"><img src="../gifs/txtpreva.gif" alt="Previous" border="0" /></a></td><td align="center" valign="top" width="228"><a href="index.htm"><img src="../gifs/txthome.gif" alt="Home" border="0" /></a></td><td align="right" valign="top" width="228"><a href="ch21_03.htm"><img src="../gifs/txtnexta.gif" alt="Next" border="0" /></a></td></tr><tr><td align="left" valign="top" width="228">21. Schemas Reference</td><td align="center" valign="top" width="228"><a href="index/index.htm"><img src="../gifs/index.gif" alt="Book Index" border="0" /></a></td><td align="right" valign="top" width="228">21.3. Primitive Types</td></tr></table></div>
<hr width="684" align="left" />

<img src="../gifs/navbar.gif" usemap="#library-map" border="0" alt="Library Navigation Links" />
<p><p><font size="-1"><a href="copyrght.htm">Copyright &copy; 2002</a> O'Reilly &amp; Associates. All rights reserved.</font></p>

<map name="library-map">
<area shape="rect" coords="0,0,85,93" href="../index.htm"><area shape="rect" coords="85,0,180,98" href="../sax2/index.htm"><area shape="rect" coords="182,-1,261,100" href="index.htm"><area shape="rect" coords="263,1,384,96" href="../jxml/index.htm"><area shape="rect" coords="386,1,463,100" href="../jxslt/index.htm"><area shape="rect" coords="466,1,533,112" href="../xslt/index.htm"><area shape="rect" coords="535,-1,610,108" href="../schema/index.htm"><area shape="rect" coords="613,1,696,121" href="../pxml/index.htm">
</map>

</body></html>