<html><head><title>Filters (XML in a Nutshell, 2nd Edition)</title><link rel="stylesheet" type="text/css" href="../style/style1.css" />

<meta name="DC.Creator" content="Elliotte Rusty Harold and W. Scott Means" /><meta name="DC.Format" content="text/xml" scheme="MIME" /><meta name="DC.Language" content="en-US" /><meta name="DC.Publisher" content="O'Reilly &amp; Associates, Inc." /><meta name="DC.Source" scheme="ISBN" content="0-596-00292-0" /><meta name="DC.Subject.Keyword" content="stuff" /><meta name="DC.Title" content="XML in a Nutshell, 2nd Edition" /><meta name="DC.Type" content="Text.Monograph" />

</head><body bgcolor="#ffffff">

<img src="gifs/smbanner.gif" usemap="#banner-map" border="0" alt="Book Home" /><map name="banner-map"><area shape="rect" coords="1,-2,616,66" href="index.htm" alt="XML in a Nutshell" /><area shape="rect" coords="629,-11,726,25" href="jobjects/fsearch.htm" alt="Search this book" /></map>

<div class="navbar"><table width="684" border="0"><tr><td align="left" valign="top" width="228"><a href="ch19_02.htm"><img src="../gifs/txtpreva.gif" alt="Previous" border="0" /></a></td><td align="center" valign="top" width="228" /><td align="right" valign="top" width="228"><a href="part4.htm"><img src="../gifs/txtnexta.gif" alt="Next" border="0" /></a></td></tr></table></div>



<h2 class="sect1">19.3. Filters</h2>

<p>A <a name="xmlnut2-IDXTERM-1733" /> <a name="xmlnut2-IDXTERM-1734" />SAX
filter sits in between the parser and the client application and
intercepts the messages that these two objects pass to each other. It
can pass these messages unchanged or modify, replace, or block them.
To a client application, the filter looks like a parser, that is, an
<tt class="literal">XMLReader</tt>. To the parser, the filter looks like a
client application, that is, a <tt class="literal">ContentHandler</tt>.
</p>

<p>SAX filters are implemented by subclassing the
<tt class="literal">org.xml.sax.helpers.XMLFilterImpl</tt><a name="IXT-19-239969" /> <a name="IXT-19-239970" /> class.<a href="#FOOTNOTE-8">[8]</a>
This class implements all the required interfaces of SAX for both
parsers and client applications. That is, its signature is as
follows:
</p><blockquote class="footnote">
<a name="FOOTNOTE-8" /><p> [8]There's also an
<tt class="literal">org.xml.sax.XMLFilter</tt><a name="IXT-19-239971" /> <a name="IXT-19-239972" /> interface. However, this
interface is arranged exactly backwards for most use cases. It
filters messages from the client application to the parser, but not
the much more important messages from the parser to the client
application. Furthermore, implementing the
<tt class="literal">XMLFilter</tt> interface directly requires a lot more
work than subclassing <tt class="literal">XMLFilterImpl</tt>. Almost no
experienced SAX programmer would choose to implement
<tt class="literal">XMLFilter</tt> directly rather than subclassing the
<tt class="literal">XMLFilterImpl</tt> adapter class.</p> </blockquote>

<blockquote><pre class="code">public class XMLFilterImpl implements XMLFilter, XMLReader,
 ContentHandler, DTDHandler, ErrorHandler</pre></blockquote>

<p>Your own filters will extend this class and override those methods
that correspond to the messages you want to filter. For example, if
you wanted to filter out all processing instructions, you would write
a filter that would override the <tt class="literal">processingInstruction(
)</tt><a name="IXT-19-239973" /> method to do nothing, as shown in
<a href="ch19_03.htm">Example 19-5</a>.
</p>

<a name="xmlnut2-CHP-19-EX-5" /><div class="example">
<h4 class="objtitle">Example 19-5. A SAX filter that removes processing instructions  </h4>
<blockquote><pre class="code">import org.xml.sax.helpers.XMLFilterImpl;

public class ProcessingInstructionStripper extends XMLFilterImpl {

  public void processingInstruction(String target, String data) {
    // Because we do nothing, processing instructions read in the
    // document are *not* passed to client application
  }

}</pre></blockquote>
</div>

<p>If instead you wanted to replace a processing instruction with an
element whose name was the same as the processing
instruction's target and whose text content was the
processing instruction's data,
you'd call the <tt class="literal">startElement(
)</tt><a name="IXT-19-239974" />,
<tt class="literal">characters( )</tt><a name="IXT-19-239975" />,
and <tt class="literal">endElement( )</tt><a name="IXT-19-239976" />
methods from inside the <tt class="literal">processingInstruction( )</tt>
method after filling in the arguments with the relevant data from the
processing instruction, as shown in <a href="ch19_03.htm">Example 19-6</a>.
</p>

<a name="xmlnut2-CHP-19-EX-6" /><div class="example">
<h4 class="objtitle">Example 19-6. A SAX filter that converts processing instructions to elements </h4>
<blockquote><pre class="code">import org.xml.sax.*;
import org.xml.sax.helpers.*;

public class ProcessingInstructionConverter extends XMLFilterImpl {

  public void processingInstruction(String target, String data)
   throws SAXException {

    // AttributesImpl is an adapter class in the org.xml.sax.ext package
    // for precisely this case. We don't really want to add any attributes
    // here, but we need to pass something as the fourth argument to
    // startElement( ).
    Attributes emptyAttributes = new AttributesImpl( );

    // We won't use any namespace for the element
    startElement("", target, target, emptyAttributes);
    // converts String data to char array
    char[] text = data.toCharArray( );
    characters(text, 0, text.length);

    endElement("", target, target);

  }

}</pre></blockquote>
</div>

<p>We used this filter before passing <a href="ch19_01.htm">Example 19-2</a> into
a program that echoes an XML document onto
<tt class="literal">System.out</tt> and were a little surprised to see this
come out:
</p>

<blockquote><pre class="code">&lt;xml-stylesheet&gt;type="text/css" href="person.css"&lt;/xml-stylesheet&gt;
&lt;person xmlns="http://xml.oreilly.com/person"&gt;
  &lt;name:name xmlns:name="http://xml.oreilly.com/name"&gt;
    &lt;name:first&gt;Sydney&lt;/name:first&gt;
    &lt;name:last&gt;Lee&lt;/name:last&gt;
  &lt;/name:name&gt;
  &lt;assignment project_id="p2"&gt;&lt;/assignment&gt;
&lt;/person&gt;</pre></blockquote>

<p>This document is not
<a name="IXT-19-239977" />well-formed! The specific
problem is that there are two independent root elements. However, on
further consideration that's really not too
surprising. Well-formedness checking is normally done by the
underlying parser when it reads the text form of an XML document. SAX
filters should but are not absolutely required to provide well-formed
XML data to client applications. Indeed, they can produce
substantially more malformed data than this by including start-tags
that are not matched by end-tags, text that contains illegal
characters such as the formfeed or the vertical tab, and XML names
that contain non-name characters such as * and &#xA7;. You need
to be very careful before assuming data you receive from a filter is
valid or well-formed.
</p>

<p>If you want to invoke a method without filtering it or you want to
invoke the same method in the underlying handler, you can prefix a
call to it with the <tt class="literal">super</tt><a name="IXT-19-239978" /> keyword. This invokes
the variant of the method from the superclass. By default, each
method in <tt class="literal">XMLFilterImpl</tt> just passes the same
arguments to the equivalent method in the parent handler. <a href="ch19_03.htm">Example 19-7</a> demonstrates with a filter that changes all
character data to uppercase by overriding the <tt class="literal">characters(
)</tt> method.
</p>

<a name="xmlnut2-CHP-19-EX-7" /><div class="example">
<h4 class="objtitle">Example 19-7. A SAX filter that converts text to uppercase  </h4>
<blockquote><pre class="code">import org.xml.sax.*;
import org.xml.sax.helpers.*;

public class UpperCaseFilter extends XMLFilterImpl {

  public void characters(char[] text, int start, int length)
   throws SAXException {

    String temp = new String(text, start, length);
    temp = temp.toUpperCase( );
    text = temp.toCharArray( );
    super.characters(text, 0, text.length);

  }

}</pre></blockquote>
</div>

<p>Actually, using a filter involves these steps:</p>

<ol><li>
<p>Create a filter object, normally by invoking its own constructor.</p>
</li><li>
<p>Create the <tt class="literal">XMLReader</tt><a name="IXT-19-239979" /> that will actually parse the document,
normally by calling <tt class="literal">XMLReaderFactory.createXMLReader(
)</tt><a name="IXT-19-239980" />.
</p>
</li><li>
<p>Attach the filter to the parser using the filter's
<tt class="literal">setParent( )</tt><a name="IXT-19-239981" /> method.
</p>
</li><li>
<p>Install a <tt class="literal">ContentHandler</tt> in the filter.</p>
</li><li>
<p>Parse the document by calling the filter's
<tt class="literal">parse( )</tt><a name="IXT-19-239982" />
method.
</p>
</li></ol>
<p>Details can vary a little from application to application. For
instance, you might install other handlers besides the
<tt class="literal">ContentHandler</tt> or change the parent between
documents. However, once the filter has been attached to the
underlying <tt class="literal">XMLReader</tt>, you should not directly
invoke any methods on this underlying parser; you should only talk to
it through the filter. For example, this is how
you'd use the filter in <a href="ch19_03.htm">Example 19-7</a>
to parse a document:
</p>

<blockquote><pre class="code">XMLFilter filter = new UpperCaseFilter( );
filter.setParent(XMLReaderFactory.createXMLReader( ));
filter.setContentHandler(yourContentHandlerObject);
filter.parse(document);</pre></blockquote>

<p>Notice specifically that you invoke the filter's
<tt class="literal">parse( )</tt> method, not the underlying <a name="IXTR3-164" /> <a name="IXTR3-165" />parser's
<tt class="literal">parse( )</tt> <a name="IXTR3-166" />method. 
</p>





<hr width="684" align="left" />
<div class="navbar"><table width="684" border="0"><tr><td align="left" valign="top" width="228"><a href="ch19_02.htm"><img src="../gifs/txtpreva.gif" alt="Previous" border="0" /></a></td><td align="center" valign="top" width="228"><a href="index.htm"><img src="../gifs/txthome.gif" alt="Home" border="0" /></a></td><td align="right" valign="top" width="228"><a href="part4.htm"><img src="../gifs/txtnexta.gif" alt="Next" border="0" /></a></td></tr><tr><td align="left" valign="top" width="228">19.2. SAX Features and Properties</td><td align="center" valign="top" width="228"><a href="index/index.htm"><img src="../gifs/index.gif" alt="Book Index" border="0" /></a></td><td align="right" valign="top" width="228">IV. Reference</td></tr></table></div>
<hr width="684" align="left" />

<img src="../gifs/navbar.gif" usemap="#library-map" border="0" alt="Library Navigation Links" />
<p><p><font size="-1"><a href="copyrght.htm">Copyright &copy; 2002</a> O'Reilly &amp; Associates. All rights reserved.</font></p>

<map name="library-map">
<area shape="rect" coords="0,0,85,93" href="../index.htm"><area shape="rect" coords="85,0,180,98" href="../sax2/index.htm"><area shape="rect" coords="182,-1,261,100" href="index.htm"><area shape="rect" coords="263,1,384,96" href="../jxml/index.htm"><area shape="rect" coords="386,1,463,100" href="../jxslt/index.htm"><area shape="rect" coords="466,1,533,112" href="../xslt/index.htm"><area shape="rect" coords="535,-1,610,108" href="../schema/index.htm"><area shape="rect" coords="613,1,696,121" href="../pxml/index.htm">
</map>

</body></html>