<html><head><title>Transformation and Presentation (XML in a Nutshell, 2nd Edition)</title><link rel="stylesheet" type="text/css" href="../style/style1.css" />

<meta name="DC.Creator" content="Elliotte Rusty Harold and W. Scott Means" /><meta name="DC.Format" content="text/xml" scheme="MIME" /><meta name="DC.Language" content="en-US" /><meta name="DC.Publisher" content="O'Reilly &amp; Associates, Inc." /><meta name="DC.Source" scheme="ISBN" content="0-596-00292-0" /><meta name="DC.Subject.Keyword" content="stuff" /><meta name="DC.Title" content="XML in a Nutshell, 2nd Edition" /><meta name="DC.Type" content="Text.Monograph" />

</head><body bgcolor="#ffffff">

<img src="gifs/smbanner.gif" usemap="#banner-map" border="0" alt="Book Home" /><map name="banner-map"><area shape="rect" coords="1,-2,616,66" href="index.htm" alt="XML in a Nutshell" /><area shape="rect" coords="629,-11,726,25" href="jobjects/fsearch.htm" alt="Search this book" /></map>

<div class="navbar"><table width="684" border="0"><tr><td align="left" valign="top" width="228"><a href="ch06_05.htm"><img src="../gifs/txtpreva.gif" alt="Previous" border="0" /></a></td><td align="center" valign="top" width="228" /><td align="right" valign="top" width="228"><a href="ch07_01.htm"><img src="../gifs/txtnexta.gif" alt="Next" border="0" /></a></td></tr></table></div>



<h2 class="sect1">6.6. Transformation and Presentation</h2>

<p>The
<a name="IXT-6-240007" />markup in a
<a name="IXT-6-240008" />typical XML document describes the
document's structure, but it tends not to describe
the document's presentation. That is, it says how
the document is organized but not how it looks. Although XML
documents are text, and a person could read them in native form if
they really wanted to, much more commonly an XML document is rendered
into some other format before being presented to a human audience.
One of the key ideas of markup languages in general and XML in
particular is that the input format need not be the same as the
output format. To put it another way, what you see is not what you
get, nor is it what you want to get. The <a name="IXT-6-240009" />input
<a name="IXT-6-240010" />markup language is designed for the
convenience of the writer. The <a name="IXT-6-240011" />output language is designed for the
convenience of the reader.
</p>

<p>Of course this requires a means of transforming the input format into
the output format. Most XML documents undergo some kind of
transformation before being presented to the reader. The
transformation may be to a different XML vocabulary like XHTML or
XSL-FO, or it may be to a non-XML format like PostScript or RTF.
</p>

<p>XML's semiofficial transformation language is
<a name="IXT-6-240012" />Extensible
Stylesheet Language Transformations
(<a name="IXT-6-240013" />XSLT). An XSLT document contains a
list of template rules. Each template rule has a pattern noting which
elements and other nodes it matches. An XSLT processor reads the
input document. When it sees something in the input document that
matches a template rule in the stylesheet, it outputs the template
rule's template. Part of the template is normally an
instruction that tells the processor to include content from the
input in the output. This allows, for example, the text of the output
document to be the same while all the markup is changed. For
instance, you could write a stylesheet that would transform DocBook
documents into TEI documents. XSLT will be discussed in much more
detail in <a href="ch08_01.htm">Chapter 8</a>.
</p>

<p>However, XSLT is not the only transformation language you can use
with your XML documents. Other stylesheet languages such as the
<a name="IXT-6-240014" /> <a name="IXT-6-240015" />Document
Style Sheet and Semantics Language (DSSSL, <a href="../../../../../../www.jclark.com/dsssl/">http://www.jclark.com/dsssl/</a>) are also
available. So are a variety of proprietary tools like OmniMark
(<a href="../../../../../../www.omnimark.com/">http://www.omnimark.com/</a>). Most
of these have particular strengths and weaknesses for particular
kinds of documents. Custom programs written in a variety of
programming languages, such as Java, C++, Perl, and Python, can use a
plethora of APIs, such as SAX, DOM, and JDOM, to transform documents.
This is sometimes useful when you need something more than a mere
transformation--for instance, interpreting certain elements as
database queries and actually inserting the results of those queries
into the output document, or asking the user to answer questions in
the middle of the transformation. However, the biggest single factor
when choosing which tool to use is simply which language and syntax
you're most comfortable with. <em class="emphasis">De linguis
non disputandum est</em>.
</p>

<p>There are many different choices for the output format from a
transformation. A PostScript file can be printed on paper, overhead
transparencies, slides, or even T-shirts. A PDF document can be
viewed in all these ways and shown on the screen as well. However,
for screen display, PDF is vastly inferior to simple HTML, which has
the advantages of being very broadly accessible across platforms and
being very easy to generate via XSLT from source XML documents.
Generating a PDF or a PostScript file normally requires an additional
conversion step in which special software converts some custom XML
output format like XSL-FO to what you actually want.
</p>

<p>An alternative to a transformation-based presentation is to provide a
descriptive stylesheet that simply states how each element in the
original document should be formatted. This is the realm of
<a name="IXT-6-240016" />Cascading Style Sheets (CSS).
This works particularly well for narrative documents where all
that's needed is a list of the fonts, styles, sizes,
and so on to apply to the content of each element. The key is that
when all markup is stripped from the document, what remains is more
or less a plain-text version of what you want to see. No reordering
or rearrangement is necessary. This approach works less well for
data-oriented documents where the raw content may be nothing more
than an undifferentiated mass of numbers, dates, or other information
that's hard to understand without the context and
annotations provided by the markup. However, in this case a
combination of the two approaches works well. First a transformation
can produce a new document containing rearranged and annotated
information. Then a CSS stylesheet can apply style rules to the
elements in this transformed document.
</p>





<hr width="684" align="left" />
<div class="navbar"><table width="684" border="0"><tr><td align="left" valign="top" width="228"><a href="ch06_05.htm"><img src="../gifs/txtpreva.gif" alt="Previous" border="0" /></a></td><td align="center" valign="top" width="228"><a href="index.htm"><img src="../gifs/txthome.gif" alt="Home" border="0" /></a></td><td align="right" valign="top" width="228"><a href="ch07_01.htm"><img src="../gifs/txtnexta.gif" alt="Next" border="0" /></a></td></tr><tr><td align="left" valign="top" width="228">6.5. Document Permanence </td><td align="center" valign="top" width="228"><a href="index/index.htm"><img src="../gifs/index.gif" alt="Book Index" border="0" /></a></td><td align="right" valign="top" width="228">7. XML on the Web</td></tr></table></div>
<hr width="684" align="left" />

<img src="../gifs/navbar.gif" usemap="#library-map" border="0" alt="Library Navigation Links" />
<p><p><font size="-1"><a href="copyrght.htm">Copyright &copy; 2002</a> O'Reilly &amp; Associates. All rights reserved.</font></p>

<map name="library-map">
<area shape="rect" coords="0,0,85,93" href="../index.htm"><area shape="rect" coords="85,0,180,98" href="../sax2/index.htm"><area shape="rect" coords="182,-1,261,100" href="index.htm"><area shape="rect" coords="263,1,384,96" href="../jxml/index.htm"><area shape="rect" coords="386,1,463,100" href="../jxslt/index.htm"><area shape="rect" coords="466,1,533,112" href="../xslt/index.htm"><area shape="rect" coords="535,-1,610,108" href="../schema/index.htm"><area shape="rect" coords="613,1,696,121" href="../pxml/index.htm">
</map>

</body></html>