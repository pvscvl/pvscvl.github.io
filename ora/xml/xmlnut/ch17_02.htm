<html><head><title>Common XML Processing Issues (XML in a Nutshell, 2nd Edition)</title><link rel="stylesheet" type="text/css" href="../style/style1.css" />

<meta name="DC.Creator" content="Elliotte Rusty Harold and W. Scott Means" /><meta name="DC.Format" content="text/xml" scheme="MIME" /><meta name="DC.Language" content="en-US" /><meta name="DC.Publisher" content="O'Reilly &amp; Associates, Inc." /><meta name="DC.Source" scheme="ISBN" content="0-596-00292-0" /><meta name="DC.Subject.Keyword" content="stuff" /><meta name="DC.Title" content="XML in a Nutshell, 2nd Edition" /><meta name="DC.Type" content="Text.Monograph" />

</head><body bgcolor="#ffffff">

<img src="gifs/smbanner.gif" usemap="#banner-map" border="0" alt="Book Home" /><map name="banner-map"><area shape="rect" coords="1,-2,616,66" href="index.htm" alt="XML in a Nutshell" /><area shape="rect" coords="629,-11,726,25" href="jobjects/fsearch.htm" alt="Search this book" /></map>

<div class="navbar"><table width="684" border="0"><tr><td align="left" valign="top" width="228"><a href="ch17_01.htm"><img src="../gifs/txtpreva.gif" alt="Previous" border="0" /></a></td><td align="center" valign="top" width="228" /><td align="right" valign="top" width="228"><a href="ch18_01.htm"><img src="../gifs/txtnexta.gif" alt="Next" border="0" /></a></td></tr></table></div>



<h2 class="sect1">17.2. Common XML Processing Issues</h2>

<p>As <a name="xmlnut2-IDXTERM-1595" />with any technology, there are several
ways to accomplish most design goals when developing a new XML
application, as well as a few potential problems worth knowing about
ahead of time. An understanding of the intended uses for these
features can help ensure that new applications will be compatible not
only with their intended target audience, but also with other XML
processing systems that may not even exist yet.
</p>

<a name="xmlnut2-CHP-17-SECT-2.1" /><div class="sect2">
<h3 class="sect2">17.2.1. What You Get Is Not What You Saw</h3>

<p>The XML specification provides several loopholes that permit XML
parsers to play fast and loose with your document's
literal contents, while retaining the semantic meaning.
<a name="IXT-17-240441" />Comments can be omitted and
<a name="IXT-17-240442" />entity references
silently replaced by the parser without any warning to the client
application. Nonvalidating parsers aren't required
to retrieve external DTDs or entities, though the parser should at
least warn applications that this is happening. While reconstructing
an XML document with exactly the same logical structure and content
is possible, guaranteeing that it will match the original in a
byte-by-byte comparison is not.
</p>



<a name="ch17-20-fm2xml" /><blockquote><b>TIP:</b> 
<a name="IXT-17-240443" />
<a name="IXT-17-240444" />XML
Canonicalization defines a form of XML and a process for getting
there that permits a much higher degree of predictability in
reconstructing documents from their logical model. For details, see
<a href="../../../../../../www.w3.org/TR/xml-c14n">http://www.w3.org/TR/xml-c14n</a>.</p>
</blockquote>

<p>Authors of simple XML processing tools that act on data without
storing or modifying it might not consider these constraints
particularly restrictive. The ability to reconstruct an XML document
precisely from in-memory data structures, however, becomes more
critical for authors of XML editing tools and content-management
solutions. While no parser is required to make all comments,
whitespace, and entity references available from the parse stream,
many do or can be made to do so with the proper configuration
options. </p> <p>The only real option to ensure that your
parser reports documents as you want, and not just the minimum
required by the XML 1.0 specification, is to check its documentation
and configure (or choose) your parser accordingly. </p>


</div>
<a name="xmlnut2-CHP-17-SECT-2.2" /><div class="sect2">
<h3 class="sect2">17.2.2. Comments</h3>

<p>Despite <a name="IXT-17-240445" />a long
history in HTML of using comments for tasks like Server-Side Includes
(SSI) and for hiding JavaScript code and Cascading Style Sheets,
using comments for anything other than human-readable notes is
generally a bad idea in XML. XML parsers may (and frequently do)
discard comments entirely, keeping them from reaching an application
at all. Transformations generally discard comments as well.
</p>

</div>
<a name="xmlnut2-CHP-17-SECT-2.3" /><div class="sect2">
<h3 class="sect2">17.2.3. Processing Instructions</h3>

<p>XML <a name="IXT-17-240446" />parsers are required to provide client
applications access to XML processing instructions. Processing
instructions provide a mechanism for document authors to communicate
with XML-aware applications behind the scenes in a way that
doesn't interfere with the content of the
documentation. DTD and schema validation both ignore processing
instructions, making it possible to use them anywhere in a document
structure without changing the DTD or schema. The processing
instruction's most widely recognized application is
its ability to embed stylesheet references inside XML documents. The
following XML fragment shows a stylesheet reference:
</p>

<blockquote><pre class="code">&lt;?xml version="1.0"?&gt;
&lt;?xml-stylesheet type="text/css" href="test.css"?&gt;</pre></blockquote>

<p>An XML-aware application, such as Internet Explorer 5.5, would be
capable of recognizing the XML author's intention to
display the document using the <tt class="literal">test.css</tt>
stylesheet. This processing instruction can also be used for XSLT
stylesheets or other kinds of stylesheets not yet developed, though
the application needs to understand how to process them to make this
work. Applications that do not understand the processing instructions
can still parse and use the information in the XML document while
ignoring the unfamiliar processing instruction.
</p>



<a name="ch17-24-fm2xml" /><blockquote><b>TIP:</b> 
For more information on how to use processing instructions to
designate a stylesheet(s), see the W3C Recommendation
<em class="emphasis">Associating Style Sheets with XML Documents</em> at
<a href="../../../../../../www.w3.org/TR/xml-stylesheet/">http://www.w3.org/TR/xml-stylesheet/</a>.</p>
</blockquote>

<p>The furniture example from <a href="ch20_01.htm">Chapter 20</a> (see
<a href="ch20_02.htm">Figure 20-1</a>) gives a hypothetical application of
processing instructions. A processing instruction in the
<em class="emphasis">bookcase.xml</em> file signals the furniture
example's processor to verify the parts list from
the document against the true list of parts required to build the
furniture item: </p>


<blockquote><pre class="code">    &lt;parts_list&gt;
        &lt;part_name id="A" count="1"&gt;END PANEL&lt;/part_name&gt;
        &lt;part_name id="B" count="2"&gt;SIDE PANEL&lt;/part_name&gt;
        &lt;part_name id="C" count="1"&gt;BACK PANEL&lt;/part_name&gt;
        &lt;part_name id="D" count="4"&gt;SHELF&lt;/part_name&gt;
        &lt;part_name id="E" count="8"&gt;HIDDEN CONNECTORS&lt;/part_name&gt;
        &lt;part_name id="F" count="8"&gt;CONNECTOR SCREWS&lt;/part_name&gt;
        &lt;part_name id="G" count="22"&gt;7/16" TACKS&lt;/part_name&gt;
        &lt;part_name id="H" count="16"&gt;SHELF PEGS&lt;/part_name&gt;
    &lt;/parts_list&gt;
  
&lt;?furniture_app    verify_parts_list?&gt;</pre></blockquote>

<p>This processing instruction is meaningless unless the parsing
application understands the given type of processing instruction.
</p>

<p>The XML specification also permits the association of the processing
instruction's target--the XML name
immediately after the <tt class="literal">&lt;?</tt> with a notation, as
described in the next section--but this is not required and is
rarely used in XML.
</p>

</div>
<a name="xmlnut2-CHP-17-SECT-2.4" /><div class="sect2">
<h3 class="sect2">17.2.4. Notations</h3>

<p>The <a name="IXT-17-240447" />notation
<a name="IXT-17-240448" />syntax of
XML provides a way for the document author to specify an external
unparsed entity's type within the XML
document's framework. If an application requires
access to external data that cannot be represented in XML, consider
declaring a notation name and using it where appropriate when
declaring external unparsed entities. For example, if an XML
application were an annotated Java source-code format, the compiled
bytecode could then be referenced as an external unparsed entity.
</p>

<p>Notations effectively provide metadata, identifiers that applications
may apply to information. Using notations requires making
declarations in the DTD, as described in <a href="ch03_01.htm">Chapter 3</a>. One use of notations is with NOTATION-type
attributes. For example, if a document contained various scripts
designed for different environments, it might declare some notations
and then use an attribute on a containing element to identify what
kind of script it contained:
</p>

<blockquote><pre class="code">&lt;!NOTATION DOS PUBLIC "-//MS/DOS Batch File/"&gt;
&lt;!NOTATION BASH PUBLIC "-//UNIX/BASH Shell Script/"&gt;
&lt;!ELEMENT batch_code (#PCDATA)*&gt;
&lt;!ATTLIST batch_code 
    lang NOTATION (DOS | BASH)&gt;
. . . 
&lt;batch_code lang="DOS"&gt;
  echo Hello, world!
&lt;/batch_code&gt;</pre></blockquote>

<p>Applications that read this document and recognized the public
identifier could interpret the foreign element data correctly, based
on its type. (Notations can also have system identifiers, and
applications can use either approach.)
</p>

<p>Categorizing processing instructions is the other use of notations
important to custom XML applications. For instance, the previous
<tt class="literal">furniture_app</tt> processing-instruction example could
have been declared as a notation in the DTD:
</p>

<blockquote><pre class="code">&lt;!NOTATION furniture_app SYSTEM "http://namespaces.example.com/furniture"&gt;</pre></blockquote>

<p>Then the furniture-document processing application could verify that
the processing instruction was actually intended for itself and not
for another application that used a processing instruction with the
same name.
</p>

</div>
<a name="xmlnut2-CHP-17-SECT-2.5" /><div class="sect2">
<h3 class="sect2">17.2.5. Unparsed Entities</h3>

<p>Unparsed <a name="IXT-17-240449" />
<a name="IXT-17-240450" />entities combine attribute and notation
declarations to define references to content that will require
further (unspecified) processing by the application. Unparsed
entities are described in more detail in <a href="ch03_01.htm">Chapter 3</a>, but though they are a feature available to
applications, they are also rarely used and not generally considered
interoperable among XML processors. The linking and referencing tools
described in the next section are more commonly used instead.
</p>

</div>
<a name="xmlnut2-CHP-17-SECT-2.6" /><div class="sect2">
<h3 class="sect2">17.2.6. Links and References</h3>

<p>The <a name="IXT-17-240451" />
<a name="IXT-17-240452" />
<a name="IXT-17-240453" />ability
<a name="IXT-17-240454" />to create links between and
within documents is important to XML's long-term
success, both on the World Wide Web and for other applications
concerned about the relationships between information. The XLink
specification, described in <a href="ch10_01.htm">Chapter 10</a>, defines the
semantics of how these links can be created. Unlike simple HTML
links, XLinks can express sophisticated relationships between the
source and target elements of a link.
</p>

<p>If an XML application requires the ability to encode relationships
between various parts of an XML document, or between different
documents, implementing this functionality using the XLinks
recommendation should be considered. Not only would it save the
effort of defining a new (and incompatible) linking scheme, the
resulting documents would be intelligible to new XML authoring tools
and browsers as XLinks support becomes more widespread. RDDL,
described in <a href="ch14_01.htm">Chapter 14</a>, makes extensive use of
XLink for <a name="IXTR3-226" />machine-readable <a name="IXTR3-227" />linking.
</p>



</div>


<hr width="684" align="left" />
<div class="navbar"><table width="684" border="0"><tr><td align="left" valign="top" width="228"><a href="ch17_01.htm"><img src="../gifs/txtpreva.gif" alt="Previous" border="0" /></a></td><td align="center" valign="top" width="228"><a href="index.htm"><img src="../gifs/txthome.gif" alt="Home" border="0" /></a></td><td align="right" valign="top" width="228"><a href="ch18_01.htm"><img src="../gifs/txtnexta.gif" alt="Next" border="0" /></a></td></tr><tr><td align="left" valign="top" width="228">17. Programming Models</td><td align="center" valign="top" width="228"><a href="index/index.htm"><img src="../gifs/index.gif" alt="Book Index" border="0" /></a></td><td align="right" valign="top" width="228">18. Document Object Model </td></tr></table></div>
<hr width="684" align="left" />

<img src="../gifs/navbar.gif" usemap="#library-map" border="0" alt="Library Navigation Links" />
<p><p><font size="-1"><a href="copyrght.htm">Copyright &copy; 2002</a> O'Reilly &amp; Associates. All rights reserved.</font></p>

<map name="library-map">
<area shape="rect" coords="0,0,85,93" href="../index.htm"><area shape="rect" coords="85,0,180,98" href="../sax2/index.htm"><area shape="rect" coords="182,-1,261,100" href="index.htm"><area shape="rect" coords="263,1,384,96" href="../jxml/index.htm"><area shape="rect" coords="386,1,463,100" href="../jxslt/index.htm"><area shape="rect" coords="466,1,533,112" href="../xslt/index.htm"><area shape="rect" coords="535,-1,610,108" href="../schema/index.htm"><area shape="rect" coords="613,1,696,121" href="../pxml/index.htm">
</map>

</body></html>