<html><head><title>Complex Types (XML in a Nutshell, 2nd Edition)</title><link rel="stylesheet" type="text/css" href="../style/style1.css" />

<meta name="DC.Creator" content="Elliotte Rusty Harold and W. Scott Means" /><meta name="DC.Format" content="text/xml" scheme="MIME" /><meta name="DC.Language" content="en-US" /><meta name="DC.Publisher" content="O'Reilly &amp; Associates, Inc." /><meta name="DC.Source" scheme="ISBN" content="0-596-00292-0" /><meta name="DC.Subject.Keyword" content="stuff" /><meta name="DC.Title" content="XML in a Nutshell, 2nd Edition" /><meta name="DC.Type" content="Text.Monograph" />

</head><body bgcolor="#ffffff">

<img src="gifs/smbanner.gif" usemap="#banner-map" border="0" alt="Book Home" /><map name="banner-map"><area shape="rect" coords="1,-2,616,66" href="index.htm" alt="XML in a Nutshell" /><area shape="rect" coords="629,-11,726,25" href="jobjects/fsearch.htm" alt="Search this book" /></map>

<div class="navbar"><table width="684" border="0"><tr><td align="left" valign="top" width="228"><a href="ch16_03.htm"><img src="../gifs/txtpreva.gif" alt="Previous" border="0" /></a></td><td align="center" valign="top" width="228" /><td align="right" valign="top" width="228"><a href="ch16_05.htm"><img src="../gifs/txtnexta.gif" alt="Next" border="0" /></a></td></tr></table></div>



<h2 class="sect1">16.4. Complex Types</h2>

<p>A <a name="xmlnut2-IDXTERM-1417" /> <a name="xmlnut2-IDXTERM-1418" />
<a name="xmlnut2-IDXTERM-1419" />schema <a name="xmlnut2-IDXTERM-1420" />assigns a type to each element and
attribute it declares. In <a href="ch16_03.htm">Example 16-5</a>, the
<tt class="literal">fullName</tt> element has a <em class="emphasis">complex
type</em>. Elements with complex types may contain nested
elements and have attributes. Only elements can have complex types.
Attributes always have simple types.
</p>

<p>Since the type is declared using an <tt class="literal">xs:complexType</tt>
element embedded directly in the element declaration, it is also an
<em class="firstterm">anonymous type</em><a name="xmlnut2-IDXTERM-1421" />
rather than a <em class="firstterm">named type</em>.
</p>

<p>New types are defined using
<tt class="literal">xs:complexType</tt><a name="IXT-16-240095" /> or
<tt class="literal">xs:simpleType</tt><a name="IXT-16-240096" /> elements. If a new type is declared
globally with a top-level element, it needs to be given a name so
that it can be referenced from element and attribute declarations
within the schema. If a type is declared inline (inside an element or
attribute declaration), it does not need to be named. But since it
has no name, it cannot be referenced by other element or attribute
declarations. When building large and complex schemas, data types
will need to be shared among multiple different elements. To
facilitate this reuse, it is necessary to create named types.
</p>

<p>To show how named types and complex content interact,
let's expand the example schema. A new
<tt class="literal">address</tt> element will contain the
<tt class="literal">fullName</tt> element, and the
person's name will be divided into a first- and
last-name component. A typical <a name="IXT-16-240097" />instance document would look like <a href="ch16_04.htm">Example 16-6</a>.
</p>

<a name="xmlnut2-CHP-16-EX-6" /><div class="example">
<h4 class="objtitle">Example 16-6. addressdoc.xml after adding address, first, and last elements </h4>
<blockquote><pre class="code">&lt;?xml version="1.0"?&gt;
&lt;addr:address xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="http://namespaces.oreilly.com/xmlnut/address 
      address-schema.xsd"
    xmlns:addr="http://namespaces.oreilly.com/xmlnut/address"
    addr:language="en"&gt;
  &lt;addr:fullName&gt;
    &lt;addr:first&gt;Scott&lt;/addr:first&gt;
    &lt;addr:last&gt;Means&lt;/addr:last&gt;
  &lt;/addr:fullName&gt;
&lt;/addr:address&gt;</pre></blockquote>
</div>

<p>To accommodate this new format, fairly substantial structural changes
to the schema are required, as shown in <a href="ch16_04.htm">Example 16-7</a>.
</p>

<a name="xmlnut2-CHP-16-EX-7" /><div class="example">
<h4 class="objtitle">Example 16-7. address-schema.xsd to support address element </h4>
<blockquote><pre class="code">&lt;xs:schema xmlns:xs="http://www.w3.org/2001/XMLSchema"
  targetNamespace="http://namespaces.oreilly.com/xmlnut/address"
  xmlns:addr="http://namespaces.oreilly.com/xmlnut/address"
  attributeFormDefault="qualified" elementFormDefault="qualified"&gt;
&lt;xs:element name="address"&gt;
  &lt;xs:complexType&gt;
    &lt;xs:sequence&gt;
      &lt;xs:element name="fullName"&gt;
        &lt;xs:complexType&gt;
          &lt;xs:sequence&gt;
            &lt;xs:element name="first" type="addr:nameComponent"/&gt;
            &lt;xs:element name="last" type="addr:nameComponent"/&gt;
          &lt;/xs:sequence&gt;
        &lt;/xs:complexType&gt;
      &lt;/xs:element&gt;
    &lt;/xs:sequence&gt;
  &lt;xs:attributeGroup ref="addr:nationality"/&gt;
  &lt;/xs:complexType&gt;
 &lt;/xs:element&gt;
 
 &lt;xs:complexType name="nameComponent"&gt;
  &lt;xs:simpleContent&gt;
    &lt;xs:extension base="xs:string"/&gt;
  &lt;/xs:simpleContent&gt;
 &lt;/xs:complexType&gt;
&lt;/xs:schema&gt;</pre></blockquote>
</div>

<p>The first major difference between this schema and the previous
version is that the root element name has been changed from
<tt class="literal">fullName</tt> to <tt class="literal">address</tt>. The same
result could have been accomplished by creating a new top-level
element declaration for the new <tt class="literal">address</tt> element,
but that would have opened a loophole allowing a valid instance
document to contain only a <tt class="literal">fullName</tt> element and
nothing else.
</p>

<p>Within the <tt class="literal">address</tt> element declaration, a new
anonymous complex type is declared. Unlike the old declaration, this
complex type is declared to contain complex content using the
<tt class="literal">xs:sequence</tt><a name="IXT-16-240098" /> element. The sequence element tells the
schema processor that the contained list of elements must appear in
the target document in the exact order they are given. In this case,
the sequence contains only one element declaration.
</p>

<p>The nested element declaration is for the <tt class="literal">fullName</tt>
element, which then repeats the <tt class="literal">xs:complexType</tt> and
<tt class="literal">xs:sequence</tt> declaration process. Within this
nested sequence, two element declarations appear for the
<tt class="literal">first</tt> and <tt class="literal">last</tt> elements.
</p>

<p>These two element declarations, unlike all prior element
declarations, explicitly reference a new complex type
that's declared in the schema, the
<tt class="literal">addr:nameComponent</tt> type. It is fully qualified to
differentiate it from possible conflicts with built-in schema data
types.
</p>

<p>The <tt class="literal">nameComponent</tt> type is declared by the
<tt class="literal">xs:complexType</tt> element immediately following the
<tt class="literal">address</tt> element declaration. It is identified as a
named type by the presence of the <tt class="literal">name</tt> attribute,
but in every other way it is constructed the same way it would have
been as an <a name="IXTR3-184" />anonymous type.
</p>

<a name="xmlnut2-CHP-16-SECT-4.1" /><div class="sect2">
<h3 class="sect2">16.4.1. Occurrence Constraints</h3>

<p>One <a name="IXT-16-240099" /> <a name="IXT-16-240100" />feature
<a name="IXT-16-240101" />of schemas that should be welcome
to DTD developers is the ability to explicitly set the minimum and
maximum number of times an element may occur at a particular point in
a document using
<tt class="literal">minOccurs</tt><a name="IXT-16-240102" /> and
<tt class="literal">maxOccurs</tt><a name="IXT-16-240103" /> attributes of the
<tt class="literal">xs:element</tt> element. For example, this declaration
adds an optional middle name to the <tt class="literal">fullName</tt>
element:
</p>

<blockquote><pre class="code">&lt;xs:element name="fullName"&gt;
  &lt;xs:complexType&gt;
    &lt;xs:sequence&gt;
      &lt;xs:element name="first" type="addr:nameComponent"/&gt;
      &lt;xs:element name="middle" type="addr:nameComponent"
          minOccurs="0"/&gt;
      &lt;xs:element name="last" type="addr:nameComponent"/&gt;
    &lt;/xs:sequence&gt;
  &lt;/xs:complexType&gt;
&lt;/xs:element&gt;</pre></blockquote>

<p>Notice that the element declaration for the <tt class="literal">middle</tt>
element has a <tt class="literal">minOccurs</tt> value of 0. The default
value for both <tt class="literal">minOccurs</tt> and
<tt class="literal">maxOccurs</tt> is 1, if they are not provided
explicitly. Therefore, setting <tt class="literal">minOccurs</tt> to 0
means that the <tt class="literal">middle</tt> element may appear 0 to 1
times. This is equivalent to using the <tt class="literal">?</tt> operator
in a DTD declaration. Another possible value for the
<tt class="literal">maxOccurs</tt> attribute is
<tt class="literal">unbounded</tt>, which indicates that the element in
question may appear an unlimited number of times. This value is used
to produce the same effect as the <tt class="literal">*</tt> and
<tt class="literal">+</tt> operators in a DTD declaration.
</p>

</div>
<a name="xmlnut2-CHP-16-SECT-4.2" /><div class="sect2">
<h3 class="sect2">16.4.2. Types of Element Content</h3>

<p>So far you have seen elements that contain only character data and
elements that contain only other elements. The next several sections
cover each of the possible types of element content individually,
from most restrictive to least restrictive:
</p>

<ul><li>
<p>Empty</p>
</li><li>
<p>Simple content</p>
</li><li>
<p><a name="IXTR3-185" />Mixed
content
</p>
</li><li>
<p><a name="IXTR3-186" />
<a name="IXTR3-187" />
<a name="IXTR3-188" />Any type
</p>
</li></ul>
</div>


<hr width="684" align="left" />
<div class="navbar"><table width="684" border="0"><tr><td align="left" valign="top" width="228"><a href="ch16_03.htm"><img src="../gifs/txtpreva.gif" alt="Previous" border="0" /></a></td><td align="center" valign="top" width="228"><a href="index.htm"><img src="../gifs/txthome.gif" alt="Home" border="0" /></a></td><td align="right" valign="top" width="228"><a href="ch16_05.htm"><img src="../gifs/txtnexta.gif" alt="Next" border="0" /></a></td></tr><tr><td align="left" valign="top" width="228">16.3. Working with Namespaces</td><td align="center" valign="top" width="228"><a href="index/index.htm"><img src="../gifs/index.gif" alt="Book Index" border="0" /></a></td><td align="right" valign="top" width="228">16.5. Empty Elements</td></tr></table></div>
<hr width="684" align="left" />

<img src="../gifs/navbar.gif" usemap="#library-map" border="0" alt="Library Navigation Links" />
<p><p><font size="-1"><a href="copyrght.htm">Copyright &copy; 2002</a> O'Reilly &amp; Associates. All rights reserved.</font></p>

<map name="library-map">
<area shape="rect" coords="0,0,85,93" href="../index.htm"><area shape="rect" coords="85,0,180,98" href="../sax2/index.htm"><area shape="rect" coords="182,-1,261,100" href="index.htm"><area shape="rect" coords="263,1,384,96" href="../jxml/index.htm"><area shape="rect" coords="386,1,463,100" href="../jxslt/index.htm"><area shape="rect" coords="466,1,533,112" href="../xslt/index.htm"><area shape="rect" coords="535,-1,610,108" href="../schema/index.htm"><area shape="rect" coords="613,1,696,121" href="../pxml/index.htm">
</map>

</body></html>