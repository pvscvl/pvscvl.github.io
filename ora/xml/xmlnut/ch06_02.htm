<html><head><title>Narrative Document Structures (XML in a Nutshell, 2nd Edition)</title><link rel="stylesheet" type="text/css" href="../style/style1.css" />

<meta name="DC.Creator" content="Elliotte Rusty Harold and W. Scott Means" /><meta name="DC.Format" content="text/xml" scheme="MIME" /><meta name="DC.Language" content="en-US" /><meta name="DC.Publisher" content="O'Reilly &amp; Associates, Inc." /><meta name="DC.Source" scheme="ISBN" content="0-596-00292-0" /><meta name="DC.Subject.Keyword" content="stuff" /><meta name="DC.Title" content="XML in a Nutshell, 2nd Edition" /><meta name="DC.Type" content="Text.Monograph" />

</head><body bgcolor="#ffffff">

<img src="gifs/smbanner.gif" usemap="#banner-map" border="0" alt="Book Home" /><map name="banner-map"><area shape="rect" coords="1,-2,616,66" href="index.htm" alt="XML in a Nutshell" /><area shape="rect" coords="629,-11,726,25" href="jobjects/fsearch.htm" alt="Search this book" /></map>

<div class="navbar"><table width="684" border="0"><tr><td align="left" valign="top" width="228"><a href="ch06_01.htm"><img src="../gifs/txtpreva.gif" alt="Previous" border="0" /></a></td><td align="center" valign="top" width="228" /><td align="right" valign="top" width="228"><a href="ch06_03.htm"><img src="../gifs/txtnexta.gif" alt="Next" border="0" /></a></td></tr></table></div>



<h2 class="sect1">6.2. Narrative Document Structures</h2>

<p>All <a name="xmlnut2-IDXTERM-536" />
<a name="xmlnut2-IDXTERM-537" />XML
<a name="xmlnut2-IDXTERM-538" />documents
are trees. However, trees are very general-purpose data structures.
If you've been formally trained in computer science
(and very possibly even if you haven't been),
you've encountered binary trees, red-black trees,
balanced trees, B-trees, ordered trees, and more. However, when
working with XML, it's highly unlikely that any
given document matches any of these structures. Instead, XML
documents are the most general sort of tree, with no particular
restrictions on how nodes are ordered or how or which nodes are
connected to which other nodes. Narrative XML documents are even less
likely than data-oriented XML documents to have an identifiable
structure beyond their mere treeness.
</p>

<p>So what does a narrative-oriented XML document look like? Of course,
there's a <a name="IXT-6-239996" />root element. All
XML documents have one. Generally speaking, this root element
represents the document itself. That is, if the document is a book,
the root element is <tt class="literal">book</tt>. If the document is an
article, the root element is <tt class="literal">article</tt>, and so on.
</p>

<p>Beyond that, large documents are generally broken up into sections of
some kind, perhaps chapters for a book, parts for an article, or
claims for a legal brief. Most of the document consists of these
primary sections. In some cases, there'll be several
different kinds of sections; for instance, one for the table of
contents, one for the index, and one for the chapters of a book.
</p>

<p>Generally, the root element also contains one or more elements
providing metainformation about the document, for example, the title
of the work, the author of the document, the dates the document was
written and last modified, and so forth. One common pattern is to
place the metainformation in one <a name="IXT-6-239997" />child of the root
element and the main content of the work in another. This is how
<a name="IXT-6-239998" />HTML documents are written. The root
element is <tt class="literal">html</tt>. The metainformation goes in a
<tt class="literal">head</tt> element, and the main content goes in the
<tt class="literal">body</tt> element. TEI and DocBook also follow this
pattern.
</p>

<p>Sections of the document can be further divided into subsections. The
subsections themselves may be further divided. How many levels of
subsection appear generally depends on how large the document is. An
encyclopedia will have many levels of sectioning--a pamphlet or
flier almost none. Each section and subsection normally has a title.
It may also have elements or attributes that indicate metainformation
about the section, such as the author or date it was last modified.
</p>

<p>Up to this point, mixed content is mostly avoided. Elements
<a name="IXT-6-239999" />contain child elements and
whitespace, and that's likely all they contain.
However, at some level it becomes necessary to insert the actual text
of the document--the words that people will read. In most
Western languages these will probably be divided into paragraphs and
other block-level elements like headlines, figures, sidebars, and
footnotes. Generic document DTDs like DocBook won't
be able to say more about these items than this.
</p>

<p>The paragraphs and other block-level items will mostly contain words
in a row, that is, text. Some of this text may be marked up with
inline elements. For instance, you may wish to indicate that a
particular string of text inside the block-level element is a date, a
person, or simply important. However, most of the text will not be so
annotated.
</p>

<p>One area in which different XML applications diverge is the question
of whether block-level items may contain other block-level items. For
instance, can a paragraph contain a list? Or can a list item contain
a paragraph? It's probably easier to work with more
structured documents in which blocks can't contain
other blocks (particularly other instances of the same kind).
However, it's very often the case that a block has a
very good reason to contain other blocks. For instance, a long list
item or quotation may contain several paragraphs.
</p>

<p>For the most part, this entire structure from the root down to the
most deeply nested inline item tends to be quite linear; that is, you
expect that a person will read the words in pretty much the same
order they appear in the document. If all the markup were suddenly
removed and you were left with nothing but the raw text, the result
should be more or less legible. The markup can be used to index or
format the document, but it's not a fundamental part
of the content.
</p>

<p>Another important point about these sorts of XML documents: not only
are they composed of words in a row; they're
composed of <em class="emphasis">words</em>. What they contain is text
intended for human beings to read. They're not
numbers or dates or money, except insofar as these things occur as
part of the normal flow of the narrative. The
<tt class="literal">#PCDATA</tt><a name="IXT-6-240000" /> content of the lowest-level
elements of the tree mostly have one type:
<em class="firstterm">string</em>. If anything has a real type beyond
string it's likely metainformation about the
document (figure number, date last modified, and so on) rather than
the content of the document itself.
</p>

<p>This explains, in detail, why DTDs don't provide
strong (or really any) data typing. The documents for which SGML was
designed didn't need it. XML documents are doing
jobs for which SGML wasn't designed, such as
tracking inventories or census data, do need data typing;
that's why various people and organizations have
invented a plethora of schema languages. However, schemas really
don't improve on DTDs for narrative documents.
</p>

<p>Not all XML documents are like those we've described
here. Not even all narrative-oriented XML documents are like this.
However, a surprising number of narrative-oriented XML applications
do follow this basic pattern, perhaps with a nip here or a tuck
there. The reason is that this is the basic structure narratives
follow, and that has proven its usefulness in the thousands of years
since writing was invented. If you were to define your own DTDs for
general narrative-oriented documents, you'd probably
come up with something a lot like this. If you define your own DTDs
for more specialized narrative-oriented documents, then the names of
your elements may change to reflect your domain--for instance,
if you were writing the next edition of the Boy Scout handbook, one
of your subsections might be called
<tt class="literal">MeritBadge</tt>--however, the basic hierarchy of
document, metainformation, sections and subsections, block-level
elements, and marked-up text would likely <a name="IXTR3-169" /><a name="IXTR3-170" /> <a name="IXTR3-171" />remain.
</p>



<hr width="684" align="left" />
<div class="navbar"><table width="684" border="0"><tr><td align="left" valign="top" width="228"><a href="ch06_01.htm"><img src="../gifs/txtpreva.gif" alt="Previous" border="0" /></a></td><td align="center" valign="top" width="228"><a href="index.htm"><img src="../gifs/txthome.gif" alt="Home" border="0" /></a></td><td align="right" valign="top" width="228"><a href="ch06_03.htm"><img src="../gifs/txtnexta.gif" alt="Next" border="0" /></a></td></tr><tr><td align="left" valign="top" width="228">6. XML as a Document Format</td><td align="center" valign="top" width="228"><a href="index/index.htm"><img src="../gifs/index.gif" alt="Book Index" border="0" /></a></td><td align="right" valign="top" width="228">6.3. TEI</td></tr></table></div>
<hr width="684" align="left" />

<img src="../gifs/navbar.gif" usemap="#library-map" border="0" alt="Library Navigation Links" />
<p><p><font size="-1"><a href="copyrght.htm">Copyright &copy; 2002</a> O'Reilly &amp; Associates. All rights reserved.</font></p>

<map name="library-map">
<area shape="rect" coords="0,0,85,93" href="../index.htm"><area shape="rect" coords="85,0,180,98" href="../sax2/index.htm"><area shape="rect" coords="182,-1,261,100" href="index.htm"><area shape="rect" coords="263,1,384,96" href="../jxml/index.htm"><area shape="rect" coords="386,1,463,100" href="../jxslt/index.htm"><area shape="rect" coords="466,1,533,112" href="../xslt/index.htm"><area shape="rect" coords="535,-1,610,108" href="../schema/index.htm"><area shape="rect" coords="613,1,696,121" href="../pxml/index.htm">
</map>

</body></html>