<html><head><title>Simple Content (XML in a Nutshell, 2nd Edition)</title><link rel="stylesheet" type="text/css" href="../style/style1.css" />

<meta name="DC.Creator" content="Elliotte Rusty Harold and W. Scott Means" /><meta name="DC.Format" content="text/xml" scheme="MIME" /><meta name="DC.Language" content="en-US" /><meta name="DC.Publisher" content="O'Reilly &amp; Associates, Inc." /><meta name="DC.Source" scheme="ISBN" content="0-596-00292-0" /><meta name="DC.Subject.Keyword" content="stuff" /><meta name="DC.Title" content="XML in a Nutshell, 2nd Edition" /><meta name="DC.Type" content="Text.Monograph" />

</head><body bgcolor="#ffffff">

<img src="gifs/smbanner.gif" usemap="#banner-map" border="0" alt="Book Home" /><map name="banner-map"><area shape="rect" coords="1,-2,616,66" href="index.htm" alt="XML in a Nutshell" /><area shape="rect" coords="629,-11,726,25" href="jobjects/fsearch.htm" alt="Search this book" /></map>

<div class="navbar"><table width="684" border="0"><tr><td align="left" valign="top" width="228"><a href="ch16_05.htm"><img src="../gifs/txtpreva.gif" alt="Previous" border="0" /></a></td><td align="center" valign="top" width="228" /><td align="right" valign="top" width="228"><a href="ch16_07.htm"><img src="../gifs/txtnexta.gif" alt="Next" border="0" /></a></td></tr></table></div>



<h2 class="sect1">16.6. Simple Content</h2>

<p>Earlier, <a name="xmlnut2-IDXTERM-1446" /> <a name="xmlnut2-IDXTERM-1447" /> <a name="xmlnut2-IDXTERM-1448" /> <a name="xmlnut2-IDXTERM-1449" />the
<tt class="literal">xs:simpleContent</tt><a name="IXT-16-240114" /> element was used to declare an element
that could only contain simple content:
</p>

<blockquote><pre class="code">&lt;xs:element name="fullName"&gt;
  &lt;xs:complexType&gt;
    &lt;xs:simpleContent&gt;
      &lt;xs:extension base="xs:string"&gt;
        &lt;xs:attribute name="language" type="xs:language"/&gt;
      &lt;/xs:extension&gt;
    &lt;/xs:simpleContent&gt;
  &lt;/xs:complexType&gt;
 &lt;/xs:element&gt;</pre></blockquote>

<p>The base type for the extension in this case was the built-in
<tt class="literal">xs:string</tt><a name="IXT-16-240115" /> data type. But simple types are not
limited to the predefined types. The
<tt class="literal">xs:simpleType</tt><a name="IXT-16-240116" /> element can define new simple data
types, which can be referenced by element and attribute declarations
within the schema.
</p>

<a name="xmlnut2-CHP-16-SECT-6.1" /><div class="sect2">
<h3 class="sect2">16.6.1. Defining New Simple Types</h3>

<p>To <a name="IXT-16-240117" />
<a name="IXT-16-240118" />
<a name="IXT-16-240119" />show how
new simple types can be defined, let's extend the
<tt class="literal">phone</tt> element from the example application to
support a new attribute called <tt class="literal">location</tt>. This
attribute will be used to differentiate between work and home phone
numbers. This attribute will have a new simple type called
<tt class="literal">locationType</tt>, which will be referenced from the
<tt class="literal">contactsType</tt> definition:
</p>

<blockquote><pre class="code">&lt;xs:complexType name="contactsType"&gt;
  &lt;xs:sequence&gt;
    &lt;xs:element name="phone" minOccurs="0"&gt;
      &lt;xs:complexType&gt;
        &lt;xs:attribute name="number" type="xs:string"/&gt;
         &lt;xs:attribute name="location" type="addr:locationType"/&gt;
      &lt;/xs:complexType&gt;
    &lt;/xs:element&gt;
  &lt;/xs:sequence&gt;
&lt;/xs:complexType&gt;

&lt;xs:simpleType name="locationType"&gt;
  &lt;xs:restriction base="xs:string"/&gt;
&lt;/xs:simpleType&gt;</pre></blockquote>

<p>Of course, a location type that just maps to the built-in
<tt class="literal">xs:string</tt> type isn't particularly
useful. Fortunately, schemas can strictly control the possible values
of simple types through a mechanism called
<em class="emphasis">facets</em>.
</p>

</div>
<a name="xmlnut2-CHP-16-SECT-6.2" /><div class="sect2">
<h3 class="sect2">16.6.2. Facets</h3>

<p>In <a name="xmlnut2-IDXTERM-1456" /> <a name="xmlnut2-IDXTERM-1457" />schema-speak,
a facet is an aspect of a possible value for a simple data type.
Depending on the base type, some facets make more sense than others.
For example, a numeric data type can be restricted by the minimum and
maximum possible values it could contain. But these types of
restrictions wouldn't make sense for a
<tt class="literal">boolean</tt> value. The following list covers the
different facet types that are supported by a schema processor:
</p>

<ul><li>
<p><tt class="literal">length</tt> (or <tt class="literal">minLength</tt> and
<tt class="literal">maxLength</tt>)
</p>
</li><li>
<p><tt class="literal">pattern</tt></p>
</li><li>
<p><tt class="literal">enumeration</tt></p>
</li><li>
<p><tt class="literal">whiteSpace</tt></p>
</li><li>
<p><tt class="literal">maxInclusive</tt> and <tt class="literal">maxExclusive</tt></p>
</li><li>
<p><tt class="literal">minInclusive</tt> and <tt class="literal">minExclusive</tt></p>
</li><li>
<p><tt class="literal">totalDigits</tt></p>
</li><li>
<p><tt class="literal">fractionDigits</tt></p>
</li></ul>
<p>Facets are applied to simple types using the
<tt class="literal">xs:restriction</tt><a name="IXT-16-240120" /> element. Each facet is expressed as a
distinct element within the restriction block, and multiple facets
can be combined to further restrict potential values of the simple
type.
</p>

<a name="xmlnut2-CHP-16-SECT-6.2.1" /><div class="sect3">
<h3 class="sect3">16.6.2.1. Handling whitespace</h3>

<p>The <tt class="literal">whiteSpace</tt><a name="IXT-16-240121" />
<a name="IXT-16-240122" /> <a name="IXT-16-240123" /> facet
controls how the schema processor will deal with any whitespace
within the target data. Whitespace normalization takes place before
any of the other facets are processed. There are three possible
values for the <tt class="literal">whiteSpace</tt> facet:
</p>

<dl>
<dt><tt class="literal">preserve</tt></dt>
<dd>
Keep all whitespace exactly as it was in the source document (basic
XML 1.0 whitespace handling for content within elements).
</p>
</dd>


<dt><tt class="literal">replace</tt></dt>
<dd>
Replace occurrences of <tt class="literal">#x9</tt> (tab),
<tt class="literal">#xA</tt> (line feed), and <tt class="literal">#xD</tt>
(carriage return) characters with <tt class="literal">#x20</tt> (space)
characters.
</p>
</dd>


<dt><tt class="literal">collapse</tt></dt>
<dd>
Perform the replace step first, then collapse multiple-space
characters into a single space.
</p>
</dd>

</dl>

</div>

<a name="xmlnut2-CHP-16-SECT-6.2.2" /><div class="sect3">
<h3 class="sect3">16.6.2.2. Restricting length</h3>

<p>The <a name="IXT-16-240124" />
<a name="IXT-16-240125" />
<a name="IXT-16-240126" />length-restriction
facets are fairly easy to understand. The <tt class="literal">length</tt>
facet forces a value to be <em class="emphasis">exactly</em></tt> the length
given. The <tt class="literal">minLength</tt><a name="IXT-16-240127" /> <a name="IXT-16-240128" /> <a name="IXT-16-240129" /> and
<tt class="literal">maxLength</tt><a name="IXT-16-240130" /> <a name="IXT-16-240131" /> <a name="IXT-16-240132" /> facets
can be used to set a definite range for the lengths of values of the
type given. For example, take the <tt class="literal">nameComponent</tt>
type from the schema. What if a name component could not exceed 50
characters (because of a database limitation, for instance)? This
rule can be enforced by using the <tt class="literal">maxLength</tt> facet.
Incorporating this facet requires a new simple type to reference from
within the <tt class="literal">nameComponent</tt> complex type definition:
</p>

<blockquote><pre class="code">&lt;xs:complexType name="nameComponent"&gt;
  &lt;xs:simpleContent&gt;
    &lt;xs:extension base="addr:nameString"/&gt;
  &lt;/xs:simpleContent&gt;
 &lt;/xs:complexType&gt;
 
 &lt;xs:simpleType name="nameString"&gt;
  &lt;xs:restriction base="xs:string"&gt;
    &lt;xs:maxLength value="50"/&gt;
  &lt;/xs:restriction&gt;
 &lt;/xs:simpleType&gt;</pre></blockquote>

<p>The new <tt class="literal">nameString</tt> simple type is derived from the
built-in <tt class="literal">xs:string</tt> type, but can contain no more
than 50 characters (the default is unlimited). The same approach can
be used with the <tt class="literal">length</tt> and
<tt class="literal">minLength</tt> facets.
</p>

</div>

<a name="xmlnut2-CHP-16-SECT-6.2.3" /><div class="sect3">
<h3 class="sect3">16.6.2.3. Enumerations</h3>

<p>One <a name="IXT-16-240133" /> <a name="IXT-16-240134" /> <a name="IXT-16-240135" />of
the more useful types of restriction is the simple enumeration. In
many cases, it is sufficient to restrict possible values for an
element or attribute to a member of a predefined list. For example,
values of the new <tt class="literal">locationType</tt> simple type defined
earlier could be restricted to a list of valid options like so:
</p>

<blockquote><pre class="code">&lt;xs:simpleType name="locationType"&gt;
  &lt;xs:restriction base="xs:string"&gt;
    &lt;xs:enumeration value="work"/&gt;
    &lt;xs:enumeration value="home"/&gt;
    &lt;xs:enumeration value="mobile"/&gt;
  &lt;/xs:restriction&gt;      
&lt;/xs:simpleType&gt;</pre></blockquote>

<p>Then, if the <tt class="literal">location</tt> attribute in any instance
document contained a value not found in the list of enumeration
values, the schema processor would generate a validity error.
</p>

</div>

<a name="xmlnut2-CHP-16-SECT-6.2.4" /><div class="sect3">
<h3 class="sect3">16.6.2.4. Numeric Facets</h3>

<p>Almost half of the of built-in data types defined by the schema
specification represent numeric data of one type or another. More
might be called numeric since the date/time and duration types are
considered to be scalar quantities as well. The following two
sections cover all of the numeric facets available, but for a
comprehensive list of which of these facets are applicable to which
data types, see <a href="ch21_01.htm">Chapter 21</a>.
</p>

<a name="xmlnut2-CHP-16-SECT-6.2.4.1" /><div class="sect4">
<h4 class="sect4">16.6.2.4.1. Minimum and maximum values</h4>

<p>Four facets control the minimum and maximum values of items:</p>

<ul><li>
<p><tt class="literal">minInclusive</tt><a name="IXT-16-240136" /> <a name="IXT-16-240137" />
<a name="IXT-16-240138" />
</p>
</li><li>
<p><tt class="literal">minExclusive</tt><a name="IXT-16-240139" /> <a name="IXT-16-240140" />
<a name="IXT-16-240141" />
</p>
</li><li>
<p><tt class="literal">maxInclusive</tt><a name="IXT-16-240142" /> <a name="IXT-16-240143" />
<a name="IXT-16-240144" />
</p>
</li><li>
<p><tt class="literal">maxExclusive</tt><a name="IXT-16-240145" /> <a name="IXT-16-240146" />
<a name="IXT-16-240147" />
</p>
</li></ul>
<p>The primary difference between the inclusive and exclusive flavors of
the min and max facets is whether the value given is considered part
of the set of allowable values. For example, the following two facet
declarations are equivalent:
</p>

<blockquote><pre class="code">&lt;xs:maxInclusive value="1"/&gt;
&lt;xs:maxExclusive value="0"/&gt;</pre></blockquote>

<p>The difference between inclusive and exclusive becomes more
significant when dealing with decimal or floating point values. For
example, if <tt class="literal">minExclusive</tt> were set to
<tt class="literal">5.0</tt>, the equivalent
<tt class="literal">minInclusive</tt> value would require an infinite
number of nines to the right of the decimal point
(<tt class="literal">4.99999</tt>). These facets can also be applied to
date and time values.
</p>

</div>

<a name="xmlnut2-CHP-16-SECT-6.2.4.2" /><div class="sect4">
<h4 class="sect4">16.6.2.4.2. Length and precision</h4>

<p>There are two facets that control the length and precision of decimal
numeric values:
<tt class="literal">totalDigits</tt><a name="IXT-16-240148" /> <a name="IXT-16-240149" /> <a name="IXT-16-240150" /> and
<tt class="literal">fractionDigits</tt><a name="IXT-16-240151" />
<a name="IXT-16-240152" /> <a name="IXT-16-240153" />.
The <tt class="literal">totalDigits</tt> facet determines the total number
of digits (only digits are counted, not signs or decimal points) that
are allowed in a complete number. <tt class="literal">fractionDigits</tt>
determines the number of those digits that must appear to the right
of the decimal point in the number.
</p>

</div>

</div>

<a name="xmlnut2-CHP-16-SECT-6.2.5" /><div class="sect3">
<h3 class="sect3">16.6.2.5. Enforcing format</h3>

<p>The <tt class="literal">xs:pattern</tt><a name="IXT-16-240154" /> <a name="IXT-16-240155" /> <a name="IXT-16-240156" /> facet
can place very sophisticated restrictions on the format of string
values. The pattern facet compares the value in question against a
regular expression, and if the value doesn't conform
to the expression, it generates a validation error. For example, this
<tt class="literal">xs:simpleType</tt> element declares a social security
number simple type using the pattern facet:
</p>

<blockquote><pre class="code">&lt;xs:simpleType name="ssn"&gt;
  &lt;xs:restriction base="xs:string"&gt;
    &lt;xs:pattern value="\d\d\d-\d\d-\d\d\d\d"/&gt;
  &lt;/xs:restriction&gt;
 &lt;/xs:simpleType&gt;</pre></blockquote>

<p>This new simple type enforces the rule that a social security number
consists of three digits, a dash followed by two digits, another
dash, and finally four more digits. The actual regular-expression
language is very similar to that of the Perl programming language,
but it also supports a wide range of Unicode characters. See <a href="ch21_01.htm">Chapter 21</a> for more information on the <a name="IXTR3-189" /> <a name="IXTR3-190" />full <a name="IXTR3-191" /> <a name="IXTR3-192" /> <a name="IXTR3-193" /> <a name="IXTR3-194" />pattern-matching
language.
</p>

</div>

<a name="xmlnut2-CHP-16-SECT-6.2.6" /><div class="sect3">
<h3 class="sect3">16.6.2.6. Lists</h3>

<p>XML 1.0 <a name="IXT-16-240157" />
<a name="IXT-16-240158" />provided a few very simple list types that
could be declared as possible attribute values:
<tt class="literal">IDREFS</tt>, <tt class="literal">ENTITIES</tt>, and
<tt class="literal">NMTOKENS</tt>. Schemas have generalized the concept of
lists and provide the ability to declare lists of arbitrary types.
</p>

<p>These list types are themselves simple types and may be used in the
same places other simple types are used. For example, if the
<tt class="literal">fullName</tt> element were to be expanded to
accommodate multiple middle names, one approach would be to declare
the <tt class="literal">middle</tt> element to contain a list of
<tt class="literal">nameString</tt> values:
</p>

<blockquote><pre class="code"> &lt;xs:element name="middle" type="addr:nameList" minOccurs="0"/&gt;
. . .
&lt;xs:complexType name="nameList"&gt;
  &lt;xs:simpleContent&gt;
    &lt;xs:extension base="addr:nameListType"/&gt;
  &lt;/xs:simpleContent&gt;
 &lt;/xs:complexType&gt;
 
 &lt;xs:simpleType name="nameListType"&gt;
  &lt;xs:list itemType="addr:nameString"/&gt;
 &lt;/xs:simpleType&gt;</pre></blockquote>

<p>After this change has been made, the <tt class="literal">middle</tt>
element of an instance document can contain an unlimited list of
names, each of which can contain up to 50 characters separated by
whitespace. The use of <tt class="literal">xs:complextype</tt> here will
greatly simplify adding attributes later.
</p>

</div>

<a name="xmlnut2-CHP-16-SECT-6.2.7" /><div class="sect3">
<h3 class="sect3">16.6.2.7. Unions</h3>

<p>In some cases, it is useful to allow potential values for elements
and attributes to have any of several types. The
<tt class="literal">xs:union</tt><a name="IXT-16-240159" />
<a name="IXT-16-240160" /> element allows a type to be declared that
can draw from multiple type spaces. For example, it might be useful
to allow users to enter their own one-word descriptions into the
<tt class="literal">location</tt> attribute of the <tt class="literal">phone</tt>
element, as well as to choose from a list. The
<tt class="literal">location</tt> attribute declaration could be modified
to include a union that incorporated the
<tt class="literal">locationType</tt> type and the
<tt class="literal">xs:NMTOKEN</tt> types:
</p>

<blockquote><pre class="code">&lt;xs:attribute name="location"&gt;
  &lt;xs:simpleType&gt;
    &lt;xs:union memberTypes="addr:locationType xs:NMTOKEN"/&gt;
  &lt;/xs:simpleType&gt;
&lt;/xs:attribute&gt;</pre></blockquote>

<p>Now the <tt class="literal">location</tt> attribute can contain either
<tt class="literal">addr:locationType</tt> or <tt class="literal">xs:NMTOKEN</tt>
content.
</p>

</div>
</div>


<hr width="684" align="left" />
<div class="navbar"><table width="684" border="0"><tr><td align="left" valign="top" width="228"><a href="ch16_05.htm"><img src="../gifs/txtpreva.gif" alt="Previous" border="0" /></a></td><td align="center" valign="top" width="228"><a href="index.htm"><img src="../gifs/txthome.gif" alt="Home" border="0" /></a></td><td align="right" valign="top" width="228"><a href="ch16_07.htm"><img src="../gifs/txtnexta.gif" alt="Next" border="0" /></a></td></tr><tr><td align="left" valign="top" width="228">16.5. Empty Elements</td><td align="center" valign="top" width="228"><a href="index/index.htm"><img src="../gifs/index.gif" alt="Book Index" border="0" /></a></td><td align="right" valign="top" width="228">16.7. Mixed Content</td></tr></table></div>
<hr width="684" align="left" />

<img src="../gifs/navbar.gif" usemap="#library-map" border="0" alt="Library Navigation Links" />
<p><p><font size="-1"><a href="copyrght.htm">Copyright &copy; 2002</a> O'Reilly &amp; Associates. All rights reserved.</font></p>

<map name="library-map">
<area shape="rect" coords="0,0,85,93" href="../index.htm"><area shape="rect" coords="85,0,180,98" href="../sax2/index.htm"><area shape="rect" coords="182,-1,261,100" href="index.htm"><area shape="rect" coords="263,1,384,96" href="../jxml/index.htm"><area shape="rect" coords="386,1,463,100" href="../jxslt/index.htm"><area shape="rect" coords="466,1,533,112" href="../xslt/index.htm"><area shape="rect" coords="535,-1,610,108" href="../schema/index.htm"><area shape="rect" coords="613,1,696,121" href="../pxml/index.htm">
</map>

</body></html>