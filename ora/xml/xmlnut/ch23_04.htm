<html><head><title>TrAX (XML in a Nutshell, 2nd Edition)</title><link rel="stylesheet" type="text/css" href="../style/style1.css" />

<meta name="DC.Creator" content="Elliotte Rusty Harold and W. Scott Means" /><meta name="DC.Format" content="text/xml" scheme="MIME" /><meta name="DC.Language" content="en-US" /><meta name="DC.Publisher" content="O'Reilly &amp; Associates, Inc." /><meta name="DC.Source" scheme="ISBN" content="0-596-00292-0" /><meta name="DC.Subject.Keyword" content="stuff" /><meta name="DC.Title" content="XML in a Nutshell, 2nd Edition" /><meta name="DC.Type" content="Text.Monograph" />

</head><body bgcolor="#ffffff">

<img src="gifs/smbanner.gif" usemap="#banner-map" border="0" alt="Book Home" /><map name="banner-map"><area shape="rect" coords="1,-2,616,66" href="index.htm" alt="XML in a Nutshell" /><area shape="rect" coords="629,-11,726,25" href="jobjects/fsearch.htm" alt="Search this book" /></map>

<div class="navbar"><table width="684" border="0"><tr><td align="left" valign="top" width="228"><a href="ch23_03.htm"><img src="../gifs/txtpreva.gif" alt="Previous" border="0" /></a></td><td align="center" valign="top" width="228" /><td align="right" valign="top" width="228"><a href="ch24_01.htm"><img src="../gifs/txtnexta.gif" alt="Next" border="0" /></a></td></tr></table></div>



<h2 class="sect1">23.4. TrAX</h2>

<p>Unfortunately, there is no standard API for XSLT that works across
languages and engines: each vendor provides its own unique API. The
closest thing to a standard XSLT API is <a name="IXT-23-240668" />
<a name="IXT-23-240669" />TrAX (the Transformations API for XML),
included in JAXP. However, this is limited to Java and is not even
supported by all Java-based XSLT engines. Nonetheless, since it is
the closest thing to a standard there is, we will discuss it here.
</p>

<p>Code that transforms an XML document using an XSLT stylesheet through
TrAX follows these six steps. All of the classes mentioned are in the
<tt class="literal">javax.xml.transform</tt><a name="IXT-23-240670" /> package, a standard part of Java 1.4
and a separately installable option in earlier versions.
</p>

<ol><li>
<p>Call the <tt class="literal">TransformerFactory.newInstance( )</tt> factory
method to create a new <tt class="literal">TransformerFactory</tt> object.
</p>
</li><li>
<p>Construct a <tt class="literal">Source</tt> object from the XSLT stylesheet.</p>
</li><li>
<p>Pass this <tt class="literal">Source</tt> object to the
<tt class="literal">TransformerFactory</tt> object's
<tt class="literal">newTransform(
)</tt><a name="IXT-23-240671" />
method to create a <tt class="literal">Transform</tt> object.
</p>
</li><li>
<p>Construct a <tt class="literal">Source</tt> object from the input XML
document you wish to transform.
</p>
</li><li>
<p>Construct a <tt class="literal">Result</tt> object into which the
transformed XML document will be output.
</p>
</li><li>
<p>Pass the <tt class="literal">Source</tt> and the <tt class="literal">Result</tt>
to the <tt class="literal">Transform</tt> object's
<tt class="literal">transform(
)</tt><a name="IXT-23-240672" />
method.
</p>
</li></ol>
<p>The source can be built from a <a name="IXT-23-240673" />DOM
<tt class="literal">Document</tt> object, a <a name="IXT-23-240674" />SAX
<tt class="literal">InputSource</tt>, or an
<tt class="literal">InputStream</tt> -- represented by the
<tt class="literal">javax.xml.transform.dom.DOMSource</tt>,
<tt class="literal">javax.xml.transform.sax.SAXSource</tt>, and
<tt class="literal">javax.xml.transform.stream.StreamSource</tt> classes,
respectively. The result of the transform can be a DOM
<tt class="literal">Document</tt> object, a SAX
<tt class="literal">ContentHandler</tt>, or an
<tt class="literal">OutputStream</tt>. These are represented by the
<tt class="literal">javax.xml.transform.dom.DOMResult</tt>,
<tt class="literal">javax.xml.transform.sax.SAXResult</tt>, and
<tt class="literal">javax.xml.transform.stream.StreamResult</tt> classes,
respectively.
</p>

<p>For example, this code fragment uses the XSLT stylesheet found at
<em class="emphasis">http://www.cafeconleche.org/books/xian/examples/08/8-8.xsl</em>
to transform the file <em class="filename">people.xml</em> in the current
working directory onto <tt class="literal">System.out</tt>:
</p>

<blockquote><pre class="code">TransformerFactory factory = TransformerFactory.newInstance( );
URL u = new URL(
 "http://www.cafeconleche.org/books/xian/examples/08/8-8.xsl");
InputStream in     = u.openStream( );
Source stylesheet  = new StreamSource(in);
Transformer xform  = factory.newTransformer(stylesheet);
InputStream people = new FileInputStream("people.xml");
Source original    = new StreamSource(people);
Result transformed = new StreamResult(System.out);
xform.transform(original, transformed);</pre></blockquote>

<p>The procedure is much the same when the source or result is a DOM
<tt class="literal">Document</tt> object or a SAX event stream. Just use
the <tt class="literal">DOMSource</tt>, <tt class="literal">SAXSource</tt>,
<tt class="literal">DOMResult</tt>, and/or <tt class="literal">SAXResult</tt>
classes as appropriate. For example, this code fragment transforms
the DOM <tt class="literal">Document</tt> object <tt class="literal">doc</tt>
according to the stylesheet at <em class="emphasis">http://www.cafeconleche.org/books/xian/examples/08/8-8.xsl</em>
and passes the result through the SAX
<tt class="literal">ContentHandler</tt> object named
<tt class="literal">handler</tt>:
</p>

<blockquote><pre class="code">Document doc;
// Build the doc object in the usual way...
TransformerFactory factory = TransformerFactory.newInstance( );
URL u = new URL(
 "http://www.cafeconleche.org/books/xian/examples/08/8-8.xsl");
InputStream in     = u.openStream( );
Source stylesheet  = new StreamSource(in);
Transformer xform  = factory.newTransformer(stylesheet);
ContentHandler handler = new XMLCounter( ); // From Chapter 19
Source original    = new DOMSource(doc);
Result transformed = new SAXResult(handler);
xform.transform(original, transformed);</pre></blockquote>




<hr width="684" align="left" />
<div class="navbar"><table width="684" border="0"><tr><td align="left" valign="top" width="228"><a href="ch23_03.htm"><img src="../gifs/txtpreva.gif" alt="Previous" border="0" /></a></td><td align="center" valign="top" width="228"><a href="index.htm"><img src="../gifs/txthome.gif" alt="Home" border="0" /></a></td><td align="right" valign="top" width="228"><a href="ch24_01.htm"><img src="../gifs/txtnexta.gif" alt="Next" border="0" /></a></td></tr><tr><td align="left" valign="top" width="228">23.3. XSLT Functions</td><td align="center" valign="top" width="228"><a href="index/index.htm"><img src="../gifs/index.gif" alt="Book Index" border="0" /></a></td><td align="right" valign="top" width="228">24. DOM Reference</td></tr></table></div>
<hr width="684" align="left" />

<img src="../gifs/navbar.gif" usemap="#library-map" border="0" alt="Library Navigation Links" />
<p><p><font size="-1"><a href="copyrght.htm">Copyright &copy; 2002</a> O'Reilly &amp; Associates. All rights reserved.</font></p>

<map name="library-map">
<area shape="rect" coords="0,0,85,93" href="../index.htm"><area shape="rect" coords="85,0,180,98" href="../sax2/index.htm"><area shape="rect" coords="182,-1,261,100" href="index.htm"><area shape="rect" coords="263,1,384,96" href="../jxml/index.htm"><area shape="rect" coords="386,1,463,100" href="../jxslt/index.htm"><area shape="rect" coords="466,1,533,112" href="../xslt/index.htm"><area shape="rect" coords="535,-1,610,108" href="../schema/index.htm"><area shape="rect" coords="613,1,696,121" href="../pxml/index.htm">
</map>

</body></html>