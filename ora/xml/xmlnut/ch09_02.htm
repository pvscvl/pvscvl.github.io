<html><head><title>Location Paths (XML in a Nutshell, 2nd Edition)</title><link rel="stylesheet" type="text/css" href="../style/style1.css" />

<meta name="DC.Creator" content="Elliotte Rusty Harold and W. Scott Means" /><meta name="DC.Format" content="text/xml" scheme="MIME" /><meta name="DC.Language" content="en-US" /><meta name="DC.Publisher" content="O'Reilly &amp; Associates, Inc." /><meta name="DC.Source" scheme="ISBN" content="0-596-00292-0" /><meta name="DC.Subject.Keyword" content="stuff" /><meta name="DC.Title" content="XML in a Nutshell, 2nd Edition" /><meta name="DC.Type" content="Text.Monograph" />

</head><body bgcolor="#ffffff">

<img src="gifs/smbanner.gif" usemap="#banner-map" border="0" alt="Book Home" /><map name="banner-map"><area shape="rect" coords="1,-2,616,66" href="index.htm" alt="XML in a Nutshell" /><area shape="rect" coords="629,-11,726,25" href="jobjects/fsearch.htm" alt="Search this book" /></map>

<div class="navbar"><table width="684" border="0"><tr><td align="left" valign="top" width="228"><a href="ch09_01.htm"><img src="../gifs/txtpreva.gif" alt="Previous" border="0" /></a></td><td align="center" valign="top" width="228" /><td align="right" valign="top" width="228"><a href="ch09_03.htm"><img src="../gifs/txtnexta.gif" alt="Next" border="0" /></a></td></tr></table></div>



<h2 class="sect1">9.2. Location Paths</h2>

<p>The <a name="xmlnut2-IDXTERM-828" />most <a name="xmlnut2-IDXTERM-829" />useful <a name="xmlnut2-IDXTERM-830" />XPath expression is a <em class="emphasis">location
path</em>. A location path identifies a set of nodes in a
document. This set may be empty, may contain a single node, or may
contain several nodes. These can be element nodes, attribute nodes,
namespace nodes, text nodes, comment nodes, processing instruction
nodes, root nodes, or any combination of these. A location path is
built out of successive <em class="emphasis">location steps</em>. Each
location step is evaluated relative to a particular node in the
document called the <em class="emphasis">context
node</em><a name="IXT-9-238974" />.
</p>

<a name="xmlnut2-CHP-9-SECT-2.1" /><div class="sect2">
<h3 class="sect2">9.2.1. The Root Location Path</h3>

<p>The <a name="IXT-9-238975" />simplest location path is the one that
selects the root node of the document. This is simply the
<a name="IXT-9-238976" />forward slash
(<tt class="literal">/)</tt>. (You'll notice that a lot of
XPath syntax is deliberately similar to the syntax used by the Unix
shell. Here <tt class="literal">/</tt> is the root node of a Unix
filesystem, and <tt class="literal">/</tt> is the root node of an XML
document.) For example, this XSLT template rule uses the XPath
pattern <tt class="literal">/</tt> to match the entire input document tree
and wrap it in an <tt class="literal">html</tt> element:
</p>

<blockquote><pre class="code">&lt;xsl:template match="/"&gt;
  &lt;html&gt;&lt;xsl:apply-templates/&gt;&lt;/html&gt;
&lt;/xsl:template&gt;</pre></blockquote>

<p><tt class="literal">/</tt> is an <a name="IXT-9-238977" />absolute location path because no matter
what the context node is--that is, no matter where you were in
the input document when this template rule was applied--it
always means the same thing: the root node of the document. It is
relative to which document you're processing, but
not to anything within that document.
</p>

</div>
<a name="xmlnut2-CHP-9-SECT-2.2" /><div class="sect2">
<h3 class="sect2">9.2.2. Child Element Location Steps</h3>

<p>The <a name="IXT-9-238978" /> <a name="IXT-9-238979" />second
<a name="IXT-9-238980" />simplest location path is a single
element name. This path selects all child elements of the context
node with the specified name. For example, the XPath
<tt class="literal">profession</tt> refers to all
<tt class="literal">profession</tt> child elements of the
<a name="IXT-9-238981" />context node. Exactly which
elements these are depends on what the context node is, so this is a
relative XPath. For example, if the context node is the
<a name="IXT-9-238982" />Alan Turing
<tt class="literal">person</tt> element in <a href="ch09_01.htm">Example 9-1</a>,
then the location path <tt class="literal">profession</tt> refers to these
three <tt class="literal">profession</tt> child elements of that element:
</p>

<blockquote><pre class="code">&lt;profession&gt;computer scientist&lt;/profession&gt;
&lt;profession&gt;mathematician&lt;/profession&gt;
&lt;profession&gt;cryptographer&lt;/profession&gt;</pre></blockquote>

<p>However, if the context node is the <a name="IXT-9-238983" />Richard Feynman
<tt class="literal">person</tt> element in <a href="ch09_01.htm">Example 9-1</a>,
then the XPath <tt class="literal">profession</tt> refers to its single
<tt class="literal">profession</tt> child element:
</p>

<blockquote><pre class="code">&lt;profession&gt;physicist&lt;/profession&gt;</pre></blockquote>

<p>If the context node is the <tt class="literal">name</tt> child element of
Richard Feynman or Alan Turing's
<tt class="literal">person</tt> element, then this XPath
doesn't refer to anything at all because neither of
those has any <tt class="literal">profession</tt> child elements.
</p>

<p>In XSLT, the context node for an XPath expression used in the
<tt class="literal">select</tt> attribute of
<tt class="literal">xsl:apply-templates</tt> and similar elements is the
node that is currently matched. For example, consider the simple
stylesheet in <a href="ch09_02.htm">Example 9-2</a>. In particular, look at
the template rule for the <tt class="literal">person</tt> element. The XSLT
processor will activate this rule twice, once for each
<tt class="literal">person</tt> node in the document. The first time the
context node is set to Alan Turing's
<tt class="literal">person</tt> element. The second time the context node
is set to Richard Feynman's
<tt class="literal">person</tt> element. When the same template is
instantiated with a different context node, the XPath expression in
<tt class="literal">&lt;xsl:value-of</tt>
<tt class="literal">select="name"/&gt;</tt> refers to a different element,
and the output produced is therefore different.
</p>

<a name="xmlnut2-CHP-9-EX-2" /><div class="example">
<h4 class="objtitle">Example 9-2. A very simple stylesheet for <a href="ch09_01.htm">Example 9-1</a> </h4>
<blockquote><pre class="code">&lt;?xml version="1.0"?&gt;
&lt;xsl:stylesheet version="1.0"
                xmlns:xsl="http://www.w3.org/1999/XSL/Transform"&gt;

  &lt;xsl:template match="people"&gt;
    &lt;xsl:apply-templates select="person"/&gt;
  &lt;/xsl:template&gt;

  &lt;xsl:template match="person"&gt;
    &lt;xsl:value-of select="name"/&gt;
  &lt;/xsl:template&gt;

&lt;/xsl:stylesheet&gt;</pre></blockquote>
</div>

<p>When XPath is used in other systems, such as XPointer or XForms,
other means are provided for determining what the context node is.
</p>

</div>
<a name="xmlnut2-CHP-9-SECT-2.3" /><div class="sect2">
<h3 class="sect2">9.2.3. Attribute Location Steps</h3>

<p>Attributes
<a name="IXT-9-238984" /> <a name="IXT-9-238985" />are also
part of XPath. To select a particular attribute of an element, use an
<tt class="literal">@</tt> sign <a name="IXT-9-238986" />followed by the name of the
attribute you want. For example, the XPath expression
<tt class="literal">@born</tt> selects the <tt class="literal">born</tt>
attribute of the <a name="IXT-9-238987" />context node. <a href="ch09_02.htm">Example 9-3</a>
is a simple XSLT stylesheet that generates an HTML table of names and
birth and death dates from documents like <a href="ch09_01.htm">Example 9-1</a>. 
</p>

<a name="xmlnut2-CHP-9-EX-3" /><div class="example">
<h4 class="objtitle">Example 9-3. An XSLT stylesheet that uses root, child element, and attribute location steps </h4>
<blockquote><pre class="code">&lt;?xml version="1.0"?&gt;
&lt;xsl:stylesheet version="1.0"
                xmlns:xsl="http://www.w3.org/1999/XSL/Transform"&gt;

  &lt;xsl:template match="/"&gt;
    &lt;html&gt;
      &lt;xsl:apply-templates select="people"/&gt;
    &lt;/html&gt;
  &lt;/xsl:template&gt;

  &lt;xsl:template match="people"&gt;
    &lt;table&gt;
      &lt;xsl:apply-templates select="person"/&gt;
    &lt;/table&gt;
  &lt;/xsl:template&gt;

  &lt;xsl:template match="person"&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;xsl:value-of select="name"/&gt;&lt;/td&gt;
      &lt;td&gt;&lt;xsl:value-of select="@born"/&gt;&lt;/td&gt;
      &lt;td&gt;&lt;xsl:value-of select="@died"/&gt;&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/xsl:template&gt;

&lt;/xsl:stylesheet&gt;</pre></blockquote>
</div>

<p>The stylesheet in <a href="ch09_02.htm">Example 9-3</a> has three template
rules. The first template rule has a match pattern that matches the
root node, <tt class="literal">/</tt>. The XSLT processor activates this
template rule and sets the context node to the root node. Then it
outputs the start-tag <tt class="literal">&lt;html&gt;</tt>. This is
followed by an <tt class="literal">xsl:apply-templates</tt> element that
selects nodes matching the XPath expression
<tt class="literal">people</tt>. If the input document is <a href="ch09_01.htm">Example 9-1</a>, then there is exactly one such node, the root
element. This is selected and its template rule, the one with the
match pattern of <tt class="literal">people</tt>, is applied. The XSLT
processor sets the context node to the root <tt class="literal">people</tt>
element and then begins processing the <tt class="literal">people</tt>
template. It outputs a <tt class="literal">&lt;table&gt;</tt> start-tag and
then encounters an <tt class="literal">xsl:apply-templates</tt> element
that selects nodes matching the XPath expression
<tt class="literal">person</tt>. Two child elements of this context node
match the XPath expression <tt class="literal">person</tt> so
they're each processed in turn using the
<tt class="literal">person</tt> template rule. When it begins processing
each <tt class="literal">person</tt> element, the XSLT processor sets the
context node to that element. It outputs that
element's <tt class="literal">name</tt> child element
value and <tt class="literal">born</tt> and <tt class="literal">died</tt>
attribute values wrapped in a table row and three table cells. The
net result is:
</p>

<blockquote><pre class="code">&lt;html&gt;
   &lt;table&gt;
      &lt;tr&gt;
         &lt;td&gt;
            Alan
            Turing

         &lt;/td&gt;
         &lt;td&gt;1912&lt;/td&gt;
         &lt;td&gt;1954&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
         &lt;td&gt;
            Richard
            P
            Feynman

         &lt;/td&gt;
         &lt;td&gt;1918&lt;/td&gt;
         &lt;td&gt;1988&lt;/td&gt;
      &lt;/tr&gt;
   &lt;/table&gt;
&lt;/html&gt;</pre></blockquote>

</div>
<a name="xmlnut2-CHP-9-SECT-2.4" /><div class="sect2">
<h3 class="sect2">9.2.4. The comment(), text(), and processing-instruction( ) Location Steps</h3>

<p>Although element, attribute, and root nodes account for 90% or more
of what you need to do with XML documents, this still leaves four
kinds of nodes that need to be addressed: namespace nodes, text
nodes, processing-instruction nodes, and comment nodes.
<a name="IXT-9-238988" />Namespace nodes are rarely handled
explicitly. The other three node types have special node tests to
match them. These are as follows:
</p>

<ul><li>
<p><tt class="literal">comment( )</tt></p>
</li><li>
<p><tt class="literal">text( )</tt></p>
</li><li>
<p><tt class="literal">processing-instruction( )</tt></p>
</li></ul>
<p>Since <a name="IXT-9-238989" /> <a name="IXT-9-238990" />comments
and <a name="IXT-9-238991" /> <a name="IXT-9-238992" />text
<a name="IXT-9-238993" /> <a name="IXT-9-238994" />nodes
don't have names, the <tt class="literal">comment( )</tt>
and <tt class="literal">text( )</tt> node tests match any comment or text
node in the context node. Each comment is a separate comment node.
Each text node contains the maximum possible contiguous run of text
not interrupted by any tag. Entity references and CDATA sections are
resolved into text and markup and do not interrupt text nodes.
</p>

<p>By default, XSLT stylesheets do process text nodes but do not process
comment nodes. You can add a comment template rule to an XSLT
stylesheet so it will process comments too. For example, this
template rule replaces each comment with the text
"Comment Deleted" in italic:
</p>

<blockquote><pre class="code">&lt;xsl:template match="comment( )"&gt;
  &lt;i&gt;Comment Deleted&lt;/i&gt;
&lt;/xsl:template&gt;</pre></blockquote>

<p>With no arguments, the <tt class="literal">processing-instruction( )</tt>
node test selects all processing-instruction children of the context
node. If it has an argument, then it only selects the
processing-instruction children with the specified target. For
example, the XPath expression
<tt class="literal">processing-instruction('xml-stylesheet')</tt> selects
all processing-instruction children of the context node whose target
is <tt class="literal">xml-stylesheet</tt>.
</p>

</div>
<a name="xmlnut2-CHP-9-SECT-2.5" /><div class="sect2">
<h3 class="sect2">9.2.5. Wildcards</h3>

<p>Wildcards <a name="IXT-9-238995" />match different element and node types at
the same time. There are three of these: <tt class="literal">*</tt>,
<tt class="literal">node( )</tt>, and <tt class="literal">@*</tt>.
</p>

<p>The <a name="IXT-9-238996" />asterisk (<tt class="literal">*</tt>)
matches any element node regardless of name. For example, this XSLT
template rule says that all elements should have their child elements
processed but should not result in any output in and of themselves:
</p>

<blockquote><pre class="code">&lt;xsl:template match="*"&gt;&lt;xsl:apply-templates select="*"/&gt;&lt;/xsl:template&gt;</pre></blockquote>

<p>The <tt class="literal">*</tt> does not match attributes, text nodes,
comments, or processing-instruction nodes. Thus, in the previous
example output will only come from child elements that have their own
template rules that override this one.
</p>

<p>You can put a namespace prefix in front of the asterisk. In this
case, only elements in the same namespace are matched. For example,
<tt class="literal">svg:*</tt> matches all elements with the same namespace
URI as the <tt class="literal">svg</tt> prefix is mapped to. As usual,
it's the URI that matters, not the prefix. The
prefix can be different in the stylesheet and the source document as
long as the namespace URI is the same.
</p>

<p>The <tt class="literal">node(
)</tt><a name="IXT-9-238997" /> wildcard matches not only all
element types but also text nodes, processing-instruction nodes,
namespace nodes, attribute nodes, and comment nodes.
</p>

<p>The <tt class="literal">@*</tt><a name="IXT-9-238998" /> wildcard matches all attribute
nodes. For example, this XSLT template rule copies the values of all
attributes of a <tt class="literal">person</tt> element in the document
into the content of an <tt class="literal">attributes</tt> element in the
output:
</p>

<blockquote><pre class="code">&lt;xsl:template match="person"&gt;
  &lt;attributes&gt;&lt;xsl:apply-templates select="@*"/&gt;&lt;/attributes&gt;
&lt;/xsl:template&gt;</pre></blockquote>

<p>As with elements, you can attach a namespace prefix to the wildcard
only to match attributes in a specific namespace. For instance,
<tt class="literal">@xlink:*</tt> matches all XLink attributes provided
that the prefix <tt class="literal">xlink</tt> is mapped to the
<tt class="literal">http://www.w3.org/1999/xlink</tt> URI. Again,
it's the URI that matters, not the actual prefix.
</p>

</div>
<a name="xmlnut2-CHP-9-SECT-2.6" /><div class="sect2">
<h3 class="sect2">9.2.6. Multiple Matches with |</h3>

<p>You <a name="IXT-9-238999" /><a name="IXT-9-239000" />
<a name="IXT-9-239001" />often want to match more than one
type of element or attribute but not all types. For example, you may
want an XSLT template that applies to the
<tt class="literal">profession</tt> and <tt class="literal">hobby</tt> elements
but not to the <tt class="literal">name</tt>, <tt class="literal">person</tt>, or
<tt class="literal">people</tt> elements. You can combine location paths
and steps with the vertical bar (<tt class="literal">|</tt>) to indicate
that you want to match any of the named elements. For instance,
<tt class="literal">profession|hobby</tt> matches
<tt class="literal">profession</tt> and <tt class="literal">hobby</tt> elements.
<tt class="literal">first_name | middle_initial | last_name</tt> matches
<tt class="literal">first_name</tt>, <tt class="literal">middle_initial</tt>, and
<tt class="literal">last_name</tt> elements.
<tt class="literal">@id|@xlink:type</tt> matches <tt class="literal">id</tt> and
<tt class="literal">xlink:type</tt> attributes. <tt class="literal">*|@*</tt>
matches elements and attributes but does not match text nodes,
comment nodes, or processing instruction nodes. For example, this
XSLT template rule applies to all the nonempty leaf elements
(elements that don't contain any other elements) of
<a href="ch09_01.htm">Example 9-1</a>:
</p>

<blockquote><pre class="code">&lt;xsl:template match="first_name|last_name|profession|hobby"&gt;
  &lt;xsl:value-of select="text( )"/&gt;
&lt;/xsl:template&gt;</pre></blockquote>

</div>


<hr width="684" align="left" />
<div class="navbar"><table width="684" border="0"><tr><td align="left" valign="top" width="228"><a href="ch09_01.htm"><img src="../gifs/txtpreva.gif" alt="Previous" border="0" /></a></td><td align="center" valign="top" width="228"><a href="index.htm"><img src="../gifs/txthome.gif" alt="Home" border="0" /></a></td><td align="right" valign="top" width="228"><a href="ch09_03.htm"><img src="../gifs/txtnexta.gif" alt="Next" border="0" /></a></td></tr><tr><td align="left" valign="top" width="228">9. XPath</td><td align="center" valign="top" width="228"><a href="index/index.htm"><img src="../gifs/index.gif" alt="Book Index" border="0" /></a></td><td align="right" valign="top" width="228">9.3. Compound Location Paths</td></tr></table></div>
<hr width="684" align="left" />

<img src="../gifs/navbar.gif" usemap="#library-map" border="0" alt="Library Navigation Links" />
<p><p><font size="-1"><a href="copyrght.htm">Copyright &copy; 2002</a> O'Reilly &amp; Associates. All rights reserved.</font></p>

<map name="library-map">
<area shape="rect" coords="0,0,85,93" href="../index.htm"><area shape="rect" coords="85,0,180,98" href="../sax2/index.htm"><area shape="rect" coords="182,-1,261,100" href="index.htm"><area shape="rect" coords="263,1,384,96" href="../jxml/index.htm"><area shape="rect" coords="386,1,463,100" href="../jxslt/index.htm"><area shape="rect" coords="466,1,533,112" href="../xslt/index.htm"><area shape="rect" coords="535,-1,610,108" href="../schema/index.htm"><area shape="rect" coords="613,1,696,121" href="../pxml/index.htm">
</map>

</body></html>