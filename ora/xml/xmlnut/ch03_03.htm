<html><head><title>Attribute Declarations (XML in a Nutshell, 2nd Edition)</title><link rel="stylesheet" type="text/css" href="../style/style1.css" />

<meta name="DC.Creator" content="Elliotte Rusty Harold and W. Scott Means" /><meta name="DC.Format" content="text/xml" scheme="MIME" /><meta name="DC.Language" content="en-US" /><meta name="DC.Publisher" content="O'Reilly &amp; Associates, Inc." /><meta name="DC.Source" scheme="ISBN" content="0-596-00292-0" /><meta name="DC.Subject.Keyword" content="stuff" /><meta name="DC.Title" content="XML in a Nutshell, 2nd Edition" /><meta name="DC.Type" content="Text.Monograph" />

</head><body bgcolor="#ffffff">

<img src="gifs/smbanner.gif" usemap="#banner-map" border="0" alt="Book Home" /><map name="banner-map"><area shape="rect" coords="1,-2,616,66" href="index.htm" alt="XML in a Nutshell" /><area shape="rect" coords="629,-11,726,25" href="jobjects/fsearch.htm" alt="Search this book" /></map>

<div class="navbar"><table width="684" border="0"><tr><td align="left" valign="top" width="228"><a href="ch03_02.htm"><img src="../gifs/txtpreva.gif" alt="Previous" border="0" /></a></td><td align="center" valign="top" width="228" /><td align="right" valign="top" width="228"><a href="ch03_04.htm"><img src="../gifs/txtnexta.gif" alt="Next" border="0" /></a></td></tr></table></div>



<h2 class="sect1">3.3. Attribute Declarations</h2>

<p><a name="xmlnut2-IDXTERM-240" /> <a name="xmlnut2-IDXTERM-241" />
<a name="xmlnut2-IDXTERM-242" />As well as declaring its
elements, a valid document must declare all the
elements' attributes. This is done with <a name="xmlnut2-IDXTERM-243" /> <a name="xmlnut2-IDXTERM-244" /><tt class="literal">ATTLIST</tt>
declarations. A single <tt class="literal">ATTLIST</tt> can declare
multiple attributes for a single element type. However, if the same
attribute is repeated on multiple elements, then it must be declared
separately for each element where it appears. (Later in this chapter
you'll see how to use parameter entity references to
make this repetition less burdensome.)
</p>

<p>For example, this <tt class="literal">ATTLIST</tt> declaration declares the
<tt class="literal">source</tt> attribute of the <tt class="literal">image</tt>
element:
</p>

<blockquote><pre class="code">&lt;!ATTLIST image source CDATA #REQUIRED&gt;</pre></blockquote>

<p>It says that the <tt class="literal">image</tt> element has an attribute
named <tt class="literal">source</tt>. The value of the
<tt class="literal">source</tt> attribute is character data, and instances
of the <tt class="literal">image</tt> element in the document are required
to provide a value for the <tt class="literal">source</tt> attribute.
</p>

<p>A single <tt class="literal">ATTLIST</tt> declaration can declare multiple
attributes for the same element. For example, this
<tt class="literal">ATTLIST</tt> declaration not only declares the
<tt class="literal">source</tt> attribute of the <tt class="literal">image</tt>
element, but also the <tt class="literal">width</tt>,
<tt class="literal">height</tt>, and <tt class="literal">alt</tt> attributes:
</p>

<blockquote><pre class="code">&lt;!ATTLIST image source CDATA #REQUIRED
                width  CDATA #REQUIRED
                height CDATA #REQUIRED
                alt    CDATA #IMPLIED
&gt;</pre></blockquote>

<p>This declaration says the <tt class="literal">source</tt>,
<tt class="literal">width</tt>, and <tt class="literal">height</tt> attributes
are required. However, the <tt class="literal">alt</tt> attribute is
optional and may be omitted from particular <tt class="literal">image</tt>
elements. All four attributes are declared to contain character data,
the most generic attribute type.
</p>

<p>This declaration has the same effect and meaning as four separate
<tt class="literal">ATTLIST</tt> declarations, one for each attribute.
Whether to use one <tt class="literal">ATTLIST</tt> declaration per
attribute is a matter of personal preference, but most experienced
DTD designers prefer the multiple-attribute form. Given judicious
application of whitespace, it's no less legible than
the alternative.
</p>

<a name="xmlnut2-CHP-3-SECT-3.1" /><div class="sect2">
<h3 class="sect2">3.3.1. Attribute Types</h3>

<p>In <a name="xmlnut2-IDXTERM-245" />merely well-formed XML, attribute values
can be any string of text. The only restrictions are that any
occurrences of &lt; or &amp; must be escaped as
<tt class="literal">&amp;lt;</tt> and <tt class="literal">&amp;amp;</tt> and
whichever kind of quotation mark, single or double, is used to
delimit the value must also be escaped. However, a DTD allows you to
make somewhat stronger statements about the content of an attribute
value. Indeed, these are stronger statements than can be made about
the contents of an element. For instance, you can say that an
attribute value must be unique within the document, that it must be a
legal XML name token, or that it must be chosen from a fixed list of
values.
</p>

<p>There are ten attribute types in XML. They are:</p>

<ul><li>
<p><tt class="literal">CDATA</tt></p>
</li><li>
<p><tt class="literal">NMTOKEN</tt></p>
</li><li>
<p><tt class="literal">NMTOKENS</tt></p>
</li><li>
<p>Enumeration</p>
</li><li>
<p><tt class="literal">ENTITY</tt></p>
</li><li>
<p><tt class="literal">ENTITIES</tt></p>
</li><li>
<p><tt class="literal">ID</tt></p>
</li><li>
<p><tt class="literal">IDREF</tt></p>
</li><li>
<p><tt class="literal">IDREFS</tt></p>
</li><li>
<p><tt class="literal">NOTATION</tt></p>
</li></ul>
<p>These are the only attribute types allowed. A DTD cannot say that an
attribute value must be an integer or a date between 1966 and 2002,
for example.
</p>

<a name="xmlnut2-CHP-3-SECT-3.1.1" /><div class="sect3">
<h3 class="sect3">3.3.1.1. CDATA</h3>

<p>A <a name="IXT-3-239790" /><tt class="literal">CDATA</tt> attribute value
can contain any string of text acceptable in a well-formed XML
attribute value. This is the most general attribute type. For
example, you would use this type for an <tt class="literal">alt</tt>
attribute of an <tt class="literal">image</tt> element because
there's no particular form the text in such an
attribute has to follow.
</p>

<blockquote><pre class="code">&lt;!ATTLIST image alt CDATA #IMPLIED&gt;</pre></blockquote>

<p>You would also use this for other kinds of data such as prices, URIs,
email and snail mail addresses, citations, and other types
that--while they have more structure than a simple string of
text--don't match any of the other attribute
types. For example:
</p>

<blockquote><pre class="code">&lt;!ATTLIST sku
 list_price             CDATA #IMPLIED
 suggested_retail_price CDATA #IMPLIED
 actual_price           CDATA #IMPLIED
&gt;
&lt;!-- All three attributes should be in the form $XX.YY --&gt;</pre></blockquote>

</div>

<a name="xmlnut2-CHP-3-SECT-3.1.2" /><div class="sect3">
<h3 class="sect3">3.3.1.2. NMTOKEN</h3>

<p>An <a name="IXT-3-239791" />XML
<a name="IXT-3-239792" /> <a name="IXT-3-239793" /><em class="emphasis">name token</em> is very
close to an
<a name="IXT-3-239794" />
<a name="IXT-3-239795" />XML name. It must consist of the same
characters as an XML name, that is, alphanumeric and/or ideographic
characters and the punctuation marks <tt class="literal">_</tt>,
<tt class="literal">-</tt>, <tt class="literal">.</tt>, and <tt class="literal">:</tt>.
Furthermore, like an XML name, an XML name token may not contain
whitespace. However, a name token differs from an XML name in that
any of the allowed characters can be the first character in a name
token, while only letters, ideographs, and the underscore can be the
first character of an XML name. Thus 12 and .cshrc are valid XML name
tokens although they are not valid XML names. Every XML name is an
XML name token, but not all XML name tokens are XML names.
</p>

<p>The value of an attribute declared to have type
<tt class="literal">NMTOKEN</tt> is an XML name token. For example, if you
knew that the <tt class="literal">year</tt> attribute of a
<tt class="literal">journal</tt> element should contain an integer such as
1990 or 2015, you might declare it to have <tt class="literal">NMTOKEN</tt>
type, since all years are name tokens:
</p>

<blockquote><pre class="code">&lt;!ATTLIST journal year NMTOKEN #REQUIRED&gt;</pre></blockquote>

<p>This still doesn't prevent the document author from
assigning the <tt class="literal">year</tt> attribute values like
"99" or
"March", but it at least eliminates
some possible wrong values, especially those that contain whitespace
such as "1990 C.E." or
"Sally had a little lamb."
</p>

</div>

<a name="xmlnut2-CHP-3-SECT-3.1.3" /><div class="sect3">
<h3 class="sect3">3.3.1.3. NMTOKENS</h3>

<p>A <a name="IXT-3-239796" /><tt class="literal">NMTOKENS</tt> type attribute
contains one or more XML name tokens separated by whitespace. For
example, you might use this to describe the <tt class="literal">dates</tt>
attribute of a <tt class="literal">performances</tt> element, if the dates
were given in the form 08-26-2000, like this:
</p>

<blockquote><pre class="code">&lt;performances dates="08-21-2001 08-23-2001 08-27-2001"&gt;
  Kat and the Kings
&lt;/performances&gt;</pre></blockquote>

<p>The appropriate declaration is:</p>

<blockquote><pre class="code">&lt;!ATTLIST performances dates NMTOKENS #REQUIRED&gt;</pre></blockquote>

<p>On the other hand, you could not use this for a list of dates in the
form 08/27/2001 because the forward slash is not a legal name
character.
</p>

</div>

<a name="xmlnut2-CHP-3-SECT-3.1.4" /><div class="sect3">
<h3 class="sect3">3.3.1.4. Enumeration</h3>

<p><a name="IXT-3-239797" />
<a name="IXT-3-239798" />An
enumeration is the only attribute type that is not an XML keyword.
Rather, it is a list of all possible values for the attribute,
separated by vertical bars. Each possible value must be an XML name
token. For example, the following declarations say that the value of
the <tt class="literal">month</tt> attribute of a <tt class="literal">date</tt>
element must be one of the twelve English month names, that the value
of the <tt class="literal">day</tt> attribute must be a number between 1
and 31, and that the value of the <tt class="literal">year</tt> attribute
must be an integer between 1970 and 2009:
</p>

<blockquote><pre class="code">&lt;!ATTLIST date month (January | February | March | April | May | June
  | July | August | September | October | November | December) #REQUIRED
&gt;
&lt;!ATTLIST date day (1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10 | 11 | 12
  | 13 | 14 | 15 | 16 | 17 | 18 | 19 | 20 | 21 | 22 | 23 | 24 | 25
  | 26 | 27 | 28 | 29 | 30 | 31) #REQUIRED
&gt;
&lt;!ATTLIST date year (1970 | 1971 | 1972 | 1973 | 1974 | 1975 | 1976
  | 1977 | 1978 | 1979 | 1980 | 1981 | 1982 | 1983 | 1984 | 1985 | 1986
  | 1987 | 1988 | 1989 | 1990 | 1991 | 1992 | 1993 | 1994 | 1995 | 1996
  | 1997 | 1998 | 1999 | 2000 | 2001 | 2002 | 2003 | 2004 | 2005 | 2006
  | 2007 | 2008 | 2009 ) #REQUIRED
&gt;
&lt;!ELEMENT date EMPTY&gt;</pre></blockquote>

<p>Given this DTD, this <tt class="literal">date</tt> element is valid: </p>

<blockquote><pre class="code">&lt;date month="January" day="22" year="2001"/&gt;</pre></blockquote>

<p>However, these <tt class="literal">date</tt> elements are invalid:</p>

<blockquote><pre class="code">&lt;date month="01"      day="22" year="2001"/&gt;
&lt;date month="Jan"     day="22" year="2001"/&gt;
&lt;date month="January" day="02" year="2001"/&gt;
&lt;date month="January" day="2"  year="1969"/&gt;
&lt;date month="Janvier" day="22" year="2001"/&gt;</pre></blockquote>

<p>This trick works here because all the desired values happen to be
legal XML name tokens. However, we could not use the same trick if
the possible values included whitespace or any punctuation besides
the underscore, hyphen, colon, and period.
</p>

</div>

<a name="xmlnut2-CHP-3-SECT-3.1.5" /><div class="sect3">
<h3 class="sect3">3.3.1.5. ID</h3>

<p>An <a name="IXT-3-239799" /><tt class="literal">ID</tt> type attribute must
contain an XML name (not a name token but a name) that is unique
within the XML document. More precisely, no other
<tt class="literal">ID</tt> type attribute in the document can have the
same value. (Attributes of non-<tt class="literal">ID</tt> type are not
considered.) Each element may have no more than one
<tt class="literal">ID</tt> type attribute.
</p>

<p>As the keyword suggests, <tt class="literal">ID</tt> type attributes assign
unique identifiers to elements. <tt class="literal">ID</tt> type attributes
do not have to have the name "ID"
or "id", though they very commonly
do. For example, this <tt class="literal">ATTLIST</tt> declaration says
that every <tt class="literal">employee</tt> element must have a
<tt class="literal">social_security_number</tt> ID attribute:
</p>

<blockquote><pre class="code">&lt;!ATTLIST employee social_security_number ID #REQUIRED&gt;</pre></blockquote>

<p>ID numbers are tricky because a number is not an XML name and
therefore not a legal XML <tt class="literal">ID</tt>. The normal solution
is to prefix the values with an underscore or a common letter. For
example:
</p>

<blockquote><pre class="code">&lt;employee social_security_label="_078-05-1120"/&gt;</pre></blockquote>

</div>

<a name="xmlnut2-CHP-3-SECT-3.1.6" /><div class="sect3">
<h3 class="sect3">3.3.1.6. IDREF</h3>

<p>An <a name="IXT-3-239800" /><tt class="literal">IDREF</tt> type attribute
refers to the <tt class="literal">ID</tt> type attribute of some element in
the document. Thus, it must be an XML name. <tt class="literal">IDREF</tt>
attributes are commonly used to establish relationships between
elements when simple containment won't suffice.
</p>

<p>For example, imagine an XML document that contains a list of
<tt class="literal">project</tt> elements and <tt class="literal">employee</tt>
elements. Every <tt class="literal">project</tt> has a
<tt class="literal">project_id</tt> ID type attribute, and every
<tt class="literal">employee</tt> has a
<tt class="literal">social_security_number</tt> ID type attribute.
Furthermore, each <tt class="literal">project</tt> has
<tt class="literal">team_member</tt> child elements that identify
who's working on the project, and each
<tt class="literal">employee</tt> element has <tt class="literal">assignment</tt>
children that indicate to which projects that employee is assigned.
Since each project is assigned to multiple employees and some
employees are assigned to more than one project,
it's not possible to make the employees children of
the projects or the projects children of the employees. The solution
is to use <tt class="literal">IDREF</tt> type attributes like this:
</p>

<blockquote><pre class="code">&lt;project project_id="p1"&gt;
  &lt;goal&gt;Develop Strategic Plan&lt;/goal&gt;
  &lt;team_member person="ss078-05-1120"/&gt;
  &lt;team_member person="ss987-65-4320"/&gt;
&lt;/project&gt;
&lt;project project_id="p2"&gt;
  &lt;goal&gt;Deploy Linux&lt;/goal&gt;
  &lt;team_member person="ss078-05-1120"/&gt;
  &lt;team_member person="ss9876-12-3456"/&gt;
&lt;/project&gt;
&lt;employee social_security_label="ss078-05-1120"&gt;
  &lt;name&gt;Fred Smith&lt;/name&gt;
  &lt;assignment project_id="p1"/&gt;
  &lt;assignment project_id="p2"/&gt;
&lt;/employee&gt;
&lt;employee social_security_label="ss987-65-4320"&gt;
  &lt;name&gt;Jill Jones&lt;/name&gt;
  &lt;assignment project_id="p1"/&gt;
&lt;/employee&gt;
&lt;employee social_security_label="ss9876-12-3456"&gt;
  &lt;name&gt;Sydney Lee&lt;/name&gt;
  &lt;assignment project_id="p2"/&gt;
&lt;/employee&gt;</pre></blockquote>

<p>In this example, the <tt class="literal">project_id</tt> attribute of the
<tt class="literal">project</tt> element and the
<tt class="literal">social_security_number</tt> attribute of the
<tt class="literal">employee</tt> element would be declared to have type
<tt class="literal">ID</tt>. The <tt class="literal">person</tt> attribute of the
<tt class="literal">team_member</tt> element and the
<tt class="literal">project_id</tt> attribute of the
<tt class="literal">assignment</tt> element would have type
<tt class="literal">IDREF</tt>. The relevant <tt class="literal">ATTLIST</tt>
declarations look like this:
</p>

<blockquote><pre class="code">&lt;!ATTLIST employee social_security_number ID    #REQUIRED&gt;
&lt;!ATTLIST project  project_id             ID    #REQUIRED&gt;
&lt;!ATTLIST team_member person              IDREF #REQUIRED&gt;
&lt;!ATTLIST assignment  project_id          IDREF #REQUIRED&gt;</pre></blockquote>

<p>These declarations constrain the <tt class="literal">person</tt> attribute
of the <tt class="literal">team_member</tt> element and the
<tt class="literal">project_id</tt> attribute of the
<tt class="literal">assignment</tt> element to match the ID of something in
the document. However, they do not constrain the
<tt class="literal">person</tt> attribute of the
<tt class="literal">team_member</tt> element to match only employee IDs or
constrain the <tt class="literal">project_id</tt> attribute of the
<tt class="literal">assignment</tt> element to match only project IDs. It
would be valid (though not necessarily correct) for a
<tt class="literal">team_member</tt> to hold the ID of another project or
even the same project.
</p>

</div>

<a name="xmlnut2-CHP-3-SECT-3.1.7" /><div class="sect3">
<h3 class="sect3">3.3.1.7. IDREFS</h3>

<p>An <a name="IXT-3-239801" /><tt class="literal">IDREFS</tt> type attribute
contains a whitespace-separated list of XML names, each of which must
be the <tt class="literal">ID</tt> of an element in the document. This is
used when one element needs to refer to multiple other elements. For
instance, the previous project example could be rewritten so that the
<tt class="literal">assignment</tt> children of the
<tt class="literal">employee</tt> element were replaced by a single
<tt class="literal">assignments</tt> attribute. Similarly, the
<tt class="literal">team_member</tt> children of the
<tt class="literal">project</tt> element could be replaced by a
<tt class="literal">team</tt> attribute like this:
</p>

<blockquote><pre class="code">&lt;project project_id="p1" team="ss078-05-1120 ss987-65-4320"&gt;
  &lt;goal&gt;Develop Strategic Plan&lt;/goal&gt;
&lt;/project&gt;
&lt;project project_id="p2" team="ss078-05-1120 ss9876-12-3456"&gt;
  &lt;goal&gt;Deploy Linux&lt;/goal&gt;
&lt;/project&gt;
&lt;employee social_security_label="ss078-05-1120" assignments="p1 p2"&gt;
  &lt;name&gt;Fred Smith&lt;/name&gt;
&lt;/employee&gt;
&lt;employee social_security_label="ss987-65-4320" assignments="p1"&gt;
  &lt;name&gt;Jill Jones&lt;/name&gt;
&lt;/employee&gt;
&lt;employee social_security_label="ss9876-12-3456" assignments="p2"&gt;
  &lt;name&gt;Sydney Lee&lt;/name&gt;
&lt;/employee&gt;</pre></blockquote>

<p>The appropriate declarations are:</p>

<blockquote><pre class="code">&lt;!ATTLIST employee social_security_number ID     #REQUIRED
                   assignments            IDREFS #REQUIRED&gt;
&lt;!ATTLIST project  project_id             ID     #REQUIRED
                   team                   IDREFS #REQUIRED&gt;</pre></blockquote>

</div>

<a name="xmlnut2-CHP-3-SECT-3.1.8" /><div class="sect3">
<h3 class="sect3">3.3.1.8. ENTITY</h3>

<p>An <a name="IXT-3-239802" /><tt class="literal">ENTITY</tt> type attribute
contains the name of an unparsed entity declared elsewhere in the
DTD. For instance, a <tt class="literal">movie</tt> element might have an
entity attribute identifying the MPEG or QuickTime file to play when
the movie was activated:
</p>

<blockquote><pre class="code">&lt;!ATTLIST movie source ENTITY #REQUIRED&gt;</pre></blockquote>

<p>If the DTD declared an unparsed entity named
<tt class="literal">X-Men-trailer</tt>, then this <tt class="literal">movie</tt>
element might be used to embed that video file in the XML document:
</p>

<blockquote><pre class="code">&lt;movie source="X-Men-trailer"/&gt;</pre></blockquote>

<p>We'll discuss unparsed entities in more detail later
in this chapter.
</p>

</div>

<a name="xmlnut2-CHP-3-SECT-3.1.9" /><div class="sect3">
<h3 class="sect3">3.3.1.9. ENTITIES</h3>

<p>An <a name="IXT-3-239803" /><tt class="literal">ENTITIES</tt> type attribute
contains the names of one or more unparsed entities declared
elsewhere in the DTD, separated by whitespace. For instance, a
<tt class="literal">slide_show</tt> element might have an
<tt class="literal">ENTITIES</tt> attribute identifying the JPEG files to
show and in which order they were to be shown:
</p>

<blockquote><pre class="code">&lt;!ATTLIST slide_show slides ENTITIES #REQUIRED&gt;</pre></blockquote>

<p>If the DTD declared unparsed entities named
<tt class="literal">slide1</tt>, <tt class="literal">slide2</tt>,
<tt class="literal">slide3</tt>, and so on through
<tt class="literal">slide10</tt>, then this <tt class="literal">slide_show</tt>
element might be used to embed the show in the XML document:
</p>

<blockquote><pre class="code">&lt;slide_show slides="slide1 slide2 slide3 slide4 slide5 slide6
                    slide7 slide8 slide9 slide10"/&gt;</pre></blockquote>

</div>

<a name="xmlnut2-CHP-3-SECT-3.1.10" /><div class="sect3">
<h3 class="sect3">3.3.1.10. NOTATION</h3>

<p>A <a name="IXT-3-239804" /><tt class="literal">NOTATION</tt> type attribute
contains the name of a notation declared in the
document's DTD. This is perhaps the rarest attribute
type and isn't much used in practice. In theory, it
could be used to associate types with particular elements, as well as
limiting the types associated with the element. For example, these
declarations define four notations for different image types and then
specify that each <tt class="literal">image</tt> element must have a
<tt class="literal">type</tt> attribute that selects exactly one of them:
</p>

<blockquote><pre class="code">&lt;!NOTATION gif  SYSTEM "image/gif"&gt;
&lt;!NOTATION tiff SYSTEM "image/tiff"&gt;
&lt;!NOTATION jpeg SYSTEM "image/jpeg"&gt;
&lt;!NOTATION png  SYSTEM "image/png"&gt;
&lt;!ATTLIST  image type NOTATION (gif | tiff | jpeg | png) #REQUIRED&gt;</pre></blockquote>

<p>The <tt class="literal">type</tt> attribute of each
<tt class="literal">image</tt> element can have one of the four values
<tt class="literal">gif</tt>, <tt class="literal">tiff</tt>,
<tt class="literal">jpeg</tt>, or <tt class="literal">png</tt> but not any other
value. This has a slight advantage over the
<a name="IXT-3-239805" /> <a name="IXT-3-239806" />enumerated type in that the actual
MIME media type of the notation is available, whereas an enumerated
type could not specify <tt class="literal">image/png</tt> or
<tt class="literal">image/gif</tt> as an allowed value because the forward
slash is not a legal character in XML names. <a name="IXTR3-130" />
</p>

</div>
</div>
<a name="xmlnut2-CHP-3-SECT-3.2" /><div class="sect2">
<h3 class="sect2">3.3.2. Attribute Defaults</h3>

<p><a name="IXT-3-239807" />
<a name="IXT-3-239808" />
<a name="IXT-3-239809" />As well as providing a data type,
each <tt class="literal">ATTLIST</tt> declaration includes a default
declaration for that attribute. There are four possibilities for this
default:
</p>

<dl>
<dt><tt class="literal">#IMPLIED</tt></dt>
<dd>
The <a name="IXT-3-239810" />attribute is optional. Each
instance of the element may or may not provide a value for the
attribute. No default value is provided.
</p>
</dd>


<dt><tt class="literal">#REQUIRED</tt></dt>
<dd>
The <a name="IXT-3-239811" />attribute is required. Each instance
of the element must provide a value for the attribute. No default
value is provided.
</p>
</dd>


<dt><tt class="literal">#FIXED</tt></dt>
<dd>
The <a name="IXT-3-239812" />attribute value is constant
and immutable. This attribute has the specified value regardless of
whether the attribute is explicitly noted on an individual instance
of the element. If it is included, though, it must have the specified
value.
</p>
</dd>


<dt><i>Literal</i></dt>
<dd>
The <a name="IXT-3-239813" />actual default value is given as a
quoted string.
</p>
</dd>

</dl>

<p>For example, this <tt class="literal">ATTLIST</tt> declaration says that
<tt class="literal">person</tt> elements can have but do not have to have
<tt class="literal">born</tt> and <tt class="literal">died</tt> attributes:
</p>

<blockquote><pre class="code">&lt;!ATTLIST person born CDATA #IMPLIED
                 died CDATA #IMPLIED
&gt;</pre></blockquote>

<p>This <tt class="literal">ATTLIST</tt> declaration says that every
<tt class="literal">circle</tt> element must have
<tt class="literal">center_x</tt>, <tt class="literal">center_y</tt>, and
<tt class="literal">radius</tt> attributes:
</p>

<blockquote><pre class="code">&lt;!ATTLIST circle center_x NMTOKEN #REQUIRED
                 center_y NMTOKEN #REQUIRED
                 radius   NMTOKEN #REQUIRED
&gt;</pre></blockquote>

<p>This <tt class="literal">ATTLIST</tt> declaration says that every
<tt class="literal">biography</tt> element has an
<tt class="literal">xmlns:xlink</tt> attribute and that the value of that
attribute is <tt class="literal">http://www.w3.org/1999/xlink</tt>, even if
the start-tag of the element does not explicitly include an
<tt class="literal">xmlns:xlink</tt> attribute.
</p>

<blockquote><pre class="code">&lt;!ATTLIST biography
   xmlns:xlink CDATA #FIXED "http://www.w3.org/1999/xlink"&gt;</pre></blockquote>

<p>This <tt class="literal">ATTLIST</tt> declaration says that every
<tt class="literal">web_page</tt> element has a <tt class="literal">protocol</tt>
attribute. If a particular <tt class="literal">web_page</tt> element
doesn't have an explicit <tt class="literal">protocol</tt>
attribute, then the parser will supply one with the <a name="IXTR3-131" /> <a name="IXTR3-132" /> <a name="IXTR3-133" />value <a name="IXTR3-134" /> <a name="IXTR3-135" /><tt class="literal">http</tt>: 
</p>

<blockquote><pre class="code">&lt;!ATTLIST web_page protocol NMTOKEN "http"&gt;</pre></blockquote>

</div>


<hr width="684" align="left" />
<div class="navbar"><table width="684" border="0"><tr><td align="left" valign="top" width="228"><a href="ch03_02.htm"><img src="../gifs/txtpreva.gif" alt="Previous" border="0" /></a></td><td align="center" valign="top" width="228"><a href="index.htm"><img src="../gifs/txthome.gif" alt="Home" border="0" /></a></td><td align="right" valign="top" width="228"><a href="ch03_04.htm"><img src="../gifs/txtnexta.gif" alt="Next" border="0" /></a></td></tr><tr><td align="left" valign="top" width="228">3.2. Element Declarations</td><td align="center" valign="top" width="228"><a href="index/index.htm"><img src="../gifs/index.gif" alt="Book Index" border="0" /></a></td><td align="right" valign="top" width="228">3.4. General Entity Declarations</td></tr></table></div>
<hr width="684" align="left" />

<img src="../gifs/navbar.gif" usemap="#library-map" border="0" alt="Library Navigation Links" />
<p><p><font size="-1"><a href="copyrght.htm">Copyright &copy; 2002</a> O'Reilly &amp; Associates. All rights reserved.</font></p>

<map name="library-map">
<area shape="rect" coords="0,0,85,93" href="../index.htm"><area shape="rect" coords="85,0,180,98" href="../sax2/index.htm"><area shape="rect" coords="182,-1,261,100" href="index.htm"><area shape="rect" coords="263,1,384,96" href="../jxml/index.htm"><area shape="rect" coords="386,1,463,100" href="../jxslt/index.htm"><area shape="rect" coords="466,1,533,112" href="../xslt/index.htm"><area shape="rect" coords="535,-1,610,108" href="../schema/index.htm"><area shape="rect" coords="613,1,696,121" href="../pxml/index.htm">
</map>

</body></html>