<html><head><title>XML as a Data Format (XML in a Nutshell, 2nd Edition)</title><link rel="stylesheet" type="text/css" href="../style/style1.css" />

<meta name="DC.Creator" content="Elliotte Rusty Harold and W. Scott Means" /><meta name="DC.Format" content="text/xml" scheme="MIME" /><meta name="DC.Language" content="en-US" /><meta name="DC.Publisher" content="O'Reilly &amp; Associates, Inc." /><meta name="DC.Source" scheme="ISBN" content="0-596-00292-0" /><meta name="DC.Subject.Keyword" content="stuff" /><meta name="DC.Title" content="XML in a Nutshell, 2nd Edition" /><meta name="DC.Type" content="Text.Monograph" />

</head><body bgcolor="#ffffff">

<img src="gifs/smbanner.gif" usemap="#banner-map" border="0" alt="Book Home" /><map name="banner-map"><area shape="rect" coords="1,-2,616,66" href="index.htm" alt="XML in a Nutshell" /><area shape="rect" coords="629,-11,726,25" href="jobjects/fsearch.htm" alt="Search this book" /></map>

<div class="navbar"><table width="684" border="0"><tr><td align="left" valign="top" width="228"><a href="part3.htm"><img src="../gifs/txtpreva.gif" alt="Previous" border="0" /></a></td><td align="center" valign="top" width="228" /><td align="right" valign="top" width="228"><a href="ch15_02.htm"><img src="../gifs/txtnexta.gif" alt="Next" border="0" /></a></td></tr></table></div>


<h1 class="chapter">Chapter 15. XML as a Data Format</h1>
<div class="htmltoc"><h4 class="tochead">Contents:</h4><p>
<a href="ch15_01.htm">Why Use XML for Data?</a><br />
<a href="ch15_02.htm">Developing Data-Oriented XML Formats</a><br />
<a href="ch15_03.htm">Sharing Your XML format</a><br /></p></div><p>Despite <a name="xmlnut2-IDXTERM-1335" /> <a name="xmlnut2-IDXTERM-1336" />its document roots, the most common
applications of XML today involve the storage and transmission of
information for use by different software applications and systems.
New technologies and frameworks (such as Web Services) depend heavily
on XML content to communicate and negotiate between dissimilar
applications.
</p><p>The appropriate techniques used to design, build, and maintain a
data-centric XML application vary greatly, depending on the required
functionality and intended audience. This chapter discusses the
different concerns, techniques, and technologies that should be
considered when designing a new data-centric XML application.
</p><div class="sect1"><a name="xmlnut2-CHP-15-SECT-1" />
<h2 class="sect1">15.1. Why Use XML for Data?</h2>

<p>Before XML, individual programmers had to determine how data would be
formatted whenever they needed to store or transmit program data. In
most cases, the data was never intended for use outside the original
program, so programmers would store it in the most convenient format
they could devise. A few de facto file formats evolved over the years
(RTF, CSV, and the ubiquitous Windows <em class="emphasis">.ini</em> file
format), but the data written by one program could usually be read
only by that same program. In fact, it was often possible for only
that specific <em class="emphasis">version</em> of the same program to
read the data.
</p>

<p>The rapid proliferation of XML and free XML tools throughout the
programming community has given developers an obvious choice when the
time comes to select a data-storage or transmission format for their
application. For all but the most trivial applications, the benefits
of using XML to store and retrieve data far outweigh the additional
overhead of including an XML parser in your application. The unique
strengths of using XML as a software data format include:
</p>

<dl>
<dt><i>Simple syntax</i></dt>
<dd>
Easy to generate and parse.</p>
</dd>


<dt><i>Support for nesting</i></dt>
<dd>
Tags easily allow programs to represent structures with nested
elements.
</p>
</dd>


<dt><i>Easy to debug</i></dt>
<dd>
Human-readable data format is easy to explore and create with a basic
text editor.
</p>
</dd>


<dt><i>Language and platform independent</i></dt>
<dd>
XML and Unicode guarantee that your datafile will be portable across
virtually every popular computer architecture and language
combination in use today.
</p>
</dd>

</dl>

<p>Building on these basic strengths, XML can make possible new types of
applications that would have been previously impossible (or very
costly) to implement.
</p>



<a name="ch15-4-fm2xml" /><blockquote><b>TIP:</b> 
There are a few technologies that seek to achieve similar
cross-program compatibility but use binary formats. Abstract Syntax
Notation One (ASN.1) is probably the most prominent of these. ISO and
ITU-T are developing standards for working with XML and ASN.1 in
various combinations; more information on these developments is
available from <a href="../../../../../../asn1.elibel.tm.fr/en/xml/">http://asn1.elibel.tm.fr/en/xml/</a>.
</p>
</blockquote>

<a name="xmlnut2-CHP-15-SECT-1.1" /><div class="sect2">
<h3 class="sect2">15.1.1. Mixed Environments</h3>

<p>Modern <a name="IXT-15-239983" />enterprise
<a name="IXT-15-239984" />applications often involve software
running on different computer systems under various operating
systems. Choosing a communication protocol involves finding the
lowest common denominator available on each system. With the large
number of XML parsers that can be freely integrated with your
application, XML is becoming a popular format for enterprise data
sharing.
</p>

<p>Imagine a typical enterprise application that needs to display data
from a mainframe to users connected to a corporate web site. In this
case, XML acts as the "glue" to
connect a web server with a legacy application on a mainframe. The
simple XML interface application accepts requests from the web
server, calls the legacy application, and converts the result to XML.
Using a technology like XSLT, the web server can then transform the
XML into a number of acceptable web formats. By adopting XML as the
common language of your enterprise, it becomes easier to reuse
existing data in new ways.
</p>

<p>Even on smaller systems, XML can be useful for sharing information
between applications written in different languages or running in
different environments. If a Perl program and a Java program need to
communicate, generating and processing XML can be simpler than the
alternatives. The XML can also serve as a record to their
communications or provide a gateway to other systems that need to
join the conversation.
</p>

</div>
<a name="xmlnut2-CHP-15-SECT-1.2" /><div class="sect2">
<h3 class="sect2">15.1.2. Communications</h3>

<p>Building <a name="IXT-15-239985" />flexible
<a name="IXT-15-239986" />communications protocols that link
disparate systems has always been a difficult area in computing. With
the proliferation of computer networking and the Internet, building
distributed systems has become even more important.
</p>

<p>While XML itself is only a data format, not a protocol,
XML's flexibility and cross-platform usability has
inspired some new developments on the protocol front. XML messaging
started even before the XML specification was finished, and various
forms of XML messaging have continued to evolve.
</p>

<p>One of the earliest approaches, and still a common one, was
transmitting XML over HTTP POST requests. The sender would assemble
an XML document and send it much like HTML form data, and the
recipient would process the XML and send back a response, also in
XML. Some developers create custom vocabularies for these
transactions, while others have moved to standardized vocabularies
such as XML-RPC and SOAP.
</p>

<p>XML-RPC is a very simple protocol, which uses XML messages traveling
on HTTP to represent client-server remote procedure calls (RPC). The
XML messages identify methods, parameters, and the results of calling
the methods. The XML documents use simple but effective set of data
types (including arrays and structs) to pass information between
computers. For more information on XML-RPC, see <a href="../../../../../../www.xmlrpc.com/">http://www.xmlrpc.com/</a>.
</p>

<p>SOAP <a name="IXT-15-239987" /> <a name="IXT-15-239988" />offers much more flexibility
than XML-RPC, but is much more complex as well. SOAP (formerly the
Simple Object Access Protocol, but now an acronym without meaning)
uses XML to encapsulate information being sent between programs. SOAP
is no longer bound to an HTTP transport, but HTTP is commonly used.
It offers both an RPC approach and a document-oriented approach and
uses XML Schema data types (with some of its own extensions for
things like arrays) to identify type information. SOAP is often
grouped with Web Services Description Language (WSDL) and Universal
Description, Discovery, and Integration (UDDI) in discussions of
"Web Services." For information on
SOAP and Web Services, see <a href="../../../../../../www.w3.org/2002/ws/">http://www.w3.org/2002/ws/</a>. 
</p>



<a name="ch15-8-fm2xml" /><blockquote><b>TIP:</b> 
Some developers are promoting the use of HTTP-based alternatives to
SOAP and XML-RPC, under the banner of Representational State Transfer
(REST). For more information on this architectural approach and the
perspective it offers, see <a href="../../../../../../internet.conveyor.com/RESTwiki/moin.cgi">http://internet.conveyor.com/RESTwiki/moin.cgi</a>.</p>
</blockquote>



<p>The Blocks Extensible Exchange Protocol (BEEP) takes a very
different approach from SOAP and XML-RPC. Rather than building
documents that travel over existing protocols, BEEP uses XML to build
protocols on TCP sockets. BEEP supports HTTP-style message-and-reply,
as well as more complex synchronous and asychronous modes of
communication. SOAP messages can be transmitted over BEEP, and so can
a wide variety of other XML and binary information. More information
on BEEP is available at <a href="../../../../../../www.beepcore.org/">http://www.beepcore.org</a>. </p>

</div>
<a name="xmlnut2-CHP-15-SECT-1.3" /><div class="sect2">
<h3 class="sect2">15.1.3. Object Serialization</h3>

<p>Like the <a name="IXT-15-239989" />issue
<a name="IXT-15-239990" />of communications, the question of where
and how to store the state of persistent objects has been answered in
various ways over the years. With the popular adoption of
object-oriented languages, such as C++ and Java, the language and
runtime environment frequently handle object-serialization mechanics.
Unfortunately, most of these technologies predate XML.
</p>

<p>Most existing serialization methods are highly language- and
architecture-specific. The serialized object is most often stored in
a binary format that is not human readable. These files break easily
if corrupted, and maintaining compatibility as the
object's structure changes frequently requires
custom work on the part of the programmer.
</p>

<p>The features that make XML popular as a communications protocol also
make it popular as a format for serializing object contents. Viewing
the object's contents, making manual modifications,
and even repairing damaged files is easy. XML's
flexible nature allows the file format to expand ad infinitum while
maintaining backward compatibility with older file versions.
XML's labeled hierarchies are a clean fit for nested
object structures, and conversions from objects to XML and back can
be reasonably transparent. (Mapping arbitrary XML to object
structures is a much harder problem.)
</p>

<p>A number of tools serialize objects written in various environments
as XML documents and can recreate the objects from the XML. Java 1.4,
for example, adds an "API for Long-Term
Persistence" to its <tt class="literal">java.beans</tt>
package, giving developers an alternative to its existing (and still
supported) opaque binary serialization format. The XML vocabulary
looks a lot like Java and is clearly designed for use within a Java
framework, though other environments may import and export the
serialization. For more information on this API and the XML it
produces, see <a href="../../../../../../java.sun.com/j2se/1.4/docs/guide/beans/changes14.html#ltp">http://java.sun.com/j2se/1.4/docs/guide/beans/changes14.html#ltp</a>.Microsoft's .NET framework includes
similar capabilities but uses an XML Schema-based approach.
</p>

</div>
<a name="xmlnut2-CHP-15-SECT-1.4" /><div class="sect2">
<h3 class="sect2">15.1.4. Data Storage/Retrieval</h3>

<p>The line between an XML file and a <a name="IXT-15-239991" />database can be blurred. Though XML
documents are too verbose and searching is too inefficient for
high-performance large-scale database applications, they may be used
as a simple, self-contained data store for small sets of information.
</p>

<p>XML can play a role in the communications between databases and other
software, providing usable chunks of information in a form more
easily reused than a typical query response. On the client side, XML
data files can be used to offload some nontransactional data-search
and -retrieval applications from busy web servers down to the desktop
web browser. On the server side, XML can be used as an alternate
delivery mechanism for query results.
</p>

<p>XML is also finding use as a supplement to information stored in
relational databases, and more and more relational databases include
native support for XML both as a data-retrieval format and a data
type. Native XML databases, which store XML documents and provide
querying and retrieval tools, are also becoming more widely
available. For more information on the wide variety of XML and
data-management tools available, see <a href="../../../../../../www.rpbourret.com/xml/XMLDatabaseProds.htm">http://www.rpbourret.com/xml/XMLDatabaseProds.htm</a>.
</p>

</div>
</div>

<hr width="684" align="left" />
<div class="navbar"><table width="684" border="0"><tr><td align="left" valign="top" width="228"><a href="part3.htm"><img src="../gifs/txtpreva.gif" alt="Previous" border="0" /></a></td><td align="center" valign="top" width="228"><a href="index.htm"><img src="../gifs/txthome.gif" alt="Home" border="0" /></a></td><td align="right" valign="top" width="228"><a href="ch15_02.htm"><img src="../gifs/txtnexta.gif" alt="Next" border="0" /></a></td></tr><tr><td align="left" valign="top" width="228">III. Data-Centric XML</td><td align="center" valign="top" width="228"><a href="index/index.htm"><img src="../gifs/index.gif" alt="Book Index" border="0" /></a></td><td align="right" valign="top" width="228">15.2. Developing Data-Oriented XML Formats</td></tr></table></div>
<hr width="684" align="left" />

<img src="../gifs/navbar.gif" usemap="#library-map" border="0" alt="Library Navigation Links" />
<p><p><font size="-1"><a href="copyrght.htm">Copyright &copy; 2002</a> O'Reilly &amp; Associates. All rights reserved.</font></p>

<map name="library-map">
<area shape="rect" coords="0,0,85,93" href="../index.htm"><area shape="rect" coords="85,0,180,98" href="../sax2/index.htm"><area shape="rect" coords="182,-1,261,100" href="index.htm"><area shape="rect" coords="263,1,384,96" href="../jxml/index.htm"><area shape="rect" coords="386,1,463,100" href="../jxslt/index.htm"><area shape="rect" coords="466,1,533,112" href="../xslt/index.htm"><area shape="rect" coords="535,-1,610,108" href="../schema/index.htm"><area shape="rect" coords="613,1,696,121" href="../pxml/index.htm">
      </map>

</body></html>