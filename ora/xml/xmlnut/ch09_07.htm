<html><head><title>XPath Functions (XML in a Nutshell, 2nd Edition)</title><link rel="stylesheet" type="text/css" href="../style/style1.css" />

<meta name="DC.Creator" content="Elliotte Rusty Harold and W. Scott Means" /><meta name="DC.Format" content="text/xml" scheme="MIME" /><meta name="DC.Language" content="en-US" /><meta name="DC.Publisher" content="O'Reilly &amp; Associates, Inc." /><meta name="DC.Source" scheme="ISBN" content="0-596-00292-0" /><meta name="DC.Subject.Keyword" content="stuff" /><meta name="DC.Title" content="XML in a Nutshell, 2nd Edition" /><meta name="DC.Type" content="Text.Monograph" />

</head><body bgcolor="#ffffff">

<img src="gifs/smbanner.gif" usemap="#banner-map" border="0" alt="Book Home" /><map name="banner-map"><area shape="rect" coords="1,-2,616,66" href="index.htm" alt="XML in a Nutshell" /><area shape="rect" coords="629,-11,726,25" href="jobjects/fsearch.htm" alt="Search this book" /></map>

<div class="navbar"><table width="684" border="0"><tr><td align="left" valign="top" width="228"><a href="ch09_06.htm"><img src="../gifs/txtpreva.gif" alt="Previous" border="0" /></a></td><td align="center" valign="top" width="228" /><td align="right" valign="top" width="228"><a href="ch10_01.htm"><img src="../gifs/txtnexta.gif" alt="Next" border="0" /></a></td></tr></table></div>



<h2 class="sect1">9.7. XPath Functions</h2>

<p>XPath <a name="xmlnut2-IDXTERM-929" />
<a name="xmlnut2-IDXTERM-930" />provides
a number of functions that you may find useful in predicates or raw
expressions. All of these are discussed in <a href="ch22_01.htm">Chapter 22</a>. For example, the <tt class="literal">position(
)</tt> function returns the position of the current node in the
context node list as a number. This XSLT template rule uses the
<tt class="literal">position( )</tt><a name="IXT-9-239061" /> function to calculate the number of the
<tt class="literal">person</tt> being processed, relative to other nodes in
the context node list:
</p>

<blockquote><pre class="code">&lt;xsl:template match="person"&gt;
  Person &lt;xsl:value-of select="position( )"/&gt;,
  &lt;xsl:value-of select="name"/&gt;
&lt;/xsl:template&gt;</pre></blockquote>

<p>Each XPath function returns one of these four types:</p>

<ul><li>
<p>Boolean</p>
</li><li>
<p>Number</p>
</li><li>
<p>Node-set</p>
</li><li>
<p>String</p>
</li></ul>
<p>There are no void functions in XPath. Therefore, XPath is not nearly
as strongly typed as languages like Java or even C. You can often use
any of these types as a function argument regardless of which type
the function expects, and the processor will convert it as best it
can. For example, if you insert a Boolean where a string is expected,
then the processor will substitute one of the two strings
"true" and
"false" for the Boolean. The one
exception is functions that expect to receive node-sets as arguments.
XPath cannot convert strings, Booleans, or numbers to node-sets.
</p>

<p>Functions are identified by the parentheses at the end of the
function names. Sometimes these functions take arguments between the
parentheses. <a name="IXT-9-239062" />For instance, the <tt class="literal">round(
)</tt> function takes a single number as an argument. It returns
the number rounded to the nearest integer. For example,
<tt class="literal">&lt;xsl:value-of select="round(3.14)"/&gt;</tt> inserts
<tt class="literal">3</tt> into the output tree.
</p>

<p>Other functions take more than one argument. For instance, the
<tt class="literal">starts-with( )</tt><a name="IXT-9-239063" /> function takes two arguments, both
strings. It returns true if the first string starts with the second
string. For example, this XSLT <tt class="literal">apply-templates</tt>
element selects all <tt class="literal">name</tt> elements whose last name
begins with T:
</p>

<blockquote><pre class="code">&lt;xsl:apply-templates select="name[starts-with(last_name, 'T')]"/&gt;</pre></blockquote>

<p>In this example the first argument to the <tt class="literal">starts-with(
)</tt> function is actually a node-set, not a string. The XPath
processor converts that node-set to its string value (the text
content of the first element in that node-set) before checking to see
whether it starts with T.
</p>

<p>Some XSLT functions have variable-length argument lists.
<a name="IXT-9-239064" />For instance, the <tt class="literal">concat(
)</tt> function takes as arguments any number of strings and
returns one string formed by concatenating all those strings together
in order. For example, <tt class="literal">concat("a", "b", "c", "d")</tt>
returns <tt class="literal">"abcd"</tt>.
</p>

<p>In addition to the functions defined in XPath and discussed in this
chapter, most uses of XPath, such as XSLT and XPointer, define many
more functions that are useful in their particular context. You use
these extra functions just like the built-in functions when
you're using those applications. XSLT even lets you
write extension functions in Java and other languages that can do
almost anything, for example, making SQL queries against a remote
database server and returning the result of the query as a node-set.
</p>

<a name="xmlnut2-CHP-9-SECT-7.1" /><div class="sect2">
<h3 class="sect2">9.7.1. Node-Set Functions</h3>

<p><a name="IXT-9-239065" /> <a name="IXT-9-239066" />The node-set functions either
operate on or return information about node-sets, that is,
collections of XPath nodes. You've already
encountered the <tt class="literal">position( )</tt> function. Two related
functions are <tt class="literal">last( )</tt><a name="IXT-9-239067" /> and <tt class="literal">count(
)</tt><a name="IXT-9-239068" />. The <tt class="literal">last( )</tt>
function returns the number of nodes in the context node list, which
also happens to be the same as the position of the last node in the
list. The <tt class="literal">count( )</tt> function is similar except that
it returns the number of nodes in its node-set argument rather than
in the context node list. For example,
<tt class="literal">count(//name)</tt> returns the number of
<tt class="literal">name</tt> elements in the document. <a href="ch09_07.htm">Example 9-5</a> uses the <tt class="literal">position( )</tt> and
<tt class="literal">count( )</tt> functions to list the people in the
document in the form "Person 1 of 10, Person 2 of
10, Person 3 of 10 . . . " In the second template
the <tt class="literal">position( )</tt> function determines which
<tt class="literal">person</tt> element is currently being processed, and
the <tt class="literal">count( )</tt> function determines how many total
<tt class="literal">person</tt> elements there are in the document.
</p>

<a name="xmlnut2-CHP-9-EX-5" /><div class="example">
<h4 class="objtitle">Example 9-5. An XSLT stylesheet that uses the position( ) and count( ) functions </h4>
<blockquote><pre class="code">&lt;?xml version="1.0"?&gt;
&lt;xsl:stylesheet version="1.0"
                xmlns:xsl="http://www.w3.org/1999/XSL/Transform"&gt;

  &lt;xsl:template match="people"&gt;
    &lt;xsl:apply-templates select="person"/&gt;
  &lt;/xsl:template&gt;

  &lt;xsl:template match="person"&gt;
    Person &lt;xsl:value-of select="position( )"/&gt;
    of &lt;xsl:value-of select="count(//person)"/&gt;:
    &lt;xsl:value-of select="name"/&gt;
  &lt;/xsl:template&gt;

&lt;/xsl:stylesheet&gt;</pre></blockquote>
</div>

<p>The <tt class="literal">id( )</tt><a name="IXT-9-239069" /> function takes as an argument a string
containing one or more IDs separated by whitespace and returns a
node-set containing all the nodes in the document that have those
IDs. These are attributes declared to have type ID in the DTD not
necessarily attributes named <tt class="literal">ID</tt> or
<tt class="literal">id</tt>. (A DTD must be both present and processed by
the parser for the <tt class="literal">id()</tt> function to work.) Thus,
in <a href="ch09_01.htm">Example 9-1</a>, <tt class="literal">id('p342')</tt>
indicates <a name="IXT-9-239070" />Alan
Turing's <tt class="literal">person</tt> element;
<tt class="literal">id('p342 p4567')</tt> indicates both Alan Turing and
<a name="IXT-9-239071" />Richard
Feynman's <tt class="literal">person</tt> elements.
</p>

<p>The <tt class="literal">id( )</tt> function is most commonly used in the
abbreviated XPath syntax. It allows you to form
<a name="IXT-9-239072" />absolute location paths that
don't start from the root. For example,
<tt class="literal">id('p342')/name</tt> refers to Alan
Turing's <tt class="literal">name</tt> element, regardless
of where Alan Turing's <tt class="literal">person</tt>
element is in the document, as long as it hasn't
changed ID. This function is especially useful for XPointers where it
takes the place of HTML's named anchors.
</p>

<p>Finally, there are three node-set functions related to
<a name="IXT-9-239073" />namespaces. The
<tt class="literal">local-name( )</tt><a name="IXT-9-239074" /> function takes as an argument a
node-set and returns the local part of the first node in that set.
The <tt class="literal">namespace-uri(
)</tt><a name="IXT-9-239075" /> function takes a node-set as an
argument and returns the namespace URI of the first node in the set.
Finally, the <tt class="literal">name( )</tt><a name="IXT-9-239076" /> function takes a node-set as an
argument and returns the prefixed name of the first node in that set.
In all three functions the argument may be omitted, in which case the
context node's namespace is evaluated. For instance,
when applied to <a href="ch09_01.htm">Example 9-1</a> the XPath expression,
<tt class="literal">local-name(//homepage/@xlink:href)</tt> is
<tt class="literal">href</tt>;
<tt class="literal">namespace-uri(//homepage/@xlink:href)</tt> is
<tt class="literal">http://www.w3.org/1999/xlink</tt>; and
<tt class="literal">name(//homepage/@xlink:href)</tt> is
<tt class="literal">xlink:href</tt>.
</p>

</div>
<a name="xmlnut2-CHP-9-SECT-7.2" /><div class="sect2">
<h3 class="sect2">9.7.2. String Functions </h3>

<p>XPath <a name="IXT-9-239077" /> <a name="IXT-9-239078" />includes functions for basic
string operations such as finding the length of a string or changing
letters from upper- to lowercase. It doesn't have
the full power of the string libraries in Python or Perl--for
instance, there's no regular expression
support--but it's sufficient for many simple
manipulations you need for XSLT or XPointer.
</p>

<p>The <tt class="literal">string( )</tt><a name="IXT-9-239079" /> function converts an argument of any
type to a string in a reasonable fashion. Booleans are converted to
the string "true" or the string
"false." Node-sets are converted to
the string value of the first node in the set. This is the same value
calculated by the
<tt class="literal">xsl:value-of</tt><a name="IXT-9-239080" />
element. That is, the string value of the element is the complete
text of the element after all entity references are resolved and
tags, comments, and processing instructions have been stripped out.
Numbers are converted to strings in the format used by most
programming languages, such as
"1987,"
"299792500," or
"2.71828."
</p>



<a name="ch09-25-fm2xml" /><blockquote><b>TIP:</b> 
In XSLT the
<tt class="literal">xsl:decimal-format</tt><a name="IXT-9-239081" /> element and <tt class="literal">format-number(
)</tt><a name="IXT-9-239082" /> function provide more precise control
over formatting so you can insert separators between groups, change
the decimal separator, use non-European digits, and make similar
adjustments. </p>
</blockquote>

<p>The normal use of most of the rest of the string
functions is to manipulate or address the text content of XML
elements or attributes. For instance, if <tt class="literal">date</tt>
attributes were given in the format <tt class="literal">MM/DD/YYYY</tt>,
then the string functions would allow you to target the month, day,
and year separately. </p> <p>The <tt class="literal">starts-with(
)</tt><a name="IXT-9-239083" /> function takes two string arguments. It
returns true if the first argument starts with the second argument.
For example, <tt class="literal">starts-with('Richard',</tt>
<tt class="literal">'Ric')</tt> is true but <tt class="literal">starts-with('Richard',
'Rick')</tt> is false. There is no corresponding
<tt class="literal">ends-with( )</tt> function. </p> <p>The
<tt class="literal">contains( )</tt><a name="IXT-9-239084" /> function also takes two string
arguments. However, it returns true if the first argument contains
the second argument--that is, if the second argument is a
substring of the first argument--regardless of position. For
example, <tt class="literal">contains('Richard', 'ar')</tt> is true but
<tt class="literal">contains('Richard', 'art')</tt> is false. </p>
<p>The <tt class="literal">substring-before(
)</tt><a name="IXT-9-239085" /> function takes two string arguments and
returns the substring of the first argument that precedes the initial
appearance of the second argument. If the second string
doesn't appear in the first string, then
<tt class="literal">substring-before( )</tt> returns the empty string. For
example, <tt class="literal">substring-before('MM/DD/YYYY',</tt>
<tt class="literal">'/')</tt> is <tt class="literal">MM</tt>. The
<tt class="literal">substring-after(
)</tt><a name="IXT-9-239086" /> function also takes two string
arguments but returns the substring of the first argument that
follows the initial appearance of the second argument. If the second
string doesn't appear in the first string, then
<tt class="literal">substring-after( )</tt> returns the empty string. For
example, <tt class="literal">substring-after ('MM/DD/YYYY',</tt>
<tt class="literal">'/')</tt> is <tt class="literal">'DD/YYYY'</tt>.
<tt class="literal">substring-before(substring-after('MM/DD/YYYY', '/')',
'/')</tt> is <tt class="literal">DD</tt>.
<tt class="literal">substring-after(substring-after('MM/DD/YYYY', '/')',
'/')</tt> is <tt class="literal">YYYY</tt>. </p> <p>If you know
the position of the substring you want, then you can use the
<tt class="literal">substring( )</tt><a name="IXT-9-239087" /> method instead. This takes three
arguments: the string from which the substring will be copied, the
position in the string from which to start extracting, and the number
of characters to copy to the substring. The third argument may be
omitted, in which case the substring contains all characters from the
specified start position to the end of the string. For example,
<tt class="literal">substring('MM/DD/YYYY', 1, 2)</tt> is
<tt class="literal">MM</tt>; <tt class="literal">substring('MM/DD/YYYY', 4,
2)</tt> is <tt class="literal">DD</tt>; and
<tt class="literal">substring('MM/DD/YYYY', 7)</tt> is
<tt class="literal">YYYY</tt>. </p> <p>The <tt class="literal">string-length(
)</tt><a name="IXT-9-239088" /> function returns a number giving the
length of its argument's string value or the context
node if no argument is included. In <a href="ch09_01.htm">Example 9-1</a>,
<tt class="literal">string-length(//name[position( )=1])</tt> is 29. If
that seems long to you, remember that all whitespace characters are
included in the count. If it seems short to you, remember that markup
characters are not included in the count. </p>
<p>Theoretically, you could use these functions to trim and
normalize whitespace in element content. However, since this would be
relatively complex and is such a common need, XPath provides the
<tt class="literal">normalize-space(
)</tt><a name="IXT-9-239089" /> function to do this. For instance, in
<a href="ch09_01.htm">Example 9-1</a> the value of
<tt class="literal">string(//name[position( )=1])</tt> is: </p>


<blockquote><pre class="code">Alan
Turing</pre></blockquote>

<p>This contains a lot of extra whitespace that was inserted purely to
make the XML document neater. However,
<tt class="literal">normalize-space(string(//name[position( )=1]))</tt> is
the much more reasonable:
</p>

<blockquote><pre class="code">Alan Turing</pre></blockquote>

<p>Although a more powerful string-manipulation library would be useful,
XSLT is really designed for transforming the element structure of an
XML document. It's not meant to have the more
general power of a language like Perl, which can handle arbitrarily
complicated and varying string formats.
</p>

</div>
<a name="xmlnut2-CHP-9-SECT-7.3" /><div class="sect2">
<h3 class="sect2">9.7.3. Boolean Functions</h3>

<p>The <a name="IXT-9-239090" />
<a name="IXT-9-239091" />Boolean functions are few in number
and quite straightforward. They all return a Boolean that has the
value true or false. The <tt class="literal">true(
)</tt><a name="IXT-9-239092" />
function always returns
<a name="IXT-9-239093" />true. The <tt class="literal">false( )</tt>
function always returns false. These substitute for Boolean literals
in XPath.
</p>

<p>The <tt class="literal">not( )</tt><a name="IXT-9-239094" /> function reverses the sense of its
Boolean argument. For example, <tt class="literal">not(@id&gt;400)</tt> is
almost always equivalent to <tt class="literal">(@id&lt;=400)</tt>. (NaN is
a special case.)
</p>

<p>The <tt class="literal">boolean( )</tt><a name="IXT-9-239095" /> function converts its single argument
to a Boolean and returns the result. If the argument is omitted, then
it converts the context node. Numbers are converted to false if
they're zero or NaN. All other numbers are true.
Node-sets are false if they're empty, true if they
have at least one element. Strings are false if they have zero
length, otherwise they're true. Note that according
to this rule, the string <tt class="literal">"false"</tt> is in fact true.
</p>

</div>
<a name="xmlnut2-CHP-9-SECT-7.4" /><div class="sect2">
<h3 class="sect2">9.7.4. Number Functions</h3>

<p>XPath <a name="IXT-9-239096" /> <a name="IXT-9-239097" />includes a few simple numeric
functions for summing groups of numbers and finding the nearest
integer to a number. It doesn't have the full power
of the math libraries in Java or Fortran--for instance,
there's no square root or exponentiation
function--but it's got enough to do most of the
basic math you need for XSLT or the even simpler requirements of
XPointer.
</p>

<p>The <tt class="literal">number( )</tt><a name="IXT-9-239098" /> function can take any type as an
argument and convert it to a number. If the argument is omitted, then
it converts the context node. Booleans are converted to 1 if true and
if false. Strings are converted in a plausible fashion. For instance
the string "7.5" will be converted
to the number 7.5. The string
"Fred" will be converted to NaN.
Node-sets are converted to numbers by first converting them to their
string values and then converting the resulting string to a number.
The detailed rules are a little more complex, but as long as the
object you're converting can reasonably be
interpreted as a single number, chances are the <tt class="literal">number(
)</tt> function will do what you expect. If the object
you're converting can't be
reasonably interpreted as a single number, then the <tt class="literal">number(
)</tt> function will return NaN.
</p>

<p>The <tt class="literal">round( )</tt><a name="IXT-9-239099" />, <tt class="literal">floor(
)</tt><a name="IXT-9-239100" />, and <tt class="literal">ceiling(
)</tt><a name="IXT-9-239101" /> functions all take a single number as
an argument. The <tt class="literal">floor( )</tt> function returns the
greatest integer less than or equal to its argument. The
<tt class="literal">ceiling( )</tt> function returns the smallest integer
greater than or equal to its argument. The <tt class="literal">round(
)</tt> function returns its argument rounded to the nearest
integer. When rounding numbers like 1.5 and -3.5 that are equally
close to two integers, <tt class="literal">round()</tt> returns the greater
of the two possibilities. (This means that -1.5 rounds to -1, but 1.5
rounds to 2.)
</p>

<p>The <tt class="literal">sum( )</tt><a name="IXT-9-239102" /> function takes a node-set as an
argument. It converts each node in the set to its string value, then
converts each of those strings to a number. It then adds up the
numbers and <a name="IXTR3-31" /> <a name="IXTR3-32" />returns <a name="IXTR3-33" />the <a name="IXTR3-34" />result. 
</p>



</div>


<hr width="684" align="left" />
<div class="navbar"><table width="684" border="0"><tr><td align="left" valign="top" width="228"><a href="ch09_06.htm"><img src="../gifs/txtpreva.gif" alt="Previous" border="0" /></a></td><td align="center" valign="top" width="228"><a href="index.htm"><img src="../gifs/txthome.gif" alt="Home" border="0" /></a></td><td align="right" valign="top" width="228"><a href="ch10_01.htm"><img src="../gifs/txtnexta.gif" alt="Next" border="0" /></a></td></tr><tr><td align="left" valign="top" width="228">9.6. General XPath Expressions</td><td align="center" valign="top" width="228"><a href="index/index.htm"><img src="../gifs/index.gif" alt="Book Index" border="0" /></a></td><td align="right" valign="top" width="228">10. XLinks</td></tr></table></div>
<hr width="684" align="left" />

<img src="../gifs/navbar.gif" usemap="#library-map" border="0" alt="Library Navigation Links" />
<p><p><font size="-1"><a href="copyrght.htm">Copyright &copy; 2002</a> O'Reilly &amp; Associates. All rights reserved.</font></p>

<map name="library-map">
<area shape="rect" coords="0,0,85,93" href="../index.htm"><area shape="rect" coords="85,0,180,98" href="../sax2/index.htm"><area shape="rect" coords="182,-1,261,100" href="index.htm"><area shape="rect" coords="263,1,384,96" href="../jxml/index.htm"><area shape="rect" coords="386,1,463,100" href="../jxslt/index.htm"><area shape="rect" coords="466,1,533,112" href="../xslt/index.htm"><area shape="rect" coords="535,-1,610,108" href="../schema/index.htm"><area shape="rect" coords="613,1,696,121" href="../pxml/index.htm">
</map>

</body></html>