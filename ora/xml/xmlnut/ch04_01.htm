<html><head><title>Namespaces  (XML in a Nutshell, 2nd Edition)</title><link rel="stylesheet" type="text/css" href="../style/style1.css" />

<meta name="DC.Creator" content="Elliotte Rusty Harold and W. Scott Means" /><meta name="DC.Format" content="text/xml" scheme="MIME" /><meta name="DC.Language" content="en-US" /><meta name="DC.Publisher" content="O'Reilly &amp; Associates, Inc." /><meta name="DC.Source" scheme="ISBN" content="0-596-00292-0" /><meta name="DC.Subject.Keyword" content="stuff" /><meta name="DC.Title" content="XML in a Nutshell, 2nd Edition" /><meta name="DC.Type" content="Text.Monograph" />

</head><body bgcolor="#ffffff">

<img src="gifs/smbanner.gif" usemap="#banner-map" border="0" alt="Book Home" /><map name="banner-map"><area shape="rect" coords="1,-2,616,66" href="index.htm" alt="XML in a Nutshell" /><area shape="rect" coords="629,-11,726,25" href="jobjects/fsearch.htm" alt="Search this book" /></map>

<div class="navbar"><table width="684" border="0"><tr><td align="left" valign="top" width="228"><a href="ch03_10.htm"><img src="../gifs/txtpreva.gif" alt="Previous" border="0" /></a></td><td align="center" valign="top" width="228" /><td align="right" valign="top" width="228"><a href="ch04_02.htm"><img src="../gifs/txtnexta.gif" alt="Next" border="0" /></a></td></tr></table></div>


<h1 class="chapter">Chapter 4. Namespaces </h1>
<div class="htmltoc"><h4 class="tochead">Contents:</h4><p>
<a href="ch04_01.htm">The Need for Namespaces</a><br />
<a href="ch04_02.htm">Namespace Syntax</a><br />
<a href="ch04_03.htm">How Parsers Handle Namespaces</a><br />
<a href="ch04_04.htm">Namespaces and DTDs</a><br /></p></div><p>Namespaces <a name="xmlnut2-IDXTERM-344" />
<a name="xmlnut2-IDXTERM-345" />have
two purposes in XML:
</p><ol><li>
<p>To distinguish between elements and attributes from different
vocabularies with different meanings and that happen to share the
same name.
</p>
</li><li>
<p>To group all the related elements and attributes from a single XML
application together so that software can easily recognize them.
</p>
</li></ol><p>The first purpose is easier to explain and to grasp, but the second
purpose is more important in practice.
</p><p>Namespaces are implemented by attaching a prefix to each element and
attribute. Each prefix is mapped to a URI by an
<tt class="literal">xmlns:</tt><em class="replaceable"><tt>prefix</tt></em> attribute.
Default URIs can also be provided for elements that
don't have a prefix by <tt class="literal">xmlns</tt>
attributes. Elements and attributes that are attached to the same URI
are in the same namespace. Elements from many XML applications are
identified by standard URIs.
</p><div class="sect1"><a name="xmlnut2-CHP-4-SECT-1" />
<h2 class="sect1">4.1. The Need for Namespaces</h2>

<p>Some <a name="xmlnut2-IDXTERM-346" />documents <a name="xmlnut2-IDXTERM-347" />combine markup from multiple XML
applications. For example, an XHTML document may contain both
<a name="IXT-4-239502" />SVG pictures and <a name="IXT-4-239503" />MathML equations. An XSLT stylesheet will
contain both XSLT instructions and elements from the result-tree
vocabulary. And XLinks are always symbiotic with the elements of the
document in which they appear since XLink itself
doesn't define any elements, only attributes.
</p>

<p>In some cases, these applications may use the same name to refer to
different things. For example, in SVG a <tt class="literal">set</tt>
element sets the value of an attribute for a specified duration of
time, while in MathML a <tt class="literal">set</tt> element represents a
mathematical set such as the set of all positive even numbers.
It's essential to know when you're
working with a MathML <tt class="literal">set</tt> and when
you're working with an SVG <tt class="literal">set</tt>.
Otherwise, validation, rendering, indexing, and many other tasks will
get confused and fail.
</p>

<p>Consider <a href="ch04_01.htm">Example 4-1</a>. This is a simple list of
paintings including the title of each painting, the date each was
painted, the artist who painted it, and a description of the
painting.
</p>

<a name="xmlnut2-CHP-4-EX-1" /><div class="example">
<h4 class="objtitle">Example 4-1. A list of paintings </h4>
<blockquote><pre class="code">&lt;?xml version="1.0" encoding="ISO-8859-1" standalone="yes"?&gt;
&lt;catalog&gt;

  &lt;painting&gt;
    &lt;title&gt;Memory of the Garden at Etten&lt;/title&gt;
    &lt;artist&gt;Vincent Van Gogh&lt;/artist&gt;
    &lt;date&gt;November, 1888&lt;/date&gt;
    &lt;description&gt;
      Two women look to the left. A third works in her garden.
    &lt;/description&gt;
  &lt;/painting&gt;

  &lt;painting&gt;
    &lt;title&gt;The Swing&lt;/title&gt;
    &lt;artist&gt;Pierre-Auguste Renoir&lt;/artist&gt;
    &lt;date&gt;1876&lt;/date&gt;
    &lt;description&gt;
      A young girl on a swing. Two men and a toddler watch.
    &lt;/description&gt;
  &lt;/painting&gt;

  &lt;!-- Many more paintings... --&gt;

&lt;/catalog&gt;</pre></blockquote>
</div>

<p>Now suppose that <a href="ch04_01.htm">Example 4-1</a> is to be served as a
web page and you want to make it accessible to search engines. One
possibility is to use the <a name="xmlnut2-IDXTERM-350" /> <a name="xmlnut2-IDXTERM-351" />Resource
Description Framework (RDF) to embed metadata in the page. This
describes the page for any search engines or other robots that might
come along. Using the Dublin Core metadata vocabulary (<a href="../../../../../../purl.oclc.org/dc/">http://purl.oclc.org/dc/</a>), a standard
vocabulary for library-catalog-style information that can be encoded
in XML or other syntaxes, an RDF description of this page might look
something like this:
</p>

<blockquote><pre class="code">&lt;RDF&gt;
  &lt;Description
     about="http://www.cafeconleche.org/examples/impressionists.xml"&gt;
    &lt;title&gt; Impressionist Paintings &lt;/title&gt;
    &lt;creator&gt; Elliotte Rusty Harold &lt;/creator&gt;
    &lt;description&gt;
      A list of famous impressionist paiintings organized
      by painter and date
    &lt;/description&gt;
    &lt;date&gt;2000-08-22&lt;/date&gt;
  &lt;/Description&gt;
&lt;/RDF&gt;</pre></blockquote>

<p>Here we've used the <tt class="literal">Description</tt>
and <tt class="literal">RDF</tt> elements from RDF and the
<tt class="literal">title</tt>, <tt class="literal">creator</tt>,
<tt class="literal">description</tt>, and <tt class="literal">date</tt> elements
from the Dublin Core. We have no choice about these names; they are
established by their respective specifications. If we want standard
software, which understands RDF and the Dublin Core, to understand
our documents, then we have to use these names. <a href="ch04_01.htm">Example 4-2</a> combines this description with the actual list
of paintings.
</p>

<a name="xmlnut2-CHP-4-EX-2" /><div class="example">
<h4 class="objtitle">Example 4-2. A list of paintings including catalog information about the list </h4>
<blockquote><pre class="code">&lt;?xml version="1.0" encoding="ISO-8859-1" standalone="yes"?&gt;
&lt;catalog&gt;

  &lt;RDF&gt;
    &lt;Description
        about="http://www.cafeconleche.org/examples/impressionists.xml"&gt;
      &lt;title&gt; Impressionist Paintings &lt;/title&gt;
      &lt;creator&gt; Elliotte Rusty Harold &lt;/creator&gt;
      &lt;description&gt;
        A list of famous impressionist paintings organized
        by painter and date
      &lt;/description&gt;
      &lt;date&gt;2000-08-22&lt;/date&gt;
    &lt;/Description&gt;
  &lt;/RDF&gt;

  &lt;painting&gt;
    &lt;title&gt;Memory of the Garden at Etten&lt;/title&gt;
    &lt;artist&gt;Vincent Van Gogh&lt;/artist&gt;
    &lt;date&gt;November, 1888&lt;/date&gt;
    &lt;description&gt;
      Two women look to the left. A third works in her garden.
    &lt;/description&gt;
  &lt;/painting&gt;

  &lt;painting&gt;
    &lt;title&gt;The Swing&lt;/title&gt;
    &lt;artist&gt;Pierre-Auguste Renoir&lt;/artist&gt;
    &lt;date&gt;1876&lt;/date&gt;
    &lt;description&gt;
      A young girl on a swing. Two men and a toddler watch.
    &lt;/description&gt;
  &lt;/painting&gt;

  &lt;!-- Many more paintings... --&gt;

&lt;/catalog&gt;</pre></blockquote>
</div>

<p>Now we have a problem. Several elements have been overloaded with
different meanings in different parts of the document. The
<tt class="literal">title</tt> element is used for both the title of the
page and the title of a painting. The <tt class="literal">date</tt> element
is used for both the date the page was written and the date the
painting was painted. One <tt class="literal">description</tt> element
describes pages, while another describes paintings.
</p>

<p>This presents all sorts of problems. Validation is difficult because
catalog and Dublin Core elements with the same name have different
content specifications. Web browsers may want to hide the page
description while showing the painting description, but not all
stylesheet languages can tell the difference between the two.
Processing software may understand the date format used in the Dublin
Core <tt class="literal">date</tt> element, but not the more free-form
format used in the painting <tt class="literal">date</tt> element.
</p>

<p>We could change the names of the elements from our vocabulary,
<tt class="literal">painting_title</tt> instead of
<tt class="literal">title</tt>, <tt class="literal">date_painted</tt> instead of
<tt class="literal">date</tt>, and so on. However, this is inconvenient if
you already have a lot of documents marked up in the old version of
the vocabulary. And it may not be possible to do this in all cases,
especially if the name collisions occur not because of conflicts
between your vocabulary and a standard vocabulary, but because of
conflicts between two or more standard vocabularies. For instance,
RDF just barely avoids a collision with the Dublin Core over the
<tt class="literal">Description</tt> and <tt class="literal">description</tt>
elements.
</p>

<p>In other cases, there may not be any name conflicts, but it may still
be important for software to determine quickly and decisively to
which XML application a given element or attribute belongs. For
instance, an XSLT processor needs to distinguish between XSLT
instructions and <a name="IXTR3-81" /> <a name="IXTR3-82" />literal <a name="IXTR3-83" />result-tree <a name="IXTR3-84" />elements.
</p>

</div>

<hr width="684" align="left" />
<div class="navbar"><table width="684" border="0"><tr><td align="left" valign="top" width="228"><a href="ch03_10.htm"><img src="../gifs/txtpreva.gif" alt="Previous" border="0" /></a></td><td align="center" valign="top" width="228"><a href="index.htm"><img src="../gifs/txthome.gif" alt="Home" border="0" /></a></td><td align="right" valign="top" width="228"><a href="ch04_02.htm"><img src="../gifs/txtnexta.gif" alt="Next" border="0" /></a></td></tr><tr><td align="left" valign="top" width="228">3.10. Locating Standard DTDs </td><td align="center" valign="top" width="228"><a href="index/index.htm"><img src="../gifs/index.gif" alt="Book Index" border="0" /></a></td><td align="right" valign="top" width="228">4.2. Namespace Syntax</td></tr></table></div>
<hr width="684" align="left" />

<img src="../gifs/navbar.gif" usemap="#library-map" border="0" alt="Library Navigation Links" />
<p><p><font size="-1"><a href="copyrght.htm">Copyright &copy; 2002</a> O'Reilly &amp; Associates. All rights reserved.</font></p>

<map name="library-map">
<area shape="rect" coords="0,0,85,93" href="../index.htm"><area shape="rect" coords="85,0,180,98" href="../sax2/index.htm"><area shape="rect" coords="182,-1,261,100" href="index.htm"><area shape="rect" coords="263,1,384,96" href="../jxml/index.htm"><area shape="rect" coords="386,1,463,100" href="../jxslt/index.htm"><area shape="rect" coords="466,1,533,112" href="../xslt/index.htm"><area shape="rect" coords="535,-1,610,108" href="../schema/index.htm"><area shape="rect" coords="613,1,696,121" href="../pxml/index.htm">
      </map>

</body></html>