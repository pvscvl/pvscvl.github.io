<html><head><title>XPath Functions (XML in a Nutshell, 2nd Edition)</title><link rel="stylesheet" type="text/css" href="../style/style1.css" />

<meta name="DC.Creator" content="Elliotte Rusty Harold and W. Scott Means" /><meta name="DC.Format" content="text/xml" scheme="MIME" /><meta name="DC.Language" content="en-US" /><meta name="DC.Publisher" content="O'Reilly &amp; Associates, Inc." /><meta name="DC.Source" scheme="ISBN" content="0-596-00292-0" /><meta name="DC.Subject.Keyword" content="stuff" /><meta name="DC.Title" content="XML in a Nutshell, 2nd Edition" /><meta name="DC.Type" content="Text.Monograph" />

</head><body bgcolor="#ffffff">

<img src="gifs/smbanner.gif" usemap="#banner-map" border="0" alt="Book Home" /><map name="banner-map"><area shape="rect" coords="1,-2,616,66" href="index.htm" alt="XML in a Nutshell" /><area shape="rect" coords="629,-11,726,25" href="jobjects/fsearch.htm" alt="Search this book" /></map>

<div class="navbar"><table width="684" border="0"><tr><td align="left" valign="top" width="228"><a href="ch22_04.htm"><img src="../gifs/txtpreva.gif" alt="Previous" border="0" /></a></td><td align="center" valign="top" width="228" /><td align="right" valign="top" width="228"><a href="ch23_01.htm"><img src="../gifs/txtnexta.gif" alt="Next" border="0" /></a></td></tr></table></div>



<h2 class="sect1">22.5. XPath Functions</h2>

<p>XPath 1.0 <a name="xmlnut2-IDXTERM-2201" />
<a name="xmlnut2-IDXTERM-2202" />defines
27 built-in functions for use in XPath expressions. Various
technologies that use XPath, such as XSLT and XPointer, also extend
this list with functions they need. XSLT even allows user-defined
extension functions.
</p>

<p>Every function is evaluated in the context of a particular node,
called the <em class="emphasis">context node</em>. The higher-level
specification in which XPath is used, such as XSLT or XPointer,
decides exactly how this context node is determined. In some cases
the function operates on the context node. In other cases it operates
on the argument, if present, and the context node, if no argument
exists. The context node is ignored in other cases.
</p>

<p>In the following sections, each function is described with at least
one signature in this form:
</p>

<blockquote><pre class="code">return-type function-name(type argument, type argument, ...)</pre></blockquote>

<p>Compared to languages like Java, XPath argument lists are quite
loose. Some XPath functions take a variable number of arguments and
fill in the arguments that are omitted with default values or the
context node.
</p>

<p>Furthermore, XPath is weakly typed. If you pass an argument of the
wrong type to an XPath function, it generally converts that argument
to the appropriate type using the <tt class="literal">boolean( )</tt>,
<tt class="literal">string( )</tt>, or <tt class="literal">number( )</tt>
functions, described later. The exceptions to the weak-typing rule
are the functions that take a node-set as an argument. Standard XPath
1.0 provides no means of converting anything that
isn't a node-set into a node-set. In some cases a
function can operate equally well on multiple argument types. In this
case, its type is given simply as <tt class="literal">object</tt>.
</p>

<a name="ch22-10-fm2xml" /><a name="IXT-22-240520" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b>boolean( )</b></font></td><td align="right"><i>
</i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><table width="515" border="0" cellpadding="5"><tr><td align="left"><pre>
<a name="IXT-22-240520" />boolean boolean(object o)
</pre></td><td align="right" /></tr></table>The <tt class="literal">boolean( )</tt> function converts its argument to a
Boolean according to these rules:
</p><ul><li>
<p>Zero and NaN are false. All other numbers are true.</p>
</li><li>
<p>Empty node-sets are false. Nonempty node-sets are true.</p>
</li><li>
<p>Empty strings are false. Nonempty strings are true.</p>
</li></ul></div>

<a name="ch22-11-fm2xml" /><a name="IXT-22-240521" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b>ceiling( )</b></font></td><td align="right"><i>
</i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><table width="515" border="0" cellpadding="5"><tr><td align="left"><pre>
<a name="IXT-22-240521" />number ceiling(number x)
</pre></td><td align="right" /></tr></table>The <tt class="literal">ceiling( )</tt> function returns the smallest
integer greater than or equal to <tt class="literal">x</tt>. For example,
<tt class="literal">ceiling(3.141592)</tt> is 4.
<tt class="literal">ceiling(-3.141592)</tt> is -3. Before the ceiling is
calculated, non-number types are converted to numbers as if by the
<tt class="literal">number( )</tt> function.
</p></div>

<a name="ch22-12-fm2xml" /><a name="IXT-22-240522" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b>concat( )</b></font></td><td align="right"><i>
</i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><table width="515" border="0" cellpadding="5"><tr><td align="left"><pre>
<a name="IXT-22-240522" />string concat(string s1, string s2)
string concat(string s1, string s2, string s3)
string concat(string s1, string s2, string s3, string s4)
...
</pre></td><td align="right" /></tr></table>This function concatenates its arguments in order from left to right
and returns the combined string. It may take two or more arguments.
Nonstrings may be passed to this function as well, in which case
they're converted to strings automatically as if by
the <tt class="literal">string( )</tt> function.
</p></div>

<a name="ch22-13-fm2xml" /><a name="IXT-22-240523" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b>contains( )</b></font></td><td align="right"><i>
</i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><table width="515" border="0" cellpadding="5"><tr><td align="left"><pre>
<a name="IXT-22-240523" />boolean contains(string s1, string s2)
</pre></td><td align="right" /></tr></table>This function returns true if <tt class="literal">s2</tt> is a substring of
<tt class="literal">s1</tt>--that is, if <tt class="literal">s1</tt>
contains <tt class="literal">s2</tt>--false otherwise. For example,
<tt class="literal">contains("A very Charming cat",</tt>
<tt class="literal">"Charm")</tt> is true, but
<tt class="literal">contains("A</tt> <tt class="literal">very Charming cat",</tt>
<tt class="literal">"Marjorie")</tt> is false. The test is case-sensitive.
For example, <tt class="literal">contains("A very charming cat",</tt>
<tt class="literal">"Charm")</tt> is false. Nonstrings may also be passed
to this function, in which case they're
automatically converted to strings as if by the <tt class="literal">string(
)</tt> function.
</p></div>

<a name="ch22-14-fm2xml" /><a name="IXT-22-240524" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b>count( )</b></font></td><td align="right"><i>
</i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><table width="515" border="0" cellpadding="5"><tr><td align="left"><pre>
<a name="IXT-22-240524" />number count(node-set set)
</pre></td><td align="right" /></tr></table>The <tt class="literal">count( )</tt> function returns the number of nodes
in the argument node-set, that is, the length of the set.
</p></div>

<a name="ch22-15-fm2xml" /><a name="IXT-22-240525" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b>false( )</b></font></td><td align="right"><i>
</i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><table width="515" border="0" cellpadding="5"><tr><td align="left"><pre>
<a name="IXT-22-240525" />boolean false( )
</pre></td><td align="right" /></tr></table>The <tt class="literal">false( )</tt> function always returns false. It
makes up for the lack of Boolean literals in XPath.
</p></div>

<a name="ch22-16-fm2xml" /><a name="IXT-22-240526" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b>floor(3e  ) </b></font></td><td align="right"><i>
</i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><table width="515" border="0" cellpadding="5"><tr><td align="left"><pre>
<a name="IXT-22-240526" />number floor(number x)
</pre></td><td align="right" /></tr></table>The <tt class="literal">floor( )</tt> function returns the greatest integer
less than or equal to <tt class="literal">x</tt>. For example,
<tt class="literal">floor(3.141592)</tt> is 3.
<tt class="literal">floor(-3.141592)</tt> is -4. Before their floor is
calculated, non-number types are converted to numbers as if by the
<tt class="literal">number( )</tt> function.
</p></div>

<a name="ch22-17-fm2xml" /><a name="IXT-22-240527" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b>id( )</b></font></td><td align="right"><i>
</i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><table width="515" border="0" cellpadding="5"><tr><td align="left"><pre>
<a name="IXT-22-240527" />node-set id(string IDs)
node-set id(node-set IDs)
</pre></td><td align="right" /></tr></table>The <tt class="literal">id( )</tt> function returns a node-set containing
all elements in the document with any of the specified IDs. If the
argument is a string, then this string is interpreted as a
whitespace-separated list of IDs, and the function returns a node-set
containing any elements that have an ID matching one of these IDs. If
the argument is a node-set, then each node in the set is converted to
a string, which is in turn treated as a white-space-separated list of
IDs. The returned node-set contains all the elements whose ID matches
any ID in the string value of any of these nodes. Finally, if the
argument is any other type, then it's converted to a
string, as by the <tt class="literal">string( )</tt> function, and it
returns the same result as passing that string value to <tt class="literal">id(
)</tt> directly.
</p></div>

<a name="ch22-18-fm2xml" /><a name="IXT-22-240528" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b>lang( )</b></font></td><td align="right"><i>
</i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><table width="515" border="0" cellpadding="5"><tr><td align="left"><pre>
<a name="IXT-22-240528" />boolean lang(string languageCode)
</pre></td><td align="right" /></tr></table>The <tt class="literal">lang( )</tt> function returns true if the context
node is written in the language specified by the
<tt class="literal">languageCode</tt> argument; false otherwise. The
nearest <tt class="literal">xml:lang</tt> attribute on the context node or
one of its ancestors determines the language of any given node. If no
such <tt class="literal">xml:lang</tt> attribute exists, then
<tt class="literal">lang( )</tt> returns false.
</p><p>The <tt class="literal">lang( )</tt> function takes into account country
and other subcodes before making its determination. For example,
<tt class="literal">lang('fr')</tt> returns true for elements whose
language code is <tt class="literal">fr-FR</tt>, <tt class="literal">fr-CA</tt>,
or <tt class="literal">fr</tt>. However, <tt class="literal">lang('fr-FR')</tt>
is not true for elements whose language code is
<tt class="literal">fr-CA</tt> or <tt class="literal">fr</tt>.
</p></div>

<a name="ch22-19-fm2xml" /><a name="IXT-22-240529" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b>last( )</b></font></td><td align="right"><i>
</i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><table width="515" border="0" cellpadding="5"><tr><td align="left"><pre>
<a name="IXT-22-240529" />number last( )
</pre></td><td align="right" /></tr></table>The <tt class="literal">last( )</tt> function returns the size of (i.e.,
the number of nodes in) the context node-set.
</p></div>

<a name="ch22-20-fm2xml" /><a name="IXT-22-240530" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b>local-name( )</b></font></td><td align="right"><i>
</i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><table width="515" border="0" cellpadding="5"><tr><td align="left"><pre>
<a name="IXT-22-240530" />string local-name( )
string local-name(node-set nodes)
</pre></td><td align="right" /></tr></table>With no arguments, this function returns the context
node's local name, that is, the part of the name
after the colon, or the entire name if it isn't
prefixed. For a node-set argument, it returns the local name of the
first node in the node-set. If the node-set is empty or the first
node in the set does not have a name (e.g., it's a
comment or root node), then it returns the empty string.
</p></div>

<a name="ch22-21-fm2xml" /><a name="IXT-22-240531" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b>name( )</b></font></td><td align="right"><i>
</i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><table width="515" border="0" cellpadding="5"><tr><td align="left"><pre>
<a name="IXT-22-240531" />string name( )
string name(node-set nodes)
</pre></td><td align="right" /></tr></table>With no arguments, this function returns the qualified (prefixed)
name of the context node or the empty string if the context node does
not have a name (e.g., it's a comment or root node).
With a node-set as an argument, it returns the qualified name of the
first node in the node-set. If the node-set is empty or if the
set's first node does not have a name, then it
returns the empty string.
</p></div>

<a name="ch22-22-fm2xml" /><a name="IXT-22-240532" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b>namespace-uri( )</b></font></td><td align="right"><i>
</i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><table width="515" border="0" cellpadding="5"><tr><td align="left"><pre>
<a name="IXT-22-240532" />string namespace-uri( )
string namespace-uri(node-set nodes)
</pre></td><td align="right" /></tr></table>With no arguments, this function returns the namespace URI of the
context node. With a node-set as an argument, it returns the
namespace URI of the first node in the node-set. If this node does
not have a namespace URI (i.e., it's not an element
or an attribute node; it is an element or attribute node, but is not
in any namespace; or the node-set is empty), then it returns the
empty string.
</p></div>

<a name="ch22-23-fm2xml" /><a name="IXT-22-240533" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b>normalize-space( )</b></font></td><td align="right"><i>
</i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><table width="515" border="0" cellpadding="5"><tr><td align="left"><pre>
<a name="IXT-22-240533" />string normalize-space( )
string normalize-space(string s)
</pre></td><td align="right" /></tr></table>The <tt class="literal">normalize-space( )</tt> function strips all leading
and trailing whitespace from its argument and replaces each run of
whitespace with a single space character. Among other effects, this
removes all line breaks. If the argument is omitted, it normalizes
the string value of the context node. A nonstring may be passed to
this function, in which case it's automatically
converted to a string, as if by the <tt class="literal">string( )</tt>
function, and that string is normalized and returned.
</p></div>

<a name="ch22-24-fm2xml" /><a name="IXT-22-240534" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b>not( )</b></font></td><td align="right"><i>
</i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><table width="515" border="0" cellpadding="5"><tr><td align="left"><pre>
<a name="IXT-22-240534" />boolean not(boolean b)
</pre></td><td align="right" /></tr></table>The <tt class="literal">not( )</tt> function inverts its argument; that is,
false becomes true and true becomes false. For example,
<tt class="literal">not(3</tt> <tt class="literal">&gt;</tt>
<tt class="literal">2)</tt> is false, and <tt class="literal">not(2+2=5)</tt> is
true. Non-Booleans are converted as by the <tt class="literal">boolean(
)</tt> function before being processed.
</p></div>

<a name="ch22-25-fm2xml" /><a name="IXT-22-240535" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b>number( )</b></font></td><td align="right"><i>
</i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><table width="515" border="0" cellpadding="5"><tr><td align="left"><pre>
<a name="IXT-22-240535" />number number( )
number number(object o)
</pre></td><td align="right" /></tr></table>The <tt class="literal">number( )</tt> function converts its argument to a
number according to these rules:
</p><ul><li>
<p>A string is converted by first stripping leading and trailing
whitespace and then picking the IEEE 754 value that is closest
(according to the IEEE 754 round-to-nearest rule) to the mathematical
value represented by the string. If the string does not seem to
represent a number, it is converted to NaN. Exponential notation
(e.g., 75.2E-12) is not recognized.
</p>
</li><li>
<p>True Booleans are converted to 1; false Booleans are converted to 0.</p>
</li><li>
<p>Node-sets are first converted to a string as if by the
<tt class="literal">string( )</tt> function. The resulting string is then
converted to a number.
</p>
</li></ul><p>If the argument is omitted, then it converts the context node.</p></div>

<a name="ch22-26-fm2xml" /><a name="IXT-22-240536" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b>position( )</b></font></td><td align="right"><i>
</i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><table width="515" border="0" cellpadding="5"><tr><td align="left"><pre>
<a name="IXT-22-240536" />number position( )
</pre></td><td align="right" /></tr></table>The <tt class="literal">position( )</tt> function returns a number equal to
the position of the current node in the context node-set. For most
axes it counts forward from the context node. However, if the axis in
use is ancestor, ancestor-or-self, preceding, or preceding-sibling,
then it counts backward from the context node instead.
</p></div>

<a name="ch22-27-fm2xml" /><a name="IXT-22-240537" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b>round( )</b></font></td><td align="right"><i>
</i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><table width="515" border="0" cellpadding="5"><tr><td align="left"><pre>
<a name="IXT-22-240537" />number round(number x)
</pre></td><td align="right" /></tr></table>The <tt class="literal">round( )</tt> function returns the integer closest
to <tt class="literal">x</tt>. For example,
<tt class="literal">round(3.141592)</tt> returns 3.
<tt class="literal">round(-3.141592)</tt> returns -3. If two integers are
equally close to <tt class="literal">x</tt>, then the one that is closer to
positive infinity is returned. For example,
<tt class="literal">round(3.5)</tt> returns 4, and
<tt class="literal">round(-3.5)</tt> returns -3. Non-number types are
converted to numbers as if by the <tt class="literal">number( )</tt>
function, before rounding.
</p></div>

<a name="ch22-28-fm2xml" /><a name="IXT-22-240538" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b>starts-with( )</b></font></td><td align="right"><i>
</i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><table width="515" border="0" cellpadding="5"><tr><td align="left"><pre>
<a name="IXT-22-240538" />boolean starts-with(string s1, string s2)
</pre></td><td align="right" /></tr></table>The <tt class="literal">starts-with( )</tt> function returns true if
<tt class="literal">s1</tt> starts with <tt class="literal">s2</tt>; false
otherwise. For example, <tt class="literal">starts-with("Charming</tt>
<tt class="literal">cat",</tt> <tt class="literal">"Charm")</tt> is true, but
<tt class="literal">starts-with ("Charming</tt> <tt class="literal">cat",</tt>
<tt class="literal">"Marjorie")</tt> is false. The test is case-sensitive.
For example, <tt class="literal">starts-with("Charming</tt>
<tt class="literal">cat",</tt> <tt class="literal">"charm")</tt> is false.
Nonstrings may be passed to this function as well, in which case
they're automatically converted to strings as if by
the <tt class="literal">string( )</tt> function, before the test is made.
</p></div>

<a name="ch22-29-fm2xml" /><a name="IXT-22-240539" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b>string( )</b></font></td><td align="right"><i>
</i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><table width="515" border="0" cellpadding="5"><tr><td align="left"><pre>
<a name="IXT-22-240539" />string string( )
string string(object o)
</pre></td><td align="right" /></tr></table>The <tt class="literal">string( )</tt> function converts an object to a
string according to these rules:
</p><ul><li>
<p>A node-set is converted to the string value of the first node in the
node-set. If the node-set is empty, it's converted
to the empty string.
</p>
</li><li>
<p>A number is converted to a string as follows:</p>
<ul><li>
<p>NaN is converted to the string <tt class="literal">NaN</tt>. </p></li>
<li><p>Positive Inf is converted to the string <tt class="literal">Infinity</tt>. </p></li>
<li><p>Negative Inf is converted to the string <tt class="literal">-Infinity</tt>. </p></li>
<li><p>Integers are converted to their customary English form with no decimal point and no leading zeros. A minus sign is used if the number is negative, but no plus sign is used for positive numbers.</p></li>
<li><p>Nonintegers (numbers with nonzero fractional parts) are converted to their customary English form with a decimal point, with at least one digit before the decimal point and at least one digit after the decimal point. A minus sign is used if the number is negative, but no plus sign is used for positive numbers.</p></li>
</ul>
</li>
<li>
<p>A Boolean with the value <tt class="literal">true</tt> is converted to the
English word "true." A Boolean with
the value <tt class="literal">false</tt> is converted to the English word
"false." Lowercase is always used.
</p>
</li></ul><p>The object to be converted is normally passed as an argument, but if
omitted, the context node is converted instead.
</p></div>
<a name="ch22-30-fm2xml" /><blockquote><b>WARNING:</b> 
The XPath specification specifically notes that the
"string function is not intended for converting
numbers into strings for presentation to users." The
primary problem is that it's not localizable and not
attractive for large numbers. If you intend to show a string to an
end user, use the <tt class="literal">format-number( )</tt> function and/or
<tt class="literal">xsl:number</tt> element in XSLT instead.
</p>
</blockquote>

<a name="ch22-31-fm2xml" /><a name="IXT-22-240540" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b>string-length( )</b></font></td><td align="right"><i>
</i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><table width="515" border="0" cellpadding="5"><tr><td align="left"><pre>
<a name="IXT-22-240540" />number string-length(string s)
number string-length( )
</pre></td><td align="right" /></tr></table>The <tt class="literal">string-length( )</tt> function returns the number
of characters in its argument. For example,
<tt class="literal">string-length("Charm")</tt> returns 5. If the argument
is omitted, it returns the number of characters in the string value
of the context node. A nonstring may be passed to this function, in
which case it's automatically converted to a string,
as if by the <tt class="literal">string( )</tt> function, and that
string's length is returned.
</p></div>

<a name="ch22-32-fm2xml" /><a name="IXT-22-240541" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b>substring( )</b></font></td><td align="right"><i>
</i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><table width="515" border="0" cellpadding="5"><tr><td align="left"><pre>
<a name="IXT-22-240541" />string substring(string s, number index, number length)
string substring(string s, number index)
</pre></td><td align="right" /></tr></table>The <tt class="literal">substring( )</tt> function returns the substring of
<tt class="literal">s</tt> starting at <tt class="literal">index</tt> and
continuing for <tt class="literal">length</tt> characters. The first
character in the string is at position 1 (not 0, as in Java and
JavaScript). For example, <tt class="literal">substring('Charming</tt>
<tt class="literal">cat',</tt> <tt class="literal">1, 5)</tt> returns
<tt class="literal">"Charm"</tt>. If <tt class="literal">length</tt> is omitted,
then the substring to the end of the string is returned. For example,
<tt class="literal">substring('Charming</tt> <tt class="literal">cat',</tt>
<tt class="literal">10)</tt> returns <tt class="literal">"cat"</tt>. As usual,
any type of object may be passed to this function in place of the
normal argument, in which case it is automatically converted to the
correct type.
</p></div>

<a name="ch22-33-fm2xml" /><a name="IXT-22-240542" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b>substring-after( )</b></font></td><td align="right"><i>
</i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><table width="515" border="0" cellpadding="5"><tr><td align="left"><pre>
<a name="IXT-22-240542" />string substring-after(string s1, string s2)
</pre></td><td align="right" /></tr></table>The <tt class="literal">substring-after( )</tt> function returns the
substring of <tt class="literal">s1</tt> that follows the first occurrence
of <tt class="literal">s2</tt> in <tt class="literal">s1</tt>, or it returns the
empty string, if <tt class="literal">s1</tt> does not contain
<tt class="literal">s2</tt>. For example,
<tt class="literal">substring-after('Charming</tt> <tt class="literal">cat',</tt>
<tt class="literal">'harm')</tt> returns <tt class="literal">"ing cat"</tt>. The
test is case-sensitive. As usual, nonstring objects may be passed to
this function, in which case they're automatically
converted to strings as if by the <tt class="literal">string( )</tt>
function.
</p></div>

<a name="ch22-34-fm2xml" /><a name="IXT-22-240543" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b>substring-before( )</b></font></td><td align="right"><i>
</i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><table width="515" border="0" cellpadding="5"><tr><td align="left"><pre>
<a name="IXT-22-240543" />string substring-before(string s1, string s2)
</pre></td><td align="right" /></tr></table>The <tt class="literal">substring-before( )</tt> function returns the
substring of <tt class="literal">s1</tt> that precedes the first occurrence
of the <tt class="literal">s2</tt> in <tt class="literal">s1</tt>, or it returns
the empty string if <tt class="literal">s1</tt> does not contain
<tt class="literal">s2</tt>. For example,
<tt class="literal">substring-before('Charming</tt>
<tt class="literal">cat',</tt> <tt class="literal">'ing')</tt> returns
<tt class="literal">"Charm"</tt>. The test is case-sensitive. Nonstring
objects may be passed to this function, in which case
they're automatically converted to strings as if by
the <tt class="literal">string( )</tt> function.
</p></div>

<a name="ch22-35-fm2xml" /><a name="IXT-22-240544" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b>sum( )</b></font></td><td align="right"><i>
</i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><table width="515" border="0" cellpadding="5"><tr><td align="left"><pre>
<a name="IXT-22-240544" />number sum(node-set nodes)
</pre></td><td align="right" /></tr></table>The <tt class="literal">sum( )</tt> function converts each node in the
node-set to a number, as if by the <tt class="literal">number( )</tt>
function, then it adds up those numbers and returns the sum.
</p></div>

<a name="ch22-36-fm2xml" /><a name="IXT-22-240545" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b>translate( )</b></font></td><td align="right"><i>
</i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><table width="515" border="0" cellpadding="5"><tr><td align="left"><pre>
<a name="IXT-22-240545" />string translate(string s1, string s2, string s3)
</pre></td><td align="right" /></tr></table>The <tt class="literal">translate( )</tt> function looks in
<tt class="literal">s1</tt> for any characters found in
<tt class="literal">s2</tt>. It replaces each character with the
corresponding character from <tt class="literal">s3</tt>. For example,
<tt class="literal">translate("XML in a</tt> <tt class="literal">Nutshell",</tt>
<tt class="literal">"</tt> <tt class="literal">",</tt> <tt class="literal">"_")</tt>
replaces the spaces with underscores and returns
<tt class="literal">"XML_in_a_Nutshell"</tt>. <tt class="literal">translate("XML in a
Nutshell",</tt> <tt class="literal">"XMLN", "xmln")</tt> replaces the
uppercase letters with lowercase letters and returns <tt class="literal">"xml in
a nutshell"</tt>. If <tt class="literal">s3</tt> is shorter than
<tt class="literal">s2</tt>, then characters in <tt class="literal">s1</tt> and
<tt class="literal">s2</tt> with no corresponding character in
<tt class="literal">s3</tt> are simply deleted. For example,
<tt class="literal">translate("XML in a Nutshell",</tt>
<tt class="literal">"</tt> <tt class="literal">",</tt> <tt class="literal">"")</tt>
deletes the spaces and returns <tt class="literal">"XMLinaNutshell"</tt>.
Once again, nonstring objects may be passed to this function, in
which case they're automatically converted to
strings, as if by the <tt class="literal">string( )</tt> function.
</p></div>

<a name="ch22-37-fm2xml" /><a name="IXT-22-240546" /><a name="IXTR3-228" /><a name="IXTR3-229" /><a name="IXTR3-230" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b>true( )</b></font></td><td align="right"><i>
</i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><table width="515" border="0" cellpadding="5"><tr><td align="left"><pre>
<a name="IXT-22-240546" />boolean true( )
</pre></td><td align="right" /></tr></table>The <tt class="literal">true( )</tt> function simply returns true. It makes
up for the lack of Boolean <a name="IXTR3-228" /> <a name="IXTR3-229" />literals <a name="IXTR3-230" />in XPath.
</p></div>




<hr width="684" align="left" />
<div class="navbar"><table width="684" border="0"><tr><td align="left" valign="top" width="228"><a href="ch22_04.htm"><img src="../gifs/txtpreva.gif" alt="Previous" border="0" /></a></td><td align="center" valign="top" width="228"><a href="index.htm"><img src="../gifs/txthome.gif" alt="Home" border="0" /></a></td><td align="right" valign="top" width="228"><a href="ch23_01.htm"><img src="../gifs/txtnexta.gif" alt="Next" border="0" /></a></td></tr><tr><td align="left" valign="top" width="228">22.4. Predicates</td><td align="center" valign="top" width="228"><a href="index/index.htm"><img src="../gifs/index.gif" alt="Book Index" border="0" /></a></td><td align="right" valign="top" width="228">23. XSLT Reference</td></tr></table></div>
<hr width="684" align="left" />

<img src="../gifs/navbar.gif" usemap="#library-map" border="0" alt="Library Navigation Links" />
<p><p><font size="-1"><a href="copyrght.htm">Copyright &copy; 2002</a> O'Reilly &amp; Associates. All rights reserved.</font></p>

<map name="library-map">
<area shape="rect" coords="0,0,85,93" href="../index.htm"><area shape="rect" coords="85,0,180,98" href="../sax2/index.htm"><area shape="rect" coords="182,-1,261,100" href="index.htm"><area shape="rect" coords="263,1,384,96" href="../jxml/index.htm"><area shape="rect" coords="386,1,463,100" href="../jxslt/index.htm"><area shape="rect" coords="466,1,533,112" href="../xslt/index.htm"><area shape="rect" coords="535,-1,610,108" href="../schema/index.htm"><area shape="rect" coords="613,1,696,121" href="../pxml/index.htm">
</map>

</body></html>