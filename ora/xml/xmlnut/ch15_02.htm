<html><head><title>Developing Data-Oriented XML Formats (XML in a Nutshell, 2nd Edition)</title><link rel="stylesheet" type="text/css" href="../style/style1.css" />

<meta name="DC.Creator" content="Elliotte Rusty Harold and W. Scott Means" /><meta name="DC.Format" content="text/xml" scheme="MIME" /><meta name="DC.Language" content="en-US" /><meta name="DC.Publisher" content="O'Reilly &amp; Associates, Inc." /><meta name="DC.Source" scheme="ISBN" content="0-596-00292-0" /><meta name="DC.Subject.Keyword" content="stuff" /><meta name="DC.Title" content="XML in a Nutshell, 2nd Edition" /><meta name="DC.Type" content="Text.Monograph" />

</head><body bgcolor="#ffffff">

<img src="gifs/smbanner.gif" usemap="#banner-map" border="0" alt="Book Home" /><map name="banner-map"><area shape="rect" coords="1,-2,616,66" href="index.htm" alt="XML in a Nutshell" /><area shape="rect" coords="629,-11,726,25" href="jobjects/fsearch.htm" alt="Search this book" /></map>

<div class="navbar"><table width="684" border="0"><tr><td align="left" valign="top" width="228"><a href="ch15_01.htm"><img src="../gifs/txtpreva.gif" alt="Previous" border="0" /></a></td><td align="center" valign="top" width="228" /><td align="right" valign="top" width="228"><a href="ch15_03.htm"><img src="../gifs/txtnexta.gif" alt="Next" border="0" /></a></td></tr></table></div>



<h2 class="sect1">15.2. Developing Data-Oriented XML Formats</h2>

<p>Despite the mature status of most of XML's core
technologies, XML application development is only now being
recognized as a distinct discipline. Many architects and XML
developers are attempting to turn existing design methodologies (like
UML) and design patterns to the problem of constructing markup
languages, but a widely accepted design process for creating XML
applications still does not exist.
</p>



<a name="ch15-13-fm2xml" /><blockquote><b>TIP:</b> 
The term "XML application" is often
used in XML contexts to describe an XML vocabulary for a particular
domain rather than the software used to process it. This may seem a
little strange to developers used to creating software applications,
but it makes sense if you think about integrating a software
application with an XML application, for instance. </p>
</blockquote>


<p>XML
applications can range in scope from a proprietary vocabulary used to
store a single computer program's configuration
settings to an industry-wide standard for storing consumer loan
applications. Although the specifics and sometimes the sequence will
vary, the basic steps involved in creating a new XML application are
as follows: </p> <ul><li> <p>Determine the
requirements of the application.</p> </li><li>
<p>Look for existing applications that might meet those
requirements.</p> </li><li> <p>Choose a validation
model.</p> </li><li> <p>Decide on a namespace
structure.</p> </li><li> <p>Plan for
expansion.</p> </li><li> <p>Consider the impact of
the design on application developers.</p> </li><li>
<p>Determine how old and new versions of the application will
coexist.</p> </li></ul> <p>The following
sections explore each of these steps in greater depth.</p>


<a name="xmlnut2-CHP-15-SECT-2.1" /><div class="sect2">
<h3 class="sect2">15.2.1. Basic Application Requirements</h3>

<p>The first step in designing a new XML application is like the first
step in many design methodologies. Before the application can be
designed, it is important to determine exactly what needs the
application will fulfill. Some basic questions must be answered
before proceeding.
</p>

<a name="xmlnut2-CHP-15-SECT-2.1.1" /><div class="sect3">
<h3 class="sect3">15.2.1.1. Where and how will new documents be created?</h3>

<p>Documents that will be created automatically by a software
application or database server will be structured differently than
those that need to be created by humans using an XML editor. While
software wouldn't have a problem generating 100
elements with intricate attributes and cross-references, a human
being probably would.
</p>

<p>If you already have an application or a legacy format to which
you're adding XML, you may already have data
structures you need to map to the XML. Depending on the other
requirements for the application, you may be able to base your XML
format on the existing structures. If you're
starting from scratch or need to share the information with other
programs that don't share those structures, you
probably need to look at the data itself and build the application
creating the XML around the information.
</p>

</div>

<a name="xmlnut2-CHP-15-SECT-2.1.2" /><div class="sect3">
<h3 class="sect3">15.2.1.2. How complex will the document be?</h3>

<p>Obviously the complexity of the data that will be modeled by the XML
document has some impact on how the application will be designed. A
document containing a few, simple element types is much easier to
describe than one that contains dozens of different elements with
complex data type requirements. The complexity of an application will
affect what type of validation should be used and how documents will
be created and processed.
</p>

</div>

<a name="xmlnut2-CHP-15-SECT-2.1.3" /><div class="sect3">
<h3 class="sect3">15.2.1.3. How will documents be consumed?</h3>

<p>If the XML documents using this vocabulary will only pass between
similar programs, it may make sense to model the XML documents
directly on the internal structures of the programs without much
concern for how easy or difficult that makes using the document for
other programs or for humans. If there's a
substantial chance that this information needs to be reused by other
applications, read by humans (for debugging purposes or for direct
access to information), or will be stored for unknown future use, it
probably makes sense to ensure that the document is easy to read and
process even if that makes creating the document a slightly more
difficult task.
</p>

</div>

<a name="xmlnut2-CHP-15-SECT-2.1.4" /><div class="sect3">
<h3 class="sect3">15.2.1.4. How widely will the resulting documents be distributed?</h3>

<p>Generally, the audience of a new XML application is known in advance.
Some documents are created and read by the same application without
ever leaving a single system. Other documents will be used to
transmit important business information between the IT systems of
different organizations. Some documents are created for publication
on the Web to be viewed by hundreds or even thousands of people
around the world. XML formats that will be shared widely typically
need comprehensive documentation made readily available to potential
users. Formal validation models may also be more important for
documents that are shared outside of a small community of trusted
participants.
</p>

</div>

<a name="xmlnut2-CHP-15-SECT-2.1.5" /><div class="sect3">
<h3 class="sect3">15.2.1.5. Will others need to incorporate this document structure into their own applications?</h3>

<p>Some XML applications are never intended for use and are only useful
when incorporated into other XML applications. Others are useful
standards on their own but are also suitable for inclusion in other
applications. A few different methods that might be used to
incorporate markup from one application into another:
</p>

<dl>
<dt><i>Simple inclusion </i></dt>
<dd>
Markup from one application is included within a container element of
another application. Embedding XHTML content in another document is a
common example of this.
</p>
</dd>


<dt><i>Mixed element inclusion</i></dt>
<dd>
Markup from one application is mixed inline with content from another
application. This can complicate validation and makes the including
application sensitive to changes in the included application. The
Global Document Annotation (GDA) Initiative application provides an
example of this type of application (<a href="../../../../../../www.oasis-open.org/cover/gda.html">http://www.oasis-open.org/cover/gda.html</a>).
</p>
</dd>


<dt><i>Mixed attribute inclusion</i></dt>
<dd>
Some XML applications are comprised of attributes that may be
attached to elements from the host application. XML Linking (XLink)
is a prime example of this type of application, defining only
attributes that may be used in other vocabularies.
</p>
</dd>

</dl>

<p>Answering these questions will provide a basic set of requirements to
keep in mind when deciding whether to build a new application,
acquire an existing application, or some combination of the two.
</p>

</div>
</div>
<a name="xmlnut2-CHP-15-SECT-2.2" /><div class="sect2">
<h3 class="sect2">15.2.2. Investigating Available Options</h3>

<p>Before committing to designing and implementing a new XML
application, it is a good idea to take a few minutes to search the
Internet for prior art. Since the first version of the XML
recommendation was released in 1998, thousands of new XML
applications have been developed and released around the world.
Although the quality and completeness of these applications vary
greatly, it is often more efficient to start with an existing DTD or
schema (however imperfect) rather than starting from scratch. In some
cases supporting software is already available, potentially saving
software development work as well.
</p>

<a name="xmlnut2-CHP-15-SECT-2.2.1" /><div class="sect3">
<h3 class="sect3">15.2.2.1. XML vocabulary development</h3>

<p>It is also possible that the work your application needs to do may
fit into an existing generic framework, such as XML-RPC or SOAP. If
this is the case, you may or may not need to create your own XML
vocabulary. XML-RPC only uses its own vocabulary, while different
styles of SOAP may reduce the amount of work your vocabulary needs to
perform.
</p>

<p>There are several XML application registries available on the
Internet, and a good
"metadirectory" of DTD and schema
directories can be found on
O'Reilly's XML site, <a href="../../../../../../www.xml.com/">http://www.xml.com</a>. These repositories list
applications for various disciplines and topics with varying
licensing requirements. The XML Cover Pages, at <a href="../../../../../../xml.coverpages.org/">http://xml.coverpages.org</a>, also provide
information about a wide variety of XML-related vocabularies,
software, and projects. The search for existing applications may also
find potential collaborators, potentially helpful if the XML format
is intended for use across multiple organizations.
</p>

</div>
</div>
<a name="xmlnut2-CHP-15-SECT-2.3" /><div class="sect2">
<h3 class="sect2">15.2.3. Planning for Growth</h3>

<p>Some applications may not need to evolve over time (a vocabulary
describing basic DNA strands, for instance), but some thought should
be given as to how users of the application would be able to extend
it to meet their own needs. In DTD-based applications, this is done
by providing parameter entity
"hooks" into the document type
definition, which could either be referenced or redefined by an
instance document. Take the simple DTD shown in <a href="ch15_02.htm">Example 15-1</a>.
</p>

<a name="xmlnut2-CHP-15-EX-1" /><div class="example">
<h4 class="objtitle">Example 15-1. extensible.dtd </h4>
<blockquote><pre class="code">&lt;!ENTITY % varContent "(EMPTY)"&gt;
&lt;!ELEMENT variable %varContent;&gt;</pre></blockquote>
</div>

<p>This fragment is not a very interesting application by itself, but
since it provides the capability for extension, the document author
can make it more useful by providing an alternative entity
declaration for the content of the <tt class="literal">variable</tt>
element, as shown in <a href="ch15_02.htm">Example 15-2</a>.
</p>

<a name="xmlnut2-CHP-15-EX-2" /><div class="example">
<h4 class="objtitle">Example 15-2. Document extending extensible.dtd</h4>
<blockquote><pre class="code">&lt;?xml version="1.0"?&gt;
&lt;!DOCTYPE variable SYSTEM "extensible.dtd"
[
&lt;!ENTITY % varContent "(#PCDATA)"&gt;
]&gt;
&lt;variable&gt;Useful content.&lt;/variable&gt;</pre></blockquote>
</div>

<p>The XML schema language provides more comprehensive and controlled
support for extending markup using the <tt class="literal">extension</tt>,
<tt class="literal">include</tt>, <tt class="literal">redefine</tt>, and
<tt class="literal">import</tt> elements. These two mechanisms can be used
in conjunction to create very powerful, customizable application
frameworks.
</p>

</div>
<a name="xmlnut2-CHP-15-SECT-2.4" /><div class="sect2">
<h3 class="sect2">15.2.4. Choosing a Validation Method</h3>

<p>The first major implementation decision of designing a new XML
application is what type of validation (if any) will be performed on
instance documents. In many cases, prototyping a set of instance
documents is the best way to determine what level of validation must
be performed.
</p>

<p>If your application is simply saving some internal program state
between invocations (such as window positions or menu configurations
within a GUI application), going to the trouble of building a schema
and validating documents may not be necessary. Since these
configuration documents will always be written and read by the same
program, the structure is fixed by the program logic itself. The only
conceivable purpose for validating a document like this would be to
detect file corruption, which would be likely to generate a
well-formedness error in any case.
</p>

<p>An example of an application that would require some level of
validation is where XML documents are exchanged between different
related systems that are not maintained by the same development
organization. In this case, a DTD or schema can serve as a definitive
blueprint to ensure that all systems are sending and receiving
information in the expected formats.
</p>

<p>The most rigorous type of validation is required when developing a
new XML standard that will be implemented independently by many
different vendors without any explicit control or restrictions. For
example, the XHTML 1.1 standard is enforced by a very explict and
well-documented DTD that is hosted by the W3C. This well-known public
DTD allows tool and application vendors to ensure that their systems
will interoperate as long as instance documents conform to the
standard.
</p>

<p>After determining the level of validation for a particular
application, it must be decided what validation language will be
used. The DTD mechanism of XML 1.0 is still the most widely supported
standard, although it lacks the expressive power that is required by
sophisticated data-oriented applications. The W3C XML schema
recommendation provides very rich type and content model expression,
but brings with it a commensurate level of complexity.
</p>

<p>Developers can also provide both DTDs and XML schemas, or even
combine them with other vocabularies for describing XML structures,
notably RELAX NG (<a href="../../../../../../www.oasis-open.org/committees/relax-ng/">http://www.oasis-open.org/committees/relax-ng/</a>
) and Schematron (<a href="../../../../../../www.ascc.net/xml/resource/schematron/schematron.html">http://www.ascc.net/xml/resource/schematron/schematron.html</a>).RDDL, described in <a href="ch14_01.htm">Chapter 14</a>,
provides a set of tools for supporting and explaining such
combinations for formats that use namespaces.
</p>

</div>
<a name="xmlnut2-CHP-15-SECT-2.5" /><div class="sect2">
<h3 class="sect2">15.2.5. Namespace Support</h3>

<p>Virtually every XML application that will be shared with the public
should include at least a basic level of namespace support. Even if
there are no current plans to release a particular document
application to the outside world, it is much simpler to implement
namespaces from the ground up than it is to retrofit an existing
application with a namespace.
</p>

<p>Namespaces affect everything from how the document is validated to
how it is transformed (using a stylesheet language such as XSLT).
Here are a few namespace issues to consider before selecting a URI
and starting work.
</p>

<a name="xmlnut2-CHP-15-SECT-2.5.1" /><div class="sect3">
<h3 class="sect3">15.2.5.1. Will instance documents need to be validated using a DTD?</h3>

<p>If so, some planning of how namespace prefixes will be assigned and
incorporated into the DTD is necessary. DTDs are not namespace aware,
so strategic use of parameter entities can make modification of
prefixes much simpler down the road.
</p>

</div>

<a name="xmlnut2-CHP-15-SECT-2.5.2" /><div class="sect3">
<h3 class="sect3">15.2.5.2. Will markup from this application need to be embedded in other applications?</h3>

<p>If so, some thought needs to be given to potential tag-name
collisions. The safest approach is to force every element from your
application to be explicitly qualified with a namespace. This can be
done within an XML schema by setting the
<tt class="literal">elementFormDefault</tt> and
<tt class="literal">attributeFormDefault</tt> attributes of the
<tt class="literal">schema</tt> element to <tt class="literal">qualified</tt>.
</p>

</div>

<a name="xmlnut2-CHP-15-SECT-2.5.3" /><div class="sect3">
<h3 class="sect3">15.2.5.3. Are there legacy documents to support?</h3>

<p>If an application will be used to validate existing XML documents,
some thought should be given to the effort involved in migrating
them. In most cases, simply adding a default namespace declaration
will be sufficient. If the new application includes markup from
different namespaces, however, some thought must be given to how to
update old documents.
</p>

</div>
</div>
<a name="xmlnut2-CHP-15-SECT-2.6" /><div class="sect2">
<h3 class="sect2">15.2.6. Maintaining Compatibility</h3>

<p>Maintaining backward compatibility with existing documents is a
primary concern for XML applications that are widely used by diverse
audiences. The difficulties faced by standards organizations when
dealing with the task of updating a popular application (such as
HTML) are formidable. While most applications may not become as
widespread as HTML, some thought should be given in advance as to how
new versions of a schema or DTD will interact with existing
documents.
</p>

<p>One possible approach to maintaining backward compatibility is to
create a new, distinct namespace that will be used to mark new
element declarations or perhaps to change the namespace of the entire
document to reflect a substantially changed version. Another possible
strategy is only to <em class="emphasis">extend</em></tt> existing applications
without removing prior functionality. The most important thing is to
ensure that each instance document for an application has some
readily identifiable marker that associates it with a particular
version of a DTD or schema. The good news is that the highly
transformable nature of XML makes it very easy to migrate old
documents to new document formats.
</p>

<p>Removing functionality is possible, but frequently difficult, once a
format is widely used. Deprecating functionality--marking it
as a likely target for removal a version or several before it is
actually removed--is one approach. While deprecated features
often linger in implementations long after they've
been targeted for removals, they change the expectations of
developers building new applications and make it possible, if slow,
to remove functionality.
</p>

</div>


<hr width="684" align="left" />
<div class="navbar"><table width="684" border="0"><tr><td align="left" valign="top" width="228"><a href="ch15_01.htm"><img src="../gifs/txtpreva.gif" alt="Previous" border="0" /></a></td><td align="center" valign="top" width="228"><a href="index.htm"><img src="../gifs/txthome.gif" alt="Home" border="0" /></a></td><td align="right" valign="top" width="228"><a href="ch15_03.htm"><img src="../gifs/txtnexta.gif" alt="Next" border="0" /></a></td></tr><tr><td align="left" valign="top" width="228">15. XML as a Data Format</td><td align="center" valign="top" width="228"><a href="index/index.htm"><img src="../gifs/index.gif" alt="Book Index" border="0" /></a></td><td align="right" valign="top" width="228">15.3. Sharing Your XML format</td></tr></table></div>
<hr width="684" align="left" />

<img src="../gifs/navbar.gif" usemap="#library-map" border="0" alt="Library Navigation Links" />
<p><p><font size="-1"><a href="copyrght.htm">Copyright &copy; 2002</a> O'Reilly &amp; Associates. All rights reserved.</font></p>

<map name="library-map">
<area shape="rect" coords="0,0,85,93" href="../index.htm"><area shape="rect" coords="85,0,180,98" href="../sax2/index.htm"><area shape="rect" coords="182,-1,261,100" href="index.htm"><area shape="rect" coords="263,1,384,96" href="../jxml/index.htm"><area shape="rect" coords="386,1,463,100" href="../jxslt/index.htm"><area shape="rect" coords="466,1,533,112" href="../xslt/index.htm"><area shape="rect" coords="535,-1,610,108" href="../schema/index.htm"><area shape="rect" coords="613,1,696,121" href="../pxml/index.htm">
</map>

</body></html>