<html><head><title>Unicode (XML in a Nutshell, 2nd Edition)</title><link rel="stylesheet" type="text/css" href="../style/style1.css" />

<meta name="DC.Creator" content="Elliotte Rusty Harold and W. Scott Means" /><meta name="DC.Format" content="text/xml" scheme="MIME" /><meta name="DC.Language" content="en-US" /><meta name="DC.Publisher" content="O'Reilly &amp; Associates, Inc." /><meta name="DC.Source" scheme="ISBN" content="0-596-00292-0" /><meta name="DC.Subject.Keyword" content="stuff" /><meta name="DC.Title" content="XML in a Nutshell, 2nd Edition" /><meta name="DC.Type" content="Text.Monograph" />

</head><body bgcolor="#ffffff">

<img src="gifs/smbanner.gif" usemap="#banner-map" border="0" alt="Book Home" /><map name="banner-map"><area shape="rect" coords="1,-2,616,66" href="index.htm" alt="XML in a Nutshell" /><area shape="rect" coords="629,-11,726,25" href="jobjects/fsearch.htm" alt="Search this book" /></map>

<div class="navbar"><table width="684" border="0"><tr><td align="left" valign="top" width="228"><a href="ch05_04.htm"><img src="../gifs/txtpreva.gif" alt="Previous" border="0" /></a></td><td align="center" valign="top" width="228" /><td align="right" valign="top" width="228"><a href="ch05_06.htm"><img src="../gifs/txtnexta.gif" alt="Next" border="0" /></a></td></tr></table></div>



<h2 class="sect1">5.5. Unicode</h2>

<p>Unicode <a name="xmlnut2-IDXTERM-444" />is an
international standard character set that can be used to write
documents in almost any language you're likely to
speak, learn, or encounter in your lifetime, barring alien abduction.
Version 3.2, the current version as of May, 2002, contains 95,156
characters from most of Earth's living languages as
well as several dead ones. Unicode easily covers the Latin alphabet,
in which most of this book is written. Unicode also covers
Greek-derived scripts, including ancient and modern Greek and the
Cyrillic scripts used in Serbia and much of the former Soviet Union.
Unicode covers several ideographic scripts, including the Han
character set used for Chinese and Japanese, the Korean Hangul
syllabary, and phonetic representations of these languages, including
Katakana and Hiragana. It covers the right-to-left Arabic and Hebrew
scripts. It covers various scripts native to the Indian subcontinent,
including Devanagari, Thai, Bengali, Tibetan, and many more. And
that's still less than half of the scripts in
Unicode 3.1.1. Probably less than one person in a thousand today
speaks a language that cannot be reasonably represented in Unicode.
In the future, Unicode will add still more characters, making this
fraction even smaller. Unicode can potentially hold more than a
million characters, but no one is willing to say in public where they
think most of the remaining million characters will come
from.<a href="#FOOTNOTE-4">[4]</a>
</p><blockquote class="footnote"> <a name="FOOTNOTE-4" /><p> [4]Privately, some developers are willing to admit
that they're preparing for a day when
we're part of a Galactic Federation of thousands of
intelligent species. </p> </blockquote>

<p>The Unicode character set assigns characters to code points, that is,
numbers. These numbers can then be encoded in a variety of schemes,
including:
</p>

<ul><li>
<p>UCS-2</p>
</li><li>
<p>UCS-4</p>
</li><li>
<p>UTF-8</p>
</li><li>
<p>UTF-16</p>
</li></ul>
<a name="xmlnut2-CHP-5-SECT-5.1" /><div class="sect2">
<h3 class="sect2">5.5.1. UCS-2 and UTF-16</h3>

<p><a name="IXT-5-238886" />
<a name="IXT-5-238887" />UCS-2, also known as ISO-10646-UCS-2,
is perhaps the most natural encoding of Unicode. It represents each
character as a 2-byte, unsigned integer between 0 and 65,535. Thus
the capital letter <em class="emphasis">A</em>, code point 65 in Unicode,
is represented by the 2 bytes 00 and 41 (in hexadecimal). The capital
letter <em class="emphasis">B</em>, code point 66, is represented by the 2
bytes 00 and 42. The 2 bytes 03 and A3 represent the capital Greek
letter <img src="figs/U03C3.gif" alt="Figure " />, code point 931.</p>
<p>UCS-2 comes in two variations, <a name="IXT-5-238888" /> <a name="IXT-5-238889" />big endian and little endian. In
big-endian UCS-2, the most significant byte of the character comes
first. In little-endian UCS-2, the order is reversed. Thus, in
big-endian UCS-2, the letter <em class="emphasis">A</em> is
#x0041.<a href="#FOOTNOTE-5">[5]</a> In
little-endian UCS-2, the bytes are swapped, and
<em class="emphasis">A</em> is #x4100. In big-endian UCS-2, the letter
<em class="emphasis">B</em> is #x0042; in little-endian UCS-2,
it's #x4200. In big-endian UCS-2, the letter <img src="figs/U03C3.gif" alt="Figure " /> is #x03A3; in little-endian UCS-2, it's #xA303. In this book we use big-endian notation, but parsers cannot assume this. They must be able to determine the endianness from the document itself.</p><blockquote class="footnote"> <a name="FOOTNOTE-5" /><p> [5]For reasons that will become apparent
shortly, this book has adopted the convention that
<tt class="literal">#x</tt> precedes hexadecimal numbers. Every two
hexadecimal digits map to one byte.</p> </blockquote>
<p>To distinguish between big-endian and little-endian UCS-2, a document
encoded in UCS-2 customarily begins with Unicode character
<a name="IXT-5-238890" />#xFEFF, the zero-width nonbreaking
space, more commonly called the <em class="emphasis">byte-order
mark</em><a name="IXT-5-238891" />. This character has the advantage of being
invisible. Furthermore, if its bytes are swapped, the resulting
#xFFFE character doesn't actually exist. Thus, a
program can look at the first two bytes of a UCS-2 document and tell
immediately whether the document is big endian, depending on whether
those bytes are #xFEFF or #xFFFE.
</p>

<p>UCS-2 has three major disadvantages, however:</p>

<ul><li>
<p>Files containing mostly Latin text are about twice as large in UCS-2
as they are in a single-byte character set, such as ASCII or Latin-1.
</p>
</li><li>
<p>UCS-2 is not backward or forward compatible with ASCII. Tools that
are accustomed to single-byte character sets often
can't process a UCS-2 file in a reasonable way, even
if the file only contains characters from the ASCII character set.
For instance, a program written in C that expects the zero byte to
terminate strings will choke on a UCS-2 file containing mostly
English text because almost every other byte is zero.
</p>
</li><li>
<p>UCS-2 is limited to 65,536 characters.</p>
</li></ul>
<p>The last problem isn't so important in practice,
since the first 65,536 code points of Unicode nonetheless manage to
cover most people's needs except for dead languages
like Ugaritic and fictional scripts like Tengwar. Mathematical
symbols are also encountering these issues. Unicode does, however,
provide a means of representing code points beyond 65,535 by
recognizing certain two-byte sequences as half of a surrogate pair. A
Unicode document that uses UCS-2 plus surrogate pairs is said to be
in the <a name="IXT-5-238892" />UTF-16 encoding.
</p>

<p>The other two problems, however, are more likely to affect most
developers. UTF-8 is an alternative encoding for Unicode that
addresses both.
</p>

</div>
<a name="xmlnut2-CHP-5-SECT-5.2" /><div class="sect2">
<h3 class="sect2">5.5.2. UTF-8</h3>

<p><a name="IXT-5-238893" />UTF-8 is a variable-length encoding of
Unicode. Characters 0 through 127, that is, the ASCII character set,
are encoded in 1 byte each, exactly as they would be in ASCII. In
ASCII, the byte with value 65 represents the letter
<em class="emphasis">A</em>. In UTF-8, the byte with the value 65 also
represents the letter <em class="emphasis">A</em>. There is a one-to-one
identity mapping from ASCII characters to UTF-8 bytes. Thus, pure
ASCII files are also acceptable UTF-8 files.
</p>

<p>UTF-8 represents the characters from 128 to 2047, a range that covers
the most common non-ideographic scripts, in two bytes each.
Characters from 2048 to 65,535, mostly from
<a name="IXT-5-238894" />Chinese,
<a name="IXT-5-238895" />Japanese, and
<a name="IXT-5-238896" />Korean, are represented in three
bytes each. Characters with code points above 65,535 are represented
in four bytes each. For a file that's mostly Latin
text, this effectively halves the file size from what it would be in
UCS-2. However, for a file that's primarily
Japanese, Chinese, or Korean, the file size can grow by 50%. For most
other living languages, the file size is close to the same.
</p>

<p>UTF-8 is probably the most broadly supported encoding of Unicode. For
instance, it's how Java <em class="filename">.class</em>
files store strings; it's the native encoding of the
BeOS, and it's the default encoding an XML processor
assumes unless told otherwise by a byte-order mark or an encoding
declaration. Chances are pretty good that if a program tells you
it's saving Unicode, it's really
saving <a name="IXTR3-19" />UTF-8. 
</p>

</div>


<hr width="684" align="left" />
<div class="navbar"><table width="684" border="0"><tr><td align="left" valign="top" width="228"><a href="ch05_04.htm"><img src="../gifs/txtpreva.gif" alt="Previous" border="0" /></a></td><td align="center" valign="top" width="228"><a href="index.htm"><img src="../gifs/txthome.gif" alt="Home" border="0" /></a></td><td align="right" valign="top" width="228"><a href="ch05_06.htm"><img src="../gifs/txtnexta.gif" alt="Next" border="0" /></a></td></tr><tr><td align="left" valign="top" width="228">5.4. XML-Defined Character Sets</td><td align="center" valign="top" width="228"><a href="index/index.htm"><img src="../gifs/index.gif" alt="Book Index" border="0" /></a></td><td align="right" valign="top" width="228">5.6. ISO Character Sets</td></tr></table></div>
<hr width="684" align="left" />

<img src="../gifs/navbar.gif" usemap="#library-map" border="0" alt="Library Navigation Links" />
<p><p><font size="-1"><a href="copyrght.htm">Copyright &copy; 2002</a> O'Reilly &amp; Associates. All rights reserved.</font></p>

<map name="library-map">
<area shape="rect" coords="0,0,85,93" href="../index.htm"><area shape="rect" coords="85,0,180,98" href="../sax2/index.htm"><area shape="rect" coords="182,-1,261,100" href="index.htm"><area shape="rect" coords="263,1,384,96" href="../jxml/index.htm"><area shape="rect" coords="386,1,463,100" href="../jxslt/index.htm"><area shape="rect" coords="466,1,533,112" href="../xslt/index.htm"><area shape="rect" coords="535,-1,610,108" href="../schema/index.htm"><area shape="rect" coords="613,1,696,121" href="../pxml/index.htm">
</map>

</body></html>