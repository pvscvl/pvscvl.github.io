<html><head><title>Creating More Building Blocks Using Object-Oriented Features (XML Schema)</title><link rel="stylesheet" type="text/css" href="../style/style1.css" />

<meta name="DC.Creator" content="Eric van der Vlist" /><meta name="DC.Format" content="text/xml" scheme="MIME" /><meta name="DC.Language" content="en-US" /><meta name="DC.Publisher" content="O'Reilly &amp; Associates, Inc." /><meta name="DC.Source" scheme="ISBN" content="0596002521L" /><meta name="DC.Subject.Keyword" content="stuff" /><meta name="DC.Title" content="XML Schema" /><meta name="DC.Type" content="Text.Monograph" />

</head><body bgcolor="#ffffff">

<img src="gifs/smbanner.gif" usemap="#banner-map" border="0" alt="Book Home" /><map name="banner-map"><area shape="rect" coords="1,-2,616,66" href="index.htm" alt="XML Schema" /><area shape="rect" coords="629,-11,726,25" href="jobjects/fsearch.htm" alt="Search this book" /></map>

<div class="navbar"><table width="684" border="0"><tr><td align="left" valign="top" width="228"><a href="ch11_04.htm"><img src="../gifs/txtpreva.gif" alt="Previous" border="0" /></a></td><td align="center" valign="top" width="228" /><td align="right" valign="top" width="228"><a href="ch12_02.htm"><img src="../gifs/txtnexta.gif" alt="Next" border="0" /></a></td></tr></table></div>


<h1 class="chapter">Chapter 12. Creating More Building Blocks Using Object-Oriented Features</h1>
<div class="htmltoc"><h4 class="tochead">Contents:</h4>
  <p> <a href="#xmlschema-CHP-12-SECT-1">Substitution Groups</a><br />
<a href="ch12_02.htm">Controlling Derivations</a><br /></p></div>

<p>We have already seen many features that have been borrowed from
object-oriented languages. In this chapter, we will see substitution
groups (similar to subclasses), abstract elements and datatypes
(similar to abstract classes), and final datatypes (similar to final
classes).
</p>
<div class="sect1"><a name="xmlschema-CHP-12-SECT-1" /></a>
<h2 class="sect1">12.1. Substitution Groups</h2>

<p>In <a name="INDEX-906" /></a>
<a name="INDEX-907" /></a>many cases, a
vocabulary needs the ability to accept a variety of different content
models. We have two options: we can try to do it using a single
generic element name, or we can define a schema smart enough to deal
with the possible content model. Since we cannot define multiple
different content models for the same element (because of the
Consistent Declaration Rule), we can either use
<tt class="literal">xsi:type</tt> attributes in the instance documents, or
we can define a content model wide enough to accommodate all the
possibilities. Such a model would likely be wide enough to also
accept combinations that we do not want.
</p>

<p>The easiest solution for accommodating different types with W3C XML
Schema is to use a different element name for each case. We already
saw that the <tt class="literal"><a href="ch15_01.htm">xs:choice(outside a group)</a></tt> compositor allows us to
build such constructs where a node in an instance document can accept
an element chosen in a list. However, this list is fixed in the
complex type definition. We have also seen that this list cannot be
extended, since the rules for complex type derivations by extension
do not allow it. Substitution groups offer a flexible way to create
<a name="INDEX-908" /></a><tt class="literal"><a href="ch15_01.htm">xs:choice(outside a group)</a></tt>
compositors out of single element definitions or references, as well
as a way to extend them. More simply, they are lists of elements that
can be used in place of each other within documents. One important
thing to note before we start, though, is that substitution groups
apply only to <a name="INDEX-909" /></a>global elements.
</p>

<p>Substitution groups can be seen as extensible element groups. Before
introducing them, let's look again at the
"traditional" element groups to
highlight the differences between these two concepts. Since the
Recommendation is especially fuzzy on the extensibility of element
groups and the restriction of substitution groups, I have chosen to
present a conservative interpretation, which should be free of
interoperability issues. I will discuss the different interpretations
at the end of the chapter.
</p>

<a name="xmlschema-CHP-12-SECT-1.1" /></a><div class="sect2">
<h3 class="sect2">12.1.1. Using a "Traditional" Group</h3>

<p>Let's come back to the definition of a name. (After
all, universal names are one of the most controversial subjects in
normalization spheres, so it's no surprise that we
can use them as examples!) Instead of playing with datatypes, we may
just use different element names, and say that a name is either a
simple name, such as:
</p>

<blockquote><pre class="code">&lt;simple-name&gt;
  Snoopy
&lt;/simple-name&gt;</pre></blockquote>

<p>or a full name, such as:</p>

<blockquote><pre class="code">&lt;full-name&gt;
  &lt;last&gt;
    Schulz
  &lt;/last&gt;
  &lt;first&gt;
    Charles
  &lt;/first&gt;
  &lt;middle&gt;
    M
  &lt;/middle&gt;
&lt;/full-name&gt;</pre></blockquote>

<p>We have already seen how we can define a flexible schema that will
match these documents. A good idea is to create a group with a <tt class="literal">xs:choice</tt> compositor that allows one of those two
elements and can be reused in all the elements in which a name needs
to be included. The logical steps are to define the two elements
(<tt class="literal">full</tt> <tt class="literal">name</tt> and
<tt class="literal">simple</tt> <tt class="literal">name</tt>), to create a
group, and to use it in the definition of the
<tt class="literal">author</tt> and <tt class="literal">character</tt> elements:
</p>

<blockquote><pre class="code">&lt;xs:element name="full-name"&gt;
  &lt;xs:complexType&gt;
    &lt;xs:all&gt;
      &lt;xs:element name="first" type="string32" minOccurs="0"/&gt;
      &lt;xs:element name="middle" type="string32" minOccurs="0"/&gt;
      &lt;xs:element name="last" type="string32"/&gt;
    &lt;/xs:all&gt;
  &lt;/xs:complexType&gt;
&lt;/xs:element&gt;
          
&lt;xs:element name="simple-name" type="string32"/&gt;
          
&lt;xs:group name="name"&gt;
  &lt;xs:choice&gt;
    &lt;xs:element ref="simple-name"/&gt;
    &lt;xs:element ref="full-name"/&gt;
  &lt;/xs:choice&gt;
&lt;/xs:group&gt;
          
&lt;xs:element name="author"&gt;
  &lt;xs:complexType&gt;
    &lt;xs:sequence&gt;
      &lt;xs:group ref="name"/&gt;
      &lt;xs:element ref="born"/&gt;
      &lt;xs:element ref="dead" minOccurs="0"/&gt;
    &lt;/xs:sequence&gt;
    &lt;xs:attribute ref="id"/&gt;
  &lt;/xs:complexType&gt;
&lt;/xs:element&gt;
          
&lt;xs:element name="character"&gt;
  &lt;xs:complexType&gt;
    &lt;xs:sequence&gt;
      &lt;xs:group ref="name"/&gt;
      &lt;xs:element ref="born"/&gt;
      &lt;xs:element ref="qualification"/&gt;
    &lt;/xs:sequence&gt;
    &lt;xs:attribute ref="id"/&gt;
  &lt;/xs:complexType&gt;
&lt;/xs:element&gt;</pre></blockquote>

<p>Note <a name="INDEX-910" /></a>that we are able to use
<a name="INDEX-911" /></a><tt class="literal">xs:all</tt> in
this case because the elements involved are isolated in the
<tt class="literal">full name</tt> element. This is also a good time to
mention that <tt class="literal">xs:all</tt> doesn't
mean the order is not significant, but only that all the combinations
are valid. In this case, writing the following:
</p>

<blockquote><pre class="code">&lt;full-name&gt;
  &lt;first&gt;
    Eric
  &lt;/first&gt;
  &lt;last&gt;
    van der Vlist
  &lt;/last&gt;
&lt;/full-name&gt;</pre></blockquote>

<p>or:</p>

<blockquote><pre class="code">&lt;full-name&gt;
  &lt;last&gt;
    van der Vlist
  &lt;/last&gt;
  &lt;first&gt;
    Eric
  &lt;/first&gt;
&lt;/full-name&gt;</pre></blockquote>

<p>may express whether I prefer to be called "Eric van
der Vlist" or "van der Vlist
Eric." Applications that want access to the
components of this <tt class="literal">full-name</tt> can still have it,
but those that need a <tt class="literal">full-name</tt> must respect the
document order.
</p>

</div>
<a name="xmlschema-CHP-12-SECT-1.2" /></a><div class="sect2">
<h3 class="sect2">12.1.2. Substitution Groups</h3>

<a name="xmlschema-CHP-12-SECT-1.2.1" /></a><div class="sect3">
<h3 class="sect3">12.1.2.1. Using substitution groups</h3>

<p>Let's <a name="INDEX-912" /></a>see how we can define the same content
model using <a name="INDEX-913" /></a>substitution groups. The first thing to
do is to define an element that both <tt class="literal">full-name</tt> and
<tt class="literal">simple</tt> <tt class="literal">name</tt> can be derived
from. In this case, we have a simple type on one hand and a complex
type with complex content on the other, and we cannot find a type
that can be extended to both. We have no other choice but to start
with the universal type, which accepts any content model. Known as
<tt class="literal">xs:anyType</tt><a name="INDEX-914" /></a>, this very special type is also the
default value when no type is specified, and we can define a generic
<tt class="literal">name</tt> element without giving any type definition to
keep it as open as possible:
</p>

<blockquote><pre class="code">&lt;xs:element name="name"/&gt;</pre></blockquote>

<p>This element will be what is known as the <a name="INDEX-915" /></a>
<a name="INDEX-916" /></a>head of the substitution group.
Without declaring anything on this head element, other elements can
declare that they can be used wherever the head element is referenced
in the schema. These elements are known as the members of the
substitution group. The one restriction on the members is their types
must be valid derivations of the type of the head element. This
declaration is made through a
<tt class="literal">substitutionGroup</tt><a name="INDEX-917" /></a> attribute that references the head
element in each interchangeable element--for instance:
</p>

<blockquote><pre class="code">&lt;xs:element name="simple-name" type="string32"
  substitutionGroup="name"/&gt;
             
&lt;xs:element name="full-name" substitutionGroup="name"&gt;
  &lt;xs:complexType&gt;
    &lt;xs:all&gt;
      &lt;xs:element name="first" type="string32" minOccurs="0"/&gt;
      &lt;xs:element name="middle" type="string32" minOccurs="0"/&gt;
      &lt;xs:element name="last" type="string32"/&gt;
    &lt;/xs:all&gt;
  &lt;/xs:complexType&gt;
&lt;/xs:element&gt;</pre></blockquote>

<p>The effect of these declarations is these two elements can be used
every time the head is used in the schema, such as in the definition
of the <tt class="literal">character</tt> and <tt class="literal">author</tt>
elements:
</p>

<blockquote><pre class="code">&lt;xs:element name="character"&gt;
  &lt;xs:complexType&gt;
    &lt;xs:sequence&gt;
      &lt;xs:element ref="name"/&gt;
      &lt;xs:element ref="born"/&gt;
      &lt;xs:element ref="qualification"/&gt;
    &lt;/xs:sequence&gt;
    &lt;xs:attribute ref="id"/&gt;
  &lt;/xs:complexType&gt;
&lt;/xs:element&gt;
             
&lt;xs:element name="author"&gt;
  &lt;xs:complexType&gt;
    &lt;xs:sequence&gt;
      &lt;xs:element ref="name"/&gt;
      &lt;xs:element ref="born"/&gt;
      &lt;xs:element ref="dead" minOccurs="0"/&gt;
    &lt;/xs:sequence&gt;
    &lt;xs:attribute ref="id"/&gt;
  &lt;/xs:complexType&gt;
&lt;/xs:element&gt;</pre></blockquote>

</div>

<a name="xmlschema-CHP-12-SECT-1.2.2" /></a><div class="sect3">
<h3 class="sect3">12.1.2.2. Abstract elements</h3>

<p>If <a name="INDEX-918" /></a> <a name="INDEX-919" /></a>we keep our schema like
we've just seen it, the usage of the head in the
instance documents is allowed, and since our head element allows any
content, this is probably not something we would want. We need to use
a mechanism similar to the abstract types we saw when we encountered
the same kind of problem with <tt class="literal">xsi:type</tt> in <a href="ch07_01.htm">Chapter 7, "Creating Complex Datatypes"</a>. We will define the head element as abstract
using the <tt class="literal">abstract</tt> attribute in the definition of
the head element, which then becomes:
</p>

<blockquote><pre class="code">&lt;xs:element name="name" abstract="true"/&gt;</pre></blockquote>

</div>

<a name="xmlschema-CHP-12-SECT-1.2.3" /></a><div class="sect3">
<h3 class="sect3">12.1.2.3. Trees of substitution groups</h3>

<p>What <a name="INDEX-920" /></a>
<a name="INDEX-921" /></a>if our French offices define a
<tt class="literal">composed-name</tt> element that is similar to the
<tt class="literal">full name</tt> without its <tt class="literal">middle</tt>
subelement? We may just add this element directly to our substitution
group, but defining it as having the <tt class="literal">name</tt> element
as its head will not clearly show the similarities between this new
element and the <tt class="literal">full-name</tt> element. Furthermore,
some applications might need to specify that they accept either
<tt class="literal">full-name</tt> or <tt class="literal">composed-name</tt>. The
solution is to use <tt class="literal">full-name</tt> as the head of a new
substitution group. To do this, we need to define the type of the
<tt class="literal">full-name</tt> element as global to show the explicit
derivation between the two elements:
</p>

<blockquote><pre class="code">&lt;xs:complexType name="full-name-type"&gt;
  &lt;xs:all&gt;
    &lt;xs:element name="first" type="string32" minOccurs="0"/&gt;
    &lt;xs:element name="middle" type="string32" minOccurs="0"/&gt;
    &lt;xs:element name="last" type="string32"/&gt;
  &lt;/xs:all&gt;
&lt;/xs:complexType&gt;
              
&lt;xs:element name="full-name" substitutionGroup="name"
  type="full-name-type"/&gt;
             
&lt;xs:element name="composed-name" substitutionGroup="full-name"&gt;
  &lt;xs:complexType&gt;
    &lt;xs:complexContent&gt;
      &lt;xs:restriction base="full-name-type"&gt;
        &lt;xs:all&gt;
          &lt;xs:element name="first" type="string32" minOccurs="0"/&gt;
          &lt;xs:element name="last" type="string32"/&gt;
        &lt;/xs:all&gt;
      &lt;/xs:restriction&gt;
    &lt;/xs:complexContent&gt;
  &lt;/xs:complexType&gt;
&lt;/xs:element&gt;</pre></blockquote>

<p>We have now defined not only two substitution groups (with the
<tt class="literal">name</tt> and <tt class="literal">full</tt>
<tt class="literal">name</tt> heads), but also a tree of substitution
groups, since the allowed substitutions for <tt class="literal">name</tt>
will include both <tt class="literal">full name</tt> and <tt class="literal">simple
name</tt>, but <a name="INDEX-922" /></a>also <tt class="literal">composed-name</tt>!
</p>

</div>
</div>
<a name="xmlschema-CHP-12-SECT-1.3" /></a><div class="sect2">
<h3 class="sect2">12.1.3. Traditional Declarations or Substitution Groups?</h3>

<p>If we look back at the two solutions that we used to solve the same
issue, we see that <a name="INDEX-923" /></a>
<a name="INDEX-924" /></a>substitution groups are
more extensible than a traditional group which uses a <tt class="literal">xs:choice</tt> compositor. While the element group can only
be derived using a <tt class="literal"><a href="ch15_01.htm">xs:redefine</a></tt>
inclusion, the substitution group can be extended with new possible
elements by just defining them. These elements can be defined in any
namespace; the only constraint is that their types must be the same
or valid derivations of the head element's type.
(This restriction is justified to ensure that applications are not
too surprised by an unexpected content model.)
</p>

<p>There is another difference to note, though. We have seen that the
derivation of a content model using a <tt class="literal">xs:choice</tt>
compositor cannot extend the scope of the choice and add new
alternatives. The situation for substitution groups is almost the
opposite. Although the Recommendation says that substitution groups
should be validated as choices, it doesn't define
the order of the elements in the equivalent choice. I do not advise
restricting substitution groups in practice, since it may lead to
interoperability issues between schema processors.
</p>

<p>We then have a paradoxical situation where one of the mechanisms
(<tt class="literal">xs:all</tt>) can only be restricted while the other
(substitution groups) can only be extended, even though the
Recommendation states that these two mechanisms are equivalent as far
as validation is involved. This characteristic needs to be taken into
account when choosing between them.
</p>

<p>The differences between these two features are summarized in <a href="ch12_01.htm">Table 12-1</a>, "Not
advised" stands for "may work with
some schema processors but relies on a liberal interpretation of the
Recommendation, which may lead to interoperability
issues."
</p>

<a name="xmlschema-CHP-12-TABLE-1" /></a><h4 class="objtitle">Table 12-1. Element versus substitution groups </h4><table border="1" cellpadding="3">




<tr>
<td>
<p><b class="emphasis-bold">Feature</b></p>
</td>
<td>
<p>Element groups with a <tt class="literal"><a href="ch15_01.htm">xs:choice(outside a group)</a></tt> compositor.</p>
</td>
<td>
<p>Substitution groups.</p>
</td>
</tr>
<tr>
<td>
<p><b class="emphasis-bold">Definition</b></p>
</td>
<td>
<p>Centralized, using <tt class="literal"><a href="ch15_01.htm">xs:group(definition)</a></tt> and <tt class="literal"><a href="ch15_01.htm">xs:choice(outside a group)</a></tt>.
</p>
</td>
<td>
<p>Spread over global element definitions, using the
<tt class="literal">substitutionGroup</tt>
<a name="INDEX-925" /></a>attribute.
</p>
</td>
</tr>
<tr>
<td>
<p><b class="emphasis-bold">Constraints on the choices</b></p>
</td>
<td>
<p>No constraint: the elements can be totally different.</p>
</td>
<td>
<p>The type of the elements needs to be an explicit derivation of the
type of the head.
</p>
</td>
</tr>
<tr>
<td>
<p><b class="emphasis-bold">Allows global elements</b></p>
</td>
<td>
<p>Yes.</p>
</td>
<td>
<p>Yes.</p>
</td>
</tr>
<tr>
<td>
<p><b class="emphasis-bold">Allows local elements</b></p>
</td>
<td>
<p>Yes.</p>
</td>
<td>
<p>No.</p>
</td>
</tr>
<tr>
<td>
<p><b class="emphasis-bold">Restriction to remove choices</b></p>
</td>
<td>
<p>Yes, though <tt class="literal"><a href="ch15_01.htm">xs:redefine</a></tt>.</p>
</td>
<td>
<p>Not advised.</p>
</td>
</tr>
<tr>
<td>
<p><b class="emphasis-bold">Extension to add choices</b></p>
</td>
<td>
<p>Not advised.</p>
</td>
<td>
<p>Yes, by adding new elements with the same head element.</p>
</td>
</tr>
<tr>
<td>
<p><b class="emphasis-bold">Extension to add new elements in sequence</b></p>
</td>
<td>
<p>Yes, through <tt class="literal"><a href="ch15_01.htm">xs:redefine</a></tt>.</p>
</td>
<td>
<p>No.</p>
</td>
</tr>

</table><p>

</div>
<a name="xmlschema-CHP-12-SECT-1.4" /></a><div class="sect2">
<h3 class="sect2">12.1.4. Fuzzy Recommendation</h3>

<p>Both the extension of <tt class="literal">xs:choice</tt> during element
group redefinitions and the restriction of substitution groups are
very fuzzy in the Recommendation and require some explanation.
</p>

<a name="xmlschema-CHP-12-SECT-1.4.1" /></a><div class="sect3">
<h3 class="sect3">12.1.4.1. Extension of <tt class="literal">xs:choice</tt> through group redefinitions</h3>

<p>If <a name="INDEX-926" /></a>we return
<a name="INDEX-927" /></a>to our group that is defined as:
</p>

<blockquote><pre class="code">&lt;xs:group name="name"&gt;
  &lt;xs:choice&gt;
    &lt;xs:element ref="simple-name"/&gt;
    &lt;xs:element ref="full-name"/&gt;
  &lt;/xs:choice&gt;
&lt;/xs:group&gt;</pre></blockquote>

<p>There doesn't seem to be anything in the
recommendation that explicitly forbids redefinition of this group to
add another element in the choice by writing:
</p>

<blockquote><pre class="code">&lt;xs:redefine schemaLocation="foo.xsd"&gt;
  &lt;xs:group name="name"&gt;
    &lt;xs:choice&gt;
      &lt;xs:group ref="name"/&gt;
      &lt;xs:element ref="bar"/&gt;
    &lt;/xs:choice&gt;
  &lt;/xs:group&gt;
&lt;/xs:redefine&gt;</pre></blockquote>

<p>However, the effect of this redefinition is to allow a new element
(<tt class="literal">bar</tt>) to be accepted instead of
<tt class="literal">simple-name</tt> and <tt class="literal">full-name</tt>.
Although this would be a nice feature, the principles of redefinition
by restriction (i.e., when the content of the group is restricted
during a restriction) are the same as the principles of the complex
type derivation by restriction. The intention of the Working Group
seems to be to define the features of redefinitions by extension
after the complex type derivation by extension, which explicitly
forbids the addition of new particles in a <tt class="literal"><a href="ch15_01.htm">xs:choice(outside a group)</a></tt>.
</p>

<p>Although some schema processors do support this feature and some
specialists consider it fine, I do not advise using it, since it
seems to violate the intent (if not the wording) of the
Recommendation.
</p>

</div>

<a name="xmlschema-CHP-12-SECT-1.4.2" /></a><div class="sect3">
<h3 class="sect3">12.1.4.2. Restricting substitution groups</h3>

<p>The restriction of the <a name="INDEX-928" /></a>
<a name="INDEX-929" /></a> <a name="INDEX-930" /></a>substitution groups is quite the
opposite. The intent of the Working Group seems to be to allow such
restrictions while the wording of the Recommendation makes its result
undefined.
</p>

<p>The Recommendation clearly specifies that during the check to
determine if a particle is a valid restriction of another particle,
substitution groups should be treated as <tt class="literal">xs:choice</tt>, which is a clear indication that substitution
groups could be restricted through complex type derivations by
restriction. To illustrate this, let's take the
definition of the complex type of the element
<tt class="literal">author</tt>, using the substitution group whose head is
<tt class="literal">name</tt>, as defined previously:
</p>

<blockquote><pre class="code">&lt;xs:complexType name="authorType"&gt;
  &lt;xs:sequence&gt;
    &lt;xs:choice&gt;
      &lt;xs:element ref="name"/&gt;
      &lt;xs:element ref="simple-name"/&gt;
      &lt;xs:element ref="full-name"/&gt;
    &lt;/xs:choice&gt;
    &lt;xs:element ref="born"/&gt;
    &lt;xs:element ref="dead" minOccurs="0"/&gt;
  &lt;/xs:sequence&gt;
  &lt;xs:attribute ref="id"/&gt;
&lt;/xs:complexType&gt;</pre></blockquote>

<p>If substitution groups are treated like <tt class="literal">xs:choice</tt>,
and assuming that our head isn't defined as
abstract, this definition is equivalent to:
</p>

<blockquote><pre class="code">&lt;xs:complexType name="authorType"&gt;
  &lt;xs:sequence&gt;
    &lt;xs:element ref="name"/&gt;
    &lt;xs:element ref="born"/&gt;
    &lt;xs:element ref="dead" minOccurs="0"/&gt;
  &lt;/xs:sequence&gt;
  &lt;xs:attribute ref="id"/&gt;
&lt;/xs:complexType&gt;</pre></blockquote>

<p>It should be possible to derive this complex type by restriction by
writing, for instance:
</p>

<blockquote><pre class="code">&lt;xs:complexType name="restrictedAuthorType"&gt;
  &lt;xs:complexContent&gt;
    &lt;xs:restriction base="authorType"&gt;
      &lt;xs:sequence&gt;
        &lt;xs:choice&gt;
          &lt;xs:element ref="simple-name"/&gt;
          &lt;xs:element ref="full-name"/&gt;
        &lt;/xs:choice&gt;
        &lt;xs:element ref="born"/&gt;
        &lt;xs:element ref="dead" minOccurs="0"/&gt;
      &lt;/xs:sequence&gt;
    &lt;/xs:restriction&gt;
  &lt;/xs:complexContent&gt;
&lt;/xs:complexType&gt;</pre></blockquote>

<p>However, the Recommendation also states that during the derivation by
restriction of a <a name="INDEX-931" /></a><tt class="literal">xs:choice</tt>
compositor, "there is a complete order-preserving
functional mapping" between the particles used to
define the derived and original <tt class="literal">xs:choice</tt>.
However, it does not define the order of the particles when
substitution groups are mapped into <tt class="literal">xs:choice</tt>.
Depending on the order chosen by the schema validator to build the
<tt class="literal">xs:choice</tt> out of the substitution group, our
derivation can thus be either valid or invalid!
</p>

</div>
</div>
</div>

<hr width="684" align="left" />
<div class="navbar"><table width="684" border="0"><tr><td align="left" valign="top" width="228"><a href="ch11_04.htm"><img src="../gifs/txtpreva.gif" alt="Previous" border="0" /></a></td><td align="center" valign="top" width="228"><a href="index.htm"><img src="../gifs/txthome.gif" alt="Home" border="0" /></a></td><td align="right" valign="top" width="228"><a href="ch12_02.htm"><img src="../gifs/txtnexta.gif" alt="Next" border="0" /></a></td></tr><tr><td align="left" valign="top" width="228">11.4. Beware the Intrusive Nature of These Features...</td><td align="center" valign="top" width="228"><a href="index/index.htm"><img src="../gifs/index.gif" alt="Book Index" border="0" /></a></td><td align="right" valign="top" width="228">12.2. Controlling Derivations</td></tr></table></div>
<hr width="684" align="left" />

<img src="../gifs/navbar.gif" usemap="#library-map" border="0" alt="Library Navigation Links" />
<p><p><font size="-1"><a href="copyrght.htm">Copyright &copy; 2002</a> O'Reilly &amp; Associates. All rights reserved.</font></p>

<map name="library-map">
<area shape="rect" coords="0,0,85,93" href="../index.htm"><area shape="rect" coords="85,0,180,98" href="../sax2/index.htm"><area shape="rect" coords="182,-1,261,100" href="../xmlnut/index.htm"><area shape="rect" coords="263,1,384,96" href="../jxml/index.htm"><area shape="rect" coords="386,1,463,100" href="../jxslt/index.htm"><area shape="rect" coords="466,1,533,112" href="../xslt/index.htm"><area shape="rect" coords="535,-1,610,108" href="index.htm"><area shape="rect" coords="613,1,696,121" href="../pxml/index.htm">
      </map>

</body></html>