<html><head><title>Documenting Schemas (XML Schema)</title><link rel="stylesheet" type="text/css" href="../style/style1.css" />

<meta name="DC.Creator" content="Eric van der Vlist" /><meta name="DC.Format" content="text/xml" scheme="MIME" /><meta name="DC.Language" content="en-US" /><meta name="DC.Publisher" content="O'Reilly &amp; Associates, Inc." /><meta name="DC.Source" scheme="ISBN" content="0596002521L" /><meta name="DC.Subject.Keyword" content="stuff" /><meta name="DC.Title" content="XML Schema" /><meta name="DC.Type" content="Text.Monograph" />

</head><body bgcolor="#ffffff">

<img src="gifs/smbanner.gif" usemap="#banner-map" border="0" alt="Book Home" /><map name="banner-map"><area shape="rect" coords="1,-2,616,66" href="index.htm" alt="XML Schema" /><area shape="rect" coords="629,-11,726,25" href="jobjects/fsearch.htm" alt="Search this book" /></map>

<div class="navbar"><table width="684" border="0"><tr><td align="left" valign="top" width="228"><a href="ch13_02.htm"><img src="../gifs/txtpreva.gif" alt="Previous" border="0" /></a></td><td align="center" valign="top" width="228" /><td align="right" valign="top" width="228"><a href="ch14_02.htm"><img src="../gifs/txtnexta.gif" alt="Next" border="0" /></a></td></tr></table></div>


<h1 class="chapter">Chapter 14. Documenting Schemas</h1>
<div class="htmltoc"><h4 class="tochead">Contents:</h4>
  <p> <a href="#xmlschema-CHP-14-SECT-1">Style Matters</a><br />
<a href="ch14_02.htm">The W3C XML Schema Annotation Element</a><br />
<a href="ch14_03.htm">Foreign Attributes</a><br />
<a href="ch14_04.htm">XML 1.0 Comments</a><br />
<a href="ch14_05.htm">Which One and What For?</a><br /></p></div>

<p>The <a name="INDEX-1015" /></a>
<a name="INDEX-1016" /></a>issue
of documenting schemas--or any machine readable
language--goes beyond simple additions of comments. The real
challenge is to create schemas that are readable both directly by
looking at their source code and by documentation extraction tools.
</p>
<div class="sect1"><a name="xmlschema-CHP-14-SECT-1" /></a>
<h2 class="sect1">14.1. Style Matters</h2>

<p>Writing schemas is much like writing programs. Two pieces of code may
both work, but one is more readable and maintainable than the other.
Readability is good.
</p>

<a name="xmlschema-CHP-14-SECT-1.1" /></a><div class="sect2">
<h3 class="sect2">14.1.1. Keep It Simple</h3>

<p>Although W3C XML Schema has been carefully specified so that schema
processors can find their way through the most complex and intricate
combinations of its many features, the same can't be
expected of the average human reader. I must confess that I, for one,
am getting rapidly lost in the meanders of medium complexity schemas,
such as the famous schema for schema.
</p>

<p>"Keep it simple" is a useful
principle. Although W3C XML Schema gives you a huge number of
features, you don't need to use all of them in every
schema. Each of them incurs a price in terms of readability of your
schema.
</p>

<p>Some of the rules for simplicity that we have used for some time with
programming languages apply here, such as the conflicting rules for
brevity ("If a function is more than one page long,
split it"), and directness ("A
function should be called more than once"). There
are, of course, others such as "Put the code and the
documentation in the same place,"
"If you can't say it in English,
you can't say it in C/C++ (or Java, C#, Perl,
Python, etc.)," and
"Don't solve problems that
don't exist."
</p>

<p>Translated for the XML design world, these four could read as
"If a declaration is more than one page long, split
it," "A declaration should be
referred to at least one time" (we will see next
that there might be exceptions), "If you
can't say it in English, you can't
say it in XML," and, of course,
"Don't solve problems that
don't exist."
</p>

</div>
<a name="xmlschema-CHP-14-SECT-1.2" /></a><div class="sect2">
<h3 class="sect2">14.1.2. Think Globally</h3>

<p>When I started working with W3C XML Schema, I used to think that the
<a name="INDEX-1017" /></a>Russian doll design was the simplest,
since it's so close to the structure of the instance
documents. Having written the W3C XML Schema reference manual, I am
convinced that flat structures in which all the
<a name="INDEX-1018" /></a>elements are global are much simpler
to document and just as simple to write!
</p>

<p>The Russian doll design relies on an analogy between object-oriented
programming and markup. This is somewhat misleading: there is no such
thing as a private or local object in an XML document (except maybe
if you encode or encrypt some fragments); when you open an XML
document, its whole content is exposed, and everything is public and
needs to be documented with the same level of accuracy. To describe a
concept, give it a name. W3C XML Schema enforces the attribution of
unique names only for global elements. Although different content
models are often presented as an advantage over the DTDs, defining
them under the same element name is very confusing when reading an
instance document. The most convenient way to create a reference
manual for an XML vocabulary is through a dictionary of elements.
Reusing the same element name for different purposes creates multiple
entries that are confusing and difficult to read (like the entries
for common words, such as "place"
in an English dictionary); the example of W3C XML Schema and its very
different meanings for <tt class="literal">xs:extension</tt> is enlightening.
Therefore, the second piece of advice is to define the elements as
global when possible. Note that this advice doesn't
apply to unqualified attributes, which cannot be defined as global.
</p>

</div>
<a name="xmlschema-CHP-14-SECT-1.3" /></a><div class="sect2">
<h3 class="sect2">14.1.3. When It's Similar, Show It</h3>

<p>The third and last piece of advice contradicts the first one, and a
trade-off needs to be found between these two. The first two bits of
advice lead to what I call <a name="INDEX-1019" /></a>flat schemas. These are similar to our
very first example in <a href="ch01_01.htm">Chapter 1, "Schema Uses and Development"</a>, in which all the
elements and attributes are global with local type definitions. This
style is easy to read but doesn't highlight the
similarities between elements such as the fact that authors and
characters can be considered persons and share some properties. When
strong similarities exist between different elements, using one of
the techniques already discussed (either a complex type derivation or
elements and attributes group composition) can enhance the
readability of the schema.
</p>

<p>The third bit of advice states you should use W3C XML Schema features
to highlight the strong similarities when they are present.
</p>

</div>
</div>

<hr width="684" align="left" />
<div class="navbar"><table width="684" border="0"><tr><td align="left" valign="top" width="228"><a href="ch13_02.htm"><img src="../gifs/txtpreva.gif" alt="Previous" border="0" /></a></td><td align="center" valign="top" width="228"><a href="index.htm"><img src="../gifs/txthome.gif" alt="Home" border="0" /></a></td><td align="right" valign="top" width="228"><a href="ch14_02.htm"><img src="../gifs/txtnexta.gif" alt="Next" border="0" /></a></td></tr><tr><td align="left" valign="top" width="228">13.2. The Need for Open Schemas</td><td align="center" valign="top" width="228"><a href="index/index.htm"><img src="../gifs/index.gif" alt="Book Index" border="0" /></a></td><td align="right" valign="top" width="228">14.2. The W3C XML Schema Annotation Element</td></tr></table></div>
<hr width="684" align="left" />

<img src="../gifs/navbar.gif" usemap="#library-map" border="0" alt="Library Navigation Links" />
<p><p><font size="-1"><a href="copyrght.htm">Copyright &copy; 2002</a> O'Reilly &amp; Associates. All rights reserved.</font></p>

<map name="library-map">
<area shape="rect" coords="0,0,85,93" href="../index.htm"><area shape="rect" coords="85,0,180,98" href="../sax2/index.htm"><area shape="rect" coords="182,-1,261,100" href="../xmlnut/index.htm"><area shape="rect" coords="263,1,384,96" href="../jxml/index.htm"><area shape="rect" coords="386,1,463,100" href="../jxslt/index.htm"><area shape="rect" coords="466,1,533,112" href="../xslt/index.htm"><area shape="rect" coords="535,-1,610,108" href="index.htm"><area shape="rect" coords="613,1,696,121" href="../pxml/index.htm">
      </map>

</body></html>