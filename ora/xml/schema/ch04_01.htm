<html><head><title>Using Predefined Simple Datatypes (XML Schema)</title><link rel="stylesheet" type="text/css" href="../style/style1.css" />

<meta name="DC.Creator" content="Eric van der Vlist" /><meta name="DC.Format" content="text/xml" scheme="MIME" /><meta name="DC.Language" content="en-US" /><meta name="DC.Publisher" content="O'Reilly &amp; Associates, Inc." /><meta name="DC.Source" scheme="ISBN" content="0596002521L" /><meta name="DC.Subject.Keyword" content="stuff" /><meta name="DC.Title" content="XML Schema" /><meta name="DC.Type" content="Text.Monograph" />

</head><body bgcolor="#ffffff">

<img src="gifs/smbanner.gif" usemap="#banner-map" border="0" alt="Book Home" /><map name="banner-map"><area shape="rect" coords="1,-2,616,66" href="index.htm" alt="XML Schema" /><area shape="rect" coords="629,-11,726,25" href="jobjects/fsearch.htm" alt="Search this book" /></map>

<div class="navbar"><table width="684" border="0"><tr><td align="left" valign="top" width="228"><a href="ch03_02.htm"><img src="../gifs/txtpreva.gif" alt="Previous" border="0" /></a></td><td align="center" valign="top" width="228" /><td align="right" valign="top" width="228"><a href="ch04_02.htm"><img src="../gifs/txtnexta.gif" alt="Next" border="0" /></a></td></tr></table></div>


<h1 class="chapter">Chapter 4. Using Predefined Simple Datatypes</h1>
<div class="htmltoc"><h4 class="tochead">Contents:</h4>
  <p> <a href="#xmlschema-CHP-4-SECT-1">Lexical and Value Spaces</a><br />
<a href="ch04_02.htm">Whitespace Processing</a><br />
<a href="ch04_03.htm">String Datatypes</a><br />
<a href="ch04_04.htm">Numeric Datatypes</a><br />
<a href="ch04_05.htm">Date and Time Datatypes</a><br />
<a href="ch04_06.htm">List Types</a><br />
<a href="ch04_07.htm">What About anySimpleType?</a><br />
<a href="ch04_08.htm">Back to Our Library</a><br /></p></div>

<p>W3C <a name="INDEX-92" /></a> <a name="INDEX-93" /></a> <a name="INDEX-94" /></a>XML
<a name="INDEX-95" /></a>Schema provides an extensive
set of predefined datatypes. W3C XML Schema derives many of these
predefined datatypes from a smaller set of
"primitive" datatypes that have a
specific meaning and semantic and cannot be derived from other types.
We will see how we can use these types to define our own datatypes by
derivation to meet more specific needs in the next chapter.
</p>

<p><a href="ch04_01.htm">Figure 4-1</a> provides a map of predefined datatypes
and the relationships between them.
</p>

<a name="xmlschema-CHP-4-FIG-1" /></a><div class="figure"><img src="figs/xsch_0401.gif" alt="Figure 4-1" width="435" height="400" /></div><h4 class="objtitle">Figure 4-1. W3C XML Schema type hierarchy</h4>
<div class="sect1"><a name="xmlschema-CHP-4-SECT-1" /></a>
<h2 class="sect1">4.1. Lexical and Value Spaces</h2>

<p><em class="emphasis">W3C XML Schema</em> <a name="INDEX-96" /></a>
<a name="INDEX-97" /></a>
<a name="INDEX-98" /></a> <a name="INDEX-99" /></a> <a name="INDEX-100" /></a>introduced a decoupling
between the data, as it can be read from the instance documents (the
"lexical space"), and the value, as
interpreted according to the datatype (the "value
space").
</p>

<p>Before we can enter into the definition of these two spaces, we must
examine the processing model and the transformations endured by a
value written in a XML document before it is validated. Element and
attribute content proceeds through the following steps during
processing:
</p>

<dl>
<dt><i>Serialization space</i></dt>
<dd>
The <a name="INDEX-101" /></a>series of bytes that is actually stored
in a document (either as the value of an attribute or as a text node)
may be seen as belonging to a first space, which we may call the
"serialization space."
<p></p>
</dd>


<dt><i>Parsed space</i></dt>
<dd>
The <a name="INDEX-102" /></a>XML 1.0
Recommendation makes it clear that the serialization space is not
directly meaningful to applications, and a first transformation is
performed on the value by conforming XML parsers before the value
reaches an application: characters are converted into Unicode, and
ends of lines (for text nodes and attributes) and whitespaces (only
for attributes) are normalized. The result of this transformation is
what reaches the applications--including schema
processors--and belongs to what we may call the
"parsed space."
<p></p>
</dd>


<dt><i>Lexical space</i></dt>
<dd>
Before doing any validation, W3C XML Schema performs a second round
of <a name="INDEX-103" /></a>whitespace processing on this value
reported by the XML parser. This depends on the
value's datatype and may either ignore, normalize,
or collapse the whitespaces. The value after this whitespace
processing belongs to the "lexical
space" defined in the W3C XML Schema Recommendation.
<p></p>
</dd>


<dt><i>Value space</i></dt>
<dd>
W3C XML Schema considers an item from the lexical space to be a
representation of an abstract value whose meaning or semantic is
defined by its datatype and can be a piece of text, and also a
number, a date, or qualified name. The ensemble of abstract values is
defined as the "value space."
<p></p>
</dd>

</dl>

<p>Each datatype has its own lexical and value spaces and its own rules
to associate a lexical representation with a value; for many
datatypes, a single value can have multiple lexical representations
(for instance, the <tt class="literal">&lt;<a href="ch16_01.htm">xs:float</a>&gt;</tt> value
"3.14116" can also be written
equivalently as "03.14116,"
"3.141160," or
".314116E1"). This distinction is
important since the basic operations performed on the values (such as
equality testing or sorting) are done on the value space.
"3.14116" is considered to be equal
to "03.14116" when the type is
<tt class="literal"><a href="ch16_01.htm">xs:float</a></tt> and is different when the type is <tt class="literal"><a href="ch16_01.htm">xs:string</a></tt>. The same applies to sort orders: some
datatypes have a full order relation (every pair of values can be
compared), other have no order relation at all, and the remaining
types have a partial order relation (values cannot always be
compared).
</p>



<a name="ch04-3-fm2xml" /></a><blockquote><b>TIP:</b> 
Although future versions of APIs might send these values to the
applications, the transformations between parsed, lexical, and value
spaces are currently done for the sake of the validation only, and
don't impact the values sent by a validating
<a name="INDEX-104" /></a>
<a name="INDEX-105" /></a>
<a name="INDEX-106" /></a>
<a name="INDEX-107" /></a>
<a name="INDEX-108" /></a>parser.
<p></p>
</blockquote>

</div>

<hr width="684" align="left" />
<div class="navbar"><table width="684" border="0"><tr><td align="left" valign="top" width="228"><a href="ch03_02.htm"><img src="../gifs/txtpreva.gif" alt="Previous" border="0" /></a></td><td align="center" valign="top" width="228"><a href="index.htm"><img src="../gifs/txthome.gif" alt="Home" border="0" /></a></td><td align="right" valign="top" width="228"><a href="ch04_02.htm"><img src="../gifs/txtnexta.gif" alt="Next" border="0" /></a></td></tr><tr><td align="left" valign="top" width="228">3.2. New Lessons</td><td align="center" valign="top" width="228"><a href="index/index.htm"><img src="../gifs/index.gif" alt="Book Index" border="0" /></a></td><td align="right" valign="top" width="228">4.2. Whitespace Processing</td></tr></table></div>
<hr width="684" align="left" />

<img src="../gifs/navbar.gif" usemap="#library-map" border="0" alt="Library Navigation Links" />
<p><p><font size="-1"><a href="copyrght.htm">Copyright &copy; 2002</a> O'Reilly &amp; Associates. All rights reserved.</font></p>

<map name="library-map">
<area shape="rect" coords="0,0,85,93" href="../index.htm"><area shape="rect" coords="85,0,180,98" href="../sax2/index.htm"><area shape="rect" coords="182,-1,261,100" href="../xmlnut/index.htm"><area shape="rect" coords="263,1,384,96" href="../jxml/index.htm"><area shape="rect" coords="386,1,463,100" href="../jxslt/index.htm"><area shape="rect" coords="466,1,533,112" href="../xslt/index.htm"><area shape="rect" coords="535,-1,610,108" href="index.htm"><area shape="rect" coords="613,1,696,121" href="../pxml/index.htm">
      </map>

</body></html>