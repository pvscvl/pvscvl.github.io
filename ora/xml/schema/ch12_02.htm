<html><head><title>Controlling Derivations (XML Schema)</title><link rel="stylesheet" type="text/css" href="../style/style1.css" />

<meta name="DC.Creator" content="Eric van der Vlist" /><meta name="DC.Format" content="text/xml" scheme="MIME" /><meta name="DC.Language" content="en-US" /><meta name="DC.Publisher" content="O'Reilly &amp; Associates, Inc." /><meta name="DC.Source" scheme="ISBN" content="0596002521L" /><meta name="DC.Subject.Keyword" content="stuff" /><meta name="DC.Title" content="XML Schema" /><meta name="DC.Type" content="Text.Monograph" />

</head><body bgcolor="#ffffff">

<img src="gifs/smbanner.gif" usemap="#banner-map" border="0" alt="Book Home" /><map name="banner-map"><area shape="rect" coords="1,-2,616,66" href="index.htm" alt="XML Schema" /><area shape="rect" coords="629,-11,726,25" href="jobjects/fsearch.htm" alt="Search this book" /></map>

<div class="navbar"><table width="684" border="0"><tr><td align="left" valign="top" width="228"><a href="ch12_01.htm"><img src="../gifs/txtpreva.gif" alt="Previous" border="0" /></a></td><td align="center" valign="top" width="228" /><td align="right" valign="top" width="228"><a href="ch13_01.htm"><img src="../gifs/txtnexta.gif" alt="Next" border="0" /></a></td></tr></table></div>



<h2 class="sect1">12.2. Controlling Derivations</h2>

<p>It's <a name="INDEX-932" /> <a name="INDEX-933" />time to come back to the features
already discussed--and to introduce new ones--to
explain how to control the usage of the derivations of the different
compositors. Basically, these features are attributes that allow you
to block further derivation or, on the contrary, allow you to require
derivations, but their granularity varies depending on the compositor
being used.
</p>

<a name="xmlschema-CHP-12-SECT-2.1" /><div class="sect2">
<h3 class="sect2">12.2.1. Attributes</h3>

<p>There are no substitution groups for attributes and no mechanism to
derive them or define their types in instance documents. This also
means no features are needed to control their derivation. Actually,
to be completely accurate, we need to note that it is possible to
indirectly derive attributes through a derivation by restriction of
their parent elements or redefinitions of attribute groups.
</p>

</div>
<a name="xmlschema-CHP-12-SECT-2.2" /><div class="sect2">
<h3 class="sect2">12.2.2. Elements</h3>

<p>When <a name="INDEX-934" />speaking of a <tt class="literal">xs:element</tt>, we need to differentiate between global
definitions and local definitions or references that behave
differently in regard to derivation. Therefore, derivation control is
maintained as shown in <a href="ch12_02.htm">Table 12-2</a>.
</p>

<a name="xmlschema-CHP-12-TABLE-2" /><h4 class="objtitle">Table 12-2. Controls on element derivation </h4><table border="1" cellpadding="3">





<tr>
<th>
<p>Attribute</p>
</th>
<th>
<p>Global element</p>
</th>
<th>
<p>Local element definition</p>
</th>
<th>
<p>Element reference</p>
</th>
</tr>


<tr>
<td>
<p>block</p>
</td>
<td>
<p>Yes</p>
</td>
<td>
<p>Yes</p>
</td>
<td>
<p>No</p>
</td>
</tr>
<tr>
<td>
<p>abstract</p>
</td>
<td>
<p>Yes</p>
</td>
<td>
<p>No</p>
</td>
<td>
<p>No</p>
</td>
</tr>
<tr>
<td>
<p>final</p>
</td>
<td>
<p>Yes</p>
</td>
<td>
<p>No</p>
</td>
<td>
<p>No</p>
</td>
</tr>

</table><p>

<a name="xmlschema-CHP-12-SECT-2.2.1" /><div class="sect3">
<h3 class="sect3">12.2.2.1. Block attribute</h3>

<p>The <a name="INDEX-935" /><tt class="literal">block</tt> attribute
controls <a name="INDEX-936" />type substitution in the instance
documents through the <tt class="literal">xsi:type</tt><a name="INDEX-937" /> attribute and substitution groups. This
single attribute holds a whitespace-separated list of tokens--
of "restriction,"
"extension," and
"substitution"--or the
special value <tt class="literal">#all</tt><a name="INDEX-938" /> (which means all three values
together and the attribute's default value can be
defined through the
<tt class="literal">blockDefault</tt><a name="INDEX-939" /> attribute of the
<tt class="literal">xs:schema</tt><a name="INDEX-940" /> document element).
</p>

<p>The first two values (restriction and extension) control any
substitution through <tt class="literal">xsi:type</tt> or substitution
groups, and block the substitution by datatypes that are derived by
restriction or extension from the datatype defined in the element
declaration. The third (substitution) is specific to the substitution
groups, and defines if an element from the substitution group (for
which the element is the head) is allowed. Since only global elements
can participate in a substitution group, the last value is clearly
meaningful for global definitions only.
</p>

<p>The fact that the <tt class="literal">block</tt> attribute is used both for
type substitution and for substitution groups can be misleading,
especially with the values restriction and extension, which act on
both aspects. A simple example makes this more concrete.
Let's say that we have a complex type definition
(<tt class="literal">personType</tt>) describing a person as having a name,
a mandatory birth date, and optional death date and qualification:
</p>

<blockquote><pre class="code">&lt;xs:complexType name="personType"&gt;
  &lt;xs:sequence&gt;
    &lt;xs:element ref="name"/&gt;
    &lt;xs:element ref="born"/&gt;
    &lt;xs:element ref="dead" minOccurs="0"/&gt;
    &lt;xs:element ref="qualification" minOccurs="0"/&gt;
  &lt;/xs:sequence&gt;
  &lt;xs:attribute ref="id"/&gt;
&lt;/xs:complexType&gt;</pre></blockquote>

<p>We can also derive by extension from this complex type a datatype
that describes an author as a person with a list of books:
</p>

<blockquote><pre class="code">&lt;xs:complexType name="authorType"&gt;
  &lt;xs:complexContent&gt;
    &lt;xs:extension base="personType"&gt;
      &lt;xs:sequence&gt; 
        &lt;xs:element name="book" type="xs:token" minOccurs="1"
          maxOccurs="unbounded"/&gt;
      &lt;/xs:sequence&gt;
    &lt;/xs:extension&gt;
  &lt;/xs:complexContent&gt;
&lt;/xs:complexType&gt;</pre></blockquote>

<p>We can derive by restriction a datatype that describes a character as
a person with no death date and a mandatory qualification:
</p>

<blockquote><pre class="code">&lt;xs:complexType name="characterType"&gt;
  &lt;xs:complexContent&gt;
    &lt;xs:restriction base="personType"&gt;
      &lt;xs:sequence&gt;
        &lt;xs:element ref="name"/&gt;
        &lt;xs:element ref="born"/&gt;
        &lt;xs:element ref="qualification"/&gt;
      &lt;/xs:sequence&gt;
    &lt;/xs:restriction&gt;
  &lt;/xs:complexContent&gt;
&lt;/xs:complexType&gt;</pre></blockquote>

<p>The first purpose of <tt class="literal">block</tt> attributes in element
definitions is to control the type substitution through
<tt class="literal">xsi:type</tt>, which controls substitutions in the
instance documents such as the following (if the
<tt class="literal">person</tt> element is defined as having a type
<tt class="literal">personType</tt>):
</p>

<blockquote><pre class="code">&lt;person xsi:type="authorType" id="CMS"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"&gt;
  &lt;name&gt;
    Charles M Schulz
  &lt;/name&gt;
  &lt;born&gt;
    1922-11-26
  &lt;/born&gt;
  &lt;dead&gt;
    2000-02-12
  &lt;/dead&gt;
  &lt;book&gt;
    Being a Dog Is a Full-Time Job
  &lt;/book&gt;
&lt;/person&gt;
               
&lt;person xsi:type="characterType" id="Snoopy"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"&gt;
  &lt;name&gt;
    Snoopy
  &lt;/name&gt;
  &lt;born&gt;
    1950-10-04
  &lt;/born&gt;
  &lt;qualification&gt;
    extroverted beagle
  &lt;/qualification&gt;
&lt;/person&gt;</pre></blockquote>

<p>The first substitution uses <tt class="literal">authorType</tt>, which is
derived by extension from <tt class="literal">personType</tt>, and can be
blocked by specifying a <tt class="literal">block</tt> attribute including
the value <tt class="literal">extension</tt>. The second one uses
<tt class="literal">characterType</tt>, which is derived by restriction
from <tt class="literal">personType</tt> and can be blocked by specifying a
<tt class="literal">block</tt> attribute including the value
<tt class="literal">restriction</tt>. Both can be blocked together by
specifying a block attribute with the value
<tt class="literal">#all</tt><a name="INDEX-941" />.
</p>



<a name="ch12-4-fm2xml" /><blockquote><b>TIP:</b> 
This example shows that the impact of both derivation types on the
applications is very different. A type substitution by restriction
has virtually no impact on the applications, since the content model
matching the restricted type must also match the original type.
Alternatively, a type substitution by extension allows content models
not allowed by the original type (such as the addition of the
<tt class="literal">book</tt> element in the previous example), and the
risk of breaking applications that do not expect these additions is
higher. Thus, a conservative attitude might be to include
<tt class="literal">extension</tt> in the default values of
<tt class="literal">block</tt> in your schemas.
</p>
</blockquote>

<p>That being said, we've seen only one side of the
<tt class="literal">block</tt> attribute. It serves a second, different,
yet not independent, purpose and also restricts the usage of
substitution groups. To illustrate this purpose,
let's define three different element members of a
substitution group whose head is <tt class="literal">person</tt>. There is
also a fourth element member, which is just a synonym for the element
person and has the same type:
</p>

<blockquote><pre class="code">&lt;xs:element name="person" type="personType"/&gt;
              
&lt;xs:element name="author" type="authorType"
  substitutionGroup="person"/&gt;
              
&lt;xs:element name="character" type="characterType"
  substitutionGroup="person"/&gt;
              
&lt;xs:element name="human" type="personType"
  substitutionGroup="person"/&gt;</pre></blockquote>

<p>After defining this substitution group and without blocking anything,
we allow not only <tt class="literal">block</tt> and the type substitutions
seen above, but also element substitutions, such as:
</p>

<blockquote><pre class="code">&lt;author id="CMS"&gt;
  &lt;name&gt;
    Charles M Schulz
  &lt;/name&gt;
  &lt;born&gt;
    1922-11-26
  &lt;/born&gt;
  &lt;dead&gt;
    2000-02-12
  &lt;/dead&gt;
  &lt;book&gt;
    Being a Dog Is a Full-Time Job
  &lt;/book&gt;
&lt;/author&gt;
              
&lt;character id="PP"&gt;
  &lt;name&gt;
    Peppermint Patty
  &lt;/name&gt;
  &lt;born&gt;
    1966-08-22
  &lt;/born&gt;
  &lt;qualification&gt;
    bold, brash and tomboyish
  &lt;/qualification&gt;
&lt;/character&gt;
&lt;human id="CMS."&gt;
  &lt;name&gt;
    Charles M Schulz
  &lt;/name&gt;
  &lt;born&gt;
    1922-11-26
  &lt;/born&gt;
  &lt;dead&gt;
    2000-02-12
  &lt;/dead&gt;
&lt;/human&gt;</pre></blockquote>

<p>The first substitution is by an element of the substitution group
whose type is derived by extension from the head. It can be blocked
by specifying a <tt class="literal">block</tt> attribute including the
value <tt class="literal">extension</tt>. The second one is a substitution
by an element of the substitution group whose type is derived by
restriction from the head. It can be blocked by specifying a
<tt class="literal">block</tt> attribute including the value
<tt class="literal">restriction</tt>. Those two are similar to the two
substitutions given as examples for the type substitutions, with the
difference that the element name is now used to differentiate the
type instead of the <tt class="literal">xsi:type</tt> attribute. The third
substitution is new, since the type is the same as the type of the
head, and it is blocked only by specifying a <tt class="literal">block</tt>
attribute that includes the value <tt class="literal">substitution</tt>.
Note that including <tt class="literal">substitution</tt> in a
<tt class="literal">block</tt> attribute blocks any element substitution,
while stating that not all the combinations are possible to express.
To block everything, you would define <tt class="literal">author</tt> as:
</p>

<blockquote><pre class="code">&lt;xs:element name="author" type="authorType" block="#all"/&gt;</pre></blockquote>

<p>I don't want to leave you with the impression than
you can't block type substitution without blocking
substitution groups. We need to mention that <a name="INDEX-942" />type substitution
can also be blocked on complex type definitions, which is covered
later on in this chapter in <a name="INDEX-943" /><a name="INDEX-944" /><a href="ch12_02.htm">Section 12.2.3, "Complex Types"</a>. 
</p>

</div>

<a name="xmlschema-CHP-12-SECT-2.2.2" /><div class="sect3">
<h3 class="sect3">12.2.2.2. Final elements</h3>

<p>Like <tt class="literal">block</tt>,
<tt class="literal">final</tt><a name="INDEX-945" /> has an impact on substitution groups, but
works on a different level: constraining the schema itself while
<tt class="literal">block</tt> constrains the instance documents.
<tt class="literal">final</tt> can take a list of
<tt class="literal">restriction</tt> and <tt class="literal">extension</tt> or
the special value <tt class="literal">#all</tt>, and its default value can
be defined using the
<tt class="literal">finalDefault</tt><a name="INDEX-946" /> attribute of <tt class="literal"><a href="ch15_01.htm">xs:schema</a></tt>. However, a
<tt class="literal">substitution</tt> value is not necessary, since unlike
<tt class="literal">block</tt>, <tt class="literal">final</tt> is about
substitution groups, and <tt class="literal">#all</tt> can block all the
substitutions (and only the substitutions).
</p>

<p><tt class="literal">final</tt>'s effect is more radical
than <tt class="literal">block</tt>: while <tt class="literal">block</tt> blocks
the effects of the usage of substitution groups,
<tt class="literal">final</tt> prohibits the usage of the element as a head
of a substitution group. If the <tt class="literal">person</tt> element is
defined with a <tt class="literal">final</tt> attribute set, it
isn't possible to use it as head of a substitution
group for either <tt class="literal">author</tt>,
<tt class="literal">character</tt>, or both.
</p>

</div>

<a name="xmlschema-CHP-12-SECT-2.2.3" /><div class="sect3">
<h3 class="sect3">12.2.2.3. Abstract elements</h3>

<p>The last attribute is
<tt class="literal">abstract</tt><a name="INDEX-947" />, which is the opposite of
<tt class="literal">block</tt>. It prohibits the element from being used
directly in an instance document and must be substituted through a
substitution group. Defining the person element as
<tt class="literal">abstract</tt> forbids its use in the instance
documents. You must use one of the elements from its substitution
group (such as <tt class="literal">author</tt>,
<tt class="literal">character</tt>, or <a name="INDEX-948" />even <tt class="literal">human</tt>).
</p>

</div>
</div>
<a name="xmlschema-CHP-12-SECT-2.3" /><div class="sect2">
<h3 class="sect2">12.2.3. Complex Types</h3>

<p>The attributes are the same for complex types as they are for
elements, but their meaning is slightly different since one of them
(<tt class="literal">block</tt>) operates on the substitution of the
elements that use the datatype (as we have seen in the previous
section). The others (<tt class="literal">final</tt> and
<tt class="literal">abstract</tt>) work on the derivation of the complex
type itself.
</p>

<a name="xmlschema-CHP-12-SECT-2.3.1" /><div class="sect3">
<h3 class="sect3">12.2.3.1. Blocking complex types</h3>

<p>When <a name="INDEX-949" />the
<tt class="literal">block</tt><a name="INDEX-950" /> attribute is used on complex type
definitions, the type substitutions in the elements defined with this
type are still blocked. The difference is that this time
<tt class="literal">block</tt> doesn't act on element
substitutions through substitution groups, but it does act on type
substitutions. These <tt class="literal">block</tt> attributes can be seen
as electric switches installed in a series, and each of them can
block the derivation in its own
"line," as shown in <a href="ch12_02.htm">Figure 12-1</a>.
</p>

<a name="xmlschema-CHP-12-FIG-1" /><div class="figure"><img src="figs/xsch_1201.gif" alt="Figure 12-1" width="292" height="241" /></div><h4 class="objtitle">Figure 12-1. Block attribute on elements and complex type definitions</h4>

<p>For each <tt class="literal">restriction</tt> and
<tt class="literal">extension</tt>, the substitutions can first be switched
off for both element and type substitutions by the
<tt class="literal">block</tt> attribute of the element definition, and
then the type substitutions can be blocked by the
<tt class="literal">block</tt> attribute of the complex type definition.
The value <tt class="literal">substitution</tt> in the block attribute of
the element definition acts as a global switch to block all element
substitutions, including a third line, which allows element
substitutions with the same type and cannot be blocked separately.
</p>

<p>The default value supplied in the schema element is used at both
levels and may be different for the element and complex type
definitions if they belong to different schemas and have a different
<tt class="literal"><a href="ch15_01.htm">xs:schema</a></tt><a name="INDEX-951" /> ancestor. The fact that the default
value, when defined in the <tt class="literal"><a href="ch15_01.htm">xs:schema</a></tt> ancestor, is applied to both levels
means that it may block the derivation for those to levels (by
"opening" two switches). To
override such a nonempty default value, you need to define a
<tt class="literal">block</tt> attribute both in the element and in the
complex type definition.
</p>

</div>

<a name="xmlschema-CHP-12-SECT-2.3.2" /><div class="sect3">
<h3 class="sect3">12.2.3.2. Final complex types</h3>

<p>The <a name="INDEX-952" /><tt class="literal">final</tt>
<a name="INDEX-953" />attribute of complex type
definitions controls whether the type can be derived by restriction
and or extension to create new complex types.
</p>

<p>Unlike the <tt class="literal">block</tt> attribute which is linked with
its counterpart in the element definition, the
<tt class="literal">final</tt> attribute in a complex type definition
applies only to the complex type itself and, like the
<tt class="literal">abstract</tt> attribute in the element definition, it
acts at the level of the schema itself and has no impact on the
instance documents.
</p>

</div>

<a name="xmlschema-CHP-12-SECT-2.3.3" /><div class="sect3">
<h3 class="sect3">12.2.3.3. Abstract complex types</h3>

<p>The <tt class="literal">abstract</tt><a name="INDEX-954" /> <a name="INDEX-955" />attribute of complex type definitions
works on the instance documents. When an abstract datatype is used to
define elements, the type must be substituted in the instance
documents through a <tt class="literal">xsi:type</tt> attribute.
</p>

<p>We need to insist that <tt class="literal">abstract</tt> by itself
doesn't mean that the complex type cannot be used in
a content model. However, if it is used, it must be substituted
through <tt class="literal">xsi:type</tt> in the instance documents. To
define a complex type that will not be usable in a content model, we
need to use both the <tt class="literal">final</tt> and
<tt class="literal">block</tt> attributes; the complex
type's only use is as a base type for derivations.
</p>

</div>
</div>
<a name="xmlschema-CHP-12-SECT-2.4" /><div class="sect2">
<h3 class="sect2">12.2.4. Simple Types</h3>

<p>Simple <a name="INDEX-956" />types are, in fact, simpler, as
far as controlling their derivation is concerned, since they can only
be <tt class="literal">final</tt>. Their
<tt class="literal">final</tt><a name="INDEX-957" /> attribute can take the values
<tt class="literal">list</tt>, <tt class="literal">restriction</tt>,
<tt class="literal">union</tt>, or the special value
<tt class="literal">#all</tt>, which means the three of them and the
default value are controlled through the
<tt class="literal">finalDefault</tt><a name="INDEX-958" /> attribute of the schema element used for
elements and complex types.
</p>

<p>The fact that simple types cannot be <tt class="literal">abstract</tt> or
<tt class="literal">block</tt> ed avoids potential issues when they are used
to define attributes for which these notions are meaningless. When
needed to define elements, a simple content complex type may be
created using the simple type as its base. This complex type can hold
the <tt class="literal">abstract</tt> and <tt class="literal">block</tt>
attribute.
</p>

<p>Even though <tt class="literal">final</tt> is the only attribute
controlling simple type element derivation available on the
<a name="INDEX-959" /><tt class="literal"><a href="ch15_01.htm">xs:simpleType(global definition)</a></tt>
element, a finer granularity of control may be achieved through the
<tt class="literal">fixed</tt><a name="INDEX-960" /> attributes available on each of the
facets (discussed in <a href="ch05_01.htm">Chapter 5, "Creating Simple Datatypes"</a>).
</p>

</div>
<a name="xmlschema-CHP-12-SECT-2.5" /><div class="sect2">
<h3 class="sect2">12.2.5. Other Components and Redefinitions</h3>

<p>Other components, such as attributes and element and attribute
groups, cannot be directly derived. Attributes can't
be derived at all and groups can only be derived through
redefinitions; therefore, no control is available to control their
derivation. Similarly, the redefinitions of groups through
<tt class="literal"><a href="ch15_01.htm">xs:redefine</a></tt> escape this feature
and cannot be controlled at all. Although the recommendation is fuzzy
on this aspect, it is safer to consider that the
<tt class="literal">final</tt> attribute of the complex types applies also
to their redefinitions, which are processed as implicit derivations.
</p>



<a name="ch12-6-fm2xml" /><blockquote><b>TIP:</b> 
The interpretation of the <tt class="literal">block</tt> attribute is
subject to multiple interpretations. For the latest opinion of the
W3C XML Schema Working Group, you should refer to the errata for the
specification <a name="INDEX-961" /> <a name="INDEX-962" />at <a href="../../../../../../www.w3.org/2001/05/xmlschema-errata">http://www.w3.org/2001/05/xmlschema-errata</a>. 
</p>
</blockquote>



</div>


<hr width="684" align="left" />
<div class="navbar"><table width="684" border="0"><tr><td align="left" valign="top" width="228"><a href="ch12_01.htm"><img src="../gifs/txtpreva.gif" alt="Previous" border="0" /></a></td><td align="center" valign="top" width="228"><a href="index.htm"><img src="../gifs/txthome.gif" alt="Home" border="0" /></a></td><td align="right" valign="top" width="228"><a href="ch13_01.htm"><img src="../gifs/txtnexta.gif" alt="Next" border="0" /></a></td></tr><tr><td align="left" valign="top" width="228">12. Creating More Building Blocks Using Object-Oriented Features</td><td align="center" valign="top" width="228"><a href="index/index.htm"><img src="../gifs/index.gif" alt="Book Index" border="0" /></a></td><td align="right" valign="top" width="228">13. Creating Extensible Schemas</td></tr></table></div>
<hr width="684" align="left" />

<img src="../gifs/navbar.gif" usemap="#library-map" border="0" alt="Library Navigation Links" />
<p><p><font size="-1"><a href="copyrght.htm">Copyright &copy; 2002</a> O'Reilly &amp; Associates. All rights reserved.</font></p>

<map name="library-map">
<area shape="rect" coords="0,0,85,93" href="../index.htm"><area shape="rect" coords="85,0,180,98" href="../sax2/index.htm"><area shape="rect" coords="182,-1,261,100" href="../xmlnut/index.htm"><area shape="rect" coords="263,1,384,96" href="../jxml/index.htm"><area shape="rect" coords="386,1,463,100" href="../jxslt/index.htm"><area shape="rect" coords="466,1,533,112" href="../xslt/index.htm"><area shape="rect" coords="535,-1,610,108" href="index.htm"><area shape="rect" coords="613,1,696,121" href="../pxml/index.htm">
</map>

</body></html>