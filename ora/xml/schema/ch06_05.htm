<html><head><title>Common Patterns (XML Schema)</title><link rel="stylesheet" type="text/css" href="../style/style1.css" />

<meta name="DC.Creator" content="Eric van der Vlist" /><meta name="DC.Format" content="text/xml" scheme="MIME" /><meta name="DC.Language" content="en-US" /><meta name="DC.Publisher" content="O'Reilly &amp; Associates, Inc." /><meta name="DC.Source" scheme="ISBN" content="0596002521L" /><meta name="DC.Subject.Keyword" content="stuff" /><meta name="DC.Title" content="XML Schema" /><meta name="DC.Type" content="Text.Monograph" />

</head><body bgcolor="#ffffff">

<img src="gifs/smbanner.gif" usemap="#banner-map" border="0" alt="Book Home" /><map name="banner-map"><area shape="rect" coords="1,-2,616,66" href="index.htm" alt="XML Schema" /><area shape="rect" coords="629,-11,726,25" href="jobjects/fsearch.htm" alt="Search this book" /></map>

<div class="navbar"><table width="684" border="0"><tr><td align="left" valign="top" width="228"><a href="ch06_04.htm"><img src="../gifs/txtpreva.gif" alt="Previous" border="0" /></a></td><td align="center" valign="top" width="228" /><td align="right" valign="top" width="228"><a href="ch06_06.htm"><img src="../gifs/txtnexta.gif" alt="Next" border="0" /></a></td></tr></table></div>



<h2 class="sect1">6.5. Common Patterns</h2>

<p>After <a name="INDEX-469" />this overview of the syntax used by
patterns, let's see some common patterns that you
may have to use (or adapt) in your schemas or just consider as
examples.
</p>

<a name="xmlschema-CHP-6-SECT-5.1" /><div class="sect2">
<h3 class="sect2">6.5.1. String Datatypes</h3>

<p>Regular <a name="INDEX-470" />expressions treat information in its
textual form. This makes them an excellent mechanism for constraining
strings.
</p>

<a name="xmlschema-CHP-6-SECT-5.1.1" /><div class="sect3">
<h3 class="sect3">6.5.1.1. Unicode blocks</h3>

<p>Unicode
<a name="INDEX-471" />is a great asset of XML;
however, there are few applications able to process and display all
the characters of the Unicode set correctly and still fewer users
able to read them! If you need to check that your string datatypes
belong to one (or more) Unicode blocks, you can derive them from
basic types such as:
</p>

<blockquote><pre class="code">&lt;xs:simpleType name="BasicLatinToken"&gt;
  &lt;xs:restriction base="xs:token"&gt;
    &lt;xs:pattern value="\p{IsBasicLatin}*"/&gt;
  &lt;/xs:restriction&gt;
&lt;/xs:simpleType&gt;

&lt;xs:simpleType name="Latin-1Token"&gt;
  &lt;xs:restriction base="xs:token"&gt;
    &lt;xs:pattern value="[\p{IsBasicLatin}\p{IsLatin-1Supplement}]*"/&gt;
  &lt;/xs:restriction&gt;
&lt;/xs:simpleType&gt;</pre></blockquote>

<p>Note that such patterns do not impose a character encoding on the
document itself and that, for instance, the
<tt class="literal">Latin-1Token</tt> datatype could validate instance
documents using UTF-8, UTF-16, ISO-8869-1 or other encoding. (This
assumes the characters used in this string belong to the two Unicode
blocks <tt class="literal">BasicLatin</tt><a name="INDEX-472" /> and
<tt class="literal">Latin-1Supplement</tt><a name="INDEX-473" />.) In other words, working on the
lexical space, i.e., after the transformations have been done by the
parser, these patterns do not control the physical format of the
instance documents.
</p>

</div>

<a name="xmlschema-CHP-6-SECT-5.1.2" /><div class="sect3">
<h3 class="sect3">6.5.1.2. Counting words</h3>

<p>We <a name="INDEX-474" /> <a name="INDEX-475" />have already seen a trick to count the
words using a dummy derivation by list; however, this derivation
counts only whitespace-separated
"words," ignoring the punctuation
that was treated like normal characters. We can limit the number of
words using a couple of patterns. To do so, we can define an atom,
which is a sequence of one or more
"word" characters
(<tt class="literal">\w+</tt>) followed by one or more nonword characters
(<tt class="literal">\W+</tt>), and control its number of occurrences. If
we are not very strict on the punctuation, we also need to allow an
arbitrary number of nonword characters at the beginning of our value
and to deal with the possibility of a value ending with a word
(without further separation). One of the ways to avoid any ambiguity
at the end of the string is to dissociate the last occurrence of a
word to make the trailing separator optional:
</p>

<blockquote><pre class="code">&lt;xs:simpleType name="story100-200words"&gt;
  &lt;xs:restriction base="xs:token"&gt;
    &lt;xs:pattern value="\W*(\w+\W+){99,199}\w+\W*"/&gt;
  &lt;/xs:restriction&gt;
&lt;/xs:simpleType&gt;</pre></blockquote>

</div>

<a name="xmlschema-CHP-6-SECT-5.1.3" /><div class="sect3">
<h3 class="sect3">6.5.1.3. URIs</h3>

<p>We have seen that <a name="INDEX-476" /><tt class="literal"><a href="ch16_01.htm">xs:anyURI</a></tt>
doesn't care about
"absolutizing" relative URIs and it
may be wise to impose the usage of absolute URIs, which are easier to
process. Furthermore, it can also be interesting for some
applications to limit the accepted URI schemes. This can easily be
done by a set of patterns such as:
</p>

<blockquote><pre class="code">&lt;xs:simpleType name="httpURI"&gt;
  &lt;xs:restriction base="xs:anyURI"&gt;
    &lt;xs:pattern value="http://.*"/&gt;
  &lt;/xs:restriction&gt;
&lt;/xs:simpleType&gt;</pre></blockquote>

</div>
</div>
<a name="xmlschema-CHP-6-SECT-5.2" /><div class="sect2">
<h3 class="sect2">6.5.2. Numeric and Float Types</h3>

<p>While <a name="INDEX-477" /> <a name="INDEX-478" />numeric types aren't
strictly text, patterns can still be used appropriately to constrain
their lexical form.
</p>

<a name="xmlschema-CHP-6-SECT-5.2.1" /><div class="sect3">
<h3 class="sect3">6.5.2.1. Leading zeros</h3>

<p>Getting rid of <a name="INDEX-479" /> <a name="INDEX-480" />leading zeros is quite simple but
requires some precautions if we want to keep the optional sign and
the number "0" itself. This can be
done using patterns such as:
</p>

<blockquote><pre class="code">&lt;xs:simpleType name="noLeadingZeros"&gt;
  &lt;xs:restriction base="xs:integer"&gt;
    &lt;xs:pattern value="[+-]?([1-9][0-9]*|0)"/&gt;
  &lt;/xs:restriction&gt;
&lt;/xs:simpleType&gt;</pre></blockquote>

<p>Note that in this pattern, we chose to redefine all the lexical rules
that apply to an integer. This pattern would give the same lexical
space applied to a <tt class="literal"><a href="ch16_01.htm">xs:token</a></tt>
datatype as on a <tt class="literal"><a href="ch16_01.htm">xs:integer</a></tt>. We could also have
relied on the knowledge of the base datatype and written:
</p>

<blockquote><pre class="code">  &lt;xs:simpleType name="noLeadingZeros"&gt;
    &lt;xs:restriction base="xs:integer"&gt;
      &lt;xs:pattern value="[+-]?([^0].*|0)"/&gt;
    &lt;/xs:restriction&gt;
  &lt;/xs:simpleType&gt;</pre></blockquote>

<p>Relying on the base datatype in this manner can produce simpler
patterns, but can also be more difficult to interpret since we would
have to combine the lexical rules of the base datatype to the rules
expressed by the pattern to understand the result.
</p>

</div>

<a name="xmlschema-CHP-6-SECT-5.2.2" /><div class="sect3">
<h3 class="sect3">6.5.2.2. Fixed format</h3>

<p>The maximum number of digits can be fixed using
<a name="INDEX-481" />
<a name="INDEX-482" /><tt class="literal"><a href="ch15_01.htm">xs:totalDigits</a></tt> and <tt class="literal"><a href="ch15_01.htm">xs:fractionDigits</a></tt>. However, these facets are only maximum
numbers and work on the value space. If we want to fix the format of
the <a name="INDEX-483" />lexical space to be, for instance,
"DDDD.DD", we can write a pattern
such as:
</p>

<blockquote><pre class="code">&lt;xs:simpleType name="fixedDigits"&gt;
  &lt;xs:restriction base="xs:decimal"&gt;
    &lt;xs:pattern value="[+-]\.{4}\..{2}"/&gt;
  &lt;/xs:restriction&gt;
&lt;/xs:simpleType&gt;</pre></blockquote>

</div>
</div>
<a name="xmlschema-CHP-6-SECT-5.3" /><div class="sect2">
<h3 class="sect2">6.5.3. Datetimes</h3>

<p>Dates <a name="INDEX-484" /> <a name="INDEX-485" />and <a name="INDEX-486" />time have complex lexical representations.
Patterns can give developers extra control over how they are used.
</p>

<a name="xmlschema-CHP-6-SECT-5.3.1" /><div class="sect3">
<h3 class="sect3">6.5.3.1. Time zones</h3>

<p>The <a name="INDEX-487" /> <a name="INDEX-488" />time zone support of W3C XML Schema is
quite controversial and needs some additional constraints to avoid
comparison problems. These patterns can be kept relatively simple
since the syntax of the datetime is already checked by the schema
validator and only simple additional checks need to be added.
Applications which require that their datetimes specify a time zone
may use the following template, which checks that the time part ends
with a "Z" or contains a sign:
</p>

<blockquote><pre class="code">&lt;xs:simpleType name="dateTimeWithTimezone"&gt;
  &lt;xs:restriction base="xs:dateTime"&gt;
    &lt;xs:pattern value=".+T.+(Z|[+-].+)"/&gt;
  &lt;/xs:restriction&gt;
&lt;/xs:simpleType&gt;</pre></blockquote>

<p>Still simpler, applications that want to make sure that none of their
datetimes specify a time zone may just check that the time part
doesn't contain the characters
"+",
"-", or
"Z":
</p>

<blockquote><pre class="code">&lt;xs:simpleType name="dateTimeWithoutTimezone"&gt;
  &lt;xs:restriction base="xs:dateTime"&gt;
    &lt;xs:pattern value=".+T[^Z+-]+"/&gt;
  &lt;/xs:restriction&gt;
&lt;/xs:simpleType&gt;</pre></blockquote>

<p>In these two datatypes, we used the separator
"T". This is convenient, since no
occurrences of the signs can occur after this delimiter except in the
time zone definition. This delimiter would be missing if we wanted to
constrain dates instead of datetimes, but, in this case, we can
detect the time zones on their ":"
instead:
</p>

<blockquote><pre class="code">&lt;xs:simpleType name="dateWithTimezone"&gt;
  &lt;xs:restriction base="xs:date"&gt;
    &lt;xs:pattern value=".+[:Z].*"/&gt;
  &lt;/xs:restriction&gt;
&lt;/xs:simpleType&gt;

&lt;xs:simpleType name="dateWithoutTimezone"&gt;
  &lt;xs:restriction base="xs:date"&gt;
    &lt;xs:pattern value="[^:Z]*"/&gt;
  &lt;/xs:restriction&gt;
&lt;/xs:simpleType&gt;</pre></blockquote>

<p>Applications may also simply impose a set of time zones to use:</p>

<blockquote><pre class="code">&lt;xs:simpleType name="dateTimeInMyTimezones"&gt;
  &lt;xs:restriction base="xs:dateTime"&gt;
    &lt;xs:pattern value=".+\+02:00"/&gt;
    &lt;xs:pattern value=".+\+01:00"/&gt;
    &lt;xs:pattern value=".+\+00:00"/&gt;
    &lt;xs:pattern value=".+Z"/&gt;
    &lt;xs:pattern value=".+-04:00"/&gt;
  &lt;/xs:restriction&gt;
&lt;/xs:simpleType&gt;</pre></blockquote>

<p>We promised earlier to look at <a name="INDEX-489" /><tt class="literal"><a href="ch16_01.htm">xs:duration</a></tt> and see how
we can define two datatypes that have a complete sort order. The
first datatype will consist of durations expressed only in months and
years, and the second will consist of durations expressed only in
days, hours, minutes, and seconds. The criteria used for the test can
be the presence of a "D" (for day)
or a "T" (the time delimiter). If
neither of those characters are detected, then the datatype uses only
year and month parts. The test for the other type cannot be based on
the absence of "Y" and
"M", since there is also an
"M" in the time part. We can test
that, after an optional sign, the first field is either the day part
or the "T" delimiter:
</p>

<a name="INDEX-490" /><blockquote><pre class="code">&lt;xs:simpleType name="YMduration"&gt;
  &lt;xs:restriction base="xs:duration"&gt;
    &lt;xs:pattern value="[^TD]+"/&gt;
  &lt;/xs:restriction&gt;
&lt;/xs:simpleType&gt;

&lt;xs:simpleType name="DHMSduration"&gt;
  &lt;xs:restriction base="xs:duration"&gt;
    &lt;xs:pattern value="-?P((\d+D)|T).*"/&gt;
  &lt;/xs:restriction&gt;
&lt;/xs:simpleType&gt;</pre></blockquote>

</div>
</div>


<hr width="684" align="left" />
<div class="navbar"><table width="684" border="0"><tr><td align="left" valign="top" width="228"><a href="ch06_04.htm"><img src="../gifs/txtpreva.gif" alt="Previous" border="0" /></a></td><td align="center" valign="top" width="228"><a href="index.htm"><img src="../gifs/txthome.gif" alt="Home" border="0" /></a></td><td align="right" valign="top" width="228"><a href="ch06_06.htm"><img src="../gifs/txtnexta.gif" alt="Next" border="0" /></a></td></tr><tr><td align="left" valign="top" width="228">6.4. More Atoms</td><td align="center" valign="top" width="228"><a href="index/index.htm"><img src="../gifs/index.gif" alt="Book Index" border="0" /></a></td><td align="right" valign="top" width="228">6.6. Back to Our Library</td></tr></table></div>
<hr width="684" align="left" />

<img src="../gifs/navbar.gif" usemap="#library-map" border="0" alt="Library Navigation Links" />
<p><p><font size="-1"><a href="copyrght.htm">Copyright &copy; 2002</a> O'Reilly &amp; Associates. All rights reserved.</font></p>

<map name="library-map">
<area shape="rect" coords="0,0,85,93" href="../index.htm"><area shape="rect" coords="85,0,180,98" href="../sax2/index.htm"><area shape="rect" coords="182,-1,261,100" href="../xmlnut/index.htm"><area shape="rect" coords="263,1,384,96" href="../jxml/index.htm"><area shape="rect" coords="386,1,463,100" href="../jxslt/index.htm"><area shape="rect" coords="466,1,533,112" href="../xslt/index.htm"><area shape="rect" coords="535,-1,610,108" href="index.htm"><area shape="rect" coords="613,1,696,121" href="../pxml/index.htm">
</map>

</body></html>