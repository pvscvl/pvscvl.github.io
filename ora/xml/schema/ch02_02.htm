<html><head><title>Our First Schema (XML Schema)</title><link rel="stylesheet" type="text/css" href="../style/style1.css" />

<meta name="DC.Creator" content="Eric van der Vlist" /><meta name="DC.Format" content="text/xml" scheme="MIME" /><meta name="DC.Language" content="en-US" /><meta name="DC.Publisher" content="O'Reilly &amp; Associates, Inc." /><meta name="DC.Source" scheme="ISBN" content="0596002521L" /><meta name="DC.Subject.Keyword" content="stuff" /><meta name="DC.Title" content="XML Schema" /><meta name="DC.Type" content="Text.Monograph" />

</head><body bgcolor="#ffffff">

<img src="gifs/smbanner.gif" usemap="#banner-map" border="0" alt="Book Home" /><map name="banner-map"><area shape="rect" coords="1,-2,616,66" href="index.htm" alt="XML Schema" /><area shape="rect" coords="629,-11,726,25" href="jobjects/fsearch.htm" alt="Search this book" /></map>

<div class="navbar"><table width="684" border="0"><tr><td align="left" valign="top" width="228"><a href="ch02_01.htm"><img src="../gifs/txtpreva.gif" alt="Previous" border="0" /></a></td><td align="center" valign="top" width="228" /><td align="right" valign="top" width="228"><a href="ch02_03.htm"><img src="../gifs/txtnexta.gif" alt="Next" border="0" /></a></td></tr></table></div>



<h2 class="sect1">2.2. Our First Schema</h2>

<p>We will see, in the course of this book, that there are many
different styles for writing a schema, and there are even more
approaches to deriving a schema from an instance document. For our
first schema, we will adopt a style that is familiar to those of you
who have already worked with DTDs. We'll start by
creating a classified list of the elements and attributes found in
the schema.
</p>

<p>The <a name="INDEX-26" />
<a name="INDEX-27" />elements
<a name="INDEX-28" />
<a name="INDEX-29" />existing
in our instance document are <tt class="literal">author</tt>,
<tt class="literal">book</tt>, <tt class="literal">born</tt>,
<tt class="literal">character</tt>, <tt class="literal">dead</tt>,
<tt class="literal">isbn</tt>, <tt class="literal">library</tt>,
<tt class="literal">name</tt>, <tt class="literal">qualification</tt>, and
<tt class="literal">title</tt>, and the attributes are
<tt class="literal">available</tt>, <tt class="literal">id</tt>, and
<tt class="literal">lang</tt>.
</p>

<p>We will build our first <a name="INDEX-30" />schema
by defining each element in turn under our schema document element
(named, unsurprisingly, <tt class="literal">schema</tt>), which belongs to
the W3C XML Schema namespace (<a href="../../../../../../www.w3.org/2001/XMLSchema">http://www.w3.org/2001/XMLSchema</a>) and is
usually prefixed as "xs."
</p>

<p>Before we start, we need to classify the elements and, for this
exercise, give some key definitions for understanding how W3C XML
Schema does this classification. (We will see these definitions in
more detail in the chapters about simple and complex types.)
</p>

<p>The <a name="INDEX-31" />content
model characterizes the types of <a name="INDEX-32" />children elements and
<a name="INDEX-33" />text nodes that
can be included in an element (without paying any attention to the
attributes).
</p>

<p>The content model is said to be
"<a name="INDEX-34" />empty" when no children
elements nor text nodes are expected,
"<a name="INDEX-35" />simple" when only text
nodes are accepted, "<a name="INDEX-36" />complex" when
only subelements are expected, and
"<a name="INDEX-37" />mixed" when both text
nodes and sub-elements can be present. Note that to determine the
content model, we pay attention only to the element and text nodes
and ignore any attribute, comment, or processing instruction that
could be included. For instance, an element with some attributes, a
comment, and a couple of processing instructions would have an
"empty" content model if it has no
text or element children.
</p>

<p>Elements such as <tt class="literal">name</tt>, <tt class="literal">born</tt>,
and <tt class="literal">title</tt> have simple content models:
</p>

<blockquote><pre class="code">.../...
        
  &lt;title lang="en"&gt;
    Being a Dog Is a Full-Time Job
  &lt;/title&gt;
.../...
        
  &lt;name&gt;
    Charles M Schulz
  &lt;/name&gt;
        
  &lt;born&gt;
    1922-11-26
  &lt;/born&gt;
.../...</pre></blockquote>

<p>Elements such as <tt class="literal">library</tt> or
<tt class="literal">character</tt> have complex content models:
</p>

<blockquote><pre class="code">&lt;library&gt;
  &lt;book id="b0836217462" available="true"&gt;
    .../...
  &lt;/book&gt;
&lt;/library&gt;

              
&lt;character id="Lucy"&gt;
  &lt;name&gt;
    Lucy
  &lt;/name&gt;
  &lt;born&gt;
    1952-03-03
  &lt;/born&gt;
  &lt;qualification&gt;
    bossy, crabby and selfish
  &lt;/qualification&gt;
&lt;/character&gt;</pre></blockquote>

<p>Within elements that have a simple content model, we can distinguish
those which have attributes and those which cannot have any
attributes. Later chapters discuss how W3C XML Schema can also
represent empty and mixed content models.
</p>

<p>W3C XML Schema considers the <a name="INDEX-38" />elements that have a simple content
model and no attributes "<a name="INDEX-39" />simple types," while
all the other elements (such as simple content with attributes and
other content models) are
"<a name="INDEX-40" />complex types." In
other words, when an element can only have text nodes and
doesn't accept any child elements or attributes, it
is considered a simple type; in all the other cases, it is a complex
type.
</p>

<p>Attributes always have a simple type since they have no children and
contain only a text value.
</p>

<p>In <a name="INDEX-41" />
<a name="INDEX-42" />
<a name="INDEX-43" />our example, elements such as
<tt class="literal">author</tt> or <tt class="literal">title</tt> have a complex
type:
</p>

<blockquote><pre class="code">  &lt;author id="CMS"&gt;
    &lt;name&gt;
      Charles M Schulz
    &lt;/name&gt;
    &lt;born&gt;
      1922-11-26
    &lt;/born&gt;
    &lt;dead&gt;
      2000-02-12
    &lt;/dead&gt;
  &lt;/author&gt;
.../...
              
  &lt;title lang="en"&gt;
    Being a Dog Is a Full-Time Job
  &lt;/title&gt;</pre></blockquote>

<p>While elements such as <tt class="literal">born</tt> or
<tt class="literal">qualification</tt> (and, of course, all the attributes)
have a simple type:
</p>

<blockquote><pre class="code">  &lt;born&gt;
    1922-11-26
  &lt;/born&gt;
.../...
                        
  &lt;qualification&gt;
    brought classical music to the Peanuts strip
  &lt;/qualification&gt;
.../... 

  &lt;book available="true"/&gt;</pre></blockquote>

<p>Now that we have criteria to classify our components, we can define
each of them. Let's start with the simplest one by
taking a type element, such as the <tt class="literal">name</tt> element
that can be found in <tt class="literal">author</tt> or
<tt class="literal">character</tt>:
</p>

<blockquote><pre class="code">&lt;name&gt;
  Charles M Schulz
&lt;/name&gt;</pre></blockquote>

<p>To define such an element, we use <a name="INDEX-44" />an <tt class="literal"><a href="ch15_01.htm">xs:element(global definition)</a></tt>, included directly under the <tt class="literal"><a href="ch15_01.htm">xs:schema</a></tt> document element:
</p>

<blockquote><pre class="code">&lt;xs:schema xmlns:xs="http://www.w3.org/2001/XMLSchema"&gt;
  &lt;xs:element name="name" type="xs:string"/&gt;
  .../...
&lt;/xs:schema&gt;</pre></blockquote>

<p>The value used to reference the datatype (<tt class="literal"><a href="ch16_01.htm">xs:string</a></tt>) is prefixed by
<tt class="literal">xs</tt>, the prefix associated with W3C XML Schema.
This means that <tt class="literal">xs</tt>:<tt class="literal">string</tt> is a
predefined W3C XML Schema datatype.
</p>

<p>The same can be done for all the other <a name="INDEX-45" />simple
types as well as for the attributes:
</p>

<blockquote><pre class="code">&lt;xs:schema xmlns:xs="http://www.w3.org/2001/XMLSchema"&gt;
  &lt;xs:element name="name" type="xs:string"/&gt;
  &lt;xs:element name="qualification" type="xs:string"/&gt;
  &lt;xs:element name="born" type="xs:date"/&gt;
  &lt;xs:element name="dead" type="xs:date"/&gt;
  &lt;xs:element name="isbn" type="xs:string"/&gt;
  &lt;xs:attribute name="id" type="xs:ID"/&gt;
  &lt;xs:attribute name="available" type="xs:boolean"/&gt;
  &lt;xs:attribute name="lang" type="xs:language"/&gt;
  .../...
&lt;/xs:schema&gt;</pre></blockquote>

<p>While we said that this
<a name="INDEX-46" /> <a name="INDEX-47" />design style would be familiar to DTD
users, we must note that it is flatter than a DTD since the
declaration of the attributes is done outside of the declaration of
the elements. This results in a schema in which elements and
attributes get fairly equal treatment. We will see, though, that when
a schema describes an XML vocabulary that uses a namespace, this
simple flat style is impossible to use most of time.
</p>



<a name="ch02-3-fm2xml" /><blockquote><b>NOTE:</b> 
The assimilation of simple type elements and attributes is a
simplification compared to the XPath, DOM, and Infoset data models.
These consider a simple type element to be an item having a single
child item of type "character," and
an attribute to be an item having a normalized value. The benefit of
this simplification is we can use simple datatypes to define simple
type elements and attributes indifferently and write in a consistent
fashion:
</p>

<blockquote><pre class="code">  &lt;xs:element name="isbn" type="xs:string"/&gt;
                or
  &lt;xs:attribute name="isbn" type="xs:string"/&gt;</pre></blockquote>
</blockquote>

<p>The order of the definitions in a schema isn't
significant; we can now take the next step in terms of type
complexity and define the <tt class="literal">title</tt> element that
appears in the instance document as:
</p>

<blockquote><pre class="code">&lt;title lang="en"&gt;
  Being a Dog Is a Full-Time Job
&lt;/title&gt;</pre></blockquote>

<p>Since this element has an attribute, it has a
<a name="INDEX-48" />complex
type. Since it has only a text node, it is considered to have a
<a name="INDEX-49" />simple
content. We will, therefore, write its definition as:
</p>

<blockquote><pre class="code">&lt;xs:element name="title"&gt;
  &lt;xs:complexType&gt;
    &lt;xs:simpleContent&gt;
      &lt;xs:extension base="xs:string"&gt;
        &lt;xs:attribute ref="lang"/&gt;
      &lt;/xs:extension&gt;
    &lt;/xs:simpleContent&gt;
  &lt;/xs:complexType&gt;
&lt;/xs:element&gt;</pre></blockquote>

<p>The XML syntax makes it verbose, but this can almost be read as plain
English as "the element named
<tt class="literal">title</tt> has a complex type which is a simple content
obtained by extending the predefined datatype <tt class="literal"><a href="ch16_01.htm">xs:string</a></tt> by adding the attribute defined in
this schema and having the name
<tt class="literal">lang</tt>."
</p>

<p>The remaining elements (<tt class="literal">library</tt>,
<tt class="literal">book</tt>, <tt class="literal">author</tt>, and
<tt class="literal">character</tt>) are all complex types with
<a name="INDEX-50" />complex
content. They are defined by defining the sequence of elements and
attributes that will compose them.
</p>

<p>The <tt class="literal">library</tt> element, the most straightforward of
them, is defined as:
</p>

<blockquote><pre class="code">&lt;xs:element name="library"&gt;
  &lt;xs:complexType&gt;
    &lt;xs:sequence&gt;
      &lt;xs:element ref="book" maxOccurs="unbounded"/&gt;
    &lt;/xs:sequence&gt;
  &lt;/xs:complexType&gt;
&lt;/xs:element&gt;</pre></blockquote>

<p>This definition can be read as "the element named
<tt class="literal">library</tt> is a complex type composed of a sequence
of 1 to many occurrences (note the <tt class="literal">maxOccurs</tt>
attribute) of elements defined as having a name
<tt class="literal">book</tt>."
</p>

<p>The element <tt class="literal">author</tt>, which has an attribute and for
which we may consider the date of death as optional, could be:
</p>

<blockquote><pre class="code">&lt;xs:element name="author"&gt;
  &lt;xs:complexType&gt;
    &lt;xs:sequence&gt;
      &lt;xs:element ref="name"/&gt;
      &lt;xs:element ref="born"/&gt;
      &lt;xs:element ref="dead" minOccurs="0"/&gt;
    &lt;/xs:sequence&gt;
    &lt;xs:attribute ref="id"/&gt;
  &lt;/xs:complexType&gt;
&lt;/xs:element&gt;</pre></blockquote>

<p>This means the element named <tt class="literal">author</tt> is a complex
type composed of a sequence of three elements
(<tt class="literal">name</tt>, <tt class="literal">born</tt>, and
<tt class="literal">dead</tt>), and <tt class="literal">id</tt>. The
<em class="emphasis">dead</em> element is optional- it may occur zero
times.
</p>

<p>The <tt class="literal">minOccurs</tt><a name="INDEX-51" /> and
<tt class="literal">maxOccurs</tt><a name="INDEX-52" /> attributes, which we have seen in a
couple of previous elements, allow us to define the minimum and
maximum number of occurrences. Their default value is 1, which means
that when they are both missing, the element must appear exactly one
time in the sequence. The special value
"unbounded" may be used for
<tt class="literal">maxOccurs</tt> when the maximum number of occurrences
is unlimited.
</p>

<p>The attributes need to be defined after the sequence. The remaining
elements (<tt class="literal">book</tt> and <tt class="literal">character</tt>)
can be defined in the same way, which leads us to the following full
schema:
</p>

<a name="INDEX-53" /><a name="INDEX-54" /><a name="INDEX-55" /><a name="INDEX-56" /><blockquote><pre class="code">&lt;?xml version="1.0"?&gt;
&lt;xs:schema xmlns:xs="http://www.w3.org/2001/XMLSchema"&gt;
  &lt;xs:element name="name" type="xs:string"/&gt;
  &lt;xs:element name="qualification" type="xs:string"/&gt;
  &lt;xs:element name="born" type="xs:date"/&gt;
  &lt;xs:element name="dead" type="xs:date"/&gt;
  &lt;xs:element name="isbn" type="xs:string"/&gt;
  &lt;xs:attribute name="id" type="xs:ID"/&gt;
  &lt;xs:attribute name="available" type="xs:boolean"/&gt;
  &lt;xs:attribute name="lang" type="xs:language"/&gt;
  &lt;xs:element name="title"&gt;
    &lt;xs:complexType&gt;
      &lt;xs:simpleContent&gt;
        &lt;xs:extension base="xs:string"&gt;
          &lt;xs:attribute ref="lang"/&gt;
        &lt;/xs:extension&gt;
      &lt;/xs:simpleContent&gt;
    &lt;/xs:complexType&gt;
  &lt;/xs:element&gt;
  &lt;xs:element name="library"&gt;
    &lt;xs:complexType&gt;
      &lt;xs:sequence&gt;
        &lt;xs:element ref="book" maxOccurs="unbounded"/&gt;
      &lt;/xs:sequence&gt;
    &lt;/xs:complexType&gt;
  &lt;/xs:element&gt;
  &lt;xs:element name="author"&gt;
    &lt;xs:complexType&gt;
      &lt;xs:sequence&gt;
        &lt;xs:element ref="name"/&gt;
        &lt;xs:element ref="born"/&gt;
        &lt;xs:element ref="dead" minOccurs="0"/&gt;
      &lt;/xs:sequence&gt;
      &lt;xs:attribute ref="id"/&gt;
    &lt;/xs:complexType&gt;
  &lt;/xs:element&gt;
  &lt;xs:element name="book"&gt;
    &lt;xs:complexType&gt;
      &lt;xs:sequence&gt;
        &lt;xs:element ref="isbn"/&gt;
        &lt;xs:element ref="title"/&gt;
        &lt;xs:element ref="author" minOccurs="0" maxOccurs="unbounded"/&gt; 
        &lt;xs:element ref="character" minOccurs="0"
          maxOccurs="unbounded"/&gt;
      &lt;/xs:sequence&gt;
      &lt;xs:attribute ref="id"/&gt;
      &lt;xs:attribute ref="available"/&gt;
    &lt;/xs:complexType&gt;
  &lt;/xs:element&gt;
  &lt;xs:element name="character"&gt;
    &lt;xs:complexType&gt;
      &lt;xs:sequence&gt;
        &lt;xs:element ref="name"/&gt;
        &lt;xs:element ref="born"/&gt;
        &lt;xs:element ref="qualification"/&gt;
      &lt;/xs:sequence&gt;
      &lt;xs:attribute ref="id"/&gt;
    &lt;/xs:complexType&gt;
  &lt;/xs:element&gt;
&lt;/xs:schema&gt;

</pre></blockquote>



<hr width="684" align="left" />
<div class="navbar"><table width="684" border="0"><tr><td align="left" valign="top" width="228"><a href="ch02_01.htm"><img src="../gifs/txtpreva.gif" alt="Previous" border="0" /></a></td><td align="center" valign="top" width="228"><a href="index.htm"><img src="../gifs/txthome.gif" alt="Home" border="0" /></a></td><td align="right" valign="top" width="228"><a href="ch02_03.htm"><img src="../gifs/txtnexta.gif" alt="Next" border="0" /></a></td></tr><tr><td align="left" valign="top" width="228">2. Our First Schema</td><td align="center" valign="top" width="228"><a href="index/index.htm"><img src="../gifs/index.gif" alt="Book Index" border="0" /></a></td><td align="right" valign="top" width="228">2.3. First Findings</td></tr></table></div>
<hr width="684" align="left" />

<img src="../gifs/navbar.gif" usemap="#library-map" border="0" alt="Library Navigation Links" />
<p><p><font size="-1"><a href="copyrght.htm">Copyright &copy; 2002</a> O'Reilly &amp; Associates. All rights reserved.</font></p>

<map name="library-map">
<area shape="rect" coords="0,0,85,93" href="../index.htm"><area shape="rect" coords="85,0,180,98" href="../sax2/index.htm"><area shape="rect" coords="182,-1,261,100" href="../xmlnut/index.htm"><area shape="rect" coords="263,1,384,96" href="../jxml/index.htm"><area shape="rect" coords="386,1,463,100" href="../jxslt/index.htm"><area shape="rect" coords="466,1,533,112" href="../xslt/index.htm"><area shape="rect" coords="535,-1,610,108" href="index.htm"><area shape="rect" coords="613,1,696,121" href="../pxml/index.htm">
</map>

</body></html>