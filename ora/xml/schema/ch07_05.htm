<html><head><title>Mixed Content Models (XML Schema)</title><link rel="stylesheet" type="text/css" href="../style/style1.css" />

<meta name="DC.Creator" content="Eric van der Vlist" /><meta name="DC.Format" content="text/xml" scheme="MIME" /><meta name="DC.Language" content="en-US" /><meta name="DC.Publisher" content="O'Reilly &amp; Associates, Inc." /><meta name="DC.Source" scheme="ISBN" content="0596002521L" /><meta name="DC.Subject.Keyword" content="stuff" /><meta name="DC.Title" content="XML Schema" /><meta name="DC.Type" content="Text.Monograph" />

</head><body bgcolor="#ffffff">

<img src="gifs/smbanner.gif" usemap="#banner-map" border="0" alt="Book Home" /><map name="banner-map"><area shape="rect" coords="1,-2,616,66" href="index.htm" alt="XML Schema" /><area shape="rect" coords="629,-11,726,25" href="jobjects/fsearch.htm" alt="Search this book" /></map>

<div class="navbar"><table width="684" border="0"><tr><td align="left" valign="top" width="228"><a href="ch07_04.htm"><img src="../gifs/txtpreva.gif" alt="Previous" border="0" /></a></td><td align="center" valign="top" width="228" /><td align="right" valign="top" width="228"><a href="ch07_06.htm"><img src="../gifs/txtnexta.gif" alt="Next" border="0" /></a></td></tr></table></div>



<h2 class="sect1">7.5. Mixed Content Models</h2>

<p>Although W3CXML Schema permits mixed content models and describes
them better than in XML DTDS, W3CXML Schema treats them as an add-on
plugged on top of complex content models. The good news is that this
allows control of children elements exactly as we've
just seen for complex contents. The bad news is that we abandon any
control over the child text nodes whose values cannot be constrained
at all, and, of course, the descriptions of the child elements are
subject to the same limitations as in the case of complex content
models. The limitations on unordered content models are probably even
more unfriendly for mixed content models, which are more
"free style," than the limitation
is for complex content models.
</p>

<a name="xmlschema-CHP-7-SECT-5.1" /><div class="sect2">
<h3 class="sect2">7.5.1. Creating Mixed Content Models</h3>

<p>This <a name="INDEX-596" />
<a name="INDEX-597" />add-on is implemented
through a <tt class="literal">mixed</tt> attribute in the
<a name="INDEX-598" /><tt class="literal"><a href="ch15_01.htm">xs:complexType(global definition)</a></tt>,
which is otherwise used exactly as we've seen for
complex content models. The effect of this attribute when its value
is set to <tt class="literal">"true"</tt> is to allow any text nodes within
the content model, before, between, and after the child elements. The
location, the whitespace processing, and the datatype of these text
nodes cannot be restricted in any way.
</p>

<p>Let's go back to the definition of our
<tt class="literal">title</tt> element and change it to accept a reduced
version of XHTML with the <tt class="literal">a</tt> link and an
<tt class="literal">em</tt> element to highlight some parts of its text.
The definition, which was previously done by extending a simple type
to create a simple content complex type, needs to be re-written as a
complex content definition with a mixed attribute set to
<tt class="literal">"true"</tt>. The full definition, including the
definition of the <tt class="literal">a</tt> element, the definition of a
<tt class="literal">markedText</tt> complex type and its usage to define
the <tt class="literal">title</tt> element, could be:
</p>

<blockquote><pre class="code">&lt;xs:element name="a"&gt;
  &lt;xs:complexType&gt;
    &lt;xs:simpleContent&gt;
      &lt;xs:extension base="xs:string"&gt;
        &lt;xs:attribute name="href" type="xs:anyURI"/&gt;
      &lt;/xs:extension&gt;
    &lt;/xs:simpleContent&gt;
  &lt;/xs:complexType&gt;
&lt;/xs:element&gt;
          
&lt;xs:complexType name="markedText" mixed="true"&gt;
  &lt;xs:choice minOccurs="0" maxOccurs="unbounded"&gt;
    &lt;xs:element name="em" type="xs:token"/&gt;
    &lt;xs:element ref="a"/&gt;
  &lt;/xs:choice&gt;
  &lt;xs:attribute ref="lang"/&gt;
&lt;/xs:complexType&gt;
          
&lt;xs:element name="title" type="markedText"/&gt;</pre></blockquote>

<p>This definition matches elements such as:</p>

<blockquote><pre class="code">&lt;title lang="en"&gt;
  Being a
  &lt;a href="http://dmoz.org/Shopping/Pets/Dogs/"&gt;
    Dog
  &lt;/a&gt;
  Is a
  &lt;em&gt;
    Full-Time
  &lt;/em&gt;
  Job
&lt;/title&gt;</pre></blockquote>

<p>Note that the length of the title can no longer be restricted.</p>

</div>
<a name="xmlschema-CHP-7-SECT-5.2" /><div class="sect2">
<h3 class="sect2">7.5.2. Derivation of Mixed Content Models</h3>

<p>Mixed content models are derived exactly like the complex content
models on which they have been plugged. The semantic of both methods
stays exactly the same.
</p>

<a name="xmlschema-CHP-7-SECT-5.2.1" /><div class="sect3">
<h3 class="sect3">7.5.2.1. Derivation by extension</h3>

<p>Mixed <a name="INDEX-599" /> <a name="INDEX-600" />contents
complex types can be derived by extension from other complex content
complex types and the meaning will be the same. If I want to add a
<tt class="literal">strong</tt> element to my <tt class="literal">markedText</tt>
mixed content type, I can define the following content model:
</p>

<blockquote><pre class="code">&lt;xs:element name="title"&gt;
  &lt;xs:complexType mixed="true"&gt;
    &lt;xs:complexContent mixed="true"&gt;
      &lt;xs:extension base="markedText"&gt;
        &lt;xs:choice minOccurs="0" maxOccurs="unbounded"&gt;
          &lt;xs:element name="strong" type="xs:string"/&gt;
        &lt;/xs:choice&gt;
      &lt;/xs:extension&gt;
    &lt;/xs:complexContent&gt;
  &lt;/xs:complexType&gt;
&lt;/xs:element&gt;</pre></blockquote>

<p>One must note, though, that this extension is equivalent to:</p>

<blockquote><pre class="code">&lt;xs:complexType name="resultingType" mixed="true"&gt;
  &lt;xs:sequence&gt;
    &lt;xs:choice minOccurs="0" maxOccurs="unbounded"&gt;
      &lt;xs:element name="em" type="xs:token"/&gt;
      &lt;xs:element ref="a"/&gt;
    &lt;/xs:choice&gt;
    &lt;xs:choice minOccurs="0" maxOccurs="unbounded"&gt;
      &lt;xs:element name="strong" type="xs:string"/&gt;
    &lt;/xs:choice&gt;
  &lt;/xs:sequence&gt;
  &lt;xs:attribute ref="lang"/&gt;
&lt;/xs:complexType&gt;</pre></blockquote>

<p>This is probably what we would like to see in practice since this
content model expects to see all the occurrences of
<tt class="literal">a</tt> and <tt class="literal">em</tt> before any instance of
<tt class="literal">strong</tt>. We will see later, in <a href="ch12_01.htm">Chapter 12, "Creating More Building Blocks Using Object-Oriented Features"</a>, that this specific issue can be solved using
a feature named "substitution
groups" instead of using <tt class="literal">xs:choice</tt>.
</p>

</div>

<a name="xmlschema-CHP-7-SECT-5.2.2" /><div class="sect3">
<h3 class="sect3">7.5.2.2. Derivation by restriction</h3>

<p>The <a name="INDEX-601" /> <a name="INDEX-602" />derivation of mixed content models by
restriction is also done using the method defined for complex content
models, with the same constraint that each particle must be an
explicit derivation of the corresponding particle of the base type.
To illustrate the consequences of this constraint,
let's look again at the definition and the use of
our <tt class="literal">markedText</tt>:
</p>

<blockquote><pre class="code">&lt;xs:element name="a"&gt;
  &lt;xs:complexType&gt;
    &lt;xs:simpleContent&gt;
      &lt;xs:extension base="xs:string"&gt;
        &lt;xs:attribute name="href" type="xs:anyURI"/&gt;
      &lt;/xs:extension&gt;
    &lt;/xs:simpleContent&gt;
  &lt;/xs:complexType&gt;
&lt;/xs:element&gt;
             
&lt;xs:complexType name="markedText" mixed="true"&gt;
  &lt;xs:choice minOccurs="0" maxOccurs="unbounded"&gt;
    &lt;xs:element name="em" type="xs:token"/&gt;
    &lt;xs:element ref="a"/&gt;
  &lt;/xs:choice&gt;
  &lt;xs:attribute ref="lang"/&gt;
&lt;/xs:complexType&gt;
             
&lt;xs:element name="title" type="markedText"/&gt;</pre></blockquote>

<p>If we want to forbid <tt class="literal">em</tt> elements in our title,
force the <tt class="literal">href</tt> to be an http absolute URI, and
require the <tt class="literal">lang</tt> attribute to be either
<tt class="literal">en</tt> or <tt class="literal">es</tt>, we need to do some
refactoring to show that the <tt class="literal">a</tt> element included in
our title is an explicit derivation of the general definition of
<tt class="literal">a</tt>. We also need to use a global complex type
definition for <tt class="literal">a</tt> instead of the previous anonymous
definition:
</p>

<blockquote><pre class="code">&lt;xs:element name="a" type="link"/&gt;</pre></blockquote>

<p>We can now either derive a new global complex type from the new
<tt class="literal">link</tt> complex type or embed its derivation in the
definition of our <tt class="literal">title</tt> element:
</p>

<blockquote><pre class="code">&lt;xs:element name="title"&gt;
  &lt;xs:complexType mixed="true"&gt;
    &lt;xs:complexContent mixed="true"&gt;
      &lt;xs:restriction base="markedText"&gt;
        &lt;xs:choice minOccurs="0" maxOccurs="unbounded"&gt;
          &lt;xs:element name="a"&gt;
            &lt;xs:complexType&gt;
              &lt;xs:simpleContent&gt;
               &lt;xs:restriction base="link"&gt;
               &lt;xs:attribute name="href"&gt;
               &lt;xs:simpleType&gt;
               &lt;xs:restriction base="xs:anyURI"&gt;
               &lt;xs:pattern value="http://.*"/&gt;
               &lt;/xs:restriction&gt;
               &lt;/xs:simpleType&gt;
               &lt;/xs:attribute&gt;
               &lt;/xs:restriction&gt;
              &lt;/xs:simpleContent&gt;
            &lt;/xs:complexType&gt;
          &lt;/xs:element&gt;
        &lt;/xs:choice&gt;
        &lt;xs:attribute name="lang"&gt;
          &lt;xs:simpleType&gt;
            &lt;xs:restriction base="xs:language"&gt;
              &lt;xs:enumeration value="en"/&gt;
              &lt;xs:enumeration value="es"/&gt;
            &lt;/xs:restriction&gt;
          &lt;/xs:simpleType&gt;
        &lt;/xs:attribute&gt;
      &lt;/xs:restriction&gt;
    &lt;/xs:complexContent&gt;
  &lt;/xs:complexType&gt;
&lt;/xs:element&gt;</pre></blockquote>

<p>This example is a caricature. In practice it would be more readable
to create an intermediate global type definition to avoid embedding
several derivations, but it provides an overview of this derivation
process.
</p>

</div>

<a name="xmlschema-CHP-7-SECT-5.2.3" /><div class="sect3">
<h3 class="sect3">7.5.2.3. Derivation between complex and mixed content models</h3>

<p>Since complex and mixed content models are built using the same
mechanism, one may wonder what the possibilities are for deriving
<a name="INDEX-603" /> <a name="INDEX-604" />complex contents from mixed contents
and vice versa. The answer to this question lurks in the semantic of
these two derivation methods.
</p>

<p>Derivation by extension appends new content after the content of the
base type and the structure of the base type is kept unchanged. It is
therefore not possible to derive a mixed content model from complex
content model. When a content model is mixed, the position of the
text nodes cannot be constrained, and this permits text nodes within
the base type at any location. For the same reason, it is impossible
to extend a mixed content model into a complex content model because
the text nodes that are allowed in the base type would become
forbidden.
</p>

<p>Derivation by restriction defines a subset of the base type. It is
forbidden to derive a mixed content model from a complex content
model The resulting type would allow text nodes that are forbidden in
the base type and would expand rather than restrict the content
model. There is one workable possibility, however. The last
combination is the only possible one: a mixed content model can be
restricted into a complex content model. Forbidding the text nodes of
a mixed content model is a valid restriction and can be done by
setting the <tt class="literal">mixed</tt> attribute to
"false" in the <tt class="literal">xs:complexType</tt> definition. It is even possible to derive a
simple content model into a mixed content model since this is, in
fact, a restriction removing the sibling elements and keeping the
text nodes. This assumes, of course, that the sibling elements are
optional; i.e., they have a <tt class="literal">minOccurs</tt> attribute
equal to 0.
</p>

</div>
</div>


<hr width="684" align="left" />
<div class="navbar"><table width="684" border="0"><tr><td align="left" valign="top" width="228"><a href="ch07_04.htm"><img src="../gifs/txtpreva.gif" alt="Previous" border="0" /></a></td><td align="center" valign="top" width="228"><a href="index.htm"><img src="../gifs/txthome.gif" alt="Home" border="0" /></a></td><td align="right" valign="top" width="228"><a href="ch07_06.htm"><img src="../gifs/txtnexta.gif" alt="Next" border="0" /></a></td></tr><tr><td align="left" valign="top" width="228">7.4. Complex Content Models</td><td align="center" valign="top" width="228"><a href="index/index.htm"><img src="../gifs/index.gif" alt="Book Index" border="0" /></a></td><td align="right" valign="top" width="228">7.6. Empty Content Models</td></tr></table></div>
<hr width="684" align="left" />

<img src="../gifs/navbar.gif" usemap="#library-map" border="0" alt="Library Navigation Links" />
<p><p><font size="-1"><a href="copyrght.htm">Copyright &copy; 2002</a> O'Reilly &amp; Associates. All rights reserved.</font></p>

<map name="library-map">
<area shape="rect" coords="0,0,85,93" href="../index.htm"><area shape="rect" coords="85,0,180,98" href="../sax2/index.htm"><area shape="rect" coords="182,-1,261,100" href="../xmlnut/index.htm"><area shape="rect" coords="263,1,384,96" href="../jxml/index.htm"><area shape="rect" coords="386,1,463,100" href="../jxslt/index.htm"><area shape="rect" coords="466,1,533,112" href="../xslt/index.htm"><area shape="rect" coords="535,-1,610,108" href="index.htm"><area shape="rect" coords="613,1,696,121" href="../pxml/index.htm">
</map>

</body></html>