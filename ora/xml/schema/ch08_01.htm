<html><head><title>Creating Building Blocks (XML Schema)</title><link rel="stylesheet" type="text/css" href="../style/style1.css" />

<meta name="DC.Creator" content="Eric van der Vlist" /><meta name="DC.Format" content="text/xml" scheme="MIME" /><meta name="DC.Language" content="en-US" /><meta name="DC.Publisher" content="O'Reilly &amp; Associates, Inc." /><meta name="DC.Source" scheme="ISBN" content="0596002521L" /><meta name="DC.Subject.Keyword" content="stuff" /><meta name="DC.Title" content="XML Schema" /><meta name="DC.Type" content="Text.Monograph" />

</head><body bgcolor="#ffffff">

<img src="gifs/smbanner.gif" usemap="#banner-map" border="0" alt="Book Home" /><map name="banner-map"><area shape="rect" coords="1,-2,616,66" href="index.htm" alt="XML Schema" /><area shape="rect" coords="629,-11,726,25" href="jobjects/fsearch.htm" alt="Search this book" /></map>

<div class="navbar"><table width="684" border="0"><tr><td align="left" valign="top" width="228"><a href="ch07_08.htm"><img src="../gifs/txtpreva.gif" alt="Previous" border="0" /></a></td><td align="center" valign="top" width="228" /><td align="right" valign="top" width="228"><a href="ch08_02.htm"><img src="../gifs/txtnexta.gif" alt="Next" border="0" /></a></td></tr></table></div>


<h1 class="chapter">Chapter 8. Creating Building Blocks</h1>
<div class="htmltoc"><h4 class="tochead">Contents:</h4>
  <p> <a href="#xmlschema-CHP-8-SECT-1">Schema Inclusion</a><br />
<a href="ch08_02.htm">Schema Inclusion with Redefinition</a><br />
<a href="ch08_03.htm">Other Alternatives</a><br />
<a href="ch08_04.htm">Simplifying the Library</a><br /></p></div>

<p>We have already seen most of the basic building blocks: elements,
attributes, simple and complex types, element and attribute groups.
In this chapter, we will see how we can <a name="INDEX-623" /></a> <a name="INDEX-624" /></a>reuse
these building blocks between schemas. In doing so, we will see how
schemas can be included and redefined to create schema libraries.
</p>
<div class="sect1"><a name="xmlschema-CHP-8-SECT-1" /></a>
<h2 class="sect1">8.1. Schema Inclusion</h2>

<p>The <a name="INDEX-625" /></a>first
and most straightforward way to build schema libraries is through
inclusion, a feature similar to the inclusion in traditional
programming languages, such as C. Compared to a
"physical" inclusion, such as the
result of expanding an external entity reference, or using XInclude
(described in <a href="ch08_03.htm">Section 8.3.2, "XInclude"</a>, later in this chapter),
schema inclusion is a "logical"
inclusion, which can control the semantic of the inclusion. Schema
inclusion may also be seen as a specific form of schema redefinition
(seen in the next section). Note that a schema inclusion or
redefinition is restricted to the definition of a single namespace
(or lack of namespace) and that another mechanism (schema import),
which is discussed in <a href="ch10_01.htm">Chapter 10, "Controlling Namespaces"</a>, must be used to
import definitions for other namespaces.
</p>

<p>Schema <a name="INDEX-626" /></a>inclusions must be top-level elements,
children of the <tt class="literal">xs:schema</tt> element. Their effect is
to include all the top-level declarations of the included schema
(which doesn't need to be a complete schema). The
included top-level elements are then considered top-level elements of
the resulting schema. There are no priority or precedence rules and
the conflicts that may arise if a local definition is duplicated in
both schemas are considered errors. We could use this feature to
locate all our <a name="INDEX-627" /></a>simple type definitions in a separate
schema. This sub-schema would look like:
</p>

<blockquote><pre class="code">&lt;?xml version="1.0"?&gt;
&lt;xs:schema xmlns:xs="http://www.w3.org/2001/XMLSchema"&gt;
  &lt;xs:simpleType name="string255"&gt;
    &lt;xs:restriction base="xs:token"&gt;
      &lt;xs:maxLength value="255"/&gt;
    &lt;/xs:restriction&gt;
  &lt;/xs:simpleType&gt;
  &lt;xs:simpleType name="string32"&gt;
    &lt;xs:restriction base="xs:token"&gt;
      &lt;xs:maxLength value="32"/&gt;
    &lt;/xs:restriction&gt;
  &lt;/xs:simpleType&gt;
  &lt;xs:simpleType name="isbn"&gt;
    &lt;xs:restriction base="xs:NMTOKEN"&gt;
      &lt;xs:totalDigits value="10"/&gt;
      &lt;xs:pattern value="[0-9]{9}[0-9X]"/&gt;
    &lt;/xs:restriction&gt;
  &lt;/xs:simpleType&gt;
  &lt;xs:simpleType name="bookID"&gt;
    &lt;xs:restriction base="xs:ID"&gt;
      &lt;xs:pattern value="b[0-9]{9}[0-9X]"/&gt;
    &lt;/xs:restriction&gt;
  &lt;/xs:simpleType&gt;
  &lt;xs:simpleType name="supportedLanguages"&gt;
    &lt;xs:restriction base="xs:language"&gt;
      &lt;xs:enumeration value="en"/&gt;
      &lt;xs:enumeration value="es"/&gt;
    &lt;/xs:restriction&gt;
  &lt;/xs:simpleType&gt;
  &lt;xs:simpleType name="date"&gt;
    &lt;xs:restriction base="xs:date"&gt;
      &lt;xs:pattern value="[^:Z]*"/&gt;
    &lt;/xs:restriction&gt;
  &lt;/xs:simpleType&gt;
&lt;/xs:schema&gt;</pre></blockquote>

<p>And then include it in our main schema using:</p>

<blockquote><pre class="code">&lt;xs:include schemaLocation="simple-types.xsd"/&gt;</pre></blockquote>

<p>In this example, there is a one-way dependency: the simple types are
defined in <em class="filename">simple-types.xsd</em> and used in our main
schema. The included schema is not very useful by itself. It has no
element declaration, and cannot be used as a standalone schema, since
it couldn't validate any instance document. However,
this is a complete schema that doesn't contain any
reference except to predefined simple types. This completeness of the
included schema is not a requirement, as we see if we do the same for
our <a name="INDEX-628" /></a>complex type definitions:
</p>

<blockquote><pre class="code">&lt;?xml version="1.0"?&gt; 
&lt;xs:schema xmlns:xs="http://www.w3.org/2001/XMLSchema"&gt;
  &lt;xs:complexType name="elementWithID"&gt;
    &lt;xs:attribute ref="id"/&gt;
  &lt;/xs:complexType&gt;
  &lt;xs:complexType name="bookTmp"&gt;
    &lt;xs:complexContent&gt;
      &lt;xs:extension base="elementWithID"&gt;
        &lt;xs:sequence&gt;
          &lt;xs:element ref="isbn"/&gt;
          &lt;xs:element ref="title"/&gt; 
          &lt;xs:element ref="author" minOccurs="0"
            maxOccurs="unbounded"/&gt; 
          &lt;xs:element ref="character" minOccurs="0"
            maxOccurs="unbounded"/&gt;
        &lt;/xs:sequence&gt;
        &lt;xs:attribute ref="available"/&gt;
      &lt;/xs:extension&gt;
    &lt;/xs:complexContent&gt;
  &lt;/xs:complexType&gt;
  &lt;xs:complexType name="personType"&gt;
    &lt;xs:complexContent&gt;
      &lt;xs:extension base="elementWithID"&gt;
        &lt;xs:sequence&gt;
          &lt;xs:element ref="name"/&gt;
          &lt;xs:element ref="born"/&gt;
          &lt;xs:element ref="dead" minOccurs="0"/&gt;
          &lt;xs:element ref="qualification" minOccurs="0"/&gt;
        &lt;/xs:sequence&gt;
      &lt;/xs:extension&gt;
    &lt;/xs:complexContent&gt;
  &lt;/xs:complexType&gt;
&lt;/xs:schema&gt;</pre></blockquote>

<p>We can now include both these fragments in our main schema:</p>

<blockquote><pre class="code">&lt;xs:include schemaLocation="simple-types.xsd"/&gt;
&lt;xs:include schemaLocation="complex-types.xsd"/&gt;</pre></blockquote>

<p>We now have an included schema
(<tt class="literal">complex-types.xsd</tt>), which references elements
(such as <tt class="literal">author</tt>, <tt class="literal">character</tt>, or
<tt class="literal">dead</tt>), that are defined in the main schema using
datatypes defined in either <em class="filename">simple-types.xsd</em> or
<em class="filename">complex-types.xsd</em>. This combination is perfectly
valid for W3C XML Schema since the schema processor collects all the
pieces it needs (or at least most of the pieces it needs since
wildcards may introduce exceptions, discussed in <a href="ch12_01.htm">Chapter 12, "Creating More Building Blocks Using Object-Oriented Features"</a>) before checking the references. This
flexibility is powerful, handy for building flexible libraries, and
eventually error-prone: a complex datatype, such as
<em class="filename">personType</em>, will have the same children elements
but these elements will have a different content model depending on
the schema in which <em class="filename">complex-types.xsd</em> is
included. While using these mechanisms, one must take care to keep
track of the interdependencies that will <a name="INDEX-629" /></a>be <a name="INDEX-630" /></a>created!
</p>

</div>

<hr width="684" align="left" />
<div class="navbar"><table width="684" border="0"><tr><td align="left" valign="top" width="228"><a href="ch07_08.htm"><img src="../gifs/txtpreva.gif" alt="Previous" border="0" /></a></td><td align="center" valign="top" width="228"><a href="index.htm"><img src="../gifs/txthome.gif" alt="Home" border="0" /></a></td><td align="right" valign="top" width="228"><a href="ch08_02.htm"><img src="../gifs/txtnexta.gif" alt="Next" border="0" /></a></td></tr><tr><td align="left" valign="top" width="228">7.8. Derivation or Groups</td><td align="center" valign="top" width="228"><a href="index/index.htm"><img src="../gifs/index.gif" alt="Book Index" border="0" /></a></td><td align="right" valign="top" width="228">8.2. Schema Inclusion with Redefinition</td></tr></table></div>
<hr width="684" align="left" />

<img src="../gifs/navbar.gif" usemap="#library-map" border="0" alt="Library Navigation Links" />
<p><p><font size="-1"><a href="copyrght.htm">Copyright &copy; 2002</a> O'Reilly &amp; Associates. All rights reserved.</font></p>

<map name="library-map">
<area shape="rect" coords="0,0,85,93" href="../index.htm"><area shape="rect" coords="85,0,180,98" href="../sax2/index.htm"><area shape="rect" coords="182,-1,261,100" href="../xmlnut/index.htm"><area shape="rect" coords="263,1,384,96" href="../jxml/index.htm"><area shape="rect" coords="386,1,463,100" href="../jxslt/index.htm"><area shape="rect" coords="466,1,533,112" href="../xslt/index.htm"><area shape="rect" coords="535,-1,610,108" href="index.htm"><area shape="rect" coords="613,1,696,121" href="../pxml/index.htm">
      </map>

</body></html>