<html><head><title>Creating Extensible Schemas (XML Schema)</title><link rel="stylesheet" type="text/css" href="../style/style1.css" />

<meta name="DC.Creator" content="Eric van der Vlist" /><meta name="DC.Format" content="text/xml" scheme="MIME" /><meta name="DC.Language" content="en-US" /><meta name="DC.Publisher" content="O'Reilly &amp; Associates, Inc." /><meta name="DC.Source" scheme="ISBN" content="0596002521L" /><meta name="DC.Subject.Keyword" content="stuff" /><meta name="DC.Title" content="XML Schema" /><meta name="DC.Type" content="Text.Monograph" />

</head><body bgcolor="#ffffff">

<img src="gifs/smbanner.gif" usemap="#banner-map" border="0" alt="Book Home" /><map name="banner-map"><area shape="rect" coords="1,-2,616,66" href="index.htm" alt="XML Schema" /><area shape="rect" coords="629,-11,726,25" href="jobjects/fsearch.htm" alt="Search this book" /></map>

<div class="navbar"><table width="684" border="0"><tr><td align="left" valign="top" width="228"><a href="ch12_02.htm"><img src="../gifs/txtpreva.gif" alt="Previous" border="0" /></a></td><td align="center" valign="top" width="228" /><td align="right" valign="top" width="228"><a href="ch13_02.htm"><img src="../gifs/txtnexta.gif" alt="Next" border="0" /></a></td></tr></table></div>


<h1 class="chapter">Chapter 13. Creating Extensible Schemas</h1>
<div class="htmltoc"><h4 class="tochead">Contents:</h4>
  <p> <a href="#xmlschema-CHP-13-SECT-1">Extensible Schemas</a><br />
<a href="ch13_02.htm">The Need for Open Schemas</a><br /></p></div>

<p>The <a name="INDEX-963" /></a> <a name="INDEX-964" /></a>X
<a name="INDEX-965" /></a> <a name="INDEX-966" /></a>from XML stands for
"extensible." The goal of any
schema language is to control and limit this extensibility to help
the applications deal with it. Extensibility and schemas pursue two
opposite goals. Carelessly written schemas may significantly reduce
extensibility, and we need to keep this in mind when we design our
own schemas.
</p>

<p>Here again, we find the duality between the schema and the instance
documents, and we need to distinguish between two different forms of
extensibility. The extensibility of the schema, is the ability to
reuse its components to create other schemas, while the extensibility
of the vocabulary, is the ability to add or modify the content models
with a minimal impact on the applications, and is, in fact, the
openness of the schema.
</p>
<div class="sect1"><a name="xmlschema-CHP-13-SECT-1" /></a>
<h2 class="sect1">13.1. Extensible Schemas</h2>

<p>The extensibility of a schema is essentially determined by its style,
the choice of which components (elements and attributes, element and
attribute groups, and simple and complex types) have been made
global, the use of the <tt class="literal">final</tt> and
<tt class="literal">fixed</tt> attributes, and the optional division of
these components over different schema documents. We need to have a
look at these three factors.
</p>

<a name="xmlschema-CHP-13-SECT-1.1" /></a><div class="sect2">
<h3 class="sect2">13.1.1. Global Components</h3>

<p>A <a name="INDEX-967" /></a>simple example is often better than a
long explanation, so to illustrate the differences between the
different schema styles, we will take some examples out of our
library and study complex and simple type elements and attributes.
</p>

<a name="xmlschema-CHP-13-SECT-1.1.1" /></a><div class="sect3">
<h3 class="sect3">13.1.1.1. Elements</h3>

<p>Let's <a name="INDEX-968" /></a>consider
<a name="INDEX-969" /></a>the definition of the
<tt class="literal">book</tt> element in the context of our library. We
have four different basic ways of defining this element, and they all
will validate the same set of instance elements--but not the
same set of instance documents, since exposing an element as global
allows its use as a document element. We can use a
<a name="INDEX-970" /></a>Russian doll design and define
the <tt class="literal">book</tt> element and its type locally within the
library element (I have used the same Russian doll design for the
<tt class="literal">book</tt>'s child elements to keep the
schema concise as we will focus on the definition of
<tt class="literal">book</tt> for this example):
</p>

<blockquote><pre class="code">&lt;xs:element name="library"&gt;
  &lt;xs:complexType&gt;
    &lt;xs:sequence&gt;
      &lt;xs:element name="book" maxOccurs="unbounded"&gt;
        &lt;xs:complexType&gt;
          &lt;xs:sequence&gt;
            &lt;xs:element ref="isbn"/&gt;
            &lt;xs:element ref="title"/&gt; 
            &lt;xs:element ref="author" minOccurs="0"
              maxOccurs="unbounded"/&gt; 
            &lt;xs:element ref="character" minOccurs="0"
              maxOccurs="unbounded"/&gt;
          &lt;/xs:sequence&gt;
          &lt;xs:attribute ref="id"/&gt;
          &lt;xs:attribute ref="available"/&gt;
        &lt;/xs:complexType&gt;
      &lt;/xs:element&gt;
    &lt;/xs:sequence&gt;
  &lt;/xs:complexType&gt;
&lt;/xs:element&gt;</pre></blockquote>

<p>We can also define a <a name="INDEX-971" /></a>global
book element and reference it in the content model of our library:
</p>

<blockquote><pre class="code">&lt;xs:element name="book"&gt;
  &lt;xs:complexType&gt;
    &lt;xs:sequence&gt;
      &lt;xs:element ref="isbn"/&gt;
      &lt;xs:element ref="title"/&gt;
      &lt;xs:element ref="author" minOccurs="0" maxOccurs="unbounded"/&gt; 
      &lt;xs:element ref="character" minOccurs="0"
        maxOccurs="unbounded"/&gt;
    &lt;/xs:sequence&gt;
    &lt;xs:attribute ref="id"/&gt;
    &lt;xs:attribute ref="available"/&gt;
  &lt;/xs:complexType&gt;
&lt;/xs:element&gt;
             
&lt;xs:element name="library"&gt;
  &lt;xs:complexType&gt;
    &lt;xs:sequence&gt;
      &lt;xs:element ref="book" maxOccurs="unbounded"/&gt;
    &lt;/xs:sequence&gt;
  &lt;/xs:complexType&gt;
&lt;/xs:element&gt;</pre></blockquote>

<p>The third classical way is to <a name="INDEX-972" /></a> <a name="INDEX-973" /></a>define
a complex type for the content model of our
<tt class="literal">bookType</tt> element (note that I could have called it
<tt class="literal">book</tt>, but I feel <tt class="literal">bookType</tt> is
less confusing):
</p>

<blockquote><pre class="code">&lt;xs:complexType name="bookType"&gt;
  &lt;xs:sequence&gt;
    &lt;xs:element ref="isbn"/&gt;
    &lt;xs:element ref="title"/&gt;
    &lt;xs:element ref="author" minOccurs="0" maxOccurs="unbounded"/&gt;
    &lt;xs:element ref="character" minOccurs="0" maxOccurs="unbounded"/&gt;
  &lt;/xs:sequence&gt;
  &lt;xs:attribute ref="id"/&gt;
  &lt;xs:attribute ref="available"/&gt;
&lt;/xs:complexType&gt;
             
&lt;xs:element name="library"&gt;
  &lt;xs:complexType&gt;
    &lt;xs:sequence&gt;
      &lt;xs:element name="book" type="bookType" maxOccurs="unbounded"/&gt;
    &lt;/xs:sequence&gt;
  &lt;/xs:complexType&gt;
&lt;/xs:element&gt;</pre></blockquote>

<p>Finally, <a name="INDEX-974" /></a>we can
define a group containing our <tt class="literal">book</tt> element:
</p>

<blockquote><pre class="code">&lt;xs:group name="bookGroup"&gt;
  &lt;xs:sequence&gt;
    &lt;xs:element name="book"&gt;
      &lt;xs:complexType&gt;
        &lt;xs:sequence&gt;
          &lt;xs:element ref="isbn"/&gt;
          &lt;xs:element ref="title"/&gt; 
          &lt;xs:element ref="author" minOccurs="0"
            maxOccurs="unbounded"/&gt; 
          &lt;xs:element ref="character" minOccurs="0"
            maxOccurs="unbounded"/&gt;
        &lt;/xs:sequence&gt;
        &lt;xs:attribute ref="id"/&gt;
        &lt;xs:attribute ref="available"/&gt;
      &lt;/xs:complexType&gt;
    &lt;/xs:element&gt;
  &lt;/xs:sequence&gt;
&lt;/xs:group&gt;
             
&lt;xs:element name="library"&gt;
  &lt;xs:complexType&gt;
    &lt;xs:sequence&gt;
      &lt;xs:group ref="bookGroup" maxOccurs="unbounded"/&gt;
    &lt;/xs:sequence&gt;
  &lt;/xs:complexType&gt;
&lt;/xs:element&gt;</pre></blockquote>

<p>These four basic styles can, of course, be combined. The more extreme
example is as follows:
</p>

<blockquote><pre class="code">&lt;xs:complexType name="bookType"&gt;
  &lt;xs:sequence&gt;
    &lt;xs:element ref="isbn"/&gt;
    &lt;xs:element ref="title"/&gt;
    &lt;xs:element ref="author" minOccurs="0" maxOccurs="unbounded"/&gt;
    &lt;xs:element ref="character" minOccurs="0" maxOccurs="unbounded"/&gt;
  &lt;/xs:sequence&gt;
  &lt;xs:attribute ref="id"/&gt;
  &lt;xs:attribute ref="available"/&gt;
&lt;/xs:complexType&gt;
             
&lt;xs:element name="book" type="bookType"/&gt;
             
&lt;xs:group name="bookGroup"&gt;
  &lt;xs:sequence&gt;
    &lt;xs:element ref="book"/&gt;
  &lt;/xs:sequence&gt;
&lt;/xs:group&gt;
             
&lt;xs:element name="library"&gt;
  &lt;xs:complexType&gt;
    &lt;xs:sequence&gt;
      &lt;xs:group ref="bookGroup" maxOccurs="unbounded"/&gt;
    &lt;/xs:sequence&gt;
  &lt;/xs:complexType&gt;
&lt;/xs:element&gt;</pre></blockquote>

<p>Although this example may seem excessive, we must acknowledge that it
is also the most extensible, since it lets you use all the
"reuse and derive" methods of our
three compositors! Now that we've seen these four
basic styles, let's see how they compare for
re-usability and derivation.
</p>

<p>The <a name="INDEX-975" /></a>Russian doll is obviously the style that
is the least extensible: both the definition of the
<tt class="literal">book</tt> element and of its content model are local.
They cannot be referenced to be reused in another part of a schema,
they cannot be used as a document element, they cannot be modified by
derivation, through <tt class="literal"><a href="ch15_01.htm">xs:redefine</a></tt>, or through
substitution groups. Using a Russian doll style here is thus a more
efficient "blocking" feature than
any blocking attribute is. Changing or reusing the
<tt class="literal">book</tt> element or content model requires attaching a
totally different schema to the instance document or using a
<tt class="literal">xsi:type</tt> attribute in the instance document.
</p>

<p>The <a name="INDEX-976" /></a>flat
model, which uses global element definitions, gives a basic level of
flexibility since the element can now be reused in any location
within any schema, can be used as a document element in an instance
document, and can be used as the head of a substitution group. When
used with a local complex type definition like in our example, the
flat model doesn't allow you to change the content
model of the <tt class="literal">book</tt> element. Among these three
features, the flat model can be used as the head of a substitution
group, and is the only one that can be blocked (using a
<tt class="literal">block</tt> attribute). It can be used without
restriction as a document element in an instance document or be used
anywhere in a schema. We also need to note that elements cannot be
redefined and that the content model of our <tt class="literal">book</tt>
element cannot be changed, except through a substitution by means of
<tt class="literal">xsi:type</tt> in the instance document.
</p>

<p>The <a name="INDEX-977" /></a>definition of a global complex type to
describe the content model of the <tt class="literal">book</tt> element
opens two different doors. The content model of the
<tt class="literal">book</tt> element can now be reused to derive extended
or restricted content models that may be used elsewhere, and the
complex type can be redefined through <tt class="literal"><a href="ch15_01.htm">xs:redefine</a></tt>.
As seen in the previous chapter, the derivation can be blocked
through the <tt class="literal">final</tt> attribute, but the redefinition
cannot be controlled.
</p>

<p>Last <a name="INDEX-978" /></a>but not
least, embedding the definition of the <tt class="literal">book</tt>
element in a group allows the group to be reused elsewhere--
for example, in our flat model--but can hide the definition of
the <tt class="literal">book</tt> element, if needed, to avoid its usage as
a document element in instance documents. (Incidentally, it also
blocks its usage as the head of a substitution group.) Defining a
group also opens the possibility to redefine it through <tt class="literal"><a href="ch15_01.htm">xs:redefine</a></tt> to change the number of occurrences of the
element, to add new elements, or even to change its content model if
a global complex type has been used. Using an element group this way
is very similar to the approach of RELAX NG and gives a bit of its
flexibility. We need to note, though, that element groups cannot be
recursive; this can be a limitation to using element groups to define
recursive content models with element groups, since a global element
still needs to be defined for use in a reference. This can be a
problem when we can't, or don't
want to, use a global element--for instance, when we have two
different recursive content models using the same element name with
different contents.
</p>

<p>Which approach is appropriate? There is no single definite answer to
this question, but we know that each of this style has a different
set of extensibility features. The choice between them or a
combination of them has a major impact on the reusability and
derivability of the definitions present in a schema. <a href="ch13_01.htm">Table 13-1</a> may help with visualizing
<a name="INDEX-979" /></a>the differences between these styles,
but keep in mind that combinations of all of them are allowed!
</p>

<a name="xmlschema-CHP-13-TABLE-1" /></a><h4 class="objtitle">Table 13-1. Complex type styles </h4><table border="1" cellpadding="3">








<tr>
<th>
<p>Style</p>
</th>
<th>
<p>Element reference</p>
</th>
<th>
<p>Content model reference</p>
</th>
<th>
<p>Derivation</p>
</th>
<th>
<p>Substitution group</p>
</th>
<th>
<p>Document element</p>
</th>
<th>
<p>Redefine</p>
</th>
</tr>


<tr>
<td>
<p>Russian doll</p>
</td>
<td>
<p>No</p>
</td>
<td>
<p>No</p>
</td>
<td>
<p>No</p>
</td>
<td>
<p>No</p>
</td>
<td>
<p>No</p>
</td>
<td>
<p>No</p>
</td>
</tr>
<tr>
<td>
<p>Flat</p>
</td>
<td>
<p>Yes</p>
</td>
<td>
<p>No</p>
</td>
<td>
<p>No</p>
</td>
<td>
<p>Yes</p>
</td>
<td>
<p>Yes</p>
</td>
<td>
<p>No</p>
</td>
</tr>
<tr>
<td>
<p>Complex type</p>
</td>
<td>
<p>No</p>
</td>
<td>
<p>Yes</p>
</td>
<td>
<p>Yes</p>
</td>
<td>
<p>No</p>
</td>
<td>
<p>No</p>
</td>
<td>
<p>Yes</p>
</td>
</tr>
<tr>
<td>
<p>Group</p>
</td>
<td>
<p>Yes</p>
</td>
<td>
<p>No</p>
</td>
<td>
<p>No</p>
</td>
<td>
<p>No</p>
</td>
<td>
<p>No</p>
</td>
<td>
<p>Yes</p>
</td>
</tr>

</table><p>

<p>Simple type elements behave much like complex types, except that the
complex type definitions are, of course, replaced by simple type
definitions similar to those for attributes, discussed in the next
<a name="INDEX-980" /></a>section.
</p>

</div>

<a name="xmlschema-CHP-13-SECT-1.1.2" /></a><div class="sect3">
<h3 class="sect3">13.1.1.2. Attributes</h3>

<p>As <a name="INDEX-981" /></a>seen in <a href="ch10_01.htm">Chapter 10, "Controlling Namespaces"</a>,
attributes behave differently from elements in that most of the time
they are unqualified. This means then that they cannot be globally
defined. Otherwise, we have a similar situation with attributes,
simple types, and attribute groups as we had with elements and
complex types (the other exception is there is no equivalent in
attribute land to substitution groups or
<tt class="literal">xsi:type</tt>). If we take the definition of a
<tt class="literal">lang</tt> attribute restricted to <tt class="literal">en</tt>
or <tt class="literal">fr</tt> in the title element, we can have a
<a name="INDEX-982" /></a>Russian doll design in which
the attribute and its type will be locally defined:
</p>

<blockquote><pre class="code">&lt;xs:element name="title"&gt;
  &lt;xs:complexType&gt;
    &lt;xs:simpleContent&gt;
      &lt;xs:extension base="xs:token"&gt;
        &lt;xs:attribute name="lang"&gt;
          &lt;xs:simpleType&gt;
            &lt;xs:restriction base="xs:language"&gt;
              &lt;xs:enumeration value="en"/&gt;
              &lt;xs:enumeration value="fr"/&gt;
            &lt;/xs:restriction&gt;
          &lt;/xs:simpleType&gt;
        &lt;/xs:attribute&gt;
      &lt;/xs:extension&gt;
    &lt;/xs:simpleContent&gt;
  &lt;/xs:complexType&gt;
&lt;/xs:element&gt;</pre></blockquote>

<p>We can <a name="INDEX-983" /></a>also
take a flat design in which the attribute is globally defined:
</p>

<blockquote><pre class="code">&lt;xs:attribute name="lang"&gt;
  &lt;xs:simpleType&gt;
    &lt;xs:restriction base="xs:language"&gt;
      &lt;xs:enumeration value="en"/&gt;
      &lt;xs:enumeration value="fr"/&gt;
    &lt;/xs:restriction&gt;
  &lt;/xs:simpleType&gt;
&lt;/xs:attribute&gt;
             
&lt;xs:element name="title"&gt;
  &lt;xs:complexType&gt;
    &lt;xs:simpleContent&gt;
      &lt;xs:extension base="xs:token"&gt;
        &lt;xs:attribute ref="lang"/&gt;
      &lt;/xs:extension&gt;
    &lt;/xs:simpleContent&gt;
  &lt;/xs:complexType&gt;
&lt;/xs:element&gt;</pre></blockquote>

<p>A global <a name="INDEX-984" /></a>simple
type can also be defined:
</p>

<blockquote><pre class="code">&lt;xs:simpleType name="langType"&gt;
  &lt;xs:restriction base="xs:language"&gt;
    &lt;xs:enumeration value="en"/&gt;
    &lt;xs:enumeration value="fr"/&gt;
  &lt;/xs:restriction&gt;
&lt;/xs:simpleType&gt;
             
&lt;xs:element name="title"&gt;
  &lt;xs:complexType&gt;
    &lt;xs:simpleContent&gt;
      &lt;xs:extension base="xs:token"&gt;
        &lt;xs:attribute name="lang" type="langType"/&gt;
      &lt;/xs:extension&gt;
    &lt;/xs:simpleContent&gt;
  &lt;/xs:complexType&gt;
&lt;/xs:element&gt;</pre></blockquote>

<p>The <a name="INDEX-985" /></a>attribute
may be "hidden" in an attribute
group:
</p>

<blockquote><pre class="code">&lt;xs:attributeGroup name="langGroup"&gt;
  &lt;xs:attribute name="lang"&gt;
    &lt;xs:simpleType&gt;
      &lt;xs:restriction base="xs:language"&gt;
        &lt;xs:enumeration value="en"/&gt;
        &lt;xs:enumeration value="fr"/&gt;
      &lt;/xs:restriction&gt;
    &lt;/xs:simpleType&gt;
  &lt;/xs:attribute&gt;
&lt;/xs:attributeGroup&gt;
             
&lt;xs:element name="title"&gt;
  &lt;xs:complexType&gt;
    &lt;xs:simpleContent&gt;
      &lt;xs:extension base="xs:token"&gt;
        &lt;xs:attributeGroup ref="langGroup"/&gt;
      &lt;/xs:extension&gt;
    &lt;/xs:simpleContent&gt;
  &lt;/xs:complexType&gt;
&lt;/xs:element&gt;</pre></blockquote>

<p>All can this can be used together:</p>

<blockquote><pre class="code">&lt;xs:simpleType name="langType"&gt;
  &lt;xs:restriction base="xs:language"&gt;
    &lt;xs:enumeration value="en"/&gt;
    &lt;xs:enumeration value="fr"/&gt;
  &lt;/xs:restriction&gt;
&lt;/xs:simpleType&gt;
             
&lt;xs:attribute name="lang" type="langType"/&gt;
             
&lt;xs:attributeGroup name="langGroup"&gt;
  &lt;xs:attribute ref="lang"/&gt;
&lt;/xs:attributeGroup&gt;
             
&lt;xs:element name="title"&gt;
  &lt;xs:complexType&gt;
    &lt;xs:simpleContent&gt;
      &lt;xs:extension base="xs:token"&gt;
        &lt;xs:attributeGroup ref="langGroup"/&gt;
      &lt;/xs:extension&gt;
    &lt;/xs:simpleContent&gt;
  &lt;/xs:complexType&gt;
&lt;/xs:element&gt;</pre></blockquote>

<p>The <a name="INDEX-986" /></a>impact of these design decisions is
pretty much the same as those we've seen in complex
type elements, except, of course, for substitution groups and
usability as a document element. <a href="ch13_01.htm">Table 13-2</a>
explains the options these varying approaches provide.
</p>

<a name="xmlschema-CHP-13-TABLE-2" /></a><h4 class="objtitle">Table 13-2. Attribute styles </h4><table border="1" cellpadding="3">






<tr>
<th>
<p>Style</p>
</th>
<th>
<p>Attribute reference</p>
</th>
<th>
<p>Datatype reference</p>
</th>
<th>
<p>Derivation</p>
</th>
<th>
<p>Redefine</p>
</th>
</tr>


<tr>
<td>
<p>Russian doll</p>
</td>
<td>
<p>No</p>
</td>
<td>
<p>No</p>
</td>
<td>
<p>No</p>
</td>
<td>
<p>No</p>
</td>
</tr>
<tr>
<td>
<p>Flat</p>
</td>
<td>
<p>Yes</p>
</td>
<td>
<p>No</p>
</td>
<td>
<p>No</p>
</td>
<td>
<p>No</p>
</td>
</tr>
<tr>
<td>
<p>Simple type</p>
</td>
<td>
<p>No</p>
</td>
<td>
<p>Yes</p>
</td>
<td>
<p>Yes</p>
</td>
<td>
<p>Yes<a name="INDEX-987" /></a></p>
</td>
</tr>
<tr>
<td>
<p>Attribute group</p>
</td>
<td>
<p>Yes</p>
</td>
<td>
<p>No</p>
</td>
<td>
<p>No</p>
</td>
<td>
<p>Yes<a name="INDEX-988" /></a></p>
</td>
</tr>

</table><p>

</div>
</div>
<a name="xmlschema-CHP-13-SECT-1.2" /></a><div class="sect2">
<h3 class="sect2">13.1.2. final and fixed Attributes</h3>

<p>These <a name="INDEX-989" /></a> <a name="INDEX-990" /></a>attributes were already covered in <a href="ch12_01.htm">Chapter 12, "Creating More Building Blocks Using Object-Oriented Features"</a>, and they have an obvious impact on the
re-usability of simple and complex type definitions since they can
block some or all the further derivations. This category of features
affects the flexibility of the schema itself. Their friends
<tt class="literal">block</tt> and <tt class="literal">abstract</tt> are features
that impact the openness of the schema and have no impact on the set
of instance documents.
</p>

</div>
<a name="xmlschema-CHP-13-SECT-1.3" /></a><div class="sect2">
<h3 class="sect2">13.1.3. Splitting Schema Components</h3>

<p>The <a name="INDEX-991" /></a> <a name="INDEX-992" /></a>last <a name="INDEX-993" /></a>factor <a name="INDEX-994" /></a>that acts on the flexibility and
re-usability of our schema (and schema libraries) is the split of the
components among different documents. Some schema designers have gone
as far as possible in this direction and advise the location of each
class or component in its own schema document, and to include and
import the components needed to create a full schema. This may seem
excessive, but provides a very fine granularity and allows a
workaround of the limitations of <tt class="literal"><a href="ch15_01.htm">xs:redefine</a></tt>. (If a
component needs to be redefined, just leave out the old definition
and write a new one.)
</p>

<p>The biggest issue with such a design is probably the management of a
number of different documents that can rapidly grow, and the many
dependencies between these documents. These dependencies must be
considered when designing libraries of schemas since they can be
tough to track because the links between the included and including
documents are multidirectional. A component within an included schema
can reference components defined in any other schema processed by the
schema processor.
</p>

<p>We need to reexamine how a schema processor will build a global
schema using all the imported, included, and redefine instructions it
will find. The schema processor initially builds a big consolidated
schema with all the components defined in all the schema documents it
has processed. It then resolves the references between components
after building this consolidated schema. Although this simple and
powerful mechanism applies to inclusions without restriction, we will
see that things can get nastier with imports and redefinitions.
Let's start with the simplest case and move on to
the processing of <tt class="literal"><a href="ch15_01.htm">xs:include</a></tt>.
</p>

<p>The semantic of <tt class="literal"><a href="ch15_01.htm">xs:include</a></tt> is slightly different
from the semantic of the include statements used in languages such as
C, and it should be considered a conditional include. A <tt class="literal"><a href="ch15_01.htm">xs:include</a></tt> is actually a request to read a schema if it
has not already been read, to add all the component declarations
found in this schema to the consolidated schema if they have not
already been defined, to ignore the components found in the new
schema that are already defined in the global schema if they are
identical, and to raise an error if they are different. This means it
is perfectly legitimate to create loops and multiple inclusions,
either directly (schema A includes schema B, which includes schema C)
or indirectly (schema A includes schema B and schema C, which
includes schema B) and we can create inclusion paths as complex as we
wish.
</p>

<p>The meaning of <tt class="literal"><a href="ch15_01.htm">xs:redefine</a></tt> is similar, except that
some components can be redefined. When used, this difference is
enough to break the possibility of creating loops in which a schema A
redefines components of a schema B, which redefines or includes
schema A. This restriction actually means that while we can speak of
inclusion graphs, the redefinitions would instead form a tree. The
process of including or redefining is recursive, however, and when we
include (or redefine) a schema, we include the consolidated schema
resulting from the included document rather than the document itself.
We can still create inclusion loops within the branches of the
redefinition tree (schema A can redefine schema B, which includes
schema C, which includes schema B).
</p>

<p>Some designers rely on the fact that when a schema without target
namespaces is included (or redefined) in a schema with a target
namespace, the included schema
"borrows" the target namespace of
its "includer." This feature,
already mentioned in <a href="ch10_01.htm">Chapter 10, "Controlling Namespaces"</a>, can be used to
build "neutral" components with no
namespaces that can be included and used as building blocks. Since
these components take the namespace of the including schema like a
chameleon takes the color of its environment, these schemas are
called "<a name="INDEX-995" /></a>chameleon schemas."
Although this technique is simple and may be convenient in some
cases, it can be confusing to define similar components (and,
therefore, similar types and content models) in different namespaces
instead of creating a common namespace for them, which would
immediately identify these types and content models as identical.
</p>

<p><tt class="literal"><a href="ch15_01.htm">xs:import</a></tt><a name="INDEX-996" /></a> <a name="INDEX-997" /></a> behaves somewhat like <tt class="literal"><a href="ch15_01.htm">xs:include</a></tt>: no redefinitions occur, which means that
loops can be created where schema A (for namespace A) imports schema
B (for namespace B), which itself imports schema A. It is important
to note that <tt class="literal"><a href="ch15_01.htm">xs:import</a></tt> serves two different
purposes: it is an instruction to import a schema and a declaration
that components from a namespace can be referenced. If schema A for
namespace A imports schema B for namespace B, and if schema B needs
to reference components from the namespace A, an <tt class="literal"><a href="ch15_01.htm">xs:import</a></tt> statement <em class="emphasis">must</em> be
included in schema B to declare that namespace A can be used (the
<tt class="literal">schemaLocation</tt> attribute is optional and can be
omitted in such cases).
</p>

<p>After working through the three mechanisms (include, redefine, and
import), we can mix all of them together and note that chameleon
schemas can be used together with imports. In this case, the same
imported chameleon can contribute several times to a global schema
under different namespaces. If schema A for namespace A includes
schema B with no namespace, and imports schema C for namespace C with
includes schema B, the two inclusions of schema B belong to different
namespaces and are considered different.
</p>

<p>We now have all the elements to find innovative ways to mix inclusion
and import graphs with redefinition trees. Keep in mind that simple
is beautiful, and if we don't restrict ourselves, we
humans might get lost well <a name="INDEX-998" /></a>before <a name="INDEX-999" /></a>our <a name="INDEX-1000" /></a> <a name="INDEX-1001" /></a>favorite <a name="INDEX-1002" /></a> <a name="INDEX-1003" /></a>schema <a name="INDEX-1004" /></a> <a name="INDEX-1005" /></a>processor! 
</p>

</div>
</div>

<hr width="684" align="left" />
<div class="navbar"><table width="684" border="0"><tr><td align="left" valign="top" width="228"><a href="ch12_02.htm"><img src="../gifs/txtpreva.gif" alt="Previous" border="0" /></a></td><td align="center" valign="top" width="228"><a href="index.htm"><img src="../gifs/txthome.gif" alt="Home" border="0" /></a></td><td align="right" valign="top" width="228"><a href="ch13_02.htm"><img src="../gifs/txtnexta.gif" alt="Next" border="0" /></a></td></tr><tr><td align="left" valign="top" width="228">12.2. Controlling Derivations</td><td align="center" valign="top" width="228"><a href="index/index.htm"><img src="../gifs/index.gif" alt="Book Index" border="0" /></a></td><td align="right" valign="top" width="228">13.2. The Need for Open Schemas</td></tr></table></div>
<hr width="684" align="left" />

<img src="../gifs/navbar.gif" usemap="#library-map" border="0" alt="Library Navigation Links" />
<p><p><font size="-1"><a href="copyrght.htm">Copyright &copy; 2002</a> O'Reilly &amp; Associates. All rights reserved.</font></p>

<map name="library-map">
<area shape="rect" coords="0,0,85,93" href="../index.htm"><area shape="rect" coords="85,0,180,98" href="../sax2/index.htm"><area shape="rect" coords="182,-1,261,100" href="../xmlnut/index.htm"><area shape="rect" coords="263,1,384,96" href="../jxml/index.htm"><area shape="rect" coords="386,1,463,100" href="../jxslt/index.htm"><area shape="rect" coords="466,1,533,112" href="../xslt/index.htm"><area shape="rect" coords="535,-1,610,108" href="index.htm"><area shape="rect" coords="613,1,696,121" href="../pxml/index.htm">
      </map>

</body></html>