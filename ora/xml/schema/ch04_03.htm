<html><head><title>String Datatypes (XML Schema)</title><link rel="stylesheet" type="text/css" href="../style/style1.css" />

<meta name="DC.Creator" content="Eric van der Vlist" /><meta name="DC.Format" content="text/xml" scheme="MIME" /><meta name="DC.Language" content="en-US" /><meta name="DC.Publisher" content="O'Reilly &amp; Associates, Inc." /><meta name="DC.Source" scheme="ISBN" content="0596002521L" /><meta name="DC.Subject.Keyword" content="stuff" /><meta name="DC.Title" content="XML Schema" /><meta name="DC.Type" content="Text.Monograph" />

</head><body bgcolor="#ffffff">

<img src="gifs/smbanner.gif" usemap="#banner-map" border="0" alt="Book Home" /><map name="banner-map"><area shape="rect" coords="1,-2,616,66" href="index.htm" alt="XML Schema" /><area shape="rect" coords="629,-11,726,25" href="jobjects/fsearch.htm" alt="Search this book" /></map>

<div class="navbar"><table width="684" border="0"><tr><td align="left" valign="top" width="228"><a href="ch04_02.htm"><img src="../gifs/txtpreva.gif" alt="Previous" border="0" /></a></td><td align="center" valign="top" width="228" /><td align="right" valign="top" width="228"><a href="ch04_04.htm"><img src="../gifs/txtnexta.gif" alt="Next" border="0" /></a></td></tr></table></div>



<h2 class="sect1">4.3. String Datatypes</h2>

<p>This <a name="INDEX-116" /> <a name="INDEX-117" />section
discusses datatypes derived from the <tt class="literal"><a href="ch16_01.htm">xs:string</a></tt>
primitive datatype as well as other datatypes that have a similar
behavior (namely, <tt class="literal"><a href="ch16_01.htm">xs:hexBinary</a></tt>, <tt class="literal"><a href="ch16_01.htm">xs:base64Binary</a></tt>, <tt class="literal"><a href="ch16_01.htm">xs:anyURI</a></tt>, <tt class="literal"><a href="ch16_01.htm">xs:QName</a></tt>, and <tt class="literal"><a href="ch16_01.htm">xs:NOTATION</a></tt>). These
types are not expected to carry any quantifiable value (W3C XML
Schema doesn't even expect to be able to sort them)
and their value space is identical to their lexical space except when
explicitly described otherwise. One should note that even though they
are grouped in this section because they have a similar behavior,
these primitive datatypes are considered quite different by the
Recommendation.
</p>

<p>The datatypes covered in this section are shown in <a href="ch04_03.htm">Figure 4-2</a>. 
</p>

<a name="xmlschema-CHP-4-FIG-2" /><div class="figure"><img src="figs/xsch_0402.gif" alt="Figure 4-2" width="218" height="328" /></div><h4 class="objtitle">Figure 4-2. Strings and similar datatypes</h4>

<p>The two exceptions in <a name="INDEX-118" />whitespace processing (<tt class="literal"><a href="ch16_01.htm">xs:string</a></tt> and <tt class="literal"><a href="ch16_01.htm">xs:normalizedString</a></tt>) are string
datatypes. One of the main differences between these types is the
applied whitespace processing. To stress this difference, we will
classify these types by their whitespace processing.
</p>

<a name="xmlschema-CHP-4-SECT-3.1" /><div class="sect2">
<h3 class="sect2">4.3.1. No Whitespace Replacement</h3>

<dl>
<dt><tt class="literal"><a href="ch16_01.htm">xs:string</a></tt></dt>
<dd>
This <a name="INDEX-119" />string datatype is the only predefined
datatype for which no whitespace replacement is performed. As we will
see in the next chapter, the whitespace replacement performed on
user-defined datatypes derived from this type can be defined without
restriction. On the other hand, a user datatype cannot be defined as
having no whitespace replacement if it is derived from any predefined
datatype other than <tt class="literal"><a href="ch16_01.htm">xs:string</a></tt>.
</p>


<p>As expected, a string is a set of characters matching the definition
given by XML 1.0, namely, "legal characters are tab,
carriage return, line feed, and the legal characters of Unicode and
ISO/IEC 10646."
</p>

<p>The value of the following element:</p>

<blockquote><pre class="code">&lt;title lang="en"&gt;
   Being a Dog Is 
   a Full-Time Job
&lt;/title&gt;</pre></blockquote>

<p>is the full string:</p>

<blockquote><pre class="code">Being a Dog Is 
a Full-Time Job</pre></blockquote>

<p>with all its tabs, and CR/LF if the title element is a type
<a name="INDEX-120" /><tt class="literal"><a href="ch16_01.htm">xs:string</a></tt>.
</p>
</dd>

</dl>

</div>
<a name="xmlschema-CHP-4-SECT-3.2" /><div class="sect2">
<h3 class="sect2">4.3.2. Normalized Strings</h3>

<dl>
<dt><tt class="literal"><a href="ch16_01.htm">xs:normalizedString</a></tt> </dt>
<dd>
The normalized string is the only predefined datatype in which
whitespace replacement is performed without collapsing.
</p>


<p>The lexical space of <tt class="literal"><a href="ch16_01.htm">xs:normalizedString</a></tt> is the same as the
lexical space of <tt class="literal"><a href="ch16_01.htm">xs:string</a></tt> from which it is
derived--except that since any occurrence of #x9 (tab), #xA
(linefeed), and #xD (carriage return) are replaced by a #x20 (space),
these three characters cannot be found in its lexical and value
spaces.
</p>

<p>The value of the same element:</p>

<blockquote><pre class="code">&lt;title lang="en"&gt;
   Being a Dog Is 
   a Full-Time Job
&lt;/title&gt;</pre></blockquote>

<p>is now the string:</p>

<blockquote><pre class="code">    Being a Dog Is     a Full-Time Job</pre></blockquote>

<p>in which all the whitespaces have been replaced by spaces if the
title element is a type <tt class="literal"><a href="ch16_01.htm">xs:normalizedString</a></tt>.
</p>
</dd>

</dl>


<a name="ch04-7-fm2xml" /><blockquote><b>TIP:</b> 
There is no additional constraint on normalized strings. Any value
that is a valid <tt class="literal"><a href="ch16_01.htm">xs:string</a></tt> is also a valid <tt class="literal"><a href="ch16_01.htm">xs:normalizedString</a></tt>. The difference is the whitespace processing
that is applied when the lexical value is <a name="INDEX-121" /> <a name="INDEX-122" /> <a name="INDEX-123" />calculated.
</p>
</blockquote>

</div>
<a name="xmlschema-CHP-4-SECT-3.3" /><div class="sect2">
<h3 class="sect2">4.3.3. Collapsed Strings</h3>

<p><a name="INDEX-124" /> <a name="INDEX-125" />
<a name="INDEX-126" />Whitespace collapsing is performed after
whitespace replacement by trimming the leading and trailing spaces
and replacing all the contiguous occurrences of spaces with a single
space. All the predefined datatypes (except, as we have seen, <tt class="literal"><a href="ch16_01.htm">xs:string</a></tt> and <tt class="literal"><a href="ch16_01.htm">xs:normalizedString</a></tt>) are
whitespace collapsed.
</p>

<p>We will classify tokens, binary formats, URIs, qualified names,
notations, and all their derived types under this category. Although
these datatypes share a number of properties, we must stress again
that this categorization is done for the purpose of explanation and
does not directly appear in the Recommendation.
</p>

<a name="xmlschema-CHP-4-SECT-3.3.1" /><div class="sect3">
<h3 class="sect3">4.3.3.1. Tokenss</h3>

<dl>
<a name="INDEX-127" /><dt><tt class="literal"><a href="ch16_01.htm">xs:token</a></tt> </dt>
<dd>
<a name="INDEX-128" /><tt class="literal"><a href="ch16_01.htm">xs:token</a></tt> is <tt class="literal"><a href="ch16_01.htm">xs:normalizedString</a></tt> on which the
whitespaces have been collapsed. Since whitespaces are accepted in
the lexical space of <tt class="literal"><a href="ch16_01.htm">xs:token</a></tt>, this type is
better described as a "<a name="INDEX-129" />
<a name="INDEX-130" />tokenized"
string than as a "token"!
</p>


<p>The same element:</p>

<blockquote><pre class="code">&lt;title lang="en"&gt;
   Being a Dog Is 
   a Full-Time Job
&lt;/title&gt;</pre></blockquote>

<p>is still a valid <tt class="literal"><a href="ch16_01.htm">xs:token</a></tt>, and its value is now
the string:
</p>

<blockquote><pre class="code">Being a Dog Is a Full-Time Job</pre></blockquote>

<p>in which all the whitespaces have been replaced by spaces, any
trailing spaces are removed, and contiguous sequences of spaces are
replaced by single spaces.
</p>



<a name="ch04-9-fm2xml" /><blockquote><b>TIP:</b> 
As is the case with <tt class="literal"><a href="ch16_01.htm">xs:normalizedString</a></tt>, there is no
constraint on <tt class="literal"><a href="ch16_01.htm">xs:token</a></tt>, and any value that is a
valid <tt class="literal"><a href="ch16_01.htm">xs:string</a></tt> is also a valid <tt class="literal"><a href="ch16_01.htm">xs:token</a></tt>. The difference is the whitespace processing
that is applied when the lexical value is calculated. This is not
true of derived datatypes that have additional constraints on their
lexical and value space. The restriction on the lexical spaces of
<tt class="literal"><a href="ch16_01.htm">xs:normalizedString</a></tt> is, therefore, a restriction by
projection of their parsed space (different values of their parsed
space are transformed into a single value of their lexical space),
and not a restriction by invalidating values of their lexical space,
as is the case for all the other predefined datatypes.
</p>
</blockquote>

<p>The predefined datatypes derived from <tt class="literal"><a href="ch16_01.htm">xs:token</a></tt>
are <tt class="literal"><a href="ch16_01.htm">xs:language</a></tt>, <tt class="literal"><a href="ch16_01.htm">xs:NMTOKEN</a></tt>, and
<tt class="literal"><a href="ch16_01.htm">xs:Name</a></tt>.
</p></dd>


<dt><tt class="literal"><a href="ch16_01.htm">xs:language</a></tt> </dt>
<dd>
<a name="INDEX-131" />This was
created to accept all the language codes standardized by RFC 1766.
Some valid values for this datatype are <tt class="literal">en</tt>,
<tt class="literal">en-US</tt>, <tt class="literal">fr</tt>, or
<tt class="literal">fr-FR</tt>.
</p>
</dd>


<dt><tt class="literal"><a href="ch16_01.htm">xs:NMTOKEN</a></tt> </dt>
<dd>
<a name="INDEX-132" />This
<a name="INDEX-133" />corresponds to the XML 1.0
"Nmtoken" (Name token) production,
which is a single token (a set of characters without spaces) composed
of characters allowed in XML name. Some valid values for this
datatype are
"<tt class="literal">Snoopy"</tt>,
"<tt class="literal">CMS"</tt>,
<tt class="literal">"1950-10-04"</tt>, or
"<tt class="literal">0836217462"</tt>.
Invalid values include <tt class="literal">"brought classical
music to the Peanuts strip</tt>" (spaces are
forbidden) or
"<tt class="literal">bold,brash"</tt>
(commas are forbidden).
</p>
</dd>


<dt><tt class="literal"><a href="ch16_01.htm">xs:Name</a></tt> </dt>
<dd>
<a name="INDEX-134" />This is
similar to <tt class="literal"><a href="ch16_01.htm">xs:NMTOKEN</a></tt> with the additional
restriction that the values must start with a letter or the
characters ":" or
"-". This datatype conforms to the
XML 1.0 definition of a "Name."
Some valid values for this datatype are <tt class="literal">Snoopy</tt>,
<tt class="literal">CMS</tt>, or <tt class="literal">-1950-10-04-10:00</tt>.
Invalid values include <tt class="literal">0836217462</tt> (<tt class="literal"><a href="ch16_01.htm">xs:Name</a></tt> cannot start with a number) or
<tt class="literal">bold,brash</tt> (commas are forbidden). This datatype
should not be used for names that may be
"qualified" by a namespace prefix,
since we will see another datatype (<tt class="literal"><a href="ch16_01.htm">xs:QName</a></tt>)
that has a specific semantic for these values.The datatype <tt class="literal"><a href="ch16_01.htm">xs:NCName</a></tt> is derived from <tt class="literal"><a href="ch16_01.htm">xs:Name</a></tt>.
</p>
</dd>


<dt><tt class="literal"><a href="ch16_01.htm">xs:NCName</a></tt> </dt>
<dd>
<a name="INDEX-135" />This is the
"<a name="INDEX-136" />noncolonized name" defined
by Namespaces in XML1.0, i.e., a <tt class="literal"><a href="ch16_01.htm">xs:Name</a></tt> without
any colons (":"). As such, this
datatype is probably the predefined datatype that is closest to the
notion of a "name" in most of the
programming languages, even though some characters such as
"-" or
"." may still be a problem in many
cases. Some valid values for this datatype are
<tt class="literal">Snoopy</tt>, <tt class="literal">CMS</tt>,
<tt class="literal">-1950-10-04-10-00</tt>, or
<tt class="literal">1950-10-04</tt>. Invalid values include
<tt class="literal">-1950-10-04:10-00</tt> or <tt class="literal">bold:brash</tt>
(colons are forbidden). <tt class="literal"><a href="ch16_01.htm">xs:ID</a></tt>, <tt class="literal"><a href="ch16_01.htm">xs:IDREF</a></tt>, and <tt class="literal"><a href="ch16_01.htm">xs:ENTITY</a></tt> are derived
from <tt class="literal"><a href="ch16_01.htm">xs:NCName</a></tt>.
</p>
</dd>


<dt><tt class="literal"><a href="ch16_01.htm">xs:ID</a></tt> </dt>
<dd>
<a name="INDEX-137" />
<a name="INDEX-138" />This is derived
from <tt class="literal"><a href="ch16_01.htm">xs:NCName</a></tt>. There is one constraint added to
its value space is that there must not be any duplicate values in a
document. In other words, the values of attributes or simple type
elements having this datatype can be used as unique identifiers, and
this datatype emulates the XML 1.0 ID attribute type. We will see
this feature in more detail in <a href="ch09_01.htm">Chapter 9, "Defining Uniqueness, Keys, and Key References"</a>.
</p>
</dd>


<dt><tt class="literal"><a href="ch16_01.htm">xs:IDREF</a></tt> </dt>
<dd>
<a name="INDEX-139" />This is
derived from <tt class="literal"><a href="ch16_01.htm">xs:NCName</a></tt>. The constraint added to
its value space is it must match an ID defined in the same document.
I will explain this feature in more detail in <a href="ch09_01.htm">Chapter 9, "Defining Uniqueness, Keys, and Key References"</a>. 
</p>
</dd>


<dt><tt class="literal"><a href="ch16_01.htm">xs:ENTITY</a></tt> </dt>
<dd>
<a name="INDEX-140" />Also
provided for compatibility with XML 1.0 DTDs, this is derived from
<tt class="literal"><a href="ch16_01.htm">xs:NCName</a></tt> and must match an
<a name="INDEX-141" />unparsed entity defined in a DTD.
</p>
</dd>

</dl>



<a name="ch04-11-fm2xml" /><blockquote><b>TIP:</b> 
XML 1.0 gives the following definition of unparsed entities:
"an unparsed entity is a resource whose contents may
or may not be text, and if text, may be other than XML. Each unparsed
entity has an associated notation, identified by name. Beyond a
requirement that an XML processor make the identifiers for the entity
and notation available to the application, XML places no constraints
on the contents of unparsed entities." In practice,
this mechanism has seldom been used, as the general usage is to
define links to the resources that could be defined as unparsed
<a name="INDEX-142" />entities. 
</p>
</blockquote>

</div>

<a name="xmlschema-CHP-4-SECT-3.3.2" /><div class="sect3">
<h3 class="sect3">4.3.3.2. Qualified names</h3>

<dl>
<dt><tt class="literal"><a href="ch16_01.htm">xs:QName</a></tt> </dt>
<dd>
<a name="INDEX-143" />
<a name="INDEX-144" />Following
Namespaces in XML 1.0, <tt class="literal"><a href="ch16_01.htm">xs:QName</a></tt> supports the use
of namespace-prefixed names. A namespace prefix xs:QName treats a
shortcut to identify a URI. Each xs:QName effectively contains a set
of tuples {namespace name, local part}, in which the namespace name
is the URI associated to the prefix through a namespace declaration.
Even though the lexical space of <tt class="literal"><a href="ch16_01.htm">xs:QName</a></tt> is very
close to the lexical space of <tt class="literal"><a href="ch16_01.htm">xs:Name</a></tt> (the only
constraint on the lexical space is that there is a maximum of one
colon allowed in an <tt class="literal"><a href="ch16_01.htm">xs:QName</a></tt>, which cannot be the
first character), the value spaces of these datatypes are completely
different (a scalar for <tt class="literal"><a href="ch16_01.htm">xs:Name</a></tt> and a tuple for
<tt class="literal"><a href="ch16_01.htm">xs:QName</a></tt>) and <tt class="literal"><a href="ch16_01.htm">xs:QName</a></tt> is
defined as a primitive datatype. The constraint added by this
datatype over an <tt class="literal"><a href="ch16_01.htm">xs:Name</a></tt> is the prefix must be
defined as a namespace prefix in the scope of the element in which
this datatype is used.
</p>


<p>W3C XML Schema itself has already given us some examples of QNames.
When we write <tt class="literal">&lt;xs:attribute name="lang"
type="xs:language"/&gt;</tt>, the type attribute is an
<tt class="literal">xs:QName</tt> and its value is the tuple:
</p>

<blockquote><pre class="code">{"http://www.w3.org/2001/XMLSchema", "language"}</pre></blockquote>

<p>because the URI:</p>

<blockquote><pre class="code">"http://www.w3.org/2001/XMLSchema"</pre></blockquote>

<p>was assigned to the prefix
"<tt class="literal">xs:</tt>". If there
is no namespace declaration for this prefix, the type attribute is
considered invalid.
</p>

<p>The prefix of an <tt class="literal"><a href="ch16_01.htm">xs:QName</a></tt> is optional. We are
also able to write:
</p>

<blockquote><pre class="code">&lt;xs:element ref="book" maxOccurs="unbounded"/&gt;</pre></blockquote>

<p>in which the ref attribute is also a <tt class="literal"><a href="ch16_01.htm">xs:QName</a></tt> and
its value the tuple:
</p>

<blockquote><pre class="code">{NULL, "book"}</pre></blockquote>

<p>because we haven't defined any default namespace.
<tt class="literal"><a href="ch16_01.htm">xs:QName</a></tt> does support default namespaces; if a
default namespace is defined in the scope of this element, the value
of its URI is used for this tuple.
</p>
</dd>

</dl>

</div>

<a name="xmlschema-CHP-4-SECT-3.3.3" /><div class="sect3">
<h3 class="sect3">4.3.3.3. URIs</h3>

<dl>
<dt><tt class="literal"><a href="ch16_01.htm">xs:anyURI</a></tt> </dt>
<dd>
<a name="INDEX-145" />
<a name="INDEX-146" />This is another string datatype in
which lexical and value spaces are different. This datatype tries to
compensate for the differences of format between XML and URIs as
specified in the RFCs 2396 and 2732. These RFCs are not very friendly
toward non-ASCII characters and require many character escapings that
are not necessary in XML. The W3C XML Schema Recommendation
doesn't describe the transformation to perform,
noting only that it is similar to what is described for XLink link
locators.
</p>


<p>As an example of this transformation, the <tt class="literal">href</tt>
attribute of an XHTML link written as:
</p>

<blockquote><pre class="code">&lt;a href="http://dmoz.org/World/Fran&#xE7;ais/"&gt;
  Word/Fran&#xE7;ais
&lt;/a&gt;</pre></blockquote>

<p>would be converted to the value:</p>

<blockquote><pre class="code">http://dmoz.org/World/Fran%e7ais/</pre></blockquote>

<p>in the value space.</p>

<p>The <tt class="literal"><a href="ch16_01.htm">xs:anyURI</a></tt> datatype doesn't
pay any attention to <tt class="literal">xml:base</tt> attributes that may
have been defined in the document.
</p>
</dd>

</dl>

</div>

<a name="xmlschema-CHP-4-SECT-3.3.4" /><div class="sect3">
<h3 class="sect3">4.3.3.4. Notations</h3>

<dl>
<dt><tt class="literal"><a href="ch16_01.htm">xs:NOTATION</a></tt> </dt>
<dd>
<a name="INDEX-147" />
<a name="INDEX-148" />This is probably
the most obscure of these string datatypes. This datatype was created
to implement the XML 1.0 notations. It cannot be used directly in a
schema; it must be used through user-defined derived datatypes. We
will see more of it in the next chapter.
</p>
</dd>

</dl>

</div>

<a name="xmlschema-CHP-4-SECT-3.3.5" /><div class="sect3">
<h3 class="sect3">4.3.3.5. Binary string-encoded datatypes</h3>

<p>XML 1.0 <a name="INDEX-149" /> <a name="INDEX-150" />is unable to hold binary content,
which must be string-encoded before it can be included in a XML
document. W3C XML Schema has defined two primary datatypes to support
two encodings that are commonly used (BinHex and base64). These
encodings may be used to include any binary content, including text
formats whose content may be incompatible with the XML markup. Other
binary text encodings may also be used (such as uuXXcode, Quote
Printable, BinHex, aencode, or base85, to name a few), but their
value would not be recognized by W3C XML Schema.
</p>

<dl>
<dt><tt class="literal"><a href="ch16_01.htm">xs:hexBinary</a></tt> </dt>
<dd>
<a name="INDEX-151" />
<a name="INDEX-152" />This defines a simple way to code binary
content as a character string by translating the value of each binary
octet into two hexadecimal digits. This encoding is different from
the encoding method called BinHex (introduced by Apple, described by
RFC 1741, and includes a mechanism to compress repetitive
characters).
</p>


<p>A UTF-8 XML header such as:</p>

<blockquote><pre class="code">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</pre></blockquote>

<p>that is encoded as <tt class="literal"><a href="ch16_01.htm">xs:hexBinary</a></tt> would be:</p>

<blockquote><pre class="code">3f3c6d78206c657673726f693d6e3122302e20226e656f636964676e223d54552d4622383e3f</pre></blockquote>
</dd>


<dt><tt class="literal"><a href="ch16_01.htm">xs:base64Binary</a></tt> </dt>
<dd>
<a name="INDEX-153" />
<a name="INDEX-154" />This matches the encoding known as
"base64" and is described in RFC
2045. It maps groups of 6 bits into an array of 64 printable
characters.
</p>


<p>The same header encoded as <tt class="literal"><a href="ch16_01.htm">xs:base64Binary</a></tt> would be:</p>

<blockquote><pre class="code">PD94bWwgdmVyc2lvbj0iMS4wIiBlbmNvZGluZz0iVVRGLTgiPz4NCg==</pre></blockquote>

<p>The W3C XML Schema Recommendation missed the fact that RFC 2045
requests a line break every 76 characters. This should be clarified
in an errata. The consequence of these line breaks being thought of
as optional by W3C XML Schema, is that the lexical and value spaces
of <tt class="literal"><a href="ch16_01.htm">xs:base64Binary</a></tt> cannot be considered<a name="INDEX-155" /> <a name="INDEX-156" /> <a name="INDEX-157" /> <a name="INDEX-158" /> <a name="INDEX-159" />identical.
</p>
</dd>

</dl>

</div>
</div>


<hr width="684" align="left" />
<div class="navbar"><table width="684" border="0"><tr><td align="left" valign="top" width="228"><a href="ch04_02.htm"><img src="../gifs/txtpreva.gif" alt="Previous" border="0" /></a></td><td align="center" valign="top" width="228"><a href="index.htm"><img src="../gifs/txthome.gif" alt="Home" border="0" /></a></td><td align="right" valign="top" width="228"><a href="ch04_04.htm"><img src="../gifs/txtnexta.gif" alt="Next" border="0" /></a></td></tr><tr><td align="left" valign="top" width="228">4.2. Whitespace Processing</td><td align="center" valign="top" width="228"><a href="index/index.htm"><img src="../gifs/index.gif" alt="Book Index" border="0" /></a></td><td align="right" valign="top" width="228">4.4. Numeric Datatypes</td></tr></table></div>
<hr width="684" align="left" />

<img src="../gifs/navbar.gif" usemap="#library-map" border="0" alt="Library Navigation Links" />
<p><p><font size="-1"><a href="copyrght.htm">Copyright &copy; 2002</a> O'Reilly &amp; Associates. All rights reserved.</font></p>

<map name="library-map">
<area shape="rect" coords="0,0,85,93" href="../index.htm"><area shape="rect" coords="85,0,180,98" href="../sax2/index.htm"><area shape="rect" coords="182,-1,261,100" href="../xmlnut/index.htm"><area shape="rect" coords="263,1,384,96" href="../jxml/index.htm"><area shape="rect" coords="386,1,463,100" href="../jxslt/index.htm"><area shape="rect" coords="466,1,533,112" href="../xslt/index.htm"><area shape="rect" coords="535,-1,610,108" href="index.htm"><area shape="rect" coords="613,1,696,121" href="../pxml/index.htm">
</map>

</body></html>