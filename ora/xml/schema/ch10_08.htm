<html><head><title>Namespace Behavior of Imported Components (XML Schema)</title><link rel="stylesheet" type="text/css" href="../style/style1.css" />

<meta name="DC.Creator" content="Eric van der Vlist" /><meta name="DC.Format" content="text/xml" scheme="MIME" /><meta name="DC.Language" content="en-US" /><meta name="DC.Publisher" content="O'Reilly &amp; Associates, Inc." /><meta name="DC.Source" scheme="ISBN" content="0596002521L" /><meta name="DC.Subject.Keyword" content="stuff" /><meta name="DC.Title" content="XML Schema" /><meta name="DC.Type" content="Text.Monograph" />

</head><body bgcolor="#ffffff">

<img src="gifs/smbanner.gif" usemap="#banner-map" border="0" alt="Book Home" /><map name="banner-map"><area shape="rect" coords="1,-2,616,66" href="index.htm" alt="XML Schema" /><area shape="rect" coords="629,-11,726,25" href="jobjects/fsearch.htm" alt="Search this book" /></map>

<div class="navbar"><table width="684" border="0"><tr><td align="left" valign="top" width="228"><a href="ch10_07.htm"><img src="../gifs/txtpreva.gif" alt="Previous" border="0" /></a></td><td align="center" valign="top" width="228" /><td align="right" valign="top" width="228"><a href="ch10_09.htm"><img src="../gifs/txtnexta.gif" alt="Next" border="0" /></a></td></tr></table></div>



<h2 class="sect1">10.8. Namespace Behavior of Imported Components</h2>

<p>You <a name="INDEX-810" />may be wondering about the
different approaches used to identify the namespaces for the elements
defined by the schema and the data types defined by <em class="citetitle">W3C
XML Schema</em>. Importing schemas imposes certain
restrictions on the use of namespaces in the <a name="INDEX-811" /> <a name="INDEX-812" /> <a name="INDEX-813" />imported
schema.
</p>

<p>When we define an element or attribute, we give it a namespace. That
namespace must be the same as the <a name="INDEX-814" />target namespace of the schema doing
the importing, even if the datatype of the element or attribute
belongs to a different namespace.
</p>

<p>The rules are slightly different when we define an element or
attribute by reference to a component which is in a different
namespace, rather than a datatype. In that case, the name of the
referenced component is imported, and that namespace must be the
target namespace of the imported schema.
</p>

<p>To illustrate how this works, we'll take a closer
look at two ways to create schemas described in this simple example:
</p>

<blockquote><pre class="code">&lt;?xml version="1.0"?&gt;
&lt;!-- Namespace: http://dyomedea.com/ns/library --&gt; 
&lt;library xmlns:ppl="http://dyomedea.com/ns/people"
  xmlns="http://dyomedea.com/ns/library"&gt;
  &lt;book id="b0836217462"&gt;
    &lt;title&gt;
      Being a Dog Is a Full-Time Job
    &lt;/title&gt;
    &lt;authors&gt;
      &lt;ppl:person id="CMS"&gt;
        &lt;ppl:name&gt;
          Charles M Schulz
        &lt;/ppl:name&gt;
      &lt;/ppl:person&gt;
    &lt;/authors&gt;
  &lt;/book&gt;
&lt;/library&gt;</pre></blockquote>

<p>This document contains two namespaces. Everything except the contents
of the <tt class="literal">authors</tt> element is in the
<tt class="literal">http://dyomedea.com/ns/library</tt> namespace. The
contents of the <tt class="literal">authors</tt> element
(<tt class="literal">ppl:person</tt> and <tt class="literal">ppl:name</tt>) are
in the <tt class="literal">http://dyomedea.com/ns/people</tt> namespace.
</p>

<p>We have two main options for representing this document using W3C XML
Schema. Both approaches start by defining a schema for the elements
in the <tt class="literal">http://dyomedea.com/ns/library</tt> namespace.
The first approach imports the schema defining the
<tt class="literal">http://dyomedea.com/ns/people</tt> namespace, and then
uses a reference to the <tt class="literal">ppl:person</tt> element to use
it inside the <tt class="literal">authors</tt> element:
</p>

<blockquote><pre class="code">&lt;?xml version="1.0"?&gt; 
&lt;xs:schema targetNamespace="http://dyomedea.com/ns/library"
  elementFormDefault="qualified" attributeFormDefault="unqualified"
  xmlns:xs="http://www.w3.org/2001/XMLSchema"
  xmlns:ppl="http://dyomedea.com/ns/people"
  xmlns:lib="http://dyomedea.com/ns/library"&gt; 
  &lt;xs:import namespace="http://dyomedea.com/ns/people"
    schemaLocation="very-simple-2-ns-ppl.xsd"/&gt;
  &lt;xs:element name="library"&gt;
    &lt;xs:complexType&gt;
      &lt;xs:sequence&gt;
        &lt;xs:element name="book" type="lib:bookType"/&gt;
      &lt;/xs:sequence&gt;
    &lt;/xs:complexType&gt;
  &lt;/xs:element&gt;
  &lt;xs:complexType name="bookType"&gt;
    &lt;xs:sequence&gt;
      &lt;xs:element name="title" type="xs:string"/&gt;
      &lt;xs:element name="authors"&gt;
        &lt;xs:complexType&gt;
          &lt;xs:sequence&gt;
            &lt;xs:element ref="ppl:person"/&gt;
          &lt;/xs:sequence&gt;
        &lt;/xs:complexType&gt;
      &lt;/xs:element&gt;
    &lt;/xs:sequence&gt;
    &lt;xs:attribute name="id" type="xs:ID" use="required"/&gt;
  &lt;/xs:complexType&gt;
&lt;/xs:schema&gt;</pre></blockquote>

<p>The second approach does the same import, but defines the
<tt class="literal">authors</tt> element as having the type
<tt class="literal">ppl:authorType</tt> rather than defining its complex
type explicitly, resulting in a shorter schema:
</p>

<blockquote><pre class="code">&lt;?xml version="1.0"?&gt; 
&lt;xs:schema targetNamespace="http://dyomedea.com/ns/library"
  elementFormDefault="qualified" attributeFormDefault="unqualified"
  xmlns:lib="http://dyomedea.com/ns/library"
  xmlns:ppl="http://dyomedea.com/ns/people"
  xmlns:xs="http://www.w3.org/2001/XMLSchema"&gt; 
  &lt;xs:import namespace="http://dyomedea.com/ns/people"
    schemaLocation="very-simple-2-ns-ppl.xsd"/&gt;
  &lt;xs:element name="library"&gt;
    &lt;xs:complexType&gt;
      &lt;xs:sequence&gt;
        &lt;xs:element name="book" type="lib:bookType"/&gt;
      &lt;/xs:sequence&gt;
    &lt;/xs:complexType&gt;
  &lt;/xs:element&gt;
  &lt;xs:complexType name="bookType"&gt;
    &lt;xs:sequence&gt;
      &lt;xs:element name="title" type="xs:string"/&gt;
      &lt;xs:element name="authors" type="ppl:authorType"/&gt;
    &lt;/xs:sequence&gt;
    &lt;xs:attribute name="id" type="xs:ID" use="required"/&gt;
  &lt;/xs:complexType&gt;
&lt;/xs:schema&gt;</pre></blockquote>

<p>Although the two schemas will validate the same instance documents,
the design style is quite different. Applications relying on the
schema for information about the document will see it in two very
different ways. The first approach provides a cleaner separation
between the two namespaces. The use of the reference allows the
<tt class="literal">ppl:person</tt> element to appear inside the
<tt class="literal">authors</tt> element but does nothing to mix the
<tt class="literal">authors</tt> element with the
<tt class="literal">http://dyomedea.com/ns/people</tt> namespace directly.
The second approach is briefer, but assigns a datatype in one
namespace to an element in another namespace.
</p>

<p>If you are using your schemas purely for validation, this distinction
is unimportant. Both schemas will validate identical sets of
documents. If, however, your applications rely on your schemas for
type information (using the PSVI or perhaps compile-time data-binding
based on the schema), the perspective shift may matter. Using the
datatype approach will mean that your applications need to understand
quite a bit more about the contents of your schema and creates new
dependencies between your application and the details of <a name="INDEX-815" />W3C XML <a name="INDEX-816" />Schema <a name="INDEX-817" /> <a name="INDEX-818" /> <a name="INDEX-819" />processing.
</p>



<hr width="684" align="left" />
<div class="navbar"><table width="684" border="0"><tr><td align="left" valign="top" width="228"><a href="ch10_07.htm"><img src="../gifs/txtpreva.gif" alt="Previous" border="0" /></a></td><td align="center" valign="top" width="228"><a href="index.htm"><img src="../gifs/txthome.gif" alt="Home" border="0" /></a></td><td align="right" valign="top" width="228"><a href="ch10_09.htm"><img src="../gifs/txtnexta.gif" alt="Next" border="0" /></a></td></tr><tr><td align="left" valign="top" width="228">10.7. Schemas for XML, XML Base and XLink</td><td align="center" valign="top" width="228"><a href="index/index.htm"><img src="../gifs/index.gif" alt="Book Index" border="0" /></a></td><td align="right" valign="top" width="228">10.9. Importing Schemas with No Namespaces</td></tr></table></div>
<hr width="684" align="left" />

<img src="../gifs/navbar.gif" usemap="#library-map" border="0" alt="Library Navigation Links" />
<p><p><font size="-1"><a href="copyrght.htm">Copyright &copy; 2002</a> O'Reilly &amp; Associates. All rights reserved.</font></p>

<map name="library-map">
<area shape="rect" coords="0,0,85,93" href="../index.htm"><area shape="rect" coords="85,0,180,98" href="../sax2/index.htm"><area shape="rect" coords="182,-1,261,100" href="../xmlnut/index.htm"><area shape="rect" coords="263,1,384,96" href="../jxml/index.htm"><area shape="rect" coords="386,1,463,100" href="../jxslt/index.htm"><area shape="rect" coords="466,1,533,112" href="../xslt/index.htm"><area shape="rect" coords="535,-1,610,108" href="index.htm"><area shape="rect" coords="613,1,696,121" href="../pxml/index.htm">
</map>

</body></html>