<html><head><title>Simple Content Models (XML Schema)</title><link rel="stylesheet" type="text/css" href="../style/style1.css" />

<meta name="DC.Creator" content="Eric van der Vlist" /><meta name="DC.Format" content="text/xml" scheme="MIME" /><meta name="DC.Language" content="en-US" /><meta name="DC.Publisher" content="O'Reilly &amp; Associates, Inc." /><meta name="DC.Source" scheme="ISBN" content="0596002521L" /><meta name="DC.Subject.Keyword" content="stuff" /><meta name="DC.Title" content="XML Schema" /><meta name="DC.Type" content="Text.Monograph" />

</head><body bgcolor="#ffffff">

<img src="gifs/smbanner.gif" usemap="#banner-map" border="0" alt="Book Home" /><map name="banner-map"><area shape="rect" coords="1,-2,616,66" href="index.htm" alt="XML Schema" /><area shape="rect" coords="629,-11,726,25" href="jobjects/fsearch.htm" alt="Search this book" /></map>

<div class="navbar"><table width="684" border="0"><tr><td align="left" valign="top" width="228"><a href="ch07_02.htm"><img src="../gifs/txtpreva.gif" alt="Previous" border="0" /></a></td><td align="center" valign="top" width="228" /><td align="right" valign="top" width="228"><a href="ch07_04.htm"><img src="../gifs/txtnexta.gif" alt="Next" border="0" /></a></td></tr></table></div>



<h2 class="sect1">7.3. Simple Content Models</h2>

<p>We will start by looking at complex types containing simple content
because they are closest to simple types, which
we've seen recently, and they also provide an easier
transition to the more complex world of complex contents. We will not
discuss the creation and derivation of simple types, already covered
in <a href="ch05_01.htm">Chapter 5, "Creating Simple Datatypes"</a>, but instead will focus on complex
types' simple content models (i.e., elements having
only text nodes and attributes) and study how they are created and
derived.
</p>

<a name="xmlschema-CHP-7-SECT-3.1" /><div class="sect2">
<h3 class="sect2">7.3.1. Creation of Simple Content Models</h3>

<p>Complex types <a name="INDEX-517" />
<a name="INDEX-518" />with simple content
models are created by adding a list of attributes to a simple type.
The operation of adding attributes to a simple type to create a
simple content complex type is called an extension of the simple
type. The syntax is straightforward and we have already seen examples
of such creation in <a href="ch04_01.htm">Chapter 4, "Using Predefined Simple Datatypes"</a>:
</p>

<blockquote><pre class="code">&lt;xs:element name="title"&gt;
  &lt;xs:complexType&gt;
    &lt;xs:simpleContent&gt;
      &lt;xs:extension base="string255"&gt;
        &lt;xs:attribute ref="lang"/&gt;
      &lt;/xs:extension&gt;
    &lt;/xs:simpleContent&gt;
  &lt;/xs:complexType&gt;
&lt;/xs:element&gt;</pre></blockquote>

<p>The only things that need to change here are that the definition of
the simple type cannot be directly embedded in the <tt class="literal"><a href="ch15_01.htm">xs:extension(complex content)</a></tt> and that it needs to be referenced through its
<tt class="literal">base</tt><a name="INDEX-519" />
attribute.
</p>

<p>This <a name="INDEX-520" />same syntax, with the same meaning, can
be used to create global complex types, which can be used to define
elements:
</p>

<blockquote><pre class="code">&lt;xs:complexType name="tokenWithLang"&gt;
  &lt;xs:simpleContent&gt;
    &lt;xs:extension base="xs:token"&gt;
      &lt;xs:attribute ref="lang"/&gt;
    &lt;/xs:extension&gt;
  &lt;/xs:simpleContent&gt;
&lt;/xs:complexType&gt;
          
&lt;xs:element name="title" type="tokenWithLang"/&gt;</pre></blockquote>

</div>
<a name="xmlschema-CHP-7-SECT-3.2" /><div class="sect2">
<h3 class="sect2">7.3.2. Derivation from Simple Contents</h3>

<p>Complex types provide a number of options for extending simple
content models.
</p>

<a name="xmlschema-CHP-7-SECT-3.2.1" /><div class="sect3">
<h3 class="sect3">7.3.2.1. Derivation by extension</h3>

<p>Derivation <a name="INDEX-521" /> <a name="INDEX-522" />by
<a name="INDEX-523" />extension is reserved for
complex types and has no equivalent for simple types. It increases
the number of child node elements or attributes allowed or expected
in the complex type. For simple content complex types, child elements
cannot be added and we stay with an extension that is identical to
the method used to create a simple content complex type from a simple
type. To add an attribute to the complex type
<tt class="literal">tokenWithLang</tt>, just shown in the previous example,
we could write:
</p>

<blockquote><pre class="code">&lt;xs:element name="title"&gt;
  &lt;xs:complexType&gt;
    &lt;xs:simpleContent&gt;
      &lt;xs:extension base="tokenWithLang"&gt;
        &lt;xs:attribute name="note" type="xs:token"/&gt;
      &lt;/xs:extension&gt;
    &lt;/xs:simpleContent&gt;
  &lt;/xs:complexType&gt;
&lt;/xs:element&gt;</pre></blockquote>

</div>

<a name="xmlschema-CHP-7-SECT-3.2.2" /><div class="sect3">
<h3 class="sect3">7.3.2.2. Derivation by restriction</h3>

<p>The <a name="INDEX-524" /> <a name="INDEX-525" />derivation by restriction of simple
content complex types is a feature at the border between the two
parts of W3C XML Schema (Part 1: Structure and Part 2: Datatypes).
It's also very similar to the derivation by
restriction of simple datatypes, discussed in <a href="ch06_01.htm">Chapter 6, "Using Regular Expressions to Specify Simple Datatypes"</a>. The only difference between the derivations
by restriction in these two contexts is that the derivation by
restriction of a simple content complex type allows not only
restriction of the scope of the text node, but also the restriction
of the scope of the attribute. This restriction follows the same
principle as the restriction of a simple type: any instance structure
deemed valid per the restricted type must also be valid per the base
type (with the exception already mentioned for the <tt class="literal"><a href="ch15_01.htm">xs:whiteSpace</a></tt> facet).
</p>

<p>The syntax used to restrict the text child is the same as the syntax
used to derive simple types by restriction. The facets are the same
as well. These facets must be followed by the new list of attributes,
which may have different types as long as they are derived from the
types of the attributes from the base type. Attributes that are not
mandatory in the base type can be specified in the new list as
"prohibited," and attributes that
are not included are considered unchanged. Following are some
examples of derivations that start from a simple content datatype
equivalent to the content model just shown:
</p>

<blockquote><pre class="code">&lt;xs:complexType name="tokenWithLangAndNote"&gt;
  &lt;xs:simpleContent&gt;
    &lt;xs:extension base="xs:token"&gt;
      &lt;xs:attribute name="lang" type="xs:language"/&gt;
      &lt;xs:attribute name="note" type="xs:token"/&gt;
    &lt;/xs:extension&gt;
  &lt;/xs:simpleContent&gt;
&lt;/xs:complexType&gt;</pre></blockquote>

<p>We can first show how to restrict the length of the
<a name="INDEX-526" />text node, as we've done
for simple types:
</p>

<blockquote><pre class="code">&lt;xs:element name="title"&gt;
  &lt;xs:complexType&gt;
    &lt;xs:simpleContent&gt;
      &lt;xs:restriction base="tokenWithLangAndNote"&gt;
        &lt;xs:maxLength value="255"/&gt; 
         &lt;xs:attribute name="lang" type="xs:language"/&gt;
        &lt;xs:attributename="note" type="xs:token"/&gt;
      &lt;/xs:restriction&gt;
    &lt;/xs:simpleContent&gt;
  &lt;/xs:complexType&gt;
&lt;/xs:element&gt;</pre></blockquote>

<p>To remove the <tt class="literal">note</tt> attribute from the element
<tt class="literal">title</tt>, we declare <tt class="literal">note</tt> to be
<tt class="literal">prohibited</tt> in the list of attributes in the
restriction:
</p>

<blockquote><pre class="code">&lt;xs:element name="title"&gt;
  &lt;xs:complexType&gt;
    &lt;xs:simpleContent&gt;
      &lt;xs:restriction base="tokenWithLangAndNote"&gt;
        &lt;xs:maxLength value="255"/&gt;
        &lt;xs:attribute name="lang" type="xs:language"/&gt;
        &lt;xs:attribute name="note" use="prohibited"/&gt;
      &lt;/xs:restriction&gt;
    &lt;/xs:simpleContent&gt;
  &lt;/xs:complexType&gt;
&lt;/xs:element&gt;</pre></blockquote>

<p>We can also restrict the
<a name="INDEX-527" />datatype
by restricting its attributes. For instance, if we want to restrict
the number of possible languages, we can do it directly in the
definition of the <tt class="literal">lang</tt> attribute in the derived
type:
</p>

<blockquote><pre class="code">&lt;xs:element name="title"&gt;
  &lt;xs:complexType&gt;
    &lt;xs:simpleContent&gt;
      &lt;xs:restriction base="tokenWithLangAndNote"&gt;
        &lt;xs:maxLength value="255"/&gt;
        &lt;xs:attribute name="lang"&gt;
          &lt;xs:simpleType&gt;
            &lt;xs:restriction base="xs:language"&gt;
              &lt;xs:enumeration value="en"/&gt;
              &lt;xs:enumeration value="es"/&gt;
            &lt;/xs:restriction&gt;
          &lt;/xs:simpleType&gt;
        &lt;/xs:attribute&gt;
      &lt;/xs:restriction&gt;
    &lt;/xs:simpleContent&gt;
  &lt;/xs:complexType&gt;
&lt;/xs:element&gt;</pre></blockquote>

</div>

<a name="xmlschema-CHP-7-SECT-3.2.3" /><div class="sect3">
<h3 class="sect3">7.3.2.3. Comparison of these two methods</h3>

<p>Despite apparent similarities, derivations by extension and
restriction do not have much more in common than deriving new simple
content types from base types! Derivation by extension can only add
new attributes. It can neither change the datatype of the text node
nor the type of an attribute defined in its base type. Derivation by
restriction appears to be more flexible and can restrict the datatype
of the text node and of the attributes of the base type. It can also
remove attributes that are not mandatory in its base <a name="INDEX-528" /> <a name="INDEX-529" />type.
</p>

</div>
</div>


<hr width="684" align="left" />
<div class="navbar"><table width="684" border="0"><tr><td align="left" valign="top" width="228"><a href="ch07_02.htm"><img src="../gifs/txtpreva.gif" alt="Previous" border="0" /></a></td><td align="center" valign="top" width="228"><a href="index.htm"><img src="../gifs/txthome.gif" alt="Home" border="0" /></a></td><td align="right" valign="top" width="228"><a href="ch07_04.htm"><img src="../gifs/txtnexta.gif" alt="Next" border="0" /></a></td></tr><tr><td align="left" valign="top" width="228">7.2. Examining the Landscape</td><td align="center" valign="top" width="228"><a href="index/index.htm"><img src="../gifs/index.gif" alt="Book Index" border="0" /></a></td><td align="right" valign="top" width="228">7.4. Complex Content Models</td></tr></table></div>
<hr width="684" align="left" />

<img src="../gifs/navbar.gif" usemap="#library-map" border="0" alt="Library Navigation Links" />
<p><p><font size="-1"><a href="copyrght.htm">Copyright &copy; 2002</a> O'Reilly &amp; Associates. All rights reserved.</font></p>

<map name="library-map">
<area shape="rect" coords="0,0,85,93" href="../index.htm"><area shape="rect" coords="85,0,180,98" href="../sax2/index.htm"><area shape="rect" coords="182,-1,261,100" href="../xmlnut/index.htm"><area shape="rect" coords="263,1,384,96" href="../jxml/index.htm"><area shape="rect" coords="386,1,463,100" href="../jxslt/index.htm"><area shape="rect" coords="466,1,533,112" href="../xslt/index.htm"><area shape="rect" coords="535,-1,610,108" href="index.htm"><area shape="rect" coords="613,1,696,121" href="../pxml/index.htm">
</map>

</body></html>