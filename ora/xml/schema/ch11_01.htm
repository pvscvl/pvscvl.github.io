<html><head><title>Referencing Schemas and Schema Datatypes in XML Documents (XML Schema)</title><link rel="stylesheet" type="text/css" href="../style/style1.css" />

<meta name="DC.Creator" content="Eric van der Vlist" /><meta name="DC.Format" content="text/xml" scheme="MIME" /><meta name="DC.Language" content="en-US" /><meta name="DC.Publisher" content="O'Reilly &amp; Associates, Inc." /><meta name="DC.Source" scheme="ISBN" content="0596002521L" /><meta name="DC.Subject.Keyword" content="stuff" /><meta name="DC.Title" content="XML Schema" /><meta name="DC.Type" content="Text.Monograph" />

</head><body bgcolor="#ffffff">

<img src="gifs/smbanner.gif" usemap="#banner-map" border="0" alt="Book Home" /><map name="banner-map"><area shape="rect" coords="1,-2,616,66" href="index.htm" alt="XML Schema" /><area shape="rect" coords="629,-11,726,25" href="jobjects/fsearch.htm" alt="Search this book" /></map>

<div class="navbar"><table width="684" border="0"><tr><td align="left" valign="top" width="228"><a href="ch10_11.htm"><img src="../gifs/txtpreva.gif" alt="Previous" border="0" /></a></td><td align="center" valign="top" width="228" /><td align="right" valign="top" width="228"><a href="ch11_02.htm"><img src="../gifs/txtnexta.gif" alt="Next" border="0" /></a></td></tr></table></div>


<h1 class="chapter">Chapter 11. Referencing Schemas and Schema Datatypes in XML Documents</h1>
<div class="htmltoc"><h4 class="tochead">Contents:</h4>
  <p> <a href="#xmlschema-CHP-11-SECT-1">Associating Schemas with Instance Documents</a><br />
<a href="ch11_02.htm">Defining Element Types</a><br />
<a href="ch11_03.htm">Defining Nil (Null) Values</a><br />
<a href="ch11_04.htm">Beware the Intrusive Nature of These Features...</a><br /></p></div>

<p>So far, we have seen how W3C XML Schemas can be written outside XML
documents without touching the actual instance documents. In this
chapter, we will introduce a new namespace to be used inside XML
documents to provide information for use by schema processors. This
information may identify the location of the associated schemas, as
well as further identify the schema types used, which opens a new
level of flexibility and interaction between schemas and instance
documents in the design of XML applications.
</p>

<p>This namespace (which is the same for all W3C XML Schema
meta-information located in the instance documents themselves) is
<em class="emphasis">http://www.w3.org/2001/XMLSchema-instance</em>.
The prefix usually used to designate this namespace is
<tt class="literal">xsi</tt>. This namespace uses only four attributes,
which are considered valid in any element of any instance document
without being declared in the schema.
</p>
<div class="sect1"><a name="xmlschema-CHP-11-SECT-1" /></a>
<h2 class="sect1">11.1. Associating Schemas with Instance Documents</h2>

<p>The <a name="INDEX-854" /></a> <a name="INDEX-855" /></a>first <a name="INDEX-856" /></a>piece
of information that may be useful for a schema processor is some
hints about the locations where the schema processor might find
schemas relevant to the instance document. This feature is similar to
the SYSTEM identifier of the XML doctype declaration, but with some
important differences. The first difference is that a schema may not
be enough to describe a document, since each schema might describe
only one namespace (or lack of a namespace), and the composition of
the schemas can be done in the instance document. The second
difference is that the locations indicated in the instance documents
are only considered hints and may be overridden by the user or by the
schema processor.
</p>

<p>The hard link between a XML document and its DTD has fed many debates
in the XML community. Many developers remember what happened when
Netscape restructured their web site. The address of the DTD for RSS
0.91 (<a href="../../../../../../my.netscape.com/publish/formats/rss-0.91.dtd">http://my.netscape.com/publish/formats/rss-0.91.dtd</a>)
suddenly returned a 404 error, breaking hundreds of applications.
Another motivation for "soft" links
between instance documents and their schemas is they allow
application of different schemas, depending on local business rules.
For instance, a supplier receiving an order in a XML document may
have specific rules to check the document with its own schema.
</p>

<p>For all these reasons, the Recommendation states that if a schema
processor finds such information in a document, it should try to
retrieve the schemas at the locations indicated, but it could be
directed otherwise by the invoking application or user. When such
information is missing, a schema processor may also be directed by
the invoking application to dereference specified locations. When no
information is provided at all by the invoking application or in the
instance document, the schema processor is free to try any method to
find a schema. Among the methods mentioned in this case, a schema
processor may try to load the resource that may be available at the
namespace URI to see if a schema is published there, but it could use
other techniques as well, such as RDDL or catalog systems.
</p>

<p>W3C XML Schema defines two attributes to define a list of schema
locations associated with target namespaces as well as the location
of a schema without target namespace. The attribute to use when there
is no target namespace is
<tt class="literal">xsi:noNamespaceSchemaLocation</tt><a name="INDEX-857" /></a> <a name="INDEX-858" /></a>, and its value is a URI
pointing to the corresponding schema. Although this attribute can be
used without a declaration in any element of any instance document,
it must be found by the schema processor before it needs it to
validate any element or attribute (i.e., at or before the last point
in the first element without a namespace found in the document).
Furthermore, its scope is global to the entire document and it cannot
be redefined.
</p>

<p>In practice, the <tt class="literal">xsi:noNamespaceSchemaLocation</tt>
attribute will often be located in the document element. We can
locate a schema named <tt class="literal">first.xsd</tt> in the same
directory as the instance document in the example used in this
chapter (which doesn't use any namespace) as:
</p>

<blockquote><pre class="code">&lt;library xsi:noNamespaceSchemaLocation="first.xsd"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"&gt;
  .../...
&lt;/library&gt;</pre></blockquote>

<p>To reference schemas with a target namespace, lists of
<a name="INDEX-859" /></a>URIs must be provided in
<tt class="literal">xsi:schemaLocation</tt><a name="INDEX-860" /></a> <a name="INDEX-861" /></a> attributes. This list is, in fact, a list
of pairs of URIs. In each pair, the first URI identifies a target
namespace and the second URI identifies the location of a schema with
this target namespace. The same rule that applied to
<tt class="literal">xsi:noNamespaceSchemaLocation</tt> applies to the
location of this attribute: for each target namespace for which you
want to provide a schema location, you need to provide this
information before a schema processor needs it to do its job.
</p>

<p>To illustrate the usage of the <tt class="literal">xsi:schemaLocation</tt>
attribute, let's examine a simplified version of an
example with the two namespaces that are described in <a href="ch10_01.htm">Chapter 10, "Controlling Namespaces"</a>. The instance document is as follows (without
any <tt class="literal">xsi:schemaLocation</tt>):
</p>

<blockquote><pre class="code">&lt;?xml version="1.0"?&gt; 
&lt;book id="b0836217462" xmlns="http://dyomedea.com/ns/library"
  xmlns:mkt="http://dyomedea.com/ns/library/mkt"&gt;
  &lt;title&gt;
    Being a Dog Is a Full-Time Job
  &lt;/title&gt;
  &lt;author&gt;
    Charles M Schulz
  &lt;/author&gt;
  &lt;mkt:cover&gt;
    Paperback
  &lt;/mkt:cover&gt;
  &lt;mkt:pages&gt;
    128
  &lt;/mkt:pages&gt;
&lt;/book&gt;</pre></blockquote>

<p>We have an open schema for the main namespaces that allows arbitrary
elements from other namespaces, such as:
</p>

<blockquote><pre class="code">&lt;?xml version="1.0"?&gt; 
&lt;xs:schema targetNamespace="http://dyomedea.com/ns/library"
  elementFormDefault="qualified" attributeFormDefault="unqualified"
  xmlns:lib="http://dyomedea.com/ns/library"
  xmlns:xs="http://www.w3.org/2001/XMLSchema"&gt;
  &lt;xs:element name="book"&gt;
    &lt;xs:complexType&gt;
      &lt;xs:sequence&gt;
        &lt;xs:element name="title" type="xs:token"/&gt; 
        &lt;xs:element name="author" type="xs:token"
          maxOccurs="unbounded"/&gt; 
        &lt;xs:any namespace="##other" processContents="lax"
          minOccurs="0"maxOccurs="unbounded"/&gt;
      &lt;/xs:sequence&gt;
      &lt;xs:attribute name="id" type="xs:ID"/&gt;
    &lt;/xs:complexType&gt;
  &lt;/xs:element&gt;
&lt;/xs:schema&gt;</pre></blockquote>

<p>We also have a schema for the two elements that belong to the
namespace for our marketing department:
</p>

<blockquote><pre class="code">&lt;?xml version="1.0"?&gt; 
&lt;xs:schema targetNamespace="http://dyomedea.com/ns/library/mkt"
  elementFormDefault="qualified" attributeFormDefault="unqualified"
  xmlns:xs="http://www.w3.org/2001/XMLSchema"&gt;
  &lt;xs:element name="cover" type="xs:NMTOKEN"/&gt;
  &lt;xs:element name="pages" type="xs:nonNegativeInteger"/&gt;
&lt;/xs:schema&gt;</pre></blockquote>

<p>This example was carefully chosen to have two schemas for two
namespaces that are not linked together: there is no reference to the
marketing namespace from the library and vice versa. We have several
possibilities, depending on the hints given to the schema processor.
If we validate the instance document without any
<tt class="literal">xsi:schemaLocation</tt> attribute or any other
information from the command line or application, the
<a name="INDEX-862" /></a>schema validator is left alone to try
to locate a schema. Depending on the algorithm implemented in the
processor, it may try to dereference the namespace URIs of the
document element (i.e., to attempt to load a resource that may be
available here). In our case, this is <em class="emphasis">http://dyomedea.com/ns/library</em>. If there is
no schema there, then it can't say whether the
document is valid or not. Alternatively, the schema processor can try
to dereference a RDDL document at this location, hoping to find a
reference to a schema in the RDDL document.
</p>

<p>More typically, the author of the instance document may be kind
enough to give the location of the schema for the library namespace
-- for instance:
</p>

<blockquote><pre class="code">&lt;?xml version="1.0"?&gt; 
&lt;book xsi:schemaLocation="http://dyomedea.com/ns/library library.xsd"
  id="b0836217462" xmlns="http://dyomedea.com/ns/library"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xmlns:mkt="http://dyomedea.com/ns/library/mkt"&gt;
  &lt;title&gt;
    Being a Dog Is a Full-Time Job
  &lt;/title&gt;
  &lt;author&gt;
    Charles M Schulz
  &lt;/author&gt;
  &lt;mkt:cover&gt;
    Paperback
  &lt;/mkt:cover&gt;
  &lt;mkt:pages&gt;
    128
  &lt;/mkt:pages&gt;
&lt;/book&gt;</pre></blockquote>

<p>We don't have any choice above the location of
<tt class="literal">xsi:schemaLocation</tt> because the information is
needed to validate the document element. If we want to include it, we
must locate it in the document element. This attribute contains a
single pair of values separated by a space:
</p>

<blockquote><pre class="code">"http://dyomedea.com/ns/library library.xsd"</pre></blockquote>

<p>As mentioned, the first value identifies the target namespace while
the second value identifies the schema location. With this
information at hand, the processor can read the schema and start
validating the instance document. However, when it finds the
marketing namespace that matches the
<tt class="literal">xs:any</tt><a name="INDEX-863" /></a> wildcard, with a
<tt class="literal">processContents</tt><a name="INDEX-864" /></a> attribute asking to validate when
possible, it may again try to find a schema for this namespace by
dereferencing the namespace URI. If it can find a schema, it
validates the elements from the marketing namespace; if not, it
considers them valid, since the <tt class="literal">processContents</tt>
attribute is set to "lax."
</p>

<p>If we want to improve our chances of finding a schema for the
marketing library, we can also define its location in a
<tt class="literal">xsi:schemaLocation</tt> attribute. The place in the
instance document that we can provide the information is in the first
element that uses this namespace, such as:
</p>

<blockquote><pre class="code">&lt;?xml version="1.0"?&gt; 
&lt;book id="b0836217462"
  xsi:schemaLocation="http://dyomedea.com/ns/library library.xsd"
  xmlns="http://dyomedea.com/ns/library"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xmlns:mkt="http://dyomedea.com/ns/library/mkt"&gt;
  &lt;title&gt;
    Being a Dog Is a Full-Time Job
  &lt;/title&gt;
  &lt;author&gt;
    Charles M Schulz
  &lt;/author&gt; 
  &lt;mkt:cover xsi:schemaLocation="http://dyomedea.com/ns/library/mkt
    marketing.xsd"&gt;
    Paperback
  &lt;/mkt:cover&gt;
  &lt;mkt:pages&gt;
    128
  &lt;/mkt:pages&gt;
&lt;/book&gt;</pre></blockquote>

<p>The schema processor now has all the hints it needs to retrieve the
schemas for both namespaces, and it should fully validate the
elements that belong to the marketing namespace. Alternatively, we
can place all the schema location hints in the same
<tt class="literal">xsi:schemaLocation</tt> <a name="INDEX-865" /></a> <a name="INDEX-866" /></a>attribute:
</p>

<blockquote><pre class="code">&lt;?xml version="1.0"?&gt; 
&lt;book id="b0836217462"
  xsi:schemaLocation="http://dyomedea.com/ns/library library.xsd
  http://dyomedea.com/ns/library/mkt marketing.xsd"
  xmlns="http://dyomedea.com/ns/library"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xmlns:mkt="http://dyomedea.com/ns/library/mkt"&gt;
  &lt;title&gt;
    Being a Dog Is a Full-Time Job
  &lt;/title&gt;
  &lt;author&gt;
    Charles M Schulz
  &lt;/author&gt;
  &lt;mkt:cover&gt;
    Paperback
  &lt;/mkt:cover&gt;
  &lt;mkt:pages&gt;
    128
  &lt;/mkt:pages&gt;
&lt;/book&gt;</pre></blockquote>



<a name="ch11-3-fm2xml" /></a><blockquote><b>TIP:</b> 
In these examples, we used relative
<a name="INDEX-867" /></a>URIs to locate the schemas. This is a
good solution only if you assume that the schemas will be moved with
the instance documents, and in many cases, absolute URIs will be
preferred. When this is the case, they can be mapped back into local
resources by a mechanism such as XML Catalogs (<a href="../../../../../../www.oasis-open.org/committees/entity/spec-2001-08-06.html">http://www.oasis-open.org/committees/entity/spec-2001-08-06.html</a>),
an OASIS specification that is implemented by an increasing number
<a name="INDEX-868" /></a>of
<a name="INDEX-869" /></a>
<a name="INDEX-870" /></a>tools.
<p></p>
</blockquote>

</div>

<hr width="684" align="left" />
<div class="navbar"><table width="684" border="0"><tr><td align="left" valign="top" width="228"><a href="ch10_11.htm"><img src="../gifs/txtpreva.gif" alt="Previous" border="0" /></a></td><td align="center" valign="top" width="228"><a href="index.htm"><img src="../gifs/txthome.gif" alt="Home" border="0" /></a></td><td align="right" valign="top" width="228"><a href="ch11_02.htm"><img src="../gifs/txtnexta.gif" alt="Next" border="0" /></a></td></tr><tr><td align="left" valign="top" width="228">10.11. Allowing Any Elements or Attributes from a Particular Namespace</td><td align="center" valign="top" width="228"><a href="index/index.htm"><img src="../gifs/index.gif" alt="Book Index" border="0" /></a></td><td align="right" valign="top" width="228">11.2. Defining Element Types</td></tr></table></div>
<hr width="684" align="left" />

<img src="../gifs/navbar.gif" usemap="#library-map" border="0" alt="Library Navigation Links" />
<p><p><font size="-1"><a href="copyrght.htm">Copyright &copy; 2002</a> O'Reilly &amp; Associates. All rights reserved.</font></p>

<map name="library-map">
<area shape="rect" coords="0,0,85,93" href="../index.htm"><area shape="rect" coords="85,0,180,98" href="../sax2/index.htm"><area shape="rect" coords="182,-1,261,100" href="../xmlnut/index.htm"><area shape="rect" coords="263,1,384,96" href="../jxml/index.htm"><area shape="rect" coords="386,1,463,100" href="../jxslt/index.htm"><area shape="rect" coords="466,1,533,112" href="../xslt/index.htm"><area shape="rect" coords="535,-1,610,108" href="index.htm"><area shape="rect" coords="613,1,696,121" href="../pxml/index.htm">
      </map>

</body></html>