<html><head><title>To Qualify Or Not to Qualify? (XML Schema)</title><link rel="stylesheet" type="text/css" href="../style/style1.css" />

<meta name="DC.Creator" content="Eric van der Vlist" /><meta name="DC.Format" content="text/xml" scheme="MIME" /><meta name="DC.Language" content="en-US" /><meta name="DC.Publisher" content="O'Reilly &amp; Associates, Inc." /><meta name="DC.Source" scheme="ISBN" content="0596002521L" /><meta name="DC.Subject.Keyword" content="stuff" /><meta name="DC.Title" content="XML Schema" /><meta name="DC.Type" content="Text.Monograph" />

</head><body bgcolor="#ffffff">

<img src="gifs/smbanner.gif" usemap="#banner-map" border="0" alt="Book Home" /><map name="banner-map"><area shape="rect" coords="1,-2,616,66" href="index.htm" alt="XML Schema" /><area shape="rect" coords="629,-11,726,25" href="jobjects/fsearch.htm" alt="Search this book" /></map>

<div class="navbar"><table width="684" border="0"><tr><td align="left" valign="top" width="228"><a href="ch10_02.htm"><img src="../gifs/txtpreva.gif" alt="Previous" border="0" /></a></td><td align="center" valign="top" width="228" /><td align="right" valign="top" width="228"><a href="ch10_04.htm"><img src="../gifs/txtnexta.gif" alt="Next" border="0" /></a></td></tr></table></div>



<h2 class="sect1">10.3. To Qualify Or Not to Qualify?</h2>

<p>The <a name="INDEX-745" /> <a name="INDEX-746" /> <a name="INDEX-747" />schemas <a name="INDEX-748" />that we have written
up to this point have had no target namespace declaration. We also
could only describe elements and attributes that
didn't belong to any namespace.
</p>

<p>The declaration of a <a name="INDEX-749" />target namespace gives us the
possibility of defining elements and attributes that belong to the
target namespace (called
"qualified") and elements and
attributes that don't belong to any namespace
(called "unqualified").
</p>



<a name="ch10-7-fm2xml" /><blockquote><b>TIP:</b> 
The purpose of a schema is to describe a vocabulary, in which
top-level nodes belong to its target namespace. For this reason, it
is forbidden to define global elements that are unqualified when a
target namespace is declared.
</p>
</blockquote>

<p>The distinction between qualified and unqualified elements and
attributes is made through their <tt class="literal">&lt;form&gt;</tt>
attributes--for example:
</p>

<blockquote><pre class="code">&lt;xs:element name="book" form="qualified"/&gt;
  
&lt;xs:attribute name="isbn" form="qualified"/&gt;
  
&lt;xs:attribute name="lang" form="unqualified"/&gt;
  
&lt;xs:element name="character" form="unqualified"/&gt;</pre></blockquote>

<p>The default values of these <tt class="literal">form</tt> attributes are
defined in the <tt class="literal">elementFormDefault</tt><a name="INDEX-750" /> and
<tt class="literal">attributeFormDefault</tt><a name="INDEX-751" /> attributes that we have added in our
<tt class="literal">xs:schema</tt> element.
</p>

<p>These attributes both have default values of their own, which are:
<tt class="literal">elementFormDefault="unqualified"</tt> and
<tt class="literal">attributeFormDefault="unqualified"</tt>. These values
are appropriate to the case in which only the document element uses a
namespace:
</p>

<blockquote><pre class="code">&lt;lib:library xmlns:lib="http://dyomedea.com/ns/library"&gt;
  &lt;book id="b0836217462" available="yes"&gt;
    &lt;isbn&gt;
      0836217462
    &lt;/isbn&gt;
    &lt;title&gt;
      Being a Dog Is a Full-Time Job
    &lt;/title&gt;
  &lt;/book&gt;
&lt;/lib:library&gt;</pre></blockquote>

<p>Since global elements and attributes must be qualified, defining this
schema as a single schema requires that all the elements and
attributes are locally defined.
</p>

<p>Another combination,
<tt class="literal">elementFormDefault="qualified"</tt> and
<tt class="literal">attributeFormDefault="unqualified"</tt> matches the
common case in which a namespace is attached to the root element as
the default namespace that will, by definition apply to the included
elements but not to the attributes. (Per the Namespaces
Recommendation, the <a name="INDEX-752" />default
namespace does not apply to attributes.)
</p>

<blockquote><pre class="code">&lt;library xmlns="http://dyomedea.com/ns/library"&gt;
  &lt;book id="b0836217462" available="yes"&gt;
    &lt;isbn&gt;
      0836217462
    &lt;/isbn&gt;
    &lt;title&gt;
      Being a Dog Is a Full-Time Job
    &lt;/title&gt;
  &lt;/book&gt;
&lt;/library&gt;</pre></blockquote>

<p>The usage considers that unqualified attributes belong to the same
<a name="INDEX-753" />vocabulary as their
parent element, and the vocabularies that take advantage of qualified
attributes are often vocabularies that supply attributes used in
elements from other namespaces. Examples of such vocabularies include
RDF and attribute-only vocabularies such as XLink and XML Base. The
schemas for these vocabularies will benefit from an
<tt class="literal">attributeFormDefault</tt> set to qualified.
</p>

<p>One should pay attention to the special status of the attributes in
the namespace specification. The <a name="INDEX-754" />default namespace does not apply to
attributes. This means that an attribute without a prefix is
considered to have no namespace.
</p>

<p>Another confusing aspect of attributes with a prefix (which thus
belong to a namespace) is these attributes are called
"<a name="INDEX-755" />global
attributes" in the namespaces recommendation. In
<em class="emphasis">W3C XML Schema</em> the term global is used
differently, in opposition to local elements or attributes. A global
attribute, per namespaces, is therefore a qualified attribute per
<em class="emphasis">W3C XML Schema</em>, and may be globally or locally
defined.
</p>



<a name="ch10-9-fm2xml" /><blockquote><b>TIP:</b> 
Remember that <tt class="literal">&lt;elementFormDefault&gt;</tt> and
<tt class="literal">&lt;attributeFormDefault&gt;</tt> define default values
and that you can specify--element by element and attribute by
attribute--if they are qualified or not.
</p>
</blockquote>

<p>Before we see how we can bring more namespaces into the game,
let's look at a simple instance document with a
single namespace and <a name="INDEX-756" />unqualified
<a name="INDEX-757" />attributes: 
</p>

<blockquote><pre class="code">&lt;?xml version="1.0"?&gt;
&lt;library xmlns="http://dyomedea.com/ns/library"&gt;
  &lt;book id="b0836217462" available="yes"&gt;
    &lt;isbn&gt;
      0836217462
    &lt;/isbn&gt;
    &lt;title&gt;
      Being a Dog Is a Full-Time Job
    &lt;/title&gt;
    &lt;authors&gt;
      &lt;person id="CMS"&gt;
        &lt;name&gt;
          Charles M Schulz
        &lt;/name&gt;
        &lt;born&gt;
          1922-11-26
        &lt;/born&gt;
        &lt;dead&gt;
          2000-02-12
        &lt;/dead&gt;
      &lt;/person&gt;
    &lt;/authors&gt;
    &lt;characters&gt;
      &lt;person id="PP"&gt;
        &lt;name&gt;
          Peppermint Patty
        &lt;/name&gt;
        &lt;born&gt;
          1966-08-22
        &lt;/born&gt;
        &lt;qualification&gt;
          bold, brash and tomboyish
        &lt;/qualification&gt;
      &lt;/person&gt;
      &lt;person id="Snoopy"&gt;
        &lt;name&gt;
          Snoopy
        &lt;/name&gt;
        &lt;born&gt;
          1950-10-04
        &lt;/born&gt;
        &lt;qualification&gt;
          extroverted beagle
        &lt;/qualification&gt;
      &lt;/person&gt;
      &lt;person id="Schroeder"&gt;
        &lt;name&gt;
          Schroeder
        &lt;/name&gt;
        &lt;born&gt;
          1951-05-30
        &lt;/born&gt;
        &lt;qualification&gt;
          brought classical music to the Peanuts strip
        &lt;/qualification&gt;
      &lt;/person&gt;
      &lt;person id="Lucy"&gt;
        &lt;name&gt;
          Lucy
        &lt;/name&gt;
        &lt;born&gt;
          1952-03-03
        &lt;/born&gt;
        &lt;qualification&gt;
          bossy, crabby and selfish
        &lt;/qualification&gt;
      &lt;/person&gt;
    &lt;/characters&gt;
  &lt;/book&gt;
&lt;/library&gt;</pre></blockquote>

<p>If <a name="INDEX-758" />we
want to avoid confusion while writing a schema for this instance
document, we can define prefixes in the schema for both our
<a name="INDEX-759" /> <a name="INDEX-760" />target namespace and for the W3C XML
Schema namespace, leading to a schema such as:
</p>

<blockquote><pre class="code">&lt;?xml version="1.0"?&gt; 
&lt;xs:schema targetNamespace="http://dyomedea.com/ns/library"
  elementFormDefault="qualified" attributeFormDefault="unqualified"
  xmlns:lib="http://dyomedea.com/ns/library"
  xmlns:xs="http://www.w3.org/2001/XMLSchema"&gt;
  &lt;xs:element name="library"&gt;
    &lt;xs:complexType&gt;
      &lt;xs:sequence&gt;
        &lt;xs:element name="book" type="lib:bookType"/&gt;
      &lt;/xs:sequence&gt;
    &lt;/xs:complexType&gt;
  &lt;/xs:element&gt;
  &lt;xs:element name="person"&gt;
    &lt;xs:complexType&gt;
      &lt;xs:sequence&gt;
        &lt;xs:element name="name" type="xs:string"/&gt;
        &lt;xs:element name="born" type="xs:date"/&gt;
        &lt;xs:element name="dead" type="xs:date" minOccurs="0"/&gt; 
        &lt;xs:element name="qualification" type="xs:string"
          minOccurs="0"/&gt;
      &lt;/xs:sequence&gt;
      &lt;xs:attribute name="id" type="xs:ID" use="required"/&gt;
    &lt;/xs:complexType&gt;
  &lt;/xs:element&gt;
  &lt;xs:complexType name="bookType"&gt;
    &lt;xs:sequence&gt;
      &lt;xs:element name="isbn" type="xs:NMTOKEN"/&gt;
      &lt;xs:element name="title" type="xs:string"/&gt;
      &lt;xs:element name="authors"&gt;
        &lt;xs:complexType&gt;
          &lt;xs:sequence&gt;
            &lt;xs:element ref="lib:person" maxOccurs="unbounded"/&gt;
          &lt;/xs:sequence&gt;
        &lt;/xs:complexType&gt;
      &lt;/xs:element&gt;
      &lt;xs:element name="characters"&gt;
        &lt;xs:complexType&gt;
          &lt;xs:sequence&gt;
            &lt;xs:element ref="lib:person" maxOccurs="unbounded"/&gt;
          &lt;/xs:sequence&gt;
        &lt;/xs:complexType&gt;
      &lt;/xs:element&gt;
    &lt;/xs:sequence&gt;
    &lt;xs:attribute name="id" type="xs:ID" use="required"/&gt;
    &lt;xs:attribute name="available" type="xs:string" use="required"/&gt;
  &lt;/xs:complexType&gt;
&lt;/xs:schema&gt;</pre></blockquote>

<p>In this example, the names of components defined by the schema are
always unprefixed when they are defined. Because this schema only
defines components in the single <em class="emphasis">http://dyomedea.com/ns/library</em> namespace
(identified as the <tt class="literal">targetNamespace</tt> attribute of
the <tt class="literal">xs:schema</tt> element), there isn't any risk of
confusion. The only other namespaces used here are the namespace for
W3C XML Schema itself, identified with an <tt class="literal">xs</tt>
prefix, and another mapping for the <em class="emphasis">http://dyomedea.com/ns/library</em> namespace,
using <tt class="literal">lib</tt> as the prefix. The
<tt class="literal">lib</tt>-prefixed form is used for cross-references
between declarations.
</p>

<p>A strictly equivalent schema, defining the exact same data model, can
be defined using the target namespace as the
<a name="INDEX-761" />default namespace of the schema document:
</p>

<blockquote><pre class="code">&lt;?xml version="1.0"?&gt; 
&lt;xs:schema targetNamespace="http://dyomedea.com/ns/library"
  elementFormDefault="qualified" attributeFormDefault="unqualified"
  xmlns:xs="http://www.w3.org/2001/XMLSchema"
  xmlns="http://dyomedea.com/ns/library"&gt;
  &lt;xs:element name="library"&gt;
    &lt;xs:complexType&gt;
      &lt;xs:sequence&gt;
        &lt;xs:element name="book" type="bookType"/&gt;
      &lt;/xs:sequence&gt;
    &lt;/xs:complexType&gt;
  &lt;/xs:element&gt;
  &lt;xs:element name="person"&gt;
    &lt;xs:complexType&gt;
      &lt;xs:sequence&gt;
        &lt;xs:element name="name" type="xs:string"/&gt;
        &lt;xs:element name="born" type="xs:date"/&gt;
        &lt;xs:element name="dead" type="xs:date" minOccurs="0"/&gt; 
        &lt;xs:element name="qualification" type="xs:string"
          minOccurs="0"/&gt;
      &lt;/xs:sequence&gt;
      &lt;xs:attribute name="id" type="xs:ID" use="required"/&gt;
    &lt;/xs:complexType&gt;
  &lt;/xs:element&gt;
  &lt;xs:complexType name="bookType"&gt;
    &lt;xs:sequence&gt;
      &lt;xs:element name="isbn" type="xs:NMTOKEN"/&gt;
      &lt;xs:element name="title" type="xs:string"/&gt;
      &lt;xs:element name="authors"&gt;
        &lt;xs:complexType&gt;
          &lt;xs:sequence&gt;
            &lt;xs:element ref="person" maxOccurs="unbounded"/&gt;
          &lt;/xs:sequence&gt;
        &lt;/xs:complexType&gt;
      &lt;/xs:element&gt;
      &lt;xs:element name="characters"&gt;
        &lt;xs:complexType&gt;
          &lt;xs:sequence&gt;
            &lt;xs:element ref="person" maxOccurs="unbounded"/&gt;
          &lt;/xs:sequence&gt;
        &lt;/xs:complexType&gt;
      &lt;/xs:element&gt;
    &lt;/xs:sequence&gt;
    &lt;xs:attribute name="id" type="xs:ID" use="required"/&gt;
    &lt;xs:attribute name="available" type="xs:string" use="required"/&gt;
  &lt;/xs:complexType&gt;
&lt;/xs:schema&gt;</pre></blockquote>

<p>In this version, all references to W3C XML Schema's
own elements are still made using the <tt class="literal">xs</tt> prefix.
Names of components are still unprefixed, but the
<tt class="literal">lib</tt> prefix is now unnecessary, so all of those
prefixes can disappear. Because the default namespace is defined in
this document, W3C XML Schema will understand the connection between
the components it defines and references to those components.
</p>

<p>If you prefer to use prefixes on the components you are defining and
use the W3C XML Schema vocabulary without prefixes, you can also
define the W3C XML Namespace as the default namespace and declare a
prefixed namespace (here, <tt class="literal">lib</tt>) for the components
you're <a name="INDEX-762" /> <a name="INDEX-763" />defining:
</p>

<blockquote><pre class="code">&lt;?xml version="1.0"?&gt; 
&lt;schema targetNamespace="http://dyomedea.com/ns/library"
  elementFormDefault="qualified" attributeFormDefault="unqualified"
  xmlns="http://www.w3.org/2001/XMLSchema"
  xmlns:lib="http://dyomedea.com/ns/library"&gt;
  &lt;element name="library"&gt;
    &lt;complexType&gt;
      &lt;sequence&gt;
        &lt;element name="book" type="lib:bookType"/&gt;
      &lt;/sequence&gt;
    &lt;/complexType&gt;
  &lt;/element&gt;
  &lt;element name="person"&gt;
    &lt;complexType&gt;
      &lt;sequence&gt;
        &lt;element name="name" type="string"/&gt;
        &lt;element name="born" type="date"/&gt;
        &lt;element name="dead" type="date" minOccurs="0"/&gt;
        &lt;element name="qualification" type="string" minOccurs="0"/&gt;
      &lt;/sequence&gt;
      &lt;attribute name="id" type="ID" use="required"/&gt;
    &lt;/complexType&gt;
  &lt;/element&gt;
  &lt;complexType name="bookType"&gt;
    &lt;sequence&gt;
      &lt;element name="isbn" type="NMTOKEN"/&gt;
      &lt;element name="title" type="string"/&gt;
      &lt;element name="authors"&gt;
        &lt;complexType&gt;
          &lt;sequence&gt;
            &lt;element ref="lib:person" maxOccurs="unbounded"/&gt;
          &lt;/sequence&gt;
        &lt;/complexType&gt;
      &lt;/element&gt;
      &lt;element name="characters"&gt;
        &lt;complexType&gt;
          &lt;sequence&gt;
            &lt;element ref="lib:person" maxOccurs="unbounded"/&gt;
          &lt;/sequence&gt;
        &lt;/complexType&gt;
      &lt;/element&gt;
    &lt;/sequence&gt;
    &lt;attribute name="id" type="ID" use="required"/&gt;
    &lt;attribute name="available" type="string" use="required"/&gt;
  &lt;/complexType&gt;
&lt;/schema&gt;</pre></blockquote>

<p>The references to W3C XML Schema data types are now done without a
<a name="INDEX-764" />prefix
while the references to components defined in the target namespace
are done <a name="INDEX-765" />with <a name="INDEX-766" /> <a name="INDEX-767" /> <a name="INDEX-768" />a
"lib" prefix.
</p>



<hr width="684" align="left" />
<div class="navbar"><table width="684" border="0"><tr><td align="left" valign="top" width="228"><a href="ch10_02.htm"><img src="../gifs/txtpreva.gif" alt="Previous" border="0" /></a></td><td align="center" valign="top" width="228"><a href="index.htm"><img src="../gifs/txthome.gif" alt="Home" border="0" /></a></td><td align="right" valign="top" width="228"><a href="ch10_04.htm"><img src="../gifs/txtnexta.gif" alt="Next" border="0" /></a></td></tr><tr><td align="left" valign="top" width="228">10.2. Namespace Declarations</td><td align="center" valign="top" width="228"><a href="index/index.htm"><img src="../gifs/index.gif" alt="Book Index" border="0" /></a></td><td align="right" valign="top" width="228">10.4. Disruptive Attributes</td></tr></table></div>
<hr width="684" align="left" />

<img src="../gifs/navbar.gif" usemap="#library-map" border="0" alt="Library Navigation Links" />
<p><p><font size="-1"><a href="copyrght.htm">Copyright &copy; 2002</a> O'Reilly &amp; Associates. All rights reserved.</font></p>

<map name="library-map">
<area shape="rect" coords="0,0,85,93" href="../index.htm"><area shape="rect" coords="85,0,180,98" href="../sax2/index.htm"><area shape="rect" coords="182,-1,261,100" href="../xmlnut/index.htm"><area shape="rect" coords="263,1,384,96" href="../jxml/index.htm"><area shape="rect" coords="386,1,463,100" href="../jxslt/index.htm"><area shape="rect" coords="466,1,533,112" href="../xslt/index.htm"><area shape="rect" coords="535,-1,610,108" href="index.htm"><area shape="rect" coords="613,1,696,121" href="../pxml/index.htm">
</map>

</body></html>