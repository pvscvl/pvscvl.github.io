<html><head><title>Schema Uses and Development (XML Schema)</title><link rel="stylesheet" type="text/css" href="../style/style1.css" />

<meta name="DC.Creator" content="Eric van der Vlist" /><meta name="DC.Format" content="text/xml" scheme="MIME" /><meta name="DC.Language" content="en-US" /><meta name="DC.Publisher" content="O'Reilly &amp; Associates, Inc." /><meta name="DC.Source" scheme="ISBN" content="0596002521L" /><meta name="DC.Subject.Keyword" content="stuff" /><meta name="DC.Title" content="XML Schema" /><meta name="DC.Type" content="Text.Monograph" />

</head><body bgcolor="#ffffff">

<img src="gifs/smbanner.gif" usemap="#banner-map" border="0" alt="Book Home" /><map name="banner-map"><area shape="rect" coords="1,-2,616,66" href="index.htm" alt="XML Schema" /><area shape="rect" coords="629,-11,726,25" href="jobjects/fsearch.htm" alt="Search this book" /></map>

<div class="navbar"><table width="684" border="0"><tr><td align="left" valign="top" width="228"><a href="ch00_07.htm"><img src="../gifs/txtpreva.gif" alt="Previous" border="0" /></a></td><td align="center" valign="top" width="228" /><td align="right" valign="top" width="228"><a href="ch01_02.htm"><img src="../gifs/txtnexta.gif" alt="Next" border="0" /></a></td></tr></table></div>


<h1 class="chapter">Chapter 1. Schema Uses and Development</h1>
<div class="htmltoc"><h4 class="tochead">Contents:</h4>
  <p> <a href="#xmlschema-CHP-1-SECT-1">What Schemas Do for XML</a><br />
<a href="ch01_02.htm">W3C XML Schema</a><br /></p></div>

<p>XML, the Extensible Markup Language, lets developers create their own
formats for storing and sharing information. Using that freedom,
developers have created documents representing an incredible range of
information, and XML can ease many different information-sharing
problems. A key part of this process is formal declaration and
documentation of those formats, providing a foundation on which
software developers can build software.
</p>
<div class="sect1"><a name="xmlschema-CHP-1-SECT-1" /></a>
<h2 class="sect1">1.1. What Schemas Do for XML</h2>

<p>An XML schema language is a formalization of the constraints,
expressed as rules or a model of structure, that apply to a class of
XML documents. In many ways, schemas serve as design tools,
establishing a framework on which implementations can be built. Since
formalization is a necessary ground for software designers,
formalizing the constraints and structures of XML instance documents
can lead to very diverse applications. Although new applications for
schemas are being invented every day, most of them can be classified
as validation, documentation, query, binding, or editing.
</p>

<a name="xmlschema-CHP-1-SECT-1.1" /></a><div class="sect2">
<h3 class="sect2">1.1.1. Validation</h3>

<p>Validation <a name="INDEX-1" /></a> <a name="INDEX-2" /></a>is
the most common use for schemas in the XML world. There are many
reasons and opportunities to validate an XML document: when we
receive one, before importing data into a legacy system, when we have
produced or hand-edited one, to test the output of an application,
etc. In all these cases, a schema helps to accomplish a substantial
part of the job. Different kinds of schemas perform different kinds
of validation, and some especially complex rules may be better
expressed in procedural code rather than in a descriptive schema, but
validation is generally the initial purpose of a schema, and often
the primary purpose as well.
</p>

<p>Validation
<a name="INDEX-3" /></a>can be considered a
"firewall" against the diversity of
XML. We need such firewalls principally in two situations: to serve
as actual firewalls when we receive documents from the external world
(as is commonly the case with Web Services and other XML
communications), and to provide check points when we design processes
as pipelines of transformations. By validating documents against
schemas, you can ensure that the documents' contents
conform to your expected set of rules, simplifying the code needed to
process them.
</p>

<p>Validation of documents can substantially reduce the risk of
processing XML documents received from sources beyond your control.
It doesn't remove either the need to follow the
administration rules of your chosen communication protocol or the
need to write robust applications, but it's a useful
additional layer of tests that fits between the communications
interface and your internal code.
</p>

<p>Validation can take place at several levels. Structural validation
makes certain that XML element and attribute structures meet
specified requirements, but doesn't clarify much
about the textual content of those structures. Data validation looks
more closely at the contents of those structures, ensuring that they
conform to rules about what type of information should be present.
Other kinds of validation, often called business rules, may check
relationships between information and a higher level of
sanity-checking, but this is usually the domain of procedural code,
not schema-based validation.
</p>

<p>XML is a<a name="INDEX-4" /></a> good foundation for pipelines of
transformations using widely available tools. Since each of these
transformations introduces a risk of error, and each error is easier
to fix when detected near its source, it is good practice to
introduce check points in the pipeline where the documents are
validated. Some applications will find that validating after each
step is an overhead cost they can't bear, while
others will find that it is crucial to detect the errors just as they
happen, before they can cause any harm and when they are still easy
to diagnose. Different situations may have different validation
requirements, and it may make sense to validate more heavily during
pipeline design than during production deployment.
</p>

</div>
<a name="xmlschema-CHP-1-SECT-1.2" /></a><div class="sect2">
<h3 class="sect2">1.1.2. Documentation</h3>

<p>XML <a name="INDEX-5" /></a>
<a name="INDEX-6" /></a>schemas are frequently used to
document XML vocabularies, even when validation
isn't a requirement. Schemas provide a formal
description of the vocabulary with a precision and conciseness that
can be difficult to achieve in prose. It is very unusual to publish
the specification of a new XML vocabulary without attaching some form
of XML schema.
</p>

<p>The machine-readability of schemas gives them several advantages as
documentation. Human-readable documentation can be generated from the
schema's formal description. Schema IDEs, for
instance, provide graphical views that help to understand the
structure of the documents. Developers can also create XSLT
transformations that generate a description of the structure. (This
technique was used to generate the structure of Chapters 15 and 16
from the W3C XML Schema for W3C XML Schema published on the W3C web
site.)
</p>

<p>We will see, in <a href="ch14_01.htm">Chapter 14, "Documenting Schemas"</a>, that W3C XML Schema has
introduced additional facilities to annotate schemas with both
structured or unstructured information, making it easier to use
schemas explicitly as a documentation framework.
</p>

</div>
<a name="xmlschema-CHP-1-SECT-1.3" /></a><div class="sect2">
<h3 class="sect2">1.1.3. Querying Support</h3>

<p>The <a name="INDEX-7" /></a> <a name="INDEX-8" /></a>first versions of
<a name="INDEX-9" /></a>XPath and <a name="INDEX-10" /></a>XSLT were defined to work without any
explicit understanding of the structure of the documents being
manipulated. This has worked well, but has imposed performance and
functionality limits. Knowledge of the document's
structure could improve the efficiency of optimizers, and some
functions, such as sorts and equality testing, may be improved by a
datatype system. The second version of XPath and XSLT and the first
version of <a name="INDEX-11" /></a>XQuery (a new specification
defining an XML query language that is still a work in progress) will
rely on the availability of a W3C XML Schema for those features.
</p>

</div>
<a name="xmlschema-CHP-1-SECT-1.4" /></a><div class="sect2">
<h3 class="sect2">1.1.4. Data Binding</h3>

<p>Although <a name="INDEX-12" /></a>
<a name="INDEX-13" /></a>it
isn't especially difficult to write applications
that process XML documents using the SAX, DOM, and similar APIs, it
is a low-level task, both repetitive and error-prone. The cost of
building and maintaining these programs grows rapidly as the number
of elements and attributes in a vocabulary grows. The idea of
automating these through "binding"
the information available in XML documents directly into the
structures of applications (generally as objects or RDBMS tables) is
probably as old as markup.
</p>

<p>Ronald <a name="INDEX-14" /></a>Bourret, who maintains of list of
<a name="INDEX-15" /></a>XML Data Binding Resources at
<a href="../../../../../../www.rpbourret.com/xml/XMLDataBinding.htm">http://www.rpbourret.com/xml/XMLDataBinding.htm</a>,
makes a distinction between design time and runtime binding tools.
While runtime binding tools do their best to perform a binding based
on the structure of the documents and applications discovered by
introspection, design time binding tools rely on a model formalized
in a schema of some kind. He describes this category as
"usually more flexible in the mappings they can
support."
</p>

<p>Many different languages, either specific or general-purpose XML
schema languages, define these bindings. W3C XML Schema has a lot of
traction in this area; many data-binding tools were started to
support W3C XML Schema for even its early releases, well before the
specification was finalized.
</p>

</div>
<a name="xmlschema-CHP-1-SECT-1.5" /></a><div class="sect2">
<h3 class="sect2">1.1.5. Guided Editing</h3>

<p>XML <a name="INDEX-16" /></a>editors <a name="INDEX-17" /></a>(and SGML editors before
them) have long used schemas to present users with appropriate
choices over the course of document creation and editing. While DTDs
provided structural information, recent XML schema languages add more
sophisticated structural information and datatype information.
</p>

<p>The W3C is creating a standard API that can be used by guided editing
applications to ask a schema processor which action can be performed
at a certain location in a document--for instance:
"Can I insert this new element
here?", "Can I update this text
node to this value?", etc. The Document Object Model
(DOM) Level 3 Abstract Schemas and Load and Save Specification (which
is still a work in progress) defines "Abstract
Schemas" generic enough to cover both DTDs and W3C
XML Schema (and potentially other schema languages as well). When
finalized and widely adopted, this API should allow you to plug the
schema processor of your choice into any editing application.
</p>

<p>Another approach to editing applications builds editors from the
information provided in schemas. Combined with information about
presentation and controls, these tools let users edit XML documents
in applications custom-built for a particular schema. For example,
the W3C <a name="INDEX-18" /></a>XForms specification (which is
still a work in progress) proposes to separate the logic and layout
of the form from the structure of the data to edit, and relies on a
W3C XML Schema to define this structure.
</p>

</div>
</div>

<hr width="684" align="left" />
<div class="navbar"><table width="684" border="0"><tr><td align="left" valign="top" width="228"><a href="ch00_07.htm"><img src="../gifs/txtpreva.gif" alt="Previous" border="0" /></a></td><td align="center" valign="top" width="228"><a href="index.htm"><img src="../gifs/txthome.gif" alt="Home" border="0" /></a></td><td align="right" valign="top" width="228"><a href="ch01_02.htm"><img src="../gifs/txtnexta.gif" alt="Next" border="0" /></a></td></tr><tr><td align="left" valign="top" width="228">0.7. Acknowledgments</td><td align="center" valign="top" width="228"><a href="index/index.htm"><img src="../gifs/index.gif" alt="Book Index" border="0" /></a></td><td align="right" valign="top" width="228">1.2. W3C XML Schema</td></tr></table></div>
<hr width="684" align="left" />

<img src="../gifs/navbar.gif" usemap="#library-map" border="0" alt="Library Navigation Links" />
<p><p><font size="-1"><a href="copyrght.htm">Copyright &copy; 2002</a> O'Reilly &amp; Associates. All rights reserved.</font></p>

<map name="library-map">
<area shape="rect" coords="0,0,85,93" href="../index.htm"><area shape="rect" coords="85,0,180,98" href="../sax2/index.htm"><area shape="rect" coords="182,-1,261,100" href="../xmlnut/index.htm"><area shape="rect" coords="263,1,384,96" href="../jxml/index.htm"><area shape="rect" coords="386,1,463,100" href="../jxslt/index.htm"><area shape="rect" coords="466,1,533,112" href="../xslt/index.htm"><area shape="rect" coords="535,-1,610,108" href="index.htm"><area shape="rect" coords="613,1,696,121" href="../pxml/index.htm">
      </map>

</body></html>