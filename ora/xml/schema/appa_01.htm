<html><head><title>XML Schema Languages (XML Schema)</title><link rel="stylesheet" type="text/css" href="../style/style1.css" />

<meta name="DC.Creator" content="Eric van der Vlist" /><meta name="DC.Format" content="text/xml" scheme="MIME" /><meta name="DC.Language" content="en-US" /><meta name="DC.Publisher" content="O'Reilly &amp; Associates, Inc." /><meta name="DC.Source" scheme="ISBN" content="0596002521L" /><meta name="DC.Subject.Keyword" content="stuff" /><meta name="DC.Title" content="XML Schema" /><meta name="DC.Type" content="Text.Monograph" />

</head><body bgcolor="#ffffff">

<img src="gifs/smbanner.gif" usemap="#banner-map" border="0" alt="Book Home" /><map name="banner-map"><area shape="rect" coords="1,-2,616,66" href="index.htm" alt="XML Schema" /><area shape="rect" coords="629,-11,726,25" href="jobjects/fsearch.htm" alt="Search this book" /></map>

<div class="navbar"><table width="684" border="0"><tr><td align="left" valign="top" width="228"><a href="ch16_01.htm"><img src="../gifs/txtpreva.gif" alt="Previous" border="0" /></a></td><td align="center" valign="top" width="228" /><td align="right" valign="top" width="228"><a href="appa_02.htm"><img src="../gifs/txtnexta.gif" alt="Next" border="0" /></a></td></tr></table></div>


<h1 class="chapter">Appendix A. XML Schema Languages</h1>
<div class="htmltoc"><h4 class="tochead">Contents:</h4>
  <p> <a href="#xmlschema-APP-A-SECT-1">What Is a XML Schema Language?</a><br />
<a href="appa_02.htm">Classification of XML Schema Languages</a><br />
<a href="appa_03.htm">A Short History of XML Schema Languages</a><br />
<a href="appa_04.htm">Sample Application</a><br />
<a href="appa_05.htm">XML DTDs</a><br />
<a href="appa_06.htm">W3C XML Schema</a><br />
<a href="appa_07.htm">RELAX NG</a><br />
<a href="appa_08.htm">Schematron</a><br />
<a href="appa_09.htm">Examplotron</a><br />
<a href="appa_10.htm">Decisions</a><br /></p></div><div class="sect1"><a name="xmlschema-APP-A-SECT-1" /></a>
<h2 class="sect1">A.1. What Is a XML Schema Language?</h2>

<p>Roughly <a name="INDEX-1164" /></a>speaking, <a name="INDEX-1165" /></a>XML schema languages describe XML
documents. Different approaches to that task, however, provide a wide
range of functionality.
</p>

<a name="xmlschema-APP-A-SECT-1.1" /></a><div class="sect2">
<h3 class="sect2">A.1.1. XML Schema Languages Are Not Schemas</h3>

<p>The first thing we can say about XML schema languages is they are not
schemas. At least they do not match the definition of a schema as
given by Webster's dictionary, which states:
"an outline or image universally applicable to a
general conception, under which it is likely to be presented to the
mind; as, five dots in a line are a schema of the number five; a
preceding and succeeding event are a schema of cause and
effect."
</p>

<p>This definition does not apply to the languages known as
"XML schema languages"; most of
these are more complex than the documents they describe and are too
difficult to "be presented to the
mind." They focus on defining validation rules more
than on representing or modeling a class of documents. When they do
model a class of documents, they often want to add information to the
documents they model.
</p>

<p>Looking past the formal label of schemas, how can we classify
so-called "XML schema languages"?
Looking at all XML schema languages (DTDs, W3C XML Schema, RELAX NG,
and also languages such as Schematron), the one thing they have in
common is being transformations, which take a
"schema" and an instance document
as an input and transform them into a validation report, and
optionally, into a PSVI (Post Schema Validation Infoset), a set of
information added to the XML infoset of the source document. This
PSVI (when it exists) includes information such as default values,
datatypes, etc.
</p>

<p>Changing the category of XML schema languages not only alters our
perception of what they are, but also opens the game, since
general-purpose transformations or programming languages, such as
XSLT, Prolog, Java, C# and friends, can be considered XML schema
languages.
</p>

</div>
<a name="xmlschema-APP-A-SECT-1.2" /></a><div class="sect2">
<h3 class="sect2">A.1.2. Firewalls Against Diversity</h3>

<p>The "X" in XML stands for
Extensibility. XML is, in fact, so extensible and diverse that few if
any applications are able to support this diversity. XML schema
languages were created as firewalls against diversity and protect
applications from meeting unexpected information and formats.
</p>

<p>This <a name="INDEX-1166" /></a>analogy
<a name="INDEX-1167" /></a>provides us our first classification of
schema languages. These, like firewalls, can be open and allow any
construction that isn't forbidden (as in the case of
Schematron), or they can be closed and forbid anything that has not
been allowed. (This is the case for most of the other schema
languages, including W3C XML Schema.)
</p>

<p>Closed firewalls are certainly much safer than open ones, but also
much less extensible, since any new traffic must be allowed by the
administrator before it can pass through. This is one of the reasons
for the failure of protocols such as CORBA, as well as one the
reasons web services has chosen to use HTTP. Closed XML schema
languages can represent the same kind of threat against the diversity
of XML vocabularies as closed firewalls do against the diversity of
IP protocols.
</p>

<p>Therefore, there is a trade-off: being able to check whether a
document we have received or are about to send is valid and
won't blow up our applications is not only useful
but even necessary. However, our schemas should stay open whenever
possible to remain extensible. (<a href="ch13_01.htm">Chapter 13, "Creating Extensible Schemas"</a> presents
the techniques available with the W3C XML Schema to limit the danger
of "closedness.")
</p>

</div>
<a name="xmlschema-APP-A-SECT-1.3" /></a><div class="sect2">
<h3 class="sect2">A.1.3. Intrusive Modeling Tools</h3>

<p>Schematron <a name="INDEX-1168" /></a>
<a name="INDEX-1169" /></a>is the only XML schema language that
doesn't base its validation on a model of the class
of the documents that are considered valid. All the other XML schema
languages describe the structure of the valid documents (which is
where the name "schema" comes
from). The lack of expressiveness of their description languages can
be another threat to the diversity of XML vocabularies since the
structures, which cannot be described with one of the major XML
schema languages, might become deprecated automatically.
Unfortunately, this will likely be the case with the W3C XML Schema,
in which expressiveness can be considered medium. Some existing
vocabularies, such as RSS 1.0 and WebDAV, cannot be described with
W3C XML Schema.
</p>

<p>One may argue whether such and such a structure, which cannot be
described by such and such a language, is good practice or not.
However, I think that XML schema languages should be as neutral as
possible and not add constraints to those defined by the XML 1.0 and
Namespaces in XML Recommendations. XML is still a young technology,
and many innovative ways of using it are still to be discovered. Some
of them may be jeopardized by the lack of expressiveness of W3C XML
Schema.
</p>

<p>On the other hand, modeling activity is valuable by itself and its
outcome, expressed as a XML schema, can be used to automate or
enhance the processing of the XML document or the generation of
applications and generic tools, such as Version 2 of XPath and XSLT.
The initial version of XQuery will rely on the information provided
by XML schemas for advanced features, but also for things as basic as
knowing which sort order should be used for each node.
</p>

<p>In modeling, we find the same basic differences that can be found
between an API (such as the DOM, in which each node is manipulated
individually and is highly differentiated) and a model such as XPath,
which enables splitting XML documents into sets of nodes
("nodesets"). While
<a name="INDEX-1170" /></a>RELAX NG (co-authored by James
<a name="INDEX-1171" /></a>Clark, who was
also the editor of XPath 1.0) is based on the definition of patterns
(classes of undifferentiated nodesets or containers encapsulating
elements, attributes, and text nodes) W3C XML Schema has defined
differentiated and different constructions to define elements,
attributes, their content (called simple or complex types), and
groups of elements or attributes.
</p>

<p>Although this differentiation will seem natural when we get used to
the W3C XML Schema, it is often useful to remember that those
different constructions can be seen as a difference of perspective.
Also, elements, attributes, types, and groups are
"patterns," as defined by RELAX NG
with a different granularity, and can be embedded within each other.
</p>

<p>There is also a second consequence to any modeling activity, which is
to change our perception of what is modeled. As the outside world is
seen differently after Aristotle, Newton, and Einstein, your
perception of a given XML document will vary depending upon which XML
schema language you use.
</p>

</div>
<a name="xmlschema-APP-A-SECT-1.4" /></a><div class="sect2">
<h3 class="sect2">A.1.4. Early Binding Tools</h3>

<p>Another <a name="INDEX-1172" /></a>
<a name="INDEX-1173" /></a>often mentioned quality of XML is its
ability to serve as a base for late binding and highly decoupled
systems in which the sender and receiver applications are independent
of each other. This late binding ability has two major advantages.
The first, which is very practical, is a complete independence
between the systems and applications that create the XML document on
one side and those that use it on the other side. The second, which
is more abstract, allows the receiver to apply its own treatment and
project its own semantic to
"understand" the document, leaving
the possibility of adding some value to the sent message.
</p>

<p>XML Schema languages may be a danger for late binding approaches,
especially those like the W3C XML Schema, which produce a PSVI, since
the association of information from the schema is a form of early
binding that binds a document to a specific XML schema language
(necessary to interpret the document). Here again, this danger seems
to be the price of automating the writing of applications to process
the documents.
</p>

</div>
</div>

<hr width="684" align="left" />
<div class="navbar"><table width="684" border="0"><tr><td align="left" valign="top" width="228"><a href="ch16_01.htm"><img src="../gifs/txtpreva.gif" alt="Previous" border="0" /></a></td><td align="center" valign="top" width="228"><a href="index.htm"><img src="../gifs/txthome.gif" alt="Home" border="0" /></a></td><td align="right" valign="top" width="228"><a href="appa_02.htm"><img src="../gifs/txtnexta.gif" alt="Next" border="0" /></a></td></tr><tr><td align="left" valign="top" width="228">16. Datatype Reference Guide</td><td align="center" valign="top" width="228"><a href="index/index.htm"><img src="../gifs/index.gif" alt="Book Index" border="0" /></a></td><td align="right" valign="top" width="228">A.2. Classification of XML Schema Languages</td></tr></table></div>
<hr width="684" align="left" />

<img src="../gifs/navbar.gif" usemap="#library-map" border="0" alt="Library Navigation Links" />
<p><p><font size="-1"><a href="copyrght.htm">Copyright &copy; 2002</a> O'Reilly &amp; Associates. All rights reserved.</font></p>

<map name="library-map">
<area shape="rect" coords="0,0,85,93" href="../index.htm"><area shape="rect" coords="85,0,180,98" href="../sax2/index.htm"><area shape="rect" coords="182,-1,261,100" href="../xmlnut/index.htm"><area shape="rect" coords="263,1,384,96" href="../jxml/index.htm"><area shape="rect" coords="386,1,463,100" href="../jxslt/index.htm"><area shape="rect" coords="466,1,533,112" href="../xslt/index.htm"><area shape="rect" coords="535,-1,610,108" href="index.htm"><area shape="rect" coords="613,1,696,121" href="../pxml/index.htm">
      </map>

</body></html>