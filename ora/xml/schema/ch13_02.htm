<html><head><title>The Need for Open Schemas (XML Schema)</title><link rel="stylesheet" type="text/css" href="../style/style1.css" />

<meta name="DC.Creator" content="Eric van der Vlist" /><meta name="DC.Format" content="text/xml" scheme="MIME" /><meta name="DC.Language" content="en-US" /><meta name="DC.Publisher" content="O'Reilly &amp; Associates, Inc." /><meta name="DC.Source" scheme="ISBN" content="0596002521L" /><meta name="DC.Subject.Keyword" content="stuff" /><meta name="DC.Title" content="XML Schema" /><meta name="DC.Type" content="Text.Monograph" />

</head><body bgcolor="#ffffff">

<img src="gifs/smbanner.gif" usemap="#banner-map" border="0" alt="Book Home" /><map name="banner-map"><area shape="rect" coords="1,-2,616,66" href="index.htm" alt="XML Schema" /><area shape="rect" coords="629,-11,726,25" href="jobjects/fsearch.htm" alt="Search this book" /></map>

<div class="navbar"><table width="684" border="0"><tr><td align="left" valign="top" width="228"><a href="ch13_01.htm"><img src="../gifs/txtpreva.gif" alt="Previous" border="0" /></a></td><td align="center" valign="top" width="228" /><td align="right" valign="top" width="228"><a href="ch14_01.htm"><img src="../gifs/txtnexta.gif" alt="Next" border="0" /></a></td></tr></table></div>



<h2 class="sect1">13.2. The Need for Open Schemas</h2>

<p>In <a name="INDEX-1006" />
<a name="INDEX-1007" />this
chapter, we have discussed the features that may make the components
defined in a schema reusable and flexible. This is definitely
something to look for, but the impact of this effort is limited to
the conception and maintenance of schemas and has little or no impact
on the documents themselves. Even though application designers often
see <a name="INDEX-1008" />XML instance documents as tightly
coupled to their schema and to the application for which they were
first created, the life span of documents often exceeds the life span
of their applications and schemas. XML documents or fragments are
also often reused in other contexts, or serve as a container in which
other information is added to create combinations that their original
author never imagined.
</p>

<p>Opening XML vocabularies to facilitate and control such evolution is
quite challenging and goes beyond designing open schemas. It requires
a different perspective on what an XML document is and has an impact
on the way to code the applications (which should, for instance, be
as tolerant as possible of unexpected elements and attributes).
Grammar-based schemas, such as W3C XML Schema, have a basic problem
with open vocabulary: everything that has not been explicitly allowed
is forbidden, and the schemas are effectively
"closed by default."
</p>

<p>If we define the openness of a schema as the ability to modify the
<a name="INDEX-1009" />content model explicitly defined by the
original schema without defining a new schema (we already covered the
modification of the content model through a modification of the
schema in the earlier section <a href="ch13_01.htm">Section 13.1, "Extensible Schemas"</a>), the tools that we have at
hand are the substitution of type through <tt class="literal">xsi:type</tt>
and the wildcards.
</p>

<a name="xmlschema-CHP-13-SECT-2.1" /><div class="sect2">
<h3 class="sect2">13.2.1. xsi:type</h3>

<p>This kind of openness is allowed by default. A number of applications
that use complex type derivations by extension, simple type
derivations by union, or are using building blocks that have not
specified <tt class="literal">block</tt> or <tt class="literal">blockDefault</tt>
attributes, could probably be quite surprised by a substitution of
type in the instance document.
</p>

<p>Beyond these cases of "unexpected"
openness, defining extension of the complex types used to define our
elements that can be substituted in the instance documents through
the <tt class="literal">xsi:type</tt> attribute can be an initial approach
to open the schema while keeping control over surprises. In this
case, the <tt class="literal">xsi:type</tt><a name="INDEX-1010" /> attribute can be processed by the
applications to determine which kind of extension they are facing.
</p>

</div>
<a name="xmlschema-CHP-13-SECT-2.2" /><div class="sect2">
<h3 class="sect2">13.2.2. Wildcards</h3>

<p>Namespaces and
<a name="INDEX-1011" />wildcards are the most powerful tools
we can use to create open schemas. Many vocabularies (such as W3C XML
Schema) allow attributes that have a namespace other than the target
namespace in all their elements, while keeping tight control over
both unqualified attributes and attributes from their namespace. The
values of the
<tt class="literal">processContents</tt><a name="INDEX-1012" /> attribute (<tt class="literal">lax</tt>,
<tt class="literal">skip</tt>, and <tt class="literal">strict</tt>) can be
adjusted to provide the level of openness you find best adapts to
your schema. <tt class="literal">skip</tt> is completely open,
<tt class="literal">strict</tt> requires supplying schemas for the
namespaces that are found during the validation, and
<tt class="literal">lax</tt> is a medium-level constraint.
</p>

<p>Elements from other namespaces are often considered more intrusive
than attributes and can be kept within containers. This is also what
W3C XML Schema does for its own vocabulary, allowing any element from
any namespace within <a name="INDEX-1013" /><tt class="literal"><a href="ch15_01.htm">xs:appinfo</a></tt>. Other
vocabularies, such as Relax NG or RSS 1.0, simply accept any element
that has a namespace other than its target namespace.
</p>

<p>Although this practice allows a great deal of flexibility for
embedding unexpected information in instance documents, note that the
fact that there is no special value to specify "any
namespace except those which are defined in the consolidated
schema" limits its applicability when several
namespaces are defined together.
</p>

</div>
<a name="xmlschema-CHP-13-SECT-2.3" /><div class="sect2">
<h3 class="sect2">13.2.3. And Substitution Groups?</h3>

<p>If we mention <tt class="literal">xsi:type</tt> here,
shouldn't we mention
<a name="INDEX-1014" />substitution groups also? Yes and
no. Yes, because using them is a good way to define several
alternative content models. However, no, because they can be used
only if they have been defined in a schema. However,
<tt class="literal">xsi:type</tt> can be used even if the schema makes no
special provision for them. Despite similarities, substitution groups
truly belong to flexible schemas much more than to open schemas.
</p>



</div>


<hr width="684" align="left" />
<div class="navbar"><table width="684" border="0"><tr><td align="left" valign="top" width="228"><a href="ch13_01.htm"><img src="../gifs/txtpreva.gif" alt="Previous" border="0" /></a></td><td align="center" valign="top" width="228"><a href="index.htm"><img src="../gifs/txthome.gif" alt="Home" border="0" /></a></td><td align="right" valign="top" width="228"><a href="ch14_01.htm"><img src="../gifs/txtnexta.gif" alt="Next" border="0" /></a></td></tr><tr><td align="left" valign="top" width="228">13. Creating Extensible Schemas</td><td align="center" valign="top" width="228"><a href="index/index.htm"><img src="../gifs/index.gif" alt="Book Index" border="0" /></a></td><td align="right" valign="top" width="228">14. Documenting Schemas</td></tr></table></div>
<hr width="684" align="left" />

<img src="../gifs/navbar.gif" usemap="#library-map" border="0" alt="Library Navigation Links" />
<p><p><font size="-1"><a href="copyrght.htm">Copyright &copy; 2002</a> O'Reilly &amp; Associates. All rights reserved.</font></p>

<map name="library-map">
<area shape="rect" coords="0,0,85,93" href="../index.htm"><area shape="rect" coords="85,0,180,98" href="../sax2/index.htm"><area shape="rect" coords="182,-1,261,100" href="../xmlnut/index.htm"><area shape="rect" coords="263,1,384,96" href="../jxml/index.htm"><area shape="rect" coords="386,1,463,100" href="../jxslt/index.htm"><area shape="rect" coords="466,1,533,112" href="../xslt/index.htm"><area shape="rect" coords="535,-1,610,108" href="index.htm"><area shape="rect" coords="613,1,696,121" href="../pxml/index.htm">
</map>

</body></html>