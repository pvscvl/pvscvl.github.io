<html><head><title>Work in Progress (XML Schema)</title><link rel="stylesheet" type="text/css" href="../style/style1.css" />

<meta name="DC.Creator" content="Eric van der Vlist" /><meta name="DC.Format" content="text/xml" scheme="MIME" /><meta name="DC.Language" content="en-US" /><meta name="DC.Publisher" content="O'Reilly &amp; Associates, Inc." /><meta name="DC.Source" scheme="ISBN" content="0596002521L" /><meta name="DC.Subject.Keyword" content="stuff" /><meta name="DC.Title" content="XML Schema" /><meta name="DC.Type" content="Text.Monograph" />

</head><body bgcolor="#ffffff">

<img src="gifs/smbanner.gif" usemap="#banner-map" border="0" alt="Book Home" /><map name="banner-map"><area shape="rect" coords="1,-2,616,66" href="index.htm" alt="XML Schema" /><area shape="rect" coords="629,-11,726,25" href="jobjects/fsearch.htm" alt="Search this book" /></map>

<div class="navbar"><table width="684" border="0"><tr><td align="left" valign="top" width="228"><a href="appa_10.htm"><img src="../gifs/txtpreva.gif" alt="Previous" border="0" /></a></td><td align="center" valign="top" width="228" /><td align="right" valign="top" width="228"><a href="appb_02.htm"><img src="../gifs/txtnexta.gif" alt="Next" border="0" /></a></td></tr></table></div>


<h1 class="chapter">Appendix B. Work in Progress</h1>
<div class="htmltoc"><h4 class="tochead">Contents:</h4>
  <p> <a href="#xmlschema-APP-B-SECT-1">W3C Projects</a><br />
<a href="appb_02.htm">ISO: DSDL</a><br />
<a href="appb_03.htm">Other</a><br /></p></div>

<p>Although <a name="INDEX-1220" /></a>W3C XML Schema was approved as a W3C
Recommendation in May 2001, it is still just getting started. This
chapter identifies a short list of schema-related projects that seem
either promising, useful, or just on the way.
</p>
<div class="sect1"><a name="xmlschema-APP-B-SECT-1" /></a>
<h2 class="sect1">B.1. W3C Projects</h2>

<p>Edited by the W3C, the W3C XML Schema is considered by the consortium
to belong to the very foundation of XML--together with XML 1.0
and namespaces in XML--and it does impact virtually all the
other XML specifications. The most heavily affected seem to be the
triumvirate XPath/XSLT/XQuery (and by consequence, XPointer- and
XPointer-based specifications), DOM, and RDF.
</p>

<a name="xmlschema-APP-B-SECT-1.1" /></a><div class="sect2">
<h3 class="sect2">B.1.1. XPath, XSLT, and XQuery</h3>

<p>One <a name="INDEX-1221" /></a>of
<a name="INDEX-1222" /></a>the
<a name="INDEX-1223" /></a>most amazing things
about XPath and XSLT 1.0 is that queries and transformations can be
executed by applications with no prior knowledge of the structure of
the documents on which they work. This is a major difference from
previous information systems, such as RDBMS, in which the layout of
the tables needs to be defined before any query can be run. Even
though this works just fine in many circumstances, there are two main
areas in which improvements can be obtained if the structure of the
instance documents is known.
</p>

<p>The first of these areas is optimization. This is not crucial for
small documents, but as soon as the size of the document grows (which
is typically the case in a XML database), any optimizer will need
food for thought to perform his job. The first piece of basic
information that is required is about the structure of the documents.
The second is typed-aware comparisons and sorts. In XPath and XSLT
1.0, the sort order (numerical or string) is indicated in the XSLT
style sheet and the comparisons are always done character by
character. Sorting or comparing dates with different time zones is
practically impossible in these conditions, and some type information
coming out of a schema can help a lot.
</p>

<p>For these reasons, XSLT 2.0, which will use XPath 2.0 like XSLT 1.0
uses XPath 1.0, and XQuery 1.0, which is a superset of XPath 2.0,
both rely on the W3C XML Schema and use the information coming out of
the PSVI.
</p>

<p>This will indirectly impact a specification that relies on XPath, and
<a name="INDEX-1224" /></a>XPointer (a
specification that defines how fragments of XML documents can be
addressed). It will also affect specifications using XPointer, such
as <a name="INDEX-1225" /></a>XLink (definition
of links between document fragments) and <a name="INDEX-1226" /></a>XInclude (inclusion of XML fragments). The
case of XInclude is a good illustration of the need to define an
overall processing model: XInclude relies on XPointer; XPointer
relies on XPath, and XPath relies on the W3C XML Schema. This means
that a XInclude processor will need the PSVI of the document
containing the fragment to include, but this document may only be a
container for the fragments and be invalid or even have no W3C XML
Schema. On the contrary, from the schema viewpoint, the schema should
be applied after the inclusion when the document is complete. Do we
need to apply the schema processing before or after the inclusion (or
both) ? This question is open.
</p>



<a name="appb-3-fm2xml" /></a><blockquote><b>TIP:</b> 
XPath 2.0, XSLT 2.0, XQuery 1.0, XPointer, XLink, and XInclude are
either works in progress or published recommendations; their
specifications can be found on the W3C web site (<a href="../../../../../../www.w3.org/">http://www.w3.org</a>).
<p></p>
</blockquote>

</div>
<a name="xmlschema-APP-B-SECT-1.2" /></a><div class="sect2">
<h3 class="sect2">B.1.2. DOM</h3>

<p>The W3C DOM Working Group is creating the "Document
Object Model (<a name="INDEX-1227" /></a>DOM) Level 3 Abstract
Schemas and Load and Save Specification." This will
define an abstract API to access either DTDs or the W3C XML Schema
schemas. This API will be read/write, allowing reading, updating, and
writing schemas in the same way DOM Core allows you to read, update,
and write XML documents. It also provides extensions to DOM Core
interfaces (the <tt class="literal">Element</tt> interface, for instance,
is extended into an <tt class="literal">ElementEditAS</tt> interface) to
access some information determined by the analysis of the schema.
</p>

<p>The DOM Working Group has been very careful to make sure their
"Abstract Schemas" remain abstract
and as independent of the schema language as possible. The DOM work
cannot be considered an API to the PSVI since it does not expose the
PSVI but rather objects that are containers to query the schema
implementation (to find out if an action such as adding, updating, or
removing content from a DOM tree is allowed or not).
</p>

</div>
<a name="xmlschema-APP-B-SECT-1.3" /></a><div class="sect2">
<h3 class="sect2">B.1.3. RDF</h3>

<p><a name="INDEX-1228" /></a>RDF (Resources Description Framework) can
be seen as a way to express graphs in XML by splitting these graphs
into elementary elements of information named
"statements" or
"triples." Each triple is a logic
assertion associating a subject, verb, and object, such as in the
phrase "The book 0836217462 (subject) has been
written by Charles M Schulz (object)." RDF has its
own schema language (RDF Schema) to model and constrain the relations
themselves and define the inheritance between them. Since
it's defined as a level on top of XML, a XML schema
language does not act at the right level to model a set of RDF
triples. However, RDF recognizes two kind of objects, resources
identified by a URI and literals (i.e., raw values), and needs a
simple datatype system to define constraints on those literals.
</p>

<p>Although the idea of associating a W3C XML Schema simple datatype to
RDF literals looks simple, it raises several issues. One is the lack
of a way to identify W3C XML Schema simple datatypes that would be
acceptable for RDF. As we've seen, RDF identifies
any resource by a URI. To be coherent with the RDF data model, the
simple types associated to the literals should be identified by URIs.
On the other hand, the W3C XML Schema does not use the URIs to
identify its datatypes but rather uses qualified names (QNames).
Furthermore, it decided that elements, attributes, simple and complex
types, and groups have independent sets of QNames. The QName
<tt class="literal">bib:book</tt> can thus refer to an element, an
attribute, a complex and simple type, and an element and attribute
group of the same schema. The simple approach of identifing the
simple type <tt class="literal">book</tt> through its expanded QName
(replacing the prefix by the namespace URI) isn't
yet implemented.
</p>

</div>
</div>

<hr width="684" align="left" />
<div class="navbar"><table width="684" border="0"><tr><td align="left" valign="top" width="228"><a href="appa_10.htm"><img src="../gifs/txtpreva.gif" alt="Previous" border="0" /></a></td><td align="center" valign="top" width="228"><a href="index.htm"><img src="../gifs/txthome.gif" alt="Home" border="0" /></a></td><td align="right" valign="top" width="228"><a href="appb_02.htm"><img src="../gifs/txtnexta.gif" alt="Next" border="0" /></a></td></tr><tr><td align="left" valign="top" width="228">A.10. Decisions</td><td align="center" valign="top" width="228"><a href="index/index.htm"><img src="../gifs/index.gif" alt="Book Index" border="0" /></a></td><td align="right" valign="top" width="228">B.2. ISO: DSDL</td></tr></table></div>
<hr width="684" align="left" />

<img src="../gifs/navbar.gif" usemap="#library-map" border="0" alt="Library Navigation Links" />
<p><p><font size="-1"><a href="copyrght.htm">Copyright &copy; 2002</a> O'Reilly &amp; Associates. All rights reserved.</font></p>

<map name="library-map">
<area shape="rect" coords="0,0,85,93" href="../index.htm"><area shape="rect" coords="85,0,180,98" href="../sax2/index.htm"><area shape="rect" coords="182,-1,261,100" href="../xmlnut/index.htm"><area shape="rect" coords="263,1,384,96" href="../jxml/index.htm"><area shape="rect" coords="386,1,463,100" href="../jxslt/index.htm"><area shape="rect" coords="466,1,533,112" href="../xslt/index.htm"><area shape="rect" coords="535,-1,610,108" href="index.htm"><area shape="rect" coords="613,1,696,121" href="../pxml/index.htm">
      </map>

</body></html>