<html><head><title>Controlling Namespaces (XML Schema)</title><link rel="stylesheet" type="text/css" href="../style/style1.css" />

<meta name="DC.Creator" content="Eric van der Vlist" /><meta name="DC.Format" content="text/xml" scheme="MIME" /><meta name="DC.Language" content="en-US" /><meta name="DC.Publisher" content="O'Reilly &amp; Associates, Inc." /><meta name="DC.Source" scheme="ISBN" content="0596002521L" /><meta name="DC.Subject.Keyword" content="stuff" /><meta name="DC.Title" content="XML Schema" /><meta name="DC.Type" content="Text.Monograph" />

</head><body bgcolor="#ffffff">

<img src="gifs/smbanner.gif" usemap="#banner-map" border="0" alt="Book Home" /><map name="banner-map"><area shape="rect" coords="1,-2,616,66" href="index.htm" alt="XML Schema" /><area shape="rect" coords="629,-11,726,25" href="jobjects/fsearch.htm" alt="Search this book" /></map>

<div class="navbar"><table width="684" border="0"><tr><td align="left" valign="top" width="228"><a href="ch09_04.htm"><img src="../gifs/txtpreva.gif" alt="Previous" border="0" /></a></td><td align="center" valign="top" width="228" /><td align="right" valign="top" width="228"><a href="ch10_02.htm"><img src="../gifs/txtnexta.gif" alt="Next" border="0" /></a></td></tr></table></div>


<h1 class="chapter">Chapter 10. Controlling Namespaces</h1>
<div class="htmltoc"><h4 class="tochead">Contents:</h4>
  <p> <a href="#xmlschema-CHP-10-SECT-1">Namespaces Present Two Challenges to 
    Schema Languages</a><br />
<a href="ch10_02.htm">Namespace Declarations</a><br />
<a href="ch10_03.htm">To Qualify Or Not to Qualify?</a><br />
<a href="ch10_04.htm">Disruptive Attributes</a><br />
<a href="ch10_05.htm">Namespaces and XPath Expressions</a><br />
<a href="ch10_06.htm">Referencing Other Namespaces</a><br />
<a href="ch10_07.htm">Schemas for XML, XML Base and XLink</a><br />
<a href="ch10_08.htm">Namespace Behavior of Imported Components</a><br />
<a href="ch10_09.htm">Importing Schemas with No Namespaces</a><br />
<a href="ch10_10.htm">Chameleon Design</a><br />
<a href="ch10_11.htm">Allowing Any Elements or Attributes from a Particular Namespace</a><br /></p></div>

<p>The W3C <a name="INDEX-717" /></a>released
<em class="citetitle">Namespaces in
XML</em><a name="INDEX-718" /></a> about a year after
XML 1.0. Namespaces provide a URI-based mechanism that helps
differentiate XML vocabularies. Rather than update XML
1.0's DTDs to provide explicit namespace support,
the W3C chose to implement namespace support in W3C XML Schema.
Support of namespaces was eagerly awaited by the XML community and,
thus, are especially well-polished by the W3C XML Schema editors.
</p>

<p>Namespaces caused two problems to DTDs. One was how to recognize
namespaces defined using different prefixes in instance documents.
The other was how best to facilitate the definition of schemas with
multiple namespaces. The problem of open schemas tightly controlling
some namespaces while keeping the flexibility to add unknown elements
and attributes from unknown namespaces, was especially difficult.
</p>

<p><em class="emphasis">W3C XML Schema</em> has gone beyond these
expectations for its use of namespaces by associating a namespace to
all the objects (elements and attributes, but also simple and complex
types as well as groups of elements and attributes) defined in a
schema, allowing the use of namespaces to build modular libraries of
schemas.
</p>
<div class="sect1"><a name="xmlschema-CHP-10-SECT-1" /></a>
<h2 class="sect1">10.1. Namespaces Present Two Challenges to Schema Languages</h2>

<p>Namespace <a name="INDEX-719" /></a> <a name="INDEX-720" /></a>prefixes <a name="INDEX-721" /></a>should <a name="INDEX-722" /></a>only be
considered to be local shortcuts to replace the URI references that
are the real identifiers for a namespace. The following documents
should, therefore, be considered strictly equivalent by
namespace-aware applications:
</p>

<blockquote><pre class="code">&lt;?xml version="1.0"?&gt;
&lt;library xmlns="http://dyomedea.com/ns/library"&gt;
  &lt;book id="b0836217462"&gt;
    &lt;title&gt;
      Being a Dog Is a Full-Time Job
    &lt;/title&gt;
    &lt;authors&gt;
      &lt;person id="CMS"&gt;
        &lt;name&gt;
          Charles M Schulz
        &lt;/name&gt;
      &lt;/person&gt;
    &lt;/authors&gt;
  &lt;/book&gt;
&lt;/library&gt;</pre></blockquote>

<p>In the document above, the namespace "<em class="emphasis">http://dyomedea.com/ns/library</em>"
is defined as the <a name="INDEX-723" /></a>default
<a name="INDEX-724" /></a>namespace and applies to all the elements
within the document. Next, we'll show a
namespace-equivalent, but very different-looking, document:
</p>

<blockquote><pre class="code">&lt;?xml version="1.0"?&gt;
&lt;!-- Namespace: http://dyomedea.com/ns/library --&gt;
&lt;lib:library xmlns:lib="http://dyomedea.com/ns/library"&gt;
  &lt;lib:book id="b0836217462"&gt;
    &lt;lib:title&gt;
      Being a Dog Is a Full-Time Job
    &lt;/lib:title&gt;
    &lt;lib:authors&gt;
      &lt;lib:person id="CMS"&gt;
        &lt;lib:name&gt;
          Charles M Schulz
        &lt;/lib:name&gt;
      &lt;/lib:person&gt;
    &lt;/lib:authors&gt;
  &lt;/lib:book&gt;
&lt;/lib:library&gt;</pre></blockquote>

<p>The namespace "<em class="emphasis">http://dyomedea.com/ns/library</em>"
is defined as mapping to the prefix <tt class="literal">lib</tt> and is
used as a prefix for all the elements within the document. Next,
we'll create another namespace-equivalent document
using a different prefix.
</p>

<blockquote><pre class="code">&lt;?xml version="1.0"?&gt;
&lt;!-- Namespace: http://dyomedea.com/ns/library --&gt;
&lt;l:library xmlns:l="http://dyomedea.com/ns/library"&gt;
  &lt;l:book id="b0836217462"&gt;
    &lt;l:title&gt;
      Being a Dog Is a Full-Time Job
    &lt;/l:title&gt;
    &lt;l:authors&gt;
      &lt;l:person id="CMS"&gt;
        &lt;l:name&gt;
          Charles M Schulz
        &lt;/l:name&gt;
      &lt;/l:person&gt;
    &lt;/l:authors&gt;
  &lt;/l:book&gt;
&lt;/l:library&gt;</pre></blockquote>

<p>The namespace "<em class="emphasis">http://dyomedea.com/ns/library</em>"
is defined as mapping to the prefix <tt class="literal">l</tt> and is used
as a prefix for all the elements within the document. Finally,
we'll mix all of these possibilities in a single
document still namespace-equivalent to the others.
</p>

<blockquote><pre class="code">&lt;?xml version="1.0"?&gt;
&lt;!-- Namespace: http://dyomedea.com/ns/library --&gt;
&lt;l:library xmlns:l="http://dyomedea.com/ns/library"&gt;
  &lt;l:book id="b0836217462" xmlns:lib="http://dyomedea.com/ns/library"&gt;
    &lt;l:title&gt;
      Being a Dog Is a Full-Time Job
    &lt;/l:title&gt;
    &lt;lib:authors&gt;
      &lt;l:person id="CMS" xmlns="http://dyomedea.com/ns/library"&gt;
        &lt;name&gt;
          Charles M Schulz
        &lt;/name&gt;
      &lt;/l:person&gt;
    &lt;/lib:authors&gt;
  &lt;/l:book&gt;
&lt;/l:library&gt;</pre></blockquote>

<p>The same namespace is defined and used as <tt class="literal">l</tt>,
<tt class="literal">lib</tt>, and even as a default namespace, depending on
its location in the document. This last example is, of course, an
extreme case that isn't recommended. This document
conforms to the namespaces recommendation, however, and the
specification states that it is strictly equivalent to the three
previous ones.
</p>

<p>DTDs are not aware of the namespaces. Since the colon
(<tt class="literal">:</tt>) is allowed in the XML names,
<tt class="literal">lib:person</tt>, <tt class="literal">l:person</tt>, and
<tt class="literal">person</tt> are three different, valid names for a DTD.
Furthermore, a DTD sees namespace declaration attributes
(<tt class="literal">xmlns</tt>, <tt class="literal">xmlns:l</tt>,
<tt class="literal">xmlns:lib</tt>) as ordinary attributes that need to be
declared.
</p>

<p>A XML document using namespaces is a well-formed XML 1.0 document and
it is perfectly possible to write a DTD to describe it. Nevertheless,
you must define the prefixes that can be used and the location where
the namespace declarations must be inserted. This is acceptable only
if you can fully control or specify the authoring processes of the
<a name="INDEX-725" /></a>documents. 
</p>

<p>The second and larger issue is design. Since XML is often used as the
glue between different applications, it is becoming increasingly
important to be able to define modular vocabularies that can live
together in the same document, and namespaces were invented to make
this possible. To take advantage of this feature, it is often
necessary to define open vocabularies that will define places where
external elements and attributes from external namespaces may be
included without breaking the applications.
</p>

<p>Imagine a marketing department wants to add the type of cover and the
number of pages to the information about a particular book. A neat
way to do this--if this new information is specific to their
needs and we don't want to break the existing
applications--is to create a new namespace:
</p>

<blockquote><pre class="code">&lt;?xml version="1.0"?&gt;
&lt;!-- Namespace: http://dyomedea.com/ns/library --&gt; 
&lt;library xmlns="http://dyomedea.com/ns/library"
  xmlns:mkt="http://dyomedea.com/ns/library/mkt"&gt;
  &lt;book id="b0836217462"&gt;
    &lt;title&gt;
      Being a Dog Is a Full-Time Job
    &lt;/title&gt;
    &lt;authors&gt;
      &lt;person id="CMS"&gt;
        &lt;name&gt;
          Charles M Schulz
        &lt;/name&gt;
      &lt;/person&gt;
    &lt;/authors&gt;
    &lt;mkt:cover&gt;
      Paperback
    &lt;/mkt:cover&gt;
    &lt;mkt:pages&gt;
      128
    &lt;/mkt:pages&gt;
  &lt;/book&gt;
&lt;/library&gt;</pre></blockquote>

<p>However, if we want to keep our schema independent of the marketing
application, we need a flexible way to open it and say
"accept any element from the marketing namespace at
the end of our <tt class="literal">book</tt> element."
Also, even if there might be other applications that work with our
vocabulary, we can say to accept any element from any other namespace
at the end of our <tt class="literal">book</tt> <a name="INDEX-726" /></a> <a name="INDEX-727" /></a>element.
</p>

</div>

<hr width="684" align="left" />
<div class="navbar"><table width="684" border="0"><tr><td align="left" valign="top" width="228"><a href="ch09_04.htm"><img src="../gifs/txtpreva.gif" alt="Previous" border="0" /></a></td><td align="center" valign="top" width="228"><a href="index.htm"><img src="../gifs/txthome.gif" alt="Home" border="0" /></a></td><td align="right" valign="top" width="228"><a href="ch10_02.htm"><img src="../gifs/txtnexta.gif" alt="Next" border="0" /></a></td></tr><tr><td align="left" valign="top" width="228">9.4. Using  and  As Co-occurrence Constraints</td><td align="center" valign="top" width="228"><a href="index/index.htm"><img src="../gifs/index.gif" alt="Book Index" border="0" /></a></td><td align="right" valign="top" width="228">10.2. Namespace Declarations</td></tr></table></div>
<hr width="684" align="left" />

<img src="../gifs/navbar.gif" usemap="#library-map" border="0" alt="Library Navigation Links" />
<p><p><font size="-1"><a href="copyrght.htm">Copyright &copy; 2002</a> O'Reilly &amp; Associates. All rights reserved.</font></p>

<map name="library-map">
<area shape="rect" coords="0,0,85,93" href="../index.htm"><area shape="rect" coords="85,0,180,98" href="../sax2/index.htm"><area shape="rect" coords="182,-1,261,100" href="../xmlnut/index.htm"><area shape="rect" coords="263,1,384,96" href="../jxml/index.htm"><area shape="rect" coords="386,1,463,100" href="../jxslt/index.htm"><area shape="rect" coords="466,1,533,112" href="../xslt/index.htm"><area shape="rect" coords="535,-1,610,108" href="index.htm"><area shape="rect" coords="613,1,696,121" href="../pxml/index.htm">
      </map>

</body></html>