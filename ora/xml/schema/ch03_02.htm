<html><head><title>New Lessons (XML Schema)</title><link rel="stylesheet" type="text/css" href="../style/style1.css" />

<meta name="DC.Creator" content="Eric van der Vlist" /><meta name="DC.Format" content="text/xml" scheme="MIME" /><meta name="DC.Language" content="en-US" /><meta name="DC.Publisher" content="O'Reilly &amp; Associates, Inc." /><meta name="DC.Source" scheme="ISBN" content="0596002521L" /><meta name="DC.Subject.Keyword" content="stuff" /><meta name="DC.Title" content="XML Schema" /><meta name="DC.Type" content="Text.Monograph" />

</head><body bgcolor="#ffffff">

<img src="gifs/smbanner.gif" usemap="#banner-map" border="0" alt="Book Home" /><map name="banner-map"><area shape="rect" coords="1,-2,616,66" href="index.htm" alt="XML Schema" /><area shape="rect" coords="629,-11,726,25" href="jobjects/fsearch.htm" alt="Search this book" /></map>

<div class="navbar"><table width="684" border="0"><tr><td align="left" valign="top" width="228"><a href="ch03_01.htm"><img src="../gifs/txtpreva.gif" alt="Previous" border="0" /></a></td><td align="center" valign="top" width="228" /><td align="right" valign="top" width="228"><a href="ch04_01.htm"><img src="../gifs/txtnexta.gif" alt="Next" border="0" /></a></td></tr></table></div>



<h2 class="sect1">3.2. New Lessons</h2>

<p>Although this schema describes the same document as the one in <a href="ch02_01.htm">Chapter 2, "Our First Schema"</a>, it illustrates very different aspects of W3C
XML Schema.
</p>

<a name="xmlschema-CHP-3-SECT-2.1" /><div class="sect2">
<h3 class="sect2">3.2.1. Depth Versus Modularity?</h3>

<p>Even <a name="INDEX-75" /> <a name="INDEX-76" />though we will present features to
balance this fact in the next
chapters--<a name="INDEX-77" /><tt class="literal">xs:complexType</tt> and
<a name="INDEX-78" /><tt class="literal">xs:group</tt>--we have sacrificed the modularity of our
first schema to gain the depth and structure of the second one. This
is a general tendency in W3C XML Schema.
</p>

<p>In practice, you will probably want to keep a balance between these
two opposite styles and allow a certain level of depth under several
global elements.
</p>

<p>There are two cases, however, in which these two styles are not
equivalent. The first is when elements with the same name need to be
defined with different contents at different locations. In this case,
<a name="INDEX-79" />local element definitions should be used
(at least at all the location except one) since the elements are
identified by their names.
</p>

<p>In our example, the element <tt class="literal">name</tt> appears both
within <tt class="literal">author</tt> and <tt class="literal">character</tt>
with the same datatype. We may want to define the element
<tt class="literal">name</tt> with different content models in
<tt class="literal">author</tt> and <tt class="literal">character</tt>, as in
this instance document:
</p>

<blockquote><pre class="code">&lt;?xml version="1.0"?&gt;
&lt;library&gt;
  &lt;book id="b0836217462" available="true"&gt;
    &lt;isbn&gt;
      0836217462
    &lt;/isbn&gt;
    &lt;title lang="en"&gt;
      Being a Dog Is a Full-Time Job
    &lt;/title&gt;
    &lt;author id="CMS"&gt;
      &lt;name&gt;
        &lt;first&gt;
          Charles
        &lt;/first&gt;
        &lt;middle&gt;
          M.
        &lt;/middle&gt;
        &lt;last&gt;
          Schulz
        &lt;/last&gt;
      &lt;/name&gt;
      &lt;born&gt;
        1922-11-26
      &lt;/born&gt;
      &lt;dead&gt;
        2000-02-12
      &lt;/dead&gt;
    &lt;/author&gt;
    &lt;character id="Snoopy"&gt;
      &lt;name&gt;
        Snoopy
      &lt;/name&gt;
      &lt;born&gt;
        1950-10-04
      &lt;/born&gt;
      &lt;qualification&gt;
        extroverted beagle
      &lt;/qualification&gt;
    &lt;/character&gt;
  &lt;/book&gt;
&lt;/library&gt;</pre></blockquote>

<p>Since we can define only one global element named
<tt class="literal">name</tt>, we need to define at least one of the
<tt class="literal">name</tt> elements locally under its parent.
</p>

<p>The W3C Schema for XML Schema gives several examples of elements
having different types depending on their location. We will see this
used in the next section in our Russian doll schema: global
definitions of elements have a different type in the schema for
schema than local definitions or references, even though they use the
same element name (<tt class="literal">xs:element</tt>).
</p>



<a name="ch03-6-fm2xml" /><blockquote><b>TIP:</b> 
Whether defining elements with the same name and different datatypes
is good practice or not is subject to discussion. It may be confusing
for human authors and more difficult to document, but W3C XML Schema
gives, through local definitions, a way to avoid any confusion for
the applications that will process these documents. In our example,
for instance, we have two occurrences of a <tt class="literal">name</tt>
element under <tt class="literal">author</tt> and under
<tt class="literal">character</tt>. It is perfectly possible to define
different constraints and even contents on those two elements.
Although this could be presented as overloaded element names
("character/name" versus
"author/name"), I find this
practice unreliable, since we often don't have a
clear and simple way to identify those two contexts.
</p>
</blockquote>

<p>Another example is <a name="INDEX-80" />recursive schema, in which an element
can be included within an element of the same type directly or
indirectly in a <a name="INDEX-81" />child element. In this case, a flat design
employing references must be used since the depth of these recursive
structures is unlimited.
</p>

<p>W3C XML Schema offers several examples of such elements with local
definitions of elements that can be recursively nested, as is the
case in our second schema. A <a name="INDEX-82" />flat design must be used since these
elements need to be referenced if we don't want to
limit the maximum depth of the structure, and the schema for schema
uses a reference mechanism. (The actual mechanism used in this case
involves an element group, a feature we have not seen yet but is
equivalent to an actual reference to <a name="INDEX-83" /> <a name="INDEX-84" />an element.)
</p>

</div>
<a name="xmlschema-CHP-3-SECT-2.2" /><div class="sect2">
<h3 class="sect2">3.2.2. Russian Doll and Object-Oriented Design</h3>

<p>The <a name="INDEX-85" /> <a name="INDEX-86" />style
<a name="INDEX-87" />
<a name="INDEX-88" />
<a name="INDEX-89" />of defining elements and attributes
locally is often called the Russian doll design, since the definition
of each element is embedded in the definition of its parent, in the
same way Russian dolls are embedded into each other.
</p>

<p>If we look at the Russian dolls with our object-oriented lenses, we
may say that the objects are now created locally where they are
needed as opposed to being created globally and cloned when we need
them (which was the case as in our first schema).
</p>

<p>At this point, we still need to learn how we can create types that
are the equivalent of classes of objects and containers, and that
will let us manipulate sets of objects.
</p>

</div>
<a name="xmlschema-CHP-3-SECT-2.3" /><div class="sect2">
<h3 class="sect2">3.2.3. Where Have the Element Types Gone?</h3>

<p>Those <a name="INDEX-90" />of you who are
familiar with XML (or SGML) and its DTD are used to identifying the
elements though the term "element
type." The XML 1.0 Recommendation states that
"each element has a type, identified by
name." This is further disambiguated by the
namespaces specification, which explain that "an XML
namespace is a collection of names, identified by a URI reference
[RFC2396], which are used in XML documents as element types and
attribute names."
</p>

<p>A surprising feature of our Russian doll schema is that this
fundamental notion of element type has completely disappeared, and
there is no way to tell which element type <tt class="literal">name</tt>
is. Two different elements have been defined as having a name equal
to <tt class="literal">name</tt>. These have an independent definition,
which is identical in our example, but could be different--such
as if we had decomposed the first, middle, and last names for
authors, but not for characters. The notion of element type
<tt class="literal">name</tt> doesn't mean anything if we
do not specify in which context it is used.
</p>

<p>This loss has such little importance that few people have even
noticed it. There are some situations where we need to identify
elements, though--for instance to document XML vocabularies. A
convenient way to write a reference manual for a XML vocabulary is to
write an index of the element names with their definition. This
becomes much more complex when there is no clear match between
element types and their definitions and content models.
</p>



<a name="ch03-8-fm2xml" /><blockquote><b>TIP:</b> 
<a name="INDEX-91" />RDF is another application that relies on
element types. RDF uses element types to identify elements as objects
in its triples. The element "name"
of the namespace <em class="emphasis">http://dyomedea.com/ns</em> is
identified as <em class="emphasis">http://dyomedea.com/ns#name</em>.
Cutting the link between element types and their schema definition
makes it difficult, if not impossible, to answer basic questions,
such as what's the content model of
<em class="emphasis">http://dyomedea.com/ns#name</em>, and where can I
find its definition.
</p>
</blockquote>

<p>I was confronted with this issue when writing the reference guide of
this book since the W3C XML Schema for W3C XML Schema uses many local
element definitions. I came to the conclusion that the fact that the
same element type (such as <tt class="literal">xs:restriction</tt>, which we
will see later on) can have different content models with a different
semantic, depending on its location in a schema, adds a significant
amount of difficulty in understanding the language and reading a
schema.
</p>





</div>


<hr width="684" align="left" />
<div class="navbar"><table width="684" border="0"><tr><td align="left" valign="top" width="228"><a href="ch03_01.htm"><img src="../gifs/txtpreva.gif" alt="Previous" border="0" /></a></td><td align="center" valign="top" width="228"><a href="index.htm"><img src="../gifs/txthome.gif" alt="Home" border="0" /></a></td><td align="right" valign="top" width="228"><a href="ch04_01.htm"><img src="../gifs/txtnexta.gif" alt="Next" border="0" /></a></td></tr><tr><td align="left" valign="top" width="228">3. Giving Some Depth to Our First Schema</td><td align="center" valign="top" width="228"><a href="index/index.htm"><img src="../gifs/index.gif" alt="Book Index" border="0" /></a></td><td align="right" valign="top" width="228">4. Using Predefined Simple Datatypes</td></tr></table></div>
<hr width="684" align="left" />

<img src="../gifs/navbar.gif" usemap="#library-map" border="0" alt="Library Navigation Links" />
<p><p><font size="-1"><a href="copyrght.htm">Copyright &copy; 2002</a> O'Reilly &amp; Associates. All rights reserved.</font></p>

<map name="library-map">
<area shape="rect" coords="0,0,85,93" href="../index.htm"><area shape="rect" coords="85,0,180,98" href="../sax2/index.htm"><area shape="rect" coords="182,-1,261,100" href="../xmlnut/index.htm"><area shape="rect" coords="263,1,384,96" href="../jxml/index.htm"><area shape="rect" coords="386,1,463,100" href="../jxslt/index.htm"><area shape="rect" coords="466,1,533,112" href="../xslt/index.htm"><area shape="rect" coords="535,-1,610,108" href="index.htm"><area shape="rect" coords="613,1,696,121" href="../pxml/index.htm">
</map>

</body></html>