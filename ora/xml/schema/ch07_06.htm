<html><head><title>Empty Content Models (XML Schema)</title><link rel="stylesheet" type="text/css" href="../style/style1.css" />

<meta name="DC.Creator" content="Eric van der Vlist" /><meta name="DC.Format" content="text/xml" scheme="MIME" /><meta name="DC.Language" content="en-US" /><meta name="DC.Publisher" content="O'Reilly &amp; Associates, Inc." /><meta name="DC.Source" scheme="ISBN" content="0596002521L" /><meta name="DC.Subject.Keyword" content="stuff" /><meta name="DC.Title" content="XML Schema" /><meta name="DC.Type" content="Text.Monograph" />

</head><body bgcolor="#ffffff">

<img src="gifs/smbanner.gif" usemap="#banner-map" border="0" alt="Book Home" /><map name="banner-map"><area shape="rect" coords="1,-2,616,66" href="index.htm" alt="XML Schema" /><area shape="rect" coords="629,-11,726,25" href="jobjects/fsearch.htm" alt="Search this book" /></map>

<div class="navbar"><table width="684" border="0"><tr><td align="left" valign="top" width="228"><a href="ch07_05.htm"><img src="../gifs/txtpreva.gif" alt="Previous" border="0" /></a></td><td align="center" valign="top" width="228" /><td align="right" valign="top" width="228"><a href="ch07_07.htm"><img src="../gifs/txtnexta.gif" alt="Next" border="0" /></a></td></tr></table></div>



<h2 class="sect1">7.6. Empty Content Models</h2>

<p>Empty content models are elements that can only accept attributes.
W3C XML Schema does not include any special support for empty content
models, which can be considered either complex content models without
elements or simple content models with a value restricted to the null
string.
</p>

<a name="xmlschema-CHP-7-SECT-6.1" /><div class="sect2">
<h3 class="sect2">7.6.1. Creation of Empty Content Models</h3>

<p>W3C <a name="INDEX-605" />
<a name="INDEX-606" />XML Schema considers empty
content models to be the intersection between complex content models
(in the case in which no compositors are specified) and simple
content models (in the case in which no text nodes are expected,
which W3C XML Schema handles as if an empty text node was found). We
will, therefore, be able to choose between the two methods to create
an empty content model. Where we extended our
<tt class="literal">title</tt> element to become mixed content, we
carefully avoided adding empty elements, such as the HTML
<tt class="literal">img</tt> or <tt class="literal">br</tt>.
Let's see how we could define a
<tt class="literal">br</tt> element with its <tt class="literal">id</tt> and
<tt class="literal">class</tt> attributes using both methods.
</p>

<a name="xmlschema-CHP-7-SECT-6.1.1" /><div class="sect3">
<h3 class="sect3">7.6.1.1. As simple content models</h3>

<p>This <a name="INDEX-607" />is done by defining a simple
type that can only accept the empty string as a value. Strictly
speaking, empty content models do not accept any whitespace between
their start and end tags. Since we want to control this, we must use
a datatype that does not alter the whitespaces, i.e., <tt class="literal"><a href="ch16_01.htm">xs:string</a></tt>. Our empty content model is then
derived by extension from this simple type:
</p>

<blockquote><pre class="code">&lt;xs:simpleType name="empty"&gt;
  &lt;xs:restriction base="xs:string"&gt;
    &lt;xs:enumeration value=""/&gt;
  &lt;/xs:restriction&gt;
&lt;/xs:simpleType&gt;
             
&lt;xs:element name="br"&gt;
  &lt;xs:complexType&gt;
    &lt;xs:simpleContent&gt;
      &lt;xs:extension base="empty"&gt;
        &lt;xs:attribute name="id" type="xs:ID"/&gt;
        &lt;xs:attribute name="class" type="xs:NMTOKEN"/&gt;
      &lt;/xs:extension&gt;
    &lt;/xs:simpleContent&gt;
  &lt;/xs:complexType&gt;
&lt;/xs:element&gt;</pre></blockquote>

</div>

<a name="xmlschema-CHP-7-SECT-6.1.2" /><div class="sect3">
<h3 class="sect3">7.6.1.2. As complex content models</h3>

<p>The <a name="INDEX-608" />other (more straightforward)
way to do this is to create a complex content model without any
subelements:
</p>

<blockquote><pre class="code">&lt;xs:element name="br"&gt;
  &lt;xs:complexType&gt;
    &lt;xs:attribute name="id" type="xs:ID"/&gt;
    &lt;xs:attribute name="class" type="xs:NMTOKEN"/&gt;
  &lt;/xs:complexType&gt;
&lt;/xs:element&gt;</pre></blockquote>

</div>
</div>
<a name="xmlschema-CHP-7-SECT-6.2" /><div class="sect2">
<h3 class="sect2">7.6.2. Derivation of Empty Content Models</h3>

<p>Each of the two empty content types keeps the derivation methods of
its content model (simple or complex). The main difference between
these two methods is essentially a matter of which derivations may be
applied on the base type and what effect it will have.
</p>

<a name="xmlschema-CHP-7-SECT-6.2.1" /><div class="sect3">
<h3 class="sect3">7.6.2.1. Derivation by extension</h3>

<p>If <a name="INDEX-609" /> <a name="INDEX-610" />we try to
remember and compare what we've learned about
deriving complex and simple contents by extension, we can see that
both allow addition of new attributes to the complex type. However,
while we can add new subelements to complex content, we cannot change
the type of the text node for a simple content model. Thus, this is
the first difference between the two methods: when the empty content
model is built on a simple type, it will not be possible to add
anything other than attributes, while if it is built on top of a
complex type, it will be possible to extend it to accept elements.
</p>

</div>

<a name="xmlschema-CHP-7-SECT-6.2.2" /><div class="sect3">
<h3 class="sect3">7.6.2.2. Derivation by restriction</h3>

<p>At <a name="INDEX-611" /> <a name="INDEX-612" />first
glance, it seems that there are fewer differences here. The
restriction methods of both simple and complex contents allow the
restriction the scope of the attributes; restricting the content,
which is already empty, doesn't seem to be very
interesting. It's time, though, to remember what
we've learned about a simple type derivation facet,
which actually extends the set of valid instance documents! The
"empty" simple type that we created
to derive our empty simple content model has a base type equal to
<tt class="literal"><a href="ch16_01.htm">xs:string</a></tt>. When this simple type is derived
through <tt class="literal"><a href="ch15_01.htm">xs:whiteSpace</a></tt>, the result may be an expansion
of the sets of valid instance structures. In our case, setting
<tt class="literal"><a href="ch15_01.htm">xs:whiteSpace</a></tt> to
"collapse" has the effect of
accepting any sequence of whitespaces between the start and closing
tags. This new type is not "empty,"
strictly speaking, but may be useful for some (if not for most)
applications that are normalizing the whitespaces and do not make any
difference between these two cases. Such a derivation can be done on
the simple content complex type like this:
</p>

<blockquote><pre class="code">&lt;xs:simpleType name="empty"&gt;
  &lt;xs:restriction base="xs:string"&gt;
    &lt;xs:enumeration value=""/&gt;
  &lt;/xs:restriction&gt;
&lt;/xs:simpleType&gt;
             
&lt;xs:complexType name="emptyBr"&gt;
  &lt;xs:simpleContent&gt;
    &lt;xs:extension base="empty"&gt;
      &lt;xs:attribute name="id" type="xs:ID"/&gt;
      &lt;xs:attribute name="class" type="xs:NMTOKEN"/&gt;
    &lt;/xs:extension&gt;
  &lt;/xs:simpleContent&gt;
&lt;/xs:complexType&gt;
             
&lt;xs:complexType name="allmostEmptyBr"&gt;
  &lt;xs:simpleContent&gt;
    &lt;xs:restriction base="emptyBr"&gt;
      &lt;xs:whiteSpace value="collapse"/&gt;
      &lt;xs:attribute name="id" type="xs:ID"/&gt;
      &lt;xs:attribute name="class" type="xs:NMTOKEN"/&gt;
    &lt;/xs:restriction&gt;
  &lt;/xs:simpleContent&gt;
&lt;/xs:complexType&gt;</pre></blockquote>

</div>
</div>
<a name="xmlschema-CHP-7-SECT-6.3" /><div class="sect2">
<h3 class="sect2">7.6.3. Simple or Complex Content Models for Empty Content Models?</h3>

<p>As <a name="INDEX-613" />we have seen, choosing a simple or complex
type doesn't make an awful lot of difference, except
for extensibility. If we want to keep the possibility of adding
subelements by derivation in the content model, we'd
better choose an empty complex content model. However, if we want to
be able to accept whitespaces in a derived type, an empty simple
content model is a better bet.
</p>

</div>


<hr width="684" align="left" />
<div class="navbar"><table width="684" border="0"><tr><td align="left" valign="top" width="228"><a href="ch07_05.htm"><img src="../gifs/txtpreva.gif" alt="Previous" border="0" /></a></td><td align="center" valign="top" width="228"><a href="index.htm"><img src="../gifs/txthome.gif" alt="Home" border="0" /></a></td><td align="right" valign="top" width="228"><a href="ch07_07.htm"><img src="../gifs/txtnexta.gif" alt="Next" border="0" /></a></td></tr><tr><td align="left" valign="top" width="228">7.5. Mixed Content Models</td><td align="center" valign="top" width="228"><a href="index/index.htm"><img src="../gifs/index.gif" alt="Book Index" border="0" /></a></td><td align="right" valign="top" width="228">7.7. Back to Our Library</td></tr></table></div>
<hr width="684" align="left" />

<img src="../gifs/navbar.gif" usemap="#library-map" border="0" alt="Library Navigation Links" />
<p><p><font size="-1"><a href="copyrght.htm">Copyright &copy; 2002</a> O'Reilly &amp; Associates. All rights reserved.</font></p>

<map name="library-map">
<area shape="rect" coords="0,0,85,93" href="../index.htm"><area shape="rect" coords="85,0,180,98" href="../sax2/index.htm"><area shape="rect" coords="182,-1,261,100" href="../xmlnut/index.htm"><area shape="rect" coords="263,1,384,96" href="../jxml/index.htm"><area shape="rect" coords="386,1,463,100" href="../jxslt/index.htm"><area shape="rect" coords="466,1,533,112" href="../xslt/index.htm"><area shape="rect" coords="535,-1,610,108" href="index.htm"><area shape="rect" coords="613,1,696,121" href="../pxml/index.htm">
</map>

</body></html>