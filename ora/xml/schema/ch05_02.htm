<html><head><title>Derivation By List (XML Schema)</title><link rel="stylesheet" type="text/css" href="../style/style1.css" />

<meta name="DC.Creator" content="Eric van der Vlist" /><meta name="DC.Format" content="text/xml" scheme="MIME" /><meta name="DC.Language" content="en-US" /><meta name="DC.Publisher" content="O'Reilly &amp; Associates, Inc." /><meta name="DC.Source" scheme="ISBN" content="0596002521L" /><meta name="DC.Subject.Keyword" content="stuff" /><meta name="DC.Title" content="XML Schema" /><meta name="DC.Type" content="Text.Monograph" />

</head><body bgcolor="#ffffff">

<img src="gifs/smbanner.gif" usemap="#banner-map" border="0" alt="Book Home" /><map name="banner-map"><area shape="rect" coords="1,-2,616,66" href="index.htm" alt="XML Schema" /><area shape="rect" coords="629,-11,726,25" href="jobjects/fsearch.htm" alt="Search this book" /></map>

<div class="navbar"><table width="684" border="0"><tr><td align="left" valign="top" width="228"><a href="ch05_01.htm"><img src="../gifs/txtpreva.gif" alt="Previous" border="0" /></a></td><td align="center" valign="top" width="228" /><td align="right" valign="top" width="228"><a href="ch05_03.htm"><img src="../gifs/txtnexta.gif" alt="Next" border="0" /></a></td></tr></table></div>



<h2 class="sect1">5.2. Derivation By List</h2>

<p>Derivation <a name="INDEX-332" /> <a name="INDEX-333" /> <a name="INDEX-334" />by list is the mechanism by which
a list datatype can be derived from an atomic datatype. All the items
in the list need to have the same datatype.
</p>

<a name="xmlschema-CHP-5-SECT-2.1" /><div class="sect2">
<h3 class="sect2">5.2.1. List Datatypes</h3>

<p>List datatypes are special cases in which a structure is defined
within the content of a single attribute or element. This practice is
usually discouraged since applications do not have access to the
atomic values through the current XML APIs, XPath expressions, or in
the Infoset. This situation might change in the future since these
datatypes should be adopted by XPath 2.0, which will likely provide
some kind of mechanism to access to the items within these lists.
</p>

<p>This feature appears to have been introduced to maintain
compatibility with SGML and XML DTD IDREFS, but <em class="emphasis">W3C XML
Schema</em> has been cautious and doesn't
allow definition of the list separator or complex lists with complex
types or heterogeneous members. Among the constructs that can be seen
in some XML vocabularies and cannot be described by XML Schema
(except by using regular expressions as a partial workaround) are
<a name="INDEX-335" />comma-separated lists of values, and
lists with heterogeneous members, such as values with units:
</p>

<blockquote><pre class="code">&lt;commaSeparated&gt;
  1, 2, 25
&lt;/commaSeparated&gt;
  
&lt;valueWithUnit&gt;
  10 em
&lt;/valueWithUnit&gt;</pre></blockquote>

<p>Whitespace-separated lists and split XML elements or attributes are
preferred:
</p>

<blockquote><pre class="code">&lt;commaSeparated&gt;
  1 2 25
&lt;/commaSeparated&gt;
  
&lt;valueWithUnit unit="em"&gt;
  10
&lt;/valueWithUnit&gt;
              
&lt;valueWithUnit&gt;
  10em
&lt;/valueWithUnit&gt;</pre></blockquote>

<p><a name="INDEX-336" />IDREFS,
<a name="INDEX-337" />ENTITIES,
and <a name="INDEX-338" />NMTOKENS are predefined
<a name="INDEX-339" />list
datatypes that are derived from atomic types using this method.
</p>

<p>As we have seen with these three datatypes, all the list datatypes
that can be defined must be whitespace-separated. No other separator
is accepted.
</p>

<p>With this restriction, defining a list is very simple, and
<em class="emphasis">W3C XML Schema</em> has defined two syntaxes. Both
use a <a name="INDEX-340" /><tt class="literal"><a href="ch15_01.htm">xs:list</a></tt> element, which allows a definition
by reference to existing types or embeds a type definition (these two
syntaxes cannot be mixed).
</p>

<p>The definition of a list datatype by reference to an existing type is
done through a
<tt class="literal">itemType</tt><a name="INDEX-341" /> attribute:
</p>

<blockquote><pre class="code">&lt;xs:simpleType name="integerList"&gt;
  &lt;xs:list itemType="xs:integer"/&gt;
&lt;/xs:simpleType&gt;</pre></blockquote>

<p>This datatype can be used to define attributes or elements that
accept a whitespace-separated list of integers such as:
"1 -25000 1000."
</p>

<p>The definition of a list datatype can also be done by embedding
<a name="INDEX-342" /> <a name="INDEX-343" />a <tt class="literal"><a href="ch15_01.htm">xs:simpleType(global definition)</a></tt> element:
</p>

<blockquote><pre class="code">&lt;xs:simpleType name="myIntegerList"&gt;
  &lt;xs:list&gt;
    &lt;xs:simpleType&gt;
      &lt;xs:restriction base="xs:integer"&gt;
        &lt;xs:maxInclusive value="100"/&gt;
      &lt;/xs:restriction&gt;
    &lt;/xs:simpleType&gt;
  &lt;/xs:list&gt;
&lt;/xs:simpleType&gt;</pre></blockquote>

<p>This datatype can be used to define attributes or elements that
accept a whitespace-separated list of integers smaller than or equal
to 100 such as: "1 -25000 100."
</p>

<p>List datatypes have their own value space that can be constrained
using a set of specific facets that is common to all of them.
</p>

<p>These facets are <a name="INDEX-344" /><tt class="literal"><a href="ch15_01.htm">xs:length</a></tt>, <a name="INDEX-345" /><tt class="literal"><a href="ch15_01.htm">xs:maxLength</a></tt>, <a name="INDEX-346" /><tt class="literal"><a href="ch15_01.htm">xs:minLength</a></tt>, <a name="INDEX-347" /><tt class="literal"><a href="ch15_01.htm">xs:enumeration</a></tt> and
<a name="INDEX-348" /><tt class="literal"><a href="ch15_01.htm">xs:whiteSpace</a></tt>. The unit used to measure the length
of a list type is always the number of elements in the list.
</p>

<p>To apply these facets to a user-defined list type, we need to follow
two steps. We first define the list datatype, and then define a
datatype to constrain the list datatype. The reason for this is each
<tt class="literal"><a href="ch15_01.htm">xs:simpleType(global definition)</a></tt> accepts only one derivation method
chosen between the three existing methods.
</p>

<p>In this process, the derivation by restriction has to be done first,
since a list datatype loses the facets of its atomic type and has the
only five facets just described that have a meaning that is specific
to list types.
</p>

<a name="xmlschema-CHP-5-SIDEBAR-1" /><blockquote><table border="1" cellpadding="6"><tr><td>
<h4 class="objtitle">Defining Atomic Datatypes That Allow Whitespace</h4>

<p>It is possible to define lists of atomic datatypes that allow
<a name="INDEX-349" />whitespaces such as <tt class="literal"><a href="ch16_01.htm">xs:string</a></tt>. In this case, whitespaces are
always considered separators.
</p>

<p>The impact of this statement can be seen when we apply a facet
constraining the length of such a datatype:
</p>

<blockquote><pre class="code">&lt;xs:simpleType name="myStringList"&gt;
  &lt;xs:list itemType="xs:string"/&gt;
&lt;/xs:simpleType&gt;
  
&lt;xs:simpleType name="myRestrictedStringList"&gt;
  &lt;xs:restriction base="myStringList"&gt;
    &lt;xs:maxLength value="10"/&gt;
  &lt;/xs:restriction&gt;
&lt;/xs:simpleType&gt;</pre></blockquote>

<p>The datatype <tt class="literal">myRestrictedStringList</tt> is a list of a
maximum of 10 items. Since these items are separated by whitespaces,
<tt class="literal">myRestrictedStringList</tt> is a list of a maximum of
10 portions of strings that do not contain whitespace (i.e., 10
"words").
</p>

<p>This datatype, therefore, validates a value such as:</p>

<blockquote><pre class="code">&lt;myRestrictedStringList&gt;
  This value has less than ten words.
&lt;/myRestrictedStringList&gt;</pre></blockquote>

<p>But not this one:</p>

<blockquote><pre class="code">&lt;myRestrictedStringList&gt; 
  This value has more than ten words... even if they could be
  spreading less than ten "strings."
&lt;/myRestrictedStringList&gt;</pre></blockquote>

<p>Defining lists of lists is forbidden per the W3C XML Schema
<a name="INDEX-350" />
<a name="INDEX-351" />
<a name="INDEX-352" />Recommendation. 
</p>
</td></tr></table><p></blockquote>

</div>


<hr width="684" align="left" />
<div class="navbar"><table width="684" border="0"><tr><td align="left" valign="top" width="228"><a href="ch05_01.htm"><img src="../gifs/txtpreva.gif" alt="Previous" border="0" /></a></td><td align="center" valign="top" width="228"><a href="index.htm"><img src="../gifs/txthome.gif" alt="Home" border="0" /></a></td><td align="right" valign="top" width="228"><a href="ch05_03.htm"><img src="../gifs/txtnexta.gif" alt="Next" border="0" /></a></td></tr><tr><td align="left" valign="top" width="228">5. Creating Simple Datatypes</td><td align="center" valign="top" width="228"><a href="index/index.htm"><img src="../gifs/index.gif" alt="Book Index" border="0" /></a></td><td align="right" valign="top" width="228">5.3. Derivation By Union</td></tr></table></div>
<hr width="684" align="left" />

<img src="../gifs/navbar.gif" usemap="#library-map" border="0" alt="Library Navigation Links" />
<p><p><font size="-1"><a href="copyrght.htm">Copyright &copy; 2002</a> O'Reilly &amp; Associates. All rights reserved.</font></p>

<map name="library-map">
<area shape="rect" coords="0,0,85,93" href="../index.htm"><area shape="rect" coords="85,0,180,98" href="../sax2/index.htm"><area shape="rect" coords="182,-1,261,100" href="../xmlnut/index.htm"><area shape="rect" coords="263,1,384,96" href="../jxml/index.htm"><area shape="rect" coords="386,1,463,100" href="../jxslt/index.htm"><area shape="rect" coords="466,1,533,112" href="../xslt/index.htm"><area shape="rect" coords="535,-1,610,108" href="index.htm"><area shape="rect" coords="613,1,696,121" href="../pxml/index.htm">
</map>

</body></html>
