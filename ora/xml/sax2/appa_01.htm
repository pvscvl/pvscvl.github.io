<html><head><title>SAX2 API Summary (SAX2)</title><link rel="stylesheet" type="text/css" href="../style/style1.css" />

<meta name="DC.Creator" content="David Brownell" /><meta name="DC.Format" content="text/xml" scheme="MIME" /><meta name="DC.Language" content="en-US" /><meta name="DC.Publisher" content="O'Reilly &amp; Associates, Inc." /><meta name="DC.Source" scheme="ISBN" content="0596002378L" /><meta name="DC.Subject.Keyword" content="stuff" /><meta name="DC.Title" content="SAX2" /><meta name="DC.Type" content="Text.Monograph" />

</head><body bgcolor="#ffffff">

<img alt="Book Home" border="0" src="gifs/smbanner.gif" usemap="#banner-map" /><map name="banner-map"><area shape="rect" coords="1,-2,616,66" href="index.htm" alt="SAX2" /><area shape="rect" coords="629,-11,726,25" href="jobjects/fsearch.htm" alt="Search this book" /></map>

<div class="navbar"><table width="684" border="0"><tr><td align="left" valign="top" width="228"><a href="ch06_03.htm"><img alt="Previous" border="0" src="../gifs/txtpreva.gif" /></a></td><td align="center" valign="top" width="228" /><td align="right" valign="top" width="228"><a href="appa_02.htm"><img alt="Next" border="0" src="../gifs/txtnexta.gif" /></a></td></tr></table></div>



    <h1 class="chapter">Appendix A. SAX2 API Summary</h1>
<div class="htmltoc"><h4 class="tochead">Contents:</h4>
  <p> <a href="#sax2-APP-A-SECT-1">The org.xml.sax Package</a><br />
<a href="appa_02.htm">The org.xml.sax.helpers Package</a><br />
<a href="appa_03.htm">The org.xml.sax.ext Package</a><br /></p></div>

    
	<p>This appendix provides a quick reference to each of
	the SAX2 APIs presented in this book.
	It shows API signatures and provides a brief overview for
	each interface, class, and exception in alphabetical order.
	</p>

	<p>Full documentation for these APIs is available for you to download or browse online at 
	the SAX web site (<a href="../../../../../../sax.sourceforge.net/">http://sax.sourceforge.net/</a>), and it should also be available with documentation for your SAX parser.</p>

    

    <div class="sect1"><a name="sax2-APP-A-SECT-1" /></a>
	<h2 class="sect1">A.1. The org.xml.sax Package</h2>

	<p>
<a name="INDEX-764" /></a>
        The <em class="emphasis">org.xml.sax</em> package holds
	the interfaces and exceptions that are at the core of SAX,
	including some deprecated SAX1 APIs.
	</p>

	<a name="sax2-APP-A-SECT-1.1" /></a><div class="sect2">
	    <h3 class="sect2">A.1.1. The AttributeList Interface</h3>

	    <p>
<a name="INDEX-765" /></a>
            This SAX1 interface is not used in SAX2;
	    the <em class="emphasis">Attributes</em> interface, which
	    supports namespace identifiers, is used instead.
	    </p>

	    <p>For more information, refer to
	    <a href="ch05_02.htm">Section 5.2, "SAX1 Support "</a> in <a href="ch05_01.htm">Chapter 5, "Other SAX Classes"</a>.</p>

	    <blockquote><pre class="code">public interface AttributeList 
{
    public int getLength();
    public String getType(int index);
    public String getValue(int index);
    // access to name info
    public String getName(int index);
    <?troff .ne 10?>// access by XML 1.0-style names
    public String getType(String qName);
    public String getValue(String qName);
}
	    </pre></blockquote>

	</div>

	<a name="sax2-APP-A-SECT-1.2" /></a><div class="sect2">
	    <h3 class="sect2">A.1.2. The Attributes Interface</h3>

	    <p>
<a name="INDEX-766" /></a>
            This interface groups all the attributes associated
	    with a given element in the
	    <tt class="literal">ContentHandler.startElement()</tt> call.
	    Attribute characteristics are frequently accessed using an
	    indexed access model, though you can also determine the index,
	    type, or value of an attribute given
	    XML 1.0-style (qName) or namespace-style (uri, localName)
	    versions of its name.
	    </p>

	    <p>For more information, refer to
	    <a href="ch02_03.htm">Section 2.3.3, "The Attributes Interface "</a> in <a href="ch02_01.htm">Chapter 2, "Introducing SAX2"</a>.
	    </p>

	    <blockquote><pre class="code">public interface Attributes 
{
    public int getLength();
    public String getType(int index);
    public String getValue(int index);
    // access to name info
    public String getQName(int index);
    public String getLocalName(int index);
    public String getURI(int index);
    // access by XML Namespace-style names
    public int getIndex(String uri, String localName);
    public String getType(String uri, String localName);
    public String getValue(String uri, String localName);
    // access by XML 1.0-style names
    public int getIndex(String qName);
    public String getType(String qName);
    public String getValue(String qName);
}
	    </pre></blockquote>

	</div>

	<a name="sax2-APP-A-SECT-1.3" /></a><div class="sect2">
	    <h3 class="sect2">A.1.3. The ContentHandler Interface</h3>

	    <p>
<a name="INDEX-767" /></a>
            This is the primary SAX2 handler interface, which is
	    used in almost all applications.
	    </p>

	    <p>For more information, refer to
	    <a href="ch02_03.htm">Section 2.3.4, "Essential ContentHandler Callbacks"</a> and
	    <a href="ch02_06.htm">Section 2.6.4, "ContentHandler and Prefix Mappings"</a>, both in <a href="ch02_01.htm">Chapter 2, "Introducing SAX2"</a>,
	    as well as <a href="ch04_01.htm">Section 4.1.1, "Other ContentHandler Methods "</a> in <a href="ch04_01.htm">Chapter 4, "Consuming SAX2 Events"</a>.
	    </p>

	    <blockquote><pre class="code">public interface ContentHandler 
{
    // bookkeeping
    public void setDocumentLocator(Locator locator);
    public void startDocument() throws SAXException;
    public void endDocument() throws SAXException;
    // content events
    public void startElement(String uri, String localName, String qName,
	    Attributes attributes)
	throws SAXException;
    public void endElement(String uri, String localName, String qName)
	throws SAXException;
    public void characters(char buf[], int offset, int length)
	throws SAXException;
    public void processingInstruction(String target, String data)
	throws SAXException;
    // extra info
    public void ignorableWhitespace(char buf[], int offset, int length)
	throws SAXException;
    public void startPrefixMapping(String prefix, String uri)
	throws SAXException;
    public void endPrefixMapping(String prefix) throws SAXException;
    public void skippedEntity(String name) throws SAXException;
}
	    </pre></blockquote>

	</div>

	<a name="sax2-APP-A-SECT-1.4" /></a><div class="sect2">
	    <h3 class="sect2">A.1.4. The DocumentHandler Interface</h3>
	
	    <p>
<a name="INDEX-768" /></a>
            This SAX1 interface is not used in SAX2;
	    the <em class="emphasis">ContentHandler</em> interface, which
	    reports namespace identifiers and scopes
	    as well as skipped entities, is used instead.
	    </p>

	    <p>For more information, refer to
	    <a href="ch05_02.htm">Section 5.2, "SAX1 Support "</a> in <a href="ch05_01.htm">Chapter 5, "Other SAX Classes"</a>.
	    </p>

	    <blockquote><pre class="code">public interface DocumentHandler 
{
    // bookkeeping
    public void setDocumentLocator(Locator locator);
    public void startDocument() throws SAXException;
    public void endDocument() throws SAXException;
    // content events
    public void startElement(String qName, AttributeList attributes)
	throws SAXException;
    public void endElement(String qName) throws SAXException;
    public void characters(char buf[], int offset, int length)
	throws SAXException;
    public void processingInstruction(String target, String data)
	throws SAXException;
    // extra info
    public void ignorableWhitespace(char buf[], int offset, int length)
	throws SAXException;
}
	    </pre></blockquote>

	</div>

	<a name="sax2-APP-A-SECT-1.5" /></a><div class="sect2">
	    <h3 class="sect2">A.1.5. The DTDHandler Interface</h3>

	    <p>
<a name="INDEX-769" /></a>
            This interface is used to report information that is
	    useful to some SGML-derived applications.
	    </p>

	    <p>For more information, refer to
	    <a href="ch04_03.htm">Section 4.3.2, "The DTDHandler Interface "</a> in <a href="ch04_01.htm">Chapter 4, "Consuming SAX2 Events"</a>.
	    </p>

	    <blockquote><pre class="code">public interface DTDHandler 
{
    public void notationDecl(String notationName,
	    String publicId, String systemId)
	throws SAXException;
    public void unparsedEntityDecl(String entityName,
	    String publicId, String systemId, String notationName)
	throws SAXException;
}
	    </pre></blockquote>

	</div>

	<a name="sax2-APP-A-SECT-1.6" /></a><div class="sect2">
	    <h3 class="sect2">A.1.6. The EntityResolver Interface</h3>

	    <p>
<a name="INDEX-770" /></a>
            This interface encapsulates a strategy for resolving
	    public or system identifiers for parsed entities into data
	    that a parser will read. It is commonly used to ensure that
	    local copies of DTDs are used, instead of DTDs accessed across a network link that may be saturated or
	    unavailable. It can resolve general
	    entities, used to store non-DTD parts of a document in
	    separate storage units.
	    </p>

	    <p>For more information, refer to
	    <a href="ch03_04.htm">Section 3.4, "The EntityResolver Interface"</a> in <a href="ch03_01.htm">Chapter 3, "Producing  SAX2 Events"</a>.
	    </p>

	    <blockquote><pre class="code">public interface EntityResolver 
{
    public InputSource resolveEntity(String publicId, 
	String systemId)
	throws SAXException, java.io.IOException;
}
	    </pre></blockquote>

	</div>

	<a name="sax2-APP-A-SECT-1.7" /></a><div class="sect2">
	    <h3 class="sect2">A.1.7. The ErrorHandler Interface</h3>

	    <p>
<a name="INDEX-771" /></a>
            This interface encapsulates a strategy for handling
	    different kinds of errors. Parsers use its methods when
	    reporting errors, and have default policies that are used
	    if the application's strategy doesn't result in throwing an exception. Applications can benefit from sharing the same
	    mechanism to report their own errors.
	    Implementations typically use the problem's severity to
	    choose first whether to emit a diagnostic, and then
	    whether to <?troff .ne 10?>throw the parameter (to terminate processing)
	    or return (to continue processing).
	    </p>

	    <p>For more information, refer to
	    <a href="ch02_05.htm">Section 2.5.2, "ErrorHandler Interface"</a> in <a href="ch02_01.htm">Chapter 2, "Introducing SAX2"</a>.
	    </p>

	    <blockquote><pre class="code">public interface ErrorHandler 
{
    public void error(SAXParseException x) throws SAXException;
    public void fatalError(SAXParseException x) throws SAXException;
    public void warning(SAXParseException x) throws SAXException;
}
	    </pre></blockquote>

	</div>

	<a name="sax2-APP-A-SECT-1.8" /></a><div class="sect2">
	    <h3 class="sect2">A.1.8. The HandlerBase Interface</h3>
	
	    <p>
<a name="INDEX-772" /></a>
            This SAX1 class is not used in SAX2;
	    the <em class="emphasis">org.xml.sax.helpers.Defaulthandler</em>
	    class, which supports SAX2 features, is used instead.
	    </p>

	    <p>For more information, refer to
	    <a href="ch05_02.htm">Section 5.2, "SAX1 Support "</a> in <a href="ch05_01.htm">Chapter 5, "Other SAX Classes"</a>.
	    </p>

	    <blockquote><pre class="code">public class HandlerBase
	implements EntityResolver, DTDHandler,
	    DocumentHandler, ErrorHandler
{
    public HandlerBase();
    // DocumentHandler (SAX1)
    public void setDocumentLocator(Locator locator);
    public void startDocument() throws SAXException;
    public void endDocument() throws SAXException;
    public void startElement(String qName, 
	AttributeList attributes)
	throws SAXException;
    public void endElement(String qName) throws SAXException;
    public void characters(char buf[], int offset, length)
	throws SAXException;
    public void ignorableWhitespace(char buf[], int offset, 
	length)
	throws SAXException;
    public void processingInstruction(String target, 
	String data)
	throws SAXException;
    // DTDHandler ... NOTE: no "throws SAXException"!
    public void notationDecl(String notationName,
	String publicId, String publicId);
    public void unparsedEntityDecl(String entityName,
	String publicId, String publicId, notationName);
    // EntityResolver
    public InputSource resolveEntity(String publicId, 
	String publicId);
	throws SAXException;
    <?troff .ne 10?>// ErrorHandler
    public void error(SAXParseException x) throws SAXException;
    public void fatalError(SAXParseException x) throws SAXException;
    public void warning(SAXParseException x) throws SAXException;
}
	    </pre></blockquote>

	</div>

	<a name="sax2-APP-A-SECT-1.9" /></a><div class="sect2">
	    <h3 class="sect2">A.1.9. The InputSource Class</h3>

	    <p>
<a name="INDEX-773" /></a>
            This class is used to encapsulate entities for
	    consumption by an
	    <em class="emphasis">XMLReader</em> (or a SAX1
	    <em class="emphasis">Parser</em>).
	    Applications should make every effort to provide a usable
	    system identifier (an absolute URI, rather than null).
	    This will ensure that relative URIs can be properly
	    resolved so that diagnostics are meaningful.
	    Given that identifier, SAX parsers can do the rest,
	    possibly with assistance from an
	    <em class="emphasis">EntityResolver</em>.
	    </p>

	    <p>For more information, refer to
	    <a href="ch03_01.htm">Section 3.1.2, "The InputSource Class"</a> in <a href="ch03_01.htm">Chapter 3, "Producing  SAX2 Events"</a>.
	    </p>

	    
	    <blockquote><pre class="code">public class InputSource {
    public InputSource();
    public InputSource(String systemId);
    public InputSource(java.io.InputStream in);
    public InputSource(java.io.Reader in);
    // getters
    public String getPublicId();
    public String getSystemId();
    public java.io.InputStream getByteStream();
    public String getEncoding();
    public java.io.Reader getCharacterStream();
    // setters
    public void setPublicId(String publicId);
    public void setSystemId(String systemId);
    public void setByteStream(java.io.InputStream in);
    public void setEncoding(String encodingName);
    public void setCharacterStream(java.io.Reader in);
}
	    </pre></blockquote>

	</div>

	<a name="sax2-APP-A-SECT-1.10" /></a><div class="sect2">
	    <h3 class="sect2">A.1.10. The Locator Interface</h3>

	    <p>
<a name="INDEX-774" /></a>
            An event producer may invoke the
	    <tt class="literal">ContentHandler.setDocumentLocator()</tt>
	    call to provide one of these objects.
	    It may then be used inside event callbacks, until the final
	    <tt class="literal">ContentHandler.endDocument()</tt> call,
	    to determine the location of the data that triggered
	    the event. A common use is to figure out the base URI
	    used to resolve relative URIs found in document content.
	    This is true even
	    when <tt class="literal">xml:base</tt> attributes have been
	    used to override the <?troff .ne 10?>real base URI of the document.
	    Another common use is to construct 
	    <em class="emphasis">SAXParseException</em>
	    objects to construct application-level diagnostics.
	    </p>

	    <p>For more information, refer to
	    <a href="ch04_01.htm">Section 4.1.2, "The Locator Interface "</a> in <a href="ch04_01.htm">Chapter 4, "Consuming SAX2 Events"</a>.
	    </p>

	    <blockquote><pre class="code">public interface Locator 
{
    public String getPublicId();
    public String getSystemId();
    public int getLineNumber();
    public int getColumnNumber();
}
	    </pre></blockquote>

	</div>

	<a name="sax2-APP-A-SECT-1.11" /></a><div class="sect2">
	    <h3 class="sect2">A.1.11. The Parser Interface</h3>
	
	    <p>
<a name="INDEX-775" /></a>
            This SAX1 interface is no longer used in SAX2;
	    the <em class="emphasis">XMLReader</em> is used instead.
	    </p>

	    <p>For more information, refer to
	    <a href="ch05_02.htm">Section 5.2, "SAX1 Support "</a> in <a href="ch05_01.htm">Chapter 5, "Other SAX Classes"</a>.
	    </p>

	    <blockquote><pre class="code">public interface Parser 
{
    // setters
    public void setLocale(java.util.Locale locale) 
	throws SAXException;
    public void setEntityResolver(EntityResolver resolver);
    public void setDTDHandler(DTDHandler dtdHandler);
    public void setDocumentHandler(DocumentHandler docHandler);
    public void setErrorHandler(ErrorHandler errHandler);
    // parsing
    public void parse(InputSource in) throws SAXException, 
	java.io.IOException;
    public void parse(String uri) throws SAXException, 
	java.io.IOException;
}
	    </pre></blockquote>
	
	</div>

	<a name="sax2-APP-A-SECT-1.12" /></a><div class="sect2">
	    <h3 class="sect2">A.1.12. SAXException </h3>

	    <p>
<a name="INDEX-776" /></a>
            This is the base SAX exception class. It
	    can wrap another exception, and (like most exceptions)
	    a descriptive message.
	    </p>

	    <p>For more information, refer to
	    <a href="ch02_05.htm">Section 2.5.1, "SAX2 Exception Classes"</a> in <a href="ch02_01.htm">Chapter 2, "Introducing SAX2"</a>.
	    </p>

<?troff .Nd 10?>
<blockquote><pre class="code">public class SAXException extends Exception {
    public SAXException(String message);
    public SAXException(Exception cause);
    public SAXException(String message, Exception cause);
    // getters
    public Exception getException();
    public String getMessage();
}
	    </pre></blockquote>

	</div>

	<a name="sax2-APP-A-SECT-1.13" /></a><div class="sect2">
	    <h3 class="sect2">A.1.13. SAXNotRecognizedException </h3>

	    <p>
<a name="INDEX-777" /></a>
            This exception is used to report that the identifier
	    for a feature flag, or parser property, is not recognized.
	    When this doesn't indicate a mistyped identifier, it means
	    that the parser isn't exposing that particular information.
	    </p>

	    <p>For more information, refer to
	    <a href="ch02_05.htm">Section 2.5.1, "SAX2 Exception Classes"</a> in <a href="ch02_01.htm">Chapter 2, "Introducing SAX2"</a>.
	    </p>

	    <blockquote><pre class="code">public class SAXNotRecognizedException extends SAXException {
    public SAXNotRecognizedException(String message);
}
	    </pre></blockquote>

	</div>

	<a name="sax2-APP-A-SECT-1.14" /></a><div class="sect2">
	    <h3 class="sect2">A.1.14. SAXNotSupportedException </h3>

	    <p>
<a name="INDEX-778" /></a>
            This exception is used to report that while the
	    identifier for a feature flag, or parser property, was
	    recognized, setting the value was not practical.
	    For example, read-only values can't be changed to nondefault
	    values, handler properties need to implement the
	    appropriate interface, and some values can't be changed
	    while parsing, or accessed except while parsing.
	    </p>

	    <p>For more information, refer to
	    <a href="ch02_05.htm">Section 2.5.1, "SAX2 Exception Classes"</a> in <a href="ch02_01.htm">Chapter 2, "Introducing SAX2"</a>.
	    </p>

	    <blockquote><pre class="code">public class SAXNotSupportedException extends SAXException {
    public SAXNotSupportedException(String message);
}
	    </pre></blockquote>

	</div>

	<a name="sax2-APP-A-SECT-1.15" /></a><div class="sect2">
	    <h3 class="sect2">A.1.15. SAXParseException </h3>

	    <p>
<a name="INDEX-779" /></a>
            This type of <em class="emphasis">SAXException</em> is reported to the
	    <em class="emphasis">ErrorHandler</em>, and adds information
	    that is useful for locating (and hence fixing) problems in
	    input text.
	    That information may include the line and character offset
	    in the entity being parsed, the entity's URL, and any
	    public identifier associated with the entity.
	    <?troff .ne 10?>When used to report application-level errors, any
	    exception caused by problematic data can be encapsulated,
	    and associated with such <em class="emphasis">Locator</em> information to help
	    pinpoint problematic input data.
	    It's safe to provide null <em class="emphasis">Locator</em> or <em class="emphasis">Exception</em> objects.
	    </p>

	    <p>For more information, refer to
	    <a href="ch02_05.htm">Section 2.5.1, "SAX2 Exception Classes"</a> as well as
	    <a href="ch02_05.htm">Section 2.5.3, "Errors and Diagnostics"</a>, which are both located in <a href="ch02_01.htm">Chapter 2, "Introducing SAX2"</a>.
	    </p>

	    <blockquote><pre class="code">public class SAXParseException extends SAXException {
    public SAXParseException(String message, Locator where);
    public SAXParseException(String message, Locator where, 
	Exception cause);
    public SAXParseException(String message,
	String publicId, String systemId, int line, int column);
    public SAXParseException(String message,
	String publicId, String systemId, int line, int column,
	Exception cause);
    // getters
    public String getPublicId();
    public String getSystemId();
    public int getLineNumber();
    public int getColumnNumber();
}
	    </pre></blockquote>

	</div>

	<a name="sax2-APP-A-SECT-1.16" /></a><div class="sect2">
	    <h3 class="sect2">A.1.16. The XMLFilter Interface</h3>

	    <p>
<a name="INDEX-780" /></a>
            This interface encapsulates the notion that one
	    <em class="emphasis">XMLReader</em> may process
	    the output of another one before delivering it.
	    The <em class="emphasis">XMLFilterImpl</em> helper class
	    is substantially more interesting, since it does the real
	    work and can be used in a postprocessing mode as well.
	    </p>

	    <p>For more information, refer to
	    <a href="ch03_05.htm">Section 3.5.4, "The XMLFilter Interface"</a> in <a href="ch03_01.htm">Chapter 3, "Producing  SAX2 Events"</a>.
	    </p>

	    <blockquote><pre class="code">public interface XMLFilter extends XMLReader 
{
    public void setParent(XMLReader parent);
    public XMLReader getParent();
}
	    </pre></blockquote>

	</div>

	<a name="sax2-APP-A-SECT-1.17" /></a><div class="sect2">
	    <h3 class="sect2">A.1.17. The XMLReader Interface</h3>

	    <p>
<a name="INDEX-781" /></a>
A SAX2 "parser" will normally be packaged as an
	    implementation of this interface.
	    Such a parser often takes XML text as input, though it
	    need not. Some parsers need a DOM Document as input,
	    and <?troff .ne 10?>others parse non-XML text and report it as if it
	    were XML, to leverage the SAX event processing model.
	    </p>

	    <p>For more information, refer to
	    <a href="ch03_01.htm">Section 3.1.1, "The XMLReader Interface"</a> in <a href="ch03_01.htm">Chapter 3, "Producing  SAX2 Events"</a>. For quick reference to the standard SAX2 feature and property identifiers, refer to <a href="ch03_03.htm">Section 3.3.2, "XMLReader Feature Flags"</a> and <a href="ch03_03.htm">Section 3.3.1, "XMLReader Properties"</a>, both in <a href="ch03_01.htm">Chapter 3, "Producing  SAX2 Events"</a>.

<a name="INDEX-782" /></a>


</p>

	    <blockquote><pre class="code">public interface XMLReader 
{
    // getters
    public ContentHandler getContentHandler();
    public DTDHandler getDTDHandler();
    public EntityResolver getEntityResolver();
    public ErrorHandler getErrorHandler();
    public boolean getFeature(String uri)
	throws SAXNotRecognizedException, 
	SAXNotSupportedException;
    public Object getProperty(String uri)
	throws SAXNotRecognizedException, 
	SAXNotSupportedException;
    // setters
    public void setContentHandler(ContentHandler contentHandelr);
    public void setDTDHandler(DTDHandler dtdHandler);
    public void setEntityResolver(EntityResolver resolver);
    public void setErrorHandler(ErrorHandler errHandler);
    public void setFeature(String uri, boolean value)
	throws SAXNotRecognizedException, 
	SAXNotSupportedException;
    public void setProperty(String uri, Object value)
	throws SAXNotRecognizedException, 
	SAXNotSupportedException;
    // parsing
    public void parse(InputSource in)
	throws java.io.IOException, SAXException;
    public void parse(String uri)
	throws java.io.IOException, SAXException;
}
	    </pre></blockquote>

	</div>


    </div>

    

    



<hr width="684" align="left" />
<div class="navbar"><table width="684" border="0"><tr><td align="left" valign="top" width="228"><a href="ch06_03.htm"><img alt="Previous" border="0" src="../gifs/txtpreva.gif" /></a></td><td align="center" valign="top" width="228"><a href="index.htm"><img alt="Home" border="0" src="../gifs/txthome.gif" /></a></td><td align="right" valign="top" width="228"><a href="appa_02.htm"><img alt="Next" border="0" src="../gifs/txtnexta.gif" /></a></td></tr><tr><td align="left" valign="top" width="228">6.3. Including Subdocuments</td><td align="center" valign="top" width="228"><a href="index/index.htm"><img alt="Book Index" border="0" src="../gifs/index.gif" /></a></td><td align="right" valign="top" width="228">A.2. The org.xml.sax.helpers Package</td></tr></table></div>
<hr width="684" align="left" />

<img alt="Library Navigation Links" border="0" src="../gifs/navbar.gif" usemap="#library-map" />
<p><p><font size="-1"><a href="copyrght.htm">Copyright &copy; 2002</a> O'Reilly &amp; Associates. All rights reserved.</font></p>

<map name="library-map">
<area shape="rect" coords="0,0,85,93" href="../index.htm"><area shape="rect" coords="85,0,180,98" href="index.htm"><area shape="rect" coords="182,-1,261,100" href="../xmlnut/index.htm"><area shape="rect" coords="263,1,384,96" href="../jxml/index.htm"><area shape="rect" coords="386,1,463,100" href="../jxslt/index.htm"><area shape="rect" coords="466,1,533,112" href="../xslt/index.htm"><area shape="rect" coords="535,-1,610,108" href="../schema/index.htm"><area shape="rect" coords="613,1,696,121" href="../pxml/index.htm">
      </map>

</body></html>