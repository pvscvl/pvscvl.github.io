<html><head><title>Why Choose SAX? (SAX2)</title><link rel="stylesheet" type="text/css" href="../style/style1.css" />

<meta name="DC.Creator" content="David Brownell" /><meta name="DC.Format" content="text/xml" scheme="MIME" /><meta name="DC.Language" content="en-US" /><meta name="DC.Publisher" content="O'Reilly &amp; Associates, Inc." /><meta name="DC.Source" scheme="ISBN" content="0596002378L" /><meta name="DC.Subject.Keyword" content="stuff" /><meta name="DC.Title" content="SAX2" /><meta name="DC.Type" content="Text.Monograph" />

</head><body bgcolor="#ffffff">

<img alt="Book Home" border="0" src="gifs/smbanner.gif" usemap="#banner-map" /><map name="banner-map"><area shape="rect" coords="1,-2,616,66" href="index.htm" alt="SAX2" /><area shape="rect" coords="629,-11,726,25" href="jobjects/fsearch.htm" alt="Search this book" /></map>

<div class="navbar"><table width="684" border="0"><tr><td align="left" valign="top" width="228"><a href="ch01_01.htm"><img alt="Previous" border="0" src="../gifs/txtpreva.gif" /></a></td><td align="center" valign="top" width="228" /><td align="right" valign="top" width="228"><a href="ch01_03.htm"><img alt="Next" border="0" src="../gifs/txtnexta.gif" /></a></td></tr></table></div>



	<h2 class="sect1">1.2. Why Choose SAX?</h2>

	<p>


        SAX gives you the flexibility to approach application design
	with your own trade-offs and goals in mind.
	High-level APIs often make many of those trade-offs for you, but
	not necessarily in ways that are best for your problems.
	In particular, SAX lets you design lightweight, task-oriented XML
	solutions, which can fit into small systems or scale up to large ones.
	Just having such options can be an important reason to choose SAX over
 	generic APIs that work only at a high level. While initial deployment
	 platforms might be richly
	featured, this won't necessarily be true for all the systems
	you need to support, <?troff .ne 10?>or for the ones your customers want you
	to support.
	</p>

	<p>


        Compared to other parser-level APIs, SAX has
	two unique structural features:
	its efficient event-stream processing model
	and its data structure flexibility.
	These give you more control over the results of your parse.
	</p>

	<a name="sax2-CHP-1-SECT-2.1" /><div class="sect2">
	    <h3 class="sect2">1.2.1. Stream-Based Processing </h3>

	    <p>
<a name="INDEX-18" />


            SAX is the API to use when you need to stream-process XML
	    to conserve memory and, in most cases, CPU time.
	    In SAX, handler interfaces call application (or library) code 
	    for each significant chunk of XML
	    information as it's parsed.
	    These chunks include character data, elements, and attributes.
	    Each event passes information to your code, which
	    can save it or ignore it as appropriate.
	    These handlers see document information as a stream of
	    such event calls, in "document order."
	    Applications can process data incrementally, rather than
	    in one big chunk, and they can discard information
	    as soon as it's not needed.
	    </p>
            
	<p>
	
<a name="INDEX-19" />
<a name="INDEX-20" />


        SAX parsers have several key advantages:
	</p> 

	    <ul>

		<li><p>
		SAX parsers can be small and fast because they are minimal.
		SAX provides the most essential XML data, and no more.
		</p><p>
		SAX parsers are well suited for use in resource-constrained 
		environments.
		This includes not just small systems or
		classic embedded ones (where
		cost prevents using of much memory or fast CPUs),
		but also inside servers
		(which may have huge amounts of memory and fast CPUs,
		but need good scaling properties to
		share them with many clients) such as security gateways.
		Good security practice avoids large bodies of code,
		since assurance is so hard to achieve.
		</p></li>
	    
		<li> <p>
		
<a name="INDEX-21" />
<a name="INDEX-22" />


                Because SAX is a streaming API, it promotes pipelined
		processing, where I/O occurs while you use the CPU
		to do work. You will naturally structure applications
		(or at least their SAX components) to use efficient 
		single-pass algorithms and incremental processing.
		</p><p>
		As soon as XML data starts to become available (perhaps over a
		network), SAX parsers start to provide it to applications.
		While processing element or character data, the network
		or the filesystem prefetches the next data.
		Such overlapped processing lowers latencies
		and makes good use of limited CPU cycles.
		With most other APIs, your application won't even see
		data until the whole document has been fetched <?troff .ne 10?>and parsed;
		you can't process documents larger than available memory.
		This causes major trouble when you work with large
		documents, as discussed in the next section.
		</p></li>
	    
		<li> <p>
		
<a name="INDEX-23" />
<a name="INDEX-24" />



                SAX gives you flexible control over how you handle
		errors and faults.
		Fatal errors aren't
		the only kind of reportable fault, and diagnostic information
		is readily accessible.
		</p><p>
		You easily provide application-specific error reports with
		the standard mechanism. It's also easy to terminate parsing
		early: just throw an appropriate exception when you find
		the <tt class="sgmltag-element">&lt;great:widget&gt;</tt> element you need, or when
		some unrecoverable error turns up.
		</p></li>

		<li> <p>
		
<a name="INDEX-25" />
<a name="INDEX-26" />
<a name="INDEX-27" />

                It's easy to define custom SAX event producers.
		</p><p>
		That is, you can use SAX when your inputs aren't literal XML
		text. This is a powerful technique that helps you work with
		data at the level of parsed XML information
		(the XML "Infoset"),
		and postprocess SAX events or 
		late-bind data into XML text format.
		Such early/late-binding
		flexibility is a powerful architectural tool.
		</p></li>
	    
	    </ul>

	    <p>You may be fortunate enough to be able to design the XML
	    representations of your application tasks to facilitate such
	    work-flow streams.
	    When you do this, you may see substantial performance
	    and scalability gains over alternative design approaches.
	    You might even be able to pull the SAX event stream model up
	    into higher-level work flows in your system so that more
	    processing can be stream-based.
	    </p>

	    <p>For example, you could structure your XML as a sequential
	    list of reasonably sized tasks.
	    Several kinds of data import/export problems are well
	    suited to this approach, although you may find you need to be aware
	    of the I/O costs of random access as you transform data
	    to and from interchange formats.
	    </p>

	    </div>

	<a name="sax2-CHP-1-SECT-2.2" /><div class="sect2">
	    <h3 class="sect2">1.2.2. Data Structure Flexibility </h3>

	    <p>

<a name="INDEX-28" />
<a name="INDEX-29" />
<a name="INDEX-30" />
<a name="INDEX-31" />

            In contrast to higher-level APIs, or most design tools,
	    SAX allows you to populate whatever data structures you choose.
	    It lets you use custom data APIs, optimized for your
	    application, or more general-purpose APIs.
	    This flexibility operates at two broad system levels:
	    architecture and design.
	    Suchs flexibility is required to scale applications up 
	    (or down) and to update applications as systems evolve.
	    </p>

	    <p>Application architecture components affect how
	    systems interact with each other and with external systems.
	    SAX doesn't constrain these components,
	    which include data interchange formats and messaging
	    paradigms, because it lets you use XML in any way you
	    (or your systems partners) need.
	    In contrast, settling early on higher-level XML APIs
	    will constrain application architectures in many ways,
	    often affecting XML structures used for interoperability.
	    For example, many SOAP toolkits expect an RPC paradigm
	    using W3C-style XML schemas, and many data-binding approaches
	    demand a particular schema system and API toolset.
	    The hope is that if you accept those system constraints,
	    you win more than they cost. When that doesn't work,
	    perhaps because the constraints don't suit your application,
	    you'll appreciate the flexibility of SAX.
	    </p>

	    <p>The design level affects application internals rather
	    than the broader interfaces, which relate to architecture.
	    Design constraints affect runtime and implementation costs.
	    If you're adding XML support to an existing system,
	    design-level concerns may dominate your planning.
	    SAX lets you use your current optimized data structures or
	    define new ones.
	    Since such design issues will often dominate performance
	    measurements (given reasonable architectures),
	    preserving flexibility can be very important.
	    </p>

	    <p>With SAX, you don't need to use generic
	    (and largely untyped) data structures.
	    You will normally store data directly into specialized data
	    structures as SAX delivers it from its XML representation.
	    This facilitates important architecture-level optimizations.
	    Being able to use custom data structures means you can
	    leverage the strong data-typing facilities in Java and
	    detect many kinds of bugs early, while recovery is possible and cheap. Custom data decisions are the ideal way to work with large documents, for other cases where scale
	    is a major concern, and anywhere that data structure decisions
	    need to be driven by application issues rather than
	    "one size fits all" generic tools.
	    </p>

	    </div>

	<div class="sect2">
	    <h3 class="sect2">1.2.3. Memory Consumption with SAX and DOM</h3>

	    <p>

<a name="INDEX-32" />
<a name="INDEX-33" />

            To illustrate this design impact,
	    we'll pick on DOM as a representative design choice
	    for an API with a generic XML data structure.
	    You'll often have reasons to use both SAX and DOM,
	    even in the same application, so
	    you'll need to know when to use each API.
	    The strength of DOM is that it's a widely understood
	    and available generic model;
	    it can be good for "proof of concept" solutions.
	    However, it has a high price
	    in terms of flexibility and resource consumption.
	    Later, we look at ways to reduce those DOM costs with
	    help from SAX and ways that DOM and SAX representations of
	    XML data can be interconverted.
	    </p>

	    <p>
 
<a name="INDEX-34" />
           
            For documents with a "typical" markup density, many
	    DOM implementations in Java use about 10 bytes of memory
	    to represent each byte of XML text.
	    (Few take less, some take more.)
	    Yes, that midsize three-megabyte document can easily balloon
	    up to 30 megabytes of memory on your server!<a href="#FOOTNOTE-1">[1]</a>
	    When using DOM with large documents, memory shortages are
	    common, both for virtual memory and for space in the Java heap.
	    Shortages are made worse if you then need to convert data from
	    a generic DOM representation into custom structures,
	    because you need an extra copy of the data while
	    you build the more appropriate data structure.
	    This clearly limits application scalability.
	    </p><blockquote class="footnote"><a name="FOOTNOTE-1" /><p>[1]Some applications certainly revolve around large documents. One translation of the Old Testament is over 3 megabytes in size; one dictionary is over 50 megabytes. Dumps of databases can be gigabytes in size.</p></blockquote>

	    <p>On the other hand, with SAX you don't pay for any memory
	    unless you choose to do so. You can ignore most of that three-megabyte document right up
	    front; the API structure makes it natural to capture only
	    significant data (whatever that may be in your application).
	    This reduces memory allocation pressure, as well as
	    overhead from garbage collection.
	    Best, SAX parsers let you use data structures that are
	    appropriate for <em class="emphasis">your</em> application from
	    the very beginning.
	    In fact, they all but require you to do that!
	    </p>

	    </div>

	<div class="sect2">
	    <h3 class="sect2">1.2.4. Other Reasons to Prefer SAX </h3>

	    <p>
<a name="INDEX-35" />

            SAX has always defined its concurrency behaviors, making it safe to use SAX in multithreaded applications. Since DOM does not specify those behaviors, multithreaded applications (such as most web services) accept implementation dependencies if they choose to use DOM.
	    </p>

	    <p>SAX2 provides almost complete support for the XML
	    Infoset, exposing the logical structure of XML data.
	    (See <a href="appb_01.htm">Appendix B, "SAX2 and the XML Infoset"</a>.)
	    This means it's substantially more complete than most other
	    XML APIs, and certainly more complete than any other widely
	    available API.
	    You are unlikely to need important information from an XML
	    document that SAX can't provide. This contrasts with DOM, which
	    doesn't have standard APIs to expose much of this information.
	    SAX is great way to turn a stream
	    of such Infoset data into other kinds of data.
	    </p>

	    <p>At its core, SAX is indeed a very simple API for XML
	    processing; such simplicity is a key virtue.
	    You can write useful XML applications code
	    with only a handful of method calls and still know that
	    the rest of the XML Infoset data is available when you need it.
	    It's not like DOM, in which syntax
	    artifacts that mask the core data model of XML are common.
	    DOM takes a more monolithic approach than SAX.
	    A book that covers DOM as completely <?troff .ne 10?>as this book
	    covers SAX would need to be several times larger
	    even if it didn't cover the latest version (Level 3).
	    </p>

	    <p>On top of that, because SAX makes you actually think
	    about the best way to represent your data, it's more fun to work
	    with than tools that claim to solve those issues for you!
	    (They usually can't.)
	    It's also a great way to learn your way around XML and Java.
	    </p>

	</div>

    

<hr width="684" align="left" />
<div class="navbar"><table width="684" border="0"><tr><td align="left" valign="top" width="228"><a href="ch01_01.htm"><img alt="Previous" border="0" src="../gifs/txtpreva.gif" /></a></td><td align="center" valign="top" width="228"><a href="index.htm"><img alt="Home" border="0" src="../gifs/txthome.gif" /></a></td><td align="right" valign="top" width="228"><a href="ch01_03.htm"><img alt="Next" border="0" src="../gifs/txtnexta.gif" /></a></td></tr><tr><td align="left" valign="top" width="228">1. The Simple API for XML</td><td align="center" valign="top" width="228"><a href="index/index.htm"><img alt="Book Index" border="0" src="../gifs/index.gif" /></a></td><td align="right" valign="top" width="228">1.3. Why Not to Choose SAX? </td></tr></table></div>
<hr width="684" align="left" />

<img alt="Library Navigation Links" border="0" src="../gifs/navbar.gif" usemap="#library-map" />
<p><p><font size="-1"><a href="copyrght.htm">Copyright &copy; 2002</a> O'Reilly &amp; Associates. All rights reserved.</font></p>

<map name="library-map">
<area shape="rect" coords="0,0,85,93" href="../index.htm"><area shape="rect" coords="85,0,180,98" href="index.htm"><area shape="rect" coords="182,-1,261,100" href="../xmlnut/index.htm"><area shape="rect" coords="263,1,384,96" href="../jxml/index.htm"><area shape="rect" coords="386,1,463,100" href="../jxslt/index.htm"><area shape="rect" coords="466,1,533,112" href="../xslt/index.htm"><area shape="rect" coords="535,-1,610,108" href="../schema/index.htm"><area shape="rect" coords="613,1,696,121" href="../pxml/index.htm">
</map>

</body></html>