<html><head><title>Why Not to Choose SAX?  (SAX2)</title><link rel="stylesheet" type="text/css" href="../style/style1.css" />

<meta name="DC.Creator" content="David Brownell" /><meta name="DC.Format" content="text/xml" scheme="MIME" /><meta name="DC.Language" content="en-US" /><meta name="DC.Publisher" content="O'Reilly &amp; Associates, Inc." /><meta name="DC.Source" scheme="ISBN" content="0596002378L" /><meta name="DC.Subject.Keyword" content="stuff" /><meta name="DC.Title" content="SAX2" /><meta name="DC.Type" content="Text.Monograph" />

</head><body bgcolor="#ffffff">

<img alt="Book Home" border="0" src="gifs/smbanner.gif" usemap="#banner-map" /><map name="banner-map"><area shape="rect" coords="1,-2,616,66" href="index.htm" alt="SAX2" /><area shape="rect" coords="629,-11,726,25" href="jobjects/fsearch.htm" alt="Search this book" /></map>

<div class="navbar"><table width="684" border="0"><tr><td align="left" valign="top" width="228"><a href="ch01_02.htm"><img alt="Previous" border="0" src="../gifs/txtpreva.gif" /></a></td><td align="center" valign="top" width="228" /><td align="right" valign="top" width="228"><a href="ch01_04.htm"><img alt="Next" border="0" src="../gifs/txtnexta.gif" /></a></td></tr></table></div>



	<h2 class="sect1">1.3. Why Not to Choose SAX? </h2>

	<p>No API solves problems by itself,
	and SAX avoided the kitchen sink syndrome better than many others.
	So there are times it will be clear SAX isn't the whole answer for
	some particular application-processing stage, even when you have
	the option to choose it.
	It will often still be the right way to get data into or out
	of another processing stage, particularly since many other
	APIs can interface with SAX. Also, building custom
	data import/export tools with SAX is fairly easy.
	</p>

	<p>
<a name="INDEX-36" />
<a name="INDEX-37" />


        Probably the biggest single issue with SAX is that
	by itself it doesn't provide random access
	to XML data.
	Its event stream is "forward-only": you can't go backwards
	or reorder it without your own record of the events.
	Such data structure policy would be handled by application layers
	on top of SAX, and you'll need such layers if you use random
	access models such as XPath.
	Typically, applications use SAX to construct data structures
	that are either customized for their particular random access
	requirements or generic (typically DOM-like).
	You might create <em class="emphasis">Person</em> objects and index
	them by name, perhaps in some sort of hash table or using
	some kind of database as a backing store.
	In some applications it's acceptable to just re-scan
	small to midsize XML documents on demand; it can be inexpensive
	when modern operating systems have already cached the data.
	</p>

	<p>If you're looking for an API that helps you write a
	low-level XML text editor and lets you work with malformed XML
	while it preserves semantically meaningless information,<a href="#FOOTNOTE-2">[2]</a>

	 then SAX isn't what you want.
	Similarly, parsing less than an entire XML document isn't
	standardized by SAX (or by the XML specification).
	Such processing requires an API that works at the level of
	potentially malformed tokens. SAX (and any other application
	programming interface not targeted at text editors)
	makes hiding such details a primary goal.
	SAX works well for "structural" editors, <?troff .ne 10?>which
	prevent creation of malformed XML and hide
	semantically meaningless information.
	</p><blockquote class="footnote"><a name="FOOTNOTE-2" /><p>[2]For example, whitespace outside element content, attribute order, or singly versus doubly quoted strings.</p></blockquote>

	<p>It's important to note that SAX is intentionally limited.
	It's the core of a library of XML support, and that "S" in its
	name really does mean "simple"; complex functionality is for
	layers on top of SAX and is not part of SAX itself.
	Even basic facilities like XML text output (printing)
	are layered over SAX.
	While open source code to handle such functions is often available
	on the Internet, you may still need to find and choose between
	such libraries.
	SAX is somewhat of a "close to the metal" low-level API,
	though it's more flexible than most such APIs.
	
<a name="INDEX-38" />

        </p>

    

<hr width="684" align="left" />
<div class="navbar"><table width="684" border="0"><tr><td align="left" valign="top" width="228"><a href="ch01_02.htm"><img alt="Previous" border="0" src="../gifs/txtpreva.gif" /></a></td><td align="center" valign="top" width="228"><a href="index.htm"><img alt="Home" border="0" src="../gifs/txthome.gif" /></a></td><td align="right" valign="top" width="228"><a href="ch01_04.htm"><img alt="Next" border="0" src="../gifs/txtnexta.gif" /></a></td></tr><tr><td align="left" valign="top" width="228">1.2. Why Choose SAX?</td><td align="center" valign="top" width="228"><a href="index/index.htm"><img alt="Book Index" border="0" src="../gifs/index.gif" /></a></td><td align="right" valign="top" width="228">1.4. A Short History of SAX </td></tr></table></div>
<hr width="684" align="left" />

<img alt="Library Navigation Links" border="0" src="../gifs/navbar.gif" usemap="#library-map" />
<p><p><font size="-1"><a href="copyrght.htm">Copyright &copy; 2002</a> O'Reilly &amp; Associates. All rights reserved.</font></p>

<map name="library-map">
<area shape="rect" coords="0,0,85,93" href="../index.htm"><area shape="rect" coords="85,0,180,98" href="index.htm"><area shape="rect" coords="182,-1,261,100" href="../xmlnut/index.htm"><area shape="rect" coords="263,1,384,96" href="../jxml/index.htm"><area shape="rect" coords="386,1,463,100" href="../jxslt/index.htm"><area shape="rect" coords="466,1,533,112" href="../xslt/index.htm"><area shape="rect" coords="535,-1,610,108" href="../schema/index.htm"><area shape="rect" coords="613,1,696,121" href="../pxml/index.htm">
</map>

</body></html>