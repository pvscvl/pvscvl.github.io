<html><head><title>The org.xml.sax.helpers Package (SAX2)</title><link rel="stylesheet" type="text/css" href="../style/style1.css" />

<meta name="DC.Creator" content="David Brownell" /><meta name="DC.Format" content="text/xml" scheme="MIME" /><meta name="DC.Language" content="en-US" /><meta name="DC.Publisher" content="O'Reilly &amp; Associates, Inc." /><meta name="DC.Source" scheme="ISBN" content="0596002378L" /><meta name="DC.Subject.Keyword" content="stuff" /><meta name="DC.Title" content="SAX2" /><meta name="DC.Type" content="Text.Monograph" />

</head><body bgcolor="#ffffff">

<img alt="Book Home" border="0" src="gifs/smbanner.gif" usemap="#banner-map" /><map name="banner-map"><area shape="rect" coords="1,-2,616,66" href="index.htm" alt="SAX2" /><area shape="rect" coords="629,-11,726,25" href="jobjects/fsearch.htm" alt="Search this book" /></map>

<div class="navbar"><table width="684" border="0"><tr><td align="left" valign="top" width="228"><a href="appa_01.htm"><img alt="Previous" border="0" src="../gifs/txtpreva.gif" /></a></td><td align="center" valign="top" width="228" /><td align="right" valign="top" width="228"><a href="appa_03.htm"><img alt="Next" border="0" src="../gifs/txtnexta.gif" /></a></td></tr></table></div>



	<h2 class="sect1">A.2. The org.xml.sax.helpers Package</h2>

	<p>
<a name="INDEX-783" />
        The <em class="emphasis">org.xml.sax.helpers</em> package holds
	support classes, including vendor-neutral bootstrapping support and
	some support for the original SAX1 APIs.
	These classes are in a sense optional but are provided by
	all widely available implementations.
	They're also required for conformance with Sun's JAXP API.
	</p>

	<a name="sax2-APP-A-SECT-2.1" /><div class="sect2">
	    <h3 class="sect2">A.2.1. The AttributeListImpl Interface</h3>

	    <p>
<a name="INDEX-784" />
        This SAX1 class is not used in SAX2; the
	    <em class="emphasis">AttributesImpl</em> class is used instead.
	    </p>

	    <p>For more information, refer to
	    <a href="ch05_02.htm">Section 5.2, "SAX1 Support "</a> in <a href="ch05_01.htm">Chapter 5, "Other SAX Classes"</a>.
	    </p>

	    <blockquote><pre class="code">public class AttributeListImpl implements AttributeList {
    public AttributeListImpl();
    public AttributeListImpl(AttributeList original);
    // AttributeList (accessors only)
    public int getLength();
    public String getName(int index);
    public String getType(int index);
    public String getValue(int index);
    public String getType(String qName);
    public String getValue(String qName);
    // mutators
    public void setAttributeList(AttributeList original);
    public void addAttribute(String qName, String type, String value);
    public void removeAttribute(String qName);
    public void clear();
}
	    </pre></blockquote>

	</div>

	<a name="sax2-APP-A-SECT-2.2" /><div class="sect2">
	    <h3 class="sect2">A.2.2. The AttributesImpl Class </h3>

	    <p>
<a name="INDEX-785" />
            This class can be a convenient way to snapshot
	    attribute information using the copy constructor.
	    Since the attributes provided by
	    an event producer are only valid during the particular
	    <tt class="literal">ContentHandler.startElement()</tt> call
	    that provides them, applications may need such snapshots.
	    The class also supports construction of arbitrary
	    attribute sets for filtering or event production.
	    </p>

	    <p>For more information, refer to
	    <a href="ch05_01.htm">Section 5.1.1, "The AttributesImpl Class "</a> in <a href="ch05_01.htm">Chapter 5, "Other SAX Classes"</a>.
	    </p>

	    <blockquote><pre class="code">public class AttributesImpl implements Attributes {
    public AttributesImpl();
    public AttributesImpl(Attributes original);
    // Attributes (accessors only)
    public int getLength();
    public String getURI(int index);
    public String getLocalName(int index);
    public String getQName(int index);
    public String getType(int index);
    public String getValue(int index);
    public int getIndex(String uri, String localName);
    public int getIndex(String qName);
    public String getType(String uri, String localName);
    public String getType(String qName);
    public String getValue(String uri, String localName);
    public String getValue(String qName);
    // setters
    public void setLocalName(int index, String localName);
    public void setQName(int index, String qName);
    public void setType(int index, String type);
    public void setURI(int index, String uri);
    public void setValue(int index, String value);
    // mutators
    public void addAttribute(String uri, String localName, 
	String qName,
    		String type, String value);
    public void clear();
    public void removeAttribute(int index);
    public void setAttribute(int index, String, String, 
	String, String, String);
    public void setAttributes(Attributes original);
}
	    </pre></blockquote>

	</div>

	<a name="sax2-APP-A-SECT-2.3" /><div class="sect2">
	    <h3 class="sect2">A.2.3. The DefaultHandler Class </h3>

	    <p>
<a name="INDEX-786" />
            This class provides stub implementations of all
	    the standard SAX2 handlers, including
	    <em class="emphasis">ErrorHandler</em>, and the
	    <em class="emphasis">EntityResolver</em>. Those stub
	    implementations do nothing, except that
	    <tt class="literal">ErrorHandler.fatalError()</tt> throws
	    its argument.
	    Extension handler callbacks are not supported; if you need
	    <em class="emphasis">DeclHandler</em> or
	    <em class="emphasis">LexicalHandler</em> stubs you'll
	    need to provide them yourself (perhaps by subclassing).
	    </p>

	    <p>For more information, refer to
	    <a href="ch02_03.htm">Section 2.3.1, "The DefaultHandler Class"</a> in <a href="ch02_01.htm">Chapter 2, "Introducing SAX2"</a>.
	    </p>

	    <blockquote><pre class="code">public class DefaultHandler
    implements EntityResolver, DTDHandler, ContentHandler, 
	ErrorHandler
{
    public DefaultHandler();
    // ContentHandler
    public void setDocumentLocator(Locator locator);
    public void startDocument() throws SAXException;
    public void endDocument() throws SAXException;
    public void startElement(String uri, String localName,
	    String qName, Attributes)
	throws SAXException;
    public void endElement(String uri, String localName, 
	String qName)
	throws SAXException;
    public void characters(char buf[], int offset, int length)
	throws SAXException;
    public void ignorableWhitespace(char buf[], int offset, 
	int length)
	throws SAXException;
    public void processingInstruction(String target, String data)
	throws SAXException;
    public void startPrefixMapping(String prefix, String uri)
	throws SAXException;
    public void endPrefixMapping(String prefix) throws 
	SAXException;
    public void skippedEntity(String name) throws SAXException;
    // DTDHandler
    public void notationDecl(String notationName,
	    String publicId, String systemId)
	throws SAXException;
    public void unparsedEntityDecl(String entityName,
	    String publicId, String systemId, String 
	notationName)
	throws SAXException;
    // EntityResolver
    public InputSource resolveEntity(String publicId, 
	String publicId);
	throws SAXException;
    // ErrorHandler
    public void error(SAXParseException x) throws SAXException;
    public void fatalError(SAXParseException x) throws 
	SAXException;
    public void warning(SAXParseException x) throws SAXException;
}
	    </pre></blockquote>

	</div>

	<a name="sax2-APP-A-SECT-2.4" /><div class="sect2">
	    <h3 class="sect2">A.2.4. The LocatorImpl Class </h3>

	    <p>
<a name="INDEX-787" />
            This class can provide a convenient way to snapshot
	    locator information. Since the locator provided by
	    an event producer may report different values during each
	    event callback, applications may need such snapshots.
	    </p>

	    <p>For more information, refer to
	    <a href="ch05_01.htm">Section 5.1.2, "The LocatorImpl Class "</a> in <a href="ch05_01.htm">Chapter 5, "Other SAX Classes"</a>.
	    </p>

	    <blockquote><pre class="code">public class LocatorImpl implements Locator {
    public LocatorImpl();
    public LocatorImpl(Locator);
    // Locator
    public String getPublicId();
    public String getSystemId();
    public int getLineNumber();
    public int getColumnNumber();
    // setters
    public void setPublicId(String publicId);
    public void setSystemId(String systemId);
    public void setLineNumber(int line);
    public void setColumnNumber(int column);
}
	    </pre></blockquote>

	</div>

	<a name="sax2-APP-A-SECT-2.5" /><div class="sect2">
	    <h3 class="sect2">A.2.5. The NamespaceSupport Class </h3>

	    <p>
<a name="INDEX-788" />
            This class helps implement stacks of XML namespace
	    context data. It's mostly useful for applications that
	    need to handle element or attribute names within document
	    content (including attributes) or for parser writers.
	    </p>

	    <p>For more information, refer to
	    <a href="ch05_01.htm">Section 5.1.3, "The NamespaceSupport Class "</a> in <a href="ch05_01.htm">Chapter 5, "Other SAX Classes"</a>.
	    </p>

	    <blockquote><pre class="code">public class NamespaceSupport {
    // fixed uri for the "xml" prefix 
    public static final String XMLNS;
    public NamespaceSupport();
    // manipulate binding stack
    public void reset();
    public void pushContext();
    public void popContext();
    public boolean declarePrefix(String prefix, String uri);
    public String [] processName(String qName, String parts[],
    	boolean isAttribute);
    // access currently visible prefix bindings
    public String getURI(String prefix);
    public java.util.Enumeration getPrefixes();
    public String getPrefix(String uri);
    public java.util.Enumeration getPrefixes(String uri);
    public java.util.Enumeration getDeclaredPrefixes();
}
	    </pre></blockquote>

	</div>

	<a name="sax2-APP-A-SECT-2.6" /><div class="sect2">
	    <h3 class="sect2">A.2.6. The ParserAdapter Class</h3>

	    <p>
<a name="INDEX-789" />
            This class is used to convert SAX1
	    <em class="emphasis">Parser</em> objects into
	    <em class="emphasis">XMLReader</em> objects by converting SAX1
	    event callbacks into SAX2 callbacks.
	    It uses the <em class="emphasis">NamespaceSupport</em> class
	    internally to track namespaces so it can report them for
	    elements and attributes, as required by SAX2. If you
	    need to make a SAX1 parser report handling of validation
	    or external entities though feature flags,
	    you can subclass <em class="emphasis">ParserAdapter</em> and override the appropriate methods.
	    </p>

	    <p>For more information, refer to
	    <a href="ch05_02.htm">Section 5.2, "SAX1 Support "</a> in <a href="ch05_01.htm">Chapter 5, "Other SAX Classes"</a>.
	    </p>

	    <blockquote><pre class="code">public class ParserAdapter implements XMLReader, 
	DocumentHandler {
    public helpers.ParserAdapter() throws SAXException;
    public helpers.ParserAdapter(Parser sax1);
    // XMLReader getters
    public boolean getFeature(String uri)
	throws SAXNotRecognizedException, 
	SAXNotSupportedException;
    public ContentHandler getContentHandler();
    public DTDHandler getDTDHandler();
    public EntityResolver getEntityResolver();
    public ErrorHandler getErrorHandler();
    public Object getProperty(String uri)
	throws SAXNotRecognizedException, 
	SAXNotSupportedException;
    // XMLReader setters
    public void setContentHandler(ContentHandler contentHandler);
    public void setDTDHandler(DTDHandler dtdHandler);
    public void setEntityResolver(EntityResolver resolver);
    public void setErrorHandler(ErrorHandler errHandler);
    public void setFeature(String uri, boolean value)
	throws SAXNotRecognizedException, 
	SAXNotSupportedException;
    public void setProperty(String uri, Object value)
	throws SAXNotRecognizedException, 
	SAXNotSupportedException;
    // XMLReader parsing
    public void parse(String uri) throws java.io.IOException, 
	SAXException;
    public void parse(InputSource in) throws java.io.IOException, 
	SAXException;
    // DocumentHandler (internals -- don't use)
    public void setDocumentLocator(Locator locator);
    public void startDocument() throws SAXException;
    public void endDocument() throws SAXException;
    public void startElement(String qName, AttributeList 
	attributes)
	throws SAXException;
    public void endElement(String qName) throws SAXException;
    public void characters(char buf[], int offset, int length)
	throws SAXException;
    public void ignorableWhitespace(char buf[], int offset, 
	int length)
	throws SAXException;
    public void processingInstruction(String target, 
	String data)
	throws SAXException;
}
	    </pre></blockquote>

	</div>

	<a name="sax2-APP-A-SECT-2.7" /><div class="sect2">
	    <h3 class="sect2">A.2.7. The ParserFactory Class </h3>

	    <p>
<a name="INDEX-790" />
            This SAX1 interface is not used in SAX2;
	    the <em class="emphasis">XMLReaderFactory</em> is used instead.
	    The <em class="emphasis">org.xml.sax.parser</em> system property
	    was used to configure the default SAX1 parser.
	    </p>

	    <p>For more information, refer to
	    <a href="ch05_02.htm">Section 5.2, "SAX1 Support "</a> in <a href="ch05_01.htm">Chapter 5, "Other SAX Classes"</a>.
	    </p>

	    <blockquote><pre class="code">public class ParserFactory {
    public static Parser makeParser()
	throws ClassNotFoundException, IllegalAccessException,
	    InstantiationException, NullPointerException, 
	ClassCastException;
    public static Parser makeParser(String classname)
	throws ClassNotFoundException, IllegalAccessException,
	    InstantiationException, ClassCastException;
}
	    </pre></blockquote>

	</div>


	<a name="sax2-APP-A-SECT-2.8" /><div class="sect2">
	    <h3 class="sect2">A.2.8. The XMLFilterImpl Class </h3>

	    <p>
<a name="INDEX-791" />
            This class implements all the standard SAX2 events
	    received from its parent <em class="emphasis">XMLReader</em>
	    by passing them on to the handlers (or EntityResolver)
	    registered with it.
	    It only supports filtering core events, because it ignores
	    the two extension handlers for declaration and lexical
	    events.
	    </p>

	    <p>This means you can use it in two modes.
	    First, it can be a base class for simple consumer pipelines,
	    unless you need information that's provided using extension
	    handlers.
	    Second, you can package a filter with a parser,
	    so it can produce events like an
	    <em class="emphasis">XMLReader</em> that just happens to
	    do a bit of extra work (such as cleaning up input data).
	    </p>

	    <p>For more information, refer to
	    <a href="ch04_05.htm">Section 4.5.1, "The XMLFilterImpl Class "</a> in <a href="ch04_01.htm">Chapter 4, "Consuming SAX2 Events"</a>.
	    </p>

	    <blockquote><pre class="code">public class XMLFilterImpl
    implements XMLFilter, EntityResolver, DTDHandler,
	ContentHandler, ErrorHandler
{
    public XMLFilterImpl();
    public XMLFilterImpl(XMLReader parent);
    public void setParent(XMLReader parent);
    // EntityResolver
    public InputSource resolveEntity(String publicId, 
	String publicId);
	throws SAXException;
    // DTDHandler
    public void notationDecl(String notationName,
	    String publicId, String systemId)
	throws SAXException;
    public void unparsedEntityDecl(String entityName,
	    String publicId, String systemId, 
	String notationName)
	throws SAXException;
    // ContentHandler
    public void setDocumentLocator(Locator locator);
    public void startDocument() throws SAXException;
    public void endDocument() throws SAXException;
    public void startElement(String uri, String localName, 
	<?troff .ne 10?>String qName,
	    Attributes attributes)
	throws SAXException;
    public void endElement(String uri, String localName, 
	String qName)
	throws SAXException;
    public void characters(char buf[], int offset, int length)
	throws SAXException;
    public void ignorableWhitespace(char buf[], int offset, 
	int length)
	throws SAXException;
    public void processingInstruction(String target, String data)
	throws SAXException;
    public void startPrefixMapping(String prefix, String uri)
	throws SAXException;
    public void endPrefixMapping(String prefix) throws 
	SAXException;
    public void skippedEntity(String name) throws SAXException;
    // ErrorHandler
    public void error(SAXParseException x) throws SAXException;
    public void fatalError(SAXParseException x) throws 
	SAXException;
    public void warning(SAXParseException x) throws SAXException;
    // XMLFilter
    public XMLReader getParent();
    // XMLReader
    public ContentHandler getContentHandler();
    public DTDHandler getDTDHandler();
    public EntityResolver getEntityResolver();
    public ErrorHandler getErrorHandler();
    public boolean getFeature(String uri)
	throws SAXNotRecognizedException, 
	SAXNotSupportedException;
    public Object getProperty(String uri)
	throws SAXNotRecognizedException, 
	SAXNotSupportedException;
    public void setContentHandler(ContentHandler contentHandler);
    public void setDTDHandler(DTDHandler dtdHandler);
    public void setEntityResolver(EntityResolver resolver);
    public void setErrorHandler(ErrorHandler errHandler);
    public void setFeature(String uri, boolean value)
	throws SAXNotRecognizedException, 
	SAXNotSupportedException;
    public void setProperty(String uri, Object value)
	throws SAXNotRecognizedException, 
	SAXNotSupportedException;
    public void parse(InputSource in)
	throws java.io.IOException, SAXException;
    public void parse(String uri)
	throws java.io.IOException, SAXException;
}
	    </pre></blockquote>

	</div>

	<a name="sax2-APP-A-SECT-2.9" /><div class="sect2">
	    <h3 class="sect2">A.2.9. The XMLReaderAdapter Class</h3>

	    <p>
<a name="INDEX-792" />
            This class is used to convert SAX2
	    <em class="emphasis">XMLReader</em> objects into
	    <em class="emphasis">Parser</em> objects by converting SAX2
	    event callbacks into SAX1 callbacks.
	    </p>

	    <p>For more information, refer to
	    <a href="ch05_02.htm">Section 5.2, "SAX1 Support "</a> in <a href="ch05_01.htm">Chapter 5, "Other SAX Classes"</a>.
	    </p>

	    <blockquote><pre class="code">public class XMLReaderAdapter implements Parser, 
	ContentHandler {
    public XMLReaderAdapter() throws SAXException;
    public XMLReaderAdapter(XMLReader reader);
    // Parser
    public void setLocale(java.util.Locale locale) throws 
	SAXException;
    public void setEntityResolver(EntityResolver resolver);
    public void setDTDHandler(DTDHandler dtdHandler);
    public void setDocumentHandler(DocumentHandler docHandler);
    public void setErrorHandler(ErrorHandler errHandler);
    public void parse(String uri) throws java.io.IOException, 
	SAXException;
    public void parse(InputSource in) throws java.io.IOException, 
	SAXException;
    // ContentHandler (internals -- don't use)
    public void setDocumentLocator(Locator locator);
    public void startDocument() throws SAXException;
    public void endDocument() throws SAXException;
    public void startElement(String uri, String localName, 
	String qName,
	    Attributes attributes)
	throws SAXException;
    public void endElement(String uri, String localName, 
	String qName)
	throws SAXException;
    public void characters(char buf[], int offset, int length)
	throws SAXException;
    public void ignorableWhitespace(char buf[], int offset, 
	int length)
	throws SAXException;
    public void processingInstruction(String target, 
	String data)
	throws SAXException;
    public void startPrefixMapping(String prefix, String uri);
    public void endPrefixMapping(String prefix);
    public void skippedEntity(String name) throws SAXException;
}
	    </pre></blockquote>

	</div>

	<a name="sax2-APP-A-SECT-2.10" /><div class="sect2">
	    <h3 class="sect2">A.2.10. The XMLReaderFactory Class </h3>

	    <p>
<a name="INDEX-793" />
This factory is the parser-independent bootstrapping
	    API for SAX2. The reference implementation uses the
	    <em class="emphasis">org.xml.sax.driver</em> system property
	    (or <em class="filename">META-INF/services/org.xml.sax.driver</em>
	    resource in the class path)
	    to determine the package-qualified name of the environment's
	    default implementation for the no-parameters call.
	    Most implementations maintain that behavior,
	    but some resource-constrained environments can use simpler
	    policies with less configurability.
	    </p>

	    <p>For more information, refer to
	    <a href="ch03_02.htm">Section 3.2.1, "The XMLReaderFactory Class"</a> in <a href="ch03_01.htm">Chapter 3, "Producing  SAX2 Events"</a>.
	    
<a name="INDEX-794" />


</p>

	    <blockquote><pre class="code">public final class XMLReaderFactory {
    public static XMLReader createXMLReader() throws 
	SAXException;
    public static XMLReader createXMLReader(String classname)
	throws SAXException;
}
	    </pre></blockquote>

	</div>

    

<hr width="684" align="left" />
<div class="navbar"><table width="684" border="0"><tr><td align="left" valign="top" width="228"><a href="appa_01.htm"><img alt="Previous" border="0" src="../gifs/txtpreva.gif" /></a></td><td align="center" valign="top" width="228"><a href="index.htm"><img alt="Home" border="0" src="../gifs/txthome.gif" /></a></td><td align="right" valign="top" width="228"><a href="appa_03.htm"><img alt="Next" border="0" src="../gifs/txtnexta.gif" /></a></td></tr><tr><td align="left" valign="top" width="228">A. SAX2 API Summary</td><td align="center" valign="top" width="228"><a href="index/index.htm"><img alt="Book Index" border="0" src="../gifs/index.gif" /></a></td><td align="right" valign="top" width="228">A.3. The org.xml.sax.ext Package</td></tr></table></div>
<hr width="684" align="left" />

<img alt="Library Navigation Links" border="0" src="../gifs/navbar.gif" usemap="#library-map" />
<p><p><font size="-1"><a href="copyrght.htm">Copyright &copy; 2002</a> O'Reilly &amp; Associates. All rights reserved.</font></p>

<map name="library-map">
<area shape="rect" coords="0,0,85,93" href="../index.htm"><area shape="rect" coords="85,0,180,98" href="index.htm"><area shape="rect" coords="182,-1,261,100" href="../xmlnut/index.htm"><area shape="rect" coords="263,1,384,96" href="../jxml/index.htm"><area shape="rect" coords="386,1,463,100" href="../jxslt/index.htm"><area shape="rect" coords="466,1,533,112" href="../xslt/index.htm"><area shape="rect" coords="535,-1,610,108" href="../schema/index.htm"><area shape="rect" coords="613,1,696,121" href="../pxml/index.htm">
</map>

</body></html>