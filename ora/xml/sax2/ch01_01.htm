<html><head><title>The Simple API for XML (SAX2)</title><link rel="stylesheet" type="text/css" href="../style/style1.css" />

<meta name="DC.Creator" content="David Brownell" /><meta name="DC.Format" content="text/xml" scheme="MIME" /><meta name="DC.Language" content="en-US" /><meta name="DC.Publisher" content="O'Reilly &amp; Associates, Inc." /><meta name="DC.Source" scheme="ISBN" content="0596002378L" /><meta name="DC.Subject.Keyword" content="stuff" /><meta name="DC.Title" content="SAX2" /><meta name="DC.Type" content="Text.Monograph" />

</head><body bgcolor="#ffffff">

<img alt="Book Home" border="0" src="gifs/smbanner.gif" usemap="#banner-map" /><map name="banner-map"><area shape="rect" coords="1,-2,616,66" href="index.htm" alt="SAX2" /><area shape="rect" coords="629,-11,726,25" href="jobjects/fsearch.htm" alt="Search this book" /></map>

<div class="navbar"><table width="684" border="0"><tr><td align="left" valign="top" width="228"><a href="ch00_05.htm"><img alt="Previous" border="0" src="../gifs/txtpreva.gif" /></a></td><td align="center" valign="top" width="228" /><td align="right" valign="top" width="228"><a href="ch01_02.htm"><img alt="Next" border="0" src="../gifs/txtnexta.gif" /></a></td></tr></table></div>



    <h1 class="chapter">Chapter 1. The Simple API for XML</h1>
<div class="htmltoc"><h4 class="tochead">Contents:</h4>
  <p> <a href="#sax2-CHP-1-SECT-1">Types of XML APIs</a><br />
<a href="ch01_02.htm">Why Choose SAX?</a><br />
<a href="ch01_03.htm">Why Not to Choose SAX? </a><br />
<a href="ch01_04.htm">A Short History of SAX </a><br />
<a href="ch01_05.htm">Packages in the SAX2 API</a><br />
<a href="ch01_06.htm">Some Popular SAX2 Parser Distributions </a><br />
<a href="ch01_07.htm">Installing a SAX2 Parser</a><br />
<a href="ch01_08.htm">What XML Are We Talking About? </a><br /></p></div>

    

	<p><?troff .sp -.3?>
<a name="INDEX-1" /></a>
<a name="INDEX-2" /></a>
<a name="INDEX-3" /></a>
<a name="INDEX-4" /></a>
<a name="INDEX-5" /></a>
<a name="INDEX-6" /></a>
<a name="INDEX-7" /></a>




        When XML started, Java was best known as a fun new language
	that made developing programs for the World Wide Web easy.
	XML was intended to be the data foundation for the next generation
	of web infrastructure tools,
	and it clearly needed the same kind of support that Java offered.
	The Java programming environment included ways to fetch data
	over the Web with URLs, which was a novel notion at that.
	It even had support for Unicode, so working
	with languages used anywhere on the Web would be easy.
	Since both those capabilities were important for working with XML,
	there was already a very active community of XML developers using 
	Java when
	the XML 1.0 Recommendation was finalized in early 1998.
	More XML parsers were available at that time for Java than
	for the more widely adopted C programming language!
	</p>

	<p><?troff .sp -.3?>Those parsers quickly came to share one feature: applications
	weren't restricted to some particular product's API.
	The <em class="emphasis">Simple API for XML</em>, SAX, was well
	under way; it was the first API usable with all the
	popular Java parsers.
	SAX helped make Java a premiere language for developing
	XML-based applications.
	</p>

	<p><?troff .sp -.3?>Since then the adoption of XML has exploded, as has the use
	of Java in web-oriented (and other) applications.
	Today's Java programmer has an embarrassingly large selection of
	XML-related APIs to choose from,
	and SAX has retained its role as a premier XML
	API. In this chapter we look at why this is true, and
	learn more about where SAX came from and its
	current state.
	</p>



    

    <div class="sect1"><a name="sax2-CHP-1-SECT-1" /></a>
	<h2 class="sect1">1.1. Types of XML APIs</h2>

	<p>

<a name="INDEX-8" /></a>
<a name="INDEX-9" /></a>



        An <em class="emphasis">Application Programming Interface</em>
	(API) is a set of interfaces and classes used
	to expose particular functionality to a variety of applications.
	Some APIs are specific to particular products.
	Better Java APIs, like SAX, use the <tt class="literal">interface</tt>
	facility to work with multiple products:
	they are defined so that multiple implementations can coexist.
	Such implementations behave the same except for differences
	allowed by the API. For example, one might be faster, while
	another might leverage private interfaces to some subsystem.
	(In that case an application could use the fast implementation
	most of the time and the slower one only when those added
	features are needed.)
	APIs differ in how they expose functionality, which
	affects how well applications work.
	</p>

	<p>

<a name="INDEX-10" /></a>
<a name="INDEX-11" /></a>


        For the purposes of this book, there are two kinds
	of APIs to XML. We'll call one a "parser API" and
	the other a "high-level API."
	<em class="emphasis">Parser-level APIs</em> model documents in
	terms of XML notions
	such as elements, attributes, and character data, and
	hide all the details of actually turning
	XML text into information that applications can use.
	<em class="emphasis">High-level APIs</em> generally focus on
	non-XML notions, usually to make XML itself seem
	only an implementation artifact that might be
	easily replaced by other
	data interchange technology, or more rarely, by another document technology.
	This spectrum is not as wide as you might expect.
	Parser-level APIs are well-suited for working with
	XML-centric applications, higher-level APIs try to focus
	on particular visions of the data being encoded with XML, and some 
	APIs "hop" between levels.
	</p>

	<p>SAX is a parser-level API that is rather unique in flavor
	because it leaves all data structure choices up to higher levels.
	This feature helps scale XML applications, since it lets SAX be an
	unobtrusive and extremely effective building block.
	SAX models documents in terms of a stream of
	event callbacks; this has been called an "active" API.
	The events are more structured than the stream of mouse
	and keyboard events you may know from AWT or Swing.
	Events are sent to application handlers for basic XML content
	(such as elements and characters) in exactly the order they're
	found in the document, as shown in
	<a href="ch01_01.htm">Figure 1-1</a>.
	That's the same order in which you'd traverse a tree
	model of that markup: you'd start an element,
	look at its children, and then end the element.
	</p>

	<a name="sax2-CHP-1-FIG-1" /></a><div class="figure"><img height="146" alt="Figure 1-1" src="figs/sax_0101.gif" width="299" /></div><h4 class="objtitle">Figure 1-1. A streaming parser API</h4>

	<p>

<a name="INDEX-12" /></a>
<a name="INDEX-13" /></a>

        Most other parser-level APIs provide a generic,
	object tree data structure mirroring the parse tree;
	these have been called "passive" APIs.
	<a href="ch01_01.htm">Figure 1-2</a> shows some XML text,
	and its transformation to such a data structure.
	</p>

	<a name="sax2-CHP-1-FIG-2" /></a><div class="figure"><img height="70" alt="Figure 1-2" src="figs/sax_0102.gif" width="339" /></div><h4 class="objtitle">Figure 1-2. An object tree parser API</h4>

	<p>

<a name="INDEX-14" /></a>
<a name="INDEX-15" /></a>
<a name="INDEX-16" /></a>
<a name="INDEX-17" /></a>

        Examples of such generic data structures include W3C's DOM
	and more Java-friendly variants such as DOM4J and jDOM.
	Such generic tree structures are usually built with the
	output of an underlying SAX parser, and so are slightly
	higher level than SAX.
	However, these generic structures place significant
	constraints on application structure and scalability.
	A popular alternative approach involves building custom data
	structures from that same SAX output, instead of generic ones, larger than some fraction of available virtual memory. Because the data structures are custom built, they tend to be faster and more task-appropriate than structures built by generic APIs.</p>

	</div>

    

    

    

    

    

    

    



<hr width="684" align="left" />
<div class="navbar"><table width="684" border="0"><tr><td align="left" valign="top" width="228"><a href="ch00_05.htm"><img alt="Previous" border="0" src="../gifs/txtpreva.gif" /></a></td><td align="center" valign="top" width="228"><a href="index.htm"><img alt="Home" border="0" src="../gifs/txthome.gif" /></a></td><td align="right" valign="top" width="228"><a href="ch01_02.htm"><img alt="Next" border="0" src="../gifs/txtnexta.gif" /></a></td></tr><tr><td align="left" valign="top" width="228">0.5. Acknowledgments </td><td align="center" valign="top" width="228"><a href="index/index.htm"><img alt="Book Index" border="0" src="../gifs/index.gif" /></a></td><td align="right" valign="top" width="228">1.2. Why Choose SAX?</td></tr></table></div>
<hr width="684" align="left" />

<img alt="Library Navigation Links" border="0" src="../gifs/navbar.gif" usemap="#library-map" />
<p><p><font size="-1"><a href="copyrght.htm">Copyright &copy; 2002</a> O'Reilly &amp; Associates. All rights reserved.</font></p>

<map name="library-map">
<area shape="rect" coords="0,0,85,93" href="../index.htm"><area shape="rect" coords="85,0,180,98" href="index.htm"><area shape="rect" coords="182,-1,261,100" href="../xmlnut/index.htm"><area shape="rect" coords="263,1,384,96" href="../jxml/index.htm"><area shape="rect" coords="386,1,463,100" href="../jxslt/index.htm"><area shape="rect" coords="466,1,533,112" href="../xslt/index.htm"><area shape="rect" coords="535,-1,610,108" href="../schema/index.htm"><area shape="rect" coords="613,1,696,121" href="../pxml/index.htm">
      </map>

</body></html>