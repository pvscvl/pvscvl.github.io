<html><head><title>What XML Are We Talking About?  (SAX2)</title><link rel="stylesheet" type="text/css" href="../style/style1.css" />

<meta name="DC.Creator" content="David Brownell" /><meta name="DC.Format" content="text/xml" scheme="MIME" /><meta name="DC.Language" content="en-US" /><meta name="DC.Publisher" content="O'Reilly &amp; Associates, Inc." /><meta name="DC.Source" scheme="ISBN" content="0596002378L" /><meta name="DC.Subject.Keyword" content="stuff" /><meta name="DC.Title" content="SAX2" /><meta name="DC.Type" content="Text.Monograph" />

</head><body bgcolor="#ffffff">

<img alt="Book Home" border="0" src="gifs/smbanner.gif" usemap="#banner-map" /><map name="banner-map"><area shape="rect" coords="1,-2,616,66" href="index.htm" alt="SAX2" /><area shape="rect" coords="629,-11,726,25" href="jobjects/fsearch.htm" alt="Search this book" /></map>

<div class="navbar"><table width="684" border="0"><tr><td align="left" valign="top" width="228"><a href="ch01_07.htm"><img alt="Previous" border="0" src="../gifs/txtpreva.gif" /></a></td><td align="center" valign="top" width="228" /><td align="right" valign="top" width="228"><a href="ch02_01.htm"><img alt="Next" border="0" src="../gifs/txtnexta.gif" /></a></td></tr></table></div>



	<h2 class="sect1">1.8. What XML Are We Talking About? </h2>

	<p>
<a name="INDEX-117" />


        Over the past years, there has been an explosive growth
	in the number of XML-related standards. Talking about XML has 
	become confusing, because those three letters can mean so many different
	things. Some people actually mean what I've called
	"Greater XML." Think of it this way:
	Boston is significant city, but people who don't live there may
	often name Boston to refer to other nearby towns (Arlington, 
	Cambridge, and so on). What they're really talking about is the
	"Greater Boston Metropolitan Area," or sometimes even just
	"Eastern Massachusetts."
	</p>
	
	<p>In much the same way, many people now talk about "XML"
	when they really mean one of dozens of related
	technologies built around the nucleus of XML. Some of these
	may even be part of the original XML vision as "SGML for the
	Web." Using XML to develop documents using a DTD like DocBook
	(<a href="../../../../../../www.docbook.org/">http://www.docbook.org</a>)
	is clearly part of that original open systems vision.
	However, it's also been trendy to market "new and improved!"
	software as based on XML. Such ambiguities can be confusing and can even implicitly promote vendor lock-in, rather than liberate customer data from vendor control. The simplicity at the core of XML isn't friendly to lock-in strategies, but complex application layers on top of XML can certainly cause closed systems.
	</p>

	<p>So when someone says that SAX is a great API for
	XML processing, exactly what part of Greater XML does that mean?
	Briefly, parts built with the "core" <?troff .ne 10?>XML specifications.
	The following lists shows the parts that this book uses in most of its examples.
	</p>

	<dl>
	    <dt><b>
		    <em class="emphasis">XML 1.0 (Second Edition)</em></b></dt>
		<dt><b>
<a href="../../../../../../www.w3.org/TR/REC-xml">http://www.w3.org/TR/REC-xml</a>
		</b></dt>

		<dd><p>This text document format is the core of XML.
		SAX2 parsers work with this format and turn it into a 
		stream of
		events that present the XML Infoset.
		However, as we'll see, SAX can
		be quite useful without even parsing XML text.
		(The second edition incorporates a variety of bug fixes
		and a few functional changes, which were previously
		published as a separate list of errata.)
		</p>
		
		<p>

<a name="INDEX-118" />
<a name="INDEX-119" />



                XML includes <em class="emphasis">Document Type
		Declarations</em>,
		or DTDs. These provide several processing facilities, most
		of which you can rely on even when you don't use a
		validating parser. All XML parsers must support DTDs;
		they're what "schema" technologies attempt to improve on.
		</p>
		
		<p>Unicode support has been part of XML from the
		earliest days.
		Java programmers may tend to overlook the significance of
		that fact, since it's always been part of Java too.
		But it's actually a big deal that XML moves web
		technologies firmly away from ASCII toward Unicode,
		in all programming environments (not just Java) -- not
		everyone needs to be a native English speaker to make
		best use of Internet technologies.
		XML has even been called a "virus for Unicode."
		</p></dd>

	    <dt><b>
		    <em class="emphasis">XML Infoset</em></b></dt>
		<dt><b>
<a href="../../../../../../www.w3.org/TR/xml-infoset/">http://www.w3.org/TR/xml-infoset/</a>
		</b></dt>

		<dd><p>

<a name="INDEX-120" />
<a name="INDEX-121" />
<a name="INDEX-122" />
<a name="INDEX-123" />


                The Infoset is best explained
		as an abstract model for what XML represents:
		information like elements, attributes, and character data.
		The Infoset exposes XML structure, not meaningful data. Applications transform Infoset data into forms that are suited to their particular tasks, normally behind a veil of application objects, unless they manipulate the text like a text editor.
		</p>
		
		<p>The SAX2 event APIs present Infoset-level data;
		the lower-level alternative is to work directly with
		text.
		(See <a href="appb_01.htm">Appendix B, "SAX2 and the XML Infoset"</a> for details about
		Infoset support in SAX2.)
		Other XML infrastructure, such as
		<em class="emphasis">XInclude</em>, generally transforms
		or augments Infoset data.
		Higher-level APIs generally hide such XML structures.

		</p></dd>

	    <dt><b>
		    <em class="emphasis">XML Namespaces</em></b></dt>
		<dt><b>
<a href="../../../../../../www.w3.org/TR/REC-xml-names/">http://www.w3.org/TR/REC-xml-names/</a>
		</b></dt>

		<dd><p>
<a name="INDEX-124" />
<a name="INDEX-125" />


                Namespaces are an optional convention
		for XML 1.0 documents.
		Namespaces distinguish elements and attributes
		so that names can 
		be reused when necessary. For example, in document 
		markup a
		<tt class="sgmltag-element">&lt;table&gt;</tt> probably refers to a tabular
		presentation of data, but in a furniture catalog it might
		also refer to something rather different.
		XML namespaces distinguish those cases with name prefixes;
		unlike "straight XML" with DTDs, those prefixes are
		expected to change in different contexts
		(such as different parts of that furniture catalog).
		This makes combining namespaces and DTDs complicated.
		</p>
		
		<p>One of the most visible differences between SAX1
		and SAX2 is that SAX2 has integrated support for XML
		namespaces to promote their widespread adoption.

		</p></dd>

	</dl>

	<p>
<a name="INDEX-126" />
<a name="INDEX-127" />
<a name="INDEX-128" />


        Over time, some other simple layers (and conventions)
	may become appropriate to view as part of the core of XML.
	The XML Base specification
(<a href="../../../../../../www.w3.org/TR/xml-base/">http://www.w3.org/TR/xml-base/</a>)
	might be an example of such a facility; it explains how to
	use an <tt class="literal">xml:base</tt> attribute to augment
	normal processing of relative URIs found in text.<a href="#FOOTNOTE-8">[8]</a>
	Various internationalization rules and policies are also
	likely to fit into that core.
	One example is W3C work on the Character Model for the World Wide Web
	(<a href="../../../../../../www.w3.org/TR/charmod/">http://www.w3.org/TR/charmod/</a>),
	which promotes uniform handling of sequences used to
	represent some non-ASCII characters.
	Another is currently called XML Blueberry,
	which will modify XML 1.0 to allow use of new Unicode characters
	in element and attribute names. 
	Those characters support languages not previously
	supported (before Unicode 3.1) and also
	improve support for languages such as Japanese.
	</p><blockquote class="footnote"><a name="FOOTNOTE-8" /><p>[8]In fact, since this list includes the XML Infoset in the core, documents with the <tt class="literal">xml:base</tt> attribute implicitly need XML base in their core view of XML to augment normal interpretation of URIs in document content. <a href="ch05_01.htm">Example 5-1</a> shows one way to implement such processing in SAX.</p></blockquote>

	<p>Many of the increasingly substantial layers over XML, such as
	schemas (there are many schema approaches, with one from W3C),
	schema APIs and tools (which may focus on non-XML data models,
	distant from "downtown XML"),
	Remote Procedure Calls ("RPCs"; again, many approaches
	including one from W3C),
	XPath (and its outgrowths),
	and XSLT
	are prime examples of technologies that deserve to be viewed
	as technology choices in their own right.
	They are other cities in the
	metropolis of Greater XML, satellites of the original village
	that leverage the original civic infrastructure.
	Some of those layers may even reflect different fundamental
	goals and requirements from those that originally drove the 
	creation and adoption of XML.
	That doesn't mean that you won't put SAX interfaces on them
	(or at least SAX-friendly ones), but because they are data
	layers over the core of XML, they may involve API layers too.
	</p>



	<p>If you look at Java implementations of other technologies in
	Greater XML, you'll probably find SAX not far from the surface.
	This book identifies a number of such SAX-based tools and
	shows SAX events used as a framework to efficiently
	integrate these different technologies.
        <a name="INDEX-129" />
	<a name="INDEX-130" />
<a name="INDEX-131" />
     



</p>
	
    

<hr width="684" align="left" />
<div class="navbar"><table width="684" border="0"><tr><td align="left" valign="top" width="228"><a href="ch01_07.htm"><img alt="Previous" border="0" src="../gifs/txtpreva.gif" /></a></td><td align="center" valign="top" width="228"><a href="index.htm"><img alt="Home" border="0" src="../gifs/txthome.gif" /></a></td><td align="right" valign="top" width="228"><a href="ch02_01.htm"><img alt="Next" border="0" src="../gifs/txtnexta.gif" /></a></td></tr><tr><td align="left" valign="top" width="228">1.7. Installing a SAX2 Parser</td><td align="center" valign="top" width="228"><a href="index/index.htm"><img alt="Book Index" border="0" src="../gifs/index.gif" /></a></td><td align="right" valign="top" width="228">2. Introducing SAX2</td></tr></table></div>
<hr width="684" align="left" />

<img alt="Library Navigation Links" border="0" src="../gifs/navbar.gif" usemap="#library-map" />
<p><p><font size="-1"><a href="copyrght.htm">Copyright &copy; 2002</a> O'Reilly &amp; Associates. All rights reserved.</font></p>

<map name="library-map">
<area shape="rect" coords="0,0,85,93" href="../index.htm"><area shape="rect" coords="85,0,180,98" href="index.htm"><area shape="rect" coords="182,-1,261,100" href="../xmlnut/index.htm"><area shape="rect" coords="263,1,384,96" href="../jxml/index.htm"><area shape="rect" coords="386,1,463,100" href="../jxslt/index.htm"><area shape="rect" coords="466,1,533,112" href="../xslt/index.htm"><area shape="rect" coords="535,-1,610,108" href="../schema/index.htm"><area shape="rect" coords="613,1,696,121" href="../pxml/index.htm">
</map>

</body></html>