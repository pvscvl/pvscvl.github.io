<html><head><title>Getting Started (XSLT)</title><link rel="stylesheet" type="text/css" href="../style/style1.css" />

<meta name="DC.Creator" content="Doug Tidwell" /><meta name="DC.Format" content="text/xml" scheme="MIME" /><meta name="DC.Language" content="en-US" /><meta name="DC.Publisher" content="O'Reilly &amp; Associates, Inc." /><meta name="DC.Source" scheme="ISBN" content="0596000537L" /><meta name="DC.Subject.Keyword" content="stuff" /><meta name="DC.Title" content="XSLT" /><meta name="DC.Type" content="Text.Monograph" />

</head><body bgcolor="#ffffff">

<img alt="Book Home" border="0" src="gifs/smbanner.gif" usemap="#banner-map" /><map name="banner-map"><area shape="rect" coords="1,-2,616,66" href="index.htm" alt="XSLT" /><area shape="rect" coords="629,-11,726,25" href="jobjects/fsearch.htm" alt="Search this book" /></map>

<div class="navbar"><table width="684" border="0"><tr><td align="left" valign="top" width="228"><a href="ch00_05.htm"><img alt="Previous" border="0" src="../gifs/txtpreva.gif" /></a></td><td align="center" valign="top" width="228"></td><td align="right" valign="top" width="228"><a href="ch01_02.htm"><img alt="Next" border="0" src="../gifs/txtnexta.gif" /></a></td></tr></table></div>



  <h1 class="chapter">Chapter 1. Getting Started</h1>
<div class="htmltoc"><h4 class="tochead">Contents:</h4>
  <p> <a href="#xslt-CHP-1-SECT-1">The Design of XSLT</a><br />
<a href="ch01_02.htm">XML Basics</a><br />
<a href="ch01_03.htm">Installing Xalan</a><br />
<a href="ch01_04.htm">Summary</a><br /></p></div>
  <p>
<a name="INDEX-17" /></a>
<a name="INDEX-18" /></a>


In this chapter, we review the design rationale behind XSLT and XPath and discuss the basics of XML. We also talk about other web standards and how they relate to XSLT and XPath. We conclude the chapter with a brief discussion of how to set up an XSLT processor on your machine so you can work with the examples throughout the book. </p>
  <div class="sect1"><a name="xslt-CHP-1-SECT-1" /></a>
    <h2 class="sect1">1.1. The Design of XSLT</h2>
    <p>XML has gone from working group to entrenched buzzword in record time. Its flexibility as a language for presenting structured data has made it the lingua franca for data interchange. Early adopters used programming interfaces such as the Document Object Model (DOM) and the Simple API for XML (SAX) to parse and process XML documents. As XML becomes mainstream, however, it's clear that the average web citizen can't be expected to hack Java, Visual Basic, Perl, or Python code to work with documents. What's needed is a flexible, powerful, yet relatively simple, language capable of processing XML.</p>
    <p>What's needed is XSLT.</p>
    <p>
<a name="INDEX-19" /></a>
<a name="INDEX-20" /></a>
<a name="INDEX-21" /></a>


XSLT, the Extensible Stylesheet Language for Transformations, is an official recommendation of the World Wide Web Consortium (W3C). It provides a flexible, powerful language for transforming XML documents into something else. That something else can be an HTML document, another XML document, a Portable Document Format (PDF) file, a Scalable Vector Graphics (SVG) file, a Virtual Reality Modeling Language (VRML) file, Java code, a flat text file, a JPEG file, or most anything you want. You write an XSLT stylesheet to define the rules for transforming an XML document, and the XSLT processor does the work. </p>
    <p>The W3C has defined two families of standards for stylesheets. The oldest and simplest is Cascading Style Sheets (CSS), a mechanism used to define various properties of markup elements. Although CSS can be used with XML, it is most often used to style HTML documents. I can use CSS properties to define that certain elements be rendered in blue, or in 58-point type, or in boldface. That's all well and good, but there are many things that CSS can't do:</p>
    <ul>
      <li>
        <p>CSS can't change the order in which elements appear in a document. If you want to sort certain elements or filter elements based on a certain property, CSS won't do the job. </p>
      </li>
      <li>
        <p>CSS can't do computations. If you want to calculate and output a value (maybe you want to add up the numeric value of all <tt class="literal">&lt;price&gt;</tt> elements in a document), CSS won't do the job. </p>
      </li>
      <li>
        <p>CSS can't combine multiple documents. If you want to combine 53 purchase order documents and print a summary of all items ordered in those purchase orders, CSS won't do the job. </p>
      </li>
    </ul>
    <blockquote><b>WARNING:</b> 
      Don't take this section as a criticism of CSS; XSLT and CSS were designed for different purposes. One fairly common use of XSLT is to generate an HTML document that contains CSS elements. See <a href="ch03_05.htm#xslt-CHP-3-SECT-5">Section 3.5, "The XPath View of an XML Document"</a> in <a href="ch03_01.htm">Chapter 3, "XPath: A Syntax for Describing Needles and Haystacks"</a> for an example that uses XSLT to generate CSS properties. <p></p>
    </blockquote>
    <p>XSLT was created to be a more powerful, flexible language for transforming documents. In this book, we go through all the features of XSLT and discuss each of them in terms of practical examples. Some of XSLT's design goals specify that:</p>
    <ul>
      <li>
        <p>An XSLT stylesheet should be an XML document. This means that you can write a stylesheet that transforms a second stylesheet into another stylesheet (we actually do this in <a href="ch04_01.htm">Chapter 4, "Branching and Control Elements"</a>). This kind of recursive thinking is common in XSLT.</p>
      </li>
      <li>
        <p>The XSLT language should be based on pattern matching. Most of our stylesheets consist of rules (called templates in XSLT) used to transform a document. Each rule says, "When you see part of a document that looks like this, here's how you convert it into something else."  This is probably different from any programming you've previously done.</p>
      </li>
      <li>

        <p>XSLT should be designed to be free of side effects. In other words, XSLT is designed to be optimized so that many different stylesheet rules could be applied simultaneously. The biggest impact of this is that variables can't be modified. Once a variable is initialized, you can't change its value; if variables could be changed, then processing one stylesheet rule might have side effects that impact other stylesheet rules. This is almost certainly different from any programming you've previously done. </p>
        <p>
<a name="INDEX-22" /></a>
<a name="INDEX-23" /></a>
<a name="INDEX-24" /></a>


XSLT is heavily influenced by the design of <em class="emphasis">functional programming languages</em>, such as Lisp, Scheme, and Haskell. These languages also feature immutable variables. Instead of defining the templates of XSLT, functional programming languages define programs as a series of functions, each of which generates a well-defined output (free from side effects, of course) in response to a well-defined input. The goal is to execute the instructions of a given XSLT template without affecting the execution of any other XSLT template. </p>
      </li>
      <li>

        <p>
<a name="INDEX-25" /></a>

Instead of looping, XSLT uses iteration and recursion. Given that variables can't be changed, how do you do something like a <tt class="literal">for</tt> or <tt class="literal">do-while</tt> loop?  XSLT uses two equivalent techniques:  iteration and recursion. <em class="emphasis">Iteration</em> means that you can write an XSLT template that says, "get all the things that look like this, and here's what I want you to do with each of them."  Although that's different from a <tt class="literal">do-while</tt> loop, usually what you do in a procedural language is something like, "do this while there are any items left to process."  In that case, iteration does exactly what you want. </p>
        <p>
<a name="INDEX-26" /></a>

Recursion takes some getting used to. If you must implement something like a <tt class="literal">for</tt> statement (<tt class="literal">for i=1 to 10 do</tt>, for example), recursion is the way to go. There are a number of examples of recursion throughout the book; you can flip ahead to <a href="ch04_07.htm#xslt-CHP-4-SECT-7">Section 4.7, "A Stylesheet That Emulates a for Loop"</a> in <a href="ch04_01.htm">Chapter 4, "Branching and Control Elements"</a> for more information.</p>
      </li>
    </ul>
    <p>Given these design goals, what are XSLT's strengths?  Here are some scenarios:</p>
    <ul>
      <li>
        <p>
<a name="INDEX-27" /></a>

Your web site needs to deliver information to a variety of devices. You need to support ordinary desktop browsers, as well as pagers, mobile phones, and other low-resolution, low-function devices. It would be great if you could create your information in structured documents, then transform those documents into all the formats you need.</p>
      </li>
      <li>
        <p>You need to exchange data with your partners, but all of you use different database systems. It would be great if you could define a common XML data format, then transform documents written in that format into the import files you need (SQL statements, comma-separated values, etc.).</p>
      </li>
      <li>
        <p>To stay on the cutting edge, your web site gets a complete visual redesign every few months. Even though things such as server-side includes and CSS can help, they can't do everything. It would be great if your data were in a flexible format that could be transformed into any look and feel, simplifying the redesign process.</p>
      </li>
      <li>
        <p>You have documents in several different formats. All the documents are machine-readable, but it's a hassle to write programs to parse and process all of them. It would be great if you could combine all of the documents into a single format, then generate summary documents and reports based on that collection of documents. It would be even better if the report could contain calculated values, automatically generated graphics, and formatting for high-quality printing. </p>
      </li>
    </ul>
    <p>Throughout the book, we'll demonstrate XSLT solutions for problems just like these. Most chapters focus on particular techniques, such as sorting, grouping, and generating links between pieces of data. We wrap up with a case study that discusses a real-world content-management scenario and illustrates how XSLT was used to solve a number of problems.
<a name="INDEX-28" /></a>

</p>
  </div>
  
  
  


<hr width="684" align="left" />
<div class="navbar"><table width="684" border="0"><tr><td align="left" valign="top" width="228"><a href="ch00_05.htm"><img alt="Previous" border="0" src="../gifs/txtpreva.gif" /></a></td><td align="center" valign="top" width="228"><a href="index.htm"><img alt="Home" border="0" src="../gifs/txthome.gif" /></a></td><td align="right" valign="top" width="228"><a href="ch01_02.htm"><img alt="Next" border="0" src="../gifs/txtnexta.gif" /></a></td></tr><tr><td align="left" valign="top" width="228">0.5. Acknowledgments</td><td align="center" valign="top" width="228"><a href="index/index.htm"><img alt="Book Index" border="0" src="../gifs/index.gif" /></a></td><td align="right" valign="top" width="228">1.2. XML Basics</td></tr></table></div>
<hr width="684" align="left" />

<img alt="Library Navigation Links" border="0" src="../gifs/navbar.gif" usemap="#library-map" />
<p><p><font size="-1"><a href="copyrght.htm">Copyright &copy; 2002</a> O'Reilly &amp; Associates. All rights reserved.</font></p>

<map name="library-map">
<area shape="rect" coords="0,0,85,93" href="../index.htm"><area shape="rect" coords="85,0,180,98" href="../sax2/index.htm"><area shape="rect" coords="182,-1,261,100" href="../xmlnut/index.htm"><area shape="rect" coords="263,1,384,96" href="../jxml/index.htm"><area shape="rect" coords="386,1,463,100" href="../jxslt/index.htm"><area shape="rect" coords="466,1,533,112" href="index.htm"><area shape="rect" coords="535,-1,610,108" href="../schema/index.htm"><area shape="rect" coords="613,1,696,121" href="../pxml/index.htm">
      </map>

</body></html>
