<html><head><title>Variables (XSLT)</title><link rel="stylesheet" type="text/css" href="../style/style1.css" />

<meta name="DC.Creator" content="Doug Tidwell" /><meta name="DC.Format" content="text/xml" scheme="MIME" /><meta name="DC.Language" content="en-US" /><meta name="DC.Publisher" content="O'Reilly &amp; Associates, Inc." /><meta name="DC.Source" scheme="ISBN" content="0596000537L" /><meta name="DC.Subject.Keyword" content="stuff" /><meta name="DC.Title" content="XSLT" /><meta name="DC.Type" content="Text.Monograph" />

</head><body bgcolor="#ffffff">

<img alt="Book Home" border="0" src="gifs/smbanner.gif" usemap="#banner-map" /><map name="banner-map"><area shape="rect" coords="1,-2,616,66" href="index.htm" alt="XSL" /><area shape="rect" coords="629,-11,726,25" href="jobjects/fsearch.htm" alt="Search this book" /></map>

<div class="navbar"><table width="684" border="0"><tr><td align="left" valign="top" width="228"><a href="ch04_04.htm"><img alt="Previous" border="0" src="../gifs/txtpreva.gif" /></a></td><td align="center" valign="top" width="228"></td><td align="right" valign="top" width="228"><a href="ch04_06.htm"><img alt="Next" border="0" src="../gifs/txtnexta.gif" /></a></td></tr></table></div>



    <h2 class="sect1">4.5. Variables</h2>
    <p>
<a name="INDEX-372" />
<a name="INDEX-373" />
<a name="INDEX-374" />


If we use logic to control the flow of our stylesheets, we'll probably want to store temporary results along the way. In other words, we'll need to use variables. XSLT provides the <tt class="literal">&lt;xsl:variable&gt;</tt> element, which allows you to store a value and associate it with a name. </p>
    <p>The <tt class="literal">&lt;xsl:variable&gt;</tt> element can be used in three ways. The simplest form of the element creates a new variable whose value is an empty string (<tt class="literal">""</tt>). Here's how it looks:</p>
    <blockquote><pre class="code">
&lt;xsl:variable name="x"/&gt;</pre></blockquote>
    <p>This element creates a new variable named <tt class="literal">x</tt>, whose value is an empty string. (Please hold your applause until the end of the section.)</p>
    <p>You can also create a variable by adding a <tt class="literal">select</tt> attribute to the <tt class="literal">&lt;xsl:variable&gt;</tt> element:</p>
    <blockquote><pre class="code">
&lt;xsl:variable name="favouriteColour" select="'blue'"/&gt;</pre></blockquote>
    <p>In this case, we've set the value of the variable to be the string "blue". Notice that we put single quotes around the value. These quotes ensure that the literal value <tt class="literal">blue</tt> is used as the value of the variable. If we had left out the single quotes, this would mean the value of the variable is that of all the <tt class="literal">&lt;blue&gt;</tt> elements in the current context, which definitely isn't what we want here. </p>
<a name="INDEX-375" />
<a name="INDEX-376" />
    <blockquote><b>WARNING:</b> 

Some XSLT processors don't require you to put single quotes around a literal value if the literal value begins with a number. This is because the XML specification states that XML element names can't begin with a number. If I say the value should be <tt class="literal">35</tt>, Xalan, XT, and Saxon all assume that I mean <tt class="literal">35</tt> as a literal value, not as an element name. Although this works with many XSLT processors, you're safer to put the single quotes around the numeric values anyway. A further aside: the value here is the string "35", although it can be converted to a number easily. </p>
    </blockquote>
    <p>The third way to use the <tt class="literal">&lt;xsl:variable&gt;</tt> element is to put content inside it. Here's a brief example:</p>
    <blockquote><pre class="code">
&lt;xsl:variable name="y"&gt;
  &lt;xsl:choose&gt;
    &lt;xsl:when test="$x &amp;gt; 7"&gt;
      &lt;xsl:text&gt;13&lt;/xsl:text&gt;
    &lt;/xsl:when&gt;
    &lt;xsl:otherwise&gt;
      &lt;xsl:text&gt;15&lt;/xsl:text&gt;
    &lt;/xsl:otherwise&gt;
  &lt;/xsl:choose&gt;
&lt;/xsl:variable&gt;</pre></blockquote>
    <p>In this more complicated example, the content of the variable <tt class="literal">y</tt> depends on the test attribute of the <tt class="literal">&lt;xsl:when&gt;</tt> element. This is the equivalent of this procedural programming construct:</p>
    <blockquote><pre class="code">
int y;
if (x &gt; 7)
  y = 13;
else
  y = 15;</pre></blockquote>
    <div class="sect2">
      <h3 class="sect2">4.5.1. Are These Things Really Variables?</h3> 
<p>Although these XSLT variables are called variables, they're not variables in the traditional sense of procedural programming languages like C++ or Java. Remember that earlier we said one goal behind the design of the stylesheet language is to avoid side effects in execution?  Well, one of the most common side effects used in most procedural languages is changing the value of a variable. If we write our stylesheet so that the results depend on the varying values of different variables, the stylesheet engine would be forced to evaluate the templates in a certain order.</p>

<p>XSLT variables are more like variables in the traditional mathematical sense. In mathematics, we can define a function called <tt class="literal">square(x)</tt> that returns the value of a number (represented by <tt class="literal">x</tt>) multiplied by itself. In other words, <tt class="literal">square(2.5)</tt> returns <tt class="literal">6.25</tt>. In this context, we understand that <tt class="literal">x</tt> can be any number; we also understand that the <tt class="literal">square</tt> function can't change the value of <tt class="literal">x</tt>.</p>
<p>It takes a while to get used to this concept, but you'll get there. Trust me on this.</p>
    </div>
    <div class="sect2">
      <h3 class="sect2">4.5.2. Variable Scope</h3>
      <p>
<a name="INDEX-377" />

An <tt class="literal">&lt;xsl:variable&gt;</tt> element is scoped to the element that contains it. If an <tt class="literal">&lt;xsl:variable&gt;</tt> element is a top-level element (its parent is <tt class="literal">&lt;xsl:stylesheet&gt;</tt>), it is global, and its value is visible everywhere in the stylesheet. You can also use an <tt class="literal">&lt;xsl:variable&gt;</tt> element to override the value of a global variable locally.
<a name="INDEX-378" />
<a name="INDEX-379" />

</p>
    </div>
  

<hr width="684" align="left" />
<div class="navbar"><table width="684" border="0"><tr><td align="left" valign="top" width="228"><a href="ch04_04.htm"><img alt="Previous" border="0" src="../gifs/txtpreva.gif" /></a></td><td align="center" valign="top" width="228"><a href="index.htm"><img alt="Home" border="0" src="../gifs/txthome.gif" /></a></td><td align="right" valign="top" width="228"><a href="ch04_06.htm"><img alt="Next" border="0" src="../gifs/txtnexta.gif" /></a></td></tr><tr><td align="left" valign="top" width="228">4.4. Parameters</td><td align="center" valign="top" width="228"><a href="index/index.htm"><img alt="Book Index" border="0" src="../gifs/index.gif" /></a></td><td align="right" valign="top" width="228">4.6. Using Recursion to Do Most Anything</td></tr></table></div>
<hr width="684" align="left" />

<img alt="Library Navigation Links" border="0" src="../gifs/navbar.gif" usemap="#library-map" />
<p><p><font size="-1"><a href="copyrght.htm">Copyright &copy; 2002</a> O'Reilly &amp; Associates. All rights reserved.</font></p>

<map name="library-map">
<area shape="rect" coords="0,0,85,93" href="../index.htm"><area shape="rect" coords="85,0,180,98" href="../sax2/index.htm"><area shape="rect" coords="182,-1,261,100" href="../xmlnut/index.htm"><area shape="rect" coords="263,1,384,96" href="../jxml/index.htm"><area shape="rect" coords="386,1,463,100" href="../jxslt/index.htm"><area shape="rect" coords="466,1,533,112" href="index.htm"><area shape="rect" coords="535,-1,610,108" href="../schema/index.htm"><area shape="rect" coords="613,1,696,121" href="../pxml/index.htm">
</map>

</body></html>
