<html><head><title>Stylesheet Structure (XSLT)</title><link rel="stylesheet" type="text/css" href="../style/style1.css" />

<meta name="DC.Creator" content="Doug Tidwell" /><meta name="DC.Format" content="text/xml" scheme="MIME" /><meta name="DC.Language" content="en-US" /><meta name="DC.Publisher" content="O'Reilly &amp; Associates, Inc." /><meta name="DC.Source" scheme="ISBN" content="0596000537L" /><meta name="DC.Subject.Keyword" content="stuff" /><meta name="DC.Title" content="XSLT" /><meta name="DC.Type" content="Text.Monograph" />

</head><body bgcolor="#ffffff">

<img alt="Book Home" border="0" src="gifs/smbanner.gif" usemap="#banner-map" /><map name="banner-map"><area shape="rect" coords="1,-2,616,66" href="index.htm" alt="XSL" /><area shape="rect" coords="629,-11,726,25" href="jobjects/fsearch.htm" alt="Search this book" /></map>

<div class="navbar"><table width="684" border="0"><tr><td align="left" valign="top" width="228"><a href="ch02_03.htm"><img alt="Previous" border="0" src="../gifs/txtpreva.gif" /></a></td><td align="center" valign="top" width="228"></td><td align="right" valign="top" width="228"><a href="ch02_05.htm"><img alt="Next" border="0" src="../gifs/txtnexta.gif" /></a></td></tr></table></div>



    <h2 class="sect1">2.4. Stylesheet Structure</h2>
    <p>
<a name="INDEX-125" />

As the final part of our introduction to XSLT, we'll look at the contents of the stylesheet itself. We'll explain all the things in our stylesheet and discuss other approaches we could have taken.</p>
    <div class="sect2">
      <h3 class="sect2">2.4.1. The &lt;xsl:stylesheet&gt; Element</h3>
<p>
<a name="INDEX-126" />

The <tt class="literal">&lt;xsl:stylesheet&gt;</tt> element is typically the root element of an XSLT stylesheet.</p>      
<blockquote><pre class="code">
&lt;xsl:stylesheet
    xmlns:xsl="http://www.w3.org/1999/XSL/Transform" 
    version="1.0"&gt;</pre></blockquote>
      <p>First of all, the <tt class="literal">&lt;xsl:stylesheet&gt;</tt> element defines the version of XSLT we're using, along with a definition of the <tt class="literal">xsl</tt> namespace. To be compliant with the XSLT specification, your stylesheet should always begin with this element, coded exactly as shown here. Some stylesheet processors, notably Xalan, issue a warning message if your <tt class="literal">&lt;xsl:stylesheet&gt;</tt> element doesn't have these two attributes with these two values. For all examples in this book, we'll start the stylesheet with this exact element, defining other namespaces as needed. </p>
    </div>
    <div class="sect2">
      <h3 class="sect2">2.4.2. The &lt;xsl:output&gt; Element</h3>
     <p>
<a name="INDEX-127" />

Next, we specify the output method. The XSLT specification defines three output methods:  <tt class="literal">xml</tt>, <tt class="literal">html</tt>, and <tt class="literal">text</tt>. We're creating an HTML document, so HTML is the output method we want to use. In addition to these three methods, an XSLT processor is free to define its own output methods, so check your XSLT processor's documentation to see if you have any other options. </p> 
<blockquote><pre class="code">
&lt;xsl:output method="html"/&gt;</pre></blockquote>
      <p>A variety of attributes are used with the different output methods. For example, if you're using <tt class="literal">method="xml"</tt>, you can use <tt class="literal">doctype-public</tt> and <tt class="literal">doctype-system</tt> to define the public and system identifiers to be used in the the document type declaration. If you're using <tt class="literal">method="xml"</tt> or <tt class="literal">method="html"</tt>, you can use the <tt class="literal">indent</tt> attribute to control whether or not the output document is indented. The discussion of the <tt class="literal">&lt;xsl:output&gt;</tt> element in <a href="appa_01.htm">Appendix A, "XSLT Reference"</a> has all the details.</p>
    </div>
    <div class="sect2">
      <h3 class="sect2">2.4.3. Our First &lt;xsl:template&gt;</h3>
      <p>Our first template matches <tt class="literal">"/"</tt>, the XPath expression for the document's root element. </p>
<blockquote><pre class="code">
&lt;xsl:template match="/"&gt;
  &lt;xsl:apply-templates select="greeting"/&gt;
&lt;/xsl:template&gt;</pre></blockquote>
    </div>
    <div class="sect2">
      <h3 class="sect2">2.4.4. The &lt;xsl:template&gt; for &lt;greeting&gt; Elements</h3>
      <p>

<a name="INDEX-128" />

The second <tt class="literal">&lt;xsl:template&gt;</tt> element processes any <tt class="literal">&lt;greeting&gt;</tt> elements in our XML source document. </p>
 <blockquote><pre class="code">
&lt;xsl:template match="greeting"&gt;
  &lt;html&gt;
    &lt;body&gt;
      &lt;h1&gt;
        &lt;xsl:value-of select="."/&gt;
      &lt;/h1&gt;
    &lt;/body&gt;
  &lt;/html&gt;
&lt;/xsl:template&gt;</pre></blockquote> 
    </div>
    <a name="xslt-CHP-2-SECT-4.5" /><div class="sect2">
      <h3 class="sect2">2.4.5. Built-in Template Rules</h3>
      <p>
<a name="INDEX-129" />
<a name="INDEX-130" />
<a name="INDEX-131" />


Although most stylesheets we'll develop in this book explicitly define how various XML elements should be transformed, XSLT does define several built-in template rules that apply in the absence of any specific rules. These rules have a lower priority than any other templates, so they're always overridden when you define your own templates. The built-in templates are listed here.</p>
      <div class="sect3">
        <h3 class="sect3">2.4.5.1. Built-in template rule for element and root nodes</h3>
        <p>This template processes the root node and any of its children. This processing ensures that recursive processing will continue, even if no template is declared for a given element.</p>
<blockquote><pre class="code">&lt;xsl:template match="*|/"&gt;
  &lt;xsl:apply-templates/&gt;
&lt;/xsl:template&gt;</pre></blockquote>
        <p>This means that if the structure of a document looks like this:</p>
        <blockquote><pre class="code">&lt;?xml version="1.0"?&gt;
&lt;x&gt;
  &lt;y&gt;
    &lt;z/&gt;
  &lt;/y&gt;
&lt;/z&gt;</pre></blockquote>
        <p>The built-in template rule for element and root nodes means that we could write a template with <tt class="literal">match="z"</tt> and the <tt class="literal">&lt;z&gt;</tt> element will still be processed, even if there are no template rules for the <tt class="literal">&lt;x&gt;</tt> and <tt class="literal">&lt;y&gt;</tt> elements. </p>
      </div>
      <div class="sect3">
        <h3 class="sect3">2.4.5.2. Built-in template rule for modes</h3>
        <p>This template ensures that element and root nodes are processed, regardless of any mode that might be in effect. (See <a href="ch04_03.htm">Section 4.3.2, "Templates &agrave; la Mode"</a> in <a href="ch04_01.htm">Chapter 4, "Branching and Control Elements"</a> for more information on the <tt class="literal">mode</tt> attribute.)</p>
 <blockquote><pre class="code">&lt;xsl:template match="*|/" mode="x"&gt;
  &lt;xsl:apply-templates mode="x"/&gt;
&lt;/xsl:template&gt;</pre></blockquote>
      </div>
      <div class="sect3">
        <h3 class="sect3">2.4.5.3. Built-in template rule for text and attribute nodes</h3>
        <p>This template copies the text of all text and attribute nodes to the output tree. Be aware that you have to actually select the text and attribute nodes for this rule to be invoked.</p>
 <blockquote><pre class="code">&lt;xsl:template match="text()|@*"&gt;
  &lt;xsl:value-of select="."/&gt;
&lt;/xsl:template&gt;</pre></blockquote>
      </div>
      <div class="sect3">
        <h3 class="sect3">2.4.5.4. Built-in template rule for comment and processing instruction nodes</h3>
            <p>This template does nothing.</p>
 <blockquote><pre class="code">&lt;xsl:template match="comment()|processing-instruction()"/&gt;</pre></blockquote>
      </div>
      <div class="sect3">
        <h3 class="sect3">2.4.5.5. Built-in template rule for namespace nodes</h3>
        <p>This template also does nothing.
<a name="INDEX-132" />
<a name="INDEX-133" />
<a name="INDEX-134" />

</p>
 <blockquote><pre class="code">&lt;xsl:template match="namespace()"/&gt;</pre></blockquote>
      </div>
    </div>
<div class="sect2">
      <h3 class="sect2">2.4.6. Top-Level Elements</h3>
      <p>
<a name="INDEX-135" />

To this point, we haven't actually talked about our source document or how we're going to transform it. We're simply setting up some properties for the transform. There are other elements we can put at the start of our stylesheet. Any element whose parent is the <tt class="literal">&lt;xsl:stylesheet&gt;</tt> element is called a <em class="emphasis">top-level element.</em>  Here is a brief discussion of the other top-level elements:</p>
      <dl>
        
          <dt><tt class="literal">&lt;xsl:include&gt;</tt> and <tt class="literal">&lt;xsl:import&gt;</tt></dt> 
          <dd>
            
<a name="INDEX-136" />
<a name="INDEX-137" />

These elements refer to another stylesheet. The other stylesheet and all of its contents are included in the current stylesheet. The main difference between <tt class="literal">&lt;xsl:import&gt;</tt> and <tt class="literal">&lt;xsl:include&gt;</tt> is that a template, variable, or anything else imported with <tt class="literal">&lt;xsl:import&gt;</tt> has a lower priority than the things in the current stylesheet. This gives you a mechanism to subclass stylesheets, if you want to think about this from an object-oriented point of view. You can import another stylesheet that contains common templates, but any templates in the <em class="emphasis">importing</em> stylesheet will be used instead of any templates in the imported stylesheet. Another difference is that <tt class="literal">&lt;xsl:import&gt;</tt> can only appear at the beginning of a stylesheet, while <tt class="literal">&lt;xsl:include&gt;</tt> can appear anywhere.</p>
          </dd>
        
        
          <dt><tt class="literal">&lt;xsl:strip-space&gt;</tt> and <tt class="literal">&lt;xsl:preserve-space&gt;</tt></dt>
          <dd>
            

<p>
<a name="INDEX-138" />
<a name="INDEX-139" />
<a name="INDEX-140" />


These elements contain a space-separated list of elements from which whitespace should be removed or preserved in the output. To define these elements globally, use <tt class="literal">&lt;xsl:strip-space elements="*"/&gt;</tt> or <tt class="literal">&lt;xsl:preserve-space elements="*"/&gt;</tt>. If we want to specify that whitespace be removed for all elements except for <tt class="literal">&lt;greeting&gt;</tt> elements and <tt class="literal">&lt;salutation&gt;</tt> elements, we would add this markup to our stylesheet:</p>
            <blockquote><pre class="code">
&lt;xsl:strip-space elements="*"/&gt;
&lt;xsl:preserve-space elements="greeting
            salutation"/&gt;</pre></blockquote>
</dd>

        
          <dt><tt class="literal">&lt;xsl:key&gt;</tt></dt>
          <dd>
            
<a name="INDEX-141" />

This element defines a key, which is similar to defining an index on a database. We'll talk more about the <tt class="literal">&lt;xsl:key&gt;</tt> element and the <tt class="literal">key()</tt> function in <a href="ch05_02.htm">Section 5.2, "Generating Links with the key() Function"</a> in <a href="ch05_01.htm">Chapter 5, "Creating Links and Cross-References"</a>.</p>
          </dd>
        
        
          <dt><tt class="literal">&lt;xsl:variable&gt;</tt></dt>
          <dd>
            
<a name="INDEX-142" />

This element defines a variable. Any <tt class="literal">&lt;xsl:variable&gt;</tt> that appears as a top-level element is global to the entire stylesheet. Variables are discussed extensively in <a href="ch04_05.htm#xslt-CHP-4-SECT-5">Section 4.5, "Variables"</a> in <a href="ch04_01.htm">Chapter 4, "Branching and Control Elements"</a>.</p>
          </dd>
        
        
          <dt><tt class="literal">&lt;xsl:param&gt;</tt></dt>
          <dd>
            
<a name="INDEX-143" />

This element defines a parameter. As with <tt class="literal">&lt;xsl:variable&gt;</tt>, any <tt class="literal">&lt;xsl:param&gt;</tt> that is a top-level element is global to the entire stylesheet. Parameters are discussed extensively in <a href="ch04_04.htm">Section 4.4, "Parameters"</a> in <a href="ch04_01.htm">Chapter 4, "Branching and Control Elements"</a>.</p>
          </dd>
        
        
          <dt><i>Other stuff</i></dt>
          <dd>
            More obscure elements that can appear as top-level elements are <tt class="literal">&lt;xsl:decimal-format&gt;</tt>, <tt class="literal">&lt;xsl:namespace-alias&gt;</tt>, and <tt class="literal">&lt;xsl:attribute-set&gt;</tt>. All are discussed in <a href="appa_01.htm">Appendix A, "XSLT Reference"</a>.</p>
          </dd>
        
      </dl></div>
 <div class="sect2">
      <h3 class="sect2">2.4.7. Other Approaches</h3>
      <p>
<a name="INDEX-144" />

One mantra of the Perl community is, "There's more than one way to do it." That's true with XSLT stylesheets, as well. We could have written our stylesheet like this:</p>
      <blockquote><pre class="code">
&lt;xsl:stylesheet 
    xmlns:xsl="http://www.w3.org/1999/XSL/Transform" 
    version="1.0"&gt;
  &lt;xsl:output method="html"/&gt;
        
  &lt;xsl:template match="/"&gt;
    &lt;html&gt;
      &lt;body&gt;
        &lt;xsl:apply-templates select="greeting"/&gt;
      &lt;/body&gt;
    &lt;/html&gt;
  &lt;/xsl:template&gt;
        
  &lt;xsl:template match="greeting"&gt;
    &lt;h1&gt;
      &lt;xsl:value-of select="."/&gt;
    &lt;/h1&gt;
  &lt;/xsl:template&gt;
&lt;/xsl:stylesheet&gt;</pre></blockquote>
      <p>In this version, we put the wrapper elements for the HTML document in the template for the root element. One of the things you should think about as you build your stylesheets is where to put elements like <tt class="literal">&lt;html&gt;</tt> and <tt class="literal">&lt;body&gt;</tt>. Let's say our XML document looked like this instead:</p>
      <blockquote><pre class="code">
&lt;?xml version="1.0"?&gt;
&lt;greetings&gt;
  &lt;greeting&gt;Hello, World!&lt;/greeting&gt;
  &lt;greeting&gt;Hey, Y'all!&lt;/greeting&gt;
&lt;/greetings&gt;</pre></blockquote>
      

<p>In this case, we would have to put the <tt class="literal">&lt;html&gt;</tt> and <tt class="literal">&lt;body&gt;</tt> elements in the <tt class="literal">&lt;xsl:template&gt;</tt> for the root element. If they were in the <tt class="literal">&lt;xsl:template&gt;</tt> for the <tt class="literal">&lt;greeting&gt;</tt> element, the output document would have multiple <tt class="literal">&lt;html&gt;</tt> elements, something that isn't valid in an HTML document. Our updated stylesheet would look like this:</p>
      <blockquote><pre class="code">
&lt;xsl:stylesheet 
    xmlns:xsl="http://www.w3.org/1999/XSL/Transform" 
    version="1.0"&gt;
  &lt;xsl:output method="html"/&gt;
        
  &lt;xsl:template match="/"&gt;
    &lt;html&gt;
      &lt;body&gt;
        &lt;xsl:apply-templates select="greetings/greeting"/&gt;
      &lt;/body&gt;
    &lt;/html&gt;
  &lt;/xsl:template&gt;
        
  &lt;xsl:template match="greeting"&gt;
    &lt;h1&gt;
      &lt;xsl:value-of select="."/&gt;
    &lt;/h1&gt;
  &lt;/xsl:template&gt;
&lt;/xsl:stylesheet&gt;</pre></blockquote>
      <p>Notice that we had to modify our XPath expression; what was originally <tt class="literal">greeting</tt> is now <tt class="literal">greetings/greeting</tt>. As we develop stylesheets, we'll have to make sure our XPath expressions match the document structure. When you get unexpected results, or no results, an incorrect XPath expression is usually the cause.</p>
      <p>As a final example, we could also write our stylesheet with only one <tt class="literal">xsl:template</tt>:</p>
      <blockquote><pre class="code">
&lt;xsl:stylesheet xmlns:xsl="http://www.w3.org/1999/XSL/Transform" version="1.0"&gt;
  &lt;xsl:output method="html"/&gt;
        
  &lt;xsl:template match="/"&gt;
    &lt;html&gt;
      &lt;body&gt;
        &lt;h1&gt;
          &lt;xsl:value-of select="greeting"/&gt;
        &lt;/h1&gt;
      &lt;/body&gt;
    &lt;/html&gt;
  &lt;/xsl:template&gt;
&lt;/xsl:stylesheet&gt;</pre></blockquote>
      <p>Although this is the shortest of our sample stylesheets, our examples will tend to feature a number of short templates, each of which defines a simple transform for a few elements. This approach makes your stylesheets much easier to understand, maintain, and reuse. The more transformations you cram into each <tt class="literal">xsl:template</tt>, the more difficult it is to debug your stylesheets, and the more difficult it is to reuse the templates elsewhere.
<a name="INDEX-145" />

</p>
    </div>
  

<hr width="684" align="left" />
<div class="navbar"><table width="684" border="0"><tr><td align="left" valign="top" width="228"><a href="ch02_03.htm"><img alt="Previous" border="0" src="../gifs/txtpreva.gif" /></a></td><td align="center" valign="top" width="228"><a href="index.htm"><img alt="Home" border="0" src="../gifs/txthome.gif" /></a></td><td align="right" valign="top" width="228"><a href="ch02_05.htm"><img alt="Next" border="0" src="../gifs/txtnexta.gif" /></a></td></tr><tr><td align="left" valign="top" width="228">2.3. How a Stylesheet Is Processed</td><td align="center" valign="top" width="228"><a href="index/index.htm"><img alt="Book Index" border="0" src="../gifs/index.gif" /></a></td><td align="right" valign="top" width="228">2.5. Sample Gallery</td></tr></table></div>
<hr width="684" align="left" />

<img alt="Library Navigation Links" border="0" src="../gifs/navbar.gif" usemap="#library-map" />
<p><p><font size="-1"><a href="copyrght.htm">Copyright &copy; 2002</a> O'Reilly &amp; Associates. All rights reserved.</font></p>

<map name="library-map">
<area shape="rect" coords="0,0,85,93" href="../index.htm"><area shape="rect" coords="85,0,180,98" href="../sax2/index.htm"><area shape="rect" coords="182,-1,261,100" href="../xmlnut/index.htm"><area shape="rect" coords="263,1,384,96" href="../jxml/index.htm"><area shape="rect" coords="386,1,463,100" href="../jxslt/index.htm"><area shape="rect" coords="466,1,533,112" href="index.htm"><area shape="rect" coords="535,-1,610,108" href="../schema/index.htm"><area shape="rect" coords="613,1,696,121" href="../pxml/index.htm">
</map>

</body></html>