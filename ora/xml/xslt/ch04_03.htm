<html><head><title>Invoking Templates by Name (XSLT)</title><link rel="stylesheet" type="text/css" href="../style/style1.css" />

<meta name="DC.Creator" content="Doug Tidwell" /><meta name="DC.Format" content="text/xml" scheme="MIME" /><meta name="DC.Language" content="en-US" /><meta name="DC.Publisher" content="O'Reilly &amp; Associates, Inc." /><meta name="DC.Source" scheme="ISBN" content="0596000537L" /><meta name="DC.Subject.Keyword" content="stuff" /><meta name="DC.Title" content="XSLT" /><meta name="DC.Type" content="Text.Monograph" />

</head><body bgcolor="#ffffff">

<img alt="Book Home" border="0" src="gifs/smbanner.gif" usemap="#banner-map" /><map name="banner-map"><area shape="rect" coords="1,-2,616,66" href="index.htm" alt="XSL" /><area shape="rect" coords="629,-11,726,25" href="jobjects/fsearch.htm" alt="Search this book" /></map>

<div class="navbar"><table width="684" border="0"><tr><td align="left" valign="top" width="228"><a href="ch04_02.htm#xslt-CHP-4-SECT-2.1.2"><img alt="Previous" border="0" src="../gifs/txtpreva.gif" /></a></td><td align="center" valign="top" width="228"></td><td align="right" valign="top" width="228"><a href="ch04_04.htm"><img alt="Next" border="0" src="../gifs/txtnexta.gif" /></a></td></tr></table></div>



    <h2 class="sect1">4.3. Invoking Templates by Name</h2>
    <p>
<a name="INDEX-340" />
<a name="INDEX-341" />
<a name="INDEX-342" />
<a name="INDEX-343" />

Up to this point, we've always used XSLT's <tt class="literal">&lt;xsl:apply-templates&gt;</tt> element to invoke other templates. You can think of this as a limited form of <em class="emphasis">polymorphism;</em> a single instruction is invoked a number of times, and the XSLT processor uses each node in the node-set to determine which <tt class="literal">&lt;xsl:template&gt;</tt> to invoke. Most of the time, this is what we want. However, sometimes we want to invoke a particular template. XSLT allows us to do this with the <tt class="literal">&lt;xsl:call-template&gt;</tt> element. </p>
    <div class="sect2">
      <h3 class="sect2">4.3.1. How It Works</h3>
      <p>To invoke a template by name, two things have to happen:</p>
      <ul>
        <li>
          <p>The template you want to invoke has to have a <tt class="literal">name</tt>.</p>
        </li>
        <li>
          <p>You use the <tt class="literal">&lt;xsl:call-template&gt;</tt> element to invoke the named template.</p>
        </li>
      </ul>
      <p>Here's how to do this. Say we have a template named <em class="emphasis">createMasthead</em> that creates the masthead of a web page. Whenever we create an HTML page for our web site, we want to invoke the <em class="emphasis">createMasthead</em> template to create the masthead. Here's what our stylesheet would look like:</p>
      <blockquote><pre class="code">
&lt;xsl:template name="createMasthead"&gt;
  &lt;!-- interesting stuff that generates the masthead goes here --&gt;
&lt;/xsl:template&gt;
...
&lt;xsl:template match="/"&gt;
  &lt;html&gt;
    &lt;head&gt;
      &lt;title&gt;&lt;xsl:value-of select="title"/&gt;&lt;/title&gt;
    &lt;/head&gt;
    &lt;body&gt;
      <em class="emphasis">&lt;xsl:call-template name="createMasthead"/&gt;</em>
...</pre></blockquote>
      <p>Named templates are extremely useful for defining commonly used markup. For example, say you're using an XSLT stylesheet to create web pages with a particular look and feel. You can write named templates that create the header, footer, navigation areas, or other items that define how your web page will look. Every time you need to create a web page, simply use <tt class="literal">&lt;xsl:call-template&gt;</tt> to invoke those templates and create the look and feel you want. </p>
      <p>Even better, if you put those named templates in a separate stylesheet and import the stylesheet (with either <tt class="literal">&lt;xsl:import&gt;</tt> or <tt class="literal">&lt;xsl:include&gt;</tt>), you can create a set of stylesheets that generate the look and feel of the web site you want. If you decide to redesign your web site, redesign the stylesheets that define the common graphical and layout elements. Change those stylesheets, regenerate your web site, and voila! You will see an instantly updated web site. (See <a href="ch09_01.htm">Chapter 9, "Case Study: The Toot-O-Matic"</a> for an example.)
<a name="INDEX-344" />
<a name="INDEX-345" />
<a name="INDEX-346" />

</p>
    </div>
    <a name="xslt-CHP-4-SECT-3.2" /><div class="sect2">
      <h3 class="sect2">4.3.2. Templates &agrave; la Mode</h3>
      <p>
<a name="INDEX-347" />

The XSLT <tt class="literal">&lt;xsl:template&gt;</tt> element has a <tt class="literal">mode</tt> attribute that lets you process the same set of nodes several times. For example, we might want to process <tt class="literal">&lt;h1&gt;</tt> elements one way when we generate a table of contents, and another way when we process the document as a whole. We could use the <tt class="literal">mode</tt> attribute to define different templates for different purposes:</p>
      <blockquote><pre class="code">
&lt;xsl:template match="h1" mode="build-toc"&gt;
  &lt;!-- Template to process the &lt;h1&gt; element for table of contents --&gt;
&lt;/xsl:template&gt;

&lt;xsl:template match="h1" mode="process-text"&gt;
  &lt;!-- Template to process the &lt;h1&gt; element along with the rest   --&gt;
  &lt;!-- of the document                                                  --&gt;
&lt;/xsl:template&gt;</pre></blockquote>
      <p>We can then start applying templates with the <tt class="literal">mode</tt> attribute:</p>
      <blockquote><pre class="code">
&lt;xsl:template match="/"&gt;
  &lt;html&gt;
    &lt;body&gt;
      &lt;h1&gt;Table of Contents&lt;/h1&gt;
      &lt;ul&gt;
        &lt;xsl:apply-templates select="h1" mode="build-toc"/&gt;
      &lt;/ul&gt;
      &lt;xsl:apply-templates select="*" mode="process-text"/&gt;
    &lt;/body&gt;
  &lt;/html&gt;
&lt;/xsl:template&gt;</pre></blockquote>
      <p>This style of coding makes maintenance much easier; if the table of contents isn't generated correctly, the templates with <tt class="literal">mode="build-toc"</tt> are the obvious place to start debugging. See <a href="ch09_01.htm">Chapter 9, "Case Study: The Toot-O-Matic"</a> for a more detailed discussion of the <tt class="literal">mode</tt> attribute.</p>
    </div>
  

<hr width="684" align="left" />
<div class="navbar"><table width="684" border="0"><tr><td align="left" valign="top" width="228"><a href="ch04_02.htm#xslt-CHP-4-SECT-2.1.2"><img alt="Previous" border="0" src="../gifs/txtpreva.gif" /></a></td><td align="center" valign="top" width="228"><a href="index.htm"><img alt="Home" border="0" src="../gifs/txthome.gif" /></a></td><td align="right" valign="top" width="228"><a href="ch04_04.htm"><img alt="Next" border="0" src="../gifs/txtnexta.gif" /></a></td></tr><tr><td align="left" valign="top" width="228">4.2. Branching Elements of XSLT</td><td align="center" valign="top" width="228"><a href="index/index.htm"><img alt="Book Index" border="0" src="../gifs/index.gif" /></a></td><td align="right" valign="top" width="228">4.4. Parameters</td></tr></table></div>
<hr width="684" align="left" />

<img alt="Library Navigation Links" border="0" src="../gifs/navbar.gif" usemap="#library-map" />
<p><p><font size="-1"><a href="copyrght.htm">Copyright &copy; 2002</a> O'Reilly &amp; Associates. All rights reserved.</font></p>

<map name="library-map">
<area shape="rect" coords="0,0,85,93" href="../index.htm"><area shape="rect" coords="85,0,180,98" href="../sax2/index.htm"><area shape="rect" coords="182,-1,261,100" href="../xmlnut/index.htm"><area shape="rect" coords="263,1,384,96" href="../jxml/index.htm"><area shape="rect" coords="386,1,463,100" href="../jxslt/index.htm"><area shape="rect" coords="466,1,533,112" href="index.htm"><area shape="rect" coords="535,-1,610,108" href="../schema/index.htm"><area shape="rect" coords="613,1,696,121" href="../pxml/index.htm">
</map>

</body></html>