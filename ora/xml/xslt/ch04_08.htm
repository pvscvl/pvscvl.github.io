<html><head><title>A Stylesheet That Generates a Stylesheet That Emulates a for Loop (XSLT)</title><link rel="stylesheet" type="text/css" href="../style/style1.css" />

<meta name="DC.Creator" content="Doug Tidwell" /><meta name="DC.Format" content="text/xml" scheme="MIME" /><meta name="DC.Language" content="en-US" /><meta name="DC.Publisher" content="O'Reilly &amp; Associates, Inc." /><meta name="DC.Source" scheme="ISBN" content="0596000537L" /><meta name="DC.Subject.Keyword" content="stuff" /><meta name="DC.Title" content="XSLT" /><meta name="DC.Type" content="Text.Monograph" />

</head><body bgcolor="#ffffff">

<img alt="Book Home" border="0" src="gifs/smbanner.gif" usemap="#banner-map" /><map name="banner-map"><area shape="rect" coords="1,-2,616,66" href="index.htm" alt="XSL" /><area shape="rect" coords="629,-11,726,25" href="jobjects/fsearch.htm" alt="Search this book" /></map>

<div class="navbar"><table width="684" border="0"><tr><td align="left" valign="top" width="228"><a href="ch04_07.htm#xslt-CHP-4-SECT-7"><img alt="Previous" border="0" src="../gifs/txtpreva.gif" /></a></td><td align="center" valign="top" width="228"></td><td align="right" valign="top" width="228"><a href="ch04_09.htm"><img alt="Next" border="0" src="../gifs/txtnexta.gif" /></a></td></tr></table></div>



    <h2 class="sect1">4.8. A Stylesheet That Generates a Stylesheet That Emulates a for Loop</h2>
    <p>
<a name="INDEX-410" />
<a name="INDEX-411" />
<a name="INDEX-412" />
<a name="INDEX-413" />
<a name="INDEX-414" />
<a name="INDEX-415" />


We've emulated a <tt class="literal">for</tt> loop now, but what about a stylesheet that generates another stylesheet that emulates the <tt class="literal">for</tt> loop?  As we beat this dead horse one more time, we'll create a stylesheet that generates the iteration for us, along with an XML syntax that automates the process.</p>
    <div class="sect2">
      <h3 class="sect2">4.8.1. XML Input</h3>
      <p>Here's the XML template we'll use to generate the stylesheet:</p>
      <blockquote><pre class="code">
&lt;?xml version="1.0"?&gt;
&lt;html xmlns:xsl="http://www.w3.org/1999/XSL/Transform"&gt;
  &lt;head&gt;
    &lt;title&gt;Text generated by our for loop processor&lt;/title&gt;
  &lt;/head&gt;
  &lt;body&gt;
    &lt;h1&gt;Text generated by our for loop processor&lt;/h1&gt;
    &lt;table border="1"&gt;
      &lt;tr&gt;
        &lt;th&gt;Iteration #&lt;/th&gt;
        &lt;th&gt;Value of &lt;i&gt;i&lt;/i&gt;&lt;/th&gt;
      &lt;/tr&gt;
      &lt;for-loop index-variable="0" increment="1" 
       operator="&lt;=" test-value="10"&gt;
        &lt;tr&gt;
          &lt;td align="center"&gt;
            &lt;xsl:value-of select="$iteration"/&gt;
          &lt;/td&gt;
          &lt;td align="center"&gt;
            &lt;xsl:value-of select="$i"/&gt;
          &lt;/td&gt;
        &lt;/tr&gt;
      &lt;/for-loop&gt;
    &lt;/table&gt;
  &lt;/body&gt;
&lt;/html&gt;</pre></blockquote>
    </div>
    <div class="sect2">
      <h3 class="sect2">4.8.2. Template Design</h3>
      <p>The design of our stylesheet-generating stylesheet is as follows:</p>
      <ol>
        <li>
          <p>Output the <tt class="literal">&lt;xsl:stylesheet&gt;</tt> element.</p>
        </li>
        <li>
          <p>Generate the for-loop template. This will be a named template that we'll invoke while processing the rest of the document. </p>
        </li>
        <li>
          <p>Generate the root element template. To do this, everything except the <tt class="literal">&lt;for-loop&gt;</tt> element is copied to the output document. The <tt class="literal">&lt;for-loop&gt;</tt> element will be converted into a call to the for-loop template we generated in the previous step. </p>
        </li>
        <li>
          <p>Close out the <tt class="literal">&lt;xsl:stylesheet&gt;</tt> element.</p>
        </li>
      </ol>  
    </div>
    <div class="sect2">
      <h3 class="sect2">4.8.3. Complications</h3>
      <p>There are a couple of complications in producing our stylesheet-generating stylesheet. First, we need to have some way to distinguish among the XSLT elements in the stylesheet being processed and the XSLT elements we're generating. Here's one way to do it:</p>
      <blockquote><pre class="code">
&lt;xsl:element name="xsl:template" 
  namespace="http://www.w3.org/1999/XSL/Transform"&gt;
  &lt;xsl:attribute name="name"&gt;for-loop&lt;/xsl:attribute&gt;
  &lt;xsl:element name="xsl:param" 
  namespace="http://www.w3.org/1999/XSL/Transform"&gt;
    &lt;xsl:attribute name="name"&gt;i&lt;/xsl:attribute&gt;
    &lt;xsl:attribute name="select"&gt;
      &lt;xsl:value-of select="@index-variable"/&gt;
    &lt;/xsl:attribute&gt;
  &lt;/xsl:element&gt;
  &lt;xsl:element name="xsl:param" namespace="http://www.w3.org/1999/XSL/Transform"&gt;
    &lt;xsl:attribute name="name"&gt;increment&lt;/xsl:attribute&gt;
    &lt;xsl:attribute name="select"&gt;
      &lt;xsl:value-of select="@increment"/&gt;
    &lt;/xsl:attribute&gt;
  &lt;/xsl:element&gt;
  &lt;xsl:element name="xsl:param" namespace="http://www.w3.org/1999/XSL/Transform"&gt;
    &lt;xsl:attribute name="name"&gt;operator&lt;/xsl:attribute&gt;
    &lt;xsl:attribute name="select"&gt;
      &lt;xsl:text&gt;'&lt;/xsl:text&gt;
      &lt;xsl:value-of select="@operator"/&gt;
      &lt;xsl:text&gt;'&lt;/xsl:text&gt;
    &lt;/xsl:attribute&gt;
  &lt;/xsl:element&gt;
  &lt;xsl:element name="xsl:param" namespace="http://www.w3.org/1999/XSL/Transform"&gt;
    &lt;xsl:attribute name="name"&gt;testValue&lt;/xsl:attribute&gt;
    &lt;xsl:attribute name="select"&gt;
      &lt;xsl:value-of select="@test-value"/&gt;
    &lt;/xsl:attribute&gt;
  &lt;/xsl:element&gt;
  &lt;xsl:element name="xsl:param" namespace="http://www.w3.org/1999/XSL/Transform"&gt;
    &lt;xsl:attribute name="name"&gt;iteration&lt;/xsl:attribute&gt;
    &lt;xsl:attribute name="select"&gt;1&lt;/xsl:attribute&gt;
  &lt;/xsl:element&gt;
  ...</pre></blockquote>
      <p>This lengthy listing generates this simple XML fragment:</p>
      <blockquote><pre class="code">
&lt;ns1:template name="for-loop"&gt;
  &lt;ns1:param name="i" select="0"/&gt;
  &lt;ns1:param name="increment" select="1"/&gt;
  &lt;ns1:param name="operator" select="'&lt;='"/&gt;
  &lt;ns1:param name="testValue" select="10"/&gt;
  &lt;ns1:param name="iteration" select="1"/&gt;
  ...</pre></blockquote>
      <p>This approach works, but we're doing an awful lot of work to create some fairly simple elements. For all the XSLT elements we're generating with <tt class="literal">&lt;xsl:element&gt;</tt> elements, we have to declare the namespace for each one. The obvious way of handling this would be to generate a namespace declaration on the <tt class="literal">&lt;xsl:stylesheet&gt;</tt> element:</p>
      <blockquote><pre class="code">
&lt;xsl:attribute name="xmlns:xsl"&gt;
  http://www.w3.org/1999/XSL/Transform
&lt;/xsl:attribute&gt;</pre></blockquote>
      <p>
<a name="INDEX-416" />
<a name="INDEX-417" />

Unfortunately, the XSLT specification states (in section 7.1.3) that this isn't legal. What we did in our previous example was add the <tt class="literal">namespace</tt> attribute to all XSLT elements we need to generate. (The XSLT processor is not required to use the namespace prefix we specified in the <tt class="literal">&lt;xsl:element&gt;</tt>, by the way.) To help us get around this awkward problem, the XSLT specification provides the <tt class="literal">&lt;xsl:namespace-alias&gt;</tt> element. This provision allows us to define an alias for the XSLT namespace (or any other namespace we want to use); we'll use the normal XSLT namespace for the stylesheet elements we use, and we'll use the alias for the stylesheet elements we generating. Here's how our new stylesheet looks:</p>
      <blockquote><pre class="code">
&lt;?xml version="1.0"?&gt;
&lt;xsl:stylesheet version="1.0"
  xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
  xmlns:xslout="can be anything, doesn't matter"&gt;

  &lt;xsl:output method="xml" indent="yes"/&gt;

  &lt;xsl:namespace-alias stylesheet-prefix="xslout" result-prefix="xsl"/&gt;

  &lt;xsl:template match="*|@*|text()|comment()|processing-instruction()"&gt;
    &lt;xsl:copy&gt;
      &lt;xsl:apply-templates 
        select="*|@*|text()|comment()|processing-instruction()"/&gt;
    &lt;/xsl:copy&gt;
  &lt;/xsl:template&gt;

  &lt;xsl:template match="for-loop"&gt;
    &lt;xslout:call-template name="for-loop"&gt;
      &lt;xslout:with-param name="i" select="{@index-variable}"/&gt;
      &lt;xslout:with-param name="increment" select="{@increment}"/&gt;
      &lt;xslout:with-param name="operator"&gt;
        &lt;xsl:attribute name="select"&gt;
          &lt;xsl:text&gt;'&lt;/xsl:text&gt;
          &lt;xsl:value-of select="@operator"/&gt;
          &lt;xsl:text&gt;'&lt;/xsl:text&gt;
        &lt;/xsl:attribute&gt;
      &lt;/xslout:with-param&gt;
      &lt;xslout:with-param name="testValue" select="{@test-value}"/&gt;
    &lt;/xslout:call-template&gt;
  &lt;/xsl:template&gt;

  &lt;xsl:template match="for-loop" mode="generate-template"&gt;
    &lt;xslout:variable name="newline"&gt;
&lt;xslout:text&gt;
&lt;/xslout:text&gt;
    &lt;/xslout:variable&gt;

    &lt;xslout:template name="for-loop"&gt;
      &lt;xslout:param name="i" select="@index-variable"/&gt;
      &lt;xslout:param name="increment" select="@increment"/&gt;
      &lt;xslout:param name="operator" select="@operator"/&gt;
      &lt;xslout:param name="testValue" select="@test-value"/&gt;
      &lt;xslout:param name="iteration" select="1"/&gt;

      &lt;xslout:variable name="testPassed"&gt;
        &lt;xslout:choose&gt;
          &lt;xslout:when test="starts-with($operator, '!=')"&gt;
            &lt;xslout:if test="$i != $testValue"&gt;
              &lt;xslout:text&gt;true&lt;/xslout:text&gt;
            &lt;/xslout:if&gt;
          &lt;/xslout:when&gt;
          &lt;xslout:when test="starts-with($operator, '&lt;=')"&gt;
            &lt;xslout:if test="$i &lt;= $testValue"&gt;
              &lt;xslout:text&gt;true&lt;/xslout:text&gt;
            &lt;/xslout:if&gt;
          &lt;/xslout:when&gt;
          &lt;xslout:when test="starts-with($operator, '&gt;=')"&gt;
            &lt;xslout:if test="$i &gt;= $testValue"&gt;
              &lt;xslout:text&gt;true&lt;/xslout:text&gt;
            &lt;/xslout:if&gt;
          &lt;/xslout:when&gt;
          &lt;xslout:when test="starts-with($operator, '=')"&gt;
            &lt;xslout:if test="$i = $testValue"&gt;
              &lt;xslout:text&gt;true&lt;/xslout:text&gt;
            &lt;/xslout:if&gt;
          &lt;/xslout:when&gt;
          &lt;xslout:when test="starts-with($operator, '&lt;')"&gt;
            &lt;xslout:if test="$i &lt; $testValue"&gt;
              &lt;xslout:text&gt;true&lt;/xslout:text&gt;
            &lt;/xslout:if&gt;
          &lt;/xslout:when&gt;
          &lt;xslout:when test="starts-with($operator, '&gt;')"&gt;
            &lt;xslout:if test="$i &gt; $testValue"&gt;
              &lt;xslout:text&gt;true&lt;/xslout:text&gt;
            &lt;/xslout:if&gt;
          &lt;/xslout:when&gt;
          &lt;xslout:otherwise&gt;
            &lt;xslout:message terminate="yes"&gt;
              &lt;xslout:text&gt;Sorry, the for-loop emulator only &lt;/xslout:text&gt;
              &lt;xslout:text&gt;handles six operators &lt;/xslout:text&gt;
              &lt;xslout:value-of select="$newline"/&gt;
              &lt;xslout:text&gt;(&lt; | &gt; | = | &lt;= | &gt;= | !=).  &lt;/xslout:text&gt;
              &lt;xslout:text&gt;The value &lt;/xslout:text&gt;
              &lt;xslout:value-of select="$operator"/&gt;
              &lt;xslout:text&gt; is not allowed.&lt;/xslout:text&gt;
              &lt;xslout:value-of select="$newline"/&gt;
            &lt;/xslout:message&gt;
          &lt;/xslout:otherwise&gt;
        &lt;/xslout:choose&gt;
      &lt;/xslout:variable&gt;

      &lt;xslout:if test="$testPassed='true'"&gt;
        &lt;xslout:comment&gt;From your stylesheet:&lt;/xslout:comment&gt;

        &lt;xsl:apply-templates select="*"/&gt;

        &lt;xslout:comment&gt;End of text from your stylesheet&lt;/xslout:comment&gt;

        &lt;xslout:call-template name="for-loop"&gt;
          &lt;xslout:with-param name="i" select="$i + $increment"/&gt;
          &lt;xslout:with-param name="increment" select="$increment"/&gt;
          &lt;xslout:with-param name="operator" select="$operator"/&gt;
          &lt;xslout:with-param name="testValue" select="$testValue"/&gt;
          &lt;xslout:with-param name="iteration" select="$iteration + 1"/&gt;
        &lt;/xslout:call-template&gt;
      &lt;/xslout:if&gt;
    &lt;/xslout:template&gt;
  &lt;/xsl:template&gt;

  &lt;xsl:template match="/"&gt;
    &lt;xslout:stylesheet version="1.0"&gt;
      &lt;xsl:apply-templates select="//for-loop" mode="generate-template"/&gt;
      &lt;xslout:template match="/"&gt;
        &lt;xsl:apply-templates select="*"/&gt;
      &lt;/xslout:template&gt;
    &lt;/xslout:stylesheet&gt;
  &lt;/xsl:template&gt;

&lt;/xsl:stylesheet&gt;</pre></blockquote>
      <p>Throughout our stylesheet, we used the usual <tt class="literal">xsl</tt> namespace for the stylesheet elements we use, and the <tt class="literal">xslout</tt> namespace for the stylesheet elements we generate. Notice that though we define the <tt class="literal">xslout</tt> namespace on the <tt class="literal">&lt;xsl:namespace-alias&gt;</tt> element, we still have to declare it on the <tt class="literal">&lt;xsl:stylesheet&gt;</tt> element. Also note that the value we define for the <tt class="literal">xslout</tt> namespace doesn't matter; the value referred to by the <tt class="literal">&lt;xsl:namespace-alias&gt;</tt> is used instead. </p>
      <p>Here is the stylesheet generated by our stylesheet-generating stylesheet:</p>
      <blockquote><pre class="code">
&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;xslout:stylesheet xmlns:xslout="http://www.w3.org/1999/XSL/Transform" 
  version="1.0"&gt;
&lt;xslout:variable name="newline"&gt;
&lt;xslout:text/&gt;
&lt;/xslout:variable&gt;
&lt;xslout:template name="for-loop"&gt;
&lt;xslout:param select="@index-variable" name="i"/&gt;
&lt;xslout:param select="@increment" name="increment"/&gt;
&lt;xslout:param select="@operator" name="operator"/&gt;
&lt;xslout:param select="@test-value" name="testValue"/&gt;
&lt;xslout:param select="1" name="iteration"/&gt;
&lt;xslout:variable name="testPassed"&gt;
&lt;xslout:choose&gt;
&lt;xslout:when test="starts-with($operator, '!=')"&gt;
&lt;xslout:if test="$i != $testValue"&gt;
&lt;xslout:text&gt;true&lt;/xslout:text&gt;
&lt;/xslout:if&gt;
&lt;/xslout:when&gt;
&lt;xslout:when test="starts-with($operator, '&lt;=')"&gt;
&lt;xslout:if test="$i &lt;= $testValue"&gt;
&lt;xslout:text&gt;true&lt;/xslout:text&gt;
&lt;/xslout:if&gt;
&lt;/xslout:when&gt;
&lt;xslout:when test="starts-with($operator, '&gt;=')"&gt;
&lt;xslout:if test="$i &gt;= $testValue"&gt;
&lt;xslout:text&gt;true&lt;/xslout:text&gt;
&lt;/xslout:if&gt;
&lt;/xslout:when&gt;
&lt;xslout:when test="starts-with($operator, '=')"&gt;
&lt;xslout:if test="$i = $testValue"&gt;
&lt;xslout:text&gt;true&lt;/xslout:text&gt;
&lt;/xslout:if&gt;
&lt;/xslout:when&gt;
&lt;xslout:when test="starts-with($operator, '&lt;')"&gt;
&lt;xslout:if test="$i &lt; $testValue"&gt;
&lt;xslout:text&gt;true&lt;/xslout:text&gt;
&lt;/xslout:if&gt;
&lt;/xslout:when&gt;
&lt;xslout:when test="starts-with($operator, '&gt;')"&gt;
&lt;xslout:if test="$i &gt; $testValue"&gt;
&lt;xslout:text&gt;true&lt;/xslout:text&gt;
&lt;/xslout:if&gt;
&lt;/xslout:when&gt;
&lt;xslout:otherwise&gt;
&lt;xslout:message terminate="yes"&gt;
&lt;xslout:text&gt;Sorry, the for-loop emulator only &lt;/xslout:text&gt;
&lt;xslout:text&gt;handles six operators &lt;/xslout:text&gt;
&lt;xslout:value-of select="$newline"/&gt;
&lt;xslout:text&gt;(&lt; | &gt; | = | &lt;= | &gt;= | !=).  &lt;/xslout:text&gt;
&lt;xslout:text&gt;The value &lt;/xslout:text&gt;
&lt;xslout:value-of select="$operator"/&gt;
&lt;xslout:text&gt; is not allowed.&lt;/xslout:text&gt;
&lt;xslout:value-of select="$newline"/&gt;
&lt;/xslout:message&gt;
&lt;/xslout:otherwise&gt;
&lt;/xslout:choose&gt;
&lt;/xslout:variable&gt;
&lt;xslout:if test="$testPassed='true'"&gt;
&lt;xslout:comment&gt;From your stylesheet:&lt;/xslout:comment&gt;
&lt;tr xmlns:xsl="http://www.w3.org/1999/XSL/Transform"&gt;
          &lt;td align="center"&gt;
            &lt;xsl:value-of select="$iteration"/&gt;
          &lt;/td&gt;
          &lt;td align="center"&gt;
            &lt;xsl:value-of select="$i"/&gt;
          &lt;/td&gt;
        &lt;/tr&gt;
&lt;xslout:comment&gt;End of text from your stylesheet&lt;/xslout:comment&gt;
&lt;xslout:call-template name="for-loop"&gt;
&lt;xslout:with-param select="$i + $increment" name="i"/&gt;
&lt;xslout:with-param select="$increment" name="increment"/&gt;
&lt;xslout:with-param select="$operator" name="operator"/&gt;
&lt;xslout:with-param select="$testValue" name="testValue"/&gt;
&lt;xslout:with-param select="$iteration + 1" name="iteration"/&gt;
&lt;/xslout:call-template&gt;
&lt;/xslout:if&gt;
&lt;/xslout:template&gt;
&lt;xslout:template match="/"&gt;
&lt;html xmlns:xsl="http://www.w3.org/1999/XSL/Transform"&gt;
  &lt;head&gt;
    &lt;title&gt;Text generated by our for loop processor&lt;/title&gt;
  &lt;/head&gt;
  &lt;body&gt;
    &lt;h1&gt;Text generated by our for loop processor&lt;/h1&gt;
    &lt;table border="1"&gt;
      &lt;tr&gt;
        &lt;th&gt;Iteration #&lt;/th&gt;
        &lt;th&gt;Value of &lt;i&gt;i&lt;/i&gt;
&lt;/th&gt;
      &lt;/tr&gt;
      &lt;xslout:call-template name="for-loop"&gt;
&lt;xslout:with-param select="0" name="i"/&gt;
&lt;xslout:with-param select="1" name="increment"/&gt;
&lt;xslout:with-param name="operator" select="'&lt;='"/&gt;
&lt;xslout:with-param select="10" name="testValue"/&gt;
&lt;/xslout:call-template&gt;
    &lt;/table&gt;
  &lt;/body&gt;
&lt;/html&gt;
&lt;/xslout:template&gt;
&lt;/xslout:stylesheet&gt;</pre></blockquote>

      <p>When we execute the generated stylesheet, it produces the following HTML document. (When rendered in a browser, the document generated by the stylesheet generated by our other stylesheet looks like <a href="ch04_08.htm">Figure 4-1</a>.)</p>
      <blockquote><pre class="code">
&lt;html&gt;
&lt;head&gt;
&lt;META http-equiv="Content-Type" content="text/html; charset=UTF-8"&gt;
&lt;title&gt;Text generated by our for loop processor&lt;/title&gt;
&lt;/head&gt;
&lt;body&gt;
&lt;h1&gt;Text generated by our for loop processor&lt;/h1&gt;
&lt;table border="1"&gt;
&lt;tr&gt;
&lt;th&gt;Iteration #&lt;/th&gt;&lt;th&gt;Value of &lt;i&gt;i&lt;/i&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="center"&gt;1&lt;/td&gt;&lt;td align="center"&gt;0&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="center"&gt;2&lt;/td&gt;&lt;td align="center"&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="center"&gt;3&lt;/td&gt;&lt;td align="center"&gt;2&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="center"&gt;4&lt;/td&gt;&lt;td align="center"&gt;3&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="center"&gt;5&lt;/td&gt;&lt;td align="center"&gt;4&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="center"&gt;6&lt;/td&gt;&lt;td align="center"&gt;5&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="center"&gt;7&lt;/td&gt;&lt;td align="center"&gt;6&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="center"&gt;8&lt;/td&gt;&lt;td align="center"&gt;7&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="center"&gt;9&lt;/td&gt;&lt;td align="center"&gt;8&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="center"&gt;10&lt;/td&gt;&lt;td align="center"&gt;9&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="center"&gt;11&lt;/td&gt;&lt;td align="center"&gt;10&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/body&gt;
&lt;/html&gt;</pre></blockquote>
      <a name="xslt-CHP-4-FIG-1" /><div class="figure"><img height="373" alt="Figure 4-1" src="figs/xslt.0401.gif" width="461" /></div><h4 class="objtitle">Figure 4-1. HTML document generated by our generated stylesheet</h4>

      <p>Notice in the generated document that the HTML <tt class="literal">&lt;title&gt;</tt> and <tt class="literal">&lt;h1&gt;</tt> values come directly from the XML template, as do the table headings and the definition of the HTML table itself.<a name="INDEX-418" />
<a name="INDEX-419" />
<a name="INDEX-420" />
<a name="INDEX-421" />

</p>
    </div>
  

<hr width="684" align="left" />
<div class="navbar"><table width="684" border="0"><tr><td align="left" valign="top" width="228"><a href="ch04_07.htm#xslt-CHP-4-SECT-7"><img alt="Previous" border="0" src="../gifs/txtpreva.gif" /></a></td><td align="center" valign="top" width="228"><a href="index.htm"><img alt="Home" border="0" src="../gifs/txthome.gif" /></a></td><td align="right" valign="top" width="228"><a href="ch04_09.htm"><img alt="Next" border="0" src="../gifs/txtnexta.gif" /></a></td></tr><tr><td align="left" valign="top" width="228">4.7. A Stylesheet That Emulates a for Loop</td><td align="center" valign="top" width="228"><a href="index/index.htm"><img alt="Book Index" border="0" src="../gifs/index.gif" /></a></td><td align="right" valign="top" width="228">4.9. Summary</td></tr></table></div>
<hr width="684" align="left" />

<img alt="Library Navigation Links" border="0" src="../gifs/navbar.gif" usemap="#library-map" />
<p><p><font size="-1"><a href="copyrght.htm">Copyright &copy; 2002</a> O'Reilly &amp; Associates. All rights reserved.</font></p>

<map name="library-map">
<area shape="rect" coords="0,0,85,93" href="../index.htm"><area shape="rect" coords="85,0,180,98" href="../sax2/index.htm"><area shape="rect" coords="182,-1,261,100" href="../xmlnut/index.htm"><area shape="rect" coords="263,1,384,96" href="../jxml/index.htm"><area shape="rect" coords="386,1,463,100" href="../jxslt/index.htm"><area shape="rect" coords="466,1,533,112" href="index.htm"><area shape="rect" coords="535,-1,610,108" href="../schema/index.htm"><area shape="rect" coords="613,1,696,121" href="../pxml/index.htm">
</map>

</body></html>