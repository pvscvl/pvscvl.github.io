<html><head><title>The XPath View of an XML Document (XSLT)</title><link rel="stylesheet" type="text/css" href="../style/style1.css" />

<meta name="DC.Creator" content="Doug Tidwell" /><meta name="DC.Format" content="text/xml" scheme="MIME" /><meta name="DC.Language" content="en-US" /><meta name="DC.Publisher" content="O'Reilly &amp; Associates, Inc." /><meta name="DC.Source" scheme="ISBN" content="0596000537L" /><meta name="DC.Subject.Keyword" content="stuff" /><meta name="DC.Title" content="XSLT" /><meta name="DC.Type" content="Text.Monograph" />

</head><body bgcolor="#ffffff">

<img alt="Book Home" border="0" src="gifs/smbanner.gif" usemap="#banner-map" /><map name="banner-map"><area shape="rect" coords="1,-2,616,66" href="index.htm" alt="XSL" /><area shape="rect" coords="629,-11,726,25" href="jobjects/fsearch.htm" alt="Search this book" /></map>

<div class="navbar"><table width="684" border="0"><tr><td align="left" valign="top" width="228"><a href="ch03_04.htm"><img alt="Previous" border="0" src="../gifs/txtpreva.gif" /></a></td><td align="center" valign="top" width="228"></td><td align="right" valign="top" width="228"><a href="ch03_06.htm"><img alt="Next" border="0" src="../gifs/txtnexta.gif" /></a></td></tr></table></div>



    <h2 class="sect1">3.5. The XPath View of an XML Document</h2>
    <p>
<a name="INDEX-286" />
<a name="INDEX-287" />
<a name="INDEX-288" />
<a name="INDEX-289" />


Before we leave the subject of XPath, we'll look at a stylesheet that generates a pictorial view of a document. The stylesheet has to distinguish between all of the different XPath node types, including any rarely used <tt class="literal">namespace</tt> nodes.</p>
    <div class="sect2">
      <h3 class="sect2">3.5.1. Output View</h3>
      <p><a href="ch03_05.htm#xslt-CHP-3-SECT-5">Figure 3-1</a> shows the output of our stylesheet. In this graphical view of the document, the nested HTML tables illustrate which nodes are contained inside of others, as well as the sequence in which these nodes occur in the original document. In the section of the document visible in <a href="ch03_05.htm#xslt-CHP-3-SECT-5">Figure 3-1</a>, the root of the document contains, in order, two processing instructions and two comments, followed by the <tt class="literal">&lt;sonnet&gt;</tt> element. The <tt class="literal">&lt;sonnet&gt;</tt> element, in turn, contains two attributes and an <tt class="literal">&lt;auth:author&gt;</tt> element. The <tt class="literal">&lt;auth:author&gt;</tt> element contains a namespace node and an element. Be aware that this stylesheet has its limitations; if you throw a very large XML document at it, it will generate an HTML file with many levels of nested tables -- probably more levels than your browser can handle. </p>
<a name="xslt-CHP-3-FIG-1" /><div class="figure"><img height="584" alt="Figure 3-1" src="figs/xslt.0301.gif" width="473" /></div><h4 class="objtitle">Figure 3-1. XPath tree view of an XML document</h4>
    </div>
    <div class="sect2">
      <h3 class="sect2">3.5.2. The Stylesheet</h3>
      <p>Now we'll take a look at the stylesheet and how it works. The stylesheet creates a number of nested tables to illustrate the XPath view of the document. We begin by writing the basic HTML elements to the output stream and creating a legend for our nested tree view:
<a name="INDEX-290" />


</p>
      <blockquote><pre class="code">
  &lt;xsl:template match="/"&gt;
    &lt;html&gt;
      &lt;head&gt;
        &lt;title&gt;XPath view of your document&lt;/title&gt;
        &lt;style type="text/css"&gt;
          &lt;xsl:comment&gt;
            span.literal         { font-family: Courier, monospace; }
          &lt;/xsl:comment&gt;
        &lt;/style&gt;
      &lt;/head&gt;
      &lt;body&gt;
        &lt;h1&gt;XPath view of your document&lt;/h1&gt;
        &lt;p&gt;The structure of your document (as defined by 
           the XPath standard) is outlined below.&lt;/p&gt;
        &lt;table cellspacing="5" cellpadding="2" border="0"&gt;
          &lt;tr&gt;
            &lt;td colspan="7"&gt;
              &lt;b&gt;Node types:&lt;/b&gt;
            &lt;/td&gt;
          &lt;/tr&gt;
          &lt;tr&gt;
            &lt;td bgcolor="#99CCCC"&gt;&lt;b&gt;root&lt;/b&gt;&lt;/td&gt;
            &lt;td bgcolor="#CCCC99"&gt;&lt;b&gt;element&lt;/b&gt;&lt;/td&gt;
            &lt;td bgcolor="#FFFF99"&gt;&lt;b&gt;attribute&lt;/b&gt;&lt;/td&gt;
            &lt;td bgcolor="#FFCC99"&gt;&lt;b&gt;text&lt;/b&gt;&lt;/td&gt;
            &lt;td bgcolor="#CCCCFF"&gt;&lt;b&gt;comment&lt;/b&gt;&lt;/td&gt;
            &lt;td bgcolor="#99FF99"&gt;&lt;b&gt;processing instruction&lt;/b&gt;&lt;/td&gt;
            &lt;td bgcolor="#CC99CC"&gt;&lt;b&gt;namespace&lt;/b&gt;&lt;/td&gt;
          &lt;/tr&gt;
        &lt;/table&gt;
        &lt;br /&gt;</pre></blockquote>
      <p>Having created the legend for our document, we select all the different types of nodes and represent them:</p>
      <blockquote><pre class="code">
&lt;xsl:for-each select="namespace::*"&gt;
  ...
&lt;/xsl:for-each&gt;
&lt;xsl:for-each select="*|comment()|processing-instruction()|text()"&gt;
            ...
          &lt;/xsl:for-each&gt;</pre></blockquote>
      
<p>The only difficult thing here was remembering to get all of the namespace nodes. These nodes are rarely used (with the exception of this example, I've never needed them), and they can only be selected with the <tt class="literal">namespace::</tt> axis. Also, we process the attribute nodes when we process their element node parents; that's why the <tt class="literal">select</tt> attribute just shown doesn't have <tt class="literal">@*</tt> in it. </p>
      <p>
<a name="INDEX-291" />
<a name="INDEX-292" />

Here's the complete stylesheet:</p>
      <blockquote><pre class="code">
&lt;?xml version="1.0"?&gt;
&lt;xsl:stylesheet version="1.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform"&gt;

  &lt;xsl:output method="html"/&gt;

  &lt;xsl:template match="/"&gt;
    &lt;html&gt;
      &lt;head&gt;
        &lt;title&gt;XPath view of your document&lt;/title&gt;
        &lt;style type="text/css"&gt;
          &lt;xsl:comment&gt;
            span.literal         { font-family: Courier, monospace; }
          &lt;/xsl:comment&gt;
        &lt;/style&gt;
      &lt;/head&gt;
      &lt;body&gt;
        &lt;h1&gt;XPath view of your document&lt;/h1&gt;
        &lt;p&gt;The structure of your document (as defined by 
          the XPath standard) is outlined below.&lt;/p&gt;
        &lt;table cellspacing="5" cellpadding="2" border="0"&gt;
          &lt;tr&gt;
            &lt;td colspan="7"&gt;
              &lt;b&gt;Node types:&lt;/b&gt;
            &lt;/td&gt;
          &lt;/tr&gt;
          &lt;tr&gt;
            &lt;td bgcolor="#99CCCC"&gt;&lt;b&gt;root&lt;/b&gt;&lt;/td&gt;
            &lt;td bgcolor="#CCCC99"&gt;&lt;b&gt;element&lt;/b&gt;&lt;/td&gt;
            &lt;td bgcolor="#FFFF99"&gt;&lt;b&gt;attribute&lt;/b&gt;&lt;/td&gt;
            &lt;td bgcolor="#FFCC99"&gt;&lt;b&gt;text&lt;/b&gt;&lt;/td&gt;
            &lt;td bgcolor="#CCCCFF"&gt;&lt;b&gt;comment&lt;/b&gt;&lt;/td&gt;
            &lt;td bgcolor="#99FF99"&gt;&lt;b&gt;processing instruction&lt;/b&gt;&lt;/td&gt;
            &lt;td bgcolor="#CC99CC"&gt;&lt;b&gt;namespace&lt;/b&gt;&lt;/td&gt;
          &lt;/tr&gt;
        &lt;/table&gt;
        &lt;br /&gt;
        &lt;table width="100%" border="1" bgcolor="#99CCCC" cellspacing="2"&gt;
          &lt;tr bgcolor="#99CCCC"&gt;
            &lt;td colspan="2"&gt;
              &lt;b&gt;root:&lt;/b&gt;
            &lt;/td&gt;
          &lt;/tr&gt;
          &lt;xsl:for-each select="namespace::*"&gt;
            &lt;tr bgcolor="#CC99CC"&gt;
              &lt;td width="15"&gt;   &lt;/td&gt;
              &lt;td&gt;
                &lt;xsl:call-template name="namespace-node"/&gt;
              &lt;/td&gt;
            &lt;/tr&gt;
          &lt;/xsl:for-each&gt;
          &lt;xsl:for-each select="*|comment()|processing-instruction()|text()"&gt;
            &lt;tr bgcolor="#99CCCC"&gt;
              &lt;td width="15"&gt;   &lt;/td&gt;
              &lt;td&gt;
                &lt;xsl:apply-templates select="."/&gt;
              &lt;/td&gt;
            &lt;/tr&gt;
          &lt;/xsl:for-each&gt;
        &lt;/table&gt;
      &lt;/body&gt;
    &lt;/html&gt;
  &lt;/xsl:template&gt;

  &lt;xsl:template match="comment()"&gt;
    &lt;table width="100%" cellspacing="2"&gt;
      &lt;tr&gt;
        &lt;td bgcolor="#CCCCFF"&gt;
          &lt;b&gt;comment: &lt;/b&gt;
          &lt;span class="literal"&gt;
            &lt;xsl:value-of select="."/&gt;
          &lt;/span&gt;
        &lt;/td&gt;
      &lt;/tr&gt;
    &lt;/table&gt;
  &lt;/xsl:template&gt;

  &lt;xsl:template match="processing-instruction()"&gt;
    &lt;table border="0" width="100%" cellspacing="2"&gt;
      &lt;tr&gt;
        &lt;td bgcolor="#99FF99"&gt;
          &lt;b&gt;processing instruction: &lt;/b&gt;
          &lt;span class="literal"&gt;
            &lt;xsl:text&gt;&amp;lt;?&lt;/xsl:text&gt;
            &lt;xsl:value-of select="name()"/&gt;
            &lt;xsl:text&gt;?&amp;gt;&lt;/xsl:text&gt;
            &lt;br /&gt;
            &lt;xsl:value-of select="."/&gt;
          &lt;/span&gt;
        &lt;/td&gt;
      &lt;/tr&gt;
    &lt;/table&gt;
  &lt;/xsl:template&gt;

  &lt;xsl:template match="text()"&gt;
    &lt;xsl:if test="string-length(normalize-space(.))"&gt;
      &lt;tr&gt;
        &lt;td bgcolor="#CCCC99" width="15"&gt;    &lt;/td&gt;
        &lt;td bgcolor="#FFCC99" width="100%"&gt;
          &lt;b&gt;text: &lt;/b&gt;
          &lt;span class="literal"&gt;
            &lt;xsl:value-of select="."/&gt;
          &lt;/span&gt;
        &lt;/td&gt;
      &lt;/tr&gt;
    &lt;/xsl:if&gt;
  &lt;/xsl:template&gt;

  &lt;xsl:template name="namespace-node"&gt;
    &lt;table border="0" width="100%" cellspacing="2"&gt;
      &lt;tr&gt;
        &lt;td bgcolor="#CC99CC"&gt;
          &lt;b&gt;namespace: &lt;/b&gt;
          &lt;span class="literal"&gt;
            &lt;xsl:value-of select="name()"/&gt;
          &lt;/span&gt;
          &lt;br /&gt;
          &lt;span class="literal"&gt;
            &lt;xsl:value-of select="."/&gt;
          &lt;/span&gt;
        &lt;/td&gt;
      &lt;/tr&gt;
    &lt;/table&gt;
  &lt;/xsl:template&gt;

  &lt;xsl:template match="*"&gt;
    &lt;table border="1" width="100%" cellspacing="2"&gt;
      &lt;xsl:choose&gt;
        &lt;xsl:when test="count(@*) &amp;gt; 0"&gt;
          &lt;tr&gt;
            &lt;td bgcolor="#CCCC99" colspan="2"&gt;
              &lt;b&gt;element: &lt;/b&gt;
              &lt;span class="literal"&gt;
                &lt;xsl:text&gt;&amp;lt;&lt;/xsl:text&gt;
                &lt;xsl:value-of select="name()"/&gt;
                &lt;xsl:text&gt;&amp;gt;&lt;/xsl:text&gt;
              &lt;/span&gt;
              &lt;table border="0" width="100%" cellspacing="2"&gt;
                &lt;tr&gt; 
                  &lt;td bgcolor="#CCCC99" width="15"&gt;   &lt;/td&gt;
                  &lt;td bgcolor="#FFFF99" width="20%"&gt;
                    &lt;b&gt;attribute name&lt;/b&gt;
                  &lt;/td&gt;
                  &lt;td bgcolor="#FFFF99"&gt;
                    &lt;b&gt;value&lt;/b&gt;
                  &lt;/td&gt;
                &lt;/tr&gt;
                &lt;xsl:for-each select="@*"&gt;
                  &lt;tr&gt;
                    &lt;td bgcolor="#CCCC99" width="15"&gt;   &lt;/td&gt;
                    &lt;td bgcolor="#FFFF99" width="20%"&gt;
                      &lt;span class="literal"&gt;
                        &lt;xsl:value-of select="name()"/&gt;
                      &lt;/span&gt;
                    &lt;/td&gt;
                    &lt;td bgcolor="#FFFF99"&gt;
                      &lt;span class="literal"&gt;
                        &lt;xsl:value-of select="."/&gt;
                      &lt;/span&gt;
                    &lt;/td&gt;
                  &lt;/tr&gt;
                &lt;/xsl:for-each&gt;
              &lt;/table&gt;
            &lt;/td&gt;
          &lt;/tr&gt;
        &lt;/xsl:when&gt;
        &lt;xsl:otherwise&gt;
          &lt;tr&gt;
            &lt;td bgcolor="#CCCC99" colspan="2"&gt;
              &lt;b&gt;element: &lt;/b&gt;
              &lt;span class="literal"&gt;
                &lt;xsl:text&gt;&amp;lt;&lt;/xsl:text&gt;
                &lt;xsl:value-of select="name()"/&gt;
                &lt;xsl:text&gt;&amp;gt;&lt;/xsl:text&gt;
              &lt;/span&gt;
            &lt;/td&gt;
          &lt;/tr&gt;
        &lt;/xsl:otherwise&gt;
      &lt;/xsl:choose&gt;
      &lt;xsl:for-each select="namespace::*"&gt;
        &lt;tr&gt;
          &lt;td bgcolor="#CCCC99" width="15"&gt;    &lt;/td&gt;
          &lt;td bgcolor="#CC99CC"&gt;
            &lt;xsl:call-template name="namespace-node"/&gt;
          &lt;/td&gt;
        &lt;/tr&gt;
      &lt;/xsl:for-each&gt;
      &lt;xsl:for-each select="*|comment()|processing-instruction()|text()"&gt;
        &lt;tr bgcolor="#CCCC99"&gt;
          &lt;td width="15"&gt;   &lt;/td&gt;
          &lt;td&gt;
            &lt;xsl:apply-templates select="."/&gt;
          &lt;/td&gt;
        &lt;/tr&gt;
      &lt;/xsl:for-each&gt;
    &lt;/table&gt;
  &lt;/xsl:template&gt;

&lt;/xsl:stylesheet&gt;</pre></blockquote>
      <p>Before we leave this example, there are a couple of other techniques worth mentioning here. First, notice that we used CSS to format some of the output. XSLT and CSS aren't mutually exclusive; you can use XSLT to generate CSS as part of an HTML page, as we demonstrated here. Second, we used wildcard expressions like <tt class="literal">*</tt> and <tt class="literal">@*</tt> to process all the elements and attributes in our document. Use of these expressions allows us to apply this stylesheet to any XML document, regardless of the tags it uses. Because we use these wildcard expressions, we have to use the <tt class="literal">name()</tt> function to get the name of the element or attribute we're currently working with. Third, notice that we used conditional logic and the expression <tt class="literal">count(@*) &amp;gt; 0</tt> to determine whether a given element has attributes. We'll talk more about conditional logic in the next chapter.
<a name="INDEX-293" />
<a name="INDEX-294" />
<a name="INDEX-295" />
<a name="INDEX-296" />
<a name="INDEX-297" />
<a name="INDEX-298" />
<a name="INDEX-299" />



</p>
    </div>
  

<hr width="684" align="left" />
<div class="navbar"><table width="684" border="0"><tr><td align="left" valign="top" width="228"><a href="ch03_04.htm"><img alt="Previous" border="0" src="../gifs/txtpreva.gif" /></a></td><td align="center" valign="top" width="228"><a href="index.htm"><img alt="Home" border="0" src="../gifs/txthome.gif" /></a></td><td align="right" valign="top" width="228"><a href="ch03_06.htm"><img alt="Next" border="0" src="../gifs/txtnexta.gif" /></a></td></tr><tr><td align="left" valign="top" width="228">3.4. XPath Datatypes</td><td align="center" valign="top" width="228"><a href="index/index.htm"><img alt="Book Index" border="0" src="../gifs/index.gif" /></a></td><td align="right" valign="top" width="228">3.6. Summary</td></tr></table></div>
<hr width="684" align="left" />

<img alt="Library Navigation Links" border="0" src="../gifs/navbar.gif" usemap="#library-map" />
<p><p><font size="-1"><a href="copyrght.htm">Copyright &copy; 2002</a> O'Reilly &amp; Associates. All rights reserved.</font></p>

<map name="library-map">
<area shape="rect" coords="0,0,85,93" href="../index.htm"><area shape="rect" coords="85,0,180,98" href="../sax2/index.htm"><area shape="rect" coords="182,-1,261,100" href="../xmlnut/index.htm"><area shape="rect" coords="263,1,384,96" href="../jxml/index.htm"><area shape="rect" coords="386,1,463,100" href="../jxslt/index.htm"><area shape="rect" coords="466,1,533,112" href="index.htm"><area shape="rect" coords="535,-1,610,108" href="../schema/index.htm"><area shape="rect" coords="613,1,696,121" href="../pxml/index.htm">
</map>

</body></html>