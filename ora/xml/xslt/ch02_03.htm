<html><head><title>How a Stylesheet Is Processed (XSLT)</title><link rel="stylesheet" type="text/css" href="../style/style1.css" />

<meta name="DC.Creator" content="Doug Tidwell" /><meta name="DC.Format" content="text/xml" scheme="MIME" /><meta name="DC.Language" content="en-US" /><meta name="DC.Publisher" content="O'Reilly &amp; Associates, Inc." /><meta name="DC.Source" scheme="ISBN" content="0596000537L" /><meta name="DC.Subject.Keyword" content="stuff" /><meta name="DC.Title" content="XSLT" /><meta name="DC.Type" content="Text.Monograph" />

</head><body bgcolor="#ffffff">

<img alt="Book Home" border="0" src="gifs/smbanner.gif" usemap="#banner-map" /><map name="banner-map"><area shape="rect" coords="1,-2,616,66" href="index.htm" alt="XSL" /><area shape="rect" coords="629,-11,726,25" href="jobjects/fsearch.htm" alt="Search this book" /></map>

<div class="navbar"><table width="684" border="0"><tr><td align="left" valign="top" width="228"><a href="ch02_02.htm"><img alt="Previous" border="0" src="../gifs/txtpreva.gif" /></a></td><td align="center" valign="top" width="228"></td><td align="right" valign="top" width="228"><a href="ch02_04.htm"><img alt="Next" border="0" src="../gifs/txtnexta.gif" /></a></td></tr></table></div>



    <h2 class="sect1">2.3. How a Stylesheet Is Processed</h2>
      <p>
<a name="INDEX-119" />

Now that we're giddy with the excitement of having transformed an XML document, let's discuss the stylesheet and how it works. A big part of the XSLT learning curve is figuring out how stylesheets are processed. To make this clear, we'll go through the steps taken by the stylesheet processor to create the HTML document we want. </p>
    <div class="sect2">
      <h3 class="sect2">2.3.1. Parsing the Stylesheet</h3>
      <p>
<a name="INDEX-120" />

Before the XSLT processor can process your stylesheet, it has to read it. Conceptually, it doesn't matter how the XSLT processor stores the information from your stylesheet. For our purposes, we'll just assume that the XSLT processor can magically find anything it needs in our stylesheet. (If you really must know, Xalan uses an optimized table structure to represent the stylesheet; other processors may use that approach or something else.)  </p>
      <p>Our stylesheet contains three items: an <tt class="literal">&lt;xsl:output&gt;</tt> element that specifies HTML as the output format and two <tt class="literal">&lt;xsl:template&gt;</tt> elements that specify how parts of our XML document should be transformed. </p>
    </div>
    <div class="sect2">
      <h3 class="sect2">2.3.2. Parsing the Transformee</h3>
      <p>Now that the XSLT processor has processed the stylesheet, it needs to read the document it's supposed to transform. The XSLT processor builds a tree view from the XML source. This tree view is what we'll keep in mind when we build our stylesheets.</p>
    </div>
    <div class="sect2">
      <h3 class="sect2">2.3.3. Lather, Rinse, Repeat</h3>
      <p>Finally, we're ready to begin the actual work of transforming the XML document. The XSLT processor may set some properties based on your stylesheet (in the previous example, it would set its output method to HTML), then it begins processing as follows:</p>
      <ul>
        <li>
          <p>Do I have any nodes to process?  The nodes to process are represented by something called the <em class="emphasis">context</em>. Initially the context is the root of the XML document, but it changes throughout the stylesheet. We'll talk about the context extensively in the next chapter. (Note: all XSLT processors enjoy being anthropomorphized, so I'll often refer to them this way.)</p>
        </li>
      </ul>
      <p>While any nodes are in the context, do the following:</p>
      <ul>
        <li>
          <p>Get the next node from the context. Do I have any <tt class="literal">&lt;xsl:template&gt;</tt>s that match it?  (In our example, the next node is the root node, represented in XPath syntax by <tt class="literal">/</tt>.)  There is a template that matches this node -- it's the one that begins <tt class="literal">&lt;xsl:template match="/"&gt;</tt>. </p>

        </li>
        <li>
          <p>If one or more
        <tt class="literal">&lt;xsl:template&gt;</tt>s match, pick the right
        one and process it. (The right one is the most specific
        template. For example, <tt class="literal">&lt;xsl:template
        match="/html/body/h1/p"&gt;</tt> is more specific than
        <tt class="literal">&lt;xsl:template match="p"&gt;</tt>. See the
        discussion of the <tt class="literal">&lt;xsl:template&gt;</tt>
        element for more information.)  If no
        <tt class="literal">&lt;xsl:template&gt;</tt>s match, the XSLT
        processor uses some built-in rules. See <a href="ch02_04.htm">Section 2.4.5, "Built-in Template Rules"</a> later in this chapter for more information.</p>
        </li>
      </ul>
      <p>Notice that this is a recursive processing model. We process the current node by finding the right <tt class="literal">xsl:template</tt> for it. That <tt class="literal">xsl:template</tt> may in turn invoke other <tt class="literal">xsl:template</tt>s, which invoke <tt class="literal">xsl:template</tt>s as well. This model takes some getting used to, but it is actually quite elegant once you're accustomed to it. </p>
      <blockquote><b>NOTE:</b> 
        If it helps, you can think of the root template (<tt class="literal">&lt;xsl:template match="/"&gt;</tt>) as the <tt class="literal">main</tt> method in a C, C++, or Java program. No matter how much code you've written, everything starts in <tt class="literal">main</tt>. Similarly, no matter how many <tt class="literal">&lt;xsl:template&gt;</tt>s you've defined in your stylesheet, everything starts in <tt class="literal">&lt;xsl:template match="/"&gt;</tt>.</p>
      </blockquote>
    </div>
    <div class="sect2">
      <h3 class="sect2">2.3.4. Walking Through Our Example</h3>
      
<p>Let's revisit our example and see how the XSLT processor transforms our document:</p>
      <ol>
        <li>
          <p>The XSLT stylesheet is parsed and converted into a tree structure.</p>
        </li>
        <li>
          <p>The XML document is also parsed and converted into a tree structure. (Don't worry too much about what that tree looks like or how it works; for now, just assume that the XSLT processor knows everything that's in the XML document and the XSLT stylesheet. After the first two steps are done, when we describe various things using XSLT and XPath, the processor knows what we're talking about.)</p>
        </li>
        <li>
          <p>The XSLT processor is now at the root of the XML document. This is the original context.</p>
        </li>
        <li>
          <p>There is an <tt class="literal">xsl:template</tt> that matches the document root:</p>
          <blockquote><pre class="code">
&lt;xsl:template match="/"&gt;
  &lt;xsl:apply-templates select="greeting"/&gt;
&lt;/xsl:template&gt;</pre></blockquote>
          <p>A single forward slash (<tt class="literal">/</tt>) is an <em class="emphasis">XPath expression</em> that means "the root of the document."</p>
        </li>
        <li>
          <p>

<a name="INDEX-121" />

Now the process begins again inside the <tt class="literal">xsl:template</tt>. Our only instruction here is to apply whatever <tt class="literal">xsl:template</tt>s might apply to any <tt class="literal">greeting</tt> elements in the current context. The current context inside this template is defined by the <tt class="literal">match</tt> attribute of the <tt class="literal">xsl:template</tt> element. This means the XSLT processor is looking for any <tt class="literal">greeting</tt> elements at the document root.</p>
          <p>Because one <tt class="literal">greeting</tt> element is at the document root, the XSLT processor must deal with it. (If more than one element matches in the current context, the XSLT processor deals with each one in the order in which they appear in the document; this is known as <em class="emphasis">document order</em>.)  Looking at the <tt class="literal">greeting</tt> element, the <tt class="literal">xsl:template</tt> that applies to it is the second <tt class="literal">xsl:template</tt> in our stylesheet:</p>
          <blockquote><pre class="code">
&lt;xsl:template match="greeting"&gt;
  &lt;html&gt;
    &lt;body&gt;
      &lt;h1&gt;
        &lt;xsl:value-of select="."/&gt;
      &lt;/h1&gt;
    &lt;/body&gt;
  &lt;/html&gt;
&lt;/xsl:template&gt;</pre></blockquote>
        </li>
        <li>
          <p>Now we're in the <tt class="literal">xsl:template</tt> for the <tt class="literal">greeting</tt> element. The first three elements in this <tt class="literal">xsl:template</tt> (<tt class="literal">&lt;html&gt;</tt>, <tt class="literal">&lt;body&gt;</tt>, and <tt class="literal">&lt;h1&gt;</tt>) are HTML elements. Because they're not defined with a namespace declaration, the XSLT processor passes those HTML elements through to the output stream unaltered. </p>
          <p>
<a name="INDEX-122" />
<a name="INDEX-123" />

The middle of our <tt class="literal">xsl:template</tt> is an <tt class="literal">xsl:value-of</tt> element. This element writes the value of something to the output stream. In this case, we're using the XPath expression <tt class="literal">.</tt> (a single period) to indicate the current node. The XSLT processor looks at the current node (the <tt class="literal">greeting</tt> element we're currently processing) and outputs its text. </p>
          <p>Because our stylesheet is an XML document (we're really harping on that, aren't we?), we have to end the <tt class="literal">&lt;h1&gt;</tt>, <tt class="literal">&lt;body&gt;</tt>, and <tt class="literal">&lt;html&gt;</tt> elements here. At this point, we're done with this template, so control returns to the template that invoked us.</p>
        </li>
        <li>
          <p>Now we're back in the template for the root element. We've processed all the <tt class="literal">&lt;greeting&gt;</tt> elements, so we're finished with this template.</p>
        </li>
        <li>
          <p>No more elements are in the current context (there is only one root element), so the XSLT processor is done.
<a name="INDEX-124" />

</p>
        </li>
      </ol>
    </div>
  

<hr width="684" align="left" />
<div class="navbar"><table width="684" border="0"><tr><td align="left" valign="top" width="228"><a href="ch02_02.htm"><img alt="Previous" border="0" src="../gifs/txtpreva.gif" /></a></td><td align="center" valign="top" width="228"><a href="index.htm"><img alt="Home" border="0" src="../gifs/txthome.gif" /></a></td><td align="right" valign="top" width="228"><a href="ch02_04.htm"><img alt="Next" border="0" src="../gifs/txtnexta.gif" /></a></td></tr><tr><td align="left" valign="top" width="228">2.2. Transforming Hello World</td><td align="center" valign="top" width="228"><a href="index/index.htm"><img alt="Book Index" border="0" src="../gifs/index.gif" /></a></td><td align="right" valign="top" width="228">2.4. Stylesheet Structure</td></tr></table></div>
<hr width="684" align="left" />

<img alt="Library Navigation Links" border="0" src="../gifs/navbar.gif" usemap="#library-map" />
<p><p><font size="-1"><a href="copyrght.htm">Copyright &copy; 2002</a> O'Reilly &amp; Associates. All rights reserved.</font></p>

<map name="library-map">
<area shape="rect" coords="0,0,85,93" href="../index.htm"><area shape="rect" coords="85,0,180,98" href="../sax2/index.htm"><area shape="rect" coords="182,-1,261,100" href="../xmlnut/index.htm"><area shape="rect" coords="263,1,384,96" href="../jxml/index.htm"><area shape="rect" coords="386,1,463,100" href="../jxslt/index.htm"><area shape="rect" coords="466,1,533,112" href="index.htm"><area shape="rect" coords="535,-1,610,108" href="../schema/index.htm"><area shape="rect" coords="613,1,696,121" href="../pxml/index.htm">
</map>

</body></html>
