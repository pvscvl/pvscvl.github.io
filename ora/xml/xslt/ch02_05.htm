<html><head><title>Sample Gallery (XSLT)</title><link rel="stylesheet" type="text/css" href="../style/style1.css" />

<meta name="DC.Creator" content="Doug Tidwell" /><meta name="DC.Format" content="text/xml" scheme="MIME" /><meta name="DC.Language" content="en-US" /><meta name="DC.Publisher" content="O'Reilly &amp; Associates, Inc." /><meta name="DC.Source" scheme="ISBN" content="0596000537L" /><meta name="DC.Subject.Keyword" content="stuff" /><meta name="DC.Title" content="XSLT" /><meta name="DC.Type" content="Text.Monograph" />

</head><body bgcolor="#ffffff">

<img alt="Book Home" border="0" src="gifs/smbanner.gif" usemap="#banner-map" /><map name="banner-map"><area shape="rect" coords="1,-2,616,66" href="index.htm" alt="XSL" /><area shape="rect" coords="629,-11,726,25" href="jobjects/fsearch.htm" alt="Search this book" /></map>

<div class="navbar"><table width="684" border="0"><tr><td align="left" valign="top" width="228"><a href="ch02_04.htm"><img alt="Previous" border="0" src="../gifs/txtpreva.gif" /></a></td><td align="center" valign="top" width="228"></td><td align="right" valign="top" width="228"><a href="ch02_06.htm"><img alt="Next" border="0" src="../gifs/txtnexta.gif" /></a></td></tr></table></div>



    <h2 class="sect1">2.5. Sample Gallery</h2>
    <p>Before we get into more advanced topics, we'll transform our Hello World document in other ways. We'll look through simple stylesheets that convert our small XML document into the following things:</p>
    <ul>
      <li>
        <p>A Scalable Vector Graphics (SVG) File</p>
      </li>
      <li>
        <p>A PDF file</p>
      </li>
      <li>
        <p>A Java program</p>
      </li>
      <li>
        <p>A Virtual Reality Modeling Language (VRML) file</p>
      </li>
    </ul>
    <div class="sect2">
      <h3 class="sect2">2.5.1. The Hello World SVG File</h3>
      <p>
<a name="INDEX-146" />
<a name="INDEX-147" />


Our first example will convert our Hello World document into an SVG file:</p>
      <blockquote><pre class="code">
&lt;?xml version="1.0"?&gt;
&lt;xsl:stylesheet version="1.0" 
  xmlns:xsl="http://www.w3.org/1999/XSL/Transform"&gt;

  &lt;xsl:output method="xml"
    doctype-public="-//W3C//DTD SVG 20001102//EN"
    doctype-system=
      "http://www.w3.org/TR/2000/CR-SVG-20001102/DTD/svg-20001102.dtd"/&gt;

  &lt;xsl:template match="/"&gt;
    &lt;svg width="8cm" height="4cm"&gt;
      &lt;g&gt;
        &lt;defs&gt;
          &lt;radialGradient id="MyGradient"
            cx="4cm" cy="2cm" r="3cm" fx="4cm" fy="2cm"&gt;
            &lt;stop offset="0%" style="stop-color:red"/&gt;
            &lt;stop offset="50%" style="stop-color:blue"/&gt;
            &lt;stop offset="100%" style="stop-color:red"/&gt;
          &lt;/radialGradient&gt;
        &lt;/defs&gt;
        &lt;rect style="fill:url(#MyGradient); stroke:black"
          x="1cm" y="1cm" width="6cm" height="2cm"/&gt;
        &lt;text x="4cm" y="2.2cm" text-anchor="middle" 
          style="font-family:Verdana; font-size:24; 
          font-weight:bold; fill:black"&gt;
          &lt;xsl:apply-templates select="greeting"/&gt;
        &lt;/text&gt;
      &lt;/g&gt;
    &lt;/svg&gt;
  &lt;/xsl:template&gt;

  &lt;xsl:template match="greeting"&gt;
    &lt;xsl:value-of select="."/&gt;
  &lt;/xsl:template&gt;

&lt;/xsl:stylesheet&gt;</pre></blockquote>
      <p>As you can see from this stylesheet, most of the code here simply sets up the structure of the SVG document. This is typical of many stylesheets; once you learn what the output format should be, you merely extract content from the XML source document and insert it into the output document at the correct spot. When we transform the Hello World document with this stylesheet, here are the results:</p>
      <blockquote><pre class="code">
&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 20001102//EN" 
        "http://www.w3.org/TR/2000/CR-SVG-20001102/DTD/svg-20001102.dtd"&gt;
&lt;svg height="4cm" width="8cm"&gt;
  &lt;g&gt;
    &lt;defs&gt;
      &lt;radialGradient fy="2cm" fx="4cm" r="3cm" cy="2cm" 
        cx="4cm" id="MyGradient"&gt;
        &lt;stop style="stop-color:red" offset="0%"/&gt;
        &lt;stop style="stop-color:blue" offset="50%"/&gt;
        &lt;stop style="stop-color:red" offset="100%"/&gt;
      &lt;/radialGradient&gt;
    &lt;/defs&gt;
    &lt;rect height="2cm" width="6cm" y="1cm" x="1cm" 
        style="fill:url(#MyGradient); stroke:black"/&gt;
    &lt;text style="font-family:Verdana; font-size:24; 
        font-weight:bold; fill:black" 
        text-anchor="middle" y="2.2cm" x="4cm"&gt;
  Hello, World!
    &lt;/text&gt;
  &lt;/g&gt;
&lt;/svg&gt;</pre></blockquote>
      <p>When rendered in an SVG viewer, our Hello World document
      looks like <a href="ch02_05.htm">Figure 2-2</a>.</p>
      <a name="xslt-CHP-2-FIG-2" /><div class="figure"><img height="124" alt="Figure 2-2" src="figs/xslt.0202.gif" width="367" /></div><h4 class="objtitle">Figure 2-2. SVG version of our Hello World file</h4>
      <p>
<a name="INDEX-148" />

This screen capture was made using the Adobe SVG plug-in inside the Internet Explorer browser. You can find the plug-in at <a href="../../../../../../www.adobe.com/svg/">http://www.adobe.com/svg/</a>. </p>
      <p>We used Xalan to generate the SVG file:</p>
      <blockquote><pre class="code">
java org.apache.xalan.xslt.Process -in greeting.xml -xsl svg-greeting.xsl 
  -out greeting.svg</pre></blockquote>
      <p>(This command should all be on a single line.)
<a name="INDEX-149" />
<a name="INDEX-150" />


</p>
    </div>
    <div class="sect2">
      <h3 class="sect2">2.5.2. The Hello World PDF File</h3>
      <p>
<a name="INDEX-151" />
<a name="INDEX-152" />



To convert the Hello World file into a PDF file, we'll first convert our XML file into formatting objects. The Extensible Stylesheet Language for Formatting Objects (XSL-FO) is an XML vocabulary that describes how content should be rendered. Here is our stylesheet:</p>
      <blockquote><pre class="code">
&lt;?xml version="1.0"?&gt;
&lt;xsl:stylesheet version="1.0" 
  xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
  xmlns:fo="http://www.w3.org/1999/XSL/Format"&gt;

  &lt;xsl:output method="xml"/&gt;

  &lt;xsl:template match="/"&gt;
    &lt;fo:root xmlns:fo="http://www.w3.org/1999/XSL/Format"&gt;
      &lt;fo:layout-master-set&gt;
        &lt;fo:simple-page-master margin-right="75pt" margin-left="75pt" 
          page-height="11in" page-width="8.5in"
          margin-bottom="25pt" margin-top="25pt" master-name="main"&gt;
          &lt;fo:region-before extent="25pt"/&gt;
          &lt;fo:region-body margin-top="50pt" margin-bottom="50pt"/&gt;
          &lt;fo:region-after extent="25pt"/&gt;
        &lt;/fo:simple-page-master&gt;
        &lt;fo:page-sequence-master master-name="standard"&gt;
          &lt;fo:repeatable-page-master-alternatives&gt;
            &lt;fo:conditional-page-master-reference 
              master-name="main" odd-or-even="any"/&gt;
          &lt;/fo:repeatable-page-master-alternatives&gt;
        &lt;/fo:page-sequence-master&gt;
      &lt;/fo:layout-master-set&gt;
      
      &lt;fo:page-sequence master-name="standard"&gt;
        &lt;fo:flow flow-name="xsl-region-body"&gt;
          &lt;xsl:apply-templates select="greeting"/&gt;
        &lt;/fo:flow&gt;
      &lt;/fo:page-sequence&gt;
    &lt;/fo:root&gt;
  &lt;/xsl:template&gt;

  &lt;xsl:template match="greeting"&gt;
    &lt;fo:block line-height="40pt" font-size="36pt" text-align="center"&gt;
      &lt;xsl:value-of select="."/&gt;
    &lt;/fo:block&gt;
  &lt;/xsl:template&gt;

&lt;/xsl:stylesheet&gt;</pre></blockquote>
      <p>This stylesheet converts our Hello World document into the following XML file:</p>
      <blockquote><pre class="code">
&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;fo:root xmlns:fo="http://www.w3.org/1999/XSL/Format"&gt;
  &lt;fo:layout-master-set&gt;
    &lt;fo:simple-page-master master-name="main" margin-top="25pt" 
        margin-bottom="25pt" page-width="8.5in" page-height="11in" 
        margin-left="75pt" margin-right="75pt"&gt;
      &lt;fo:region-before extent="25pt"/&gt;
      &lt;fo:region-body margin-bottom="50pt" margin-top="50pt"/&gt;
      &lt;fo:region-after extent="25pt"/&gt;
    &lt;/fo:simple-page-master&gt;
    &lt;fo:page-sequence-master master-name="standard"&gt;
      &lt;fo:repeatable-page-master-alternatives&gt;
        &lt;fo:conditional-page-master-reference odd-or-even="any" 
        master-name="main"/&gt;
      &lt;/fo:repeatable-page-master-alternatives&gt;
    &lt;/fo:page-sequence-master&gt;
  &lt;/fo:layout-master-set&gt;
  &lt;fo:page-sequence master-name="standard"&gt;
    &lt;fo:flow flow-name="xsl-region-body"&gt;
      &lt;fo:block text-align="center" font-size="36pt" line-height="40pt"&gt;
  Hello, World!
      &lt;/fo:block&gt;
    &lt;/fo:flow&gt;
  &lt;/fo:page-sequence&gt;
&lt;/fo:root&gt;</pre></blockquote>
      <p>We generated this file of formatting objects with this command:</p>
      <blockquote><pre class="code">
java org.apache.xalan.xslt.Process -in greeting.xml -xsl fo-greeting.xsl 
  -out greeting.fo</pre></blockquote>
      <p>This lengthy set of tags uses formatting objects to
      describe the size of the page, the margins, font sizes, line
      heights, etc., along with the text extracted from our XML source
      document. Now that we have the formatting objects, we can use
      the Apache XML Project's FOP tool. After converting the
      formatting objects to PDF, the PDF file looks like <a href="ch02_05.htm">Figure 2-3</a>.</p>
      <a name="xslt-CHP-2-FIG-3" /><div class="figure"><img height="275" alt="Figure 2-3" src="figs/xslt.0203.gif" width="448" /></div><h4 class="objtitle">Figure 2-3. PDF version of our Hello World file</h4>
      <p>Here's the command used to convert our file of formatting objects into a PDF file:</p>
      <blockquote><pre class="code">
java org.apache.fop.apps.CommandLine greeting.fo greeting.pdf</pre></blockquote>
    </div>
    <div class="sect2">
      <h3 class="sect2">2.5.3. The Hello World Java Program</h3>
      <p>
<a name="INDEX-153" />
<a name="INDEX-154" />


Our last two transformations don't involve XML vocabularies at all; they use XSLT to convert the Hello World document into other formats. Next, we'll transform our XML source document into the source code for a Java program. When the program is compiled and executed, it prints the message from the XML document to the console. Here's our stylesheet:</p>
      <blockquote><pre class="code">
&lt;?xml version="1.0"?&gt;
&lt;xsl:stylesheet version="1.0" 
  xmlns:xsl="http://www.w3.org/1999/XSL/Transform"&gt;

  &lt;xsl:output method="text"/&gt;

  &lt;xsl:template match="/"&gt;
    &lt;xsl:text&gt;
public class Greeting
{
  public static void main(String[] argv)
  {
    &lt;/xsl:text&gt;
    &lt;xsl:apply-templates select="greeting"/&gt;
    &lt;xsl:text&gt;
  }
}
    &lt;/xsl:text&gt;
  &lt;/xsl:template&gt;

  &lt;xsl:template match="greeting"&gt;
    &lt;xsl:text&gt;System.out.println("&lt;/xsl:text&gt;
    &lt;xsl:value-of select="normalize-space()"/&gt;
    &lt;xsl:text&gt;");&lt;/xsl:text&gt;
  &lt;/xsl:template&gt;

&lt;/xsl:stylesheet&gt;</pre></blockquote>
      <p>(Notice that we used <tt class="literal">&lt;xsl:output method="text"&gt;</tt> to generate text, not markup.)  Our stylesheet produces these results:</p>
      <blockquote><pre class="code">

public class Greeting
{
  public static void main(String[] argv)
  {
    System.out.println("Hello, World!");
  }
}</pre></blockquote>
      <p>We generated this Java code with the following command:</p>
      <blockquote><pre class="code">
java org.apache.xalan.xslt.Process -in greeting.xml -xsl java-greeting.xsl
  -out Greeting.java</pre></blockquote>
      <p>(Notice that the name of the generated file must start with an uppercase letter; Java requires that the name of the file must match the name of the class it contains. Also, this command should be entered on a single line.)  When executed, our generated Java program looks like this:</p>
      <blockquote><pre class="code">
C:\&gt; java Greeting
Hello, World!</pre></blockquote>
      <p>Although generating Java code from an XML document may seem strange, it is actually a common technique. The FOP tool from the Apache XML Project does this; it defines a number of properties in XML, then generates the Java source code to create class definitions and <tt class="literal">get</tt> and <tt class="literal">set</tt> methods for each of those properties.
<a name="INDEX-155" />
<a name="INDEX-156" />


</p>
    </div>
    <div class="sect2">
      <h3 class="sect2">2.5.4. The Hello World VRML File</h3>
      <p>
<a name="INDEX-157" />
<a name="INDEX-158" />

For our final transformation, we'll create a VRML file from our XML source document. Here's the stylesheet that does the trick:</p>
      <blockquote><pre class="code">
&lt;?xml version="1.0"?&gt;
&lt;xsl:stylesheet version="1.0" 
  xmlns:xsl="http://www.w3.org/1999/XSL/Transform"&gt;

  &lt;xsl:output method="text"/&gt;

  &lt;xsl:template match="/"&gt;
    &lt;xsl:text&gt;#VRML V2.0 utf8


Shape 
{ 
  geometry ElevationGrid 
  {
    xDimension 9
    zDimension 9
    xSpacing 1
    zSpacing 1
    height 
    [ 
      0 0 0 0 0 0 0 0 0
      0 0 0 0 0 0 0 0 0
      0 0 0 0 0 0 0 0 0
      0 0 0 0 0 0 0 0 0
      0 0 0 0 0 0 0 0 0
      0 0 0 0 0 0 0 0 0
      0 0 0 0 0 0 0 0 0
      0 0 0 0 0 0 0 0 0
      0 0 0 0 0 0 0 0 0
    ]
    colorPerVertex FALSE
    color Color 
    { 
      color 
      [
        0 0 0, 1 1 1, 0 0 0, 1 1 1, 0 0 0, 1 1 1, 0 0 0, 1 1 1, 
        1 1 1, 0 0 0, 1 1 1, 0 0 0, 1 1 1, 0 0 0, 1 1 1, 0 0 0, 
        0 0 0, 1 1 1, 0 0 0, 1 1 1, 0 0 0, 1 1 1, 0 0 0, 1 1 1, 
        1 1 1, 0 0 0, 1 1 1, 0 0 0, 1 1 1, 0 0 0, 1 1 1, 0 0 0, 
        0 0 0, 1 1 1, 0 0 0, 1 1 1, 0 0 0, 1 1 1, 0 0 0, 1 1 1, 
        1 1 1, 0 0 0, 1 1 1, 0 0 0, 1 1 1, 0 0 0, 1 1 1, 0 0 0, 
        0 0 0, 1 1 1, 0 0 0, 1 1 1, 0 0 0, 1 1 1, 0 0 0, 1 1 1, 
        1 1 1, 0 0 0, 1 1 1, 0 0 0, 1 1 1, 0 0 0, 1 1 1, 0 0 0, 
      ]
    }
  }
}

Transform 
{
  translation 4.5 1 4 
  children 
  [
    Shape
    {
      geometry Text 
      {
    &lt;/xsl:text&gt;
    &lt;xsl:apply-templates select="greeting"/&gt;
    &lt;xsl:text&gt;
        fontStyle FontStyle
  
        {
          justify "MIDDLE"
          style "BOLD"
        }
      }
    }
  ]
}

NavigationInfo 
{
  type ["EXAMINE","ANY"]
}

Viewpoint 
{
  position 4 1 10
}
    &lt;/xsl:text&gt;
  &lt;/xsl:template&gt;

  &lt;xsl:template match="greeting"&gt;
    &lt;xsl:text&gt;string"&lt;/xsl:text&gt;
    &lt;xsl:value-of select="normalize-space()"/&gt;
    &lt;xsl:text&gt;"&lt;/xsl:text&gt;
  &lt;/xsl:template&gt;

&lt;/xsl:stylesheet&gt;</pre></blockquote>
      <p>We generate our VRML document with the following command:</p>
      <blockquote><pre class="code">
java org.apache.xalan.xslt.Process -in greeting.xml -xsl vrml-greeting.xsl 
  -out greeting.wrl</pre></blockquote>
      <p>As with our earlier stylesheet, our VRML-generating
      template is mostly boilerplate, with content from the XML source
      document added at the appropriate point. The
      <tt class="literal">&lt;xsl:apply-templates&gt;</tt> element is
      replaced with the value of the
      <tt class="literal">&lt;greeting&gt;</tt> element. The VRML code here
      draws a checkerboard, then draws the text from the XML document
      above it, floating in midair in the center of the document. A
      couple of views of the VRML version of our XML document are
      shown in <a href="ch02_05.htm">Figure 2-4</a>.</p>
      <a name="xslt-CHP-2-FIG-4" /><div class="figure"><img height="525" alt="Figure 2-4" src="figs/xslt.0204.gif" width="368" /></div><h4 class="objtitle">Figure 2-4. Two views of the VRML version of our Hello World document</h4>
    </div>
    <p>Although we haven't discussed any of the specific vocabularies or file formats we've used here, hopefully you understand that you can transform your XML documents into any useful format you can think of. Through the rest of the book, we'll cover several common tasks you can solve with XSLT, all of which build on the basics we've discussed here. 
<a name="INDEX-159" />
<a name="INDEX-160" />
<a name="INDEX-161" />


</p>
  

<hr width="684" align="left" />
<div class="navbar"><table width="684" border="0"><tr><td align="left" valign="top" width="228"><a href="ch02_04.htm"><img alt="Previous" border="0" src="../gifs/txtpreva.gif" /></a></td><td align="center" valign="top" width="228"><a href="index.htm"><img alt="Home" border="0" src="../gifs/txthome.gif" /></a></td><td align="right" valign="top" width="228"><a href="ch02_06.htm"><img alt="Next" border="0" src="../gifs/txtnexta.gif" /></a></td></tr><tr><td align="left" valign="top" width="228">2.4. Stylesheet Structure</td><td align="center" valign="top" width="228"><a href="index/index.htm"><img alt="Book Index" border="0" src="../gifs/index.gif" /></a></td><td align="right" valign="top" width="228">2.6. Summary</td></tr></table></div>
<hr width="684" align="left" />

<img alt="Library Navigation Links" border="0" src="../gifs/navbar.gif" usemap="#library-map" />
<p><p><font size="-1"><a href="copyrght.htm">Copyright &copy; 2002</a> O'Reilly &amp; Associates. All rights reserved.</font></p>

<map name="library-map">
<area shape="rect" coords="0,0,85,93" href="../index.htm"><area shape="rect" coords="85,0,180,98" href="../sax2/index.htm"><area shape="rect" coords="182,-1,261,100" href="../xmlnut/index.htm"><area shape="rect" coords="263,1,384,96" href="../jxml/index.htm"><area shape="rect" coords="386,1,463,100" href="../jxslt/index.htm"><area shape="rect" coords="466,1,533,112" href="index.htm"><area shape="rect" coords="535,-1,610,108" href="../schema/index.htm"><area shape="rect" coords="613,1,696,121" href="../pxml/index.htm">
</map>

</body></html>