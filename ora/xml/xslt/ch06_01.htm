<html><head><title>Sorting and Grouping Elements (XSLT)</title><link rel="stylesheet" type="text/css" href="../style/style1.css" />

<meta name="DC.Creator" content="Doug Tidwell" /><meta name="DC.Format" content="text/xml" scheme="MIME" /><meta name="DC.Language" content="en-US" /><meta name="DC.Publisher" content="O'Reilly &amp; Associates, Inc." /><meta name="DC.Source" scheme="ISBN" content="0596000537L" /><meta name="DC.Subject.Keyword" content="stuff" /><meta name="DC.Title" content="XSLT" /><meta name="DC.Type" content="Text.Monograph" />

</head><body bgcolor="#ffffff">

<img alt="Book Home" border="0" src="gifs/smbanner.gif" usemap="#banner-map" /><map name="banner-map"><area shape="rect" coords="1,-2,616,66" href="index.htm" alt="XSLT" /><area shape="rect" coords="629,-11,726,25" href="jobjects/fsearch.htm" alt="Search this book" /></map>

<div class="navbar"><table width="684" border="0"><tr><td align="left" valign="top" width="228"><a href="ch05_04.htm"><img alt="Previous" border="0" src="../gifs/txtpreva.gif" /></a></td><td align="center" valign="top" width="228"></td><td align="right" valign="top" width="228"><a href="ch06_02.htm"><img alt="Next" border="0" src="../gifs/txtnexta.gif" /></a></td></tr></table></div>



  <h1 class="chapter">Chapter 6. Sorting and Grouping Elements</h1>
<div class="htmltoc"><h4 class="tochead">Contents:</h4>
  <p> <a href="#INDEX-505">Sorting Data with &lt;xsl:sort&gt;</a><br />
<a href="ch06_02.htm">Grouping Nodes</a><br />
<a href="ch06_03.htm">Summary</a><br /></p></div>
  <p>
<a name="INDEX-498" /></a>
<a name="INDEX-499" /></a>
<a name="INDEX-500" /></a>
<a name="INDEX-501" /></a>
<a name="INDEX-502" /></a>
<a name="INDEX-503" /></a>
<a name="INDEX-504" /></a>


By now, I hope you're convinced that you can use XSLT to convert big piles of XML data into other useful things. Our examples to this point have pretty much gone through the XML source in what's referred to as <em class="emphasis">document order.</em>  We'd like to go through our XML documents in a couple of other common ways, though:</p>
  <ul>
    <li>
      <p>We could sort some or all of the XML elements, then generate output based on the sorted elements.</p>
    </li>
    <li>
      <p>We could group the data, selecting all elements that have some property in common, then sorting the groups of elements.</p>
    </li>
  </ul>
  <p>We'll give several examples of these operations in this chapter.</p>
  <div class="sect1">
    <h2 class="sect1">6.1. Sorting Data with &lt;xsl:sort&gt;</h2>
    <p>
<a name="INDEX-505" /></a>
<a name="INDEX-506" /></a>


The simplest way to rearrange our XML elements is to use the <tt class="literal">&lt;xsl:sort&gt;</tt> element. This element temporarily rearranges a collection of elements based on criteria we define in our stylesheet. </p>
    <div class="sect2">
      <h3 class="sect2">6.1.1. Our First Example</h3>
      <p>
<a name="INDEX-507" /></a>
<a name="INDEX-508" /></a>
<a name="INDEX-509" /></a>


<a name="INDEX-510" /></a>
<a name="INDEX-511" /></a>
<a name="INDEX-512" /></a>


For our first example, we'll have a set of U.S. postal addresses that we want to sort. (No chauvinism is intended here; obviously every country has different conventions for mailing addresses. We just needed a short sample document that can be sorted in many useful ways.)  Here's our original document:</p>
      <blockquote><pre class="code">
&lt;?xml version="1.0"?&gt;
&lt;addressbook&gt;
  &lt;address&gt;
    &lt;name&gt;
      &lt;title&gt;Mr.&lt;/title&gt;
      &lt;first-name&gt;Chester Hasbrouck&lt;/first-name&gt;
      &lt;last-name&gt;Frisby&lt;/last-name&gt;
    &lt;/name&gt;
    &lt;street&gt;1234 Main Street&lt;/street&gt;
    &lt;city&gt;Sheboygan&lt;/city&gt;
    &lt;state&gt;WI&lt;/state&gt;
    &lt;zip&gt;48392&lt;/zip&gt;
  &lt;/address&gt;
  &lt;address&gt;
    &lt;name&gt;
      &lt;first-name&gt;Mary&lt;/first-name&gt;
      &lt;last-name&gt;Backstayge&lt;/last-name&gt;
    &lt;/name&gt;
    &lt;street&gt;283 First Avenue&lt;/street&gt;
    &lt;city&gt;Skunk Haven&lt;/city&gt;
    &lt;state&gt;MA&lt;/state&gt;
    &lt;zip&gt;02718&lt;/zip&gt;
  &lt;/address&gt;
  &lt;address&gt;
    &lt;name&gt;
      &lt;title&gt;Ms.&lt;/title&gt;
      &lt;first-name&gt;Natalie&lt;/first-name&gt;
      &lt;last-name&gt;Attired&lt;/last-name&gt;
    &lt;/name&gt;
    &lt;street&gt;707 Breitling Way&lt;/street&gt;
    &lt;city&gt;Winter Harbor&lt;/city&gt;
    &lt;state&gt;ME&lt;/state&gt;
    &lt;zip&gt;00218&lt;/zip&gt;
  &lt;/address&gt;
  &lt;address&gt;
    &lt;name&gt;
      &lt;first-name&gt;Harry&lt;/first-name&gt;
      &lt;last-name&gt;Backstayge&lt;/last-name&gt;
    &lt;/name&gt;
    &lt;street&gt;283 First Avenue&lt;/street&gt;
    &lt;city&gt;Skunk Haven&lt;/city&gt;
    &lt;state&gt;MA&lt;/state&gt;
    &lt;zip&gt;02718&lt;/zip&gt;
  &lt;/address&gt;
  &lt;address&gt;
    &lt;name&gt;
      &lt;first-name&gt;Mary&lt;/first-name&gt;
      &lt;last-name&gt;McGoon&lt;/last-name&gt;
    &lt;/name&gt;
    &lt;street&gt;103 Bryant Street&lt;/street&gt;
    &lt;city&gt;Boylston&lt;/city&gt;
    &lt;state&gt;VA&lt;/state&gt;
    &lt;zip&gt;27318&lt;/zip&gt;
  &lt;/address&gt;
  &lt;address&gt;
    &lt;name&gt;

      &lt;title&gt;Ms.&lt;/title&gt;
      &lt;first-name&gt;Amanda&lt;/first-name&gt;
      &lt;last-name&gt;Reckonwith&lt;/last-name&gt;
    &lt;/name&gt;
    &lt;street&gt;930-A Chestnut Street&lt;/street&gt;
    &lt;city&gt;Lynn&lt;/city&gt;
    &lt;state&gt;MA&lt;/state&gt;
    &lt;zip&gt;02930&lt;/zip&gt;
  &lt;/address&gt;
&lt;/addressbook&gt;</pre></blockquote>
      <p>We'd like to generate a list of these addresses, sorted by <tt class="literal">&lt;last-name&gt;</tt>. We'll use the magical <tt class="literal">&lt;xsl:sort&gt;</tt> element to do the work. Our stylesheet looks like this:</p>
      <blockquote><pre class="code">
&lt;?xml version="1.0"?&gt;
&lt;xsl:stylesheet version="1.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform"&gt;

  &lt;xsl:output method="text" indent="no"/&gt;
  &lt;xsl:strip-space elements="*"/&gt;

  &lt;xsl:variable name="newline"&gt;
&lt;xsl:text&gt;
&lt;/xsl:text&gt;
  &lt;/xsl:variable&gt;

  &lt;xsl:template match="/"&gt;
    &lt;xsl:for-each select="addressbook/address"&gt;
      &lt;xsl:sort select="name/last-name"/&gt;
      &lt;xsl:value-of select="name/title"/&gt;
      &lt;xsl:text&gt; &lt;/xsl:text&gt;
      &lt;xsl:value-of select="name/first-name"/&gt;
      &lt;xsl:text&gt; &lt;/xsl:text&gt;
      &lt;xsl:value-of select="name/last-name"/&gt;
      &lt;xsl:value-of select="$newline"/&gt;
      &lt;xsl:value-of select="street"/&gt;
      &lt;xsl:value-of select="$newline"/&gt;
      &lt;xsl:value-of select="city"/&gt;
      &lt;xsl:text&gt;, &lt;/xsl:text&gt;
      &lt;xsl:value-of select="state"/&gt;
      &lt;xsl:text&gt;  &lt;/xsl:text&gt;
      &lt;xsl:value-of select="zip"/&gt;
      &lt;xsl:value-of select="$newline"/&gt;
      &lt;xsl:value-of select="$newline"/&gt;
    &lt;/xsl:for-each&gt;
  &lt;/xsl:template&gt;
&lt;/xsl:stylesheet&gt;</pre></blockquote>
      <p>
<a name="INDEX-513" /></a>

The heart of our stylesheet are the <tt class="literal">&lt;xsl:for-each&gt;</tt> and <tt class="literal">&lt;xsl:sort&gt;</tt> elements. The <tt class="literal">&lt;xsl:for-each&gt;</tt> element selects the items with which we'll work, and the <tt class="literal">&lt;xsl:sort&gt;</tt> element rearranges them before we write them out. </p>

      <p>Notice that we're generating a text file (<tt class="literal">&lt;xsl:output method="text"/&gt;</tt>). (You could generate an HTML file or something more complicated if you want.) To invoke the stylesheet engine, we run this command:</p>
      <blockquote><pre class="code">
java org.apache.xalan.xslt.Process -in names.xml -xsl namesorter1.xsl 
  -out names.text</pre></blockquote>        
      <p>Here are the results we get from our first attempt at sorting:</p>
      <blockquote><pre class="code">
Ms. Natalie Attired
707 Breitling Way
Winter Harbor, ME  00218

 Mary Backstayge
283 First Avenue
Skunk Haven, MA  02718

 Harry Backstayge
283 First Avenue
Skunk Haven, MA  02718

Mr. Chester Hasbrouck Frisby
1234 Main Street
Sheboygan, WI  48392

 Mary McGoon
103 Bryant Street
Boylston, VA  27318

Ms. Amanda Reckonwith
930-A Chestnut Street
Lynn, MA  02930</pre></blockquote>
      <p>As you can see from the output, the addresses in our original document were sorted by last name. All we had to do was add <tt class="literal">xsl:sort</tt> to our stylesheet, and all the elements were magically reordered. If you aren't convinced that XSLT can increase your programmer productivity, try writing the Java code and DOM method calls to do the same thing.</p>
      <p>We can do a couple of things to improve our original stylesheet, however. For one thing, there's an annoying blank space at the start of every name that doesn't have a <tt class="literal">&lt;title&gt;</tt> element. A more significant improvement is that we'd like to sort addresses by <tt class="literal">&lt;first-name&gt;</tt> within <tt class="literal">&lt;last-name&gt;</tt>. In our last example, Mary Backstayge should appear after Harry Backstayge. Here's how we can modify our stylesheet to use more than one sort key:</p>
      <blockquote><pre class="code">
&lt;xsl:template match="/"&gt;
  &lt;xsl:for-each select="addressbook/address"&gt;
    &lt;xsl:sort select="name/last-name"/&gt;
    &lt;xsl:sort select="name/first-name"/&gt;
    ...</pre></blockquote>
      <p>We've simply added a second <tt class="literal">&lt;xsl:sort&gt;</tt> element to our stylesheet. This element does what we want; it sorts the <tt class="literal">&lt;address&gt;</tt> elements by <tt class="literal">&lt;first-name&gt;</tt> within <tt class="literal">&lt;last-name&gt;</tt>. To be thoroughly obsessive about our output, we can use an <tt class="literal">&lt;xsl:if&gt;</tt> element to get rid of that annoying blank space in front of names with no <tt class="literal">&lt;title&gt;</tt> element:</p>
      <blockquote><pre class="code">
&lt;xsl:if test="name/title"&gt;
  &lt;xsl:value-of select="name/title"/&gt;
  &lt;xsl:text&gt; &lt;/xsl:text&gt;
&lt;/xsl:if&gt;</pre></blockquote>
      <p>Now our output is perfect:</p>
      <blockquote><pre class="code">
Ms. Natalie Attired
707 Breitling Way
Winter Harbor, ME  00218

Harry Backstayge
283 First Avenue
Skunk Haven, MA  02718

Mary Backstayge
283 First Avenue
Skunk Haven, MA  02718

Mr. Chester Hasbrouck Frisby
1234 Main Street
Sheboygan, WI  48392

Mary McGoon
103 Bryant Street
Boylston, VA  27318

Ms. Amanda Reckonwith
930-A Chestnut Street
Lynn, MA  02930</pre></blockquote>
    
<a name="INDEX-514" /></a>
<a name="INDEX-515" /></a>
<a name="INDEX-516" /></a>

</div>
    <div class="sect2">
      <h3 class="sect2">6.1.2. The Details on the &lt;xsl:sort&gt; Element</h3>
      <p>
<a name="INDEX-517" /></a>

Now that we've seen a couple of examples of how <tt class="literal">&lt;xsl:sort&gt;</tt> works, we'll go over its syntax, its attributes, and where you can use it.</p>
      <div class="sect3">
        <h3 class="sect3">6.1.2.1. What's the deal with that syntax?</h3>
        <p>
<a name="INDEX-518" /></a>

I'm so glad you asked that question. One thing the XSLT working group could have done is something like this:</p>
        <blockquote><pre class="code">
&lt;xsl:for-each select="addressbook/address" sort-key-1="name/last-name" 
  sort-key-2="name/first-name"/&gt;</pre></blockquote>

        <p>The problem with this approach is that no matter how many <tt class="literal">sort-key-x</tt> attributes you define, out of sheer perverseness, someone will cry out that they really need the <tt class="literal">sort-key-8293</tt> attribute. To avoid this messy problem, the XSLT designers decided to let you specify the sort keys by using a number of <tt class="literal">&lt;xsl:sort&gt;</tt> elements. The first is the primary sort key, the second is the secondary sort key, the 8293rd one is the eight-thousand-two-hundred-and-ninety-third sort key, etc.</p>
        <p>Well, that's why the syntax looks the way it does, but how does it actually work?  When I first saw this syntax:</p>
        <blockquote><pre class="code">
&lt;xsl:for-each select="addressbook/address"&gt;
  &lt;xsl:sort select="name/last-name"/&gt;
  &lt;xsl:sort select="name/first-name"/&gt;
  &lt;xsl:apply-templates select="."/&gt;
&lt;/xsl:for-each&gt;</pre></blockquote>
        <p>I thought it meant that all the nodes were sorted during each iteration through the <tt class="literal">&lt;xsl:for-each&gt;</tt> element. That seemed incredibly inefficient; if you've sorted all the nodes, why resort them each time through the <tt class="literal">&lt;xsl:for-each&gt;</tt> element?  Actually, the XSLT processor handles all <tt class="literal">&lt;xsl:sort&gt;</tt> elements before it does anything, then it processes the <tt class="literal">&lt;xsl:for-each&gt;</tt> element as if the <tt class="literal">&lt;xsl:sort&gt;</tt> elements weren't there. </p>
        <p>It's less efficient, but if it makes you feel better about the syntax, you could write the stylesheet like this:</p>
        <blockquote><pre class="code">
&lt;xsl:template match="/"&gt;
  &lt;xsl:for-each select="addressbook/address"&gt;
    &lt;xsl:sort select="name/last-name"/&gt;
    &lt;xsl:sort select="name/first-name"/&gt;
    &lt;xsl:for-each select="."&gt;  &lt;!-- This is slower, but it works --&gt;
      &lt;xsl:apply-templates select="."/&gt;
    &lt;/xsl:for-each&gt;
  &lt;/xsl:for-each&gt;
&lt;/xsl:template&gt;</pre></blockquote>
        <p>(Don't actually do this. I'm only trying to make a point.)  This stylesheet generates the same results as our earlier stylesheet. </p>
      </div>
      <div class="sect3">
        <h3 class="sect3">6.1.2.2. Attributes</h3>
        <p>
<a name="INDEX-519" /></a>

The <tt class="literal">&lt;xsl:sort&gt;</tt> element has several attributes, all of which are discussed here.</p>
        <dl>
          
            <dt><tt class="literal">select</tt></dt>
            <dd>
<a name="INDEX-520" /></a>

The <tt class="literal">select</tt> attribute defines the characteristic we'll use for sorting. Its contents are an XPath expression, so you can select elements, text, attributes, comments, ancestors, etc. As always, the XPath expression defined in <tt class="literal">select</tt> is evaluated in terms of the current context.<p></p>
            </dd>
          
          
            <dt><tt class="literal">data-type</tt></dt>
            <dd>
<a name="INDEX-521" /></a>

The <tt class="literal">data-type</tt> attribute can have three values: <p></p>
              <ul>
                <li>
                  <p><tt class="literal">data-type="text"</tt></p>
                </li>
                <li>
                  <p><tt class="literal">data-type="number"</tt></p>
                </li>
                <li>
                  <p>A <tt class="literal">data-type="QName"</tt> that identifies a particular datatype. The stated goal of the XSLT working group is that the datatypes defined in the XML Schema specification will eventually be supported here.</p>
                </li>
              </ul>
              <p>The XSLT specification defines the behavior for <tt class="literal">data-type="text"</tt> and <tt class="literal">data-type="number"</tt>. Consider this XML document:</p>
              <blockquote><pre class="code">
&lt;?xml version="1.0"?&gt;
&lt;numberlist&gt;
  &lt;number&gt;127&lt;/number&gt;
  &lt;number&gt;23&lt;/number&gt;
  &lt;number&gt;10&lt;/number&gt;
&lt;/numberlist&gt;</pre></blockquote>
              <p>We'll sort these values using the default value (<tt class="literal">data-type="text"</tt>):</p>
              <blockquote><pre class="code">
&lt;?xml version="1.0"?&gt;
&lt;xsl:stylesheet version="1.0" 
  xmlns:xsl="http://www.w3.org/1999/XSL/Transform"&gt;

  &lt;xsl:output method="text" indent="no"/&gt;
  &lt;xsl:strip-space elements="*"/&gt;

  &lt;xsl:variable name="newline"&gt;
&lt;xsl:text&gt;
&lt;/xsl:text&gt;
  &lt;/xsl:variable&gt;

  &lt;xsl:template match="/"&gt;
    &lt;xsl:for-each select="numberlist/number"&gt;
      &lt;xsl:sort select="."/&gt;
      &lt;xsl:value-of select="."/&gt;
      &lt;xsl:value-of select="$newline"/&gt;
    &lt;/xsl:for-each&gt;
  &lt;/xsl:template&gt;
&lt;/xsl:stylesheet&gt;</pre></blockquote>
              <p>When we sort these elements using <tt class="literal">data-type="text"</tt>, here's what we get:</p>
              <blockquote><pre class="code">
10
127
23</pre></blockquote>

              <p>We get this result because a text-based sort puts anything that starts with a "1" before anything that starts with a "2." If we change the <tt class="literal">&lt;xsl:sort&gt;</tt> element to be <tt class="literal">&lt;xsl:sort select="." data-type="number"/&gt;</tt>, we get these results:</p>
              <blockquote><pre class="code">
10
27
123</pre></blockquote>
              <p>If you use something else here (<tt class="literal">data-type="floating-point"</tt>, for example), what the XSLT processor does is anybody's guess. The XSLT specification allows for other values here, but it's up to the XSLT processor to decide how (or if) it wants to process those values. Check your processor's documentation to see if it does anything relevant or useful for values other than <tt class="literal">data-type="text"</tt> or <tt class="literal">data-type="number"</tt>.</p>
              <p>A final note: if you're using <tt class="literal">data-type="number"</tt>, and any of the values aren't numbers, those non-numeric values will sort before the numeric values. That means if you're using <tt class="literal">order="ascending"</tt>, the non-numeric values appear first; if you use <tt class="literal">order="descending"</tt>, the non-numeric values appear last. </p>
              <blockquote><pre class="code">
&lt;?xml version="1.0"?&gt;
&lt;numberlist&gt;
  &lt;number&gt;127&lt;/number&gt;
  &lt;number&gt;23&lt;/number&gt;
  &lt;number&gt;zzz&lt;/number&gt;
  &lt;number&gt;10&lt;/number&gt;
  &lt;number&gt;yyy&lt;/number&gt;
&lt;/numberlist&gt;</pre></blockquote>
              <p>Given this less-than-perfect data, here are the correctly sorted results:</p>
              <blockquote><pre class="code">
zzz
yyy
10
23
127</pre></blockquote>
              <p>
<a name="INDEX-522" /></a>

Notice that the non-numeric values were not sorted; they simply appear in the output document in the order in which they were encountered.</p>
            </dd>
          
          
            <dt><tt class="literal">order</tt></dt>
            <dd>
<a name="INDEX-523" /></a>

You can order the sort as <tt class="literal">order="ascending"</tt> or <tt class="literal">order="descending"</tt>. The default is <tt class="literal">order="ascending"</tt>.<p></p>
            </dd>
          
          
            <dt><tt class="literal">case-order</tt></dt>
            <dd>
<a name="INDEX-524" /></a>

This attribute can have two values. <tt class="literal">case-order="upper-first"</tt> means that uppercase letters sort before lowercase letters, and <tt class="literal">case-order="lower-first"</tt> means that lowercase letters sort first. The <tt class="literal">case-order</tt> attribute is used only when the <tt class="literal">data-type</tt> attribute is <tt class="literal">text</tt>. The default value depends on the value of the soon-to-be-discussed <tt class="literal">lang</tt> attribute.<p></p>
            </dd>
          
          
            <dt><tt class="literal">lang</tt></dt>
            <dd>
<a name="INDEX-525" /></a>

This attribute defines the language of the sort keys. The valid values for this attribute are the same as those for the <tt class="literal">xml:lang</tt> attribute defined in Section 2.12 of the XML 1.0 specification. The language codes are those commonly used in Java programming, UNIX locales, and other places ISO language and country namings are defined. For example, <tt class="literal">lang="en"</tt> means "English," <tt class="literal">lang="en-US"</tt> means "U.S. English," and <tt class="literal">lang="en-GB"</tt> means "U.K. English." Without the <tt class="literal">lang</tt> attribute (it's rarely used in practice), the XSLT processor determines the default language from the system environment.
<a name="INDEX-526" /></a>

<p></p>
            </dd>
          
        </dl>
      </div>
      <div class="sect3">
        <h3 class="sect3">6.1.2.3. Where can you use &lt;xsl:sort&gt;?</h3>
        <p>The <tt class="literal">&lt;xsl:sort&gt;</tt> element can appear inside  two elements:</p>
        <ul>
          <li>
            <p><tt class="literal">&lt;xsl:apply-templates&gt;</tt></p>
          </li>
          <li>
            <p><tt class="literal">&lt;xsl:for-each&gt;</tt></p>
          </li>
        </ul>
        <p>If you use an <tt class="literal">&lt;xsl:sort&gt;</tt> element inside <tt class="literal">&lt;xsl:for-each&gt;</tt>, the <tt class="literal">&lt;xsl:sort&gt;</tt> element(s) must appear first. If you tried something like this, you'd get an exception from the XSLT processor:
<a name="INDEX-527" /></a>

</p>
        <blockquote><pre class="code">
&lt;xsl:for-each select="addressbook/address"&gt;
  &lt;xsl:sort select="name/last-name"/&gt;
  &lt;xsl:value-of select="name/title"/&gt; 
  &lt;xsl:sort select="name/first-name"/&gt; &lt;!-- NOT LEGAL! --&gt;
  ...</pre></blockquote>
      </div>
    </div>
    <div class="sect2">
      <h3 class="sect2">6.1.3. Another Example</h3>
      <p>
<a name="INDEX-528" /></a>
<a name="INDEX-529" /></a>
<a name="INDEX-530" /></a>



We've pretty much covered the <tt class="literal">&lt;xsl:sort&gt;</tt> element at this point. To add another wrinkle to our example, we'll change the stylesheet so the <tt class="literal">xsl:sort</tt> element acts upon a subset of the addresses, then sorts that subset. We'll sort only the addresses from states that start with the letter <tt class="literal">M</tt>. As you'd expect, we'll do this magic with an XPath expression that limits the elements to be sorted:</p>
      <blockquote><pre class="code">
&lt;?xml version="1.0"?&gt;
&lt;xsl:stylesheet version="1.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform"&gt;
  &lt;xsl:output method="text" indent="no"/&gt;
  &lt;xsl:strip-space elements="*"/&gt;
  &lt;xsl:variable name="newline"&gt;
&lt;xsl:text&gt;
&lt;/xsl:text&gt;
  &lt;/xsl:variable&gt;

  &lt;xsl:template match="/"&gt;
    &lt;xsl:for-each select="addressbook/address/[starts-with(state, 'M')]"&gt;
      &lt;xsl:sort select="name/last-name"/&gt;
      &lt;xsl:sort select="name/first-name"/&gt;
      &lt;xsl:if test="name/title"&gt;
        &lt;xsl:value-of select="name/title"/&gt;
        &lt;xsl:text&gt; &lt;/xsl:text&gt;
      &lt;/xsl:if&gt;
      &lt;xsl:value-of select="name/first-name"/&gt;
      &lt;xsl:text&gt; &lt;/xsl:text&gt;
      &lt;xsl:value-of select="name/last-name"/&gt;
      &lt;xsl:value-of select="$newline"/&gt;
      &lt;xsl:value-of select="street"/&gt;
      &lt;xsl:value-of select="$newline"/&gt;
      &lt;xsl:value-of select="city"/&gt;
      &lt;xsl:text&gt;, &lt;/xsl:text&gt;
      &lt;xsl:value-of select="state"/&gt;
      &lt;xsl:text&gt;  &lt;/xsl:text&gt;
      &lt;xsl:value-of select="zip"/&gt;
      &lt;xsl:value-of select="$newline"/&gt;
      &lt;xsl:value-of select="$newline"/&gt;
    &lt;/xsl:for-each&gt;
  &lt;/xsl:template&gt;
&lt;/xsl:stylesheet&gt;</pre></blockquote>
      <p>
<a name="INDEX-531" /></a>


Here are the results, only those addresses from states beginning with the letter <tt class="literal">M</tt>, sorted by first name within last name:</p>
      <blockquote><pre class="code">
Ms. Natalie Attired
707 Breitling Way
Winter Harbor, ME  00218

Harry Backstayge
283 First Avenue
Skunk Haven, MA  02718

Mary Backstayge
283 First Avenue
Skunk Haven, MA  02718

Ms. Amanda Reckonwith
930-A Chestnut Street
Lynn, MA  02930</pre></blockquote>
      <p>Notice that in the <tt class="literal">xsl:for-each</tt> element, we used a predicate in our XPath expression so that only addresses containing <tt class="literal">&lt;state&gt;</tt> elements whose contents begin with <tt class="literal">M</tt> are selected. This example starts us on the path to grouping nodes. We could do lots of other things here:</p>
      <ul>
        <li>
          <p>We could generate output that prints all the unique Zip Codes, along with the number of addresses that have those Zip Codes.</p>
        </li>
        <li>
          <p>For each unique Zip Code (or state, or last name, etc.) we could sort on a field and list all addresses with that Zip Code.</p>
        </li>
      </ul>
      <p>We'll discuss these topics in the next section.
<a name="INDEX-532" /></a>
<a name="INDEX-533" /></a>
</p>
    </div>
  </div>
  
  


<hr width="684" align="left" />
<div class="navbar"><table width="684" border="0"><tr><td align="left" valign="top" width="228"><a href="ch05_04.htm"><img alt="Previous" border="0" src="../gifs/txtpreva.gif" /></a></td><td align="center" valign="top" width="228"><a href="index.htm"><img alt="Home" border="0" src="../gifs/txthome.gif" /></a></td><td align="right" valign="top" width="228"><a href="ch06_02.htm"><img alt="Next" border="0" src="../gifs/txtnexta.gif" /></a></td></tr><tr><td align="left" valign="top" width="228">5.4. Summary</td><td align="center" valign="top" width="228"><a href="index/index.htm"><img alt="Book Index" border="0" src="../gifs/index.gif" /></a></td><td align="right" valign="top" width="228">6.2. Grouping Nodes</td></tr></table></div>
<hr width="684" align="left" />

<img alt="Library Navigation Links" border="0" src="../gifs/navbar.gif" usemap="#library-map" />
<p><p><font size="-1"><a href="copyrght.htm">Copyright &copy; 2002</a> O'Reilly &amp; Associates. All rights reserved.</font></p>

<map name="library-map">
<area shape="rect" coords="0,0,85,93" href="../index.htm"><area shape="rect" coords="85,0,180,98" href="../sax2/index.htm"><area shape="rect" coords="182,-1,261,100" href="../xmlnut/index.htm"><area shape="rect" coords="263,1,384,96" href="../jxml/index.htm"><area shape="rect" coords="386,1,463,100" href="../jxslt/index.htm"><area shape="rect" coords="466,1,533,112" href="index.htm"><area shape="rect" coords="535,-1,610,108" href="../schema/index.htm"><area shape="rect" coords="613,1,696,121" href="../pxml/index.htm">
      </map>

</body></html>
