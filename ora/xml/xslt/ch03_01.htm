<html><head><title>XPath: A Syntax for Describing Needles and Haystacks (XSLT)</title><link rel="stylesheet" type="text/css" href="../style/style1.css" />

<meta name="DC.Creator" content="Doug Tidwell" /><meta name="DC.Format" content="text/xml" scheme="MIME" /><meta name="DC.Language" content="en-US" /><meta name="DC.Publisher" content="O'Reilly &amp; Associates, Inc." /><meta name="DC.Source" scheme="ISBN" content="0596000537L" /><meta name="DC.Subject.Keyword" content="stuff" /><meta name="DC.Title" content="XSLT" /><meta name="DC.Type" content="Text.Monograph" />

</head><body bgcolor="#ffffff">

<img alt="Book Home" border="0" src="gifs/smbanner.gif" usemap="#banner-map" /><map name="banner-map"><area shape="rect" coords="1,-2,616,66" href="index.htm" alt="XSLT" /><area shape="rect" coords="629,-11,726,25" href="jobjects/fsearch.htm" alt="Search this book" /></map>

<div class="navbar"><table width="684" border="0"><tr><td align="left" valign="top" width="228"><a href="ch02_06.htm"><img alt="Previous" border="0" src="../gifs/txtpreva.gif" /></a></td><td align="center" valign="top" width="228"></td><td align="right" valign="top" width="228"><a href="ch03_02.htm"><img alt="Next" border="0" src="../gifs/txtnexta.gif" /></a></td></tr></table></div>



  <h1 class="chapter">Chapter 3. XPath: A Syntax for Describing Needles and Haystacks</h1>
<div class="htmltoc"><h4 class="tochead">Contents:</h4>
  <p> <a href="#xslt-CHP-3-SECT-1">The XPath Data Model</a><br />
<a href="ch03_02.htm">Location Paths</a><br />
<a href="ch03_03.htm">Attribute Value Templates</a><br />
<a href="ch03_04.htm">XPath Datatypes</a><br />
<a href="ch03_05.htm#xslt-CHP-3-SECT-5">The XPath View of an XML Document</a><br />
<a href="ch03_06.htm">Summary</a><br /></p></div>
  <p>
<a name="INDEX-167" /></a>
<a name="INDEX-168" /></a>
<a name="INDEX-169" /></a>
<a name="INDEX-170" /></a>


XPath is a syntax used to describe parts of an XML document. With XPath, you can refer to the first <tt class="literal">&lt;para&gt;</tt> element, the <tt class="literal">quantity</tt> attribute of the <tt class="literal">&lt;part-number&gt;</tt> element, all <tt class="literal">&lt;first-name&gt;</tt> elements that contain the text <tt class="literal">"Joe"</tt>, and many other variations. An XSLT stylesheet uses XPath expressions in the <tt class="literal">match</tt> and <tt class="literal">select</tt> attributes of various elements to indicate how a document should be transformed. In this chapter, we'll discuss XPath in all its glory.</p>
  <p>XPath is designed to be used inside an attribute in an XML document. The syntax is a mix of basic programming language expressions (such as <tt class="literal">$x*6</tt>) and Unix-like path expressions (such as <tt class="literal">/sonnet/author/last-name</tt>). In addition to the basic syntax, XPath provides a set of useful functions that allow you to find out various things about the document. </p>
  <p>
<a name="INDEX-171" /></a>
<a name="INDEX-172" /></a>

One important point, though: XPath works with the parsed version of your XML document. That means that some details of the original document aren't accessible to you from XPath. For example, entity references are resolved beforehand by the XSLT processor before instructions in our stylesheet are evaluated. CDATA sections are converted to text, as well. That means we have no way of knowing if a text node in an XPath tree was in the original XML document as text, as an entity reference, or as part of a CDATA section. As you get used to thinking about your XML documents in terms of XPath expressions, this situation won't be a problem, but it may confuse you at first. </p>
  <div class="sect1"><a name="xslt-CHP-3-SECT-1" /></a>
    <h2 class="sect1">3.1. The XPath Data Model</h2>
    <p>
<a name="INDEX-173" /></a>
<a name="INDEX-174" /></a>
<a name="INDEX-175" /></a>
<a name="INDEX-176" /></a>

XPath views an XML document as a tree of nodes. This tree is very similar to a Document Object Model (DOM) tree, so if you're familiar with the DOM, you should have some understanding of how to build basic XPath expressions. (To be precise, this is a conceptual tree; an XSLT processor or anything else that implements the XPath standard doesn't have to build an actual tree.)  There are seven kinds of nodes in XPath:</p>
    <ul>
      <li>
        <p>The root node (one per document)</p>
      </li>
      <li>
        <p>Element nodes</p>
      </li>
      <li>
        <p>Attribute nodes</p>
      </li>
      <li>
        <p>Text nodes</p>
      </li>
      <li>
        <p>Comment nodes</p>
      </li>
      <li>
        <p>Processing instruction nodes</p>
      </li>
      <li>
        <p>Namespace nodes</p>
      </li>
    </ul>
    <p>We'll talk about all the different node types in terms of the following document:</p>
    <blockquote><pre class="code">
&lt;?xml version="1.0"?&gt;
&lt;?xml-stylesheet href="sonnet.xsl" type="text/xsl"?&gt;
&lt;?cocoon-process type="xslt"?&gt;

&lt;!DOCTYPE sonnet [
  &lt;!ELEMENT sonnet (auth:author, title, lines)&gt;
  &lt;!ATTLIST sonnet public-domain CDATA "yes"
            type (Shakespearean | Petrarchan) "Shakespearean"&gt;
&lt;!ELEMENT auth:author  (last-name,first-name,nationality,
                        year-of-birth?,year-of-death?)&gt;
&lt;!ELEMENT last-name (#PCDATA)&gt;
&lt;!ELEMENT first-name (#PCDATA)&gt;
&lt;!ELEMENT nationality (#PCDATA)&gt;
&lt;!ELEMENT year-of-birth (#PCDATA)&gt;
&lt;!ELEMENT year-of-death (#PCDATA)&gt;
&lt;!ELEMENT title (#PCDATA)&gt;
&lt;!ELEMENT lines (line,line,line,line,
                 line,line,line,line,
                 line,line,line,line,
                 line,line)&gt;
&lt;!ELEMENT line (#PCDATA)&gt;
]&gt;

&lt;!-- Default sonnet type is Shakespearean, the other allowable  --&gt;
&lt;!-- type is "Petrarchan."                                      --&gt;
&lt;sonnet type="Shakespearean"&gt;
  &lt;auth:author xmlns:auth="http://www.authors.com/"&gt;
    &lt;last-name&gt;Shakespeare&lt;/last-name&gt;
    &lt;first-name&gt;William&lt;/first-name&gt;
    &lt;nationality&gt;British&lt;/nationality&gt;
    &lt;year-of-birth&gt;1564&lt;/year-of-birth&gt;
    &lt;year-of-death&gt;1616&lt;/year-of-death&gt;
  &lt;/auth:author&gt;
  &lt;!-- Is there an official title for this sonnet?  They're     
       sometimes named after the first line.                   --&gt;
  &lt;title&gt;Sonnet 130&lt;/title&gt;
  &lt;lines&gt;
    &lt;line&gt;My mistress' eyes are nothing like the sun,&lt;/line&gt;
    &lt;line&gt;Coral is far more red than her lips red.&lt;/line&gt;
    &lt;line&gt;If snow be white, why then her breasts are dun,&lt;/line&gt;
    &lt;line&gt;If hairs be wires, black wires grow on her head.&lt;/line&gt;
    &lt;line&gt;I have seen roses damasked, red and white,&lt;/line&gt;
    &lt;line&gt;But no such roses see I in her cheeks.&lt;/line&gt;
    &lt;line&gt;And in some perfumes is there more delight&lt;/line&gt;
    &lt;line&gt;Than in the breath that from my mistress reeks.&lt;/line&gt;
    &lt;line&gt;I love to hear her speak, yet well I know&lt;/line&gt;
    &lt;line&gt;That music hath a far more pleasing sound.&lt;/line&gt;
    &lt;line&gt;I grant I never saw a goddess go,&lt;/line&gt;
    &lt;line&gt;My mistress when she walks, treads on the ground.&lt;/line&gt;
    &lt;line&gt;And yet, by Heaven, I think my love as rare&lt;/line&gt;
    &lt;line&gt;As any she belied with false compare.&lt;/line&gt;
  &lt;/lines&gt;
&lt;/sonnet&gt;
&lt;!-- The title of Sting's 1987 album "Nothing like the sun" is  --&gt;
&lt;!-- from line 1 of this sonnet.                                --&gt;</pre></blockquote>
    <div class="sect2">
      <h3 class="sect2">3.1.1. The Root Node</h3>
      <p>
<a name="INDEX-177" /></a>
<a name="INDEX-178" /></a>
<a name="INDEX-179" /></a>
<a name="INDEX-180" /></a>
<a name="INDEX-181" /></a>

The root node is the XPath node that contains the entire document. In our example, the root node contains the <tt class="literal">&lt;sonnet&gt;</tt> element; it's not the <tt class="literal">&lt;sonnet&gt;</tt> element itself. In an XPath expression, the root node is specified with a single slash (<tt class="literal">/</tt>). </p>
      <p>Unlike other nodes, the root node has no parent. It always has at least one child, the document element. The root node also contains comments or processing instructions that are outside the document element. In our sample document, the two processing instructions named <tt class="literal">xml-stylesheet</tt> and <tt class="literal">cocoon-process</tt> are both children of the root node, as are the comment that appears before the <tt class="literal">&lt;sonnet&gt;</tt> tag and the comment that appears after the <tt class="literal">&lt;/sonnet&gt;</tt> tag. The string value of the root node (returned by <tt class="literal">&lt;xsl:value-of select="/" /&gt;</tt>, for example), is the concatenation of all text nodes of the root node's descendants. </p>
    </div>
    <div class="sect2">
      <h3 class="sect2">3.1.2. Element Nodes</h3>
      <p>
<a name="INDEX-182" /></a>

Every element in the original XML document is represented by an XPath element node. In the previous document, an element node exists for the <tt class="literal">&lt;sonnet&gt;</tt> element, the <tt class="literal">&lt;auth:author&gt;</tt> element, the <tt class="literal">&lt;last-name&gt;</tt> element, etc. An element node's children include text nodes, element nodes, comment nodes, and processing instruction nodes that occur within that element in the original document.</p>
      
<p>
<a name="INDEX-183" /></a>

An element node's string value (returned by <tt class="literal">&lt;xsl:value-of select="sonnet"&gt;</tt>, for example) is the concatenation of the text of this node and all of its children, in document order (the order in which they appear in the original document). All entity references (such as <tt class="literal">&amp;lt;</tt>) and character references (such as <tt class="literal">&amp;#052;</tt>) in the text are resolved automatically; you can't access the entity or character references from XPath.</p>
      <p>The name of an element node (returned by the XPath <tt class="literal">name()</tt> function) is the element name and any namespace in effect. In the previous example, the <tt class="literal">name()</tt> of the <tt class="literal">&lt;sonnet&gt;</tt> element is <tt class="literal">sonnet</tt>. The <tt class="literal">name()</tt> of the <tt class="literal">&lt;auth:author&gt;</tt> element is <tt class="literal">auth:author</tt>, and the <tt class="literal">name()</tt> of the <tt class="literal">&lt;last-name&gt;</tt> element is <tt class="literal">auth:last-name</tt> (any element contained in the <tt class="literal">&lt;author&gt;</tt> element is from the <tt class="literal">auth</tt> namespace unless specifically declared otherwise). Other XPath functions, such as <tt class="literal">local-name()</tt> and <tt class="literal">namespace-uri()</tt>, return other information about the name of the element node. </p>
    </div>
    <div class="sect2">
      <h3 class="sect2">3.1.3. Attribute Nodes</h3>
      <p>
<a name="INDEX-184" /></a>

At a minimum, an element node is the parent of one attribute node for each attribute in the XML source document. In our sample document, the element node corresponding to the <tt class="literal">&lt;sonnet&gt;</tt> element is the parent of an attribute node with a name of <tt class="literal">type</tt> and a value of <tt class="literal">Shakespearean</tt>. A couple of complications for attribute nodes exist, however:</p>
      <ul>
        <li>
          <p>Although an element node is the parent of its attribute nodes, those attribute nodes are not children of their parent. The children of an element are the text, element, comment, and processing instruction nodes contained in the original element. If you want a document's attributes, you must ask for them specifically. That relationship seems odd at first, but you'll find that treating an element's attributes separately is usually what you want to do. </p>
        </li>
        <li>
          <p>If a DTD or schema defines default values for certain attributes, those attributes don't have to appear in the XML document. For example, we could have declared that a <tt class="literal">Shakespearean</tt> sonnet is the default type, so that the tag <tt class="literal">&lt;sonnet type="Shakespearean"&gt;</tt> is functionally equivalent to <tt class="literal">&lt;sonnet&gt;</tt>. Under normal circumstances, XPath creates an attribute node for all attributes with default values, whether they actually appear in the document or not. If the <tt class="literal">type</tt> is defined as <tt class="literal">#IMPLIED</tt>, both of the <tt class="literal">&lt;sonnet&gt;</tt> elements we just mentioned will have an attribute node with a name of <tt class="literal">type</tt> and a value of <tt class="literal">Shakespearean</tt>. Of course, if the document codes a value other than the default (<tt class="literal">&lt;sonnet type="Petrarchan"&gt;</tt>, for example), the attribute node's value will be whatever was coded in the document. </p>
          

<p>To make this situation even worse, an XML parser isn't required to read an external DTD. If it doesn't, then any attribute nodes that represent default values not coded in the document won't exist. Fortunately, XSLT has some branching elements (<tt class="literal">&lt;xsl:if&gt;</tt> and <tt class="literal">&lt;xsl:choose&gt;</tt>) that can help you deal with these ambiguities; we'll discuss those in <a href="ch04_01.htm">Chapter 4, "Branching and Control Elements"</a>.</p>
        </li>
        <li>
          <p>
<a name="INDEX-185" /></a>
<a name="INDEX-186" /></a>
<a name="INDEX-187" /></a>

The XML 1.0 specification defines two attributes (<tt class="literal">xml:lang</tt> and <tt class="literal">xml:space</tt>) that work like default namespaces. In other words, if the <tt class="literal">&lt;auth:author&gt;</tt> element in our sample document contains the attribute <tt class="literal">xml:lang="en_us"</tt>, that attribute applies to all elements contained inside <tt class="literal">&lt;auth:author&gt;</tt>. Even though that attribute might apply to the <tt class="literal">&lt;last-name&gt;</tt> element, <tt class="literal">&lt;last-name&gt;</tt> won't have an attribute node named <tt class="literal">xml:lang</tt>. Similarly, the <tt class="literal">xml:space</tt> defines whether whitespace in an element should be preserved; valid values for this attribute are <tt class="literal">preserve</tt> and <tt class="literal">default</tt>. Whether these attributes are in effect for a given element or not, the only attribute nodes an element node contains are those tagged in the document and those defined with a default value in the DTD.  </p>
          <p>For more information on language codes and whitespace handling, see the discussions of the XPath <tt class="literal">lang()</tt> function and the XSLT <tt class="literal">&lt;xsl:preserve-space&gt;</tt> and <tt class="literal">&lt;xsl:strip-space&gt;</tt> elements.</p>
        </li>
      </ul>
    </div>
    <div class="sect2">
      <h3 class="sect2">3.1.4. Text Nodes</h3>
      <p>
<a name="INDEX-188" /></a>
<a name="INDEX-189" /></a>

Text nodes are refreshingly simple; they contain text from an element. If the original text in the XML document contained entity or character references, they are resolved before the XPath text node is created. The text node is text, pure and simple. A text node is required to contain as much text as possible; the next or previous node can't be a text node. </p>
      <p>You might have noticed that there are no CDATA nodes in this list. If your XML document contains text in a CDATA section, you can access the contents of the CDATA section as a text node. You have no way of knowing if a given text node was originally a CDATA section. Similarly, all entity references are resolved before anything in your stylesheet is evaluated, so you have no way of knowing if a given piece of text originally contained entity references. </p>
<a name="INDEX-190" /></a>

    </div>
    <div class="sect2">
      <h3 class="sect2">3.1.5. Comment Nodes</h3>
      <p>
<a name="INDEX-191" /></a>
<a name="INDEX-192" /></a>
<a name="INDEX-193" /></a>
<a name="INDEX-194" /></a>

A comment node is also very simple -- it contains some text. Every comment in the source document (except for comments in the DTD) becomes a comment node. The text of the comment node (returned by the <tt class="literal">text()</tt> node test) contains everything inside the comment, except the opening <tt class="literal">&lt;!--</tt> and the closing <tt class="literal">--&gt;</tt>.</p>
    </div>
    <div class="sect2">
      <h3 class="sect2">3.1.6. Processing Instruction Nodes</h3>
      <p>
<a name="INDEX-195" /></a>
<a name="INDEX-196" /></a>
<a name="INDEX-197" /></a>
<a name="INDEX-198" /></a>

A processing instruction node has two parts, a name (returned by the <tt class="literal">name()</tt> function) and a string value. The string value is everything after the name, including whitespace, but not including the <tt class="literal">?&gt;</tt> that closes the processing instruction. </p>
    </div>
    <div class="sect2">
      <h3 class="sect2">3.1.7. Namespace Nodes</h3>
      <p>
<a name="INDEX-199" /></a>

Namespace nodes are almost never used in XSLT stylesheets; they exist primarily for the XSLT processor's benefit. Remember that the declaration of a namespace (such as <tt class="literal">xmlns:auth="http://www.authors.net"</tt>), even though it is technically an attribute in the XML source, becomes a namespace node, not an attribute node.
<a name="INDEX-200" /></a>
<a name="INDEX-201" /></a>
<a name="INDEX-202" /></a>
<a name="INDEX-203" /></a>
<a name="INDEX-204" /></a>


</p>
    </div>
  </div>
  
  
  
  
  


<hr width="684" align="left" />
<div class="navbar"><table width="684" border="0"><tr><td align="left" valign="top" width="228"><a href="ch02_06.htm"><img alt="Previous" border="0" src="../gifs/txtpreva.gif" /></a></td><td align="center" valign="top" width="228"><a href="index.htm"><img alt="Home" border="0" src="../gifs/txthome.gif" /></a></td><td align="right" valign="top" width="228"><a href="ch03_02.htm"><img alt="Next" border="0" src="../gifs/txtnexta.gif" /></a></td></tr><tr><td align="left" valign="top" width="228">2.6. Summary</td><td align="center" valign="top" width="228"><a href="index/index.htm"><img alt="Book Index" border="0" src="../gifs/index.gif" /></a></td><td align="right" valign="top" width="228">3.2. Location Paths</td></tr></table></div>
<hr width="684" align="left" />

<img alt="Library Navigation Links" border="0" src="../gifs/navbar.gif" usemap="#library-map" />
<p><p><font size="-1"><a href="copyrght.htm">Copyright &copy; 2002</a> O'Reilly &amp; Associates. All rights reserved.</font></p>

<map name="library-map">
<area shape="rect" coords="0,0,85,93" href="../index.htm"><area shape="rect" coords="85,0,180,98" href="../sax2/index.htm"><area shape="rect" coords="182,-1,261,100" href="../xmlnut/index.htm"><area shape="rect" coords="263,1,384,96" href="../jxml/index.htm"><area shape="rect" coords="386,1,463,100" href="../jxslt/index.htm"><area shape="rect" coords="466,1,533,112" href="index.htm"><area shape="rect" coords="535,-1,610,108" href="../schema/index.htm"><area shape="rect" coords="613,1,696,121" href="../pxml/index.htm">
      </map>

</body></html>