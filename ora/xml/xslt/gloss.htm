<html><head><title>Glossary (XSLT)</title><link rel="stylesheet" type="text/css" href="../style/style1.css" />

<meta name="DC.Creator" content="Doug Tidwell" /><meta name="DC.Format" content="text/xml" scheme="MIME" /><meta name="DC.Language" content="en-US" /><meta name="DC.Publisher" content="O'Reilly &amp; Associates, Inc." /><meta name="DC.Source" scheme="ISBN" content="0596000537L" /><meta name="DC.Subject.Keyword" content="stuff" /><meta name="DC.Title" content="XSLT" /><meta name="DC.Type" content="Text.Monograph" />

</head><body bgcolor="#ffffff">

<img alt="Book Home" border="0" src="gifs/smbanner.gif" usemap="#banner-map" /><map name="banner-map"><area shape="rect" coords="1,-2,616,66" href="index.htm" alt="XSLT" /><area shape="rect" coords="629,-11,726,25" href="jobjects/fsearch.htm" alt="Search this book" /></map>

<div class="navbar"><table width="684" border="0"><tr><td align="left" valign="top" width="228"><a href="appd_13.htm"><img alt="Previous" border="0" src="../gifs/txtpreva.gif" /></a></td><td align="center" valign="top" width="228"></td><td align="right" valign="top" width="228"><a href="index/index.htm"><img alt="Next" border="0" src="../gifs/txtnexta.gif" /></a></td></tr></table></div>



<h2 class="objtitle">Glossary</h2>
      <dl>
        <b><dt>absolute location path</dt></b>
        <dd>
          
<a name="INDEX-1043" />

A location path that begins with <tt class="literal">/</tt>, followed by one or more location steps separated by <tt class="literal">/</tt>. All location paths that begin with <tt class="literal">/</tt> are evaluated from the root node, so they always return the same result, regardless of the context node. Compare with <em class="emphasis">location path</em> and <em class="emphasis">relative location path</em>.</p>
        </dd>
      </dl>
      <dl>
        <b><dt>ancestor</dt></b>
        <dd>
          A node that appears above a given node. Ancestors include a node's parent, its parent's parent, its parent's parent's parent, etc. XPath also defines the <tt class="literal">ancestor</tt> axis, which includes a node's parent, its parent's parent, its parent's parent's parent, etc., but not the node itself. Contrast with <em class="emphasis">parent</em>.</p>
        </dd>
      </dl>
      <dl>
        <b><dt>attribute node</dt></b>
        <dd>
          The XPath node type that represents an attribute from an XML document. Attributes are different from other nodes because an attribute node is not considered a child of the element node that contains it. Despite this fact, the element node is considered the parent of the attribute node. </p>
        </dd>
      </dl>
      <dl>
        <b><dt>attribute set</dt></b>
        <dd>
          A named group of attributes. You can create an attribute set (with the <tt class="literal">&lt;xsl:attribute-set&gt;</tt> element), then reference that attribute set elsewhere. For more information, see the description of the <tt class="literal">&lt;xsl:attribute-set&gt;</tt> element in <a href="appa_01.htm">Appendix A, "XSLT Reference"</a>.</p>
        </dd>
      </dl>
      <dl>
        <b><dt>attribute value template</dt></b>
        <dd>

          <p>An expression that contains an XPath expression in
          curly braces (<tt class="literal">{}</tt>). The XPath expression
          is evaluated at runtime, and its value replaces the
          expression. For an example of an attribute value template,
          see the discussion of the
          <tt class="literal">&lt;xsl:attribute&gt;</tt> element in <a href="appa_01.htm">Appendix A, "XSLT Reference"</a>; <a href="ch03_01.htm">Chapter 3, "XPath: A Syntax for Describing Needles and Haystacks"</a> contains a complete
          discussion of attribute value templates.</p>

        </dd>
      </dl>
      <dl>
        <b><dt>axis</dt></b>
        <dd>
          A relationship between the context node and other nodes in the document. XPath defines 13 different axes; see <a href="ch03_02.htm">Section 3.2.6, "Axes"</a> in <a href="ch03_01.htm">Chapter 3, "XPath: A Syntax for Describing Needles and Haystacks"</a> for a complete discussion of them.</p>
        </dd>
      </dl>


      <dl>
        <b><dt>base URI</dt></b>
        <dd>
          The URI associated with every node in the XPath source tree. In certain circumstances, the base URI is used to resolve references to other resources. If a given node is an element or processing-instruction node and that node occurs in an external entity, then the base URI for that node is the base URI of the external entity. If an element or processing-instruction node does not occur in an external entity, then its base URI is the base URI of the document in which it appears. The base URI of a document node is the base URI of the document itself, and the base URI of an attribute, comment, namespace, or text node is the base URI of that node's parent. </p>
        </dd>
      </dl>
      <dl>
        <b><dt>CDATA section</dt></b>
        <dd>
          A section of an XML document in which all markup is ignored. A CDATA section begins with the characters <tt class="literal">&lt;![CDATA[</tt>, and ends with the characters <tt class="literal">]]&gt;</tt>. If two right brackets appear in the content of a CDATA section, they must be escaped. Within a stylesheet, determining if a given text node was originally a CDATA section is not possible. It is possible to generate certain elements as CDATA sections with the <tt class="literal">cdata-section-elements</tt> attribute of the <tt class="literal">&lt;xsl:output&gt;</tt> element. </p>
        </dd>
      </dl>
      <dl>
        <b><dt>child</dt></b>
        <dd>
          An immediate descendant of a given node. Contrast with <em class="emphasis">descendant</em>. <tt class="literal">child</tt> is also the name of one of the XPath axes. The children of a node include all comment, element, processing-instruction, and text nodes. Attribute nodes and namespace nodes are not considered children. </p>
        </dd>
      </dl>
      <dl>
        <b><dt>comment node</dt></b>
        <dd>
          A node that represents a comment from the original XML document. This is one of the seven kinds of nodes defined by XPath. </p>
        </dd>
      </dl>
      <dl>
        <b><dt>context</dt></b>
        <dd>
          A data structure that determines how XPath expressions are evaluated. The context consists of five items: the context node, a pair of nonzero positive integers (the context position and context size), a set of variable bindings, a function library, and the set of namespace declarations that are in scope. </p>
        </dd>
      </dl>
      <dl>
        <b><dt>context node</dt></b>
        <dd>

          <p>The node from which all XPath expressions are evaluated. The context node is analogous to the current directory at a command prompt; all commands you type at a command prompt are evaluated in terms of the current directory. Compare with <em class="emphasis">current node</em>.</p>
        </dd>
      </dl>
      <dl>
        <b><dt>context position</dt></b>
        <dd>
          A nonzero positive integer that indicates the position of the current node. The context position is always less than or equal to the context size. </p>
        </dd>
      </dl>
      <dl>
        <b><dt>context size</dt></b>
        <dd>
          The number of nodes in the current node list.</p>
        </dd>
      </dl>
      <dl>
        <b><dt>current node</dt></b>
        <dd>
          The node currently being processed. The node is defined by the <tt class="literal">select</tt> attribute of the <tt class="literal">&lt;xsl:apply-templates&gt;</tt> or <tt class="literal">&lt;xsl:for-each&gt;</tt> elements. Except within a predicate expression, the current node and the context node are the same. </p>
        </dd>
      </dl>
      <dl>
        <b><dt>current node list</dt></b>
        <dd>
          The list of nodes selected by the <tt class="literal">select</tt> attribute of the <tt class="literal">&lt;xsl:apply-templates&gt;</tt> or <tt class="literal">&lt;xsl:for-each&gt;</tt> element currently being processed. By default, the current node list is in document order, but it may be reordered with one or more <tt class="literal">&lt;xsl:sort&gt;</tt> elements. </p>
        </dd>
      </dl>
      <dl>
        <b><dt>descendant</dt></b>
        <dd>
          A given node's children, its children's children, its children's children's children, etc. <tt class="literal">descendant</tt> is also the name of one of the axes defined by XPath. Contrast with <em class="emphasis">child</em>.</p>
        </dd>
      </dl>
      <dl>
        <b><dt>document element</dt></b>
        <dd>
          The element in the XML source document that contains the entire XML document. The node that represents the document element is a child of the root node; the root node and the element node for the document element are not the same.</p>
        </dd>
      </dl>
      <dl>
        <b><dt>element node</dt></b>
        <dd>
          An XPath node that represents an element from the XML source document. </p>
        </dd>
      </dl>
      <dl>
        <b><dt>encoding</dt></b>
        <dd>
          A set of characters, referenced in the XML declaration to describe the characters used in a particular document. The range of values for encodings is defined in <a href="../../../../../../www.ietf.org/rfc/rfc2278.txt">http://www.ietf.org/rfc/rfc2278.txt</a>. The range of values supported by a given XML parser or XSLT processor varies.</p>
        </dd>
      </dl>
      <dl>
        <b><dt>expanded name</dt></b>
        <dd>
          The complete name of an element or attribute, including the local name and a possibly null namespace URI. </p>
        </dd>
      </dl>
      <dl>
        <b><dt>extension element</dt></b>
        <dd>
          An element in an XSLT stylesheet whose namespace prefix references an extension. The XSLT specification defines how extension elements are identified in the stylesheet, but does not specify how they are implemented. Extension elements are implemented with a piece of code that is referenced in the stylesheet; each XSLT processor defines how that code is invoked to handle the transformation of the extension element. See <a href="ch08_01.htm">Chapter 8, "Extending XSLT"</a> for an extensive discussion of extension elements and extension functions. </p>
        </dd>
      </dl>
      <dl>
        <b><dt>extension function</dt></b>
        <dd>
          A function whose namespace prefix references an extension. The XSLT specification defines how extension functions are identified in the stylesheet, but does not specify how they are implemented. Extension functions are implemented with a piece of code that is referenced in the stylesheet; each XSLT processor defines how that code is invoked to handle the invocation of the extension function. See <a href="ch08_01.htm">Chapter 8, "Extending XSLT"</a> for an extensive discussion of extension elements and extension functions. </p>
        </dd>
      </dl>
      <dl>
        <b><dt>fallback processing</dt></b>
        <dd>
          Processing designed to handle the absence of an extension element or an extension function gracefully. This processing is typically accomplished with the <tt class="literal">element-available()</tt> or the <tt class="literal">function-available()</tt> function. When either function returns false, a stylesheet can respond gracefully to the absence of the requested function. XSLT also defines the <tt class="literal">&lt;xsl:fallback&gt;</tt> element, which can be used when an extension element is not available. </p>
        </dd>
      </dl>
      <dl>
        <b><dt>ID</dt></b>
        <dd>
          One of the basic datatypes defined by the XML specification. In an XML document, one attribute of an element can be declared to be of type <tt class="literal">ID</tt>; this means that the value of that attribute must be unique across all attributes of type <tt class="literal">ID</tt> for all elements in the document. No more than one attribute on a given element can be of type <tt class="literal">ID</tt>. Attributes of type <tt class="literal">ID</tt> are useful for generating cross-references with the <tt class="literal">id()</tt> function. See <a href="ch05_01.htm">Chapter 5, "Creating Links and Cross-References"</a> for an extensive discussion of the <tt class="literal">ID</tt>, <tt class="literal">IDREF</tt>, and <tt class="literal">IDREFS</tt> datatypes.</p>
        </dd>
      </dl>
      <dl>
        <b><dt>IDREF</dt></b>
        <dd>
          One of the basic datatypes defined by the XML specification. In an XML document, an attribute declared to be of type <tt class="literal">IDREF</tt> must have a value that matches an <tt class="literal">ID</tt> attribute elsewhere in the document. Attributes of type <tt class="literal">IDREF</tt> are useful for generating cross-references with the <tt class="literal">id()</tt> function. See <a href="ch05_01.htm">Chapter 5, "Creating Links and Cross-References"</a> for an extensive discussion of the <tt class="literal">ID</tt>, <tt class="literal">IDREF</tt>, and <tt class="literal">IDREFS</tt> datatypes.</p>
        </dd>
      </dl>
      <dl>
        <b><dt>IDREFS</dt></b>
        <dd>
          One of the basic datatypes defined by the XML specification. In an XML document, an <tt class="literal">IDREFS</tt> attribute must contain one or more whitespace-separated values, each of which matches an <tt class="literal">ID</tt> attribute elsewhere in the document. Attributes of type <tt class="literal">IDREFS</tt> are useful for generating cross-references with the <tt class="literal">id()</tt> function. See <a href="ch05_01.htm">Chapter 5, "Creating Links and Cross-References"</a> for an extensive discussion of the <tt class="literal">ID</tt>, <tt class="literal">IDREF</tt>, and <tt class="literal">IDREFS</tt> datatypes. </p>
        </dd>
      </dl>
      <dl>
        <b><dt>key</dt></b>
        <dd>
          A key is similar to a database index. It has three components: a <em class="emphasis">name</em>, used to identify the key (specified with the <tt class="literal">name</tt> attribute of the <tt class="literal">&lt;xsl:key&gt;</tt> element); the <em class="emphasis">nodes</em>, which will be returned by the key (specified with the <tt class="literal">use</tt> attribute of the <tt class="literal">&lt;xsl:key&gt;</tt> element); and the <em class="emphasis">values</em>, used to search for things in the key (specified with the <tt class="literal">match</tt> attribute of the <tt class="literal">&lt;xsl:key&gt;</tt> element)</p>

          <p>The key <tt class="literal">&lt;key name="language-index"
          match="defn" use="@language"/&gt;</tt>, for example,
          defines a new key named
          <tt class="literal">language-index</tt>. Given a value for the
          <tt class="literal">language</tt> attribute, the key returns all
          <tt class="literal">&lt;defn&gt;</tt> elements whose
          <tt class="literal">language</tt> attributes match the given
          value. See <a href="ch05_02.htm">Section 5.2, "Generating Links with the key() Function"</a> in <a href="ch05_01.htm">Chapter 5, "Creating Links and Cross-References"</a> for a complete discussion of keys and how
          they are used. </p>

        </dd>
      </dl>
      <dl>
        <b><dt>literal result element (LRE)</dt></b>
        <dd>

          <p>An element in an XSLT stylesheet that does not belong to the XSLT namespace and is not an extension element. Literal elements are simply copied to the result tree. </p>
        </dd>
      </dl>
      <dl>
        <b><dt>local name</dt></b>
        <dd>
          The nonqualified portion of an element or attribute name. For example, in the element <tt class="literal">&lt;xsl:template&gt;</tt>, <tt class="literal">template</tt> is the local name. </p>
        </dd>
      </dl>
      <dl>
        <b><dt>location path</dt></b>
        <dd>
          An XPath expression that selects a set of nodes relative to the context node. Compare with <em class="emphasis">absolute location path</em> and <em class="emphasis">relative location path</em>.</p>
        </dd>
      </dl>
      <dl>
        <b><dt>location step</dt></b>
        <dd>
          Consists of three parts: an axis name, a node test, and zero or more predicate expressions. There are three location steps in the XPath expression <tt class="literal">preceding-sibling::region/product[@name="Sandpiper"]/text()</tt>.</p>
          <p>The first location step is <tt class="literal">preceding-sibling::region</tt>; it has an axis name of <tt class="literal">preceding-sibling</tt> and a node test of <tt class="literal">region</tt>. It selects all <tt class="literal">&lt;region&gt;</tt> elements that are preceding siblings of the context node. It does not have a predicate expression. </p>
          <p>The second location step, <tt class="literal">product[@name="Sandpiper"]</tt>, has an axis name of <tt class="literal">child</tt>, the default axis. Its node test is <tt class="literal">product</tt> and it has the predicate <tt class="literal">[@name="Sandpiper"]</tt>. It selects all <tt class="literal">&lt;product&gt;</tt> children of the previous location step that have an attribute named <tt class="literal">name</tt> with a value of <tt class="literal">Sandpiper</tt>. </p>
          <p>The third location step, <tt class="literal">text()</tt>, has an axis name of <tt class="literal">child</tt> and a node test of <tt class="literal">text()</tt>. It selects all text node children of the previous location step. It does not have a predicate expression.</p>
        </dd>
      </dl>
      <dl>
        <b><dt>mode</dt></b>
        <dd>

          An XSLT feature that allows an element to be processed
          multiple times, using a different template and producing a
          different result each time. See the discussion of the
          <tt class="literal">&lt;xsl:apply-templates&gt;</tt>
          element in <a href="appa_01.htm">Appendix A, "XSLT Reference"</a> for a detailed
          example of modes.</p>

        </dd> </dl> <dl> <b><dt>namespace</dt></b>
      <dd> A collection of element and attribute names
      that are associated with a URI. </p> </dd>
      </dl> <dl>
      <b><dt>namespace node</dt></b> <dd> The XPath
      node type that corresponds to a namespace declaration in an XML
      document. </p> </dd> </dl> <dl><dt><b>namespace
      prefix</dt></b> <dd>Part of a qualified name used
      to associate an element or attribute with a namespace URI.</p>
      </dd> </dl> <dl><dt><b>namespace
      URI</dt></b> <dd>The string associated with a
      collection of element and attribute names. Although commonly
      referred to as a URI, a namespace URI can actually be any
      string.</p> </dd> </dl> <dl> <b><dt>NCName</dt></b> <dd>
      An XML name, used for local names and namespace
      prefixes. An NCName must start with a letter or an
      underscore (_).</p> </dd> </dl>
      <dl><dt><b>node
      test</dt></b><dd> An XPath expression that
      selects certain nodes. The expressions
      <tt class="literal">child::*</tt>, <tt class="literal">para</tt>, and
      <tt class="literal">@id</tt> select all child nodes, all
      <tt class="literal">&lt;para&gt;</tt> child nodes, and any attribute
      named <tt class="literal">id</tt>, respectively. Four node
      tests -- (<tt class="literal">text()</tt>,
      <tt class="literal">comment()</tt>, <tt class="literal">node()</tt>, and
      <tt class="literal">processing-instruction()</tt>) -- look like
      functions, even though they technically aren't. They allow you
      to select parts of an XML document not accessible through the
      various axes defined by XPath. See <a href="appb_02.htm">Section B.2, "XPath Node Tests"</a> in <a href="appb_01.htm">Appendix B, "XPath Reference"</a> for a
      complete discussion of these node tests.</p> </dd>
      </dl> <dl>
      <b><dt>output escaping</dt></b> <dd> The
      process of changing reserved characters (such as
      <tt class="literal">&lt;</tt>, <tt class="literal">&gt;</tt>, and
      <tt class="literal">&amp;</tt>) into their entity references (such as
      <tt class="literal">&amp;lt;</tt>, <tt class="literal">&amp;gt;</tt>, and
      <tt class="literal">&amp;amp;</tt>). </p> </dd> </dl>
      <dl>
      <b><dt>parameter</dt></b> <dd> An XSLT
      mechanism used to bind a name to a value, defined with the
      <tt class="literal">&lt;xsl:param&gt;</tt> element. The difference
      between a parameter and a variable is that the value
      specified in the definition of a parameter is a default
      value. When the template or stylesheet that contains the
      parameter is invoked, the default value can be overridden. Like
      variables, though, once the value of a parameter is set, it
      cannot be changed. </p> </dd> </dl> <dl> <b><dt>parent</dt></b> <dd>
      A node that appears immediately above a given node. A
      parent is a node's first ancestor. XPath also defines the
      <tt class="literal">parent</tt> axis, which contains a node's
      parent. With the exception of the root node, all nodes have
      a parent. Contrast with <em class="emphasis">ancestor</em>.</p>
      </dd> </dl> <dl><dt><b>predicate
      expression</dt></b> <dd>An XPath expression that
      appears in square brackets (<tt class="literal">[]</tt>). Predicate
      expressions filter a node-set, selecting only nodes that match
      the expression in square brackets. See <a href="ch03_02.htm">Section 3.2.7, "Predicates"</a> in <a href="ch03_01.htm">Chapter 3, "XPath: A Syntax for Describing Needles and Haystacks"</a> for more
      information.</p> </dd> </dl> <dl> <b><dt>prefix</dt></b> <dd>
      An abbreviation for <em class="emphasis">namespace
      prefix</em>.</p> </dd> </dl> <dl><dt><b>processing
      instruction</dt></b> <dd>Part of an XML document
      containing instructions for applications. Here is a sample
      processing instruction:</p> <blockquote><pre class="code">
      &lt;?xml-stylesheet href="docbook/html/docbook.xsl"
      type="text/xsl"?&gt; </pre></blockquote> <p>This processing
      instruction associates an XSLT stylesheet with an XML
      document. See <a href="ch01_02.htm">Section 1.2.4.8, "Associating stylesheets with XML documents"</a> in
      <a href="ch01_01.htm">Chapter 1, "Getting Started"</a> for a complete discussion of
      processing instructions.</p> </dd> </dl>
      <dl>
      <b><dt>processing-instruction node</dt></b> <dd>
      The XPath node type that represents a processing
      instruction from an XML document.</p> </dd>
      </dl> <dl>
      <b><dt>qualified name</dt></b> <dd> An
      element or attribute name that has been qualified with a
      namespace prefix. The format of a qualified name is
      <tt class="literal">prefix:local-name</tt>, where
      <tt class="literal">prefix</tt> and <tt class="literal">local-name</tt> are
      both NCNames. For
      example, <tt class="literal">&lt;xsl:template&gt;</tt> is a qualified
      name, while <tt class="literal">&lt;template&gt;</tt> is not. The
      names in an XSLT stylesheet (variable names, template names,
      mode names, etc.) must be qualified names. </p> </dd>
      </dl> <dl>
      <b><dt>QNAME</dt></b> <dd> An abbreviation
      for <em class="emphasis">qualified name</em>.</p> </dd>
      </dl> <dl><dt><b>relative
      location path</dt></b> <dd>A location path that
      consists of one or more location steps
      separated by <tt class="literal">/</tt>. Compare with
      <em class="emphasis">location path</em> and <em class="emphasis">absolute
      location path</em>.</p> </dd> </dl>
      <dl>
      <b><dt>result-tree fragment</dt></b> <dd> A
      fragment of the is result tree that can be associated with a
      variable. See <a href="appb_05.htm">Section B.5, "Datatypes"</a> in <a href="appb_01.htm">Appendix B, "XPath Reference"</a> for a more complete discussion of
      result-tree fragments.</p> </dd> </dl>
      <dl><dt><b>root
      node</dt></b> <dd>The XPath node that represents
      the root of an XML document. Note that the root node is not the
      same as the element node for the document
      element. The root node is specified with the XPath
      expression <tt class="literal">/</tt>. The children of the root node
      are the element node for the document element, as well as any
      comments or processing instructions that occur outside the
      document element. </p> </dd> </dl> <dl> <b><dt>sibling</dt></b>
      <dd> Two nodes that have the same parent. XPath defines the
      <tt class="literal">preceding-sibling</tt> and
      <tt class="literal">following-sibling</tt> axes.</p> </dd>
      </dl> <dl>
      <b><dt>stylesheet</dt></b> <dd> An XML
      document, written with the XSLT vocabulary, that specifies how
      an XML document should be transformed. </p> </dd>
      </dl> <dl>
      <b><dt>template</dt></b> <dd> A rule in an
      XSLT stylesheet that defines how part of an XML document should
      be transformed. Templates are defined with the
      <tt class="literal">&lt;xsl:template&gt;</tt> element.</p>
      </dd> </dl> <dl>
      <b><dt>text node</dt></b> <dd> A group of
      characters from an XML document. Text nodes are one of the seven
      types of nodes defined by XPath. The XPath specification states
      that as much text as possible must be combined into a single
      text node. In other words, a text node will never have a
      preceding or following sibling that is also a text
      node. </p> </dd> </dl> <dl><dt><b>top-level
      element</dt></b> <dd>An element whose parent is the
      <tt class="literal">&lt;xsl:stylesheet&gt;</tt> element.</p>
      </dd> </dl> <dl><dt><b>unparsed
      entity</dt></b> <dd>A resource in an XML
      document whose contents may or may not be text, and if text, may
      not be XML. Every unparsed entity has an associated XML
      notation. See the discussion of the
      <tt class="literal">unparsed-entity-uri()</tt> function in <a href="appc_01.htm">Appendix C, "XSLT and XPath Function Reference"</a> for more details on unparsed
      entities.</p> </dd> </dl> <dl><dt><b>valid
      document</dt></b> <dd>An XML document that
      follows the basic rules of XML documents and additionally
      follows all rules of its associated document type definition or
      schema. See <a href="ch01_02.htm">Section 1.2.2, "XML Document Rules"</a> in <a href="ch01_01.htm">Chapter 1, "Getting Started"</a> for a complete discussion of the XML
      document rules; <a href="ch01_02.htm">Section 1.2.2.8, "Document Type Definitions (DTDs) and XML Schemas"</a>, also in
      <a href="ch01_01.htm">Chapter 1, "Getting Started"</a>, discusses document type definitions
      and schemas. </p> </dd> </dl> <dl> <b><dt>variable</dt></b>
      <dd> An XSLT mechanism used to bind a name to a
      value, defined with the <tt class="literal">&lt;xsl:variable&gt;</tt>
      element. Variables are different from parameters because
      parameters can have default values. One significant difference
      between XSLT variables and variables in most other programming
      languages is that once an XSLT variable is initialized, its
      value cannot be changed. See <a href="ch04_05.htm#xslt-CHP-4-SECT-5">Section 4.5, "Variables"</a>
      in <a href="ch04_01.htm">Chapter 4, "Branching and Control Elements"</a> for a complete discussion of the
      <tt class="literal">&lt;xsl:variable&gt;</tt> element and how it is
      used. </p> </dd> </dl> <dl><dt><b>well-formed
      document</dt></b> <dd>An XML document that
      follows the basic rules of XML documents. See <a href="ch01_02.htm">Section 1.2.2, "XML Document Rules"</a> in <a href="ch01_01.htm">Chapter 1, "Getting Started"</a>
      for a complete discussion of those rules.</p> </dd>
      </dl> <dl>
      <b><dt>whitespace</dt></b> <dd> One of four
      characters: space (<tt class="literal">&amp;#x20</tt>), tab
      (<tt class="literal">&amp;#x09</tt>), return
      (<tt class="literal">&amp;#x0D</tt>), or linefeed
      (<tt class="literal">&amp;#x0A</tt>).</p> </dd> </dl>
      <dl><dt><b>XML
      declaration</dt></b> <dd>Part of an XML document
      that defines the version of XML being used. Although the XML
      declaration looks like a processing
      instruction, it is not. For that reason, you cannot
      access the XML declaration from an XSLT stylesheet or an XPath
      expression.  <a name="INDEX-1044" />

</p>
        </dd>
      </dl>

  

<hr width="684" align="left" />
<div class="navbar"><table width="684" border="0"><tr><td align="left" valign="top" width="228"><a href="appd_13.htm"><img alt="Previous" border="0" src="../gifs/txtpreva.gif" /></a></td><td align="center" valign="top" width="228"><a href="index.htm"><img alt="Home" border="0" src="../gifs/txthome.gif" /></a></td><td align="right" valign="top" width="228"><a href="index/index.htm"><img alt="Next" border="0" src="../gifs/txtnexta.gif" /></a></td></tr><tr><td align="left" valign="top" width="228">D.13. How Do I Control Angle Brackets and Quote Marks in My Output?</td><td align="center" valign="top" width="228"><a href="index/index.htm"><img alt="Book Index" border="0" src="../gifs/index.gif" /></a></td><td align="right" valign="top" width="228">Index</td></tr></table></div>
<hr width="684" align="left" />

<img alt="Library Navigation Links" border="0" src="../gifs/navbar.gif" usemap="#library-map" />
<p><p><font size="-1"><a href="copyrght.htm">Copyright &copy; 2002</a> O'Reilly &amp; Associates. All rights reserved.</font></p>

<map name="library-map">
<area shape="rect" coords="0,0,85,93" href="../index.htm"><area shape="rect" coords="85,0,180,98" href="../sax2/index.htm"><area shape="rect" coords="182,-1,261,100" href="../xmlnut/index.htm"><area shape="rect" coords="263,1,384,96" href="../jxml/index.htm"><area shape="rect" coords="386,1,463,100" href="../jxslt/index.htm"><area shape="rect" coords="466,1,533,112" href="index.htm"><area shape="rect" coords="535,-1,610,108" href="../schema/index.htm"><area shape="rect" coords="613,1,696,121" href="../pxml/index.htm">
      </map>

</body></html>
