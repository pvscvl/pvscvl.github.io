<html><head><title>Branching Elements of XSLT (XSLT)</title><link rel="stylesheet" type="text/css" href="../style/style1.css" />

<meta name="DC.Creator" content="Doug Tidwell" /><meta name="DC.Format" content="text/xml" scheme="MIME" /><meta name="DC.Language" content="en-US" /><meta name="DC.Publisher" content="O'Reilly &amp; Associates, Inc." /><meta name="DC.Source" scheme="ISBN" content="0596000537L" /><meta name="DC.Subject.Keyword" content="stuff" /><meta name="DC.Title" content="XSLT" /><meta name="DC.Type" content="Text.Monograph" />

</head><body bgcolor="#ffffff">

<img alt="Book Home" border="0" src="gifs/smbanner.gif" usemap="#banner-map" /><map name="banner-map"><area shape="rect" coords="1,-2,616,66" href="index.htm" alt="XSL" /><area shape="rect" coords="629,-11,726,25" href="jobjects/fsearch.htm" alt="Search this book" /></map>

<div class="navbar"><table width="684" border="0"><tr><td align="left" valign="top" width="228"><a href="ch04_01.htm"><img alt="Previous" border="0" src="../gifs/txtpreva.gif" /></a></td><td align="center" valign="top" width="228"></td><td align="right" valign="top" width="228"><a href="ch04_03.htm"><img alt="Next" border="0" src="../gifs/txtnexta.gif" /></a></td></tr></table></div>



    <h2 class="sect1">4.2. Branching Elements of XSLT</h2>
<p>Three XSLT elements are used for branching: <tt class="literal">&lt;xsl:if&gt;</tt>, <tt class="literal">&lt;xsl:choose&gt;</tt>, and <tt class="literal">&lt;xsl:for-each&gt;</tt>. The first two are much like the <tt class="literal">if</tt> and <tt class="literal">case</tt> statements you may be familiar with from other languages, while the <tt class="literal">for-each</tt> element is significantly different from the <tt class="literal">for</tt> or <tt class="literal">do-while</tt> structures in other languages. We'll discuss all of them here.</p>
<a name="xslt-CHP-4-SECT-2.1" /><div class="sect2">
      <h3 class="sect2">4.2.1. The &lt;xsl:if&gt; Element</h3>
      <p><a name="INDEX-305" />
<a name="INDEX-306" />
<a name="INDEX-307" />

The <tt class="literal">&lt;xsl:if&gt;</tt> element looks like this:</p>
      <blockquote><pre class="code">
&lt;xsl:if test="count(zone) &amp;gt; 2"&gt;
  &lt;xsl:text&gt;Applicable zones: &lt;/xsl:text&gt;
  &lt;xsl:apply-templates select="zone"/&gt;
&lt;/xsl:if&gt;</pre></blockquote>
      <p>The <tt class="literal">&lt;xsl:if&gt;</tt> element, surprisingly enough, implements an <tt class="literal">if</tt> statement. The element has only one attribute, <tt class="literal">test</tt>. If the value of <tt class="literal">test</tt> evaluates to the boolean value <tt class="literal">true</tt>, then all elements inside the <tt class="literal">&lt;xsl:if&gt;</tt> are processed. If <tt class="literal">test</tt> evaluates to <tt class="literal">false</tt>, then the contents of the <tt class="literal">&lt;xsl:if&gt;</tt> element are ignored. (If you want to implement an if-then-else statement, check out the <tt class="literal">&lt;xsl:choose&gt;</tt> element described in the next section.)  </p>
      <p>
<a name="INDEX-308" />
<a name="INDEX-309" />
<a name="INDEX-310" />

Notice that we used <tt class="literal">&amp;gt;</tt> instead of <tt class="literal">&gt;</tt> in the attribute value. You're always safe using <tt class="literal">&amp;gt;</tt> here, although some XSLT processors process the greater-than sign correctly if you use <tt class="literal">&gt;</tt> instead. If you need to use the less-than operator (<tt class="literal">&lt;</tt>), you'll have to use the <tt class="literal">&amp;lt;</tt> entity. The same holds true for the less-than-or-equal operator (<tt class="literal">&lt;=</tt>) and the greater-than-or-equal (<tt class="literal">&gt;=</tt>) operators. See <a href="appb_04.htm">Section B.4.2, "Boolean Operators"</a> for more information on this topic.
<a name="INDEX-311" />
<a name="INDEX-312" />
<a name="INDEX-313" />
<a name="INDEX-314" />
<a name="INDEX-315" />
<a name="INDEX-316" />
<a name="INDEX-317" />


</p>
      <div class="sect3">
        <h3 class="sect3">4.2.1.1. Converting to boolean values</h3>
        <p>
<a name="INDEX-318" />
<a name="INDEX-319" />
<a name="INDEX-320" />

The <tt class="literal">&lt;xsl:if&gt;</tt> element is pretty simple, but it's the first time we've had to deal with <em class="emphasis">boolean values</em>. These values will come up later, so we might as well discuss them here. Attributes like the <tt class="literal">test</tt> attribute of the <tt class="literal">&lt;xsl:if&gt;</tt> element convert whatever their values happen to be into a boolean value. If that boolean value is <tt class="literal">true</tt>, the <tt class="literal">&lt;xsl:if&gt;</tt> element is processed. (The <tt class="literal">&lt;xsl:when&gt;</tt> element, which we'll discuss in just a minute, has a <tt class="literal">test</tt> attribute as well.)</p>

        <p>Here's the rundown of how various datatypes are converted to boolean values:</p>
        <dl>
<dt><i>number</i></dt>
          <dd>
            
<a name="INDEX-321" />

If a number is positive or negative zero, it is <tt class="literal">false</tt>. If a numeric value is <tt class="literal">NaN</tt> (not a number; if I try to use the string "blue" as a number, the result is <tt class="literal">NaN</tt>), it is <tt class="literal">false</tt>. If a number has any other value, it is <tt class="literal">true</tt>. </p>
          </dd>

<dt><i>node-set</i></dt>
          <dd>
            
<a name="INDEX-322" />

An empty node-set is <tt class="literal">false</tt>, a non-empty node-set is <tt class="literal">true</tt>.</p>
          </dd>

<dt><i>string</i></dt>
          <dd>
            
<a name="INDEX-323" />

A zero-length string is <tt class="literal">false</tt>; a string whose length is not zero is <tt class="literal">true</tt>.</p>
          </dd>

        </dl>
        <p>These rules are defined in Section 4.3 of the XPath specification.</p>
      </div>
      <a name="xslt-CHP-4-SECT-2.1.2" /><div class="sect3">
        <h3 class="sect3">4.2.1.2. Boolean examples</h3>
        <p>Here are some examples that illustrate how boolean values evaluate the <tt class="literal">test</tt> attribute:</p>
        <dl>
          
<dt><tt class="literal">&lt;xsl:if test="count(zone) &amp;gt;= 2"&gt;</tt></dt>
<dd> 
This is a boolean expression because it uses the greater-than-or-equal boolean operator. If the <tt class="literal">count()</tt> function returns a value greater than or equal to 2, the <tt class="literal">test</tt> attribute is <tt class="literal">true</tt>. Otherwise, the <tt class="literal">test</tt> attribute is <tt class="literal">false</tt>. </p>
          </dd>


<dt><tt class="literal">&lt;xsl:if test="$x"&gt;</tt></dt>          
<dd> 
The variable <tt class="literal">x</tt> is evaluated. If it is a string, then the <tt class="literal">test</tt> attribute is <tt class="literal">true</tt> only if the string has a length greater than zero. If it is a node-set, then the <tt class="literal">test</tt> attribute is <tt class="literal">true</tt> only if the node-set has at least one member. If it is a number, then the <tt class="literal">test</tt> attribute is <tt class="literal">true</tt> only if the number is anything other than positive zero, negative zero, or <tt class="literal">NaN</tt>. (Of course, if <tt class="literal">x</tt> is a boolean value, <tt class="literal">true</tt> is <tt class="literal">true</tt> and <tt class="literal">false</tt> is <tt class="literal">false</tt>.)</p>
</dd>



<dt><tt class="literal">&lt;xsl:if test="true()"&gt;</tt></dt>
<dd> 
The boolean function <tt class="literal">true()</tt> always returns the boolean value <tt class="literal">true</tt>. Therefore, this <tt class="literal">test</tt> attribute is always <tt class="literal">true</tt>.</p>
          </dd>


<dt><tt class="literal">&lt;xsl:if test="true"&gt;</tt></dt>
          <dd>
This example is a trick. This <tt class="literal">test</tt> attribute is <tt class="literal">true</tt> only if there is at least one <tt class="literal">&lt;true&gt;</tt> element in the current context. The XSLT processor interprets the value <tt class="literal">true</tt> as an XPath expression that specifies all <tt class="literal">&lt;true&gt;</tt> elements in the current context. The strings <tt class="literal">true</tt> and <tt class="literal">false</tt> don't have any special significance in XSLT.</p>
          </dd>



<dt><tt class="literal">&lt;xsl:if test="'true'"&gt;</tt></dt>
          <dd> 
This <tt class="literal">test</tt> attribute is always <tt class="literal">true</tt>. Notice that in this case we used single quotes inside double quotes to specify that this is a literal string, not an element name. This <tt class="literal">test</tt> attribute is always <tt class="literal">true</tt> because the string has a length greater than zero, <em class="emphasis">not</em> because its value happens to be the word "true."</p>
          </dd>


<dt><tt class="literal">&lt;xsl:if test="'false'"&gt;</tt></dt>
          <dd> 
Another trick example; this <tt class="literal">test</tt> attribute is always <tt class="literal">true</tt>. As before, we used single quotes inside double quotes to specify that this is a literal string. Because the string has a length greater than zero, the <tt class="literal">test</tt> attribute is always <tt class="literal">true</tt>. The value of the nonempty string, confusing as it is, doesn't matter.</p>
          </dd>


<dt><tt class="literal">&lt;xsl:if test="not(3)"&gt;</tt></dt>
          <dd> 
This <tt class="literal">test</tt> attribute is always <tt class="literal">false</tt>. The literal <tt class="literal">3</tt> evaluates to <tt class="literal">true</tt>, so its negation is <tt class="literal">false</tt>. On the other hand, the expressions <tt class="literal">not(0)</tt> and <tt class="literal">not(-0)</tt> are always <tt class="literal">true</tt>.</p>
          </dd>


<dt><tt class="literal">&lt;xsl:if test="false()"&gt;</tt></dt>
          <dd> 
This <tt class="literal">test</tt> attribute is always <tt class="literal">false</tt>. The boolean function <tt class="literal">false()</tt> always returns the boolean value <tt class="literal">false</tt>. </p>
          </dd>


<dt><tt class="literal">&lt;xsl:if test="section/section"&gt;</tt></dt>
          <dd> 
The XPath expression <tt class="literal">section/section</tt> returns a node-set. If the current context contains one or more <tt class="literal">&lt;section&gt;</tt> elements that contain a <tt class="literal">&lt;section&gt;</tt> element in turn, the <tt class="literal">test</tt> attribute is <tt class="literal">true</tt>. If no such elements exist in the current context, the <tt class="literal">test</tt> attribute is <tt class="literal">false</tt>. 
<a name="INDEX-324" />
<a name="INDEX-325" />
<a name="INDEX-326" />
<a name="INDEX-327" />

</p>
          </dd>

        </dl>
      </div>
    </div>
    <a name="xslt-CHP-4-SECT-2.2" /><div class="sect2">
      <h3 class="sect2">4.2.2. The &lt;xsl:choose&gt; Element</h3>
      <p>
<a name="INDEX-328" />
<a name="INDEX-329" />
<a name="INDEX-330" />
<a name="INDEX-331" />
<a name="INDEX-332" />
<a name="INDEX-333" />
<a name="INDEX-334" />


The <tt class="literal">&lt;xsl:choose&gt;</tt> element is the equivalent of a <tt class="literal">case</tt> or <tt class="literal">switch</tt> statement in other programming languages. You can also use it to implement an if-then-else statement. An <tt class="literal">&lt;xsl:choose&gt;</tt> contains at least one <tt class="literal">&lt;xsl:when&gt;</tt> element (logically equivalent to an <tt class="literal">&lt;xsl:if&gt;</tt> element), with an optional <tt class="literal">&lt;xsl:otherwise&gt;</tt> element. The <tt class="literal">test</tt> attribute of each <tt class="literal">&lt;xsl:when&gt;</tt> element is evaluated until the XSLT processor finds one that evaluates to <tt class="literal">true</tt>. When that happens, the contents of that <tt class="literal">&lt;xsl:when&gt;</tt> element are evaluated. If none of the <tt class="literal">&lt;xsl:when&gt;</tt> elements have a test that is <tt class="literal">true</tt>, the contents of the <tt class="literal">&lt;xsl:otherwise&gt;</tt> element (if there is one) are processed. </p>
      <p>Here's how these XSLT elements compare to the <tt class="literal">switch</tt> or <tt class="literal">select/case</tt> statements you might know from other languages:</p>
      <ul>
        <li>
          <p>The C, C++, and Java switch statement is roughly equivalent to the &lt;xsl:choose&gt; element. The one exception is that procedural languages tend to use fallthrough processing. In other words, if a branch of the switch statement evaluates to true, the runtime executes everything until it encounters a break statement, even if some of that code is part of other branches. The &lt;xsl:choose&gt; element doesn't work that way. If a given &lt;xsl:when&gt; evaluates to true, only the statements inside that &lt;xsl:when&gt; are evaluated. </p>
        </li>
        <li>
          <p>The Java <tt class="literal">case</tt> statement is equivalent to the <tt class="literal">&lt;xsl:when&gt;</tt> element. In Java, if a given <tt class="literal">case</tt> statement does not end with a <tt class="literal">break</tt> statement, the following case is executed as well. Again, this is not the case with XSLT; only the contents of the first <tt class="literal">&lt;xsl:when&gt;</tt> element that is <tt class="literal">true</tt> are processed. </p>
        </li>
        <li>

          <p>The Java and C++ <tt class="literal">default</tt> statement is equivalent to the <tt class="literal">&lt;xsl:otherwise&gt;</tt> element. </p>
        </li>
      </ul>
      <div class="sect3">
        <h3 class="sect3">4.2.2.1. &lt;xsl:choose&gt; example</h3>
        <p>Here's a sample <tt class="literal">&lt;xsl:choose&gt;</tt> element that sets the background color of the table's rows. If the <tt class="literal">bgcolor</tt> attribute is coded on the <tt class="literal">&lt;table-row&gt;</tt> element, the value of that attribute is used as the color; otherwise, the sample uses the <tt class="literal">position()</tt> function and the <tt class="literal">mod</tt> operator to cycle the colors between <tt class="literal">papayawhip</tt>, <tt class="literal">mintcream</tt>, <tt class="literal">lavender</tt>, and <tt class="literal">whitesmoke</tt>. </p>
        <blockquote><pre class="code">
&lt;xsl:template match="table-row"&gt;
  &lt;tr&gt;
    &lt;xsl:attribute name="bgcolor"&gt;
     &lt;xsl:choose&gt;
        &lt;xsl:when test="@bgcolor"&gt;
          &lt;xsl:value-of select="@bgcolor"/&gt;
        &lt;/xsl:when&gt;
        &lt;xsl:when test="position() mod 4 = 0"&gt;
          &lt;xsl:text&gt;papayawhip&lt;/xsl:text&gt;
        &lt;/xsl:when&gt;
        &lt;xsl:when test="position() mod 4 = 1"&gt;
          &lt;xsl:text&gt;mintcream&lt;/xsl:text&gt;
        &lt;/xsl:when&gt;
        &lt;xsl:when test="position() mod 4 = 2"&gt;
          &lt;xsl:text&gt;lavender&lt;/xsl:text&gt;
        &lt;/xsl:when&gt;
        &lt;xsl:otherwise&gt;
          &lt;xsl:text&gt;whitesmoke&lt;/xsl:text&gt;
        &lt;/xsl:otherwise&gt;
      &lt;/xsl:choose&gt;
    &lt;/xsl:attribute&gt;
    &lt;xsl:apply-templates select="*"/&gt;
  &lt;/tr&gt;
&lt;/xsl:template&gt;</pre></blockquote>
        <p>In this sample, we use <tt class="literal">&lt;xsl:choose&gt;</tt> to generate the value of the <tt class="literal">bgcolor</tt> attribute of the <tt class="literal">&lt;tr&gt;</tt> element. Our first test is to see if the <tt class="literal">bgcolor</tt> attribute of the <tt class="literal">&lt;table-row&gt;</tt> element exists; if it does, we use that value for the background color and the <tt class="literal">&lt;xsl:otherwise&gt;</tt> and other <tt class="literal">&lt;xsl:when&gt;</tt> elements are ignored. (If the <tt class="literal">bgcolor</tt> attribute is coded, the XPath expression <tt class="literal">@bgcolor</tt> returns a node-set containing a single attribute node.)</p>
        <p>The next three <tt class="literal">&lt;xsl:when&gt;</tt> elements check the position of the current <tt class="literal">&lt;table-row&gt;</tt> element. The use of the <tt class="literal">mod</tt> operator here is the most efficient way to cycle between the various options. Finally, we use an <tt class="literal">&lt;xsl:otherwise&gt;</tt> element to specify <tt class="literal">whitesmoke</tt> as the default case. If <tt class="literal">position() mod 4 = 3</tt>, the background color will be <tt class="literal">whitesmoke</tt>. </p>
        <p>A couple of minor details: in this example, we could replace the <tt class="literal">&lt;xsl:otherwise&gt;</tt> element with <tt class="literal">&lt;xsl:when test="position() mod 4 = 3"&gt;</tt>; that is logically equivalent to the example as coded previously. For obfuscation bonus points, we could code the second <tt class="literal">&lt;xsl:when&gt;</tt> element as <tt class="literal">&lt;xsl:when test="not(position() mod 4)"&gt;</tt>. (Remember that the boolean negation of zero is <tt class="literal">true</tt>.)</p>
      </div>
    </div>
    <a name="xslt-CHP-4-SECT-2.3" /><div class="sect2">
      <h3 class="sect2">4.2.3. The &lt;xsl:for-each&gt; Element</h3>
      <p>
<a name="INDEX-335" />
<a name="INDEX-336" />

If you want to process all the nodes that match a certain criteria, you can use the <tt class="literal">&lt;xsl:for-each&gt;</tt> element. Be aware that this isn't a traditional <tt class="literal">for</tt> loop; you can't ask the XSLT processor to do something like this:</p>
      <blockquote><pre class="code">
for i = 1 to 10 do</pre></blockquote>
      <p>The <tt class="literal">&lt;xsl:for-each&gt;</tt> element lets you select a set of nodes, then do something with each of them. Let me mention again that this is not the same as a traditional <tt class="literal">for</tt> loop. Another important point is that the current node changes with each iteration through the <tt class="literal">&lt;xsl:for-each&gt;</tt> element. We'll go through some examples to illustrate this.</p>
      <div class="sect3">
        <h3 class="sect3">4.2.3.1. &lt;xsl:for-each&gt; example</h3>
        <p>Here's a sample that selects all <tt class="literal">&lt;section&gt;</tt> elements inside a <tt class="literal">&lt;tutorial&gt;</tt> element and then uses a second <tt class="literal">&lt;xsl:for-each&gt;</tt> element to select all the <tt class="literal">&lt;panel&gt;</tt> elements inside each <tt class="literal">&lt;section&gt;</tt> element:</p>
        <blockquote><pre class="code">
&lt;xsl:template match="tutorial"&gt;
  &lt;xsl:for-each select="section"&gt;
    &lt;h1&gt;
      &lt;xsl:text&gt;Section &lt;/xsl:text&gt;
      &lt;xsl:value-of select="position()"/&gt;
      &lt;xsl:text&gt;. &lt;/xsl:text&gt;
      &lt;xsl:value-of select="title"/&gt;
    &lt;/h1&gt;
    &lt;ul&gt;
      &lt;xsl:for-each select="panel"&gt;
        &lt;li&gt;
          &lt;xsl:value-of select="position()"/&gt;
          &lt;xsl:text&gt;. &lt;/xsl:text&gt;
          &lt;xsl:value-of select="title"/&gt;
        &lt;/li&gt;
      &lt;/xsl:for-each&gt;
    &lt;/ul&gt;
  &lt;/xsl:for-each&gt;
&lt;/xsl:template&gt;</pre></blockquote>
        <p>Given this XML document:</p>
        <blockquote><pre class="code">
&lt;tutorial&gt;
  &lt;section&gt;
    &lt;title&gt;Gene Splicing for Young People&lt;/title&gt;
    &lt;panel&gt;
      &lt;title&gt;Introduction&lt;/title&gt;
      &lt;!-- ... --&gt;
    &lt;/panel&gt;
    &lt;panel&gt;
      &lt;title&gt;Discovering the secrets of life and creation&lt;/title&gt;
      &lt;!-- ... --&gt;
    &lt;/panel&gt;
    &lt;panel&gt;
      &lt;title&gt;"I created him for good, but he's turned out evil!"&lt;/title&gt;
      &lt;!-- ... --&gt;
    &lt;/panel&gt;
    &lt;panel&gt;
      &lt;title&gt;When angry mobs storm your castle&lt;/title&gt;
      &lt;!-- ... --&gt;
    &lt;/panel&gt;
  &lt;/section&gt;
&lt;/tutorial&gt;</pre></blockquote>
        <p>The previous template produces these results:</p>
        <blockquote><pre class="code">
&lt;h1&gt;Section 1. Gene Splicing for Young People&lt;/h1&gt;
&lt;ul&gt;
  &lt;li&gt;1. Introduction&lt;/li&gt;
  &lt;li&gt;2. Discovering the secrets of life and creation&lt;/li&gt;
  &lt;li&gt;3. "I created him for good, but he's turned out evil!"&lt;/li&gt;
  &lt;li&gt;4. When angry mobs storm your castle&lt;/li&gt;
&lt;/ul&gt;</pre></blockquote>
        <p>
<a name="INDEX-337" />
<a name="INDEX-338" />

Each time a <tt class="literal">select</tt> attribute is processed, it is evaluated in terms of the current node. As the XSLT processor cycles through all the <tt class="literal">&lt;xsl:section&gt;</tt> and <tt class="literal">&lt;xsl:panel&gt;</tt> elements, each of them in turn becomes the current node. By using iteration, we've generated a table of contents with a very simple template.
<a name="INDEX-339" />

</p>
      </div>
    </div>
  

<hr width="684" align="left" />
<div class="navbar"><table width="684" border="0"><tr><td align="left" valign="top" width="228"><a href="ch04_01.htm"><img alt="Previous" border="0" src="../gifs/txtpreva.gif" /></a></td><td align="center" valign="top" width="228"><a href="index.htm"><img alt="Home" border="0" src="../gifs/txthome.gif" /></a></td><td align="right" valign="top" width="228"><a href="ch04_03.htm"><img alt="Next" border="0" src="../gifs/txtnexta.gif" /></a></td></tr><tr><td align="left" valign="top" width="228">4. Branching and Control Elements</td><td align="center" valign="top" width="228"><a href="index/index.htm"><img alt="Book Index" border="0" src="../gifs/index.gif" /></a></td><td align="right" valign="top" width="228">4.3. Invoking Templates by Name</td></tr></table></div>
<hr width="684" align="left" />

<img alt="Library Navigation Links" border="0" src="../gifs/navbar.gif" usemap="#library-map" />
<p><p><font size="-1"><a href="copyrght.htm">Copyright &copy; 2002</a> O'Reilly &amp; Associates. All rights reserved.</font></p>

<map name="library-map">
<area shape="rect" coords="0,0,85,93" href="../index.htm"><area shape="rect" coords="85,0,180,98" href="../sax2/index.htm"><area shape="rect" coords="182,-1,261,100" href="../xmlnut/index.htm"><area shape="rect" coords="263,1,384,96" href="../jxml/index.htm"><area shape="rect" coords="386,1,463,100" href="../jxslt/index.htm"><area shape="rect" coords="466,1,533,112" href="index.htm"><area shape="rect" coords="535,-1,610,108" href="../schema/index.htm"><area shape="rect" coords="613,1,696,121" href="../pxml/index.htm">
</map>

</body></html>