<html><head><title>The document() Function (XSLT)</title><link rel="stylesheet" type="text/css" href="../style/style1.css" />

<meta name="DC.Creator" content="Doug Tidwell" /><meta name="DC.Format" content="text/xml" scheme="MIME" /><meta name="DC.Language" content="en-US" /><meta name="DC.Publisher" content="O'Reilly &amp; Associates, Inc." /><meta name="DC.Source" scheme="ISBN" content="0596000537L" /><meta name="DC.Subject.Keyword" content="stuff" /><meta name="DC.Title" content="XSLT" /><meta name="DC.Type" content="Text.Monograph" />

</head><body bgcolor="#ffffff">

<img alt="Book Home" border="0" src="gifs/smbanner.gif" usemap="#banner-map" /><map name="banner-map"><area shape="rect" coords="1,-2,616,66" href="index.htm" alt="XSL" /><area shape="rect" coords="629,-11,726,25" href="jobjects/fsearch.htm" alt="Search this book" /></map>

<div class="navbar"><table width="684" border="0"><tr><td align="left" valign="top" width="228"><a href="ch07_01.htm"><img alt="Previous" border="0" src="../gifs/txtpreva.gif" /></a></td><td align="center" valign="top" width="228"></td><td align="right" valign="top" width="228"><a href="ch07_03.htm"><img alt="Next" border="0" src="../gifs/txtnexta.gif" /></a></td></tr></table></div>



    <h2 class="sect1">7.2. The document() Function</h2>
    <p>
<a name="INDEX-568" />
<a name="INDEX-569" />
<a name="INDEX-570" />
<a name="INDEX-571" />


We'll start with a couple of simple examples that use the <tt class="literal">document()</tt> function. We'll assume that we have several purchase orders and that we want to combine them into a single report document. One thing we can do is create a <em class="emphasis">master document</em> that references all the purchase orders we want to include in the report. Here's what that master document might look like:</p>
    <blockquote><pre class="code">
&lt;report&gt;
  &lt;title&gt;Purchase Orders&lt;/title&gt;
  &lt;po filename="po38292.xml"/&gt;
  &lt;po filename="po38293.xml"/&gt;
  &lt;po filename="po38294.xml"/&gt;
  &lt;po filename="po38295.xml"/&gt;
&lt;/report&gt;</pre></blockquote>
    <p>We'll fill in the details of our stylesheet as we go along, but here's what the shell of our stylesheet looks like:</p>
    <blockquote><pre class="code">
&lt;xsl:template match="/"&gt;
  &lt;xsl:for-each select="/report/po"&gt;
    &lt;xsl:apply-templates select="document(@filename)"/&gt;
  &lt;/xsl:for-each&gt;
&lt;/xsl:template&gt;</pre></blockquote>
    <p>
<a name="INDEX-572" />

In this template, we use the <tt class="literal">filename</tt> attribute as the argument to the <tt class="literal">document()</tt> function. The simplest thing we can do is open each purchase order, then write its details to the output stream. Here's a stylesheet that does this:</p>
    <blockquote><pre class="code">
&lt;?xml version="1.0"?&gt;--&gt;
&lt;xsl:stylesheet version="1.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform"&gt;

  &lt;xsl:output method="html" indent="no"/&gt;
  &lt;xsl:strip-space elements="*"/&gt;

  &lt;xsl:template match="/"&gt;
    &lt;html&gt;
      &lt;head&gt;
        &lt;title&gt;&lt;xsl:value-of select="/report/title"/&gt;&lt;/title&gt;
      &lt;/head&gt;
      &lt;body&gt;
        &lt;xsl:for-each select="/report/po"&gt;
          &lt;xsl:apply-templates select="document(@filename)/purchase-order"/&gt;
        &lt;/xsl:for-each&gt;
      &lt;/body&gt;
    &lt;/html&gt;
  &lt;/xsl:template&gt;

  &lt;xsl:template match="purchase-order"&gt;
    &lt;h1&gt;
      &lt;xsl:value-of select="customer/address[@type='business']/name/title"/&gt;
      &lt;xsl:text&gt; &lt;/xsl:text&gt;
      &lt;xsl:value-of select="customer/address[@type='business']/name/first-name"/&gt;
      &lt;xsl:text&gt; &lt;/xsl:text&gt;
      &lt;xsl:value-of select="customer/address[@type='business']/name/last-name"/&gt;
    &lt;/h1&gt;
    &lt;p&gt;
      &lt;xsl:text&gt;Ordered on &lt;/xsl:text&gt;
      &lt;xsl:value-of select="date/@month"/&gt;
      &lt;xsl:text&gt;/&lt;/xsl:text&gt;
      &lt;xsl:value-of select="date/@day"/&gt;
      &lt;xsl:text&gt;/&lt;/xsl:text&gt;
      &lt;xsl:value-of select="date/@year"/&gt;
    &lt;/p&gt;
    &lt;h2&gt;Items:&lt;/h2&gt;
    &lt;table width="100%" border="1" cols="55% 15% 15% 15%"&gt;
      &lt;tr bgcolor="lightgreen"&gt;
        &lt;th&gt;Item&lt;/th&gt;
        &lt;th&gt;Quantity&lt;/th&gt;
        &lt;th&gt;Price Each&lt;/th&gt;
        &lt;th&gt;Total&lt;/th&gt;
      &lt;/tr&gt;
      &lt;xsl:for-each select="items/item"&gt;
        &lt;tr&gt;
          &lt;xsl:attribute name="bgcolor"&gt;
            &lt;xsl:choose&gt;
              &lt;xsl:when test="position() mod 2"&gt;
                &lt;xsl:text&gt;white&lt;/xsl:text&gt;
              &lt;/xsl:when&gt;
              &lt;xsl:otherwise&gt;
                &lt;xsl:text&gt;lightgreen&lt;/xsl:text&gt;
              &lt;/xsl:otherwise&gt;
            &lt;/xsl:choose&gt;
          &lt;/xsl:attribute&gt;
          &lt;td&gt;
            &lt;b&gt;&lt;xsl:value-of select="name"/&gt;&lt;/b&gt;
            &lt;xsl:text&gt; (part #&lt;/xsl:text&gt;
            &lt;xsl:value-of select="@part_no"/&gt;
            &lt;xsl:text&gt;)&lt;/xsl:text&gt;
          &lt;/td&gt;
          &lt;td align="center"&gt;
            &lt;xsl:value-of select="qty"/&gt;
          &lt;/td&gt;
          &lt;td align="right"&gt;
            &lt;xsl:value-of select="price"/&gt;
          &lt;/td&gt;
          &lt;td align="right"&gt;
            &lt;xsl:choose&gt;
              &lt;xsl:when test="position()=1"&gt;
                &lt;xsl:value-of select="format-number(price * qty, '$#,###.00')"/&gt;
              &lt;/xsl:when&gt;
              &lt;xsl:otherwise&gt;
                &lt;xsl:value-of select="format-number(price * qty, '#,###.00')"/&gt;
              &lt;/xsl:otherwise&gt;
            &lt;/xsl:choose&gt;
          &lt;/td&gt;
        &lt;/tr&gt;
      &lt;/xsl:for-each&gt;
      &lt;tr&gt;
        &lt;td colspan="3" align="right"&gt;
          &lt;b&gt;Total:&lt;/b&gt;
        &lt;/td&gt;
        &lt;td align="right"&gt;
          &lt;xsl:variable name="orderTotal"&gt;
            &lt;xsl:call-template name="sumItems"&gt;
              &lt;xsl:with-param name="index" select="'1'"/&gt;
              &lt;xsl:with-param name="items" select="items"/&gt;
              &lt;xsl:with-param name="runningTotal" select="'0'"/&gt;
            &lt;/xsl:call-template&gt;
          &lt;/xsl:variable&gt;
          &lt;xsl:value-of select="format-number($orderTotal, '$#,###.00')"/&gt;
        &lt;/td&gt;
      &lt;/tr&gt;
    &lt;/table&gt;
  &lt;/xsl:template&gt;

  &lt;xsl:template name="sumItems"&gt;
    &lt;xsl:param name="index" select="'1'"/&gt;
    &lt;xsl:param name="items"/&gt;
    &lt;xsl:param name="runningTotal" select="'0'"/&gt;
    &lt;xsl:variable name="currentItem"&gt;
      &lt;xsl:value-of select="$items/item[$index]/qty * 
  $items/item[$index]/price"/&gt;
    &lt;/xsl:variable&gt;
    &lt;xsl:variable name="remainingItems"&gt;
      &lt;xsl:choose&gt;
        &lt;xsl:when test="$index=count($items/item)"&gt;
          &lt;xsl:text&gt;0&lt;/xsl:text&gt;
        &lt;/xsl:when&gt;
        &lt;xsl:otherwise&gt;
          &lt;xsl:call-template name="sumItems"&gt;
            &lt;xsl:with-param name="index" select="$index+1"/&gt;
            &lt;xsl:with-param name="items" select="$items"/&gt;
            &lt;xsl:with-param name="runningTotal" 
              select="$runningTotal+$currentItem"/&gt;
          &lt;/xsl:call-template&gt;
        &lt;/xsl:otherwise&gt;
      &lt;/xsl:choose&gt;
    &lt;/xsl:variable&gt;
    &lt;xsl:value-of select="$currentItem+$remainingItems"/&gt;
  &lt;/xsl:template&gt;

&lt;/xsl:stylesheet&gt;</pre></blockquote>
    <p>When we process our master document with this stylesheet, the results look like <a href="ch07_02.htm">Figure 7-1</a>.</p>
    <a name="xslt-CHP-7-FIG-1" /><div class="figure"><img height="443" alt="Figure 7-1" src="figs/xslt.0701.gif" width="481" /></div><h4 class="objtitle">Figure 7-1. Document generated from multiple input files</h4>
    <p>The most notable thing about our results is that we've been able to generate a document that contains the contents of several other documents. To keep our example short, we've only combined four purchase orders, but there's no limit (beyond the physical limits of our machine) to the number of documents we could combine. Best of all, we didn't have to modify any of the individual purchase orders to generate our report. </p>
    <div class="sect2">
      <h3 class="sect2">7.2.1. An Aside: Doing Math with Recursion</h3>
      <p>
<a name="INDEX-573" />
<a name="INDEX-574" />
<a name="INDEX-575" />


While we're here, we'll also mention the recursive technique we used to calculate the total for each purchase order. At first glance, this seems like a perfect opportunity to use the <tt class="literal">sum()</tt> function. We want to add the total of the price of each item multiplied by its quantity. We could try to invoke the <tt class="literal">sum()</tt> function like this:</p>
      <blockquote><pre class="code">
&lt;xsl:value-of select="sum(item/qty*item/price)"/&gt;</pre></blockquote>
      <p>
<a name="INDEX-576" />

Unfortunately, the <tt class="literal">sum()</tt> function simply takes the node-set passed to it, converts each item in the node-set to a number, then returns the sum of all of those numbers. The expression <tt class="literal">item/qty*item/price</tt>, while a perfectly valid XPath expression, isn't a valid node-set. With that in mind, we have to create a recursive <tt class="literal">&lt;xsl:template&gt;</tt> to do the work for us. There are a couple of techniques worth mentioning here; we'll go through them in the order we used them in our stylesheet. </p>
      <div class="sect3">
        <h3 class="sect3">7.2.1.1. Recursive design</h3>
        <p>
<a name="INDEX-577" />
<a name="INDEX-578" />

First, we pass three parameters to the template:</p>
        <dl>
<dt><tt class="literal">items</tt></dt>          
<dd>
           The node-set of all <tt class="literal">&lt;item&gt;</tt> elements in the current <tt class="literal">&lt;items&gt;</tt> element.</p>
          </dd>


<dt><tt class="literal">index</tt></dt>
<dd>
The position in that node-set of the <tt class="literal">&lt;item&gt;</tt> we're currently processing.</p>
</dd>


<dt><tt class="literal">runningTotal</tt></dt>
<dd>
The total of all the <tt class="literal">&lt;item&gt;</tt>s we've processed so far.</p>
</dd>

</dl>

        <p>Our basic design is as follows:</p>
        <ul>
          <li>
            <p>Calculate the total for the current <tt class="literal">&lt;item&gt;</tt>. This total is the value of the <tt class="literal">&lt;qty&gt;</tt> element multiplied by the value of the <tt class="literal">&lt;price&gt;</tt> element. We store this value in the variable <tt class="literal">currentItem</tt>:</p>
            <blockquote><pre class="code">
&lt;xsl:variable name="currentItem"&gt;
  &lt;xsl:value-of select="$items/item[$index]/qty * 
    $items/item[$index]/price"/&gt;
&lt;/xsl:variable&gt;</pre></blockquote>
            <p>Notice how the XPath expression in the <tt class="literal">select</tt> attribute uses the <tt class="literal">$items</tt> and <tt class="literal">$index</tt> parameters to find the exact items we're looking for.</p>
          </li>
          <li>
            <p>Calculate the total for the remaining items. If this is the last item (the parameter <tt class="literal">$index</tt> is equal to the number of <tt class="literal">&lt;item&gt;</tt> elements), then the total for the remaining items is zero. Otherwise, the total for the remaining items is returned by calling the template again. </p>
            <p>When we call the template again, we increment the position of the current item:</p>
            <blockquote><pre class="code">
&lt;xsl:with-param name="index" select="$index+1"/&gt;</pre></blockquote>
            <p>We also update the parameter <tt class="literal">$runningTotal</tt>, which is equal to the value of the current item plus the previous value of <tt class="literal">$runningTotal</tt>:</p>
            <blockquote><pre class="code">
&lt;xsl:with-param name="runningTotal" 
  select="$runningTotal+$currentItem"/&gt;</pre></blockquote>
          </li>
        </ul>
        <p>This recursive design lets us generate the totals we need for our purchase order. Our approach is equivalent to invoking a function against each node in a node-set, only this approach doesn't require us to use extensions. As a result, we can use this stylesheet with any standards-compliant stylesheet processor, without having to worry about porting any extension functions or extension elements.
<a name="INDEX-579" />
<a name="INDEX-580" />

</p>
      </div>
      <div class="sect3">
        <h3 class="sect3">7.2.1.2. Generating output to initialize a variable</h3>
        <p>
<a name="INDEX-581" />
<a name="INDEX-582" />
<a name="INDEX-583" />


When we needed to set the value of the variable <tt class="literal">runningTotal</tt>, we simply called the template named <tt class="literal">sumItems</tt>. The <tt class="literal">sumItems</tt> template uses the <tt class="literal">&lt;xsl:value-of&gt;</tt> element to output some text; everything output by the template is concatenated to form the value of the variable <tt class="literal">runningTotal</tt>. The advantage of this technique is that it allows us to completely control the value of the variable, and it allows us to avoid converting the variable to a number until we're ready. Once the <tt class="literal">sumItems</tt> template finishes its work, we can pass the variable's value to the <tt class="literal">format-number()</tt> function to print the invoice total exactly how we want.</p>
      </div>
      <div class="sect3">
        <h3 class="sect3">7.2.1.3. Using format-number() to control output</h3>
        <p>
<a name="INDEX-584" />
<a name="INDEX-585" />

The final nicety in our stylesheet is that we use the XSLT <tt class="literal">format-number()</tt> function to display the total for the current purchase order. We've already discussed how we set the value of the variable <tt class="literal">$orderTotal</tt> to be the output of the template named <tt class="literal">sumItems</tt>; once the variable is set, we use <tt class="literal">format-number</tt> to display it with a currency sign, commas, and two decimal places:
<a name="INDEX-586" />
<a name="INDEX-587" />

</p>
        <blockquote><pre class="code">
&lt;xsl:value-of select="format-number($order-total, '$#,###.00')"/&gt;</pre></blockquote>
      </div>
    </div>
  

<hr width="684" align="left" />
<div class="navbar"><table width="684" border="0"><tr><td align="left" valign="top" width="228"><a href="ch07_01.htm"><img alt="Previous" border="0" src="../gifs/txtpreva.gif" /></a></td><td align="center" valign="top" width="228"><a href="index.htm"><img alt="Home" border="0" src="../gifs/txthome.gif" /></a></td><td align="right" valign="top" width="228"><a href="ch07_03.htm"><img alt="Next" border="0" src="../gifs/txtnexta.gif" /></a></td></tr><tr><td align="left" valign="top" width="228">7. Combining XML Documents</td><td align="center" valign="top" width="228"><a href="index/index.htm"><img alt="Book Index" border="0" src="../gifs/index.gif" /></a></td><td align="right" valign="top" width="228">7.3. Invoking the document() Function</td></tr></table></div>
<hr width="684" align="left" />

<img alt="Library Navigation Links" border="0" src="../gifs/navbar.gif" usemap="#library-map" />
<p><p><font size="-1"><a href="copyrght.htm">Copyright &copy; 2002</a> O'Reilly &amp; Associates. All rights reserved.</font></p>

<map name="library-map">
<area shape="rect" coords="0,0,85,93" href="../index.htm"><area shape="rect" coords="85,0,180,98" href="../sax2/index.htm"><area shape="rect" coords="182,-1,261,100" href="../xmlnut/index.htm"><area shape="rect" coords="263,1,384,96" href="../jxml/index.htm"><area shape="rect" coords="386,1,463,100" href="../jxslt/index.htm"><area shape="rect" coords="466,1,533,112" href="index.htm"><area shape="rect" coords="535,-1,610,108" href="../schema/index.htm"><area shape="rect" coords="613,1,696,121" href="../pxml/index.htm">
</map>

</body></html>
