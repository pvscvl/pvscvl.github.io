<html><head><title>Location Paths (XSLT)</title><link rel="stylesheet" type="text/css" href="../style/style1.css" />

<meta name="DC.Creator" content="Doug Tidwell" /><meta name="DC.Format" content="text/xml" scheme="MIME" /><meta name="DC.Language" content="en-US" /><meta name="DC.Publisher" content="O'Reilly &amp; Associates, Inc." /><meta name="DC.Source" scheme="ISBN" content="0596000537L" /><meta name="DC.Subject.Keyword" content="stuff" /><meta name="DC.Title" content="XSLT" /><meta name="DC.Type" content="Text.Monograph" />

</head><body bgcolor="#ffffff">

<img alt="Book Home" border="0" src="gifs/smbanner.gif" usemap="#banner-map" /><map name="banner-map"><area shape="rect" coords="1,-2,616,66" href="index.htm" alt="XSL" /><area shape="rect" coords="629,-11,726,25" href="jobjects/fsearch.htm" alt="Search this book" /></map>

<div class="navbar"><table width="684" border="0"><tr><td align="left" valign="top" width="228"><a href="ch03_01.htm"><img alt="Previous" border="0" src="../gifs/txtpreva.gif" /></a></td><td align="center" valign="top" width="228"></td><td align="right" valign="top" width="228"><a href="ch03_03.htm"><img alt="Next" border="0" src="../gifs/txtnexta.gif" /></a></td></tr></table></div>



    <h2 class="sect1">3.2. Location Paths</h2>
    <p>
<a name="INDEX-205" />

One of the most common uses of XPath is to create <em class="emphasis">location paths</em>. A location path describes the location of something in an XML document. In our examples in the previous chapter, we used location paths on the <tt class="literal">match</tt> and <tt class="literal">select</tt> attributes of various XSLT elements. Those location paths described the parts of the XML document we wanted to work with. Most of the XPath expressions you'll use are location paths, and most of them are pretty simple. Before we dive in to the wonders of XPath, we need to discuss the <em class="emphasis">context</em>.</p>
    <a name="xslt-CHP-3-SECT-2.1" /><div class="sect2">
      <h3 class="sect2">3.2.1. The Context</h3>
      <p>
<a name="INDEX-206" />

One of the most important concepts in XPath is the context. Everything we do in XPath is interpreted with respect to the context. You can think of an XML document as a hierarchy of directories in a filesystem. In our sonnet example, we could imagine that <tt class="literal">sonnet</tt> is a directory at the root level of the filesystem. The <tt class="literal">sonnet</tt> directory would, in turn, contain directories named <tt class="literal">auth:author</tt>, <tt class="literal">title</tt>, and <tt class="literal">lines</tt>. In this example, the context would be the current directory. If I go to a command line and execute a particular command (such as <tt class="literal">dir *.js</tt>), the results I get vary depending on the current directory. Similarly, the results of evaluating an XPath expression will probably vary based on the context. </p>
      <p>Most of the time, we can think of the context as the node in the tree from which any expression is evaluated. To be completely accurate, the context consists of five things:</p>
      <ul>
        <li>
          <p>
<a name="INDEX-207" />

The context node (the "current directory"). The XPath expression is evaluated from this node. </p>
        </li>
        <li>
          <p>
<a name="INDEX-208" />
<a name="INDEX-209" />

Two integers, the <em class="emphasis">context position</em> and the <em class="emphasis">context size</em>. These integers are important when we're processing a group of nodes. For example, we could write an XPath expression that selects all of the <tt class="literal">&lt;li&gt;</tt> elements in a given document. The context size refers to the number of <tt class="literal">&lt;li&gt;</tt> items selected by that expression, and the context position refers to the position of the <tt class="literal">&lt;li&gt;</tt> we're currently processing.</p>
        </li>
        <li>
          <p>
<a name="INDEX-210" />


A set of variables. This set includes names and values of all variables that are currently in scope.</p>
        </li>
        <li>
          <p>
<a name="INDEX-211" />


A set of all the functions available to XPath expressions. Some of these functions are defined by the XPath and XSLT standards themselves; others might be extension functions defined by whomever created the stylesheet. (You'll read more about extension functions in <a href="ch08_01.htm">Chapter 8, "Extending XSLT"</a>.)</p>
        </li>
        <li>
          <p>
<a name="INDEX-212" />

A set of all the namespace declarations currently in scope.</p>
        </li>
      </ul>
      <p>Having said all that, most of the time you can ignore everything but the context node. To use our command line analogy one more time, if you're at a command line, you have a current directory; you also have (depending on your operating system) a number of environment variables defined. For most commands, you can focus on the current directory and ignore the environment variables. </p>
    </div>
    <div class="sect2">
      <h3 class="sect2">3.2.2. Simple Location Paths</h3>
      <p>Now that we've talked about what a context is and why it matters, we'll look at some location paths. We'll start with a variety of simple location paths; as we go along, we'll look at more complex location paths that use all the various features of XPath. We already looked at one of the simplest XPath expressions:</p>
      <blockquote><pre class="code">
&lt;xsl:template match="/"&gt;</pre></blockquote>
      <p>This template selects the root node of the document. We saw another simple XPath expression in the <tt class="literal">&lt;xsl:value-of&gt;</tt> element:</p>
      <blockquote><pre class="code">
&lt;xsl:value-of select="."/&gt;</pre></blockquote>
      <p>This template selects the context node, represented by a period. To complete our tour of very simple location paths, we can use the double period (<tt class="literal">..</tt>) to select the <em class="emphasis">parent</em> of the context node:</p>
      <blockquote><pre class="code">
&lt;xsl:value-of select=".."/&gt;</pre></blockquote>
      <p>All these XPath expressions have one thing in common: they don't use element names. As you might have noticed in our Hello World example, you can use element names to select elements that have a particular name:</p>
      <blockquote><pre class="code">
&lt;xsl:apply-templates select="greeting"/&gt;</pre></blockquote>
      

<p>In this example, we select all of the <tt class="literal">&lt;greeting&gt;</tt> elements in the current context and apply the appropriate template to each of them. Turning to our XML sonnet, we can create location paths that specify more than one level in the document hierarchy:</p>
      <blockquote><pre class="code">
&lt;xsl:apply-templates select="lines/line/"&gt;</pre></blockquote>
      <p>This example selects all <tt class="literal">&lt;line&gt;</tt> elements that are contained in any <tt class="literal">&lt;lines&gt;</tt> elements in the current context. If the current context doesn't have any <tt class="literal">&lt;lines&gt;</tt> elements, then this expression returns an empty node-set. If the current context has plenty of <tt class="literal">&lt;lines&gt;</tt> elements, but none of them contain any <tt class="literal">&lt;line&gt;</tt> elements, this expression also returns an empty node-set. </p>
    </div>
    <div class="sect2">
      <h3 class="sect2">3.2.3. Relative and Absolute Expressions</h3>
      <p>
<a name="INDEX-213" />
<a name="INDEX-214" />
<a name="INDEX-215" />
<a name="INDEX-216" />
<a name="INDEX-217" />

The XPath specification talks about two kinds of XPath expressions, <em class="emphasis">relative</em> and <em class="emphasis">absolute</em>. Our previous example is a relative XPath expression because the nodes it specifies depend on the current context. An absolute XPath expression begins with a slash (<tt class="literal">/</tt>), which tells the XSLT processor to start at the root of the document, regardless of the current context. In other words, you can evaluate an absolute XPath expression from any context node you want, and the results will be the same. Here's an absolute XPath expression:</p>
      <blockquote><pre class="code">
&lt;xsl:apply-templates select="/sonnet/lines/line"/&gt;</pre></blockquote>
      <p>The good thing about an absolute expression is that you don't have to worry about the context node. Another benefit is that it makes it easy for the XSLT processor to find all nodes that match this expression: what we've said in this expression is that there must be a <tt class="literal">&lt;sonnet&gt;</tt> element at the root of the document, that element must contain at least one <tt class="literal">&lt;lines&gt;</tt> element, and that at least one of those <tt class="literal">&lt;lines&gt;</tt> elements must contain at least one <tt class="literal">&lt;line&gt;</tt> element. If any of those conditions fail, the XSLT processor can stop looking through the tree and return an empty node-set. </p>
      <p>A possible disadvantage of using absolute XPath expressions is that it could make your templates more difficult to reuse. Both of these templates process <tt class="literal">&lt;line&gt;</tt> elements, but the second one is more difficult to reuse:</p>
      <blockquote><pre class="code">
&lt;xsl:template match="line"&gt;
  ...
&lt;/xsl:template&gt;

&lt;xsl:template match="/sonnet/lines/line"&gt;
  ...
&lt;/xsl:template&gt;</pre></blockquote>
      <p>If the second template has wonderful code for processing <tt class="literal">&lt;line&gt;</tt> elements, but your document contains <tt class="literal">&lt;line&gt;</tt> elements that don't match the absolute XPath expression, you can't reuse that template. You should keep that in mind as you design your templates. </p>
    </div>
    <div class="sect2">
      <h3 class="sect2">3.2.4. Selecting Things Besides Elements with Location Paths</h3>
      <p>Up until now, we've discussed XPath expressions that used either element names (<tt class="literal">/sonnet/lines/line</tt>) or special characters (<tt class="literal">/</tt> or <tt class="literal">..</tt>) to select elements from an XML document. Obviously, XML documents contain things other than elements; we'll talk about how to select those other things here. </p>
      <div class="sect3">
        <h3 class="sect3">3.2.4.1. Selecting attributes</h3>
        <p>
<a name="INDEX-218" />
<a name="INDEX-219" />
<a name="INDEX-220" />
<a name="INDEX-221" />


To select an attribute, use the at-sign (<tt class="literal">@</tt>) along with the attribute name. In our sample sonnet, you can select the <tt class="literal">type</tt> attribute of the <tt class="literal">&lt;sonnet&gt;</tt> element with the XPath expression <tt class="literal">/sonnet/@type</tt>. If the context node is the <tt class="literal">&lt;sonnet&gt;</tt> element itself, then the relative XPath expression <tt class="literal">@type</tt> does the same thing. </p>
      </div>
      <div class="sect3">
        <h3 class="sect3">3.2.4.2. Selecting the text of an element</h3>
        <p>

<a name="INDEX-222" />
<a name="INDEX-223" />
<a name="INDEX-224" />
<a name="INDEX-225" />
<a name="INDEX-226" />

To select the text of an element, use the XPath node test <tt class="literal">text()</tt>. The XPath expression <tt class="literal">/sonnet/auth:author/last-name/text()</tt> selects the text of the <tt class="literal">last-name</tt> element in our example document. Be aware that the text of an element is the concatenation of all of its text nodes. Thus, the XPath expression <tt class="literal">/sonnet/auth:author/text()</tt> returns the following text:</p>
        <blockquote><pre class="code">
ShakespeareWilliamBritish15641616</pre></blockquote>
        <p>That's probably not the output you want; if you want to provide spacing, line breaks, or other formatting, you need to use the <tt class="literal">text()</tt> node test against all the child nodes individually. </p>
      </div>
      <div class="sect3">
        <h3 class="sect3">3.2.4.3. Selecting comments, processing instructions, and namespace nodes</h3>
        <p>
<a name="INDEX-227" />
<a name="INDEX-228" />
<a name="INDEX-229" />
<a name="INDEX-230" />
<a name="INDEX-231" />
<a name="INDEX-232" />

By this point, we've covered most of the things you're ever likely to do with an XPath expression. You can use a couple of other XPath node tests to describe parts of an XML document. The <tt class="literal">comment()</tt> and <tt class="literal">processing-instruction()</tt> node tests allow you to select comments and processing instructions from the XML document. Going back to our sample sonnet, the XPath expression <tt class="literal">/processing-instruction()</tt> returns the two processing instructions (named <tt class="literal">xml-stylesheet</tt> and <tt class="literal">cocoon-process</tt>). The expression <tt class="literal">/sonnet/comment()</tt> returns the comment node that begins, "Is there an official title for this sonnet?" </p>
        <p>Processing comment nodes in this way can actually be useful. If you've entered comments into an XML document, you can use the <tt class="literal">comment()</tt> node test to display your comments only when you want. Here's an XSLT template you could use:</p>
        <blockquote><pre class="code">
&lt;xsl:template match="comment()"&gt;
  &lt;span class="comment"&gt;
    &lt;p&gt;&lt;xsl:value-of select="."/&gt;&lt;/p&gt;
  &lt;/span&gt;
&lt;/xsl:template&gt;</pre></blockquote>
        <p>Elsewhere in your stylesheet, you could define CSS attributes to print comments in a large, bold, purple font. To remove all comments from your output document, simply go to your stylesheet and comment out any <tt class="literal">&lt;xsl:apply-templates select="comment()"/&gt;</tt> statements. </p>
        <p>
<a name="INDEX-233" />
<a name="INDEX-234" />
<a name="INDEX-235" />
<a name="INDEX-236" />


XPath has one other kind of node, the rarely used <em class="emphasis">namespace node</em>. To retrieve namespace nodes, you have to use something called the namespace axis; we'll discuss axes soon. One note about namespace nodes, if you ever have to use them: When matching namespace nodes, the namespace prefix isn't important. As an example, our sample sonnet used the <tt class="literal">auth</tt> namespace prefix, which maps to the value <tt class="literal">http://www.authors.com/</tt>. If a stylesheet uses the namespace prefix <tt class="literal">writers</tt> to refer to the same URL, then the XPath expression <tt class="literal">/sonnet/writers::*</tt> would return the <tt class="literal">&lt;auth:author&gt;</tt> element. Even though the namespace prefixes are different, the URLs they refer to are the same.</p>
        <p>Having said all that, the chances that you'll ever need to use namespace nodes are pretty slim. </p>
      </div>
    </div>
    <div class="sect2">
      <h3 class="sect2">3.2.5. Using Wildcards</h3>
      <p>
<a name="INDEX-237" />

XPath features three wildcards:</p>
      <ul>
        <li>
          <p>
<a name="INDEX-238" />
<a name="INDEX-239" />

The asterisk (<tt class="literal">*</tt>), which selects all element nodes in the current context. Be aware that the asterisk wildcard selects element nodes only; attributes, text nodes, comments, or processing instructions aren't included. You can also use a namespace prefix with an asterisk: in our sample sonnet, the XPath expression <tt class="literal">auth:*</tt> returns all element nodes in the current context that are associated with the namespace URL <tt class="literal">http://www.authors.com</tt>.</p>
        </li>
        <li>
          <p>
<a name="INDEX-240" />
<a name="INDEX-241" />

The at-sign and asterisk (<tt class="literal">@*</tt>), which selects all attribute nodes in the current context. You can use a namespace prefix with the attribute wildcard. In our sample sonnet, <tt class="literal">@auth:*</tt> returns all attribute nodes in the current context that are associated with the namespace URL <tt class="literal">http://www.authors.com</tt>.</p>
        </li>
        <li>
          <p>
<a name="INDEX-242" />

The <tt class="literal">node()</tt> node test, which selects all nodes in the current context, regardless of type. This includes elements, text, comments, processing instructions, attributes, and namespace nodes. </p>
        </li>
      </ul>
      <p>
<a name="INDEX-243" />
<a name="INDEX-244" />

In addition to these wildcards, XPath includes the double slash (<tt class="literal">//</tt>), which indicates that zero or more elements may occur between the slashes. For example, the XPath expression <tt class="literal">//line</tt> selects all <tt class="literal">&lt;line&gt;</tt> elements, regardless of where they appear in the document. This is an absolute XPath expression because it begins with a slash. You can also use the double slash at any point in an XPath expression; the expression <tt class="literal">/sonnet//line</tt> selects all <tt class="literal">&lt;line&gt;</tt> elements that are descendants of the <tt class="literal">&lt;sonnet&gt;</tt> element at the root of the XML document. The expressions <tt class="literal">/sonnet//line</tt> and <tt class="literal">/sonnet/descendant-or-self::line</tt> are equivalent. </p>
      <blockquote><b>WARNING:</b> 
        The double slash (<tt class="literal">//</tt>) is a very powerful operator, but be aware that it can make your stylesheets incredibly inefficient. If we use the XPath expression <tt class="literal">//line</tt>, the XSLT processor has to check every node in the document to see if there are any <tt class="literal">&lt;line&gt;</tt> elements. The more specific you can be in your XPath expressions, the less work the XSLT processor has to do, and the faster your stylesheets will execute. Thinking back to our filesystem metaphor, if I go to a Windows command prompt and type <tt class="userinput"><b>dir/s c:\*.xml</b></tt>, the operating system has to look in every subdirectory for any <em class="emphasis">*.xml</em> files that might be there. However, if I type <tt class="userinput"><b>dir /s c:\doug\projects\xml-docs\*.xml</b></tt>, the operating system has far fewer places to look, and the command will execute much faster. </p>
      </blockquote>
    </div>
    <a name="xslt-CHP-3-SECT-2.6" /><div class="sect2">
      <h3 class="sect2">3.2.6. Axes</h3>
      <p>
<a name="INDEX-245" />

To this point, we've been able to select child elements, attributes, text, comments, and processing instructions with some fairly simple XPath expressions. Obviously, we might want to select many other things, such as:</p>
      <ul>
        <li>
          <p>All ancestors of the context node</p>
        </li>
        <li>
          <p>All descendants of the context node</p>
        </li>
        <li>
          <p>All previous siblings or following siblings of the context node (siblings are nodes that have the same parent)</p>
        </li>
      </ul>
      <p>
<a name="INDEX-246" />
<a name="INDEX-247" />


To select these things, XPath provides a number of <em class="emphasis">axes</em> that let you specify various collections of nodes. There are thirteen axes in all; we'll discuss all of them here, even though most of them won't be particularly useful to you. To use an axis in an XPath expression, type the name of the axis, a double colon (<tt class="literal">::</tt>), and the name of the element you want to select, if any.</p>
      <p>Before we define all of the axes, though, we need to talk about XPath's unabbreviated syntax.</p>
      <div class="sect3">
        <h3 class="sect3">3.2.6.1. Unabbreviated syntax</h3>
        <p>
<a name="INDEX-248" />
<a name="INDEX-249" />
<a name="INDEX-250" />

To this point, all the XPath expressions we've looked at used the XPath <em class="emphasis">abbreviated syntax</em>. Most of the time, that's what you'll use; however, most of the lesser-used axes can only be specified with the unabbreviated syntax. For example, when we wrote an XPath expression to select all of the <tt class="literal">&lt;line&gt;</tt> elements in the current context, we used the abbreviated syntax:</p>
        <blockquote><pre class="code">
&lt;xsl:apply-templates select="line"/&gt;</pre></blockquote>
        <p>If you really enjoy typing, you can use the unabbreviated syntax to specify that you want all of the <tt class="literal">&lt;line&gt;</tt> children of the current context:</p>
        <blockquote><pre class="code">
&lt;xsl:apply-templates select="child::line"/&gt;</pre></blockquote>
        <p>We'll go through all of the axes now, pointing out which ones have an abbreviated syntax.</p>
      </div>
      <div class="sect3">
        <h3 class="sect3">3.2.6.2. Axis roll call</h3>
        <p>The following list contains all of the axes defined by the XPath standard, with a brief description of each one.</p>
        <dl>
          
            <dt><tt>child</tt> <em>axis</em></dt>
            <dd>
              
<a name="INDEX-251" />

Contains the children of the context node. As we've already mentioned, the XPath expression <tt class="literal">child::lines/child::line</tt> is equivalent to <tt class="literal">lines/line</tt>. If an XPath expression (such as <tt class="literal">/sonnet</tt>) doesn't have an axis specifier, the <tt class="literal">child</tt> axis is used by default. The children of the context node include all comment, element, processing instruction, and text nodes. Attribute and namespace nodes are not considered children of the context node.</p>
            </dd>
          
          
            <dt><tt class="literal">parent</tt> <em>axis</em></dt>
            <dd>
              
<a name="INDEX-252" />
<a name="INDEX-253" />
<a name="INDEX-254" />

Contains the parent of the context node, if there is one. (If the context node is the root node, the <tt class="literal">parent</tt> axis returns an empty node-set.)  This axis can be abbreviated with a double period (<tt class="literal">..</tt>). The expressions <tt class="literal">parent::sonnet</tt> and <tt class="literal">../sonnet</tt> are equivalent. If the context node does not have a <tt class="literal">&lt;sonnet&gt;</tt> element as its parent, these XPath expressions return an empty node-set. </p>
            </dd>
          
          
            <dt><tt class="literal">self</tt> <em>axis</em></dt>
            <dd>
              
<a name="INDEX-255" />
<a name="INDEX-256" />
<a name="INDEX-257" />

Contains the context node itself. The <tt class="literal">self</tt> axis can be abbreviated with a single period (<tt class="literal">.</tt>). The expressions <tt class="literal">self::*</tt> and <tt class="literal">.</tt> are equivalent. </p>
            </dd>
          
          
            <dt><tt class="literal">attribute</tt> <em>axis</em></dt>
            <dd>
              
<a name="INDEX-258" />
<a name="INDEX-259" />
<a name="INDEX-260" />

Contains the attributes of the context node. If the context node is not an element node, this axis is empty. The <tt class="literal">attribute</tt> axis can be abbreviated with the at-sign (<tt class="literal">@</tt>). The expressions <tt class="literal">attribute::type</tt> and <tt class="literal">@type</tt> are equivalent.</p>
            </dd>
          
          
            <dt><tt class="literal">ancestor</tt> <em>axis</em></dt>
            <dd>
              
<a name="INDEX-261" />

Contains the parent of the context node, the parent's parent, etc. The <tt class="literal">ancestor</tt> axis always contains the root node unless the context node is the root node. </p>
            </dd>
          
          
            <dt><tt class="literal">ancestor-or-self</tt> <em>axis</em></dt>
            <dd>
              
<a name="INDEX-262" />

Contains the context node, its parent, its parent's parent, and so on. This axis always includes the root node.</p>
            </dd>
          
          
            <dt><tt class="literal">descendant</tt> <em>axis</em></dt>
            <dd>
              
<a name="INDEX-263" />

Contains all children of the context node, all children of all the children of the context node, and so on. The children are all of the comment, element, processing instruction, and text nodes beneath the context node. In other words, the <tt class="literal">descendant</tt> axis does not include attribute or namespace nodes. (As we discussed earlier, although an attribute node has an element node as a parent, an attribute node is not considered a child of that element.)</p>
            </dd>
          
          
            <dt><tt class="literal">descendant-or-self</tt> <em>axis</em></dt>
            <dd>
              
<a name="INDEX-264" />

Contains the context node and all the children of the context node, all the children of all the children of the context node, all the children of the children of all the children of the context node, and so on. As always, the children of the context node include all comment, element, processing instruction, and text nodes; attribute and namespace nodes are not included. </p>
            </dd>
          
          
            <dt><tt class="literal">preceding-sibling</tt> <em>axis</em></dt>
            <dd>
              
<a name="INDEX-265" />

Contains all preceding siblings of the context node; in other words, all nodes that have the same parent as the context node and appear before the context node in the XML document. If the context node is an attribute node or a namespace node, the <tt class="literal">preceding-sibling</tt> axis is empty. </p>
            </dd>
          
          
            <dt><tt class="literal">following-sibling</tt> <em>axis</em></dt>
            <dd>
              
<a name="INDEX-266" />

Contains all the following siblings of the context node; in other words, all nodes that have the same parent as the context node and appear after the context node in the XML document. If the context node is an attribute node or a namespace node, the <tt class="literal">following-sibling</tt> axis is empty. </p>
            </dd>
          
          
            <dt><tt class="literal">preceding</tt> <em>axis</em></dt>
            <dd>
              
<a name="INDEX-267" />

Contains all nodes that appear before the context node in the document, except ancestors, attribute nodes, and namespace nodes.</p>
            </dd>
          
          
            <dt><tt class="literal">following</tt> <em>axis</em></dt>
            <dd>
              
<a name="INDEX-268" />

Contains all nodes that appear after the context node in the document, except descendants, attribute nodes, and namespace nodes.</p>
            </dd>
          
          
            <dt><tt class="literal">namespace</tt> <em>axis</em></dt>
            <dd>
              
<a name="INDEX-269" />

Contains the namespace nodes of the context node. If the context node is not an element node, this axis is empty.
<a name="INDEX-270" />


</p>
            </dd>
          
        </dl>
      </div>
    </div>
    <a name="xslt-CHP-3-SECT-2.7" /><div class="sect2">
      <h3 class="sect2">3.2.7. Predicates</h3>
      <p>
<a name="INDEX-271" />

There's one more aspect of XPath expressions that we haven't discussed: <em class="emphasis">predicates</em>. Predicates are filters that restrict the nodes selected by an XPath expression. Each predicate is evaluated and converted to a Boolean value (either <tt class="literal">true</tt> or <tt class="literal">false</tt>). If the predicate is <tt class="literal">true</tt> for a given node, that node will be selected; otherwise, the node is not selected. Predicates always appear inside square brackets (<tt class="literal">[]</tt>). Here's an example:
<a name="INDEX-272" />
<a name="INDEX-273" />

</p>
      <blockquote><pre class="code">
&lt;xsl:apply-templates select="line[3]"/&gt;</pre></blockquote>
      <p>This expression selects the third <tt class="literal">&lt;line&gt;</tt> element in the current context. If there are two or fewer <tt class="literal">&lt;line&gt;</tt> elements in the current context, this XPath expression returns an empty node-set. Several things can be part of a predicate; we'll go through them here. </p>
      <div class="sect3">
        <h3 class="sect3">3.2.7.1. Numbers in predicates</h3>
        <p>
<a name="INDEX-274" />

A number inside square brackets selects nodes that have a particular position. For example, the XPath expression <tt class="literal">line[7]</tt> selects the seventh <tt class="literal">&lt;line&gt;</tt> element in the context node. XPath also provides the boolean <tt class="literal">and</tt> and <tt class="literal">or</tt> operators as well as the union operator (<tt class="literal">|</tt>) to combine predicates. The expression <tt class="literal">line[position()=3 and @style]</tt> matches all <tt class="literal">&lt;line&gt;</tt> elements that occur third and have a <tt class="literal">style</tt> attribute, while <tt class="literal">line[position()=3 or @style]</tt> matches all <tt class="literal">&lt;line&gt;</tt> elements that either occur third or have a <tt class="literal">style</tt> attribute. With the union operator, the expression <tt class="literal">line[3|7]</tt> matches all third and seventh <tt class="literal">&lt;line&gt;</tt> elements in the current context, as does the more verbose <tt class="literal">line[3] | line[7]</tt>. </p>
      </div>
      <div class="sect3">
        <h3 class="sect3">3.2.7.2. Functions in predicates</h3>
        <p>
<a name="INDEX-275" />


In addition to numbers, we can use XPath and XSLT functions inside predicates. Here are some examples:</p>
        <dl>
          
            <dt><tt class="literal">line[last()]</tt></dt>
            <dd>
              Selects the last <tt class="literal">&lt;line&gt;</tt> element in the current context.</p>
            </dd>
          
          
            <dt><tt class="literal">line[position() mod 2 = 0]</tt></dt>
            <dd>
              Selects all even-numbered <tt class="literal">&lt;line&gt;</tt> elements. (The <tt class="literal">mod</tt> operator returns the remainder after a division; the <tt class="literal">position</tt> of any even-numbered element divided by 2 has a remainder of 0.)</p>
            </dd>
          

          
            <dt><tt class="literal">sonnet[@type="Shakespearean"]</tt></dt>
            <dd>
              Selects all <tt class="literal">&lt;sonnet&gt;</tt> elements that have a <tt class="literal">type</tt> attribute with the value <tt class="literal">Shakespearean</tt>. </p>
            </dd>
          
          
            <dt><tt class="literal">ancestor::table[@border="1"]</tt></dt>
            <dd>
              Selects all <tt class="literal">&lt;table&gt;</tt> ancestors of the current context that have a <tt class="literal">border</tt> attribute with the value <tt class="literal">1</tt>. </p>
            </dd>
          
          
            <dt><tt class="literal">count(/body/table[@border="1"])</tt></dt>
            <dd>
              Returns the number of <tt class="literal">&lt;table&gt;</tt> elements with a <tt class="literal">border</tt> attribute equal to <tt class="literal">1</tt> that are children of <tt class="literal">&lt;body&gt;</tt> elements that are children of the root node. Notice that in this case we're using an XPath predicate expression as an argument to a function.
<a name="INDEX-276" />

</p>
            </dd>
          
        </dl>
      </div>
    </div>
  

<hr width="684" align="left" />
<div class="navbar"><table width="684" border="0"><tr><td align="left" valign="top" width="228"><a href="ch03_01.htm"><img alt="Previous" border="0" src="../gifs/txtpreva.gif" /></a></td><td align="center" valign="top" width="228"><a href="index.htm"><img alt="Home" border="0" src="../gifs/txthome.gif" /></a></td><td align="right" valign="top" width="228"><a href="ch03_03.htm"><img alt="Next" border="0" src="../gifs/txtnexta.gif" /></a></td></tr><tr><td align="left" valign="top" width="228">3. XPath: A Syntax for Describing Needles and Haystacks</td><td align="center" valign="top" width="228"><a href="index/index.htm"><img alt="Book Index" border="0" src="../gifs/index.gif" /></a></td><td align="right" valign="top" width="228">3.3. Attribute Value Templates</td></tr></table></div>
<hr width="684" align="left" />

<img alt="Library Navigation Links" border="0" src="../gifs/navbar.gif" usemap="#library-map" />
<p><p><font size="-1"><a href="copyrght.htm">Copyright &copy; 2002</a> O'Reilly &amp; Associates. All rights reserved.</font></p>

<map name="library-map">
<area shape="rect" coords="0,0,85,93" href="../index.htm"><area shape="rect" coords="85,0,180,98" href="../sax2/index.htm"><area shape="rect" coords="182,-1,261,100" href="../xmlnut/index.htm"><area shape="rect" coords="263,1,384,96" href="../jxml/index.htm"><area shape="rect" coords="386,1,463,100" href="../jxslt/index.htm"><area shape="rect" coords="466,1,533,112" href="index.htm"><area shape="rect" coords="535,-1,610,108" href="../schema/index.htm"><area shape="rect" coords="613,1,696,121" href="../pxml/index.htm">
</map>

</body></html>
