<html><head><title>Parameters (XSLT)</title><link rel="stylesheet" type="text/css" href="../style/style1.css" />

<meta name="DC.Creator" content="Doug Tidwell" /><meta name="DC.Format" content="text/xml" scheme="MIME" /><meta name="DC.Language" content="en-US" /><meta name="DC.Publisher" content="O'Reilly &amp; Associates, Inc." /><meta name="DC.Source" scheme="ISBN" content="0596000537L" /><meta name="DC.Subject.Keyword" content="stuff" /><meta name="DC.Title" content="XSLT" /><meta name="DC.Type" content="Text.Monograph" />

</head><body bgcolor="#ffffff">

<img alt="Book Home" border="0" src="gifs/smbanner.gif" usemap="#banner-map" /><map name="banner-map"><area shape="rect" coords="1,-2,616,66" href="index.htm" alt="XSL" /><area shape="rect" coords="629,-11,726,25" href="jobjects/fsearch.htm" alt="Search this book" /></map>

<div class="navbar"><table width="684" border="0"><tr><td align="left" valign="top" width="228"><a href="ch04_03.htm"><img alt="Previous" border="0" src="../gifs/txtpreva.gif" /></a></td><td align="center" valign="top" width="228"></td><td align="right" valign="top" width="228"><a href="ch04_05.htm#xslt-CHP-4-SECT-5"><img alt="Next" border="0" src="../gifs/txtnexta.gif" /></a></td></tr></table></div>



    <h2 class="sect1">4.4. Parameters</h2>
    <p>
<a name="INDEX-348" />
<a name="INDEX-349" />
<a name="INDEX-350" />
<a name="INDEX-351" />

The XSLT <tt class="literal">&lt;xsl:param&gt;</tt> and <tt class="literal">&lt;xsl:with-param&gt;</tt> elements allow you to pass parameters to a template. You can pass templates with either the <tt class="literal">&lt;call-template&gt;</tt> element or the <tt class="literal">&lt;apply-templates&gt;</tt> element; we'll discuss the details in this section. </p>
    <div class="sect2">
      <h3 class="sect2">4.4.1. Defining a Parameter in a Template</h3>
      <p>To define a parameter in a template, use the <tt class="literal">&lt;xsl:param&gt;</tt> element. Here's an example of a template that defines two parameters:</p>
      <blockquote><pre class="code">
&lt;xsl:template name="calcuateArea"&gt;
  &lt;xsl:param name="width"/&gt;
  &lt;xsl:param name="height"/&gt;

  &lt;xsl:value-of select="$width * $height"/&gt;
&lt;/xsl:template&gt;</pre></blockquote>
      <p>Conceptually, this is a lot like writing code in a traditional programming language, isn't it?  Our template here defines two parameters, <tt class="literal">width</tt> and <tt class="literal">height</tt>, and outputs their product. </p>
      <p>
<a name="INDEX-352" />

If you want, you can define a default value for a parameter. There are two ways to define a default value; the simplest is to use a <tt class="literal">select</tt> attribute on the <tt class="literal">&lt;xsl:param&gt;</tt> element:</p>
      <blockquote><pre class="code">
&lt;template name="addTableCell"&gt;
  &lt;xsl:param name="bgColor" select="'blue'"/&gt;
  &lt;xsl:param name="width" select="150"/&gt;
  &lt;xsl:param name="content"/&gt;
  &lt;td width="{$width}" bgcolor="{$bgColor}"&gt;
    &lt;xsl:apply-templates select="$content"/&gt;
  &lt;/td&gt;
&lt;/template&gt;</pre></blockquote>
<a name="INDEX-353" />
<a name="INDEX-354" />
<a name="INDEX-355" />
      <p>In this example, the default values of the parameters <tt class="literal">bgColor</tt> and <tt class="literal">width</tt> are <tt class="literal">'blue'</tt> and <tt class="literal">150</tt>, respectively. If we invoke this template without specifying values for these parameters, the default values are used. Also notice that we generated the values of the <tt class="literal">width</tt> and <tt class="literal">bgcolor</tt> attributes of the HTML <tt class="literal">&lt;td&gt;</tt> tag with attribute value templates, the values in curly braces. For more information, see <a href="ch03_03.htm">Section 3.3, "Attribute Value Templates"</a> in <a href="ch03_01.htm">Chapter 3, "XPath: A Syntax for Describing Needles and Haystacks"</a>.</p>
      <blockquote><b>WARNING:</b> 
Notice that in the previous sample, we put single quotes around the value <tt class="literal">blue</tt>, but we didn't do it around the value <tt class="literal">150</tt>. Without the single quotes around <tt class="literal">blue</tt>, the XSLT processor assumes we want to select all the <tt class="literal">&lt;blue&gt;</tt> elements in the current context, which is probably not what we want. The XSLT processor is clever enough to realize that the value <tt class="literal">150</tt> can't be an XML element name (the XML 1.0 Specification says element names can't begin with numbers), so we don't need the single quotes around a numeric value. </p>
        <p>Try to keep this in mind when you're using parameters. You'll probably forget it at some point, and you'll probably go nuts trying to figure out the strange behavior you're getting from the XSLT processor.</p>
      </blockquote>
      <p>The second way to define a default value for a parameter is to include content inside the <tt class="literal">&lt;xsl:param&gt;</tt> element:</p>
      <blockquote><pre class="code">
&lt;template name="addTableCell"&gt;
  &lt;xsl:param name="bgColor"&gt;
    &lt;xsl:text&gt;blue&lt;/xsl:text&gt;
  &lt;/xsl:param&gt;
  &lt;xsl:param name="width"&gt;
    &lt;xsl:value-of select="7+8"/&gt;&lt;xsl:text&gt;0&lt;/xsl:text&gt;
  &lt;/xsl:param&gt;
  &lt;xsl:param name="content"/&gt;
  &lt;td width="{$width}" bgcolor="{$bgColor}"&gt;
    &lt;xsl:apply-templates select="$content"/&gt;
  &lt;/td&gt;
&lt;/template&gt;</pre></blockquote>
      <p>In this example, we used <tt class="literal">&lt;xsl:text&gt;</tt> and <tt class="literal">&lt;xsl:value-of&gt;</tt> elements to define the default values of the parameters. Out of sheer perverseness, we defined the value of <tt class="literal">width</tt> as the concatenation of the numeric expression <tt class="literal">7+8</tt>, followed by the string "0". This example produces the same results as the previous one. </p>
    </div>
    <div class="sect2">
      <h3 class="sect2">4.4.2. Passing Parameters</h3>
      <p>If we invoke a template by name, which is similar to calling a subroutine, we'll need to pass parameters to those templates. We do this with the <tt class="literal">&lt;xsl:with-param&gt;</tt> element. For example, let's say we want to call a template named <em class="emphasis">draw-box</em>, and pass the parameters <tt class="literal">startX</tt>, <tt class="literal">startY</tt>, <tt class="literal">endX</tt>, and <tt class="literal">endY</tt> to it. Here's what we'd do:</p>
      <blockquote><pre class="code">
&lt;xsl:call-template name="draw-box"&gt;
  &lt;xsl:with-param name="startX" select="50"/&gt;
  &lt;xsl:with-param name="startY" select="50"/&gt;
  &lt;xsl:with-param name="endX" select="97"/&gt;
  &lt;xsl:with-param name="endY" select="144"/&gt;
&lt;/xsl:call-template&gt;</pre></blockquote>
      <p>In this sample, we've called the template named draw-box with the four parameters we mentioned earlier. Notice that up until now, <tt class="literal">&lt;xsl:call-template&gt;</tt> has always been an empty tag; here, though, the parameters are the content of the <tt class="literal">&lt;xsl:call-template&gt;</tt> element. (If you want, you can do the same thing with <tt class="literal">&lt;xsl:apply-templates&gt;</tt>.)  We used the <tt class="literal">&lt;xsl:with-param&gt;</tt> element with the <tt class="literal">&lt;xsl:call-template&gt;</tt> element here, but you can also use it with <tt class="literal">&lt;xsl:apply-templates&gt;</tt>. </p>
      <p>If we're going to pass parameters to a template, we have to set up the template so that it expects the parameters we're passing. To do this, we'll use the <tt class="literal">&lt;xsl:param&gt;</tt> element inside the template. Here are some examples:</p>
      <blockquote><pre class="code">
&lt;xsl:template name="draw-box"&gt;
&lt;xsl:param name="startX"/&gt;
&lt;xsl:param name="startY" select="'0'"/&gt;
&lt;xsl:param name="endX"&gt; 
10
&lt;/xsl:param&gt;
&lt;xsl:param name="endY"&gt;
10
&lt;/xsl:param&gt;
...
&lt;/xsl:template&gt;</pre></blockquote>
      <p>A couple of notes about the <tt class="literal">&lt;xsl:param&gt;</tt> element: </p>
      <ul>
        <li><p>If you define any <tt class="literal">&lt;xsl:param&gt;</tt> elements in a template, they must be the first thing in the template. </p></li>
        <li><p>The <tt class="literal">&lt;xsl:param&gt;</tt> element allows you to define a default value for the parameter. If the calling template doesn't supply a value, the default is used instead. The last three <tt class="literal">&lt;xsl:param&gt;</tt> elements in our previous example define default values. </p></li>
        <li><p>The <tt class="literal">&lt;xsl:param&gt;</tt> element has the same content model as <tt class="literal">&lt;xsl:variable&gt;</tt>. With no content and no select attribute, the default value of the parameter is an empty string (<tt class="literal">""</tt>). With a select attribute, the default value of the parameter is the value of the select attribute. If the <tt class="literal">&lt;xsl:param&gt;</tt> element contains content, the default value of the parameter is the content of the <tt class="literal">&lt;xsl:param&gt;</tt> element. </p></li>
      </ul>
    </div>
    <a name="xslt-CHP-4-SECT-4.3" /><div class="sect2">
      <h3 class="sect2">4.4.3. Global Parameters</h3>
      <p>
<a name="INDEX-356" />
<a name="INDEX-357" />


XSLT allows you to define parameters whose scope is the entire stylesheet. You can define default values for these parameters and you can pass values to those parameters externally to the stylesheet. Before we talk about how to pass in values for global parameters, we'll show you how to create them. Any parameters that are top-level elements (any <tt class="literal">&lt;xsl:param&gt;</tt> elements whose parent is <tt class="literal">&lt;xsl:stylesheet&gt;</tt>) are global parameters. Here's an example:</p>
      <blockquote><pre class="code">
&lt;?xml version="1.0"?&gt;
&lt;xsl:stylesheet version="1.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform"&gt;

  &lt;xsl:output method="text"/&gt;

  &lt;xsl:param name="startX"/&gt;
  &lt;xsl:param name="baseColor"/&gt;

  &lt;xsl:variable name="newline"&gt;
&lt;xsl:text&gt;
&lt;/xsl:text&gt;
  &lt;/xsl:variable&gt;

  &lt;xsl:template match="/"&gt;
    &lt;xsl:value-of select="$newline"/&gt;
    &lt;xsl:text&gt;Global parameters example&lt;/xsl:text&gt;

    &lt;xsl:value-of select="$newline"/&gt;
    &lt;xsl:value-of select="$newline"/&gt;
    &lt;xsl:text&gt;The value of startX is: &lt;/xsl:text&gt;
    &lt;xsl:value-of select="$startX"/&gt;
    &lt;xsl:value-of select="$newline"/&gt;
    &lt;xsl:text&gt;The value of baseColor is: &lt;/xsl:text&gt;

    &lt;xsl:value-of select="$baseColor"/&gt;
    &lt;xsl:value-of select="$newline"/&gt;
  &lt;/xsl:template&gt;

&lt;/xsl:stylesheet&gt;</pre></blockquote>
      <p>How you pass values for global parameters depends on the XSLT processor you're using. We'll go through some examples here for all the usual suspects. Let's say we want to pass the numeric value <tt class="literal">50</tt> as the value for <tt class="literal">startX</tt>, and the string value <tt class="literal">magenta</tt> as the default value for <tt class="literal">baseColor</tt>. Here are the commands you'd use to do that.</p>
      <div class="sect3">
        <h3 class="sect3">4.4.3.1. Xalan</h3>
        <p>
<a name="INDEX-358" />

To pass global parameters to Xalan, you can define them on the Xalan command line:</p>
        <blockquote><pre class="code">
java org.apache.xalan.xslt.Process -in xyz.xml -xsl params.xsl 
  -param startX 50 -param baseColor magenta</pre></blockquote>
        <p>(This command should be on a single line.)</p>
      </div>
      <div class="sect3">
        <h3 class="sect3">4.4.3.2. XT</h3>
        <p>
<a name="INDEX-359" />

If you're using James Clark's XSLT processor, you can pass parameters like this:</p>
        <blockquote><pre class="code">
java com.jclark.xsl.sax.Driver xyz.xml params.xsl startX=50 baseColor=magenta</pre></blockquote>
      </div>
      <div class="sect3">
        <h3 class="sect3">4.4.3.3. Microsoft's XSLT tools</h3>
        <p>
<a name="INDEX-360" />

Microsoft's XSLT tools support external parameters like this:</p>
        <blockquote><pre class="code">
msxsl xyz.xml params.xsl startX=50 baseColor=magenta</pre></blockquote>
      </div>
      <div class="sect3">
        <h3 class="sect3">4.4.3.4. Saxon</h3>
        <p>
<a name="INDEX-361" />

Saxon supports external parameters like this:</p>
        <blockquote><pre class="code">
java com.icl.saxon.StyleSheet xyz.xml params.xsl startX=50 baseColor=magenta</pre></blockquote>
      </div>
      <div class="sect3">
        <h3 class="sect3">4.4.3.5. Oracle</h3>
        <p>
<a name="INDEX-362" />

If you're using Oracle's parser, stylesheet parameters are passed like this:</p>
        <blockquote><pre class="code">
java oracle.xml.parser.v2.oraxsl -p startX=50 -p baseColor='magenta' xyz.xml 
params.xsl</pre></blockquote>
        <p>(This command should be on a single line.)  Notice that for the Oracle parser, we had to put single quotes around the text value <tt class="literal">magenta</tt>. </p>
      </div>

      <p>Using this stylesheet with any XML document and any of the XSLT processors listed here produces these results:</p>
      <blockquote><pre class="code">

Global parameters example

The value of startX is: 50
The value of baseColor is: magenta</pre></blockquote>
      <div class="sect3">
        <h3 class="sect3">4.4.3.6. Setting global parameters in a Java program</h3>
        <p>
<a name="INDEX-363" />
<a name="INDEX-364" />
<a name="INDEX-365" />


If your XSLT engine supports the Transformation API for XML (TrAX), you can embed the XSLT processor and set global parameters in your code. Here's an example that uses TrAX support:</p>
        <blockquote><pre class="code">
import java.io.File;
import javax.xml.transform.Transformer;
import javax.xml.transform.TransformerConfigurationException;
import javax.xml.transform.TransformerException;
import javax.xml.transform.TransformerFactory;
import javax.xml.transform.stream.StreamResult;
import javax.xml.transform.stream.StreamSource;

public class GlobalParameters
{
  public static void parseAndProcess(String sourceID, 
                                     String xslID,
                                     String outputID)
  {
    try
    {
      TransformerFactory tfactory = TransformerFactory.newInstance();
      
      Transformer transformer 
        = tfactory.newTransformer(new StreamSource(xslID));

      // Use the setParameter method to set global parameters
      transformer.setParameter("startX", new Integer(50));
      transformer.setParameter("baseColor", "magenta");
      
      transformer.transform(new StreamSource(new File(sourceID)),
                            new StreamResult(new File(outputID)));
    }
    catch (TransformerConfigurationException tce)
    {
      System.err.println("Exception: " + tce);
    }
    catch (TransformerException te)
    {
      System.err.println("Exception: " + te);
    }
  }
  

  public static void main(String argv[])
    throws java.io.IOException, 
           org.xml.sax.SAXException
  {
    GlobalParameters gp = new GlobalParameters();
    gp.parseAndProcess("xyz.xml", "params.xsl", "output.text");
  }
}</pre></blockquote>
        <p>Notice that we used the <tt class="literal">setParameter</tt> method to set global parameters for the <tt class="literal">Transformer</tt> object before we invoke the <tt class="literal">transform</tt> method. This transformation generates the following results in <em class="filename">output.text</em>:
<a name="INDEX-366" />
<a name="INDEX-367" />
<a name="INDEX-368" />
<a name="INDEX-369" />
<a name="INDEX-370" />
<a name="INDEX-371" />


</p>
        <blockquote><pre class="code">

Global parameters example

The value of startX is: 50
The value of baseColor is: magenta</pre></blockquote>
      </div>
    </div>
  

<hr width="684" align="left" />
<div class="navbar"><table width="684" border="0"><tr><td align="left" valign="top" width="228"><a href="ch04_03.htm"><img alt="Previous" border="0" src="../gifs/txtpreva.gif" /></a></td><td align="center" valign="top" width="228"><a href="index.htm"><img alt="Home" border="0" src="../gifs/txthome.gif" /></a></td><td align="right" valign="top" width="228"><a href="ch04_05.htm#xslt-CHP-4-SECT-5"><img alt="Next" border="0" src="../gifs/txtnexta.gif" /></a></td></tr><tr><td align="left" valign="top" width="228">4.3. Invoking Templates by Name</td><td align="center" valign="top" width="228"><a href="index/index.htm"><img alt="Book Index" border="0" src="../gifs/index.gif" /></a></td><td align="right" valign="top" width="228">4.5. Variables</td></tr></table></div>
<hr width="684" align="left" />

<img alt="Library Navigation Links" border="0" src="../gifs/navbar.gif" usemap="#library-map" />
<p><p><font size="-1"><a href="copyrght.htm">Copyright &copy; 2002</a> O'Reilly &amp; Associates. All rights reserved.</font></p>

<map name="library-map">
<area shape="rect" coords="0,0,85,93" href="../index.htm"><area shape="rect" coords="85,0,180,98" href="../sax2/index.htm"><area shape="rect" coords="182,-1,261,100" href="../xmlnut/index.htm"><area shape="rect" coords="263,1,384,96" href="../jxml/index.htm"><area shape="rect" coords="386,1,463,100" href="../jxslt/index.htm"><area shape="rect" coords="466,1,533,112" href="index.htm"><area shape="rect" coords="535,-1,610,108" href="../schema/index.htm"><area shape="rect" coords="613,1,696,121" href="../pxml/index.htm">
</map>

</body></html>
