<html><head><title>WSDL (Java &amp; XML, 2nd Edition)</title><link rel="stylesheet" type="text/css" href="../style/style1.css" />

<meta name="DC.Creator" content="Brett McLaughlin" /><meta name="DC.Format" content="text/xml" scheme="MIME" /><meta name="DC.Language" content="en-US" /><meta name="DC.Publisher" content="O'Reilly &amp; Associates, Inc." /><meta name="DC.Source" scheme="ISBN" content="059600197L" /><meta name="DC.Subject.Keyword" content="stuff" /><meta name="DC.Title" content="Java &amp; XML, 2nd Edition" /><meta name="DC.Type" content="Text.Monograph" />

</head><body bgcolor="#ffffff">

<img alt="Book Home" border="0" src="gifs/smbanner.gif" usemap="#banner-map" /><map name="banner-map"><area shape="rect" coords="1,-2,616,66" href="index.htm" alt="Java and XML, 2nd Edition" /><area shape="rect" coords="629,-11,726,25" href="jobjects/fsearch.htm" alt="Search this book" /></map>

<div class="navbar"><table width="684" border="0"><tr><td align="left" valign="top" width="228"><a href="ch13_02.htm"><img alt="Previous" border="0" src="../gifs/txtpreva.gif" /></a></td><td align="center" valign="top" width="228"></td><td align="right" valign="top" width="228"><a href="ch13_04.htm"><img alt="Next" border="0" src="../gifs/txtnexta.gif" /></a></td></tr></table></div>



<h2 class="sect1">13.3. WSDL</h2>

<p><a name="INDEX-1283" />WSDL is the
<em class="filename">Web Services Description Language</em>. The entire
specification is online at <a name="INDEX-1284" />
<a name="INDEX-1285" /><a href="../../../../../../www.w3.org/TR/wsdl">http://www.w3.org/TR/wsdl</a>, and describes
everything you need to know about a service in order to interact with
it. Like UDDI, it's a fairly simple piece of technology on its
own (really, it's not even technology; it's just markup),
but becomes extremely important in the overall web services picture.
The <a name="INDEX-1286" />WSDL file describes several critical pieces
of information a service client would need:
</p>

<ul><li>
<p>The name of the service, including its URN</p>
</li><li>
<p>The location the service can be accessed at (usually an HTTP URL
address)
</p>
</li><li>
<p>The methods available for invocation</p>
</li><li>
<p>The input and output parameter types for each method</p>
</li></ul>
<p>Each of these pieces of data on their own are fairly useless, but
together, they represent the complete client picture of the service.
Additionally, a WSDL document incorporates elements of XML Schema,
XML-RPC-style parameters, and quite a bit of everything else
you've read about so far. <a href="ch13_03.htm">Example 13-1</a> is a
portion of a WSDL schema for the CD catalog from the last chapter; it
only describes the <tt class="literal">getCD( )</tt> method of the service.
It's not complete, but it should give you an idea of what a
WSDL document looks like.
</p>

<a name="javaxml2-CHP-13-EX-1" /><div class="example">
<h4 class="objtitle">Example 13-1. Portion of a WSDL document </h4>
<blockquote><pre class="code">&lt;?xml version="1.0"?&gt;

&lt;definitions name="CDCatalog"
             targetNamespace="http://www.oreilly.com/javaxml2/cd-catalog.wsdl"
             xmlns:cd="http://www.oreilly.com/javaxml2/cd-catalog.wsdl"
             xmlns:soap="http://schemas.xmlsoap.org/wsdl/soap/"
             xmlns:cdXSD="http://www.oreilly.com/javaxml2/cd-catalog.xsd"
             xmlns="http://schemas.xmlsoap.org/wsdl/"
&gt;
  &lt;types&gt;
    &lt;schema targetNamespace="http://www.oreilly.com/javaxml2/cd-catalog.xsd"
            xmlns="http://www.w3.org/2000/10/XMLSchema"&gt;
      &lt;element name="Title"&gt;
        &lt;complexType&gt;
          &lt;all&gt;&lt;element name="title" type="string" /&gt;&lt;/all&gt;
        &lt;/complexType&gt;
      &lt;/element&gt;
      &lt;element name="CD"&gt;
        &lt;complexType&gt;
          &lt;all&gt;
            &lt;element name="title" type="string" /&gt;
            &lt;element name="artist" type="string" /&gt;
            &lt;element name="label" type="string" /&gt;
          &lt;/all&gt;
        &lt;/complexType&gt;
      &lt;/element&gt;
    &lt;/schema&gt;
  &lt;/types&gt;

  &lt;message name="getCDInput"&gt;
    &lt;part name="body" element="cdXSD:Title" /&gt;
  &lt;/message&gt;

  &lt;message name="getCDOutput"&gt;
    &lt;part name="body" element="cdXSD:CD" /&gt;
  &lt;/message&gt;

  &lt;portType name="CDCatalogPortType"&gt;
    &lt;operation name="getCD"&gt;
      &lt;input message="cd:getCDInput" /&gt;
      &lt;output message="cd:getCDOutput" /&gt;
    &lt;/operation&gt;
  &lt;/portType&gt;

  &lt;binding name="CDCatalogBinding" type="cd:CDCatalogPortType"&gt;
    &lt;soap:binding style="rpc" 
                  transport="http://schemas.xmlsoap.org/soap/http" /&gt;
    &lt;operation name="getCD"&gt;
      &lt;soap:operation soapAction="urn:cd-catalog" /&gt;
      &lt;input&gt;
        &lt;soap:body use="encoded"
            encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"
            namespace="urn:cd-catalog" /&gt;
      &lt;/input&gt;
      &lt;output&gt;
        &lt;soap:body use="encoded"
            encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"
            namespace="urn:cd-catalog" /&gt;
      &lt;/output&gt;
    &lt;/operation&gt;
  &lt;/binding&gt;

  &lt;service name="CDCatalog"&gt;
    &lt;documentation&gt;CD Catalog Service from Java and XML&lt;/documentation&gt;
    &lt;port name="CDCatalogPort" binding="cd:CDCatalogBinding"&gt;
      &lt;soap:address location="http://newInstance.com/soap/servlet/rpcrouter" /&gt;
    &lt;/port&gt;
  &lt;/service&gt;
&lt;/defintions&gt;</pre></blockquote>
</div>

<p><a name="INDEX-1287" />As you
can see, this is a fairly verbose format for describing a service;
however, it's also easy to understand. First, any types that
must be passed across the wire are described using the
<tt class="literal">types</tt><a name="INDEX-1288" /> element, and an XML Schema-style
syntax.
</p>
<blockquote><b>WARNING:</b> 

<a name="INDEX-1289" />Currently, WSDL specifications are using the 2000 version of the XML Schema specification, and not the finalized April 2001 XML Schema specification. You'll need to use the slightly older schema constructs until the WSDL specification is brought completely up to date.
</p>
</blockquote>
<p>Next, the <tt class="literal">message</tt><a name="INDEX-1290" /> element is used to define interaction
from the client to the server, and the server to the client. These
are combined in the
<tt class="literal">portType</tt><a name="INDEX-1291" /> element to define available operations
(you would find additional available methods in this section as
well). The <tt class="literal">binding</tt><a name="INDEX-1292" /> element details how the operations can
be accessed and the URN where they are accessible, and the
<tt class="literal">service</tt><a name="INDEX-1293" /> element brings all of this together.
Thinking about this process as a hierarchy will help keep everything
straight in your head.
</p>

<a name="javaxml2-CHP-13-SIDEBAR-1" /><blockquote><table border="1" cellpadding="6"><tr><td>
<h4 class="objtitle">SOAP's All You Got?</h4>

<p>Don't get the idea that a SOAP service is the only type of
<a name="INDEX-1294" />web service around. It's
certainly possible to build a program (or programs) that interact
with clients through some other means, and represent that interaction
through a WSDL file. For example, an XML-RPC service fits the bill
pretty nicely; even though it doesn't have an envelope and
custom parameter support, it still can easily interact with clients
and represent its input and output parameters in WSDL. However,
almost all the services I've seen (and I've seen a lot!)
are SOAP, so it is certainly the overriding trend. Still, keep in the
back of your mind the ability to use any program as a service, not
just SOAP ones.
</p>
</td></tr></table><p></blockquote>

<p>Currently, the <a name="INDEX-1295" />Apache SOAP implementation does not
directly use WSDL documents. In other words, you can't consume
a WSDL document and automatically get a client class, for example.
While some of the other platforms, such as Microsoft, are further
along, Apache's Axis project is working on this functionality.
For now, you'll need to interpret the WSDL document on your
own, and then manually code up a client. That's more fun
anyway. <a name="INDEX-1296" />
</p>



<hr width="684" align="left" />
<div class="navbar"><table width="684" border="0"><tr><td align="left" valign="top" width="228"><a href="ch13_02.htm"><img alt="Previous" border="0" src="../gifs/txtpreva.gif" /></a></td><td align="center" valign="top" width="228"><a href="index.htm"><img alt="Home" border="0" src="../gifs/txthome.gif" /></a></td><td align="right" valign="top" width="228"><a href="ch13_04.htm"><img alt="Next" border="0" src="../gifs/txtnexta.gif" /></a></td></tr><tr><td align="left" valign="top" width="228">13.2. UDDI</td><td align="center" valign="top" width="228"><a href="index/index.htm"><img alt="Book Index" border="0" src="../gifs/index.gif" /></a></td><td align="right" valign="top" width="228">13.4. Putting It All Together</td></tr></table></div>
<hr width="684" align="left" />

<img alt="Library Navigation Links" border="0" src="../gifs/navbar.gif" usemap="#library-map" />
<p><p><font size="-1"><a href="copyrght.htm">Copyright &copy; 2002</a> O'Reilly &amp; Associates. All rights reserved.</font></p>

<map name="library-map">
<area shape="rect" coords="0,0,85,93" href="../index.htm"><area shape="rect" coords="85,0,180,98" href="../sax2/index.htm"><area shape="rect" coords="182,-1,261,100" href="../xmlnut/index.htm"><area shape="rect" coords="263,1,384,96" href="index.htm"><area shape="rect" coords="386,1,463,100" href="../jxslt/index.htm"><area shape="rect" coords="466,1,533,112" href="../xslt/index.htm"><area shape="rect" coords="535,-1,610,108" href="../schema/index.htm"><area shape="rect" coords="613,1,696,121" href="../pxml/index.htm">
</map>

</body></html>