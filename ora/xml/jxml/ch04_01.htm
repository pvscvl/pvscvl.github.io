<html><head><title>Advanced SAX  (Java &amp; XML, 2nd Edition)</title><link rel="stylesheet" type="text/css" href="../style/style1.css" />

<meta name="DC.Creator" content="Brett McLaughlin" /><meta name="DC.Format" content="text/xml" scheme="MIME" /><meta name="DC.Language" content="en-US" /><meta name="DC.Publisher" content="O'Reilly &amp; Associates, Inc." /><meta name="DC.Source" scheme="ISBN" content="059600197L" /><meta name="DC.Subject.Keyword" content="stuff" /><meta name="DC.Title" content="Java &amp; XML, 2nd Edition" /><meta name="DC.Type" content="Text.Monograph" />

</head><body bgcolor="#ffffff">

<img alt="Book Home" border="0" src="gifs/smbanner.gif" usemap="#banner-map" /><map name="banner-map"><area shape="rect" coords="1,-2,616,66" href="index.htm" alt="Java and XML, 2nd Edition" /><area shape="rect" coords="629,-11,726,25" href="jobjects/fsearch.htm" alt="Search this book" /></map>

<div class="navbar"><table width="684" border="0"><tr><td align="left" valign="top" width="228"><a href="ch03_06.htm"><img alt="Previous" border="0" src="../gifs/txtpreva.gif" /></a></td><td align="center" valign="top" width="228"></td><td align="right" valign="top" width="228"><a href="ch04_02.htm"><img alt="Next" border="0" src="../gifs/txtnexta.gif" /></a></td></tr></table></div>




<h1 class="chapter">Chapter 4. Advanced SAX </h1>
<div class="htmltoc"><h4 class="tochead">Contents:</h4>
  <p> <a href="#javaxml2-CHP-4-SECT-1">Properties and Features</a><br />
<a href="ch04_02.htm">More Handlers</a><br />
<a href="ch04_03.htm">Filters and Writers</a><br />
<a href="ch04_04.htm">Even More Handlers</a><br />
<a href="ch04_05.htm">Gotcha!</a><br />
<a href="ch04_06.htm">What's Next?</a><br /></p></div>

<p>The last chapter was a good introduction to SAX. However, there are
several more topics that will round out your knowledge of SAX. While
I've called this chapter "Advanced SAX,"
don't be intimidated. It could just as easily be called
"Less-Used Portions of SAX that are Still Important." In
writing these two chapters, I followed the 80/20 principle. 80% of
you will probably never need to use the material in this chapter, and
<a href="ch03_01.htm">Chapter 3, "SAX"</a> will completely cover your needs.
However, for those power users out there working in XML day in and
day out, this chapter covers some of the finer points of SAX that
you'll need.
</p>

<p>I'll start with a look at setting parser properties and
features, and discuss configuring your parser to do whatever you need
it to. From there, I'll move on to some more handlers: the
<tt class="literal">EntityResolver</tt> and <tt class="literal">DTDHandler</tt>
left over from the last chapter. At that point, you should have a
comprehensive understanding of the standard SAX 2.0 distribution.
However, we'll push on to look at some SAX extensions,
beginning with the writers that can be coupled with SAX, as well as
some filtering mechanisms. Finally, I'll introduce some new
handlers to you, the <tt class="literal">LexicalHandler</tt> and
<tt class="literal">DeclHandler</tt>, and show you how they are used. When
all is said and done (including another "Gotcha!"
section), you should be ready to take on the world with just your
parser and the SAX classes. So slip into your shiny spacesuit and
grab the flightstick -- ahem. Well, I got carried away with the
taking on the world. In any case, let's get down to it.
</p>

<div class="sect1"><a name="javaxml2-CHP-4-SECT-1" /></a>
<h2 class="sect1">4.1. Properties and Features</h2>

<p><a name="INDEX-352" /></a>With the wealth of XML-related
specifications and technologies emerging from the World Wide Web
Consortium (W3C), adding support for any new feature or property of
an XML parser has become difficult. Many parser implementations have
added proprietary extensions or methods at the cost of code
portability. While these software packages may implement the SAX
<tt class="literal">XMLReader</tt> interface, the methods for setting
document and schema validation, namespace support, and other core
features are not standard across parser implementations. To address
this, <a name="INDEX-353" /></a>SAX 2.0 defines a
standard mechanism for setting important properties and features of a
parser that allows the addition of new properties and features as
they are accepted by the W3C without the use of proprietary
extensions or methods.
</p>

<a name="javaxml2-CHP-4-SECT-1.1" /></a><div class="sect2">
<h3 class="sect2">4.1.1. Setting Properties and Features</h3>

<p>Lucky for you and me, SAX 2.0 includes the methods needed for setting
properties and features in the
<tt class="literal">XMLReader</tt><a name="INDEX-354" /></a>
<a name="INDEX-355" /></a> <a name="INDEX-356" /></a>
<a name="INDEX-357" /></a>
interface. This means you have to change little of your existing code
to request validation, set the namespace separator, and handle other
feature and property requests. The methods used for these purposes
are outlined in <a href="ch04_01.htm">Table 4-1</a>.
</p>

<a name="javaxml2-CHP-4-TABLE-1" /></a><h4 class="objtitle">Table 4-1. Property and feature methods </h4><table border="1">





<tr>
<th>
<p>Method</p>
</th>
<th>
<p>Returns</p>
</th>
<th>
<p>Parameters</p>
</th>
<th>
<p>Syntax</p>
</th>
</tr>


<tr>
<td>
<p><tt class="literal">setProperty( )</tt><a name="INDEX-358" /></a>
</p>
</td>
<td>
<p><tt class="literal">void</tt></p>
</td>
<td>
<p><tt class="literal">String propertyID</tt>, <tt class="literal">Object value</tt></p>
</td>
<td>
<p><tt class="literal">parser.setProperty("[Property URI]",
propertyValue);</tt>
</p>
</td>
</tr>
<tr>
<td>
<p><tt class="literal">setFeature( )</tt><a name="INDEX-359" /></a>
</p>
</td>
<td>
<p><tt class="literal">void</tt></p>
</td>
<td>
<p><tt class="literal">String featureID</tt>, <tt class="literal">boolean state</tt></p>
</td>
<td>
<p><tt class="literal">parser.setFeature("[Feature URI]", featureState);</tt></p>
</td>
</tr>
<tr>
<td>
<p><tt class="literal">getProperty( )</tt><a name="INDEX-360" /></a>
</p>
</td>
<td>
<p><tt class="literal">Object</tt></p>
</td>
<td>
<p><tt class="literal">String propertyID</tt></p>
</td>
<td>
<p><tt class="literal">Object propertyValue = parser.getProperty("[Property
URI]");</tt>
</p>
</td>
</tr>
<tr>
<td>
<p><tt class="literal">getFeature( )</tt><a name="INDEX-361" /></a>
</p>
</td>
<td>
<p><tt class="literal">boolean</tt></p>
</td>
<td>
<p><tt class="literal">String featureID</tt></p>
</td>
<td>
<p><tt class="literal">boolean featureState = parser.getFeature("[Feature
URI]");</tt>
</p>
</td>
</tr>

</table><p>

<p>For these methods, the ID of a specific <a name="INDEX-362" /></a>property or feature is a
<a name="INDEX-363" /></a> <a name="INDEX-364" /></a>URI. The core set of features and
properties is listed in <a href="appb_01.htm">Appendix B, "SAX 2.0 Features and Properties"</a>. Additional
documentation on features and properties supported by your
vendor's XML parser should also be available. These URIs are
similar to namespace URIs; they are only used as
<em class="emphasis">associations</em><a name="INDEX-365" /></a>
for particular features. Good parsers ensure that you do not need
network access to resolve these features; think of them as simple
constants that happen to be in URI form. These methods are simply
invoked and the URI is dereferenced locally, often to constantly
represent what action in the parser needs to be taken.
</p>
<blockquote><b>WARNING:</b> 

Don't type these property and feature URIs into a browser to "check for their existence." Often, this results in a <em class="emphasis">404 Not Found</em> error. I've had many browsers report this to me, insisting that the URIs are invalid. However, this is not the case; the URI is just an identifier, and as I pointed out, usually resolved locally. Trust me: just use the URI, and trust the parser to do the right thing.
<p></p>
</blockquote>
<p>In the parser configuration context, a
<em class="filename">property</em><a name="INDEX-366" /></a>
requires some object value to be usable. For example, for lexical
handling, a DOM <tt class="literal">Node</tt> implementation would be
supplied as the value for the appropriate property. In contrast, a
<em class="filename">feature</em><a name="INDEX-367" /></a>
is a flag used by the parser to indicate whether a certain type of
processing should occur. Common features are validation, namespace
support, and including external parameter entities.
</p>

<p>The most convenient aspect of these methods is that they allow simple
addition and modification of features. Although new or updated
features will require a parser implementation to add supporting code,
the method by which features and properties are accessed remains
standard and simple; only a new URI need be defined. Regardless of
the complexity (or obscurity) of new XML-related ideas, this robust
set of four methods should be sufficient to allow parsers to
implement the new ideas.
</p>

</div>
<a name="javaxml2-CHP-4-SECT-1.2" /></a><div class="sect2">
<h3 class="sect2">4.1.2. SAX Properties and Features</h3>

<p>More often than not, the features and properties you deal with are
the standard SAX-defined ones. These are features and properties that
should be available with any SAX distribution, and that any
SAX-compliant parser should support. Additionally, this preserves
vendor-independence in your code, so I recommend that you use
SAX-defined properties and features whenever possible.
</p>

<a name="javaxml2-CHP-4-SECT-1.2.1" /></a><div class="sect3">
<h3 class="sect3">4.1.2.1. Validation</h3>

<p>The most common
<a name="INDEX-368" /></a>feature
you'll use is the
<a name="INDEX-369" /></a>validation
feature. The URI for this guy is <a href="../../../../../../xml.org/sax/features/validation">http://xml.org/sax/features/validation</a>, and
not surprisingly, it turns validation on or off in the parser. For
example, if you want to turn on validation in the parsing example
from the last chapter (remember the Swing viewer?), make this change
in the <em class="emphasis">SAXTreeViewer.java</em> source
file:
</p>

<blockquote><pre class="code">    public void buildTree(DefaultTreeModel treeModel, 
                          DefaultMutableTreeNode base, String xmlURI) 
        throws IOException, SAXException {

        // Create instances needed for parsing
        XMLReader reader = 
            XMLReaderFactory.createXMLReader(vendorParserClass);
        ContentHandler jTreeContentHandler = 
            new JTreeContentHandler(treeModel, base);
        ErrorHandler jTreeErrorHandler = new JTreeErrorHandler( );

        // Register content handler
        reader.setContentHandler(jTreeContentHandler);

        // Register error handler
        reader.setErrorHandler(jTreeErrorHandler);
 
        <tt class="userinput"><b>// Request validation
        reader.setFeature("http://xml.org/sax/features/validation", true);</b></tt>

        // Parse
        InputSource inputSource = 
            new InputSource(xmlURI);
        reader.parse(inputSource);
    }</pre></blockquote>

<p>Compile these changes, and run the example program. Nothing happens,
right? Not surprising; the XML we've looked at so far is all
valid with respect to the DTD supplied. However, it's easy
enough to fix that. Make the following change to your XML file
(notice that the element in the <tt class="literal">DOCTYPE</tt>
declaration no longer matches the actual root element, since XML is
case-sensitive):
</p>

<blockquote><pre class="code">&lt;?xml version="1.0"?&gt;
<tt class="userinput"><b>&lt;!DOCTYPE Book SYSTEM "DTD/JavaXML.dtd"&gt;</b></tt>

&lt;!-- Java and XML Contents --&gt;
&lt;book xmlns="http://www.oreilly.com/javaxml2"
      xmlns:ora="http://www.oreilly.com"
&gt;</pre></blockquote>

<p>Now run your program on this modified document. Because validation is
turned on, you should get an ugly stack trace reporting the error. Of
course, because that's all that our error handler methods do,
this is precisely what we want:
</p>

<blockquote><pre class="code">C:\javaxml2\build&gt;java javaxml2.SAXTreeViewer 
    c:\javaxml2\ch04\xml\contents.xml
**Parsing Error**
  Line:    7
  URI:     file:///c:/javaxml2/ch04/xml/contents.xml
  Message: Document root element "book", must match DOCTYPE root "Book".
org.xml.sax.SAXException: Error encountered
        at javaxml2.JTreeErrorHandler.error(SAXTreeViewer.java:445)
<tt class="userinput"><b>[Nasty Stack Trace to Follow...]</b></tt></pre></blockquote>
<p>Remember, turning validation on or off does not affect DTD
processing; I talked about this in the last chapter, and wanted to
remind you of this subtle fact. To get a better sense of this, turn
off validation (comment out the feature setting, or supply it the
"false" value), and run the program on the modified XML.
Even though the DTD is processed, as seen by the resolved
<tt class="literal">OReillyCopyright</tt> entity reference, no errors occur. That's the
difference between <em class="emphasis">processing</em> a
<a name="INDEX-370" /></a> <a name="INDEX-371" /></a>DTD and
<em class="emphasis">validating</em> an XML document against that DTD.
Memorize, understand, and recite this to yourself; it will save you
hours of confusion in the long run.
</p>

</div>

<a name="javaxml2-CHP-4-SECT-1.2.2" /></a><div class="sect3">
<h3 class="sect3">4.1.2.2. Namespaces</h3>

<p>Next to validation, you'll most commonly deal with
<a name="INDEX-372" /></a>namespaces. There
are two features related to namespaces: one that turns namespace
processing on or off, and one that indicates whether namespace
prefixes should be reported as attributes. The two are essentially
tied together, and you should always "toggle" both, as
shown in <a href="ch04_01.htm">Table 4-2</a>.
</p>

<a name="javaxml2-CHP-4-TABLE-2" /></a><h4 class="objtitle">Table 4-2. Toggle values for namespace-related features </h4><table border="1">



<tr>
<th>
<p>Value for namespace processing</p>
</th>
<th>
<p>Value for namespace prefix reporting</p>
</th>
</tr>


<tr>
<td>
<p>True</p>
</td>
<td>
<p>False</p>
</td>
</tr>
<tr>
<td>
<p>False</p>
</td>
<td>
<p>True</p>
</td>
</tr>

</table><p>

<p>This should make sense: if namespace processing is on, the
xmlns-style declarations on elements should not be exposed to your
application as attributes, as they are only useful for namespace
handling. However, if you do not want namespace processing to occur
(or want to handle it on your own), you will want these xmlns
declarations reported as attributes so you can use them just as you
would use other attributes. However, if these two fall out of sync
(both are true, or both are false), you can end up with quite a mess!
</p>

<p>Consider writing a small utility method to ensure these two features
stay in sync with each other. I
<a name="INDEX-373" /></a>often use the method shown here for this
purpose:
</p>
<blockquote><pre class="code">
private void setNamespaceProcessing(XMLReader reader, boolean state) 
    throws SAXNotSupportedException, SAXNotRecognizedException {

    reader.setFeature(
        "http://xml.org/sax/features/namespaces", state);
    reader.setFeature(
        "http://xml.org/sax/features/namespace-prefixes", !state);
}</pre></blockquote>

<p>This maintains the correct setting for both features, and you can now
simply call this method instead of two <tt class="literal">setFeature(
)</tt><a name="INDEX-374" /></a>
invocations in your own code. Personally, I've used this
feature less than ten times in about two years; the default values
(processing namespaces as well as not reporting prefixes as
attributes) almost always work for me. Unless you are writing
low-level applications that either don't need namespaces or can
use the speed increase obtained from not processing namespaces, or
you need to handle namespaces on your own, I wouldn't worry too
much about either of these features.
</p>

<p>This code brings up a rather important aspect of features and
properties, though: invoking the feature and property methods can
result in
<tt class="literal">SAXNotSupportedException</tt><a name="INDEX-375" /></a>s and
<tt class="literal">SAXNotRecognizedException</tt><a name="INDEX-376" /></a>s.
These are both in the <tt class="literal">org.xml.sax</tt>
<a name="INDEX-377" /></a>
<a name="INDEX-378" /></a>package,
and need to be imported in any SAX code that uses them. The first
indicates that the parser knows about the feature or property but
doesn't support it. You won't run into this much in even
average quality parsers, but it is commonly used when a standard
property or feature is not yet coded in. So invoking
<tt class="literal">setFeature( )</tt> on the namespace processing feature
on a parser in development might result in a
<tt class="literal">SAXNotSupportedException</tt>. The parser recognizes
the feature, but doesn't have the ability to perform the
requested processing. The second exception most commonly occurs when
using vendor-specific features and properties (covered in the next
section), and then switching parser implementations. The new
implementation won't know anything about the other
vendor's features or properties, and will throw a
<tt class="literal">SAXNotRecognizedException</tt>.
</p>

<p><a name="INDEX-379" /></a>You
should always explicitly catch these exceptions so you can deal with
them. Otherwise, you end up losing valuable information about what
happened in your code. For example, let me show you a modified
version of the code from the last chapter that tries to set up
various features, and how that changes the exception-handling
architecture:
</p>

<blockquote><pre class="code">    public void buildTree(DefaultTreeModel treeModel, 
                          DefaultMutableTreeNode base, String xmlURI) 
        throws IOException, SAXException {
            
        <tt class="userinput"><b>String featureURI = "";

        try {</b></tt>
            // Create instances needed for parsing
            XMLReader reader = 
                XMLReaderFactory.createXMLReader(vendorParserClass);
            ContentHandler jTreeContentHandler = 
                new JTreeContentHandler(treeModel, base);
            ErrorHandler jTreeErrorHandler = new JTreeErrorHandler( );

            // Register content handler
            reader.setContentHandler(jTreeContentHandler);

            // Register error handler
            reader.setErrorHandler(jTreeErrorHandler);
            
            <tt class="userinput"><b>/** Deal with features **/
            featureURI = "http://xml.org/sax/features/validation";

            // Request validation
            reader.setFeature(featureURI, true);
            
            // Namespace processing - on
            featureURI = "http://xml.org/sax/features/namespaces";
            setNamespaceProcessing(reader, true);
            
            // Turn on String interning
            featureURI = "http://xml.org/sax/features/string-interning";
            reader.setFeature(featureURI, true);
            
            // Turn off schema processing
            featureURI = 
                "http://apache.org/xml/features/validation/schema";
            reader.setFeature(featureURI, false);</b></tt>

            // Parse
            InputSource inputSource = 
                new InputSource(xmlURI);
            reader.parse(inputSource);
        <tt class="userinput"><b>} catch (SAXNotRecognizedException e) {
            System.out.println("The parser class " + vendorParserClass +
                " does not recognize the feature URI " + featureURI);
            System.exit(0);
        } catch (SAXNotSupportedException e) {
            System.out.println("The parser class " + vendorParserClass +
                " does not support the feature URI " + featureURI);
            System.exit(0);                
        }</b></tt>
    }</pre></blockquote>

<p>By dealing with these exceptions as well as other special cases, you
give the user better information and improve the quality of your
code.
</p>

</div>

<a name="javaxml2-CHP-4-SECT-1.2.3" /></a><div class="sect3">
<h3 class="sect3">4.1.2.3. Interning and entities</h3>

<p><a name="INDEX-380" /></a>
<a name="INDEX-381" /></a>The three
remaining SAX-defined features are fairly obscure. The first,
<a href="../../../../../../xml.org/sax/features/string-interning">http://xml.org/sax/features/string-interning</a>,
turns string interning on or off. By default this is false (off) in
most parsers. Setting it to true means that every element name,
attribute name, namespace URI and prefix, and other strings have
<tt class="literal">java.lang.String.intern(</tt>) invoked on them.
I'm not going to get into great detail about interning here; if
you don't know what it is, check out Sun's
<a name="INDEX-382" /></a> <a name="INDEX-383" /></a>Javadoc on the method at
<a href="../../../../../../java.sun.com/j2se/1.3/docs/api/index.html">http://java.sun.com/j2se/1.3/docs/api/index.html</a>.
In a nutshell, every time a string is encountered, Java attempts to
return an existing reference for the string in the current string
pool, instead of (possibly) creating a new <tt class="literal">String</tt>
object. Sounds like a good thing, right? Well, the reason it's
off by default is most parsers have their own optimizations in place
that can outperform string interning. My advice is to leave this
setting alone; many people have spent weeks tuning things like this
so you don't have to mess with them.
</p>

<p><a name="INDEX-384" /></a>The other
two
<a name="INDEX-385" /></a>
<a name="INDEX-386" /></a>
<a name="INDEX-387" /></a>
<a name="INDEX-388" /></a>features
determine whether textual entities are expanded and resolved
(<a href="../../../../../../xml.org/sax/features/external-general-entities">http://xml.org/sax/features/external-general-entities</a>),
and whether parameter entities are included (<a href="../../../../../../xml.org/sax/features/external-parameter-entities">http://xml.org/sax/features/external-parameter-entities</a>)
when parsing occurs. These are set to true for most parsers, as they
deal with all the entities that XML has to offer. Again, I recommend
you leave these settings as is, unless you have a specific reason for
disabling entity handling.
</p>

</div>

<a name="javaxml2-CHP-4-SECT-1.2.4" /></a><div class="sect3">
<h3 class="sect3">4.1.2.4. DOM nodes and literal strings</h3>

<p><a name="INDEX-389" /></a>
<a name="INDEX-390" /></a> <a name="INDEX-391" /></a> <a name="INDEX-392" /></a> <a name="INDEX-393" /></a>The two standard SAX properties are a
little less clear in their usage. In both cases, the properties are
more useful for <em class="emphasis">obtaining</em> values, whereas with
features the common use is to <em class="emphasis">set</em> values.
Additionally, both properties are more helpful in error handling than
in any general usage. And finally, both properties provide access to
what is being parsed at a given time. The first, identified by the
URI <a href="../../../../../../xml.org/sax/properties/dom-node">http://xml.org/sax/properties/dom-node</a>,
returns the current DOM node being processed, or the root DOM node if
parsing isn't occurring. Of course, I haven't really
talked about DOM yet, but this will make more sense in the next two
chapters. The second property, identified by the URI <a href="../../../../../../xml.org/sax/properties/xml-string">http://xml.org/sax/properties/xml-string</a>,
returns the literal string of characters being processed.
You'll find varying support for these properties in various
parsers, showing that many parser implementers find these properties
of arguable use as well. For example, Xerces does not support the
<tt class="literal">xml-string</tt> property, to avoid having to buffer the
input document (at least in that specific way). On the other hand, it
does support the <tt class="literal">dom-node</tt> property so that you can
turn a SAX parser into (essentially) a DOM tree iterator.
</p>

</div>
</div>
<a name="javaxml2-CHP-4-SECT-1.3" /></a><div class="sect2">
<h3 class="sect2">4.1.3. Proprietary Properties and Features</h3>

<p><a name="INDEX-394" /></a>
<a name="INDEX-395" /></a> <a name="INDEX-396" /></a>In addition to the
standard, SAX-defined features and properties, most parsers define
several features and properties of their own. For example, Apache
Xerces has a page of features it supports at <a href="../../../../../../xml.apache.org/xerces-j/properties.html">http://xml.apache.org/xerces-j/properties.html</a>,and properties it supports at <a href="../../../../../../xml.apache.org/xerces-j/properties.html">http://xml.apache.org/xerces-j/properties.html</a>.
I'm not going to cover these in great detail, and you should
steer clear of them whenever possible; it locks your code into a
specific vendor. However, there are times when using a vendor's
specific functionality will save you some work. In those cases,
exercise caution, but don't be foolish; use what your parser
gives you!
</p>

<p>As an example, take the Xerces feature that enables and disables XML
schema processing: <a href="../../../../../../apache.org/xml/features/validation/schema">http://apache.org/xml/features/validation/schema</a>.
Because there is no standard support for XML schemas across parsers
or in SAX, use this specific feature (it's set to true by
default) to avoid spending parsing time to deal with any referenced
XML schemas in your documents, for example. You save time in
production if you don't use this processing, and it needs a
vendor-specific feature. Check out your vendor documentation for
options available in addition to SAX's.
</p>

</div>
</div>












<hr width="684" align="left" />
<div class="navbar"><table width="684" border="0"><tr><td align="left" valign="top" width="228"><a href="ch03_06.htm"><img alt="Previous" border="0" src="../gifs/txtpreva.gif" /></a></td><td align="center" valign="top" width="228"><a href="index.htm"><img alt="Home" border="0" src="../gifs/txthome.gif" /></a></td><td align="right" valign="top" width="228"><a href="ch04_02.htm"><img alt="Next" border="0" src="../gifs/txtnexta.gif" /></a></td></tr><tr><td align="left" valign="top" width="228">3.6. What's Next?</td><td align="center" valign="top" width="228"><a href="index/index.htm"><img alt="Book Index" border="0" src="../gifs/index.gif" /></a></td><td align="right" valign="top" width="228">4.2. More Handlers</td></tr></table></div>
<hr width="684" align="left" />

<img alt="Library Navigation Links" border="0" src="../gifs/navbar.gif" usemap="#library-map" />
<p><p><font size="-1"><a href="copyrght.htm">Copyright &copy; 2002</a> O'Reilly &amp; Associates. All rights reserved.</font></p>

<map name="library-map">
<area shape="rect" coords="0,0,85,93" href="../index.htm"><area shape="rect" coords="85,0,180,98" href="../sax2/index.htm"><area shape="rect" coords="182,-1,261,100" href="../xmlnut/index.htm"><area shape="rect" coords="263,1,384,96" href="index.htm"><area shape="rect" coords="386,1,463,100" href="../jxslt/index.htm"><area shape="rect" coords="466,1,533,112" href="../xslt/index.htm"><area shape="rect" coords="535,-1,610,108" href="../schema/index.htm"><area shape="rect" coords="613,1,696,121" href="../pxml/index.htm">
      </map>

</body></html>
