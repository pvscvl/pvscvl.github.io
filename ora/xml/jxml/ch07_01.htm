<html><head><title>JDOM (Java &amp; XML, 2nd Edition)</title><link rel="stylesheet" type="text/css" href="../style/style1.css" />

<meta name="DC.Creator" content="Brett McLaughlin" /><meta name="DC.Format" content="text/xml" scheme="MIME" /><meta name="DC.Language" content="en-US" /><meta name="DC.Publisher" content="O'Reilly &amp; Associates, Inc." /><meta name="DC.Source" scheme="ISBN" content="059600197L" /><meta name="DC.Subject.Keyword" content="stuff" /><meta name="DC.Title" content="Java &amp; XML, 2nd Edition" /><meta name="DC.Type" content="Text.Monograph" />

</head><body bgcolor="#ffffff">

<img alt="Book Home" border="0" src="gifs/smbanner.gif" usemap="#banner-map" /><map name="banner-map"><area shape="rect" coords="1,-2,616,66" href="index.htm" alt="Java and XML, 2nd Edition" /><area shape="rect" coords="629,-11,726,25" href="jobjects/fsearch.htm" alt="Search this book" /></map>

<div class="navbar"><table width="684" border="0"><tr><td align="left" valign="top" width="228"><a href="ch06_06.htm"><img alt="Previous" border="0" src="../gifs/txtpreva.gif" /></a></td><td align="center" valign="top" width="228"></td><td align="right" valign="top" width="228"><a href="ch07_02.htm"><img alt="Next" border="0" src="../gifs/txtnexta.gif" /></a></td></tr></table></div>




<h1 class="chapter">Chapter 7. JDOM</h1>
<div class="htmltoc"><h4 class="tochead">Contents:</h4>
  <p> <a href="#javaxml2-CHP-7-SECT-1">The Basics</a><br />
<a href="ch07_02.htm">PropsToXML</a><br />
<a href="ch07_03.htm">XMLProperties</a><br />
<a href="ch07_04.htm">Is JDOM a Standard?</a><br />
<a href="ch07_05.htm">Gotcha!</a><br />
<a href="ch07_06.htm">What's Next?</a><br /></p></div>

<p><a name="INDEX-643" /></a>JDOM provides a means of accessing an XML
document within Java through a tree structure, and in that respect is
somewhat similar to the DOM. However, it was built specifically for
Java (remember the discussion on language bindings for the DOM?), so
is in many ways more intuitive to a Java developer than DOM.
I'll describe these aspects of JDOM throughout the chapter, as
well as talk about specific cases to use SAX, DOM, or JDOM. And for
the complete set of details on JDOM, you should check out the web
site at <a href="../../../../../../www.jdom.org/">http://www.jdom.org</a>.
</p>

<p>Additionally, and importantly, JDOM is an open source API. And
because the API is still finalizing on a 1.0 version, it also remains
flexible.<a href="#FOOTNOTE-7">[7]</a> You have the ability to
suggest and implement changes yourself. If you find that you like
JDOM, except for one little annoying thing, you can help us
investigate solutions to your problem. In this chapter, I'll
cover JDOM's current status, particularly with regard to
standardization, and the basics on using the API, and I'll give
you some working examples.
</p><blockquote class="footnote"> <a name="FOOTNOTE-7" /></a><p>[7]Because JDOM 1.0 is not final, some things
may change between the publication of this book and your download.
I'll try and keep a running list of changes on the JDOM web
site (<a href="../../../../../../www.jdom.org/">http://www.jdom.org</a>) and
work with O'Reilly to get these changes and updates available
as quickly as possible.</p> </blockquote>

<a name="javaxml2-CHP-7-SIDEBAR-1" /></a><blockquote><table border="1" cellpadding="6"><tr><td>
<h4 class="objtitle">Full Disclosure</h4>

<p>In the interests of full disclosure, I should say that I am one of
the co-creators of JDOM; my partner in crime on this particular
endeavor is Jason Hunter, the noted author of <em class="emphasis">Java Servlet Programming</em> (O'Reilly).
Jason and I had some issues with DOM, and during a long discussion at
the 2000 O'Reilly Enterprise Java Conference, came up with
JDOM. I also owe a great deal of credit to James Davidson (Sun
Microsystems, servlet 2.2 specification lead, Ant author, etc.) and
Pier Fumagalli (Apache/Jakarta/Cocoon superhero). Plus, the hundreds
of good friends on the JDOM mailing lists.
</p>

<p>All that to say that I'm partial to JDOM. So, if you sense some
favoritism creeping through this chapter, I apologize; I use SAX,
DOM, and JDOM often, but I happen to like one more than the others,
because in my personal development, it has helped me out. Anyway,
consider yourself forewarned!
</p>
</td></tr></table><p></blockquote>

<div class="sect1"><a name="javaxml2-CHP-7-SECT-1" /></a>
<h2 class="sect1">7.1. The Basics</h2>

<p><a href="ch05_01.htm">Chapter 5, "DOM"</a> and <a href="ch06_01.htm">Chapter 6, "Advanced DOM"</a> should have given you a pretty good
understanding of dealing with XML tree representations. So when I say
that <a name="INDEX-644" /></a>JDOM
also provides a tree-based representation of an XML document, that
gives you a starting point for understanding how JDOM behaves. To
help you see how the classes in JDOM match up to XML structures, take
a look at <a href="ch07_01.htm">Figure 7-1</a>, which shows a UML model of
JDOM's core classes.
</p>

<a name="javaxml2-CHP-7-FIG-1" /></a><div class="figure"><img height="342" alt="Figure 7-1" src="figs/javax_0701.gif" width="274" /></div><h4 class="objtitle">Figure 7-1. UML model of core JDOM classes</h4>

<p><a name="INDEX-645" /></a>
<a name="INDEX-646" /></a>As you can see, the names of the classes
tell the story. At the core of the JDOM structure is the
<tt class="literal">Document</tt> object; it is both the representation of
an XML document, and a container for all the other JDOM structures.
<tt class="literal">Element</tt> represents an XML element,
<tt class="literal">Attribute</tt> an attribute, and so on down the line.
If you've immersed yourself in DOM, though, you might think
there are some things missing from JDOM. For example, where's
the <tt class="literal">Text</tt> class? As you recall, DOM follows a very
strict tree model, and element content is actually considered a child
node (or nodes) of an element node itself. In JDOM, this was seen as
inconvenient in many cases, and the API provides <tt class="literal">getText(
)</tt> methods on the <tt class="literal">Element</tt> class. This
allows the content of an element to be obtained from the element
itself, and therefore there is no <tt class="literal">Text</tt> class. This
was felt to provide a more intuitive approach for Java developers
unfamiliar with XML, DOM, or some of the vagaries of trees.
</p>

<a name="javaxml2-CHP-7-SECT-1.1" /></a><div class="sect2">
<h3 class="sect2">7.1.1. Java Collections Support</h3>

<p><a name="INDEX-647" /></a>Another important item to take note of
is that you don't see any list classes like SAX's
<tt class="literal">Attributes</tt> class or DOM's
<tt class="literal">NodeList</tt> and <tt class="literal">NamedNodeMap</tt>
classes. This is a nod to Java developers; it was felt that using
Java Collections (<tt class="literal">java.util.List</tt>,
<tt class="literal">java.util.Map</tt>, etc.) would provide a familiar and
simple API for XML usage. DOM must serve across languages (remember
Java language bindings in <a href="ch05_01.htm">Chapter 5, "DOM"</a>?), and
can't take advantage of language-specific things like Java
Collections. For example, when invoking the <tt class="literal">getAttributes(
)</tt> method on the <tt class="literal">Element</tt> class, you get
back a <tt class="literal">List</tt>; you can of course operate upon this
<tt class="literal">List</tt> just as you would any other Java
<tt class="literal">List</tt>, without looking up new methods or syntax.
</p>

</div>
<a name="javaxml2-CHP-7-SECT-1.2" /></a><div class="sect2">
<h3 class="sect2">7.1.2. Concrete Classes and Factories</h3>

<p>Another basic tenet of JDOM that is different from DOM, and not so
visible, is that JDOM is an API of concrete classes. In other words,
<tt class="literal">Element</tt>, <tt class="literal">Attribute</tt>,
<tt class="literal">ProcessingInstruction</tt>, <tt class="literal">Comment</tt>,
and the rest are all classes that can be directly instantiated using
the <tt class="literal">new</tt> keyword. The advantage here is that
factories are not needed, as factories can oftentimes be intrusive
into code. Creating a new JDOM document would be done like this:
</p>

<blockquote><pre class="code">Element rootElement = new Element("root");
Document document = new Document(rootElement);</pre></blockquote>

<p>That simple. On the other hand, not using factories can also be seen
as a disadvantage. While you can subclass JDOM classes, you would
have to explicitly use those subclasses in your code:
</p>

<blockquote><pre class="code">element.addContent(new FooterElement("Copyright 2001"));</pre></blockquote>

<p>Here, <tt class="literal">FooterElement</tt> is a subclass of
<tt class="literal">org.jdom.Element</tt>, and does some custom processing
(it could, for example, build up several elements that display a page
footer). Because it subclasses <tt class="literal">Element</tt>, it can be
added to the element variable through the normal means, the
<tt class="literal">addContent( )</tt> method. However, there is no means
to define an element subclass and specify that it should always be
used for element instantiation, like this:
</p>

<blockquote><pre class="code">// This code does not work!!
JDOMFactory factory = new JDOMFactory( );
factory.setDocumentClass("javaxml2.BrettsDocumentClass");
factory.setElementClass("javaxml2.BrettsElementClass");

Element rootElement = JDOMFactory.createElement("root");
Document document = JDOMFactory.createDocument(rootElement);</pre></blockquote>

<p>The idea is that once the factory has been created, specific
subclasses of JDOM structures can be specified as the class to use
for those structures. Then, every time (for example) an
<tt class="literal">Element</tt> is created through the factory, the
<tt class="literal">javaxml2.BrettsElementClass</tt> is used instead of the
default <tt class="literal">org.jdom.Element</tt> class.
</p>

<p>Support for this as an option is growing, if not as a standard means
of working with JDOM. That means that in the open source world,
it's possible this functionality might be in place by the time
you read this, or by the time JDOM is finalized in a 1.0 form. Stay
tuned to <a href="../../../../../../www.jdom.org/">http://www.jdom.org</a> for
the latest on these developments.
</p>

</div>
<a name="javaxml2-CHP-7-SECT-1.3" /></a><div class="sect2">
<h3 class="sect2">7.1.3. Input and Output</h3>

<p><a name="INDEX-648" /></a>A final important aspect of JDOM is its
input and output model. First, you should realize that JDOM is not a
parser; it is an XML document representation in Java. In other words,
like DOM and SAX, it is simply a set of classes that can be used to
manipulate the data that a parser provides. As a result, JDOM must
rely on a parser for reading raw XML.<a href="#FOOTNOTE-8">[8]</a> It can also
accept SAX events or a DOM tree as input, as well as JDBC
<tt class="literal">ResultSet</tt> instances and more. To facilitate this,
JDOM provides a
<a name="INDEX-649" /></a>package
specifically for input, <tt class="literal">org.jdom.input</tt>. This
package provides
<em class="filename">builder</em><a name="INDEX-650" /></a>
<a name="INDEX-651" /></a>
classes; the two you'll use most often are
<tt class="literal">SAXBuilder</tt><a name="INDEX-652" /></a>
<a name="INDEX-653" /></a>
and <tt class="literal">DOMBuilder</tt><a name="INDEX-654" /></a>
<a name="INDEX-655" /></a>.
These build the core JDOM structure, a JDOM
<tt class="literal">Document</tt>, from a set of SAX events or a DOM tree.
As JDOM standardizes (see <a href="ch07_04.htm">Section 7.4, "Is JDOM a Standard?"</a> at the end of this chapter), it's
also expected that direct support for JDOM will materialize in parser
efforts like Apache Xerces and Sun's Crimson.
</p><blockquote class="footnote"> <a name="FOOTNOTE-8" /></a><p>[8]By default,
this parser is Xerces, which is included with JDOM. However, you can
use any other XML parser with JDOM.</p> </blockquote>

<p>For dealing with input streams, files or documents on disk, or
building from existing XML not in a DOM tree,
<tt class="literal">SAXBuilder</tt> is the best solution. It's fast
and efficient, just like SAX. Using the builder is a piece of cake:
</p>

<blockquote><pre class="code">SAXBuilder builder = new SAXBuilder( );
Document doc = builder.build(new FileInputStream("contents.xml"));</pre></blockquote>

<p>I'll detail this further in the code in the chapter, but you
can see that it doesn't take much to get access to XML. If you
already have your document in a DOM structure, you'll want to
use <tt class="literal">DOMBuilder</tt>, which performs a fast conversion
from one API to the other:
</p>

<blockquote><pre class="code">DOMBuilder builder = new DOMBuilder( );
Document doc = builder.build(myDomDocumentObject);</pre></blockquote>

<p>It's fairly self-explanatory. This essentially converts from an
<tt class="literal">org.w3c.dom.Document</tt> to an
<tt class="literal">org.jdom.Document</tt>. The process of converting from
a JDOM document back to one of these structures is essentially the
same, in reverse; the <tt class="literal">org.jdom.output</tt>
<a name="INDEX-656" /></a>package
is used for these tasks. To move from JDOM structures to DOM ones,
<tt class="literal">DOMOutputter</tt><a name="INDEX-657" /></a>
is used:
</p>

<blockquote><pre class="code">DOMOutputter outputter = new DOMOutputter( );
org.w3c.dom.Document domDoc = outputter.output(myJDOMDocumentObject);</pre></blockquote>

<p>Taking a JDOM <tt class="literal">Document</tt> and firing off
<a name="INDEX-658" /></a>SAX events
works in the same way:
</p>

<blockquote><pre class="code">SAXOutputter outputter = new SAXOutputter( );
outputter.setContentHandler(myContentHandler);
outputter.setErrorHandler(myErrorHandler);
outputter.output(myJDOMDocumentObject);</pre></blockquote>

<p>This works just like dealing with normal SAX events, where you
register content handlers, error handlers, and the rest, and then
fire events to those handlers from the JDOM
<tt class="literal">Document</tt> object supplied to the <tt class="literal">output(
)</tt> method.
</p>

<p>The final outputter, and the one you'll probably work with more
than any other, is
<tt class="literal">org.jdom.output.XMLOutputter</tt><a name="INDEX-659" /></a>.
This outputs XML to a stream or writer, which wraps a network
connection, a file, or any other structure you want to push XML to.
This also is effectively a production-ready version of the
<tt class="literal">DOMSerializer</tt> class from <a href="ch05_01.htm">Chapter 5, "DOM"</a>, except of course it works with JDOM, not DOM.
Using the <tt class="literal">XMLOutputter</tt> works like this:
</p>

<blockquote><pre class="code">XMLOutputter outputter = new XMLOutputter( );
outputter.output(jdomDocumentObject, new FileOutputStream("results.xml"));</pre></blockquote>

<p>So there you have it; the input and output of JDOM all in a few
paragraphs. One last thing to note, as illustrated in <a href="ch07_01.htm">Figure 7-2</a>: it is very easy to "loop" things
because all the input and output of JDOM is actually part of the API.
In other words, you can use a file as input, work with it in JDOM,
output it to SAX, DOM, or a file, and then consume that as input,
restarting the loop. This is particularly helpful in messaging-based
applications, or in cases where JDOM is used as a component between
other XML supplying and consuming components.
</p>

<a name="javaxml2-CHP-7-FIG-2" /></a><div class="figure"><img height="175" alt="Figure 7-2" src="figs/javax_0702.gif" width="306" /></div><h4 class="objtitle">Figure 7-2. Input and output loops in JDOM</h4>

<p>This isn't a comprehensive look at JDOM, but it gives you
enough information to get started, and I'd rather show you
things within the context of working code anyway! So, let's
take a look at a utility program that can convert Java properties
files to XML.
</p>

</div>
</div>












<hr width="684" align="left" />
<div class="navbar"><table width="684" border="0"><tr><td align="left" valign="top" width="228"><a href="ch06_06.htm"><img alt="Previous" border="0" src="../gifs/txtpreva.gif" /></a></td><td align="center" valign="top" width="228"><a href="index.htm"><img alt="Home" border="0" src="../gifs/txthome.gif" /></a></td><td align="right" valign="top" width="228"><a href="ch07_02.htm"><img alt="Next" border="0" src="../gifs/txtnexta.gif" /></a></td></tr><tr><td align="left" valign="top" width="228">6.6. What's Next?</td><td align="center" valign="top" width="228"><a href="index/index.htm"><img alt="Book Index" border="0" src="../gifs/index.gif" /></a></td><td align="right" valign="top" width="228">7.2. PropsToXML</td></tr></table></div>
<hr width="684" align="left" />

<img alt="Library Navigation Links" border="0" src="../gifs/navbar.gif" usemap="#library-map" />
<p><p><font size="-1"><a href="copyrght.htm">Copyright &copy; 2002</a> O'Reilly &amp; Associates. All rights reserved.</font></p>

<map name="library-map">
<area shape="rect" coords="0,0,85,93" href="../index.htm"><area shape="rect" coords="85,0,180,98" href="../sax2/index.htm"><area shape="rect" coords="182,-1,261,100" href="../xmlnut/index.htm"><area shape="rect" coords="263,1,384,96" href="index.htm"><area shape="rect" coords="386,1,463,100" href="../jxslt/index.htm"><area shape="rect" coords="466,1,533,112" href="../xslt/index.htm"><area shape="rect" coords="535,-1,610,108" href="../schema/index.htm"><area shape="rect" coords="613,1,696,121" href="../pxml/index.htm">
      </map>

</body></html>