<html><head><title>DOM Level 2 (Java &amp; XML, 2nd Edition)</title><link rel="stylesheet" type="text/css" href="../style/style1.css" />

<meta name="DC.Creator" content="Brett McLaughlin" /><meta name="DC.Format" content="text/xml" scheme="MIME" /><meta name="DC.Language" content="en-US" /><meta name="DC.Publisher" content="O'Reilly &amp; Associates, Inc." /><meta name="DC.Source" scheme="ISBN" content="059600197L" /><meta name="DC.Subject.Keyword" content="stuff" /><meta name="DC.Title" content="Java &amp; XML, 2nd Edition" /><meta name="DC.Type" content="Text.Monograph" />

</head><body bgcolor="#ffffff">

<img alt="Book Home" border="0" src="gifs/smbanner.gif" usemap="#banner-map" /><map name="banner-map"><area shape="rect" coords="1,-2,616,66" href="index.htm" alt="Java and XML, 2nd Edition" /><area shape="rect" coords="629,-11,726,25" href="jobjects/fsearch.htm" alt="Search this book" /></map>

<div class="navbar"><table width="684" border="0"><tr><td align="left" valign="top" width="228"><a href="appa_01.htm"><img alt="Previous" border="0" src="../gifs/txtpreva.gif" /></a></td><td align="center" valign="top" width="228"></td><td align="right" valign="top" width="228"><a href="appa_03.htm"><img alt="Next" border="0" src="../gifs/txtnexta.gif" /></a></td></tr></table></div>



<h2 class="sect1">A.2. DOM Level 2</h2>

<p><a name="INDEX-1546" />DOM
provides a complete, in-memory representation of an XML document.
Developed by the W3C, DOM provides detail about the structure of a
document <em class="emphasis">after</em> it has been completely parsed.
While DOM Level 3 will specify an API for getting the DOM
<tt class="literal">Document</tt> object, there is currently nothing in DOM
that defines this behavior. Like SAX, most of the core DOM package is
made up of interfaces that define structures within an XML document,
and map those structures to the Java language (these same mappings
apply to CORBA, JavaScript, and other languages as well).
</p>

<a name="javaxml2-APP-A-SECT-2.1" /><div class="sect2">
<h3 class="sect2">A.2.1. Package: org.w3c.dom</h3>

<p><a name="INDEX-1547" />This
<a name="INDEX-1548" />package
contains the core interfaces and classes for DOM Level 2. Typically a
vendor's parsing software provides an implementation of those
interfaces that are implicitly used by your application software.
</p>

<a name="javaxml2-APP-A-SECT-2.1.1" /><div class="sect3">
<h3 class="sect3">A.2.1.1. Attr</h3>

<p><a name="INDEX-1549" />
<a name="INDEX-1550" />This
interface represents an XML attribute (on an element) within Java. It
provides access to the name and value of the attribute, and allows
the setting of the value (for mutability).<a href="#FOOTNOTE-29">[29]</a> The
<tt class="literal">getSpecified( )</tt> method indicates if the attribute
(and its value) was explicitly noted in the XML document, or if a
value was not specified but the document's DTD assigned a
default value to the attribute. Finally, the "owning"
element can be obtained from this interface.
</p><blockquote class="footnote"> <a name="FOOTNOTE-29" /><p>[29]In this
and other <tt class="literal">setXXX( )</tt> methods in DOM, a
<tt class="literal">DOMException</tt> results when a modification is
attempted on a node that is read-only.</p> </blockquote>

<blockquote><pre class="code">public interface Attr extends Node {
    public String getName( );
    public boolean getSpecified( );
    public String getValue( );
    public void setValue(String value) throws DOMException;
    public Element getOwnerElement( );
}</pre></blockquote>

</div>

<a name="javaxml2-APP-A-SECT-2.1.2" /><div class="sect3">
<h3 class="sect3">A.2.1.2. CDATASection</h3>

<p><a name="INDEX-1551" />
<a name="INDEX-1552" />This
interface does not define any methods of its own; instead it inherits
all of the <tt class="literal">Text</tt> interface's methods.
However, by having its own interface (and thus its own node type), a
distinction can be drawn between text within XML
<tt class="literal">CDATA</tt> sections and simple text (not in a
<tt class="literal">CDATA</tt> section) within an element.
</p>

<blockquote><pre class="code">public interface CDATASection extends Text {
}</pre></blockquote>

</div>

<a name="javaxml2-APP-A-SECT-2.1.3" /><div class="sect3">
<h3 class="sect3">A.2.1.3. CharacterData</h3>

<p><a name="INDEX-1553" />
<a name="INDEX-1554" />This
interface is the "super" interface for all textual
<tt class="literal">Node</tt> types in DOM (<tt class="literal">Text</tt>,
<tt class="literal">Comment</tt>, and indirectly
<tt class="literal">CDATASection</tt>). It defines methods for accessing
and setting the data within a textual node, as well as a set of
methods for dealing with the textual data directly as characters:
obtaining the length, appending, inserting, and deleting data, and
replacing all or part of the data. All of these methods throw
<tt class="literal">DOMException</tt>s when the node is read-only.
</p>

<blockquote><pre class="code">public interface CharacterData extends Node {
    public String getData( ) throws DOMException;
    public void setData(String data) throws DOMException;
    public int getLength( );
    public String substringData(int offset, int count)
        throws DOMException;
    public void appendData(String arg) throws DOMException;
    public void insertData(int offset, String arg) throws DOMException;
    public void deleteData(int offset, int count) throws DOMException;
    public void replaceData(int offset, int count, String arg)
        throws DOMException;
}</pre></blockquote>

</div>

<a name="javaxml2-APP-A-SECT-2.1.4" /><div class="sect3">
<h3 class="sect3">A.2.1.4. Comment</h3>

<p><a name="INDEX-1555" />
<a name="INDEX-1556" />This
interface provides a Java representation for an XML comment. Similar
to <tt class="literal">CDATASection</tt>, it adds no methods of its own but
does allow a distinction (based on the type of the interface) to
distinguish between text and comments in an XML document.
</p>

<blockquote><pre class="code">public interface Comment extends CharacterData {
}</pre></blockquote>

</div>

<a name="javaxml2-APP-A-SECT-2.1.5" /><div class="sect3">
<h3 class="sect3">A.2.1.5. Document</h3>

<p><a name="INDEX-1557" />
<a name="INDEX-1558" />This
interface is the DOM representation of a complete XML document. It is
also the key for creating new XML elements, attributes, PIs, and
other constructs. In addition to allowing retrieval of the DTD
declaration (<tt class="literal">getDocType( )</tt>) and root element
(<tt class="literal">getDocumentElement( )</tt>), this allows searching
through the tree in a pre-order fashion for a specific element
(<tt class="literal">getElementsByTagName( )</tt>). Because the DOM model
requires that all <tt class="literal">Node</tt> implementations be tied to
a DOM <tt class="literal">Document</tt> object, this provides methods for
creating the various types of DOM <tt class="literal">Node</tt>s. Each
<tt class="literal">createXXX( )</tt> method has a complement that supports
namespaces through <tt class="literal">createXXXNS( )</tt>. Additionally,
<tt class="literal">Node</tt>s can be imported into this
<tt class="literal">Document</tt> through <tt class="literal">importNode( )</tt>;
the <tt class="literal">boolean</tt> value indicates if the children of the
imported <tt class="literal">Node</tt> should be recursively imported as
well.
</p>

<blockquote><pre class="code">public interface Document extends Node {
    public DocumentType getDoctype( );
    public DOMImplementation getImplementation( );
    public Element getDocumentElement( );
    public Element createElement(String tagName) throws DOMException;
    public DocumentFragment createDocumentFragment( );
    public Text createTextNode(String data);
    public Comment createComment(String data);
    public CDATASection createCDATASection(String data)
        throws DOMException;
    public ProcessingInstruction 
        createProcessingInstruction(String target, String data)
        throws DOMException;
    public Attr createAttribute(String name) throws DOMException;
    public EntityReference createEntityReference(String name)
        throws DOMException;
    public NodeList getElementsByTagName(String tagname);
    public Node importNode(Node importedNode, boolean deep)
        throws DOMException;
    public Element createElementNS(String namespaceURI, 
                                   String qualifiedName)
        throws DOMException;
    public Attr createAttributeNS(String namespaceURI, 
                                  String qualifiedName)
        throws DOMException;
    public NodeList getElementsByTagNameNS(String namespaceURI, 
                                           String localName);
    public Element getElementById(String elementId);
}</pre></blockquote>

</div>

<a name="javaxml2-APP-A-SECT-2.1.6" /><div class="sect3">
<h3 class="sect3">A.2.1.6. DocumentFragment</h3>

<p><a name="INDEX-1559" />
<a name="INDEX-1560" />This
interface provides for dealing with only a portion of a complete
<tt class="literal">Document</tt> object at one time. It is useful for
manipulating portions of a DOM tree without having to store the
entire tree in memory.
</p>

<blockquote><pre class="code">public interface DocumentFragment extends Node {
}</pre></blockquote>

</div>

<a name="javaxml2-APP-A-SECT-2.1.7" /><div class="sect3">
<h3 class="sect3">A.2.1.7. DocumentType</h3>

<p><a name="INDEX-1561" />
<a name="INDEX-1562" />This
interface represents an XML document's
<tt class="literal">DOCTYPE</tt> declaration. The name is the element name
immediately following <tt class="literal">&lt;!DOCTYPE</tt>, and the system
ID and public ID of any referenced DTD are available as well.
Additionally, if any inline entities or notations are present, they
can be obtained through the appropriate <tt class="literal">getXXX( )</tt>
methods.
</p>

<blockquote><pre class="code">public interface DocumentType extends Node {
    public String getName( );
    public NamedNodeMap getEntities( );
    public NamedNodeMap getNotations( );
    public String getPublicId( );
    public String getSystemId( );
    public String getInternalSubset( );
}</pre></blockquote>

</div>

<a name="javaxml2-APP-A-SECT-2.1.8" /><div class="sect3">
<h3 class="sect3">A.2.1.8. DOMException</h3>

<p><a name="INDEX-1563" />
<a name="INDEX-1564" />This
class provides an <tt class="literal">Exception</tt> for DOM interfaces to
throw when problems occur. It also provides a set of error codes that
represent the various problems that occur using DOM and might result
in the <tt class="literal">Exception</tt> being thrown.
</p>

<blockquote><pre class="code">public class DOMException extends RuntimeException {
       public DOMException(short code, String message);

    // Exception codes
    public static final short INDEX_SIZE_ERR;
    public static final short DOMSTRING_SIZE_ERR;
    public static final short HIERARCHY_REQUEST_ERR;
    public static final short WRONG_DOCUMENT_ERR;
    public static final short INVALID_CHARACTER_ERR;
    public static final short NO_DATA_ALLOWED_ERR;
    public static final short NO_MODIFICATION_ALLOWED_ERR;
    public static final short NOT_FOUND_ERR;
    public static final short NOT_SUPPORTED_ERR;
    public static final short INUSE_ATTRIBUTE_ERR;
    public static final short INVALID_STATE_ERR; 
    public static final short SYNTAX_ERR; 
    public static final short INVALID_MODIFICATION_ERR; 
    public static final short NAMESPACE_ERR; 
    public static final short INVALID_ACCESS_ERR;
}</pre></blockquote>

</div>

<a name="javaxml2-APP-A-SECT-2.1.9" /><div class="sect3">
<h3 class="sect3">A.2.1.9. DOMImplementation</h3>

<p><a name="INDEX-1565" />
<a name="INDEX-1566" />This
interface attempts to provide a standard entry point for accessing
vendor- specific DOM implementations, and allowing the creation of a
<tt class="literal">DocumentType</tt> and <tt class="literal">Document</tt>
within those vendor implementations.<a href="#FOOTNOTE-30">[30]</a> It also
provides a method (<tt class="literal">hasFeature( )</tt>) for querying the
implementation for a specific feature support, like the DOM Level 2
Traversal or Range modules.
</p><blockquote class="footnote"> <a name="FOOTNOTE-30" /><p>[30]Unfortunately,
to obtain an instance of a <tt class="literal">DOMImplementation</tt>, you
must have a <tt class="literal">Document</tt> object and use
<tt class="literal">getDOMImplementation( )</tt>, or directly load the
vendor's classes. This tends to result in a chicken-and-egg
scenario; see <a href="ch05_01.htm">Chapter 5, "DOM"</a> and <a href="ch06_01.htm">Chapter 6, "Advanced DOM"</a> for more details.</p> </blockquote>

<blockquote><pre class="code">public interface DOMImplementation {
    public boolean hasFeature(String feature, String version);
    public DocumentType createDocumentType(String qualifiedName, 
                                           String publicId, 
                                           String systemId)
        throws DOMException;
    public Document createDocument(String namespaceURI, 
                                   String qualifiedName, 
                                   DocumentType doctype)
        throws DOMException;
}</pre></blockquote>

</div>

<a name="javaxml2-APP-A-SECT-2.1.10" /><div class="sect3">
<h3 class="sect3">A.2.1.10. Element</h3>

<p><a name="INDEX-1567" />
<a name="INDEX-1568" />This
interface provides a Java representation of an XML element. It
provides methods to get its name and attributes, as well as to set
these values. It also supplies several flavors of access to the XML
attributes, including namespace-aware versions of the
<tt class="literal">getXXX( )</tt> and <tt class="literal">setXXX( )</tt>
methods.
</p>

<blockquote><pre class="code">public interface Element extends Node {
    public String getTagName( );
    public String getAttribute(String name);
    public void setAttribute(String name, String value)
        throws DOMException;
    public void removeAttribute(String name) throws DOMException;
    public Attr getAttributeNode(String name);
    public Attr setAttributeNode(Attr newAttr) throws DOMException;
    public Attr removeAttributeNode(Attr oldAttr) throws DOMException;
    public NodeList getElementsByTagName(String name);
    public String getAttributeNS(String namespaceURI, String localName);
    public void setAttributeNS(String namespaceURI, String qualifiedName, 
                               String value)
        throws DOMException;
    public void removeAttributeNS(String namespaceURI, String localName)
                                  throws DOMException;
    public Attr getAttributeNodeNS(String namespaceURI, String localName);
    public Attr setAttributeNodeNS(Attr newAttr) throws DOMException;
    public NodeList getElementsByTagNameNS(String namespaceURI, 
                                           String localName);
    public boolean hasAttribute(String name);
    public boolean hasAttributeNS(String namespaceURI, String localName);
}</pre></blockquote>

</div>

<a name="javaxml2-APP-A-SECT-2.1.11" /><div class="sect3">
<h3 class="sect3">A.2.1.11. Entity</h3>

<p><a name="INDEX-1569" />
<a name="INDEX-1570" />This
provides a Java representation of an entity (parsed or unparsed) in
an XML document. Access to the system ID and public ID as well as the
notation for the entity (from the DTD) is provided through accessor
methods.
</p>

<blockquote><pre class="code">public interface Entity extends Node {
    public String getPublicId( );
    public String getSystemId( );
    public String getNotationName( );
}</pre></blockquote>

</div>

<a name="javaxml2-APP-A-SECT-2.1.12" /><div class="sect3">
<h3 class="sect3">A.2.1.12. EntityReference</h3>

<p><a name="INDEX-1571" />
<a name="INDEX-1572" />This
interface represents the resulting value from an entity reference
once the entity has been resolved. This interface assumes that
character and predefined entity references have already occurred when
this interface is exposed to the application client.
</p>

<blockquote><pre class="code">public interface EntityReference extends Node {
}</pre></blockquote>

</div>

<a name="javaxml2-APP-A-SECT-2.1.13" /><div class="sect3">
<h3 class="sect3">A.2.1.13. NamedNodeMap</h3>

<p><a name="INDEX-1573" />
<a name="INDEX-1574" />This
interface defines a list, much like <tt class="literal">NodeList</tt>, but
requires that each <tt class="literal">Node</tt> in the list be a named
<tt class="literal">Node</tt> (such as an <tt class="literal">Element</tt> or
<tt class="literal">Attr</tt>). Because of this requirement, methods can be
provided to access members of the list by their names (with or
without namespace support). The list also provides for removal and
modification of its members. These methods all throw
<tt class="literal">DOMException</tt>s when the referenced
<tt class="literal">Node</tt> is read-only.
</p>

<blockquote><pre class="code">public interface NamedNodeMap {
    public Node getNamedItem(String name);
    public Node setNamedItem(Node arg) throws DOMException;
    public Node removeNamedItem(String name) throws DOMException;
    public Node item(int index);
    public int getLength( );
    public Node getNamedItemNS(String namespaceURI, String localName);
    public Node setNamedItemNS(Node arg) throws DOMException;
    public Node removeNamedItemNS(String namespaceURI, String localName)
        throws DOMException;
}</pre></blockquote>

</div>

<a name="javaxml2-APP-A-SECT-2.1.14" /><div class="sect3">
<h3 class="sect3">A.2.1.14. Node</h3>

<p><a name="INDEX-1575" />
<a name="INDEX-1576" />This
is the central interface for all DOM objects. It provides a robust
set of methods for accessing information about a
<tt class="literal">Node</tt> in the DOM tree. It also allows for handling
of a <tt class="literal">Node</tt>'s children (if they exist). While
most of the methods are self-explanatory, there are several methods
worth noting: <tt class="literal">getAttributes( )</tt> only returns
non-<tt class="literal">null</tt> data if the <tt class="literal">Node</tt> is an
<tt class="literal">Element</tt>; <tt class="literal">cloneNode( )</tt> provides
for a shallow or deep copy of a <tt class="literal">Node</tt>;
<tt class="literal">normalize( )</tt> moves all text into non-adjacent
<tt class="literal">Text</tt> nodes (no two <tt class="literal">Text</tt> nodes
are adjacent, and all resolved textual entity references are
consolidated into <tt class="literal">Text</tt> nodes); and
<tt class="literal">isSupported( )</tt> provides information about the
feature set of the <tt class="literal">Node</tt>. Namespace-aware methods
are also provided (<tt class="literal">getNamespaceURI( )</tt>,
<tt class="literal">getPrefix( )</tt>, and <tt class="literal">getLocalName(
)</tt>). Finally, a set of constants is provided for identifying
the type of a <tt class="literal">Node</tt> by comparing the constants
against the result of <tt class="literal">getNodeType( )</tt>.
</p>

<blockquote><pre class="code">public interface Node {
    public String getNodeName( );
    public String getNodeValue( ) throws DOMException;
    public void setNodeValue(String nodeValue) throws DOMException;
    public short getNodeType( );
    public Node getParentNode( );
    public NodeList getChildNodes( );
    public Node getFirstChild( );
    public Node getLastChild( );
    public Node getPreviousSibling( );
    public Node getNextSibling( );
    public NamedNodeMap getAttributes( );
    public Document getOwnerDocument( );
    public Node insertBefore(Node newChild,  Node refChild)
        throws DOMException;
    public Node replaceChild(Node newChild, Node oldChild)
                             throws DOMException;
    public Node removeChild(Node oldChild) throws DOMException;
    public Node appendChild(Node newChild) throws DOMException;
    public boolean hasChildNodes( );
    public Node cloneNode(boolean deep);
    public void normalize( );
    public boolean isSupported(String feature, String version);
    public String getNamespaceURI( );
    public String getPrefix( );
    public void setPrefix(String prefix) throws DOMException;
    public String getLocalName( );
    public boolean hasAttributes( );

    // Node Type Constants
    public static final short ELEMENT_NODE;
    public static final short ATTRIBUTE_NODE;
    public static final short TEXT_NODE;
    public static final short CDATA_SECTION_NODE;
    public static final short ENTITY_REFERENCE_NODE;
    public static final short ENTITY_NODE;
    public static final short PROCESSING_INSTRUCTION_NODE;
    public static final short COMMENT_NODE;
    public static final short DOCUMENT_NODE;
    public static final short DOCUMENT_TYPE_NODE;
    public static final short DOCUMENT_FRAGMENT_NODE;
    public static final short NOTATION_NODE;
}</pre></blockquote>

</div>

<a name="javaxml2-APP-A-SECT-2.1.15" /><div class="sect3">
<h3 class="sect3">A.2.1.15. NodeList</h3>

<p><a name="INDEX-1577" />
<a name="INDEX-1578" />This
interface is a DOM structure analogous to a Java
<tt class="literal">Vector</tt> or <tt class="literal">List</tt>. It is the
return value of any method that supports multiple
<tt class="literal">Node</tt> implementations as a result. This allows
iteration through the items as well as providing the ability to get a
<tt class="literal">Node</tt> at a specific index.
</p>

<blockquote><pre class="code">public interface NodeList {
    public Node item(int index);
    public int getLength( );
}</pre></blockquote>

</div>

<a name="javaxml2-APP-A-SECT-2.1.16" /><div class="sect3">
<h3 class="sect3">A.2.1.16. Notation</h3>

<p><a name="INDEX-1579" />
<a name="INDEX-1580" />This
interface represents a <tt class="literal">NOTATION</tt> construct in a
DTD, used to declare the format of an unparsed entity or for
declaration of PIs. This provides access to both the system ID and
public ID within the declaration. Both return <tt class="literal">null</tt>
if they are not present.
</p>

<blockquote><pre class="code">public interface Notation extends Node {
    public String getPublicId( );
    public String getSystemId( );
}</pre></blockquote>

</div>

<a name="javaxml2-APP-A-SECT-2.1.17" /><div class="sect3">
<h3 class="sect3">A.2.1.17. ProcessingInstruction</h3>

<p><a name="INDEX-1581" />
<a name="INDEX-1582" />This
interface represents an XML processing instruction (PI). It provides
methods for getting the target and the data of the PI. Note that
there is no means of accessing the "name/value" pairs
within the PI individually. The data can also be set for the PI.
</p>

<blockquote><pre class="code">public interface ProcessingInstruction extends Node {
    public String getTarget( );
    public String getData( );
    public void setData(String data) throws DOMException;
}</pre></blockquote>

</div>

<a name="javaxml2-APP-A-SECT-2.1.18" /><div class="sect3">
<h3 class="sect3">A.2.1.18. Text</h3>

<p><a name="INDEX-1583" />
<a name="INDEX-1584" />This
interface provides a Java representation of an XML element's
textual data. The only method it adds to those defined in
<tt class="literal">CharacterData</tt> is one that will split the node into
two nodes. The original <tt class="literal">Text</tt> node contains text up
to the specified offset, and the method returns a new
<tt class="literal">Text</tt> node with the text after the offset. Like
other mutability methods, a <tt class="literal">DOMException</tt> is thrown
when the node is read-only.
</p>

<a name="INDEX-1585" /><blockquote><pre class="code">public interface Text extends CharacterData {
    public Text splitText(int offset) throws DOMException;
}</pre></blockquote>

</div>
</div>


<hr width="684" align="left" />
<div class="navbar"><table width="684" border="0"><tr><td align="left" valign="top" width="228"><a href="appa_01.htm"><img alt="Previous" border="0" src="../gifs/txtpreva.gif" /></a></td><td align="center" valign="top" width="228"><a href="index.htm"><img alt="Home" border="0" src="../gifs/txthome.gif" /></a></td><td align="right" valign="top" width="228"><a href="appa_03.htm"><img alt="Next" border="0" src="../gifs/txtnexta.gif" /></a></td></tr><tr><td align="left" valign="top" width="228">A. API Reference</td><td align="center" valign="top" width="228"><a href="index/index.htm"><img alt="Book Index" border="0" src="../gifs/index.gif" /></a></td><td align="right" valign="top" width="228">A.3. JAXP 1.1</td></tr></table></div>
<hr width="684" align="left" />

<img alt="Library Navigation Links" border="0" src="../gifs/navbar.gif" usemap="#library-map" />
<p><p><font size="-1"><a href="copyrght.htm">Copyright &copy; 2002</a> O'Reilly &amp; Associates. All rights reserved.</font></p>

<map name="library-map">
<area shape="rect" coords="0,0,85,93" href="../index.htm"><area shape="rect" coords="85,0,180,98" href="../sax2/index.htm"><area shape="rect" coords="182,-1,261,100" href="../xmlnut/index.htm"><area shape="rect" coords="263,1,384,96" href="index.htm"><area shape="rect" coords="386,1,463,100" href="../jxslt/index.htm"><area shape="rect" coords="466,1,533,112" href="../xslt/index.htm"><area shape="rect" coords="535,-1,610,108" href="../schema/index.htm"><area shape="rect" coords="613,1,696,121" href="../pxml/index.htm">
</map>

</body></html>