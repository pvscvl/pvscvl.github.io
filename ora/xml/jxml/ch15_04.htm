<html><head><title>JAXB (Java &amp; XML, 2nd Edition)</title><link rel="stylesheet" type="text/css" href="../style/style1.css" />

<meta name="DC.Creator" content="Brett McLaughlin" /><meta name="DC.Format" content="text/xml" scheme="MIME" /><meta name="DC.Language" content="en-US" /><meta name="DC.Publisher" content="O'Reilly &amp; Associates, Inc." /><meta name="DC.Source" scheme="ISBN" content="059600197L" /><meta name="DC.Subject.Keyword" content="stuff" /><meta name="DC.Title" content="Java &amp; XML, 2nd Edition" /><meta name="DC.Type" content="Text.Monograph" />

</head><body bgcolor="#ffffff">

<img alt="Book Home" border="0" src="gifs/smbanner.gif" usemap="#banner-map" /><map name="banner-map"><area shape="rect" coords="1,-2,616,66" href="index.htm" alt="Java and XML, 2nd Edition" /><area shape="rect" coords="629,-11,726,25" href="jobjects/fsearch.htm" alt="Search this book" /></map>

<div class="navbar"><table width="684" border="0"><tr><td align="left" valign="top" width="228"><a href="ch15_03.htm"><img alt="Previous" border="0" src="../gifs/txtpreva.gif" /></a></td><td align="center" valign="top" width="228"></td><td align="right" valign="top" width="228"><a href="ch15_05.htm"><img alt="Next" border="0" src="../gifs/txtnexta.gif" /></a></td></tr></table></div>



<h2 class="sect1">15.4. JAXB</h2>

<p>Last but not least, I want to cover <a name="INDEX-1450" /> <a name="INDEX-1451" />JAXB,
Sun's Java Architecture for Data Binding. It might surprise you
that I'm dealing with JAXB last, or that I've even
included coverage of other APIs. However, Sun's offering has
been very slow in coming, and is still in early access as I write
this book. It will probably not be in a final form when you are
reading this chapter, and it has a very limited feature set.
Certainly, future versions will add functionality, but for now Sun is
just trying to get a stable offering out to the public. You will find
features in Castor and Zeus that simply aren't available in
JAXB right now; for all these reasons, I want to let you see more
than just the JAXB framework. And of course, I'm generally of
the opinion that open source software is just cool!
</p>

<a name="javaxml2-CHP-15-SECT-4.1" /><div class="sect2">
<h3 class="sect2">15.4.1. Installation</h3>

<p>To get started, you need to download JAXB from Sun at <a href="../../../../../../java.sun.com/xml/jaxb/index.html">http://java.sun.com/xml/jaxb/index.html</a>. I
also recommend you get the documentation and specification.
</p>
<blockquote><b>WARNING:</b> 

At the time of this writing, JAXB is in early release. Sun could easily change things before a final version, although that's not really common in EA (early access) software. Still, be warned that you may have to tweak the code shown here to work by the time you are checking JAXB out. Additionally, there are many errors in the documentation (at least in the early release). I've tried to steer clear of those here, so the examples in this section can be used as correct syntax if you run into errors using the JAXB instructions (as I did).
</p>
</blockquote>
<p>Once you've got the release downloaded, simply put the two
included <em class="emphasis">jar</em> files, <em class="emphasis">jaxb-xjc-1.0-ea.jar</em> and <em class="emphasis">jaxb-rt-1.0-ea.jar</em>, in your classpath.
Additionally, JAXB uses a script, <em class="emphasis">xjc</em>, to perform schema compilation. I have no
idea why this isn't a Java class, but that's life. You
can invoke the Java class manually, though, if you want to dig into
the shell script. However, the early access release neglects to
supply a script capable of running on Windows, as many of you may be.
<a href="ch15_04.htm">Example 15-8</a> is a Windows-compatible script to match
the supplied Unix version.
</p>

<a name="javaxml2-CHP-15-EX-8" /><div class="example">
<h4 class="objtitle">Example 15-8. xjc.bat for Windows platforms </h4>
<blockquote><pre class="code">@echo off

echo JAXB Schema Compiler
echo --------------------

if "%JAVA_HOME%" == "" goto errorJVM
if "%JAXB_HOME%" == "" goto errorJAXB

set JAXB_LIB=%JAXB_HOME%\lib
set JAXB_CLASSES=%JAXB_HOME%\classes

echo %JAVA_HOME%\bin\java.exe -jar %JAXB_LIB%\jaxb-xjc-1.0-ea.jar %1 %2 %3 %4 %5
%JAVA_HOME%\bin\java.exe -jar %JAXB_LIB%\jaxb-xjc-1.0-ea.jar %1 %2 %3 %4 %5

goto end

:errorJVM

echo ERROR: JAVA_HOME not found in your environment.
echo Please, set the JAVA_HOME variable in your environment to match the
echo location of the Java Virtual Machine you want to use.
echo For example:
echo  set JAVA_HOME=c:\java\jdk1.3.1

goto end

:errorJAXB

echo ERROR: JAXB_HOME not found in your environment.
echo Please, set the JAXB_HOME variable in your environment to match the
echo location of the JAXB installation directory.
echo For example:
echo  set JAXB_HOME=c:\java\jaxb-1.0-ea

:end</pre></blockquote>
</div>

<p>Place this in your JAXB installation's <em class="filename">bin</em>
directory, along with <em class="emphasis">xjc</em>; as you
can see, I called mine <em class="emphasis">xjc.bat</em>.
Finally, add an environment entry for both
<tt class="literal">JAVA_HOME</tt> and <tt class="literal">JAXB_HOME</tt> (you
only need <tt class="literal">JAVA_HOME</tt> if you are on Unix platforms).
On my Windows system, I did this:
</p>

<blockquote><pre class="code">set JAVA_HOME=c:\java\jdk1.3.1
set JAXB_HOME=c:\javaxml2\jaxb-1.0-ea</pre></blockquote>

<p>Then you are ready to proceed.</p>

</div>
<a name="javaxml2-CHP-15-SECT-4.2" /><div class="sect2">
<h3 class="sect2">15.4.2. Class Generation</h3>

<p>While Castor supports only XML Schema, JAXB supports only DTDs. So,
I'll use the DTD from <a href="ch15_03.htm">Example 15-5</a> for class
generation here. However, JAXB also requires a <em class="filename">binding
schema</em> for class generation. A binding schema tells JAXB
the specifics of how to convert the constraints in a DTD to a Java
class (or classes). At its simplest, you need to specify the root
element in the DTD (or multiple root elements, if your DTD defines
them). <a href="ch15_04.htm">Example 15-9</a> is the simplest possible binding
schema for the <em class="emphasis">catalog.xml</em>
document used in this chapter.
</p>

<a name="javaxml2-CHP-15-EX-9" /><div class="example">
<h4 class="objtitle">Example 15-9. Binding schema for the catalog document </h4>
<blockquote><pre class="code">&lt;?xml version="1.0"?&gt;

&lt;xml-java-binding-schema version="1.0ea"&gt;
  &lt;element name="catalog" type="class" root="true" /&gt;
&lt;/xml-java-binding-schema&gt;</pre></blockquote>
</div>

<p>This specifies the document as a binding schema, and defines the root
element. Save this file as <em class="emphasis">catalog.xjc</em>.
</p>

<p>With a DTD (<em class="filename">catalog.dtd</em> from the last section on
Zeus) and a binding schema, you're ready to generate Java
classes. Execute the following command:
</p>

<blockquote><pre class="code">xjc c:\javaxml2\ch14\xml\jaxb\catalog.dtd c:\javaxml2\ch14\xml\jaxb\catalog.xjc</pre></blockquote>

<p>Or, on Unix or Cygwin:</p>

<blockquote><pre class="code">xjc /javaxml2/ch14/xml/jaxb/catalog.dtd /javaxml2/ch14/xml/jaxb/catalog.xjc</pre></blockquote>

<p>Once that command completes, you get two classes in your current
directory, <em class="emphasis">Catalog.java</em> and
<em class="emphasis">Item.java</em>. These have the typical
set of methods you would expect:
</p>

<blockquote><pre class="code">public class Item {
    public String getLevel( );
    public void setLevel( );

    public String getId( );
    public void setId(String id);

    public List getGuest( );
    public void deleteGuest( );
    public void emptyGuest( );

    // And so on...
}</pre></blockquote>

<p>Note how JAXB deals with lists. It's a step up from Castor (in
my opinion), as it does provide access to the <tt class="literal">List</tt>
of guests. However (also my opinion), it lacks the convenience of an
<tt class="literal">addGuest( )</tt> method that Zeus provides.
You'll need to handle all list manipulation by getting the list
and working on it directly:
</p>

<blockquote><pre class="code">// The Zeus way
item.addGuest(new Guest("Bela Bleck"));

// The JAXB way
List guests = item.getGuest( );
guests.add("Bela Fleck");</pre></blockquote>

<p>The generated classes are also all concrete classes, much like the
model that Castor uses.
</p>

<p>The binding schema does provide some nifty options (even if
it's not XML). First, you can specify the package that
generated classes should be in; this is done using the
<tt class="literal">options</tt> element, with the
<tt class="literal">package</tt> attribute. Add this line to your binding
schema:
</p>

<blockquote><pre class="code">&lt;?xml version="1.0"?&gt;

&lt;xml-java-binding-schema version="1.0ea"&gt;<tt class="userinput"><b>
  &lt;options package="javaxml2.jaxb" /&gt;</b></tt>
  &lt;element name="catalog" type="class" root="true" /&gt;
&lt;/xml-java-binding-schema&gt;</pre></blockquote>

<p>Now, generated source will be placed in the <em class="emphasis">javaxml2/jaxb</em> directory with the same
structure as the package hierarchy. Next, let's specify that
the <tt class="literal">level</tt> attribute on the <tt class="literal">item</tt>
element should be a number (instead of the default, a
<tt class="literal">String</tt>):
</p>

<blockquote><pre class="code">&lt;?xml version="1.0"?&gt;

&lt;xml-java-binding-schema version="1.0ea"&gt;
  &lt;options package="javaxml2.jaxb" /&gt;
  &lt;element name="catalog" type="class" root="true" /&gt;<tt class="userinput"><b>
  &lt;element name="item" type="class"&gt;
    &lt;attribute name="level" convert="int" /&gt;
  &lt;/element&gt;</b></tt>
&lt;/xml-java-binding-schema&gt;</pre></blockquote>

<p>As you can see, I first added an element declaration for the
<tt class="literal">item</tt> element. This allows me to reference its
<tt class="literal">level</tt> attribute using the
<tt class="literal">attribute</tt> construct. To handle the datatype, I
specified the type I wanted (<tt class="literal">int</tt>) with the
<tt class="literal">convert</tt> attribute.
</p>

<p>Continuing with the options that a binding schema supplies,
here's a really nice feature. You can actually change the name
of a property from what it is in the DTD. For example, I hate methods
like <tt class="literal">getId( )</tt>. Instead, I really prefer
<tt class="literal">getID( )</tt>, which looks much better. So, what I
really want is to name the <tt class="literal">id</tt> property from my DTD
as <tt class="literal">ID</tt> in Java. This turns out to be simple with
JAXB:
</p>

<blockquote><pre class="code">&lt;?xml version="1.0"?&gt;

&lt;xml-java-binding-schema version="1.0ea"&gt;
  &lt;options package="javaxml2.jaxb" /&gt;
  &lt;element name="catalog" type="class" root="true" /&gt;
  &lt;element name="item" type="class"&gt;
    &lt;attribute name="level" convert="int" /&gt;<tt class="userinput"><b>
    &lt;attribute name="id" property="ID" /&gt;</b></tt>
  &lt;/element&gt;
&lt;/xml-java-binding-schema&gt;</pre></blockquote>

<p>Once you've made all of these various changes, run the schema
compiler (<em class="emphasis">xjc</em>) again.
You'll get the modified classes I've been talking about,
and now can compile those:
</p>

<blockquote><pre class="code">javac -d . javaxml2/jaxb/*.java</pre></blockquote>

<p>If you have any problems, ensure that you still have <em class="emphasis">jaxb-rt-1.0-ea.jar</em> in your classpath.
</p>

<p>There are quite a few more options for the binding schema than those
discussed here; in fact, many of these were undocumented, and I found
them by looking at the <em class="emphasis">xjc.dtd</em>
included with JAXB. I suggest you do the same, in addition to reading
the supplied documentation. Once you've got your classes
generated, it's on to marshalling and unmarshalling.
</p>

</div>
<a name="javaxml2-CHP-15-SECT-4.3" /><div class="sect2">
<h3 class="sect2">15.4.3. Marshalling and Unmarshalling</h3>

<p>The process of marshalling and unmarshalling turns out to be the same
song, third verse, for this chapter. Since that is the case, I will
get right to some code, shown in <a href="ch15_04.htm">Example 15-10</a>.
</p>

<a name="javaxml2-CHP-15-EX-10" /><div class="example">
<h4 class="objtitle">Example 15-10. The Categorizer class </h4>
<blockquote><pre class="code">package javaxml2;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.List;

// JAXB Classes
import javax.xml.bind.UnmarshalException;

// JAXB Generated Classes
import javaxml2.jaxb.Catalog;
import javaxml2.jaxb.Item;

public class Categorizer {

    public void categorize(File catalogFile) throws IOException, 
        UnmarshalException {

        // Convert from XML to Java
        FileInputStream fis = new FileInputStream(catalogFile);
        Catalog catalog = new Catalog( );
        try {
            catalog = Catalog.unmarshal(fis);
        } finally {
            fis.close( );
        }

        // Create new catalogs for the different categories
        Catalog fingerpickingCatalog = new Catalog( );
        Catalog flatpickingCatalog = new Catalog( );
        Catalog mandolinCatalog = new Catalog( );

        List items = catalog.getItem( );
        for (Iterator i = items.iterator(); i.hasNext( ); ) {
            Item item = (Item)i.next( );
            String teacher = item.getTeacher( );
            if ((teacher.equals("Doc Watson")) ||
                (teacher.equals("Steve Kaufman"))) {
                flatpickingCatalog.getItem( ).add(item);
            } else if (teacher.equals("David Wilcox")) {
                fingerpickingCatalog.getItem( ).add(item);
            } else if ((teacher.equals("Sam Bush")) ||
                       (teacher.equals("Chris Thile"))) {
                mandolinCatalog.getItem( ).add(item);
            }
        }

        // Write back out to XML
        FileOutputStream fingerOutput = 
            new FileOutputStream(new File("fingerpickingCatalog.xml"));
        FileOutputStream flatpickOutput = 
            new FileOutputStream(new File("flatpickingCatalog.xml"));
        FileOutputStream mandolinOutput = 
            new FileOutputStream(new File("mandolinCatalog.xml"));
        try {
            // Validate the catalogs
            fingerpickingCatalog.validate( );
            flatpickingCatalog.validate( );
            mandolinCatalog.validate( );

            // Output the catalogs
            fingerpickingCatalog.marshal(fingerOutput);
            flatpickingCatalog.marshal(flatpickOutput);
            mandolinCatalog.marshal(mandolinOutput);
        } finally {
            fingerOutput.close( );
            flatpickOutput.close( );
            mandolinOutput.close( );
        }
    }

    public static void main(String[] args) {
        try {
            if (args.length != 1) {
                System.out.println("Usage: java javaxml2.Categorizer " +
                    "[XML Catalog Filename]");
                return;
            }

            // Get access to XML catalog
            File catalogFile = new File(args[0]);
            Categorizer categorizer = new Categorizer( );
            categorizer.categorize(catalogFile);
            
        } catch (Exception e) {
            e.printStackTrace( );
        }        
    }

}</pre></blockquote>
</div>

<p>There is not a whole lot of interest here; you've seen this
several times. However, JAXB does do a few things differently. First,
the <tt class="literal">marshal( )</tt><a name="INDEX-1452" />
<a name="INDEX-1453" /> and <tt class="literal">unmarshal(
)</tt><a name="INDEX-1454" />
<a name="INDEX-1455" /> methods are on the generated classes
themselves, rather than on static <tt class="literal">Marshaller</tt> and
<tt class="literal">Unmarshaller</tt> classes:
</p>

<blockquote><pre class="code">// Convert from XML to Java
FileInputStream fis = new FileInputStream(catalogFile);
Catalog catalog = new Catalog( );
try {<tt class="userinput"><b>
    catalog = Catalog.unmarshal(fis);</b></tt>
} finally {
    fis.close( );
}</pre></blockquote>

<p>The generated classes provide static methods that allow for
marshalling and unmarshalling. These static methods return an
instance of the class with the data from the supplied file filled in.
However, <em class="emphasis">you must be sure to assign this return value to an
instance variable!</em> An extremely frustrating mistake to
make is this:
</p>

<blockquote><pre class="code">// Convert from XML to Java
FileInputStream fis = new FileInputStream(catalogFile);
Catalog catalog = new Catalog( );
try {<tt class="userinput"><b>
    catalog.unmarshal(fis);</b></tt>
} finally {
    fis.close( );
}</pre></blockquote>

<p>Notice the bolded line: if you try to access the instance variables
of the <tt class="literal">catalog</tt> instance after this code snippet,
you will get no data, regardless of what's in the supplied XML
file. That's because the <tt class="literal">unmarshal( )</tt> method
is static, and returns a live instance of the
<tt class="literal">Catalog</tt> class; since that value is never assigned
here, it's lost. This can be quite annoying, so watch out! That
very issue is actually a case for the external
<tt class="literal">Marshaller</tt> and <tt class="literal">Unmarshaller</tt>
classes, as used in Castor and Zeus.
</p>

<p>In the example, once I have an instance of the XML catalog, I iterate
through it. Depending on the teacher, the code adds the item to one
of three new catalogs: a flat picking one, a finger picking one, or a
mandolin one. Then, each of these new catalogs is marshalled back out
to a new XML document. As an example, here's what I got for my
<em class="emphasis">mandolinCatalog.xml</em> document:
</p>

<blockquote><pre class="code">&lt;?xml version="1.0" encoding="UTF-8"?&gt;

&lt;catalog&gt;
  &lt;item level="3" id="VD-THI-MN01"&gt;
    &lt;title&gt;Essential Techniques for Mandolin&lt;/title&gt;
    &lt;teacher&gt;Chris Thile&lt;/teacher&gt;
    &lt;description&gt;Here's a lesson that will thrill and inspire mandolin players at 
    all levels.&lt;/description&gt;&lt;/item&gt;
  &lt;item level="4" id="CDZ-SM01"&gt;
    &lt;title&gt;Sam Bush Teaches Mandolin Repertoire and Techniques&lt;/title&gt;
    &lt;teacher&gt;Sam Bush&lt;/teacher&gt;
    &lt;description&gt;Learn complete solos to eight traditional and orignal tunes, 
    each one jam-packed with licks, runs, and musical variations.&lt;/description&gt;
&lt;/item&gt;&lt;/catalog&gt;</pre></blockquote>

<p>The spacing is, as always, added in production, so your line feeds
may not match up. However, JAXB's marshalling and unmarshalling
is that simple to use. Once you get past the static method issue I
just mentioned, it's almost identical to the other two
frameworks.
</p>

<p>While I encourage you to check out JAXB today, be leery of using it
in production until a final release becomes available. There are
several undocumented features still floating around that could easily
be changed before a final release. Additionally, JAXB does not yet
support taking arbitrary objects (ones not generated by JAXB) and
marshalling them; this is something the other frameworks do allow
for, and might be a drawback for your applications. JAXB also, as
mentioned, has no XML Schema support, as well as no namespace
support. On the upside, Sun will obviously put a lot of resources
into JAXB, so expect it to shape up in the coming months.
</p>

<p>In any case, you should have a pretty good taste of what data binding
provides by now. The ins and outs of a particular framework are left
for you to discover, but with these basics you could pick up any one
(or all) of the projects mentioned here and put them to work. Be sure
to let whichever project you choose to work with know about what
works and what doesn't; it can really affect future
development, particularly the open source ones.<a name="INDEX-1456" /> <a name="INDEX-1457" /><a name="INDEX-1458" /> <a name="INDEX-1459" />
</p>

</div>


<hr width="684" align="left" />
<div class="navbar"><table width="684" border="0"><tr><td align="left" valign="top" width="228"><a href="ch15_03.htm"><img alt="Previous" border="0" src="../gifs/txtpreva.gif" /></a></td><td align="center" valign="top" width="228"><a href="index.htm"><img alt="Home" border="0" src="../gifs/txthome.gif" /></a></td><td align="right" valign="top" width="228"><a href="ch15_05.htm"><img alt="Next" border="0" src="../gifs/txtnexta.gif" /></a></td></tr><tr><td align="left" valign="top" width="228">15.3. Zeus</td><td align="center" valign="top" width="228"><a href="index/index.htm"><img alt="Book Index" border="0" src="../gifs/index.gif" /></a></td><td align="right" valign="top" width="228">15.5. What's Next?</td></tr></table></div>
<hr width="684" align="left" />

<img alt="Library Navigation Links" border="0" src="../gifs/navbar.gif" usemap="#library-map" />
<p><p><font size="-1"><a href="copyrght.htm">Copyright &copy; 2002</a> O'Reilly &amp; Associates. All rights reserved.</font></p>

<map name="library-map">
<area shape="rect" coords="0,0,85,93" href="../index.htm"><area shape="rect" coords="85,0,180,98" href="../sax2/index.htm"><area shape="rect" coords="182,-1,261,100" href="../xmlnut/index.htm"><area shape="rect" coords="263,1,384,96" href="index.htm"><area shape="rect" coords="386,1,463,100" href="../jxslt/index.htm"><area shape="rect" coords="466,1,533,112" href="../xslt/index.htm"><area shape="rect" coords="535,-1,610,108" href="../schema/index.htm"><area shape="rect" coords="613,1,696,121" href="../pxml/index.htm">
</map>

</body></html>