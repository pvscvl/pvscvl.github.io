<html><head><title>Gotcha! (Java &amp; XML, 2nd Edition)</title><link rel="stylesheet" type="text/css" href="../style/style1.css" />

<meta name="DC.Creator" content="Brett McLaughlin" /><meta name="DC.Format" content="text/xml" scheme="MIME" /><meta name="DC.Language" content="en-US" /><meta name="DC.Publisher" content="O'Reilly &amp; Associates, Inc." /><meta name="DC.Source" scheme="ISBN" content="059600197L" /><meta name="DC.Subject.Keyword" content="stuff" /><meta name="DC.Title" content="Java &amp; XML, 2nd Edition" /><meta name="DC.Type" content="Text.Monograph" />

</head><body bgcolor="#ffffff">

<img alt="Book Home" border="0" src="gifs/smbanner.gif" usemap="#banner-map" /><map name="banner-map"><area shape="rect" coords="1,-2,616,66" href="index.htm" alt="Java and XML, 2nd Edition" /><area shape="rect" coords="629,-11,726,25" href="jobjects/fsearch.htm" alt="Search this book" /></map>

<div class="navbar"><table width="684" border="0"><tr><td align="left" valign="top" width="228"><a href="ch03_04.htm"><img alt="Previous" border="0" src="../gifs/txtpreva.gif" /></a></td><td align="center" valign="top" width="228"></td><td align="right" valign="top" width="228"><a href="ch03_06.htm"><img alt="Next" border="0" src="../gifs/txtnexta.gif" /></a></td></tr></table></div>



<h2 class="sect1">3.5. Gotcha!</h2>

<p>Before leaving this introduction to parsing XML documents with SAX,
there are a few pitfalls to make you aware of. These
"gotchas" will help you avoid common programming mistakes
when using SAX, and I will discuss more of these for other APIs in
the appropriate sections.
</p>

<a name="javaxml2-CHP-3-SECT-5.1" /><div class="sect2">
<h3 class="sect2">3.5.1. My Parser Doesn't Support SAX 2.0</h3>

<p><a name="INDEX-338" /> <a name="INDEX-339" />For those of you who are forced to use a
SAX 1.0 parser, perhaps in an existing application, don't
despair. First, you always have the option of changing parsers;
keeping current on SAX standards is an important part of an XML
parser's responsibility, and if your vendor is not doing this,
you may have other concerns to address with them as well. However,
there are certainly cases where you are forced to use a parser
because of legacy code or applications; in these situations, you are
still not left out in the cold.
</p>

<p>SAX 2.0 includes a helper class,
<a name="INDEX-340" />
<a name="INDEX-341" />
<a name="INDEX-342" /><tt class="literal">org.xml.sax.helpers.ParserAdapter</tt>,
which can actually cause a SAX 1.0 <tt class="literal">Parser</tt>
implementation to behave like a SAX 2.0 <tt class="literal">XMLReader</tt>
implementation. This handy class takes in a 1.0
<tt class="literal">Parser</tt> implementation as an argument and then can
be used instead of that implementation. It allows a
<tt class="literal">ContentHandler</tt> to be set (which is a SAX 2.0
construct), and handles all namespace callbacks properly (also a
feature of SAX 2.0). The only functionality loss you will see is
that<a name="INDEX-343" /> skipped entities will not be reported, as
this capability was not available in a 1.0 implementation in any
form, and cannot be emulated by a 2.0 adapter class. <a href="ch03_05.htm">Example 3-3</a> shows this behavior in action.
</p>

<a name="javaxml2-CHP-3-EX-3" /><div class="example">
<h4 class="objtitle">Example 3-3. Using SAX 1.0 with SAX 2.0 code constructs </h4>
<blockquote><pre class="code">try {
    // Register a parser with SAX
    Parser parser = 
        ParserFactory.makeParser(
            "org.apache.xerces.parsers.SAXParser");
            
    ParserAdapter myParser = new ParserAdapter(parser);
                                        
    // Register the document handler
    myParser.setContentHandler(contentHandler);
    
    // Register the error handler
    myParser.setErrorHandler(errHandler);            
        
    // Parse the document      
    myParser.parse(uri);
    
} catch (ClassNotFoundException e) {
    System.out.println(
        "The parser class could not be found.");
} catch (IllegalAccessException e) {
    System.out.println(
        "Insufficient privileges to load the parser class.");
} catch (InstantiationException e) {
    System.out.println(
        "The parser class could not be instantiated.");
} catch (ClassCastException e) {
    System.out.println(
        "The parser does not implement org.xml.sax.Parser");
} catch (IOException e) {
    System.out.println("Error reaading URI: " + e.getMessage( ));
} catch (SAXException e) {
    System.out.println("Error in parsing: " + e.getMessage( ));
}</pre></blockquote>
</div>

<p>If SAX is new to you and this example doesn't make much sense,
don't worry about it; you are using the latest and greatest
version of SAX (2.0) and probably won't ever have to write code
like this. This code is helpful only in cases where a 1.0 parser must
be used.
</p>

</div>
<a name="javaxml2-CHP-3-SECT-5.2" /><div class="sect2">
<h3 class="sect2">3.5.2. The SAX XMLReader: Reused and Reentrant</h3>

<p>One of Java's nicest features is the easy reuse of objects, and
the memory advantages of this reuse. SAX parsers are no different.
Once an <tt class="literal">XMLReader</tt> has been instantiated, it is
possible to continue using that reader, parsing several or even
hundreds of XML documents. Different documents or
<tt class="literal">InputSource</tt>s may be continually passed to a
reader, allowing it to be used for a variety of different tasks.
However, <a name="INDEX-344" />readers are not
<em class="filename">reentrant</em>. That means that once the parsing
process has started, a reader may not be used until the parsing of
the requested document or input has completed. In other words, the
process cannot be reentered. For those prone to coding recursive
methods, this is definitely a gotcha! The first time that you attempt
to use a reader that is in the middle of processing another document,
you will receive a rather nasty <tt class="literal">SAXException</tt> and
all parsing will stop. What is the lesson learned? Parse one document
at a time, or pay the price of instantiating multiple reader
instances.
</p>

</div>
<a name="javaxml2-CHP-3-SECT-5.3" /><div class="sect2">
<h3 class="sect2">3.5.3. The Misplaced Locator</h3>

<p>Another dangerous but seemingly innocuous feature of SAX events is
the <a name="INDEX-345" /><tt class="literal">Locator</tt> instance
that is made available through the
<a name="INDEX-346" /><tt class="literal">setDocumentLocator(
)</tt> callback method. This gives the application the origin of
a SAX event, and is useful for making decisions about the progress of
parsing and reaction to events. However, this origin point is valid
only for the duration of the life of the
<a name="INDEX-347" /><tt class="literal">ContentHandler</tt>
instance; once parsing is complete, the <tt class="literal">Locator</tt> is
no longer valid, including the case when another parse begins. A
"gotcha" that many XML newcomers make is to hold a
reference to the <tt class="literal">Locator</tt> object within a class
member variable <em class="emphasis">outside</em> of the callback method:
</p>

<blockquote><pre class="code">public void setDocumentLocator(Locator locator) {
    // Saving the Locator to a class outside the ContentHandler
    myOtherClass.setLocator(locator);
}
...

public myOtherClassMethod( ) {
    // Trying to use this outside of the ContentHandler
    System.out.println(locator.getLineNumber( ));
}</pre></blockquote>

<p>This is an extremely bad idea, as this <tt class="literal">Locator</tt>
instance becomes meaningless as soon as the scope of the
<tt class="literal">ContentHandler</tt> implementation is left. Often,
using the member variable resulting from this operation results in
not only erroneous information being supplied to an application, but
exceptions being generated in the running code. In other words, use
this object locally, and not globally. In the
<tt class="literal">JTreeContentHandler</tt> implementation class, the
supplied <tt class="literal">Locator</tt> instance is saved to a member
variable. It could then correctly be used (for example) to give you
the line number of each element as it was encountered:
</p>

<blockquote><pre class="code">public void startElement(String namespaceURI, String localName,
                         String rawName, Attributes atts)
    throws SAXException {
    
    DefaultMutableTreeNode element =
        new DefaultMutableTreeNode("Element: " + localName +
            " at line " + locator.getLineNumber());
    current.add(element);
    // Rest of existing code...
}</pre></blockquote>

</div>
<a name="javaxml2-CHP-3-SECT-5.4" /><div class="sect2">
<h3 class="sect2">3.5.4. Getting Ahead of the Data</h3>

<p>The <a name="INDEX-348" /><tt class="literal">characters( )</tt>
callback method accepts a character array, as well as start and
length parameters, to signify which index to start at and how far to
read into the array. This can cause some confusion; a common mistake
is to include code like this example to read from the character
array:
</p>

<blockquote><pre class="code">public void characters(char[] ch, int start, int length)
    throws SAXException {

    for (int i=0; i&lt;ch.length; i++)
        System.out.print(i);
}</pre></blockquote>

<p>The mistake here is in reading from the beginning to the end of the
character array. This natural "gotcha" results from years
of iterating through arrays, either in Java, C, or another language.
However, in the case of a SAX event, this can cause quite a bug. SAX
parsers are required to pass starting and length values on the
character array that any loop constructs should use to read from the
array. This allows lower-level manipulation of textual data to occur
in order to optimize parser performance, such as reading data ahead
of the current location as well as array reuse. This is all legal
behavior within SAX, as the expectation is that a wrapping
application will not try to "read past" the length
parameter sent to the callback.
</p>

<p>Mistakes as in the example shown can result in gibberish data being
output to the screen or used within the wrapping application, and are
almost always problematic for applications. The loop construct looks
very normal and compiles without a hitch, so this gotcha can be a
very tricky problem to track down. Instead, you can simply convert
this data to a <tt class="literal">String</tt>, use it, and never worry:
</p>

<blockquote><pre class="code">public void characters(char[] ch, int start, int length)
    throws SAXException {

    String data = new String(ch, start, length);
    // Use the string
}</pre></blockquote>

</div>


<hr width="684" align="left" />
<div class="navbar"><table width="684" border="0"><tr><td align="left" valign="top" width="228"><a href="ch03_04.htm"><img alt="Previous" border="0" src="../gifs/txtpreva.gif" /></a></td><td align="center" valign="top" width="228"><a href="index.htm"><img alt="Home" border="0" src="../gifs/txthome.gif" /></a></td><td align="right" valign="top" width="228"><a href="ch03_06.htm"><img alt="Next" border="0" src="../gifs/txtnexta.gif" /></a></td></tr><tr><td align="left" valign="top" width="228">3.4. Error Handlers</td><td align="center" valign="top" width="228"><a href="index/index.htm"><img alt="Book Index" border="0" src="../gifs/index.gif" /></a></td><td align="right" valign="top" width="228">3.6. What's Next?</td></tr></table></div>
<hr width="684" align="left" />

<img alt="Library Navigation Links" border="0" src="../gifs/navbar.gif" usemap="#library-map" />
<p><p><font size="-1"><a href="copyrght.htm">Copyright &copy; 2002</a> O'Reilly &amp; Associates. All rights reserved.</font></p>

<map name="library-map">
<area shape="rect" coords="0,0,85,93" href="../index.htm"><area shape="rect" coords="85,0,180,98" href="../sax2/index.htm"><area shape="rect" coords="182,-1,261,100" href="../xmlnut/index.htm"><area shape="rect" coords="263,1,384,96" href="index.htm"><area shape="rect" coords="386,1,463,100" href="../jxslt/index.htm"><area shape="rect" coords="466,1,533,112" href="../xslt/index.htm"><area shape="rect" coords="535,-1,610,108" href="../schema/index.htm"><area shape="rect" coords="613,1,696,121" href="../pxml/index.htm">
</map>

</body></html>