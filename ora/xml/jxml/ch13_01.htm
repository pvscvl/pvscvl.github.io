<html><head><title>Web Services (Java &amp; XML, 2nd Edition)</title><link rel="stylesheet" type="text/css" href="../style/style1.css" />

<meta name="DC.Creator" content="Brett McLaughlin" /><meta name="DC.Format" content="text/xml" scheme="MIME" /><meta name="DC.Language" content="en-US" /><meta name="DC.Publisher" content="O'Reilly &amp; Associates, Inc." /><meta name="DC.Source" scheme="ISBN" content="059600197L" /><meta name="DC.Subject.Keyword" content="stuff" /><meta name="DC.Title" content="Java &amp; XML, 2nd Edition" /><meta name="DC.Type" content="Text.Monograph" />

</head><body bgcolor="#ffffff">

<img alt="Book Home" border="0" src="gifs/smbanner.gif" usemap="#banner-map" /><map name="banner-map"><area shape="rect" coords="1,-2,616,66" href="index.htm" alt="Java and XML, 2nd Edition" /><area shape="rect" coords="629,-11,726,25" href="jobjects/fsearch.htm" alt="Search this book" /></map>

<div class="navbar"><table width="684" border="0"><tr><td align="left" valign="top" width="228"><a href="ch12_05.htm"><img alt="Previous" border="0" src="../gifs/txtpreva.gif" /></a></td><td align="center" valign="top" width="228"></td><td align="right" valign="top" width="228"><a href="ch13_02.htm"><img alt="Next" border="0" src="../gifs/txtnexta.gif" /></a></td></tr></table></div>




<h1 class="chapter">Chapter 13. Web Services</h1>
<div class="htmltoc"><h4 class="tochead">Contents:</h4>
  <p> <a href="#javaxml2-CHP-13-SECT-1">Web Services</a><br />
<a href="ch13_02.htm">UDDI</a><br />
<a href="ch13_03.htm">WSDL</a><br />
<a href="ch13_04.htm">Putting It All Together</a><br />
<a href="ch13_05.htm">What's Next?</a><br /></p></div>

<p>In the last chapter, I focused on SOAP as a standalone technology;
your application was a SOAP client talking to a SOAP server, based on
nothing but Java and a servlet engine. While this is a perfectly good
solution for applications in which you write all the clients and all
the services, it is fairly limited for interoperating with other
applications. If you've heard anything about SOAP, it's
the interoperability aspect that has gotten it such good press
lately. The last chapter was incomplete; it did not teach you how to
do true servicing of other applications using SOAP as a transport
mechanism. This chapter fills in the rest of the picture, and solves
the remaining problems in interoperability.
</p>

<p>To get you started, I apply some simple definitions to the overused
term "web services." Although it's hard to quantify
this term right now, since everyone is using it for their own
particular flavor of software and architecture, some general
principles apply. In almost every definition of web services,
you'll find that there is a need for an exchange of information
with other applications. This exchange needs a set of standards, and
the two that are the most important (at least right now) are UDDI and
WSDL. I cover both and show you how they fit in with SOAP. Finally,
I'll try and pull all these various acronyms and technologies
together into one concrete example to finish off the chapter.
</p>

<div class="sect1"><a name="javaxml2-CHP-13-SECT-1" /></a>
<h2 class="sect1">13.1. Web Services</h2>

<p><a name="INDEX-1272" /></a>Web services seems to have become the
next big thing in computing these days, so I've made room for
this chapter in the second edition of this book. However, trying to
define the term is somewhat tricky; from one person's
perspective, it may be correct, but from everyone else's
it's probably completely off-base. I'm left with trying
to boil down the hype and differences in implementation to a simple
set of concepts that remain true across the board.
</p>

<p>Web services is about
<a name="INDEX-1273" /></a>interoperability.
More and more, applications must communicate with each other. But the
problems in communication grow, instead of shrink, with every new day
of technology innovation. As more languages, increasingly complex
data structures, and varied business needs develop, the difference
between one system and another (even if they are performing the same
business task!) also grows. For systems to interoperate, there must
be a common language. This isn't a language in the sense that
Java is a language; programs not written in Java must have just as
much access as those that are in Java. Instead, it's a language
that anyone with a dictionary can access; even if the words
aren't the same, applications have access to the words, which
can be translated into something that <em class="emphasis">can</em> be understood.
</p>

<p><a name="INDEX-1274" /></a>XML
solves the problem of data transfer, and is one piece of that
language. It is accepted and usable in almost every programming
language around: C, Perl, Python, LISP, Java, Pascal, C#, Visual
Basic. . . the list goes on and on. However, web service frameworks
seek to go quite a bit further. The key to interoperability is not
just data, but <em class="emphasis">what</em> data. What information can I
get from your system? What can you find out from mine? In other
words, there must be a means of broadcasting what services an
application makes available. And this is where we have, until
recently, had a gaping hole.
</p>

<p>However, recent additions to the web services realm have begun to
fill this hole. First, UDDI provides a means of discovering other
services and registering your services for others to discover.
Second, WSDL offers a way to provide the needed information about a
discovered service to allow a client to interact with it. I've
purposely left out the explanation of what UDDI and WSDL stand for
and mean for now, because I want to focus on the big picture.
</p>

<p><a href="ch13_01.htm">Figure 13-1</a> shows how the process flows. To begin, a
service provider codes up a service (like you did in the last
chapter). This service could be as simple as adding CDs to a catalog,
or as complex as storing the VIN (vehicle identification numbers) for
all automobiles registered in Massachusetts that are used by the
government. As long as the service is web-accessible, it's a
candidate for a <a name="INDEX-1275" /></a>service registry. This is all part of
the UDDI portion of the picture. UDDI also allows a user to search
all registered services for a specific service name, like
"cd-catalog" or "govt-bin-numbers." The
registry returns all the matching services.
</p>

<a name="javaxml2-CHP-13-FIG-1" /></a><div class="figure"><img height="271" alt="Figure 13-1" src="figs/javax_1301.gif" width="398" /></div><h4 class="objtitle">Figure 13-1. The web services process</h4>

<p>Hopefully, the client has found the desired service. But interaction
takes more than just a name; it requires the URL to connect to and
the parameters required, as well as the return value. This is
accomplished through XML in a WSDL format, which I cover as well. And
then, your client interacts with the located service, knowing
(because of WSDL) you are using the service correctly. Life is grand,
and all because of web services. Of course, I've skimmed over
all the hard parts, but I'll delve into some of that complexity
now that you have the big picture.<a name="INDEX-1276" /></a>
</p>

</div>










<hr width="684" align="left" />
<div class="navbar"><table width="684" border="0"><tr><td align="left" valign="top" width="228"><a href="ch12_05.htm"><img alt="Previous" border="0" src="../gifs/txtpreva.gif" /></a></td><td align="center" valign="top" width="228"><a href="index.htm"><img alt="Home" border="0" src="../gifs/txthome.gif" /></a></td><td align="right" valign="top" width="228"><a href="ch13_02.htm"><img alt="Next" border="0" src="../gifs/txtnexta.gif" /></a></td></tr><tr><td align="left" valign="top" width="228">12.5. What's Next?</td><td align="center" valign="top" width="228"><a href="index/index.htm"><img alt="Book Index" border="0" src="../gifs/index.gif" /></a></td><td align="right" valign="top" width="228">13.2. UDDI</td></tr></table></div>
<hr width="684" align="left" />

<img alt="Library Navigation Links" border="0" src="../gifs/navbar.gif" usemap="#library-map" />
<p><p><font size="-1"><a href="copyrght.htm">Copyright &copy; 2002</a> O'Reilly &amp; Associates. All rights reserved.</font></p>

<map name="library-map">
<area shape="rect" coords="0,0,85,93" href="../index.htm"><area shape="rect" coords="85,0,180,98" href="../sax2/index.htm"><area shape="rect" coords="182,-1,261,100" href="../xmlnut/index.htm"><area shape="rect" coords="263,1,384,96" href="index.htm"><area shape="rect" coords="386,1,463,100" href="../jxslt/index.htm"><area shape="rect" coords="466,1,533,112" href="../xslt/index.htm"><area shape="rect" coords="535,-1,610,108" href="../schema/index.htm"><area shape="rect" coords="613,1,696,121" href="../pxml/index.htm">
      </map>

</body></html>