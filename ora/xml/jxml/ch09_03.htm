<html><head><title>JAXP 1.1 (Java &amp; XML, 2nd Edition)</title><link rel="stylesheet" type="text/css" href="../style/style1.css" />

<meta name="DC.Creator" content="Brett McLaughlin" /><meta name="DC.Format" content="text/xml" scheme="MIME" /><meta name="DC.Language" content="en-US" /><meta name="DC.Publisher" content="O'Reilly &amp; Associates, Inc." /><meta name="DC.Source" scheme="ISBN" content="059600197L" /><meta name="DC.Subject.Keyword" content="stuff" /><meta name="DC.Title" content="Java &amp; XML, 2nd Edition" /><meta name="DC.Type" content="Text.Monograph" />

</head><body bgcolor="#ffffff">

<img alt="Book Home" border="0" src="gifs/smbanner.gif" usemap="#banner-map" /><map name="banner-map"><area shape="rect" coords="1,-2,616,66" href="index.htm" alt="Java and XML, 2nd Edition" /><area shape="rect" coords="629,-11,726,25" href="jobjects/fsearch.htm" alt="Search this book" /></map>

<div class="navbar"><table width="684" border="0"><tr><td align="left" valign="top" width="228"><a href="ch09_02.htm"><img alt="Previous" border="0" src="../gifs/txtpreva.gif" /></a></td><td align="center" valign="top" width="228"></td><td align="right" valign="top" width="228"><a href="ch09_04.htm"><img alt="Next" border="0" src="../gifs/txtnexta.gif" /></a></td></tr></table></div>



<h2 class="sect1">9.3. JAXP 1.1</h2>

<p><a name="INDEX-905" />Late in 2000, the expert group for JAXP
1.1 formed, and work got underway to move JAXP 1.0 to a better, more
effective solution for parsing and handling XML documents. As I write
this chapter, JAXP 1.1 has just become downloadable in a final form
from Sun's web site at <a name="INDEX-906" />
<a name="INDEX-907" /><a href="../../../../../../java.sun.com/xml">http://java.sun.com/xml</a>. Many of the changes
to the API center around parsing, which makes sense, given that the
"P" in JAXP stands for "parsing." But the
most significant changes in JAXP 1.1 center around XML
transformations, which I cover in the last part of this chapter. In
terms of additions to 1.0 functionality, the changes are fairly
minor. The biggest addition is support for <a name="INDEX-908" />SAX 2.0, which went final in May of 2000,
and DOM Level 2, which was finalized in November of 2000. Remember
that JAXP 1.0 supported only SAX 1.0 and DOM Level 1. This lack of
updated standards has been one of the biggest criticisms of JAXP 1.0,
and is probably why the 1.1 version has appeared so quickly.
</p>

<p>In addition to updating JAXP to the newest versions of SAX and DOM,
several small changes have been made in the API feature list. Almost
all of these changes are the result of feedback from the various
companies and individuals on the JAXP expert group. These changes
also all deal with configuring the parsers returned from JAXP's
two factories, <tt class="literal">SAXParserFactory</tt> and
<tt class="literal">DocumentBuilderFactory</tt>. I cover these now, as well
as the update in standards support for SAX and DOM, and then we look
at the new TrAX API that is part of JAXP 1.1.
</p>

<a name="javaxml2-CHP-9-SECT-3.1" /><div class="sect2">
<h3 class="sect2">9.3.1. Updating the Standards</h3>

<p>The most anticipated change from JAXP 1.0 to 1.1 is the updated
support for the SAX and DOM standards. Of critical note is that SAX
2.0 handles namespaces, while SAX 1.0 did not.<a href="#FOOTNOTE-14">[14]</a> This
namespace support enables the use of numerous other XML vocabularies,
such as XML Schema, XLink, and XPointer. While it was possible to use
these vocabularies in SAX 1.0, the burden was on the developer to
split an element's local (or qualified) name from its
namespace, and keep track of namespaces throughout the document. SAX
2.0 provides this information to the developer, dramatically
simplifying these programming tasks. The same goes for DOM Level 2:
namespace support, as well as a wealth of other methods on the DOM
classes, is available.
</p><blockquote class="footnote">
<a name="FOOTNOTE-14" /><p>[14]Careful readers will note that JAXP 1.0 offered namespace
processing through the <tt class="literal">setNamespaceAware( )</tt>
methods on <tt class="literal">SAXParserFactory</tt> and
<tt class="literal">DocumentBuilderFactory</tt>. The JAXP code had to do
this task "by hand" instead of relying on the SAX or DOM
APIs. With SAX 2.0 and DOM Level 2, this process is standardized, and
therefore much more reliable, as well as cleaner, than the JAXP 1.0
implementation. It's a good thing.</p> </blockquote>

<p>The good news is that these changes are generally transparent to the
developer using JAXP. In other words, standards updates happen
somewhat "automatically," without user intervention.
Simply specifying a SAX 2.0-compliant parser to the
<tt class="literal">SAXParserFactory</tt><a name="INDEX-909" />
<a name="INDEX-910" />
and a DOM Level 2-compliant parser to the
<tt class="literal">DocumentBuilderFactory</tt><a name="INDEX-911" />
<a name="INDEX-912" />
class takes care of the update in functionality.
</p>

<a name="javaxml2-CHP-9-SECT-3.1.1" /><div class="sect3">
<h3 class="sect3">9.3.1.1. The road to SAX 2.0</h3>

<p>There are a few significant changes related to these standards
updates, particularly with regard to SAX. In SAX 1.0, the parser
interface implemented by vendors and XML parser projects was
<tt class="literal">org.xml.sax.Parser</tt>. The JAXP class
<tt class="literal">SAXParser</tt>, then, provided a method to get this
underlying implementation class through the <tt class="literal">getParser(
)</tt> method. The signature for that method looks like this:
</p>

<blockquote><pre class="code">public interface SAXParser {

    public org.xml.sax.Parser getParser( );

    // Other methods
}</pre></blockquote>

<p>However, in the change from SAX 1.0 to 2.0, the
<tt class="literal">Parser</tt> interface was deprecated and replaced with
a new interface, <tt class="literal">org.xml.sax.XMLReader</tt> (the one
that you are familiar with from earlier chapters). This made the
<tt class="literal">getParser( )</tt> method useless for obtaining an
instance of the SAX 2.0 <tt class="literal">XMLReader</tt> class. To
support this new interface, a new method has been added to the JAXP
<tt class="literal">SAXParser</tt> class. Not surprisingly, this method is
named <tt class="literal">getXMLReader(
)</tt><a name="INDEX-913" />
<a name="INDEX-914" /> and looks like:
</p>

<blockquote><pre class="code">public interface SAXParser {

    public org.xml.sax.XMLReader getXMLReader( );

    public org.xml.sax.Parser getParser( );

    // Other methods
}</pre></blockquote>

<p>In the same way, JAXP 1.0 used the <tt class="literal">parse( )</tt> method
by supplying an instance of the <tt class="literal">HandlerBase</tt> class
(or a subclass, to be more accurate). Of course in SAX 2.0, the
<tt class="literal">HandlerBase</tt> class has been replaced by
<tt class="literal">DefaultHandler</tt><a name="INDEX-915" /> <a name="INDEX-916" />
<a name="INDEX-917" />.
To accommodate this change, all of the <tt class="literal">parse( )</tt>
methods on the <tt class="literal">SAXParser</tt> class have been
complemented with versions of the same method that take an instance
of the <tt class="literal">DefaultHandler</tt> class to support SAX 2.0. To
help you see this difference, take a look at <a href="ch09_03.htm">Example 9-5</a>, which shows a good chunk of the
<a name="INDEX-918" /> <a name="INDEX-919" />
<a name="INDEX-920" /><tt class="literal">SAXParser</tt>
interface.
</p>

<a name="javaxml2-CHP-9-EX-5" /><div class="example">
<h4 class="objtitle">Example 9-5. The parse( ) methods of the SAXParser interface </h4>
<blockquote><pre class="code">public interface SAXParser {

    // The SAX 1.0 parse methods
    public void parse(File file, HandlerBase handlerBase);
    public void parse(InputSource inputSource, HandlerBase handlerBase);
    public void parse(InputStream inputStream, HandlerBase handlerBase);
    public void parse(InputStream inputStream, HandlerBase handlerBase, 
                      String systemID);
    public void parse(String uri, HandlerBase handlerBase);

    // The SAX 2.0 parse methods
    public void parse(File file, DefaultHandler defaultHandler);
    public void parse(InputSource inputSource, 
                      DefaultHandler defaultHandler);
    public void parse(InputStream inputStream, 
                      DefaultHandler defaultHandler);
    public void parse(InputStream inputStream, 
                      DefaultHandler defaultHandler, 
                      String systemID);
    public void parse(String uri, DefaultHandler defaultHandler);

    // Other methods

}</pre></blockquote>
</div>

<p>All these methods for parsing may seem a bit confusing, but
it's only tricky if you're working with
<em class="emphasis">both</em> versions of SAX. If you are using SAX 1.0,
you'll be working with the <tt class="literal">Parser</tt> interface
and <tt class="literal">HandlerBase</tt> class, and it will be obvious
which methods to use. Similarly, when using SAX 2.0, it will be
obvious that the methods that accept
<tt class="literal">DefaultHandler</tt> instances and return
<tt class="literal">XMLReader</tt> instances should be used. So take all
this as a reference and don't worry too much about it! There
are some other changes to the SAX portion of the API, as well.
</p>

</div>

<a name="javaxml2-CHP-9-SECT-3.1.2" /><div class="sect3">
<h3 class="sect3">9.3.1.2. Changes in SAX classes</h3>

<p>To complete the discussion of the changes to existing JAXP
functionality, I need to go over a few new methods that are available
to JAXP SAX users. First, the <tt class="literal">SAXParserFactory</tt>
class has a new method, <tt class="literal">setFeature(
)</tt><a name="INDEX-921" />
<a name="INDEX-922" />. As you recall from JAXP 1.0, the
<tt class="literal">SAXParserFactory</tt> class allows configuration of
<tt class="literal">SAXParser</tt> instances returned from the factory. In
addition to the methods already available in 1.0
(<tt class="literal">setValidating( )</tt> and <tt class="literal">setNamespaceAware(
)</tt>), this new method allows SAX 2.0 features to be requested
for new parser instances. For example, a user may request the
<a href="../../../../../../apache.org/xml/features/validation/schema">http://apache.org/xml/features/validation/schema</a>
feature, which allows XML Schema validation to be turned on or off.
This can now be performed directly on a
<tt class="literal">SAXParserFactory</tt>, as shown here:
</p>

<blockquote><pre class="code">    SAXParserFactory myFactory = SAXParserFactory.newInstance( );

    // Turn on XML Schema validation
    myFactory.setFeature(
        "http://apache.org/xml/features/validation/schema", true);

    // Now get an instance of the parser with schema validation enabled
    SAXParser parser = myFactory.newSAXParser( );</pre></blockquote>

<p>A <tt class="literal">getFeature( )</tt><a name="INDEX-923" />
<a name="INDEX-924" /> method is provided to complement the
<tt class="literal">setFeature( )</tt> method and allow querying of
particular features. This method returns a simple
<tt class="literal">boolean</tt> value.
</p>

<p>In addition to providing a means to set SAX features (with true or
false values), JAXP 1.1 supports the setting of SAX properties (with
object values). For example, using an instance of a SAX parser, you
could set the property <a href="../../../../../../xml.org/sax/properties/lexical-handler">http://xml.org/sax/properties/lexical-handler</a>,
assigning that property an implementation of a SAX
<tt class="literal">LexicalHandler</tt> interface. Because properties like
this lexical one are parser-specific instead of factory-specific (as
features were), a <tt class="literal">setProperty(
)</tt><a name="INDEX-925" />
<a name="INDEX-926" /> method is provided on the JAXP
<tt class="literal">SAXParser</tt> class rather than on the
<tt class="literal">SAXParserFactory</tt> class. And as with features, a
<tt class="literal">getProperty( )</tt><a name="INDEX-927" />
<a name="INDEX-928" /> complement is provided to return the value
associated with a specific property, also on the
<tt class="literal">SAXParser</tt> class.
</p>

</div>

<a name="javaxml2-CHP-9-SECT-3.1.3" /><div class="sect3">
<h3 class="sect3">9.3.1.3. Updates to the DOM</h3>

<p><a name="INDEX-929" />A number of
new methods are available for the <a name="INDEX-930" />DOM portion of JAXP, as well. These
methods have been added to existing JAXP classes to support both DOM
Level 2 options, as well as common configuration situations that have
arisen in the last year. I won't cover all of these options and
the corresponding methods here since many are used only in very
unusual situations and won't be needed in most of your
applications. I encourage you to check these out in the latest JAXP
specification. With the coverage of standards updates, SAX changes,
and additional DOM methods, you're ready to read about the most
substantial change in JAXP 1.1: the TrAX API.
</p>

</div>
</div>
<a name="javaxml2-CHP-9-SECT-3.2" /><div class="sect2">
<h3 class="sect2">9.3.2. The TrAX API</h3>

<p><a name="INDEX-931" /> <a name="INDEX-932" />So far,
I've covered the changes to XML parsing in JAXP. Now I can turn
to XML transformations in JAXP 1.1. Perhaps the most exciting
development in the newest version of Sun's API is that JAXP 1.1
allows vendor-neutral XML document transformations. While this
vendor-neutrality may cloud the definition of JAXP as simply a
parsing API, it is a much-needed facility since XSL processors
currently employ different methods and means for enabling user and
developer interaction. In fact, XSL processors have even greater
variance across providers than their XML parser counterparts.
</p>

<p>Originally, the JAXP expert group sought to provide a simple
<tt class="literal">Transform</tt> class with a few methods to allow
specification of a stylesheet and subsequent document
transformations. This first effort turned out to be rather shaky, but
I'm happy to report that we (the JAXP expert group) are going
much further in our continued efforts. Scott Boag and Michael Kay,
two of the XSL processor gurus (working on Apache Xalan and SAXON,
respectively), have worked with many others to develop TrAX, which
supports a much wider array of options and features, and provides
complete support for almost all XML transformations -- all under
the JAXP umbrella. The result is the addition of the
<tt class="literal">javax.xml.transform</tt>
<a name="INDEX-933" />package,
and a few subpackages, to the JAXP API.
</p>

<p>Like the parsing portion of JAXP, performing <a name="INDEX-934" />XML transformations requires
three basic steps:
</p>

<ul><li>
<p>Obtain a <tt class="literal">Transformer</tt> factory </p>
</li><li>
<p>Retrieve a <tt class="literal">Transformer</tt> </p>
</li><li>
<p>Perform operations (transformations) </p>
</li></ul>
<a name="javaxml2-CHP-9-SECT-3.2.1" /><div class="sect3">
<h3 class="sect3">9.3.2.1. Working with the factory</h3>

<p>For the transformation portion of JAXP, the factory you will work
with is represented by the class
<tt class="literal">javax.xml.transform.TransformerFactory</tt><a name="INDEX-935" />
<a name="INDEX-936" />.
This class is analogous to the <tt class="literal">SAXParserFactory</tt>
and <tt class="literal">DocumentBuilderFactory</tt> classes that I already
covered in both the JAXP 1.0 and 1.1 sections. Of course, simply
obtaining a factory instance to work with is a piece of cake:
</p>

<blockquote><pre class="code">TransformerFactory factory = TransformerFactory.newInstance( );</pre></blockquote>

<p>Nothing special here, just basic factory design principles at work,
in conjunction with a singleton pattern.
</p>

<p>Once the factory is available, various options can be set upon the
factory. Those options will affect all instances of
<tt class="literal">Transformer</tt> (which is covered in a minute) created
by that factory. You can also obtain instances of
<tt class="literal">javax.xml.transform.Templates</tt><a name="INDEX-937" />
through the <tt class="literal">TransformerFactory</tt>. Templates are an
advanced JAXP/TrAX concept, and covered at the end of the chapter.
</p>

<p>The first of the options you can work with are
<em class="emphasis">attributes</em><a name="INDEX-938" />.
These are not XML attributes, but are similar to the properties used
in SAX. Attributes allow options to be passed to the underlying XSL
processor, which may be Apache Xalan, SAXON, or Oracle's XSL
processor (or, theoretically, any TrAX-compliant processor). They are
largely vendor-dependent, though. Like the parsing side of JAXP, a
<tt class="literal">setAttribute( )</tt><a name="INDEX-939" />
<a name="INDEX-940" /> method is provided as well as a
counterpart, <tt class="literal">getAttribute(
)</tt><a name="INDEX-941" />
<a name="INDEX-942" />. Also like <tt class="literal">setProperty(
)</tt>, the mutator method (<tt class="literal">setAttribute( )</tt>)
takes an attribute name and <tt class="literal">Object</tt> value. And like
<tt class="literal">getProperty( )</tt>, the accessor method
(<tt class="literal">getAttribute( )</tt>) takes an attribute name and
returns the associated <tt class="literal">Object</tt> value.
</p>

<p>Setting an
<tt class="literal">ErrorListener</tt><a name="INDEX-943" />
<a name="INDEX-944" />
is the second option available. Defined in the
<tt class="literal">javax.xml.transform.ErrorListener</tt> interface, an
<tt class="literal">ErrorListener</tt> allows problems in transformation to
be caught and handled programmatically. If this sounds like
<tt class="literal">org.xml.sax.ErrorHandler</tt>, it is very similar.
<a href="ch09_03.htm">Example 9-6</a> shows this interface.
</p>

<a name="javaxml2-CHP-9-EX-6" /><div class="example">
<h4 class="objtitle">Example 9-6. The ErrorListener interface </h4>
<blockquote><pre class="code">package javax.xml.transform;

public interface ErrorListener {
    public void warning(TransformerException exception)
        throws TransformerException;
    public void error(TransformerException exception)
        throws TransformerException;
    public void fatalError(TransformerException exception)
        throws TransformerException;
}</pre></blockquote>
</div>

<p>Creating an implementation of this interface, filling the three
callback methods, and using the <tt class="literal">setErrorListener(
)</tt><a name="INDEX-945" />
<a name="INDEX-946" /> method on the
<tt class="literal">TransformerFactory</tt> instance you are working with
sets you up to deal with any errors that occur during transformation.
</p>

<p><a name="INDEX-947" />
<a name="INDEX-948" />Finally,
a method is provided to set and retrieve the URI resolver for the
instances generated by the factory. The interface defined in
<tt class="literal">javax.xml.transform.URIResolver</tt> also behaves
similarly to a SAX counterpart,
<tt class="literal">org.xml.sax.EntityResolver</tt>. The interface has a
single method, shown in <a href="ch09_03.htm">Example 9-7</a>.
</p>

<a name="javaxml2-CHP-9-EX-7" /><div class="example">
<h4 class="objtitle">Example 9-7. The URIResolver interface </h4>
<blockquote><pre class="code">package javax.xml.transform;

public interface URIResolver {
    public Source resolve(String href, String base)
        throws TransformerException;
}</pre></blockquote>
</div>

<p>This interface, when implemented, allows URIs found in XSL constructs
like <tt class="literal">xsl:import</tt> and <tt class="literal">xsl:include</tt>
to be handled. Returning a <tt class="literal">Source</tt> (which
I'll cover in a moment), you can instruct your transformer to
search for the specified document in various locations when a
particular URI is encountered. For example, when an include of the
URI <em class="emphasis">http://www.oreilly.com/oreilly.xsl</em> is
encountered, you might instead return the local document
<em class="filename">alternateOreilly.xsl</em> and prevent the need for
network access. Implementations of the <tt class="literal">URIResolver</tt>
interface can be set using the
<tt class="literal">TransformerFactory</tt>'s
<tt class="literal">setURIResolver( )</tt> method, and retrieved using the
<tt class="literal">getURIResolver( )</tt> method.
</p>

<p>Finally, once you set the options of your choice, you can obtain an
instance, or instances, of a
<tt class="literal">Transformer</tt><a name="INDEX-949" /> through the
<tt class="literal">newTransformer(
)</tt><a name="INDEX-950" />
<a name="INDEX-951" /> method of the factory, as shown here:
</p>

<blockquote><pre class="code">    // Get the factory
    TransformerFactory factory = TransformerFactory.newInstance( );

    // Configure the factory
    factory.setErrorResolver(myErrorResolver);
    factory.setURIResolver(myURIResolver);

    // Get a Transformer to work with, with the options specified
    Transformer transformer = 
        factory.newTransformer(new StreamSource("foundation.xsl"));</pre></blockquote>

<p>As you can see, this method takes the stylesheet as input to use in
all transformations for that <tt class="literal">Transformer</tt> instance.
In other words, if you wanted to transform a document using
stylesheet A and stylesheet B, you would need two
<tt class="literal">Transformer</tt> instances, one for each stylesheet. If
you wanted to transform multiple documents with the same stylesheet
(call it stylesheet C), however, you would need only a single
<tt class="literal">Transformer</tt> instance, associated with stylesheet
C. Don't worry about the <tt class="literal">StreamSource</tt> class;
that's coming next.
</p>

</div>

<a name="javaxml2-CHP-9-SECT-3.2.2" /><div class="sect3">
<h3 class="sect3">9.3.2.2. Transforming XML</h3>

<p><a name="INDEX-952" />Once
you have an instance of a <tt class="literal">Transformer</tt>, you can go
about actually performing XML transformations. This consists of two
basic steps:
</p>

<ul><li>
<p>Set the XSL stylesheet to use</p>
</li><li>
<p>Perform the transformation, specifying the XML document and result
target
</p>
</li></ul>
<p>As I have demonstrated, the first step is really the easiest. A
stylesheet can be supplied when obtaining a
<tt class="literal">Transformer</tt> instance from the factory. The
location of this stylesheet must be specified by providing a
<tt class="literal">javax.xml.transform.Source</tt> instance (actually an
instance of an implementation of the <tt class="literal">Source</tt>
interface) for its location. The <tt class="literal">Source</tt> interface,
which you've seen in a few code samples, is the means of
locating an input, be it a stylesheet, document, or other information
set. TrAX provides the <tt class="literal">Source</tt> interface and three
concrete implementations:
</p>

<ul><li>
<p><tt class="literal">javax.xml.transform.stream.StreamSource</tt> </p>
</li><li>
<p><tt class="literal">javax.xml.transform.dom.DOMSource</tt> </p>
</li><li>
<p><tt class="literal">javax.xml.transform.sax.SAXSource</tt> </p>
</li></ul>
<p>The first of these,
<tt class="literal">StreamSource</tt><a name="INDEX-953" />
<a name="INDEX-954" />,
reads input from some type of I/O device. Constructors are provided
for accepting an <tt class="literal">InputStream</tt>, a
<tt class="literal">Reader</tt>, or a <tt class="literal">String</tt> system ID
as input. Once created, the <tt class="literal">StreamSource</tt> can be
passed to the <tt class="literal">Transformer</tt> for use. This will
probably be the <tt class="literal">Source</tt> implementation you use most
commonly in programs. It's great for reading a document from a
network, input stream, user input, or other static representation of
XSL stylesheets.
</p>

<p>The next <tt class="literal">Source</tt> implementation,
<tt class="literal">DOMSource</tt>, provides for reading from an existing
DOM tree. It provides a constructor for taking in a DOM
<tt class="literal">org.w3c.dom.Node</tt>, and will read from that
<tt class="literal">Node</tt> when used. This is ideal for supplying an
existing DOM tree to a transformation, perhaps if parsing has already
occurred and an XML document is already in memory as a DOM structure,
or if you've built a DOM tree programmatically.
</p>

<p><tt class="literal">SAXSource</tt> provides for reading input from SAX
producers. This <tt class="literal">Source</tt> implementation takes either
a SAX <tt class="literal">org.xml.sax.InputSource</tt>, or an
<tt class="literal">org.xml.sax.XMLReader</tt> as input, and uses the
events from these sources. This is ideal for situations in which a
SAX content handler is already in use, and callbacks are set up and
need to be triggered prior to transformations.
</p>

<p>Once you've obtained an instance of a
<tt class="literal">Transformer</tt> (by providing the stylesheet to use
through an appropriate <tt class="literal">Source</tt>), you're ready
to perform a transformation. The<a name="INDEX-955" />
<a name="INDEX-956" /> <tt class="literal">transform( )</tt> method is
used as shown here:
</p>

<blockquote><pre class="code">    // Get the factory
    TransformerFactory factory = TransformerFactory.newInstance( );

    // Configure the factory
    factory.setErrorResolver(myErrorResolver);
    factory.setURIResolver(myURIResolver);

    // Get a Transformer to work with, with the options specified
    Transformer transformer = 
        factory.newTransformer(new StreamSource("foundation.xsl"));

    // Perform transformation on myDocument, and print out result
    transfomer.transform(new StreamSource("asimov.xml"),
                         new StreamResult("results.xml"));</pre></blockquote>

<p>The <tt class="literal">transform( )</tt> method takes two arguments: a
<tt class="literal">Source</tt> implementation, and a
<tt class="literal">javax.xml.transform.Result</tt> implementation. You
should already be seeing the symmetry in how this works and have an
idea about the functionality within the <tt class="literal">Result</tt>
interface. The <tt class="literal">Source</tt> provides the XML document to
be transformed, and the <tt class="literal">Result</tt> provides an output
target for the transformation. Like <tt class="literal">Source</tt>, there
are three concrete implementations of the <tt class="literal">Result</tt>
interface provided with TrAX and JAXP:
</p>

<ul><li>
<p><tt class="literal">javax.xml.transform.stream.StreamResult</tt> </p>
</li><li>
<p><tt class="literal">javax.xml.transform.dom.DOMResult</tt> </p>
</li><li>
<p><tt class="literal">javax.xml.transform.sax.SAXResult</tt> </p>
</li></ul>
<p>The <tt class="literal">StreamResult</tt><a name="INDEX-957" />
<a name="INDEX-958" />
class takes as a construction mechanism either an
<tt class="literal">OutputStream</tt> (like <tt class="literal">System.out</tt> for easy debugging!), a Java
<tt class="literal">File</tt>, a <tt class="literal">String</tt> system ID, or a
<tt class="literal">Writer</tt>. <tt class="literal">DOMResult</tt> takes a DOM
<tt class="literal">Node</tt> to output the transformation to (presumably
as a DOM <tt class="literal">org.w3c.dom.Document</tt>), and
<tt class="literal">SAXResult</tt> takes a SAX
<tt class="literal">ContentHandler</tt> instance to fire callbacks to,
resulting from the transformed XML. All are analogous to their
<tt class="literal">Source</tt> counterparts.
</p>

<p>While the previous example shows transforming from a stream to a
stream, any combination of sources and results is possible. Here are
a few examples:
</p>

<blockquote><pre class="code">    // Perform transformation on jordan.xml, and print out result
    transformer.transform(new StreamSource("jordan.xml"),
                         new StreamResult(System.out));

    // Transform from SAX and output results to a DOM Node
    transformer.transform(new SAXSource(
                              new InputSource(
                                  "http://www.oreilly.com/catalog.xml")),
                           new DOMResult(DocumentBuilder.newDocument( )));

    // Transform from DOM and output to a File
    transformer.transform(new DOMSource(domTree),
                          new StreamResult(
                              new FileOutputStream("results.xml")));

    // Use a custom source and result (JDOM)
    transformer.transform(new org.jdom.trax.JDOMSource(myJdomDocument),
                          new org.jdom.trax.JDOMResult(
                              new org.jdom.Document( )));</pre></blockquote>

<p>TrAX provides tremendous flexibility in moving from various input
types to various output types, and in using XSL stylesheets in a
variety of formats, such as files, in-memory DOM trees, SAX readers,
and so on.
</p>

</div>

<a name="javaxml2-CHP-9-SECT-3.2.3" /><div class="sect3">
<h3 class="sect3">9.3.2.3. Odds and ends</h3>

<p>Before closing shop on JAXP, there are a few bits and pieces of TrAX
I haven't yet talked about. I won't treat these
completely, as they are less commonly used, but I will touch on them
briefly. First, TrAX introduces an interface called
<tt class="literal">SourceLocator</tt>, also in the
<tt class="literal">javax.xml.transform</tt> package. This class functions
for transformations exactly as the <tt class="literal">Locator</tt> class
did for SAX parsing: it supplies information about where action is
occurring. Most commonly used for error reporting, the interface
looks like this:
</p>

<blockquote><pre class="code">package javax.xml.transform;

public interface SourceLocator {
    public int getColumnNumber( );
    public int getLineNumber( );
    public String getPublicId( );
    public String getSystemId( );
}</pre></blockquote>

<p>I won't comment much on this interface, as it's pretty
self-explanatory. However, you should know that in the
<tt class="literal">javax.xml.transform.dom</tt> package, there is a
subinterface called <tt class="literal">DOMLocator</tt>. This interface
adds the <tt class="literal">getOriginatingNode( )</tt> method, which
returns the DOM node being processed. This makes error handling quite
easy when working with a <tt class="literal">DOMSource</tt>, and is useful
in applications that work with DOM trees.
</p>

<p>TrAX also provides a concrete class,
<tt class="literal">javax.xml.transform.OutputKeys</tt>, which defines
several constants for use in output properties for transformations.
These constants can then be used for setting properties on a
<tt class="literal">Transformer</tt> or a <tt class="literal">Templates</tt>
object. That leads me to the last subject dealing with TrAX.
</p>

<p>The <tt class="literal">Templates</tt> interface in TrAX is used when a set
of output properties is desired across multiple transformations, or
when a set of transformation instructions can be used repeatedly. By
supplying a <tt class="literal">Source</tt> to a
<tt class="literal">TransformerFactory</tt>'s <tt class="literal">newTemplates(
)</tt> method, you get an instance of the
<tt class="literal">Templates</tt> object:
</p>

<blockquote><pre class="code">// Get a factory
TransformerFactory factory = TransformerFactory.newInstance( );

// Get a Templates object
Templates template = factory.newTemplates(new StreamSource("html.xsl"));</pre></blockquote>

<p>At this point, the <tt class="literal">template</tt> object would be a
compiled representation of the transformation detailed in <em class="emphasis">html.xsl</em> (in this example, a stylesheet that
converts XML to HTML). By using a <tt class="literal">Templates</tt>
object, transformations can be performed from this template across
threads, and you also get some optimizations, because instructions
are precompiled. Once you have gone that far, you need to generate a
<tt class="literal">Transformer</tt>, but from the
<tt class="literal">Templates</tt> object, rather than the factory:
</p>

<blockquote><pre class="code">// Get a transformer
Transformer transformer = template.newTransformer( );

// Transform
transformer.transform(new DOMSource(orderForm), 
                      new StreamResult(res.getOutputStream( )));</pre></blockquote>

<p>Here, there is no need to supply a <tt class="literal">Source</tt> to the
<tt class="literal">newTransformer( )</tt> method, as the transformer is
simply a set of (already) compiled instructions. From there,
it's business as usual. In this example, a DOM tree that
represents an order form is supplied to the transformation, processed
using the <em class="emphasis">html.xsl</em> stylesheet,
and then sent to a servlet's output stream for display. Pretty
slick, huh? As a general rule, if you are going to use a stylesheet
more than twice, use a <tt class="literal">Templates</tt> object; it will
pay off in performance. Additionally, anytime you are dealing with
threads, <tt class="literal">Templates</tt> are the only way to
go.<a name="INDEX-959" /><a name="INDEX-960" /> <a name="INDEX-961" /> 
</p>

</div>
</div>


<hr width="684" align="left" />
<div class="navbar"><table width="684" border="0"><tr><td align="left" valign="top" width="228"><a href="ch09_02.htm"><img alt="Previous" border="0" src="../gifs/txtpreva.gif" /></a></td><td align="center" valign="top" width="228"><a href="index.htm"><img alt="Home" border="0" src="../gifs/txthome.gif" /></a></td><td align="right" valign="top" width="228"><a href="ch09_04.htm"><img alt="Next" border="0" src="../gifs/txtnexta.gif" /></a></td></tr><tr><td align="left" valign="top" width="228">9.2. JAXP 1.0</td><td align="center" valign="top" width="228"><a href="index/index.htm"><img alt="Book Index" border="0" src="../gifs/index.gif" /></a></td><td align="right" valign="top" width="228">9.4. Gotcha!</td></tr></table></div>
<hr width="684" align="left" />

<img alt="Library Navigation Links" border="0" src="../gifs/navbar.gif" usemap="#library-map" />
<p><p><font size="-1"><a href="copyrght.htm">Copyright &copy; 2002</a> O'Reilly &amp; Associates. All rights reserved.</font></p>

<map name="library-map">
<area shape="rect" coords="0,0,85,93" href="../index.htm"><area shape="rect" coords="85,0,180,98" href="../sax2/index.htm"><area shape="rect" coords="182,-1,261,100" href="../xmlnut/index.htm"><area shape="rect" coords="263,1,384,96" href="index.htm"><area shape="rect" coords="386,1,463,100" href="../jxslt/index.htm"><area shape="rect" coords="466,1,533,112" href="../xslt/index.htm"><area shape="rect" coords="535,-1,610,108" href="../schema/index.htm"><area shape="rect" coords="613,1,696,121" href="../pxml/index.htm">
</map>

</body></html>