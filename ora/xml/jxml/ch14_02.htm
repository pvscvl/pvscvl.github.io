<html><head><title>mytechbooks.com (Java &amp; XML, 2nd Edition)</title><link rel="stylesheet" type="text/css" href="../style/style1.css" />

<meta name="DC.Creator" content="Brett McLaughlin" /><meta name="DC.Format" content="text/xml" scheme="MIME" /><meta name="DC.Language" content="en-US" /><meta name="DC.Publisher" content="O'Reilly &amp; Associates, Inc." /><meta name="DC.Source" scheme="ISBN" content="059600197L" /><meta name="DC.Subject.Keyword" content="stuff" /><meta name="DC.Title" content="Java &amp; XML, 2nd Edition" /><meta name="DC.Type" content="Text.Monograph" />

</head><body bgcolor="#ffffff">

<img alt="Book Home" border="0" src="gifs/smbanner.gif" usemap="#banner-map" /><map name="banner-map"><area shape="rect" coords="1,-2,616,66" href="index.htm" alt="Java and XML, 2nd Edition" /><area shape="rect" coords="629,-11,726,25" href="jobjects/fsearch.htm" alt="Search this book" /></map>

<div class="navbar"><table width="684" border="0"><tr><td align="left" valign="top" width="228"><a href="ch14_01.htm"><img alt="Previous" border="0" src="../gifs/txtpreva.gif" /></a></td><td align="center" valign="top" width="228"></td><td align="right" valign="top" width="228"><a href="ch14_03.htm"><img alt="Next" border="0" src="../gifs/txtnexta.gif" /></a></td></tr></table></div>



<h2 class="sect1">14.2. mytechbooks.com</h2>

<p>With the Foobar Public Library allowing access to an XML listing of
its new books, mytechbooks.com is moving closer to its goal of
providing up-to-date content to its customers. In addition,
mytechbooks.com already has an established standard for using Java
for application development. This makes the process of accessing and
using the XML from the library even easier, as Java has the excellent
support for XML we have been looking at throughout this book.
You'll need to allow mytechbooks.com to provide an online
listing of new books first, and then look at how to get this
information out to its customers automatically.
</p>

<a name="javaxml2-CHP-14-SECT-2.1" /><div class="sect2">
<h3 class="sect2">14.2.1. Filtering XML Data</h3>

<p>If you remember, the Foobar Public Library allowed books on several
different subjects to be entered into its system; mytechbooks.com
wants only the books about computer-related subjects. Fortunately,
the library captured this information in the
<tt class="literal">subject</tt> attribute of the <tt class="literal">book</tt>
element for each book in its XML data. The first task is to filter
out any book whose subject is not "Computers". Once the
technical books have been obtained, they should be formatted into an
HTML page that can be shown to customers visiting mytechbooks.com.
</p>

<p>For this company and application, there is no static HTML, since the
page showing new listings must be generated each time it is accessed.
I'm going to use a servlet here for handling these responses.
Although Apache Cocoon would be an excellent choice for converting
the XML data from the library into an HTML response, mytechbooks.com
is under tremendous time pressure to make these book listings
available, and does not want to introduce such a large change into
its system immediately; instead, it would prefer to use XML parsers
and processors and then add Cocoon in as a second-phase addition.
This means that you'll have to handle conversion from XML to
HTML as well as the filtering of the data and the addition of other
presentation-specific items, such as a company logo and menu bar.
</p>

<p>However, taking all the information at your disposal about XML and
XSL, you remember that even without Cocoon you can use XSL to
transform an XML document into HTML. Applying a transformation would
also allow you to filter out the books that do not have the subject
criteria that mytechbooks.com desires. With this in mind, it's
simple to create an <a name="INDEX-1364" />XSL
stylesheet that can be applied to the XML response from the Foobar
Public Library. <a href="ch14_02.htm">Example 14-4</a> shows the beginning of
this stylesheet, which handles generation of the HTML specific to the
mytechbooks.com web site.
</p>

<a name="javaxml2-CHP-14-EX-4" /><div class="example">
<h4 class="objtitle">Example 14-4. XSL stylesheet for Foobar Public Library book listings </h4>
<blockquote><pre class="code">&lt;?xml version="1.0"?&gt;

&lt;xsl:stylesheet xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
                version="1.0"
&gt;

  &lt;xsl:template match="books"&gt;
   &lt;html&gt;
    &lt;head&gt;
     &lt;title&gt;mytechbooks.com - Your Computer Bookstore&lt;/title&gt;
    &lt;/head&gt;
    &lt;body background="/javaxml/techbooks/images/background.gif" 
          link="#FFFFFF" vlink="#FFFFFF" alink="#FFFFFF"&gt;
     &lt;h1 align="center"&gt;
      &lt;font face="Arial" color="#00659C"&gt;
       &amp;lt;mytechbooks.com&amp;gt;
      &lt;/font&gt;
     &lt;/h1&gt;
     &lt;p align="center"&gt;
      &lt;i&gt;&lt;b&gt;
       Your source on the Web for computing and technical books.
      &lt;/b&gt;&lt;/i&gt;
     &lt;/p&gt;
     &lt;p align="center"&gt;
      &lt;b&gt;&lt;font size="4" color="#00659C"&gt;
       &lt;u&gt;New Listings&lt;/u&gt;
      &lt;/font&gt;&lt;/b&gt;
     &lt;/p&gt;
     &lt;table border="0" cellpadding="5" cellspacing="5"&gt;
      &lt;tr&gt;
       &lt;td valign="top" align="center" nowrap="nowrap" width="115"&gt;
        &lt;p align="center"&gt;
         &lt;font color="#FFFFFF"&gt;&lt;b&gt;
          &lt;a href="/javaxml/techbooks/"&gt;Home&lt;/a&gt;
         &lt;/b&gt;&lt;/font&gt;
        &lt;/p&gt;
        &lt;p align="center"&gt;
         &lt;font color="#FFFFFF"&gt;&lt;b&gt;
          &lt;a href="/javaxml/techbooks/current.html"&gt;Current Listings&lt;/a&gt;
         &lt;/b&gt;&lt;/font&gt;
        &lt;/p&gt;
        &lt;p align="center"&gt;
         &lt;b&gt;&lt;font color="#FFFFFF"&gt;
          &lt;i&gt;New Listings&lt;/i&gt;
         &lt;/font&gt;&lt;/b&gt;
        &lt;/p&gt;
        &lt;p align="center"&gt;
         &lt;font color="#FFFFFF"&gt;&lt;b&gt;
          &lt;a href="/javaxml/techbooks/contact.html"&gt;Contact Us&lt;/a&gt;
         &lt;/b&gt;&lt;/font&gt;
        &lt;/p&gt;
       &lt;/td&gt;
       &lt;td valign="top" align="left"&gt;
        &lt;table border="0" cellpadding="5" cellspacing="5"&gt;
         &lt;tr&gt;
          &lt;td width="450" align="left" valign="top"&gt;
           &lt;p&gt;
            &lt;b&gt;
             Welcome to &lt;font face="courier"&gt;mytechbooks.com&lt;/font&gt;, 
             your source on the Web for computing and technical books.
             Our newest offerings are listed on the left.  To purchase 
             any of these fine books, simply click on the 
             &amp;quot;Buy this Book!&amp;quot; link, and you will be taken to
             the shopping cart for our store.  Enjoy!
            &lt;/b&gt;
           &lt;/p&gt;
           &lt;p&gt;
            &lt;b&gt;
             You should also check out our current listings, information 
             about the store, and you can call us with your questions.  
             Use the links on the menu to the left to access this 
             information.  Thanks for shopping!
            &lt;/b&gt;
           &lt;/p&gt;
          &lt;/td&gt;
          &lt;td align="left"&gt;

        &lt;!-- Handle creation of content for each new *computer* book --&gt;

          &lt;/td&gt;
         &lt;/tr&gt;
        &lt;/table&gt;
       &lt;/td&gt;
      &lt;/tr&gt;
     &lt;/table&gt;
    &lt;/body&gt;
   &lt;/html&gt;
  &lt;/xsl:template&gt;

&lt;/xsl:stylesheet&gt;</pre></blockquote>
</div>

<p>While this doesn't yet filter the incoming XML data or
transform that data, it does take care of the HTML interface for the
user. Often it is much easier to take care of these presentation
details first, and then add the transformation-specific logic
afterwards.
</p>

<a name="ch14-8-fm2xml" /><blockquote><b>NOTE:</b> 

When developing XSL stylesheets, particularly for web applications, you should test the results with your XSLT Processor using its command-line capabilities. This can help you ensure that the stylesheet is transforming your document as you expect at each step of its development; trying to debug a large stylesheet's problems once it is complete is much more difficult. For this example, you could access the <em class="emphasis">supplyBooks.pl</em> script in a web browser, save the results to an XML file, and test that and the stylesheet as you follow the examples.
</p>
</blockquote>
<p>Similar to the Foobar Public Library's application, this
provides a menu on the left with hyperlinks to other portions of the
application, contains some text about the company and its offerings,
and then leaves a right column open for the addition of new book
listings.<a name="INDEX-1365" />
</p>

<p>Before filtering the content, you need to add a template for
outputting HTML content from a single book element's entry. As
you recall, an entry looks like this:
</p>

<blockquote><pre class="code">&lt;book subject="Computers"&gt;
 &lt;title&gt;&lt;![CDATA[Running Linux]]&gt;&lt;/title&gt;
 &lt;author&gt;&lt;![CDATA[Matt Welsh]]&gt;&lt;/author&gt;
 &lt;publisher&gt;&lt;![CDATA[O'Reilly &amp; Associates]]&gt;&lt;/publisher&gt;
 &lt;numPages&gt;729&lt;/numPages&gt;
 &lt;saleDetails&gt;
  &lt;isbn&gt; 156592469X&lt;/isbn&gt;
  &lt;price&gt;39.95&lt;/price&gt;
 &lt;/saleDetails&gt;
 &lt;description&gt;&lt;![CDATA[In the tradition of all O'Reilly books, Running 
  Linux features clear, step-by-step instructions that always seem to 
  provide just the right amount of information.]]&gt;&lt;/description&gt;
&lt;/book&gt;</pre></blockquote>

<p>You can then convert this to HTML with the following
<a name="INDEX-1366" />XSL template:
</p>

<blockquote><pre class="code">&lt;?xml version="1.0"?&gt;

&lt;xsl:stylesheet xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
                version="1.0"
&gt;

 &lt;xsl:template match="books"&gt;
   &lt;!-- Presentation of User Interface --&gt;
 &lt;/xsl:template&gt;
<tt class="userinput"><b>
 &lt;xsl:template match="book"&gt;
  &lt;table border="0" cellspacing="1" bgcolor="#000000"&gt;
   &lt;tr&gt;
    &lt;td&gt;
     &lt;table border="0" cellpadding="3" cellspacing="0"&gt;
      &lt;tr&gt;
       &lt;td width="100%" bgcolor="#00659C" nowrap="nowrap" align="center"&gt;
        &lt;b&gt;&lt;font color="#FFFFFF"&gt;
         &lt;xsl:value-of select="title" /&gt;
        &lt;/font&gt;&lt;/b&gt;
       &lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
       &lt;td width="100%" align="center" nowrap="nowrap" bgcolor="#FFFFFF"&gt;
        &lt;font color="#000000"&gt;&lt;b&gt;
         Author: &lt;xsl:value-of select="author" /&gt;&lt;br /&gt;
         Publisher: &lt;xsl:value-of select="publisher" /&gt;&lt;br /&gt;
         Pages: &lt;xsl:value-of select="numPages" /&gt;&lt;br /&gt;
         Price: &lt;xsl:value-of select="saleDetails/price" /&gt;&lt;br /&gt;
         &lt;br /&gt;          
        &lt;/b&gt;&lt;/font&gt;
        &lt;xsl:element name="a"&gt;
         &lt;xsl:attribute name="href"&gt;/servlets/BuyBookServlet?isbn=
          &lt;xsl:value-of select="saleDetails/isbn" /&gt;
         &lt;/xsl:attribute&gt;
         &lt;font color="#00659C"&gt;Buy the Book!&lt;/font&gt;
        &lt;/xsl:element&gt;
       &lt;/td&gt;
      &lt;/tr&gt;
     &lt;/table&gt;
    &lt;/td&gt;
   &lt;/tr&gt;
  &lt;/table&gt;
  &lt;br /&gt;
 &lt;/xsl:template&gt;</b></tt>

&lt;/xsl:stylesheet&gt;</pre></blockquote>

<p>This template matches the <tt class="literal">book</tt> element, and then
creates a table with a heading in one row, and contents in the second
row. The entire table is within another table with a black
background, which results in the appearance of the table being
surrounded by a beveled black border. The title is inserted into the
header of the table, and the information about the book (author,
publisher, pages, and price) is added to the content of the table.
Finally, a link to a Java servlet, <tt class="literal">BuyBookServlet</tt>,
is provided to allow easy access to purchasing the book. The value of
the book's <tt class="literal">isbn</tt> element is supplied as an
argument to this servlet, which enables it to load the book being
purchased.
</p>
<blockquote><b>WARNING:</b> 

In your XSL stylesheet, you should ensure that the line indicating the use of <tt class="literal">BuyBookServlet</tt> and the line with the <tt class="literal">xsl:value-of</tt> element selecting the book's ISBN number is actually one single line. If not, spaces and a carriage return could be inserted into the resultant URL, causing incorrect information to be passed to the servlet. The example stylesheet has this information broken into two lines because of the space constraints of the printed page.
</p>
</blockquote>
<p>The last addition you need to make to your stylesheet is to ensure
that the new template is applied, and that only books with the
subject "Computers" are passed to the new template. You
can reference the value of the <tt class="literal">subject</tt> attribute
with the <tt class="literal">@</tt> symbol in your stylesheet, and filter
the requests with the <tt class="literal">select</tt> attribute on the
<tt class="literal">xsl:apply-templates</tt> element:
</p>

<blockquote><pre class="code">  &lt;/td&gt;
  &lt;td align="left"&gt;
<tt class="userinput"><b>
   &lt;!-- Handle creation of content for each new *computer* book --&gt;
  &lt;xsl:apply-templates select="book[@subject='Computers']" /&gt;         </b></tt>

  &lt;/td&gt;
 &lt;/tr&gt;
&lt;/table&gt;</pre></blockquote>

<p>This references the value of the attribute and compares it to a
literal, enclosed within single quotes because the entire XPath
expression is enclosed within double quotes. Because you are
accessing an attribute of a nested element, you'll need to
reference the element by name, and surround the expression on the
element's attribute with brackets. This will ensure that only
books with a subject of "Computers" have templates
applied, and are therefore included in the HTML output. Once the
stylesheet is complete, it can be saved as <em class="emphasis">computerBooks.xsl</em> and referenced
programmatically by a Java servlet, which I'll show you how to
write next.
</p>

</div>
<a name="javaxml2-CHP-14-SECT-2.2" /><div class="sect2">
<h3 class="sect2">14.2.2. XSLT from a Servlet</h3>

<p>With <a name="INDEX-1367" />your stylesheet ready for use, you need
to add Java code to apply it to the XML data from the Foobar Public
Library. This data is accessed easily by using Java's
<tt class="literal">java.net.URL</tt> class to make an HTTP request to the
library's system. Once you have this set up, all that is left
is to actually apply the XSL transformation programmatically. <a href="ch14_02.htm">Example 14-5</a> shows the Java servlet code that loads the XML
data from the library, and indicates where the transformation code
would be inserted.
</p>

<a name="javaxml2-CHP-14-EX-5" /><div class="example">
<h4 class="objtitle">Example 14-5. Java Servlet for transforming book listings into HTML </h4>
<blockquote><pre class="code">package com.techbooks;

import java.io.FileInputStream;
import java.io.InputStream;
import java.io.IOException;
import java.io.PrintWriter;
import java.net.URL;
import javax.servlet.*;
import javax.servlet.http.*;

public class ListBooksServlet extends HttpServlet {

    /** Host to connect to for books list */
    private static final String hostname = "newInstance.com";
    /** Port number to connect to for books list */
    private static final int portNumber = 80;
    /** File to request (URI path) for books list */
    private static final String file = "/cgi/supplyBooks.pl";
    
    /** Stylesheet to apply to XML */
    private static final String stylesheet = 
        "/home/bmclaugh/javaxml/techbooks/XSL/computerBooks.xsl";

    public void service(HttpServletRequest req, HttpServletResponse res) 
        throws ServletException, IOException {            
            
        res.setContentType("text/html");            
        
        // Connect and get XML listing of books
        URL getBooksURL = new URL("http", hostname, portNumber, file);
        InputStream in = getBooksURL.openStream();

        // Transform XML for InputStream into HTML output
    }    
}</pre></blockquote>
</div>

<p>This simple servlet requests the Foobar Public Library's
application through an HTTP request, and gets the XML response in an
<tt class="literal">InputStream.<a href="#FOOTNOTE-22">[22]</a></tt> This stream should
then be used as a parameter to the XSLT processor, as well as the XSL
stylesheet defined as a constant in the servlet.
</p><blockquote class="footnote"> <a name="FOOTNOTE-22" /><p>[22] For more information on the
<tt class="literal">URL</tt> class and Java I/O, see <em class="emphasis">Java I/O</em> by Elliotte Rusty Harold
(O'Reilly).</p> </blockquote>

<p>There is currently no Java API that specifies how XSLT
transformations can occur programmatically; however, each processor
vendor should have classes that allow a transformation to be invoked
from your Java code. I continue to look at using the Apache Xalan
processor here; you should consult your processor's vendor for
the method or methods to invoke in your own programs.
</p>

<p>For Apache <a name="INDEX-1368" />Xalan, the
<tt class="literal">XSLTProcessor</tt><a name="INDEX-1369" />
<a name="INDEX-1370" />
class is provided in the <tt class="literal">org.apache.xalan.xslt</tt>
<a name="INDEX-1371" />package
for just this purpose. It takes as parameters an
<tt class="literal">XSLTInputSource</tt> wrapping the XML file to process,
an <tt class="literal">XSLTInputSource</tt> wrapping the XSL stylesheet to
apply, and an <tt class="literal">XSLTResultTarget</tt> to use for output
of the transformation. All three of these helper classes are in the
<tt class="literal">org.apache.xalan.xslt</tt> package as well. They can
conveniently be created by passing in an
<tt class="literal">InputStream</tt> (to
<tt class="literal">XSLTInputSource</tt>) or an
<tt class="literal">OutputStream</tt> (to
<tt class="literal">XSLTResultTarget</tt>). You have the XML document as an
<tt class="literal">InputStream</tt>, you can wrap the XSL stylesheet
within a <tt class="literal">FileInputStream</tt>, and the servlet API
provides easy access to the <tt class="literal">ServletOutputStream</tt>
object through the <tt class="literal">getOutputStream()</tt> method on the
<tt class="literal">HttpServletResponse</tt> object. The last detail to
address is obtaining an instance of <tt class="literal">XSLTProcessor</tt>.
Because there are several underlying mechanisms that can be used for
processing, this class is not instantiated directly, but rather
obtained through the
<tt class="literal">XSLTProcessorFactory</tt><a name="INDEX-1372" />
<a name="INDEX-1373" />
class, also in the <tt class="literal">org.apache.xalan.xslt</tt> package.
You should be familiar with factory classes by now, so all that is
left is to import the classes you'll need and add the
processing method calls to the servlet:
</p>

<blockquote><pre class="code">package com.techbooks;

import java.io.FileInputStream;
import java.io.InputStream;
import java.io.IOException;
import java.io.PrintWriter;
import java.net.URL;
import javax.servlet.*;
import javax.servlet.http.*;
<tt class="userinput"><b>
// Import Xalan XSLT Processor components
import org.apache.xalan.xslt.XSLTInputSource;
import org.apache.xalan.xslt.XSLTProcessor;
import org.apache.xalan.xslt.XSLTProcessorFactory;
import org.apache.xalan.xslt.XSLTResultTarget;</b></tt>

public class ListBooksServlet extends HttpServlet {

    /** Host to connect to for books list */
    private static final String hostname = "newInstance.com";
    /** Port number to connect to for books list */
    private static final int portNumber = 80;
    /** File to request (URI path) for books list */
    private static final String file = "/cgi/supplyBooks.pl";
    
    /** Stylesheet to apply to XML */
    private static final String stylesheet = 
        "/home/bmclaugh/javaxml/techbooks/XSL/computerBooks.xsl";

    public void service(HttpServletRequest req, HttpServletResponse res) 
        throws ServletException, IOException {            
            
        res.setContentType("text/html");            
        
        // Connect and get XML listing of books
        URL getBooksURL = new URL("http", hostname, portNumber, file);
        InputStream in = getBooksURL.openStream();

        // Transform XML for InputStream into HTML output<tt class="userinput"><b>
        try {            
            XSLTProcessor processor = XSLTProcessorFactory.getProcessor();
            
            // Transform XML with XSL stylesheet
            processor.process(new XSLTInputSource(in),
                              new XSLTInputSource(
                                  new FileInputStream(stylesheet)),
                              new XSLTResultTarget(
                                  res.getOutputStream()));
            
        } catch (Exception e) {
            PrintWriter out = res.getWriter();            
            out.println("Error: " + e.getMessage());
            out.close();
        }</b></tt>
    }    
}</pre></blockquote>

<a name="ch14-10-fm2xml" /><blockquote><b>NOTE:</b> 
I could have also used JAXP 1.1's TrAX API for performing this
translation. However, JAXP 1.1 is still pretty new as of this
writing, and I see few people adopting it (yet). Additionally, most
servlet engines, especially Tomcat, still ship with JAXP 1.0, and
many are relying on that default behavior rather than supplying a
newer version of JAXP.
</p>
</blockquote>

<p>When this new servlet is requested, it in turn requests the XML data
from the Foobar Public Library. This data (a listing of the newly
available books) is then transformed and output to the screen as
HTML. The response from the servlet should look similar to <a href="ch14_02.htm">Figure 14-4</a>.
</p>

<a name="javaxml2-CHP-14-FIG-4" /><div class="figure"><img height="436" alt="Figure 14-4" src="figs/javax_1404.gif" width="481" /></div><h4 class="objtitle">Figure 14-4. HTML output from mytechbooks.com new book listing</h4>

<p>Along with the menu links on the left (not implemented in this
example), the newest book listings are printed in a very nice format,
all with up-to-date information (thanks to the changes at the Foobar
Public Library!) as well as links to buy the book with a few
mouseclicks. Now mytechbooks.com customers can easily browse the new
book listings online; all that is left is to push this information
out to these customers, so they don't even have to type in a
URL. I'll look at solving this difficult problem<a name="INDEX-1374" /> next.
</p>

</div>


<hr width="684" align="left" />
<div class="navbar"><table width="684" border="0"><tr><td align="left" valign="top" width="228"><a href="ch14_01.htm"><img alt="Previous" border="0" src="../gifs/txtpreva.gif" /></a></td><td align="center" valign="top" width="228"><a href="index.htm"><img alt="Home" border="0" src="../gifs/txthome.gif" /></a></td><td align="right" valign="top" width="228"><a href="ch14_03.htm"><img alt="Next" border="0" src="../gifs/txtnexta.gif" /></a></td></tr><tr><td align="left" valign="top" width="228">14. Content Syndication</td><td align="center" valign="top" width="228"><a href="index/index.htm"><img alt="Book Index" border="0" src="../gifs/index.gif" /></a></td><td align="right" valign="top" width="228">14.3. Push Versus Pull</td></tr></table></div>
<hr width="684" align="left" />

<img alt="Library Navigation Links" border="0" src="../gifs/navbar.gif" usemap="#library-map" />
<p><p><font size="-1"><a href="copyrght.htm">Copyright &copy; 2002</a> O'Reilly &amp; Associates. All rights reserved.</font></p>

<map name="library-map">
<area shape="rect" coords="0,0,85,93" href="../index.htm"><area shape="rect" coords="85,0,180,98" href="../sax2/index.htm"><area shape="rect" coords="182,-1,261,100" href="../xmlnut/index.htm"><area shape="rect" coords="263,1,384,96" href="index.htm"><area shape="rect" coords="386,1,463,100" href="../jxslt/index.htm"><area shape="rect" coords="466,1,533,112" href="../xslt/index.htm"><area shape="rect" coords="535,-1,610,108" href="../schema/index.htm"><area shape="rect" coords="613,1,696,121" href="../pxml/index.htm">
</map>

</body></html>