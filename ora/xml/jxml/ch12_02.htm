<html><head><title>Setting Up (Java &amp; XML, 2nd Edition)</title><link rel="stylesheet" type="text/css" href="../style/style1.css" />

<meta name="DC.Creator" content="Brett McLaughlin" /><meta name="DC.Format" content="text/xml" scheme="MIME" /><meta name="DC.Language" content="en-US" /><meta name="DC.Publisher" content="O'Reilly &amp; Associates, Inc." /><meta name="DC.Source" scheme="ISBN" content="059600197L" /><meta name="DC.Subject.Keyword" content="stuff" /><meta name="DC.Title" content="Java &amp; XML, 2nd Edition" /><meta name="DC.Type" content="Text.Monograph" />

</head><body bgcolor="#ffffff">

<img alt="Book Home" border="0" src="gifs/smbanner.gif" usemap="#banner-map" /><map name="banner-map"><area shape="rect" coords="1,-2,616,66" href="index.htm" alt="Java and XML, 2nd Edition" /><area shape="rect" coords="629,-11,726,25" href="jobjects/fsearch.htm" alt="Search this book" /></map>

<div class="navbar"><table width="684" border="0"><tr><td align="left" valign="top" width="228"><a href="ch12_01.htm"><img alt="Previous" border="0" src="../gifs/txtpreva.gif" /></a></td><td align="center" valign="top" width="228"></td><td align="right" valign="top" width="228"><a href="ch12_03.htm"><img alt="Next" border="0" src="../gifs/txtnexta.gif" /></a></td></tr></table></div>



<h2 class="sect1">12.2. Setting Up</h2>

<p><a name="INDEX-1194" />Now that you have some basic concepts
down, it's time to get going on the fun part, the code. You
need a project or product for use, which turns out to be simpler to
find than you might think. If you want a Java-based project providing
SOAP capability, you don't have to look that far. There are two
groups of products out there: commercial and free. As in most of the
rest of the book, I'm steering away from covering commercial
products. This isn't because they are bad (on the contrary,
some are wonderful); it's because I want every reader of this
book to be able to use every example. That calls for accessibility,
something commercial products don't provide; you have to pay to
use them, or download them and at some point the trial period runs
out.
</p>

<p>That brings us to open source projects. In that realm, I see only one
available: <a name="INDEX-1195" />
<a name="INDEX-1196" />Apache SOAP. Located online at
<a href="../../../../../../xml.apache.org/soap">http://xml.apache.org/soap</a>, this
project seeks to provide a SOAP toolkit in Java. Currently in a
Version 2.2 release, you can download it from the Apache web site.
That's the version and project I use for the examples
throughout this chapter.
</p>

<a name="javaxml2-CHP-12-SECT-2.1" /><div class="sect2">
<h3 class="sect2">12.2.1. Other Options</h3>

<p>Before moving on to the installation and setup of Apache SOAP, I will
answer a few questions that might be rattling around in your head.
It's probably clear why I'm not using a commercial
product. However, you may be thinking of a couple of other open
source or related options that you might want to use, and wondering
why I am not covering those.
</p>

<a name="javaxml2-CHP-12-SECT-2.1.1" /><div class="sect3">
<h3 class="sect3">12.2.1.1. What about IBM SOAP4J?</h3>

<p>First on the list of options is <a name="INDEX-1197" /> <a name="INDEX-1198" />IBM's SOAP implementation, IBM
SOAP4J. IBM's work is actually the basis of the current Apache
SOAP project, much as IBM XML4J fed into what is now the Apache
Xerces XML parser project. Expect the IBM implementation to
resurface, wrapping the Apache SOAP project's implementation.
This is similar to what is happening with IBM's XML4J; it
currently just provides IBM packaging over Xerces. This makes some
additional levels of vendor-backing available to the open source
version, although the two (Apache and IBM) projects are using the
same codebase.
</p>

</div>

<a name="javaxml2-CHP-12-SECT-2.1.2" /><div class="sect3">
<h3 class="sect3">12.2.1.2. Isn't Microsoft a player?</h3>

<p>Yes. Without a doubt, Microsoft and its SOAP implementation, as well
as the whole .NET initiative (covered more in the next chapter), are
very important. In fact, I wanted to spend some time covering
<a name="INDEX-1199" /> <a name="INDEX-1200" />Microsoft's SOAP
implementation in detail, but it only supports COM objects and the
like, without Java support. For this reason, coverage of it
doesn't belong in a book on Java and XML. However, Microsoft
(despite the connotations we developers tend to have about the
company) is doing important work in web services, and you'd be
making a mistake in writing it off, at least in this particular
regard. If you need to communicate with COM or Visual Basic
components, I highly recommend checking out the Microsoft SOAP
toolkit, found online at <a name="INDEX-1201" /><a href="../../../../../../msdn.microsoft.com/library/default.asp,url=/nhp/Default.asp,contentid=28000523">http://msdn.microsoft.com/library/default.asp?url=/nhp/Default.asp?contentid=28000523</a>
along with a lot of other SOAP resources.
</p>

</div>

<a name="javaxml2-CHP-12-SECT-2.1.3" /><div class="sect3">
<h3 class="sect3">12.2.1.3. What's Axis?</h3>

<p>Those of you who monitor activity in Apache may have heard of
<a name="INDEX-1202" />
<a name="INDEX-1203" />
<a name="INDEX-1204" />Apache
Axis. Axis is the next-generation SOAP toolkit, also being developed
under the Apache XML umbrella. With SOAP (the specification, not a
specific implementation) undergoing fairly fast and radical change
these days, tracking it is difficult. Trying to build a version of
SOAP that meets current requirements and moves with new development
is also awfully tough. As a result, the current Apache SOAP offering
is somewhat limited in its construction. Rather than try to
rearchitect an existing toolkit, the Apache folks started fresh with
a new codebase and project; thus, Axis was born. Additionally, the
naming of SOAP was apparently going to change, from SOAP to XP and
then to XMLP. As a result, the name of this new SOAP project was
uncoupled from the specification name; thus, you have
"Axis." Of course, now it looks like the W3C is going
back to calling the specification SOAP (Version 1.2, or Version 2.0),
so things are even more confusing!
</p>

<p><a name="INDEX-1205" />Think of IBM SOAP4J as
architecture 1 of the SOAP toolkit. Following that is Apache SOAP
(covered in this chapter), which is architecture 2. Finally, Axis
provides a next-generation architecture, architecture 3. This project
is driven by SAX, while Apache SOAP is based upon DOM. Additionally,
Axis provides a more user-friendly approach in header interaction,
something missing in Apache SOAP. With all of these improvements,
you're probably wondering why I'm not covering Axis.
It's simply too early. Axis is presently trying to get together
a 0.51 release. It's not a beta, or even an alpha, really;
it's very early on. While I'd love to cover all the new
Axis features, there's no way your boss is going to let you put
in a pre-alpha release of open source software in your
mission-critical systems, now is there? As a result, I've
chosen to focus on something you <em class="emphasis">can</em> use,
<em class="emphasis">today</em>: Apache SOAP. I'm sure when Axis
does finalize, I'll update this chapter in a subsequent
revision of the book. Until then, let's focus on a solution you
can use.
</p>

</div>
</div>
<a name="javaxml2-CHP-12-SECT-2.2" /><div class="sect2">
<h3 class="sect2">12.2.2. Installation</h3>

<p><a name="INDEX-1206" />There
are two forms of installation with regard to SOAP. The first is
running a SOAP client, using the SOAP API to communicate with a
server that can receive SOAP messages. The second is running a SOAP
server, which can receive messages from a SOAP client. I cover
installation of both cases in this section.
</p>

<a name="javaxml2-CHP-12-SECT-2.2.1" /><div class="sect3">
<h3 class="sect3">12.2.2.1. The client</h3>

<p><a name="INDEX-1207" />To
use SOAP on a client, you first need to download Apache SOAP,
available online at <a href="../../../../../../xml.apache.org/dist/soap">http://xml.apache.org/dist/soap</a>. I've
downloaded Version 2.2, in the binary format (in the <em class="emphasis">version-2.2</em> subdirectory). You should then
extract the contents of the archive into a directory on your machine;
my installation is in the <em class="emphasis">javaxml2</em> directory (<em class="emphasis">c:\javaxml2</em> on my Windows machine,
<em class="emphasis">/javaxml2</em> on my Mac OS X
machine). The result is <em class="emphasis">/javaxml2/soap-2_2</em>. You'll also need to
download the JavaMail package, available from Sun at <a href="../../../../../../java.sun.com/products/javamail/">http://java.sun.com/products/javamail/</a>. This
is for the SMTP transfer protocol support included in Apache SOAP.
Then, download the JavaBeans Activation Framework (JAF), also from
Sun, available online at <a href="../../../../../../java.sun.com/products/beans/glasgow/jaf.html">http://java.sun.com/products/beans/glasgow/jaf.html</a>.
I'm assuming that you still have Xerces or another XML parser
available for use.
</p>

<a name="ch12-12-fm2xml" /><blockquote><b>NOTE:</b> 

Ensure your XML parser is JAXP-compatible and namespace-aware. Your parser, unless it's a very special case, probably meets both of these requirements. If you have problems, go back to using Xerces. 
</p>


<p>Use a recent version of Xerces; Version 1.4 or greater should
suffice. There are a number of issues with SOAP and Xerces 1.3(.1),
so I'd avoid that combination like the plague.
</p>
</blockquote>

<p>Expand both the JavaMail and JAF packages, and then add the included
<em class="emphasis">jar</em> files to your classpath, as
well as the <em class="emphasis">soap.jar</em> library.
Each of these <em class="filename">jar</em> files is either in the root
directory or in the <em class="emphasis">lib/</em>
directory of the relevant installation. At the end, your classpath
should look something like this:
</p>

<blockquote><pre class="code">$ echo $CLASSPATH
/javaxml2/soap-2_2/lib/soap.jar:/javaxml2/lib/xerces.jar:
/javaxml2/javamail-1.2/mail.jar:/javaxml2/jaf-1.0.1/activation.jar</pre></blockquote>

<p>On Windows, it should look like:</p>

<blockquote><pre class="code">c:\&gt;echo %CLASSPATH%
c:\javaxml2\soap-2_2\lib\soap.jar;c:\javaxml2\lib\xerces.jar;
c:\javaxml2\javamail-1.2\mail.jar;c:\javaxml2\jaf-1.0.1\activation.jar</pre></blockquote>

<p>Finally, add the <em class="emphasis">javaxml2/soap-2_2/</em> directory to your
classpath if you want to run the SOAP examples. I cover setup for
specific examples in this chapter as I get to them.
</p>

</div>

<a name="javaxml2-CHP-12-SECT-2.2.2" /><div class="sect3">
<h3 class="sect3">12.2.2.2. The server</h3>

<p>To build a SOAP-capable set of server components, you first need a
servlet engine. As in earlier chapters, I'll use Apache Tomcat
(available from <a href="../../../../../../jakarta.apache.org/">http://jakarta.apache.org</a>) throughout this
chapter for examples. You'll then need to add everything needed
on the client to the server's classpath. The easiest way to do
that is to drop <em class="emphasis">soap.jar</em>,
<em class="emphasis">activation.jar</em>, and <em class="emphasis">mail.jar</em>, as well as your parser, in your
servlet engine's library directory. On Tomcat, this is simply
the <em class="emphasis">lib/</em> directory, which
contains libraries that should be autoloaded. If you want to support
scripting (which is not covered in this chapter, but is in the Apache
SOAP examples), you'll need to put <em class="emphasis">bsf.jar</em> (available online at <a href="../../../../../../oss.software.ibm.com/developerworks/projects/bsf">http://oss.software.ibm.com/developerworks/projects/bsf</a>) and <em class="emphasis">js.jar</em>
(available from <a href="../../../../../../www.mozilla.org/rhino/">http://www.mozilla.org/rhino/</a>) in the same directory.
</p>

<a name="ch12-15-fm2xml" /><blockquote><b>NOTE:</b> 

If you are using Xerces with Tomcat, you'll need to perform the same renaming trick I talked about in <a href="ch10_01.htm">Chapter 10, "Web Publishing Frameworks"</a>. Rename <em class="emphasis">parser.jar</em> to <em class="emphasis">z_parser.jar</em>and <em class="emphasis">jaxp.jar</em> to <em class="emphasis">z_jaxp.jar</em>, to ensure that <em class="emphasis">xerces.jar</em> and the included version of JAXP are loaded prior to any other parser or JAXP implementation.
</p>
</blockquote>
<p>Now restart your servlet engine, and you're ready to write SOAP
server components.
</p>

</div>

<a name="javaxml2-CHP-12-SECT-2.2.3" /><div class="sect3">
<h3 class="sect3">12.2.2.3. The router servlet and admin client</h3>

<p><a name="INDEX-1208" /> <a name="INDEX-1209" />In addition to basic operation, Apache
SOAP includes a router servlet as well as an admin client; even if
you don't want to use these, I recommend you install them so
you can test your SOAP installation. This process is
servlet-engine-specific, so I just cover the Tomcat installation
here. However, installation instructions for several other servlet
engines are available online at <a name="INDEX-1210" /> <a name="INDEX-1211" /><a href="../../../../../../xml.apache.org/soap/docs/index.html">http://xml.apache.org/soap/docs/index.html</a>.
</p>

<p>Installation under <a name="INDEX-1212" />Tomcat is simple; just take the
<em class="emphasis">soap.war</em> file in the <em class="emphasis">soap-2_2/webapps</em> directory, and drop it in
your <em class="filename">$TOMCAT_HOME/</em><em class="emphasis">webapps</em> directory. That's it! To test
the installation, point your web browser to <em class="emphasis">http://localhost:8080/soap/servlet/rpcrouter</em>.
You should get a response like that shown in <a href="ch12_02.htm">Figure 12-2</a>.
</p>

<a name="javaxml2-CHP-12-FIG-2" /><div class="figure"><img height="209" alt="Figure 12-2" src="figs/javax_1202.gif" width="449" /></div><h4 class="objtitle">Figure 12-2. The RPC router servlet</h4>

<p>Although this looks like an error, it does indicate that things are
working correctly. You should get the same response pointing your
browser to the admin client, at <a href="../../../../../../localhost/soap/servlet/messagerouter">http://localhost:8080/soap/servlet/messagerouter</a>.
</p>

<p>As a final test of both the server and client, ensure you have
followed all the setup instructions so far. Then execute the
following Java class as shown, supplying your servlet URL for the RPC
router servlet:
</p>

<blockquote><pre class="code">C:\&gt;java org.apache.soap.server.ServiceManagerClient 
         http://localhost:8080/soap/servlet/rpcrouter list
Deployed Services:</pre></blockquote>

<p>You should get the empty list of services, as shown here. If you get
any other message, consult the long list of possible errors at
<a name="INDEX-1213" /> <a name="INDEX-1214" /><a href="../../../../../../xml.apache.org/soap/docs/trouble/index.html">http://xml.apache.org/soap/docs/trouble/index.html</a>.
A fairly complete list of problems that you can run into is there. If
you do get the empty list of services, then you're set up and
ready to continue with the examples in the rest of this
chapter.<a name="INDEX-1215" />
</p>

</div>
</div>


<hr width="684" align="left" />
<div class="navbar"><table width="684" border="0"><tr><td align="left" valign="top" width="228"><a href="ch12_01.htm"><img alt="Previous" border="0" src="../gifs/txtpreva.gif" /></a></td><td align="center" valign="top" width="228"><a href="index.htm"><img alt="Home" border="0" src="../gifs/txthome.gif" /></a></td><td align="right" valign="top" width="228"><a href="ch12_03.htm"><img alt="Next" border="0" src="../gifs/txtnexta.gif" /></a></td></tr><tr><td align="left" valign="top" width="228">12. SOAP</td><td align="center" valign="top" width="228"><a href="index/index.htm"><img alt="Book Index" border="0" src="../gifs/index.gif" /></a></td><td align="right" valign="top" width="228">12.3. Getting Dirty</td></tr></table></div>
<hr width="684" align="left" />

<img alt="Library Navigation Links" border="0" src="../gifs/navbar.gif" usemap="#library-map" />
<p><p><font size="-1"><a href="copyrght.htm">Copyright &copy; 2002</a> O'Reilly &amp; Associates. All rights reserved.</font></p>

<map name="library-map">
<area shape="rect" coords="0,0,85,93" href="../index.htm"><area shape="rect" coords="85,0,180,98" href="../sax2/index.htm"><area shape="rect" coords="182,-1,261,100" href="../xmlnut/index.htm"><area shape="rect" coords="263,1,384,96" href="index.htm"><area shape="rect" coords="386,1,463,100" href="../jxslt/index.htm"><area shape="rect" coords="466,1,533,112" href="../xslt/index.htm"><area shape="rect" coords="535,-1,610,108" href="../schema/index.htm"><area shape="rect" coords="613,1,696,121" href="../pxml/index.htm">
</map>

</body></html>