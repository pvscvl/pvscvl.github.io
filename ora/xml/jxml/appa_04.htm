<html><head><title>JDOM 1.0 (Beta 7) (Java &amp; XML, 2nd Edition)</title><link rel="stylesheet" type="text/css" href="../style/style1.css" />

<meta name="DC.Creator" content="Brett McLaughlin" /><meta name="DC.Format" content="text/xml" scheme="MIME" /><meta name="DC.Language" content="en-US" /><meta name="DC.Publisher" content="O'Reilly &amp; Associates, Inc." /><meta name="DC.Source" scheme="ISBN" content="059600197L" /><meta name="DC.Subject.Keyword" content="stuff" /><meta name="DC.Title" content="Java &amp; XML, 2nd Edition" /><meta name="DC.Type" content="Text.Monograph" />

</head><body bgcolor="#ffffff">

<img alt="Book Home" border="0" src="gifs/smbanner.gif" usemap="#banner-map" /><map name="banner-map"><area shape="rect" coords="1,-2,616,66" href="index.htm" alt="Java and XML, 2nd Edition" /><area shape="rect" coords="629,-11,726,25" href="jobjects/fsearch.htm" alt="Search this book" /></map>

<div class="navbar"><table width="684" border="0"><tr><td align="left" valign="top" width="228"><a href="appa_03.htm"><img alt="Previous" border="0" src="../gifs/txtpreva.gif" /></a></td><td align="center" valign="top" width="228"></td><td align="right" valign="top" width="228"><a href="appb_01.htm"><img alt="Next" border="0" src="../gifs/txtnexta.gif" /></a></td></tr></table></div>



<h2 class="sect1">A.4. JDOM 1.0 (Beta 7)</h2>

<p><a name="INDEX-1633" />JDOM
1.0 (beta 7), detailed in <a href="ch07_01.htm">Chapter 7, "JDOM"</a> and <a href="ch08_01.htm">Chapter 8, "Advanced JDOM"</a>, provides a complete view
of an XML document within a tree model. Although this model is
similar to DOM, it is not as rigid a representation; this allows the
content of an <tt class="literal">Element</tt>, for example, to be set
directly, instead of setting the value of the child of that
<tt class="literal">Element</tt>. Additionally, JDOM provides concrete
classes rather than interfaces, allowing instantiation of objects
directly rather than through the use of a factory. SAX and DOM are
only used in JDOM for the construction of a JDOM
<tt class="literal">Document</tt> object from existing XML data, and are
detailed in the <tt class="literal">org.jdom.input</tt> package.
</p>

<a name="javaxml2-APP-A-SECT-4.1" /><div class="sect2">
<h3 class="sect2">A.4.1. Package: org.jdom</h3>

<p><a name="INDEX-1634" />This
<a name="INDEX-1635" />package
contains the core classes for JDOM 1.0<a href="#FOOTNOTE-31">[31]</a>. These consist of XML objects
modeled in Java and a set of <tt class="literal">Exception</tt>s that can
be thrown when errors occur.<a href="#FOOTNOTE-32">[32]</a>
</p><blockquote class="footnote"><a name="FOOTNOTE-31" /><p>[31]Please note that
while the JDOM API is fairly stable, it is still in beta. Minor
changes may occur after the publication of this book. Please consult
<a href="../../../../../../www.jdom.org/">http://www.jdom.org</a> for the latest
JDOM classes.</p></blockquote><blockquote class="footnote"> <a name="FOOTNOTE-32" /><p>[32]To avoid complete
boredom in this section, I've left out all the JDOM exceptions
aside from the core one, <tt class="literal">JDOMException</tt>. I'd
rather focus on the classes rather than the odd exceptional
condition.</p> </blockquote>

<a name="javaxml2-APP-A-SECT-4.1.1" /><div class="sect3">
<h3 class="sect3">A.4.1.1. Attribute</h3>

<p><tt class="literal">Attribute</tt><a name="INDEX-1636" />
<a name="INDEX-1637" />
defines behavior for an XML attribute, modeled in Java. Methods allow
the user to obtain the value of the attribute as well as namespace
information about the attribute. An instance can be created with the
name of the attribute and its value, or the
<tt class="literal">Namespace</tt> and local name, as well as the value, of
the attribute. Several convenience methods are also provided for
automatic data conversion of the attribute's value.
</p>

<blockquote><pre class="code">public class Attribute {
    public Attribute(String name, String value);
    public Attribute(String name, String value, Namespace ns);

    public Element getParent( );
    public String getName( );
    public Namespace getNamespace( );
    public void setNamespace(Namespace ns);
    public String getQualifiedName( );
    public String getNamespacePrefix( );
    public String getNamespaceURI( );
    public String getValue( );
    public void setValue(String value);

    public Object clone( );
    public boolean equals(Object obj);
    public int hashCode( );
    public String toString( );

    // Convenience Methods for Data Conversion
    public String get StringValue(String default Value);
    public int getIntValue( ) throws DataConversionException;
    public long getLongValue( ) throws DataConversionException;
    public float getFloatValue( ) throws DataConversionException;
    public double getDoubleValue( ) throws DataConversionException;
    public boolean getBooleanValue( ) throws DataConversionException;
}</pre></blockquote>

</div>

<a name="javaxml2-APP-A-SECT-4.1.2" /><div class="sect3">
<h3 class="sect3">A.4.1.2. CDATA</h3>

<p>The <tt class="literal">CDATA</tt><a name="INDEX-1638" />
<a name="INDEX-1639" />
class defines behavior for XML <tt class="literal">CDATA</tt> sections.
</p>

<blockquote><pre class="code">public class CDATA {
    public CDATA(String text);

    public String getText( );
 
    public Object clone( );
    public boolean equals(Object obj);
    public int hashCode( );
    public String toString( );   
}</pre></blockquote>

</div>

<a name="javaxml2-APP-A-SECT-4.1.3" /><div class="sect3">
<h3 class="sect3">A.4.1.3. Comment</h3>

<p><tt class="literal">Comment</tt><a name="INDEX-1640" />
<a name="INDEX-1641" />
is a simple representation of an XML comment, and contains the text
within the XML comment.
</p>

<blockquote><pre class="code">public class Comment {
    public Comment(String text);

    public Document getDocument( );
    public Element getParent( );
    public String getText( );
    public void setText(String text);

    public Object clone( );
    public boolean equals(Object obj);
    public int hashCode( );
    public String toString( );
}</pre></blockquote>

</div>

<a name="javaxml2-APP-A-SECT-4.1.4" /><div class="sect3">
<h3 class="sect3">A.4.1.4. DocType</h3>

<p><tt class="literal">DocType</tt><a name="INDEX-1642" />
<a name="INDEX-1643" />
represents a <tt class="literal">DOCTYPE</tt> declaration within an XML
document. It includes information about the element name being
constrained, as well as the public ID and system ID of the external
DTD reference, if one is present.
</p>

<blockquote><pre class="code">public class DocType {
    public DocType(String elementName, String publicID, String systemID);
    public DocType(String elementName, String systemID);
    public DocType(String elementName);

    public Document getDocument( );
    public String getElementName( );
    public String getPublicID( );
    public DocType setPublicID(String publicID);
    public String getSystemID( );
    public DocType setSystemID(String systemID);

    public Object clone( );
    public boolean equals(Object obj);
    public int hashCode( );
    public String toString( );
}</pre></blockquote>

</div>

<a name="javaxml2-APP-A-SECT-4.1.5" /><div class="sect3">
<h3 class="sect3">A.4.1.5. Document</h3>

<p><tt class="literal">Document</tt><a name="INDEX-1644" />
<a name="INDEX-1645" />
models an XML document in Java. <tt class="literal">Document</tt> requires
that it be created with a root <tt class="literal">Element</tt>, although
that <tt class="literal">Element</tt> can be replaced with
<tt class="literal">setRootElement( )</tt>. The <tt class="literal">getContent(
)</tt> method returns all the content of the
<tt class="literal">Document</tt>, which includes the root
<tt class="literal">Element</tt> and any <tt class="literal">Comment</tt>s that
may exist at the document level in the XML document.
</p>

<blockquote><pre class="code">public class Document {
    public Document(Element rootElement, DocType docType);
    public Document(Element rootElement);
    public Document(List content);
    public Document(List content, DocType docType);

    public Document addContent(Comment comment);
    public Document removeContent(Comment comment);
    public Document addContent(ProcessingInstruction pi);
    public Document removeContent(ProcessingInstruction pi);
    public Element getRootElement( ) throws NoSuchElementException;
    public Document setRootElement(Element rootElement);
    public DocType getDocType( );
    public Document setDocType(DocType docType);
    public List getContent( );
    public void setMixedContent(List content);

    public Object clone( );
    public boolean equals(Object obj);
    public int hashCode( );
    public String toString( );
}</pre></blockquote>

</div>

<a name="javaxml2-APP-A-SECT-4.1.6" /><div class="sect3">
<h3 class="sect3">A.4.1.6. Element</h3>

<p><tt class="literal">Element</tt><a name="INDEX-1646" />
<a name="INDEX-1647" />
is a Java representation of an XML element. It is completely
namespace-aware, so all methods take in a single element name as an
argument, as well as optional namespace information. The result of
calls to <tt class="literal">getText( )</tt> is always a
<tt class="literal">String</tt>, either the textual content of the XML
element or an empty <tt class="literal">String</tt>. An
<tt class="literal">Element</tt> is considered to have mixed content when
it has a combination of textual data and nested elements, as well as
optional comments, entities, and processing instructions. This
complete <tt class="literal">List</tt> of content can be obtained with
<tt class="literal">getContent( )</tt>, and the results in the
<tt class="literal">List</tt> evaluated through
<tt class="literal">instanceof</tt> against a <tt class="literal">String</tt>,
<tt class="literal">Element</tt>, or <tt class="literal">Comment</tt>.
</p>

<p>The <tt class="literal">addXXX( )</tt> methods are designed to be chained
together, and therefore return the modified
<tt class="literal">Element</tt>:
</p>

<blockquote><pre class="code">Element element = new Element("root");
element.addChild(new Element("child")
    .addChild(new Element("grandchild")
        .addAttribute("name", "value")
        .setContent("Hello World!"))
    .addChild(new Element("anotherChild"))
);</pre></blockquote>

<p>This would result in the following XML document fragment:</p>

<blockquote><pre class="code">&lt;root&gt;
  &lt;child&gt;
    &lt;grandchild name="value"&gt;
      Hello World!
    &lt;/grandchild&gt;
  &lt;/child&gt;
  &lt;anotherChild /&gt;
&lt;/root&gt;</pre></blockquote>

<p>Here's the API listing:</p>

<blockquote><pre class="code">public class Element {
    public Element(String name);
    public Element(String name, String uri);
    public Element(String name, String prefix, String uri);
    public Element(String name, Namespace ns);

    public Document getDocument( );
    public Element getParent( );
    public Element detach( );
    public String getName( );
    public void setName(String name);
    public Namespace getNamespace( );
    public Namespace getNamespace(String prefix);
    public void setNamespace(Namespace ns);
    public String getNamespacePrefix( );
    public String getNamespaceURI( );
    public String getQualifiedName( );
    public void addNamespaceDeclaration(Namespace additionalNS);
    public void removeNamespaceDeclaration(Namespace additionalNS);
    public List getAdditionalNamespaces( );

    public List getContent( );
    public Element setMixedContent(List mixedContent);
    public Element addContent(CDATA cdata);
    public Element addContent(Comment comment);
    public Element addContent(Element element);
    public Element addContent(EntityRef entityRef);
    public Element addContent(ProcessingInstruction pi);
    public Element addContent(String text);
    public boolean removeContent(CDATA cdata);
    public boolean removeContent(Comment comment);
    public boolean removeContent(Element element);
    public boolean removeContent(EntityRef entityRef);
    public boolean removeContent(ProcessingInstruction pi);

    public boolean hasChildren( );
    public Element getChild(String name);
    public Element getChild(String name, Namespace ns);
    public List getChildren( );
    public List getChildren(String name);
    public List getChildren(String name, Namespace ns);
    public boolean removeChild(String name);
    public boolean removeChild(String name, Namespace ns);
    public boolean removeChildren( );
    public boolean removeChildren(String name);
    public boolean removeChildren(String name, Namespace ns);
    public Element setChildren(List children);

    public Attribute getAttribute(String name);
    public Attribute getAttribute(String name, Namespace ns);
    public List getAttributes( );
    public String getAttributeValue(String name);
    public String getAttributeValue(String name, Namespace ns);
    public boolean removeAttribute(String name);
    public boolean removeAttribute(String name, Namespace ns);
    public Element setAttribute(Attribute attribute);
    public Element setAttributes(List attributes);

    public String getChildText(String name);
    public String getChildText(String name, Namespace ns);
    public String getChildTextTrim(String name);
    public String getChildTextTrim(String name, Namespace ns);
    public String getText( );
    public String getTextNormalize( );
    public String getTextTrim( );
    public Element setText(String text);

    public boolean isRootElement( );

    public Object clone( );
    public boolean equals(Object obj);
    public int hashCode( );
    public String toString( );
}</pre></blockquote>

</div>

<a name="javaxml2-APP-A-SECT-4.1.7" /><div class="sect3">
<h3 class="sect3">A.4.1.7. EntityRef</h3>

<p><a name="INDEX-1648" />
<a name="INDEX-1649" />This
class defines a JDOM model for entity references in XML documents. It
allows for setting and accessing of the reference's name,
public ID, and system ID.
</p>

<blockquote><pre class="code">public class EntityRef {
    public EntityRef(String name);
    public EntityRef(String name, String publicID, String systemID);

    public Document getDocument( );
    public Element getParent( );
    public String getName( );
    public EntityRef setName(String name);
    public String getPublicID( );
    public void setPublicID(String publicID);
    public String getSystemID( );
    public void setSystemID(String systemID);
    public EntityRef detach( );

    public Object clone( );
    public boolean equals(Object obj);
    public int hashCode( );
    public String toString( );
}</pre></blockquote>

</div>

<a name="javaxml2-APP-A-SECT-4.1.8" /><div class="sect3">
<h3 class="sect3">A.4.1.8. JDOMException</h3>

<p><a name="INDEX-1650" />
<a name="INDEX-1651" />This
is the core JDOM <tt class="literal">Exception</tt> that other JDOM
<tt class="literal">Exception</tt> classes subclass. It provides for error
messages as well as the wrapping of a root cause
<tt class="literal">Exception</tt>, in the case that a
<tt class="literal">JDOMException</tt> needs to wrap a lower-level
<tt class="literal">Exception</tt>.
</p>

<blockquote><pre class="code">public class JDOMException extends Exception {
    public JDOMException( );
    public JDOMException(String message);
    public JDOMException(String message, Throwable rootCause);

    public Throwable getCause( );
    public String getMessage( );
}</pre></blockquote>

</div>

<a name="javaxml2-APP-A-SECT-4.1.9" /><div class="sect3">
<h3 class="sect3">A.4.1.9. Namespace</h3>

<p>The <tt class="literal">Namespace</tt><a name="INDEX-1652" />
<a name="INDEX-1653" />
class handles namespace mappings used in JDOM objects.
</p>

<blockquote><pre class="code">public class Namespace {
    public static Namespace getNamespace(String uri);
    public static Namespace getNamespace(String prefix, String uri);

    public String getPrefix( );
    public String getURI( );

    public boolean equals(Object obj);
    public int hashCode( );
    public String toString( );
}</pre></blockquote>

</div>

<a name="javaxml2-APP-A-SECT-4.1.10" /><div class="sect3">
<h3 class="sect3">A.4.1.10. ProcessingInstruction</h3>

<p><tt class="literal">ProcessingInstruction</tt><a name="INDEX-1654" />
<a name="INDEX-1655" />
defines behavior for an XML processing instruction, modeled in Java.
It allows specific handling for the target as well as the raw data
for the target. Additionally, as many PIs use data in the form of
name-value pairs (much like attributes), this allows retrieval and
addition of name-value pairs. For example, in the
<tt class="literal">&lt;?cocoon-process</tt>
<tt class="literal">type="xslt"?&gt;</tt> processing instruction, invoking
<tt class="literal">getValue("type")</tt> on the
<tt class="literal">ProcessingInstruction</tt> representing that XML PI
would return "xslt".
</p>

<blockquote><pre class="code">public class ProcessingInstruction {
    public ProcessingInstruction(String target, Map data);
    public ProcessingInstruction(String target, String data);

    public ProcessingInstruction detach( );
    public Document getDocument( );
    public Element getParent( );
    public String getTarget( );
    public String getData( );
    public ProcessingInstruction setData(String data);
    public ProcessingInstruction setData(Map data);
    public String getValue(String name);
    public ProcessingInstruction setValue(String name, String value);
    public boolean removeValue(String name);

    public Object clone( );
    public boolean equals(Object obj);
    public int hashCode( );
    public String toString( );
}</pre></blockquote>

</div>

<a name="javaxml2-APP-A-SECT-4.1.11" /><div class="sect3">
<h3 class="sect3">A.4.1.11. Text</h3>

<p><a name="INDEX-1656" />
<a name="INDEX-1657" />This
class represents character data "owned" by a JDOM
<tt class="literal">Element</tt>. It is generally invisible to the user, as
the <tt class="literal">Element</tt> class converts this class to a simple
<tt class="literal">String</tt> when the value is requested. It is only
exposed through an <tt class="literal">Element</tt>'s
<tt class="literal">getContent( )</tt> method.
</p>

<a name="INDEX-1658" /><blockquote><pre class="code">public class Text {
    public Text(String stringValue);

    public Element getParent( );
    public void append(String stringValue);
    public String getValue( );
    public void setValue(String stringValue);

    public Object clone( );
    public boolean equals(Object obj);
    public int hashCode( );
    public String toString( );
}</pre></blockquote>

</div>
</div>
<a name="javaxml2-APP-A-SECT-4.2" /><div class="sect2">
<h3 class="sect2">A.4.2. Package: org.jdom.adapters</h3>

<p><a name="INDEX-1659" />This
<a name="INDEX-1660" />package
contains adapters that allow a standard interface for obtaining a DOM
<tt class="literal">Document</tt> object from any DOM parser (including DOM
Level 1 parsers). Adapters can be easily added for any parser that
desires to have JDOM support.
</p>

<a name="javaxml2-APP-A-SECT-4.2.1" /><div class="sect3">
<h3 class="sect3">A.4.2.1. AbstractDOMAdapter</h3>

<p><a name="INDEX-1661" />
<a name="INDEX-1662" />This
class provides default behavior for the version of
<tt class="literal">getDocument( )</tt> that takes in a filename by
wrapping the file in a <tt class="literal">FileOutputStream</tt> and
delegating invocation to <tt class="literal">getDocument(InputStream)</tt>.
</p>

<blockquote><pre class="code">public abstract class AbstractDOMAdapter implements DOMAdapter {
    public abstract Document getDocument(InputStream in, boolean validate) 
        throws IOException;
    public abstract Document getDocument(File filename, boolean validate) 
        throws IOException;
    public abstract Document createDocument(DocType docType) 
        throws IOException;
}</pre></blockquote>

</div>

<a name="javaxml2-APP-A-SECT-4.2.2" /><div class="sect3">
<h3 class="sect3">A.4.2.2. DOMAdapter</h3>

<p><a name="INDEX-1663" />
<a name="INDEX-1664" />This
class defines the interface that adapters must implement. This
includes a means to produce a DOM <tt class="literal">Document</tt> from a
filename or an <tt class="literal">InputStream</tt>, as well as a means of
obtaining a new, empty DOM <tt class="literal">Document</tt> object.
</p>

<blockquote><pre class="code">public interface DOMAdapter {
    public abstract Document getDocument(InputStream in, boolean validate) 
        throws IOException;
    public abstract Document getDocument(File filename, boolean validate) 
        throws IOException;
    public abstract Document createDocument(DocType docType) 
        throws IOException;
}</pre></blockquote>

<p>Specific adapter classes are not detailed here, as additions and
modifications may be made during publication of the book. As of this
writing, functional adapters are provided for the following parsers:
</p>

<ul><li>
<p>Oracle Version 1 XML Parser</p>
</li><li>
<p>Oracle Version 2 XML Parser</p>
</li><li>
<p>Sun Project X Parser</p>
</li><li>
<p>Sun/Apache Crimson Parser</p>
</li><li>
<p>Apache Xerces Parser</p>
</li><li>
<p>IBM XML4J Parser</p>
</li></ul>
</div>
</div>
<a name="javaxml2-APP-A-SECT-4.3" /><div class="sect2">
<h3 class="sect2">A.4.3. Package: org.jdom.input</h3>

<p><a name="INDEX-1665" />This
<a name="INDEX-1666" />package
defines the classes for building a JDOM <tt class="literal">Document</tt>
object from various input sources, such as SAX streams and existing
DOM trees. It also provides an interface for using customized
versions of the JDOM classes, like user-defined subclasses of
<tt class="literal">Element</tt> and <tt class="literal">Attribute</tt>.
</p>

<a name="javaxml2-APP-A-SECT-4.3.1" /><div class="sect3">
<h3 class="sect3">A.4.3.1. BuilderErrorHandler</h3>

<p><a name="INDEX-1667" />
<a name="INDEX-1668" />This
is the default error handler used for JDOM document construction.
</p>

<blockquote><pre class="code">public class BuilderErrorHandler 
    implements org.xml.sax.ErrorHandler {

    public void warning(SAXParserException exception);
    public void error(SAXParserException exception);
    public void fatalError(SAXParserException exception);
}</pre></blockquote>

</div>

<a name="javaxml2-APP-A-SECT-4.3.2" /><div class="sect3">
<h3 class="sect3">A.4.3.2. DOMBuilder</h3>

<p><a name="INDEX-1669" />
<a name="INDEX-1670" />This
class provides the ability to create a JDOM
<tt class="literal">Document</tt> object from an XML input source using a
parser that supports DOM, the Document Object Model. It uses the
various adapters in <tt class="literal">org.jdom.adapters</tt>, so if a
parser is requested for which there is no adapter, errors occur.
Additionally, a method is provided for building a JDOM
<tt class="literal">Document</tt> object from an existing DOM tree
(<tt class="literal">org.w3c.dom.Document</tt>). When the
<tt class="literal">DOMBuilder</tt> is constructed, validation can be
requested, as can the class name of the adapter to use. If neither is
supplied, the default behavior occurs: no validation takes place and
the Apache Xerces parser is used.
</p>

<p>You can also set the factory to use (see the
<tt class="literal">JDOMFactory</tt> entry) for generating JDOM classes in
the build process.
</p>

<blockquote><pre class="code">public class DOMBuilder {
    public DOMBuilder(String adapterClass, boolean validate);
    public DOMBuilder(String adapterClass);
    public DOMBuilder(boolean validate);
    public DOMBuilder( );

    public Document build(InputStream in);
    public Document build(File file);
    public Document build(URL url);
    public Document build(org.w3c.dom.Document domDocument);
    public Element build(org.w3c.dom.Element domElement);

    public void setValidation(boolean validate);
    public void setFactory(JDOMFactory factory);
}</pre></blockquote>

</div>

<a name="javaxml2-APP-A-SECT-4.3.3" /><div class="sect3">
<h3 class="sect3">A.4.3.3. JDOMFactory</h3>

<p><a name="INDEX-1671" />
<a name="INDEX-1672" />This
interface allows users to provide their own factories that produce
JDOM constructs (<tt class="literal">Element</tt>,
<tt class="literal">Attribute</tt>, etc.). When a factory implementation is
passed to a builder using the <tt class="literal">setFactory( )</tt>
method, this is used for creating new JDOM constructs. It allows
complete customization of the JDOM object creation process.
</p>

<p>For the sake of brevity and clarity, I'm not going to include
the very extensive list of methods available to this factory, but
instead refer you to the Javadoc. Every possible construction of
every JDOM class is included in this class, and all these methods
return the type of object being constructed.
</p>

</div>

<a name="javaxml2-APP-A-SECT-4.3.4" /><div class="sect3">
<h3 class="sect3">A.4.3.4. SAXBuilder</h3>

<p><a name="INDEX-1673" />
<a name="INDEX-1674" />This
class provides the ability to create a JDOM
<tt class="literal">Document</tt> object from an XML input source using a
parser that supports SAX, the Simple API for XML. It can use any SAX
parser implementation that is SAX 2.0-compliant. When the
<tt class="literal">SAXBuilder</tt> is constructed, validation can be
requested, as well as the class name of the SAX driver to use. If
neither is supplied, the default behavior occurs: no validation takes
place and the Apache Xerces parser is used.
</p>

<p>You can also set the factory to use (see the
<tt class="literal">JDOMFactory</tt> entry) for generating JDOM classes in
the build process.
</p>

<a name="INDEX-1675" /><blockquote><pre class="code">public class SAXBuilder {
    public SAXBuilder(String saxDriverClass, boolean validate);
    public SAXBuilder(String saxDriverClass);
    public SAXBuilder(boolean validate);
    public SAXBuilder( );

    public Document build(InputStream in);
    public Document build(InputStream in, String systemID);
    public Document build(InputSource inputSource);
    public Document build(Reader characterStream);
    public Document build(Reader characterStream, String systemID);
    public Document build(File file);
    public Document build(URL url);
    public Document build(org.w3c.dom.Document domDocument);
    public Element build(org.w3c.dom.Element domElement);

    public void setDTDHandler(DTDHandler dtdHandler);
    public void setEntityResolver(EntityResolver entityResolver);
    public void setErrorHandler(ErrorHandler errorHandler);
    public void setExpandEntities(boolean expandEntities);
    public void setXMLFilter(XMLFilter xmlFilter);
    public void setIgnoringElementContentWhitespace(boolean ignore);
    public void setValidation(boolean validate);
    public void setFactory(JDOMFactory factory);
}</pre></blockquote>

</div>
</div>
<a name="javaxml2-APP-A-SECT-4.4" /><div class="sect2">
<h3 class="sect2">A.4.4. Package: org.jdom.output</h3>

<p><a name="INDEX-1676" />This
<a name="INDEX-1677" />package
defines behavior for output of JDOM <tt class="literal">Document</tt>
objects. Of particular note is the
<tt class="literal">SAXOutputter</tt><a name="INDEX-1678" />
class, which allows a JDOM <tt class="literal">Document</tt> to fire SAX
events off to an application expecting SAX behavior, and
<tt class="literal">DOMOutputter</tt><a name="INDEX-1679" />,
which converts from JDOM to DOM structures. And, of course,
<tt class="literal">XMLOutputter</tt><a name="INDEX-1680" />
is by far the most common output class for JDOM objects. Like some of
the classes in the <tt class="literal">org.jdom.input</tt> package, these
three classes have, literally, hundreds of methods between them.
Rather than fill ten pages with this rather boring information,
I'll again refer you to the Javadoc online at <a href="../../../../../../www.jdom.org/">http://www.jdom.org</a>. That will have the most
current options for using any of the JDOM outputter
classes.<a name="INDEX-1681" /> 
</p>

</div>


<hr width="684" align="left" />
<div class="navbar"><table width="684" border="0"><tr><td align="left" valign="top" width="228"><a href="appa_03.htm"><img alt="Previous" border="0" src="../gifs/txtpreva.gif" /></a></td><td align="center" valign="top" width="228"><a href="index.htm"><img alt="Home" border="0" src="../gifs/txthome.gif" /></a></td><td align="right" valign="top" width="228"><a href="appb_01.htm"><img alt="Next" border="0" src="../gifs/txtnexta.gif" /></a></td></tr><tr><td align="left" valign="top" width="228">A.3. JAXP 1.1</td><td align="center" valign="top" width="228"><a href="index/index.htm"><img alt="Book Index" border="0" src="../gifs/index.gif" /></a></td><td align="right" valign="top" width="228">B. SAX 2.0 Features and Properties</td></tr></table></div>
<hr width="684" align="left" />

<img alt="Library Navigation Links" border="0" src="../gifs/navbar.gif" usemap="#library-map" />
<p><p><font size="-1"><a href="copyrght.htm">Copyright &copy; 2002</a> O'Reilly &amp; Associates. All rights reserved.</font></p>

<map name="library-map">
<area shape="rect" coords="0,0,85,93" href="../index.htm"><area shape="rect" coords="85,0,180,98" href="../sax2/index.htm"><area shape="rect" coords="182,-1,261,100" href="../xmlnut/index.htm"><area shape="rect" coords="263,1,384,96" href="index.htm"><area shape="rect" coords="386,1,463,100" href="../jxslt/index.htm"><area shape="rect" coords="466,1,533,112" href="../xslt/index.htm"><area shape="rect" coords="535,-1,610,108" href="../schema/index.htm"><area shape="rect" coords="613,1,696,121" href="../pxml/index.htm">
</map>

</body></html>