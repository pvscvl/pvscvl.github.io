<html><head><title>Cocoon 2.0 and Beyond (Java &amp; XML, 2nd Edition)</title><link rel="stylesheet" type="text/css" href="../style/style1.css" />

<meta name="DC.Creator" content="Brett McLaughlin" /><meta name="DC.Format" content="text/xml" scheme="MIME" /><meta name="DC.Language" content="en-US" /><meta name="DC.Publisher" content="O'Reilly &amp; Associates, Inc." /><meta name="DC.Source" scheme="ISBN" content="059600197L" /><meta name="DC.Subject.Keyword" content="stuff" /><meta name="DC.Title" content="Java &amp; XML, 2nd Edition" /><meta name="DC.Type" content="Text.Monograph" />

</head><body bgcolor="#ffffff">

<img alt="Book Home" border="0" src="gifs/smbanner.gif" usemap="#banner-map" /><map name="banner-map"><area shape="rect" coords="1,-2,616,66" href="index.htm" alt="Java and XML, 2nd Edition" /><area shape="rect" coords="629,-11,726,25" href="jobjects/fsearch.htm" alt="Search this book" /></map>

<div class="navbar"><table width="684" border="0"><tr><td align="left" valign="top" width="228"><a href="ch10_04.htm"><img alt="Previous" border="0" src="../gifs/txtpreva.gif" /></a></td><td align="center" valign="top" width="228"></td><td align="right" valign="top" width="228"><a href="ch10_06.htm"><img alt="Next" border="0" src="../gifs/txtnexta.gif" /></a></td></tr></table></div>



<h2 class="sect1">10.5. Cocoon 2.0 and Beyond</h2>

<p>Cocoon 2.0, the next generation of Cocoon, promises to be a giant
leap forward for the web publishing framework. Cocoon 1.x, which is
primarily based on XML being transformed via XSL, still has some
serious limitations. First, it does not significantly reduce the
management costs of large sites. While one XML document can be
transformed into different client views, a significant number of
documents will still exist. Generally, either long URIs (such as
<em class="emphasis">/content/publishing/books/javaxml/contents.xml</em>),
a large number of virtual path mappings (<em class="emphasis">/javaxml</em> mapped to <em class="emphasis">/content/publishing/books/javaxml</em>), or a
combination of the two result. In addition, a strict separation of
presentation from content from logic is difficult to accomplish, and
even more difficult to manage.
</p>

<p>Cocoon 2 focuses on enforcing the contracts between these different
layers, therefore reducing management costs. XSP is a centerpiece in
this design. In addition, the sitemap allows the distinction between
XSP, XML, and static HTML pages to be hidden from the prying user.
Advanced precompilation and memory considerations will also be
introduced to make Cocoon 2 even more of an advance over Cocoon 1.x
than Cocoon 1.x was over a standard web server.
</p>

<a name="javaxml2-CHP-10-SECT-5.1" /><div class="sect2">
<h3 class="sect2">10.5.1. Servlet Engine Mappings</h3>

<p>A significant change in Cocoon 2 is that it no longer requires a
simple mapping for XML documents. While this works well in the 1.x
model, it still leaves management of non-XML documents to the
webmaster, possibly someone completely different from the person
responsible for the XML documents. Cocoon 2 seeks to take over
management of the entire web site. For this reason, the main Cocoon
servlet (<tt class="literal">org.apache.cocoon.servlet.CocoonServlet</tt>
in the 2.0 model) is generally mapped to a URI, such as <em class="emphasis">/Cocoon</em>. This could also be mapped to the
root of the web server itself (simply "/") to completely
control a site. The URL requested then follows the servlet mapping:
<em class="emphasis">http://myHost.com/Cocoon/myPage.xml</em> or
<em class="emphasis">http://myHost.com/Cocoon/myDynamicPage.xsp</em>,
for example.
</p>

<p>With this mapping in place, even static HTML documents can be grouped
with XML documents, allowing the management of all files on the
server to be handled by a central person or group. If HTML, WML, and
XML documents must be mixed in a directory, no confusion needs to
occur, and uniform URIs can be used. Cocoon 2 will happily serve HTML
as well as any other document type; with a mapping from the root of a
server to Cocoon, the web publishing framework actually becomes
invisible to the client.
</p>

</div>
<a name="javaxml2-CHP-10-SECT-5.2" /><div class="sect2">
<h3 class="sect2">10.5.2. The Sitemap</h3>

<p>Another important introduction to Cocoon 2 is the
<em class="filename">sitemap</em>. In Cocoon, a sitemap provides a central
location for administration of a web site. Cocoon uses this sitemap
to decide how to process the request URIs it receives. For example,
when Cocoon receives a request like <em class="emphasis">http://myCocoonSite.com/Cocoon/javaxml/chapterOne.html</em>,
the Cocoon servlet dissects the request and determines that the
actual URI requested is <em class="emphasis">/javaxml/chapterOne.html</em>. However, suppose
that the file <em class="emphasis">chapterOne.html</em>
should map not to a static HTML file, but to the transformation of an
XML document (as in the earlier examples). The sitemap can handle
this, quite easily! Take a look at the sitemap shown in <a href="ch10_05.htm">Example 10-12</a>. 
</p>

<a name="javaxml2-CHP-10-EX-12" /><div class="example">
<h4 class="objtitle">Example 10-12. Sample Cocoon 2 sitemap </h4>
<blockquote><pre class="code">  &lt;sitemap&gt;
   &lt;process match="/javaxml/*.html"&gt;
    &lt;generator type="file" src="/docs/javaxml/*.xml"
    &lt;filter type="xslt"&gt;
     &lt;parameter name="stylesheet" value="/styles/JavaXML.html.xsl"/&gt;
    &lt;/filter&gt;
    &lt;serializer type="html"/&gt;
   &lt;/process&gt;

   &lt;process match="/javaxml/*.pdf"&gt;
    &lt;generator type="file" src="/docs/javaxml/*.xml"
    &lt;filter type="xslt"&gt;
     &lt;parameter name="stylesheet" value="/styles/JavaXML.pdf.xsl"/&gt;
    &lt;/filter&gt;
    &lt;serializer type="fop"/&gt;
   &lt;/process&gt;
  &lt;/sitemap&gt;</pre></blockquote>
</div>

<p>In this example, Cocoon matches the URI <em class="emphasis">/javaxml/chapterOne.html</em> to the sitemap
directive <tt class="literal">/javaxml/*.html</tt>. It determines that this
is an actual file, and the source for the file should be determined
by using the mapping <tt class="literal">/docs/javaxml/*</tt>.
<tt class="literal">xml</tt>, which translates to
<em class="filename">/docs/javaxml/chapterOne.xml </em>(the filename we
want transformed). The XSLT filter is then applied; the stylesheet to
use, <em class="emphasis">JavaXML.html.xsl</em>, is also
specified in the sitemap. The resulting transformation is then
displayed to the user. In addition, the XML file could be an XSP file
processed before being converted to XML and then styled.
</p>

<p>This same process can render a PDF from the request <em class="emphasis">http://myCocoonSite.com/Cocoon/javaxml/chapterOne.pdf</em>,
all with a few extra lines in the sitemap (shown in the previous
example). The processing instructions in the individual XML documents
can be completely removed, a significant change from Cocoon 1.x.
First, uniform application of stylesheets and processing can occur
based on a directory location. Simply creating XML and placing it in
the <em class="emphasis">/docs/javaxml/</em> directory in
the example means the document can be accessed as HTML or PDF. It is
also trivial to change the stylesheet used for all documents,
something very difficult and tedious to do in Cocoon 1.x. Instead of
making a change to each XML document, only the single line in the
sitemap needs to be changed.
</p>

<p>The Cocoon sitemap is still being developed, and there will probably
be quite a few additional enhancements and changes to its format and
structure by the time Cocoon 2.0 goes final. To get involved, join
the mailing lists at <em class="email">cocoon-users@xml.apache.org</em> and <em class="email">cocoon-dev@xml.apache.org</em>. The Apache XML
project at <a href="../../../../../../xml.apache.org/">http://xml.apache.org</a>
has details about how to participate in these lists and the Cocoon
project.
</p>

</div>
<a name="javaxml2-CHP-10-SECT-5.3" /><div class="sect2">
<h3 class="sect2">10.5.3. Producers and Processors</h3>

<p>One final improvement that Cocoon 2 will include is precompiled and
event-based <em class="filename">producers</em> and
<em class="filename">processors</em>. In Cocoon, a producer handles the
transformation of a request URI into an XML document stream. A
processor then takes an input stream (currently the XML document in a
DOM tree) into output readable by the client. I haven't covered
producers and processors in the Cocoon 1.x model because they are
going to drastically change in the Cocoon 2.0 model; any producers
and processors currently being used will most likely be useless and
have to be rewritten in Cocoon 2.0.
</p>

<p>Cocoon 2 moves from using DOM for these structures to using the more
event-based SAX, wrapped within a DOM structure. As a producer in 1.x
had to generate an XML document in memory, the corresponding DOM
structure could get extremely large. This eventually drained system
resources, particularly when performing complex tasks such as large
transformations or handling formatting objects (PDF generation). For
these reasons, DOM will be a simple wrapper around SAX-based events
in Cocoon 2, allowing producers and processors to be very slim and
efficient.
</p>

<p>In addition, producers and processors will be precompiled versions of
other formats. For example, XSL stylesheets can be precompiled into
processors, and XSP pages can be precompiled into producers. This
further increases performance while removing load from the client.
These and other changes continue to use a component model, allowing
Cocoon to be a very flexible, very pluggable framework. Keep up on
the latest changes by monitoring the Cocoon web site.
</p>

</div>


<hr width="684" align="left" />
<div class="navbar"><table width="684" border="0"><tr><td align="left" valign="top" width="228"><a href="ch10_04.htm"><img alt="Previous" border="0" src="../gifs/txtpreva.gif" /></a></td><td align="center" valign="top" width="228"><a href="index.htm"><img alt="Home" border="0" src="../gifs/txthome.gif" /></a></td><td align="right" valign="top" width="228"><a href="ch10_06.htm"><img alt="Next" border="0" src="../gifs/txtnexta.gif" /></a></td></tr><tr><td align="left" valign="top" width="228">10.4. XSP</td><td align="center" valign="top" width="228"><a href="index/index.htm"><img alt="Book Index" border="0" src="../gifs/index.gif" /></a></td><td align="right" valign="top" width="228">10.6. What's Next?</td></tr></table></div>
<hr width="684" align="left" />

<img alt="Library Navigation Links" border="0" src="../gifs/navbar.gif" usemap="#library-map" />
<p><p><font size="-1"><a href="copyrght.htm">Copyright &copy; 2002</a> O'Reilly &amp; Associates. All rights reserved.</font></p>

<map name="library-map">
<area shape="rect" coords="0,0,85,93" href="../index.htm"><area shape="rect" coords="85,0,180,98" href="../sax2/index.htm"><area shape="rect" coords="182,-1,261,100" href="../xmlnut/index.htm"><area shape="rect" coords="263,1,384,96" href="index.htm"><area shape="rect" coords="386,1,463,100" href="../jxslt/index.htm"><area shape="rect" coords="466,1,533,112" href="../xslt/index.htm"><area shape="rect" coords="535,-1,610,108" href="../schema/index.htm"><area shape="rect" coords="613,1,696,121" href="../pxml/index.htm">
</map>

</body></html>