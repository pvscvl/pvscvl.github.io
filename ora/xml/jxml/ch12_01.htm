<html><head><title>SOAP (Java &amp; XML, 2nd Edition)</title><link rel="stylesheet" type="text/css" href="../style/style1.css" />

<meta name="DC.Creator" content="Brett McLaughlin" /><meta name="DC.Format" content="text/xml" scheme="MIME" /><meta name="DC.Language" content="en-US" /><meta name="DC.Publisher" content="O'Reilly &amp; Associates, Inc." /><meta name="DC.Source" scheme="ISBN" content="059600197L" /><meta name="DC.Subject.Keyword" content="stuff" /><meta name="DC.Title" content="Java &amp; XML, 2nd Edition" /><meta name="DC.Type" content="Text.Monograph" />

</head><body bgcolor="#ffffff">

<img alt="Book Home" border="0" src="gifs/smbanner.gif" usemap="#banner-map" /><map name="banner-map"><area shape="rect" coords="1,-2,616,66" href="index.htm" alt="Java and XML, 2nd Edition" /><area shape="rect" coords="629,-11,726,25" href="jobjects/fsearch.htm" alt="Search this book" /></map>

<div class="navbar"><table width="684" border="0"><tr><td align="left" valign="top" width="228"><a href="ch11_05.htm"><img alt="Previous" border="0" src="../gifs/txtpreva.gif" /></a></td><td align="center" valign="top" width="228"></td><td align="right" valign="top" width="228"><a href="ch12_02.htm"><img alt="Next" border="0" src="../gifs/txtnexta.gif" /></a></td></tr></table></div>




<h1 class="chapter">Chapter 12. SOAP</h1>
<div class="htmltoc"><h4 class="tochead">Contents:</h4>
  <p> <a href="#javaxml2-CHP-12-SECT-1">Starting Out</a><br />
<a href="ch12_02.htm">Setting Up</a><br />
<a href="ch12_03.htm">Getting Dirty</a><br />
<a href="ch12_04.htm">Going Further</a><br />
<a href="ch12_05.htm">What's Next?</a><br /></p></div>

<p><a name="INDEX-1181" /></a>SOAP is the
Simple Object Access Protocol. If you haven't heard of it by
now, you've probably been living under a rock somewhere.
It's become the newest craze in web programming, and is
integral to the web services fanaticism that has taken hold of the
latest generation of web development. If you've heard of .NET
from Microsoft or the peer-to-peer "revolution," then
you've heard about technologies that rely on SOAP (even if you
don't know it). There's not one but
<em class="emphasis">two</em> SOAP implementations going on over at
Apache, and Microsoft has hundreds of pages on their MSDN web site
devoted to it (<a href="../../../../../../msdn.microsoft.com/">http://msdn.microsoft.com</a>).
</p>

<p>In this chapter, I explain what SOAP is, and why it is such an
important part of where the web development paradigm is moving. That
will help you get the fundamentals down, and prepare you for actually
working with a SOAP toolkit. From there, I briefly run over the SOAP
projects currently available, and then delve into the Apache
implementation. This chapter is not meant to be the complete picture
on SOAP; the next chapter fills in lots of gaps. Take this as the
first part of a miniseries; many of your questions at the end of this
chapter will be answered in the next.
</p>

<div class="sect1"><a name="javaxml2-CHP-12-SECT-1" /></a>
<h2 class="sect1">12.1. Starting Out</h2>

<p>The first thing to do is get an understanding of what SOAP is. You
can read through the complete W3C note submission, which is fairly
lengthy, at <a name="INDEX-1182" /></a> <a name="INDEX-1183" /></a><a href="../../../../../../www.w3.org/TR/SOAP">http://www.w3.org/TR/SOAP</a>. When you take away
all of the hype, SOAP is just a protocol. It's a simple
protocol (to use, not necessarily to write), based on the idea that
at some point in a distributed architecture, you'll need to
exchange information. Additionally, in a system that is probably
overtaxed and process-heavy, this protocol is lightweight, requiring
a minimal amount of overhead. Finally, it allows all this to occur
over HTTP, which allows you to get around tricky issues like
firewalls and keep away from having all sorts of sockets listening on
oddly numbered ports. Once you get that down, everything else is just
details.
</p>

<p>Of course, I'm sure you're here for the details, so I
won't leave them out. There are three basic components to the
SOAP specification: the <a name="INDEX-1184" /></a>SOAP envelope, a set of encoding
rules, and a means of interaction between request and response. Begin
to think about a SOAP message as an actual letter; you know, those
antiquated things in envelopes with postage and an address scrawled
across the front? That analogy helps SOAP concepts like
"envelope" make a lot more sense. <a href="ch12_01.htm">Figure 12-1</a> seeks to illustrate the SOAP process in terms
of this analog.
</p>

<a name="javaxml2-CHP-12-FIG-1" /></a><div class="figure"><img height="195" alt="Figure 12-1" src="figs/javax_1201.gif" width="407" /></div><h4 class="objtitle">Figure 12-1. The SOAP message process</h4>

<p>With this picture in your head, let's look at the three
components of the SOAP specification. I cover each briefly and
provide examples that illustrate these concepts more completely.
Additionally, it's these three key components that make SOAP so
important and valuable. Error handling, support for a variety of
encodings, serialization of custom parameters, and the fact that SOAP
runs over HTTP make it more attractive in many cases than the other
choices for a distributed protocol.<a href="#FOOTNOTE-20">[20]</a> Additionally, SOAP provides a high
degree of interoperability with other applications, which I delve
into more completely in the next chapter. For now, I want to focus on
the basic pieces of SOAP.
</p><blockquote class="footnote"> <a name="FOOTNOTE-20" /></a><p>[20]There's a
lot of talk about running SOAP over other protocols, like SMTP (or
even Jabber). This isn't part of the SOAP standard, but it may
be added in the future. Don't be surprised if you see it
discussed.</p> </blockquote>

<a name="javaxml2-CHP-12-SECT-1.1" /></a><div class="sect2">
<h3 class="sect2">12.1.1. The Envelope</h3>

<p>The <a name="INDEX-1185" /></a>
<a name="INDEX-1186" /></a>SOAP envelope
is analogous to the envelope of an actual letter. It supplies
information about the message that is being encoded in a SOAP
payload, including data relating to the recipient and sender, as well
as details about the message itself. For example, the header of the
SOAP envelope can specify exactly how a message must be processed.
Before an application goes forward with processing a message, the
application can determine information about a message, including
whether it will even be able to process the message. Distinct from
the situation with standard XML-RPC calls (remember that? XML-RPC
messages, encoding, and the rest are all wrapped into a single XML
fragment), with SOAP actual interpretation occurs in order to
determine something about the message. A typical SOAP message can
also include the encoding style, which assists the recipient in
interpreting the message. <a href="ch12_01.htm">Example 12-1</a> shows the SOAP
envelope, complete with the specified encoding.
</p>

<a name="javaxml2-CHP-12-EX-1" /></a><div class="example">
<h4 class="objtitle">Example 12-1. The SOAP envelope </h4>
<blockquote><pre class="code">
&lt;soap:Envelope 
   xmlns:soap="http://schemas.xmlsoap.org/soap/envelope/"
   soap:encodingStyle="http://myHost.com/encodings/secureEncoding"
&gt;
 
 &lt;soap:Body&gt;
   &lt;article xmlns="http://www.ibm.com/developer"&gt;
     &lt;name&gt;Soapbox&lt;/name&gt;
     &lt;url&gt;
       http://www-106.ibm.com/developerworks/library/x-soapbx1.html
     &lt;/url&gt;
   &lt;/article&gt;
  &lt;/soap:Body&gt;
&lt;/soap:Envelope&gt;</pre></blockquote>
</div>

<p>You can see that an encoding is specified within the envelope,
allowing an application to determine (using the value of the
<tt class="literal">encodingStyle</tt> attribute) whether it can read the
incoming message situated within the <tt class="literal">Body</tt> element.
Be sure to get the SOAP envelope namespace correct, or SOAP servers
that receive your message will trigger version mismatch errors, and
you won't be able to interoperate with them.
</p>

</div>
<a name="javaxml2-CHP-12-SECT-1.2" /></a><div class="sect2">
<h3 class="sect2">12.1.2. Encoding</h3>

<p><a name="INDEX-1187" /></a>
<a name="INDEX-1188" /></a>The second
major element that SOAP brings to the table is a simple means of
encoding user-defined <a name="INDEX-1189" /></a>datatypes. In RPC (and XML-RPC), encoding
can only occur for a predefined set of datatypes: those that are
supported by whatever XML-RPC toolkit you download. Encoding other
types requires modifying the actual RPC server and clients
themselves. With SOAP, however, XML schemas can be used to easily
specify new datatypes (using the <tt class="literal">complexType</tt>
structure discussed way back in <a href="ch02_01.htm">Chapter 2, "Nuts and Bolts"</a>), and
those new types can be easily represented in XML as part of a SOAP
payload. Because of this integration with <a name="INDEX-1190" /></a>XML Schema, you can encode any datatype in
a SOAP message that you can logically describe in an XML schema.
</p>

</div>
<a name="javaxml2-CHP-12-SECT-1.3" /></a><div class="sect2">
<h3 class="sect2">12.1.3. Invocation</h3>

<p>The best way to understand how <a name="INDEX-1191" /></a>
<a name="INDEX-1192" /></a>SOAP
invocation works is to compare it with something you already know,
such as XML-RPC. If you recall, an XML-RPC call would look something
like the code fragment shown in <a href="ch12_01.htm">Example 12-2</a>.<a name="INDEX-1193" /></a>
</p>

<a name="javaxml2-CHP-12-EX-2" /></a><div class="example">
<h4 class="objtitle">Example 12-2. Invocation in XML-RPC </h4>
<blockquote><pre class="code">
// Specify the XML parser to use
XmlRpc.setDriver("org.apache.xerces.parsers.SAXParser");


// Specify the server to connect to
XmlRpcClient client =
    new XmlRpcClient("http://rpc.middleearth.com");

// Create the parameters
Vector params = new Vector( );
params.addElement(flightNumber);
params.addElement(numSeats);
params.addElement(creditCardType);
params.addElement(creditCardNum);

// Request reservation
Boolean boughtTickets = 
    (Boolean)client.execute("ticketCounter.buyTickets", params);

// Deal with the response</pre></blockquote>
</div>

<p>I've coded up a simple ticket counter-style application. Now,
look at <a href="ch12_01.htm">Example 12-3</a>, which shows the same call in
SOAP.
</p>

<a name="javaxml2-CHP-12-EX-3" /></a><div class="example">
<h4 class="objtitle">Example 12-3. Invocation in SOAP </h4>
<blockquote><pre class="code">
// Create the parameters
Vector params = new Vector( );
params.addElement(
    new Parameter("flightNumber", Integer.class, flightNumber, null));
params.addElement(
    new Parameter("numSeats", Integer.class, numSeats, null));
params.addElement(
    new Parameter("creditCardType", String.class, creditCardType, null));
params.addElement(
    new Parameter("creditCardNumber", Long.class, creditCardNum, null));

// Create the Call object
Call call = new Call( );
call.setTargetObjectURI("urn:xmltoday-airline-tickets");
call.setMethodName("buyTickets");
call.setEncodingStyleURI(Constants.NS_URI_SOAP_ENC);
call.setParams(params);

// Invoke
Response res = call.invoke(new URL("http://rpc.middleearth.com"), "");

// Deal with the response</pre></blockquote>
</div>

<p>As you can see, the actual invocation itself, represented by the
<tt class="literal">Call</tt> object, is resident in memory. It allows you
to set the target of the call, the method to invoke, the encoding
style, the parameters, and more not shown here. It is more flexible
than the XML-RPC methodology, allowing you to explicitly set the
various parameters that are determined implicitly in XML-RPC.
You'll see quite a bit more about this invocation process in
the rest of the chapter, including how SOAP provides fault responses,
an error hierarchy, and of course the returned results from the call.
</p>

<p>With that brief introduction, you probably know enough to want to get
on with the fun stuff. Let me show you the SOAP implementation
I'm going to use, explain why I made that choice, and get to
some code.
</p>

</div>
</div>










<hr width="684" align="left" />
<div class="navbar"><table width="684" border="0"><tr><td align="left" valign="top" width="228"><a href="ch11_05.htm"><img alt="Previous" border="0" src="../gifs/txtpreva.gif" /></a></td><td align="center" valign="top" width="228"><a href="index.htm"><img alt="Home" border="0" src="../gifs/txthome.gif" /></a></td><td align="right" valign="top" width="228"><a href="ch12_02.htm"><img alt="Next" border="0" src="../gifs/txtnexta.gif" /></a></td></tr><tr><td align="left" valign="top" width="228">11.5. What's Next?</td><td align="center" valign="top" width="228"><a href="index/index.htm"><img alt="Book Index" border="0" src="../gifs/index.gif" /></a></td><td align="right" valign="top" width="228">12.2. Setting Up</td></tr></table></div>
<hr width="684" align="left" />

<img alt="Library Navigation Links" border="0" src="../gifs/navbar.gif" usemap="#library-map" />
<p><p><font size="-1"><a href="copyrght.htm">Copyright &copy; 2002</a> O'Reilly &amp; Associates. All rights reserved.</font></p>

<map name="library-map">
<area shape="rect" coords="0,0,85,93" href="../index.htm"><area shape="rect" coords="85,0,180,98" href="../sax2/index.htm"><area shape="rect" coords="182,-1,261,100" href="../xmlnut/index.htm"><area shape="rect" coords="263,1,384,96" href="index.htm"><area shape="rect" coords="386,1,463,100" href="../jxslt/index.htm"><area shape="rect" coords="466,1,533,112" href="../xslt/index.htm"><area shape="rect" coords="535,-1,610,108" href="../schema/index.htm"><area shape="rect" coords="613,1,696,121" href="../pxml/index.htm">
      </map>

</body></html>