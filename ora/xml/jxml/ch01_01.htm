<html><head><title>Introduction (Java &amp; XML, 2nd Edition)</title><link rel="stylesheet" type="text/css" href="../style/style1.css" />

<meta name="DC.Creator" content="Brett McLaughlin" /><meta name="DC.Format" content="text/xml" scheme="MIME" /><meta name="DC.Language" content="en-US" /><meta name="DC.Publisher" content="O'Reilly &amp; Associates, Inc." /><meta name="DC.Source" scheme="ISBN" content="059600197L" /><meta name="DC.Subject.Keyword" content="stuff" /><meta name="DC.Title" content="Java &amp; XML, 2nd Edition" /><meta name="DC.Type" content="Text.Monograph" />

</head><body bgcolor="#ffffff">

<img alt="Book Home" border="0" src="gifs/smbanner.gif" usemap="#banner-map" /><map name="banner-map"><area shape="rect" coords="1,-2,616,66" href="index.htm" alt="Java and XML, 2nd Edition" /><area shape="rect" coords="629,-11,726,25" href="jobjects/fsearch.htm" alt="Search this book" /></map>

<div class="navbar"><table width="684" border="0"><tr><td align="left" valign="top" width="228"><a href="ch00_06.htm"><img alt="Previous" border="0" src="../gifs/txtpreva.gif" /></a></td><td align="center" valign="top" width="228"></td><td align="right" valign="top" width="228"><a href="ch01_02.htm"><img alt="Next" border="0" src="../gifs/txtnexta.gif" /></a></td></tr></table></div>




<h1 class="chapter">Chapter 1. Introduction</h1>
<div class="htmltoc"><h4 class="tochead">Contents:</h4>
  <p> <a href="#javaxml2-CHP-1-SECT-1">XML Matters</a><br />
<a href="ch01_02.htm">What's Important?</a><br />
<a href="ch01_03.htm">The Essentials</a><br />
<a href="ch01_04.htm">What's Next?</a><br /></p></div>

<p>Introductory chapters are typically pretty easy to write. In most
books, you give an overview of the technology covered, explain a few
basics, and try and get the reader interested. However, for this
second edition of <em class="emphasis">Java and XML</em>,
things aren't so easy. In the first edition, there were still a
lot of people coming to XML, or skeptics wanting to see if this new
type of markup was really as good as the hype. Over a year later,
everyone is using XML in hundreds of ways. In a sense, you probably
don't need an introduction. But I'll give you an idea of
what's going to be covered, why it matters, and what
you'll need to get up and running.
</p>

<div class="sect1"><a name="javaxml2-CHP-1-SECT-1" /></a>
<h2 class="sect1">1.1. XML Matters</h2>

<p>First, let me simply say that <a name="INDEX-26" /></a>XML matters. I know that sounds like
the beginning of a self-help seminar, but it's worth starting
with. There are still many developers, managers, and executives who
are afraid of XML. They are afraid of the perception that XML is
"cutting-edge," and of XML's high rate of change.
(This is a second edition, a year later, right? Has that much
changed?) They are afraid of the cost of hiring folks like you and me
to work in XML. Most of all, they are afraid of adding yet another
piece to their application puzzles.
</p>

<p>To try and assuage these fears, let me quickly run down the major
reasons that you should start working with XML, today. First, XML is
portable. Second, it allows an unprecedented degree of
interoperability. And finally, XML matters. . . because it
doesn't matter! If that's completely confusing, read on
and all will soon make sense.
</p>

<a name="javaxml2-CHP-1-SECT-1.1" /></a><div class="sect2">
<h3 class="sect2">1.1.1. Portability</h3>

<p><a name="INDEX-27" /></a>XML
is portable. If you've been around Java long, or have ever
wandered through Moscone Center at JavaOne, you've heard the
mantra of Java: "portable code." Compile Java code, drop
those <em class="emphasis">.class</em> or <em class="emphasis">.jar</em> files onto any operating system, and the
code runs. All you need is a Java Runtime Environment (JRE) or Java
Virtual Machine (JVM), and you're set. This has continually
been one of Java's biggest draws, because developers can work
on Linux or Windows workstations, develop and test code, and then
deploy on Sparcs, E4000s, HP-UX, or anything else you could imagine.
</p>

<p>As a result, XML is worth more than a passing look. Because XML is
simply text, it can obviously be moved between various platforms.
Even more importantly, <a name="INDEX-28" /></a>
<a name="INDEX-29" /></a>XML must conform to a
specification defined by the World Wide Web Consortium (W3C) at
<a href="../../../../../../www.w3.org/">http://www.w3.org</a>. This means
that XML is a standard. When you send XML, it conforms to this
standard; when some other application receives it, the XML still
conforms to that standard. The receiving application can count on
that. This is essentially what Java provides: any JVM knows what to
expect, and as long as code conforms to those expectations, it will
run. By using XML, you get portable data. In fact, recently you may
have heard the phrase "portable code, portable data" in
reference to the combination of Java and XML. It's a good
saying, because it turns out (as not all marketing-type slogans do)
to be true.
</p>

</div>
<a name="javaxml2-CHP-1-SECT-1.2" /></a><div class="sect2">
<h3 class="sect2">1.1.2. Interoperability</h3>

<p>Second, <a name="INDEX-30" /></a>XML
allows interoperability above and beyond what we've ever seen
in enterprise applications. Some of you probably think this is just
another form of portability, but it's more than that. Remember
that XML stands for the <em class="filename">Extensible Markup
Language</em>. And it is extensibility that is so important in
business interoperating. Consider HTML, the hypertext markup
language, for example. HTML is a standard. It's all text. So,
in those respects, it's just as portable as XML. In fact,
clients using different browsers on different operating systems can
all view HTML more or less identically. However, HTML is aimed
specifically at presentation. You couldn't use HTML to
represent a furniture manifest, or a billing invoice. That's
because the standard tightly defines the allowed tags, the format,
and everything else in HTML. This allows it to remain focused on
presentation, which is both an advantage and a disadvantage.
</p>

<p>However, XML says very little about the elements and content of a
document. Instead, it focuses on the structure of the document;
elements must begin and end, each attribute must have a single value,
and so on. The content of the document and the elements and
attributes used remain up to you. You can develop your own document
formatting, content, and custom specifications for representing your
data. And this allows interoperability. The various furniture chains
can agree upon a certain set of constraints for XML, and then
exchange data in those formats; they get all the advantages of XML
(like portability), as well as the ability to apply their business
knowledge to the data being exchanged to make it meaningful. A
billing system can include a customized format appropriate for
invoices, broadcast this format, and export and import invoices from
other billing systems. XML's extensibility makes it perfect for
cross-application operation.
</p>

<p>Even more intriguing is the large number of vertical
standards<a href="#FOOTNOTE-1">[1]</a> being
developed. Browse the ebXML project at <a href="../../../../../../www.ebxml.org/">http://www.ebxml.org</a> and see what's
going on. Here, businesses are working together to develop standards
built upon XML that allow global electronic commerce. The
telecommunications industry has undertaken similar efforts. Soon,
vertical markets across the world will have agreed upon standards for
exchanging data, all built on XML.
</p><blockquote class="footnote"> <a name="FOOTNOTE-1" /></a><p>[1]A <em class="filename">vertical standard</em>,
or <em class="filename">vertical market</em>, refers to a standard or
market targeting a specific business. Instead of moving horizontally
(where common functionality is preferred), the focus is on moving
vertically, providing functionality for a specific audience, like
shoe manufacturers or guitar makers.</p> </blockquote>

</div>
<a name="javaxml2-CHP-1-SECT-1.3" /></a><div class="sect2">
<h3 class="sect2">1.1.3. It Doesn't Matter</h3>

<p>When all is said and done, XML matters because it doesn't
matter. I said this earlier, and I want to say it again, because
it's at the root of why XML is so important. Proprietary
solutions for data, formats that are binary and must be decoded in
certain ways, and other data solutions all matter in the final
analysis. They involve communication with other companies, extensive
documentation, coding efforts, and reinvention of tools for
transmission. XML is so attractive because you don't need any
special expertise and can spend your time doing other things. In
<a href="ch02_01.htm">Chapter 2, "Nuts and Bolts"</a>, I describe in 25 or so pages most of
what you'll ever need to author XML. It doesn't require
documentation, because that documentation is already written. You
don't need special encoders or decoders; there are APIs and
parsers already written that handle all of this for you. And you
don't have to incur risk; XML is now a proven technology, with
millions of developers working, fixing, and extending it every day.
</p>

<p>XML is important because it becomes such a reliable, unimportant part
of your application. Write your constraints, encode your data in XML,
and forget about it. Then go on to the important things; the complex
business logic and presentation that involves weeks and months of
thought and hard work. Meanwhile, XML will happily chug along
representing your data with nary a whimper or whine (OK, I'm
getting a bit dramatic, but you get the idea).
</p>

<p>So if you've been afraid of XML, or even skeptical, jump on
board now. It might be the most important decision, with the fewest
side effects, that you'll ever make. The rest of this book will
get you up and running with APIs, transport protocols, and more odds
and ends than you can shake a stick at.
</p>

</div>
</div>








<hr width="684" align="left" />
<div class="navbar"><table width="684" border="0"><tr><td align="left" valign="top" width="228"><a href="ch00_06.htm"><img alt="Previous" border="0" src="../gifs/txtpreva.gif" /></a></td><td align="center" valign="top" width="228"><a href="index.htm"><img alt="Home" border="0" src="../gifs/txthome.gif" /></a></td><td align="right" valign="top" width="228"><a href="ch01_02.htm"><img alt="Next" border="0" src="../gifs/txtnexta.gif" /></a></td></tr><tr><td align="left" valign="top" width="228">0.6. Acknowledgments</td><td align="center" valign="top" width="228"><a href="index/index.htm"><img alt="Book Index" border="0" src="../gifs/index.gif" /></a></td><td align="right" valign="top" width="228">1.2. What's Important?</td></tr></table></div>
<hr width="684" align="left" />

<img alt="Library Navigation Links" border="0" src="../gifs/navbar.gif" usemap="#library-map" />
<p><p><font size="-1"><a href="copyrght.htm">Copyright &copy; 2002</a> O'Reilly &amp; Associates. All rights reserved.</font></p>

<map name="library-map">
<area shape="rect" coords="0,0,85,93" href="../index.htm"><area shape="rect" coords="85,0,180,98" href="../sax2/index.htm"><area shape="rect" coords="182,-1,261,100" href="../xmlnut/index.htm"><area shape="rect" coords="263,1,384,96" href="index.htm"><area shape="rect" coords="386,1,463,100" href="../jxslt/index.htm"><area shape="rect" coords="466,1,533,112" href="../xslt/index.htm"><area shape="rect" coords="535,-1,610,108" href="../schema/index.htm"><area shape="rect" coords="613,1,696,121" href="../pxml/index.htm">
      </map>

</body></html>