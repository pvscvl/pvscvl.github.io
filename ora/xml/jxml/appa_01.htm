<html><head><title>API Reference (Java &amp; XML, 2nd Edition)</title><link rel="stylesheet" type="text/css" href="../style/style1.css" />

<meta name="DC.Creator" content="Brett McLaughlin" /><meta name="DC.Format" content="text/xml" scheme="MIME" /><meta name="DC.Language" content="en-US" /><meta name="DC.Publisher" content="O'Reilly &amp; Associates, Inc." /><meta name="DC.Source" scheme="ISBN" content="059600197L" /><meta name="DC.Subject.Keyword" content="stuff" /><meta name="DC.Title" content="Java &amp; XML, 2nd Edition" /><meta name="DC.Type" content="Text.Monograph" />

</head><body bgcolor="#ffffff">

<img alt="Book Home" border="0" src="gifs/smbanner.gif" usemap="#banner-map" /><map name="banner-map"><area shape="rect" coords="1,-2,616,66" href="index.htm" alt="Java and XML, 2nd Edition" /><area shape="rect" coords="629,-11,726,25" href="jobjects/fsearch.htm" alt="Search this book" /></map>

<div class="navbar"><table width="684" border="0"><tr><td align="left" valign="top" width="228"><a href="ch16_05.htm"><img alt="Previous" border="0" src="../gifs/txtpreva.gif" /></a></td><td align="center" valign="top" width="228"></td><td align="right" valign="top" width="228"><a href="appa_02.htm"><img alt="Next" border="0" src="../gifs/txtnexta.gif" /></a></td></tr></table></div>




<h1 class="chapter">Appendix A. API Reference</h1>
<div class="htmltoc"><h4 class="tochead">Contents:</h4>
  <p> <a href="#javaxml2-APP-A-SECT-1">SAX 2.0</a><br />
<a href="appa_02.htm">DOM Level 2</a><br />
<a href="appa_03.htm">JAXP 1.1</a><br />
<a href="appa_04.htm">JDOM 1.0 (Beta 7)</a><br /></p></div>

<p>This appendix is an API reference for the four lower-level Java and
XML APIs covered in this book, SAX, DOM, JDOM, and JAXP. It is broken
down into sections based on the API being documented.
</p>

<div class="sect1"><a name="javaxml2-APP-A-SECT-1" /></a>
<h2 class="sect1">A.1. SAX 2.0</h2>

<p><a name="INDEX-1477" /></a>SAX 2.0
provides a sequential look into an XML document. Detailed in <a href="ch03_01.htm">Chapter 3, "SAX"</a> and <a href="ch04_01.htm">Chapter 4, "Advanced SAX "</a>, SAX
defines a set of interfaces that can be implemented and will be
invoked as callbacks during the XML parsing process. The SAX
<a name="INDEX-1478" /></a>packages
are detailed here, with the classes and interfaces listed
alphabetically. In the <tt class="literal">org.xml.sax.helpers</tt>
package, most of the methods in the helper classes are
implementations of interfaces already defined in the core SAX package
(<tt class="literal">org.xml.sax</tt>).
</p>

<a name="javaxml2-APP-A-SECT-1.1" /></a><div class="sect2">
<h3 class="sect2">A.1.1. Package: org.xml.sax</h3>

<p><a name="INDEX-1479" /></a>
<a name="INDEX-1480" /></a>This
package contains the core interfaces and classes for SAX 2.0. Most of
the interfaces defined are intended to be implemented by you, the
Java developer, with the exception of the actual
<tt class="literal">XMLReader</tt> and <tt class="literal">Attributes</tt>
implementation. These interfaces should be implemented by your
vendor's XML parsing software. In addition, several exceptions
that SAX methods are allowed to throw are defined. Several of the
interfaces defined here are part of the SAX 1.0 and 2.0 alpha
distributions, and are now deprecated.
</p>

<a name="javaxml2-APP-A-SECT-1.1.1" /></a><div class="sect3">
<h3 class="sect3">A.1.1.1. AttributeList [deprecated]</h3>

<p><a name="INDEX-1481" /></a>
<a name="INDEX-1482" /></a>This
interface was defined in SAX 1.0, and is now deprecated. The
<tt class="literal">Attributes</tt> interface should be used instead of
<tt class="literal">AttributeList</tt> for SAX 2.0 implementations.
</p>

<blockquote><pre class="code">public interface AttributeList {
    public abstract int getLength( );
    public abstract String getName(int i);
    public abstract String getType(int i);
    public abstract String getValue(int i);
    public abstract String getType(String name);
    public abstract String getValue(String name);
}</pre></blockquote>

</div>

<a name="javaxml2-APP-A-SECT-1.1.2" /></a><div class="sect3">
<h3 class="sect3">A.1.1.2. Attributes</h3>

<p><a name="INDEX-1483" /></a>
<a name="INDEX-1484" /></a>This
interface represents a listing of XML attributes. It is reported to
the callbacks associated with the start of element
(<tt class="literal">startElement( )</tt> in
<tt class="literal">ContentHandler</tt>), and is somewhat analogous to a
Java <tt class="literal">Vector</tt>. The number of attributes represented
can be obtained, as well as various views of the attributes'
names (local, namespace prefix and URI, and raw) and values.
Additionally, methods are available for locating the index of an
attribute given its name. The primary difference between this
interface and its predecessor, <tt class="literal">AttributeList</tt>, is
that this interface is namespace-aware.
</p>

<blockquote><pre class="code">public interface Attributes {
    public abstract int getLength( );
    public abstract String getURI(int index);
    public abstract String getLocalName(int index);
    public abstract String getQName(int index);
    public abstract String getType(int index);
    public abstract String getValue(int index);
    public int getIndex(String uri, String localName);
    public int getIndex(String qName);
    public abstract String getType(String uri, String localName);
    public abstract String getType(String qName);
    public abstract String getValue(String uri, String localName);
    public abstract String getValue(String qName);
}</pre></blockquote>

</div>

<a name="javaxml2-APP-A-SECT-1.1.3" /></a><div class="sect3">
<h3 class="sect3">A.1.1.3. ContentHandler</h3>

<p><a name="INDEX-1485" /></a>
<a name="INDEX-1486" /></a>This
interface defines the callback methods available to an application
that deal with the content of the XML document being parsed. These
include notification of the start and end of parsing (which precede
and follow all other handler callbacks, respectively), processing
instructions, and entities that may be skipped by nonvalidating
parsers. Element callbacks, complete with namespace mappings, are
also made available.
</p>

<blockquote><pre class="code">public interface ContentHandler {
    public void setDocumentLocator(Locator locator);
    public void startDocument( ) throws SAXException;
    public void endDocument( ) throws SAXException;
    public void startPrefixMapping(String prefix, String uri)
        throws SAXException;
    public void endPrefixMapping(String prefix)
        throws SAXException;
    public void startElement(String namespaceURI, String localName,
                              String qName, Attributes atts)
        throws SAXException;
    public void endElement(String namespaceURI, String localName,
                              String qName)
        throws SAXException;
    public void characters(char ch[], int start, int length)
        throws SAXException;
    public void ignorableWhitespace(char ch[], int start, int length)
        throws SAXException;
    public void processingInstruction(String target, String data)
        throws SAXException;
    public void skippedEntity(String name)
        throws SAXException;
}</pre></blockquote>

</div>

<a name="javaxml2-APP-A-SECT-1.1.4" /></a><div class="sect3">
<h3 class="sect3">A.1.1.4. DocumentHandler</h3>

<p><a name="INDEX-1487" /></a>
<a name="INDEX-1488" /></a>This
interface was defined in SAX 1.0, and is now deprecated. The
<tt class="literal">ContentHandler</tt> interface should be used instead of
<tt class="literal">DocumentHandler</tt> for SAX 2.0 implementations.
</p>

<blockquote><pre class="code">public interface DocumentHandler {
    public abstract void setDocumentLocator(Locator locator);
    public abstract void startDocument( ) throws SAXException;
    public abstract void endDocument( ) throws SAXException;
    public abstract void startElement(String name, AttributeList atts)
               throws SAXException;
    public abstract void endElement(String name)
               throws SAXException;
    public abstract void characters(char ch[], int start, int length)
               throws SAXException;
    public abstract void ignorableWhitespace(char ch[], int start, int length)
               throws SAXException;
    public abstract void processingInstruction (String target, String data)
               throws SAXException;
}</pre></blockquote>

</div>

<a name="javaxml2-APP-A-SECT-1.1.5" /></a><div class="sect3">
<h3 class="sect3">A.1.1.5. DTDHandler</h3>

<p><a name="INDEX-1489" /></a>
<a name="INDEX-1490" /></a>This
interface defines callbacks that are invoked in the process of
parsing a DTD. Note that this interface does not provide information
about the constraints within the DTD, but instead about references to
unparsed entities and <tt class="literal">NOTATION</tt> declarations,
indicating items that are generally unparsed data.
</p>

<blockquote><pre class="code">public interface DTDHandler {
    public abstract void notationDecl(String name, String publicId,
                                      String systemId)
                 throws SAXException;
    public abstract void unparsedEntityDecl(String name, String publicId,
                                      String systemId,
                                      String notationName)
           throws SAXException;
}</pre></blockquote>

</div>

<a name="javaxml2-APP-A-SECT-1.1.6" /></a><div class="sect3">
<h3 class="sect3">A.1.1.6. EntityResolver</h3>

<p><a name="INDEX-1491" /></a>
<a name="INDEX-1492" /></a>This
interface allows applications to intervene in the process of
referencing external entities, such as an XML document that
references a DTD or stylesheet. By implementing this interface, a
modified or even completely different SAX
<tt class="literal">InputSource</tt> can be returned to the calling
program. Additionally, <tt class="literal">null</tt> can be returned to
indicate that a normal URI connection should be opened to the
specified system ID.
</p>

<blockquote><pre class="code">public interface EntityResolver {
    public abstract InputSource resolveEntity(String publicId,
                                    String systemId)
             throws SAXException, IOException;
}</pre></blockquote>

</div>

<a name="javaxml2-APP-A-SECT-1.1.7" /></a><div class="sect3">
<h3 class="sect3">A.1.1.7. ErrorHandler</h3>

<p><a name="INDEX-1493" /></a>
<a name="INDEX-1494" /></a>This
interface allows custom behavior to be attached to the three types of
problem conditions that can occur within the lifecycle of XML
parsing. Each receives the <tt class="literal">SAXParseException</tt>
indicating what problem initiated the callback. The
<tt class="literal">SAXException</tt> is provided to allow a means of
throwing an exception that could stop parsing altogether.
</p>

<blockquote><pre class="code">public interface ErrorHandler {
    public abstract void warning(SAXParseException exception)
               throws SAXException;
    public abstract void error(SAXParseException exception)
               throws SAXException;
    public abstract void fatalError(SAXParseException exception)
               throws SAXException;
}</pre></blockquote>

</div>

<a name="javaxml2-APP-A-SECT-1.1.8" /></a><div class="sect3">
<h3 class="sect3">A.1.1.8. HandlerBase</h3>

<p><a name="INDEX-1495" /></a>
<a name="INDEX-1496" /></a>This
helper class provides empty implementations of all the SAX 1.0 core
handler interfaces, and can be extended to allow the quick addition
of handlers by overriding methods with application-defined behavior.
This class was defined in SAX 1.0, and is now deprecated. The
<tt class="literal">org.xml.sax.helpers.DefaultHandler</tt> class should be
used instead of <tt class="literal">HandlerBase</tt> for SAX 2.0
implementations.
</p>

<blockquote><pre class="code">public class HandlerBase implements EntityResolver, DTDHandler,
                                    DocumentHandler, ErrorHandler {

        // EntityResolver implementation
        public InputSource resolveEntity(String publicId, String systemId);

        // DTDHandler implementation
        public void notationDecl(String name, String publicId, 
                             String systemId);
    public void unparsedEntityDecl(String name, String publicId,
                         String systemId, String notationName);

        // DocumentHandler implementation
        public void setDocumentLocator(Locator locator);
    public abstract void startDocument( ) throws SAXException;
    public abstract void endDocument( ) throws SAXException;
    public abstract void startElement(String name, AttributeList atts)
               throws SAXException;
    public abstract void endElement(String name)
               throws SAXException;
    public abstract void characters(char ch[], int start, int length)
               throws SAXException;
    public abstract void ignorableWhitespace(char ch[], int start, 
                                                        int length)
               throws SAXException;
    public abstract void processingInstruction(String target, 
                                               String data)
               throws SAXException;

       // ErrorHandler implementation
    public abstract void warning(SAXParseException exception)
               throws SAXException;
    public abstract void error(SAXParseException exception)
               throws SAXException;
    public abstract void fatalError(SAXParseException exception)
               throws SAXException;
}</pre></blockquote>

</div>

<a name="javaxml2-APP-A-SECT-1.1.9" /></a><div class="sect3">
<h3 class="sect3">A.1.1.9. InputSource</h3>

<p><a name="INDEX-1497" /></a>
<a name="INDEX-1498" /></a>This
class encapsulates all information about a resource used in XML
processing. This can be as little as a <tt class="literal">String</tt> or
<tt class="literal">InputStream</tt> used for locating input, or as complex
as an entity with a public ID and system ID as well as a URI
reference (such as a DTD publicly defined). This class is the
preferred wrapper for passing input into a SAX parser.
</p>

<blockquote><pre class="code">public class InputSource {
    public InputSource( );
    public InputSource(String systemId);
    public InputSource(InputStream byteStream);
    public InputSource(Reader characterStream);
    public void setPublicId(String publicId);
    public String getPublicId( );
    public void setSystemId(String systemId);
    public String getSystemId( );
    public void setByteStream(InputStream byteStream);
    public InputStream getByteStream( );
    public void setEncoding(String encoding);
    public String getEncoding( );
    public void setCharacterStream(Reader characterStream);
    public Reader getCharacterStream( );
}</pre></blockquote>

</div>

<a name="javaxml2-APP-A-SECT-1.1.10" /></a><div class="sect3">
<h3 class="sect3">A.1.1.10. Locator</h3>

<p><a name="INDEX-1499" /></a>
<a name="INDEX-1500" /></a>This
class is a complement to an XML document or other parsed construct,
as it provides the document's system ID and public ID as well
as information about the location within the file being processed.
This is particularly helpful for use in IDE applications and for
identifying where errors occur in parsing.
</p>

<blockquote><pre class="code">public interface Locator {
    public abstract String getPublicId( );
    public abstract String getSystemId( );
    public abstract int getLineNumber( );
    public abstract int getColumnNumber( );
}</pre></blockquote>

</div>

<a name="javaxml2-APP-A-SECT-1.1.11" /></a><div class="sect3">
<h3 class="sect3">A.1.1.11. Parser</h3>

<p><a name="INDEX-1501" /></a>
<a name="INDEX-1502" /></a>This
interface was defined in SAX 1.0, and is now deprecated. The
<tt class="literal">XMLReader</tt> interface should be used instead for SAX
2.0 implementations.
</p>

<blockquote><pre class="code">public interface Parser {
    public abstract void setLocale(Locale locale) throws SAXException;
    public abstract void setEntityResolver(EntityResolver resolver);
    public abstract void setDTDHandler(DTDHandler handler);
    public abstract void setDocumentHandler(DocumentHandler handler);
    public abstract void setErrorHandler(ErrorHandler handler);
    public abstract void parse(InputSource source)
              throws SAXException, IOException;
    public abstract void parse(String systemId)
              throws SAXException, IOException;
}</pre></blockquote>

</div>

<a name="javaxml2-APP-A-SECT-1.1.12" /></a><div class="sect3">
<h3 class="sect3">A.1.1.12. SAXException</h3>

<p><a name="INDEX-1503" /></a>
<a name="INDEX-1504" /></a>This
is the core exception thrown by SAX callbacks and parser
implementations. Because it is often thrown as a result of other
exceptions, it has a constructor that allows the passing in of a
lower-level <tt class="literal">Exception</tt> as well as an accessor
method to retrieve the originating <tt class="literal">Exception</tt>. It
is also the base class for all other SAX <tt class="literal">Exception</tt>
classes.
</p>

<blockquote><pre class="code">public class SAXException extends Exception {
     public SAXException(String message);
       public SAXException(Exception e);
       public SAXException(String message, Exception e);
       public String getMessage( );
       public Exception getException( );
       public String toString( );
}</pre></blockquote>

</div>

<a name="javaxml2-APP-A-SECT-1.1.13" /></a><div class="sect3">
<h3 class="sect3">A.1.1.13. SAXNotRecognizedException</h3>

<p><a name="INDEX-1505" /></a>
<a name="INDEX-1506" /></a>This
class provides a means for an <tt class="literal">XMLReader</tt>
implementation to throw an error when an unrecognized identifier is
received. This is most common in the <tt class="literal">setProperty(
)</tt> and <tt class="literal">setFeature( )</tt> methods (as well as
their accessor counterparts) when a URI is supplied about which the
parser has no information.
</p>

<blockquote><pre class="code">public class SAXNotRecognizedException extends SAXException {
    public SAXNotRecognizedException(String message);
}</pre></blockquote>

</div>

<a name="javaxml2-APP-A-SECT-1.1.14" /></a><div class="sect3">
<h3 class="sect3">A.1.1.14. SAXNotSupportedException</h3>

<p><a name="INDEX-1507" /></a>
<a name="INDEX-1508" /></a>This
class provides a means for an <tt class="literal">XMLReader</tt>
implementation to throw an error when an unsupported (but recognized)
identifier is received. This is most common in the
<tt class="literal">setProperty( )</tt> and <tt class="literal">setFeature(
)</tt> methods (as well as their accessor counterparts) when a
URI is supplied for which the parser has no supporting code.
</p>

<blockquote><pre class="code">public class SAXNotSupportedException extends SAXException {
    public SAXNotSupportedException(String message)
}</pre></blockquote>

</div>

<a name="javaxml2-APP-A-SECT-1.1.15" /></a><div class="sect3">
<h3 class="sect3">A.1.1.15. SAXParseException</h3>

<p><a name="INDEX-1509" /></a>
<a name="INDEX-1510" /></a>This
class represents exceptions that can occur during the parsing
process. Information about the location of the error within the XML
document is available through this class's accessor methods.
The preferred means of supplying this information to the class is
through a <tt class="literal">Locator</tt>, but the line and column number
where problems occurred can be supplied directly through overloaded
constructors. The system ID and public ID of the document with the
problem are also made available to the class through various means in
the constructors.
</p>

<blockquote><pre class="code">public class SAXParseException extends SAXException {
    public SAXParseException(String message, Locator locator);
    public SAXParseException(String message, Locator locator,
                              Exception e);
       public SAXParseException(String message, String publicId, 
                            String systemId, int lineNumber, 
                                  int columnNumber);
    public SAXParseException(String message, String publicId, 
                             String systemId, int lineNumber, 
                             int columnNumber, Exception e);
    public String getPublicId( );
    public String getSystemId( );
    public int getColumnNumber( );
}</pre></blockquote>

</div>

<a name="javaxml2-APP-A-SECT-1.1.16" /></a><div class="sect3">
<h3 class="sect3">A.1.1.16. XMLFilter</h3>

<p><a name="INDEX-1511" /></a>
<a name="INDEX-1512" /></a>This
class is analogous to an <tt class="literal">XMLReader</tt>, but it obtains
its events from another <tt class="literal">XMLReader</tt> rather than a
static document or network resource. These filters can also be
chained on each other. Their primary use is in modifying the output
from a lower-level <tt class="literal">XMLReader</tt> in the chain,
providing filtering of the data reported to callback methods before
the final application receives notification of the data.
</p>

<blockquote><pre class="code">public interface XMLFilter extends XMLReader {
    public abstract void setParent(XMLReader parent);
    public abstract XMLReader getParent( );
}</pre></blockquote>

</div>

<a name="javaxml2-APP-A-SECT-1.1.17" /></a><div class="sect3">
<h3 class="sect3">A.1.1.17. XMLReader</h3>

<p><a name="INDEX-1513" /></a>
<a name="INDEX-1514" /></a>This
is the core interface that defines parsing behavior in SAX 2.0. Each
vendor's XML parsing software package must include at least one
implementation of this interface. It replaces the SAX 1.0
<tt class="literal">Parser</tt> interface by adding support for namespaces
in a document's elements and attributes. In addition to
providing an entry into parsing (with either a system ID or
<tt class="literal">InputSource</tt> as input), it allows registering of
the various handler interfaces that SAX 2.0 provides. The features
and properties available to a SAX parser implementation are also set
through this interface. A complete list of SAX core features and
properties is contained in <a href="appb_01.htm">Appendix B, "SAX 2.0 Features and Properties"</a>.
</p>

<a name="INDEX-1515" /></a><a name="INDEX-1516" /></a><blockquote><pre class="code">public interface XMLReader {
    public boolean getFeature(String name)
        throws SAXNotRecognizedException, SAXNotSupportedException;
    public void setFeature(String name, boolean value)
              throws SAXNotRecognizedException, SAXNotSupportedException;
    public Object getProperty(String name)
              throws SAXNotRecognizedException, SAXNotSupportedException;
    public void setProperty(String name, Object value)
              throws SAXNotRecognizedException, SAXNotSupportedException;
    public void setEntityResolver(EntityResolver resolver);
    public EntityResolver getEntityResolver( );
    public void setDTDHandler(DTDHandler handler);
    public DTDHandler getDTDHandler( );
    public void setContentHandler(ContentHandler handler);
    public ContentHandler getContentHandler( );
    public void setErrorHandler(ErrorHandler handler);
    public ErrorHandler getErrorHandler( );
    public void parse(InputSource input)
              throws IOException, SAXException;
    public void parse(String systemId)
              throws IOException, SAXException;
}
</pre></blockquote>

</div>
</div>
<a name="javaxml2-APP-A-SECT-1.2" /></a><div class="sect2">
<h3 class="sect2">A.1.2. Package: org.xml.sax.ext</h3>

<p>This
<a name="INDEX-1517" /></a>package
provides extensions to the SAX core classes and interfaces.
Specifically, additional handlers are defined for less common
processing within the SAX parsing process.
<tt class="literal">XMLReader</tt> implementations are not required to
support these extension handlers.
</p>

<a name="javaxml2-APP-A-SECT-1.2.1" /></a><div class="sect3">
<h3 class="sect3">A.1.2.1. DeclHandler</h3>

<p><a name="INDEX-1518" /></a>
<a name="INDEX-1519" /></a>This
interface defines callbacks that give specific information about DTD
declarations. Element and attribute definitions invoke the
appropriate callback with their names (and the element names for
attributes) as well as constraint information. While this is a fairly
rigid set of data for attributes, elements only receive a
<tt class="literal">String</tt> with the constrained model as pure text.
Additionally, internal and external entity reference notifications
are defined.
</p>

<blockquote><pre class="code">public interface DeclHandler {
    public abstract void elementDecl(String name, String model)
              throws SAXException;
    public abstract void attributeDecl(String eName, String aName,
                                      String type, String valueDefault,
                                      String value)
              throws SAXException;
    public abstract void internalEntityDecl(String name, String value)
              throws SAXException;
    public abstract void externalEntityDecl(String name, String publicId,
                                               String systemId)
              throws SAXException;
}</pre></blockquote>

</div>

<a name="javaxml2-APP-A-SECT-1.2.2" /></a><div class="sect3">
<h3 class="sect3">A.1.2.2. LexicalHandler</h3>

<p><a name="INDEX-1520" /></a>
<a name="INDEX-1521" /></a>This
interface defines callbacks for various events that are at a document
level in terms of processing, but do not affect the resulting data
within the XML document. For example, the handling of a DTD
declaration, comments, and entity references would invoke callbacks
in implementations of this interface. Additionally, a callback is
defined to signal when a <tt class="literal">CDATA</tt> section is started
and ended (although the reported data will always remain the same).
</p>

<blockquote><pre class="code">public interface LexicalHandler {
    public abstract void startDTD(String name, String publicId,
                                  String systemId)
              throws SAXException;
    public abstract void endDTD( )
              throws SAXException;
    public abstract void startEntity(String name)
              throws SAXException;
    public abstract void endEntity(String name)
              throws SAXException;
    public abstract void startCDATA( )
              throws SAXException;
    public abstract void endCDATA( )
              throws SAXException;
    public abstract void comment(char ch[], int start, int length)
              throws SAXException;
}</pre></blockquote>

</div>
</div>
<a name="javaxml2-APP-A-SECT-1.3" /></a><div class="sect2">
<h3 class="sect2">A.1.3. Package: org.xml.sax.helpers</h3>

<p><a name="INDEX-1522" /></a>This
<a name="INDEX-1523" /></a>package
provides extensions to the SAX core classes and interfaces.
Specifically, additional handlers are defined for less common
processing within the SAX parsing process.
<tt class="literal">XMLReader</tt> implementations are not required to
support these extension handlers.
</p>

<a name="appa-25-fm2xml" /></a><blockquote><b>NOTE:</b> 

In the classes in this package that are default implementations of core <tt class="literal">org.xml.sax</tt> interfaces, I have left out the repeated methods for brevity. Instead, I've simply added a comment indicating what interface's methods are implemented.
<p></p>
</blockquote>
<a name="javaxml2-APP-A-SECT-1.3.1" /></a><div class="sect3">
<h3 class="sect3">A.1.3.1. AttributeListImpl</h3>

<p><a name="INDEX-1524" /></a>
<a name="INDEX-1525" /></a>This
class provides a default implementation of the
<tt class="literal">org.xml.sax.AttributeList</tt> interface, and is
deprecated in SAX 2.0. It allows addition and removal of attributes
as well as a clearing of the list.
</p>

<blockquote><pre class="code">public class AttributeListImpl implements AttributeList {
       public AttributeListImpl( );
       public AttributeListImpl(AttributeList atts);

       // Implementation of AttributeList interface

       // Additional methods
       public void setAttributeList(AttributeList atts);
       public void addAttribute(String name, String type, String value);
       public void removeAttribute(String name);
       public void clear( );

}</pre></blockquote>

</div>

<a name="javaxml2-APP-A-SECT-1.3.2" /></a><div class="sect3">
<h3 class="sect3">A.1.3.2. AttributesImpl</h3>

<p><a name="INDEX-1526" /></a>
<a name="INDEX-1527" /></a>This
class provides a default implementation of the
<tt class="literal">org.xml.sax.Attributes</tt> interface. It allows
addition and removal of attributes as well as a clearing of the list.
</p>

<blockquote><pre class="code">public class AttributesImpl implements Attributes {
       public AttributesImpl( );
       public AttributesImpl(Attributes atts);

       // Implementation of Attributes interface

       // Additional methods
    public void addAttribute(String uri, String localName, 
                             String qName, String type, String value);
    public void setAttribute(int index, String uri, String localName,
                              String qName, String type, String value);
       public void clear( );
}</pre></blockquote>

</div>

<a name="javaxml2-APP-A-SECT-1.3.3" /></a><div class="sect3">
<h3 class="sect3">A.1.3.3. DefaultHandler</h3>

<p><a name="INDEX-1528" /></a>
<a name="INDEX-1529" /></a>This
helper class provides empty implementations of all the SAX 2.0 core
handler interfaces, and can be extended to allow for quick addition
of handlers by only overriding methods with application-defined
behavior. This replaces the SAX 1.0
<tt class="literal">org.xml.sax.HandlerBase</tt> class.
</p>

<blockquote><pre class="code">public class DefaultHandler implements EntityResolver, DTDHandler, 
                                       ContentHandler, ErrorHandler {

       // (Empty) Implementation of EntityResolver interface

       // (Empty) Implementation of DTDHandler interface

       // (Empty) Implementation of ContentHandler interface

       // (Empty) Implementation of ErrorHandler interface
}</pre></blockquote>

</div>

<a name="javaxml2-APP-A-SECT-1.3.4" /></a><div class="sect3">
<h3 class="sect3">A.1.3.4. LocatorImpl</h3>

<p><a name="INDEX-1530" /></a>
<a name="INDEX-1531" /></a>This
class provides a default implementation of the
<tt class="literal">org.xml.sax.Locator</tt> interface. It also provides a
means of directly setting the line and column numbers.
</p>

<blockquote><pre class="code">public class LocatorImpl implements Locator {
       public LocatorImpl( );
       public LocatorImpl(Locator locator);

       // Implementation of Locator interface

       // Additional methods
       public void setPublicId(String publicId);
       public void setSystemId(String systemId);
       public void setLineNumber(int lineNumber);
       public void setColumnNumber(int columnNumber);
}</pre></blockquote>

</div>

<a name="javaxml2-APP-A-SECT-1.3.5" /></a><div class="sect3">
<h3 class="sect3">A.1.3.5. NamespaceSupport</h3>

<p><a name="INDEX-1532" /></a>
<a name="INDEX-1533" /></a>This
encapsulates namespace behavior, allowing applications to not have to
implement the behavior on their own (unless desired for performance
reasons). It allows handling of namespace contexts in a stack
fashion, and also provides the ability to process XML 1.0 names,
retrieving their "namespace-aware" counterparts.
</p>

<blockquote><pre class="code">public class NamespaceSupport {
       public NamespaceSuport( );
       public void reset( );
    public void pushContext( );
    public void popContext( );
    public boolean declarePrefix(String prefix, String uri);
    public String [] processName(String qName, String parts[],
                                 boolean isAttribute);
    public String getURI(String prefix);
    public Enumeration getPrefixes( );
    public Enumeration getDeclaredPrefixes( );
}</pre></blockquote>

</div>

<a name="javaxml2-APP-A-SECT-1.3.6" /></a><div class="sect3">
<h3 class="sect3">A.1.3.6. ParserAdapter</h3>

<p><a name="INDEX-1534" /></a>
<a name="INDEX-1535" /></a>This
helper class wraps a SAX 1.0 <tt class="literal">Parser</tt> implementation
and makes it behave like a 2.0 <tt class="literal">XMLReader</tt>
implementation (making namespace support available). The only
callback that does not behave normally is <tt class="literal">skippedEntity(
)</tt> in the <tt class="literal">ContentHandler</tt> interface; it is
never invoked.
</p>

<blockquote><pre class="code">public class ParserAdapter implements XMLReader, DocumentHandler {
       public ParserAdapter( ) throws SAXException;
       public ParserAdapter(Parser parser);

       // Implementation of XMLReader interface

       // Implementation of DocumentHandler interface
}</pre></blockquote>

</div>

<a name="javaxml2-APP-A-SECT-1.3.7" /></a><div class="sect3">
<h3 class="sect3">A.1.3.7. ParserFactory</h3>

<p><a name="INDEX-1536" /></a>
<a name="INDEX-1537" /></a>This
class contains methods that dynamically create an instance of a
<tt class="literal">Parser</tt> implementation from a specified class name,
or if none is supplied, from a system property named
"org.xml.sax.driver".
</p>

<blockquote><pre class="code">public class ParserFactory {
    public static Parser makeParser( ) throws ClassNotFoundException,
                IllegalAccessException, InstantiationException,
                NullPointerException, ClassCastException;
    public static Parser makeParser(String className)
                throws ClassNotFoundException, IllegalAccessException, 
                InstantiationException, ClassCastException;
}</pre></blockquote>

</div>

<a name="javaxml2-APP-A-SECT-1.3.8" /></a><div class="sect3">
<h3 class="sect3">A.1.3.8. XMLFilterImpl</h3>

<p><a name="INDEX-1538" /></a>
<a name="INDEX-1539" /></a>This
class provides a default implementation of the
<tt class="literal">org.xml.sax.XMLFilter</tt> interface.
</p>

<blockquote><pre class="code">public class XMLFilterImpl implements XMLFilter, EntityResolver, 
                                      DTDHandler, ContentHandler, 
                                      ErrorHandler {
       public XMLFilterImpl( );
       public XMLFilterImpl(XMLReader parent);

       // Implementation of XMLFilter interface

       // Implementation of XMLReader interface

       // Implementation of EntityResolver interface

       // Implementation of DTDHandler interface

       // Implementation of ContentHandler interface

       // Implementation of ErrorHandler interface
}</pre></blockquote>

</div>

<a name="javaxml2-APP-A-SECT-1.3.9" /></a><div class="sect3">
<h3 class="sect3">A.1.3.9. XMLReaderAdapter</h3>

<p><a name="INDEX-1540" /></a>
<a name="INDEX-1541" /></a>This
helper class wraps a SAX 2.0 <tt class="literal">XMLReader</tt>
implementation and makes it behave like a 1.0
<tt class="literal">Parser</tt> implementation (making namespace support
unavailable). The namespaces feature (<a href="../../../../../../xml.org/sax/features/namespaces">http://xml.org/sax/features/namespaces</a>) must
be supported, or errors in parsing will occur.
</p>

<blockquote><pre class="code">public class XMLReaderAdapter implements Parser, ContentHandler {
       public XMLReaderAdapter ( ) throws SAXException;
       public XMLReaderAdapter (XMLReader xmlReader);

    // Implementation of Parser interface

       // Implementation of ContentHandler interface
}</pre></blockquote>

</div>

<a name="javaxml2-APP-A-SECT-1.3.10" /></a><div class="sect3">
<h3 class="sect3">A.1.3.10. XMLReaderFactory</h3>

<p><a name="INDEX-1542" /></a>
<a name="INDEX-1543" /></a>This
class contains methods that dynamically create an instance of an
<tt class="literal">XMLReader</tt> implementation from a specified class
name, or if none is supplied, from a system property named
"org.xml.sax.driver".
</p>

<a name="INDEX-1544" /></a><a name="INDEX-1545" /></a><blockquote><pre class="code">final public class XMLReaderFactory {
    public static XMLReader createXMLReader( ) throws SAXException;
    public static XMLReader createXMLReader(String className)
              throws SAXException;
}</pre></blockquote>

</div>
</div>
</div>








<hr width="684" align="left" />
<div class="navbar"><table width="684" border="0"><tr><td align="left" valign="top" width="228"><a href="ch16_05.htm"><img alt="Previous" border="0" src="../gifs/txtpreva.gif" /></a></td><td align="center" valign="top" width="228"><a href="index.htm"><img alt="Home" border="0" src="../gifs/txthome.gif" /></a></td><td align="right" valign="top" width="228"><a href="appa_02.htm"><img alt="Next" border="0" src="../gifs/txtnexta.gif" /></a></td></tr><tr><td align="left" valign="top" width="228">16.5. What's Next?</td><td align="center" valign="top" width="228"><a href="index/index.htm"><img alt="Book Index" border="0" src="../gifs/index.gif" /></a></td><td align="right" valign="top" width="228">A.2. DOM Level 2</td></tr></table></div>
<hr width="684" align="left" />

<img alt="Library Navigation Links" border="0" src="../gifs/navbar.gif" usemap="#library-map" />
<p><p><font size="-1"><a href="copyrght.htm">Copyright &copy; 2002</a> O'Reilly &amp; Associates. All rights reserved.</font></p>

<map name="library-map">
<area shape="rect" coords="0,0,85,93" href="../index.htm"><area shape="rect" coords="85,0,180,98" href="../sax2/index.htm"><area shape="rect" coords="182,-1,261,100" href="../xmlnut/index.htm"><area shape="rect" coords="263,1,384,96" href="index.htm"><area shape="rect" coords="386,1,463,100" href="../jxslt/index.htm"><area shape="rect" coords="466,1,533,112" href="../xslt/index.htm"><area shape="rect" coords="535,-1,610,108" href="../schema/index.htm"><area shape="rect" coords="613,1,696,121" href="../pxml/index.htm">
      </map>

</body></html>