<html><head><title>XMLProperties (Java &amp; XML, 2nd Edition)</title><link rel="stylesheet" type="text/css" href="../style/style1.css" />

<meta name="DC.Creator" content="Brett McLaughlin" /><meta name="DC.Format" content="text/xml" scheme="MIME" /><meta name="DC.Language" content="en-US" /><meta name="DC.Publisher" content="O'Reilly &amp; Associates, Inc." /><meta name="DC.Source" scheme="ISBN" content="059600197L" /><meta name="DC.Subject.Keyword" content="stuff" /><meta name="DC.Title" content="Java &amp; XML, 2nd Edition" /><meta name="DC.Type" content="Text.Monograph" />

</head><body bgcolor="#ffffff">

<img alt="Book Home" border="0" src="gifs/smbanner.gif" usemap="#banner-map" /><map name="banner-map"><area shape="rect" coords="1,-2,616,66" href="index.htm" alt="Java and XML, 2nd Edition" /><area shape="rect" coords="629,-11,726,25" href="jobjects/fsearch.htm" alt="Search this book" /></map>

<div class="navbar"><table width="684" border="0"><tr><td align="left" valign="top" width="228"><a href="ch07_02.htm"><img alt="Previous" border="0" src="../gifs/txtpreva.gif" /></a></td><td align="center" valign="top" width="228"></td><td align="right" valign="top" width="228"><a href="ch07_04.htm"><img alt="Next" border="0" src="../gifs/txtnexta.gif" /></a></td></tr></table></div>



<h2 class="sect1">7.3. XMLProperties</h2>

<p><a name="INDEX-709" /> <a name="INDEX-710" /> <a name="INDEX-711" />Let's
take things to the next logical step, and look at reading XML.
Continuing with the example of converting a properties file to XML,
you are now probably wondering how to access the information in your
XML file. Luckily, there's a solution for that, too! In this
section, for the sake of explaining how JDOM reads XML, I want to
introduce a new utility class, <tt class="literal">XMLProperties</tt>. This
class is essentially an XML-aware version of the Java
<tt class="literal">Properties</tt> class; in fact, it extends that class.
This class allows access to an XML document through the typical
property-access methods like <tt class="literal">getProperty( )</tt> and
<tt class="literal">properties( )</tt>; in other words, it allows
Java-style access (using the <tt class="literal">Properties</tt> class) to
XML-style storage. In my opinion, this is the best combination you
can get.
</p>

<p>To accomplish this task, you can start by creating an
<tt class="literal">XMLProperties</tt> class that extends the
<tt class="literal">java.util.Properties</tt> class. With this approach,
making things work becomes simply a matter of overriding the
<tt class="literal">load( )</tt>, <tt class="literal">save( )</tt>, and
<tt class="literal">store( )</tt> methods. The first of these,
<tt class="literal">load( )</tt><a name="INDEX-712" />
<a name="INDEX-713" />, reads in an XML document and loads the
properties within that document into the superclass object.
</p>
<blockquote><b>WARNING:</b> 

Don't mistake this class for an all-purpose XML-to-properties converter; it only will read in XML that is in the format detailed earlier in this chapter. In other words, <a name="INDEX-714" />properties are elements with either textual or attribute values but not both; I'll cover both approaches, but you'll have to choose one or the other. Don't try to take all your XML documents, read them in, and expect things to work as planned!
</p>
</blockquote>
<p>The second method, <tt class="literal">save(
)</tt><a name="INDEX-715" />
<a name="INDEX-716" />, is actually deprecated in Java 2, as it
doesn't expose any error information; still, it needs to be
overridden for Java 1.1 users. To facilitate this, the implementation
in <tt class="literal">XMLProperties</tt> simply calls <tt class="literal">store(
)</tt><a name="INDEX-717" />
<a name="INDEX-718" />. And <tt class="literal">store( )</tt> handles
the task of writing the properties information out to an XML
document. <a href="ch07_03.htm">Example 7-6</a> is a good start at this, and
provides a skeleton within <a name="INDEX-719" /> <a name="INDEX-720" />which
to work.
</p>

<a name="javaxml2-CHP-7-EX-6" /><div class="example">
<h4 class="objtitle">Example 7-6. The skeleton of the XMLProperties class </h4>
<blockquote><pre class="code">package javaxml2;

import java.io.File;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.IOException;
import java.io.OutputStream;
import java.io.OutputStreamWriter;
import java.io.Reader;
import java.io.Writer;
import java.util.Enumeration;
import java.util.Iterator;
import java.util.List;
import java.util.Properties;

import org.jdom.Attribute;
import org.jdom.Comment;
import org.jdom.Document;
import org.jdom.Element;
import org.jdom.JDOMException;
import org.jdom.input.SAXBuilder;
import org.jdom.output.XMLOutputter;

public class XMLProperties extends Properties {
    
    public void load(Reader reader) 
        throws IOException {
         
        // Read XML document into a Properties object    
    }    

    public void load(InputStream inputStream) 
        throws IOException {
         
        load(new InputStreamReader(inputStream));    
    }
    
    public void load(File xmlDocument) 
        throws IOException {
        
        load(new FileReader(xmlDocument));    
    }  

    public void save(OutputStream out, String header) {
        try {            
            store(out, header);
        } catch (IOException ignored) {
            // Deprecated version doesn't pass errors
        }        
    }   
     
    public void store(Writer writer, String header)
        throws IOException {
            
        // Convert properties to XML and output
    }    
          
    public void store(OutputStream out, String header)
        throws IOException {
            
        store(new OutputStreamWriter(out), header);
    }
 
    public void store(File xmlDocument, String header)
        throws IOException {
            
        store(new FileWriter(xmlDocument), header);
    }    
}</pre></blockquote>
</div>

<p>Take note that I overloaded the <tt class="literal">load( )</tt> and
<tt class="literal">store( )</tt> methods; while the
<tt class="literal">Properties</tt> class only has versions that take an
<tt class="literal">InputStream</tt> and <tt class="literal">OutputStream</tt>
(respectively), I'm a firm believer in providing users options.
The extra versions, which take <tt class="literal">File</tt>s and
<tt class="literal">Reader</tt>s/<tt class="literal">Writer</tt>s, make it easier
for users to interact, and add a marginal amount of code to the
class. Additionally, these overloaded methods can all delegate to
existing methods, which leaves the code ready for loading and storing
implementation.<a name="INDEX-721" /> <a name="INDEX-722" /> 
</p>

<a name="javaxml2-CHP-7-SECT-3.1" /><div class="sect2">
<h3 class="sect2">7.3.1. Storing XML</h3>

<p><a name="INDEX-723" />I'll deal with storing XML
first, mainly because the code is already written. The logic to take
a <tt class="literal">Properties</tt> object and output it as XML is the
purpose of the <tt class="literal">PropsToXML</tt> class, and I'll
simply reuse some of that code here to make things work nicely:
</p>

<blockquote><pre class="code">    public void store(Writer writer, String header)
        throws IOException {
            
        // Create a new JDOM Document with a root element "properties"
        Element root = new Element("properties");
        Document doc = new Document(root);
        
        // Get the property names<tt class="userinput"><b>
        Enumeration propertyNames = propertyNames( );</b></tt>
        while (propertyNames.hasMoreElements( )) {
            String propertyName = (String)propertyNames.nextElement( );<tt class="userinput"><b>
            String propertyValue = getProperty(propertyName);</b></tt>
            createXMLRepresentation(root, propertyName, propertyValue);
        }        
        
        // Output document to supplied filename
        XMLOutputter outputter = new XMLOutputter("  ", true);<tt class="userinput"><b>
        outputter.output(doc, writer);</b></tt>
    }

    private void createXMLRepresentation(Element root, 
                                         String propertyName,
                                         String propertyValue) {
        
        int split;
        String name = propertyName;
        Element current = root;
        Element test = null;
              
        while ((split = name.indexOf(".")) != -1) {
            String subName = name.substring(0, split);
            name = name.substring(split+1);
            
            // Check for existing element            
            if ((test = current.getChild(subName)) == null) {
                Element subElement = new Element(subName);
                current.addContent(subElement);
                current = subElement;
            } else {
                current = test;
            }
        }
        
        // When out of loop, what's left is the final element's name        
        Element last = new Element(name);                        
        last.setText(propertyValue);
        /** Uncomment this for Attribute usage */
        /*
        last.setAttribute("value", propertyValue);
        */
        current.addContent(last);
    }</pre></blockquote>

<p>Not much needs comment. There are a few lines of code highlighted to
illustrate some changes, though. The first two changes ensure that
the superclass is used to obtain the property names and values,
rather than the <tt class="literal">Properties</tt> object that was passed
into the version of this method in <tt class="literal">PropsToXML</tt>. The
third change moves from using a string filename to the supplied
<tt class="literal">Writer</tt> for output. With those few modifications,
you're all set to compile the <tt class="literal">XMLProperties</tt>
source file.
</p>

<p>There is one item missing, though. Note that the <tt class="literal">store(
)</tt><a name="INDEX-724" />
<a name="INDEX-725" /> method allows specification of a header
variable; in a standard Java properties file, this is added as a
comment to the head of the file. To keep things parallel, the
<tt class="literal">XMLProperties</tt> class can be modified to do the same
thing. You will need to use the
<tt class="literal">Comment</tt><a name="INDEX-726" />
<a name="INDEX-727" />
class to do this. The following code additions put this change into
effect:
</p>

<blockquote><pre class="code">    public void store(Writer writer, String header)
        throws IOException {
            
        // Create a new JDOM Document with a root element "properties"
        Element root = new Element("properties");
        Document doc = new Document(root);
        <tt class="userinput"><b>
        // Add in header information
        Comment comment = new Comment(header);
        doc.addContent(comment);</b></tt>
        
        // Get the property names
        Enumeration propertyNames = propertyNames( );
        while (propertyNames.hasMoreElements( )) {
            String propertyName = (String)propertyNames.nextElement( );
            String propertyValue = getProperty(propertyName);
            createXMLRepresentation(root, propertyName, propertyValue);
        }        
        
        // Output document to supplied filename
        XMLOutputter outputter = new XMLOutputter("  ", true);
        outputter.output(doc, writer);
    }</pre></blockquote>

<p>The <tt class="literal">addContent( )</tt><a name="INDEX-728" />
<a name="INDEX-729" /> method of the <tt class="literal">Document</tt>
object is overloaded to take both <tt class="literal">Comment</tt> and
<tt class="literal">ProcessingInstruction</tt> objects, and appends the
content to the file. It's used here to add in the
<tt class="literal">header</tt> parameter as a comment to the XML document
being written to.
</p>

</div>
<a name="javaxml2-CHP-7-SECT-3.2" /><div class="sect2">
<h3 class="sect2">7.3.2. Loading XML</h3>

<p>There's not much left to do here; basically, the class writes
out to XML, provides access to XML (through the methods already
existing on the <tt class="literal">Properties</tt> class), and now simply
needs to read in XML. This is a fairly simple task; it boils down to
more recursion. I'll show you the code modifications needed,
and then walk you through them. Enter the code shown here into your
<em class="emphasis">XMLProperties.java</em> source file:
</p>

<blockquote><pre class="code">    public void load(Reader reader) 
        throws IOException {
        
        try { 
            // Load XML into JDOM Document
            SAXBuilder builder = new SAXBuilder( );
            Document doc = builder.build(reader);
            
            // Turn into properties objects
            loadFromElements(doc.getRootElement().getChildren( ), 
                new StringBuffer(""));
            
        } catch (JDOMException e) {
            throw new IOException(e.getMessage( ));
        }        
    }

    private void loadFromElements(List elements, StringBuffer baseName) {
        // Iterate through each element
        for (Iterator i = elements.iterator(); i.hasNext( ); ) {
            Element current = (Element)i.next( );
            String name = current.getName( );
            String text = current.getTextTrim( );
            
            // Don't add "." if no baseName
            if (baseName.length( ) &gt; 0) {
                baseName.append(".");
            }            
            baseName.append(name);
            
            // See if we have an element value
            if ((text == null) || (text.equals(""))) {
                // If no text, recurse on children
                loadFromElements(current.getChildren( ),
                                 baseName);
            } else {                
                // If text, this is a property
                setProperty(baseName.toString( ), 
                            text);
            }            
            
            // On unwind from recursion, remove last name
            if (baseName.length() == name.length( )) {
                baseName.setLength(0);
            } else {                
                baseName.setLength(baseName.length( ) - 
                    (name.length( ) + 1));
            }            
        }        
    }</pre></blockquote>

<p>The implementation of the <tt class="literal">load(
)</tt><a name="INDEX-730" />
<a name="INDEX-731" /> method (which all overloaded versions
delegate to) uses <tt class="literal">SAXBuilder</tt> to read in the
supplied XML document. I discussed this earlier in the chapter, and
I'll look at it in even more detail in the next; for now,
it's enough to realize that it simply reads XML into a JDOM
<tt class="literal">Document</tt> object.
</p>

<p>The name for a property consists of the names of all the elements
leading to the property value, with a period separating each name.
Here's a sample property in XML:
</p>

<blockquote><pre class="code">&lt;properties&gt;
  &lt;org&gt;
    &lt;enhydra&gt;
      &lt;classpath&gt;"."&lt;/classpath&gt;
    &lt;/enhydra&gt;
  &lt;/org&gt;
&lt;/properties&gt;</pre></blockquote>

<p>The property name can be obtained by taking the element names leading
to the value (excluding the <tt class="literal">properties</tt> element,
which was used as a root-level container): <tt class="literal">org</tt>,
<tt class="literal">enhydra</tt>, and <tt class="literal">classpath</tt>. Throw a
period between each, and you get
<tt class="literal">org.enhydra.classpath</tt>, which is the property name
in question. To accomplish this, I coded up the
<tt class="literal">loadFromElements(
)</tt><a name="INDEX-732" />
<a name="INDEX-733" /> method. This takes in a list of elements,
iterates through them, and deals with each element individually. If
the element has a textual value, that value is added to the
superclass object's properties. If it has child elements
instead, then the children are obtained, and recursion begins again
on the new list of children. At each step of recursion, the name of
the element being dealt with is appended to the
<tt class="literal">baseName</tt><a name="INDEX-734" /> variable, which keeps track of the
property names. Winding through recursion,
<tt class="literal">baseName</tt> would be <tt class="literal">org</tt>, then
<tt class="literal">org.enhydra</tt>, then
<tt class="literal">org.enhydra.classpath</tt>. And, as recursion unwinds,
the <tt class="literal">baseName</tt> variable is shortened to remove the
last element name. Let's look at the JDOM method calls that
make it possible.
</p>

<p>First, you'll notice several invocations of the
<tt class="literal">getChildren( )</tt><a name="INDEX-735" />
<a name="INDEX-736" /> method on instances of the
<tt class="literal">Element</tt> class. This method returns all child
elements of the current element as a Java <tt class="literal">List</tt>.
There are versions of this method that also take in the name of an
element to search for, and return either all elements with that name
(<tt class="literal">getChildren(String name)</tt>), or just the first
child element with that name (<tt class="literal">getChild(String
name)</tt>). There are also namespace-aware versions of the
method, which will be covered in the next chapter. To start the
recursion process, the root element is obtained from the JDOM
<tt class="literal">Document</tt> object through the
<tt class="literal">getRootElement(
)</tt><a name="INDEX-737" />
<a name="INDEX-738" /> method, and then its children are used to
seed recursion. Once in the <tt class="literal">loadFromElements(
)</tt><a name="INDEX-739" />
<a name="INDEX-740" /> method, standard Java classes are used to
move through the list of elements (such as
<tt class="literal">java.util.Iterator</tt>). To check for textual content,
the <tt class="literal">getTextTrim( )</tt><a name="INDEX-741" />
<a name="INDEX-742" /> method is used. This method returns the
textual content of an element, and returns the element without
surrounding whitespace.<a href="#FOOTNOTE-11">[11]</a> Thus, the content " textual
content " (note the surrounding whitespace) would be returned
as "textual content". While this seems somewhat trivial,
consider this more realistic example of XML:
</p><blockquote class="footnote"> <a name="FOOTNOTE-11" /><p>[11]It also removes more than one
space <em class="emphasis">between</em> words. The textual content
"lots of spaces" would be returned through
<tt class="literal">getTextTrim( )</tt> as "lots of
spaces".</p> </blockquote>

<blockquote><pre class="code">&lt;chapter&gt;
  &lt;title&gt;
    Advanced SAX
  &lt;/title&gt;
&lt;/chapter&gt;</pre></blockquote>

<p>The actual textual content of the title element turns out to be
several spaces, followed by a line feed, followed by more space, the
characters "Advanced SAX", more space, another line feed,
and even more space. In other words, probably not what you expected.
The returned string data from a call to <tt class="literal">getTextTrim(
)</tt> would simply be "Advanced SAX", which is what
you want in most cases anyway. However, if you do want the complete
content (often used for reproducing the input document exactly as it
came in), you can use the <tt class="literal">getText(
)</tt><a name="INDEX-743" />
<a name="INDEX-744" /> method, which returns the element's
content unchanged. If there is no content, the return value from this
method is an empty string (""), which makes for an easy
comparison, as shown in the example code. And that's about it:
a few simple method calls and the code is reading XML with JDOM.
Let's see this class in action.
</p>

</div>
<a name="javaxml2-CHP-7-SECT-3.3" /><div class="sect2">
<h3 class="sect2">7.3.3. Taking a Test Drive</h3>

<p>Once you've got everything in place in the
<tt class="literal">XMLProperties</tt> class, compile it. To test it out,
you can enter in or download <a href="ch07_03.htm">Example 7-7</a>, which is a
class that uses the <tt class="literal">XMLProperties</tt> class to load an
XML document, print some information out
<a name="INDEX-745" />
<a name="INDEX-746" />about
it, and then write the properties back out as XML.
</p>

<a name="javaxml2-CHP-7-EX-7" /><div class="example">
<h4 class="objtitle">Example 7-7. Testing the XMLProperties class </h4>
<blockquote><pre class="code">package javaxml2;

import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.util.Enumeration;

public class TestXMLProperties {

    public static void main(String[] args) {
        if (args.length != 2) {
            System.out.println("Usage: java javaxml2.TestXMLProperties " +
                "[XML input document] [XML output document]");
            System.exit(0);
        }
    
        try {
            // Create and load properties
            System.out.println("Reading XML properties from " + args[0]);
            XMLProperties props = new XMLProperties( );
            props.load(new FileInputStream(args[0]));
            
            // Print out properties and values
            System.out.println("\n\n---- Property Values ----");
            Enumeration names = props.propertyNames( );
            while (names.hasMoreElements( )) {
                String name = (String)names.nextElement( );
                String value = props.getProperty(name);
                System.out.println("Property Name: " + name + 
                                   " has value " + value);
            }            
            
            // Store properties
            System.out.println("\n\nWriting XML properies to " + args[1]);
            props.store(new FileOutputStream(args[1]),
                "Testing XMLProperties class");
        } catch (Exception e) {
            e.printStackTrace( );
        }
    }
}</pre></blockquote>
</div>

<p>This doesn't do much; it reads in properties, uses them to
print out all the property names and values, and then writes those
properties back out -- but all in XML. You can run this program on
the XML file generated by the <tt class="literal">PropsToXML</tt> class I
showed you earlier in the chapter.
</p>
<blockquote><b>WARNING:</b> 

The version of <tt class="literal">XMLProperties</tt><a name="INDEX-747" />
<a name="INDEX-748" /> used here deals with property values as textual content of elements (the first version of <tt class="literal">PropsToXML</tt> shown), not as attribute values (the second version of <tt class="literal">PropsToXML</tt>). You'll need to use that earlier version of <tt class="literal">PropsToXML</tt>, or back out your changes, if you are going to use it to generate XML for input to the <tt class="literal">TestXMLProperties</tt> class. Otherwise, you won't pick up any property values with this code.</p></blockquote>
<p>Supply the test program with the XML input file and the name of the
output file:
</p>
<blockquote><pre class="code">C:\javaxml2\build&gt;java javaxml2.TestXMLProperties enhydraProps.xml output.xml
Reading XML properties from enhydraProps.xml


---- Property Values ----
Property Name: org.enhydra.classpath.separator has value ":"
Property Name: org.enhydra.initialargs has value "./bootstrap.conf"
Property Name: org.enhydra.initialclass has value 
  org.enhydra.multiServer.bootstrap.Bootstrap
Property Name: org.enhydra.classpath has value "."
Property Name: org.xml.sax.parser has value 
  "org.apache.xerces.parsers.SAXParser"


Writing XML properties to output.xml</pre></blockquote>

<p>And there you have it: XML data formatting, properties behavior.</p>

</div>
<a name="javaxml2-CHP-7-SECT-3.4" /><div class="sect2">
<h3 class="sect2">7.3.4. Backtracking</h3>

<p>Before wrapping up on the code, there are a few items I want to
address. First, take a look at the XML file generated by
<tt class="literal">TestXMLProperties</tt><a name="INDEX-749" />
<a name="INDEX-750" />,
the result of invoking <tt class="literal">store(
)</tt><a name="INDEX-751" />
<a name="INDEX-752" /> on the properties. It should look similar
to <a href="ch07_03.htm">Example 7-8</a> if you used the XML version of
<em class="emphasis">enhydra.properties</em> detailed
earlier in this chapter.
</p>

<a name="javaxml2-CHP-7-EX-8" /><div class="example">
<h4 class="objtitle">Example 7-8. Output from TestXMLProperties </h4>
<blockquote><pre class="code">&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;properties&gt;
  &lt;org&gt;
    &lt;enhydra&gt;
      &lt;classpath&gt;
        &lt;separator&gt;":"&lt;/separator&gt;
      &lt;/classpath&gt;
      &lt;initialargs&gt;"./bootstrap.conf"&lt;/initialargs&gt;
      &lt;initialclass&gt;org.enhydra.multiServer.bootstrap.Bootstrap&lt;/initialclass&gt;
      &lt;classpath&gt;"."&lt;/classpath&gt;
    &lt;/enhydra&gt;
    &lt;xml&gt;
      &lt;sax&gt;
        &lt;parser&gt;"org.apache.xerces.parsers.SAXParser"&lt;/parser&gt;
      &lt;/sax&gt;
    &lt;/xml&gt;
  &lt;/org&gt;
&lt;/properties&gt;
&lt;!--Testing XMLProperties class--&gt;</pre></blockquote>
</div>

<p>Notice anything wrong? The header comment is in the wrong place. Take
another look at the code that added in that comment, from the
<tt class="literal">store( )</tt> method:
</p>

<blockquote><pre class="code">        // Create a new JDOM Document with a root element "properties"
        Element root = new Element("properties");
        Document doc = new Document(root);
        
        // Add in header information
        Comment comment = new Comment(header);
        doc.addContent(comment);</pre></blockquote>

<p>The root element appears before the comment because it is added to
the <tt class="literal">Document</tt> object first. However, the
<tt class="literal">Document</tt> object can't be created without
supplying a root element -- a bit of a chicken-or-egg situation.
To work with this, you need to use a new method, <tt class="literal">getContent(
)</tt><a name="INDEX-753" />
<a name="INDEX-754" />. This method returns a
<tt class="literal">List</tt>, but that <tt class="literal">List</tt> contains
all the content of the <tt class="literal">Document</tt>, including
comments, the root element, and processing instructions. Then, you
can prepend the comment to this list, as shown here, using methods of
the <tt class="literal">List</tt> class:
</p>

<blockquote><pre class="code">        // Add in header information
        Comment comment = new Comment(header);<tt class="userinput"><b>
        doc.getContent( ).add(0, comment);</b></tt></pre></blockquote>
<p>With this change in place, your output will look as it should:</p>
<blockquote><pre class="code">
&lt;?xml version="1.0" encoding="UTF-8"?&gt;<tt class="userinput"><b>
&lt;!--Testing XMLProperties class--&gt;</b></tt>
&lt;properties&gt;
  &lt;org&gt;
    &lt;enhydra&gt;
      &lt;classpath&gt;
        &lt;separator&gt;":"&lt;/separator&gt;
      &lt;/classpath&gt;
      &lt;initialargs&gt;"./bootstrap.conf"&lt;/initialargs&gt;
      &lt;initialclass&gt;org.enhydra.multiServer.bootstrap.Bootstrap&lt;/initialclass&gt;
      &lt;classpath&gt;"."&lt;/classpath&gt;
    &lt;/enhydra&gt;
    &lt;xml&gt;
      &lt;sax&gt;
        &lt;parser&gt;"org.apache.xerces.parsers.SAXParser"&lt;/parser&gt;
      &lt;/sax&gt;
    &lt;/xml&gt;
  &lt;/org&gt;
&lt;/properties&gt;</pre></blockquote>

<p>The <tt class="literal">getContent( )</tt><a name="INDEX-755" />
<a name="INDEX-756" /> method is also available on the
<tt class="literal">Element</tt> class, and returns all content of the
element, regardless of type (elements, processing instructions,
comments, entities, and <tt class="literal">String</tt>s for textual
content).
</p>

<p>Also important are the modifications necessary for
<tt class="literal">XMLProperties</tt> to use attributes for property
values, instead of element content. You've already seen the
code change needed in storage of properties (in fact, the change is
commented out in the source code, so you don't need to write
anything new). As for loading, the change involves checking for an
attribute instead of an element's textual content. This can be
done with the <tt class="literal">getAttributeValue(String
name)</tt><a name="INDEX-757" />
<a name="INDEX-758" /> method, which returns the value of the
named attribute, or <tt class="literal">null</tt> if no value exists. The
change is shown here:
</p>

<blockquote><pre class="code">    private void loadFromElements(List elements, StringBuffer baseName) {
        // Iterate through each element
        for (Iterator i = elements.iterator(); i.hasNext( ); ) {
            Element current = (Element)i.next( );
            String name = current.getName( );<tt class="userinput"><b>
            // String text = current.getTextTrim( );
            String text = current.getAttributeValue("value");            </b></tt>
            
            // Don't add "." if no baseName
            if (baseName.length( ) &gt; 0) {
                baseName.append(".");
            }            
            baseName.append(name);
            <tt class="userinput"><b>
            // See if we have an attribute value</b></tt>
            if ((text == null) || (text.equals(""))) {
                // If no text, recurse on children
                loadFromElements(current.getChildren( ),
                                 baseName);
            } else {                
                // If text, this is a property
                setProperty(baseName.toString( ), 
                            text);
            }            
            
            // On unwind from recursion, remove last name
            if (baseName.length() == name.length( )) {
                baseName.setLength(0);
            } else {                
                baseName.setLength(baseName.length( ) - 
                    (name.length( ) + 1));
            }            
        }        
    }    </pre></blockquote>

<p>Compile in the changes, and you're set to deal with attribute
values instead of element content. Leave the code in the state you
prefer it (as I mentioned earlier, I actually like the values as
element content), so if you want textual element content, be sure to
back out these changes after seeing how they affect output. Whichever
you prefer, hopefully you are starting to know your way around JDOM.
And just like SAX and DOM, I highly recommend bookmarking the Javadoc
(either locally or online) as a quick reference for those methods you
just can't quite remember. In any case, before wrapping up,
let's talk a little about a common issue with regard to JDOM:
standardization.<a name="INDEX-759" /> <a name="INDEX-760" /> <a name="INDEX-761" /> 
</p>

</div>


<hr width="684" align="left" />
<div class="navbar"><table width="684" border="0"><tr><td align="left" valign="top" width="228"><a href="ch07_02.htm"><img alt="Previous" border="0" src="../gifs/txtpreva.gif" /></a></td><td align="center" valign="top" width="228"><a href="index.htm"><img alt="Home" border="0" src="../gifs/txthome.gif" /></a></td><td align="right" valign="top" width="228"><a href="ch07_04.htm"><img alt="Next" border="0" src="../gifs/txtnexta.gif" /></a></td></tr><tr><td align="left" valign="top" width="228">7.2. PropsToXML</td><td align="center" valign="top" width="228"><a href="index/index.htm"><img alt="Book Index" border="0" src="../gifs/index.gif" /></a></td><td align="right" valign="top" width="228">7.4. Is JDOM a Standard?</td></tr></table></div>
<hr width="684" align="left" />

<img alt="Library Navigation Links" border="0" src="../gifs/navbar.gif" usemap="#library-map" />
<p><p><font size="-1"><a href="copyrght.htm">Copyright &copy; 2002</a> O'Reilly &amp; Associates. All rights reserved.</font></p>

<map name="library-map">
<area shape="rect" coords="0,0,85,93" href="../index.htm"><area shape="rect" coords="85,0,180,98" href="../sax2/index.htm"><area shape="rect" coords="182,-1,261,100" href="../xmlnut/index.htm"><area shape="rect" coords="263,1,384,96" href="index.htm"><area shape="rect" coords="386,1,463,100" href="../jxslt/index.htm"><area shape="rect" coords="466,1,533,112" href="../xslt/index.htm"><area shape="rect" coords="535,-1,610,108" href="../schema/index.htm"><area shape="rect" coords="613,1,696,121" href="../pxml/index.htm">
</map>

</body></html>