<html><head><title>JAXP 1.0 (Java &amp; XML, 2nd Edition)</title><link rel="stylesheet" type="text/css" href="../style/style1.css" />

<meta name="DC.Creator" content="Brett McLaughlin" /><meta name="DC.Format" content="text/xml" scheme="MIME" /><meta name="DC.Language" content="en-US" /><meta name="DC.Publisher" content="O'Reilly &amp; Associates, Inc." /><meta name="DC.Source" scheme="ISBN" content="059600197L" /><meta name="DC.Subject.Keyword" content="stuff" /><meta name="DC.Title" content="Java &amp; XML, 2nd Edition" /><meta name="DC.Type" content="Text.Monograph" />

</head><body bgcolor="#ffffff">

<img alt="Book Home" border="0" src="gifs/smbanner.gif" usemap="#banner-map" /><map name="banner-map"><area shape="rect" coords="1,-2,616,66" href="index.htm" alt="Java and XML, 2nd Edition" /><area shape="rect" coords="629,-11,726,25" href="jobjects/fsearch.htm" alt="Search this book" /></map>

<div class="navbar"><table width="684" border="0"><tr><td align="left" valign="top" width="228"><a href="ch09_01.htm"><img alt="Previous" border="0" src="../gifs/txtpreva.gif" /></a></td><td align="center" valign="top" width="228"></td><td align="right" valign="top" width="228"><a href="ch09_03.htm"><img alt="Next" border="0" src="../gifs/txtnexta.gif" /></a></td></tr></table></div>



<h2 class="sect1">9.2. JAXP 1.0</h2>

<p><a name="INDEX-867" />It all begins (and began) with JAXP 1.0.
This first version of Sun's API provided, basically, a thin
layer over existing APIs that allowed for
<a name="INDEX-868" />vendor-neutral parsing of code. For SAX,
this isn't a huge deal; now that you are a SAX expert, you are
smart enough to use the <tt class="literal">XMLReaderFactory</tt> class
instead of directly instantiating a vendor's parser class. Of
course, as you're also a DOM expert, you know that it's a
pain to deal with DOM in a vendor-neutral way, so JAXP helps out
quite a bit in this regard. Additionally, JAXP provided some methods
for working with validation and namespaces, another vendor-specific
task that can now be handled (in most cases) in a much better way.
</p>

<a name="javaxml2-CHP-9-SECT-2.1" /><div class="sect2">
<h3 class="sect2">9.2.1. Starting with SAX</h3>

<p>Before getting into how JAXP works with SAX, I will fill you in on
some SAX 1.0 details. Remember the
<tt class="literal">org.xml.sax.helpers.DefaultHandler</tt> class I showed
you in <a href="ch04_01.htm">Chapter 4, "Advanced SAX "</a> that implemented all the core SAX
2.0 handlers? There was a similar class in SAX 1.0 called
<tt class="literal">org.xml.sax.HandlerBase</tt><a name="INDEX-869" /> <a name="INDEX-870" />
<a name="INDEX-871" />
<a name="INDEX-872" />; this
class implemented the SAX 1.0 handlers (which were slightly different
in that version). As long as you understand this, you'll be all
set to deal with JAXP 1.0.
</p>

<p>To use JAXP with a SAX-compliant parser, your only task is to extend
the <tt class="literal">HandlerBase</tt><a name="INDEX-873" />
<a name="INDEX-874" />
class and implement the callbacks desired for your application.
That's it, no different than doing the same for
<tt class="literal">DefaultHandler</tt> in SAX 2.0. An instance of your
extension class then becomes the core argument for most of the JAXP
methods that deal with SAX.
</p>

<p>Here's the typical SAX rundown: </p>

<ul><li>
<p>Create a <tt class="literal">SAXParser</tt> instance using a specific
vendor's parser implementation.
</p>
</li><li>
<p>Register callback implementations (by using a class that extends
<tt class="literal">HandlerBase</tt>).
</p>
</li><li>
<p>Start parsing and relax as your callback implementations are fired
off.
</p>
</li></ul>
<p>The SAX component of JAXP provides a simple means to do all of this.
Without JAXP, a SAX parser instance either must be instantiated
directly from a vendor class (such as
<tt class="literal">org.apache.xerces.parsers.SAXParser</tt>), or it must
use a SAX helper class called
<tt class="literal">ParserFactory</tt><a name="INDEX-875" /> <a name="INDEX-876" />
<a name="INDEX-877" />
(the SAX 1.0 version of SAX 2.0's
<tt class="literal">XMLReaderFactory</tt>).
</p>

<p>JAXP provides a better alternative. It allows you to use the vendor
class as a parser through a Java system property. Of course, when you
download a distribution from Sun, you get a JAXP implementation that
uses Sun's parser by default. The same JAXP interfaces, but
with an implementation built on Apache Xerces, can be downloaded from
the Apache XML web site at <a name="INDEX-878" />
<a name="INDEX-879" /><a href="../../../../../../xml.apache.org/">http://xml.apache.org</a>, and they use Apache
Xerces by default. Therefore (in either case), changing the parser
you are using requires that you change a classpath setting or system
property value, but it does <em class="emphasis">not</em> require code
recompilation. And this is the magic, the abstraction, that JAXP is
all about.
</p>
<blockquote><b>WARNING:</b> 

Where you download the <a name="INDEX-880" />JAXP classes from is important. Even though you can still set system properties to change the parser class, the default parser (when no system properties are present) depends on the implementation -- which depends on the location that JAXP comes from. The version from Apache XML uses Xerces by default, while Sun's version uses Crimson by default. If you get these mixed up, you may end up with the wrong parser in your classpath, and get <tt class="literal">ClassNotFound</tt> exceptions.
</p>
</blockquote>
<a name="javaxml2-CHP-9-SECT-2.1.1" /><div class="sect3">
<h3 class="sect3">9.2.1.1. A look at the SAXParserFactory class</h3>

<p>The <a name="INDEX-881" /> <a name="INDEX-882" /> <a name="INDEX-883" />JAXP
<tt class="literal">SAXParserFactory</tt> class (in the
<tt class="literal">javax.xml.parsers</tt> class, like all the JAXP
classes) is the key to changing parser implementations easily. You
must create a new instance of this class (which I will describe how
to do in a moment). After the factory is created, it provides a
method to obtain a SAX-capable parser. Behind the scenes, the JAXP
implementation takes care of the vendor-dependent code, keeping your
code unpolluted. This factory provides some other nice features, as
well.
</p>

<p>In addition to the basic job of creating instances of SAX parsers,
the factory allows configuration options to be set. These options
affect all parser instances obtained through the factory. The two
options available in JAXP 1.0 are setting namespace awareness
(<tt class="literal">setNamespaceAware (boolean awareness)</tt>), and
turning on validation (<tt class="literal">setValidating (boolean
validating)</tt>). Remember that after these options are set,
they affect <em class="emphasis">all</em> instances obtained from the
factory after the method invocation.
</p>

<p>Once you have set up the factory, invoking the <tt class="literal">newSAXParser(
)</tt><a name="INDEX-884" />
<a name="INDEX-885" /> method returns a ready-to-use instance of
the JAXP <tt class="literal">SAXParser</tt> class. This class wraps an
underlying SAX parser (an instance of the SAX class
<tt class="literal">org.xml.sax.Parser</tt>). It also protects you from
using any vendor-specific additions to the parser class. (Remember
our earlier discussion about the <tt class="literal">xmlDocument</tt>
class?) This class allows actual parsing behavior to be kicked off.
<a href="ch09_02.htm">Example 9-1</a> shows how a SAX factory can be created,
configured, and used.
</p>

<a name="javaxml2-CHP-9-EX-1" /><div class="example">
<h4 class="objtitle">Example 9-1. Using the SAXParserFactory class </h4>
<blockquote><pre class="code">package javaxml2;

import java.io.File;
import java.io.IOException;
import java.io.OutputStreamWriter;
import java.io.Writer;

// JAXP
import javax.xml.parsers.FactoryConfigurationError;
import javax.xml.parsers.ParserConfigurationException;
import javax.xml.parsers.SAXParserFactory;
import javax.xml.parsers.SAXParser;

// SAX
import org.xml.sax.AttributeList;
import org.xml.sax.HandlerBase;
import org.xml.sax.SAXException;

public class TestSAXParsing {

    public static void main(String[] args) {
        try {
            if (args.length != 1) {
                System.err.println(
                    "Usage: java TestSAXParsing [XML Document filename]");
                System.exit(1);
            }

            // Get SAX Parser Factory
            SAXParserFactory factory = SAXParserFactory.newInstance( );

            // Turn on validation, and turn off namespaces
            factory.setValidating(true);
            factory.setNamespaceAware(false);

            SAXParser parser = factory.newSAXParser( );
            parser.parse(new File(args[0]), new MyHandler( ));

        } catch (ParserConfigurationException e) {
            System.out.println("The underlying parser does not " +
                               "support the requested features.");
        } catch (FactoryConfigurationError e) {
            System.out.println(
                "Error occurred obtaining SAX Parser Factory.");
        } catch (Exception e) {
            e.printStackTrace( );
        }
    }
}

class MyHandler extends HandlerBase {
    // SAX callback implementations from DocumentHandler, ErrorHandler, 
    //   DTDHandler, and EntityResolver
}</pre></blockquote>
</div>

<p>Notice in this code that two JAXP-specific problems can occur in
using the factory: the inability to obtain or configure a SAX
factory, and the inability to configure a SAX parser. The first of
these problems, which is represented by a
<tt class="literal">FactoryConfigurationError</tt>, usually occurs when the
parser specified in a JAXP implementation or system property cannot
be loaded. The second problem,
<tt class="literal">ParserConfigurationException</tt>, occurs when a
requested feature is not available in the parser being used. Both are
easy to deal with and shouldn't pose as any difficulty.
</p>

<p>A <tt class="literal">SAXParser</tt> is obtained once you get the factory,
turn off namespaces, and turn on validation; then parsing begins.
Notice that the <tt class="literal">parse( )</tt> method of the SAX parser
takes an instance of the SAX <tt class="literal">HandlerBase</tt> class
that I mentioned earlier (I left the implementation of this class out
of the code listing, but you can download the complete source file
for <em class="emphasis">TestSAXParsing.java</em> at the
book's web site). You also pass in the
file (as a Java
<tt class="literal">File</tt>) to parse, obviously. However, the
<tt class="literal">SAXParser</tt> class contains much more than just this
single method.<a name="INDEX-886" /> <a name="INDEX-887" /> <a name="INDEX-888" /> 
</p>

</div>

<a name="javaxml2-CHP-9-SECT-2.1.2" /><div class="sect3">
<h3 class="sect3">9.2.1.2. Working with the SAXParser class</h3>

<p>Once you have an instance of the
<tt class="literal">SAXParser</tt><a name="INDEX-889" />
<a name="INDEX-890" />
<a name="INDEX-891" />
class, you can do more with it than just passing it a
<tt class="literal">File</tt> to parse. Because of the way components in
large applications communicate these days, it is not always safe to
assume that the creator of an object instance is its user. In other
words, one component may create the <tt class="literal">SAXParser</tt>
instance, while another component (perhaps coded by another
developer) may need to use that same instance. For this reason,
methods are provided to determine the settings of a parser instance.
The two methods that provide this functionality are
<tt class="literal">isValidating( )</tt><a name="INDEX-892" />
<a name="INDEX-893" />, which informs the caller if the parser
will perform validation, and <tt class="literal">isNamespaceAware(
)</tt><a name="INDEX-894" />
<a name="INDEX-895" />, which returns an indication if the parser
can process namespaces in an XML document. While these methods can
give you information about what the parser can do, you do not have
the means to change these features. You must do this at the parser
factory level.
</p>

<p>Additionally, there is a variety of ways to request parsing of a
document. Instead of just accepting a <tt class="literal">File</tt> and a
SAX <tt class="literal">HandlerBase</tt> instance, the
<tt class="literal">SAXParser</tt>'s <tt class="literal">parse( )</tt>
method can also accept a SAX <tt class="literal">InputSource</tt>, a Java
<tt class="literal">InputStream</tt>, or a URL in <tt class="literal">String</tt>
form, all with a <tt class="literal">HandlerBase</tt> instance as the
second argument. Different types of input documents can be treated to
different means of parsing.
</p>

<p>Finally, the underlying SAX parser (an instance of
<tt class="literal">org.xml.sax.Parser</tt>) can be obtained and used
directly through the <tt class="literal">SAXParser</tt>'s
<tt class="literal">getParser( )</tt> method. Once this underlying instance
is obtained, the usual SAX methods are available. <a href="ch09_02.htm">Example 9-2</a> shows examples of the various uses of the
<tt class="literal">SAXParser</tt> class, the core class in JAXP for SAX
parsing.
</p>

<a name="javaxml2-CHP-9-EX-2" /><div class="example">
<h4 class="objtitle">Example 9-2. Using the JAXP SAXParser class </h4>
<blockquote><pre class="code">    // Get a SAX Parser instance
    SAXParser saxParser = saxFactory.newSAXParser( );

    // Find out if validation is supported
    boolean isValidating = saxParser.isValidating( );

    // Find out if namespaces is supported
    boolean isNamespaceAware = saxParser.isNamespaceAware( );

    // ------- Parse, in a variety of ways ----------------- //

    // Use a file and a SAX HandlerBase instance
    saxParser.parse(new File(args[0]), myHandlerBaseInstance);

    // Use a SAX InputSource and a SAX HandlerBase instance
    saxParser.parse(mySaxInputSource, myHandlerBaseInstance);

    // Use an InputStream and a SAX HandlerBase instance
    saxParser.parse(myInputStream, myHandlerBaseInstance);

    // Use a URI and a SAX HandlerBase instance
    saxParser.parse("http://www.newInstance.com/xml/doc.xml", 
                    myHandlerBaseInstance);

    // Get the underlying (wrapped) SAX parser
    org.xml.sax.Parser parser = saxParser.getParser( );    

    // Use the underlying parser
    parser.setContentHandler(myContentHandlerInstance);
    parser.setErrorHandler(myErrorHandlerInstance);
    parser.parse(new org.xml.sax.InputSource(args[0]));</pre></blockquote>
</div>

<p>Up to now, I've talked a lot about SAX, but I haven't
unveiled anything remarkable or even that surprising. The fact is,
the functionality of JAXP is fairly minor, particularly when SAX is
involved. This is fine with me (and should be with you), because
minimal functionality means your code is more portable and can be
used by other developers, either freely (through open source) or
commercially, with any SAX-compliant XML parser. That's it.
There's nothing more to using SAX with JAXP. If you already
know SAX, you're 98 percent of the way there. You just need to
learn two new classes and a couple of Java exceptions, and
you're ready to roll. If you've never used SAX,
it's easy enough to start now.<a name="INDEX-896" /> <a name="INDEX-897" /> <a name="INDEX-898" /> 
</p>

</div>
</div>
<a name="javaxml2-CHP-9-SECT-2.2" /><div class="sect2">
<h3 class="sect2">9.2.2. Dealing with DOM</h3>

<p><a name="INDEX-899" /> <a name="INDEX-900" />The process of using JAXP with
DOM is nearly identical to using JAXP with SAX; all you do is change
two class names and a method's return type, and you are pretty
much there. If you understand how SAX works and understand what DOM
is, you won't have any problem. Of course, you've got <a href="ch05_01.htm">Chapter 5, "DOM"</a> and <a href="ch06_01.htm">Chapter 6, "Advanced DOM"</a> to refer back to, so you're all set.
Since JAXP doesn't have to fire SAX callbacks when working with
DOM, it is responsible only for returning a DOM
<tt class="literal">Document</tt> object from a parsing.
</p>

<a name="javaxml2-CHP-9-SECT-2.2.1" /><div class="sect3">
<h3 class="sect3">9.2.2.1. A look at the DOM parser factory</h3>

<p>With a basic understanding of DOM and the differences between DOM and
SAX, there is little else to say. The code in <a href="ch09_02.htm">Example 9-3</a> will look remarkably similar to the SAX code
in <a href="ch09_02.htm">Example 9-1</a>. First, an instance of
<tt class="literal">DocumentBuilderFactory</tt> is obtained (in the same
way that a <tt class="literal">SAXParserFactory</tt> instance was in SAX).
Then the factory is configured to handle validation and namespaces
(in the same way that it was in SAX). Next, a
<tt class="literal">DocumentBuilder</tt>, the DOM analog to
<tt class="literal">SAXParser</tt>, is retrieved from the factory. Parsing
can then occur, and the resulting DOM <tt class="literal">Document</tt>
object is handed off to an instance of the
<tt class="literal">DOMSerializer</tt> class (from <a href="ch05_01.htm">Chapter 5, "DOM"</a>). 
</p>

<a name="javaxml2-CHP-9-EX-3" /><div class="example">
<h4 class="objtitle">Example 9-3. Using the DocumentBuilderFactory class </h4>
<blockquote><pre class="code">package javaxml2;

import java.io.File;
import java.io.IOException;
import java.io.OutputStreamWriter;
import java.io.Writer;

// JAXP
import javax.xml.parsers.FactoryConfigurationError;
import javax.xml.parsers.ParserConfigurationException;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.parsers.DocumentBuilder;

// DOM
import org.w3c.dom.Document;
import org.w3c.dom.DocumentType;
import org.w3c.dom.NamedNodeMap;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;

public class TestDOMParsing {

    public static void main(String[] args) {
        try {
            if (args.length != 1) {
                System.err.println (
                    "Usage: java TestDOMParsing [filename]");
                System.exit(1);
            }

            // Get Document Builder Factory
            DocumentBuilderFactory factory = 
                DocumentBuilderFactory.newInstance( );

            // Turn on validation, and turn off namespaces
            factory.setValidating(true);
            factory.setNamespaceAware(false);

            DocumentBuilder builder = factory.newDocumentBuilder( );
            Document doc = builder.parse(new File(args[0]));

            // Serialize the DOM tree
            DOMSerializer serializer = new DOMSerializer( );
            serializer.serialize(doc, System.out);

        } catch (ParserConfigurationException e) {
            System.out.println("The underlying parser does not " +
                "support the requested features.");
        } catch (FactoryConfigurationError e) {
            System.out.println("Error occurred obtaining Document " +
                "Builder Factory.");
        } catch (Exception e) {
            e.printStackTrace( );
        }
    }
}</pre></blockquote>
</div>

<p>Two problems can arise from this code: a
<tt class="literal">FactoryConfigurationError</tt> and a
<tt class="literal">ParserConfigurationException</tt>. The cause of each is
the same as it was in SAX. Either there's a problem present in
the implementation classes
(<tt class="literal">FactoryCon-figurationError</tt>), or the parser
provided doesn't support the requested features
(<tt class="literal">ParserConfigurationException</tt>). The only
difference between DOM and SAX is that with DOM, you substitute
<tt class="literal">DocumentBuilderFactory</tt> for
<tt class="literal">SAXParserFactory</tt>, and
<tt class="literal">DocumentBuilder</tt> for <tt class="literal">SAXParser</tt>.
</p>

</div>

<a name="javaxml2-CHP-9-SECT-2.2.2" /><div class="sect3">
<h3 class="sect3">9.2.2.2. Working with the DOM parser</h3>

<p>Once you have a DOM factory, you can obtain a
<tt class="literal">DocumentBuilder</tt> instance from it. The methods
available to a <tt class="literal">DocumentBuilder</tt> instance are very
similar to those available to its SAX counterpart. The major
difference is that variations of the <tt class="literal">parse( )</tt>
method do not take an instance of the SAX
<tt class="literal">HandlerBase</tt> class. Instead they return a DOM
<tt class="literal">Document</tt> instance representing the XML document
that was parsed. The only other difference is that two methods are
provided for SAX-like functionality: <tt class="literal">setErrorHandler(
)</tt>, which takes a SAX <tt class="literal">ErrorHandler</tt>
implementation to handle problems that may arise in parsing, and
<tt class="literal">setEntityResolver( )</tt>, which takes a SAX
<tt class="literal">EntityResolver</tt> implementation to handle entity
resolution. <a href="ch09_02.htm">Example 9-4</a> shows examples of these
methods in action.
</p>

<a name="javaxml2-CHP-9-EX-4" /><div class="example">
<h4 class="objtitle">Example 9-4. Using the JAXP DocumentBuilder </h4>
<blockquote><pre class="code">    // Get a DocumentBuilder instance
    DocumentBuilder builder = builderFactory.newDocumentBuilder( );

    // Find out if validation is supported
    boolean isValidating = builder.isValidating( );

    // Find out if namespaces is supported
    boolean isNamespaceAware = builder.isNamespaceAware( );

    // Set a SAX ErrorHandler
    builder.setErrorHandler(myErrorHandlerImpl);

    // Set a SAX EntityResolver
    builder.setEntityResolver(myEntityResolverImpl);

    // ------------ Parse, in a variety of ways ------------------- //

    // Use a file
    Document doc = builder.parse(new File(args[0]));

    // Use a SAX InputSource
    Document doc = builder.parse(mySaxInputSource);

    // Use an InputStream
    Document doc = builder.parse(myInputStream, myHandlerBaseInstance);

    // Use a URI 
    Document doc = builder.parse("http://www.newInstance.com/xml/doc.xml");</pre></blockquote>
</div>

<p>It really is that straightforward to take what you've learned
about SAX and apply it to DOM. So make your bar bets with friends and
coworkers on how using JAXP is a piece of cake; you'll win
every time.
</p>

</div>
</div>
<a name="javaxml2-CHP-9-SECT-2.3" /><div class="sect2">
<h3 class="sect2">9.2.3. Changing the Parser</h3>

<p>The last topic I need to address in dealing with
<a name="INDEX-901" />JAXP is the ability to easily change
out the parser used by the factory classes. Changing the parser used
by JAXP actually means changing the parser factory, because all
<tt class="literal">SAXParser</tt> and <tt class="literal">DocumentBuilder</tt>
instances come from these factories. Since the factories determine
which parser is loaded, it's the factories that must change.
The implementation of <tt class="literal">SAXParserFactory</tt> to be used
can be changed by setting the Java system property
<tt class="literal">javax.xml.parsers.SAXParserFactory</tt>. If this
property isn't defined, then the default implementation
(whatever parser your vendor specified) is returned. The same
principle applies for the <tt class="literal">DocumentBuilderFactory</tt>
implementation you use. In this case, the
<tt class="literal">javax.xml.parsers.DocumentBuilderFactory</tt> system
property is queried. And as simple as that, we have gone through it
all! This is the whole scope of JAXP 1.0: provide hooks into SAX,
provide hooks into DOM, and allow the parser to easily be changed
out.<a name="INDEX-902" />
<a name="INDEX-903" /><a name="INDEX-904" /> 
</p>

</div>


<hr width="684" align="left" />
<div class="navbar"><table width="684" border="0"><tr><td align="left" valign="top" width="228"><a href="ch09_01.htm"><img alt="Previous" border="0" src="../gifs/txtpreva.gif" /></a></td><td align="center" valign="top" width="228"><a href="index.htm"><img alt="Home" border="0" src="../gifs/txthome.gif" /></a></td><td align="right" valign="top" width="228"><a href="ch09_03.htm"><img alt="Next" border="0" src="../gifs/txtnexta.gif" /></a></td></tr><tr><td align="left" valign="top" width="228">9. JAXP</td><td align="center" valign="top" width="228"><a href="index/index.htm"><img alt="Book Index" border="0" src="../gifs/index.gif" /></a></td><td align="right" valign="top" width="228">9.3. JAXP 1.1</td></tr></table></div>
<hr width="684" align="left" />

<img alt="Library Navigation Links" border="0" src="../gifs/navbar.gif" usemap="#library-map" />
<p><p><font size="-1"><a href="copyrght.htm">Copyright &copy; 2002</a> O'Reilly &amp; Associates. All rights reserved.</font></p>

<map name="library-map">
<area shape="rect" coords="0,0,85,93" href="../index.htm"><area shape="rect" coords="85,0,180,98" href="../sax2/index.htm"><area shape="rect" coords="182,-1,261,100" href="../xmlnut/index.htm"><area shape="rect" coords="263,1,384,96" href="index.htm"><area shape="rect" coords="386,1,463,100" href="../jxslt/index.htm"><area shape="rect" coords="466,1,533,112" href="../xslt/index.htm"><area shape="rect" coords="535,-1,610,108" href="../schema/index.htm"><area shape="rect" coords="613,1,696,121" href="../pxml/index.htm">
</map>

</body></html>