<html><head><title>Constraints (Java &amp; XML, 2nd Edition)</title><link rel="stylesheet" type="text/css" href="../style/style1.css" />

<meta name="DC.Creator" content="Brett McLaughlin" /><meta name="DC.Format" content="text/xml" scheme="MIME" /><meta name="DC.Language" content="en-US" /><meta name="DC.Publisher" content="O'Reilly &amp; Associates, Inc." /><meta name="DC.Source" scheme="ISBN" content="059600197L" /><meta name="DC.Subject.Keyword" content="stuff" /><meta name="DC.Title" content="Java &amp; XML, 2nd Edition" /><meta name="DC.Type" content="Text.Monograph" />

</head><body bgcolor="#ffffff">

<img alt="Book Home" border="0" src="gifs/smbanner.gif" usemap="#banner-map" /><map name="banner-map"><area shape="rect" coords="1,-2,616,66" href="index.htm" alt="Java and XML, 2nd Edition" /><area shape="rect" coords="629,-11,726,25" href="jobjects/fsearch.htm" alt="Search this book" /></map>

<div class="navbar"><table width="684" border="0"><tr><td align="left" valign="top" width="228"><a href="ch02_01.htm"><img alt="Previous" border="0" src="../gifs/txtpreva.gif" /></a></td><td align="center" valign="top" width="228"></td><td align="right" valign="top" width="228"><a href="ch02_03.htm"><img alt="Next" border="0" src="../gifs/txtnexta.gif" /></a></td></tr></table></div>



<h2 class="sect1">2.2. Constraints</h2>

<p>Next up to bat is dealing with constraining XML. If there's
nothing you get out of this chapter other than the rationale behind
constraining XML, then I'm a happy author. Because XML is
extensible and can represent data in hundreds and even thousands of
ways, <a name="INDEX-129" />
<a name="INDEX-130" />constraints
on a document provide meaning to those various formats. Without
document constraints, it is impossible (in most cases) to tell what
the data in a document means. In this section, I'm going to
cover the two current standard means of constraining XML: DTDs
(included in the XML 1.0 specification) and XML Schema (recently a
standard put out by the W3C). Choose the one best suited for you.
</p>

<a name="javaxml2-CHP-2-SECT-2.1" /><div class="sect2">
<h3 class="sect2">2.2.1. DTDs</h3>

<p><a name="INDEX-131" />An XML document is
not very usable without an accompanying DTD (or schema). Just as XML
can effectively describe data, the DTD makes this data usable for
many different programs in a variety of ways by defining the
structure of the data. In this section, I show you the most common
constructs used within a DTD. I use the XML representation of a
portion of the table of contents for this book as an example again,
and go through the process of constructing a DTD for the XML table of
contents document.
</p>

<p>The DTD defines how data is formatted. It must define each allowed
element in an <a name="INDEX-132" />XML
document, the allowed attributes and possibly the acceptable
attribute values for each element, the nesting and occurrences of
each element, and any external entities. DTDs can specify many other
things about an XML document, but these basics are what we will focus
on. You will learn the constructs that a DTD offers by applying them
to and constraining the XML file from <a href="ch02_01.htm">Example 2-1</a>.
The complete DTD is shown in <a href="ch02_02.htm">Example 2-3</a>, which
I'll refer to in this section.
</p>

<a name="javaxml2-CHP-2-EX-3" /><div class="example">
<h4 class="objtitle">Example 2-3. DTD for <a href="ch02_01.htm">Example 2-1</a> </h4>
<blockquote><pre class="code">&lt;!ELEMENT book (title, contents, ora:copyright)&gt;
&lt;!ATTLIST book
          xmlns       CDATA  #REQUIRED
          xmlns:ora   CDATA  #REQUIRED
&gt;
&lt;!ELEMENT title (#PCDATA)&gt;
&lt;!ATTLIST title
          ora:series  (C | Java | Linux | Oracle | 
                      Perl | Web | Windows)   
                      #REQUIRED
&gt;
&lt;!ELEMENT contents (chapter+)&gt;
&lt;!ELEMENT chapter (topic+)&gt;
&lt;!ATTLIST chapter
          title       CDATA  #REQUIRED
          number      CDATA  #REQUIRED
&gt;
&lt;!ELEMENT topic EMPTY&gt;
&lt;!ATTLIST topic
          name        CDATA  #REQUIRED
&gt;

&lt;!-- Copyright Information --&gt;
&lt;!ELEMENT ora:copyright (copyright)&gt;
&lt;!ELEMENT copyright (year, content)&gt;
&lt;!ATTLIST copyright
          xmlns  CDATA  #REQUIRED
&gt;
&lt;!ELEMENT year EMPTY&gt;
&lt;!ATTLIST year
          value  CDATA  #REQUIRED
&gt;
&lt;!ELEMENT content (#PCDATA)&gt;
&lt;!ENTITY OReillyCopyright SYSTEM
   "http://www.newInstance.com/javaxml2/copyright.xml"
&gt;</pre></blockquote>
</div>

<a name="javaxml2-CHP-2-SECT-2.1.1" /><div class="sect3">
<h3 class="sect3">2.2.1.1. Elements</h3>

<p>The bulk of the DTD is composed of <tt class="literal">ELEMENT</tt>
definitions (covered in this section) and
<tt class="literal">ATTRIBUTE</tt> definitions (covered in the next). An
element definition begins with the
<tt class="literal">ELEMENT</tt><a name="INDEX-133" /><a name="INDEX-134" /> keyword, following the standard
<tt class="literal">&lt;!</tt><a name="INDEX-135" /> opening of a DTD tag, and then the name of
the element. Following that name is the <em class="filename">content
model</em><a name="INDEX-136" /> of the element. The content model is
generally within parentheses, and specifies what content can be
included within the element. Take the <tt class="literal">book</tt> element
as an example:
</p>

<blockquote><pre class="code">&lt;!ELEMENT book (title, contents, ora:copyright)&gt;</pre></blockquote>

<p>This says that for any <tt class="literal">book</tt> element, there may be
a <tt class="literal">title</tt> element, a <tt class="literal">contents</tt>
element, and an <tt class="literal">ora:copyright</tt> element within it.
The definitions for these elements are defined later with their
content models, and so on. You should be aware that in this standard
case, the order specified in the content model is the order that the
elements <em class="emphasis">must</em> appear within the document.
Additionally, each element <em class="emphasis">must</em> appear, once and
only once, when no modifiers are used (which I'll cover
momentarily). In this case, each <tt class="literal">book</tt> element must
have a <tt class="literal">title</tt> element, a
<tt class="literal">contents</tt> element, and then an
<tt class="literal">ora:copyright</tt> element, without exception. If these
rules are broken, the document is not considered valid (although it
still could be well-formed).
</p>

<p>Of course, in many cases you need to specify multiple occurrences of
an element, or optional occurrences. You can do this using the
<a name="INDEX-137" /> <a name="INDEX-138" />recurrence modifiers listed in <a href="ch02_02.htm">Table 2-1</a>. 
</p>

<a name="javaxml2-CHP-2-TABLE-1" /><h4 class="objtitle">Table 2-1. DTD recurrence modifiers </h4><table border="1">



<tr>
<th>
<p>Operator</p>
</th>
<th>
<p>Description</p>
</th>
</tr>


<tr>
<td>
<p>[Default]</p>
</td>
<td>
<p>Must appear once and only once (1)</p>
</td>
</tr>
<tr>
<td>
<p><a name="INDEX-139" />?</p>
</td>
<td>
<p>May appear once or not at all (0..1)</p>
</td>
</tr>
<tr>
<td>
<p><a name="INDEX-140" />+</p>
</td>
<td>
<p>Must appear at least once, up to an infinite number of times (1..N)</p>
</td>
</tr>
<tr>
<td>
<p><a name="INDEX-141" />*</p>
</td>
<td>
<p>May appear any number of times, including not at all (0..N)</p>
</td>
</tr>

</table><p>

<p>As an example, take a look at the <tt class="literal">contents</tt> element
definition:
</p>

<blockquote><pre class="code">&lt;!ELEMENT contents (chapter+)&gt;</pre></blockquote>

<p>Here, the <tt class="literal">contents</tt> element must have at least one
<tt class="literal">chapter</tt> element within it, but there can be an
unlimited number of those chapters.
</p>

<p>If an element has character data within it, the
<tt class="literal">#PCDATA</tt><a name="INDEX-142" /> keyword is used as its content model:
</p>

<blockquote><pre class="code">&lt;!ELEMENT title (#PCDATA)&gt;</pre></blockquote>

<p>If an element should always be an
<a name="INDEX-143" />empty
element, the <tt class="literal">EMPTY</tt><a name="INDEX-144" /> keyword is used:
</p>

<blockquote><pre class="code">&lt;!ELEMENT topic EMPTY&gt;</pre></blockquote>

</div>

<a name="javaxml2-CHP-2-SECT-2.1.2" /><div class="sect3">
<h3 class="sect3">2.2.1.2. Attributes</h3>

<p><a name="INDEX-145" />
<a name="INDEX-146" />Once you've
handled the element definition, you'll want to define
attributes. These are defined through the
<tt class="literal">ATTLIST</tt><a name="INDEX-147" /> keyword. The first value is the name of
the element, and then you have various attributes defined. Those
definitions involve giving the name of the attribute, the type of
attribute, and then whether the attribute is required or implied
(which means it is not required, essentially). Most attributes with
textual values will simply be of the type
<tt class="literal">CDATA</tt><a name="INDEX-148" />, as shown here:
</p>

<blockquote><pre class="code">&lt;!ATTLIST chapter
          title       CDATA  #REQUIRED
          number      CDATA  #REQUIRED
&gt;</pre></blockquote>

<p>You can also specify a set of values that an attribute must take on
for the document to be considered valid:
</p>

<blockquote><pre class="code">&lt;!ATTLIST title
          ora:series  (C | Java | Linux | Oracle | 
                      Perl | Web | Windows)   
                      #REQUIRED
&gt;</pre></blockquote>

</div>

<a name="javaxml2-CHP-2-SECT-2.1.3" /><div class="sect3">
<h3 class="sect3">2.2.1.3. Entities</h3>

<p><a name="INDEX-149" />
<a name="INDEX-150" />You can specify
entity reference resolution in a DTD using the
<tt class="literal">ENTITY</tt><a name="INDEX-151" /> keyword. This works a lot like the
<tt class="literal">DOCTYPE</tt> reference I talked about earlier, where a
public ID and/or system ID may be specified. In the example DTD,
I've specified a system ID, a URL, for the
<tt class="literal">OReillyCopyright</tt> entity reference to resolve to:
</p>

<blockquote><pre class="code">&lt;!ENTITY OReillyCopyright SYSTEM
   "http://www.newInstance.com/javaxml2/copyright.xml"
&gt;</pre></blockquote>

<p>This results in the <em class="emphasis">copyright.xml</em>
file at the specified URL being loaded as the value of the
O'Reilly copyright entity reference in the sample document.
You'll see this in action in the next few chapters.
</p>

<p>Now this is hardly an extensive reference on DTDs, but it should give
you enough basic knowledge to get going. As I've suggested,
have some additional resources specifically on XML available (like
<em class="emphasis">XML in a Nutshell</em>) as you go
through this book in case you run across something you're
unsure about. By assuming that you have that or the online
specifications from <a href="../../../../../../www.w3.org/">http://www.w3.org</a> around, I can delve into
Java topics more quickly.<a name="INDEX-152" /> 
</p>

</div>
</div>
<a name="javaxml2-CHP-2-SECT-2.2" /><div class="sect2">
<h3 class="sect2">2.2.2. XML Schema</h3>

<p><a name="INDEX-153" />XML Schema is a newly finalized candidate
recommendation from the W3C. It seeks to improve upon DTDs by adding
more typing and quite a few more constructs than DTDs, as well as
following an XML format. I'm going to spend relatively little
time here talking about schemas, because they are a
"behind-the-scenes" detail for Java and XML. In the
chapters where you'll be working with schemas (<a href="ch14_01.htm">Chapter 14, "Content Syndication"</a>, for instance), I'll address specific
points you need to be aware of. However, the specification for XML
Schema is so enormous that it would take up an entire book of
explanation on its own (see the book <a href="../schema/index.htm"><em>XML Schema</em></a> on this CD-ROM). <a href="ch02_02.htm">Example 2-4</a> shows the XML
Schema constraining <a href="ch02_01.htm">Example 2-1</a>.
</p>

<a name="javaxml2-CHP-2-EX-4" /><div class="example">
<h4 class="objtitle">Example 2-4. XML Schema constraining <a href="ch02_01.htm">Example 2-1</a> </h4>
<blockquote><pre class="code">&lt;?xml version="1.0" encoding="UTF-8"?&gt;

&lt;xs:schema xmlns:xs="http://www.w3.org/2001/XMLSchema" 
           xmlns="http://www.oreilly.com/javaxml2" 
           xmlns:ora="http://www.oreilly.com"
           targetNamespace="http://www.oreilly.com/javaxml2"
           elementFormDefault="qualified"
&gt;
  &lt;xs:import namespace="http://www.oreilly.com" 
             schemaLocation="contents-ora.xsd" /&gt;

  &lt;xs:element name="book"&gt;
    &lt;xs:complexType&gt;
      &lt;xs:sequence&gt;
        &lt;xs:element ref="title" /&gt;
        &lt;xs:element ref="contents" /&gt;
        &lt;xs:element ref="ora:copyright" /&gt;
      &lt;/xs:sequence&gt;
    &lt;/xs:complexType&gt;
  &lt;/xs:element&gt;

  &lt;xs:element name="title"&gt;
    &lt;xs:complexType&gt;
      &lt;xs:simpleContent&gt;
        &lt;xs:restriction base="xs:string"&gt;
          &lt;xs:attribute ref="ora:series" use="required" /&gt;
        &lt;/xs:restriction&gt;
      &lt;/xs:simpleContent&gt;
    &lt;/xs:complexType&gt;
  &lt;/xs:element&gt;

  &lt;xs:element name="contents"&gt;
    &lt;xs:complexType&gt;
      &lt;xs:sequence&gt;
        &lt;xs:element name="chapter" maxOccurs="unbounded"&gt;
          &lt;xs:complexType&gt;
            &lt;xs:sequence&gt;
              &lt;xs:element name="topic" maxOccurs="unbounded"&gt;
                &lt;xs:complexType&gt;
                  &lt;xs:attribute name="name" 
                                type="xs:string" 
                                use="required" /&gt;
                &lt;/xs:complexType&gt;
              &lt;/xs:element&gt;
            &lt;/xs:sequence&gt;
            &lt;xs:attribute name="title" type="xs:string" use="required"/&gt;
            &lt;xs:attribute name="number" type="xs:byte" use="required"/&gt;
          &lt;/xs:complexType&gt;
        &lt;/xs:element&gt;
      &lt;/xs:sequence&gt;
    &lt;/xs:complexType&gt;
  &lt;/xs:element&gt;

&lt;/xs:schema&gt;</pre></blockquote>
</div>

<p>In addition, you'll need the schema in <a href="ch02_02.htm">Example 2-5</a>, for reasons you will soon understand.
</p>

<a name="javaxml2-CHP-2-EX-5" /><div class="example">
<h4 class="objtitle">Example 2-5. Additional XML Schema for <a href="ch02_01.htm">Example 2-1</a> </h4>
<blockquote><pre class="code">&lt;?xml version="1.0" encoding="UTF-8"?&gt;

&lt;xs:schema xmlns="http://www.oreilly.com" 
           xmlns:xs="http://www.w3.org/2001/XMLSchema" 
           targetNamespace="http://www.oreilly.com"
           attributeFormDefault="qualified" 
           elementFormDefault="qualified"
&gt;
  &lt;xs:attribute name="series" type="xs:string"/&gt;
  &lt;xs:element name="copyright" type="xs:string" /&gt;
&lt;/xs:schema&gt;</pre></blockquote>
</div>

<p>Before diving into the specifics of these schemas, notice that
various namespace declarations are made. First, the XML Schema
namespace itself is attached to the <tt class="literal">xs</tt> prefix,
allowing separation of XML Schema constructs from the elements and
attributes being constrained. Next, the default namespace is attached
to the namespace of the elements being defined; in <a href="ch02_02.htm">Example 2-4</a> this is the Java and XML namespace, and in
<a href="ch02_02.htm">Example 2-5</a> it's the O'Reilly namespace.
I've also assigned the <tt class="literal">targetNamespace</tt>
attribute this same value. This attribute specifies to the schema the
namespace of the elements and attributes being constrained. This is
easy to forget, and can wreak a lot of havoc, so be careful to
include it. At this point, namespaces are defined for the elements
being constrained (the default namespace) and the constructs being
used (the XML Schema namespace).
</p>

<p>Last, I've specified the value of
<tt class="literal">attributeFormDefault</tt> and
<tt class="literal">elementFormDefault</tt> as "qualified."
This indicates that I'll use fully qualified names for the
elements and attributes, rather than just local names. I won't
go into detail about this, but I highly recommend you use qualified
names at all times. Trying to deal with multiple namespaces and
unqualified names at the same time is a mess I wouldn't want to
wander into.
</p>

<a name="javaxml2-CHP-2-SECT-2.2.1" /><div class="sect3">
<h3 class="sect3">2.2.2.1. Elements and attributes</h3>

<p>Elements are defined with the <tt class="literal">element</tt> construct.
You'll generally need to define your own data types by nesting
a <tt class="literal">complexType</tt> tag within the
<tt class="literal">element</tt> element, which defines the name of the
element (through the <tt class="literal">name</tt> attribute). Take a look
at this fragment of <a href="ch02_02.htm">Example 2-4</a>:
</p>

<blockquote><pre class="code">&lt;xs:element name="book"&gt;
  &lt;xs:complexType&gt;
    &lt;xs:sequence&gt;
      &lt;xs:element ref="title" /&gt;
      &lt;xs:element ref="contents" /&gt;
      &lt;xs:element ref="ora:copyright" /&gt;
    &lt;/xs:sequence&gt;
  &lt;/xs:complexType&gt;
&lt;/xs:element&gt;</pre></blockquote>

<p>Here, I've specified that the <tt class="literal">book</tt> element
has complex content. Within it there should be three elements:
<tt class="literal">title</tt>, <tt class="literal">contents</tt>, and
<tt class="literal">ora:copyright</tt>. By using the
<tt class="literal">sequence</tt> construct, I've ensured that they
appear in the specified order; and with no modifiers, an element must
appear once and only once. For each of these other elements,
I've used the <tt class="literal">ref</tt> keyword to reference
another element definition. This points to the definitions for each
of these elements in another part of the schema, and keeps things
organized and easy to follow.
</p>

<p>Later in the file, the <tt class="literal">title</tt> element is defined:</p>

<blockquote><pre class="code">&lt;xs:element name="title"&gt;
  &lt;xs:complexType&gt;
    &lt;xs:simpleContent&gt;
      &lt;xs:restriction base="xs:string"&gt;
        &lt;xs:attribute ref="ora:series" use="required" /&gt;
      &lt;/xs:restriction&gt;
    &lt;/xs:simpleContent&gt;
  &lt;/xs:complexType&gt;
&lt;/xs:element&gt;</pre></blockquote>

<p>This element is really just a simple XML Schema
<tt class="literal">string</tt> type; however, I've added an
attribute to it, so I must define a <tt class="literal">complexType</tt>.
Since I'm extending an existing type, I use the
<tt class="literal">simpleContent</tt> and <tt class="literal">restriction</tt>
keywords (as nested elements) to define this type.
<tt class="literal">simpleContent</tt> informs the schema that this is a
basic type, and <tt class="literal">restriction</tt>, with the base of
"xs:string", lets the schema know I want to allow just
what the XML Schema <tt class="literal">string</tt> type allows, plus the
additional attribute defined here (with the
<tt class="literal">attribute</tt> keyword). For the attribute itself, I
reference the type defined elsewhere, and specify that it must appear
for this element (through <tt class="literal">use="required"</tt>). I
realize that this paragraph is a mouthful, and not completely
obvious; however, take your time and you'll get it all.
</p>

<p>One other thing you'll notice is the use of
<tt class="literal">minOccurs</tt> and <tt class="literal">maxOccurs</tt>
attributes on the <tt class="literal">element</tt> element; these
attributes allow an element to appear a specified number of times
other than the default, which is once and only once. For example,
specifying <tt class="literal">minOccurs="0"</tt> and
<tt class="literal">maxOccurs="1"</tt> allows an element to appear once, or
not at all. To allow an element to appear an unlimited number of
times, you can use the value of "unbounded" for the
<tt class="literal">maxOccurs</tt> attribute, as in <a href="ch02_02.htm">Example 2-4</a>. 
</p>

</div>

<a name="javaxml2-CHP-2-SECT-2.2.2" /><div class="sect3">
<h3 class="sect3">2.2.2.2. Multiple namespaces</h3>

<p>You'll notice that I defined <em class="emphasis">two</em> schemas,
though, which may have you puzzled. For each namespace in a document,
one schema must be defined. Additionally, you can't use the
same external schema for both namespaces, and simply point both at
that external schema. As a result, using the <tt class="literal">ora</tt>
prefix and namespace requires an additional schema, which I called
<tt class="literal">contents-ora.xsd</tt>. You'll also need to use
the <tt class="literal">schemaLocation</tt> attribute I talked about
earlier to reference this schema; however, don't add another
attribute. Instead, you can append another namespace and
schema-location pair to the end of the value of the attribute, as
shown here:
</p>

<blockquote><pre class="code">&lt;book xmlns="http://www.oreilly.com/javaxml2"
      xmlns:ora="http://www.oreilly.com"
      xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
      xsi:schemaLocation="http://www.oreilly.com/javaxml2 XSD/contents.xsd 
                          http://www.oreilly.com XSD/contents-ora.xsd"
&gt;</pre></blockquote>

<p>This essentially says for the namespace <a href="../../../../../../www.oreilly.com/javaxml2">http://www.oreilly.com/javaxml2</a>, look up
definitions in the schema called <em class="emphasis">contents.xsd</em> in the <em class="emphasis">XSD/</em> directory. For the <a href="../../../../../../www.oreilly.com/">http://www.oreilly.com</a> namespace, use the
<em class="emphasis">contents-ora.xsd</em> schema in the
same directory. You'll then need to define the two schemas I
showed you in <a href="ch02_02.htm">Example 2-5</a> and <a href="ch02_02.htm">Example 2-5</a>. Finally, import the
O'Reilly schema into the Java and XML one, since elements in
the Java and XML schema refer to attributes in the O'Reilly
one:
</p>

<blockquote><pre class="code">&lt;xs:import namespace="http://www.oreilly.com" 
           schemaLocation="contents-ora.xsd" /&gt;</pre></blockquote>

<p>This import is fairly self-explanatory, so I won't dwell on it.
You should realize that dealing with multiple namespaces is about the
most complex thing you can do in schemas, and can easily trip you up.
(It tripped me up, until Eric van der Vlist saved the day.) I also
recommend a good XML Schema-capable editor. While I'm generally
slow to recommend commercial products, in this case XMLSpy 4.0
(<a href="../../../../../../www.xmlspy.com/">http://www.xmlspy.com</a>) turned
out to be wonderfully helpful.
</p>

<p>I've barely scratched the surface of either DTDs or XML Schema,
and there are even other <a name="INDEX-154" />constraint models not covered at all!
For example, Relax (and Relax NG, which includes what used to be
TREX) is gaining a lot of steam, as it's considered a lot
easier and more lightweight than XML Schema. You can check out the
activity <a name="INDEX-155" />online at <a href="../../../../../../www.oasis-open.org/committees/relax-ng/">http://www.oasis-open.org/committees/relax-ng/</a>.
No matter what technology you choose, though, you should be able to
find something that helps you constrain your XML documents. With
these constraints in place, validation and interoperability become a
snap. Consider yourself educated on XML constraints, and get ready to
move on to the next topic in this whirlwind tour: XML
transformations.<a name="INDEX-156" /> <a name="INDEX-157" /><a name="INDEX-158" /> 
</p>

</div>
</div>


<hr width="684" align="left" />
<div class="navbar"><table width="684" border="0"><tr><td align="left" valign="top" width="228"><a href="ch02_01.htm"><img alt="Previous" border="0" src="../gifs/txtpreva.gif" /></a></td><td align="center" valign="top" width="228"><a href="index.htm"><img alt="Home" border="0" src="../gifs/txthome.gif" /></a></td><td align="right" valign="top" width="228"><a href="ch02_03.htm"><img alt="Next" border="0" src="../gifs/txtnexta.gif" /></a></td></tr><tr><td align="left" valign="top" width="228">2. Nuts and Bolts</td><td align="center" valign="top" width="228"><a href="index/index.htm"><img alt="Book Index" border="0" src="../gifs/index.gif" /></a></td><td align="right" valign="top" width="228">2.3. Transformations</td></tr></table></div>
<hr width="684" align="left" />

<img alt="Library Navigation Links" border="0" src="../gifs/navbar.gif" usemap="#library-map" />
<p><p><font size="-1"><a href="copyrght.htm">Copyright &copy; 2002</a> O'Reilly &amp; Associates. All rights reserved.</font></p>

<map name="library-map">
<area shape="rect" coords="0,0,85,93" href="../index.htm"><area shape="rect" coords="85,0,180,98" href="../sax2/index.htm"><area shape="rect" coords="182,-1,261,100" href="../xmlnut/index.htm"><area shape="rect" coords="263,1,384,96" href="index.htm"><area shape="rect" coords="386,1,463,100" href="../jxslt/index.htm"><area shape="rect" coords="466,1,533,112" href="../xslt/index.htm"><area shape="rect" coords="535,-1,610,108" href="../schema/index.htm"><area shape="rect" coords="613,1,696,121" href="../pxml/index.htm">
</map>

</body></html>
