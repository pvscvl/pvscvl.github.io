<html><head><title>Push Versus Pull (Java &amp; XML, 2nd Edition)</title><link rel="stylesheet" type="text/css" href="../style/style1.css" />

<meta name="DC.Creator" content="Brett McLaughlin" /><meta name="DC.Format" content="text/xml" scheme="MIME" /><meta name="DC.Language" content="en-US" /><meta name="DC.Publisher" content="O'Reilly &amp; Associates, Inc." /><meta name="DC.Source" scheme="ISBN" content="059600197L" /><meta name="DC.Subject.Keyword" content="stuff" /><meta name="DC.Title" content="Java &amp; XML, 2nd Edition" /><meta name="DC.Type" content="Text.Monograph" />

</head><body bgcolor="#ffffff">

<img alt="Book Home" border="0" src="gifs/smbanner.gif" usemap="#banner-map" /><map name="banner-map"><area shape="rect" coords="1,-2,616,66" href="index.htm" alt="Java and XML, 2nd Edition" /><area shape="rect" coords="629,-11,726,25" href="jobjects/fsearch.htm" alt="Search this book" /></map>

<div class="navbar"><table width="684" border="0"><tr><td align="left" valign="top" width="228"><a href="ch14_02.htm"><img alt="Previous" border="0" src="../gifs/txtpreva.gif" /></a></td><td align="center" valign="top" width="228"></td><td align="right" valign="top" width="228"><a href="ch14_04.htm"><img alt="Next" border="0" src="../gifs/txtnexta.gif" /></a></td></tr></table></div>



<h2 class="sect1">14.3. Push Versus Pull</h2>

<p><a name="INDEX-1375" />So
far, I have looked at building applications assuming that the
application clients would always pull data and content. In other
words, a user had to type a URL into a browser (in the case of the
<em class="emphasis">mytechbooks.com</em> new book listings), or an
application like the mytechbooks.com servlet had to make an HTTP
request for XML data (in the case of the Foobar Public Library).
While this is not a problem, it is not always the best way for a
company like mytechbooks.com to sell books. Clients pulling data have
to remember to visit sites they would buy items from, and often
don't revisit those sites for days, weeks, or even months.
While those clients may often purchase a large number of goods and
services when they do remember, on average, those purchases do not
result in as much revenue as if small purchases were made more
frequently.
</p>

<p>Realizing this trend, mytechbooks.com wants to be able to push data
to its clients. Pushing data involves letting the client know
(without any client action) that new items are available or that
specials are being run. This in turn allows the client to make more
frequent purchases without having to remember to visit a web page.
However, pushing data to clients is difficult in a web medium, as the
Internet does not behave as a thick client: it is harder to send
pop-up messages or generate alerts for users. What mytechbooks.com
has discovered, though, is the popularity of personalized
"start pages" like Netscape's My Netscape and
Yahoo's My Yahoo pages. In talking with Netscape,
mytechbooks.com has been hearing about a technology called Rich Site
Summary (RSS), and thinks that may be the answer to its need to push
data out to clients.
</p>

<a name="javaxml2-CHP-14-SECT-3.1" /><div class="sect2">
<h3 class="sect2">14.3.1. Rich Site Summary</h3>

<p><a name="INDEX-1376" />Rich Site Summary (RSS) is a
particular flavor of XML. It has its own DTD, and defines what is
called a <a name="INDEX-1377" />
<a name="INDEX-1378" /><em class="filename">channel</em>.
A channel is a way to represent data about a specific subject, and
provides for a title and description of the channel, an image or
logo, and then several
<a name="INDEX-1379" /><em class="filename">items</em>
within the channel. Each item, then, is something of particular
interest about the channel, or a product or service available.
Because the allowed elements of an item are fairly generic
(<tt class="literal">title</tt>, <tt class="literal">description</tt>,
<tt class="literal">hyperlink</tt>), almost anything can be represented as
an item of a channel. An RSS channel is not intended to provide a
complete site's content, but rather a short blurb about a
company or service, suitable for display in a portal-style framework,
or as a sidebar on a web site. In fact, the different
"widgets" at Netscape's Netcenter are all RSS
channels, and Netscape allows the creation of new RSS channels that
can be registered with Netcenter. Netscape also has a built-in system
for displaying RSS channels in an HTML format, which of course fits
into its Netcenter start pages.
</p>

<p>At this point, you may be a little concerned that RSS is to Netscape
as Microsoft's XML parser is to Microsoft: difficult to
integrate with other tools or vendors. Although originally developed
by Netscape specifically for Netcenter, the XML structure of RSS has
made it usable by any application that can read a
<a name="INDEX-1380" />DTD.
In fact, many portal-style web sites and applications are beginning
to use RSS, such as the Apache Jetspeed project
(<a name="INDEX-1381" /><a href="../../../../../../jakarta.apache.org/jetspeed">http://jakarta.apache.org/jetspeed</a>), an open
source Enterprise Information Portal system. Jetspeed takes the same
RSS format that Netscape uses, and renders it in a completely
different manner. Because of the concise grammar of RSS, this is
easily done.
</p>

<p>As many users have start pages, or homepages, or similar places on
the Web that they frequent, <em class="emphasis">mytechbooks.com</em> would like to create an
RSS channel that provides new book listings, and then allows
interested clients to jump straight to buying an item that catches
their eye. This is an effective means to push data, as products like
Netcenter will automatically update RSS channel content as often as
the user desires.
</p>

</div>
<a name="javaxml2-CHP-14-SECT-3.2" /><div class="sect2">
<h3 class="sect2">14.3.2. Creating an XML RSS Document</h3>

<p><a name="INDEX-1382" />The first thing you need to do
to use RSS is create an RSS file. This is almost too simple to be
believed: other than referencing the correct DTD and following that
DTD, there is nothing at all complicated about creating an RSS
document. <a href="ch14_03.htm">Example 14-6</a> shows a sample RSS file that
<em class="emphasis">mytechbooks.com</em> has modeled.
</p>

<a name="javaxml2-CHP-14-EX-6" /><div class="example">
<h4 class="objtitle">Example 14-6. Sample RSS document for mytechbooks.com </h4>
<blockquote><pre class="code">&lt;?xml version="1.0" encoding="UTF-8"?&gt;

&lt;rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#"
         xmlns="http://purl.org/rss/1.0/"
&gt;
 &lt;channel&gt;
  &lt;title&gt;mytechbooks.com New Listings&lt;/title&gt;
  &lt;link&gt;http://www.newInstance.com/javaxml2/techbooks&lt;/link&gt;
  &lt;description&gt;
   Your online source for technical material, computers, 
   and computing books!
  &lt;/description&gt;

  &lt;image rdf:resource="http://newInstance.com/javaxml2/logo.gif" /&gt;

  &lt;items&gt;
   &lt;rdf:Seq&gt;
    &lt;rdf:li resource="http://www.newInstance.com/javaxml2/techbooks" /&gt;
   &lt;/rdf:Seq&gt;
  &lt;/items&gt;
 &lt;/channel&gt;

  &lt;image rdf:about="http://newInstance.com/javaxml2/logo.gif"&gt;
   &lt;title&gt;mytechbooks.com&lt;/title&gt;
   &lt;url&gt;http://newInstance.com/javaxml2/logo.gif&lt;/url&gt;
   &lt;link&gt;http://newInstance.com/javaxml2/techbooks&lt;/link&gt;
  &lt;/image&gt;

  &lt;item rdf:about="http://www.newInstance.com/javaxml2/techbooks"&gt;
   &lt;title&gt;Java Servlet Programming&lt;/title&gt;
   &lt;link&gt;
    http://newInstance.com/javaxml2/techbooks/buy.xsp?isbn=156592391X
   &lt;/link&gt;
   &lt;description&gt;
    This book is a superb introduction to Java servlets
    and their various communications mechanisms.
   &lt;/description&gt;
  &lt;/item&gt;
&lt;/rdf:RDF&gt;</pre></blockquote>
</div>

<p>The <a name="INDEX-1383" />root
element must be <tt class="literal">RDF</tt>, in the RDF namespace, as
shown in the example. Within the root element, one single
<tt class="literal">channel</tt><a name="INDEX-1384" /> element must appear. This has elements
that describe the channel (<tt class="literal">title</tt>,
<tt class="literal">link</tt>, and <tt class="literal">description</tt>), an
optional image that can be associated with the channel (as well as
information about that image), and then as many as 15
<tt class="literal">item</tt> elements,<a href="#FOOTNOTE-23">[23]</a> each detailing one item related
to the channel. Each item has a <tt class="literal">title</tt>,
<tt class="literal">link</tt>, and <tt class="literal">description</tt> element,
all of which are self-explanatory. An optional text box and button to
submit the information in the book can be added as well, although
these are not included in the example. For complete details of
allowed elements and attributes, visit the <a name="INDEX-1385" /> <a name="INDEX-1386" />RSS 1.0
specification online at <a href="../../../../../../groups.yahoo.com/group/rss-dev/files/specification.html">http://groups.yahoo.com/group/rss-dev/files/specification.html</a>.
</p><blockquote class="footnote"> <a name="FOOTNOTE-23" /><p>[23] This isn't a
limit set by RSS 1.0, but is used for backwards compatibility with
RSS 0.9 and 0.91.</p> </blockquote>

<a name="ch14-13-fm2xml" /><blockquote><b>NOTE:</b> 

As in previous examples, actual RSS channel documents should avoid having <a name="INDEX-1387" />whitespace within the <tt class="literal">link</tt> and <tt class="literal">url</tt> elements, but rather have all information on a single line. Again, the formatting in the example does not reflect this due to printing and sizing constraints.
</p>
</blockquote>
<p>There is one somewhat tricky thing to watch out for, though.
You'll notice that the <tt class="literal">item</tt> element (or
elements) is actually not nested within the
<tt class="literal">channel</tt> element at all. To create a link between
items in the document and the channel, you'll want to use some
RDF (the Resource Description Framework, which RSS is a descendant
of) constructs:
</p>

<blockquote><pre class="code">  &lt;items&gt;
   &lt;rdf:Seq&gt;<tt class="userinput"><b>
    &lt;rdf:li resource="http://www.newInstance.com/javaxml/techbooks" /&gt;</b></tt>
   &lt;/rdf:Seq&gt;
  &lt;/items&gt;</pre></blockquote>

<p>Here, the <tt class="literal">items</tt> element is nested within the
<tt class="literal">channel</tt> element. Then, the <tt class="literal">li</tt>
construct, in the RDF-defined namespace, is assigned a URI through
the <tt class="literal">resource</tt> attribute. In each item you want
associated with this channel, supply the <tt class="literal">about</tt>
attribute (again in the RDF namespace) and assign it the same URI you
used in the channel's resource descriptor:
</p>

<blockquote><pre class="code">  &lt;item <tt class="userinput"><b>rdf:about="http://www.newInstance.com/javaxml/techbooks"&gt;</b></tt>
    &lt;!-- Item content --&gt;
  &lt;/item&gt;</pre></blockquote>

<p>For each item with this URI, an association can be made between that
item and the channel with the same URI. In other words, you've
just built a link between the channel in the RSS file and the items.
The same approach applies for linking a channel to an image; you use
the <tt class="literal">image</tt> element in the
<tt class="literal">channel</tt> element, specifying the image URL as the
value of the <tt class="literal">rdf:resource</tt> attribute. You should
then define an <tt class="literal">image</tt> element,
<em class="emphasis">not</em> within the <tt class="literal">channel</tt>
element, supplying a URL, description, and link. Finally, use the
<tt class="literal">rdf:about</tt> attribute (as in the
<tt class="literal">item</tt> element) to specify the same URL as provided
in the channel's <tt class="literal">image</tt> element. Did you
follow all of that? This is all quite a bit different from RSS 0.9
and 0.91 (covered in the first edition of this book), so you'll
need to be careful not to get things mixed up between the older
specification and this newer one.
</p>

<p>It is simple enough to create RSS files programmatically; the
procedure is similar to how you generated the HTML for the
<em class="emphasis">mytechbooks.com</em> web site. Half of the RSS file (the information about
the channel as well as the image information) is static content; only
the <tt class="literal">item</tt> elements must be generated dynamically.
However, just as you were getting ready to open up <em class="emphasis">vi</em> and start creating another XSL stylesheet,
another requirement was dropped into your lap: the machine that will
house the RSS channel is a different server than that used in our
last example, and has only very outdated versions of the Apache Xalan
libraries available. Because of some of the high-availability
applications that also run on that machine, such as the billing
system, mytechbooks.com does not want to update those libraries until
change control can be stepped through, a weeklong process. However,
<em class="emphasis">mytechbooks.com</em> does have newer versions of the
Xerces libraries available (as XML parsing is used in the billing
system), so Java APIs for handling XML are available.<a href="#FOOTNOTE-24">[24]</a> In this example, I use <a name="INDEX-1388" /> <a name="INDEX-1389" /> <a name="INDEX-1390" />JDOM to convert the XML from the Foobar
Public Library into an RSS channel format. <a href="ch14_03.htm">Example 14-7</a> does just this.
</p><blockquote class="footnote">
<a name="FOOTNOTE-24" /><p>[24] Yes, this is a bit of a silly case, and perhaps not so likely
to really occur. However, it does afford me the opportunity to look
at another alternative for creating XML programmatically. Don't
sneer too much at the absurdity of the example; all of the examples
in this book, including the silly ones, stem from actual experiences
consulting for real-world companies. Laughing at this scenario might
mean your next project has the same silly requirements!</p>
</blockquote>

<a name="javaxml2-CHP-14-EX-7" /><div class="example">
<h4 class="objtitle">Example 14-7. Java servlet to convert new book listings into an RSS channel document </h4>
<blockquote><pre class="code">package com.techbooks;

import java.io.FileInputStream;
import java.io.InputStream;
import java.io.IOException;
import java.io.PrintWriter;
import java.net.URL;
import java.util.Iterator;
import java.util.List;
import javax.servlet.*;
import javax.servlet.http.*;

// JDOM
import org.jdom.Document;
import org.jdom.Element;
import org.jdom.JDOMException;
import org.jdom.input.SAXBuilder;

public class GetRSSChannelServlet extends HttpServlet {

    /** Host to connect to for books list */
    private static final String hostname = "newInstance.com";
    /** Port number to connect to for books list */
    private static final int portNumber = 80;
    /** File to request (URI path) for books list */
    private static final String file = "/cgi/supplyBooks.pl";

    public void service(HttpServletRequest req, HttpServletResponse res) 
        throws ServletException, IOException {            
            
        res.setContentType("text/plain");
        PrintWriter out = res.getWriter();
        
        // Connect and get XML listing of books
        URL getBooksURL = new URL("http", hostname, portNumber, file);
        InputStream in = getBooksURL.openStream();

        try {
            // Request SAX Implementation and use default parser
            SAXBuilder builder = new SAXBuilder();

            // Create the document
            Document doc = builder.build(in);
            
            // Output XML
            out.println(generateRSSContent(doc));
            
        } catch (JDOMException e) {        
            out.println("Error: " + e.getMessage());
        } finally {
            out.close();
        }
    }   
    
    /**
     * &lt;p&gt;
     * This will generate an RSS XML document using the supplied 
     *   JDOM &lt;code&gt;Document&lt;/code&gt;.
     * &lt;/p.
     *
     * @param doc &lt;code&gt;Document&lt;/code&gt; to use for input.
     * @return &lt;code&gt;String&lt;/code&gt; - RSS file to output.
     * @throws &lt;code&gt;JDOMException&lt;/code&gt; when errors occur.
     */
    private String generateRSSContent(Document doc) throws JDOMException {
        StringBuffer rss = new StringBuffer();
        
        rss.append("&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;\n")
           .append("&lt;rdf:RDF ")
           .append("xmlns:rdf=\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\"\n")
           .append("         xmlns=\"http://purl.org/rss/1.0/\"\n")
           .append("&gt;\n")
           .append(" &lt;channel&gt;\n")
           .append("  &lt;title&gt;mytechbooks.com New Listings&lt;/title&gt;\n")
           .append("  &lt;link&gt;http://www.newInstance.com/javaxml2/techbooks")
           .append("&lt;/link&gt;\n")
           .append("  &lt;description&gt;\n")
           .append("   Your online source for technical material, computers, \n")
           .append("   and computing books!\n")
           .append("  &lt;/description&gt;\n\n")
           .append("  &lt;image ")
           .append("rdf:resource=\"http://newInstance.com/javaxml2/logo.gif\"")
           .append(" /&gt;\n\n")
           .append("  &lt;items&gt;\n")
           .append("   &lt;rdf:Seq&gt;\n")
           .append("    &lt;rdf:li ")
           .append("resource=\"http://www.newInstance.com/javaxml2/techbooks\"")
           .append(" /&gt;\n")
           .append("   &lt;/rdf:Seq&gt;\n")
           .append("  &lt;/items&gt;\n")
           .append(" &lt;/channel&gt;\n\n")
           .append("  &lt;image ")
           .append("rdf:about=\"http://newInstance.com/javaxml2/logo.gif\"&gt;\n")
           .append("   &lt;title&gt;mytechbooks.com&lt;/title&gt;\n")
           .append("   &lt;url&gt;http://newInstance.com/javaxml2/logo.gif&lt;/url&gt;\n")
           .append("   &lt;link&gt;http://newInstance.com/javaxml2/techbooks&lt;/link&gt;\n")
           .append("  &lt;/image&gt;\n\n");
           
        // Add an item for each new title with Computers as subject
        List books = doc.getRootElement().getChildren("book");
        for (Iterator i = books.iterator(); i.hasNext(); ) {
            Element book = (Element)i.next();
            if (book.getAttribute("subject")
                    .getValue()
                     .equals("Computers")) {
                // Output an item
                rss.append("&lt;item rdf:about=\"http://www.newInstance.com/")
                   .append("javaxml2/techbooks\"&gt;\n")
                    // Add title
                   .append(" &lt;title&gt;")
                   .append(book.getChild("title").getContent())
                   .append("&lt;/title&gt;\n")
                    // Add link to buy book
                   .append(" &lt;link&gt;")
                   .append("http://newInstance.com/javaxml2")
                   .append("/techbooks/buy.xsp?isbn=")
                   .append(book.getChild("saleDetails")
                               .getChild("isbn")
                               .getContent())
                   .append("&lt;/link&gt;\n")
                   .append(" &lt;description&gt;")
                    // Add description
                   .append(book.getChild("description").getContent())
                   .append("&lt;/description&gt;\n")                       
                   .append("&lt;/item&gt;\n");
                        
            }
        }          
         
        rss. append("&lt;/rdf:RDF&gt;");
        
        return rss.toString();
    }
}</pre></blockquote>
</div>

<p>By this time, nothing in this code should be the least bit surprising
to you; I've imported the JDOM and I/O classes needed, and
accessed the Foobar Public Library application as in the
<tt class="literal">ListBooksServlet</tt>. The resulting
<tt class="literal">InputStream</tt> is used to create a JDOM
<tt class="literal">Document</tt>, with the default parser (Apache Xerces)
and the JDOM builder based on SAX doing the work.
</p>

<p>Then, the JDOM <tt class="literal">Document</tt> is handed off to the
<tt class="literal">generateRSSContentMethod()</tt><a name="INDEX-1391" />
<a name="INDEX-1392" />, which prints out all of the static content
for the RSS channel. This method then obtains the
<tt class="literal">book</tt> elements within the XML from the library and
iterates through them, ignoring those without a
<tt class="literal">subject</tt> attribute equal to
"Computers".
</p>

<a name="ch14-14-fm2xml" /><blockquote><b>NOTE:</b> 

Again, I've done some rather different things simply for illustrative purposes. For example, this code directly outputs XML; you could just as easily create a JDOM tree and output it using <tt class="literal">XMLOutputter</tt>. Of course, you could also use DOM for the entire servlet. All these are viable and perfectly legitimate options.
</p>
</blockquote>
<p>Finally, each element that makes it through the comparison is added
to the RSS channel. Nothing very exciting here, right? <a href="ch14_03.htm">Figure 14-5</a> shows a sample output from accessing this
servlet, saved as <em class="emphasis">GetRSSChannelServlet.java</em><a name="INDEX-1393" />,
through a web browser.
</p>

<a name="javaxml2-CHP-14-FIG-5" /><div class="figure"><img height="435" alt="Figure 14-5" src="figs/javax_1405.gif" width="481" /></div><h4 class="objtitle">Figure 14-5. RSS channel generated by the GetRSSChannelServlet</h4>

<p>With this RSS channel ready for use, mytechbooks.com has made its
content available by any service provider that supports RSS! To get
the ball rolling on allowing clients to use its channel,
mytechbooks.com would like to ensure its RSS document is valid, and
see a sample HTML rendering of it (as would you, I
imagine).<a name="INDEX-1394" />
<a name="INDEX-1395" />
<a name="INDEX-1396" />
</p>

</div>
<a name="javaxml2-CHP-14-SECT-3.3" /><div class="sect2">
<h3 class="sect2">14.3.3. Taking a Test Drive</h3>

<p>At this point, let's see this thing in action. Point your
browser at <a href="../../../../../../www.redland.opensource.ac.uk/rss">http://www.redland.opensource.ac.uk/rss</a>. This
site has a nice, online test tool called the Redland RSS viewer that
will take your RSS channel and validate it, as well as render it in
HTML. You'll need to ensure that the RSS feed is available
online somewhere, such as through the servlet just discussed. Enter
in the URL for the servlet, or RSS feed, and then select
"Yes" for the "Format output as a box"
option. This instructs the viewer to render your channel as an HTML
box, much like it could be seen on Netscape's Netcenter or on
<a href="../../../../../../www.oreilly.com/">http://www.oreilly.com</a>, which has
several RSS feeds running. The output from the feed we just created
is shown in <a href="ch14_03.htm">Figure 14-6</a>.
</p>

<a name="javaxml2-CHP-14-FIG-6" /><div class="figure"><img height="250" alt="Figure 14-6" src="figs/javax_1406.gif" width="246" /></div><h4 class="objtitle">Figure 14-6. RSS formatted in HTM</h4>

<p>You can also select several other RSS feeds from the viewer, and see
how they would look formatted in HTML as well. The Meerkat channel is
particularly interesting, as it contains almost all of the RSS
options that are currently available for use. Additionally, if you
have any errors in your RSS, this viewer will let you know what they
are, which is helpful in debugging problems before putting your RSS
channel into production.
</p>

<p>I'm not including code that parses and formats the RSS in this
chapter; in addition to it being a piece of cake for you by now, each
site will need to provide different formatting for RSS feeds. For
some fairly diverse views of RSS channels, you should check out
<a href="../../../../../../www.servlets.com/">http://www.servlets.com</a> (down at
the bottom right), <a href="../../../../../../www.oreilly.com/">http://www.oreilly.com</a>, and <a href="../../../../../../www.xml.com/">http://www.xml.com</a>, all of which have some
pretty different formatting going on. In reading in an RSS channel,
you'll probably want to treat it like XML, and use SAX, DOM, or
JDOM to read the data in and format it however you need. In other
words, there's nothing that requires you to treat an RSS feed
any differently from any other XML document; you just know what the
formatting will look like ahead of time. With that knowledge,
you're ready to use RSS feeds in your own web sites.
</p>

</div>
<a name="javaxml2-CHP-14-SECT-3.4" /><div class="sect2">
<h3 class="sect2">14.3.4. What Happened to Netcenter?</h3>

<p>Readers of the first edition may be curious as to where the section
on viewing the RSS channel in Netscape Netcenter went. If you
haven't seen that edition, Netscape provided a means of
publishing your RSS feeds as channels capable of being added to
Netscape's <em class="emphasis">my.netscape.com</em>
site. This was cool, as you could easily format and view your RSS
feeds in a slick-looking Netscape interface. However, when RSS 1.0
came out, replacing RS 0.91, Netscape removed all of its publishing
links, and no longer allows this sort of thing to go on. So, if
you're looking for a way to use your customized channels in
your Netcenter homepage, you're out of luck.
</p>

<p>You've gotten a good taste of RSS; most of all, you are
probably realizing that like SOAP and web services, there are a ton
of ways to interact with RSS feeds as well. Customize the examples
and concepts in this chapter for your own applications, providing
formatting and business logic specific to your business needs. Now
you've got a better idea of how to do that, and will have more
time for playing that guitar at night (um, that's me. . . well,
you get the idea).<a name="INDEX-1397" /> 
</p>

</div>


<hr width="684" align="left" />
<div class="navbar"><table width="684" border="0"><tr><td align="left" valign="top" width="228"><a href="ch14_02.htm"><img alt="Previous" border="0" src="../gifs/txtpreva.gif" /></a></td><td align="center" valign="top" width="228"><a href="index.htm"><img alt="Home" border="0" src="../gifs/txthome.gif" /></a></td><td align="right" valign="top" width="228"><a href="ch14_04.htm"><img alt="Next" border="0" src="../gifs/txtnexta.gif" /></a></td></tr><tr><td align="left" valign="top" width="228">14.2. mytechbooks.com</td><td align="center" valign="top" width="228"><a href="index/index.htm"><img alt="Book Index" border="0" src="../gifs/index.gif" /></a></td><td align="right" valign="top" width="228">14.4. What's Next?</td></tr></table></div>
<hr width="684" align="left" />

<img alt="Library Navigation Links" border="0" src="../gifs/navbar.gif" usemap="#library-map" />
<p><p><font size="-1"><a href="copyrght.htm">Copyright &copy; 2002</a> O'Reilly &amp; Associates. All rights reserved.</font></p>

<map name="library-map">
<area shape="rect" coords="0,0,85,93" href="../index.htm"><area shape="rect" coords="85,0,180,98" href="../sax2/index.htm"><area shape="rect" coords="182,-1,261,100" href="../xmlnut/index.htm"><area shape="rect" coords="263,1,384,96" href="index.htm"><area shape="rect" coords="386,1,463,100" href="../jxslt/index.htm"><area shape="rect" coords="466,1,533,112" href="../xslt/index.htm"><area shape="rect" coords="535,-1,610,108" href="../schema/index.htm"><area shape="rect" coords="613,1,696,121" href="../pxml/index.htm">
</map>

</body></html>