<html><head><title>Transformations (Java &amp; XML, 2nd Edition)</title><link rel="stylesheet" type="text/css" href="../style/style1.css" />

<meta name="DC.Creator" content="Brett McLaughlin" /><meta name="DC.Format" content="text/xml" scheme="MIME" /><meta name="DC.Language" content="en-US" /><meta name="DC.Publisher" content="O'Reilly &amp; Associates, Inc." /><meta name="DC.Source" scheme="ISBN" content="059600197L" /><meta name="DC.Subject.Keyword" content="stuff" /><meta name="DC.Title" content="Java &amp; XML, 2nd Edition" /><meta name="DC.Type" content="Text.Monograph" />

</head><body bgcolor="#ffffff">

<img alt="Book Home" border="0" src="gifs/smbanner.gif" usemap="#banner-map" /><map name="banner-map"><area shape="rect" coords="1,-2,616,66" href="index.htm" alt="Java and XML, 2nd Edition" /><area shape="rect" coords="629,-11,726,25" href="jobjects/fsearch.htm" alt="Search this book" /></map>

<div class="navbar"><table width="684" border="0"><tr><td align="left" valign="top" width="228"><a href="ch02_02.htm"><img alt="Previous" border="0" src="../gifs/txtpreva.gif" /></a></td><td align="center" valign="top" width="228"></td><td align="right" valign="top" width="228"><a href="ch02_04.htm"><img alt="Next" border="0" src="../gifs/txtnexta.gif" /></a></td></tr></table></div>



<h2 class="sect1">2.3. Transformations</h2>

<p>As useful as <a name="INDEX-159" />XML transformations can be, they
are not simple to implement. In fact, rather than trying to specify
the transformation of XML in the original XML 1.0 specification,
three separate recommendations have come out to define how
transformations should occur. Although one of these (XPath) is also
used in several other XML specifications, by far the most common use
of the components I outline here is to transform XML from one format
into another.
</p>

<p>Because these three specifications are tied together tightly and
almost always used in concert, there is rarely a clear distinction
between them. This can often make for a discussion that is easy to
understand, but not necessarily technically correct. In other words,
the term XSLT, which refers specifically to extensible stylesheet
transformations, is often applied to both extensible stylesheets
(XSL) and XPath. In the same fashion, XSL is often used as a grouping
term for all three technologies. In this section, I distinguish among
the three recommendations, and remain true to the letter of the
specifications outlining these technologies. However, in the interest
of clarity, I use XSL and XSLT interchangeably to refer to the
complete transformation process throughout the rest of the book.
Although this may not follow the letter of these specifications, it
certainly follows their spirit, as well as avoiding lengthy
definitions of simple concepts when you already understand what I
mean.
</p>

<a name="javaxml2-CHP-2-SECT-3.1" /><div class="sect2">
<h3 class="sect2">2.3.1. XSL</h3>

<p><a name="INDEX-160" />XSL is the
Extensible Stylesheet Language. It is defined as a language for
expressing stylesheets. This broad definition is broken down into two
parts:
</p>

<ul><li>
<p>XSL is a language for transforming XML documents.</p>
</li><li>
<p>XSL is an XML vocabulary for specifying the formatting of XML
documents.
</p>
</li></ul>
<p>The definitions are similar, but one deals with moving from one XML
document form to another, while the other focuses on the actual
presentation of content within each document. Perhaps a clearer
definition would be to say that XSL handles the specification of how
to transform a document from format A to format B. The components of
the language handle the processing and identification of the
constructs used to do this.
</p>

<a name="javaxml2-CHP-2-SECT-3.1.1" /><div class="sect3">
<h3 class="sect3">2.3.1.1. XSL and trees</h3>

<p><a name="INDEX-161" />The most important concept to
understand in XSL is that all data within XSL processing stages is in
tree structures (see <a href="ch02_03.htm">Figure 2-1</a>). In fact, the
rules you define using XSL are themselves held in a tree structure.
This allows simple processing of the hierarchical structure of XML
documents. Templates are used to match the root element of the XML
document being processed. Then "leaf" rules are applied
to "leaf" elements, filtering down to the most nested
elements. At any point in this progression, elements can be
processed, styled, ignored, copied, or have a variety of other things
done to them.
</p>

<a name="javaxml2-CHP-2-FIG-1" /><div class="figure"><img height="270" alt="Figure 2-1" src="figs/javax_0201.gif" width="464" /></div><h4 class="objtitle">Figure 2-1. Tree operations within XSL</h4>

<p>A nice advantage of this <a name="INDEX-162" />tree structure is that it
allows the grouping of XML documents to be maintained. If element A
contains elements B and C, and element A is moved or copied, the
elements contained within it receive the same treatment.
</p>

<p>This makes the handling of large data sections that need to receive
the same treatment fast and easy to notate concisely in the XSL
stylesheet. You will see more about how this tree is constructed when
I talk specifically about XSLT in the next section.
</p>

</div>

<a name="javaxml2-CHP-2-SECT-3.1.2" /><div class="sect3">
<h3 class="sect3">2.3.1.2. Formatting objects</h3>

<p>The XSL specification is almost entirely concerned with defining
formatting objects. A <a name="INDEX-163" /> <a name="INDEX-164" />formatting object is based on a large
model, not surprisingly called the formatting model. This model is
all about a set of objects that are fed as input into a formatter.
The formatter applies the objects to the document, either in whole or
in part, and what results is a new document that consists of all or
part of the data from the original XML document in a format specific
to the objects the formatter used. Because this is such a vague,
shadowy concept, the XSL specification attempts to define a concrete
model these objects should conform to. In other words, a large set of
properties and vocabulary make up the set of features that formatting
objects can use. These include the types of areas that may be
visualized by the objects, the properties of lines, fonts, graphics,
and other visual objects, inline and block formatting objects, and a
wealth of other syntactical constructs.
</p>

<p>Formatting objects are used heavily when converting textual XML data
into binary formats such as PDF files, images, or document formats
such as Microsoft Word. For transforming XML data to another textual
format, these objects are seldom used explicitly. Although an
underlying part of the stylesheet logic, formatting objects are
rarely invoked directly, since the resulting textual data often
conforms to another predefined markup language such as HTML. Because
most enterprise applications today are based at least in part on web
architecture and use a browser as a client, I spend the most time
looking at transformations to HTML and XHTML. While formatting
objects are covered only lightly, the topic is broad enough to merit
its own coverage in a separate book. For further information, consult
the XSL specification at <a href="../../../../../../www.w3.org/TR/WD-xsl">http://www.w3.org/TR/WD-xsl</a>.<a name="INDEX-165" />
</p>

</div>
</div>
<a name="javaxml2-CHP-2-SECT-3.2" /><div class="sect2">
<h3 class="sect2">2.3.2. XSLT</h3>

<p><a name="INDEX-166" />The second component of XML
transformations is XSL Transformations. XSLT is the language that
<em class="emphasis">specifies</em> the conversion of a document from one
format to another (where XSL defined the means of that
specification). The syntax used within XSLT is generally concerned
with textual transformations that do not result in binary data
output. For example, XSLT is instrumental is generating HTML or WML
(Wireless Markup Language) from an XML document. In fact, the XSLT
specification outlines the syntax of an XSL stylesheet more
explicitly than the XSL specification itself!
</p>

<p>Just as in the case of XSL, XSLT is always well-formed, valid XML. A
DTD is defined for XSL and XSLT that delineates the allowed
constructs. For this reason, you should only have to learn new syntax
to use XSLT as opposed to the entirely new structures that had to be
digested to use DTDs themselves. Just as in XSL, XSLT is based on a
hierarchical tree structure of data, where nested elements are
leaves, or children, of their parents. XSLT provides a mechanism for
matching patterns within the original XML document (using an XPath
expression, which I'll discuss next), and applying formatting
to that data. This results in simply outputting the data without the
unwanted XML element names, or inserting the data into a complex HTML
table and displaying it to the user with highlighting and coloring.
XSLT also provides syntax for many common operators, such as
conditionals, copying of document tree fragments, advanced pattern
matching, and the ability to access elements within the input XML
data in an absolute and relative path structure. All these constructs
are designed to ease the process of transforming an XML document into
a new format. For a thorough treatment of the XSLT language, see
<em class="emphasis">Java and XSLT</em> by Eric Burke (O'Reilly),
which has an excellent discussion of how to put XSLT to work with
Java.
</p>

</div>
<a name="javaxml2-CHP-2-SECT-3.3" /><div class="sect2">
<h3 class="sect2">2.3.3. XPath</h3>

<p>The final piece of the XML transformations puzzle,
<a name="INDEX-167" />XPath provides a
mechanism for referring to the wide variety of element and attribute
names and values in an XML document. As I mentioned earlier, many XML
specifications are now using XPath, but this discussion is concerned
only with its use in XSLT. With the complex structure that an XML
document can have, locating one specific element or set of elements
can be difficult. It is made more difficult because access to a DTD
or other set of constraints that outlines the document's
structure cannot be assumed; documents that are not validated must be
able to be transformed just as valid documents can. To accomplish
this addressing of elements, XPath defines syntax in line with the
tree structure of XML, and the XSLT processes and constructs that use
it.
</p>

<p>Referencing any element or attribute within an XML document is most
easily accomplished by specifying the path to the element relative to
the current element being processed. In other words, if element B is
the current element and element C and element D are nested within it,
a relative path most easily locates them. This is similar to the
relative paths used in operating system directory structures. At the
same time, XPath also defines addressing for elements relative to the
root of a document. This covers the common case of needing to
reference an element not within the current element's scope; in
other words, an element that is not nested within the element being
processed. Finally, XPath defines syntax for actual pattern matching:
find an element whose parent is element E and which has a sibling
element F. This fills in the gaps left between the absolute and
relative paths. In all these expressions, attributes can be used as
well, with similar matching abilities. Several examples are shown in
<a href="ch02_03.htm">Example 2-6</a>.
</p>

<a name="javaxml2-CHP-2-EX-6" /><div class="example">
<h4 class="objtitle">Example 2-6. XPath expressions </h4>
<blockquote><pre class="code">&lt;!-- Match the element named Book relative to the current element --&gt;
&lt;xsl:value-of select="Book" /&gt;

&lt;!-- Match the element named Contents nested within the Book element --&gt;
&lt;xsl:value-of select="Book/Contents" /&gt;

&lt;!-- Match the Contents element using an absolute path --&gt;
&lt;xsl:value-of select="/Book/Contents" /&gt;

&lt;!-- Match the name attribute of the current element --&gt;
&lt;xsl:value-of select="@name" /&gt;

&lt;!-- Match the title attribute of the Chapter element --&gt;
&lt;xsl:value-of select="Chapter/@title" /&gt;</pre></blockquote>
</div>

<p>Because the input document is often not fixed, an XPath expression
can result in the evaluation of no input data, one input element or
attribute, or multiple input elements and attributes. This ability
makes XPath very useful and handy; it also causes the introduction of
some additional terms. The result of evaluating an XPath expression
is generally referred to as a <em class="filename">node set</em>. This
name shouldn't be surprising, as it is in line with the idea of
a hierarchical or tree structure, often dealt with in terms of its
<em class="filename">leaves</em> or <em class="filename">nodes</em>. The
resultant node set can then be transformed, copied, or ignored, or
have any other legal operation performed on it. In addition to
expressions to select node sets, XPath also defines several node set
functions, such as <tt class="literal">not( )</tt> and <tt class="literal">count(
)</tt>. These functions take in a node set as input (typically
in the form of an XPath expression) and then further pare the
results. All of these expressions and functions are collectively part
of the XPath specification and XPath implementations; however, XPath
is also often used to signify any expression that conforms to the
specification itself. As with XSL and XSLT, this makes it easier to
talk about XSL and XPath, though it is not always technically
correct.
</p>

<p>With all that in mind, you're at least somewhat prepared to
take a look at a simple XSL stylesheet, shown in <a href="ch02_03.htm">Example 2-7</a>. Although you may not understand all of this
now, let's briefly look at some key aspects of the stylesheet.
</p>

<a name="javaxml2-CHP-2-EX-7" /><div class="example">
<h4 class="objtitle">Example 2-7. XSL stylesheet for <a href="ch02_01.htm">Example 2-1</a> </h4>
<blockquote><pre class="code">&lt;?xml version="1.0"?&gt;

&lt;xsl:stylesheet xmlns:javaxml2="http://www.oreilly.com/javaxml2"
                xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
                xmlns:ora="http://www.oreilly.com"
                version="1.0"
&gt;

  &lt;xsl:template match="javaxml2:book"&gt;
    &lt;html&gt;
      &lt;head&gt;
        &lt;title&gt;&lt;xsl:value-of select="javaxml2:title" /&gt;&lt;/title&gt;
      &lt;/head&gt;
      &lt;body&gt;
        &lt;xsl:apply-templates select="*[not(self::javaxml2:title)]" /&gt;
      &lt;/body&gt;
    &lt;/html&gt;
  &lt;/xsl:template&gt;

  &lt;xsl:template match="javaxml2:contents"&gt;
    &lt;center&gt;
     &lt;h2&gt;Table of Contents&lt;/h2&gt;
    &lt;/center&gt;
    &lt;hr /&gt;
    &lt;ul&gt;
     &lt;xsl:for-each select="javaxml2:chapter"&gt;
      &lt;b&gt;
       Chapter &lt;xsl:value-of select="@number" /&gt;.
       &lt;xsl:text&gt; &lt;/xsl:text&gt;
       &lt;xsl:value-of select="@title" /&gt;
      &lt;/b&gt;
      &lt;xsl:for-each select="javaxml2:topic"&gt;      
       &lt;ul&gt;
        &lt;li&gt;&lt;xsl:value-of select="@name" /&gt;&lt;/li&gt;
       &lt;/ul&gt;
      &lt;/xsl:for-each&gt;
     &lt;/xsl:for-each&gt;
    &lt;/ul&gt;
  &lt;/xsl:template&gt;

  &lt;xsl:template match="ora:copyright"&gt;
    &lt;p align="center"&gt;&lt;font size="-1"&gt;
     &lt;xsl:copy-of select="*" /&gt;
    &lt;/font&gt;&lt;/p&gt;
  &lt;/xsl:template&gt;

&lt;/xsl:stylesheet&gt;</pre></blockquote>
</div>

<a name="javaxml2-CHP-2-SECT-3.3.1" /><div class="sect3">
<h3 class="sect3">2.3.3.1. Template matching</h3>

<p>The basis of all XSL work is <a name="INDEX-168" /> <a name="INDEX-169" />template matching. For any element
you want some sort of output to occur on, you generally provide a
template that matches the element. You signify a template with the
<tt class="literal">template</tt><a name="INDEX-170" /> keyword, and provide the name of the
element to match in its <tt class="literal">match</tt> attribute:
</p>

<blockquote><pre class="code">&lt;xsl:template match="javaxml2:book"&gt;
  &lt;html&gt;
    &lt;head&gt;
      &lt;title&gt;&lt;xsl:value-of select="javaxml2:title" /&gt;&lt;/title&gt;
    &lt;/head&gt;
    &lt;body&gt;
      &lt;xsl:apply-templates select="*[not(self::javaxml2:title)]" /&gt;
    &lt;/body&gt;
  &lt;/html&gt;
&lt;/xsl:template&gt;</pre></blockquote>

<p>Here, the <tt class="literal">book</tt> element (in the
<tt class="literal">javaxml2</tt>-associated namespace) is being matched.
When an XSL processor encounters the <tt class="literal">book</tt> element,
the instructions within this template are carried out. In the
example, several HTML formatting tags are output (the
<tt class="literal">html</tt>, <tt class="literal">head</tt>,
<tt class="literal">title</tt>, and <tt class="literal">body</tt> tags). Be sure
to distinguish your XSL elements from other elements (such as HTML
elements) with proper use of namespaces.
</p>

<p>Instead of applying a template, you can use the
<tt class="literal">value-of</tt><a name="INDEX-171" /> construct to obtain the value of an
element, and provide the element name to match through the
<tt class="literal">select</tt> attribute. In the example, the character
data within the <tt class="literal">title</tt> element is extracted and
used as the title of the HTML form to output.
</p>

<p>On the other hand, when you want to cause the templates associated
with an element's children to be applied, use
<tt class="literal">apply-templates</tt><a name="INDEX-172" />. Be sure to do this, or nested
elements can be ignored! You can specify the elements to apply
templates to using the <tt class="literal">select</tt> attribute; by
specifying a value of "*" to that attribute, all
templates left will be applied to all nested elements. In the
example, though, I want to exclude the <tt class="literal">title</tt>
element (since I already used it in the document heading). To
accomplish this, I've used the <tt class="literal">not</tt> keyword,
and specified the <tt class="literal">title</tt> element on the
<tt class="literal">self</tt> axis, which basically means "everything
(<tt class="literal">*</tt>), except (<tt class="literal">not</tt>) the
<tt class="literal">title</tt> element in this document
(<tt class="literal">self::javaxml2:title</tt>). That's a quick
overview, but I'm just trying to give you enough information to
move on to the Java code.
</p>

</div>

<a name="javaxml2-CHP-2-SECT-3.3.2" /><div class="sect3">
<h3 class="sect3">2.3.3.2. Looping</h3>

<p>You'll also often find a need for
<a name="INDEX-173" />
<a name="INDEX-174" />looping
in XSL. Look at this fragment from <a href="ch02_03.htm">Example 2-7</a>:
</p>

<blockquote><pre class="code">&lt;xsl:template match="javaxml2:contents"&gt;
  &lt;center&gt;
   &lt;h2&gt;Table of Contents&lt;/h2&gt;
  &lt;/center&gt;
  &lt;hr /&gt;
  &lt;ul&gt;
   &lt;xsl:for-each select="javaxml2:chapter"&gt;
    &lt;b&gt;
     Chapter &lt;xsl:value-of select="@number" /&gt;.
     &lt;xsl:text&gt; &lt;/xsl:text&gt;
     &lt;xsl:value-of select="@title" /&gt;
    &lt;/b&gt;
    &lt;xsl:for-each select="javaxml2:topic"&gt;      
     &lt;ul&gt;
      &lt;li&gt;&lt;xsl:value-of select="@name" /&gt;&lt;/li&gt;
     &lt;/ul&gt;
    &lt;/xsl:for-each&gt;
   &lt;/xsl:for-each&gt;
  &lt;/ul&gt;
&lt;/xsl:template&gt;</pre></blockquote>

<p>Here, I'm looping through each element named
<tt class="literal">chapter</tt> using the
<tt class="literal">for-each</tt><a name="INDEX-175" /> construct. In Java, this would be:
</p>

<blockquote><pre class="code">for (Iterator i = chapters.iterator(); i.hasNext( ); ) {
    // take action on each chapter
}</pre></blockquote>

<p>Within the loop, the "current" element becomes the next
<tt class="literal">chapter</tt> element encountered. For each, I output
the chapter number; this is accomplished by getting the value
(through <tt class="literal">value-of</tt>) of the number attribute. To
indicate that I want an attribute (not the default, an element), I
prefix the attribute name with the "<a name="INDEX-176" />@" sign. I do the
same thing to get the <tt class="literal">title</tt> attribute's
value, and then in a subloop I move through the topics for each
chapter.
</p>

<p>Notice the rather odd code fragment <tt class="literal">&lt;xsl:text&gt;
&lt;xsl:text&gt;</tt>. The
<tt class="literal">text</tt><a name="INDEX-177" /> construct provides a way to directly
output characters to the result tree. This construct generates a
space between the word "Chapter" and the chapter number
(there is a single space between the opening and closing
<tt class="literal">text</tt> tags).
</p>

</div>

<a name="javaxml2-CHP-2-SECT-3.3.3" /><div class="sect3">
<h3 class="sect3">2.3.3.3. Copying</h3>

<p>You will also find times when all the template matching in the world
isn't as useful as simply passing on the content, unchanged, to
the output tree. This is the case with the copyright element:
</p>

<blockquote><pre class="code">&lt;xsl:template match="ora:copyright"&gt;
  &lt;p align="center"&gt;&lt;font size="-1"&gt;
   &lt;xsl:copy-of select="*" /&gt;
  &lt;/font&gt;&lt;/p&gt;
&lt;/xsl:template&gt;</pre></blockquote>

<p>In addition to a little bit of HTML formatting, this template
instructs all the content of the <tt class="literal">copyright</tt> element
to be copied to the output tree, using the
<tt class="literal">copy-of</tt><a name="INDEX-178" /> construct. Simple enough.
</p>

<p>You'll learn how to use a publishing framework like Cocoon to
render the result of this transformation to HTML, a PDF, or more in
<a href="ch10_01.htm">Chapter 10, "Web Publishing Frameworks"</a>. Rather than keeping you waiting,
though, <a href="ch02_03.htm">Figure 2-2</a> shows the transformed output
from <a href="ch02_01.htm">Example 2-1</a> and the stylesheet in <a href="ch02_03.htm">Example 2-6</a>. 
</p>

<a name="javaxml2-CHP-2-FIG-2" /><div class="figure"><img height="431" alt="Figure 2-2" src="figs/javax_0202.gif" width="481" /></div><h4 class="objtitle">Figure 2-2. Result of XSL transformation</h4>

<p>I realize that I've virtually flown through this material, but
again, I'm just trying to get you past the basics and to the
good stuff, the Java and XML. Have a reference handy, and don't
sweat it too much.<a name="INDEX-179" /> 
</p>

</div>
</div>


<hr width="684" align="left" />
<div class="navbar"><table width="684" border="0"><tr><td align="left" valign="top" width="228"><a href="ch02_02.htm"><img alt="Previous" border="0" src="../gifs/txtpreva.gif" /></a></td><td align="center" valign="top" width="228"><a href="index.htm"><img alt="Home" border="0" src="../gifs/txthome.gif" /></a></td><td align="right" valign="top" width="228"><a href="ch02_04.htm"><img alt="Next" border="0" src="../gifs/txtnexta.gif" /></a></td></tr><tr><td align="left" valign="top" width="228">2.2. Constraints</td><td align="center" valign="top" width="228"><a href="index/index.htm"><img alt="Book Index" border="0" src="../gifs/index.gif" /></a></td><td align="right" valign="top" width="228">2.4. And More...</td></tr></table></div>
<hr width="684" align="left" />

<img alt="Library Navigation Links" border="0" src="../gifs/navbar.gif" usemap="#library-map" />
<p><p><font size="-1"><a href="copyrght.htm">Copyright &copy; 2002</a> O'Reilly &amp; Associates. All rights reserved.</font></p>

<map name="library-map">
<area shape="rect" coords="0,0,85,93" href="../index.htm"><area shape="rect" coords="85,0,180,98" href="../sax2/index.htm"><area shape="rect" coords="182,-1,261,100" href="../xmlnut/index.htm"><area shape="rect" coords="263,1,384,96" href="index.htm"><area shape="rect" coords="386,1,463,100" href="../jxslt/index.htm"><area shape="rect" coords="466,1,533,112" href="../xslt/index.htm"><area shape="rect" coords="535,-1,610,108" href="../schema/index.htm"><area shape="rect" coords="613,1,696,121" href="../pxml/index.htm">
</map>

</body></html>