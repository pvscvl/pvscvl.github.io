<html><head><title>XML Schema Bindings (Java &amp; XML, 2nd Edition)</title><link rel="stylesheet" type="text/css" href="../style/style1.css" />

<meta name="DC.Creator" content="Brett McLaughlin" /><meta name="DC.Format" content="text/xml" scheme="MIME" /><meta name="DC.Language" content="en-US" /><meta name="DC.Publisher" content="O'Reilly &amp; Associates, Inc." /><meta name="DC.Source" scheme="ISBN" content="059600197L" /><meta name="DC.Subject.Keyword" content="stuff" /><meta name="DC.Title" content="Java &amp; XML, 2nd Edition" /><meta name="DC.Type" content="Text.Monograph" />

</head><body bgcolor="#ffffff">

<img alt="Book Home" border="0" src="gifs/smbanner.gif" usemap="#banner-map" /><map name="banner-map"><area shape="rect" coords="1,-2,616,66" href="index.htm" alt="Java and XML, 2nd Edition" /><area shape="rect" coords="629,-11,726,25" href="jobjects/fsearch.htm" alt="Search this book" /></map>

<div class="navbar"><table width="684" border="0"><tr><td align="left" valign="top" width="228"><a href="ch16_02.htm"><img alt="Previous" border="0" src="../gifs/txtpreva.gif" /></a></td><td align="center" valign="top" width="228"></td><td align="right" valign="top" width="228"><a href="ch16_04.htm"><img alt="Next" border="0" src="../gifs/txtnexta.gif" /></a></td></tr></table></div>



<h2 class="sect1">16.3. XML Schema Bindings</h2>

<p><a name="INDEX-1476" />Moving more into the Java side of
things, one major aspect of XML programming I expect to see is a set
of datatypes defined in Java that represent XML Schema constructs.
This is somewhat similar to the DOM Level 2 HTML bindings I talked
about in <a href="ch06_01.htm">Chapter 6, "Advanced DOM"</a>. I consider these infinitely
more useful. Because an XML Schema is itself an XML document, it can
be parsed and dealt with like any other XML document. However, trying
to work with an XML Schema as just any old XML document turns out to
be a bit of a pain. You can't, for example, query an element
definition and determine if it is a complex type. Instead, you have
to get the element, see if it has any children, determine if one of
those children is named <tt class="literal">complexType</tt>, and so on.
This gets even worse when things like sequencing are used; suddenly
the complex type definition appears nested <em class="emphasis">two</em>
levels deep.
</p>

<p>What I expect to see (and in fact, already hear rumblings of) is a
grammar and set of Java objects built to specifically match up with
XML Schema datatypes. This would presumably be built on an existing
object-based API, like DOM or JDOM. So, for the sake of example,
assume that DOM Level 4 or JDOM 1.1 define such objects. You might
see code like this:
</p>

<blockquote><pre class="code">// THIS CODE IS PURELY HYPOTHETICAL
XSDDocumentParser schemaParser =
    new org.apache.xerces.parsers.XSDParser( );
parser.parse(mySchema);
XSDDocument doc = parser.getXSDDocument( );</pre></blockquote>

<p>Now, instead of working with root elements and attributes in XML, you
would deal with this document (where all the classes are prefixed by
XSD, for <em class="filename">XML Schema Datatypes</em>) using schema
concepts, as shown here:
</p>

<blockquote><pre class="code">// Get "root" element
XSDSchema schema = doc.getXSDSchema( );

// Get target namespace for this document
String targetNamespaceURI = schema.getTargetNamespace().getURI( );

// Get some named element definition
XSDElementDef def = schema.getElementDef("movie");
if (def.isComplexType( )) {
    List attributeDefs = def.getAttributeDefs( );
    List nestedElementDefs = def.getElementDefs( );
} else {
    XSDType elementType = def.getType( );
}</pre></blockquote>

<p>Obviously this is a bit contrived, because I'm making up syntax
as I go. However, it's clear that my Java code is working on an
XML Schema, and taking advantage of schema semantics. I'm not
working with basic XML semantics (although if these classes extended
basic DOM or JDOM classes, you could also work in that medium), but
using what the XML Schema specification says about legal schemas to
work a bit smarter. Hopefully the third edition of this book will
have details about this API, because it would be very useful.
</p>



<hr width="684" align="left" />
<div class="navbar"><table width="684" border="0"><tr><td align="left" valign="top" width="228"><a href="ch16_02.htm"><img alt="Previous" border="0" src="../gifs/txtpreva.gif" /></a></td><td align="center" valign="top" width="228"><a href="index.htm"><img alt="Home" border="0" src="../gifs/txthome.gif" /></a></td><td align="right" valign="top" width="228"><a href="ch16_04.htm"><img alt="Next" border="0" src="../gifs/txtnexta.gif" /></a></td></tr><tr><td align="left" valign="top" width="228">16.2. XPointer</td><td align="center" valign="top" width="228"><a href="index/index.htm"><img alt="Book Index" border="0" src="../gifs/index.gif" /></a></td><td align="right" valign="top" width="228">16.4. And the Rest. . . </td></tr></table></div>
<hr width="684" align="left" />

<img alt="Library Navigation Links" border="0" src="../gifs/navbar.gif" usemap="#library-map" />
<p><p><font size="-1"><a href="copyrght.htm">Copyright &copy; 2002</a> O'Reilly &amp; Associates. All rights reserved.</font></p>

<map name="library-map">
<area shape="rect" coords="0,0,85,93" href="../index.htm"><area shape="rect" coords="85,0,180,98" href="../sax2/index.htm"><area shape="rect" coords="182,-1,261,100" href="../xmlnut/index.htm"><area shape="rect" coords="263,1,384,96" href="index.htm"><area shape="rect" coords="386,1,463,100" href="../jxslt/index.htm"><area shape="rect" coords="466,1,533,112" href="../xslt/index.htm"><area shape="rect" coords="535,-1,610,108" href="../schema/index.htm"><area shape="rect" coords="613,1,696,121" href="../pxml/index.htm">
</map>

</body></html>