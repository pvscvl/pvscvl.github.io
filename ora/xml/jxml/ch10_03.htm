<html><head><title>Using a Publishing Framework (Java &amp; XML, 2nd Edition)</title><link rel="stylesheet" type="text/css" href="../style/style1.css" />

<meta name="DC.Creator" content="Brett McLaughlin" /><meta name="DC.Format" content="text/xml" scheme="MIME" /><meta name="DC.Language" content="en-US" /><meta name="DC.Publisher" content="O'Reilly &amp; Associates, Inc." /><meta name="DC.Source" scheme="ISBN" content="059600197L" /><meta name="DC.Subject.Keyword" content="stuff" /><meta name="DC.Title" content="Java &amp; XML, 2nd Edition" /><meta name="DC.Type" content="Text.Monograph" />

</head><body bgcolor="#ffffff">

<img alt="Book Home" border="0" src="gifs/smbanner.gif" usemap="#banner-map" /><map name="banner-map"><area shape="rect" coords="1,-2,616,66" href="index.htm" alt="Java and XML, 2nd Edition" /><area shape="rect" coords="629,-11,726,25" href="jobjects/fsearch.htm" alt="Search this book" /></map>

<div class="navbar"><table width="684" border="0"><tr><td align="left" valign="top" width="228"><a href="ch10_02.htm"><img alt="Previous" border="0" src="../gifs/txtpreva.gif" /></a></td><td align="center" valign="top" width="228"></td><td align="right" valign="top" width="228"><a href="ch10_04.htm"><img alt="Next" border="0" src="../gifs/txtnexta.gif" /></a></td></tr></table></div>



<h2 class="sect1">10.3. Using a Publishing Framework</h2>

<p>Using a good publishing framework like Cocoon doesn't require
any special instruction; it is not a complex application that users
must learn to adapt to. In fact, all Cocoon's uses are based on
simple URLs entered into a standard web browser. Generating dynamic
HTML from XML, viewing XML transformed into PDF files, and even
generating VRML applications from XML is simply a matter of typing
the URL to the desired XML file into your browser and watching Cocoon
and the power of XML take action.
</p>

<a name="javaxml2-CHP-10-SECT-3.1" /><div class="sect2">
<h3 class="sect2">10.3.1. Viewing XML Converted to HTML</h3>

<p><a name="INDEX-1009" />Now <a name="INDEX-1010" />that your framework is in place
and is correctly handling requests ending in
<em class="emphasis">.xml</em>, we begin to see it publish our XML files.
Cocoon comes with several sample XML files and associated XSL
stylesheets in the project's <em class="emphasis">samples/</em> subdirectory. However, you have your
own XML and XSL from earlier chapters by now, so let's
transform the XML table of contents for this book (<em class="emphasis">contents.xml</em>) with the XSL stylesheet
(<em class="emphasis">JavaXML.html.xsl</em>), both from
<a href="ch02_01.htm">Chapter 2, "Nuts and Bolts"</a>. Locate where you saved the XML file,
and copy it into Cocoon's document root, <em class="emphasis">webapps/cocoon/</em>. The document refers to the
<a name="INDEX-1011" />stylesheet <em class="emphasis">XSL/JavaXML.html.xsl</em>. Create the <em class="emphasis">XSL/</em> directory in your web document root, and
copy the stylesheet into that directory. The XML document also
references a DTD; you will need to either comment that out, or create
a <em class="emphasis">DTD/</em> directory and copy the
<em class="emphasis">JavaXML.dtd</em> file, also from <a href="ch02_01.htm">Chapter 2, "Nuts and Bolts"</a>, into that directory.
</p>

<p>Once you have the XML document and its stylesheet in place, you can
access it with the URL <em class="emphasis">http://&lt;hostname&gt;:&lt;port&gt;/cocoon/contents.xml</em>
in your web browser. Assuming you followed the earlier instructions
to get Cocoon running, the transformed XML should look like <a href="ch10_03.htm">Figure 10-3</a>. 
</p>

<a name="javaxml2-CHP-10-FIG-3" /><div class="figure"><img height="414" alt="Figure 10-3" src="figs/javax_1003.gif" width="481" /></div><h4 class="objtitle">Figure 10-3. Cocoon in action on contents.xml</h4>

<p>This should be almost trivial; once Cocoon is set up and configured,
serving up dynamic content is a piece of cake! The mapping from XML
extensions to Cocoon works for any requests within the context in
which you set up Cocoon.<a name="INDEX-1012" /> 
</p>

</div>
<a name="javaxml2-CHP-10-SECT-3.2" /><div class="sect2">
<h3 class="sect2">10.3.2. Viewing PDFs from XML</h3>

<p><a name="INDEX-1013" />In the discussions concerning using XML for
presentation, I've focused on XML converted to HTML. However,
that's just scratching the surface of formats that XML can be
converted to. Not only is a variety of markup languages supported as
final document formats, but in addition, Java provides libraries for
converting XML to some non-markup-based formats. The most popular and
stable library in this category is the Apache XML group's
Formatting Objects Processor, FOP. This gives Cocoon or any other
publishing framework the ability to turn XML documents into Portable
Document Format (PDF) documents, which are generally viewed with
Adobe Acrobat (<a href="../../../../../../www.adobe.com/">http://www.adobe.com</a>).
</p>

<p>The importance of converting a document from XML into a PDF cannot be
overstated; particularly for document-driven web sites, such as print
media or publishing companies, it could revolutionize web delivery of
data. Consider the following XML document, an XML-formatted excerpt
from this chapter, shown in <a href="ch10_03.htm">Example 10-1</a>.
</p>

<a name="javaxml2-CHP-10-EX-1" /><div class="example">
<h4 class="objtitle">Example 10-1. XML version of Java and XML </h4>
<blockquote><pre class="code">&lt;?xml version="1.0"?&gt;

&lt;?cocoon-process type="xslt"?&gt;
&lt;?xml-stylesheet href="XSL/JavaXML.fo.xsl" type="text/xsl"?&gt;

&lt;book&gt;
 &lt;cover&gt;
  &lt;title&gt;Java and XML&lt;/title&gt;
   &lt;author&gt;Brett McLaughlin&lt;/author&gt;
 &lt;/cover&gt;

 &lt;contents&gt;
  &lt;chapter title="Web Publishing Frameworks" number="10"&gt;
      
   &lt;paragraph&gt; This chapter begins looking at specific Java and XML 
topics. So far, I have covered the basics of using XML from Java, 
looking at the SAX, DOM, JDOM, and JAXP APIs to manipulate XML and the 
fundamentals of using and creating XML itself. Now that you have a grasp 
on using XML from your code, I want to spend time on specific 
applications. The next six chapters represent the most significant 
applications of XML, and, in particular, how those applications are 
implemented in the Java space. While there are literally thousands of 
important applications of XML, the topics in these chapters are those 
that continually seem to be in the spotlight, and that have a significant
potential to change the way traditional development processes occur. 
   &lt;/paragraph&gt;

    &lt;sidebar title="The More Things Change, the More They Stay the Same"&gt;
Readers of the first edition of this book will find that 
much of this chapter on Cocoon is the same as the first edition. Although
I promised you that Cocoon 2 would be out by now, and although I expected
to be writing a chapter on Cocoon 2, things haven't progressed as quickly
as expected. Stefano Mazzochi, the driving force behind Cocoon, finally 
got around to finishing school (good choice, Stefano!), and so 
development on Cocoon 2 has significantly slowed. The result is that 
Cocoon 1.x is still the current development path, and you should stick 
with it for now. I've updated the section on Cocoon 2 to reflect what is 
coming, and you should keep an eye out for more Cocoon-related books from
O'Reilly in the months to come.&lt;/sidebar&gt;

   &lt;paragraph&gt; I'll begin this look at hot topics with the one XML 
application that seems to have generated the largest amount of excitement
in the XML and Java communities: the web publishing framework. Although 
I have continually emphasized that generating presentation from content 
is perhaps over-hyped when compared to the value of the portable data 
that XML provides, using XML for presentation styling is still very 
important. This importance increases when looking at web-based 
applications.&lt;/paragraph&gt;
  &lt;/chapter&gt;

 &lt;/contents&gt;
&lt;/book&gt;</pre></blockquote>
</div>

<p>You saw how an XSL stylesheet allows you to transform this document
into HTML. But converting an entire chapter of a book into HTML could
result in a gigantic HTML document, and certainly an unreadable
format; potential readers wanting online delivery of a book generally
prefer a PDF document. On the other hand, generating PDF statically
from the chapter means that changes to the chapter must be matched
with subsequent PDF file generation. Keeping a single XML document
format means the chapter can be easily updated (with any XML editor),
formatted into SGML for printing hard copy, transferred to other
companies and applications, and included in other books or
compendiums. Now add the ability for web users to type in a URL and
access the book in PDF format to this robust set of features, and you
have a complete publishing system.
</p>

<p>Although I don't cover formatting objects and the FOP for Java
libraries in detail, you can review the entire formatting objects
definition within the <a name="INDEX-1014" /> <a name="INDEX-1015" />XSL
specification at the W3C at <a href="../../../../../../www.w3.org/TR/xsl/">http://www.w3.org/TR/xsl/</a>. <a href="ch10_03.htm">Example 10-2</a> is an XSL stylesheet that uses formatting
objects to specify a transformation from XML to a PDF
docu<a name="INDEX-1016" />
<a name="INDEX-1017" />ment, appropriate for the XML
version of this chapter.
</p>

<a name="javaxml2-CHP-10-EX-2" /><div class="example">
<h4 class="objtitle">Example 10-2. XSL stylesheet for PDF transformation </h4>
<blockquote><pre class="code">&lt;xsl:stylesheet version="1.0"
  xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
  xmlns:fo="http://www.w3.org/1999/XSL/Format"&gt;

  &lt;xsl:template match="book"&gt;
    &lt;xsl:processing-instruction name="cocoon-format"&gt;
      type="text/xslfo"
    &lt;/xsl:processing-instruction&gt;
    &lt;fo:root xmlns:fo="http://www.w3.org/1999/XSL/Format"&gt;
      &lt;fo:layout-master-set&gt;
      &lt;fo:simple-page-master
        master-name="right"
        margin-top="75pt"
        margin-bottom="25pt"
        margin-left="100pt"
        margin-right="50pt"&gt;
        &lt;fo:region-body margin-bottom="50pt"/&gt;
        &lt;fo:region-after extent="25pt"/&gt;
      &lt;/fo:simple-page-master&gt;
      &lt;fo:simple-page-master
        master-name="left"
        margin-top="75pt"
        margin-bottom="25pt"
        margin-left="50pt"
        margin-right="100pt"&gt;
        &lt;fo:region-body margin-bottom="50pt"/&gt;
        &lt;fo:region-after extent="25pt"/&gt;
      &lt;/fo:simple-page-master&gt;
      &lt;fo:page-sequence-master master-name="psmOddEven"&gt;
        &lt;fo:repeatable-page-master-alternatives&gt;
          &lt;fo:conditional-page-master-reference 
              master-name="right" 
              page-position="first"/&gt;
          &lt;fo:conditional-page-master-reference 
              master-name="right" 
              odd-or-even="even"/&gt;
          &lt;fo:conditional-page-master-reference 
              master-name="left" 
              odd-or-even="odd"/&gt;
          &lt;!-- recommended fallback procedure --&gt;
          &lt;fo:conditional-page-master-reference 
              master-name="right"/&gt;
        &lt;/fo:repeatable-page-master-alternatives&gt;
      &lt;/fo:page-sequence-master&gt;
      &lt;/fo:layout-master-set&gt;

      &lt;fo:page-sequence master-name="psmOddEven"&gt;

        &lt;fo:static-content flow-name="xsl-region-after"&gt;
          &lt;fo:block text-align-last="center" font-size="10pt"&gt;
            &lt;fo:page-number/&gt;
          &lt;/fo:block&gt;
        &lt;/fo:static-content&gt;

        &lt;fo:flow flow-name="xsl-region-body"&gt;
          &lt;xsl:apply-templates/&gt;
        &lt;/fo:flow&gt;
      &lt;/fo:page-sequence&gt;

    &lt;/fo:root&gt;
  &lt;/xsl:template&gt;

  &lt;xsl:template match="cover"&gt;
    &lt;fo:block font-size="10pt" 
              space-before.optimum="10pt"&gt;
      &lt;xsl:value-of select="title"/&gt;
      (&lt;xsl:value-of select="author"/&gt;)
    &lt;/fo:block&gt;    
  &lt;/xsl:template&gt;

  &lt;xsl:template match="contents"&gt;
    &lt;xsl:apply-templates/&gt;
  &lt;/xsl:template&gt;

  &lt;xsl:template match="chapter"&gt;
    &lt;fo:block font-size="24pt" 
              text-align-last="center" 
              space-before.optimum="24pt"&gt;
      &lt;xsl:value-of select="@number" /&gt;.
      &lt;xsl:value-of select="@title" /&gt;
      &lt;xsl:apply-templates/&gt;
    &lt;/fo:block&gt;
  &lt;/xsl:template&gt;

  &lt;xsl:template match="paragraph"&gt;
    &lt;fo:block font-size="12pt" 
              space-before.optimum="12pt" 
              text-align="justify"&gt;
      &lt;xsl:apply-templates/&gt;
    &lt;/fo:block&gt;
  &lt;/xsl:template&gt;
  
  &lt;xsl:template match="sidebar"&gt;
    &lt;fo:block font-size="14pt"
              font-style="italic"
              color="blue" 
              space-before.optimum="16pt" 
              text-align="center"&gt;
      &lt;xsl:value-of select="@title" /&gt;
    &lt;/fo:block&gt;
    &lt;fo:block font-size="12pt"
              color="blue" 
              space-before.optimum="16pt" 
              text-align="justify"&gt;
      &lt;xsl:apply-templates/&gt;
    &lt;/fo:block&gt;
  &lt;/xsl:template&gt;  
&lt;/xsl:stylesheet&gt;</pre></blockquote>
</div>

<p>If you create both of these files, saving the chapter as <em class="emphasis">chapterTen.xml</em>, and the XSL stylesheet as
<em class="emphasis">JavaXML.fo.xsl</em> within a
subdirectory called <em class="emphasis">XSL/</em>, you can
see the result of the transformation in a web browser. Make sure you
have the Adobe Acrobat Reader and plug-in for your web browser, and
then access the XML document just created. <a href="ch10_03.htm">Figure 10-4</a> shows the results.<a name="INDEX-1018" />
</p>

<a name="javaxml2-CHP-10-FIG-4" /><div class="figure"><img height="457" alt="Figure 10-4" src="figs/javax_1004.gif" width="481" /></div><h4 class="objtitle">Figure 10-4. PDF transformation result from chapterTen.xml</h4>

</div>
<a name="javaxml2-CHP-10-SECT-3.3" /><div class="sect2">
<h3 class="sect2">10.3.3. Browser-Dependent Styling</h3>

<p>In addition to specifically requesting certain types of
transformations, such as a conversion to a PDF, <a name="INDEX-1019" /> <a name="INDEX-1020" /> <a name="INDEX-1021" />Cocoon allows for dynamic processing to
occur based on the request. A common example of this is applying
different formatting based on the media of the client. In a
traditional web environment, this allows an XML document to be
transformed differently based on the browser being used. A client
using Internet Explorer could be served a different presentation than
a client using Netscape; with the recent wars between versions of
HTML, DHTML, and JavaScript brewing between Netscape and Microsoft,
this is a powerful feature to have available. Cocoon provides
built-in support for many common browser types. Locate the
<em class="emphasis">cocoon.properties</em><a name="INDEX-1022" /> file you referenced earlier, open it, and
scroll to the bottom of the file. You will see the following section
(this may be slightly different for newer versions):
</p>

<blockquote><pre class="code">##########################################
# User Agents (Browsers)                 #
##########################################

# NOTE: numbers indicate the search order. This is VERY VERY IMPORTANT 
# since some words may be found in more than one browser description. 
# (MSIE is presented as "Mozilla/4.0 (Compatible; MSIE 4.01; ...")
#
# for example, the "explorer=MSIE" tag indicates that the XSL stylesheet
# associated to the media type "explorer" should be mapped to those 
# browsers that have the string "MSIE" in their "user-Agent" HTTP header.

browser.0 = explorer=MSIE
browser.1 = pocketexplorer=MSPIE
browser.2 = handweb=HandHTTP
browser.3 = avantgo=AvantGo
browser.4 = imode=DoCoMo
browser.5 = opera=Opera
browser.6 = lynx=Lynx
browser.7 = java=Java
browser.8 = wap=Nokia
browser.9 = wap=UP
browser.10 = wap=Wapalizer
browser.11 = mozilla5=Mozilla/5
browser.12 = mozilla5=Netscape6/
browser.13 = netscape=Mozilla</pre></blockquote>

<p>The keywords after the first equals sign are the items to take note
of: <tt class="literal">explorer</tt>, <tt class="literal">lynx</tt>,
<tt class="literal">java</tt>, and <tt class="literal">mozilla5</tt>, for
example, all differentiate between different user-agents, the codes
the browsers send with requests for URLs. As an example of applying
stylesheets based on this property, you can create a sample XSL
stylesheet to apply when the client accesses the XML table of
contents (<em class="emphasis">contents.xml</em><a name="INDEX-1023" />)
document with Internet Explorer. Copy the original XML-to-HTML
stylesheet, <em class="emphasis">JavaXML.html.xsl</em><a name="INDEX-1024" />,
to <em class="emphasis">JavaXML.explorer-html.xsl</em><a name="INDEX-1025" />.
<a name="INDEX-1026" /> <a name="INDEX-1027" />Then make the
modifications shown in <a href="ch10_03.htm">Example 10-3</a>.
</p>

<a name="javaxml2-CHP-10-EX-3" /><div class="example">
<h4 class="objtitle">Example 10-3. Modified XSL stylesheet for Internet Explorer </h4>
<blockquote><pre class="code">&lt;?xml version="1.0"?&gt;

&lt;xsl:stylesheet xmlns:javaxml2="http://www.oreilly.com/javaxml2"
                xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
                xmlns:ora="http://www.oreilly.com"
                version="1.0"
&gt;

  &lt;xsl:template match="javaxml2:book"&gt;
  &lt;xsl:processing-instruction name="cocoon-format"&gt;
    type="text/html"
  &lt;/xsl:processing-instruction&gt;
    &lt;html&gt;
      &lt;head&gt;
        <tt class="userinput"><b>&lt;title&gt;
          &lt;xsl:value-of select="javaxml2:title" /&gt; (Explorer Version)
        &lt;/title&gt;</b></tt>
      &lt;/head&gt;
      &lt;body&gt;
        &lt;xsl:apply-templates select="*[not(self::javaxml2:title)]" /&gt;
      &lt;/body&gt;
    &lt;/html&gt;
  &lt;/xsl:template&gt;

  &lt;xsl:template match="javaxml2:contents"&gt;
    &lt;center&gt;
     <tt class="userinput"><b>&lt;h2&gt;Table of Contents (Explorer Version)&lt;/h2&gt;
     &lt;small&gt;
       Try &lt;a href="http://www.mozilla.org"&gt;Mozilla&lt;/a&gt; today!
     &lt;/small&gt;</b></tt>
    &lt;/center&gt;
    &lt;!-- Other XSL directives --&gt;
  &lt;/xsl:template&gt;

  &lt;!-- Other XSL template matches --&gt;

&lt;/xsl:stylesheet&gt;</pre></blockquote>
</div>

<p>While this is a trivial example, dynamic HTML could be inserted for
Internet Explorer 5.5, and standard HTML could be used for Netscape
Navigator or Mozilla, which have less DHTML support. With this in
place, you need to let your XML document know that if the media type
(or user-agent) matches up with the explorer type defined in the
properties file, a different XSL stylesheet should be used. The
additional processing instruction shown in <a href="ch10_03.htm">Example 10-4</a> handles this, and can be added to the
<em class="emphasis">contents.xml</em><a name="INDEX-1028" />
file.
</p>

<a name="javaxml2-CHP-10-EX-4" /><div class="example">
<h4 class="objtitle">Example 10-4. Modified contents.xml with media type discernment </h4>
<blockquote><pre class="code">&lt;?xml version="1.0"?&gt;
&lt;!DOCTYPE Book SYSTEM "DTD/JavaXML.dtd"&gt;
&lt;?xml-stylesheet href="XSL/JavaXML.html.xsl" type="text/xsl"?&gt;
&lt;?xml-stylesheet href="XSL/JavaXML.explorer-html.xsl" type="text/xsl"
                 media="explorer"?&gt;

&lt;?cocoon-process type="xslt"?&gt;

&lt;!-- Java and XML Contents --&gt;
&lt;book xmlns="http://www.oreilly.com/javaxml2"
      xmlns:ora="http://www.oreilly.com"
&gt;
  &lt;!-- XML content --&gt;
&lt;/book&gt;</pre></blockquote>
</div>

<p>Accessing the XML in your Netscape browser yields the same results as
before; however, if you access the page in Internet Explorer, you
will see that the document has been transformed with the alternate
stylesheet, and looks like <a href="ch10_03.htm">Figure 10-5</a>.
</p>

<a name="javaxml2-CHP-10-FIG-5" /><div class="figure"><img height="402" alt="Figure 10-5" src="figs/javax_1005.gif" width="481" /></div><h4 class="objtitle">Figure 10-5. contents.xml viewed with Internet Explorer</h4>

</div>
<a name="javaxml2-CHP-10-SECT-3.4" /><div class="sect2">
<h3 class="sect2">10.3.4. WAP and XML</h3>

<p>One of the real powers in this dynamic application of stylesheets
lies in the use of wireless devices. Remember our properties file?
</p>

<blockquote><pre class="code">##########################################
# User Agents (Browsers)                 #
##########################################

# NOTE: numbers indicate the search order. This is VERY VERY IMPORTANT 
# since some words may be found in more than one browser description. 
# (MSIE is presented as "Mozilla/4.0 (Compatible; MSIE 4.01; ...")
#
# for example, the "explorer=MSIE" tag indicates that the XSL stylesheet
# associated to the media type "explorer" should be mapped to those 
# browsers that have the string "MSIE" in their "user-Agent" HTTP header.

browser.0 = explorer=MSIE
browser.1 = pocketexplorer=MSPIE
browser.2 = handweb=HandHTTP
browser.3 = avantgo=AvantGo
browser.4 = imode=DoCoMo
browser.5 = opera=Opera
browser.6 = lynx=Lynx
browser.7 = java=Java<tt class="userinput"><b>
browser.8 = wap=Nokia
browser.9 = wap=UP
browser.10 = wap=Wapalizer</b></tt>
browser.11 = mozilla5=Mozilla/5
browser.12 = mozilla5=Netscape6/
browser.13 = netscape=Mozilla</pre></blockquote>

<p>The highlighted entries detect that a wireless agent, such as an
Internet-capable phone, is being used to access content. Just as
Cocoon detected whether the incoming web browser was Internet
Explorer or Netscape, responding with the correct stylesheet, a WAP
device can be handled by yet another stylesheet. Add another
stylesheet reference in to your <em class="emphasis">contents.xml</em><a name="INDEX-1029" /> document:
</p>

<blockquote><pre class="code">&lt;?xml version="1.0"?&gt;
&lt;!DOCTYPE Book SYSTEM "DTD/JavaXML.dtd"&gt;
&lt;?xml-stylesheet href="XSL/JavaXML.html.xsl" type="text/xsl"?&gt;
&lt;?xml-stylesheet href="XSL/JavaXML.explorer-html.xsl" type="text/xsl"
                 media="explorer"?&gt;<tt class="userinput"><b>
&lt;?xml-stylesheet href="XSL/JavaXML.wml.xsl" type="text/xsl" 
                 media="wap"?&gt;                 </b></tt>

&lt;?cocoon-process type="xslt"?&gt;

&lt;!-- Java and XML Contents --&gt;
&lt;book xmlns="http://www.oreilly.com/javaxml2"
      xmlns:ora="http://www.oreilly.com"
&gt;
  &lt;!-- XML table of contents --&gt;
&lt;/book&gt;</pre></blockquote>

<p>Now you need to create this newly referenced stylesheet for WAP
devices. The <a name="INDEX-1030" />Wireless Markup Language (WML) is
typically used when building a stylesheet for a WAP device. WML is a
variant on HTML, but has a slightly different method of representing
different pages. When a wireless device requests a URL, the returned
response must be within a <tt class="literal">wml</tt> element. In that
root element, several
<em class="filename">cards</em><a name="INDEX-1031" />
can be defined, each through the WML <tt class="literal">card</tt> element.
The device downloads multiple cards at one time (often referred to as
a
<em class="filename">deck</em><a name="INDEX-1032" />)
so that it does not have to go back to the server for the additional
screens. <a href="ch10_03.htm">Example 10-5</a> shows a simple WML page using
these constructs.
</p>

<a name="javaxml2-CHP-10-EX-5" /><div class="example">
<h4 class="objtitle">Example 10-5. Simple WML page </h4>
<blockquote><pre class="code">&lt;wml&gt;
 &lt;card id="index" title="Home Page"&gt;
  &lt;p align="left"&gt;
   &lt;i&gt;Main Menu&lt;/i&gt;&lt;br /&gt;
   &lt;a href="#title"&gt;Title Page&lt;/a&gt;&lt;br /&gt;
   &lt;a href="#myPage"&gt;My Page&lt;/a&gt;&lt;br /&gt;
  &lt;p&gt;
 &lt;/card&gt;

 &lt;card id="title" title="My Title Page"&gt;
  Welcome to my Title Page!&lt;br /&gt;
  So happy to see you.
 &lt;/card&gt;

 &lt;card id="myPage" title="Hello World"&gt;
  &lt;p align="center"&gt;
   Hello World!
  &lt;/p&gt;
 &lt;/card&gt;
&lt;/wml&gt;</pre></blockquote>
</div>

<p>This simple example serves requests with a menu, and two screens
accessed from links within that menu. The complete WML 1.1
specification is available online, along with all other related
<a name="INDEX-1033" /> <a name="INDEX-1034" />WAP
specifications, at <a href="../../../../../../www.wapforum.org/what/technical_1_1.htm">http://www.wapforum.org/what/technical_1_1.htm</a>.
You can also pick up a copy of <em class="citetitle">Learning WML and WML Script</em> by Martin Frost (O'Reilly).
Additionally, the <a name="INDEX-1035" />
<a name="INDEX-1036" />UP.SDK
can be downloaded from <a href="../../../../../../www.phone.com/products/upsdk.html">http://www.phone.com/products/upsdk.html</a>;
this is a software emulation of a wireless device that allows testing
of your WML pages. With this software, you can develop an
<a name="INDEX-1037" />XSL stylesheet to output WML for WAP
devices, and test the results by pointing your UP.SDK browser to
<em class="emphasis">http://&lt;hostname&gt;:&lt;port&gt;/contents.xml</em>.
</p>

<p>Because phone displays are much smaller than computer screens, you
want to show only a subset of the information in our XML table of
contents. <a href="ch10_03.htm">Example 10-6</a> is an XSL stylesheet that
outputs three cards in WML. The first card is a menu with links to
the other two cards. The second card generates a table of contents
listing from our <em class="emphasis">contents.xml</em>
document. The third card is a simple copyright screen. This
stylesheet can be saved as <em class="emphasis">JavaXML.wml.xsl</em><a name="INDEX-1038" />
<a name="INDEX-1039" />
<a name="INDEX-1040" />
in the <em class="emphasis">XSL/</em> subdirectory of your
Cocoon context.
</p>

<a name="javaxml2-CHP-10-EX-6" /><div class="example">
<h4 class="objtitle">Example 10-6. WML stylesheet </h4>
<blockquote><pre class="code">&lt;?xml version="1.0"?&gt;

&lt;xsl:stylesheet version="1.0"                 
                xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
                xmlns:javaxml2="http://www.oreilly.com/javaxml2"
                xmlns:ora="http://www.oreilly.com"
                exclude-result-prefixes="javaxml2 ora"
&gt;

 &lt;xsl:template match="javaxml2:book"&gt;
  &lt;xsl:processing-instruction name="cocoon-format"&gt;
    type="text/wml"
  &lt;/xsl:processing-instruction&gt;

  &lt;wml&gt;
   &lt;card id="index" title="{javaxml2:title}"&gt;
    &lt;p align="center"&gt;
     &lt;i&gt;&lt;xsl:value-of select="javaxml2:title"/&gt;&lt;/i&gt;&lt;br /&gt;
     &lt;a href="#contents"&gt;Contents&lt;/a&gt;&lt;br/&gt;
     &lt;a href="#copyright"&gt;Copyright&lt;/a&gt;&lt;br/&gt;
    &lt;/p&gt;
   &lt;/card&gt;
   
   &lt;xsl:apply-templates select="javaxml2:contents" /&gt;

   &lt;card id="copyright" title="Copyright"&gt;
    &lt;p align="center"&gt;
     Copyright 2000, O&amp;apos;Reilly &amp;amp; Associates
    &lt;/p&gt;
   &lt;/card&gt;
  &lt;/wml&gt;
 &lt;/xsl:template&gt;
 
 &lt;xsl:template match="javaxml2:contents"&gt;
  &lt;card id="contents" title="Contents"&gt;
   &lt;p align="center"&gt;
    &lt;i&gt;Contents&lt;/i&gt;&lt;br /&gt;
    &lt;xsl:for-each select="javaxml2:chapter"&gt;
     &lt;xsl:value-of select="@number" /&gt;.
     &lt;xsl:value-of select="@title" /&gt;&lt;br /&gt;
    &lt;/xsl:for-each&gt;
   &lt;/p&gt;
  &lt;/card&gt;
 &lt;/xsl:template&gt;

&lt;/xsl:stylesheet&gt;</pre></blockquote>
</div>

<p>Other than the WML tags, most of this example should look familiar.
There is also a processing instruction for
<a name="INDEX-1041" />Cocoon, with the target specified
as <tt class="literal">cocoon-format</tt>. The data sent,
<tt class="literal">type="text/wml"</tt>, instructs Cocoon to output this
stylesheet with a content header specifying that the output is
<tt class="literal">text/wml</tt> (instead of the normal
<tt class="literal">text/html</tt> or <tt class="literal">text/plain</tt>). There
is one other important addition, an attribute added to the root
element of the stylesheet:
</p>

<blockquote><pre class="code">&lt;?xml version="1.0"?&gt;

&lt;xsl:stylesheet version="1.0"                 
                xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
                xmlns:javaxml2="http://www.oreilly.com/javaxml2"
                xmlns:ora="http://www.oreilly.com"<tt class="userinput"><b>
                exclude-result-prefixes="javaxml2 ora"</b></tt>
&gt;</pre></blockquote>

<p>By default, any <a name="INDEX-1042" /> <a name="INDEX-1043" />XML
namespace declarations other than the XSL namespace are added to the
root element of the transformation output. In this example, the root
element of the transformed output, <tt class="literal">wml</tt>, would have
the namespace declarations associated with the
<tt class="literal">javaxml2</tt> and <tt class="literal">ora</tt> prefixes added
to it:
</p>

<blockquote><pre class="code">&lt;wml xmlns:javaxml2="http://www.oreilly.com/javaxml2"
     xmlns:ora="http://www.oreilly.com"
&gt;
  &lt;!-- WML content --&gt;
&lt;/wml&gt;</pre></blockquote>

<p>This addition causes a WAP browser to report an error, as
<tt class="literal">xmlns:javaxml2</tt> and <tt class="literal">xmlns:ora</tt>
are not allowed attributes for the <tt class="literal">wml</tt> element.
WAP browsers are not as forgiving as HTML browsers, and the rest of
the WML content would not be shown. However, you must declare the
namespace so the XSL stylesheet can handle template matching for the
input document, which does use the
<tt class="literal">javaxml</tt>-associated namespace. To handle this
problem, XSL allows the attribute
<tt class="literal">exclude-result-prefixes</tt><a name="INDEX-1044" />
to be added to the
<tt class="literal">xsl:stylesheet</tt><a name="INDEX-1045" /> element. The namespace prefix specified
to this attribute will not be added to the transformed output, which
is exactly what you want. Your output would now look like this:
</p>

<blockquote><pre class="code">&lt;wml&gt;
  &lt;!-- WML content --&gt;
&lt;/wml&gt;</pre></blockquote>

<p>This is understood perfectly by a WAP browser. If you've
downloaded the UP.SDK browser, you can point it to your XML table of
contents, and see the results. <a href="ch10_03.htm">Figure 10-6</a> shows the
main menu that results from the transformation using the WML
stylesheet when a WAP device requests the <em class="emphasis">contents.xml</em> file through Cocoon.
</p>

<a name="javaxml2-CHP-10-FIG-6" /><div class="figure"><img height="450" alt="Figure 10-6" src="figs/javax_1006.gif" width="170" /></div><h4 class="objtitle">Figure 10-6. Main menu for Java and XML</h4>
<blockquote><b>WARNING:</b> 

In the UP.SDK browser versions that I tested, the browser would not resolve the entity reference <tt class="literal">OReillyCopyright</tt>. I had to comment this line out in my XML to make the examples work. You will probably have to do the same, until the simulator fixes this bug.
</p>
</blockquote>
<p><a href="ch10_03.htm">Figure 10-7</a> shows the generated table of contents,
accessed by clicking the "Link" button when the
"Contents" link is indicated in the display.
</p>

<a name="javaxml2-CHP-10-FIG-7" /><div class="figure"><img height="450" alt="Figure 10-7" src="figs/javax_1007.gif" width="186" /></div><h4 class="objtitle">Figure 10-7. WML table of contents</h4>

<p>Visit <a href="../../../../../../www.openwave.com/">http://www.openwave.com</a> and <a href="../../../../../../www.wapforum.org/">http://www.wapforum.org</a> for more information
on <a name="INDEX-1046" /> <a name="INDEX-1047" />WML and
<a name="INDEX-1048" /> <a name="INDEX-1049" />WAP; both
sites have extensive online resources for wireless device
development.
</p>

<p>By now, you should have a pretty good idea of the variety of output
that can be created with Cocoon. With a minimal amount of effort and
an extra stylesheet, the same XML document can be served in multiple
formats to multiple types of clients; this is one of the reasons the
web publishing framework is such a powerful tool. Without XML and a
framework like this, separate sites would have to be created for each
type of client. Now that you have seen how flexible the generation of
output is when using Cocoon, I will move on to how Cocoon provides
technology that allows for dynamic creation and customization of the
input to these transformations.<a name="INDEX-1050" /> <a name="INDEX-1051" /><a name="INDEX-1052" /> <a name="INDEX-1053" /> <a name="INDEX-1054" /> 
</p>

</div>


<hr width="684" align="left" />
<div class="navbar"><table width="684" border="0"><tr><td align="left" valign="top" width="228"><a href="ch10_02.htm"><img alt="Previous" border="0" src="../gifs/txtpreva.gif" /></a></td><td align="center" valign="top" width="228"><a href="index.htm"><img alt="Home" border="0" src="../gifs/txthome.gif" /></a></td><td align="right" valign="top" width="228"><a href="ch10_04.htm"><img alt="Next" border="0" src="../gifs/txtnexta.gif" /></a></td></tr><tr><td align="left" valign="top" width="228">10.2. Installation</td><td align="center" valign="top" width="228"><a href="index/index.htm"><img alt="Book Index" border="0" src="../gifs/index.gif" /></a></td><td align="right" valign="top" width="228">10.4. XSP</td></tr></table></div>
<hr width="684" align="left" />

<img alt="Library Navigation Links" border="0" src="../gifs/navbar.gif" usemap="#library-map" />
<p><p><font size="-1"><a href="copyrght.htm">Copyright &copy; 2002</a> O'Reilly &amp; Associates. All rights reserved.</font></p>

<map name="library-map">
<area shape="rect" coords="0,0,85,93" href="../index.htm"><area shape="rect" coords="85,0,180,98" href="../sax2/index.htm"><area shape="rect" coords="182,-1,261,100" href="../xmlnut/index.htm"><area shape="rect" coords="263,1,384,96" href="index.htm"><area shape="rect" coords="386,1,463,100" href="../jxslt/index.htm"><area shape="rect" coords="466,1,533,112" href="../xslt/index.htm"><area shape="rect" coords="535,-1,610,108" href="../schema/index.htm"><area shape="rect" coords="613,1,696,121" href="../pxml/index.htm">
</map>

</body></html>