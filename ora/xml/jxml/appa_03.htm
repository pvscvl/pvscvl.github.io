<html><head><title>JAXP 1.1 (Java &amp; XML, 2nd Edition)</title><link rel="stylesheet" type="text/css" href="../style/style1.css" />

<meta name="DC.Creator" content="Brett McLaughlin" /><meta name="DC.Format" content="text/xml" scheme="MIME" /><meta name="DC.Language" content="en-US" /><meta name="DC.Publisher" content="O'Reilly &amp; Associates, Inc." /><meta name="DC.Source" scheme="ISBN" content="059600197L" /><meta name="DC.Subject.Keyword" content="stuff" /><meta name="DC.Title" content="Java &amp; XML, 2nd Edition" /><meta name="DC.Type" content="Text.Monograph" />

</head><body bgcolor="#ffffff">

<img alt="Book Home" border="0" src="gifs/smbanner.gif" usemap="#banner-map" /><map name="banner-map"><area shape="rect" coords="1,-2,616,66" href="index.htm" alt="Java and XML, 2nd Edition" /><area shape="rect" coords="629,-11,726,25" href="jobjects/fsearch.htm" alt="Search this book" /></map>

<div class="navbar"><table width="684" border="0"><tr><td align="left" valign="top" width="228"><a href="appa_02.htm"><img alt="Previous" border="0" src="../gifs/txtpreva.gif" /></a></td><td align="center" valign="top" width="228"></td><td align="right" valign="top" width="228"><a href="appa_04.htm"><img alt="Next" border="0" src="../gifs/txtnexta.gif" /></a></td></tr></table></div>



<h2 class="sect1">A.3. JAXP 1.1</h2>

<p><a name="INDEX-1586" />JAXP provides an abstraction layer over
the process of getting a vendor's implementation of a SAX or
DOM parser, as well as providing transformations in a vendor-neutral
way.
</p>

<a name="javaxml2-APP-A-SECT-3.1" /><div class="sect2">
<h3 class="sect2">A.3.1. Package: javax.xml.parsers</h3>

<p><a name="INDEX-1587" />This is the single
<a name="INDEX-1588" />package
used in JAXP, and details the classes needed for the JAXP abstraction
and pluggability layer over XML parsing.
</p>

<a name="javaxml2-APP-A-SECT-3.1.1" /><div class="sect3">
<h3 class="sect3">A.3.1.1. DocumentBuilder</h3>

<p><a name="INDEX-1589" />
<a name="INDEX-1590" />This
class is the wrapper over an underlying parser implementation class.
It allows parsing to occur in a vendor-neutral way.
</p>

<blockquote><pre class="code">public abstract class DocumentBuilder {
    public Document parse(InputStream stream)
        throws SAXException, IOException, IllegalArgumentException;
    public Document parse(InputStream stream, String systemID)
        throws SAXException, IOException, IllegalArgumentException;
    public Document parse(String uri)
        throws SAXException, IOException, IllegalArgumentException;
    public Document parse(File file)
        throws SAXException, IOException, IllegalArgumentException;
    public abstract Document parse(InputSource source)
        throws SAXException, IOException, IllegalArgumentException;

    public abstract Document newDocument( );
    public abstract boolean isNamespaceAware( );
    public abstract boolean isValidating( );
    public abstract void setEntityResolver(EntityResolver er);
    public abstract void setErrorHandler(ErrorHandler eh);
    public DOMmplementation getDOMImplementation( );
}</pre></blockquote>

</div>

<a name="javaxml2-APP-A-SECT-3.1.2" /><div class="sect3">
<h3 class="sect3">A.3.1.2. DocumentBuilderFactory</h3>

<p><a name="INDEX-1591" />
<a name="INDEX-1592" />This
class is the factory used to create instances of the
<tt class="literal">DocumentBuilder</tt> class, and allows namespace and
validation features to be set for the production of those instances.
</p>

<blockquote><pre class="code">public abstract class DocumentBuilderFactory {
    public static DocumentBuilderFactory newInstance( );
    public abstract DocumentBuilder newDocumentBuilder( )
        throws ParserConfigurationException;

    public void setAttribute(String name, Object value);
    public void setCoalescing(boolean coalescing);
    public void setExpandEntityReferences(boolean expand);
    public void setIgnoringComments(boolean ignoreComments);
    public void setIgnoringElementContentWhitespace(boolean ignoreWhitespace);
    public void setNamespaceAware(boolean aware);
    public void setValidating(boolean validating);

    public boolean isCoalescing( );
    public boolean isExapandEntityReferences( );
    public boolean isIgnoringComments( );
    public boolean isIgnoreingElementContentWhitespace( );
    public boolean isNamespaceAware( );
    public boolean isValidating( );
    public Object getAttribute(String name);
}</pre></blockquote>

</div>

<a name="javaxml2-APP-A-SECT-3.1.3" /><div class="sect3">
<h3 class="sect3">A.3.1.3. FactoryConfigurationError </h3>

<p><a name="INDEX-1593" />
<a name="INDEX-1594" />This
defines an <tt class="literal">Error</tt> that is thrown if a factory
instance cannot be created.
</p>

<blockquote><pre class="code">public class FactoryConfigurationException extends Error {
    public FactoryConfigurationError( );
    public FactoryConfigurationError(String msg);
    public FactoryConfigurationError(Exception e);
    public FactoryConfigurationError(Exception e, String msg);
}</pre></blockquote>

</div>

<a name="javaxml2-APP-A-SECT-3.1.4" /><div class="sect3">
<h3 class="sect3">A.3.1.4. ParserConfigurationException </h3>

<p><a name="INDEX-1595" />
<a name="INDEX-1596" />This
defines an <tt class="literal">Exception</tt> that is thrown if a parser is
requested but cannot be constructed with the specified validation and
namespace-awareness settings.
</p>

<blockquote><pre class="code">public class ParserConfigurationException extends Exception {
    public ParserConfigurationException( );
    public ParserConfigurationException(String msg);
}</pre></blockquote>

</div>

<a name="javaxml2-APP-A-SECT-3.1.5" /><div class="sect3">
<h3 class="sect3">A.3.1.5. SAXParser</h3>

<p><a name="INDEX-1597" />
<a name="INDEX-1598" />This
class is the wrapper over an underlying SAX 1.0/2.0 parser
implementation class, and allows parsing to occur in a vendor-neutral
way. It essentially has a pair of each method: one for SAX 1.0, and
one for SAX 2.0.
</p>

<blockquote><pre class="code">public abstract class SAXParser {
    public void parse(InputStream stream, HandlerBase base)
        throws SAXException, IOException, IllegalArgumentException;
    public void parse(InputStream stream, HandlerBase base, String systemID)
        throws SAXException, IOException, IllegalArgumentException;
    public void parse(String uri, HandlerBase base)
        throws SAXException, IOException, IllegalArgumentException;
    public void parse(File file, HandlerBase base)
        throws SAXException, IOException, IllegalArgumentException;
    public void parse(InputSource source, HandlerBase base)
        throws SAXException, IOException, IllegalArgumentException;

    public void parse(InputStream stream, DefaultHandler dh)
        throws SAXException, IOException, IllegalArgumentException;
    public void parse(InputStream stream, DefaultHandler dh, String systemID)
        throws SAXException, IOException, IllegalArgumentException;
    public void parse(String uri, DefaultHandler dh)
        throws SAXException, IOException, IllegalArgumentException;
    public void parse(File file, DefaultHandler dh)
        throws SAXException, IOException, IllegalArgumentException;
    public void parse(InputSource source, DefaultHandler dh)
        throws SAXException, IOException, IllegalArgumentException;

    public Parser getParser( ) throws SAXException;
    public XMLReader getXMLReader( ) throws SAXException;

    public Object getProperty(String name);
    public void setProperty(String name, Object value);
    public boolean isNamespaceAware( );
    public boolean isValidating( );
}</pre></blockquote>

</div>

<a name="javaxml2-APP-A-SECT-3.1.6" /><div class="sect3">
<h3 class="sect3">A.3.1.6. SAXParserFactory</h3>

<p><a name="INDEX-1599" />
<a name="INDEX-1600" />This
class is the factory used to create instances of the
<tt class="literal">SAXParser</tt> class, and allows namespace and
validation features to be set for the production of those instances.
</p>

<a name="INDEX-1601" /><blockquote><pre class="code">public abstract class SAXParserFactory {
    public static SAXParserFactory newInstance( );
    public SAXParser newSAXParser( )
        throws ParserConfigurationException, SAXException;

    public void setNamespaceAware(boolean aware);
    public void setValidating(boolean validating);
    public void setFeature(String name, boolean value);
    public boolean isNamespaceAware( );
    public boolean isValidating( );
    public boolean getFeature(String name);
}</pre></blockquote>

</div>
</div>
<a name="javaxml2-APP-A-SECT-3.2" /><div class="sect2">
<h3 class="sect2">A.3.2. Package: javax.xml.transform</h3>

<p><a name="INDEX-1602" />This is the
<a name="INDEX-1603" />package
used in JAXP for transforming XML documents. It allows these
transformations to be pluggable and vendor-neutral, provided they use
the TrAX (Transformations API for XML) interfaces defined here.
</p>

<a name="javaxml2-APP-A-SECT-3.2.1" /><div class="sect3">
<h3 class="sect3">A.3.2.1. ErrorListener</h3>

<p><a name="INDEX-1604" />
<a name="INDEX-1605" />This
interface is analogous to <tt class="literal">ErrorHandler</tt> in SAX, and
provides error notification for transformations. Implement it in your
own applications using TrAX.
</p>

<blockquote><pre class="code">public interface ErrorListener {
    public void warning(TransformerException exception);
    public void error(TransformerException exception);
    public void fatalError(TransformerException exception);
}</pre></blockquote>

</div>

<a name="javaxml2-APP-A-SECT-3.2.2" /><div class="sect3">
<h3 class="sect3">A.3.2.2. OutputKeys</h3>

<p><a name="INDEX-1606" />
<a name="INDEX-1607" />This
class is just a holder for several static constants used in the rest
of the TrAX API.
</p>

<blockquote><pre class="code">public class OutputKeys {
    public static final String CDATA_SECTION_ELEMENTS;
    public static final String DOCTYPE_PUBLIC;
    public static final String DOCTYPE_SYSTEM;
    public static final String ENCODING;
    public static final String INDENT;
    public static final String MEDIA_TYPE;
    public static final String METHOD;
    public static final String OMIT_XML_DECLARATION;
    public static final String STANDALONE;
    public static final String VERSION;
}</pre></blockquote>

</div>

<a name="javaxml2-APP-A-SECT-3.2.3" /><div class="sect3">
<h3 class="sect3">A.3.2.3. Result</h3>

<p><a name="INDEX-1608" />
<a name="INDEX-1609" />This
interface provides for output of XML transformations. Default
implementations of this interface are provided in the JAXP
<tt class="literal">javax.xml.transform.*</tt> packages.
</p>

<blockquote><pre class="code">public interface Result {
    public static final String PI_DISABLE_OUTPUT_ESCAPING;
    public static final String PI_ENABLE_OUTPUT_ESCAPING;

    public String getSystemId( );
    public void setSystemId( );
}</pre></blockquote>

</div>

<a name="javaxml2-APP-A-SECT-3.2.4" /><div class="sect3">
<h3 class="sect3">A.3.2.4. Source</h3>

<p><a name="INDEX-1610" />
<a name="INDEX-1611" />This
interface provides for input of XML transformations. Default
implementations of this interface are provided in the JAXP
<tt class="literal">javax.xml.transform.*</tt> packages.
</p>

<blockquote><pre class="code">public interface Source {
    public String getSystemId( );
    public void setSystemId( );
}</pre></blockquote>

</div>

<a name="javaxml2-APP-A-SECT-3.2.5" /><div class="sect3">
<h3 class="sect3">A.3.2.5. SourceLocator</h3>

<p><a name="INDEX-1612" />
<a name="INDEX-1613" />This
interface is analogous to the SAX <tt class="literal">Locator</tt>
interface, and details location information about an input to TrAX.
Like <tt class="literal">ErrorListener</tt>, it's most useful in
error handling and reporting.
</p>

<blockquote><pre class="code">public interface SourceLocator {
    public int getColumnNumber( );
    public int getLineNumber( );
    public String getPublicId( );
    public String getSystemId( );
}</pre></blockquote>

</div>

<a name="javaxml2-APP-A-SECT-3.2.6" /><div class="sect3">
<h3 class="sect3">A.3.2.6. Templates</h3>

<p><a name="INDEX-1614" />
<a name="INDEX-1615" />This
interface is provided to perform a means of optimal transformations
using the same stylesheet. Its only methods allow for generation of
<tt class="literal">Transformer</tt> instances, and viewing its current set
of output properties.
</p>

<blockquote><pre class="code">public interface Tempaltes {
    public Properties getOutputProperties( );
    public Transformer newTransformer( );
}</pre></blockquote>

</div>

<a name="javaxml2-APP-A-SECT-3.2.7" /><div class="sect3">
<h3 class="sect3">A.3.2.7. Transformer</h3>

<p><a name="INDEX-1616" />
<a name="INDEX-1617" />This
is the core (abstract) class for providing XML transformation
facilities through TrAX and JAXP. In addition to setting the various
properties and objects on the interface, you can perform the actual
transformation with the <tt class="literal">transform( )</tt> method.
</p>

<blockquote><pre class="code">public class Transformer {
    public void setErrorListener(ErrorListener errorListener);
    public ErrorListener getErrorListener( );
    public void setURIResolver(URIResolver resolver);
    public URIResolver getURIResolver( );

    public void setOutputProperties(Properties properties);
    public Properties getOutputProperties( );
    public void setOutputProperty(String name, String value);
    public String getOutputProperty(String name);
    public void clearParmaters( );
    public void setParameter(String name, String value);
    public Object getParameter(String name);

    public void transform(Source xmlSource, Result outputTarget);
}</pre></blockquote>

</div>

<a name="javaxml2-APP-A-SECT-3.2.8" /><div class="sect3">
<h3 class="sect3">A.3.2.8. TransformerFactory</h3>

<p><a name="INDEX-1618" />
<a name="INDEX-1619" />This
is the other "half" of the transformation engine in JAXP.
You can specify the stylesheet to use for transformation, and then
obtain new instances of a <tt class="literal">Transformer</tt> instance.
You can also use this to generate a new <tt class="literal">Templates</tt>
object for multiple transformations using the same stylesheet.
</p>

<blockquote><pre class="code">public class TransformerFactory {
    public TransformerFactory newInstance( );
    public Transformer newTemplates(Source stylesheet);
    public Transformer newTransformer(Source stylesheet);
    public Transformer newTransformer( );

    public Source getAssociatedStylesheet(Source source, String media, 
                                          String title, String charset);
    public ErrorListener getErrorListener( );
    public void setErrorListener(ErrorListener errorListener);
    public URIResolver getURIResolver( );
    public void setURIResolver(URIResolver uriResolver);
    public Object getAttribute(String name);
    public void setAttribute(String name, String value);
    public boolean getFeature(String name);
}</pre></blockquote>

</div>

<a name="javaxml2-APP-A-SECT-3.2.9" /><div class="sect3">
<h3 class="sect3">A.3.2.9. URIResolver</h3>

<p><a name="INDEX-1620" />
<a name="INDEX-1621" />This
is the interface responsible for URI resolution, and is analogous to
the SAX <tt class="literal">EntityResolver</tt> interface.
</p>

<a name="INDEX-1622" /><blockquote><pre class="code">public interface URIResolver {
    public Source resolve(String href, String base);
}</pre></blockquote>

</div>
</div>
<a name="javaxml2-APP-A-SECT-3.3" /><div class="sect2">
<h3 class="sect2">A.3.3. Package: javax.xml.transform.dom</h3>

<p><a name="INDEX-1623" />This
<a name="INDEX-1624" />package
provides two classes:
<tt class="literal">DOMResult</tt><a name="INDEX-1625" />
<a name="INDEX-1626" />
and <tt class="literal">DOMSource</tt><a name="INDEX-1627" />
<a name="INDEX-1628" />.
These are implementations of the <tt class="literal">Result</tt> and
<tt class="literal">Source</tt> interfaces, and are used when DOM trees
should be the input and output of a transformation. Because these are
simple implementation classes, their methods are not detailed here;
however, their usage is covered in detail in <a href="ch09_01.htm">Chapter 9, "JAXP"</a>. 
</p>

</div>
<a name="javaxml2-APP-A-SECT-3.4" /><div class="sect2">
<h3 class="sect2">A.3.4. Package: javax.xml.transform.sax</h3>

<p><a name="INDEX-1629" />This
<a name="INDEX-1630" />package
provides two classes: <tt class="literal">SAXResult</tt> and
<tt class="literal">SAXSource</tt>. These are implementations of the
<tt class="literal">Result</tt> and <tt class="literal">Source</tt> interfaces,
and are used when SAX events should be the input and output of a
transformation. Because these are simple implementation classes,
their methods are not detailed here; however, their usage is covered
in detail in <a href="ch09_01.htm">Chapter 9, "JAXP"</a>.
</p>

</div>
<a name="javaxml2-APP-A-SECT-3.5" /><div class="sect2">
<h3 class="sect2">A.3.5. Package: javax.xml.transform.stream</h3>

<p>This
<a name="INDEX-1631" />package
provides two classes: <tt class="literal">StreamResult</tt> and
<tt class="literal">StreamSource</tt>. These are implementations of the
<tt class="literal">Result</tt> and <tt class="literal">Source</tt> interfaces,
and are used when I/O streams should be the input and output of a
transformation. Because these are simple implementation classes,
their methods are not detailed here; however, their usage is covered
in detail in <a href="ch09_01.htm">Chapter 9, "JAXP"</a>.<a name="INDEX-1632" />
</p>

</div>


<hr width="684" align="left" />
<div class="navbar"><table width="684" border="0"><tr><td align="left" valign="top" width="228"><a href="appa_02.htm"><img alt="Previous" border="0" src="../gifs/txtpreva.gif" /></a></td><td align="center" valign="top" width="228"><a href="index.htm"><img alt="Home" border="0" src="../gifs/txthome.gif" /></a></td><td align="right" valign="top" width="228"><a href="appa_04.htm"><img alt="Next" border="0" src="../gifs/txtnexta.gif" /></a></td></tr><tr><td align="left" valign="top" width="228">A.2. DOM Level 2</td><td align="center" valign="top" width="228"><a href="index/index.htm"><img alt="Book Index" border="0" src="../gifs/index.gif" /></a></td><td align="right" valign="top" width="228">A.4. JDOM 1.0 </td></tr></table></div>
<hr width="684" align="left" />

<img alt="Library Navigation Links" border="0" src="../gifs/navbar.gif" usemap="#library-map" />
<p><p><font size="-1"><a href="copyrght.htm">Copyright &copy; 2002</a> O'Reilly &amp; Associates. All rights reserved.</font></p>

<map name="library-map">
<area shape="rect" coords="0,0,85,93" href="../index.htm"><area shape="rect" coords="85,0,180,98" href="../sax2/index.htm"><area shape="rect" coords="182,-1,261,100" href="../xmlnut/index.htm"><area shape="rect" coords="263,1,384,96" href="index.htm"><area shape="rect" coords="386,1,463,100" href="../jxslt/index.htm"><area shape="rect" coords="466,1,533,112" href="../xslt/index.htm"><area shape="rect" coords="535,-1,610,108" href="../schema/index.htm"><area shape="rect" coords="613,1,696,121" href="../pxml/index.htm">
</map>

</body></html>