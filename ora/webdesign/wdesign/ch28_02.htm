<html><head><title>JavaScript Basics (Web Design in a Nutshell, 2nd Edition)</title><link rel="stylesheet" type="text/css" href="style/style1.css" />

<meta name="DC.Creator" content="Jennifer Niederst" /><meta name="DC.Format" content="text/xml" scheme="MIME" /><meta name="DC.Language" content="en-US" /><meta name="DC.Publisher" content="O'Reilly &amp; Associates, Inc." /><meta name="DC.Source" scheme="ISBN" content="0596001967L" /><meta name="DC.Subject.Keyword" content="stuff" /><meta name="DC.Title" content="Web Design in a Nutshell, 2nd Edition" /><meta name="DC.Type" content="Text.Monograph" />

</head><body bgcolor="#ffffff">

<img alt="Book Home" border="0" src="gifs/smbanner.gif" usemap="#banner-map" /><map name="banner-map"><area shape="rect" coords="1,-2,616,66" href="index.htm" alt="Web Design in a Nutshell" /><area shape="rect" coords="629,-11,726,25" href="jobjects/fsearch.htm" alt="Search this book" /></map>

<div class="navbar"><table cellpadding=3 width="684" border="0"><tr><td align="left" valign="top" width="228"><a href="ch28_01.htm"><img alt="Previous" border="0" src="../gifs/txtpreva.gif" /></a></td><td align="center" valign="top" width="228"><a href="index.htm">Web Design in a Nutshell, 2nd Edition</a></td><td align="right" valign="top" width="228"><a href="ch28_03.htm"><img alt="Next" border="0" src="../gifs/txtnexta.gif" /></a></td></tr></table></div>
<hr width="684" align="left" />


<h2 class="sect1">28.2. JavaScript Basics</h2>

<p><a name="INDEX-2860" />JavaScript code is usually placed directly
in an HTML document. The code can go in either the head or the body,
and there can be numerous scripts in a single HTML document.
Here's the syntax:
</p>

<blockquote><pre class="code">&lt;SCRIPT LANGUAGE="JavaScript"&gt; 
&lt;!--
script goes here 
//--&gt;
&lt;/SCRIPT&gt;</pre></blockquote>

<p>The <tt class="literal">&lt;script&gt;</tt> tags define the boundaries of
the script and set the scripting language to JavaScript. The
<tt class="literal">language</tt> attribute is necessary to distinguish
JavaScript from other scripting languages, like VBScript, that can
also be embedded in web pages. Finally, HTML comments surround the
script to hide the code from really old browsers that don't
understand the <tt class="literal">&lt;script&gt;</tt> tag. Otherwise,
those browsers would just display the code like preformatted text,
which isn't very pretty.
</p>

<a name="wdnut2-CHP-28-SECT-2.1" /><div class="sect2">
<h3 class="sect2">28.2.1. Functions</h3>

<p>There<a name="INDEX-2861" /> are two parts to most JavaScript
applications: the functions that tell the browser what to do, and
actual uses of these functions. Let's take the example of a
simple web page that displays a linked document in a second window:
</p>

<blockquote><pre class="code">&lt;HTML&gt; 
&lt;HEAD&gt;
&lt;SCRIPT LANGUAGE="JavaScript"&gt; 
&lt;!--
function openWin(URL) { 
    aWindow = window.open(URL,"composerwindow","toolbar=no,width=350,
height=400,status=no,scrollbars=yes,resize=no,menubar=no"); 
} 
//--&gt; 
&lt;/SCRIPT&gt; 
&lt;/HEAD&gt; 

&lt;BODY&gt; 
&lt;P&gt;&lt;A HREF="javascript:openWin('mozart.html');"&gt;Mozart&lt;/A&gt;&lt;/P&gt; 
&lt;P&gt;&lt;A HREF="javascript:openWin('beethoven.html');"&gt;Beethoven&lt;/A&gt;&lt;/P&gt; 
&lt;P&gt;&lt;A HREF="javascript:openWin('wagner.html');"&gt;Wagner&lt;/A&gt;&lt;/P&gt; 
&lt;/BODY&gt; 
&lt;/HTML&gt;</pre></blockquote>

<p>The JavaScript inside the
<tt class="literal">&lt;script&gt;</tt><a name="INDEX-2862" /> tags defines a function, called
<tt class="literal">openWin( )</tt>, that tells the browser what to do when
the function is called. Now look at the body of the document. The
<tt class="literal">openWin( )</tt><a name="INDEX-2863" /> function is being called
from the anchor tags. Let's take a look at one of those lines:
</p>

<blockquote><pre class="code">&lt;A HREF="javascript:openWin('mozart.html');"&gt;Mozart&lt;/A&gt;</pre></blockquote>

<p>The line starts off as a normal <tt class="literal">&lt;a</tt>
<tt class="literal">href&gt;</tt> tag. But the value of
<tt class="literal">href</tt> is not a standard URL; it's a call to a
JavaScript function. The word <tt class="literal">javascript:</tt> tells
the browser that the link contains JavaScript code. In this case,
that code is a call to the <tt class="literal">openWin( )</tt> function,
which was defined up in the head of the document. Since the
JavaScript call is in a link, the function is run when the user
clicks on the link (the word "Mozart"). The content in
parentheses -- <tt class="literal">mozart.html--</tt>specifies a value
that is passed to the <tt class="literal">openWin( )</tt> function.
We'll see what passing is all about when we look at the
function. The rest of the line is a standard link -- the hypertext
and the closing anchor tag.
</p>

<p>Now let's look at the <tt class="literal">openWin( )</tt><tt class="command">
</tt>function:
</p>

<blockquote><pre class="code">function openWin(URL) { 
    aWindow = window.open(URL,"composerwindow","toolbar=no,width=350,
height=400,status=no,scrollbars=yes,resize=no,menubar=no"); 
}</pre></blockquote>

<p>The first line of code declares a new function with the name
<tt class="literal">openWin( )</tt>; this declaration is simply a way of
giving a name to a set of instructions for the browser. The set of
parentheses indicates that the function takes
<em class="emphasis">arguments</em>, and the names of the arguments are
listed inside the parentheses. Arguments are information that must be
given to a function when it is called; the function uses this
information to perform its job. In this example, the
<tt class="literal">openWin( )</tt> function takes one argument, a URL, and
uses the URL to open a new window that displays the page at that
location.
</p>

<p>After the function declaration comes an opening curly bracket
(<tt class="literal">{</tt>). You'll see the closing curly bracket
(<tt class="literal">}</tt>) on the last line. Everything between these
curly brackets is the code that is run each time the function is
called.
</p>

<p>The two lines of code are actually one line that runs longer than the
printable area of this page. The line starts by creating a new
<em class="emphasis">variable</em><a name="INDEX-2864" />. A variable is just a name that is
associated with a piece of information. In this case, we're
putting the result of some window-opening code into the variable
called <tt class="literal">aWindow</tt>. The window-opening code returns
information about the window it opened, so if we wanted to do
something else to the window later, like close it, we could use
<tt class="literal">aWindow</tt> to refer to that specific window. More
commonly, variables are used to store information about the current
state of the page or the user environment, such as the browser being
used or the user's name.
</p>

<p>The window-opening code calls the <tt class="literal">window.open(
)</tt><a name="INDEX-2865" /> function, which is a predefined
function that is built into JavaScript. It provides a standard way to
open a new window and lets you specify a bunch of information about
the window to be opened. There are three arguments for
<tt class="literal">window.open( )</tt>: the URL of the document to be
displayed in the window, the name of the window, and the
characteristics of the window. Note that when we call
<tt class="literal">window.open( )</tt>, we're not specifying an
actual URL, but instead using the <tt class="literal">URL</tt> argument
that is passed into the <tt class="literal">openWin( )</tt> function. Thus,
when we specify the URL <em class="emphasis">mozart.html</em> in the
anchor tag, that URL gets passed first to the <tt class="literal">openWin(
)</tt> function and then to the <tt class="literal">window.open(
)</tt> function, which results in that document being displayed
in the new window.
</p>

<p>The second argument to <tt class="literal">window.open( )</tt>,
<tt class="literal">"composerwindow"</tt>, is a string that indicates the
name of the new window. A string is simply a collection of characters
surrounded by single or double quotes. The final argument is another
string that specifies the characteristics of the window: the
window's size is 350 by 400; it has scrollbars but no tool bar,
status bar, or menu bar; and it cannot be resized by the user. Note
that no spaces or carriage returns are permitted inside the string
for this final argument.
</p>

<p>Now that you understand all the code here, let's review what
happens when the user clicks on the links. When a user clicks the
Mozart link, the <tt class="literal">openWin( )</tt> code runs, passing the
URL <em class="emphasis">mozart.html</em> to the function
<tt class="literal">window.open( )</tt>, which opens a new 350 <img src="figs/U00D7.gif"> 400
window that displays the document at that URL. When the user clicks
the Beethoven link, the same function runs, but the code passes the
<em class="emphasis">beethoven.html</em> URL to the function, and that
document is<a name="INDEX-2866" /> displayed in the window.
</p>

</div>
<a name="wdnut2-CHP-28-SECT-2.2" /><div class="sect2">
<h3 class="sect2">28.2.2. Event Handlers</h3>

<p>In<a name="INDEX-2867" /> the previous example, the
JavaScript function was triggered when the user clicked on an
ordinary link. JavaScript code can also be triggered by more subtle
user actions, such as moving the mouse over an element on the page
(commonly called a "rollover"), or by browser actions,
such as the loading of a page. These actions are called
<em class="emphasis">events</em>. In JavaScript, you tie specific
functionality to events with <em class="emphasis">event handlers</em>. An
event handler simply watches for a predefined event and executes some
code when it occurs. This response to user action is the foundation
of interactivity.
</p>

<p>In the following example, the
<tt class="literal">onMouseOver</tt><a name="INDEX-2868" /> event handler triggers a
function called<a name="INDEX-2869" /> <tt class="literal">turnOn( )</tt> when the
user passes the mouse over the image on the page:
</p>

<blockquote><pre class="code">&lt;img src="button_off.gif" onMouseOver="turnOn(  );"&gt;</pre></blockquote>

<p>The <tt class="literal">turnOn( )</tt> function gives the browser
instructions to swap out the <em class="emphasis">button_off.gif</em>
image with another one. This kind of code is the basis of the
rollover buttons that are so popular on the Web today. Rollover
scripts are discussed in detail in <a href="ch28_03.htm">Section 28.3, "Sample Scripts"</a> of this chapter.
</p>

<p><a href="ch28_02.htm">Table 28-1</a> contains a complete list of event
handlers recognized by the different versions of JavaScript.
</p>

<a name="wdnut2-CHP-28-TABLE-1" /><h4 class="objtitle">Table 28-1. JavaScript event handlers </h4><table cellpadding=3 border="1">



<tr>
<th>
<p>Event handler</p>
</th>
<th>
<p>Supported by</p>
</th>
</tr>


<tr>
<td>
<p><tt class="literal">onAbort</tt><a name="INDEX-2870" />
</p>
</td>
<td>
<p>Images (1.1)</p>
</td>
</tr>
<tr>
<td>
<p><tt class="literal">onBlur</tt><a name="INDEX-2871" />,
<tt class="literal">onFocus</tt><a name="INDEX-2872" />
</p>
</td>
<td>
<p>Text input elements (all versions); windows, all form elements (1.1) </p>
</td>
</tr>
<tr>
<td>
<p><tt class="literal">onChange</tt><a name="INDEX-2873" />
</p>
</td>
<td>
<p>Select menus, text input elements (all versions)</p>
</td>
</tr>
<tr>
<td>
<p><tt class="literal">onClick</tt><a name="INDEX-2874" />
</p>
</td>
<td>
<p>Button elements, links (all versions)</p>
</td>
</tr>
<tr>
<td>
<p><tt class="literal">onDblClick</tt><a name="INDEX-2875" />
</p>
</td>
<td>
<p>Entire document, images, links, button elements (1.2)</p>
</td>
</tr>
<tr>
<td>
<p><tt class="literal">onError</tt><a name="INDEX-2876" />
</p>
</td>
<td>
<p>Images, windows (1.1)</p>
</td>
</tr>
<tr>
<td>
<p><tt class="literal">onKeyDown</tt><a name="INDEX-2877" />,
<tt class="literal">onKeyPress</tt><a name="INDEX-2878" />,
<tt class="literal">onKeyUp</tt><a name="INDEX-2879" />
</p>
</td>
<td>
<p>Entire document, images, links, text input elements (1.2)</p>
</td>
</tr>
<tr>
<td>
<p><tt class="literal">onLoad</tt><a name="INDEX-2880" />,
<tt class="literal">onUnload</tt><a name="INDEX-2881" />
</p>
</td>
<td>
<p>Windows (all versions); images (1.1)</p>
</td>
</tr>
<tr>
<td>
<p><tt class="literal">onMouseDown</tt><a name="INDEX-2882" />,
<tt class="literal">onMouseUp</tt><a name="INDEX-2883" />
</p>
</td>
<td>
<p>Entire document, links, images, button elements (1.2)</p>
</td>
</tr>
<tr>
<td>
<p><tt class="literal">onMouseOver</tt>,
<tt class="literal">onMouseOut</tt><a name="INDEX-2884" />
</p>
</td>
<td>
<p>Links, images, layers (1.2)</p>
</td>
</tr>
<tr>
<td>
<p><tt class="literal">onReset</tt><a name="INDEX-2885" />,
<tt class="literal">onSubmit</tt><a name="INDEX-2886" />
</p>
</td>
<td>
<p>Form<a name="INDEX-2887" />
elements (1.1)
</p>
</td>
</tr>

</table>

</div>


<hr width="684" align="left" />
<div class="navbar"><table cellpadding=3 width="684" border="0"><tr><td align="left" valign="top" width="228"><a href="ch28_01.htm"><img alt="Previous" border="0" src="../gifs/txtpreva.gif" /></a></td><td align="center" valign="top" width="228"><a href="index.htm"><img alt="Home" border="0" src="../gifs/txthome.gif" /></a></td><td align="right" valign="top" width="228"><a href="ch28_03.htm"><img alt="Next" border="0" src="../gifs/txtnexta.gif" /></a></td></tr><tr><td align="left" valign="top" width="228">28. Introduction to JavaScript</td><td align="center" valign="top" width="228"><a href="index/index.htm"><img alt="Book Index" border="0" src="../gifs/index.gif" /></a></td><td align="right" valign="top" width="228">28.3. Sample Scripts</td></tr></table></div>
<hr width="684" align="left" />

<img alt="Library Navigation Links" border="0" src="../gifs/navbar.gif" usemap="#library-map" />
<p><font size="-1"><a href="copyrght.htm">Copyright &copy; 2002</a> O'Reilly &amp; Associates. All rights reserved.</font></p>

<map name="library-map"><area href="../index.htm" coords="0,0,77,93" shape="rect" /><area href="index.htm" coords="81,0,156,93" shape="rect" /><area href="../xhtml/index.htm" coords="161,0,261,102" shape="rect" /><area href="../audio/index.htm" coords="265,1,335,97" shape="rect" /><area href="../css/index.htm" coords="339,1,433,109" shape="rect" /><area href="../action/index.htm" coords="438,2,540,109" shape="rect" /><area href="../infoarch/index.htm" coords="544,0,694,104" shape="rect" /></map>

</body></html>