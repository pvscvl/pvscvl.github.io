<html><head><title>DHTML Examples (Web Design in a Nutshell, 2nd Edition)</title><link rel="stylesheet" type="text/css" href="style/style1.css" />

<meta name="DC.Creator" content="Jennifer Niederst" /><meta name="DC.Format" content="text/xml" scheme="MIME" /><meta name="DC.Language" content="en-US" /><meta name="DC.Publisher" content="O'Reilly &amp; Associates, Inc." /><meta name="DC.Source" scheme="ISBN" content="0596001967L" /><meta name="DC.Subject.Keyword" content="stuff" /><meta name="DC.Title" content="Web Design in a Nutshell, 2nd Edition" /><meta name="DC.Type" content="Text.Monograph" />

</head><body bgcolor="#ffffff">

<img alt="Book Home" border="0" src="gifs/smbanner.gif" usemap="#banner-map" /><map name="banner-map"><area shape="rect" coords="1,-2,616,66" href="index.htm" alt="Web Design in a Nutshell" /><area shape="rect" coords="629,-11,726,25" href="jobjects/fsearch.htm" alt="Search this book" /></map>

<div class="navbar"><table cellpadding=3 width="684" border="0"><tr><td align="left" valign="top" width="228"><a href="ch29_04.htm"><img alt="Previous" border="0" src="../gifs/txtpreva.gif" /></a></td><td align="center" valign="top" width="228"><a href="index.htm">Web Design in a Nutshell, 2nd Edition</a></td><td align="right" valign="top" width="228"><a href="ch29_06.htm"><img alt="Next" border="0" src="../gifs/txtnexta.gif" /></a></td></tr></table></div>
<hr width="684" align="left" />


<h2 class="sect1">29.5. DHTML Examples</h2>

<p>Now that you have a basic understanding of the Document Object Model
and know how to create layers, we can look at some useful examples to
get you started on your own DHTML sites.
</p>

<a name="wdnut2-CHP-29-SECT-5.1" /><div class="sect2">
<h3 class="sect2">29.5.1. Rollover Style Changes</h3>

<p>We <a name="INDEX-2925" />already examined this script
back in <a href="ch29_02.htm">Example 29-1</a>. When the user rolls the mouse
over a link, the style of the text is changed to be red and
underlined. This is done by manipulating the <tt class="literal">style</tt>
property of links via the DOM. As we discussed earlier, the
<tt class="literal">style</tt> property gives access to all of the CSS
properties for an element. Using JavaScript, we can change the values
of the <tt class="literal">color</tt> and <tt class="literal">textDecoration</tt>
CSS properties when particular events occur. In this case, we use the
<tt class="literal">onMouseOver</tt> and <tt class="literal">onMouseOut</tt>
events. Here's the script again, to refresh your memory:
</p>

<blockquote><pre class="code">&lt;html&gt;
&lt;head&gt;
&lt;title&gt;Rollover Style Changes&lt;/title&gt;

&lt;style&gt; 
&lt;!--
a { text-decoration: none; }
--&gt;
&lt;/style&gt;

&lt;script&gt; 
&lt;!--
function turnOn(currentLink) {
    currentLink.style.color = "<tt class="userinput"><b>#990000</b></tt>"; 
    currentLink.style.textDecoration = "<tt class="userinput"><b>underline</b></tt>";
}

function turnOff(currentLink) {
    currentLink.style.color = "<tt class="userinput"><b>#0000FF</b></tt>";
    currentLink.style.textDecoration = "<tt class="userinput"><b>none</b></tt>";
}
//--&gt;
&lt;/script&gt;
&lt;/head&gt;

&lt;body bgcolor="#FFFFFF"&gt;
&lt;a href="#home" 
   onMouseOver="turnOn(this);" onMouseOut="turnOff(this);"&gt;Home&lt;/a&gt;
&lt;a href="#contact" 
   onMouseOver="turnOn(this);" onMouseOut="turnOff(this);"&gt;Contact&lt;/a&gt;
&lt;a href="#links" 
   onMouseOver="turnOn(this);" onMouseOut="turnOff(this);"&gt;Links&lt;/a&gt;
&lt;/body&gt;
&lt;/html&gt;</pre></blockquote>

<p>You can adapt this script for your own site by changing the
<tt class="literal">color</tt> and <tt class="literal">textDecoration</tt>
values, shown in bold. You can also modify the <tt class="literal">turnOn(
)</tt> and <tt class="literal">turnOff( )</tt> functions to set
additional properties the same way. For example, you can set the
background of the links to a light yellow color when rolled over,
simply by adding this line to <tt class="literal">turnOn( )</tt>:
</p>

<blockquote><pre class="code">currentLink.style.backgroundColor = "#FFFFCC";</pre></blockquote>

<p>And here's the corresponding line for <tt class="literal">turnOff(
)</tt>, to reset the background color when the mouse exits the
link:
</p>

<blockquote><pre class="code">currentLink.style.backgroundColor = "#FFFFFF";</pre></blockquote>

<p>Note that when you set <tt class="literal">style</tt> properties using
JavaScript, as in this example, you must set them to strings.
</p>

<p>There's actually one more thing you need to understand about
this example: how the <tt class="literal">turnOn( )</tt> and
<tt class="literal">turnOff( )</tt> functions know which link to modify. In
each <tt class="literal">&lt;a&gt;</tt> tag, you'll notice that the
link passes <tt class="literal">this</tt> as a parameter to the
<tt class="literal">turnOn( )</tt> and <tt class="literal">turnOff( )</tt>
functions. In JavaScript, the word <tt class="literal">this</tt> plays a
special role, allowing an object (or element) to refer to itself. Our
example passes <tt class="literal">this</tt> to <tt class="literal">turnOn(
)</tt> and <tt class="literal">turnOff( )</tt> as a simple way of
referencing the object for the current link, so that the function
operates on the correct one. Using <tt class="literal">this</tt> is really
just a shortcut; we also could have accessed the correct link using
one of the DOM methods described<a name="INDEX-2926" /> earlier.
</p>

</div>
<a name="wdnut2-CHP-29-SECT-5.2" /><div class="sect2">
<h3 class="sect2">29.5.2. Drop-Down Menus</h3>

<p>One<a name="INDEX-2927" />
<a name="INDEX-2928" /> of the most common interface elements in
desktop applications is the menubar with drop-down menus. You can
make the same kind of menus with DHTML by showing and hiding
positioned layers, as shown in <a href="ch29_05.htm">Figure 29-2</a>. When the
user clicks on "Resources" or "Links", a
layer with links is displayed below it, just like a normal menu. When
the user double-clicks on the link, the layer is hidden again.
</p>

<a name="wdnut2-CHP-29-FIG-2" /><div class="figure"><img height="268" alt="Figure 29-2" src="figs/WDN2_2902.gif" width="393" /></div><h4 class="objtitle">Figure 29-2. A drop-down menu with DHTML</h4>

<p>The DHTML code in <a href="ch29_05.htm">Example 29-3</a> creates the menus
shown in <a href="ch29_05.htm">Figure 29-2</a>. The JavaScript combines two
concepts we've seen before: creating a positioned layer and
manipulating a style via the DOM.
</p>

<a name="wdnut2-CHP-29-EX-3" /><div class="example">
<h4 class="objtitle">Example 29-3. Drop-down menus with DHTML </h4>
<blockquote><pre class="code">&lt;html&gt;
&lt;head&gt;
&lt;title&gt;Drop-down Menus&lt;/title&gt;

&lt;script language="JavaScript"&gt;
&lt;!--
function showLayer(layerid) {
    layer = document.getElementById(layerid);   (<b>A</b>)
    layer.style.visibility = "visible";   (<b>B</b>)
}

function hideLayer(layerid) {   (<b>C</b>)
    layer = document.getElementById(layerid);
    layer.style.visibility = "hidden";
}
//--&gt;
&lt;/script&gt;

&lt;style type="text/css"&gt;
&lt;!--
a { font-family: Arial, Helvetica, sans-serif; 
    color: #FFFFFF; margin-left: 3px}
--&gt;
&lt;/style&gt;
&lt;/head&gt;

&lt;body bgcolor="#FFFFFF" text="#000000" topmargin="0" leftmargin="0" 
      marginwidth="0" marginheight="0"&gt;
&lt;table border="0" bgcolor="#000000" cellspacing="0" cellpadding="2"&gt;
  &lt;tr&gt; 
    &lt;td width="100"&gt; &lt;a href="#"&gt;Home&lt;/a&gt;&lt;/td&gt;

    &lt;td width="100"&gt;      
      &lt;div id="ResMenu"   (<b>D</b>)
           style="position:absolute; left:110px; top:23px; 
                  width:100px; height:62px; z-index:1; 
                  background-color:#CCCCCC; layer-background-color:#CCCCCC; 
                  visibility:hidden"&gt; 
        &lt;a href="#"&gt;Scripts&lt;/a&gt;&lt;br&gt;
        &lt;a href="#"&gt;Reference&lt;/a&gt;&lt;br&gt;
        &lt;a href="#"&gt;Weblog&lt;/a&gt;
      &lt;/div&gt;

      &lt;a href="#" onClick="showLayer('ResMenu');"   (<b>E</b>)
         onDblClick="hideLayer('ResMenu');"&gt;Resources&lt;/a&gt; 
    &lt;/td&gt;

    &lt;td width="100"&gt; 
      &lt;div id="LinksMenu" 
           style="position:absolute; left:211px; top:23px; 
                  width:100px; height:85px; z-index:2; 
                  background-color:#CCCCCC; layer-background-color:#CCCCCC; 
                  visibility:hidden"&gt; 
        &lt;a href="#"&gt;DHTML&lt;/a&gt;&lt;br&gt;
        &lt;a href="#"&gt;CSS&lt;/a&gt;&lt;br&gt;
        &lt;a href="#"&gt;HTML&lt;/a&gt;&lt;br&gt;
        &lt;a href="#"&gt;JavaScript&lt;/a&gt;
      &lt;/div&gt;

      &lt;a href="#" onClick="showLayer('LinksMenu');" 
         onDblClick="hideLayer('LinksMenu);"&gt;Links&lt;/a&gt;
    &lt;/td&gt;
  &lt;/tr&gt;
&lt;/table&gt;
&lt;/body&gt;
&lt;/html&gt;</pre></blockquote>
</div>

<dl>
<dt><b>(A)</b></dt>
<dd>
<p>The <tt class="literal">showLayer( )</tt><a name="INDEX-2929" /> function references the layer object
for our menu with a document method,
<tt class="literal">document.getElementById(
)</tt><a name="INDEX-2930" />, and sets a variable named
<tt class="literal">layer</tt> to be able to refer to that object again.
The ID for the correct layer object is passed into the function as an
argument, <tt class="literal">layerid</tt>. The <tt class="literal">showLayer(
)</tt><a name="INDEX-2931" /> function is triggered by the
<tt class="literal">onClick</tt> event handler for the
"Resources" and "Links" links.
</p>
</dd>

</dl>

<dl>
<dt><b>(B)</b></dt>
<dd>
<p>This line of the function sets the layer's
<tt class="literal">visibility</tt> property (through the
<tt class="literal">style</tt> property), which is a CSS property that
controls the visibility of a layer. When the layer is created, it is
hidden, so the <tt class="literal">showLayer( )</tt> function sets
<tt class="literal">visibility</tt> to <tt class="literal">"visible"</tt> to make
the menu appear.
</p>
</dd>

</dl>

<dl>
<dt><b>(C)</b></dt>
<dd>
<p>The <tt class="literal">hideLayer( )</tt><a name="INDEX-2932" /> function works just like the
<tt class="literal">showLayer( )</tt><a name="INDEX-2933" /> function, except that it hides the
menu by setting <tt class="literal">visibility</tt> to
<tt class="literal">"hidden"</tt>. The <tt class="literal">hideLayer( )</tt>
function is triggered by the <tt class="literal">onDblClick</tt> event
handler.
</p>
</dd>

</dl>

<dl>
<dt><b>(D)</b></dt>
<dd>
<p>This <tt class="literal">&lt;div&gt;</tt> tag creates the layer for the
"Resources" menu. Note that the layer is given a specific
<tt class="literal">id</tt>, so that we can refer to it later. Various CSS
properties are set using the <tt class="literal">style</tt> attribute.
These properties set the size and position of the layer precisely, so
that it appears at the appropriate location for a drop-down menu. The
one CSS property we haven't seen yet is
<tt class="literal">visibility</tt>; this property is set to
<tt class="literal">hidden</tt> so that menu is invisible until the user
clicks on the "Resources" link to activate it.
</p>
</dd>

</dl>

<dl>
<dt><b>(E)</b></dt>
<dd>
<p>This link is created to control the menu. The
<tt class="literal">onClick</tt> event handler calls <tt class="literal">showLayer(
)</tt> to display the menu, and the
<tt class="literal">onDblClick</tt> event handler calls <tt class="literal">hideLayer(
)</tt> to remove it. Each function is passed the argument
<tt class="literal">'ResMenu'</tt>, which tells the function which layer to
display and hide.
</p>
</dd>

</dl>

<p>It is pretty easy to adapt this script for your own site: most of the
work is in figuring out the layout for your menu links and then
determining the exact size and location for each menu layer. In other
words, you'll need to adjust the <tt class="literal">top</tt>,
<tt class="literal">left</tt>, <tt class="literal">width</tt>, and
<tt class="literal">height</tt> properties for the actual content and
layout of your page. You can also adjust the various color styles to
suit your purposes. The two properties you need to leave as is are
<tt class="literal">position</tt> and <tt class="literal">visibility</tt>. Give
each menu layer a unique <tt class="literal">id</tt> attribute, and then
pass that ID to the <tt class="literal">showLayer( )</tt> and
<tt class="literal">hideLayer( )</tt> functions via the
<tt class="literal">onClick</tt> and <tt class="literal">onDblClick</tt> event
handlers for your menu link. You don't need to change<a name="INDEX-2934" /> <a name="INDEX-2935" /> the
<tt class="literal">showLayer( )</tt> and <tt class="literal">hideLayer( )</tt>
functions at all.
</p>

</div>
<a name="wdnut2-CHP-29-SECT-5.3" /><div class="sect2">
<h3 class="sect2">29.5.3. Sliding Tabs</h3>

<p>Maki<a name="INDEX-2936" /> <a name="INDEX-2937" />ng an object move in DHTML is like
making any other style change. All you are doing is changing one of
two properties -- <tt class="literal">style.left</tt> or
<tt class="literal">style.top</tt> -- to get an object from one place to
another. The illusion of motion happens when you change the
object's position incrementally and quickly.
</p>

<p>In this example, we're creating a tab on the left-hand side of
the browser that is 75 pixels off the left edge of the screen, so
that the main content of the tab is not visible. When the user clicks
on "show&gt;&gt;", the tab moves right 5 pixels every
millisecond until it is completely onscreen, as shown in <a href="ch29_05.htm">Figure 29-3</a>. Clicking on the "&lt;&lt;hide"
link returns the tab to its original position.
</p>

<a name="wdnut2-CHP-29-FIG-3" /><div class="figure"><img height="332" alt="Figure 29-3" src="figs/WDN2_2903.gif" width="335" /></div><h4 class="objtitle">Figure 29-3. A sliding tab with DHTML</h4>

<p><a href="ch29_05.htm">Example 29-4</a> shows the DHTML code for the sliding
tab. As with the drop-down menu, we are creating a positioned layer
and manipulating it with the DOM. What's new in this example is
the code for moving the layer. Just by changing the
<tt class="literal">style.left</tt> property, we've created the
illusion of motion.
</p>

<a name="wdnut2-CHP-29-EX-4" /><div class="example">
<h4 class="objtitle">Example 29-4. A sliding tab with DHTML </h4>
<blockquote><pre class="code">&lt;head&gt;
&lt;title&gt;Sliding Tabs&lt;/title&gt;

&lt;style&gt;
&lt;!--
.hideshow { color: #333333; font-size: 9px; font-family: sans-serif; 
            text-decoration: none; }
--&gt;
&lt;/style&gt;

&lt;script language="JavaScript"&gt;
&lt;!--
function showLayer() {
    hiddenLayer = document.getElementById("TabLayer");   (<b>A</b>)
    layerPosition = parseInt(hiddenLayer.style.left); 
    if (layerPosition &lt; 0) {
        hiddenLayer.style.left = (layerPosition + <tt class="userinput"><b>5</b></tt>) + "px";   (<b>B</b>)
        setTimeout("showLayer()", <tt class="userinput"><b>20</b></tt>);    (<b>C</b>)
    }
}

function hideLayer() {   (<b>D</b>)
    hiddenLayer = document.getElementById("TabLayer");
    hiddenLayer.style.left = "-75" + "px";
}
//--&gt;
&lt;/script&gt;
&lt;/head&gt;

&lt;body&gt;
&lt;div id="Layer1"   (<b>E</b>)
     style="position:absolute; left:-75px; top:50px; 
            width:115px; height:200px; z-index:1; 
            background-color: #CCCCCC; layer-background-color: #CCCCCC;"&gt; 

  &lt;p align="right" class="hideshow"&gt;
    &lt;a href="javascript:hideLayer(  );" class="hideshow"&gt;&amp;lt;&amp;lt;hide&lt;/a&gt;   (<b>F</b>)
    &lt;a href="javascript:showLayer(  );" class="hideshow"&gt;show&amp;gt;&amp;gt;&lt;/a&gt;   (<b>G</b>)
  &lt;/p&gt;

  &lt;p align="left" style="margin-left: 5px;"&gt;
    &lt;a href="#"&gt;Scripts&lt;/a&gt;&lt;br&gt;
    &lt;a href="#"&gt;Weblog&lt;/a&gt;&lt;br&gt;
    &lt;a href="#"&gt;Projects&lt;/a&gt;&lt;br&gt;
    &lt;a href="#"&gt;Contact&lt;/a&gt; 
  &lt;/p&gt;
&lt;/div&gt;
&lt;/body&gt;
&lt;/html&gt;</pre></blockquote>
</div>

<dl>
<dt><b>(A)</b></dt>
<dd>
<p>This line references the layer object for our tab and stores it in
the variable named <tt class="literal">layer</tt>. Since the
<tt class="literal">showLayer( )</tt> function only needs to work on one
layer, we don't get the layer ID as an argument but instead
refer specifically to <tt class="literal">'TabLayer'</tt> in the call to
<tt class="literal">getElementById( )</tt>.
</p>
</dd>

</dl>

<dl>
<dt><b>
<blockquote><pre class="code">(B)</pre></blockquote>
</b></dt>
<dd>
<p>This line is what actually moves the tab layer. Each time
<tt class="literal">showLayer( )</tt> is called, if the layer isn't
in its final position, <tt class="literal">style.left</tt> is incremented
by 5 (shown in bold), which moves the tab five pixels to the right.
If you want to change the distance the layer travels each frame, you
can replace this value. A larger value will result in faster
movement, a smaller value in slower movement. Note the inclusion of
<tt class="literal">"px"</tt> here; this specifies the units (pixels) and
converts the whole thing to a string. Both are necessary when setting
location values in JavaScript.
</p>
</dd>

</dl>

<dl>
<dt><b>(C)</b></dt>
<dd>
<p>The <tt class="literal">setTimeout( )</tt><a name="INDEX-2938" /> method is a built-in JavaScript method
that lets you create a counter that waits a given number of
milliseconds before executing a function. With this method, we can
call <tt class="literal">showLayer( )</tt><a name="INDEX-2939" /> repeatedly, where each call moves the
layer a few pixels until it is in its final position. Each repetition
of the function is equivalent to one frame of animation, so the
amount of time <tt class="literal">setTimeout( )</tt> waits before
executing <tt class="literal">showLayer( )</tt> is, in effect, your frame
rate. The second argument to <tt class="literal">setTimeout( )</tt> (shown
in bold) controls how often <tt class="literal">showLayer( )</tt> is
called. We're using a value of 20, which refers to 20
milliseconds. To make the animation go more slowly, increase this
value.
</p>
</dd>

</dl>

<dl>
<dt><b>(D)</b></dt>
<dd>
<p>The <tt class="literal">hideLayer( )</tt> function simply moves the tab
layer back to its original position, so that the content of the tab
is not visible.
</p>
</dd>

</dl>

<dl>
<dt><b>(E)</b></dt>
<dd>
<p>This <tt class="literal">&lt;div&gt;</tt> tag creates the layer for the
sliding tab. Note that left is set to <tt class="literal">-75px</tt>, which
is what pushes the content of the tab out of the visible region of
the browser window. Also, because the layer is in fact visible, we
don't need to set the <tt class="literal">visibility</tt> property.
</p>
</dd>

</dl>

<dl>
<dt><b>(F)</b></dt>
<dd>
<p>The "&lt;&lt;hide" link uses a
<tt class="literal">javascript:</tt> URL to call the <tt class="literal">hideLayer(
)</tt> function.
</p>
</dd>

</dl>

<dl>
<dt><b>(G)</b></dt>
<dd>
<p>The "show&gt;&gt;" link uses a
<tt class="literal">javascript:</tt> URL<a name="INDEX-2940" /> <a name="INDEX-2941" /> to call the <tt class="literal">showLayer(
)</tt> function.
</p>
</dd>

</dl>

</div>


<hr width="684" align="left" />
<div class="navbar"><table cellpadding=3 width="684" border="0"><tr><td align="left" valign="top" width="228"><a href="ch29_04.htm"><img alt="Previous" border="0" src="../gifs/txtpreva.gif" /></a></td><td align="center" valign="top" width="228"><a href="index.htm"><img alt="Home" border="0" src="../gifs/txthome.gif" /></a></td><td align="right" valign="top" width="228"><a href="ch29_06.htm"><img alt="Next" border="0" src="../gifs/txtnexta.gif" /></a></td></tr><tr><td align="left" valign="top" width="228">29.4. Creating Layers</td><td align="center" valign="top" width="228"><a href="index/index.htm"><img alt="Book Index" border="0" src="../gifs/index.gif" /></a></td><td align="right" valign="top" width="228">29.6. Browser Detection</td></tr></table></div>
<hr width="684" align="left" />

<img alt="Library Navigation Links" border="0" src="../gifs/navbar.gif" usemap="#library-map" />
<p><font size="-1"><a href="copyrght.htm">Copyright &copy; 2002</a> O'Reilly &amp; Associates. All rights reserved.</font></p>

<map name="library-map"><area href="../index.htm" coords="0,0,77,93" shape="rect" /><area href="index.htm" coords="81,0,156,93" shape="rect" /><area href="../xhtml/index.htm" coords="161,0,261,102" shape="rect" /><area href="../audio/index.htm" coords="265,1,335,97" shape="rect" /><area href="../css/index.htm" coords="339,1,433,109" shape="rect" /><area href="../action/index.htm" coords="438,2,540,109" shape="rect" /><area href="../infoarch/index.htm" coords="544,0,694,104" shape="rect" /></map>

</body></html>
