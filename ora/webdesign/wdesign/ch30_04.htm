<html><head><title>Document Type Definition (DTD) (Web Design in a Nutshell, 2nd Edition)</title><link rel="stylesheet" type="text/css" href="style/style1.css" />

<meta name="DC.Creator" content="Jennifer Niederst" /><meta name="DC.Format" content="text/xml" scheme="MIME" /><meta name="DC.Language" content="en-US" /><meta name="DC.Publisher" content="O'Reilly &amp; Associates, Inc." /><meta name="DC.Source" scheme="ISBN" content="0596001967L" /><meta name="DC.Subject.Keyword" content="stuff" /><meta name="DC.Title" content="Web Design in a Nutshell, 2nd Edition" /><meta name="DC.Type" content="Text.Monograph" />

</head><body bgcolor="#ffffff">

<img alt="Book Home" border="0" src="gifs/smbanner.gif" usemap="#banner-map" /><map name="banner-map"><area shape="rect" coords="1,-2,616,66" href="index.htm" alt="Web Design in a Nutshell" /><area shape="rect" coords="629,-11,726,25" href="jobjects/fsearch.htm" alt="Search this book" /></map>

<div class="navbar"><table cellpadding=3 width="684" border="0"><tr><td align="left" valign="top" width="228"><a href="ch30_03.htm"><img alt="Previous" border="0" src="../gifs/txtpreva.gif" /></a></td><td align="center" valign="top" width="228"><a href="index.htm">Web Design in a Nutshell, 2nd Edition</a></td><td align="right" valign="top" width="228"><a href="ch30_05.htm"><img alt="Next" border="0" src="../gifs/txtnexta.gif" /></a></td></tr></table></div>
<hr width="684" align="left" />


<h2 class="sect1">30.4. Document Type Definition (DTD)</h2>

<p><a name="INDEX-2970" />Another important part of XML is the
Document Type Definition (DTD), a file associated with SGML and XML
documents that defines how markup tags should be interpreted by the
application reading the document. A DTD is what turns XML from a
metalanguage to a true language designed for a specific task.
</p>

<p>A DTD is a text document that contains a set of rules, formally known
as "entity, element, and att-list (attribute)
declarations," that define an XML markup language. It names new
elements and describes the type of data or other elements that an
element may contain. It also lists attributes for each element.
</p>

<a name="wdnut2-CHP-30-SECT-4.1" /><div class="sect2">
<h3 class="sect2">30.4.1. A Simple DTD</h3>

<p>For example, if you were creating recipes to be accessed over the
Web, you might create your own language called RML, or Recipe Markup
Language. RML would have tags like <tt class="literal">&lt;title&gt;</tt>
and <tt class="literal">&lt;body&gt;</tt>, but also RML-specific tags such
as <tt class="literal">&lt;ingredients&gt;</tt>,
<tt class="literal">&lt;prep-time&gt;</tt>, and
<tt class="literal">&lt;nutritionalInformation&gt;</tt>.
</p>

<p>These tags would be established in a DTD for the new language. The
DTD imparts detailed information about what data should be found in
each tag. A DTD for Recipe Markup Language might have a line like
this:
</p>

<blockquote><pre class="code">&lt;!ELEMENT ingredients ( li+, text? )&gt;</pre></blockquote>

<p>The first line declares an element called
<tt class="literal">ingredients</tt>. An <tt class="literal">ingredients</tt> tag
can contain an <tt class="literal">li</tt> element and text. The plus sign
(<tt class="literal">+</tt>) after <tt class="literal">li</tt> indicates that an
<tt class="literal">ingredients</tt> element will have one or more
<tt class="literal">li</tt> elements within it. The question mark after
<tt class="literal">text</tt> shows that text is optional. The Recipe
Markup Language DTD would also specify the <tt class="literal">li</tt>
element:
</p>

<blockquote><pre class="code">&lt;!ELEMENT li (#PCDATA)&gt;</pre></blockquote>

<p>This element contains text only (<tt class="literal">PCDATA</tt> stands for
"parsed character data" and is used to indicate text that
may contain other tagged elements).
</p>

<p>The complete set of rules for declaring entities and elements in a
DTD is fairly complex and beyond the scope of this chapter. Refer to
one of the sources listed at the end of this chapter for more
information.
</p>

</div>
<a name="wdnut2-CHP-30-SECT-4.2" /><div class="sect2">
<h3 class="sect2">30.4.2. Valid XML</h3>

<p>When an XML document conforms to all the rules established in the
DTD, it is said to be <em class="firstterm">valid</em>, meaning that all
the elements are used correctly.
</p>


<a name="ch30-13-fm2xml" /><blockquote><h4>TIP</h4>
<p>A well-formed document is not necessarily valid, but if a document
proves to be valid it follows that it is also well-formed.
</p>
</blockquote>

<p>When your document uses a DTD, you can check it for mistakes using a
<em class="firstterm">validating parser</em>. The parser checks the
document against the DTD for contextual errors, such as missing
elements or improper order of elements. Most of the best validating
parsers are free. Some common parsers are Xerces from the Apache XML
Project (available at <a href="../../../../../../xml.apache.org/">http://xml.apache.org</a>) and Microsoft MSXML
(<a href="../../../../../../msdn.microsoft.com/xml/default.asp">http://msdn.microsoft.com/xml/default.asp</a>). A
full list of validating parsers is provided by Web Developer's
Virtual Library at <a href="../../../../../../wdvl.com/Software/XML/parsers.html">http://wdvl.com/Software/XML/parsers.html</a>.
</p>

</div>
<a name="wdnut2-CHP-30-SECT-4.3" /><div class="sect2">
<h3 class="sect2">30.4.3. When to Use a DTD</h3>

<p>DTDs are not required and actually come with a few disadvantages. A
DTD is useful when you have specific markup requirements to apply
across a large number of documents. A DTD can ensure that certain
data fields are present or delivered in a particular format. You may
also want to spend the time preparing a DTD if you need to coordinate
content from various sources and authors. Having a DTD makes it
easier to find mistakes in your code.
</p>

<p>The disadvantages to DTDs are that they require time and effort to
develop and are inconvenient to maintain (particularly while the XML
language is in flux). DTDs slow down processing times and may be too
restrictive on the user's end. Another problem with DTDs is
that they are not compatible with the namespace convention. Elements
and attributes from another namespace won't validate under a
DTD unless the DTD explicitly includes them (which defeats the
purpose of namespaces in the first place). If you are creating just a
few XML documents or if you are using namespaces, a DTD is
undesirable.
</p>

</div>


<hr width="684" align="left" />
<div class="navbar"><table cellpadding=3 width="684" border="0"><tr><td align="left" valign="top" width="228"><a href="ch30_03.htm"><img alt="Previous" border="0" src="../gifs/txtpreva.gif" /></a></td><td align="center" valign="top" width="228"><a href="index.htm"><img alt="Home" border="0" src="../gifs/txthome.gif" /></a></td><td align="right" valign="top" width="228"><a href="ch30_05.htm"><img alt="Next" border="0" src="../gifs/txtnexta.gif" /></a></td></tr><tr><td align="left" valign="top" width="228">30.3. XML Document Syntax</td><td align="center" valign="top" width="228"><a href="index/index.htm"><img alt="Book Index" border="0" src="../gifs/index.gif" /></a></td><td align="right" valign="top" width="228">30.5. Examples of XML Technology</td></tr></table></div>
<hr width="684" align="left" />

<img alt="Library Navigation Links" border="0" src="../gifs/navbar.gif" usemap="#library-map" />
<p><font size="-1"><a href="copyrght.htm">Copyright &copy; 2002</a> O'Reilly &amp; Associates. All rights reserved.</font></p>

<map name="library-map"><area href="../index.htm" coords="0,0,77,93" shape="rect" /><area href="index.htm" coords="81,0,156,93" shape="rect" /><area href="../xhtml/index.htm" coords="161,0,261,102" shape="rect" /><area href="../audio/index.htm" coords="265,1,335,97" shape="rect" /><area href="../css/index.htm" coords="339,1,433,109" shape="rect" /><area href="../action/index.htm" coords="438,2,540,109" shape="rect" /><area href="../infoarch/index.htm" coords="544,0,694,104" shape="rect" /></map>

</body></html>
