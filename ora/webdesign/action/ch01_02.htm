<html><head><title>Further ActionScript Concepts (ActionScript: The Definitive Guide)</title><link rel="stylesheet" type="text/css" href="../style/style1.css" />

<meta name="DC.Creator" content="Colin Moock" /><meta name="DC.Format" content="text/xml" scheme="MIME" /><meta name="DC.Language" content="en-US" /><meta name="DC.Publisher" content="O'Reilly &amp; Associates, Inc." /><meta name="DC.Source" scheme="ISBN" content="1565928520L" /><meta name="DC.Subject.Keyword" content="stuff" /><meta name="DC.Title" content="ActionScript: The Definitive Guide" /><meta name="DC.Type" content="Text.Monograph" />

</head><body bgcolor="#ffffff">

<img alt="Book Home" border="0" src="gifs/smbanner.gif" usemap="#banner-map" /><map name="banner-map"><area shape="rect" coords="1,-2,616,66" href="index.htm" alt="ActionScript: The Definitive Guide" /><area shape="rect" coords="629,-11,726,25" href="jobjects/fsearch.htm" alt="Search this book" /></map>

<div class="navbar"><table width="684" border="0"><tr><td align="left" valign="top" width="228"><a href="ch01_01.htm"><img alt="Previous" border="0" src="../gifs/txtpreva.gif" /></a></td><td align="center" valign="top" width="228"><a href="index.htm">ActionScript: The Definitive Guide</a></td><td align="right" valign="top" width="228"><a href="ch01_03.htm"><img alt="Next" border="0" src="../gifs/txtnexta.gif" /></a></td></tr></table></div>
<hr width="684" align="left" />


<h2 class="sect1">1.2. Further ActionScript Concepts</h2>


<p>You've already been introduced to many of the fundamental
elements that make up ActionScript: data, variables, operators,
statements, functions, and arguments. Before we delve deeper into
those topics, let's sketch out the rest of ActionScript's
core features.</p>


<a name="ch01-14-fm2xml" /><div class="sect2">
<h3 class="sect2">1.2.1. Flash Programs</h3>


<p>To most computer users, <em class="emphasis">a</em>
<em class="emphasis">program</em> is synonymous with
<em class="emphasis">an</em> <em class="emphasis">application</em>, such as
Adobe Photoshop or Macromedia Dreamweaver. Obviously, that's
not what we're building when we program in Flash. Programmers,
on the other hand, define a program as a collection of code (a
"series of statements"), but that's only part of
what we're building.</p>


<p>A <a name="INDEX-65" />Flash
movie is more than a series of lines of code. Code in Flash is
intermingled with Flash movie elements, like frames and buttons. We
attach our code to those elements so that it can interact with them.</p>


<p>In the end, there really isn't such a thing as a Flash
"program" in the classic sense of the term. Instead of
complete programs written in ActionScript, we have
<em class="emphasis">scripts</em><a name="INDEX-66" />
<a name="INDEX-67" />:
code segments that give programmatic behavior to our movie, just as
JavaScript scripts give programmatic behavior to HTML documents. The
real product we're building is not a program but a complete
movie (including its code, timelines, visuals, sound, and other
assets).</p>


<p>Our scripts include most of what you'd see in traditional
programs without the operating-system-level stuff you would write in
languages like C++ or Java to place graphics on the screen or cue
sounds. We're spared the need to manage the nuts
'n' bolts of graphics and sound programming, which allows
us to focus most of our effort on designing the behavior of our
movies.</p>
</div>




<a name="ch01-15-fm2xml" /><div class="sect2">
<h3 class="sect2">1.2.2. Expressions</h3>


<p>The <a name="INDEX-68" />
<a name="INDEX-69" />statements
of a script, as we've learned, contain the script's
instructions. But most instructions are pretty useless without data.
When we set a variable, for example, we assign some data as its
value. When we use the <em class="filename">trace( )</em> command, we pass
data as an argument for display in the Output window. Data is the
content we manipulate in our ActionScript code. Throughout your
scripts, you'll retrieve, give, store, and generally sling
around a lot of data.</p>


<p>In a program, any phrase of code that yields a single datum when a
program runs is referred to as an <em class="emphasis">expression</em>.
The number 7 and the string, "Welcome to my web site,"
are both very simple expressions. They represent simple data that
will be used as-is when the program runs. As such, those expressions
are called
<em class="emphasis">literal</em><a name="INDEX-70" />
<a name="INDEX-71" />
<em class="emphasis">expressions</em>, or <em class="emphasis">literals</em>
for short.</p>


<p>Literals are only one kind of expression. A
<a name="INDEX-72" />variable
may also be an expression (variables stand in for data, so they count
as expressions). Expressions get even more interesting when they are
combined with operators. The expression 4 + 5, for example, is an
expression with two operands, 4 and 5, but the plus operator makes
the entire expression yield the single value 9. Complex expressions
may contain other, shorter expressions, provided that the entire
phrase of code can still be converted into a single value.</p>


<p>Here we see the variable <tt class="literal">message</tt>:</p>


<blockquote><pre class="code">var message = "Hi there, Flash!";</pre></blockquote>


<p>If we like, we can combine the variable expression
<tt class="literal">message</tt> with the literal expression " How
are you?" as follows:</p>


<blockquote><pre class="code">message + " How are you?"</pre></blockquote>


<p>which becomes "Hi there, Flash! How are you?" when the
program runs. You'll frequently see long expressions include
shorter expressions when working with arithmetic, such as:</p>


<blockquote><pre class="code">(2 + 3) * (4 / 2.5) - 1</pre></blockquote>


<p>It's important to be exposed to expressions early in your
programming career because the term "expression" is often
used in descriptions of programming concepts. For example, I might
write, "To assign a value to a variable, type the name of the
variable, then an equal sign followed by any expression."</p>
</div>




<a name="ch01-16-fm2xml" /><div class="sect2">
<h3 class="sect2">1.2.3. Two Vital Statement Types: Conditionals and Loops</h3>


<p>In nearly all programs, we'll use
<em class="emphasis">conditionals</em> to add logic to our programs and
<em class="emphasis">loops</em> to perform repetitive tasks.</p>


<a name="ch01-17-fm2xml" /><div class="sect3">
<h3 class="sect3">1.2.3.1. Making choices using conditionals</h3>


<p>One <a name="INDEX-73" />
<a name="INDEX-74" />of
the really rewarding aspects of Flash programming is making your
movies smart. Here's what I mean by smart: Suppose a girl named
Wendy doesn't like getting her clothes wet. Before Wendy leaves
her house every morning, she looks out the window to check the
weather, and if it's raining, she brings an umbrella.
Wendy's smart. She uses basic <a name="INDEX-75" /> <a name="INDEX-76" />logic -- the ability to look at a series
of options and make a decision about what to do based on the
circumstances. We use the same basic logic when creating interactive
Flash movies.</p>


<p>Here are a few examples of logic in a Flash movie:</p>


<ul><li><p>Suppose we have three sections in a movie. When a user goes to each
section, we use logic to decide whether to show her the introduction
to that section. If she has been to the section before, we skip the
introduction. Otherwise, we show the introduction.</p></li><li><p>Suppose we have a section of a movie that is restricted. To enter the
restricted zone, the user must enter a password. If the user enters
the right password, we show her the restricted content. Otherwise, we
don't.</p></li><li><p>Suppose we're moving a ball across the screen and we want it to
bounce off a wall. If the ball crosses a certain point, we reverse
the ball's direction. Otherwise, we let the ball continue
traveling in the direction it was going.</p></li></ul>
<p>These examples of movie logic require the use of a special type of
statement called a <em class="emphasis">conditional</em>. Conditionals let
us specify the terms under which a section of code should -- or
should not -- be executed. Here's an example of a
conditional statement:</p>


<blockquote><pre class="code">if (userName == "James Bond") {
  trace ("Welcome to my web site, 007.");
}</pre></blockquote>


<p>The generic structure of a conditional is:</p>


<blockquote><pre class="code">if (<em class="replaceable">this condition is met</em>) { 
  <em class="replaceable">then execute these lines of code</em>
}</pre></blockquote>


<p>You'll learn more about the detailed syntax in <a href="ch07_01.htm">Chapter 7, "Conditionals"</a>. For now, remember that a conditional allows
Flash to make logical decisions.</p>
</div>



<a name="ch01-18-fm2xml" /><div class="sect3">
<h3 class="sect3">1.2.3.2. Repeating tasks using loops</h3>


<p>Not <a name="INDEX-77" /> <a name="INDEX-78" />only
<a name="INDEX-79" />do
we want our movies to make decisions, we want them to do tedious,
repetitive tasks for us. That is, until they take over the world and
enslave us and grow us in little energy pods as . . . wait . . .
forget I told you that . . . ahem. Suppose you want to display a
sequence of five numbers in the Output window, and you want the
sequence to start at a certain number. If the starting number were
10, you <a name="INDEX-80" />could display the sequence like this:</p>


<blockquote><pre class="code">trace (10);
trace (11);
trace (12);
trace (13);
trace (14);</pre></blockquote>


<p>But if you want to start the sequence at 513, you'd have to
retype all the numbers as follows:</p>


<blockquote><pre class="code">trace (513);
trace (514);
trace (515);
trace (516);
trace (517);</pre></blockquote>


<p>We can avoid that retyping by making our <em class="filename">trace(
)</em> statements depend on a variable, like this:</p>


<blockquote><pre class="code">var x = 1;
trace (x);
x = x + 1;
trace (x);
x = x + 1;
trace (x);
x = x + 1;
trace (x);
x = x + 1;
trace (x);</pre></blockquote>


<p>On line 1, we set the value of the variable <tt class="literal">x</tt> to
1. Then at line 2, we send that value to the
<a name="INDEX-81" />Output window. On line 3, we say,
"Take the current value of <tt class="literal">x</tt>, add 1 to it,
and stick the result back into our variable
<tt class="literal">x</tt>," so <tt class="literal">x</tt> becomes 2. Then
we send the value of <tt class="literal">x</tt> to the Output window again.
We repeat this process three more times. By the time we're
done, we've displayed a sequence of five numbers in the Output
window. The beauty being that if we now want to change the starting
number of our sequence, we just change the initial value of
<tt class="literal">x</tt>. Because the rest of our code is based on
<tt class="literal">x</tt>, the entire sequence changes when the program
runs.</p>


<p>That's an improvement over our first approach, and it works
pretty well when we're displaying only five numbers, but it
becomes impractical if we want to count to 500. To perform highly
repetitive tasks, we use a <em class="emphasis">loop -- </em>a
statement that causes a block of code to be repeated an arbitrary
number of times. There are several types of loops, each with its own
syntax. One of the most common loop types is the
<em class="filename">while</em><a name="INDEX-82" /> loop. Here's what our counting
example would look like as a <em class="filename">while</em> loop instead
of as a series of repeated statements:</p>


<blockquote><pre class="code">var x = 1;
while (x &lt;= 5) {
  trace (x);
  x = x + 1;
}</pre></blockquote>


<p>The keyword <em class="filename">while</em> indicates that we want to
start a loop. The expression <em class="filename">(x &lt;= 5)</em> governs
how many times the loop should execute (as long as
<tt class="literal">x</tt> is less than or equal to 5), and the statements
<em class="filename">trace (x);</em> and <em class="filename">x = x + 1;</em>
are executed with each repetition (or <em class="emphasis">iteration</em>)
of the loop. As it is, our loop saves us only 5 lines of code, but it
could potentially save us hundreds of lines if we were counting to
higher numbers. And our loop is flexible. To make our loop count to
500, we simply change the expression <em class="emphasis">(x &lt;=5)</em>
to <em class="emphasis">(x &lt;=500)</em> :</p>


<blockquote><pre class="code">var x = 1;
while (x &lt;= 500) {
  trace (x);
  x = x + 1;
}</pre></blockquote>


<p>Like conditionals, loops are one of the most frequently used and
important types of statements in <a name="INDEX-83" /> <a name="INDEX-84" />programming.</p>
</div>
</div>




<a name="ch01-19-fm2xml" /><div class="sect2">
<h3 class="sect2">1.2.4. Modular Code (Functions)</h3>


<p>So <a name="INDEX-85" />
<a name="INDEX-86" />
<a name="INDEX-87" />far
<a name="INDEX-88" />your
longest script has consisted of four lines of code. But it
won't be long before that 4 lines becomes 400 or maybe even
4,000. Sooner or later you're going to end up looking for ways
to manage your code, reduce your work, and make your code easier to
apply to multiple scenarios. Which is when you'll first really
start to love <em class="emphasis">functions</em>. A function is a
packaged series of statements. In practice, functions mostly serve as
reusable blocks of code.</p>


<p>Suppose you want to write a quick script that calculates the area of
a 4-sided figure. Without functions, your script might look like
this:</p>


<blockquote><pre class="code">var height = 10;
var width = 15;
var area = height * width;</pre></blockquote>


<p>Now suppose you want to calculate the area of five 4-sided figures.
Your code quintuples in size:</p>


<blockquote><pre class="code">var height1 = 10;
var width1 = 15;
var area1 = height1 * width1;
var height2 = 11;
var width2 = 16;
var area2 = height2 * width2;
var height3 = 12;
var width3 = 17;
var area3 = height3 * width3;
var height4 = 13;
var width4 = 18;
var area4 = height4 * width4;
var height5 = 20;
var width5 = 5;
var area5 = height5 * width5;</pre></blockquote>


<p>Because we're repeating the area calculation over and over, we
are better off putting it in a function once and executing that
function multiple times:</p>


<blockquote><pre class="code">function area(height, width){
  return height * width;
}
area1 = area(10, 15);
area2 = area(11, 16);
area3 = area(12, 17);
area4 = area(13, 18);
area5 = area(20, 5);</pre></blockquote>


<p>We first created the area-calculating function using the
<em class="filename">function</em><a name="INDEX-89" /> statement, which defines (declares) a
function just as <em class="filename">var</em> declares a variable. Then
we gave our function a name, <tt class="literal">area</tt>, just as we give
variables names. Between the parentheses, we listed the arguments
that our function receives every time it's used:
<tt class="literal">height</tt> and <tt class="literal">width</tt>. And between
the curly braces (<a name="INDEX-90" />
<a name="INDEX-91" /> <a name="INDEX-92" /> <a name="INDEX-93" />{
}), we included the statement(s) we want our function to execute:</p>


<blockquote><pre class="code">return height * width;</pre></blockquote>


<p>After we create a function, we may run the code it contains from
anywhere in our movie by using its name. In our example we called the
<em class="filename">area( )</em> function five times, passing it the
<tt class="literal">height</tt> and <tt class="literal">width</tt> values it
expects each time: <em class="filename">area(10, 15)</em>,
<em class="filename">area(11, 16)</em>, and so on. The result of each
calculation is returned to us and we store those results in the
variables <tt class="literal">area1</tt> through <tt class="literal">area5</tt>.
Nice and neat, and much less work than the non-function version of
our code.</p>


<p>Don't fret if you have questions about this function example,
as we'll learn more about functions in <a href="ch09_01.htm">Chapter 9, "Functions"</a>. For now, just remember that functions give us
an extremely powerful way to create complex systems. Functions help
us reuse our code and package its functionality, extending the limits
of what is practical to build.</p>


<a name="ch01-20-fm2xml" /><div class="sect3">
<h3 class="sect3">1.2.4.1. Built-in functions</h3>


<p>Notice <a name="INDEX-94" />that <a name="INDEX-95" /> <a name="INDEX-96" />functions
<a name="INDEX-97" />take arguments just as the
<em class="filename">trace( )</em> Action does. Invoking the function
<em class="emphasis">area(4, 5);</em> looks very much the same as issuing
the <em class="filename">trace( )</em> command such as <em class="emphasis">trace
(x);</em>. The similarity is not a coincidence. As we pointed
out earlier, many Actions, including the <em class="filename">trace(
)</em> Action, are actually functions. But they are a special
type of function that is built into ActionScript (as opposed to
user-defined, like our <em class="filename">area( )</em> function). It is,
therefore, legitimate -- and technically more accurate -- to
say, "Call the <em class="filename">gotoAndStop( )</em>
function," than to say, "Execute a
<em class="filename">gotoAndStop</em> Action." A built-in function
is simply a reusable block of code that comes with ActionScript for
our convenience. Built-in functions let us do everything from
performing mathematical calculations to controlling movie clips. All
the built-in functions are listed in <a href="part3.htm">Part III, "Language Reference"</a>.
We'll also encounter many of them as we learn
ActionScript's fundamentals.</p>
</div>
</div>




<a name="ch01-21-fm2xml" /><div class="sect2">
<h3 class="sect2">1.2.5. Movie Clip Instances</h3>


<p>With all this talk about programming fundamentals, I hope you
haven't forgotten about the basics of Flash. One of the keys to
visual programming in Flash is <a name="INDEX-98" />
<a name="INDEX-99" />
<a name="INDEX-100" />movie clip
<em class="emphasis">instances</em>. As a Flash designer or developer, you
should already be familiar with movie clips, but you may not think of
movie clips as programming devices.</p>


<p>Every movie clip has a symbol definition that resides in the Library
of a Flash movie. We can add many copies, or
<em class="emphasis">instances</em>, of a single movie clip symbol to a
Flash movie by dragging the clip from the Library onto the Stage. A
great deal of advanced Flash programming is simply a matter of movie
clip instance control. A bouncing ball, for example, is nothing more
than a movie clip instance being repositioned on the Stage
repetitively. We can alter an instance's location, size,
current frame, rotation, and so forth, through ActionScript during
the playback of our movie.</p>


<p>If you're unfamiliar with movie clips and instances, consult
Flash's documentation or Help files before continuing with the
rest of this book.</p>
</div>




<a name="ch01-22-fm2xml" /><div class="sect2">
<h3 class="sect2">1.2.6. The Event-Based Execution Model</h3>


<p>One <a name="INDEX-101" />final topic we should consider in our
overview of
<a name="INDEX-102" /> <a name="INDEX-103" /> <a name="INDEX-104" />
<a name="INDEX-105" />
<a name="INDEX-106" />
<a name="INDEX-107" />ActionScript
fundamentals is the <em class="emphasis">execution model</em>, which
dictates when the code in your movie runs (is executed). You may have
code attached to various frames, buttons, and movie clips throughout
your movie. But when does it all actually run? To answer that
question, let's take a short stroll down computing
history's memory lane.</p>


<p>In the early days of computing, a program's instructions were
executed sequentially in the order that they appeared, starting with
the first line and ending with the last line. The program was meant
to perform some action and then stop. That kind of program, called a
<em class="emphasis">batch</em> program, doesn't handle the
interactivity required of an <em class="emphasis">event-based
</em>programming environment like Flash.</p>


<p>Event-based programs don't run in a linear fashion as batch
programs do. They run continuously (in an <em class="emphasis">event
loop</em>), waiting for things (<em class="emphasis">events</em>) to
happen and executing code segments in response to those events. In a
language designed for use with a visual interactive environment (such
as ActionScript or JavaScript), the events are typically user actions
such as mouseclicks or keystrokes.</p>


<p>When an event such as a mouseclick occurs, the interpreter sounds an
alarm. A program can then react to that alarm by asking the
interpreter to execute an appropriate segment of code. For example,
if a user clicks a button in a movie, we could execute some code that
displays a different section of the movie (classic navigation) or
submits variables to a database (classic form submission).</p>


<p>But programs don't react to events unless we create
<em class="emphasis">event handlers</em><a name="INDEX-108" />. Here's some pseudo-code that
shows generally how event handlers are set up:</p>


<blockquote><pre class="code">when (<em class="replaceable">this event happens</em>) { 
  <em class="replaceable">execute these lines of code</em>
}</pre></blockquote>


<p>This is typically written in the general form:</p>


<blockquote><pre class="code">on (<em class="replaceable">event</em>) {
  <em class="replaceable">statements</em>
}</pre></blockquote>


<p>In practice, an event handler for a button that moves the playhead to
frame 200 would read:</p>


<blockquote><pre class="code">on (press) {
  gotoAndStop(200);
}</pre></blockquote>


<p>Because event-based programs are always running an event loop, ready
to react to the next event, they are like living systems. Events are
a crucial part of Flash movies. Without events, our scripts
wouldn't do anything -- with one exception: Flash executes
any code on a
<a name="INDEX-109" />frame when the playhead enters
that frame. The implied event is simply the playhead entering the
particular frame, which is so intrinsic to Flash that no explicit
event handler is required.</p>


<p>Events literally make things happen, which is why they come at the
end of your first day of ActionScript language school. You've
learned what's involved in writing scripts and what governs
when those scripts will actually be executed (i.e., events).
I'd say you're ready to try your first real conversation.</p>
</div>


<hr width="684" align="left" />
<div class="navbar"><table width="684" border="0"><tr><td align="left" valign="top" width="228"><a href="ch01_01.htm"><img alt="Previous" border="0" src="../gifs/txtpreva.gif" /></a></td><td align="center" valign="top" width="228"><a href="index.htm"><img alt="Home" border="0" src="../gifs/txthome.gif" /></a></td><td align="right" valign="top" width="228"><a href="ch01_03.htm"><img alt="Next" border="0" src="../gifs/txtnexta.gif" /></a></td></tr><tr><td align="left" valign="top" width="228">1. A Gentle Introduction for Non-Programmers</td><td align="center" valign="top" width="228"><a href="index/index.htm"><img alt="Book Index" border="0" src="../gifs/index.gif" /></a></td><td align="right" valign="top" width="228">1.3. Building a Multiple-Choice Quiz</td></tr></table></div>
<hr width="684" align="left" />

<img alt="Library Navigation Links" border="0" src="../gifs/navbar.gif" usemap="#library-map" />
<p><font size="-1"><a href="copyrght.htm">Copyright &copy; 2002</a> O'Reilly &amp; Associates. All rights reserved.</font></p>

<map name="library-map"><area href="../index.htm" coords="0,1,78,93" shape="rect" /><area href="../wdesign/index.htm" coords="80,2,155,96" shape="rect" /><area href="../xhtml/index.htm" coords="158,0,263,97" shape="rect" /><area href="../audio/index.htm" coords="265,1,335,97" shape="rect" /><area href="../css/index.htm" coords="338,1,434,93" shape="rect" /><area href="index.htm" coords="439,0,540,102" shape="rect" /><area href="../infoarch/index.htm" coords="544,0,685,102" shape="rect" /></map>

</body></html>