<html><head><title>Datatype Conversion (ActionScript: The Definitive Guide)</title><link rel="stylesheet" type="text/css" href="../style/style1.css" />

<meta name="DC.Creator" content="Colin Moock" /><meta name="DC.Format" content="text/xml" scheme="MIME" /><meta name="DC.Language" content="en-US" /><meta name="DC.Publisher" content="O'Reilly &amp; Associates, Inc." /><meta name="DC.Source" scheme="ISBN" content="1565928520L" /><meta name="DC.Subject.Keyword" content="stuff" /><meta name="DC.Title" content="ActionScript: The Definitive Guide" /><meta name="DC.Type" content="Text.Monograph" />

</head><body bgcolor="#ffffff">

<img alt="Book Home" border="0" src="gifs/smbanner.gif" usemap="#banner-map" /><map name="banner-map"><area shape="rect" coords="1,-2,616,66" href="index.htm" alt="ActionScript: The Definitive Guide" /><area shape="rect" coords="629,-11,726,25" href="jobjects/fsearch.htm" alt="Search this book" /></map>

<div class="navbar"><table width="684" border="0"><tr><td align="left" valign="top" width="228"><a href="ch03_03.htm"><img alt="Previous" border="0" src="../gifs/txtpreva.gif" /></a></td><td align="center" valign="top" width="228"><a href="index.htm">ActionScript: The Definitive Guide</a></td><td align="right" valign="top" width="228"><a href="ch03_05.htm"><img alt="Next" border="0" src="../gifs/txtnexta.gif" /></a></td></tr></table></div>
<hr width="684" align="left" />


<h2 class="sect1">3.4. Datatype Conversion</h2>


<p>Take a <a name="INDEX-293" />
<a name="INDEX-294" />closer look at the example from the
previous section. In that example, each datum -- "1"
and 2 -- belonged to its own datatype; the first was a string and
the second a number. We saw that the interpreter joined the two
values together to form the string "12". Note that the
interpreter first had to <em class="emphasis">convert</em> the
<em class="emphasis">number</em> 2 into the <em class="emphasis">string</em>
"2". Only after that automatic conversion was performed
could the value "2" be joined (concatenated) to the
string "1".</p>


<p>Datatype conversion simply means changing the type of a datum. Not
all datatype conversions are automatic; we may also change a
datum's type explicitly in order to override the default
datatyping that ActionScript would otherwise perform.</p>


<a name="ch03-8-fm2xml" /><div class="sect2">
<h3 class="sect2">3.4.1. Automatic Type Conversion</h3>


<p>Whenever <a name="INDEX-295" /> <a name="INDEX-296" /> <a name="INDEX-297" />we use a value in a context that does
not match its datatype, the interpreter attempts a conversion. That
is, if the interpreter expects data of type A, and we provide data of
type B, the interpreter will attempt to convert our type B data into
type A data. For example, in the following code we use the string
"Flash" as the righthand operand of the subtraction
operator. Since only numbers may be used with the subtraction
operator, the interpreter attempts to convert the string
"Flash" into a number:</p>


<blockquote><pre class="code">999 - "Flash";</pre></blockquote>


<p>Of course, the string "Flash" can't be successfully
converted into any legitimate number, so it is converted into the
special numeric data value
<tt class="literal">NaN</tt><a name="INDEX-298" /> <a name="INDEX-299" /> (i.e., Not-a-Number).
<tt class="literal">NaN</tt> is a legal value of the
<em class="emphasis">number</em> datatype, intended specifically to handle
such a situation. With "Flash" converted to
<tt class="literal">NaN</tt>, our expression ends up looking like this to
the interpreter (though we never see this internal step):</p>


<blockquote><pre class="code">999 - NaN;</pre></blockquote>


<p>Both operands of the subtraction operator are now numbers, so the
operation can proceed: <tt class="literal">999</tt> <tt class="literal">-</tt>
<tt class="literal">NaN</tt> yields the value<em class="emphasis">
</em><tt class="literal">NaN</tt>, which is the final value of our
expression.</p>


<p>An expression that yields the numeric value <tt class="literal">NaN</tt>
isn't particularly useful; most conversions have more
functional results. For example, if a string contains only numeric
characters, it can be converted into a useful number. The expression:</p>


<blockquote><pre class="code">999 - "9";  // The number 999 minus the string "9"</pre></blockquote>


<p>converts internally to:</p>


<blockquote><pre class="code">999 - 9;    // The number 999 minus the number 9</pre></blockquote>


<p>which yields the value 990 when the expression is resolved. Automatic
conversion is most common with the plus operator, the equality
operator, the comparison operators, and conditional or loop
statements. In order to be sure of the result of any expression that
involves automatic conversion, we have to answer three questions: (a)
what is the expected datatype of the current context? (b) what
happens when an unexpected datatype is supplied in that context? and
(c) when conversion occurs, what is the resulting value?</p>


<p>To answer the first and second questions, we need to consult the
appropriate topics elsewhere in this book (e.g., to determine what
datatype is expected in a conditional statement, see <a href="ch07_01.htm">Chapter 7, "Conditionals"</a>).</p>


<p>The next three tables, which list the rules of automatic conversion,
answer the third question, "When conversion occurs, what is the
resulting value?" <a href="ch03_04.htm">Table 3-1</a> shows the
results of converting each datatype to a <a name="INDEX-300" />
<a name="INDEX-301" />
<a name="INDEX-302" />number.</p>


<a name="ch03-80470" /><h4 class="objtitle">Table 3-1. Converting to a Number </h4><table border="1">



<tr>
<th>
<p>Original Data</p></th>
<th>
<p>Result After Conversion</p></th>
</tr>




<tr>
<td>
<p><tt class="literal">undefined</tt></p></td>
<td>
<p><tt class="literal">0</tt></p></td>
</tr>

<tr>
<td>
<p><tt class="literal">null</tt></p></td>
<td>
<p><tt class="literal">0</tt></p></td>
</tr>

<tr>
<td>
<p>Boolean</p></td>
<td>
<p><tt class="literal">1</tt> if the original value is
<tt class="literal">true</tt>; <tt class="literal">0</tt> if the original value
is <tt class="literal">false</tt></p></td>
</tr>

<tr>
<td>
<p>Numeric string</p></td>
<td>
<p>Equivalent numeric value if string is composed only of base-10
numbers, whitespace, exponent, decimal point, plus sign, or minus
sign (e.g., "-1.485e2")</p></td>
</tr>

<tr>
<td>
<p>Other strings</p></td>
<td>
<p>Empty strings, non-numeric strings, including strings starting with
<tt class="literal">"x"</tt>, <tt class="literal">"0x"</tt>, or
<tt class="literal">"FF"</tt>, convert to <tt class="literal">NaN</tt></p></td>
</tr>

<tr>
<td>
<p><tt class="literal">"Infinity"</tt></p></td>
<td>
<p><tt class="literal">Infinity</tt></p></td>
</tr>

<tr>
<td>
<p><tt class="literal">"-Infinity"</tt></p></td>
<td>
<p><tt class="literal">-Infinity</tt></p></td>
</tr>

<tr>
<td>
<p><tt class="literal">"NaN"</tt></p></td>
<td>
<p><tt class="literal">NaN</tt></p></td>
</tr>

<tr>
<td>
<p>Array</p></td>
<td>
<p><tt class="literal">NaN</tt></p></td>
</tr>

<tr>
<td>
<p>Object</p></td>
<td>
<p>The return value of the object's <em class="filename">valueOf(
)</em> method</p></td>
</tr>

<tr>
<td>
<p>Movieclip</p></td>
<td>
<p><tt class="literal">NaN</tt></p></td>
</tr>


</table>


<p><a href="ch03_04.htm">Table 3-2</a> shows the results of converting each
<a name="INDEX-303" /> <a name="INDEX-304" /> <a name="INDEX-305" />datatype to a
string.</p>


<a name="ch03-26872" /><h4 class="objtitle">Table 3-2. Converting to a String </h4><table border="1">



<tr>
<th>
<p>Original Data</p></th>
<th>
<p>Result After Conversion</p></th>
</tr>




<tr>
<td>
<p><tt class="literal">undefined</tt></p></td>
<td>
<p><tt class="literal">""</tt> (the empty string).</p></td>
</tr>

<tr>
<td>
<p><tt class="literal">null</tt></p></td>
<td>
<p><tt class="literal">"null"</tt>.</p></td>
</tr>

<tr>
<td>
<p>Boolean</p></td>
<td>
<p><tt class="literal">"true"</tt> if the original value was
<tt class="literal">true</tt>; <tt class="literal">"false"</tt> if the original
value was <tt class="literal">false</tt>.</p></td>
</tr>

<tr>
<td>
<p><tt class="literal">NaN</tt></p></td>
<td>
<p><tt class="literal">"NaN"</tt>.</p></td>
</tr>

<tr>
<td>
<p><tt class="literal">0</tt></p></td>
<td>
<p><tt class="literal">"0"</tt>.</p></td>
</tr>

<tr>
<td>
<p><tt class="literal">Infinity</tt></p></td>
<td>
<p><tt class="literal">"Infinity"</tt>.</p></td>
</tr>

<tr>
<td>
<p><tt class="literal">-Infinity</tt></p></td>
<td>
<p><tt class="literal">"-Infinity"</tt>.</p></td>
</tr>

<tr>
<td>
<p>Other numeric value</p></td>
<td>
<p>String equivalent of the number. For example,
<tt class="literal">944.345</tt> becomes <tt class="literal">"944.345"</tt>.</p></td>
</tr>

<tr>
<td>
<p>Array</p></td>
<td>
<p>A comma-separated list of element values.</p></td>
</tr>

<tr>
<td>
<p>Object</p></td>
<td>
<p>The value that results from calling <em class="filename">toString( )</em>
on the object. By default, the <em class="filename">toString( )</em>
method of an object returns <tt class="literal">"[object</tt>
<tt class="literal">Object]"</tt>. The <em class="filename">toString( )</em>
method can be customized to return a more useful result (e.g.,
<em class="filename">toString( )</em> of a <em class="filename">Date</em>
object returns: <tt class="literal">"Sun</tt> <tt class="literal">May 14 11:38:10 EDT
2000"</tt>).</p></td>
</tr>

<tr>
<td>
<p>Movieclip</p></td>
<td>
<p>The path to the movie clip instance, given in absolute terms starting
with the document level in the Player. For example,
<tt class="literal">"_level0.ball"</tt>.</p></td>
</tr>


</table>


<p><a href="ch03_04.htm">Table 3-3</a> shows the results of converting each
<a name="INDEX-306" />
<a name="INDEX-307" />
<a name="INDEX-308" />datatype to a
Boolean.</p>


<a name="ch03-52996" /><h4 class="objtitle">Table 3-3. Converting to a Boolean </h4><table border="1">



<tr>
<th>
<p>Original Data</p></th>
<th>
<p>Result After Conversion</p></th>
</tr>




<tr>
<td>
<p><tt class="literal">undefined</tt></p></td>
<td>
<p><tt class="literal">false</tt></p></td>
</tr>

<tr>
<td>
<p><tt class="literal">null</tt></p></td>
<td>
<p><tt class="literal">false</tt></p></td>
</tr>

<tr>
<td>
<p><tt class="literal">NaN</tt></p></td>
<td>
<p><tt class="literal">false</tt></p></td>
</tr>

<tr>
<td>
<p>0</p></td>
<td>
<p><tt class="literal">false</tt></p></td>
</tr>

<tr>
<td>
<p><tt class="literal">Infinity</tt></p></td>
<td>
<p><tt class="literal">true</tt></p></td>
</tr>

<tr>
<td>
<p><tt class="literal">-Infinity</tt></p></td>
<td>
<p><tt class="literal">true</tt></p></td>
</tr>

<tr>
<td>
<p>Other numeric value</p></td>
<td>
<p><tt class="literal">true</tt></p></td>
</tr>

<tr>
<td>
<p>Nonempty string</p></td>
<td>
<p><tt class="literal">true</tt> if the string can be converted to a valid
nonzero number, <tt class="literal">false</tt> if not; in ECMA-262, a
non-empty string always converts to <tt class="literal">true</tt> (Flash 5
breaks the rules in order to maintain compatibility with Flash 4)</p></td>
</tr>

<tr>
<td>
<p>Empty string (<tt class="literal">""</tt>)</p></td>
<td>
<p><tt class="literal">false</tt></p></td>
</tr>

<tr>
<td>
<p>Array</p></td>
<td>
<p><tt class="literal">true</tt></p></td>
</tr>

<tr>
<td>
<p>Object</p></td>
<td>
<p><tt class="literal">true</tt></p></td>
</tr>

<tr>
<td>
<p>Movieclip</p></td>
<td>
<p><a name="INDEX-309" />
<a name="INDEX-310" />
<a name="INDEX-311" /><tt class="literal">true</tt></p></td>
</tr>


</table>
</div>




<a name="ch03-40236" /><div class="sect2">
<h3 class="sect2">3.4.2. Explicit Type Conversion</h3>


<p>If the <a name="INDEX-312" /> <a name="INDEX-313" />automatic (implicit) type-conversion
rules do not suit our purpose, we can manually (explicitly) change a
datum's type. When we take matters into our own hands, we must
remember that the rules listed in the preceding tables still apply.</p>


<a name="ch03-9-fm2xml" /><div class="sect3">
<h3 class="sect3">3.4.2.1. Converting to a string with the toString( ) method</h3>


<p>We can invoke the <em class="filename">toString(
)</em><a name="INDEX-314" />
method to convert any datum to a string. For example:</p>


<blockquote><pre class="code">x.toString( );      // Get the string value of the variable <em class="replaceable">x</em>.
(523).toString( );  // Returns "523". Note that we use parentheses 
                   // so that the "." isn't treated as a decimal point</pre></blockquote>


<p>When we invoke the <em class="filename">toString( )</em> method on a
number, we may also provide a numeric argument indicating the base of
the number system in which we'd like the converted string to be
represented. This provides a handy means of switching between
hexadecimal, decimal, and octal numbers. For example:</p>


<blockquote><pre class="code">var myColor = 255;
var hexColor = myColor.toString(16);  // Sets <em class="replaceable">hexColor</em> to "ff"</pre></blockquote>
</div>



<a name="ch03-10-fm2xml" /><div class="sect3">
<h3 class="sect3">3.4.2.2. Converting to a string with the String( ) function</h3>


<p>The <em class="filename">String( )</em><a name="INDEX-315" /> function has the same result as
the <em class="filename">toString( )</em> method, but uses a different
grammar:</p>


<blockquote><pre class="code">String(x);    // Convert <em class="replaceable">x</em> to a string
String(523);  // Convert 523 to the string "523"</pre></blockquote>


<p>Don't confuse the global <em class="filename">String( )</em>
function with the built-in class constructor of the same name. Both
are described in <a href="part3.htm">Part III, "Language Reference"</a>.</p>
</div>



<a name="ch03-11-fm2xml" /><div class="sect3">
<h3 class="sect3">3.4.2.3. Converting to a string with empty string concatenation</h3>


<p>Because the <a name="INDEX-316" /> <a name="INDEX-317" /> <a name="INDEX-318" /> <a name="INDEX-319" />plus <a name="INDEX-320" />operator (<tt class="literal">+</tt>)
favors strings in its automatic conversion rules, adding
<tt class="literal">""</tt> to any datum converts that datum to a string.</p>


<blockquote><pre class="code">x + "";      // Convert <em class="replaceable">x</em> to a string
523 + "";    // Convert 523 to the string "523"</pre></blockquote>
<a name="INDEX-321" />
<a name="INDEX-322" />
<a name="INDEX-323" />
</div>



<a name="ch03-12-fm2xml" /><div class="sect3">
<h3 class="sect3">3.4.2.4. Converting to a number with the Number( ) function</h3>


<p>Just <a name="INDEX-324" />
<a name="INDEX-325" />
<a name="INDEX-326" />as the
<em class="filename">String( )</em> function converts data to the string
type, the <em class="filename">Number( )</em><a name="INDEX-327" /> function converts its argument
to the <em class="emphasis">number</em> type. When conversion to a real
number is impossible or illogical, the <em class="filename">Number( )</em>
function returns a special numeric value as described in <a href="ch03_04.htm">Table 3-1</a>. Some examples:</p>


<blockquote><pre class="code">Number(age);     // Yields the value of <em class="replaceable">age</em> converted to a number
Number("29");    // Yields the number 29
Number("sara");  // Yields NaN</pre></blockquote>


<p>Don't confuse the global <em class="filename">Number( )</em>
function with the built-in class constructor of the same name. Both
are described in <a href="part3.htm">Part III, "Language Reference"</a>.</p>


<p>Because user input in <a name="INDEX-328" />on-screen text fields always belong to
the string type, it's necessary to convert text fields to
numbers when performing mathematical calculations. For example, if we
want to find the sum of the text fields <tt class="literal">price1</tt> and
<tt class="literal">price2</tt>, we use:</p>


<blockquote><pre class="code">totalCost = Number(price1) + Number(price2);</pre></blockquote>


<p>Otherwise, <tt class="literal">price1</tt> and <tt class="literal">price2</tt>
will be concatenated as strings, not added as numbers. For more
information on text fields, see <a href="ch18_01.htm">Chapter 18, "On-Screen Text Fields"</a>.</p>
</div>



<a name="ch03-13-fm2xml" /><div class="sect3">
<h3 class="sect3">3.4.2.5. Converting to a number by subtracting zero</h3>


<p>To trick the interpreter into converting a datum to a number, we can
subtract zero from that datum. Again, the conversion follows the
rules described in <a href="ch03_04.htm">Table 3-1</a>:</p>


<blockquote><pre class="code">"953" - 0      // Yields 953
"molly" - 0    // Yields NaN
x - 0          // Yields the value of <em class="replaceable">x</em> converted to a number</pre></blockquote>
</div>



<a name="ch03-14-fm2xml" /><div class="sect3">
<h3 class="sect3">3.4.2.6. Converting to a number using the parseInt( ) and parseFloat( ) functions</h3>


<p>The <em class="filename">parseInt( )</em><a name="INDEX-329" />
<a name="INDEX-330" /> and <em class="filename">parseFloat( )</em>
functions convert a string containing numbers and letters into a
number. The <em class="filename">parseInt( )</em> function extracts the
first integer that appears in a string, provided that the
string's first non-blank character is a legal numeric
character. Otherwise, <em class="filename">parseInt( )</em> yields
<tt class="literal">NaN</tt>. The number extracted via <em class="filename">parseInt(
)</em> starts with the first non-blank character in the string
and ends with the character before either the first non-numeric
character or the first occurrence of a decimal point.</p>


<p>Some <em class="filename">parseInt( )</em> examples:</p>


<blockquote><pre class="code">parseInt("1a")                 // Extracts 1
parseInt("1.3a"                // Extracts 1
parseInt("     1a")            // Extracts 1
parseInt("I am 14 years old")  // Yields NaN (the first non-blank
                               // character is not a number)
parseInt("14 years old")       // Extracts 14</pre></blockquote>


<p>The <em class="filename">parseFloat( )</em> function extracts the first
<a name="INDEX-331" />floating-point number that appears in a
string, provided that the string's first non-blank character is
a valid numeric character. (A floating-point number is a positive or
negative number that contains a decimal value, such as -10.5 or
345.678.) Like <em class="filename">parseInt( )</em>,
<em class="filename">parseFloat( )</em> yields the special numeric value
<tt class="literal">NaN</tt> if the string's first non-blank
character is not a valid numeric character. The number extracted by
<em class="filename">parseFloat( )</em> is a series of characters that
starts with the first non-blank character in the string and ends with
the character before the first non-numeric character (any character
other than <tt class="literal">+</tt>, <tt class="literal">-</tt>, 0-9, or a
decimal point).</p>


<p>Some <em class="filename">parseFloat( )</em> examples:</p>


<blockquote><pre class="code">parseFloat("1.3a");             // Extracts 1.3
parseFloat("2.75 years old")    // Extracts 2.75
parseFloat("1nce upon a time")  // Extracts 1
parseFloat("I'm 3.5 feet tall") // Yields NaN</pre></blockquote>


<p>For more information on <em class="filename">parseInt( )</em> and
<em class="filename">parseFloat( )</em>, see <a href="part3.htm">Part III, "Language Reference"</a>.</p>
</div>



<a name="ch03-15-fm2xml" /><div class="sect3">
<h3 class="sect3">3.4.2.7. Converting to a Boolean</h3>


<p>When <a name="INDEX-332" />
<a name="INDEX-333" />
<a name="INDEX-334" />we want to
convert a datum to a Boolean, we can use the global
<em class="filename">Boolean( )</em><a name="INDEX-335" /> function, which uses similar syntax to
the <em class="filename">String( )</em> and <em class="filename">Number( )</em>
functions. For example:</p>


<blockquote><pre class="code">Boolean(5);  // The result is true
Boolean(x);  // Converts value of <em class="replaceable">x</em> to a Boolean</pre></blockquote>


<p>Don't confuse the global <em class="filename">Boolean( )</em>
function with the built-in class constructor of the same name. Both
are described <a name="INDEX-336" /> <a name="INDEX-337" />in <a href="part3.htm">Part III, "Language Reference"</a>.</p>
</div>
</div>




<a name="ch03-16-fm2xml" /><div class="sect2">
<h3 class="sect2">3.4.3. Conversion Duration </h3>


<p>All type
<a name="INDEX-338" />
<a name="INDEX-339" />
<a name="INDEX-340" />
<a name="INDEX-341" />conversions performed on variables,
array elements, and object properties are temporary unless the
conversion happens as part of an assignment. Here we see a temporary
conversion:</p>


<blockquote><pre class="code">var x = "10";     // <em class="replaceable">x</em> is a string
y = x - 5;        // <em class="replaceable">y</em> is now 5; <em class="replaceable">x</em>'s value was converted to a number
trace(typeof x);  // Displays: "string"; the conversion was temporary</pre></blockquote>


<p>Here we see a permanent conversion that is the result of an
assignment:</p>


<blockquote><pre class="code">x = "10";         // <em class="replaceable">x</em> is a string
x = x - 5;        // <em class="replaceable">x</em> is converted to a number
trace(typeof x);  // Displays: "number". The conversion was permanent because
                  // it occurred as part of an assignment.</pre></blockquote>
</div>




<a name="ch03-51255" /><div class="sect2">
<h3 class="sect2">3.4.4. Flash 4-to-Flash 5 Datatype Conversion</h3>


<p>In <a name="INDEX-342" />
<a name="INDEX-343" />
<a name="INDEX-344" />
<a name="INDEX-345" />Flash 4, the string operators and
the numeric operators were completely distinct -- one set of
operators worked only with numbers, and a second set worked only with
strings. For example, the string concatenation operator in Flash 4
was <tt class="literal">&amp;</tt>, but the mathematical addition operator
was <tt class="literal">+</tt>. Similarly, string comparisons were done
with the <tt class="literal">eq</tt> and <tt class="literal">ne</tt> operators,
but numeric comparisons were accomplished via <tt class="literal">=</tt>
and <tt class="literal">&lt;&gt;</tt>. <a href="ch03_04.htm">Table 3-4</a> lists
the Flash 5 syntax for analogous Flash 4 operators.</p>


<a name="ch03-11455" /><h4 class="objtitle">Table 3-4. Flash 4 Versus Flash 5 Operators </h4><table border="1">




<tr>
<th>
<p>Operation</p></th>
<th>
<p>Flash 4 Syntax</p></th>
<th>
<p>Flash 5 Syntax</p></th>
</tr>




<tr>
<td>
<p>String concatenation</p></td>
<td>
<p><tt class="literal">&amp;</tt><a name="INDEX-346" />
<a name="INDEX-347" /> <a name="INDEX-348" /></p></td>
<td>
<p><tt class="literal">+</tt> or <em class="filename">add</em></p></td>
</tr>

<tr>
<td>
<p>String equality</p></td>
<td>
<p><a name="INDEX-349" /> <a name="INDEX-350" /><tt class="literal">eq</tt></p></td>
<td>
<p><tt class="literal">==</tt></p></td>
</tr>

<tr>
<td>
<p>String inequality</p></td>
<td>
<p><a name="INDEX-351" /> <a name="INDEX-352" /> <a name="INDEX-353" />
<a name="INDEX-354" /><tt class="literal">ne</tt></p></td>
<td>
<p><tt class="literal">!=</tt></p></td>
</tr>

<tr>
<td>
<p>String comparison</p></td>
<td>
<p><a name="INDEX-355" /> <a name="INDEX-356" />
<a name="INDEX-357" /> <a name="INDEX-358" /><tt class="literal">ge</tt>, <tt class="literal">gt</tt>,
<a name="INDEX-359" /> <a name="INDEX-360" />
<a name="INDEX-361" /> <a name="INDEX-362" /><tt class="literal">le</tt>, <tt class="literal">lt</tt></p></td>
<td>
<p><tt class="literal">&gt;=</tt>, <tt class="literal">&gt;</tt>,
<tt class="literal">&lt;=</tt>, <tt class="literal">&lt;</tt></p></td>
</tr>

<tr>
<td>
<p>Numeric addition</p></td>
<td>
<p><tt class="literal">+</tt></p></td>
<td>
<p><tt class="literal">+</tt></p></td>
</tr>

<tr>
<td>
<p>Numeric equality</p></td>
<td>
<p><tt class="literal">=</tt></p></td>
<td>
<p><tt class="literal">==</tt></p></td>
</tr>

<tr>
<td>
<p>Numeric inequality</p></td>
<td>
<p><tt class="literal">&lt;&gt;</tt></p></td>
<td>
<p><tt class="literal">!=</tt></p></td>
</tr>

<tr>
<td>
<p>Numeric comparison</p></td>
<td>
<p><tt class="literal">&gt;=</tt>, <tt class="literal">&gt;</tt>,
<tt class="literal">&lt;=</tt>, <tt class="literal">&lt;</tt></p></td>
<td>
<p><tt class="literal">&gt;=</tt>, <tt class="literal">&gt;</tt>,
<tt class="literal">&lt;=</tt>, <tt class="literal">&lt;</tt></p></td>
</tr>


</table>


<p>Some Flash 5 operators can operate on both strings and numbers. For
example, when used with strings, the <tt class="literal">+</tt> operator
concatenates its operands together to form a new string. But when
used with numbers, the <tt class="literal">+</tt> operator adds its two
operands together mathematically. Similarly, the equality operator
(<tt class="literal">==</tt>) and inequality operator
(<tt class="literal">!=</tt>) in Flash 5 are used to compare strings,
numbers, and other datatypes.</p>


<p>Because many Flash 5 operators work with multiple datatypes but Flash
4 operators do not, an ambiguity arises when a Flash 4 file is
imported into Flash 5. Therefore, when importing Flash 4 files, Flash
5 automatically inserts the <em class="filename">Number( )</em> function
around any numeric data that is used as an operand of the following
potentially ambiguous operators (unless the operand is a numeric
literal):</p>


<blockquote class="simplelist">

<p><tt class="literal">+, ==, !=, &lt;&gt;, &lt;, &gt;, &gt;=, &lt;=</tt></p>

</blockquote>


<p>Flash 4 files converted to Flash 5 will also have the string
concatenation operator (<tt class="literal">&amp;</tt>) changed to the new
<em class="filename">add</em> operator. <a href="ch03_04.htm">Table 3-5</a>
contains examples of Flash 4-to-Flash 5 operator translation.</p>


<a name="ch03-31810" /><h4 class="objtitle">Table 3-5. Sample Flash 4-to-Flash 5 Operator Translations </h4><table border="1">



<tr>
<th>
<p>Flash 4 Syntax</p></th>
<th>
<p>Flash 5 Syntax</p></th>
</tr>




<tr>
<td>
<blockquote><pre class="code">Loop While (count &lt;= numRecords)</pre></blockquote></td>
<td>
<blockquote><pre class="code">while (Number(count)&lt;=
Number(numRecords))</pre></blockquote></td>
</tr>

<tr>
<td>
<blockquote><pre class="code">If (x = 15)</pre></blockquote></td>
<td>
<blockquote><pre class="code">if(Number(x) == 15)</pre></blockquote></td>
</tr>

<tr>
<td>
<blockquote><pre class="code">If (y &lt;&gt; 20)</pre></blockquote></td>
<td>
<blockquote><pre class="code">if(Number(y) != 20)</pre></blockquote></td>
</tr>

<tr>
<td>
<blockquote><pre class="code">Set Variable: "lastName" = "kavanagh"</pre></blockquote></td>
<td>
<blockquote><pre class="code">lastName = "kavanagh"</pre></blockquote></td>
</tr>

<tr>
<td>
<blockquote><pre class="code">Set Variable: "name" = "molly" &amp; lastName</pre></blockquote></td>
<td>
<blockquote><pre class="code">name = "molly" add lastName</pre></blockquote></td>
</tr>


</table>
</div>




<a name="ch03-17-fm2xml" /><div class="sect2">
<h3 class="sect2">3.4.5. Determining the Type of an Existing Datum</h3>


<p>To <a name="INDEX-363" /> <a name="INDEX-364" />determine what kind of data is held in a
given expression before, say, proceeding with a section of code, we
use the <em class="filename">typeof</em> operator, as follows:</p>


<blockquote><pre class="code">typeof <em class="replaceable">expression</em>;</pre></blockquote>


<p>The <em class="emphasis">typeof</em> operator returns a string telling us
the datatype of <em class="replaceable">expression</em>, according to
<a href="ch03_04.htm">Table 3-6</a>.</p>


<a name="ch03-33480" /><h4 class="objtitle">Table 3-6. Return Values of typeof </h4><table border="1">



<tr>
<th>
<p>Original Datatype</p></th>
<th>
<p>typeof Return Value</p></th>
</tr>




<tr>
<td>
<p>Number</p></td>
<td>
<p><tt class="literal">"number"</tt></p></td>
</tr>

<tr>
<td>
<p>String</p></td>
<td>
<p><tt class="literal">"string"</tt></p></td>
</tr>

<tr>
<td>
<p>Boolean</p></td>
<td>
<p><tt class="literal">"boolean"</tt></p></td>
</tr>

<tr>
<td>
<p>Object</p></td>
<td>
<p><tt class="literal">"object"</tt></p></td>
</tr>

<tr>
<td>
<p>Array</p></td>
<td>
<p><tt class="literal">"object"</tt></p></td>
</tr>

<tr>
<td>
<p><tt class="literal">null</tt></p></td>
<td>
<p><tt class="literal">"null"</tt></p></td>
</tr>

<tr>
<td>
<p>Movieclip</p></td>
<td>
<p><tt class="literal">"movieclip"</tt></p></td>
</tr>

<tr>
<td>
<p>Function</p></td>
<td>
<p><tt class="literal">"function"</tt></p></td>
</tr>

<tr>
<td>
<p><tt class="literal">undefined</tt></p></td>
<td>
<p><tt class="literal">"undefined"</tt></p></td>
</tr>


</table>


<p>Here are a few examples:</p>


<blockquote><pre class="code">trace(typeof "game over");    // Displays: "string" in the Output window

var x = 5;
trace(typeof x);              // Displays: "number"

var now = new Date( );
trace(typeof now);            // Displays: "object"</pre></blockquote>


<p>As shown in <a href="ch03_04.htm">Example 3-1</a>, when combined with a
<em class="filename">for-in</em> statement, <em class="filename">typeof</em>
provides a handy way to find all the movie clip instances on a
timeline. Once identified, we can assign the clips to an array for
programmatic handling. (If you can't follow all of <a href="ch03_04.htm">Example 3-1</a>, revisit it after completing <a href="part1.htm">Part I, "ActionScript Fundamentals"</a>.)</p>


<a name="ch03-60634" /><div class="example">
<h4 class="objtitle">Example 3-1. Populating an Array with Dynamically Identified Movie Clips </h4>

<blockquote><pre class="code">var childClip = new Array( );
var childClipCount = 0;

for (i in _root) {
   thisItem = _root[i];
   if (typeof thisItem == "movieclip") {
     // Notice the use of the postfix increment operator
     childClip[childClipCount++] = thisItem;  
  }
}

// Now that our array is populated, we can use it
// to manipulate the clips it contains
childClip[0]._x = 0;  // Place the first clip on the left of the Stage
childClip[1]._y = 0;  // Place the second clip at the top of the Stage</pre></blockquote>
</div>
<a name="INDEX-365" />
<a name="INDEX-366" />
</div>


<hr width="684" align="left" />
<div class="navbar"><table width="684" border="0"><tr><td align="left" valign="top" width="228"><a href="ch03_03.htm"><img alt="Previous" border="0" src="../gifs/txtpreva.gif" /></a></td><td align="center" valign="top" width="228"><a href="index.htm"><img alt="Home" border="0" src="../gifs/txthome.gif" /></a></td><td align="right" valign="top" width="228"><a href="ch03_05.htm"><img alt="Next" border="0" src="../gifs/txtnexta.gif" /></a></td></tr><tr><td align="left" valign="top" width="228">3.3. Creating and Categorizing Data</td><td align="center" valign="top" width="228"><a href="index/index.htm"><img alt="Book Index" border="0" src="../gifs/index.gif" /></a></td><td align="right" valign="top" width="228">3.5. Primitive Data Versus Composite Data</td></tr></table></div>
<hr width="684" align="left" />

<img alt="Library Navigation Links" border="0" src="../gifs/navbar.gif" usemap="#library-map" />
<p><font size="-1"><a href="copyrght.htm">Copyright &copy; 2002</a> O'Reilly &amp; Associates. All rights reserved.</font></p>

<map name="library-map"><area href="../index.htm" coords="0,1,78,93" shape="rect" /><area href="../wdesign/index.htm" coords="80,2,155,96" shape="rect" /><area href="../xhtml/index.htm" coords="158,0,263,97" shape="rect" /><area href="../audio/index.htm" coords="265,1,335,97" shape="rect" /><area href="../css/index.htm" coords="338,1,434,93" shape="rect" /><area href="index.htm" coords="439,0,540,102" shape="rect" /><area href="../infoarch/index.htm" coords="544,0,685,102" shape="rect" /></map>

</body></html>