<html><head><title>Removing Clip Instances and Main Movies (ActionScript: The Definitive Guide)</title><link rel="stylesheet" type="text/css" href="../style/style1.css" />

<meta name="DC.Creator" content="Colin Moock" /><meta name="DC.Format" content="text/xml" scheme="MIME" /><meta name="DC.Language" content="en-US" /><meta name="DC.Publisher" content="O'Reilly &amp; Associates, Inc." /><meta name="DC.Source" scheme="ISBN" content="1565928520L" /><meta name="DC.Subject.Keyword" content="stuff" /><meta name="DC.Title" content="ActionScript: The Definitive Guide" /><meta name="DC.Type" content="Text.Monograph" />

</head><body bgcolor="#ffffff">

<img alt="Book Home" border="0" src="gifs/smbanner.gif" usemap="#banner-map" /><map name="banner-map"><area shape="rect" coords="1,-2,616,66" href="index.htm" alt="ActionScript: The Definitive Guide" /><area shape="rect" coords="629,-11,726,25" href="jobjects/fsearch.htm" alt="Search this book" /></map>

<div class="navbar"><table width="684" border="0"><tr><td align="left" valign="top" width="228"><a href="ch13_05.htm"><img alt="Previous" border="0" src="../gifs/txtpreva.gif" /></a></td><td align="center" valign="top" width="228"><a href="index.htm">ActionScript: The Definitive Guide</a></td><td align="right" valign="top" width="228"><a href="ch13_07.htm"><img alt="Next" border="0" src="../gifs/txtnexta.gif" /></a></td></tr></table></div>
<hr width="684" align="left" />


<h2 class="sect1">13.6. Removing Clip Instances and Main Movies</h2>


<p>We've <a name="INDEX-1741" />
<a name="INDEX-1742" />learned to
create and refer to movie clips; now let's see how to turn them
into so many recycled electrons (in other words, blow 'em
away).</p>


<p>The manner in which we created an instance or a movie determines the
technique we use to remove that instance or movie later. We can
explicitly remove movies and instances using <em class="filename">unloadMovie(
)</em> and <em class="filename">removeMovieClip( )</em>.
Additionally, we may evict a clip implicitly by loading, attaching,
or duplicating a new clip in its stead. Let's look at these
techniques individually.</p>


<a name="ch13-36-fm2xml" /><div class="sect2">
<h3 class="sect2">13.6.1. Using unloadMovie( ) with Instances and Levels</h3>


<p>The built-in <em class="filename">unloadMovie(
)</em><a name="INDEX-1743" />
<a name="INDEX-1744" /> function can remove any
clip instance or main movie -- both those created manually and
those created via <em class="filename">loadMovie( )</em>,
<em class="filename">duplicateMovieClip( )</em>, and
<em class="filename">attachMovie( )</em>.<em class="filename"> </em>It can be
invoked both as a global function and as a method:</p>


<blockquote><pre class="code">unloadMovie(<em class="replaceable">clipOrLevel</em>);   // Global function
<em class="replaceable">clipOrLevel</em>.unloadMovie( );  // Method</pre></blockquote>


<p>In global function form, <em class="replaceable">clipOrLevel</em> is a
string indicating the path to the clip or level to unload. And due to
automatic value conversion, <em class="replaceable">clipOrLevel</em>
may also be a movie clip reference (movie clips are converted to
paths when used as strings). In method form,
<em class="replaceable">clipOrLevel</em> must be a reference to a movie
clip object. The exact behavior of <em class="filename">unloadMovie(
)</em> varies according to whether it is used on a level or an
instance.</p>


<a name="ch13-37-fm2xml" /><div class="sect3">
<h3 class="sect3">13.6.1.1. Using unloadMovie( ) with levels</h3>


<p>When applied to a level in the document stack (e.g.,
<tt class="literal">_level0</tt>, <tt class="literal">_level1</tt>,
<tt class="literal">_level2</tt>), <em class="filename">unloadMovie( )</em>
completely removes the target level and the movie that the level
contains. Subsequent references to the level yield
<tt class="literal">undefined</tt>. Removing document levels is the most
common use of the <em class="filename">unloadMovie( )</em> function:</p>


<blockquote><pre class="code">unloadMovie("_level1");
_level1.unloadMovie( );</pre></blockquote>
</div>



<a name="ch13-38-fm2xml" /><div class="sect3">
<h3 class="sect3">13.6.1.2. Using unloadMovie( ) with instances</h3>


<p>When <a name="INDEX-1745" />applied to an
instance (whether manually or programmatically created),
<em class="filename">unloadMovie( )</em> removes the
<em class="emphasis">contents</em> of the clip, <em class="emphasis">but it does not
remove the clip itself </em>! The timeline and canvas of the
clip are removed, but an empty shell remains on stage. That shell can
be referenced until the instance is permanently removed via
<em class="filename">removeMovieClip( )</em> (or until the span of frames
on which the instance resides ends). Furthermore, any clip event
handlers on the shell remain active.</p>


<p>This partial deletion of instances presents an interesting
possibility; it lets us maintain a generic container clip whose
contents can be repeatedly changed via <em class="filename">loadMovie(
)</em> and <em class="filename">unloadMovie( )</em>. For example, we
may quite legitimately invoke the following function series on an
instance called <tt class="literal">clipA</tt> (though in a real
application, these statements would include the appropriate preloader
code):</p>


<blockquote><pre class="code">clipA.loadMovie("section1.swf");  // Load a document into <em class="replaceable">clipA</em>
clipA.unloadMovie( );              // Unload the document, leaving <em class="replaceable">clipA</em> intact
clipA.loadMovie("section2.swf");  // Load another document into <em class="replaceable">clipA</em></pre></blockquote>


<p>One note of caution with this approach. When used on an instance,
<em class="filename">unloadMovie( )</em> removes all custom properties of
the clip contained by the instance. Physical properties, such as
<tt class="literal">_x</tt> and <tt class="literal">_alpha</tt> persist, but
custom variables and functions are lost.</p>

<a name="ch13-39-fm2xml" /><blockquote><h4>WARNING</h4>
<p>If you use the global function form of <em class="filename">unloadMovie(
)</em> with a non-existent clip or level instance as its
argument, the clip from which you invoked the <em class="filename">unloadMovie(
)</em> function will, itself, unload.</p>

</blockquote>

<p>For example, if <tt class="literal">_level1</tt> is undefined, and we issue
the following code from the main timeline of
<tt class="literal">_level0</tt>, then <tt class="literal">_level0</tt> will
unload:</p>


<blockquote><pre class="code">unloadMovie(_level1);</pre></blockquote>


<p>Yes, there's some logic to this behavior, but we'll cover
that later under <a href="ch13_08.htm">Section 13.8.3.1, "Method versus global function overlap issues"</a>. You can avoid
the problem by using a string when specifying the
<em class="replaceable">clipOrLevel</em> argument of
<em class="filename">unloadMovie( )</em> or by checking explicitly that
<em class="replaceable">clipOrLevel</em> exists before unloading it.
Here's an example of each approach:</p>


<blockquote><pre class="code">unloadMovie("_level1");  // <em class="replaceable">clipOrLevel</em> specified as a string
if (_level1) {           // Explicit check to make sure level exists
  unloadMovie(_level1);
}</pre></blockquote>
</div>
</div>




<a name="ch13-40-fm2xml" /><div class="sect2">
<h3 class="sect2">13.6.2. Using removeMovieClip( ) to Delete Instances</h3>


<p>To
<a name="INDEX-1746" />
<a name="INDEX-1747" />delete attached and
duplicated instances from the Player, we can use
<em class="filename">removeMovieClip( )</em>. Note that
<em class="filename">removeMovieClip( )</em> works on duplicated or
attached instances only. It cannot delete a manually created instance
or a main movie. Like <em class="filename">unloadMovie( )</em>,
<em class="filename">removeMovieClip( )</em> may be used in both method
and global function form (though the syntax is different, the effect
is the same):</p>


<blockquote><pre class="code">removeMovieClip(<em class="replaceable">clip</em>)    // Global function
<em class="replaceable">clip</em>.removeMovieClip( )  // Method</pre></blockquote>


<p>In global function form, <em class="replaceable">clip</em> is a string
indicating the path to the clip to remove. Due to automatic value
conversion, <em class="replaceable">clip</em> may also be a movie clip
reference (movie clips are converted to paths when used as strings).
In method form, <em class="replaceable">clip</em> must be a reference
to a movie clip object.</p>


<p>Unlike <em class="filename">unloadMovie( )</em>, deleting an instance via
<em class="filename">removeMovieClip( )</em> completely obliterates the
entire clip object, leaving no shell or trace of the clip and its
properties. When we execute
<em class="replaceable">clip</em><tt class="literal">.removeMovieClip(
)</tt>, future references to <em class="replaceable">clip</em>
yield <tt class="literal">undefined</tt>.</p>
</div>




<a name="ch13-41-fm2xml" /><div class="sect2">
<h3 class="sect2">13.6.3. Removing Manually Created Instances Manually</h3>


<p>Clip instances created manually in the Flash authoring tool also have
a limited life span -- they are removed when the playhead enters a
keyframe that does not include them. Manually created movie clips,
hence, live in fear of the almighty blank keyframe.</p>


<p>Remember that when a movie clip disappears from the timeline, it
ceases to exist as a data object. All variables, functions, methods,
and properties that may have been defined inside it are lost.
Therefore, if we want a clip's information or functions to
persist, we should be careful about removing the clip manually and
should ensure that the span of frames on which the clip resides
extends to the point where we need that clip's information. (In
fact, to avoid this worry entirely, we should attach most permanent
code to a frame in the main movie timeline.) To hide a clip while
it's present on the timeline, simply position the clip outside
the visible area of the Stage, and set the clip's
<tt class="literal">_visible</tt> property to <tt class="literal">false</tt>.
Setting a clip's <tt class="literal">_x</tt> property to a very large
positive number or very small negative number should also suffice to
hide it from the user's view without removing it from
<a name="INDEX-1748" />
<a name="INDEX-1749" />memory.</p>
</div>


<hr width="684" align="left" />
<div class="navbar"><table width="684" border="0"><tr><td align="left" valign="top" width="228"><a href="ch13_05.htm"><img alt="Previous" border="0" src="../gifs/txtpreva.gif" /></a></td><td align="center" valign="top" width="228"><a href="index.htm"><img alt="Home" border="0" src="../gifs/txthome.gif" /></a></td><td align="right" valign="top" width="228"><a href="ch13_07.htm"><img alt="Next" border="0" src="../gifs/txtnexta.gif" /></a></td></tr><tr><td align="left" valign="top" width="228">13.5. Referring to Instances and Main Movies</td><td align="center" valign="top" width="228"><a href="index/index.htm"><img alt="Book Index" border="0" src="../gifs/index.gif" /></a></td><td align="right" valign="top" width="228">13.7. Built-in Movie Clip Properties</td></tr></table></div>
<hr width="684" align="left" />

<img alt="Library Navigation Links" border="0" src="../gifs/navbar.gif" usemap="#library-map" />
<p><font size="-1"><a href="copyrght.htm">Copyright &copy; 2002</a> O'Reilly &amp; Associates. All rights reserved.</font></p>

<map name="library-map"><area href="../index.htm" coords="0,1,78,93" shape="rect" /><area href="../wdesign/index.htm" coords="80,2,155,96" shape="rect" /><area href="../xhtml/index.htm" coords="158,0,263,97" shape="rect" /><area href="../audio/index.htm" coords="265,1,335,97" shape="rect" /><area href="../css/index.htm" coords="338,1,434,93" shape="rect" /><area href="index.htm" coords="439,0,540,102" shape="rect" /><area href="../infoarch/index.htm" coords="544,0,685,102" shape="rect" /></map>

</body></html>