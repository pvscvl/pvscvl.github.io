<html><head><title>Creating Movie Clips (ActionScript: The Definitive Guide)</title><link rel="stylesheet" type="text/css" href="../style/style1.css" />

<meta name="DC.Creator" content="Colin Moock" /><meta name="DC.Format" content="text/xml" scheme="MIME" /><meta name="DC.Language" content="en-US" /><meta name="DC.Publisher" content="O'Reilly &amp; Associates, Inc." /><meta name="DC.Source" scheme="ISBN" content="1565928520L" /><meta name="DC.Subject.Keyword" content="stuff" /><meta name="DC.Title" content="ActionScript: The Definitive Guide" /><meta name="DC.Type" content="Text.Monograph" />

</head><body bgcolor="#ffffff">

<img alt="Book Home" border="0" src="gifs/smbanner.gif" usemap="#banner-map" /><map name="banner-map"><area shape="rect" coords="1,-2,616,66" href="index.htm" alt="ActionScript: The Definitive Guide" /><area shape="rect" coords="629,-11,726,25" href="jobjects/fsearch.htm" alt="Search this book" /></map>

<div class="navbar"><table width="684" border="0"><tr><td align="left" valign="top" width="228"><a href="ch13_02.htm"><img alt="Previous" border="0" src="../gifs/txtpreva.gif" /></a></td><td align="center" valign="top" width="228"><a href="index.htm">ActionScript: The Definitive Guide</a></td><td align="right" valign="top" width="228"><a href="ch13_04.htm"><img alt="Next" border="0" src="../gifs/txtnexta.gif" /></a></td></tr></table></div>
<hr width="684" align="left" />


<h2 class="sect1">13.3. Creating Movie Clips</h2>


<p>We <a name="INDEX-1615" />usually
treat movie clips just like data objects -- we set their
properties with the dot operator; we invoke their methods with the
function-call operator (parentheses); and we store them in variables,
array elements, and object properties. We do not, however, create
movie clips in the same way we create objects. We cannot literally
describe a movie clip in our code as we might describe an object with
an object literal. And we cannot generate a movie clip with a movie
clip constructor function, like this:</p>


<blockquote><pre class="code">myClip = new MovieClip( );  // Nice try buddy, but it won't work</pre></blockquote>


<p>Instead, we create movie clips directly in the authoring tool, by
hand. Once a clip is created, we can use commands such as
<em class="filename">duplicateMovieClip( )</em> and <em class="filename">attachMovie(
)</em> to make new, independent duplicates of it.</p>


<a name="ch13-11-fm2xml" /><div class="sect2">
<h3 class="sect2">13.3.1. Movie Clip Symbols and Instances</h3>


<p>Just <a name="INDEX-1616" />
<a name="INDEX-1617" />
<a name="INDEX-1618" />as all
object instances are based on one class or another, all movie clip
instances are based on a template movie clip, called a
<em class="emphasis">symbol</em> (sometimes called a
<em class="emphasis">definition</em>). A movie clip's symbol acts as
a model for the clip's content and structure. We must always
have a movie clip symbol before we may generate a specific clip
object. Using a symbol, we can both manually and programmatically
create clips to be rendered in a movie.</p>


<p>A movie clip that is rendered on the Stage is called an
<em class="emphasis">instance</em>. Instances are the individual clip
objects that can be manipulated with ActionScript; a
<em class="emphasis">symbol</em> is the mold from which all instances of a
specific movie clip are derived. Movie clip symbols are created in
the Flash authoring tool. To make a new, blank symbol, we follow
these steps:</p>


<ol><li><p>Select Insert <img align="absmiddle" src="figs/U2192.gif" /> New Symbol. The Symbol Properties dialog box
appears.</p></li><li><p>In the Name field, type an identifier for the symbol.</p></li><li><p>Select the Movie Clip radio button.</p></li><li><p>Click OK.</p></li></ol>
<p>Normally, the next step is to fill in the symbol's canvas and
timeline with the content of our movie clip. Once a symbol has been
created, it resides in the Library, waiting for us to use it to
fashion an actual movie clip instance. It is, however, also possible
to convert a group of shapes and objects that already exist on stage
into a movie clip symbol. To do so, we follow these steps:</p>


<ol><li><p>Select the desired shapes and objects.</p></li><li><p>Select Insert <img align="absmiddle" src="figs/U2192.gif" /> Convert to Symbol.</p></li><li><p>In the Name field, type an identifier for the symbol.</p></li><li><p>Select the Movie Clip radio button.</p></li><li><p>Click OK.</p></li></ol>
<p>The shapes and objects we selected to create the new movie clip
symbol will be replaced by an unnamed instance of that new clip. The
corresponding movie clip symbol will appear in the Library, ready to
be used to create further instances.</p>
</div>




<a name="ch13-12-fm2xml" /><div class="sect2">
<h3 class="sect2">13.3.2. Creating Instances</h3>


<p>There are three ways to create a new instance based on a movie clip
symbol. Two of these are programmatic; the other is strictly manual
and is undertaken in the Flash authoring tool.</p>


<a name="ch13-13-fm2xml" /><div class="sect3">
<h3 class="sect3">13.3.2.1. Manually creating instances</h3>


<p>We <a name="INDEX-1619" />can create movie clip instances
manually using the
<a name="INDEX-1620" />Library in the Flash
authoring environment. By physically dragging a movie clip symbol out
of the Library and onto the Stage, we generate a new instance. An
instance thus created should be named manually via the Instance
panel. (We'll learn more about instance names later.) Refer to
"Using Symbols and Instances" in the Macromedia Flash
Help if you've never worked with movie clips in Flash.</p>
</div>



<a name="ch13-42020" /><div class="sect3">
<h3 class="sect3">13.3.2.2. Creating instances with duplicateMovieClip( )</h3>


<p>Any <a name="INDEX-1621" />
<a name="INDEX-1622" />
<a name="INDEX-1623" />instance that already resides on the
Stage of a Flash movie can be duplicated with ActionScript. We can
then treat that independent copy as a completely separate clip. Both
manually created and programmatically created clip instances may be
duplicated. In other words, it's legal to duplicate a
duplicate.</p>


<p>In practice, there are two ways to duplicate an instance using
<em class="filename">duplicateMovieClip( )</em>:</p>


<ul><li><p>We can invoke <em class="filename">duplicateMovieClip( )</em> as a global
function, using the following syntax:</p>
<blockquote><pre class="code">duplicateMovieClip(<em class="replaceable">target</em>, <em class="replaceable">newName</em>, <em class="replaceable">depth</em>);</pre></blockquote>
<p>where <em class="replaceable">target</em> is a string indicating the
name of the instance we want to duplicate. The
<em class="replaceable">newName</em> parameter is a string that
specifies the identifier for the new instance, and
<em class="replaceable">depth</em> is an integer that designates where,
in the stack of programmatically generated clips, we want to place
the new instance.</p></li><li><p>We can also invoke <em class="filename">duplicateMovieClip( )</em> as a
method of an existing instance:</p>
<blockquote><pre class="code"><em class="replaceable">myClip</em>.duplicateMovieClip(<em class="replaceable">newName</em>, <em class="replaceable">depth</em>);</pre></blockquote>

<p>where <em class="replaceable">myClip</em> is the name of the clip we
wish to duplicate, and <em class="replaceable">newName</em> and
<em class="replaceable">depth</em> both operate as before.</p></li></ul>
<p>When created via <em class="filename">duplicateMovieClip( )</em>, an
instance is initially positioned directly on top of its seed clip.
Our first post-duplication task, therefore, is usually moving the
duplicated clip to a new position. For example:</p>


<blockquote><pre class="code">ball.duplicateMovieClip("ball2", 0);
ball2._x += 100;
ball2._ y += 50;</pre></blockquote>


<p>Duplicated <a name="INDEX-1624" /> <a name="INDEX-1625" />instances whose seed
clips have been transformed (e.g., colored, rotated, or resized) via
ActionScript or manually in the Flash authoring tool inherit the
initial transformation of their seed clips. Subsequent
transformations to the seed clip do not affect duplicated instances.
Likewise, each instance can be transformed separately. For example,
if a seed clip is rotated 45 degrees and then an instance is
duplicated, the instance's initial rotation is 45 degrees:</p>


<blockquote><pre class="code">seed._rotation = 45;
seed.duplicateMovieClip("newClip", 0);
trace(newClip._rotation);  // Displays: 45</pre></blockquote>


<p>If we then rotate the instance by 10 degrees, its rotation is 55
degrees, but the seed clip's rotation is still 45 degrees:</p>


<blockquote><pre class="code">newClip._rotation += 10;
trace(newClip._rotation);  // Displays: 55
trace(seed._rotation);     // Displays: 45</pre></blockquote>


<p>By duplicating many instances in a row and adjusting the
transformation of each duplicate slightly, we can achieve interesting
compound transformations (the technique is shown under the
<em class="filename">load</em> event in <a href="ch10_10.htm">Example 10-2</a>).</p>


<p>Using <em class="filename">duplicateMovieClip( )</em> to duplicate clips
via ActionScript offers other advantages over placing clips manually
in a movie, such as the ability to:</p>


<ul><li><p>Control exactly when a clip appears on the Stage relative to a
program's execution.</p></li><li><p>Control exactly when a clip is removed from the Stage relative to a
program's execution.</p></li><li><p>Assign the layer depth of a duplicated clip relative to other
duplicated clips. (This was more of a concern in Flash 4, which did
not allow the layer stack of a movie to be altered.)</p></li><li><p>Copy a clip's event handlers.</p></li></ul>
<p>These abilities give us advanced programmatic control over the
content in a movie. A salient example is that of a spaceship game in
which a missile movie clip might be duplicated when the ship's
fire button is pressed. That missile clip might be moved
programmatically, then placed behind an obstacle in the movie, and
finally, be removed after colliding with an enemy craft. Manual clips
do not offer that kind of flexibility. With a manually created clip,
we must preordain the birth and death of the clip using the timeline
and, in Flash 4, we couldn't change the clip's layer.</p>
</div>



<a name="ch13-74950" /><div class="sect3">
<h3 class="sect3">13.3.2.3. Creating instances with attachMovie( )</h3>


<p>Like
<a name="INDEX-1626" /> <a name="INDEX-1627" /> <a name="INDEX-1628" />
<a name="INDEX-1629" /><em class="filename">duplicateMovieClip(
)</em>, <a name="INDEX-1630" /> <a name="INDEX-1631" />the <em class="filename">attachMovie(
)</em> method lets us create a movie clip instance; however,
unlike <em class="filename">duplicateMovieClip( )</em> it does not require
a previously created instance -- it creates a new instance
directly from a symbol in a movie's Library. In order to use
<em class="filename">attachMovie( )</em> to create an instance of a
symbol, we must first export that symbol from the Library.
Here's how:</p>


<ol><li><p>In the Library, select the desired symbol.</p></li><li><p>In the Library's Options menu, select Linkage. The Symbol
Linkage Properties dialog box appears.</p></li><li><p>Select the Export This Symbol radio button.</p></li><li><p>In the Identifier field, type a unique name for the clip symbol. The
name may be any string -- often simply the same name as the symbol
itself -- but should be different from all other exported clip
symbols.</p></li><li><p>Click OK.</p></li></ol>
<p>Once a clip symbol has been exported, we may attach new instances of
that symbol to an existing clip by invoking <em class="filename">attachMovie(
)</em> with the following syntax:</p>


<blockquote><pre class="code"><em class="replaceable">myClip</em>.attachMovie(<em class="replaceable">symbolIdentifier</em>, <em class="replaceable">newName</em>, <em class="replaceable">depth</em>);</pre></blockquote>


<p>where <em class="replaceable">myClip</em> is the name of the clip to
which we want to attach the new instance. If
<em class="replaceable">myClip</em> is omitted, <em class="filename">attachMovie(
)</em> attaches the new instance to the current clip (the clip
on which the <em class="filename">attachMovie( )</em> statement resides).
The <em class="replaceable">symbolIdentifier</em> parameter is a string
containing the name of the symbol we're using to generate our
instance, as specified in the Identifier field of the Linkage options
in the Library; <em class="replaceable">newName</em> is a string that
specifies the identifier for the new instance we're creating;
and <em class="replaceable">depth</em> is an integer that designates
where in the host clip's layered stack to place the new
instance.</p>


<p>When we attach an instance to another clip, that instance is
positioned in the center of the clip, among the clip's layered
stack (we'll discuss clip stacks soon). When we attach an
instance to the main movie of a document, that instance is positioned
in the upper-left corner of the Stage, at coordinates (0, 0).</p>
</div>
</div>




<a name="ch13-14391" /><div class="sect2">
<h3 class="sect2">13.3.3. Instance Names</h3>


<p>When <a name="INDEX-1632" />we
<a name="INDEX-1633" /> <a name="INDEX-1634" />create instances, we assign them
<a name="INDEX-1635" />identifiers, or <em class="emphasis">instance
names</em>, that allow us to refer to them later. Notice how
this differs from regular objects. When we create a normal data
object (not a movie clip), we must assign that object to a variable
or other data container in order for the object to persist and in
order for us to refer to it by name in the future. For example:</p>


<blockquote><pre class="code">new Object( );              // Object dies immediately after it's created, 
                           // and we can't refer to it
var thing = new Object( );  // Object reference is stored in <em class="replaceable">thing</em>, 
                           // and can later be referred to as <em class="replaceable">thing</em></pre></blockquote>


<p>Movie clip instances need not be stored in variables in order for us
to refer to them. Unlike normal data objects, clip instances are
accessible in ActionScript via their instance names as soon as they
are created. For example:</p>


<blockquote><pre class="code">ball._ y = 200;</pre></blockquote>


<p>Each clip's instance name is stored in its built-in property,
<tt class="literal">_name</tt>, which can be both retrieved and set:</p>


<blockquote><pre class="code">ball._name = "circle";  // Change <em class="replaceable">ball</em>'s name to <em class="replaceable">circle</em></pre></blockquote>


<p>When we change an instance's <tt class="literal">_name</tt> property,
all future references to the instance must use the new name. For
example, after the previous code executes, the
<tt class="literal">ball</tt> reference ceases to exist, and we'd
subsequently use <tt class="literal">circle</tt> to refer to the instance.</p>


<p>The manner in which an instance initially gets its instance name
depends on how it was created. Programmatically generated instances
are named by the function that creates them. Manually created
instances are normally assigned explicit instance names in the
authoring tool through the Instance panel, as follows:</p>


<ol><li><p>Select the instance on stage.</p></li><li><p>Select Modify <img align="absmiddle" src="figs/U2192.gif" /> Instance.</p></li><li><p>Enter the instance name into the Name field.</p></li></ol>
<p>If a manually created clip is not given an instance name, it is
assigned one automatically by the Flash Player at runtime. Automatic
instance names fall in the sequence <tt class="literal">instance1</tt>,
<tt class="literal">instance2</tt>,
<tt class="literal">instance3</tt>...<tt class="literal">instance</tt><em class="replaceable">n</em>,
but these names don't meaningfully describe our clip's
content (and we must guess at the automatic name that was generated).</p>


<a name="ch13-14-fm2xml" /><blockquote><h4>WARNING</h4>
<p>Because instance names are identifiers, we must compose them
according to the rules for creating a legal identifier, as described
in <a href="ch14_01.htm">Chapter 14, "Lexical Structure"</a>. Most notably, instance names should
not begin with a number, nor include hyphens or spaces.</p>

</blockquote>
</div>




<a name="ch13-86437" /><div class="sect2">
<h3 class="sect2">13.3.4. Importing External Movies</h3>


<p>We've <a name="INDEX-1636" />discussed <a name="INDEX-1637" /> <a name="INDEX-1638" />
<a name="INDEX-1639" />creating movie clip
instances within a single document, but the Flash Player can also
display multiple <em class="filename">.swf</em> documents simultaneously.
We can use <em class="filename">loadMovie( )</em> (as either a global
function or a movie clip method) to import an external
<em class="filename">.swf</em> file into the Player and place it either in
a clip instance or on a numbered level above the base movie (i.e., in
the foreground relative to the base movie). By managing content in
separate files, we gain precise control over the download process.
Suppose, for example, we have a movie containing a main navigation
menu and five subsections. Before the user can navigate to section
five, sections one through four must have finished downloading. But
if we place each section in a separate <em class="filename">.swf</em>
file, the sections can be loaded in an arbitrary order, giving the
user direct access to each section.</p>


<p>When an external <em class="filename">.swf</em> is loaded into a level,
its main movie timeline becomes the root timeline of that level, and
it replaces any prior movie loaded in that level. Similarly when an
external movie is loaded into a clip, the main timeline of the
loaded<em class="filename"> </em>movie replaces that clip's
timeline, unloading the existing graphics, sounds, and scripts in
that clip.</p>


<p>Like <em class="filename">duplicateMovieClip( )</em>, <em class="filename">loadMovie(
)</em> may be used both as a standalone function and an
instance method. The standalone syntax of <em class="filename">loadMovie(
)</em> is as follows:</p>


<blockquote><pre class="code">loadMovie(<em class="replaceable">URL</em>, <em class="replaceable">location</em>)</pre></blockquote>


<p>where <em class="replaceable">URL</em> specifies the address of the
external <em class="filename">.swf</em> file to load. The
<em class="replaceable">location</em> parameter is a string indicating
the path to an existing clip or a document level that should host the
new <em class="filename">.swf</em> file (i.e., where the loaded movie
should be placed). For example:</p>


<blockquote><pre class="code">loadMovie("circle.swf", "_level1");
loadMovie("photos.swf", "viewClip");</pre></blockquote>


<p>Because a movie clip reference is converted to a path when used as a
string, <em class="replaceable">location</em> may also be supplied as a
movie clip reference, such as <tt class="literal">_level1</tt> instead of
<tt class="literal">"_level1"</tt>. Take care when using references,
however. If the reference supplied does not point to a valid clip,
the <em class="filename">loadMovie( )</em> function has unexpected
behavior -- it loads the external <em class="filename">.swf</em> into
the <em class="emphasis">current</em> timeline. See <a href="ch20_01.htm">Chapter 20, "ActionScript Language Reference"</a> for more details,
or see <a href="ch13_08.htm">Section 13.8.3.1, "Method versus global function overlap issues"</a>, later in this chapter.</p>


<p>The clip method version of <em class="filename">loadMovie( )</em> has the
following syntax:</p>


<blockquote><pre class="code"><em class="replaceable">myClip</em>.loadMovie(<em class="replaceable">URL</em>);</pre></blockquote>


<p>When used as a method, <em class="filename">loadMovie( )</em> assumes
we're loading the external <em class="filename">.swf</em> into
<em class="replaceable">myClip</em>, so the
<em class="replaceable">location</em> parameter required by the
standalone <em class="filename">loadMovie( )</em> function is not needed.
We, therefore, supply only the path to the <em class="filename">.swf</em>
to load via the <em class="replaceable">URL</em> parameter. Naturally,
<em class="replaceable">URL</em> can be a local filename, such as:</p>


<blockquote><pre class="code">viewClip.loadMovie("photos.swf");</pre></blockquote>


<p>When placed into a clip instance, a loaded movie adopts the
properties of that clip (e.g., the clip's scale, rotation,
color transformation, etc.).</p>


<p>Note that <em class="replaceable">myClip</em> must exist in order for
<em class="filename">loadMovie( )</em> to be used in its method form. For
example, the following attempt to load
<em class="filename">circle.swf</em> will fail if
<tt class="literal">_level1</tt> is empty:</p>


<blockquote><pre class="code">_level1.loadMovie("circle.swf");</pre></blockquote>


<a name="ch13-15-fm2xml" /><blockquote><table border="1" cellpadding="6"><tr><td>
<h4 class="objtitle">Using loadMovie( ) with attachMovie( )</h4>


<p>Loading <a name="INDEX-1640" />an external
<em class="filename">.swf</em> file into a clip instance with
<em class="filename">loadMovie( )</em> has a surprising result -- it
prevents us from attaching instances to that clip via
<em class="filename">attachMovie( )</em>. Once a clip has an external
<em class="filename">.swf</em> file loaded into it, that clip may no
longer bear attached movies from the Library from which it
originated. For example, if <em class="filename">movie1.swf </em>contains
an instance named <tt class="literal">clipA</tt>, and we load
<em class="filename">movie2.swf</em> into <tt class="literal">clipA</tt>, we may
no longer attach instances from <em class="filename">movie1.swf
</em>'s Library to <tt class="literal">clipA</tt>.</p>


<p>Why? The <em class="filename">attachMovie( )</em> method works only within
a <em class="emphasis">single</em> document. That is, we can't
attach instances from one document's Library to another
document. When we load a <em class="filename">.swf</em> file into a clip,
we are populating that clip with a new document and, hence, a new
(different)<em class="emphasis"> </em>Library. Subsequent attempts to
attach instances from our original document to the clip fail because
the clip's Library no longer matches its original
document's Library. However, if we unload the document in the
clip via <em class="filename">unloadMovie( )</em>, we regain the ability
to attach movies to the clip from its own document Library.</p>


<p>Similarly, loading a <em class="filename">.swf</em> file into a clip with
<em class="filename">loadMovie( )</em> prevents us from copying that clip
via <em class="filename">duplicateMovieClip( )</em>.</p>

</td></tr></table></blockquote>

<a name="ch13-16-fm2xml" /><div class="sect3">
<h3 class="sect3">13.3.4.1. Load movie execution order</h3>


<p>The <em class="filename">loadMovie( )</em> function is not immediately
executed when it appears in a statement block. In fact, it is not
executed until <em class="emphasis">all</em> other statements in the block
have finished executing.</p>




<a name="ch13-18-fm2xml" /><blockquote><h4>TIP</h4>
<p>We cannot access an externally loaded movie's properties or
methods in the same statement block as the <em class="filename">loadMovie(
)</em> invocation that loads it into the Player.</p>

</blockquote>

<p>Because <em class="filename">loadMovie( )</em> loads an external file
(usually over a network), its execution is
<em class="emphasis">asynchronous</em>. That is, <em class="filename">loadMovie( )
</em>may finish at any time, depending on the speed of the file
transfer. Therefore, before we access a loaded movie, we should
always check that the movie has finished transferring to the Player.
We do so with what's commonly called a
<em class="emphasis">preloader</em><a name="INDEX-1641" /> -- a simple bit of code that
checks how much of a file has loaded before allowing some action to
take place. Preloaders can be built with the
<tt class="literal">_totalframes</tt> and <tt class="literal">_framesloaded</tt>
movie clip properties and the <em class="filename">getBytesLoaded( )</em>
and <em class="filename">getBytesTotal( )</em> movie clip methods. See the
appropriate entries in <a href="part3.htm">Part III, "Language Reference"</a> for sample code.
See also <a href="ch10_10.htm">Example 10-4</a>, which shows how to build a
preloader using the <a name="INDEX-1642" /> <a name="INDEX-1643" /> <a name="INDEX-1644" /><em class="filename">data</em>
<a name="INDEX-1645" />clip
<a name="INDEX-1646" />event.</p>
</div>
</div>


<hr width="684" align="left" />
<div class="navbar"><table width="684" border="0"><tr><td align="left" valign="top" width="228"><a href="ch13_02.htm"><img alt="Previous" border="0" src="../gifs/txtpreva.gif" /></a></td><td align="center" valign="top" width="228"><a href="index.htm"><img alt="Home" border="0" src="../gifs/txthome.gif" /></a></td><td align="right" valign="top" width="228"><a href="ch13_04.htm"><img alt="Next" border="0" src="../gifs/txtnexta.gif" /></a></td></tr><tr><td align="left" valign="top" width="228">13.2. Types of Movie Clips</td><td align="center" valign="top" width="228"><a href="index/index.htm"><img alt="Book Index" border="0" src="../gifs/index.gif" /></a></td><td align="right" valign="top" width="228">13.4. Movie and Instance Stacking Order</td></tr></table></div>
<hr width="684" align="left" />

<img alt="Library Navigation Links" border="0" src="../gifs/navbar.gif" usemap="#library-map" />
<p><font size="-1"><a href="copyrght.htm">Copyright &copy; 2002</a> O'Reilly &amp; Associates. All rights reserved.</font></p>

<map name="library-map"><area href="../index.htm" coords="0,1,78,93" shape="rect" /><area href="../wdesign/index.htm" coords="80,2,155,96" shape="rect" /><area href="../xhtml/index.htm" coords="158,0,263,97" shape="rect" /><area href="../audio/index.htm" coords="265,1,335,97" shape="rect" /><area href="../css/index.htm" coords="338,1,434,93" shape="rect" /><area href="index.htm" coords="439,0,540,102" shape="rect" /><area href="../infoarch/index.htm" coords="544,0,685,102" shape="rect" /></map>

</body></html>
