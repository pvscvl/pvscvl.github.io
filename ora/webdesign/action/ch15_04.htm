<html><head><title>The movieclip Datatype (ActionScript: The Definitive Guide)</title><link rel="stylesheet" type="text/css" href="../style/style1.css" />

<meta name="DC.Creator" content="Colin Moock" /><meta name="DC.Format" content="text/xml" scheme="MIME" /><meta name="DC.Language" content="en-US" /><meta name="DC.Publisher" content="O'Reilly &amp; Associates, Inc." /><meta name="DC.Source" scheme="ISBN" content="1565928520L" /><meta name="DC.Subject.Keyword" content="stuff" /><meta name="DC.Title" content="ActionScript: The Definitive Guide" /><meta name="DC.Type" content="Text.Monograph" />

</head><body bgcolor="#ffffff">

<img alt="Book Home" border="0" src="gifs/smbanner.gif" usemap="#banner-map" /><map name="banner-map"><area shape="rect" coords="1,-2,616,66" href="index.htm" alt="ActionScript: The Definitive Guide" /><area shape="rect" coords="629,-11,726,25" href="jobjects/fsearch.htm" alt="Search this book" /></map>

<div class="navbar"><table width="684" border="0"><tr><td align="left" valign="top" width="228"><a href="ch15_03.htm"><img alt="Previous" border="0" src="../gifs/txtpreva.gif" /></a></td><td align="center" valign="top" width="228"><a href="index.htm">ActionScript: The Definitive Guide</a></td><td align="right" valign="top" width="228"><a href="ch15_05.htm"><img alt="Next" border="0" src="../gifs/txtnexta.gif" /></a></td></tr></table></div>
<hr width="684" align="left" />


<h2 class="sect1">15.4. The movieclip Datatype</h2>


<p>Again <a name="INDEX-2018" /> <a name="INDEX-2019" /> <a name="INDEX-2020" />let's revisit another esoteric topic,
having mastered the fundamentals of ActionScript. In <a href="ch13_01.htm">Chapter 13, "Movie Clips"</a>, we learned that movie clips behave, for the
most part, exactly like objects. However, movie clips are not just
another class -- they are their own distinct datatype. Gary
Grossman, the creator of ActionScript, explains the difference
between the internal implementation of the
<em class="filename">movieclip</em> and <em class="filename">object</em>
datatypes as follows:</p>


<blockquote>
<p>Movie clips are implemented separately from objects internally in the
Player, although both manifest almost identically in ActionScript.
The primary difference lies in the way that they are allocated and
deallocated. Regular objects are
<em class="emphasis">reference-counted</em> and
<em class="emphasis">garbage-collected</em>, whereas the lifetime of movie
clips is timeline-controlled or explicitly controlled with the
<em class="filename">duplicateMovieClip( )</em> and
<em class="filename">removeMovieClip( )</em> functions.</p>


<p>If you declare an array using <tt class="literal">x</tt>
<tt class="literal">=</tt> <tt class="literal">new</tt> <tt class="literal">Array(
)</tt> and then set <tt class="literal">x</tt> <tt class="literal">=</tt>
<tt class="literal">null</tt>, ActionScript will immediately detect that
there are no remaining references to the <em class="filename">Array</em>
object (i.e., no variables referring to it), and garbage-collect it
(i.e., free the memory it used). Periodic mark-and-sweep garbage
collection eliminates objects containing circular references. (That
is, advanced techniques are used to ensure that memory is freed when
two unused objects refer to each other.)</p>


<p>Movie clips don't behave the same way. They come into and go
out of existence depending on the placement of objects on the
timeline. If they are created dynamically (e.g., with
<em class="filename">duplicateMovieClip( ) </em>) they are disposed of
only when <em class="filename">removeMovieClip( )</em> is used on them.</p>


<p>References to objects are <em class="emphasis">pointers</em> (memory
address references); reference-tracking and garbage-collection
protect the user from dangling pointers and memory leakage.
References to movie clips, however, are <em class="emphasis">soft</em>
references -- the reference actually contains an absolute target
path. If you have a movie clip named <tt class="literal">foo</tt>, and then
set <tt class="literal">x</tt> <tt class="literal">=</tt> <tt class="literal">foo</tt>
(which makes <tt class="literal">x</tt> a reference to clip
<tt class="literal">foo</tt>), and then delete <tt class="literal">foo</tt> using
<em class="filename">removeMovieClip( )</em>, and then create
<em class="emphasis">another</em> clip named <tt class="literal">foo</tt>, the
reference <tt class="literal">x</tt> will again be valid (it will point to
the new <tt class="literal">foo</tt> clip).</p>


<p>Regular objects are different -- the existence of a reference to
an object prevents that object from being removed in the first place.
So if movie clips were objects, <em class="filename">removeMovieClip(
)</em> wouldn't remove the object from memory so long as
the variable <tt class="literal">x</tt> made reference to it. Furthermore,
if you create a second movie clip named <tt class="literal">foo</tt>, the
old <tt class="literal">foo</tt> and the new <tt class="literal">foo</tt> can
exist simultaneously, although the old <tt class="literal">foo</tt> would
no longer be rendered.</p>


<p>So, a separate <em class="filename">movieclip</em> type is appropriate
because of its important differences from the
<em class="filename">object</em> type. For similar reasons, the
<em class="filename">typeof</em> operator reports
<tt class="literal">"function"</tt> for functions, even though functions
are also akin to objects in many ways.</p>
</blockquote>


<hr width="684" align="left" />
<div class="navbar"><table width="684" border="0"><tr><td align="left" valign="top" width="228"><a href="ch15_03.htm"><img alt="Previous" border="0" src="../gifs/txtpreva.gif" /></a></td><td align="center" valign="top" width="228"><a href="index.htm"><img alt="Home" border="0" src="../gifs/txthome.gif" /></a></td><td align="right" valign="top" width="228"><a href="ch15_05.htm"><img alt="Next" border="0" src="../gifs/txtnexta.gif" /></a></td></tr><tr><td align="left" valign="top" width="228">15.3. Advanced Function Scope Issues</td><td align="center" valign="top" width="228"><a href="index/index.htm"><img alt="Book Index" border="0" src="../gifs/index.gif" /></a></td><td align="right" valign="top" width="228">15.5. Onward!</td></tr></table></div>
<hr width="684" align="left" />

<img alt="Library Navigation Links" border="0" src="../gifs/navbar.gif" usemap="#library-map" />
<p><font size="-1"><a href="copyrght.htm">Copyright &copy; 2002</a> O'Reilly &amp; Associates. All rights reserved.</font></p>

<map name="library-map"><area href="../index.htm" coords="0,1,78,93" shape="rect" /><area href="../wdesign/index.htm" coords="80,2,155,96" shape="rect" /><area href="../xhtml/index.htm" coords="158,0,263,97" shape="rect" /><area href="../audio/index.htm" coords="265,1,335,97" shape="rect" /><area href="../css/index.htm" coords="338,1,434,93" shape="rect" /><area href="index.htm" coords="439,0,540,102" shape="rect" /><area href="../infoarch/index.htm" coords="544,0,685,102" shape="rect" /></map>

</body></html>
