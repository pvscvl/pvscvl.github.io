<html><head><title>The Logical Operators (ActionScript: The Definitive Guide)</title><link rel="stylesheet" type="text/css" href="../style/style1.css" />

<meta name="DC.Creator" content="Colin Moock" /><meta name="DC.Format" content="text/xml" scheme="MIME" /><meta name="DC.Language" content="en-US" /><meta name="DC.Publisher" content="O'Reilly &amp; Associates, Inc." /><meta name="DC.Source" scheme="ISBN" content="1565928520L" /><meta name="DC.Subject.Keyword" content="stuff" /><meta name="DC.Title" content="ActionScript: The Definitive Guide" /><meta name="DC.Type" content="Text.Monograph" />

</head><body bgcolor="#ffffff">

<img alt="Book Home" border="0" src="gifs/smbanner.gif" usemap="#banner-map" /><map name="banner-map"><area shape="rect" coords="1,-2,616,66" href="index.htm" alt="ActionScript: The Definitive Guide" /><area shape="rect" coords="629,-11,726,25" href="jobjects/fsearch.htm" alt="Search this book" /></map>

<div class="navbar"><table width="684" border="0"><tr><td align="left" valign="top" width="228"><a href="ch05_06.htm"><img alt="Previous" border="0" src="../gifs/txtpreva.gif" /></a></td><td align="center" valign="top" width="228"><a href="index.htm">ActionScript: The Definitive Guide</a></td><td align="right" valign="top" width="228"><a href="ch05_08.htm"><img alt="Next" border="0" src="../gifs/txtnexta.gif" /></a></td></tr></table></div>
<hr width="684" align="left" />


<h2 class="sect1">5.7. The Logical Operators</h2>


<p>In <a href="ch04_01.htm">Chapter 4, "Primitive Datatypes"</a>, <a name="INDEX-767" />we learned how to make logical
decisions using Boolean values. The decisions we considered were
based on single factors: if a movie hasn't loaded, don't
start playing; if a spaceship has double-shot power, increase the
damage its shots inflict, and so on. Not all programming logic is so
simple. We'll often want to consider multiple factors in our
<em class="emphasis">branching</em><a name="INDEX-768" /> (i.e., decision-making)
logic.</p>


<p>Suppose, for example, that we are making a personalized Flash site
that requires users to log in. If a user logs in as a guest, the
content he can see is limited. When a registered user logs into the
site, we set a variable that indicates, for the duration of our
movie, that the user is allowed to see privileged content:</p>


<blockquote><pre class="code">var userStatus = "registered";</pre></blockquote>


<p>To decide whether to allow access to a restricted area, we use a
Boolean check like this:</p>


<blockquote><pre class="code">if (userStatus == "registered") {
  // It's okay, let 'em in...
}</pre></blockquote>


<p>Suppose we want to demonstrate the site to prospective investors
without forcing them to register and without showing them material
reserved for registered users. We can invent a new user category,
"specialGuest," that allows investors to see more than a
guest but not as much as a registered user. When we want to identify
someone as a special guest, we set <tt class="literal">userStatus</tt> to
"specialGuest."</p>


<p>How do we perform a Boolean check now that there are two categories
of users to allow in? We could do things the brutish, painful way by
duplicating portions of our code:</p>


<blockquote><pre class="code">if (userStatus == "registered") {
  // Execute legal-user code...
}

if (userStatus == "specialGuest") {
  // Execute exact same legal-user code...
}</pre></blockquote>


<p>Obviously, that's going to turn into a real headache to
maintain. Every bit of complexity we add to our script doubles, and
we end up with serious version-control problems.</p>


<p>We'd prefer to perform a single Boolean check that says,
"If the user is registered <em class="emphasis">or</em> if the user
is a special guest, then grant access." We can produce compound
logical phrases like that with <a name="INDEX-769" />Boolean
<em class="emphasis">logical operators</em>. Here, the logical OR operator
(<tt class="literal">||</tt>) lets us check the status of multiple Boolean
operations in a single expression:</p>


<blockquote><pre class="code">if (userStatus == "registered" || userStatus == "specialGuest") {
  // Execute legal user code...
}</pre></blockquote>


<p>Nice, huh? Sometimes programming is so elegant. Such distinctive
vertical lines . . . such supple parentheses . . .</p>


<a name="ch05-35-fm2xml" /><div class="sect2">
<h3 class="sect2">5.7.1. Logical OR</h3>


<p>The <em class="filename">logical OR</em><a name="INDEX-770" /> <a name="INDEX-771" /> operator is most
commonly used to initiate some action when at least one of two
conditions is met. For example, "If I am hungry
<em class="emphasis">or</em> I am thirsty, I'll go to the
kitchen." The symbol for logical OR is made using two vertical
line characters (<tt class="literal">||</tt>). The <tt class="literal">|</tt>
character is typically accessible using the Shift key and the
Backslash (\) key in the upper right of most keyboards, where it may
be depicted as a dashed vertical line. Logical OR takes the general
form:</p>


<blockquote><pre class="code"><em class="replaceable">operand1</em> || <em class="replaceable">operand2</em></pre></blockquote>


<p>When both operands are Boolean expressions, logical OR returns
<tt class="literal">true</tt> if either operand is <tt class="literal">true</tt>
and returns <tt class="literal">false</tt> only if
<em class="emphasis">both</em> operands are <tt class="literal">false</tt>. In
summary:</p>


<blockquote><pre class="code">true  || false   // true because first operand is true
false || true    // true because second operand is true
true  || true    // true (either operand being true is sufficient)
false || false   // false because both operands are false</pre></blockquote>


<p>The preceding is a simplified case in which both operands are
Booleans, but the operands can be any valid expression including
non-Boolean ones. In that case, the return value of a logical OR
operation is not necessarily a Boolean (<tt class="literal">true</tt> or
<tt class="literal">false</tt>). Technically, the first step in evaluating
a logical OR is to convert <tt class="literal">operand1</tt> to a Boolean;
if the result of such a conversion is <tt class="literal">true</tt>,
logical OR returns <tt class="literal">operand1</tt>'s resolved
value. Otherwise logical OR returns
<tt class="literal">operand2</tt>'s resolved value. Some code to
demonstrate:</p>


<blockquote><pre class="code">null || "hi there!"  // <em class="replaceable">Operand1</em> does not convert to true, so the 
                     // operation returns <em class="replaceable">operand2</em>'s value: "hi there!"

true || false        // <em class="replaceable">Operand1</em> is true, so the operation returns
                     // <em class="replaceable">operand1</em>'s value: true

"hey" || "dude"      // <em class="replaceable">Operand1</em> is a nonempty string, so it converts to
                     // false and the operation returns
                     // <em class="replaceable">operand2</em>'s value: "dude"

false || 5 + 5       // <em class="replaceable">Operand1</em> does not convert to true so the
                     // value of<tt class="userinput"><b> </b></tt><em class="replaceable">operand2</em> (namely 10) is returned</pre></blockquote>


<p>In practice, we rarely make use of non-Boolean values returned by a
logical OR expression. Instead, we normally use the result in a
conditional statement where it is used to make a Boolean decision.
Consider <a href="ch05_07.htm">Example 5-3</a>.</p>


<a name="ch05-31136" /><div class="example">
<h4 class="objtitle">Example 5-3. A Logical OR Operation as a Conditional Test Expression </h4>

<blockquote><pre class="code">var x = 10;
var y = 15;
if (x || y) {
  trace("One of either x or y is not zero");
}</pre></blockquote>
</div>


<p>On line 3, we see a logical OR operation <em class="emphasis">(x || y
)</em> being used where a Boolean is expected as the test
expression of an <em class="filename">if</em> statement. Our first step in
determining the value of <em class="emphasis">x || y</em> is to convert 10
(the value of the first operand, <tt class="literal">x</tt>) to a Boolean.
As <a href="ch03_04.htm">Table 3-3</a> shows, any non-zero finite number
converts to the Boolean <tt class="literal">true</tt>. When the first
operand converts to <tt class="literal">true</tt>, the logical OR returns
the value of the first operand, in this case 10. So to the
interpreter, our <em class="filename">if</em> statement looks like this:</p>


<blockquote><pre class="code">if (10) {
  trace("One of either x or y is not zero");
}</pre></blockquote>


<p>But 10 is a number, not a Boolean. So what happens? The
<em class="filename">if</em> statement <em class="emphasis">converts</em> the
return value of the logical OR operation to a Boolean. In this case,
10 is converted to the Boolean value <tt class="literal">true</tt> (again,
according to the rules in <a href="ch03_04.htm">Table 3-3</a>), and the
interpreter sees our code as:</p>


<blockquote><pre class="code">if (true) {
  trace("One of either x or y is not zero");
}</pre></blockquote>


<p>And there you have it. The test expression is
<tt class="literal">true</tt>, so the <em class="filename">trace( )</em>
statement between the curly braces is executed.</p>


<p>Note that if the first operand in a logical OR operation resolves to
<tt class="literal">true</tt>, it is unnecessary and therefore inefficient
to evaluate the second operand. Therefore, ActionScript evaluates the
second operand only if the first operand resolves to
<tt class="literal">false</tt>. This fact is useful in cases in which you
don't want to resolve the second operand unless the first
operand resolves to <tt class="literal">false</tt>. In this example, we
check if a number is out of range. If the number is too small, there
is no need to perform the second test in which we check whether it is
too large:</p>


<blockquote><pre class="code">if (xPos &lt; 0 || xPos &gt; 100) {
  trace ("xPos is not between 0 and 100 inclusive.");
}</pre></blockquote>
</div>




<a name="ch05-36-fm2xml" /><div class="sect2">
<h3 class="sect2">5.7.2. Logical AND</h3>


<p>Like the <a name="INDEX-772" /> <a name="INDEX-773" />logical OR operator, <em class="filename">logical
AND</em> is primarily used to execute a block of code
conditionally, in this case only when both of two conditions are met.
The logical AND operator takes the general form:</p>


<blockquote><pre class="code"><em class="replaceable">operand1</em> &amp;&amp; <em class="replaceable">operand2</em></pre></blockquote>


<p>Both <em class="replaceable">operand1</em> and
<em class="replaceable">operand2</em> may be any valid expression. In
the simplest case in which both operands are Boolean expressions,
logical AND returns <tt class="literal">false</tt> if either operand is
<tt class="literal">false</tt> and returns <tt class="literal">true</tt> only if
<em class="emphasis">both</em> operands are <tt class="literal">true</tt>. In
summary:</p>


<blockquote><pre class="code">true  &amp;&amp; false   // false because second operand is false
false &amp;&amp; true    // false because first operand is false
true  &amp;&amp; true    // true because both operands are true
false &amp;&amp; false   // false because both operands are false (either is sufficient)</pre></blockquote>


<p>Let's see how the logical AND operator is used in two real
examples. In <a href="ch05_07.htm">Example 5-4</a>, we execute a
<em class="filename">trace( )</em> statement only when two variables are
both greater than 50.</p>


<a name="ch05-26968" /><div class="example">
<h4 class="objtitle">Example 5-4. A Logical AND Operation as a Conditional Test Expression </h4>

<blockquote><pre class="code">x = 100;
y = 51;
if (x&gt;50 &amp;&amp; y&gt;50) {
  trace("Both x and y are greater than 50");
}</pre></blockquote>
</div>


<p>Because the expressions <em class="emphasis">x&gt;50</em> and
<em class="emphasis">y&gt;50</em> are both <tt class="literal">true</tt>, the
<em class="filename">trace( )</em> statement is executed.</p>


<p>In <a href="ch05_07.htm">Example 5-5</a>, we return to our web site example in
which access was restricted to registered users and special guests.
But this time we'll let users in only if the date is not
January 1. Note the use of the <em class="filename">Date</em> object to
determine the current date. Note that <em class="filename">getMonth(
)</em> returns
to indicate January.</p>


<a name="ch05-45684" /><div class="example">
<h4 class="objtitle">Example 5-5. Compound Logical Expressions </h4>

<blockquote><pre class="code">userStatus = "registered";
now = new Date( );        // Create a new Date object
day = now.getDate( );     // Returns an integer between 1 and 31
month = now.getMonth( );  // Returns an integer between 0 and 11

// Note the indentation style and parentheses...if statements may span
// multiple lines for the sake of readability
if ( ((userStatus == "registered") || (userStatus == "specialGuest")) 
    &amp;&amp; (month + day) &gt; 1) {
  // Let the user in...
}</pre></blockquote>
</div>


<p>The technical behavior of the logical AND operator is quite similar
to that of the logical OR operator. First,
<em class="replaceable">operand1</em> is converted to a Boolean. If the
result of that conversion is <tt class="literal">false</tt>, the value of
<em class="replaceable">operand1</em> is returned. If the result of
that conversion is <tt class="literal">true</tt>, the value of
<em class="replaceable">operand2</em> is returned.</p>


<p>If the first operand in a logical AND operation resolves to
<tt class="literal">false</tt>, it is unnecessary and therefore inefficient
to evaluate the second operand. Therefore, ActionScript evaluates the
second operand only if the first operand resolves to
<tt class="literal">true</tt>. This fact is useful in cases in which you
don't want to resolve the second operand unless the first
operand resolves to <tt class="literal">true</tt>. In this example, we
perform the division only if the divisor is nonzero:</p>


<blockquote><pre class="code">if (numItems != 0 &amp;&amp; total / numItems &gt; 3) {
  trace ("You've averaged more than 3 dollars per transaction");
}</pre></blockquote>
</div>




<a name="ch05-37-fm2xml" /><div class="sect2">
<h3 class="sect2">5.7.3. Logical NOT</h3>


<p>The <em class="emphasis">logical NOT</em><a name="INDEX-774" /> <a name="INDEX-775" /> operator
(<tt class="literal">!</tt>) returns the Boolean opposite of its single
operand. It takes the general form:</p>


<blockquote><pre class="code">!<em class="replaceable">operand</em></pre></blockquote>


<p>where <em class="replaceable">operand</em> may be any legal expression.
If <em class="replaceable">operand</em> is <tt class="literal">true</tt>,
logical NOT returns <tt class="literal">false</tt>. If
<em class="replaceable">operand</em> is <tt class="literal">false</tt>,
logical NOT returns <tt class="literal">true</tt>. If
<em class="replaceable">operand</em> is not a Boolean, its value is
converted to a Boolean for the sake of the operation and its opposite
is returned.</p>


<p>Like the does-not-equal operator (<tt class="literal">!=</tt>), the logical
NOT operator is convenient for testing what something
<em class="emphasis">isn't</em> rather than what it
<em class="emphasis">is</em>. Recall <a href="ch05_07.htm">Example 5-5</a> in which
we wanted to perform an action only if the date was not January 1. At
first impression, this attempt might seem correct:</p>


<blockquote><pre class="code">month != 0 &amp;&amp; day != 1</pre></blockquote>


<p>We find, however, that <em class="emphasis">month != 0</em> is
<tt class="literal">true</tt> anytime the month is not January (so far so
good), but <em class="emphasis">day != 1</em> is actually
<tt class="literal">false</tt> on the first day of every month. So the
expression <em class="emphasis">month !=
&amp;&amp; day != 1</em> would exclude our users on the first
day of any month, not just January 1. Hardly what we intended.</p>


<p>It's much easier to check if today <em class="emphasis">is</em>
January 1:</p>


<blockquote><pre class="code">month == 0 &amp;&amp; day == 1</pre></blockquote>


<p>That expression yields <tt class="literal">true</tt> only on the first day
of January. Once we've gotten that far, all we need is the NOT
operator to determine when today is <em class="emphasis">not</em> January
1:</p>


<blockquote><pre class="code">!(month==0 &amp;&amp; day==1)</pre></blockquote>


<p>Obviously this code's intent is much clearer than the
<em class="emphasis">month+day &gt; 1</em> test used in <a href="ch05_07.htm">Example 5-5</a>.</p>


<p>Another typical usage of the NOT operator is to
<em class="filename">toggle</em> a variable from <tt class="literal">true</tt>
to <tt class="literal">false</tt> and vice versa. For example, suppose you
have a single button that is used to turn the sound on and off. You
might use code like this:</p>


<blockquote><pre class="code">soundState = !soundState  // Reverse the current sound state
if (soundState) {
  // If sound is turned on, make sure sounds are audible
} else {
  // If the sound is off, set the volume to 0 to mute it
}</pre></blockquote>


<p>Notice that <tt class="literal">!</tt> is also used in the inequality
operator (<tt class="literal">!=</tt>). As a programming
<em class="emphasis">token</em> (i.e., symbol), the <tt class="literal">!</tt>
character usually means <em class="emphasis">not</em>, or
<em class="emphasis">opposite</em>. It is unrelated to the ! symbol used
to indicate "factorial" in common mathematic notation.</p>
</div>




<a name="ch05-38-fm2xml" /><div class="sect2">
<h3 class="sect2">5.7.4. Logical Expressions and Data Values</h3>


<p><a name="INDEX-776" /> <a name="INDEX-777" />Using logical operators to
calculate a Boolean result is analogous to using arithmetic operators
to calculate a numeric result. For example, the following four
operands and three operators are used to calculate a single result:</p>


<blockquote><pre class="code">userStatus == "registered" || userStatus == "specialGuest"</pre></blockquote>


<p>If the user is not registered, but is a special guest, the preceding
expression reduces to:</p>


<blockquote><pre class="code">false || true</pre></blockquote>


<p>which in turn reduces to the Boolean result <tt class="literal">true</tt>.</p>


<p>Here is an analogous arithmetic operation that reduces to a single
number:</p>


<blockquote><pre class="code">(1 + 2) * (3 + 4)  // Four values (1, 2, 3, 4) which become...
3 * 7              // two values (3, 7), which become...
21                 // a single value (21)</pre></blockquote>


<p>Remember, a complex expression that reduces to a Boolean can be used
anywhere a single Boolean value is required (such as the test
expression of a conditional <a name="INDEX-778" />statement).</p>
</div>


<hr width="684" align="left" />
<div class="navbar"><table width="684" border="0"><tr><td align="left" valign="top" width="228"><a href="ch05_06.htm"><img alt="Previous" border="0" src="../gifs/txtpreva.gif" /></a></td><td align="center" valign="top" width="228"><a href="index.htm"><img alt="Home" border="0" src="../gifs/txthome.gif" /></a></td><td align="right" valign="top" width="228"><a href="ch05_08.htm"><img alt="Next" border="0" src="../gifs/txtnexta.gif" /></a></td></tr><tr><td align="left" valign="top" width="228">5.6. The String Operators</td><td align="center" valign="top" width="228"><a href="index/index.htm"><img alt="Book Index" border="0" src="../gifs/index.gif" /></a></td><td align="right" valign="top" width="228">5.8. The Grouping Operator</td></tr></table></div>
<hr width="684" align="left" />

<img alt="Library Navigation Links" border="0" src="../gifs/navbar.gif" usemap="#library-map" />
<p><font size="-1"><a href="copyrght.htm">Copyright &copy; 2002</a> O'Reilly &amp; Associates. All rights reserved.</font></p>

<map name="library-map"><area href="../index.htm" coords="0,1,78,93" shape="rect" /><area href="../wdesign/index.htm" coords="80,2,155,96" shape="rect" /><area href="../xhtml/index.htm" coords="158,0,263,97" shape="rect" /><area href="../audio/index.htm" coords="265,1,335,97" shape="rect" /><area href="../css/index.htm" coords="338,1,434,93" shape="rect" /><area href="index.htm" coords="439,0,540,102" shape="rect" /><area href="../infoarch/index.htm" coords="544,0,685,102" shape="rect" /></map>

</body></html>