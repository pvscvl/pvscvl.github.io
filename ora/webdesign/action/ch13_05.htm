<html><head><title>Referring to Instances and Main Movies (ActionScript: The Definitive Guide)</title><link rel="stylesheet" type="text/css" href="../style/style1.css" />

<meta name="DC.Creator" content="Colin Moock" /><meta name="DC.Format" content="text/xml" scheme="MIME" /><meta name="DC.Language" content="en-US" /><meta name="DC.Publisher" content="O'Reilly &amp; Associates, Inc." /><meta name="DC.Source" scheme="ISBN" content="1565928520L" /><meta name="DC.Subject.Keyword" content="stuff" /><meta name="DC.Title" content="ActionScript: The Definitive Guide" /><meta name="DC.Type" content="Text.Monograph" />

</head><body bgcolor="#ffffff">

<img alt="Book Home" border="0" src="gifs/smbanner.gif" usemap="#banner-map" /><map name="banner-map"><area shape="rect" coords="1,-2,616,66" href="index.htm" alt="ActionScript: The Definitive Guide" /><area shape="rect" coords="629,-11,726,25" href="jobjects/fsearch.htm" alt="Search this book" /></map>

<div class="navbar"><table width="684" border="0"><tr><td align="left" valign="top" width="228"><a href="ch13_04.htm"><img alt="Previous" border="0" src="../gifs/txtpreva.gif" /></a></td><td align="center" valign="top" width="228"><a href="index.htm">ActionScript: The Definitive Guide</a></td><td align="right" valign="top" width="228"><a href="ch13_06.htm"><img alt="Next" border="0" src="../gifs/txtnexta.gif" /></a></td></tr></table></div>
<hr width="684" align="left" />


<h2 class="sect1">13.5. Referring to Instances and Main Movies</h2>


<p>In the <a name="INDEX-1684" /> <a name="INDEX-1685" />earlier sections, we learned how to create
and layer movie clip instances and external <em class="filename">.swf</em>
files in the Flash Player. We must be able to refer to that content
in order to effectively control it with ActionScript.</p>


<p>We refer to instances and main movies under four general
circumstances, when we want to:</p>


<ul><li><p>Get or set a property of a clip or a movie</p></li><li><p>Create or invoke a method of a clip or a movie</p></li><li><p>Apply some function to a clip or a movie</p></li><li><p>Manipulate a clip or a movie as data, for example, by storing it in a
variable or passing it as an argument to a function</p></li></ul>
<p>While the circumstances under which we refer to clip instances and
movies are fairly simple, the tools we have for making references are
many and varied. We'll spend the rest of this section exploring
ActionScript's instance- and movie-referencing tools.</p>


<a name="ch13-24-fm2xml" /><div class="sect2">
<h3 class="sect2">13.5.1. Using Instance Names</h3>


<p>Earlier, <a name="INDEX-1686" />we learned
that movie clips are referred to by their <em class="emphasis">instance
names</em>. For example:</p>


<blockquote><pre class="code">trace(myVariable);  // Refer to a variable
trace(myClip);      // Refer to a movie clip</pre></blockquote>


<p>In order to refer to an instance directly (as shown in the preceding
<em class="filename">trace( )</em> example), the instance must reside on
the timeline to which our code is attached. For example, if we have
an instance named <tt class="literal">clouds</tt> placed on the main
timeline of a document, we may refer to <tt class="literal">clouds</tt>
from code attached to the main timeline as follows:</p>


<blockquote><pre class="code">// Set a property of the instance
clouds._alpha = 60;
// Invoke a method on the instance
clouds.play( );
// Place the instance in an array of other related instances
var background = [clouds, sky, mountains];</pre></blockquote>


<p>If the instance we want to reference does not reside on the same
timeline as our code, we must use a more elaborate syntax, as
described later under <a href="ch13_05.htm">Section 13.5.3, "Referring to Nested Instances"</a>.</p>
</div>




<a name="ch13-25-fm2xml" /><div class="sect2">
<h3 class="sect2">13.5.2. Referring to the Current Instance or Movie</h3>


<p>We <a name="INDEX-1687" /> <a name="INDEX-1688" />don't always have to use an
instance's name when referring to a clip. Code attached to a
frame in an instance's timeline may refer to that
instance's properties and methods directly, without any
instance name.</p>


<p>For example, to set the <tt class="literal">_alpha</tt> property of a clip
named <tt class="literal">cloud</tt>, we could place the following code on
a frame in the <tt class="literal">cloud</tt> timeline:</p>


<blockquote><pre class="code">_alpha = 60;</pre></blockquote>


<p>Similarly, to invoke the <em class="filename">play( )</em> method on
<tt class="literal">cloud</tt> from a frame in the <tt class="literal">cloud</tt>
timeline, we could simply use:</p>


<blockquote><pre class="code">play( );</pre></blockquote>


<p>This technique may be used on any timeline, including timelines of
main movies. For example, the following two statements would be
synonymous if attached to a frame on the main timeline of a Flash
document. The first refers to the main movie implicitly, whereas the
second refers to the main movie explicitly via the global
<tt class="literal">_root</tt> property:</p>


<blockquote><pre class="code">gotoAndStop(20);
_root.gotoAndStop(20);</pre></blockquote>


<p>As we learned in <a href="ch10_01.htm">Chapter 10, "Events and Event Handlers"</a>,
<a name="INDEX-1689" />code in an instance's
event handler may, like timeline code, also refer to properties and
methods directly. For example, we could attach the following event
handler to <tt class="literal">cloud</tt>. This handler sets a property of,
and then invokes a method on, <tt class="literal">cloud</tt> without
referring to the <tt class="literal">cloud</tt> instance explicitly:</p>


<blockquote><pre class="code">onClipEvent (load) {
  _alpha = 60;
  stop( );
}</pre></blockquote>


<p>However, not all methods may be used with an implicit reference to a
movie clip. Any movie clip method that has the same name as a
corresponding global function (such as <em class="filename">duplicateMovieClip(
)</em> or <em class="filename">unloadMovie( )</em> ) must be invoked
with an explicit instance reference. Hence, when in doubt, use an
explicit reference. We'll have more to say about method and
global function conflicts later in <a href="ch13_08.htm">Section 13.8.3.1, "Method versus global function overlap issues"</a>.</p>


<a name="ch13-26-fm2xml" /><div class="sect3">
<h3 class="sect3">13.5.2.1. Self-references with the this keyword</h3>


<p>When <a name="INDEX-1690" />we want to
<em class="emphasis">explicitly</em> refer to the current instance from a
frame in its timeline or from one of its event handlers, we may use
the <tt class="literal">this</tt> keyword. For example, the following
statements would be synonymous when attached to a frame in the
timeline of our <tt class="literal">cloud</tt> instance:</p>


<blockquote><pre class="code">_alpha = 60;       // Implicit reference to the current timeline
this._alpha = 60;  // Explicit reference to the current timeline</pre></blockquote>


<p>There are two reasons to use <tt class="literal">this</tt> to refer to a
clip even when we can just refer to the clip directly. When used
without an explicit instance reference, certain movie clip methods
are mistaken for global functions by the interpreter. If we omit the
<tt class="literal">this</tt> reference, the interpreter thinks we're
trying to invoke the analogous global function and complains that
we're missing the "target" movie clip parameter. To
work around the problem, we use <tt class="literal">this</tt>, as follows:</p>


<blockquote><pre class="code">this.duplicateMovieClip("newClouds", 0);  // Invoke a method on an instance

// If we omit the <em class="replaceable">this</em> reference, we get an error
duplicateMovieClip("newClouds", 0);  // Oops!</pre></blockquote>


<p>Using <tt class="literal">this</tt>, we can conveniently pass a reference
to the current timeline to functions that operate on movie clips:</p>


<blockquote><pre class="code">// Here's a function that manipulates clips
function moveTo (theClip, x, y) {
  theClip._x = x;
  theClip._y = y;
}

// Now let's invoke it on the current timeline
moveTo(this, 150, 125);</pre></blockquote>


<p>If you do a lot of object-oriented programming, be cautious when
using the <tt class="literal">this</tt> keyword to refer to instances and
movies. Remember that inside a custom method or an object
constructor, <tt class="literal">this</tt> has a very different meaning and
is not a reference to the current timeline. See <a href="ch12_01.htm">Chapter 12, "Objects and Classes"</a> for details.</p>
</div>
</div>




<a name="ch13-44334" /><div class="sect2">
<h3 class="sect2">13.5.3. Referring to Nested Instances</h3>


<p>As <a name="INDEX-1691" />
<a name="INDEX-1692" />we <a name="INDEX-1693" />learned
<a name="INDEX-1694" />in the introduction to this chapter,
movie clip instances are often nested inside of one another. That is,
a clip's canvas may contain an instance of another clip, which
may itself contain instances of other clips. For example, a
game's <tt class="literal">spaceship</tt> clip may contain an
instance of a <tt class="literal">blinkingLights</tt> clip or a
<tt class="literal">burningFuel</tt> clip. Or a character's
<tt class="literal">face</tt> clip may include separate
<tt class="literal">eyes</tt>, <tt class="literal">nose</tt>, and
<tt class="literal">mouth</tt> clips.</p>


<p>Earlier, we saw briefly how we could navigate up or down from any
point in the hierarchy of clip instances, much like you might
navigate up and down a series of subdirectories on your hard drive.
Let's examine this in more detail and see some more examples.</p>


<p>Let's first consider how to refer to a clip instance that is
nested <em class="emphasis">inside</em> of the current instance. When a
clip is placed on the timeline of another clip, it becomes a property
of that clip, and we can access it as we would access any object
property (with the <a name="INDEX-1695" /> <a name="INDEX-1696" />dot operator). For example, suppose
we place <tt class="literal">clipB</tt> on the canvas of
<tt class="literal">clipA</tt>. To access <tt class="literal">clipB</tt> from a
frame in <tt class="literal">clipA</tt>'s timeline, we use a direct
reference to <tt class="literal">clipB</tt>:</p>


<blockquote><pre class="code">clipB._x = 30;</pre></blockquote>


<p>Now suppose <tt class="literal">clipB</tt> contains another instance,
<tt class="literal">clipC</tt>. To refer to <tt class="literal">clipC</tt> from a
frame in <tt class="literal">clipA</tt>'s timeline, we access
<tt class="literal">clipC</tt> as a property of <tt class="literal">clipB</tt>
like this:</p>


<blockquote><pre class="code">clipB.clipC.play( );
clipB.clipC._x = 20;</pre></blockquote>


<p>Beautiful, ain't it? And the system is infinitely extensible.
Because every clip instance placed on another clip's timeline
becomes a property of its host clip, we can traverse the hierarchy by
separating the instances with the dot operator, like so:</p>


<blockquote><pre class="code">clipA.clipB.clipC.clipD.gotoAndStop(5);</pre></blockquote>


<p>Now <a name="INDEX-1697" /> <a name="INDEX-1698" />that we've seen how to navigate
down the instance hierarchy, let's see how we navigate
<em class="emphasis">up</em> it to refer to the instance or movie that
contains the current instance. As we saw earlier, every instance has
a built-in <tt class="literal">_ parent</tt> property that refers to the
clip or main movie containing it. We use the <tt class="literal">_
parent</tt> property like so:</p>


<blockquote><pre class="code"><em class="replaceable">myClip</em>._ parent</pre></blockquote>


<p>Recalling our recent example with <tt class="literal">clipA</tt> on the
main timeline, <tt class="literal">clipB</tt> inside
<tt class="literal">clipA</tt>, and <tt class="literal">clipC</tt> inside
<tt class="literal">clipB</tt>, let's see how to use <tt class="literal">_
parent</tt> and dot notation to refer to the various clips in
the hierarchy. Assume that the following code is placed on a frame of
the timeline of <tt class="literal">clipB</tt>:</p>


<blockquote><pre class="code">_ parent       // A reference to <em class="replaceable">clipA</em>
this          // A reference to <em class="replaceable">clipB</em> (the current clip)
this._ parent  // Another reference to <em class="replaceable">clipA</em>

// Sweet Sheila, I love this stuff! Let's try some more...
_ parent._ parent  // A reference to <em class="replaceable">clipA</em>'s parent (<em class="replaceable">clipB</em>'s grandparent),  
                 // which is the main timeline in this case</pre></blockquote>


<p>Note that although it is legal to do so, it is unnecessarily
roundabout to traverse <em class="emphasis">down</em> the hierarchy using
a reference to the <tt class="literal">clipC</tt> property of
<tt class="literal">clipB</tt> only to traverse back
<em class="emphasis">up</em> the hierarchy using <tt class="literal">_
parent</tt>. These roundabout references are unnecessary but do
show the flexibility of dot notation:</p>


<blockquote><pre class="code">clipC._ parent    // A roundabout reference to <em class="replaceable">clipB</em><tt class="userinput"><b> </b></tt>(the current timeline)
clipC._ parent._ parent._ parent  // A roundabout reference to the main timeline</pre></blockquote>


<p>Notice how we use the dot operator to descend the clip hierarchy and
use the <tt class="literal">_ parent</tt> property to ascend it. If this is
new to you, you should probably try building the
<tt class="literal">clipA</tt>, <tt class="literal">clipB</tt>,
<tt class="literal">clipC</tt> hierarchy in Flash and using the code in our
example. Proper instance referencing is one of the fundamental skills
of a good ActionScript programmer.</p>


<p>Note that the hierarchy of clips is like a family tree. Unlike a
typical family tree of a sexually reproducing species in which each
offspring has two parents, our clip family tree expands asexually.
That is, each household is headed by a single parent who can adopt
any number of children. Any clip (i.e., any <em class="emphasis">node</em>
in the tree) can have one and only one parent (the clip that contains
it) but can have multiple <em class="emphasis">children</em> (the clips
that it contains). Of course, each clip's parent can in turn
have a single parent, which means that each clip can have only one
grandparent (not the four grandparents humans typically have). See
<a href="ch13_05.htm">Figure 13-5</a>.</p>


<a name="ch13-87037" /><div class="figure"><img alt="Figure 13-5" src="figs/act.1305.gif" /></div><h4 class="objtitle">Figure 13-5. A sample clip hierarchy</h4>

<p>Therefore, no matter how far you go down the family tree, if you go
back up the same number of steps you will always end up in the same
place you started. It is therefore pointless to go down the hierarchy
only to come back up. However, it is <em class="emphasis">not</em>
pointless to go up the hierarchy and then follow a
<em class="emphasis">different</em> path back down. For example, suppose
that the main timeline also contains <tt class="literal">clipD</tt>, which
would make <tt class="literal">clipD</tt> a "sibling" of
<tt class="literal">clipA</tt> because both would have the main timeline as
their <tt class="literal">_ parent</tt>. In that case, you can refer to
<tt class="literal">clipD</tt> from a script attached to
<tt class="literal">clipB</tt> as follows:</p>


<blockquote><pre class="code">_ parent._ parent.clipD    // This refers to <em class="replaceable">clipD</em>, a child of the main 
                         // timeline (<em class="replaceable">clipA</em>'s _ parent) and therefore 
                         // a sibling of <em class="replaceable">clipA</em></pre></blockquote>


<p>Note that the main timeline does not have a
<a name="INDEX-1699" /> <a name="INDEX-1700" /><tt class="literal">_ parent</tt> property
(main movies are the top of any clip hierarchy and cannot be
contained by another timeline); <a name="INDEX-1701" />references <a name="INDEX-1702" />to
<tt class="literal">_root._ parent</tt> yield <a name="INDEX-1703" /> <a name="INDEX-1704" /><tt class="literal">undefined</tt>.</p>
</div>




<a name="ch13-47381" /><div class="sect2">
<h3 class="sect2">13.5.4. Referring to Main Movies with _root and _leveln</h3>


<p>Now that we've seen how to navigate up and down the clip
hierarchy <em class="emphasis">relative</em> to the current clip,
let's explore other ways to navigate along
<em class="emphasis">absolute</em> pathways and even among other documents
stored in other levels of the Player's document stack. In
earlier chapters, we saw how these techniques applied to variables
and functions; here we'll learn how they can be used to control
movie clips.</p>


<a name="ch13-27-fm2xml" /><div class="sect3">
<h3 class="sect3">13.5.4.1. Referencing the current level's main movie using _root</h3>


<p>When <a name="INDEX-1705" />
<a name="INDEX-1706" />an
<a name="INDEX-1707" />
<a name="INDEX-1708" />instance
is deeply nested in a clip hierarchy, we can repeatedly use the
<tt class="literal">_ parent</tt> property to ascend the hierarchy until we
reach the main movie timeline. But in order to ease the labor of
referring to the main timeline from deeply nested clips, we can also
use the built-in global property <tt class="literal">_root</tt>, which is a
shortcut reference to the main movie timeline. For example, here we
play the main movie:</p>


<blockquote><pre class="code">_root.play( );</pre></blockquote>


<p>The <tt class="literal">_root</tt> property is said to be an
<em class="emphasis">absolute</em> reference to a known point in the clip
hierarchy because unlike the <tt class="literal">_ parent</tt> and
<tt class="literal">this</tt> properties, which are relative to the current
clip, the <tt class="literal">_root</tt> property is the same no matter
which clip it is referenced from. These are all equivalent:</p>


<blockquote><pre class="code">_ parent._root
this._root
_root</pre></blockquote>


<p>Therefore, you can and should use <tt class="literal">_root</tt> when you
don't know where a given clip is nested within the hierarchy.
For example, consider the following hierarchy in which
<tt class="literal">circle</tt> is a child of the main movie timeline and
<tt class="literal">square</tt> is a child of <tt class="literal">circle</tt>:</p>


<blockquote><pre class="code">main timeline
   circle
     square</pre></blockquote>


<p>Now consider this script attached to a frame in both
<tt class="literal">circle</tt> and <tt class="literal">square</tt>:</p>


<blockquote><pre class="code">_ parent._x += 10  // Move this clip's parent clip 10 pixels to the right</pre></blockquote>


<p>When that code is executed from within <tt class="literal">circle</tt>, it
will cause the main movie to move 10 pixels to the right. When it is
executed from within <tt class="literal">square</tt>, it will cause
<tt class="literal">circle</tt> (not the main movie) to move 10 pixels to
the right. In order for the script to move the main movie 10 pixels
regardless of where the script is executed from, it should be
rewritten as:</p>


<blockquote><pre class="code">_root._x += 10   // Move the main movie 10 pixels to the right</pre></blockquote>


<p>Furthermore, the <tt class="literal">_ parent</tt> property is not valid
from within the main timeline; the version of the script using
<tt class="literal">_root</tt> would be valid when used in a frame of the
main timeline.</p>


<p>The <tt class="literal">_root</tt> property may happily be combined with
ordinary instance references to descend a nested-clip hierarchy:</p>


<blockquote><pre class="code">_root.clipA.clipB.play( );</pre></blockquote>


<p>References that start with <tt class="literal">_root</tt> refer to the
same, known, starting point from anywhere in a document.
There's no guessing required.</p>
</div>



<a name="ch13-28-fm2xml" /><div class="sect3">
<h3 class="sect3">13.5.4.2. Referencing other documents in the Player using _leveln</h3>


<p>If <a name="INDEX-1709" />
<a name="INDEX-1710" />we <a name="INDEX-1711" />
<a name="INDEX-1712" />have <a name="INDEX-1713" />
<a name="INDEX-1714" /> <a name="INDEX-1715" /> <a name="INDEX-1716" />multiple <em class="filename">.swf</em>
files loaded in the document stack of the Flash Player, we may refer
to the main movie timelines of the various documents using the
built-in series of global properties <tt class="literal">_level0</tt>
through <tt class="literal">_level</tt><em class="replaceable">n</em>, where
<em class="replaceable">n</em> represents the level of the document we
want to reference.</p>


<p>Therefore, <tt class="literal">_level0</tt> represents the document in the
lowest level of the document stack (documents in higher levels will
be rendered in the foreground). Unless a movie has been loaded into
<tt class="literal">_level0</tt> via <em class="filename">loadMovie( )</em>,
<tt class="literal">_level0</tt> is occupied by the movie that was
initially loaded when the Player started.</p>


<p>Here is an example that plays the main movie timeline of the document
in level 3 of the Player's document stack:</p>


<blockquote><pre class="code">_level3.play( );</pre></blockquote>


<p>Like the <tt class="literal">_root</tt> property, the
<tt class="literal">_level</tt><em class="replaceable">n</em> property may be
combined with ordinary instance references via the dot operator:</p>


<blockquote><pre class="code">_level1.clipA.stop( );</pre></blockquote>


<p>As with references to <tt class="literal">_root</tt>, references to
<tt class="literal">_level</tt><em class="replaceable">n</em> properties are
called <em class="emphasis">absolute references</em> because they lead to
the same destination from any point in a document.</p>


<p>Note that <tt class="literal">_level</tt><em class="replaceable">n</em> and
<tt class="literal">_root</tt> are not synonymous. The
<tt class="literal">_root</tt> property is always the
<em class="emphasis">current</em> document's main timeline,
regardless of the level on which the current document resides,
whereas the <tt class="literal">_level</tt><em class="replaceable">n</em>
property is a reference to the main timeline of a specific document
level. For example, suppose we place the code <tt class="literal">_root.play(
)</tt> in <em class="filename">myMovie.swf</em>. When we load
<em class="filename">myMovie.swf</em> onto level 5, our code plays
<tt class="literal">_level5</tt>'s main movie timeline. By contrast,
if we place the code <tt class="literal">_level2.play( )</tt> in
<em class="filename">myMovie.swf</em> and load
<em class="filename">myMovie.swf</em> into level 5, our code plays
<tt class="literal">_level2</tt>'s main movie timeline not
<tt class="literal">_level5</tt>'s. Of course, from within level 2,
<tt class="literal">_root</tt> and <tt class="literal">_level2</tt> are
equivalent.</p>
</div>
</div>




<a name="ch13-29-fm2xml" /><div class="sect2">
<h3 class="sect2">13.5.5. Authoring Instance References with Insert Target Path</h3>


<p>When the <a name="INDEX-1717" />
<a name="INDEX-1718" />
<a name="INDEX-1719" />instance structure of a
movie gets very complicated, composing references to movie clips and
main movies can be laborious. We may not always recall the exact
hierarchy of a series of clips, and, hence, may end up frequently
selecting and editing clips in the authoring tool just to determine
their nested structure. The ActionScript editor provides an Insert
Target Path tool (shown in <a href="ch13_05.htm">Figure 13-6</a>) which lets
us generate a clip reference visually, relieving the burden of
creating it manually.</p>


<a name="ch13-73566" /><div class="figure"><img alt="Figure 13-6" src="figs/act.1306.gif" /></div><h4 class="objtitle">Figure 13-6. The Insert Target Path button</h4>

<p>To use Insert Target Path, follow these steps:</p>


<ol><li><p>Position the cursor in your code where you want a clip reference to
be inserted.</p></li><li><p>Click the Insert Target Path button, shown in <a href="ch13_05.htm">Figure 13-6</a>.</p></li><li><p>In the Insert Target Path dialog box, select the clip to which you
want to refer.</p></li><li><p>Choose whether to insert an <em class="emphasis">absolute reference</em>,
which begins with <tt class="literal">_root</tt>, or a <em class="emphasis">relative
reference</em>, which expresses the reference to the target
clip in relation to the clip that contains your code.</p></li><li><p>If you are exporting to Flash 4 format, choose the Slashes Notation
button for Flash 4 compatibility. (The Dot Notation button, selected
by default, composes references that won't work in Flash 4).
See <a href="ch02_05.htm">Table 2-1</a>.</p></li></ol>
<p>The Insert Target Path tool cannot generate references that ascend a
hierarchy of clips. That is, the tool cannot be used to refer to a
clip that contains the current clip (unless you want to begin the
path from <tt class="literal">_root</tt> and proceed downward). To create
references that ascend the clip hierarchy, we must manually type the
appropriate references in our code using the <tt class="literal">_
parent</tt> property.</p>
</div>




<a name="ch13-30-fm2xml" /><div class="sect2">
<h3 class="sect2">13.5.6. Dynamic References to Clip Objects</h3>


<p>Normally, <a name="INDEX-1720" /> <a name="INDEX-1721" />we know the name of the
specific instance or movie we are manipulating, but there are times
when we'd like to control a clip whose name we don't
know. We may, for example, want to scale down a whole group of clips
using a loop or create a button that refers to a different clip each
time it is clicked. To handle these situations, we must create our
clip references dynamically at runtime.</p>


<a name="ch13-31-fm2xml" /><div class="sect3">
<h3 class="sect3">13.5.6.1. Using the array-element access operator</h3>


<p>As <a name="INDEX-1722" /> <a name="INDEX-1723" />we saw in <a href="ch05_01.htm">Chapter 5, "Operators"</a>, and <a href="ch12_01.htm">Chapter 12, "Objects and Classes"</a>, the
properties of an object may be retrieved via the dot operator or
through the array-element access operator, <tt class="literal">[ ]</tt>.
For example, the following two statements are equivalent:</p>


<blockquote><pre class="code">myObject.myProperty = 10;
myObject["myProperty"] = 10;</pre></blockquote>


<p>The array-element access operator has one important feature that the
dot operator does not; it lets us (indeed requires us to) refer to a
property using a <em class="emphasis">string expression</em> rather than
an <em class="emphasis">identifier</em>. For example, here's a
string concatenation expression that acts as a valid reference to the
property <tt class="literal">myProperty</tt>:</p>


<blockquote><pre class="code">myObject["myProp" + "erty"];</pre></blockquote>


<p>We can apply the same technique to create our instance and movie
references dynamically. We already learned that clip instances are
stored as properties of their parent clips. Earlier, we used the dot
operator to refer to those instance properties. For example, from the
main timeline we can refer to <tt class="literal">clipB</tt>, which is
nested inside of another instance, <tt class="literal">clipA</tt>, as
follows:</p>


<blockquote><pre class="code">clipA.clipB;         // Refer to <em class="replaceable">clipB</em> inside <em class="replaceable">clipA</em>
clipA.clipB.stop( );  // Invoke a method on <em class="replaceable">clipB</em></pre></blockquote>


<p>Because instances are properties, we can also legitimately refer to
them with the <tt class="literal">[ ]</tt> operator, as in:</p>


<blockquote><pre class="code">clipA["clipB"];         // Refer to <em class="replaceable">clipB</em> inside <em class="replaceable">clipA</em>
clipA["clipB"].stop( );  // Invoke a method on <em class="replaceable">clipB</em></pre></blockquote>


<p>Notice that when we use the <tt class="literal">[ ]</tt> operator to refer
to <tt class="literal">clipB</tt>, we provide the name of
<tt class="literal">clipB</tt> as a string, not an identifier. That string
reference may be any valid string-yielding expression. For example,
here's a reference to <tt class="literal">clipB</tt> that involves a
string concatenation:</p>


<blockquote><pre class="code">var clipCount = "B";
clipA["clip" + clipCount];         // Refer to <em class="replaceable">clipB</em> inside <em class="replaceable">clipA</em>
clipA["clip" + clipCount].stop( );  // Invoke a method on <em class="replaceable">clipB</em></pre></blockquote>


<p>We can create clip references dynamically to refer to a series of
sequentially named clips:</p>


<blockquote><pre class="code">// Stop <em class="replaceable">clip1</em>,<em class="replaceable"> clip2</em>,<em class="replaceable"> clip3</em>,<em class="replaceable"> and clip4</em>
for (var i = 1; i &lt;= 4; i++) {
  _root["clip" + i].stop( );
}</pre></blockquote>


<p>Now that's powerful!</p>
</div>



<a name="ch13-32-fm2xml" /><div class="sect3">
<h3 class="sect3">13.5.6.2. Storing references to clips in data containers</h3>


<p>I started <a name="INDEX-1724" />this chapter by saying that movie
clips are effectively data objects in ActionScript. We can store a
reference to a movie clip instance in a variable, an array element,
or an object property.</p>


<p>Recall our earlier example of a nested instance hierarchy
(<tt class="literal">clipC</tt> nested inside <tt class="literal">clipB</tt>
nested inside <tt class="literal">clipA</tt>) placed on the main timeline
of a document. If we store those various clips in data containers, we
can control them dynamically using the containers instead of explicit
references to the clips. <a href="ch13_05.htm">Example 13-1</a>, which shows
code that would be placed on a frame in the main timeline, uses data
containers to store and control instances.</p>


<a name="ch13-56426" /><div class="example">
<h4 class="objtitle">Example 13-1. Storing Clip References in Variables and Arrays </h4>

<blockquote><pre class="code">var x = clipA.clipB;  // Store a reference to <em class="replaceable">clipB</em> in the variable <em class="replaceable">x</em>
x.play( );             // Play <em class="replaceable">clipB</em>

// Now let's store our clips in the elements of an array
var myClips = [clipA, clipA.clipB, clipA.clipB.clipC];
myClips[0].play( );    // Play <em class="replaceable">clipA</em>
myClips[1]._x = 200;  // Place <em class="replaceable">clipB</em> 200 pixels from the Stage's left edge

// Stop all the clips in our array using a loop
for (var i = 0; i &lt; myClips.length; i++) {  
  myClips[i].stop( );
}</pre></blockquote>
</div>


<p>By storing clip references in data containers, we can manipulate the
clips (such as playing, rotating, or stopping them) without knowing
or affecting the document's clip hierarchy.</p>
</div>



<a name="ch13-33-fm2xml" /><div class="sect3">
<h3 class="sect3">13.5.6.3. Using for-in to access movie clips</h3>


<p>In <a href="ch08_01.htm">Chapter 8, "Loop Statements"</a>, <a name="INDEX-1725" />we learned how to enumerate an
object's properties using a <em class="filename">for-in</em> loop.
Recall that a <em class="filename">for-in</em> loop's iterator
variable automatically cycles through all the properties of the
object, so that the loop is executed once for each property:</p>


<blockquote><pre class="code">for (var prop in someObject) {
  trace("the value of someObject." + prop + " is " + someObject[prop]);
}</pre></blockquote>


<p><a href="ch13_05.htm">Example 13-2</a> shows how to use a
<em class="filename">for-in</em> loop to enumerate all the clips that
reside on a given timeline.</p>


<a name="ch13-33155" /><div class="example">
<h4 class="objtitle">Example 13-2. Finding Movie Clips on a Timeline </h4>

<blockquote><pre class="code">for (var property in myClip) {
  // Check if the current property of <em class="replaceable">myClip</em> is a movie clip
  if (typeof myClip[property] == "movieclip") {
    trace("Found instance: " + myClip[property]._name);

    // Now do something to the clip
    myClip[property]._x = 300;
    myClip[property].play( );
  }
}</pre></blockquote>
</div>


<p>The <em class="filename">for-in</em> loop gives us enormously convenient
access to the clips contained by a specific clip instance or main
movie. Using <em class="filename">for-in</em> we can control any clip on
any timeline, whether we know the clip's name or not and
whether the clip was created manually or programmatically.</p>


<p><a href="ch13_05.htm">Example 13-3</a> shows a
<a name="INDEX-1726" />recursive version of the
previous example. It finds all the clip instances on a timeline, plus
the clip instances on all nested timelines.</p>


<a name="ch13-96092" /><div class="example">
<h4 class="objtitle">Example 13-3. Recursively Finding All Movie Clips on a Timeline </h4>

<blockquote><pre class="code">function findClips (myClip, indentSpaces) {
  // Use spaces to indent the child clips on each successive tier
  var indent = " ";
  for (var i = 0; i &lt; indentSpaces; i++) {
    indent += " ";
  }
  for (var property in myClip) {
    // Check if the current property of myClip is a movie clip
    if (typeof myClip[property] == "movieclip") {
      trace(indent + myClip[property]._name);
      // Check if this clip is parent to any other clips
      findClips(myClip[property], indentSpaces + 4);
    }
  }
}
findClips (_root, 0); // Find all clip instances descended from main timeline</pre></blockquote>
</div>


<p>For more information on function recursion, see <a href="ch09_09.htm">Section 9.9, "Recursive Functions"</a> in <a href="ch09_01.htm">Chapter 9, "Functions"</a>.</p>
</div>



<a name="ch13-34-fm2xml" /><div class="sect3">
<h3 class="sect3">13.5.6.4. The _name property</h3>


<p>As <a name="INDEX-1727" /> <a name="INDEX-1728" />we learned earlier in <a href="ch13_03.htm">Section 13.3.3, "Instance Names"</a>, every instance's name is stored
as a string in the built-in property <tt class="literal">_name</tt>. We can
use that property, as we saw in <a href="ch13_05.htm">Example 13-2</a>, to
determine the name of the current clip or the name of some other clip
in an instance hierarchy:</p>


<blockquote><pre class="code">_name;             // The current instance's name
_ parent._name      // The name of the clip that contains the current clip</pre></blockquote>


<p>The <tt class="literal">_name</tt> property comes in handy when we want to
perform conditional operations on clips according to their
identities. For example, here we duplicate the
<tt class="literal">seedClip</tt> clip when it loads:</p>


<blockquote><pre class="code">onClipEvent (load) {
  if (_name == "seedClip") {
    this.duplicateMovieClip("clipCopy", 0);
  }
}</pre></blockquote>


<p>By checking explicitly for the <tt class="literal">seedClip</tt> name, we
prevent infinite recursion -- without our conditional statement,
the <em class="filename">load</em> handler of each duplicated clip would
cause the clip to duplicate itself.</p>
</div>



<a name="ch13-35-fm2xml" /><div class="sect3">
<h3 class="sect3">13.5.6.5. The _target property</h3>


<p>Every <a name="INDEX-1729" /> <a name="INDEX-1730" />movie clip instance has a
built-in <tt class="literal">_target</tt> property, which is a string
specifying the clip's absolute path using the deprecated Flash
4 "slash" notation. For example, if
<tt class="literal">clipB</tt> is placed inside <tt class="literal">clipA</tt>,
and <tt class="literal">clipA</tt> is placed on the main timeline, the
<tt class="literal">_target</tt> property of those clips is as follows:</p>


<blockquote><pre class="code">_root._target                    // Contains: "/"
_root.clipA._target              // Contains: "/clipA"
_root.clipA.clipB._target        // Contains: "/clipA/clipB"</pre></blockquote>
</div>



<a name="ch13-61828" /><div class="sect3">
<h3 class="sect3">13.5.6.6. The targetPath( ) function</h3>


<p>The <a name="INDEX-1731" /><em class="filename">targetPath( )</em>
<a name="INDEX-1732" /> <a name="INDEX-1733" />
<a name="INDEX-1734" />function returns a string that contains
the clip's absolute reference path, expressed using dot
notation. The <em class="filename">targetPath( )</em> function is the
Flash 5-syntax equivalent of <tt class="literal">_target</tt>. It takes the
form:</p>


<blockquote><pre class="code">targetPath(<em class="replaceable">movieClip</em>)</pre></blockquote>


<p>where <em class="replaceable">movieClip</em> is the identifier of the
clip whose absolute reference we wish to retrieve. Here are some
examples, using our now familiar example hierarchy:</p>


<blockquote><pre class="code">targetPath(_root);              // Contains: "_level0"
targetPath(_root.clipA);        // Contains: "_level0.clipA"
targetPath(_root.clipA.clipB);  // Contains: "_level0.clipA.clipB"</pre></blockquote>


<p>The<em class="filename"> targetPath( )</em> function gives us the complete
path to a clip, whereas the <tt class="literal">_name</tt> property gives
us only the name of the clip. (This is analogous to having a complete
file path versus just the filename.) So, we can use
<em class="filename">targetPath( )</em> to compose code that controls
clips based not only on their name but also on their location. For
example, we might create a generic navigational button that, by
examining its <em class="filename">targetPath( )</em>, sets its own color
to match the section of content within which it resides. See the
example under <a href="ch20_05.htm">Reference 20.206</a> in <a href="part3.htm">Part III, "Language Reference"</a> for a demonstration of <em class="filename">targetPath(
)</em> in <a name="INDEX-1735" /> <a name="INDEX-1736" />action.</p>
</div>
</div>




<a name="ch13-42076" /><div class="sect2">
<h3 class="sect2">13.5.7. Whither Tell Target?</h3>


<p>In <a name="INDEX-1737" /> <a name="INDEX-1738" />Flash 4, <em class="filename">Tell Target</em>
was our main tool for referring to movie clips. <em class="filename">Tell
Target</em>, bless its soul, was an unwieldy tool and is
rendered obsolete by the much more elegant object model introduced in
Flash 5. The <em class="filename">Tell Target</em> function has been
deprecated (i.e., retired from recommended use). Although we may
still use the <em class="filename">tellTarget( )</em> function to code in
a Flash 4 manner, <em class="filename">tellTarget( )</em> will likely
disappear in the future.</p>


<p>Consider the following code, which uses <em class="filename">Tell
Target</em> to play an instance named
<tt class="literal">closingSequence</tt>:</p>


<blockquote><pre class="code">Begin Tell Target ("closingSequence")
  Play
End Tell Target</pre></blockquote>


<p>As of Flash 5, we simply invoke the much more convenient and readable
<em class="filename">play( )</em> method on the
<tt class="literal">closingSequence</tt> instance:</p>


<blockquote><pre class="code">closingSequence.play( );</pre></blockquote>


<p><em class="filename">Tell Target</em> could also perform multiple
operations on an instance within a code block, like so:</p>


<blockquote><pre class="code">Begin Tell Target ("ball")
  (Set Property: ("ball", x Scale) = "5")
  Play
End Tell Target</pre></blockquote>


<p>As of Flash 5, the <em class="filename">with( )</em> statement, described
in <a href="ch06_01.htm">Chapter 6, "Statements"</a>, is the preferred way to achieve
similar results:</p>


<blockquote><pre class="code">with (ball) {
  _xscale = 5;
  play( );
}</pre></blockquote>


<p>See <a href="appc_01.htm">Appendix C, "Backward Compatibility"</a>, for more details on deprecated
Flash 4 ActionScript and the preferred equivalents in <a name="INDEX-1739" /> <a name="INDEX-1740" />Flash 5.</p>
</div>


<hr width="684" align="left" />
<div class="navbar"><table width="684" border="0"><tr><td align="left" valign="top" width="228"><a href="ch13_04.htm"><img alt="Previous" border="0" src="../gifs/txtpreva.gif" /></a></td><td align="center" valign="top" width="228"><a href="index.htm"><img alt="Home" border="0" src="../gifs/txthome.gif" /></a></td><td align="right" valign="top" width="228"><a href="ch13_06.htm"><img alt="Next" border="0" src="../gifs/txtnexta.gif" /></a></td></tr><tr><td align="left" valign="top" width="228">13.4. Movie and Instance Stacking Order</td><td align="center" valign="top" width="228"><a href="index/index.htm"><img alt="Book Index" border="0" src="../gifs/index.gif" /></a></td><td align="right" valign="top" width="228">13.6. Removing Clip Instances and Main Movies</td></tr></table></div>
<hr width="684" align="left" />

<img alt="Library Navigation Links" border="0" src="../gifs/navbar.gif" usemap="#library-map" />
<p><font size="-1"><a href="copyrght.htm">Copyright &copy; 2002</a> O'Reilly &amp; Associates. All rights reserved.</font></p>

<map name="library-map"><area href="../index.htm" coords="0,1,78,93" shape="rect" /><area href="../wdesign/index.htm" coords="80,2,155,96" shape="rect" /><area href="../xhtml/index.htm" coords="158,0,263,97" shape="rect" /><area href="../audio/index.htm" coords="265,1,335,97" shape="rect" /><area href="../css/index.htm" coords="338,1,434,93" shape="rect" /><area href="index.htm" coords="439,0,540,102" shape="rect" /><area href="../infoarch/index.htm" coords="544,0,685,102" shape="rect" /></map>

</body></html>