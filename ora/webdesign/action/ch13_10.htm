<html><head><title>The Last Quiz (ActionScript: The Definitive Guide)</title><link rel="stylesheet" type="text/css" href="../style/style1.css" />

<meta name="DC.Creator" content="Colin Moock" /><meta name="DC.Format" content="text/xml" scheme="MIME" /><meta name="DC.Language" content="en-US" /><meta name="DC.Publisher" content="O'Reilly &amp; Associates, Inc." /><meta name="DC.Source" scheme="ISBN" content="1565928520L" /><meta name="DC.Subject.Keyword" content="stuff" /><meta name="DC.Title" content="ActionScript: The Definitive Guide" /><meta name="DC.Type" content="Text.Monograph" />

</head><body bgcolor="#ffffff">

<img alt="Book Home" border="0" src="gifs/smbanner.gif" usemap="#banner-map" /><map name="banner-map"><area shape="rect" coords="1,-2,616,66" href="index.htm" alt="ActionScript: The Definitive Guide" /><area shape="rect" coords="629,-11,726,25" href="jobjects/fsearch.htm" alt="Search this book" /></map>

<div class="navbar"><table width="684" border="0"><tr><td align="left" valign="top" width="228"><a href="ch13_09.htm"><img alt="Previous" border="0" src="../gifs/txtpreva.gif" /></a></td><td align="center" valign="top" width="228"><a href="index.htm">ActionScript: The Definitive Guide</a></td><td align="right" valign="top" width="228"><a href="ch13_11.htm"><img alt="Next" border="0" src="../gifs/txtnexta.gif" /></a></td></tr></table></div>
<hr width="684" align="left" />


<h2 class="sect1">13.10. The Last Quiz</h2>


<p>Here's <a name="INDEX-1875" />one final version of the
multiple-choice quiz we started way back in <a href="ch01_01.htm">Chapter 1, "A Gentle Introduction for Non-Programmers"</a>. This updated version of the quiz dynamically
generates all of the quiz's questions and answers using movie
clips, so our quiz is infinitely scalable and highly configurable. In
fact, we're not far off from making the entire quiz a Smart
Clip that could be customized by non-programmers.</p>


<p>The code for the quiz is shown in <a href="ch13_10.htm">Example 13-5</a> and
available from the online Code Depot. Because the quiz is now
completely dynamically generated, 99% of the code fits entirely on
one frame; we no longer need to fill a timeline with questions. (All
we're missing is a preloader to ensure smooth playback over a
network.) Note that we've used <tt class="literal">#include</tt> to
import a block of code from an external text file. For more
information on <tt class="literal">#include</tt>, see <a href="part3.htm">Part III, "Language Reference"</a>, and see <a href="ch16_07.htm">Section 16.7, "Externalizing ActionScript Code"</a>
in <a href="ch16_01.htm">Chapter 16, "ActionScript Authoring Environment"</a>. As an exercise, try adding new
questions to the quiz by creating new objects and placing them in the
questions array.</p>


<p>Though the code for the final quiz is relatively short, it's
packed full of important techniques. With the exception of
<tt class="literal">#include</tt>, we've seen all of them in
isolation before, but this extended real-world example shows how they
can all fit together. Study the comments carefully -- when you
understand this version of the quiz in its entirety you'll be
well-equipped to create advanced applications with ActionScript.</p>


<p>A longer explanation of the code in this quiz is available at:</p>


<blockquote class="simplelist">

<p><a href="../../../../../../www.moock.org/webdesign/lectures/ff2001sfWorkshop">http://www.moock.org/webdesign/lectures/ff2001sfWorkshop</a></p>

</blockquote>


<a name="ch13-39786" /><div class="example">
<h4 class="objtitle">Example 13-5.  The Multiple-Choice Quiz, One Last Time </h4>

<blockquote><pre class="code"><tt class="userinput"><b>// CODE ON FRAME 1 OF THE MAIN TIMELINE</b></tt>
//  Stop the movie
stop( );

//  Init main timeline variables
var displayTotal;               // Text field for user's final score
var totalCorrect = 0;           // Number of questions answered correctly
var userAnswers = new Array( );  // Array containing the user's guesses
var currentQuestion = 0;        // Number of the question the user is on

// Import the source file containing our array of question objects
// See explanation later in this example
#include "questionsArray.as"    

// Begin the quiz
makeQuestion(currentQuestion);

// The <em class="replaceable">Question()</em> constructor
function Question (correctAnswer, questionText, answers) {
  this.correctAnswer = correctAnswer;
  this.questionText = questionText;
  this.answers = answers;
}

// Function to render each question to the screen
function makeQuestion (currentQuestion) {
  // Clear the Stage of the last question
  questionClip.removeMovieClip( );

  // Create and place the main question clip
  attachMovie("questionTemplate", "questionClip", 0);
  questionClip._x = 277;
  questionClip._y = 205;
  questionClip.qNum = "question\n  " + (currentQuestion + 1);
  questionClip.qText = questionsArray[currentQuestion].questionText;

  // Create the individual answer clips in the question clip
  for (var i = 0; i &lt; questionsArray[currentQuestion].answers.length; i++) {
    // Attach our linked answerTemplate clip from the Library;
    // It contains a generalized button and a text field for the question
    questionClip.attachMovie("answerTemplate", "answer" + i, i);
    // Place this answer clip in line below the question
    questionClip["answer" + i]._y += 70 + (i * 15);
    questionClip["answer" + i]._x -= 100;
    // Set the text field in the answer clip to the appropriate element of this
    // question's answer array
    questionClip["answer" + i].answerText =
        questionsArray[currentQuestion].answers[i];
  }
}

// Function to register the user's answers
function answer (choice) {
  userAnswers.push(choice);
  if (currentQuestion + 1 == questionsArray.length) {
    questionClip.removeMovieClip( );
    gotoAndStop ("quizEnd");
  } else {
    makeQuestion(++currentQuestion);
  }
}

// Function to tally the user's score
function gradeUser( ) {
  // Count how many questions the user answered correctly
  for (var i = 0; i &lt; questionsArray.length; i++) {
    if (userAnswers[i] == questionsArray[i].correctAnswer) {
      totalCorrect++;
    }
  }
  // Show the user's score in an onscreen text field
  displayTotal = totalCorrect + "/" + questionsArray.length;
}

<tt class="userinput"><b>// CODE ON THE DYNAMICALLY GENERATED ANSWER BUTTONS</b></tt>
// Answer clips are generated dynamically and named in the series
// "answer0", "answer1",..."answer<em class="replaceable">n</em>". Each answer clip contains a
// button that, when clicked, checks the name of the answer clip it's 
// in to determine the user's choice.
on (release) {
  // Trim the prefix "answer" off this clip's name
  choice = _name.slice(6, _name.length);
  _root.answer(choice);
}

<tt class="userinput"><b>// CODE ON THE quizEnd FRAME</b></tt>
gradeUser( );</pre></blockquote>
</div>


<p>The contents of the <em class="filename">questionsArray.as</em> file are
as shown here:</p>


<blockquote><pre class="code"><tt class="userinput"><b>
// CODE IN THE questionsarray.as FILE</b></tt>
// -------------------------------------------------
// Contains an array of question objects that
// populate the questions and answers of a multiple-
// choice quiz. Compose new question objects according 
// to the following example.

/************** EXAMPLE QUESTION OBJECT ***************
  // Invoke the Question constructor with three arguments:
  //   a zero-relative number giving the correct answer, 
  //   a string giving the question text, and
  //   an array containing the multiple-choice answers
  new Question 
  (
    1,
    "question goes here?",
    ["answer 1", "answer 2", "answer 3"]
  )
*******************************************************/
// Remember to place a comma after each object in the array except the last
questionsArray = [new Question (2,
  "Which version of Flash first introduced movie clips?",
  ["version 1", "version 2", "version 3",
  "version 4", "version 5", "version 6"]),

  new Question (2,
    "When was ActionScript formally declared a scripting language?",
    ["version 3", "version 4", "version 5"]),

  new Question (1,
    "Are regular expressions supported by Flash 5 ActionScript?",
    ["yes", "no"]),

  new Question (0,
    "Which sound format offers the best compression?",
    ["mp3","aiff", "wav"]),

  new Question (1,
    "True or False: The post-increment operator (++) returns the
    value of its operand + 1.",
    ["true", "false"]),
  
  new Question (3,
    "Actionscript is based on...",
    ["Java", "JavaScript", "C++", "ECMA-262", "Perl"])];<a name="INDEX-1876" /></pre></blockquote>


<hr width="684" align="left" />
<div class="navbar"><table width="684" border="0"><tr><td align="left" valign="top" width="228"><a href="ch13_09.htm"><img alt="Previous" border="0" src="../gifs/txtpreva.gif" /></a></td><td align="center" valign="top" width="228"><a href="index.htm"><img alt="Home" border="0" src="../gifs/txthome.gif" /></a></td><td align="right" valign="top" width="228"><a href="ch13_11.htm"><img alt="Next" border="0" src="../gifs/txtnexta.gif" /></a></td></tr><tr><td align="left" valign="top" width="228">13.9. Applied Movie Clip Examples</td><td align="center" valign="top" width="228"><a href="index/index.htm"><img alt="Book Index" border="0" src="../gifs/index.gif" /></a></td><td align="right" valign="top" width="228">13.11. Onward!</td></tr></table></div>
<hr width="684" align="left" />

<img alt="Library Navigation Links" border="0" src="../gifs/navbar.gif" usemap="#library-map" />
<p><font size="-1"><a href="copyrght.htm">Copyright &copy; 2002</a> O'Reilly &amp; Associates. All rights reserved.</font></p>

<map name="library-map"><area href="../index.htm" coords="0,1,78,93" shape="rect" /><area href="../wdesign/index.htm" coords="80,2,155,96" shape="rect" /><area href="../xhtml/index.htm" coords="158,0,263,97" shape="rect" /><area href="../audio/index.htm" coords="265,1,335,97" shape="rect" /><area href="../css/index.htm" coords="338,1,434,93" shape="rect" /><area href="index.htm" coords="439,0,540,102" shape="rect" /><area href="../infoarch/index.htm" coords="544,0,685,102" shape="rect" /></map>

</body></html>