<html><head><title>The String Type (ActionScript: The Definitive Guide)</title><link rel="stylesheet" type="text/css" href="../style/style1.css" />

<meta name="DC.Creator" content="Colin Moock" /><meta name="DC.Format" content="text/xml" scheme="MIME" /><meta name="DC.Language" content="en-US" /><meta name="DC.Publisher" content="O'Reilly &amp; Associates, Inc." /><meta name="DC.Source" scheme="ISBN" content="1565928520L" /><meta name="DC.Subject.Keyword" content="stuff" /><meta name="DC.Title" content="ActionScript: The Definitive Guide" /><meta name="DC.Type" content="Text.Monograph" />

</head><body bgcolor="#ffffff">

<img alt="Book Home" border="0" src="gifs/smbanner.gif" usemap="#banner-map" /><map name="banner-map"><area shape="rect" coords="1,-2,616,66" href="index.htm" alt="ActionScript: The Definitive Guide" /><area shape="rect" coords="629,-11,726,25" href="jobjects/fsearch.htm" alt="Search this book" /></map>

<div class="navbar"><table width="684" border="0"><tr><td align="left" valign="top" width="228"><a href="ch04_04.htm"><img alt="Previous" border="0" src="../gifs/txtpreva.gif" /></a></td><td align="center" valign="top" width="228"><a href="index.htm">ActionScript: The Definitive Guide</a></td><td align="right" valign="top" width="228"><a href="ch04_06.htm"><img alt="Next" border="0" src="../gifs/txtnexta.gif" /></a></td></tr></table></div>
<hr width="684" align="left" />


<h2 class="sect1">4.5. The String Type</h2>


<p><em class="emphasis">String</em> <a name="INDEX-448" />is the datatype used for textual data
(letters, punctuation marks, and other characters). A string literal
is any combination of characters enclosed in quotation marks:</p>


<blockquote><pre class="code">"asdfksldfsdfeoif"  // A frustrated string
"greetings"         // A friendly string
"moock@moock.org"   // A self-promotional string
"123"               // It may look like a number, but it's a string
'singles'           // Single quotes are acceptable too</pre></blockquote>


<p>Before we see how to form string literals, let's examine which
characters are permitted in strings.</p>


<a name="ch04-12-fm2xml" /><div class="sect2">
<h3 class="sect2">4.5.1. Character Encoding</h3>


<p>Like
<a name="INDEX-449" />
<a name="INDEX-450" />
<a name="INDEX-451" />all
computer data, text characters are stored internally using a numeric
code. They are<em class="emphasis"> encoded</em> for storage and<em class="emphasis">
decoded</em> for display using a <em class="emphasis">character
set</em>, which <em class="emphasis">maps</em> (i.e., relates)
characters to their numeric codes. Character sets vary for different
languages and alphabets. Older Western applications use some
derivative of <a name="INDEX-452" />ASCII, a standard character set that
includes only 128 characters -- the English alphabet, numbers, and
basic punctuation marks. Modern applications support a family of
character sets known collectively as <a name="INDEX-453" />ISO-8859. Each of the ISO-8859
character sets encodes the standard Latin alphabet (`A'
to `Z') plus a varying set of letters needed in the
target languages. ActionScript uses <a name="INDEX-454" />
<a name="INDEX-455" />ISO-8859-1, also known as
<em class="emphasis">Latin 1</em>, as its primary character map.</p>


<p>The Latin 1 character set accommodates most Western European
languages -- French, German, Italian, Spanish, Portuguese, and so
on -- but not languages such as Greek, Turkish, Slavic, and
Russian.
<em class="emphasis">Unicode</em>,<a name="INDEX-456" /> the preferred
international standard for character encoding that maps up to a
million characters, is <em class="emphasis">not</em> supported in
ActionScript (support for Unicode would greatly increase the Flash
Player size). <a name="INDEX-457" /> <a name="INDEX-458" />However, ActionScript
does support a second character set for Japanese characters called
<em class="emphasis">Shift-JIS</em>. When working with text in
ActionScript, we can use any character from Latin 1 or Shift-JIS.</p>


<p>Even though Unicode itself isn't supported, we can use the
standard Unicode <a name="INDEX-459" />
<a name="INDEX-460" />escape sequences to represent any
character from Latin 1 or Shift-JIS. We can also manipulate character
strings with Unicode-style functions. In theory, then, Unicode
support could be added to Flash at some future date without breaking
old code.</p>


<p><a href="appb_01.htm">Appendix B, "Latin 1 Character Repertoire and Keycodes"</a>, lists each character's Unicode
<em class="emphasis">code point</em>,<a name="INDEX-461" /> which is the
character's numeric position in the Unicode set. Later,
we'll see how to use those code points to manipulate characters
in our scripts.</p>
</div>




<a name="ch04-94908" /><div class="sect2">
<h3 class="sect2">4.5.2. String Literals</h3>


<p>The <a name="INDEX-462" />
<a name="INDEX-463" />most
<a name="INDEX-464" /> <a name="INDEX-465" />common <a name="INDEX-466" /> <a name="INDEX-467" /> <a name="INDEX-468" /> <a name="INDEX-469" />way to make a string is
to put either single or double quotation marks around a group of
characters from the Latin 1 or Shift-JIS character sets:</p>


<blockquote><pre class="code">"hello"
'Nice night for a walk.'
"The equation is 12 + 4 = 16, which programmers see as 12 + 4 == 16."</pre></blockquote>


<p>If we use a double quotation mark to start a string, we must end it
with a double quotation mark as well. Likewise, if we use a single
quotation mark to start a string, we must end that string with a
single quotation mark. However, a double-quoted string may contain
single-quoted characters and vice versa. These strings, for example,
contain legal uses of single and double quotes:</p>


<blockquote><pre class="code">"Nice night, isn't it?"               // Single (apostrophe) inside double quotes
'I said, "What a pleasant evening!"'  // Double quotes inside single quotes</pre></blockquote>


<a name="ch04-13-fm2xml" /><div class="sect3">
<h3 class="sect3">4.5.2.1. The empty string</h3>


<p>The <a name="INDEX-470" />
<a name="INDEX-471" />shortest
possible string is the <em class="emphasis">empty string</em>, a string
with no characters:</p>


<blockquote><pre class="code">""
''</pre></blockquote>


<p>The empty string is occasionally handy when we're trying to
detect whether a variable contains a usable string value or not:</p>


<blockquote><pre class="code">if (firstName == "") {
  trace("You forgot to enter your name!");
}</pre></blockquote>


<p>However, comparing a variable to "" may not always work as we desire.
Remember that "" is considered equal to the number
and the Boolean value <tt class="literal">false</tt> (see <a href="ch03_04.htm">Table 3-1</a> and <a href="ch03_04.htm">Table 3-3</a>). So, in
order to be sure we're checking for an actual empty string, we
should first make sure our variable value belongs to the string
datatype, like this:</p>


<blockquote><pre class="code">if (typeof firstName == "string" &amp;&amp; firstName == "") {
  trace("You forgot to enter your name!");
}</pre></blockquote>
</div>



<a name="ch04-18548" /><div class="sect3">
<h3 class="sect3">4.5.2.2. Escape sequences</h3>


<p>We saw <a name="INDEX-472" />
<a name="INDEX-473" />earlier <a name="INDEX-474" />
<a name="INDEX-475" />that <a name="INDEX-476" />single quotes (') may be used inside
double-quoted literals, and double quotes (") may be used inside
single-quoted literals. But what if we want to use both? For example:</p>


<blockquote><pre class="code">'I remarked "Nice night, isn't it?"'</pre></blockquote>


<p>As is, that line of code causes an error because the interpreter
thinks that the string literal ends with the apostrophe in the word
"isn't." The interpreter reads it as:</p>


<blockquote><pre class="code">'I remarked "Nice night, isn'  // The rest is considered unintelligible garbage</pre></blockquote>


<p>To use the single quote inside a string literal delimited by single
quotes, we must use an <em class="emphasis">escape sequence</em>.</p>


<p>An escape sequence represents a literal string value using a
backslash character (\), followed by a code that represents the
desired character or the character itself. The escape sequences for
single and double quotes are:</p>


<blockquote><pre class="code">\'
\"</pre></blockquote>


<p>So, our cordial evening greeting, properly expressed as a string
literal, should be:</p>


<blockquote><pre class="code">'I remarked "Nice night, isn\'t it?"'  // Escape the apostrophe!</pre></blockquote>


<p>Other <a name="INDEX-477" />
<a name="INDEX-478" />escape sequences, which can be used to
represent various special or reserved characters, are listed in <a href="ch04_05.htm">Table 4-1</a>.</p>


<a name="ch04-70572" /><h4 class="objtitle">Table 4-1. ActionScript Escape Sequences </h4><table border="1">



<tr>
<th>
<p>Escape Sequence</p></th>
<th>
<p>Meaning</p></th>
</tr>




<tr>
<td>
<p><tt class="literal">\b</tt></p></td>
<td>
<p>Backspace character (ASCII 8)</p></td>
</tr>

<tr>
<td>
<p><tt class="literal">\f</tt></p></td>
<td>
<p>Form feed character (ASCII 12)</p></td>
</tr>

<tr>
<td>
<p><tt class="literal">\n</tt></p></td>
<td>
<p>Newline character; causes a line break (ASCII 10)</p></td>
</tr>

<tr>
<td>
<p><tt class="literal">\r</tt></p></td>
<td>
<p>Carriage return (CR) character; causes a line break (ASCII 13)</p></td>
</tr>

<tr>
<td>
<p><tt class="literal">\t</tt></p></td>
<td>
<p>Tab character (ASCII 9)</p></td>
</tr>

<tr>
<td>
<p><tt class="literal">\</tt>'</p></td>
<td>
<p>Single quotation mark</p></td>
</tr>

<tr>
<td>
<p><tt class="literal">\</tt>"</p></td>
<td>
<p>Double quotation mark</p></td>
</tr>

<tr>
<td>
<p><tt class="literal">\\</tt></p></td>
<td>
<p>Backslash character; necessary when using backslash as a literal
character to prevent <tt class="literal">\</tt> from being interpreted as
the beginning of an escape sequence</p></td>
</tr>


</table>
</div>



<a name="ch04-23602" /><div class="sect3">
<h3 class="sect3">4.5.2.3. Unicode-style escape sequences</h3>


<p>Not all <a name="INDEX-479" /> <a name="INDEX-480" /> <a name="INDEX-481" /> <a name="INDEX-482" />characters
<a name="INDEX-483" />
<a name="INDEX-484" />
<a name="INDEX-485" />from Latin 1 and Shift-JIS are
accessible from a keyboard. In order to include inaccessible
characters in a string, we use Unicode-style escape sequences. Note
that Flash does not actually support Unicode; it merely emulates its
syntax.</p>


<p>A Unicode-style escape sequence starts with a backslash and a
<em class="emphasis">lowercase</em> <em class="emphasis">u</em> (i.e.,
<tt class="literal">\u</tt>) followed by a four-digit hex number that
corresponds to the Unicode character's code point, such as:</p>


<blockquote><pre class="code">\u0040  // The @ sign
\u00A9  // The copyright symbol
\u0041  // The capital letter "A"</pre></blockquote>


<p>A <em class="emphasis">code point </em>is a unique identification number
that is assigned to each character in the Unicode character set. See
<a href="appb_01.htm">Appendix B, "Latin 1 Character Repertoire and Keycodes"</a> for a list of the Unicode code points
for Latin 1. The Shift-JIS code points may be found at the Unicode
Consortium site:</p>


<blockquote class="simplelist">

<p><a href="ftp://ftp.unicode.org/Public/MAPPINGS/EASTASIA/JIS/SHIFTJIS.TXT">ftp://ftp.unicode.org/Public/MAPPINGS/EASTASIA/JIS/SHIFTJIS.TXT</a></p>

</blockquote>


<p>If we're only escaping characters from the Latin 1 character
set, we may use a short form for the standard Unicode escape
sequence. The short form consists of the prefix <tt class="literal">\x</tt>
followed by a two-digit hexadecimal number that represents the Latin
1 encoding of the character. Since Latin 1 code points are the same
as the first 256 Unicode code points, you can still use the reference
chart in <a href="appb_01.htm">Appendix B, "Latin 1 Character Repertoire and Keycodes"</a>, but simply remove the
<tt class="literal">u00</tt>, as in the following examples:</p>


<blockquote><pre class="code">\u0040  // Unicode escape sequence
\x40    // \x shortcut form
\u00A9  // Unicode...
\xA9    // ...you get the idea</pre></blockquote>


<p>In addition to using Unicode escape sequences, we can insert any
character into a string via the more cumbersome built-in function,
<a name="INDEX-486" />
<a name="INDEX-487" /><em class="filename">fromCharCode( )</em>,
described later in <a href="ch04_06.htm">Section 4.6.9, "Character Code Functions"</a>. Note that
with both Unicode escape sequences and the <em class="filename">fromCharCode(
)</em> function, Flash 5 supports only those code points that
map to characters in the Latin 1 and Shift-JIS character sets.
Inserting other code points will not yield the correct Unicode
character unless future versions of Flash support more of
Unicode's character repertoire.</p>
</div>
</div>


<hr width="684" align="left" />
<div class="navbar"><table width="684" border="0"><tr><td align="left" valign="top" width="228"><a href="ch04_04.htm"><img alt="Previous" border="0" src="../gifs/txtpreva.gif" /></a></td><td align="center" valign="top" width="228"><a href="index.htm"><img alt="Home" border="0" src="../gifs/txthome.gif" /></a></td><td align="right" valign="top" width="228"><a href="ch04_06.htm"><img alt="Next" border="0" src="../gifs/txtnexta.gif" /></a></td></tr><tr><td align="left" valign="top" width="228">4.4. Working with Numbers</td><td align="center" valign="top" width="228"><a href="index/index.htm"><img alt="Book Index" border="0" src="../gifs/index.gif" /></a></td><td align="right" valign="top" width="228">4.6. Working with Strings</td></tr></table></div>
<hr width="684" align="left" />

<img alt="Library Navigation Links" border="0" src="../gifs/navbar.gif" usemap="#library-map" />
<p><font size="-1"><a href="copyrght.htm">Copyright &copy; 2002</a> O'Reilly &amp; Associates. All rights reserved.</font></p>

<map name="library-map"><area href="../index.htm" coords="0,1,78,93" shape="rect" /><area href="../wdesign/index.htm" coords="80,2,155,96" shape="rect" /><area href="../xhtml/index.htm" coords="158,0,263,97" shape="rect" /><area href="../audio/index.htm" coords="265,1,335,97" shape="rect" /><area href="../css/index.htm" coords="338,1,434,93" shape="rect" /><area href="index.htm" coords="439,0,540,102" shape="rect" /><area href="../infoarch/index.htm" coords="544,0,685,102" shape="rect" /></map>

</body></html>