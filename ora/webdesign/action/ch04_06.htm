<html><head><title>Working with Strings (ActionScript: The Definitive Guide)</title><link rel="stylesheet" type="text/css" href="../style/style1.css" />

<meta name="DC.Creator" content="Colin Moock" /><meta name="DC.Format" content="text/xml" scheme="MIME" /><meta name="DC.Language" content="en-US" /><meta name="DC.Publisher" content="O'Reilly &amp; Associates, Inc." /><meta name="DC.Source" scheme="ISBN" content="1565928520L" /><meta name="DC.Subject.Keyword" content="stuff" /><meta name="DC.Title" content="ActionScript: The Definitive Guide" /><meta name="DC.Type" content="Text.Monograph" />

</head><body bgcolor="#ffffff">

<img alt="Book Home" border="0" src="gifs/smbanner.gif" usemap="#banner-map" /><map name="banner-map"><area shape="rect" coords="1,-2,616,66" href="index.htm" alt="ActionScript: The Definitive Guide" /><area shape="rect" coords="629,-11,726,25" href="jobjects/fsearch.htm" alt="Search this book" /></map>

<div class="navbar"><table width="684" border="0"><tr><td align="left" valign="top" width="228"><a href="ch04_05.htm"><img alt="Previous" border="0" src="../gifs/txtpreva.gif" /></a></td><td align="center" valign="top" width="228"><a href="index.htm">ActionScript: The Definitive Guide</a></td><td align="right" valign="top" width="228"><a href="ch04_07.htm"><img alt="Next" border="0" src="../gifs/txtnexta.gif" /></a></td></tr></table></div>
<hr width="684" align="left" />


<h2 class="sect1">4.6. Working with Strings</h2>


<p>By manipulating strings we can program anything from a user-input
validator to a word-scramble game. With a little ingenuity, we can
make neat visual text effects and other fun stuff.</p>


<p>We can manipulate strings with both operators and built-in functions.
String operators can join multiple strings together or compare the
characters of two strings. Built-in functions can examine a
string's properties and contents, extract a portion of a
string, check a character's code point, create a character from
a code point, change the case of the characters in a string, and even
turn a string into a variable or property name.</p>


<a name="ch04-11766" /><div class="sect2">
<h3 class="sect2">4.6.1. Joining Strings Together</h3>


<p>Joining
<a name="INDEX-488" />strings
together (creating a new string from two or more strings) is called
<em class="emphasis">concatenation</em>. As seen earlier, we can
concatenate two strings with the plus operator (+), like this:</p>


<blockquote><pre class="code">"Macromedia" + "Flash"</pre></blockquote>


<p>That line of code yields the single string value
"MacromediaFlash". Oops! We forgot to put a space between
the words. To add the space, we can insert it within the quotes that
define one of the strings, such as:</p>


<blockquote><pre class="code">"Macromedia " + "Flash"  // Yields "Macromedia Flash"</pre></blockquote>


<p>But that's not always practical. In most cases we don't
want to add a space to a company or a product name. So instead, we
join three strings together, the middle one of which is simply an
empty space:</p>


<blockquote><pre class="code">"Macromedia" + " " + "Flash"   // Also yields "Macromedia Flash"</pre></blockquote>


<p>Note that the space character is not the same as the empty string we
saw earlier because the empty string has no characters between the
quotes.</p>


<p>We can also concatenate
<a name="INDEX-489" />variables
that contain string data. Consider the following code:</p>


<blockquote><pre class="code">var company = "Macromedia";
var product = "Flash";

// Set the variable <em class="replaceable">sectionTitle</em><tt class="userinput"><b> </b></tt>to "Macromedia Flash"
var sectionTitle = company + " " + product;</pre></blockquote>


<p>In lines 1 and 2, we store string values in variables. Then, we join
those values together with a space. Two of our string values are
contained in variables, one (the space) is a string literal. Not a
problem. Happens all the time.</p>


<p>Occasionally, we'll want to append characters onto an existing
string. For example, we could change the tone of a welcome message
like this:</p>


<blockquote><pre class="code">var greeting = "Hello";     // Our welcome message
greeting = greeting + "?";  // Our quizzical welcome message: "Hello?"</pre></blockquote>


<p>The preceding code gets the job done, but notice that we have to
refer to <tt class="literal">greeting</tt> twice in line 2. To be more
efficient, we can use the <a name="INDEX-490" />+= operator, which appends the string
on its right to the string variable on the left:</p>


<blockquote><pre class="code">var greeting = "Hello";    // Our welcome message
greeting += "?";           // Our quizzical welcome message: "Hello?"</pre></blockquote>

<a name="ch04-14-fm2xml" /><blockquote><h4>WARNING</h4>
<p>The <a name="INDEX-491" />Flash 4 string concatenation
operator (<tt class="literal">&amp;</tt>) performs a
<em class="emphasis">different</em> operation (bitwise AND) in Flash 5. If
exporting a Flash 4 <em class="filename">.swf</em>, you must use the
<em class="emphasis">add</em> operator to concatenate strings. Note that
<em class="emphasis">add</em> is supported only for backward
compatibility; the + operator is preferred in Flash 5.</p>

</blockquote>

<a name="ch04-29702" /><div class="sect3">
<h3 class="sect3">4.6.1.1. The concat( ) function</h3>


<p>The <a name="INDEX-492" />
<a name="INDEX-493" /><em class="filename">concat( )</em>
function appends characters to a string, like +=. Because
<em class="filename">concat( )</em> is a function,<em class="filename"> </em>it
uses the dot operator, like this:</p>


<blockquote><pre class="code">var product = "Macromedia".concat(" Flash");

var sentence = "How are you";
var question = sentence.concat("?")</pre></blockquote>


<p>Take heed though -- unlike <tt class="literal">+=</tt>, the
<em class="filename">concat( )</em> function does not alter the string
that it is applied to; it merely returns the concatenated string
value. In order to make use of that value, we must assign it to a
variable or other data container. Study the following code closely so
you'll understand the difference between <tt class="literal">+=</tt>
and <em class="filename">concat( ) </em>:</p>


<blockquote><pre class="code">var greeting = "Hello";
greeting.concat("?");
trace(greeting);  // Displays "Hello"; <em class="replaceable">greeting </em>was unaffected by concat

finalGreeting = greeting.concat("?");
trace(finalGreeting);  // Displays "Hello?"</pre></blockquote>


<p>The <em class="filename">concat( )</em> function also accepts multiple
arguments (that is, it can combine multiple comma-separated strings
into one string):</p>


<blockquote><pre class="code">firstName = "Karsten";

// Sets <em class="replaceable">finalGreeting</em> to "Hello Karsten?"
finalGreeting = greeting.concat(" ", firstName, "?");</pre></blockquote>


<p>which is the same as:</p>


<blockquote><pre class="code">finalGreeting = greeting;
finalGreeting += " " + firstName + "?";</pre></blockquote>
</div>
</div>




<a name="ch04-82266" /><div class="sect2">
<h3 class="sect2">4.6.2. Comparing Strings</h3>


<p>To <a name="INDEX-494" />check
whether two strings are the same, we use the equality
(<tt class="literal">==</tt>) and inequality (<tt class="literal">!=</tt>)
operators. We often compare strings when executing code based on a
condition. For example, if a user enters a password, we need to
compare his input string with the actual password. The result of our
comparison governs the behavior of our code.</p>


<a name="ch04-15-fm2xml" /><div class="sect3">
<h3 class="sect3">4.6.2.1. Using the equality (==) and inequality (!=) operators</h3>


<p>The <a name="INDEX-495" /> <a name="INDEX-496" />equality
<a name="INDEX-497" />operator takes two
operands -- one on its left and one on its right. The operands may
be string literals or any variable, array element, object property,
or expression that can be converted to a string:</p>


<blockquote><pre class="code">"hello" == "goodbye"       // Compare two string literals
userGuess == "fat-cheeks"  // Compare a variable with a string
userGuess == password      // Compare two variables</pre></blockquote>


<p>If the operand on the right has the exact same characters in the
exact same order as the operand on the left, the two strings are
considered equal and the result is the <a name="INDEX-498" />Boolean value <tt class="literal">true</tt>.
However, upper- and lowercase letters have different code points in a
character set, so they are not considered equal. The following
comparisons all evaluate to <tt class="literal">false</tt>:</p>


<blockquote><pre class="code">"olive-orange" == "olive orange"  // Not equal
"nighttime" == "night time"       // Not equal
"Day 1" == "day 1"                // Not equal</pre></blockquote>


<p>Because string comparisons result in the Boolean value
<tt class="literal">true</tt> or <tt class="literal">false</tt>, we can use them
as test expressions within conditional statements and loops, like
this:</p>


<blockquote><pre class="code">if (userGuess == password) {
  gotoAndStop("classifiedContent");
}</pre></blockquote>


<p>If the expression <em class="emphasis">(userGuess == password) </em> is
<tt class="literal">true</tt>, then the
<em class="emphasis">gotoAndStop("classifiedContent");</em> statement will
be executed. If the expression is <tt class="literal">false</tt>, the
<em class="emphasis">gotoAndStop("classifiedContent");</em> statement will
be skipped.</p>


<p>We'll learn more about Boolean values later in this chapter.
And we'll learn about conditional statements in <a href="ch07_01.htm">Chapter 7, "Conditionals"</a>.</p>


<p>To <a name="INDEX-499" /> <a name="INDEX-500" /> <a name="INDEX-501" />
<a name="INDEX-502" />check whether two strings are not equal, we
use the <em class="emphasis">inequality</em> operator, which yields a
result opposite to the equality operator. For example, the following
expressions represent the values <tt class="literal">false</tt> and
<tt class="literal">true</tt>, respectively:</p>


<blockquote><pre class="code">"Jane" != "Jane"  // false because the two strings are equal
"Jane" != "Biz"   // true because the strings are different</pre></blockquote>


<p>Here we use the inequality operator to take some action only if two
strings are not equal:</p>


<blockquote><pre class="code">if (userGender != "boy") {
  // Girls-only code goes here...
}</pre></blockquote>




<a name="ch04-17-fm2xml" /><blockquote><h4>TIP</h4>
<p>If exporting a <a name="INDEX-503" />Flash 4 <em class="filename">.swf</em>,
you must use the older <tt class="literal">eq</tt> and
<tt class="literal">ne</tt> operators for string equality and inequality
comparisons. Although <tt class="literal">eq</tt> and <tt class="literal">ne</tt>
are supported for backward compatibility, the <tt class="literal">==</tt>
and <tt class="literal">!=</tt> operators are preferred in Flash 5.</p>

</blockquote>
</div>



<a name="ch04-18-fm2xml" /><div class="sect3">
<h3 class="sect3">4.6.2.2. Character order and alphabetic comparisons</h3>


<p>We <a name="INDEX-504" /> <a name="INDEX-505" /> <a name="INDEX-506" />can also compare two strings on a
character-order basis. We saw earlier that each character has a
numeric code point assigned to it and that those code points are
ordered numerically in a character set. We can check which character
comes first in the order using the <em class="emphasis">comparison</em>
operators: <a name="INDEX-507" /> <a name="INDEX-508" />
<a name="INDEX-509" /> <a name="INDEX-510" />greater than (<tt class="literal">&gt;</tt>),
greater than or equal to (<tt class="literal">&gt;=</tt>),
<a name="INDEX-511" /> <a name="INDEX-512" />
<a name="INDEX-513" /> <a name="INDEX-514" />less than
(<tt class="literal">&lt;</tt>), and less than or equal to
(<tt class="literal">&lt;=</tt>). All of the comparison operators compare
two operands:</p>


<blockquote><pre class="code">"a" &lt; "b"
"2" &gt; "&amp;"
"r" &lt;= "R"
"$" &gt;= "@"</pre></blockquote>


<p>Much like equality and inequality expressions, comparison expressions
yield a <a name="INDEX-515" />Boolean value, <tt class="literal">true</tt> or
<tt class="literal">false</tt>, depending on the relationship of the
operands. Each operand can be anything that yields a string value.</p>


<p>Since the characters `A' to `Z' and
`a' to `z' are grouped in alphabetic sequence
in the Latin 1 character set, we frequently use character-order
comparisons to determine which of two letters comes first
alphabetically. Note, however, that any uppercase letter comes before
all lowercase letters in the Latin 1 character set. If we forget
this, we're in for some surprising results:</p>


<blockquote><pre class="code">"Z" &lt; "a"       // Evaluates to true
"z" &lt; "a"       // Evaluates to false
"Cow" &lt; "bird"  // Evaluates to true</pre></blockquote>


<p>Here's a closer look at each comparison operator; in the
following descriptions, the <em class="emphasis">comparison character</em>
is defined as the first nonidentical character found in the two
operands:</p>


<dl>
<dt><b>Greater than (&gt;)</b></dt>
<dd><p>Yields <tt class="literal">true</tt> if the comparison character of the
left operand appears later in the Latin 1 or Shift-JIS character
order than the comparison character of the right operand. If the two
operands are completely identical, <tt class="literal">&gt;</tt> returns
<tt class="literal">false</tt>:</p>


<blockquote><pre class="code">"b" &gt; "a"      // true
"a" &gt; "b"      // false
"ab" &gt; "ac"    // false (the second character is the comparison character)
"abc" &gt; "abc"  // false (the strings are identical)
"ab" &gt; "a"     // true (b is the comparison character)
"A" &gt; "a"      // false ("A" comes before "a" in the character order)</pre></blockquote>
</dd>

</dl>

<dl>
<dt><b>Greater than or equal to (&gt;=)</b></dt>
<dd><p>Yields <tt class="literal">true</tt> if the comparison character of the
left operand appears later in the character order than the comparison
character of the right operand or if the two operands are completely
identical:</p>


<blockquote><pre class="code">"b" &gt;= "a"  // true
"b" &gt;= "b"  // true
"b" &gt;= "c"  // false
"A" &gt;= "a"  // false ("A" and "a" occupy different code points)</pre></blockquote></dd>

</dl>


<dl>
<dt><b>Less than (&lt;)</b></dt>
<dd><p>Yields <tt class="literal">true</tt> if the comparison character of the
left operand appears earlier in the Latin 1 or Shift-JIS character
order than the comparison character of the right operand. If the two
operands are completely identical, <tt class="literal">&lt;</tt> returns
<tt class="literal">false</tt>:</p>


<blockquote><pre class="code">"a" &lt; "b"      // true
"b" &lt; "a"      // false
"az" &lt; "aa"    // false (the second character is the comparison character)</pre></blockquote></dd>

</dl>


<dl>
<dt><b>Less than or equal to (&lt;=)</b></dt>
<dd><p>Yields <tt class="literal">true</tt> if the comparison character of the
left operand appears earlier in the character order than the
comparison character of the right operand or if the two operands are
completely identical:</p>


<blockquote><pre class="code">"a" &lt;= "b"  // true
"a" &lt;= "a"  // true
"z" &lt;= "a"  // false</pre></blockquote></dd>

</dl>


<p>To determine which of two nonalphabetic characters comes first in the
Latin 1 character order, consult <a href="appb_01.htm">Appendix B, "Latin 1 Character Repertoire and Keycodes"</a>.</p>


<p>The following example checks whether a character is a letter from the
Latin alphabet (as opposed to a number, punctuation mark, or other
symbol):</p>


<blockquote><pre class="code">var theChar = "w";

if ((theChar &gt;= "A" &amp;&amp; theChar &lt;= "Z") || (theChar &gt;= "a" &amp;&amp; theChar &lt;= "z")) {
  trace("The character is in the Latin alphabet.");
}</pre></blockquote>


<p>Notice how the logical OR operator (<tt class="literal">||</tt>) lets us
check two conditions at once. We'll study OR in <a href="ch05_01.htm">Chapter 5, "Operators"</a>.</p>



<a name="ch04-20-fm2xml" /><blockquote><h4>TIP</h4>
<p>If exporting a Flash 4 <em class="filename">.swf</em>, you must use the
older <tt class="literal">gt</tt>, <tt class="literal">ge</tt>,
<tt class="literal">lt</tt>, and <tt class="literal">le</tt> string comparison
operators. Although the older operators are supported for backward
compatibility, the <tt class="literal">&gt;</tt>, <tt class="literal">&gt;=</tt>,
<tt class="literal">&lt;</tt>, and <tt class="literal">&lt;=</tt> operators are
the preferred equivalents in <a name="INDEX-516" />Flash 5.</p>

</blockquote>
</div>
</div>




<a name="ch04-21-fm2xml" /><div class="sect2">
<h3 class="sect2">4.6.3. Using Built-in String Functions</h3>


<p>With the exception of the <em class="filename">concat( )</em> function,
every tool we've used so far with strings has been an operator.
Now we'll see how to use built-in functions and properties to
perform more advanced string manipulation.</p>


<p>To execute a built-in function on a string, we must perform a
<em class="emphasis">function call</em>,<a name="INDEX-517" /> which takes the form:</p>


<blockquote><pre class="code"><em class="replaceable">string</em>.<em class="replaceable">functionName</em>(<em class="replaceable">arguments</em>)</pre></blockquote>


<p>For example, here we execute the <em class="filename">charAt( )</em>
function on <tt class="literal">myString</tt>:</p>


<blockquote><pre class="code">myString.charAt(2)</pre></blockquote>


<p>String functions return data that relates in some way to the original
string. We assign these return values to variables or object
properties for future use, such as:</p>


<blockquote><pre class="code">thirdCharacter = myString.charAt(2);</pre></blockquote>
</div>




<a name="ch04-40579" /><div class="sect2">
<h3 class="sect2">4.6.4. Character Indexing</h3>


<p>Many <a name="INDEX-518" /> <a name="INDEX-519" />of the string functions make use of a
character's <em class="emphasis">index -- </em>its numeric
position relative to the string's first character, starting at
0, not 1. The first character is numbered 0, the second is numbered
1, the third is numbered 2, and so on. For example, in the string
"red", the <em class="emphasis">r</em> is at index 0, the
<em class="emphasis">e</em> is at index 1, and the <em class="emphasis">d</em>
is at index 2.</p>


<p>Using character indexes we identify portions of a string. We may, for
example, instruct the interpreter to "Get the characters from
index 3 to index 7," or we may ask it, "What character is
at index 5?"</p>
</div>




<a name="ch04-22-fm2xml" /><div class="sect2">
<h3 class="sect2">4.6.5. Examining Strings</h3>


<p>We <a name="INDEX-520" />can
inspect and search within strings using the built-in
<tt class="literal">length</tt> property or the <em class="filename">charAt(
)</em>, <em class="filename">indexOf( )</em>, and
<em class="filename">lastIndexOf( )</em> functions.</p>


<a name="ch04-97192" /><div class="sect3">
<h3 class="sect3">4.6.5.1. The length property</h3>


<p>The <a name="INDEX-521" />
<a name="INDEX-522" />
<a name="INDEX-523" /><tt class="literal">length</tt> property
tells us how many characters are in a string. Because it is a
property, not a function, we don't use parentheses or arguments
when referring to it. Here we see the <tt class="literal">length</tt> of
several strings:</p>


<blockquote><pre class="code">"Flash".length         // <em class="replaceable">length</em> is 5
"skip intro".length    // <em class="replaceable">length</em> is 10 (the space is a character, and 
                       // every character counts)
"".length              // The empty string contains 0 characters

var axiom = "all that glisters will one day be obsolete";
axiom.length           // 42</pre></blockquote>


<p>Because character indexes start at
(i.e., are <em class="filename">zero-relative</em>), the index of the last
character is always equal to the <tt class="literal">length</tt> of the
string minus one.</p>


<p>A string's <tt class="literal">length</tt> property can be read but
not set. We can't make a string longer like this:</p>


<blockquote><pre class="code">axiom.length = 100;  // Nice try, but it ain't gonna work</pre></blockquote>




<a name="ch04-24-fm2xml" /><blockquote><h4>TIP</h4>
<p>If exporting a Flash 4 <em class="filename">.swf</em>, you must use the
older <em class="filename">length( )</em><a name="INDEX-524" /> function as shown next. The
<em class="filename">length( )</em> function is supported for backward
compatibility, but the <tt class="literal">length</tt> property is
preferred in Flash 5.</p>

</blockquote>

<p>Here we use the Flash 4 <em class="filename">length( )</em> function to
display the number of characters in the word "obsolete":</p>


<blockquote><pre class="code">trace (length("obsolete"));  // Displays: 8</pre></blockquote>
</div>



<a name="ch04-24853" /><div class="sect3">
<h3 class="sect3">4.6.5.2. The charAt( ) function</h3>


<p>We <a name="INDEX-525" />
<a name="INDEX-526" />
<a name="INDEX-527" />can determine the
character at any index position of a string using the
<em class="filename">charAt( )</em> function, which takes the form:</p>


<blockquote><pre class="code"><em class="replaceable">string</em>.charAt(<em class="replaceable">index</em>)</pre></blockquote>


<p>where <em class="replaceable">string</em> may be any literal string
value or an identifier that contains a string; an
<em class="replaceable">index</em> is an integer or an expression that
resolves to an integer that indicates the position of the character
we want to retrieve. The value of <em class="replaceable">index</em>
should be between
and <em class="replaceable">string.length</em>
<em class="replaceable">-</em> <em class="replaceable">1</em>. If
<em class="replaceable">index</em> does not fall in that range, the
empty string is returned. Here are some examples:</p>


<blockquote><pre class="code">"It is 10:34 pm".charAt(1)  // Returns "t", the second character
var country = "Canada";  
country.charAt(2);          // Returns "n", the third character
var x = 4;  
fifthLetter = country.charAt(x);                  // <em class="replaceable">fifthLetter</em> is "d"
lastLetter = country.charAt(country.length - 1);  // <em class="replaceable">lastLetter</em> is "a"</pre></blockquote>
</div>



<a name="ch04-13445" /><div class="sect3">
<h3 class="sect3">4.6.5.3. The indexOf( ) function</h3>


<p>We <a name="INDEX-528" />
<a name="INDEX-529" />
<a name="INDEX-530" />
<a name="INDEX-531" />
<a name="INDEX-532" />use the <em class="filename">indexOf( )</em>
function to search for characters in a string. If the string
we're searching contains our search sequence,
<em class="filename">indexOf( )</em> returns the index (i.e., position) of
the sequence's first occurrence in the string. Otherwise, it
returns the value -1. The general form of <em class="filename">indexOf(
)</em> is:</p>


<blockquote><pre class="code"><em class="replaceable">string</em>.indexOf(<em class="replaceable">character_sequence</em>, <em class="replaceable">start_index</em>)</pre></blockquote>


<p>where <em class="replaceable">string</em> is any literal string value
or an identifier that contains a string;
<em class="replaceable">character_sequence</em> is the string for which
we're searching, which may be a string literal or an identifier
that contains a string; and <em class="replaceable">start_index</em> is
the starting position of the search. If
<em class="replaceable">start_index</em> is omitted, the search starts
at the beginning of <em class="replaceable">string</em>.</p>


<p>Let's use <em class="filename">indexOf( )</em> to check whether a
string contains the character <em class="emphasis">W</em>:</p>


<blockquote><pre class="code">"GWEN!".indexOf("W");  // Returns 1</pre></blockquote>


<p>Yup, <em class="emphasis">W</em> is the second character in
"GWEN!", so we get 1, the index of the
<em class="emphasis">W</em> character. Remember, character indexes start
at 0, so the second character occupies index 1.</p>


<p>What happens if we search for the lowercase character <em class="emphasis">w
</em>? Let's see:</p>


<blockquote><pre class="code">"GWEN!".indexOf("w");  // Returns -1</pre></blockquote>


<p>There is no <em class="emphasis">w</em> in "GWEN!" so
<em class="filename">indexOf( )</em> returns -1. The upper- and lowercase
versions of a letter are different characters and <em class="emphasis">indexOf(
)</em> is case sensitive!</p>


<p>Now let's make sure that there's an @ sign in an email
address:</p>


<blockquote><pre class="code">var email = "daniella2dancethenightaway.ca";  // Oops, someone forgot to
                                              // press Shift!

// If there's no @ sign, warn the user via the <em class="replaceable">formStatus</em> text field
if (email.indexOf("@") == -1) {
  formStatus = "The email address is not valid.";
}</pre></blockquote>


<p>We don't always have to search for single characters. We can
search for an entire character sequence in a string too. Let's
look for "Canada" in the address of a company:</p>


<blockquote><pre class="code">var iceAddress = "St. Clair Avenue, Toronto, Ontario, Canada";
iceAddress.indexOf("Canada");  // Returns 36, the index of the letter "C"</pre></blockquote>


<p>Notice that <em class="filename">indexOf( )</em> returns the position of
the first character in "Canada". Now let's compare
the return value of <em class="emphasis">iceAddress.indexOf("Canada")</em>
to -1, and assign the result to a variable that stores the
nationality of the company:</p>


<blockquote><pre class="code">var isCanadian = iceAddress.indexOf("Canada") != -1;</pre></blockquote>


<p>The value of <em class="emphasis">iceAddress.indexOf("Canada") != -1</em>
will be <tt class="literal">true</tt> if
<em class="emphasis">iceAddress.indexOf("Canada")</em> does
<em class="emphasis">not</em> equal -1 ("Canada" is found) and
<tt class="literal">false</tt> if
<em class="emphasis">iceAddress.indexOf("Canada")</em>
<em class="emphasis">does</em> equal -1 ("Canada" is not
found). We then assign that Boolean value to the variable
<tt class="literal">isCanadian</tt>, which we can use to create a
country-specific mailing form for North America:</p>


<blockquote><pre class="code">if (isCanadian) {
  mailDesc = "Please enter your postal code.";
} else {
  mailDesc = "Please enter your zip code.";
}</pre></blockquote>


<p>The <em class="emphasis">indexOf( )</em> function can also help us
determine which part of a string we need to extract. We'll see
how that works when we learn about the <em class="filename">substring(
)</em> function.</p>
</div>



<a name="ch04-46350" /><div class="sect3">
<h3 class="sect3">4.6.5.4. The lastIndexOf( ) Function</h3>


<p>The <a name="INDEX-533" />
<a name="INDEX-534" />
<a name="INDEX-535" />
<a name="INDEX-536" /><em class="filename">indexOf( )</em> function
returns the location of a character sequence's
<em class="emphasis">first</em> occurrence in a string. The
<em class="filename">lastIndexOf( )</em> function returns the location of
a character sequence's <em class="emphasis">last</em> occurrence in
a string, or -1 if the sequence isn't found. The general form
of <em class="filename">lastIndexOf( )</em> is just like that of
<em class="filename">indexOf( ) </em>:</p>


<blockquote><pre class="code"><em class="replaceable">string</em>.lastIndexOf(<em class="replaceable">character_sequence</em>, <em class="replaceable">start_index</em>)</pre></blockquote>


<p>The only difference being that since <em class="filename">lastIndexOf(
)</em> searches a string backward,
<em class="replaceable">start_index</em> refers to the rightmost
character we want included in our search (not the leftmost). If
<em class="replaceable">start_index</em> is omitted, it defaults to
<tt class="literal">string.length</tt> <tt class="literal">-</tt>
<tt class="literal">1</tt> (the last character in the string).</p>


<p>For example:</p>


<blockquote><pre class="code">paradox = "pain is pleasure, pleasure is pain";
paradox.lastIndexOf("pain");     // Returns 30; indexOf() would return 0</pre></blockquote>


<p>The following returns
(the index of the first occurrence of the word "pain"),
because we started the backward search before the second occurrence
<a name="INDEX-537" />
<a name="INDEX-538" />of
"pain":</p>


<blockquote><pre class="code">paradox.lastIndexOf("pain",29);  // Returns 0</pre></blockquote>
</div>



<a name="ch04-25-fm2xml" /><div class="sect3">
<h3 class="sect3">4.6.5.5. No regular expressions</h3>


<p>Note that <a name="INDEX-539" />
<a name="INDEX-540" />regular expressions (a powerful
tool used to recognize patterns in textual data) are not supported in
<a name="INDEX-541" />ActionScript.</p>
</div>
</div>




<a name="ch04-26-fm2xml" /><div class="sect2">
<h3 class="sect2">4.6.6. Retrieving Portions of Strings</h3>


<p>Sometimes a long string contains a sequence of characters that
we'd like to access more conveniently. In the string
"Steven Sid Mumby", for example, we may want to extract
the last name, "Mumby". To extract a shorter string (or
<em class="emphasis">substring</em>) we use one of these functions:
<em class="filename">substring( )</em>, <em class="filename">substr( )</em>,
<em class="filename">splice( )</em>, or <em class="filename">split( )</em>.</p>


<a name="ch04-27-fm2xml" /><div class="sect3">
<h3 class="sect3">4.6.6.1. The substring( ) function</h3>


<p>We <a name="INDEX-542" />
<a name="INDEX-543" />use
<a name="INDEX-544" />
<a name="INDEX-545" /><em class="filename">substring( )</em> to
retrieve a sequence of characters from a string based on starting and
ending character indexes. The <em class="filename">substring( )</em>
function takes the following form:</p>


<blockquote><pre class="code"><em class="replaceable">string</em>.substring(<em class="replaceable">start_index</em>, <em class="replaceable">end_index</em>)</pre></blockquote>


<p>where <em class="replaceable">string</em> is any literal string value
or an identifier that contains a string,
<em class="replaceable">start_index</em> is the index of the first
character to include in the substring, and
<em class="replaceable">end_index</em> is the character
<em class="emphasis">after</em> the last character we want in our
substring. If not provided, <em class="replaceable">end_index</em>
defaults to
<em class="replaceable">string</em><tt class="literal">.length</tt>. Hence:</p>


<blockquote><pre class="code">var fullName = "Steven Sid Mumby";
middleName = fullName.substring(7, 10);  // Assigns "Sid" to <em class="replaceable">middleName</em>
firstName = fullName.substring(0, 6);    // Assigns "Steven" to <em class="replaceable">firstName</em>
lastName = fullName.substring(11);       // Assigns "Mumby" to <em class="replaceable">lastName</em></pre></blockquote>


<p>In reality, we wouldn't know where the first name, middle name,
and last name begin and end, so we'd typically look for some
<em class="emphasis">delimiter</em>, such as the space character to help
us guess where the word breaks are. Here we search for the last space
in the name and assume that the remainder of the string following it
is the user's last name:</p>


<blockquote><pre class="code">fullName = "Steven Sid Mumby";
lastSpace = fullName.lastIndexOf(" "); // Returns 10

// Characters from 11 to the end of the string are presumably the last name
lastName = fullName.substring(lastSpace+1);
trace ("Hello Mr. " + lastName);</pre></blockquote>


<p>If <em class="replaceable">start_index</em> is greater than
<em class="replaceable">end_index</em>, the two arguments are swapped
automatically before the function executes. Although the following
function invocations yield the same result, you shouldn't make
a habit of using <em class="filename">substring( )</em> with the indexes
reversed because it makes your code harder to understand:</p>


<blockquote><pre class="code">fullName.substring(4, 6);  // Returns "en"
fullName.substring(6, 4);  // Returns "en"</pre></blockquote>
</div>



<a name="ch04-24127" /><div class="sect3">
<h3 class="sect3">4.6.6.2. The substr( ) function</h3>


<p>The <a name="INDEX-546" />
<a name="INDEX-547" />
<a name="INDEX-548" />
<a name="INDEX-549" /><em class="filename">substr( )</em> function
extracts a sequence of characters from a string using a starting
index and a length (in contrast to <em class="filename">substring( ),</em>
which uses starting and ending indexes). The general form of
<em class="filename">substr( )</em> is:</p>


<blockquote><pre class="code"><em class="replaceable">string</em>.substr(<em class="replaceable">start_index</em>, <em class="replaceable">length</em>)</pre></blockquote>


<p>where <em class="replaceable">string</em> is, as usual, any literal
string value or an identifier that contains a string;
<em class="replaceable">start_index</em> is the first character to
include in the substring; <em class="replaceable">length</em> specifies
how many characters should be included in our string, starting at
<em class="replaceable">start_index</em> and counting to the right. If
<em class="replaceable">length</em> is omitted, the substring starts at
<em class="replaceable">start_index</em> and ends with the last
character in the original string. Some examples:</p>


<blockquote><pre class="code">var fullName = "Steven Sid Mumby";
middleName = fullName.substr(7, 3);    // Assigns "Sid" to <em class="replaceable">middleName</em>
firstName = fullName.substr(0, 6);     // Assigns "Steven" to <em class="replaceable">firstName</em>
lastName = fullName.substr(11);        // Assigns "Mumby" to <em class="replaceable">lastName</em></pre></blockquote>


<p>The <em class="replaceable">start_index</em> can be specified relative
to the <em class="emphasis">end</em> of a string by using a negative
number. The last character is -1, the second last character is -2,
and so on. So the preceding three <em class="filename">substr( )</em>
examples could be written as:</p>


<blockquote><pre class="code">middleName = fullName.substr(-9, 3);  // Assigns "Sid" to <em class="replaceable">middleName</em>
firstName = fullName.substr(-16, 6);  // Assigns "Steven" to <em class="replaceable">firstName</em>
lastName = fullName.substr(-5);       // Assigns "Mumby" to <em class="replaceable">lastName</em></pre></blockquote>


<p>A negative <em class="replaceable">length</em>, however, is not allowed.</p>




<a name="ch04-29-fm2xml" /><blockquote><h4>TIP</h4>
<p>In Flash 5, the <em class="filename">substr( )</em> function is the
string-extraction function that most closely resembles Flash
4's <em class="filename">substring( )</em> function, which also used
a start index and a length to retrieve a substring.</p>

</blockquote>
</div>



<a name="ch04-63264" /><div class="sect3">
<h3 class="sect3">4.6.6.3. The slice( ) function</h3>


<p>Like <a name="INDEX-550" />
<a name="INDEX-551" />
<a name="INDEX-552" />
<a name="INDEX-553" /><em class="filename">substring( )</em>,
<em class="filename">slice( )</em> retrieves a sequence of characters from
a string based on starting and ending character indexes. While
<em class="filename">substring( )</em> can specify only the indexes
relative to the <em class="emphasis">beginning</em> of the original
string, <em class="filename">slice( )</em> can specify them relative to
the string's beginning or end.</p>


<p>The <em class="filename">slice( )</em> function takes the following form:</p>


<blockquote><pre class="code"><em class="replaceable">string</em>.slice(<em class="replaceable">start_index</em>, <em class="replaceable">end_index</em>)</pre></blockquote>


<p>where <em class="replaceable">string</em> is any literal string value
or an identifier that contains a string and
<em class="replaceable">start_index</em> is the first character to
include in the substring. If <em class="replaceable">start_index</em>
is a positive integer, it is a normal character index; if
<em class="replaceable">start_index</em> is a negative integer, the
equivalent character index is determined by counting back from the
end of the string (that is,
<em class="replaceable">string</em><tt class="literal">.length</tt>
<tt class="literal">+</tt> <em class="replaceable">start_index</em>).
Finally, <em class="replaceable">end_index</em> is the character
<em class="emphasis">after</em> the last character we want in our
substring. If <em class="replaceable">end_index</em> is not provided,
it defaults to
<em class="replaceable">string</em><tt class="literal">.length</tt>. If
<em class="replaceable">end_index</em> is negative, the equivalent
character index is determined by counting back from the end of the
string (that is,
<em class="replaceable">string</em><tt class="literal">.length</tt>
<tt class="literal">+</tt> <em class="replaceable">end_index</em>).</p>


<p>Using nonnegative indexes with <em class="filename">slice( )</em> works
just like <em class="filename">substring( )</em>. When using negative
indexes, remember that you are not getting a substring with reversed
characters, and you are not getting a string from
<em class="replaceable">end_index</em> to
<em class="replaceable">start_index</em> in that order. You are merely
specifying the indexes relative to the end of the original string.
Remember also that the last character of the string is -1, and the
<em class="replaceable">end_index</em> argument specifies the character
<em class="emphasis">after</em> the last character in your substring, so
it's impossible to refer to the last character in the original
string using a negative <em class="replaceable">end_index</em>. Take a
careful look at how we use negative indexes to extract the following
substrings:</p>


<blockquote><pre class="code">var fullName = "Steven Sid Mumby";
middleName = fullName.slice(-9, -6);   // Assigns "Sid" to <em class="replaceable">middleName</em>
firstName = fullName.slice(-16, -10);  // Assigns "Steven" to <em class="replaceable">firstName</em>
lastName = fullName.slice(-5, -1);     // Assigns "Mumb" to <em class="replaceable">lastName</em>: not what
                                       // we want, but the best we can do with
                                       // a negative <em class="replaceable">end_index</em>.
lastName = fullName.slice(-5, 16)      // Assigns "Mumby" to <em class="replaceable">lastName</em>. Notice 
                                       // how we combine negative and 
                                       // positive indexes.</pre></blockquote>
</div>



<a name="ch04-78586" /><div class="sect3">
<h3 class="sect3">4.6.6.4. The split( ) function</h3>


<p>So <a name="INDEX-554" />
<a name="INDEX-555" />
<a name="INDEX-556" />
<a name="INDEX-557" />far, the string-extraction functions
we've seen have retrieved only one character sequence at a
time. If we want to rip out a bunch of substrings in one fell swoop,
we can use the powerful <em class="filename">split( )</em> function. (As
the <em class="filename">split( )</em> function uses arrays, you may want
to skip this function for now and come back after you've read
<a href="ch11_01.htm">Chapter 11, "Arrays"</a>.)</p>


<p>The <em class="filename">split( )</em> function breaks a string up into a
series of substrings and puts those substrings into an array, which
it returns. The <em class="filename">split( )</em> function takes the
following form:</p>


<blockquote><pre class="code"><em class="replaceable">string</em>.split(<em class="replaceable">delimiter</em>)</pre></blockquote>


<p>where <em class="replaceable">string</em> is any literal string value
or an identifier that contains a string, and
<em class="replaceable">delimiter</em> is the character or characters
that indicate where <em class="replaceable">string</em> should be
split. Typical delimiters are commas, spaces, and tabs. To break up a
string at each comma, for example, we use:</p>


<blockquote><pre class="code">theString.split(",")</pre></blockquote>


<p>One of the neat tricks we can pull with <em class="filename">split( )</em>
is to break a sentence up into individual words. In our coverage of
the <em class="filename">substring( )</em>, <em class="filename">substr(
)</em>, and <em class="filename">slice( )</em> functions, we had to
manually grab each name from the string "Steven Sid
Mumby." Look how much easier things are when we use
<em class="filename">split( )</em> with a space (" ") as the
<em class="replaceable">delimiter </em>:</p>


<blockquote><pre class="code">var fullName = "Steven Sid Mumby";
var names = fullName.split(" ");  // Man that's easy!

// Now assign the names in our array to individual variables
firstName  = names[0];
middleName = names[1];
lastName   = names[2];</pre></blockquote>
</div>



<a name="ch04-30-fm2xml" /><div class="sect3">
<h3 class="sect3">4.6.6.5. String extraction performance issues</h3>


<p>Flash 5's <a name="INDEX-558" />
<a name="INDEX-559" />
<a name="INDEX-560" /><em class="filename">substr( )</em> and
<em class="filename">slice( )</em> functions are actually implemented as
veneer atop the old Flash 4 <em class="filename">substring( )</em>
function, and therefore take marginally longer to execute. The speed
difference is on the order of milliseconds but can be noticeable in
intensive string processing. When carrying out highly repetitive
operations, use <em class="filename">substring( )</em> for optimal
performance, as follows:</p>


<blockquote><pre class="code">fullName = "Steven Sid Mumby";
// Assign "Sid" to <em class="replaceable">middleName</em> using Flash 5 substr( ) function
middleName = fullName.substr(7, 3);  

// Assign "Sid" to <em class="replaceable">middleName</em> using Flash 4 substring( ) function.
// Note that character indexes start at 1 with Flash 4's substring( ).
middleName = substring(fullname, 8, 3);</pre></blockquote>
</div>
</div>




<a name="ch04-41849" /><div class="sect2">
<h3 class="sect2">4.6.7. Combining String Examination with Substring Extraction</h3>


<p>We've
<a name="INDEX-561" />
<a name="INDEX-562" />seen how to search for
characters in a string and how to extract characters from a string.
These two tasks are most powerful when we put them together.</p>


<p>Most of the examples we've seen so far use literal expressions
as arguments, like this:</p>


<blockquote><pre class="code">var msg = "Welcome to my website!";
var firstWord = msg.substring(0, 7);  // 0 and 7 are numeric literals</pre></blockquote>


<p>That's a
<a name="INDEX-563" /> <a name="INDEX-564" />
<a name="INDEX-565" />
<a name="INDEX-566" />decent demonstration of the way
<em class="filename">substring( )</em> works, but it doesn't
represent the typical real-world use of <em class="filename">substring(
)</em>. More often, we don't know the content of the
string in advance and we must generate our arguments dynamically. For
example, instead of saying something static like, "Get me the
substring from index
to index 7," we usually say something dynamic like, "Get
me the substring starting from the first character and ending at the
first occurrence of a space in this string." This more flexible
approach doesn't require us to know the content of a string in
advance. Here we extract the first word of the variable
<tt class="literal">msg</tt>, by combining <em class="filename">substring(
)</em> with <em class="filename">indexOf( ) </em>:</p>


<blockquote><pre class="code">var firstWord = msg.substring(0, msg.indexOf(" "));</pre></blockquote>


<p>The expression <em class="emphasis">msg.indexOf(" ")</em> evaluates to the
numeric index of the first space in <tt class="literal">msg</tt>. Our
technique will work regardless of the space's location. This
allows us to work with strings that change while our program is
running and saves us a lot of character counting, which is prone to
error.</p>


<p>The combinations of string examination and string extraction are
practically endless. In <a href="ch04_06.htm">Example 4-2</a> we extract the
second word of the <tt class="literal">msg</tt> variable without
hard-coding the character indexes. In natural language we want to
"Extract a substring from <tt class="literal">msg</tt> starting with
the character after the first occurrence of a space and ending with
the character before the second occurrence of a space." We
store the location of the first and second spaces as variables,
making what's going on more obvious.</p>


<a name="ch04-15309" /><div class="example">
<h4 class="objtitle">Example 4-2.  Retrieving the Second Word of a String </h4>

<blockquote><pre class="code">var msg = "Welcome to my website!";
firstSpace = msg.indexOf(" ");                   // Find the first space
secondSpace = msg.indexOf(" ", firstSpace + 1);  // Find the next space

// Now extract the second word
var secondWord = msg.substring(firstSpace + 1, secondSpace);</pre></blockquote>
</div>
</div>




<a name="ch04-31-fm2xml" /><div class="sect2">
<h3 class="sect2">4.6.8. Character Case Conversion</h3>


<p>We can
<a name="INDEX-567" />convert a
<a name="INDEX-568" />string to upper- or lowercase using
the built-in <em class="filename">toUpperCase( )</em> and
<em class="filename">toLowerCase( )</em> functions. These are typically
used to display a string with nice formatting or to compare strings
with different cases.</p>


<a name="ch04-55592" /><div class="sect3">
<h3 class="sect3">4.6.8.1. The toUpperCase( ) function</h3>


<p>The <em class="filename">toUpperCase(
)</em><a name="INDEX-569" />
<a name="INDEX-570" />
<a name="INDEX-571" /> <a name="INDEX-572" /> function converts
all of the characters in a string to uppercase (i.e., capital
letters) and returns the converted version. If no uppercase version
of a given character exists, the character is returned unchanged. The
general form of <em class="filename">toUpperCase( )</em> is:</p>


<blockquote><pre class="code"><em class="replaceable">string</em>.toUpperCase( )</pre></blockquote>


<p>where <em class="replaceable">string</em> is any literal string value
or an identifier that contains a string. Some examples:</p>


<blockquote><pre class="code">"listen to me".toUpperCase( );       // Yields the string "LISTEN TO ME"
var msg1 = "Your Final Score: 234";
var msg2 = msg1.toUpperCase( );      // Set <em class="replaceable">msg2</em> to "YOUR FINAL SCORE: 234"</pre></blockquote>


<p>Note that <em class="filename">toUpperCase( )</em> does not affect the
string it's called on; it merely returns an uppercase copy of
that string. The following example shows the difference:</p>


<blockquote><pre class="code">var msg = "Forgive me, I forgot to bring my spectacles.";
msg.toUpperCase( );
trace(msg);    // Displays: "Forgive me, I forgot to bring my spectacles."
               // <em class="replaceable">msg</em> was unaffected by the <em class="replaceable">toUpperCase( )</em> invocation</pre></blockquote>
</div>



<a name="ch04-82515" /><div class="sect3">
<h3 class="sect3">4.6.8.2. The toLowerCase( ) function</h3>


<p>The<em class="filename">
</em><a name="INDEX-573" />
<a name="INDEX-574" />
<a name="INDEX-575" /> <a name="INDEX-576" /><em class="filename">toLowerCase( )</em>
function changes the characters in a string from upper- to lowercase.
For example:</p>


<blockquote><pre class="code">// Set <em class="replaceable">normal</em> to "this sentence has mixed caps!"
normal = "ThiS SenTencE Has MixED CaPs!".toLowerCase( );</pre></blockquote>


<p>To compare two strings in a case-insensitive manner, convert them
both to the same case, such as:</p>


<blockquote><pre class="code">if (userEntry.toLowerCase() == password.toLowerCase( )) {
  // They get secret access
}</pre></blockquote>


<p><a href="ch04_06.htm">Example 4-3</a><em class="emphasis"> </em>shows how we can
have a little fun using the case-conversion and string functions to
animate text in a text field. To use it, you'll need a
three-frame movie with a text field called
<tt class="literal">msgOutput</tt> on its own layer and the code from <a href="ch04_06.htm">Example 4-3</a> on a <em class="emphasis">scripts</em> layer.</p>


<a name="ch04-40165" /><div class="example">
<h4 class="objtitle">Example 4-3.  Character Case Animation </h4>

<blockquote><pre class="code"><tt class="userinput"><b>// CODE ON FRAME 1</b></tt>
var i = 0;
var msg = "my what fat cheeks you have";

function caseAni ( ) {
  var part1 = msg.slice(0, i);
  var part2 = msg.charAt(i);
  var part2 = part2.toUpperCase( );
  var part3 = msg.slice(i+1, msg.length);
  msg = part1 + part2 + part3;
  msgOutput = msg;
  msg = msg.toLowerCase( );
  i++;

  if (i &gt; (msg.length - 1)) {
    i=0;
  }
}

<tt class="userinput"><b>// CODE ON FRAME 2</b></tt>
caseAni( );

<tt class="userinput"><b>// CODE ON FRAME 3</b></tt>
gotoAndPlay(2);</pre></blockquote>
</div>
</div>
</div>




<a name="ch04-58890" /><div class="sect2">
<h3 class="sect2">4.6.9. Character Code Functions</h3>


<p>In <a href="ch04_05.htm">Section 4.5.2.3, "Unicode-style escape sequences"</a>, we
learned how to insert characters into a string as escape sequences.
ActionScript also includes two built-in functions for working with
character codes in strings: <em class="filename">fromCharCode( )</em> and
<em class="filename">charCodeAt( )</em>.</p>


<a name="ch04-32-fm2xml" /><div class="sect3">
<h3 class="sect3">4.6.9.1. The fromCharCode( ) function</h3>


<p>We can create any <a name="INDEX-577" />character or series of characters by
invoking the
<a name="INDEX-578" />
<a name="INDEX-579" /> <a name="INDEX-580" /> <a name="INDEX-581" />
<a name="INDEX-582" /><em class="filename">fromCharCode( )</em>
function. Unlike the other string functions, <em class="filename">fromCharCode(
)</em> is not called on a string literal or an identifier that
contains a string, but as a method of the special
<em class="emphasis">String</em> object, like this:</p>


<blockquote><pre class="code">String.fromCharCode(<em class="replaceable">code_ point1</em>, <em class="replaceable">code_ point2</em>, ...)</pre></blockquote>


<p>Every <em class="filename">fromCharCode( )</em> call starts with
<tt class="literal">String.fromCharCode</tt>. Then one or more code points
(representing the characters we want to create) are supplied as
arguments. Unlike Unicode-style escape sequences, the code points in
a <em class="filename">fromCharCode( )</em> call are expressed as decimal
integers, not hexadecimal. If you're unfamiliar with hex
numbers you may, therefore, find <em class="filename">fromCharCode( )</em>
easier to use than Unicode-style escape sequences. Here are some
examples:</p>


<blockquote><pre class="code">// Set <em class="replaceable">lastName</em> to "moock"
lastName = String.fromCharCode(109, 111, 111, 99, 107);

// For comparison, let's do the same thing with Unicode-style escape sequences
lastName = "\u006D\u006F\u006F\u0063\u006B"  ;   

// Make a copyright symbol
copyNotice = String.fromCharCode(169) + " 2001";</pre></blockquote>



<a name="ch04-34-fm2xml" /><blockquote><h4>TIP</h4>
<p>If exporting a Flash 4 <em class="filename">.swf</em>, you must use the
older Flash 4 character-creation functions, <em class="filename">chr(
)</em> and <em class="filename">mbchr( )</em>. Although these
functions are supported for backward compatibility,
<em class="filename">fromCharCode( )</em> is preferred in Flash 5.</p>

</blockquote>
</div>



<a name="ch04-54282" /><div class="sect3">
<h3 class="sect3">4.6.9.2. The charCodeAt( ) function</h3>


<p>To
<a name="INDEX-583" />
<a name="INDEX-584" />
<a name="INDEX-585" />determine
the code point of any character in a string, we use the
<a name="INDEX-586" />
<a name="INDEX-587" /><em class="filename">charCodeAt( )</em>
function, which takes the following form:</p>


<blockquote><pre class="code"><em class="replaceable">string</em>.charCodeAt(<em class="replaceable">index</em>)</pre></blockquote>


<p>where <em class="replaceable">string</em> is any literal string value
or an identifier that contains a string, and
<em class="replaceable">index</em> is the position of the character
we're examining. The <em class="filename">charCodeAt( )</em>
function returns a decimal integer that matches the Unicode code
point of the character at <em class="replaceable">index</em>. For
example:</p>


<blockquote><pre class="code">var msg = "A is the first letter of the Latin alphabet.";
trace(msg.charCodeAt(0));  // Displays: 65 (the code point for "A")
trace(msg.charCodeAt(1));  // Displays: 32 (the code point for space)</pre></blockquote>


<p>We normally use <em class="filename">charCodeAt( )</em> to perform string
handling with characters we can't type directly using a
keyboard. For example, in the following code we check whether a
character is the <a name="INDEX-588" />copyright symbol:</p>


<blockquote><pre class="code">msg = String.fromCharCode(169) + " 2000";
if (msg.charCodeAt(0) == 169) {
  trace("The first character of msg is a copyright symbol.");
}</pre></blockquote>




<a name="ch04-36-fm2xml" /><blockquote><h4>TIP</h4>
<p>If exporting a Flash 4 <em class="filename">.swf</em>, you must use the
older Flash 4 code point functions, <em class="filename">ord( )</em> and
<em class="filename">mbord( )</em>. Although they are supported for
backward compatibility, <em class="filename">charCodeAt( )</em> is
preferred in Flash 5.</p>

</blockquote>
</div>
</div>




<a name="ch04-52180" /><div class="sect2">
<h3 class="sect2">4.6.10. Executing Code in a String with eval</h3>


<p>In <a name="INDEX-589" /> <a name="INDEX-590" /> <a name="INDEX-591" />ActionScript, <a name="INDEX-592" />the <em class="filename">eval( )</em>
<a name="INDEX-593" />function converts a string
to an identifier. But to thoroughly understand the ActionScript
<em class="filename">eval( )</em> function, we must learn how
JavaScript's analogous <em class="filename">eval( )</em> function
works. In JavaScript, <em class="filename">eval( )</em> is a top-level,
built-in function that converts any string to a block of code and
then executes that block of code. The syntax for JavaScript's
<em class="filename">eval( )</em> is:</p>


<blockquote><pre class="code">eval(<em class="replaceable">string</em>)</pre></blockquote>


<p>When <em class="filename">eval( )</em> is executed in JavaScript, the
interpreter converts <em class="replaceable">string</em> to code, runs
that code, and returns the resulting value (if a value is generated).
Consider the following JavaScript examples:</p>


<blockquote><pre class="code">eval("parseInt('1.5')");  // Calls the <em class="replaceable">parseInt( )</em> function, which returns 1
eval("var x = 5");        // Creates a new variable named <em class="replaceable">x</em> and 
                          // sets its value to 5</pre></blockquote>


<p>If you've never seen <em class="filename">eval( )</em> before, you
may be thinking, "When would I ever have a string with code in
it? Why not just write the code out?" Because
<em class="emphasis">e</em><em class="filename">val( )</em> lets you
dynamically generate code when you need to. For example, suppose you
have ten functions named sequentially: <em class="filename">func1</em>,
<em class="filename">func2</em>, <em class="filename">func3</em>, ...,
<em class="filename">func10</em>. You could execute those functions with
10 function-call statements:</p>


<blockquote><pre class="code">func1( );
func2( );
func3( );
// etc...</pre></blockquote>


<p>But you could also execute them more conveniently using
<em class="filename">eval( )</em> in a loop, like this:</p>


<blockquote><pre class="code">for (i = 1; i &lt;= 10; i++){
  eval("func" + i + "( )");
}</pre></blockquote>


<p>ActionScript's <em class="filename">eval( )</em> function supports a
small subset of its JavaScript cousin's functionality: it works
only when its argument is an identifier. Hence, ActionScript's
<em class="filename">eval( )</em> function can only retrieve the data
associated with the specified identifier. For example:</p>


<blockquote><pre class="code">var num = 1;
var person1 = "Eugene";
trace (eval("person" + num));  // Displays: "Eugene"</pre></blockquote>


<p>Even in this pared-back form, <em class="filename">eval( )</em> is quite
useful. Here we generate a series of movie clips dynamically with a
loop. We place our clips in an array by using <em class="filename">eval( )
</em>to refer to them:</p>


<blockquote><pre class="code">for (var i = 0; i &lt; 10; i++) {
  duplicateMovieClip("ballParent", "ball" + i, i);
  balls[i] = eval("ball" + i);
}</pre></blockquote>


<p>Note, however, that <em class="filename">eval( )</em> can be quite
processor-intensive. In more demanding scenarios, we're better
off using the array-access operator to generate dynamic clip
references. For example:</p>


<blockquote><pre class="code">duplicateMovieClip("ballParent", "ball" + i , i);
balls[ballCount] = _root ["ball" + i];</pre></blockquote>


<p>In Flash 4, <em class="filename">eval( )</em> was used abundantly to
simulate arrays through dynamic variable-name generation and
referencing. This technique is not recommended or required in Flash 5
due to Flash 5's native support for arrays. See <a href="ch02_01.htm">Section 2.1.2.1, "Creating dynamically named variables"</a> in <a href="ch02_01.htm">Chapter 2, "Variables"</a>,
<a name="INDEX-594" />for
<a name="INDEX-595" />more
<a name="INDEX-596" />
<a name="INDEX-597" />
<a name="INDEX-598" />details.</p>
</div>




<a name="ch04-37-fm2xml" /><div class="sect2">
<h3 class="sect2">4.6.11. Flash 4 Versus Flash 5 String Operators and Functions</h3>


<p>Throughout <a name="INDEX-599" />the descriptions of the string
operators and functions, we looked at equivalent Flash 4 techniques.
When we're using Flash 5 to author Flash 4 movies, we should
use the Flash 4 string operators and functions in all of our work.
But when we're authoring for Flash 5, we should use the swanky
Flash 5 operators. If you're accustomed to the Flash 4 syntax,
see <a href="ch04_06.htm">Table 4-2</a> for the Flash 5 equivalents.</p>


<a name="ch04-74784" /><h4 class="objtitle">Table 4-2. Flash 4 Operators and Functions with Flash 5 Equivalencies </h4><table border="1">




<tr>
<th>
<p>Flash 4 Syntax</p></th>
<th>
<p>Flash 5 Syntax</p></th>
<th>
<p>Description</p></th>
</tr>




<tr>
<td>
<p><tt class="literal">""</tt></p></td>
<td>
<p><tt class="literal">""</tt> or <tt class="literal">''</tt></p></td>
<td>
<p>String literal</p></td>
</tr>

<tr>
<td>
<p><tt class="literal">&amp;</tt><a name="INDEX-600" />
<a name="INDEX-601" /> <a name="INDEX-602" /></p></td>
<td>
<p><tt class="literal">+</tt> (or <em class="emphasis">add</em> for backward
compatibility)</p></td>
<td>
<p>String concatenation operator</p></td>
</tr>

<tr>
<td>
<p><a name="INDEX-603" /> <a name="INDEX-604" /><tt class="literal">eq</tt></p></td>
<td>
<p><tt class="literal">==</tt></p></td>
<td>
<p>Equality operator</p></td>
</tr>

<tr>
<td>
<p><a name="INDEX-605" /> <a name="INDEX-606" />
<a name="INDEX-607" /> <a name="INDEX-608" /><tt class="literal">ge</tt></p></td>
<td>
<p><tt class="literal">&gt;=</tt></p></td>
<td>
<p>Greater-than-or-equal-to comparison</p></td>
</tr>

<tr>
<td>
<p><tt class="literal">gt</tt></p></td>
<td>
<p><tt class="literal">&gt;</tt></p></td>
<td>
<p>Greater-than comparison</p></td>
</tr>

<tr>
<td>
<p><a name="INDEX-609" /> <a name="INDEX-610" />
<a name="INDEX-611" /> <a name="INDEX-612" /><tt class="literal">le</tt></p></td>
<td>
<p><tt class="literal">&lt;=</tt></p></td>
<td>
<p>Less-than-or-equal-to comparison</p></td>
</tr>

<tr>
<td>
<p><tt class="literal">lt</tt></p></td>
<td>
<p><tt class="literal">&lt;</tt></p></td>
<td>
<p>Less-than comparison</p></td>
</tr>

<tr>
<td>
<p><a name="INDEX-613" /> <a name="INDEX-614" /> <a name="INDEX-615" />
<a name="INDEX-616" /><tt class="literal">ne</tt></p></td>
<td>
<p><tt class="literal">!=</tt></p></td>
<td>
<p>Inequality operator (not equal to)</p></td>
</tr>

<tr>
<td>
<p><em class="filename">chr( )</em><a name="INDEX-617" /> or<em class="filename"> mbchr(
)</em><a name="INDEX-618" /></p></td>
<td>
<p><em class="filename">fromCharCode( ) </em><a href="#FOOTNOTE-1">[1]</a>
</p></td>
<td>
<p>Creates a character from an encoded number</p></td>
</tr>

<tr>
<td>
<p><em class="filename">length( )</em> or <em class="filename">mblength(
)</em><a name="INDEX-619" /></p></td>
<td>
<p><tt class="literal">length</tt>*</p></td>
<td>
<p>Function in Flash 4, property in Flash 5; gives the number of
characters in a string</p></td>
</tr>

<tr>
<td>
<p><em class="filename">mbsubstring( )</em><a name="INDEX-620" /></p></td>
<td>
<p><em class="filename">substr( )</em></p></td>
<td>
<p>Extracts character sequence from a string</p></td>
</tr>

<tr>
<td>
<p><em class="filename">ord( ) </em><a name="INDEX-621" />or<em class="filename"> mbord(
)</em><a name="INDEX-622" /></p></td>
<td>
<p><em class="filename">charCodeAt( ) </em>*</p></td>
<td>
<p>Gives the code point of the specified character</p></td>
</tr>

<tr>
<td>
<p><em class="filename">substring( )</em></p></td>
<td>
<p><em class="filename">substr( ) </em>*</p></td>
<td>
<p><a name="INDEX-623" />Extracts character sequence from a
string</p></td>
</tr>


</table>

<blockquote class="footnote">
<a name="FOOTNOTE-1" /><p>[1]
<p> Because all the Flash 5 string operations and functions work with
multibyte characters, there's no way in Flash 5 to force
a<a name="INDEX-624" /> <a name="INDEX-625" /> single-byte operation as
there was in Flash 4. The <em class="filename">fromCharCode( )</em>
function is, for example, as close as things get to <em class="filename">chr(
)</em> in Flash 5. The same is true of <em class="filename">mblength(
)</em> and <tt class="literal">length</tt>, <em class="filename">mbsubstring(
)</em> and <em class="filename">substr( )</em>, and <em class="filename">mbord(
)</em> and <em class="filename">charCodeAt( )</em>.</p>
</blockquote>
</div>


<hr width="684" align="left" />
<div class="navbar"><table width="684" border="0"><tr><td align="left" valign="top" width="228"><a href="ch04_05.htm"><img alt="Previous" border="0" src="../gifs/txtpreva.gif" /></a></td><td align="center" valign="top" width="228"><a href="index.htm"><img alt="Home" border="0" src="../gifs/txthome.gif" /></a></td><td align="right" valign="top" width="228"><a href="ch04_07.htm"><img alt="Next" border="0" src="../gifs/txtnexta.gif" /></a></td></tr><tr><td align="left" valign="top" width="228">4.5. The String Type</td><td align="center" valign="top" width="228"><a href="index/index.htm"><img alt="Book Index" border="0" src="../gifs/index.gif" /></a></td><td align="right" valign="top" width="228">4.7. The Boolean Type</td></tr></table></div>
<hr width="684" align="left" />

<img alt="Library Navigation Links" border="0" src="../gifs/navbar.gif" usemap="#library-map" />
<p><font size="-1"><a href="copyrght.htm">Copyright &copy; 2002</a> O'Reilly &amp; Associates. All rights reserved.</font></p>

<map name="library-map"><area href="../index.htm" coords="0,1,78,93" shape="rect" /><area href="../wdesign/index.htm" coords="80,2,155,96" shape="rect" /><area href="../xhtml/index.htm" coords="158,0,263,97" shape="rect" /><area href="../audio/index.htm" coords="265,1,335,97" shape="rect" /><area href="../css/index.htm" coords="338,1,434,93" shape="rect" /><area href="index.htm" coords="439,0,540,102" shape="rect" /><area href="../infoarch/index.htm" coords="544,0,685,102" shape="rect" /></map>

</body></html>
