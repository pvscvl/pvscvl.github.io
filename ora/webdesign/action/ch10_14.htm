<html><head><title>Refreshing the Screen with updateAfterEvent (ActionScript: The Definitive Guide)</title><link rel="stylesheet" type="text/css" href="../style/style1.css" />

<meta name="DC.Creator" content="Colin Moock" /><meta name="DC.Format" content="text/xml" scheme="MIME" /><meta name="DC.Language" content="en-US" /><meta name="DC.Publisher" content="O'Reilly &amp; Associates, Inc." /><meta name="DC.Source" scheme="ISBN" content="1565928520L" /><meta name="DC.Subject.Keyword" content="stuff" /><meta name="DC.Title" content="ActionScript: The Definitive Guide" /><meta name="DC.Type" content="Text.Monograph" />

</head><body bgcolor="#ffffff">

<img alt="Book Home" border="0" src="gifs/smbanner.gif" usemap="#banner-map" /><map name="banner-map"><area shape="rect" coords="1,-2,616,66" href="index.htm" alt="ActionScript: The Definitive Guide" /><area shape="rect" coords="629,-11,726,25" href="jobjects/fsearch.htm" alt="Search this book" /></map>

<div class="navbar"><table width="684" border="0"><tr><td align="left" valign="top" width="228"><a href="ch10_13.htm"><img alt="Previous" border="0" src="../gifs/txtpreva.gif" /></a></td><td align="center" valign="top" width="228"><a href="index.htm">ActionScript: The Definitive Guide</a></td><td align="right" valign="top" width="228"><a href="ch10_15.htm"><img alt="Next" border="0" src="../gifs/txtnexta.gif" /></a></td></tr></table></div>
<hr width="684" align="left" />


<h2 class="sect1">10.14. Refreshing the Screen with updateAfterEvent</h2>


<p>As we <a name="INDEX-1311" />learned <a name="INDEX-1312" /> <a name="INDEX-1313" />earlier in <a href="ch10_12.htm">Section 10.12, "Order of Execution"</a>, the <a name="INDEX-1314" /><em class="filename">mouseDown</em>,
<a name="INDEX-1315" /><em class="filename">mouseUp</em>,
<a name="INDEX-1316" /><em class="filename">mouseMove</em>,
<a name="INDEX-1317" /><em class="filename">keyDown</em>, and
<a name="INDEX-1318" /><em class="filename">keyUp</em> event handlers
are executed immediately upon the occurrence of those events.
Immediately means <em class="filename">immediately -- </em>even if the
event in question occurs between the rendering of frames.</p>


<p>This immediacy can give a movie great responsiveness, but that
responsiveness can easily be lost. By default, the visual effects of
a <em class="filename">mouseDown</em>, <em class="filename">mouseUp</em>,
<em class="filename">mouseMove</em>, <em class="filename">keyDown</em>, or
<em class="filename">keyUp</em> event handler are not physically rendered
by the Flash Player until the next available frame is rendered. To
really see this in action, create a single-frame movie with a frame
rate of 1 frame per second, and place a movie clip with the following
code on stage:</p>


<blockquote><pre class="code">onClipEvent (mouseDown) {
  _x += 2;
}</pre></blockquote>


<p>Then, test the movie and click the mouse as fast as you can.
You'll see that all your clicks are registered, but the movie
clip moves only once per second. So, if you click 6 times between
frames, the clip will move 12 pixels to the right when the next frame
is rendered. If you click 3 times, the clip will move 6 pixels. Each
execution of the <em class="emphasis">mouseDown</em> handler is registered
between frames, but the results are displayed only when each frame is
rendered. This can have dramatic effects on certain forms of
interactivity.</p>


<p>Fortunately, we can force Flash to immediately render any visual
change that takes place during a user-input event handler without
waiting for the next frame to come around. We simply use the
<em class="filename">updateAfterEvent( )</em> function from inside our
event handler, like this:</p>


<blockquote><pre class="code">onClipEvent (mouseDown) {
  _x += 2;
  updateAfterEvent( );
}</pre></blockquote>


<p>The <em class="filename">updateAfterEvent( )</em> function is available
for use only with the <em class="filename">mouseDown</em>,
<em class="filename">mouseUp</em>, <em class="filename">mouseMove</em>,
<em class="filename">keyDown</em>, and <em class="filename">keyUp</em> events.
It is often essential for smooth and responsive visual behavior
associated with user input. Later, in <a href="ch10_17.htm">Example 10-8</a>,
we'll use <em class="filename">updateAfterEvent( )</em> to ensure
the smooth rendering of a custom pointer. Note, however, that button
events do not require an explicit <em class="filename">updateAfterEvent(
)</em> function call. Buttons naturally update between frames.</p>


<hr width="684" align="left" />
<div class="navbar"><table width="684" border="0"><tr><td align="left" valign="top" width="228"><a href="ch10_13.htm"><img alt="Previous" border="0" src="../gifs/txtpreva.gif" /></a></td><td align="center" valign="top" width="228"><a href="index.htm"><img alt="Home" border="0" src="../gifs/txthome.gif" /></a></td><td align="right" valign="top" width="228"><a href="ch10_15.htm"><img alt="Next" border="0" src="../gifs/txtnexta.gif" /></a></td></tr><tr><td align="left" valign="top" width="228">10.13. Copying Clip Event Handlers</td><td align="center" valign="top" width="228"><a href="index/index.htm"><img alt="Book Index" border="0" src="../gifs/index.gif" /></a></td><td align="right" valign="top" width="228">10.15. Code Reusability</td></tr></table></div>
<hr width="684" align="left" />

<img alt="Library Navigation Links" border="0" src="../gifs/navbar.gif" usemap="#library-map" />
<p><font size="-1"><a href="copyrght.htm">Copyright &copy; 2002</a> O'Reilly &amp; Associates. All rights reserved.</font></p>

<map name="library-map"><area href="../index.htm" coords="0,1,78,93" shape="rect" /><area href="../wdesign/index.htm" coords="80,2,155,96" shape="rect" /><area href="../xhtml/index.htm" coords="158,0,263,97" shape="rect" /><area href="../audio/index.htm" coords="265,1,335,97" shape="rect" /><area href="../css/index.htm" coords="338,1,434,93" shape="rect" /><area href="index.htm" coords="439,0,540,102" shape="rect" /><area href="../infoarch/index.htm" coords="544,0,685,102" shape="rect" /></map>

</body></html>