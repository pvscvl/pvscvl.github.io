<html><head><title>Button Events (ActionScript: The Definitive Guide)</title><link rel="stylesheet" type="text/css" href="../style/style1.css" />

<meta name="DC.Creator" content="Colin Moock" /><meta name="DC.Format" content="text/xml" scheme="MIME" /><meta name="DC.Language" content="en-US" /><meta name="DC.Publisher" content="O'Reilly &amp; Associates, Inc." /><meta name="DC.Source" scheme="ISBN" content="1565928520L" /><meta name="DC.Subject.Keyword" content="stuff" /><meta name="DC.Title" content="ActionScript: The Definitive Guide" /><meta name="DC.Type" content="Text.Monograph" />

</head><body bgcolor="#ffffff">

<img alt="Book Home" border="0" src="gifs/smbanner.gif" usemap="#banner-map" /><map name="banner-map"><area shape="rect" coords="1,-2,616,66" href="index.htm" alt="ActionScript: The Definitive Guide" /><area shape="rect" coords="629,-11,726,25" href="jobjects/fsearch.htm" alt="Search this book" /></map>

<div class="navbar"><table width="684" border="0"><tr><td align="left" valign="top" width="228"><a href="ch10_07.htm"><img alt="Previous" border="0" src="../gifs/txtpreva.gif" /></a></td><td align="center" valign="top" width="228"><a href="index.htm">ActionScript: The Definitive Guide</a></td><td align="right" valign="top" width="228"><a href="ch10_09.htm"><img alt="Next" border="0" src="../gifs/txtnexta.gif" /></a></td></tr></table></div>
<hr width="684" align="left" />


<h2 class="sect1">10.8. Button Events</h2>


<p><a href="ch10_08.htm">Table 10-1</a> <a name="INDEX-1167" />briefly <a name="INDEX-1168" />
<a name="INDEX-1169" />introduces
<a name="INDEX-1170" />the various events available for buttons.
Using button events, we can easily create code for navigation, forms,
games, and other interface elements. Let's explore each button
event and learn how a button can be programmed to react to mouse and
keyboard events.</p>


<p>Each of the button events in <a href="ch10_08.htm">Table 10-1</a> is handled
by a matching button event handler of the form <a name="INDEX-1171" /> <a name="INDEX-1172" /><em class="filename">on
</em>(<em class="replaceable">eventName</em>). For example, the
<em class="filename">press</em> event is handled using an event handler
beginning with <em class="filename">on (press)</em>. The exception is the
<em class="filename">keyPress</em> event handler which takes the form
<em class="filename">on</em> (<em class="filename">keyPress
</em><em class="replaceable">key</em>) where
<em class="replaceable">key</em> is the key to detect. Button events
are sent only to the button with which the mouse is interacting. If
multiple buttons overlap, the topmost button receives all events; no
other buttons can respond, even if the topmost button has no handlers
defined. In the following descriptions, the
<em class="emphasis">hit</em><a name="INDEX-1173" />
<a name="INDEX-1174" /> area refers to the physical region of the
button that must be under the mouse pointer in order for the button
to be activated. (A button's <em class="filename">hit</em> area is
defined graphically when you create the button in the Flash authoring
tool.)</p>


<a name="ch10-35286" /><h4 class="objtitle">Table 10-1. Button Events </h4><table border="1">



<tr>
<th>
<p>Button Event Name</p></th>
<th>
<p>Button Event Occurs When . . .</p></th>
</tr>




<tr>
<td>
<p><tt class="literal">press</tt></p></td>
<td>
<p>Primary mouse button is depressed while pointer is in the
button's <em class="emphasis">hit</em> area. Other mouse buttons are
not detectable.</p></td>
</tr>

<tr>
<td>
<p><tt class="literal">release</tt></p></td>
<td>
<p>Primary mouse button is depressed and then released while pointer is
in the button's <em class="emphasis">hit</em> area.</p></td>
</tr>

<tr>
<td>
<p><tt class="literal">releaseOutside</tt></p></td>
<td>
<p>Primary mouse button is depressed while pointer is in the
button's <em class="emphasis">hit</em> area and then released while
pointer is outside of the <em class="emphasis">hit</em> area.</p></td>
</tr>

<tr>
<td>
<p><tt class="literal">rollOver</tt></p></td>
<td>
<p>Mouse pointer moves into the button's <em class="emphasis">hit</em>
area without the mouse button depressed.</p></td>
</tr>

<tr>
<td>
<p><tt class="literal">rollOut</tt></p></td>
<td>
<p>Mouse pointer moves out of the button's
<em class="emphasis">hit</em> area without the mouse button depressed.</p></td>
</tr>

<tr>
<td>
<p><tt class="literal">dragOut</tt></p></td>
<td>
<p>Primary mouse button is depressed while pointer is in the
button's <em class="emphasis">hit</em> area, and then, while mouse
button is still depressed, pointer is moved out of the
<em class="emphasis">hit</em> area.</p></td>
</tr>

<tr>
<td>
<p><tt class="literal">dragOver</tt></p></td>
<td>
<p>Primary mouse button is depressed while pointer is in the
button's <em class="emphasis">hit</em> area, and then, while mouse
button is still depressed, pointer is moved out of, then back into,
the button's <em class="emphasis">hit</em> area.</p></td>
</tr>

<tr>
<td>
<p><tt class="literal">keyPress</tt></p></td>
<td>
<p>Specified <em class="replaceable">key</em> is depressed. In most cases,
the <em class="filename">keyDown</em> clip event is preferred over the
<em class="filename">keyPress</em> button event.</p></td>
</tr>


</table>


<a name="ch10-17-fm2xml" /><div class="sect2">
<h3 class="sect2">10.8.1. press</h3>


<p>A <a name="INDEX-1175" /> <a name="INDEX-1176" />mouseclick is
technically a two-step process: the mouse button is depressed (
<em class="filename">press</em>) and then released
(<em class="filename">release</em>). A <em class="filename">press</em> event
occurs when the mouse pointer is in the <em class="emphasis">hit</em> area
of a button and the primary mouse button is depressed. Secondary
mouse buttons are not detectable. Button
<em class="emphasis">p</em><em class="filename">ress</em> events are
appropriate for radio buttons or weapons firing in a game, but use
<em class="filename">release</em> events to allow the user to change his
mind before releasing the mouse.</p>
</div>




<a name="ch10-18-fm2xml" /><div class="sect2">
<h3 class="sect2">10.8.2. release</h3>


<p>The <a name="INDEX-1177" /> <a name="INDEX-1178" /><em class="emphasis">release</em>
button event occurs when the following sequence is detected:</p>


<ol><li><p>The mouse pointer is in the <em class="emphasis">hit</em> area of a button.</p></li><li><p>The primary mouse button is pressed while the mouse pointer is still
in the <em class="emphasis">hit</em> area of the button (at which point a
<em class="filename">press</em> event occurs).</p></li><li><p>The primary mouse button is released while the mouse pointer is still
in the <em class="emphasis">hit</em> area of the original button (at which
point the <em class="filename">release</em> event occurs).</p></li></ol>
<p>By using the <em class="filename">release</em> event instead of the
<em class="filename">press</em> event, you give users a chance to move the
pointer off of a button even after it has been clicked, thus allowing
them to retract their action.</p>
</div>




<a name="ch10-19-fm2xml" /><div class="sect2">
<h3 class="sect2">10.8.3. releaseOutside</h3>


<p>The <a name="INDEX-1179" /> <a name="INDEX-1180" /><em class="filename">releaseOutside</em>
event typically indicates that the user changed his mind by clicking
on a button but moving the pointer off the button before releasing
the mouse button. The event is generated when the following sequence
is detected:</p>


<ol><li><p>The mouse pointer is in the <em class="emphasis">hit</em> area of a button.</p></li><li><p>The primary mouse button is pressed and held (the
<em class="filename">press</em> event occurs).</p></li><li><p>The mouse pointer moves out of the button's
<em class="emphasis">hit</em> area (the <em class="filename">dragOut</em> event
occurs).</p></li><li><p>The primary mouse button is released while not in the
<em class="emphasis">hit</em> area of the original button.</p></li></ol>
<p>You will rarely bother detecting <em class="filename">releaseOutside</em>
events, as they usually indicate that the user intended not to
perform any action.</p>
</div>




<a name="ch10-20-fm2xml" /><div class="sect2">
<h3 class="sect2">10.8.4. rollOver</h3>


<p>The <a name="INDEX-1181" /> <a name="INDEX-1182" /><em class="filename">rollOver</em>
event occurs when the mouse pointer moves into the
<em class="emphasis">hit</em> area of a button with no mouse buttons
depressed. The <em class="filename">rollOver</em> event is rarely used in
ActionScript because visual button changes are created directly in
the authoring tool, not with scripting. You should use the provided
<em class="emphasis">up</em>,<em class="emphasis"> over</em>,<em class="emphasis">
</em>and<em class="emphasis"> down</em> frames in the authoring tool
to create highlight states for buttons.</p>


<p>The <em class="filename">rollOver</em> event in Flash 5 provides a handy
means of retrieving a text field selection. For more details, see
<a href="ch20_05.htm">Reference 20.200</a><em class="emphasis">"</em> in <a href="part3.htm">Part III, "Language Reference"</a>.</p>
</div>




<a name="ch10-21-fm2xml" /><div class="sect2">
<h3 class="sect2">10.8.5. rollOut</h3>


<p>The <a name="INDEX-1183" /> <a name="INDEX-1184" /><em class="filename">rollOut</em>
event is <em class="filename">rollOver </em>'s counterpart; it
occurs when the mouse pointer is moved out of the
<em class="emphasis">hit</em> area of a button with no mouse buttons
depressed. As with <em class="filename">rollOver</em>,
<em class="filename">rollOut</em> is rarely used because button highlight
states are created directly in the authoring tool, so manual image
swapping is not required in ActionScript.</p>
</div>




<a name="ch10-22-fm2xml" /><div class="sect2">
<h3 class="sect2">10.8.6. dragOut</h3>


<p>The <a name="INDEX-1185" /> <a name="INDEX-1186" /><em class="filename">dragOut</em>
event is similar to <em class="filename">rollOut</em>, except that it is
generated if the mouse button is down when the pointer leaves a
button's <em class="emphasis">hit</em> area. The
<em class="filename">dragOut</em> event is followed by either the
<em class="filename">releaseOutside</em> event (if the user releases the
mouse button) or the <em class="filename">dragOver</em> event (if the user
moves the pointer back into the button's
<em class="emphasis">hit</em> area without having released the mouse
button).</p>
</div>




<a name="ch10-23-fm2xml" /><div class="sect2">
<h3 class="sect2">10.8.7. dragOver</h3>


<p>The <a name="INDEX-1187" /> <a name="INDEX-1188" /><em class="filename">dragOver</em>
event is a seldom-seen woodland creature. It is conjured up when the
following sequence is performed:</p>


<ol><li><p>The mouse pointer moves into the <em class="emphasis">hit</em> area of a
button (<em class="filename">rollOver</em> event occurs).</p></li><li><p>The primary mouse button is pressed and held (
<em class="emphasis">press</em> event occurs).</p></li><li><p>The mouse pointer moves out of the button's
<em class="emphasis">hit</em> area (<em class="filename">dragOut</em> event
occurs).</p></li><li><p>The mouse pointer moves back into the button's
<em class="emphasis">hit</em> area (<em class="filename">dragOver</em> event
occurs).</p></li></ol>
<p>Thus, the <em class="filename">dragOver</em> event indicates that the user
has moved the mouse pointer out of and back into the
<em class="emphasis">hit</em> area, all the while holding the mouse button
down. Note that <em class="emphasis">dragover</em>, instead of the
<em class="filename">rollOver</em> event, is generated if the mouse button
is still down when the pointer reenters the button's
<em class="emphasis">hit</em> area.</p>
</div>




<a name="ch10-24-fm2xml" /><div class="sect2">
<h3 class="sect2">10.8.8. keyPress</h3>


<p>The <a name="INDEX-1189" /><em class="filename">keyPress</em> event is
unrelated to mouse events and is instead triggered by the pressing of
a specified key. We cover it here because it uses the <em class="filename">on
</em>(<em class="replaceable">eventName</em>) syntax of other
ActionScript button event handlers. This event handler requires us to
specify the key that triggers the event:</p>


<blockquote><pre class="code">on (keyPress <em class="replaceable">key</em>) {
  statements
}</pre></blockquote>


<p>where <em class="replaceable">key</em> is a string representing the key
associated with the event. The string may be either the character on
the key (such as "s" or "S"), or a keyword
representing the key in the format
<tt class="literal">"&lt;</tt><em class="replaceable">Keyword
</em><tt class="literal">&gt;"</tt>. Only one key may be specified
with each handler. To capture multiple keys using
<em class="filename">keyPress,</em> we must create multiple
<em class="filename">keyPress</em> event handlers. For example:</p>


<blockquote><pre class="code">// Detects the "a" key
on (keyPress "a") {
  trace("The 'a' key was pressed");
}

// Detects the Enter key
on (keyPress "&lt;Enter&gt;") {
  trace("The Enter key was pressed");
}

// Detects the Down Arrow key
on (keyPress "&lt;Down&gt;") {
  trace("The Down Arrow key was pressed");
}</pre></blockquote>


<p>The legal values of <em class="replaceable">Keyword</em> are as follows
(note that the function keys F1 . . . F12 are not supported by
<em class="filename">keyPress</em>, but are detectable using the
<em class="filename">Key</em> object):</p>


<blockquote><pre class="code"><a name="INDEX-1190" />&lt;Backspace&gt;
<a name="INDEX-1191" />&lt;Delete&gt;
<a name="INDEX-1192" />&lt;Down&gt;
<a name="INDEX-1193" />&lt;End&gt;
<a name="INDEX-1194" />&lt;Enter&gt;
<a name="INDEX-1195" />&lt;Home&gt;
<a name="INDEX-1196" />&lt;Insert&gt;
<a name="INDEX-1197" />&lt;Left&gt;
<a name="INDEX-1198" />&lt;PgDn&gt;
<a name="INDEX-1199" />&lt;PgUp&gt;
<a name="INDEX-1200" />&lt;Right&gt;
<a name="INDEX-1201" />&lt;Space&gt;
<a name="INDEX-1202" />&lt;Tab&gt;
<a name="INDEX-1203" />&lt;Up&gt;</pre></blockquote>


<p>In Flash 4, <a name="INDEX-1204" />
<a name="INDEX-1205" /><em class="filename">keyPress</em>
<a name="INDEX-1206" />was the only means we had of
interacting with the keyboard. In Flash 5 and later, the
<em class="filename">Key</em> object, in combination with the movie clip
events <em class="filename">keyDown</em> and <em class="filename">keyUp</em>
(discussed later), offer much greater control over keyboard
interaction. The <em class="filename">keyPress</em> event detects the
pressing of a single key at a time, whereas the
<em class="filename">Key</em> object can detect the simultaneous pressing
<a name="INDEX-1207" />
<a name="INDEX-1208" />of
<a name="INDEX-1209" />
<a name="INDEX-1210" />multiple <a name="INDEX-1211" />keys.</p>
</div>


<hr width="684" align="left" />
<div class="navbar"><table width="684" border="0"><tr><td align="left" valign="top" width="228"><a href="ch10_07.htm"><img alt="Previous" border="0" src="../gifs/txtpreva.gif" /></a></td><td align="center" valign="top" width="228"><a href="index.htm"><img alt="Home" border="0" src="../gifs/txthome.gif" /></a></td><td align="right" valign="top" width="228"><a href="ch10_09.htm"><img alt="Next" border="0" src="../gifs/txtnexta.gif" /></a></td></tr><tr><td align="left" valign="top" width="228">10.7. Event Handler Scope</td><td align="center" valign="top" width="228"><a href="index/index.htm"><img alt="Book Index" border="0" src="../gifs/index.gif" /></a></td><td align="right" valign="top" width="228">10.9. Movie Clip Events Overview</td></tr></table></div>
<hr width="684" align="left" />

<img alt="Library Navigation Links" border="0" src="../gifs/navbar.gif" usemap="#library-map" />
<p><font size="-1"><a href="copyrght.htm">Copyright &copy; 2002</a> O'Reilly &amp; Associates. All rights reserved.</font></p>

<map name="library-map"><area href="../index.htm" coords="0,1,78,93" shape="rect" /><area href="../wdesign/index.htm" coords="80,2,155,96" shape="rect" /><area href="../xhtml/index.htm" coords="158,0,263,97" shape="rect" /><area href="../audio/index.htm" coords="265,1,335,97" shape="rect" /><area href="../css/index.htm" coords="338,1,434,93" shape="rect" /><area href="index.htm" coords="439,0,540,102" shape="rect" /><area href="../infoarch/index.htm" coords="544,0,685,102" shape="rect" /></map>

</body></html>