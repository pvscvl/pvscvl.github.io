<html><head><title>Other Operators (ActionScript: The Definitive Guide)</title><link rel="stylesheet" type="text/css" href="../style/style1.css" />

<meta name="DC.Creator" content="Colin Moock" /><meta name="DC.Format" content="text/xml" scheme="MIME" /><meta name="DC.Language" content="en-US" /><meta name="DC.Publisher" content="O'Reilly &amp; Associates, Inc." /><meta name="DC.Source" scheme="ISBN" content="1565928520L" /><meta name="DC.Subject.Keyword" content="stuff" /><meta name="DC.Title" content="ActionScript: The Definitive Guide" /><meta name="DC.Type" content="Text.Monograph" />

</head><body bgcolor="#ffffff">

<img alt="Book Home" border="0" src="gifs/smbanner.gif" usemap="#banner-map" /><map name="banner-map"><area shape="rect" coords="1,-2,616,66" href="index.htm" alt="ActionScript: The Definitive Guide" /><area shape="rect" coords="629,-11,726,25" href="jobjects/fsearch.htm" alt="Search this book" /></map>

<div class="navbar"><table width="684" border="0"><tr><td align="left" valign="top" width="228"><a href="ch05_10.htm"><img alt="Previous" border="0" src="../gifs/txtpreva.gif" /></a></td><td align="center" valign="top" width="228"><a href="index.htm">ActionScript: The Definitive Guide</a></td><td align="right" valign="top" width="228"><a href="ch05_12.htm"><img alt="Next" border="0" src="../gifs/txtnexta.gif" /></a></td></tr></table></div>
<hr width="684" align="left" />


<h2 class="sect1">5.11. Other Operators</h2>


<p>The remaining operators apply to topics considered in other chapters.
We'll include them here for quick reference only and describe
their usage fully in those chapters.</p>


<a name="ch05-43-fm2xml" /><div class="sect2">
<h3 class="sect2">5.11.1. The Bitwise Operators</h3>


<p>If <a name="INDEX-787" /> <a name="INDEX-788" />you're planning to develop
large-scale systems in which every iota of memory, calculation speed,
and transfer-rate optimization makes a meaningful difference in
performance, read about the bitwise operators in <a href="ch15_01.htm">Chapter 15, "Advanced Topics"</a>. Otherwise, use the Boolean logical operators,
which perform the same tasks the bitwise operators do, albeit in a
less optimized way.</p>
</div>




<a name="ch05-44-fm2xml" /><div class="sect2">
<h3 class="sect2">5.11.2. The typeof Operator</h3>


<p>The <em class="emphasis">typeof</em><a name="INDEX-789" /> operator is used to determine the
datatype of an expression. It takes one operand, as follows:</p>


<blockquote><pre class="code">typeof <em class="replaceable">operand</em>;</pre></blockquote>


<p>where <em class="replaceable">operand</em> may be any legal expression.
The return value of the <em class="filename">typeof</em> operation is a
string indicating the datatype of the evaluated
<em class="replaceable">operand</em>. See <a href="ch03_01.htm">Chapter 3, "Data and Datatypes"</a>
for more details.</p>
</div>




<a name="ch05-45-fm2xml" /><div class="sect2">
<h3 class="sect2">5.11.3. The new Operator</h3>


<p>The <em class="filename">new</em><a name="INDEX-790" /> operator creates a new composite datum
 --  either an array or an object. The object may be a member of a
built-in class or a user-defined class. The syntax for
<em class="filename">new</em> is:</p>


<blockquote><pre class="code">new <em class="replaceable">constructor</em></pre></blockquote>


<p>where <em class="replaceable">constructor</em> must be a function that
defines the properties of the newly created object. See <a href="ch11_01.htm">Chapter 11, "Arrays"</a>, and <a href="ch12_01.htm">Chapter 12, "Objects and Classes"</a>.</p>
</div>




<a name="ch05-59578" /><div class="sect2">
<h3 class="sect2">5.11.4. The delete Operator</h3>


<p>We use the <em class="filename">delete</em><a name="INDEX-791" /> operator to remove an object, an
object property, an array element, or variables from a script. The
syntax for <em class="filename">delete</em> is:</p>


<blockquote><pre class="code">delete <em class="replaceable">identifier  </em></pre></blockquote>


<p>If <em class="replaceable">identifier</em> is not a data container
(variable, property, or element), the <em class="filename">delete</em>
operation fails and returns the value <tt class="literal">false</tt>;
otherwise, it returns <tt class="literal">true</tt>, indicating success.
See <a href="ch11_01.htm">Chapter 11, "Arrays"</a>.</p>
</div>




<a name="ch05-46-fm2xml" /><div class="sect2">
<h3 class="sect2">5.11.5. Array-Element/Object-Property Operator</h3>


<p>As <a name="INDEX-792" /> <a name="INDEX-793" />
<a name="INDEX-794" />we'll see in <a href="ch11_01.htm">Chapter 11, "Arrays"</a> and <a href="ch12_01.htm">Chapter 12, "Objects and Classes"</a>, we use the [
] operator to retrieve and set the value of an array element or an
object property. When accessing an array it takes the form:</p>


<blockquote><pre class="code"><em class="replaceable">array</em>[<em class="replaceable">element</em>]</pre></blockquote>


<p>where <em class="replaceable">array</em> is the name of an array or an
array literal and <em class="replaceable">element</em> is an expression
that resolves to a zero-relative, non-negative integer representing
the index of the array element to access.</p>


<p>When accessing an object, it takes the form:</p>


<blockquote><pre class="code"><em class="replaceable">object</em>[<em class="replaceable">property</em>]</pre></blockquote>


<p>where <em class="replaceable">object</em> is an object name or object
literal and <em class="replaceable">property</em> is any expression
that resolves to a string representing the name of the object
property to access.</p>


<p>When used on the left side of an assignment operator
(<tt class="literal">=</tt>), the element or property is assigned the new
value shown on the right side of the expression:</p>


<blockquote><pre class="code">var colors = new Array( );  // Create a new array
colors[0] = "orange";      // Set its first element
colors[1] = "green";       // Set its second element

var ball = new Object( );   // Create a new object
var myProp = "xVelocity";  // Store a string in a variable
ball["radius"] = 150;      // Set the <em class="replaceable">radius</em> property
ball[myProp] = 10;         // Set the <em class="replaceable">xVelocity</em> property through <em class="replaceable">myProp</em></pre></blockquote>


<p>When used anywhere else, the expression returns the value of the
specified element or property:</p>


<blockquote><pre class="code">diameter = ball["radius"] * 2;  // Sets <em class="replaceable">diameter</em> to 300
trace(colors[0]);               // Displays "orange"</pre></blockquote>
</div>




<a name="ch05-47-fm2xml" /><div class="sect2">
<h3 class="sect2">5.11.6. The dot Operator</h3>


<p>The <em class="emphasis">dot</em><a name="INDEX-795" /> <a name="INDEX-796" /> operator is our primary means of
referring to <a name="INDEX-797" />object properties and nested movie clips.
Functionally, the dot operator has the exact same purpose as the
<tt class="literal">[]</tt> operator  --  it lets us set and retrieve
object-property values. But the two operators have syntactic
differences that make them unique. The general syntax of the dot
operator is:</p>


<blockquote><pre class="code"><em class="replaceable">object</em>.<em class="replaceable">property</em></pre></blockquote>


<p>where <em class="replaceable">object</em> must be the name of an object
or an object literal, and <em class="replaceable">property</em> must be
an identifier that represents a property of
<em class="replaceable">object</em>. Note that
<em class="replaceable">property</em> may <em class="emphasis">not</em> be
an arbitrary expression or a string literal; it must be the name of a
property. Because array elements are numbered, not named, the dot
operator cannot be used to access the elements of an array.</p>


<p>When used as the lefthand operand of an assignment operator, the dot
operator is used to set a new value for a property:</p>


<blockquote><pre class="code">var ball = new Object( );
ball.radius = 150;
ball.xVelocity = 10;</pre></blockquote>


<p>When used anywhere else, a dot operation returns the value of the
named object property:</p>


<blockquote><pre class="code">diameter = ball.radius;
newX = ball.xPosition + ball.xVelocity;</pre></blockquote>


<p>See <a href="ch12_01.htm">Chapter 12, "Objects and Classes"</a> and <a href="ch13_01.htm">Chapter 13, "Movie Clips"</a>.</p>
</div>




<a name="ch05-48-fm2xml" /><div class="sect2">
<h3 class="sect2">5.11.7. The conditional Operator</h3>


<p>The <em class="emphasis">conditional</em><a name="INDEX-798" />
<a name="INDEX-799" />
operator is a syntactic convenience that lets us succinctly represent
a simple conditional statement. This operator takes three operands,
in the form:</p>


<blockquote><pre class="code"><em class="replaceable">condition</em> ? <em class="replaceable">result_if_true</em> : <em class="replaceable">result_if_false</em>;</pre></blockquote>


<p>When a conditional operation is executed, the first operand
(<em class="replaceable">condition</em>) is evaluated. If
<em class="replaceable">condition</em> is <tt class="literal">true</tt> or
can be converted to <tt class="literal">true</tt>, the value of the second
operand (<em class="replaceable">result_if_true</em>) is returned.
Otherwise, the value of the third operand
(<em class="replaceable">result_if_false</em>) is returned. See <a href="ch07_01.htm">Chapter 7, "Conditionals"</a>.</p>
</div>




<a name="ch05-49-fm2xml" /><div class="sect2">
<h3 class="sect2">5.11.8. The Function Call Operator</h3>


<p>As <a name="INDEX-800" /> <a name="INDEX-801" /> <a name="INDEX-802" />we've
<a name="INDEX-803" />
<a name="INDEX-804" />seen with
the <em class="filename">trace( )</em> function and the
string-manipulation functions, we use the function call operator,
<tt class="literal">( )</tt>, to invoke a function. A function call takes
the general form:</p>


<blockquote><pre class="code"><em class="replaceable">function_name</em>(<em class="replaceable">argument_list</em>)</pre></blockquote>


<p>The first operand, <em class="replaceable">function_name</em>, is the
name of some function and <em class="emphasis">must</em> be an identifier,
not an expression. The function must exist or the interpreter will
produce an error. The <em class="replaceable">argument_list</em> is a
series of zero or more arguments passed to the function, separated by
commas. The return value of a function call operation is the return
value supplied by the function itself.</p>


<p>The function call operator can call any built-in or user-defined
function:</p>


<blockquote><pre class="code">trace("an internal function");  // Built-in function, one argument
myClip.play( );                  // Method of a movie clip, no arguments
myRectangle.area(6, 9);         // User-defined method, two arguments
init( );                         // User-defined function, no arguments</pre></blockquote>
</div>


<hr width="684" align="left" />
<div class="navbar"><table width="684" border="0"><tr><td align="left" valign="top" width="228"><a href="ch05_10.htm"><img alt="Previous" border="0" src="../gifs/txtpreva.gif" /></a></td><td align="center" valign="top" width="228"><a href="index.htm"><img alt="Home" border="0" src="../gifs/txthome.gif" /></a></td><td align="right" valign="top" width="228"><a href="ch05_12.htm"><img alt="Next" border="0" src="../gifs/txtnexta.gif" /></a></td></tr><tr><td align="left" valign="top" width="228">5.10. The void Operator</td><td align="center" valign="top" width="228"><a href="index/index.htm"><img alt="Book Index" border="0" src="../gifs/index.gif" /></a></td><td align="right" valign="top" width="228">5.12. Onward!</td></tr></table></div>
<hr width="684" align="left" />

<img alt="Library Navigation Links" border="0" src="../gifs/navbar.gif" usemap="#library-map" />
<p><font size="-1"><a href="copyrght.htm">Copyright &copy; 2002</a> O'Reilly &amp; Associates. All rights reserved.</font></p>

<map name="library-map"><area href="../index.htm" coords="0,1,78,93" shape="rect" /><area href="../wdesign/index.htm" coords="80,2,155,96" shape="rect" /><area href="../xhtml/index.htm" coords="158,0,263,97" shape="rect" /><area href="../audio/index.htm" coords="265,1,335,97" shape="rect" /><area href="../css/index.htm" coords="338,1,434,93" shape="rect" /><area href="index.htm" coords="439,0,540,102" shape="rect" /><area href="../infoarch/index.htm" coords="544,0,685,102" shape="rect" /></map>

</body></html>