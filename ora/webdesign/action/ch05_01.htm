<html><head><title>Operators (ActionScript: The Definitive Guide)</title><link rel="stylesheet" type="text/css" href="../style/style1.css" />

<meta name="DC.Creator" content="Colin Moock" /><meta name="DC.Format" content="text/xml" scheme="MIME" /><meta name="DC.Language" content="en-US" /><meta name="DC.Publisher" content="O'Reilly &amp; Associates, Inc." /><meta name="DC.Source" scheme="ISBN" content="1565928520L" /><meta name="DC.Subject.Keyword" content="stuff" /><meta name="DC.Title" content="ActionScript: The Definitive Guide" /><meta name="DC.Type" content="Text.Monograph" />

</head><body bgcolor="#ffffff">

<img alt="Book Home" border="0" src="gifs/smbanner.gif" usemap="#banner-map" /><map name="banner-map"><area shape="rect" coords="1,-2,616,66" href="index.htm" alt="ActionScript: The Definitive Guide" /><area shape="rect" coords="629,-11,726,25" href="jobjects/fsearch.htm" alt="Search this book" /></map>

<div class="navbar"><table width="684" border="0"><tr><td align="left" valign="top" width="228"><a href="ch04_10.htm"><img alt="Previous" border="0" src="../gifs/txtpreva.gif" /></a></td><td align="center" valign="top" width="228"><a href="index.htm">ActionScript: The Definitive Guide</a></td><td align="right" valign="top" width="228"><a href="ch05_02.htm"><img alt="Next" border="0" src="../gifs/txtnexta.gif" /></a></td></tr></table></div>
<hr width="684" align="left" />



<h1 class="chapter">Chapter 5. Operators</h1>
<div class="htmltoc"><h4 class="tochead">Contents:</h4><p>
<a href="ch05_01.htm">General Features of Operators</a><br />
<a href="ch05_02.htm">The Assignment Operator</a><br />
<a href="ch05_03.htm">Arithmetic Operators</a><br />
<a href="ch05_04.htm">The Equality and Inequality Operators</a><br />
<a href="ch05_05.htm">The Comparison Operators</a><br />
<a href="ch05_06.htm">The String Operators</a><br />
<a href="ch05_07.htm">The Logical Operators</a><br />
<a href="ch05_08.htm">The Grouping Operator</a><br />
<a href="ch05_09.htm">The Comma Operator</a><br />
<a href="ch05_10.htm">The void Operator</a><br />
<a href="ch05_11.htm">Other Operators</a><br />
<a href="ch05_12.htm">Onward!</a><br /></p></div>


<p>An <em class="emphasis">operator</em><a name="INDEX-635" />
is a symbol or keyword that manipulates, combines, or transforms
data. If you're new to programming, you'll notice that
some mathematical operators, like + (addition) and - (subtraction)
are very familiar. In other cases, you'll have to learn special
programming syntax even if the concepts are familiar. For example, to
multiply two numbers, ActionScript uses the symbol
<tt class="literal">*</tt> (the multiplication operator) instead of the
<tt class="literal">X</tt> typically taught in grade school. For example,
this multiplies 5 times 6:</p>


<blockquote><pre class="code">5 * 6;</pre></blockquote>


<div class="sect1"><a name="ch05-2-fm2xml" />
<h2 class="sect1">5.1. General Features of Operators</h2>


<p>Though each operator has its own specialized task, all operators
share a number of general characteristics. Before we consider the
operators individually, let's see how they behave generally.</p>


<a name="ch05-3-fm2xml" /><div class="sect2">
<h3 class="sect2">5.1.1. Operators and Expressions</h3>


<p>Operators
<a name="INDEX-636" />
<a name="INDEX-637" />perform some action using the data values
(<em class="filename">operands</em><a name="INDEX-638" />)
supplied. For example, in the operation <tt class="literal">5 * 6</tt>, the
numbers 5 and 6 are the <em class="emphasis">operands</em> of the
multiplication operator (<tt class="literal">*</tt>). The operands can be
any kind of expression, for example:</p>


<blockquote><pre class="code">player1score + bonusScore;              // Operands are variables
(x + y) - (Math.PI * radius * radius);  // Operands are complex expressions</pre></blockquote>


<p>Observe in the second example that both the left and right operands
of the - operator are expressions that themselves involve other
operations. We can use complex expressions to create even larger
expressions, such as:</p>


<blockquote><pre class="code">((x + y) - (Math.PI * radius * radius)) / 2  // Divide the whole thing by 2</pre></blockquote>


<p>When expressions become very large, consider using variables to hold
interim results for both convenience and clarity. Remember to name
your variables descriptively, such as:</p>


<blockquote><pre class="code">var radius = 10;
var height = 25;
var circleArea = (Math.PI * radius * radius);
var cylinderVolume = circleArea * height;</pre></blockquote>
</div>




<a name="ch05-4-fm2xml" /><div class="sect2">
<h3 class="sect2">5.1.2. Number of Operands</h3>


<p>Operators <a name="INDEX-639" />are <a name="INDEX-640" /> <a name="INDEX-641" /> <a name="INDEX-642" />sometimes categorized according to how
many operands they take. Some ActionScript operators take one
operand, some take two, and one even takes three:</p>


<blockquote><pre class="code">-x                                         // One operand
x * y                                      // Two operands
(x == y) ? "true result" : "false result"  // Three operands</pre></blockquote>


<p>Single-operand operators are called <em class="emphasis">unary</em>
operators; operators with two operands are called
<em class="emphasis">binary</em> operators; operators with three operands
are called <em class="emphasis">ternary</em> operators. For our purposes,
we'll look at operators according to what they do, not the
number of operands they take.</p>
</div>




<a name="ch05-5-fm2xml" /><div class="sect2">
<h3 class="sect2">5.1.3. Operator Precedence</h3>


<p>An <a name="INDEX-643" /> <a name="INDEX-644" />operator
<em class="emphasis">precedence</em> determines which operation is
performed first in an expression with multiple operators. For
example, when multiplication and addition occur in the same
expression, multiplication is performed first:</p>


<blockquote><pre class="code">4 + 5 * 6  // Yields 34, because 4 + 30 = 34</pre></blockquote>


<p>The expression <tt class="literal">4 + 5 * 6</tt> is evaluated as
<tt class="literal">4 + (5 * 6)</tt> because the <tt class="literal">*</tt>
operator has higher precedence than the <tt class="literal">+</tt>
operator. When in doubt, or to ensure a different order of operation,
use <a name="INDEX-645" /> <a name="INDEX-646" />parentheses, which have the highest
precedence:</p>


<blockquote><pre class="code">(4 + 5) * 6  // Yields 54, because 9 * 6 = 54</pre></blockquote>


<p>Even if not strictly necessary, parentheses can make a complicated
expression more readable. The expression:</p>


<blockquote><pre class="code">// x is greater than y or y equals z
x &gt; y || y == z</pre></blockquote>


<p>may be difficult to comprehend without consulting a precedence table.
It's a lot easier to read with parentheses added:</p>


<blockquote><pre class="code">(x &gt; y) || (y == z)  // Much better!</pre></blockquote>


<p><a href="ch05_01.htm">Table 5-1</a> shows the precedence of each operator.
Operators with the highest precedence (at the top of the table) are
executed first. Operators with the same precedence are performed left
to right.</p>


<a name="ch05-82984" /><h4 class="objtitle">Table 5-1. ActionScript Operator Associativity and Precedence </h4><table border="1">





<tr>
<th>
<p>Operator</p></th>
<th>
<p>Precedence</p></th>
<th>
<p>Associativity</p></th>
<th>
<p>Description</p></th>
</tr>




<tr>
<td>
<p><tt class="literal">x++</tt></p></td>
<td>
<p>16</p></td>
<td>
<p><a name="INDEX-647" /> <a name="INDEX-648" /> <a name="INDEX-649" /> <a name="INDEX-650" />left to right</p></td>
<td>
<p>postfix increment</p></td>
</tr>

<tr>
<td>
<p><tt class="literal">x--</tt></p></td>
<td>
<p>16</p></td>
<td>
<p>left to right</p></td>
<td>
<p>postfix decrement</p></td>
</tr>

<tr>
<td>
<p><tt class="literal">.</tt></p></td>
<td>
<p>15</p></td>
<td>
<p>left to right</p></td>
<td>
<p>object property access</p></td>
</tr>

<tr>
<td>
<p><tt class="literal">[]</tt></p></td>
<td>
<p>15</p></td>
<td>
<p>left to right</p></td>
<td>
<p>array element access</p></td>
</tr>

<tr>
<td>
<p><tt class="literal">( )</tt></p></td>
<td>
<p>15</p></td>
<td>
<p>left to right</p></td>
<td>
<p>parentheses</p></td>
</tr>

<tr>
<td>
<p><em class="filename">function</em><tt class="literal">( )</tt></p></td>
<td>
<p>15</p></td>
<td>
<p>left to right</p></td>
<td>
<p>function call</p></td>
</tr>

<tr>
<td>
<p><tt class="literal">++x</tt></p></td>
<td>
<p>14</p></td>
<td>
<p>right to left</p></td>
<td>
<p>prefix increment</p></td>
</tr>

<tr>
<td>
<p><tt class="literal">--x</tt></p></td>
<td>
<p>14</p></td>
<td>
<p>right to left</p></td>
<td>
<p>prefix decrement</p></td>
</tr>

<tr>
<td>
<p><tt class="literal">-</tt></p></td>
<td>
<p>14</p></td>
<td>
<p>right to left</p></td>
<td>
<p>unary negation</p></td>
</tr>

<tr>
<td>
<p><tt class="literal">~</tt></p></td>
<td>
<p>14</p></td>
<td>
<p>right to left</p></td>
<td>
<p>bitwise NOT</p></td>
</tr>

<tr>
<td>
<p><tt class="literal">!</tt></p></td>
<td>
<p>14</p></td>
<td>
<p>right to left</p></td>
<td>
<p>logical NOT</p></td>
</tr>

<tr>
<td>
<p><tt class="literal">new</tt></p></td>
<td>
<p>14</p></td>
<td>
<p>right to left</p></td>
<td>
<p>create object/array</p></td>
</tr>

<tr>
<td>
<p><tt class="literal">delete</tt></p></td>
<td>
<p>14</p></td>
<td>
<p>right to left</p></td>
<td>
<p>remove object/property/array element</p></td>
</tr>

<tr>
<td>
<p><tt class="literal">typeof</tt></p></td>
<td>
<p>14</p></td>
<td>
<p>right to left</p></td>
<td>
<p>determine datatype</p></td>
</tr>

<tr>
<td>
<p><tt class="literal">void</tt></p></td>
<td>
<p>14</p></td>
<td>
<p>right to left</p></td>
<td>
<p>return undefined value</p></td>
</tr>

<tr>
<td>
<p><tt class="literal">*</tt></p></td>
<td>
<p>13</p></td>
<td>
<p>left to right</p></td>
<td>
<p>multiply</p></td>
</tr>

<tr>
<td>
<p><tt class="literal">/</tt></p></td>
<td>
<p>13</p></td>
<td>
<p>left to right</p></td>
<td>
<p>divide</p></td>
</tr>

<tr>
<td>
<p><tt class="literal">%</tt></p></td>
<td>
<p>13</p></td>
<td>
<p>left to right</p></td>
<td>
<p>modulo division</p></td>
</tr>

<tr>
<td>
<p><tt class="literal">+</tt></p></td>
<td>
<p>12</p></td>
<td>
<p>left to right</p></td>
<td>
<p>addition or string concatenation</p></td>
</tr>

<tr>
<td>
<p><tt class="literal">-</tt></p></td>
<td>
<p>12</p></td>
<td>
<p>left to right</p></td>
<td>
<p>subtraction</p></td>
</tr>

<tr>
<td>
<p><tt class="literal">&lt;&lt;</tt></p></td>
<td>
<p>11</p></td>
<td>
<p>left to right</p></td>
<td>
<p><a name="INDEX-651" />bitwise left shift</p></td>
</tr>

<tr>
<td>
<p><tt class="literal">&gt;&gt;</tt></p></td>
<td>
<p>11</p></td>
<td>
<p>left to right</p></td>
<td>
<p>bitwise signed right shift</p></td>
</tr>

<tr>
<td>
<p><tt class="literal">&gt;&gt;&gt;</tt></p></td>
<td>
<p>11</p></td>
<td>
<p>left to right</p></td>
<td>
<p>bitwise unsigned right shift</p></td>
</tr>

<tr>
<td>
<p><tt class="literal">&lt;</tt></p></td>
<td>
<p>10</p></td>
<td>
<p>left to right</p></td>
<td>
<p>less than</p></td>
</tr>

<tr>
<td>
<p><tt class="literal">&lt;=</tt></p></td>
<td>
<p>10</p></td>
<td>
<p>left to right</p></td>
<td>
<p>less than or equal to</p></td>
</tr>

<tr>
<td>
<p><tt class="literal">&gt;</tt></p></td>
<td>
<p>10</p></td>
<td>
<p>left to right</p></td>
<td>
<p>greater than</p></td>
</tr>

<tr>
<td>
<p><tt class="literal">&gt;=</tt></p></td>
<td>
<p>10</p></td>
<td>
<p>left to right</p></td>
<td>
<p>greater than or equal to</p></td>
</tr>

<tr>
<td>
<p><tt class="literal">==</tt></p></td>
<td>
<p>9</p></td>
<td>
<p>left to right</p></td>
<td>
<p>equality</p></td>
</tr>

<tr>
<td>
<p><tt class="literal">!=</tt></p></td>
<td>
<p>9</p></td>
<td>
<p>left to right</p></td>
<td>
<p>not equal to</p></td>
</tr>

<tr>
<td>
<p><tt class="literal">&amp;</tt></p></td>
<td>
<p>8</p></td>
<td>
<p>left to right</p></td>
<td>
<p>bitwise AND</p></td>
</tr>

<tr>
<td>
<p><tt class="literal">^</tt></p></td>
<td>
<p>7</p></td>
<td>
<p>left to right</p></td>
<td>
<p>bitwise XOR</p></td>
</tr>

<tr>
<td>
<p><tt class="literal">|</tt></p></td>
<td>
<p>6</p></td>
<td>
<p>left to right</p></td>
<td>
<p>bitwise OR</p></td>
</tr>

<tr>
<td>
<p><tt class="literal">&amp;&amp;</tt></p></td>
<td>
<p>5</p></td>
<td>
<p>left to right</p></td>
<td>
<p>logical AND</p></td>
</tr>

<tr>
<td>
<p><tt class="literal">||</tt></p></td>
<td>
<p>4</p></td>
<td>
<p>left to right</p></td>
<td>
<p>logical OR</p></td>
</tr>

<tr>
<td>
<p><tt class="literal">?:</tt></p></td>
<td>
<p>3</p></td>
<td>
<p>right to left</p></td>
<td>
<p>conditional</p></td>
</tr>

<tr>
<td>
<p><tt class="literal">=</tt></p></td>
<td>
<p>2</p></td>
<td>
<p>right to left</p></td>
<td>
<p>assignment</p></td>
</tr>

<tr>
<td>
<p><tt class="literal">+= </tt></p></td>
<td>
<p>2</p></td>
<td>
<p>right to left</p></td>
<td>
<p>add and reassign</p></td>
</tr>

<tr>
<td>
<p><tt class="literal">-=</tt></p></td>
<td>
<p>2</p></td>
<td>
<p>right to left</p></td>
<td>
<p>subtract and reassign</p></td>
</tr>

<tr>
<td>
<p><tt class="literal">*=</tt><a name="INDEX-652" /> <a name="INDEX-653" /></p></td>
<td>
<p>2</p></td>
<td>
<p>right to left</p></td>
<td>
<p>multiply and reassign</p></td>
</tr>

<tr>
<td>
<p><tt class="literal">/=</tt><a name="INDEX-654" /> <a name="INDEX-655" /></p></td>
<td>
<p>2</p></td>
<td>
<p>right to left</p></td>
<td>
<p>divide and reassign</p></td>
</tr>

<tr>
<td>
<p><tt class="literal">%=</tt><a name="INDEX-656" /> <a name="INDEX-657" /></p></td>
<td>
<p>2</p></td>
<td>
<p>right to left</p></td>
<td>
<p>modulo division and reassign</p></td>
</tr>

<tr>
<td>
<p><a name="INDEX-658" /> <a name="INDEX-659" />
<a name="INDEX-660" /><tt class="literal">&lt;&lt;=</tt></p></td>
<td>
<p>2</p></td>
<td>
<p>right to left</p></td>
<td>
<p>bit-shift left and reassign</p></td>
</tr>

<tr>
<td>
<p><a name="INDEX-661" /> <a name="INDEX-662" />
<a name="INDEX-663" /> <a name="INDEX-664" /><tt class="literal">&gt;&gt;=</tt></p></td>
<td>
<p>2</p></td>
<td>
<p>right to left</p></td>
<td>
<p>bit-shift right and reassign</p></td>
</tr>

<tr>
<td>
<p><a name="INDEX-665" /> <a name="INDEX-666" />
<a name="INDEX-667" /><tt class="literal">&gt;&gt;&gt;=</tt></p></td>
<td>
<p>2</p></td>
<td>
<p>right to left</p></td>
<td>
<p>bit-shift right (unsigned) and reassign</p></td>
</tr>

<tr>
<td>
<p><tt class="literal">&amp;=</tt><a name="INDEX-668" /> <a name="INDEX-669" /></p></td>
<td>
<p>2</p></td>
<td>
<p>right to left</p></td>
<td>
<p>bitwise &amp; and reassign</p></td>
</tr>

<tr>
<td>
<p><tt class="literal">^=</tt><a name="INDEX-670" /> <a name="INDEX-671" /></p></td>
<td>
<p>2</p></td>
<td>
<p>right to left</p></td>
<td>
<p>bitwise XOR and reassign</p></td>
</tr>

<tr>
<td>
<p><tt class="literal">|=</tt><a name="INDEX-672" /> <a name="INDEX-673" /></p></td>
<td>
<p>2</p></td>
<td>
<p>right to left</p></td>
<td>
<p>bitwise OR and reassign</p></td>
</tr>

<tr>
<td>
<p><tt class="literal">,</tt></p></td>
<td>
<p>1</p></td>
<td>
<p>left to right</p></td>
<td>
<p><a name="INDEX-674" />
<a name="INDEX-675" />comma</p></td>
</tr>


</table>
</div>




<a name="ch05-6-fm2xml" /><div class="sect2">
<h3 class="sect2">5.1.4. Operator Associativity</h3>


<p>As we've just learned, operator precedence indicates the
pecking order of operators: those with a higher precedence are
executed before those with a lower precedence. But what happens when
multiple operators occur together and have the same level of
precedence? In such a case, we apply the rules of <em class="emphasis">operator
associativity</em>, which indicate the direction of an
operation. Operators are either left-associative (performed left to
right) or right-associative (performed right to left). For example,
consider this expression:</p>


<blockquote><pre class="code">a = b * c / d</pre></blockquote>


<p>The * and / operators are left-associative, so the
<tt class="literal">*</tt> operation on the left (b * c) is performed
first. The preceding example is equivalent to:</p>


<blockquote><pre class="code">a = (b * c) / d</pre></blockquote>


<p>In contrast, the = (assignment) operator is right-associative, so the
expression:</p>


<blockquote><pre class="code">a = b = c = d</pre></blockquote>


<p>says "assign d to c, then assign c to b, then assign b to
a," as in:</p>


<blockquote><pre class="code">a = (b = (c = d))</pre></blockquote>


<p>Operator associativity is fairly intuitive, but if you're
getting an unexpected value from a complex expression, consult <a href="ch05_01.htm">Table 5-1</a> or add extra parentheses. We'll note
cases in which associativity is a common source of errors throughout
the remainder of the <a name="INDEX-676" /> <a name="INDEX-677" /> <a name="INDEX-678" /> <a name="INDEX-679" />chapter.</p>
</div>




<a name="ch05-7-fm2xml" /><div class="sect2">
<h3 class="sect2">5.1.5. Datatypes and Operators</h3>


<p>Some <a name="INDEX-680" />
<a name="INDEX-681" />operators accept multiple datatypes as
operands. Depending on the datatype of an operand, the effect of an
operator may change. The <tt class="literal">+</tt> operator, for example,
performs addition when used with numeric operands but concatenation
when used with string operands. If operands are of different
datatypes or of the wrong type, ActionScript will perform type
conversion according to the rules described in <a href="ch03_01.htm">Chapter 3, "Data and Datatypes"</a>, which can have serious effects on your code.</p>
</div>
</div>
















































































































<hr width="684" align="left" />
<div class="navbar"><table width="684" border="0"><tr><td align="left" valign="top" width="228"><a href="ch04_10.htm"><img alt="Previous" border="0" src="../gifs/txtpreva.gif" /></a></td><td align="center" valign="top" width="228"><a href="index.htm"><img alt="Home" border="0" src="../gifs/txthome.gif" /></a></td><td align="right" valign="top" width="228"><a href="ch05_02.htm"><img alt="Next" border="0" src="../gifs/txtnexta.gif" /></a></td></tr><tr><td align="left" valign="top" width="228">4.10. Onward!</td><td align="center" valign="top" width="228"><a href="index/index.htm"><img alt="Book Index" border="0" src="../gifs/index.gif" /></a></td><td align="right" valign="top" width="228">5.2. The Assignment Operator</td></tr></table></div>
<hr width="684" align="left" />

<img alt="Library Navigation Links" border="0" src="../gifs/navbar.gif" usemap="#library-map" />
<p><font size="-1"><a href="copyrght.htm">Copyright &copy; 2002</a> O'Reilly &amp; Associates. All rights reserved.</font></p>

<map name="library-map"><area href="../index.htm" coords="0,1,78,93" shape="rect" /><area href="../wdesign/index.htm" coords="80,2,155,96" shape="rect" /><area href="../xhtml/index.htm" coords="158,0,263,97" shape="rect" /><area href="../audio/index.htm" coords="265,1,335,97" shape="rect" /><area href="../css/index.htm" coords="338,1,434,93" shape="rect" /><area href="index.htm" coords="439,0,540,102" shape="rect" /><area href="../infoarch/index.htm" coords="544,0,685,102" shape="rect" /></map>

</body></html>