<html><head><title>Movie and Instance Stacking Order (ActionScript: The Definitive Guide)</title><link rel="stylesheet" type="text/css" href="../style/style1.css" />

<meta name="DC.Creator" content="Colin Moock" /><meta name="DC.Format" content="text/xml" scheme="MIME" /><meta name="DC.Language" content="en-US" /><meta name="DC.Publisher" content="O'Reilly &amp; Associates, Inc." /><meta name="DC.Source" scheme="ISBN" content="1565928520L" /><meta name="DC.Subject.Keyword" content="stuff" /><meta name="DC.Title" content="ActionScript: The Definitive Guide" /><meta name="DC.Type" content="Text.Monograph" />

</head><body bgcolor="#ffffff">

<img alt="Book Home" border="0" src="gifs/smbanner.gif" usemap="#banner-map" /><map name="banner-map"><area shape="rect" coords="1,-2,616,66" href="index.htm" alt="ActionScript: The Definitive Guide" /><area shape="rect" coords="629,-11,726,25" href="jobjects/fsearch.htm" alt="Search this book" /></map>

<div class="navbar"><table width="684" border="0"><tr><td align="left" valign="top" width="228"><a href="ch13_03.htm"><img alt="Previous" border="0" src="../gifs/txtpreva.gif" /></a></td><td align="center" valign="top" width="228"><a href="index.htm">ActionScript: The Definitive Guide</a></td><td align="right" valign="top" width="228"><a href="ch13_05.htm"><img alt="Next" border="0" src="../gifs/txtnexta.gif" /></a></td></tr></table></div>
<hr width="684" align="left" />


<h2 class="sect1">13.4. Movie and Instance Stacking Order</h2>


<p>All <a name="INDEX-1647" /> <a name="INDEX-1648" />movie clip instances and externally
loaded movies displayed in the Player reside in a visual stacking
order akin to a deck of cards. When instances or externally loaded
<em class="filename">.swf</em> files overlap in the Player, one clip (the
"higher" of the two) always covers up the other clip (the
"lower" of the two). Simple enough in principle, but the
main stack, which contains <em class="emphasis">all</em> the instances and
<em class="filename">.swf</em> files, is actually divided into many
smaller substacks. We'll look at these substacks individually
first, then see how they combine to form the main stack. (The stack
in this discussion has no direct relation to the LIFO and FIFO stacks
discussed in <a href="ch11_01.htm">Chapter 11, "Arrays"</a>.)</p>


<a name="ch13-19-fm2xml" /><div class="sect2">
<h3 class="sect2">13.4.1. The Internal Layer Stack</h3>


<p>Instances <a name="INDEX-1649" /> <a name="INDEX-1650" />created
<a name="INDEX-1651" /><em class="emphasis">manually</em> in the
<a name="INDEX-1652" /> <a name="INDEX-1653" />
<a name="INDEX-1654" />Flash authoring tool reside in a stack
called the <em class="emphasis">internal layer stack</em>. This
stack's order is governed by the actual layers in a
movie's timeline; when two manually created instances on
separate timeline layers overlap, the instance on the uppermost layer
obscures the instance on the lowermost layer.</p>


<p>Furthermore, because multiple clips may reside on a single timeline
layer, each layer in the internal layer stack actually maintains its
<em class="emphasis">own</em> ministack. Overlapping clips that reside on
the same layer of a timeline are stacked in the authoring tool via
the Modify <img align="absmiddle" src="figs/U2192.gif" /> Arrange commands.</p>


<p>As of Flash 5, we can swap the position of two instances in the
internal layer stack using the <em class="filename">swapDepths(
)</em><a name="INDEX-1655" /> <a name="INDEX-1656" /> method, provided they reside on the
same timeline (that is, the value of the two clips' <tt class="literal">_
parent</tt> property must be the same). Prior to Flash 5, there
was no way to alter the internal layer stack via ActionScript.</p>
</div>




<a name="ch13-20-fm2xml" /><div class="sect2">
<h3 class="sect2">13.4.2. The Programmatically Generated Clip Stack</h3>


<p><em class="emphasis">Programmatically generated</em><a name="INDEX-1657" /> <a name="INDEX-1658" /> <a name="INDEX-1659" />instances are stacked separately
from the <em class="emphasis">manually</em> created instances held in the
internal layer stack. Each instance has its own<em class="emphasis">
programmatically generated clip stack</em> that hold clips
created via <em class="filename">duplicateMovieClip( )</em> and
<em class="filename">attachMovie( ). </em>The stacking order for these
clips varies depending on how they were created.</p>


<a name="ch13-68225" /><div class="sect3">
<h3 class="sect3">13.4.2.1. How clips generated via attachMovie( ) are added to the stack</h3>


<p>A <a name="INDEX-1660" />
<a name="INDEX-1661" />new instance
generated via <em class="filename">attachMovie( )</em> is always stacked
above (i.e., in the foreground relative to) the clip to which it was
attached. For example, suppose we have two
clips -- <tt class="literal">X</tt> and <tt class="literal">Y</tt> -- in
the internal layer structure of a movie and that <tt class="literal">X</tt>
resides on a layer above <tt class="literal">Y</tt>. Now further suppose we
attach a new clip, <tt class="literal">A</tt>, to <tt class="literal">X</tt> and
a new clip, <tt class="literal">B</tt>, to <tt class="literal">Y</tt>:</p>


<blockquote><pre class="code">x.attachMovie("A", "A", 0);
y.attachMovie("B", "B", 0);</pre></blockquote>


<p>In our scenario, the clips would appear from top to bottom in this
order: <tt class="literal">A</tt>, <tt class="literal">X</tt>,
<tt class="literal">B</tt>, <tt class="literal">Y</tt>, as shown in <a href="ch13_04.htm">Figure 13-1</a>.</p>


<a name="ch13-64074" /><div class="figure"><img alt="Figure 13-1" src="figs/act.1301.gif" /></div><h4 class="objtitle">Figure 13-1. A sample instance stack</h4>

<p>Once a clip is generated, it too provides a separate space above its
content for more programmatically generated clips. That is, we may
attach clips to attached clips.</p>


<p>Clips attached to the <tt class="literal">_root</tt> movie of a Flash
document are placed in the <tt class="literal">_root</tt> movie's
programmatically generated clip stack, which appears in front of
<em class="emphasis">all</em> clips in the <tt class="literal">_root</tt> movie,
even those that contain programmatically generated content.</p>


<p>Let's extend our earlier example. If we were to attach clip
<tt class="literal">C</tt> to the <tt class="literal">_root</tt> of the movie
that contained clips <tt class="literal">X</tt>, <tt class="literal">Y</tt>,
<tt class="literal">A,</tt> and <tt class="literal">B</tt>, then clip
<tt class="literal">C</tt> would appear in front of all the other clips.
<a href="ch13_04.htm">Figure 13-2</a> shows the extended structure.</p>


<a name="ch13-97771" /><div class="figure"><img alt="Figure 13-2" src="figs/act.1302.gif" /></div><h4 class="objtitle">Figure 13-2. An instance stack showing a clip attached to _root</h4>
</div>



<a name="ch13-26859" /><div class="sect3">
<h3 class="sect3">13.4.2.2. How clips generated via duplicateMovieClip( ) are added to the stack</h3>


<p>Each
<a name="INDEX-1662" />
<a name="INDEX-1663" />instance duplicated
via <em class="filename">duplicateMovieClip( )</em> is assigned to a
programmatic stack in accordance with how that instance's
<a name="INDEX-1664" /> <a name="INDEX-1665" />seed clip was created:</p>


<ul><li><p>If the instance's seed clip was created manually (or was
duplicated using <em class="filename">duplicateMovieClip( )</em> from a
clip that was created manually), then the new instance is placed in
the stack above <tt class="literal">_root</tt>.</p></li><li><p>If, on the other hand, the instance's seed clip was created
with <em class="filename">attachMovie( )</em>, then the new instance is
placed in its seed clip's stack.</p></li></ul>
<p>Let's return to our example to see how this works. If we create
clip <tt class="literal">D</tt> by duplicating clip <tt class="literal">X</tt>
(which was created manually), then clip <tt class="literal">D</tt> is
placed in the stack above <tt class="literal">_root</tt>, with clip
<tt class="literal">C</tt>. Similarly, if we create clip
<tt class="literal">E</tt> by duplicating clip <tt class="literal">D</tt> (which
is derived from clip <tt class="literal">X</tt>, which was created
manually), then <tt class="literal">E</tt> is also placed in the stack
above <tt class="literal">_root</tt>, with <tt class="literal">C</tt> and
<tt class="literal">D</tt>. <em class="emphasis">But</em> if we create clip
<tt class="literal">F</tt> by duplicating clip <tt class="literal">A</tt> (which
was created with <em class="filename">attachMovie( )</em> ), then
<tt class="literal">F</tt> is placed in the stack above
<tt class="literal">X</tt>, with clip <tt class="literal">A</tt>. <a href="ch13_04.htm">Figure 13-3</a> is worth a thousand words.</p>


<a name="ch13-21598" /><div class="figure"><img alt="Figure 13-3" src="figs/act.1303.gif" /></div><h4 class="objtitle">Figure 13-3. An instance stack showing various duplicated clips</h4>
</div>



<a name="ch13-21-fm2xml" /><div class="sect3">
<h3 class="sect3">13.4.2.3. Assigning depths to instances in the programmatically generated clip stack</h3>


<p>You <a name="INDEX-1666" />
<a name="INDEX-1667" />may be wondering what determines the
stacking order of clips <tt class="literal">C</tt>, <tt class="literal">D</tt>,
and <tt class="literal">E</tt>, or of clips <tt class="literal">A</tt> and
<tt class="literal">F</tt> in <a href="ch13_04.htm">Figure 13-3</a>. The stacking
order of a programmatically generated clip is determined by the
<em class="replaceable">depth</em> argument passed to the
<em class="filename">attachMovie( )</em> or <em class="filename">duplicateMovieClip(
)</em> function, and can be changed at any time using the
<em class="emphasis">swapDepths( )</em> function. Each programmatically
generated clip's <em class="replaceable">depth</em> (sometimes
called its <em class="emphasis">z-index</em>) determines its position
within a particular stack of programmatically generated clips.</p>


<p>The <em class="replaceable">depth</em> of a clip may be any integer and
is measured from the bottom up, so -1 is lower than 0; 1 is higher
than (i.e., in front of) depth 0; depth 2 is higher still, and so on.
When two programmatically generated clips occupy the same position on
screen, the one with the <em class="emphasis">greater</em>
<em class="replaceable">depth</em> value is rendered in front of the
other.</p>


<p>Layers are single-occupant dwellings. Only one clip may occupy a
layer in the stack at a time -- placing a clip into an occupied
layer displaces (and deletes) the layer's previous occupant.</p>


<p>It's okay for there to be gaps in the depths of clips; you can
have a clip at depth 0, another at depth 500, and a third one at
depth 1000. There's no performance hit or increase in memory
consumption that results from having gaps in
<a name="INDEX-1668" /> <a name="INDEX-1669" />your <a name="INDEX-1670" />depth assignments.</p>
</div>
</div>




<a name="ch13-22-fm2xml" /><div class="sect2">
<h3 class="sect2">13.4.3. The .swf Document "_level" Stack</h3>


<p>In <a name="INDEX-1671" /> <a name="INDEX-1672" /> <a name="INDEX-1673" />
<a name="INDEX-1674" />addition
<a name="INDEX-1675" />
<a name="INDEX-1676" /> <a name="INDEX-1677" /> <a name="INDEX-1678" />to
<a name="INDEX-1679" />the
internal layer stack and the programmatically generated clip stack,
there's a third (and final) kind of stack, the
<em class="emphasis">document stack</em> (or <em class="emphasis">level
stack</em>), which governs the overlapping not of instances,
but of entire <em class="filename">.swf</em> files loaded into the Player
via <em class="filename">loadMovie( )</em>.</p>


<p>The first <em class="filename">.swf</em> file loaded into the Flash Player
is placed in the lowest level of the document stack (represented by
the global property <tt class="literal">_level0</tt>). If we load any
additional <em class="filename">.swf</em> files into the Player after that
first document, we may optionally place them in front of the original
document by assigning them to a level above
<tt class="literal">_level0</tt> in the document stack. All of the content
in the higher-level documents in the level stack appears in front of
lower-level documents, regardless of the movie clip stacking order
within each document.</p>


<p>Just as the programmatically generated clip stack allows only one
clip per layer, the document stack allows only one document per
level. If we load a <em class="filename">.swf</em> file into an occupied
level, the level's previous occupant is replaced by the newly
loaded document. For example, you can supplant the original document
by loading a new <em class="filename">.swf</em> file into
<tt class="literal">_level0</tt>. Loading a new <em class="filename">.swf</em>
file into <tt class="literal">_level1</tt> would visually obscure the movie
in <tt class="literal">_level0</tt>, but not remove it from the Player.</p>


<p><a href="ch13_04.htm">Figure 13-4</a> summarizes the relationships of the
various stacks maintained by the Flash Player.</p>


<a name="ch13-68433" /><div class="figure"><img alt="Figure 13-4" src="figs/act.1304.gif" /></div><h4 class="objtitle">Figure 13-4. The complete Flash Player movie clip stack</h4>
</div>




<a name="ch13-23-fm2xml" /><div class="sect2">
<h3 class="sect2">13.4.4. Stacks and Order of Execution</h3>


<p>The <a name="INDEX-1680" />layering of movie clips and timeline
layers affects code <a name="INDEX-1681" />execution order. The rules are as
follows:</p>


<ul><li><p>Code on frames in different timeline layers always executes from top
to bottom.</p></li><li><p>When manually created instances are initially loaded, code in their
timeline and <em class="emphasis">load</em> event handlers executes
according to the Load Order set in the Publish Settings of a Flash
document -- either Bottom Up, which is the default, or Top Down.</p>

<p>For example, suppose we have a timeline with two layers,
<em class="filename">top</em> and <em class="filename">bottom</em>, where
<em class="filename">top</em> is above <em class="filename">bottom</em> in the
layer stack. We place clip <tt class="literal">X</tt> on layer
<em class="filename">top</em> and clip <tt class="literal">Y</tt> on layer
<em class="filename">bottom</em>. If the Load Order of the document is set
to Bottom Up, then the code in clip <tt class="literal">Y</tt> will execute
before the code in clip <tt class="literal">X</tt>. If, on the other hand,
the Load Order of the document is set to Top Down, then the code in
clip <tt class="literal">X</tt> will execute before the code in clip
<tt class="literal">Y</tt>. This execution order applies
<em class="emphasis">only</em> to the frame on which <tt class="literal">X</tt>
and <tt class="literal">Y</tt> appear for the first time.</p>


<li><p>Once loaded, all instances of a movie are added to an execution
order, which is the reverse of the load order; the last instance
added to the movie is always the first to have its code executed.</p></li></ul>
<p>Use caution when relying on these rules. Layers are mutable, so you
should avoid producing code that relies on their relative position.
Strive to create code that executes safely without relying on the
execution order of the clips in the stack. We can avoid some of the
issues presented by the execution stack by keeping all our code on a
<em class="filename">scripts</em> layer at the top of each code-bearing
<a name="INDEX-1682" />
<a name="INDEX-1683" />timeline.</p>
</li>
</ul>

</div>

<hr width="684" align="left" />
<div class="navbar"><table width="684" border="0"><tr><td align="left" valign="top" width="228"><a href="ch13_03.htm"><img alt="Previous" border="0" src="../gifs/txtpreva.gif" /></a></td><td align="center" valign="top" width="228"><a href="index.htm"><img alt="Home" border="0" src="../gifs/txthome.gif" /></a></td><td align="right" valign="top" width="228"><a href="ch13_05.htm"><img alt="Next" border="0" src="../gifs/txtnexta.gif" /></a></td></tr><tr><td align="left" valign="top" width="228">13.3. Creating Movie Clips</td><td align="center" valign="top" width="228"><a href="index/index.htm"><img alt="Book Index" border="0" src="../gifs/index.gif" /></a></td><td align="right" valign="top" width="228">13.5. Referring to Instances and Main Movies</td></tr></table></div>
<hr width="684" align="left" />

<img alt="Library Navigation Links" border="0" src="../gifs/navbar.gif" usemap="#library-map" />
<p><font size="-1"><a href="copyrght.htm">Copyright &copy; 2002</a> O'Reilly &amp; Associates. All rights reserved.</font></p>

<map name="library-map"><area href="../index.htm" coords="0,1,78,93" shape="rect" /><area href="../wdesign/index.htm" coords="80,2,155,96" shape="rect" /><area href="../xhtml/index.htm" coords="158,0,263,97" shape="rect" /><area href="../audio/index.htm" coords="265,1,335,97" shape="rect" /><area href="../css/index.htm" coords="338,1,434,93" shape="rect" /><area href="index.htm" coords="439,0,540,102" shape="rect" /><area href="../infoarch/index.htm" coords="544,0,685,102" shape="rect" /></map>

</body></html>
