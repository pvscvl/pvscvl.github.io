<html><head><title>The Comparison Operators (ActionScript: The Definitive Guide)</title><link rel="stylesheet" type="text/css" href="../style/style1.css" />

<meta name="DC.Creator" content="Colin Moock" /><meta name="DC.Format" content="text/xml" scheme="MIME" /><meta name="DC.Language" content="en-US" /><meta name="DC.Publisher" content="O'Reilly &amp; Associates, Inc." /><meta name="DC.Source" scheme="ISBN" content="1565928520L" /><meta name="DC.Subject.Keyword" content="stuff" /><meta name="DC.Title" content="ActionScript: The Definitive Guide" /><meta name="DC.Type" content="Text.Monograph" />

</head><body bgcolor="#ffffff">

<img alt="Book Home" border="0" src="gifs/smbanner.gif" usemap="#banner-map" /><map name="banner-map"><area shape="rect" coords="1,-2,616,66" href="index.htm" alt="ActionScript: The Definitive Guide" /><area shape="rect" coords="629,-11,726,25" href="jobjects/fsearch.htm" alt="Search this book" /></map>

<div class="navbar"><table width="684" border="0"><tr><td align="left" valign="top" width="228"><a href="ch05_04.htm"><img alt="Previous" border="0" src="../gifs/txtpreva.gif" /></a></td><td align="center" valign="top" width="228"><a href="index.htm">ActionScript: The Definitive Guide</a></td><td align="right" valign="top" width="228"><a href="ch05_06.htm"><img alt="Next" border="0" src="../gifs/txtnexta.gif" /></a></td></tr></table></div>
<hr width="684" align="left" />


<h2 class="sect1">5.5. The Comparison Operators</h2>


<p>The <em class="emphasis">comparison</em><a name="INDEX-747" /> operators (also called
<em class="emphasis">relational</em><a name="INDEX-748" />
operators) are used to determine which of two values appears first in
a given order. Like the equality and inequality operators, the
comparison operators return one of the Boolean values
<tt class="literal">true</tt> or <tt class="literal">false</tt> indicating
whether the relationship described in the comparison is accurate
(<tt class="literal">true</tt>) or inaccurate (<tt class="literal">false</tt>).</p>


<p>Comparison operators work only with <a name="INDEX-749" />strings
and <a name="INDEX-750" />numbers.
When the two operands of a comparison operator are numbers, the
comparison is performed mathematically: <em class="emphasis">5 &lt;
10</em> is <tt class="literal">true</tt>,<em class="emphasis"> -3 &lt; -6
</em>is <tt class="literal">false</tt>, and so on. When the two
operands of a comparison operator are strings, the comparison is
performed according to character code points, as shown in <a href="appb_01.htm">Appendix B, "Latin 1 Character Repertoire and Keycodes"</a>. See <a href="ch04_06.htm">Section 4.6.2, "Comparing Strings"</a> in
<a href="ch04_01.htm">Chapter 4, "Primitive Datatypes"</a> for details on string comparisons.</p>


<p>The interpreter will attempt to convert any nonstring or nonnumeric
data value used in a comparison operation to the
<em class="emphasis">string</em> or <em class="emphasis">number</em> type.
We'll consider the effect of datatype conversions on comparison
operations after we discuss the comparison operators themselves.</p>


<a name="ch05-28-fm2xml" /><div class="sect2">
<h3 class="sect2">5.5.1. The Less-Than Operator</h3>


<p>The <a name="INDEX-751" /> <a name="INDEX-752" /><em class="emphasis">less-than</em>
operator takes the general form:</p>


<blockquote><pre class="code"><em class="replaceable">operand1</em><em class="emphasis"> &lt; </em><em class="replaceable">operand2</em></pre></blockquote>


<p>If the operands are numeric, the less-than operator returns the
Boolean <tt class="literal">true</tt> if
<em class="replaceable">operand1</em> is mathematically smaller than
<em class="replaceable">operand2</em>:</p>


<blockquote><pre class="code">5 &lt; 6        // true
5 &lt; 5        // false; they are equal, but 5 is not less than 5
-3 &lt; -6      // false; -3 is larger than -6
-6 &lt; -3      // true;  -6 is smaller than -3</pre></blockquote>


<p>If the operands are strings, the less-than operator returns
<tt class="literal">true</tt> if <em class="replaceable">operand1</em> comes
"alphabetically" before
<em class="replaceable">operand2</em> (see <a href="appb_01.htm">Appendix B, "Latin 1 Character Repertoire and Keycodes"</a>); otherwise, returns <tt class="literal">false</tt>:</p>


<blockquote><pre class="code">"a" &lt; "z"         // true; lowercase "a" comes before lowercase "z"
"A" &lt; "a"         // true; uppercase letters come before lowercase
"Z" &lt; "a"         // true; uppercase letters come before lowercase
"hello" &lt; "hi"    // true; "e" is less than "i"</pre></blockquote>
</div>




<a name="ch05-29-fm2xml" /><div class="sect2">
<h3 class="sect2">5.5.2. The Greater-Than Operator</h3>


<p>The <a name="INDEX-753" /> <a name="INDEX-754" /><em class="emphasis">greater-than</em>
operator takes the general form:</p>


<blockquote><pre class="code"><em class="replaceable">operand1</em><em class="emphasis"> &gt; </em><em class="replaceable">operand2</em></pre></blockquote>


<p>If the operands are numeric, the greater-than operator returns the
Boolean <tt class="literal">true</tt> if
<em class="replaceable">operand1</em> is mathematically larger than
<em class="replaceable">operand2</em>:</p>


<blockquote><pre class="code">5 &gt; 6        // false
5 &gt; 5        // false; they are equal, but 5 is not greater than 5
-3 &gt; -6      // true; -3 is greater than -6.
-6 &gt; -3      // false; -6 is not greater than -3.</pre></blockquote>


<p>If the operands are strings, the greater-than operator returns
<tt class="literal">true</tt> if <em class="replaceable">operand1</em> comes
"alphabetically" after
<em class="replaceable">operand2</em> (see <a href="appb_01.htm">Appendix B, "Latin 1 Character Repertoire and Keycodes"</a>); otherwise, returns <tt class="literal">false</tt>:</p>


<blockquote><pre class="code">"a" &gt; "z"         // false; lowercase "a" comes before lowercase "z"
"A" &gt; "a"         // false; uppercase letters don't come after lowercase
"Z" &gt; "a"         // false; uppercase letters don't come after lowercase
"hello" &gt; "hi"    // false; "e" is less than "i"</pre></blockquote>
</div>




<a name="ch05-30-fm2xml" /><div class="sect2">
<h3 class="sect2">5.5.3. The Less-Than-or-Equal-to Operator</h3>


<p>The <a name="INDEX-755" /> <a name="INDEX-756" /><em class="emphasis">less-than-or-equal-to</em>
operator takes the general form:</p>


<blockquote><pre class="code"><em class="replaceable">operand1</em><em class="emphasis"> &lt;= </em><em class="replaceable">operand2</em></pre></blockquote>


<p>If the operands are numeric, the less-than-or-equal-to operator
returns the Boolean <tt class="literal">true</tt> if
<em class="replaceable">operand1</em> is mathematically smaller than or
equal to <em class="replaceable">operand2</em>:</p>


<blockquote><pre class="code">5 &lt;= 6       // true
5 &lt;= 5       // true; note the difference from 5 &lt; 5
-3 &lt;= -6     // false
-6 &lt;= -3     // true</pre></blockquote>


<p>If the operands are strings, this operator returns
<tt class="literal">true</tt> if <em class="replaceable">operand1</em> comes
"alphabetically" before
<em class="replaceable">operand2</em> or if the operands are identical
according to the rules described under <a href="ch04_06.htm">Section 4.6.2, "Comparing Strings"</a> in <a href="ch04_01.htm">Chapter 4, "Primitive Datatypes"</a>;
otherwise, it returns <tt class="literal">false</tt>:</p>


<blockquote><pre class="code">"a" &lt;= "z"        // true; lowercase "a" comes before lowercase "z"
"A" &lt;= "a"        // true; although not equal, "A" comes before "a"
"Z" &lt;= "a"        // true; uppercase letters come before lowercase
"hello" &lt;= "hi"   // true; "e" is less than "i"</pre></blockquote>


<p>Note that the <tt class="literal">&lt;=</tt> operator is written with the
equal sign after the less-than sign. The following is not a valid
operator: <tt class="literal">=&lt;</tt>.</p>
</div>




<a name="ch05-31-fm2xml" /><div class="sect2">
<h3 class="sect2">5.5.4. The Greater-Than-or-Equal-to Operator</h3>


<p>The <a name="INDEX-757" /> <a name="INDEX-758" /><em class="emphasis">greater-than-or-equal-to</em>
operator takes the general form:</p>


<blockquote><pre class="code">operand1 &gt;= operand2</pre></blockquote>


<p>If the operands are numeric, the greater-than-or-equal-to operator
returns the Boolean <tt class="literal">true</tt> if
<em class="replaceable">operand1</em> is mathematically larger than or
equal to <em class="replaceable">operand2</em>:</p>


<blockquote><pre class="code">5 &gt;= 6       // false
5 &gt;= 5       // true; note the difference from 5 &gt; 5
-3 &gt;= -6     // true
-6 &gt;= -3     // false</pre></blockquote>


<p>If the operands are strings, this operator returns
<tt class="literal">true</tt> if <em class="replaceable">operand1</em> comes
"alphabetically" after
<em class="replaceable">operand2</em> or if the operands are identical
according to the rules described under <a href="ch04_06.htm">Section 4.6.2, "Comparing Strings"</a> in <a href="ch04_01.htm">Chapter 4, "Primitive Datatypes"</a>;
otherwise, it returns <tt class="literal">false</tt>:</p>


<blockquote><pre class="code">"a" &gt;= "z"        // false; lowercase "a" comes before lowercase "z"
"A" &gt;= "a"        // false; "A" comes before "a" and they are not equal
"Z" &gt;= "a"        // false; uppercase letters come before lowercase
"hello" &gt;= "hi"   // false: "e" is less than "i"</pre></blockquote>


<p>Note that the <tt class="literal">&gt;=</tt> operator is written with the
equal sign after the greater-than sign. The following is not a valid
operator: <tt class="literal">=&gt;</tt>.</p>
</div>




<a name="ch05-32-fm2xml" /><div class="sect2">
<h3 class="sect2">5.5.5. Comparison Operations and Datatype Conversion</h3>


<p>Most <a name="INDEX-759" />
<a name="INDEX-760" />of
<a name="INDEX-761" />the time, when
we're using comparison operators we're comparing numbers.
Type conversions instigated by the comparison operators, hence, favor
numbers. When the two operands of any comparison operator belong to
different datatypes, or when neither operand is a string or a number,
a type conversion is attempted according to the following steps:</p>


<ol><li><p>If both operands are numbers, compare the operands mathematically and
return the result. If either number is (or both numbers are)
<tt class="literal">NaN</tt>, the result of the comparison is
<tt class="literal">false</tt> except in the case of the != operator.</p></li><li><p>If both operands are strings, compare the operands alphabetically
using the code points shown in <a href="appb_01.htm">Appendix B, "Latin 1 Character Repertoire and Keycodes"</a> and
return the result.</p></li><li><p>If one operand is a number and the other is a string, convert the
string to a number and go back to step 1.</p></li><li><p>If either operand is a Boolean, <tt class="literal">null</tt>, or
<tt class="literal">undefined</tt>, convert the operand to a number and go
back to step 1.</p></li><li><p>If either operand is an object, invoke its <em class="filename">valueOf (
)</em> method to convert the object to a primitive value and go
back to step 1. If the <em class="filename">valueOf ( )</em> method fails
or does not return a primitive value, return
<tt class="literal">false</tt>.</p></li><li><p>Return <tt class="literal">false</tt>.</p></li></ol>
<p>Note that type conversions performed during a comparison do not alter
the original item's stored value or datatype. The results of
the temporary conversion are discarded once the expression has been
evaluated.</p>


<p>Here is a simple conversion example comparing two Booleans:</p>


<blockquote><pre class="code">false &lt; true      // true: 0 is less than 1</pre></blockquote>


<p>Comparison operators always convert composite datatypes to strings or
numbers for comparison. In the following example, because both
<tt class="literal">someObj</tt> and <tt class="literal">someOtherObj</tt> are
members of the Object class, their string value, "[object
Object]", is the same:</p>


<blockquote><pre class="code">someObj = new Object( );
someOtherObj = new Object( );
someObj &lt;= someOtherObj;    // true!</pre></blockquote>


<p>In the next example, even though "A" has the code point
65, converting "A" to a number yields
<tt class="literal">NaN</tt>, which means the whole expression yields
<tt class="literal">false</tt>. Use the <em class="filename">charCodeAt( )</em>
function to check a string's code <a name="INDEX-762" />point:</p>


<blockquote><pre class="code">"A" &lt;= 9999                // false 
"A".charCodeAt(0) &lt; 9999   // true</pre></blockquote>
<a name="INDEX-763" />
</div>


<hr width="684" align="left" />
<div class="navbar"><table width="684" border="0"><tr><td align="left" valign="top" width="228"><a href="ch05_04.htm"><img alt="Previous" border="0" src="../gifs/txtpreva.gif" /></a></td><td align="center" valign="top" width="228"><a href="index.htm"><img alt="Home" border="0" src="../gifs/txthome.gif" /></a></td><td align="right" valign="top" width="228"><a href="ch05_06.htm"><img alt="Next" border="0" src="../gifs/txtnexta.gif" /></a></td></tr><tr><td align="left" valign="top" width="228">5.4. The Equality and Inequality Operators</td><td align="center" valign="top" width="228"><a href="index/index.htm"><img alt="Book Index" border="0" src="../gifs/index.gif" /></a></td><td align="right" valign="top" width="228">5.6. The String Operators</td></tr></table></div>
<hr width="684" align="left" />

<img alt="Library Navigation Links" border="0" src="../gifs/navbar.gif" usemap="#library-map" />
<p><font size="-1"><a href="copyrght.htm">Copyright &copy; 2002</a> O'Reilly &amp; Associates. All rights reserved.</font></p>

<map name="library-map"><area href="../index.htm" coords="0,1,78,93" shape="rect" /><area href="../wdesign/index.htm" coords="80,2,155,96" shape="rect" /><area href="../xhtml/index.htm" coords="158,0,263,97" shape="rect" /><area href="../audio/index.htm" coords="265,1,335,97" shape="rect" /><area href="../css/index.htm" coords="338,1,434,93" shape="rect" /><area href="index.htm" coords="439,0,540,102" shape="rect" /><area href="../infoarch/index.htm" coords="544,0,685,102" shape="rect" /></map>

</body></html>