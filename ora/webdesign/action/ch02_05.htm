<html><head><title>Variable Scope (ActionScript: The Definitive Guide)</title><link rel="stylesheet" type="text/css" href="../style/style1.css" />

<meta name="DC.Creator" content="Colin Moock" /><meta name="DC.Format" content="text/xml" scheme="MIME" /><meta name="DC.Language" content="en-US" /><meta name="DC.Publisher" content="O'Reilly &amp; Associates, Inc." /><meta name="DC.Source" scheme="ISBN" content="1565928520L" /><meta name="DC.Subject.Keyword" content="stuff" /><meta name="DC.Title" content="ActionScript: The Definitive Guide" /><meta name="DC.Type" content="Text.Monograph" />

</head><body bgcolor="#ffffff">

<img alt="Book Home" border="0" src="gifs/smbanner.gif" usemap="#banner-map" /><map name="banner-map"><area shape="rect" coords="1,-2,616,66" href="index.htm" alt="ActionScript: The Definitive Guide" /><area shape="rect" coords="629,-11,726,25" href="jobjects/fsearch.htm" alt="Search this book" /></map>

<div class="navbar"><table width="684" border="0"><tr><td align="left" valign="top" width="228"><a href="ch02_04.htm"><img alt="Previous" border="0" src="../gifs/txtpreva.gif" /></a></td><td align="center" valign="top" width="228"><a href="index.htm">ActionScript: The Definitive Guide</a></td><td align="right" valign="top" width="228"><a href="ch02_06.htm"><img alt="Next" border="0" src="../gifs/txtnexta.gif" /></a></td></tr></table></div>
<hr width="684" align="left" />


<h2 class="sect1">2.5. Variable Scope</h2>


<p>Earlier <a name="INDEX-191" /> <a name="INDEX-192" />we
learned how to create variables and retrieve their values using
variables attached to a single frame of the main timeline of a Flash
document. When a document contains multiple frames and multiple movie
clip timelines, variable creation and value retrieval becomes a
little more complicated.</p>


<p>To <a name="INDEX-193" /> <a name="INDEX-194" /> <a name="INDEX-195" /> <a name="INDEX-196" />illustrate why, let's
consider several scenarios.</p>


<a name="ch02-13-fm2xml" /><div class="sect2">
<h3 class="sect2">2.5.1. Scenario 1</h3>


<p>Suppose we were to create a variable, <tt class="literal">x</tt>, in frame
1 of the main timeline. After creating <tt class="literal">x</tt>, we set
its value to 10:</p>


<blockquote><pre class="code">var x;
x = 10;</pre></blockquote>


<p>Then, in the next frame (frame 2), we attach the following code:</p>


<blockquote><pre class="code">trace(x);</pre></blockquote>


<p>When we play our movie, does anything appear in the Output window? We
created our variable in frame 1, but we're attempting to
retrieve its value in frame 2; does our variable still exist? Yes.</p>


<a name="ch02-15-fm2xml" /><blockquote><h4>TIP</h4>
<p>When you define a variable on a timeline, that variable is accessible
from all the other frames of that timeline.</p>

</blockquote>
</div>




<a name="ch02-16-fm2xml" /><div class="sect2">
<h3 class="sect2">2.5.2. Scenario 2</h3>


<p>Suppose we create and set <tt class="literal">x</tt> as we did in Scenario
1, but instead of placing the variable-setting code on frame 1
directly, we place it on a button in frame 1. Then, on frame 2, we
attach the same code as before:</p>


<blockquote><pre class="code">trace(x);</pre></blockquote>


<p>Does Scenario 2 also work? Yes. Because <tt class="literal">x</tt> is
attached to our button, and our button is attached to the main
timeline, our variable is indirectly attached to the main timeline.
We may, therefore, access the variable from frame 2 as we did before.</p>
</div>




<a name="ch02-17-fm2xml" /><div class="sect2">
<h3 class="sect2">2.5.3. Scenario 3</h3>


<p>Suppose we create a variable named <tt class="literal">secretPassword</tt>
on frame 1 of the main timeline. When the movie plays, the user must
guess the password in order to gain access to a special section of
the movie.</p>


<p>In addition to declaring <tt class="literal">secretPassword</tt> on frame
1, we create a function that compares the user's guess to the
real password. Here's our code:</p>


<blockquote><pre class="code">var secretPassword;
secretPassword = "yppah";

function checkPassword( ) {
  if (userPassword == secretPassword) {
    gotoAndStop("accessGranted");
  } else {
    gotoAndStop("accessDenied");
  }
}</pre></blockquote>


<p>Suppose we ask the user to enter her password on frame 30. She enters
a password into an input text field variable named
<tt class="literal">userPassword</tt>, which we compare to our
<tt class="literal">secretPassword</tt> variable using the
<em class="filename">checkPassword( )</em> function on frame 1. If our
password-checking code is defined on frame 1, but
<tt class="literal">userPassword</tt> isn't defined until frame 30,
does the <tt class="literal">userPassword</tt> variable exist when we call
our <em class="filename">checkPassword( )</em> function?</p>


<p>The answer, again, is yes. Even though
<tt class="literal">userPassword</tt> is defined on a later frame than our
<em class="filename">checkPassword( )</em> function, it is still part of
the same timeline.</p>



<a name="ch02-19-fm2xml" /><blockquote><h4>TIP</h4>
<p>Any variable declared on a timeline is available to all the scripts
of its timeline for as long as that timeline exists.</p>

</blockquote>
</div>




<a name="ch02-20-fm2xml" /><div class="sect2">
<h3 class="sect2">2.5.4. Variable Accessibility (Scope)</h3>


<p>The three scenarios presented earlier explore issues of
<em class="emphasis">scope</em>. A variable's scope describes when
and where the variable can be manipulated by the code in a movie. A
variable's scope defines its life span and its accessibility to
other blocks of code in our scripts. To determine a variable's
scope, we must answer two questions: (a) how long does the variable
exist? and (b) from where in our code can we set or retrieve the
variable's value?</p>


<p>In traditional programming, variables are often broken into two
general scope categories: <em class="emphasis">global</em> and
<em class="emphasis">local</em>. Variables that are accessible throughout
an entire program are called <em class="emphasis">global
variables</em><a name="INDEX-197" />
<a name="INDEX-198" />. Variables that are accessible only
to limited sections of a program are called <em class="emphasis">local
variables</em><a name="INDEX-199" />
<a name="INDEX-200" />.
Though Flash supports conventional local variables, it does not
support true global variables. Let's find out why.</p>
</div>




<a name="ch02-21-fm2xml" /><div class="sect2">
<h3 class="sect2">2.5.5. Movie Clip Variables</h3>


<p>As
<a name="INDEX-201" />
<a name="INDEX-202" />we saw in
the three earlier scenarios, a variable defined on a timeline is
available to all the scripts on that timeline -- from the first
frame to the last frame -- whether the variable is declared on a
frame or a button. But what happens if we have more than one timeline
in a movie, as described in Scenario 4?</p>


<a name="ch02-22-fm2xml" /><div class="sect3">
<h3 class="sect3">2.5.5.1. Scenario 4</h3>


<p>Suppose we have two basic geometric shapes, a square and a circle,
defined as movie clip symbols.</p>


<p>On frame 1 of the square clip symbol, we set the variable
<tt class="literal">x</tt> to 3:</p>


<blockquote><pre class="code">var x;
x = 3;</pre></blockquote>


<p>On frame 1 of the circle clip symbol, we set the variable
<tt class="literal">y</tt> to 4:</p>


<blockquote><pre class="code">var y;
y = 4;</pre></blockquote>


<p>We place instances of those clips on frame 1, layer 1 of the main
timeline of our movie and name our instances
<tt class="literal">square</tt> and <tt class="literal">circle</tt>.</p>


<p>First question: If we attach the following code to frame 1 of the
<em class="emphasis">main</em> movie timeline (upon which
<tt class="literal">square</tt> and <tt class="literal">circle</tt> have been
placed), what appears in the Output window? Here's the code:</p>


<blockquote><pre class="code">trace(x);
trace(y);</pre></blockquote>


<p>Answer: Nothing appears in the Output window. The variables
<tt class="literal">x</tt> and <tt class="literal">y</tt> are defined on the
timelines of our movie clips, <em class="emphasis">not</em> our main
timeline.</p>


<a name="ch02-24-fm2xml" /><blockquote><h4>TIP</h4>
<p>Variables attached to a movie clip timeline (like that of
<tt class="literal">square</tt> or <tt class="literal">circle</tt>) have scope
limited to that timeline. They are not directly accessible to scripts
on other timelines, such as our main movie timeline.</p>

</blockquote>

<p>Second question: If we were to place the <tt class="literal">trace(x)</tt>
and <tt class="literal">trace(y)</tt> statements on frame 1 of our
<tt class="literal">square</tt> movie clip instead of frame 1 of our main
movie timeline, what would appear in the Output window?</p>


<p>Answer: The value of <tt class="literal">x</tt>, which is 3, and nothing
else. The value of <tt class="literal">x</tt> is displayed because
<tt class="literal">x</tt> is defined on the timeline of
<tt class="literal">square</tt> and is therefore accessible to the
<em class="filename">trace( )</em> command, which also resides on that
timeline. But the value of <tt class="literal">y</tt>, which is 4,
doesn't appear in the Output window because
<tt class="literal">y</tt> is defined in <tt class="literal">circle</tt>, which
is a separate timeline.</p>


<p>You can now see why I said that ActionScript doesn't support
true <a name="INDEX-203" /> <a name="INDEX-204" />
<a name="INDEX-205" />global
variables. Global variables are variables that are accessible
throughout an entire program, but in Flash, a variable attached to an
individual timeline is directly accessible only to the scripts on
that timeline. Since all variables in Flash are defined on timelines,
no variable can be guaranteed to be directly accessible to
<em class="emphasis">all</em> the scripts in a movie. Hence, no variable
can legitimately be called <em class="emphasis">global</em>.</p>


<p>To prevent confusion, we refer to variables attached to timelines as
<em class="emphasis">timeline variables</em> or <em class="emphasis">movie clip
variables</em>. However, it is possible to simulate global
variables using the <em class="filename">Object</em> class. To create a
variable that is available on all timelines, use the following
statement:</p>


<blockquote><pre class="code">Object.prototype.<em class="replaceable">myGlobalVariable</em> = <em class="replaceable">myValue</em>;</pre></blockquote>


<p>For example:</p>


<blockquote><pre class="code">Object.prototype.msg = "Hello world";</pre></blockquote>


<p>This technique (and the reason it works) is discussed under <a href="ch12_05.htm">Section 12.5.4.4, "The end of the inheritance chain"</a> <a name="INDEX-206" /> <a name="INDEX-207" /> <a name="INDEX-208" /> <a name="INDEX-209" />in <a href="ch12_01.htm">Chapter 12, "Objects and Classes"</a>.</p>
</div>
</div>




<a name="ch02-64569" /><div class="sect2">
<h3 class="sect2">2.5.6. Accessing Variables on Different Timelines</h3>


<p>Even though <a name="INDEX-210" /> <a name="INDEX-211" /> <a name="INDEX-212" /> <a name="INDEX-213" />variables on one timeline are not
directly accessible to the scripts on other timelines, they are
indirectly accessible. To create, retrieve, or assign a variable on a
separate timeline, we use <em class="emphasis">dot syntax</em>, a standard
notation common to object-oriented programming languages such as
Java, C++, and JavaScript. Here's the generic dot syntax
phrasing we use to address a variable on a separate timeline:</p>


<blockquote><pre class="code"><em class="replaceable">movieClipInstanceName.variableName</em></pre></blockquote>


<p>That is, we refer to a variable on another timeline using the name of
the clip that contains the variable, followed by a dot, then the
variable name itself. In our earlier scenario, for example, from the
main timeline we would refer to the variable <tt class="literal">x</tt> in
the <tt class="literal">square</tt> clip as:</p>


<blockquote><pre class="code">square.x</pre></blockquote>


<p>Again, from the main timeline, we refer to the variable
<tt class="literal">y</tt> in the <tt class="literal">circle</tt> clip as:</p>


<blockquote><pre class="code">circle.y</pre></blockquote>


<p>We can use these references from our main movie timeline to assign
and retrieve variables in <tt class="literal">square</tt> like this:</p>


<blockquote><pre class="code">square.z = 5;       // Assign 5 to <em class="replaceable">z</em> in <em class="replaceable">square</em>
var mainZ;          // Create <em class="replaceable">mainZ</em> on the main timeline
mainZ = square.z;   // Assign <em class="replaceable">mainZ</em> the value of <em class="replaceable">z</em> in <em class="replaceable">square</em></pre></blockquote>


<p>However, with just the
<em class="replaceable">clip</em><tt class="literal">.</tt><em class="replaceable">variable</em>
syntax alone, we can't refer to variables in
<tt class="literal">square</tt> from our <tt class="literal">circle</tt> clip. If
we were to put a reference to <tt class="literal">square.x</tt> on a frame
in <tt class="literal">circle</tt>, the interpreter would try to find a
clip called <tt class="literal">square</tt> <em class="emphasis">inside</em> of
<tt class="literal">circle</tt>, but <tt class="literal">square</tt> lives on the
main timeline. So, we need a mechanism that lets us refer to the
timeline that contains the <tt class="literal">square</tt> clip (in this
case, the main timeline) from the <tt class="literal">circle</tt> clip.
That mechanism comes in the form of two special properties:
<tt class="literal">_root</tt> and <tt class="literal">_ parent</tt>.</p>


<a name="ch02-25-fm2xml" /><div class="sect3">
<h3 class="sect3">2.5.6.1. The _root and _ parent properties</h3>


<p>The <tt class="literal">_root</tt><a name="INDEX-214" /> <a name="INDEX-215" /> <a name="INDEX-216" /> property <a name="INDEX-217" />
<a name="INDEX-218" /> <a name="INDEX-219" /> <a name="INDEX-220" />
<a name="INDEX-221" />is a direct reference to the
main timeline of a movie. From any depth of nesting in a movie clip
structure, we can always address variables on the main movie timeline
using <tt class="literal">_root</tt>, like this:</p>


<blockquote><pre class="code">_root.mainZ       // Access the variable <em class="replaceable">mainZ</em> on the main timeline
_root.firstName   // Access the variable <em class="replaceable">firstName</em> on the main timeline</pre></blockquote>


<p>We can even combine a reference to <tt class="literal">_root</tt> with
references to movie clip instances, drilling down the nested
structure of a movie in the process. For example, we can address the
variable <tt class="literal">x</tt> inside the clip
<tt class="literal">square</tt> that resides on the main movie timeline,
as:</p>


<blockquote><pre class="code">_root.square.x</pre></blockquote>


<p>That reference works from anywhere in our movie, no matter what the
depth of clip nesting, because the reference starts at our main movie
timeline, <tt class="literal">_root</tt>. Here's another nested
example showing how to access the variable <tt class="literal">area</tt> in
the instance <tt class="literal">triangle</tt> that resides on the timeline
of the instance <tt class="literal">shapes</tt>:</p>


<blockquote><pre class="code">_root.shapes.triangle.area</pre></blockquote>


<p>Any reference to a variable that starts with the
<tt class="literal">_root</tt> keyword is called an <em class="emphasis">absolute
reference</em> because it describes the location of our
variable in relation to a fixed, immutable point in our movie: the
main timeline.</p>


<p>There are times, however, when we want to refer to variables on other
timelines without referring to the main timeline of a movie. To do
so, we use the <tt class="literal">_ parent</tt> property, which refers to
the timeline upon which the current movie clip instance resides. For
example, from code attached to a frame of the clip
<tt class="literal">square</tt>, we can refer to variables on the timeline
that <em class="emphasis">contains</em> <tt class="literal">square</tt> using
this syntax:</p>


<blockquote><pre class="code">_ parent.<em class="replaceable">myVariable</em></pre></blockquote>


<p>References that start with the keyword <tt class="literal">_ parent</tt>
are called <em class="emphasis">relative references</em> because they are
resolved <em class="emphasis">relative</em> to the location of the clip in
which they occur.</p>


<p>Returning to our earlier example, suppose we have a variable,
<tt class="literal">size</tt>, defined on the main timeline of a movie. We
place a clip instance named <tt class="literal">shapes</tt> on our main
movie timeline, and on the <tt class="literal">shapes</tt> timeline we
define the variable <tt class="literal">color</tt>. Also on the
<tt class="literal">shapes</tt> timeline, we place a clip named
<tt class="literal">triangle</tt>, as shown in <a href="ch02_05.htm">Figure 2-1</a>.</p>


<a name="ch02-71405" /><div class="figure"><img alt="Figure 2-1" src="figs/act.0201.gif" /></div><h4 class="objtitle">Figure 2-1. A sample movie clip hierarchy</h4>

<p>To display the value of the variable <tt class="literal">color</tt> (which
is in the <tt class="literal">shapes</tt> clip) from code attached to the
timeline of <tt class="literal">triangle</tt>, we could use an absolute
reference starting at the main timeline, like this:</p>


<blockquote><pre class="code">trace(_root.shapes.color);</pre></blockquote>


<p>But that ties our code to the main movie timeline. To make our code
more flexible, we could instead use the <tt class="literal">_ parent</tt>
property to create a relative reference, like this:</p>


<blockquote><pre class="code">trace(_ parent.color);</pre></blockquote>


<p>Our first approach (using <tt class="literal">_root</tt>) works from a
top-down perspective; it starts at the main timeline and descends
through the movie clip hierarchy until it reaches the
<tt class="literal">color</tt> variable. The second approach (using
<tt class="literal">_ parent</tt>) works from a bottom-up perspective; it
starts with the clip that contains the <em class="filename">trace( )</em>
statement (the <tt class="literal">triangle</tt> clip), then ascends one
level up the clip structure where it finds the
<tt class="literal">color</tt> variable.</p>


<p>We can use <tt class="literal">_ parent</tt> twice in a row to ascend the
hierarchy of clips and access our <tt class="literal">size</tt> variable on
the main timeline. Here we attach some code to
<tt class="literal">triangle</tt> that refers to <tt class="literal">size</tt> on
the main movie timeline:</p>


<blockquote><pre class="code">trace(_ parent._ parent.size);</pre></blockquote>


<p>Using the <tt class="literal">_ parent</tt> property twice in succession
takes us up two levels, which in this context brings us to the main
timeline of the movie.</p>


<p>Your approach to variable addressing will depend on what you want to
happen when you place instances of a movie clip symbol on various
timelines. In our <tt class="literal">triangle</tt> example, if we wanted
our reference to <tt class="literal">color</tt> to always point to
<tt class="literal">color</tt> as defined in the <tt class="literal">shapes</tt>
clip, then we would use the <tt class="literal">_root</tt> syntax, which
gives us a fixed reference to <tt class="literal">color</tt> in
<tt class="literal">shapes</tt>. But if we wanted our reference to
<tt class="literal">color</tt> to refer to a different
<tt class="literal">color</tt> variable, depending on which timeline held a
given <tt class="literal">triangle</tt> instance, we would use
<a name="INDEX-222" /> <a name="INDEX-223" /> <a name="INDEX-224" />the <tt class="literal">_ parent</tt>
<a name="INDEX-225" />
<a name="INDEX-226" />
<a name="INDEX-227" />
<a name="INDEX-228" />
<a name="INDEX-229" />syntax.</p>
</div>



<a name="ch02-26-fm2xml" /><div class="sect3">
<h3 class="sect3">2.5.6.2. Accessing variables on different document levels</h3>


<p>The <tt class="literal">_root</tt> property
<a name="INDEX-230" /> <a name="INDEX-231" />
<a name="INDEX-232" /> <a name="INDEX-233" />refers
<a name="INDEX-234" />to the main movie timeline of the current
level (i.e., the current document), but the Flash Player can
accommodate multiple documents in its <em class="emphasis">document
stack</em>. The main timeline of any movie loaded in the Player
document stack may be referenced using
<tt class="literal">_level</tt><em class="replaceable">n</em>, where
<em class="replaceable">n</em> is the level number on which the movie
resides. Level numbers start with 0, such as
<tt class="literal">_level0</tt>, <tt class="literal">_level1</tt>,
<tt class="literal">_level2</tt>, <tt class="literal">_level3</tt>, and so on.
For information on loading multiple movies, see <a href="ch13_01.htm">Chapter 13, "Movie Clips"</a>. Here are some examples showing multiple-level
variable addressing:</p>


<blockquote><pre class="code">_level1.firstName         // <em class="replaceable">firstName</em> on level1's main timeline
_level4.ball.area         // <em class="replaceable">area</em> in <em class="replaceable">ball</em> clip on level4's main timeline
_level0.guestBook.email   // <em class="replaceable">email</em> in <em class="replaceable">guestBook</em> clip on level0's timeline</pre></blockquote>

<a name="ch02-27-fm2xml" /><blockquote><h4>WARNING</h4>
<p>When addressing variables across movie clip instance timelines using
dot syntax, make sure that you have named your clip instances on the
Stage and entered the names correctly when referring to them in your
code. If your instances are not named, your code will not work even
if it is otherwise syntactically correct. Unnamed instances and
misspelled instance names are extremely common sources of problems.</p>

</blockquote>
</div>



<a name="ch02-28-fm2xml" /><div class="sect3">
<h3 class="sect3">2.5.6.3. Flash 4 versus Flash 5 variable access syntax</h3>


<p>The <a name="INDEX-235" />
<a name="INDEX-236" />Flash 4-style slash-colon
constructions such as <tt class="literal">/square:area</tt> have been
superseded by Flash 5's dot syntax, a much more convenient way
to refer to variables and timelines. The old syntax is deprecated and
no longer recommended. <a href="ch02_05.htm">Table 2-1</a> shows
equivalencies between Flash 4 and Flash 5 syntax when addressing
variables. See <a href="appc_01.htm">Appendix C, "Backward Compatibility"</a>, for other syntactical
differences.</p>


<a name="ch02-59297" /><h4 class="objtitle">Table 2-1. Flash 4 Versus Flash 5 Variable Addressing Syntax </h4><table border="1">




<tr>
<th>
<p>Flash 4 Syntax</p></th>
<th>
<p>Flash 5 Syntax</p></th>
<th>
<p>Refers to . . .</p></th>
</tr>




<tr>
<td>
<blockquote><pre class="code">/</pre></blockquote></td>
<td>
<blockquote><pre class="code">_root</pre></blockquote></td>
<td>
<p>Movie's main timeline</p></td>
</tr>

<tr>
<td>
<blockquote><pre class="code">/:x</pre></blockquote></td>
<td>
<blockquote><pre class="code">_root.x</pre></blockquote></td>
<td>
<p>Variable <tt class="literal">x</tt> on movie's main timeline</p></td>
</tr>

<tr>
<td>
<blockquote><pre class="code">/clip1:x</pre></blockquote></td>
<td>
<blockquote><pre class="code">_root.clip1.x</pre></blockquote></td>
<td>
<p>Variable <tt class="literal">x</tt> in instance <tt class="literal">clip1</tt> on
movie's main timeline</p></td>
</tr>

<tr>
<td>
<blockquote><pre class="code">/clip1/clip2:x</pre></blockquote></td>
<td>
<blockquote><pre class="code">_root.clip1.clip2.x</pre></blockquote></td>
<td>
<p>Variable <tt class="literal">x</tt> in instance <tt class="literal">clip2</tt>
within instance <tt class="literal">clip1</tt> within the main movie
timeline</p></td>
</tr>

<tr>
<td>
<blockquote><pre class="code">../</pre></blockquote></td>
<td>
<blockquote><pre class="code">_ parent</pre></blockquote></td>
<td>
<p>Timeline upon which the current clip resides (one level up from
current clip timeline)
<a href="#FOOTNOTE-1">[1]</a>
</p></td>
</tr>

<tr>
<td>
<blockquote><pre class="code">../:x</pre></blockquote></td>
<td>
<blockquote><pre class="code">_ parent.x</pre></blockquote></td>
<td>
<p>Variable <tt class="literal">x</tt> on timeline upon which the current clip
resides (one level up from current clip timeline)</p></td>
</tr>

<tr>
<td>
<blockquote><pre class="code">../../:x</pre></blockquote></td>
<td>
<blockquote><pre class="code">_ parent._ parent.x</pre></blockquote></td>
<td>
<p>Variable <tt class="literal">x</tt> on timeline that contains the clip that
contains the current clip (two levels up from current clip timeline)</p></td>
</tr>

<tr>
<td>
<blockquote><pre class="code">clip1:x</pre></blockquote></td>
<td>
<blockquote><pre class="code">clip1.x</pre></blockquote></td>
<td>
<p>Variable <tt class="literal">x</tt> in instance <tt class="literal">clip1</tt>,
where <tt class="literal">clip1</tt> resides on the current timeline</p></td>
</tr>

<tr>
<td>
<blockquote><pre class="code">clip1/clip2:x</pre></blockquote></td>
<td>
<blockquote><pre class="code">clip1.clip2.x</pre></blockquote></td>
<td>
<p>Variable <tt class="literal">x</tt> in instance <tt class="literal">clip2</tt>,
where <tt class="literal">clip2</tt> resides within
<tt class="literal">clip1</tt>, which, in turn, resides on current timeline</p></td>
</tr>

<tr>
<td>
<blockquote><pre class="code">_level1:x</pre></blockquote></td>
<td>
<blockquote><pre class="code">_level1.x</pre></blockquote></td>
<td>
<p>Variable <tt class="literal">x</tt> on the main timeline of a movie loaded
onto level 1</p></td>
</tr>

<tr>
<td>
<blockquote><pre class="code">_level2:x</pre></blockquote></td>
<td>
<blockquote><pre class="code">_level2.x</pre></blockquote></td>
<td>
<p>Variable <tt class="literal">x</tt> on the main timeline of a movie loaded
onto <a name="INDEX-237" />
<a name="INDEX-238" />
<a name="INDEX-239" />
<a name="INDEX-240" />level
2</p></td>
</tr>


</table>

<blockquote class="footnote">
<a name="FOOTNOTE-1" /><p>[1]
The "current clip timeline" is the timeline that
contains the code with the variable reference.</p>
</blockquote>
</div>
</div>




<a name="ch02-29-fm2xml" /><div class="sect2">
<h3 class="sect2">2.5.7. Movie Clip Variable Life Span</h3>


<p>Earlier, <a name="INDEX-241" />
<a name="INDEX-242" />we said that the scope of a variable
answers two questions: (a) how long does the variable exist? and (b)
from where in our code can we set or retrieve the variable's
value? For movie clip variables, we now know the factors involved in
answering the second question. But we skipped answering the first
question. Let's return to it now with one final variable-coding
scenario.</p>


<a name="ch02-30-fm2xml" /><div class="sect3">
<h3 class="sect3">2.5.7.1. Scenario 5</h3>


<p>Suppose we create a new movie with two keyframes. On frame 1, we
place a clip instance, <tt class="literal">ball</tt>. On the
<tt class="literal">ball</tt> timeline, we create a variable,
<tt class="literal">radius</tt>. Frame 2 of our main timeline is blank (the
<tt class="literal">ball</tt> instance is not present there).</p>


<p>From frame 1 of the main movie timeline, we can find out the value of
<tt class="literal">radius</tt> using this code:</p>


<blockquote><pre class="code">trace(ball.radius);</pre></blockquote>


<p>Now the question: If we move that line of code from frame 1 to frame
2 of the main timeline, what appears in the Output window when our
movie plays?</p>


<p>Answer: Nothing appears. When the <tt class="literal">ball</tt> clip is
removed from the main timeline on frame 2, all its variables are
destroyed in the process.</p>


<a name="ch02-32-fm2xml" /><blockquote><h4>TIP</h4>
<p>Movie clip variables last only while the clip in which they reside is
present on stage. Variables defined on the main timeline of a Flash
document persist within each document but are lost if the document is
unloaded from the Player (either via the
<em class="filename">unloadMov</em><em class="emphasis">ie( )</em> function or
because another movie is loaded into the movie's level).</p>

</blockquote>

<p>A variable's life span is important when scripting movies that
contain movie clips placed across multiple frames on various
timelines. Always make sure that any clip you're addressing is
present on a timeline before you try to use the variables in that
clip.</p>
</div>
</div>




<a name="ch02-33-fm2xml" /><div class="sect2">
<h3 class="sect2">2.5.8. Local Variables</h3>


<p>Movie <a name="INDEX-243" /> <a name="INDEX-244" />clip
<a name="INDEX-245" />variables are scoped to movie
clips and persist as long as the movie clip on which they are defined
exists. Sometimes, that's longer than we need them to live. For
situations in which we need a variable only temporarily, ActionScript
offers variables with <em class="emphasis">local</em> scope (i.e., local
variables), which live for a much shorter time than normal movie clip
variables.</p>


<p>Local variables are used in functions and older Flash 4-style
subroutines. If you haven't worked with functions or
subroutines before, you can skip the rest of this section and come
back to it once you've read <a href="ch09_01.htm">Chapter 9, "Functions"</a>.</p>


<p>Functions often employ variables that are not needed outside the
function. For example, suppose we have a function that displays all
of the elements of a specified array:</p>


<blockquote><pre class="code">function displayElements(theArray) {
   var counter = 0;
   while(counter &lt; theArray.length) {
      trace("Element " + counter + ": " + theArray[counter]);
      counter++;
   }
}</pre></blockquote>


<p>The <tt class="literal">counter</tt> variable is required to display the
array but has no use thereafter. We could leave it defined on the
timeline, but that's bad form for two reasons: (a) if
<tt class="literal">counter</tt> persists, it takes up memory during the
rest of our movie; and (b) if <tt class="literal">counter</tt> is
accessible outside our function, it may conflict with other variables
named <tt class="literal">counter</tt>. We would, therefore, like
<tt class="literal">counter</tt> to die after the
<em class="filename">displayElements( )</em> function has finished.</p>


<p>To cause <tt class="literal">counter</tt> to be automatically deleted at
the end of our function, we define it as a <em class="emphasis">local
variable</em>. Unlike movie clip variables, local variables are
removed from memory (<em class="emphasis">deallocated </em>) automatically
by the
<a name="INDEX-246" />
<a name="INDEX-247" />interpreter when the function that
defines them finishes.</p>


<p>To specify that a variable should be local, declare it with the
<em class="filename">var</em><a name="INDEX-248" /> keyword from inside your function, as in
the preceding <em class="emphasis">displayElements( )</em> example.</p>


<p>Take heed though; when placed <em class="emphasis">outside</em> of a
function, the <em class="filename">var</em> statement creates a normal
timeline variable, not a local variable. As shown in <a href="ch02_05.htm">Example 2-4</a>, the location of the <em class="filename">var</em>
statement makes all the difference.</p>


<p>Variables within functions need not be local. We can create or change
a movie clip variable from inside a function by omitting the
<em class="filename">var</em> keyword. If we do not use the
<em class="filename">var</em> keyword, but instead simply assign a value
to a variable, Flash treats that variable as a nonlocal variable
under some conditions. Consider this variable assignment inside a
function:</p>


<blockquote><pre class="code">function setHeight( ){
   height = 10;
}</pre></blockquote>


<p>The effect of the statement <tt class="literal">height = 10;</tt> depends
on whether <tt class="literal">height</tt> is a local variable or movie
clip variable. If <tt class="literal">height</tt> is a previously declared
local variable (which it is not in the example at hand), the
statement <tt class="literal">height = 10;</tt> simply modifies the local
variable's value. If there is no local variable named
<tt class="literal">height</tt>, as is the case here, the interpreter
creates a movie clip (nonlocal) variable named
<tt class="literal">height</tt> and sets its value to 10. As a nonlocal
variable, <tt class="literal">height</tt> persists even after the function
finishes.</p>


<p><a href="ch02_05.htm">Example 2-4</a> demonstrates <a name="INDEX-249" />
<a name="INDEX-250" /> <a name="INDEX-251" />local and nonlocal variable usage.</p>


<a name="ch02-33617" /><div class="example">
<h4 class="objtitle">Example 2-4. Local and Nonlocal Variables </h4>

<blockquote><pre class="code">var x = 5;                         // New nonlocal variable, <em class="replaceable">x</em>, is now 5
function variableDemo( ){
   x = 10;                         // Nonlocal variable, <em class="replaceable">x</em>, is now 10
   y = 20;                         // New nonlocal variable, <em class="replaceable">y</em>, is now 20
   var z = 30;                     // New local variable, <em class="replaceable">z</em>, is now 30
   trace(x + "," + y + "," + z);   // Send variable values to Output window
}
variableDemo( );   // Call our function. Displays: 10,20,30
trace(x);         // Displays: 10 (reassignment in our function was permanent)
trace(y);         // Displays: 20 (nonlocal variable, <em class="replaceable">y</em>, still exists)
trace(z);         // Displays nothing (local variable, <em class="replaceable">z</em>, has expired)</pre></blockquote>
</div>


<p>Note that it is possible (though confusing and ill-advised) to have
both a local and a nonlocal variable that share the same name within
a script but have different scopes. <a href="ch02_05.htm">Example 2-5</a>
shows such a case.</p>


<a name="ch02-19549" /><div class="example">
<h4 class="objtitle">Example 2-5. Local and Nonlocal Variables with the Same Name </h4>

<blockquote><pre class="code">var myColor = "blue";
function hexRed( ){
   var myColor = "#FF0000";
   return myColor;
}
trace(hexRed( ));   // Displays: #FF0000 (the local variable <em class="replaceable">myColor</em>)
trace(myColor);    // Displays: "blue" (setting the local variable,
                   <a name="INDEX-252" />// <em class="replaceable">myColor</em>, to #FF0000 did not affect the nonlocal version)</pre></blockquote>
</div>


<a name="ch02-34-fm2xml" /><div class="sect3">
<h3 class="sect3">2.5.8.1. Local variables in subroutines</h3>


<p>Although functions are the preferred mechanism for producing portable
code modules, Flash 5 still supports Flash 4-style
<em class="emphasis">subroutines</em>. In <a name="INDEX-253" /> <a name="INDEX-254" />Flash 4, a subroutine could
be created by attaching a block of code to a frame with a label.
Later, the subroutine could be executed remotely via the
<em class="filename">Call</em> action. But in Flash 4, any variable
declared in a subroutine was nonlocal and persisted for the lifetime
of the timeline on which it was defined. In Flash 5, you can create
local variables in subroutines the same way we created them in
functions -- using the <em class="filename">var</em> statement.
However, variables defined with <em class="filename">var</em> in a
subroutine are created as local variables only when the subroutine is
executed via the <em class="filename">Call</em> function. If the script on
the subroutine frame is executed as a result of the playhead simply
entering the frame, the <em class="filename">var</em> statement declares a
normal timeline nonlocal variable. Regardless, the more modern
functions and local function variables should be used instead
<a name="INDEX-255" />
<a name="INDEX-256" />of
<a name="INDEX-257" />
<a name="INDEX-258" />subroutines.</p>
</div>
</div>


<hr width="684" align="left" />
<div class="navbar"><table width="684" border="0"><tr><td align="left" valign="top" width="228"><a href="ch02_04.htm"><img alt="Previous" border="0" src="../gifs/txtpreva.gif" /></a></td><td align="center" valign="top" width="228"><a href="index.htm"><img alt="Home" border="0" src="../gifs/txthome.gif" /></a></td><td align="right" valign="top" width="228"><a href="ch02_06.htm"><img alt="Next" border="0" src="../gifs/txtnexta.gif" /></a></td></tr><tr><td align="left" valign="top" width="228">2.4. Types of Values</td><td align="center" valign="top" width="228"><a href="index/index.htm"><img alt="Book Index" border="0" src="../gifs/index.gif" /></a></td><td align="right" valign="top" width="228">2.6. Some Applied Examples</td></tr></table></div>
<hr width="684" align="left" />

<img alt="Library Navigation Links" border="0" src="../gifs/navbar.gif" usemap="#library-map" />
<p><font size="-1"><a href="copyrght.htm">Copyright &copy; 2002</a> O'Reilly &amp; Associates. All rights reserved.</font></p>

<map name="library-map"><area href="../index.htm" coords="0,1,78,93" shape="rect" /><area href="../wdesign/index.htm" coords="80,2,155,96" shape="rect" /><area href="../xhtml/index.htm" coords="158,0,263,97" shape="rect" /><area href="../audio/index.htm" coords="265,1,335,97" shape="rect" /><area href="../css/index.htm" coords="338,1,434,93" shape="rect" /><area href="index.htm" coords="439,0,540,102" shape="rect" /><area href="../infoarch/index.htm" coords="544,0,685,102" shape="rect" /></map>

</body></html>
