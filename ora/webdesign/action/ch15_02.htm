<html><head><title>Bitwise Programming (ActionScript: The Definitive Guide)</title><link rel="stylesheet" type="text/css" href="../style/style1.css" />

<meta name="DC.Creator" content="Colin Moock" /><meta name="DC.Format" content="text/xml" scheme="MIME" /><meta name="DC.Language" content="en-US" /><meta name="DC.Publisher" content="O'Reilly &amp; Associates, Inc." /><meta name="DC.Source" scheme="ISBN" content="1565928520L" /><meta name="DC.Subject.Keyword" content="stuff" /><meta name="DC.Title" content="ActionScript: The Definitive Guide" /><meta name="DC.Type" content="Text.Monograph" />

</head><body bgcolor="#ffffff">

<img alt="Book Home" border="0" src="gifs/smbanner.gif" usemap="#banner-map" /><map name="banner-map"><area shape="rect" coords="1,-2,616,66" href="index.htm" alt="ActionScript: The Definitive Guide" /><area shape="rect" coords="629,-11,726,25" href="jobjects/fsearch.htm" alt="Search this book" /></map>

<div class="navbar"><table width="684" border="0"><tr><td align="left" valign="top" width="228"><a href="ch15_01.htm"><img alt="Previous" border="0" src="../gifs/txtpreva.gif" /></a></td><td align="center" valign="top" width="228"><a href="index.htm">ActionScript: The Definitive Guide</a></td><td align="right" valign="top" width="228"><a href="ch15_03.htm"><img alt="Next" border="0" src="../gifs/txtnexta.gif" /></a></td></tr></table></div>
<hr width="684" align="left" />


<h2 class="sect1">15.2. Bitwise Programming</h2>


<p>Switching <a name="INDEX-1974" /> <a name="INDEX-1975" />gears,
<a name="INDEX-1976" />let's examine an unrelated,
esoteric topic -- bitwise programming with bitwise operators. This
discussion was too obscure for <a href="ch05_01.htm">Chapter 5, "Operators"</a>, but
we'll cover it now for experienced programmers and braver
beginners.</p>


<p>In order to track and manipulate a series of options in a highly
optimized way, we can use the bitwise operators. Technically, the
bitwise operators are mathematical operators, but they're
typically used in a logical, not mathematical, context. Bitwise
operators can access the individual binary digits
(<em class="filename">bits</em><a name="INDEX-1977" />) in an integer. To understand how this
works, you need to know how numbers are represented in binary format.</p>


<p>A binary number is stored as a sequence of ones and zeros that
represent the number in the
<a name="INDEX-1978" />base-2 number system (i.e., the
<em class="emphasis">binary system</em>). Each column in a number
represents the base of the number system to some power. Binary uses
the number 2 as its base, so the first four columns of a binary
number represent, from right to left, the 1's column
(2<sup class="superscript">0</sup>), the 2's column
(2<sup class="superscript">1</sup>), the 4's column
(2<sup class="superscript">2</sup>), and the 8's column
(2<sup class="superscript">3</sup>). Here are some sample binary numbers
with explanations of how their column values can be used to calculate
their base-10 (decimal) equivalent:</p>


<blockquote><pre class="code">1     // The base-10 number  1: (1 x 1) is 1
10    // The base-10 number  2: (1 x 2) + (0 x 1) is 2
11    // The base-10 number  3: (1 x 2) + (1 x 1) is 3
100   // The base-10 number  4: (1 x 4) + (0 x 2) + (0 x 1) is 4
1000  // The base-10 number  8: (1 x 8) + (0 x 4) + (0 x 2) + (0 x 1) is 8
1001  // The base-10 number  9: (1 x 8) + (0 x 4) + (0 x 2) + (1 x 1) is 9</pre></blockquote>


<p>In binary, the <em class="emphasis">columns</em> we've been
discussing are referred to as <em class="emphasis">bits</em> (short for
"binary digit"). A <em class="emphasis">four-bit</em> number,
for example, is a number with four digits (each of which may contain
a one or a zero). The rightmost bit is considered bit 0; the bit to
its left is bit 1, and so on. Following is an 8-bit number with a 1
in bits 0, 6, and 7; the bits are labeled above the number:</p>


<blockquote><pre class="code">bit: 76543210
     11000001</pre></blockquote>


<p>As with all numbering systems, the largest value for a single digit
is one less than the base (also known as the
<em class="emphasis">radix</em>). For example, in base-10 (decimal), the
largest single digit is 9. Notice that because we're using 2 as
our base, each binary digit must be either a
or a 1. We know that the numbers 1 and
are equivalent to the Boolean values <tt class="literal">true</tt> and
<tt class="literal">false</tt>, so it is very convenient to use binary
numbers as a series of <em class="emphasis">on</em> and
<em class="emphasis">off</em> switches! That's precisely what the
bitwise operators let us do.</p>


<p>A <a name="INDEX-1979" />
<a name="INDEX-1980" />bit that has
the value 1 is said to be <em class="emphasis">set</em> (i.e., on or
<tt class="literal">true</tt>). A bit that has the value
is said to be <em class="filename">cleared</em> (i.e., off or
<tt class="literal">false</tt>). Each bit is sometimes thought of as a
<em class="filename">flag</em> or <em class="filename">switch</em>, which means
it indicates something that has two possible states (such as on/off
or true/false).</p>


<p>Bitwise programming nearly always involves situations in which a
series of properties can be turned on or off. Using bitwise
operators, we can concisely represent many options within a single
numeric value instead of using multiple variables. This provides
better performance and lower memory consumption.</p>


<p>Suppose we're building a Flash site that sells cars. For the
sake of simplicity, let's say there's only one kind of
car for sale, but users can customize their car with any combination
of four options: air-conditioning, a CD player, a sunroof, and
leather seats. It's the job of our Flash program to come up
with a total price for the car including all the options, and
it's the job of a server-side program to track that information
as part of the user's profile.</p>


<p>We could store the car's options with four separate Boolean
variables, like this:</p>


<blockquote><pre class="code">var hasAirCon = true;
var hasCD = true;
var hasSunRoof = true;
var hasLeather = true;</pre></blockquote>


<p>Essentially, we've got four switches -- one for each
optional component of the car -- each requiring a variable. That
works fine, but it means we need four variables in memory and four
fields in the user-profile database on the server. When we record the
car's options as individual binary digits, we can store all
four options in a single 4-bit number: air-conditioning is bit
(the 1's column), the CD player is bit 1 (the 2's
column), the sunroof is bit 2 (the 4's column), and the leather
seats are bit 3 (the 8's column). Here are some sample
configurations that show how a single number can represent any
combination of the four options:</p>


<blockquote><pre class="code">var options;
options = 1   // 1 is 0001; bit 0 is on: air-conditioning only
options = 2   // 2 is 0010; bit 1 is on: CD player only
options = 4   // 4 is 0100; bit 2 is on: sunroof only
options = 8   // 8 is 1000; bit 3 is on: leather seats only

// Here's the cool part: combining options
options = 5   // 5  is 0101: air-conditioning (1) and a sunroof (4)
options = 10  // 10 is 1010: CD player (2) and leather (8)
options = 15  // 15 is 1111: fully loaded baby!</pre></blockquote>


<p>Whenever we want to add or remove options, we just add or subtract
the value of the appropriate bit:</p>


<blockquote><pre class="code">var options = 0;  // No options to start
options += 4;     // Add sunroof (<em class="replaceable">options</em> is 4, or 0100)
options += 1;     // Add air-conditioning (<em class="replaceable">options</em> is 5, or 0101)
options += 2;     // Add CD player (<em class="replaceable">options</em> is 7, or 0111)
options -= 4;     // Remove the sunroof (<em class="replaceable">options</em> is 3, or 0011)
options += 8;     // Add leather seats (<em class="replaceable">options</em> is 11, or 1011)</pre></blockquote>


<p>So now we know how to store multiple options as a series of bits in a
single number. How do we examine those bits to calculate the cost of
the car? We need to use the bitwise operators. We'll run
through the operators first and come back to the car example after
we're done.</p>


<a name="ch15-3-fm2xml" /><div class="sect2">
<h3 class="sect2">15.2.1. Bitwise AND</h3>


<p>The <a name="INDEX-1981" />
<a name="INDEX-1982" />bitwise AND operator
(<tt class="literal">&amp;</tt>) combines the bits of two numbers by
performing a logical AND operation on each bit of the numbers. The
operation returns the result of the combination as a number.</p>


<p>A bitwise AND expression takes the form:</p>


<blockquote><pre class="code"><em class="replaceable">operand1</em> &amp; <em class="replaceable">operand2</em></pre></blockquote>


<p>The operands of bitwise AND can be any numbers, but they are
converted to 32-bit binary integers before the operation occurs. If
an operand has a fractional value such as 2.5, the fraction is
discarded.</p>


<p>Note that the <em class="emphasis">bitwise</em> AND uses the
single-character operator, <tt class="literal">&amp;</tt>, and operates on
the individual bits within its operands, whereas the
<em class="filename">logical</em> AND operator discussed in <a href="ch05_01.htm">Chapter 5, "Operators"</a> uses the two-character operator,
<tt class="literal">&amp;&amp;</tt>, and treats each operand as a whole.</p>


<p>Bitwise AND returns a number whose value is determined by comparing
the individual bits in the numeric operands,
<em class="replaceable">operand1</em> and
<em class="replaceable">operand2</em>, one at a time. If a bit contains
a 1 in both operands, the corresponding bit will also be set to 1 in
the result; otherwise, the bit will be a
in the result.</p>


<p>Bitwise AND operations are most easily pictured by arranging the
binary equivalents of the decimal operands vertically and lining up
their bit columns. In this format, it is easy to tell which bits of
the operands both contain 1s.</p>


<p>In this example, bit 2 (the third bit from the right) is 1 in both
operands and is therefore set to 1 in the result. Other bits are set
to
in the result:</p>


<blockquote><pre class="code">1111
&amp; 0100
------
  0100</pre></blockquote>


<p>In this example, bits
and 3 are 1 in both operands and are therefore set to 1 in the
result. Bits 1 and 2 are set to
in the result:</p>


<blockquote><pre class="code">1101
&amp; 1011
------
  1001</pre></blockquote>


<p>ActionScript uses decimal (base-10) numbers instead of binary
numbers, which makes it harder to visualize bitwise operations. Here
is what the previous operations look like in real code:</p>


<blockquote><pre class="code">15 &amp; 4   // Result is 4
13 &amp; 11  // Result is 9</pre></blockquote>


<p>In practice, the bitwise AND operator is used to check whether a
particular flag or set of flags (i.e., bits) is
<tt class="literal">true</tt> or <tt class="literal">false</tt>.</p>


<p>The following example checks whether bit 2 (which has the value 4) is
set to <tt class="literal">true</tt>:</p>


<blockquote><pre class="code">if (x &amp; 4) { 
  // Do something
}</pre></blockquote>


<p>Or, we can check whether either bit 2 or bit 3 (which has the value
8) is set to <tt class="literal">true</tt>:</p>


<blockquote><pre class="code">if (x &amp; (4|8)) {
  // Do something
}</pre></blockquote>


<p>Note that the preceding example checks whether bit 2
<em class="emphasis">or</em> bit 3 is set using the <tt class="literal">|</tt>
operator discussed next. To check whether both bits 2
<em class="emphasis">and</em> 3 are set, we can use:</p>


<blockquote><pre class="code">if (x &amp; (4|8) == (4|8)) { 
  // Do something
}</pre></blockquote>


<p>The bitwise AND operator is also used to set individual bits in a
number to <tt class="literal">false</tt>; see <a href="ch15_02.htm">Section 15.2.4, "Bitwise NOT"</a> later in this chapter.</p>
</div>




<a name="ch15-4-fm2xml" /><div class="sect2">
<h3 class="sect2">15.2.2. Bitwise OR</h3>


<p>The <a name="INDEX-1983" />
<a name="INDEX-1984" />Bitwise OR operator
(<tt class="literal">|</tt>) combines the bits of two numbers by performing
a logical OR operation on each bit of the numbers. Like bitwise AND,
bitwise OR returns the result of the combination as a number. A
bitwise OR expression takes the form:</p>


<blockquote><pre class="code"><em class="replaceable">operand1</em> | <em class="replaceable">operand2</em></pre></blockquote>


<p>The operands can be any numbers, but they are converted to 32-bit
binary integers before the operation occurs. The fractional portion
of an operand, if any, is discarded.</p>


<p>Note that the <em class="emphasis">bitwise</em> OR uses the
single-character operator, <tt class="literal">|</tt>, and operates on
individual bits within a number, whereas the
<em class="filename">logical</em> OR operator discussed in <a href="ch05_01.htm">Chapter 5, "Operators"</a> uses the two-character operator,
<tt class="literal">||</tt>, and treats each operand as a whole.</p>


<p>Each bit in the result is determined by taking the logical OR of the
bits of the two operands. Therefore, if a bit is set to 1 in either
(or both) <em class="replaceable">operand1</em> or
<em class="replaceable">operand2</em>, that bit will be set to 1 in the
result. Compare the following pseudoexamples to those shown earlier
for the bitwise AND operator.</p>


<p>In this example, only bit 1 is set to
in the result because bit 1 is
in both operands. The other bits are set to 1:</p>


<blockquote><pre class="code">1101
| 0100
------
  1101</pre></blockquote>


<p>In this example, all bits are set to 1 in the result because each bit
contains a 1 in at least one of the two operands:</p>


<blockquote><pre class="code">1101
| 1011
------
  1111</pre></blockquote>


<p>In real code, this reads:</p>


<blockquote><pre class="code">13 | 4    // Result is 13
13 | 11   // Result is 15</pre></blockquote>


<p>In practice, we often use bitwise OR to combine multiple numbers that
represent individual options into a single numeric value that
represents all the options of a system. For example, the following
code combines bit 2 (value 4) and bit 3 (value 8):</p>


<blockquote><pre class="code">options = 4 | 8;</pre></blockquote>


<p>The bitwise OR operator is also used to set an option to
<tt class="literal">true</tt> in an existing value. The following example
sets the option represented by bit 3 (value 8) to
<tt class="literal">true</tt>. If the value in bit 3 is already
<tt class="literal">true</tt>, it is untouched:</p>


<blockquote><pre class="code">options = options | 8;</pre></blockquote>


<p>Multiple bits can also be set at once:</p>


<blockquote><pre class="code">options = options | 4 | 8;</pre></blockquote>
</div>




<a name="ch15-5-fm2xml" /><div class="sect2">
<h3 class="sect2">15.2.3. Bitwise XOR</h3>


<p>We're <a name="INDEX-1985" /> <a name="INDEX-1986" /> <a name="INDEX-1987" />officially getting into weird
punctuation symbols for our operators. The bitwise XOR (eXclusive OR)
operator is the caret symbol, <tt class="literal">^</tt> (created using
Shift-6 on most keyboards). A bitwise XOR expression takes the form:</p>


<blockquote><pre class="code"><em class="replaceable">operand1</em> ^ <em class="replaceable">operand2</em></pre></blockquote>


<p>The operands can be any numbers, but they are converted to 32-bit
binary integers before the operation occurs. The fractional portion
of an operand, if any, is discarded.</p>


<p>The bitwise XOR operator differs from the bitwise OR operator in that
the result contains a 0, not a 1, for any bit containing a 1 in
<em class="emphasis">both</em> its operands. In other words, the XOR
result contains a
for any bits that are the same in both operands and contains a 1 for
any bits that differ between the two operands.</p>


<p>In this example, bits
and 3 match in both operands, so those bits are set to
in the result. Bits 1 and 2 differ in the two operands, so they are
set to 1 in the result:</p>


<blockquote><pre class="code">1011
^ 1101 
------
  0110</pre></blockquote>


<p>In this example, all the bits match in both operands, so the result
is all zeros:</p>


<blockquote><pre class="code">0010
^ 0010
------
  0000</pre></blockquote>


<p>In this example, bits 0, 2, and 3 differ in the two operands, so
those bits are set to 1 in the result. Bit 1 is the same in both
operands, so it is set to
in the result:</p>


<blockquote><pre class="code">0110
^ 1011
------
  1101</pre></blockquote>


<p>Translated to decimal numbers, the preceding examples become:</p>


<blockquote><pre class="code">11 ^ 13    // Result is 6
2 ^ 2      // Result is 0
6 ^ 11     // Result is 13</pre></blockquote>


<p>The bitwise XOR operator is typically used to toggle options between
1 and
(<tt class="literal">true</tt> and <tt class="literal">false</tt>). To toggle the
option indicated by bit 2 (whose value is 4), we could use:</p>


<blockquote><pre class="code">options = options ^ 4;</pre></blockquote>
</div>




<a name="ch15-6-fm2xml" /><div class="sect2">
<h3 class="sect2">15.2.4. Bitwise NOT</h3>


<p>Unlike <a name="INDEX-1988" /> <a name="INDEX-1989" />bitwise AND, OR, and XOR, which all
produce a number resulting from two other numbers, bitwise NOT
changes the bits of a single number. It uses the tilde symbol
(<tt class="literal">~</tt>) found in the upper left of most keyboards and
takes the form:</p>


<blockquote><pre class="code">~<em class="replaceable">operand</em></pre></blockquote>


<p>The operand can be any number, but it is converted to a 32-bit binary
integer before the operation occurs. Any fractional portion of the
operand is discarded.</p>


<p>Bitwise NOT simply inverts the bits in its operand. For example:</p>


<blockquote><pre class="code">~00000000000000000000000000000010  
  // Result is 11111111111111111111111111111101

~11111111111111111111111111111010
  // Result is 00000000000000000000000000000101</pre></blockquote>


<p>which, in decimal, read:</p>


<blockquote><pre class="code">~2    // Result is -3. See the following explanation.
~-6   // Result is 5. See the following explanation.</pre></blockquote>


<p>It's impractical to go into a lesson on negative binary-number
representation systems here, but advanced programmers should note
that bitwise operations represent negative binary integers using the
twos-complement system. To those unfamiliar with this notation,
simply remember that the return value of a bitwise NOT operation is
one less than the value obtained by taking the negative of the
original operand. For example:</p>


<blockquote><pre class="code">~-10  // Change the sign of -10 to 10, then subtract 1. Result is 9.</pre></blockquote>


<p>The bitwise NOT operator is typically used with the bitwise AND
operator to clear specific bits (i.e., set them to 0). For example,
to clear bit 2, we could use:</p>


<blockquote><pre class="code">options = options &amp; ~4;</pre></blockquote>


<p>The expression <tt class="literal">~4</tt> returns a 32-bit integer
containing all 1s, except for a
in bit 2. By bitwise ANDing that number with the
<tt class="literal">options</tt> variable,
<tt class="literal">options</tt>' bit 2 is cleared and other bits are
left unchanged. The preceding can be written more succinctly as:</p>


<blockquote><pre class="code">options &amp;= ~4;</pre></blockquote>


<p>The same technique can be used to clear multiple bits at once; the
following example clears bits 2 and 3:</p>


<blockquote><pre class="code">options &amp;= ~(4 | 8);</pre></blockquote>
</div>




<a name="ch15-7-fm2xml" /><div class="sect2">
<h3 class="sect2">15.2.5. The Bitwise Shift Operators</h3>


<p>As <a name="INDEX-1990" /> <a name="INDEX-1991" />we've seen, bitwise programming
treats binary numbers as a series of <em class="filename">switches</em>.
It's frequently useful to move those switches around. For
example, if we have bit
on and we decide we want to turn it off and turn bit 2 on, we could
simply move bit
left two places. Or if we want to know whether or not the bit 5 of a
number is on, we could move that bit right five places and then check
bit 0's value. The bitwise shift operators let us perform such
movements.</p>


<p>Bitwise shift operators also allow us to rapidly multiply and divide
by multiples of 2. If you wanted to divide a decimal (base-10) number
by 10, you could simply shift the decimal point one position to the
left. Likewise, to multiply by 10, you simply shift the decimal place
one position to the right, and to multiply by
10<sup class="superscript">3</sup> (i.e., 1000) you would shift the
decimal place three positions to the right. The bitwise shift
operators let us perform an analogous operation with binary numbers.
Shifting bits to the right divides a number by 2 for each position
shifted. Shifting bits to the left multiplies a number by 2 for each
position shifted.</p>


<a name="ch15-8-fm2xml" /><div class="sect3">
<h3 class="sect3">15.2.5.1. Signed right shift</h3>


<p>The <a name="INDEX-1992" /> <a name="INDEX-1993" /> <a name="INDEX-1994" />
<a name="INDEX-1995" />signed right shift operator can be used
to divide a number by some power of 2. It uses the
<tt class="literal">&gt;&gt;</tt> symbol (created using two successive
greater-than signs) and takes the general form:</p>


<blockquote><pre class="code"><em class="replaceable">operand</em> &gt;&gt; <em class="replaceable">n</em></pre></blockquote>


<p>where <em class="replaceable">n</em> specifies how many places to the
right to shift <em class="replaceable">operand</em> 's bits. The
result is equivalent to dividing <tt class="literal">operand</tt> by
2<sup class="superscript">n</sup>. The remainder, if any, is discarded.
Here's how it works:</p>


<p>All bits are shifted right by the number of positions specified by
<em class="replaceable">n</em>. Any bits shifted off the righthand side
of the number are discarded. New bits are added on the left side to
fill the void created by the shift operation. If
<em class="replaceable">operand</em> is positive, the newly added bits
are 0s. If <em class="replaceable">operand</em> is negative, the newly
added bits are 1s (because negative numbers are represented in
twos-complement). Here's an example in pseudocode:</p>


<blockquote><pre class="code">// The right-most bit (0) is lost and 0s fill in on the left
// The result is 00000000000000000000000000000100
00000000000000000000000000001000 &gt;&gt; 1</pre></blockquote>


<p>Shifting a number right one bit is like dividing it by
2<sup class="superscript">1</sup> (i.e., 2). In decimal this reads:</p>


<blockquote><pre class="code">8 &gt;&gt; 1  // The result is 4</pre></blockquote>


<p>Note that any remainder is discarded:</p>


<blockquote><pre class="code">9 &gt;&gt; 1 // The result is still 4</pre></blockquote>


<p>For negative numbers, <tt class="literal">&gt;&gt;</tt> still divides by 2
for each bit position shifted:</p>


<blockquote><pre class="code">-16 &gt;&gt; 2  // The result is -4 (-16 divided by 2 squared)</pre></blockquote>
</div>



<a name="ch15-9-fm2xml" /><div class="sect3">
<h3 class="sect3">15.2.5.2. Unsigned right shift</h3>


<p>The <a name="INDEX-1996" /> <a name="INDEX-1997" />
<a name="INDEX-1998" />unsigned right shift operator, created
using three successive greater-than signs
(<tt class="literal">&gt;&gt;&gt;</tt>), takes the form:</p>


<blockquote><pre class="code"><em class="replaceable">operand</em> &gt;&gt;&gt; <em class="replaceable">n</em></pre></blockquote>


<p>It works like the signed right shift operator except that bits
vacated by the shift are always filled with 0s (regardless of whether
<em class="replaceable">operand</em> is positive or negative). For
positive numbers, it is no different than the signed right shift
operator.</p>
</div>



<a name="ch15-10-fm2xml" /><div class="sect3">
<h3 class="sect3">15.2.5.3. Left shift</h3>


<p>The <a name="INDEX-1999" />
<a name="INDEX-2000" />
<a name="INDEX-2001" />left shift operator can be used to
multiply a number by some power of 2. It uses the
<tt class="literal">&lt;&lt;</tt> symbol (created using two successive
less-than signs) and takes the general form:</p>


<blockquote><pre class="code"><em class="replaceable">operand1</em> &lt;&lt; <em class="replaceable">n</em></pre></blockquote>


<p>where <em class="replaceable">n</em> specifies how many places to the
left to shift <em class="replaceable">operand </em> 's bits. The
result is equivalent to multiplying <tt class="literal">operand</tt> by
2<sup class="superscript">n</sup>. Here's how it works:</p>


<p>All bits are shifted left by the number of positions specified by
<em class="replaceable">n</em>. Any bits shifted off the lefthand side
of the number are discarded. The empty bits created by the shift on
the right are filled in with 0s. For example:</p>


<blockquote><pre class="code">01000000000000000000000000001001 &lt;&lt; 4
  // Result is 00000000000000000000000010010000</pre></blockquote>


<p>Shifting a number left by 4 bits is equivalent to multiplying it by
2<sup class="superscript">4</sup> (i.e., 16). In decimal, this reads:</p>


<blockquote><pre class="code">9 &lt;&lt; 4  // Result is 9 * 16, i.e., 144</pre></blockquote>


<p>Notice that in prior examples, we "manually" specified
the value associated with a particular bit: 1 for bit 0, 2 for bit 1,
4 for bit 2, 8 for bit 3, and so on. The left shift operator is very
handy for calculating a bit position's equivalent value:</p>


<blockquote><pre class="code">(1 &lt;&lt; 0)    // Bit 0 equals 1
(1 &lt;&lt; 1)    // Bit 1 equals 2
(1 &lt;&lt; 2)    // Bit 2 equals 4
(1 &lt;&lt; 3)    // Bit 3 equals 8
(1 &lt;&lt; 15)   // Much easier than remembering bit 15 equates to 32768!</pre></blockquote>


<p>The left shift operator is also handy for dynamically selecting bits
by numeric index rather than bit value. <a href="ch15_02.htm">Example 15-1</a>
counts up all the 1s in a number.</p>


<a name="ch15-33284" /><div class="example">
<h4 class="objtitle">Example 15-1. Using Left Shift to Count Bits That Are Set </h4>

<blockquote><pre class="code">myNumber = 27583;  // The number whose 1s we'll count
count = 0;
for (var i=0; i &lt; 32; i++) {
  if (myNumber &amp; (1 &lt;&lt; i)) {
    count++;
  }
}</pre></blockquote>
</div>


<p><a href="ch15_02.htm">Example 15-2</a> is a variation on <a href="ch15_02.htm">Example 15-1</a> using the right shift operator. We can
repeatedly right-shift the value and check its rightmost bit (bit 0),
instead of using the left shift operator to calculate the bit value
associated with each bit.</p>


<a name="ch15-56247" /><div class="example">
<h4 class="objtitle">Example 15-2. Counting Bits Using Right Shift </h4>

<blockquote><pre class="code">myNumber = 27583;
count = 0;
temp = myNumber;    // Make a copy for temporary use
for (var i = 0; i &lt; 32; i++) {
  if (temp &amp; 1) {
    count++;
  }
  temp = temp &gt;&gt; 1;
}</pre></blockquote>
</div>


<p>The variable <tt class="literal">myNumber</tt> is copied into the temporary
variable <tt class="literal">temp</tt> because the right shift is
destructive; the variable <tt class="literal">temp</tt> ends up with a
final value of <a name="INDEX-2002" /> <a name="INDEX-2003" />0.</p>
</div>
</div>




<a name="ch15-11-fm2xml" /><div class="sect2">
<h3 class="sect2">15.2.6. Bitwise Operations Applied</h3>


<p>We <a name="INDEX-2004" />began our look at bitwise operators
using the example of a Flash site that sells cars. Now that
we've seen how bitwise operators work, let's use them to
determine the cost of a car, as shown in <a href="ch15_02.htm">Example 15-3</a>. You can download the
<em class="filename">.fla</em> file for this example from the online Code
Depot.</p>


<a name="ch15-81763" /><div class="example">
<h4 class="objtitle">Example 15-3. Real-Life Bitwise Operations </h4>

<blockquote><pre class="code">// First, set the options (usually by adding and subtracting numbers
// based on the selections of a fill-in form, but we hardcode them here)
var hasAirCon   = (1&lt;&lt;0)    // Bit 0: 0 means no, 1 means yes
var hasCDplayer = (0&lt;&lt;1)    // Bit 1: 0 means no, 2 means yes
var hasSunRoof  = (1&lt;&lt;2)    // Bit 2: 0 means no, 4 means yes
var hasLeather  = (1&lt;&lt;3)    // Bit 3: 0 means no, 8 means yes

// Now combine the options into a single number using bitwise OR
var carOptions = hasAirCon | hasCDplayer | hasSunRoof | hasLeather;

// Here's a function that calculates the price
function totalPrice(carOptions) {
  var price = 0;
  if (carOptions &amp; 1) {  // If the first bit is set
    price += 1000;       // add $1000
  }
  if (carOptions &amp; 2) {  // If the second bit is set
    price += 500;        // add $500
  }
  if (carOptions &amp; 4) {  // If the third bit is set
    price += 1200;       // add $1200
  }
  if (carOptions &amp; 8) {  // If the fourth bit is set
    price += 800;        // add $800
  }

  return price;
}

// Everything's set to go: let's call the function and see if it works!
trace(totalPrice(carOptions));  // Returns 3000. Cool...</pre></blockquote>
</div>


<p>To avoid hardcoded bit values throughout your code, it's good
practice to store the bit values corresponding to specific options in
variables, such as:</p>


<blockquote><pre class="code">var airConFLAG   = 1 &lt;&lt; 0;  // Bit 0, whose value is 1
var cdPlayerFLAG = 1 &lt;&lt; 1;  // Bit 1, whose value is 2
var sunroofFLAG  = 1 &lt;&lt; 2;  // Bit 2, whose value is 4
var leatherFLAG  = 1 &lt;&lt; 3;  // Bit 3, whose value is 8</pre></blockquote>


<p>Reader Exercise: Rewrite <a href="ch15_02.htm">Example 15-3</a> using variables
and the left shift operator instead of hardcoded bit values to
represent the options.</p>


<a name="ch15-12-fm2xml" /><div class="sect3">
<h3 class="sect3">15.2.6.1. Why bitwise?</h3>


<p>Although <a href="ch15_02.htm">Example 15-3</a> would be easier to understand
as a series of Boolean operations, bitwise operations are extremely
fast and compact. Anytime we can speak to a computer in its native
binary tongue, we save room and gain speed.</p>


<p>For the sake of comparison, consider a situation in which we're
tracking a user's profile, and each user has 32 settings that
can be on or off. In a normal database, we'd need 32 fields for
each user. If we have a million users, that's a million copies
of 32 fields. But when we use bitwise programming we can store the 32
settings in a single number, requiring only one field in the database
for each user! Not only does this save disk space, but every time we
access a user's profile, we need transfer only a single
integer, not 32 Boolean values. If we are processing millions of
transactions, saving a few milliseconds per transaction can
measurably improve system performance.</p>


<p>For further study, see Gene Myers' excellent article for C
programmers, <em class="emphasis">Becoming Bit
Wise</em>, posted at <a href="../../../../../../www.cscene.org /CS9/CS9-02.html">http://www.cscene.org
/CS9/CS9-02.html</a>.</p>


<a name="INDEX-2005" /><a name="INDEX-2006" /><a name="INDEX-2007" /><a name="INDEX-2008" />
<a name="INDEX-2009" />
</div>
</div>


<hr width="684" align="left" />
<div class="navbar"><table width="684" border="0"><tr><td align="left" valign="top" width="228"><a href="ch15_01.htm"><img alt="Previous" border="0" src="../gifs/txtpreva.gif" /></a></td><td align="center" valign="top" width="228"><a href="index.htm"><img alt="Home" border="0" src="../gifs/txthome.gif" /></a></td><td align="right" valign="top" width="228"><a href="ch15_03.htm"><img alt="Next" border="0" src="../gifs/txtnexta.gif" /></a></td></tr><tr><td align="left" valign="top" width="228">15. Advanced Topics</td><td align="center" valign="top" width="228"><a href="index/index.htm"><img alt="Book Index" border="0" src="../gifs/index.gif" /></a></td><td align="right" valign="top" width="228">15.3. Advanced Function Scope Issues</td></tr></table></div>
<hr width="684" align="left" />

<img alt="Library Navigation Links" border="0" src="../gifs/navbar.gif" usemap="#library-map" />
<p><font size="-1"><a href="copyrght.htm">Copyright &copy; 2002</a> O'Reilly &amp; Associates. All rights reserved.</font></p>

<map name="library-map"><area href="../index.htm" coords="0,1,78,93" shape="rect" /><area href="../wdesign/index.htm" coords="80,2,155,96" shape="rect" /><area href="../xhtml/index.htm" coords="158,0,263,97" shape="rect" /><area href="../audio/index.htm" coords="265,1,335,97" shape="rect" /><area href="../css/index.htm" coords="338,1,434,93" shape="rect" /><area href="index.htm" coords="439,0,540,102" shape="rect" /><area href="../infoarch/index.htm" coords="544,0,685,102" shape="rect" /></map>

</body></html>