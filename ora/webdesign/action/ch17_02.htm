<html><head><title>Creating a Flash Fill-in Form (ActionScript: The Definitive Guide)</title><link rel="stylesheet" type="text/css" href="../style/style1.css" />

<meta name="DC.Creator" content="Colin Moock" /><meta name="DC.Format" content="text/xml" scheme="MIME" /><meta name="DC.Language" content="en-US" /><meta name="DC.Publisher" content="O'Reilly &amp; Associates, Inc." /><meta name="DC.Source" scheme="ISBN" content="1565928520L" /><meta name="DC.Subject.Keyword" content="stuff" /><meta name="DC.Title" content="ActionScript: The Definitive Guide" /><meta name="DC.Type" content="Text.Monograph" />

</head><body bgcolor="#ffffff">

<img alt="Book Home" border="0" src="gifs/smbanner.gif" usemap="#banner-map" /><map name="banner-map"><area shape="rect" coords="1,-2,616,66" href="index.htm" alt="ActionScript: The Definitive Guide" /><area shape="rect" coords="629,-11,726,25" href="jobjects/fsearch.htm" alt="Search this book" /></map>

<div class="navbar"><table width="684" border="0"><tr><td align="left" valign="top" width="228"><a href="ch17_01.htm"><img alt="Previous" border="0" src="../gifs/txtpreva.gif" /></a></td><td align="center" valign="top" width="228"><a href="index.htm">ActionScript: The Definitive Guide</a></td><td align="right" valign="top" width="228"><a href="ch17_03.htm"><img alt="Next" border="0" src="../gifs/txtnexta.gif" /></a></td></tr></table></div>
<hr width="684" align="left" />


<h2 class="sect1">17.2. Creating a Flash Fill-in Form</h2>


<p>Our <a name="INDEX-2132" />example <a name="INDEX-2133" />includes all of the
necessary components of a Flash form, cited earlier, but stripped
down to the simplest level. This tutorial demonstrates how to send a
single text field variable from Flash to a
<a name="INDEX-2134" />Perl script, named
<em class="filename">echo.pl</em>, and how to receive a response in Flash
back from <em class="filename">echo.pl</em>. Functioning versions of the
example files are available from the online Code Depot. Let's
get to it, shall we?</p>


<a name="ch17-10-fm2xml" /><div class="sect2">
<h3 class="sect2">17.2.1. Building the Frontend</h3>


<p>Unlike <a name="INDEX-2135" />HTML, Flash does not have an integrated
mechanism for the creation of forms. In HTML, creating pull-down
menus and radio buttons is simply a matter of using the
<tt class="literal">&lt;SELECT&gt;</tt>, <tt class="literal">&lt;OPTION&gt;</tt>,
and <tt class="literal">&lt;INPUT</tt> <tt class="literal">TYPE="RADIO"&gt;</tt>
tags. In Flash, those devices must be built by hand. Flash's
only built-in form device is the user-input text field (the
equivalent of HTML's <tt class="literal">&lt;INPUT</tt>
<tt class="literal">TYPE="TEXT"&gt;</tt> or <tt class="literal">&lt;INPUT</tt>
<tt class="literal">TYPE="TEXTAREA"&gt;</tt>).</p>




<a name="ch17-12-fm2xml" /><blockquote><h4>TIP</h4>
<p>Though form widgets are not built directly into the Flash authoring
tool, radio buttons, checkboxes, and pull-down menus are available as
Smart Clips included with the product. To access the form-widget
Smart Clips, choose Window <img align="absmiddle" src="figs/U2192.gif" /> Common Libraries <img align="absmiddle" src="figs/U2192.gif" /> Smart
Clips.</p>

</blockquote>

<p>In <a name="INDEX-2136" /> <a name="INDEX-2137" />our form, we'll have a user-input
text field and a <a name="INDEX-2138" /> <a name="INDEX-2139" />Submit button. We'll place these two
elements into a movie clip so that we can easily identify the
variables to send to the server. First, we'll create a new
document and the <tt class="literal">formClip</tt> movie clip, as follows:</p>


<ol><li><p>Start a new Flash document.</p></li><li><p>Select Insert <img align="absmiddle" src="figs/U2192.gif" /> New Symbol. The Symbol Properties dialog box
appears.</p></li><li><p>In the Name box, type <tt class="userinput"><b>formClip</b></tt>.</p></li><li><p>Click OK.</p></li><li><p>From the Library, drag an instance of <tt class="literal">formClip</tt>
onto the main Stage.</p></li></ol>
<p>Next, we'll add a user-input text field to
<tt class="literal">formClip</tt> by following these steps:</p>


<ol><li><p>In the Library, double-click the <tt class="literal">formClip</tt> symbol
to edit the clip.</p></li><li><p>Select the Text tool.</p></li><li><p>On the clip canvas, drag a rectangle big enough for a user to enter a
single line of text.</p></li><li><p>Select Window <img align="absmiddle" src="figs/U2192.gif" /> Panels <img align="absmiddle" src="figs/U2192.gif" /> Text Options.</p></li><li><p>For Text Type, select Input Text.</p></li><li><p>For Line Display, select Single Line.</p></li><li><p>In the Variable box, type <tt class="userinput"><b>input</b></tt>.</p></li><li><p>Select Border/Bg.</p></li></ol>
<p>Now we'll assign our <tt class="literal">input</tt> text field a
default value, ensuring that it will be sent to the server even if
the user doesn't enter any data:</p>


<ol><li><p>In the <tt class="literal">formClip</tt> timeline, select frame 1.</p></li><li><p>In the Actions panel, enter the following code:
<tt class="userinput"><b>input</b></tt> <tt class="userinput"><b>=</b></tt>
<tt class="userinput"><b>"";</b></tt>.</p></li></ol>
<p>Finally, we add a Submit button to <tt class="literal">formClip</tt> by
following these steps:</p>


<ol><li><p>Select Window <img align="absmiddle" src="figs/U2192.gif" /> Common Libraries <img align="absmiddle" src="figs/U2192.gif" /> Buttons.</p></li><li><p>From the <em class="filename">Buttons.fla</em> library, drag an instance
of the <em class="emphasis">Push Bar</em> button onto the
<tt class="literal">formClip</tt> stage.</p></li></ol>
</div>




<a name="ch17-13-fm2xml" /><div class="sect2">
<h3 class="sect2">17.2.2. Sending Data to the Server</h3>


<p>There <a name="INDEX-2140" />are many ways to send data from Flash to
a server application, including the <em class="filename">loadVariables(
)</em><a name="INDEX-2141" />, <em class="filename">getURL( )</em>,
<em class="filename">loadMovie( )</em>, <em class="filename">XML.load( )</em>,
<em class="filename">XML.sendAndLoad( )</em>, and
<em class="filename">XMLSocket.send( )</em> methods. In our example,
we'll use the <em class="filename">loadVariables( )</em> method. For
information on the others, see <a href="part3.htm">Part III, "Language Reference"</a>.</p>


<p>In the previous section, we placed a user-input text field and a
Submit button in the movie clip <tt class="literal">formClip</tt>. To make
that Submit button send <tt class="literal">formClip</tt>'s variables
to <em class="filename">echo.pl</em> when clicked, follow these steps:</p>


<ol><li><p>In the Library, double-click the <tt class="literal">formClip</tt> symbol
(this edits the clip).</p></li><li><p>Select the <em class="emphasis">Push Bar</em> button instance.</p></li><li><p>Select Window <img align="absmiddle" src="figs/U2192.gif" /> Actions.</p></li><li><p>Enter the following code in the Actions panel:</p>
<blockquote><pre class="code">on (release, keyPress "&lt;Enter&gt;") {
  loadVariables ("http://www.yourserver.com/cgi-bin/echo.pl", 
                 "_root.response", 
                 "GET");

  _root.response.gotoAndStop("loading");
}</pre></blockquote></li></ol>


<p>The code on our Submit button uses <em class="filename">loadVariables(
)</em> to send the variables of <tt class="literal">formClip</tt> to
<em class="filename">echo.pl</em>, and it causes our
<tt class="literal">response</tt> clip to display a loading message.
We'll build the <tt class="literal">response</tt> clip a little
later. For now, let's examine how the <em class="filename">loadVariables(
)</em> invocation works.</p>


<p>The first parameter of the <em class="filename">loadVariables( )</em>
invocation should specify the location of
<em class="filename">echo.pl</em> on your server (server-side scripts are
typically stored in a folder named <em class="filename">cgi-bin</em>). Be
sure to set the location correctly according to your server's
domain name and directory structure. When <em class="filename">loadVariables(
)</em> executes, all the variables in
<tt class="literal">formClip</tt> are sent to that location.</p>


<p>The second parameter of the <em class="filename">loadVariables( )</em>
invocation indicates the path to the clip in which we will store the
return value sent by <em class="filename">echo.pl</em>, namely
<tt class="literal">"_root.response"</tt>.</p>


<p>The third parameter of the <em class="filename">loadVariables( )</em>
invocation specifies the HTTP method we're using to submit
<tt class="literal">formClip</tt>'s variables to the server -- the
GET method in this case. ActionScript supports both GET and POST
operations, as described under <em class="filename">loadVariables( )</em>
in <a href="part3.htm">Part III, "Language Reference"</a>.</p>
</div>




<a name="ch17-14-fm2xml" /><div class="sect2">
<h3 class="sect2">17.2.3. The Perl Script, echo.pl</h3>


<p>When <a name="INDEX-2142" />the user clicks the <a name="INDEX-2143" /> <a name="INDEX-2144" />Submit button in
our movie's <tt class="literal">formClip</tt>, Flash initiates an
HTTP GET request. This request executes the Perl script
<em class="filename">echo.pl</em>. In order for our form to work,
<em class="filename">echo.pl</em> must be placed in a CGI-enabled
directory of a web server and configured by the server's
administrator as follows:</p>


<ul><li><p>The script must be executable (typically, this means setting the file
permissions to 755).</p></li><li><p>On Unix, the path to the Perl interpreter must be set in the script.</p></li></ul>
<p><a href="ch17_02.htm">Example 17-1</a> shows the source code for
<em class="filename">echo.pl</em>. Note that the <tt class="literal">#</tt>
character indicates a comment in Perl.</p>


<a name="ch17-70531" /><div class="example">
<h4 class="objtitle">Example 17-1. The Source Code of echo.pl </h4>

<blockquote><pre class="code">#! /usr/local/bin/perl       
#-------------------------------------------------------------------------------
#  Name:      Simple Flash Echo 
#  Version:   1.2.0
#  Author:    Derek Clayton  derek_clayton@iceinc.com
#  Description:  Echoes back name/value pairs received from a Flash GET or POST.  
#-------------------------------------------------------------------------------
# MAIN
#-------------------------------------------------------------------------------
use CGI;                    # Use the CGI.pm for easy parsing
$query = new CGI;           # Query object 
$echoString = "output=";    # Initialize our output string
&amp;getInput;                  # Get the input received from Flash
&amp;writeResponse;             # Write the response back to Flash
exit;                       # Exit the script
#-------------------------------------------------------------------------------
sub getInput {
  # For each key get the associated value and add to the echo string
  foreach $key ($query-&gt;param) {
    $value = $query-&gt;param($key);
    $echoString .= "$key:$value\n";  
  }  
  # Remove the trailing newline (\n) before writing response
  chomp($echoString);
}

sub writeResponse {
  # Set content type for Flash
  print "Content-type: application/x-www-urlform-encoded\n\n";
  # Write the output
  print $echoString;
}</pre></blockquote>
</div>


<p>The <em class="filename">echo.pl</em> script performs three general tasks:</p>


<ul><li><p>It accepts data sent by Flash and parses that data into a series of
variable names and values.</p></li><li><p>It assembles those variable names and values into a string to return
to Flash. The string has the following format:</p>
<blockquote><pre class="code">output=<em class="replaceable">name1</em>:<em class="replaceable">value1</em>\n<em class="replaceable">name2</em>:<em class="replaceable">value2</em>\n...<em class="replaceable">namen</em>:<em class="replaceable">valuen</em></pre></blockquote></li></ul>


<ul><li><p>It returns the string to Flash.</p></li></ul>
<p>Upon receiving the string returned by <em class="filename">echo.pl</em>,
Flash automatically interprets it as a series of URL-encoded
variables (as described in the entry for <em class="filename">loadVariables(
)</em> in <a href="part3.htm">Part III, "Language Reference"</a>). Hence,
<tt class="literal">output</tt> becomes a variable on the
<tt class="literal">response</tt> clip's timeline. By examining the
value of <tt class="literal">output</tt> in our Flash movie, we can see
which variable names and values were originally sent to
<em class="filename">echo.pl</em>.</p>


<p>Obviously <em class="filename">echo.pl</em> is not the most interesting
web application in the world. It is only a proof of concept. When
applied, however, the concept can have interesting and powerful
results. For an example of a more fully developed Perl system, see
the flat file database sample available at the online Code Depot
<a name="INDEX-2145" />under
"Server Communication."</p>
</div>




<a name="ch17-15-fm2xml" /><div class="sect2">
<h3 class="sect2">17.2.4. Receiving Results from the Server</h3>


<p>Recall <a name="INDEX-2146" />that when we sent the variables of
<tt class="literal">formClip</tt> to <em class="filename">echo.pl</em>, we
requested that <em class="filename">echo.pl </em>'s return value be
stored in the movie clip <tt class="literal">response</tt>:</p>


<blockquote><pre class="code">loadVariables ("http://www.yourserver.com/cgi-bin/echo.pl", 
               "_root.response", 
               "GET");</pre></blockquote>


<p>We'll now build that <tt class="literal">response</tt> clip; it has
three states: <em class="emphasis">idle</em>,
<em class="emphasis">loading</em>, and <em class="emphasis">done loading</em>.
In the <em class="emphasis">idle</em> state, <tt class="literal">response</tt>
is invisible to the user, waiting for data to begin loading. In the
<em class="emphasis">loading</em> state, <tt class="literal">response</tt>
indicates to the user that data has been submitted to the server and
that Flash is waiting for a reply. In the <em class="emphasis">done
loading</em> state, <tt class="literal">response</tt> has received
the server's reply and displays that reply to the user via a
text field. The three states of <tt class="literal">response</tt> govern
its timeline structure. Each state is represented by a labeled
keyframe: <tt class="literal">idle</tt>, <tt class="literal">loading</tt>, and
<tt class="literal">doneLoading</tt>. The frame displayed is dictated as
follows:</p>


<ul><li><p>When the movie loads, <tt class="literal">response</tt> displays the
<tt class="literal">idle </tt>frame.</p></li><li><p>When variables are submitted, the Submit button sends
<tt class="literal">response</tt> to the <tt class="literal">loading </tt>frame.</p></li><li><p>When variables are received, <tt class="literal">response</tt>'s
<em class="filename">data</em> event handler (which we'll create)
sends <tt class="literal">response</tt> to the <tt class="literal">doneLoading
</tt>frame.</p></li></ul>
<p>To build <tt class="literal">response</tt>, we follow these steps:</p>


<ol><li><p>Select Insert <img align="absmiddle" src="figs/U2192.gif" /> New Symbol. The Symbol Properties dialog box
appears.</p></li><li><p>In the Name box, type <tt class="userinput"><b>responseClip</b></tt>.</p></li><li><p>Click OK.</p></li><li><p>From the Library, drag an instance of <tt class="literal">responseClip</tt>
onto the main Stage.</p></li><li><p>Name the <tt class="literal">responseClip</tt> instance
<tt class="literal">response</tt>.</p></li><li><p>In the Library, double-click the <tt class="literal">responseClip</tt>
symbol (this edits the clip).</p></li><li><p>Create four timeline layers named, from top to bottom,
<em class="filename">scripts</em>, <em class="filename">labels</em>,
<em class="filename">loading</em>, and <em class="filename">outputField</em>.</p></li><li><p>Create three keyframes on each layer.</p></li><li><p>On the <em class="filename">labels</em> layer, for frames 1, 2, and 3, add
the labels <tt class="literal">idle</tt>, <tt class="literal">loading</tt>, and
<tt class="literal">doneLoading</tt>, respectively.</p></li><li><p>On the <em class="filename">scripts</em> layer, at frame 1, add the
following code: <tt class="userinput"><b>stop( );</b></tt>.</p></li><li><p>On the <em class="filename">loading</em> layer, at frame 2, add the static
text, <tt class="userinput"><b>"loading, please</b></tt>
<tt class="userinput"><b>wait"</b></tt>.</p></li><li><p>Select the Text tool.</p></li><li><p>On the <em class="filename">outputField</em> layer, at frame 3, draw a
text box.</p></li><li><p>Select Window <img align="absmiddle" src="figs/U2192.gif" /> Panels <img align="absmiddle" src="figs/U2192.gif" /> Text Options.</p></li><li><p>For Text Type, select Dynamic Text.</p></li><li><p>For Line Display, select Multiline.</p></li><li><p>In the Variable box, type <tt class="userinput"><b>outputField</b></tt>.</p></li></ol>
<p>Now let's add the <em class="filename">data</em> event handler that
will be triggered when the server has finished sending its data to
Flash. Follow these steps:</p>


<ol><li><p>On the main Stage, select the <tt class="literal">response</tt> instance.</p></li><li><p>Select Window <img align="absmiddle" src="figs/U2192.gif" /> Actions.</p></li><li><p>Enter the following code in the Actions panel:</p>
<blockquote><pre class="code">onClipEvent (data) {
  this.gotoAndStop("doneLoading");
  outputField = output;
}</pre></blockquote></li></ol>


<p>When Flash receives the content sent by <em class="filename">echo.pl</em>,
<tt class="literal">response</tt>'s <em class="filename">data</em> event
handler executes automatically. In the <em class="filename">data</em>
handler, we move <tt class="literal">response</tt>'s playhead to the
<tt class="literal">doneLoading</tt> frame, and then we display the value
of <tt class="literal">output</tt> (supplied by <em class="filename">echo.pl
</em>) in <tt class="literal">outputField</tt>. Our use of the
<em class="filename">data</em> event handler ensures that the
<tt class="literal">output</tt> variable will always be loaded before we
attempt to display its value in the <tt class="literal">outputField</tt>
text field.</p>


<p>All that's left to do is try your form out! Export your movie,
enter some text in the <tt class="literal">input</tt> text field, and click
the Submit button. If the form doesn't work the first time,
make sure your server script is configured properly. And remember,
you can study the functional version posted at the online Code Depot.</p>


<p>Reader Exercise: Try adding a <a name="INDEX-2147" /> <a name="INDEX-2148" />Reset button to your form that clears the
value of its input field. Create a new button in the
<tt class="literal">formClip</tt> and attach the following code to it:</p>


<blockquote><pre class="code">on (release) {
  input = "";
}</pre></blockquote>


<p>Also, try adding more than one input field to your form; the Perl
script will faithfully return as many variables as you send it. Can
you split them up and display each one's value <a name="INDEX-2149" />separately?</p>
</div>


<hr width="684" align="left" />
<div class="navbar"><table width="684" border="0"><tr><td align="left" valign="top" width="228"><a href="ch17_01.htm"><img alt="Previous" border="0" src="../gifs/txtpreva.gif" /></a></td><td align="center" valign="top" width="228"><a href="index.htm"><img alt="Home" border="0" src="../gifs/txthome.gif" /></a></td><td align="right" valign="top" width="228"><a href="ch17_03.htm"><img alt="Next" border="0" src="../gifs/txtnexta.gif" /></a></td></tr><tr><td align="left" valign="top" width="228">17. Flash Forms</td><td align="center" valign="top" width="228"><a href="index/index.htm"><img alt="Book Index" border="0" src="../gifs/index.gif" /></a></td><td align="right" valign="top" width="228">17.3. Onward!</td></tr></table></div>
<hr width="684" align="left" />

<img alt="Library Navigation Links" border="0" src="../gifs/navbar.gif" usemap="#library-map" />
<p><font size="-1"><a href="copyrght.htm">Copyright &copy; 2002</a> O'Reilly &amp; Associates. All rights reserved.</font></p>

<map name="library-map"><area href="../index.htm" coords="0,1,78,93" shape="rect" /><area href="../wdesign/index.htm" coords="80,2,155,96" shape="rect" /><area href="../xhtml/index.htm" coords="158,0,263,97" shape="rect" /><area href="../audio/index.htm" coords="265,1,335,97" shape="rect" /><area href="../css/index.htm" coords="338,1,434,93" shape="rect" /><area href="index.htm" coords="439,0,540,102" shape="rect" /><area href="../infoarch/index.htm" coords="544,0,685,102" shape="rect" /></map>

</body></html>
