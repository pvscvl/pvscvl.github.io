<html><head><title>Movie Clip Methods (ActionScript: The Definitive Guide)</title><link rel="stylesheet" type="text/css" href="../style/style1.css" />

<meta name="DC.Creator" content="Colin Moock" /><meta name="DC.Format" content="text/xml" scheme="MIME" /><meta name="DC.Language" content="en-US" /><meta name="DC.Publisher" content="O'Reilly &amp; Associates, Inc." /><meta name="DC.Source" scheme="ISBN" content="1565928520L" /><meta name="DC.Subject.Keyword" content="stuff" /><meta name="DC.Title" content="ActionScript: The Definitive Guide" /><meta name="DC.Type" content="Text.Monograph" />

</head><body bgcolor="#ffffff">

<img alt="Book Home" border="0" src="gifs/smbanner.gif" usemap="#banner-map" /><map name="banner-map"><area shape="rect" coords="1,-2,616,66" href="index.htm" alt="ActionScript: The Definitive Guide" /><area shape="rect" coords="629,-11,726,25" href="jobjects/fsearch.htm" alt="Search this book" /></map>

<div class="navbar"><table width="684" border="0"><tr><td align="left" valign="top" width="228"><a href="ch13_07.htm"><img alt="Previous" border="0" src="../gifs/txtpreva.gif" /></a></td><td align="center" valign="top" width="228"><a href="index.htm">ActionScript: The Definitive Guide</a></td><td align="right" valign="top" width="228"><a href="ch13_09.htm"><img alt="Next" border="0" src="../gifs/txtnexta.gif" /></a></td></tr></table></div>
<hr width="684" align="left" />


<h2 class="sect1">13.8. Movie Clip Methods</h2>


<p>In <a href="ch12_01.htm">Chapter 12, "Objects and Classes"</a>, <a name="INDEX-1794" /> <a name="INDEX-1795" />we learned
about a special type of property called a
<em class="emphasis">method</em>, which is a function attached to an
object. Methods are most commonly used to manipulate, interact with,
or control the objects to which they are attached. To control movie
clips in various programmatic ways, we may use one of the built-in
movie clip methods. We may also define our own movie clip methods in
an individual instance or in the Library symbol of a movie clip.</p>


<a name="ch13-44-fm2xml" /><div class="sect2">
<h3 class="sect2">13.8.1. Creating Movie Clip Methods</h3>


<p>To add a <a name="INDEX-1796" />new
method to a movie clip, we define a function on the clip's
timeline (or in one of the clip's event handlers) or we assign
a function to a property of the clip. For example:</p>


<blockquote><pre class="code">// Create a method by defining a function on the timeline of a clip
function halfSpin( ) {
  _rotation += 180;
}
// Create a method by assigning a function literal to a property of a clip
myClip.coords = function( ) { return [_x, _ y]; };
// This method applies a custom transformation to a clip
myClip.myTransform = function ( ) {
  _rotation += 10;
  _xscale -= 25;
  _ yscale -= 25;
  _alpha -= 25;
}</pre></blockquote>
</div>




<a name="ch13-45-fm2xml" /><div class="sect2">
<h3 class="sect2">13.8.2. Invoking Movie Clip Methods</h3>


<p>Invoking a <a name="INDEX-1797" />method
on a movie clip works exactly like invoking a method on any object.
We supply the name of the clip and the name of the method, as
follows:</p>


<blockquote><pre class="code"><em class="replaceable">myClip</em>.<em class="replaceable">methodName</em>( );</pre></blockquote>


<p>If the method requires arguments, we pass them along during
invocation:</p>


<blockquote><pre class="code">_root.square(5);   // Provide 5 as an argument to the <em class="replaceable">square()</em> method</pre></blockquote>


<p>As we learned earlier, when we're working on the timeline of a
clip or in a clip's event handler, we may invoke most methods
on the current clip directly, without specifying an instance
identifier:</p>


<blockquote><pre class="code">square(10);        // Invoke the custom <em class="replaceable">square()</em> method of the current clip
play( );            // Invoke the built-in <em class="replaceable">play()</em> method of the current clip</pre></blockquote>


<p>But some built-in methods require an instance identifier; see <a href="ch13_08.htm">Section 13.8.3.1, "Method versus global function overlap issues"</a>.</p>
</div>




<a name="ch13-46-fm2xml" /><div class="sect2">
<h3 class="sect2">13.8.3. Built-in Movie Clip Methods</h3>


<p>Recall <a name="INDEX-1798" />
<a name="INDEX-1799" />that the
generic <em class="filename">Object</em> class equips all its member
objects with the built-in methods <em class="filename">toString( )</em>
and <em class="filename">valueOf( )</em>. Recall similarly that other
classes define built-in methods that can be used by their member
objects: <em class="filename">Date</em> objects have a <em class="filename">getHours(
)</em> method, <em class="filename">Color</em> objects have
<em class="filename">setRGB( )</em>, <em class="filename">Array</em> objects
have <em class="filename">push( )</em> and <em class="filename">pop( )</em>,
and so on. Movie clips are no different. They come equipped with a
series of built-in methods that we use to control movie clips'
appearance and behavior, to check their characteristics, and even to
create new movie clips. The movie clip methods are one of the central
features of ActionScript. <a href="ch13_08.htm">Table 13-2</a> gives an
overview of the movie clip methods that are covered in depth in <a href="part3.htm">Part III, "Language Reference"</a>.</p>


<a name="ch13-43058" /><h4 class="objtitle">Table 13-2. The Built-in Movie Clip Methods </h4><table border="1">



<tr>
<th>
<p>Method Name</p></th>
<th>
<p>Method Description</p></th>
</tr>




<tr>
<td>
<p><a name="INDEX-1800" />
<a name="INDEX-1801" /><em class="filename">attachMovie( )</em></p></td>
<td>
<p>Creates a new instance</p></td>
</tr>

<tr>
<td>
<p><a name="INDEX-1802" />
<a name="INDEX-1803" /><em class="filename">duplicateMovieClip(
)</em></p></td>
<td>
<p>Creates a copy of an instance</p></td>
</tr>

<tr>
<td>
<p><a name="INDEX-1804" />
<a name="INDEX-1805" /><em class="filename">getBounds( )</em></p></td>
<td>
<p>Describes the visual region occupied by the clip</p></td>
</tr>

<tr>
<td>
<p><a name="INDEX-1806" />
<a name="INDEX-1807" /><em class="filename">getBytesLoaded( )</em></p></td>
<td>
<p>Returns the number of downloaded bytes of an instance or a movie</p></td>
</tr>

<tr>
<td>
<p><a name="INDEX-1808" />
<a name="INDEX-1809" /><em class="filename">getBytesTotal( )</em></p></td>
<td>
<p>Returns the physical byte size of an instance or a movie</p></td>
</tr>

<tr>
<td>
<p><a name="INDEX-1810" />
<a name="INDEX-1811" /><em class="filename">getURL( )</em></p></td>
<td>
<p>Loads an external document (usually an <em class="filename">.html</em>
file) into the browser</p></td>
</tr>

<tr>
<td>
<p><a name="INDEX-1812" />
<a name="INDEX-1813" /><em class="filename">globalToLocal( )</em></p></td>
<td>
<p>Converts main Stage coordinates to clip coordinates</p></td>
</tr>

<tr>
<td>
<p><a name="INDEX-1814" />
<a name="INDEX-1815" /><em class="filename">gotoAndPlay( )</em></p></td>
<td>
<p>Moves the playhead to a new frame and plays the movie</p></td>
</tr>

<tr>
<td>
<p><a name="INDEX-1816" />
<a name="INDEX-1817" /><em class="filename">gotoAndStop( )</em></p></td>
<td>
<p>Moves the playhead to a new frame and halts it there</p></td>
</tr>

<tr>
<td>
<p><a name="INDEX-1818" />
<a name="INDEX-1819" /><em class="filename">hitTest( )</em></p></td>
<td>
<p>Indicates whether a point is within a clip</p></td>
</tr>

<tr>
<td>
<p><a name="INDEX-1820" />
<a name="INDEX-1821" /><em class="filename">loadMovie( )</em></p></td>
<td>
<p>Brings an external <em class="filename">.swf</em> file into the Player</p></td>
</tr>

<tr>
<td>
<p><a name="INDEX-1822" />
<a name="INDEX-1823" /><em class="filename">loadVariables( )</em></p></td>
<td>
<p>Brings external variables into a clip or movie</p></td>
</tr>

<tr>
<td>
<p><a name="INDEX-1824" />
<a name="INDEX-1825" /><em class="filename">localToGlobal( )</em></p></td>
<td>
<p>Converts clip coordinates to main Stage coordinates</p></td>
</tr>

<tr>
<td>
<p><a name="INDEX-1826" />
<a name="INDEX-1827" /><em class="filename">nextFrame( )</em></p></td>
<td>
<p>Moves the playhead ahead one frame</p></td>
</tr>

<tr>
<td>
<p><a name="INDEX-1828" />
<a name="INDEX-1829" /><em class="filename">play( )</em></p></td>
<td>
<p>Plays the clip</p></td>
</tr>

<tr>
<td>
<p><a name="INDEX-1830" />
<a name="INDEX-1831" /><em class="filename">prevFrame( )</em></p></td>
<td>
<p>Moves the playhead back one frame</p></td>
</tr>

<tr>
<td>
<p><a name="INDEX-1832" />
<a name="INDEX-1833" /><em class="filename">removeMovieClip( )</em></p></td>
<td>
<p>Deletes a duplicated or attached instance</p></td>
</tr>

<tr>
<td>
<p><a name="INDEX-1834" />
<a name="INDEX-1835" /><em class="filename">startDrag( )</em></p></td>
<td>
<p>Causes the instance or movie to physically follow the mouse pointer
around the Stage</p></td>
</tr>

<tr>
<td>
<p><a name="INDEX-1836" />
<a name="INDEX-1837" /><em class="filename">stop( )</em></p></td>
<td>
<p>Halts the playback of the instance or movie</p></td>
</tr>

<tr>
<td>
<p><a name="INDEX-1838" />
<a name="INDEX-1839" /><em class="filename">stopDrag( )</em></p></td>
<td>
<p>Ends any drag operation currently in progress</p></td>
</tr>

<tr>
<td>
<p><a name="INDEX-1840" />
<a name="INDEX-1841" /><em class="filename">swapDepths( )</em></p></td>
<td>
<p>Alters the layering of an instance in an instance stack</p></td>
</tr>

<tr>
<td>
<p><a name="INDEX-1842" />
<a name="INDEX-1843" /><em class="filename">unloadMovie( )</em></p></td>
<td>
<p>Removes an instance or main movie from a document level or host clip</p></td>
</tr>

<tr>
<td>
<p><a name="INDEX-1844" />
<a name="INDEX-1845" /><em>valueOf( )</em></p></td>
<td>
<p>A string representing the path to the instance in absolute terms,
using dot notation</p></td>
</tr>


</table>


<a name="ch13-58072" /><div class="sect3">
<h3 class="sect3">13.8.3.1. Method versus global function overlap issues</h3>


<p>As we've <a name="INDEX-1846" /> <a name="INDEX-1847" /> <a name="INDEX-1848" />mentioned
several times during this chapter, some movie clip methods have the
same name as equivalent global functions. You can see this for
yourself in the Flash authoring tool. Open the
<a name="INDEX-1849" />Actions panel, make
sure you're in Expert Mode, and then take a look in the Actions
folder. You'll see a long list of Actions including
<em class="filename">gotoAndPlay( )</em>, <em class="filename">gotoAndStop(
)</em>, <em class="filename">nextFrame( )</em>, and
<em class="filename">unloadMovie( )</em>. Those Actions are also available
as movie clip methods. The duplication is not purely a matter of
categorization; the Actions are global functions, fully distinct from
the corresponding movie clip methods.</p>


<p>So, when we execute:</p>


<blockquote><pre class="code">myClip.gotoAndPlay(5);</pre></blockquote>


<p>we're accessing the <em class="emphasis">method</em> named
<em class="filename">gotoAndPlay( )</em>. But when we execute:</p>


<blockquote><pre class="code">gotoAndPlay(5);</pre></blockquote>


<p>we're accessing the <em class="emphasis">global function</em> called
<em class="filename">gotoAndPlay( )</em>. These two commands have the same
name, but they are not the same thing. The <em class="filename">gotoAndPlay(
)</em> global function operates on the current instance or
movie. The <em class="filename">gotoAndPlay( )</em> method operates on the
clip object through which it is invoked. Most of the time, the subtle
difference is of no consequence. But for some overlapping
method/function pairs, the difference is potentially quite vexing.</p>


<p>Some global functions require a <a name="INDEX-1850" /> <a name="INDEX-1851" />parameter called
<em class="replaceable">target</em> that specifies the clip on which
the function should operate. This <em class="replaceable">target</em>
parameter is not required by the comparable method versions because
the methods automatically operate on the clips through which they are
invoked. For example, <em class="filename">unloadMovie( )</em> in its
method form works like this:</p>


<blockquote><pre class="code"><em class="replaceable">myClip</em>.unloadMovie( );</pre></blockquote>


<p>As a method, <em class="filename">unloadMovie( )</em> is invoked without
parameters and automatically affects
<em class="replaceable">myClip</em>. But in its global function form,
<em class="filename">unloadMovie( )</em> works like this:</p>


<blockquote><pre class="code">unloadMovie(<em class="replaceable">target</em>);</pre></blockquote>


<p>The global function requires <em class="replaceable">target</em> as a
parameter that specifies which movie to unload. Why should this be a
problem? Well, the first reason is that we may mistakenly expect to
be able to unload the current document by using the global version of
<em class="filename">unloadMovie( )</em> without any parameters, as
we'd use <em class="filename">gotoAndPlay( )</em> without
parameters:</p>


<blockquote><pre class="code">unloadMovie( );</pre></blockquote>


<p>This format does <em class="emphasis">not</em> unload the current clip. It
causes a "Wrong number of parameters" error. The second
reason that <em class="replaceable">target</em> parameters in global
functions can cause problems is a little more complex and can be
quite a pain to track down if you're not expecting it. To
supply a <em class="replaceable">target</em> clip to a global function
that requires a <em class="replaceable">target</em> parameter, we may
use either a string, which expresses the path to the clip we wish to
affect, or a clip reference. For example:</p>


<blockquote><pre class="code">unloadMovie(_level1);    // Target clip is a reference
unloadMovie("_level1");  // Target clip is a string</pre></blockquote>


<p>We may use a reference simply because references to clip objects are
converted to movie clip paths when used in a string context. Simple
enough, but if the <em class="replaceable">target</em> parameter
resolves to an empty string or an <tt class="literal">undefined</tt> value,
the <em class="emphasis">function operates on the current timeline </em>!
For example:</p>


<blockquote><pre class="code">unloadMovie(x);   // If <em class="replaceable">x</em> doesn't exist, <em class="replaceable">x</em> yields <em class="replaceable">undefined</em>, so
                  // the function operates on the current timeline

unloadMovie("");  // The <em class="replaceable">target</em> is the empty string, so the function operates
                  // on the current timeline</pre></blockquote>


<p>This can cause some quite unexpected results. Consider what happens
if we refer to a level that doesn't exist:</p>


<blockquote><pre class="code">unloadMovie(_level1);</pre></blockquote>


<p>If <tt class="literal">_level1</tt> is empty, the interpreter resolves the
reference as though it were an undeclared variable. This yields
<tt class="literal">undefined</tt>, so the function operates on the current
timeline, not <tt class="literal">_level1</tt>! So, how do we accommodate
this behavior? There are a few options. We may check for the
existence of our target before executing a function on it:</p>


<blockquote><pre class="code">if (_level1) {
  unloadMovie(_level1);
}</pre></blockquote>


<p>We may choose to always use a string to indicate the path to our
target. If the path specified in our string does not resolve to a
real clip, the function fails silently:</p>


<blockquote><pre class="code">unloadMovie("_level1");</pre></blockquote>


<p>In some cases, we may use the equivalent numeric function for our
operation:</p>


<blockquote><pre class="code">unloadMovieNum(1);</pre></blockquote>


<p>Or, we may choose to avoid the issue altogether by always using
methods:</p>


<blockquote><pre class="code">_level1.unloadMovie( );</pre></blockquote>


<p>For reference, here are the troublemakers (the Flash 5 ActionScript
global functions that take <em class="replaceable">target</em>
parameters):</p>


<blockquote class="simplelist">

<p><em class="filename">duplicateMovieClip( )</em><a name="INDEX-1852" /></p>

<p><em class="filename">loadMovie( )</em><a name="INDEX-1853" /></p>

<p><em class="filename">loadVariables( )</em><a name="INDEX-1854" /></p>

<p><em class="filename">print( )</em><a name="INDEX-1855" /></p>

<p><em class="filename">printAsBitmap( )</em><a name="INDEX-1856" /></p>

<p><em class="filename">removeMovieClip( )</em><a name="INDEX-1857" /></p>

<p><em class="filename">startDrag( )</em><a name="INDEX-1858" /></p>

<p><em class="filename">unloadMovie( )</em><a name="INDEX-1859" /></p>

</blockquote>


<p>If you're experiencing unexplained problems in a movie, you may
want to check that list to see if you're misusing a global
function. When passing a clip reference as a
<em class="replaceable">target</em> parameter, be sure <a name="INDEX-1860" /> <a name="INDEX-1861" />to <a name="INDEX-1862" /> <a name="INDEX-1863" /> <a name="INDEX-1864" />double-check
<a name="INDEX-1865" />
<a name="INDEX-1866" />your
<a name="INDEX-1867" />
<a name="INDEX-1868" />syntax.</p>
</div>
</div>


<hr width="684" align="left" />
<div class="navbar"><table width="684" border="0"><tr><td align="left" valign="top" width="228"><a href="ch13_07.htm"><img alt="Previous" border="0" src="../gifs/txtpreva.gif" /></a></td><td align="center" valign="top" width="228"><a href="index.htm"><img alt="Home" border="0" src="../gifs/txthome.gif" /></a></td><td align="right" valign="top" width="228"><a href="ch13_09.htm"><img alt="Next" border="0" src="../gifs/txtnexta.gif" /></a></td></tr><tr><td align="left" valign="top" width="228">13.7. Built-in Movie Clip Properties</td><td align="center" valign="top" width="228"><a href="index/index.htm"><img alt="Book Index" border="0" src="../gifs/index.gif" /></a></td><td align="right" valign="top" width="228">13.9. Applied Movie Clip Examples</td></tr></table></div>
<hr width="684" align="left" />

<img alt="Library Navigation Links" border="0" src="../gifs/navbar.gif" usemap="#library-map" />
<p><font size="-1"><a href="copyrght.htm">Copyright &copy; 2002</a> O'Reilly &amp; Associates. All rights reserved.</font></p>

<map name="library-map"><area href="../index.htm" coords="0,1,78,93" shape="rect" /><area href="../wdesign/index.htm" coords="80,2,155,96" shape="rect" /><area href="../xhtml/index.htm" coords="158,0,263,97" shape="rect" /><area href="../audio/index.htm" coords="265,1,335,97" shape="rect" /><area href="../css/index.htm" coords="338,1,434,93" shape="rect" /><area href="index.htm" coords="439,0,540,102" shape="rect" /><area href="../infoarch/index.htm" coords="544,0,685,102" shape="rect" /></map>

</body></html>
