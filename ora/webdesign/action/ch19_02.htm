<html><head><title>Debugging Methodology (ActionScript: The Definitive Guide)</title><link rel="stylesheet" type="text/css" href="../style/style1.css" />

<meta name="DC.Creator" content="Colin Moock" /><meta name="DC.Format" content="text/xml" scheme="MIME" /><meta name="DC.Language" content="en-US" /><meta name="DC.Publisher" content="O'Reilly &amp; Associates, Inc." /><meta name="DC.Source" scheme="ISBN" content="1565928520L" /><meta name="DC.Subject.Keyword" content="stuff" /><meta name="DC.Title" content="ActionScript: The Definitive Guide" /><meta name="DC.Type" content="Text.Monograph" />

</head><body bgcolor="#ffffff">

<img alt="Book Home" border="0" src="gifs/smbanner.gif" usemap="#banner-map" /><map name="banner-map"><area shape="rect" coords="1,-2,616,66" href="index.htm" alt="ActionScript: The Definitive Guide" /><area shape="rect" coords="629,-11,726,25" href="jobjects/fsearch.htm" alt="Search this book" /></map>

<div class="navbar"><table width="684" border="0"><tr><td align="left" valign="top" width="228"><a href="ch19_01.htm"><img alt="Previous" border="0" src="../gifs/txtpreva.gif" /></a></td><td align="center" valign="top" width="228"><a href="index.htm">ActionScript: The Definitive Guide</a></td><td align="right" valign="top" width="228"><a href="ch19_03.htm"><img alt="Next" border="0" src="../gifs/txtnexta.gif" /></a></td></tr></table></div>
<hr width="684" align="left" />


<h2 class="sect1">19.2. Debugging Methodology</h2>


<p>Let's <a name="INDEX-2301" />take
a quick look at some techniques involved in code debugging. Debugging
can be broken into three stages:</p>


<ul><li><p>Recognizing and reproducing a problem</p></li><li><p>Identifying the source of the problem</p></li><li><p>Fixing the problem</p></li></ul>
<a name="ch19-11-fm2xml" /><div class="sect2">
<h3 class="sect2">19.2.1. Recognizing Bugs</h3>


<p>Very
<a name="INDEX-2302" />often,
<a name="INDEX-2303" />we
recognize code problems as part of the active process of programming.
That is, we write some code, test our movie, and find that the movie
doesn't work properly. Problem recognized.</p>


<p>The earlier a problem is discovered, the better. The process of
writing code should therefore be a constant ebb and flow of writing
and testing -- write a few lines, export the movie, make sure the
lines work as expected, then write a few more lines, export the
movie, and so on. Make sure each component of a program works on its
own before testing the program as a whole. Try not to get carried
away writing a complex body of code without testing it frequently
along the way.</p>


<p>Don't assume your movie is perfect just because you can't
find any bugs on your own. Always schedule time for external testing
by target users, particularly if the code you are delivering is part
of a product or a service intended for a client. As described
earlier, implement error checking to head off possible problems with
incorrect data input. For example, if you write a function that
expects an integer argument, you might use the
<em class="filename">typeof</em> operator to verify that the input
parameters are of the correct type. Also test <em class="emphasis">end
conditions</em> such as extremely large, small, and negative
values, including zero.</p>


<p>Don't underestimate the value of finding the <em class="emphasis">minimum
reproducible steps</em> that replicate the problem. These
should be the fewest steps that recreate the error reliably. A bug
report such as, "I played it for an hour and then it
froze" is not very helpful. Useful bug reports include numbered
steps such as:</p>


<ol><li><p>Enter 0 for the number of years.</p></li><li><p>Click the Calculate button.</p></li><li><p>The results field shows "NaN" instead of a dollar amount.</p></li></ol>
</div>




<a name="ch19-12-fm2xml" /><div class="sect2">
<h3 class="sect2">19.2.2. Identifying the Source of a Bug</h3>


<p>Once
<a name="INDEX-2304" />we've recognized a bug, our
quest for a solution has only begun. Our first task is to find the
source of the bug, however far upstream that may be. A bug can be
thought of like a heart attack that was caused by bad dietary habits
years earlier. The heart attack is merely the most manifest symptom,
but you must often correct something earlier in the process. Most
bugs are caused by false assumptions; we assume we've typed the
name of a variable correctly but we haven't, or we assume a
text field stores numeric data but it doesn't. By executing a
series of <em class="filename">trace( )</em> statements or using the
Debugger or List Variables command, we can test our assumptions
against the interpreter's understanding of our code.</p>


<p>Here, for example, is some code with a bug. It incorrectly sets
<tt class="literal">status</tt> to "equal":</p>


<blockquote><pre class="code">var x = 11;
isTen(x);
function isTen(val) {
  if (val = 10) {
    status = "equal";
  }
}</pre></blockquote>


<p>To find out what's wrong with the code, we compare what we
<em class="emphasis">think</em> the code should be doing against what it
<em class="emphasis">actually</em> is doing, one step at a time:</p>


<blockquote><pre class="code">// This should set <em class="replaceable">x</em> to 11
var x = 11;

// Let's see if it really does
trace(x);     // Yup...this displays: 11

// This should invoke the <em class="replaceable">isTen( )</em> function
isTen(x);

// Now on to our function
function isTen(val) {
  // Let's make sure our function is being called
  trace("isTen was called");    // Yup...this displays: "isTen was called"

  // Now let's make sure our parameter was passed correctly
  trace("val is " + val);       // Yup...this displays: "val is 11"</pre></blockquote>


<p>Let's pause here for a second. Notice what's
happened -- we've made it most of the way through our code
and so far everything has worked as expected. Our variable was set
correctly; <em class="filename">isTen( )</em> was called and received its
argument properly.</p>




<a name="ch19-14-fm2xml" /><blockquote><h4>TIP</h4>
<p>Many errors occur because the code that you think is being executed
has never even been reached! We can use <em class="filename">trace( )</em>
statements to verify that a particular portion of our code is
reached.</p>

</blockquote>

<p>By process of elimination, we already know that our code's
problem must lie either in the conditional statement
<tt class="literal">if(val</tt> <tt class="literal">=</tt> <tt class="literal">10)</tt>
or in the text field assignment <tt class="literal">status</tt>
<tt class="literal">=</tt> <tt class="literal">"equal"</tt>. We next check our
conditional statement by using <em class="filename">trace( )</em> to
display the value of its test expression (we're expecting
either <tt class="literal">true</tt> or <tt class="literal">false</tt>):</p>


<blockquote><pre class="code">trace(val = 10);</pre></blockquote>


<p>Eureka! The Output window displays <tt class="literal">10</tt>, not
<tt class="literal">true</tt> or <tt class="literal">false</tt> as we had
expected.</p>


<p>On closer inspection, we see that the test expression is an
assignment statement, not a comparison statement! We forgot an equal
sign in our equality comparison operator. The expression
<tt class="literal">if(val</tt> <tt class="literal">=</tt> <tt class="literal">10)</tt>
should be <tt class="literal">if(val</tt> <tt class="literal">==</tt>
<tt class="literal">10)</tt>.</p>


<p>Obviously, not all bugs are as simple as our conditional statement
bug (which is an exceedingly common error), but the approach we used
is applicable to most bug hunts: execute a series of <em class="filename">trace(
)</em> functions to create a running, step-by-step report on
the actual behavior of a movie's code and use the Debugger as
explained in the Macromedia documentation.</p>
</div>




<a name="ch19-15-fm2xml" /><div class="sect2">
<h3 class="sect2">19.2.3. Common Sources of Bugs</h3>


<p><a href="ch19_02.htm">Table 19-1</a> lists some common <a name="INDEX-2305" />sources of bugs in ActionScript.</p>


<a name="ch19-65658" /><h4 class="objtitle">Table 19-1. ActionScript Gotchas </h4><table border="1">



<tr>
<th>
<p>Problem</p></th>
<th>
<p>Description</p></th>
</tr>




<tr>
<td>
<p>Code in the wrong place</p></td>
<td>
<p>All code must be attached to a movie clip, frame, or button. Take
care that your code is actually attached to what you intend by
observing the title of the Actions panel -- when attaching code to
a frame, the Actions panel's title reads Frame Actions; when
attaching code to a movie clip or button, the Actions panel title
reads Object Actions. If you want a script to be on a particular
frame, make sure that frame is selected in the timeline before you
start coding, and that there's a keyframe where you want to
place your code. If you want a script to be on a movie clip or
button, make sure that object is selected on stage before you start
coding. Use the Movie Explorer (Window <img align="absmiddle" src="figs/U2192.gif" /> Movie Explorer) to keep
track of exactly where code is attached.</p></td>
</tr>

<tr>
<td>
<p>Missing event handler</p></td>
<td>
<p><a name="INDEX-2306" />
<a name="INDEX-2307" />Code
attached to movie clips and buttons <em class="emphasis">must</em> be
contained by an event handler. For movie clips, use:</p>


<p><tt class="literal"> onClipEvent
(</tt><em class="replaceable">event</em><tt class="literal">) {</tt></p>


<p> <tt class="literal">   // statements</tt></p>


<p><tt class="literal">  }</tt></p>


<p>For buttons, use:</p>


<blockquote><pre class="code">on (<em class="replaceable">event</em>) { 
    // statements
  }</pre></blockquote>


<p>where <em class="replaceable">event</em> is the name of the event to
handle. The error, "Statement must appear within on
handler," indicates that you're missing an event handler.
See <a href="ch10_01.htm">Chapter 10, "Events and Event Handlers"</a>.</p></td>
</tr>

<tr>
<td>
<p>Bad movie clip reference</p></td>
<td>
<p>A <a name="INDEX-2308" />movie clip that doesn't exist
is referenced, or a reference to a movie clip is malformed. Check
that all instances are named, and that instance names match the
reference supplied. See <a href="ch13_05.htm">Section 13.5.3, "Referring to Nested Instances"</a> in <a href="ch13_01.htm">Chapter 13, "Movie Clips"</a> for information on composing valid movie clip
references.</p></td>
</tr>

<tr>
<td>
<p>Unexpected type conversion</p></td>
<td>
<p>The <a name="INDEX-2309" />result of a data conversion yields an
unexpected result. For example, <tt class="literal">3</tt>
<tt class="literal">+</tt> <tt class="literal">"4"</tt> yields the string
"34", not the number 7. Similarly, the string
"true" converts to the Boolean value
<tt class="literal">false</tt>! Study type conversion rules in <a href="ch03_01.htm">Chapter 3, "Data and Datatypes"</a>. Check datatypes using the
<em class="filename">typeof</em><a name="INDEX-2310" /> operator.</p></td>
</tr>

<tr>
<td>
<p>Missing semicolon</p></td>
<td>
<p>A <a name="INDEX-2311" />
<a name="INDEX-2312" />statement ends
prematurely because a semicolon is missing. See <a href="ch14_01.htm">Chapter 14, "Lexical Structure"</a> for proper semicolon usage.</p></td>
</tr>

<tr>
<td>
<p>Problem quotation mark</p></td>
<td>
<p>A <a name="INDEX-2313" />
<a name="INDEX-2314" />string includes an unescaped quotation
character that interferes with the string literal. See <a href="ch04_05.htm">Section 4.5.2, "String Literals"</a> in <a href="ch04_01.htm">Chapter 4, "Primitive Datatypes"</a>.</p></td>
</tr>

<tr>
<td>
<p>Bad text field data usage</p></td>
<td>
<p>A <a name="INDEX-2315" />text field is treated as a number or other
datatype, not a string. User input in text fields is always a string
value and should be converted manually before being treated as any
other type.</p></td>
</tr>

<tr>
<td>
<p>Scope problems</p></td>
<td>
<p>A <a name="INDEX-2316" />variable, property, clip, or function is
referenced in the wrong scope. For example, a statement in a clip
handler attempts to invoke a function scoped to that clip's
parent timeline. See <a href="ch10_07.htm">Section 10.7, "Event Handler Scope"</a> in <a href="ch10_01.htm">Chapter 10, "Events and Event Handlers"</a>, <a href="ch02_05.htm">Section 2.5, "Variable Scope"</a> in <a href="ch02_01.htm">Chapter 2, "Variables"</a>, and <a href="ch09_06.htm">Section 9.6, "Function Availability and Life Span"</a> in
<a href="ch09_01.htm">Chapter 9, "Functions"</a>.</p></td>
</tr>

<tr>
<td>
<p>Global function versus method confusion</p></td>
<td>
<p>Some global functions have the same name as movie clip methods.
Occasionally, this overlap causes problems. See <a href="ch13_08.htm">Section 13.8.3.1, "Method versus global function overlap issues"</a>, in <a href="ch13_01.htm">Chapter 13, "Movie Clips"</a>.</p></td>
</tr>

<tr>
<td>
<p>Content not yet loaded</p></td>
<td>
<p>A reference to a clip, property, function, or variable can't be
resolved because the content is not yet loaded. Be sure all content
is loaded by checking the
<em class="filename">MovieClip.</em><tt class="literal">_framesloaded</tt>
property as shown in <a href="part3.htm">Part III, "Language Reference"</a><em class="emphasis">.</em></p></td>
</tr>

<tr>
<td>
<p>Incorrect capitalization</p></td>
<td>
<p>Some
<a name="INDEX-2317" />keywords are
<a name="INDEX-2318" />
<a name="INDEX-2319" />case sensitive in ActionScript. If you
mis-capitalize <em class="emphasis">onClipEvent </em>as
<em class="emphasis">onclipevent</em>, ActionScript will think you are
trying to call a custom function named
<em class="filename">onclipevent</em> instead of using the built-in
<em class="filename">onClipEvent</em> handler keyword. As such, it will
give you an error when it encounters the <tt class="literal">{</tt> at the
beginning of the <em class="filename">onClipEvent </em>statement block (it
expects a semicolon indicating the end of what it perceives to be an
<a name="INDEX-2320" /><em class="filename">onclipevent
</em>function call). See <a href="ch14_06.htm">Section 14.6, "Case Sensitivity"</a> in
<a href="ch14_01.htm">Chapter 14, "Lexical Structure"</a>.</p></td>
</tr>


</table>
</div>




<a name="ch19-16-fm2xml" /><div class="sect2">
<h3 class="sect2">19.2.4. Fixing Bugs</h3>


<p>In
<a name="INDEX-2321" />some
cases, the fix for an identified bug is self-evident. For example, if
we discover a bug caused by a missing quotation mark on a string, we
fix the bug by adding the quotation mark.</p>


<p>In more involved programs, fixing bugs can be a serious challenge. If
a bug is proving difficult to fix, consider the following:</p>


<ul><li><p>Don't be afraid to rewrite code. In many cases the best way to
fix overly complicated code is to rearchitect the system and start
from scratch. Recreating a program nearly always goes faster and
smoother than creating the program in the first place. Most experts
agree on this one (for example, Quake III was a complete rewrite of
the Quake II engine). That said, new code still needs to be debugged.
Don't throw out perfectly good code close to a deadline. Keep
what's good and rewrite only the problematic code.</p></li><li><p>Break problematic components out into separate test movies. Work on
each aspect of a system in complete isolation, then integrate working
sections one at a time.</p></li><li><p>Have a peer review your code. Don't be afraid. We're all
embarrassed by the code we wrote a year earlier.</p></li><li><p>Ask for help at one of the resources cited in <a href="appa_01.htm">Appendix A, "Resources"</a>. For example, the FlashCoders mailing list is
devoted entirely to ActionScript questions.</p></li></ul>
<p>For lots of good advice on programming techniques, see
<em class="emphasis">Extreme Programming Explained</em> by
<a name="INDEX-2322" />
<a name="INDEX-2323" />Kent Beck
(Addison Wesley) and <em class="emphasis">Code Complete</em> by Steve
McConnell <a name="INDEX-2324" />(Microsoft Press).</p>
</div>


<hr width="684" align="left" />
<div class="navbar"><table width="684" border="0"><tr><td align="left" valign="top" width="228"><a href="ch19_01.htm"><img alt="Previous" border="0" src="../gifs/txtpreva.gif" /></a></td><td align="center" valign="top" width="228"><a href="index.htm"><img alt="Home" border="0" src="../gifs/txthome.gif" /></a></td><td align="right" valign="top" width="228"><a href="ch19_03.htm"><img alt="Next" border="0" src="../gifs/txtnexta.gif" /></a></td></tr><tr><td align="left" valign="top" width="228">19. Debugging</td><td align="center" valign="top" width="228"><a href="index/index.htm"><img alt="Book Index" border="0" src="../gifs/index.gif" /></a></td><td align="right" valign="top" width="228">19.3. Onward!</td></tr></table></div>
<hr width="684" align="left" />

<img alt="Library Navigation Links" border="0" src="../gifs/navbar.gif" usemap="#library-map" />
<p><font size="-1"><a href="copyrght.htm">Copyright &copy; 2002</a> O'Reilly &amp; Associates. All rights reserved.</font></p>

<map name="library-map"><area href="../index.htm" coords="0,1,78,93" shape="rect" /><area href="../wdesign/index.htm" coords="80,2,155,96" shape="rect" /><area href="../xhtml/index.htm" coords="158,0,263,97" shape="rect" /><area href="../audio/index.htm" coords="265,1,335,97" shape="rect" /><area href="../css/index.htm" coords="338,1,434,93" shape="rect" /><area href="index.htm" coords="439,0,540,102" shape="rect" /><area href="../infoarch/index.htm" coords="544,0,685,102" shape="rect" /></map>

</body></html>
