<html><head><title>Applied Movie Clip Examples (ActionScript: The Definitive Guide)</title><link rel="stylesheet" type="text/css" href="../style/style1.css" />

<meta name="DC.Creator" content="Colin Moock" /><meta name="DC.Format" content="text/xml" scheme="MIME" /><meta name="DC.Language" content="en-US" /><meta name="DC.Publisher" content="O'Reilly &amp; Associates, Inc." /><meta name="DC.Source" scheme="ISBN" content="1565928520L" /><meta name="DC.Subject.Keyword" content="stuff" /><meta name="DC.Title" content="ActionScript: The Definitive Guide" /><meta name="DC.Type" content="Text.Monograph" />

</head><body bgcolor="#ffffff">

<img alt="Book Home" border="0" src="gifs/smbanner.gif" usemap="#banner-map" /><map name="banner-map"><area shape="rect" coords="1,-2,616,66" href="index.htm" alt="ActionScript: The Definitive Guide" /><area shape="rect" coords="629,-11,726,25" href="jobjects/fsearch.htm" alt="Search this book" /></map>

<div class="navbar"><table width="684" border="0"><tr><td align="left" valign="top" width="228"><a href="ch13_08.htm"><img alt="Previous" border="0" src="../gifs/txtpreva.gif" /></a></td><td align="center" valign="top" width="228"><a href="index.htm">ActionScript: The Definitive Guide</a></td><td align="right" valign="top" width="228"><a href="ch13_10.htm"><img alt="Next" border="0" src="../gifs/txtnexta.gif" /></a></td></tr></table></div>
<hr width="684" align="left" />


<h2 class="sect1">13.9. Applied Movie Clip Examples</h2>


<p>We've <a name="INDEX-1869" />now
learned the fundamentals of movie clip programming. Let's put
our knowledge to use by creating two very different applications,
both of which exemplify the typical role of movie clips as basic
content containers.</p>


<a name="ch13-74342" /><div class="sect2">
<h3 class="sect2">13.9.1. Building a Clock with Clips</h3>


<p>In <a name="INDEX-1870" /> <a name="INDEX-1871" />this chapter we learned how to create
movie clips with <em class="filename">attachMovie( )</em> and how to set
movie clip properties with the dot operator. With these relatively
simple tools and a little help from the <em class="filename">Date</em> and
<em class="filename">Color</em> classes, we have everything we need to
make a clock with functional hour, minute, and second hands.</p>


<p>First, we'll make the face and hands of the clock with the
following steps (notice that we don't place the parts of our
clock on the main Stage -- our clock will be generated entirely
through ActionScript):</p>


<ol><li><p>Start a new Flash movie.</p></li><li><p>Create a movie clip symbol named <tt class="literal">clockFace</tt> that
contains a 100-pixel-wide black circle shape.</p></li><li><p>Create a movie clip symbol named <tt class="literal">hand</tt> that
contains a 50-pixel-long, vertical red line.</p></li><li><p>Select the line in <tt class="literal">hand</tt>, then choose Window <img align="absmiddle" src="figs/U2192.gif" />
Panels <img align="absmiddle" src="figs/U2192.gif" /> Info.</p></li><li><p>Position the bottom of the line at the center of the clip by setting
the line's x-coordinate to
and its y-coordinate to -50.</p></li></ol>
<p>Now we have to export our <tt class="literal">clockFace</tt> and
<tt class="literal">hand</tt> symbols so that instances of them can be
attached dynamically to our movie:</p>


<ol><li><p>In the Library, select the <tt class="literal">clockFace</tt> clip, then
select Options <img align="absmiddle" src="figs/U2192.gif" /> Linkage. The Symbol Linkage Properties dialog
box appears.</p></li><li><p>Select Export This Symbol.</p></li><li><p>In the Identifier box, type <tt class="userinput"><b>clockFace</b></tt> and then
click OK.</p></li><li><p>Repeat steps 1 through 3 to export the <tt class="literal">hand</tt> clip,
giving it the identifier <tt class="literal">hand</tt>.</p></li></ol>
<p>The face and hands of our clock are complete and ready to be attached
to our movie. Now let's write the script that places the clock
assets on stage and positions them with each passing second:</p>


<ol><li><p>Add the script shown in <a href="ch13_09.htm">Example 13-4</a> to frame 1 of
<em class="filename">Layer 1</em> of the main timeline.</p></li><li><p>Rename <em class="filename">Layer 1</em> to <em class="filename">scripts</em>.</p></li></ol>
<p>Skim <a href="ch13_09.htm">Example 13-4</a> in its entirety first, then
we'll dissect it.</p>


<a name="ch13-95685" /><div class="example">
<h4 class="objtitle">Example 13-4. An Analog Clock </h4>

<blockquote><pre class="code">// Create clock face and hands
attachMovie("clockFace", "clockFace", 0);
attachMovie("hand", "secondHand", 3);
attachMovie("hand", "minuteHand", 2);
attachMovie("hand", "hourHand", 1);

// Position and size the clock face
clockFace._x = 275;
clockFace._y = 200;
clockFace._height = 150;
clockFace._width = 150;

// Position, size, and color the clock hands
secondHand._x = clockFace._x;
secondHand._ y = clockFace._ y;
secondHand._height = clockFace._height / 2.2;
secondHandColor = new Color(secondHand);
secondHandColor.setRGB(0xFFFFFF);
minuteHand._x = clockFace._x;
minuteHand._ y = clockFace._ y;
minuteHand._height = clockFace._height / 2.5;
hourHand._x = clockFace._x;
hourHand._ y = clockFace._ y;
hourHand._height = clockFace._height / 3.5;

// Update the rotation of hands with each passing frame
function updateClock( ) {
  var now = new Date( );
  var dayPercent = (now.getHours( ) &gt; 12 ? 
                    now.getHours() - 12 : now.getHours( )) / 12;
  var hourPercent = now.getMinutes( )/60;
  var minutePercent = now.getSeconds( )/60;
  hourHand._rotation = 360 * dayPercent + hourPercent * (360 / 24);
  minuteHand._rotation = 360 * hourPercent;
  secondHand._rotation = 360 * minutePercent;
}</pre></blockquote>
</div>


<p>That's a lot of code, so let's review it.</p>


<p>We attach the <tt class="literal">clockFace</tt> clip first and assign it a
depth of
(we want it to appear behind our clock's hands):</p>


<blockquote><pre class="code">attachMovie("clockFace", "clockFace", 0);</pre></blockquote>


<p>Next we attach three instances of the <tt class="literal">hand</tt> symbol,
assigning them the names <tt class="literal">secondHand</tt>,
<tt class="literal">minuteHand</tt>, <tt class="literal">hourHand</tt>. Each hand
resides on its own layer in the programmatically generated clip stack
above the main timeline. The <tt class="literal">secondHand</tt> (depth 3)
sits on top of the <tt class="literal">minuteHand</tt> (depth 2), which
sits on top of the <tt class="literal">hourHand</tt> (depth 1):</p>


<blockquote><pre class="code">attachMovie("hand", "secondHand", 3);
attachMovie("hand", "minuteHand", 2);
attachMovie("hand", "hourHand", 1);</pre></blockquote>


<p>At this point our code would place the clock in the top-left corner
of the Stage. Next, we move the <tt class="literal">clockFace</tt> clip to
the center of the Stage and make it larger using the
<tt class="literal">_height</tt> and <tt class="literal">_width</tt> properties:</p>


<blockquote><pre class="code">clockFace._x = 275;           // Set the horizontal location
clockFace._y = 200;           // Set the vertical location
clockFace._height = 150;      // Set the height
clockFace._width = 150;       // Set the width</pre></blockquote>


<p>Then we move the <tt class="literal">secondHand</tt> clip onto the clock
and make it almost as long as the radius of the
<tt class="literal">clockFace</tt> clip:</p>


<blockquote><pre class="code">// Place the <em class="replaceable">secondHand</em> on top of the <em class="replaceable">clockFace</em>
secondHand._X = clockFace._x;
secondHand._y = clockFace._y;
// Set the <em class="replaceable">secondHand</em>'s size
secondHand._height = clockFace._height / 2.2;</pre></blockquote>


<p>Remember that the line in the <tt class="literal">hand</tt> symbol is red,
so all our <tt class="literal">hand</tt> instances thus far are red. To
make our <tt class="literal">secondHand</tt> clip stand out, we color it
white using the <em class="filename">Color</em> class. Note the use of the
hexadecimal color value <tt class="literal">0xFFFFFF</tt> (see the <a href="ch20_05.htm">Reference 20.22</a> in <a href="part3.htm">Part III, "Language Reference"</a> for
more information on manipulating color):</p>


<blockquote><pre class="code">// Create a new Color object to control <em class="replaceable">secondHand</em>
secondHandColor = new Color(secondHand);
// Assign <em class="replaceable">secondHand</em> the color white
secondHandColor.setRGB(0xFFFFFF);</pre></blockquote>


<p>Next we set the position and size of the
<tt class="literal">minuteHand</tt> and <tt class="literal">hourHand</tt>, just
as we did for the <tt class="literal">secondHand</tt>:</p>


<blockquote><pre class="code">// Place the <em class="replaceable">minuteHand</em> on top of the <em class="replaceable">clockFace</em>
minuteHand._x = clockFace._x;
minuteHand._y = clockFace._y;
// Make the <em class="replaceable">minuteHand</em> shorter than the <em class="replaceable">secondHand</em>
minuteHand._height = clockFace._height / 2.5;
// Place the <em class="replaceable">hourHand</em> on top of the <em class="replaceable">clockFace</em>
hourHand._x = clockFace._x;
hourHand._y = clockFace._y;
// Make the <em class="replaceable">hourHand</em> the shortest of all
hourHand._height = clockFace._height / 3.5;</pre></blockquote>


<p>Now we have to set the rotation of our hands on the clock according
to the current time. However, we don't just want to set the
rotation once. We want to set it repetitively so that our clock
animates as time passes. Therefore, we put our rotation code in a
function called <em class="filename">updateClock( )</em>, which
we'll call repeatedly:</p>


<blockquote><pre class="code">function updateClock( ) {
  // Store the current time in <em class="replaceable">now</em>
  var now = new Date( );
  // <em class="replaceable">getHours()</em> works on a 24-hour clock. If the current hour is greater 
  // than 12, we subtract 12 to convert to a regular 12-hour clock.
  var dayPercent = (now.getHours( ) &gt; 12 ? 
                    now.getHours() - 12 : now.getHours( )) / 12;
  // Determine how many minutes of the current hour have passed, as a percentage
  var hourPercent = now.getMinutes( )/60;
  // Determine how many seconds of the current minute have passed, as a percentage
  var minutePercent = now.getSeconds( )/60;
  // Rotate the hands by the appropriate amount around the clock
  hourHand._rotation = 360 * dayPercent + hourPercent * (360 / 24);
  minuteHand._rotation = 360 * hourPercent;
  secondHand._rotation = 360 * minutePercent;
}</pre></blockquote>


<p>The first task of <em class="filename">updateClock( )</em> is to retrieve
and store the current time. This is done by creating an instance of
the <em class="filename">Date</em> class and placing it in the local
variable <tt class="literal">now</tt>. Next we determine, as a percentage,
how far around the clock each hand should be placed -- much like
determining where to slice a pie. The current hour always represents
some portion of 12, while the current minute and second always
represent some portion of 60. We assign the
<tt class="literal">_rotation</tt> of each hand based on those percentages.
For the <tt class="literal">hourHand</tt>, we reflect not only the percent
of the day but also the percent of the current hour.</p>


<p>Our clock is essentially finished. All that's left to do is
call the <em class="filename">updateClock( )</em> function with each
passing frame. Here's how:</p>


<ol><li><p>Add two keyframes to the <em class="filename">scripts</em> layer.</p></li><li><p>On frame 2, add the following code: <tt class="literal">updateClock(
);</tt></p></li><li><p>On frame 3, add the following code: <tt class="literal">gotoAndPlay(2);</tt></p></li></ol>
<p>Test the movie and see if your clock works. If it doesn't,
compare it to the sample clock <em class="filename">.fla</em> file
provided at the online Code Depot or check your code against <a href="ch13_09.htm">Example 13-4</a>. Think of ways to expand on the clock
application: Can you convert the main timeline loop (between frames 2
and 3) to a clip event loop? Can you make the clock more portable by
turning it into a Smart Clip? How about dynamically adding minute and
hour markings on <a name="INDEX-1872" /> <a name="INDEX-1873" />the <a name="INDEX-1874" /><tt class="literal">clockFace</tt>?</p>
</div>


<hr width="684" align="left" />
<div class="navbar"><table width="684" border="0"><tr><td align="left" valign="top" width="228"><a href="ch13_08.htm"><img alt="Previous" border="0" src="../gifs/txtpreva.gif" /></a></td><td align="center" valign="top" width="228"><a href="index.htm"><img alt="Home" border="0" src="../gifs/txthome.gif" /></a></td><td align="right" valign="top" width="228"><a href="ch13_10.htm"><img alt="Next" border="0" src="../gifs/txtnexta.gif" /></a></td></tr><tr><td align="left" valign="top" width="228">13.8. Movie Clip Methods</td><td align="center" valign="top" width="228"><a href="index/index.htm"><img alt="Book Index" border="0" src="../gifs/index.gif" /></a></td><td align="right" valign="top" width="228">13.10. The Last Quiz</td></tr></table></div>
<hr width="684" align="left" />

<img alt="Library Navigation Links" border="0" src="../gifs/navbar.gif" usemap="#library-map" />
<p><font size="-1"><a href="copyrght.htm">Copyright &copy; 2002</a> O'Reilly &amp; Associates. All rights reserved.</font></p>

<map name="library-map"><area href="../index.htm" coords="0,1,78,93" shape="rect" /><area href="../wdesign/index.htm" coords="80,2,155,96" shape="rect" /><area href="../xhtml/index.htm" coords="158,0,263,97" shape="rect" /><area href="../audio/index.htm" coords="265,1,335,97" shape="rect" /><area href="../css/index.htm" coords="338,1,434,93" shape="rect" /><area href="index.htm" coords="439,0,540,102" shape="rect" /><area href="../infoarch/index.htm" coords="544,0,685,102" shape="rect" /></map>

</body></html>