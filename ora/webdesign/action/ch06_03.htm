<html><head><title>The ActionScript Statements (ActionScript: The Definitive Guide)</title><link rel="stylesheet" type="text/css" href="../style/style1.css" />

<meta name="DC.Creator" content="Colin Moock" /><meta name="DC.Format" content="text/xml" scheme="MIME" /><meta name="DC.Language" content="en-US" /><meta name="DC.Publisher" content="O'Reilly &amp; Associates, Inc." /><meta name="DC.Source" scheme="ISBN" content="1565928520L" /><meta name="DC.Subject.Keyword" content="stuff" /><meta name="DC.Title" content="ActionScript: The Definitive Guide" /><meta name="DC.Type" content="Text.Monograph" />

</head><body bgcolor="#ffffff">

<img alt="Book Home" border="0" src="gifs/smbanner.gif" usemap="#banner-map" /><map name="banner-map"><area shape="rect" coords="1,-2,616,66" href="index.htm" alt="ActionScript: The Definitive Guide" /><area shape="rect" coords="629,-11,726,25" href="jobjects/fsearch.htm" alt="Search this book" /></map>

<div class="navbar"><table width="684" border="0"><tr><td align="left" valign="top" width="228"><a href="ch06_02.htm"><img alt="Previous" border="0" src="../gifs/txtpreva.gif" /></a></td><td align="center" valign="top" width="228"><a href="index.htm">ActionScript: The Definitive Guide</a></td><td align="right" valign="top" width="228"><a href="ch06_04.htm"><img alt="Next" border="0" src="../gifs/txtnexta.gif" /></a></td></tr></table></div>
<hr width="684" align="left" />


<h2 class="sect1">6.3. The ActionScript Statements</h2>


<p>Now that you know how a typical statement is formed, skim <a href="ch06_03.htm">Table 6-1</a> to acquaint yourself with some of the things
that ActionScript statements do.</p>


<a name="ch06-40457" /><h4 class="objtitle">Table 6-1. The ActionScript Statements </h4><table border="1">




<tr>
<th>
<p>Statement</p></th>
<th>
<p>Syntax</p></th>
<th>
<p>Use</p></th>
</tr>




<tr>
<td>
<p><a name="INDEX-823" />break</p></td>
<td>
<blockquote><pre class="code">break;</pre></blockquote></td>
<td>
<p>Cancels a loop</p></td>
</tr>

<tr>
<td>
<p><a name="INDEX-824" />call</p></td>
<td>
<blockquote><pre class="code">call (<em class="replaceable">frame</em>);</pre></blockquote></td>
<td>
<p>Executes the script on a remote frame</p></td>
</tr>

<tr>
<td>
<p><a name="INDEX-825" />continue</p></td>
<td>
<blockquote><pre class="code">continue;</pre></blockquote></td>
<td>
<p>Restarts the current loop</p></td>
</tr>

<tr>
<td>
<p><a name="INDEX-826" />do-while</p></td>
<td>
<blockquote><pre class="code">do {
   <em class="replaceable">statements</em>
} while (<em class="replaceable">expression</em>);</pre></blockquote></td>
<td>
<p>A variation of a <em class="emphasis">while</em> loop</p></td>
</tr>

<tr>
<td>
<p><a name="INDEX-827" />empty
statement</p></td>
<td>
<blockquote><pre class="code">;</pre></blockquote></td>
<td>
<p>Holds a place where a statement is expected, and used with
<em class="emphasis">evaluate</em> in novice mode</p></td>
</tr>

<tr>
<td>
<p><a name="INDEX-828" />for</p></td>
<td>
<blockquote><pre class="code">for (<em class="replaceable">init</em>; <em class="replaceable">test</em>; <em class="replaceable">increment</em>) {
   <em class="replaceable">statements</em>
}</pre></blockquote></td>
<td>
<p>Executes some code repetitively (a <em class="emphasis">for</em> loop)</p></td>
</tr>

<tr>
<td>
<p><a name="INDEX-829" />for-in</p></td>
<td>
<blockquote><pre class="code">for (<em class="replaceable">property</em> in <em class="replaceable">object</em>) {
   <em class="replaceable">statements</em>
}</pre></blockquote></td>
<td>
<p>Enumerates the properties of an object</p></td>
</tr>

<tr>
<td>
<p><a name="INDEX-830" />function</p></td>
<td>
<blockquote><pre class="code">function <em class="replaceable">name</em>(<em class="replaceable">parameters</em>) {
   <em class="replaceable">statements</em>
}</pre></blockquote></td>
<td>
<p>Declares a function</p></td>
</tr>

<tr>
<td>
<p><a name="INDEX-831" />if-else if-else</p></td>
<td>
<blockquote><pre class="code">if (<em class="replaceable">expression</em>) {
   <em class="replaceable">statements</em>
} else if (<em class="replaceable">expression</em>) {
   <em class="replaceable">statements</em>
} else {
   <em class="replaceable">statements</em>
}</pre></blockquote></td>
<td>
<p>Executes some code based on a condition or a series of conditions</p></td>
</tr>

<tr>
<td>
<p><a name="INDEX-832" />ifFrameLoaded</p></td>
<td>
<blockquote><pre class="code">ifFrameLoaded (<em class="replaceable">frame</em>) {
   <em class="replaceable">statements</em>
}</pre></blockquote></td>
<td>
<p>Executes some code if a certain frame has loaded; deprecated in Flash
5</p></td>
</tr>

<tr>
<td>
<p><a name="INDEX-833" />return</p></td>
<td>
<blockquote><pre class="code">return;
return <em class="replaceable">expression</em>;</pre></blockquote></td>
<td>
<p>Exits a function or returns a value from a function</p></td>
</tr>

<tr>
<td>
<p><a name="INDEX-834" />set</p></td>
<td>
<blockquote><pre class="code">set (<em class="replaceable">variable</em>, <em class="replaceable">value</em>);</pre></blockquote></td>
<td>
<p>Assigns a value to a dynamically named variable</p></td>
</tr>

<tr>
<td>
<p><a name="INDEX-835" />var</p></td>
<td>
<blockquote><pre class="code">var <em class="replaceable">variableName</em>;
var <em class="replaceable">variableName</em> = <em class="replaceable">expression</em>;</pre></blockquote></td>
<td>
<p>Declares and optionally initializes a variable</p></td>
</tr>

<tr>
<td>
<p><a name="INDEX-836" />while</p></td>
<td>
<blockquote><pre class="code">while (<em class="replaceable">expression</em>) {
   <em class="replaceable">statements</em>
}</pre></blockquote></td>
<td>
<p>Executes some code repetitively (a <em class="emphasis">while</em> loop)</p></td>
</tr>

<tr>
<td>
<p><a name="INDEX-837" />with</p></td>
<td>
<blockquote><pre class="code">with (<em class="replaceable">objectName</em>) {
   <em class="replaceable">statements</em>
}</pre></blockquote></td>
<td>
<p>Executes some code in the context of a given object</p></td>
</tr>


</table>


<a name="ch06-8-fm2xml" /><div class="sect2">
<h3 class="sect2">6.3.1. Loops and Conditionals</h3>


<p>We've already had several informal encounters with
<a name="INDEX-838" />
<a name="INDEX-839" />
<a name="INDEX-840" />loops
and <a name="INDEX-841" />conditionals. Together, these two
statement types account for the majority of complex flow in our
programs. Loops allow us to execute statements repeatedly, and
conditionals allow us to execute statements under only the specified
circumstances. See <a href="ch07_01.htm">Chapter 7, "Conditionals"</a> and <a href="ch08_01.htm">Chapter 8, "Loop Statements"</a> for complete details.</p>
</div>




<a name="ch06-9-fm2xml" /><div class="sect2">
<h3 class="sect2">6.3.2. Expression Statements</h3>


<p>Although any <a name="INDEX-842" />
<a name="INDEX-843" />expression
can be used independently as a valid statement, if the expression
performs no action and we don't do anything with the result,
the exercise is rather pointless:</p>


<blockquote><pre class="code">"hi there";  // This doesn't do much
345 + 5;     // Neither does this</pre></blockquote>


<p>Some expressions, however, have <em class="emphasis">side effects</em>
that change the state of a system through variable or property
assignments or by physically altering the Flash environment. In this
example, an expression changes the value of <tt class="literal">x</tt>:</p>


<blockquote><pre class="code">x = 345 + 5;  // Much more useful</pre></blockquote>


<p><a name="INDEX-844" /> <a name="INDEX-845" />Function calls are the most powerful type
of expression statement. Even if a function doesn't return a
useful value, it may have a very useful side effect. For example,
<em class="filename">gotoAndStop( )</em> returns the value
<tt class="literal">undefined</tt> but has an important side
effect -- it moves the playhead to another frame:</p>


<blockquote><pre class="code">gotoAndStop(5);  // The value of <em class="replaceable">_currentframe</em> is changed to 5.</pre></blockquote>


<p>We'll learn more about function calls under <a href="ch09_02.htm">Section 9.2, "Running Functions"</a> in <a href="ch09_01.htm">Chapter 9, "Functions"</a>.</p>
</div>




<a name="ch06-10-fm2xml" /><div class="sect2">
<h3 class="sect2">6.3.3. The var Statement</h3>


<p>The <em class="filename">var</em><a name="INDEX-846" /> statement declares a new variable:</p>


<blockquote><pre class="code">var x;</pre></blockquote>


<p>You can assign the new variable's initial value as part of a
<em class="filename">var</em> statement:</p>


<blockquote><pre class="code">var x = 10;</pre></blockquote>


<p>When used outside of a function, the <em class="filename">var</em>
statement creates a variable scoped to the timeline containing the
statement. When used inside a function, the <em class="filename">var
</em>statement creates a variable local to that function (i.e.,
one that dies when the function finishes). See <a href="ch02_01.htm">Chapter 2, "Variables"</a>.</p>
</div>




<a name="ch06-11-fm2xml" /><div class="sect2">
<h3 class="sect2">6.3.4. The set Statement (Set Variable)</h3>


<p>For <a name="INDEX-847" /> <a name="INDEX-848" /> <a name="INDEX-849" />most variable assignments, we
use an assignment expression in statement form, like this:</p>


<blockquote><pre class="code">x = 30;</pre></blockquote>


<p>That kind of expression, however, requires us to know the name of our
variable in advance. If we want to generate the name of a variable
dynamically during an assignment, we can use the
<em class="filename">set</em> statement, which has the following syntax:</p>


<blockquote><pre class="code">set (<em class="replaceable">variable</em>, <em class="replaceable">expression</em>);</pre></blockquote>


<p>where <em class="replaceable">variable</em> is a string expression to
be used as the variable name in the assignment and
<em class="replaceable">expression</em> is the new value to assign to
it. For example:</p>


<blockquote><pre class="code">var x;
set ("x", 10);      // <em class="replaceable">x</em> is now 10

var firstName;
set ("first" + "Name", "jane");  // <em class="replaceable">firstName</em> is now "jane"</pre></blockquote>


<p>In the following, trickier example, <tt class="literal">y</tt> is not being
set in the <em class="filename">set</em> statement. Instead,
<tt class="literal">y</tt> 's value (<tt class="literal">"x"</tt>) is
retrieved and that value is used as the name of the variable to set:</p>


<blockquote><pre class="code">// Pay close attention to this one...
var y = "x";
var x;
set(y, 15);  // <em class="replaceable">x</em> is now 15, <em class="replaceable">y</em> is still "x".</pre></blockquote>


<p>In Flash 4, <em class="filename">set</em> was called <em class="filename">Set
Variable</em>. In that version of ActionScript, it was often
used to dynamically assign variables that had programmatically
generated sequential names. This allowed programmers to simulate
arrays, which were not a native part of Flash 4 ActionScript. Since
arrays were added in Flash 5, <em class="filename">set</em> is rarely
used. For more information on simulating arrays with
<em class="filename">set</em>, see <a href="ch02_01.htm">Chapter 2, "Variables"</a>.</p>
</div>




<a name="ch06-12-fm2xml" /><div class="sect2">
<h3 class="sect2">6.3.5. The function Statement</h3>


<p>Just <a name="INDEX-850" />as
the <em class="filename">var</em> statement is used to
<em class="filename">declare</em> (i.e., create) variables, the
<em class="filename">function</em> statement is used to declare functions.
The <em class="filename">function</em> statement has the following syntax:</p>


<blockquote><pre class="code">function <em class="replaceable">funcName</em> (<em class="replaceable">param1</em>, <em class="replaceable">param2</em>, <em class="replaceable">param3</em>,...<em class="replaceable">paramn</em>) {
  <em class="replaceable">statements</em>
}</pre></blockquote>


<p>The keyword <tt class="literal">function</tt> begins the statement;
<em class="replaceable">funcName</em> is the name of the function being
declared; <em class="replaceable">param1</em> through
<em class="replaceable">paramn</em> define the parameters required by
the function when it executes; <em class="replaceable">statements</em>
is a list of one or more statements that will be executed when the
function is called.</p>


<p>The <em class="filename">function</em> statement creates a function for
later use but does not execute that function. To execute a function,
we use the function's name in a <em class="emphasis">function
call</em> statement.</p>
</div>




<a name="ch06-13-fm2xml" /><div class="sect2">
<h3 class="sect2">6.3.6. Function Call Statements</h3>


<p>A <a name="INDEX-851" />function call statement executes a
built-in or user-defined function simply by using the
function's name and providing the inputs that the function
needs to perform its job. The terms <em class="filename">call</em>,
<em class="emphasis">run</em>, and <em class="filename">invoke</em> are often
used interchangeably to mean that a function's name has been
used to cause it to execute. Function call statements have the
following general syntax:</p>


<blockquote><pre class="code"><em class="replaceable">funcName</em> (<em class="replaceable">arg1</em>, <em class="replaceable">arg2</em>, ... <em class="replaceable">argn</em>);</pre></blockquote>


<p>where <em class="replaceable">funcName</em> is the name of the function
we want to execute and <em class="replaceable">arg1</em> through
<em class="replaceable">argn</em> is the list of
<em class="emphasis">arguments</em> (i.e., input values) that the function
expects when it runs.</p>


<p>The function call statement is an extremely powerful and fundamental
device; it's our primary means of controlling Flash movies.
When we want to manipulate a movie in some way, we often call a
function. Here are a few examples:</p>


<blockquote><pre class="code">play( );                       // Plays the current movie
gotoAndStop(5);                // Sends the playhead to frame 5
startDrag("crosshair", true);  // Makes the "crosshair" instance follow
                               // the mouse pointer</pre></blockquote>


<p>Function calls are also used with objects to invoke methods:</p>


<blockquote><pre class="code">circle.area( );
today.getDate( );</pre></blockquote>


<p>Because movie clip instances are objects, we frequently use method
invocation in our scripts:</p>


<blockquote><pre class="code">ball.play( )
intro.gotoAndStop("end");</pre></blockquote>


<p>We'll be learning more about using functions in <a href="ch09_01.htm">Chapter 9, "Functions"</a> and we'll see how functions can become
object methods in <a href="ch12_01.htm">Chapter 12, "Objects and Classes"</a>.</p>
</div>




<a name="ch06-14-fm2xml" /><div class="sect2">
<h3 class="sect2">6.3.7. The call( ) Statement</h3>


<p>On <a name="INDEX-852" />a
<a name="INDEX-853" />simple level, a function is a series
of reusable statements that can be executed at any time during the
running of a program. Although Flash 4 did not support real
functions, it did attempt to provide some of the portability of
functions through remote script activation. In Flash 4 we could
create something close to a function by attaching a list of
statements to a frame with a label. A pseudofunction thus created
could subsequently be executed via the <em class="filename">call( )</em>
statement:</p>


<blockquote><pre class="code">call (<em class="replaceable">frame</em>);</pre></blockquote>


<p>The <em class="filename">call( )</em> statement executes the script on the
frame specified by <em class="replaceable">frame</em>, which may be any
frame label or frame number. If the specified frame is not loaded,
the <em class="filename">call( )</em> statement fails silently.</p>


<p>Obviously, the pseudofunctions of Flash 4 pale in comparison with
real functions, so we normally have no reason to use a
<em class="filename">call( )</em> statement when authoring for Flash 5 or
later. But when we're authoring Flash 4 movies, we need to use
the old-style subroutines and the Flash 4 <em class="filename">call(
)</em> statement.</p>
</div>




<a name="ch06-15-fm2xml" /><div class="sect2">
<h3 class="sect2">6.3.8. The return Statement</h3>


<p>When <a name="INDEX-854" />we
call a function, we may optionally pass it one or more values
(<em class="emphasis">parameters</em> or <em class="emphasis">arguments</em>)
to manipulate during execution. A function may likewise send us back
a <em class="emphasis">return value</em> (a value that results from the
execution of a function and is sent back to the caller). Within the
body of a function, we use the <em class="filename">return</em> statement
to conclude the function's execution and optionally return a
value. A <em class="filename">return</em> statement takes one of the
following forms:</p>


<blockquote><pre class="code">return;
return <em class="replaceable">expression</em>;</pre></blockquote>


<p>The optional <em class="replaceable">expression</em>, if included,
becomes the return value of the function. A
<em class="filename">return</em> statement without a return value exits
the function and returns the value <tt class="literal">undefined</tt>. All
<em class="filename">return</em> statements exit the current function.
Note that <em class="filename">return</em> statements are not required in
functions; a function without a <em class="filename">return</em> statement
simply ends after the last statement in the function body and returns
<tt class="literal">undefined</tt>. See <a href="ch09_01.htm">Chapter 9, "Functions"</a> for
more details on creating, calling, and terminating functions.</p>
</div>




<a name="ch06-32323" /><div class="sect2">
<h3 class="sect2">6.3.9. The with Statement</h3>


<p>The <em class="filename">with</em><a name="INDEX-855" /> <a name="INDEX-856" /> <a name="INDEX-857" />statement
provides a shorthand way to refer to properties of an object without
having to retype the object's name repeatedly. A
<em class="filename">with</em> statement takes the general form:</p>


<blockquote><pre class="code">with (<em class="replaceable">object</em>) {
  <em class="replaceable">statements</em>
}</pre></blockquote>


<p>When a property is referenced within a <em class="filename">with</em>
statement block, <em class="replaceable">object</em> is checked for the
specified property. If the property exists in
<em class="replaceable">object</em>, then
<em class="replaceable">object</em>'s property is used to resolve
the property reference. If the property does not exist in
<em class="replaceable">object</em>, the current timeline or function
is consulted for the property in question.</p>


<p>The following example shows the difference between executing a
statement inside a <em class="filename">with</em> statement and outside a
<em class="filename">with</em> statement:</p>


<blockquote><pre class="code">PI = 10;                  // Set a timeline variable, <em class="replaceable">PI</em>
with (Math) {             // Execute statements in the context of <em class="replaceable">Math</em>
  trace("pi is: " + PI);  // Displays: 3.1459... (<em class="replaceable">PI</em> is a property of <em class="replaceable">Math</em>)
}
trace("PI is: " + PI);    // Displays: 10 (<em class="replaceable">Math</em> is no longer accessed)</pre></blockquote>


<p>In addition to providing convenient access to object properties,
<em class="filename">with</em> can be used to invoke
<a name="INDEX-858" />object <a name="INDEX-859" />methods:</p>


<blockquote><pre class="code">x = 10;
y = 11;
with (Math) {
  larger = max(x, y);
}
trace(larger);  // Displays: 11</pre></blockquote>


<p>It is not possible to define a new property on an object that is the
target of a <em class="emphasis">with</em> statement. Notice in the
previous example that the variable <tt class="literal">larger</tt> is
<em class="emphasis">not</em> defined on the <em class="filename">Math</em>
object, so the property reference affects the timeline or function
that contains the <em class="filename">with</em> statement. The following
code shows a misguided attempt to set a variable in
<tt class="literal">myClip</tt>:</p>


<blockquote><pre class="code">with (myClip) {
  var x = 10;  // <em class="replaceable">x</em> is set on the current timeline, not <em class="replaceable">myClip</em>
}</pre></blockquote>


<p>We can, however, legitimately use <em class="filename">with</em> to affect
<a name="INDEX-860" />movie clip instances in other
ways. It can provide a handy way to work with deeply nested instance
structures. For example, we can change this:</p>


<blockquote><pre class="code">_root.form.userProfile.userID = "U346BX";
  _root.form.userProfile.gotoAndPlay("questionnaire");</pre></blockquote>


<p>to this:</p>


<blockquote><pre class="code">with (_root.form.userProfile) {
  userID = "U346BX";             // Resets an existing variable
                                 // in <em class="replaceable">userProfile</em> instance
  gotoAndPlay("questionnaire");  // Function applied to <em class="replaceable">userProfile</em> instance
}</pre></blockquote>


<p>But <em class="filename">with</em> is not our only means of achieving this
convenience. We could also simply assign our instance to a variable
and use that variable in our references:</p>


<blockquote><pre class="code">var userForm = _root.form.userProfile;
userForm.useriD = "U346BX";
userForm.gotoAndPlay("questionnaire");</pre></blockquote>


<p>Many developers find the variable approach easier to read and work
with, but both are valid. We'll learn more about treating movie
clips as objects in <a href="ch13_01.htm">Chapter 13, "Movie Clips"</a>.</p>
</div>




<a name="ch06-16-fm2xml" /><div class="sect2">
<h3 class="sect2">6.3.10. The ifFrameLoaded Statement</h3>


<p>The Flash 5
<em class="filename">ifFrameLoaded</em><a name="INDEX-861" /> statement replaces the <em class="filename">If
Frame Is Loaded </em><a name="INDEX-862" />Action used in prior versions. Like an
<em class="filename">if</em> statement, <em class="filename">ifFrameLoaded</em>
has a substatement that is executed only under certain circumstances.
Here's the syntax:</p>


<blockquote><pre class="code">ifFrameLoaded (<em class="replaceable">expression</em>) {
  <em class="replaceable">statements</em>
}</pre></blockquote>


<p>where <em class="replaceable">expression</em> must be either the number
of a frame or a string indicating a frame label. If the frame
indicated by <em class="replaceable">expression</em> has downloaded to
the Player, <em class="replaceable">statements</em> are executed. If
not, the statement block is skipped.</p>


<p>The <em class="filename">ifFrameLoaded</em> statement is awkward to use in
preloading scripts because it lacks an <em class="filename">else</em>
clause. It has, therefore, been deprecated and should be used only
when authoring Flash 3 or older movies. In Flash 4 and later you
should use the
<tt class="literal">_totalframes</tt><a name="INDEX-863" />
<a name="INDEX-864" /> and
<a name="INDEX-865" /> <a name="INDEX-866" /><tt class="literal">_framesloaded</tt>
properties with <em class="filename">if</em>-<em class="filename">else</em>
statements to create a more versatile preloader. For example:</p>


<blockquote><pre class="code">if (_totalframes &gt; 0 &amp;&amp; _framesloaded == _totalframes) {
	gotoAndPlay("beginMovie");
} else {
	gotoAndPlay(_currentframe - 1);
}</pre></blockquote>
</div>




<a name="ch06-17-fm2xml" /><div class="sect2">
<h3 class="sect2">6.3.11. The Empty Statement</h3>


<p>For the <a name="INDEX-867" />sake
of completeness we should mention that it is legal to issue a
statement with no content via a lone semicolon:</p>


<blockquote><pre class="code">;</pre></blockquote>


<p>The <em class="firstterm">empty statement</em> has very little practical
application except that it can be used as a placeholder anywhere a
statement is normally expected. It is not needed if you simply want
to add blank lines to your code. ActionScript ignores blank vertical
lines, which can be used to improve code readability.</p>


<p>In novice authoring mode, the lone semicolon appears when the
<em class="filename">evaluate</em> Action is added to a block of code. An
arbitrary statement may then be added by typing into the Expression
field of the Parameters panel.</p>
</div>


<hr width="684" align="left" />
<div class="navbar"><table width="684" border="0"><tr><td align="left" valign="top" width="228"><a href="ch06_02.htm"><img alt="Previous" border="0" src="../gifs/txtpreva.gif" /></a></td><td align="center" valign="top" width="228"><a href="index.htm"><img alt="Home" border="0" src="../gifs/txthome.gif" /></a></td><td align="right" valign="top" width="228"><a href="ch06_04.htm"><img alt="Next" border="0" src="../gifs/txtnexta.gif" /></a></td></tr><tr><td align="left" valign="top" width="228">6.2. Statement Syntax</td><td align="center" valign="top" width="228"><a href="index/index.htm"><img alt="Book Index" border="0" src="../gifs/index.gif" /></a></td><td align="right" valign="top" width="228">6.4. Statements Versus Actions</td></tr></table></div>
<hr width="684" align="left" />

<img alt="Library Navigation Links" border="0" src="../gifs/navbar.gif" usemap="#library-map" />
<p><font size="-1"><a href="copyrght.htm">Copyright &copy; 2002</a> O'Reilly &amp; Associates. All rights reserved.</font></p>

<map name="library-map"><area href="../index.htm" coords="0,1,78,93" shape="rect" /><area href="../wdesign/index.htm" coords="80,2,155,96" shape="rect" /><area href="../xhtml/index.htm" coords="158,0,263,97" shape="rect" /><area href="../audio/index.htm" coords="265,1,335,97" shape="rect" /><area href="../css/index.htm" coords="338,1,434,93" shape="rect" /><area href="index.htm" coords="439,0,540,102" shape="rect" /><area href="../infoarch/index.htm" coords="544,0,685,102" shape="rect" /></map>

</body></html>