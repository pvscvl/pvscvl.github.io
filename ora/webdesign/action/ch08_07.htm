<html><head><title>Timeline and Clip Event Loops (ActionScript: The Definitive Guide)</title><link rel="stylesheet" type="text/css" href="../style/style1.css" />

<meta name="DC.Creator" content="Colin Moock" /><meta name="DC.Format" content="text/xml" scheme="MIME" /><meta name="DC.Language" content="en-US" /><meta name="DC.Publisher" content="O'Reilly &amp; Associates, Inc." /><meta name="DC.Source" scheme="ISBN" content="1565928520L" /><meta name="DC.Subject.Keyword" content="stuff" /><meta name="DC.Title" content="ActionScript: The Definitive Guide" /><meta name="DC.Type" content="Text.Monograph" />

</head><body bgcolor="#ffffff">

<img alt="Book Home" border="0" src="gifs/smbanner.gif" usemap="#banner-map" /><map name="banner-map"><area shape="rect" coords="1,-2,616,66" href="index.htm" alt="ActionScript: The Definitive Guide" /><area shape="rect" coords="629,-11,726,25" href="jobjects/fsearch.htm" alt="Search this book" /></map>

<div class="navbar"><table width="684" border="0"><tr><td align="left" valign="top" width="228"><a href="ch08_06.htm"><img alt="Previous" border="0" src="../gifs/txtpreva.gif" /></a></td><td align="center" valign="top" width="228"><a href="index.htm">ActionScript: The Definitive Guide</a></td><td align="right" valign="top" width="228"><a href="ch08_08.htm"><img alt="Next" border="0" src="../gifs/txtnexta.gif" /></a></td></tr></table></div>
<hr width="684" align="left" />


<h2 class="sect1">8.7. Timeline and Clip Event Loops</h2>


<p>All <a name="INDEX-962" />
<a name="INDEX-963" /> <a name="INDEX-964" />the
<a name="INDEX-965" /> <a name="INDEX-966" />loops
<a name="INDEX-967" />we've looked at so far cause the
interpreter to repeatedly execute blocks of code. Most of your loops
will be of this "ActionScript-statement" type. But
it's also sometimes desirable to create a <em class="filename">timeline
loop</em> by looping Flash's playhead in the timeline. To
do so, attach a series of statements to any frame; on the next frame,
attach a <em class="filename">gotoAndPlay( )</em> function whose
destination is the previous frame. When the movie plays, the playhead
will cycle between the two frames, causing the code on the first
frame to be executed repeatedly.</p>


<p>We can make a simple timeline loop by following these steps:</p>


<ol><li><p>Start a new Flash movie.</p></li><li><p>On frame 1, attach the following statement:</p>
<blockquote><pre class="code">trace("Hi there! Welcome to frame 1");</pre></blockquote></li>

<li><p>On frame 2, attach the following statements:</p>
<blockquote><pre class="code">trace("This is frame 2");
gotoAndPlay(1);</pre></blockquote></li>

<li><p>Select Control <img align="absmiddle" src="figs/U2192.gif" /> Test
Movie.</p></li></ol>

<p>When we test our movie, we see an endless stream of the following
text:</p>


<blockquote><pre class="code">Hi there! Welcome to frame 1
This is frame 2
Hi there! Welcome to frame 1
This is frame 2</pre></blockquote>


<p>Timeline <a name="INDEX-968" />loops can do two things
ordinary loops cannot:</p>


<ul><li><p>They can execute a block of code an infinite number of times without
causing an error.</p></li><li><p>They <a name="INDEX-969" />can execute a block of code
that requires a Stage update between loop iterations.</p></li></ul>
<p>This second feature of timeline loops requires a little more
explanation. When any frame's script is executed, the movie
Stage is not updated visually until the end of the script. This means
that traditional loop statements cannot be used to perform repetitive
visual or audio tasks because the task results aren't rendered
between each loop iteration. Repositioning a movie clip, for example,
requires a Stage update, so we can't programmatically animate a
movie clip with a normal loop statement.</p>


<p>You might assume that the following code would visually slide the
<tt class="literal">ball</tt> movie clip horizontally across the Stage:</p>


<blockquote><pre class="code">for (var i = 0; i &lt; 50; i++) {
  ball._x += 10;
}</pre></blockquote>


<p>Conceptually, the loop statement has the right approach -- it
repetitively updates the position of <tt class="literal">ball</tt> by small
amounts, which should give the illusion of movement. However, in
practice, the <tt class="literal">ball</tt> doesn't move each time
the <tt class="literal">_x</tt> position of <tt class="literal">ball</tt> is
changed because the Stage isn't updated. Instead, we'd
see the <tt class="literal">ball</tt> suddenly jump 500 pixels to the
right -- 10 pixels for each of the 50 loop iterations -- after
the script completes.</p>


<p>To allow the Stage to update after each execution of the
<tt class="literal">ball._x</tt> <tt class="literal">+=</tt>
<tt class="literal">10;</tt> statement, we can use a timeline loop like
this:</p>


<blockquote><pre class="code"><tt class="userinput"><b>// CODE ON FRAME 1</b></tt>
ball._x += 10;
<tt class="userinput"><b>// CODE ON FRAME 2</b></tt>
gotoAndPlay(1);</pre></blockquote>


<p>Because Flash updates the Stage between any two frames, the
<tt class="literal">ball</tt> will appear to animate. But the timeline loop
completely monopolizes the timeline it's on. While it's
running, we can't play any normal content on that timeline. A
better approach is to put our timeline loop into an empty, two-frame
movie clip. We'll get the benefit of a Stage update between
loop iterations without freezing a timeline we may need for other
animation.</p>


<a name="ch08-56314" /><div class="sect2">
<h3 class="sect2">8.7.1. Creating an Empty-Clip Timeline Loop</h3>


<p>The <a name="INDEX-970" /> <a name="INDEX-971" />following steps show how to create
an empty-clip timeline loop:</p>


<ol><li><p>Start a new Flash
movie.</p></li>

<li><p>Create a movie clip symbol named <em class="filename">ball</em> that
contains a circle shape.</p></li>

<li><p>On the main Stage, rename layer <em class="emphasis">Layer 1</em> to
<em class="filename">ball</em>.</p></li>

<li><p>On the <em class="filename">ball</em> layer, place an instance of the
<em class="filename">ball</em> symbol.</p></li>

<li><p>Name the instance of the <em class="filename">ball</em> clip,
<tt class="literal">ball</tt>.</p></li>

<li><p>Select
Insert <img align="absmiddle" src="figs/U2192.gif" /> New Symbol to create a blank movie clip
symbol.</p></li>

<li><p>Name the clip symbol
<tt class="literal">process</tt>.</p></li>

<li><p>On frame 1 of the <tt class="literal">process</tt> clip, attach the
following code:</p>
<blockquote><pre class="code">_root.ball._x += 10;</pre></blockquote></li>

<li><p>On frame 2 of the process clip, add the following code:</p>

<blockquote><pre class="code">gotoAndPlay(1);</pre></blockquote></li>

<li><p>Return to the main movie timeline and create a layer called
<em class="emphasis">scripts</em>.</p></li>

<li><p>On the <em class="emphasis">scripts</em> layer, place an instance of the
<tt class="literal">process</tt> symbol.</p></li>

<li><p>Name the instance
<tt class="literal">processMoveBall</tt>.</p></li>

<li><p>Select Control <img align="absmiddle" src="figs/U2192.gif" /> Test Movie.</p></li></ol>
<p>The <tt class="literal">processMoveBall</tt> instance will now move
<tt class="literal">ball</tt> without interfering with the playback of the
main timeline upon which <tt class="literal">ball</tt> resides.</p>


<p>Note that step 12 isn't mandatory, but it gives us more control
over our loop. By giving our timeline-loop instance a name, we can
stop and start our loop by starting and stopping the playback of the
instance, like this:</p>


<blockquote><pre class="code">processMoveBall.play( );
processMoveBall.stop( );</pre></blockquote>


<p>Note that in this example <tt class="literal">processMoveBall</tt> and
<tt class="literal">ball</tt> must both exist on the main timeline for as
long as the loop is supposed to work. If we wanted to make the code
more portable, we could use a relative reference to our
<tt class="literal">ball</tt> clip in <tt class="literal">process</tt>:</p>


<blockquote><pre class="code">_    parent.ball._x += 10;</pre></blockquote>


<p>And if we wanted to control our ball from any timeline, we'd
use an absolute reference to <tt class="literal">ball</tt>:</p>


<blockquote><pre class="code">_root.ball._x += 10;</pre></blockquote>

<a name="ch08-13-fm2xml" /><blockquote><h4>WARNING</h4>
<p>Timeline loops can't loop on a single frame. That is, if we
place a <tt class="literal">gotoAndPlay(5)</tt> function on frame 5 of a
movie, the function will be ignored. The Player realizes that the
playhead is already on frame 5 and simply does nothing.</p>

</blockquote>

<p>You'll find the sample timeline loop and empty-clip loop
<em class="filename">.fla</em> files in the online Code Depot.</p>
</div>




<a name="ch08-88181" /><div class="sect2">
<h3 class="sect2">8.7.2. Flash 5 Clip Event Loops</h3>


<p>Timeline <a name="INDEX-972" />loops
<a name="INDEX-973" />are
<a name="INDEX-974" />effective
<a name="INDEX-975" />but not
necessarily elegant. In Flash 5, we can use an event handler on a
movie clip to achieve the same results as a timeline loop but with
more flexibility (just try to follow along with this example, or see
<a href="ch10_01.htm">Chapter 10, "Events and Event Handlers"</a>, for details on movie clip event
handlers).</p>


<p>When placed on a movie clip, an
<em class="filename">enterFrame</em><a name="INDEX-976" /> event handler causes a block of code to
execute every time a frame passes in a movie. We can use an
<em class="filename">enterFrame</em> event handler on a single-frame empty
clip to repetitively execute a block of code while allowing for a
Stage update between each repetition (just as a timeline loop does).
Follow these steps to try it out:</p>


<ol><li><p>Follow steps 1 through 7 from the previous section.</p></li><li><p>On the main Stage, create a new layer called
<em class="emphasis">scripts</em>.</p></li><li><p>On the <em class="emphasis">scripts</em> layer, place an instance of the
<tt class="literal">process</tt> clip.</p></li><li><p>Select the <tt class="literal">process</tt> instance and attach the
following code:</p>
<blockquote><pre class="code">onClipEvent(enterFrame) {
  _root.ball._x += 10;
}</pre></blockquote></li>


<li><p>Select Control <img align="absmiddle" src="figs/U2192.gif" /> Test Movie.</p></li></ol>
<p>The <tt class="literal">ball</tt> instance should animate across the Stage.</p>


<p>Clip event loops free us from nesting our code inside a movie clip
and don't require a two-frame loop, as timeline loops do. All
the action of a clip event loop happens in a single event handler.
However, the clip event example we just saw has a potential drawback:
there's no way to programmatically start or stop the loop once
it's started. The only way to stop the loop is to physically
remove the <tt class="literal">process</tt> instance from the timeline with
a blank keyframe.</p>


<p>To create an event loop that can be arbitrarily started and stopped,
we have to create an empty clip that contains
<em class="emphasis">another</em> empty clip that bears an event loop. We
can then dynamically attach and remove the whole package whenever we
want to start or stop our loop. A little convoluted, yes, but the
results are quite flexible. Once again, follow the steps to try it
out:</p>


<ol><li><p>Follow steps 1 through 5 under <a href="ch08_07.htm">Section 8.7.1, "Creating an Empty-Clip Timeline Loop"</a>.</p></li><li><p>Select Insert <img align="absmiddle" src="figs/U2192.gif" /> New Symbol twice to create two blank movie clip
symbols.</p></li><li><p>Name one clip symbol <tt class="literal">process</tt> and the other
<tt class="literal">eventLoop</tt>.</p></li><li><p>In the Library, select the <tt class="literal">process</tt> clip, then
select Options <img align="absmiddle" src="figs/U2192.gif" /> Linkage. The Symbol Linkage Properties dialog
box appears.</p></li><li><p>Select Export This Symbol.</p></li><li><p>In the Identifier field, type <tt class="userinput"><b>processMoveBall</b></tt>
and then click OK.</p></li><li><p>On frame 1 of the <tt class="literal">process</tt> clip, drag an instance
of <tt class="literal">eventLoop</tt> onto the Stage.</p></li><li><p>Select the <tt class="literal">eventLoop</tt> instance, and attach the
following code:</p>
<blockquote><pre class="code">onClipEvent(enterFrame) {
  _    parent._    parent.ball._x += 10;
}</pre></blockquote></li>


<li><p>Return to the main movie timeline and attach the following code to
frame 1:</p>
<blockquote><pre class="code">attachMovie("processMoveBall", "processMoveBall", 5000);</pre></blockquote></li>

<li><p>Whenever you want to stop the event loop, issue the following
statement:</p>
<blockquote><pre class="code">_root.processMoveBall.removeMovieClip( );</pre></blockquote>
</li>

<li><p>Select Control <img align="absmiddle" src="figs/U2192.gif" /> Test Movie.</p></li></ol>
<p>Once again, the <tt class="literal">ball</tt> instance should animate
across the Stage, but this time we can start and stop it whenever we
like by using the <em class="filename">attachMovie( )</em> and
<em class="filename">removeMovieClip( )</em> functions shown in steps 9
and 10.</p>


<p>There are examples of regular and controllable clip event loops
available from the online <a name="INDEX-977" />Code Depot.</p>


<a name="ch08-14-fm2xml" /><div class="sect3">
<h3 class="sect3">8.7.2.1. Keeping event loops portable</h3>


<p>Both <a name="INDEX-978" />of
<a name="INDEX-979" />the clip event loops we just saw included
a line of code that updates the position of the
<tt class="literal">ball</tt> instance on the Stage. For example:</p>


<blockquote><pre class="code">onClipEvent(enterFrame) {
  _    parent._    parent.ball._x += 10;  // Updates <em class="replaceable">ball</em>'s position
}</pre></blockquote>


<p>Although this approach works, it's sloppy. By attaching
meaningful code to our clip event, we've decentralized our code
base, dispersing logic and behavior throughout our movie. In order to
keep our code accessible during authoring and better structured for
reuse, from within event loops, we should <em class="emphasis">only</em>
call functions. So, instead of actually moving the
<tt class="literal">ball</tt> clip in our example, we should call a
function that moves the <tt class="literal">ball</tt> clip, like this:</p>


<blockquote><pre class="code">onClipEvent(enterFrame) {
  _    parent._    parent.moveBall( );
}</pre></blockquote>


<p>The user-defined function <em class="filename">moveBall( )</em> would be
defined on the same timeline we attach the
<tt class="literal">processMoveBall</tt> clip to, like this:</p>


<blockquote><pre class="code">function moveBall( ) {
  ball._x += 10;
}</pre></blockquote>


<p>We'll talk more about functions and code portability in <a href="ch09_01.htm">Chapter 9, "Functions"</a>.</p>


<p>If our application is simple, we may wish to forego our empty
event-loop clip altogether. In some cases, we can quite legitimately
attach an event loop directly to the clip being manipulated. In our
<tt class="literal">ball</tt> example, we could avoid the need for separate
empty clips by attaching the following code directly to the
<tt class="literal">ball</tt> instance:</p>


<blockquote><pre class="code">onClipEvent(enterFrame) {
  _x += 10;
}</pre></blockquote>


<p>This approach is ultraconvenient, but it doesn't scale very
easily, and like our first example, it suffers from the inability to
start and stop the <a name="INDEX-980" />loop.</p>
</div>
</div>




<a name="ch08-15-fm2xml" /><div class="sect2">
<h3 class="sect2">8.7.3. Frame Rate's Effect on Timeline and Clip Event Loops</h3>


<p>Because <a name="INDEX-981" />
<a name="INDEX-982" />timeline
<a name="INDEX-983" />
<a name="INDEX-984" />and <a name="INDEX-985" />clip <a name="INDEX-986" />event
loops iterate once per frame, their execution frequency is tied to
the frame rate of a movie. If we're moving an object around the
screen with a timeline or an event loop, an increase in frame rate
can mean an increase in the speed of our animation.</p>


<p>When we programmed the movement of the <tt class="literal">ball</tt> clip
in our earlier examples, we implicitly specified the velocity of the
ball in relation to the frame rate. Our code says, "With each
frame that passes, move <tt class="literal">ball</tt> ten pixels to the
right":</p>


<blockquote><pre class="code">_ball += 10;</pre></blockquote>


<p>The speed of <tt class="literal">ball</tt> is, hence, dependent on the
frame rate. If our movie plays at 12 frames per second, then our
<tt class="literal">ball</tt> clip moves 120 pixels per second. If our
movie plays at 30 frames per second, our <tt class="literal">ball</tt> clip
moves <em class="emphasis">300</em> pixels per second!</p>


<p>When timing scripted animations, it's tempting to calculate the
distance to move an item in relation to the movie's frame rate.
So, if a movie plays 20 frames per second, and we want an item to
move 100 pixels per second, we're tempted to set the velocity
of the object to 5 pixels per frame (5 pixels * 20 frames per second
= 100 pixels per second). There are two serious flaws in this
approach:</p>


<ul><li><p>By relying on the frame rate to determine the speed of an item, we
make it painful to change the frame rate. If we change the frame
rate, we have to recalculate our speed and edit our code accordingly.</p></li><li><p>The Flash Player does not necessarily play movies back at the frame
rate set in the Flash authoring tool; it often plays them slower. If
the computer running the movie cannot render frames fast enough to
keep up with the designated frame rate, the movie slows down. This
slowdown can even vary depending on the system load; if other
programs are running or if Flash is performing some
processor-intensive task, the frame rate may drop for only a short
period and then resume its normal pace.</p>


<p>You can test this out yourself using the time-tracker tool available
at:</p>
<blockquote class="simplelist">

<p><a href="../../../../../../www.moock.org/webdesign/flash/actionscript/fps-speedometer">http://www.moock.org/webdesign/flash/actionscript/fps-speedometer</a></p>

</blockquote></li></ul>


<p>In some cases, an animation that plays back at slightly different
speeds could be deemed acceptable. But when visual accuracy matters
or when we're concerned with the responsiveness of an action
game, it's much more appropriate to calculate the distance to
move an object relative to elapsed time instead of the frame rate.
<a href="ch08_07.htm">Example 8-5</a> shows a quick-and-dirty sample of
time-based animation (i.e., the <tt class="literal">ball</tt> speed is
independent of the frame rate). The new movie would have three frames
and two layers, one layer with the <tt class="literal">ball</tt> instance
and the other with our scripts.</p>


<a name="ch08-38388" /><div class="example">
<h4 class="objtitle">Example 8-5. Calculating Move Distances Based on Time, Not Frame Rate </h4>

<blockquote><pre class="code"><tt class="userinput"><b>// CODE ON FRAME 1</b></tt>
var distancePerSecond = 50;  // Pixels to move per second
var now = getTimer( );       // The current time
var then = 0;                // The time when last frame was rendered
var elapsed;                 // Milliseconds between frame renders
var numSeconds;              // <em class="replaceable">elapsed</em> expressed in seconds 
var moveAmount;              // Distance to move each frame

<tt class="userinput"><b>// CODE ON FRAME 2</b></tt>
then = now;
now = getTimer( );
elapsed = now - then;
numSeconds = elapsed / 1000;
moveAmount = distancePerSecond * numSeconds;
ball._x += moveAmount;

<tt class="userinput"><b>// CODE ON FRAME 3</b></tt>
gotoAndPlay(2);</pre></blockquote>
</div>


<p>Note that our time-based movement might appear jerky if the frame
rate suddenly changes. We could smooth things out by using an
elapsed-time measurement that averages the time between a series of
frames <a name="INDEX-987" />instead <a name="INDEX-988" />of <a name="INDEX-989" /> <a name="INDEX-990" />just <a name="INDEX-991" /> <a name="INDEX-992" /> <a name="INDEX-993" />two.</p>
</div>


<hr width="684" align="left" />
<div class="navbar"><table width="684" border="0"><tr><td align="left" valign="top" width="228"><a href="ch08_06.htm"><img alt="Previous" border="0" src="../gifs/txtpreva.gif" /></a></td><td align="center" valign="top" width="228"><a href="index.htm"><img alt="Home" border="0" src="../gifs/txthome.gif" /></a></td><td align="right" valign="top" width="228"><a href="ch08_08.htm"><img alt="Next" border="0" src="../gifs/txtnexta.gif" /></a></td></tr><tr><td align="left" valign="top" width="228">8.6. Stopping a Loop Prematurely</td><td align="center" valign="top" width="228"><a href="index/index.htm"><img alt="Book Index" border="0" src="../gifs/index.gif" /></a></td><td align="right" valign="top" width="228">8.8. Onward!</td></tr></table></div>
<hr width="684" align="left" />

<img alt="Library Navigation Links" border="0" src="../gifs/navbar.gif" usemap="#library-map" />
<p><font size="-1"><a href="copyrght.htm">Copyright &copy; 2002</a> O'Reilly &amp; Associates. All rights reserved.</font></p>

<map name="library-map"><area href="../index.htm" coords="0,1,78,93" shape="rect" /><area href="../wdesign/index.htm" coords="80,2,155,96" shape="rect" /><area href="../xhtml/index.htm" coords="158,0,263,97" shape="rect" /><area href="../audio/index.htm" coords="265,1,335,97" shape="rect" /><area href="../css/index.htm" coords="338,1,434,93" shape="rect" /><area href="index.htm" coords="439,0,540,102" shape="rect" /><area href="../infoarch/index.htm" coords="544,0,685,102" shape="rect" /></map>

</body></html>