<html><head><title>Passing Information to Functions (ActionScript: The Definitive Guide)</title><link rel="stylesheet" type="text/css" href="../style/style1.css" />

<meta name="DC.Creator" content="Colin Moock" /><meta name="DC.Format" content="text/xml" scheme="MIME" /><meta name="DC.Language" content="en-US" /><meta name="DC.Publisher" content="O'Reilly &amp; Associates, Inc." /><meta name="DC.Source" scheme="ISBN" content="1565928520L" /><meta name="DC.Subject.Keyword" content="stuff" /><meta name="DC.Title" content="ActionScript: The Definitive Guide" /><meta name="DC.Type" content="Text.Monograph" />

</head><body bgcolor="#ffffff">

<img alt="Book Home" border="0" src="gifs/smbanner.gif" usemap="#banner-map" /><map name="banner-map"><area shape="rect" coords="1,-2,616,66" href="index.htm" alt="ActionScript: The Definitive Guide" /><area shape="rect" coords="629,-11,726,25" href="jobjects/fsearch.htm" alt="Search this book" /></map>

<div class="navbar"><table width="684" border="0"><tr><td align="left" valign="top" width="228"><a href="ch09_02.htm"><img alt="Previous" border="0" src="../gifs/txtpreva.gif" /></a></td><td align="center" valign="top" width="228"><a href="index.htm">ActionScript: The Definitive Guide</a></td><td align="right" valign="top" width="228"><a href="ch09_04.htm"><img alt="Next" border="0" src="../gifs/txtnexta.gif" /></a></td></tr></table></div>
<hr width="684" align="left" />


<h2 class="sect1">9.3. Passing Information to Functions</h2>


<p>In <a name="INDEX-1013" />the last section, we created a function that
executed a simple <em class="filename">trace( )</em> statement -- not
exactly the most compelling specimen of the function species.
Here's a more interesting function that moves a movie clip
instance named <tt class="literal">ball</tt> a short distance:</p>


<blockquote><pre class="code">function moveBall ( ) {
  ball._x += 10;
  ball._  y += 10;
}</pre></blockquote>


<p>With the function <em class="filename">moveBall( )</em> defined, we can
move <tt class="literal">ball</tt> diagonally anytime by calling the
<em class="filename">moveBall( )</em> function:</p>


<blockquote><pre class="code">moveBall( );</pre></blockquote>


<p>The ball moves diagonally down and to the right. (Note that the
origin (0, 0) is in the upper left of the main Stage. Increasing
values of <tt class="literal">_x</tt> move the ball to the right, but
unlike the Cartesian coordinates, increasing values of <tt class="literal">_
y</tt> move the ball <em class="emphasis">down</em>, not up.)</p>


<p>Our <em class="filename">moveBall( )</em> function is convenient, but it
lacks flexibility. It works only on one movie clip
(<tt class="literal">ball</tt>), it moves <tt class="literal">ball</tt> in only
one direction, and it always moves <tt class="literal">ball</tt> the same
distance.</p>


<p>A well-designed function should define a single code segment that
works in many circumstances. We can generalize our
<em class="filename">moveBall( )</em> function so that it can move
<em class="emphasis">any</em> clip <em class="emphasis">any</em> distance in
<em class="emphasis">any</em> direction. The first step in generalizing
any function is determining what factors control its behavior. In our
<em class="filename">moveBall( )</em> function, the factors are the name
of the movie clip to move, the distance to move it horizontally, and
the distance to move it vertically. Such factors are known as the
<em class="emphasis">parameters</em> of the function -- they're
the information that we'd like to be able to adjust when the
function is called.</p>


<a name="ch09-4-fm2xml" /><div class="sect2">
<h3 class="sect2">9.3.1. Creating Functions with Parameters</h3>


<p>Recall <a name="INDEX-1014" />
<a name="INDEX-1015" />the generic syntax of a simple
function declaration:</p>


<blockquote><pre class="code">function <em class="replaceable">funcName</em> ( ) {
  <em class="replaceable">statements</em>
}</pre></blockquote>


<p>To add <em class="emphasis">parameters</em>, which are variables that can
be used within a function, we provide a list of legal identifiers
between the parentheses of a function declaration. Parameters are
separated by commas as shown here:</p>


<blockquote><pre class="code">function <em class="replaceable">funcName</em> (<em class="replaceable">param1</em>, <em class="replaceable">param2</em>, <em class="replaceable">param3</em>,...<em class="replaceable">paramn</em>) {
  <em class="replaceable">statements</em>
}</pre></blockquote>


<p>Once defined, we can access a function's parameter values from
inside the function body just as we would any other variable. For
example:</p>


<blockquote><pre class="code">function say(msg) {                // Define the <em class="replaceable">msg</em> parameter
  trace("The message is " + msg);  // Use <em class="replaceable">msg</em> within the trace( ) statement
}</pre></blockquote>


<p>Our function declaration defines the parameter
<tt class="literal">msg</tt>. The <em class="filename">trace( )</em> statement
uses the parameter as it would any variable, outputting its value to
the Output window.</p>


<p>Let's use parameters with our <em class="filename">moveBall( )</em>
function so that we can set the clip's name, horizontal
distance, and vertical distance differently each time it runs. <a href="ch09_03.htm">Example 9-1</a> shows the code.</p>


<a name="ch09-48052" /><div class="example">
<h4 class="objtitle">Example 9-1. A Generalized moveClip Function </h4>

<blockquote><pre class="code">function moveClip (theClip, xDist, yDist) {
  theClip._x += xDist;
  theClip._y += yDist;
}</pre></blockquote>
</div>


<p>We <a name="INDEX-1016" />renamed
the function from <em class="filename">moveBall( )</em> to the generic
name <em class="filename">moveClip( )</em>. We also defined three
parameters: <tt class="literal">theClip</tt> (the movie clip we want to
move), <tt class="literal">xDist</tt> (the horizontal distance to move),
and <tt class="literal">yDist</tt> (the vertical distance to move). Inside
the function body, we use those parameters instead of the hardcoded
values in the original example, thereby allowing our function to
reposition any clip by any horizontal and vertical distance.</p>
</div>




<a name="ch09-5-fm2xml" /><div class="sect2">
<h3 class="sect2">9.3.2. Invoking Functions with Parameters</h3>


<p>When <a name="INDEX-1017" />
<a name="INDEX-1018" />we create a function, we define the
parameter names, which are essentially placeholders; when we invoke
the function, we'll provide values to be plugged in for each of
the parameters.</p>


<p>The words
<em class="emphasis">parameters</em><a name="INDEX-1019" />
<a name="INDEX-1020" /> and <em class="emphasis">arguments</em>
are used interchangeably in this book and in most documentation.
Technically, <em class="emphasis">arguments</em> are the values used when
invoking a function, and <em class="filename">parameters</em> are the
placeholders in the function that "receive" the
arguments.</p>


<p>Recall the generic syntax of function invocation with no arguments:</p>


<blockquote><pre class="code"><em class="replaceable">funcName</em>( )</pre></blockquote>


<p>To supply (or <em class="emphasis">pass</em>) arguments to a function, we
provide a list of values within the parentheses when invoking the
function:</p>


<blockquote><pre class="code"><em class="replaceable">funcName</em>(<em class="replaceable">arg1</em>, <em class="replaceable">arg2</em>, <em class="replaceable">arg3</em>,...<em class="replaceable">argn</em>)</pre></blockquote>


<p>The values used as arguments may be any legitimate expression in
ActionScript, including compound expressions. For example, earlier we
defined a simple function, <em class="filename">say( )</em>, that expects
a single parameter, <tt class="literal">msg</tt>:</p>


<blockquote><pre class="code">function say(msg) {
  trace("The message is " + msg);
}</pre></blockquote>


<p>To invoke <em class="filename">say( )</em>, we use a statement like this:</p>


<blockquote><pre class="code">say("This is my first argument...how touching");</pre></blockquote>


<p>Or like this:</p>


<blockquote><pre class="code">say(99);</pre></blockquote>


<p>Notice that the values, "This is my first argument . . . how
touching" and 99, belong to different datatypes. ActionScript
allows us to pass any data of any type to a function, as long as the
function knows what to do with the passed value. (Languages such as C
require that we predefine the datatype for each parameter, and they
display an error if data of the wrong type is provided.)</p>


<p>Before each argument is passed, its value is fully resolved. We may,
therefore, also invoke functions with complex expressions. For
example:</p>


<blockquote><pre class="code">var name = "Gula";
say("Welcome to my web site " + name);</pre></blockquote>


<p>Because the expression <em class="emphasis">"Welcome to my web site " +
name</em> is evaluated before it is passed to the
<em class="filename">say( )</em> function, the function receives the
resolved value "Welcome to my web site Gula". This means
that we can programmatically generate function arguments. Powerful
stuff.</p>


<p>To pass more than one argument to a
<a name="INDEX-1021" />
<a name="INDEX-1022" />function, we separate our
arguments with commas. Recall that our <em class="filename">moveClip(
)</em> function from <a href="ch09_03.htm">Example 9-1</a> accepts three
parameters: <tt class="literal">theClip</tt>, <tt class="literal">xDist</tt>,
<tt class="literal">yDist</tt>. Invoking <em class="filename">moveClip( )</em>,
therefore, looks like this:</p>


<blockquote><pre class="code">moveClip(ball, 5, -15);</pre></blockquote>


<p>Each of the three arguments is assigned as the value of the
corresponding parameter named in the function declaration:
<tt class="literal">ball</tt> is assigned to <tt class="literal">theClip</tt>, 5
is assigned to <tt class="literal">xDist</tt>, and -15 is assigned to
<tt class="literal">yDist</tt>. We can move any clip any distance by
invoking our generic <em class="filename">moveClip( )</em> function with
different arguments. Here we move the clip instance named
<tt class="literal">square</tt> to the right 2 pixels and down 100
<a name="INDEX-1023" />pixels:</p>


<blockquote><pre class="code">moveClip(square, 2, 100);</pre></blockquote>
</div>


<hr width="684" align="left" />
<div class="navbar"><table width="684" border="0"><tr><td align="left" valign="top" width="228"><a href="ch09_02.htm"><img alt="Previous" border="0" src="../gifs/txtpreva.gif" /></a></td><td align="center" valign="top" width="228"><a href="index.htm"><img alt="Home" border="0" src="../gifs/txthome.gif" /></a></td><td align="right" valign="top" width="228"><a href="ch09_04.htm"><img alt="Next" border="0" src="../gifs/txtnexta.gif" /></a></td></tr><tr><td align="left" valign="top" width="228">9.2. Running Functions</td><td align="center" valign="top" width="228"><a href="index/index.htm"><img alt="Book Index" border="0" src="../gifs/index.gif" /></a></td><td align="right" valign="top" width="228">9.4. Exiting and Returning Valuesfrom Functions</td></tr></table></div>
<hr width="684" align="left" />

<img alt="Library Navigation Links" border="0" src="../gifs/navbar.gif" usemap="#library-map" />
<p><font size="-1"><a href="copyrght.htm">Copyright &copy; 2002</a> O'Reilly &amp; Associates. All rights reserved.</font></p>

<map name="library-map"><area href="../index.htm" coords="0,1,78,93" shape="rect" /><area href="../wdesign/index.htm" coords="80,2,155,96" shape="rect" /><area href="../xhtml/index.htm" coords="158,0,263,97" shape="rect" /><area href="../audio/index.htm" coords="265,1,335,97" shape="rect" /><area href="../css/index.htm" coords="338,1,434,93" shape="rect" /><area href="index.htm" coords="439,0,540,102" shape="rect" /><area href="../infoarch/index.htm" coords="544,0,685,102" shape="rect" /></map>

</body></html>