<html><head><title>Multidimensional Arrays (ActionScript: The Definitive Guide)</title><link rel="stylesheet" type="text/css" href="../style/style1.css" />

<meta name="DC.Creator" content="Colin Moock" /><meta name="DC.Format" content="text/xml" scheme="MIME" /><meta name="DC.Language" content="en-US" /><meta name="DC.Publisher" content="O'Reilly &amp; Associates, Inc." /><meta name="DC.Source" scheme="ISBN" content="1565928520L" /><meta name="DC.Subject.Keyword" content="stuff" /><meta name="DC.Title" content="ActionScript: The Definitive Guide" /><meta name="DC.Type" content="Text.Monograph" />

</head><body bgcolor="#ffffff">

<img alt="Book Home" border="0" src="gifs/smbanner.gif" usemap="#banner-map" /><map name="banner-map"><area shape="rect" coords="1,-2,616,66" href="index.htm" alt="ActionScript: The Definitive Guide" /><area shape="rect" coords="629,-11,726,25" href="jobjects/fsearch.htm" alt="Search this book" /></map>

<div class="navbar"><table width="684" border="0"><tr><td align="left" valign="top" width="228"><a href="ch11_09.htm"><img alt="Previous" border="0" src="../gifs/txtpreva.gif" /></a></td><td align="center" valign="top" width="228"><a href="index.htm">ActionScript: The Definitive Guide</a></td><td align="right" valign="top" width="228"><a href="ch11_11.htm"><img alt="Next" border="0" src="../gifs/txtnexta.gif" /></a></td></tr></table></div>
<hr width="684" align="left" />


<h2 class="sect1">11.10. Multidimensional Arrays</h2>


<p>So
<a name="INDEX-1449" />
<a name="INDEX-1450" />far
<a name="INDEX-1451" />we've
<a name="INDEX-1452" />limited our discussion to
<em class="emphasis">one-dimensional</em> arrays, which are akin to a
single row or a single column in a spreadsheet. But what if we want
to create the equivalent of a spreadsheet with both rows and columns?
We need a second dimension. ActionScript natively supports only
one-dimensional arrays, but we can simulate a multidimensional array
by creating arrays within arrays. That is, we can create an array
that contains elements that are themselves arrays (sometimes called
<em class="emphasis">nested</em> arrays).</p>


<p>The simplest type of multidimensional array is a two-dimensional
array, in which elements are organized conceptually into a grid of
rows and columns -- the rows are the first dimension of the array,
and the columns are the second.</p>


<p>Let's consider how a two-dimensional array works with a
practical example. Suppose we're processing an order that
contains three products, each with a quantity and a price. We want to
simulate a spreadsheet with three rows (one for each product) and two
columns (one for the quantity and one for the price). We create a
separate array for each row, treating the elements as columns:</p>


<blockquote><pre class="code">var row1 = [6, 2.99];   // Quantity 6, Price 2.99
var row2 = [4, 9.99];   // Quantity 4, Price 9.99
var row3 = [1, 59.99];  // Quantity 1, Price 59.99</pre></blockquote>


<p>Next, we place the rows into a container array named
<tt class="literal">spreadsheet</tt>:</p>


<blockquote><pre class="code">var spreadsheet = [row1, row2, row3];</pre></blockquote>


<p>Now we can find the total cost of the order by multiplying the
quantity and price of each row and adding them all together. We
access a two-dimensional array's elements using two indexes
(one for the row and one for the column). The expression
<tt class="literal">spreadsheet[0]</tt>, for example, represents the first
row's two-column array. Hence, to access the second column in
the first row of <tt class="literal">spreadsheet</tt>, we use
<tt class="literal">spreadsheet[0][1]</tt>:</p>


<blockquote><pre class="code">// Create a variable to store the total cost of the order
var total;

// Now find the cost of the order. For each row, multiply the columns
// together, and add that to the total.
for (var i = 0; i &lt; spreadsheet.length; i++) {
	total += spreadsheet[i][0] * spreadsheet[i][1];
}

trace(total);  // Displays: 117.89</pre></blockquote>


<p>Aside from storage and access, multidimensional arrays behave just
like normal arrays. We may happily use all of the
<em class="filename">Array</em> methods to manipulate data stored in
multidimensional arrays.</p>


<hr width="684" align="left" />
<div class="navbar"><table width="684" border="0"><tr><td align="left" valign="top" width="228"><a href="ch11_09.htm"><img alt="Previous" border="0" src="../gifs/txtpreva.gif" /></a></td><td align="center" valign="top" width="228"><a href="index.htm"><img alt="Home" border="0" src="../gifs/txthome.gif" /></a></td><td align="right" valign="top" width="228"><a href="ch11_11.htm"><img alt="Next" border="0" src="../gifs/txtnexta.gif" /></a></td></tr><tr><td align="left" valign="top" width="228">11.9. General Array-Manipulation Tools</td><td align="center" valign="top" width="228"><a href="index/index.htm"><img alt="Book Index" border="0" src="../gifs/index.gif" /></a></td><td align="right" valign="top" width="228">11.11. The Multiple-Choice Quiz, Take 3</td></tr></table></div>
<hr width="684" align="left" />

<img alt="Library Navigation Links" border="0" src="../gifs/navbar.gif" usemap="#library-map" />
<p><font size="-1"><a href="copyrght.htm">Copyright &copy; 2002</a> O'Reilly &amp; Associates. All rights reserved.</font></p>

<map name="library-map"><area href="../index.htm" coords="0,1,78,93" shape="rect" /><area href="../wdesign/index.htm" coords="80,2,155,96" shape="rect" /><area href="../xhtml/index.htm" coords="158,0,263,97" shape="rect" /><area href="../audio/index.htm" coords="265,1,335,97" shape="rect" /><area href="../css/index.htm" coords="338,1,434,93" shape="rect" /><area href="index.htm" coords="439,0,540,102" shape="rect" /><area href="../infoarch/index.htm" coords="544,0,685,102" shape="rect" /></map>

</body></html>