<html><head><title>Recursive Functions (ActionScript: The Definitive Guide)</title><link rel="stylesheet" type="text/css" href="../style/style1.css" />

<meta name="DC.Creator" content="Colin Moock" /><meta name="DC.Format" content="text/xml" scheme="MIME" /><meta name="DC.Language" content="en-US" /><meta name="DC.Publisher" content="O'Reilly &amp; Associates, Inc." /><meta name="DC.Source" scheme="ISBN" content="1565928520L" /><meta name="DC.Subject.Keyword" content="stuff" /><meta name="DC.Title" content="ActionScript: The Definitive Guide" /><meta name="DC.Type" content="Text.Monograph" />

</head><body bgcolor="#ffffff">

<img alt="Book Home" border="0" src="gifs/smbanner.gif" usemap="#banner-map" /><map name="banner-map"><area shape="rect" coords="1,-2,616,66" href="index.htm" alt="ActionScript: The Definitive Guide" /><area shape="rect" coords="629,-11,726,25" href="jobjects/fsearch.htm" alt="Search this book" /></map>

<div class="navbar"><table width="684" border="0"><tr><td align="left" valign="top" width="228"><a href="ch09_08.htm"><img alt="Previous" border="0" src="../gifs/txtpreva.gif" /></a></td><td align="center" valign="top" width="228"><a href="index.htm">ActionScript: The Definitive Guide</a></td><td align="right" valign="top" width="228"><a href="ch09_10.htm"><img alt="Next" border="0" src="../gifs/txtnexta.gif" /></a></td></tr></table></div>
<hr width="684" align="left" />


<h2 class="sect1">9.9. Recursive Functions</h2>


<p>A
<em class="emphasis">recursive</em><a name="INDEX-1083" />
<a name="INDEX-1084" />
function is a function that calls itself (by using its own name
within its function body). Here's a simple example that shows
the principle of recursion. But because the code tells the
<em class="filename">trouble( ) </em>function to execute repeatedly (like
an image reflected infinitely in two opposing mirrors), Flash will
quickly run out of memory, causing an error:</p>


<blockquote><pre class="code">function trouble( ) {
  trouble( );
}</pre></blockquote>


<p>Practical recursive functions call themselves only while a given
condition is met (thus preventing <em class="emphasis">infinite
recursion</em>).<a name="INDEX-1085" /> <a href="ch09_08.htm">Example 9-4</a> used
recursion to count from a specified number down to 1, but obviously
that can be accomplished without recursion.</p>


<p>One classic use of recursion is to calculate the mathematical
<em class="emphasis">factorial</em> of a number. The factorial of 3
(written as 3! in mathematical nomenclature) is 3*2*1=6. The
factorial of 5 is 5*4*3*2*1=120. <a href="ch09_09.htm">Example 9-8</a> shows a
<a name="INDEX-1086" />factorial function that uses
recursion.</p>


<a name="ch09-21623" /><div class="example">
<h4 class="objtitle">Example 9-8. Calculating Factorials Using Recursion </h4>

<blockquote><pre class="code">function factorial(x) {
    if (x &lt; 0) {
      return undefined;  // Error condition
    } else if (x &lt;= 1) {
      return 1;
    } else {
      return x * factorial(x-1);
    }
}
trace (factorial(3));  // Displays: 6
trace (factorial(5));  // Displays: 120</pre></blockquote>
</div>


<p>As usual, there is more than one way to skin a proverbial cat. Using
a loop, we can also calculate a factorial without recursion, as shown
in <a href="ch09_09.htm">Example 9-9</a>.</p>


<a name="ch09-68355" /><div class="example">
<h4 class="objtitle">Example 9-9. Calculating Factorials Without Recursion </h4>

<blockquote><pre class="code">function factorial(x) {
    if (x &lt; 0) {
      return undefined; // Error condition
    } else {
      var result = 1;
      for (var i = 1; i &lt;= x; i++) {
        result = result * i;
      }
      return result;
    }
}</pre></blockquote>
</div>


<p><a href="ch09_09.htm">Example 9-8</a> and <a href="ch09_09.htm">Example 9-9</a>
represent two ways of solving the same problem. The recursive method
says, "The factorial of 6 is 6 multiplied by the factorial of
5. The factorial of 5 is 5 multiplied by the factorial of 4 . . .
" and so on. The nonrecursive method loops over the numbers
from 1 to <tt class="literal">x</tt> and multiplies them all together into
one big number.</p>


<p>Which approach is better -- recursive or
nonrecursive -- depends on the problem. Some problems are solved
more easily using recursion, but recursion can be slower than
nonrecursive solutions. Recursion is best used when you don't
know how deeply a data structure may be nested. For example, suppose
you wanted to list all the files within a subdirectory, including
listing all files within any nested subdirectory, ad infinitum. You
couldn't write a general solution that worked for any number of
subdirectories without resorting to recursion. A recursive solution
might look like this in pseudocode:</p>


<blockquote><pre class="code">function listFiles (directoryName) {
  do (<em class="replaceable">check the next item in directoryName</em>) {
    if (<em class="replaceable">this item is a subDirectory itself</em>) {
      // Recursively call this function with the new subdirectory
      listFiles(subDirectoryName);
    } else {
      // Display the name of this file
      trace (filename);
    }
  } while (<em class="replaceable">there are still items to check</em>);
}</pre></blockquote>


<p>When we consider the <em class="filename">XML</em> object in <a href="part3.htm">Part III, "Language Reference"</a>, we'll use recursion to list all the
elements in an XML document.</p>


<hr width="684" align="left" />
<div class="navbar"><table width="684" border="0"><tr><td align="left" valign="top" width="228"><a href="ch09_08.htm"><img alt="Previous" border="0" src="../gifs/txtpreva.gif" /></a></td><td align="center" valign="top" width="228"><a href="index.htm"><img alt="Home" border="0" src="../gifs/txthome.gif" /></a></td><td align="right" valign="top" width="228"><a href="ch09_10.htm"><img alt="Next" border="0" src="../gifs/txtnexta.gif" /></a></td></tr><tr><td align="left" valign="top" width="228">9.8. Function Parameters Revisited</td><td align="center" valign="top" width="228"><a href="index/index.htm"><img alt="Book Index" border="0" src="../gifs/index.gif" /></a></td><td align="right" valign="top" width="228">9.10. Internal Functions</td></tr></table></div>
<hr width="684" align="left" />

<img alt="Library Navigation Links" border="0" src="../gifs/navbar.gif" usemap="#library-map" />
<p><font size="-1"><a href="copyrght.htm">Copyright &copy; 2002</a> O'Reilly &amp; Associates. All rights reserved.</font></p>

<map name="library-map"><area href="../index.htm" coords="0,1,78,93" shape="rect" /><area href="../wdesign/index.htm" coords="80,2,155,96" shape="rect" /><area href="../xhtml/index.htm" coords="158,0,263,97" shape="rect" /><area href="../audio/index.htm" coords="265,1,335,97" shape="rect" /><area href="../css/index.htm" coords="338,1,434,93" shape="rect" /><area href="index.htm" coords="439,0,540,102" shape="rect" /><area href="../infoarch/index.htm" coords="544,0,685,102" shape="rect" /></map>

</body></html>