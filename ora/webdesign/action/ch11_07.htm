<html><head><title>Adding Elements to an Array (ActionScript: The Definitive Guide)</title><link rel="stylesheet" type="text/css" href="../style/style1.css" />

<meta name="DC.Creator" content="Colin Moock" /><meta name="DC.Format" content="text/xml" scheme="MIME" /><meta name="DC.Language" content="en-US" /><meta name="DC.Publisher" content="O'Reilly &amp; Associates, Inc." /><meta name="DC.Source" scheme="ISBN" content="1565928520L" /><meta name="DC.Subject.Keyword" content="stuff" /><meta name="DC.Title" content="ActionScript: The Definitive Guide" /><meta name="DC.Type" content="Text.Monograph" />

</head><body bgcolor="#ffffff">

<img alt="Book Home" border="0" src="gifs/smbanner.gif" usemap="#banner-map" /><map name="banner-map"><area shape="rect" coords="1,-2,616,66" href="index.htm" alt="ActionScript: The Definitive Guide" /><area shape="rect" coords="629,-11,726,25" href="jobjects/fsearch.htm" alt="Search this book" /></map>

<div class="navbar"><table width="684" border="0"><tr><td align="left" valign="top" width="228"><a href="ch11_06.htm"><img alt="Previous" border="0" src="../gifs/txtpreva.gif" /></a></td><td align="center" valign="top" width="228"><a href="index.htm">ActionScript: The Definitive Guide</a></td><td align="right" valign="top" width="228"><a href="ch11_08.htm"><img alt="Next" border="0" src="../gifs/txtnexta.gif" /></a></td></tr></table></div>
<hr width="684" align="left" />


<h2 class="sect1">11.7. Adding Elements to an Array</h2>


<p>You can add elements to an array by specifying a value for a new
element, increasing the array's <tt class="literal">length</tt>
property, or using one of the built-in array functions.</p>


<a name="ch11-19-fm2xml" /><div class="sect2">
<h3 class="sect2">11.7.1. Adding New Elements Directly</h3>


<p>We <a name="INDEX-1379" />can add a new element to an existing
array at a specific index by simply assigning a value to that
element:</p>


<blockquote><pre class="code">// Create an array, and assign it three values
var myList = ["apples", "oranges", "pears"];

// Add a fourth value
myList[3] = "tangerines";</pre></blockquote>


<p>The new element does not need to be placed immediately after the last
element of the old array. If we place the new element more than one
element beyond the end of the array, ActionScript automatically
creates empty elements for the intervening indexes:</p>


<blockquote><pre class="code">// Leave indexes 4 to 38 empty
myList[39] = "grapes";

trace (myList[12]); // Display is empty because element 12 is undefined</pre></blockquote>
</div>




<a name="ch11-20-fm2xml" /><div class="sect2">
<h3 class="sect2">11.7.2. Adding New Elements with the length Property</h3>


<p>To <a name="INDEX-1380" />extend an
<a name="INDEX-1381" /> <a name="INDEX-1382" />array without assigning values to
new elements, we can simply increase the <tt class="literal">length</tt>
property and ActionScript will add enough elements to reach that
length:</p>


<blockquote><pre class="code">// Create an array with three elements
var myColors = ["green", "red", "blue"];

// Add 47 empty elements, numbered 3 through 49, to the array
myColors.length = 50;</pre></blockquote>


<p>You might use this approach to create a number of empty elements to
hold some data you expect to accumulate, such as student test scores.</p>
</div>




<a name="ch11-21-fm2xml" /><div class="sect2">
<h3 class="sect2">11.7.3. Adding New Elements with Array Methods</h3>


<p>We can use built-in array methods to handle more complex
element-addition scenarios. (We'll learn in <a href="ch12_01.htm">Chapter 12, "Objects and Classes"</a>, that a <em class="emphasis">method</em> is a
function that operates on an object.)</p>


<a name="ch11-22-fm2xml" /><div class="sect3">
<h3 class="sect3">11.7.3.1. The push( ) method</h3>


<p>The <a name="INDEX-1383" />
<a name="INDEX-1384" />
<a name="INDEX-1385" /><em class="filename">push( )</em> method
appends one or more elements to the end of an array. It<em class="filename">
</em>automatically appends the data after the last element of
the array, so we don't need to worry about how many elements
already exist. The <em class="emphasis">p</em><em class="filename">ush( )</em>
method can also append multiple elements to an array at once. To
invoke <em class="filename">push( )</em> on an array, we use the array
name followed by the dot operator, by the keyword
<em class="emphasis">push</em>, and zero or more parameters in
parentheses:</p>


<blockquote><pre class="code"><em class="replaceable">arrayName</em>.push(<em class="replaceable">item1</em>, <em class="replaceable">item2</em>,...<em class="replaceable">itemn</em>);</pre></blockquote>


<p>where <em class="replaceable">item1</em>,
<em class="replaceable">item2</em>,...<em class="replaceable">itemn</em>
are a comma-separated list of items to be appended to the end of the
array as new elements. Here are some examples:</p>


<blockquote><pre class="code">// Create an array with two elements
var menuItems = ["home", "quit"];

// Add an element
// <em class="replaceable">menuItems</em> becomes ["home", "quit", "products"]
menuItems.push("products");   

// Add two more elements
// <em class="replaceable">menuItems</em> becomes ["home", "quit", "products", "services", "contact"]
menuItems.push("services", "contact");</pre></blockquote>


<p>When invoked with no arguments, <em class="filename">push( )</em> appends
an empty element:</p>


<blockquote><pre class="code">menuItems.push( );  // Increase array length by one

// Same as
menuItems.length++;</pre></blockquote>


<p>The <em class="filename">push( )</em> method returns the new length of the
updated array:</p>


<blockquote><pre class="code">var myList = [12, 23, 98];
trace(myList.push(28, 36));  // Appends 28 and 36 to <em class="replaceable">myList</em>, and displays: 5</pre></blockquote>


<p>Note that the items added to a list can be any expression. The
expression is resolved before being added to the list:</p>


<blockquote><pre class="code">var temperature = 22;
var sky = "sunny";
var weatherListing = new Array( );
weatherListing.push(temperature, sky);
trace (weatherListing); // Displays: "22,sunny", not "temperature,sky"</pre></blockquote>


<a name="ch11-23-fm2xml" /><blockquote><table border="1" cellpadding="6"><tr><td>
<h4 class="objtitle">Pushing, Popping, and Stacks</h4>


<p>The <a name="INDEX-1386" /><em class="filename">push( )</em> method takes
its name from a programming concept called a
<em class="emphasis">stack</em>. A stack can be thought of as a vertical
array, like a stack of dishes. If you frequent cafeterias or
restaurants with buffets, you'll be familiar with the
spring-loaded racks that hold plates for the diners. When clean
dishes are added, they are literally <em class="emphasis">pushed</em> onto
the top of the stack and the older dishes sink lower into the rack.
When a customer <em class="emphasis">pops</em> a dish from the stack, he
is removing the dish that was most recently pushed onto the stack.
This is known as a <a name="INDEX-1387" /> <a name="INDEX-1388" />last-in-first-out
(LIFO) stack and is typically used for things like history lists. For
example, if you hit the Back button in your browser, it will take you
to the previous web page you visited. If you hit the Back button
again, you'll be brought to the page before that, and so on.
This is achieved by <em class="emphasis">pushing</em> the URL of each page
you visit onto the stack and <em class="emphasis">popping</em> it off when
the Back button is clicked.</p>


<p>LIFO stacks can also be found in real life. The last person to check
her luggage on an airplane usually receives her luggage first when
the plane lands because the luggage is unloaded in the reverse order
from which it was loaded. The early bird who checked his luggage
first is doomed to wait the longest at the luggage conveyor belt
after the plane lands. A <a name="INDEX-1389" /> <a name="INDEX-1390" />first-in-first-out
(FIFO) stack is more egalitarian -- it works on a
first-come-first-served basis. A FIFO stack is like the line at your
local bank. Instead of taking the last element in an array, a FIFO
stack deals with the first element in an array next. It then deletes
the first element in the array and all the other elements "move
up," just as you move up in line when the person in front of
you is deleted (i.e., she is either served and then leaves, or
chooses to leave in disgust because she is tired of waiting).
Therefore, the word <em class="emphasis">push</em> generally implies that
you are using a LIFO stack, whereas the word
<em class="emphasis">append</em> implies that you are using a FIFO stack.
In either case, elements are added to the "end" of the
stack; the difference lies in from which end of the array the element
for the next operation is taken.</p>

</td></tr></table></blockquote>
</div>



<a name="ch11-24-fm2xml" /><div class="sect3">
<h3 class="sect3">11.7.3.2. The unshift( ) method</h3>


<p>The <em class="filename">unshift(
)</em><a name="INDEX-1391" />
<a name="INDEX-1392" />
<a name="INDEX-1393" /> method is much like <em class="filename">push(
)</em>, but it adds one or more elements to the
<em class="emphasis">beginning</em> of the array, bumping all existing
elements further along (i.e., the indexes of existing elements
increase to accommodate the new elements at the beginning of the
array). The syntax of <em class="filename">unshift( )</em> follows the
same style as all array methods:</p>


<blockquote><pre class="code"><em class="replaceable">arrayName</em>.unshift(<em class="replaceable">item1</em>, <em class="replaceable">item2</em>,...<em class="replaceable">itemn</em>);</pre></blockquote>


<p>where <em class="replaceable">item1</em>,
<em class="replaceable">item2</em>,...<em class="replaceable">itemn</em>
are a comma-separated list of items to be added to the beginning of
the array as new elements. Note that multiple items are added in the
order that they were supplied. Here are some examples:</p>


<blockquote><pre class="code">var flashVersions = new Array( );
flashVersions[0] = 5;
flashVersions.unshift(4);    // <em class="replaceable">flashVersions</em> is now [4, 5]
flashVersions.unshift(2,3);  // <em class="replaceable">flashVersions</em> is now [2, 3, 4, 5]</pre></blockquote>


<p>The <em class="filename">unshift( )</em> method, like <em class="filename">push(
)</em>, returns the new length of the array being enlarged.</p>
</div>



<a name="ch11-25-fm2xml" /><div class="sect3">
<h3 class="sect3">11.7.3.3. The splice( ) method</h3>


<p>The<em class="filename"> </em><a name="INDEX-1394" />
<a name="INDEX-1395" /> <a name="INDEX-1396" /><em class="filename">splice( )</em> method
can add elements to, or
<a name="INDEX-1397" />remove elements from, an array. It is
typically used to squeeze elements into the middle of an array
(latter elements are renumbered to make room) or to delete elements
from the middle of an array (latter elements are renumbered to close
the gap). When <em class="filename">splice( )</em> performs both of these
tasks in a single invocation, it effectively replaces some elements
with new elements (though not necessarily the same number of
elements). Here's the syntax for <em class="filename">splice( )
</em>:</p>


<blockquote><pre class="code"><em class="replaceable">arrayName</em>.splice(<em class="replaceable">startIndex</em>, <em class="replaceable">deleteCount</em>, <em class="replaceable">item1</em>, <em class="replaceable">item2</em>,...<em class="replaceable">itemn</em>)</pre></blockquote>


<p>where <em class="replaceable">startIndex</em> is a number that
specifies the index at which element removal and optional insertion
should commence (remember that the first element's index is 0);
<em class="replaceable">deleteCount</em> is an optional argument that
dictates how many elements should be removed (including the element
at <em class="replaceable">startIndex</em>). When
<em class="replaceable">deleteCount</em> is omitted, every element
after <em class="emphasis">and including</em>
<em class="replaceable">startIndex</em> is removed. The optional
parameters <em class="replaceable">item1</em>,
<em class="replaceable">item2</em>,...<em class="replaceable">itemn</em>
are a comma-separated list of items to be added to the array as
elements starting at <em class="replaceable">startIndex</em>.</p>


<p><a href="ch11_07.htm">Example 11-3</a> shows the versatility of the
<em class="filename">splice( )</em> method.</p>


<a name="ch11-92938" /><div class="example">
<h4 class="objtitle">Example 11-3. Using the splice( ) Array Method </h4>

<blockquote><pre class="code">// Make an array...
months = new Array("January", "Friday", "April", "May", "Sunday", "Monday", "July");
// Hmmm. Something's wrong with our array. Let's fix it up.
// First, let's get rid of "Friday"
months.splice(1,1); 
  // <em class="replaceable">months</em> is now: 
  // ["January", "April", "May", "Sunday", "Monday", "July"]

// Now, let's add the two months before "April".
// Note that we won't delete anything here (<em class="replaceable">deleteCount</em> is 0).
months.splice(1, 0, "February", "March");
  // <em class="replaceable">months</em> is now: 
  // ["January", "February", "March", "April", "May", "Sunday", "Monday", "July"]

// Finally, let's remove "Sunday" and "Monday" while inserting "June"
months.splice(5, 2, "june");
  // <em class="replaceable">months</em> is now: 
  // ["January", "February", "March", "April", "May", "June", "July"]

// Now that our <em class="replaceable">months</em> array is fixed, let's trim it
// so that it contains only the first quarter of the year
// by deleting all elements starting with index 3 (i.e., "April")
months.splice(3); // <em class="replaceable">months</em> is now: ["January", "February", "March"]</pre></blockquote>
</div>


<p>Another useful feature of <em class="filename">splice( )</em> is that it
returns an array of the elements it <em class="emphasis">removes</em>.
Thus it can be used to extract a series of elements from an array:</p>


<blockquote><pre class="code">myList = ["a", "b", "c", "d"];
trace(myList.splice(1, 2));  // Displays: "b, c"
                             // <em class="replaceable">myList</em> is now ["a", "d"]</pre></blockquote>


<p>If no elements are removed, <em class="filename">splice( )</em> returns an
empty <a name="INDEX-1398" /> <a name="INDEX-1399" /> <a name="INDEX-1400" />array.</p>
</div>



<a name="ch11-75323" /><div class="sect3">
<h3 class="sect3">11.7.3.4. The concat( ) method</h3>


<p>Like <a name="INDEX-1401" />
<a name="INDEX-1402" />
<a name="INDEX-1403" /><em class="filename">push(
)</em>, <em class="filename">concat( )</em> adds elements to the end
of an array. Unlike <em class="filename">push( )</em>, <em class="filename">concat(
)</em> does not modify the array on which it is
invoked -- instead, <em class="filename">concat( )</em> returns a new
array. Furthermore, <em class="filename">concat( )</em> can break arrays
supplied as arguments into individual elements, allowing it to
combine two arrays into a single, new array. Here's the syntax
for <em class="filename">concat( ) </em>:</p>


<blockquote><pre class="code"><em class="replaceable">origArray</em>.concat(<em class="replaceable">elementList</em>)</pre></blockquote>


<p>The <em class="filename">concat( )</em> method appends the elements
contained in <em class="replaceable">elementList</em>, one by one, to
the end of <em class="replaceable">origArray</em> and returns the
result as a <em class="emphasis">new</em> array, leaving
<em class="replaceable">origArray</em> untouched. Normally, we'll
store the returned array in a variable. Here, simple numbers are used
as the items to be added to the array:</p>


<blockquote><pre class="code">var list1 = new Array(11, 12, 13);
var list2 = list1.concat(14, 15);  // <em class="replaceable">list2</em> becomes [11, 12, 13, 14, 15]</pre></blockquote>


<p>In this example, we use <em class="filename">concat( )</em> to combine two
arrays:</p>


<blockquote><pre class="code">var guests = ["Panda", "Dave"];
var registeredPlayers = ["Gray", "Doomtrooper", "TRK9"];
var allUsers = registeredPlayers.concat(guests);
// <em class="replaceable">allUsers</em> is now: ["Gray", "Doomtrooper", "TRK9", "Panda", "Dave"]</pre></blockquote>


<p>Notice that <a name="INDEX-1404" /><em class="filename">concat( )</em> separated
the elements of the <tt class="literal">guests</tt> array in a way that
<em class="filename">push( )</em> would not have. If we had tried this
code:</p>


<blockquote><pre class="code">var allUsers = registeredPlayers.push(guests);</pre></blockquote>


<p>we'd have ended up with this nested array:</p>


<blockquote><pre class="code">["Gray", "Shift", "TRK9", ["Panda", "Dave"]]</pre></blockquote>


<p>Furthermore, <em class="filename">push( )</em> would have altered the
<tt class="literal">registeredPlayers</tt> array, whereas <em class="filename">concat(
)</em> does not.</p>


<p>Note, however, that <em class="filename">concat( )</em> does
<em class="emphasis">not</em> break apart <em class="emphasis">nested</em>
arrays (elements that are themselves arrays within the main array),
as you can see from the following code:</p>


<blockquote><pre class="code">var x = [1, 2, 3];
var y = [[5, 6], [7, 8]];
var z = x.concat(y);  // Result is [1, 2, 3, [5, 6], [7, 8]].
                      // Elements 0 and 1 of <em class="replaceable">y</em> were not "flattened."</pre></blockquote>
</div>
</div>


<hr width="684" align="left" />
<div class="navbar"><table width="684" border="0"><tr><td align="left" valign="top" width="228"><a href="ch11_06.htm"><img alt="Previous" border="0" src="../gifs/txtpreva.gif" /></a></td><td align="center" valign="top" width="228"><a href="index.htm"><img alt="Home" border="0" src="../gifs/txthome.gif" /></a></td><td align="right" valign="top" width="228"><a href="ch11_08.htm"><img alt="Next" border="0" src="../gifs/txtnexta.gif" /></a></td></tr><tr><td align="left" valign="top" width="228">11.6. Named Array Elements</td><td align="center" valign="top" width="228"><a href="index/index.htm"><img alt="Book Index" border="0" src="../gifs/index.gif" /></a></td><td align="right" valign="top" width="228">11.8. Removing Elements from an Array</td></tr></table></div>
<hr width="684" align="left" />

<img alt="Library Navigation Links" border="0" src="../gifs/navbar.gif" usemap="#library-map" />
<p><font size="-1"><a href="copyrght.htm">Copyright &copy; 2002</a> O'Reilly &amp; Associates. All rights reserved.</font></p>

<map name="library-map"><area href="../index.htm" coords="0,1,78,93" shape="rect" /><area href="../wdesign/index.htm" coords="80,2,155,96" shape="rect" /><area href="../xhtml/index.htm" coords="158,0,263,97" shape="rect" /><area href="../audio/index.htm" coords="265,1,335,97" shape="rect" /><area href="../css/index.htm" coords="338,1,434,93" shape="rect" /><area href="index.htm" coords="439,0,540,102" shape="rect" /><area href="../infoarch/index.htm" coords="544,0,685,102" shape="rect" /></map>

</body></html>