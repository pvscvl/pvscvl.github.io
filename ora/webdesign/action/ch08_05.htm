<html><head><title>The for-in Loop (ActionScript: The Definitive Guide)</title><link rel="stylesheet" type="text/css" href="../style/style1.css" />

<meta name="DC.Creator" content="Colin Moock" /><meta name="DC.Format" content="text/xml" scheme="MIME" /><meta name="DC.Language" content="en-US" /><meta name="DC.Publisher" content="O'Reilly &amp; Associates, Inc." /><meta name="DC.Source" scheme="ISBN" content="1565928520L" /><meta name="DC.Subject.Keyword" content="stuff" /><meta name="DC.Title" content="ActionScript: The Definitive Guide" /><meta name="DC.Type" content="Text.Monograph" />

</head><body bgcolor="#ffffff">

<img alt="Book Home" border="0" src="gifs/smbanner.gif" usemap="#banner-map" /><map name="banner-map"><area shape="rect" coords="1,-2,616,66" href="index.htm" alt="ActionScript: The Definitive Guide" /><area shape="rect" coords="629,-11,726,25" href="jobjects/fsearch.htm" alt="Search this book" /></map>

<div class="navbar"><table width="684" border="0"><tr><td align="left" valign="top" width="228"><a href="ch08_04.htm"><img alt="Previous" border="0" src="../gifs/txtpreva.gif" /></a></td><td align="center" valign="top" width="228"><a href="index.htm">ActionScript: The Definitive Guide</a></td><td align="right" valign="top" width="228"><a href="ch08_06.htm"><img alt="Next" border="0" src="../gifs/txtnexta.gif" /></a></td></tr></table></div>
<hr width="684" align="left" />


<h2 class="sect1">8.5. The for-in Loop</h2>


<p>A <em class="filename">for-in</em><a name="INDEX-948" /> statement is a specialized loop used to
list the <a name="INDEX-949" />properties of an object. New programmers
may want to skip this section for now and return to it after reading
<a href="ch12_01.htm">Chapter 12, "Objects and Classes"</a>.</p>


<p>Rather than repeating a series of statements until a given test
expression yields the value <tt class="literal">false</tt>, a
<em class="filename">for-in</em> loop iterates once for each property in
the specified object. Therefore,<em class="filename"> for-in</em>
statements do not need an explicit update statement because the
number of loop iterations is determined by the number of properties
in the object being inspected. The syntax of a
<em class="filename">for-in</em> loop looks like this:</p>


<blockquote><pre class="code">for (var <em class="replaceable">thisProp</em> in <em class="replaceable">object</em>) {
  <em class="replaceable">substatements</em>;  // Statements typically use thisProp in some way
}</pre></blockquote>


<p>The <a name="INDEX-950" /><em class="replaceable">substatements</em>
are executed once for each property of
<em class="replaceable">object</em>; <em class="replaceable">object</em>
is the name of any valid object; <em class="replaceable">thisProp</em>
is any variable name or identifier name. During each loop iteration,
the <em class="replaceable">thisProp</em> variable temporarily holds a
string that is the name of the object property currently being
enumerated. That string value can be used during each iteration to
access and manipulate the current property. The simplest example of a
<em class="filename">for-in</em> loop is a script that lists the
properties of an object. Here we create an object and then itemize
its properties with a <em class="filename">for-in</em> loop:</p>


<blockquote><pre class="code">var ball = new Object( );
ball.radius = 12;
ball.color = "red";
ball.style = "beach";

for (var prop in ball) {
  trace("ball has the property " + prop);
}</pre></blockquote>


<p>Because <tt class="literal">prop</tt> stores the names of the properties of
<tt class="literal">ball</tt> as strings, we can use
<tt class="literal">prop</tt> with the <tt class="literal">[]</tt> operator to
retrieve the values of those properties, like this:</p>


<blockquote><pre class="code">for (var prop in ball) {
  trace("ball." + prop + " is " + ball[prop]);
}</pre></blockquote>


<p>Retrieving property values with a <em class="filename">for-in</em> loop
also provides a super way to detect the movie clips present on a
timeline. For a demonstration of the <em class="filename">for-in</em> loop
used as a movie clip detector, see <a href="ch03_04.htm">Example 3-1</a>.</p>


<p>Note <a name="INDEX-951" /> <a name="INDEX-952" />that the properties of the object being
inspected in a <em class="filename">for-in</em> loop are not enumerated in
any predictable order. Also, <em class="filename">for-in</em> statements
do not always list every property of an object. When the object is
user-defined, all properties are enumerated, including any inherited
properties. But some properties of built-in objects are skipped by
the <em class="filename">for-in</em> statement. Methods of built-in
objects, for example, are not enumerated by a
<em class="filename">for-in</em> loop. If you want to use a
<em class="filename">for-in</em> statement to manipulate the properties of
a built-in object, first build a test loop to determine the
object's accessible properties.</p>

<a name="ch08-8-fm2xml" /><blockquote><h4>WARNING</h4>
<p>Input text fields without a default value are not enumerated by a
<em class="filename">for-in</em> loop. Hence, form-validation code that
detects empty text fields will not work properly unless those text
fields are explicitly declared as normal variables in the timeline
upon which they reside. See <a href="ch18_07.htm">Section 18.7, "Empty Text Fields and the for-in Statement"</a> in
<a href="ch18_01.htm">Chapter 18, "On-Screen Text Fields"</a>.</p>

</blockquote>

<p>The <em class="filename">for-in</em> statement can also be used to extract
elements in an array, in which case it takes the form:</p>


<blockquote><pre class="code">for (var <em class="replaceable">thisElem</em> in <em class="replaceable">array</em>) {
  <em class="replaceable">substatements</em>; // Statements typically use thisElem in some way
}</pre></blockquote>


<p>This example lists the elements of an array:</p>


<blockquote><pre class="code">var myArr = [123, 234, 345, 456];
for (var elem in myArr) {
  trace(myArr[elem]);
}</pre></blockquote>


<hr width="684" align="left" />
<div class="navbar"><table width="684" border="0"><tr><td align="left" valign="top" width="228"><a href="ch08_04.htm"><img alt="Previous" border="0" src="../gifs/txtpreva.gif" /></a></td><td align="center" valign="top" width="228"><a href="index.htm"><img alt="Home" border="0" src="../gifs/txthome.gif" /></a></td><td align="right" valign="top" width="228"><a href="ch08_06.htm"><img alt="Next" border="0" src="../gifs/txtnexta.gif" /></a></td></tr><tr><td align="left" valign="top" width="228">8.4. The for Loop</td><td align="center" valign="top" width="228"><a href="index/index.htm"><img alt="Book Index" border="0" src="../gifs/index.gif" /></a></td><td align="right" valign="top" width="228">8.6. Stopping a Loop Prematurely</td></tr></table></div>
<hr width="684" align="left" />

<img alt="Library Navigation Links" border="0" src="../gifs/navbar.gif" usemap="#library-map" />
<p><font size="-1"><a href="copyrght.htm">Copyright &copy; 2002</a> O'Reilly &amp; Associates. All rights reserved.</font></p>

<map name="library-map"><area href="../index.htm" coords="0,1,78,93" shape="rect" /><area href="../wdesign/index.htm" coords="80,2,155,96" shape="rect" /><area href="../xhtml/index.htm" coords="158,0,263,97" shape="rect" /><area href="../audio/index.htm" coords="265,1,335,97" shape="rect" /><area href="../css/index.htm" coords="338,1,434,93" shape="rect" /><area href="index.htm" coords="439,0,540,102" shape="rect" /><area href="../infoarch/index.htm" coords="544,0,685,102" shape="rect" /></map>

</body></html>