<html><head><title>The User-Input Movie Clip Events (ActionScript: The Definitive Guide)</title><link rel="stylesheet" type="text/css" href="../style/style1.css" />

<meta name="DC.Creator" content="Colin Moock" /><meta name="DC.Format" content="text/xml" scheme="MIME" /><meta name="DC.Language" content="en-US" /><meta name="DC.Publisher" content="O'Reilly &amp; Associates, Inc." /><meta name="DC.Source" scheme="ISBN" content="1565928520L" /><meta name="DC.Subject.Keyword" content="stuff" /><meta name="DC.Title" content="ActionScript: The Definitive Guide" /><meta name="DC.Type" content="Text.Monograph" />

</head><body bgcolor="#ffffff">

<img alt="Book Home" border="0" src="gifs/smbanner.gif" usemap="#banner-map" /><map name="banner-map"><area shape="rect" coords="1,-2,616,66" href="index.htm" alt="ActionScript: The Definitive Guide" /><area shape="rect" coords="629,-11,726,25" href="jobjects/fsearch.htm" alt="Search this book" /></map>

<div class="navbar"><table width="684" border="0"><tr><td align="left" valign="top" width="228"><a href="ch10_10.htm"><img alt="Previous" border="0" src="../gifs/txtpreva.gif" /></a></td><td align="center" valign="top" width="228"><a href="index.htm">ActionScript: The Definitive Guide</a></td><td align="right" valign="top" width="228"><a href="ch10_12.htm"><img alt="Next" border="0" src="../gifs/txtnexta.gif" /></a></td></tr></table></div>
<hr width="684" align="left" />


<h2 class="sect1">10.11. The User-Input Movie Clip Events</h2>


<p>The <a name="INDEX-1252" />
<a name="INDEX-1253" />remainder <a name="INDEX-1254" />of the
<a name="INDEX-1255" />movie clip events relate to user
interaction. When any of the user-input clip events occurs,
<em class="emphasis">all</em> clips on stage (no matter how deeply nested
in other clips) receive the event. Hence, multiple clips may react to
a single mouseclick, mouse movement, or keystroke.</p>


<p>To execute code based on the proximity of the mouse to a particular
clip, an event handler should check the location of the mouse pointer
relative to the clip. The built-in <em class="filename">hitTest(
)</em><a name="INDEX-1256" /> function provides an easy way to check
whether a mouseclick occurred within a certain region, as shown later
in <a href="ch10_17.htm">Example 10-9</a>.</p>


<a name="ch10-35-fm2xml" /><div class="sect2">
<h3 class="sect2">10.11.1. mouseDown</h3>


<p>Like <a name="INDEX-1257" /> <a name="INDEX-1258" />the
<em class="filename">press</em> button event, the
<em class="filename">mouseDown</em> clip event detects the downstroke of a
mouseclick. The <em class="filename">mouseDown</em> event occurs each time
the primary mouse button is depressed while the mouse pointer is over
<em class="emphasis">any part </em>of the Stage.</p>


<p>Unlike the button <em class="filename">press</em> event,
<em class="filename">mouseDown</em> is not tied to the
<em class="emphasis">hit</em><a name="INDEX-1259" /> area of a button. In combination with the
<em class="filename">mouseUp</em> and <em class="filename">mouseMove</em>
events and the <em class="filename">Mouse.hide( )</em> method, the
<em class="filename">mouseDown</em> event can be used to implement a
custom mouse pointer, as we'll see later in <a href="ch10_17.htm">Example 10-8</a>.</p>
</div>




<a name="ch10-36-fm2xml" /><div class="sect2">
<h3 class="sect2">10.11.2. mouseUp</h3>


<p>The <a name="INDEX-1260" /> <a name="INDEX-1261" /><em class="filename">mouseUp</em>
event is the counterpart to <em class="filename">mouseDown</em>. It occurs
each time the primary mouse button is released while the mouse
pointer is over any part of the Stage. As with
<em class="filename">mouseDown</em>, a clip with a
<em class="filename">mouseUp</em> handler must be present on stage at the
time the mouse button is released in order for the event to have any
consequence. The <em class="filename">mouseUp,</em>
<em class="filename">mouseDown,</em> and <em class="filename">mouseMove</em>
events can be used to create rich levels of mouse interactivity
without affecting the appearance of the mouse pointer (as a button
does).</p>
</div>




<a name="ch10-37-fm2xml" /><div class="sect2">
<h3 class="sect2">10.11.3. mouseMove</h3>


<p>The <a name="INDEX-1262" /> <a name="INDEX-1263" /><em class="filename">mouseMove</em>
<a name="INDEX-1264" />event lets us detect changes in the mouse
pointer's position. Whenever the mouse is in motion,
<em class="emphasis">m</em><em class="filename">ouseMove</em> events are issued
repeatedly, as fast as the processor can generate new events. A clip
with a <em class="filename">mouseMove</em> handler must be present on
stage at the time the mouse is moving in order for the
<em class="filename">mouseMove</em> event to have any effect.</p>


<p>The <em class="filename">mouseMove</em> event is useful for code that
wakes up idle applications, displays mouse trails, and creates custom
pointers, as we'll see later in <a href="ch10_17.htm">Example 10-8</a>.</p>
</div>




<a name="ch10-55357" /><div class="sect2">
<h3 class="sect2">10.11.4. keyDown</h3>


<p>The<em class="filename"> keyDown</em><a name="INDEX-1265" /> <a name="INDEX-1266" /> <a name="INDEX-1267" />and <em class="filename">keyUp</em> events are
the keyboard analogs of <em class="filename">mouseDown</em> and
<em class="filename">mouseUp</em>. Together, they provide fundamental
tools for coding keyboard-based interactivity. The
<em class="filename">keyDown</em> event occurs whenever a key on the
keyboard is depressed. When a key is held down,
<em class="filename">keyDown</em> may occur repeatedly, depending on the
operating system and keyboard setup. Unlike the
<em class="filename">keyPress</em> button event,
<em class="filename">keyDown</em> clip events occur when any key -- not
just the specific key -- is pressed.</p>


<p>To <em class="emphasis">trap</em> (i.e., detect or
<em class="emphasis">catch</em>) a <em class="filename">keyDown</em> event, we
must ensure that a movie clip with a <em class="filename">keyDown</em>
event handler is present on stage at the time that a key is pressed.
The following code does the trick:</p>


<blockquote><pre class="code">onClipEvent (keyDown) {
  trace("Some key was pressed");
}</pre></blockquote>


<p>You'll notice that our
<em class="filename">keyDown</em><a name="INDEX-1268" /> handler does not tell us which
key was pressed. If we're waiting for the user to press any key
to continue, we might not care which key it was. But usually, we want
to tie some action to a specific key. For example, we might want
different keys to turn a spaceship in different directions.</p>


<p>To <a name="INDEX-1269" />find out which keys triggered the
<em class="filename">keyDown</em> event, we consult the built-in
<em class="filename">Key</em> object, which describes the keyboard's
state. The type of information we require depends on the
interactivity we're trying to produce. Games, for example,
require instant, continuous feedback from potentially simultaneous
keypresses. Navigational interfaces, in contrast, may require only
the detection of a single keypress (e.g., the spacebar in a slide
show presentation).</p>


<p>The <em class="filename">Key</em> object can tell us which key was last
pressed and whether a particular key is currently being pressed. To
determine the state of the keyboard, we use one of the
<a name="INDEX-1270" />four
<a name="INDEX-1271" /><em class="filename">Key</em>
<a name="INDEX-1272" />object
<a name="INDEX-1273" />methods:</p>


<blockquote><pre class="code">Key.getCode( )           // Base-10 keycode value of last key pressed
Key.getAscii( )          // Base-10 ASCII value of last key pressed
Key.isDown(<em class="replaceable">keycode</em>)     // Returns<em class="replaceable"> true</em> if specified key is currently pressed
Key.isToggled(<em class="replaceable">keycode</em>)  // Determines whether Caps Lock or Num Lock is toggled on</pre></blockquote>


<p><a href="ch10_11.htm">Example 10-5</a> shows a <em class="filename">keyDown</em>
handler that tells us the ASCII value of the last key pressed.</p>


<a name="ch10-74091" /><div class="example">
<h4 class="objtitle">Example 10-5. Checking the Last Key Pressed </h4>

<blockquote><pre class="code">onClipEvent (keyDown) {
  // Retrieve the ASCII value of the last key pressed and convert it to a character
  lastKeyPressed = String.fromCharCode(Key.getAscii( ));
  trace("You pressed the '" + lastKeyPressed + "' key.");
}</pre></blockquote>
</div>


<p><a href="ch10_11.htm">Example 10-6</a> shows a sample
<em class="filename">keyDown</em> handler that checks whether the up arrow
was the last key pressed.</p>


<a name="ch10-44809" /><div class="example">
<h4 class="objtitle">Example 10-6. Detecting an Up Arrow Keypress </h4>

<blockquote><pre class="code">onClipEvent (keyDown) {
  // Check to see if the up arrow was the last key pressed.
  // The up arrow is represented by the Key.UP property.
  if (Key.getCode( ) == Key.UP) {
    trace("The up arrow was the last key depressed");
  }
}</pre></blockquote>
</div>


<p>There are several ways to query the state of the keyboard, and you
must choose the one that best suits your application. For example,
the <em class="filename">Key.getAscii( )</em> method returns the ASCII
value of the character associated with the last-pressed key, which
may differ across keyboards in different languages (though, in
English, the placement of the letters and numbers on a keyboard is
standardized). On the other hand, the <em class="filename">Key.getCode(
)</em> method returns a value tied to a physical key on the
keyboard, not a specific letter. <em class="filename">Key.getCode( )</em>
may be more useful for an international or cross-platform audience if
you want to, say, use four adjacent keys for navigation regardless of
the characters they represent. There's more information on this
topic under <a href="ch20_05.htm">Reference 20.85</a> in <a href="part3.htm">Part III, "Language Reference"</a>.</p>


<p>You can download sample <em class="filename">keyDown</em> and
<em class="filename">keyUp</em> <em class="filename">.fla</em> files from the
online Code Depot.</p>



<a name="ch10-39-fm2xml" /><blockquote><h4>TIP</h4>
<p>Event handlers that react to keystrokes are executed only if the
Flash Player has mouse focus. Users must click the Stage of a movie
before the movie's keystroke handlers will become active.
Consider forcing users to click a button before entering any
keyboard-controlled section of a movie.</p>

</blockquote>

<a name="ch10-65790" /><div class="sect3">
<h3 class="sect3">10.11.4.1. Handling special keys</h3>


<p>To disable the <a name="INDEX-1274" />Flash
<a name="INDEX-1275" /> <a name="INDEX-1276" />standalone Player menu commands
(Open, Close, Fullscreen, etc.), <a name="INDEX-1277" />add the following
line of code to the beginning of your movie:</p>


<blockquote><pre class="code">fscommand("trapallkeys", "true");</pre></blockquote>


<p>That command also prevents the <a name="INDEX-1278" />Escape key from exiting fullscreen
mode in a Projector. To capture Escape in a Projector, use:</p>


<blockquote><pre class="code">onClipEvent (keyDown) {
  if (Key.getCode( ) == Key.ESCAPE) {
    // Respond to Escape keypress
  }
}</pre></blockquote>


<p>Note that the Escape key cannot be trapped in all browsers.
Furthermore, there is no way to disable the Alt key or the Windows
Alt-Tab or Ctrl-Alt-Delete key sequences.</p>


<p>To capture <a name="INDEX-1279" />Tab keypresses, create a button with
the following handler:</p>


<blockquote><pre class="code">on (keyPress "&lt;Tab&gt;") {
  // Respond to Tab key
}</pre></blockquote>


<p>In the standalone Player, the Tab key may also be captured with a
clip event handler such as:</p>


<blockquote><pre class="code">onClipEvent (keyDown) {
  if (Key.getCode( ) == Key.TAB) {
    // Respond to Tab keypress
  }
}</pre></blockquote>


<p>In some browsers, the Tab key can be detected only with a button
<em class="filename">keyPress</em> event, and it may even be necessary to
combine a <em class="filename">keyPress</em> button event with a
<em class="filename">keyUp</em> clip event. The following code first traps
the Tab key with <em class="filename">keyPress</em>, and then reacts to it
in a <em class="filename">keyUp</em> handler. Note that we don't use
<em class="filename">keyDown</em> because <em class="filename">Key.getCode(
)</em> for the Tab key is set only on the key upstroke in
Internet Explorer:</p>


<blockquote><pre class="code"><tt class="userinput"><b>
// CODE ON BUTTON ON MAIN TIMELINE</b></tt>
on (keyPress "&lt;Tab&gt;") {
  // Set a dummy variable here
  foo = 0;
}
<tt class="userinput"><b>
// CODE ON MOVIE CLIP ON MAIN TIMELINE</b></tt>
onClipEvent (keyUp) {
  if (Key.getCode( ) == Key.TAB) {
    // Now place the cursor in <em class="replaceable">myTextField</em> on _level0
    Selection.setFocus("_level0.myTextField");
  }
}</pre></blockquote>


<p>We typically trap the Tab key in order to move the insertion point to
a particular text field in a form. See the example under <a href="ch20_05.htm">Reference 20.205</a> in <a href="part3.htm">Part III, "Language Reference"</a> for details.</p>


<p>To <a name="INDEX-1280" />capture a
<a name="INDEX-1281" />shortcut-key-style combination such as
Ctrl-F, use an <em class="filename">enterFrame</em> handler and the
<em class="filename">Key.isDown(
)</em><a name="INDEX-1282" /> method:</p>


<blockquote><pre class="code">onClipEvent (enterFrame) {
  if (Key.isDown(Key.CONTROL) &amp;&amp; Key.isDown(70)) {
	// Respond to Ctrl-F
  }
}</pre></blockquote>


<p>To capture the <a name="INDEX-1283" />
<a name="INDEX-1284" />Enter
(or Return) key, use either a button handler, such as:</p>


<blockquote><pre class="code">on (keyPress "&lt;Enter&gt;") {
  // Respond to Enter key press (e.g., submit a form)
}</pre></blockquote>


<p>or a <em class="filename">keyDown</em> handler, such as:</p>


<blockquote><pre class="code">onClipEvent (keyDown) {
  if (Key.getCode( ) == Key.ENTER) {
    // Respond to Enter key press (e.g., submit a form)
  }
}</pre></blockquote>


<p>See <a href="ch20_05.htm">Reference 20.85</a> and <a href="ch20_05.htm">Reference 20.87</a> in <a href="part3.htm">Part III, "Language Reference"</a> for
more information on capturing other special keys such as the function
keys (F1, F2, etc.) or keys on <a name="INDEX-1285" /> <a name="INDEX-1286" />the <a name="INDEX-1287" />numeric
<a name="INDEX-1288" /> <a name="INDEX-1289" />keypad.</p>
</div>
</div>




<a name="ch10-92844" /><div class="sect2">
<h3 class="sect2">10.11.5. keyUp</h3>


<p>The <em class="filename">keyUp</em><a name="INDEX-1290" /> <a name="INDEX-1291" /> event is
triggered when a depressed key is released. The
<em class="filename">keyUp</em> event is an essential component of game
programming because it lets us turn off something that was turned on
by an earlier <em class="filename">keyDown</em> event -- the classic
example being a spaceship's thrust. As a further example, in
the Flash authoring tool, holding down the spacebar temporarily
switches to the Hand tool, and releasing the spacebar restores the
previous tool. This approach can be used to show and hide things in
your application, such as temporary menus.</p>


<p>As with <em class="filename">keyDown</em>, in order to obtain useful
information from a <em class="filename">keyUp</em> event, we normally use
it with the <em class="filename">Key</em> object:</p>


<blockquote><pre class="code">onClipEvent (keyUp) {
  if (!Key.isDown(Key.LEFT)) {
    trace("The left arrow is not depressed");
  }
}</pre></blockquote>


<p>Because the <em class="filename">Key.isDown( )</em> method lets us check
the status of any key anytime, we may use an
<em class="filename">enterFrame</em><a name="INDEX-1292" /> event loop to check whether a
certain key is depressed. However,
<em class="emphasis">polling</em><a name="INDEX-1293" /> <a name="INDEX-1294" /> the keyboard (i.e., checking the status
of a key repeatedly) is less efficient than waiting until we
<em class="emphasis">know</em> that a key has been pressed as indicated by
a <em class="filename">keyDown</em> event triggering our event handler.</p>


<p>The approach we end up taking ultimately depends on the type of
system we're building. In a system that's constantly in
motion, such as a game, polling may be appropriate because
we're cycling through a main game loop with every frame anyway.
So, we can just check the <em class="filename">Key</em> object while
we're doing the rest of our loop. For example:</p>


<blockquote><pre class="code"><tt class="userinput"><b>
// CODE ON EMPTY CLIP</b></tt>
// This keeps the game process running
onClipEvent (enterFrame) {
  _root.mainLoop( );
}
<tt class="userinput"><b>
// CORE GAME CODE ON MAIN TIMELINE</b></tt>
// This is executed once per frame
function mainLoop ( ) {
  if (Key.isDown(Key.LEFT)) {
    trace("The left arrow is depressed");
    // Rotate the spaceship to the left
  }

  // Check the other keys, then carry on with our game cycle
}</pre></blockquote>


<p>In static-interface environments, there's no need to use an
<em class="filename">enterFrame</em> loop to check for keypresses unless
you are trying to detect specific keyboard combinations (i.e.,
multiple keys being pressed simultaneously). You should ordinarily
use <em class="filename">keyDown</em> and <em class="filename">keyUp</em> event
handlers, which are triggered precisely once for each keypress and
key release. When using <em class="filename">keyUp</em> and
<em class="filename">keyDown </em>event handlers, you need not concern
yourself with whether the key is still being pressed at any given
instant. This allows you to detect keypresses accurately even if the
user releases the key between frames, and it also prevents you from
checking the same key twice if it was pressed only once. In any case,
you will ordinarily use the <em class="filename">Key.getCode( )</em> and
<em class="filename">Key.getASCII( )</em> methods to check for the last
key pressed within a <em class="filename">keyDown</em> or <a name="INDEX-1295" /><em class="filename">keyUp</em>
<a name="INDEX-1296" />
<a name="INDEX-1297" />event
<a name="INDEX-1298" />
<a name="INDEX-1299" />handler.</p>
</div>


<hr width="684" align="left" />
<div class="navbar"><table width="684" border="0"><tr><td align="left" valign="top" width="228"><a href="ch10_10.htm"><img alt="Previous" border="0" src="../gifs/txtpreva.gif" /></a></td><td align="center" valign="top" width="228"><a href="index.htm"><img alt="Home" border="0" src="../gifs/txthome.gif" /></a></td><td align="right" valign="top" width="228"><a href="ch10_12.htm"><img alt="Next" border="0" src="../gifs/txtnexta.gif" /></a></td></tr><tr><td align="left" valign="top" width="228">10.10. Movie-Playback Movie Clip Events</td><td align="center" valign="top" width="228"><a href="index/index.htm"><img alt="Book Index" border="0" src="../gifs/index.gif" /></a></td><td align="right" valign="top" width="228">10.12. Order of Execution</td></tr></table></div>
<hr width="684" align="left" />

<img alt="Library Navigation Links" border="0" src="../gifs/navbar.gif" usemap="#library-map" />
<p><font size="-1"><a href="copyrght.htm">Copyright &copy; 2002</a> O'Reilly &amp; Associates. All rights reserved.</font></p>

<map name="library-map"><area href="../index.htm" coords="0,1,78,93" shape="rect" /><area href="../wdesign/index.htm" coords="80,2,155,96" shape="rect" /><area href="../xhtml/index.htm" coords="158,0,263,97" shape="rect" /><area href="../audio/index.htm" coords="265,1,335,97" shape="rect" /><area href="../css/index.htm" coords="338,1,434,93" shape="rect" /><area href="index.htm" coords="439,0,540,102" shape="rect" /><area href="../infoarch/index.htm" coords="544,0,685,102" shape="rect" /></map>

</body></html>
