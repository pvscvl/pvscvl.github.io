<html><head><title>Variables (ActionScript: The Definitive Guide)</title><link rel="stylesheet" type="text/css" href="../style/style1.css" />

<meta name="DC.Creator" content="Colin Moock" /><meta name="DC.Format" content="text/xml" scheme="MIME" /><meta name="DC.Language" content="en-US" /><meta name="DC.Publisher" content="O'Reilly &amp; Associates, Inc." /><meta name="DC.Source" scheme="ISBN" content="1565928520L" /><meta name="DC.Subject.Keyword" content="stuff" /><meta name="DC.Title" content="ActionScript: The Definitive Guide" /><meta name="DC.Type" content="Text.Monograph" />

</head><body bgcolor="#ffffff">

<img alt="Book Home" border="0" src="gifs/smbanner.gif" usemap="#banner-map" /><map name="banner-map"><area shape="rect" coords="1,-2,616,66" href="index.htm" alt="ActionScript: The Definitive Guide" /><area shape="rect" coords="629,-11,726,25" href="jobjects/fsearch.htm" alt="Search this book" /></map>

<div class="navbar"><table width="684" border="0"><tr><td align="left" valign="top" width="228"><a href="ch01_04.htm"><img alt="Previous" border="0" src="../gifs/txtpreva.gif" /></a></td><td align="center" valign="top" width="228"><a href="index.htm">ActionScript: The Definitive Guide</a></td><td align="right" valign="top" width="228"><a href="ch02_02.htm"><img alt="Next" border="0" src="../gifs/txtnexta.gif" /></a></td></tr></table></div>
<hr width="684" align="left" />



<h1 class="chapter">Chapter 2. Variables</h1>
<div class="htmltoc"><h4 class="tochead">Contents:</h4><p>
<a href="ch02_01.htm">Creating Variables (Declaration)</a><br />
<a href="ch02_02.htm">Assigning Variables</a><br />
<a href="ch02_03.htm">Changing and Retrieving Variable Values</a><br />
<a href="ch02_04.htm">Types of Values</a><br />
<a href="ch02_05.htm">Variable Scope</a><br />
<a href="ch02_06.htm">Some Applied Examples</a><br />
<a href="ch02_07.htm">Onward!</a><br /></p></div>


<p>In <a name="INDEX-160" />a
typical scripted movie, we have to track and manipulate everything
from frame numbers to a user's password to the velocity of a
photon torpedo fired from a spaceship. In order to manage and
retrieve all that information, we need to store it in
<em class="emphasis">variables</em>, the primary information-storage
containers of ActionScript.</p>


<p>A variable is a like a bank account that, instead of holding money,
holds information (<em class="emphasis">data</em>). Creating a new
variable is like setting up a new account; we establish a place to
store something we'll need in the future. And just as every
bank account has an account number, every variable has a name
associated with it that is used to access the data in the variable.</p>


<p>Once a variable is created, we can put new data into it as often as
we want -- much like depositing money into an account. Or we can
find out what's in a variable using the variable's
name -- much like checking an account balance. If we no longer
need our variable, we can "close the account" by deleting
the variable.</p>


<p>The key feature to note is that variables let us refer to data that
either changes or is calculated when a movie plays. Just as a bank
account's number remains the same even though the account
balance varies, a variable's name remains fixed even though the
data it contains may change. Using that fixed reference to access
changing content, we can perform complex calculations, keep track of
cards in a card game, save guest book entries, or send the playhead
to different locations based on changing conditions.</p>


<p>Is that a gleam of excitement I see in your eye? Good, I thought I
might have lost you with all that talk about banks. Let's start
our exploration of variables by seeing how to create them.</p>


<div class="sect1"><a name="ch02-2-fm2xml" />
<h2 class="sect1">2.1. Creating Variables (Declaration)</h2>


<p>Creating <a name="INDEX-161" />
<a name="INDEX-162" />
<a name="INDEX-163" />a variable is called
<em class="emphasis">declaration</em>. Declaration is the "open an
account" step of our bank metaphor, where we formally bring the
variable into existence. When a variable is first declared, it is
empty -- a blank page waiting to be written upon. In this state, a
variable contains a special value called <tt class="literal">undefined</tt>
(indicating the absence of data).</p>


<p>To declare a new variable, we use the <em class="filename">var</em>
statement. For example:</p>


<blockquote><pre class="code">var speed;
var bookTitle;
var x;</pre></blockquote>


<p>The word <em class="filename">var</em> tells the interpreter that
we're declaring a variable, and the text that follows, such as
<tt class="literal">speed</tt>, <tt class="literal">bookTitle</tt>, or
<tt class="literal">x</tt>, becomes our new variable's name. We can
create variables anywhere we can attach code: on a keyframe, a
button, or a movie clip.</p>


<p>We can also declare several variables with one
<em class="filename">var</em> statement, like this:</p>


<blockquote><pre class="code">var x, y, z;</pre></blockquote>


<p>However, doing so impairs our ability to add comments next to each
variable.</p>


<p>Once a variable has been created, we may assign it a value, but
before we learn how to do that, let's consider some of the
subtler details of variable declaration.</p>


<a name="ch02-3-fm2xml" /><div class="sect2">
<h3 class="sect2">2.1.1. Automatic Variable Creation</h3>


<p>Many <a name="INDEX-164" /> <a name="INDEX-165" />
<a name="INDEX-166" />programming languages require
variables to be declared before data may be deposited into them;
failure to do so would cause an error. ActionScript is not that
strict. If we assign a value to a variable that does not exist, the
interpreter will create a new variable for us. The bank, to continue
that analogy, automatically opens an account when you try to make
your first deposit.</p>


<p>This convenience comes at a cost, though. If we don't declare
our variables ourselves, we have no central inventory to consult when
examining our code. Furthermore, explicitly declaring a variable with
a <em class="filename">var</em> statement can sometimes yield different
results than allowing a variable to be declared
<em class="emphasis">implicitly</em> (i.e., automatically). It's
safest to declare first and use later (i.e., <em class="emphasis">explicit
declaration</em>), as shown throughout this book.</p>
</div>




<a name="ch02-4-fm2xml" /><div class="sect2">
<h3 class="sect2">2.1.2. Legal Variable Names</h3>


<p>Before
<a name="INDEX-167" />
<a name="INDEX-168" />running off
to make any variables, be aware that variable names:</p>


<ul><li><p>Must be composed exclusively of letters, numbers, and underscores.
(No spaces, hyphens, or punctuation allowed.)</p></li><li><p>Must start with a letter or an underscore.</p></li><li><p>Must not exceed 255 characters. (Okay, okay, that's a lie, but
reevaluate your naming scheme if your variable names exceed 255
characters.)</p></li><li><p>Are case-insensitive (upper- and lowercase are treated identically
but you should be consistent nonetheless).</p></li></ul>
<p>These are legal variable names:</p>


<blockquote><pre class="code">var <em class="replaceable">first_name</em>;
var <em class="replaceable">counter</em>;
var <em class="replaceable">reallyLongVariableName</em>;</pre></blockquote>


<p>These are illegal variable names that would cause errors:</p>


<blockquote><pre class="code">var <em class="replaceable">1first_name</em>;                 // Starts with a number
var <em class="replaceable">variable name with spaces;</em>   // Contains spaces
var <em class="replaceable">another-illegal-name</em>;        // Contains a hyphen</pre></blockquote>


<a name="ch02-51596" /><div class="sect3">
<h3 class="sect3">2.1.2.1. Creating dynamically named variables</h3>


<p>Although <a name="INDEX-169" />
<a name="INDEX-170" />you'll
rarely, if ever, use dynamically created variable names, it's
possible to generate the name of a variable programmatically. To
create a variable name from any expression, use the
<em class="filename">set</em> statement. For example, here we assign the
value "bruce" to <tt class="literal">player1name</tt>:</p>


<blockquote><pre class="code">var i = 1;
set ("player" + i + "name", "bruce");</pre></blockquote>


<p>Arrays and objects, discussed in later chapters, provide us with a
much more powerful means of tracking dynamically named data and
should be used instead of dynamic variable names.</p>
</div>
</div>




<a name="ch02-5-fm2xml" /><div class="sect2">
<h3 class="sect2">2.1.3. Declare Variables at the Outset</h3>


<p>It's good practice to declare your variables at the beginning
of every movie's main script space, which is usually the first
keyframe that comes after a movie's preloader. Be sure to add a
comment explaining each variable's purpose for easy
identification later. The beginning of a well-organized script might
look like this:</p>


<blockquote><pre class="code">// ^^^^^^^^^^^^^^^^^^^^
// Initialize variables
// ^^^^^^^^^^^^^^^^^^^^
var ballSpeed;   // Velocity of ball, max 10
var score;       // Player's current score
var hiScore;     // High score (not saved between sessions)
var player1;     // Name of player 1, supplied by user</pre></blockquote>


<p>We can give variables an initial value at the same time we create
them, as follows:</p>


<blockquote><pre class="code">var ballSpeed = 5;   // Velocity of ball, max 10
var score = 0;       // Player's current score
var hiScore = 0;     // High score (not saved between sessions)</pre></blockquote><a name="INDEX-171" />
<a name="INDEX-172" />
<a name="INDEX-173" />
</div>
</div>






























































<hr width="684" align="left" />
<div class="navbar"><table width="684" border="0"><tr><td align="left" valign="top" width="228"><a href="ch01_04.htm"><img alt="Previous" border="0" src="../gifs/txtpreva.gif" /></a></td><td align="center" valign="top" width="228"><a href="index.htm"><img alt="Home" border="0" src="../gifs/txthome.gif" /></a></td><td align="right" valign="top" width="228"><a href="ch02_02.htm"><img alt="Next" border="0" src="../gifs/txtnexta.gif" /></a></td></tr><tr><td align="left" valign="top" width="228">1.4. Onward!</td><td align="center" valign="top" width="228"><a href="index/index.htm"><img alt="Book Index" border="0" src="../gifs/index.gif" /></a></td><td align="right" valign="top" width="228">2.2. Assigning Variables</td></tr></table></div>
<hr width="684" align="left" />

<img alt="Library Navigation Links" border="0" src="../gifs/navbar.gif" usemap="#library-map" />
<p><font size="-1"><a href="copyrght.htm">Copyright &copy; 2002</a> O'Reilly &amp; Associates. All rights reserved.</font></p>

<map name="library-map"><area href="../index.htm" coords="0,1,78,93" shape="rect" /><area href="../wdesign/index.htm" coords="80,2,155,96" shape="rect" /><area href="../xhtml/index.htm" coords="158,0,263,97" shape="rect" /><area href="../audio/index.htm" coords="265,1,335,97" shape="rect" /><area href="../css/index.htm" coords="338,1,434,93" shape="rect" /><area href="index.htm" coords="439,0,540,102" shape="rect" /><area href="../infoarch/index.htm" coords="544,0,685,102" shape="rect" /></map>

</body></html>