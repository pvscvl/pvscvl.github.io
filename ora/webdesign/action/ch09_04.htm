<html><head><title>Exiting and Returning Values from Functions (ActionScript: The Definitive Guide)</title><link rel="stylesheet" type="text/css" href="../style/style1.css" />

<meta name="DC.Creator" content="Colin Moock" /><meta name="DC.Format" content="text/xml" scheme="MIME" /><meta name="DC.Language" content="en-US" /><meta name="DC.Publisher" content="O'Reilly &amp; Associates, Inc." /><meta name="DC.Source" scheme="ISBN" content="1565928520L" /><meta name="DC.Subject.Keyword" content="stuff" /><meta name="DC.Title" content="ActionScript: The Definitive Guide" /><meta name="DC.Type" content="Text.Monograph" />

</head><body bgcolor="#ffffff">

<img alt="Book Home" border="0" src="gifs/smbanner.gif" usemap="#banner-map" /><map name="banner-map"><area shape="rect" coords="1,-2,616,66" href="index.htm" alt="ActionScript: The Definitive Guide" /><area shape="rect" coords="629,-11,726,25" href="jobjects/fsearch.htm" alt="Search this book" /></map>

<div class="navbar"><table width="684" border="0"><tr><td align="left" valign="top" width="228"><a href="ch09_03.htm"><img alt="Previous" border="0" src="../gifs/txtpreva.gif" /></a></td><td align="center" valign="top" width="228"><a href="index.htm">ActionScript: The Definitive Guide</a></td><td align="right" valign="top" width="228"><a href="ch09_05.htm"><img alt="Next" border="0" src="../gifs/txtnexta.gif" /></a></td></tr></table></div>
<hr width="684" align="left" />


<h2 class="sect1">9.4. Exiting and Returning Values from Functions</h2>


<p>Unless instructed otherwise, a function will end naturally when the
interpreter finishes executing the last statement in the
function's body. You can, however, terminate a function before
the last statement is reached. Additionally, a function can return a
result (send back a calculated value) to the code that invoked it.
Let's see how these things work.</p>


<a name="ch09-7-fm2xml" /><div class="sect2">
<h3 class="sect2">9.4.1. Terminating a Function</h3>


<p>The
<a name="INDEX-1024" /><em class="filename">return</em>
<a name="INDEX-1025" />statement, which was introduced in
<a href="ch06_01.htm">Chapter 6, "Statements"</a>, can be used to terminate a function
and, optionally, to return a result. When the interpreter encounters
a <em class="filename">return</em> statement during a function execution,
it skips any remaining statements in the function. Consider this
example:</p>


<blockquote><pre class="code">function say(msg) {
  return;
  trace(msg);         // This line is never reached
}</pre></blockquote>


<p>The preceding example is not realistic because its
<em class="filename">return</em> statement always causes the function to
end before the <em class="filename">trace( )</em> statement is reached.
Therefore, the <em class="filename">return</em> statement is normally the
last statement in a function body unless it is used inside a
conditional statement. In this example, we use
<em class="filename">return</em> to exit if the password is not correct:</p>


<blockquote><pre class="code">var correctPass = "cactus";
function enterSite(pass) {
  if (pass != correctPass) {
    // Exit if the password is wrong
    return;
  }
  // This code is reached only if the password is correct
  gotoAndPlay("intro");
}

enterSite("hackAttack");  // Function will exit prematurely
enterSite("cactus");      // Function will end naturally</pre></blockquote>


<p>As its name implies, <em class="filename">return</em> tells the
interpreter to return to the location of the function invocation. If
no <em class="filename">return</em> statement is present, ActionScript
acts as if the last line of the function body contains a
<em class="filename">return</em> statement:</p>


<blockquote><pre class="code">function say(msg) {
  trace(msg);
  return;              // This line is completely optional in this context
}</pre></blockquote>


<p>Regardless of whether the <em class="filename">return</em> statement is
implied or explicit, whenever a function terminates, execution
resumes at the line of code following the function-call statement.
For example:</p>


<blockquote><pre class="code">say ("Something");  // This executes the code in the <em class="replaceable">say( )</em> function
// Execution resumes here after the <em class="replaceable">say( )</em> function terminates
trace ("Something else");</pre></blockquote>
</div>




<a name="ch09-8-fm2xml" /><div class="sect2">
<h3 class="sect2">9.4.2. Returning Values from Functions</h3>


<p>As <a name="INDEX-1026" />we've <a name="INDEX-1027" />seen, <em class="filename">return</em>
always terminates a function. But it can also be used to send a value
back to the script that invoked the function, using the following
syntax:</p>


<blockquote><pre class="code">return <em class="replaceable">expression</em>;</pre></blockquote>


<p>The value of <em class="replaceable">expression</em> becomes the result
of the function invocation. For example:</p>


<blockquote><pre class="code">// Define a function that adds two numbers
function combine(a, b) {
  return a + b;  // Return the sum of the two arguments
}

// Invoke the function
var total = combine(2, 1);  // Sets <em class="replaceable">total</em> to 3</pre></blockquote>


<p>The expression or result returned by the <em class="filename">return</em>
statement is called the <em class="emphasis">return value</em> of the
function.</p>


<p>Notice that our <em class="filename">combine( )</em> function merely
calculates and returns the sum of two numbers (it will also
concatenate two strings). It does not perform an action, as did the
<em class="filename">sayHi( )</em> function (which displayed a message) or
the <em class="filename">moveClip( )</em> function (which repositioned a
movie clip). We can make use of a function's return value by
assigning it to a variable:</p>


<blockquote><pre class="code">var total = combine (5, 6);               // Sets <em class="replaceable">total</em> to 11
var greet = combine ("Hello ", "Cheryl")  // <em class="replaceable">greet</em> is "Hello Cheryl"</pre></blockquote>


<p>The result of a function call is just an ordinary expression.
Therefore, it can also be used in additional expressions. This
example sets <tt class="literal">phrase</tt> to "11 people were at
the party":</p>


<blockquote><pre class="code">var phrase = combine(5, 6) + " people were at the party";</pre></blockquote>


<p>We'll frequently use function return values as parts of
compound expressions -- even as arguments in another function
invocation. For example:</p>


<blockquote><pre class="code">var a = 3;
var b = 4;
function sqr(x) {  // Squares a number
  return x * x;
}
var hypotenuse = Math.sqrt(sqr(a) + sqr(b));</pre></blockquote>


<p>Notice how the example passes the return values of our <em class="filename">sqr(
)</em> function to the <em class="filename">Math.sqrt( )</em>
function! Along the same lines, our earlier example could be
rewritten as:</p>


<blockquote><pre class="code">var phrase = combine (combine(5,6), " people were at the party");</pre></blockquote>


<p>In the preceding example, the expression
<em class="emphasis">combine(5,6)</em>, which evaluates to 11, becomes an
argument to the outer <em class="filename">combine( )</em> function call,
where it is concatenated with the string " people were at the
party".</p>


<p>If a <em class="filename">return</em> statement doesn't include an
expression to be returned or the <em class="filename">return</em>
statement is omitted entirely, a function will return the value
<tt class="literal">undefined</tt>. In fact, this is a common source of
error. For example, the following won't do anything meaningful
because the <em class="filename">return</em> statement is missing:</p>


<blockquote><pre class="code">function combine(a, b) {
  var result = a + b;  // The result is calculated, but not returned
}</pre></blockquote>


<p>Likewise, this too is incorrect:</p>


<blockquote><pre class="code">function combine(a, b) {
  var result = a + b;
  return;  // You've forgotten to specify the return value
}</pre></blockquote>


<p>When creating a function that is supposed to return the result of a
calculation, don't forget to include a
<em class="filename">return</em> statement that actually returns the
desired value. Otherwise, the return value will be
<tt class="literal">undefined</tt> and any subsequent calculations based on
that result will almost certainly <a name="INDEX-1028" />be <a name="INDEX-1029" />incorrect.</p>
</div>


<hr width="684" align="left" />
<div class="navbar"><table width="684" border="0"><tr><td align="left" valign="top" width="228"><a href="ch09_03.htm"><img alt="Previous" border="0" src="../gifs/txtpreva.gif" /></a></td><td align="center" valign="top" width="228"><a href="index.htm"><img alt="Home" border="0" src="../gifs/txthome.gif" /></a></td><td align="right" valign="top" width="228"><a href="ch09_05.htm"><img alt="Next" border="0" src="../gifs/txtnexta.gif" /></a></td></tr><tr><td align="left" valign="top" width="228">9.3. Passing Information to Functions</td><td align="center" valign="top" width="228"><a href="index/index.htm"><img alt="Book Index" border="0" src="../gifs/index.gif" /></a></td><td align="right" valign="top" width="228">9.5. Function Literals</td></tr></table></div>
<hr width="684" align="left" />

<img alt="Library Navigation Links" border="0" src="../gifs/navbar.gif" usemap="#library-map" />
<p><font size="-1"><a href="copyrght.htm">Copyright &copy; 2002</a> O'Reilly &amp; Associates. All rights reserved.</font></p>

<map name="library-map"><area href="../index.htm" coords="0,1,78,93" shape="rect" /><area href="../wdesign/index.htm" coords="80,2,155,96" shape="rect" /><area href="../xhtml/index.htm" coords="158,0,263,97" shape="rect" /><area href="../audio/index.htm" coords="265,1,335,97" shape="rect" /><area href="../css/index.htm" coords="338,1,434,93" shape="rect" /><area href="index.htm" coords="439,0,540,102" shape="rect" /><area href="../infoarch/index.htm" coords="544,0,685,102" shape="rect" /></map>

</body></html>
