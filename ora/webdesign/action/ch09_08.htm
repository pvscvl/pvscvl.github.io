<html><head><title>Function Parameters Revisited (ActionScript: The Definitive Guide)</title><link rel="stylesheet" type="text/css" href="../style/style1.css" />

<meta name="DC.Creator" content="Colin Moock" /><meta name="DC.Format" content="text/xml" scheme="MIME" /><meta name="DC.Language" content="en-US" /><meta name="DC.Publisher" content="O'Reilly &amp; Associates, Inc." /><meta name="DC.Source" scheme="ISBN" content="1565928520L" /><meta name="DC.Subject.Keyword" content="stuff" /><meta name="DC.Title" content="ActionScript: The Definitive Guide" /><meta name="DC.Type" content="Text.Monograph" />

</head><body bgcolor="#ffffff">

<img alt="Book Home" border="0" src="gifs/smbanner.gif" usemap="#banner-map" /><map name="banner-map"><area shape="rect" coords="1,-2,616,66" href="index.htm" alt="ActionScript: The Definitive Guide" /><area shape="rect" coords="629,-11,726,25" href="jobjects/fsearch.htm" alt="Search this book" /></map>

<div class="navbar"><table width="684" border="0"><tr><td align="left" valign="top" width="228"><a href="ch09_07.htm"><img alt="Previous" border="0" src="../gifs/txtpreva.gif" /></a></td><td align="center" valign="top" width="228"><a href="index.htm">ActionScript: The Definitive Guide</a></td><td align="right" valign="top" width="228"><a href="ch09_09.htm"><img alt="Next" border="0" src="../gifs/txtnexta.gif" /></a></td></tr></table></div>
<hr width="684" align="left" />


<h2 class="sect1">9.8. Function Parameters Revisited</h2>

<p>Now that
<a name="INDEX-1064" />we're
comfortable with how functions work, let's return to the topic
of function parameters. Our current discussion requires a little
knowledge of objects, so new programmers may want to read <a href="ch12_01.htm">Chapter 12, "Objects and Classes"</a> before reading this section.</p>


<a name="ch09-15-fm2xml" /><div class="sect2">
<h3 class="sect2">9.8.1. Number of Parameters</h3>


<p>Earlier we learned that the
<a name="INDEX-1065" />parameters of a function are declared when
the function is created. Recall the syntax:</p>


<blockquote><pre class="code">function <em class="replaceable">funcName</em> (<em class="replaceable">param1</em>, <em class="replaceable">param2</em>, <em class="replaceable">param3</em>,<em class="replaceable">...paramn</em>) {
  <em class="replaceable">statements</em>
}</pre></blockquote>


<p>Perhaps surprisingly, the number of parameters passed to a function
can differ from the number specified in the formal function
declaration. Functions can accept any number of parameters, whether
more than or fewer than the "expected" number. When a
function is called with fewer than the declared number of parameters,
the value of each missing parameter is set to
<tt class="literal">undefined</tt>. For example:</p>


<blockquote><pre class="code">function viewVars (x, y, z) {
  trace ("x is " + x);
  trace ("y is " + y);
  trace ("z is " + z);
}

viewVars(10);  // Displays: "x is 10", "y is ", and "z is " because 
               // <em class="replaceable">y</em> and <em class="replaceable">z</em> are undefined (and display as blanks)</pre></blockquote>


<p>When a function is called with <em class="emphasis">more</em> parameters
than the declared number, excess parameter values can be accessed
using the <em class="filename">arguments</em><a name="INDEX-1066" />
<a name="INDEX-1067" /> object.
(Obviously the excess parameters can't be accessed by name like
explicitly declared parameters because their names were not
declared.)</p>
</div>




<a name="ch09-16-fm2xml" /><div class="sect2">
<h3 class="sect2">9.8.2. The arguments Object</h3>


<p>During <a name="INDEX-1068" />the execution of any function, the
built-in <em class="filename">arguments</em> object gives us access to
three pieces of information: (a) the number of parameters that were
passed to the function, (b) an array containing each of those
parameter values, and (c) the name of the function being executed.
The <em class="filename">arguments</em> object is really a special hybrid
between an array and an object with some other properties.</p>


<a name="ch09-17-fm2xml" /><div class="sect3">
<h3 class="sect3">9.8.2.1. Retrieving parameter values from the arguments array</h3>


<p>The <a name="INDEX-1069" />
<a name="INDEX-1070" /><tt class="literal">arguments</tt> array lets
us check the value of any function parameter whether or not that
parameter is defined formally in the function's declaration
statement. To access a parameter, we examine the indexes of the
<tt class="literal">arguments</tt><em class="filename"> </em>array:</p>


<blockquote><pre class="code">arguments[<em class="replaceable">n</em>]</pre></blockquote>


<p>where <em class="replaceable">n</em> is the index of the parameter
we're accessing. The first parameter (the leftmost parameter in
the function-call expression) is stored at index
and is referred to as <tt class="literal">arguments[0]</tt>. Subsequent
arguments are stored in order, proceeding to the right -- so the
second argument is <tt class="literal">arguments[1]</tt>, the third is
<tt class="literal">arguments[2]</tt>, and so on.</p>


<p>From within a function, we can tell how many arguments were passed to
the currently executing function by checking the number of elements
in <tt class="literal">arguments</tt>, as follows:</p>


<blockquote><pre class="code">arguments.length</pre></blockquote>


<p>We can easily cycle through all the parameters passed to a function
and display the results in the Output window, as shown in <a href="ch09_08.htm">Example 9-3</a>.</p>


<a name="ch09-79568" /><div class="example">
<h4 class="objtitle">Example 9-3. Displaying an Unknown Number of Parameters </h4>

<blockquote><pre class="code">function showArgs( ) {
  for (var i = 0; i &lt; arguments.length; i++) {
    trace("Parameter " + (i + 1) + " is " + arguments[i]);
  }
}

showArgs(123, 23, "skip intro");

// Displays...
Parameter 1 is 123
Parameter 2 is 23
Parameter 3 is skip intro</pre></blockquote>
</div>


<p>The <tt class="literal">arguments</tt><em class="filename"> </em>array allows us
to create very flexible functions that accept an arbitrary number of
parameters.</p>


<p>Here's a generic function that removes any number of duplicated
movie clip instances from the Stage:</p>


<blockquote><pre class="code">function killClip( ) {
  for (var i = 0; i &lt; arguments.length; i++) {
    arguments[i].removeMovieClip( );
  }
}

killClip(clip10, clip5, clip13);</pre></blockquote>


<p>Reader Exercise: Modify our earlier <em class="filename">combine( )</em>
function to accept an arbitrary number of inputs. What other
functions might benefit from accepting an arbitrary number of
parameters? How about a function that averages an arbitrary list of
numbers? (Hint: sum all the arguments and then divide by the number
of arguments.)</p>
</div>



<a name="ch09-18-fm2xml" /><div class="sect3">
<h3 class="sect3">9.8.2.2. The callee property</h3>


<p>As <a name="INDEX-1071" /> <a name="INDEX-1072" />we've seen, the
<tt class="literal">arguments</tt> array lets us retrieve a
function's parameters. The <em class="filename">arguments</em>
object has one property, <tt class="literal">callee</tt>, which returns a
reference to the executing function. Normally, we know the name of
the function we're calling, but if we are executing an
anonymous function that was originally created with a function
literal, the <tt class="literal">callee</tt> property can prove useful.
<a href="ch09_08.htm">Example 9-4</a> shows a function created with a function
literal that performs recursive executions without knowing its own
name. See <a href="ch09_09.htm">Section 9.9, "Recursive Functions"</a> later in this chapter</p>


<a name="ch09-33311" /><div class="example">
<h4 class="objtitle">Example 9-4. Counting Down with callee </h4>

<blockquote><pre class="code">count = function (x) {
  trace(x);
  if (x &gt; 1) {
    arguments.callee(x - 1);
  }
}
count(25);</pre></blockquote>
</div>


<p>Obviously we can count down without using recursive anonymous
functions. We'll see a more realistic example of function
recursion later in this chapter.</p>
</div>
</div>




<a name="ch09-34892" /><div class="sect2">
<h3 class="sect2">9.8.3. Primitive Versus Composite Parameter Values</h3>


<p>There's one <a name="INDEX-1073" /> <a name="INDEX-1074" /> <a name="INDEX-1075" />more <a name="INDEX-1076" /> <a name="INDEX-1077" />parameter subtlety we
should consider -- the difference between passing
<em class="emphasis">primitive</em> data and
<em class="emphasis">composite</em> data to a function.</p>


<p>When we pass a primitive data value as an argument to a function, the
function receives a copy of the data, not the original. Changes made
to a parameter in the function have no effect on the original
argument outside that function. In <a href="ch09_08.htm">Example 9-5</a>,
<tt class="literal">variableName</tt>'s value is initially set to 25.
Changing its value to 10 within the <em class="filename">setValue( )</em>
function has no effect on <tt class="literal">y </tt>'s value.</p>


<a name="ch09-13085" /><div class="example">
<h4 class="objtitle">Example 9-5. Primitive Data Is Passed by Value </h4>

<blockquote><pre class="code">var y = 25;
function setValue(variableName) {
  variableName = 10;
}
setValue(y);
trace("y is " + y);  // Displays: "y is 25"</pre></blockquote>
</div>


<p>Primitive data is, therefore, said to be <em class="emphasis">passed by
value</em>. When we pass <em class="emphasis">composite</em> data as
an argument to a function, however, the function receives a
<em class="emphasis">reference</em> that points to the same data as the
original argument, not just a duplicate of the data. Altering the
data via the parameter variable affects the original data and
therefore affects other variables that point to the same data, even
outside of the function. Composite data, therefore, is said to be
<em class="emphasis">passed by reference</em>.</p>


<p>In <a href="ch09_08.htm">Example 9-6</a>, changes to the
<tt class="literal">myArray</tt> parameter variable affect the external
<tt class="literal">boys</tt> array because they both point to the same
data in memory.</p>


<a name="ch09-83585" /><div class="example">
<h4 class="objtitle">Example 9-6. Modifying Composite Data Arguments Passed by Reference </h4>

<blockquote><pre class="code">// Create an array
var boys = ["Andrew", "Graham", "Derek"];

// <em class="replaceable">setValue( )</em> sets the value of the first element of an array
function setValue(myArray) {
  myArray[0] = "Sid";        // Set the first element of the array
}

// Pass our array to the function
setValue(boys);

// Check the value of our array elements
trace("Boys: " + boys);  // Displays: "Boys: Sid,Graham,Derek"</pre></blockquote>
</div>


<p>Note that while we can overwrite individual elements of the array
from inside a function, assigning a new value to a parameter will
break its association with the original argument. Subsequent changes
to the parameter variable will have no effect on the original
argument. In <a href="ch09_08.htm">Example 9-7</a>, although the
<tt class="literal">boys</tt> array is passed as an argument, the
<tt class="literal">myArray</tt> parameter variable is immediately set to
<tt class="literal">girls</tt>. Subsequent changes to
<tt class="literal">myArray</tt> affect the <tt class="literal">girls</tt> array,
not the <tt class="literal">boys</tt> array.</p>


<a name="ch09-26045" /><div class="example">
<h4 class="objtitle">Example 9-7. Breaking the Association Between an Argument and a Parameter </h4>

<blockquote><pre class="code">// Create two arrays
var boys  = ["Andrew", "Graham",  "Derek"];
var girls = ["Alisa",  "Gillian", "Daniella"];

// <em class="replaceable">setValue( )</em> ignores the passed array and modifies the <em class="replaceable">girls</em> array
function setValue(myArray) {
  myArray = girls;      // Make <em class="replaceable">myArray</em> point to <em class="replaceable">girls</em>, not <em class="replaceable">boys</em>
  myArray[0] = "Mary";  // Changes the first element of <em class="replaceable">girls</em>
}

// Pass the <em class="replaceable">boys</em> array to the <em class="replaceable">setValue( )</em> function
setValue(boys);

trace("Boys: " + boys);   // Displays: "Boys: Andrew,Graham,Derek"
trace("Girls: " + girls); // Displays: "Girls: Mary,Gillian,Daniella"</pre></blockquote>
</div>


<p>More information on primitive and composite data can be <a name="INDEX-1078" /> <a name="INDEX-1079" />found
<a name="INDEX-1080" /> <a name="INDEX-1081" /> <a name="INDEX-1082" />in <a href="ch15_01.htm">Chapter 15, "Advanced Topics"</a>.</p>
</div>


<hr width="684" align="left" />
<div class="navbar"><table width="684" border="0"><tr><td align="left" valign="top" width="228"><a href="ch09_07.htm"><img alt="Previous" border="0" src="../gifs/txtpreva.gif" /></a></td><td align="center" valign="top" width="228"><a href="index.htm"><img alt="Home" border="0" src="../gifs/txthome.gif" /></a></td><td align="right" valign="top" width="228"><a href="ch09_09.htm"><img alt="Next" border="0" src="../gifs/txtnexta.gif" /></a></td></tr><tr><td align="left" valign="top" width="228">9.7. Function Scope</td><td align="center" valign="top" width="228"><a href="index/index.htm"><img alt="Book Index" border="0" src="../gifs/index.gif" /></a></td><td align="right" valign="top" width="228">9.9. Recursive Functions</td></tr></table></div>
<hr width="684" align="left" />

<img alt="Library Navigation Links" border="0" src="../gifs/navbar.gif" usemap="#library-map" />
<p><font size="-1"><a href="copyrght.htm">Copyright &copy; 2002</a> O'Reilly &amp; Associates. All rights reserved.</font></p>

<map name="library-map"><area href="../index.htm" coords="0,1,78,93" shape="rect" /><area href="../wdesign/index.htm" coords="80,2,155,96" shape="rect" /><area href="../xhtml/index.htm" coords="158,0,263,97" shape="rect" /><area href="../audio/index.htm" coords="265,1,335,97" shape="rect" /><area href="../css/index.htm" coords="338,1,434,93" shape="rect" /><area href="index.htm" coords="439,0,540,102" shape="rect" /><area href="../infoarch/index.htm" coords="544,0,685,102" shape="rect" /></map>

</body></html>