<html><head><title>Objects and Classes (ActionScript: The Definitive Guide)</title><link rel="stylesheet" type="text/css" href="../style/style1.css" />

<meta name="DC.Creator" content="Colin Moock" /><meta name="DC.Format" content="text/xml" scheme="MIME" /><meta name="DC.Language" content="en-US" /><meta name="DC.Publisher" content="O'Reilly &amp; Associates, Inc." /><meta name="DC.Source" scheme="ISBN" content="1565928520L" /><meta name="DC.Subject.Keyword" content="stuff" /><meta name="DC.Title" content="ActionScript: The Definitive Guide" /><meta name="DC.Type" content="Text.Monograph" />

</head><body bgcolor="#ffffff">

<img alt="Book Home" border="0" src="gifs/smbanner.gif" usemap="#banner-map" /><map name="banner-map"><area shape="rect" coords="1,-2,616,66" href="index.htm" alt="ActionScript: The Definitive Guide" /><area shape="rect" coords="629,-11,726,25" href="jobjects/fsearch.htm" alt="Search this book" /></map>

<div class="navbar"><table width="684" border="0"><tr><td align="left" valign="top" width="228"><a href="ch11_12.htm"><img alt="Previous" border="0" src="../gifs/txtpreva.gif" /></a></td><td align="center" valign="top" width="228"><a href="index.htm">ActionScript: The Definitive Guide</a></td><td align="right" valign="top" width="228"><a href="ch12_02.htm"><img alt="Next" border="0" src="../gifs/txtnexta.gif" /></a></td></tr></table></div>
<hr width="684" align="left" />



<h1 class="chapter">Chapter 12. Objects and Classes</h1>
<div class="htmltoc"><h4 class="tochead">Contents:</h4><p>
<a href="ch12_01.htm">The Anatomy of an Object</a><br />
<a href="ch12_02.htm">Instantiating Objects</a><br />
<a href="ch12_03.htm">Object Properties</a><br />
<a href="ch12_04.htm">Methods</a><br />
<a href="ch12_05.htm">Classes and Object-Oriented Programming</a><br />
<a href="ch12_06.htm">Built-in ActionScript Classes and Objects </a><br />
<a href="ch12_07.htm">Onward!</a><br /></p></div>


<p>This <a name="INDEX-1455" />chapter
<a name="INDEX-1456" />covers <a name="INDEX-1457" />so-called <em class="emphasis">object-oriented
programming (OOP)</em>, which is new territory for many
readers. We'll cover some of the terminology and show some
applied examples to make it all concrete. You may have heard that OOP
is some big mystery or that it's difficult to understand. Quite
the contrary, the concepts are highly intuitive and the OOP process
much easier than you may have been led to believe. At its heart, OOP
simply means that you treat portions of your program as
self-contained objects. This is easy to grasp once you realize that
everything you deal with in the real world is a self-contained
object. Your dog, your parents, your car, and your computer are all
self-contained objects meaning that they do some things independently
and do other things at your request even if you don't know the
inner details of how they work.</p>


<p>You don't have to be a biologist to get your dog to fetch a
stick; you don't need to be a mechanical engineer to drive your
car; you don't need to be a psychoanalyst to interact with your
parents; and rumors to the contrary, you don't need to be a
computer scientist to check your email. All you need to know is the
commands an object is willing to obey (which are called
<em class="emphasis">methods</em><a name="INDEX-1458" />)
and the results those commands produce. For example, if you press the
gas pedal of your car, you can expect it to accelerate. If you tell
your dog to sit, you can expect him to sit. Armed with this
commonsense context of what an object is in the real world,
let's see how to relate these concepts to ActionScript.</p>


<p>The classic example of a programming
<em class="filename">object</em><a name="INDEX-1459" /> is a bouncing ball. Like a real
ball, a ball object can have <em class="filename">properties</em> that
represent its attributes, such as its radius, color, mass, position,
and bounciness (elasticity). To represent our bouncing ball in a
program, we'll create a <tt class="literal">ball</tt> object with a
<tt class="literal">radius</tt> property and so forth. The properties of an
object represent its state at any given time, but some of its
properties change over time. For example, to make our ball move, we
need to simulate Newton's laws of motion. That is, we need to
describe in computer terms how a ball moves over time. In the
simplest case, recalling that speed multiplied by time equals
distance, we can determine a ball's horizontal position in the
future using this pseudoequation:</p>


<blockquote><pre class="code">ball.xPosition += ball.xVelocity * (elapsedTime)</pre></blockquote>


<p>This equation starts with the ball's current position and adds
the distance it has traveled (based on its velocity and the elapsed
time) to come up with the new position. An object's
<em class="emphasis">behaviors</em><a name="INDEX-1460" /> are simply the rules that govern it, like
our equation for calculating the position of the ball over time. We
generally wrap these behaviors in so-called <em class="emphasis">methods,
</em>which are simply <em class="emphasis">the functions that implement an
object's behaviors</em>. For example, we might create a
<em class="filename">move( )</em> method that uses the preceding equation.</p>


<p>Therefore, methods can be thought of as the commands that an object
obeys. Of course, an object can have multiple methods. Let's
say we want to make our ball bounce. We can create a
<em class="filename">bounce( )</em> method that reverses the ball's
direction and reduces its speed (our ball isn't perfectly
elastic). The <em class="filename">bounce( )</em> method might implement
this equation:</p>


<blockquote><pre class="code">ball.xVelocity =  -(ball.xVelocity) * 0.95   // Ball is 95% elastic</pre></blockquote>


<p>Before getting into the esoterica of how to create objects, add
properties, and implement methods, let's formalize some of our
definitions. An
<em class="emphasis">object</em><a name="INDEX-1461" />
is technically a data structure that groups together related
<em class="emphasis">properties</em> and <em class="emphasis">methods</em>
(functions). An object typically
<em class="emphasis">encapsulates</em><a name="INDEX-1462" /> its behaviors, meaning that the
internal details of how it performs its functions are not necessarily
visible outside the object. Instead, a program can interact with an
object via its so-called
<em class="emphasis">interfaces</em><a name="INDEX-1463" />
(i.e., methods that are publicly accessible outside the object). The
rest of the program typically doesn't have to worry about how
an object does what it does; instead, the program merely provides
<em class="emphasis">inputs</em> to the object and checks the
<em class="emphasis">outputs</em> (results) when applicable. You'll
also hear talk of
<em class="filename">classes</em><a name="INDEX-1464" />
and
<em class="filename">instances</em><a name="INDEX-1465" />
<a name="INDEX-1466" />. A <em class="emphasis">class</em> is simply
a generic object category, and an <em class="emphasis">instance</em> is
simply a specific case (i.e., a copy) of the object. For example,
your particular pet dog is an instance of the generic
<em class="filename">Dog</em> class. All dogs in the
<em class="filename">Dog</em> class bark and have four legs, but your
specific dog has its own particular values for the height, weight,
and color properties used to describe dogs.</p>


<p>Object-oriented programming (OOP) is merely the name given to
programs that make use of objects. Objects and OOP are so intrinsic
to ActionScript that we've already used them, perhaps without
your realizing it. A movie clip is a familiar object in Flash, and
like all objects it is implemented as a collection of properties and
methods. When we determine the height of a movie clip using
<tt class="literal">someClip._height</tt>, we're accessing that clip
object's <tt class="literal">_height</tt> property. And when we tell
a movie clip to play using <tt class="literal">someClip.play( )</tt>,
we're invoking that clip object's <em class="filename">play(
)</em> method.</p>





<a name="ch12-3-fm2xml" /><blockquote><h4>TIP</h4>
<p>Typically, all instances of an object class share the same methods
and property names; it is the property <em class="emphasis">values</em> of
each instance that distinguish it from other instances of the same
class.</p>

</blockquote>

<p>Whether we create objects ourselves or use those built into
ActionScript, OOP keeps the components of a program cleanly separated
from one another (<em class="emphasis">encapsulated </em>) and allows them
to interoperate without knowing the details of other objects. This
allows an object to change its internal functionality without
adversely affecting other portions of the program that rely on the
object, so long as the object's methods (i.e., its interfaces
to the outside world) don't change. Returning to our
<tt class="literal">ball</tt> object, for example, we don't care if
the laws of physics change the behavior of our ball's motion.
We just call the ball's <em class="filename">move( )</em> method and
let the object itself worry about the details.</p>


<p>Another nice feature of OOP is that we can treat
<em class="emphasis">different</em> objects that have
<em class="emphasis">different</em> behaviors in a uniform manner as long
as they implement methods of the same name. For example, suppose we
have a <tt class="literal">circle</tt> object and a
<tt class="literal">square</tt> object. As long as both objects implement
an <em class="filename">area( )</em> method that returns the shape's
area, we can call their <em class="filename">area( )</em> methods without
worrying about how each object calculates its own area.</p>


<p>In this chapter, we'll learn how to make a basic object, and
we'll learn how to define a category of objects (i.e., a
class). Once we're comfortable with the basics, we'll see
how to share common characteristics between classes and objects
(i.e., create a family tree) using <em class="filename">inheritance</em>.
For example, we might implement a <em class="emphasis">Horse</em> class
that along with our <em class="emphasis">Dog</em> class are descendants of
the <em class="emphasis">Mammal</em> class. The
<em class="emphasis">Mammal</em> class could implement methods and
properties common to all mammals, such as the fact that they have
hair, give milk, and are warm-blooded. Finally, we'll learn how
OOP is used to control the Flash environment through
ActionScript's built-in objects and classes.</p>


<p>I hope that this introduction has shed some light on objects and OOP.
Let's dive in to the <a name="INDEX-1467" />specifics.</p>


<div class="sect1"><a name="ch12-4-fm2xml" />
<h2 class="sect1">12.1. The Anatomy of an Object</h2>


<p>Like an <a name="INDEX-1468" />array,
<a name="INDEX-1469" />
<a name="INDEX-1470" />an individual object is a container of
containers. An array holds multiple data values in individual
<em class="emphasis">elements </em>; an object, analogously, holds
multiple data values in individual <em class="emphasis">properties</em>.
The properties of an object, however, are <em class="emphasis">named</em>,
not numbered. An array stores a group of elements in a numbered list,
but an object stores properties according to unique identifiers that
are not arranged in any specific order. To access an array element,
we need to know its numeric position, but to access an object
property, we need to know its name (i.e.,
<em class="emphasis">identifier</em>).</p>


<p><a href="ch12_01.htm">Figure 12-1</a> depicts the <a name="INDEX-1471" />properties of a sample object called
<tt class="literal">ball</tt>. The <tt class="literal">ball</tt> object contains
two properties: <tt class="literal">radius</tt> and
<tt class="literal">color</tt>. The values of those properties are 50 and
0xFF0000 (the hex value of red). The properties are named with unique
identifiers, much like variables. Even though each property has its
own name, all are contained by the single encompassing object,
<tt class="literal">ball</tt>.</p>


<a name="ch12-15129" /><div class="figure"><img alt="Figure 12-1" src="figs/act.1201.gif" /></div><h4 class="objtitle">Figure 12-1. A sample object structure</h4>

<p>Obviously an object typically defines properties that are
meaningfully related. More specifically, the properties of an object
should be chosen in such a way that they would help distinguish one
instance of the object from another. Movie clip objects, for example,
have properties specific to movie clips, such as their number of
frames ( <tt class="literal"> _totalframes</tt>) and position (
<tt class="literal">_x</tt> and <tt class="literal">_ y</tt>).</p>


<p>Because object properties are named, not numbered, objects do not
have any of the element-management tools of arrays (<em class="filename">shift(
)</em>, <em class="filename">unshift( )</em>, <em class="filename">push(
)</em>, <em class="filename">splice( )</em>, etc.). Object
properties are traditionally set via methods of the object to
preserve the encapsulated nature of an object. That is, in strict
OOP, an object should set its own properties. If an outside entity
wants to set an object's property, it should be done by calling
an appropriate method of the object. For example, a purist would
frown on setting the <tt class="literal">length</tt> property of an array
directly. That purist would argue that it is best to let the
<em class="filename">Array</em> object set the <tt class="literal">length</tt>
property itself, and that code outside of the object should do so
only indirectly, by calling one of the <em class="filename">Array</em>
object's methods. In that case, the maintainer of the
<em class="emphasis">Array</em> class could change the name of the
<tt class="literal">length</tt> property to <tt class="literal">len</tt> without
adversely affecting other users.</p>
</div>






























































<hr width="684" align="left" />
<div class="navbar"><table width="684" border="0"><tr><td align="left" valign="top" width="228"><a href="ch11_12.htm"><img alt="Previous" border="0" src="../gifs/txtpreva.gif" /></a></td><td align="center" valign="top" width="228"><a href="index.htm"><img alt="Home" border="0" src="../gifs/txthome.gif" /></a></td><td align="right" valign="top" width="228"><a href="ch12_02.htm"><img alt="Next" border="0" src="../gifs/txtnexta.gif" /></a></td></tr><tr><td align="left" valign="top" width="228">11.12. Onward!</td><td align="center" valign="top" width="228"><a href="index/index.htm"><img alt="Book Index" border="0" src="../gifs/index.gif" /></a></td><td align="right" valign="top" width="228">12.2. Instantiating Objects</td></tr></table></div>
<hr width="684" align="left" />

<img alt="Library Navigation Links" border="0" src="../gifs/navbar.gif" usemap="#library-map" />
<p><font size="-1"><a href="copyrght.htm">Copyright &copy; 2002</a> O'Reilly &amp; Associates. All rights reserved.</font></p>

<map name="library-map"><area href="../index.htm" coords="0,1,78,93" shape="rect" /><area href="../wdesign/index.htm" coords="80,2,155,96" shape="rect" /><area href="../xhtml/index.htm" coords="158,0,263,97" shape="rect" /><area href="../audio/index.htm" coords="265,1,335,97" shape="rect" /><area href="../css/index.htm" coords="338,1,434,93" shape="rect" /><area href="index.htm" coords="439,0,540,102" shape="rect" /><area href="../infoarch/index.htm" coords="544,0,685,102" shape="rect" /></map>

</body></html>
