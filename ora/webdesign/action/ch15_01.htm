<html><head><title>Advanced Topics (ActionScript: The Definitive Guide)</title><link rel="stylesheet" type="text/css" href="../style/style1.css" />

<meta name="DC.Creator" content="Colin Moock" /><meta name="DC.Format" content="text/xml" scheme="MIME" /><meta name="DC.Language" content="en-US" /><meta name="DC.Publisher" content="O'Reilly &amp; Associates, Inc." /><meta name="DC.Source" scheme="ISBN" content="1565928520L" /><meta name="DC.Subject.Keyword" content="stuff" /><meta name="DC.Title" content="ActionScript: The Definitive Guide" /><meta name="DC.Type" content="Text.Monograph" />

</head><body bgcolor="#ffffff">

<img alt="Book Home" border="0" src="gifs/smbanner.gif" usemap="#banner-map" /><map name="banner-map"><area shape="rect" coords="1,-2,616,66" href="index.htm" alt="ActionScript: The Definitive Guide" /><area shape="rect" coords="629,-11,726,25" href="jobjects/fsearch.htm" alt="Search this book" /></map>

<div class="navbar"><table width="684" border="0"><tr><td align="left" valign="top" width="228"><a href="ch14_07.htm"><img alt="Previous" border="0" src="../gifs/txtpreva.gif" /></a></td><td align="center" valign="top" width="228"><a href="index.htm">ActionScript: The Definitive Guide</a></td><td align="right" valign="top" width="228"><a href="ch15_02.htm"><img alt="Next" border="0" src="../gifs/txtnexta.gif" /></a></td></tr></table></div>
<hr width="684" align="left" />



<h1 class="chapter">Chapter 15. Advanced Topics</h1>
<div class="htmltoc"><h4 class="tochead">Contents:</h4><p>
<a href="ch15_01.htm">Copying, Comparing, and Passing Data</a><br />
<a href="ch15_02.htm">Bitwise Programming</a><br />
<a href="ch15_03.htm">Advanced Function Scope Issues</a><br />
<a href="ch15_04.htm">The movieclip Datatype</a><br />
<a href="ch15_05.htm">Onward!</a><br /></p></div>


<p>This chapter collects a variety of advanced ActionScript programming
techniques and issues.</p>


<div class="sect1"><a name="ch15-65476" />
<h2 class="sect1">15.1. Copying, Comparing, and Passing Data</h2>


<p>There <a name="INDEX-1968" /> <a name="INDEX-1969" />are three fundamental ways to
manipulate data. We may <em class="emphasis">copy</em> it (e.g., assign
the value of variable <tt class="literal">x</tt> to variable
<tt class="literal">y</tt>), we may <em class="emphasis">compare</em> it (e.g.,
check whether <tt class="literal">x</tt> equals <tt class="literal">y</tt>), and
we may <em class="emphasis">pass</em> it (e.g., supply a variable to a
function as an argument). Primitive data values are copied, compared,
and passed quite differently than composite data. When primitive data
is copied to a variable, that variable gets its own unique<em class="emphasis">
</em>and<em class="emphasis"> </em>private<em class="emphasis"> </em>copy
of the data, stored separately in memory. The following lines of code
would, hence, cause the string "Dave" to be stored twice
in memory, once in the memory space reserved for
<tt class="literal">name1</tt> and again in the space reserved for
<tt class="literal">name2</tt>:</p>


<blockquote><pre class="code">name1 = "Dave";
name2 = name1;</pre></blockquote>


<p>We say that primitive data is copied <em class="emphasis">by value</em>
because the data's literal value is stored in the memory space
allotted to the variable. In contrast, when composite data is copied
to a variable, only a <em class="emphasis">reference</em> to the data (and
not the actual data) is stored in the variable's memory slot.
That reference tells the interpreter where the actual data is kept
(i.e., its address in memory). When a variable that contains
composite data is copied to another variable, it is the
<em class="emphasis">reference</em> (often called a
<em class="emphasis">pointer</em>) and not the data itself that is copied.
Composite data is, hence, said to be copied <em class="emphasis">by
reference</em>.</p>


<p>This makes good design sense because it would be grossly inefficient
to duplicate large arrays and other composite datatypes. But it has
important consequences for our code. When multiple variables are
assigned the same piece of composite data as their value, each
variable does <em class="emphasis">not</em> store a unique copy of the
data (as it would if the data were primitive). Rather, only one copy
of the data exists and all the variables point to it. If the value of
the data changes, <em class="emphasis">all</em> the variables are updated.</p>


<p>Let's see how this affects a practical application. When two
variables refer to the same primitive data, each variable gets its
own copy of the data. Here we assign the value 12 to the variable
<tt class="literal">x</tt>:</p>


<blockquote><pre class="code">var x = 12;</pre></blockquote>


<p>Now let's assign the value of <tt class="literal">x</tt> to a new
variable, <tt class="literal">y</tt>:</p>


<blockquote><pre class="code">var y = x;</pre></blockquote>


<p>As you can guess, <tt class="literal">y</tt> is now equal to 12. But
<tt class="literal">y</tt> has its own copy of the value 12, distinct from
the copy in <tt class="literal">x</tt>. If we change the value of
<tt class="literal">x</tt>, the value of <tt class="literal">y</tt> is
unaffected:</p>


<blockquote><pre class="code">x = 15;
trace(x); // Displays 15 in the Output window
trace(y); // Displays 12 in the Output window</pre></blockquote>


<p>The value of <tt class="literal">y</tt> did not change when
<tt class="literal">x</tt> changed because when we assigned
<tt class="literal">x</tt> to <tt class="literal">y</tt>, <tt class="literal">y</tt>
received its own copy of the number 12 (i.e., the
<em class="emphasis">primitive</em> data contained by
<tt class="literal">x</tt>).</p>


<p>Now let's try the same thing with
<em class="emphasis">composite</em> data. We'll create a new array
with three elements and then assign that array to the variable
<tt class="literal">x</tt>:</p>


<blockquote><pre class="code">var x = ["first element", 234, 18.5];</pre></blockquote>


<p>Now, just as we did before, we'll assign the value of
<tt class="literal">x</tt> to <tt class="literal">y</tt>:</p>


<blockquote><pre class="code">var y = x;</pre></blockquote>


<p>The value of <tt class="literal">y</tt> is now the same as the value of
<tt class="literal">x</tt>. But what is the value of <tt class="literal">x</tt> ?
Remember that because <tt class="literal">x</tt> refers to an array, which
is a composite datum, the value of <tt class="literal">x</tt> is not
literally the array <tt class="literal">["first element",</tt>
<tt class="literal">234,</tt> <tt class="literal">18.5]</tt> but merely a
reference to that datum. Hence, when we assign <tt class="literal">x</tt>
to <tt class="literal">y</tt>, what's copied to <tt class="literal">y</tt>
is not the array itself, but the reference contained in
<tt class="literal">x</tt> that points to the array. So both
<tt class="literal">x</tt> <em class="emphasis">and</em> <tt class="literal">y</tt>
point to the same array, stored somewhere in memory.</p>


<p>If we change the array through the variable <tt class="literal">x</tt>,
like this:</p>


<blockquote><pre class="code">x[0] = "1st element";</pre></blockquote>


<p>the change is also reflected in <tt class="literal">y  </tt>:</p>


<blockquote><pre class="code">trace(y[0]);  // Displays: "1st element"</pre></blockquote>


<p>Similarly, if we modify the array through <tt class="literal">y</tt>, the
change can be seen via <tt class="literal">x</tt> :</p>


<blockquote><pre class="code">y[1] = "second element";
trace (x[1]);  // Displays: "second element"</pre></blockquote>


<p>To break the association, use the <em class="filename">slice( )</em>
function to create an entirely new array:</p>


<blockquote><pre class="code">var x = ["first element", 234, 18.5];
// Copy each element of <em class="replaceable">x</em> to a new array stored in <em class="replaceable">y</em>
var y = x.slice(0);
y[0] = "hi there";

trace(x[0]);  // Displays: "first element" (not "hi there")
trace(y[0]);  // Displays: "hi there" (not "first element")</pre></blockquote>


<p>Let's <a name="INDEX-1970" />extend our example to see how primitive
and composite data values are <em class="emphasis">compared</em>. Here we
assign <tt class="literal">x</tt> and <tt class="literal">y</tt> an identical
primitive value, then we compare the two variables:</p>


<blockquote><pre class="code">x = 10;
y = 10;
trace(x == y);  // Displays: true</pre></blockquote>


<p>Because <tt class="literal">x</tt> and <tt class="literal">y</tt> contain
primitive data, they are compared by value. In a value-based
comparison, data is compared literally. The number 10 in
<tt class="literal">x</tt> is considered equal to the number 10 in
<tt class="literal">y</tt> because the numbers are made up of the same
bytes.</p>


<p>Now, let's assign <tt class="literal">x</tt> and <tt class="literal">y</tt>
identical versions of the same composite data and compare the two
variables again:</p>


<blockquote><pre class="code">x = [10, "hi", 5];
y = [10, "hi", 5];
trace(x == y);  // Displays: false</pre></blockquote>


<p>This time, <tt class="literal">x</tt> and <tt class="literal">y</tt> contain
composite data, so they are compared by reference. The arrays we
assigned to <tt class="literal">x</tt> and <tt class="literal">y</tt> have the
same byte values, but the variables <tt class="literal">x</tt> and
<tt class="literal">y</tt> are not equal because they do not store a
reference to the same composite datum. However, watch what happens
when we copy the reference in <tt class="literal">x</tt> to
<tt class="literal">y</tt>:</p>


<blockquote><pre class="code">x = y;
trace(x == y);  // Displays: true</pre></blockquote>


<p>Now that the references are the same, the values are considered
equal. Thus, the result of the comparison depends on the references
in the variables, not the actual byte values of the arrays.</p>


<p>Primitive <a name="INDEX-1971" />and composite data are also
treated differently when passed to functions, as discussed under
<a href="ch09_08.htm">Section 9.8.3, "Primitive Versus Composite Parameter Values"</a> in <a href="ch09_01.htm">Chapter 9, "Functions"</a>.
Most notably, when a primitive variable is passed as an argument to a
function, any changes to the datum within the function are not
reflected in the original variable. However, when passing a composite
variable, changes within the function <em class="emphasis">do</em> affect
the original variable. That is, if you pass an integer variable
<tt class="literal">x</tt> to a function, changes to it within the function
don't affect its original value. But if you pass an array
<tt class="literal">y</tt> to a function, any changes to that array within
the function <em class="emphasis">will</em> alter the original value of
<tt class="literal">y</tt> outside the function (because changes to the
array affect the data to which <tt class="literal">y</tt> <a name="INDEX-1972" /> <a name="INDEX-1973" />points).</p>
</div>










































<hr width="684" align="left" />
<div class="navbar"><table width="684" border="0"><tr><td align="left" valign="top" width="228"><a href="ch14_07.htm"><img alt="Previous" border="0" src="../gifs/txtpreva.gif" /></a></td><td align="center" valign="top" width="228"><a href="index.htm"><img alt="Home" border="0" src="../gifs/txthome.gif" /></a></td><td align="right" valign="top" width="228"><a href="ch15_02.htm"><img alt="Next" border="0" src="../gifs/txtnexta.gif" /></a></td></tr><tr><td align="left" valign="top" width="228">14.7. Onward!</td><td align="center" valign="top" width="228"><a href="index/index.htm"><img alt="Book Index" border="0" src="../gifs/index.gif" /></a></td><td align="right" valign="top" width="228">15.2. Bitwise Programming</td></tr></table></div>
<hr width="684" align="left" />

<img alt="Library Navigation Links" border="0" src="../gifs/navbar.gif" usemap="#library-map" />
<p><font size="-1"><a href="copyrght.htm">Copyright &copy; 2002</a> O'Reilly &amp; Associates. All rights reserved.</font></p>

<map name="library-map"><area href="../index.htm" coords="0,1,78,93" shape="rect" /><area href="../wdesign/index.htm" coords="80,2,155,96" shape="rect" /><area href="../xhtml/index.htm" coords="158,0,263,97" shape="rect" /><area href="../audio/index.htm" coords="265,1,335,97" shape="rect" /><area href="../css/index.htm" coords="338,1,434,93" shape="rect" /><area href="index.htm" coords="439,0,540,102" shape="rect" /><area href="../infoarch/index.htm" coords="544,0,685,102" shape="rect" /></map>

</body></html>