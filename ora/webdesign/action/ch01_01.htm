<html><head><title>A Gentle Introduction for Non-Programmers (ActionScript: The Definitive Guide)</title><link rel="stylesheet" type="text/css" href="../style/style1.css" />

<meta name="DC.Creator" content="Colin Moock" /><meta name="DC.Format" content="text/xml" scheme="MIME" /><meta name="DC.Language" content="en-US" /><meta name="DC.Publisher" content="O'Reilly &amp; Associates, Inc." /><meta name="DC.Source" scheme="ISBN" content="1565928520L" /><meta name="DC.Subject.Keyword" content="stuff" /><meta name="DC.Title" content="ActionScript: The Definitive Guide" /><meta name="DC.Type" content="Text.Monograph" />

</head><body bgcolor="#ffffff">

<img alt="Book Home" border="0" src="gifs/smbanner.gif" usemap="#banner-map" /><map name="banner-map"><area shape="rect" coords="1,-2,616,66" href="index.htm" alt="ActionScript: The Definitive Guide" /><area shape="rect" coords="629,-11,726,25" href="jobjects/fsearch.htm" alt="Search this book" /></map>

<div class="navbar"><table width="684" border="0"><tr><td align="left" valign="top" width="228"><a href="part1.htm"><img alt="Previous" border="0" src="../gifs/txtpreva.gif" /></a></td><td align="center" valign="top" width="228"><a href="index.htm">ActionScript: The Definitive Guide</a></td><td align="right" valign="top" width="228"><a href="ch01_02.htm"><img alt="Next" border="0" src="../gifs/txtnexta.gif" /></a></td></tr></table></div>
<hr width="684" align="left" />



<h1 class="chapter">Chapter 1. A Gentle Introduction for Non-Programmers</h1>
<div class="htmltoc"><h4 class="tochead">Contents:</h4><p>
<a href="ch01_01.htm">Some Basic Phrases</a><br />
<a href="ch01_02.htm">Further ActionScript Concepts</a><br />
<a href="ch01_03.htm">Building a Multiple-Choice Quiz</a><br />
<a href="ch01_04.htm">Onward!</a><br /></p></div>


<p>I'm going to teach you to talk to Flash.</p>


<p>Not just to <a name="INDEX-17" /> <a name="INDEX-18" /> <a name="INDEX-19" />program in Flash but to say
things to it and to listen to what it has to say in return. This is
not a metaphor or simply a rhetorical device. It's a
philosophical approach to programming.</p>


<p>Programming languages are used to send information to and receive
information from computers. They are collections of vocabulary and
grammar used to communicate, just like human languages. Using a
programming language, we tell a computer what to do or ask it for
information. It listens, tries to perform the requested actions, and
gives responses. So while you may think you are reading this book in
order to "learn to program," you are actually learning to
communicate with Flash. But, of course, Flash doesn't speak
English, French, German, or Cantonese. Flash's native language
is ActionScript, and you're going to learn to speak it.</p>


<p>Learning to speak a computer language is sometimes considered
synonymous with learning to program. But there is more to programming
than learning a language's syntax. What would it be like if
Flash could speak English -- if we didn't need to learn
ActionScript in order to communicate with it?</p>


<p>What would happen if we were to say, "Flash, make a ball bounce
around the screen?"</p>


<p>Flash couldn't fulfill our request because it doesn't
understand the word "ball." Okay, okay, that's just
a matter of semantics. What Flash expects us to describe is the
objects in the world it knows: movie clips, buttons, frames, and so
on. So, let's rephrase our request in terms that Flash
recognizes and see what happens: "Flash, make the movie clip
named <tt class="literal">ball_one</tt> bounce around the screen."</p>


<p>Flash still can't fulfill our request without more information.
How big should the ball be? Where should it be placed? In which
direction should it begin traveling? How fast should it go? Around
which part of the screen should it bounce? For how long? In two
dimensions or three? Hmm . . . we weren't expecting all these
questions. In reality, Flash doesn't ask us these questions.
Instead, when Flash can't understand us, it just doesn't
do what we want it to, or it yields an error message. For now,
we'll pretend Flash asked us for more explicit instructions,
and reformulate our request as a series of steps:</p>


<ol><li><p>A ball is a circular movie clip symbol named <tt class="literal">ball</tt>.</p></li><li><p>A square is a four-sided movie clip symbol named
<tt class="literal">square</tt>.</p></li><li><p>Make a new green ball 50 pixels in diameter.</p></li><li><p>Call the new ball <tt class="literal">ball_one</tt>.</p></li><li><p>Make a new black square 300 pixels wide and place it in the middle of
the Stage.</p></li><li><p>Place <tt class="literal">ball_one</tt> somewhere on top of the square.</p></li><li><p>Move <tt class="literal">ball_one</tt> in a random direction at 75 pixels
per second.</p></li><li><p>If <tt class="literal">ball_one</tt> hits one of the sides of the square,
make it bounce (reverse course).</p></li><li><p>Continue until I tell you to stop.</p></li></ol>
<p>Even though we gave our instructions in English, we still had to work
through all the logic that governs our bouncing ball in order for
Flash to understand us. Obviously, there's more to programming
than merely the syntax of programming languages. Just as in English,
knowing lots of words doesn't necessarily mean you're a
great communicator.</p>


<p>Our hypothetical English-speaking-Flash example exposes four
important aspects of programming:</p>


<ul><li><p>No matter what the language, the art of programming lies in the
formulation of logical steps.</p></li><li><p>Before you try to say something in a computer language, it usually
helps to say it in English.</p></li><li><p>A conversation in one language translated into a different language
is still made up of the same basic statements.</p></li><li><p>Computers aren't very good at making assumptions. They also
have a very limited vocabulary.</p></li></ul>
<p>Most programming has nothing to do with writing code. Before you
write even a single line of ActionScript, think through exactly what
you want to do and write out your system's functionality as a
flowchart or a blueprint. Once your program has been described
sufficiently at the conceptual level, you can translate it into
ActionScript.</p>


<p>In programming -- as in love, politics, and
business -- effective communication is the key to success. For
Flash to understand your ActionScript, you have to get your syntax
absolutely correct down to the last quote, equal sign, and semicolon.
And to assure that Flash knows what you're talking about, you
must refer only to the world it knows using terms it recognizes. What
may be obvious to you is not obvious to a computer. Think of
programming a computer like talking to a child: take nothing for
granted, be explicit in every detail, and list every step
that's necessary to complete a task. But remember that, unlike
children, Flash will do precisely what you tell it to do and nothing
that you don't tell it to <a name="INDEX-20" /> <a name="INDEX-21" /> <a name="INDEX-22" />do.</p>


<div class="sect1"><a name="ch01-2-fm2xml" />
<h2 class="sect1">1.1. Some Basic Phrases</h2>


<p>On the first day of any language school you'd expect to learn a
few basic phrases ("Good day," "How are you,"
etc.). Even if you're just memorizing a phrase and don't
know what each word means, you can learn the effect of the phrase and
can repeat it to produce that effect. Once you've learned the
rules of grammar, expanded your vocabulary, and used the words from
your memorized phrases in multiple contexts, you can understand your
early phrases in a richer way. The rest of this chapter will be much
like that first day of language school -- you'll see bits
and pieces of code, and you'll be introduced to some
fundamental programming grammar. The rest of the book will build on
that foundation. You may want to come back to this chapter when
you've finished the book to see just how far you've
traveled.</p>


<a name="ch01-3-fm2xml" /><div class="sect2">
<h3 class="sect2">1.1.1. Creating Code</h3>


<p>For our first exercise, we'll learn how to add four simple
lines of code to a Flash <a name="INDEX-23" />movie. Nearly all ActionScript programming
takes place in the Actions panel. Any instructions we add to the
Actions panel are carried out by Flash when our movie plays.
<a name="INDEX-24" />Open the
Actions panel now by following these steps:</p>


<ol><li><p>Launch Flash with a new blank document.</p></li><li><p>On the main timeline, select frame 1 of layer 1.</p></li><li><p>Select Window <img align="absmiddle" src="figs/U2192.gif" /> Actions.</p></li></ol>
<p>The Actions panel is divided into two sections: the
<a name="INDEX-25" />
<a name="INDEX-26" />Script pane (on the right) and the
Toolbox pane (on the left). The Script pane houses all our code. The
Toolbox pane provides us with quick access to the Actions, Operators,
Functions, Properties, and Objects of ActionScript. You'll
likely recognize the Basic Actions, shown in <a href="ch01_01.htm">Figure 1-1</a>, from prior Flash versions.</p>


<a name="ch01-91095" /><div class="figure"><img alt="Figure 1-1" src="figs/act.0101.gif" /></div><h4 class="objtitle">Figure 1-1. Flash 5 Basic Actions</h4>

<p>But there's lots more to discover in the Toolbox pane: <a href="ch01_01.htm">Figure 1-2</a> shows all available Actions, including some
old friends from Flash 2, 3, and 4. If you continue exploring the
Toolbox pane, you'll even find things like Sound, Array, and
XML. By the end of this book, we'll have covered them all.</p>


<a name="ch01-26258" /><div class="figure"><img alt="Figure 1-2" src="figs/act.0102.gif" /></div><h4 class="objtitle">Figure 1-2. Expanded Actions</h4>

<p>The Toolbox pane's menus may be used to create ActionScript
code. However, in order to learn the syntax, principles, and
structural makeup of ActionScript, we'll be typing all our
code.</p>



<a name="ch01-5-fm2xml" /><blockquote><h4>TIP</h4>
<p>So-called <em class="emphasis">Actions</em> are more than just
Actions -- they include various fundamental programming-language
tools: variables, conditionals, loops, comments, function calls, and
so forth. Although these are lumped together in one menu, the generic
name <em class="emphasis">Action</em> obscures the programming
structures' significance.</p>

</blockquote>

<p>We'll be breaking Actions down to give you a programmer's
perspective on those structures. Throughout the book, I use the
appropriate programming term to describe the Action at hand. For
example, instead of writing, "Add a <em class="filename">while</em>
Action," I'll write, "Create a
<em class="filename">while</em> loop." Instead of writing,
"Add an <em class="filename">if</em> Action," I'll
write, "Make a new conditional." Instead of writing,
"Add a <em class="filename">play</em> Action," I'll
write, "Invoke the <em class="filename">play( )</em> function (or
method)." These distinctions are an important part of learning
to speak ActionScript.</p>


<p>Ready to get your hands dirty? Let's say hello to Flash.</p>
</div>




<a name="ch01-6-fm2xml" /><div class="sect2">
<h3 class="sect2">1.1.2. Say Hi to Flash</h3>


<p>Before you can type code into the Actions panel, you must disengage
the <a name="INDEX-27" /> <a name="INDEX-28" />ActionScript autopilot
as follows:</p>


<ol><li><p>Select Edit <img align="absmiddle" src="figs/U2192.gif" /> Preferences.</p></li><li><p>On the General tab, select Actions Panel <img align="absmiddle" src="figs/U2192.gif" /> Mode <img align="absmiddle" src="figs/U2192.gif" /> Expert
Mode.</p></li><li><p><a name="INDEX-29" />Expert Mode is also selectable from the
pop-up menu accessible via the arrow at the far right of the Actions
panel, though this only sets the current frame's mode. See
<a href="ch16_01.htm">Chapter 16, "ActionScript Authoring Environment"</a>.</p></li></ol>
<p>Howdya like that? You're already an expert. When you enter
Expert Mode, the Parameters<em class="emphasis"> </em>pane at the bottom
of the Actions Panel disappears. Don't worry -- we're
not programming with menus so we won't be needing it.</p>


<p>Next, select frame 1 of layer 1. Your ActionScript (a.k.a.,
<em class="emphasis">code</em>) must always be attached to a
<a name="INDEX-30" />
<a name="INDEX-31" />frame, <a name="INDEX-32" />movie clip, or button; selecting frame 1
causes subsequently created code to be attached to that frame. In
Expert Mode, you can type directly into the Script pane on the right
side of the Actions panel, which is where we'll be doing all
our programming.</p>


<p>And now, the exciting moment -- your first line of code.
It's time to introduce yourself to Flash! Type the following
into the Script pane:</p>


<blockquote><pre class="code">var message = "Hi there, Flash!";</pre></blockquote>


<p>That line of code constitutes a complete instruction, known as a
<em class="emphasis">statement</em><a name="INDEX-33" />
<a name="INDEX-34" />.
On the line below it, type your second and third lines of code, shown
following this paragraph. Replace <em class="replaceable">your</em>
<em class="replaceable">name</em> <em class="replaceable">here</em> with
your first name (whenever you see <em class="replaceable">italicized
code</em> in this book it means you have to replace that
portion of the code with your own content):</p>


<blockquote><pre class="code">var firstName = "<em class="replaceable">your name here</em>";
trace (message);</pre></blockquote>


<p>Hmmm. Nothing has happened yet. That's because our code
doesn't do anything until we export a <em class="filename">.swf</em>
file and play our movie. Before we do that, let's ask Flash to
say hi back to us. Type your fourth line of code under the lines
you've already typed (man, we're really on a roll now . .
. ):</p>


<blockquote><pre class="code">trace ("Hi there, " + firstName + ", nice to meet you.");</pre></blockquote>


<p>Okay, Flash is ready to meet you. Select Control <img align="absmiddle" src="figs/U2192.gif" /> Test Movie
and see what happens. Some text should appear in the
<a name="INDEX-35" />Output window
as shown in <a href="ch01_01.htm">Figure 1-3</a>.</p>


<a name="ch01-84947" /><div class="figure"><img alt="Figure 1-3" src="figs/act.0103.gif" /></div><h4 class="objtitle">Figure 1-3. Flash gets friendly</h4>

<p>Pretty neat, eh?! Let's find out how it all <a name="INDEX-36" />happened.</p>
</div>




<a name="ch01-7-fm2xml" /><div class="sect2">
<h3 class="sect2">1.1.3. Keeping Track of Things ( Variables)</h3>


<p>Remember <a name="INDEX-37" />
<a name="INDEX-38" />how
I said programming was really just communicating with a computer?
Well it is, but perhaps with a little less personality than
I've been portraying so far. In your first line of code:</p>


<blockquote><pre class="code">var message = "Hi there, Flash!";</pre></blockquote>


<p>you didn't really say hi to Flash. You said something more like
this:</p>


<blockquote>
<p>Flash, please remember a piece of information for
me -- specifically, the phrase "Hi there, Flash!" I
may need that information in the future, so please give it a label
called <tt class="literal">message</tt>. If I ask you for
<tt class="literal">message</tt> later, give me back the text "Hi
there, Flash!"</p>
</blockquote>


<p>Perhaps not as friendly as saying hi, but it illustrates one of the
true foundations of programming: Flash can remember something for
you, provided that you label it so that it can be found later. For
example, in your second line of code, we had Flash remember your
first name, and we named the reference to it
<tt class="literal">firstName</tt>. Flash remembered your name and
displayed it in the Output window when you tested your movie.</p>


<p>The fact that Flash can remember things for us is crucial in
programming. Flash can remember any type of data, including text
(such as your name), numbers (such as 3.14159), and more complex
datatypes that we'll discuss later.</p>


<a name="ch01-8-fm2xml" /><div class="sect3">
<h3 class="sect3">1.1.3.1. Official variable nomenclature</h3>


<p>Time for a few formal terms to describe how Flash remembers things.
So far you know that Flash remembers data. An individual piece of
data is known as a <em class="emphasis">datum</em>. A datum (e.g.,
"Hi there, Flash!") and the label that identifies it
(e.g., <tt class="literal">message</tt>) are together known as a
<em class="emphasis">variable</em>. A variable's label is called its
<em class="emphasis">name</em>, and a variable's datum is called its
<em class="emphasis">value</em>. We say that the variable
<em class="emphasis">stores</em> or <em class="emphasis">contains</em> its
value. Note that "Hi there, Flash!" is surrounded by
double quotation marks (quotes) to indicate that it is a
<em class="emphasis">string</em> of text, not a number or some other
<em class="emphasis">datatype</em>.</p>


<p>In your first line of code, you specified the value of the variable
<tt class="literal">message</tt>. The act of specifying the value of a
variable is known as <em class="emphasis">assigning the variable's
value</em>, or generally,
<em class="emphasis">assignment</em><a name="INDEX-39" />
<a name="INDEX-40" />. But before you can assign a value to
a variable, you must first create it. We formally bring variables
into existence by <em class="emphasis">declaring </em>them using the
<a name="INDEX-41" />special keyword
<em class="filename">var</em>, which you used earlier.</p>


<p>So, in practice, here's how I might use more formal terms to
instruct you to create the first line of code you created earlier:
Declare a new variable named <tt class="literal">message</tt>, and assign
it the initial value "Hi there, Flash!" Then you should
write:</p>


<blockquote><pre class="code">var message = "Hi there, Flash!";</pre></blockquote>
</div>
</div>




<a name="ch01-9-fm2xml" /><div class="sect2">
<h3 class="sect2">1.1.4. The Wizard Behind the Curtain (the Interpreter)</h3>


<p>Recall your first two lines of code:</p>


<blockquote><pre class="code">var message = "Hi there, Flash!";
var firstName = "<em class="replaceable">your name here</em>";</pre></blockquote>


<p>In each of those statements, you created a variable and assigned a
value to it. Your third and fourth lines, however, are a little
different:</p>


<blockquote><pre class="code">trace (message);
trace ("Hi there, " + firstName + ", nice to meet you.");</pre></blockquote>


<p>These statements use the <em class="filename">trace(
)</em><a name="INDEX-42" /> command. You've already seen the
effect of that command -- it caused Flash to display your text in
the Output window. In the third line, Flash displayed the value of
the variable <tt class="literal">message</tt>. In the last line, Flash also
converted the variable <tt class="literal">firstName</tt> to its value
(whatever you typed) and stuck that into the sentence after the words
"Hi there." The <em class="filename">trace( )</em> command,
then, causes any specified data to appear in the
<a name="INDEX-43" />Output window (which makes it handy for
determining what's going on when a program is running).</p>


<p>The question is, what made the <em class="filename">trace( )</em> command
place your text in the Output window? When you create a variable or
issue a command, you're actually addressing the
<em class="emphasis">ActionScript
interpreter</em><a name="INDEX-44" />, which runs your programs, manages your
code, listens for instructions, performs any ActionScript commands,
executes your statements, stores your data, sends you information,
calculates values, and even starts up the basic programming
environment when a movie is loaded into the Flash Player.</p>


<p>The interpreter translates your ActionScript into a language that the
computer understands and uses to carry out your code. During movie
playback, the interpreter is always active, dutifully attempting to
understand commands you give it. If the interpreter can understand
your commands, it sends them to the computer's processor for
execution. If a command generates a result, the interpreter provides
that response to you. If the interpreter can't understand the
command, it sends you an error message. The interpreter, hence, acts
like ActionScript's switchboard operator -- it's the
audience you're addressing in your code and the ambassador that
reports back to you from Flash.</p>


<p>Let's take a closer look at how the interpreter works by
examining how it handles a simple <em class="filename">trace( )</em>
action.</p>


<p>Consider this command as the interpreter would:</p>


<blockquote><pre class="code">trace ("Nice night to learn ActionScript.");</pre></blockquote>


<p>The interpreter immediately recognizes the keyword <em class="filename">trace
</em>from its special list of legal command names. The
interpreter also knows that <em class="filename">trace( )</em> is used to
display text in the Output window, so it also expects to be told
which text to display. It finds "Nice night to learn
ActionScript." between parentheses following the word
<em class="emphasis">trace</em> and thinks "Aha! That's just
what I need. I'll have that sent to the Output window right
away!"</p>


<p>Note that the command is terminated by a semicolon
(<a name="INDEX-45" /> <a name="INDEX-46" />;). The semicolon acts like the period at
the end of a sentence; with few exceptions, every ActionScript
<a name="INDEX-47" />statement should end with a
semicolon. With the statement successfully understood and all the
required information in hand, the interpreter translates the command
for the processor to execute, causing our text to appear in the
Output window.</p>


<p>That's a gross oversimplification of the internal details of
how a computer processor and an interpreter work, but it illustrates
these points:</p>


<ul><li><p>The interpreter is always listening for your instructions.</p></li><li><p>The interpreter has to read your code, letter by letter, and try to
understand it. This is the same as you trying to read and understand
a sentence in a book.</p></li><li><p>The interpreter reads your ActionScript using strict rules -- if
the parentheses in our <em class="filename">trace( )</em> statement were
missing, for example, the interpreter wouldn't be able to
understand what's going on, so the command would fail.</p></li></ul>
<p>You've only just been introduced to the interpreter, but
you'll be as intimate with it as you are with a lover before
too long: lots of fights, lots of yelling -- "Why
aren't you listening to me?!" -- and lots of beautiful
moments when you understand each other perfectly. Strangely enough,
my dad always told me the best way to learn a new language is to find
a lover that speaks it. May I, therefore, be the first to wish you
all the best in your new relationship with the ActionScript
interpreter. From now on I'll regularly refer to "the
interpreter" instead of "Flash" when describing how
ActionScript instructions are carried out.</p>
</div>




<a name="ch01-10-fm2xml" /><div class="sect2">
<h3 class="sect2">1.1.5. Extra Info Required (Arguments)</h3>


<p>You've <a name="INDEX-48" />
<a name="INDEX-49" />already
seen one case in which we provided the interpreter with the text to
display when issuing a <em class="filename">trace( )</em> command. This
approach is common; we'll often issue a command and then
provide the interpreter with ancillary data used to execute that
command. There's a special name for a datum sent to a command:
an <em class="emphasis">argument</em>, or synonymously, a
<em class="emphasis">parameter</em><a name="INDEX-50" />.
To supply an argument to a command, enclose the argument in
parentheses, like this:</p>


<blockquote><pre class="code"><em class="replaceable">command</em>(<em class="replaceable">argument</em>);</pre></blockquote>


<p>When supplying multiple arguments to a command, separate them with
commas, like this:</p>


<blockquote><pre class="code">command(<em class="replaceable">argument</em>1, <em class="replaceable">argument</em>2, <em class="replaceable">argument</em>3);</pre></blockquote>


<p>Supplying an argument to a command is known as
<em class="emphasis">passing</em> the argument. For example, in the code
<tt class="literal">gotoAndPlay(5)</tt>, <em class="filename">gotoAndPlay</em>
is the name of the command, and 5 is the argument being passed (in
this case the frame number). Some commands, such as <em class="filename">stop(
)</em>, require parentheses but do not accept arguments.
We'll learn why in <a href="ch09_01.htm">Chapter 9, "Functions"</a>.</p>
</div>




<a name="ch01-11-fm2xml" /><div class="sect2">
<h3 class="sect2">1.1.6. ActionScript's Glue (Operators)</h3>


<p>Let's take <a name="INDEX-51" />
<a name="INDEX-52" />another
<a name="INDEX-53" />look at your fourth line of code,
which contains this <em class="filename">trace( )</em> statement:</p>


<blockquote><pre class="code">trace ("Hi there, " + firstName + ", nice to meet you.");</pre></blockquote>


<p>See the <a name="INDEX-54" /> <a name="INDEX-55" /> <a name="INDEX-56" /> <a name="INDEX-57" /><tt class="literal">+</tt> (plus)
signs? They're used to join (<em class="emphasis">concatenate</em>)
our text together and are but one of many available
<em class="emphasis">operators</em>. The operators of a programming
language are akin to conjunctions ("and,"
"or," "but," etc.) in human languages.
They're devices used to combine and manipulate phrases of code.
In the <em class="filename">trace( )</em> example, the plus operator joins
the quoted text "Hi there, " to the text contained in the
variable <tt class="literal">firstName</tt>.</p>


<p>All operators link phrases of code together, manipulating those
phrases in the process. Whether the phrases are text, numbers, or
some other datatype, an operator nearly always performs some kind of
transformation. Very commonly, operators combine two things together,
as the plus operator does. But other operators compare values, assign
values, facilitate logical decisions, determine datatypes, create new
objects, and provide various other handy services.</p>


<p>When used with two numeric operands, the plus sign (+) and the minus
sign (<a name="INDEX-58" /> <a name="INDEX-59" />
<a name="INDEX-60" />-),
perform basic arithmetic. The following displays "3" in
the Output window:</p>


<blockquote><pre class="code">trace(5 - 2);</pre></blockquote>


<p>The <a name="INDEX-61" /> <a name="INDEX-62" /><em class="emphasis">less-than</em>
operator checks which of two numbers is smaller or determines which
of two letters is alphabetically first:</p>


<blockquote><pre class="code">if (3 &lt; 300) {
  // Do something...
}

if ("a" &lt; "z") {
  // Do something else...
}</pre></blockquote>


<p>The combinations, comparisons, assignments, or other manipulations
performed by operators are known as <em class="emphasis">operations</em>.
Arithmetic operations are the easiest operations to understand
because they follow basic mathematics: addition
(<tt class="literal">+</tt>), subtraction (<tt class="literal">-</tt>),
multiplication (<tt class="literal">*</tt>), and division (<tt class="literal">/
</tt>). But some operators will be less recognizable to you
because they perform specialized programming tasks. Take the
<em class="emphasis">typeof</em><a name="INDEX-63" /> operator, for example. It tells us
what kind of data is stored in a variable. So, if we create a
variable <tt class="literal">x</tt>, and give it the value 4, we can then
ask the interpreter what datatype <tt class="literal">x</tt> contains, like
this:</p>


<blockquote><pre class="code">var x = 4;
trace (typeof x);</pre></blockquote>


<p>When that line of code is executed in Flash, we get the word
"number" in the Output window. Notice that we provide the
<em class="filename">typeof</em> operator with a value upon which to
operate, but without using parentheses: <tt class="literal">typeof</tt>
<tt class="literal">x</tt>. You might therefore wonder whether or not
<tt class="literal">x</tt> is an <em class="emphasis">argument</em> of
<em class="filename">typeof</em>. In fact, <tt class="literal">x</tt> plays the
same role as an argument (it's an ancillary piece of data
needed in the computation of the phrase of code), but in the context
of an operator, the argument-like <tt class="literal">x</tt> is officially
called an
<em class="emphasis">operand</em><a name="INDEX-64" />.
An operand is an item upon which an operator operates. For example,
in the expression 4 + 9, the numbers 4 and 9 are operands of the
<tt class="literal">+</tt> operator.</p>


<p><a href="ch05_01.htm">Chapter 5, "Operators"</a>, covers all of the ActionScript
operators in detail. For now just remember that operators link
phrases of code in some kind of transformation.</p>
</div>




<a name="ch01-12-fm2xml" /><div class="sect2">
<h3 class="sect2">1.1.7. Putting It All Together</h3>


<p>Let's review what you've learned. Here, again, is line
one:</p>


<blockquote><pre class="code">var message = "Hi there, Flash!";</pre></blockquote>


<p>The keyword <em class="filename">var</em> tells the interpreter that
we're declaring (creating) a new variable. The word
<tt class="literal">message</tt> is the name of our variable. The equals
sign is an operator that assigns the text string ("Hi there,
Flash!") to the variable <tt class="literal">message</tt>. The text
"Hi there, Flash!" hence, becomes the value of
<tt class="literal">message</tt>. Finally, the semicolon
(<tt class="literal">;</tt>) tells the interpreter that we're
finished with our first statement.</p>


<p>Line two is pretty much the same as line one:</p>


<blockquote><pre class="code">var firstName = "<em class="replaceable">your name here</em>";</pre></blockquote>


<p>Here we're assigning the text string you typed in place of
<em class="replaceable">your name here</em> to the variable
<tt class="literal">firstName</tt>. A semicolon ends our second statement.</p>


<p>We then use the variables <tt class="literal">message</tt> and
<tt class="literal">firstName</tt> in lines three and four:</p>


<blockquote><pre class="code">trace (message);
trace ("Hi there, " + firstName + ", nice to meet you.");</pre></blockquote>


<p>The keyword <em class="filename">trace</em> signals the interpreter that
we'd like some text displayed in the Output window. We pass the
text we want displayed as an argument. The opening parenthesis marks
the beginning of our argument. In line four, the argument itself
includes two <em class="emphasis">operations</em>, both of which use the
plus <em class="emphasis">operator</em>. The first operation joins its
first <em class="emphasis">operand</em>, "Hi there, " to the
value of its second operand, <tt class="literal">firstName</tt>. The second
operation joins ", nice to meet you." to the result of
the first operation. The closing parenthesis marks the end of our
argument, and the semicolon once again indicates the end of our
statement.</p>


<p>Blam! Your first ActionScript program. That has a nice ring to it,
and it's an important landmark.</p>
</div>
</div>
































<hr width="684" align="left" />
<div class="navbar"><table width="684" border="0"><tr><td align="left" valign="top" width="228"><a href="part1.htm"><img alt="Previous" border="0" src="../gifs/txtpreva.gif" /></a></td><td align="center" valign="top" width="228"><a href="index.htm"><img alt="Home" border="0" src="../gifs/txthome.gif" /></a></td><td align="right" valign="top" width="228"><a href="ch01_02.htm"><img alt="Next" border="0" src="../gifs/txtnexta.gif" /></a></td></tr><tr><td align="left" valign="top" width="228">I. ActionScript Fundamentals</td><td align="center" valign="top" width="228"><a href="index/index.htm"><img alt="Book Index" border="0" src="../gifs/index.gif" /></a></td><td align="right" valign="top" width="228">1.2. Further ActionScript Concepts</td></tr></table></div>
<hr width="684" align="left" />

<img alt="Library Navigation Links" border="0" src="../gifs/navbar.gif" usemap="#library-map" />
<p><font size="-1"><a href="copyrght.htm">Copyright &copy; 2002</a> O'Reilly &amp; Associates. All rights reserved.</font></p>

<map name="library-map"><area href="../index.htm" coords="0,1,78,93" shape="rect" /><area href="../wdesign/index.htm" coords="80,2,155,96" shape="rect" /><area href="../xhtml/index.htm" coords="158,0,263,97" shape="rect" /><area href="../audio/index.htm" coords="265,1,335,97" shape="rect" /><area href="../css/index.htm" coords="338,1,434,93" shape="rect" /><area href="index.htm" coords="439,0,540,102" shape="rect" /><area href="../infoarch/index.htm" coords="544,0,685,102" shape="rect" /></map>

</body></html>
