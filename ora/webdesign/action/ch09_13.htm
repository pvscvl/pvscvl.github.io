<html><head><title>The Multiple-Choice Quiz Revisited (ActionScript: The Definitive Guide)</title><link rel="stylesheet" type="text/css" href="../style/style1.css" />

<meta name="DC.Creator" content="Colin Moock" /><meta name="DC.Format" content="text/xml" scheme="MIME" /><meta name="DC.Language" content="en-US" /><meta name="DC.Publisher" content="O'Reilly &amp; Associates, Inc." /><meta name="DC.Source" scheme="ISBN" content="1565928520L" /><meta name="DC.Subject.Keyword" content="stuff" /><meta name="DC.Title" content="ActionScript: The Definitive Guide" /><meta name="DC.Type" content="Text.Monograph" />

</head><body bgcolor="#ffffff">

<img alt="Book Home" border="0" src="gifs/smbanner.gif" usemap="#banner-map" /><map name="banner-map"><area shape="rect" coords="1,-2,616,66" href="index.htm" alt="ActionScript: The Definitive Guide" /><area shape="rect" coords="629,-11,726,25" href="jobjects/fsearch.htm" alt="Search this book" /></map>

<div class="navbar"><table width="684" border="0"><tr><td align="left" valign="top" width="228"><a href="ch09_12.htm"><img alt="Previous" border="0" src="../gifs/txtpreva.gif" /></a></td><td align="center" valign="top" width="228"><a href="index.htm">ActionScript: The Definitive Guide</a></td><td align="right" valign="top" width="228"><a href="ch09_14.htm"><img alt="Next" border="0" src="../gifs/txtnexta.gif" /></a></td></tr></table></div>
<hr width="684" align="left" />


<h2 class="sect1">9.13. The Multiple-Choice Quiz Revisited</h2>


<p>In <a href="ch01_03.htm">Example 1-1</a>, <a name="INDEX-1103" />we
introduced new programmers to a simple scripted movie -- a
multiple-choice quiz. Let's revisit that quiz now to see how we
can centralize its code.</p>


<p>Our new quiz's layer structure is set up exactly as before.
We'll be changing the code on only the first frame, the
<tt class="literal">quizEnd</tt> frame, and the buttons.</p>


<p>You can retrieve the <em class="filename">.fla</em> file for both the
original and revised versions of the quiz from the online Code Depot.</p>


<a name="ch09-26-fm2xml" /><div class="sect2">
<h3 class="sect2">9.13.1. Organizing the Quiz Code into Functions</h3>


<p>In <a name="INDEX-1104" /> <a name="INDEX-1105" />our first attempt at creating a
multiple-choice quiz, we scattered our code around our movie. We
placed the logic of our quiz in three places: on the first frame,
where we initialized our quiz; on the buttons, where we tracked the
user's answers; and on the <tt class="literal">quizEnd</tt> frame,
where we tallied the user's score. We're now going to
centralize the quiz logic by performing all of those tasks in the
first frame. To initialize the quiz, we'll still use a simple
series of statements as we did in the first version, but to track the
user's answers and tally the user's score, we'll
use two functions, <em class="filename">answer( )</em> and
<em class="filename">gradeUser( )</em>.</p>


<p><a href="ch09_13.htm">Example 9-10</a> shows the code on our quiz's first
frame. This is where we'll store all the logic needed to run
our quiz. Take a look at the code in its entirety, then we'll
dissect it.</p>


<a name="ch09-90108" /><div class="example">
<h4 class="objtitle">Example 9-10. A Multiple-Choice Quiz, Version 2 </h4>

<blockquote><pre class="code">//  Stop the movie at the first question
stop ( );

//  Initialize main timeline variables
var displayTotal;         // Text field for displaying user's score
var numQuestions = 2;     // Number of quiz questions
var q1answer;             // User's answer for question1
var q2answer;             // User's answer for question2
var totalCorrect = 0;     // Number of questions answered correctly
var correctAnswer1 = 3;   // The correct choice for question 1
var correctAnswer2 = 2;   // The correct choice for question 2

//  Function to register user's answers
function answer (choice) {
  answer.currentAnswer++;
  set ("q" + answer.currentAnswer + "answer", choice);
  if (answer.currentAnswer == numQuestions) {
    gotoAndStop ("quizEnd");
  } else {
    gotoAndStop ("q" + (answer.currentAnswer + 1));
  }
}

//  Function to tally user's score
function gradeUser( ) {
  // Count how many questions user answered correctly
  for (i = 1; i &lt;= numQuestions; i++) {
    if (eval("q" + i + "answer") == eval("correctAnswer" + i)) {
      totalCorrect++;
    }
  }

  // Show user's score in an on-screen text field
  displayTotal = totalCorrect;
}</pre></blockquote>
</div>


<p>Our first chore is to stop the movie, using the <em class="filename">stop(
)</em> function, so that it doesn't play through all the
questions. Next, we initialize our quiz's
<a name="INDEX-1106" />timeline
variables. You'll recognize <tt class="literal">displayTotal</tt>,
<tt class="literal">totalCorrect</tt>, <tt class="literal">q1answer</tt>, and
<tt class="literal">q2answer</tt> from the first version of the quiz.
We've also added <tt class="literal">numQuestions</tt> (which
we'll use in our <em class="filename">answer( )</em> and
<em class="filename">gradeUser( )</em> functions) and
<tt class="literal">correctAnswer1</tt> and
<tt class="literal">correctAnswer2</tt> (which we'll use when grading
the quiz).</p>


<p>With our variables initialized, we can create the <em class="filename">answer(
)</em> function, which will record the user's answers and
advance the playhead to the next question. The <em class="filename">answer(
)</em> function expects one parameter,
<tt class="literal">choice</tt>, which is the number of the user's
answer for each question, so its function declaration begins like
this:</p>


<blockquote><pre class="code">function answer (choice) {</pre></blockquote>


<p>Each time an answer is given, the function increments
<tt class="literal">currentAnswer</tt>, a function property that tracks the
question being answered:</p>


<blockquote><pre class="code">answer.currentAnswer++;</pre></blockquote>


<p>Next, we set the user's choice in a dynamically named timeline
variable that corresponds to the question being answered. We use the
value of the <tt class="literal">currentAnswer</tt> property to determine
the name of our timeline variable (<tt class="literal">q1answer</tt>,
<tt class="literal">q2answer</tt>, etc.):</p>


<blockquote><pre class="code">set ("q" + answer.currentAnswer + "answer", choice);</pre></blockquote>


<p>With the user's choice stored in the appropriate variable, if
we are on the last question, we go to the end of the quiz; otherwise,
we go to the next question, which is at the frame labeled
<em class="emphasis">"q" + (answer.currentAnswer + 1)</em>:</p>


<blockquote><pre class="code">if (answer.currentAnswer == numQuestions) {
  gotoAndStop ("quizEnd");
} else {
  gotoAndStop ("q"+ (answer.currentAnswer + 1));
}</pre></blockquote>


<p>That takes care of our question-answering logic. The
<em class="emphasis">answer</em><em class="filename">( )</em> function is ready
to handle answers from any question in the quiz. Now let's
build the function that evaluates those answers, <em class="filename">gradeUser(
)</em>.</p>


<p>The <em class="filename">gradeUser( )</em> function takes no parameters.
It has to compare each user answer with each correct answer and
display the user's score. We handle the comparisons in a
<em class="filename">for</em> loop -- we cycle through the loop body
for the number of questions in the quiz:</p>


<blockquote><pre class="code">for (i = 1; i &lt;= numQuestions; i++) {</pre></blockquote>


<p>Inside the loop, a comparison expression tests the user's
answers against the correct answers. Using <em class="filename">eval(
)</em>, we dynamically retrieve the value of each user-answer
variable and each correct-answer variable. If the two variables are
equal, <tt class="literal">totalCorrect</tt> is incremented:</p>


<blockquote><pre class="code">if (eval("q" + i + "answer") == eval("correctAnswer" + i)) {
  totalCorrect++;
}</pre></blockquote>


<p>After the loop finishes, <tt class="literal">totalCorrect</tt> will contain
the number of questions that the user answered correctly. We display
that number by setting the dynamic text field
<tt class="literal">displayTotal</tt> to <tt class="literal">totalCorrect</tt>:</p>


<blockquote><pre class="code">displayTotal = totalCorrect;</pre></blockquote>


<p>Voila! With both functions in place and our quiz variables
initialized, the logic of our quiz system is complete. Notice how
much easier it is to follow the quiz's operation when most of
the code is contained on a single frame? All that's left is to
call the functions from the appropriate points in the quiz.</p>


<a name="ch09-27-fm2xml" /><div class="sect3">
<h3 class="sect3">9.13.1.1. Calling the quiz functions</h3>


<p>We'll call the <em class="filename">answer( )</em> function from the
buttons that the user clicks to indicate answers, and we'll
call the <em class="filename">gradeUser( )</em> function from the
<tt class="literal">quizEnd</tt> frame.</p>


<p>On the first answer button of frame 1, we attach the following code:</p>


<blockquote><pre class="code">on (release) {
  answer(1);
}</pre></blockquote>


<p>On the second button, we attach this code:</p>


<blockquote><pre class="code">on (release) {
  answer(2);
}</pre></blockquote>


<p>And on the third button, we attach this code:</p>


<blockquote><pre class="code">on (release) {
  answer(3);
}</pre></blockquote>


<p>Then we attach the exact same code to the three buttons at frame
<tt class="literal">q2</tt>. Notice how elegant this process is. With the
code needed to handle each button neatly packed into a function, our
button code is kept to a bare minimum. The answer and quiz
progression logic is not redundantly duplicated as it was in the
earlier version of the quiz. Furthermore, creating new buttons is a
simple matter of changing the number passed to the <em class="filename">answer(
)</em> function. We don't need to do anything special for
the last question in the quiz because the <em class="filename">answer(
)</em> function handles that automatically.</p>


<p>With the button code attached, we simply need to grade the user at
the end of the quiz by attaching this statement to the
<tt class="literal">quizEnd</tt> frame:</p>


<blockquote><pre class="code">gradeUser( );</pre></blockquote>


<p>Once again, by placing our grading functionality on the first frame
of our movie with the other functions, we've separated the
<em class="emphasis">mechanics</em> of the system from the
<em class="emphasis">use</em> of the system. Hence, we don't lose
those mechanics in the maze of frames and buttons that Flash movies
can often become.</p>


<p>Test your quiz to make sure that it works. Experiment to see what
happens when you add quiz questions, remove quiz questions, and
change anything else that comes to mind. As we continue, think about
how the techniques we learn might be applied to our quiz example.
What visible features can we add to the user experience? What
invisible changes can we make to the code that will make it more
flexible or elegant even if the user <a name="INDEX-1107" />experience is <a name="INDEX-1108" /> <a name="INDEX-1109" />unchanged?</p>
</div>
</div>


<hr width="684" align="left" />
<div class="navbar"><table width="684" border="0"><tr><td align="left" valign="top" width="228"><a href="ch09_12.htm"><img alt="Previous" border="0" src="../gifs/txtpreva.gif" /></a></td><td align="center" valign="top" width="228"><a href="index.htm"><img alt="Home" border="0" src="../gifs/txthome.gif" /></a></td><td align="right" valign="top" width="228"><a href="ch09_14.htm"><img alt="Next" border="0" src="../gifs/txtnexta.gif" /></a></td></tr><tr><td align="left" valign="top" width="228">9.12. Centralizing Code</td><td align="center" valign="top" width="228"><a href="index/index.htm"><img alt="Book Index" border="0" src="../gifs/index.gif" /></a></td><td align="right" valign="top" width="228">9.14. Onward!</td></tr></table></div>
<hr width="684" align="left" />

<img alt="Library Navigation Links" border="0" src="../gifs/navbar.gif" usemap="#library-map" />
<p><font size="-1"><a href="copyrght.htm">Copyright &copy; 2002</a> O'Reilly &amp; Associates. All rights reserved.</font></p>

<map name="library-map"><area href="../index.htm" coords="0,1,78,93" shape="rect" /><area href="../wdesign/index.htm" coords="80,2,155,96" shape="rect" /><area href="../xhtml/index.htm" coords="158,0,263,97" shape="rect" /><area href="../audio/index.htm" coords="265,1,335,97" shape="rect" /><area href="../css/index.htm" coords="338,1,434,93" shape="rect" /><area href="index.htm" coords="439,0,540,102" shape="rect" /><area href="../infoarch/index.htm" coords="544,0,685,102" shape="rect" /></map>

</body></html>