<html><head><title>Movie-Playback Movie Clip Events (ActionScript: The Definitive Guide)</title><link rel="stylesheet" type="text/css" href="../style/style1.css" />

<meta name="DC.Creator" content="Colin Moock" /><meta name="DC.Format" content="text/xml" scheme="MIME" /><meta name="DC.Language" content="en-US" /><meta name="DC.Publisher" content="O'Reilly &amp; Associates, Inc." /><meta name="DC.Source" scheme="ISBN" content="1565928520L" /><meta name="DC.Subject.Keyword" content="stuff" /><meta name="DC.Title" content="ActionScript: The Definitive Guide" /><meta name="DC.Type" content="Text.Monograph" />

</head><body bgcolor="#ffffff">

<img alt="Book Home" border="0" src="gifs/smbanner.gif" usemap="#banner-map" /><map name="banner-map"><area shape="rect" coords="1,-2,616,66" href="index.htm" alt="ActionScript: The Definitive Guide" /><area shape="rect" coords="629,-11,726,25" href="jobjects/fsearch.htm" alt="Search this book" /></map>

<div class="navbar"><table width="684" border="0"><tr><td align="left" valign="top" width="228"><a href="ch10_09.htm"><img alt="Previous" border="0" src="../gifs/txtpreva.gif" /></a></td><td align="center" valign="top" width="228"><a href="index.htm">ActionScript: The Definitive Guide</a></td><td align="right" valign="top" width="228"><a href="ch10_11.htm"><img alt="Next" border="0" src="../gifs/txtnexta.gif" /></a></td></tr></table></div>
<hr width="684" align="left" />


<h2 class="sect1">10.10. Movie-Playback Movie Clip Events</h2>


<p>The <a name="INDEX-1218" />
<a name="INDEX-1219" />following events are generated without
user intervention as Flash loads and plays movies.</p>


<a name="ch10-27-fm2xml" /><div class="sect2">
<h3 class="sect2">10.10.1. enterFrame</h3>


<p>If <a name="INDEX-1220" /> <a name="INDEX-1221" />you've
<a name="INDEX-1222" /> <a name="INDEX-1223" />ever
resorted to empty, looping movie clips to trigger scripts,
<em class="filename">enterFrame</em> offers a welcome respite. The
<em class="filename">enterFrame</em> event occurs once for every frame
that passes in a movie. For example, if we place the following code
on a movie clip, that clip will grow incrementally by 10 pixels per
frame:</p>


<blockquote><pre class="code">onClipEvent (enterFrame) {
  _height += 10;
  _width += 10;
}</pre></blockquote>


<p>(Notice that, as we learned earlier, the <tt class="literal">_height</tt>
and <tt class="literal">_width</tt> properties are resolved within the
scope of the clip to which the <em class="filename">enterFrame</em> event
handler is attached, so no clip instance name is required before
<tt class="literal">_height</tt> and <tt class="literal">_width</tt>.)</p>


<a name="ch10-29-fm2xml" /><blockquote><h4>TIP</h4>
<p>The <em class="filename">enterFrame</em> event is generated before each
frame is rendered even if the playhead of the clip with the
<em class="filename">enterFrame</em> handler is stopped. The
<em class="filename">enterFrame</em> event, hence, is always being
triggered.</p>

</blockquote>

<p>When displayed in the Flash Player, all Flash movies are constantly
running, even when nothing is moving on screen or when a
movie's playhead is stopped on a frame. An individual movie
clip's <em class="filename">enterFrame</em> handler will, hence, be
executed repeatedly for as long as that clip is on stage, regardless
of whether the clip is playing or stopped. If a clip's playhead
is moved by a <em class="filename">gotoAndStop( )</em> function call, the
clip's <em class="filename">enterFrame</em> event handler is still
triggered with each passing frame. And if every playhead of an entire
movie has been halted with a <em class="filename">stop( )</em> function,
all <em class="filename">enterFrame</em> event handlers on all clips will
still execute.</p>


<p>The<em class="filename"> enterFrame</em> event is normally used to update
the state of a movie clip repeatedly over time. But an
<em class="filename">enterFrame</em> event handler need not apply directly
to the clip that bears
it -- <em class="emphasis">e</em><em class="filename">nterFrame</em> can be
used with a single-frame, empty clip to execute code repeatedly. This
technique, called a <a name="INDEX-1224" /><em class="emphasis">clip event loop</em>
(or more loosely, a <em class="emphasis">process</em>) is demonstrated in
<a href="ch08_07.htm">Section 8.7, "Timeline and Clip Event Loops"</a> in <a href="ch08_01.htm">Chapter 8, "Loop Statements"</a>.</p>


<p>Note that the code in an <em class="filename">enterFrame</em> event
handler is executed <em class="emphasis">before</em> any code that appears
on the timeline of the clip containing the handler.</p>


<p>With a little ambition, we can use <em class="filename">enterFrame</em> to
gain extremely powerful control over a clip. <a href="ch10_17.htm">Example 10-7</a>, shown later, extends our earlier
clip-enlarging code to make a movie clip oscillate in size.</p>
</div>




<a name="ch10-30-fm2xml" /><div class="sect2">
<h3 class="sect2">10.10.2. load</h3>


<p>The <em class="filename">load</em><a name="INDEX-1225" /> <a name="INDEX-1226" />
<a name="INDEX-1227" /> <a name="INDEX-1228" />event occurs
when a movie clip is born -- that is, when a movie clip appears on
stage for the first time. A movie clip "appears on stage"
in one of the following ways:</p>


<ul><li><p>The playhead moves onto a keyframe that contains a new instantiation
of the clip, placed in the authoring tool.</p></li><li><p>The clip is duplicated from another clip via the
<em class="filename">duplicateMovieClip( )</em> function.</p></li><li><p>The clip is programmatically added to the Stage via the
<em class="filename">attachMovie( )</em> function.</p></li><li><p>An external <em class="filename">.swf</em> file is loaded into the clip
with the <em class="filename">loadMovie( )</em> function.</p></li><li><p>The contents of a clip are unloaded with the <em class="filename">unloadMovie(
)</em> function. (A <em class="filename">load</em> event is
triggered because an empty placeholder clip is loaded into the clip
when its contents are expelled.)</p></li></ul>
<p>The body of a <em class="filename">load</em> event handler is executed
<em class="emphasis">after</em> any code on the timeline where the movie
clip first appears.</p>


<p>A <em class="filename">load</em> event handler is often used to initialize
variables in a clip or to perform some setup task (like sizing or
positioning a dynamically generated clip). A
<em class="filename">load</em> handler can also provide a nice way to
prevent a movie clip from automatically playing:</p>


<blockquote><pre class="code">onClipEvent (load) {
  stop( );
}</pre></blockquote>


<p>The <em class="filename">load</em> event handler might also be used to
trigger some function that relies on the existence of a particular
clip in order to execute properly.</p>


<p>The <em class="filename">load</em> event is particularly interesting when
combined with the <em class="filename">duplicateMovieClip(
)</em><a name="INDEX-1229" /> function, which creates new movie clips.
In <a href="ch10_10.htm">Example 10-2</a> we generate an entire field of
<tt class="literal">star</tt> clips using a single
<em class="filename">load</em> event handler in a cascading chain. The
load handler is copied to each duplicated <tt class="literal">star</tt>,
causing it, in turn, to duplicate itself. The process stops when the
100<sup class="superscript">th</sup> clip is duplicated. The
<em class="filename">.fla</em> file for <a href="ch10_10.htm">Example 10-2</a> is
available from the online <a name="INDEX-1230" />Code Depot.</p>


<a name="ch10-28693" /><div class="example">
<h4 class="objtitle">Example 10-2. Generating a Star Field with a load Event </h4>

<blockquote><pre class="code">onClipEvent (load) {
  // Place the current clip at a random position
  _x = Math.floor(Math.random( ) * 550);    
  _ y = Math.floor(Math.random( ) * 400);
  
  // Reset clip scale so we don't inherit previous clip's scale
  _xscale = 100;
  _ yscale = 100;

  // Randomly size current clip between 50 and 150 percent
  randScale = Math.floor(Math.random( ) * 100) - 50;
  _xscale += randScale;
  _ yscale += randScale;  

  // If we're not at the 100th star, make another one
  if (_name != "star100") {
    nextStarNumber = number(_name.substring(4, _name.length)) + 1;
    this.duplicateMovieClip("star" + nextStarNumber, nextStarNumber);
  }
}</pre></blockquote>
</div>
</div>




<a name="ch10-31-fm2xml" /><div class="sect2">
<h3 class="sect2">10.10.3. unload</h3>


<p>The <em class="filename">unload</em><a name="INDEX-1231" /> <a name="INDEX-1232" />
<a name="INDEX-1233" /> <a name="INDEX-1234" />event is
the opposite of the <em class="filename">load</em> event: it occurs when a
movie clip expires -- that is, immediately
<em class="emphasis">after</em> the last frame in which the clip is
present on stage (but <em class="emphasis">before</em> the first frame in
which the clip is absent).</p>


<p>The following incidents provoke a movie clip's
<em class="filename">unload</em> event:</p>


<ul><li><p>The playhead reaches the end of the span of frames upon which the
clip resides.</p></li><li><p>The clip is removed via the <em class="filename">removeMovieClip( )</em>
function (which kills clips generated by the <em class="filename">attachMovie(
)</em> and <em class="filename">duplicateMovieClip( )</em>
functions).</p></li><li><p>A previously loaded external <a name="INDEX-1235" /><em class="filename">.swf</em> file is removed
from the clip via the <em class="filename">unloadMovie( )</em> function.</p></li><li><p>The clip has an external <em class="filename">.swf</em>  loaded into it.</p></li></ul>
<p>This last <em class="filename">unload</em> event trigger may seem a little
odd but is actually a natural result of the way movies are loaded
into Flash. Anytime a <em class="filename">.swf</em> is loaded into a
movie clip, the previous contents of that clip are displaced, causing
an <em class="filename">unload</em> event. Here's an example that
illustrates the behavior of the <em class="filename">load</em> and
<em class="filename">unload</em> events in connection with
<em class="filename">loadMovie( )
</em><a name="INDEX-1236" />:</p>


<ol><li><p>In the Flash authoring tool, we place an empty movie clip on stage at
frame 1 of a movie's main timeline. We name our clip
<tt class="literal">emptyClip</tt>.</p></li>

<li><p>At frame 5 of the main timeline, we load the movie
<em class="filename">test.swf</em> into <tt class="literal">emptyClip</tt> using
the following code:
<tt class="literal">emptyClip.loadMovie("test.swf");</tt></p></li>

<li><p>We play the movie using Control <img align="absmiddle" src="figs/U2192.gif" /> Play movie.</p></li></ol>
<p>The results are:</p>


<ol><li><p>Frame 1: The <tt class="literal">emptyClip</tt> clip appears, causing a
<em class="filename">load</em> event.</p></li><li><p>Frame 5: The <em class="filename">loadMovie( )</em> function is executed
in two stages:</p>

<ol><li><p>The placeholder content of <tt class="literal">emptyClip</tt> is removed to
make room for the incoming <em class="filename">test.swf</em>, causing an
<em class="filename">unload</em> event.</p></li>
<li><p>The movie<em class="filename"> test.swf</em> loads, causing a
<em class="filename">load</em> event.</p></li></ol></li></ol>
<p>The <em class="filename">unload</em> event is typically used to initiate
housecleaning code -- code that cleans up the Stage or resets the
program environment in some way. An
<em class="emphasis">u</em><em class="filename">nload</em> handler also
provides a means for performing some action (such as playing another
movie) after a movie clip ends.</p>
</div>




<a name="ch10-18028" /><div class="sect2">
<h3 class="sect2">10.10.4. data</h3>


<p>The <em class="filename">data</em><a name="INDEX-1237" /> <a name="INDEX-1238" />
<a name="INDEX-1239" />event occurs
when external data is loaded into a movie clip. The
<em class="filename">data</em> event can be triggered by two quite
different circumstances, according to the kind of data being loaded.
We'll consider those circumstances separately.</p>


<a name="ch10-32-fm2xml" /><div class="sect3">
<h3 class="sect3">10.10.4.1. Using a data event handler with loadVariables( )</h3>


<p>When <a name="INDEX-1240" />we
<a name="INDEX-1241" />request a series of variables
from a server using <em class="filename">loadVariables( )</em>, we must
wait for them to load completely before using their information. (See
<a href="part3.htm">Part III, "Language Reference"</a>.)</p>


<p>When a movie clip receives the end of a batch of loaded variables,
the <em class="emphasis">data</em> event is triggered, telling us
it's safe to execute code that relies on the variables.</p>


<p>For example, suppose we have a guest book movie in which visitors
enter comments and we store those comments on a server. When a user
attempts to view a comment, we request it from the server using
<em class="filename">loadVariables( )</em>. But before we can display the
comment, we must pause at a loading screen until we know that the
requested data is available. A <em class="emphasis">data</em> event
handler tells us when our data has loaded, at which point we can
safely display the comment to the user.</p>


<p><a href="ch10_10.htm">Example 10-3</a> is a simplified excerpt of some code
from a guest book showing a data event handler used with
<em class="filename">loadVariables( )</em>. In the example, a button loads
two URL-encoded variables from a text file into a movie clip. The
movie clip bears a <em class="filename">data</em> event handler that
executes when the variables have loaded. From inside that handler, we
display the values of the variables. We know the variables are safe
to display because the code in the handler isn't executed until
triggered by the <em class="filename">data</em> event (i.e., after the
data is received).</p>


<a name="ch10-46779" /><div class="example">
<h4 class="objtitle">Example 10-3. Waiting for a data Event </h4>

<blockquote><pre class="code"><tt class="userinput"><b>// CONTENT OF OUR guestbook.txt FILE</b></tt>
name=judith&amp;message=hello

<tt class="userinput"><b>// BUTTON INSIDE OUR CLIP</b></tt>
on (release) {
  this.loadVariables("guestbook.txt");
}

<tt class="userinput"><b>// HANDLER ON OUR CLIP</b></tt>
onClipEvent (data) {
  trace(name);
  trace(message);
}</pre></blockquote>
</div>


<p>We'll use the <em class="filename">data</em> event again when we
build a Flash form in <a href="ch17_01.htm">Chapter 17, "Flash Forms"</a>.</p>
</div>



<a name="ch10-33-fm2xml" /><div class="sect3">
<h3 class="sect3">10.10.4.2. Using a data event handler with loadMovie( )</h3>


<p>The
<a name="INDEX-1242" />second <a name="INDEX-1243" />use of the <em class="filename">data</em> event
relates to the loading of external <a name="INDEX-1244" /><em class="filename">.swf</em> files into movie
clips with the <em class="filename">loadMovie( )</em> function. When a
<em class="filename">.swf</em> file is loaded into a host clip, by default
the file begins playing immediately, even if only partially loaded.
This is not always desirable -- sometimes we want to guarantee
that all or a certain percentage of a <em class="filename">.swf</em> has
loaded before playback begins. We can make that guarantee with a
<em class="filename">data</em> event handler and some preloading code.</p>


<p>The <em class="filename">data</em> event occurs each time a host movie
clip receives a portion of an external <em class="filename">.swf</em>
file. The definition of what constitutes a "portion" is
more complex than you might expect. In order for a
<em class="filename">data</em> event to be triggered, at least one
complete new frame of the external <em class="filename">.swf</em> file
must have loaded since either: (a) the last <em class="filename">data</em>
event fired or (b) the <em class="filename">.swf</em> file started
loading. (More than one frame of the <em class="filename">.swf</em> file
may actually have loaded in that amount of time, but one frame is the
minimum number required to prompt a <em class="filename">data</em> event.)</p>


<p>The execution of <em class="filename">data</em> event handlers is tied to
the rendering of frames in the Player. With every frame rendered, the
interpreter checks to see if part of an external
<em class="filename">.swf</em> file has been loaded into a clip that has a
<em class="filename">data</em> event handler. If part of an external
<em class="filename">.swf</em> file has been loaded into such a clip, and
the loaded portion contains at least one new frame, then the
<em class="filename">data</em> event handler is executed. This process
happens once -- and only once -- per frame rendered (even if
the playhead is stopped).</p>


<p>Note that because the <em class="filename">data</em> event happens on a
per-frame basis, movies with higher frame rates tend to have
smoother-looking preloaders because they receive more frequent
updates on the status of loading <em class="filename">.swf</em> files.</p>


<p>The exact number of <em class="filename">data</em> events triggered during
a <em class="filename">loadMovie( )</em> operation depends on the
distribution of content in the <em class="filename">.swf</em> file being
loaded and the speed of the connection. A single-frame
<em class="emphasis">.swf</em> file, no matter how large, will trigger
only one <em class="filename">data</em> event. On the other hand, a
<em class="filename">.swf</em> file with 100 frames may trigger up to 100
separate <em class="filename">data</em> events, depending on the
movie's frame rate, the byte size of each frame and the speed
of the network connection. If the frames are large and the connection
is slow, more <em class="filename">data</em> events will be triggered (up
to a maximum of one per frame). If the frames are small and the
connection is fast, fewer <em class="filename">data</em> events will be
triggered (the entire 100 frames may be transferred between the
rendering of two frames in the Player, prompting only one
<em class="filename">data</em> event).</p>


<p>So how do we use a <em class="filename">data</em><a name="INDEX-1245" /> event handler to build a
<a name="INDEX-1246" />preloader? Well, whenever a
<em class="filename">data</em> event occurs due to a <em class="filename">loadMovie(
)</em> function call, we know that an external
<em class="filename">.swf</em> file download is in progress. Therefore,
from inside a <em class="filename">data</em> event handler, we can check
whether enough of the file has downloaded before allowing it to play.
We do so using the <em class="filename">getBytesLoaded( )</em> and
<em class="filename">getBytesTotal( )</em> functions as shown in <a href="ch10_10.htm">Example 10-4</a>. (The <tt class="literal">_framesloaded</tt> and
<tt class="literal">_totalframes</tt> movie clip properties may also be
used.)</p>


<p><a href="ch10_10.htm">Example 10-4</a> also provides feedback while the movie
is loading. Note that the <em class="filename">.swf</em> file being loaded
should have a <em class="filename">stop( )</em> function call on its first
frame to prevent it from automatically playing before it is
completely downloaded. A variation of <a href="ch10_10.htm">Example 10-4</a> is
available from the online Code Depot.</p>


<a name="ch10-84488" /><div class="example">
<h4 class="objtitle">Example 10-4. A data Event Preloader </h4>

<blockquote><pre class="code">onClipEvent (data) {
    trace("data received");           // The show's about to start!

    // Turn on data-transfer light
    _root.transferIndicator.gotoAndStop("on");

    // If we're done loading, turn off transfer light, and let the movie play
    if (getBytesTotal() &gt; 0 &amp;&amp; getBytesLoaded() == getBytesTotal( )) {
      _root.transferIndicator.gotoAndStop("off");
      play( );
    }

    // Display some loading details in text field variables on the _root
    _root.bytesLoaded = getBytesLoaded( );
    _<a name="INDEX-1247" />root.bytesTotal = getBytesTotal( );
    _<a name="INDEX-1248" />
<a name="INDEX-1249" />root.clipURL = _url.substring(_url.lastIndexOf("/") + 1, _url.length);
}<a name="INDEX-1250" />
<a name="INDEX-1251" /></pre></blockquote>
</div>
</div>
</div>


<hr width="684" align="left" />
<div class="navbar"><table width="684" border="0"><tr><td align="left" valign="top" width="228"><a href="ch10_09.htm"><img alt="Previous" border="0" src="../gifs/txtpreva.gif" /></a></td><td align="center" valign="top" width="228"><a href="index.htm"><img alt="Home" border="0" src="../gifs/txthome.gif" /></a></td><td align="right" valign="top" width="228"><a href="ch10_11.htm"><img alt="Next" border="0" src="../gifs/txtnexta.gif" /></a></td></tr><tr><td align="left" valign="top" width="228">10.9. Movie Clip Events Overview</td><td align="center" valign="top" width="228"><a href="index/index.htm"><img alt="Book Index" border="0" src="../gifs/index.gif" /></a></td><td align="right" valign="top" width="228">10.11. The User-Input Movie Clip Events</td></tr></table></div>
<hr width="684" align="left" />

<img alt="Library Navigation Links" border="0" src="../gifs/navbar.gif" usemap="#library-map" />
<p><font size="-1"><a href="copyrght.htm">Copyright &copy; 2002</a> O'Reilly &amp; Associates. All rights reserved.</font></p>

<map name="library-map"><area href="../index.htm" coords="0,1,78,93" shape="rect" /><area href="../wdesign/index.htm" coords="80,2,155,96" shape="rect" /><area href="../xhtml/index.htm" coords="158,0,263,97" shape="rect" /><area href="../audio/index.htm" coords="265,1,335,97" shape="rect" /><area href="../css/index.htm" coords="338,1,434,93" shape="rect" /><area href="index.htm" coords="439,0,540,102" shape="rect" /><area href="../infoarch/index.htm" coords="544,0,685,102" shape="rect" /></map>

</body></html>
