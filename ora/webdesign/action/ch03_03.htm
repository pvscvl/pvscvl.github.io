<html><head><title>Creating and Categorizing Data (ActionScript: The Definitive Guide)</title><link rel="stylesheet" type="text/css" href="../style/style1.css" />

<meta name="DC.Creator" content="Colin Moock" /><meta name="DC.Format" content="text/xml" scheme="MIME" /><meta name="DC.Language" content="en-US" /><meta name="DC.Publisher" content="O'Reilly &amp; Associates, Inc." /><meta name="DC.Source" scheme="ISBN" content="1565928520L" /><meta name="DC.Subject.Keyword" content="stuff" /><meta name="DC.Title" content="ActionScript: The Definitive Guide" /><meta name="DC.Type" content="Text.Monograph" />

</head><body bgcolor="#ffffff">

<img alt="Book Home" border="0" src="gifs/smbanner.gif" usemap="#banner-map" /><map name="banner-map"><area shape="rect" coords="1,-2,616,66" href="index.htm" alt="ActionScript: The Definitive Guide" /><area shape="rect" coords="629,-11,726,25" href="jobjects/fsearch.htm" alt="Search this book" /></map>

<div class="navbar"><table width="684" border="0"><tr><td align="left" valign="top" width="228"><a href="ch03_02.htm"><img alt="Previous" border="0" src="../gifs/txtpreva.gif" /></a></td><td align="center" valign="top" width="228"><a href="index.htm">ActionScript: The Definitive Guide</a></td><td align="right" valign="top" width="228"><a href="ch03_04.htm"><img alt="Next" border="0" src="../gifs/txtnexta.gif" /></a></td></tr></table></div>
<hr width="684" align="left" />


<h2 class="sect1">3.3. Creating and Categorizing Data</h2>


<p>There are two ways to <a name="INDEX-275" /> <a name="INDEX-276" />create a <a name="INDEX-277" />new datum with ActionScript, both methods
requiring the use of <em class="emphasis">expressions -- </em>phrases
of code that represent data in our scripts.</p>


<p>A <em class="emphasis">literal expression
</em><a name="INDEX-278" />
<a name="INDEX-279" />
<a name="INDEX-280" />(or
<em class="emphasis">literal</em> for short) is a series of letters,
numbers, and punctuation that <em class="emphasis">is</em> the datum. A
data literal is a verbatim description of data in a program's
source code. This contrasts with a variable, which is a container
that merely holds a datum. Each datatype defines its own rules for
the creation of literals. Here are some examples of literals:</p>


<blockquote><pre class="code">"loading...please wait"  // A string literal
1.51                     // A numeric literal
["jane", "jonathan"]     // An array literal</pre></blockquote>


<p>Note that movie clips cannot be represented by literals, but are
referred to by instance names.</p>


<p>We can also generate data programmatically with a <em class="emphasis">complex
expression</em>.<a name="INDEX-281" />
<a name="INDEX-282" />
Complex expressions represent data as a phrase of code with a value
that must be calculated or computed, not taken literally. The
calculated value is the datum being represented. For example, each of
these complex expressions results in a single datum:</p>


<blockquote><pre class="code">1999 + 1       // Yields the datum 2000
"hi " + "ma!"  // Yields the datum "hi ma!"
firstName      // Yields the value of the variable <em class="replaceable">firstName</em>
_currentframe  // Yields the frame number of the playhead's current position
new Date( )     // Yields a new <em class="replaceable">Date</em> object with the current date and time</pre></blockquote>


<p>Notice that an individual literal expression like 1999 or 1 can be a
valid part of a larger complex expression, as in <em class="emphasis">1999 +
1</em>.</p>


<p>Whether we use a literal expression or a complex expression to create
data, we must store every datum that we want to use later. The result
of the expression <tt class="literal">"hi" + "ma!"</tt> is lost unless we
store it, say, in a variable. For example:</p>


<blockquote><pre class="code">// This datum is fleeting, and dies immediately after it's created
"hi " + "ma";

// This datum is stored in a variable and can be
// accessed later via the variable <em class="replaceable">welcomeMessage</em>
var welcomeMessage = "hi " + "ma";</pre></blockquote>


<p>How do we <a name="INDEX-283" />categorize data into the appropriate type?
That is, how do we specify that a datum is a number, a string, an
array, or whatever? In most cases, we don't categorize new data
ourselves; the ActionScript interpreter automatically assigns or
infers each datum's type based on a set of internal rules.</p>


<a name="ch03-6-fm2xml" /><div class="sect2">
<h3 class="sect2">3.3.1. Automatic Literal Typing</h3>


<p>The interpreter
<a name="INDEX-284" /> <a name="INDEX-285" />infers a literal datum's type
by examining its
<a name="INDEX-286" />syntax, as explained in the
comments in the following code fragment:</p>


<blockquote><pre class="code">"animal"      // Quotation marks identify "animal" as a string
1.35          // If it contains only integers and a decimal, it is a number
true          // Special keyword <em class="replaceable">true</em> identifies this as a Boolean
null          // Special keyword <em class="replaceable">null</em> identifies this as the null type
undefined     // Special keyword <em class="replaceable">undefined</em> identifies the undefined type

["hello", 2, true]    // Square brackets and values separated by commas 
                      // indicate that this is an array

{x: 234, y: 456}      // Curly braces and property name/value pairs separated
                      // by commas indicate that this is an object</pre></blockquote>


<p>As you can see, using correct syntax with data literals is extremely
important. Incorrect syntax may cause an error or result in the
misinterpretation of a datum's content. For example:</p>


<blockquote><pre class="code">animal   // Missing quotes--<em class="replaceable">animal</em> is interpreted as a variable,
         // not a string of text
"1.35"   // Numbers in quotes are treated as strings, not numbers
1. 35    // Space before the 3 causes an error
"animal  // Missing closing quotation mark causes an error</pre></blockquote>
</div>




<a name="ch03-7-fm2xml" /><div class="sect2">
<h3 class="sect2">3.3.2. Automatic Complex Expression Typing</h3>


<p>The <a name="INDEX-287" />
<a name="INDEX-288" />interpreter computes an
expression's value in order to determine its datatype. Consider
this example:</p>


<blockquote><pre class="code">pointerX = _xmouse;</pre></blockquote>


<p>Because <tt class="literal">_xmouse</tt> stores the location of the mouse
pointer as a number, the type of the expression
<tt class="literal">_xmouse</tt> will always be a number, so the variable
<tt class="literal">pointerX</tt> also becomes a number.</p>


<p>Usually, the datatype automatically determined by the interpreter
matches what we expect and want. However, some ambiguous cases
require us to understand the rules that the interpreter uses to
determine an expression's datatype (see <a href="ch02_04.htm">Example 2-2</a> and <a href="ch02_04.htm">Example 2-3</a>). Consider
the following expression:</p>


<blockquote><pre class="code">"1" + 2;</pre></blockquote>


<p>The operand on the left of the <tt class="literal">+</tt> is a string
("1"), but the operand on the right is a number (2). The
<tt class="literal">+</tt> operator works on both numbers (addition) and
strings (concatenation). Should the value of the expression
<em class="emphasis">"1" + 2</em> be the number 3, or the string
"12"? To resolve the ambiguity, the interpreter relies on
a fixed rule: the plus operator (<tt class="literal">+</tt>) always favors
strings over numbers, so the expression <em class="emphasis">"1" + 2</em>
evaluates to the string "12", not the number 3. This rule
is arbitrary, but it provides a consistent way to interpret the code.
The rule was chosen with typical uses of the plus operator in mind:
if one of the operands is a string, it's likely that we want to
concatenate the operands, not add them numerically, as in this case:</p>


<blockquote><pre class="code">trace ("The value of x is: " + x);</pre></blockquote>


<p>Combining disparate types of data or using a datum in a context that
does not match the expected datatype causes ambiguity. This forces
the interpreter to perform an automatic datatype
<em class="emphasis">conversion</em> according to arbitrary, but
predictable, rules. Let's examine the cases in which automatic
conversions will occur and what the expected results are of
converting a datum from one <a name="INDEX-289" />type <a name="INDEX-290" />to <a name="INDEX-291" /> <a name="INDEX-292" />another.</p>
</div>


<hr width="684" align="left" />
<div class="navbar"><table width="684" border="0"><tr><td align="left" valign="top" width="228"><a href="ch03_02.htm"><img alt="Previous" border="0" src="../gifs/txtpreva.gif" /></a></td><td align="center" valign="top" width="228"><a href="index.htm"><img alt="Home" border="0" src="../gifs/txthome.gif" /></a></td><td align="right" valign="top" width="228"><a href="ch03_04.htm"><img alt="Next" border="0" src="../gifs/txtnexta.gif" /></a></td></tr><tr><td align="left" valign="top" width="228">3.2. Retaining Meaning with Datatypes</td><td align="center" valign="top" width="228"><a href="index/index.htm"><img alt="Book Index" border="0" src="../gifs/index.gif" /></a></td><td align="right" valign="top" width="228">3.4. Datatype Conversion</td></tr></table></div>
<hr width="684" align="left" />

<img alt="Library Navigation Links" border="0" src="../gifs/navbar.gif" usemap="#library-map" />
<p><font size="-1"><a href="copyrght.htm">Copyright &copy; 2002</a> O'Reilly &amp; Associates. All rights reserved.</font></p>

<map name="library-map"><area href="../index.htm" coords="0,1,78,93" shape="rect" /><area href="../wdesign/index.htm" coords="80,2,155,96" shape="rect" /><area href="../xhtml/index.htm" coords="158,0,263,97" shape="rect" /><area href="../audio/index.htm" coords="265,1,335,97" shape="rect" /><area href="../css/index.htm" coords="338,1,434,93" shape="rect" /><area href="index.htm" coords="439,0,540,102" shape="rect" /><area href="../infoarch/index.htm" coords="544,0,685,102" shape="rect" /></map>

</body></html>