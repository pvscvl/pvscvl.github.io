<html><head><title>Numeric Literals (ActionScript: The Definitive Guide)</title><link rel="stylesheet" type="text/css" href="../style/style1.css" />

<meta name="DC.Creator" content="Colin Moock" /><meta name="DC.Format" content="text/xml" scheme="MIME" /><meta name="DC.Language" content="en-US" /><meta name="DC.Publisher" content="O'Reilly &amp; Associates, Inc." /><meta name="DC.Source" scheme="ISBN" content="1565928520L" /><meta name="DC.Subject.Keyword" content="stuff" /><meta name="DC.Title" content="ActionScript: The Definitive Guide" /><meta name="DC.Type" content="Text.Monograph" />

</head><body bgcolor="#ffffff">

<img alt="Book Home" border="0" src="gifs/smbanner.gif" usemap="#banner-map" /><map name="banner-map"><area shape="rect" coords="1,-2,616,66" href="index.htm" alt="ActionScript: The Definitive Guide" /><area shape="rect" coords="629,-11,726,25" href="jobjects/fsearch.htm" alt="Search this book" /></map>

<div class="navbar"><table width="684" border="0"><tr><td align="left" valign="top" width="228"><a href="ch04_02.htm"><img alt="Previous" border="0" src="../gifs/txtpreva.gif" /></a></td><td align="center" valign="top" width="228"><a href="index.htm">ActionScript: The Definitive Guide</a></td><td align="right" valign="top" width="228"><a href="ch04_04.htm"><img alt="Next" border="0" src="../gifs/txtnexta.gif" /></a></td></tr></table></div>
<hr width="684" align="left" />


<h2 class="sect1">4.3. Numeric Literals</h2>


<p>We learned earlier that a <em class="emphasis">literal</em><a name="INDEX-377" />
<a name="INDEX-378" /> <a name="INDEX-379" />is a direct representation of a single,
fixed data value. The <em class="emphasis">number</em> type supports three
kinds of literals: integer literals, floating-point literals, and
special numeric values. The first two literal categories represent
<em class="emphasis">real numbers</em> (numbers that have a fixed
mathematical value); the third category comprises values that
represent numeric concepts such as infinity.</p>


<a name="ch04-3-fm2xml" /><div class="sect2">
<h3 class="sect2">4.3.1. Integer Literals</h3>


<p><a name="INDEX-380" />
<a name="INDEX-381" />
<a name="INDEX-382" />Integer literals such as 1, 2, 3, 99,
and -200, must follow these rules:</p>


<ul><li><p>Integers may not contain a decimal point or fractional value.</p></li><li><p>Integers must not exceed the minimum or maximum legal numeric values
of ActionScript. See also the <tt class="literal">MIN_VALUE</tt> and
<tt class="literal">MAX_VALUE</tt> properties of the
<em class="filename">Number</em> object in <a href="part3.htm">Part III, "Language Reference"</a>,
for a discussion of legal values.</p></li><li><p>Base-10 integer numbers must not start with a leading zero (e.g.,
002, 000023, and 05).</p></li></ul>
<p>Not all <a name="INDEX-383" />
<a name="INDEX-384" />
<a name="INDEX-385" />
<a name="INDEX-386" />
<a name="INDEX-387" />
<a name="INDEX-388" />integer
values are base-10 (i.e., decimal) integers. ActionScript also
supports base-8 (octal) and base-16 (hexadecimal) numeric literals.
For a primer on decimal, octal, and hexadecimal numbers, see:</p>


<blockquote class="simplelist">

<p><a href="../../../../../../www.moock.org/asdg/technotes">http://www.moock.org/asdg/technotes</a></p>

</blockquote>


<p>We use a leading zero to indicate an octal number. For example, to
represent the octal number 723 in ActionScript, we use:</p>


<blockquote><pre class="code">0723  // 467 in decimal (7*64 + 2*8 + 3*1)</pre></blockquote>


<p>To indicate a hexadecimal (<em class="emphasis">hex</em> for short)
literal integer, we put 0x (or 0X) in front of the number, such as:</p>


<blockquote><pre class="code">0x723  // 1827 in decimal (7*256 + 2*16 + 3*1)
0xFF   //  255 in decimal (15*16 + 15*1)</pre></blockquote>


<p>Hexadecimal numbers <a name="INDEX-389" />are often used to indicate color values,
but most simple programs require only base-10 numbers. Be careful to
remove unwanted leading zeros when converting strings to numbers, as
shown in <a href="ch04_03.htm">Example 4-1</a>.</p>


<a name="ch04-21498" /><div class="example">
<h4 class="objtitle">Example 4-1.  Trim Leading Zeros </h4>

<blockquote><pre class="code">function trimZeros(theString) {
  while (theString.charAt(0) == "0" || theString.charAt(0) == " ") {
    theString = theString.substring(1, theString.length);
  }
  return theString;
}

testString = "00377";
trace(trimZeros(testString));  // Displays: 377</pre></blockquote>
</div>
</div>




<a name="ch04-56354" /><div class="sect2">
<h3 class="sect2">4.3.2. Floating-Point Literals</h3>


<p><a name="INDEX-390" />
<a name="INDEX-391" />
<a name="INDEX-392" />Floating-point literals represent
numbers containing fractional parts. A floating-point literal may
contain some or all of these four components:</p>


<blockquote class="simplelist">

<p>a base-10 integer</p>

<p>a <a name="INDEX-393" />decimal point (.)</p>

<p>a fraction (represented as a base-10 number)</p>

<p>an <a name="INDEX-394" />exponent</p>

</blockquote>


<p>The first three components are pretty straightforward: in the number
3.14, "3" is the base-10 integer, "." is the
decimal point, and "14" is the fraction. But the fourth
component (the exponent) requires a closer look.</p>


<p>To represent a very large positive or negative number as a float, we
can attach an exponent to a number using the letter E (or e). To
determine the value of a number with an exponent, multiply the number
by 10 to the power specified by the exponent. For example:</p>


<blockquote><pre class="code">12e2    // 1200 (10 squared is 100, times 12 yields 1200)
143E-3  // 0.143 (10 to the power -3 is .001, times 143 yields 0.143)</pre></blockquote>


<p>You may recognize the format as standard scientific notation. If math
isn't your strong point, here's an easy conversion tip:
if the exponent is positive, move the decimal point that many places
to the right; if the exponent is negative, move the decimal point
that many places to the left.</p>


<p>Sometimes ActionScript will return a number with an exponent as the
result of a calculation if the result is a very large or very small
value. Note, however, that the exponent E (or e) is merely a
notational convenience. If we want to raise a number to an arbitrary
power, we use the built-in
<a name="INDEX-395" />
<a name="INDEX-396" />
<a name="INDEX-397" /><em class="filename">Math.pow(
)</em> function, which is documented in <a href="part3.htm">Part III, "Language Reference"</a>.</p>


<a name="ch04-4-fm2xml" /><div class="sect3">
<h3 class="sect3">4.3.2.1. Floating-point precision</h3>


<p>Flash <a name="INDEX-398" />uses
<em class="emphasis">double-precision</em><a name="INDEX-399" />
<a name="INDEX-400" />
<a name="INDEX-401" />
floating-point numbers, which offer precision to about 15 significant
digits. (Any leading zeros, trailing zeros, and/or exponents are not
counted as part of the 15 digits.) This means that Flash can
represent the number 123456789012345, but not 1234567890123456. The
precision doesn't limit how big a number can get, only how
precise a number can be represented; 2e16 is a bigger number than
123456789012345 but employs only one significant digit.</p>


<p>ActionScript calculations are occasionally rounded in undesirable
ways, producing numbers such as 0.14300000000000001 instead of 0.143.
This happens because computers convert numbers of any base to an
internal binary representation, which can lead to nonterminating
fractions in binary (much like 0.3333333 in decimal). Computers have
only finite precision, so they cannot perfectly represent
nonterminating fractions. In order to accommodate for the minute
discrepancy, you should round your numbers manually if the difference
will adversely affect the behavior of your code. For example, here we
round <tt class="literal">myNumber</tt> to three decimal places:</p>


<blockquote><pre class="code">myNumber = Math.round(myNumber * 1000) / 1000;</pre></blockquote>


<p>And here's a reusable function to round any number to an
arbitrary number of decimal places:</p>


<blockquote><pre class="code">function trim(theNumber, decPlaces) {
  if (decPlaces &gt;= 0) {
    var temp = Math.pow(10, decPlaces);
    return Math.round(theNumber * temp) / temp;
  }
}

// Round a number to two decimal places
<a name="INDEX-402" />trace(trim(1.12645, 2));  // Displays: 1.13</pre></blockquote>
</div>
</div>




<a name="ch04-92968" /><div class="sect2">
<h3 class="sect2">4.3.3. Special Values of the Number Datatype</h3>


<p>Integer and floating-point literals account for nearly all the legal
values of the number datatype, but there are special keyword values
that represent these numeric concepts: Not-a-Number, Minimum Allowed
Value, Maximum Allowed Value, Infinity, and Negative Infinity.</p>


<p>Each of the special values may be assigned to variables and
properties or used in literal expressions just like any other numeric
literal. More often than not, though, the special numeric values are
returned by the interpreter as the result of some expression
evaluation.</p>


<a name="ch04-5-fm2xml" /><div class="sect3">
<h3 class="sect3">4.3.3.1. Not-a-Number: NaN</h3>


<p>Occasionally, <a name="INDEX-403" /> <a name="INDEX-404" />a mathematical computation or an
attempted datatype conversion results in a value that is simply not a
number. For example, 0/0 is an impossible calculation, and the
following expression can't be converted to a finite number:</p>


<blockquote><pre class="code">23 - "go ahead and try!"</pre></blockquote>


<p>In order to accommodate data that is of the
<em class="emphasis">number</em> type but is not a real number,
ActionScript provides the <tt class="literal">NaN</tt> keyword value.
Though <tt class="literal">NaN</tt> doesn't represent a number, it is
still a legal value of the <em class="emphasis">number</em> type as
demonstrated by the following code:</p>


<blockquote><pre class="code">x = 0/0;
trace(x);         // Displays: NaN
trace(typeof x);  // Displays: "number"</pre></blockquote>


<p>Since <tt class="literal">NaN</tt> is not a finite numeric value, it never
compares as equal to itself. If two variables hold the value
<tt class="literal">NaN</tt>, they are considered not equal (though they
may seem equal to us). As a workaround to this problem, we use the
built-in function <em class="filename">isNaN( )
</em><a name="INDEX-405" />to check whether a variable contains
the <tt class="literal">NaN</tt> value:</p>


<blockquote><pre class="code">x = 12 - "this doesn't make much sense";  // <em class="replaceable">x</em> is now <em class="replaceable">NaN</em>
trace(isNaN(x));                          // Displays: true</pre></blockquote>
</div>



<a name="ch04-6-fm2xml" /><div class="sect3">
<h3 class="sect3">4.3.3.2. Minimum and maximum allowed values: MIN_VALUE and MAX_VALUE</h3>


<p><a name="INDEX-406" />ActionScript
<a name="INDEX-407" /> <a name="INDEX-408" />
<a name="INDEX-409" />
<a name="INDEX-410" />
<a name="INDEX-411" />represents a broad but not unlimited
range of numbers. The maximum allowable value is
1.7976931348623157e+308, and the minimum allowed value is 5e-324.
Obviously, those numbers are a bit inconvenient, so we use the
special values <tt class="literal">Number.MAX_VALUE</tt> and
<tt class="literal">Number.MIN_VALUE</tt> instead.</p>


<p><tt class="literal">Number.MAX_VALUE</tt> comes in handy when we are
checking to see if a calculation results in a representable positive
number:</p>


<blockquote><pre class="code">z = x*y;
if (z &lt;= Number.MAX_VALUE &amp;&amp; z &gt;= -Number.MAX_VALUE) {
  // Number is legal
}</pre></blockquote>


<p>Note that <tt class="literal">Number.MIN_VALUE</tt> is the smallest
<em class="emphasis">positive</em> value allowed, not the largest
<em class="emphasis">negative</em> value. The largest negative legal value
is <tt class="literal">-Number.MAX_VALUE</tt>.</p>
</div>



<a name="ch04-7-fm2xml" /><div class="sect3">
<h3 class="sect3">4.3.3.3. Infinity and negative infinity: Infinity and -Infinity</h3>


<p>If a <a name="INDEX-412" /> <a name="INDEX-413" /> <a name="INDEX-414" />calculation results in a value
larger than <tt class="literal">Number.MAX_VALUE</tt>, ActionScript will
use the keyword <tt class="literal">Infinity</tt> to represent the result
of the calculation. Similarly, if a calculation results in a value
more negative than the largest allowable negative value, ActionScript
uses <tt class="literal">-Infinity</tt> to represent the result.
<tt class="literal">Infinity</tt> and <tt class="literal">-Infinity</tt> may also
be used directly as literal numeric expressions.</p>
</div>



<a name="ch04-8-fm2xml" /><div class="sect3">
<h3 class="sect3">4.3.3.4. Irrational numbers</h3>


<p>In addition to the special numeric values <tt class="literal">NaN</tt>,
<tt class="literal">Infinity</tt>, <tt class="literal">-Infinity</tt>,
<tt class="literal">Number.MAX_VALUE</tt> and
<tt class="literal">Number.MIN_VALUE</tt>, ActionScript provides convenient
access to <a name="INDEX-415" />
<a name="INDEX-416" />
<a name="INDEX-417" />
<a name="INDEX-418" />mathematical
<a name="INDEX-419" />constants via the
<em class="filename">Math</em><a name="INDEX-420" /> object. For example:</p>


<blockquote><pre class="code">Math.E        // The value of E, the base of the natural logarithm
Math.LN10     // Natural logarithm of 10
Math.LN2      // Natural logarithm of 2
Math.LOG10E   // Base-10 logarithm of <em class="replaceable">e</em>
Math.LOG2E    // Base-2 logarithm of <em class="replaceable">e</em>
Math.PI       // Pi (i.e., 3.1415926...) 
Math.SQRT1_2  // Square root of 1/2
Math.SQRT2    // Square root of 2 (i.e., 1.4142135...)</pre></blockquote>


<p>The constants are simply shorthand forms of floating-point values
that approximate commonly used irrational numbers. You can use these
irrational numbers just as you would any other object property:</p>


<blockquote><pre class="code">area = Math.PI*(radius*radius);</pre></blockquote>


<p>For a complete list of supported constants, see the
<em class="filename">Math</em> object <a name="INDEX-421" /> <a name="INDEX-422" />in <a href="part3.htm">Part III, "Language Reference"</a>.</p>
</div>
</div>


<hr width="684" align="left" />
<div class="navbar"><table width="684" border="0"><tr><td align="left" valign="top" width="228"><a href="ch04_02.htm"><img alt="Previous" border="0" src="../gifs/txtpreva.gif" /></a></td><td align="center" valign="top" width="228"><a href="index.htm"><img alt="Home" border="0" src="../gifs/txthome.gif" /></a></td><td align="right" valign="top" width="228"><a href="ch04_04.htm"><img alt="Next" border="0" src="../gifs/txtnexta.gif" /></a></td></tr><tr><td align="left" valign="top" width="228">4.2. Integers and Floating-Point Numbers</td><td align="center" valign="top" width="228"><a href="index/index.htm"><img alt="Book Index" border="0" src="../gifs/index.gif" /></a></td><td align="right" valign="top" width="228">4.4. Working with Numbers</td></tr></table></div>
<hr width="684" align="left" />

<img alt="Library Navigation Links" border="0" src="../gifs/navbar.gif" usemap="#library-map" />
<p><font size="-1"><a href="copyrght.htm">Copyright &copy; 2002</a> O'Reilly &amp; Associates. All rights reserved.</font></p>

<map name="library-map"><area href="../index.htm" coords="0,1,78,93" shape="rect" /><area href="../wdesign/index.htm" coords="80,2,155,96" shape="rect" /><area href="../xhtml/index.htm" coords="158,0,263,97" shape="rect" /><area href="../audio/index.htm" coords="265,1,335,97" shape="rect" /><area href="../css/index.htm" coords="338,1,434,93" shape="rect" /><area href="index.htm" coords="439,0,540,102" shape="rect" /><area href="../infoarch/index.htm" coords="544,0,685,102" shape="rect" /></map>

</body></html>