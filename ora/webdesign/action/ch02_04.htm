<html><head><title>Types of Values (ActionScript: The Definitive Guide)</title><link rel="stylesheet" type="text/css" href="../style/style1.css" />

<meta name="DC.Creator" content="Colin Moock" /><meta name="DC.Format" content="text/xml" scheme="MIME" /><meta name="DC.Language" content="en-US" /><meta name="DC.Publisher" content="O'Reilly &amp; Associates, Inc." /><meta name="DC.Source" scheme="ISBN" content="1565928520L" /><meta name="DC.Subject.Keyword" content="stuff" /><meta name="DC.Title" content="ActionScript: The Definitive Guide" /><meta name="DC.Type" content="Text.Monograph" />

</head><body bgcolor="#ffffff">

<img alt="Book Home" border="0" src="gifs/smbanner.gif" usemap="#banner-map" /><map name="banner-map"><area shape="rect" coords="1,-2,616,66" href="index.htm" alt="ActionScript: The Definitive Guide" /><area shape="rect" coords="629,-11,726,25" href="jobjects/fsearch.htm" alt="Search this book" /></map>

<div class="navbar"><table width="684" border="0"><tr><td align="left" valign="top" width="228"><a href="ch02_03.htm"><img alt="Previous" border="0" src="../gifs/txtpreva.gif" /></a></td><td align="center" valign="top" width="228"><a href="index.htm">ActionScript: The Definitive Guide</a></td><td align="right" valign="top" width="228"><a href="ch02_05.htm"><img alt="Next" border="0" src="../gifs/txtnexta.gif" /></a></td></tr></table></div>
<hr width="684" align="left" />


<h2 class="sect1">2.4. Types of Values</h2>


<p>The <a name="INDEX-177" /> <a name="INDEX-178" />data we use in ActionScript programming
comes in a variety of types. So far we've seen numbers and
text, but other types include Booleans, arrays, functions, and
objects. Before we cover each datatype in detail, let's examine
some datatype issues that specifically relate to variable usage.</p>


<a name="ch02-10-fm2xml" /><div class="sect2">
<h3 class="sect2">2.4.1. Automatic Typing</h3>


<p>Any ActionScript
<a name="INDEX-179" /> <a name="INDEX-180" />variable can contain any type of
data, which may seem unremarkable, but the ability to store
<em class="emphasis">any</em> kind of data in <em class="emphasis">any</em>
variable is actually a bit unusual. Languages like C++ and Java use
<em class="emphasis">typed</em> variables; each variable can accept only
one type of data, which must be specified when the variable is
declared. ActionScript variables are
<em class="emphasis">automatically</em> typed -- when we assign data to
a variable, the interpreter sets the variable's datatype for
us.</p>


<p>Not only can ActionScript variables contain any datatype, they can
also <a name="INDEX-181" /> <a name="INDEX-182" />dynamically
<em class="emphasis">change</em> datatypes. If we assign a variable a new
value that has a different type than the variable's previous
value, the variable is automatically retyped. So the following code
is legal in ActionScript:</p>


<blockquote><pre class="code">x = 1;                   // <em class="replaceable">x</em> is a number
x = "Michael";           // <em class="replaceable">x</em> is now a string
x = [4, 6, "hello"];     // <em class="replaceable">x</em> is now an array
x = 2;                   // <em class="replaceable">x</em> is a number again</pre></blockquote>


<p>In languages like C++ or Java that do not support automatic retyping,
data of the wrong type would be converted to the variable's
existing datatype (or would cause an error if conversion could not be
performed). Automatic and dynamic typing have some important
ramifications that we'll consider in the following sections.</p>
</div>




<a name="ch02-11-fm2xml" /><div class="sect2">
<h3 class="sect2">2.4.2. Automatic Value Conversion</h3>


<p>In some contexts, ActionScript expects a specific type of data. If we
use a <a name="INDEX-183" />
<a name="INDEX-184" />
<a name="INDEX-185" />variable whose value does not match the
expected type, the interpreter attempts to convert the data. For
example, if we use a text variable where a number is needed, the
interpreter will try to convert the variable's text value to a
numeric value for the sake of the current operation. In <a href="ch02_04.htm">Example 2-2</a>, <tt class="literal">z</tt> is set to 2. Why?
Because the subtraction operator expects a number, so the value of
<tt class="literal">y</tt> is converted from the string "4" to
the number 4, which is subtracted from 6 (the value of
<tt class="literal">x</tt>), yielding the result 2.</p>


<a name="ch02-67092" /><div class="example">
<h4 class="objtitle">Example 2-2. Automatic String-to-Number Conversion </h4>

<blockquote><pre class="code">x = 6;      // <em class="replaceable">x</em> is a number, 6
y = "4";    // <em class="replaceable">y</em> is a string, "4"
z = x - y;  // This sets <em class="replaceable">z</em> to the number 2</pre></blockquote>
</div>


<p>Conversely, if we use a numeric variable where a string is expected,
the interpreter attempts to convert the number to a string. In <a href="ch02_04.htm">Example 2-3</a>, <tt class="literal">z</tt> is set to the string
"64", not the number 10. Why? Because the second operand
in the expression x + y is a string. Therefore, the
(<tt class="literal">+</tt>) performs string concatenation instead of
mathematical addition. The value of <tt class="literal">x</tt> (6 ) is
converted to the string "6" and then concatenated with
the string "4" (the value of <tt class="literal">y</tt>),
yielding the result "64".</p>


<a name="ch02-88869" /><div class="example">
<h4 class="objtitle">Example 2-3. Automatic Number-to-String Conversion </h4>

<blockquote><pre class="code">x = 6;      // <em class="replaceable">x</em> is a number, 6
y = "4";    // <em class="replaceable">y</em> is a string, "4"
z = x + y;  // This sets <em class="replaceable">z</em> to the string "64"</pre></blockquote>
</div>


<p>The automatic type conversion that occurs when evaluating a variable
as part of an expression is performed on a <em class="emphasis">copy</em>
of the variable's data -- it does not affect the original
variable's type. A variable's type changes only when the
variable is assigned a data value that does not match its previous
value's type. So at the conclusion of <a href="ch02_04.htm">Example 2-2</a> and <a href="ch02_04.htm">Example 2-3</a>,
<tt class="literal">y</tt> remains a string, and <tt class="literal">x</tt>
remains a number.</p>


<p>Notice that the operator on line 3 (<tt class="literal">-</tt> in <a href="ch02_04.htm">Example 2-2</a>, <tt class="literal">+</tt> in <a href="ch02_04.htm">Example 2-3</a>), has a profound impact on the value assigned
to <tt class="literal">z</tt>. In <a href="ch02_04.htm">Example 2-2</a> the string
"4" becomes the number 4, whereas in <a href="ch02_04.htm">Example 2-3</a> the opposite occurs (the number 6 becomes the
string "6"), because the rules for datatype conversion
are different for the <tt class="literal">+</tt> operator than for the
<tt class="literal">-</tt> operator. We'll cover data conversion
rules in <a href="ch03_01.htm">Chapter 3, "Data and Datatypes"</a>, and operators in <a href="ch05_01.htm">Chapter 5, "Operators"</a>.</p>
</div>




<a name="ch02-12-fm2xml" /><div class="sect2">
<h3 class="sect2">2.4.3. Determining the Type Manually</h3>


<p>Automatic <a name="INDEX-186" />
<a name="INDEX-187" /> <a name="INDEX-188" />datatyping and conversion can be
convenient, but as <a href="ch02_04.htm">Example 2-2</a> and <a href="ch02_04.htm">Example 2-3</a> illustrate, may also produce unexpected
results. Before performing commands that operate on mixed datatypes,
you may wish to determine a variable's datatype using the
<em class="filename">typeof</em> operator:</p>


<blockquote><pre class="code">productName = "Macromedia Flash";  // String value
trace(typeof productName);         // Displays: "string"</pre></blockquote>


<p>Once we know a variable's type, we can proceed conditionally.
Here, for example, we check whether a variable is a number before
proceeding:</p>


<blockquote><pre class="code">if (typeof age == "number"){
  // okay to carry on
} else {
  trace ("Age isn't a number");  // Display an error message
}</pre></blockquote>


<p>For full details on the <em class="filename">typeof</em> operator,
<a name="INDEX-189" />
<a name="INDEX-190" />see
<a href="ch05_01.htm">Chapter 5, "Operators"</a>.</p>
</div>


<hr width="684" align="left" />
<div class="navbar"><table width="684" border="0"><tr><td align="left" valign="top" width="228"><a href="ch02_03.htm"><img alt="Previous" border="0" src="../gifs/txtpreva.gif" /></a></td><td align="center" valign="top" width="228"><a href="index.htm"><img alt="Home" border="0" src="../gifs/txthome.gif" /></a></td><td align="right" valign="top" width="228"><a href="ch02_05.htm"><img alt="Next" border="0" src="../gifs/txtnexta.gif" /></a></td></tr><tr><td align="left" valign="top" width="228">2.3. Changing and Retrieving Variable Values</td><td align="center" valign="top" width="228"><a href="index/index.htm"><img alt="Book Index" border="0" src="../gifs/index.gif" /></a></td><td align="right" valign="top" width="228">2.5. Variable Scope</td></tr></table></div>
<hr width="684" align="left" />

<img alt="Library Navigation Links" border="0" src="../gifs/navbar.gif" usemap="#library-map" />
<p><font size="-1"><a href="copyrght.htm">Copyright &copy; 2002</a> O'Reilly &amp; Associates. All rights reserved.</font></p>

<map name="library-map"><area href="../index.htm" coords="0,1,78,93" shape="rect" /><area href="../wdesign/index.htm" coords="80,2,155,96" shape="rect" /><area href="../xhtml/index.htm" coords="158,0,263,97" shape="rect" /><area href="../audio/index.htm" coords="265,1,335,97" shape="rect" /><area href="../css/index.htm" coords="338,1,434,93" shape="rect" /><area href="index.htm" coords="439,0,540,102" shape="rect" /><area href="../infoarch/index.htm" coords="544,0,685,102" shape="rect" /></map>

</body></html>