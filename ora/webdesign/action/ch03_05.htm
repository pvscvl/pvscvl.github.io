<html><head><title>Primitive Data Versus Composite Data (ActionScript: The Definitive Guide)</title><link rel="stylesheet" type="text/css" href="../style/style1.css" />

<meta name="DC.Creator" content="Colin Moock" /><meta name="DC.Format" content="text/xml" scheme="MIME" /><meta name="DC.Language" content="en-US" /><meta name="DC.Publisher" content="O'Reilly &amp; Associates, Inc." /><meta name="DC.Source" scheme="ISBN" content="1565928520L" /><meta name="DC.Subject.Keyword" content="stuff" /><meta name="DC.Title" content="ActionScript: The Definitive Guide" /><meta name="DC.Type" content="Text.Monograph" />

</head><body bgcolor="#ffffff">

<img alt="Book Home" border="0" src="gifs/smbanner.gif" usemap="#banner-map" /><map name="banner-map"><area shape="rect" coords="1,-2,616,66" href="index.htm" alt="ActionScript: The Definitive Guide" /><area shape="rect" coords="629,-11,726,25" href="jobjects/fsearch.htm" alt="Search this book" /></map>

<div class="navbar"><table width="684" border="0"><tr><td align="left" valign="top" width="228"><a href="ch03_04.htm"><img alt="Previous" border="0" src="../gifs/txtpreva.gif" /></a></td><td align="center" valign="top" width="228"><a href="index.htm">ActionScript: The Definitive Guide</a></td><td align="right" valign="top" width="228"><a href="ch03_06.htm"><img alt="Next" border="0" src="../gifs/txtnexta.gif" /></a></td></tr></table></div>
<hr width="684" align="left" />


<h2 class="sect1">3.5. Primitive Data Versus Composite Data</h2>


<p>So <a name="INDEX-367" /> <a name="INDEX-368" />
<a name="INDEX-369" />far we've been working mostly
with numbers and strings, which are the most common
<em class="emphasis">primitive</em> datatypes. Primitive datatypes are the
basic units of a language; each primitive value contains a single
datum (as opposed to an array of multiple items) and describes that
datum literally. Primitive data is very straightforward.</p>


<p>ActionScript supports these primitive datatypes:
<em class="emphasis">number</em>, <em class="emphasis">string</em>,
<em class="emphasis">boolean</em>, <em class="emphasis">undefined</em>, and
<em class="emphasis">null</em>. ActionScript does not have a separate
single-character datatype (i.e., <em class="filename">char</em>) as found
in C/C++.</p>


<p>Primitive datatypes are, as their name suggests, simple. They can
hold text messages, frame numbers, movie clip size values, and so on,
but they don't readily accommodate higher levels of complexity.
For more elaborate data handling -- such as simulating the physics
of a dozen bouncing balls or managing a quiz with 500 questions and
answers -- we turn to <em class="emphasis">composite</em> datatypes.
Using composite data, we can manage multiple pieces of related data
as a single datum.</p>


<p>ActionScript supports the following composite datatypes:
<em class="emphasis">array</em>, <em class="emphasis">object</em>, and
<em class="emphasis">movieclip</em>. Functions are technically a type of
object and are therefore considered composite data, but we rarely
manipulate them as such. See <a href="ch09_01.htm">Chapter 9, "Functions"</a>, for more
about functions as a datatype.</p>


<p>Whereas a single number is a primitive datum, a list (i.e., an
<em class="emphasis">array</em>) of multiple numbers is a
<em class="emphasis">composite</em> datum. Here's a practical
example of how composite datatypes are useful: Suppose we wanted to
track the profile of a customer named Derek. We could create a series
of variables that store Derek's attributes as primitive values,
like this:</p>


<blockquote><pre class="code">var custName = "Derek";
var custTitle = "Coding Genius";
var custAge = 30;
var custPhone = "416-222-3333";</pre></blockquote>


<p>However, this format gets pretty cumbersome once we add even a few
more customers. We're forced to use sequentially named
variables to keep track of
everything -- <tt class="literal">cust1Name</tt>,
<tt class="literal">cust2Name</tt>, <tt class="literal">cust1Title</tt>,
<tt class="literal">cust2Title</tt>, and so on. Yuck! But if we use an
array, we can store our information much more efficiently:</p>


<blockquote><pre class="code">cust1 = ["Derek", "Coding Genius", 30, "416-222-3333"];</pre></blockquote>


<p>When we want to add more customers we just create new arrays:</p>


<blockquote><pre class="code">cust2 = ["Komlos", "Comic Artist", 28, "515-515-3333"];
cust3 = ["Porter", "Chef", 51, "515-999-3333"];</pre></blockquote>


<p>Nice and tidy. We'll learn much more about composite datatypes
in the coming chapters.</p>


<hr width="684" align="left" />
<div class="navbar"><table width="684" border="0"><tr><td align="left" valign="top" width="228"><a href="ch03_04.htm"><img alt="Previous" border="0" src="../gifs/txtpreva.gif" /></a></td><td align="center" valign="top" width="228"><a href="index.htm"><img alt="Home" border="0" src="../gifs/txthome.gif" /></a></td><td align="right" valign="top" width="228"><a href="ch03_06.htm"><img alt="Next" border="0" src="../gifs/txtnexta.gif" /></a></td></tr><tr><td align="left" valign="top" width="228">3.4. Datatype Conversion</td><td align="center" valign="top" width="228"><a href="index/index.htm"><img alt="Book Index" border="0" src="../gifs/index.gif" /></a></td><td align="right" valign="top" width="228">3.6. Onward!</td></tr></table></div>
<hr width="684" align="left" />

<img alt="Library Navigation Links" border="0" src="../gifs/navbar.gif" usemap="#library-map" />
<p><font size="-1"><a href="copyrght.htm">Copyright &copy; 2002</a> O'Reilly &amp; Associates. All rights reserved.</font></p>

<map name="library-map"><area href="../index.htm" coords="0,1,78,93" shape="rect" /><area href="../wdesign/index.htm" coords="80,2,155,96" shape="rect" /><area href="../xhtml/index.htm" coords="158,0,263,97" shape="rect" /><area href="../audio/index.htm" coords="265,1,335,97" shape="rect" /><area href="../css/index.htm" coords="338,1,434,93" shape="rect" /><area href="index.htm" coords="439,0,540,102" shape="rect" /><area href="../infoarch/index.htm" coords="544,0,685,102" shape="rect" /></map>

</body></html>