<html><head><title>Arithmetic Operators (ActionScript: The Definitive Guide)</title><link rel="stylesheet" type="text/css" href="../style/style1.css" />

<meta name="DC.Creator" content="Colin Moock" /><meta name="DC.Format" content="text/xml" scheme="MIME" /><meta name="DC.Language" content="en-US" /><meta name="DC.Publisher" content="O'Reilly &amp; Associates, Inc." /><meta name="DC.Source" scheme="ISBN" content="1565928520L" /><meta name="DC.Subject.Keyword" content="stuff" /><meta name="DC.Title" content="ActionScript: The Definitive Guide" /><meta name="DC.Type" content="Text.Monograph" />

</head><body bgcolor="#ffffff">

<img alt="Book Home" border="0" src="gifs/smbanner.gif" usemap="#banner-map" /><map name="banner-map"><area shape="rect" coords="1,-2,616,66" href="index.htm" alt="ActionScript: The Definitive Guide" /><area shape="rect" coords="629,-11,726,25" href="jobjects/fsearch.htm" alt="Search this book" /></map>

<div class="navbar"><table width="684" border="0"><tr><td align="left" valign="top" width="228"><a href="ch05_02.htm"><img alt="Previous" border="0" src="../gifs/txtpreva.gif" /></a></td><td align="center" valign="top" width="228"><a href="index.htm">ActionScript: The Definitive Guide</a></td><td align="right" valign="top" width="228"><a href="ch05_04.htm"><img alt="Next" border="0" src="../gifs/txtnexta.gif" /></a></td></tr></table></div>
<hr width="684" align="left" />


<h2 class="sect1">5.3. Arithmetic Operators</h2>


<p>The <a name="INDEX-689" /> <a name="INDEX-690" />arithmetic
operators perform mathematical operations on numeric operands. If you
use non-numeric operands with the arithmetic operators, ActionScript
will attempt to convert the foreign data to a number. For example,
<tt class="literal">false - true</tt> evaluates to -1 because
<tt class="literal">false</tt> converts to the numeric value
and <tt class="literal">true</tt> converts to 1. Similarly, the expression
<tt class="literal">"3" * "5"</tt> results in the number 15, because the
strings "3" and "5" are converted to the
numbers 3 and 5 before the multiplication is performed. The
<tt class="literal">+</tt> operator, however, presents a special case: when
used with at least one string operand, it performs a string
concatenation operation, not mathematical addition.</p>


<p>If <a name="INDEX-691" />
<a name="INDEX-692" />
<a name="INDEX-693" />an attempt to
convert a non-numeric operand to a number fails, the operand will be
set to the special numeric value <tt class="literal">NaN</tt>. This results
in the entire operation yielding <tt class="literal">NaN</tt>. Refer to
<a href="ch03_04.htm">Table 3-1</a> for details on numeric conversion.</p>


<a name="ch05-11-fm2xml" /><div class="sect2">
<h3 class="sect2">5.3.1. Addition</h3>


<p>The <a name="INDEX-694" /> <a name="INDEX-695" /> <a name="INDEX-696" /> <a name="INDEX-697" /><em class="emphasis">addition</em>
operator returns the sum of its two operands:</p>


<blockquote><pre class="code"><em class="replaceable">operand1</em> + <em class="replaceable">operand2</em></pre></blockquote>


<p>In order to return a meaningful mathematical result, the operands of
<tt class="literal">+</tt> should be expressions that yield a numeric
value, such as:</p>


<blockquote><pre class="code">234 + 5          // Returns 239
(2 * 3 * 4) + 5  // Returns 29</pre></blockquote>


<p>The addition operator is unique among the arithmetic operators in
that if one or both of its operands are strings, it performs as a
string concatenation. Refer to <a href="ch04_06.htm">Section 4.6.1, "Joining Strings Together"</a> in
<a href="ch04_01.htm">Chapter 4, "Primitive Datatypes"</a>.</p>
</div>




<a name="ch05-12-fm2xml" /><div class="sect2">
<h3 class="sect2">5.3.2. Increment</h3>


<p>A <a name="INDEX-698" />
<a name="INDEX-699" />handy variation on addition, the
<em class="emphasis">increment</em> operator accepts a single operand and
simply adds 1 to its current value. Increment has two general forms,
called <em class="emphasis">prefix</em><a name="INDEX-700" />
<em class="emphasis">increment</em> and <em class="emphasis">postfix
increment</em>,<a name="INDEX-701" /> as follows:</p>


<blockquote><pre class="code">++<em class="replaceable">operand</em>    // Prefix increment
<em class="replaceable">operand</em>++<em class="replaceable">    </em>// Postfix increment</pre></blockquote>


<p>In both forms, increment adds 1 to a variable, array element, or
object property, such as:</p>


<blockquote><pre class="code">var x = 1;
x = x + 1;  // <em class="replaceable">x</em> is now 2 (the verbose syntax)
x++;        // Add 1: <em class="replaceable">x </em>is now 3
++x;        // Add 1: <em class="replaceable">x</em> is now 4</pre></blockquote>


<p>When used in isolation, there is no difference between postfix and
prefix increment, although postfix increment is more common by
convention.</p>


<p>However, when used in larger expressions, postfix and prefix
increment have different behaviors: prefix increment adds 1 to
<em class="replaceable">operand</em> and returns the value of
<em class="replaceable">operand + 1</em>; postfix increment adds 1 to
<em class="replaceable">operand</em> but returns the value of
<em class="replaceable">operand</em> itself, not <em class="replaceable">operand +
1</em>:</p>


<blockquote><pre class="code">var x = 1;
// Postfix increment: <em class="replaceable">y</em> is set to 1, then <em class="replaceable">x</em> is incremented to 2
var y = x++;

var x = 1;
// Prefix increment: <em class="replaceable">x</em> is incremented first, so <em class="replaceable">y</em> is set to 2
var y = ++x;</pre></blockquote>


<p>We'll revisit the increment operators in <a href="ch08_01.htm">Chapter 8, "Loop Statements"</a>.</p>
</div>




<a name="ch05-13-fm2xml" /><div class="sect2">
<h3 class="sect2">5.3.3. Subtraction</h3>


<p>The <a name="INDEX-702" /> <a name="INDEX-703" />
<a name="INDEX-704" /><em class="emphasis">subtraction</em>
operator subtracts the second operand from the first operand. It
takes the general form:</p>


<blockquote><pre class="code"><em class="replaceable">operand1</em> - <em class="replaceable">operand2</em></pre></blockquote>


<p>The operands may be any valid expression. If either operand is not of
the <em class="emphasis">number</em> type and conversion to a real number
fails, the operation yields <tt class="literal">NaN</tt>:</p>


<blockquote><pre class="code">234 - 5  // Yields 229
5 - 234  // Yields -229</pre></blockquote>


<p>To determine the absolute (i.e., positive) difference between two
numbers, see the <em class="emphasis">Math.abs( )</em> method in <a href="part3.htm">Part III, "Language Reference"</a>.</p>
</div>




<a name="ch05-14-fm2xml" /><div class="sect2">
<h3 class="sect2">5.3.4. Decrement</h3>


<p>The <em class="emphasis">decrement</em><a name="INDEX-705" /> <a name="INDEX-706" /> operator is analogous to the increment
operator, but subtracts 1 from its operand's current value
instead of adding 1. Like increment, decrement has two general forms,
called <em class="emphasis">prefix
decrement</em><a name="INDEX-707" /> and <em class="emphasis">postfix
decrement</em><a name="INDEX-708" />, as follows:</p>


<blockquote><pre class="code">--<em class="replaceable">operand</em>  // Prefix decrement
<em class="replaceable">operand</em>--<em class="replaceable">  </em>// Postfix decrement</pre></blockquote>


<p>In both forms, it is used to subtract 1 from a variable, array
element, or object property. Prefix decrement subtracts 1 from
<em class="replaceable">operand</em> and returns the value of
<em class="replaceable">operand</em> <tt class="literal">-</tt>
<tt class="literal">1</tt>; postfix decrement subtracts 1 from
<em class="replaceable">operand</em> but returns the value of
<em class="replaceable">operand</em> itself, not
<em class="replaceable">operand</em> <tt class="literal">-</tt>
<tt class="literal">1</tt>. As with the increment operators, the form of
decrement used matters only if the operand is part of a larger
expression:</p>


<blockquote><pre class="code">var x = 10;
var y;
x = x - 1;    // <em class="replaceable">x</em> is now 9
x--;          // <em class="replaceable">x</em> is now 8
--x;          // <em class="replaceable">x</em> is now 7
y = --x;      // <em class="replaceable">y</em> is now 6, <em class="replaceable">x</em> is now 6
y = x--;      // <em class="replaceable">y</em> is still 6, <em class="replaceable">x</em> is now 5</pre></blockquote>
</div>




<a name="ch05-15-fm2xml" /><div class="sect2">
<h3 class="sect2">5.3.5. Multiplication</h3>


<p>The <a name="INDEX-709" /> <a name="INDEX-710" /><em class="emphasis">multiplication</em>
operator multiplies two numeric operands and returns the result
(i.e., the <em class="emphasis">product</em>). Multiplication takes the
general form:</p>


<blockquote><pre class="code"><em class="replaceable">operand1</em> * <em class="replaceable">operand2</em></pre></blockquote>


<p>The operands may be any valid expression. The <tt class="literal">*</tt>
symbol used for multiplication is in lieu of the <tt class="literal">X</tt>
("times") symbol used in traditional mathematics. If
either operand is not of the <em class="emphasis">number</em> type, and
conversion to a real number fails, the operation yields
<tt class="literal">NaN</tt>:</p>


<blockquote><pre class="code">6 * 5  // Returns 30</pre></blockquote>
</div>




<a name="ch05-16-fm2xml" /><div class="sect2">
<h3 class="sect2">5.3.6. Division</h3>


<p>The <a name="INDEX-711" />
<a name="INDEX-712" /><em class="emphasis">division</em> operator
divides the first operand (the
<em class="emphasis">numerator</em>)<a name="INDEX-713" />
<a name="INDEX-714" /> by the second
operand (the <em class="emphasis">divisor</em>) and returns the result
(the <em class="emphasis">quotient</em>). Division takes the general form:</p>


<blockquote><pre class="code"><em class="replaceable">operand1</em> / <em class="replaceable">operand2</em></pre></blockquote>


<p>The operands must be valid numeric expressions. The
<tt class="literal">/</tt> symbol used for division is in lieu of the
&divide; symbol used in traditional mathematics. If either operand is
not of the <em class="emphasis">number</em> type, and conversion to a real
number fails, the operation yields <tt class="literal">NaN</tt>. If
necessary to express a fractional result, the quotient is a
floating-point number even if both operands are integers:</p>


<blockquote><pre class="code">20 / 5  // Returns 4
5 / 4   // Returns 1.25; In other languages, the result may be 1, not 1.25</pre></blockquote>


<p>Note that some other languages, such as Director's Lingo
language, return an integer unless at least one operand is a float.</p>


<p>If the divisor is zero, the result is <tt class="literal">Infinity</tt>. If
there is any possibility of the divisor being zero, check its value
before performing the division, such as:</p>


<blockquote><pre class="code">if (numItems != 0) {
  trace ("Average is" + total / numItems);
else
  trace ("There are no items for which to calculate the average");
}</pre></blockquote>


<p>Note that in some languages, attempting to divide by zero causes an
error.</p>
</div>




<a name="ch05-17-fm2xml" /><div class="sect2">
<h3 class="sect2">5.3.7. Modulo Division</h3>


<p>The <em class="emphasis">modulo</em><a name="INDEX-715" /> <a name="INDEX-716" /> operator performs so-called
<em class="emphasis">modulo division</em>. It returns the remainder (i.e.,
<em class="emphasis">modulus</em>) that results when the first operand is
divided by the second. Modulo division takes the general form:</p>


<blockquote><pre class="code"><em class="replaceable">operand1</em> % <em class="replaceable">operand2</em></pre></blockquote>


<p>For example <tt class="literal">14 % 4</tt> returns the value 2 because 4
divides evenly into 14 three times, with 2 being the remainder.</p>


<p>The operands of modulo may be any valid numeric expression, including
integers and (unlike C and C++) floating-point numbers. For example,
<tt class="literal">5 % 4</tt> is 1, and <tt class="literal">5 % 4.5</tt> is 0.5.
If either operand is not of the <em class="emphasis">number</em> type, and
conversion to a real number fails, the operation yields
<tt class="literal">NaN</tt>.</p>


<p>If a number is even, the modulo will be zero when we divide the
number by two. We can use the trick shown in <a href="ch05_03.htm">Example 5-1</a> to test whether a number is even or odd.</p>


<a name="ch05-99724" /><div class="example">
<h4 class="objtitle">Example 5-1. Using Modulo Division to Test for Even Numbers </h4>

<blockquote><pre class="code">var x = 3;
if (x%2 == 0) {
  trace("x is even");
} else {
  trace("x is odd");
}</pre></blockquote>
</div>
</div>




<a name="ch05-18-fm2xml" /><div class="sect2">
<h3 class="sect2">5.3.8. Unary Negation</h3>


<p>The <em class="emphasis">unary negation</em><a name="INDEX-717" /> <a name="INDEX-718" /> operator takes only one
operand. It switches the operand's sign (that is, positive
becomes negative, negative becomes positive). Unary negation takes
the general form:</p>


<blockquote><pre class="code">-<em class="replaceable">operand</em></pre></blockquote>


<p>The operand may be any valid expression. Here we test whether
something's horizontal position is greater than the positive
limit or less than the negative limit:</p>


<blockquote><pre class="code">if (xPos &gt; xBoundary || xPos &lt; -xBoundary){
  // We've gone too far
}</pre></blockquote>
<a name="INDEX-719" />
<a name="INDEX-720" />
</div>


<hr width="684" align="left" />
<div class="navbar"><table width="684" border="0"><tr><td align="left" valign="top" width="228"><a href="ch05_02.htm"><img alt="Previous" border="0" src="../gifs/txtpreva.gif" /></a></td><td align="center" valign="top" width="228"><a href="index.htm"><img alt="Home" border="0" src="../gifs/txthome.gif" /></a></td><td align="right" valign="top" width="228"><a href="ch05_04.htm"><img alt="Next" border="0" src="../gifs/txtnexta.gif" /></a></td></tr><tr><td align="left" valign="top" width="228">5.2. The Assignment Operator</td><td align="center" valign="top" width="228"><a href="index/index.htm"><img alt="Book Index" border="0" src="../gifs/index.gif" /></a></td><td align="right" valign="top" width="228">5.4. The Equality and Inequality Operators</td></tr></table></div>
<hr width="684" align="left" />

<img alt="Library Navigation Links" border="0" src="../gifs/navbar.gif" usemap="#library-map" />
<p><font size="-1"><a href="copyrght.htm">Copyright &copy; 2002</a> O'Reilly &amp; Associates. All rights reserved.</font></p>

<map name="library-map"><area href="../index.htm" coords="0,1,78,93" shape="rect" /><area href="../wdesign/index.htm" coords="80,2,155,96" shape="rect" /><area href="../xhtml/index.htm" coords="158,0,263,97" shape="rect" /><area href="../audio/index.htm" coords="265,1,335,97" shape="rect" /><area href="../css/index.htm" coords="338,1,434,93" shape="rect" /><area href="index.htm" coords="439,0,540,102" shape="rect" /><area href="../infoarch/index.htm" coords="544,0,685,102" shape="rect" /></map>

</body></html>