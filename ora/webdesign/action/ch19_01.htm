<html><head><title>Debugging (ActionScript: The Definitive Guide)</title><link rel="stylesheet" type="text/css" href="../style/style1.css" />

<meta name="DC.Creator" content="Colin Moock" /><meta name="DC.Format" content="text/xml" scheme="MIME" /><meta name="DC.Language" content="en-US" /><meta name="DC.Publisher" content="O'Reilly &amp; Associates, Inc." /><meta name="DC.Source" scheme="ISBN" content="1565928520L" /><meta name="DC.Subject.Keyword" content="stuff" /><meta name="DC.Title" content="ActionScript: The Definitive Guide" /><meta name="DC.Type" content="Text.Monograph" />

</head><body bgcolor="#ffffff">

<img alt="Book Home" border="0" src="gifs/smbanner.gif" usemap="#banner-map" /><map name="banner-map"><area shape="rect" coords="1,-2,616,66" href="index.htm" alt="ActionScript: The Definitive Guide" /><area shape="rect" coords="629,-11,726,25" href="jobjects/fsearch.htm" alt="Search this book" /></map>

<div class="navbar"><table width="684" border="0"><tr><td align="left" valign="top" width="228"><a href="ch18_08.htm"><img alt="Previous" border="0" src="../gifs/txtpreva.gif" /></a></td><td align="center" valign="top" width="228"><a href="index.htm">ActionScript: The Definitive Guide</a></td><td align="right" valign="top" width="228"><a href="ch19_02.htm"><img alt="Next" border="0" src="../gifs/txtnexta.gif" /></a></td></tr></table></div>
<hr width="684" align="left" />



<h1 class="chapter">Chapter 19. Debugging</h1>
<div class="htmltoc"><h4 class="tochead">Contents:</h4><p>
<a href="ch19_01.htm">Debugging Tools</a><br />
<a href="ch19_02.htm">Debugging Methodology</a><br />
<a href="ch19_03.htm">Onward!</a><br /></p></div>


<p>So <a name="INDEX-2276" />
<a name="INDEX-2277" />
<a name="INDEX-2278" /> <a name="INDEX-2279" />far we've explored a lot of
techniques and also the syntax to accomplish many goals. Inevitably,
however, when you begin writing your own ActionScript, you'll
encounter innumerable errors (especially at first when you are still
making syntax and conceptual errors). Do not lose heart! Even
experienced programmers spend a lot of time
<em class="emphasis">debugging</em> (fixing broken code).</p>


<p>It is important that you test your product thoroughly so that you can
find the bugs in the first place. This means testing in various
browser brands and versions of those brands on all platforms that you
intend to support. Test under different flavors of Windows and, if
applicable, older versions of the Flash plug-in, which you can find
at:</p>


<blockquote class="simplelist">

<p><a href="../../../../../../www.macromedia.com/support/flash/ts/documents/oldplayers.htm">http://www.macromedia.com/support/flash/ts/documents/oldplayers.htm</a></p>

</blockquote>


<p>A discussion of testing and quality assurance (QA) is beyond the
scope of this book. Suffice to say that you should have a testing and
QA process in place and a bug report form on which you can receive
reports with sufficient detail (such as the platform, browser
version, Flash plug-in version, and reproducible steps) for you to
reproduce the error, which is the first step toward fixing it.</p>


<p>Debugging is an essential part of programming and what sets great
programmers apart from average ones. Beginners are often happy if a
bug that was seen earlier inexplicably disappears. Experienced
programmers know that the bug will undoubtedly resurface at the most
inopportune time, and although it is intermittent (perhaps especially
so), it warrants further investigation. On the other hand,
inexperienced programmers tend to shy away from error messages or be
unnerved by obvious errors, whereas skilled programmers rely heavily
on error messages and know that easily reproducible errors are the
easiest kind to fix.</p>


<p>Successful debugging requires logical, disciplined investigative
skills and a decent understanding of troubleshooting tools. In this
chapter, we'll briefly consider the basics of debugging tools
and some general techniques for solving code problems. Remember that
debugging is characterized by the systematic challenging of our
assumptions. Any given problem is often caused by some other problem
upstream (i.e., the disease). We'll use the debugging tools to
investigate whether things are in fact operating as designed, and
that will lead to an understanding and resolution of the manifest bug
(i.e., the symptom).</p>


<div class="sect1"><a name="ch19-2-fm2xml" />
<h2 class="sect1">19.1. Debugging Tools</h2>


<p>ActionScript comes equipped with the following <a name="INDEX-2280" />debugging
tools:</p>


<ul><li><p>The <em class="filename">trace( )</em> function</p></li><li><p>The List Variables command</p></li><li><p>The List Objects command</p></li><li><p>The Bandwidth Profiler</p></li><li><p>The Debugger</p></li></ul>
<p>All of these tools are used in <a name="INDEX-2281" />Test Movie mode. To enter Test Movie mode,
we export a movie from the authoring tool using Control <img align="absmiddle" src="figs/U2192.gif" /> Test
Movie.</p>


<p>In addition to these formal debugging tools, Flash also sends
<a name="INDEX-2282" />error
messages to the <a name="INDEX-2283" />Output window when a movie is exported or
<a name="INDEX-2284" />Check
Syntax is performed. (Check Syntax is a command listed under the
arrow button in the top right of the Actions panel.) Error messages
often identify the exact cause of a problem down to the problematic
line number in a block of source code. Comprehensive explanations for
the various error messages are provided in Macromedia's
ActionScript Reference Guide.</p>


<p>Note that not all bugs cause error messages. For example, a
calculation that yields the wrong result is a bug even if it
doesn't crash your browser. Also note that there are two types
of error messages, so-called
<em class="emphasis">compile-time</em><a name="INDEX-2285" /> error messages that occur when
you try to export your scripts and so-called
<em class="emphasis">runtime</em><a name="INDEX-2286" /> error messages that don't occur
until you run your Flash movie and reach the point that causes the
error. Compile-time errors indicate some sort of syntax problem such
as a missing parenthesis or unclosed quotation. Refer to <a href="part3.htm">Part III, "Language Reference"</a>, for the exact syntax needed for each
command, and refer to <a href="ch14_01.htm">Chapter 14, "Lexical Structure"</a>, for an
explanation of proper ActionScript syntax.</p>


<p>Runtime errors can take a wide variety of forms and may not indicate
a problem with the current code under examination but rather may be
caused by using the incorrect result of an earlier operation. For
example, suppose you try to use the values received back from a
<em class="filename">loadVariables( )</em> command sent to a web server.
If the Perl script responding to the command didn't supply the
correct data in the correct format, you need to correct the Perl
script. Your Flash script may be perfectly correct and yet fail
because it received incorrect input.</p>


<p>Which brings up an important technique -- defensive programming.
You can avoid a lot of errors and potential errors by always checking
for potential problematic conditions, which is known as
<em class="emphasis">error checking</em><a name="INDEX-2287" /> (or sometimes <em class="emphasis">data
validation</em><a name="INDEX-2288" /> if it pertains to user input). For
example, before trying to display the questions of a quiz, you might
check that those questions loaded properly. You might also check each
question to be sure it's in the correct format for display. If
the provided data was improperly entered, you should display an
appropriate error message that allows the programmer or the user to
take corrective action.</p>


<a name="ch19-3-fm2xml" /><div class="sect2">
<h3 class="sect2">19.1.1. The trace( ) Function</h3>


<p>In <a name="INDEX-2289" />ActionScript, one of the most effective
tools for identifying the source of a bug is also one of the
simplest -- the <em class="filename">trace( )</em> function. As
we've seen throughout this book, <em class="filename">trace( )</em>
sends the value of an expression to the Output window in Test Movie
mode. For example, if we add the following code to a movie:</p>


<blockquote><pre class="code">trace("hello world");</pre></blockquote>


<p>the text "hello world" appears in the Output
window.<em class="filename"> </em>Similarly, here we <em class="filename">trace(
)</em> the value of a variable:</p>


<blockquote><pre class="code">var x = 5;
trace(x);  // Displays 5 in the Output window</pre></blockquote>


<p>Using <em class="filename">trace( )</em> we may check the status of
variables, properties, and objects, and we may track the progression
of our code. Often by confirming the result of each operation in a
script, we can figure out where a problem lies. For example, suppose
a function is supposed to return a value but we find, using the
<em class="filename">trace( )</em> command, that the return value is
<tt class="literal">undefined</tt><em class="emphasis"> </em>(i.e., it prints
out as nothing in the Output window). We'd know that we have to
examine the function in more detail and make sure that it is properly
using a <em class="filename">return</em> command to pass back a meaningful
value.</p>
</div>




<a name="ch19-4-fm2xml" /><div class="sect2">
<h3 class="sect2">19.1.2. The List Variables Command</h3>


<p>When <a name="INDEX-2290" />
<a name="INDEX-2291" />a movie is running in Test Movie mode,
we can check the value of current variables defined in the movie via
the Debug <img align="absmiddle" src="figs/U2192.gif" /> List Variables command. List Variables tells us the
name and location of all the variables currently active in our movie
and also reports their values. Because functions and movie clips are
stored in variables, the List Variables command also shows us the
functions and movie clips of a movie.</p>


<p><a href="ch19_01.htm">Example 19-1</a> shows sample output from List Variables.
Notice that the variable <tt class="literal">rate</tt> is shown as declared
but <tt class="literal">undefined</tt>. This subtlety is often difficult to
detect with <em class="filename">trace( )</em> because <em class="filename">trace(
)</em> converts the value <tt class="literal">undefined</tt> to the
empty string (<tt class="literal">""</tt>).</p>


<a name="ch19-56020" /><div class="example">
<h4 class="objtitle">Example 19-1. List Variables Sample Output </h4>

<blockquote><pre class="code">Level #0: 
  Variable _level0.$version = "WIN 5,0,30,0"
  Variable _level0.calcDist = [function]
  Variable _level0.deltaX = 194
  Variable _level0.deltaY = 179
  Variable _level0.rate = undefined
  Variable _level0.dist = 264
Movie Clip:  Target="_level0.clip1"
Movie Clip:  Target="_level0.clip2"</pre></blockquote>
</div>


<p>Note that both <em class="filename">trace( )</em> and the List Variables
command give only a snapshot in time. Often, you'll want to
monitor the value of a variable over time or check it repeatedly. The
Debugger (discussed later) allows you to track the value of a
variable as it changes.</p>
</div>




<a name="ch19-5-fm2xml" /><div class="sect2">
<h3 class="sect2">19.1.3. The List Objects Command</h3>


<p>The <a name="INDEX-2292" />List Objects command produces a catalog of
text, shapes, graphics, and movie clips defined in a movie. To
execute it, select Debug <img align="absmiddle" src="figs/U2192.gif" /> List Objects while in Test Movie
mode. Note that List Objects does not include a list of data objects
(instances of a class) in a program; those are reported by List
Variables.</p>


<p><a href="ch19_01.htm">Example 19-2</a> shows some sample output from List
Objects. Notice that editable text fields are clearly labeled and
that automatically named movie clip instances are revealed (e.g.,
<tt class="literal">_level0.instance1</tt>).</p>


<a name="ch19-65512" /><div class="example">
<h4 class="objtitle">Example 19-2. List Objects Sample Output </h4>

<blockquote><pre class="code">Level #0: Frame=1
  Shape:
  Text: Value = "variables functions clip events startDrag stopDrag Math"
  Text: Value = "this movie demonstrates a little math, variables, movie clip events"
  Text: Value = "draggable distance"
  Text: Value = "calculator"
  Movie Clip: Frame=1 Target="_level0.instance1"
    Shape:
  Text: Value = "distance between clipstotal:horizontal:vertical:"
  Edit Text: Variable=_level0.dist Text="222"
  Edit Text: Variable=_level0.deltaX Text="174"
  Edit Text: Variable=_level0.deltaY Text="138"
  Movie Clip: Frame=1 Target="_level0.obj1"
    Shape:
  Movie Clip: Frame=1 Target="_level0.obj2"
    Shape:</pre></blockquote>
</div>


<p>Again, List Objects provides only a snapshot in time. You need to run
it again to get the current value of objects whenever they may have
changed.</p>
</div>




<a name="ch19-32658" /><div class="sect2">
<h3 class="sect2">19.1.4. The Bandwidth Profiler</h3>


<p>The <a name="INDEX-2293" />Bandwidth
<a name="INDEX-2294" />Profiler is used to
simulate movie download at various modem speeds. Using the Bandwidth
Profiler, we may gauge the performance of a movie, test preloading
code, and track the position of the main movie's playhead
during movie playback. Here's how to turn the Bandwidth
Profiler on:</p>


<ol><li><p>While in Test Movie mode, select View <img align="absmiddle" src="figs/U2192.gif" /> Bandwidth Profiler.</p></li><li><p>Under the Debug menu, select the desired download rate.</p></li><li><p>To simulate the download of a movie at that rate, select View <img align="absmiddle" src="figs/U2192.gif" />
Show Streaming.</p></li></ol>
<p>There are many things that can affect Flash performance, such as the
assets in use and the rendering demands on the Player. For example,
using large bitmaps, rendering complex shapes with many curves, and
excessive use of alpha channels can all degrade performance. Asset
downloading and rendering times usually dwarf the bandwidth and
processor time required for ActionScript to execute. That said,
ActionScript is generally much slower than compiled languages such as
C.</p>


<p>From an ActionScript perspective, the most time-consuming operations
are those that either must wait for data to be uploaded or downloaded
or those that are performed repetitively (such as examining a large
array).</p>

<a name="ch19-6-fm2xml" /><blockquote><h4>WARNING</h4>
<p>Displaying items in the Output window is very slow compared to
"invisible" operations in ActionScript. If a simple movie
seems excessively choppy, try disabling all <em class="filename">trace(
)</em> statements, or play the movie outside <a name="INDEX-2295" />Test Movie mode.</p>

</blockquote>

<p>A discussion of writing <a name="INDEX-2296" />
<a name="INDEX-2297" />optimized code is beyond the
scope of this book, but some quick tips should suffice:</p>


<ul><li><p>Don't perform an operation repeatedly within a loop if it can
be performed once outside of a loop with no loss of functionality.</p></li><li><p>Don't wait in a loop for some event to occur. The event may
take a long time or may never occur, causing your performance to slow
or your application to lock up entirely. Instead, rely on event
handlers, such as <em class="emphasis">on (load)</em> to be triggered when
an event occurs or completes.</p></li><li><p>Generalize your code wherever possible (perhaps even use Smart Clips
to do so). This reduces the size of the code that needs to be
downloaded. For example, instead of writing two nearly identical
routines that are each 5 KB long, you can save 5 KB by writing one
generalized routine and calling it twice with different parameters.
(Generalizing code is explained in <a href="ch09_01.htm">Chapter 9, "Functions"</a>, and
Smart Clips are explained in <a href="ch16_01.htm">Chapter 16, "ActionScript Authoring Environment"</a>).</p></li><li><p>If you're using the Flash 5 Player and optimized ActionScript
performance is critical to your project, try using old-style Flash 4
syntax instead of newer techniques. In Flash 5, certain operations
are faster when phrased with Flash 4 syntax. For example, Flash
4's <em class="filename">substring( )</em> function is faster than
Flash 5's <em class="filename">substring( )</em> and
<em class="filename">substr( )</em> methods, and Flash 4's
<em class="filename">Tell Target</em> is faster than Flash 5's dot
notation.</p></li><li><p>Export your movies without <em class="filename">trace( )</em> statements
by selecting Publish Settings <img align="absmiddle" src="figs/U2192.gif" /> Flash <img align="absmiddle" src="figs/U2192.gif" /> Options <img align="absmiddle" src="figs/U2192.gif" /> Omit
Trace Actions.</p></li><li><p>Remember that removing and reattaching a clip is more costly than
moving an existing one; reuse your movie assets whenever possible.</p></li><li><p>For a list of general Flash optimization techniques, see <a href="../../../../../../www.macromedia.com/support/flash/publishexport/stream_optimize/stream_optimize.html">http://www.macromedia.com/support/flash/publishexport/stream_optimize/stream_optimize.html</a>.</p></li></ul>
</div>




<a name="ch19-7-fm2xml" /><div class="sect2">
<h3 class="sect2">19.1.5. The Debugger</h3>


<p>The <a name="INDEX-2298" />
<a name="INDEX-2299" />Debugger
is a highly useful tool that gives us organized access to the values
of properties, objects, and variables in a movie and even allows us
to change variable values at runtime.</p>


<p>To enable the Debugger, select Control <img align="absmiddle" src="figs/U2192.gif" /> Debug Movie in the
Flash authoring tool (<em class="emphasis">not</em> in Test Movie mode).
You may also use the Debugger in a web browser, provided that:</p>


<ul><li><p>The movie being viewed was originally exported with debugging
permitted.</p></li><li><p>The Player being used to view the movie is a debugging Player.</p></li><li><p>The Flash authoring tool is running when you attempt to debug.</p></li></ul>
<p>To export a movie with in-browser debugging permitted, select File
<img align="absmiddle" src="figs/U2192.gif" /> Publish Settings <img align="absmiddle" src="figs/U2192.gif" /> Flash <img align="absmiddle" src="figs/U2192.gif" /> Debugging Permitted, then
optionally provide a password to prevent prying eyes from snooping
around your code. To install a debugging Player in your browser, use
the installers provided in the <em class="filename">/Players/Debug /</em>
folder where you installed Flash on your hard drive. To enable
debugging while viewing a movie, right-click in Windows (Ctrl-click
on Macintosh) on the movie and select Debugger.</p>




<a name="ch19-9-fm2xml" /><blockquote><h4>TIP</h4>
<p>Not all versions of the Flash Player have a corresponding debugging
Player. Check Macromedia's support site for the newest versions
of the debugging Player,<a href="../../../../../../www.macromedia.com/support/flash">http://www.macromedia.com/support/flash</a>.</p>

</blockquote>

<p>The top half of the Debugger (the Display List) shows the movie clip
hierarchy of the movie. To inspect the properties and variables of a
specific movie clip, select it in the Display List. The bottom half
of the Debugger contains three tabs, Properties, Variables, and
Watch, which update dynamically to show the properties and variables
for the selected clip. To set the value of any property or variable,
double-click its value and enter the new data. To single out one or
more items for convenient scrutiny, select them in the Properties or
Variables tab, then choose Add Watch from the arrow button in the
upper-right corner of the Debugger. All "watched"
variables are added to the Watch tab (this lets us view variables in
different movie clips simultaneously).</p>


<p>For more information about the mechanics of using the Flash Debugger,
consult Macromedia's thorough documentation under
"Troubleshooting ActionScript" in the ActionScript
Reference Guide. If you've lost your Reference Guide, remember
that it's available on Macromedia's web site at
<a href="../../../../../../www.macromedia.com/support/flash">http://www.macromedia.com/support/flash</a> and
also under the Help menu in the Flash authoring <a name="INDEX-2300" />tool.</p>
</div>
</div>






















<hr width="684" align="left" />
<div class="navbar"><table width="684" border="0"><tr><td align="left" valign="top" width="228"><a href="ch18_08.htm"><img alt="Previous" border="0" src="../gifs/txtpreva.gif" /></a></td><td align="center" valign="top" width="228"><a href="index.htm"><img alt="Home" border="0" src="../gifs/txthome.gif" /></a></td><td align="right" valign="top" width="228"><a href="ch19_02.htm"><img alt="Next" border="0" src="../gifs/txtnexta.gif" /></a></td></tr><tr><td align="left" valign="top" width="228">18.8. Onward!</td><td align="center" valign="top" width="228"><a href="index/index.htm"><img alt="Book Index" border="0" src="../gifs/index.gif" /></a></td><td align="right" valign="top" width="228">19.2. Debugging Methodology</td></tr></table></div>
<hr width="684" align="left" />

<img alt="Library Navigation Links" border="0" src="../gifs/navbar.gif" usemap="#library-map" />
<p><font size="-1"><a href="copyrght.htm">Copyright &copy; 2002</a> O'Reilly &amp; Associates. All rights reserved.</font></p>

<map name="library-map"><area href="../index.htm" coords="0,1,78,93" shape="rect" /><area href="../wdesign/index.htm" coords="80,2,155,96" shape="rect" /><area href="../xhtml/index.htm" coords="158,0,263,97" shape="rect" /><area href="../audio/index.htm" coords="265,1,335,97" shape="rect" /><area href="../css/index.htm" coords="338,1,434,93" shape="rect" /><area href="index.htm" coords="439,0,540,102" shape="rect" /><area href="../infoarch/index.htm" coords="544,0,685,102" shape="rect" /></map>

</body></html>
