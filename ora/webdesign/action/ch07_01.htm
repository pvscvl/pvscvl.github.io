<html><head><title>Conditionals (ActionScript: The Definitive Guide)</title><link rel="stylesheet" type="text/css" href="../style/style1.css" />

<meta name="DC.Creator" content="Colin Moock" /><meta name="DC.Format" content="text/xml" scheme="MIME" /><meta name="DC.Language" content="en-US" /><meta name="DC.Publisher" content="O'Reilly &amp; Associates, Inc." /><meta name="DC.Source" scheme="ISBN" content="1565928520L" /><meta name="DC.Subject.Keyword" content="stuff" /><meta name="DC.Title" content="ActionScript: The Definitive Guide" /><meta name="DC.Type" content="Text.Monograph" />

</head><body bgcolor="#ffffff">

<img alt="Book Home" border="0" src="gifs/smbanner.gif" usemap="#banner-map" /><map name="banner-map"><area shape="rect" coords="1,-2,616,66" href="index.htm" alt="ActionScript: The Definitive Guide" /><area shape="rect" coords="629,-11,726,25" href="jobjects/fsearch.htm" alt="Search this book" /></map>

<div class="navbar"><table width="684" border="0"><tr><td align="left" valign="top" width="228"><a href="ch06_05.htm"><img alt="Previous" border="0" src="../gifs/txtpreva.gif" /></a></td><td align="center" valign="top" width="228"><a href="index.htm">ActionScript: The Definitive Guide</a></td><td align="right" valign="top" width="228"><a href="ch07_02.htm"><img alt="Next" border="0" src="../gifs/txtnexta.gif" /></a></td></tr></table></div>
<hr width="684" align="left" />



<h1 class="chapter">Chapter 7. Conditionals</h1>
<div class="htmltoc"><h4 class="tochead">Contents:</h4><p>
<a href="ch07_01.htm">The if Statement</a><br />
<a href="ch07_02.htm">The else Statement</a><br />
<a href="ch07_03.htm">The else if Statement</a><br />
<a href="ch07_04.htm">Simulating the switch Statement</a><br />
<a href="ch07_05.htm">Compact Conditional Syntax</a><br />
<a href="ch07_06.htm">Onward!</a><br /></p></div>


<p>Most <a name="INDEX-871" />of
the code examples we've seen so far have been very
<em class="emphasis">linear</em><em class="filename"> -- </em>each statement
is executed in turn, starting with the first and ending with the
last. Linear code always does the same thing. A
<em class="emphasis">conditional</em>, by contrast, is a type of statement
that performs an action only when a specified condition is met. In
linear code, the interpreter might execute statement A, then
statement B, then statement C. With conditional statements we can
tell the interpreter to execute statement A, then execute
<em class="emphasis">either</em> statement B <em class="emphasis">or</em>
statement C, depending on condition X.</p>


<p>We can use conditionals to create and control situations that have
more than one potential outcome. For example, suppose we want to
create a password-protected site. When users attempt to log in,
either the password is correct and the user is allowed to enter the
site, or the password is wrong and the user sees an error message.
The two outcomes require two very different blocks of code in our
movie's script. One block needs to send the Flash playhead to a
frame containing the site's welcome screen, and the other block
needs to send the playhead to a frame with an error message. But only
one of the blocks should be executed when the user attempts to log
in. A conditional statement allows us to execute the appropriate
block and skip the inappropriate one.</p>


<p>How does the interpreter know which code block to execute? When we
define a conditional statement, we specify the condition that must be
met in order for the <em class="emphasis">first</em> block of code to be
executed. If the condition is not met, an alternate block of code may
be executed (and that alternate block may, in turn, have its own
condition). Essentially, we set up flowchart-like logic in our
program that, in pseudocode, reads like this:</p>


<blockquote><pre class="code">if (<em class="replaceable">the first condition is met</em>) {
  // Execute this code
} else if (<em class="replaceable">the second condition is met</em>) {
  // Execute this code
} ...otherwise {
  // Execute this code
}</pre></blockquote>


<p>Of course, we must describe each condition in terms the interpreter
understands. Not a problem -- that's just a question of
syntax, which we'll learn next. Conceptually, all conditionals
either allow or suppress the execution of a code block based on the
specified condition. Now let's see how conditionals work in
practice.</p>


<div class="sect1"><a name="ch07-2-fm2xml" />
<h2 class="sect1">7.1. The if Statement</h2>


<p>The <em class="filename">if</em><a name="INDEX-872" /> statement is your everyday,
all-purpose conditional. We use <em class="filename">if</em> to create a
two-pronged branch in our code, like a fork in the road. The
<em class="filename">if</em> statement contains one or more
<a name="INDEX-873" />
<a name="INDEX-874" />substatements that are executed only when
the specified condition is met. The <em class="filename">if</em> statement
has the following syntax:</p>


<blockquote><pre class="code">if (<em class="replaceable">condition</em>) {
  <em class="replaceable">substatements</em>
}</pre></blockquote>


<p>An <em class="filename">if</em> statement starts, not surprisingly, with
the keyword <tt class="literal">if</tt>. The
<em class="replaceable">condition</em> that must be satisfied for
<em class="replaceable">substatements</em> to be executed is enclosed
in parentheses. The <em class="replaceable">substatements</em> are one
or more ActionScript statements. Each substatement should be on its
own line and terminated with a semicolon. The entire
<em class="filename">if</em> statement ends with a closing curly brace,
(<tt class="literal">}</tt>), without a trailing semicolon.</p>


<p>The <em class="replaceable">condition</em> of our
<em class="filename">if</em> statement can be any valid expression. When
an <em class="filename">if</em> statement is executed, the interpreter
checks the value of that expression (called the <em class="emphasis">test
expression</em>). If it is <tt class="literal">true</tt>, the
<em class="replaceable">substatements</em> are executed. Otherwise, the
<em class="replaceable">substatements</em> are not executed. Here we
use simple Boolean values as the test expression:</p>


<blockquote><pre class="code">if (true) {          
  trace("The condition was met!");  // This statement will be executed
}
if (false) {         
  trace("The condition was met!");  // This statement is never executed
}</pre></blockquote>


<p>Of course, there's no practical reason to use Boolean literals
as test expressions because their values never change. Instead,
we'll use <a name="INDEX-875" />complex expressions that
<em class="emphasis">return</em> Boolean values. For example, expressions
that involve a comparison operation return a Boolean value, which
makes them perfect for conditional test expressions:</p>


<blockquote><pre class="code">var pointerX = _xmouse;  // Horizontal location of the mouse

// If <em class="replaceable">pointerX</em> &gt; 300 yields <em class="replaceable">true</em>...
if (pointerX &gt; 300) {
  // ...this statement is executed
  trace("The mouse is past the 300 pixel mark");  
}</pre></blockquote>


<p>Now for the cool part: the test expression of a conditional
doesn't necessarily have to evaluate to a Boolean -- any
expression will do. We can use a string or a number as the test
expression of a conditional:</p>


<blockquote><pre class="code">if ("hi") {
  trace("The condition was met!");
}
if (4) {
  trace("The condition was met!");
}</pre></blockquote>


<p>How <a name="INDEX-876" />
<a name="INDEX-877" />
<a name="INDEX-878" />does this work
if the expressions "hi" and 4 are not Booleans? The
answer lies in the marvels of datatype conversion as shown in <a href="ch03_04.htm">Table 3-3</a>. When the test expression of a conditional
statement is not a Boolean value, the interpreter converts the
expression to a Boolean. For example, the interpreter converts
"hi" to <tt class="literal">false</tt> because all non-numeric
strings convert to <tt class="literal">false</tt> when used in a Boolean
context. So the condition is not met and the first <em class="filename">trace (
)</em> statement is not executed. Similarly, the interpreter
converts the number 4 to <tt class="literal">true</tt> (any nonzero number
converts to <tt class="literal">true</tt>), so the second <em class="filename">trace (
)</em> statement is executed.</p>


<p>All our earlier work learning about datatype conversion has paid off!
Here are some basic applied examples. Try to guess whether each
substatement will be executed:</p>


<blockquote><pre class="code">x = 3;
if (x) {
  trace("x is not zero");
}</pre></blockquote>


<p>This example uses the OR operator, described in <a href="ch05_01.htm">Chapter 5, "Operators"</a>:</p>


<blockquote><pre class="code">lastName = "";
firstName = "";
if (firstName != "" || lastName != "") {  
  trace("Welcome " + firstName + " " + lastName);
}</pre></blockquote>


<p>Finally, we test whether a movie clip object exists:</p>


<blockquote><pre class="code">if (myClip) {
  myClip._x = 0;  // If <em class="replaceable">myClip</em> exists, put it on
                  // the left edge of the Stage 
}</pre></blockquote>
</div>




















































<hr width="684" align="left" />
<div class="navbar"><table width="684" border="0"><tr><td align="left" valign="top" width="228"><a href="ch06_05.htm"><img alt="Previous" border="0" src="../gifs/txtpreva.gif" /></a></td><td align="center" valign="top" width="228"><a href="index.htm"><img alt="Home" border="0" src="../gifs/txthome.gif" /></a></td><td align="right" valign="top" width="228"><a href="ch07_02.htm"><img alt="Next" border="0" src="../gifs/txtnexta.gif" /></a></td></tr><tr><td align="left" valign="top" width="228">6.5. Onward!</td><td align="center" valign="top" width="228"><a href="index/index.htm"><img alt="Book Index" border="0" src="../gifs/index.gif" /></a></td><td align="right" valign="top" width="228">7.2. The else Statement</td></tr></table></div>
<hr width="684" align="left" />

<img alt="Library Navigation Links" border="0" src="../gifs/navbar.gif" usemap="#library-map" />
<p><font size="-1"><a href="copyrght.htm">Copyright &copy; 2002</a> O'Reilly &amp; Associates. All rights reserved.</font></p>

<map name="library-map"><area href="../index.htm" coords="0,1,78,93" shape="rect" /><area href="../wdesign/index.htm" coords="80,2,155,96" shape="rect" /><area href="../xhtml/index.htm" coords="158,0,263,97" shape="rect" /><area href="../audio/index.htm" coords="265,1,335,97" shape="rect" /><area href="../css/index.htm" coords="338,1,434,93" shape="rect" /><area href="index.htm" coords="439,0,540,102" shape="rect" /><area href="../infoarch/index.htm" coords="544,0,685,102" shape="rect" /></map>

</body></html>