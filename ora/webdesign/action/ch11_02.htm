<html><head><title>The Anatomy of an Array (ActionScript: The Definitive Guide)</title><link rel="stylesheet" type="text/css" href="../style/style1.css" />

<meta name="DC.Creator" content="Colin Moock" /><meta name="DC.Format" content="text/xml" scheme="MIME" /><meta name="DC.Language" content="en-US" /><meta name="DC.Publisher" content="O'Reilly &amp; Associates, Inc." /><meta name="DC.Source" scheme="ISBN" content="1565928520L" /><meta name="DC.Subject.Keyword" content="stuff" /><meta name="DC.Title" content="ActionScript: The Definitive Guide" /><meta name="DC.Type" content="Text.Monograph" />

</head><body bgcolor="#ffffff">

<img alt="Book Home" border="0" src="gifs/smbanner.gif" usemap="#banner-map" /><map name="banner-map"><area shape="rect" coords="1,-2,616,66" href="index.htm" alt="ActionScript: The Definitive Guide" /><area shape="rect" coords="629,-11,726,25" href="jobjects/fsearch.htm" alt="Search this book" /></map>

<div class="navbar"><table width="684" border="0"><tr><td align="left" valign="top" width="228"><a href="ch11_01.htm"><img alt="Previous" border="0" src="../gifs/txtpreva.gif" /></a></td><td align="center" valign="top" width="228"><a href="index.htm">ActionScript: The Definitive Guide</a></td><td align="right" valign="top" width="228"><a href="ch11_03.htm"><img alt="Next" border="0" src="../gifs/txtnexta.gif" /></a></td></tr></table></div>
<hr width="684" align="left" />


<h2 class="sect1">11.2. The Anatomy of an Array</h2>


<p>Each <a name="INDEX-1341" />item stored in an array is called an array
<em class="emphasis">element</em>, and each has a unique number
(<em class="filename">index</em>) by which we can refer to it.</p>


<a name="ch11-4-fm2xml" /><div class="sect2">
<h3 class="sect2">11.2.1. Array Elements</h3>


<p>Like a
<a name="INDEX-1342" />variable,
each array element can store any legal datum. An entire array, then,
is akin to a collection of sequentially named variables, but instead
of each item having a different name, it has an element number (the
first element is number 0, not number 1).</p>


<p><a href="ch11_02.htm">Figure 11-1</a> shows, conceptually, the structure of an
array that contains three elements. Element
stores the value "Erica", element 1 stores the value
"Slavik", and element 2 stores the value
"Gary".</p>


<a name="ch11-58749" /><div class="figure"><img alt="Figure 11-1" src="figs/act.1101.gif" /></div><h4 class="objtitle">Figure 11-1. A sample array structure</h4>

<p>To manipulate the values in an array's elements, we ask for
them by number. In our chest of drawers analogy we might ask
ActionScript to store something in the first drawer or retrieve
whatever is in the second drawer for us.</p>
</div>




<a name="ch11-5-fm2xml" /><div class="sect2">
<h3 class="sect2">11.2.2. Array Element Indexing</h3>


<p>An element's position in the array is known as its
<em class="emphasis">index</em>. Just as we can access the seventh
character in a string, we can access the seventh element of an array
via its index (in this case, the index is 6). We use an
element's index to set or retrieve the element's value or
to work with the element in various other ways. Some of the
array-handling functions, for example, use element indexes to specify
ranges of elements for processing.</p>


<p>We can also insert and delete elements from the beginning, end, or
even middle of an array. An array can have gaps (that is, some
elements may be absent). We may have elements at positions
and 4, but nothing in positions 1, 2, and 3. Arrays with gaps are
called <em class="emphasis">sparse</em> arrays.</p>
</div>




<a name="ch11-6-fm2xml" /><div class="sect2">
<h3 class="sect2">11.2.3. Array Size</h3>


<p>Every array contains a specific number of elements at any given point
during its life span. The number of potential elements an array can
hold is called the array's <em class="filename">length</em>, which
we'll discuss later.</p>


<a name="ch11-7-fm2xml" /><blockquote><table border="1" cellpadding="6"><tr><td>
<h4 class="objtitle">Arrays in Other Programming Languages</h4>


<p>Almost <a name="INDEX-1343" />
<a name="INDEX-1344" />
<a name="INDEX-1345" />every high-level computer language
supports some sort of arrays or array-like entities. That said, there
are differences in the ways arrays are implemented across different
languages. For example, many languages do not allow arrays to contain
differing types of data. In many languages, an array can contain
numbers or strings, but not both in the same array. Interestingly, in
C, there is no primitive <em class="filename">string</em> datatype.
Instead, C has a single-character datatype named <em class="filename">char
</em>; strings are considered a complex datatype and are
implemented as an array of <em class="filename">char</em> s!</p>


<p>In ActionScript, the size of an array will change automatically as
items are added or removed. In many languages, the size of an array
must be specified when the array is first
<em class="emphasis">declared</em> or <em class="emphasis">dimensioned
</em>(i.e., memory is <em class="emphasis">allocated</em> to hold
the array's data). Lingo, the scripting language for Macromedia
Director, refers to its arrays by the name
<em class="emphasis">lists</em>. Like ActionScript, Lingo allows arrays to
contain data values of differing types, and it will resize its arrays
automatically as needed. Unlike ActionScript and C, in which the
first item in an array is numbered
(i.e., is <em class="emphasis">zero-relative</em>), the first item in a
Lingo list is numbered 1 (i.e., is
<em class="emphasis">one-relative</em>).</p>


<p>Languages differ as to what happens when you attempt to access an
element outside the bounds (limits) of the array. ActionScript and
Lingo will add elements if you attempt to set a value for an element
beyond the existing bounds of the array. If you attempt to access an
element outside the array bounds, ActionScript returns
<tt class="literal">undefined</tt>, whereas it causes an error in Lingo. C
pays no attention to whether you are accessing a valid element
number. It lets you retrieve and set elements outside the bounds of
the array, which usually causes you to overwrite other data in memory
or access meaningless data that is not part of the array (C gives you
plenty of rope with which to hang yourself).</p>

</td></tr></table></blockquote>
</div>


<hr width="684" align="left" />
<div class="navbar"><table width="684" border="0"><tr><td align="left" valign="top" width="228"><a href="ch11_01.htm"><img alt="Previous" border="0" src="../gifs/txtpreva.gif" /></a></td><td align="center" valign="top" width="228"><a href="index.htm"><img alt="Home" border="0" src="../gifs/txthome.gif" /></a></td><td align="right" valign="top" width="228"><a href="ch11_03.htm"><img alt="Next" border="0" src="../gifs/txtnexta.gif" /></a></td></tr><tr><td align="left" valign="top" width="228">11. Arrays</td><td align="center" valign="top" width="228"><a href="index/index.htm"><img alt="Book Index" border="0" src="../gifs/index.gif" /></a></td><td align="right" valign="top" width="228">11.3. Creating Arrays</td></tr></table></div>
<hr width="684" align="left" />

<img alt="Library Navigation Links" border="0" src="../gifs/navbar.gif" usemap="#library-map" />
<p><font size="-1"><a href="copyrght.htm">Copyright &copy; 2002</a> O'Reilly &amp; Associates. All rights reserved.</font></p>

<map name="library-map"><area href="../index.htm" coords="0,1,78,93" shape="rect" /><area href="../wdesign/index.htm" coords="80,2,155,96" shape="rect" /><area href="../xhtml/index.htm" coords="158,0,263,97" shape="rect" /><area href="../audio/index.htm" coords="265,1,335,97" shape="rect" /><area href="../css/index.htm" coords="338,1,434,93" shape="rect" /><area href="index.htm" coords="439,0,540,102" shape="rect" /><area href="../infoarch/index.htm" coords="544,0,685,102" shape="rect" /></map>

</body></html>