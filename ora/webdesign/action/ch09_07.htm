<html><head><title>Function Scope (ActionScript: The Definitive Guide)</title><link rel="stylesheet" type="text/css" href="../style/style1.css" />

<meta name="DC.Creator" content="Colin Moock" /><meta name="DC.Format" content="text/xml" scheme="MIME" /><meta name="DC.Language" content="en-US" /><meta name="DC.Publisher" content="O'Reilly &amp; Associates, Inc." /><meta name="DC.Source" scheme="ISBN" content="1565928520L" /><meta name="DC.Subject.Keyword" content="stuff" /><meta name="DC.Title" content="ActionScript: The Definitive Guide" /><meta name="DC.Type" content="Text.Monograph" />

</head><body bgcolor="#ffffff">

<img alt="Book Home" border="0" src="gifs/smbanner.gif" usemap="#banner-map" /><map name="banner-map"><area shape="rect" coords="1,-2,616,66" href="index.htm" alt="ActionScript: The Definitive Guide" /><area shape="rect" coords="629,-11,726,25" href="jobjects/fsearch.htm" alt="Search this book" /></map>

<div class="navbar"><table width="684" border="0"><tr><td align="left" valign="top" width="228"><a href="ch09_06.htm"><img alt="Previous" border="0" src="../gifs/txtpreva.gif" /></a></td><td align="center" valign="top" width="228"><a href="index.htm">ActionScript: The Definitive Guide</a></td><td align="right" valign="top" width="228"><a href="ch09_08.htm"><img alt="Next" border="0" src="../gifs/txtnexta.gif" /></a></td></tr></table></div>
<hr width="684" align="left" />


<h2 class="sect1">9.7. Function Scope</h2>


<p>ActionScript <a name="INDEX-1040" />statements <a name="INDEX-1041" />have
<a name="INDEX-1042" />a certain <em class="emphasis">scope</em>, or area
of effect within which they are valid. When a statement is attached
to a movie clip, that statement's scope is limited to the clip
that bears it. For example, here we refer to a variable,
<tt class="literal">score</tt>, in an assignment statement:</p>


<blockquote><pre class="code">score = 10;</pre></blockquote>


<p>If that statement were attached to <tt class="literal">clipA</tt>, then the
interpreter would set the value of <tt class="literal">score</tt> in
<tt class="literal">clipA</tt>, because the statement is
"scoped" to <tt class="literal">clipA</tt>. If that statement
were attached to <tt class="literal">clipB</tt>, the interpreter would set
the value of <tt class="literal">score</tt> in <tt class="literal">clipB</tt>,
because the statement is scoped to <tt class="literal">clipB</tt>. The
location of the statement determines its scope, and, hence, its
effect.</p>


<p>Statements in the body of a function operate in their own, separate
scope, called a <em class="emphasis">local scope</em>.<a name="INDEX-1043" />
<a name="INDEX-1044" /> A function's local scope is like a
private phone booth for the function, distinct from the scope of the
clip or object to which the function is attached. The local scope of
a function is created when the function is invoked and destroyed when
the function finishes executing. When resolving variables referenced
in the statements of the function body, the interpreter looks first
in the function's scope.</p>


<p>Function
<a name="INDEX-1045" />parameters, for example, are
defined in the <em class="emphasis">local</em> scope of a
function -- not the scope of the timeline that bears the function.
Parameters, hence, are accessible to the statements of a
function's body only while the function is running. Statements
outside the function have no access to the function's
parameters.</p>


<p>A function's local scope provides a place for
<a name="INDEX-1046" />
<a name="INDEX-1047" />temporary
variables for use solely within a function. This eliminates potential
name conflicts between function variables and timeline variables, and
it reduces our overall memory usage.</p>


<a name="ch09-12-fm2xml" /><div class="sect2">
<h3 class="sect2">9.7.1. The Scope Chain</h3>


<p>Even <a name="INDEX-1048" />though
<a name="INDEX-1049" />functions
<a name="INDEX-1050" /> <a name="INDEX-1051" />
<a name="INDEX-1052" />operate in their own local scopes,
normal <a name="INDEX-1053" />
<a name="INDEX-1054" />timeline variables are still accessible to
the statements of a function body. The local scope of a function is
the <em class="emphasis">first</em> place the interpreter looks to resolve
variable references, but if the variable reference can't be
found in the local scope, the search extends to the object or movie
clip that bears the function.</p>


<p>For example, suppose we define a variable,
<tt class="literal">firstName</tt>, on the timeline of a movie clip,
<tt class="literal">clipA</tt>. We also declare a function,
<em class="filename">getName( )</em>, on <tt class="literal">clipA</tt>. Inside
<em class="filename">getName( )</em>, we refer to the variable
<tt class="literal">firstName</tt> in a <em class="filename">trace( )</em>
statement:</p>


<blockquote><pre class="code">firstName = "Christine";

function getName ( ) {
  trace(firstName);
}

getName( );</pre></blockquote>


<p>When we invoke <em class="filename">getName( )</em>, the interpreter must
find the value of <tt class="literal">firstName</tt>. There is no variable
called <tt class="literal">firstName</tt> in the local scope of
<em class="filename">getName( )</em>, so the interpreter checks the
timeline of <tt class="literal">clipA</tt> for the variable
<tt class="literal">firstName</tt>. There, the interpreter finds
<tt class="literal">firstName</tt> and displays its value,
"Christine".</p>


<p>Our <em class="filename">trace( )</em> statement is able to refer to a
timeline variable from the body of our <em class="filename">getName(
)</em> function because <em class="filename">getName( )</em> does
not, itself, define a parameter or variable called
<tt class="literal">firstName</tt>. Now consider what happens when we add a
parameter called <tt class="literal">firstName</tt> to the
<em class="filename">getName( )</em> function:</p>


<blockquote><pre class="code">firstName = "Christine";

function getName (firstName) {
  trace(firstName);
}

getName("Kathy");</pre></blockquote>


<p>This time, when we invoke <em class="filename">getName( )</em>, we assign
the value "Kathy" to the parameter
<tt class="literal">firstName</tt>. When the interpreter executes the
<em class="filename">trace( )</em> statement, it searches the local scope
where it finds the <tt class="literal">firstName</tt> parameter and its
value "Kathy". So the output of the function this time is
"Kathy" not "Christine". Even though the
timeline variable <tt class="literal">firstName</tt> exists, the
function's local variable called <tt class="literal">firstName</tt>
takes precedence.</p>


<p>Our example demonstrates the operation of the <em class="emphasis">scope
chain -- </em>the hierarchy of objects used by the
interpreter to resolve references to variables and object properties.
For functions attached to timelines, the scope chain has only two
levels: the local scope and the scope of the movie clip that bears
the function. But when we attach functions to custom objects and
classes, the scope chain can involve many more levels, as we'll
see in "Object Property Inheritance" in <a href="ch12_01.htm">Chapter 12, "Objects and Classes"</a>.</p>


<p>If the scope of the variables and properties we want to access from
our function body differs from the statement's scope, we must
use <a name="INDEX-1055" />dot syntax to form an explicit reference.
For example:</p>


<blockquote><pre class="code">function dynamicGoto( ) {
  // Deliberately go outside the function's local scope
  _root.myClip.gotoAndPlay(_root.myClip.targetFrame);
}</pre></blockquote>


<p>Note that a function's scope chain is determined relative to
the function <em class="emphasis">declaration</em> statement, not any
function <em class="emphasis">invocation</em> statement. That is, the code
in a function's body is scoped to the movie clip that bears the
function declaration, not the movie clip that bears the statement
that invokes the function.</p>


<p>Here's an example showing a misguided use of the scope chain:</p>


<blockquote><pre class="code"><tt class="userinput"><b>// CODE ON MAIN MOVIE TIMELINE</b></tt>
// This function's scope chain includes the main movie
function rotate(degrees) {
  _rotation += degrees;
}</pre></blockquote>


<p>If we attempt to rotate <tt class="literal">clipA</tt> using
<tt class="literal">_root.rotate</tt>, it rotates the entire main movie,
not just <tt class="literal">clipA</tt>:</p>


<blockquote><pre class="code"><tt class="userinput"><b>// CODE ON clipA's TIMELINE</b></tt>
_root.rotate(30);  // Oops! This rotates the entire movie!</pre></blockquote>


<p>In this situation we can fix our problem by passing the clip to be
rotated as an argument to the <tt class="function">rotate( )</tt>
function:</p>


<blockquote><pre class="code">function rotate (theClip, degrees) {
	theClip._rotation += degrees;
}

// Invoke <em class="replaceable">rotate( )</em> with a reference to <em class="replaceable">clipA</em>
_root.rotate(clipA, 30);</pre></blockquote>
</div>




<a name="ch09-13-fm2xml" /><div class="sect2">
<h3 class="sect2">9.7.2. Local Variables</h3>


<p>Variables <a name="INDEX-1056" />
<a name="INDEX-1057" />assigned
to a function's local scope are called <em class="emphasis">local
variables</em>. Local variables, including parameters, are
accessible only to statements in the body of the function in which
they are defined and exist only while that function runs. To create a
local variable (other than the parameters that automatically become
local variables), we use the <em class="filename">var</em> statement
inside any function, like this:</p>


<blockquote><pre class="code">function funcName( ) {
  var temp = "just testing!";  // Declares the local variable <em class="replaceable">temp</em>
}</pre></blockquote>


<p>Local variables are useful for holding information temporarily. Here,
for example, we use the local variable
<tt class="literal">lastSpacePlusOne</tt> to hold an interim result. Like
all local variables, it dies when the function ends:</p>


<blockquote><pre class="code">function getLastWord(text) {
  var lastSpacePlusOne = text.lastIndexOf(" ") + 1;                 // Local
  var lastWord = text.subString(lastSpacePlusOne, text.length);     // Local
  return lastWord;
}

// Displays: "word"
trace(getLastWord("Tell me the last word"));

// Displays: undefined. <em class="replaceable">lastSpacePlusOne</em> is local, and not
// available outside the <em class="replaceable">getLastWord( )</em> function.
trace(lastSpacePlusOne);</pre></blockquote>


<p>When local variables expire at the end of a function, the memory
associated with them is freed. By using local variables to store all
temporary values, we can conserve memory in a program. Furthermore,
when we declare a local variable, we need not worry that it might
conflict with a <a name="INDEX-1058" />
<a name="INDEX-1059" />timeline variable of the same name.</p>


<p>Of course, not all variables used in functions need to be local.
Earlier we learned that we can read timeline variables from inside a
function; we can also create and write to them. Variable assignment
statements within a function that do not apply to a local variable
are scoped to the timeline instead of the function. In this example,
<tt class="literal">x</tt> is a local variable, but <tt class="literal">y</tt>
and <tt class="literal">z</tt> are timeline variables:</p>


<blockquote><pre class="code">var z = 1;

function createVars( ) {
  var x = 10;    // Create local variable <em class="replaceable">x</em>
  y = 13;        // Create timeline variable <em class="replaceable">y</em>
  z = 2;         // Alter timeline variable <em class="replaceable">z</em>
}
createVars( );   // Call the function
trace(x);        // <em class="replaceable">x</em> is undefined (<em class="replaceable">x</em> dies when the function ends)
trace(y);        // <em class="replaceable">y</em> is 13 (<em class="replaceable">y</em> exists after the function ends)
trace(z);        // <em class="replaceable">z</em> is 2 (<em class="replaceable">z</em> was permanently altered by the function)</pre></blockquote>


<p>The rules for creating <a name="INDEX-1060" />
<a name="INDEX-1061" />timeline
variables apply even if our function is a method of an object. We
won't cover objects until <a href="ch12_01.htm">Chapter 12, "Objects and Classes"</a>, but for
those familiar with object-oriented programming, <a href="ch09_07.htm">Example 9-2</a> shows code that proves the point. Note that
<tt class="literal">x</tt> is defined on the timeline because it
doesn't exist in the local scope of <em class="filename">newFunc(
)</em> or as a property of <tt class="literal">newObj</tt>.</p>


<a name="ch09-30511" /><div class="example">
<h4 class="objtitle">Example 9-2. Variable Scope Within Object Methods </h4>

<blockquote><pre class="code">newObj = new Object( );                    // Create an object
newObj.newFunc = function( ) { x = 12; };  // Attach a new method
newObj.newFunc ( );                        // Call the method

// Now let's check for <em class="replaceable">x</em>
trace("x is " + x);                       // <em class="replaceable">x</em> is 12
trace("newObj.x is " + newObj.x);         // <em class="replaceable">newObj.x</em> is undefined</pre></blockquote>
</div>
<a name="INDEX-1062" />
<a name="INDEX-1063" />
</div>


<hr width="684" align="left" />
<div class="navbar"><table width="684" border="0"><tr><td align="left" valign="top" width="228"><a href="ch09_06.htm"><img alt="Previous" border="0" src="../gifs/txtpreva.gif" /></a></td><td align="center" valign="top" width="228"><a href="index.htm"><img alt="Home" border="0" src="../gifs/txthome.gif" /></a></td><td align="right" valign="top" width="228"><a href="ch09_08.htm"><img alt="Next" border="0" src="../gifs/txtnexta.gif" /></a></td></tr><tr><td align="left" valign="top" width="228">9.6. Function Availability and Life Span</td><td align="center" valign="top" width="228"><a href="index/index.htm"><img alt="Book Index" border="0" src="../gifs/index.gif" /></a></td><td align="right" valign="top" width="228">9.8. Function Parameters Revisited</td></tr></table></div>
<hr width="684" align="left" />

<img alt="Library Navigation Links" border="0" src="../gifs/navbar.gif" usemap="#library-map" />
<p><font size="-1"><a href="copyrght.htm">Copyright &copy; 2002</a> O'Reilly &amp; Associates. All rights reserved.</font></p>

<map name="library-map"><area href="../index.htm" coords="0,1,78,93" shape="rect" /><area href="../wdesign/index.htm" coords="80,2,155,96" shape="rect" /><area href="../xhtml/index.htm" coords="158,0,263,97" shape="rect" /><area href="../audio/index.htm" coords="265,1,335,97" shape="rect" /><area href="../css/index.htm" coords="338,1,434,93" shape="rect" /><area href="index.htm" coords="439,0,540,102" shape="rect" /><area href="../infoarch/index.htm" coords="544,0,685,102" shape="rect" /></map>

</body></html>