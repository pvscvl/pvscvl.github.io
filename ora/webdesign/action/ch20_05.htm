<html><head><title>Alphabetical Language Reference (ActionScript: The Definitive Guide)</title><link rel="stylesheet" type="text/css" href="../style/style1.css" />

<meta name="DC.Creator" content="Colin Moock" /><meta name="DC.Format" content="text/xml" scheme="MIME" /><meta name="DC.Language" content="en-US" /><meta name="DC.Publisher" content="O'Reilly &amp; Associates, Inc." /><meta name="DC.Source" scheme="ISBN" content="1565928520L" /><meta name="DC.Subject.Keyword" content="stuff" /><meta name="DC.Title" content="ActionScript: The Definitive Guide" /><meta name="DC.Type" content="Text.Monograph" />

</head><body bgcolor="#ffffff">

<img alt="Book Home" border="0" src="gifs/smbanner.gif" usemap="#banner-map" /><map name="banner-map"><area shape="rect" coords="1,-2,616,66" href="index.htm" alt="ActionScript: The Definitive Guide" /><area shape="rect" coords="629,-11,726,25" href="jobjects/fsearch.htm" alt="Search this book" /></map>

<div class="navbar"><table width="684" border="0"><tr><td align="left" valign="top" width="228"><a href="ch20_04.htm"><img alt="Previous" border="0" src="../gifs/txtpreva.gif" /></a></td><td align="center" valign="top" width="228"><a href="index.htm">ActionScript: The Definitive Guide</a></td><td align="right" valign="top" width="228"><a href="part4.htm"><img alt="Next" border="0" src="../gifs/txtnexta.gif" /></a></td></tr></table></div>
<hr width="684" align="left" />


<h2 class="sect1">20.5. Alphabetical Language Reference</h2>


<p>The following entries document ActionScript's objects and
classes. Refer to the index for the operators and statements covered
elsewhere in this book.</p>


<a name="INDEX-2339" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b><i>Arguments Object</i></b></font></td><td align="right"><i>access to function parameters and the current function
</i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><table width="515" border="0" cellpadding="5"><tr><td align="left" /><td align="right" /></tr></table>
<h4 class="refsect1">Availability</h4>


<p>Flash 5</p>



<h4 class="refsect1">Synopsis</h4>

<blockquote><pre class="code">
arguments[<i>elem</i>]
arguments.<i>propertyName</i></pre></blockquote>



<h4 class="refsect1">Properties</h4>


<dl>
<dt><em>callee</em></dt>
<dd><p>A reference to the function being executed.</p></dd>

</dl>


<dl>
<dt><em>length</em></dt>
<dd><p>The number of parameters passed to the function being executed.</p></dd>

</dl>



<h4 class="refsect1">Description</h4>


<p>The <em class="filename">Arguments</em> object is stored in the local
<tt class="literal">arguments</tt> variable of every function and is
accessible only while a function is executing.
<em class="filename">Arguments</em> is both an array and an object. As an
array, <tt class="literal">arguments</tt> stores the values of the
parameters passed to the currently executing function. For example,
<tt class="literal">arguments[0]</tt> is the first passed parameter,
<tt class="literal">arguments[1]</tt> is the second passed parameter, and
so on. As an object, <em class="filename">Arguments</em> stores the
<tt class="literal">callee</tt> property, which can be used to identify or
invoke the current function.</p>



<h4 class="refsect1">See Also</h4>


<p>"The arguments Object" in <a href="ch09_01.htm">Chapter 9, "Functions"</a></p>


</div>

<a name="INDEX-2340" /><a name="INDEX-2341" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b><i>
arguments.callee Property</i></b></font></td><td align="right"><i>a reference to the function being executed
</i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><table width="515" border="0" cellpadding="5"><tr><td align="left" /><td align="right" /></tr></table>
<h4 class="refsect1">Availability</h4>


<p>Flash 5</p>



<h4 class="refsect1">Synopsis</h4>

<blockquote><pre class="code">
arguments.callee</pre></blockquote>



<h4 class="refsect1">Access</h4>


<p>Read/write</p>



<h4 class="refsect1">Description</h4>


<p>The <tt class="literal">callee</tt> property stores a reference to the
function currently executing. We may use this reference to execute
the current function again or to identify the current function
through comparison.</p>



<h4 class="refsect1">Example</h4>


<blockquote><pre class="code">function someFunction ( ) {
  trace(arguments.callee == someFunction);    // Displays: true
}

// An unnamed recursive function
countToTen = function ( ) {
  i++; 
  trace(i);
  if (i &lt; 10) {
    arguments.callee( );
  }
};</pre></blockquote>


</div>

<a name="INDEX-2342" /><a name="INDEX-2343" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b><i>
arguments.length Property</i></b></font></td><td align="right"><i>the number of parameters passed to an argument
</i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><table width="515" border="0" cellpadding="5"><tr><td align="left" /><td align="right" /></tr></table>
<h4 class="refsect1">Availability</h4>


<p>Flash 5</p>



<h4 class="refsect1">Synopsis</h4>

<blockquote><pre class="code">
arguments.length</pre></blockquote>



<h4 class="refsect1">Access</h4>


<p>Read/write</p>



<h4 class="refsect1">Description</h4>


<p>The <tt class="literal">length</tt> property stores an integer representing
the number of elements in the <tt class="literal">arguments</tt> array,
which equates to the number of parameters passed to the currently
executing function.</p>



<h4 class="refsect1">Example</h4>


<p>We can use the <tt class="literal">length</tt> property of
<tt class="literal">arguments</tt> to determine whether a function was
invoked with the correct number of parameters. The following example
checks whether two arguments have been passed to
<em class="filename">someFunction( )</em>. Checking whether the passed
arguments are of the correct type is left as an exercise to the
reader. (Hint: see the <em class="filename">typeof</em> operator.)
Here's the code:</p>


<blockquote><pre class="code">function someFunction (y, z) {
  if (arguments.length != 2) {
    trace("Function invoked with wrong number of parameters");
    return;
  }
  // Proceed with normal function body...
}</pre></blockquote>


</div>

<a name="INDEX-2344" /><a name="INDEX-2345" /><a name="INDEX-2346" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b><i>Array 
Class </i></b></font></td><td align="right"><i>support for ordered lists of data
</i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><table width="515" border="0" cellpadding="5"><tr><td align="left" /><td align="right" /></tr></table>
<h4 class="refsect1">Availability</h4>


<p>Flash 5</p>



<h4 class="refsect1">Constructor</h4>

<blockquote><pre class="code">
new Array()
new Array(<em><i>len</i></em>)
new Array(<em><i>element0, element1, element2,...elementn</i></em>)</pre></blockquote>



<h4 class="refsect2">Arguments</h4>


<dl>
<dt><em>len</em></dt>
<dd><p>A non-negative integer specifying the size of the new array.</p></dd>

</dl>


<dl>
<dt><em>element0,...element<tt class="literal">n</tt></em></dt>
<dd><p>A list of one or more initial values to be assigned as elements of
the array.</p></dd>

</dl>




<h4 class="refsect1">Properties</h4>


<dl>
<dt><em>length</em></dt>
<dd><p>The number of elements in an array (including empty elements).</p></dd>

</dl>



<h4 class="refsect1">Methods</h4>


<dl>
<dt><em>concat( )</em></dt>
<dd><p>Create a new array by appending additional elements to an existing
array.</p></dd>

</dl>


<dl>
<dt><em>join( )</em></dt>
<dd><p>Convert an array to a string.</p></dd>

</dl>


<dl>
<dt><em>pop( )</em></dt>
<dd><p>Remove and return the last element of an array.</p></dd>

</dl>


<dl>
<dt><em>push( )</em></dt>
<dd><p>Add one or more elements to the end of an array.</p></dd>

</dl>


<dl>
<dt><em>reverse( )</em></dt>
<dd><p>Reverse the order of elements in an array.</p></dd>

</dl>


<dl>
<dt><em>shift( )</em></dt>
<dd><p>Remove and return the first element of an array.</p></dd>

</dl>


<dl>
<dt><em>slice( )</em></dt>
<dd><p>Create a new array using a subset of elements from an existing array.</p></dd>

</dl>


<dl>
<dt><em>sort( )</em></dt>
<dd><p>Sort the elements of an array according to the specified rule.</p></dd>

</dl>


<dl>
<dt><em>splice( )</em></dt>
<dd><p>Remove elements from, and/or add elements to, an array.</p></dd>

</dl>


<dl>
<dt><em>toString( )</em></dt>
<dd><p>Convert an array to a string of comma-separated element values.</p></dd>

</dl>


<dl>
<dt><em>unshift( )</em></dt>
<dd><p>Add one or more elements to the beginning of an array.</p></dd>

</dl>



<h4 class="refsect1">Description</h4>


<p>We use the properties and methods of the <em class="filename">Array</em>
class to manipulate the data stored in the elements of an array
object. See <a href="ch11_01.htm">Chapter 11, "Arrays"</a>, for exhaustive details on
what arrays are and how you can use them, plus detailed definitions
of the terminology used in this section. See also the
<tt class="literal">[]</tt> and <tt class="literal">.</tt> operators, which are
used to access array elements as described in <a href="ch05_01.htm">Chapter 5, "Operators"</a>.</p>



<h4 class="refsect1">Usage</h4>


<p>If the <em class="filename">Array</em> constructor is invoked with a
single integer argument, that argument is used to set the length of
the new array, not the value of the first element. If two or more
arguments are supplied to the constructor or if a single non-numeric
argument is supplied to the constructor, the arguments are used as
the initial values for elements in the array, and the length of the
array is determined by the number of arguments specified.</p>


</div>

<a name="INDEX-2347" /><a name="INDEX-2348" /><a name="INDEX-2349" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b><i>

Array.concat( ) Method </i></b></font></td><td align="right"><i>create a new array by extending an existing array 
</i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><table width="515" border="0" cellpadding="5"><tr><td align="left" /><td align="right" /></tr></table>
<h4 class="refsect1">Availability</h4>


<p>Flash 5</p>



<h4 class="refsect1">Synopsis</h4>

<blockquote><pre class="code">
<em>array</em>.concat(<em>value1, value2, value3,...valuen</em>)</pre></blockquote>



<h4 class="refsect2">Arguments</h4>


<dl>
<dt><em>value1,...value<em class="replaceable">n</em></em></dt>
<dd><p>A list of expressions to be added to the end of
<em class="replaceable">array</em> as new elements.</p></dd>

</dl>




<h4 class="refsect1">Returns</h4>


<p>A new array containing all the elements of
<em class="replaceable">array</em> followed by the elements
<em class="replaceable">value1,...valuen</em>.</p>



<h4 class="refsect1">Description</h4>


<p>The<em class="filename"> concat( )</em> method returns a new array created
by appending new elements to the end of an existing array. The
original <em class="replaceable">array</em> is left unchanged. Use the
<em class="filename">push( )</em>, <em class="filename">splice( )</em>, or
<em class="filename">shift( )</em> method to modify the original array.</p>


<p>If an array is used as an argument to <em class="filename">concat( )</em>,
each element of that array is appended separately. That is, the
result of <em class="filename">arrayX.concat(arrayY)</em> will be an array
formed by appending each element of <tt class="literal">arrayY</tt> to the
end of <tt class="literal">arrayX</tt>. The resulting array will have a
<tt class="literal">length</tt> equal to <tt class="literal">arrayY.length +
arrayX.length</tt>. Nested arrays, however, are not similarly
flattened.</p>



<h4 class="refsect1">Example</h4>


<blockquote><pre class="code">// Create an array
myListA = new Array("apples", "oranges");

// Set myListB to ["apples", "oranges", "bananas"]
myListB = myListA.concat("bananas");     

// Create another new array
myListC = new Array("grapes", "plums");

// Set myListD to ["apples", "oranges", "bananas", "grapes", "plums"]
myListD = myListB.concat(myListC);

// Set myListA to ["apples", "oranges", "bananas"]
myListA = myListA.concat("bananas");

// Create an array
settings  = ["on", "off"];
// Append an array containing a nested array
options = settings.concat(["brightness", ["high", "medium", "low"]]);
// Sets options to: ["on", "off", "brightness", ["high", "medium", "low"]] 
// not: ["on", "off", "brightness", "high", "medium", "low"]</pre></blockquote>



<h4 class="refsect1">See Also</h4>


<p><em class="filename">Array.push( ), Array.shift( ), Array.splice( )</em>;
<a href="ch11_07.htm">Section 11.7.3.4, "The concat( ) method"</a> in <a href="ch11_01.htm">Chapter 11, "Arrays"</a></p>


</div>

<a name="INDEX-2350" /><a name="INDEX-2351" /><a name="INDEX-2352" /><a name="INDEX-2353" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b><i>


Array.join( ) Method</i></b></font></td><td align="right"><i>convert an array to a string
</i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><table width="515" border="0" cellpadding="5"><tr><td align="left" /><td align="right" /></tr></table>
<h4 class="refsect1">Availability</h4>


<p>Flash 5</p>



<h4 class="refsect1">Synopsis</h4>


<blockquote><pre class="code">
<em>array</em>.join()
<em>array</em>.join(<em>delimiter</em>)</pre></blockquote>



<h4 class="refsect2">Arguments</h4>


<dl>
<dt><em>delimiter</em></dt>
<dd><p>An optional string to be placed between elements in the newly created
string. Defaults to a comma if not supplied.</p></dd>

</dl>




<h4 class="refsect2">Returns</h4>


<p>A string composed of all the elements of
<em class="replaceable">array</em> converted to strings and separated
by <em class="replaceable">delimiter</em>.</p>




<h4 class="refsect1">Description</h4>


<p>The<em class="filename"> join( )</em> method returns a string created by
combining all the elements of an array, as follows:</p>


<ol><li><p>Convert each element in the array to a string (empty elements are
converted to the empty string).</p></li>

<li><p>Add <em class="replaceable">delimiter</em> to the end of each
converted-element string, except the last one.</p></li>
<li><p>Concatenate the converted-element strings into one long string.</p></li></ol>
<p>Note that elements that are themselves arrays are converted to
strings via the <em class="filename">toString( )</em> method, so nested
array elements are always delimited by commas, not the delimiter used
in the <em class="filename">join( )</em> invocation.</p>



<h4 class="refsect1">Example</h4>


<blockquote><pre class="code">fruit = new Array("apples","oranges","bananas","grapes","plums");
// Set fruitString to "apples,oranges,bananas,grapes,plums"
fruitString = fruit.join( );
// Set fruitString to "apples-oranges-bananas-grapes-plums"
fruitString = fruit.join("-");</pre></blockquote>



<h4 class="refsect1">See Also</h4>


<p><em class="filename">Array.toString( )</em>, <em class="filename">String.split( )
</em>; <a href="ch11_09.htm">Section 11.9.4, "The join( ) Method"</a> in <a href="ch11_01.htm">Chapter 11, "Arrays"</a></p>


</div>

<a name="INDEX-2354" /><a name="INDEX-2355" /><a name="INDEX-2356" /><a name="INDEX-2357" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b><i>

Array.length Property</i></b></font></td><td align="right"><i>the number of elements in an array
</i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><table width="515" border="0" cellpadding="5"><tr><td align="left" /><td align="right" /></tr></table>
<h4 class="refsect1">Availability</h4>


<p>Flash 5</p>



<h4 class="refsect1">Synopsis</h4>

<blockquote><pre class="code">
<em>array</em>.length</pre></blockquote>



<h4 class="refsect1">Access</h4>


<p>Read/write</p>



<h4 class="refsect1">Description</h4>


<p>The <tt class="literal">length</tt> property is a non-negative integer
specifying the number of elements in an array. An array with no
elements has a length of 0, an array with 2 elements has a length of
2. Note that the index number of the first element in an array is 0,
so <tt class="literal">length</tt> is always one greater than the index of
the last element in the array.</p>


<p>The <tt class="literal">length</tt> property of an array indicates how many
numbered elements the array currently contains, including empty
elements (those containing <tt class="literal">null</tt> or
<tt class="literal">undefined</tt>). For example, an array may have values
for elements 0, 1, 2, and 9, but elements 3 through 8 may be empty.
Such an array has a length of 10 because it has 10 element positions
(0 through 9) even though only 4 positions are occupied by useful
values.</p>


<p>Setting the <tt class="literal">length</tt> of an array changes the number
of elements in the array. If we increase <tt class="literal">length</tt>,
empty elements are added to the end of the array; if we decrease
<tt class="literal">length</tt>, existing elements are removed from the end
of the array. The <tt class="literal">length</tt> property changes
automatically whenever any elements are added or removed via the
<em class="filename">Array</em> class methods. The
<tt class="literal">length</tt> property reflects numbered elements only;
it does not include named array elements, which are treated as
properties of the array.</p>



<h4 class="refsect1">Example</h4>


<blockquote><pre class="code">myList = new Array("one", "two", "three");
trace(myList.length);  // Displays: 3

// Loop through the array's elements
for (var i = 0; i &lt; myList.length; i++) {
  trace(myList[i]);
}</pre></blockquote>



<h4 class="refsect1">See Also</h4>


<p>"Determining the Size of an Array" in <a href="ch11_01.htm">Chapter 11, "Arrays"</a></p>


</div>

<a name="INDEX-2358" /><a name="INDEX-2359" /><a name="INDEX-2360" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b><i>

Array.pop( ) Method</i></b></font></td><td align="right"><i>remove the last element of an array
</i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><table width="515" border="0" cellpadding="5"><tr><td align="left" /><td align="right" /></tr></table>
<h4 class="refsect1">Availability</h4>


<p>Flash 5</p>



<h4 class="refsect1">Synopsis</h4>

<blockquote><pre class="code">
<em>array</em>.pop()</pre></blockquote>



<h4 class="refsect2">Returns</h4>


<p>The value of the last element of <em class="replaceable">array</em>,
which is also deleted.</p>




<h4 class="refsect1">Description</h4>


<p>The<em class="filename"> pop( )</em> method deletes the
<em class="emphasis">last</em> element of an array, reduces the
array's <tt class="literal">length</tt> by 1, and returns the value
of the deleted element. Compare with the <em class="filename">shift(
)</em> method, which deletes the <em class="emphasis">first</em>
element of an array.</p>



<h4 class="refsect1">Example</h4>


<blockquote><pre class="code">myList = new Array("one", "two", "three");
trace ("Now deleting " + myList.pop( ));  // myList is now: ["one", "two"]</pre></blockquote>



<h4 class="refsect1">See Also</h4>


<p><em class="filename">Array.push( )</em>, <em class="filename">Array.shift(
)</em>, <em class="filename">Array.splice( )</em>; "Removing
Elements from an Array" in <a href="ch11_01.htm">Chapter 11, "Arrays"</a>,
"The delete Operator" in <a href="ch05_01.htm">Chapter 5, "Operators"</a></p>


</div>

<a name="INDEX-2361" /><a name="INDEX-2362" /><a name="INDEX-2363" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b><i>

Array.push( ) Method</i></b></font></td><td align="right"><i>add one or more elements to the end of an array
</i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><table width="515" border="0" cellpadding="5"><tr><td align="left" /><td align="right" /></tr></table>
<h4 class="refsect1">Availability</h4>


<p>Flash 5</p>



<h4 class="refsect1">Synopsis</h4>

<blockquote><pre class="code">
<em>array</em>.push(<em>value1, value2,...valuen</em>)</pre></blockquote>



<h4 class="refsect2">Arguments</h4>


<dl>
<dt><em>value1,...value<em class="replaceable">n</em></em></dt>
<dd><p>A list of one or more values to be added to the end of
<em class="replaceable">array</em>.</p></dd>

</dl>




<h4 class="refsect2">Returns</h4>


<p>The new <tt class="literal">length</tt> of <em class="replaceable">array</em>.</p>




<h4 class="refsect1">Description</h4>


<p>The<em class="filename"> push( )</em> method appends a list of values to
the end of an array as new elements. Elements are added in the order
provided. It differs from <em class="filename">concat( )</em> in that
<em class="filename">push( )</em> modifies the original array, whereas
<em class="filename">concat( )</em> creates a new array. It differs from
<em class="filename">unshift( )</em> in that it adds elements at the end
of an array, not the beginning.</p>



<h4 class="refsect1">Example</h4>


<blockquote><pre class="code">myList = new Array (5, 6);
myList.push(7);             // myList is now [5, 6, 7]
myList.push(10, 8, 9);      // myList is now [5, 6, 7, 10, 8, 9]</pre></blockquote>



<h4 class="refsect1">See Also</h4>


<p><em class="filename">Array.concat( )</em>,<em class="filename"> Array.pop(
)</em>, <em class="filename">Array.unshift( )</em>; "Adding
Elements to an Array" in <a href="ch11_01.htm">Chapter 11, "Arrays"</a></p>


</div>

<a name="INDEX-2364" /><a name="INDEX-2365" /><a name="INDEX-2366" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b><i>

Array.reverse( ) Method</i></b></font></td><td align="right"><i>reverse the order of elements in an array
</i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><table width="515" border="0" cellpadding="5"><tr><td align="left" /><td align="right" /></tr></table>
<h4 class="refsect1">Availability</h4>


<p>Flash 5</p>



<h4 class="refsect1">Synopsis</h4>

<blockquote><pre class="code">
<em>array</em>.reverse()</pre></blockquote>



<h4 class="refsect1">Description</h4>


<p>The<em class="filename"> reverse</em> method reverses the order of
elements in an array, swapping the last element with the first
element, the second-to-last element with the second element, and so
on.</p>



<h4 class="refsect1">Example</h4>


<blockquote><pre class="code">myList = new Array(3, 4, 5, 6, 7);
myList.reverse( );                             // myList is now [7, 6, 5, 4, 3]</pre></blockquote>



<h4 class="refsect1">See Also</h4>


<p><em class="filename">Array.sort( )</em></p>


</div>

<a name="INDEX-2367" /><a name="INDEX-2368" /><a name="INDEX-2369" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b><i>

Array.shift( ) Method</i></b></font></td><td align="right"><i>remove the first element of an array
</i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><table width="515" border="0" cellpadding="5"><tr><td align="left" /><td align="right" /></tr></table>
<h4 class="refsect1">Availability</h4>


<p>Flash 5</p>



<h4 class="refsect1">Synopsis</h4>

<blockquote><pre class="code">
<em>array</em>.shift()</pre></blockquote>



<h4 class="refsect2">Returns</h4>


<p>The value of the first element of <em class="replaceable">array</em>,
which is also deleted.</p>




<h4 class="refsect1">Description</h4>


<p>The <em class="filename">shift( )</em> method deletes the
<em class="emphasis">first</em> element of an array and then moves all the
remaining elements of the array up one position. The affected
array's <tt class="literal">length</tt> is reduced by 1. Note that
<em class="filename">shift( )</em> differs from the <em class="filename">pop(
)</em> method, which deletes the <em class="emphasis">last</em>
element of an array.</p>



<h4 class="refsect1">Example</h4>


<blockquote><pre class="code">myList = new Array ("a", "b", "c");
myList.shift( );                                  // myList becomes ["b", "c"]</pre></blockquote>



<h4 class="refsect1">See Also</h4>


<p><em class="filename">Array.pop( )</em>, <em class="filename">Array.splice(
)</em>, <em class="filename">Array.unshift( )</em>; "Removing
Elements from an Array" in <a href="ch11_01.htm">Chapter 11, "Arrays"</a></p>


</div>

<a name="INDEX-2370" /><a name="INDEX-2371" /><a name="INDEX-2372" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b><i>

Array.slice( ) Method</i></b></font></td><td align="right"><i>create a new array using a subset of elements from an existing array
</i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><table width="515" border="0" cellpadding="5"><tr><td align="left" /><td align="right" /></tr></table>
<h4 class="refsect1">Availability</h4>


<p>Flash 5</p>



<h4 class="refsect1">Synopsis</h4>

<blockquote><pre class="code">
<em>array</em>.slice(<em>startIndex, endIndex</em>)</pre></blockquote>



<h4 class="refsect2">Arguments</h4>


<dl>
<dt><em>startIndex</em></dt>
<dd><p>A zero-relative integer specifying the first element in
<em class="replaceable">array</em> to add to the new array. If
negative, <em class="replaceable">startIndex</em> indicates an element
number counting backward from the end of
<em class="replaceable">array</em> (-1 is the last element, -2 is the
second-to-last element, etc.).</p></dd>

</dl>


<dl>
<dt><em>endIndex</em></dt>
<dd><p>An integer specifying the element <em class="emphasis">after</em> the last
element in <em class="replaceable">array</em> to add to the new array.
If negative, <em class="replaceable">endIndex</em> counts backward from
the end of <em class="replaceable">array</em> (-1 is the last element,
-2 is the second-to-last element, etc.). If omitted,
<em class="replaceable">endIndex</em> defaults to
<em class="replaceable">array</em><tt class="literal">.length</tt>.</p></dd>

</dl>




<h4 class="refsect2">Returns</h4>


<p>A new array containing the elements of
<em class="replaceable">array</em> from
<em class="replaceable">startIndex</em> to
<em class="replaceable">endIndex</em><tt class="literal">-1</tt>.</p>




<h4 class="refsect1">Description</h4>


<p>The <em class="filename">slice( )</em> method creates a new array by
extracting a series of elements from an existing array. The new array
is a subset of the elements of the original
<em class="replaceable">array</em>, starting with
<em class="replaceable">array</em><tt class="literal">[</tt><em class="replaceable">startIndex</em><tt class="literal">]</tt>
and ending with
<em class="replaceable">array</em><tt class="literal">[</tt><em class="replaceable">endIndex</em><tt class="literal">-1]</tt>.</p>



<h4 class="refsect1">Example</h4>


<blockquote><pre class="code">myList = new Array("a", "b", "c", "d", "e");

// Set myOtherList to ["b", "c", "d"]
myOtherList = myList.slice(1, 4);

// Set anotherList to ["d", "e"]
anotherList = myList.slice(3);

// Set yetAnotherList to ["c", "d"]
yetAnotherList = myList.slice(-3, -1);</pre></blockquote>



<h4 class="refsect1">See Also</h4>


<p><em class="filename">Array.splice( )</em>; <a href="ch11_09.htm">Section 11.9.3, "The slice( ) Method"</a> in <a href="ch11_01.htm">Chapter 11, "Arrays"</a>, <a href="ch05_11.htm">Section 5.11.4, "The delete Operator"</a> in <a href="ch05_01.htm">Chapter 5, "Operators"</a></p>


</div>

<a name="INDEX-2373" /><a name="INDEX-2374" /><a name="INDEX-2375" /><a name="INDEX-2376" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b><i>


Array.sort( ) Method</i></b></font></td><td align="right"><i>sort the elements of an array
</i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><table width="515" border="0" cellpadding="5"><tr><td align="left" /><td align="right" /></tr></table>
<h4 class="refsect1">Availability</h4>


<p>Flash 5</p>



<h4 class="refsect1">Synopsis</h4>

<blockquote><pre class="code">
<em>array</em>.sort()
<em>array</em>.sort(<em>compareFunction</em>)</pre></blockquote>



<h4 class="refsect2">Arguments</h4>


<dl>
<dt><em>compareFunction</em></dt>
<dd><p>A function that dictates how to sort <em class="replaceable">array</em>.</p></dd>

</dl>




<h4 class="refsect1">Description</h4>


<p>When invoked without any arguments, the <em class="filename">sort( )</em>
method temporarily converts the elements of
<em class="replaceable">array</em> to strings and orders the elements
according to the code points of those strings (approximately
alphabetical order). Alphabetic comparisons and code points are
described in "Character order and alphabetic comparisons"
in <a href="ch04_01.htm">Chapter 4, "Primitive Datatypes"</a>.</p>


<p>When invoked with a <em class="replaceable">compareFunction</em>
argument, <em class="filename">sort( )</em> reorders the elements of
<em class="replaceable">array</em> according to the return value of
<em class="replaceable">compareFunction</em>, which is a user-defined
function that dictates how to arrange any two values in the array.
Your user-defined <em class="replaceable">compareFunction</em> should
be designed to accept two array elements as arguments. It should
return a negative number if the first element should come before the
second element; it should return a positive number if the first
element should come after the second element; and it should return a
if the elements should not be reordered. If additional elements are
added to the array after it has been sorted, they are
<em class="emphasis">not</em> added in sorted order. You must resort the
array to reorder any newly added elements. Note that numbers are
sorted according to their Latin 1 code points by default. <a href="ch11_01.htm">Chapter 11, "Arrays"</a>
explains how to sort numbers by their numeric values.</p>



<h4 class="refsect1">Example</h4>


<p>The following example sorts an array of movie clips according to
their horizontal location on screen:</p>


<blockquote><pre class="code">var clips = [clip1, clip2, clip3, clip4];

function compareXposition (element1, element2) {
  if (element1._x &lt; element2._x) {
    return -1;
  } else if (element1._x &gt; element2._x) {
    return 1;
  } else {
    return 0;  // The clips have the same x position
  }
}

clips.sort(compareXposition);</pre></blockquote>



<h4 class="refsect1">See Also</h4>


<p><em class="filename">Array.reverse( )</em>; "The sort( )
method" in <a href="ch11_01.htm">Chapter 11, "Arrays"</a></p>


</div>

<a name="INDEX-2377" /><a name="INDEX-2378" /><a name="INDEX-2379" /><a name="INDEX-2380" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b><i>


Array.splice( ) Method</i></b></font></td><td align="right"><i>remove elements from, and/or add elements to, an array
</i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><table width="515" border="0" cellpadding="5"><tr><td align="left" /><td align="right" /></tr></table>
<h4 class="refsect1">Availability</h4>


<p>Flash 5</p>



<h4 class="refsect1">Synopsis</h4>

<blockquote><pre class="code">
<em>array</em>.splice(<em>startIndex</em>)
<em>array</em>.splice(<em>startIndex, deleteCount</em>)
<em>array</em>.splice(<em>startIndex, deleteCount, value1,...valuen</em>)</pre></blockquote>



<h4 class="refsect2">Arguments</h4>


<dl>
<dt><em>startIndex</em></dt>
<dd><p>The zero-relative element index at which to start element deletion
and optional insertion of new elements. If negative,
<em class="replaceable">startIndex</em> specifies an element counting
back from the end of <em class="replaceable">array</em> (-1 is the last
element, -2 is the second-to-last element, etc.).</p></dd>

</dl>


<dl>
<dt><em>deleteCount</em></dt>
<dd><p>An optional non-negative integer representing the number of elements
to remove from <em class="replaceable">array</em>, including the
element at <em class="replaceable">startIndex</em>. If 0, no elements
are deleted. If omitted, all elements from
<em class="replaceable">startIndex</em> to the end of the array are
removed.</p></dd>

</dl>


<dl>
<dt><em>value1,...value<em class="replaceable">n</em></em></dt>
<dd><p>An optional list of one or more values to be added to
<em class="replaceable">array</em> at index
<em class="replaceable">startIndex</em> after the specified elements
have been deleted.</p></dd>

</dl>




<h4 class="refsect2">Returns</h4>


<p>A new array containing the <em class="emphasis">deleted</em> elements (the
original <em class="replaceable">array</em> is modified separately to
reflect the requested changes).</p>




<h4 class="refsect1">Description</h4>


<p>The <em class="filename">splice( )</em> method removes the elements from
<em class="replaceable">array</em><tt class="literal">[</tt><em class="replaceable">startIndex</em><tt class="literal">]</tt>
to
<em class="replaceable">array</em><tt class="literal">[</tt><em class="replaceable">startIndex</em>
<tt class="literal">+</tt>
<em class="replaceable">deleteCount</em><tt class="literal">-1]</tt> and then
optionally inserts new elements starting at
<em class="replaceable">startIndex</em>. The <em class="filename">splice(
)</em> method does not leaves gaps in
<em class="replaceable">array</em> ; it moves elements up or down to
ensure the contiguity of elements in the array.</p>



<h4 class="refsect1">Example</h4>


<blockquote><pre class="code">myList = new Array (1, 2, 3, 4, 5);
// Deletes the second and third elements from the list
// and insert the elements "x", "y", and "z" in their place.
// This changes myList to [1, "x", "y", "z", 4, 5].
myList.splice(1, 2, "x", "y", "z");</pre></blockquote>



<h4 class="refsect1">See Also</h4>


<p><em class="filename">Array.slice( )</em>; <a href="ch11_08.htm">Section 11.8.3.3, "The splice( ) method"</a> in <a href="ch11_01.htm">Chapter 11, "Arrays"</a></p>


</div>

<a name="INDEX-2381" /><a name="INDEX-2382" /><a name="INDEX-2383" /><a name="INDEX-2384" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b><i>Array.toString


( ) Method</i></b></font></td><td align="right"><i>convert an array to a string of comma-separated element values
</i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><table width="515" border="0" cellpadding="5"><tr><td align="left" /><td align="right" /></tr></table>
<h4 class="refsect1">Availability</h4>


<p>Flash 5</p>



<h4 class="refsect1">Synopsis</h4>

<blockquote><pre class="code">
<em>array</em>.toString()</pre></blockquote>



<h4 class="refsect2">Returns</h4>


<p>A comma-separated list of <em class="replaceable">array </em>'s
elements converted to strings.</p>




<h4 class="refsect1">Description</h4>


<p>The <em class="filename">toString( )</em> method creates a string
representation of <em class="replaceable">array</em>. The string
returned by <em class="filename">toString( )</em> is a list of array
elements converted to strings and separated by commas (the same as is
returned by the <em class="filename">join( )</em> method when
<em class="filename">join( )</em> is invoked without parameters). An
array's <em class="filename">toString( )</em> method is
automatically invoked whenever the array is used in a string context.
Therefore, it is rarely necessary to manually execute
<em class="filename">toString( )</em> on an array. Normally, when we want
a precise string representation of an array, we use the
<em class="filename">join( )</em> method, which offers us more control
over the string we're creating.</p>



<h4 class="refsect1">Example</h4>


<blockquote><pre class="code">myList = new Array("a", "b", "c");             // Create an array
trace(myList.toString( ));                      // Displays: "a","b","c"
myList = new Array([1, 2, 3], "a", "b", "c");  // Create a nested array
trace(myList.toString( ));                      // Displays: "1,2,3,a,b,c"</pre></blockquote>



<h4 class="refsect1">See Also</h4>


<p><em class="filename">Array.join( )</em></p>


</div>

<a name="INDEX-2385" /><a name="INDEX-2386" /><a name="INDEX-2387" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b><i>

Array.unshift( ) Method</i></b></font></td><td align="right"><i>add one or more elements to the beginning of an array
</i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><table width="515" border="0" cellpadding="5"><tr><td align="left" /><td align="right" /></tr></table>
<h4 class="refsect1">Availability</h4>


<p>Flash 5</p>



<h4 class="refsect1">Synopsis</h4>

<blockquote><pre class="code">
<em>array</em>.unshift(<em>value1, value2,...valuen</em>)</pre></blockquote>



<h4 class="refsect2">Arguments</h4>


<dl>
<dt><em>value1,...value<em class="replaceable">n</em></em></dt>
<dd><p>A list of one or more element values to be added to the beginning of
<em class="replaceable">array</em>.</p></dd>

</dl>




<h4 class="refsect2">Returns</h4>


<p>The new <tt class="literal">length</tt> of <em class="replaceable">array</em>.</p>




<h4 class="refsect1">Description</h4>


<p>The<em class="filename"> unshift( )</em> method adds a series of elements
to the beginning of an array. Elements are added in the order
specified. To add elements at the end of an array, use
<em class="filename">push( ) </em>.</p>



<h4 class="refsect1">Example</h4>


<blockquote><pre class="code">myList = new Array (5, 6);
myList.unshift(4);         // myList becomes [4, 5, 6]
myList.unshift(7, 1);      // myList becomes [7, 1, 4, 5, 6]</pre></blockquote>



<h4 class="refsect1">See Also</h4>


<p><em class="filename">Array.push( )</em>, <em class="filename">Array.shift(
)</em>; <a href="ch11_07.htm">Section 11.7, "Adding Elements to an Array"</a> in <a href="ch11_01.htm">Chapter 11, "Arrays"</a></p>


</div>

<a name="INDEX-2388" /><a name="INDEX-2389" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b><i>
Boolean( ) Global Function</i></b></font></td><td align="right"><i>convert a value to the boolean datatype
</i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><table width="515" border="0" cellpadding="5"><tr><td align="left" /><td align="right" /></tr></table>
<h4 class="refsect1">Availability</h4>


<p>Flash 5</p>



<h4 class="refsect1">Synopsis</h4>

<blockquote><pre class="code">
Boolean(<em>value</em>)</pre></blockquote>



<h4 class="refsect2">Arguments</h4>


<dl>
<dt><em>value</em></dt>
<dd><p>An expression containing the value to be converted to a Boolean.</p></dd>

</dl>




<h4 class="refsect2">Returns</h4>


<p>The result of converting <em class="replaceable">value</em> to a
primitive Boolean (either <tt class="literal">true</tt> or
<tt class="literal">false</tt>).</p>




<h4 class="refsect1">Description</h4>


<p>The <em class="filename">Boolean( )</em> global function converts its
argument to a primitive Boolean value and returns that converted
value. The results of converting various types of data to a primitive
Boolean are described in <a href="ch03_04.htm">Table 3-3</a>. It's
normally not necessary to use the <em class="filename">Boolean( )</em>
function; ActionScript automatically converts values to the
<em class="filename">boolean</em> type when appropriate.</p>



<h4 class="refsect1">Usage</h4>


<p>Be sure not to confuse the global <em class="filename">Boolean( )</em>
function with the <em class="filename">Boolean</em> class constructor. The
<em class="filename">Boolean( )</em> function converts its argument to the
<em class="filename">boolean</em> datatype, whereas the
<em class="filename">Boolean</em> class constructor creates a new Boolean
object. Note that in ECMA-262, all nonempty strings convert to
<tt class="literal">true</tt>. In Flash 5, only strings that can be
converted to a valid nonzero number convert to
<tt class="literal">true</tt>. Therefore, even the string
"true" converts to the Boolean <tt class="literal">false</tt>.</p>



<h4 class="refsect1">Example</h4>


<blockquote><pre class="code">var x = 1;
if (Boolean(x)) {
  trace("x is true");
}</pre></blockquote>



<h4 class="refsect1">See Also</h4>


<p>The <em class="filename">Boolean</em> class; <a href="ch03_04.htm">Section 3.4, "Datatype Conversion"</a> in <a href="ch03_01.htm">Chapter 3, "Data and Datatypes"</a></p>


</div>

<a name="INDEX-2390" /><a name="INDEX-2391" /><a name="INDEX-2392" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b><i>
Boolean Class</i></b></font></td><td align="right"><i>wrapper class for primitive Boolean data
</i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><table width="515" border="0" cellpadding="5"><tr><td align="left" /><td align="right" /></tr></table>
<h4 class="refsect1">Availability</h4>


<p>Flash 5</p>



<h4 class="refsect1">Constructor</h4>

<blockquote><pre class="code">
new Boolean(<em>value</em>)</pre></blockquote>



<h4 class="refsect2">Arguments</h4>


<dl>
<dt><em>value</em></dt>
<dd><p>An expression to be resolved and, if necessary, converted to a
Boolean value, then wrapped in a <em class="filename">Boolean</em> object.</p></dd>

</dl>




<h4 class="refsect1">Methods</h4>


<dl>
<dt><em>toString<em class="filename">( )</em></em></dt>
<dd><p>Convert the value of a <em class="emphasis">Boolean</em> object to a
string.</p></dd>

</dl>


<dl>
<dt><em>valueOf<em class="filename">( )</em></em></dt>
<dd><p>Retrieve the primitive value of a <em class="filename">Boolean</em> object.</p></dd>

</dl>



<h4 class="refsect1">Description</h4>


<p>The <em class="filename">Boolean</em> class creates a
<em class="filename">Boolean</em> object which contains a
<a name="INDEX-2392" />primitive Boolean value in an
inaccessible, internal property. <em class="filename">Boolean</em> objects
are used purely for the sake of manipulating and examining primitive
Boolean values using methods of the <em class="filename">Boolean</em>
class. A <em class="filename">Boolean</em> object is, hence, known as a
<em class="emphasis">wrapper object</em> because it simply packages a
primitive Boolean value, giving it some object-like methods. Compare
the <em class="filename">Boolean</em> class with the
<em class="filename">String</em> and <em class="filename">Number</em> classes,
which similarly wrap <em class="emphasis">string</em> and
<em class="emphasis">number</em> primitive values, but with more useful
results.</p>


<p>For the most part, <em class="filename">Boolean</em> objects are used
internally. They are created automatically by the interpreter
whenever a method is invoked on a primitive Boolean value and are
deleted automatically after each use. We can create
<em class="filename">Boolean</em> objects ourselves using the
<em class="filename">Boolean</em> constructor, but there is seldom reason
to do so.</p>



<h4 class="refsect1">Usage</h4>


<p>Note that in practice it is much more common to use the
<em class="filename">Boolean( )</em> global function as a
datatype-conversion tool than it is to use the
<em class="filename">Boolean</em> class.</p>



<h4 class="refsect1">See Also</h4>


<p><em class="filename">Boolean( )</em> global function; "The Boolean
Type" in <a href="ch04_01.htm">Chapter 4, "Primitive Datatypes"</a></p>


</div>

<a name="INDEX-2393" /><a name="INDEX-2394" /><a name="INDEX-2395" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b><i>

Boolean.toString( ) Method</i></b></font></td><td align="right"><i>the value of the Boolean object converted to a string
</i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><table width="515" border="0" cellpadding="5"><tr><td align="left" /><td align="right" /></tr></table>
<h4 class="refsect1">Availability</h4>


<p>Flash 5</p>



<h4 class="refsect1">Synopsis</h4>

<blockquote><pre class="code">
booleanObject.toString()</pre></blockquote>



<h4 class="refsect2">Returns</h4>


<p>The string "true" if the primitive value of
<em class="replaceable">booleanObject</em> is <tt class="literal">true</tt>;
"false" if the primitive value of
<em class="replaceable">booleanObject</em> is <tt class="literal">false</tt>.
The value of the Boolean object is specified when the object is
constructed and stored internally thereafter. Although the internal
value of a Boolean object is inaccessible, we can use
<em class="filename">toString( )</em> to convert it to its string
equivalent.</p>




<h4 class="refsect1">Description</h4>


<p>The<em class="filename"> toString( )</em> method retrieves the primitive
value of a Boolean object, converts that value to a string, and
returns the resulting string.</p>



<h4 class="refsect1">Example</h4>


<blockquote><pre class="code">x = new Boolean(true);
trace(x.toString( ));  // Displays: "true"</pre></blockquote>



<h4 class="refsect1">See Also</h4>


<p><em class="filename">Object.toString( )</em></p>


</div>

<a name="INDEX-2396" /><a name="INDEX-2397" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b><i>
Boolean.valueOf( ) Method</i></b></font></td><td align="right"><i>the primitive value of the Boolean object
</i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><table width="515" border="0" cellpadding="5"><tr><td align="left" /><td align="right" /></tr></table>
<h4 class="refsect1">Availability</h4>


<p>Flash 5</p>



<h4 class="refsect1">Synopsis</h4>

<blockquote><pre class="code">
booleanObject.valueOf()</pre></blockquote>



<h4 class="refsect2">Returns</h4>


<p>The Boolean value <tt class="literal">true</tt> if the primitive value of
<em class="replaceable">booleanObject</em> is <tt class="literal">true</tt>;
<tt class="literal">false</tt> if the primitive value of
<em class="replaceable">booleanObject</em> is <tt class="literal">false</tt>.
The value of the Boolean object is specified when the object is
constructed and stored internally thereafter.</p>




<h4 class="refsect1">Description</h4>


<p>The <em class="filename">valueOf( )</em> method returns the primitive
Boolean datum associated with a Boolean object. Although the internal
value of a Boolean object is inaccessible, we can use
<em class="filename">valueOf( )</em> to convert it to its primitive
equivalent.</p>



<h4 class="refsect1">Example</h4>


<blockquote><pre class="code">x = new Boolean(0);
trace(x.valueOf( ));  // Displays: false</pre></blockquote>



<h4 class="refsect1">See Also</h4>


<p><em class="filename">Object.valueOf( )</em></p>


</div>

<a name="INDEX-2398" /><a name="INDEX-2399" /><a name="INDEX-2400" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b><i>

Call( ) Global Function</i></b></font></td><td align="right"><i>execute the script of a remote frame
</i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><table width="515" border="0" cellpadding="5"><tr><td align="left" /><td align="right" /></tr></table>
<h4 class="refsect1">Availability</h4>


<p>Flash 4; deprecated in Flash 5</p>



<h4 class="refsect1">Synopsis</h4>

<blockquote><pre class="code">
call(<em>frameLabel</em>)
call(<em>frameNumber</em>)</pre></blockquote>



<h4 class="refsect2">Arguments</h4>


<dl>
<dt><em>frameLabel</em></dt>
<dd><p>A string representing the label of the frame whose script should be
executed.</p></dd>

</dl>


<dl>
<dt><em>frameNumber</em></dt>
<dd><p>The number of the frame whose script should be executed.</p></dd>

</dl>




<h4 class="refsect1">Description</h4>


<p>The <em class="filename">call( )</em> function executes the script
attached to the frame at <em class="replaceable">frameLabel</em> or
<em class="replaceable">frameNumber</em>. For example, the following
code runs the script on frame 20 of the current timeline:</p>


<blockquote><pre class="code">call(20);</pre></blockquote>


<p>In Flash 4, <em class="filename">call( )</em> was used to create a crude
kind of reusable subroutine (one that could not accept parameters or
return any value). In Flash 5, the <em class="filename">function</em>
statement is preferred.</p>


<p>Note that in Flash 5, when a script is executed remotely via
<em class="filename">call( )</em>, any variables declared with the
<em class="filename">var</em> keyword are considered local to that
execution and expire after the script completes. To create nonlocal
variables in a remotely-executed script, omit the
<em class="filename">var</em> keyword:</p>


<blockquote><pre class="code">var x = 10;  // Local variable; dies after script completes
x = 10;      // Timeline variable; persists after script completes</pre></blockquote>


<p>To invoke <em class="filename">call( )</em> on frames outside the current
timeline, use the <em class="filename">tellTarget( )</em> function. The
following example executes the script on frame 10 of the
<tt class="literal">box</tt> clip:</p>


<blockquote><pre class="code">tellTarget ("box") {
  call(10);
}</pre></blockquote>



<h4 class="refsect1">See Also</h4>


<p><a href="ch09_01.htm">Chapter 9, "Functions"</a>; <a href="appc_01.htm">Appendix C, "Backward Compatibility"</a></p>


</div>

<a name="INDEX-2401" /><a name="INDEX-2402" /><a name="INDEX-2403" /><a name="INDEX-2404" /><a name="INDEX-2405" /><a name="INDEX-2406" /><a name="INDEX-2407" /><a name="INDEX-2408" /><a name="INDEX-2409" /><a name="INDEX-2410" /><a name="INDEX-2411" /><a name="INDEX-2412" /><a name="INDEX-2413" /><a name="INDEX-2414" /><a name="INDEX-2415" /><a name="INDEX-2416" /><a name="INDEX-2417" /><a name="INDEX-2418" /><a name="INDEX-2419" /><a name="INDEX-2420" /><a name="INDEX-2421" /><a name="INDEX-2422" /><a name="INDEX-2423" /><a name="INDEX-2424" /><a name="INDEX-2425" /><a name="INDEX-2426" /><a name="INDEX-2427" /><a name="INDEX-2428" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b><i>

Color 

Class</i></b></font></td><td align="right"><i>control over movie clip color values
</i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><table width="515" border="0" cellpadding="5"><tr><td align="left" /><td align="right" /></tr></table>
<h4 class="refsect1">Availability</h4>


<p>Flash <a name="INDEX-2407" />5</p>



<h4 class="refsect1">Constructor</h4>

<blockquote><pre class="code">
new Color(<em>target</em>)</pre></blockquote>



<h4 class="refsect2">Arguments</h4>


<dl>
<dt><em>target</em></dt>
<dd><p>A string or reference indicating the path to the movie clip or
document level whose color will be controlled by the new object
(references are converted to paths when used in a string context).</p></dd>

</dl>




<h4 class="refsect1">Methods</h4>


<dl>
<dt><em>getRGB<em class="filename">( )</em></em></dt>
<dd><p>Retrieve the current offset values for Red, Green, and Blue.</p></dd>

</dl>


<dl>
<dt><em>getTransform<em class="filename">( )</em></em></dt>
<dd><p>Retrieve the current offset and percentage values for Red, Green,
Blue, and Alpha.</p></dd>

</dl>


<dl>
<dt><em>setRGB<em class="filename">( )</em></em></dt>
<dd><p>Assign new offset values for Red, Green, and Blue, while reducing
percentage values to 0.</p></dd>

</dl>


<dl>
<dt><em>setTransform<em class="filename">( )</em></em></dt>
<dd><p>Assign new offset and/or <a name="INDEX-2408" /> <a name="INDEX-2409" /> <a name="INDEX-2410" /> <a name="INDEX-2411" />percentage values for Red, Green,
Blue, and Alpha.</p></dd>

</dl>



<h4 class="refsect1">Description</h4>


<p>We use objects of the <em class="filename">Color</em> class to
programmatically dictate the <a name="INDEX-2412" />color and transparency of a movie clip or
main movie. Once we've created an object of the
<em class="filename">Color</em> class for a specific
<em class="replaceable">target</em>, we can then invoke the methods of
that object to affect its <em class="replaceable">target</em>'s
color and transparency. For example, suppose we have a clip instance
named <tt class="literal">ball</tt> that we want to make red. We first make
a <em class="filename">Color</em><a name="INDEX-2413" /> object
with a <em class="replaceable">target</em> of <tt class="literal">ball</tt>
and store it in the variable <tt class="literal">ballColor</tt>. Then we
use <em class="filename">ballColor.setRGB( )</em> to assign
<tt class="literal">ball</tt> the color red, as follows:</p>


<blockquote><pre class="code">var ballColor = new Color("ball");
ballColor.setRGB(0xFF0000);  // Pass setRGB( ) the hex value for red</pre></blockquote>


<p>The preceding example provides color control for simple applications.
But to handle more complex scenarios, we need to know more about how
color is represented in Flash. Every individual color displayed in a
movie clip is defined by four separate components:
<a name="INDEX-2414" /> <a name="INDEX-2415" />Red,
Green, Blue, and Alpha (or transparency). Those four components are
combined in different amounts to generate each color we see on
screen. The amount of Red, Green, Blue, and Alpha in a given color is
described as a number between 0
and 255. The higher the value of Red, Green, or Blue, the more each
of those colors contributes to the final color. However, remember
that computer color is additive, not subtractive like paint, so
higher values tend to be brighter, not darker. If all three RGB
components are equal, the result is a shade of gray; if they are all
0, the result is black; if they are all 255, the result is white. The
higher the value of Alpha, the more opaque the final color will be.
(A color with an Alpha of
is completely transparent, and a color with an Alpha of 255 is
completely opaque.)</p>


<p>For example, pure red would be described by the following values:</p>


<blockquote><pre class="code">Red: 255, Green: 0, Blue: 0, Alpha: 255</pre></blockquote>


<p>whereas a partially transparent red might have the values:</p>


<blockquote><pre class="code">Red: 255, Green: 0, Blue: 0, Alpha: 130</pre></blockquote>


<p>For the purposes of this discussion, we adopt the so-called
<em class="emphasis">RGB triplet</em> notation
(<em class="replaceable">Red</em>, <em class="replaceable">Green</em>,
<em class="replaceable">Blue</em>) when talking about color values.
Although ActionScript doesn't support decimal RGB triplets such
as (255, 0, 255), it does support the hexadecimal equivalent form
<tt class="literal">0x</tt><em class="replaceable">RRGGBB</em>, where
<em class="replaceable">RR</em>, <em class="replaceable">GG</em>, and
<em class="replaceable">BB</em> are two-digit hex numbers representing
Red, Green and Blue. We'll also adopt the <em class="filename">RGBA
quadlet</em> notation (<em class="replaceable">Red</em>,
<em class="replaceable">Green</em>, <em class="replaceable">Blue</em>,
<em class="replaceable">Alpha</em>) for convenience only in the
following discussion.</p>


<p>The initial Red, Green, Blue, and Alpha values for each color in a
movie clip are set in the Flash authoring tool using the Mixer panel.
(In the Mixer panel, Alpha is shown as a percentage, not a number
from
to 255.) To alter <em class="emphasis">all</em> the colors in a movie clip
via ActionScript, we make universal adjustments (known as
<em class="emphasis">transformations</em><a name="INDEX-2416" /> <a name="INDEX-2417" />)
to the Red, Green, Blue, and Alpha components of the clip's
color.</p>


<p>We have two means of setting transformations for each color component:</p>


<ul><li><p>We may set the <em class="emphasis">percentage</em> of the
component's original value to a number between -100 and 100.
For example, we may say "set all red used in this clip to 80%
of its original value."</p></li></ul>
<ul><li><p>We may specify an amount to <em class="emphasis">offset</em> the
component's original value. The offset is a number between -255
and 255. For example, we may say, "add 20 to all blue values in
this clip," or, using a negative number we may say,
"subtract 30 from all blue values in this clip."</p></li></ul>
<p>The final value of a color in a transformed clip is determined by
combining its original (author-time) color component values with the
transformation percentages and offsets set through
the<a name="INDEX-2418" />
<em class="filename">Color</em> object, as follows:</p>


<blockquote><pre class="code">R = originalRedValue   * (redTransformPercentage/100)   + redTransformOffset
G = originalGreenValue * (greenTransformPercentage/100) + greenTransformOffset
B = originalBlueValue  * (blueTransformPercentage/100)  + blueTransformOffset
A = originalAlphaValue * (alphaTransformPercentage/100) + alphaTransformOffset</pre></blockquote>


<p>If no transformations have been performed through ActionScript, the
initial transformation <em class="emphasis">percentage</em> for each
component defaults to 100, while the initial
<em class="emphasis">offset</em> defaults to 0.</p>


<p>Let's look at how color transformations work with a practical
example. Suppose that a clip contains an opaque red triangle (R:255,
G:0, B:0, A:255) and an opaque green circle (R:0, G:255, B:0, A:255).
Now further suppose that we apply a universal transformation to the
clip, setting the percentage of Green to 50, the percentage of Alpha
to 80, and the offset of Blue to 100 but leaving the other offsets
and percentages at their defaults (0 or 100). Here's how the
universal transformation affects our red triangle:</p>


<blockquote><pre class="code">R == 255 * (100/100) +   0 == 255            // No change to Red
G ==   0 *  (50/100) +   0 == 0              // Green reduced to 50%
B ==   0 * (100/100) + 100 == 100            // Blue offset by 100
A == 255 *  (80/100) +   0 == 204            // Alpha reduced to 80%</pre></blockquote>


<p>The final transformed red triangle has the color value (R:255, G:0,
B:100, A:204). Now here's how the transformation affects our
green circle:</p>


<blockquote><pre class="code">R ==   0 * (100/100) +   0 == 0              // No change to Red
G == 255 *  (50/100) +   0 == 127.5          // Green reduced to 50%
B ==   0 * (100/100) + 100 == 100            // Blue offset by 100
A == 255 *  (80/100) +   0 == 204            // Alpha reduced to 80%</pre></blockquote>


<p>The final transformed green circle has the color value (R:0, G:127.5,
B:100, A:204).</p>


<p>To actually apply our hypothetical color transformations to a real
clip, we use a <em class="filename">Color</em> object as we saw earlier.
To set a clip's universal color <em class="emphasis">offset</em> and
<em class="emphasis">percentage</em> values we use the <em class="filename">setRGB(
)</em> or the <em class="filename">setTransform( )</em> methods (see
the entries for those methods for example code). Conversely, to
examine the current color transformations of a clip, we use the
<em class="filename">getRGB( )</em> and <em class="filename">getTransform(
)</em> methods. The <em class="filename">Color</em> class methods
can produce animated color effects such as fade-ins, fade-outs, and
tinting. Furthermore, because we can apply tints to each clip
instance individually, the <em class="filename">Color</em> class provides
a very efficient way to create diverse graphics with minimal assets.
For example, we could create a scene full of balloons from a single
movie clip that was colorized and tinted in myriad ways, as shown
under the Example heading that follows.</p>



<h4 class="refsect1">Usage</h4>


<p>Some points of interest for <em class="filename">Color</em> objects:</p>


<ul><li><p>Changing the color of a movie clip with a <em class="filename">Color</em>
object will break a tween and place the movie clip under
ActionScript's control, meaning that some authoring-time
behaviors applied to the clip may cease functioning.</p></li></ul>
<ul><li><p>Setting the <tt class="literal">_alpha</tt> property of a clip affects the
clip's Alpha percentage as reflected by the
<tt class="literal">aa</tt> property of the object returned by
<em class="filename">getTransform( )</em>.</p></li></ul>
<ul><li><p>Color transformations do not affect the background color of a movie
or a movie clip. They apply only to solid shapes placed on the Stage.</p></li></ul>
<ul><li><p>Manual color transformations may be applied to movie clips in the
authoring tool via the Effect panel (Window <img align="absmiddle" src="figs/U2192.gif" /> Panels <img align="absmiddle" src="figs/U2192.gif" />
Effect). All such transformations are reflected in the properties of
the object returned by <em class="filename">getTransform( )</em>. The
Effect panel serves as an excellent tool for viewing and choosing
color transformations while authoring a movie.</p></li></ul>

<h4 class="refsect1">Example</h4>


<p>The <a name="INDEX-2419" />first example shows how to generate
a series of randomly colored balloon movie clips based on an existing
clip called <tt class="literal">balloon</tt>:</p>


<blockquote><pre class="code">// Loop to make 20 duplicates of the clip <i>balloon</i>
for (var i = 0; i &lt; 20; i++) {
  // Duplicate this balloon
  balloon.duplicateMovieClip("balloon" + i, i);

  // Position this balloon on stage
  this["balloon" + i]._x = Math.floor(Math.random( ) * 550);
  this["balloon" + i]._y = Math.floor(Math.random( ) * 400);

  // Create a Color object for this balloon
  balloonColor = new Color(this["balloon" + i]);
  // Randomly assign this balloon's color using the setRGB( ) method
  balloonColor.setRGB(Math.floor(Math.random( ) * 0xFFFFFF));
}</pre></blockquote>


<p>By <a name="INDEX-2420" />
<a name="INDEX-2421" />setting the Red, Green, and Blue offsets to
the same value, we can effectively brighten or darken a movie clip.
For example, the following code darkens <tt class="literal">myClip</tt>:</p>


<blockquote><pre class="code">brightness = new Color("myClip"); 
brightnessTransform = new Object( );
brightnessTransform.rb = -30; 
brightnessTransform.bb = -30;
brightnessTransform.gb = -30;
brightness.setTransform(brightnessTransform);</pre></blockquote>


<p>This last example contains code that brightens and darkens a clip
according to the mouse position:</p>


<blockquote><pre class="code">onClipEvent (load) {
  var brightness = new Color(this);
  var brightnessTransform = new Object( );
  var stageWidth = 550;
}

onClipEvent (mouseMove) {
  brightnessAmount = -255 + (_root._xmouse / stageWidth) * 510;
  brightnessTransform.rb = brightnessAmount;
  brightnessTransform.bb = brightnessAmount;
  brightnessTransform.gb = brightnessAmount;
  brightness.setTransform(brightnessTransform);
  updateAfterEvent( );
}
<a name="INDEX-2422" />
<a name="INDEX-2423" />
<a name="INDEX-2424" />
<a name="INDEX-2425" />
<a name="INDEX-2426" />
<a name="INDEX-2427" />
<a name="INDEX-2428" /></pre></blockquote>


</div>

<a name="INDEX-2429" /><a name="INDEX-2430" /><a name="INDEX-2431" /><a name="INDEX-2432" /><a name="INDEX-2433" /><a name="INDEX-2434" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b><i>
Color.getRGB( ) 
Method</i></b></font></td><td align="right"><i>retrieve the current offset values for Red, Green, and Blue
</i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><table width="515" border="0" cellpadding="5"><tr><td align="left" /><td align="right" /></tr></table>
<h4 class="refsect1">Availability</h4>


<p>Flash 5</p>



<h4 class="refsect1">Synopsis</h4>

<blockquote><pre class="code">
<em>colorObj</em>.getRGB()</pre></blockquote>



<h4 class="refsect2">Returns</h4>


<p>A number representing the current RGB offsets of
<em class="replaceable">colorObj </em>'s target.</p>




<h4 class="refsect1">Description</h4>


<p>The<em class="filename"> getRGB( )</em> method
<a name="INDEX-2433" />
<a name="INDEX-2434" />returns a number ranging from -16777215
to 16777215 that represents the current color offsets for the Red,
Green, and Blue components in a clip; to retrieve the color
percentages, you must use <em class="filename">getTransform( )</em>.
Because color offset values normally range from 0
to 255, it's convenient to work with the return value of
<em class="filename">getRGB( )</em> in hexadecimal, where each color
offset can be represented by a two-digit hex number. To decipher the
number returned by <em class="filename">getRGB( )</em>, we treat it as a
six-digit hex number of the form
<tt class="literal">0x</tt><em class="replaceable">RRGGBB</em>, where
<em class="replaceable">RR</em> is the Red offset,
<em class="replaceable">GG</em> is the Green offset, and
<em class="replaceable">BB</em> is the Blue offset. For example, if
<em class="filename">getRGB( )</em> returns the number 10092339, we
convert it to the hex number 0x99FF33 from which we derive the color
offsets R:153, G:255, B:51. Or if <em class="filename">getRGB( )</em>
returns the number 255, we convert it to the hex number 0x0000FF from
which we derive the color offsets R:0, G:0, B:255. The return value
of <em class="filename">getRGB( )</em> can be converted to hexadecimal
with <em class="filename">toString( )</em>, as follows:</p>


<blockquote><pre class="code">// Create a Color object
myColor = new Color("myClip");
// Set the Red offset to 255 (FF in hex)
myColor.setRGB(0xFF0000);
// Retrieve the RGB offset and convert it to hexadecimal
hexColor = myColor.getRGB( ).toString(16);
trace(hexColor);  // Displays: ff0000</pre></blockquote>


<p>Hexadecimal color values are familiar to most web developers, as they
are often used in HTML tags. For example, here we use a hexadecimal
number to specify the background color of a page (full values for red
and blue combine to form pink):</p>


<blockquote><pre class="code">&lt;BODY BGCOLOR="#FF00FF"&gt;</pre></blockquote>


<p>The hex color format used in HTML tags is, in fact, the same as the
format used by <em class="filename">getRGB( )</em> and <em class="filename">setRGB(
)</em>. However, it's not mandatory to use hexadecimal to
interpret the return value of <em class="filename">getRGB( )</em>; we may
also extract the individual Red, Green and Blue color offsets from
the return value of <em class="filename">getRGB( )</em> using the bitwise
operators:</p>


<blockquote><pre class="code">var rgb = myColorObject.getRGB( );
var red = (rgb &gt;&gt; 16) &amp; 0xFF;   // Isolate the Red offset and assign it to red
var green = (rgb &gt;&gt; 8) &amp; 0xFF;  // Isolate the Green offset and assign it to green
var blue  = rgb &amp; 0xFF;         // Isolate the Blue offset and assign it to blue</pre></blockquote>


<p>With the offset values separated into individual variables, we may
examine and manipulate them individually as decimal numbers. However,
when we want to apply any offset value changes to a
<em class="filename">Color</em> object, we must reassemble the offsets
into a single number, as shown under the entry for the
<em class="filename">setRGB( )</em> method.</p>



<h4 class="refsect1">Usage</h4>


<p>The<em class="filename"> getRGB( )</em> and <em class="filename">setRGB( )</em>
methods are convenient when we're directly assigning new colors
to a clip without reference to the clip's original color
values. However, the <em class="filename">getTransform( )</em> and
<em class="filename">setTransform( )</em> methods are better suited to
modifying the RGB components of a clip's color transformation
in relation to the clip's original colors.</p>


<p>Color offsets are most easily read using <em class="filename">getTransform(
)</em>, which returns each component separately rather than as
a lump sum as <em class="filename">getRGB( ) </em>does. This is especially
true when setting negative offsets with <em class="filename">setTransform(
)</em> due to the way that negative numbers are represented in
binary.</p>



<h4 class="refsect1">Example</h4>


<blockquote><pre class="code">// Create a new Color object for a clip named box
boxColor = new Color("box");
// Set a new RGB offset for "box"
boxColor.setRGB(0x333366);
// Check the RGB offset for "box"
trace(boxColor.getRGB( ));      // Displays: 3355494</pre></blockquote>



<h4 class="refsect1">See Also</h4>


<p><em class="filename">Color.getTransform( )</em>,<em class="filename"> Color.setRGB(
)</em></p>


</div>

<a name="INDEX-2435" /><a name="INDEX-2436" /><a name="INDEX-2437" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b><i>

Color.getTransform( ) Method</i></b></font></td><td align="right"><i>retrieve both the current offset and percentage values for a clip's Red, Green, Blue, and Alpha components
</i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><table width="515" border="0" cellpadding="5"><tr><td align="left" /><td align="right" /></tr></table>
<h4 class="refsect1">Availability</h4>


<p>Flash 5</p>



<h4 class="refsect1">Synopsis</h4>

<blockquote><pre class="code">
<em>colorObj</em>.getTransform()</pre></blockquote>



<h4 class="refsect2">Returns</h4>


<p>An object whose properties contain the color transformation values
for the target clip of <em class="replaceable">colorObj</em>.</p>




<h4 class="refsect1">Description</h4>


<p>The<em class="filename"> getTransform( )</em> method returns an object
with properties that tell us which transformations are currently
applied to the target of a <em class="filename">Color</em> object. The
property names and values of the returned object are described in
<a href="ch20_05.htm">Table 20-4</a>.</p>


<a name="ch20-33408" /><h4 class="objtitle">Table 20-4. Properties of Object Returned by getTransform<em class="filename">( )</em> </h4><table border="1">




<tr>
<th>
<p>Property Name</p></th>
<th>
<p>Property Value</p></th>
<th>
<p>Property Description</p></th>
</tr>




<tr>
<td>
<blockquote><pre class="code">ra</pre></blockquote></td>
<td>
<p>-100 to 100</p></td>
<td>
<p>The Red transformation percentage</p></td>
</tr>

<tr>
<td>
<blockquote><pre class="code">rb</pre></blockquote></td>
<td>
<p>-255 to 255</p></td>
<td>
<p>The Red offset amount</p></td>
</tr>

<tr>
<td>
<blockquote><pre class="code">ga</pre></blockquote></td>
<td>
<p>-100 to 100</p></td>
<td>
<p>The Green transformation percentage</p></td>
</tr>

<tr>
<td>
<blockquote><pre class="code">gb</pre></blockquote></td>
<td>
<p>-255 to 255</p></td>
<td>
<p>The Green offset amount</p></td>
</tr>

<tr>
<td>
<blockquote><pre class="code">ba</pre></blockquote></td>
<td>
<p>-100 to 100</p></td>
<td>
<p>The Blue transformation percentage</p></td>
</tr>

<tr>
<td>
<blockquote><pre class="code">bb</pre></blockquote></td>
<td>
<p>-255 to 255</p></td>
<td>
<p>The Blue offset amount</p></td>
</tr>

<tr>
<td>
<blockquote><pre class="code">aa</pre></blockquote></td>
<td>
<p>-100 to 100</p></td>
<td>
<p>The Alpha transformation percentage</p></td>
</tr>

<tr>
<td>
<blockquote><pre class="code">ab</pre></blockquote></td>
<td>
<p>-255 to 255</p></td>
<td>
<p>The Alpha offset amount</p></td>
</tr>


</table>



<h4 class="refsect1">Usage</h4>


<p>Note in <a href="ch20_05.htm">Table 20-4</a> that both the percentage and the
offset can have negative values; however, these are only one factor
in calculating the RGB color components, which always range from 0
to 255. Values outside that range are clipped to the allowable range.
See the <em class="filename">Color</em> class description for an
explanation of the calculation used to determine final RGB and Alpha
color components.</p>



<h4 class="refsect1">Example</h4>


<p>We can use <em class="filename">getTransform( )</em> in combination with
<em class="filename">setTransform( )</em> to modify the Red, Green, Blue,
or Alpha components of a color transformation individually. For
example, in the following code, we adjust the Red and Alpha
components of a clip named <tt class="literal">box</tt>:</p>


<blockquote><pre class="code">// Create a new Color object for a clip named box
boxColor = new Color("box");

// Assign the return object of getTransform() to boxTransform
boxTransform = boxColor.getTransform( );

// Now, make some modifications to the transform object's properties
boxTransform.rb = 200;      // Set Red offset to 200
boxTransform.aa = 60;       // Set Alpha percentage to 60

// Apply the new transformations to box via boxColor
boxColor.setTransform(boxTransform);</pre></blockquote>



<h4 class="refsect1">See Also</h4>


<p><em class="filename">Color.setTransform( )</em></p>


</div>

<a name="INDEX-2438" /><a name="INDEX-2439" /><a name="INDEX-2440" /><a name="INDEX-2441" /><a name="INDEX-2442" /><a name="INDEX-2443" /><a name="INDEX-2444" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b><i>
Color.setRGB( ) 
Method</i></b></font></td><td align="right"><i>assign new offset values for Red, Green, and Blue
</i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><table width="515" border="0" cellpadding="5"><tr><td align="left" /><td align="right" /></tr></table>
<h4 class="refsect1">Availability</h4>


<p>Flash 5</p>



<h4 class="refsect1">Synopsis</h4>

<blockquote><pre class="code">
<em>colorObj</em>.setRGB(<em>offset</em>);</pre></blockquote>



<h4 class="refsect2">Arguments</h4>


<dl>
<dt><em>offset</em></dt>
<dd><p>A number in the range 0
to 16777215 (0xFFFFFF), representing the new RGB offsets of
<em class="replaceable">colorObj </em>'s target clip. May be a
decimal integer or a <a name="INDEX-2443" />
<a name="INDEX-2444" />hexadecimal integer.</p>


<p>Numbers outside the allowed range are converted to numbers within the
allowed range (using the rules of twos-complement binary notation).
Therefore, <em class="filename">setRGB( )</em> cannot be used to set
negative offset values (as <em class="filename">setTransform( )</em>
can).</p>
</dd>

</dl>




<h4 class="refsect1">Description</h4>


<p>The <em class="filename">setRGB( )</em> method assigns new transformation
offsets for a movie clip's RGB components. The new
<em class="replaceable">offset</em> is most easily specified as a
six-digit hexadecimal number of the form
0x<em class="replaceable">RRGGBB</em>, where
<em class="replaceable">RR</em>, <em class="replaceable">GG</em>, and
<em class="replaceable">BB</em> are two-digit numbers between 00 and FF
representing the Red, Green, and Blue components. For example, the
RGB triplet (51, 51, 102) is equivalent to the hexadecimal value:</p>


<blockquote><pre class="code">0x333366</pre></blockquote>


<p>Hence, to assign a gray RGB offset to a clip named
<tt class="literal">menu</tt>, we could use:</p>


<blockquote><pre class="code">var menuColor = new Color("menu");
menuColor.setRGB(0x999999);</pre></blockquote>


<p>Web developers comfortable with six-digit hexadecimal color values in
HTML will have an easy time using <em class="filename">setRGB( )</em>
using the preceding hexadecimal format. For a primer on decimal,
octal, and hexadecimal numbers see <a href="../../../../../../www.moock.org/asdg/technotes">http://www.moock.org/asdg/technotes</a>.</p>


<p>Note that in addition to setting offsets, <em class="filename">setRGB(
)</em> also automatically sets the Red, Green, and Blue
percentages of a clip's color transformation to 0, meaning that
color changes performed via <em class="filename">setRGB( )</em> behave as
direct color assignments (not adjustments of the original colors in
the clip). To adjust the color of a movie clip in relation to the
clip's original colors, we must use the <em class="filename">setTransform(
)</em> method.</p>



<h4 class="refsect1">Example</h4>


<p>Here's a handy technique for generating a number to use with
the <em class="filename">setRGB( )</em> method. Our custom
<em class="filename">combineRGB( )</em> function shifts the
<em class="replaceable">red</em> and <em class="replaceable">green</em>
numbers into the proper position in a 24-bit number and then combines
the <em class="replaceable">red</em>, <em class="replaceable">green</em>,
and <em class="replaceable">blue</em> values using the bitwise OR
operator (<tt class="literal">|</tt>). We use the result to assign a color
value to the movie clip <tt class="literal">box</tt>:</p>


<blockquote><pre class="code">function combineRGB (red, green, blue) {
  // Combine the color values into a single number
  var RGB = (red&lt;&lt;16) | (green&lt;&lt;8) | blue;
  return RGB;
}
// Create the Color object
var boxColor = new Color("box");
// Set the color of box to the RGB triplet (201, 160, 21)
boxColor.setRGB(combineRGB(201, 160, 21));</pre></blockquote>


<p>For more information on bitwise operations, see <a href="ch15_01.htm">Chapter 15, "Advanced Topics"</a>.</p>



<h4 class="refsect1">See Also</h4>


<p><em class="filename">Color.getRGB( )</em>, <em class="filename">Color.setTransform(
)</em></p>


</div>

<a name="INDEX-2445" /><a name="INDEX-2446" /><a name="INDEX-2447" /><a name="INDEX-2448" /><a name="INDEX-2449" /><a name="INDEX-2450" /><a name="INDEX-2451" /><a name="INDEX-2452" /><a name="INDEX-2453" /><a name="INDEX-2454" /><a name="INDEX-2455" /><a name="INDEX-2456" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b><i>

Color.setTransform( ) Method</i></b></font></td><td align="right"><i>assign new offset and/or percentage values for Red, Green, Blue, and Alpha
</i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><table width="515" border="0" cellpadding="5"><tr><td align="left" /><td align="right" /></tr></table>
<h4 class="refsect1">Availability</h4>


<p>Flash 5</p>



<h4 class="refsect1">Synopsis</h4>

<blockquote><pre class="code">
<em>colorObj</em>.setTransform(<em>transformObject</em>)</pre></blockquote>



<h4 class="refsect2">Arguments</h4>


<dl>
<dt><em>transformObject</em></dt>
<dd><p>An object whose properties contain the new color transformation
values for the target clip of <em class="replaceable">colorObj</em>.</p></dd>

</dl>




<h4 class="refsect1">Description</h4>


<p>The<em class="filename"> setTransform( )</em> method gives us precise
control over the percentage and offset of the Red, Green, Blue, and
Alpha components of a movie clip's color. To use
<em class="filename">setTransform( )</em>, we must first create an object
with a series of predefined properties. The transformation we wish to
apply to our <em class="filename">Color</em><a name="INDEX-2448" /> object is expressed using those
properties, which are listed in <a href="ch20_05.htm">Table 20-4</a> for the
<em class="filename">getTransform( )</em> method (except that
<em class="filename">setTransform( )</em> specifies their values rather
than reading their values).</p>


<p>Once we have created an object with the properties described in <a href="ch20_05.htm">Table 20-4</a>, we pass that object to the
<em class="filename">setTransform( )</em> method. The values of the
properties on our <em class="replaceable">transformObject</em> become
the new offset and percentage transform values of
<em class="replaceable">colorObj</em> and, hence,
<em class="replaceable">colorObj</em>'s target movie clip. The
final color values in the clip are then determined according to the
calculation discussed under the <em class="filename">Color</em> class.</p>


<p>To examine the current offsets and percentages of a particular
<em class="filename">Color</em> object, we use the <em class="filename">getTransform(
)</em> method.</p>



<h4 class="refsect1">Example</h4>


<blockquote><pre class="code">// Create a new Color object for the box clip
boxColor = new Color("box");

// Create a new anonymous object and store it in boxTransform
boxTransform = new Object( );

// Assign the required properties of boxTransform, setting our
// transformation values as desired
boxTransform.ra = 50;    // Red percentage
boxTransform.rb = 0;     // Red offset
boxTransform.ga = 100;   // Green percentage
boxTransform.gb = 25;    // Green offset
boxTransform.ba = 100;   // Blue percentage
boxTransform.bb = 0;     // Blue offset
boxTransform.aa = 40;    // Alpha percentage
boxTransform.ab = 0;     // Alpha offset

// Now that our transform object has been
// prepared, pass it to setTransform( ) 
boxColor.setTransform(boxTransform);</pre></blockquote>


<p>The preceding approach to creating a transform object is fairly
labor-intensive. We may generate a new transform object more easily
using the <em class="filename">getTransform( )</em> method, as follows:</p>


<blockquote><pre class="code">// Create a new Color object for the box clip
boxColor = new Color("box");

// Invoke getTransform( ) on boxColor, retrieving an appropriately
// constructed transform object
boxTransform = boxColor.getTransform( );

// Now alter only the desired properties of boxTransform, 
// leaving the others unchanged
boxTransform.rb = 51;   // Red offset
boxTransform.aa = 40;   // Alpha percentage

// Use our transform object with setTransform( )
boxColor.setTransform(boxTransform);</pre></blockquote>

<a name="INDEX-2449" />
<a name="INDEX-2450" />
<a name="INDEX-2451" />
<a name="INDEX-2452" />



<h4 class="refsect1">See Also</h4>
<a name="INDEX-2453" /><a name="INDEX-2454" />

<p><a name="INDEX-2455" /><em class="filename">Color.</em><a name="INDEX-2456" /><em class="filename">getTransform(
)</em></p>


</div>

<a name="INDEX-2457" /><a name="INDEX-2458" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b><i>Date( ) Global Function</i></b></font></td><td align="right"><i>a string representing the current date and time
</i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><table width="515" border="0" cellpadding="5"><tr><td align="left" /><td align="right" /></tr></table>
<h4 class="refsect1">Availability</h4>


<p>Flash 5</p>



<h4 class="refsect1">Synopsis</h4>

<blockquote><pre class="code">
Date()</pre></blockquote>



<h4 class="refsect2">Returns</h4>


<p>A string containing the current date and time.</p>




<h4 class="refsect1">Description</h4>


<p>The <em class="filename">Date( )</em> function returns a human-readable
string that expresses the current date and time relative to the local
time zone. The string also includes the <a name="INDEX-2458" />GMT offset (the number of hours difference
between local time and Greenwich Mean Time).</p>


<p>Be sure not to confuse the global <em class="filename">Date( )</em>
function with the <em class="filename">Date( )</em> class constructor. The
<em class="filename">Date( )</em> function returns the date formatted as a
standard, if terse, string. It is convenient for humans but not very
useful inside a program where you need to manipulate dates and times.
For that purpose, you are better off using objects of the
<em class="filename">Date</em> class, which allow convenient independent
access to the year, month, day, and time.</p>



<h4 class="refsect1">Example</h4>


<p>To place the current time and date in a text field with minimal fuss,
we can use the <em class="filename">Date( )</em> function as follows:</p>


<blockquote><pre class="code">myTextField = Date( );

// Sets myTextField to a string formatted as follows:
// "Mon Aug 28 16:23:09 GMT-0400 2000"</pre></blockquote>



<h4 class="refsect1">See Also</h4>


<p>The <em class="filename">Date</em> class, <em class="filename">Date.UTC( )</em></p>


</div>

<a name="INDEX-2459" /><a name="INDEX-2460" /><a name="INDEX-2461" /><a name="INDEX-2462" /><a name="INDEX-2463" /><a name="INDEX-2464" /><a name="INDEX-2465" /><a name="INDEX-2466" /><a name="INDEX-2467" /><a name="INDEX-2468" /><a name="INDEX-2469" /><a name="INDEX-2470" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b><i>
Date Class</i></b></font></td><td align="right"><i>current time and structured support for date information
</i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><table width="515" border="0" cellpadding="5"><tr><td align="left" /><td align="right" /></tr></table>
<h4 class="refsect1">Availability</h4>


<p>Flash 5</p>



<h4 class="refsect1">Constructor</h4>

<blockquote><pre class="code">
new Date()
new Date(<em>milliseconds</em>)
new Date(<em>year, month, day, hours, minutes, seconds, ms</em>)</pre></blockquote>



<h4 class="refsect2">Arguments</h4>


<dl>
<dt><em>milliseconds</em></dt>
<dd><p>The number of milliseconds between the new date and midnight of
January 1, 1970 UTC (Coordinated Universal Time, akin to GMT).
Positive if after; negative if before. Any required local time zone
adjustment is made after the date in UTC time is determined. For
example, specifying a <em class="replaceable">milliseconds</em>
argument of 1000 in Eastern Standard Time would create a date 1
second past midnight on January 1, 1970 in UTC time, which translates
to 7:00:01 p.m. on December 31, 1969 in EST time (5 hours behind UTC
time).</p></dd>

</dl>


<dl>
<dt><em>year</em></dt>
<dd><p>An integer specifying the year. Required when using the
<em class="replaceable">year</em><tt class="literal">,...</tt><em class="replaceable">ms</em>
constructor format. If <em class="replaceable">year</em> is one or two
digits, it is treated as the number of years since 1900 (e.g., a
<em class="replaceable">year</em> of 11 always refers to the year 1911,
not 2011). Use four-digit numbers to specify year 2000 or later
(e.g., use 2010, not 10). Three-digit years are treated as pre-1000
A.D. Note that when <em class="replaceable">year</em> is negative or
less than 800, the calculation is unreliable. To specify dates prior
to 1000 A.D., it's safest to use the single
<em class="replaceable">milliseconds</em> constructor format.</p></dd>

</dl>


<dl>
<dt><em>month</em></dt>
<dd><p>An integer specifying the month, from
( January) to 11 (December), not from 1 to 12. Required when using
the
<em class="replaceable">year</em><tt class="literal">,...</tt><em class="replaceable">ms</em>
constructor format. Out-of-range months are carried over to the next
or previous year. For example, a <em class="replaceable">month</em> of
13 is treated as February of the following year.</p></dd>

</dl>


<dl>
<dt><em>day</em></dt>
<dd><p>An optional integer specifying the day, from 1 to 31. Defaults to 1
if not specified. Out-of-range days are carried over to the next or
previous month. For example September 31 is treated as October 1 and
September
is treated as August 31.</p></dd>

</dl>


<dl>
<dt><em>hours</em></dt>
<dd><p>An optional integer specifying the hour, from 0
(midnight) to 23 (11 p.m.). Defaults to
if not specified. AM and PM notation are not supported. Out-of-range
hours are carried over to the next or previous day. For example, an
<em class="replaceable">hour</em> of 25 is treated as 1 a.m. of the
following day.</p></dd>

</dl>


<dl>
<dt><em>minutes</em></dt>
<dd><p>An optional integer specifying the minute, from
to 59. Defaults to
if not specified. Out-of-range minutes are carried over to the next
or previous hour. For example, a <em class="replaceable">minute</em> of
60 is treated as the first minute of the following hour.</p></dd>

</dl>


<dl>
<dt><em>seconds</em></dt>
<dd><p>An optional integer specifying the seconds, from
to 59. Defaults to
if not specified. Out-of-range seconds are carried over to the next
or previous minute. For example, a <em class="replaceable">second</em>
of -1 is treated as the last second of the previous minute.</p></dd>

</dl>


<dl>
<dt><em>ms</em></dt>
<dd><p>An optional integer specifying the milliseconds, from
to 999. Defaults to
if not specified. Out-of-range milliseconds are carried over to the
next or previous second. For example, an
<em class="replaceable">ms</em> of 1005 is treated as 5 milliseconds
into the following second.</p></dd>

</dl>




<h4 class="refsect1">Class Methods</h4>


<dl>
<dt><em>UTC<em class="filename">( )</em></em></dt>
<dd><p>Retrieve the number of milliseconds between January 1, 1970 and a
supplied UTC date.</p></dd>

</dl>



<h4 class="refsect1">Methods</h4>


<dl>
<dt><em>getDate<em class="filename">( )</em></em></dt>
<dd><p>Retrieve the day of the month, from 1 to 31.</p></dd>

</dl>


<dl>
<dt><em>getDay<em class="filename">( )</em></em></dt>
<dd><p>Retrieve the day of the week, as a number from 0
0 (Sunday) to 6 (Saturday).</p></dd>

</dl>


<dl>
<dt><em>getFullYear<em class="filename">( )</em></em></dt>
<dd><p>Retrieve the four-digit year.</p></dd>

</dl>


<dl>
<dt><em>getHours<em class="filename">( )</em></em></dt>
<dd><p>Retrieve the hour of the day from 0 to 23.</p></dd>

</dl>


<dl>
<dt><em>getMilliseconds<em class="filename">( )</em></em></dt>
<dd><p>Retrieve the milliseconds.</p></dd>

</dl>


<dl>
<dt><em>getMinutes<em class="filename">( )</em></em></dt>
<dd><p>Retrieve the minutes.</p></dd>

</dl>


<dl>
<dt><em>getMonth<em class="filename">( )</em></em></dt>
<dd><p>Retrieve the month of the year, as a number from 0
(January) to 11 (December).</p></dd>

</dl>


<dl>
<dt><em>getSeconds<em class="filename">( )</em></em></dt>
<dd><p>Retrieve the seconds.</p></dd>

</dl>


<dl>
<dt><em>getTime<em class="filename">( )</em></em></dt>
<dd><p>Retrieve the date in internal format (i.e., the number of
milliseconds between the date and January 1, 1970).</p></dd>

</dl>


<dl>
<dt><em>getTimezoneOffset<em class="filename">( )</em></em></dt>
<dd><p>Retrieve the number of minutes between UTC and local time.</p></dd>

</dl>


<dl>
<dt><em>getUTCDate<em class="filename">( )</em></em></dt>
<dd><p>Retrieve the day of the month in UTC time.</p></dd>

</dl>


<dl>
<dt><em>getUTCDay<em class="filename">( )</em></em></dt>
<dd><p>Retrieve the day of the week in UTC time.</p></dd>

</dl>


<dl>
<dt><em>getUTCFullYear<em class="filename">( )</em></em></dt>
<dd><p>Retrieve the four-digit year in UTC time.</p></dd>

</dl>


<dl>
<dt><em>getUTCHours<em class="filename">( )</em></em></dt>
<dd><p>Retrieve the hour of the day in UTC time.</p></dd>

</dl>


<dl>
<dt><em>getUTCMilliseconds<em class="filename">( )</em></em></dt>
<dd><p>Retrieve the milliseconds in UTC time.</p></dd>

</dl>


<dl>
<dt><em>getUTCMinutes<em class="filename">( )</em></em></dt>
<dd><p>Retrieve the minutes in UTC time.</p></dd>

</dl>


<dl>
<dt><em>getUTCMonth<em class="filename">( )</em></em></dt>
<dd><p>Retrieve the month of the year in UTC time.</p></dd>

</dl>


<dl>
<dt><em>getUTCSeconds<em class="filename">( )</em></em></dt>
<dd><p>Retrieve the seconds in UTC time.</p></dd>

</dl>


<dl>
<dt><em>getYear<em class="filename">( )</em></em></dt>
<dd><p>Retrieve the year, relative to 1900.</p></dd>

</dl>


<dl>
<dt><em>setDate<em class="filename">( )</em></em></dt>
<dd><p>Assign the day of the month.</p></dd>

</dl>


<dl>
<dt><em>setFullYear<em class="filename">( )</em></em></dt>
<dd><p>Assign the year in four-digit format.</p></dd>

</dl>


<dl>
<dt><em>setHours<em class="filename">( )</em></em></dt>
<dd><p>Assign the hour of the day.</p></dd>

</dl>


<dl>
<dt><em>setMilliseconds<em class="filename">( )</em></em></dt>
<dd><p>Assign the milliseconds.</p></dd>

</dl>


<dl>
<dt><em>setMinutes<em class="filename">( )</em></em></dt>
<dd><p>Assign the minutes.</p></dd>

</dl>


<dl>
<dt><em>setMonth<em class="filename">( )</em></em></dt>
<dd><p>Assign the month of the year.</p></dd>

</dl>


<dl>
<dt><em>setSeconds<em class="filename">( )</em></em></dt>
<dd><p>Assign the seconds.</p></dd>

</dl>


<dl>
<dt><em>setTime<em class="filename">( )</em></em></dt>
<dd><p>Assign the date in internal format (i.e., the number of milliseconds
between the date and January 1, 1970).</p></dd>

</dl>


<dl>
<dt><em>setUTCDate<em class="filename">( )</em></em></dt>
<dd><p>Assign the day of the month in UTC time.</p></dd>

</dl>


<dl>
<dt><em>setUTCFullYear<em class="filename">( )</em></em></dt>
<dd><p>Assign the year in four-digit format in UTC time.</p></dd>

</dl>


<dl>
<dt><em>setUTCHours<em class="filename">( )</em></em></dt>
<dd><p>Assign the hour of the day in UTC time.</p></dd>

</dl>


<dl>
<dt><em>setUTCMilliseconds<em class="filename">( )</em></em></dt>
<dd><p>Assign the milliseconds in UTC time.</p></dd>

</dl>


<dl>
<dt><em>setUTCMinutes<em class="filename">( )</em></em></dt>
<dd><p>Assign the minutes in UTC time.</p></dd>

</dl>


<dl>
<dt><em>setUTCMonth<em class="filename">( )</em></em></dt>
<dd><p>Assign the month of the year in UTC time.</p></dd>

</dl>


<dl>
<dt><em>setUTCSeconds<em class="filename">( )</em></em></dt>
<dd><p>Assign the seconds in UTC time.</p></dd>

</dl>


<dl>
<dt><em>setYear<em class="filename">( )</em></em></dt>
<dd><p>Assign the year in four-digit, or in two-digit format for the 20th
century.</p></dd>

</dl>


<dl>
<dt><em>toString<em class="filename">( )</em></em></dt>
<dd><p>A human-readable string representing the date.</p></dd>

</dl>


<dl>
<dt><em>valueOf<em class="filename">( )</em></em></dt>
<dd><p>The number of milliseconds between the date and midnight of January
1, 1970 UTC.</p></dd>

</dl>



<h4 class="refsect1">Description</h4>


<p>We use objects of the <em class="filename">Date</em> class as a mechanism
by which to determine the current time and date and as a means of
storing arbitrary dates and times in a structured format.</p>


<p>In ActionScript, a specific date is represented by the number of
<a name="INDEX-2462" />
<a name="INDEX-2463" />milliseconds before or after
midnight of January 1, 1970. If the number of milliseconds is
positive, the date comes after midnight, January 1, 1970; if the
number of milliseconds is negative, the date comes before midnight,
January 1, 1970. For example, if a date value is 10000, the date
being described is 12:00:10, January 1, 1970. If a date value is
-10000, the date being described is 11:59:50, December 31, 1969.</p>


<p>Normally, however, we needn't worry about calculating the
number of milliseconds to a particular date; the ActionScript
interpreter takes care of that for us. When we construct a
<em class="filename">Date</em> object, we simply describe our date as a
year, month, day, hour, minute, second, and millisecond. The
interpreter then converts that point in time to the internal
milliseconds-from-1970 format. We may also ask the interpreter to
create a new <em class="filename">Date</em> object using the current time.
Once a <em class="filename">Date</em> object is created, we can use the
<em class="filename">Date</em> class's methods to retrieve and set
the date's year, month, day, hour, minute, second, and
millisecond.</p>


<p>There are three ways to make a new
<em class="filename">Date</em><a name="INDEX-2464" /> object:</p>


<ul><li><p>We may invoke the <em class="filename">Date( )</em> constructor with no
arguments. This sets the new <em class="filename">Date</em> object to the
current time.</p></li></ul>
<ul><li><p>We may invoke the <em class="filename">Date( )</em> constructor with one
numeric argument: the number of milliseconds between midnight,
January 1, 1970 and the date we're creating.</p></li></ul>
<ul><li><p>We may invoke the <em class="filename">Date( )</em> constructor with from
two to seven numeric arguments, corresponding to the year and month
(mandatory) and (optionally) the day, hour, minute, second, and
millisecond of the date we're creating.</p></li></ul>
<p>Because dates are stored internally as a single number, objects of
the <em class="filename">Date</em> class do not have properties to
retrieve and set. Rather, they have methods that we use to access the
various components of a date in human-readable terms (i.e., in more
convenient units). For example, to determine the month of a
particular <em class="filename">Date</em> object, we use:</p>


<blockquote><pre class="code">myMonth = myDate.getMonth( );</pre></blockquote>


<p>We cannot use:</p>


<blockquote><pre class="code">myMonth = myDate.month;  // There's no such property! We have to use methods.</pre></blockquote>


<p>Many <em class="filename">Date</em> methods contain the letters
"UTC," which is an abbreviation for Coordinated Universal
Time. For most purposes, UTC time is directly synonymous with the
more colloquial Greenwich Mean Time, or <a name="INDEX-2465" />GMT -- the time as measured on the
Greenwich meridian. UTC is simply a newer standard that is less
ambiguous than GMT, which has had several meanings over history. The
UTC methods allow us to work with times directly in Coordinated
Universal Time without converting between time zones. The equivalent
non-UTC methods all generate values based on local, adjusted time
zones.</p>



<h4 class="refsect1">Usage</h4>


<p>All dates and times are determined according to the settings on the
operating system on which the Flash movie is running (not the web
server) and include regional offsets. Times and dates, therefore, are
only as accurate as the user's system.</p>


<p>Note that the <em class="filename">Date( )</em> constructor may also be
used as a global function to generate a string expressing the current
time in the same format as would be returned by
<tt class="literal">myDate.toString( )</tt>.</p>


<p>In Flash 5 ActionScript, it is not possible to convert a string into
a <em class="filename">Date</em> object, as is possible in JavaScript.</p>



<h4 class="refsect1">Example</h4>


<p>Dates can be added and subtracted to come up with cumulative times or
elapsed times. Suppose our friend Graham decides to go traveling for
a little less than a year. While he's gone, we want to keep
track of how many days he's been away and how many days we have
to wait for him to return. The following code takes care of our
countdown:</p>


<blockquote><pre class="code">// Assign the current time to now
var now = new Date( );

// Graham leaves September 7, 2000 (remember, months start at 0
// so September is 8, not 9)
var departs = new Date(2000,8,7);

// Graham comes back August 15, 2001
var returns = new Date(2001,7,15);

// Convert the times to milliseconds for easy comparison. 
// Then check how many milliseconds have elapsed between the two times. 
var gone = now.getTime() - departs.getTime( );

// Divide the difference between departure date and now by the number 
// of milliseconds in a day. This tells us how many days we've been waiting.
var numDaysGone = Math.floor(gone/86400000);

// Use the same technique to determine how many days we have left to wait
var left = returns.getTime() - now.getTime( );
var numDaysLeft = Math.floor(left/86400000);

// Display our days in text fields
goneOutput = numDaysGone;
leftOutput = numDaysLeft;</pre></blockquote>


<p>When adding a <a name="INDEX-2466" />day to, or
subtracting a day from, an existing date, we normally assign the
number of milliseconds in a day (86400000) to a variable for
convenient use. The following code adds one day to the current date:</p>


<blockquote><pre class="code">oneDay = 86400000;
now = new Date( );
tomorrow = new Date(now.getTime( ) + oneDay);

// We could also add one day to the date in now like this
now.setTime(now.getTime( ) + oneDay);</pre></blockquote>


<p>To apply <a name="INDEX-2467" />custom formatting to a
date, we must manually map the return values of <em class="filename">getDate(
)</em>, <em class="filename">getDay( )</em>, <em class="filename">getHours(
)</em>, and so on to custom strings as shown in the following
example:</p>


<blockquote><pre class="code">// Takes any Date object and returns a string of the format:
// Saturday December 16
function formatDate(theDate) {
  var months = ["January", "February", "March", "April", 
                "May", "June", "July", "August", "September", 
                "October", "November", "December"];
  var days = ["Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", 
              "Friday", "Saturday"];
  var dateString = days[theDate.getDay( )] + " "
                   + months[theDate.getMonth( )] + " "
                   + theDate.getDate( );
  return dateString;
}

now = new Date( );
trace("Today is " + formatDate(now));</pre></blockquote>


<p>The next example shows how to convert the 24-hour clock return value
of <em class="filename">getHours( )</em> to a 12-hour clock with AM and
PM:</p>


<blockquote><pre class="code">// Takes any Date object and returns a string of the format:
// "2:04PM"
function formatTime(theDate) {
  var hour = theDate.getHours( );
  var minute = theDate.getMinutes( ) &gt; 9 ?
               theDate.getMinutes() : "0" + theDate.getMinutes( );
  if (hour &gt; 12) {
    var timeString = (hour - 12) + ":" + minute + "PM";
  } else {
    var timeString = hour + ":" + minute + "AM";
  }
  return timeString;
}

now = new Date( );
trace("The time is " + formatTime(now));</pre></blockquote>


<p>For an example using the <em class="filename">Date</em> class to create an
analog-style clock, see <a href="ch13_09.htm">Section 13.9.1, "Building a Clock with Clips"</a> in <a href="ch13_01.htm">Chapter 13, "Movie Clips"</a>. Note that programming time-based behavior
such as a 10-second pause in a movie is often accomplished more
easily with the global <em class="filename">getTimer( )</em> function.</p>



<h4 class="refsect1">See Also</h4>


<p><em class="filename">Date( )</em><a name="INDEX-2468" /> <a name="INDEX-2469" />, <em class="filename">Date.UTC( )</em>,
<a name="INDEX-2470" /><em class="filename">getTimer( )</em></p>


</div>

<a name="INDEX-2471" /><a name="INDEX-2472" /><a name="INDEX-2473" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b><i>

Date.getDate( ) Method</i></b></font></td><td align="right"><i>the day of the month
</i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><table width="515" border="0" cellpadding="5"><tr><td align="left" /><td align="right" /></tr></table>
<h4 class="refsect1">Availability</h4>


<p>Flash 5</p>



<h4 class="refsect1">Synopsis</h4>

<blockquote><pre class="code">
<em>date</em>.getDate()</pre></blockquote>



<h4 class="refsect2">Returns</h4>


<p>An integer from 1 to 31, representing the day of the month for
<em class="replaceable">date</em>.</p>



</div>

<a name="INDEX-2474" /><a name="INDEX-2475" /><a name="INDEX-2476" /><a name="INDEX-2477" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b><i>


Date.getDay( ) Method</i></b></font></td><td align="right"><i>the day of the week
</i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><table width="515" border="0" cellpadding="5"><tr><td align="left" /><td align="right" /></tr></table>
<h4 class="refsect1">Availability</h4>


<p>Flash 5</p>



<h4 class="refsect1">Synopsis</h4>

<blockquote><pre class="code">
<em>date</em>.getDay()</pre></blockquote>



<h4 class="refsect2">Returns</h4>


<p>An integer from 0
0 (Sunday) to 6 (Saturday), representing the day of the week for
<em class="replaceable">date</em>.</p>




<h4 class="refsect1">Example</h4>


<p>The following code loads a <em class="filename">.swf</em> file specific to
the current day of the week into the movie clip
<tt class="literal">welcomeHeader</tt> (the seven <em class="filename">.swf</em>
files are named in the series <em class="filename">sun.swf</em>,
<em class="filename">mon.swf</em>, and so on):</p>


<blockquote><pre class="code">now = new Date( );
today = now.getDay( );
days = ["sun", "mon", "tue", "wed", "thu", "fri", "sat"];
welcomeHeader.loadMovie(days[today] + ".swf");</pre></blockquote>


</div>

<a name="INDEX-2478" /><a name="INDEX-2479" /><a name="INDEX-2480" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b><i>

Date.getFullYear( ) Method</i></b></font></td><td align="right"><i>the four-digit year
</i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><table width="515" border="0" cellpadding="5"><tr><td align="left" /><td align="right" /></tr></table>
<h4 class="refsect1">Availability</h4>


<p>Flash 5</p>



<h4 class="refsect1">Synopsis</h4>

<blockquote><pre class="code">
<em>date</em>.getFullYear()</pre></blockquote>



<h4 class="refsect2">Returns</h4>


<p>A four-digit integer representing the year for
<em class="replaceable">date</em>, for example 1999 or 2000.</p>



</div>

<a name="INDEX-2481" /><a name="INDEX-2482" /><a name="INDEX-2483" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b><i>

Date.getHours( ) Method</i></b></font></td><td align="right"><i>the hour of the day
</i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><table width="515" border="0" cellpadding="5"><tr><td align="left" /><td align="right" /></tr></table>
<h4 class="refsect1">Availability</h4>


<p>Flash 5</p>



<h4 class="refsect1">Synopsis</h4>

<blockquote><pre class="code">
<em>date</em>.getHours()</pre></blockquote>



<h4 class="refsect2">Returns</h4>


<p>An integer from 0
(midnight) to 23 (11 p.m.) representing the hour of the day for
<em class="replaceable">date</em>. A.M. and P.M. notation are not
supported but can be constructed manually as shown in the
<em class="emphasis">Date</em> class examples.</p>



</div>

<a name="INDEX-2484" /><a name="INDEX-2485" /><a name="INDEX-2486" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b><i>

Date.getMilliseconds( ) Method</i></b></font></td><td align="right"><i>the milliseconds of a date
</i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><table width="515" border="0" cellpadding="5"><tr><td align="left" /><td align="right" /></tr></table>
<h4 class="refsect1">Availability</h4>


<p>Flash 5</p>



<h4 class="refsect1">Synopsis</h4>

<blockquote><pre class="code">
<em>date</em>.getMilliseconds()</pre></blockquote>



<h4 class="refsect2">Returns</h4>


<p>An integer from 0
to 999 representing the milliseconds of
<em class="replaceable">date</em>. Note that it does not represent the
milliseconds from 1970 (see <em class="filename">getTime( )</em>), but
rather the fractional remainder of the seconds indicated by the
specified <em class="filename">Date</em> object.</p>




<h4 class="refsect1">See Also</h4>


<p><em class="filename">Date.getTime( )</em></p>


</div>

<a name="INDEX-2487" /><a name="INDEX-2488" /><a name="INDEX-2489" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b><i>

Date.getMinutes( ) Method</i></b></font></td><td align="right"><i>the minutes of a date
</i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><table width="515" border="0" cellpadding="5"><tr><td align="left" /><td align="right" /></tr></table>
<h4 class="refsect1">Availability</h4>


<p>Flash 5</p>



<h4 class="refsect1">Synopsis</h4>

<blockquote><pre class="code">
<em>date</em>.getMinutes()</pre></blockquote>



<h4 class="refsect2">Returns</h4>


<p>An integer from 0
to 59 representing the minutes of the hour of
<em class="replaceable">date</em>.</p>



</div>

<a name="INDEX-2490" /><a name="INDEX-2491" /><a name="INDEX-2492" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b><i>

Date.getMonth( ) Method</i></b></font></td><td align="right"><i>the month of the year
</i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><table width="515" border="0" cellpadding="5"><tr><td align="left" /><td align="right" /></tr></table>
<h4 class="refsect1">Availability</h4>


<p>Flash 5</p>



<h4 class="refsect1">Synopsis</h4>

<blockquote><pre class="code">
<em>date</em>.getMonth()</pre></blockquote>



<h4 class="refsect2">Returns</h4>


<p>An integer from 0
(January) to 11 (December), not 1 to 12, representing the month of
the year of <em class="replaceable">date</em>.</p>




<h4 class="refsect1">Usage</h4>


<p>Be careful not to assume that 1 is January! The return value of
<em class="filename">getMonth( )</em> starts at 0, not 1.</p>



<h4 class="refsect1">Example</h4>


<p>Here we convert the number returned by <em class="filename">getMonth(
)</em> to a human-readable abbreviation:</p>


<blockquote><pre class="code">var months = ["Jan", "Feb", "Mar", "Apr", "May", "Jun", 
              "Jul", "Aug", "Sept", "Oct", "Nov", "Dec"];
myDateObj = new Date( );
trace ("The month is " + months[myDateObj.getMonth( )]);</pre></blockquote>


</div>

<a name="INDEX-2493" /><a name="INDEX-2494" /><a name="INDEX-2495" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b><i>

Date.getSeconds( ) Method</i></b></font></td><td align="right"><i>the seconds of a date
</i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><table width="515" border="0" cellpadding="5"><tr><td align="left" /><td align="right" /></tr></table>
<h4 class="refsect1">Availability</h4>


<p>Flash 5</p>



<h4 class="refsect1">Synopsis</h4>

<blockquote><pre class="code">
<em>date</em>.getSeconds()</pre></blockquote>



<h4 class="refsect2">Returns</h4>


<p>An integer from 0
to 59 representing the seconds of the minute of
<em class="replaceable">date</em>.</p>



</div>

<a name="INDEX-2496" /><a name="INDEX-2497" /><a name="INDEX-2498" /><a name="INDEX-2499" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b><i>
Date.getTime( ) 
Method</i></b></font></td><td align="right"><i>retrieve the number of milliseconds between January 1, 1970 and the time of a date object
</i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><table width="515" border="0" cellpadding="5"><tr><td align="left" /><td align="right" /></tr></table>
<h4 class="refsect1">Availability</h4>


<p>Flash 5</p>



<h4 class="refsect1">Synopsis</h4>

<blockquote><pre class="code">
<em>date</em>.getTime()</pre></blockquote>



<h4 class="refsect2">Returns</h4>


<p>An integer expressing the number of milliseconds between the time of
<em class="replaceable">date</em> and midnight, January 1, 1970.
Positive if after January 1, 1970; negative if before.</p>




<h4 class="refsect1">Description</h4>


<p>Internally, all dates are represented as a single number -- the
number of milliseconds between the time of the
<em class="replaceable">date</em> and midnight, January 1, 1970. The
<em class="filename">getTime( )</em> method gives us access to that number
of milliseconds so that we may use it to construct other dates or to
compare the elapsed time between two dates.</p>



<h4 class="refsect1">Example</h4>


<p>Suppose we place the following code on the 10th frame of a movie:</p>


<blockquote><pre class="code">time1 = new Date( );</pre></blockquote>


<p>Then we place the following code on the 20th frame of a movie:</p>


<blockquote><pre class="code">time2 = new Date( );</pre></blockquote>


<p>With the following code, we can determine the amount of time that
elapsed, in milliseconds, between the 10th and 20th frames of our
movie:</p>


<blockquote><pre class="code">elapsedTime = time2.getTime() - time1.getTime( );</pre></blockquote>


<p>Note that Flash's global <em class="filename">getTimer( )</em>
function also gives us access to elapsed time in a movie.</p>



<h4 class="refsect1">See Also</h4>


<p><em class="filename">Date.setTime( )</em>, <em class="filename">getTimer( )</em></p>


</div>

<a name="INDEX-2500" /><a name="INDEX-2501" /><a name="INDEX-2502" /><a name="INDEX-2503" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b><i>
Date.getTimezoneOffset( ) Method</i></b></font></td><td align="right"><i>the number of minutes between local time and UTC (a.k.a. GMT)
</i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><table width="515" border="0" cellpadding="5"><tr><td align="left" /><td align="right" /></tr></table>
<h4 class="refsect1">Availability</h4>


<p>Flash 5</p>



<h4 class="refsect1">Synopsis</h4>

<blockquote><pre class="code">
<em>date</em>.getTimezoneOffset()</pre></blockquote>



<h4 class="refsect2">Returns</h4>


<p>An <a name="INDEX-2502" /> <a name="INDEX-2503" />integer representing the current number of
<em class="emphasis">minutes</em> between the local time zone and the
actual UTC (Greenwich meridian) time. Positive if local time is
behind UTC; negative if local time is ahead of UTC. Includes
adjustments for local daylight saving time depending on the day of
the year.</p>




<h4 class="refsect1">Example</h4>


<p>When invoked in Eastern Daylight Time (EDT) during daylight savings,
the following code returns the value 240 (240 minutes is 4 hours):</p>


<blockquote><pre class="code">myDate = new Date( );
trace(myDate.getTimezoneOffset( ));  // Displays: 240</pre></blockquote>


<p>However, when invoked in EDT, during non-daylight savings times of
year, the same code returns 300 (300 minutes is 5 hours), which is
the real offset between Eastern Standard Time (EST) and UTC.</p>


</div>

<a name="INDEX-2504" /><a name="INDEX-2505" /><a name="INDEX-2506" /><a name="INDEX-2507" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b><i>


Date.getUTCDate( ) Method</i></b></font></td><td align="right"><i>the day of the month (UTC time)
</i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><table width="515" border="0" cellpadding="5"><tr><td align="left" /><td align="right" /></tr></table>
<h4 class="refsect1">Availability</h4>


<p>Flash 5</p>



<h4 class="refsect1">Synopsis</h4>

<blockquote><pre class="code">
<em>date</em>.getUTCDate()</pre></blockquote>



<h4 class="refsect2">Returns</h4>


<p>An integer from 1 to 31, representing the day of the month for
<em class="replaceable">date</em>, where
<em class="replaceable">date</em> is treated as a UTC time.</p>



</div>

<a name="INDEX-2508" /><a name="INDEX-2509" /><a name="INDEX-2510" /><a name="INDEX-2511" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b><i>


Date.getUTCDay( ) Method</i></b></font></td><td align="right"><i>the day of the week (UTC time)
</i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><table width="515" border="0" cellpadding="5"><tr><td align="left" /><td align="right" /></tr></table>
<h4 class="refsect1">Availability</h4>


<p>Flash 5</p>



<h4 class="refsect1">Synopsis</h4>

<blockquote><pre class="code">
<em>date</em>.getUTCDay()</pre></blockquote>



<h4 class="refsect2">Returns</h4>


<p>An integer from
0 (Sunday) to 6 (Saturday), representing the day of the week for
<em class="replaceable">date</em>, where
<em class="replaceable">date</em> is treated as a UTC time.</p>



</div>

<a name="INDEX-2512" /><a name="INDEX-2513" /><a name="INDEX-2514" /><a name="INDEX-2515" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b><i>


Date.getUTCFullYear( ) Method</i></b></font></td><td align="right"><i>the four-digit year (UTC time)
</i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><table width="515" border="0" cellpadding="5"><tr><td align="left" /><td align="right" /></tr></table>
<h4 class="refsect1">Availability</h4>


<p>Flash 5</p>



<h4 class="refsect1">Synopsis</h4>

<blockquote><pre class="code">
<em>date</em>.getUTCFullYear()</pre></blockquote>



<h4 class="refsect2">Returns</h4>


<p>A four-digit integer representing the year for
<em class="replaceable">date</em>, where
<em class="replaceable">date</em> is treated as a UTC time, for example
1999 or 2000.</p>



</div>

<a name="INDEX-2516" /><a name="INDEX-2517" /><a name="INDEX-2518" /><a name="INDEX-2519" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b><i>


Date.getUTCHours( ) Method</i></b></font></td><td align="right"><i>the hour of the day (UTC time)
</i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><table width="515" border="0" cellpadding="5"><tr><td align="left" /><td align="right" /></tr></table>
<h4 class="refsect1">Availability</h4>


<p>Flash 5</p>



<h4 class="refsect1">Synopsis</h4>

<blockquote><pre class="code">
<em>date</em>.getUTCHours()</pre></blockquote>



<h4 class="refsect2">Returns</h4>


<p>An integer from 0
(midnight) to 23 (11 p.m.) representing the hour of the day for
<em class="replaceable">date</em>, where
<em class="replaceable">date</em> is treated as a UTC time.</p>



</div>

<a name="INDEX-2520" /><a name="INDEX-2521" /><a name="INDEX-2522" /><a name="INDEX-2523" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b><i>


Date.getUTCMilliseconds( ) Method</i></b></font></td><td align="right"><i>the milliseconds of a date (UTC time)
</i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><table width="515" border="0" cellpadding="5"><tr><td align="left" /><td align="right" /></tr></table>
<h4 class="refsect1">Availability</h4>


<p>Flash 5</p>



<h4 class="refsect1">Synopsis</h4>

<blockquote><pre class="code">
<em>date</em>.getUTCMilliseconds()</pre></blockquote>



<h4 class="refsect2">Returns</h4>


<p>An integer from 0
to 999 representing the milliseconds of
<em class="replaceable">date</em>, where
<em class="replaceable">date</em> is treated as a UTC time.</p>



</div>

<a name="INDEX-2524" /><a name="INDEX-2525" /><a name="INDEX-2526" /><a name="INDEX-2527" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b><i>


Date.getUTCMinutes( ) Method</i></b></font></td><td align="right"><i>the minutes of a date (UTC time)
</i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><table width="515" border="0" cellpadding="5"><tr><td align="left" /><td align="right" /></tr></table>
<h4 class="refsect1">Availability</h4>


<p>Flash 5</p>



<h4 class="refsect1">Synopsis</h4>

<blockquote><pre class="code">
<em>date</em>.getUTCMinutes()</pre></blockquote>



<h4 class="refsect2">Returns</h4>


<p>An integer from 0
to 59 representing the minutes of the hour of
<em class="replaceable">date</em>, where
<em class="replaceable">date</em> is treated as a UTC time.</p>



</div>

<a name="INDEX-2528" /><a name="INDEX-2529" /><a name="INDEX-2530" /><a name="INDEX-2531" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b><i>


Date.getUTCMonth( ) Method</i></b></font></td><td align="right"><i>the month of the year (UTC time)
</i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><table width="515" border="0" cellpadding="5"><tr><td align="left" /><td align="right" /></tr></table>
<h4 class="refsect1">Availability</h4>


<p>Flash 5</p>



<h4 class="refsect1">Synopsis</h4>

<blockquote><pre class="code">
<em>date</em>.getUTCMonth()</pre></blockquote>



<h4 class="refsect2">Returns</h4>


<p>An integer from 0
(January) to 11 (December), not 1 to 12, representing the month of
the year of <em class="replaceable">date</em>, where
<em class="replaceable">date</em> is treated as a UTC time.</p>




<h4 class="refsect1">Usage</h4>


<p>Be careful not to assume that 1 is January! The return value of
<em class="filename">getUTCMonth( )</em> starts at 0, not 1.</p>


</div>

<a name="INDEX-2532" /><a name="INDEX-2533" /><a name="INDEX-2534" /><a name="INDEX-2535" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b><i>


Date.getUTCSeconds( ) Method</i></b></font></td><td align="right"><i>the seconds of a date (UTC time)
</i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><table width="515" border="0" cellpadding="5"><tr><td align="left" /><td align="right" /></tr></table>
<h4 class="refsect1">Availability</h4>


<p>Flash 5</p>



<h4 class="refsect1">Synopsis</h4>

<blockquote><pre class="code">
<em>date</em>.getUTCSeconds()</pre></blockquote>



<h4 class="refsect2">Returns</h4>


<p>An integer from 0
to 59 representing the seconds of the minute of
<em class="replaceable">date</em>, where
<em class="replaceable">date</em> is treated as a UTC time.</p>



</div>

<a name="INDEX-2536" /><a name="INDEX-2537" /><a name="INDEX-2538" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b><i>

Date.getYear( ) Method</i></b></font></td><td align="right"><i>the year, relative to 1900
</i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><table width="515" border="0" cellpadding="5"><tr><td align="left" /><td align="right" /></tr></table>
<h4 class="refsect1">Availability</h4>


<p>Flash 5</p>



<h4 class="refsect1">Synopsis</h4>

<blockquote><pre class="code">
<em>date</em>.getYear()</pre></blockquote>



<h4 class="refsect2">Returns</h4>


<p>The value of <em class="replaceable">date</em><tt class="literal">.getFullYear(
)</tt> <tt class="literal">-1900</tt>. For example, <em class="filename">getYear(
)</em> of 1999 is 99, <em class="filename">getYear( )</em> of 2001
is 101, and <em class="filename">getYear( )</em> of 1800 is -100. This
function is most useful for dates in the
20<sup class="superscript">th</sup> century.</p>



</div>

<a name="INDEX-2539" /><a name="INDEX-2540" /><a name="INDEX-2541" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b><i>

Date.setDate( ) Method</i></b></font></td><td align="right"><i>assign the day of the month
</i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><table width="515" border="0" cellpadding="5"><tr><td align="left" /><td align="right" /></tr></table>
<h4 class="refsect1">Availability</h4>


<p>Flash 5</p>



<h4 class="refsect1">Synopsis</h4>

<blockquote><pre class="code">
<em>date</em>.setDate(<em>day</em>)</pre></blockquote>



<h4 class="refsect2">Arguments</h4>


<dl>
<dt><em>day</em></dt>
<dd><p>An integer from 1 to 31, representing the new day of the month for
<em class="replaceable">date</em>. If you specify a day greater than
the number of days in the current month, it will cause the month to
increment accordingly. For example, if the current
<em class="replaceable">month</em> is 8 (September) and you specify 31
for the new <em class="replaceable">day</em>, it will be treated as
October 1. The <em class="replaceable">day</em> will become 1 and the
<em class="replaceable">month</em> will become 9 (October).</p></dd>

</dl>




<h4 class="refsect2">Returns</h4>


<p>An integer representing the number of milliseconds between the new
date and midnight, January 1, 1970.</p>




<h4 class="refsect1">See Also</h4>


<p><em class="filename">Date.getDate( )</em></p>


</div>

<a name="INDEX-2542" /><a name="INDEX-2543" /><a name="INDEX-2544" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b><i>

Date.setFullYear( ) Method</i></b></font></td><td align="right"><i>assign the century and year in four-digit format
</i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><table width="515" border="0" cellpadding="5"><tr><td align="left" /><td align="right" /></tr></table>
<h4 class="refsect1">Availability</h4>


<p>Flash 5</p>



<h4 class="refsect1">Synopsis</h4>

<blockquote><pre class="code">
<em>date</em>.setFullYear(<em>year, month, day</em>)</pre></blockquote>



<h4 class="refsect2">Arguments</h4>


<dl>
<dt><em>year</em></dt>
<dd><p>A four-digit integer representing the new year for
<em class="replaceable">date</em>, for example 1999 or 2000.</p></dd>

</dl>


<dl>
<dt><em>month</em></dt>
<dd><p>An optional integer from 0
(January) to 11 (December), not 1 to 12, representing the new month
of the year of <em class="replaceable">date</em>. Defaults to
if not specified.</p></dd>

</dl>


<dl>
<dt><em>day</em></dt>
<dd><p>An optional integer from 1 to 31 representing the new day of the
month of <em class="replaceable">date</em>. Defaults to 1 if not
specified.</p></dd>

</dl>




<h4 class="refsect2">Returns</h4>


<p>An integer representing the number of milliseconds between the new
date and midnight, January 1, 1970.</p>




<h4 class="refsect1">See Also</h4>


<p><em class="filename">Date.setYear( )</em>, <em class="filename">Date.getFullYear(
)</em></p>


</div>

<a name="INDEX-2545" /><a name="INDEX-2546" /><a name="INDEX-2547" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b><i>

Date.setHours( ) Method</i></b></font></td><td align="right"><i>assign the hour of the day
</i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><table width="515" border="0" cellpadding="5"><tr><td align="left" /><td align="right" /></tr></table>
<h4 class="refsect1">Availability</h4>


<p>Flash 5</p>



<h4 class="refsect1">Synopsis</h4>

<blockquote><pre class="code">
<em>date</em>.setHours(<em>hour</em>)</pre></blockquote>



<h4 class="refsect2">Arguments</h4>


<dl>
<dt><em>hour</em></dt>
<dd><p>An integer from 0
(midnight) to 23 (11 p.m.) specifying the new hour of the day for
<em class="replaceable">date</em>.</p></dd>

</dl>




<h4 class="refsect2">Returns</h4>


<p>An integer representing the number of milliseconds between the new
date and midnight, January 1, 1970.</p>




<h4 class="refsect1">See Also</h4>


<p><em class="filename">Date.getHours( )</em></p>


</div>

<a name="INDEX-2548" /><a name="INDEX-2549" /><a name="INDEX-2550" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b><i>

Date.setMilliseconds( ) Method</i></b></font></td><td align="right"><i>assign the milliseconds of a date
</i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><table width="515" border="0" cellpadding="5"><tr><td align="left" /><td align="right" /></tr></table>
<h4 class="refsect1">Availability</h4>


<p>Flash 5</p>



<h4 class="refsect1">Synopsis</h4>

<blockquote><pre class="code">
<em>date</em>.setMilliseconds(<em>ms</em>)</pre></blockquote>



<h4 class="refsect2">Arguments</h4>


<dl>
<dt><em>ms</em></dt>
<dd><p>An integer from 0
to 999 representing the new milliseconds of
<em class="replaceable">date</em> not the number of milliseconds since
1970. Values above 999 or below
are carried over to the seconds of <em class="replaceable">date</em> .</p></dd>

</dl>




<h4 class="refsect2">Returns</h4>


<p>An integer representing the number of milliseconds between the new
date and midnight, January 1, 1970.</p>




<h4 class="refsect1">See Also</h4>


<p><em class="filename">Date.getMilliseconds( )</em>, <em class="filename">Date.setTime(
)</em></p>


</div>

<a name="INDEX-2551" /><a name="INDEX-2552" /><a name="INDEX-2553" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b><i>

Date.setMinutes( ) Method</i></b></font></td><td align="right"><i>assign the minutes of a date
</i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><table width="515" border="0" cellpadding="5"><tr><td align="left" /><td align="right" /></tr></table>
<h4 class="refsect1">Availability</h4>


<p>Flash 5</p>



<h4 class="refsect1">Synopsis</h4>

<blockquote><pre class="code">
<em>date</em>.setMinutes(<em>minute</em>)</pre></blockquote>



<h4 class="refsect2">Arguments</h4>


<dl>
<dt><em>minute</em></dt>
<dd><p>An integer from 0
to 59 representing the new minutes of the hour of
<em class="replaceable">date</em> . Values above 59 or below 0
are carried over to the hours of <em class="replaceable">date</em> .</p></dd>

</dl>




<h4 class="refsect2">Returns</h4>


<p>An integer representing the number of milliseconds between the new
date and midnight, January 1, 1970.</p>




<h4 class="refsect1">See Also</h4>


<p><em class="filename">Date.getMinutes( )</em></p>


</div>

<a name="INDEX-2554" /><a name="INDEX-2555" /><a name="INDEX-2556" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b><i>

Date.setMonth( ) Method</i></b></font></td><td align="right"><i>assign the month of the year
</i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><table width="515" border="0" cellpadding="5"><tr><td align="left" /><td align="right" /></tr></table>
<h4 class="refsect1">Availability</h4>


<p>Flash 5</p>



<h4 class="refsect1">Synopsis</h4>

<blockquote><pre class="code">
<em>date</em>.setMonth(<em>month</em>)</pre></blockquote>



<h4 class="refsect2">Arguments</h4>


<dl>
<dt><em>month</em></dt>
<dd><p>An integer from 0
(January) to 11 (December), not from 1 to 12, representing the new
month of the year of <em class="replaceable">date</em>. Values above 11
or below
are carried over to the year of <em class="replaceable">date</em> .</p></dd>

</dl>




<h4 class="refsect2">Returns</h4>


<p>An integer representing the number of milliseconds between the new
date and midnight, January 1, 1970.</p>




<h4 class="refsect1">Usage</h4>


<p>Be careful not to assume that 1 is January! Months start at 0, not 1.</p>



<h4 class="refsect1">See Also</h4>


<p><em class="filename">Date.getMonth( )</em></p>


</div>

<a name="INDEX-2557" /><a name="INDEX-2558" /><a name="INDEX-2559" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b><i>

Date.setSeconds( ) Method</i></b></font></td><td align="right"><i>assign the seconds of a date
</i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><table width="515" border="0" cellpadding="5"><tr><td align="left" /><td align="right" /></tr></table>
<h4 class="refsect1">Availability</h4>


<p>Flash 5</p>



<h4 class="refsect1">Synopsis</h4>

<blockquote><pre class="code">
<em>date</em>.setSeconds(<em>second</em>)</pre></blockquote>



<h4 class="refsect2">Arguments</h4>


<dl>
<dt><em>second</em></dt>
<dd><p>An integer from 0
to 59 representing the new seconds of the minute of
<em class="replaceable">date</em> . Values above 59 or below 0
are carried over to the minutes of <em class="replaceable">date</em> .</p></dd>

</dl>




<h4 class="refsect2">Returns</h4>


<p>An integer representing the number of milliseconds between the new
date and midnight, January 1, 1970.</p>




<h4 class="refsect1">See Also</h4>


<p><em class="filename">Date.getSeconds( )</em></p>


</div>

<a name="INDEX-2560" /><a name="INDEX-2561" /><a name="INDEX-2562" /><a name="INDEX-2563" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b><i>


Date.setTime( ) Method</i></b></font></td><td align="right"><i>assign a new date based on the number of milliseconds between January 1, 1970 and the new date
</i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><table width="515" border="0" cellpadding="5"><tr><td align="left" /><td align="right" /></tr></table>
<h4 class="refsect1">Availability</h4>


<p>Flash 5</p>



<h4 class="refsect1">Synopsis</h4>

<blockquote><pre class="code">
Date.setTime(<em>milliseconds</em>)</pre></blockquote>



<h4 class="refsect2">Arguments</h4>


<dl>
<dt><em>milliseconds</em></dt>
<dd><p>An integer expressing the number of milliseconds between the new
desired date and midnight, January 1, 1970. Positive if after January
1, 1970; negative if before.</p></dd>

</dl>




<h4 class="refsect2">Returns</h4>


<p>The value of <em class="replaceable">milliseconds</em>.</p>




<h4 class="refsect1">Description</h4>


<p>Internally, all dates are represented as the number of milliseconds
between the time of the date and midnight, January 1, 1970. The
<em class="filename">setTime( )</em> method specifies a new date using the
internal millisecond representation. Setting a date using
milliseconds from 1970 is often handy when we're determining
differences between multiple dates and times using <em class="filename">getTime(
)</em>.</p>



<h4 class="refsect1">Example</h4>


<p>Using <em class="filename">setTime( )</em> in concert with
<em class="filename">getTime( )</em> we can adjust the time of an existing
date by adding or subtracting milliseconds. For example, here we add
one hour to a date:</p>


<blockquote><pre class="code">now = new Date( );
now.setTime(now.getTime( ) + 3600000);</pre></blockquote>


<p>And here we add one day:</p>


<blockquote><pre class="code">now = new Date( );
now.setTime(now.getTime( ) + 86400000);</pre></blockquote>


<p>To improve the readability of our code, we create variables
representing the number of milliseconds in an hour and milliseconds
in a day:</p>


<blockquote><pre class="code">oneDay = 86400000;
oneHour = 3600000;
now = new Date( );
// Subtract one day and three hours.
now.setTime(now.getTime( ) - oneDay - (3 * oneHour));</pre></blockquote>



<h4 class="refsect1">See Also</h4>


<p><em class="filename">Date.getTime( )</em>, <em class="filename">Date.setMilliseconds(
)</em>, <em class="filename">Date.UTC( )</em>, <em class="filename">getTimer(
)</em></p>


</div>

<a name="INDEX-2564" /><a name="INDEX-2565" /><a name="INDEX-2566" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b><i>

Date.setUTCDate( ) Method</i></b></font></td><td align="right"><i>assign the day of the month (UTC time)
</i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><table width="515" border="0" cellpadding="5"><tr><td align="left" /><td align="right" /></tr></table>
<h4 class="refsect1">Availability</h4>


<p>Flash 5</p>



<h4 class="refsect1">Synopsis</h4>

<blockquote><pre class="code">
<em>date</em>.setUTCDate(<em>day</em>)</pre></blockquote>



<h4 class="refsect2">Arguments</h4>


<dl>
<dt><em>day</em></dt>
<dd><p>An integer from 1 to 31, representing the new day of the month for
<em class="replaceable">date</em> in UTC time. If you specify a day
greater than the number of days in the current month, it will cause
the month to increment accordingly. For example, if the current
<em class="replaceable">month</em> is 8 (September) and you specify 31
for the new <em class="replaceable">day</em>, it will be treated as
October 1. The <em class="replaceable">day</em> will become 1 and the
<em class="replaceable">month</em> will become 9 (October).</p></dd>

</dl>




<h4 class="refsect2">Returns</h4>


<p>An integer representing the number of milliseconds between the new
date and midnight, January 1, 1970 in UTC time.</p>



</div>

<a name="INDEX-2567" /><a name="INDEX-2568" /><a name="INDEX-2569" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b><i>

Date.setUTCFullYear( ) Method</i></b></font></td><td align="right"><i>assign the century and year infour-digit format (UTC time)
</i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><table width="515" border="0" cellpadding="5"><tr><td align="left" /><td align="right" /></tr></table>
<h4 class="refsect1">Availability</h4>


<p>Flash 5</p>



<h4 class="refsect1">Synopsis</h4>

<blockquote><pre class="code">
<em>date</em>.setUTCFullYear(<em>year</em>)</pre></blockquote>



<h4 class="refsect2">Arguments</h4>


<dl>
<dt><em>year</em></dt>
<dd><p>A four-digit integer representing the new year for
<em class="replaceable">date</em> in UTC time, for example 1999 or
2000.</p></dd>

</dl>




<h4 class="refsect2">Returns</h4>


<p>An integer representing the number of milliseconds between the new
date and midnight, January 1, 1970 in UTC time.</p>



</div>

<a name="INDEX-2570" /><a name="INDEX-2571" /><a name="INDEX-2572" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b><i>

Date.setUTCHours( ) Method</i></b></font></td><td align="right"><i>assign the hour of the day (UTC time)
</i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><table width="515" border="0" cellpadding="5"><tr><td align="left" /><td align="right" /></tr></table>
<h4 class="refsect1">Availability</h4>


<p>Flash 5</p>



<h4 class="refsect1">Synopsis</h4>

<blockquote><pre class="code">
<em>date</em>.setUTCHours(<em>hour</em>)</pre></blockquote>



<h4 class="refsect2">Arguments</h4>


<dl>
<dt><em>hour</em></dt>
<dd><p>An integer from 0
(midnight) to 23 (11 p.m.) representing the new hour of the day for
<em class="replaceable">date</em> in UTC time.</p></dd>

</dl>




<h4 class="refsect2">Returns</h4>


<p>An integer representing the number of milliseconds between the new
date and midnight, January 1, 1970 in UTC time.</p>



</div>

<a name="INDEX-2573" /><a name="INDEX-2574" /><a name="INDEX-2575" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b><i>

Date.setUTCMilliseconds( ) Method</i></b></font></td><td align="right"><i>assign the milliseconds of a date (UTC time)
</i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><table width="515" border="0" cellpadding="5"><tr><td align="left" /><td align="right" /></tr></table>
<h4 class="refsect1">Availability</h4>


<p>Flash 5</p>



<h4 class="refsect1">Synopsis</h4>

<blockquote><pre class="code">
<em>date</em>.setUTCMilliseconds(<em>ms</em>)</pre></blockquote>



<h4 class="refsect2">Arguments</h4>


<dl>
<dt><em>ms</em></dt>
<dd><p>An integer from 0
to 999 representing the new milliseconds of
<em class="replaceable">date</em> in UTC time.</p></dd>

</dl>




<h4 class="refsect2">Returns</h4>


<p>An integer representing the number of milliseconds between the new
date and midnight, January 1, 1970 in UTC time.</p>



</div>

<a name="INDEX-2576" /><a name="INDEX-2577" /><a name="INDEX-2578" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b><i>

Date.setUTCMinutes( ) Method</i></b></font></td><td align="right"><i>assign the minutes of a date (UTC time)
</i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><table width="515" border="0" cellpadding="5"><tr><td align="left" /><td align="right" /></tr></table>
<h4 class="refsect1">Availability</h4>


<p>Flash 5</p>



<h4 class="refsect1">Synopsis</h4>

<blockquote><pre class="code">
<em>date</em>.setUTCMinutes(<em>minute</em>)</pre></blockquote>



<h4 class="refsect2">Arguments</h4>


<dl>
<dt><em>minute</em></dt>
<dd><p>An integer from 0
to 59 representing the new minutes of the hour of
<em class="replaceable">date</em> in UTC time.</p></dd>

</dl>




<h4 class="refsect2">Returns</h4>


<p>An integer representing the number of milliseconds between the new
date and midnight, January 1, 1970 in UTC time.</p>



</div>

<a name="INDEX-2579" /><a name="INDEX-2580" /><a name="INDEX-2581" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b><i>

Date.setUTCMonth( ) Method</i></b></font></td><td align="right"><i>assign the month of the year (UTC time)
</i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><table width="515" border="0" cellpadding="5"><tr><td align="left" /><td align="right" /></tr></table>
<h4 class="refsect1">Availability</h4>


<p>Flash 5</p>



<h4 class="refsect1">Synopsis</h4>

<blockquote><pre class="code">
<em>date</em>.setUTCMonth(<em>month</em>)</pre></blockquote>



<h4 class="refsect2">Arguments</h4>


<dl>
<dt><em>month</em></dt>
<dd><p>An integer from 0
(January) to 11 (December), not from 1 to 12, representing the new
month of the year of <em class="replaceable">date</em> in UTC time.</p></dd>

</dl>




<h4 class="refsect2">Returns</h4>


<p>An integer representing the number of milliseconds between the new
date and midnight, January 1, 1970 in UTC time.</p>




<h4 class="refsect1">Usage</h4>


<p>Be careful not to assume that 1 is January! Months start at 0, not 1.</p>


</div>

<a name="INDEX-2582" /><a name="INDEX-2583" /><a name="INDEX-2584" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b><i>

Date.setUTCSeconds( ) Method</i></b></font></td><td align="right"><i>assign the seconds of a date (UTC time)
</i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><table width="515" border="0" cellpadding="5"><tr><td align="left" /><td align="right" /></tr></table>
<h4 class="refsect1">Availability</h4>


<p>Flash 5</p>



<h4 class="refsect1">Synopsis</h4>

<blockquote><pre class="code">
<em>date</em>.setUTCSeconds(<em>second</em>)</pre></blockquote>



<h4 class="refsect2">Arguments</h4>


<dl>
<dt><em>second</em></dt>
<dd><p>An integer from 0
to 59 representing the new seconds of the minute of
<em class="replaceable">date</em> in UTC time.</p></dd>

</dl>




<h4 class="refsect2">Returns</h4>


<p>An integer representing the number of milliseconds between the new
date and midnight, January 1, 1970 in UTC time.</p>



</div>

<a name="INDEX-2585" /><a name="INDEX-2586" /><a name="INDEX-2587" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b><i>

Date.setYear( ) Method</i></b></font></td><td align="right"><i>assign the year, relative to 1900
</i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><table width="515" border="0" cellpadding="5"><tr><td align="left" /><td align="right" /></tr></table>
<h4 class="refsect1">Availability</h4>


<p>Flash 5</p>



<h4 class="refsect1">Synopsis</h4>

<blockquote><pre class="code">
<em>date</em>.setYear(<em>year, month, day</em>)</pre></blockquote>



<h4 class="refsect2">Arguments</h4>


<dl>
<dt><em>year</em></dt>
<dd><p>A required integer specifying the new year of <em class="replaceable">date
</em>. If one or two digits are supplied, the year is
assumed to be in the 20th century. For example, 1 is the year 1901,
and 99 is the year 1999. Three-digit years are assumed to be pre-1000
A.D. Use four digits to specify the year 2000 and later.</p></dd>

</dl>


<dl>
<dt><em>month</em></dt>
<dd><p>An optional integer from 0
(January) to 11 (December), not from 1 to 12, representing the new
month of the year of <em class="replaceable">date</em>.</p></dd>

</dl>


<dl>
<dt><em>day</em></dt>
<dd><p>An optional integer from 1 to 31 representing the new day of the
month of <em class="replaceable">date</em>.</p></dd>

</dl>




<h4 class="refsect2">Returns</h4>


<p>An integer representing the number of milliseconds between the new
date and midnight, January 1, 1970.</p>




<h4 class="refsect1">Description</h4>

<p><em class="filename">setYear( )</em> is identical to <em class="filename">setFullYear( )</em> except that it interprets one- and two-digit years as being relative to 1900 whereas <em class="filename">setFullYear( )</em> interprets them as being relative to 0 A.D.</p>



<h4 class="refsect1">See Also</h4>


<p><em class="filename">Date.getYear( )</em>, <em class="filename">Date.setFullYear(
)</em></p>


</div>

<a name="INDEX-2588" /><a name="INDEX-2589" /><a name="INDEX-2590" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b><i>
Date.toString( ) Method</i></b></font></td><td align="right"><i>a human-readable string representing the date
</i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><table width="515" border="0" cellpadding="5"><tr><td align="left" /><td align="right" /></tr></table>
<h4 class="refsect1">Availability</h4>


<p>Flash 5</p>



<h4 class="refsect1">Synopsis</h4>

<blockquote><pre class="code">
<em>date</em>.toString()</pre></blockquote>



<h4 class="refsect2">Returns</h4>


<p>A string giving the current time and date of
<em class="replaceable">date</em> in human-readable format, including
the UTC (<a name="INDEX-2590" />GMT)
offset. To compose customized representations of the date, use the
methods for retrieving the day, hours, minutes, and so on, and map
those values onto your own strings, as shown earlier in the example
under <em class="emphasis">Date</em> class.</p>




<h4 class="refsect1">Example</h4>


<blockquote><pre class="code">trace (myDate.toString( )); // Displays a date in the format:
                           // Wed Sep 15 12:11:33 GMT-0400 1999</pre></blockquote>


</div>

<a name="INDEX-2591" /><a name="INDEX-2592" /><a name="INDEX-2593" /><a name="INDEX-2594" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b><i>
Date.UTC( ) Class 
Method</i></b></font></td><td align="right"><i>retrieve the number of milliseconds between January 1, 1970 and a supplied UTC date
</i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><table width="515" border="0" cellpadding="5"><tr><td align="left" /><td align="right" /></tr></table>
<h4 class="refsect1">Availability</h4>


<p>Flash 5</p>



<h4 class="refsect1">Synopsis</h4>

<blockquote><pre class="code">
Date.UTC(<em>year, month, day, hours, minutes, seconds, ms</em>)</pre></blockquote>



<h4 class="refsect2">Arguments</h4>


<dl>
<dt><em>year,...ms</em></dt>
<dd><p>A series of numeric values describing the date and time but supplied
in UTC time, not local time. For descriptions of each argument see
the <em class="filename">Date( )</em> constructor.</p></dd>

</dl>




<h4 class="refsect2">Returns</h4>


<p>The number of milliseconds between the specified date and midnight,
January 1, 1970.</p>




<h4 class="refsect1">Description</h4>


<p>The <em class="filename">Date.UTC( )</em> method takes the same arguments
as the <em class="filename">Date( )</em> constructor, but instead of
returning an object for the specified date, <em class="filename">Date.UTC(
)</em> returns a number indicating the date in the internal
milliseconds-from-1970 format. The returned number is typically used
to construct a new <em class="filename">Date</em> object in UTC or to
assign a UTC time to an existing <em class="emphasis">Date</em> object via
the <em class="filename">setTime( )</em> method.</p>



<h4 class="refsect1">Example</h4>


<p>The following code shows how to measure the milliseconds elapsed
between midnight 1970 and midnight 2000 in UTC time:</p>


<blockquote><pre class="code">trace(Date.UTC(2000, 0) + " milliseconds passed between 1970 and 2000.");
// Displays: "946684800000 milliseconds passed between 1970 and 2000."</pre></blockquote>


<p>Here we use those elapsed milliseconds to construct a UTC-time-based
<em class="filename">Date</em> object:</p>


<blockquote><pre class="code">nowUTC = new Date(Date.UTC(2000, 0));</pre></blockquote>


<p>If that code were invoked in EST (Eastern Standard Time), which is 5
hours behind UTC, <tt class="literal">nowUTC</tt> would represent the local
time 7p.m. on December 31, 1999. When we check the hour using the
non-UTC method <em class="filename">getHours( )</em>, we get the local
hour, 19 (7p.m. in a 24-hour clock):</p>


<blockquote><pre class="code">trace(nowUTC.getHours( ));  // Displays: 19</pre></blockquote>


<p>But when we check the hour using the UTC method
<em class="filename">getUTCHours( )</em>, we get the correct UTC hour,
(midnight in a 24-hour clock):</p>


<blockquote><pre class="code">trace(nowUTC.getUTCHours( ));  // Displays: 0</pre></blockquote>



<h4 class="refsect1">See Also</h4>


<p><em class="filename">Date( )</em>, <em class="filename">Date.setTime( )</em>,
the <em class="emphasis">Date</em> class</p>


</div>

<a name="INDEX-2595" /><a name="INDEX-2596" /><a name="INDEX-2597" /><a name="INDEX-2598" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b><i>
Date.valueOf( ) 
Method</i></b></font></td><td align="right"><i>the number of milliseconds between January 1, 1970 and the time of the Date object
</i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><table width="515" border="0" cellpadding="5"><tr><td align="left" /><td align="right" /></tr></table>
<h4 class="refsect1">Availability</h4>


<p>Flash 5</p>



<h4 class="refsect1">Synopsis</h4>

<blockquote><pre class="code">
<em>date</em>.valueOf()</pre></blockquote>



<h4 class="refsect2">Returns</h4>


<p>An integer expressing the number of milliseconds between the time of
the <em class="filename">Date</em> object and midnight, January 1, 1970.
Positive if after January 1, 1970; negative if before.</p>




<h4 class="refsect1">Description</h4>


<p>In practice, <em class="filename">Date.valueOf( )</em> is equivalent to
<em class="filename">Date.getTime( )</em>.</p>



<h4 class="refsect1">See Also</h4>


<p><em class="filename">Date.toString( )</em></p>


</div>

<a name="INDEX-2599" /><a name="INDEX-2600" /><a name="INDEX-2601" /><a name="INDEX-2602" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b><i>duplicateMovieClip( ) Global Function</i></b></font></td><td align="right"><i>create a copy of a movie clip
</i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><table width="515" border="0" cellpadding="5"><tr><td align="left" /><td align="right" /></tr></table>
<h4 class="refsect1">Availability</h4>


<p><a name="INDEX-2600" />Flash 4 and later</p>



<h4 class="refsect1">Synopsis</h4>

<blockquote><pre class="code">
duplicateMovieClip(<em>target, newName, depth</em>)</pre></blockquote>



<h4 class="refsect2">Arguments</h4>


<dl>
<dt><em>target</em></dt>
<dd><p>A string indicating the path to the movie clip to duplicate (known as
the <em class="emphasis">seed clip</em><a name="INDEX-2601" /> <a name="INDEX-2602" />). Nested
clips may be referred to with dot syntax, as in
<em class="emphasis">duplicateMovieClip("_root.myClip", "myClip2",
0)</em>. Because a movie clip reference is converted to a path
when used in a string context, <em class="replaceable">target</em> may
also be a movie clip object reference, as in
<em class="emphasis">duplicateMovieClip(myClip, "myClip2", 0)</em>.</p></dd>

</dl>


<dl>
<dt><em>newName</em></dt>
<dd><p>A string that will become the instance name of the duplicated clip.
The string used must adhere to the rules for creating an identifier
outlined in <a href="ch14_05.htm">Section 14.5, "Identifiers"</a> in <a href="ch14_01.htm">Chapter 14, "Lexical Structure"</a>.</p></dd>

</dl>


<dl>
<dt><em>depth</em></dt>
<dd><p>An integer indicating the level in the programmatic clip stack on
which to place the duplicated clip. Clips on lower levels are placed
visually behind clips on higher levels. The movie clip with the
highest <em class="replaceable">depth</em> in a stack obscures all the
clips below it. For example, a clip on
<em class="replaceable">depth</em> -1 appears behind a clip on
<em class="replaceable">depth</em> 0, which appears behind a clip on
<em class="replaceable">depth</em> 1. If the assigned
<em class="replaceable">depth</em> is occupied, the occupant clip is
removed, and the new duplicate takes its place. See <a href="ch13_01.htm">Chapter 13, "Movie Clips"</a> for additional details. Negative depths are
functional, but not officially supported by ActionScript; to ensure
future compatibility, use depths of 0
or greater.</p></dd>

</dl>




<h4 class="refsect1">Description</h4>


<p>The <em class="filename">duplicateMovieClip( )</em> function is one way to
create a new movie clip during movie playback (the other is
<em class="filename">attachMovie( )</em>). <em class="filename">duplicateMovieClip(
)</em> creates an identical copy of
<em class="replaceable">target</em> and places the copy in
<em class="replaceable">target</em>'s clip stack on layer
<em class="replaceable">depth</em>. The duplicated clip begins playing
at frame 1 no matter what the frame of
<em class="replaceable">target</em> is when duplication occurs.</p>


<p>A duplicated clip inherits any transformations (rotation, scale,
etc.) that had been applied to <em class="replaceable">target</em> but
does not inherit the timeline variables of
<em class="replaceable">target</em>. The global function
<em class="filename">duplicateMovieClip( )</em> is also available as a
movie clip method, though when used in that form, the
<em class="replaceable">target</em> argument is not used.</p>



<h4 class="refsect1">Example</h4>


<blockquote><pre class="code">// Copies the ball clip and names the copy ball2
duplicateMovieClip(ball, "ball2", 0);
// Moves the new ball2 clip over so we can see it
ball2._x += 100;</pre></blockquote>



<h4 class="refsect1">See Also</h4>


<p><em class="filename">MovieClip.duplicateMovieClip( )</em>,
<em class="filename">removeMovieClip( )</em>; <a href="ch13_03.htm">Section 13.3.2.2, "Creating instances with duplicateMovieClip( )"</a>, <a href="ch13_04.htm">Section 13.4.2.2, "How clips generated via duplicateMovieClip( ) are added to the stack"</a>,
and <a href="ch13_08.htm">Section 13.8.3.1, "Method versus global function overlap issues"</a> in <a href="ch13_01.htm">Chapter 13, "Movie Clips"</a></p>


</div>

<a name="INDEX-2603" /><a name="INDEX-2604" /><a name="INDEX-2605" /><a name="INDEX-2606" /><a name="INDEX-2607" /><a name="INDEX-2608" /><a name="INDEX-2609" /><a name="INDEX-2610" /><a name="INDEX-2611" /><a name="INDEX-2612" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b><i>




escape( ) Global Function</i></b></font></td><td align="right"><i>encode a string for safe network transfer
</i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><table width="515" border="0" cellpadding="5"><tr><td align="left" /><td align="right" /></tr></table>
<h4 class="refsect1">Availability</h4>


<p>Flash 5</p>



<h4 class="refsect1">Synopsis</h4>

<blockquote><pre class="code">
escape(<em>string</em>)</pre></blockquote>



<h4 class="refsect2">Arguments</h4>


<dl>
<dt><em>string</em></dt>
<dd><p>A string (or an expression that yields a string) to be encoded.</p></dd>

</dl>




<h4 class="refsect2">Returns</h4>


<p>An (almost) URL-encoded version of <em class="replaceable">string</em>.</p>




<h4 class="refsect1">Description</h4>


<p>The <em class="filename">escape( )</em> function creates a new encoded
string based on a supplied string. The new string contains a
hexadecimal escape sequence in place of any character in the supplied
string that is not a digit or a basic, unaccented Latin letter
between A and Z or a and z. The replacement hexadecimal escape
sequences take the format <tt class="literal">%xx</tt>, where
<tt class="literal">xx</tt> is the hexadecimal value of the
character's <a name="INDEX-2609" /> <a name="INDEX-2610" />code point in the Latin 1 character set.
<a name="INDEX-2611" /> <a name="INDEX-2612" />Shift-JIS double-byte characters are
converted to two hexadecimal escape sequences of the form
<tt class="literal">%xx%xx</tt>.</p>


<p>The <em class="filename">escape( )</em> function effectively URL-encodes a
string, except that space characters are converted to
<tt class="literal">%20</tt>, not <tt class="literal">+</tt>. <em class="filename">escape(
)</em> is sometimes used when a Flash movie sends information
to server applications or writes cookies in a browser.</p>


<p>To decode an encoded string, we use the global <em class="filename">unescape(
)</em> function.</p>



<h4 class="refsect1">Example</h4>


<blockquote><pre class="code">var phoneNumber = "(222) 515-1212"
escape(phoneNumber);  // yields %28222%29%20515%2D1212</pre></blockquote>



<h4 class="refsect1">See Also</h4>


<p><em class="filename">unescape( )</em>; <a href="appb_01.htm">Appendix B, "Latin 1 Character Repertoire and Keycodes"</a></p>


</div>

<a name="INDEX-2613" /><a name="INDEX-2614" /><a name="INDEX-2615" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b><i>

eval( ) Global Function</i></b></font></td><td align="right"><i>convert a string to an identifier
</i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><table width="515" border="0" cellpadding="5"><tr><td align="left" /><td align="right" /></tr></table>
<h4 class="refsect1">Availability</h4>


<p>Flash 4 and later</p>



<h4 class="refsect1">Synopsis</h4>

<blockquote><pre class="code">
eval(<em>stringExpression</em>)</pre></blockquote>



<h4 class="refsect2">Arguments</h4>


<dl>
<dt><em>stringExpression</em></dt>
<dd><p>A string or an expression that yields a string. Should match the name
of some identifier.</p></dd>

</dl>




<h4 class="refsect1">Returns</h4>


<p>The value of the variable represented by
<em class="replaceable">stringExpression</em> or a reference to the
object, movie clip, or function represented by
<em class="replaceable">stringExpression</em>. If
<em class="replaceable">stringExpression</em> does not represent a
variable or a movie clip, <tt class="literal">undefined</tt> is returned.</p>



<h4 class="refsect1">Description</h4>


<p>The <em class="filename">eval( )</em> function provides a means of
constructing a dynamic reference to an identifier based on a string
of text. <em class="filename">eval( )</em> converts a string to a
variable, movie clip, object property, or other identifier and then
evaluates that identifier. For example, here we use the return value
of <em class="filename">eval( )</em> to set the value of a variable:</p>


<blockquote><pre class="code">name1 = "Kathy";
count = 1;
currentName = eval("name" + count);     // Sets currentName to "Kathy"</pre></blockquote>


<p>And here we control a dynamically-named movie clip,
<tt class="literal">star1</tt>:</p>


<blockquote><pre class="code">eval("star" + count)._x += 100;         // Move star1 right 100 pixels</pre></blockquote>


<p>But we may also use an <em class="filename">eval( )</em> invocation in
place of an identifier that is the lefthand operand of an assignment
expression, as in:</p>


<blockquote><pre class="code">eval("name" + count) = "Simone";        // Sets name1 to "Simone"</pre></blockquote>


<p>Note that, unlike its JavaScript cousin, <em class="filename">eval( )</em>
in ActionScript does not allow for the compiling and execution of
arbitrary blocks of code in a string. Full support of <em class="filename">eval(
)</em> would require an ActionScript compiler in the Player,
which would cause too great an increase in the Player size.</p>



<h4 class="refsect1">Usage</h4>


<p>As of Flash 5, <em class="filename">eval( )</em> is rarely needed for
dynamic variable access. When managing multiple pieces of data, use
arrays and objects instead.</p>



<h4 class="refsect1">Example</h4>


<p>The <em class="filename">eval( )</em> function is often used to convert
the <em class="emphasis">MovieClip</em><tt class="literal">._droptarget</tt>
string property to a movie clip object reference. In the following
example, suppose we have a series of cartoon face clips. When the
user drops a <tt class="literal">food</tt> clip onto one of the faces, we
retrieve the path to the face in question using
<tt class="literal">_droptarget</tt>, then we use <em class="filename">eval(
)</em> to retrieve an object reference to that face. Finally,
we send the face to a frame showing the mouth full of food:</p>


<blockquote><pre class="code">// Convert _droptarget string to a reference
theFace = eval(food._droptarget);
// Control appropriate face clip using converted reference
theFace.gotoAndStop("full");</pre></blockquote>



<h4 class="refsect1">See Also</h4>


<p>See <a href="ch04_06.htm">Section 4.6.10, "Executing Code in a String with eval"</a> in <a href="ch04_01.htm">Chapter 4, "Primitive Datatypes"</a></p>


</div>

<a name="INDEX-2616" /><a name="INDEX-2617" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b><i>
_focusrect Global Property</i></b></font></td><td align="right"><i>the highlight state used for buttons activated via the keyboard
</i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><table width="515" border="0" cellpadding="5"><tr><td align="left" /><td align="right" /></tr></table>
<h4 class="refsect1">Availability</h4>


<p>Flash 4 and later</p>



<h4 class="refsect1">Synopsis</h4>

<blockquote><pre class="code">
_focusrect</pre></blockquote>



<h4 class="refsect1">Access</h4>


<p>Read/write</p>



<h4 class="refsect1">Description</h4>


<p>When the mouse hovers over a button in Flash, the content of the
button's Over state is displayed. Buttons can also gain
keyboard focus when the user presses the Tab key. When a button has
keyboard focus, Flash places a yellow rectangle over that button,
which is not always aesthetically desirable. You can turn off the
yellow highlight rectangle using the <tt class="literal">_focusrect</tt>
global property, like so:</p>


<blockquote><pre class="code">_focusrect = false;</pre></blockquote>


<p>When <tt class="literal">_focusrect</tt> is set to
<tt class="literal">false</tt>, Flash displays the Over state of
keyboard-focused buttons. When <tt class="literal">_focusrect</tt> is set
to <tt class="literal">true</tt> (its default), Flash displays the yellow
rectangle.</p>



<h4 class="refsect1">Usage</h4>


<p>Though <tt class="literal">_focusrect</tt> is used in a Boolean sense, it
actually stores a number, not a Boolean. Although there's
rarely a reason to do so, if we examine the value of
<tt class="literal">_focusrect</tt>, it returns either 1 (indicating
<tt class="literal">true</tt>) or
(indicating <tt class="literal">false</tt>).</p>


</div>

<a name="INDEX-2618" /><a name="INDEX-2619" /><a name="INDEX-2620" /><a name="INDEX-2621" /><a name="INDEX-2622" /><a name="INDEX-2623" /><a name="INDEX-2624" /><a name="INDEX-2625" /><a name="INDEX-2626" /><a name="INDEX-2627" /><a name="INDEX-2628" /><a name="INDEX-2629" /><a name="INDEX-2630" /><a name="INDEX-2631" /><a name="INDEX-2632" /><a name="INDEX-2633" /><a name="INDEX-2634" /><a name="INDEX-2635" /><a name="INDEX-2636" /><a name="INDEX-2637" /><a name="INDEX-2638" /><a name="INDEX-2639" /><a name="INDEX-2640" /><a name="INDEX-2641" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b><i>fscommand( ) Global Function</i></b></font></td><td align="right"><i>send a message to the standalone Player or to the Player's host application
</i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><table width="515" border="0" cellpadding="5"><tr><td align="left" /><td align="right" /></tr></table>
<h4 class="refsect1">Availability</h4>


<p><a name="INDEX-2618" />
<a name="INDEX-2619" />Flash
3 <a name="INDEX-2620" />
<a name="INDEX-2621" /> <a name="INDEX-2622" />and later (enhanced in Flash 5 to
include <tt class="literal">trapallkeys</tt>)</p>



<h4 class="refsect1">Synopsis</h4>

<blockquote><pre class="code">
fscommand(<em>command, arguments</em>)</pre></blockquote>



<h4 class="refsect2">Arguments</h4>


<dl>
<dt><em>command</em></dt>
<dd><p>A string passed to the host application, often the name of a
JavaScript function.</p></dd>

</dl>


<dl>
<dt><em>arguments</em></dt>
<dd><p>A string passed to the host application, often an argument to the
function named by <em class="replaceable">command</em>.</p></dd>

</dl>




<h4 class="refsect1">Description</h4>


<p>With the <em class="filename">fscommand( )</em> function, a Flash movie
can communicate with the standalone Player or with the Player's
host application -- the environment in which the Flash Player is
running (e.g., a web browser or Macromedia Director). The
<em class="filename">fscommand( )</em> function is typically used in one
of three ways:</p>


<ul><li><p>To send one of a limited set of built-in commands to the standalone
Flash Player</p></li></ul>
<ul><li><p>To send commands to a scripting language such as JavaScript or
VBScript in a web browser</p></li></ul>
<ul><li><p>To communicate with
<a name="INDEX-2623" />Lingo in a Macromedia
<a name="INDEX-2624" />Director movie</p></li></ul>
<p>When used with the standalone Player, <em class="filename">fscommand(
)</em> takes one of the built-in sets of <em class="replaceable">command
</em>/<em class="replaceable">argument</em> pairs, as shown in
<a href="ch20_05.htm">Table 20-5</a>.</p>


<a name="ch20-12213" /><h4 class="objtitle">Table 20-5. command/argument Pairs in Standalone Player </h4><table border="1">




<tr>
<th>
<p>Command</p></th>
<th>
<p>Argument</p></th>
<th>
<p>Description</p></th>
</tr>




<tr>
<td>
<p><tt class="literal">"allowscale"</tt><a name="INDEX-2625" /></p></td>
<td>
<p><tt class="literal">"true"</tt> or <tt class="literal">"false"</tt></p></td>
<td>
<p>When <tt class="literal">"false"</tt>, prevents the contents of a movie
from growing or shrinking in relation to the window size of the
Player. <tt class="literal">"allowscale"</tt> is often used in combination
with <tt class="literal">"fullscreen"</tt> to create a Projector that
occupies the entire screen while maintaining the movie's
original size.</p></td>
</tr>

<tr>
<td>
<p><tt class="literal">"exec"</tt><a name="INDEX-2626" /></p></td>
<td>
<p><tt class="literal">"application_name"</tt></p></td>
<td>
<p>Launches an external application. The path to the application is
specified in the string <em class="replaceable">application_name</em>.
The path is resolved relative to the Flash movie unless
<em class="replaceable">application_name</em> is specified as an
absolute path such as: <tt class="literal">"C:/WINDOWS/NOTEPAD.EXE"</tt>.
Note that the path uses <em class="emphasis">forward slashes</em> (
<tt class="literal">/</tt> ), not backslashes ( <tt class="literal">\</tt> ).</p></td>
</tr>

<tr>
<td>
<p><tt class="literal">"fullscreen"</tt><a name="INDEX-2627" /></p></td>
<td>
<p><tt class="literal">"true"</tt> or <tt class="literal">"false"</tt></p></td>
<td>
<p>When <tt class="literal">"true"</tt>, causes the Player window to maximize,
filling the user's entire screen.</p></td>
</tr>

<tr>
<td>
<p><tt class="literal">"quit"</tt><a name="INDEX-2628" /></p></td>
<td>
<p>not applicable</p></td>
<td>
<p>Closes the movie and exits the Flash projector (standalone Player).</p></td>
</tr>

<tr>
<td>
<p><tt class="literal">"showmenu"</tt><a name="INDEX-2629" /></p></td>
<td>
<p><tt class="literal">"true"</tt> or <tt class="literal">"false"</tt></p></td>
<td>
<p>When <tt class="literal">"false"</tt>, suppresses the display of the
controls in the context menu of the Player, leaving only the About
Macromedia Flash Player option. The context menu is accessed via
right-click on Windows and Ctrl-click on Macintosh.</p></td>
</tr>

<tr>
<td>
<p><tt class="literal">"trapallkeys"</tt><a name="INDEX-2630" /></p></td>
<td>
<p><tt class="literal">"true"</tt> or <tt class="literal">"false"</tt></p></td>
<td>
<p>When <tt class="literal">"true"</tt>, causes all keystrokes -- even
keyboard shortcuts -- to be sent to the Flash movie.
<tt class="literal">trapallkeys</tt> is used to disable the control keys in
the standalone Player (e.g., Ctrl-F or Command-F for Full Screen
mode, Ctrl-Q or Command-Q for Exit, Esc for Stop/exit Full Screen
mode, etc.). Added to <em class="filename">fscommand</em> in Flash 5.</p></td>
</tr>


</table>


<p>When used in a browser, the execution of an <em class="filename">fscommand(
)</em> function in a movie causes the invocation of a special
JavaScript function (Netscape) or VBScript function (Internet
Explorer) on the page that contains the movie. The name of this
special function takes the general form
<em class="replaceable">movieID</em><em class="filename">_DoFSCommand</em>
where <em class="replaceable">movieID</em> is the name specified in the
movie's <tt class="literal">OBJECT ID</tt> attribute (Internet
Explorer) or <tt class="literal">EMBED NAME</tt> attribute (Netscape) from
the host HTML document. When
<em class="replaceable">movieID</em><em class="filename">_DoFSCommand(
)</em> is invoked, the values of the <em class="filename">fscommand( )
</em>'s <tt class="literal">command</tt> and
<tt class="literal">arguments</tt> parameters are passed to the
<em class="replaceable">movieID</em><em class="filename">_DoFSCommand(
)</em> function as arguments. If no
<em class="replaceable">movieID</em><em class="filename">_DoFSCommand(
)</em> function exists in the host page, <em class="filename">fscommand(
)</em> fails silently.</p>


<p>Note that in order for <em class="filename">fscommand( )</em> to work with
Netscape, the <tt class="literal">swLiveConnect</tt> attribute of the
movie's <tt class="literal">EMBED</tt> tag must be set to
<tt class="literal">"true"</tt>. For example:</p>


<blockquote><pre class="code">&lt;EMBED
  NAME="testmovie"
  SRC="myMovie.swf"
  WIDTH="100%"
  HEIGHT="100%"
<tt class="userinput"><b>  swLiveConnect="true"</b></tt>
  PLUGINSPAGE="http://www.macromedia.com/go/flashplayer/"
&lt;/EMBED&gt;</pre></blockquote>



<h4 class="refsect1">Usage</h4>


<p>It is <em class="emphasis">not</em> possible to communicate with a browser
via <em class="filename">fscommand( )</em> under the following system
configurations:</p>


<ul><li><p>Internet Explorer on the Macintosh OS</p></li></ul>
<ul><li><p>Any browser running on a 68K-series Macintosh</p></li></ul>
<ul><li><p>Any browser running on Windows 3.1</p></li></ul>
<ul><li><p>Netscape 6</p></li></ul>
<p>Note that <em class="filename">fscommand( )</em> does not always provide
the best means of communicating with a Director movie from Flash. The
preferred director communication device is a <em class="filename">getURL(
)</em> function with either the <tt class="literal">event:</tt> or
<tt class="literal">lingo:</tt> protocol. For details, see the
<em class="filename">getURL( )</em> function or the following Macromedia
tech notes:</p>


<blockquote class="simplelist">

<p><a href="../../../../../../www.macromedia.com/support/director/ts/documents/flash_xtra_sending_events.htm">http://www.macromedia.com/support/director/ts/documents/flash_xtra_sending_events.htm</a></p>

</blockquote>


<blockquote class="simplelist">

<p><a href="../../../../../../www.macromedia.com/support/director/ts/documents/flash_xtra_lingo.htm">http://www.macromedia.com/support/director/ts/documents/flash_xtra_lingo.htm</a></p>

</blockquote>


<blockquote class="simplelist">

<p><a href="../../../../../../www.macromedia.com/support/director/ts/documents/flash_tips.htm">http://www.macromedia.com/support/director/ts/documents/flash_tips.htm</a></p>

</blockquote>



<h4 class="refsect1">Example</h4>


<p>To quit a <a name="INDEX-2631" /> <a name="INDEX-2632" />
<a name="INDEX-2633" />standalone Projector, use:</p>


<blockquote><pre class="code">fscommand("quit");</pre></blockquote>


<p>To create a standalone Projector that runs fullscreen, use:</p>


<blockquote><pre class="code">fscommand("fullscreen", "true");</pre></blockquote>


<p>To create a standalone Projector that runs fullscreen but maintains
the original movie's size, use:</p>


<blockquote><pre class="code">fscommand("fullscreen", "true");
fscommand("allowscale", "false");</pre></blockquote>


<p>For information on launching a movie in a fullscreen
<a name="INDEX-2634" /> <a name="INDEX-2635" />web <a name="INDEX-2636" />browser window, see
<a href="../../../../../../www.moock.org/webdesign/flash/launchwindow/fullscreen">http://www.moock.org/webdesign/flash/launchwindow/fullscreen</a>.</p>


<p>To launch Notepad on most Windows systems, use:</p>


<blockquote><pre class="code">fscommand("exec", "C:/WINDOWS/NOTEPAD.EXE");</pre></blockquote>


<p>The following code shows an HTML page with the JavaScript and
VBScript needed to respond to a simple <em class="filename">fscommand(
)</em> from a movie. Notice that the VBScript function simply
calls the JavaScript function; this allows us to handle both Internet
Explorer and Netscape with a single JavaScript function:</p>


<blockquote><pre class="code">&lt;HTML&gt;
&lt;HEAD&gt;
&lt;TITLE&gt;fscommand demo&lt;/TITLE&gt;

&lt;SCRIPT LANGUAGE="JavaScript"&gt; 
&lt;!--  
function testmovie_DoFSCommand(command, args) { 
  alert("Here's the Flash message " + command + ", " + args);
}
//--&gt; 
&lt;/SCRIPT&gt; 

&lt;SCRIPT LANGUAGE="VBScript"&gt;
&lt;!-- 
Sub testmovie_FSCommand(ByVal command, ByVal args)
    call testmovie_DoFSCommand(command, args)
end sub
//--&gt;
&lt;/SCRIPT&gt;

&lt;/HEAD&gt;

&lt;BODY BGCOLOR="#FFFFFF"&gt;

&lt;OBJECT
  ID="testmovie"
  CLASSID="clsid:D27CDB6E-AE6D-11cf-96B8-444553540000"
  WIDTH="100%"
  HEIGHT="100%"
  CODEBASE="http://download.macromedia.com/pub/shockwave/cabs/flash/swflash.cab"&gt;
  &lt;PARAM NAME="MOVIE" VALUE="flash-to-javascript.swf"&gt;

  &lt;EMBED
    NAME="testmovie"
    SRC="flash-to-javascript.swf"
    WIDTH="100%"
    HEIGHT="100%"
    swLiveConnect="true"
    PLUGINSPAGE="http://www.macromedia.com/go/flashplayer/"
  &lt;/EMBED&gt;
&lt;/OBJECT&gt;

&lt;/BODY&gt;
&lt;/HTML&gt;</pre></blockquote>


<p>To invoke the preceding <em class="filename">testmovie_DoFSCommand( )</em>
JavaScript function from the
<em class="filename">flash-to-javascript.swf</em> movie, we'd use:</p>


<blockquote><pre class="code">fscommand("hello", "world");</pre></blockquote>



<h4 class="refsect1">See Also</h4>


<p>For more information on <em class="filename">fscommand( )</em> and
controlling Flash with JavaScript, <a name="INDEX-2637" /> <a name="INDEX-2638" />see:</p>


<blockquote class="simplelist">

<p><a href="../../../../../../www.moock.org/webdesign/flash/fscommand">http://www.moock.org/webdesign/flash/fscommand</a></p>

</blockquote>


<blockquote class="simplelist">

<p><a name="INDEX-2639" />
<a name="INDEX-2640" />
<a name="INDEX-2641" /><a href="../../../../../../www.macromedia.com/support/flash/publishexport/scriptingwithflash">http://www.macromedia.com/support/flash/publishexport/scriptingwithflash</a></p>

</blockquote>


</div>

<a name="INDEX-2642" /><a name="INDEX-2643" /><a name="INDEX-2644" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b><i>

getProperty( ) Global Function</i></b></font></td><td align="right"><i>retrieve the value of a movie clip property
</i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><table width="515" border="0" cellpadding="5"><tr><td align="left" /><td align="right" /></tr></table>
<h4 class="refsect1">Availability</h4>


<p>Flash 4; deprecated in Flash 5</p>



<h4 class="refsect1">Synopsis</h4>

<blockquote><pre class="code">
getProperty(<em>movieClip, property</em>)</pre></blockquote>



<h4 class="refsect2">Arguments</h4>


<dl>
<dt><em>movieClip</em></dt>
<dd><p>An expression that yields a string indicating the path to a movie
clip. In Flash 5, this may also be a movie clip reference because
movie clip references are converted to paths when used in a string
context.</p></dd>

</dl>


<dl>
<dt><em>property</em></dt>
<dd><p>The name of the built-in property to retrieve. Must be an identifier,
not a string (e.g., <tt class="literal">_x</tt>, not
<tt class="literal">"_x"</tt>).</p></dd>

</dl>




<h4 class="refsect2">Returns</h4>


<p>The value of <em class="replaceable">movieClip</em>'s
<em class="replaceable">property</em>.</p>




<h4 class="refsect1">Description</h4>


<p>The <em class="filename">getProperty( )</em> function retrieves the value
of one of a movie clip's built-in properties. Though
<em class="filename">getProperty( )</em> was the only way to access object
properties in Flash 4, the <tt class="literal">.</tt> and
<tt class="literal">[]</tt> operators are the preferred property-access
tools in Flash 5 and later.</p>



<h4 class="refsect1">Example</h4>


<p>Each of the following <em class="filename">getProperty( )</em> invocations
retrieve the values of the <tt class="literal">_x</tt> property of a movie
clip named <tt class="literal">ball</tt> on the main movie timeline:</p>


<blockquote><pre class="code">getProperty(ball, _x);             // Relative movie clip reference
getProperty(_root.ball, _x);       // Absolute movie clip reference
getProperty("ball", _x);           // Relative path in string
getProperty("_root.ball", _x);     // Dot path in string
getProperty("/ball", _x);          // Slash path in string</pre></blockquote>


<p>The following code shows similar property access using the dot and [
] operators:</p>


<blockquote><pre class="code">ball._x;
_root.ball._x;
ball["_x"];
_root["ball"]["_x"];</pre></blockquote>



<h4 class="refsect1">See Also</h4>


<p><em class="filename">setProperty( ) </em>; <a href="ch13_01.htm">Section 13.1, "The "Objectness" of Movie Clips"</a> in <a href="ch13_01.htm">Chapter 13, "Movie Clips"</a></p>


</div>

<a name="INDEX-2645" /><a name="INDEX-2646" /><a name="INDEX-2647" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b><i>

getTimer( ) Global Function</i></b></font></td><td align="right"><i>determine the age of a movie, in milliseconds
</i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><table width="515" border="0" cellpadding="5"><tr><td align="left" /><td align="right" /></tr></table>
<h4 class="refsect1">Availability</h4>


<p>Flash 4 and later</p>



<h4 class="refsect1">Synopsis</h4>

<blockquote><pre class="code">
getTimer()</pre></blockquote>



<h4 class="refsect2">Returns</h4>


<p>The number of milliseconds that have passed since the movie started
playing.</p>




<h4 class="refsect1">Description</h4>


<p>The <em class="filename">getTimer( )</em> function indicates how long a
movie has been playing, in milliseconds. We can use multiple
<em class="filename">getTimer( )</em> checks to govern the timed execution
of a block of code or to add time-based features to a movie, such as
a countdown in a video game. For example, when attached to a movie
clip that contains a text field named
<tt class="literal">counterOutput</tt>, the following code counts down from
60 to 0:</p>


<blockquote><pre class="code">onClipEvent (load) {
  // Record the current time
  var startTime = getTimer( );
  // Set the number of seconds to count down
  var countAmount = 60;
  // Initialize a variable to keep track of how much time has passed
  var elapsed = 0;
}

onClipEvent (enterFrame) {
  // Check how much time has passed
  elapsed = getTimer( ) - startTime;
  // If the time passed is less than the length of our countdown...
  if (elapsed &lt; countAmount * 1000) {
    // ...set the text field to show the amount of time left
    counterOutput = countAmount - Math.floor(elapsed / 1000);
  } else {
    // ...otherwise, our countdown is done, so tell the user
    counterOutput = "Time's UP!";
  }
}</pre></blockquote>


<p>To determine the number of full seconds that have passed in a movie
(rather than milliseconds), divide the return of <em class="filename">getTimer(
)</em> by 1000 and trim off the decimal portion with either
<em class="filename">Math.floor( )</em>, <em class="filename">Math.round(
)</em>, or <em class="filename">Math.ceil( )</em>. For example:</p>


<blockquote><pre class="code">numSeconds = Math.floor(getTimer( )/1000);</pre></blockquote>



<h4 class="refsect1">Example</h4>


<p>The following code loops between two frames until a movie is more
than 10 seconds old and then plays the movie:</p>


<blockquote><pre class="code">now = getTimer( );
if (now &gt; 10000) {
  play( );
} else {
  gotoAndPlay(_currentframe - 1);
}</pre></blockquote>



<h4 class="refsect1">See Also</h4>


<p><em class="filename">Date( )</em>, the <em class="emphasis">Date</em> class</p>


</div>

<a name="INDEX-2648" /><a name="INDEX-2649" /><a name="INDEX-2650" /><a name="INDEX-2651" /><a name="INDEX-2652" /><a name="INDEX-2653" /><a name="INDEX-2654" /><a name="INDEX-2655" /><a name="INDEX-2656" /><a name="INDEX-2657" /><a name="INDEX-2658" /><a name="INDEX-2659" /><a name="INDEX-2660" /><a name="INDEX-2661" /><a name="INDEX-2662" /><a name="INDEX-2663" /><a name="INDEX-2664" /><a name="INDEX-2665" /><a name="INDEX-2666" /><a name="INDEX-2667" /><a name="INDEX-2668" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b><i>

getURL( ) Global Function</i></b></font></td><td align="right"><i>load a document into a browser, execute server-sidescripts, or trigger Macromedia Director events
</i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><table width="515" border="0" cellpadding="5"><tr><td align="left" /><td align="right" /></tr></table>
<h4 class="refsect1">Availability</h4>


<p><a name="INDEX-2651" />Flash <a name="INDEX-2652" /> <a name="INDEX-2653" />2 and Flash 3; enhanced in Flash 4 to
include <em class="replaceable">method</em> parameter; Flash 5</p>



<h4 class="refsect1">Synopsis</h4>

<blockquote><pre class="code">
getURL (<em>URL</em>)
getURL (<em>URL, window</em>)
getURL (<em>URL, window, method</em>)</pre></blockquote>



<h4 class="refsect2">Arguments</h4>


<dl>
<dt><em>URL</em></dt>
<dd><p>A string specifying the absolute or relative location of the document
to load or external script to run.</p></dd>

</dl>


<dl>
<dt><em>window</em></dt>
<dd><p>An optional string specifying the name of the browser window or frame
into which to load the document. May be a custom name or one of the
four presets: <tt class="literal">"_blank"</tt>,
<tt class="literal">"_parent"</tt>, <tt class="literal">"_self"</tt>, or
<tt class="literal">"_top"</tt>.</p></dd>

</dl>


<dl>
<dt><em>method</em></dt>
<dd><p>An optional string specifying the method by which to send the current
timeline's variables to an external script -- either
<tt class="literal">"GET"</tt> or <tt class="literal">"POST"</tt>. This parameter
must be a literal string, not a variable or other expression. The
standalone version of the Flash Player always uses the
<tt class="literal">"GET"</tt> method, regardless of the
<em class="replaceable">method</em> specified.</p></dd>

</dl>




<h4 class="refsect1">Description</h4>


<p>The <em class="filename">getURL( )</em> function is used to:</p>


<ul><li><p>Load a document (usually a web page) into a web browser frame or
window</p></li></ul>
<ul><li><p>Execute a server-side script and receive the results in a browser
frame or window</p></li></ul>
<ul><li><p>Execute JavaScript code in a web browser</p></li></ul>
<ul><li><p>Trigger events from Flash assets imported as sprites into Director</p></li></ul>
<p>To load a document into the current window or frame, simply specify
the URL of the document without supplying a
<em class="replaceable">window</em> or
<em class="replaceable">method</em> argument. Naturally, Flash supports
absolute URLs (those that contain a protocol such as
"http:" plus a server name or hardware device) and
relative URLs (those that are relative to the current location):</p>


<blockquote><pre class="code">getURL("http://www.moock.org/");                  // Absolute URL to web page
getURL("file:///C|/WINDOWS/Desktop/index.html");  // Absolute URL to local file
getURL("/whatever/index.html");                   // Relative URL, http protocol
                                                  //is assumed</pre></blockquote>


<p>To load a document into a named window or frame, supply the window or
frame name as the <em class="replaceable">window</em> argument. For
example:</p>


<blockquote><pre class="code">getURL("http://www.moock.org/", "contentFrame");  // Load into named frame
getURL("http://www.moock.org/", "remoteWin");     // Load into named window</pre></blockquote>


<p>To replace the frameset that contains the current movie, use
<tt class="literal">"_ parent"</tt> as the value of the
<em class="replaceable">window</em> argument. For example:</p>


<blockquote><pre class="code">getURL("http://www.moock.org/", "_parent");</pre></blockquote>


<p>To replace <em class="emphasis">all</em> framesets in a web page with a
loaded document, use <tt class="literal">"_top"</tt> as the value of the
<em class="replaceable">window</em> argument. For example:</p>


<blockquote><pre class="code">getURL("http://www.moock.org/", "_top");</pre></blockquote>


<p>To open a loaded document in a new, anonymous browser window, use
<tt class="literal">"_blank"</tt> as the value of the
<em class="replaceable">window</em> argument. For example:</p>


<blockquote><pre class="code">getURL("http://www.moock.org/", "_blank");</pre></blockquote>


<p>Note that launching a new window with <tt class="literal">"_blank"</tt>
does not give us any control over the appearance of the new window
(size, toolbar configuration, location, etc.). To launch customized
windows with <em class="filename">getURL( )</em>, we must invoke a
JavaScript function on the movie's host page. JavaScript
window-launching techniques are described at <a href="../../../../../../www.moock.org/webdesign/flash">http://www.moock.org/webdesign/flash</a>.</p>


<p>The <em class="filename">getURL( )</em> function may also be used to send
variables to a remote server application or script. To send the
current movie clip's timeline variables to an external script,
specify the name of the script as the <em class="replaceable">URL</em>
argument, and use either <tt class="literal">"GET"</tt> or
<tt class="literal">"POST"</tt> as the value of the
<em class="replaceable">method</em> argument. For example:</p>


<blockquote><pre class="code">getURL("http://www.someserver.com/cgi-bin/search.pl", "resultsFrame", "GET");</pre></blockquote>


<p>When invoked as a movie clip method, <em class="filename">getURL( )</em>
sends the timeline variables of that clip, as in:</p>


<blockquote><pre class="code">// Sends myClip's variables to search.pl
myClip.getURL("http://www.server.com/cgi-bin/search.pl", "resultsFrame", "GET");</pre></blockquote>


<p>The results of the script execution will appear in the window or
frame specified in the <em class="filename">getURL( ) </em>'s
<em class="replaceable">window</em> argument (which is required when
variables are submitted).</p>


<p>To load the results of a script execution into the current frame or
window, use <tt class="literal">"_self"</tt> as the
<em class="replaceable">window</em> argument value, as in:</p>


<blockquote><pre class="code">getURL("http://www.someserver.com/cgi-bin/search.pl", "_self", "GET");</pre></blockquote>


<p>When the <em class="replaceable">method</em> argument is
<tt class="literal">"GET"</tt>, the current movie clip timeline variables
are sent as a query string attached to the script URL in an HTTP GET
request. Query strings are composed of variable name/value pairs,
separated by ampersands (&amp;). For example:</p>


<blockquote><pre class="code">http://www.someserver.com/cgi-bin/search.pl?term=javascript&amp;scope=entiresite</pre></blockquote>


<p>When the <em class="replaceable">method</em> argument is
<tt class="literal">"POST"</tt>, the current movie clip timeline variables
are sent to the script as a separate block of data after the HTTP
POST-request header (exactly like a regular HTML form that uses the
POST method). Note that <tt class="literal">"POST"</tt> is not available in
the standalone Flash Player.</p>


<p>Because most web servers restrict the length of URLs to between 255
and 1024 characters, use <tt class="literal">"POST"</tt> instead of
<tt class="literal">"GET"</tt> to transfer larger amounts of data.</p>


<p>Note that any returned information sent by a script invoked by
<em class="filename">getURL( )</em> is displayed as regular web content in
the browser, not in Flash. To accept the results of a script
execution into Flash, use <em class="filename">loadVariables( )</em>.</p>


<p>The <em class="filename">getURL( )</em> function can also be used with
protocols other than "http:" as shown in <a href="ch20_05.htm">Table 20-6</a>.</p>


<a name="ch20-36638" /><h4 class="objtitle">Table 20-6. Supported Protocols for <em class="filename">getURL</em> </h4><table border="1">




<tr>
<th>
<p>Protocol</p></th>
<th>
<p>Format</p></th>
<th>
<p>Purpose</p></th>
</tr>




<tr>
<td>
<p><a name="INDEX-2654" />event</p></td>
<td>
<p>"event: <em class="replaceable">eventName</em>
<em class="replaceable">params</em>"</p></td>
<td>
<p>Send an event to Director if the Flash asset is a Director sprite.</p></td>
</tr>

<tr>
<td>
<p><a name="INDEX-2655" />file</p></td>
<td>
<p>"file:///driveSpec/folder/filename"</p></td>
<td>
<p>Access a local file.</p></td>
</tr>

<tr>
<td>
<p><a name="INDEX-2656" />ftp</p></td>
<td>
<p>"ftp://server.domain.com/folder/filename"</p></td>
<td>
<p>Access a remote file via FTP (file transfer protocol).</p></td>
</tr>

<tr>
<td>
<p><a name="INDEX-2657" />http</p></td>
<td>
<p>"http://server.domain.com/folder/filename"</p></td>
<td>
<p>Access remote file via HTTP (hypertext transfer protocol).</p></td>
</tr>

<tr>
<td>
<p><a name="INDEX-2658" />javascript</p></td>
<td>
<p>"javascript: <em class="replaceable">command</em> "</p></td>
<td>
<p>Perform JavaScript command in browser.</p></td>
</tr>

<tr>
<td>
<p><a name="INDEX-2659" />lingo</p></td>
<td>
<p>"lingo: <em class="replaceable">comand</em> "</p></td>
<td>
<p>Perform Lingo command if Flash asset is a Director sprite.</p></td>
</tr>

<tr>
<td>
<p><a name="INDEX-2660" />print</p></td>
<td>
<p>"print:", "<em class="replaceable">targetClip</em> "</p></td>
<td>
<p>Prints in Flash 4, prior to the availability of the <em class="filename">print(
)</em> function in Flash 5.</p></td>
</tr>

<tr>
<td>
<p><a name="INDEX-2661" />vbscript</p></td>
<td>
<p>"vbscript: <em class="replaceable">command</em> "</p></td>
<td>
<p>Perform VBScript command in browser.</p></td>
</tr>


</table>


<p>As <a href="ch20_05.htm">Table 20-6</a> shows, if the Flash asset is imported
into a Macromedia Director file, <em class="filename">getURL( )</em> can
be used to trigger Lingo events or execute a Lingo command. (Lingo is
Director's scripting language, akin to ActionScript). For
example, you can add a frame event of this form:</p>


<blockquote><pre class="code">getURL ("event: eventName params");</pre></blockquote>


<p>which will cause the Lingo event handler named <em class="filename">on
eventName</em> to be called in Director. Here is a
<em class="filename">getURL( )</em> statement that generates an event
named "myEvent" and passes it the string "A".
Note that the <tt class="literal">"</tt> character is escaped using the
sequence <tt class="literal">\"</tt>:</p>


<blockquote><pre class="code">getURL ("event: myEvent \"A\"");  // Send an event to Director</pre></blockquote>


<p>Here is the Lingo
<em class="emphasis">sprite</em><a name="INDEX-2662" /> event handler that should be attached
to the Flash sprite asset in Director in order to receive the event.
Note that a Director sprite is roughly equivalent to a Flash movie
clip instance; the Lingo keyword <em class="filename">put</em> is akin to
ActionScript's <em class="filename">trace( )</em> command, and
<tt class="literal">&amp;&amp;</tt> is Lingo's string concatenation
operator:</p>


<blockquote><pre class="code">on myEvent msg
  put "The message received from Flash was " &amp;&amp; msg
end</pre></blockquote>


<p>You can also trigger Lingo to be executed from a Flash sprite within
Director using the <tt class="literal">"lingo:"</tt> keyword, such as:</p>


<blockquote><pre class="code">getURL ("lingo: beep");  // Tell Director to play a beep sound</pre></blockquote>


<p>Note that Director 8.0 cannot import Flash 5
<em class="filename">.swf</em> files, but an updated Flash asset Xtra is
expected to be available by the time you read this.</p>


<p>Finally, <em class="filename">getURL( )</em> can also be used to execute
JavaScript code. Here we invoke a simple JavaScript
<em class="filename">alert</em> using <em class="filename">getURL( )</em>:</p>


<blockquote><pre class="code">getURL ("javascript: alert('hello world');");</pre></blockquote>


<p>Note that execution of JavaScript code from a URL does not work in
Internet Explorer 4.5 for Macintosh.</p>



<h4 class="refsect1">Example</h4>


<p>Here's the code for a standard button that links to a web page:</p>


<blockquote><pre class="code">on (release) {
  getURL("http://www.macromedia.com/");
}</pre></blockquote>



<h4 class="refsect1">Bugs</h4>


<p>Internet Explorer 4.5 (IE 4.5) and older versions on Macintosh do not
support the <tt class="literal">"POST"</tt> method of a <em class="filename">getURL(
)</em> call. To service those browsers, use
<tt class="literal">"GET"</tt> instead of <tt class="literal">"POST"</tt>
(subject to the length limitations cited earlier).</p>


<p>In most browsers, <em class="filename">getURL( )</em> relative links are
resolved relative to the HTML file that contains the
<em class="filename">.swf</em> file. In IE 4.5 and older versions on
Macintosh, relative<em class="filename"> </em>links are resolved relative
to the location of the <em class="filename">.swf</em> file, not the HTML
file, which causes problems when the two are in different
directories. To avoid the problem, either place the
<em class="filename">.swf</em> and the <em class="filename">.html</em> file in
the same directory or use absolute URLs when invoking
<em class="filename">getURL( )</em>, such as:</p>


<blockquote><pre class="code">getURL ("http://www.someserver.com/")</pre></blockquote>



<h4 class="refsect1">See Also</h4>


<p><a name="INDEX-2663" />
<a name="INDEX-2664" /><em class="filename">loadVariables(
)</em>, <em class="filename">MovieClip.getURL( )</em>, <a name="INDEX-2665" /> <a name="INDEX-2666" /> <a name="INDEX-2667" /><em class="filename">movieClip.loadVariables(
)</em>; <a href="ch18_05.htm">Section 18.5.7, "&lt; A&gt; (Anchor or Hypertext Link)"</a> <a name="INDEX-2668" />in <a href="ch18_01.htm">Chapter 18, "On-Screen Text Fields"</a></p>


</div>

<a name="INDEX-2669" /><a name="INDEX-2670" /><a name="INDEX-2671" /><a name="INDEX-2672" /><a name="INDEX-2673" /><a name="INDEX-2674" /><a name="INDEX-2675" /><a name="INDEX-2676" /><a name="INDEX-2677" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b><i>



getVersion( ) Global Function</i></b></font></td><td align="right"><i>examine the platform and version of the Flash Player
</i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><table width="515" border="0" cellpadding="5"><tr><td align="left" /><td align="right" /></tr></table>
<h4 class="refsect1">Availability</h4>


<p>Flash 5</p>



<h4 class="refsect1">Synopsis</h4>

<blockquote><pre class="code">
getVersion()</pre></blockquote>



<h4 class="refsect2">Returns</h4>


<p>A string containing version and platform information for the Flash
Player hosting the current movie.</p>




<h4 class="refsect1">Description</h4>


<p>The <em class="filename">getVersion( )</em> function tells us the platform
and Flash Player version being used to view a movie. It can be used
to conditionally execute different code for specific versions of the
Flash Player or on certain operating systems. The string returned by
<em class="filename">getVersion( )</em> takes the form:</p>


<blockquote><pre class="code">platform majorVersion,minorVersion,buildNumber,patch</pre></blockquote>


<p>Where <em class="replaceable">platform</em> is a code indicating the
platform (<tt class="literal">"WIN"</tt>, <tt class="literal">"MAC"</tt>, or
<tt class="literal">"UNIX"</tt>), followed by the major version number, the
minor version number, and the build (a.k.a. revision) number. The
last item, <em class="replaceable">patch</em>, is typically 0. For
example:</p>


<blockquote><pre class="code">WIN 5,0,30,0   // Version 5.0, Build 30 (5.0r30) on Windows 
MAC 5,0,41,0   // Version 5.0, Build 41 (5.0r41) on Macintosh
UNIX 4,0,12,0  // Version 4.0, Build 12 (4.0r12) on Unix</pre></blockquote>


<p>Despite the Macromedia documentation's claim to the contrary,
<em class="filename">getVersion( )</em> does work in the Flash authoring
tool's Test Movie mode. It reports the version number of the
<em class="emphasis">Player</em> embedded in the authoring tool (which is
not the same as the version of the authoring tool itself). For
example, the Flash 5 authoring tool embeds the 5.0 r30 version of the
Player, so its <em class="filename">getVersion( )</em> function reports:</p>


<blockquote><pre class="code">WIN 5,0,30,0
or
MAC 5,0,30,0</pre></blockquote>


<p>Any time a major or minor version of the authoring tool is created,
the <em class="replaceable">buildNumber</em> restarts at 0. However, in
the typical development cycle of the Flash authoring tool, many
builds of the Flash Player are produced before the final version of
the authoring tool is released. The build number of the first new
major version of a Player is, hence, usually greater than 0. For
example, the Flash 5 Player was first officially released at Build
30. Presumably, when Flash 6 is introduced, the Flash 6 Player will
return something like:</p>


<blockquote><pre class="code">WIN 6,0,xx,0</pre></blockquote>


<p>but if a movie created in Flash 6 is played back in the Flash 5
Player, <em class="filename">getVersion( )</em> would still return:</p>


<blockquote><pre class="code">WIN 5,0,30,0</pre></blockquote>


<p>Typically, we're concerned with only the platform, the major
version, and the build number of a Player. To extract the portion of
the <em class="filename">getVersion( )</em> string we're after, we
may use the string manipulation tools described in <a href="ch04_01.htm">Chapter 4, "Primitive Datatypes"</a>, or we may construct a custom object with each
component of the <em class="filename">getVersion( )</em> string assigned
to a property of that object as shown in the next example.</p>


<p>Unless we need to produce internal blocks of ActionScript code for a
specific version of the Flash Player, JavaScript and VBScript provide
better tools for version detection, browser sniffing, and automatic
page redirection. Furthermore, you can't use
<em class="filename">getVersion( )</em> unless the user already has
version 5.0 or later of the Player. For details on detecting the
Flash Player's presence and version with JavaScript and
VBScript, see <a href="../../../../../../www.moock.org/webdesign/flash/detection/moockfpi">http://www.moock.org/webdesign/flash/detection/moockfpi</a>.</p>



<h4 class="refsect1">Example</h4>


<p>The following code extracts the various portions of the string
returned by <em class="filename">getVersion( )</em> and stores them as the
properties of an object for easy access:</p>


<blockquote><pre class="code">// Split up the getVersion( ) string into usable pieces
var version = getVersion( );
var firstSpace = version.indexOf(" ");
var tempString = version.substring(firstSpace + 1, version.length);
var tempArray = tempString.split(",");

// Assign the various parts of the getVersion( ) string to our object.
// Note that we convert the version number portions to integers.
var thePlayer = new Object( );
thePlayer.platform = version.substring(0,firstSpace);
thePlayer.majorVersion = parseInt(tempArray[0]);
thePlayer.minorVersion = parseInt(tempArray[1]);
thePlayer.build = parseInt(tempArray[2]);
thePlayer.patch = parseInt(tempArray[3]);

// Now use our object to perform version-specific code
if (thePlayer.platform == "WIN") {
  // Perform Windows-specific code here.
} else if (thePlayer.platform == "MAC") {
  // Perform Mac-specific code here.
} else if (thePlayer.platform == "UNIX") {
  // Perform Unix-specific code here.
}

if ((thePlayer.majorVersion == 5) &amp;&amp; (thePlayer.build == 30))  {
  trace ("I recommend upgrading your player to avoid text display bugs");
}</pre></blockquote>



<h4 class="refsect1">See Also</h4>


<p><a name="INDEX-2674" />
<a name="INDEX-2675" />
<a name="INDEX-2676" />
<a name="INDEX-2677" /><tt class="literal">$version</tt>; <a href="appc_01.htm">Appendix C, "Backward Compatibility"</a></p>


</div>

<a name="INDEX-2678" /><a name="INDEX-2679" /><a name="INDEX-2680" /><a name="INDEX-2681" /><a name="INDEX-2682" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b><i>gotoAndPlay( ) Global Function</i></b></font></td><td align="right"><i>move the playhead to a given frame, then play the current clip or movie
</i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><table width="515" border="0" cellpadding="5"><tr><td align="left" /><td align="right" /></tr></table>
<h4 class="refsect1">Availability</h4>


<p>Flash 2 and later</p>



<h4 class="refsect1">Synopsis</h4>

<blockquote><pre class="code">
gotoAndPlay(<em>frameNumber</em>)
gotoAndPlay(<em>frameLabel</em>)
gotoAndPlay(<em>scene, frameNumber</em>)
gotoAndPlay(<em>scene, frameLabel</em>)</pre></blockquote>



<h4 class="refsect2">Arguments</h4>


<dl>
<dt><em>frameNumber</em></dt>
<dd><p>A <a name="INDEX-2679" />positive
<a name="INDEX-2680" />
<a name="INDEX-2681" />integer indicating the number of
the frame to which the playhead of the current timeline should
proceed before playing. If <tt class="literal">frameNumber</tt> is less
than 1 or greater than the number of frames in the timeline, the
playhead is sent to either the first or last frame, respectively.</p></dd>

</dl>


<dl>
<dt><em>frameLabel</em></dt>
<dd><p>A string indicating the label of the frame to which the playhead of
the current timeline should proceed before playing. If
<em class="replaceable">frameLabel</em> is not found, the playhead is
sent to the first frame of the timeline.</p></dd>

</dl>


<dl>
<dt><em>scene</em></dt>
<dd><p>An optional string indicating the name of the scene that contains the
specified <em class="replaceable">frameNumber</em> or
<em class="replaceable">frameLabel</em>. If not supplied, the current
scene is assumed.</p></dd>

</dl>




<h4 class="refsect1">Description</h4>


<p>When invoked without a <em class="replaceable">scene</em> argument,
<em class="filename">gotoAndPlay( )</em> sends the playhead of the current
timeline to the frame specified by either the
<em class="replaceable">frameNumber</em> or
<em class="replaceable">frameLabel</em> and then plays the timeline
from that point. The "current timeline" is the movie clip
or movie from which the <em class="filename">gotoAndPlay( )</em> function
is invoked.</p>


<p>If two arguments are specified in the <em class="filename">gotoAndPlay(
)</em> function call, the first argument is assumed to be the
<em class="replaceable">scene</em>. If only one argument is specified,
it is treated as a <em class="replaceable">frameNumber</em> or
<em class="replaceable">frameLabel</em>, and the current scene is
assumed.</p>


<p>When invoked with a <em class="replaceable">scene</em> argument,
<em class="filename">gotoAndPlay( )</em> moves the playhead to the frame
number or label in the specified scene and then plays that scene. If
a <em class="replaceable">scene</em> argument is used, the
<em class="filename">gotoAndPlay( )</em> function
<em class="emphasis">must</em> be invoked from the
<tt class="literal">_root</tt> timeline; otherwise, the operation fails
silently and the playhead is not sent to the destination frame. Note
that scenes are flattened into a single timeline during movie
playback. That is, if scene 1's timeline contains 20 frames,
and scene 2's timeline contains 10 frames, then we can send the
playhead to frame 5 of scene 2 using
<tt class="literal">gotoAndPlay(25);</tt>.</p>




<a name="ch20-486-fm2xml" /><blockquote><h4>TIP</h4>
<p>I recommend against using scenes when working with
ActionScript-intensive movies. Unlike movie clips, scenes are not
represented by objects and cannot be manipulated directly by most
built-in functions. It's normally better to use labels and
movie clips as pseudo-scenes in your timeline instead of
Flash's scene feature.</p>

</blockquote>

<p>The global <em class="filename">gotoAndPlay( )</em> function affects only
the current timeline. The frames or state of other movie clips within
the current timeline are not affected. To cause other movie clips to
play, you must issue a separate <em class="filename">play( )</em> or
<em class="filename">gotoAndPlay( )</em> command for each movie clip. To
apply the <em class="filename">gotoAndPlay( )</em> function to a clip
other than the current movie clip, use the movie clip method form,
<em class="replaceable">myClip</em><tt class="literal">.gotoAndPlay( )</tt>.</p>



<h4 class="refsect1">Bugs</h4>


<p>In <a name="INDEX-2682" />Build 5.0r30 of the Flash Player,
<em class="filename">gotoAndPlay( )</em> did not work when used in an
<em class="filename">onClipEvent( )</em> handler with a string literal for
<em class="replaceable">frameLabel</em>. To work around the bug, use
the movie clip variation of the function using
<tt class="literal">this</tt> to indicate the current clip, as in
<tt class="literal">this.gotoAndPlay("myLabel")</tt>, rather than
<tt class="literal">gotoAndPlay("myLabel")</tt>.</p>



<h4 class="refsect1">Example</h4>


<blockquote><pre class="code">// Go to frame 5 of the current timeline and play it
gotoAndPlay(5);
// Go to frame 10 of the exitSequence scene, and play it
gotoAndPlay("exitSequence", 10);
// Go to frame "goodbye" of the exitSequence scene, and play it
gotoAndPlay("exitSequence", "goodbye");
// Caution! This plays the frame labeled "exitSequence" in the current scene.
gotoAndPlay("exitSequence");
// This plays frame 1 of the exitSequence scene
gotoAndPlay("exitSequence", 1);</pre></blockquote>



<h4 class="refsect1">See Also</h4>


<p><em class="filename">gotoAndStop( )</em>,<em class="filename"> MovieClip.gotoAndPlay(
)</em>, <em class="filename">play( )</em>,<em class="filename"> stop(
)</em></p>


</div>

<a name="INDEX-2683" /><a name="INDEX-2684" /><a name="INDEX-2685" /><a name="INDEX-2686" /><a name="INDEX-2687" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b><i>

gotoAndStop( ) Global Function</i></b></font></td><td align="right"><i>move the playhead to a given frame and stop the current clip
</i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><table width="515" border="0" cellpadding="5"><tr><td align="left" /><td align="right" /></tr></table>
<h4 class="refsect1">Availability</h4>


<p>Flash 2 and later</p>



<h4 class="refsect1">Synopsis</h4>

<blockquote><pre class="code">
gotoAndStop(<em>frameNumber</em>)
gotoAndStop(<em>frameLabel</em>)
gotoAndStop(<em>scene, frameNumber</em>)
gotoAndStop(<em>scene, frameLabel</em>)</pre></blockquote>



<h4 class="refsect2">Arguments</h4>


<dl>
<dt><em>frameNumber</em></dt>
<dd><p>A positive integer indicating the number of the frame to which the
playhead of the current timeline should proceed. If
<tt class="literal">frameNumber</tt> is less than 1 or greater than the
number of frames in the timeline, the playhead is sent to either the
first or last frame, respectively.</p></dd>

</dl>


<dl>
<dt><em>frameLabel</em></dt>
<dd><p>A string indicating the label of the frame to which the playhead of
the current timeline should proceed. If
<em class="replaceable">frameLabel</em> is not found, the playhead is
sent to the first frame of the timeline.</p></dd>

</dl>


<dl>
<dt><em>scene</em></dt>
<dd><p>An optional string indicating the name of the scene that contains the
specified <em class="replaceable">frameNumber</em> or
<em class="replaceable">frameLabel</em>. If not supplied, the current
scene is assumed.</p></dd>

</dl>




<h4 class="refsect1">Description</h4>


<p>When invoked without a <em class="replaceable">scene</em> argument,
<em class="filename">gotoAndStop( )</em> sends the playhead of the current
timeline to the frame specified by either the
<em class="replaceable">frameNumber</em> or
<em class="replaceable">frameLabel</em> argument. The "current
timeline" is the movie or movie clip from which the
<em class="filename">gotoAndStop( )</em> function is invoked. The playhead
will stop at the target frame; it will not advance automatically
after arriving at the target frame.</p>


<p>If two arguments are specified in the <em class="filename">gotoAndStop(
)</em> function call, the first argument is assumed to be the
<em class="replaceable">scene</em>. If only one argument is specified,
it is treated as a <em class="replaceable">frameNumber</em> or
<em class="replaceable">frameLabel</em>, and the current scene is
assumed.</p>


<p>When invoked with a <em class="replaceable">scene</em> argument,
<em class="filename">gotoAndStop( )</em> moves the playhead to the frame
number or label in the specified scene and then halts playback. If a
<em class="replaceable">scene</em> argument is used, the
<em class="filename">gotoAndStop( )</em> function
<em class="emphasis">must</em> be invoked from the
<tt class="literal">_root</tt> timeline; otherwise, the operation fails
silently and the playhead is not sent to the destination frame.</p>


<p>The global <em class="filename">gotoAndStop( )</em> function affects only
the current timeline. The frames or state of other movie clips within
the current timeline are not affected. To move the playhead of other
movie clips, you must issue a separate <em class="filename">gotoAndStop( )
</em>command for each movie clip. To apply the
<em class="filename">gotoAndStop( )</em> function to a clip besides the
current movie clip, use the movie clip method of the form
<em class="replaceable">myClip</em><tt class="literal">.gotoAndStop( )</tt>.</p>



<h4 class="refsect1">Bugs</h4>


<p>In <a name="INDEX-2686" />Build 5.0r30 of the Flash 5 Player,
<em class="filename">gotoAndStop( )</em> did not work when used in an
<em class="filename">onClipEvent( )</em> handler with a string literal for
<em class="replaceable">frameLabel</em>. To work around the bug, use
the movie clip variation of the function using
<tt class="literal">this</tt> to indicate the current clip, as in
<tt class="literal">this.gotoAndStop("myLabel")</tt>, rather than
<tt class="literal">gotoAndStop("myLabel")</tt>.</p>



<h4 class="refsect1">Example</h4>


<blockquote><pre class="code">// Go to frame 5 of the current timeline and stop there
gotoAndStop(5);
// Go to frame 20 of the introSequence scene and stop there
gotoAndStop("introSequence", 20);
// Go to frame "hello" of the introSequence scene, and stop there
gotoAndStop("introSequence", "hello")
// Caution! This goes to the frame labeled "introSequence" in the current scene
gotoAndStop("introSequence")
// This goes to frame 1 of the introSequence scene
gotoAndStop("introSequence", 1)</pre></blockquote>



<h4 class="refsect1">See Also</h4>


<p><a name="INDEX-2687" /><em class="filename">gotoAndPlay(
)</em>,<em class="filename"> MovieClip.gotoAndStop(
)</em>,<em class="filename"> play( )</em>,<em class="filename"> stop(
)</em></p>


</div>

<a name="INDEX-2688" /><a name="INDEX-2689" /><a name="INDEX-2690" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b><i>

_highquality Global Property</i></b></font></td><td align="right"><i>the rendering quality of the Player
</i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><table width="515" border="0" cellpadding="5"><tr><td align="left" /><td align="right" /></tr></table>
<h4 class="refsect1">Availability</h4>


<p>Flash 4; deprecated in Flash 5 in favor of <tt class="literal">_quality</tt></p>



<h4 class="refsect1">Synopsis</h4>

<blockquote><pre class="code">
_highquality</pre></blockquote>



<h4 class="refsect1">Access</h4>


<p>Read/write</p>



<h4 class="refsect1">Description</h4>


<p><tt class="literal">The _highquality</tt> global property stores an integer
between 0
and 2 that dictates the rendering quality of the Flash Player as
follows:</p>


<dl>
<dt><em>0</em></dt>
<dd><p>Low quality. Neither bitmaps nor vectors are antialiased (smoothed).</p></dd>

</dl>


<dl>
<dt><em>1</em></dt>
<dd><p>High quality. Vectors are antialiased. Bitmaps are antialiased when
no animation is occurring.</p></dd>

</dl>


<dl>
<dt><em>2</em></dt>
<dd><p>Best quality. Both bitmaps and vectors are always antialiased.</p></dd>

</dl>


<p>As of Flash 5, <tt class="literal">_highquality</tt> has been superseded by
<tt class="literal">_quality</tt>, which may be used to set a movie's
quality to "Medium", as well as "Low",
"High", and "Best".</p>



<h4 class="refsect1">See Also</h4>


<p><tt class="literal">_quality</tt>,<em class="filename"> toggleHighQuality( )</em></p>


</div>

<a name="INDEX-2691" /><a name="INDEX-2692" /><a name="INDEX-2693" /><a name="INDEX-2694" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b><i>


#include Directive</i></b></font></td><td align="right"><i>import the text of an external ActionScript file
</i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><table width="515" border="0" cellpadding="5"><tr><td align="left" /><td align="right" /></tr></table>
<h4 class="refsect1">Availability</h4>


<p>Flash 5</p>



<h4 class="refsect1">Synopsis</h4>

<blockquote><pre class="code">
#include path</pre></blockquote>



<h4 class="refsect2">Arguments</h4>


<dl>
<dt><em>path</em></dt>
<dd><p>A string indicating the name and location of the script file to
import, which may be specified relative to the
<em class="filename">.fla</em> file or as an absolute path (see samples
under Example). Note that forward slashes, not backslashes should be
used in the path. Script files should be named with the
<em class="filename">.as</em> file extension.</p></dd>

</dl>




<h4 class="refsect1">Description</h4>


<p>The<em class="filename"> </em><tt class="literal">#include</tt> directive brings
script text from an external text file (preferably one with the
<em class="filename">.as</em> extension) into the current script, placing
it directly where the <tt class="literal">#include</tt> command occurs in
the script. The <em class="filename">#include</em> operation is performed
at compile time, meaning that the text included in a movie is the
text that existed at the time the movie was tested, exported, or
published from the authoring tool. If the external file changes after
the movie is exported, the changes will not be reflected in the
movie. In order for the changes to be added to the movie, the movie
must be re-exported.</p>


<p>The <tt class="literal">#include</tt> directive is used to incorporate the
same block of code in multiple scripts or across Flash projects (much
as you'd use an external asset library). You would do this in
order to centralize your code, when maintaining code in a
version-control system tool (such as CVS or Microsoft Visual Source
Safe), or when using an external text editor that you prefer over the
ActionScript editor. It is also handy when a programmer is working
separately from, say, a graphic artist creating the Flash animations.
External files lend themselves well to code repositories, such as a
library of functions that are independent of the current timeline or
movie clip. They tend to be less useful for code that needs to be
tightly integrated with the Flash file.</p>



<h4 class="refsect1">Usage</h4>


<p>Note that an <tt class="literal">#include</tt> directive begins with a
pound sign (<tt class="literal">#</tt>), does not use parentheses, and must
<em class="emphasis">not</em> end in a semicolon. Any
<tt class="literal">#include</tt> statements that end in a semicolon will
cause an error and will not successfully import an external script.
If the file can't be found at the specified path, the directive
will cause an error and no external text will be included. The text
in the external file is also checked when performing a syntax check
using the Check Syntax command (Ctrl-T or Command-T) in the Actions
panel menu (found under the arrow button in the upper-right corner of
the panel).</p>



<h4 class="refsect1">Example</h4>


<p>The following code imports an external <em class="filename">.as</em> file
named <em class="filename">myScript.as</em> into the current
<em class="filename">.fla</em> file. When using a relative path,
<em class="filename">myScript.as</em> would have to be in the same folder
as the <em class="filename">.fla</em> file containing the include
directive:</p>


<blockquote><pre class="code">#include "myScript.as"</pre></blockquote>


<p>We can construct a relative path including a subdirectory. The
following assumes that <em class="filename">myScript.as</em> is one level
down from the current <em class="filename">.fla</em> file in a
subdirectory named <em class="emphasis">includes</em>:</p>


<blockquote><pre class="code">#include "includes/myScript.as"</pre></blockquote>


<p>Use two dots to indicate the folder above the current folder. The
following assumes that <em class="filename">myScript.as</em> is one level
<em class="emphasis">up</em> from the current <em class="filename">.fla</em>
file:</p>


<blockquote><pre class="code">#include "../myScript.as"</pre></blockquote>


<p>The following assumes that <em class="filename">myScript.as</em> is in a
subdirectory named <em class="emphasis">includes</em> adjacent to the
subdirectory containing the current <em class="filename">.fla</em> file:</p>


<blockquote><pre class="code">#include "../includes/myScript.as"</pre></blockquote>


<p>You can also specify an absolute path to any folder, such as:</p>


<blockquote><pre class="code">#include "C:/WINDOWS/Desktop/myScript.as"</pre></blockquote>


<p>but absolute paths are not cross-platform and may need to be changed
if you compile the <em class="filename">.fla</em> file on a different
machine with different directories. Note the differences in the drive
letter specification:</p>


<blockquote><pre class="code">#include "C:/WINDOWS/Desktop/myScript.as"                // Windows
#include "Mac HD:Desktop folder:working:myScript.as"     // Macintosh</pre></blockquote>



<h4 class="refsect1">See Also</h4>


<p>See <a href="ch16_07.htm">Section 16.7, "Externalizing ActionScript Code"</a> in <a href="ch16_01.htm">Chapter 16, "ActionScript Authoring Environment"</a></p>


</div>

<a name="INDEX-2695" /><a name="INDEX-2696" /><a name="INDEX-2697" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b><i>
Infinity Global Property</i></b></font></td><td align="right">
<i>a constant representing an infinite number</i>
</td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><table width="515" border="0" cellpadding="5"><tr><td align="left" /><td align="right" /></tr></table>
<h4 class="refsect1">Availability</h4>


<p>Flash 5</p>



<h4 class="refsect1">Synopsis</h4>

<blockquote><pre class="code">
Infinity</pre></blockquote>



<h4 class="refsect1">Access</h4>


<p>Read-only</p>



<h4 class="refsect1">Description</h4>


<p>Any number in ActionScript that exceeds the maximum allowed numeric
range is represented by the numeric constant
<tt class="literal">Infinity</tt>. The largest value allowed in
ActionScript is represented by <tt class="literal">Number.MAX_VALUE</tt>
(1.7976931348623157e+308).</p>



<h4 class="refsect1">Example</h4>


<p>The result of a calculation that exceeds the largest allowed number
is <tt class="literal">Infinity</tt>. For example:</p>


<blockquote><pre class="code">Number.MAX_VALUE * 2;    // Yields Infinity</pre></blockquote>


<p><tt class="literal">Infinity</tt> also results when dividing a positive
number by zero:</p>


<blockquote><pre class="code">1000 / 0;                // Yields Infinity</pre></blockquote>



<h4 class="refsect1">Usage</h4>


<p><tt class="literal">Infinity</tt> is shorthand for
<tt class="literal">Number.POSITIVE_INFINITY</tt>.</p>



<h4 class="refsect1">See Also</h4>


<p><tt class="literal">-Infinity</tt>,
<tt class="literal">Number.POSITIVE_INFINITY</tt>; <a href="ch04_03.htm">Section 4.3.3, "Special Values of the Number Datatype"</a> in <a href="ch04_01.htm">Chapter 4, "Primitive Datatypes"</a></p>


</div>

<a name="INDEX-2698" /><a name="INDEX-2699" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b><i>-Infinity Global Property</i></b></font></td><td align="right"><i>a constant representing an infinitely negative number 
</i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><table width="515" border="0" cellpadding="5"><tr><td align="left" /><td align="right" /></tr></table>
<h4 class="refsect1">Availability</h4>


<p>Flash 5</p>



<h4 class="refsect1">Synopsis</h4>

<blockquote><pre class="code">
-Infinity</pre></blockquote>



<h4 class="refsect1">Access</h4>


<p>Read-only</p>



<h4 class="refsect1">Description</h4>


<p>Any number in ActionScript that exceeds the allowed
<em class="emphasis">negative</em> numeric range is represented by the
numeric constant <tt class="literal">-Infinity</tt>. The smallest negative
value (the one with the largest absolute value) allowed in
ActionScript is <tt class="literal">-Number.MAX_VALUE</tt>, which is
equivalent to -1.7976931348623157e+308.</p>



<h4 class="refsect1">Example</h4>


<p>The result of a calculation that is smaller than (i.e., more negative
than) the smallest allowed negative number is
<tt class="literal">-Infinity</tt>. For example:</p>


<blockquote><pre class="code">-Number.MAX_VALUE * 2;    // Yields -Infinity</pre></blockquote>


<p><tt class="literal">-Infinity</tt> also results when dividing a negative
number by zero:</p>


<blockquote><pre class="code">-1000 / 0;                // yields -Infinity</pre></blockquote>



<h4 class="refsect1">Usage</h4>


<p><tt class="literal">-Infinity</tt> is shorthand for
<tt class="literal">Number.NEGATIVE_INFINITY</tt>.</p>



<h4 class="refsect1">See Also</h4>


<p><tt class="literal">Infinity</tt>,
<tt class="literal">Number.NEGATIVE_INFINITY</tt>; <a href="ch04_03.htm">Section 4.3.3, "Special Values of the Number Datatype"</a> in <a href="ch04_01.htm">Chapter 4, "Primitive Datatypes"</a></p>


</div>

<a name="INDEX-2700" /><a name="INDEX-2701" /><a name="INDEX-2702" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b><i>

int( ) Global Function</i></b></font></td><td align="right"><i>truncate the decimal portion of a number
</i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><table width="515" border="0" cellpadding="5"><tr><td align="left" /><td align="right" /></tr></table>
<h4 class="refsect1">Availability</h4>


<p>Flash 4; deprecated in Flash 5 in favor of analogous
<em class="filename">Math</em> methods</p>



<h4 class="refsect1">Synopsis</h4>

<blockquote><pre class="code">
int(<em>number</em>)</pre></blockquote>



<h4 class="refsect2">Arguments</h4>


<dl>
<dt><em>number</em></dt>
<dd><p>A number or an expression that yields a number, typically a number
with a fractional (decimal) portion.</p></dd>

</dl>




<h4 class="refsect2">Returns</h4>


<p>The integer portion of <em class="replaceable">number</em>.</p>




<h4 class="refsect1">Description</h4>


<p>The <em class="filename">int( )</em> function was used in Flash 4 as a
brute-force means of extracting the integer portion of a number. It
effectively rounds positive numbers down and rounds negative numbers
up. The <em class="filename">int( )</em> function works only for numbers
in the range -2147483648 (-2<sup class="superscript">31</sup>) to
2147483647 (2<sup class="superscript">31</sup>-1); it produces undefined
results for numbers outside this range. If
<em class="replaceable">number</em> is a string composed of only
numbers, <em class="filename">int( )</em> converts the string to a number
before operating on it. If <em class="replaceable">number</em> is the
Boolean value <tt class="literal">true</tt>, <em class="filename">int( )</em>
returns the value 1. For all other non-numeric data (including
<tt class="literal">undefined</tt> and <tt class="literal">null</tt>),
<em class="filename">int( )</em> returns the value 0.</p>



<h4 class="refsect1">Usage</h4>


<p>The <em class="filename">int( )</em> function has been deprecated in favor
of the more precise and standard <em class="filename">Math.floor( )</em>,
<em class="filename">Math.ceil( )</em>, and <em class="filename">Math.round(
)</em> methods. Use <em class="filename">parseInt( )</em> or
<em class="filename">Number( ) </em>to convert non-numeric data to an
integer or number.</p>



<h4 class="refsect1">Example</h4>


<blockquote><pre class="code">int(4.5)      // Yields 4
int(-4.5)     // Yields -4
int(3.999)    // Yields 3</pre></blockquote>


<p>The <em class="filename">int( )</em> function is useful to check if a
number is a whole number by comparing the original number to the
result of the <em class="filename">int( )</em> function:</p>


<blockquote><pre class="code">if (int(x) != x) {
  trace ("Please enter a whole number for your age in years");
}</pre></blockquote>



<h4 class="refsect1">See Also</h4>


<p><em class="filename">Math.ceil( )</em>, <em class="filename">Math.floor(
)</em>, <em class="filename">Math.round( )</em>, <em class="filename">Number(
)</em>, <em class="filename">parseFloat( )</em>, <em class="filename">parseInt(
)</em></p>


</div>

<a name="INDEX-2703" /><a name="INDEX-2704" /><a name="INDEX-2705" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b><i>

isFinite( ) Global Function</i></b></font></td><td align="right"><i>check if a number is less than Infinity and greater than -Infinity
</i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><table width="515" border="0" cellpadding="5"><tr><td align="left" /><td align="right" /></tr></table>
<h4 class="refsect1">Availability</h4>


<p>Flash 5</p>



<h4 class="refsect1">Synopsis</h4>

<blockquote><pre class="code">
isFinite(<em>number</em>)</pre></blockquote>



<h4 class="refsect2">Arguments</h4>


<dl>
<dt><em>number</em></dt>
<dd><p>Any numeric value or expression that yields a numeric value.</p></dd>

</dl>




<h4 class="refsect2">Returns</h4>


<p>A Boolean value; <tt class="literal">true</tt> if the number falls between
<tt class="literal">Number.MAX_VALUE</tt> and
-<tt class="literal">Number.MAX_VALUE</tt> (inclusive),
<tt class="literal">false</tt> if not. If <em class="replaceable">number</em>
does not belong to the <em class="filename">number</em> datatype,
<em class="replaceable">number</em> is converted to the
<em class="filename">number</em> type before <em class="filename">isFinite(
)</em> executes.</p>




<h4 class="refsect1">Description</h4>


<p>The<em class="filename"> isFinite( )</em> function simply checks if a
number is in the legal numeric value range of ActionScript. Use
<em class="filename">isFinite( )</em> before executing code that requires
a legitimate number to operate properly.</p>



<h4 class="refsect1">Example</h4>


<blockquote><pre class="code">if (!isFinite(x * y)) {           // Test if the number is not finite
  trace ("The answer is too large to display. Try again.");
}
isFinite(-2342434);              // Yields true
isFinite(Math.PI);               // Yields true
isFinite(Number.MAX_VALUE * 2)   // Yields false</pre></blockquote>



<h4 class="refsect1">See Also</h4>


<p><tt class="literal">-Infinity</tt>, <tt class="literal">Infinity</tt>,
<em class="emphasis">isNan( )</em>,
<em class="replaceable">Number.MAX_VALUE</em>,
<em class="replaceable">Number.MIN_VALUE</em>; <a href="ch04_03.htm">Section 4.3.3, "Special Values of the Number Datatype"</a> in <a href="ch04_01.htm">Chapter 4, "Primitive Datatypes"</a></p>


</div>

<a name="INDEX-2706" /><a name="INDEX-2707" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b><i>
isNaN( ) Global Function</i></b></font></td><td align="right"><i>equality test for the special NaN value
</i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><table width="515" border="0" cellpadding="5"><tr><td align="left" /><td align="right" /></tr></table>
<h4 class="refsect1">Availability</h4>


<p>Flash 5</p>



<h4 class="refsect1">Synopsis</h4>

<blockquote><pre class="code">
isNaN(<em>value</em>)</pre></blockquote>



<h4 class="refsect2">Arguments</h4>


<dl>
<dt><em>value</em></dt>
<dd><p>The expression to test.</p></dd>

</dl>




<h4 class="refsect2">Returns</h4>


<p>A Boolean value: <tt class="literal">true</tt> if
<em class="replaceable">value</em> is the special numeric value
<tt class="literal">NaN</tt>; otherwise, <tt class="literal">false</tt>.</p>




<h4 class="refsect1">Description</h4>


<p>To test whether or not a value is equal to the special numeric value
<tt class="literal">NaN</tt>, we must use the <em class="filename">isNaN( )</em>
function because <tt class="literal">NaN</tt> does not test equal to itself
in an ordinary equality test. For example, the expression:</p>


<blockquote><pre class="code">NaN == NaN;</pre></blockquote>


<p>yields the value <tt class="literal">false</tt>. The <em class="filename">isNaN(
)</em> function is often used to check whether a mathematical
error (such as zero divided by itself) has occurred in a phrase of
code or whether converting a value to a legitimate number has failed.
Because <em class="filename">isNaN( )</em> returns <tt class="literal">true</tt>
when the expression is <em class="emphasis">not</em> a valid numeric
expression, you'll often use the logical NOT operator
(<tt class="literal">!</tt>) along with <em class="emphasis">isNaN( )</em>
(something that is <em class="emphasis">not</em> not a number
<em class="emphasis">is</em> a number). Note that 0/0 yields
<tt class="literal">NaN</tt>, but all positive numbers divided by
yield <tt class="literal">Infinity</tt>, and all negative numbers divided
by
yield <tt class="literal">-Infinity</tt>.</p>



<h4 class="refsect1">Example</h4>


<blockquote><pre class="code">// Set a value
var x = "test123";
// Check if x is a legitimate number before using it is in a math expression.
// This is a handy technique for user input in text fields, which always a string.
if (!isNaN(parseFloat(x))) {
  var y = parseFloat(x) * 2;
}</pre></blockquote>



<h4 class="refsect1">See Also</h4>


<p><em class="emphasis">isFinite( )</em>, <tt class="literal">NaN</tt>; <a href="ch04_03.htm">Section 4.3.3, "Special Values of the Number Datatype"</a> in <a href="ch04_01.htm">Chapter 4, "Primitive Datatypes"</a></p>


</div>

<a name="INDEX-2708" /><a name="INDEX-2709" /><a name="INDEX-2710" /><a name="INDEX-2711" /><a name="INDEX-2712" /><a name="INDEX-2713" /><a name="INDEX-2714" /><a name="INDEX-2715" /><a name="INDEX-2716" /><a name="INDEX-2717" /><a name="INDEX-2718" /><a name="INDEX-2719" /><a name="INDEX-2720" /><a name="INDEX-2721" /><a name="INDEX-2722" /><a name="INDEX-2723" /><a name="INDEX-2724" /><a name="INDEX-2725" /><a name="INDEX-2726" /><a name="INDEX-2727" /><a name="INDEX-2728" /><a name="INDEX-2729" /><a name="INDEX-2730" /><a name="INDEX-2731" /><a name="INDEX-2732" /><a name="INDEX-2733" /><a name="INDEX-2734" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b><i>Key Object</i></b></font></td><td align="right"><i>determine the state of keys on the keyboard
</i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><table width="515" border="0" cellpadding="5"><tr><td align="left" /><td align="right" /></tr></table>
<h4 class="refsect1">Availability</h4>


<p>Flash 5</p>



<h4 class="refsect1">Synopsis</h4>

<blockquote><pre class="code">
Key.property</pre>
Key.methodName()</pre></blockquote>



<h4 class="refsect1">Properties</h4>


<p><a href="ch20_05.htm">Table 20-7</a> lists the properties of the
<em class="filename">Key</em> object.</p>


<a name="ch20-27963" /><h4 class="objtitle">Table 20-7. Key Object Keycode Properties </h4><table border="1">





<tr>
<th>
<p><a name="INDEX-2709" />Property</p></th>
<th>
<p>Equivalent Keycode</p></th>
<th>
<p><a name="INDEX-2710" />Property</p></th>
<th>
<p>Equivalent Keycode</p></th>
</tr>




<tr>
<td>
<p><a name="INDEX-2711" />BACKSPACE</p></td>
<td>
<p> 8</p></td>
<td>
<p><a name="INDEX-2712" />INSERT</p></td>
<td>
<p>45</p></td>
</tr>

<tr>
<td>
<p><a name="INDEX-2713" />CAPSLOCK</p></td>
<td>
<p>20</p></td>
<td>
<p><a name="INDEX-2714" />LEFT</p></td>
<td>
<p>37</p></td>
</tr>

<tr>
<td>
<p><a name="INDEX-2715" />CONTROL</p></td>
<td>
<p>17</p></td>
<td>
<p><a name="INDEX-2716" />PGDN<a name="INDEX-2717" /></p></td>
<td>
<p>34</p></td>
</tr>

<tr>
<td>
<p><a name="INDEX-2718" />DELETEKEY</p></td>
<td>
<p>46</p></td>
<td>
<p><a name="INDEX-2719" />PGUP<a name="INDEX-2720" /></p></td>
<td>
<p>33</p></td>
</tr>

<tr>
<td>
<p><a name="INDEX-2721" />DOWN</p></td>
<td>
<p>40</p></td>
<td>
<p><a name="INDEX-2722" />RIGHT</p></td>
<td>
<p>39</p></td>
</tr>

<tr>
<td>
<p><a name="INDEX-2723" />END</p></td>
<td>
<p>35</p></td>
<td>
<p><a name="INDEX-2724" />SHIFT</p></td>
<td>
<p>16</p></td>
</tr>

<tr>
<td>
<p><a name="INDEX-2725" />ENTER</p></td>
<td>
<p>13</p></td>
<td>
<p><a name="INDEX-2726" />SPACE</p></td>
<td>
<p>32</p></td>
</tr>

<tr>
<td>
<p><a name="INDEX-2727" />ESCAPE</p></td>
<td>
<p>27</p></td>
<td>
<p><a name="INDEX-2728" />TAB</p></td>
<td>
<p>  9</p></td>
</tr>

<tr>
<td>
<p><a name="INDEX-2729" />HOME</p></td>
<td>
<p>36</p></td>
<td>
<p><a name="INDEX-2730" />UP</p></td>
<td>
<p>38</p></td>
</tr>


</table>



<h4 class="refsect1">Methods</h4>


<dl>
<dt><em>getAscii<em class="filename">( )</em></em></dt>
<dd><p>Returns the ASCII value of the last key pressed</p></dd>

</dl>


<dl>
<dt><em>getCode<em class="filename">( )</em></em></dt>
<dd><p>Returns the keycode of the last key pressed</p></dd>

</dl>


<dl>
<dt><em>isDown<em class="filename">( )</em></em></dt>
<dd><p>Checks if a specific key is currently depressed</p></dd>

</dl>


<dl>
<dt><em>isToggled<em class="filename">( )</em></em></dt>
<dd><p>Checks if the Num Lock, Caps Lock, or Scroll Lock keys are activated</p></dd>

</dl>



<h4 class="refsect1">Description</h4>


<p>The <em class="filename">Key</em> object is used to determine which keys
are currently depressed and which key was last depressed. We can use
it to build interfaces controlled by the keyboard, such as a game
with a spaceship moved via the arrow keys.</p>


<p>Because not all keyboards are identical, keyboard-controlled
interfaces can sometimes be tricky to create. By choosing our
scripting tools correctly, however, we can ensure that all users have
the same experience.</p>


<p>There are two general approaches to detecting
<a name="INDEX-2731" />keyboard commands:</p>


<ul><li><p>We may check if a key is currently depressed via the
<em class="filename">isDown( )</em> method. This is recommended for cases
in which keyboard input is constantly required, such as in video
games.</p></li><li><p>We may check which key was last depressed using the
<em class="filename">getCode( )</em> and <em class="filename">getAscii( )</em>
methods. This is recommended for typical keyboard-driven interfaces
in which specific operations are performed when keys are pressed. You
would ordinarily use these methods within a
<em class="filename">keyDown</em> event handler in order to distinguish
between different keys. There is no need to constantly check (i.e.,
<em class="emphasis">poll</em>) for the last key pressed. In fact, doing
so would lead to erroneously repeating some operation even if a key
wasn't pressed repeatedly. That is, you should generally check
<em class="filename">getCode( )</em> and <em class="filename">getAscii( )</em>
within a <em class="filename">keyDown</em> event handler only because the
handler is guaranteed to be called once and only once for each
keystroke.</p></li></ul>
<p>The so-called <em class="emphasis">Windows virtual
keycode</em><a name="INDEX-2732" /> (or simply,
<em class="emphasis">keycode</em>) returned by <em class="filename">getCode(
)</em> and required by <em class="filename">isDown( )</em> is a
number representing the physical keys on the keyboard, not the
symbols on those keys. By using the keycode, we can identify keys
even when a movie is running on different operating systems or when
two keyboards use different languages or have different symbol
layouts.</p>


<p>On <a name="INDEX-2733" /> <a name="INDEX-2734" />most keyboards the keycodes of the
keys A to Z are the same as the code points (65-90) for the
equivalent uppercase Latin 1 letters. The keycodes of the keys
to 9 are, likewise, the same as the Latin 1 values for those numbers
(48-57). The key codes of other keys do not match Latin 1 code
points. However, many of the non-letter and non-number keycodes are
available as properties of <em class="filename">Key</em>. For example, we
don't have to remember that the up arrow uses keycode 38, we
simply use the <tt class="literal">Key.UP</tt> property. The following code
checks whether the up arrow key is currently depressed:</p>


<blockquote><pre class="code">if (Key.isDown(Key.UP)) {
  trace("The up arrow is being pressed");
}</pre></blockquote>


<p>When working with a keycode that is not a letter or a number and is
not available as a property of <em class="filename">Key -- </em>such as
those of the function keys (F1, F2, etc.) -- it's safest to
create a quick test movie to check the keycode of the desired key, as
follows:</p>


<blockquote><pre class="code">trace(Key.getCode( ));</pre></blockquote>


<p>The keycodes are listed in <a href="appb_01.htm">Appendix B, "Latin 1 Character Repertoire and Keycodes"</a>.</p>



<h4 class="refsect1">See Also</h4>


<p><a href="ch10_11.htm">Section 10.11.5, "keyUp"</a> and <a href="ch10_11.htm">Section 10.11.4, "keyDown"</a> in <a href="ch10_01.htm">Chapter 10, "Events and Event Handlers"</a>, and
<a href="appb_01.htm">Appendix B, "Latin 1 Character Repertoire and Keycodes"</a></p>


</div>

<a name="INDEX-2735" /><a name="INDEX-2736" /><a name="INDEX-2737" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b><i>

Key.getAscii( ) Method</i></b></font></td><td align="right"><i>returns the ASCII value of the last key pressed
</i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><table width="515" border="0" cellpadding="5"><tr><td align="left" /><td align="right" /></tr></table>
<h4 class="refsect1">Availability</h4>


<p>Flash 5</p>



<h4 class="refsect1">Synopsis</h4>

<blockquote><pre class="code">
Key.getAscii()</pre></blockquote>



<h4 class="refsect2">Returns</h4>


<p>An integer representing the ASCII value of the last key pressed.</p>




<h4 class="refsect1">Description</h4>


<p>The <em class="filename">getAscii( )</em> method returns the ASCII value
of the last key that was pressed. Since not all keys have an ASCII
value, <em class="filename">getAscii( )</em> is normally used for
detecting letters and numbers from the Latin 1 character set (Western
European languages). Unlike <em class="filename">getCode( )</em>,
<em class="filename">getAscii( )</em> distinguishes between upper- and
lowercase letters. But unlike <em class="filename">getCode( )</em>, it
cannot differentiate between two keys with the same ASCII value, such
as the 8 key on the main keyboard and the 8 key on the numeric
keypad.</p>


<p>To detect the pressing of specific keys relative to their physical
location on a keyboard rather than their ASCII value (such as would
be desirable when using four keys in a diamond pattern to control
game play), use <em class="filename">getCode( )</em>.</p>



<h4 class="refsect1">Example</h4>


<p>The following example demonstrates keystroke detection for a simple
hangman word game. It uses a <em class="filename">keyDown</em> event
handler to identify the pressing of a key and adds that key to a list
of user guesses:</p>


<blockquote><pre class="code">onClipEvent (keyDown) {
  var lastKey = Key.getAscii( );
  guessNum++;
  userGuesses[guessNum] = String.fromCharCode(lastKey);
}</pre></blockquote>



<h4 class="refsect1">See Also</h4>


<p><em class="filename">Key.getCode( )</em>; <a href="appb_01.htm">Appendix B, "Latin 1 Character Repertoire and Keycodes"</a>,
and <a href="ch10_11.htm">Section 10.11.4, "keyDown"</a> in <a href="ch10_01.htm">Chapter 10, "Events and Event Handlers"</a></p>


</div>

<a name="INDEX-2738" /><a name="INDEX-2739" /><a name="INDEX-2740" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b><i>

Key.getCode( ) Method</i></b></font></td><td align="right"><i>returns the keycode of the last key pressed
</i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><table width="515" border="0" cellpadding="5"><tr><td align="left" /><td align="right" /></tr></table>
<h4 class="refsect1">Availability</h4>


<p>Flash 5</p>



<h4 class="refsect1">Synopsis</h4>

<blockquote><pre class="code">
Key.getCode()</pre></blockquote>



<h4 class="refsect2">Returns</h4>


<p>An integer representing the keycode of the last key pressed.</p>




<h4 class="refsect1">Description</h4>


<p>The <em class="filename">getCode( )</em> method returns the keycode of the
last key that was pressed, which is an arbitrary number representing
the physical location of a key on the keyboard. On non-Windows
operating systems, the native keycode system is translated
automatically by Flash to the Windows equivalent, so
<em class="filename">getCode( )</em> provides a cross-platform means of
referring to specific keys. The <em class="filename">getCode( )</em>
method can also be used to differentiate between two keys with the
same ASCII value. For example, it can differentiate between the 8 key
on the main keyboard and the 8 key on the numeric keypad, whereas
<em class="filename">getAscii( )</em> cannot. However, <em class="filename">getCode(
)</em> cannot differentiate between upper- and lowercase
letters (for example, <em class="emphasis">A</em> and
<em class="emphasis">a</em> use the same keycode because they are produced
using the same key).</p>


<p>Many common keycode values are available as properties of the
<em class="filename">Key</em> object (e.g., <tt class="literal">Key.UP</tt>,
<tt class="literal">Key.BACKSPACE</tt>). To determine the keycode of a
particular key, see <a href="appb_01.htm">Appendix B, "Latin 1 Character Repertoire and Keycodes"</a> or construct a
keycode tester as follows:</p>


<ol><li><p>Create a new Flash
document.</p></li>

<li><p>At frame 2 of the timeline, add a
frame.</p></li>

<li><p>On frame 1, add the following code:</p>
<blockquote><pre class="code">trace(Key.getCode( ));</pre></blockquote></li>

<li><p>Select Control <img align="absmiddle" src="figs/U2192.gif" /> Test Movie.</p></li>

<li><p>Click the movie's Stage.</p></li>

<li><p>Press a key. The key code for that key will appear in the Output
window.</p></li></ol>

<h4 class="refsect1">Example</h4>


<p>Unlike <em class="filename">isDown( )</em>, <em class="filename">getCode(
)</em> is useful for creating interfaces where an individual
key press has a single, direct result. For example, the user may be
able to skip a movie's intro by pressing the spacebar. When the
spacebar is depressed, we send the playhead to the main interface of
the movie (on the main timeline) as follows:</p>


<blockquote><pre class="code">// Code on intro clip
onClipEvent (keyDown) {
  if (Key.getCode( ) == Key.SPACE) {
    _root.gotoAndStop("mainInterface");
  }
}</pre></blockquote>



<h4 class="refsect1">See Also</h4>


<p><em class="filename">Key.getAscii( ),</em> <em class="filename">Key.isDown(
)</em>; <a href="appb_01.htm">Appendix B, "Latin 1 Character Repertoire and Keycodes"</a>, and <a href="ch10_11.htm">Section 10.11.4, "keyDown"</a> in <a href="ch10_01.htm">Chapter 10, "Events and Event Handlers"</a></p>


</div>

<a name="INDEX-2741" /><a name="INDEX-2742" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b><i>
Key.isDown( ) Method</i></b></font></td><td align="right"><i>check whether a specific key is currently depressed
</i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><table width="515" border="0" cellpadding="5"><tr><td align="left" /><td align="right" /></tr></table>
<h4 class="refsect1">Availability</h4>


<p>Flash 5</p>



<h4 class="refsect1">Synopsis</h4>

<blockquote><pre class="code">
Key.isDown(<em>keycode</em>)</pre></blockquote>



<h4 class="refsect2">Arguments</h4>


<dl>
<dt><em>keycode</em></dt>
<dd><p>A number representing the keycode of the key to check. May also be
one of the <em class="filename">Key</em> constants (e.g.,
<tt class="literal">Key.UP</tt>, <tt class="literal">Key.BACKSPACE</tt>).</p></dd>

</dl>




<h4 class="refsect2">Returns</h4>


<p>A Boolean indicating whether the key specified by
<em class="replaceable">keycode</em> is pressed
(<tt class="literal">true</tt>) or not pressed (<tt class="literal">false</tt>).</p>




<h4 class="refsect1">Description</h4>


<p>The <em class="filename">isDown( )</em> method tells us whether the key
specified by <em class="replaceable">keycode</em> is currently being
pressed. It offers arbitrary, immediate access to the state of the
keyboard and is best used with systems that require constant
key-based input or that detect the pressing of simultaneous keys.</p>


<p>One important advantage of <em class="filename">isDown( )</em> over
<em class="filename">getCode( )</em> and <em class="filename">getAscii( )</em>
is its ability to detect the simultaneous pressing of multiple keys.
By checking for both <tt class="literal">Key.UP</tt> and
<tt class="literal">Key.RIGHT</tt>, for example, we may determine that a
spaceship in a game should be moved diagonally. Depending on the
placement of the specific keys being tested, the maximum number of
keys that can be simultaneously detected may be as low as three.</p>



<h4 class="refsect1">Example</h4>


<p>The <em class="filename">isDown( )</em> method is normally used to create
systems that undergo a constant update with each passing frame. In
the following code, we rotate and thrust a spaceship on any frame
where the appropriate arrow keys are being pressed. Note that if you
need to detect two keys simultaneously, you should use separate
<em class="filename">if</em> statements. In this example, the state of the
right arrow key is ignored if the left arrow key is also being
depressed. But regardless, the state of the up arrow key is always
checked in a separate <em class="filename">if</em> statement. A working
version of this spaceship example is available from the online Code
Depot:</p>


<blockquote><pre class="code">// Code on a spaceship clip
onClipEvent (enterFrame) {
  if (Key.isDown(Key.LEFT)) {          // Left arrow
    _rotation -= 10;
  } else if (Key.isDown(Key.RIGHT)) {  // Right arrow
    _rotation += 10;
  }
  if (Key.isDown(Key.UP)) {            // Up arrow
    thrust += 10;
  }
}</pre></blockquote>



<h4 class="refsect1">See Also</h4>


<p><em class="filename">Key.getCode( )</em>; <a href="ch10_11.htm">Section 10.11.4, "keyDown"</a> in <a href="ch10_01.htm">Chapter 10, "Events and Event Handlers"</a></p>


</div>

<a name="INDEX-2743" /><a name="INDEX-2744" /><a name="INDEX-2745" /><a name="INDEX-2746" /><a name="INDEX-2747" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b><i>
Key.isToggled( ) Method</i></b></font></td><td align="right"><i>check whether the Caps Lock, Num Lock, or Scroll Lock keys are activated
</i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><table width="515" border="0" cellpadding="5"><tr><td align="left" /><td align="right" /></tr></table>
<h4 class="refsect1">Availability</h4>


<p>Flash 5</p>



<h4 class="refsect1">Synopsis</h4>

<blockquote><pre class="code">
Key.isToggled(<em>keycode</em>)</pre></blockquote>



<h4 class="refsect2">Arguments</h4>


<dl>
<dt><em>keycode</em></dt>
<dd><p>An integer keycode, usually the keycode of the Caps Lock key (20),
Num Lock key (144), or Scroll Lock key (145). May also be the key
constant <tt class="literal">Key.CapsLock</tt>.</p></dd>

</dl>




<h4 class="refsect2">Returns</h4>


<p>A Boolean indicating whether the key specified by
<em class="replaceable">keycode</em> is on (<tt class="literal">true</tt>) or
off (<tt class="literal">false</tt>).</p>




<h4 class="refsect1">Description</h4>


<p>The <em class="filename">isToggled( )</em> method detects the state of the
special <a name="INDEX-2745" />Caps Lock, <a name="INDEX-2746" />Num Lock, or
<a name="INDEX-2747" />Scroll Lock keys. Unlike other
keys, these keys have an "on" state and an
"off" state indicating whether or not the feature they
represent is active. The return of <em class="filename">isToggled( )</em>
tells us if the key's feature is in effect or not. (Though
<em class="filename">isToggled( )</em> actually works for any keycode, its
return value is useful only for special keys that support a toggle
feature. To detect the state of other keys, use <em class="filename">isDown(
)</em>, <em class="filename">getCode( )</em>, or <em class="filename">getAscii(
)</em>.)</p>


</div>

<a name="INDEX-2748" /><a name="INDEX-2749" /><a name="INDEX-2750" /><a name="INDEX-2751" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b><i>_leveln 

Global Property</i></b></font></td><td align="right"><i>a document level in the Player
</i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><table width="515" border="0" cellpadding="5"><tr><td align="left" /><td align="right" /></tr></table>
<h4 class="refsect1">Availability</h4>


<p>Flash 3 and later</p>



<h4 class="refsect1">Synopsis</h4>

<blockquote><pre class="code">
_level0
_level1
_level2
...
_leveln</pre></blockquote>



<h4 class="refsect1">Access</h4>


<p>Read-only</p>



<h4 class="refsect1">Description</h4>


<p>Multiple <em class="filename">.swf</em> files may be loaded into the Flash
Player for simultaneous display. Each loaded
<em class="filename">.swf</em> resides on its own level in the document
level stack. (A <em class="filename">.swf</em> file on a higher level
number will obscure lower levels if they occupy the same portion of
the Stage.) The <tt class="literal">_level</tt><em class="emphasis">n</em>
property stores a reference to the main timeline of a
<em class="filename">.swf</em> loaded into a document level in the Player.
Each document level is represented by a numbered property, such as
<tt class="literal">_level0</tt>, <tt class="literal">_level1</tt>,
<tt class="literal">_level2</tt>, and so on.</p>


<p>The original document loaded into any Flash Player is considered
<tt class="literal">_level0</tt>.</p>



<h4 class="refsect1">Example</h4>


<p>A <tt class="literal">_level</tt><em class="emphasis">n</em> reference is
normally used to control movies on other levels of the document
stack. For example, here we play the movie on level 2:</p>


<blockquote><pre class="code">_level2.play( );</pre></blockquote>


<p>We can also use <tt class="literal">_level</tt><em class="emphasis">n</em> in
combination with movie clip references to control clips contained by
a movie on any level in the document stack. For example:</p>


<blockquote><pre class="code">_level1.orderForm.titleBar.play( );</pre></blockquote>


<p>A <tt class="literal">_level</tt><em class="emphasis">n</em> reference may also
be used as the value of the <em class="replaceable">target</em>
argument of several functions, including <em class="filename">loadMovie(
)</em>, <em class="filename">unloadMovie( )</em>,
<em class="filename">loadVariables( )</em> and <em class="filename">print(
)</em>. If the level does not yet exist, you should specify the
level reference within quotes. If used without quotes, a nonexistent
level is considered <tt class="literal">undefined</tt> and may cause the
command to operate on the current timeline instead of the new,
undefined level. For example, when executed from the main timeline of
<tt class="literal">_level0</tt>, the following will replace the movie in
<tt class="literal">_level0</tt> if <tt class="literal">_level1</tt> has not yet
been defined:</p>


<blockquote><pre class="code">loadMovie("myMovie.swf", _level1);</pre></blockquote>


<p>The following is a safer approach if you can't guarantee that
the level already exists:</p>


<blockquote><pre class="code">loadMovie("myMovie.swf", "_level1");  // Works even if _level1 doesn't exist</pre></blockquote>


<p>Of course, from other levels, you may wish to refer to the original
level, using <tt class="literal">_level0</tt>, such as:</p>


<blockquote><pre class="code">startDrag(_level0, true);</pre></blockquote>



<h4 class="refsect1">See Also</h4>


<p><em class="filename">loadMovie( )</em>, <em class="filename">unloadMovie(
)</em>, <tt class="literal">-root</tt>; <a href="ch13_03.htm">Section 13.3.4, "Importing External Movies"</a> and <a href="ch13_04.htm">Section 13.4, "Movie and Instance Stacking Order"</a>
in <a href="ch13_01.htm">Chapter 13, "Movie Clips"</a></p>


</div>

<a name="INDEX-2752" /><a name="INDEX-2753" /><a name="INDEX-2754" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b><i>

loadMovie( ) Global Function</i></b></font></td><td align="right"><i>load an external .swf file into the Player
</i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><table width="515" border="0" cellpadding="5"><tr><td align="left" /><td align="right" /></tr></table>
<h4 class="refsect1">Availability</h4>


<p>Flash 4 and later. The <em class="filename">loadMovie( )</em> function in
Flash 5 corresponds to the Flash 4 <em class="filename">Load Movie</em>
with a target path.</p>



<h4 class="refsect1">Synopsis</h4>

<blockquote><pre class="code">
loadMovie(<em>URL, target</em>)
loadMovie(<em>URL, target, method</em>)</pre></blockquote>



<h4 class="refsect2">Arguments</h4>


<dl>
<dt><em>URL</em></dt>
<dd><p>A string specifying the absolute or relative file path to the
external <em class="filename">.swf</em> file to load. All URLs must use
forward slashes, and absolute URLs must include either the
<tt class="literal">http://</tt> or <tt class="literal">file|///</tt> protocol
reference.</p></dd>

</dl>


<dl>
<dt><em>target</em></dt>
<dd><p>A string indicating the movie clip or document level that will host
the external <em class="filename">.swf</em> file. May also be a reference
to an existing movie clip or document level (references are converted
to paths when used in a string context).</p></dd>

</dl>


<dl>
<dt><em>method</em></dt>
<dd><p>An optional string indicating the method by which to send variables
to an external script. The legal values for
<em class="replaceable">method</em> are <tt class="literal">"GET"</tt> and
<tt class="literal">"</tt>POST<tt class="literal">"</tt>. This parameter must be
a literal, not a variable or other expression. The standalone version
of the Flash Player always uses the <tt class="literal">"GET"</tt> method
regardless of the <em class="replaceable">method</em> specified.</p></dd>

</dl>




<h4 class="refsect1">Description</h4>


<p>The <em class="filename">loadMovie( )</em> function imports the
<em class="filename">.swf</em> file located at
<em class="replaceable">URL</em> into the Flash Player.</p>


<p>If <em class="replaceable">target</em> is a reference to an existing
movie clip or a string indicating the path to a movie clip, the
loaded <em class="filename">.swf</em> file is placed into the specified
clip (causing the eviction of any previous content). To load a movie
into the <em class="emphasis">current</em> movie clip, use the empty
string as the <em class="replaceable">target</em> parameter, as in:</p>


<blockquote><pre class="code">loadMovie("myMovie.swf", "")</pre></blockquote>


<p>If <em class="replaceable">target</em> is a reference to an existing
document level (such as <tt class="literal">_level2</tt>) or a string
indicating the path to a document level (such as
<tt class="literal">"_level2"</tt>), then the <em class="filename">.swf</em> is
placed into the specified document level. Loading a movie into
<tt class="literal">_level0</tt> clears the Player of all content and
places the new <em class="filename">.swf</em> file into
<tt class="literal">_level0</tt>.</p>


<p>It is possible to send variables along with a <em class="filename">loadMovie(
)</em> invocation, in which case <em class="replaceable">URL</em>
is normally the location of a script that returns a
<em class="filename">.swf</em> file based on the variables sent. To send
variables with a <em class="filename">loadMovie( )</em> call, we include
the <em class="replaceable">method</em> argument (set to either
<tt class="literal">"GET"</tt> or <tt class="literal">"POST"</tt>).
<tt class="literal">"GET"</tt> sends the current movie clip timeline
variables as a query string attached to the script
<em class="replaceable">URL</em>. <tt class="literal">"POST"</tt> sends the
current movie clip timeline variables after the HTTP POST-request
header. The <tt class="literal">"POST"</tt> method is not available in the
standalone Flash Player. Because most web servers restrict the length
of URLs to between 255 and 1024 characters, use
<tt class="literal">"POST"</tt> instead of <tt class="literal">"GET"</tt> to
transfer larger amounts of data.</p>


<p>Over a web server, <em class="filename">loadMovie( )</em> invocations that
use the <tt class="literal">"GET"</tt> method can pass variables to a
loaded movie without the help of an intervening script. Here, we load
the external movie <em class="filename">myMovie.swf</em> into level 1 of
the Player document stack, passing it the variables from the current
timeline:</p>


<blockquote><pre class="code">loadMovie("myMovie.swf", "_level1", "GET");</pre></blockquote>


<p>Variables passed to the loaded movie are defined on that
movie's main timeline. This technique works only when the
<em class="filename">loadMovie( )</em> request is handled by a web server.
Attempts to use the <tt class="literal">"GET"</tt> method with
<em class="filename">loadMovie( )</em> using local files will cause an
"Error opening URL" error.</p>



<h4 class="refsect1">Usage</h4>


<p>Be careful when using movie clip and level references as the
<em class="replaceable">target</em> argument of <em class="filename">loadMovie(
)</em>. If a <em class="filename">loadMovie( ) </em>'s
<tt class="literal">target</tt> argument yields
<tt class="literal">undefined</tt>, the <em class="filename">loadMovie( )</em>
function uses the current timeline as its
<em class="replaceable">target</em>. Similarly,
<em class="replaceable">target</em> references that yield the empty
string cause <em class="filename">loadMovie( )</em> to operate on the
current timeline. In particular, this causes problems for loading
movies onto new, unoccupied levels. Consider the following code:</p>


<blockquote><pre class="code">loadMovie("myMovie.swf", _level1);</pre></blockquote>


<p>If no <tt class="literal">_level1</tt> object exists prior to the execution
of that statement, that code will load
<em class="filename">myMovie.swf</em> into the timeline that contains the
<em class="filename">loadMovie( )</em> statement, not
<tt class="literal">_level1</tt>! To avoid the problem, you can use
<em class="filename">loadMovieNum( )</em> instead. Alternatively, you can
use a string for the <em class="replaceable">target</em> parameter to
<em class="filename">loadMovie( )</em>, as in:</p>


<blockquote><pre class="code">loadMovie("myMovie.swf", "_level1");</pre></blockquote>


<p>In that case, the level will be created if it doesn't already
exist (only <tt class="literal">_level0</tt> exists by default in all
movies). For more information, see <a href="ch13_08.htm">Section 13.8.3.1, "Method versus global function overlap issues"</a> in <a href="ch13_01.htm">Chapter 13, "Movie Clips"</a>.</p>



<h4 class="refsect1">Example</h4>


<blockquote><pre class="code">loadMovie("myMovie.swf", "_level1");     // Place myMovie.swf on level 1
loadMovie("myMovie.swf", "_level0");     // Place myMovie.swf on level 0
loadMovie("myMovie.swf", "myClip");      // Place myMovie.swf into myClip
// Replace the contents of the Player with 
// coolmovie.swf, using an absolute path
loadMovie("http://www.yourflashsite.com/coolmovie.swf", "_level0");
// Load a movie into level 1 from the Windows desktop. Note the 
// file:/// protocol and the forward slashes.
loadMovie("file:///C|/WINDOWS/Desktop/animation.swf", "_level1");</pre></blockquote>



<h4 class="refsect1">See Also</h4>


<p><em class="filename">loadMovieNum( )</em>, <em class="filename">MovieClip.loadMovie(
)</em>, <em class="filename">unloadMovie( )</em>; <a href="ch13_03.htm">Section 13.3.4, "Importing External Movies"</a> in <a href="ch13_01.htm">Chapter 13, "Movie Clips"</a></p>


</div>

<a name="INDEX-2755" /><a name="INDEX-2756" /><a name="INDEX-2757" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b><i>

loadMovieNum( ) Global Function</i></b></font></td><td align="right"><i>load an external .swf file into a document level
</i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><table width="515" border="0" cellpadding="5"><tr><td align="left" /><td align="right" /></tr></table>
<h4 class="refsect1">Availability</h4>


<p>Flash 3; enhanced in Flash 4 to include the
<em class="replaceable">method</em> parameter; available in Flash 5.
The <em class="filename">loadMovieNum( )</em> function corresponds with
Flash 3's <em class="filename">Load Movie,</em> which accepted only
level numbers.</p>



<h4 class="refsect1">Synopsis</h4>

<blockquote><pre class="code">
loadMovieNum(<em>URL, level</em>)
loadMovieNum(<em>URL, level, method</em>)</pre></blockquote>



<h4 class="refsect2">Arguments</h4>


<dl>
<dt><em>URL</em></dt>
<dd><p>A string specifying the absolute or relative file path of the
external <em class="filename">.swf</em> file to load.</p></dd>

</dl>


<dl>
<dt><em>level</em></dt>
<dd><p>A non-negative integer, or an expression that yields one, indicating
the document level that will host the external
<em class="filename">.swf</em> file.</p></dd>

</dl>


<dl>
<dt><em>method</em></dt>
<dd><p>An optional string indicating the method by which to send variables
to an external script. The legal values for
<em class="replaceable">method</em> are <tt class="literal">"GET"</tt> and
<tt class="literal">"POST"</tt>. This parameter must be a literal, not a
variable or other expression. The standalone version of the Flash
Player always uses the <tt class="literal">"GET"</tt> method regardless of
the <tt><em class="replaceable">method</em></tt> specified.</p></dd>

</dl>




<h4 class="refsect1">Description</h4>


<p>The<em class="filename"> loadMovieNum( )</em> function is nearly identical
to <em class="filename">loadMovie( )</em> except that it requires the
target <em class="replaceable">level</em> of the load operation to be
specified as a number rather than as a string. This means that
<em class="filename">loadMovieNum( )</em> can load movies only into
document levels, not host clips. If the specified level doesn't
exist, it will be created. If the specified level does exist, its
occupant is replaced by the new <em class="filename">.swf</em> file. It is
valid to load a movie into <tt class="literal">_level2</tt> even if
<tt class="literal">_level1</tt> hasn't been created.</p>


<p>The<em class="filename"> loadMovieNum( )</em> function can be used when we
wish to dynamically assign the level of a loaded movie, as in:</p>


<blockquote><pre class="code">var x = 3;
loadMovieNum("myMovie.swf", x);</pre></blockquote>


<p>which could also be achieved via a string concatenation expression
with the regular <em class="filename">loadMovie( )</em> function:</p>


<blockquote><pre class="code">loadMovie("myMovie.swf", "_level" + x);</pre></blockquote>



<h4 class="refsect1">See Also</h4>


<p><em class="filename">loadMovie( )</em>, <em class="filename">MovieClip.loadMovie(
)</em></p>


</div>

<a name="INDEX-2758" /><a name="INDEX-2759" /><a name="INDEX-2760" /><a name="INDEX-2761" /><a name="INDEX-2762" /><a name="INDEX-2763" /><a name="INDEX-2764" /><a name="INDEX-2765" /><a name="INDEX-2766" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b><i>

loadVariables( ) Global Function</i></b></font></td><td align="right"><i>retrieve an external set of variables
</i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><table width="515" border="0" cellpadding="5"><tr><td align="left" /><td align="right" /></tr></table>
<h4 class="refsect1">Availability</h4>


<p>Flash 4 and later</p>



<h4 class="refsect1">Synopsis</h4>

<blockquote><pre class="code">
loadVariables(<em>URL, target</em>)
loadVariables(<em>URL, target, method</em>)</pre></blockquote>



<h4 class="refsect2">Arguments</h4>


<dl>
<dt><em>URL</em></dt>
<dd><p>A string specifying the path to a variable source -- either a
server-side script that returns variables or a text file containing
variables.</p></dd>

</dl>


<dl>
<dt><em>target</em></dt>
<dd><p>A string indicating the path to the movie clip or document level on
which the loaded variables will be defined. May also be a reference
to a movie clip or document level (references are converted to paths
when used in a string context).</p></dd>

</dl>


<dl>
<dt><em>method</em></dt>
<dd><p>An optional string indicating the method by which to send variables
to an external script. If specified, the variables from the current
timeline are sent to the script and <em class="replaceable">target</em>
receives the loaded variables. If omitted, variables are retrieved
but none are sent. The legal values for
<em class="replaceable">method</em> are <tt class="literal">"GET"</tt> and
<tt class="literal">"POST"</tt>. This parameter must be a literal, not a
variable or other expression. The standalone version of the Flash
Player always uses the <tt class="literal">"GET"</tt> method regardless of
the <em class="replaceable">method</em> specified.</p></dd>

</dl>




<h4 class="refsect1">Description</h4>


<p>Normally, we define variables inside our movies using ActionScript.
However, using <em class="filename">loadVariables( )</em>, we may also
import variables into a movie from a text file or a server-side
application such as a Perl script. Variables loaded via
<em class="filename">loadVariables( )</em> are scoped to the movie clip or
level specified by <em class="replaceable">target</em> and are always
of the <em class="emphasis">string</em> datatype. To attach loaded
variables to the current timeline, use the empty string as the value
of the <em class="replaceable">target</em> argument. For example:</p>


<blockquote><pre class="code">loadVariables("myVars.txt", "");  // Loads the variables from myVars.txt onto
                                  // the current timeline</pre></blockquote>


<p>Whether the variables to be loaded reside in a text file or are
composed by a script, they must be formatted according to the rules
of URL encoding, as follows:</p>


<ul><li><p>Every variable name should be separated from its value with an equals
sign, without spaces, as in <tt class="literal">firstName=stephen</tt>.</p></li></ul>
<ul><li><p>Multiple variable name/value pairs should be separated by ampersands
(&amp;), as in
<tt class="literal">firstName=stephen&amp;lastName=burke</tt>.</p></li></ul>
<ul><li><p>Spaces should be replaced with plus (+) signs.</p></li></ul>
<ul><li><p>Any character that is not a space, a number (1-9), or an unaccented
Latin 1 letter (a-z, A-Z) should be replaced by a hexadecimal escape
sequence of the form <tt class="literal">%xx</tt>, where
<tt class="literal">xx</tt> is the hex Latin 1 code point of the character.</p></li></ul>
<p>For example, the following code shows the contents of a text file to
be imported into Flash via <em class="filename">loadVariables( )</em>. The
imported variables are <tt class="literal">name</tt> and
<tt class="literal">address</tt>, which have the values
<tt class="literal">"stephen"</tt> and <tt class="literal">"65 nowhere st!"</tt>,
respectively:</p>


<blockquote><pre class="code">name=stephen&amp;address=65+nowhere+st%21</pre></blockquote>


<p>A text file for use with <em class="filename">loadVariables( )</em> is
simply a regular text file containing URL-encoded variables, as shown
previously. To load variables from an external text file, we specify
the path of the file as the <em class="replaceable">URL</em> argument
in our <em class="filename">loadVariables( )</em> function invocation. For
example:</p>


<blockquote><pre class="code">// Load the variables from myVariables.txt into the main movie timeline
loadVariables("myVariables.txt", "_root");</pre></blockquote>


<p><em class="filename">loadVariables( )</em> may also be used with a script
or server application that outputs URL-encoded variables. When a
script sends data to a Flash movie in response to a
<em class="filename">loadVariables( )</em> function, the script should set
the MIME type of the data as:
<tt class="literal">"application/x-www-urlform-encoded"</tt>. Here's
a typical MIME-setting statement from a Perl script:</p>


<blockquote><pre class="code">print "Content-type: application/x-www-urlform-encoded\n\n";</pre></blockquote>


<p>Though the <a name="INDEX-2761" />name
<em class="filename">loadVariables( )</em> suggests only a single
direction of variable transmission, it may also be used to
<em class="emphasis">send</em> variables to a server-side script. To send
all the variables defined on the current timeline to a script, we set
the <em class="replaceable">method</em> argument of a
<em class="filename">loadVariables( )</em> function invocation to either
<tt class="literal">"GET"</tt> or <tt class="literal">"POST"</tt>. Variables are
sent in URL-encoded format. If <em class="replaceable">method</em> is
set to <tt class="literal">"GET"</tt>, the variables are sent as a query
string of the script <em class="replaceable">URL</em>. If
<em class="replaceable">method</em> is set to
<tt class="literal">"POST"</tt>, the variables are sent after the HTTP
POST-request header. The <tt class="literal">"POST"</tt> method is not
available in the standalone Flash Player. Because most web servers
restrict the length of URLs to between 255 and 1024 characters, use
<tt class="literal">"POST"</tt> instead of <tt class="literal">"GET"</tt> to
transfer larger amounts of data.</p>


<p>For <a name="INDEX-2762" />security reasons, <em class="filename">loadVariables(
)</em><a name="INDEX-2763" /> works only with hosts in the domain from
which the movie was downloaded. The rules that govern
<em class="filename">loadVariables( )</em> usage are listed in <a href="ch20_05.htm">Table 20-8</a>. These security measures affect the Flash
Player browser plugins and ActiveX controls only; variables may be
loaded from any domain in the standalone Player.</p>


<a name="ch20-18510" /><h4 class="objtitle">Table 20-8. Domain-Based loadVariables( ) Security Restrictions </h4><table border="1">




<tr>
<th>
<p>Domain of Movie Origin</p></th>
<th>
<p>Host to Connect to</p></th>
<th>
<p>Permitted?</p></th>
</tr>




<tr>
<td>
<p><em class="emphasis">www.somewhere.com</em></p></td>
<td>
<p><em class="emphasis">www.somewhere.com</em></p></td>
<td>
<p>Yes</p></td>
</tr>

<tr>
<td>
<p><em class="emphasis">www.somewhere.com</em></p></td>
<td>
<p><em class="emphasis">other.somewhere.com</em></p></td>
<td>
<p>Yes</p></td>
</tr>

<tr>
<td>
<p><em class="emphasis">www.somewhere.com</em></p></td>
<td>
<p><em class="emphasis">www.somewhere-else.com</em></p></td>
<td>
<p>No</p></td>
</tr>

<tr>
<td>
<p><em class="emphasis">www.somewhere.com</em></p></td>
<td>
<p><em class="emphasis">somewhere.com</em></p></td>
<td>
<p>Yes</p></td>
</tr>

<tr>
<td>
<p><em class="emphasis">somewhere.com</em></p></td>
<td>
<p><em class="emphasis">www.somewhere.com</em></p></td>
<td>
<p>Yes</p></td>
</tr>


</table>


<p>Domain restriction is an intentional security feature of Flash, but
it can be circumvented with either a proxy script running on siteX
that acts as a go-between for Flash and siteY, or a DNS alias on
siteX that points to siteY. For more information, see:</p>


<blockquote class="simplelist">

<p><a href="../../../../../../www.macromedia.com/support/flash/ts/documents/loadvars_security.htm">http://www.macromedia.com/support/flash/ts/documents/loadvars_security.htm</a></p>

</blockquote>



<h4 class="refsect1">Usage</h4>


<p>The results of multiple <em class="filename">loadVariable( )</em> calls to
the same script URL may be cached on some browsers to the point that
new data is never loaded from the server. To avoid this problem,
append a dummy variable to each <em class="filename">loadVariables( )</em>
call so that the URL is unique. For example, here we generate a
unique URL by appending the time in milliseconds:</p>


<blockquote><pre class="code">loadVariables("http://www.mysite.com/cgi-bin/myScript.pl?cacheKiller=" 
              + getTimer( ), serverResponse);</pre></blockquote>



<h4 class="refsect1">Bugs</h4>


<p>The POST method is not supported by Internet Explorer 4.5 on
Macintosh. This problem was fixed in Version 5 of the browser.</p>



<h4 class="refsect1">See Also</h4>


<p><em class="filename">loadVariablesNum( )</em><a name="INDEX-2764" /> <a name="INDEX-2765" /> <a name="INDEX-2766" />,
<em class="filename">MovieClip.loadVariables( );</em> <a href="ch17_01.htm">Chapter 17, "Flash Forms"</a></p>


</div>

<a name="INDEX-2767" /><a name="INDEX-2768" /><a name="INDEX-2769" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b><i>

loadVariablesNum( ) Global Function</i></b></font></td><td align="right"><i>attach an external set of variables to a document level
</i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><table width="515" border="0" cellpadding="5"><tr><td align="left" /><td align="right" /></tr></table>
<h4 class="refsect1">Availability</h4>


<p>Flash 5. Use the <em class="filename">Load Variables</em> Action in Flash
4 to place variables on a document level.</p>



<h4 class="refsect1">Synopsis</h4>

<blockquote><pre class="code">
loadVariablesNum(<em>URL, level</em>)
loadVariablesNum(<em>URL, level, method</em>)</pre></blockquote>



<h4 class="refsect2">Arguments</h4>


<dl>
<dt><em>URL</em></dt>
<dd><p>A string specifying the path to a variable source -- either a
server-side script that returns variables or a text file containing
variables.</p></dd>

</dl>


<dl>
<dt><em>level</em></dt>
<dd><p>A non-negative integer, or an expression that yields one, indicating
the document level on which the loaded variables will be defined.</p></dd>

</dl>


<dl>
<dt><em>method</em></dt>
<dd><p>An optional string indicating the method by which to send variables
to an external script. If specified, the variables from the current
timeline are sent to the script, and <em class="replaceable">level</em>
receives the loaded variables. If omitted, variables are retrieved
but none are loaded. The legal values for
<em class="replaceable">method</em> are <tt class="literal">"GET"</tt> and
<tt class="literal">"POST"</tt>. This parameter must be a literal, not a
variable or other expression. The standalone version of the Flash
Player always uses the <tt class="literal">"GET"</tt> method regardless of
the <em class="replaceable">method</em> specified.</p></dd>

</dl>




<h4 class="refsect1">Description</h4>


<p>The <em class="filename">loadVariablesNum( )</em> function is nearly
identical to <em class="filename">loadVariables( )</em> except that it
requires the target <em class="replaceable">level</em> to be specified
as a number rather than as a string. This means that
<em class="filename">loadVariablesNum( )</em> can attach variables to
document levels only, not movie clips. The target
<em class="replaceable">level</em> can be specified dynamically, as in:</p>


<blockquote><pre class="code">var myLevel = 2;
loadVariablesNum("myVars.txt", myLevel);</pre></blockquote>


<p>A similar effect could be achieved using string concatenation with
the regular <em class="filename">loadVariables( )</em> function:</p>


<blockquote><pre class="code">loadVariables("myVars.txt", "_level" + myLevel);</pre></blockquote>



<h4 class="refsect1">See Also</h4>


<p><em class="filename">loadVariables( )</em></p>


</div>

<a name="INDEX-2770" /><a name="INDEX-2771" /><a name="INDEX-2772" /><a name="INDEX-2773" /><a name="INDEX-2774" /><a name="INDEX-2775" /><a name="INDEX-2776" /><a name="INDEX-2777" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b><i>

Math 


Object</i></b></font></td><td align="right"><i>access to mathematical functions and constants
</i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><table width="515" border="0" cellpadding="5"><tr><td align="left" /><td align="right" /></tr></table>
<h4 class="refsect1">Availability</h4>


<p>Flash 5</p>



<h4 class="refsect1">Synopsis</h4>

<blockquote><pre class="code">
Math.propertyName
Math.methodName()</pre></blockquote>



<h4 class="refsect1">Properties</h4>


<dl>
<dt><em><a name="INDEX-2777" />E</em></dt>
<dd><p>The constant <em class="emphasis">e</em>, the base of natural logarithms,
approximately 2.71828.</p></dd>

</dl>


<dl>
<dt><em>LN10</em></dt>
<dd><p>The natural logarithm of 10 (log<sub class="subscript">e</sub>10),
approximately 2.30259.</p></dd>

</dl>


<dl>
<dt><em>LN2</em></dt>
<dd><p>The natural logarithm of 2 (log<sub class="subscript">e</sub>2),
approximately 0.69315.</p></dd>

</dl>


<dl>
<dt><em>LOG10E</em></dt>
<dd><p>The base-10 logarithm of <em class="emphasis">e</em>, approximately
0.43429.</p></dd>

</dl>


<dl>
<dt><em>LOG2E</em></dt>
<dd><p>The base-2 logarithm of <em class="emphasis">e</em>, approximately
1.44270. See bug noted in detailed listing.</p></dd>

</dl>


<dl>
<dt><em>PI</em></dt>
<dd><p>The ratio of a circle's circumference to its diameter,
approximately 3.14159.</p></dd>

</dl>


<dl>
<dt><em>SQRT1_2</em></dt>
<dd><p>The reciprocal of the square root of 2, approximately 0.70711.</p></dd>

</dl>


<dl>
<dt><em>SQRT2</em></dt>
<dd><p>Square root of 2, approximately 1.41421.</p></dd>

</dl>



<h4 class="refsect1">Methods</h4>


<dl>
<dt><em>abs<em class="filename">( )</em></em></dt>
<dd><p>Compute the absolute value of a number.</p></dd>

</dl>


<dl>
<dt><em>acos<em class="filename">( )</em></em></dt>
<dd><p>Compute the arc cosine of a number.</p></dd>

</dl>


<dl>
<dt><em>asin<em class="filename">( )</em></em></dt>
<dd><p>Compute the arc sine of a number.</p></dd>

</dl>


<dl>
<dt><em>atan<em class="filename">( )</em></em></dt>
<dd><p>Compute the arc tangent of a number.</p></dd>

</dl>


<dl>
<dt><em>atan2<em class="filename">( )</em></em></dt>
<dd><p>Compute the angle of a point, relative to the x-axis.</p></dd>

</dl>


<dl>
<dt><em>ceil<em class="filename">( )</em></em></dt>
<dd><p>Round a number up to the next integer.</p></dd>

</dl>


<dl>
<dt><em>cos<em class="filename">( )</em></em></dt>
<dd><p>Compute the cosine of an angle.</p></dd>

</dl>


<dl>
<dt><em>exp<em class="filename">( )</em></em></dt>
<dd><p>Raise <em class="emphasis">e</em> to a specified power.</p></dd>

</dl>


<dl>
<dt><em>floor<em class="filename">( )</em></em></dt>
<dd><p>Return the closest integer less than or equal to the input.</p></dd>

</dl>


<dl>
<dt><em>log<em class="filename">( )</em></em></dt>
<dd><p>Compute the natural logarithm of a number.</p></dd>

</dl>


<dl>
<dt><em>max<em class="filename">( )</em></em></dt>
<dd><p>Determine the larger of two numbers.</p></dd>

</dl>


<dl>
<dt><em>min<em class="filename">( )</em></em></dt>
<dd><p>Determine the smaller of two numbers.</p></dd>

</dl>


<dl>
<dt><em>pow<em class="filename">( )</em></em></dt>
<dd><p>Raise a number to a specified power.</p></dd>

</dl>


<dl>
<dt><em>random<em class="filename">( )</em></em></dt>
<dd><p>Retrieve a random floating-point number between 0 and 1.</p></dd>

</dl>


<dl>
<dt><em>round<em class="filename">( )</em></em></dt>
<dd><p>Calculate the closest integer to a number.</p></dd>

</dl>


<dl>
<dt><em>sin<em class="filename">( )</em></em></dt>
<dd><p>Compute the sine of an angle.</p></dd>

</dl>


<dl>
<dt><em>sqrt<em class="filename">( )</em></em></dt>
<dd><p>Compute the square root of a number.</p></dd>

</dl>


<dl>
<dt><em>tan<em class="filename">( )</em></em></dt>
<dd><p>Compute the tangent of an angle.</p></dd>

</dl>



<h4 class="refsect1">Description</h4>


<p>The <em class="filename">Math</em> object provides access to built-in
mathematical functions (accessed through methods) and constant values
(accessed through properties). These functions and constants are used
to perform potentially complex calculations with relative ease.</p>


<p>Note that the properties and methods of the <em class="filename">Math</em>
object may be used in movies exported to the Flash 4 format, in which
case Flash will approximate the calculations. The resulting values
are reasonable approximations but not necessarily identical to the
native Flash 5 functions. The Flash 4 values are sufficiently
accurate for "close-enough" applications such as graphics
display but are not accurate enough for critical financial or
engineering calculations.</p>


<p>Note that the trigonometric functions require angles to be measured
in radians whereas Flash's
<em class="emphasis">MovieClip</em>.<tt class="literal">_rotation</tt> property
is measured in degrees. There are 2<img align="absmiddle" src="figs/U03C0.gif" /> radians in a circle (1
radian is approximately 57.3 degrees). To convert from radians to
degrees, use the formula:</p>


<blockquote><pre class="code">degrees = (radians / Math.PI) * 180;</pre></blockquote>


<p>To convert from degrees to radians, use the formula:</p>


<blockquote><pre class="code">radians = (degrees / 180) * Math.PI;</pre></blockquote>



<h4 class="refsect1">See Also</h4>


<p><em class="filename">Math.atan2( )</em>, <em class="filename">Math.cos( )</em>;
<a href="ch04_01.htm">Section 4.1, "The Number Type"</a> in <a href="ch04_01.htm">Chapter 4, "Primitive Datatypes"</a></p>


</div>

<a name="INDEX-2778" /><a name="INDEX-2779" /><a name="INDEX-2780" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b><i>

Math.abs( ) Method</i></b></font></td><td align="right"><i>compute the absolute value of a number
</i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><table width="515" border="0" cellpadding="5"><tr><td align="left" /><td align="right" /></tr></table>
<h4 class="refsect1">Availability</h4>


<p>Flash 5; may be used when exporting Flash 4 movies</p>



<h4 class="refsect1">Synopsis</h4>

<blockquote><pre class="code">
Math.abs(<em>x</em>)</pre></blockquote>



<h4 class="refsect2">Arguments</h4>


<dl>
<dt><em>x</em></dt>
<dd><p>A positive or negative number.</p></dd>

</dl>




<h4 class="refsect1">Returns</h4>


<p>The absolute value of <em class="replaceable">x</em> (a positive number
of magnitude <em class="replaceable">x</em>).</p>



<h4 class="refsect1">Description</h4>


<p>The <em class="filename">abs( )</em> method calculates the distance
between <em class="replaceable">x</em> and
(also known as the <em class="emphasis">absolute value</em> of
<em class="replaceable">x</em>). It leaves positive numbers unchanged
and converts negative numbers into positive numbers of the same
magnitude. It is useful for calculating the difference between two
numbers without regard to which is larger than the other. For
example, it is useful when calculating the distance between two
points because distances are always positive.</p>



<h4 class="refsect1">Example</h4>


<blockquote><pre class="code">Math.abs(-5);  // Returns 5

// Calculate the difference between two numbers
function diff (num1, num2) { 
  return Math.abs(num1-num2);
}

diff(-5, 5);  // Returns 10</pre></blockquote>


</div>

<a name="INDEX-2781" /><a name="INDEX-2782" /><a name="INDEX-2783" /><a name="INDEX-2784" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b><i>


Math.acos( ) Method</i></b></font></td><td align="right"><i>compute the arc cosine of a number
</i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><table width="515" border="0" cellpadding="5"><tr><td align="left" /><td align="right" /></tr></table>
<h4 class="refsect1">Availability</h4>


<p>Flash 5; may be used when exporting Flash 4 movies</p>



<h4 class="refsect1">Synopsis</h4>

<blockquote><pre class="code">
Math.acos(<em>x</em>)</pre></blockquote>



<h4 class="refsect2">Arguments</h4>


<dl>
<dt><em>x</em></dt>
<dd><p>A number between -1.0 and 1.0 (the cosine of an angle).</p></dd>

</dl>




<h4 class="refsect2">Returns</h4>


<p>The angle, in radians, whose cosine is <em class="replaceable">x </em>.
If <em class="replaceable">x</em> is not in the range -1.0 to 1.0,
returns <tt class="literal">NaN</tt>.</p>




<h4 class="refsect1">Description</h4>


<p>The arc cosine function (sometimes written as
cos<sup class="superscript">-1</sup>) is the inverse of the cosine
function. It returns the angle whose cosine has the specified value,
in radians. The return value is in the range
to <img align="absmiddle" src="figs/U03C0.gif" /> (i.e.,
to 3.14159...).</p>



<h4 class="refsect1">Example</h4>


<blockquote><pre class="code">trace (Math.acos(1.0));  // Displays: 0
trace (Math.acos(0.0));  // Displays: 1.5707... (i.e., pi/2)</pre></blockquote>



<h4 class="refsect1">See Also</h4>


<p><em class="filename">Math.asin( )</em>, <em class="filename">Math.atan</em>( ),
<em class="filename">Math.cos( )</em></p>


</div>

<a name="INDEX-2785" /><a name="INDEX-2786" /><a name="INDEX-2787" /><a name="INDEX-2788" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b><i>


Math.asin( ) Method</i></b></font></td><td align="right"><i>compute the arc sine of a number
</i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><table width="515" border="0" cellpadding="5"><tr><td align="left" /><td align="right" /></tr></table>
<h4 class="refsect1">Availability</h4>


<p>Flash 5; may be used when exporting Flash 4 movies</p>



<h4 class="refsect1">Synopsis</h4>

<blockquote><pre class="code">
Math.asin(<em>x</em>)</pre></blockquote>



<h4 class="refsect2">Arguments</h4>


<dl>
<dt><em>x</em></dt>
<dd><p>A number between -1.0 and 1.0 (the sine of an angle).</p></dd>

</dl>




<h4 class="refsect2">Returns</h4>


<p>The angle, in radians, whose sine is <em class="replaceable">x </em>.
If <em class="replaceable">x</em> is not in the range -1.0 to 1.0,
returns <tt class="literal">NaN</tt>.</p>




<h4 class="refsect1">Description</h4>


<p>The arc sine function (sometimes written as
sin<sup class="superscript">-1</sup>) is the inverse of the sine
function. It returns the angle whose sine has the specified value, in
radians. The return value is in the range -<img align="absmiddle" src="figs/U03C0.gif" />/2 to <img align="absmiddle" src="figs/U03C0.gif" />/2
radians.</p>



<h4 class="refsect1">Example</h4>


<blockquote><pre class="code">trace (Math.asin(1.0));  // Displays: 1.5707...  (i.e., pi/2)
trace (Math.asin(0.0));  // Displays: 0</pre></blockquote>



<h4 class="refsect1">See Also</h4>


<p><em class="filename">Math.acos</em>, <em class="filename">Math.atan</em>,
<em class="filename">Math.sin</em></p>


</div>

<a name="INDEX-2789" /><a name="INDEX-2790" /><a name="INDEX-2791" /><a name="INDEX-2792" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b><i>


Math.atan( ) Method</i></b></font></td><td align="right"><i>compute the arc tangent of a number
</i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><table width="515" border="0" cellpadding="5"><tr><td align="left" /><td align="right" /></tr></table>
<h4 class="refsect1">Availability</h4>


<p>Flash 5; may be used when exporting Flash 4 movies</p>



<h4 class="refsect1">Synopsis</h4>

<blockquote><pre class="code">
Math.atan(<em>x</em>)</pre></blockquote>



<h4 class="refsect2">Arguments</h4>


<dl>
<dt><em>x</em></dt>
<dd><p>A number between -<tt class="literal">Infinity</tt> and
<tt class="literal">Infinity</tt>, inclusive (the tangent of some angle).</p></dd>

</dl>




<h4 class="refsect2">Returns</h4>


<p>The angle, in radians, whose tangent is <em class="replaceable">x </em>.</p>




<h4 class="refsect1">Description</h4>


<p>The arc tan function (sometimes written as
tan<sup class="superscript">-1</sup>) is the inverse of the tangent
function. It returns the angle whose tangent has the specified value,
in radians. The return value is in the range -<img align="absmiddle" src="figs/U03C0.gif" />/2 to <img align="absmiddle" src="figs/U03C0.gif" />/2.</p>



<h4 class="refsect1">Example</h4>


<blockquote><pre class="code">trace (Math.atan(1.0));       // Displays: 0.78539...
trace (Math.atan(0.0));       // Displays: 0
trace (Math.atan(-Infinity)); // Displays: -1.5707... (i.e., -pi/2)</pre></blockquote>



<h4 class="refsect1">See Also</h4>


<p><em class="filename">Math.acos( )</em>, <em class="filename">Math.asin( )</em>,
<em class="filename">Math.tan( )</em></p>


</div>

<a name="INDEX-2793" /><a name="INDEX-2794" /><a name="INDEX-2795" /><a name="INDEX-2796" /><a name="INDEX-2797" /><a name="INDEX-2798" /><a name="INDEX-2799" /><a name="INDEX-2800" /><a name="INDEX-2801" /><a name="INDEX-2802" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b><i>

Math.atan2( ) Method</i></b></font></td><td align="right"><i>determine an angle based on a point
</i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><table width="515" border="0" cellpadding="5"><tr><td align="left" /><td align="right" /></tr></table>
<h4 class="refsect1">Availability</h4>


<p>Flash 5; may be used when exporting Flash 4 movies</p>



<h4 class="refsect1">Synopsis</h4>

<blockquote><pre class="code">
Math.atan2(<em>y, x</em>)</pre></blockquote>



<h4 class="refsect2">Arguments</h4>


<dl>
<dt><em>y</em></dt>
<dd><p>The y-coordinate of the point.</p></dd>

</dl>


<dl>
<dt><em>x</em></dt>
<dd><p>The x-coordinate of the point.</p></dd>

</dl>




<h4 class="refsect2">Returns</h4>


<p>The angle, in radians, of the point (<em class="replaceable">x</em>,
<em class="replaceable">y</em>) from the center of a circle, measured
counterclockwise from the circle's positive horizontal axis
(i.e., the X-axis). Ranges from <img align="absmiddle" src="figs/U03C0.gif" /> to -<img align="absmiddle" src="figs/U03C0.gif" />. (Negative values
indicate angles below the X-axis).</p>




<h4 class="refsect1">Description</h4>


<p>The<em class="filename"> atan2() </em>method, like <em class="filename">atan(
)</em>, performs an arc tangent calculation but uses x- and
y-coordinates, rather than their ratio, as arguments. That is,
calculating an arc tangent with <em class="filename">atan2( )</em> as:</p>


<blockquote><pre class="code">Math.atan2(9, 3);  // Yields 1.24904577239825</pre></blockquote>


<p>is equivalent to calculating the arc tangent with <em class="filename">atan(
)</em>, using the ratio of 9/3 (or 3), as follows:</p>


<blockquote><pre class="code">Math.atan(3);      // Same thing</pre></blockquote>



<h4 class="refsect1">Usage</h4>


<p>Note that the <em class="emphasis">y</em> -coordinate is passed as the
first argument to <em class="filename">atan2( )</em>, whereas the
<em class="emphasis">x-</em>coordinate is passed as the second argument.
This is intentional and required. It mirrors the structure of
tangent, which is the ratio of the side opposite an angle (y) divided
by the side adjacent to the angle (x).</p>



<h4 class="refsect1">Example</h4>


<p>The<em class="filename"> atan2( )</em> method can be used to make a
<a name="INDEX-2796" />
<a name="INDEX-2797" />
<a name="INDEX-2798" />movie
<a name="INDEX-2799" />clip point toward a moving target. The
following example, available at the online Code Depot, shows code
that rotates the current clip toward the mouse pointer. It can be
used to orient an enemy spaceship toward a player's spaceship:</p>


<blockquote><pre class="code">// Rotate movie clip toward mouse
onClipEvent (load) {
  // Convert radians to degrees. There are 2*pi radians per 360 degrees.
  function radiansToDegrees(radians) {
    return (radians/Math.PI) * 180;
  }
}

onClipEvent (enterFrame) {
  // Create a point object that stores the x- and y- coordinates of
  // this clip relative to its parent's registration point
  point = {x:_x, y:_y};
  // Convert our local (parent) coordinates to global (Stage) coordinates
  _parent.localToGlobal(point);
  // Measure the distance between the registration 
  // point of this clip and the mouse
  deltaX = _root._xmouse - point.x;
  deltaY = _root._ymouse - point.y;
  // Calculate the angle of the line from the registration point
  // of this clip to the mouse
  rotationRadian = Math.atan2(deltaY, deltaX);
  // Convert the radian version of the angle to degrees
  rotationAngle = radiansToDegrees(rotationRadian); // See earlier function
  // Update the rotation of this clip to point to the mouse
  this._rotation = rotationAngle;
}<a name="INDEX-2800" />
<a name="INDEX-2801" />
<a name="INDEX-2802" /></pre></blockquote>


</div>

<a name="INDEX-2803" /><a name="INDEX-2804" /><a name="INDEX-2805" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b><i>

Math.ceil( ) Method</i></b></font></td><td align="right"><i>round a number up to the next integer
</i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><table width="515" border="0" cellpadding="5"><tr><td align="left" /><td align="right" /></tr></table>
<h4 class="refsect1">Availability</h4>


<p>Flash 5; may be used when exporting Flash 4 movies</p>



<h4 class="refsect1">Synopsis</h4>

<blockquote><pre class="code">
Math.ceil(<em>x</em>)</pre></blockquote>



<h4 class="refsect2">Arguments</h4>


<dl>
<dt><em>x</em></dt>
<dd><p>A number.</p></dd>

</dl>




<h4 class="refsect2">Returns</h4>


<p>The next integer greater than or equal to
<em class="replaceable">x</em>.</p>




<h4 class="refsect1">Description</h4>


<p>The <em class="filename">ceil( )</em> (i.e., ceiling) method converts a
floating-point number to the first integer greater than or equal to
<em class="replaceable">x</em>.</p>



<h4 class="refsect1">Example</h4>


<blockquote><pre class="code">Math.ceil(1.00001);  // Returns 2
Math.ceil(5.5);      // Returns 6
Math.ceil(-5.5);     // Returns -5</pre></blockquote>



<h4 class="refsect1">See Also</h4>


<p><em class="filename">Math.floor( )</em>, <em class="filename">Math.round( )</em></p>


</div>

<a name="INDEX-2806" /><a name="INDEX-2807" /><a name="INDEX-2808" /><a name="INDEX-2809" /><a name="INDEX-2810" /><a name="INDEX-2811" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b><i>




Math.cos( ) Method</i></b></font></td><td align="right"><i>compute the cosine of an angle
</i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><table width="515" border="0" cellpadding="5"><tr><td align="left" /><td align="right" /></tr></table>
<h4 class="refsect1">Availability</h4>


<p>Flash 5; may be used when exporting Flash 4 movies</p>



<h4 class="refsect1">Synopsis</h4>

<blockquote><pre class="code">
Math.cos(<em>theta</em>)</pre></blockquote>



<h4 class="refsect2">Arguments</h4>


<dl>
<dt><em>theta</em></dt>
<dd><p>An angle, in radians (not degrees), in the range 0 to 2<img align="absmiddle" src="figs/U03C0.gif" />.</p></dd>

</dl>




<h4 class="refsect2">Returns</h4>


<p>The cosine of <tt><em class="replaceable">theta</em></tt> (the result is in the
range -1.0 to 1.0).</p>




<h4 class="refsect1">Description</h4>


<p>The <em class="filename">cos( )</em> function returns the trigonometric
cosine of an angle. In a right triangle, the cosine of an angle is
the result of dividing the length of the side adjacent to the angle
by the triangle's hypotenuse.</p>



<h4 class="refsect1">Usage</h4>


<p>Note that <em class="filename">cos( )</em> expects angles to be provided
in radians, not degrees.</p>



<h4 class="refsect1">Example</h4>


<blockquote><pre class="code">trace (cos(0));            // Displays: 1.0
trace (cos(Math.PI));      // Displays: -1.0</pre></blockquote>


<p>The <em class="filename">cos( )</em> function can be used along with
<em class="filename">sin( )</em> to calculate a point on a circle, which
we use in the following example to move a movie clip in a circular
path. Given the radius of a circle, <em class="emphasis">r</em>, and an
angle, <img align="absmiddle" src="figs/U03B8.gif" />, measured counterclockwise from the positive horizontal
axis, a point's location is (r*cos<img align="absmiddle" src="figs/U03B8.gif" />, r*sin<img align="absmiddle" src="figs/U03B8.gif" />):</p>


<blockquote><pre class="code"><tt class="userinput"><b>// CODE ON FRAME 1</b></tt>
var radius = 100;             // Radius of circle path
var centerX = 275;            // Horizontal center of circle path
var centerY = 200;            // Vertical center of circle path
var rotAngleDeg = 0;          // Angle of object in degrees, measured 
                              //   counterclockwise from the horizon (x-axis)
var rotAngRad;                // Radian version of rotAngleDeg

// Convert degrees to radians. There are 2*pi radians per 360 degrees.
function degreesToRadians(degrees) {
  return (degrees/180) * Math.PI;
}

<tt class="userinput"><b>// CODE ON FRAME 2</b></tt>
// Increase the rotation angle by 5 degrees
rotAngleDeg += 5;

// Place the object. Note that Flash inverts the Y-axis of Cartesian coordinates 
// so we decrement y to obtain our new location
rotAngRad= degreesToRadians(rotAngleDeg);
ball._x = centerX + Math.cos(rotAngRad) * radius;
ball._y = centerY - Math.sin(rotAngRad) * radius;

<tt class="userinput"><b>// CODE ON FRAME 3</b></tt>
// Go back to frame 2 where we move the ball again
gotoAndPlay(2);</pre></blockquote>



<h4 class="refsect1">See Also</h4>


<p><em class="filename">Math.acos( )</em>, <em class="filename">Math.sin( )</em>,
<em class="filename">Math.tan( )</em></p>


</div>

<a name="INDEX-2812" /><a name="INDEX-2813" /><a name="INDEX-2814" /><a name="INDEX-2815" /><a name="INDEX-2816" /><a name="INDEX-2817" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b><i>


Math.E 
Property</i></b></font></td><td align="right">
the constant <i>e</i> (the base of the natural logarithm)
</i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><table width="515" border="0" cellpadding="5"><tr><td align="left" /><td align="right" /></tr></table>
<h4 class="refsect1">Availability</h4>


<p>Flash 5; may be used when exporting Flash 4 movies</p>



<h4 class="refsect1">Synopsis</h4>

<blockquote><pre class="code">
Math.E</pre></blockquote>



<h4 class="refsect1">Description</h4>


<p><tt class="literal">The</tt> <tt class="literal">E</tt> property stores an
approximation of the natural logarithmic base (roughly 2.71828),
which in mathematics is represented by the symbol
<em class="emphasis">e</em>. It is a transcendental number like <img align="absmiddle" src="figs/U03C0.gif" />,
used in mathematical equations involving growth or change.
Don't confuse it with the <tt class="literal">E</tt> that is used for
exponential notation as described in <a href="ch04_03.htm">Section 4.3.2, "Floating-Point Literals"</a> in <a href="ch04_01.htm">Chapter 4, "Primitive Datatypes"</a>. The
two are unrelated.</p>



<h4 class="refsect1">See Also</h4>


<p><em class="filename">Math.log( )</em>, <em class="filename">Math.LN10( )</em>,
<em class="filename">Math.LN2( )</em></p>


</div>

<a name="INDEX-2818" /><a name="INDEX-2819" /><a name="INDEX-2820" /><a name="INDEX-2821" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b><i>


Math.exp( ) Method</i></b></font></td><td align="right">raise the constant <i>e</i> to a specified power
</td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><table width="515" border="0" cellpadding="5"><tr><td align="left" /><td align="right" /></tr></table>
<h4 class="refsect1">Availability</h4>


<p>Flash 5; may be used when exporting Flash 4 movies</p>



<h4 class="refsect1">Synopsis</h4>

<blockquote><pre class="code">
Math.exp(<em>x</em>)</pre></blockquote>



<h4 class="refsect2">Arguments</h4>


<dl>
<dt><em>x</em></dt>
<dd><p>The exponent to which to raise <tt class="literal">Math.E</tt>.</p></dd>

</dl>




<h4 class="refsect2">Returns</h4>


<p><tt class="literal">Math.E</tt> to the power <em class="replaceable">x </em>.</p>



</div>

<a name="INDEX-2822" /><a name="INDEX-2823" /><a name="INDEX-2824" /><a name="INDEX-2825" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b><i>


Math.floor( ) Method</i></b></font></td><td align="right"><i>round a number to down to the previous integer
</i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><table width="515" border="0" cellpadding="5"><tr><td align="left" /><td align="right" /></tr></table>
<h4 class="refsect1">Availability</h4>


<p>Flash 5; may be used when exporting Flash 4 movies</p>



<h4 class="refsect1">Synopsis</h4>

<blockquote><pre class="code">
Math.floor(<em>x</em>)</pre></blockquote>



<h4 class="refsect2">Arguments</h4>


<dl>
<dt><em>x</em></dt>
<dd><p>A number.</p></dd>

</dl>




<h4 class="refsect2">Returns</h4>


<p>The closest integer less than or equal to
<em class="replaceable">x</em>.</p>




<h4 class="refsect1">Description</h4>


<p>The <em class="filename">floor</em> method converts a floating-point
number to the first integer less than or equal to <em class="replaceable">x
</em>.</p>



<h4 class="refsect1">Example</h4>


<blockquote><pre class="code">Math.floor(1.99999);  // Returns 1
Math.floor(5.5);      // Returns 5
Math.floor(-5.5);     // Returns -6

function minutesToHHMM (minutes) {
  var hours = Math.floor(minutes/60);
  minutes -= hours * 60;
  minutes = minutes &lt; 10 ? "0" + minutes : minutes;
  return hours + ":" + minutes;
}</pre></blockquote>



<h4 class="refsect1">See Also</h4>


<p><em class="filename">Math.ceil( )</em>, <em class="filename">Math.round( )</em></p>


</div>

<a name="INDEX-2826" /><a name="INDEX-2827" /><a name="INDEX-2828" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b><i>

Math.LN10 Property</i></b></font></td><td align="right"><i>natural logarithm of 10 (log<sub>e</sub>10), approximately 2.30259
</i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><table width="515" border="0" cellpadding="5"><tr><td align="left" /><td align="right" /></tr></table>
<h4 class="refsect1">Availability</h4>


<p>Flash 5; may be used when exporting Flash 4 movies</p>



<h4 class="refsect1">Synopsis</h4>

<blockquote><pre class="code">
Math.LN10</pre></blockquote>



<h4 class="refsect1">Description</h4>


<p>The <tt class="literal">LN10</tt> property represents the natural logarithm
of 10 (the base-<em class="emphasis">e</em> logarithm of 10), a constant
equaling approximately 2.30259.</p>


</div>

<a name="INDEX-2829" /><a name="INDEX-2830" /><a name="INDEX-2831" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b><i>

Math.LN2 Property</i></b></font></td><td align="right"><i>natural logarithm of 2 (loge<sub>2</sub>), approximately 0.69315
</i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><table width="515" border="0" cellpadding="5"><tr><td align="left" /><td align="right" /></tr></table>
<h4 class="refsect1">Availability</h4>


<p>Flash 5; may be used when exporting Flash 4 movies</p>



<h4 class="refsect1">Synopsis</h4>

<blockquote><pre class="code">
Math.LN2</pre></blockquote>



<h4 class="refsect1">Description</h4>


<p>The <tt class="literal">LN2</tt> property represents the natural logarithm
of 2 (the base-<em class="emphasis">e</em> logarithm of 2), a constant
equaling approximately 0.69315</p>


</div>

<a name="INDEX-2832" /><a name="INDEX-2833" /><a name="INDEX-2834" /><a name="INDEX-2835" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b><i>


Math.log( ) Method</i></b></font></td><td align="right"><i>compute the natural logarithm of a number
</i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><table width="515" border="0" cellpadding="5"><tr><td align="left" /><td align="right" /></tr></table>
<h4 class="refsect1">Availability</h4>


<p>Flash 5; may be used when exporting Flash 4 movies</p>



<h4 class="refsect1">Synopsis</h4>

<blockquote><pre class="code">
Math.log(<em>x</em>)</pre></blockquote>



<h4 class="refsect2">Arguments</h4>


<dl>
<dt><em>x</em></dt>
<dd><p>A positive integer.</p></dd>

</dl>




<h4 class="refsect2">Returns</h4>


<p>The natural logarithm of <em class="replaceable">x </em>.</p>




<h4 class="refsect1">Description</h4>


<p>The <em class="filename">log( )</em> method calculates the natural
logarithm (i.e., the base-<em class="emphasis">e</em> logarithm) of a
number. See the following example to calculate the base-10 logarithm.</p>



<h4 class="refsect1">Example</h4>


<blockquote><pre class="code">trace (Math.log(Math.E));   // Displays: 1

// Compute the base-10 logarithm of a number
function log10 (x) {
  return (Math.log(x) / Math.log(10));
}</pre></blockquote>


</div>

<a name="INDEX-2836" /><a name="INDEX-2837" /><a name="INDEX-2838" /><a name="INDEX-2839" /><a name="INDEX-2840" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b><i>



Math.LOG10E Property</i></b></font></td><td align="right"><i>base-10 logarithm of e, approximately 0.43429
</i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><table width="515" border="0" cellpadding="5"><tr><td align="left" /><td align="right" /></tr></table>
<h4 class="refsect1">Availability</h4>


<p>Flash 5; may be used when exporting Flash 4 movies</p>



<h4 class="refsect1">Synopsis</h4>

<blockquote><pre class="code">
Math.LOG10E</pre></blockquote>



<h4 class="refsect1">Description</h4>


<p>The <tt class="literal">LOG10E</tt> property represents the common
logarithm of <em class="emphasis">e</em> (the base-10 logarithm of
<em class="emphasis">e</em>), a constant equaling approximately 0.43429.</p>


</div>

<a name="INDEX-2841" /><a name="INDEX-2842" /><a name="INDEX-2843" /><a name="INDEX-2844" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b><i>


Math.LOG2E Property</i></b></font></td><td align="right"><i>base-2 logarithm of e, approximately 1.44270
</i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><table width="515" border="0" cellpadding="5"><tr><td align="left" /><td align="right" /></tr></table>
<h4 class="refsect1">Availability</h4>


<p>Flash 5; may be used when exporting Flash 4 movies</p>



<h4 class="refsect1">Synopsis</h4>

<blockquote><pre class="code">
Math.LOG2E</pre></blockquote>



<h4 class="refsect1">Description</h4>


<p>The <tt class="literal">LOG2E</tt> property represents the base-2 logarithm
of <em class="emphasis">e</em>
(log<sub class="subscript">2</sub><em class="emphasis">e</em>), a constant
equaling approximately 1.44270.</p>



<h4 class="refsect1">Bugs</h4>


<p>In Flash 5r30, <tt class="literal">LOG2E</tt> erroneously returns the value
of <tt class="literal">LN2</tt> (0.69315).</p>


</div>

<a name="INDEX-2845" /><a name="INDEX-2846" /><a name="INDEX-2847" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b><i>

Math.max( ) Method</i></b></font></td><td align="right"><i>determine the larger of two numbers
</i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><table width="515" border="0" cellpadding="5"><tr><td align="left" /><td align="right" /></tr></table>
<h4 class="refsect1">Availability</h4>


<p>Flash 5; may be used when exporting Flash 4 movies</p>



<h4 class="refsect1">Synopsis</h4>

<blockquote><pre class="code">
Math.max(<em>x, y</em>)</pre></blockquote>



<h4 class="refsect2">Arguments</h4>


<dl>
<dt><em>x</em></dt>
<dd><p>A number.</p></dd>

</dl>


<dl>
<dt><em>y</em></dt>
<dd><p>A number.</p></dd>

</dl>




<h4 class="refsect2">Returns</h4>


<p>The larger of <em class="replaceable">x</em> and
<em class="replaceable">y</em>.</p>




<h4 class="refsect1">Example</h4>


<blockquote><pre class="code">Math.max(5, 1);    // Returns 5
Math.max(-6, -5);  // Returns -5</pre></blockquote>


<p>This example constrains a value to the specified range:</p>


<blockquote><pre class="code">function constrainToRange (checkVal, minVal, maxVal) {
  return Math.min(Math.max(checkVal, minVal), maxVal);
}
// Constrain the slider to the stage area
mySlider._x = constainToRange (mySlider._x, 0, 550);</pre></blockquote>


<p>This example returns the maximum value in an array:</p>


<blockquote><pre class="code">function maxInArray (checkArray) {
  maxVal = -Number.MAX_VALUE;  // Initialize maxVal to a very small number
  for (var i = 0; i &lt; checkArray.length; i++) {
    maxVal = Math.max(checkArray[i], maxVal);
  }
  return maxVal;
}

trace(maxInArray([2,3,66,4,342,-90,0]));  // Displays: 342</pre></blockquote>



<h4 class="refsect1">See Also</h4>


<p><em class="filename">Math.min( )</em></p>


</div>

<a name="INDEX-2848" /><a name="INDEX-2849" /><a name="INDEX-2850" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b><i>

Math.min( ) Method</i></b></font></td><td align="right"><i>determine the smaller of two numbers
</i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><table width="515" border="0" cellpadding="5"><tr><td align="left" /><td align="right" /></tr></table>
<h4 class="refsect1">Availability</h4>


<p>Flash 5; may be used when exporting Flash 4 movies</p>



<h4 class="refsect1">Synopsis</h4>

<blockquote><pre class="code">
Math.min(<em>x, y</em>)</pre></blockquote>



<h4 class="refsect2">Arguments</h4>


<dl>
<dt><em>x</em></dt>
<dd><p>A number.</p></dd>

</dl>


<dl>
<dt><em>y</em></dt>
<dd><p>A number.</p></dd>

</dl>




<h4 class="refsect2">Returns</h4>


<p>The smaller of <em class="replaceable">x</em> and
<em class="replaceable">y</em>.</p>




<h4 class="refsect1">Example</h4>


<blockquote><pre class="code">Math.min(5, 1);    // Returns 1
Math.min(-6, -5);  // Returns -6</pre></blockquote>


<p>Reader Exercise: Modify the example under <em class="filename">Math.max(
)</em> to return the minimum value in an array rather than the
maximum.</p>



<h4 class="refsect1">See Also</h4>


<p><em class="filename">Math.max( )</em></p>


</div>

<a name="INDEX-2851" /><a name="INDEX-2852" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b><i>
Math.PI Property</i></b></font></td><td align="right"><i>the ratio of a circle's circumference to its diameter, approximately 3.14159
</i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><table width="515" border="0" cellpadding="5"><tr><td align="left" /><td align="right" /></tr></table>
<h4 class="refsect1">Availability</h4>


<p>Flash 5; may be used when exporting Flash 4 movies</p>



<h4 class="refsect1">Synopsis</h4>

<blockquote><pre class="code">
Math.PI</pre></blockquote>



<h4 class="refsect1">Description</h4>


<p>The <tt class="literal">PI</tt> property represents the constant <img align="absmiddle" src="figs/U03C0.gif" />, the
ratio of the circumference of a circle to its diameter.</p>



<h4 class="refsect1">Example</h4>


<p><tt class="literal">Math.PI</tt> is most famously used in calculating the
area of a circle:</p>


<blockquote><pre class="code">function circleArea (radius) {
  // PI times the radius squared could also be 
  // written as Math.PI * Math.pow(radius, 2)
  return Math.PI * (radius * radius);
}</pre></blockquote>


</div>

<a name="INDEX-2853" /><a name="INDEX-2854" /><a name="INDEX-2855" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b><i>

Math.pow( ) Method</i></b></font></td><td align="right"><i>raise a number to a specified power
</i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><table width="515" border="0" cellpadding="5"><tr><td align="left" /><td align="right" /></tr></table>
<h4 class="refsect1">Availability</h4>


<p>Flash 5; may be used when exporting Flash 4 movies</p>



<h4 class="refsect1">Synopsis</h4>

<blockquote><pre class="code">
Math.pow(<em>base, exponent</em>)</pre></blockquote>



<h4 class="refsect2">Arguments</h4>


<dl>
<dt><em>base</em></dt>
<dd><p>A number representing the base of the exponential expression.</p></dd>

</dl>


<dl>
<dt><em>exponent</em></dt>
<dd><p>A number representing the power (i.e., exponent) to which to raise
<em class="replaceable">base</em>.</p></dd>

</dl>




<h4 class="refsect2">Returns</h4>


<p>The <em class="replaceable">base</em> raised to the power
<em class="replaceable">exponent</em>.</p>




<h4 class="refsect1">Description</h4>


<p>The <em class="filename">pow( )</em> method can be used to raise any
number to any power. If <em class="replaceable">exponent</em> is
negative, <em class="filename">pow( )</em> returns 1 /
(<em class="replaceable">base</em><sup class="superscript">abs(exponent)</sup>).
If <em class="replaceable">exponent</em> is a fraction, <em class="filename">pow(
)</em> can be used to take, say, the square root or cube root
of a number (in which case it returns the positive root, although,
mathematically, there may also be a negative root).</p>



<h4 class="refsect1">Example</h4>


<blockquote><pre class="code">Math.pow(5, 2);    // Returns 25 (5 squared)
Math.pow(5, 3);    // Returns 125 (5 cubed)
Math.pow(5, -2);   // Returns 0.04 (1 divided by 25)
Math.pow(8, 1/3);  // Returns 2 (cube root of 8)
Math.pow(9, 1/2);  // Returns 3 (square root of 9)
Math.pow(10, 6);   // Returns 1000000 (can also be written as 1e6)</pre></blockquote>



<h4 class="refsect1">Bugs</h4>


<p>Build 30 of the Flash 5 Player did not correctly calculate
<em class="filename">Math.pow( )</em> for negative values of
<em class="replaceable">base</em>. For example, <tt class="literal">Math.pow(-2,
2)</tt> was calculated as <tt class="literal">NaN</tt> whereas it
should be 4.</p>



<h4 class="refsect1">See Also</h4>


<p><em class="filename">Math.exp( )</em>, <em class="filename">Math.sqrt( )</em>,
<tt class="literal">Math.SQRT2, Math.SQRT1_2</tt></p>


</div>

<a name="INDEX-2856" /><a name="INDEX-2857" /><a name="INDEX-2858" /><a name="INDEX-2859" /><a name="INDEX-2860" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b><i>



Math.random( ) Method</i></b></font></td><td align="right"><i>generate a random number from 0 to 1.0
</i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><table width="515" border="0" cellpadding="5"><tr><td align="left" /><td align="right" /></tr></table>
<h4 class="refsect1">Availability</h4>


<p>Flash 5; may be used when exporting Flash 4 movies</p>



<h4 class="refsect1">Synopsis</h4>

<blockquote><pre class="code">
Math.random()</pre></blockquote>



<h4 class="refsect2">Returns</h4>


<p>A floating-point number greater than or equal to 0.0 and less than
1.0.</p>




<h4 class="refsect1">Description</h4>


<p>The <em class="filename">random( )</em> method provides a way to produce
random numbers, which can be used to choose randomly between actions
in a script. The <em class="filename">random( )</em> method generates a
random value between 0
and .99999... inclusive, which we can scale according to our needs.
For example, to obtain a random number between 0
and 5, we use:</p>


<blockquote><pre class="code">Math.floor(Math.random( ) * 6)</pre></blockquote>


<p>And to obtain a random number between 1 and 6, we use:</p>


<blockquote><pre class="code">Math.floor(Math.random( ) * 6) + 1</pre></blockquote>


<p>This custom function returns an integer number in a specified range
rather than a floating-point number in the range 0
to 1:</p>


<blockquote><pre class="code">// Returns a number in the range minVal to maxVal, inclusive
function myRandom (minVal, maxVal) {
  return minVal + Math.floor(Math.random( ) * (maxVal + 1 - minVal));
}

// Invoke the function
dieRoll = myRandom(1, 6);  // Emulates a six-sided die
trace(dieRoll);

// Note that to simulate two dice, you can use this:
twoDice = myRandom(2, 12);  // The minimum value is 2, not 1

// To return the die values separately, use an array
function rollTwoDice ( ) {
  return [myRandom(1, 6), myRandom(1, 6)];
}</pre></blockquote>


<p>Due to a bug in Build 30 of the Flash 5 Player, this approach is
prone to an extremely rare, but potentially important inaccuracy. In
Build 30, <em class="filename">random( )</em> generates values in the
range 0.0 to 1.0, inclusive. When we multiply the return of
<em class="filename">random( )</em> by an integer, <em class="emphasis">n</em>,
we produce values in the range 0.0 to <em class="emphasis">n</em>. In our
example, we multiplied <em class="filename">Math.random( )</em> by 6, so
that the returned value ranges from 0.0 to 6.0. By invoking
<em class="filename">floor( )</em> on the adjusted value, we produce
integers in the range
to <em class="emphasis">n</em> (0 to 6 in our example). This leads to an
inaccurate distribution of random numbers -- the chance of
producing <em class="filename">n</em> is much smaller than the chance of
producing any other number in the series.</p>


<p>The following version of the <em class="filename">myRandom( )</em>
function avoids the problem by simply discarding the value 1.0 if it
happens to be chosen by <em class="filename">Math.random( )</em>:</p>


<blockquote><pre class="code">// Returns an integer in the range minVal to maxVal, inclusive
function myRandom (minVal, maxVal) {
  do {
    r = Math.random( );   // Keep picking a number until it is not 1.
  } while (r == 1);
  return minVal + Math.floor(r * (maxVal + 1 - minVal));
}

// Invoke the function
dieRoll = myRandom(1, 6);  // Emulates a six-sided die safely in Build 30
                           // of the Flash 5 Player</pre></blockquote>



<h4 class="refsect1">Usage</h4>


<p><em class="filename">Math.random( )</em> replaces the deprecated Flash 4
<em class="filename">random</em> function.</p>



<h4 class="refsect1">Example</h4>


<p><em class="filename">Math.random( )</em> is often used to cause the
playhead to jump to a random frame in the timeline. The following
code invokes the <em class="filename">myRandom( )</em> function from the
preceding example and then sends the playhead to the randomly chosen
frame:</p>


<blockquote><pre class="code">// Invoke the function; pick a random number between 10 and 20
var destinationFrame = myRandom(10, 20);

// Now send the playhead to that frame
gotoAndStop(destinationFrame);</pre></blockquote>


</div>

<a name="INDEX-2861" /><a name="INDEX-2862" /><a name="INDEX-2863" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b><i>

Math.round( ) Method</i></b></font></td><td align="right"><i>calculate the closest integer to a number
</i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><table width="515" border="0" cellpadding="5"><tr><td align="left" /><td align="right" /></tr></table>
<h4 class="refsect1">Availability</h4>


<p>Flash 5; may be used when exporting Flash 4 movies</p>



<h4 class="refsect1">Synopsis</h4>

<blockquote><pre class="code">
Math.round(<em>x</em>)</pre></blockquote>



<h4 class="refsect2">Arguments</h4>


<dl>
<dt><em>x</em></dt>
<dd><p>A number.</p></dd>

</dl>




<h4 class="refsect2">Returns</h4>


<p>The integer mathematically closest to <em class="replaceable">x</em>
(or <em class="replaceable">x</em> itself, if
<em class="replaceable">x</em> is an integer). If the fractional
component of <em class="replaceable">x</em> is exactly 0.5
(<em class="replaceable">x</em> is equidistant from the two closest
integers), <em class="filename">round( )</em> returns the first integer
greater than <em class="replaceable">x</em>.</p>




<h4 class="refsect1">Description</h4>


<p>The <em class="filename">round( )</em> method performs traditional
rounding; it converts a floating-point number to the nearest integer.
Positive numbers with a fractional portion <em class="emphasis">less</em>
than 0.5 and negative numbers with a fractional portion
<em class="emphasis">greater</em> than 0.5 are rounded
<em class="emphasis">down</em>. Positive numbers with a fractional portion
<em class="emphasis">greater</em> than or equal to 0.5 and negative
numbers with a fractional portion <em class="emphasis">less</em> than or
equal to 0.5 are rounded <em class="emphasis">up</em>.</p>



<h4 class="refsect1">Example</h4>


<blockquote><pre class="code">Math.round(1.4);      // Returns 1
Math.round(1.5);      // Returns 2
Math.round(1.6);      // Returns 2
Math.round(-5.4);     // Returns -5
Math.round(-5.5);     // Returns -5
Math.round(-5.6);     // Returns -6</pre></blockquote>



<h4 class="refsect1">See Also</h4>


<p><em class="filename">int( )</em>, <em class="filename">Math.ceil( )</em>,
<em class="filename">Math.floor( )</em></p>


</div>

<a name="INDEX-2864" /><a name="INDEX-2865" /><a name="INDEX-2866" /><a name="INDEX-2867" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b><i>


Math.sin( ) Method</i></b></font></td><td align="right"><i>compute the sine of an angle
</i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><table width="515" border="0" cellpadding="5"><tr><td align="left" /><td align="right" /></tr></table>
<h4 class="refsect1">Availability</h4>


<p>Flash 5; may be used when exporting Flash 4 movies</p>



<h4 class="refsect1">Synopsis</h4>

<blockquote><pre class="code">
Math.sin(<em>theta</em>)</pre></blockquote>



<h4 class="refsect2">Arguments</h4>


<dl>
<dt><em>theta</em></dt>
<dd><p>An angle, in radians (not degrees), in the range 0 to 2<img align="absmiddle" src="figs/U03C0.gif" />.</p></dd>

</dl>




<h4 class="refsect2">Returns</h4>


<p>The sine of <em class="replaceable">theta</em> (the result is in the
range -1.0 to 1.0).</p>




<h4 class="refsect1">Description</h4>


<p>The <em class="filename">sin( )</em> method<em class="filename"> </em>returns
the trigonometric sine of an angle. In a right triangle, the sine of
an angle is the result of dividing the length of the side opposite
the angle by the triangle's hypotenuse.</p>



<h4 class="refsect1">Usage</h4>


<p>Note that <em class="filename">sin( )</em> expects angles to be provided
in radians, not degrees.</p>



<h4 class="refsect1">Example</h4>


<blockquote><pre class="code">trace (Math.sin(0));            // Displays: 0
trace (Math.sin(Math.PI/2));    // Displays: 1.0</pre></blockquote>


<p>The <em class="filename">sin( )</em> function can be used along with
<em class="filename">cos( )</em> to calculate a point on a circle. See the
example under <em class="filename">Math.cos( ).</em></p>



<h4 class="refsect1">See Also</h4>


<p><em class="filename">Math.asin( )</em>, <em class="filename">Math.cos( )</em>,
<em class="filename">Math.tan( )</em></p>


</div>

<a name="INDEX-2868" /><a name="INDEX-2869" /><a name="INDEX-2870" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b><i>

Math.sqrt( ) Method</i></b></font></td><td align="right"><i>calculate the square root of a number
</i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><table width="515" border="0" cellpadding="5"><tr><td align="left" /><td align="right" /></tr></table>
<h4 class="refsect1">Availability</h4>


<p>Flash 5; may be used when exporting Flash 4 movies</p>



<h4 class="refsect1">Synopsis</h4>

<blockquote><pre class="code">
Math.sqrt(<em>x</em>)</pre></blockquote>



<h4 class="refsect2">Arguments</h4>


<dl>
<dt><em>x</em></dt>
<dd><p>A non-negative integer.</p></dd>

</dl>




<h4 class="refsect2">Returns</h4>


<p>The square root of <em class="replaceable">x</em>, or
<tt class="literal">NaN</tt> if <em class="replaceable">x</em> is less than
0.</p>




<h4 class="refsect1">Description</h4>


<p>The <em class="filename">sqrt( )</em> method returns the positive root of
its operand (even though there may also be a mathematically valid
negative root). It is equivalent to:</p>


<blockquote><pre class="code">Math.pow(x, 0.5)</pre></blockquote>



<h4 class="refsect1">Example</h4>


<blockquote><pre class="code">Math.sqrt(4);    // Returns 2, although -2 is also a valid root
Math.sqrt(36);   // Returns 6, although -6 is also a valid root
Math.sqrt(-20);  // Returns NaN</pre></blockquote>



<h4 class="refsect1">See Also</h4>


<p><em class="filename">Math.pow( )</em>, <tt class="literal">Math.SQRT2</tt>,
<tt class="literal">Math.SQRT1_2</tt></p>


</div>

<a name="INDEX-2871" /><a name="INDEX-2872" /><a name="INDEX-2873" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b><i>

Math.SQRT1_2 Property</i></b></font></td><td align="right"><i>the reciprocal of the square root of 2, approximately 0.70711
</i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><table width="515" border="0" cellpadding="5"><tr><td align="left" /><td align="right" /></tr></table>
<h4 class="refsect1">Availability</h4>


<p>Flash 5; may be used when exporting Flash 4 movies</p>



<h4 class="refsect1">Synopsis</h4>

<blockquote><pre class="code">
Math.SQRT1_2</pre></blockquote>



<h4 class="refsect1">Description</h4>


<p>The <tt class="literal">SQRT1_2</tt> property is a constant approximating
the value <tt class="literal">1/Math.SQRT2</tt> (the reciprocal of the
square root of 2), equaling approximately 0.70711.</p>



<h4 class="refsect1">See Also</h4>


<p><tt class="literal">Math.SQRT2</tt></p>


</div>

<a name="INDEX-2874" /><a name="INDEX-2875" /><a name="INDEX-2876" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b><i>

Math.SQRT2 Property</i></b></font></td><td align="right"><i>the square root of 2, approximately 1.41421
</i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><table width="515" border="0" cellpadding="5"><tr><td align="left" /><td align="right" /></tr></table>
<h4 class="refsect1">Availability</h4>


<p>Flash 5; may be used when exporting Flash 4 movies</p>



<h4 class="refsect1">Synopsis</h4>

<blockquote><pre class="code">
Math.SQRT2</pre></blockquote>



<h4 class="refsect1">Description</h4>


<p>The <tt class="literal">SQRT2</tt> property is a constant approximating the
square root of 2, an irrational number, equaling approximately
1.41421.</p>



<h4 class="refsect1">See Also</h4>


<p><tt class="literal">Math.SQRT1_2</tt></p>


</div>

<a name="INDEX-2877" /><a name="INDEX-2878" /><a name="INDEX-2879" /><a name="INDEX-2880" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b><i>


Math.tan( ) Method</i></b></font></td><td align="right"><i>compute the tangent of an angle
</i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><table width="515" border="0" cellpadding="5"><tr><td align="left" /><td align="right" /></tr></table>
<h4 class="refsect1">Availability</h4>


<p>Flash 5; may be used when exporting Flash 4 movies</p>



<h4 class="refsect1">Synopsis</h4>

<blockquote><pre class="code">
Math.tan(<em>theta</em>)</pre></blockquote>



<h4 class="refsect2">Arguments</h4>


<dl>
<dt><em>theta</em></dt>
<dd><p>An angle, in radians (not degrees), in the range -<img align="absmiddle" src="figs/U03C0.gif" />/2 to <img align="absmiddle" src="figs/U03C0.gif" />/2.</p></dd>

</dl>




<h4 class="refsect2">Returns</h4>


<p>The tangent of <em class="replaceable">theta</em> (the result is in the
range -<tt class="literal">Infinity</tt> to <tt class="literal">Infinity</tt>).</p>




<h4 class="refsect1">Description</h4>


<p>The <em class="filename">tan( )</em> method returns the trigonometric
tangent of an angle. In a right triangle, the tangent of an angle is
the result of dividing the length of the side opposite the angle by
the length of the side adjacent to the angle. This is also the same
as the ratio <em class="emphasis">Math.sin(theta)/Math.cos(theta)</em>, so
as <em class="filename">cos(theta)</em> approaches zero,
<em class="filename">tan(theta)</em> approaches
<tt class="literal">Infinity</tt>. Therefore,
<em class="filename">tan(theta)</em> is not calculable for the values
-<img align="absmiddle" src="figs/U03C0.gif" />/2, <img align="absmiddle" src="figs/U03C0.gif" />/2, -3<img align="absmiddle" src="figs/U03C0.gif" />/2, 3<img align="absmiddle" src="figs/U03C0.gif" />/2, etc.</p>



<h4 class="refsect1">Example</h4>


<blockquote><pre class="code">trace (Math.tan(0));            // Displays: 0
trace (Math.tan(Math.PI/4));    // Displays: 1</pre></blockquote>



<h4 class="refsect1">See Also</h4>


<p><em class="filename">Math.atan( )</em>, <em class="filename">Math.cos( )</em>,
<em class="filename">Math.sin( )</em></p>


</div>

<a name="INDEX-2881" /><a name="INDEX-2882" /><a name="INDEX-2883" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b><i>

maxscroll Property</i></b></font></td><td align="right"><i>the last legal top line of a text field
</i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><table width="515" border="0" cellpadding="5"><tr><td align="left" /><td align="right" /></tr></table>
<h4 class="refsect1">Availability</h4>


<p>Flash 4 and later</p>



<h4 class="refsect1">Synopsis</h4>

<blockquote><pre class="code">
textField.maxscroll</pre></blockquote>



<h4 class="refsect2">Returns</h4>


<p>A positive integer representing the line number of the last legal top
line of a text field.</p>




<h4 class="refsect1">Description</h4>


<p>The <tt class="literal">maxscroll</tt> property tells us the largest
allowed <tt class="literal">scroll</tt> value for a text field. It
represents the number of the last line in a text field that may be
used as the top line in its viewable region.</p>


<p>The <tt class="literal">maxscroll</tt> property can be used with the
<tt class="literal">scroll</tt> property to manage a scrolling-text field.</p>



<h4 class="refsect1">See Also</h4>


<p><tt class="literal">scroll</tt>; <a href="ch18_04.htm">Section 18.4.2, "The maxscroll Property"</a> in
<a href="ch18_01.htm">Chapter 18, "On-Screen Text Fields"</a></p>


</div>

<a name="INDEX-2884" /><a name="INDEX-2885" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b><i>Mouse Object</i></b></font></td><td align="right"><i>hide or reveal the mouse pointer
</i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><table width="515" border="0" cellpadding="5"><tr><td align="left" /><td align="right" /></tr></table>
<h4 class="refsect1">Availability</h4>


<p>Flash 5</p>



<h4 class="refsect1">Synopsis</h4>

<blockquote><pre class="code">
Mouse.methodName</pre></blockquote>



<h4 class="refsect1">Methods</h4>


<dl>
<dt><em>hide<em class="filename">( )</em></em></dt>
<dd><p>Hides the mouse pointer.</p></dd>

</dl>


<dl>
<dt><em>show<em class="filename">( )</em></em></dt>
<dd><p>Enables the mouse pointer.</p></dd>

</dl>



<h4 class="refsect1">Description</h4>


<p>The <a name="INDEX-2885" /><em class="filename">Mouse</em> object has only two
methods and no properties. We use <em class="filename">Mouse.hide( )</em>
to conceal the system mouse pointer, usually in order to replace it
with a customized mouse pointer as shown later. It may also be
desirable to hide the mouse pointer in fullscreen,
keyboard-controlled movies or for touch-screen kiosks.</p>


<p>Note that the <em class="filename">Mouse</em> object does not tell us the
location of the mouse pointer. That information is stored in the
<tt class="literal">_xmouse</tt> and <tt class="literal">_ ymouse</tt> properties
of each movie clip object. Use <tt class="literal">_root._xmouse</tt> and
<tt class="literal">_root._ ymouse</tt> to determine the mouse
pointer's location on the main Stage.</p>



<h4 class="refsect1">See Also</h4>


<p><em class="replaceable">MovieClip</em><tt class="literal">._xmouse</tt>,
<em class="replaceable">MovieClip</em><tt class="literal">._ ymouse</tt></p>


</div>

<a name="INDEX-2886" /><a name="INDEX-2887" /><a name="INDEX-2888" /><a name="INDEX-2889" /><a name="INDEX-2890" /><a name="INDEX-2891" /><a name="INDEX-2892" /><a name="INDEX-2893" /><a name="INDEX-2894" /><a name="INDEX-2895" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b><i>


Mouse.hide( ) Method</i></b></font></td><td align="right"><i>make the mouse pointer disappear
</i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><table width="515" border="0" cellpadding="5"><tr><td align="left" /><td align="right" /></tr></table>
<h4 class="refsect1">Availability</h4>


<p>Flash 5</p>



<h4 class="refsect1">Synopsis</h4>

<blockquote><pre class="code">
Mouse.hide()</pre></blockquote>



<h4 class="refsect1">Description</h4>


<p>The <em class="filename">hide( )</em> method causes the normal mouse
pointer (usually an arrow) to disappear when the mouse is over any
part of the Player. The normal system pointer reappears when the
mouse passes outside the Flash Player's active stage area.</p>



<h4 class="refsect1">Usage</h4>


<p>Note that in Flash 5, even after <em class="filename">Mouse.hide( )</em>
has been invoked, the normal system text I-beam cursor will appear
when the mouse hovers over a text field.</p>



<h4 class="refsect1">Example</h4>


<p>The <em class="filename">hide( )</em> method is used to conceal the
default system mouse pointer, typically in order to replace it with a
custom pointer. In Flash, a custom pointer is nothing more than a
movie clip that follows the mouse. Using the
<em class="filename">mouseMove</em> event, we can cause a movie clip to
follow the mouse by updating the clip's <tt class="literal">_x</tt>
and <tt class="literal">_ y</tt> properties with each passing frame. The
following code demonstrates the technique:</p>


<blockquote><pre class="code">// Code on the clip that acts as the custom pointer
onClipEvent (load) {
  Mouse.hide( );
}

onClipEvent (mouseMove) {
  _x = _root._xmouse;
  _y = _root._ymouse;
  updateAfterEvent( );
}</pre></blockquote>


<p>It may also be desirable to hide the custom pointer when the mouse is
inactive, say, because the pointer has left the Flash Player's
active stage area, in which case the system pointer appears and there
are two pointers on screen. The following code shows how to adapt the
previous code to hide the cursor after 5 seconds of inactivity:</p>


<blockquote><pre class="code">onClipEvent (load) {
  Mouse.hide( );
}

onClipEvent (enterFrame) {
  if (getTimer( ) - lastMove &gt; 5000) {
    _visible = false;
  } else {
    _visible = true;
  }
}

onClipEvent (mouseMove) {
  _x = _root._xmouse;
  _y = _root._ymouse;
  lastMove = getTimer( );
  updateAfterEvent( );
}</pre></blockquote>


<p>To change a custom pointer to a custom "hand" icon when
the mouse hovers over a button, use the button's
<em class="filename">rollOver</em> event to set the custom pointer clip to
a frame containing the custom hand, and use the
<em class="filename">rollOut</em> event to set the custom pointer back to
the default, as follows:</p>


<blockquote><pre class="code">on (rollOver) {
  _root.customPointer.gotoAndStop("hand");
}

on (rollOut) {
  _root.customPointer.gotoAndStop("default");
}</pre></blockquote>


<p>In all cases, remember to place the custom pointer on the top layer
of your movie so it appears above all other content. Alternatively,
use <em class="filename">duplicateMovieClip( )</em> or
<em class="filename">attachMovie( )</em> to dynamically generate the
custom pointer clip and assign it a very high depth.</p>



<h4 class="refsect1">See Also</h4>


<p><a name="INDEX-2891" />
<a name="INDEX-2892" />
<a name="INDEX-2893" />
<a name="INDEX-2894" /><em class="filename">Mouse.show( ),
</em><a name="INDEX-2895" /><em class="replaceable">MovieClip</em><tt class="literal">._xmouse</tt>,
<em class="replaceable">MovieClip</em><tt class="literal">._ymouse</tt></p>


</div>

<a name="INDEX-2896" /><a name="INDEX-2897" /><a name="INDEX-2898" /><a name="INDEX-2899" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b><i>


Mouse.show( ) Method</i></b></font></td><td align="right"><i>make the mouse pointer appear
</i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><table width="515" border="0" cellpadding="5"><tr><td align="left" /><td align="right" /></tr></table>
<h4 class="refsect1">Availability</h4>


<p>Flash 5</p>



<h4 class="refsect1">Synopsis</h4>

<blockquote><pre class="code">
Mouse.show()</pre></blockquote>



<h4 class="refsect1">Description</h4>


<p>The <em class="filename">show( )</em> method causes the default system
mouse pointer to reappear after <em class="filename">Mouse.hide( )</em>
has been invoked. It can be used to provide a normal pointer at
necessary times in a movie, such as when the user is expected to fill
in a form. This is one way to handle the unfortunate appearance of
the text I-beam when the system pointer is hidden.</p>



<h4 class="refsect1">See Also</h4>


<p><em class="filename">Mouse.hide( )</em></p>


</div>

<a name="INDEX-2900" /><a name="INDEX-2901" /><a name="INDEX-2902" /><a name="INDEX-2903" /><a name="INDEX-2904" /><a name="INDEX-2905" /><a name="INDEX-2906" /><a name="INDEX-2907" /><a name="INDEX-2908" /><a name="INDEX-2909" /><a name="INDEX-2910" /><a name="INDEX-2911" /><a name="INDEX-2912" /><a name="INDEX-2913" /><a name="INDEX-2914" /><a name="INDEX-2915" /><a name="INDEX-2916" /><a name="INDEX-2917" /><a name="INDEX-2918" /><a name="INDEX-2919" /><a name="INDEX-2920" /><a name="INDEX-2921" /><a name="INDEX-2922" /><a name="INDEX-2923" /><a name="INDEX-2924" /><a name="INDEX-2925" /><a name="INDEX-2926" /><a name="INDEX-2927" /><a name="INDEX-2928" /><a name="INDEX-2929" /><a name="INDEX-2930" /><a name="INDEX-2931" /><a name="INDEX-2932" /><a name="INDEX-2933" /><a name="INDEX-2934" /><a name="INDEX-2935" /><a name="INDEX-2936" /><a name="INDEX-2937" /><a name="INDEX-2938" /><a name="INDEX-2939" /><a name="INDEX-2940" /><a name="INDEX-2941" /><a name="INDEX-2942" /><a name="INDEX-2943" /><a name="INDEX-2944" /><a name="INDEX-2945" /><a name="INDEX-2946" /><a name="INDEX-2947" /><a name="INDEX-2948" /><a name="INDEX-2949" /><a name="INDEX-2950" /><a name="INDEX-2951" /><a name="INDEX-2952" /><a name="INDEX-2953" /><a name="INDEX-2954" /><a name="INDEX-2955" /><a name="INDEX-2956" /><a name="INDEX-2957" /><a name="INDEX-2958" /><a name="INDEX-2959" /><a name="INDEX-2960" /><a name="INDEX-2961" /><a name="INDEX-2962" /><a name="INDEX-2963" /><a name="INDEX-2964" /><a name="INDEX-2965" /><a name="INDEX-2966" /><a name="INDEX-2967" /><a name="INDEX-2968" /><a name="INDEX-2969" /><a name="INDEX-2970" /><a name="INDEX-2971" /><a name="INDEX-2972" /><a name="INDEX-2973" /><a name="INDEX-2974" /><a name="INDEX-2975" /><a name="INDEX-2976" /><a name="INDEX-2977" /><a name="INDEX-2978" /><a name="INDEX-2979" /><a name="INDEX-2980" /><a name="INDEX-2981" /><a name="INDEX-2982" /><a name="INDEX-2983" /><a name="INDEX-2984" /><a name="INDEX-2985" /><a name="INDEX-2986" /><a name="INDEX-2987" /><a name="INDEX-2988" /><a name="INDEX-2989" /><a name="INDEX-2990" /><a name="INDEX-2991" /><a name="INDEX-2992" /><a name="INDEX-2993" /><a name="INDEX-2994" /><a name="INDEX-2995" /><a name="INDEX-2996" /><a name="INDEX-2997" /><a name="INDEX-2998" /><a name="INDEX-2999" /><a name="INDEX-3000" /><a name="INDEX-3001" /><a name="INDEX-3002" /><a name="INDEX-3003" /><a name="INDEX-3004" /><a name="INDEX-3005" /><a name="INDEX-3006" /><a name="INDEX-3007" /><a name="INDEX-3008" /><a name="INDEX-3009" /><a name="INDEX-3010" /><a name="INDEX-3011" /><a name="INDEX-3012" /><a name="INDEX-3013" /><a name="INDEX-3014" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b><i>MovieClip "Class"</i></b></font></td><td align="right"><i>class-like datatype for main movies and movie clips
</i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><table width="515" border="0" cellpadding="5"><tr><td align="left" /><td align="right" /></tr></table>
<h4 class="refsect1">Availability</h4>


<p>Flash 3 and later</p>



<h4 class="refsect1">Constructor</h4>


<p>None. Movie clip symbols are created manually in the Flash authoring
tool. Movie clip instances can be created with <em class="filename">attachMovie(
)</em> and <em class="filename">duplicateMovieClip()</em>.</p>


<h4 class="refsect1">Properties</h4>


<p><a name="INDEX-2901" />
<a name="INDEX-2902" />Movie clip properties provide
descriptions of, and control over, various physical features of movie
clips and main movies. Properties are accessed using the dot
operator, as with any object. See <a href="ch13_01.htm">Section 13.1, "The "Objectness" of Movie Clips"</a>
in <a href="ch13_01.htm">Chapter 13, "Movie Clips"</a>, for details on using movie clip
properties.</p>


<p>Two property-related issues to note:</p>


<ul><li><p>Changing a physical property of a <em class="filename">MovieClip</em>
object places that clip under programmatic control, breaking the
internal timeline's hold on it. This halts any tween currently
in progress.</p></li></ul>
<ul><li><p>Some <a name="INDEX-2903" /><em class="filename">MovieClip</em>
properties appear to be floating-point numbers but are mapped to
other formats internally. The <tt class="literal">_alpha</tt> property, for
example, is mapped to an integer between 0
and 255 internally. This results in a loss of precision between
setting and retrieving values of certain properties. We may, for
example, set a property value to 90 and then immediately retrieve the
value back as 89.84375. If minor variations in property values make a
difference to a script, we must manually round those values using
<em class="filename">Math.round( )</em>, <em class="filename">Math.floor(
)</em>, or <em class="filename">Math.ceil( )</em> after retrieval,
or we must store the original value in a variable separate from the
property.</p></li></ul>
<p><a href="ch20_05.htm">Table 20-9</a> lists the movie clip properties. Note
that all built-in movie clip properties begin with an
<a name="INDEX-2904" />underscore. This make them easy to
distinguish from custom properties that you can add to your movie
clip and which by convention should not begin with an underscore. In
the <em class="emphasis">Access</em> column of <a href="ch20_05.htm">Table 20-9</a>, <a name="INDEX-2905" />
<a name="INDEX-2906" /><em class="emphasis">R/W</em> indicates
that a property's value may be both retrieved and set (i.e.,
read/write), and <em class="emphasis">RO</em> indicates that it can be
retrieved but not set<em class="emphasis"> </em>(i.e., read-only). Some
read-only properties can sometimes be set indirectly through the
authoring tool or via some related function (e.g.,
<em class="filename">gotoAndStop( )</em> sets the
<tt class="literal">_currentframe</tt> property), but only read/write
properties can be set directly via ActionScript. The
<em class="emphasis">Type</em> column describes the datatype of each
property's value. The <em class="emphasis">Property Description</em>
column gives a quick summary of the property's purpose, but the
full descriptions that follow later provide important details. With
the exception of the <tt class="literal">_name</tt> and
<tt class="literal">_parent</tt> properties, the properties in <a href="ch20_05.htm">Table 20-9</a> apply to both movie clip instances and the
main movie (i.e., <tt class="literal">_root</tt>). However, a
property's value may differ markedly depending on whether it is
checked from a movie clip instance or the main movie and may also
differ depending on where the clip is attached. For example, a movie
clip's <tt class="literal">_x</tt> property differs depending on
whether it is attached to the main timeline or as a child of a parent
clip. Furthermore, all properties of the current timeline may be
accessed without an explicit reference to it, as in
<tt class="literal">_alpha</tt> versus <tt class="literal">myClip._alpha</tt>.</p>


<a name="ch20-33662" /><h4 class="objtitle">Table 20-9. Movie Clip Property Summary </h4><table border="1">





<tr>
<th>
<p>Property Name</p></th>
<th>
<p>Access</p></th>
<th>
<p>Type</p></th>
<th>
<p>Property Description</p></th>
</tr>




<tr>
<td>
<p><a name="INDEX-2907" />
<a name="INDEX-2908" /><tt class="literal">_alpha</tt></p></td>
<td>
<p>R/W</p></td>
<td>
<p>number</p></td>
<td>
<p>Opacity percentage: 0 is transparent; 100 is opaque</p></td>
</tr>

<tr>
<td>
<p><a name="INDEX-2909" /> <a name="INDEX-2910" /><tt class="literal">_currentframe</tt></p></td>
<td>
<p>RO</p></td>
<td>
<p>number</p></td>
<td>
<p>Frame number at which playhead resides</p></td>
</tr>

<tr>
<td>
<p><a name="INDEX-2911" /> <a name="INDEX-2912" /><tt class="literal">_droptarget</tt></p></td>
<td>
<p>RO</p></td>
<td>
<p>string</p></td>
<td>
<p>Target path of the clip over which a dragged clip hovers or has been
dropped, in slash notation</p></td>
</tr>

<tr>
<td>
<p><a name="INDEX-2913" /> <a name="INDEX-2914" /><tt class="literal">_framesloaded</tt></p></td>
<td>
<p>RO</p></td>
<td>
<p>number</p></td>
<td>
<p>Number of frames that have been downloaded</p></td>
</tr>

<tr>
<td>
<p><a name="INDEX-2915" />
<a name="INDEX-2916" />
<a name="INDEX-2917" /><tt class="literal">_height</tt></p></td>
<td>
<p>R/W</p></td>
<td>
<p>number</p></td>
<td>
<p>Height, in pixels, of the current contents</p></td>
</tr>

<tr>
<td>
<p><a name="INDEX-2918" />
<a name="INDEX-2919" /><tt class="literal">_name</tt>*</p></td>
<td>
<p>R/W</p></td>
<td>
<p>string</p></td>
<td>
<p>Identifier of an instance as a string (not a reference)</p></td>
</tr>

<tr>
<td>
<p><a name="INDEX-2920" />
<a name="INDEX-2921" /><tt class="literal">_ parent</tt>*</p></td>
<td>
<p>RO</p></td>
<td>
<p>MovieClip reference</p></td>
<td>
<p>A reference to the instance or movie that contains the current
instance</p></td>
</tr>

<tr>
<td>
<p><a name="INDEX-2922" /> <a name="INDEX-2923" /><tt class="literal">_rotation</tt></p></td>
<td>
<p>R/W</p></td>
<td>
<p>number</p></td>
<td>
<p>Degrees of rotation</p></td>
</tr>

<tr>
<td>
<p><a name="INDEX-2924" />
<a name="INDEX-2925" /><tt class="literal">_target</tt></p></td>
<td>
<p>RO</p></td>
<td>
<p>string</p></td>
<td>
<p>Target path in absolute terms, in slash notation</p></td>
</tr>

<tr>
<td>
<p><a name="INDEX-2926" /> <a name="INDEX-2927" /><tt class="literal">_totalframes</tt></p></td>
<td>
<p>RO</p></td>
<td>
<p>number</p></td>
<td>
<p>Number of frames in the timeline</p></td>
</tr>

<tr>
<td>
<p><a name="INDEX-2928" />
<a name="INDEX-2929" /><tt class="literal">_url</tt></p></td>
<td>
<p>RO</p></td>
<td>
<p>string</p></td>
<td>
<p>Disk or network location of the source <em class="filename">.swf</em> file</p></td>
</tr>

<tr>
<td>
<p><a name="INDEX-2930" />
<a name="INDEX-2931" /><tt class="literal">_visible</tt></p></td>
<td>
<p>R/W</p></td>
<td>
<p>boolean</p></td>
<td>
<p>Visibility: <tt class="literal">true</tt> if shown;
<tt class="literal">false</tt> if hidden</p></td>
</tr>

<tr>
<td>
<p><a name="INDEX-2932" />
<a name="INDEX-2933" />
<a name="INDEX-2934" /><tt class="literal">_width</tt></p></td>
<td>
<p>R/W</p></td>
<td>
<p>number</p></td>
<td>
<p>Width, in pixels, of the current contents</p></td>
</tr>

<tr>
<td>
<p><a name="INDEX-2935" />
<a name="INDEX-2936" /><tt class="literal">_x</tt></p></td>
<td>
<p>R/W</p></td>
<td>
<p>number</p></td>
<td>
<p>Horizontal position, in pixels</p></td>
</tr>

<tr>
<td>
<p><a name="INDEX-2937" />
<a name="INDEX-2938" /><tt class="literal">_xmouse</tt></p></td>
<td>
<p>RO</p></td>
<td>
<p>number</p></td>
<td>
<p>Horizontal location of mouse pointer, in pixels</p></td>
</tr>

<tr>
<td>
<p><a name="INDEX-2939" />
<a name="INDEX-2940" /><tt class="literal">_xscale</tt></p></td>
<td>
<p>R/W</p></td>
<td>
<p>number</p></td>
<td>
<p>Horizontal scaling percentage</p></td>
</tr>

<tr>
<td>
<p><a name="INDEX-2941" />
<a name="INDEX-2942" /><tt class="literal">_y</tt></p></td>
<td>
<p>R/W</p></td>
<td>
<p>number</p></td>
<td>
<p>Vertical position, in pixels</p></td>
</tr>

<tr>
<td>
<p><a name="INDEX-2943" />
<a name="INDEX-2944" /><tt class="literal">_ ymouse</tt></p></td>
<td>
<p>RO</p></td>
<td>
<p>number</p></td>
<td>
<p>Vertical location of mouse pointer, in pixels</p></td>
</tr>

<tr>
<td>
<p><a name="INDEX-2945" />
<a name="INDEX-2946" /><tt class="literal">_ yscale</tt></p></td>
<td>
<p>R/W</p></td>
<td>
<p>number</p></td>
<td>
<p>Vertical scaling percentage</p></td>
</tr>


</table>


<p>*Applies to movie clip instances; does not apply to the main timeline.</p>



<h4 class="refsect1">Methods</h4>


<p><a name="INDEX-2947" />
<a name="INDEX-2948" />Movie clip methods may be invoked on any
movie clip instance and, in most cases, on any main movie timeline.
Many of the movie clip methods provide the same functionality as
analogous global functions but simply use the convenient
<em class="replaceable">MovieClip.method( )</em> dot syntax format.
Those that do not correspond to a global function may be applied to
the current clip without an explicit reference to it, as in
<tt class="literal">attachMovie( )</tt> versus <tt class="literal">myClip.attachMovie(
)</tt>. <a href="ch20_05.htm">Table 20-10</a> lists the movie clip
methods.</p>


<a name="ch20-15307" /><h4 class="objtitle">Table 20-10. Movie Clip Method Summary </h4><table border="1">



<tr>
<th>
<p>Method Name</p></th>
<th>
<p>Method Description</p></th>
</tr>




<tr>
<td>
<p><a name="INDEX-2949" />
<a name="INDEX-2950" /><em class="filename">attachMovie( )</em></p></td>
<td>
<p>Creates a new instance based on an exported symbol from the current
document's Library. Places the new instance in the host clip or
the movie's programmatically generated clip stack.</p></td>
</tr>

<tr>
<td>
<p><a name="INDEX-2951" />
<a name="INDEX-2952" /><em class="filename">duplicateMovieClip(
)</em>*</p></td>
<td>
<p>Creates a copy of the current instance and places the copy in the
appropriate programmatically generated clip stack (see <a href="ch13_04.htm">Section 13.4.2.2, "How clips generated via duplicateMovieClip( ) are added to the stack"</a> in <a href="ch13_01.htm">Chapter 13, "Movie Clips"</a>.)</p></td>
</tr>

<tr>
<td>
<p><a name="INDEX-2953" />
<a name="INDEX-2954" /><em class="filename">getBounds( )</em></p></td>
<td>
<p>Returns an object whose properties give the coordinates of the
bounding box that defines the visual region occupied by the clip.</p></td>
</tr>

<tr>
<td>
<p><a name="INDEX-2955" />
<a name="INDEX-2956" /><em class="filename">getBytesLoaded( )</em></p></td>
<td>
<p>Returns the number of downloaded bytes of an instance or a movie. Not
applicable for use with internal clips.</p></td>
</tr>

<tr>
<td>
<p><a name="INDEX-2957" />
<a name="INDEX-2958" /><em class="filename">getBytesTotal( )</em></p></td>
<td>
<p>Returns the physical byte size of an instance or a main movie.</p></td>
</tr>

<tr>
<td>
<p><a name="INDEX-2959" />
<a name="INDEX-2960" /><em class="filename">getURL( )</em></p></td>
<td>
<p>Loads an external document (usually a web page) into the browser.</p></td>
</tr>

<tr>
<td>
<p><a name="INDEX-2961" />
<a name="INDEX-2962" /><em class="filename">globalToLocal( )</em></p></td>
<td>
<p>Converts the properties of a <em class="filename">coordinates</em> object
from Stage coordinates to instance coordinates. Has no effect when
invoked on a main movie object (such as <tt class="literal">_root</tt>),
because the original and target coordinate spaces are identical.</p></td>
</tr>

<tr>
<td>
<p><a name="INDEX-2963" />
<a name="INDEX-2964" /><em class="filename">gotoAndPlay( )</em></p></td>
<td>
<p>Moves the playhead of an instance or movie to a specific frame, and
then plays the instance or movie.</p></td>
</tr>

<tr>
<td>
<p><a name="INDEX-2965" />
<a name="INDEX-2966" /><em class="filename">gotoAndStop( )</em></p></td>
<td>
<p>Moves the playhead of an instance or movie to a specific frame and
then stops the playhead.</p></td>
</tr>

<tr>
<td>
<p><a name="INDEX-2967" />
<a name="INDEX-2968" /><em class="filename">hitTest( )</em></p></td>
<td>
<p>Returns a Boolean indicating whether or not a clip intersects with a
given point or another clip.</p></td>
</tr>

<tr>
<td>
<p><a name="INDEX-2969" />
<a name="INDEX-2970" /><em class="filename">loadMovie( )</em></p></td>
<td>
<p>Brings an external <em class="filename">.swf</em> file into the Player.</p></td>
</tr>

<tr>
<td>
<p><a name="INDEX-2971" />
<a name="INDEX-2972" /><em class="filename">loadVariables( )</em></p></td>
<td>
<p>Retrieves external data composed of variable names and values and
converts that data into equivalent ActionScript variables.</p></td>
</tr>

<tr>
<td>
<p><a name="INDEX-2973" />
<a name="INDEX-2974" /><em class="filename">localToGlobal( )</em></p></td>
<td>
<p>Converts the properties of a <em class="filename">coordinates</em> object
from an instance's coordinates to main movie coordinates.</p></td>
</tr>

<tr>
<td>
<p><a name="INDEX-2975" />
<a name="INDEX-2976" /><em class="filename">nextFrame( )</em></p></td>
<td>
<p>Moves the playhead of instance or movie ahead one frame and stops it
there.</p></td>
</tr>

<tr>
<td>
<p><a name="INDEX-2977" />
<a name="INDEX-2978" /><em class="filename">play( )</em></p></td>
<td>
<p>Starts the playhead of instance or movie in motion (i.e., plays the
clip).</p></td>
</tr>

<tr>
<td>
<p><a name="INDEX-2979" />
<a name="INDEX-2980" /><em class="filename">prevFrame( )</em></p></td>
<td>
<p>Moves the playhead of instance or movie back one frame and stops it
there.</p></td>
</tr>

<tr>
<td>
<p><a name="INDEX-2981" />
<a name="INDEX-2982" /><em class="filename">removeMovieClip( )</em>*</p></td>
<td>
<p>Deletes a duplicated or attached instance.</p></td>
</tr>

<tr>
<td>
<p><a name="INDEX-2983" />
<a name="INDEX-2984" /><em class="filename">startDrag( )</em></p></td>
<td>
<p>Causes instance or movie to physically follow the mouse pointer.</p></td>
</tr>

<tr>
<td>
<p><a name="INDEX-2985" />
<a name="INDEX-2986" /><em class="filename">stop( )</em></p></td>
<td>
<p>Halts the playback of instance or movie.</p></td>
</tr>

<tr>
<td>
<p><a name="INDEX-2987" />
<a name="INDEX-2988" /><em class="filename">stopDrag( )</em></p></td>
<td>
<p>Ends any drag operation currently in progress.</p></td>
</tr>

<tr>
<td>
<p><a name="INDEX-2989" />
<a name="INDEX-2990" /><em class="filename">swapDepths( )</em>*</p></td>
<td>
<p>Alters the position of an instance in an instance stack.</p></td>
</tr>

<tr>
<td>
<p><a name="INDEX-2991" />
<a name="INDEX-2992" /><em class="filename">unloadMovie( )</em></p></td>
<td>
<p>Removes an instance or main movie from a document level or host clip.</p></td>
</tr>

<tr>
<td>
<p><a name="INDEX-2993" />
<a name="INDEX-2994" /><em class="filename">valueOf( )</em></p></td>
<td>
<p>Represents the path to the instance in absolute terms, using dot
notation.</p></td>
</tr>


</table>


<p>*Applies to movie clip instances; does not apply to the main timeline.</p>



<h4 class="refsect1">Events</h4>


<p><a name="INDEX-2995" />Movie clip
instances support <em class="emphasis">event
handlers,</em><a name="INDEX-2996" />
<a name="INDEX-2997" />
which respond automatically to a predefined set of events (e.g.,
mouse or keyboard interaction or movie playback). The supported movie
clip event handlers are listed in <a href="ch20_05.htm">Table 20-11</a>. See
<a href="ch10_01.htm">Chapter 10, "Events and Event Handlers"</a>, for details on each.</p>


<a name="ch20-70032" /><h4 class="objtitle">Table 20-11. Movie Clip Event Handler Summary </h4><table border="1">



<tr>
<th>
<p><a name="INDEX-2998" />
<a name="INDEX-2999" />Clip Event Handler</p></th>
<th>
<p>Clip Event Occurs When...</p></th>
</tr>




<tr>
<td>
<p><em class="filename">onClipEvent
(enterFrame)</em><a name="INDEX-3000" /></p></td>
<td>
<p>A frame passes in the Flash Player</p></td>
</tr>

<tr>
<td>
<p><a name="INDEX-3001" /><em class="filename">onClipEvent (load)</em></p></td>
<td>
<p>The clip first appears on the Stage</p></td>
</tr>

<tr>
<td>
<p><a name="INDEX-3002" /><em class="filename">onClipEvent (unload)</em></p></td>
<td>
<p>The clip is removed from the Stage</p></td>
</tr>

<tr>
<td>
<p><a name="INDEX-3003" /><em class="filename">onClipEvent (data)</em></p></td>
<td>
<p>The clip receives the end of a stream of loaded variables, or a
portion of a loaded movie</p></td>
</tr>

<tr>
<td>
<p><a name="INDEX-3004" /><em class="filename">onClipEvent (mouseDown)</em></p></td>
<td>
<p>Primary mouse button is depressed while the clip is on stage</p></td>
</tr>

<tr>
<td>
<p><a name="INDEX-3005" /><em class="filename">onClipEvent (mouseUp)</em></p></td>
<td>
<p>Primary mouse button is depressed and then released while the clip is
on stage</p></td>
</tr>

<tr>
<td>
<p><a name="INDEX-3006" /><em class="filename">onClipEvent (mouseMove)</em></p></td>
<td>
<p>Mouse pointer moves (even a teensy bit) while the clip is on stage</p></td>
</tr>

<tr>
<td>
<p><a name="INDEX-3007" /><em class="filename">onClipEvent (keyDown)</em></p></td>
<td>
<p>A key is pressed down while the clip is on stage</p></td>
</tr>

<tr>
<td>
<p><a name="INDEX-3008" /><em class="filename">onClipEvent (keyUp)</em></p></td>
<td>
<p>A depressed key is released while the clip is on stage</p></td>
</tr>


</table>



<h4 class="refsect1">Description</h4>


<p><em class="filename">MovieClip</em> is not actually a class in
ActionScript but rather a unique ActionScript datatype used to
represent information about, and allow control of, movies and movie
clips. For most purposes, we treat movie clips and movies as objects;
we may create and access movie clip properties, and we may create and
invoke movie clip methods.</p>


<p>Because <em class="filename">MovieClip</em> is not a true class, we do not
use a constructor to create new <em class="filename">MovieClip</em>
instances. Instead, we create movie clip symbols in the authoring
tool and place instances on the Stage manually. Some methods,
however, allow us to copy existing clips
(<em class="filename">duplicateMovieClip( )</em>), or add new clips to the
Stage programmatically (<em class="filename">attachMovie( )</em>).</p>


<p>Not all <em class="filename">MovieClip</em> objects are equal; some
<em class="filename">MovieClip</em> methods and properties apply only to
movie clip instances, not to main movies (a main movie is the
<tt class="literal">_root</tt> timeline of a <em class="filename">.swf</em>
document). In our consideration of the <em class="filename">MovieClip</em>
properties and methods, we'll note cases in which functionality
is limited to one type of <em class="filename">MovieClip</em> object. Note
that we use the word <em class="emphasis">MovieClip</em> to refer to the
"class" of the objects, and the word
<em class="emphasis">movieclip</em> (lowercase) to refer to the
ActionScript datatype; we use <em class="emphasis">movie clip</em>,
<em class="emphasis">clip</em>, or <em class="emphasis">instance</em> to refer
to a particular movie clip, and we use <em class="emphasis">movie</em> to
refer to the main movie of a <em class="filename">.swf</em> file. In the
synopsis for each detailed property and method entry, the
abbreviation <em class="replaceable">mc</em> stands in for the name of
a clip or main movie. For many properties and methods,
<em class="replaceable">mc</em> is optional -- if omitted, the
current timeline is used.</p>


<p>Throughout this <em class="filename">MovieClip</em> section, when talking
about <a name="INDEX-3009" />coordinates,
<a name="INDEX-3010" />we need to refer to the location of movie
clips. We measure the position of a clip in reference to one
representative point, its so-called <em class="emphasis">registration
point</em><a name="INDEX-3011" /> <a name="INDEX-3012" />, as marked by a crosshair in the
clip's Library symbol.</p>


<p>When a clip resides on the main Stage, we describe its location
relative to the top-left corner of the Stage, which corresponds to
the point (0,0). When a clip resides within another clip, we describe
its location relative to the registration point of the parent clip,
which again corresponds to the point (0,0). The point (0,0) in both
cases is the origin point (or simply <em class="emphasis">origin</em>) of
the coordinate space being used to plot the location of the clip.
We'll see how the <em class="filename">localToGlobal( )</em> and
<em class="filename">globalToLocal( )</em> methods can convert between
these two coordinate spaces.</p>




<a name="ch20-836-fm2xml" /><blockquote><h4>TIP</h4>
<p>Flash's coordinate system inverts the Y-axis of Cartesian
coordinates; that is, y values increase in a downward direction, not
upward. For example, a y-coordinate of 100 indicates a point 100
pixels <em class="emphasis">below</em> the X-axis.</p>

</blockquote>

<p>We'll often use the coordinate-related properties and methods
to move a clip, determine where a clip is, or determine whether it
intersects another object or point. The last technique is referred to
as <a name="INDEX-3013" /><em class="filename">collision
detection</em> because it is often used to determine whether to
change the direction in which a clip is animating, as if it bounced
off another object (see the <em class="filename">MovieClip.hitTest( )</em>
method).</p>


<p>Note that ActionScript doesn't have a native datatype to
represent a <em class="emphasis">point</em> (i.e., an x- and y-
coordinate). See <em class="filename">MovieClip.globalToLocal( )</em> for
an explanation of how to create a point object from a generic object.</p>



<h4 class="refsect1">See Also</h4>


<p>For a full consideration of the <em class="filename">MovieClip</em> class,
<a name="INDEX-3014" />see
<a href="ch13_01.htm">Chapter 13, "Movie Clips"</a></p>


</div>

<a name="INDEX-3015" /><a name="INDEX-3016" /><a name="INDEX-3017" /><a name="INDEX-3018" /><a name="INDEX-3019" /><a name="INDEX-3020" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b><i>




MovieClip._alpha Property</i></b></font></td><td align="right"><i>opacity of a clip or movie 
</i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><table width="515" border="0" cellpadding="5"><tr><td align="left" /><td align="right" /></tr></table>
<h4 class="refsect1">Availability</h4>


<p>Flash 4 and later</p>



<h4 class="refsect1">Synopsis</h4>

<blockquote><pre class="code">
<em>mc</em>._alpha</pre></blockquote>



<h4 class="refsect1">Access</h4>


<p>Read/write</p>



<h4 class="refsect1">Description</h4>


<p>The floating-point <tt class="literal">_alpha</tt> property specifies the
opacity (or conversely the transparency) of
<em class="replaceable">mc</em> as a percentage -- 0 is completely
transparent whereas 100 is completely opaque. Setting the
<tt class="literal">_alpha</tt> of <em class="replaceable">mc</em> affects
the visual transparency of all clips nested inside
<em class="replaceable">mc</em> but does not affect their
<tt class="literal">_alpha</tt> properties. That is, if we have a clip,
<tt class="literal">square</tt>, that contains another clip,
<tt class="literal">circle</tt>, and we set
<tt class="literal">square._alpha</tt> to 50, then
<tt class="literal">circle</tt> will be 50% transparent on-screen but will
have an <tt class="literal">_alpha</tt> of 100.</p>



<h4 class="refsect1">Usage</h4>


<p>Note that setting the <tt class="literal">_alpha</tt> of a movie clip
affects the <tt class="literal">aa</tt> property of the object returned by
<em class="filename">Color.getTransform( )</em>.</p>



<h4 class="refsect1">Example</h4>


<blockquote><pre class="code">ball._alpha = 60;   // Make ball partially transparent
ball._alpha = 0;    // Make ball invisible</pre></blockquote>


<p>The following clip event handler makes a clip more transparent as the
mouse moves down on the screen:</p>


<blockquote><pre class="code">onClipEvent(enterFrame) {
  _alpha = 100 - (_root._ymouse / 400) * 100;
}</pre></blockquote>



<h4 class="refsect1">See Also</h4>


<p>The<em class="filename"> Color </em>Class;
<em class="replaceable">MovieClip</em><tt class="literal">._visible</tt></p>


</div>

<a name="INDEX-3021" /><a name="INDEX-3022" /><a name="INDEX-3023" /><a name="INDEX-3024" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b><i>


MovieClip.attachMovie( ) Method</i></b></font></td><td align="right"><i>create a new movie clip instance from an exported Library symbol
</i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><table width="515" border="0" cellpadding="5"><tr><td align="left" /><td align="right" /></tr></table>
<h4 class="refsect1">Availability</h4>


<p>Flash 5</p>



<h4 class="refsect1">Synopsis</h4>

<blockquote><pre class="code">
<em>mc</em>.attachMovie(<em>symbolIdentifier, newName, depth</em>)</pre></blockquote>



<h4 class="refsect2">Arguments</h4>


<dl>
<dt><em>symbolIdentifier</em></dt>
<dd><p>A string specifying the linkage identifier of an exported movie clip
symbol, as set in the Library under Options <img align="absmiddle" src="figs/U2192.gif" /> Linkage.</p></dd>

</dl>


<dl>
<dt><em>newName</em></dt>
<dd><p>A string specifying the new instance name of the clip being created.
The name must adhere to the rules for creating an identifier outlined
under <a href="ch14_05.htm">Section 14.5, "Identifiers"</a> in <a href="ch14_01.htm">Chapter 14, "Lexical Structure"</a>.</p></dd>

</dl>


<dl>
<dt><em>depth</em></dt>
<dd><p>An integer specifying the level on which to place the new clip in the
programmatic clip stack above <em class="replaceable">mc</em>. A depth
of -1 is below 0, 1 is in front of 0, 2 is in front of 1, and so on.
See <a href="ch13_04.htm">Section 13.4.2.1, "How clips generated via attachMovie( ) are added to the stack"</a> in <a href="ch13_01.htm">Chapter 13, "Movie Clips"</a> for more details. Negative depths are
functional but not officially supported by ActionScript; to ensure
future compatibility, use depths of
0 or greater.</p></dd>

</dl>




<h4 class="refsect1">Description</h4>


<p>The <em class="filename">attachMovie( )</em> method creates a new instance
called <em class="replaceable">newName</em> based on the exported movie
clip symbol specified by <em class="replaceable">symbolIdentifier</em>.
If <em class="replaceable">mc</em> is the main movie, the new instance
is placed in the top-left corner of the Stage. If
<em class="replaceable">mc</em> is a movie clip instance, the new
instance is placed on <em class="replaceable">mc</em>'s
registration point. In either case, the new instance is placed above
<em class="replaceable">mc</em> in a stack of
programmatically-generated clips.</p>



<h4 class="refsect1">See Also</h4>


<p><em class="filename">duplicateMovieClip( )</em>,
<em class="filename">MovieClip.duplicateMovieClip( )</em>; <a href="ch13_03.htm">Section 13.3.2.3, "Creating instances with attachMovie( )"</a> and <a href="ch13_04.htm">Section 13.4.2.1, "How clips generated via attachMovie( ) are added to the stack"</a>
in <a href="ch13_01.htm">Chapter 13, "Movie Clips"</a></p>


</div>

<a name="INDEX-3025" /><a name="INDEX-3026" /><a name="INDEX-3027" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b><i>

MovieClip._currentframe Property</i></b></font></td><td align="right"><i>the frame number of the playhead of a clip or movie
</i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><table width="515" border="0" cellpadding="5"><tr><td align="left" /><td align="right" /></tr></table>
<h4 class="refsect1">Availability</h4>


<p>Flash 4 and later</p>



<h4 class="refsect1">Synopsis</h4>

<blockquote><pre class="code">
<em>mc</em>._currentframe</pre></blockquote>



<h4 class="refsect1">Access</h4>


<p>Read-only</p>



<h4 class="refsect1">Description</h4>


<p>The integer <tt class="literal">_currentframe</tt> property represents the
frame number at which the playhead of <em class="replaceable">mc</em>
currently resides. Note that the first frame is 1, not 0; therefore,
<tt class="literal">_currentframe </tt>ranges from 1 to
<em class="replaceable">mc</em><tt class="literal">._totalframes</tt>.</p>



<h4 class="refsect1">Example</h4>


<blockquote><pre class="code">// Send a playhead back two frames from its current location
gotoAndStop(_currentframe - 2);</pre></blockquote>



<h4 class="refsect1">See Also</h4>


<p><em class="filename">MovieClip.gotoAndPlay( )</em>,
<em class="filename">MovieClip.gotoAndStop( )</em></p>


</div>

<a name="INDEX-3028" /><a name="INDEX-3029" /><a name="INDEX-3030" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b><i>

MovieClip._droptarget Property</i></b></font></td><td align="right"><i>the path to the clip or movie on which a dragged clip was dropped
</i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><table width="515" border="0" cellpadding="5"><tr><td align="left" /><td align="right" /></tr></table>
<h4 class="refsect1">Availability</h4>


<p>Flash 4 and later</p>



<h4 class="refsect1">Synopsis</h4>

<blockquote><pre class="code">
<em>mc</em>._droptarget</pre></blockquote>



<h4 class="refsect1">Access</h4>


<p>Read-only</p>



<h4 class="refsect1">Description</h4>


<p>If <em class="replaceable">mc</em> is being dragged,
<tt class="literal">_droptarget</tt> stores a string indicating the path to
the clip over which <em class="replaceable">mc</em> hovers (if any). If
<em class="replaceable">mc</em> is not hovering over a clip,
<tt class="literal">_droptarget</tt> stores <tt class="literal">undefined</tt>.
If <em class="replaceable">mc</em> was previously dragged and then
dropped on a clip, <tt class="literal">_droptarget</tt> stores a string
indicating the path to the clip upon which
<em class="replaceable">mc</em> was dropped. The path is provided in
slash notation. A movie clip is considered to be "over"
another clip if the registration point of the dragged clip overlaps
any portion of the target clip.</p>



<h4 class="refsect1">Example</h4>


<p>The <tt class="literal">_droptarget</tt> property is convenient for
creating drag-and-drop interfaces. The following example demonstrates
how to create a simple shopping-basket interface using
<tt class="literal">_droptarget</tt> (when an <tt class="literal">item</tt> clip
is dropped onto the <tt class="literal">basket</tt> clip, the
<tt class="literal">item</tt> is allowed to stay in the
<tt class="literal">basket</tt>; otherwise, the <tt class="literal">item</tt> is
returned to its original location):</p>


<blockquote><pre class="code"><tt class="userinput"><b>
// CODE ON FRAME ONE OF item</b></tt>
var origX = _x;
var origY = _y;

function drag( ) {
  this.startDrag( );
}

function drop( ) {
  stopDrag( );
  if (_droptarget != "/basket") {
    _x = origX;
    _y = origY;
  }
}
<tt class="userinput"><b>
// CODE ON A BUTTON IN item</b></tt>
on (press) {
  drag( );
}

on (release) {
  drop( );
}</pre></blockquote>


<p>Note that <tt class="literal">_droptarget</tt> stores a string, not a clip
reference. To convert a <tt class="literal">_droptarget</tt> string to a
movie clip reference, use the technique shown in the example for
<em class="filename">eval( )</em>.</p>



<h4 class="refsect1">See Also</h4>


<p><em class="filename">MovieClip.startDrag( )</em>,
<em class="filename">MovieClip.stopDrag( )</em></p>


</div>

<a name="INDEX-3031" /><a name="INDEX-3032" /><a name="INDEX-3033" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b><i>

MovieClip.duplicateMovieClip( ) Method</i></b></font></td><td align="right"><i>create a copy of a movie clip
</i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><table width="515" border="0" cellpadding="5"><tr><td align="left" /><td align="right" /></tr></table>
<h4 class="refsect1">Availability</h4>


<p>Method form introduced in Flash 5 (global form introduced in Flash 4)</p>



<h4 class="refsect1">Synopsis</h4>

<blockquote><pre class="code">
<em>mc</em>.duplicateMovieClip(<em>newName, depth</em>)</pre></blockquote>



<h4 class="refsect2">Arguments</h4>


<dl>
<dt><em>newName</em></dt>
<dd><p>A string that will become the instance name of the duplicated clip.
The name must adhere to the rules for creating an identifier outlined
under <a href="ch14_05.htm">Section 14.5, "Identifiers"</a> in <a href="ch14_01.htm">Chapter 14, "Lexical Structure"</a>.</p></dd>

</dl>


<dl>
<dt><em>depth</em></dt>
<dd><p>An integer specifying the level on which to place the new clip in the
programmatically generated clip stack above <em class="replaceable">mc
</em>. A depth of -1 is below 0, 1 is in front of 0, 2 is in
front of 1, and so on. See <a href="ch13_04.htm">Section 13.4.2.2, "How clips generated via duplicateMovieClip( ) are added to the stack"</a> in
<a href="ch13_01.htm">Chapter 13, "Movie Clips"</a> for more details. Negative depths are
functional but not officially supported by ActionScript; to ensure
future compatibility, use depths of
0 or greater.</p></dd>

</dl>




<h4 class="refsect1">Description</h4>


<p>The <em class="filename">MovieClip.duplicateMovieClip( )</em> method is an
alternative to the global <em class="filename">duplicateMovieClip( )</em>
function. When invoked as a <em class="filename">MovieClip</em> method,
<em class="filename">duplicateMovieClip( )</em> takes no
<em class="replaceable">target</em> parameter -- it duplicates
<em class="replaceable">mc</em>. The method syntax is less prone to
user error than its global function counterpart.</p>


<p>For usage instructions, see the global <em class="filename">duplicateMovieClip(
)</em> function.</p>



<h4 class="refsect1">See Also</h4>


<p><em class="filename">MovieClip.attachMovie( )</em>,
<em class="filename">duplicateMovieClip( )</em></p>


</div>

<a name="INDEX-3034" /><a name="INDEX-3035" /><a name="INDEX-3036" /><a name="INDEX-3037" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b><i>
MovieClip._framesloaded Property</i></b></font></td><td align="right"><i>the number of frames of a clip or movie that have downloaded to the Player
</i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><table width="515" border="0" cellpadding="5"><tr><td align="left" /><td align="right" /></tr></table>
<h4 class="refsect1">Availability</h4>


<p>Flash 4 and later</p>



<h4 class="refsect1">Synopsis</h4>

<blockquote><pre class="code">
<em>mc</em>._framesloaded</pre></blockquote>



<h4 class="refsect1">Access</h4>


<p>Read-only</p>



<h4 class="refsect1">Description</h4>


<p>The integer <tt class="literal">_framesloaded</tt> property indicates how
many frames of <em class="replaceable">mc</em> have been loaded into
the Player (from
to <em class="replaceable">mc</em><tt class="literal">._totalframes</tt>). It
is normally used to create
<a name="INDEX-3036" />preloaders that pause playback
until a sufficient number of frames have downloaded. For a movie
clip, the <tt class="literal">_framesloaded</tt> property always equals
<tt class="literal">_totalframes</tt> (because clips are loaded in their
entirety before playing) <em class="emphasis">unless</em> the instance is
in the process of loading an external <em class="filename">.swf</em> file
due to a <em class="filename">loadMovie( )</em> invocation. The
<tt class="literal">_framesloaded</tt> property is, therefore, useful only
with main movies or external <em class="filename">.swf</em> files loading
into instances or levels.</p>


<p>Preloader code is traditionally placed directly on the main timeline
of the movie being preloaded. A simple approach is to loop between
frames 1 and 2 until the movie has loaded, at which point we go to
the movie's start frame. For example:</p>


<blockquote><pre class="code"><tt class="userinput"><b>
// CODE ON FRAME 1</b></tt>
if (_framesloaded &gt; 0 &amp;&amp; _framesloaded == _totalframes) {
  gotoAndPlay("beginMovie");
}
<tt class="userinput"><b>
// CODE ON FRAME 2</b></tt>
gotoAndPlay(1);</pre></blockquote>


<p>In Flash 5 and later, we may alternatively use the
<em class="filename">enterFrame</em><a name="INDEX-3037" /> movie clip event handler to build a
more portable preloader. In the movie we wish to preload, at the
frame where we want preloading to start, we invoke the
<em class="filename">stop( )</em> function. Then we place a movie clip
with the following code on that movie's timeline:</p>


<blockquote><pre class="code">onClipEvent (enterFrame) {
  loaded = _parent._framesloaded;
  if (loaded &gt; 0 &amp;&amp; loaded == _parent._totalframes &amp;&amp; loading != "done") {
    _parent.gotoAndPlay("beginMovie");
    loading = "done";
  }
}</pre></blockquote>


<p>In the preceding example, the clip tracks its parent's load
progress and starts its parent playing when loading is finished. By
using a movie clip as a preloader, we circumvent the need for a loop
on the preloading movie's timeline. A movie clip preloader
could even be turned into a Smart Clip, providing easier workflow for
less experienced developers.</p>


<p>Notice that in our preloader examples, we checked whether
<tt class="literal">_framesloaded</tt> <tt class="literal">&gt;</tt>
<tt class="literal">0</tt> in addition to whether
<tt class="literal">_framesloaded</tt> <tt class="literal">==</tt>
<tt class="literal">_totalframes</tt>. This is necessary because when a
movie is unloaded from a clip, that clip has a
<tt class="literal">_totalframes</tt> of 0. Hence, if
<tt class="literal">_framesloaded</tt> is
(as it might be on a very slow connection), the comparison
<tt class="literal">_framesloaded</tt> <tt class="literal">==</tt>
<tt class="literal">_totalframes</tt> can return <tt class="literal">true</tt>
even when no frames have yet loaded. Our check prevents the movie
from skipping ahead before the appropriate content has loaded. This
precaution is not necessary with main movie preloaders for
<em class="filename">.swf</em> files loaded onto levels, because their
<tt class="literal">_totalframes</tt> property is never zero.</p>



<h4 class="refsect1">Example</h4>


<p>Preloaders often include a horizontal loading bar and a text field
indicating the percentage of a movie that has downloaded. Loading
bars are implemented as clips sized with either the
<tt class="literal">_width</tt> property or the <tt class="literal">_xscale</tt>
property. However, note that a clip scales about its registration
point (proportionately on the right and left sides of the
clip's registration point). Therefore, to size a clip from one
side only, we must place all of the clip's content on one side
of the registration point in the clip's symbol. The following
example shows how to add a loading bar and a status text field to our
earlier clip handler code:</p>


<blockquote><pre class="code">// A Portable Preloader with a Status Bar
onClipEvent (enterFrame) {
  // Measure how many frames have loaded
  loaded = _parent._framesloaded;
  // If all the frames have finished loading...
  if (loaded &gt; 0 &amp;&amp; loaded == _parent._totalframes &amp;&amp; loading != "done") {
    // ...play the movie and make a note that we're done loading
    _parent.gotoAndPlay("beginMovie");
    loading = "done";
  }
  // Determine the percentage of bytes that have loaded
  percentDone = Math.floor((_parent.getBytesLoaded( ) 
                          / _parent.getBytesTotal( )) * 100);
  // Display the percentage of loaded bytes in the text field loadStatus
  loadStatus =  percentDone + "% complete";
  // Set the size of our loadBar clip
  loadBar._xscale = percentDone;
}</pre></blockquote>


<p>Use the Bandwidth Profiler in Test Movie mode to simulate movie
download for preloader testing.</p>



<h4 class="refsect1">See Also</h4>


<p><em class="filename">MovieClip.getBytesLoaded( )</em>,
<em class="replaceable">MovieClip</em><tt class="literal">._totalframes</tt>;
<a href="ch10_10.htm">Section 10.10.4, "data"</a> in <a href="ch10_01.htm">Chapter 10, "Events and Event Handlers"</a>,
and <a href="ch19_01.htm">Section 19.1.4, "The Bandwidth Profiler"</a> in <a href="ch19_01.htm">Chapter 19, "Debugging"</a></p>


</div>

<a name="INDEX-3038" /><a name="INDEX-3039" /><a name="INDEX-3040" /><a name="INDEX-3041" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b><i>


MovieClip.getBounds( ) Method</i></b></font></td><td align="right"><i>determine the bounding box of a clip or movie
</i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><table width="515" border="0" cellpadding="5"><tr><td align="left" /><td align="right" /></tr></table>
<h4 class="refsect1">Availability</h4>


<p>Flash 5</p>



<h4 class="refsect1">Synopsis</h4>

<blockquote><pre class="code">
<em>mc</em>.getBounds(<em>targetCoordinateSpace</em>)</pre></blockquote>



<h4 class="refsect2">Arguments</h4>


<dl>
<dt><em>targetCoordinateSpace</em></dt>
<dd><p>A string indicating the path to the movie or clip in which space
<em class="replaceable">mc </em>'s dimensions are measured.
Because a movie clip reference is converted to a path when used in a
string context, <em class="replaceable">targetCoordinateSpace</em> may
also be a movie clip object reference, as in
<tt class="literal">mc.getBounds(_root)</tt> versus
<tt class="literal">mc.getBounds("_root")</tt>. Defaults to
<em class="replaceable">mc</em> if not specified.</p></dd>

</dl>




<h4 class="refsect2">Returns</h4>


<p>An object whose properties -- <tt class="literal">xMin</tt>,
<tt class="literal">xMax</tt>, <tt class="literal">yMin</tt>,
<tt class="literal">yMax</tt> -- describe the bounding box of the space
occupied by <em class="replaceable">mc</em>. These four properties of
the object respectfully specify the leftmost, rightmost, topmost, and
bottommost pixel coordinates of <em class="replaceable">mc</em>.</p>




<h4 class="refsect1">Description</h4>


<p>The <em class="filename">getBounds( )</em> method returns an anonymous
object with properties that define the rectangular area occupied by
<em class="replaceable">mc</em> (i.e., <em class="replaceable">mc </em>
's<em class="emphasis"> bounding box</em>). To retrieve the values
stored in the returned object, we must access that object's
properties as shown in the next example.</p>


<p>The dimensions of the bounding box of a clip may be measured relative
to any other clip or movie. Using the
<em class="replaceable">targetCoordinateSpace</em> argument, we may
pose the question, "If <em class="replaceable">mc</em> resided on
<em class="replaceable">targetCoordinateSpace</em>'s canvas, what
area would it occupy?" The answer will be different depending
on whether <em class="replaceable">targetCoordinateSpace</em> is a main
movie or a clip instance; the origin point of the main movie's
coordinate space is the top-left corner of the Stage, but the origin
point of an instance's coordinate space is its registration
point as marked in the clip's Library symbol (shown as a
crosshair).</p>


<p>The <em class="filename">getBounds( )</em> method can be used to perform
basic collision detection between a movie or clip and some other
point (though <em class="filename">MovieClip.hitTest( )</em> serves this
purpose better). It might also be used to identify a rectangular
region in which to place a clip added to a movie with
<em class="filename">MovieClip.attachMovie( )</em>.</p>



<h4 class="refsect1">Example</h4>


<blockquote><pre class="code">var clipBounds = this.getBounds( );
var leftX   = clipBounds.xMin;
var rightX  = clipBounds.xMax;
var topY    = clipBounds.yMin;
var bottomY = clipBounds.yMax;</pre></blockquote>



<h4 class="refsect1">See Also</h4>


<p><em class="filename">MovieClip.hitTest( )</em></p>


</div>

<a name="INDEX-3042" /><a name="INDEX-3043" /><a name="INDEX-3044" /><a name="INDEX-3045" /><a name="INDEX-3046" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b><i>


MovieClip.getBytesLoaded( ) Method</i></b></font></td><td align="right"><i>check the number of bytes that have downloaded to the Player
</i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><table width="515" border="0" cellpadding="5"><tr><td align="left" /><td align="right" /></tr></table>
<h4 class="refsect1">Availability</h4>


<p>Flash 5</p>



<h4 class="refsect1">Synopsis</h4>

<blockquote><pre class="code">
<em>mc</em>.getBytesLoaded()</pre></blockquote>



<h4 class="refsect2">Returns</h4>


<p>An integer representing the number of bytes of
<em class="replaceable">mc</em> that have finished downloading to the
Player. (Divide by 1024 to convert to kilobytes.)</p>




<h4 class="refsect1">Description</h4>


<p>The<em class="filename"> getBytesLoaded( )</em> method tells us the number
of bytes of a movie that have downloaded into the Flash Player.
However, <em class="filename">getBytesLoaded( )</em> measures bytes in
whole-frame chunks only. So if a movie's first frame is 200
bytes in size and its second frame is 3000 bytes in size,
<em class="filename">getBytesLoaded( )</em> will return 200 and 3200 but
never any increment in between. Until <em class="emphasis">all</em> of a
given frame has downloaded, the return value of
<em class="filename">getBytesLoaded( )</em> does not change. The
<em class="filename">getBytesLoaded( )</em> method may, therefore, be
thought of as a "bytes version" of the
<tt class="literal">_framesloaded</tt> property.</p>


<p>Note that internal movie clips are always entirely loaded before they
are displayed, so the return value of <em class="filename">getBytesLoaded(
)</em> on an internal movie clip will always be the same as
<em class="filename">getBytesTotal( )</em> (unless the movie clip is
currently loading an external <em class="filename">.swf</em> file in
response to <em class="filename">loadMovie( )</em>). Therefore,
<em class="filename">getBytesLoaded( )</em> is effective only when used
with a main movie or an external <em class="filename">.swf</em> file being
loaded into an instance or level.</p>


<p>Like <tt class="literal">_framesloaded</tt> , <em class="filename">getBytesLoaded(
)</em> is normally used to build preloaders. It can be used in
concert with <em class="filename">getBytesTotal( )</em> to create a more
accurate progress bar than is possible with
<tt class="literal">_framesloaded</tt> and <tt class="literal">_totalframes</tt>
(because the byte size of each frame may not be equal -- a movie
with 10 frames is not 30% loaded when three frames are loaded if the
frames differ widely in size).</p>



<h4 class="refsect1">Example</h4>


<blockquote><pre class="code"><tt class="userinput"><b>// CODE ON FRAME 1</b></tt>
if (_framesloaded &gt; 0 &amp;&amp; _framesloaded == _totalframes) {
  gotoAndPlay("beginMovie");
} else {
  // Show the load progress in text fields. Divide by 1024 to convert to KB.
  loadProgressOutput = this.getBytesLoaded( )/1024;
  loadTotalOutput = this.getBytesTotal( )/1024;
}

<tt class="userinput"><b>// CODE ON FRAME 2</b></tt>
gotoAndPlay(1);</pre></blockquote>



<h4 class="refsect1">See Also</h4>


<p><em class="replaceable">MovieClip</em><tt class="literal">._framesloaded</tt>,
<em class="filename">MovieClip.getBytesTotal( )</em></p>


</div>

<a name="INDEX-3047" /><a name="INDEX-3048" /><a name="INDEX-3049" /><a name="INDEX-3050" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b><i>

MovieClip.getBytesTotal( ) Method</i></b></font></td><td align="right"><i>check the size of a clip or movie, in bytes
</i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><table width="515" border="0" cellpadding="5"><tr><td align="left" /><td align="right" /></tr></table>
<h4 class="refsect1">Availability</h4>


<p>Flash 5</p>



<h4 class="refsect1">Synopsis</h4>

<blockquote><pre class="code">
<em>mc</em>.getBytesTotal()</pre></blockquote>



<h4 class="refsect2">Returns</h4>


<p>An integer representing the size of <em class="replaceable">mc</em>, in
bytes. Divide by 1024 to convert to kilobytes.</p>




<h4 class="refsect1">Description</h4>


<p>The <em class="filename">getBytesTotal( )</em> method tells us the size,
in bytes, of a clip instance or the main movie. When invoked on the
main movie, <em class="filename">getBytesTotal( )</em> reports the size of
the entire <em class="filename">.swf</em>. It is normally used in concert
with <em class="filename">getBytesLoaded( )</em> to produce preloaders for
main movies and <em class="filename">.swf</em> files loaded into instances
or levels.</p>



<h4 class="refsect1">See Also</h4>


<p><em class="filename">MovieClip.getBytesLoaded( )</em>,
<em class="replaceable">MovieClip</em><tt class="literal">._totalframes</tt></p>


</div>

<a name="INDEX-3051" /><a name="INDEX-3052" /><a name="INDEX-3053" /><a name="INDEX-3054" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b><i>
MovieClip.getURL( ) 
Method</i></b></font></td><td align="right"><i>load a document into a browser window
</i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><table width="515" border="0" cellpadding="5"><tr><td align="left" /><td align="right" /></tr></table>
<h4 class="refsect1">Availability</h4>


<p>Method form introduced in Flash 5 (global form supported by Flash 2,
enhanced in Flash 4 to include the <em class="replaceable">method</em>
argument)</p>



<h4 class="refsect1">Synopsis</h4>

<blockquote><pre class="code">
<em>mc</em>.getURL(<em>URL, window, method</em>)</pre></blockquote>



<h4 class="refsect2">Arguments</h4>


<dl>
<dt><em>URL</em></dt>
<dd><p>A string specifying the location of the document to load or external
script to run.</p></dd>

</dl>


<dl>
<dt><em>window</em></dt>
<dd><p>An optional string, specifying the name of the browser window or
frame into which to load the document. May be a custom name or one of
the four presets: <tt class="literal">"_blank"</tt>, <tt class="literal">"_
parent"</tt>, <tt class="literal">"_self"</tt>, or
<tt class="literal">"_top"</tt>.</p></dd>

</dl>


<dl>
<dt><em>method</em></dt>
<dd><p>An optional string literal specifying the method by which to send the
variables from <em class="replaceable">mc</em> to an external script.
Must be either the literal <tt class="literal">"GET"</tt> or
<tt class="literal">"POST"</tt>; no other expression is allowed.</p></dd>

</dl>




<h4 class="refsect1">Description</h4>


<p>The <em class="filename">MovieClip.getURL( )</em> method is an alternative
to the global <em class="filename">getURL( )</em> function. Its method
form is useful only when variables are being sent, in which case
<em class="filename">getURL( )</em> sends the variables from
<em class="replaceable">mc</em>, which does not have to be the current
timeline.</p>



<h4 class="refsect1">See Also</h4>


<p>For general usage instructions, see the global <em class="filename">getURL(
)</em> function.</p>


</div>

<a name="INDEX-3055" /><a name="INDEX-3056" /><a name="INDEX-3057" /><a name="INDEX-3058" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b><i>


MovieClip.globalToLocal( ) Method</i></b></font></td><td align="right"><i>convert a point on the main Stage to clip coordinates
</i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><table width="515" border="0" cellpadding="5"><tr><td align="left" /><td align="right" /></tr></table>
<h4 class="refsect1">Availability</h4>


<p>Flash 5</p>



<h4 class="refsect1">Synopsis</h4>

<blockquote><pre class="code">
<em>mc</em>.globalToLocal(<em>point</em>)</pre></blockquote>



<h4 class="refsect2">Arguments</h4>


<dl>
<dt><em>point</em></dt>
<dd><p>A reference to an object with two properties, <tt class="literal">x</tt>
and <tt class="literal">y</tt>, that describe a point on the main Stage of
the Player (i.e., on <tt class="literal">_root</tt>). Both
<tt class="literal">x</tt> and <tt class="literal">y</tt> may be any
floating-point number.</p></dd>

</dl>




<h4 class="refsect1">Description</h4>


<p>The <em class="filename">globalToLocal( )</em> method converts the
<tt class="literal">x</tt> and <tt class="literal">y</tt> properties of
<em class="replaceable">point</em> from coordinates on the main Stage
to coordinates in the coordinate space of
<em class="replaceable">mc</em>. Note that <em class="filename">globalToLocal(
)</em> does not return a new object, it merely modifies the
existing <tt class="literal">x</tt> and <tt class="literal">y</tt> values of
<em class="replaceable">point</em>.</p>


<p>To use <em class="filename">globalToLocal( )</em>, we must first create an
object with <tt class="literal">x</tt> and <tt class="literal">y</tt> properties.
For example:</p>


<blockquote><pre class="code">var myPoint = new Object( );
myPoint.x = 10;
myPoint.y = 20;</pre></blockquote>


<p>The <tt class="literal">x</tt> and <tt class="literal">y</tt> properties of our
object are positions on the horizontal and vertical axes of the main
Stage, relative to its top-left corner. For example, an
<tt class="literal">x</tt> of 10 is 10 pixels to the right of the
Stage's left edge, and a <tt class="literal">y</tt> of 20 is 20
pixels below the Stage's top border. With our object created
and our <tt class="literal">x</tt> and <tt class="literal">y</tt> properties set,
we then pass the object to the <em class="filename">globalToLocal( )</em>
method, as in:</p>


<blockquote><pre class="code">myClip.globalToLocal(myPoint);</pre></blockquote>


<p>When <em class="filename">globalToLocal( )</em> is executed, the values of
<tt class="literal">myPoint</tt>'s <tt class="literal">x</tt> and
<tt class="literal">y</tt> properties are transformed to represent a point
in the space of <tt class="literal">myClip</tt>, measured from
<tt class="literal">myClip</tt>'s registration point. By examining
the new values of our <tt class="literal">myPoint</tt> object's
properties, we answer the question, "Where does the point
<em class="emphasis">(x, y)</em> of the main Stage appear in
<tt class="literal">myClip </tt>?" For example:</p>


<blockquote><pre class="code">xInClip = myPoint.x;
yInClip = myPoint.y;</pre></blockquote>



<h4 class="refsect1">Example</h4>


<p>The following example calculates the offset from the upper-left
corner of the main Stage to the registration point of the current
clip:</p>


<blockquote><pre class="code">pt = new Object( );         // Create generic object to hold our point
pt.x = 0;                  // Left border of main Stage
pt.y = 0;                   // Top border of main Stage
this.globalToLocal(pt);     // Convert pt to local coordinates

trace("From the current clip, the top-left corner of the main Stage is at ");
trace("x: " + pt.x + "y: " + pt.y);</pre></blockquote>



<h4 class="refsect1">See Also</h4>


<p><em class="filename">MovieClip.localToGlobal( )</em></p>


</div>

<a name="INDEX-3059" /><a name="INDEX-3060" /><a name="INDEX-3061" /><a name="INDEX-3062" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b><i>
MovieClip.gotoAndPlay( ) 
Method</i></b></font></td><td align="right"><i>jump to a given frame, then play
</i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><table width="515" border="0" cellpadding="5"><tr><td align="left" /><td align="right" /></tr></table>
<h4 class="refsect1">Availability</h4>


<p>Method form introduced in Flash 5 (global form supported by Flash 2
and later)</p>



<h4 class="refsect1">Synopsis</h4>

<blockquote><pre class="code">
<em>mc</em>.gotoAndPlay(<em>frameNumber</em>)
<em>mc</em>.gotoAndPlay(<em>frameLabel</em>)</pre></blockquote>



<h4 class="refsect2">Arguments</h4>


<dl>
<dt><em>frameNumber</em></dt>
<dd><p>A positive integer indicating the number of the frame to which the
playhead of <em class="replaceable">mc</em> should jump before playing.
If <em class="replaceable">frameNumber</em> is less than 1 or greater
than the number of frames in <em class="replaceable">mc</em> 's
timeline, the playhead is sent to either the first or last frame,
respectively.</p></dd>

</dl>


<dl>
<dt><em>frameLabel</em></dt>
<dd><p>A string indicating the label of the frame to which the playhead of
<em class="replaceable">mc</em> should jump before playing. If
<em class="replaceable">frameLabel</em> is not found, the playhead is
sent to the first frame of <em class="replaceable">mc</em> 's
timeline.</p></dd>

</dl>




<h4 class="refsect1">Description</h4>


<p>The <em class="filename">MovieClip.gotoAndPlay( )</em> method is an
alternative to the global <em class="filename">gotoAndPlay( )</em>
function. Use the method form to control remote movie clips or
movies, specified by <em class="replaceable">mc</em>.</p>


<p>For general usage instructions, see the global <em class="filename">gotoAndPlay(
)</em> function.</p>



<h4 class="refsect1">Example</h4>


<blockquote><pre class="code">// Send the part1 clip to the label intro, then play part1
part1.gotoAndPlay("intro");</pre></blockquote>


</div>

<a name="INDEX-3063" /><a name="INDEX-3064" /><a name="INDEX-3065" /><a name="INDEX-3066" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b><i>
MovieClip.gotoAndStop( ) 
Method</i></b></font></td><td align="right"><i>jump to a given frame, and stop the playhead
</i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><table width="515" border="0" cellpadding="5"><tr><td align="left" /><td align="right" /></tr></table>
<h4 class="refsect1">Availability</h4>


<p>Method form introduced in Flash 5 (global form supported by Flash 2
and later)</p>



<h4 class="refsect1">Synopsis</h4>

<blockquote><pre class="code">
<em>mc</em>.gotoAndStop(<em>frameNumber</em>)
<em>mc</em>.gotoAndStop(<em>frameLabel</em>)</pre></blockquote>



<h4 class="refsect2">Arguments</h4>


<dl>
<dt><em>frameNumber</em></dt>
<dd><p>A positive integer indicating the number of the frame to which the
playhead of <em class="replaceable">mc</em> should jump. If
<em class="replaceable">frameNumber</em> is less than 1 or greater than
the number of frames in <em class="replaceable">mc</em> 's
timeline, the playhead is sent to either the first or last frame,
respectively.</p></dd>

</dl>


<dl>
<dt><em>frameLabel</em></dt>
<dd><p>A string indicating the label of the frame to which the playhead of
<em class="replaceable">mc</em> should jump. If
<em class="replaceable">frameLabel</em> is not found, the playhead is
sent to the first frame of <em class="replaceable">mc</em> 's
timeline.</p></dd>

</dl>




<h4 class="refsect1">Description</h4>


<p>The <em class="filename">MovieClip.gotoAndStop( )</em> method is an
alternative to the global <em class="filename">gotoAndStop( )</em>
function. Use the method form to control remote movie clips or main
movies specified by <em class="replaceable">mc</em>.</p>


<p>For general usage instructions, see the global <em class="filename">gotoAndStop(
)</em> function.</p>



<h4 class="refsect1">Example</h4>


<blockquote><pre class="code">// Send the mainMenu<tt class="userinput"><b> clip </b></tt>to frame 6 and stop the playhead there
mainMenu.gotoAndStop(6);</pre></blockquote>


</div>

<a name="INDEX-3067" /><a name="INDEX-3068" /><a name="INDEX-3069" /><a name="INDEX-3070" /><a name="INDEX-3071" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b><i>



MovieClip._height Property</i></b></font></td><td align="right"><i>height of a clip or movie, in pixels
</i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><table width="515" border="0" cellpadding="5"><tr><td align="left" /><td align="right" /></tr></table>
<h4 class="refsect1">Availability</h4>


<p>Flash 4; enhanced in Flash 5</p>



<h4 class="refsect1">Synopsis</h4>

<blockquote><pre class="code">
<em>mc</em>._height</pre></blockquote>



<h4 class="refsect1">Access</h4>


<p>Read-only in Flash 4; read/write in Flash 5</p>



<h4 class="refsect1">Description</h4>


<p>The floating-point <tt class="literal">_height</tt> property is a
non-negative number specifying the height of
<em class="replaceable">mc</em>, in pixels. If
<em class="replaceable">mc</em> has no content,
<tt class="literal">_height</tt> is 0. The <tt class="literal">_height</tt>
property measures the content of a clip as the distance between the
highest occupied pixel and the lowest occupied pixel, even if there
is empty space between those pixels. An <em class="emphasis">occupied
pixel</em> is a pixel that contains a shape, graphic, button,
movie clip, or other content element. Changes made to a clip's
height in the authoring tool or via <tt class="literal">_ yscale</tt> are
reflected by <tt class="literal">_height</tt>.</p>


<p>We may set the value of <tt class="literal">_height</tt> in order to
vertically resize a movie clip. Attempts to set
<tt class="literal">_height</tt> to a negative value are ignored. Setting a
clip's <tt class="literal">_height</tt> to
does not make it invisible; rather, the clip becomes a one-pixel
horizontal line.</p>


<p>The <tt class="literal">_height</tt> of the main movie (either
<tt class="literal">_root._height</tt> or
<tt class="literal">_level</tt><em class="replaceable">n</em><tt class="literal">._height</tt>)
is not the Stage height as specified under Modify <img align="absmiddle" src="figs/U2192.gif" /> Movie <img align="absmiddle" src="figs/U2192.gif" />
Dimensions in the authoring tool but rather the height of the
contents of the main movie. There is no explicit Stage height
property; if required, we must provide the Stage height manually as a
variable. For example, if a movie's Stage has a height of 400,
we could add the following variable:</p>


<blockquote><pre class="code">_root.stageHeight = 400;</pre></blockquote>


<p>To make that value available on the timeline of any clip, use:</p>


<blockquote><pre class="code">Object.prototype.stageHeight = 400;</pre></blockquote>



<h4 class="refsect1">Usage</h4>


<p>Note that when we set the height of a movie clip, lines are scaled
proportionally, losing their original point size as set in the Stroke
panel. However, the point size of lines set to Hairline in the Stroke
panel is not scaled when a movie clip is resized. That is, use
hairlines to prevent your strokes from appearing fat or distorted
when a clip is scaled.</p>



<h4 class="refsect1">Example</h4>


<blockquote><pre class="code">ball._height = 20;         // Set the height of ball to 20 pixels
ball._height /= 2;         // Reduce the height of ball by a factor of 2</pre></blockquote>



<h4 class="refsect1">See Also</h4>


<p><em class="replaceable">MovieClip</em><tt class="literal">._width</tt>,
<em class="replaceable">MovieClip</em><tt class="literal">._yscale</tt></p>


</div>

<a name="INDEX-3072" /><a name="INDEX-3073" /><a name="INDEX-3074" /><a name="INDEX-3075" /><a name="INDEX-3076" /><a name="INDEX-3077" /><a name="INDEX-3078" /><a name="INDEX-3079" /><a name="INDEX-3080" /><a name="INDEX-3081" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b><i>



MovieClip.hitTest( ) Method</i></b></font></td><td align="right"><i>check whether a point is in a clip or two clips intersect
</i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><table width="515" border="0" cellpadding="5"><tr><td align="left" /><td align="right" /></tr></table>
<h4 class="refsect1">Availability</h4>


<p>Flash 5</p>



<h4 class="refsect1">Synopsis</h4>

<blockquote><pre class="code">
<em>mc</em>.hitTest(<em>x, y, shapeFlag</em>)
<em>mc</em>.hitTest(<em>target</em>)</pre></blockquote>



<h4 class="refsect2">Arguments</h4>


<dl>
<dt><em>x</em></dt>
<dd><p>The horizontal coordinate of the point to test.</p></dd>

</dl>


<dl>
<dt><em>y</em></dt>
<dd><p>The vertical coordinate of the point to test.</p></dd>

</dl>


<dl>
<dt><em>shapeFlag</em></dt>
<dd><p>An optional Boolean value indicating whether the collision test
should detect against the bounding box of
<em class="replaceable">mc</em> (<tt class="literal">false</tt>) or the
actual pixels of <em class="replaceable">mc</em>
(<tt class="literal">true</tt>). Defaults to <tt class="literal">false</tt> if
not supplied. Note that <em class="replaceable">shapeFlag</em> may be
used only with the <em class="replaceable">x</em> and
<em class="replaceable">y</em> arguments, not the
<em class="replaceable">target</em> argument. It is meaningful only
when <em class="replaceable">mc</em> has an irregular contour or a hole
like a donut; it has no effect if <em class="replaceable">mc</em> is a
solid rectangular object.</p></dd>

</dl>


<dl>
<dt><em>target</em></dt>
<dd><p>A string indicating the path to the movie clip to test for collision
with <em class="replaceable">mc</em>. Because movie clip references are
converted to paths when used in a string context,
<em class="replaceable">target</em> may also be a movie clip object
reference, as in
<em class="replaceable">mc</em><tt class="literal">.hitTest(ball)</tt> versus
<em class="replaceable">mc</em><tt class="literal">.hitTest("ball")</tt>.</p></dd>

</dl>




<h4 class="refsect2">Returns</h4>


<p>A Boolean indicating the result of the collision-detection test. The
result is <tt class="literal">true</tt> under any of the following
circumstances:</p>


<ul><li><p>The point <em class="filename">(x, y)</em> on the main Stage intersects
with any occupied pixel of <em class="replaceable">mc</em>. An occupied
pixel is one that contains a visual element, such as a shape or text.</p></li></ul>
<ul><li><p>The <em class="replaceable">shapeFlag</em> property is
<tt class="literal">false</tt> and the point <em class="emphasis">(x, y)</em> on
the main Stage intersects with any pixel in the bounding box of
<em class="replaceable">mc</em>. The bounding box of
<em class="replaceable">mc</em> is the smallest rectangle that can
encompass every occupied pixel of <em class="replaceable">mc</em>.</p></li></ul>
<ul><li><p>Any pixel in the bounding box of <em class="replaceable">target</em>
intersects any pixel in the bounding box of
<em class="replaceable">mc</em>.</p></li></ul>
<p>The result is <tt class="literal">false</tt> under any of the following
circumstances:</p>


<ul><li><p>The <em class="replaceable">shapeFlag</em> property is
<tt class="literal">true</tt> and the point <em class="emphasis">(x, y)</em> on
the main Stage does not intersect with any occupied pixel of
<em class="replaceable">mc</em>. An occupied pixel is one that contains
a visual element, such as a shape or text.</p></li></ul>
<ul><li><p>The point <em class="emphasis">(x, y)</em> on the main Stage does not
intersect with any pixel in the bounding box of
<em class="replaceable">mc</em>. The bounding box of
<em class="replaceable">mc</em> is the smallest rectangle that can
encompass every occupied pixel of <em class="replaceable">mc</em>.</p></li></ul>
<ul><li><p>No pixels in the bounding box of <em class="replaceable">target</em>
intersect with any pixel in the bounding box of
<em class="replaceable">mc</em>.</p></li></ul>


<h4 class="refsect1">Description</h4>


<p>The <em class="filename">hitTest( )</em> method is used to determine
whether a movie clip or specific point intersects with (i.e.,
"hits") <em class="replaceable">mc</em>.</p>


<p>When checking to see if a point intersects
<em class="replaceable">mc</em>, we provide <em class="filename">hitTest(
)</em> with the <em class="replaceable">x</em> and
<em class="replaceable">y</em> coordinates of the point to check
(relative to the main Stage). We may also provide the optional
<em class="replaceable">shapeFlag</em> argument, which indicates
whether the collision test should use the actual pixels of
<em class="replaceable">mc</em>, or just <em class="replaceable">mc</em>
's bounding box (the smallest rectangle that can encompass
every occupied pixel of <em class="replaceable">mc</em>). Checking the
actual pixels of <em class="replaceable">mc</em> allows us to determine
whether the point<em class="emphasis"> (x, y)</em> is an occupied pixel
inside the contour of <em class="replaceable">mc</em>, not merely
whether it is any point inside <em class="replaceable">mc</em> 's
bounding box.</p>


<p>When we're checking to see if a movie clip intersects
<em class="replaceable">mc</em>, we provide <em class="filename">hitTest(
)</em> with the <em class="replaceable">target</em> argument
specifying the clip to check. Collision detection between
<em class="replaceable">target</em> and <em class="replaceable">mc</em>
always uses the bounding boxes of the clips; <em class="filename">hitTest(
)</em> does not support pixel-perfect clip-versus-clip
detection. Manual pixel-perfect collision-detection routines can be
difficult to create and processor-intensive to run. In many
situations -- for example, a simple spaceship
game -- it's common practice to detect against a bounding
circle rather than exact pixels.</p>



<h4 class="refsect1">Usage</h4>


<p>Note that collision is always tested relative to the location of
<em class="replaceable">mc</em> on the main Stage of the Player.
Therefore, when <em class="filename">hitTest( )</em> is used with a single
point, the arguments <tt class="literal">x</tt> and <tt class="literal">y</tt>
should always describe a point using Stage coordinates. See
<em class="filename">MovieClip.localToGlobal( )</em> for information on
converting clip coordinates to Stage coordinates. In clip-versus-clip
detection, the coordinates of clips on different timelines are
automatically converted to global (i.e., Stage) coordinates.</p>



<h4 class="refsect1">Example</h4>


<p>This example shows how to manually detect the intersection of two
circles without using <em class="filename">hitTest( )</em>:</p>


<blockquote><pre class="code">// Check the distance between two circular clips on both axes
var deltaX = clip1._x - clip2._x;  // Horizontal distance
var deltaY = clip1._y - clip2._y;  // Vertical distance

// Store the radius of each circle in a convenient property
var radius1 = clip1._width / 2;
var radius2 = clip2._width / 2;

// If the distance between the circles' centers squared is less 
// than or equal to the total length of the two radii squared, 
// an intersection occurs.
if ((deltaX * deltaX) + (deltaY * deltaY) 
    &lt;= (radius1 + radius2) * (radius1 + radius2)) {
  trace("intersecting");
} else {
  trace("not intersecting");
}</pre></blockquote>


<p>Here we check whether <tt class="literal">paddle</tt> intersects
<tt class="literal">ball</tt> using <em class="filename">hitTest( )</em>:</p>


<blockquote><pre class="code">if (paddle.hitTest("ball")) {
  trace("The paddle hit the ball.");
}</pre></blockquote>


<p>Here we check whether the mouse pointer is over an occupied pixel
within <tt class="literal">tractor</tt>'s contour. Notice that the
coordinates of the pointer are given in relation to
<tt class="literal">_root</tt> (the main Stage). Gaps in a movie clip are
detectable when <em class="replaceable">shapeFlag</em> is
<tt class="literal">true</tt>; for example, if the
<tt class="literal">tractor</tt> uses empty space to represent its windows,
then <em class="filename">hitTest( )</em> will return
<tt class="literal">false</tt> when the pointer is over a window:</p>


<blockquote><pre class="code">if (tractor.hitTest(_root._xmouse, _root._ymouse, true)) {
  trace("You're pointing to the tractor.");
}</pre></blockquote>



<h4 class="refsect1">See Also</h4>


<p><a name="INDEX-3077" />
<a name="INDEX-3078" />
<a name="INDEX-3079" />
<a name="INDEX-3080" />
<a name="INDEX-3081" /><em class="filename">MovieClip.getBounds(
)</em>, <em class="filename">MovieClip.localToGlobal( )</em></p>


</div>

<a name="INDEX-3082" /><a name="INDEX-3083" /><a name="INDEX-3084" /><a name="INDEX-3085" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b><i>
MovieClip.loadMovie( ) 
Method</i></b></font></td><td align="right"><i>load an external .swf file into the Player
</i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><table width="515" border="0" cellpadding="5"><tr><td align="left" /><td align="right" /></tr></table>
<h4 class="refsect1">Availability</h4>


<p>Method form introduced in Flash 5 (global form supported by Flash 4)</p>



<h4 class="refsect1">Synopsis</h4>

<blockquote><pre class="code">
<em>mc</em>.loadMovie(<em>URL</em>)
<em>mc</em>.loadMovie(<em>URL, method</em>)</pre></blockquote>



<h4 class="refsect2">Arguments</h4>


<dl>
<dt><em>URL</em></dt>
<dd><p>A string specifying the location of the external
<em class="filename">.swf</em> file to load.</p></dd>

</dl>


<dl>
<dt><em>method</em></dt>
<dd><p>An optional string literal indicating the method by which to send
variables to an external script. Must be either the literal
<tt class="literal">"GET"</tt> or <tt class="literal">"POST"</tt>; no other
expression is allowed.</p></dd>

</dl>




<h4 class="refsect1">Description</h4>


<p>The <em class="filename">MovieClip.loadMovie( )</em> method is an
alternative to the global <em class="filename">loadMovie( )</em> function.
When invoked as a <em class="filename">MovieClip( ) </em>method,
<em class="filename">loadMovie( )</em> takes no
<em class="replaceable">target</em> parameter; it loads the
<em class="filename">.swf</em> at <em class="replaceable">URL</em> into
<em class="replaceable">mc</em>. The method syntax is less prone to
user error than its global function counterpart.</p>


<p>For usage instructions, see the global <em class="filename">loadMovie(
)</em> function.</p>



<h4 class="refsect1">See Also</h4>


<p><em class="filename">loadMovie( )</em>; <a href="ch13_08.htm">Section 13.8.3.1, "Method versus global function overlap issues"</a> in <a href="ch13_01.htm">Chapter 13, "Movie Clips"</a></p>


</div>

<a name="INDEX-3086" /><a name="INDEX-3087" /><a name="INDEX-3088" /><a name="INDEX-3089" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b><i>
MovieClip.loadVariables( ) 
Method</i></b></font></td><td align="right"><i>retrieve an external set of variables
</i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><table width="515" border="0" cellpadding="5"><tr><td align="left" /><td align="right" /></tr></table>
<h4 class="refsect1">Availability</h4>


<p>Method form introduced in Flash 5 (global form supported by Flash 4
and later)</p>



<h4 class="refsect1">Synopsis</h4>

<blockquote><pre class="code">
<em>mc</em>.loadVariables(<em>URL</em>)
<em>mc</em>.loadVariables(<em>URL, method</em>)</pre></blockquote>



<h4 class="refsect2">Arguments</h4>


<dl>
<dt><em>URL</em></dt>
<dd><p>A string specifying the path to one of two variable sources: a script
that produces variables as output or a text file containing
variables.</p></dd>

</dl>


<dl>
<dt><em>method</em></dt>
<dd><p>An optional string literal indicating the method by which to send the
variables from <em class="replaceable">mc</em> to an external script.
If specified, variables are both sent and loaded. If omitted,
variables are loaded only. Must be either the literal
<tt class="literal">"GET"</tt> or <tt class="literal">"POST"</tt>; no other
expression is allowed.</p></dd>

</dl>




<h4 class="refsect1">Description</h4>


<p>The <em class="filename">MovieClip.loadVariables( )</em> method is an
alternative to the global <em class="filename">loadVariables( )</em>
function. When invoked as a <em class="filename">MovieClip </em>method,
<em class="filename">loadVariables( )</em> takes no
<em class="replaceable">target</em> parameter; it loads the variables
at <em class="replaceable">URL</em> into <em class="replaceable">mc</em>.
The method syntax is less prone to user error than its global
function counterpart.</p>


<p>For usage instructions, see the global <em class="filename">loadVariables(
)</em> function.</p>



<h4 class="refsect1">See Also</h4>


<p><em class="filename">loadVariables( )</em>; <a href="ch13_08.htm">Section 13.8.3.1, "Method versus global function overlap issues"</a> in <a href="ch13_01.htm">Chapter 13, "Movie Clips"</a></p>


</div>

<a name="INDEX-3090" /><a name="INDEX-3091" /><a name="INDEX-3092" /><a name="INDEX-3093" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b><i>


MovieClip.localToGlobal( ) Method</i></b></font></td><td align="right"><i>convert a point in a clip to main Stage coordinates
</i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><table width="515" border="0" cellpadding="5"><tr><td align="left" /><td align="right" /></tr></table>
<h4 class="refsect1">Availability</h4>


<p>Flash 5</p>



<h4 class="refsect1">Synopsis</h4>

<blockquote><pre class="code">
<em>mc</em>.localToGlobal(<em>point</em>)</pre></blockquote>



<h4 class="refsect2">Arguments</h4>


<dl>
<dt><em>point</em></dt>
<dd><p>A reference to an object with two properties, <tt class="literal">x</tt>
and <tt class="literal">y</tt>, that describe a point in
<em class="replaceable">mc</em>'s coordinate space. Both
<tt class="literal">x</tt> and <tt class="literal">y</tt> may be any
floating-point number.</p></dd>

</dl>




<h4 class="refsect1">Description</h4>


<p>The<em class="filename"> localToGlobal( )</em> method converts the
<tt class="literal">x</tt> and <tt class="literal">y</tt> properties of
<em class="replaceable">point</em> from coordinates given in
<em class="replaceable">mc </em>'s coordinate space to
coordinates on the main Stage of the Player. Note that
<em class="filename">localToGlobal( )</em> does not return a new object,
it merely modifies the existing <tt class="literal">x</tt> and
<tt class="literal">y</tt> values of <em class="replaceable">point</em>.</p>


<p>To use <em class="filename">localToGlobal( )</em>, we must first create a
so-called <em class="emphasis">point</em> or
<em class="emphasis">coordinates</em> object with <tt class="literal">x</tt> and
<tt class="literal">y</tt> properties. To do so, we'll simply create
a generic object from the <em class="emphasis">Object</em> class, and add
<tt class="literal">x</tt> and <tt class="literal">y</tt> properties to it:</p>


<blockquote><pre class="code">myPoint = new Object( );
myPoint.x = 10;
myPoint.y = 20;</pre></blockquote>


<p>The <tt class="literal">x</tt> and <tt class="literal">y</tt> properties of our
object are positions on the horizontal and vertical axes of
<em class="replaceable">mc</em>, relative to <em class="replaceable">mc
</em>'s registration point (shown as a crosshair in
<em class="replaceable">mc </em>'s Library symbol). For example,
an <tt class="literal">x</tt> of 10 is 10 pixels to the right of
<em class="replaceable">mc </em>'s registration point, and a
<tt class="literal">y</tt> of 20 is 20 pixels below <em class="replaceable">mc
</em>'s registration point. With our object created
and our <tt class="literal">x</tt> and <tt class="literal">y</tt> properties set,
we then pass the object to the <em class="filename">localToGlobal( )</em>
method, as in:</p>


<blockquote><pre class="code">myClip.localToGlobal(myPoint);</pre></blockquote>


<p>When <em class="filename">localToGlobal( )</em> is executed, the values of
<tt class="literal">myPoint</tt>'s <tt class="literal">x</tt> and
<tt class="literal">y</tt> properties are transformed to represent the
corresponding point on the main Stage, measured from the
Stage's upper-left corner. By examining the new values of our
<tt class="literal">myPoint</tt> object's properties, we answer the
question "Where does the point <em class="emphasis">(x, y)</em> of
the movie clip appear on the main Stage?" For example:</p>


<blockquote><pre class="code">mainX = myPoint.x;
mainY = myPoint.y;</pre></blockquote>



<h4 class="refsect1">Example</h4>


<p>The following example determines the location of a clip's
registration point relative to the main Stage:</p>


<blockquote><pre class="code">pt = new Object( );
pt.x = 0;                  // Horizontal registration point of clip
pt.y = 0;                  // Vertical registration point of clip
this.localToGlobal(pt);    // Convert pt to main Stage coordinates

trace("On the main Stage, the registration point of the current clip is at: ");
trace("x: " + pt.x + "y: " + pt.y);</pre></blockquote>


<p>The <em class="filename">localToGlobal( )</em> method can be used to
convert a point to Stage coordinates for use with the
<em class="filename">hitTest( )</em> method, which expects points to be
supplied in the Stage's coordinate space. It can also be used
to compare points in two different movie clips using a common
coordinate space.</p>



<h4 class="refsect1">See Also</h4>


<p><em class="filename">MovieClip.globalToLocal( )</em>,
<em class="filename">MovieClip.hitTest( )</em></p>


</div>

<a name="INDEX-3094" /><a name="INDEX-3095" /><a name="INDEX-3096" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b><i>
MovieClip._name Property</i></b></font></td><td align="right"><i>the identifier of a clip instance, as a string
</i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><table width="515" border="0" cellpadding="5"><tr><td align="left" /><td align="right" /></tr></table>
<h4 class="refsect1">Availability</h4>


<p>Flash 4 and later</p>



<h4 class="refsect1">Synopsis</h4>

<blockquote><pre class="code">
<em>mc</em>._name</pre></blockquote>



<h4 class="refsect1">Access</h4>


<p>Read/write</p>



<h4 class="refsect1">Description</h4>


<p>The <tt class="literal">_name</tt> property specifies the instance name of
a movie clip instance as a string. Because it initially reflects the
instance name set in the Instance panel during authoring, the
<tt class="literal">_name</tt> property doesn't apply to main movies
(the main movie is most easily referred to by the global property
<tt class="literal">_root</tt>).</p>



<h4 class="refsect1">Example</h4>


<p>We can use <tt class="literal">_name</tt> to determine whether or not to
perform some manipulation of a given clip, as we did when generating
a series of star movie clips in <a href="ch10_10.htm">Example 10-2</a>.</p>


<p>The <tt class="literal">_name</tt> property may also be used to reassign
the identifier of a clip. For example:</p>


<blockquote><pre class="code">// Change ball to circle
ball._name = "circle";

// Now control the former ball as circle
circle._x = 500;</pre></blockquote>



<h4 class="refsect1">See Also</h4>


<p><em class="replaceable">MovieClip</em><tt class="literal">._target</tt>,
<em class="filename">targetPath( );</em> <a href="ch13_03.htm">Section 13.3.3, "Instance Names"</a> in
<a href="ch13_01.htm">Chapter 13, "Movie Clips"</a></p>


</div>

<a name="INDEX-3097" /><a name="INDEX-3098" /><a name="INDEX-3099" /><a name="INDEX-3100" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b><i>


MovieClip.nextFrame( ) Method</i></b></font></td><td align="right"><i>advance a clip or movie's playhead one frame and stop it
</i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><table width="515" border="0" cellpadding="5"><tr><td align="left" /><td align="right" /></tr></table>
<h4 class="refsect1">Availability</h4>


<p>Method form introduced in Flash 5 (global form supported by Flash 2
and later)</p>



<h4 class="refsect1">Synopsis</h4>

<blockquote><pre class="code">
<em>mc</em>.nextFrame()</pre></blockquote>



<h4 class="refsect1">Description</h4>


<p>The <em class="filename">MovieClip.nextFrame( )</em> method is an
alternative to the global <em class="filename">nextFrame( )</em> function.
Use the method form to control remote movie clips or main movies
specified by <em class="replaceable">mc</em>.</p>


<p>For general usage instructions, see the global <em class="filename">nextFrame(
)</em> function.</p>



<h4 class="refsect1">Example</h4>


<blockquote><pre class="code">// Advance slideshow one frame and stop the playhead
slideshow.nextFrame( );</pre></blockquote>



<h4 class="refsect1">See Also</h4>


<p><em class="filename">MovieClip.prevFrame( )</em>, <em class="filename">nextFrame(
)</em></p>


</div>

<a name="INDEX-3101" /><a name="INDEX-3102" /><a name="INDEX-3103" /><a name="INDEX-3104" /><a name="INDEX-3105" /><a name="INDEX-3106" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b><i>
MovieClip._parent 


Property</i></b></font></td><td align="right"><i>a reference to the host clip or movie containing this clip
</i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><table width="515" border="0" cellpadding="5"><tr><td align="left" /><td align="right" /></tr></table>
<h4 class="refsect1">Availability</h4>


<p>Flash 4 and later</p>



<h4 class="refsect1">Synopsis</h4>

<blockquote><pre class="code">
<em>mc</em>._parent</pre></blockquote>



<h4 class="refsect1">Access</h4>


<p>Read-only</p>



<h4 class="refsect1">Description</h4>


<p>The <tt class="literal">_ parent</tt> property stores a reference to the
clip object upon whose timeline <em class="replaceable">mc</em>
resides. Main movies don't support the <tt class="literal">_ parent</tt>
property because they are at the top level (conveniently referred to
as <tt class="literal">_root</tt>). References to <tt class="literal">_root._
parent</tt> return <tt class="literal">undefined</tt>. The
<tt class="literal">_parent</tt> property gives us the powerful ability to
manipulate clips in relation to the current clip.</p>



<h4 class="refsect1">Bugs</h4>


<p>Though it is possible in Flash 5 to reassign the <tt class="literal">_
parent</tt> property to another clip, doing so has little
purpose -- only the reference is changed, not the physical
structure of the clips. This unintentional behavior will likely be
changed in the future.</p>



<h4 class="refsect1">Example</h4>


<p>If <em class="replaceable">mc</em> resides on the main timeline of a
movie, we can play the main timeline from
<em class="replaceable">mc</em> using:</p>


<blockquote><pre class="code">_parent.play( );</pre></blockquote>


<p>We may also set the parent timeline's properties, as in:</p>


<blockquote><pre class="code">_parent._alpha = 50;</pre></blockquote>


<p>The <tt class="literal">_ parent</tt> property may also be used in
succession; that is, we may access the <tt class="literal">_ parent</tt> of
a <tt class="literal">_ parent</tt>, as follows:</p>


<blockquote><pre class="code">_parent._parent.play( );  // Play the clip two clips above the current clip</pre></blockquote>



<h4 class="refsect1">See Also</h4>


<p><tt class="literal">_root</tt>; <a href="ch13_05.htm">Section 13.5.3, "Referring to Nested Instances"</a>
in <a href="ch13_01.htm">Chapter 13, "Movie Clips"</a></p>


</div>

<a name="INDEX-3107" /><a name="INDEX-3108" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b><i>
MovieClip.play( ) Method</i></b></font></td><td align="right"><i>begin the sequential display of frames in a clip or movie
</i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><table width="515" border="0" cellpadding="5"><tr><td align="left" /><td align="right" /></tr></table>
<h4 class="refsect1">Availability</h4>


<p>Method form introduced in Flash 5 (global form supported by Flash 2
and later)</p>



<h4 class="refsect1">Synopsis</h4>

<blockquote><pre class="code">
<em>mc</em>.play()</pre></blockquote>



<h4 class="refsect1">Description</h4>


<p>The <em class="filename">MovieClip.play( )</em> method is an alternative
to the global <em class="filename">play( )</em> function. Use the method
form to control remote movie clips or main movies specified by
<em class="replaceable">mc</em>.</p>


<p>For general usage instructions, see the global <em class="filename">play(
)</em> function.</p>



<h4 class="refsect1">Example</h4>


<blockquote><pre class="code">// Begin playing clip intro
intro.play( );</pre></blockquote>



<h4 class="refsect1">See Also</h4>


<p><em class="filename">MovieClip.stop( )</em>, <em class="filename">play( )</em></p>


</div>

<a name="INDEX-3109" /><a name="INDEX-3110" /><a name="INDEX-3111" /><a name="INDEX-3112" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b><i>


MovieClip.prevFrame( ) Method</i></b></font></td><td align="right"><i>send a clip or movie's playhead back one frame and stop it
</i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><table width="515" border="0" cellpadding="5"><tr><td align="left" /><td align="right" /></tr></table>
<h4 class="refsect1">Availability</h4>


<p>Method form introduced in Flash 5 (global form supported by Flash 2
and later)</p>



<h4 class="refsect1">Synopsis</h4>

<blockquote><pre class="code">
<em>mc</em>.prevFrame()</pre></blockquote>



<h4 class="refsect1">Description</h4>


<p>The <em class="filename">MovieClip.prevFrame( )</em> method is an
alternative to the global <em class="filename">prevFrame( )</em> function.
Use the method form to control remote movie clips or main movies
specified by <em class="replaceable">mc</em>.</p>


<p>For general usage instructions, see the global <em class="filename">prevFrame(
)</em> function.</p>



<h4 class="refsect1">Example</h4>


<blockquote><pre class="code">// Rewind slideshow one frame and stop it
slideshow.prevFrame( );</pre></blockquote>



<h4 class="refsect1">See Also</h4>


<p><em class="filename">MovieClip.nextFrame( )</em>, <em class="filename">prevFrame(
)</em></p>


</div>

<a name="INDEX-3113" /><a name="INDEX-3114" /><a name="INDEX-3115" /><a name="INDEX-3116" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b><i>


MovieClip.removeMovieClip( ) Method</i></b></font></td><td align="right"><i>delete a movie clip from the Flash Player
</i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><table width="515" border="0" cellpadding="5"><tr><td align="left" /><td align="right" /></tr></table>
<h4 class="refsect1">Availability</h4>


<p>Method form introduced in Flash 5 (global form supported by Flash 4
and later)</p>



<h4 class="refsect1">Synopsis</h4>

<blockquote><pre class="code">
<em>mc</em>.removeMovieClip()</pre></blockquote>



<h4 class="refsect1">Description</h4>


<p>The <em class="filename">MovieClip.removeMovieClip( )</em> method is an
alternative to the global <em class="filename">removeMovieClip( )</em>
function. When invoked as a <em class="filename">MovieClip </em>method,
<em class="filename">removeMovieClip( )</em> takes no
<em class="replaceable">target</em> parameter; it removes
<em class="replaceable">mc</em>. The method syntax is less prone to
user error than its global function counterpart.</p>


<p>For usage instructions, see the global <em class="filename">removeMovieClip(
)</em> function.</p>



<h4 class="refsect1">See Also</h4>


<p><em class="filename">duplicateMovieClip( ), MovieClip.attachMovie( ),
MovieClip.duplicateMovieClip( )</em>; <a href="ch13_08.htm">Section 13.8.3.1, "Method versus global function overlap issues"</a> in <a href="ch13_01.htm">Chapter 13, "Movie Clips"</a></p>


</div>

<a name="INDEX-3117" /><a name="INDEX-3118" /><a name="INDEX-3119" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b><i>

MovieClip._rotation Property</i></b></font></td><td align="right"><i>rotation, in degrees, of a clip or movie
</i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><table width="515" border="0" cellpadding="5"><tr><td align="left" /><td align="right" /></tr></table>
<h4 class="refsect1">Availability</h4>


<p>Flash 4 and later</p>



<h4 class="refsect1">Synopsis</h4>

<blockquote><pre class="code">
<em>mc</em>._rotation</pre></blockquote>



<h4 class="refsect1">Access</h4>


<p>Read/write</p>



<h4 class="refsect1">Description</h4>


<p>The floating-point <tt class="literal">_rotation</tt> property specifies
the number of degrees <em class="replaceable">mc</em> is rotated from
its original orientation (if <em class="replaceable">mc</em> is a clip,
the <em class="emphasis">original orientation</em> is that of its symbol
in the Library). Both authoring tool and programmatic adjustments are
reflected in <tt class="literal">_rotation</tt>. Numbers in the range
to 180.0 rotate the clip clockwise. Numbers in the range
to -180.0 rotate the clip counter-clockwise. The same effect is
achieved when rotating a clip <em class="replaceable">n</em> degrees or
<em class="replaceable">n-360</em> degrees (where
<em class="replaceable">n</em> is positive). For example, there is no
difference between rotating a clip +299.4 degrees or -60.6 degrees.
Likewise, when <em class="replaceable">n</em> is negative, there is no
difference between <em class="replaceable">n</em> degrees and
<em class="replaceable">n+360</em> degrees. For example, rotating a
clip -90 degrees is the same as rotating it +270 degrees.</p>


<p>When <tt class="literal">_rotation</tt> is set to anything outside the
range of -180 to 180, the value is brought into the proper range
according to the following calculation:</p>


<blockquote><pre class="code">x = newRotation % 360;
if (x &gt; 180) {
  x -= 360;
} else if (x &lt; -180) {
  x += 360;
}
_rotation = x;</pre></blockquote>



<h4 class="refsect1">Bugs</h4>


<p>In the Flash 4 Player, setting the <tt class="literal">_rotation</tt> of a
clip reduces the scale of that clip by a fractional amount. Over many
<tt class="literal">_rotation</tt> settings, a clip will actually shrink
noticeably. To account for this bug, set the
<tt class="literal">_xscale</tt> and <tt class="literal">_ yscale</tt> of the
clip to 100 whenever setting the <tt class="literal">_rotation</tt>.</p>



<h4 class="refsect1">Example</h4>


<p>Placing the following code on a clip causes the clip to rotate 5
degrees clockwise each time a frame is rendered:</p>


<blockquote><pre class="code">onClipEvent (enterFrame) {
  _rotation += 5;
}</pre></blockquote>


</div>

<a name="INDEX-3120" /><a name="INDEX-3121" /><a name="INDEX-3122" /><a name="INDEX-3123" /><a name="INDEX-3124" /><a name="INDEX-3125" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b><i>
MovieClip.startDrag( ) 


Method</i></b></font></td><td align="right"><i>make a movie or movie clip follow the mouse
</i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><table width="515" border="0" cellpadding="5"><tr><td align="left" /><td align="right" /></tr></table>
<h4 class="refsect1">Availability</h4>


<p>Method form introduced in Flash 5 (global form supported by Flash 4
and later)</p>



<h4 class="refsect1">Synopsis</h4>

<blockquote><pre class="code">
<em>mc</em>.startDrag()
<em>mc</em>.startDrag(<em>lockCenter</em>)
<em>mc</em>.startDrag(<em>lockCenter, left, top, right, bottom</em>)</pre></blockquote>



<h4 class="refsect2">Arguments</h4>


<dl>
<dt><em>lockCenter</em></dt>
<dd><p>A Boolean indicating whether the registration point of
<em class="replaceable">mc</em> should be centered under the mouse
pointer (<tt class="literal">true</tt>) or dragged relative to its original
location (<tt class="literal">false</tt>).</p></dd>

</dl>


<dl>
<dt><em>left</em></dt>
<dd><p>A number specifying the x-coordinate to the left of which
<em class="replaceable">mc </em>'s registration point may not be
dragged.</p></dd>

</dl>


<dl>
<dt><em>top</em></dt>
<dd><p>A number specifying the y-coordinate above which
<em class="replaceable">mc</em> 's registration point may not be
dragged.</p></dd>

</dl>


<dl>
<dt><em>right</em></dt>
<dd><p>A number specifying the x-coordinate to the right of which
<em class="replaceable">mc </em>'s registration point may not be
dragged.</p></dd>

</dl>


<dl>
<dt><em>bottom</em></dt>
<dd><p>A number specifying the y-coordinate below which
<em class="replaceable">mc</em> 's registration point may not be
dragged.</p></dd>

</dl>




<h4 class="refsect1">Description</h4>


<p>The <em class="filename">MovieClip.startDrag( )</em> method is an
alternative to the global <em class="filename">startDrag( )</em> function.
When invoked as a <em class="filename">MovieClip </em>method,
<em class="filename">startDrag( )</em> takes no
<em class="replaceable">target</em> parameter; it drags
<em class="replaceable">mc</em>. The method syntax is less prone to
user error than its global function counterpart.</p>


<p>For usage instructions, see the global <em class="filename">startDrag(
)</em> function.</p>



<h4 class="refsect1">Bugs</h4>


<p>Note that the correct order of the constraining rectangular
coordinates is left, top, right, bottom but that the Flash 5
ActionScript Dictionary lists them in the wrong order under
<em class="filename">MovieClip.startDrag( )</em>.</p>



<h4 class="refsect1">Example</h4>


<blockquote><pre class="code">// Button code to drag and drop the current clip or movie
on (press) {
  this.startDrag(true);
}

on (release) {
  stopDrag( );
}</pre></blockquote>



<h4 class="refsect1">See Also</h4>


<p><em class="filename">MovieClip.stopDrag( )</em>, <em class="filename">startDrag(
)</em>, <em class="filename">stopDrag( )</em>; <a href="ch13_08.htm">Section 13.8.3.1, "Method versus global function overlap issues"</a> in <a href="ch13_01.htm">Chapter 13, "Movie Clips"</a></p>


</div>

<a name="INDEX-3126" /><a name="INDEX-3127" /><a name="INDEX-3128" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b><i>

MovieClip.stop( ) Method</i></b></font></td><td align="right"><i>pause a clip or movie
</i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><table width="515" border="0" cellpadding="5"><tr><td align="left" /><td align="right" /></tr></table>
<h4 class="refsect1">Availability</h4>


<p>Method form introduced in Flash 5 (global form supported by Flash 2
and later)</p>



<h4 class="refsect1">Synopsis</h4>

<blockquote><pre class="code">
<em>mc</em>.stop()</pre></blockquote>



<h4 class="refsect1">Description</h4>


<p>The <em class="filename">MovieClip.stop( )</em> method is an alternative
to the global <em class="filename">stop( )</em> function. Use the method
form to control remote movie clips or main movies specified by
<em class="replaceable">mc</em>.</p>


<p>For general usage instructions, see the global <em class="filename">stop(
)</em> function.</p>



<h4 class="refsect1">Example</h4>


<blockquote><pre class="code">// Halt the playback of <tt class="userinput"><b>spinner</b></tt>
spinner.stop( );</pre></blockquote>



<h4 class="refsect1">See Also</h4>


<p><em class="filename">MovieClip.play( )</em>, <em class="filename">stop( )</em></p>


</div>

<a name="INDEX-3129" /><a name="INDEX-3130" /><a name="INDEX-3131" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b><i>

MovieClip.stopDrag( ) Method</i></b></font></td><td align="right"><i>end a drag operation in progress
</i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><table width="515" border="0" cellpadding="5"><tr><td align="left" /><td align="right" /></tr></table>
<h4 class="refsect1">Availability</h4>


<p>Method form introduced in Flash 5 (global form supported by Flash 4
and later)</p>



<h4 class="refsect1">Synopsis</h4>

<blockquote><pre class="code">
<em>mc</em>.stopDrag()</pre></blockquote>



<h4 class="refsect1">Description</h4>


<p>The <em class="filename">MovieClip.stopDrag( )</em> method is an
alternative to the global <em class="filename">stopDrag( )</em> function.
However, there is no need to use the method form; <em class="filename">stopDrag(
)</em> cancels any drag operation in progress, whether invoked
through a movie clip or as a global function.</p>



<h4 class="refsect1">See Also</h4>


<p><em class="filename">MovieClip.startDrag( )</em>, <em class="filename">stopDrag(
)</em></p>


</div>

<a name="INDEX-3132" /><a name="INDEX-3133" /><a name="INDEX-3134" /><a name="INDEX-3135" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b><i>


MovieClip.swapDepths( ) Method</i></b></font></td><td align="right"><i>change the graphic layering of an instance in the instance stack
</i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><table width="515" border="0" cellpadding="5"><tr><td align="left" /><td align="right" /></tr></table>
<h4 class="refsect1">Availability</h4>


<p>Flash 5</p>



<h4 class="refsect1">Synopsis</h4>

<blockquote><pre class="code">
<em>mc</em>.swapDepths(<em>target</em>)
<em>mc</em>.swapDepths(<em>depth</em>)</pre></blockquote>



<h4 class="refsect2">Arguments</h4>


<dl>
<dt><em>target</em></dt>
<dd><p>A string indicating the path to the movie clip to be swapped with
<em class="replaceable">mc</em>. Because movie clip references are
converted to paths when used in a string context,
<em class="replaceable">target</em> may also be a movie clip object
reference, as in
<em class="replaceable">mc</em><tt class="literal">.swapDepths(window2)</tt>
versus
<em class="replaceable">mc</em><tt class="literal">.swapDepths("window2")</tt>.</p></dd>

</dl>


<dl>
<dt><em>depth</em></dt>
<dd><p>An integer specifying a level in
<em class="replaceable">mc</em>'s parent's clip stack. A
depth of -1 is below 0, 1 is in front of 0, 2 is in front of 1, and
so on. See <a href="ch13_04.htm">Section 13.4, "Movie and Instance Stacking Order"</a> in <a href="ch13_01.htm">Chapter 13, "Movie Clips"</a> for more details. Negative depths are
functional, but not officially supported by ActionScript; to ensure
future compatibility, use depths of
0 or greater.</p></dd>

</dl>




<h4 class="refsect1">Description</h4>


<p>All movie clip instances in a <em class="filename">.swf</em> document
reside in a stack that governs the visual layering of instances in
the Player. The stack is structured like a deck of cards; clips in
higher positions in the stack appear in front of clips in lower
positions. The position of an instance in the stack is initialized
when the clip is created (either in the Flash authoring tool or via
<em class="filename">attachMovie( )</em> or <em class="filename">duplicateMovieClip(
) </em>). Using <em class="filename">swapDepths( )</em>, we can
change the position of an instance in the stack.</p>


<p>The<em class="filename"> swapDepths( )</em> method takes two forms. When
used with a <em class="replaceable">target</em> argument,
<em class="filename">swapDepths( )</em> trades the stack position of
<em class="replaceable">mc</em> and <em class="replaceable">target</em>,
provided that <em class="replaceable">mc</em> and
<em class="replaceable">target</em> share the same parent clip (reside
on the same timeline). When used with a
<em class="replaceable">depth</em> argument, <em class="filename">swapDepths(
)</em> places <em class="replaceable">mc</em> in a new position
in <em class="replaceable">mc</em>'s parent stack. If that
position is occupied, the previous occupant is moved to
<em class="replaceable">mc</em>'s old position. Note that
<em class="filename">swapDepths( )</em> cannot be used to move a clip
outside of the stack maintained by its parent. For information on how
movies and movie clips are stacked in the Player, see <a href="ch13_04.htm">Section 13.4, "Movie and Instance Stacking Order"</a> in <a href="ch13_01.htm">Chapter 13, "Movie Clips"</a>.</p>



<h4 class="refsect1">Bugs</h4>


<p>Note that swapping a duplicated or attached instance with a manually
created instance via the <em class="replaceable">depth</em> argument
can cause redraw problems in the Flash 5 Player. Treat the
<em class="replaceable">depth</em> argument with prudence, and always
test depth-swapping code extensively.</p>



<h4 class="refsect1">See Also</h4>


<p><a href="ch13_04.htm">Section 13.4, "Movie and Instance Stacking Order"</a> in <a href="ch13_01.htm">Chapter 13, "Movie Clips"</a></p>


</div>

<a name="INDEX-3136" /><a name="INDEX-3137" /><a name="INDEX-3138" /><a name="INDEX-3139" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b><i>


MovieClip._target Property</i></b></font></td><td align="right"><i>the target path of a clip or movie, in slash syntax
</i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><table width="515" border="0" cellpadding="5"><tr><td align="left" /><td align="right" /></tr></table>
<h4 class="refsect1">Availability</h4>


<p>Flash 4 and later</p>



<h4 class="refsect1">Synopsis</h4>

<blockquote><pre class="code">
<em>mc</em>._target</pre></blockquote>



<h4 class="refsect1">Access</h4>


<p>Read-only</p>



<h4 class="refsect1">Description</h4>


<p>The <tt class="literal">_target</tt> property represents the path to
<em class="replaceable">mc</em> in a Flash 4-style slash notation
string. For example, if a clip, <tt class="literal">ball</tt>, resides on
the main movie timeline, <tt class="literal">ball</tt>'s
<tt class="literal">_target</tt> property is <tt class="literal">"/ball"</tt>. A
clip, <tt class="literal">stripe</tt>, inside <tt class="literal">ball</tt> would
have a <tt class="literal">_target</tt> of
<tt class="literal">"/ball/stripe"</tt>.</p>


<p>To retrieve a string giving the path to a clip in dot notation, use
the <em class="filename">targetPath( )</em> function.</p>



<h4 class="refsect1">See Also</h4>


<p><em class="filename">targetPath( )</em></p>


</div>

<a name="INDEX-3140" /><a name="INDEX-3141" /><a name="INDEX-3142" /><a name="INDEX-3143" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b><i>


MovieClip._totalframes Property</i></b></font></td><td align="right"><i>the total number of frames in a clip or movie timeline
</i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><table width="515" border="0" cellpadding="5"><tr><td align="left" /><td align="right" /></tr></table>
<h4 class="refsect1">Availability</h4>


<p>Flash 4 and later</p>



<h4 class="refsect1">Synopsis</h4>

<blockquote><pre class="code">
<em>mc</em>._totalframes</pre></blockquote>



<h4 class="refsect1">Access</h4>


<p>Read-only</p>



<h4 class="refsect1">Description</h4>


<p>The integer <tt class="literal">_totalframes</tt> property represents the
number of frames in <em class="replaceable">mc</em>'s timeline,
where <em class="replaceable">mc</em> is a movie clip or main movie. A
new clip or main movie always has a <tt class="literal">_totalframes</tt>
of 1. But if the contents of a clip are unloaded via
<em class="filename">unloadMovie( )</em>, <tt class="literal">_totalframes</tt>
becomes 0. It may also be
momentarily while the current clip is unloaded before a new clip is
loaded during a <em class="filename">loadMovie( )</em> operation over a
slow connection. The <tt class="literal">_totalframes</tt> property is most
often used along with <tt class="literal">_frameloaded</tt> to create
preloaders as shown in the entry for
<tt class="literal">MovieClip._framesloaded</tt>.</p>



<h4 class="refsect1">See Also</h4>


<p><em class="replaceable">MovieClip</em><tt class="literal">._framesloaded</tt></p>


</div>

<a name="INDEX-3144" /><a name="INDEX-3145" /><a name="INDEX-3146" /><a name="INDEX-3147" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b><i>


MovieClip.unloadMovie( ) Method</i></b></font></td><td align="right"><i>remove a movie or movie clip from the Player
</i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><table width="515" border="0" cellpadding="5"><tr><td align="left" /><td align="right" /></tr></table>
<h4 class="refsect1">Availability</h4>


<p>Method form introduced in Flash 5 (global form supported by Flash 3
and later)</p>



<h4 class="refsect1">Synopsis</h4>

<blockquote><pre class="code">
<em>mc</em>.unloadMovie()</pre></blockquote>


<p>The <em class="filename">MovieClip.unloadMovie()</em> method is an
alternative to the global <em class="filename">unloadMovie()</em>
function. When invoked as a <em class="filename">MovieClip </em>method,
<em class="filename">unloadMovie()</em> takes no
<em class="replaceable">target</em> parameter; it unloads
<em class="replaceable">mc</em>. The method syntax is less prone to
user error than its global function counterpart.</p>


<p>For usage instructions, see the global <em class="filename">unloadMovie(
)</em> function.</p>



<h4 class="refsect1">Example</h4>


<blockquote><pre class="code">// Removes a loaded document from level 1
_level1.unloadMovie( );</pre></blockquote>



<h4 class="refsect1">See Also</h4>


<p><em class="filename">MovieClip.loadMovie( )</em>, <em class="filename">unloadMovie(
)</em>; <a href="ch13_08.htm">Section 13.8.3.1, "Method versus global function overlap issues"</a> in <a href="ch13_01.htm">Chapter 13, "Movie Clips"</a></p>


</div>

<a name="INDEX-3148" /><a name="INDEX-3149" /><a name="INDEX-3150" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b><i>

MovieClip._url Property</i></b></font></td><td align="right"><i>the network address from which a clip or movie was loaded
</i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><table width="515" border="0" cellpadding="5"><tr><td align="left" /><td align="right" /></tr></table>
<h4 class="refsect1">Availability</h4>


<p>Flash 4 and later</p>



<h4 class="refsect1">Synopsis</h4>

<blockquote><pre class="code">
<em>mc</em>._url</pre></blockquote>



<h4 class="refsect1">Access</h4>


<p>Read-only</p>



<h4 class="refsect1">Description</h4>


<p>The <tt class="literal">_url</tt> property represents the URL (Uniform
Resource Locator) indicating the Internet or local disk location from
which the content of <em class="replaceable">mc</em> was loaded, as a
string. The <tt class="literal">_url</tt> property is always an absolute
URL, never a relative one. For main movies, <tt class="literal">_url</tt>
is simply the location of the current <em class="filename">.swf</em> file.
The <tt class="literal">_url</tt> of all movie clips in a
<em class="filename">.swf</em> file is the same as the main movie of that
file unless external <em class="filename">.swf</em> files have been loaded
into individual clips via <em class="filename">MovieClip.loadMovie(
)</em>. The <tt class="literal">_url</tt> of a clip that hosts an
externally loaded <em class="filename">.swf</em> file is the location of
the externally loaded file.</p>


<p>The <tt class="literal">_url</tt> property is sometimes used to create
simple security systems that prevent a movie from playing when
displayed in a unwanted location.</p>



<h4 class="refsect1">Example</h4>


<p>The value of <tt class="literal">_url</tt> in a movie loaded from a web
site looks like this:</p>


<blockquote><pre class="code">"http://www.moock.org/gwen/meetgwen.swf"</pre></blockquote>


<p>The value of <tt class="literal">_url</tt> in a movie loaded from a local
PC hard drive looks like this:</p>


<blockquote><pre class="code">"file:///C|/data/flashfiles/movie.swf"</pre></blockquote>


<p>Here we check whether a movie is hosted in the desired location (if
not, we display a frame that contains an error):</p>


<blockquote><pre class="code">if (_url != "http://www.moock.org/gwen/meetgwen.swf") {
  trace ("This movie is not running from its intended location.";
  gotoAndStop("accessDenied");
}</pre></blockquote>



<h4 class="refsect1">See Also</h4>


<p><em class="filename">MovieClip.loadMovie( )</em></p>


</div>

<a name="INDEX-3151" /><a name="INDEX-3152" /><a name="INDEX-3153" /><a name="INDEX-3154" /><a name="INDEX-3155" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b><i>



MovieClip.valueOf( ) Method</i></b></font></td><td align="right"><i>the path of a clip or movie, as a string
</i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><table width="515" border="0" cellpadding="5"><tr><td align="left" /><td align="right" /></tr></table>
<h4 class="refsect1">Availability</h4>


<p>Flash 5</p>



<h4 class="refsect1">Synopsis</h4>

<blockquote><pre class="code">
<em>mc</em>.valueOf()</pre></blockquote>



<h4 class="refsect2">Returns</h4>


<p>A string containing the full path to <em class="replaceable">mc</em>,
using dot syntax. For example:</p>


<blockquote><pre class="code">"_level1.ball"
"_level0"
"_level0.shoppingcart.product1"</pre></blockquote>




<h4 class="refsect1">Description</h4>


<p>The <em class="filename">valueOf( )</em> method returns a string
representing the absolute path to <em class="replaceable">mc</em> using
dot syntax notation. The <em class="filename">valueOf( )</em> method is
automatically invoked whenever a <em class="filename">MovieClip</em>
object is used where a string is called for. For example,
<tt class="literal">trace(</tt><em class="replaceable">mc</em><tt class="literal">)</tt>
will generate the same result as
<tt class="literal">trace(</tt><em class="replaceable">mc</em><tt class="literal">.valueOf(
))</tt>. It is, therefore, rarely necessary to invoke
<em class="filename">valueOf( )</em> explicitly.</p>



<h4 class="refsect1">See Also</h4>


<p><em class="filename">Object.valueOf( )</em>, <em class="filename">targetPath(
)</em></p>


</div>

<a name="INDEX-3156" /><a name="INDEX-3157" /><a name="INDEX-3158" /><a name="INDEX-3159" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b><i>


MovieClip._visible Property</i></b></font></td><td align="right"><i>whether a clip or movie is shown or hidden
</i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><table width="515" border="0" cellpadding="5"><tr><td align="left" /><td align="right" /></tr></table>
<h4 class="refsect1">Availability</h4>


<p>Flash 4 and later</p>



<h4 class="refsect1">Synopsis</h4>

<blockquote><pre class="code">
<em>mc</em>._visible</pre></blockquote>



<h4 class="refsect1">Access</h4>


<p>Read/write</p>



<h4 class="refsect1">Description</h4>


<p>The Boolean <tt class="literal">_visible</tt> property indicates whether
<em class="replaceable">mc</em> is currently shown
(<tt class="literal">true</tt>) or hidden (<tt class="literal">false</tt>). We
use <tt class="literal">_visible</tt> as a quick means of hiding a movie
clip or movie from view. Note that hidden clips may still be
controlled via ActionScript and still play, stop, receive events, and
otherwise operate as normal. Hidden clips are simply not displayed on
screen.</p>


<p>The initial value of the <tt class="literal">_visible</tt> property for all
movie clips is <tt class="literal">true</tt>, even for movie clips that are
fully transparent or completely off stage. The
<tt class="literal">_visible</tt> property changes only when deliberately
modified by a script; think of it as a way to programmatically show
and hide clips, not a reflection of all factors such as position and
transparency that can affect a clip's visibility.</p>


<p>Hiding a movie clip using the <tt class="literal">_visible</tt> property is
preferred to setting it to fully transparent or moving it off stage
because the Flash Player does not attempt to draw the graphics in
movie clips with <tt class="literal">_visible</tt> set to
<tt class="literal">false</tt>, thus improving rendering performance.</p>



<h4 class="refsect1">Example</h4>


<p>The following button code hides the current clip when the button is
depressed and reveals it when the button is released:</p>


<blockquote><pre class="code">on (press) {
  this._visible = false;
}

on (release) {
  this._visible = true;
}</pre></blockquote>



<h4 class="refsect1">See Also</h4>


<p><em class="replaceable">MovieClip</em><tt class="literal">._alpha</tt></p>


</div>

<a name="INDEX-3160" /><a name="INDEX-3161" /><a name="INDEX-3162" /><a name="INDEX-3163" /><a name="INDEX-3164" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b><i>

MovieClip._
width Property</i></b></font></td><td align="right"><i>width of a clip or movie, in pixels
</i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><table width="515" border="0" cellpadding="5"><tr><td align="left" /><td align="right" /></tr></table>
<h4 class="refsect1">Availability</h4>


<p>Flash 4; enhanced in Flash 5</p>



<h4 class="refsect1">Synopsis</h4>

<blockquote><pre class="code">
<em>mc</em>._width</pre></blockquote>



<h4 class="refsect1">Access</h4>


<p>Read-only in Flash 4; read/write in Flash 5</p>



<h4 class="refsect1">Description</h4>


<p>The floating-point <tt class="literal">_width</tt>
property stores a non-negative number specifying the current width of
<em class="replaceable">mc</em>, in pixels. If
<em class="replaceable">mc</em> has no content,
<tt class="literal">_width</tt> is 0. The <tt class="literal">_width</tt>
property measures the content of a clip or movie as the distance
between the leftmost occupied pixel and the rightmost occupied pixel,
even if there is empty space between those pixels. An
<em class="emphasis">occupied pixel</em> is a pixel that contains a shape,
graphic, button, movie clip, or other content element. Changes made
to a clip's width in the authoring tool or via
<tt class="literal">_xscale</tt> are reflected by
<tt class="literal">_width</tt>.</p>


<p>We may set the value of <tt class="literal">_width</tt> in order to
horizontally resize a movie clip. Attempts to set
<tt class="literal">_width</tt> to a negative value are ignored. Setting a
clip's <tt class="literal">_width</tt> to
does not hide the clip, it turns it into a one-pixel vertical line.</p>


<p>The <tt class="literal">_width</tt> of the main movie (either
<tt class="literal">_root._width</tt> or
<tt class="literal">_level</tt><em class="replaceable">n</em><tt class="literal">._width</tt>)
is not the Stage width as specified under Modify <img align="absmiddle" src="figs/U2192.gif" /> Movie <img align="absmiddle" src="figs/U2192.gif" />
Dimensions in the authoring tool but rather the width of the contents
of the main movie. There is no explicit Stage width property; if
required, we must provide the Stage width manually as a variable. For
example, if a movie's Stage has a width of 550, we could add
the following variable:</p>


<blockquote><pre class="code">_root.stageWidth = 550;</pre></blockquote>


<p>To make that value available on the timeline of any clip, use:</p>


<blockquote><pre class="code">Object.prototype.stageWidth = 550;</pre></blockquote>



<h4 class="refsect1">Usage</h4>


<p>Note that when we set the width of a movie clip, lines are scaled
proportionally, losing their original point size as set in the Stroke
panel. However, the point size of lines set to Hairline in the Stroke
panel is not scaled when a movie clip is resized. That is, use
hairlines to prevent your strokes from appearing fat or distorted
when a clip is scaled.</p>



<h4 class="refsect1">Example</h4>


<blockquote><pre class="code">ball._width = 20;         // Set the width of ball to 20 pixels
ball._width *= 2;         // Double the width of ball</pre></blockquote>



<h4 class="refsect1">See Also</h4>


<p><em class="replaceable">MovieClip</em><tt class="literal">._height</tt>,
<em class="replaceable">MovieClip</em><tt class="literal">._xscale</tt></p>


</div>

<a name="INDEX-3165" /><a name="INDEX-3166" /><a name="INDEX-3167" /><a name="INDEX-3168" /><a name="INDEX-3169" /><a name="INDEX-3170" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b><i>

MovieClip._x Property</i></b></font></td><td align="right"><i>horizontal location of a clip or movie, in pixels
</i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><table width="515" border="0" cellpadding="5"><tr><td align="left" /><td align="right" /></tr></table>
<h4 class="refsect1">Availability</h4>


<p>Flash 4 and later</p>



<h4 class="refsect1">Synopsis</h4>

<blockquote><pre class="code">
<em>mc</em>._x</pre></blockquote>



<h4 class="refsect1">Access</h4>


<p>Read/write</p>



<h4 class="refsect1">Description</h4>


<p>The floating-point <tt class="literal">_x</tt> property
always indicates the horizontal position of
<em class="replaceable">mc</em>'s <em class="emphasis">registration point,
</em><a name="INDEX-3168" />but
it is measured<em class="emphasis"> </em>relative to one of three possible
coordinate spaces:</p>


<ul><li><p>If <em class="replaceable">mc</em> resides on the main timeline,
<tt class="literal">_x</tt> is measured relative to the
<em class="emphasis">Stage's left edge</em>. For example, an
<tt class="literal">_x</tt> of 20 would indicate that the registration
point of <em class="replaceable">mc</em> is 20 pixels to the right of
the Stage's left edge; -20 would indicate 20 pixels to the
left.</p></li></ul>
<ul><li><p>If <em class="replaceable">mc</em> resides on another movie clip
instance's timeline, <tt class="literal">_x</tt> is measured relative
to the <em class="emphasis">registration point</em> of that parent
instance. For example, an <tt class="literal">_x</tt> of 20 would indicate
that the registration point of <em class="replaceable">mc</em> is 20
pixels to the right of its parent instance's registration
point; -20 would indicate 20 pixels to the left.</p></li></ul>
<ul><li><p>If <em class="replaceable">mc</em> is the main movie,
<tt class="literal">_x</tt> is the horizontal offset of the entire
<em class="filename">.swf</em> document relative to the Stage's left
edge. For example, an <tt class="literal">_x</tt> of 200 would indicate
that the contents of the Stage are offset 200 pixels to the right of
their author-time position; -200 would indicate 200 pixels to the
left.</p></li></ul>
<p>The <tt class="literal">_x</tt> property (along with all horizontal
coordinates in Flash) increases to the right and decreases to the
left. Fractional <tt class="literal">_x</tt> values are approximated in
Flash with
<a name="INDEX-3169" />
<a name="INDEX-3170" />antialiasing
(blurring).</p>


<p>If <em class="replaceable">mc</em> is contained by an instance that is
scaled and/or rotated, the coordinate space it inhabits is also
scaled and/or rotated. For example, if
<em class="replaceable">mc</em>'s parent is scaled by 200% and
rotated 90 degrees clockwise, <tt class="literal">_x</tt> will increase in
the downward direction rather than to the right, and a single unit of
<tt class="literal">_x</tt> will actually be 2 pixels instead of 1.</p>


<p>Because switching between instance and main movie coordinate spaces
can be cumbersome, the <em class="filename">MovieClip</em> object provides
the <em class="filename">localToGlobal( )</em> and
<em class="filename">globalToLocal( )</em> methods for performing
coordinate-space transformations.</p>



<h4 class="refsect1">Example</h4>


<p>Placing the following code on a clip causes it to move 5 pixels to
the right with each passing frame (assuming that its coordinate space
hasn't been altered by transformations to its parent):</p>


<blockquote><pre class="code">onClipEvent (enterFrame) {
  _x += 5;
}</pre></blockquote>


<p>Positioning clips via <tt class="literal">_x</tt> and <tt class="literal">_y</tt>
is a fundamental task in visual ActionScript programming. The
following example shows clip event handlers that cause a clip to
follow the mouse at a fixed rate of speed (many other motion samples
may be obtained from the online Code Depot):</p>


<blockquote><pre class="code">// Make a clip follow the mouse
onClipEvent(load) {
  this.speed = 10;

  // Moves clip toward the point (leaderX, leaderY)
  function follow (clip, leaderX, leaderY) {
    // Move only if we're not at the destination
    if (clip._x != leaderX || clip._y != leaderY) {
      // Determine the distance between clip and leader
      var deltaX = clip._x - leaderX;
      var deltaY = clip._y - leaderY;
      var dist = Math.sqrt((deltaX * deltaX) + (deltaY * deltaY));

      // Allocate speed between X and Y axes
      var moveX = clip.speed * (deltaX / dist);
      var moveY = clip.speed * (deltaY / dist);

      // If the clip has enough speed to overshoot the destination,
      // just go to the destination. Otherwise move according to
      // the clip's speed.
      if (clip.speed &gt;= dist) {
        clip._x = leaderX;
        clip._y = leaderY;
      } else {
        clip._x -= moveX;
        clip._y -= moveY;
      }
    }
  }
}

onClipEvent(enterframe) {
  follow(this, _root._xmouse, _root._ymouse);
}</pre></blockquote>



<h4 class="refsect1">See Also</h4>


<p><em class="filename">MovieClip.globalToLocal( )</em>,
<em class="filename">MovieClip.localToGlobal( )</em>,
<em class="replaceable">MovieClip</em><tt class="literal">._y</tt></p>


</div>

<a name="INDEX-3171" /><a name="INDEX-3172" /><a name="INDEX-3173" /><a name="INDEX-3174" /><a name="INDEX-3175" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b><i>



MovieClip._xmouse Property</i></b></font></td><td align="right"><i>horizontal location of the mouse pointer
</i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><table width="515" border="0" cellpadding="5"><tr><td align="left" /><td align="right" /></tr></table>
<h4 class="refsect1">Availability</h4>


<p>Flash 5</p>



<h4 class="refsect1">Synopsis</h4>

<blockquote><pre class="code">
<em>mc</em>._xmouse</pre></blockquote>



<h4 class="refsect1">Access</h4>


<p>Read-only</p>



<h4 class="refsect1">Description</h4>


<p>The floating-point <tt class="literal">_xmouse</tt> property indicates the
horizontal location of the mouse pointer's hotspot relative to
the coordinate space of <em class="replaceable">mc</em>. If
<em class="replaceable">mc</em> is a main movie,
<tt class="literal">_xmouse</tt> is measured from the Stage's left
edge. If <em class="replaceable">mc</em> is an instance,
<tt class="literal">_xmouse</tt> is measured from the instance's
registration point. To obtain a consistent <tt class="literal">_xmouse</tt>
coordinate that is always measured relative to the Stage, use
<tt class="literal">_root._xmouse</tt>.</p>



<h4 class="refsect1">Example</h4>


<p>Placing the following code on a clip causes it to mirror the mouse
pointer's horizontal position relative to the Stage (it moves
left and right in a straight line):</p>


<blockquote><pre class="code">onClipEvent (enterFrame) {
  _x = _root._xmouse;
}</pre></blockquote>



<h4 class="refsect1">See Also</h4>


<p><em class="replaceable">MovieClip</em><tt class="literal">._ ymouse</tt></p>


</div>

<a name="INDEX-3176" /><a name="INDEX-3177" /><a name="INDEX-3178" /><a name="INDEX-3179" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b><i>


MovieClip._xscale Property</i></b></font></td><td align="right"><i>width of a clip or movie, as a percentage
</i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><table width="515" border="0" cellpadding="5"><tr><td align="left" /><td align="right" /></tr></table>
<h4 class="refsect1">Availability</h4>


<p>Flash 4 and later</p>



<h4 class="refsect1">Synopsis</h4>

<blockquote><pre class="code">
<em>mc</em>._xscale</pre></blockquote>



<h4 class="refsect1">Access</h4>


<p>Read/write</p>



<h4 class="refsect1">Description</h4>


<p>The floating-point <tt class="literal">_xscale</tt> property specifies the
width of <em class="replaceable">mc</em> relative to its original
width, expressed as a percentage. If <em class="replaceable">mc</em> is
an instance, its "original width" is the width of the
instance's symbol in the Library. If
<em class="replaceable">mc</em> is a main movie, its "original
width" is the width of the movie at authoring time.</p>


<p>When the current width of <em class="replaceable">mc</em> is the same
as its original width, <tt class="literal">_xscale</tt> is 100. An
<tt class="literal">_xscale</tt> of 200 doubles
<em class="replaceable">mc</em>'s width relative to its original
width. An <tt class="literal">_xscale</tt> of 50 halves
<em class="replaceable">mc</em>'s width relative to its original
width.</p>


<p>The <tt class="literal">_xscale</tt> property scales a clip about its
registration point (proportionately on the right and left sides of
the clip's registration point). To size a clip from one side
only, place all of the clip's content on one side of the
registration point in the clip's symbol (this is a useful
technique for creating horizontal preloader bars). When a
clip's <tt class="literal">_xscale</tt> is set to a negative value,
the clip is flipped horizontally as if across a vertical mirror
running through its registration point (i.e., it becomes a mirror
image of itself), after which the negative value is treated as a
positive. To flip a clip horizontally without resizing it, set the
clip's <tt class="literal">_xscale</tt> to -100.</p>



<h4 class="refsect1">Example</h4>


<blockquote><pre class="code">// Double the width of ball (the height remains unchanged)
ball._xscale *= 2;

// Create a mirror image of ball
ball._xscale = -100;</pre></blockquote>



<h4 class="refsect1">See Also</h4>


<p><tt class="literal">MovieClip._ yscale</tt></p>


</div>

<a name="INDEX-3180" /><a name="INDEX-3181" /><a name="INDEX-3182" /><a name="INDEX-3183" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b><i>

MovieClip._y Property</i></b></font></td><td align="right"><i>vertical location of a clip or movie, in pixels
</i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><table width="515" border="0" cellpadding="5"><tr><td align="left" /><td align="right" /></tr></table>
<h4 class="refsect1">Availability</h4>


<p>Flash 4 and later</p>



<h4 class="refsect1">Synopsis</h4>

<blockquote><pre class="code">
<em>mc</em>._y</pre></blockquote>



<h4 class="refsect1">Access</h4>


<p>Read/write</p>



<h4 class="refsect1">Description</h4>


<p><tt class="literal">The</tt> floating-point <tt class="literal">_ y</tt> property
always indicates the vertical position of <em class="replaceable">mc
</em>'s <em class="emphasis">registration point,
</em><a name="INDEX-3183" />but
it is measured relative to one of three possible coordinate spaces.</p>


<ul><li><p>If <em class="replaceable">mc</em> resides on the main timeline,
<tt class="literal">_ y</tt> is measured relative to the
<em class="emphasis">Stage's top edge</em>. For example, a
<tt class="literal">_ y</tt> of 20 would indicate that the registration
point of <em class="replaceable">mc</em> is 20 pixels below the
Stage's top edge; -20 would indicate 20 pixels above.</p></li></ul>
<ul><li><p>If <em class="replaceable">mc</em> resides on another movie clip
instance's timeline, <tt class="literal">_ y</tt> is measured
relative to the <em class="emphasis">registration point</em> of that
parent instance. For example, a <tt class="literal">_ y</tt> of 20 would
indicate that the registration point of <em class="replaceable">mc</em>
is 20 pixels below its parent instance's registration point;
-20 would indicate 20 pixels above.</p></li></ul>
<ul><li><p>If <em class="replaceable">mc</em> is the main movie, <tt class="literal">_
y</tt> is the vertical offset of the entire
<em class="filename">.swf</em> document relative to the Stage's top
edge. For example, a <tt class="literal">_ y</tt> of 200 would indicate
that the contents of the Stage are offset 200 pixels below their
author-time position; -200 would indicate 200 pixels above.</p></li></ul>
<p>The <tt class="literal">_ y</tt> property (along with all vertical
coordinates in Flash) increases downward and decreases
upward -- the opposite of the Cartesian coordinate system.
Fractional <tt class="literal">_ y</tt> values are approximated in Flash
with antialiasing (blurring).</p>


<p>If <em class="replaceable">mc</em> is contained by an instance that is
scaled and/or rotated, the coordinate space it inhabits is also
scaled and/or rotated. For example, if
<em class="replaceable">mc</em>'s parent is scaled by 200% and
rotated 90 degrees clockwise, <tt class="literal">_ y</tt> will increase
toward the left rather than downward, and a single unit of <tt class="literal">_
y</tt> will actually be 2 pixels instead of 1.</p>


<p>Because switching between instance and main movie coordinate spaces
can be cumbersome, the <em class="filename">MovieClip</em> object provides
the <em class="filename">localToGlobal( )</em> and
<em class="filename">globalToLocal( )</em> methods for performing
coordinate-space transformations.</p>



<h4 class="refsect1">Example</h4>


<p>Placing the following code on a clip causes the clip to move down 5
pixels with each passing frame (assuming that its coordinate space
hasn't been altered by transformations to its parent):</p>


<blockquote><pre class="code">onClipEvent (enterFrame) {
  _y += 5;
}</pre></blockquote>



<h4 class="refsect1">See Also</h4>


<p><em class="filename">MovieClip.globalToLocal( )</em>,
<em class="filename">MovieClip.localToGlobal( )</em>,
<em class="replaceable">MovieClip</em><tt class="literal">._x</tt></p>


</div>

<a name="INDEX-3184" /><a name="INDEX-3185" /><a name="INDEX-3186" /><a name="INDEX-3187" /><a name="INDEX-3188" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b><i>



MovieClip._ymouse Property</i></b></font></td><td align="right"><i>vertical location of the mouse pointer
</i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><table width="515" border="0" cellpadding="5"><tr><td align="left" /><td align="right" /></tr></table>
<h4 class="refsect1">Availability</h4>


<p>Flash 5</p>



<h4 class="refsect1">Synopsis</h4>

<blockquote><pre class="code">
<em>mc</em>._ymouse</pre></blockquote>



<h4 class="refsect1">Access</h4>


<p>Read-only</p>



<h4 class="refsect1">Description</h4>


<p>The floating-point <tt class="literal">_ ymouse</tt> property indicates the
vertical location of the mouse pointer's hotspot relative to
the coordinate space of <em class="replaceable">mc</em>. If
<em class="replaceable">mc</em> is a main movie, <tt class="literal">_
ymouse</tt> is measured from the Stage's top edge. If
<em class="replaceable">mc</em> is an instance, <tt class="literal">_
ymouse</tt> is measured from the instance's registration
point. To obtain a consistent <tt class="literal">_ ymouse</tt> coordinate
that is always measured relative to the Stage, use <tt class="literal">_root._
ymouse</tt>.</p>



<h4 class="refsect1">Example</h4>


<p>Placing the following code on a clip causes it to mirror the mouse
pointer's vertical position relative to the Stage (it moves up
and down in a straight line):</p>


<blockquote><pre class="code">onClipEvent (enterFrame) {
  _y = _root._ymouse;
}</pre></blockquote>



<h4 class="refsect1">See Also</h4>


<p><em class="replaceable">MovieClip</em><tt class="literal">._xmouse</tt></p>


</div>

<a name="INDEX-3189" /><a name="INDEX-3190" /><a name="INDEX-3191" /><a name="INDEX-3192" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b><i>
MovieClip._
yscale Property</i></b></font></td><td align="right"><i>height of a clip or movie, as a percentage
</i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><table width="515" border="0" cellpadding="5"><tr><td align="left" /><td align="right" /></tr></table>
<h4 class="refsect1">Availability</h4>


<p>Flash 4 and later</p>



<h4 class="refsect1">Synopsis</h4>

<blockquote><pre class="code">
<em>mc</em>._yscale</pre></blockquote>



<h4 class="refsect1">Access</h4>


<p>Read/write</p>



<h4 class="refsect1">Description</h4>


<p>The floating-point <tt class="literal">_ yscale</tt> property specifies the
height of <em class="replaceable">mc</em> relative to its original
height, expressed as a percentage. If <em class="replaceable">mc</em>
is an instance, its "original height" is the height of
the instance's symbol in the Library. If
<em class="replaceable">mc</em> is a main movie, the "original
height" is the height of the movie at authoring time.</p>


<p>When the current height of <em class="replaceable">mc</em> is the same
as its original height, <tt class="literal">_ yscale</tt> is 100. A
<tt class="literal">_ yscale</tt> of 200 doubles
<em class="replaceable">mc</em>'s height relative to its original
height. A <tt class="literal">_ yscale</tt> of 50 halves
<em class="replaceable">mc</em>'s height relative to its original
height.</p>


<p>The <tt class="literal">_ yscale</tt> property scales a clip about its
registration point (proportionately above and below the clip's
registration point). To size a clip from above or below only, place
all of the clip's content above or below the registration point
in the clip's symbol (this is a useful technique for creating
vertical preloader bars). When a clip's <tt class="literal">_
yscale</tt> is set to a negative value, the clip is flipped
vertically as if across a horizontal mirror running through its
registration point (i.e., it becomes a vertical mirror image of
itself), after which the negative value is treated as a positive. To
flip a clip vertically without resizing it, set the clip's
<tt class="literal">_ yscale</tt> to -100.</p>



<h4 class="refsect1">Example</h4>


<blockquote><pre class="code">// Double the height of ball (the width remains unchanged)
ball._yscale *= 2;
// Flip ball vertically
ball._yscale = -100;</pre></blockquote>



<h4 class="refsect1">See Also</h4>


<p><em class="replaceable">MovieClip</em><tt class="literal">._xscale</tt></p>


</div>

<a name="INDEX-3193" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b><i>NaN Global Property</i></b></font></td><td align="right"><i>constant representing invalid numeric data (Not-a-Number)
</i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><table width="515" border="0" cellpadding="5"><tr><td align="left" /><td align="right" /></tr></table>
<h4 class="refsect1">Availability</h4>


<p>Flash 5</p>



<h4 class="refsect1">Synopsis</h4>

<blockquote><pre class="code">
NaN</pre></blockquote>



<h4 class="refsect1">Access</h4>


<p>Read-only</p>



<h4 class="refsect1">Description</h4>


<p><tt class="literal">NaN</tt> is a special numeric constant used to
represent invalid numeric data (<tt class="literal">NaN</tt> is an acronym
for "Not-a-Number"). Numeric operations that cannot be
resolved to a legitimate number yield the value
<tt class="literal">NaN</tt>. For example:</p>


<blockquote><pre class="code">Math.sqrt(-1);      // An imaginary number that cannot be represented
15 - "coffee cup";  // "coffee cup" cannot be converted to a number.</pre></blockquote>


<p>Note that <tt class="literal">NaN</tt> is still numeric data, even though
it is not a calculable number:</p>


<blockquote><pre class="code">typeof NaN;    // Yields "number"</pre></blockquote>



<h4 class="refsect1">Usage</h4>


<p>The value <tt class="literal">NaN</tt> is hardly ever used directly in
source code but rather serves as a way for an operation to return an
error condition. Because <tt class="literal">NaN</tt> does not compare
equal to itself, the only way you can detect it is with the global
function <em class="filename">isNaN( )</em>. <tt class="literal">NaN</tt> is
shorthand for <tt class="literal">Number.NaN</tt>.</p>



<h4 class="refsect1">See Also</h4>


<p><em class="filename">isNaN( )</em>, <tt class="literal">Number.NaN</tt>; <a href="ch04_03.htm">Section 4.3.3, "Special Values of the Number Datatype"</a> in <a href="ch04_01.htm">Chapter 4, "Primitive Datatypes"</a></p>


</div>

<a name="INDEX-3194" /><a name="INDEX-3195" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b><i>
newline Constant</i></b></font></td><td align="right"><i>insert a line break
</i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><table width="515" border="0" cellpadding="5"><tr><td align="left" /><td align="right" /></tr></table>
<h4 class="refsect1">Availability</h4>


<p>Flash 4 and later</p>



<h4 class="refsect1">Synopsis</h4>

<blockquote><pre class="code">
newline</pre></blockquote>



<h4 class="refsect2">Returns</h4>


<p>A newline character.</p>




<h4 class="refsect1">Description</h4>


<p>The constant <tt class="literal">newline</tt> represents a standard line
break character (ASCII 10). It is synonymous with the escape sequence
<tt class="literal">"\n"</tt> and is used to force a line break in a block
of text (usually for display in a text field variable).</p>



<h4 class="refsect1">Usage</h4>


<p>Though <tt class="literal">newline</tt> was a function in Flash 4, it
became a constant in Flash 5 and has a syntax that resembles a
property or variable. Note that parentheses are not used following
<tt class="literal">newline</tt>.</p>



<h4 class="refsect1">Example</h4>


<blockquote><pre class="code">myOutput = "hello" + newline + "world";</pre></blockquote>



<h4 class="refsect1">See Also</h4>


<p>See <a href="ch04_05.htm">Section 4.5.2.2, "Escape sequences"</a> in <a href="ch04_01.htm">Chapter 4, "Primitive Datatypes"</a></p>


</div>

<a name="INDEX-3196" /><a name="INDEX-3197" /><a name="INDEX-3198" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b><i>

nextFrame( ) Global Function</i></b></font></td><td align="right"><i>advance a movie or movie clip's playhead one frame and stop it
</i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><table width="515" border="0" cellpadding="5"><tr><td align="left" /><td align="right" /></tr></table>
<h4 class="refsect1">Availability</h4>


<p>Flash 2 and later</p>



<h4 class="refsect1">Synopsis</h4>

<blockquote><pre class="code">
nextFrame()</pre></blockquote>



<h4 class="refsect1">Description</h4>


<p>The<em class="filename"> nextFrame( )</em> function moves the playhead of
the current timeline ahead one frame and stops it there. The
"current timeline" is the timeline from which the
<em class="filename">nextFrame( )</em> function is invoked. The
<em class="filename">nextFrame( )</em> function is synonymous with
<em class="emphasis">gotoAndStop(_currentFrame + 1);</em>. If invoked on
the last frame of a timeline, <em class="filename">nextFrame( )</em>
simply stops the playhead on that frame unless another scene follows
the current scene, in which case <em class="filename">nextFrame( )</em>
moves the playhead to frame 1 of the next scene.</p>



<h4 class="refsect1">See Also</h4>


<p><em class="filename">gotoAndStop( )</em>,<em class="filename"> MovieClip.nextFrame(
)</em>, <em class="filename">nextScene( )</em>,<em class="filename"> prevFrame(
)</em></p>


</div>

<a name="INDEX-3199" /><a name="INDEX-3200" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b><i>
nextScene( ) Global Function</i></b></font></td><td align="right"><i>advance a movie's playhead to frame 1 of the next scene
</i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><table width="515" border="0" cellpadding="5"><tr><td align="left" /><td align="right" /></tr></table>
<h4 class="refsect1">Availability</h4>


<p>Flash 2 and later</p>



<h4 class="refsect1">Synopsis</h4>

<blockquote><pre class="code">
nextScene()</pre></blockquote>



<h4 class="refsect1">Description</h4>


<p>The<em class="filename"> nextScene( )</em> function moves the main
playhead of a movie to frame 1 of the scene following the current
scene and stops the main movie timeline. The "current
scene" is the scene from which the <em class="filename">nextScene(
)</em> function is invoked. It must be invoked on a
scene's main timeline in order to have an effect; that is,
<em class="filename">nextScene( )</em> does not work inside a movie clip
or <em class="filename">onClipEvent( )</em> handler. If invoked from the
last scene in a movie, <em class="filename">nextScene( )</em> sends the
playhead to frame 1 of that scene and halts movie playback.</p>



<h4 class="refsect1">See Also</h4>


<p><em class="filename">nextFrame( )</em>, <em class="filename">prevScene( )</em></p>


</div>

<a name="INDEX-3201" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b><i>Number( ) Global Function</i></b></font></td><td align="right"><i>convert a value to the Number datatype
</i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><table width="515" border="0" cellpadding="5"><tr><td align="left" /><td align="right" /></tr></table>
<h4 class="refsect1">Availability</h4>


<p>Flash 5</p>



<h4 class="refsect1">Synopsis</h4>

<blockquote><pre class="code">
Number(<em>value</em>)</pre></blockquote>



<h4 class="refsect2">Arguments</h4>


<dl>
<dt><em>value</em></dt>
<dd><p>An expression containing the value to be converted to a number.</p></dd>

</dl>




<h4 class="refsect2">Returns</h4>


<p>The result of converting <em class="replaceable">value</em> to a
primitive number.</p>




<h4 class="refsect1">Description</h4>


<p>The <em class="filename">Number( )</em> function converts its argument to
a primitive numeric value and returns that converted value. The
results of converting various types of data to a primitive number are
described in <a href="ch03_04.htm">Table 3-1</a>. It's often not
necessary to use the <em class="filename">Number( )</em> function;
ActionScript automatically converts values to the
<em class="emphasis">number</em> type when appropriate.</p>


<p>Be sure not to confuse the global <em class="filename">Number( )</em>
function with the <em class="filename">Number</em> class constructor. The
former is a function that converts a value to the
<em class="emphasis">number</em> type, whereas the latter is the class
used to wrap a primitive numeric datum in an object that can take
properties and methods.</p>



<h4 class="refsect1">Usage</h4>


<p>Note that the <em class="filename">Number( )</em> function frequently
appears in Flash 4 <em class="filename">.fla</em> files that have been
converted to the Flash 5 format. For information on how datatypes are
handled when Flash 4 files are converted to Flash 5, see <a href="ch03_04.htm">Section 3.4.4, "Flash 4-to-Flash 5 Datatype Conversion"</a> in <a href="ch03_01.htm">Chapter 3, "Data and Datatypes"</a>.</p>



<h4 class="refsect1">See Also</h4>


<p>The <em class="filename">Number</em> class, <em class="filename">parseFloat(
)</em>, <em class="filename">parseInt( )</em>; <a href="ch03_04.htm">Section 3.4.2, "Explicit Type Conversion"</a> in <a href="ch03_01.htm">Chapter 3, "Data and Datatypes"</a></p>


</div>

<a name="INDEX-3202" /><a name="INDEX-3203" /><a name="INDEX-3204" /><a name="INDEX-3205" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b><i>

Number Class</i></b></font></td><td align="right"><i>wrapper class for primitive numeric data
</i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><table width="515" border="0" cellpadding="5"><tr><td align="left" /><td align="right" /></tr></table>
<h4 class="refsect1">Availability</h4>


<p>Flash 5</p>



<h4 class="refsect1">Constructor</h4>

<blockquote><pre class="code">
new Number(<em>value</em>)</pre></blockquote>



<h4 class="refsect2">Arguments</h4>


<dl>
<dt><em>value</em></dt>
<dd><p>An expression to be resolved and, if necessary, converted to a
numeric value, then wrapped in a <em class="filename">Number</em> object.</p></dd>

</dl>




<h4 class="refsect1">Class Properties</h4>


<p><a name="INDEX-3205" />The following properties are accessed
directly as properties of the <em class="filename">Number</em> class,
using
<tt class="literal">Number</tt><em class="filename">.</em><em class="replaceable">propertyName</em>.
To access them you do not need to instantiate a new
<em class="filename">Number</em> object (i.e., there is no need for the
constructor function). Some of these properties, such as
<tt class="literal">NaN</tt> don't even require the
<tt class="literal">Number</tt><em class="filename">.</em><em class="replaceable">propertyName</em>
notation. You can simply use <tt class="literal">NaN</tt> as shorthand for
<tt class="literal">Number</tt><em class="filename">.</em><tt class="literal">NaN</tt>
(details for each property follow later).</p>


<dl>
<dt><em>MAX_VALUE</em></dt>
<dd><p>The largest representable positive number in ActionScript.</p></dd>

</dl>


<dl>
<dt><em>MIN_VALUE</em></dt>
<dd><p>The smallest representable positive number in ActionScript.</p></dd>

</dl>


<dl>
<dt><em>NaN</em></dt>
<dd><p>Special Not-a-Number value indicating invalid numeric data.</p></dd>

</dl>


<dl>
<dt><em>NEGATIVE_INFINITY</em></dt>
<dd><p>Any number more negative than <tt class="literal">-MAX_VALUE</tt>.</p></dd>

</dl>


<dl>
<dt><em>POSITIVE_INFINITY</em></dt>
<dd><p>Any number larger than <tt class="literal">MAX_VALUE</tt>.</p></dd>

</dl>



<h4 class="refsect1">Methods</h4>


<dl>
<dt><em>toString<em class="filename">( )</em></em></dt>
<dd><p>Convert a number to a string.</p></dd>

</dl>



<h4 class="refsect1">Description</h4>


<p>The <em class="filename">Number</em> class has two purposes:</p>


<ul><li><p>It gives us access to built-in properties that represent special
numeric values -- <tt class="literal">MIN_VALUE</tt>,
<tt class="literal">MIN_VALUE</tt>, <tt class="literal">NaN</tt>,
<tt class="literal">NEGATIVE_INFINITY</tt>, and
<tt class="literal">POSITIVE_INFINITY</tt> -- that can be used to check
whether numeric data is valid.</p></li></ul>
<ul><li><p>It can be used to convert between different number systems, such as
base-10 (decimal) and base-16 (hexadecimal). Refer to
<em class="filename">Number.toString( )</em> method.</p></li></ul>

<h4 class="refsect1">Usage</h4>


<p>There is no need to create a new <em class="filename">Number</em> object
if you simply want to access the numeric properties it defines. In
fact, where applicable, it is easier to use global property
equivalents (<tt class="literal">NaN</tt>, <tt class="literal">Infinity</tt>, and
<tt class="literal">-Infinity</tt>). Frankly, it is rare that you'll
need the <em class="filename">Number</em> class properties at all.</p>


<p>On the other hand, the <em class="filename">Number</em> class's
<em class="filename">toString( )</em> method is used with an instantiated
<em class="filename">Number</em> object. However, the interpreter takes
care of creating a <em class="filename">Number</em> object for us whenever
we invoke a method on a primitive numeric value. For example:</p>


<blockquote><pre class="code">x = 102;
x.toString(16);  // x is automatically converted to a Number object
                 // for the sake of this operation.</pre></blockquote>


<p>You might do this in order to, say, use <em class="filename">toString(
)</em> to convert between various number systems. Again,
frankly, this is a fairly rare task, so you probably won't be
using the <em class="filename">Number</em> class much.</p>



<h4 class="refsect1">See Also</h4>


<p>The <em class="emphasis">Math</em> object; <a href="ch04_01.htm">Section 4.1, "The Number Type"</a> in <a href="ch04_01.htm">Chapter 4, "Primitive Datatypes"</a></p>


</div>

<a name="INDEX-3206" /><a name="INDEX-3207" /><a name="INDEX-3208" /><a name="INDEX-3209" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b><i>

Number.MAX_VALUE Property</i></b></font></td><td align="right"><i>the largest representable positive number in ActionScript
</i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><table width="515" border="0" cellpadding="5"><tr><td align="left" /><td align="right" /></tr></table>
<h4 class="refsect1">Availability</h4>


<p>Flash 5</p>



<h4 class="refsect1">Synopsis</h4>

<blockquote><pre class="code">
Number.MAX_VALUE</pre></blockquote>



<h4 class="refsect1">Access</h4>


<p>Read-only</p>



<h4 class="refsect1">Description</h4>


<p>The <tt class="literal">MAX_VALUE</tt> property stores the largest
representable positive number in ActionScript
(1.7976931348623157e+308). It is convenient when you'd like to
start with a very large value, as shown in the following example. Any
number greater than <tt class="literal">MAX_VALUE</tt> can't be
represented by ActionScript and is therefore considered to be
<tt class="literal">POSITIVE_INFINITY</tt>.</p>



<h4 class="refsect1">Example</h4>


<p>Here we are looking for a minimum value in an array. We initialize
the <tt class="literal">minVal</tt> variable to
<tt class="literal">MAX_VALUE</tt>, knowing that any subsequent value will
be less than it:</p>


<blockquote><pre class="code">var myArray = [-10, 12, 99]
var minVal = Number.MAX_VALUE
for (thisValue in myArray) {
  if (myArray[thisValue] &lt; minVal) {
    minVal = myArray[thisValue];
  }
}
trace ("The minimum value is " + minVal);</pre></blockquote>



<h4 class="refsect1">See Also</h4>


<p><tt class="literal">Number</tt>.<tt class="literal">MIN_VALUE</tt>;
<tt class="literal">Number</tt>.<tt class="literal">POSITIVE_INFINITY</tt>; <a href="ch04_03.htm">Section 4.3.3, "Special Values of the Number Datatype"</a> in <a href="ch04_01.htm">Chapter 4, "Primitive Datatypes"</a></p>


</div>

<a name="INDEX-3210" /><a name="INDEX-3211" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b><i>
Number.MIN_VALUE Property</i></b></font></td><td align="right"><i>the smallest representable positive number in ActionScript
</i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><table width="515" border="0" cellpadding="5"><tr><td align="left" /><td align="right" /></tr></table>
<h4 class="refsect1">Availability</h4>


<p>Flash 5</p>



<h4 class="refsect1">Synopsis</h4>

<blockquote><pre class="code">
Number.MIN_VALUE</pre></blockquote>



<h4 class="refsect1">Access</h4>


<p>Read-only</p>



<h4 class="refsect1">Description</h4>


<p><tt class="literal">The</tt> <tt class="literal">MIN_VALUE</tt> property stores
the smallest representable positive number in ActionScript, 5e-324
(not to be confused with
<tt class="literal">-Number</tt><em class="filename">.</em><tt class="literal">MAX_VALUE</tt>,
the most-negative number allowed in ActionScript).</p>



<h4 class="refsect1">See Also</h4>


<p><tt class="literal">Number.MAX_VALUE</tt>; <a href="ch04_03.htm">Section 4.3.3, "Special Values of the Number Datatype"</a> in <a href="ch04_01.htm">Chapter 4, "Primitive Datatypes"</a></p>


</div>

<a name="INDEX-3212" /><a name="INDEX-3213" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b><i>
Number.NaN Property</i></b></font></td><td align="right"><i>constant representing invalid numeric data (Not-a-Number)
</i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><table width="515" border="0" cellpadding="5"><tr><td align="left" /><td align="right" /></tr></table>
<h4 class="refsect1">Availability</h4>


<p>Flash 5</p>



<h4 class="refsect1">Synopsis</h4>

<blockquote><pre class="code">
Number.NaN</pre></blockquote>



<h4 class="refsect1">Access</h4>


<p>Read-only</p>



<h4 class="refsect1">Description</h4>


<p>The <tt class="literal">NaN</tt> property stores the special "invalid
number" value of the <em class="emphasis">number</em> datatype. It
is used to represent the result of an illogical mathematical
calculation (e.g., <tt class="literal">0/0</tt>) or an attempted data
conversion that does not yield a legitimate number.</p>


<p><tt class="literal">Number.NaN</tt> is normally used in its more convenient
global property form, <tt class="literal">NaN</tt>.</p>



<h4 class="refsect1">Usage</h4>


<p>The value <tt class="literal">NaN</tt> is hardly ever used directly in
source code but rather serves as a way for an operation to return an
error condition. The only way you can detect <tt class="literal">NaN</tt>
is with the global function <em class="filename">isNaN( )</em>.</p>



<h4 class="refsect1">See Also</h4>


<p><em class="filename">isNaN( )</em>, <tt class="literal">NaN</tt>; <a href="ch04_03.htm">Section 4.3.3, "Special Values of the Number Datatype"</a> in <a href="ch04_01.htm">Chapter 4, "Primitive Datatypes"</a></p>


</div>

<a name="INDEX-3214" /><a name="INDEX-3215" /><a name="INDEX-3216" /><a name="INDEX-3217" /><a name="INDEX-3218" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b><i>
Number.NEGATIVE_INFINITY Property</i></b></font></td><td align="right"><i>constant representing any number more negative than   -Number.MAX_VALUE
</i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><table width="515" border="0" cellpadding="5"><tr><td align="left" /><td align="right" /></tr></table>
<h4 class="refsect1">Availability</h4>


<p>Flash 5</p>



<h4 class="refsect1">Synopsis</h4>

<blockquote><pre class="code">
Number.NEGATIVE_INFINITY</pre></blockquote>



<h4 class="refsect1">Access</h4>


<p>Read-only</p>



<h4 class="refsect1">Description</h4>


<p>The <tt class="literal">NEGATIVE_INFINITY</tt> property stores a special
numeric value used to represent values more negative than
<tt class="literal">-Number.MAX_VALUE</tt> (the most-negative number
representable in ActionScript). This is known as an
<em class="emphasis">underflow condition</em><a name="INDEX-3218" /> and is typically caused by a
mathematical error.</p>


<p><tt class="literal">Number.NEGATIVE_INFINITY</tt> is normally used in its
more convenient global property form, <tt class="literal">-Infinity</tt>.</p>



<h4 class="refsect1">See Also</h4>


<p><tt class="literal">-Infinity</tt>, <em class="filename">isFinite( )</em>,
<tt class="literal">Number.MAX_VALUE</tt>; <a href="ch04_03.htm">Section 4.3.3, "Special Values of the Number Datatype"</a> in <a href="ch04_01.htm">Chapter 4, "Primitive Datatypes"</a></p>


</div>

<a name="INDEX-3219" /><a name="INDEX-3220" /><a name="INDEX-3221" /><a name="INDEX-3222" /><a name="INDEX-3223" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b><i>
Number.POSITIVE_INFINITY Property</i></b></font></td><td align="right"><i>constant representing any number greater than Number.MAX_VALUE
</i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><table width="515" border="0" cellpadding="5"><tr><td align="left" /><td align="right" /></tr></table>
<h4 class="refsect1">Availability</h4>


<p>Flash 5</p>



<h4 class="refsect1">Synopsis</h4>

<blockquote><pre class="code">
Number.POSITIVE_INFINITY</pre></blockquote>



<h4 class="refsect1">Access</h4>


<p>Read-only</p>



<h4 class="refsect1">Description</h4>


<p>The <tt class="literal">POSITIVE_INFINITY</tt> property stores a special
numeric value used to represent values greater than
<tt class="literal">Number.MAX_VALUE</tt> (the largest number representable
in ActionScript). This is known as an <em class="emphasis">overflow
condition</em><a name="INDEX-3223" /> and is usually caused by some sort
of mathematical error.</p>


<p><tt class="literal">Number.POSITIVE_INFINITY</tt> is normally used in its
more convenient global property form, <tt class="literal">Infinity</tt>.</p>



<h4 class="refsect1">Example</h4>


<blockquote><pre class="code">if (score == Number.POSITIVE_INFINITY) {
  trace ("You've achieved the highest possible score.");
}</pre></blockquote>



<h4 class="refsect1">See Also</h4>


<p><tt class="literal">Infinity</tt>, <em class="filename">isFinite( )</em>,
<tt class="literal">Number.MAX_VALUE</tt>; <a href="ch04_03.htm">Section 4.3.3, "Special Values of the Number Datatype"</a> in <a href="ch04_01.htm">Chapter 4, "Primitive Datatypes"</a></p>


</div>

<a name="INDEX-3224" /><a name="INDEX-3225" /><a name="INDEX-3226" /><a name="INDEX-3227" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b><i>

Number.toString( ) Method</i></b></font></td><td align="right"><i>convert a Number to a string
</i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><table width="515" border="0" cellpadding="5"><tr><td align="left" /><td align="right" /></tr></table>
<h4 class="refsect1">Availability</h4>


<p>Flash 5</p>



<h4 class="refsect1">Synopsis</h4>

<blockquote><pre class="code">
numberObject.toString(<em>radix</em>)</pre></blockquote>



<h4 class="refsect2">Arguments</h4>


<dl>
<dt><em>radix</em></dt>
<dd><p><a name="INDEX-3227" />An
integer between 2 and 36 specifying the base of the number system
used to represent <em class="replaceable">numberObject</em> in string
format. This argument is optional; if omitted, it defaults to 10.</p></dd>

</dl>




<h4 class="refsect2">Returns</h4>


<p>The value of <em class="replaceable">numberObject</em> converted to a
string.</p>




<h4 class="refsect1">Description</h4>


<p>The<em class="filename"> toString( )</em> method retrieves the value of a
<em class="filename">Number</em> object, converts that value to a string,
and returns that string. We may use the
<em class="replaceable">radix</em> argument to convert numeric values
between different bases (e.g., binary, octal, decimal, and
hexadecimal). The letters A-Z are used to represent digits with the
value 10-35, respectively, although ordinarily only A through F are
used (to represent the hex digits equivalent to 10 through 15).</p>


<p>To use <em class="filename">Number.toString( )</em> with a primitive
numeric value, surround the value with parentheses, as in:</p>


<blockquote><pre class="code">(204).toString(16);</pre></blockquote>



<h4 class="refsect1">Example</h4>


<blockquote><pre class="code">x = new Number(255);
trace(x.toString( ));       // Displays: "255" (i.e., decimal)
trace(x.toString(16));     // Displays: "ff" (i.e., hexadecimal)
trace(x.toString(2));      // Displays: "11111111" (i.e., binary)

// Convert a hex literal to decimal
trace((0xFFFFFF).toString(10));  // Displays: "16777215"</pre></blockquote>



<h4 class="refsect1">See Also</h4>


<p><em class="filename">Number ( )</em>, <em class="filename">Object.toString(
)</em>,<em class="filename"> parseInt( )</em>; See <a href="ch04_03.htm">Section 4.3.1, "Integer Literals"</a> in <a href="ch04_01.htm">Chapter 4, "Primitive Datatypes"</a></p>


</div>

<a name="INDEX-3228" /><a name="INDEX-3229" /><a name="INDEX-3230" /><a name="INDEX-3231" /><a name="INDEX-3232" /><a name="INDEX-3233" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b><i>




Object Class</i></b></font></td><td align="right"><i>the basis for all other classes and for generic objects
</i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><table width="515" border="0" cellpadding="5"><tr><td align="left" /><td align="right" /></tr></table>
<h4 class="refsect1">Availability</h4>


<p>Flash 5</p>



<h4 class="refsect1">Constructor</h4>

<blockquote><pre class="code">
new Object()</pre></blockquote>



<h4 class="refsect1">Properties</h4>


<dl>
<dt><em>constructor</em></dt>
<dd><p>A reference to the class constructor function used to create the
object.</p></dd>

</dl>


<dl>
<dt><em>__proto__</em></dt>
<dd><p>A reference to the <tt class="literal">prototype</tt> property of the
object's constructor function.</p></dd>

</dl>



<h4 class="refsect1">Methods</h4>


<dl>
<dt><em>toString<em class="filename">( )</em></em></dt>
<dd><p>Convert the value of the object to a string.</p></dd>

</dl>


<dl>
<dt><em>valueOf<em class="filename">( )</em></em></dt>
<dd><p>Retrieve the primitive value of the object, if one exists.</p></dd>

</dl>



<h4 class="refsect1">Description</h4>


<p>The <em class="filename">Object</em> class is the base class of the
ActionScript object model. <em class="filename">Object</em> is used for
two general purposes: (a) as a constructor for creating new, generic
objects, and (b) as a superclass upon which to base new classes. All
classes in ActionScript, whether user-defined or built-in are
descendants of the <em class="filename">Object</em> class. All objects of
all classes therefore inherit the properties of
<em class="filename">Object</em> (though some classes override those
properties).</p>


<p>To create a generic object of the Object class directly in our code
without using a constructor, we can use an object literal just as we
might use a string literal or an array literal. An object literal is
a series of comma-separated property name/value pairs, enclosed in
curly braces. Here's the general syntax:</p>


<blockquote><pre class="code">{ property1: value1, property2: value2, property3: value3 }</pre></blockquote>


<p>The names of properties in an object literal must be legal
identifiers as described in <a href="ch14_01.htm">Chapter 14, "Lexical Structure"</a>. The values
may be any valid expression. For example:</p>


<blockquote><pre class="code">// An object literal with two numeric properties
myObject = { x: 30, y: 23 };
// Set the x property value using a complex expression
myOtherObject = { x: Math.floor(Math.random( ) * 50 + 1) };</pre></blockquote>


<p>Because object literals always create generic, anonymous objects,
they are used only when we need object-formatted data temporarily,
such as when, say, invoking <em class="filename">Sound.setTransform(
)</em>, <em class="filename">Color.setTransform( )</em>, or
<em class="filename">MovieClip.localToGlobal( )</em>.</p>



<h4 class="refsect1">See Also</h4>


<p><a href="ch12_01.htm">Chapter 12, "Objects and Classes"</a></p>


</div>

<a name="INDEX-3234" /><a name="INDEX-3235" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b><i>
Object.constructor Property</i></b></font></td><td align="right"><i>a reference to the class constructor function used to create the object
</i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><table width="515" border="0" cellpadding="5"><tr><td align="left" /><td align="right" /></tr></table>
<h4 class="refsect1">Availability</h4>


<p>Flash 5</p>



<h4 class="refsect1">Synopsis</h4>

<blockquote><pre class="code">
someObject.constructor</pre></blockquote>



<h4 class="refsect1">Access</h4>


<p>Read/write (overwriting an object's
<tt class="literal">constructor</tt> property is not recommended as it
alters the natural structure of class inheritance).</p>



<h4 class="refsect1">Description</h4>


<p>The <tt class="literal">constructor</tt> property stores a reference to the
constructor function that was used to create
<em class="replaceable">someObject</em>. For example, the
<tt class="literal">constructor</tt> property of a
<em class="filename">Date</em> object is the <em class="filename">Date</em>
constructor function:</p>


<blockquote><pre class="code">now = new Date( );
now.constructor == Date;       // Yields true</pre></blockquote>



<h4 class="refsect1">See Also</h4>


<p><a href="ch12_05.htm">Section 12.5.3.3, "The constructor property"</a> in <a href="ch12_01.htm">Chapter 12, "Objects and Classes"</a></p>


</div>

<a name="INDEX-3236" /><a name="INDEX-3237" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b><i>
Object.__proto__ Property</i></b></font></td><td align="right"><i>a reference to the object's constructor's prototype property
</i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><table width="515" border="0" cellpadding="5"><tr><td align="left" /><td align="right" /></tr></table>
<h4 class="refsect1">Availability</h4>


<p>Flash 5</p>



<h4 class="refsect1">Synopsis</h4>

<blockquote><pre class="code">
someObject.__ proto__</pre></blockquote>



<h4 class="refsect1">Access</h4>


<p>Read/write (Overwriting an object's <tt class="literal">__
proto__</tt> property is not recommended as it alters the
natural structure of class inheritance.)</p>



<h4 class="refsect1">Description</h4>


<p>The <tt class="literal">__ proto__</tt> property stores a reference to the
automatically-assigned <tt class="literal">prototype</tt> property of
<em class="replaceable">someObject</em>'s constructor function,
which is used to transfer properties down through a class hierarchy.
An object's <tt class="literal">__ proto__</tt> property is mostly
used internally by the interpreter to look up inherited properties
for an object, but we can also use it to determine the class of an
object, as shown in <a href="ch12_05.htm">Example 12-6</a> and <a href="ch12_05.htm">Example 12-9</a>. Note that <tt class="literal">__ proto__</tt>
begins and ends with <em class="emphasis">two</em> underscore characters.</p>



<h4 class="refsect1">See Also</h4>


<p><a href="ch12_05.htm">Section 12.5.3.4, "The _ _ proto_ _ property"</a> in <a href="ch12_01.htm">Chapter 12, "Objects and Classes"</a></p>


</div>

<a name="INDEX-3238" /><a name="INDEX-3239" /><a name="INDEX-3240" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b><i>

Object.toString( ) Method</i></b></font></td><td align="right"><i>the value of the object, as a string
</i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><table width="515" border="0" cellpadding="5"><tr><td align="left" /><td align="right" /></tr></table>
<h4 class="refsect1">Availability</h4>


<p>Flash 5</p>



<h4 class="refsect1">Synopsis</h4>

<blockquote><pre class="code">
someObject.toString()</pre></blockquote>



<h4 class="refsect2">Returns</h4>


<p>An internally defined string that describes or otherwise represents
the object.</p>




<h4 class="refsect1">Description</h4>


<p>The <em class="filename">toString( )</em> method returns a string
description for <em class="replaceable">someObject</em>. By default,
<em class="replaceable">someObject</em><tt class="literal">.toString( )</tt>
returns the expression:</p>


<blockquote><pre class="code">"[object " + class + "]"</pre></blockquote>


<p>where <em class="replaceable">class</em> is the internally defined name
of the class to which <em class="replaceable">someObject</em> belongs.
The ActionScript interpreter automatically invokes the
<em class="filename">toString( )</em> method whenever
<em class="replaceable">someObject</em> is used in a string context.
For example:</p>


<blockquote><pre class="code">x = new Object( );
trace(x);       // Displays: "[object Object]"</pre></blockquote>


<p>Most classes overwrite the default <em class="filename">toString( )</em>
method of <em class="filename">Object</em> in order to provide more
meaningful information about each member of the class. For example,
the <em class="filename">Date.toString( )</em> method returns the date and
time, and the <em class="filename">Array.toString( )</em> method returns a
comma-separated list of array elements. We may do the same when
constructing our own classes.</p>



<h4 class="refsect1">Example</h4>


<p>This example shows how to provide a custom <em class="filename">toString(
)</em> method for the <em class="filename">Ball</em> class that we
created in <a href="ch12_01.htm">Chapter 12, "Objects and Classes"</a>:</p>


<blockquote><pre class="code">// Add a Custom toString() method 
// Make the Ball constructor
function Ball (radius, color, xPosition, yPosition) {
  this.radius = radius;
  this.color = color;
  this.xPosition = xPosition;
  this.yPosition = yPosition;
}

// Assign a function literal to the Ball class prototype's toString() method
Ball.prototype.toString = function ( ) {
  return "A ball with the radius " + this.radius; 
};

// Create a new ball object
myBall = new Ball(6, 0x00FF00, 145, 200);

// Now check myBall's string value
trace(myBall);  // Displays: "A ball with the radius 6"</pre></blockquote>



<h4 class="refsect1">See Also</h4>


<p><em class="filename">Array.toString( )</em>, <em class="filename">Date.toString(
)</em>, <em class="filename">Number.toString( )</em>,
<em class="filename">Object.valueOf( )</em></p>


</div>

<a name="INDEX-3241" /><a name="INDEX-3242" /><a name="INDEX-3243" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b><i>

Object.valueOf( ) Method</i></b></font></td><td align="right"><i>the primitive value of the object
</i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><table width="515" border="0" cellpadding="5"><tr><td align="left" /><td align="right" /></tr></table>
<h4 class="refsect1">Availability</h4>


<p>Flash 5</p>



<h4 class="refsect1">Synopsis</h4>

<blockquote><pre class="code">
someObject.valueOf()</pre></blockquote>



<h4 class="refsect2">Returns</h4>


<p>The internally defined primitive value of
<em class="replaceable">someObject</em>, if a primitive value is
associated with <em class="replaceable">someObject</em>. If no
primitive value is associated with
<em class="replaceable">someObject</em>, then
<em class="replaceable">someObject</em> itself is returned.</p>




<h4 class="refsect1">Description</h4>


<p>The <em class="filename">valueOf( )</em> method returns the primitive
datum associated with an object, if such an association exists. This
method is mostly commonly used with objects of the
<em class="filename">Number</em>, <em class="filename">String</em>, and
<em class="filename">Boolean</em> classes, which all have associated
primitive data. The <em class="filename">MovieClip.valueOf( )</em> method
returns a string representing the path to the clip.</p>


<p>Note that it's rarely necessary to invoke <em class="filename">valueOf(
)</em> explicitly; it is automatically invoked by the
interpreter whenever <em class="replaceable">someObject</em> is used
where a primitive is expected.</p>



<h4 class="refsect1">See Also</h4>


<p><em class="filename">Boolean.valueOf( )</em>, <em class="filename">MovieClip.valueOf(
)</em>, <em class="filename">Number.valueOf( )</em>,
<em class="filename">Object.toString( )</em>, <em class="filename">String.valueOf(
)</em></p>


</div>

<a name="INDEX-3244" /><a name="INDEX-3245" /><a name="INDEX-3246" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b><i>

parseFloat( ) Global Function</i></b></font></td><td align="right"><i>extract a floating-point number from a string
</i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><table width="515" border="0" cellpadding="5"><tr><td align="left" /><td align="right" /></tr></table>
<h4 class="refsect1">Availability</h4>


<p>Flash 5</p>



<h4 class="refsect1">Synopsis</h4>

<blockquote><pre class="code">
parseFloat(<em>stringExpression</em>)</pre></blockquote>



<h4 class="refsect2">Arguments</h4>


<dl>
<dt><em>stringExpression</em></dt>
<dd><p>The string from which a floating-point number is to be extracted.</p></dd>

</dl>




<h4 class="refsect2">Returns</h4>


<p>The extracted floating-point number. Or, if extraction was
unsuccessful, the special numeric value <tt class="literal">NaN</tt>.</p>




<h4 class="refsect1">Description</h4>


<p>The<em class="filename"> parseFloat( )</em> function converts a string to
a floating-point number (a number with a fractional portion). It
works only with strings that contain a valid string representation of
a floating-point number; otherwise, <tt class="literal">NaN</tt> is
returned. The string must be of the following form:</p>


<ul><li><p>Optional leading whitespace</p></li></ul>
<ul><li><p>Optional sign indicator + or -</p></li></ul>
<ul><li><p>At least one digit from 0-9 and an optional decimal point</p></li></ul>
<ul><li><p>Optional exponent starting with <tt class="literal">e</tt> or
<tt class="literal">E</tt> followed by integer exponent</p></li></ul>
<p>Trailing characters that cannot be parsed as part of the preceding
numeric form are ignored.</p>



<h4 class="refsect1">Usage</h4>


<p>Because user input data entered into text fields always belongs to
the <em class="emphasis">string</em> datatype, we often use
<em class="filename">parseFloat( )</em> to extract numeric data from
user-entered text. Note that <em class="filename">parseFloat( )</em> can
extract numbers from strings that contain both numbers and
non-numeric characters, whereas <em class="filename">Number( )</em>
cannot.</p>



<h4 class="refsect1">Examples</h4>


<blockquote><pre class="code">parseFloat("14.5 apples");    // Yields 14.5
parseFloat(".123");           // Yields 0.123
var x = "15, 4, 23, 9";
parseFloat(x);                // Yields 15</pre></blockquote>



<h4 class="refsect1">See Also</h4>


<p><em class="filename">isNaN( )</em>, <tt class="literal">NaN</tt>,
<em class="filename">Number( )</em>, <em class="filename">parseInt( )</em>;
<a href="ch03_04.htm">Section 3.4.2, "Explicit Type Conversion"</a> in <a href="ch03_01.htm">Chapter 3, "Data and Datatypes"</a>;
<a href="ch04_02.htm">Section 4.2, "Integers and Floating-Point Numbers"</a> in <a href="ch04_01.htm">Chapter 4, "Primitive Datatypes"</a></p>


</div>

<a name="INDEX-3247" /><a name="INDEX-3248" /><a name="INDEX-3249" /><a name="INDEX-3250" /><a name="INDEX-3251" /><a name="INDEX-3252" /><a name="INDEX-3253" /><a name="INDEX-3254" /><a name="INDEX-3255" /><a name="INDEX-3256" /><a name="INDEX-3257" /><a name="INDEX-3258" /><a name="INDEX-3259" /><a name="INDEX-3260" /><a name="INDEX-3261" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b><i>




parseInt( ) Global Function</i></b></font></td><td align="right"><i>extract an integer from a string or convert numbers to base-10.
</i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><table width="515" border="0" cellpadding="5"><tr><td align="left" /><td align="right" /></tr></table>
<h4 class="refsect1">Availability</h4>


<p>Flash 5</p>



<h4 class="refsect1">Synopsis</h4>

<blockquote><pre class="code">
parseInt(<em>stringExpression</em>)
parseInt(<em>stringExpression, radix</em>)</pre></blockquote>



<h4 class="refsect2">Arguments</h4>


<dl>
<dt><em>stringExpression</em></dt>
<dd><p>The string from which an integer is to be extracted.</p></dd>

</dl>


<dl>
<dt><em>radix</em></dt>
<dd><p><a name="INDEX-3253" />An
optional integer, between 2 and 36, specifying the base (or
<em class="emphasis">radix</em>) of the integer to be extracted. If not
specified, the default radix depends on the contents of
<em class="replaceable">stringExpression</em> (as described later).</p></dd>

</dl>




<h4 class="refsect2">Returns</h4>


<p>The extracted integer value, as a base-10 number regardless of the
original <em class="replaceable">radix</em>. Or, if extraction was
unsuccessful, the special numeric value <tt class="literal">NaN</tt>.</p>




<h4 class="refsect1">Description</h4>


<p>The<em class="filename"> parseInt( )</em> function converts a string
expression to an integer. It works only with strings that contain a
valid string representation of an integer using the specified radix.
The string must be of the following form:</p>


<ul><li><p>Optional leading whitespace</p></li></ul>
<ul><li><p>Optional + or -</p></li></ul>
<ul><li><p>One or more digits that are valid in the number system of the
specified radix</p></li></ul>
<p>Trailing characters that cannot be parsed as part of the preceding
numeric form are ignored.</p>


<p>The number derived from the supplied string starts with the first
nonblank character in the string and ends with the character before
the first character that is not a legitimate digit in the supplied
<em class="replaceable">radix</em>. For example, in the base-10 system,
the letter <em class="emphasis">F</em> is not a valid digit, so the
following expression yields the number 2:</p>


<blockquote><pre class="code">parseInt("2F", 10);</pre></blockquote>


<p>But in the
<a name="INDEX-3254" /> <a name="INDEX-3255" />base-16 system (hexadecimal), the
characters <em class="emphasis">A, B, C, D, E,</em> and
<em class="emphasis">F</em> <em class="emphasis">are</em> valid numerals, so
the following expression yields the number 47:</p>


<blockquote><pre class="code">parseInt("2F", 16);  // 2F in hexadecimal is 47 in base-10</pre></blockquote>


<p>The <em class="replaceable">radix</em> argument of <em class="filename">parseInt(
)</em> specifies the base of the number as it exists in the
string. In other words, using the <em class="replaceable">radix</em>
argument we may say to the interpreter "Treat this string as a
base-16 number" or "Treat this string as a base-2
number."</p>


<p><em class="filename">parseInt( )</em> also interprets the prefix
<tt class="literal">0x</tt> to indicate a hexadecimal (a.k.a. hex) number
(as if a <em class="replaceable">radix</em> of 16 was specified) and a
leading
to indicate an octal number (as if a <em class="replaceable">radix</em>
of 8 was specified):</p>


<blockquote><pre class="code">parseInt("0xFF");    // Parsed as hex, yields 255
parseInt("FF", 16);  // Parsed as hex, yields 255
parseInt("0377");    // Parsed as octal, yields 255 = (3 * 64) + (7 * 8) + (7 * 1)
parseInt("377", 8);  // Parsed as octal, yields 255</pre></blockquote>


<p>An explicit radix overrides any implicit radix:</p>


<blockquote><pre class="code">parseInt ("0xFF", 10)   // Parsed as decimal, yields 0
parseInt ("0x15", 10)   // Parsed as decimal, yields 0 (not 15, and not 21)
parseInt ("0377", 10)   // Parsed as decimal, yields 377</pre></blockquote>


<p>Note that the<em class="filename"> parseInt( )</em> function extracts
integer values only, unlike <em class="filename">parseFloat( )</em> which
can also extract fractional values but may be used only with base-10
numbers.</p>



<h4 class="refsect1">Example</h4>


<p>We primarily use <em class="filename">parseInt( )</em> to extract integers
from a string that contains both numbers and text or to remove the
decimal place from a number (similar to <em class="filename">Math.floor(
)</em>).</p>


<blockquote><pre class="code">parseInt("Wow, 20 people were there");    // Yields NaN
parseInt("20 people were there");         // Yields 20
parseInt("1001", 2);                      // Yields 9 (1001 evaluated in binary)
parseInt(1.5);  // Yields 1 (the number 1.5 is converted to the string 
                // "1.5" before the parseInt operation proceeds)</pre></blockquote>



<h4 class="refsect1">See Also</h4>


<p><em class="filename">Math.floor( )</em>, <tt class="literal">NaN</tt>,<em class="filename">
parseFloat( )</em>; <a href="ch03_04.htm">Section 3.4.2, "Explicit Type Conversion"</a> in
<a href="ch03_01.htm">Chapter 3, "Data and Datatypes"</a>; <a href="ch04_02.htm">Section 4.2, "Integers and Floating-Point Numbers"</a>
<a name="INDEX-3256" />
<a name="INDEX-3257" />
<a name="INDEX-3258" />
<a name="INDEX-3259" />
<a name="INDEX-3260" />
<a name="INDEX-3261" />in
<a href="ch04_01.htm">Chapter 4, "Primitive Datatypes"</a></p>


</div>

<a name="INDEX-3262" /><a name="INDEX-3263" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b><i>
play( ) Global Function</i></b></font></td><td align="right"><i>begin the sequential display of frames in a movie
</i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><table width="515" border="0" cellpadding="5"><tr><td align="left" /><td align="right" /></tr></table>
<h4 class="refsect1">Availability</h4>


<p>Flash 2 and later</p>



<h4 class="refsect1">Synopsis</h4>

<blockquote><pre class="code">
play()</pre></blockquote>



<h4 class="refsect1">Description</h4>


<p>Invoking the <em class="filename">play( )</em> function initiates the
sequential display of the frames in the current main movie or movie
clip. The "current" movie or movie clip is the one that
bears the <em class="filename">play( )</em> function invocation statement.
Frames are displayed at a rate dictated by the frames per second (or
FPS) setting of the entire movie, which is set under the Movie
Properties (Modify <img align="absmiddle" src="figs/U2192.gif" /> Movie <img align="absmiddle" src="figs/U2192.gif" /> Frame Rate).</p>


<p>Once started, the playback of a movie or movie clip continues until
another function invocation specifically stops the playback. All
movie clips loop (begin playing again at frame 1) when the playhead
reaches the end of the timeline. In a browser, however, main movies
loop only if the code used to embed the movie in the HTML page
specifies that the movie should loop, as determined by the
<tt class="literal">LOOP</tt> attribute. (If you're using the Publish
command to embed your movie in an HTML page, set the
<tt class="literal">LOOP</tt> attribute by selecting File <img align="absmiddle" src="figs/U2192.gif" /> Publish
Settings <img align="absmiddle" src="figs/U2192.gif" /> HTML <img align="absmiddle" src="figs/U2192.gif" /> Playback <img align="absmiddle" src="figs/U2192.gif" /> Loop.)</p>



<h4 class="refsect1">See Also</h4>


<p><em class="filename">gotoAndPlay( )</em>, <em class="filename">MovieClip.play(
)</em>, <em class="filename">stop( )</em></p>


</div>

<a name="INDEX-3264" /><a name="INDEX-3265" /><a name="INDEX-3266" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b><i>

prevFrame( ) Global Function</i></b></font></td><td align="right"><i>send a movie's playhead back one frame and stop it
</i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><table width="515" border="0" cellpadding="5"><tr><td align="left" /><td align="right" /></tr></table>
<h4 class="refsect1">Availability</h4>


<p>Flash 2 and later</p>



<h4 class="refsect1">Synopsis</h4>

<blockquote><pre class="code">
prevFrame()</pre></blockquote>



<h4 class="refsect1">Description</h4>


<p>The <em class="filename">prevFrame( )</em> function moves the playhead of
the current timeline back one frame and stops it there. The
"current timeline" is the timeline from which the
<em class="filename">prevFrame( )</em> function is invoked. The
<em class="filename">prevFrame( )</em> function is synonymous with
<em class="emphasis">gotoAndStop(_currentFrame - 1);</em>. If invoked on
the first frame of a timeline, <em class="filename">prevFrame( )</em>
simply stops the playhead on that frame unless another scene precedes
the current scene, in which case <em class="filename">prevFrame( )</em>
moves the playhead to the last frame of the previous scene.</p>



<h4 class="refsect1">See Also</h4>


<p><em class="filename">gotoAndStop( )</em>, <em class="filename">MovieClip.prevFrame(
)</em>, <em class="filename">nextFrame( )</em>, <em class="filename">prevScene(
)</em></p>


</div>

<a name="INDEX-3267" /><a name="INDEX-3268" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b><i>
prevScene( ) Global Function</i></b></font></td><td align="right"><i>send a movie's playhead to frame 1 of the previous scene
</i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><table width="515" border="0" cellpadding="5"><tr><td align="left" /><td align="right" /></tr></table>
<h4 class="refsect1">Availability</h4>


<p>Flash 2 and later</p>



<h4 class="refsect1">Synopsis</h4>

<blockquote><pre class="code">
prevScene()</pre></blockquote>



<h4 class="refsect1">Description</h4>


<p>The <em class="filename">prevScene( )</em> function moves the main
playhead of a movie to frame 1 of the scene before the current scene
and stops the main movie timeline. The "current scene" is
the scene from which the <em class="filename">prevScene( )</em> function
is invoked. It must be invoked on a scene's main timeline in
order to have an effect; that is, <em class="filename">prevScene( )</em>
does not work inside a movie clip or <em class="filename">onClipEvent(
)</em> handler. If invoked from the first scene in a movie,
<em class="filename">prevScene( )</em> sends the playhead to frame 1 of
that scene and halts movie playback.</p>



<h4 class="refsect1">See Also</h4>


<p><em class="filename">nextScene( )</em>, <em class="filename">prevFrame( )</em></p>


</div>

<a name="INDEX-3269" /><a name="INDEX-3270" /><a name="INDEX-3271" /><a name="INDEX-3272" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b><i>


print( ) Global Function</i></b></font></td><td align="right"><i>print the frames of a movie or movie clip using vectors
</i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><table width="515" border="0" cellpadding="5"><tr><td align="left" /><td align="right" /></tr></table>
<h4 class="refsect1">Availability</h4>


<p>Flash 5</p>



<h4 class="refsect1">Synopsis</h4>

<blockquote><pre class="code">
print(<em>target, boundingBox</em>)</pre></blockquote>



<h4 class="refsect2">Arguments</h4>


<dl>
<dt><em>target</em></dt>
<dd><p>A string or reference indicating the path to the movie clip or
document level to print (references are converted to paths when used
in a string context).</p></dd>

</dl>


<dl>
<dt><em>boundingBox</em></dt>
<dd><p>A string indicating how the printed frames of
<em class="replaceable">target</em> should be cropped when printed.
Cropping is defined by a bounding box that represents the entire
printed page. The region of <em class="replaceable">target</em>
included in the printed page can be set using one of three legal
values for <em class="replaceable">boundingBox</em> (which must be a
literal string):</p>

<dl>

<dt><em>"bframe"</em></dt>

<dd>
<p>The bounding box for each printed frame is set individually to match
the size of each frame's contents. Hence, every printed
frame's content is scaled to fill the entire printed page.</p></dd>



<dt><em>"bmax"</em></dt>

<dd>
<p>The area occupied by the content of all printed frames is combined to
form a general bounding box. Each printed frame's content is
scaled and placed on the printed page relative to the general
bounding box.</p></dd>



<dt><em>"bmovie"</em></dt>

<dd>
<p>The bounding box for all printed frames is set to the size of a
single, designated frame in the <em class="replaceable">target</em>
clip. Content of printed frames is cropped to the bounding box of
that designated frame. To designate a frame as the bounding box,
assign it the label <tt class="literal">#b</tt>.</p></dd></dl></dd>

</dl>




<h4 class="refsect1">Description</h4>


<p>Printing a Flash movie using a web browser's built-in print
function behaves inconsistently and often results in poor quality
printouts. Using the <em class="filename">print( )</em> function, we can
print the contents of a movie with accuracy and quality, directly
from Flash. By default, <em class="filename">print( )</em> causes all of
the frames of <em class="replaceable">target</em>'s timeline to
be sent to the printer, one frame per page, cropped according to the
<em class="replaceable">boundingBox</em> argument. To designate only
specific frames for printing, we assign the label
<tt class="literal">#P</tt> to the desired frames.</p>


<p>The<em class="filename"> print( )</em> function sends vectors directly to
PostScript printers and vectors converted to bitmaps to
non-PostScript printers. Because <em class="filename">print( )</em> uses
vectors, it cannot be used to print movies with alpha transparency or
color transformations. To print movies that have color effects, use
<em class="filename">printAsBitmap( )</em>.</p>



<h4 class="refsect1">Usage</h4>


<p>In Flash 4 r20 and above, the features of the various Flash 5
<em class="filename">print( )</em> functions are available as a modified
<em class="filename">getURL( )</em> Action. For more details, see
Macromedia's Flash Printing SDK, available at:</p>


<blockquote class="simplelist">

<p><a href="../../../../../../www.macromedia.com/software/flash/open/webprinting/authoring.html">http://www.macromedia.com/software/flash/open/webprinting/authoring.html</a></p>

</blockquote>



<h4 class="refsect1">Example</h4>


<blockquote><pre class="code">// Print every frame in the main movie timeline,
// sizing each individually to fill the page
print("_root", "bframe");

// Print every frame in the main movie timeline,
// sizing each frame relative to the combined size of all frames
print("_root", "bmax");</pre></blockquote>


<p>When a button with the following code is clicked, Flash prints all
frames in the button's timeline, cropped to the bounding box of
the frame with the label <tt class="literal">#b</tt> and sized to fill the
page:</p>


<blockquote><pre class="code">on (release) {
  print(this, "bmovie");
}</pre></blockquote>



<h4 class="refsect1">See Also</h4>


<p><em class="filename">getURL( )</em>, <em class="filename">printAsBitmap(
)</em>,<em class="filename"> printAsBitmapNum( )</em>,<em class="filename">
printNum( )</em></p>


</div>

<a name="INDEX-3273" /><a name="INDEX-3274" /><a name="INDEX-3275" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b><i>

printAsBitmap( ) Global Function</i></b></font></td><td align="right"><i>print the frames of a movie or movie clip as bitmaps
</i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><table width="515" border="0" cellpadding="5"><tr><td align="left" /><td align="right" /></tr></table>
<h4 class="refsect1">Availability</h4>


<p>Flash 5</p>



<h4 class="refsect1">Synopsis</h4>

<blockquote><pre class="code">
printAsBitmap(<em>target, boundingBox</em>)</pre></blockquote>



<h4 class="refsect2">Arguments</h4>


<dl>
<dt><em>target</em></dt>
<dd><p>A string or reference indicating the path to the movie clip or
document level to print (references are converted to paths when used
in a string context).</p></dd>

</dl>


<dl>
<dt><em>boundingBox</em></dt>
<dd><p>A string indicating how the printed frames of
<em class="replaceable">target</em> should be cropped when printed, as
described earlier under <em class="filename">print( )</em>.</p></dd>

</dl>




<h4 class="refsect1">Description</h4>


<p>The<em class="filename"> printAsBitmap( )</em> function is functionally
identical to <em class="filename">print( )</em>, except that it outputs
rasterized content to the printer, not vectors. It can, therefore,
successfully print movies with color transformations but produces
poorer quality for vector-based artwork.</p>



<h4 class="refsect1">Usage</h4>


<p>See Usage notes under the <em class="filename">print( )</em> function.</p>



<h4 class="refsect1">See Also</h4>


<p><em class="filename">print( )</em>, <em class="filename">printAsBitmapNum(
)</em>, <em class="filename">printNum( )</em></p>


</div>

<a name="INDEX-3276" /><a name="INDEX-3277" /><a name="INDEX-3278" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b><i>

printAsBitmapNum( ) Global Function</i></b></font></td><td align="right"><i>print the frames of a document level as bitmaps
</i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><table width="515" border="0" cellpadding="5"><tr><td align="left" /><td align="right" /></tr></table>
<h4 class="refsect1">Availability</h4>


<p>Flash 5</p>



<h4 class="refsect1">Synopsis</h4>

<blockquote><pre class="code">
printAsBitmapNum(<em>level, boundingBox</em>)</pre></blockquote>



<h4 class="refsect2">Arguments</h4>


<dl>
<dt><em>level</em></dt>
<dd><p>A non-negative integer or an expression that yields a non-negative
integer, indicating the document level to print.</p></dd>

</dl>


<dl>
<dt><em>boundingBox</em></dt>
<dd><p>A string indicating how the printed frames of
<em class="replaceable">target</em> should be cropped when printed, as
described earlier under <em class="filename">print( )</em>.</p></dd>

</dl>




<h4 class="refsect1">Description</h4>


<p>The<em class="filename"> printAsBitmapNum( )</em> function is nearly
identical to <em class="filename">printAsBitmap( )</em> except that it
requires the target <em class="replaceable">level</em> of the print
operation to be specified as a number rather than as a string. This
means that <em class="filename">printAsBitmapNum( )</em> can print only
document levels, not movie clips. It is normally used when we wish to
dynamically assign the level of a movie to print, as in:</p>


<blockquote><pre class="code">var x = 3;
printAsBitmapNum(x, "bmax");</pre></blockquote>


<p>which could also be achieved using string concatenation with the
regular <em class="filename">printAsBitmap( )</em> function:</p>


<blockquote><pre class="code">printAsBitmap("_level" + x, "bmax");</pre></blockquote>



<h4 class="refsect1">Usage</h4>


<p>See Usage notes under the <em class="filename">print( )</em> function.</p>



<h4 class="refsect1">See Also</h4>


<p><em class="filename">print( )</em>, <em class="filename">printAsBitmap( )</em>,
<em class="filename">printNum( )</em></p>


</div>

<a name="INDEX-3279" /><a name="INDEX-3280" /><a name="INDEX-3281" /><a name="INDEX-3282" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b><i>


printNum( ) Global Function</i></b></font></td><td align="right"><i>print the frames of a document level using vectors
</i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><table width="515" border="0" cellpadding="5"><tr><td align="left" /><td align="right" /></tr></table>
<h4 class="refsect1">Availability</h4>


<p>Flash 5</p>



<h4 class="refsect1">Synopsis</h4>

<blockquote><pre class="code">
printNum(<em>level, boundingBox</em>)</pre></blockquote>



<h4 class="refsect2">Arguments</h4>


<dl>
<dt><em>level</em></dt>
<dd><p>A non-negative integer or an expression that yields a non-negative
integer indicating the document level to print.</p></dd>

</dl>


<dl>
<dt><em>boundingBox</em></dt>
<dd><p>A string indicating how the printed frames of
<em class="replaceable">target</em> should be cropped when printed, as
described earlier under <em class="filename">print( )</em>.</p></dd>

</dl>




<h4 class="refsect1">Description</h4>


<p>The<em class="filename"> printNum( )</em> function is nearly identical to
<em class="filename">print( )</em> except that it requires the target
<em class="replaceable">level</em> of the print operation to be
specified as a number rather than as a string. This means that
<em class="filename">printNum( )</em> can print only document levels, not
movie clips. It is normally used when we wish to dynamically assign
the level of a movie to print, as in:</p>


<blockquote><pre class="code">var x = 3;
printNum(x, "bmax");</pre></blockquote>


<p>which could also be achieved using string concatenation with the
regular <em class="filename">print( )</em> function:</p>


<blockquote><pre class="code">print("_level" + x, "bmax");</pre></blockquote>



<h4 class="refsect1">Usage</h4>


<p>See Usage notes under the <em class="filename">print( )</em> function.</p>



<h4 class="refsect1">See Also</h4>


<p><em class="filename">print( )</em>, <em class="filename">printAsBitmap( )</em>,
<em class="filename">printAsBitmapNum( )</em></p>


</div>

<a name="INDEX-3283" /><a name="INDEX-3284" /><a name="INDEX-3285" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b><i>

_quality Global Property</i></b></font></td><td align="right"><i>the rendering quality of the Player
</i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><table width="515" border="0" cellpadding="5"><tr><td align="left" /><td align="right" /></tr></table>
<h4 class="refsect1">Availability</h4>


<p>Flash 5</p>



<h4 class="refsect1">Synopsis</h4>

<blockquote><pre class="code">
_quality</pre></blockquote>



<h4 class="refsect1">Access</h4>


<p>Read/write</p>



<h4 class="refsect1">Description</h4>


<p>The <tt class="literal">_quality</tt> property stores a string that
dictates the rendering quality of the Flash Player as follows:</p>


<dl>
<dt><em>"LOW"</em></dt>
<dd><p>Low quality. Neither bitmaps nor vectors are antialiased (smoothed).</p></dd>

</dl>


<dl>
<dt><em>"MEDIUM"</em></dt>
<dd><p>Medium quality. Vectors are moderately antialiased.</p></dd>

</dl>


<dl>
<dt><em>"HIGH"</em></dt>
<dd><p>High quality. Vectors are highly antialiased. Bitmaps are antialiased
when no animation is occurring.</p></dd>

</dl>


<dl>
<dt><em>"BEST"</em></dt>
<dd><p>Best quality. Both bitmaps and vectors are always antialiased.</p></dd>

</dl>


<p>Lower rendering quality means that fewer calculations are required to
draw a frame of the movie, resulting in faster performance. The
typical setting of <tt class="literal">_quality</tt> for most movies is
<tt class="literal">"HIGH"</tt>.</p>



<h4 class="refsect1">Example</h4>


<p>Here we set the rendering quality of a movie to the best it can be
(which also causes the slowest playback):</p>


<blockquote><pre class="code">_quality = "BEST";</pre></blockquote>



<h4 class="refsect1">See Also</h4>


<blockquote><pre class="code">_highQuality, toggleHighQuality( )</pre></blockquote>


</div>

<a name="INDEX-3286" /><a name="INDEX-3287" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b><i>
random( ) Global Function</i></b></font></td><td align="right"><i>generate a random number
</i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><table width="515" border="0" cellpadding="5"><tr><td align="left" /><td align="right" /></tr></table>
<h4 class="refsect1">Availability</h4>


<p>Flash 4; deprecated in Flash 5 in favor of <em class="filename">Math.random(
)</em></p>



<h4 class="refsect1">Synopsis</h4>

<blockquote><pre class="code">
random(<em>number</em>)</pre></blockquote>



<h4 class="refsect2">Arguments</h4>


<dl>
<dt><em>number</em></dt>
<dd><p>A positive integer.</p></dd>

</dl>




<h4 class="refsect2">Returns</h4>


<p>A random integer greater than or equal to
0 and less than <em class="replaceable">number</em>.</p>




<h4 class="refsect1">Description</h4>


<p>The deprecated <em class="filename">random( )</em> function was used in
Flash 4 to generate random numbers. This function has been retired
from the language and is available only for the sake of backward
compatibility. In Flash 5 and higher, use the preferred
<em class="filename">Math.random( )</em> method. Note that
<em class="filename">random( )</em> generated integers from
to <tt class="literal">number</tt> -1, whereas <em class="filename">Math.random(
)</em> generates floats from 0.0 to .999.</p>



<h4 class="refsect1">See Also</h4>


<p><em class="filename">Math.random( )</em></p>


</div>

<a name="INDEX-3288" /><a name="INDEX-3289" /><a name="INDEX-3290" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b><i>

removeMovieClip( ) Global Function</i></b></font></td><td align="right"><i>delete a movie clip from the Flash Player
</i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><table width="515" border="0" cellpadding="5"><tr><td align="left" /><td align="right" /></tr></table>
<h4 class="refsect1">Availability</h4>


<p>Flash 4; enhanced in Flash 5 to apply to instances created with
<em class="filename">attachMovie( )</em></p>



<h4 class="refsect1">Synopsis</h4>

<blockquote><pre class="code">
removeMovieClip(<em>target</em>)</pre></blockquote>



<h4 class="refsect2">Arguments</h4>


<dl>
<dt><em>target</em></dt>
<dd><p>A string or reference indicating the path to the movie clip instance
to be removed from the Player (references to movie clips are
converted to paths when used in a string context).</p></dd>

</dl>




<h4 class="refsect1">Description</h4>


<p>The <em class="filename">removeMovieClip( )</em> function deletes the
specified movie clip from the Player, leaving no trace of the
clip's contents or shell. Subsequent references to the clip or
any of its variables or properties yield
<tt class="literal">undefined</tt>.</p>


<p>The <em class="filename">removeMovieClip( )</em> function may be used only
on movie clip instances that were originally created via
<em class="filename">duplicateMovieClip( )</em> or <em class="filename">attachMovie(
)</em>. It has no effect on movie clips created in the
authoring tool.</p>



<h4 class="refsect1">See Also</h4>


<p><em class="filename">attachMovie( )</em>,<em class="filename"> duplicateMovieClip(
)</em>,<em class="filename"> MovieClip( ).removeMovieClip( )</em>;
<a href="ch13_06.htm">Section 13.6, "Removing Clip Instances and Main Movies"</a> in <a href="ch13_01.htm">Chapter 13, "Movie Clips"</a></p>


</div>

<a name="INDEX-3291" /><a name="INDEX-3292" /><a name="INDEX-3293" /><a name="INDEX-3294" /><a name="INDEX-3295" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b><i>_root Global 


Property</i></b></font></td><td align="right"><i>a reference to the main timeline of the movie in the current level 
</i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><table width="515" border="0" cellpadding="5"><tr><td align="left" /><td align="right" /></tr></table>
<h4 class="refsect1">Availability</h4>


<p>Flash 5 (same as <tt class="literal">"/"</tt> in Flash 4 movies)</p>



<h4 class="refsect1">Synopsis</h4>

<blockquote><pre class="code">
_root</pre></blockquote>



<h4 class="refsect1">Access</h4>


<p>Read-only</p>



<h4 class="refsect1">Description</h4>


<p>The <tt class="literal">_root</tt> property stores a reference to the main
timeline of the current document level. We use
<tt class="literal">_root</tt> to invoke methods on the main movie or to
retrieve and set the main movie's properties. For example:</p>


<blockquote><pre class="code">_root.play( );       // Play the main timeline
_root._alpha = 40;  // Make the whole movie partially transparent</pre></blockquote>


<p>The <tt class="literal">_root</tt> property may also be used to refer to
nested clips. For example:</p>


<blockquote><pre class="code">_root.myClip.play( );
_root.shapes.square._visible = false;</pre></blockquote>


<p>The <tt class="literal">_root</tt> property provides access to a movie clip
in absolute terms. That is, a reference that starts with
<tt class="literal">_root</tt> is valid (and invariant) from anywhere in a
movie.</p>



<h4 class="refsect1">See Also</h4>


<p><tt class="literal">_level</tt><em class="emphasis">n</em>; <tt class="literal">_ parent;
</tt><a href="ch13_05.htm">Section 13.5.4, "Referring to Main Movies with _root and _leveln"</a> in <a href="ch13_01.htm">Chapter 13, "Movie Clips"</a> and <a href="ch02_05.htm">Section 2.5.6, "Accessing Variables on Different Timelines"</a> in
<a href="ch02_01.htm">Chapter 2, "Variables"</a></p>


</div>

<a name="INDEX-3296" /><a name="INDEX-3297" /><a name="INDEX-3298" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b><i>
scroll Property</i></b></font></td><td align="right"><i>the current top line displayed in a text field
</i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><table width="515" border="0" cellpadding="5"><tr><td align="left" /><td align="right" /></tr></table>
<h4 class="refsect1">Availability</h4>


<p>Flash 4 and later</p>



<h4 class="refsect1">Synopsis</h4>

<blockquote><pre class="code">
textfield.scroll</pre></blockquote>



<h4 class="refsect2">Returns</h4>


<p>A positive integer representing the number of the topmost viewable
line of a text field.</p>




<h4 class="refsect1">Description</h4>


<p>The <tt class="literal">scroll</tt> text field property can be both
retrieved and set. When we retrieve the value of a text field's
<tt class="literal">scroll</tt> property, it indicates the number of the
line currently displayed as the first line in the field's
viewable region. When we set the value of <tt class="literal">scroll</tt>,
it scrolls the text field, making the supplied line number the top
line in the field's viewable region. The
<tt class="literal">scroll</tt> property is normally used with
<tt class="literal">maxscroll</tt> to create text-scrolling interfaces as
described under <a href="ch18_04.htm">Section 18.4.3, "Typical Text-Scrolling Code"</a> in <a href="ch18_01.htm">Chapter 18, "On-Screen Text Fields"</a>.</p>



<h4 class="refsect1">Usage</h4>


<p>Though <tt class="literal">scroll</tt> is listed as a function in Flash, it
is effectively used as a property of a text field variable. Notice
that parentheses are not used when <tt class="literal">scroll</tt> is
invoked.</p>



<h4 class="refsect1">Bugs</h4>


<p>In Build 5.0 r30 of the Flash Player, when a text field's font
is embedded, using <tt class="literal">scroll</tt> may cause some text to
be displayed outside the visual region of the field. Some text may
not be removed as the text in the field scrolls. To work around the
problem, use a mask over the text field layer. This problem was fixed
in Build 5.0 r41.</p>



<h4 class="refsect1">Example</h4>


<blockquote><pre class="code">// Sets x to the index of the top line displayed in myField
var x = myField.scroll;
// Scrolls the text in myField down one
myField.scroll++;</pre></blockquote>



<h4 class="refsect1">See Also</h4>


<p><tt class="literal">maxscroll</tt>; <a href="ch18_04.htm">Section 18.4.1, "The scroll Property"</a> in
<a href="ch18_01.htm">Chapter 18, "On-Screen Text Fields"</a></p>


</div>

<a name="INDEX-3299" /><a name="INDEX-3300" /><a name="INDEX-3301" /><a name="INDEX-3302" /><a name="INDEX-3303" /><a name="INDEX-3304" /><a name="INDEX-3305" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b><i>
Selection Object</i></b></font></td><td align="right"><i>control over text field selections
</i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><table width="515" border="0" cellpadding="5"><tr><td align="left" /><td align="right" /></tr></table>
<h4 class="refsect1">Availability</h4>


<p>Flash 5</p>



<h4 class="refsect1">Synopsis</h4>

<blockquote><pre class="code">
Selection.methodName()</pre></blockquote>



<h4 class="refsect1">Methods</h4>


<dl>
<dt><b><a name="INDEX-3301" />
<a name="INDEX-3302" />getBeginIndex<em class="filename">( )</em></b></dt>
<dd><p>Retrieve the index of the first selected character.</p></dd>

</dl>


<dl>
<dt><em>getCaretIndex<em class="filename">( )</em></em></dt>
<dd><p>Retrieve the index of the insertion point.</p></dd>

</dl>


<dl>
<dt><em>getEndIndex<em class="filename">( )</em></em></dt>
<dd><p>Retrieve the index of the last selected character.</p></dd>

</dl>


<dl>
<dt><em>getFocus<em class="filename">( )</em></em></dt>
<dd><p>Identify the text field in which the insertion point currently
resides.</p></dd>

</dl>


<dl>
<dt><em>setFocus<em class="filename">( )</em></em></dt>
<dd><p>Place the insertion point in a specific text field.</p></dd>

</dl>


<dl>
<dt><em>setSelection<em class="filename">( )</em></em></dt>
<dd><p>Select characters in the currently focused text field.</p></dd>

</dl>



<h4 class="refsect1">Description</h4>


<p>We <a name="INDEX-3303" />use the <em class="filename">Selection</em>
object to control user interaction with text fields and to capture
portions of text fields. In actual use, the
<em class="emphasis">Selection</em> object methods are preceded by the
keyword <tt class="literal">Selection</tt>; they always operate on the text
field with focus, of which there can be only one at any given time.
The methods of a <em class="filename">Selection</em> object can position
the insertion point and can select or retrieve a text field's
content. These abilities add subtle but important behavior to
user-input systems. For example, in a user-login screen, we can
prompt a user to enter his name by placing the cursor in a name-entry
text field. Or we can highlight an error in a form by selecting the
problematic text. We can also customize the so-called <em class="emphasis">Tab
order</em><a name="INDEX-3304" /> <a name="INDEX-3305" /> of a series of text fields, as
shown under <a href="ch20_05.htm">Reference 20.205</a>.</p>


<p>Positions of the characters in a text field are referred to with
zero-relative indexes where the first character is index 0, the
second is index 1, and so on. Character indexing is described in
detail in <a href="ch04_06.htm">Section 4.6.4, "Character Indexing"</a> in <a href="ch04_01.htm">Chapter 4, "Primitive Datatypes"</a>.</p>


<p>In Flash 5 it is not possible to cut, copy, or paste text
programmatically. Further, cut, copy, and paste shortcut keys such as
Ctrl-C and Ctrl-V are not functional in the Flash Player. The
secondary mouse button (right-click on Windows, Ctrl-click on
Macintosh) provides access to the cut, copy, and paste commands.</p>



<h4 class="refsect1">Usage</h4>


<p>Clicking a form's submit button automatically removes focus
from any previously focused text field. To capture a selection before
focus is lost, use the button's rollover event. For example:</p>


<blockquote><pre class="code">on (rollOver) {
  focusedField = Selection.getFocus();
}</pre></blockquote>



<h4 class="refsect1">See Also</h4>


<p><tt class="literal">_focusrect</tt>, <em class="filename">Selection.setFocus(
)</em>; <a href="ch18_01.htm">Chapter 18, "On-Screen Text Fields"</a></p>


</div>

<a name="INDEX-3306" /><a name="INDEX-3307" /><a name="INDEX-3308" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b><i>

Selection.getBeginIndex( ) Method</i></b></font></td><td align="right"><i>retrieve the index of a text field's first selected character
</i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><table width="515" border="0" cellpadding="5"><tr><td align="left" /><td align="right" /></tr></table>
<h4 class="refsect1">Availability</h4>


<p>Flash 5</p>



<h4 class="refsect1">Synopsis</h4>

<blockquote><pre class="code">
Selection.getBeginIndex()</pre></blockquote>



<h4 class="refsect2">Returns</h4>


<p>The index of the first character in the current selection
(highlighted block of text). If no text field has keyboard focus, it
returns -1. If a text field has focus but no characters are selected,
it returns the value of <em class="filename">Selection.getCaretIndex(
)</em>.</p>




<h4 class="refsect1">Description</h4>


<p>The <em class="filename">getBeginIndex( )</em> method identifies the
beginning of a selection. To determine the span of characters
currently selected, use both <em class="filename">getBeginIndex( )</em>
and <em class="filename">getEndIndex( )</em>.</p>



<h4 class="refsect1">Example</h4>


<p>The following example creates a string representing the currently
selected characters and then displays that string in the Output
window:</p>


<blockquote><pre class="code">var firstChar = Selection.getBeginIndex( );
var lastChar  = Selection.getEndIndex( );
var currentSelection = eval(Selection.getFocus( )).substring(firstChar, lastChar);

trace(currentSelection);</pre></blockquote>


<p>The following code extends the current selection by one character to
the left:</p>


<blockquote><pre class="code">Selection.setSelection(Selection.getBeginIndex() - 1, Selection.getEndIndex( ));</pre></blockquote>



<h4 class="refsect1">See Also</h4>


<p><em class="filename">Selection.getCaretIndex( )</em>,<em class="filename">
Selection.getEndIndex( )</em></p>


</div>

<a name="INDEX-3309" /><a name="INDEX-3310" /><a name="INDEX-3311" /><a name="INDEX-3312" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b><i>


Selection.getCaretIndex( ) Method</i></b></font></td><td align="right"><i>retrieve the index of the insertion point
</i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><table width="515" border="0" cellpadding="5"><tr><td align="left" /><td align="right" /></tr></table>
<h4 class="refsect1">Availability</h4>


<p>Flash 5</p>



<h4 class="refsect1">Synopsis</h4>

<blockquote><pre class="code">
Selection.getCaretIndex()</pre></blockquote>



<h4 class="refsect2">Returns</h4>


<p>The index of the insertion point in the current text field. If no
text field has keyboard focus, it returns -1. If the text field with
focus is empty, it returns 0.</p>




<h4 class="refsect1">Description</h4>


<p>The <em class="filename">getCaretIndex( )</em> method indicates the
insertion point (i.e., the location of the cursor) in a text field.
The cursor appears as an I-beam when a text field has keyboard focus.
Use <em class="filename">setSelection( )</em> to set the location of the
insertion point.</p>



<h4 class="refsect1">Example</h4>


<p>Because <em class="filename">getCaretIndex( )</em> returns -1 when no text
field has focus, we may determine whether any field has focus by
checking whether <em class="filename">getCaretIndex( )</em> is equal to
-1, as follows:</p>


<blockquote><pre class="code">if (Selection.getCaretIndex( ) == -1) {
  trace("No field has focus");
}</pre></blockquote>



<h4 class="refsect1">See Also</h4>


<p><em class="filename">Selection.setSelection( )</em></p>


</div>

<a name="INDEX-3313" /><a name="INDEX-3314" /><a name="INDEX-3315" /><a name="INDEX-3316" /><a name="INDEX-3317" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b><i>

Selection.getEndIndex( ) Method</i></b></font></td><td align="right"><i>retrieve the index of the last selected character
</i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><table width="515" border="0" cellpadding="5"><tr><td align="left" /><td align="right" /></tr></table>
<h4 class="refsect1">Availability</h4>


<p>Flash 5</p>



<h4 class="refsect1">Synopsis</h4>

<blockquote><pre class="code">
Selection.getEndIndex()</pre></blockquote>



<h4 class="refsect2">Returns</h4>


<p>The index of the character after the last character in the current
selection (highlighted block of text). If no text field has focus, it
returns -1. If a text field has focus but no characters are selected,
it returns the value of <em class="filename">Selection.getCaretIndex(
)</em>.</p>




<h4 class="refsect1">Description</h4>


<p>The <em class="filename">getEndIndex( )</em> method identifies the end of
a selection. To identify the span of characters currently selected,
use both <em class="filename">getEndIndex( )</em> and
<em class="filename">getBeginIndex( )</em>.</p>



<h4 class="refsect1">Example</h4>


<p>The following code extends the current selection by one character to
the right:</p>


<blockquote><pre class="code">Selection.setSelection(Selection.getBeginIndex(), Selection.getEndIndex( )+ 1);</pre></blockquote>



<h4 class="refsect1">See Also</h4>


<p><em class="filename">Selection.getBeginIndex( )</em>,
<em class="filename">Selection.getCaretIndex( )</em><a name="INDEX-3316" /> <a name="INDEX-3317" /></p>


</div>

<a name="INDEX-3318" /><a name="INDEX-3319" /><a name="INDEX-3320" /><a name="INDEX-3321" /><a name="INDEX-3322" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b><i>


Selection.getFocus( ) Method</i></b></font></td><td align="right"><i>identify the text field in which the cursor currently resides
</i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><table width="515" border="0" cellpadding="5"><tr><td align="left" /><td align="right" /></tr></table>
<h4 class="refsect1">Availability</h4>


<p>Flash 5</p>



<h4 class="refsect1">Synopsis</h4>

<blockquote><pre class="code">
Selection.getFocus()</pre></blockquote>



<h4 class="refsect2">Returns</h4>


<p>A <a name="INDEX-3322" />string indicating the full path to the
text field variable that has keyboard focus (i.e., the one in which
the cursor currently resides), for example,
<tt class="literal">"_level1.myTextField"</tt>. If no text field has
keyboard focus, it returns <tt class="literal">null</tt>.</p>




<h4 class="refsect1">Description</h4>


<p>The <em class="filename">getFocus( )</em> method identifies which text
field currently has focus (if any) by returning its string path. To
turn that string into a variable reference, we use <em class="filename">eval(
)</em>. For example, in the following code we identify the
number of characters in the text field with focus. We retrieve the
name of the field by invoking <em class="filename">getFocus( )</em>, and
we convert that name into a variable with <em class="filename">eval(
)</em> :</p>


<blockquote><pre class="code">var numChars = eval(Selection.getFocus( )).length;</pre></blockquote>



<h4 class="refsect1">Example</h4>


<p>Because <em class="filename">getFocus( )</em> returns
<tt class="literal">null</tt> when no text field is selected, we may
determine whether any field has focus by checking whether
<em class="filename">getFocus( )</em> is equal to <tt class="literal">null</tt>,
as follows:</p>


<blockquote><pre class="code">if (Selection.getFocus( ) == null) {
  trace("No field has focus");
}</pre></blockquote>



<h4 class="refsect1">See Also</h4>


<p><em class="filename">Selection.setFocus( )</em>, <em class="filename">eval(
)</em>, <em class="filename">Selection.getCaretIndex( )</em></p>


</div>

<a name="INDEX-3323" /><a name="INDEX-3324" /><a name="INDEX-3325" /><a name="INDEX-3326" /><a name="INDEX-3327" /><a name="INDEX-3328" /><a name="INDEX-3329" /><a name="INDEX-3330" /><a name="INDEX-3331" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b><i>


Selection.setFocus( ) Method</i></b></font></td><td align="right"><i>set keyboard focus for a specific text field
</i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><table width="515" border="0" cellpadding="5"><tr><td align="left" /><td align="right" /></tr></table>
<h4 class="refsect1">Availability</h4>


<p>Flash 5</p>



<h4 class="refsect1">Synopsis</h4>

<blockquote><pre class="code">
Selection.setFocus(<em>variableName</em>)</pre></blockquote>



<h4 class="refsect2">Arguments</h4>


<dl>
<dt><em>variableName</em></dt>
<dd><p>A string representing the path (e.g.,
<tt class="literal">"_root.myTextField"</tt> or
<tt class="literal">"userName"</tt>) to the text field variable that is to
receive focus.</p></dd>

</dl>




<h4 class="refsect2">Returns</h4>


<p>A Boolean indicating whether the focus attempt succeeded
(<tt class="literal">true</tt>) or failed (<tt class="literal">false</tt>). A
focus attempt fails only if the variable specified by
<em class="replaceable">variableName</em> is not found or if it is not
a text field variable.</p>




<h4 class="refsect1">Description</h4>


<p>The <em class="filename">setFocus( )</em> method sets the keyboard focus
for a text field. It places the cursor in that text field, normally
in order to draw attention to the field or to allow the user to enter
data. The <em class="filename">setFocus( )</em> method can also provide a
handy means of identifying erroneous input to a user. In an online
form, for example, a user may mistype an email address. To alert the
user to the error, we could set the focus to the email-address text
field and ask her to fix the problem. We can also use
<em class="filename">setFocus( )</em> to create a custom Tab key order for
the fields in a form, as shown in the example that follows.</p>



<h4 class="refsect1">Usage</h4>


<p>Note that setting the focus of a text field automatically selects any
content in that field. To set a field's focus without selecting
any characters, use the following code:</p>


<blockquote><pre class="code">// First, focus myField
Selection.setFocus("myField");

// Now place the insertion point at the start of myField
Selection.setSelection(0, 0);

// Or at the end of myField
Selection.setSelection(myField.length, myField.length);</pre></blockquote>




<a name="ch20-1371-fm2xml" /><blockquote><h4>TIP</h4>
<p>When a movie is viewed in a browser, a focused text field will accept
text entry only if the Flash movie itself has focus (that is, the
user has clicked on the movie at some point during movie playback).
Make sure a movie has focus before asking a user to type into one of
its text fields. One way to do this is by including a button that
says "Click Here to Start" at the beginning of your
movie.</p>

</blockquote>


<h4 class="refsect1">Example</h4>


<p>This <a name="INDEX-3327" />example
shows how to assign a custom Tab order to the fields in a fill-in
form. The corresponding sample <em class="filename">.fla</em> file may be
downloaded from the online Code Depot (for more information on
trapping the Tab key, see <a href="ch10_11.htm">Section 10.11.4.1, "Handling special keys"</a> in
<a href="ch10_01.htm">Chapter 10, "Events and Event Handlers"</a>):</p>


<blockquote><pre class="code">// Custom Tab Order<tt class="userinput"><b>
// CODE ON THE MOVIE CLIP CONTAINING THE FORM FIELDS</b></tt>
onClipEvent (load) {
  // Store the path to this clip in a string. We'll use it
  // later when invoking Selection.setFocus( ). 
  path = targetPath(this);
  // Create an array with the names of our text fields, supplied
  // in the desired Tab order. The first field listed is the default.
  tabOrder = ["field1", "field3", "field2", "field4"];
}

onClipEvent (keyUp) {
  // If the Tab key was pressed...
  if (Key.getCode( ) == Key.TAB) {
    // ...If no field has focus...
    if (Selection.getFocus( ) == null) {
      // ...then set focus to the first field in the array of fields
      Selection.setFocus(path + "." + tabOrder[0]);
    } else {
      // Otherwise, locate the currently focused field in the array of fields
      i = 0;
      focused = Selection.getFocus( );
      while (i &lt; tabOrder.length) {
        // Extract the name of the field variable from the full path
        // that's returned by Selection.getFocus( )
        fieldName = focused.substring(focused.lastIndexOf(".") + 1);
        // Check each element of tabOrder for the focused field.
        if (tabOrder[i] == fieldName) {
          // Stop when we find a match
          currentFocus = i;
          break;
        }
        i++;
      }
      // Now that we know where the focused field lies in the <em class="replaceable">tabOrder</em> array,
      // set the new focus to either the next field or the previous field,
      // depending on whether the Shift key is down.
      if (Key.isDown(Key.SHIFT)) {
        // Shift key is down, so go to the previous field, unless we're already
        // at the beginning, in which case go to the last field.
        nextFocus = currentFocus-1 == -1 ? tabOrder.length-1 : currentFocus-1;
      } else {
        // Shift key is not down, so go to the next field, 
        // unless we're already at the end, in which case go to the first field.
        nextFocus = currentFocus+1 == tabOrder.length ? 0 : currentFocus+1;
      }
      // Finally, assign the new focus
      Selection.setFocus(path + "." + tabOrder[nextFocus]);
    }
  }
}
<tt class="userinput"><b>
// CODE ON BUTTON ON MAIN TIMELINE</b></tt>
on (keyPress "&lt;Tab&gt;") {
  // This placeholder code just traps the Tab key in Internet Explorer
  var tabCatcher = 0;
}</pre></blockquote>



<h4 class="refsect1">See Also</h4>


<p><a name="INDEX-3328" />
<a name="INDEX-3329" />
<a name="INDEX-3330" />
<a name="INDEX-3331" /><em class="filename">Selection.getFocus(
)</em>, <em class="filename">Selection.setSelection( )</em></p>


</div>

<a name="INDEX-3332" /><a name="INDEX-3333" /><a name="INDEX-3334" /><a name="INDEX-3335" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b><i>


Selection.setSelection( ) Method</i></b></font></td><td align="right"><i>select characters in the text field with focus, or set the insertion point
</i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><table width="515" border="0" cellpadding="5"><tr><td align="left" /><td align="right" /></tr></table>
<h4 class="refsect1">Availability</h4>


<p>Flash 5</p>



<h4 class="refsect1">Synopsis</h4>

<blockquote><pre class="code">
Selection.setSelection(<em>beginIndex, endIndex</em>)</pre></blockquote>



<h4 class="refsect2">Arguments</h4>


<dl>
<dt><em>beginIndex</em></dt>
<dd><p>A non-negative integer specifying the index of the first character to
be included in the new selection.</p></dd>

</dl>


<dl>
<dt><em>endIndex</em></dt>
<dd><p>A non-negative integer specifying the index of the character
<em class="emphasis">after</em> the last character to be included in the
new selection.</p></dd>

</dl>




<h4 class="refsect1">Description</h4>


<p>The <em class="filename">setSelection( )</em> method selects (highlights)
the characters from <em class="replaceable">beginIndex</em> to
<em class="replaceable">endIndex-</em><tt class="literal">1</tt> in the text
field with focus. If no field has focus, <em class="filename">setSelection(
)</em> has no effect. It is commonly used to highlight
problematic user input.</p>



<h4 class="refsect1">Usage</h4>


<p>Though the <em class="filename">Selection</em> object does not have a
<em class="filename">"setCaretIndex"</em> method, we may use
the <em class="filename">setSelection( )</em> method to set the insertion
point to a specific location within a text field. To do so, we
specify the same <em class="replaceable">beginIndex</em> and
<em class="replaceable">endIndex</em> values, as in:</p>


<blockquote><pre class="code">// Set the insertion point after the third character
Selection.setSelection(3, 3);</pre></blockquote>



<h4 class="refsect1">Example</h4>


<blockquote><pre class="code">// Select the second and third letters
// of the currently focused text field
Selection.setSelection(1, 3);</pre></blockquote>



<h4 class="refsect1">See Also</h4>


<p><em class="filename">Selection.getBeginIndex( )</em>,<em class="filename">
Selection.getCaretIndex( )</em>,
<em class="filename">Selection.getEndIndex( )</em></p>


</div>

<a name="INDEX-3336" /><a name="INDEX-3337" /><a name="INDEX-3338" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b><i>

setProperty( ) Global Function</i></b></font></td><td align="right"><i>assign a value to a movie clip property
</i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><table width="515" border="0" cellpadding="5"><tr><td align="left" /><td align="right" /></tr></table>
<h4 class="refsect1">Availability</h4>


<p>Flash 4 and later</p>



<h4 class="refsect1">Synopsis</h4>

<blockquote><pre class="code">
setProperty(<em>movieClip, property, value</em>)</pre></blockquote>



<h4 class="refsect2">Arguments</h4>


<dl>
<dt><em>movieClip</em></dt>
<dd><p>An expression that yields a string indicating the path to a movie
clip. In Flash 5, this may also be a movie clip reference because
movie clip references are converted to paths when used in a string
context.</p></dd>

</dl>


<dl>
<dt><em>property</em></dt>
<dd><p>The name of the built-in property to which
<em class="replaceable">value</em> will be assigned. Must be an
identifier, not a string (e.g., <tt class="literal">_alpha</tt>, not
<tt class="literal">"_alpha"</tt>).</p></dd>

</dl>


<dl>
<dt><em>value</em></dt>
<dd><p>The new data value to be assigned to the specified
<em class="replaceable">property</em> of
<em class="replaceable">movieClip</em>.</p></dd>

</dl>




<h4 class="refsect1">Description</h4>


<p>The <em class="filename">setProperty( )</em> function assigns
<em class="replaceable">value</em> to one of
<em class="replaceable">movieClip's</em> built-in properties (the
built-in properties are listed under the
<em class="filename">MovieClip</em> class<em class="filename"> </em>). It
cannot be used to set the value of custom (i.e., user-defined)
properties. In Flash 4, <em class="filename">setProperty( )</em> was the
only means to assign movie clip property values; as of Flash 5, the
<tt class="literal">.</tt> and <tt class="literal">[]</tt> operators are the
preferred means of setting both built-in and custom movie clip
properties.</p>



<h4 class="refsect1">Example</h4>


<blockquote><pre class="code">// Flash 4 syntax. Rotate the main movie by 45 degrees:
setProperty("_root", _rotation, 45);

// Flash 5 syntax. Also rotates the main movie by 45 degrees:
_root._rotation = 45;</pre></blockquote>



<h4 class="refsect1">See Also</h4>


<p><em class="filename">getProperty( ); </em><a href="ch13_01.htm">Section 13.1, "The "Objectness" of Movie Clips"</a> in
<a href="ch13_01.htm">Chapter 13, "Movie Clips"</a>; <a href="appc_01.htm">Appendix C, "Backward Compatibility"</a>.</p>


</div>

<a name="INDEX-3339" /><a name="INDEX-3340" /><a name="INDEX-3341" /><a name="INDEX-3342" /><a name="INDEX-3343" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b><i>Sound 

Class</i></b></font></td><td align="right"><i>control over sounds in a movie
</i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><table width="515" border="0" cellpadding="5"><tr><td align="left" /><td align="right" /></tr></table>
<h4 class="refsect1">Availability</h4>


<p>Flash 5</p>



<h4 class="refsect1">Constructor</h4>

<blockquote><pre class="code">
new Sound()
new Sound(<em>target</em>)</pre></blockquote>



<h4 class="refsect2">Arguments</h4>


<dl>
<dt><em>target</em></dt>
<dd><p>A string indicating the path to the movie clip or document level
whose sound is to be controlled. May also be a reference to a movie
clip or document level (references are converted to paths when used
in a string context).</p></dd>

</dl>




<h4 class="refsect1">Methods</h4>


<dl>
<dt><em>attachSound<em class="filename">( )</em></em></dt>
<dd><p>Associate a sound from the Library with the
<em class="filename">Sound</em> object.</p></dd>

</dl>


<dl>
<dt><em>getPan<em class="filename">( )</em></em></dt>
<dd><p>Retrieve the current pan setting.</p></dd>

</dl>


<dl>
<dt><em>getTransform<em class="filename">( )</em></em></dt>
<dd><p>Determine the current distribution of the channels of a sound to the
left and right speakers (i.e., balance).</p></dd>

</dl>


<dl>
<dt><em>getVolume<em class="filename">( )</em></em></dt>
<dd><p>Retrieve the current volume.</p></dd>

</dl>


<dl>
<dt><em>setPan<em class="filename">( )</em></em></dt>
<dd><p>Set the pan across a sound's left and right channels.</p></dd>

</dl>


<dl>
<dt><em>setTransform<em class="filename">( )</em></em></dt>
<dd><p>Distribute the left and right channels between the left and right
speakers (i.e., balance).</p></dd>

</dl>


<dl>
<dt><em>setVolume<em class="filename">( )</em></em></dt>
<dd><p>Set the sound volume.</p></dd>

</dl>


<dl>
<dt><em>start<em class="filename">( )</em></em></dt>
<dd><p>Start playing an attached sound.</p></dd>

</dl>


<dl>
<dt><em>stop<em class="filename">( )</em></em></dt>
<dd><p>Silence all sounds or a specified attached sound.</p></dd>

</dl>



<h4 class="refsect1">Description</h4>


<p>Objects of the <em class="filename">Sound</em> class are used to control
the existing sounds in a movie or to control sounds added to a movie
programmatically. <em class="filename">Sound</em> objects have several
distinct applications. They can control:</p>


<ul><li><p>All the sounds in the Flash Player</p></li></ul>
<ul><li><p>All the sounds in a particular movie clip instance or main movie
(including all sounds in any nested clips)</p></li></ul>
<ul><li><p>An individual programmatically attached sound</p></li></ul>
<p>To create a <em class="filename">Sound</em><a name="INDEX-3343" /> object
that controls all the sounds in the Player (including sounds in
<em class="filename">.swf</em> files on document levels), use the
<em class="filename">Sound</em> constructor without any parameters. For
example:</p>


<blockquote><pre class="code">myGlobalSound = new Sound( );</pre></blockquote>


<p>To create a <em class="filename">Sound</em> object that controls all the
sounds in a particular clip or main movie, supply a
<em class="replaceable">target</em> parameter indicating the clip or
movie to control. Note that this also controls sounds in clips inside
<em class="replaceable">target</em>. For example:</p>


<blockquote><pre class="code">spaceshipSound = new Sound("spaceship");  // Control sounds in spaceship clip
mainSound      = new Sound("_root");      // Control sounds on main timeline</pre></blockquote>


<p>To make an individual sound that can be started, stopped, and looped
independently, create any kind of <em class="filename">Sound</em> object
and then attach a sound to it using the <em class="filename">attachSound(
)</em> method.</p>



<h4 class="refsect1">See Also</h4>


<p><em class="filename">stopAllSounds( )</em>;
<tt class="literal">_soundbuftime</tt></p>


</div>

<a name="INDEX-3344" /><a name="INDEX-3345" /><a name="INDEX-3346" /><a name="INDEX-3347" /><a name="INDEX-3348" /><a name="INDEX-3349" /><a name="INDEX-3350" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b><i>



Sound.attachSound( ) Method</i></b></font></td><td align="right"><i>associate a sound from the Library with a Sound object
</i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><table width="515" border="0" cellpadding="5"><tr><td align="left" /><td align="right" /></tr></table>
<h4 class="refsect1">Availability</h4>


<p>Flash 5</p>



<h4 class="refsect1">Synopsis</h4>

<blockquote><pre class="code">
soundObject.attachSound(<em>linkageIdentifier</em>)</pre></blockquote>



<h4 class="refsect2">Arguments</h4>


<dl>
<dt><em>linkageIdentifier</em></dt>
<dd><p>The name of the sound to attach, as specified in the Library under
Options <img align="absmiddle" src="figs/U2192.gif" /> Linkage.</p></dd>

</dl>




<h4 class="refsect1">Description</h4>


<p>The <em class="filename">attachSound( )</em> method adds a new sound to a
movie at runtime and places the new sound under
<em class="replaceable">soundObject</em>'s control. Once
attached, the sound may be started and stopped individually by
invoking <em class="filename">start( )</em> and <em class="filename">stop(
)</em> on <em class="replaceable">soundObject</em>.</p>


<p><a name="INDEX-3349" />
<a name="INDEX-3350" />In
order for a sound to be attached to
<em class="replaceable">soundObject</em>, the sound must be exported
from the movie's Library. To export a sound, follow these
steps:</p>


<ol><li><p>In the Library, select the sound to export.</p></li>
<li><p>Select Options <img align="absmiddle" src="figs/U2192.gif" /> Linkage. The Symbol Linkage Properties dialog
box appears.</p></li><li><p>Select Export This Symbol.</p></li><li><p>In the Identifier box, type a unique name by which to identify the
sound.</p></li></ol>
<p>Note that <em class="emphasis">all</em> exported sounds are loaded in the
first frame of the movie that contains them (not when they are
actually attached or played via ActionScript), which can cause long
load delays if the sounds are large. You can gain better control over
the loading of sounds by placing them in external
<em class="filename">.swf</em> files and using <em class="filename">loadMovie(
)</em> to import them as necessary.</p>



<h4 class="refsect1">Usage</h4>


<p>Only one sound may be attached to a <em class="filename">Sound</em> object
at a time. Attaching a new sound to a <em class="filename">Sound</em>
object replaces any sound previously attached to that object. Note
that <em class="filename">attachSound( )</em> will not work in movies
loaded into a clip or a level via <em class="filename">loadMovie( )</em>
unless the attached sound is available in the Library of the document
to which the Sound object is scoped. Global sound objects created
without a target parameter are scoped to <tt class="literal">_level0</tt>.</p>



<h4 class="refsect1">Example</h4>


<p>The following example adds a sound with the identifier
<tt class="literal">phaser</tt> to the <em class="filename">Sound</em> object
<em class="replaceable">phaserSound </em>. It then starts and stops the
<tt class="literal">phaser</tt> sound:</p>


<blockquote><pre class="code">phaserSound = new Sound( );
phaserSound.attachSound("phaser");

// Start the phaser sound
phaserSound.start( );

// Stop just the phaser sound
phaserSound.stop("phaser");</pre></blockquote>



<h4 class="refsect1">See Also</h4>


<p><em class="filename">Sound.start( )</em>,<em class="filename"> Sound.stop(
)</em></p>


</div>

<a name="INDEX-3351" /><a name="INDEX-3352" /><a name="INDEX-3353" /><a name="INDEX-3354" /><a name="INDEX-3355" /><a name="INDEX-3356" /><a name="INDEX-3357" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b><i>



Sound.getPan( ) 
Method</i></b></font></td><td align="right"><i>retrieve the last pan value set
</i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><table width="515" border="0" cellpadding="5"><tr><td align="left" /><td align="right" /></tr></table>
<h4 class="refsect1">Availability</h4>


<p>Flash 5</p>



<h4 class="refsect1">Synopsis</h4>

<blockquote><pre class="code">
soundObject.getPan()</pre></blockquote>



<h4 class="refsect2">Returns</h4>


<p>A number indicating the last value set by <em class="filename">setPan(
)</em>. Usually in the range -100 (left channel on, right
channel off) to 100 (right channel on, left channel off). Default
value is
(both left and right channels in equal proportions).</p>




<h4 class="refsect1">Description</h4>


<p>By adjusting the pan of a sound, you can create the illusion of a
moving sound source. The <em class="filename">getPan( )</em> method is
used to determine the current distribution of the left and right
channels of the sounds controlled by
<em class="replaceable">soundObject</em>. Normally, <em class="filename">getPan(
)</em> is used in combination with <em class="filename">setPan(
)</em> to adjust the current pan of a sound.</p>



<h4 class="refsect1">Example</h4>


<p>Here we alter the pan of a sound by 20:</p>


<blockquote><pre class="code">mySound = new Sound( );
mySound.setPan(mySound.getPan( ) - 20);</pre></blockquote>



<h4 class="refsect1">See Also</h4>


<p><em class="filename">Sound.getTransform( )</em>, <em class="filename">Sound.setPan( )
</em></p>


</div>

<a name="INDEX-3358" /><a name="INDEX-3359" /><a name="INDEX-3360" /><a name="INDEX-3361" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b><i>


Sound.getTransform( ) Method</i></b></font></td><td align="right"><i>determine the current distribution of the channels of a sound to the left and right speakers
</i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><table width="515" border="0" cellpadding="5"><tr><td align="left" /><td align="right" /></tr></table>
<h4 class="refsect1">Availability</h4>


<p>Flash 5</p>



<h4 class="refsect1">Synopsis</h4>

<blockquote><pre class="code">
soundObject.getTransform()</pre></blockquote>



<h4 class="refsect2">Returns</h4>


<p>An anonymous object whose properties contain the channel percentage
values for the sounds controlled by
<em class="replaceable">soundObject</em>.</p>




<h4 class="refsect1">Description</h4>


<p>The <em class="filename">getTransform( )</em> method returns an object
with properties that tell us how the channels in the sounds
controlled by <em class="replaceable">soundObject</em> are distributed
to the left and right speakers. The properties of the returned object
are <tt class="literal">ll</tt>, <tt class="literal">lr</tt>,
<tt class="literal">rl</tt>, and <tt class="literal">rr</tt>, as described in the
entry for the <em class="filename">Sound.setTransform( )</em> method.</p>



<h4 class="refsect1">See Also</h4>


<p><em class="filename">Sound.getPan( )</em>, <em class="filename">Sound.setTransform(
)</em></p>


</div>

<a name="INDEX-3362" /><a name="INDEX-3363" /><a name="INDEX-3364" /><a name="INDEX-3365" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b><i>


Sound.getVolume( ) Method</i></b></font></td><td align="right"><i>retrieve the current volume setting
</i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><table width="515" border="0" cellpadding="5"><tr><td align="left" /><td align="right" /></tr></table>
<h4 class="refsect1">Availability</h4>


<p>Flash 5</p>



<h4 class="refsect1">Synopsis</h4>

<blockquote><pre class="code">
soundObject.getVolume()</pre></blockquote>



<h4 class="refsect2">Returns</h4>


<p>A number indicating the current volume as set by <em class="filename">setVolume(
)</em>. Usually in the range
(no volume) to 100 (default volume), but it can be higher.</p>




<h4 class="refsect1">Description</h4>


<p>The <em class="filename">getVolume( )</em> method is used to determine the
current volume of the sounds controlled by
<em class="replaceable">soundObject</em>. Normally,
<em class="filename">getVolume( )</em> is used in combination with
<em class="filename">setVolume( )</em> to adjust the current volume of a
sound.</p>



<h4 class="refsect1">Example</h4>


<p>Here we reduce the volume of a sound by 20:</p>


<blockquote><pre class="code">mySound = new Sound( );
mySound.setVolume(mySound.getVolume( ) - 20);</pre></blockquote>



<h4 class="refsect1">See Also</h4>


<p><em class="filename">Sound.setVolume( )</em></p>


</div>

<a name="INDEX-3366" /><a name="INDEX-3367" /><a name="INDEX-3368" /><a name="INDEX-3369" /><a name="INDEX-3370" /><a name="INDEX-3371" /><a name="INDEX-3372" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b><i>



Sound.setPan( ) Method</i></b></font></td><td align="right"><i>set the balance of a sound's left and right channels
</i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><table width="515" border="0" cellpadding="5"><tr><td align="left" /><td align="right" /></tr></table>
<h4 class="refsect1">Availability</h4>


<p>Flash 5</p>



<h4 class="refsect1">Synopsis</h4>

<blockquote><pre class="code">
soundObject.setPan(<em>pan</em>)</pre></blockquote>



<h4 class="refsect2">Arguments</h4>


<dl>
<dt><em>pan</em></dt>
<dd><p>A number between -100 (left) and 100 (right) indicating the
distribution between the left and right speakers for sounds
controlled by <em class="replaceable">soundObject</em>. If the
<em class="replaceable">pan</em> supplied is greater than 100, the
actual value assigned is <tt class="literal">200</tt> <tt class="literal">-</tt>
<em class="replaceable">pan</em>. If the <em class="replaceable">pan</em>
supplied is less than -100, the actual value assigned is
<tt class="literal">-200</tt> <tt class="literal">-</tt>
<em class="replaceable">pan</em>.</p></dd>

</dl>




<h4 class="refsect1">Description</h4>


<p>The <em class="filename">setPan( ) </em> method dictates the balance of
the right and left channels of the sounds controlled by
<em class="replaceable">soundObject</em>. By adjusting the pan over
time, we can cause a sound to move from one speaker to the other
(known as <em class="emphasis">panning</em>).</p>


<p>To play the sounds controlled by
<em class="replaceable">soundObject</em> in the left speaker only, use
a <em class="replaceable">pan</em> of -100. To play the sounds
controlled by <em class="replaceable">soundObject</em> in the right
speaker only, use a <em class="replaceable">pan</em> of 100. To balance
the two channels evenly, use a <em class="replaceable">pan</em> of 0.</p>


<p>Note that <em class="filename">setPan( ) </em> affects all the sounds
controlled by <em class="replaceable">soundObject</em>. If
<em class="replaceable">soundObject</em> is a global sound,
<em class="filename">setPan( ) </em> affects all the sounds in a movie. If
<em class="replaceable">soundObject</em> is tied to a clip or a main
timeline, <em class="filename">setPan( ) </em> affects all the sounds in
that clip or timeline and all the clips it contains.</p>


<p>The effects of <em class="filename">setPan( )</em> can be changed only by
another call to <em class="filename">setPan( )</em>. A <em class="filename">setPan(
)</em> assignment affects all future sounds controlled by
<em class="replaceable">soundObject</em>, even if
<em class="replaceable">soundObject</em> is deleted.</p>



<h4 class="refsect1">Example</h4>


<p>The following clip event handlers cause sounds in a movie clip to
endlessly pan between the left and right speakers:</p>


<blockquote><pre class="code">onClipEvent (load) {
  panEffect = new Sound(this);
  panDirection = "right";
  panIncrement = 50;
}

onClipEvent(enterFrame) {
  if (panDirection == "right") {
    newPan = panEffect.getPan( ) + panIncrement;
    if (newPan &gt; 100) {
      panDirection = "left";
      panEffect.setPan(panEffect.getPan( ) - panIncrement);
    } else {
      panEffect.setPan(newPan);
    }
  } else {
    newPan = panEffect.getPan( ) - panIncrement;
    if (newPan &lt; -100) {
      panDirection = "right";
      panEffect.setPan(panEffect.getPan( ) + panIncrement);
    } else {
      panEffect.setPan(newPan);
    }
  }
}</pre></blockquote>


<p>The following clip event handlers cause sounds in a clip to react to
the mouse. Assuming a Stage width and height of 550 and 400, the
sounds pan left and right with the mouse's horizontal movement
and increase or decrease in volume with the mouse's vertical
movement:</p>


<blockquote><pre class="code">onClipEvent (load) {
  // Create a new Sound object and attach the sound bgMusic to it
  mySound = new Sound(this);
  mySound.attachSound("bgMusic");
  mySound.start(0, 999);                 // Play and loop the sound
}

onClipEvent (enterFrame) {
  // Measure the mouse's horizontal location, then set the pan accordingly
  mouseX = (_root._xmouse / 550) * 200;
  mySound.setPan(mouseX - 100);
  // Measure the mouse's vertical location, then set the volume accordingly
  mouseY = (_root._ymouse / 400) * 300;
  mySound.setVolume(300 - mouseY);
}</pre></blockquote>



<h4 class="refsect1">See Also</h4>


<p><em class="filename">Sound.</em><a name="INDEX-3371" /> <a name="INDEX-3372" /><em class="filename">getPan( )</em></p>


</div>

<a name="INDEX-3373" /><a name="INDEX-3374" /><a name="INDEX-3375" /><a name="INDEX-3376" /><a name="INDEX-3377" /><a name="INDEX-3378" /><a name="INDEX-3379" /><a name="INDEX-3380" /><a name="INDEX-3381" /><a name="INDEX-3382" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b><i>


Sound.setTransform( ) Method</i></b></font></td><td align="right"><i>distribute the left and right channels between the left and right speakers
</i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><table width="515" border="0" cellpadding="5"><tr><td align="left" /><td align="right" /></tr></table>
<h4 class="refsect1">Availability</h4>


<p>Flash 5</p>



<h4 class="refsect1">Synopsis</h4>

<blockquote><pre class="code">
soundObject.setTransform(<em>transformObject</em>)</pre></blockquote>



<h4 class="refsect2">Arguments</h4>


<dl>
<dt><em>transformObject</em></dt>
<dd><p>A user-defined object that specifies new channel settings as a series
of properties.</p></dd>

</dl>




<h4 class="refsect1">Description</h4>


<p>The <em class="filename">setTransform( )</em> method gives us precise
control over how the channels in a sound are output to the left and
right speakers. In principle, <em class="filename">setTransform( )</em> is
not unlike <em class="filename">setPan( )</em>, but it provides more
detailed sound control over stereo sounds.</p>


<p>A <a name="INDEX-3377" />stereo sound
is a combination of two distinct sounds -- the <em class="emphasis">left
channel</em> and the <em class="emphasis">right
channel</em> -- which are normally sent separately to the
left and right speakers. However, using <em class="filename">setTransform(
)</em>, we may dictate how much of each channel is broadcast in
each speaker. We may, for example, say, "Play half of the left
channel in the left speaker, none of the left channel in the right
speaker, and all of the right channel in both speakers." Or we
may say, "Play all of the left and right channels in the left
speaker."</p>


<p>To use <em class="filename">setTransform( )</em>, we must first create an
object with a series of predefined properties. The properties express
how to distribute the left and right channels of a stereo sound
between the left and right speakers, as described in <a href="ch20_05.htm">Table 20-12</a>.</p>


<a name="ch20-81457" /><h4 class="objtitle">Table 20-12. Properties of a <em class="filename">transformO</em>bject </h4><table border="1">




<tr>
<th>
<p><a name="INDEX-3378" />Property Name</p></th>
<th>
<p>Property Value</p></th>
<th>
<p>Property Description</p></th>
</tr>




<tr>
<td>
<p><tt class="literal">ll</tt><a name="INDEX-3379" /></p></td>
<td>
<p>0 to 100</p></td>
<td>
<p>The percentage of the left channel to play in the left speaker</p></td>
</tr>

<tr>
<td>
<p><tt class="literal">lr</tt><a name="INDEX-3380" /></p></td>
<td>
<p>0 to 100</p></td>
<td>
<p>The percentage of the right channel to play in the left speaker</p></td>
</tr>

<tr>
<td>
<p><tt class="literal">rl</tt><a name="INDEX-3381" /></p></td>
<td>
<p>0 to 100</p></td>
<td>
<p>The percentage of the left channel to play in the right speaker</p></td>
</tr>

<tr>
<td>
<p><tt class="literal">rr</tt><a name="INDEX-3382" /></p></td>
<td>
<p>0 to 100</p></td>
<td>
<p>The percentage of the right channel to play in the right speaker</p></td>
</tr>


</table>


<p>Once we have created an object with the properties described in <a href="ch20_05.htm">Table 20-12</a>, we pass that object to the
<em class="filename">setTransform( )</em> method of our
<em class="filename">Sound</em> object. The values of the properties on
our <em class="replaceable">transformObject</em> become the new channel
output percentages for the sounds controlled by
<em class="replaceable">soundObject</em>.</p>


<p>To examine the current percentages of a particular
<em class="filename">Sound</em> object, we use the
<em class="filename">Sound.getTransform( )</em> method.</p>



<h4 class="refsect1">Example</h4>


<blockquote><pre class="code">// Create a new Sound object
mySound = new Sound( );

// Create a new generic object to use with setTransform( )
transformer = new Object( );

// Set the properties of the transform object
transformer.ll = 0;      // None of left channel in left speaker
transformer.lr = 0;      // None of right channel in left speaker
transformer.rl = 0;      // None of left channel in right speaker
transformer.rr = 100;    // All of right channel in right speaker

// Apply the new channel distribution by passing the transform
// object to the setTransform( ) method
mySound.setTransform(transformer);</pre></blockquote>



<h4 class="refsect1">See Also</h4>


<p><em class="filename">Sound.getTransform( )</em>, <em class="filename">Sound.setPan(
)</em></p>


</div>

<a name="INDEX-3383" /><a name="INDEX-3384" /><a name="INDEX-3385" /><a name="INDEX-3386" /><a name="INDEX-3387" /><a name="INDEX-3388" /><a name="INDEX-3389" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b><i>


Sound.setVolume( ) Method</i></b></font></td><td align="right"><i>set the volume of sounds controlled by a Sound object
</i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><table width="515" border="0" cellpadding="5"><tr><td align="left" /><td align="right" /></tr></table>
<h4 class="refsect1">Availability</h4>


<p>Flash 5</p>



<h4 class="refsect1">Synopsis</h4>

<blockquote><pre class="code">
soundObject.setVolume(<em>volume</em>)</pre></blockquote>



<h4 class="refsect2">Arguments</h4>


<dl>
<dt><em>volume</em></dt>
<dd><p>A number indicating the loudness of the sound controlled by
<em class="replaceable">soundObject</em>, where
is no volume (mute). The larger
<em class="replaceable">volume</em>'s absolute value (regardless
of whether <em class="replaceable">volume</em> is positive or
negative), the louder the sounds controlled by
<em class="replaceable">soundObject</em> will be. For example, -50 is
the same <em class="replaceable">volume</em> as 50. The default value
for <em class="replaceable">volume</em> is 100.</p></dd>

</dl>




<h4 class="refsect1">Description</h4>


<p>The <em class="filename">setVolume( )</em> <a name="INDEX-3388" />
<a name="INDEX-3389" />method makes the sounds controlled by
<em class="replaceable">soundObject</em> louder or softer. To entirely
mute a sound, use a <em class="replaceable">volume</em> of 0. To make a
sound louder, increase <em class="replaceable">volume</em>. Values in
the range 100-200 are generally quite loud, but there is no
predefined maximum.</p>


<p>Note that <em class="filename">setVolume( )</em> affects all the sounds
controlled by <em class="replaceable">soundObject</em>. If
<em class="replaceable">soundObject</em> is a global sound,
<em class="filename">setVolume( )</em> affects all the sounds in a movie.
If <em class="replaceable">soundObject</em> is tied to a clip or a main
timeline, <em class="filename">setVolume( )</em> affects all the sounds in
that clip or timeline.</p>


<p>The effects of <em class="filename">setVolume( )</em> remain in effect
until overridden by another <em class="filename">setVolume( )</em> call. A
<em class="filename">setVolume( )</em> assignment affects all future
sounds controlled by <em class="replaceable">soundObject</em>, even if
<em class="replaceable">soundObject</em> is deleted.</p>



<h4 class="refsect1">Example</h4>


<p>The first example simply sets the volume of a movie clip:</p>


<blockquote><pre class="code">var mySound = new Sound( );
mySound.setVolume (65);</pre></blockquote>


<p>The following example shows how to make buttons that adjust a
movie's volume level:</p>


<blockquote><pre class="code"><tt class="userinput"><b>
// CODE ON THE MAIN MOVIE TIMELINE</b></tt>
var globalSound = new Sound( );
var maxVolume = 200;
var minVolume = 0;
var volumeIncrement = 20;
<tt class="userinput"><b>
// CODE ON VOLUME-UP BUTTON ON MAIN TIMELINE</b></tt>
on (release) {
  globalSound.setVolume(Math.min(globalSound.getVolume( ) + volumeIncrement,
                                 maxVolume));
}
<tt class="userinput"><b>
// CODE ON VOLUME-DOWN BUTTON ON MAIN TIMELINE</b></tt>
on (release) {
  globalSound.setVolume(Math.max(globalSound.getVolume( ) - volumeIncrement,
                                 minVolume));
}</pre></blockquote>



<h4 class="refsect1">See Also</h4>


<p><em class="filename">Sound.getVolume( )</em></p>


</div>

<a name="INDEX-3390" /><a name="INDEX-3391" /><a name="INDEX-3392" /><a name="INDEX-3393" /><a name="INDEX-3394" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b><i>



Sound.start( ) Method</i></b></font></td><td align="right"><i>begin playing an attached sound
</i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><table width="515" border="0" cellpadding="5"><tr><td align="left" /><td align="right" /></tr></table>
<h4 class="refsect1">Availability</h4>


<p>Flash 5</p>



<h4 class="refsect1">Synopsis</h4>

<blockquote><pre class="code">
soundObject.start(<em>secondOffset, loops</em>)</pre></blockquote>



<h4 class="refsect2">Arguments</h4>


<dl>
<dt><em>secondOffset</em></dt>
<dd><p>A floating-point number indicating the time in seconds at which to
start playing the sound attached to
<em class="replaceable">soundObject</em> (often called an
<em class="filename">entry point</em>). For example, a
<em class="replaceable">secondOffset</em> of 1 starts playback one
second after the sound's actual beginning as defined in the
Library. The default is 0. There is no provision for an exit point
(the time at which to stop playing the sound). The sound plays until
its end unless stopped manually.</p></dd>

</dl>


<dl>
<dt><em>loops</em></dt>
<dd><p>A positive integer indicating how many times to play the sound
attached to <em class="replaceable">soundObject</em>. To play the sound
once, use 1 (which is the default); to play the sound twice in
succession, use 2, and so on. The portion of the sound from
<em class="replaceable">secondOffset</em> is repeated to its end the
number of times specified by <em class="replaceable">loops</em>.</p></dd>

</dl>




<h4 class="refsect1">Description</h4>


<p>The <em class="filename">start( )</em> method is used to play
programmatically-defined sounds that were added to
<em class="replaceable">soundObject</em> via <em class="filename">attachSound(
)</em>. The <em class="filename">start( )</em> method does not play
all the sounds in a clip or movie; it plays only the sound most
recently attached to <em class="replaceable">soundObject</em> via
<em class="filename">attachSound( )</em>.</p>


<p>To play only a portion of the sound attached to
<em class="replaceable">soundObject</em>, use the
<em class="replaceable">secondOffset</em> argument. To play the sound
attached to <em class="replaceable">soundObject</em> repeatedly, use
the <em class="replaceable">loops</em> argument.</p>



<h4 class="refsect1">Example</h4>


<blockquote><pre class="code">// Create a new Sound object
boink = new Sound( );

// Attach a sound exported as <em class="replaceable">boink</em> to the Sound object
boink.attachSound("boink");

// Play all of boink; <em class="replaceable">soundOffset defaults to 0</em>
boink.start( );

// Play only a portion of <em class="replaceable">boink</em>, starting 0.5 seconds into it; loops defaults to 1
boink.start(.5);

// Play <em class="replaceable">boink</em> three times from beginning to end
boink.start(0, 3);</pre></blockquote>



<h4 class="refsect1">See Also</h4>


<p><em class="filename">Sound.stop( )</em></p>


</div>

<a name="INDEX-3395" /><a name="INDEX-3396" /><a name="INDEX-3397" /><a name="INDEX-3398" /><a name="INDEX-3399" /><a name="INDEX-3400" /><a name="INDEX-3401" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b><i>




Sound.stop( ) Method</i></b></font></td><td align="right"><i>silences all sounds or a specified attached sound
</i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><table width="515" border="0" cellpadding="5"><tr><td align="left" /><td align="right" /></tr></table>
<h4 class="refsect1">Availability</h4>


<p>Flash 5</p>



<h4 class="refsect1">Synopsis</h4>

<blockquote><pre class="code">
soundObject.stop()
soundObject.stop(<em>linkageIdentifier</em>)</pre></blockquote>



<h4 class="refsect1">Arguments</h4>


<dl>
<dt><em>linkageIdentifier</em></dt>
<dd><p><a name="INDEX-3401" />The name
of any sound attached to any <em class="filename">Sound</em> object with
the same <em class="replaceable">target</em> as
<em class="replaceable">soundObject</em>. Linkage identifiers are
specified in the Library under Options <img align="absmiddle" src="figs/U2192.gif" /> Linkage.</p></dd>

</dl>



<h4 class="refsect1">Description</h4>


<p>When invoked without a <em class="replaceable">linkageIdentifier</em>,
<em class="filename">stop( )</em> silences all sounds controlled by
<em class="replaceable">soundObject</em>; if
<em class="replaceable">soundObject</em> is a global sound,
<em class="filename">stop( )</em> silences all sounds in a movie; if
<em class="replaceable">soundObject</em> was created with a
<em class="replaceable">target</em> parameter, <em class="filename">stop(
)</em> silences all sounds in
<em class="replaceable">target</em>.</p>


<p>When invoked with a <em class="replaceable">linkageIdentifier</em>,
<em class="filename">stop( )</em> silences only the specific sound named
by <em class="replaceable">linkageIdentifier</em>. In that case,
<em class="replaceable">linkageIdentifier</em> must be a sound that was
attached to a <em class="filename">Sound</em> object via
<em class="filename">attachSound( )</em>. However, the sound to stop need
not be attached to <em class="replaceable">soundObject</em> itself. It
may be attached to <em class="emphasis">any</em>
<em class="filename">Sound</em> object that shares the same
<em class="replaceable">target</em> as
<em class="replaceable">soundObject</em>. Or, if
<em class="replaceable">soundObject</em> was created with no
<em class="replaceable">target</em> (i.e., is a global
<em class="filename">Sound</em> object), the sound to stop may be attached
to any other global <em class="filename">Sound</em> object.</p>



<h4 class="refsect1">Example</h4>


<blockquote><pre class="code">// Create a global Sound object
mySound = new Sound( );

// Attach the sound doorbell to the object
mySound.attachSound("doorbell");

// Stop all sounds in the movie
mySound.stop( );

// Play doorbell
mySound.start( );

// Stop just doorbell
mySound.stop("doorbell");

// Create another global Sound object
myOtherSound = new Sound( );

// Attach a doorknock sound to the object
myOtherSound.attachSound("doorknock");

// Play doorknock
myOtherSound.start( );

// Now stop the doorknock through mySound, not myOtherSound.
// This works because the two Sound objects have the same target.
mySound.stop("doorknock");</pre></blockquote>



<h4 class="refsect1">See Also</h4>


<p><em class="filename">Sound.start( )</em></p>


</div>

<a name="INDEX-3402" /><a name="INDEX-3403" /><a name="INDEX-3404" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b><i>

_soundbuftime Global Property</i></b></font></td><td align="right"><i>length of a streaming sound, in seconds, to preload
</i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><table width="515" border="0" cellpadding="5"><tr><td align="left" /><td align="right" /></tr></table>
<h4 class="refsect1">Availability</h4>


<p>Flash 4 and later</p>



<h4 class="refsect1">Synopsis</h4>

<blockquote><pre class="code">
_soundbuftime</pre></blockquote>



<h4 class="refsect1">Access</h4>


<p>Read/write</p>



<h4 class="refsect1">Description</h4>


<p>The <tt class="literal">_soundbuftime</tt> property is an integer
specifying the number of seconds of a streamed sound to preload
before playing it. The default is 5 seconds.</p>


<p>Flash synchronizes movie playback with streaming sounds to ensure
that, say, a cartoon character's lips match an accompanying
sound track. Animations will pause until
<tt class="literal">_soundbuftime</tt> seconds of streaming sound are
downloaded; therefore, a long setting can cause excessive startup
times on slower connections. Because network streaming may be slow or
briefly interrupted, a short <tt class="literal">_soundbuftime</tt> setting
can cause sound to skip (i.e., if enough sound data wasn't
buffered). The ideal setting will vary from movie to movie based on
the complexity of the graphics, the quality settings of the sound,
and the bandwidth of the end user's Internet connection. The
default setting (5 seconds) usually works well, but experimentation
may be required to find the best setting for individual cases. The
streaming buffer time can be changed during playback, but it is a
global property and cannot be set separately for individual sounds.</p>



<h4 class="refsect1">Example</h4>


<blockquote><pre class="code">_soundbuftime = 10;  // Buffer 10 seconds of audio</pre></blockquote>


</div>

<a name="INDEX-3405" /><a name="INDEX-3406" /><a name="INDEX-3407" /><a name="INDEX-3408" /><a name="INDEX-3409" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b><i>



startDrag( ) Global Function</i></b></font></td><td align="right"><i>make a movie or movie clip follow the mouse pointer
</i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><table width="515" border="0" cellpadding="5"><tr><td align="left" /><td align="right" /></tr></table>
<h4 class="refsect1">Availability</h4>


<p>Flash 4 and later</p>



<h4 class="refsect1">Synopsis</h4>

<blockquote><pre class="code">
startDrag(<em>target</em>)
startDrag(<em>target, lockCenter</em>)
startDrag(<em>target, lockCenter, left, top, right, bottom</em>)</pre></blockquote>



<h4 class="refsect2">Arguments</h4>


<dl>
<dt><em>target</em></dt>
<dd><p>A string or reference indicating the path to the movie or movie clip
instance that should follow the mouse pointer (references to movie
clips are converted to paths when used in a string context).</p></dd>

</dl>


<dl>
<dt><em>lockCenter</em></dt>
<dd><p>A Boolean indicating whether the
<em class="replaceable">target</em>'s registration point should
be centered under the mouse pointer (<tt class="literal">true</tt>) or
dragged relative to its original location (<tt class="literal">false</tt>).</p></dd>

</dl>


<dl>
<dt><em>left</em></dt>
<dd><p>A number specifying the minimum x-coordinate to the left of which
<em class="replaceable">target</em>'s registration point may not
be dragged.</p></dd>

</dl>


<dl>
<dt><em>top</em></dt>
<dd><p>A number specifying the minimum y-coordinate above which
<em class="replaceable">target</em>'s registration point may not
be dragged.</p></dd>

</dl>


<dl>
<dt><em>right</em></dt>
<dd><p>A number specifying the maximum x-coordinate to the right of which
<em class="replaceable">target</em>'s registration point may not
be dragged.</p></dd>

</dl>


<dl>
<dt><em>bottom</em></dt>
<dd><p>A number specifying the maximum y-coordinate below which
<em class="replaceable">target</em>'s registration point may not
be dragged.</p></dd>

</dl>




<h4 class="refsect1">Description</h4>


<p>The <em class="filename">startDrag( )</em> function causes
<em class="replaceable">target</em> to visually follow the mouse
pointer around in the Player (known as <em class="emphasis">dragging</em>
the clip). The movement of a dragging clip can be constrained to a
bounding box whose coordinates are provided as arguments to the
<em class="filename">startDrag( )</em> function. Bounding box coordinates
are given relative to the canvas on which
<em class="replaceable">target</em> resides. If that canvas is the main
movie Stage, then (0, 0) is the top-left corner of the Stage. If that
canvas is a movie clip, then (0, 0) is the registration point of the
clip's canvas. Note that Flash's coordinate system
reverses the Cartesian Y-axis; y values <em class="emphasis">increase</em>
toward the bottom of the screen and <em class="emphasis">decrease</em>
toward the top of the screen. Negative y values are
<em class="emphasis">above</em> the origin (i.e., above the X-axis).</p>


<p>Dragging can be stopped at any time via the <em class="filename">stopDrag(
)</em> function. Only one movie clip or movie may be dragged at
a time, so issuing a <em class="filename">startDrag( )</em> function on a
new <em class="replaceable">target</em> automatically cancels any drag
operation already in progress. That said, when a movie or move clip
is dragged, all the movie clips it contains are dragged along with
it.</p>



<h4 class="refsect1">Example</h4>


<blockquote><pre class="code">// Drag ball, limiting its movement to the upper-left corner of the Stage
startDrag("ball", true, 0, 0, 225, 200);</pre></blockquote>



<h4 class="refsect1">See Also</h4>


<p><em class="filename">Movieclip.startDrag( )</em>,<em class="filename"> stopDrag(
)</em></p>


</div>

<a name="INDEX-3410" /><a name="INDEX-3411" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b><i>
stop( ) Global Function</i></b></font></td><td align="right"><i>pause the movie's playback at the current frame
</i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><table width="515" border="0" cellpadding="5"><tr><td align="left" /><td align="right" /></tr></table>
<h4 class="refsect1">Availability</h4>


<p>Flash 2 and later</p>



<h4 class="refsect1">Synopsis</h4>

<blockquote><pre class="code">
stop()</pre></blockquote>



<h4 class="refsect1">Description</h4>


<p>The <em class="filename">stop( )</em> function is a simple but fundamental
function that halts the playback of a movie or movie clip. It is the
global counterpart of the <em class="filename">MovieClip.stop( )</em>
method. It is commonly used to wait for the user to, say, choose from
a graphical menu.</p>



<h4 class="refsect1">See Also</h4>


<p><em class="filename">MovieClip.stop( )</em>, <em class="filename">play( )</em></p>


</div>

<a name="INDEX-3412" /><a name="INDEX-3413" /><a name="INDEX-3414" /><a name="INDEX-3415" /><a name="INDEX-3416" /><a name="INDEX-3417" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b><i>
stopAllSounds( ) 

Global Function</i></b></font></td><td align="right"><i>silence a movie
</i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><table width="515" border="0" cellpadding="5"><tr><td align="left" /><td align="right" /></tr></table>
<h4 class="refsect1">Availability</h4>


<p>Flash 3 and later</p>



<h4 class="refsect1">Synopsis</h4>

<blockquote><pre class="code">
stopAllSounds()</pre></blockquote>



<h4 class="refsect1">Description</h4>


<p>The <em class="filename">stopAllSounds( )</em> function mutes all the
sounds currently playing in a movie, no matter how deeply nested in
movie clips. This applies to every sound in a movie, including
programmatically generated <em class="filename">Sound</em> objects. For
more precise control over stopping, starting, and setting the volume
of sounds, see the <em class="filename">Sound</em> class.</p>


<p>Note that <em class="filename">stopAllSounds( )</em> has only a temporary
effect. Any sound that starts after a <em class="filename">stopAllSounds(
)</em> invocation will play normally. There is no way to
permanently mute a movie.</p>



<h4 class="refsect1">See Also</h4>


<p><em class="filename">Sound.setVolume( )</em>, <em class="filename">Sound.stop(
)</em></p>


</div>

<a name="INDEX-3418" /><a name="INDEX-3419" /><a name="INDEX-3420" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b><i>
stopDrag( ) Global Function</i></b></font></td><td align="right"><i>end a drag operation in progress
</i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><table width="515" border="0" cellpadding="5"><tr><td align="left" /><td align="right" /></tr></table>
<h4 class="refsect1">Availability</h4>


<p>Flash 4 and later</p>



<h4 class="refsect1">Synopsis</h4>

<blockquote><pre class="code">
stopDrag()</pre></blockquote>



<h4 class="refsect1">Description</h4>


<p>The <em class="filename">startDrag( )</em> <a name="INDEX-3420" />function causes a movie clip to follow the
mouse pointer around the Stage. A <em class="filename">stopDrag( )</em>
operation stops a dragging movie clip from following the mouse
pointer. Because only one movie clip or movie may be dragged at a
time, <em class="filename">stopDrag( )</em> does not require a
<em class="replaceable">target</em> argument; it simply cancels any
drag operation in progress.</p>


<p>Together with <em class="filename">startDrag( )</em>, <em class="filename">stopDrag(
)</em> is used to create simple drag-and-drop interfaces in
Flash, as demonstrated under "Interface Widgets" in the
online Code Depot.</p>



<h4 class="refsect1">Example</h4>


<p>The following button code causes a movie clip to be dragged while the
button is pressed and dropped when the button is released:</p>


<blockquote><pre class="code">on (press) {
  startDrag("", true);
}

on (release) {
  stopDrag( );
}</pre></blockquote>



<h4 class="refsect1">See Also</h4>


<p><em class="filename">MovieClip.stopDrag( )</em>, <em class="filename">startDrag(
)</em>, <em class="filename">String.toLowerCase( ) </em>;<em class="filename">
</em><a href="ch04_06.htm">Section 4.6.8.1, "The toUpperCase( ) function"</a> in <a href="ch04_01.htm">Chapter 4, "Primitive Datatypes"</a></p>


</div>

<a name="INDEX-3421" /><a name="INDEX-3422" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b><i>
String( ) Global Function</i></b></font></td><td align="right"><i>convert a value to the String datatype
</i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><table width="515" border="0" cellpadding="5"><tr><td align="left" /><td align="right" /></tr></table>
<h4 class="refsect1">Availability</h4>


<p>Flash 5</p>



<h4 class="refsect1">Synopsis</h4>

<blockquote><pre class="code">
String(<em>value</em>)</pre></blockquote>



<h4 class="refsect2">Arguments</h4>


<dl>
<dt><em>value</em></dt>
<dd><p>An expression containing the value to be converted to a string.</p></dd>

</dl>




<h4 class="refsect2">Returns</h4>


<p>The result of converting <em class="replaceable">value</em> to a
primitive string.</p>




<h4 class="refsect1">Description</h4>


<p>The <em class="filename">String( )</em> function converts its argument to
a primitive string value and returns that converted value. The
results of converting various types of data to a primitive string are
described in <a href="ch03_04.htm">Table 3-2</a>. It's normally not
necessary to use the <em class="filename">String( ) </em>function;
ActionScript automatically converts values to the
<em class="emphasis">string</em> type when appropriate.</p>


<p>Be sure not to confuse the global <em class="filename">String( )</em>
function with the <em class="filename">String</em> class constructor. The
former converts an expression to a string, whereas the later is a
class that wraps primitive string data in an object so that
properties and methods may be applied to it.</p>



<h4 class="refsect1">Usage</h4>


<p>Note that the <em class="filename">String( )</em> function sometimes
appears in Flash 4 <em class="filename">.fla</em> files that have been
converted to the Flash 5 format. For information on how datatypes are
handled when Flash 4 files are converted to Flash 5, see <a href="ch03_04.htm">Section 3.4.4, "Flash 4-to-Flash 5 Datatype Conversion"</a> in <a href="ch03_01.htm">Chapter 3, "Data and Datatypes"</a>.</p>



<h4 class="refsect1">See Also</h4>


<p>The <em class="filename">String</em> class; <a href="ch03_04.htm">Section 3.4.2, "Explicit Type Conversion"</a> in <a href="ch03_01.htm">Chapter 3, "Data and Datatypes"</a></p>


</div>

<a name="INDEX-3423" /><a name="INDEX-3424" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b><i>
String Class</i></b></font></td><td align="right"><i>wrapper class for string primitive type
</i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><table width="515" border="0" cellpadding="5"><tr><td align="left" /><td align="right" /></tr></table>
<h4 class="refsect1">Availability</h4>


<p>Flash 5</p>



<h4 class="refsect1">Constructor</h4>

<blockquote><pre class="code">
new String(<em>value</em>)</pre></blockquote>



<h4 class="refsect2">Arguments</h4>


<dl>
<dt><em>value</em></dt>
<dd><p>An expression to be resolved and, if necessary, converted to a
string, then wrapped in a <em class="filename">String</em> object.</p></dd>

</dl>




<h4 class="refsect1">Properties</h4>


<dl>
<dt><em>length</em></dt>
<dd><p>The number of characters in a string.</p></dd>

</dl>



<h4 class="refsect1">Class Methods</h4>


<p>The following method is invoked through the
<em class="filename">String</em> class itself, not through an object of
the <em class="filename">String</em> class:</p>


<dl>
<dt><em>fromCharCode( )</em></dt>
<dd><p>Generate a string from one or more Latin 1/Shift-JIS code points.</p></dd>

</dl>



<h4 class="refsect1">Methods</h4>


<p>The following object methods are invoked through an instance of the
<em class="emphasis">String</em> class:</p>


<dl>
<dt><em>charAt( )</em></dt>
<dd><p>Retrieve a character at a specific position in the string.</p></dd>

</dl>


<dl>
<dt><em>charCodeAt( )</em></dt>
<dd><p>Retrieve the code point of a character at a specific position in the
string.</p></dd>

</dl>


<dl>
<dt><em>concat( )</em></dt>
<dd><p>Combine one or more items into a single string.</p></dd>

</dl>


<dl>
<dt><em>indexOf( )</em></dt>
<dd><p>Find the first occurrence of a specified substring in a string.</p></dd>

</dl>


<dl>
<dt><em>lastIndexOf( )</em></dt>
<dd><p>Find the last occurrence of a specified substring in a string.</p></dd>

</dl>


<dl>
<dt><em>slice( )</em></dt>
<dd><p>Extract a substring from a string based on positive or negative
character positions.</p></dd>

</dl>


<dl>
<dt><em>split( )</em></dt>
<dd><p>Convert a string to an array.</p></dd>

</dl>


<dl>
<dt><em>substr( )</em></dt>
<dd><p>Extract a substring from a string based on a starting position and
length.</p></dd>

</dl>


<dl>
<dt><em>substring( )</em></dt>
<dd><p>Extract a substring from a string based on positive character
positions only.</p></dd>

</dl>


<dl>
<dt><em>toLowerCase( )</em></dt>
<dd><p>Return a lowercase version of a string.</p></dd>

</dl>


<dl>
<dt><em>toUpperCase( )</em></dt>
<dd><p>Return an uppercase version of a string.</p></dd>

</dl>



<h4 class="refsect1">Description</h4>


<p>The <em class="filename">String</em> class has several purposes:</p>


<ul><li><p>It allows us to access the <tt class="literal">length</tt> property of
strings and perform string-related operations, such as
<em class="filename">indexOf( )</em> and <em class="filename">slice( )</em>.
<em class="filename">String</em> objects are created (and eventually
deleted) automatically by the interpreter whenever a method is
invoked on a primitive string value.</p></li></ul>
<ul><li><p>It can be used to convert a datum of any type to a string.</p></li></ul>
<ul><li><p>It is used to access the <em class="filename">fromCharCode( )</em> class
method to create a new string based on specified Latin 1 or Shift-JIS
code points.</p></li></ul>
<ul><li><p>It can be used to create a <em class="filename">String</em> object, which
contains a primitive string value in an unnamed, internal property;
however, there is little reason to do so.</p></li></ul>

<h4 class="refsect1">Usage</h4>


<p>In practice, the <em class="filename">String</em> class constructor is
used primarily to convert other datatypes to strings. See the global
<em class="filename">String( )</em> function for more details.</p>



<h4 class="refsect1">See Also</h4>


<p><a href="ch04_05.htm">Section 4.5, "The String Type"</a> in <a href="ch04_01.htm">Chapter 4, "Primitive Datatypes"</a></p>


</div>

<a name="INDEX-3425" /><a name="INDEX-3426" /><a name="INDEX-3427" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b><i>

String.charAt( ) Method</i></b></font></td><td align="right"><i>retrieve the character from a specific position in a string
</i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><table width="515" border="0" cellpadding="5"><tr><td align="left" /><td align="right" /></tr></table>
<h4 class="refsect1">Availability</h4>


<p>Flash 5</p>



<h4 class="refsect1">Synopsis</h4>

<blockquote><pre class="code">
<em>string</em>.charAt(<em>index</em>)</pre></blockquote>



<h4 class="refsect2">Arguments</h4>


<dl>
<dt><em>index</em></dt>
<dd><p>The integer position of the character to retrieve, which should be in the range 0 (the first character) to <em class="replaceable">string</em><tt class="literal">.length-1</tt> (the last character).</p></dd>

</dl>




<h4 class="refsect2">Returns</h4>


<p>The character in the position <em class="replaceable">index</em> within
<em class="replaceable">string</em>.</p>




<h4 class="refsect1">Description</h4>


<p>The <em class="filename">charAt( )</em> method determines the character
that resides at a certain position (<em class="replaceable">index</em>)
in a string.</p>



<h4 class="refsect1">Example</h4>


<blockquote><pre class="code">trace("It is 10:34 pm".charAt(1));  // Displays: "t" (the second letter)
var country = "Canada";
trace(country.charAt(0));           // Displays: "C" (the first letter)

// This function removes all the spaces from a string and returns the result
function stripSpaces (inString) {
  var outString = "";
  for (i = 0; i &lt; inString.length; i++) {
    if (inString.charAt(i) != " ") {
      outString += inString.charAt(i);
    }
  }
  return outString;
}</pre></blockquote>



<h4 class="refsect1">See Also</h4>


<p><em class="filename">String.charCodeAt( )</em>,<em class="filename"> String.indexOf(
)</em>,<em class="filename"> String.slice( )</em>; <a href="ch04_06.htm">Section 4.6.5.2, "The charAt( ) function"</a> in <a href="ch04_01.htm">Chapter 4, "Primitive Datatypes"</a></p>


</div>

<a name="INDEX-3428" /><a name="INDEX-3429" /><a name="INDEX-3430" /><a name="INDEX-3431" /><a name="INDEX-3432" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b><i>
String.charCodeAt( ) 

Method</i></b></font></td><td align="right"><i>retrieve the code point of the character at a specific position in a string
</i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><table width="515" border="0" cellpadding="5"><tr><td align="left" /><td align="right" /></tr></table>
<h4 class="refsect1">Availability</h4>


<p>Flash 5</p>



<h4 class="refsect1">Synopsis</h4>

<blockquote><pre class="code">
<em>string</em>.charCodeAt(<em>index</em>)</pre></blockquote>



<h4 class="refsect2">Arguments</h4>


<dl>
<dt><em>index</em></dt>
<dd><p>The integer position of a character in
<em class="replaceable">string</em>, which should be in the range 0
(the first character) to
<em class="replaceable">string</em><tt class="literal">.length-1</tt> (the
last character).</p></dd>

</dl>




<h4 class="refsect2">Returns</h4>


<p>An integer representing the Latin 1 or Shift-JIS code point, as shown
in <a href="appb_01.htm">Appendix B, "Latin 1 Character Repertoire and Keycodes"</a>, of the character in the position
<em class="replaceable">index</em> within
<em class="replaceable">string</em>.</p>




<h4 class="refsect1">Example</h4>


<blockquote><pre class="code">var msg = "A is the first letter of the Latin alphabet.";
trace(msg.charCodeAt(0));  // Displays: 65 (the code for the "A" character)
trace(msg.charCodeAt(1));  // Displays: 32 (the code for the space character)</pre></blockquote>



<h4 class="refsect1">See Also</h4>


<p><em class="filename">String.charAt( )</em>,<em class="filename"> String.fromCharCode(
)</em>; <a href="appb_01.htm">Appendix B, "Latin 1 Character Repertoire and Keycodes"</a>, <a href="ch04_06.htm">Section 4.6.9.2, "The charCodeAt( ) function"</a> in <a href="ch04_01.htm">Chapter 4, "Primitive Datatypes"</a></p>


</div>

<a name="INDEX-3433" /><a name="INDEX-3434" /><a name="INDEX-3435" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b><i>

String.concat( ) Method</i></b></font></td><td align="right"><i>combine one or more values into a single string
</i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><table width="515" border="0" cellpadding="5"><tr><td align="left" /><td align="right" /></tr></table>
<h4 class="refsect1">Availability</h4>


<p>Flash 5</p>



<h4 class="refsect1">Synopsis</h4>

<blockquote><pre class="code">
<em>string</em>.concat(<em>value1, value2,...valuen</em>)</pre></blockquote>



<h4 class="refsect2">Arguments</h4>


<dl>
<dt><em>value1,...value<em class="replaceable">n</em></em></dt>
<dd><p>Values to be converted to strings (if necessary) and concatenated
with <em class="replaceable">string </em>.</p></dd>

</dl>




<h4 class="refsect2">Returns</h4>


<p>The result of concatenating <em class="replaceable">string</em> with
<em class="replaceable">value1</em>, <em class="replaceable">value2</em>,
...<em class="replaceable">valuen </em>.</p>




<h4 class="refsect1">Description</h4>


<p>The <em class="filename">concat( )</em> method creates a string from a
series of values. It is equivalent to using the concatenation
operator (<tt class="literal">+</tt>) with strings but is sometimes
preferred for clarity, as the <tt class="literal">+</tt> operator can also
be used to add numbers. For details on <em class="filename">concat(
)</em>, see <a href="ch04_01.htm">Chapter 4, "Primitive Datatypes"</a>.</p>



<h4 class="refsect1">Usage</h4>


<p>Note that <em class="filename">concat( )</em> does not modify
<em class="replaceable">string </em>; it returns a completely new
string.</p>



<h4 class="refsect1">Example</h4>


<blockquote><pre class="code">var greeting = "Hello";
excitedGreeting = greeting.concat("!");
trace(greeting);                         // Displays: "Hello"
trace(excitedGreeting);                  // Displays: "Hello!"

var x = 4;                               // Initialize <tt class="userinput"><b>x</b></tt> as an integer
trace(x + 5);                            // Displays: 9
trace(x.concat(5));                      // Fails because x is not a string.
trace(String(x).concat(5));              // Displays: "45"

var x = "4";                             // Initialize x as a string
trace(x.concat(5));                      // Displays: "45"
trace(concat("foo", "fee"));             // Fails because concat( ) must be invoked
                                         // as a method of a string.</pre></blockquote>



<h4 class="refsect1">See Also</h4>


<p>The <em class="filename">+</em> operator, in <a href="ch05_01.htm">Chapter 5, "Operators"</a>,
<a href="ch04_06.htm">Section 4.6.1.1, "The concat( ) function"</a> in <a href="ch04_01.htm">Chapter 4, "Primitive Datatypes"</a></p>


</div>

<a name="INDEX-3436" /><a name="INDEX-3437" /><a name="INDEX-3438" /><a name="INDEX-3439" /><a name="INDEX-3440" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b><i>



String.fromCharCode( ) Class Method</i></b></font></td><td align="right"><i>generate a string from one or more code points
</i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><table width="515" border="0" cellpadding="5"><tr><td align="left" /><td align="right" /></tr></table>
<h4 class="refsect1">Availability</h4>


<p>Flash 5</p>



<h4 class="refsect1">Synopsis</h4>

<blockquote><pre class="code">
String.fromCharCode(<em>code_ point1, code_ point2,...code_ pointn</em>)</pre></blockquote>



<h4 class="refsect2">Arguments</h4>


<dl>
<dt><em>code_ point1,...code_ point<em class="replaceable">n</em></em></dt>
<dd><p>A series of one or more decimal integers corresponding to Latin 1 or
Shift-JIS character code points, as shown in <a href="appb_01.htm">Appendix B, "Latin 1 Character Repertoire and Keycodes"</a>.</p></dd>

</dl>




<h4 class="refsect2">Returns</h4>


<p>A string formed by concatenating the characters represented by the
specified code points.</p>




<h4 class="refsect1">Description</h4>


<p>The <em class="filename">fromCharCode( )</em> class method produces a
character or series of characters from character code points as
described in <a href="ch04_01.htm">Chapter 4, "Primitive Datatypes"</a>.</p>



<h4 class="refsect1">Example</h4>


<blockquote><pre class="code">// Makes a copyright symbol, followed by the year (2001)
copyNotice = String.fromCharCode(169) + " 2001";</pre></blockquote>



<h4 class="refsect1">See Also</h4>


<p><em class="filename">String.charCodeAt( )</em>; <a href="appb_01.htm">Appendix B, "Latin 1 Character Repertoire and Keycodes"</a>, <a href="ch04_06.htm">Section 4.6.9.1, "The fromCharCode( ) function"</a> in
<a href="ch04_01.htm">Chapter 4, "Primitive Datatypes"</a></p>


</div>

<a name="INDEX-3441" /><a name="INDEX-3442" /><a name="INDEX-3443" /><a name="INDEX-3444" /><a name="INDEX-3445" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b><i>



String.indexOf( ) Method</i></b></font></td><td align="right"><i>find the first occurrence of a substring in a string
</i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><table width="515" border="0" cellpadding="5"><tr><td align="left" /><td align="right" /></tr></table>
<h4 class="refsect1">Availability</h4>


<p>Flash 5</p>



<h4 class="refsect1">Synopsis</h4>

<blockquote><pre class="code">
<em>string</em>.indexOf(<em>substring</em>)
<em>string</em>.indexOf(<em>substring, startIndex</em>)</pre></blockquote>



<h4 class="refsect2">Arguments</h4>


<dl>
<dt><em>substring</em></dt>
<dd><p>A string containing the character or characters to search for.</p></dd>

</dl>


<dl>
<dt><em>startIndex</em></dt>
<dd><p>An optional integer position in <em class="replaceable">string</em> at
which to start searching for <em class="replaceable">substring</em>.
Should be in the range
(the first character) to
<em class="replaceable">string</em><tt class="literal">.length-1</tt> (the
last character). Defaults to 0.</p></dd>

</dl>




<h4 class="refsect2">Returns</h4>


<p>The position of the first occurrence of
<em class="replaceable">substring</em> in
<em class="replaceable">string</em> (starting at
<em class="replaceable">startIndex</em>). Returns -1 if
<em class="replaceable">substring</em> is not found at or after
<em class="replaceable">startIndex</em> in
<em class="replaceable">string</em>.</p>




<h4 class="refsect1">Description</h4>


<p>The <em class="filename">indexOf( )</em> method is used to search for
characters in strings or to check whether a string contains a certain
substring.</p>



<h4 class="refsect1">Example</h4>


<blockquote><pre class="code">// Check if an email address contains an @ sign
var email = "derekaol.com";
if (email.indexOf("@") == -1) {
  trace ("This isn't a valid email address");
}

// Check if an email address has an @ sign and is from the domain aol.com
var email = "derek@aol.com";
var atPos = email.indexOf("@");
if (atPos != -1 &amp;&amp; email.indexOf("aol.com") == atPos + 1) {
  gotoAndStop("AOLuserOffer");
}</pre></blockquote>


<p>The following code shows a generic function that checks for a keyword
in a string, as you might need when grading a fill-in-the-blank quiz:</p>


<blockquote><pre class="code">// Generic function to search origStr for any occurrence
// of searchStr using a case-insensitive comparison
function search (origStr, searchStr) {
  var origStr = origStr.toLowerCase( );
  var searchStr = searchStr.toLowerCase( );
  return origStr.indexOf(searchStr) != -1;
}

var answer = "einstein";
var guess = "Dr. Albert Einstein";

// Increment score if guess contains "einstein"
if (search(guess, answer)) {
  score++;
}</pre></blockquote>



<h4 class="refsect1">See Also</h4>


<p><em class="filename">String.charAt( )</em>, <em class="filename">String.lastIndexOf(
)</em>; <a href="ch04_06.htm">Section 4.6.5.3, "The indexOf( ) function"</a> in <a href="ch04_01.htm">Chapter 4, "Primitive Datatypes"</a></p>


</div>

<a name="INDEX-3446" /><a name="INDEX-3447" /><a name="INDEX-3448" /><a name="INDEX-3449" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b><i>


String.lastIndexOf( ) Method</i></b></font></td><td align="right"><i>find the last occurrence of a substring in a string
</i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><table width="515" border="0" cellpadding="5"><tr><td align="left" /><td align="right" /></tr></table>
<h4 class="refsect1">Availability</h4>


<p>Flash 5</p>



<h4 class="refsect1">Synopsis</h4>

<blockquote><pre class="code">
<em>string</em>.lastIndexOf(<em>substring</em>)
<em>string</em>.lastIndexOf(<em>substring, startIndex</em>)</pre></blockquote>



<h4 class="refsect2">Arguments</h4>


<dl>
<dt><em>substring</em></dt>
<dd><p>A string containing the character or characters to search for.</p></dd>

</dl>


<dl>
<dt><em>startIndex</em></dt>
<dd><p>An optional integer position in <em class="replaceable">string</em> at
which to start the search for <em class="replaceable">substring</em>.
The <em class="replaceable">string</em> is searched backward from
<em class="replaceable">startIndex</em>, which should be in the range 0
(the first character) to
<em class="replaceable">string</em><tt class="literal">.length-1</tt> (the
last character). Defaults to
<em class="replaceable">string</em><tt class="literal">.length-1</tt>.</p></dd>

</dl>




<h4 class="refsect2">Returns</h4>


<p>The position of the last occurrence of
<em class="replaceable">substring</em> in
<em class="replaceable">string</em> prior to
<em class="replaceable">startIndex</em>. Returns -1 if
<em class="replaceable">substring</em> is not found prior to
<em class="replaceable">startIndex</em> in
<em class="replaceable">string</em>.</p>




<h4 class="refsect1">Description</h4>


<p>The <em class="filename">lastIndexOf( )</em> method is used to search for
the last occurrence of a substring in a string or to check whether a
string contains a certain substring.</p>



<h4 class="refsect1">Example</h4>


<blockquote><pre class="code">URL = "http://www.moock.org/webdesign/flash/fillthewindow.html";
// Finds the last slash character
lastSlash = URL.lastIndexOf("/");
// Extracts the filename from the URL
file = URL.substring(lastSlash + 1);
trace(file);  // Displays: fillthewindow.html</pre></blockquote>



<h4 class="refsect1">See Also</h4>


<p><em class="filename">String.charAt( )</em>,<em class="filename"> String.indexOf(
)</em>; <a href="ch04_06.htm">Section 4.6.5.4, "The lastIndexOf( ) Function"</a> in <a href="ch04_01.htm">Chapter 4, "Primitive Datatypes"</a></p>


</div>

<a name="INDEX-3450" /><a name="INDEX-3451" /><a name="INDEX-3452" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b><i>

String.length Property</i></b></font></td><td align="right"><i>the number of characters in a string
</i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><table width="515" border="0" cellpadding="5"><tr><td align="left" /><td align="right" /></tr></table>
<h4 class="refsect1">Availability</h4>


<p>Flash 5</p>



<h4 class="refsect1">Synopsis</h4>

<blockquote><pre class="code">
<em>string</em>.length</pre></blockquote>



<h4 class="refsect1">Access</h4>


<p>Read-only</p>



<h4 class="refsect1">Description</h4>


<p><tt class="literal">The length</tt> property returns the number of
characters in <em class="replaceable">string</em>. Note that a null
character (ASCII 0) does not signal the end of a string, as it would
in some languages, but neither is it counted in the string's
<tt class="literal">length</tt>. For example:</p>


<blockquote><pre class="code">// Create the string "A" + null + "B"
var myString = String.fromCharCode(65,0,66);
trace(myString.length);  // Displays: 2 (The null character is ignored)</pre></blockquote>



<h4 class="refsect1">Example</h4>


<blockquote><pre class="code">var myString = "hello";
trace (myString.length);  // Displays: 5
trace ("hello".length);   // Displays: 5

// Here we convert the number 1000 to a
// string in order to test its length
var age = 1000;
// Display an error message if the number has the wrong number of digits.
if (String(age).length != 2) {
  trace ("Please enter a two-digit number");
}</pre></blockquote>



<h4 class="refsect1">See Also</h4>


<p><em class="filename">Array.length( )</em>; <a href="ch04_06.htm">Section 4.6.5.1, "The length property"</a> in <a href="ch04_01.htm">Chapter 4, "Primitive Datatypes"</a></p>


</div>

<a name="INDEX-3453" /><a name="INDEX-3454" /><a name="INDEX-3455" /><a name="INDEX-3456" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b><i>


String.slice( ) Method</i></b></font></td><td align="right"><i>extract a substring from a string based on positive or negative character positions
</i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><table width="515" border="0" cellpadding="5"><tr><td align="left" /><td align="right" /></tr></table>
<h4 class="refsect1">Availability</h4>


<p>Flash 5</p>



<h4 class="refsect1">Synopsis</h4>

<blockquote><pre class="code">
<em>string</em>.slice(<em>startIndex, endIndex</em>)</pre></blockquote>



<h4 class="refsect2">Arguments</h4>


<dl>
<dt><em>startIndex</em></dt>
<dd><p>The integer position of the first character to extract from
<em class="replaceable">string</em>. If
<em class="replaceable">startIndex</em> is negative, the position is
measured from the end of the string, where -1 is the last character,
-2 is the second-to-last character, and so on. (i.e., a negative
<em class="replaceable">startIndex</em> specifies the character at
<em class="replaceable">string</em><tt class="literal">.length+</tt><em class="replaceable">startIndex</em>).</p></dd>

</dl>


<dl>
<dt><em>endIndex</em></dt>
<dd><p>The integer position of the character <em class="emphasis">after</em> the
last character to extract from <em class="replaceable">string</em>. If
<em class="replaceable">endIndex</em> is negative, the position is
measured from the end of the string, where -1 is the last character,
-2 is the second-to-last character, and so on. (i.e., a negative
<em class="replaceable">endIndex</em> specifies the character at
<em class="replaceable">string</em><tt class="literal">.length+</tt><em class="replaceable">endIndex</em>).
Defaults to
<em class="replaceable">string</em><tt class="literal">.length</tt> if
omitted.</p></dd>

</dl>




<h4 class="refsect2">Returns</h4>


<p>A substring of <em class="replaceable">string</em>, starting at
<em class="replaceable">startIndex</em> and ending at
<em class="replaceable">endIndex-</em><tt class="literal">1</tt>, where both
<em class="replaceable">startIndex</em> and
<em class="replaceable">endIndex</em> are zero-relative.</p>




<h4 class="refsect1">Description</h4>


<p>The <em class="filename">slice( )</em> method is one of three methods that
can be used to extract a substring from a string (the others being
<em class="filename">substring( )</em> and <em class="filename">substr( )
</em>). The <em class="filename">slice( )</em> method offers the
option of negative start and end index values, which allows us to
extract a substring by measuring back from the end of a string.</p>



<h4 class="refsect1">Usage</h4>


<p>Note that <em class="filename">slice( )</em> does not modify
<em class="replaceable">string </em>; it returns a completely new
string.</p>



<h4 class="refsect1">Example</h4>


<blockquote><pre class="code">var fullName = "Steven Sid Mumby";
middleName = fullName.slice(7, 10);   // Assigns "Sid" to middleName
middleName = fullName.slice(-9, -6);  // Also assigns "Sid" to middleName</pre></blockquote>



<h4 class="refsect1">See Also</h4>


<p><em class="filename">String.substr( )</em>, <em class="filename">String.substring(
)</em>; <a href="ch04_06.htm">Section 4.6.6.3, "The slice( ) function"</a> and <a href="ch04_06.htm">Section 4.6.7, "Combining String Examination with Substring Extraction"</a> in <a href="ch04_01.htm">Chapter 4, "Primitive Datatypes"</a></p>


</div>

<a name="INDEX-3457" /><a name="INDEX-3458" /><a name="INDEX-3459" /><a name="INDEX-3460" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b><i>


String.split( ) Method</i></b></font></td><td align="right"><i>convert a string into a series of array elements
</i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><table width="515" border="0" cellpadding="5"><tr><td align="left" /><td align="right" /></tr></table>
<h4 class="refsect1">Availability</h4>


<p>Flash 5</p>



<h4 class="refsect1">Synopsis</h4>

<blockquote><pre class="code">
<em>string</em>.split(<em>delimiter</em>)</pre></blockquote>



<h4 class="refsect2">Arguments</h4>


<dl>
<dt><em>delimiter</em></dt>
<dd><p>The character or series of characters at which to break
<em class="replaceable">string</em> when forming elements of the new
array.</p></dd>

</dl>




<h4 class="refsect2">Returns</h4>


<p>An array whose elements contain the substrings formed by breaking
<em class="replaceable">string</em> into segments demarcated by
<em class="replaceable">delimiter</em>.</p>




<h4 class="refsect1">Description</h4>


<p>The <em class="filename">split( )</em> method breaks a string into
substrings, assigns those substrings to the elements of an array, and
returns that array. Contiguous occurrences of
<em class="replaceable">delimiter</em> without intervening characters
result in empty elements. For example, the following code:</p>


<blockquote><pre class="code">owners = "terry,doug,,,jon";
ownersArray = owners.split(",");</pre></blockquote>


<p>assigns the following elements to <tt class="literal">ownersArray</tt>
(elements 2 and 3 contain <tt class="literal">undefined</tt>):</p>


<blockquote><pre class="code">0: terry
1: doug
2: 
3: 
4: jon</pre></blockquote>


<p>The <em class="filename">split( )</em> method is typically used to convert
a string received from a CGI script or text file into an array for
further manipulation. It is also useful when parsing the parameters
of an <em class="filename">asfunction</em> call from an HMTL text field
&lt;A&gt; tag, which can pass only one string argument to a function.
See <a href="ch18_05.htm">Section 18.5.14, "Calling ActionScript Functions from HTML Links"</a> in <a href="ch18_01.htm">Chapter 18, "On-Screen Text Fields"</a>, for example code. Common delimiters include
the comma and the Tab character.</p>



<h4 class="refsect1">Example</h4>


<p>Suppose we store a list of names in a text file named
<em class="filename">names.txt</em>. Each name is separated from the
others by a Tab character, as implied by the whitespace shown:</p>


<blockquote><pre class="code">owners=terry    doug    jon</pre></blockquote>


<p>On frame 1 of our movie, we load the <em class="filename">names.txt</em>
file into our movie:</p>


<blockquote><pre class="code">this.loadVariables("names.txt");</pre></blockquote>


<p>After ensuring that <em class="filename">names.txt</em> has fully loaded
(see <a href="ch10_10.htm">Section 10.10.4, "data"</a> in <a href="ch10_01.htm">Chapter 10, "Events and Event Handlers"</a>), we split the loaded
<tt class="literal">owners</tt> variable into an array:</p>


<blockquote><pre class="code">splitString = String.fromCharCode(9);  // Assign the Tab character to splitString
ownersArray = owners.split(splitString);

trace(ownersArray[1]);  // Displays: "doug"</pre></blockquote>


<p>Note that <em class="filename">split( )</em> can take a long time to
execute with large bodies of text. If performance is a problem, break
your data into manageable portions or consider using XML instead. See
the <em class="filename">XML</em> class.</p>



<h4 class="refsect1">Bugs</h4>


<p>In Flash 5, using the empty string as a delimiter adds all of
<em class="replaceable">string</em> to the first element of the array
being generated. According to ECMA-262, an empty string delimiter
should cause <em class="replaceable">string</em> to be broken at each
character. Similarly, multicharacter delimiters are not recognized by
Flash 5 and cause all of <em class="replaceable">string</em> to be
assigned to the first element of the returned array.</p>



<h4 class="refsect1">See Also</h4>


<p><em class="filename">Array.join( )</em>; <a href="ch04_06.htm">Section 4.6.6.4, "The split( ) function"</a> in <a href="ch04_01.htm">Chapter 4, "Primitive Datatypes"</a></p>


</div>

<a name="INDEX-3461" /><a name="INDEX-3462" /><a name="INDEX-3463" /><a name="INDEX-3464" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b><i>


String.substr( ) Method</i></b></font></td><td align="right"><i>extract a substring from a string based on a starting position and length
</i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><table width="515" border="0" cellpadding="5"><tr><td align="left" /><td align="right" /></tr></table>
<h4 class="refsect1">Availability</h4>


<p>Flash 5</p>



<h4 class="refsect1">Synopsis</h4>

<blockquote><pre class="code">
<em>string</em>.substr(<em>startIndex, length</em>)</pre></blockquote>



<h4 class="refsect2">Arguments</h4>


<dl>
<dt><em>startIndex</em></dt>
<dd><p>The integer position of the first character to extract from
<em class="replaceable">string</em>. If
<em class="replaceable">startIndex</em> is negative, the position is
measured from the end of the string, where -1 is the last character,
-2 is the second-to-last character, and so on. (i.e., a negative
<em class="replaceable">startIndex</em> specifies the character at
<em class="replaceable">string</em><tt class="literal">.length+</tt><em class="replaceable">startIndex</em>).</p></dd>

</dl>


<dl>
<dt><em>length</em></dt>
<dd><p>The number of characters to extract from
<em class="replaceable">string</em>, starting at (and including) the
<em class="replaceable">startIndex</em>. If not specified, all the
characters from <em class="replaceable">startIndex</em> to the end of
<em class="replaceable">string</em> are extracted.</p></dd>

</dl>




<h4 class="refsect2">Returns</h4>


<p>A substring of <em class="replaceable">string</em>, starting at
<em class="replaceable">startIndex</em> and including
<em class="replaceable">length</em> characters. If
<em class="replaceable">length</em> is omitted, the result contains
characters from <em class="replaceable">startIndex</em> to the end of
<em class="replaceable">string</em>.</p>




<h4 class="refsect1">Description</h4>


<p>The <em class="filename">substr( )</em> method is one of three methods
that can be used to extract a substring from a string (the others
being <em class="filename">slice( )</em> and <em class="filename">substring( )
</em>). The <em class="filename">substr( )</em> method extracts a
string based on the number of characters specified by
<em class="replaceable">length</em>, not based on two character
indexes.</p>



<h4 class="refsect1">Usage</h4>


<p>Note that <em class="filename">substr( )</em> does not modify
<em class="replaceable">string </em>; it returns a completely new
string.</p>



<h4 class="refsect1">Example</h4>


<blockquote><pre class="code">var fullName = "Steven Sid Mumby";

middleName = fullName.substr(7, 3);       // Assigns "Sid" to middleName
firstName  = fullName.substr(0, 6);       // Assigns "Steven" to firstName
lastName   = fullName.substr(11);         // Assigns "Mumby" to lastName

// Notice the negative starting indexes...
middleName = fullName.substr(-9, 3);      // Assigns "Sid" to middleName
firstName  = fullName.substr(-16, 6);     // Assigns "Steven" to firstName
lastName   = fullName.substr(-5);         // Assigns "Mumby" to lastName</pre></blockquote>



<h4 class="refsect1">See Also</h4>


<p><em class="filename">String.slice( )</em>, <em class="filename">String.substring(
)</em>; <a href="ch04_06.htm">Section 4.6.7, "Combining String Examination with Substring Extraction"</a> and <a href="ch04_06.htm">Section 4.6.6.2, "The substr( ) function"</a> in <a href="ch04_01.htm">Chapter 4, "Primitive Datatypes"</a></p>


</div>

<a name="INDEX-3465" /><a name="INDEX-3466" /><a name="INDEX-3467" /><a name="INDEX-3468" /><a name="INDEX-3469" /><a name="INDEX-3470" /><a name="INDEX-3471" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b><i>

String.substring( ) 
Method</i></b></font></td><td align="right"><i>extract a substring from a string based on positive character positions
</i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><table width="515" border="0" cellpadding="5"><tr><td align="left" /><td align="right" /></tr></table>
<h4 class="refsect1">Availability</h4>


<p><a name="INDEX-3470" />
<a name="INDEX-3471" />Flash 5</p>



<h4 class="refsect1">Synopsis</h4>

<blockquote><pre class="code">
<em>string</em>.substring(<em>startIndex, endIndex</em>)</pre></blockquote>



<h4 class="refsect2">Arguments</h4>


<dl>
<dt><em>startIndex</em></dt>
<dd><p>The positive integer position of the first character to extract from
<em class="replaceable">string</em>. If negative, 0
is used.</p></dd>

</dl>


<dl>
<dt><em>endIndex</em></dt>
<dd><p>The positive integer position of the character
<em class="emphasis">after</em> the last character to extract from
<em class="replaceable">string</em>. Defaults to
<em class="replaceable">string</em><tt class="literal">.length</tt> if
omitted. If negative, 0
is used.</p></dd>

</dl>




<h4 class="refsect2">Returns</h4>


<p>A substring of <em class="replaceable">string</em>, starting at
<em class="replaceable">startIndex</em> and ending at
<em class="replaceable">endIndex-</em><tt class="literal">1</tt>, where both
<em class="replaceable">startIndex</em> and
<em class="replaceable">endIndex</em> are zero-relative.</p>




<h4 class="refsect1">Description</h4>


<p>The <em class="filename">substring( )</em> method is one of three methods
that can be used to extract a substring from a string (the others
being <em class="filename">slice( )</em> and <em class="filename">substr(
)</em> ). The <em class="filename">substring( )</em> function is
identical to <em class="filename">slice( )</em> except that it does not
allow for negative <em class="replaceable">startIndex</em> and
<em class="replaceable">endIndex</em> values, and it automatically
reorders the two indexes if <em class="replaceable">endIndex</em> is
less than <em class="replaceable">startIndex</em>.</p>



<h4 class="refsect1">Usage</h4>


<p>Note that <em class="filename">substring( )</em> does not modify
<em class="replaceable">string </em>; it returns a completely new
string.</p>



<h4 class="refsect1">Example</h4>


<blockquote><pre class="code">// Extract names from a string
var fullName = "Steven Sid Mumby";
middleName = fullName.substring(7, 10);   // Assigns "Sid" to middleName
middleName = fullName.substring(10, 7);   // Assigns "Sid" to middleName
                                          // (indexes are swapped automatically)
firstName  = fullName.substring(0, 6);    // Assigns "Steven" to firstName
lastName   = fullName.substring(11);      // Assigns "Mumby" to lastName</pre></blockquote>


<p>The following example is a reusable function to search for and
replace all occurrences of a substring within a string:</p>


<blockquote><pre class="code">// A Search-and-Replace Function
function replace (origStr, searchStr, replaceStr) {
  var tempStr = "";
  var startIndex = 0;
  if (searchStr == "") {
    return origStr;
  }

  if (origStr.indexOf(searchStr) != -1) {
    while ((searchIndex = origStr.indexOf(searchStr, startIndex)) != -1) {
      tempStr += origStr.substring(startIndex, searchIndex);
      tempStr += replaceStr;
      startIndex = searchIndex + searchStr.length;
    }
    return tempStr + origStr.substring(startIndex);
  } else {
    return origStr;
  }
}

msg = "three times three is four";
trace(replace(msg, "three", "two"));  // Displays: "two times two is four"</pre></blockquote>



<h4 class="refsect1">See Also</h4>


<p><em class="filename">String.slice( )</em>, <em class="filename">String.substr(
)</em>; <a href="ch04_06.htm">Section 4.6.7, "Combining String Examination with Substring Extraction"</a> and <a href="ch04_06.htm">Section 4.6.6.2, "The substr( ) function"</a> in <a href="ch04_01.htm">Chapter 4, "Primitive Datatypes"</a></p>


</div>

<a name="INDEX-3472" /><a name="INDEX-3473" /><a name="INDEX-3474" /><a name="INDEX-3475" /><a name="INDEX-3476" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b><i>


String.toLowerCase( ) Method</i></b></font></td><td align="right"><i>generate a lowercase version of a string
</i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><table width="515" border="0" cellpadding="5"><tr><td align="left" /><td align="right" /></tr></table>
<h4 class="refsect1">Availability</h4>


<p>Flash 5</p>



<h4 class="refsect1">Synopsis</h4>

<blockquote><pre class="code">
<em>string</em>.toLowerCase()</pre></blockquote>



<h4 class="refsect2">Returns</h4>


<p>The lowercase equivalent of <em class="replaceable">string</em> as a
new string. Characters without a lowercase equivalent are left
unchanged.</p>




<h4 class="refsect1">Description</h4>


<p>The <em class="filename">toLowerCase( )</em> method creates a new,
lowercase version of <em class="replaceable">string </em>; it can be
used for formatting or to facilitate case-insensitive character
comparisons. The <em class="filename">toLowerCase( )</em> method converts
only characters in the range A-Z (it does not convert characters with
diacritical marks such as accents and umlauts).</p>



<h4 class="refsect1">Usage</h4>


<p>Note that <em class="filename">toLowerCase( )</em> does not modify
<em class="replaceable">string </em>; it returns a completely new
string.</p>



<h4 class="refsect1">Example</h4>


<blockquote><pre class="code">// Set msg to "this sentence has mixed caps!"
msg = "ThiS SenTencE Has MixED CaPs!".toLowerCase( );

// Perform a case-insensitive comparison of two strings
function caseInsensitiveCompare (stringA, stringB) {
  return (stringA.toLowerCase() == stringB.toLowerCase( ));
}

trace(caseInsensitiveCompare("Colin", "colin"));  // Displays: true</pre></blockquote>



<h4 class="refsect1">See Also</h4>


<p><em class="filename">String.toUpperCase( )</em>;<em class="filename">
</em><a href="ch04_06.htm">Section 4.6.8.2, "The toLowerCase( ) function"</a> in <a href="ch04_01.htm">Chapter 4, "Primitive Datatypes"</a></p>


</div>

<a name="INDEX-3477" /><a name="INDEX-3478" /><a name="INDEX-3479" /><a name="INDEX-3480" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b><i>


String.toUpperCase( ) Method</i></b></font></td><td align="right"><i>generate an uppercase version of a string
</i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><table width="515" border="0" cellpadding="5"><tr><td align="left" /><td align="right" /></tr></table>
<h4 class="refsect1">Availability</h4>


<p>Flash 5</p>



<h4 class="refsect1">Synopsis</h4>

<blockquote><pre class="code">
<em>string</em>.toUpperCase()</pre></blockquote>



<h4 class="refsect2">Returns</h4>


<p>The uppercase (a.k.a. ALL CAPS) equivalent of
<em class="replaceable">string</em> as a new string. Characters without
an uppercase equivalent are left unchanged.</p>




<h4 class="refsect1">Description</h4>


<p>The <em class="filename">toUpperCase( )</em> method creates a new,
uppercase version of <em class="replaceable">string </em>; it can be
used for formatting or to facilitate case-insensitive character
comparisons. The <em class="filename">toUpperCase( )</em> method converts
only characters in the range a-z (it does not convert characters with
diacritical marks such as accents and umlauts).</p>



<h4 class="refsect1">Usage</h4>


<p>Note that <em class="filename">toUpperCase( )</em> does not modify
<em class="replaceable">string </em>; it returns a completely new
string.</p>



<h4 class="refsect1">Example</h4>


<blockquote><pre class="code">"listen to me".toUpperCase( );   // Yields the string "LISTEN TO ME"
var msg1 = "Your Final Score: 234";
var msg2 = msg1.toUpperCase( );  // Set msg2 to "YOUR FINAL SCORE: 234"</pre></blockquote>



<h4 class="refsect1">See Also</h4>


<p><em class="filename">String.toLowerCase( )</em> ;<em class="filename">
</em><a href="ch04_06.htm">Section 4.6.8.1, "The toUpperCase( ) function"</a> in <a href="ch04_01.htm">Chapter 4, "Primitive Datatypes"</a></p>


</div>

<a name="INDEX-3481" /><a name="INDEX-3482" /><a name="INDEX-3483" /><a name="INDEX-3484" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b><i>targetPath( ) Global 

Function</i></b></font></td><td align="right"><i>the absolute path to a movie or movie clip
</i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><table width="515" border="0" cellpadding="5"><tr><td align="left" /><td align="right" /></tr></table>
<h4 class="refsect1">Availability</h4>


<p>Flash 5</p>



<h4 class="refsect1">Synopsis</h4>

<blockquote><pre class="code">
targetPath (<em>movieClip</em>)</pre></blockquote>



<h4 class="refsect2">Arguments</h4>


<dl>
<dt><em>movieClip</em></dt>
<dd><p>A reference to a movie clip object.</p></dd>

</dl>




<h4 class="refsect2">Returns</h4>


<p>A string representing the path to
<em class="replaceable">movieClip</em> in absolute terms, using dot
notation (e.g., <tt class="literal">"_level0.myMovie"</tt>).</p>




<h4 class="refsect1">Description</h4>


<p>The <em class="filename">targetPath( )</em> function returns a movie
clip's reference as a string that describes the absolute path
to the clip (identical to the return value of
<em class="emphasis">MovieClip.valueOf( ) </em>). The
<em class="filename">targetPath( )</em> function is sometimes used to
compose placement-sensitive code that operates on a movie clip
relative to the timeline upon which the clip resides.</p>



<h4 class="refsect1">Bugs</h4>


<p>Note that the example code given for <em class="filename">targetPath(
)</em> in the Flash 5 ActionScript Dictionary does not
represent the proper usage of <em class="filename">targetPath( )</em>;
contrary to what the example implies, it is not a synonym for
<em class="filename">tellTarget( )</em>.</p>



<h4 class="refsect1">Example</h4>


<p>If <tt class="literal">square</tt> is a movie clip contained by
<tt class="literal">shapes</tt>, which resides on the main timeline of
level 0, then inside the <tt class="literal">shapes</tt> clip, the
statement:</p>


<blockquote><pre class="code">targetPath(square);</pre></blockquote>


<p>would return:</p>


<blockquote><pre class="code">"_level0.shapes.square"</pre></blockquote>



<h4 class="refsect1">See Also</h4>


<p><em class="replaceable">MovieClip</em><tt class="literal">._target</tt>,
<em class="filename">MovieClip.valueOf( )</em>; <a href="ch13_05.htm">Section 13.5.6.6, "The targetPath( ) function"</a> in <a href="ch13_01.htm">Chapter 13, "Movie Clips"</a></p>


</div>

<a name="INDEX-3485" /><a name="INDEX-3486" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b><i>
tellTarget( ) Global Function</i></b></font></td><td align="right"><i>execute statements in the scope of a remote movie clip
</i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><table width="515" border="0" cellpadding="5"><tr><td align="left" /><td align="right" /></tr></table>
<h4 class="refsect1">Availability</h4>


<p>Flash 3 and Flash 4; deprecated in Flash 5 in favor of
object-oriented syntax or the <em class="emphasis">with</em> statement</p>



<h4 class="refsect1">Synopsis</h4>

<blockquote><pre class="code">
tellTarget (<em>target</em>) {
        statements
}</pre></blockquote>



<h4 class="refsect2">Arguments</h4>


<dl>
<dt><em>target</em></dt>
<dd><p>A string or reference indicating the path to a movie or movie clip
instance (references are converted to paths when used in a string
context).</p></dd>

</dl>


<dl>
<dt><em>statements</em></dt>
<dd><p>The statements to be executed in the scope of
<em class="replaceable">target</em>.</p></dd>

</dl>




<h4 class="refsect1">Description</h4>


<p>In Flash 3 and Flash 4, <em class="filename">tellTarget( )</em> was the
primary means of communicating between two movie clips (i.e.,
controlling one from the other). It was used to invoke functions such
as <em class="filename">play( )</em>, <em class="filename">stop( )</em>, and
<em class="filename">gotoAndStop( )</em> on remote movie clips. In Flash
4, when variables were added to ActionScript, we could also use
<em class="filename">tellTarget( )</em> to get and set remote clip
variable values. In Flash 5, these endeavors are better accomplished
with the dot operator, ., and the array access operator,
<tt class="literal">[]</tt>. Another alternative to the
<em class="filename">tellTarget( )</em> function is the
<em class="filename">with</em> statement, described in <a href="ch06_01.htm">Chapter 6, "Statements"</a>.</p>



<h4 class="refsect1">Usage</h4>


<p>The <em class="filename">tellTarget( )</em> function may be better
described as a statement because it requires a substatement block.
The point, however, is academic, as <em class="filename">tellTarget(
)</em> has been deprecated.</p>



<h4 class="refsect1">Example</h4>


<blockquote><pre class="code">tellTarget ("ball") {
  gotoAndStop("redStripes");
  _x += 300;
}</pre></blockquote>



<h4 class="refsect1">See Also</h4>


<p><a href="ch06_03.htm">Section 6.3.9, "The with Statement"</a><em class="filename">"</em> in <a href="ch06_01.htm">Chapter 6, "Statements"</a>; <a href="ch13_05.htm">Section 13.5.7, "Whither Tell Target?"</a> and <a href="ch13_01.htm">Section 13.1, "The "Objectness" of Movie Clips"</a> in <a href="ch13_01.htm">Chapter 13, "Movie Clips"</a></p>


</div>

<a name="INDEX-3487" /><a name="INDEX-3488" /><a name="INDEX-3489" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b><i>toggleHighQuality( ) 
Global Function</i></b></font></td><td align="right"><i>change the rendering quality of the Player
</i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><table width="515" border="0" cellpadding="5"><tr><td align="left" /><td align="right" /></tr></table>
<h4 class="refsect1">Availability</h4>


<p>Flash 2 and later; deprecated in Flash 5 in favor of
<tt class="literal">_quality</tt></p>



<h4 class="refsect1">Synopsis</h4>

<blockquote><pre class="code">
toggleHighQuality()</pre></blockquote>



<h4 class="refsect1">Description</h4>


<p>Switches between High quality and Low quality rendering. When set to
High, the Flash Player renders lines with antialiased (smooth) edges.
When set to Low, the Flash Player renders lines with aliased (jagged)
edges. The <em class="filename">toggleHighQuality( )</em> function does
not take any arguments; it simply switches between the two possible
settings -- "High" and "Low". This is
problematic because it doesn't explicitly set the quality to a
known setting, nor does it allow for more than two different possible
quality settings.</p>


<p>As of Flash 5, <em class="filename">toggleHighQuality( )</em> has been
deprecated in favor of the global <tt class="literal">_quality</tt>
property, which supports Low, Medium, High, and Best rendering
settings.</p>



<h4 class="refsect1">See Also</h4>


<p><tt class="literal">_highquality</tt>, <tt class="literal">_quality</tt></p>


</div>

<a name="INDEX-3490" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b><i>trace( ) Global Function</i></b></font></td><td align="right"><i>display a value in the Output window
</i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><table width="515" border="0" cellpadding="5"><tr><td align="left" /><td align="right" /></tr></table>
<h4 class="refsect1">Availability</h4>


<p>Flash 4 and later</p>



<h4 class="refsect1">Synopsis</h4>

<blockquote><pre class="code">
trace(<em>value</em>)</pre></blockquote>



<h4 class="refsect2">Arguments</h4>


<dl>
<dt><em>value</em></dt>
<dd><p>The expression to be resolved and then displayed in the Output
window. If the resolved value of <em class="replaceable">value</em> is
not a string, it is converted to a string before being sent to the
Output window, according to the rules described in <a href="ch03_04.htm">Table 3-2</a>.</p></dd>

</dl>




<h4 class="refsect1">Description</h4>


<p>The <em class="filename">trace( )</em> function is a debugging tool used
only within the Test Movie mode of the Flash authoring environment.
Though unassuming in nature, <em class="filename">trace( )</em> is
actually one of the fundamental components of ActionScript
programming; it allows us to check the value of a variable or
expression at any point during the playback of a movie.</p>



<h4 class="refsect1">Usage</h4>


<p>Unfortunately <em class="filename">trace( )</em> can be quite slow. Turn
off tracing under File <img align="absmiddle" src="figs/U2192.gif" /> Publish Settings <img align="absmiddle" src="figs/U2192.gif" /> Flash using the
Omit Trace Actions option.</p>



<h4 class="refsect1">Example</h4>


<blockquote><pre class="code">trace(firstName);                // Output the value of firstName 
trace(myClip);                   // Output the path to myClip
trace(myClip._x)                 // Output the x coordinate of myClip
trace("hello" + " there");       // Resolve then output the expression</pre></blockquote>



<h4 class="refsect1">See Also</h4>


<p><a href="ch19_01.htm">Chapter 19, "Debugging"</a></p>


</div>

<a name="INDEX-3491" /><a name="INDEX-3492" /><a name="INDEX-3493" /><a name="INDEX-3494" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b><i>


unescape( ) Global Function</i></b></font></td><td align="right"><i>decode an escaped string
</i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><table width="515" border="0" cellpadding="5"><tr><td align="left" /><td align="right" /></tr></table>
<h4 class="refsect1">Availability</h4>


<p>Flash 5</p>



<h4 class="refsect1">Synopsis</h4>

<blockquote><pre class="code">
unescape(<em>stringExpression</em>)</pre></blockquote>



<h4 class="refsect2">Arguments</h4>


<dl>
<dt><em>stringExpression</em></dt>
<dd><p>A string (or expression that resolves to a string) that was
previously encoded via <em class="filename">escape( )</em>.</p></dd>

</dl>




<h4 class="refsect2">Returns</h4>


<p>A new string that is a decoded version of
<em class="replaceable">string</em>.</p>




<h4 class="refsect1">Description</h4>


<p>The<em class="filename"> unescape( )</em> function returns a new string
based on <em class="replaceable">string</em>. The new string contains
equivalent Latin 1 characters for every occurrence of a two-digit
hexadecimal escape sequence prefixed with <tt class="literal">%</tt> in
<em class="replaceable">string</em>. The <em class="filename">escape( )</em>
and <em class="filename">unescape( )</em> functions are used to encode and
decode strings for safe transfer over a network. However, manual use
of <em class="filename">unescape( )</em> is rarely necessary as Flash
automatically converts URL-encoded text when it is imported via
<em class="filename">loadVariables( )</em>.</p>



<h4 class="refsect1">Example</h4>


<blockquote><pre class="code">var msg = "hello!";
// Set msgCoded to "hello%21"
msgCoded = escape(msg);
// Set msgDecoded to "hello!"
var msgDecoded = unescape(msgCoded);</pre></blockquote>



<h4 class="refsect1">See Also</h4>


<p><em class="filename">escape( )</em>; <a href="appb_01.htm">Appendix B, "Latin 1 Character Repertoire and Keycodes"</a></p>


</div>

<a name="INDEX-3495" /><a name="INDEX-3496" /><a name="INDEX-3497" /><a name="INDEX-3498" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b><i>unloadMovie( ) 

Global Function</i></b></font></td><td align="right"><i>remove a movie or movie clip from the Player
</i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><table width="515" border="0" cellpadding="5"><tr><td align="left" /><td align="right" /></tr></table>
<h4 class="refsect1">Availability</h4>


<p>Flash 4 and later (Flash 5's <em class="filename">unloadMovie(
)</em> function corresponds to Flash 4's <em class="filename">Unload
Movie</em> with a target path)</p>



<h4 class="refsect1">Synopsis</h4>

<blockquote><pre class="code">
unloadMovie(<em>target</em>)</pre></blockquote>



<h4 class="refsect2">Arguments</h4>


<dl>
<dt><em>target</em></dt>
<dd><p>A string or reference indicating the path to the movie clip or
document level to remove from the Player (references are converted to
paths when used in a string context).</p></dd>

</dl>




<h4 class="refsect1">Description</h4>


<p>The <em class="filename">unloadMovie( )</em> function is most often used
to delete movies from document levels in the Player. For example, if
a movie is loaded onto level 1 in the Player, we may remove that
movie from the Player as follows:</p>


<blockquote><pre class="code">unloadMovie("_level1");</pre></blockquote>


<p>The<em class="filename"> unloadMovie( )</em> function can also be used on
movie clip instances, in which case it removes the content of the
instance but not the instance itself. The instance is left on stage
as an empty shell; we may load subsequent movies into that shell.
Hence, a single clip can act as a container for dynamic content that
is managed through successive <em class="filename">loadMovie( )</em> and
<em class="filename">unloadMovie( )</em> executions.</p>



<h4 class="refsect1">See Also</h4>


<p><em class="filename">loadMovie( )</em>, <em class="filename">MovieClip.unloadMovie(
)</em>, <em class="filename">unloadMovieNum( )</em>; <a href="ch13_06.htm">Section 13.6, "Removing Clip Instances and Main Movies"</a> and <a href="ch13_08.htm">Section 13.8.3.1, "Method versus global function overlap issues"</a>
in <a href="ch13_01.htm">Chapter 13, "Movie Clips"</a></p>


</div>

<a name="INDEX-3499" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b><i>unloadMovieNum( ) Global Function</i></b></font></td><td align="right"><i>remove a movie from a document level
</i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><table width="515" border="0" cellpadding="5"><tr><td align="left" /><td align="right" /></tr></table>
<h4 class="refsect1">Availability</h4>


<p>Flash 3 and later (Flash 5's <em class="filename">unloadMovieNum(
)</em> function corresponds to Flash 3's <em class="filename">unload
Movie</em>, which worked only with numbered levels)</p>



<h4 class="refsect1">Synopsis</h4>

<blockquote><pre class="code">
unloadMovieNum(<em>level</em>)</pre></blockquote>



<h4 class="refsect2">Arguments</h4>


<dl>
<dt><em>level</em></dt>
<dd><p>A non-negative integer or an expression that yields a non-negative
integer, indicating the document level to unload.</p></dd>

</dl>




<h4 class="refsect1">Description</h4>


<p>The<em class="filename"> unloadMovieNum( )</em> function is nearly
identical to <em class="filename">unloadMovie( )</em> except that it
requires the target <em class="replaceable">level</em> of the load
operation to be specified as a number rather than as a string. This
means that <em class="filename">unloadMovieNum( )</em> can only remove
movies on document levels, not movie clips. It is normally used when
we wish to dynamically assign the level of a movie to unload, as in:</p>


<blockquote><pre class="code">var x = 3;
unloadMovieNum(x);</pre></blockquote>


<p>This can also be achieved using string concatenation with the regular
<em class="filename">unloadMovie( )</em> function:</p>


<blockquote><pre class="code">unloadMovie("_level" + x);</pre></blockquote>



<h4 class="refsect1">See Also</h4>


<p><em class="filename">loadMovieNum( )</em>,
<em class="filename">Movieclip.unloadMovie( )</em>,<em class="filename"> unloadMovie(
)</em>; <a href="ch13_06.htm">Section 13.6, "Removing Clip Instances and Main Movies"</a> in <a href="ch13_01.htm">Chapter 13, "Movie Clips"</a></p>


</div>

<a name="INDEX-3500" /><a name="INDEX-3501" /><a name="INDEX-3502" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b><i>updateAfterEvent( ) 
Global Function</i></b></font></td><td align="right"><i>render the contents of the Stage between frames
</i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><table width="515" border="0" cellpadding="5"><tr><td align="left" /><td align="right" /></tr></table>
<h4 class="refsect1">Availability</h4>


<p>Flash 5</p>



<h4 class="refsect1">Synopsis</h4>

<blockquote><pre class="code">
updateAfterEvent()</pre></blockquote>



<h4 class="refsect1">Description</h4>


<p>The user-input clip event handlers (<em class="filename">mouseMove</em>,
<em class="filename">mouseDown</em>, <em class="filename">mouseUp</em>,
<em class="filename">keyDown</em>, and <em class="filename">keyUp</em>) often
occur between frame renderings in the Flash Player. To force the
screen to reflect visual changes that occur during a user-input clip
event handler, we invoke <em class="filename">updateAfterEvent( )</em>
within any of those handlers. Note, however, that
<em class="filename">updateAfterEvent( )</em> is not an arbitrary
screen-refreshing tool; it works only within the user-input clip
events. Outside of <em class="filename">onClipEvent( )</em> handlers, it
has no effect.</p>



<h4 class="refsect1">Example</h4>


<p>The following script attached to a movie clip causes the clip to
follow the mouse pointer and refreshes the screen every time the
pointer moves. Because we refresh the screen every time the pointer
moves, the clip following the pointer animates very smoothly:</p>


<blockquote><pre class="code">onClipEvent (mouseMove) {
  _x = _root._xmouse;
  _y = _root._ymouse;
  updateAfterEvent( );
}</pre></blockquote>



<h4 class="refsect1">Bugs</h4>


<p>Note that the Flash 5 ActionScript Dictionary incorrectly describes
the <em class="filename">updateAfterEvent( )</em> function as accepting a
clip event as an argument. It does not accept any arguments.</p>



<h4 class="refsect1">See Also</h4>


<p>See <a href="ch10_14.htm">Section 10.14, "Refreshing the Screen with updateAfterEvent"</a> in <a href="ch10_01.htm">Chapter 10, "Events and Event Handlers"</a></p>


</div>

<a name="INDEX-3503" /><a name="INDEX-3504" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b><i>
$version "Global" Property</i></b></font></td><td align="right"><i>the version of the Flash Player
</i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><table width="515" border="0" cellpadding="5"><tr><td align="left" /><td align="right" /></tr></table>
<h4 class="refsect1">Availability</h4>


<p>Flash 4 Build 11 and later; deprecated in Flash 5 in favor of
<em class="filename">get Version</em></p>



<h4 class="refsect1">Synopsis</h4>

<blockquote><pre class="code">
_root.$version</pre></blockquote>



<h4 class="refsect1">Access</h4>


<p>Read-only</p>



<h4 class="refsect1">Description</h4>


<p>The <tt class="literal">$version</tt> property contains the same string as
the return value of the global <em class="filename">getVersion( )</em>
function (operating system, followed by Player version information).
The <tt class="literal">$version</tt> property was introduced midway
through the life cycle of the Flash 4 Player and has been replaced by
the <em class="filename">getVersion( )</em> function. It is technically
not a global property, but a property of the main movie timeline;
from any other movie clip timeline, it must be accessed as
<tt class="literal">_root.$version</tt>.</p>



<h4 class="refsect1">See Also</h4>


<p><em class="filename">getVersion( )</em></p>


</div>

<a name="INDEX-3505" /><a name="INDEX-3506" /><a name="INDEX-3507" /><a name="INDEX-3508" /><a name="INDEX-3509" /><a name="INDEX-3510" /><a name="INDEX-3511" /><a name="INDEX-3512" /><a name="INDEX-3513" /><a name="INDEX-3514" /><a name="INDEX-3515" /><a name="INDEX-3516" /><a name="INDEX-3517" /><a name="INDEX-3518" /><a name="INDEX-3519" /><a name="INDEX-3520" /><a name="INDEX-3521" /><a name="INDEX-3522" /><a name="INDEX-3523" /><a name="INDEX-3524" /><a name="INDEX-3525" /><a name="INDEX-3526" /><a name="INDEX-3527" /><a name="INDEX-3528" /><a name="INDEX-3529" /><a name="INDEX-3530" /><a name="INDEX-3531" /><a name="INDEX-3532" /><a name="INDEX-3533" /><a name="INDEX-3534" /><a name="INDEX-3535" /><a name="INDEX-3536" /><a name="INDEX-3537" /><a name="INDEX-3538" /><a name="INDEX-3539" /><a name="INDEX-3540" /><a name="INDEX-3541" /><a name="INDEX-3542" /><a name="INDEX-3543" /><a name="INDEX-3544" /><a name="INDEX-3545" /><a name="INDEX-3546" /><a name="INDEX-3547" /><a name="INDEX-3548" /><a name="INDEX-3549" /><a name="INDEX-3550" /><a name="INDEX-3551" /><a name="INDEX-3552" /><a name="INDEX-3553" /><a name="INDEX-3554" /><a name="INDEX-3555" /><a name="INDEX-3556" /><a name="INDEX-3557" /><a name="INDEX-3558" /><a name="INDEX-3559" /><a name="INDEX-3560" /><a name="INDEX-3561" /><a name="INDEX-3562" /><a name="INDEX-3563" /><a name="INDEX-3564" /><a name="INDEX-3565" /><a name="INDEX-3566" /><a name="INDEX-3567" /><a name="INDEX-3568" /><a name="INDEX-3569" /><a name="INDEX-3570" /><a name="INDEX-3571" /><a name="INDEX-3572" /><a name="INDEX-3573" /><a name="INDEX-3574" /><a name="INDEX-3575" /><a name="INDEX-3576" /><a name="INDEX-3577" /><a name="INDEX-3578" /><a name="INDEX-3579" /><a name="INDEX-3580" /><a name="INDEX-3581" /><a name="INDEX-3582" /><a name="INDEX-3583" /><a name="INDEX-3584" /><a name="INDEX-3585" /><a name="INDEX-3586" /><a name="INDEX-3587" /><a name="INDEX-3588" /><a name="INDEX-3589" /><a name="INDEX-3590" /><a name="INDEX-3591" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b><i>XML Class</i></b></font></td><td align="right"><i>DOM-based support for XML-structured data
</i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><table width="515" border="0" cellpadding="5"><tr><td align="left" /><td align="right" /></tr></table>
<h4 class="refsect1">Availability</h4>


<p>Flash 5</p>



<h4 class="refsect1">Constructor</h4>

<blockquote><pre class="code">
new XML()
new XML(<em>source</em>)</pre></blockquote>



<h4 class="refsect2">Arguments</h4>


<dl>
<dt><em>source</em></dt>
<dd><p>An optional string containing well-formed XML (or HTML) data to be
parsed into an <em class="filename">XML</em> object hierarchy.</p></dd>

</dl>




<h4 class="refsect1">Properties</h4>
<a name="INDEX-3506" /><a name="INDEX-3507" />


<a name="INDEX-3508" />
<a name="INDEX-3509" />

<dl>
<dt><em>attributes</em></dt>
<dd><p>An object whose properties store element attributes.</p></dd>

</dl>

<a name="INDEX-3510" />
<a name="INDEX-3511" />

<dl>
<dt><em>childNodes</em></dt>
<dd><p>An array of references to a node's children.</p></dd>

</dl>


<a name="INDEX-3512" />
<a name="INDEX-3513" />

<dl>
<dt><em>contentType</em></dt>
<dd><p>The MIME content type to be transmitted to servers.</p></dd>

</dl>


<a name="INDEX-3514" />
<a name="INDEX-3515" />

<dl>
<dt><em>docTypeDecl</em></dt>
<dd><p>The document's <tt class="literal">DOCTYPE</tt> tag.</p></dd>

</dl>


<a name="INDEX-3516" />
<a name="INDEX-3517" />

<dl>
<dt><em>firstChild</em></dt>
<dd><p>A reference to the first descendant of a node.</p></dd>

</dl>

<a name="INDEX-3518" />
<a name="INDEX-3519" />


<dl>
<dt><em>ignoreWhite</em></dt>
<dd><p>Determines whether to ignore whitespace nodes during XML parsing.</p></dd>

</dl>

<a name="INDEX-3520" />
<a name="INDEX-3521" />

<dl>
<dt><em>lastChild</em></dt>
<dd><p>A reference to the last descendant of a node.</p></dd>

</dl>


<a name="INDEX-3522" />
<a name="INDEX-3523" />

<dl>
<dt><em>loaded</em></dt>
<dd><p>Status of a <em class="filename">load( )</em> or <em class="filename">sendAndLoad(
)</em> operation.</p></dd>

</dl>


<a name="INDEX-3524" />
<a name="INDEX-3525" />

<dl>
<dt><em>nextSibling</em></dt>
<dd><p>A reference to the node after this node in the current level of the
object hierarchy.</p></dd>

</dl>


<a name="INDEX-3526" />
<a name="INDEX-3527" />

<dl>
<dt><em>nodeName</em></dt>
<dd><p>The name of the current node.</p></dd>

</dl>


<a name="INDEX-3528" />
<a name="INDEX-3529" />

<dl>
<dt><em>nodeType</em></dt>
<dd><p>The type of the current node.</p></dd>

</dl>


<a name="INDEX-3530" />
<a name="INDEX-3531" />

<dl>
<dt><em>nodeValue</em></dt>
<dd><p>The value of the current node.</p></dd>

</dl>


<a name="INDEX-3532" />
<a name="INDEX-3533" />

<dl>
<dt><em>parentNode</em></dt>
<dd><p>A reference to the immediate ancestor of a node.</p></dd>

</dl>

<a name="INDEX-3534" />
<a name="INDEX-3535" />


<dl>
<dt><em>previousSibling</em></dt>
<dd><p>A reference to the node before this node in the current level of the
object hierarchy.</p></dd>

</dl>


<a name="INDEX-3536" />
<a name="INDEX-3537" />

<dl>
<dt><em>status</em></dt>
<dd><p>Error code describing the result of parsing XML source into an object
hierarchy.</p></dd>

</dl>


<a name="INDEX-3538" />
<a name="INDEX-3539" />

<dl>
<dt><em>xmlDecl</em></dt>
<dd><p>The document's XML declaration tag.</p></dd>

</dl>



<h4 class="refsect1">Methods</h4>
<a name="INDEX-3540" /><a name="INDEX-3541" />

<a name="INDEX-3542" />
<a name="INDEX-3543" />

<dl>
<dt><em>appendChild( )</em></dt>
<dd><p>Add a new child node to a node.</p></dd>

</dl>


<a name="INDEX-3544" />
<a name="INDEX-3545" />

<dl>
<dt><em>cloneNode( )</em></dt>
<dd><p>Create a copy of a node.</p></dd>

</dl>


<a name="INDEX-3546" />
<a name="INDEX-3547" />

<dl>
<dt><em>createElement( )</em></dt>
<dd><p>Create a new element node.</p></dd>

</dl>


<a name="INDEX-3548" />
<a name="INDEX-3549" />

<dl>
<dt><em>createTextNode( )</em></dt>
<dd><p>Create a new text node.</p></dd>

</dl>


<a name="INDEX-3550" />
<a name="INDEX-3551" />

<dl>
<dt><em>hasChildNodes( )</em></dt>
<dd><p>Check if a node has any descendants.</p></dd>

</dl>


<a name="INDEX-3552" />
<a name="INDEX-3553" />

<dl>
<dt><em>insertBefore( )</em></dt>
<dd><p>Add a sibling node before a node.</p></dd>

</dl>


<a name="INDEX-3554" />
<a name="INDEX-3555" />

<dl>
<dt><em>load( )</em></dt>
<dd><p>Import XML source code from an external document.</p></dd>

</dl>


<a name="INDEX-3556" />
<a name="INDEX-3557" />

<dl>
<dt><em>parseXML( )</em></dt>
<dd><p>Parse a string of XML source code.</p></dd>

</dl>


<a name="INDEX-3558" />
<a name="INDEX-3559" />

<dl>
<dt><em>removeNode( ) </em></dt>
<dd><p>Delete a node from an object hierarchy.</p></dd>

</dl>


<a name="INDEX-3560" />
<a name="INDEX-3561" />

<dl>
<dt><em>send( )</em></dt>
<dd><p>Send XML source code to a script.</p></dd>

</dl>


<a name="INDEX-3562" />
<a name="INDEX-3563" />

<dl>
<dt><em>sendAndLoad( )</em></dt>
<dd><p>Send XML source code to a script and receive XML source in return.</p></dd>

</dl>


<a name="INDEX-3564" />
<a name="INDEX-3565" />

<dl>
<dt><em>toString( )</em></dt>
<dd><p>Convert an <em class="filename">XML</em> object to a string.</p></dd>

</dl>



<h4 class="refsect1">Event Handlers</h4>
<a name="INDEX-3566" /><a name="INDEX-3567" />


<a name="INDEX-3568" />
<a name="INDEX-3569" />
<a name="INDEX-3570" />


<dl>
<dt><em>onData( )</em></dt>
<dd><p>Handler executed when external XML source finishes loading.</p></dd>

</dl>


<a name="INDEX-3571" />
<a name="INDEX-3572" />
<a name="INDEX-3573" />

<dl>
<dt><em>onLoad( )</em></dt>
<dd><p>Handler executed when external XML data has been parsed into an
object hierarchy.</p></dd>

</dl>



<h4 class="refsect1">Description</h4>


<p>We use <a name="INDEX-3574" />
<a name="INDEX-3575" /> <a name="INDEX-3576" />objects of the <em class="filename">XML</em>
class to manipulate the content of an XML (or HTML) document in an
object-oriented manner and to send XML-formatted data to and from
Flash. Using the methods and properties of an
<em class="filename">XML</em> object, we may build an XML-structured
document (or read an existing one) and efficiently access, change, or
remove the information in that document.</p>


<p>The source code of an XML document consists primarily of a series of
elements and attributes. For example, in the following XML fragment,
the elements <tt class="literal">BOOK</tt>, <tt class="literal">TITLE</tt>,
<tt class="literal">AUTHOR</tt>, and <tt class="literal">PUBLISHER</tt> take the
same form as well-known HTML tags, and we see that the
<tt class="literal">AUTHOR </tt>element supports one attribute,
<tt class="literal">SALUTATION</tt>:</p>


<blockquote><pre class="code">&lt;BOOK&gt;
  &lt;TITLE&gt;ActionScript: The Definitive Guide&lt;/TITLE&gt;
  &lt;AUTHOR SALUTATION="Mr."&gt;Colin Moock&lt;/AUTHOR&gt;
  &lt;PUBLISHER&gt;O'Reilly&lt;/PUBLISHER&gt;
&lt;/BOOK&gt;</pre></blockquote>


<p>From an object-oriented perspective, the content of an XML document
can be treated as a hierarchy of objects in which each element and
text block becomes an <a name="INDEX-3577" />object
<a name="INDEX-3578" />node in a flowchart-like structure. <a href="ch20_05.htm">Figure 20-1</a> shows our simple XML
<tt class="literal">&lt;BOOK&gt;</tt> fragment represented conceptually as
an XML object hierarchy.</p>


<a name="ch20-97054" /><div class="figure"><img alt="Figure 20-1" src="figs/act.R01.gif" /></div><h4 class="objtitle">Figure 20-1. A sample XML node hierarchy</h4>

<p>Let's consider the structure and semantics of this sample XML
object hierarchy from left to right. We start with the main
<em class="filename">XML</em> object, shown in <a href="ch20_05.htm">Figure 20-1</a> as <tt class="literal">DOCUMENT</tt>, which is
created automatically by the <em class="filename">XML</em> constructor and
serves as the container for our XML object hierarchy.</p>


<p>Moving one tier to the right in the hierarchy, we come to
<tt class="literal">BOOK</tt>, which is the first element in our XML source
code fragment and, in this case, also the first <em class="emphasis">object
node</em> under <tt class="literal">DOCUMENT</tt>. The
<tt class="literal">BOOK</tt> node is the <em class="emphasis">root</em> of our
XML data structure -- every well-formed XML document must have an
all-encompassing root element such as <tt class="literal">BOOK</tt> that
contains every other element. Branches of an XML object hierarchy are
added to the tree either by parsing XML source code or invoking
node-addition methods on the objects in the hierarchy.</p>


<p>When a node is contained by another node, the <em class="emphasis">contained
</em>node is said to be a <em class="emphasis">child</em> of the
containing node, which is known as the <em class="emphasis">parent</em>.
In our example, <tt class="literal">BOOK</tt> is the first child of
<tt class="literal">DOCUMENT</tt>, and <tt class="literal">DOCUMENT</tt> is
<tt class="literal">BOOK</tt>'s parent.</p>


<p>As we move to the right in <a href="ch20_05.htm">Figure 20-1</a>, we see that
<tt class="literal">BOOK</tt> has seven children, including four
<tt class="literal">#text</tt> nodes that do not seem to be present in our
original XML document. Each occurrence of
<a name="INDEX-3579" />whitespace between elements in XML
source code is rendered as an object in an XML object hierarchy. If
we look closely, we'll find whitespace -- a carriage return
and a Tab character -- between <tt class="literal">BOOK</tt> and
<tt class="literal">TITLE</tt> in the preceding XML fragment. This
whitespace is represented by a <tt class="literal">#text</tt> node in <a href="ch20_05.htm">Figure 20-1</a>, which also shows similar whitespace nodes
after the <tt class="literal">TITLE</tt>, <tt class="literal">AUTHOR</tt>, and
<tt class="literal">PUBLISHER</tt> nodes.</p>


<p><tt class="literal">BOOK</tt>'s children are
<em class="emphasis">siblings</em> of one another (i.e., they reside on
the same level in the hierarchy). For example, we say that
<tt class="literal">AUTHOR</tt>'s <em class="emphasis">next sibling</em>
is <tt class="literal">#text</tt>, and <tt class="literal">AUTHOR</tt>'s
<em class="emphasis">previous sibling</em> is <tt class="literal">#text</tt>.
You can see how the <tt class="literal">#text</tt><a name="INDEX-3580" /> nodes
get in our way when we're moving from sibling to sibling in a
hierarchy. We can deal with these empty whitespace nodes in one of
the following ways:</p>


<ul><li><p>By manually stripping them out of our object hierarchy (see the later
examples for whitespace-stripping code)</p></li></ul>
<ul><li><p>By detecting and then sidestepping them in our code (see the
<tt class="literal">nextSibling</tt> and <tt class="literal">previousSibling</tt>
properties for ways of moving over nodes)</p></li></ul>
<ul><li><p>By simply removing the formatting whitespace in our XML source,
ensuring whitespace nodes don't appear in the first place</p></li></ul>
<ul><li><p>By setting our <em class="filename">XML</em> object's
<tt class="literal">ignoreWhite</tt> property to <tt class="literal">true</tt>
before parsing our XML source (available as of Build 41 of the Flash
5 Player)</p></li></ul>
<p>Finally, we move to the last tier in the hierarchy where we find that
the <tt class="literal">TITLE</tt>, <tt class="literal">AUTHOR</tt>, and
<tt class="literal">PUBLISHER</tt> nodes each has a single child. Each
child is a text node, corresponding to the text contained by the
elements <tt class="literal">TITLE</tt>, <tt class="literal">AUTHOR</tt>, and
<tt class="literal">PUBLISHER</tt>. Notice that the text contained by an
element in XML source code resides in a child node of that element in
the corresponding<em class="emphasis"> </em>object hierarchy. To access
text contained by an element, we must always refer to that
element's child using either
<tt class="literal">firstChild.nodeValue</tt> or
<tt class="literal">childNodes[0].nodeValue</tt>, which we'll
consider shortly.</p>


<p>But what of the element attributes? Where do they appear in our XML
object hierarchy? You might expect <tt class="literal">AUTHOR</tt>'s
<tt class="literal">SALUTATION</tt> attribute to be depicted as a child
node called <tt class="literal">SALUTATION</tt>. But in practice, an
attribute is not considered a <em class="emphasis">child</em> of the
element that defines it, but rather a <em class="emphasis">property</em>
of that element. To learn how attribute properties are accessed, see
the <em class="replaceable">XML</em><tt class="literal">.attributes</tt>
entry.</p>


<p>Let's see how to build an <a name="INDEX-3581" />XML
document as a hierarchy of node objects. To create a new, blank
<em class="filename">XML</em> object, we use the <em class="filename">XML(
)</em> constructor:</p>


<blockquote><pre class="code">myDocument = new XML( );</pre></blockquote>


<p>We can then add nodes to our empty <em class="filename">XML</em> object by
invoking methods such as <em class="filename">appendChild( )</em>,
<em class="filename">parseXML( )</em>, and <em class="filename">load( )</em> on
the object. Alternatively, we may create an <em class="filename">XML</em>
object from existing XML source in our script by invoking the XML
constructor with the <em class="replaceable">source</em> argument:</p>


<blockquote><pre class="code">myDocument = new XML(source);</pre></blockquote>


<p>For example:</p>


<blockquote><pre class="code">myDocument = new XML('&lt;P&gt;hello world!&lt;/P&gt;');</pre></blockquote>


<p>When a <em class="replaceable">source</em> argument is supplied to the
<em class="filename">XML( )</em> constructor,
<em class="replaceable">source</em> is parsed and converted into a new
object hierarchy, which is then stored in the object returned by the
constructor. (In this case, the node <tt class="literal">P</tt> is assigned
as <tt class="literal">myDocument</tt>'s first child and the text
node with the <tt class="literal">nodeValue</tt> "hello world!"
is assigned as <tt class="literal">P</tt>'s first child.)</p>


<p>Once an XML hierarchy is created and stored in an object, we may
access the information in that hierarchy using the methods and
properties of the <em class="filename">XML</em> class. For example,
suppose we want to retrieve the text "hello world!" in
<tt class="literal">myDocument</tt>. Thinking in object-oriented terms, we
might assume that we could access the text of <tt class="literal">P</tt> as
a property of <tt class="literal">myDocument</tt>, as follows:
<tt class="literal">myDocument.P</tt>. In fact, that won't work;
instead of referring to nodes by name, we use the
<em class="filename">XML</em> class's built-in properties, such as
<tt class="literal">firstChild</tt> and <tt class="literal">childNodes</tt>, to
access nodes. For example, to access the <tt class="literal">P</tt> node,
we could use:</p>


<blockquote><pre class="code">myDocument.firstChild       // Accesses P
myDocument.childNodes[0]    // Also accesses P</pre></blockquote>


<p>Because <tt class="literal">firstChild</tt> returns a reference to the
first child node of the specified node in the hierarchy,
<tt class="literal">myDocument.firstChild</tt> returns a reference to node
<tt class="literal">P</tt>. However, we want the text "hello
world!" contained by <tt class="literal">P</tt>, not node
<tt class="literal">P</tt> itself. As we learned earlier, the text of an
element node is stored as a child of that node. Therefore, we can
reference the text node (i.e., the first descendant of
<tt class="literal">P</tt>), like this:</p>


<blockquote><pre class="code">myDocument.firstChild.firstChild  // Accesses the text node under P</pre></blockquote>


<p>To obtain the value of a node, we use the
<tt class="literal">nodeValue</tt> property. For example, we can display
the value "hello world!" in the Output window using:</p>


<blockquote><pre class="code">trace(myDocument.firstChild.firstChild.nodeValue);</pre></blockquote>


<p>Or, we can reassign the value of the text node under
<tt class="literal">P</tt> using:</p>


<blockquote><pre class="code">myDocument.firstChild.firstChild.nodeValue = "goodbye cruel world";</pre></blockquote>


<p>To remove the <tt class="literal">P</tt> node altogether, add a new node,
or move the text "hello world!" to another node, we
invoke appropriate methods of the <em class="filename">XML</em> class. For
example:</p>


<blockquote><pre class="code">// Delete P
myDocument.firstChild.removeNode( );

// Make a new element named P
newElement = myDocument.createElement("P");

// Add the new element to our document
myDocument.appendChild(newElement);

// Make a new text node to attach to P
newText = myDocument.createTextNode("XML is fun");

// Attach the new text node to P
myDocument.firstChild.appendChild(newText);</pre></blockquote>


<p>As you can see, working with XML-structured data in an object
hierarchy is a mediated endeavor. We build, destroy, and manipulate
the data by invoking methods on, and accessing properties of,
objects. To learn the various tools available for working with XML
data, explore the properties and methods of the
<em class="filename">XML</em> class, which are listed next.</p>


<p>ActionScript manipulates XML data using the Document Object Model
(DOM) standard published by the World Wide Web Consortium (W3C). For
thorough coverage of how the DOM represents XML-structured data as an
object hierarchy, consult:</p>


<blockquote class="simplelist">

<p><a href="../../../../../../www.w3.org/DOM">http://www.w3.org/DOM</a></p>

</blockquote>


<p>For details on the language-independent specifications of the core
DOM, see:</p>


<blockquote class="simplelist">

<p><a href="../../../../../../www.w3.org/TR/REC-DOM-Level-1/level-one-core.html">http://www.w3.org/TR/REC-DOM-Level-1/level-one-core.html</a> </p>

</blockquote>


<p>(pay particular attention to "Interface Node" under 1.2,
<em class="emphasis">Fundamental Interfaces</em>). <a name="INDEX-3582" />For details on
how the DOM is implemented in ECMA-262, see:</p>


<blockquote class="simplelist">

<p><a name="INDEX-3583" />
<a name="INDEX-3584" />
<a name="INDEX-3585" /><a href="../../../../../../www.w3.org/TR/REC-DOM-Level-1/ecma-script-language-binding.html">http://www.w3.org/TR/REC-DOM-Level-1/ecma-script-language-binding.html</a></p>

</blockquote>



<h4 class="refsect1">Example</h4>


<p>We've learned that the <a name="INDEX-3586" />whitespace
<a name="INDEX-3587" />between any two elements in XML source code
is represented by a text node in the corresponding
<em class="filename">XML</em> object hierarchy. Prior to Build 41 of the
Flash 5 Player, undesired whitespace nodes had to be manually
stripped out of an XML object hierarchy. Stripping a particular kind
of node is a common task in XML handling and serves as a good example
of <em class="emphasis">tree traversal</em> (moving through every node in
a hierarchy). Let's consider two different techniques for
stripping whitespace nodes from a document.</p>


<p>In the first example, we'll use a classic FIFO (First In First
Out) stack to add all the nodes in a tree to an array for processing.
The <em class="filename">stripWhitespaceTraverse( )</em> function seeds an
array of node elements with <em class="replaceable">theNode</em>, which
it receives as an argument. Then it enters a loop in which it removes
the first node in the array, processes that node, and adds its
children (if any) to the array. When the array has no more elements,
all the descendants of <em class="replaceable">theNode</em> have been
processed. During processing, any node that has no children is
considered potential whitespace (because text nodes never have
children). Each of these nodes is checked to see if:</p>


<ul><li><p>It is a text node (as determined by its <tt class="literal">nodeType</tt>
property)</p></li></ul>
<ul><li><p>It contains any characters above ASCII 32, which are not considered
whitespace</p></li></ul>
<p>Any text nodes containing only characters below ASCII 32 (i.e., only
whitespace) are removed:</p>


<blockquote><pre class="code">// Strip Whitespace Using a FIFO Stack
// Strips any whitespace nodes descending from theNode by traversing the tree
function stripWhitespaceTraverse (theNode) {
  // Create a list of nodes to process
  var nodeList = new Array( );
  // Seed the list with the node passed to the function
  nodeList[0] = theNode;

  // Process descendants until there are none left to process
  while (nodeList.length &gt; 0) {
    // Remove the first node from the list and assign it to currentNode
    currentNode = nodeList.shift( );

    // If this node has children...
    if (currentNode.childNodes.length &gt; 0) {
      // ...add this node's children to the list of nodes to process
      nodeList = nodeList.concat(currentNode.childNodes);
    } else {
      // ...otherwise, this node is the end of a branch, so check if it's a
      // text node. If so, check if it contains only empty whitespace.
      // nodeType 3 indicates a text node
      if (currentNode.nodeType == 3) {
        var i = 0;
        var emptyNode = true;
        for (i = 0; i &lt; currentNode.nodeValue.length; i++) {
          // A useful character is anything over 32 (space, tab,
          // new line, etc. are all below).
          if (currentNode.nodeValue.charCodeAt(i) &gt; 32) {
            emptyNode = false;
            break;
          }
        }
      }

      // If no useful charaters were found, delete the node
      if (emptyNode) {
        currentNode.removeNode( );
      }
    } 
  }
}</pre></blockquote>


<p>The technique shown in the preceding example is traditionally very
efficient. However, in the Flash 5 Player, the
<em class="filename">Array.concat( )</em> method executes quite slowly.
Hence, it's quicker to strip
<a name="INDEX-3588" />whitespace using the
technique shown in the following example. Study the comments
carefully:</p>


<blockquote><pre class="code">// Strip Whitespace Using Function Recursion
// Strips whitespace nodes from an XML document 
// by passing twice through each level in the tree
function stripWhitespaceDoublePass(theNode) {
  // Loop through all the children of theNode
  for (var i = 0; i &lt; theNode.childNodes.length; i++) {
    // If the current node is a text node...
    if (theNode.childNodes[i].nodeType == 3) {

      // ...check for any useful characters in the node
      var j = 0;
      var emptyNode = true;
      for (j = 0;j &lt; theNode.childNodes[i].nodeValue.length; j++) {
        // A useful character is anything over 32 (space, tab, 
        // new line, etc. are all below)
        if (theNode.childNodes[i].nodeValue.charCodeAt(j) &gt; 32) {
          emptyNode = false;
          break;
        }
      }

      // If no useful charaters were found, delete the node
      if (emptyNode) {
        theNode.childNodes[i].removeNode( );
      }
    }
  }

  // Now that all the whitespace nodes have been removed from theNode,
  // call stripWhitespaceDoublePass() recursively on its remaining children.
  for (var k = 0; k &lt; theNode.childNodes.length; k++) {
    stripWhitespaceDoublePass(theNode.childNodes[k]);
  }
}</pre></blockquote>



<h4 class="refsect1">See Also</h4>


<p><a name="INDEX-3589" />The <em class="emphasis">XMLnode</em>
class, <a name="INDEX-3590" />The <em class="emphasis">XMLSocket</em>
class; <a href="ch18_05.htm">Section 18.5, "HTML Support"</a> <a name="INDEX-3591" />in <a href="ch18_01.htm">Chapter 18, "On-Screen Text Fields"</a></p>


</div>

<a name="INDEX-3592" /><a name="INDEX-3593" /><a name="INDEX-3594" /><a name="INDEX-3595" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b><i>
XML.appendChild( ) Method</i></b></font></td><td align="right"><i>add a new child node to a node, or move an existing node
</i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><table width="515" border="0" cellpadding="5"><tr><td align="left" /><td align="right" /></tr></table>
<h4 class="refsect1">Availability</h4>


<p>Flash 5</p>



<h4 class="refsect1">Synopsis</h4>

<blockquote><pre class="code">
<em>theNode</em>.appendChild(<em>childNode</em>)</pre></blockquote>



<h4 class="refsect2">Arguments</h4>


<dl>
<dt><em>childNode</em></dt>
<dd><p>An existing XML node object.</p></dd>

</dl>




<h4 class="refsect1">Description</h4>


<p>The <em class="filename">appendChild( )</em> method adds the specified
<em class="replaceable">childNode</em> to
<em class="replaceable">theNode</em> as
<em class="replaceable">theNode</em>'s last child. We can use
<em class="filename">appendChild( )</em> to add a new node to an existing
node, to move a node within a document, or to move a node between
documents. In each of these cases,
<em class="replaceable">childNode</em> must be a reference to a node
object that already exists.</p>


<p>To <a name="INDEX-3594" />add a new child node to an existing
node, we must first create the new child node using
<em class="filename">createElement( )</em>, <em class="filename">createTextNode(
)</em>, or <em class="filename">cloneNode( )</em> or by parsing XML
source code into an <em class="filename">XML</em> object. For example, in
the following code, we create a new <tt class="literal">P</tt> node and a
new text node. We append the text node to the <tt class="literal">P</tt>
node and then append the <tt class="literal">P</tt> node and its text node
child to the top node of a document:</p>


<blockquote><pre class="code">// Create a document
myDoc = new XML('&lt;P&gt;paragraph 1&lt;/P&gt;');

// Create a P node and a text node
newP = myDoc.createElement("P");
newText = myDoc.createTextNode("paragraph 2");

// Append the text node to the P node
newP.appendChild(newText);

// Append the P node (including its text child) to myDoc
myDoc.appendChild(newP);

trace(myDoc);  // Displays: "&lt;P&gt;paragraph 1&lt;/P&gt;&lt;P&gt;paragraph 2&lt;/P&gt;"</pre></blockquote>


<p>To move a node within a document, specify a
<em class="replaceable">childNode</em> that is a reference to an
existing node in the document. In this situation,
<em class="replaceable">childNode</em> indicates the old location of
the node, and <em class="replaceable">theNode</em> indicates the new
parent of the node. In the process of being appended to
<em class="replaceable">theNode</em>,
<em class="replaceable">childNode</em> is removed from its previous
parent node. For example, here we move the <tt class="literal">B</tt> node
from its parent <tt class="literal">P</tt> node to the root of the
document:</p>


<blockquote><pre class="code">// Create a new document
myDoc = new XML('&lt;P&gt;paragraph 1&lt;B&gt;bold text&lt;/B&gt;&lt;/P&gt;');

// Store a reference to the B node
boldText = myDoc.firstChild.childNodes[1];

// Append the B node to the root of the document, while removing it from P 
myDoc.appendChild(boldText);

trace(myDoc);  // Displays: "&lt;P&gt;paragraph 1&lt;/P&gt;&lt;B&gt;bold text&lt;/B&gt;"</pre></blockquote>


<p>We also could have skipped the reference-storing step and just moved
the node directly:</p>


<blockquote><pre class="code">myDoc.appendChild(myDoc.firstChild.childNodes[1]);</pre></blockquote>


<p>To <a name="INDEX-3595" />move a node between
documents, <em class="replaceable">childNode</em> should be a reference
to a node in the first (source) document and
<em class="replaceable">theNode</em> should be a reference to a node in
the second (target) document. For example, here we move the
<tt class="literal">B</tt> node from <tt class="literal">myDoc</tt> to
<tt class="literal">myOtherDoc</tt>:</p>


<blockquote><pre class="code">myDoc = new XML('&lt;P&gt;paragraph 1&lt;B&gt;bold text&lt;/B&gt;&lt;/P&gt;');
myOtherDoc = new XML( );

myOtherDoc.appendChild(myDoc.firstChild.childNodes[1]);

trace(myDoc);       // Displays: "&lt;P&gt;paragraph 1&lt;/P&gt;"
trace(myOtherDoc);  // Displays: "&lt;B&gt;bold text&lt;/B&gt;"</pre></blockquote>



<h4 class="refsect1">See Also</h4>


<p><em class="filename">XML.createElement( )</em>,
<em class="filename">XML.createTextNode( )</em>, <em class="filename">XML.cloneNodee(
)</em>, <em class="filename">XML.insertBefore( )</em></p>


</div>

<a name="INDEX-3596" /><a name="INDEX-3597" /><a name="INDEX-3598" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b><i>

XML.attributes Property</i></b></font></td><td align="right"><i>an object whose properties store element attributes
</i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><table width="515" border="0" cellpadding="5"><tr><td align="left" /><td align="right" /></tr></table>
<h4 class="refsect1">Availability</h4>


<p>Flash 5</p>



<h4 class="refsect1">Synopsis</h4>

<blockquote><pre class="code">
<em>theNode</em>.attributes.attributeIdentifier
<em>theNode</em>.attributes[attributeNameInQuotes]</pre></blockquote>



<h4 class="refsect1">Access</h4>


<p>Read/write</p>



<h4 class="refsect1">Description</h4>


<p>The <tt class="literal">attributes</tt> property stores the names and
values of attributes defined by <em class="replaceable">theNode</em>.
For example, the <tt class="literal">ALIGN</tt> attribute of this
<tt class="literal">P</tt> tag:</p>


<blockquote><pre class="code">&lt;P ALIGN="CENTER"&gt;this is a paragraph&lt;/P&gt;</pre></blockquote>


<p>is accessed using
<em class="replaceable">theNode.</em><tt class="literal">attributes.ALIGN</tt>
or
<em class="replaceable">theNode.</em><tt class="literal">attributes["ALIGN"]</tt>.
If the <tt class="literal">P</tt> tag were the only tag in our XML source,
we could access the <tt class="literal">ALIGN</tt> attribute as follows:</p>


<blockquote><pre class="code">// Create an XML object hierarchy
myDoc = new XML('&lt;P ALIGN="CENTER"&gt;this is a paragraph&lt;/P&gt;');

// Access the ALIGN attribute. Displays: "CENTER"
trace(myDoc.firstChild.attributes.ALIGN);

// Set the ALIGN attribute
myDoc.firstChild.attributes.ALIGN = "LEFT";</pre></blockquote>


<p>The <tt class="literal">attributes</tt> property is itself an object. We
can add new properties to the <tt class="literal">attributes</tt> object,
thereby adding new attributes to <em class="replaceable">theNode</em>,
as follows:</p>


<blockquote><pre class="code">// Add a CLASS attribute to the P tag
myDoc.firstChild.attributes.CLASS = "INTRO";

// firstChild now represents the XML source:
// &lt;P ALIGN="CENTER" CLASS="INTRO"&gt;this is a paragraph&lt;/P&gt;</pre></blockquote>


<p>Because <tt class="literal">attributes</tt> is not an array, it
doesn't contain a <tt class="literal">length</tt> property. Instead,
we can access all the attributes defined on an element using a
<em class="filename">for-in</em> loop:</p>


<blockquote><pre class="code">var count = 0;
for(var prop in theNode.attributes) {
  trace("attribute " + prop + " has the value " + theNode.attributes[prop]);
  count++;
}
trace ("The node has " + count + " attributes.");</pre></blockquote>


<p>If the XML element represented by <em class="replaceable">theNode</em>
has no attributes, <tt class="literal">attributes</tt> is an empty object
with no properties and the preceding example would indicate zero
attributes.</p>



<h4 class="refsect1">See Also</h4>


<p><em class="replaceable">XML</em><tt class="literal">.nodeType</tt></p>


</div>

<a name="INDEX-3599" /><a name="INDEX-3600" /><a name="INDEX-3601" /><a name="INDEX-3602" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b><i>


XML.childNodes Property</i></b></font></td><td align="right"><i>an array of references to a node's children
</i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><table width="515" border="0" cellpadding="5"><tr><td align="left" /><td align="right" /></tr></table>
<h4 class="refsect1">Availability</h4>


<p>Flash 5</p>



<h4 class="refsect1">Synopsis</h4>

<blockquote><pre class="code">
<em>theNode</em>.childNodes[n]</pre></blockquote>



<h4 class="refsect1">Access</h4>


<p>Read-only</p>



<h4 class="refsect1">Description</h4>


<p>The <tt class="literal">childNodes</tt> property is an array whose elements
contain references to the immediate descendants of
<em class="replaceable">theNode</em>. It is used to access nodes in an
XML hierarchy. For example, if we create an object hierarchy as
follows:</p>


<blockquote><pre class="code">myDoc = new XML('&lt;STUDENT&gt;&lt;NAME&gt;Tim&lt;/NAME&gt;&lt;MAJOR&gt;BIOLOGY&lt;/MAJOR&gt;&lt;/STUDENT&gt;');</pre></blockquote>


<p>We can then access the <tt class="literal">STUDENT</tt> node using:</p>


<blockquote><pre class="code">myDoc.childNodes[0];</pre></blockquote>


<p>We can access the <tt class="literal">NAME</tt> and
<tt class="literal">MAJOR</tt> nodes (which are descendants of
<tt class="literal">STUDENT</tt>) using:</p>


<blockquote><pre class="code">myDoc.childNodes[0].childNodes[0];     // NAME
myDoc.childNodes[0].childNodes[1];     // MAJOR</pre></blockquote>


<p>If the hierarchy below <em class="replaceable">theNode</em> changes,
<tt class="literal">childNodes</tt> is automatically updated to reflect the
new structure. For example, if we deleted the
<tt class="literal">MAJOR</tt> node,
<tt class="literal">myDoc.childNodes[0].childNodes[1]</tt> would return
<tt class="literal">undefined</tt>.</p>


<p>We often refer to nodes to manipulate information or rearrange a
document's structure. For example, we might change a
student's name or add a new student using:</p>


<blockquote><pre class="code">// Check the name of the student
trace("The student's name is: " 
       + myDoc.childNodes[0].childNodes[0].childNodes[0].nodeValue);

// Change the name of the student
myDoc.childNodes[0].childNodes[0].childNodes[0].nodeValue = "James";

// Copy the STUDENT node
newStudent = myDoc.childNodes[0].cloneNode(true);

// Add a new STUDENT node to the document
myDoc.appendChild(newStudent);</pre></blockquote>


<p>Note that as a convenience, we may also use the
<tt class="literal">firstChild</tt> property to refer to
<tt class="literal">childNodes[0]</tt>. The following references are
identical:</p>


<blockquote><pre class="code">myDoc.childNodes[0];
myDoc.firstChild;</pre></blockquote>


<p>To iterate through all the children of a node, we can use a
<em class="filename">for</em> statement, as follows:</p>


<blockquote><pre class="code">for (var i = 0; i &lt; theNode.childNodes.length; i++) {
  trace("child " + i + " is " + theNode.childNodes[i].nodeName);
}</pre></blockquote>


<p>However, our example traverses only the first level of
<em class="replaceable">theNode</em>'s hierarchy. The examples
under the
<em class="replaceable">XML</em><tt class="literal">.nextSibling</tt> entry
shows how to access all the nodes below
<em class="replaceable">theNode</em>. If
<em class="replaceable">theNode</em> has no children,
<em class="replaceable">theNode</em><tt class="literal">.childNodes.length</tt>
is 0.</p>



<h4 class="refsect1">Usage</h4>


<p>Remember that empty text nodes, representing the whitespace used to
format XML source code, also show up in a
<tt class="literal">childNode</tt> list. For example, in the following XML
source, empty text nodes will be created by the whitespace after the
<tt class="literal">BOOK</tt> start tag and the <tt class="literal">TITLE</tt>,
<tt class="literal">AUTHOR</tt>, and <tt class="literal">PUBLISHER</tt> end tags:</p>


<blockquote><pre class="code">&lt;BOOK&gt;
  &lt;TITLE&gt;ActionScript: The Definitive Guide&lt;/TITLE&gt;
  &lt;AUTHOR SALUTATION="Mr"&gt;Colin Moock&lt;/AUTHOR&gt;
  &lt;PUBLISHER&gt;O'reilly&lt;/PUBLISHER&gt;
&lt;/BOOK&gt;</pre></blockquote>


<p>Hence, the first child node of <tt class="literal">BOOK</tt> is an empty
text node; the second child is <tt class="literal">TITLE</tt>.</p>



<h4 class="refsect1">See Also</h4>


<p><em class="replaceable">XML</em><tt class="literal">.firstChild</tt>,
<em class="filename">XML.hasChildNodes( )</em>,
<em class="replaceable">XML</em><tt class="literal">.lastChild</tt>,
<em class="replaceable">XML</em><tt class="literal">.nextSibling</tt>,
<em class="replaceable">XML</em><tt class="literal">.previousSibling</tt></p>


</div>

<a name="INDEX-3603" /><a name="INDEX-3604" /><a name="INDEX-3605" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b><i>

XML.cloneNode( ) Method</i></b></font></td><td align="right"><i>create a copy of a node
</i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><table width="515" border="0" cellpadding="5"><tr><td align="left" /><td align="right" /></tr></table>
<h4 class="refsect1">Availability</h4>


<p>Flash 5</p>



<h4 class="refsect1">Synopsis</h4>

<blockquote><pre class="code">
<em>theNode</em>.cloneNode(<em>deep</em>)</pre></blockquote>



<h4 class="refsect2">Arguments</h4>


<dl>
<dt><em>deep</em></dt>
<dd><p>A Boolean indicating whether to recursively include
<em class="replaceable">theNode</em>'s children in the clone
operation. If <tt class="literal">true</tt>, clone the entire hierarchy
starting at <em class="replaceable">theNode</em>. If
<tt class="literal">false</tt>, clone only
<em class="replaceable">theNode</em> itself (and its attributes, if it
is an element node).</p></dd>

</dl>




<h4 class="refsect2">Returns</h4>


<p>A duplicate of the <em class="replaceable">theNode</em> object,
optionally including its subtree.</p>




<h4 class="refsect1">Description</h4>


<p>The <em class="filename">cloneNode( )</em> method creates and returns a
copy of <em class="replaceable">theNode</em>, including all of
<em class="replaceable">theNode</em>'s attributes and values if
<em class="replaceable">theNode</em> is an element node. If
<em class="replaceable">deep</em> is <tt class="literal">true</tt>, the
returned copy includes the entire node hierarchy descending from
<em class="replaceable">theNode</em>.</p>


<p>We often use <em class="filename">cloneNode( )</em> to create a new node
based on an existing template (which saves us from generating the new
node structure manually). Once we've cloned a node, we normally
customize it and insert it into an existing XML document using either
<em class="filename">appendChild( )</em> or <em class="filename">insertBefore(
)</em>. The following example clones the first paragraph of a
document to make a sibling paragraph with the same structure:</p>


<blockquote><pre class="code">// Create a new document
myDoc = new XML('&lt;P&gt;paragraph 1&lt;/P&gt;');

// Make a clone of the first paragraph
newP = myDoc.firstChild.cloneNode(true);

// Customize the clone
newP.firstChild.nodeValue = "paragraph 2";

// Add the clone into the document
myDoc.appendChild(newP);

trace(myDoc);  // Displays: "&lt;P&gt;paragraph 1&lt;/P&gt;&lt;P&gt;paragraph 2&lt;/P&gt;"</pre></blockquote>


<p>Note that the text in an element is stored in a separate child node
of that element, so we must set <em class="replaceable">deep</em> to
<tt class="literal">true</tt> to preserve an element's text content
in a clone operation. Remember that <em class="filename">cloneNode( )</em>
does not insert the element it returns into the node's
document -- we must do that ourselves using <em class="filename">appendChild(
)</em> or <em class="filename">insertBefore( )</em>.</p>



<h4 class="refsect1">See Also</h4>


<p><em class="filename">XML.appendChild( )</em>, <em class="filename">XML.createElement(
)</em>, <em class="filename">XML.createTextNode( )</em>,
<em class="filename">XML.insertBefore( )</em></p>


</div>

<a name="INDEX-3606" /><a name="INDEX-3607" /><a name="INDEX-3608" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b><i>

XML.contentType Property</i></b></font></td><td align="right"><i>MIME content type for XML data sent via XML.send( ) and XML.sendAndLoad( )
</i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><table width="515" border="0" cellpadding="5"><tr><td align="left" /><td align="right" /></tr></table>
<h4 class="refsect1">Availability</h4>


<p>Flash 5 Build 41 or later</p>



<h4 class="refsect1">Synopsis</h4>

<blockquote><pre class="code">
<em>XMLdoc</em>.contentType</pre></blockquote>



<h4 class="refsect1">Access</h4>


<p>Read/write</p>



<h4 class="refsect1">Description</h4>


<p>The <tt class="literal">contentType</tt> property is the MIME type that is
sent to a server when <em class="filename">XML.send( )</em> or
<em class="filename">XML.sendAndLoad( )</em> is invoked. It defaults to
<tt class="literal">application/x-www-urlform-encoded</tt>. The
<tt class="literal">contentType</tt><em class="filename"> </em>property may be
modified for specific XML objects, or
<tt class="literal">XML.prototype.contentType</tt><em class="filename"> </em>may
be modified to affect all <em class="filename">XML</em> objects.</p>


<p>The <tt class="literal">contentType</tt> property first appeared in Build
41 of the Flash 5 Player, before which it was not possible to set
MIME type. Check <tt class="literal">contentType</tt>'s validity by
comparing it to <tt class="literal">undefined</tt> or using the
<em class="filename">getVersion( )</em> function to determine the Player
version and build.</p>



<h4 class="refsect1">Usage</h4>


<p>See important notes on setting MIME type under the
<em class="filename">XML.send( )</em> entry.</p>



<h4 class="refsect1">See Also</h4>


<p><em class="filename">XML.send( )</em>, <em class="filename">XML.sendAndLoad(
)</em></p>


</div>

<a name="INDEX-3609" /><a name="INDEX-3610" /><a name="INDEX-3611" /><a name="INDEX-3612" /><a name="INDEX-3613" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b><i>


XML.createElement( ) Method</i></b></font></td><td align="right"><i>create a new element node
</i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><table width="515" border="0" cellpadding="5"><tr><td align="left" /><td align="right" /></tr></table>
<h4 class="refsect1">Availability</h4>


<p>Flash 5</p>



<h4 class="refsect1">Synopsis</h4>

<blockquote><pre class="code">
<em>XMLdoc</em>.createElement(<em>tagName</em>)</pre></blockquote>



<h4 class="refsect2">Arguments</h4>


<dl>
<dt><em>tagName</em></dt>
<dd><p>A case-sensitive string indicating the name of the element to create.
For example, in the tag, <tt class="literal">&lt;P ALIGN="RIGHT"&gt;</tt>,
<tt class="literal">P</tt> is the tag name.</p></dd>

</dl>




<h4 class="refsect2">Returns</h4>


<p>A new element node object, with no parent and no children.</p>




<h4 class="refsect1">Description</h4>


<p>The <em class="filename">createElement( )</em> method is our primary means
of generating new element nodes for inclusion in an
<em class="filename">XML</em><a name="INDEX-3613" /> document object hierarchy. Note that
<em class="filename">createElement( )</em> does not insert the element it
returns into <em class="replaceable">XMLdoc</em> -- we must do that
ourselves using <em class="filename">appendChild( )</em> or
<em class="filename">insertBefore( )</em>. For example, here we create and
insert a new <tt class="literal">P</tt> element into a document:</p>


<blockquote><pre class="code">myDoc = new XML( );
newP = myDoc.createElement("P");
myDoc.appendChild(newP);</pre></blockquote>


<p>We can combine those steps like this:</p>


<blockquote><pre class="code">myDoc.appendChild(myDoc.createElement("P"));</pre></blockquote>


<p><em class="replaceable">XMLdoc</em> must be an instance of the
<em class="emphasis">XML</em> class, not the <em class="emphasis">XMLnode</em>
class.</p>


<p>The <em class="filename">createElement( )</em> method cannot be used to
create text nodes; use <em class="filename">createTextNode( )</em>
instead.</p>



<h4 class="refsect1">See Also</h4>


<p><em class="filename">XML.appendChild( )</em>, <em class="filename">XML.cloneNode(
)</em>, <em class="filename">XML.createTextNode( )</em>,
<em class="filename">XML.insertBefore( )</em></p>


</div>

<a name="INDEX-3614" /><a name="INDEX-3615" /><a name="INDEX-3616" /><a name="INDEX-3617" /><a name="INDEX-3618" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b><i>


XML.createTextNode( ) Method</i></b></font></td><td align="right"><i>create a new text node
</i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><table width="515" border="0" cellpadding="5"><tr><td align="left" /><td align="right" /></tr></table>
<h4 class="refsect1">Availability</h4>


<p>Flash 5</p>



<h4 class="refsect1">Synopsis</h4>

<blockquote><pre class="code">
<em>XMLdoc</em>.createTextNode(<em>text</em>)</pre></blockquote>



<h4 class="refsect2">Arguments</h4>


<dl>
<dt><em>text</em></dt>
<dd><p>A string containing the text that is to become the
<tt class="literal">nodeValue</tt> of the new node.</p></dd>

</dl>




<h4 class="refsect2">Returns</h4>


<p>A new text node object, with no parent and no children.</p>




<h4 class="refsect1">Description</h4>


<p>The <em class="filename">createTextNode( )</em> method is our primary
means of generating new text nodes for inclusion in an
<a name="INDEX-3618" />XML document object hierarchy. Note that
<em class="filename">createTextNode( )</em> does not insert the element it
returns into <em class="replaceable">XMLdoc</em> -- we must do that
ourselves using <em class="filename">appendChild( )</em> or
<em class="filename">insertBefore( )</em>. For example, here we create and
insert a new <tt class="literal">P</tt> element into a document, and then
we give that <tt class="literal">P</tt> element a text-node child:</p>


<blockquote><pre class="code">myDoc = new XML( );
newP = myDoc.createElement("P");
myDoc.appendChild(newP);

newText = myDoc.createTextNode("This is the first paragraph");
myDoc.firstChild.appendChild(newText);

trace(myDoc);  // Displays: "&lt;P&gt;This is the first paragraph&lt;/P&gt;"</pre></blockquote>


<p><em class="replaceable">XMLdoc</em> must be an instance of the
<em class="emphasis">XML</em> class, not the <em class="emphasis">XMLnode</em>
class.</p>


<p>Text nodes are normally stored as the children of element nodes,
which are created using <em class="filename">createElement( )</em>.</p>



<h4 class="refsect1">See Also</h4>


<p><em class="filename">XML.appendChild( )</em>, <em class="filename">XML.cloneNode(
)</em>, <em class="filename">XML.createElement( )</em>,
<em class="filename">XML.insertBefore( )</em></p>


</div>

<a name="INDEX-3619" /><a name="INDEX-3620" /><a name="INDEX-3621" /><a name="INDEX-3622" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b><i>
XML.docTypeDecl Property</i></b></font></td><td align="right"><i>the document's DOCTYPE tag
</i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><table width="515" border="0" cellpadding="5"><tr><td align="left" /><td align="right" /></tr></table>
<h4 class="refsect1">Availability</h4>


<p>Flash 5</p>



<h4 class="refsect1">Synopsis</h4>

<blockquote><pre class="code">
<em>XMLdoc</em>.docTypeDecl</pre></blockquote>



<h4 class="refsect1">Access</h4>


<p>Read/write</p>



<h4 class="refsect1">Description</h4>


<p>The <tt class="literal">docTypeDecl</tt> string property specifies the
<tt class="literal">DOCTYPE</tt> tag of <em class="replaceable">XMLdoc</em>,
if any exists. Otherwise, <tt class="literal">docTypeDecl</tt> is
<tt class="literal">undefined </tt>. <em class="replaceable">XMLdoc</em> must
be the top-level node in an <em class="filename">XML</em> object hierarchy
(i.e., an instance of the <em class="emphasis">XML</em> class, not the
<em class="emphasis">XMLnode</em> class).</p>


<p>An <a name="INDEX-3621" /> <a name="INDEX-3622" />XML document's
<tt class="literal">DOCTYPE</tt> specifies the name and location of the DTD
used to validate the document. ActionScript does not perform
validation of XML documents; it merely parses them. We use the
<tt class="literal">DOCTYPE</tt> tag to build XML documents that may be
validated externally or to identify the type of a loaded XML
document.</p>



<h4 class="refsect1">Example</h4>


<blockquote><pre class="code">var myXML = new XML('&lt;?xml version="1.0"?&gt;&lt;!DOCTYPE foo SYSTEM "bar.dtd"&gt;'
                    + '&lt;P&gt;a short document&lt;/P&gt;');

trace(myXML.docTypeDecl);  // Displays: "&lt;!DOCTYPE foo SYSTEM "bar.dtd"&gt;"

// Set a new DOCTYPE
myXML.docTypeDecl = '&lt;!DOCTYPE baz SYSTEM "bam.dtd"&gt;';</pre></blockquote>



<h4 class="refsect1">See Also</h4>


<p><em class="replaceable">XML</em><tt class="literal">.xmlDecl</tt></p>


</div>

<a name="INDEX-3623" /><a name="INDEX-3624" /><a name="INDEX-3625" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b><i>

XML.firstChild Property</i></b></font></td><td align="right"><i>a reference to the first descendant of a node
</i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><table width="515" border="0" cellpadding="5"><tr><td align="left" /><td align="right" /></tr></table>
<h4 class="refsect1">Availability</h4>


<p>Flash 5</p>



<h4 class="refsect1">Synopsis</h4>

<blockquote><pre class="code">
<em>theNode</em>.firstChild</pre></blockquote>



<h4 class="refsect1">Access</h4>


<p>Read-only</p>



<h4 class="refsect1">Description</h4>


<p>The <tt class="literal">firstChild</tt> property is synonymous with
<tt class="literal">childNodes[0]</tt>. It returns a reference to the first
node object that descends from <em class="replaceable">theNode</em>. If
<em class="replaceable">theNode</em> has no children,
<tt class="literal">firstChild</tt> returns <tt class="literal">null</tt>.</p>


<p>In this XML source fragment, the <tt class="literal">firstChild</tt> of the
<tt class="literal">MESSAGE</tt> node is the text node with the
<tt class="literal">nodeValue</tt> "hey":</p>


<blockquote><pre class="code">&lt;!-- Fragment 1 --&gt;
&lt;MESSAGE&gt;hey&lt;/MESSAGE&gt;</pre></blockquote>


<p>Here, the <tt class="literal">firstChild</tt> of the
<tt class="literal">HOTEL</tt> node is the <tt class="literal">ROOM</tt> node:</p>


<blockquote><pre class="code">&lt;!-- Fragment 2 --&gt;
&lt;HOTEL&gt;&lt;ROOM&gt;&lt;SIZE&gt;Double&lt;/SIZE&gt;&lt;/ROOM&gt;&lt;/HOTEL&gt;</pre></blockquote>


<p>When <em class="replaceable">theNode</em> is the top of the object
hierarchy (i.e., refers to the <em class="filename">XML</em> document
object), <tt class="literal">firstChild</tt> may not always be a reference
to the first useful element in the document. If a document includes
an XML delcaration (<tt class="literal">&lt;?xml</tt>
<tt class="literal">version="1.0"?&gt;</tt>) and perhaps a
<tt class="literal">DOCTYPE</tt> tag, there are normally whitespace nodes
before the actual root element of the XML hierarchy. However, if an
XML fragment has no XML declaration and no
<tt class="literal">DOCTYPE</tt>, we can start processing it with the
document's <tt class="literal">firstChild</tt> node, as in:</p>


<blockquote><pre class="code">// Create a new XML fragment
myDoc = new XML('&lt;MESSAGE&gt;&lt;USER&gt;gray&lt;/USER&gt;&lt;CONTENT&gt;hi&lt;/CONTENT&gt;&lt;/MESSAGE&gt;');

// Store the XML fragment's first node in the variable msg
msg = myDoc.firstChild;

// Assign the text contained by the USER tag
// to a text field called userNameOutput
userNameOutput = msg.firstChild.firstChild.nodeValue;</pre></blockquote>


<p>It's good form, but not actually necessary, to use
<tt class="literal">nodeValue</tt> to access the text contained by the
<tt class="literal">USER</tt> tag. When we use a text-node object in a
string context, the <em class="filename">toString( )</em> method is
automatically invoked on that node, and the text in the node is
returned.</p>



<h4 class="refsect1">See Also</h4>


<p><em class="replaceable">XML</em><tt class="literal">.childNodes</tt>,<em class="filename">
</em><em class="replaceable">XML</em><tt class="literal">.lastChild</tt>,
<em class="replaceable">XML</em><tt class="literal">.nextSibling</tt>,
<em class="replaceable">XML</em><tt class="literal">.previousSibling</tt></p>


</div>

<a name="INDEX-3626" /><a name="INDEX-3627" /><a name="INDEX-3628" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b><i>

XML.hasChildNodes( ) Method</i></b></font></td><td align="right"><i>check if a node has any descendants
</i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><table width="515" border="0" cellpadding="5"><tr><td align="left" /><td align="right" /></tr></table>
<h4 class="refsect1">Availability</h4>


<p>Flash 5</p>



<h4 class="refsect1">Synopsis</h4>

<blockquote><pre class="code">
<em>theNode</em>.hasChildNodes()</pre></blockquote>



<h4 class="refsect2">Returns</h4>


<p>A Boolean: <tt class="literal">true</tt> if
<em class="replaceable">theNode</em> has any children;
<tt class="literal">false</tt> if it does not.</p>




<h4 class="refsect1">Description</h4>


<p>The <em class="filename">hasChildNodes( )</em> method indicates whether
any node hierarchy extends from a given node. It is synonymous with
the comparison expression:</p>


<blockquote><pre class="code">theNode.childNodes.length &gt; 0</pre></blockquote>


<p>If <em class="replaceable">theNode</em> contains no subnodes,
<em class="filename">hasChildNodes( )</em> returns
<tt class="literal">false</tt>.</p>



<h4 class="refsect1">Example</h4>


<p>We can use <em class="filename">hasChildNodes( )</em> to determine whether
to operate on a node during node processing. For example, here we
remove the nodes below the first child of a document until the first
child has no more children:</p>


<blockquote><pre class="code">while (myDoc.firstChild.hasChildNodes( )) {
  myDoc.firstChild.firstChild.removeNode( );
}</pre></blockquote>



<h4 class="refsect1">See Also</h4>


<p><em class="replaceable">XML</em><tt class="literal">.childNodes</tt></p>


</div>

<a name="INDEX-3629" /><a name="INDEX-3630" /><a name="INDEX-3631" /><a name="INDEX-3632" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b><i>

XML.ignoreWhite Property</i></b></font></td><td align="right"><i>Determines whether to ignore whitespace nodes during XML parsing
</i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><table width="515" border="0" cellpadding="5"><tr><td align="left" /><td align="right" /></tr></table>
<h4 class="refsect1">Availability</h4>


<p>Flash 5 Build 41 or later</p>



<h4 class="refsect1">Synopsis</h4>

<blockquote><pre class="code">
<em>XMLdoc</em>.ignoreWhite</pre></blockquote>



<h4 class="refsect1">Access</h4>


<p>Read/write</p>



<h4 class="refsect1">Description</h4>


<p><a name="INDEX-3632" />The
<tt class="literal">ignoreWhite</tt> property stores a Boolean that
dictates whether to discard text nodes containing only whitespace
during the parsing process. The default value is
<tt class="literal">false</tt> (don't throw away whitespace nodes).
This is a global setting that applies to an entire XML document, not
just a specific node. That is, instances of the
<em class="filename">XMLnode</em> class do not support
<em class="filename">ignoreWhite</em>.</p>



<h4 class="refsect1">Example</h4>


<p>To cause a single XML document to discard whitespace nodes during
parsing, use:</p>


<blockquote><pre class="code">myXML.ignoreWhite = true;</pre></blockquote>


<p>To cause all XML documents to discard whitespace nodes, use:</p>


<blockquote><pre class="code">XML.prototype.ignoreWhite = true;</pre></blockquote>


<p>The <tt class="literal">ignoreWhite</tt> property should be set before any
attempt at parsing XML occurs (typically due to a <em class="filename">load(
)</em> or <em class="filename">sendAndLoad( )</em> operation).</p>



<h4 class="refsect1">See Also</h4>


<p>See the examples under the <em class="emphasis">XML</em> Class entry for
manual whitespace-stripping code</p>


</div>

<a name="INDEX-3633" /><a name="INDEX-3634" /><a name="INDEX-3635" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b><i>

XML.insertBefore( ) Method</i></b></font></td><td align="right"><i>give a node a new previous sibling
</i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><table width="515" border="0" cellpadding="5"><tr><td align="left" /><td align="right" /></tr></table>
<h4 class="refsect1">Availability</h4>


<p>Flash 5</p>



<h4 class="refsect1">Synopsis</h4>

<blockquote><pre class="code">
<em>theNode</em>.insertBefore(<em>newChild, beforeChild</em>)</pre></blockquote>



<h4 class="refsect2">Arguments</h4>


<dl>
<dt><em>newChild</em></dt>
<dd><p>An existing XML node object.</p></dd>

</dl>


<dl>
<dt><em>beforeChild</em></dt>
<dd><p>The child of <em class="replaceable">theNode</em> before which
<em class="replaceable">newChild</em> should be inserted.</p></dd>

</dl>




<h4 class="refsect1">Description</h4>


<p>The <em class="filename">insertBefore( )</em> method adds
<em class="replaceable">newChild</em> to
<em class="replaceable">theNode</em>'s child list, before
<em class="replaceable">beforeChild </em>. The <em class="filename">insertBefore(
)</em> method is similar to <em class="filename">appendChild( )</em>
but lets us precisely position a new node in an existing XML object
hierarchy.</p>



<h4 class="refsect1">Example</h4>


<blockquote><pre class="code">// Create a document
myDoc = new XML('&lt;P&gt;paragraph 2&lt;/P&gt;');

// Create a P node and a text node
newP = myDoc.createElement("P");
newText = myDoc.createTextNode("paragraph 1");

// Append the text node to the P node
newP.appendChild(newText);

// Insert the new P node (including its text child) before the existing P
myDoc.insertBefore(newP, myDoc.firstChild);

trace(myDoc);  // Displays: "&lt;P&gt;paragraph 1&lt;/P&gt;&lt;P&gt;paragraph 2&lt;/P&gt;"</pre></blockquote>



<h4 class="refsect1">See Also</h4>


<p><em class="filename">XML.appendChild( )</em></p>


</div>

<a name="INDEX-3636" /><a name="INDEX-3637" /><a name="INDEX-3638" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b><i>

XML.lastChild Property</i></b></font></td><td align="right"><i>a reference to the last descendant of a node
</i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><table width="515" border="0" cellpadding="5"><tr><td align="left" /><td align="right" /></tr></table>
<h4 class="refsect1">Availability</h4>


<p>Flash 5</p>



<h4 class="refsect1">Synopsis</h4>

<blockquote><pre class="code">
<em>theNode</em>.lastChild</pre></blockquote>



<h4 class="refsect1">Access</h4>


<p>Read-only</p>



<h4 class="refsect1">Description</h4>


<p>The <tt class="literal">lastChild</tt> property is synonymous with
<tt class="literal">childNodes[childNodes.length-1]</tt>. It returns a
reference to the last node object that descends from
<em class="replaceable">theNode</em>. If
<em class="replaceable">theNode</em> has no children,
<tt class="literal">lastChild</tt> returns <tt class="literal">null</tt>.</p>


<p>In the following XML source fragment, the
<tt class="literal">lastChild</tt> of the <tt class="literal">MESSAGE</tt> node
is the <tt class="literal">CONTENT</tt> node:</p>


<blockquote><pre class="code">&lt;MESSAGE&gt;&lt;USER&gt;gray&lt;/USER&gt;&lt;CONTENT&gt;hi&lt;/CONTENT&gt;&lt;/MESSAGE&gt;</pre></blockquote>



<h4 class="refsect1">Example</h4>


<blockquote><pre class="code">// Create a new XML document
myDoc = new XML('&lt;MESSAGE&gt;&lt;USER&gt;gray&lt;/USER&gt;&lt;CONTENT&gt;hi&lt;/CONTENT&gt;&lt;/MESSAGE&gt;');

// Sets msg to "hi" because myDoc's firstChild 
// is MESSAGE, MESSAGE's lastChild is CONTENT, and CONTENT's firstChild 
// is the text node with the value "hi" 
msg = myDoc.firstChild.lastChild.firstChild.nodeValue</pre></blockquote>



<h4 class="refsect1">See Also</h4>


<p><em class="replaceable">XML</em><tt class="literal">.childNodes</tt>,<em class="filename">
</em><em class="replaceable">XML</em><tt class="literal">.firstChild</tt>,
<em class="replaceable">XML</em><tt class="literal">.nextSibling</tt>,
<em class="replaceable">XML</em><tt class="literal">.previousSibling</tt></p>


</div>

<a name="INDEX-3639" /><a name="INDEX-3640" /><a name="INDEX-3641" /><a name="INDEX-3642" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b><i>
XML.load( ) Method</i></b></font></td><td align="right"><i>import XML source code from an external document
</i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><table width="515" border="0" cellpadding="5"><tr><td align="left" /><td align="right" /></tr></table>
<h4 class="refsect1">Availability</h4>


<p>Flash 5</p>



<h4 class="refsect1">Synopsis</h4>

<blockquote><pre class="code">
<em>XMLdoc</em>.load(<em>URL</em>)</pre></blockquote>



<h4 class="refsect2">Arguments</h4>


<dl>
<dt><em>URL</em></dt>
<dd><p>A string specifying the location of the XML document to load.</p></dd>

</dl>




<h4 class="refsect1">Description</h4>


<p><a name="INDEX-3642" />The <em class="filename">load( )</em>
method imports an external XML document, parses it, converts it into
an XML object hierarchy, and places that hierarchy into
<em class="replaceable">XMLdoc</em>. Any previous contents of
<em class="replaceable">XMLdoc</em> are replaced by the newly loaded
XML content.</p>


<p><em class="replaceable">XMLdoc</em> must be an instance of the
<em class="emphasis">XML</em> class, not the <em class="emphasis">XMLnode</em>
class.</p>



<h4 class="refsect1">Usage</h4>


<p>Before accessing content imported with <em class="filename">load( )</em>,
we must be sure the load and parsing operations are complete. To do
so, either check the value of the XML document's
<tt class="literal">loaded</tt> property, or assign the document an
<em class="filename">onLoad( )</em> callback handler to respond to the
load completion. See the
<em class="replaceable">XML</em><tt class="literal">.loaded</tt> and
<em class="filename">XML.onLoad( )</em> entries for details. To determine
whether the loaded data was successfully parsed, check the
document's <tt class="literal">status</tt> property.</p>


<p><em class="filename">XML.load( )</em> is subject to the domain-based
security restrictions described in <a href="ch20_05.htm">Table 20-8</a> under
the global <em class="filename">loadVariables( )</em> function.</p>



<h4 class="refsect1">Example</h4>


<blockquote><pre class="code">myDoc = new XML( );
myDoc.load("myData.xml");</pre></blockquote>



<h4 class="refsect1">See Also</h4>


<p><em class="replaceable">XML</em><tt class="literal">.loaded</tt>,
<em class="filename">XML.onLoad( )</em>, <em class="filename">XML.sendAndLoad(
)</em>,
<em class="replaceable">XML</em><tt class="literal">.status</tt></p>


</div>

<a name="INDEX-3643" /><a name="INDEX-3644" /><a name="INDEX-3645" /><a name="INDEX-3646" /><a name="INDEX-3647" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b><i>
XML.loaded 
Property</i></b></font></td><td align="right"><i>status of a load( ) or sendAndLoad( ) operation
</i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><table width="515" border="0" cellpadding="5"><tr><td align="left" /><td align="right" /></tr></table>
<h4 class="refsect1">Availability</h4>


<p>Flash 5</p>



<h4 class="refsect1">Synopsis</h4>

<blockquote><pre class="code">
<em>XMLdoc</em>.loaded</pre></blockquote>



<h4 class="refsect1">Access</h4>


<p>Read-only</p>



<h4 class="refsect1">Description</h4>


<p>The <tt class="literal">loaded</tt> property returns a Boolean value
indicating whether a previously invoked <em class="filename">load( )</em>
or <em class="filename">sendAndLoad( )</em> operation on
<em class="replaceable">XMLdoc</em> has completed. It is immediately
set to <tt class="literal">false</tt> when an XML <em class="filename">load(
)</em> or <em class="filename">sendAndLoad( )</em> operation is
initiated. If the load is successful, <tt class="literal">loaded</tt> is
later set to <tt class="literal">true</tt>. If no such operation has ever
been executed on <em class="replaceable">XMLdoc</em>,
<tt class="literal">loaded</tt> is <tt class="literal">undefined</tt>.</p>


<p>When <tt class="literal">loaded</tt> is <tt class="literal">false</tt>, the
download and parsing of XML data is still in progress, and attempts
to access the object hierarchy in <em class="replaceable">XMLdoc</em>
will fail. When <tt class="literal">loaded</tt> is <tt class="literal">true</tt>,
XML data has finished being downloaded, parsed, and stored in
<em class="replaceable">XMLdoc</em> as an object hierarchy. Note,
however, that the loaded XML data may not have been parsed
successfully (use
<em class="replaceable">XMLdoc</em><tt class="literal">.status</tt> to
determine whether it was).</p>


<p><em class="replaceable">XMLdoc</em> must be an instance of the
<em class="emphasis">XML</em> class, not the <em class="emphasis">XMLnode</em>
class.</p>



<h4 class="refsect1">Example</h4>


<p>The following example shows a basic XML
<a name="INDEX-3647" />preloader that waits for the XML
data to be loaded before displaying it (XML preloaders may also be
built using an <em class="filename">XML.onLoad( )</em> handler):</p>


<blockquote><pre class="code"><tt class="userinput"><b>
// CODE ON FRAME 1</b></tt>
// Create a new XML document
myDoc = new XML( );
// Load an external XML file into the document
myDoc.load("userProfile.xml");
<tt class="userinput"><b>
// CODE ON FRAME 5</b></tt>
// Check if the data has loaded. If so, go to the display frame.
// If not, loop back to frame 4 and then play.
// Loop until the data is done loading...
if (myDoc.loaded) {
  if (myDoc.status == 0) {
    gotoAndStop("displayData");
  } else {
    gotoAndStop("loadingError");
  }
} else {
  gotoAndPlay(4);
}</pre></blockquote>



<h4 class="refsect1">See Also</h4>


<p><em class="filename">XML.load( )</em>, <em class="filename">XML.onLoad( )</em>,
<em class="filename">XML.sendAndLoad( )</em></p>


</div>

<a name="INDEX-3648" /><a name="INDEX-3649" /><a name="INDEX-3650" /><a name="INDEX-3651" /><a name="INDEX-3652" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b><i>



XML.nextSibling Property</i></b></font></td><td align="right"><i>a reference to the node after this node
</i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><table width="515" border="0" cellpadding="5"><tr><td align="left" /><td align="right" /></tr></table>
<h4 class="refsect1">Availability</h4>


<p>Flash 5</p>



<h4 class="refsect1">Synopsis</h4>

<blockquote><pre class="code">
<em>theNode</em>.nextSibling</pre></blockquote>



<h4 class="refsect1">Access</h4>


<p>Read-only</p>



<h4 class="refsect1">Description</h4>


<p>The <tt class="literal">nextSibling</tt> property returns the node object
after <em class="replaceable">theNode</em> in the current level of the
XML object hierarchy. If there is no node after
<em class="replaceable">theNode</em>, <tt class="literal">nextSibling</tt>
returns <tt class="literal">null</tt>. In the following XML source
fragment, the <tt class="literal">CONTENT</tt> node is the
<tt class="literal">nextSibling</tt> of the <tt class="literal">USER</tt> node:</p>


<blockquote><pre class="code">&lt;MESSAGE&gt;&lt;USER&gt;gray&lt;/USER&gt;&lt;CONTENT&gt;hi&lt;/CONTENT&gt;&lt;/MESSAGE&gt;</pre></blockquote>



<h4 class="refsect1">Example</h4>


<p>The <tt class="literal">nextSibling</tt> property is typically used to
<em class="emphasis">traverse </em>(move through) an XML object hierarchy.
For example, to view all the children of
<em class="replaceable">theNode</em> in the order they appear, we may
use:</p>


<blockquote><pre class="code">for (var child = theNode.firstChild; child != null; child = child.nextSibling) {
  trace("found node: " + child.nodeName);
}</pre></blockquote>


<p>By extending our loop into a function, we can recursively traverse
every node in an XML object hierarchy, as follows:</p>


<blockquote><pre class="code">function showNodes (node) {
  trace(node.nodeName + ": " + node.nodeValue);
  for (var child = node.firstChild; child != null; child = child.nextSibling) {
    showNodes(child);
  }
}

// Invoke the function on our node or document
showNodes(myDoc);</pre></blockquote>


<p>Note that in both traversal examples shown, text nodes show up
without a name as described under the <tt class="literal">nodeName</tt>
entry.</p>



<h4 class="refsect1">See Also</h4>


<p><em class="replaceable">XML</em><tt class="literal">.childNodes</tt>,
<em class="replaceable">XML</em><tt class="literal">.firstChild</tt>,
<em class="replaceable">XML</em><tt class="literal">.lastChild</tt>,
<em class="replaceable">XML</em><tt class="literal">.nodeName</tt>,
<em class="replaceable">XML</em><tt class="literal">.nodeValue</tt>,
<em class="replaceable">XML</em><tt class="literal">.previousSibling</tt></p>


</div>

<a name="INDEX-3653" /><a name="INDEX-3654" /><a name="INDEX-3655" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b><i>

XML.nodeName Property</i></b></font></td><td align="right"><i>the name of the current node
</i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><table width="515" border="0" cellpadding="5"><tr><td align="left" /><td align="right" /></tr></table>
<h4 class="refsect1">Availability</h4>


<p>Flash 5</p>



<h4 class="refsect1">Synopsis</h4>

<blockquote><pre class="code">
<em>theNode</em>.nodeName</pre></blockquote>



<h4 class="refsect1">Access</h4>


<p>Read/write</p>



<h4 class="refsect1">Description</h4>


<p>The <tt class="literal">nodeName</tt> string property reflects the name of
<em class="replaceable">theNode</em>. Since only two node types are
supported by ActionScript (<em class="emphasis">element</em> nodes and
<em class="emphasis">text</em> nodes), <tt class="literal">nodeName</tt> has
only two possible values:</p>


<ul><li><p>If <em class="replaceable">theNode</em> is an element node,
<tt class="literal">nodeName</tt> is a string matching the tag name of that
element. For example, if <em class="replaceable">theNode</em>
represents the element <tt class="literal">&lt;BOOK&gt;</tt>, then
<em class="replaceable">theNode</em><tt class="literal">.nodeName</tt> is
<tt class="literal">"BOOK"</tt>.</p></li></ul>
<ul><li><p>If <em class="replaceable">theNode</em> is a text node,
<tt class="literal">nodeName</tt> is <tt class="literal">null</tt>. Note that
this diverges from the DOM specification, which stipulates that
<tt class="literal">nodeName</tt> for a text node should be the string
<tt class="literal">"#text"</tt>. If you prefer, you can use the
DOM-compliant <tt class="literal">nodeType</tt> property instead.</p></li></ul>

<h4 class="refsect1">Example</h4>


<p>We can use <tt class="literal">nodeName</tt> to check whether the current
node is the type of element we're seeking. For example, here we
extract all the content of <tt class="literal">H1</tt> tags on the first
level of an XML document (this example checks only for tags named
<em class="filename">H1</em>, not for tags named <em class="filename">h1</em>
with a lowercase <em class="filename">h</em>):</p>


<blockquote><pre class="code">myDoc = new XML('&lt;H1&gt;first heading&lt;/H1&gt;&lt;P&gt;content&lt;/P&gt;' +
                '&lt;H1&gt;second heading&lt;/H1&gt;&lt;P&gt;content&lt;/P&gt;');
for (i = 0; i &lt; myDoc.childNodes.length; i++) {
  if (myDoc.childNodes[i].nodeName == "H1") {
    trace(myDoc.childNodes[i].firstChild.nodeValue);
  }
}</pre></blockquote>



<h4 class="refsect1">See Also</h4>


<p><em class="replaceable">XML</em><tt class="literal">.nodeType</tt>,
<em class="replaceable">XML</em><tt class="literal">.nodeValue</tt></p>


</div>

<a name="INDEX-3656" /><a name="INDEX-3657" /><a name="INDEX-3658" /><a name="INDEX-3659" /><a name="INDEX-3660" /><a name="INDEX-3661" /><a name="INDEX-3662" /><a name="INDEX-3663" /><a name="INDEX-3664" /><a name="INDEX-3665" /><a name="INDEX-3666" /><a name="INDEX-3667" /><a name="INDEX-3668" /><a name="INDEX-3669" /><a name="INDEX-3670" /><a name="INDEX-3671" /><a name="INDEX-3672" /><a name="INDEX-3673" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b><i>
XML.nodeType Property</i></b></font></td><td align="right"><i>the type of the current node
</i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><table width="515" border="0" cellpadding="5"><tr><td align="left" /><td align="right" /></tr></table>
<h4 class="refsect1">Availability</h4>


<p>Flash 5</p>



<h4 class="refsect1">Synopsis</h4>

<blockquote><pre class="code">
<em>theNode</em>.nodeType</pre></blockquote>



<h4 class="refsect1">Access</h4>


<p>Read-only</p>



<h4 class="refsect1">Description</h4>


<p>The <a name="INDEX-3658" /> <a name="INDEX-3659" /><tt class="literal">nodeType</tt> is an integer
property that returns <em class="replaceable">theNode</em>'s
type. Since only two node types are supported by
ActionScript -- <em class="emphasis">element</em><a name="INDEX-3660" /> <a name="INDEX-3661" /> nodes and <em class="emphasis">text</em>
nodes -- <tt class="literal">nodeName</tt> has only two possible values:
1, if the node is an element node; and 3, if the node is a text node.
These values may seem arbitrary, but they are actually the
appropriate values as stipulated by the DOM. For reference, the other
node types in the DOM are listed in <a href="ch20_05.htm">Table 20-13</a>.</p>


<a name="ch20-25777" /><h4 class="objtitle">Table 20-13. DOM Node Types </h4><table border="1">



<tr>
<th>
<p>Node Description</p></th>
<th>
<p>Node Type Code</p></th>
</tr>




<tr>
<td>
<p><a name="INDEX-3662" />ELEMENT_NODE*</p></td>
<td>
<p> 1</p></td>
</tr>

<tr>
<td>
<p><a name="INDEX-3663" />ATTRIBUTE_NODE</p></td>
<td>
<p> 2</p></td>
</tr>

<tr>
<td>
<p><a name="INDEX-3664" />TEXT_NODE*</p></td>
<td>
<p> 3</p></td>
</tr>

<tr>
<td>
<p><a name="INDEX-3665" />CDATA_SECTION_NODE</p></td>
<td>
<p> 4</p></td>
</tr>

<tr>
<td>
<p><a name="INDEX-3666" />ENTITY_REFERENCE_NODE</p></td>
<td>
<p> 5</p></td>
</tr>

<tr>
<td>
<p><a name="INDEX-3667" />ENTITY_NODE</p></td>
<td>
<p> 6</p></td>
</tr>

<tr>
<td>
<p><a name="INDEX-3668" />PROCESSING_INSTRUCTION_NODE</p></td>
<td>
<p> 7</p></td>
</tr>

<tr>
<td>
<p><a name="INDEX-3669" />COMMENT_NODE</p></td>
<td>
<p> 8</p></td>
</tr>

<tr>
<td>
<p><a name="INDEX-3670" />DOCUMENT_NODE</p></td>
<td>
<p> 9</p></td>
</tr>

<tr>
<td>
<p><a name="INDEX-3671" />DOCUMENT_TYPE_NODE</p></td>
<td>
<p>10</p></td>
</tr>

<tr>
<td>
<p><a name="INDEX-3672" />DOCUMENT_FRAGMENT_NODE</p></td>
<td>
<p>11</p></td>
</tr>

<tr>
<td>
<p><a name="INDEX-3673" />NOTATION_NODE</p></td>
<td>
<p>12</p></td>
</tr>


</table>


<p>*Supported by Flash. Technically, ActionScript implements so-called
<em class="emphasis">attribute</em>, <em class="emphasis">document</em>, and
<em class="emphasis">document_type</em> nodes in addition to
<em class="emphasis">element</em> and <em class="emphasis">text</em> nodes, but
we don't have direct access to them as objects. For example, we
may manipulate the attributes of a node through the
<tt class="literal">attributes</tt> property, but we do not have direct
access to <em class="emphasis">attribute</em> nodes themselves. Similarly,
we have access to the <tt class="literal">DOCTYPE</tt> tag of a document
through the <tt class="literal">docTypeDecl</tt> property, but we do not
have direct access to <em class="emphasis">document_type</em> itself.</p>


<p><em class="emphasis">Element</em> nodes correspond to XML or HTML tags.
For example, in the XML fragment <tt class="literal">&lt;P&gt;what is your
favorite color?&lt;/P&gt;</tt>, the <tt class="literal">P</tt> tag
would be represented in an <em class="filename">XML</em> object hierarchy
as an element node (<tt class="literal">nodeType</tt> 1). The text
contained by a tag in XML source code -- for example, the text
"what is your favorite color?" -- would be represented
as a text node (<tt class="literal">nodeType</tt> 3).</p>



<h4 class="refsect1">Example</h4>


<p>We can conditionally operate on a node based on its
<tt class="literal">nodeType</tt>. For example, here we remove all the
empty text nodes that are children of <em class="replaceable">theNode
</em>:</p>


<blockquote><pre class="code">// Loop through all children of theNode
for (i = 0; i &lt; theNode.childNodes.length; i++) {
  // If the current node is a text node...
  if (theNode.childNodes[i].nodeType == 3) {
    // Check for any useful characters in the node
    var j = 0;
    var emptyNode = true;
    for (j = 0; j &lt; theNode.childNodes[i].nodeValue.length; j++) {
      // Useful character codes start above ASCII 32
      if (theNode.childNodes[i].nodeValue.charCodeAt(j) &gt; 32) {
        emptyNode = false;
        break;
      }
    }  
    // No useful charaters were found, so delete the node    
    theNode.childNodes[i].removeNode( );
  }
}</pre></blockquote>



<h4 class="refsect1">See Also</h4>


<p>The<em class="filename"> </em>XML Class,
<em class="replaceable">XML</em><tt class="literal">.nodeName</tt>,
<em class="replaceable">XML</em><tt class="literal">.nodeValue</tt></p>


</div>

<a name="INDEX-3674" /><a name="INDEX-3675" /><a name="INDEX-3676" /><a name="INDEX-3677" /><a name="INDEX-3678" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b><i>
XML.nodeValue 

Property</i></b></font></td><td align="right"><i>the value of the current node
</i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><table width="515" border="0" cellpadding="5"><tr><td align="left" /><td align="right" /></tr></table>
<h4 class="refsect1">Availability</h4>


<p>Flash 5</p>



<h4 class="refsect1">Synopsis</h4>

<blockquote><pre class="code">
<em>theNode</em>.nodeValue</pre></blockquote>



<h4 class="refsect1">Access</h4>


<p>Read/write</p>



<h4 class="refsect1">Description</h4>


<p>The <tt class="literal">nodeValue</tt> property reflects the string value
of <em class="replaceable">theNode</em>. Since only two node types
(<em class="emphasis">element</em> nodes and <em class="emphasis">text</em>
nodes) are supported by ActionScript, <tt class="literal">nodeValue</tt>
has only two possible values:</p>


<ul><li><p>If <em class="replaceable">theNode</em> is an element node,
<tt class="literal">nodeValue</tt> is <tt class="literal">null</tt>.</p></li></ul>
<ul><li><p>If <em class="replaceable">theNode</em> is a text node,
<tt class="literal">nodeValue</tt> is the text contained by the node.</p></li></ul>
<p>In practice, <tt class="literal">nodeValue</tt> is normally used only with
text nodes. To assign new text to an existing text node, we use
<tt class="literal">nodeValue</tt> as follows:</p>


<blockquote><pre class="code">// Create a new XML document
myDoc = new XML('&lt;H1&gt;first heading&lt;/H1&gt;&lt;P&gt;content&lt;/P&gt;');

// Change the text contained by the H1 tag
myDoc.firstChild.firstChild.nodeValue = "My Life Story";</pre></blockquote>


<p>Although we may explicitly retrieve the value of a text node using
<tt class="literal">nodeValue</tt>, the <em class="filename">toString( )</em>
method implicitly returns a node's value when it is used in a
string context. Therefore, this code displays the text node's
text in the Output window:</p>


<blockquote><pre class="code">trace(myDoc.firstChild.firstChild);</pre></blockquote>



<h4 class="refsect1">See Also</h4>


<p><em class="replaceable">XML</em><tt class="literal">.nodeName</tt>,
<em class="replaceable">XML</em><tt class="literal">.nodeType</tt></p>


</div>

<a name="INDEX-3679" /><a name="INDEX-3680" /><a name="INDEX-3681" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b><i>

XML.onData( ) Event Handler</i></b></font></td><td align="right"><i>executed when external XML source code finishes loading, but has not yet been parsed
</i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><table width="515" border="0" cellpadding="5"><tr><td align="left" /><td align="right" /></tr></table>
<h4 class="refsect1">Availability</h4>


<p>Flash 5 (undocumented)</p>



<h4 class="refsect1">Synopsis</h4>

<blockquote><pre class="code">
<em>XMLdoc</em>.onData(<em>src</em>);</pre></blockquote>



<h4 class="refsect2">Arguments</h4>


<dl>
<dt><em>src</em></dt>
<dd><p>A string containing the loaded XML source code.</p></dd>

</dl>




<h4 class="refsect1">Description</h4>


<p>The <em class="filename">onData( )</em> handler executes automatically
whenever raw XML source has finished loading into
<em class="replaceable">XMLdoc</em> due to an earlier <em class="filename">load(
)</em> or <em class="filename">sendAndLoad( )</em> invocation. By
default, <em class="filename">onData( )</em> has the following behavior:</p>


<ul><li><p>If the raw source received is <tt class="literal">undefined</tt>, it calls
<em class="filename">XMLdoc.onLoad( )</em> with the
<tt class="literal">success</tt> parameter set to <tt class="literal">false</tt>.</p></li></ul>
<ul><li><p>Otherwise, it parses the source into
<em class="replaceable">XMLdoc</em>, sets
<tt class="literal">XMLdoc.loaded</tt> to <tt class="literal">true</tt>, and
calls <em class="filename">XMLdoc.onLoad( )</em> with the
<tt class="literal">success</tt> parameter set to <tt class="literal">true</tt>.</p></li></ul>
<p>The <em class="filename">onData( )</em> handler may be assigned a custom
callback function to intercept raw XML source code before
ActionScript has a chance to parse it. Under certain circumstances,
manipulating raw XML source manually may offer improved performance
over ActionScript's built-in parsing.</p>



<h4 class="refsect1">Example</h4>


<p>The following example shows how to display raw loaded XML source
while preventing it from being parsed by ActionScript:</p>


<blockquote><pre class="code">myDoc = new XML();
myDoc.onData = function (src) {
  trace("Here's the source: \n" + src);
};
myDoc.load("book.xml");</pre></blockquote>



<h4 class="refsect1">See Also</h4>


<p><em class="filename">XML.onLoad( )</em></p>


</div>

<a name="INDEX-3682" /><a name="INDEX-3683" /><a name="INDEX-3684" /><a name="INDEX-3685" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b><i>

XML.onLoad( ) Event Handler</i></b></font></td><td align="right"><i>executed when external XML data has been loaded and parsed
</i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><table width="515" border="0" cellpadding="5"><tr><td align="left" /><td align="right" /></tr></table>
<h4 class="refsect1">Availability</h4>


<p>Flash 5</p>



<h4 class="refsect1">Synopsis</h4>

<blockquote><pre class="code">
<em>XMLdoc</em>.onLoad(<em>success</em>)</pre></blockquote>



<h4 class="refsect2">Arguments</h4>


<dl>
<dt><em>success</em></dt>
<dd><p>A Boolean value indicating whether loading was successful
(<tt class="literal">true</tt>) or failed (<tt class="literal">false</tt>).</p></dd>

</dl>




<h4 class="refsect1">Description</h4>


<p>The <em class="filename">onLoad( )</em> handler of
<em class="replaceable">XMLdoc</em> is automatically executed whenever
an external XML file is loaded into <em class="replaceable">XMLdoc</em>
via the <em class="filename">load( )</em> or <em class="filename">sendAndLoad(
)</em> methods. By default, the <em class="filename">onLoad( )</em>
handler of an XML document object is an empty function. To use
<em class="filename">onLoad( )</em>, we assign it a
<a name="INDEX-3685" /><em class="emphasis">callback handler</em>
(i.e., a custom-made function). For example:</p>


<blockquote><pre class="code">myDoc = new XML( );
myDoc.onLoad = handleLoad;
function handleLoad (success) {
  // Process XML as desired here... 
}</pre></blockquote>


<p>We rely on <em class="filename">onLoad( )</em> events to tell us when
it's safe to process <em class="replaceable">XMLdoc</em>. If
<em class="filename">onLoad( )</em> is triggered, we know that the loading
and parsing of external XML data have completed, so we may safely
access that loaded content. The <em class="filename">onLoad( )</em>
handler, hence, alleviates the need to write preloading code to wait
for data to arrive after the invocation of an XML <em class="filename">load(
)</em> function. For example, in the following code we load an
XML document, and then we wait for our custom <em class="filename">handleLoad(
)</em> function to be automatically executed when loading
completes. If loading was successful, we process our XML content with
the <em class="filename">display( )</em> function. Otherwise, we show an
error message by executing the <em class="filename">display( )</em>
function. (The <em class="filename">displayProduct( )</em> and
<em class="filename">displayError( )</em> functions are custom functions
that you've presumably written to display information to the
user, but they are not shown.)Here is the code:</p>


<blockquote><pre class="code">myDoc = new XML( );
myDoc.onLoad = handleLoad;
myDoc.load("productInfo.xml");

function handleLoad(success) {
  if (success) {
    output = "Product information received";
    displayProduct( ); // Call custom display function
  } else {
    output = "Attempt to load XML data failed";
    displayError( ); // Call custom display function
  }
}</pre></blockquote>


<p>Notice that the value of the <tt class="literal">success</tt> argument of
<em class="filename">handleLoad( )</em> is automatically set by the
interpreter to either <tt class="literal">true</tt> or
<tt class="literal">false</tt>, indicating whether or not loading completed
properly. However, the <tt class="literal">success</tt> argument may appear
more useful in theory than it turns out to be in practice. Most web
server error messages (e.g., "404 File Not Found") come
in the form of HTML documents. Since HTML can quite happily be parsed
as XML data, the reception of a server error page results in the
parsing of that page into the target XML document object. Because the
page parses properly, the load attempt is considered
"successful," and <tt class="literal">success</tt> is
<tt class="literal">true</tt>, even though the actual XML file may not have
been found or some other server error may have been encountered. To
be positive that you have the real data you requested, test its
structure or content explicitly for some identifying characteristic,
such as the <tt class="literal">nodeName</tt> of a particular child. See
also the <em class="filename">XML.onData( )</em> event handler, which can
be used to perform custom parsing.</p>



<h4 class="refsect1">See Also</h4>


<p><em class="filename">XML.load( )</em>, <em class="filename">XML.onData( ),
XML.sendAndLoad( )</em></p>


</div>

<a name="INDEX-3686" /><a name="INDEX-3687" /><a name="INDEX-3688" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b><i>
XML.parentNode Property</i></b></font></td><td align="right"><i>a reference to the immediate ancestor of a node
</i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><table width="515" border="0" cellpadding="5"><tr><td align="left" /><td align="right" /></tr></table>
<h4 class="refsect1">Availability</h4>


<p>Flash 5</p>



<h4 class="refsect1">Synopsis</h4>

<blockquote><pre class="code">
<em>theNode</em>.parentNode</pre></blockquote>



<h4 class="refsect1">Access</h4>


<p>Read-only</p>



<h4 class="refsect1">Description</h4>


<p>The <tt class="literal">parentNode</tt> property returns a reference to the
node object from which <em class="replaceable">theNode</em> descends in
the XML object hierarchy. If <em class="replaceable">theNode</em> is
the top of the current hierarchy, <tt class="literal">parentNode</tt>
returns <tt class="literal">null</tt>.</p>


<p>In this XML source fragment, the <tt class="literal">MESSAGE</tt> node is
the <tt class="literal">parentNode</tt> of text node
<tt class="literal">"hey"</tt>:</p>


<blockquote><pre class="code">&lt;MESSAGE&gt;hey&lt;/MESSAGE&gt;</pre></blockquote>


<p>Here the <tt class="literal">parentNode</tt> of the <tt class="literal">ROOM</tt>
node is the <tt class="literal">HOTEL</tt> node:</p>


<blockquote><pre class="code">&lt;HOTEL&gt;&lt;ROOM&gt;&lt;SIZE&gt;Double&lt;/SIZE&gt;&lt;/ROOM&gt;&lt;/HOTEL&gt;</pre></blockquote>



<h4 class="refsect1">See Also</h4>


<p><em class="replaceable">XML</em><tt class="literal">.childNodes</tt>,
<em class="replaceable">XML</em><tt class="literal">.firstChild</tt>,
<em class="replaceable">XML</em><tt class="literal">.lastChild</tt>,
<em class="replaceable">XML</em><tt class="literal">.previousSibling</tt></p>


</div>

<a name="INDEX-3689" /><a name="INDEX-3690" /><a name="INDEX-3691" /><a name="INDEX-3692" /><a name="INDEX-3693" /><a name="INDEX-3694" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b><i>



XML.parseXML( ) Method</i></b></font></td><td align="right"><i>parse a string of XML source code
</i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><table width="515" border="0" cellpadding="5"><tr><td align="left" /><td align="right" /></tr></table>
<h4 class="refsect1">Availability</h4>


<p>Flash 5</p>



<h4 class="refsect1">Synopsis</h4>

<blockquote><pre class="code">
<em>XMLdoc</em>.parseXML(<em>string</em>)</pre></blockquote>



<h4 class="refsect2">Arguments</h4>


<dl>
<dt><em>string</em></dt>
<dd><p>A string of XML source code.</p></dd>

</dl>




<h4 class="refsect1">Description</h4>


<p>The <em class="filename">parseXML( )</em> method is akin to an internal
<em class="filename">load( )</em> function; it reads and parses the XML
source contained by <em class="replaceable">string</em>, converts that
XML into an object hierarchy, and then places the resulting hierarchy
into <em class="replaceable">XMLdoc</em>. Any previous contents of
<em class="replaceable">XMLdoc</em> are replaced by the new hierarchy.
<em class="replaceable">XMLdoc </em>must be an instance of the
<em class="emphasis">XML</em> class, not the <em class="emphasis">XMLnode</em>
class<em class="replaceable">.</em></p>


<p>To include raw HTML or XML source code in a text node without parsing
it, use a CDATA section as follows:</p>


<blockquote><pre class="code">&lt;![CDATA[ source ]]&gt;</pre></blockquote>


<p>For example, the following code creates a <tt class="literal">MESSAGE</tt>
element with a single child text node containing the text
"&lt;B&gt;Welcome&lt;/B&gt; to my site" (the
<tt class="literal">&lt;B&gt;</tt> tag is <em class="emphasis">not</em>
interpreted as an XML tag and does not become part of the XML object
hierarchy):</p>


<blockquote><pre class="code">myDoc = new XML( );
myDoc.parseXML("&lt;MESSAGE&gt;&lt;![CDATA[&lt;B&gt;Welcome&lt;/B&gt; to my site]]&gt;&lt;/MESSAGE&gt;");
trace(myDoc);  // Displays: "&lt;MESSAGE&gt;&lt;B&gt;Welcome&lt;/B&gt; to my site&lt;/MESSAGE&gt;"</pre></blockquote>



<h4 class="refsect1">Example</h4>


<p>We can use <em class="filename">parseXML</em>( ) as a means of replacing
the current object hierarchy in an <em class="filename">XML</em> object
with a new hierarchy based on internally composed XML source code
(for example, some user input). In the following example, we create a
simple XML message by combining markup with input from text fields
named <tt class="literal">username</tt> and <tt class="literal">content</tt>:</p>


<blockquote><pre class="code">myDoc = new XML( );
myXMLsource = "&lt;MESSAGE&gt;&lt;USER&gt;" + username + "&lt;/USER&gt;&lt;CONTENT&gt;" 
    + content + "&lt;/CONTENT&gt;&lt;/MESSAGE&gt;";
myDoc.parseXML(myXMLsource);</pre></blockquote>



<h4 class="refsect1">See Also</h4>


<p><em class="filename">XML.load( )</em>,
<em class="replaceable">XML</em><tt class="literal">.status</tt></p>


</div>

<a name="INDEX-3695" /><a name="INDEX-3696" /><a name="INDEX-3697" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b><i>

XML.previousSibling Property</i></b></font></td><td align="right"><i>a reference to the node before this node
</i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><table width="515" border="0" cellpadding="5"><tr><td align="left" /><td align="right" /></tr></table>
<h4 class="refsect1">Availability</h4>


<p>Flash 5</p>



<h4 class="refsect1">Synopsis</h4>

<blockquote><pre class="code">
<em>theNode</em>.previousSibling</pre></blockquote>



<h4 class="refsect1">Access</h4>


<p>Read-only</p>



<h4 class="refsect1">Description</h4>


<p>The <tt class="literal">previousSibling</tt> property returns a reference
to the node object preceding <em class="replaceable">theNode</em> in
the current level of the XML object hierarchy. If there is no node
before <em class="replaceable">theNode</em> in the current level of the
hierarchy, it returns <tt class="literal">null</tt>.</p>


<p>In the following XML source fragment, the
<tt class="literal">previousSibling</tt> of the <tt class="literal">CONTENT</tt>
node is the <tt class="literal">USER</tt> node:</p>


<blockquote><pre class="code">&lt;MESSAGE&gt;&lt;USER&gt;gray&lt;/USER&gt;&lt;CONTENT&gt;hi&lt;/CONTENT&gt;&lt;/MESSAGE&gt;</pre></blockquote>



<h4 class="refsect1">Example</h4>


<p><tt class="literal">The previousSibling</tt> property can be used to
traverse an XML object hierarchy, although
<tt class="literal">nextSibling</tt> is more commonly used for this
purpose. To view all the children of
<em class="replaceable">theNode</em> in reverse order, we may use:</p>


<blockquote><pre class="code">for (var i = theNode.lastChild; i != null; i = i.previousSibling) {
  trace("found node: " + i.nodeName);
}</pre></blockquote>



<h4 class="refsect1">See Also</h4>


<p><em class="replaceable">XML</em><tt class="literal">.childNodes</tt>,
<em class="replaceable">XML</em><tt class="literal">.firstChild</tt>,
<em class="replaceable">XML</em><tt class="literal">.lastChild</tt>,
<em class="replaceable">XML</em><tt class="literal">.nextSibling</tt>,
<em class="replaceable">XML</em><tt class="literal">.nodeName</tt>,
<em class="replaceable">XML</em><tt class="literal">.nodeValue</tt>,
<em class="replaceable">XML</em><tt class="literal">.parentNode</tt></p>


</div>

<a name="INDEX-3698" /><a name="INDEX-3699" /><a name="INDEX-3700" /><a name="INDEX-3701" /><a name="INDEX-3702" /><a name="INDEX-3703" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b><i>
XML.removeNode( ) Method</i></b></font></td><td align="right"><i>delete a node from an XML object hierarchy
</i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><table width="515" border="0" cellpadding="5"><tr><td align="left" /><td align="right" /></tr></table>
<h4 class="refsect1">Availability</h4>


<p>Flash 5</p>



<h4 class="refsect1">Synopsis</h4>

<blockquote><pre class="code">
<em>theNode</em>.removeNode()</pre></blockquote>



<h4 class="refsect1">Description</h4>


<p>The <em class="filename">removeNode( )</em> method deletes
<em class="replaceable">theNode</em> from an <a name="INDEX-3700" /> <a name="INDEX-3701" /> <a name="INDEX-3702" />XML <a name="INDEX-3703" />document.
All descendants (children, grandchildren, and so on) of
<em class="replaceable">theNode</em> are also deleted. The
<tt class="literal">childNodes</tt> property of
<em class="replaceable">theNode</em>'s parent is automatically
updated to reflect the new structure of the remaining object
hierarchy.</p>



<h4 class="refsect1">Example</h4>


<p>Here we delete the second child node; the third child node takes its
place:</p>


<blockquote><pre class="code">myDoc = new XML("&lt;P&gt;one&lt;/P&gt;&lt;P&gt;two&lt;/P&gt;&lt;P&gt;three&lt;/P&gt;");
myDoc.childNodes[1].removeNode( );
trace(myDoc);  // Displays: "&lt;P&gt;one&lt;/P&gt;&lt;P&gt;three&lt;/P&gt;"</pre></blockquote>



<h4 class="refsect1">See Also</h4>


<p><em class="filename">XML.appendChild( )</em></p>


</div>

<a name="INDEX-3704" /><a name="INDEX-3705" /><a name="INDEX-3706" /><a name="INDEX-3707" /><a name="INDEX-3708" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b><i>

XML.send( ) Method</i></b></font></td><td align="right"><i>send XML source code to a script
</i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><table width="515" border="0" cellpadding="5"><tr><td align="left" /><td align="right" /></tr></table>
<h4 class="refsect1">Availability</h4>


<p>Flash 5</p>



<h4 class="refsect1">Synopsis</h4>

<blockquote><pre class="code">
<em>XMLdoc</em>.send(<em>URL, window</em>)</pre></blockquote>



<h4 class="refsect2">Arguments</h4>


<dl>
<dt><em>URL</em></dt>
<dd><p>A string specifying the location of a script or application to which
<em class="replaceable">XMLdoc</em> should be sent.</p></dd>

</dl>


<dl>
<dt><em>window</em></dt>
<dd><p>A required string, specifying the name of the browser window or frame
into which to load the script's response. May be a custom name
or one of the four presets: <tt class="literal">"_blank"</tt>, <tt class="literal">"_
parent"</tt>, <tt class="literal">"_self"</tt>, or
<tt class="literal">"_top"</tt>. For details, see the description of the
window settings under the global <em class="filename">getURL( )</em>
function.</p></dd>

</dl>




<h4 class="refsect1">Description</h4>


<p>The<em class="filename"> send( )</em> method converts
<em class="replaceable">XMLdoc</em> into a string of XML source code
and sends that code in an HTTP request to the script or application
residing at <em class="replaceable">URL</em>. The script or application
is expected to process the XML in some way and optionally return a
response -- normally a web page -- to the browser, which
displays it in <em class="replaceable">window</em>. Note that the
response is not caught by Flash but by the browser; use
<em class="filename">sendAndLoad( )</em> to catch the response within
Flash.</p>


<p>When <em class="filename">XML.send( )</em> is invoked from the Flash
<a name="INDEX-3707" />Player running in a browser,
<em class="replaceable">XMLdoc</em> is sent via the POST method. When
<em class="filename">XML.send( )</em> is invoked from the Flash Player
running as a standalone application,
<em class="replaceable">XMLdoc</em> is sent via the GET method. The
server application receiving the posted XML string must be able to
access the raw POST data of the HTTP request directly and should not
attempt to parse it as normal name/value pairs. In Perl, the data in
a POST request is available from STDIN, and may be extracted and
stored in, say, <tt class="literal">$buffer</tt> as follows:</p>


<blockquote><pre class="code">read(STDIN,$buffer,$ENV{'CONTENT_LENGTH'});</pre></blockquote>


<p>In ASP, raw POST data may be accessed via the
<em class="filename">Request.BinaryRead</em> method. Some applications
(e.g., Cold Fusion) may not have a direct means of accessing the data
in a POST request. For these situations, it may be necessary to first
convert the XML object to a string using <em class="filename">XML.toString(
)</em> and then pass that string to the server as a variable
using <em class="filename">loadVariables( )</em>.</p>


<p>The default <a name="INDEX-3708" />MIME
content type of the XML text sent to the server is
<tt class="literal">application/x-www-urlform-encoded</tt>. This type,
however, is only cosmetic -- the text itself is
<em class="emphasis">not</em> URL-encoded. In Build 41 and later of the
Flash 5 Player, the MIME content type can be modified using the
<tt class="literal">XML.contentType</tt> property. For example, to set the
MIME type to <tt class="literal">application/xml</tt>, we use:</p>


<blockquote><pre class="code">myXML = new XML( );
myXML.contentType = "application/xml";</pre></blockquote>


<p>Nevertheless, setting the <tt class="literal">contentType</tt> property
explicitly to <tt class="literal">application/x-www-urlform-encoded</tt>
still does not cause the text sent to be URL-encoded.</p>


<p>Note that as of Build 41 of the Flash 5 Player, when XML source is
parsed and the characters <tt class="literal">&amp;</tt>,
<tt class="literal">'</tt>, <tt class="literal">"</tt>, <tt class="literal">&lt;</tt>,
and <tt class="literal">&gt;</tt> appear in a text node, they are converted
to the following entities: <tt class="literal">&amp;amp;</tt>,
<tt class="literal">&amp;apos;</tt>, <tt class="literal">&amp;quot;</tt>,
<tt class="literal">&amp;gt;</tt>, <tt class="literal">&amp;lt;</tt>. This
conversion is transparent in Flash because the entities are converted
back to their original characters when an XML object is converted to
a string; however, the entities <em class="emphasis">will</em> show up in
XML source sent to the server.</p>



<h4 class="refsect1">Example</h4>


<blockquote><pre class="code">myDoc = new XML("&lt;SEARCH_TERM&gt;tutorials&lt;/SEARCH_TERM&gt;");
myDoc.send("http://www.domain.com/cgi-bin/lookup.cgi", "remoteWin");</pre></blockquote>



<h4 class="refsect1">See Also</h4>


<p><em class="filename">XML</em>.<em class="filename">sendAndLoad( ),
XML</em>.<em class="filename">load( )</em>,<em class="filename">
</em><em class="replaceable">XML</em><tt class="literal">.loaded</tt>,
<em class="filename">XML.onLoad( )</em>,
<em class="replaceable">XML</em><tt class="literal">.status</tt></p>


</div>

<a name="INDEX-3709" /><a name="INDEX-3710" /><a name="INDEX-3711" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b><i>
XML.sendAndLoad( ) Method</i></b></font></td><td align="right"><i>send XML source code to a script, and receive XML source in return
</i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><table width="515" border="0" cellpadding="5"><tr><td align="left" /><td align="right" /></tr></table>
<h4 class="refsect1">Availability</h4>


<p>Flash 5</p>



<h4 class="refsect1">Synopsis</h4>

<blockquote><pre class="code">
<em>XMLdoc</em>.sendAndLoad(<em>URL, resultXML</em>)</pre></blockquote>



<h4 class="refsect2">Arguments</h4>


<dl>
<dt><em>URL</em></dt>
<dd><p>A string specifying the location of a script or application to which
<em class="replaceable">XMLdoc</em> should be sent.</p></dd>

</dl>


<dl>
<dt><em>resultXML</em></dt>
<dd><p>A reference to an <em class="filename">XML</em> document object that will
receive the returned XML source code.</p></dd>

</dl>




<h4 class="refsect1">Description</h4>


<p>The<em class="filename"> sendAndLoad( )</em> method serializes
<em class="replaceable">XMLdoc</em> into a string of XML source code
and sends that code to a script or application that resides at
<em class="replaceable">URL</em>. The script or application is expected
to process the XML in some way and send an XML document back as a
response. The response document is caught by Flash, parsed, converted
into an XML object hierarchy, and placed in
<em class="replaceable">resultXML</em>. Any previous contents of
<em class="replaceable">resultXML</em> are replaced by the newly loaded
XML content. See <em class="filename">XML.send( )</em> for important
information about sending XML to a server.</p>



<h4 class="refsect1">Usage</h4>


<p>Before accessing content imported with <em class="filename">sendAndLoad(
)</em>, we must be sure that the load and parsing operations
are complete. To do so, we either check the value of the
<em class="replaceable">resultXML</em>'s
<tt class="literal">loaded</tt> property or we assign
<em class="replaceable">resultXML</em> an <em class="filename">onLoad(
)</em> event handler to respond to the load completion. See the
<em class="replaceable">XML</em>.<tt class="literal">loaded</tt> and
<em class="filename">XML.onLoad( )</em> entries for details. To determine
the result of parsing the loaded data, we check the document's
<tt class="literal">status</tt> property.</p>


<p><em class="filename">XML.sendAndLoad( )</em> is subject to the
domain-based security restrictions described in <a href="ch20_05.htm">Table 20-8</a> under the global <em class="filename">loadVariables(
)</em> function.</p>



<h4 class="refsect1">Example</h4>


<blockquote><pre class="code">// Create an XML document
myDoc = new XML("&lt;P&gt;hello server!&lt;/P&gt;");

// Create an empty XML document to receive the server's response
serverResponse = new XML( );

// Send myDoc to the server, and place the response in serverResponse
myDoc.sendAndLoad("http://www.domain.com/cgi-bin/readData.cgi", serverResponse);

// Add an onLoad handler to serverResponse that displays the response
// from the server in the text field output.
serverResponse.onLoad = function ( ) {
  output = serverResponse.toString( );
}</pre></blockquote>


<p>For a good primer on sending XML to and from a server, see
Macromedia's article "Integrating XML and Flash in a Web
Application," at:</p>


<blockquote class="simplelist">

<p><a href="../../../../../../www.macromedia.com/support/flash/interactivity/xml">http://www.macromedia.com/support/flash/interactivity/xml</a></p>

</blockquote>



<h4 class="refsect1">See Also</h4>


<p><em class="filename">XML.load( )</em>,<em class="filename">
</em><em class="replaceable">XML</em><tt class="literal">.loaded</tt>,
<em class="filename">XML.onLoad( )</em>, <em class="filename">XML.send(
)</em>,<em class="filename">
</em><em class="replaceable">XML</em><tt class="literal">.status</tt></p>


</div>

<a name="INDEX-3712" /><a name="INDEX-3713" /><a name="INDEX-3714" /><a name="INDEX-3715" /><a name="INDEX-3716" /><a name="INDEX-3717" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b><i>

XML.status Property</i></b></font></td><td align="right"><i>indicates whether parsing XML source into an object hierarchy was successful
</i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><table width="515" border="0" cellpadding="5"><tr><td align="left" /><td align="right" /></tr></table>
<h4 class="refsect1">Availability</h4>


<p>Flash 5</p>



<h4 class="refsect1">Synopsis</h4>

<blockquote><pre class="code">
<em>XMLdoc</em>.status</pre></blockquote>



<h4 class="refsect1">Access</h4>


<p>Read-only</p>



<h4 class="refsect1">Description</h4>


<p>The <tt class="literal">status</tt> property returns a numeric status code
indicating whether any errors were encountered when parsing XML
source code. Parsing occurs when source XML is:</p>


<ul><li><p>Provided as an argument to the <em class="filename">XML( )</em> constructor</p></li></ul>
<ul><li><p>Explicitly parsed via the <em class="filename">parseXML( )</em> method</p></li></ul>
<ul><li><p>Loaded into a new <em class="filename">XML</em> object via the
<em class="filename">load( )</em> or <em class="filename">sendAndLoad( )</em>
methods</p></li></ul>
<p>The <a name="INDEX-3715" /><tt class="literal">status</tt> codes are
shown in <a href="ch20_05.htm">Table 20-14</a>. If no errors were encountered
in parsing, success is indicated by a <tt class="literal">status</tt> of 0.
Errors are indicated by negative numbers. Parsing terminates once the
first error is encountered, so other errors may surface even after
you address previously reported errors.</p>


<a name="ch20-24377" /><h4 class="objtitle">Table 20-14. XML Parsing Status Codes </h4><table border="1">



<tr>
<th>
<p>Status</p></th>
<th>
<p>Description</p></th>
</tr>




<tr>
<td>
<p>	0</p></td>
<td>
<p>The document parsed without errors (i.e., success).</p></td>
</tr>

<tr>
<td>
<p>	-2</p></td>
<td>
<p>A CDATA section was not properly terminated.</p></td>
</tr>

<tr>
<td>
<p>	-3</p></td>
<td>
<p>The XML declaration was not properly terminated.</p></td>
</tr>

<tr>
<td>
<p>	-4</p></td>
<td>
<p>The <tt class="literal">DOCTYPE</tt> declaration was not properly
terminated.</p></td>
</tr>

<tr>
<td>
<p>	-5</p></td>
<td>
<p>A comment was not properly terminated.</p></td>
</tr>

<tr>
<td>
<p>	-6</p></td>
<td>
<p>An XML element was malformed.</p></td>
</tr>

<tr>
<td>
<p>	-7</p></td>
<td>
<p>Not enough memory to parse the XML source.</p></td>
</tr>

<tr>
<td>
<p>	-8</p></td>
<td>
<p>An attribute value was not properly terminated.</p></td>
</tr>

<tr>
<td>
<p>	-9</p></td>
<td>
<p>A start tag had no corresponding end tag.</p></td>
</tr>

<tr>
<td>
<p>-10</p></td>
<td>
<p>An end tag had no corresponding start tag.</p></td>
</tr>


</table>


<p>We normally use <tt class="literal">status</tt> to determine whether
it's safe to proceed with processing an externally loaded XML
file. Check the <a name="INDEX-3716" /> <a name="INDEX-3717" /><tt class="literal">loaded</tt> property to
ensure that a <em class="filename">load( )</em> or <em class="filename">sendAndLoad(
)</em> command has completed before checking the
<tt class="literal">status</tt>. Note that ActionScript's XML parser
does not validate documents against DTDs, it only verifies
well-formedness.</p>



<h4 class="refsect1">Example</h4>


<blockquote><pre class="code">myDoc = new XML("&lt;BOOK&gt;Colin Moock&lt;/AUTHOR&gt;&lt;/BOOK&gt;");
trace(myDoc.status);  // Displays: "-10" (missing start tag)</pre></blockquote>



<h4 class="refsect1">See Also</h4>


<p><em class="filename">XML.load( )</em>,
<em class="filename">XML.</em><tt class="literal">loaded</tt>,
<em class="filename">XML.onLoad( )</em>, <em class="filename">XML.parseXML(
)</em>, <em class="filename">XML.sendAndLoad( )</em></p>


</div>

<a name="INDEX-3718" /><a name="INDEX-3719" /><a name="INDEX-3720" /><a name="INDEX-3721" /><a name="INDEX-3722" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b><i>
XML.toString( ) Method</i></b></font></td><td align="right"><i>the source code of the XML node, as a string
</i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><table width="515" border="0" cellpadding="5"><tr><td align="left" /><td align="right" /></tr></table>
<h4 class="refsect1">Availability</h4>


<p>Flash 5</p>



<h4 class="refsect1">Synopsis</h4>

<blockquote><pre class="code">
<em>theNode</em>.toString()</pre></blockquote>



<h4 class="refsect2">Returns</h4>


<p>A string representing the source code of the XML object hierarchy
starting at <em class="replaceable">theNode</em>.</p>




<h4 class="refsect1">Description</h4>


<p>The <em class="filename">toString( )</em> method converts an XML node
object or an <a name="INDEX-3721" /> <a name="INDEX-3722" />XML document object to its analogous XML
source code. If <em class="replaceable">theNode</em> is a top-level XML
document object, any <tt class="literal">DOCTYPE</tt> and XML declaration
tags are included in the string. If the document's
<tt class="literal">ignoreWhite</tt> property is <tt class="literal">false</tt>,
whitespace is preserved and the document source code appears as it
did when it was parsed.</p>


<p>It's not normally necessary to invoke <em class="filename">toString(
)</em> explicitly; <em class="filename">toString( )</em> is
automatically invoked any time <em class="replaceable">theNode</em> is
used in a string context.</p>



<h4 class="refsect1">Example</h4>


<blockquote><pre class="code">var myDoc = new XML('&lt;?xml version="1.0"?&gt;&lt;!DOCTYPE foo SYSTEM "bar.dtd"&gt;&lt;BOOK&gt;       
&lt;TITLE&gt;ActionScript: The Definitive Guide&lt;/TITLE&gt;'
  + '&lt;AUTHOR SALUTATION="Mr"&gt;Colin Moock  &lt;/AUTHOR&gt;    '
  + '&lt;PUBLISHER&gt;O\'reilly &amp; Associates, Inc&lt;/PUBLISHER&gt;    &lt;/BOOK&gt;');

trace(myDoc.toString( ));
// Displays:
&lt;?xml version="1.0"?&gt;&lt;!DOCTYPE foo SYSTEM "bar.dtd"&gt;
&lt;BOOK&gt;       &lt;TITLE&gt;ActionScript:
 The Definitive Guide&lt;/TITLE&gt;&lt;AUTHOR SALUTATION="Mr"&gt;Colin 
Moock  &lt;/AUTHOR&gt;    &lt;PUBLISHER&gt;O'reilly &amp; Associates, Inc
&lt;/PUBLISHER&gt;    &lt;/BOOK&gt;</pre></blockquote>



<h4 class="refsect1">See Also</h4>


<p><em class="filename">Object.toString( )</em>,
<em class="replaceable">XML</em><tt class="literal">.nodeValue</tt></p>


</div>

<a name="INDEX-3723" /><a name="INDEX-3724" /><a name="INDEX-3725" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b><i>
XML.xmlDecl Property</i></b></font></td><td align="right"><i>the document's XML declaration tag
</i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><table width="515" border="0" cellpadding="5"><tr><td align="left" /><td align="right" /></tr></table>
<h4 class="refsect1">Availability</h4>


<p>Flash 5</p>



<h4 class="refsect1">Synopsis</h4>

<blockquote><pre class="code">
<em>XMLdoc</em>.xmlDecl</pre></blockquote>



<h4 class="refsect1">Access</h4>


<p>Read/write</p>



<h4 class="refsect1">Description</h4>


<p>The <tt class="literal">xmlDecl</tt> string property represents the XML
declaration tag of <em class="replaceable">XMLdoc</em>, if any exists.
Otherwise, <tt class="literal">xmlDecl</tt> is <tt class="literal">undefined
</tt>. <em class="replaceable">XMLdoc</em> must be the top-level
node in an <em class="filename">XML</em> object hierarchy (that is, an
instance of the <em class="emphasis">XML</em> class, not the
<em class="emphasis">XMLnode</em> class.)</p>


<p>The XML declaration tag of an <a name="INDEX-3725" />XML document is used to identify the
version of XML being used in the document. We use the XML declaration
tag to build well-formed XML documents that may be validated
externally.</p>



<h4 class="refsect1">Example</h4>


<blockquote><pre class="code">// A well-formed document (but not validated against a DTD)
myXML = new XML('&lt;?xml version="1.0"?&gt;&lt;P&gt;this is a short document&lt;/P&gt;');
trace(myXML.xmlDecl);  // Displays: "&lt;?xml version="1.0"?&gt;"
// Set a new XML declaration
myXML.xmlDecl = '&lt;?xml version="1.0" standalone="no"?&gt;';</pre></blockquote>



<h4 class="refsect1">See Also</h4>


<p><em class="replaceable">XML</em><tt class="literal">.docTypeDecl</tt></p>


</div>

<a name="INDEX-3726" /><a name="INDEX-3727" /><a name="INDEX-3728" /><a name="INDEX-3729" /><a name="INDEX-3730" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b><i>

XMLnode Class</i></b></font></td><td align="right"><i>Internal superclass of the XML class
</i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><table width="515" border="0" cellpadding="5"><tr><td align="left" /><td align="right" /></tr></table>
<h4 class="refsect1">Availability</h4>


<p>Flash 5</p>



<h4 class="refsect1">Description</h4>


<p>The <a name="INDEX-3729" /><em class="filename">XMLnode</em> class
defines the core properties and methods of nodes in an
<a name="INDEX-3730" />XML object hierarchy. Though
<em class="filename">XMLnode</em> is an internal device, it may be used by
programmers to extend the default functionality of XML objects.</p>


<p>Every XML object hierarchy technically includes two kinds of object
nodes:</p>


<ul><li><p>One <em class="emphasis">XML</em> node, that serves as the main container
for the hierarchy</p></li></ul>
<ul><li><p>An arbitrary number of <em class="filename">XMLnode</em> nodes, which are
the children of the main container node</p></li></ul>
<p>The main container node is an instance of the
<em class="emphasis">XML</em> class. For example, if we create
<tt class="literal">myDoc</tt> as follows:</p>


<blockquote><pre class="code">myDoc = new XML();</pre></blockquote>


<p>then <tt class="literal">myDoc</tt> is an instance of the
<em class="filename">XML</em> class. The <em class="filename">XML</em> class
inherits from the <em class="filename">XMLnode</em> class, so main
container nodes have all the properties and methods defined by
<em class="filename">XMLnode</em> plus those defined by
<em class="filename">XML</em>. By contrast, the children of
<tt class="literal">myDoc</tt> would actually be instances of the
<em class="filename">XMLnode</em> class, not the <em class="filename">XML</em>
class.</p>


<p>So, if we create <tt class="literal">myParagraph</tt> as follows:</p>


<blockquote><pre class="code">myParagraph = myDoc.createElement("P");</pre></blockquote>


<p>then <tt class="literal">myParagraph</tt> is an instance of the
<em class="filename">XMLnode</em> class. Most of the time the internal
distinction between node classes does not affect our use of XML
objects. However, if we wish to add an inherited property or method
to all XML objects, then we must use the <em class="filename">XMLnode</em>
class's <tt class="literal">prototype</tt>, not the
<em class="filename">XML</em> class's <tt class="literal">prototype</tt>
(see the example that follows). Any methods or properties attached to
<tt class="literal">XMLnode.prototype</tt> are inherited by all XML nodes
in a movie.</p>


<p>For reference, the properties, methods, and event handlers defined by
<em class="filename">XMLnode</em> and <em class="filename">XML</em> are listed
in <a href="ch20_05.htm">Table 20-15</a>. Note that while all listed items are
accessible through instances of the <em class="filename">XML</em> class,
items defined by <em class="filename">XML</em> are not available through
instances of <em class="filename">XMLnode</em>. For example, the
<em class="filename">load( )</em> method may be invoked on an instance of
the <em class="filename">XML</em> class, but not on an instance of the
<em class="filename">XMLnode</em> class. For a full discussion of each
item, see the appropriate <em class="filename">XML</em> class entry.</p>


<a name="ch20-66637" /><h4 class="objtitle">Table 20-15. XMLnode and XML Properties, Methods, and Event Handlers </h4><table border="1">



<tr>
<th>
<p>XMLnode and XML</p></th>
<th>
<p>XML only</p></th>
</tr>




<tr>
<td>
<p><em class="emphasis">appendChild( )</em></p></td>
<td>
<p><tt class="literal">contentType</tt></p></td>
</tr>

<tr>
<td>
<p><tt class="literal">attributes</tt></p></td>
<td>
<p><em class="emphasis">createElement( )</em></p></td>
</tr>

<tr>
<td>
<p><tt class="literal">childNodes</tt></p></td>
<td>
<p><em class="emphasis">createTextNode( )</em></p></td>
</tr>

<tr>
<td>
<p><em class="emphasis">cloneNode( )</em></p></td>
<td>
<p><tt class="literal">docTypeDecl</tt></p></td>
</tr>

<tr>
<td>
<p><tt class="literal">firstChild</tt></p></td>
<td>
<p><tt class="literal">ignoreWhite</tt></p></td>
</tr>

<tr>
<td>
<p><em class="emphasis">hasChildNodes( )</em></p></td>
<td>
<p><em class="emphasis">load( )</em></p></td>
</tr>

<tr>
<td>
<p><em class="emphasis">insertBefore( )</em></p></td>
<td>
<p><tt class="literal">loaded</tt></p></td>
</tr>

<tr>
<td>
<p><tt class="literal">lastChild</tt></p></td>
<td>
<p><em class="emphasis">onData( )</em></p></td>
</tr>

<tr>
<td>
<p><tt class="literal">nextSibling</tt></p></td>
<td>
<p><em class="emphasis">onLoad( )</em></p></td>
</tr>

<tr>
<td>
<p><tt class="literal">nodeName</tt></p></td>
<td>
<p><em class="emphasis">parseXML( )</em></p></td>
</tr>

<tr>
<td>
<p><tt class="literal">nodeType</tt></p></td>
<td>
<p><em class="emphasis">send( )</em></p></td>
</tr>

<tr>
<td>
<p><tt class="literal">nodeValue</tt></p></td>
<td>
<p><em class="emphasis">sendAndLoad( )</em></p></td>
</tr>

<tr>
<td>
<p><tt class="literal">parentNode</tt></p></td>
<td>
<p><tt class="literal">status</tt></p></td>
</tr>

<tr>
<td>
<p><tt class="literal">previousSibling</tt></p></td>
<td>
<p><tt class="literal">xmlDecl</tt></p></td>
</tr>

<tr>
<td>
<p><em class="emphasis">removeNode( )</em></p></td>
<td />
</tr>

<tr>
<td>
<p><em class="emphasis">toString( )</em></p></td>
<td />
</tr>


</table>



<h4 class="refsect1">Example</h4>


<p>The following code adds a custom <em class="filename">secondChild( )</em>
method to <tt class="literal">XMLnode.prototype</tt> (the
<em class="filename">secondChild( )</em> method is subsequently available
from any XML node in our movie):</p>


<blockquote><pre class="code">XMLnode.prototype.secondChild = function () {
  return this.childNodes[1];
};

myDoc = new XML("&lt;PRODUCT&gt;Cell Phone&lt;/PRODUCT&gt;&lt;PRODUCT&gt;Game Console              &lt;/PRODUCT&gt;");

trace(myDoc.secondChild());  // Displays: "&lt;PRODUCT&gt;Game Console&lt;/PRODUCT&gt;"</pre></blockquote>


<p>It's also perfectly legitimate to extend the
<em class="filename">XML</em> class via <tt class="literal">XML.prototype</tt>,
but such extensions apply only to main container nodes (direct
instances of the <em class="filename">XML</em> class).</p>



<h4 class="refsect1">See Also</h4>


<p>The <em class="filename">XML</em> Class; <a href="ch12_05.htm">Section 12.5.4, "Superclasses and Subclasses"</a> in <a href="ch12_01.htm">Chapter 12, "Objects and Classes"</a>.</p>


</div>

<a name="INDEX-3731" /><a name="INDEX-3732" /><a name="INDEX-3733" /><a name="INDEX-3734" /><a name="INDEX-3735" /><a name="INDEX-3736" /><a name="INDEX-3737" /><a name="INDEX-3738" /><a name="INDEX-3739" /><a name="INDEX-3740" /><a name="INDEX-3741" /><a name="INDEX-3742" /><a name="INDEX-3743" /><a name="INDEX-3744" /><a name="INDEX-3745" /><a name="INDEX-3746" /><a name="INDEX-3747" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b><i>


XMLSocket Class</i></b></font></td><td align="right"><i>support for a continuous server/client TCP/IP connection
</i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><table width="515" border="0" cellpadding="5"><tr><td align="left" /><td align="right" /></tr></table>
<h4 class="refsect1">Availability</h4>


<p>Flash 5</p>



<h4 class="refsect1">Constructor</h4>

<blockquote><pre class="code">
new XMLSocket()</pre></blockquote>



<h4 class="refsect1">Methods</h4>


<dl>
<dt><em>close<em class="filename">( )</em></em></dt>
<dd><p>Terminate an open connection to a server application.</p></dd>

</dl>


<dl>
<dt><em>connect<em class="filename">( )</em></em></dt>
<dd><p>Attempt to establish a new connection to a server application.</p></dd>

</dl>


<dl>
<dt><em>send<em class="filename">( )</em></em></dt>
<dd><p>Send an XML object hierarchy to a server application as a string.</p></dd>

</dl>



<h4 class="refsect1">Event handlers</h4>


<dl>
<dt><em>onClose<em class="filename">( )</em></em></dt>
<dd><p>Executes when the server terminates the connection.</p></dd>

</dl>


<dl>
<dt><em>onConnect<em class="filename">( )</em></em></dt>
<dd><p>Executes when a connection attempt completes.</p></dd>

</dl>


<dl>
<dt><em>onData<em class="filename">( )</em></em></dt>
<dd><p>Executes when data is received but has not yet been parsed as XML.</p></dd>

</dl>


<dl>
<dt><em>onXML<em class="filename">( )</em></em></dt>
<dd><p>Executes when data has been received and parsed into an XML object
hierarchy.</p></dd>

</dl>



<h4 class="refsect1">Description</h4>


<p>The majority of connections between Flash and a server have a very
short life span. When Flash requests external data via the
<em class="filename">loadMovie( )</em>, <em class="filename">loadVariables(
)</em>, or <em class="filename">XML.load( )</em> functions, a
temporary communication channel is established. Data is sent over
that channel and then the channel is terminated. This kind of
short-term communication has many useful applications, but it is also
limited in two important ways:</p>


<ul><li><p>Once the connection closes, the server has no way of contacting
Flash. Flash must always initiate communication with the server.</p></li></ul>
<ul><li><p>Each time Flash obtains information from the server, a new connection
must be opened. The time and processor load involved in opening
repeated connections prevents Flash from engaging in anything near
real-time transactions with a server.</p></li></ul>
<p>As of Flash 5, we can overcome these limitations with the
<em class="filename">XMLSocket</em> class, which allows us to open a
persistent communication link between a server application and Flash.
We use <em class="filename">XMLSocket</em> to develop systems that require
frequent server updates, such as a chat room or a networked
multiplayer game.</p>


<p>In order to connect to a remote application using
<em class="filename">XMLSocket</em>, we must first create and store an
<em class="filename">XMLSocket</em> object, like this:</p>


<blockquote><pre class="code">mySocket = new XMLSocket( );</pre></blockquote>


<p>Then, we invoke the <em class="filename">connect( )</em> method, which
asks Flash to establish a communication link with the remote
application. For example:</p>


<blockquote><pre class="code">mySocket.connect("http://www.myserver.com", 8000);</pre></blockquote>


<p>Once a connection is established, the <em class="emphasis">XMLsocket</em>
object acts as a transmitter/receiver. We send XML-formatted data to
the remote application by invoking the socket's <em class="filename">send(
)</em> method, and we know that we've received
XML-formatted data when the socket's <em class="filename">onXML(
)</em> event is triggered.</p>


<p>A server application used with an <em class="filename">XMLSocket</em>
object must:</p>


<ul><li><p>Serve TCP/IP socket connections on a specific port greater than or
equal to 1024</p></li></ul>
<ul><li><p>Transmit XML-formatted data in segments delimited by a <em class="emphasis">zero
byte</em><a name="INDEX-3736" />
<a name="INDEX-3737" /> (i.e.,
the ASCII null character)</p></li></ul>
<p>Server applications are typically created by server-side programmers,
not Flash programmers. For an example of a simple server application
that broadcasts all messages it receives to all connected clients,
see the Java XMLSocket server available at the online Code Depot.</p>


<p>An <em class="filename">XMLSocket</em> connection stays open until one of
the following occurs:</p>


<ul><li><p>The <em class="filename">close( )</em> method of the
<em class="filename">XMLSocket</em> object is called.</p></li></ul>
<ul><li><p>No more references to the <em class="filename">XMLSocket</em> object exist.</p></li></ul>
<ul><li><p>The server terminates the connection (this triggers an
<em class="filename">onClose( )</em> event).</p></li></ul>
<ul><li><p>The movie is closed or the Flash Player exits.</p></li></ul>
<p>Thankfully, the <em class="filename">XMLSocket</em> class also provides a
way for us to monitor the status of our connection. It includes three
properties -- <em class="replaceable">onClose</em>,
<em class="replaceable">onConnect</em>, and
<em class="replaceable">onXML</em><em class="filename"> -- </em>that
allow us to define event handlers that will be triggered when the
corresponding event occurs. Such handlers are typically known as
<a name="INDEX-3738" /><em class="filename">callback
handlers</em> because they are triggered automatically by Flash
in response to some event beyond the programmer's direct
control. (In this sense they are very similar to ActionScript's
built-in clip and button event handlers, except that the handler
functions are programmer-defined.) For example, when a connection is
closed by the server, the handler defined by the
<em class="replaceable">onClose</em> property will be triggered.</p>




<a name="ch20-1901-fm2xml" /><blockquote><h4>TIP</h4>
<p>If you fail to define callback handlers for the
<em class="replaceable">onClose</em> and
<em class="replaceable">onConnect</em> properties, you won't be
able to perform any error checking or provide any feedback. If you
fail to define a callback handler for your
<em class="replaceable">onXML</em> property, you won't be
notified when the socket receives data from a server-side
application, nor will you be able to retrieve such data.</p>

</blockquote>


<h4 class="refsect1">Example</h4>


<p>The following example shows the bare-bones code needed to implement a
simple chat client. The client may be seen in action running at:</p>


<blockquote class="simplelist">

<p><a href="../../../../../../www.moock.org/chat">http://www.moock.org/chat</a></p>

</blockquote>


<p>Both the server and the client are available at the online <a name="INDEX-3739" /> <a name="INDEX-3740" />Code Depot:</p>


<blockquote><pre class="code">// A Simple Chat Client
// *** General init
var incomingUpdated = false;  // Track whether or not we need to scroll
                              // to the end of incoming (the main 
                              // chat text field)
var incoming = "";  // Assign the main chat text field a starting value

// Attach the scroll manager movie. It forces the chat text field to
// show the next (most recent) line each time a message is added.
// Note that we only need the scroll manager because of a
// text field scroll bug in Build r30 of the Flash 5 Player.
attachMovie("processScroll", "processScroll", 0);

// Attach sound to play when we receive a message
var click = new Sound( );
click.attachSound("click");

// Attach sound to play when user joins or leaves
var welcomeSound = new Sound( );
welcomeSound.attachSound("welcome");

// Turn off ugly yellow highlight on buttons
_focusrect = 0;

// *** Creates a new socket and attempts to connect to the server
function connect ( ) {
// Create a new XMLSocket object
  mySocket = new XMLSocket( );

// Assign callback functions to mySocket's handlers.
  mySocket.onConnect = handleConnect;
  mySocket.onClose = handleClose;
  mySocket.onXML = handleIncoming;

// Attempt to connect, and assign the return of mySocket.connect()
// to connectSuccess (connect() returns true if the initial stage
// of connection succeeds)
  var connectSuccess = mySocket.connect("www.myserver.com", 1025);
  if (connectSuccess) {
    trace("initial connection succeeded");
  } else {
    // connectSuccess was false, so we didn't establish a connection.
    gotoAndStop("connectionFailed");
    trace("initial connection failed");
  }
}

// *** Event handler to respond to the completion of a connection attempt
function handleConnect (succeeded) {
  // If handleConnect()'s succeeded argument is true, the connection has been
  // established and we can proceed with the chat.
  // Otherwise, show a failure message.
  if (succeeded) {
    // Set a property noting that we have an open connection available.
    mySocket.connected = true;
    gotoAndStop("chat");
    // Put the cursor in the "send message" text field
    Selection.setFocus("_level0.outgoing");
  } else {
    // Connection didn't succeed so show an error message
    gotoAndStop("connectionFailed");
    trace("connection failed");
  }
}

// *** Event handler called when server kills the connection
function handleClose ( ) {
  // Tell the user that the connection was lost
  incoming += ("The server has terminated the connection.\n");
  // We updated the chat text field, so let the scroll manager know
  incomingUpdated = true;
  // Set a property noting that the connection was lost
  mySocket.connected = false;
  numClients = 0;
}

// *** Event handler to receive and display incoming messages
function handleIncoming (messageObj) {
  // Display the received XML data in the Output window
  trace("--------new data received-----------");
  trace("&gt;&gt;" + messageObj.toString( ) + "&lt;&lt;");
  trace("-------- end of new data -----------");

  // We're updating the chat text field, so let the scroll manager know
  incomingUpdated = true;
  lastScrollPos = incoming.scroll;

  // Check the time
  var now = new Date( );
  var hours = now.getHours( );
  var minutes = now.getMinutes( );
  var seconds = now.getSeconds( );
  // Format time for output
  hours = (hours &lt; 10 ? "0" : "") + hours;
  minutes = (minutes &lt; 10 ? "0" : "") + minutes;
  seconds = (seconds &lt; 10 ? "0" : "") + seconds;

  // The server sends NUMCLIENTS any time a client connects or disconnects
  // If we find NUMCLIENTS in the XML object...
  if (messageObj.firstChild.nodeName == "NUMCLIENTS") {
  // ...then check if the incoming messages window is empty. If it is...
    if (incoming == "") {
      // ...then the user has just joined, so add a welcome message to the chat.
      incoming += ("welcome to moock comm 1.0.0, "  
          + userID + "\n"
          + "  connection time: " + hours + ":" + minutes + ":" + seconds + "\n"
          + "  server: clayton\'s javaComm generic flash xmlsocket server\n\n");
    } else {
      // Otherwise, someone has arrived or departed, so tell the user
      if (parseInt(messageObj.firstChild.firstChild.nodeValue) &gt; numClients) {
        // Report the client arrival in the chat window
        incoming += (hours + ":" + minutes + ":" 
                 + seconds + " a new user has connected.\n");
      } else {
        // Report the client departure in the chat window
        incoming += (hours + ":" + minutes + ":" 
                 + seconds + " a user disconnected.\n");
      }
    }
    // Finally, keep track of the new number of clients 
    // and play a welcome/departure sound
    numClients = parseInt(messageObj.firstChild.firstChild.nodeValue;)
    welcomeSound.setVolume(100);
    welcomeSound.start( );
  } else {
    // No NUMCLIENTS node was found, so this is just a regular message.
    // Grab the user name and message from our XML object.
    var user = messageObj.firstChild.firstChild.nodeValue;
    var message = messageObj.childNodes[1].firstChild.nodeValue;

    // Add the message to the chat window, with a time stamp
    incoming += (hours + ":" + minutes 
             + ":" + seconds + user + "&gt;&gt; " + message + "\n");

    // Now do the new message click. 
    // If it's been more than 30 secs since the last message,
    // sound a loud click. Otherwise sound a quiet click.
    trace("time since last message: " + (now - lastIncomingMessageTime));
    if (lastIncomingMessageTime &amp;&amp; (now - lastIncomingMessageTime) &gt; 30000) {
      click.setVolume(200);
    } else {
      click.setVolume(30);
    }
    click.start( );
  }

  // Truncate the contents of the main chat text 
  // field if it's longer than 5000 characters
  if (incoming.length &gt; 5000) {
    var nearestNewline = incoming.indexOf("\n", incoming.length - 5000);
    incoming = incoming.substring(nearestNewline, incoming.length);
  }

  // Remember when this message arrived for next time
  lastIncomingMessageTime = now;
}

// *** Sends a new XML object to the server
function sendMessage( ) {
  // Create the message to send as an XML source fragment.
  // Note that the spaces before the &lt;USER&gt; and &lt;/MESSSAGE&gt; tags
  // are required so MESSAGE and USER always have a text child node.
  var message = '&lt;USER&gt; ' + userID + '&lt;/USER&gt;&lt;MESSAGE&gt;' 
              + outgoing + ' &lt;/MESSAGE&gt;'; 

  // Convert the message into an XML object hierarchy
  messageObj = new XML( );
  messageObj.parseXML(message);

  // Check what we're sending
  trace("Sending: " + messageObj);

  // If a socket object has been created and is connected, send the XML message.
  // Otherwise warn the user that he needs to connect first.
  if (mySocket &amp;&amp; mySocket.connected) {
    mySocket.send(messageObj);
    // Clear the "send message" text field
    outgoing = "";
  } else {
    // The server must have kicked us off...
    incoming += "You are no longer connected. Please reconnect.\n"
    incomingUpdated = true;
  }
}

// *** Closes the connection to the server
function quit( ) {
  if (mySocket.connected) {
    mySocket.close( );
    mySocket.connected = false;
    numClients = 0;
    incoming = "";
    gotoAndStop("login");
  }
}</pre></blockquote>



<h4 class="refsect1">See Also</h4>
<a name="INDEX-3741" />

<p><a name="INDEX-3742" />
<a name="INDEX-3743" />
<a name="INDEX-3744" />
<a name="INDEX-3745" /><em class="emphasis">oadVariables(
)</em>, <a name="INDEX-3746" /> <a name="INDEX-3747" />The XML Class</p>


</div>

<a name="INDEX-3748" /><a name="INDEX-3749" /><a name="INDEX-3750" /><a name="INDEX-3751" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b><i>
XMLSocket.close( ) 
Method</i></b></font></td><td align="right"><i>terminate an open connection to a server application
</i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><table width="515" border="0" cellpadding="5"><tr><td align="left" /><td align="right" /></tr></table>
<h4 class="refsect1">Availability</h4>


<p>Flash 5</p>



<h4 class="refsect1">Synopsis</h4>

<blockquote><pre class="code">
<em>socket</em>.close()</pre></blockquote>



<h4 class="refsect1">Description</h4>


<p>The <em class="filename">close( )</em> method severs the communication
link between <em class="replaceable">socket</em> and a server
application. Once <em class="filename">close( )</em> has been executed on
<em class="replaceable">socket</em>, subsequent attempts to invoke
<em class="filename">send( )</em> on <em class="replaceable">socket</em>
fail. Likewise, the server application will no longer be able to send
data to Flash through <em class="replaceable">socket</em>.</p>


<p>Note that <em class="filename">close( )</em> has no effect if the
<em class="replaceable">socket</em> is already closed or was never
connected. Furthermore, <em class="filename">close( )</em> does not
trigger the <em class="filename">onClose( )</em> handler of the socket
object -- <em class="filename">onClose( )</em> is triggered only by a
server-side connection closure.</p>



<h4 class="refsect1">See Also</h4>


<p><em class="filename">XMLSocket.connect( )</em>,
<em class="filename">XMLSocket.onClose( ) </em></p>


</div>

<a name="INDEX-3752" /><a name="INDEX-3753" /><a name="INDEX-3754" /><a name="INDEX-3755" /><a name="INDEX-3756" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b><i>
XMLSocket.connect( ) 
Method</i></b></font></td><td align="right"><i>open a connection to a server application
</i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><table width="515" border="0" cellpadding="5"><tr><td align="left" /><td align="right" /></tr></table>
<h4 class="refsect1">Availability</h4>


<p>Flash 5</p>



<h4 class="refsect1">Synopsis</h4>

<blockquote><pre class="code">
<em>socket</em>.connect(<em>host, port</em>)</pre></blockquote>



<h4 class="refsect2">Arguments</h4>


<dl>
<dt><em>host</em></dt>
<dd><p>A string specifying a hostname such as
<tt class="literal">"www.myserver.com"</tt> or a standard IP address (four,
dot-separated, 8-bit, decimal integers such as 111.222.3.123). If
<tt class="literal">null</tt> or an empty string is specified, it defaults
to the server address from which the movie was served.</p></dd>

</dl>


<dl>
<dt><em>port</em></dt>
<dd><p>An integer specifying a TCP port number greater than or equal to 1024.</p></dd>

</dl>




<h4 class="refsect2">Returns</h4>


<p>A Boolean indicating the initial success (<tt class="literal">true</tt>) or
failure (<tt class="literal">false</tt>) of the connection attempt.</p>




<h4 class="refsect1">Description</h4>


<p>The <em class="filename">connect( )</em> method attempts to establish a
connection from Flash to a server application running on
<em class="replaceable">host</em> at <em class="replaceable">port</em>.</p>


<p>If <em class="filename">connect( )</em> returns <tt class="literal">true</tt>,
the initial phase of the connection completed successfully and the
<em class="replaceable">socket</em>'s <em class="filename">onConnect(
)</em> handler will be invoked at a later time. From the
<em class="filename">onConnect( )</em> handler, we can evaluate whether
the connection was fully established. Note that connection attempts
can take varying amounts of time, particularly when a connection
attempt fails. You should indicate to the user that a connection
attempt is in progress when invoking <em class="filename">connect( )</em>.</p>


<p>If <em class="filename">connect( )</em> returns <tt class="literal">false</tt>,
the initial connection phase did not complete successfully. In such a
case, <em class="replaceable">socket</em>'s <em class="filename">onConnect(
)</em> handler will not be invoked.</p>


<p>It is important to check both the return value of the
<em class="filename">connect( )</em> method and, if <em class="filename">connect(
)</em> returns <tt class="literal">true</tt>, the value of the
<em class="replaceable">success</em> parameter of the
<em class="filename">onConnect( )</em> handler.</p>



<h4 class="refsect1">Usage</h4>


<p>For <a name="INDEX-3756" />security reasons, <em class="filename">connect(
)</em> is not permitted to connect to arbitrary Internet hosts.
It may connect only to hosts in the domain that the movie was
downloaded from. The rules for <em class="filename">connect( )</em> are
the same ones applied to the <em class="filename">loadVariables( )
</em>function. See <a href="ch20_05.htm">Table 20-8</a> under the
global <em class="filename">loadVariables( )</em> function for a list of
the domain matching requirements imposed by the <em class="filename">connect( )
</em>method. The <em class="filename">connect( )</em> method returns
<tt class="literal">false</tt> for connection attempts that violate
security restrictions. Note that security restrictions do not apply
to the standalone Player.</p>



<h4 class="refsect1">Example</h4>


<blockquote><pre class="code">// Create a new socket object
mySocket = new XMLSocket( );
// Assign a callback handler function to onConnect
mySocket.onConnect = handleConnect;
// Attempt to connect to an application running on myserver.com at port 10000
if (mySocket.connect("myserver.com", 10000) == false) {
  // Jump to a frame showing some sort of error message
  gotoAndStop("failureDialog");
} else {
  // Jump to a frame where we'll wait until onConnect is triggered
  gotoAndPlay("connecting");
}</pre></blockquote>



<h4 class="refsect1">See Also</h4>


<p><em class="filename">XMLSocket.close( )</em>,
<em class="filename">XMLSocket.onConnect( )</em></p>


</div>

<a name="INDEX-3757" /><a name="INDEX-3758" /><a name="INDEX-3759" /><a name="INDEX-3760" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b><i>

XMLSocket.onClose( ) Event Handler</i></b></font></td><td align="right"><i>specifies the callback handler invoked when the server closes the connection
</i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><table width="515" border="0" cellpadding="5"><tr><td align="left" /><td align="right" /></tr></table>
<h4 class="refsect1">Availability</h4>


<p>Flash 5</p>



<h4 class="refsect1">Synopsis</h4>

<blockquote><pre class="code">
<em>socket</em>.onClose = closeHandler</pre></blockquote>

<blockquote><pre class="code">
				<em>socket</em>.closeHandler()</pre></blockquote>



<h4 class="refsect1">Description</h4>


<p>The <em class="filename">onClose</em> property allows you to specify a
callback handler to be executed automatically whenever an open
connection to <em class="replaceable">socket</em> is closed by the
server. Server-instigated closures usually result from a server
application shutting down or deliberately "kicking off"
the client.</p>



<h4 class="refsect1">Example</h4>


<p>To respond to an <em class="filename">onClose</em> event, we must assign
our own function (i.e., our callback handler) to the
<em class="replaceable">onClose</em> property of an
<em class="filename">XMLSocket</em> object. In practice, we use this
callback handler to detect an external socket disconnection. The
following code assigns the function <em class="filename">handleClose(
)</em> to <em class="replaceable">mySocket</em>'s
<em class="replaceable">onClose</em> property. The
<em class="filename">handleClose( )</em> function simply alerts the user
that a closure has occurred by updating the value of the text field
<tt class="literal">status</tt>:</p>


<blockquote><pre class="code">mySocket = new XMLSocket( );
mySocket.onClose = handleClose;

function handleClose ( ) {
  status += ("\nThe server has terminated the connection.\n");
}</pre></blockquote>



<h4 class="refsect1">See Also</h4>


<p><em class="filename">XMLSocket.close( )</em>;<em class="filename"> </em><a href="ch10_06.htm">Section 10.6.2, "Attaching Event Handlers to Other Objects"</a> in <a href="ch10_01.htm">Chapter 10, "Events and Event Handlers"</a></p>


</div>

<a name="INDEX-3761" /><a name="INDEX-3762" /><a name="INDEX-3763" /><a name="INDEX-3764" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b><i>

XMLSocket.onConnect( ) Event Handler</i></b></font></td><td align="right"><i>defines the event handler invoked when a connection attempt is completed, successfully or otherwise
</i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><table width="515" border="0" cellpadding="5"><tr><td align="left" /><td align="right" /></tr></table>
<h4 class="refsect1">Availability</h4>


<p>Flash 5</p>



<h4 class="refsect1">Synopsis</h4>

<blockquote><pre class="code">
<em>socket</em>.onConnect = connectHandler
<em>socket</em>.connectHandler(<em>success  </em>)</pre></blockquote>



<h4 class="refsect2">Arguments</h4>


<dl>
<dt><em>success</em></dt>
<dd><p>A Boolean indicating whether the connection attempt succeeded
(<tt class="literal">true</tt>) or failed (<tt class="literal">false</tt>).</p></dd>

</dl>




<h4 class="refsect1">Description</h4>


<p>The <em class="replaceable">onConnect</em> property allows you to
specify a callback handler to be executed automatically when a
previously invoked <em class="filename">connect( )</em> operation
finishes. The execution of the callback handler specified by
<em class="replaceable">onConnect</em> does not necessarily mean a
connection has been successfully established -- the callback
handler is executed whenever the connection
<em class="emphasis">attempt</em> is finished, whether or not the attempt
was successful. The callback handler specified by
<em class="replaceable">onConnect</em> is passed a
<em class="replaceable">success</em> argument that indicates if the
attempt succeeded (i.e., a connection has been established). If so,
<em class="replaceable">success</em> is set to <tt class="literal">true</tt>.
If the attempt failed (i.e., a connection timed out, was refused, or
otherwise could not be established), the
<em class="replaceable">success</em> argument is set to
<tt class="literal">false</tt>. Note that ActionScript does not distinguish
among network timeout, unknown host, refusal, or other common
connection errors. The callback handler, therefore, may not be
executed for up to a minute after the <em class="filename">connect( )</em>
command is issued depending on the settings of the server involved in
a connection attempt, the connection speed, network traffic, and so
on.</p>



<h4 class="refsect1">Example</h4>


<p>We use the callback handler specified by
<em class="replaceable">onConnect</em> to detect the success or failure
of a connection attempt. In practice, we might use the callback
handler to set a flag indicating that transmissions should begin if
the connection was successful. We may also use the<em class="filename">
</em>callback handler to execute fallback code when the
connection fails, such as alerting the user to the problem's
nature.</p>


<p>To respond to an <em class="filename">onConnect</em> event, we must assign
our own function (i.e., our callback handler) to the
<em class="replaceable">onConnect</em> property of an
<em class="filename">XMLSocket</em> object. The following code assigns the
function <em class="filename">handleConnect( )</em> to
<em class="replaceable">mySocket</em>'s
<em class="replaceable">onConnect</em> property. By updating the value
of the text field <tt class="literal">status</tt>, <em class="filename">handleConnect(
)</em> alerts the user that a connection has either succeeded
or failed:</p>


<blockquote><pre class="code">mySocket = new XMLSocket( );
mySocket.onConnect = handleConnect;

function handleConnect (succeeded) {
  if (succeeded) {
    status += ("Successfully connected.\n");
  } else {
    status += ("Connection attempt failed.\n");
  }
}</pre></blockquote>


<p>For code showing the <em class="filename">onConnect( )</em> handler used
in a more complete system, see the example under the
<em class="filename">XMLSocket </em>class.</p>



<h4 class="refsect1">See Also</h4>


<p><em class="filename">XMLSocket.connect( )</em>; <a href="ch10_06.htm">Section 10.6.2, "Attaching Event Handlers to Other Objects"</a> in <a href="ch10_01.htm">Chapter 10, "Events and Event Handlers"</a></p>


</div>

<a name="INDEX-3765" /><a name="INDEX-3766" /><a name="INDEX-3767" /><a name="INDEX-3768" /><a name="INDEX-3769" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b><i>

XMLSocket.onData( ) Event Handler</i></b></font></td><td align="right"><i>executed when external data is received,but has not yet been parsed as XML
</i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><table width="515" border="0" cellpadding="5"><tr><td align="left" /><td align="right" /></tr></table>
<h4 class="refsect1">Availability</h4>


<p>Flash 5 (undocumented)</p>



<h4 class="refsect1">Synopsis</h4>

<blockquote><pre class="code">
<em>socket</em>.onData(<em>src</em>)</pre></blockquote>



<h4 class="refsect2">Arguments</h4>


<dl>
<dt><em>src</em></dt>
<dd><p>A string containing loaded data, which is usually XML source code.</p></dd>

</dl>




<h4 class="refsect1">Description</h4>


<p>The <em class="filename">onData( )</em> handler executes automatically
whenever a <a name="INDEX-3768" /> <a name="INDEX-3769" />zero byte (ASCII null character) is
transmitted to Flash over <em class="replaceable">socket</em>. By
default, <em class="filename">onData( )</em> simply constructs a new XML
object hierarchy from <em class="replaceable">src</em>, and passes that
hierarchy to <em class="filename">socket.onXML( )</em>. However, the
<em class="filename">onData( )</em> handler may be assigned a custom
callback function to intercept <em class="replaceable">src</em> before
ActionScript has a chance to parse it as XML. Under certain
circumstances (such as real-time video games), manipulating the raw
data in <em class="replaceable">src</em> manually may offer improved
performance over ActionScript's built-in XML parsing.</p>



<h4 class="refsect1">Example</h4>


<p>The following code shows how to assign a custom callback function to
<em class="filename">onData( )</em>. The callback function simply displays
any data received by <em class="replaceable">mySocket</em> and prevents
ActionScript from parsing the data as XML:</p>


<blockquote><pre class="code">mySocket = new XMLSocket();

mySocket.onData = function (src) {
  trace("Received data: \n" + src);
};</pre></blockquote>



<h4 class="refsect1">See Also</h4>


<p><em class="filename">XMLSocket.onXML( )</em></p>


</div>

<a name="INDEX-3770" /><a name="INDEX-3771" /><a name="INDEX-3772" /><a name="INDEX-3773" /><a name="INDEX-3774" /><a name="INDEX-3775" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b><i>

XMLSocket.onXML( ) Event Handler</i></b></font></td><td align="right"><i>defines the callback handler invoked when data is received by an XMLSocket object and has been parsed as XML
</i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><table width="515" border="0" cellpadding="5"><tr><td align="left" /><td align="right" /></tr></table>
<h4 class="refsect1">Availability</h4>


<p>Flash 5</p>



<h4 class="refsect1">Synopsis</h4>

<blockquote><pre class="code">
<em>socket</em>.onXML = xmlHandler
<em>socket</em>.xmlHandler(<em>XMLobject  </em>)</pre></blockquote>

<blockquote><pre class="code" /></blockquote>



<h4 class="refsect2">Arguments</h4>


<dl>
<dt><em>XMLobject</em></dt>
<dd><p>The XML object that will house the incoming XML-formatted data.</p></dd>

</dl>




<h4 class="refsect1">Description</h4>


<p>The <tt class="literal">onXML</tt> property allows you to specify a
callback handler to be executed when Flash receives an incoming
transmission. Whenever <em class="replaceable">socket</em> receives a
complete block of data (i.e., a string followed by an ASCII
<tt class="literal">null</tt> character) from the server, the callback
handler specified by
<em class="replaceable">socket</em><em class="filename">.</em><tt class="literal">onXML</tt>
is automatically invoked.
<a name="INDEX-3774" /> <a name="INDEX-3775" />A server may send data as often as it
pleases, but the callback handler is executed only when the trailing
<tt class="literal">null</tt> character (i.e., a zero byte) is received by
<em class="replaceable">socket</em>. In Java, a zero byte is specified
as <tt class="literal">'\0'</tt>. When the zero byte is received, it causes
ActionScript to parse any data that has been received by
<em class="replaceable">socket</em> since the last zero byte was sent
(or since the initial connection if this is the first zero byte). The
parsed data is converted to an XML object hierarchy which is passed
as the <em class="replaceable">XMLobject</em> argument to the callback
handler.</p>


<p>If you are a Flash programmer who is responsible for the client side
of a client/server application only, simply note that the callback
handler specified by <tt class="literal">onXML</tt> receives any new XML
data when it arrives. The new XML data is accessible through
<em class="replaceable">XMLobject</em>.</p>


<p>To access the raw data sent over a socket, override the default
behavior of the socket's <em class="filename">onData( )</em>
handler. See <em class="filename">XMLSocket.onData( ).</em></p>



<h4 class="refsect1">Example</h4>


<p>To respond to an <tt class="literal">onXML</tt> event, we must assign our
own function (i.e., our callback handler) to the
<em class="filename">onXML</em> property of an
<em class="filename">XMLSocket</em> object. The following code assigns the
function <em class="filename">handleIncoming( )</em> to
<em class="replaceable">mySocket</em>'s <tt class="literal">onXML</tt>
property. The <em class="filename">handleIncoming( )</em> function
accesses one of the nodes of the XML object hierarchy stored in
<tt class="literal">messageObj</tt> and adds its value to the text field
<tt class="literal">messages</tt>:</p>


<blockquote><pre class="code">mySocket = new XMLSocket( );
mySocket.onXML = handleIncoming;

function handleIncoming (messageObj) {
  trace("Got some new data!");
  // messageObj will contain the fragment: &lt;MESSAGE&gt;text&lt;/MESSAGE&gt;
  var message = messageObj.firstChild.firstChild;
  messages += (message.nodeValue + "\n");
}</pre></blockquote>


<p>For code showing the <em class="filename">onXML</em> handler used in a
more complete system, see the example under the <em class="filename">XMLSocket
</em>class.</p>



<h4 class="refsect1">See Also</h4>


<p><em class="filename">XMLSocket.send</em>, <em class="filename">XMLSocket.onData(
)</em>; <a href="ch10_06.htm">Section 10.6.2, "Attaching Event Handlers to Other Objects"</a> in <a href="ch10_01.htm">Chapter 10, "Events and Event Handlers"</a></p>


</div>

<a name="INDEX-3776" /><a name="INDEX-3777" /><a name="INDEX-3778" /><a name="INDEX-3779" /><a name="INDEX-3780" /><a name="INDEX-3781" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b><i>
XMLSocket.send( ) 
Method</i></b></font></td><td align="right"><i>transmit XML-formatted data to a server application
</i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><table width="515" border="0" cellpadding="5"><tr><td align="left" /><td align="right" /></tr></table>
<h4 class="refsect1">Availability</h4>


<p>Flash 5</p>



<h4 class="refsect1">Synopsis</h4>

<blockquote><pre class="code">
<em>socket</em>.send(<em>XMLobject</em>)</pre></blockquote>



<h4 class="refsect2">Arguments</h4>


<dl>
<dt><em>XMLobject</em></dt>
<dd><p>An <em class="filename">XML</em> object to be converted into a string and
sent to the server application or any string containing XML-formatted
text.</p></dd>

</dl>




<h4 class="refsect1">Description</h4>


<p>The <em class="filename">send( )</em> method transmits a message from
Flash to a server application via <em class="replaceable">socket</em>.
The message to send should be an object of the
<em class="filename">XML</em> class but may also be a string. When
<em class="filename">send( )</em> is invoked,
<em class="replaceable">XMLobject</em> is converted to a string and
sent to the remote application, followed by a zero byte (the first
ASCII character, null). The remote application is not obliged to
respond; however, any response sent will trigger
<em class="replaceable">socket</em>'s <em class="filename">onXML(
)</em> event handler.</p>



<h4 class="refsect1">Example</h4>


<p>The following code sends a very simple XML-formatted message to a
remote application over the socket
<em class="replaceable">mySocket</em>, which is a valid
<em class="filename">XMLSocket</em> object for which a connection has
already been established (note that
<em class="replaceable">message</em> is an <em class="filename">XML</em>
object, not an <em class="filename">XMLSocket</em> object; see the example
under the <em class="filename">XMLSocket</em> class entry for a
full-fledged <em class="filename">XMLSocket</em> sample application):</p>


<blockquote><pre class="code">var message = new XML('&lt;MESSAGE&gt;testing...testing...&lt;/MESSAGE&gt;');
mySocket.send(message);</pre></blockquote>


<p>It is also legal to send a string containing XML-formatted text
without wrapping it in an <em class="filename">XML</em> object. For simple
XML messages, this is often sufficient:</p>


<blockquote><pre class="code">mySocket.send('&lt;MESSAGE&gt;testing...testing...&lt;/MESSAGE&gt;');</pre></blockquote>



<h4 class="refsect1">See Also</h4>


<p><a name="INDEX-3780" /> <a name="INDEX-3781" /><em class="filename">XMLSocket.onXML</em>;
the <em class="filename">XMLSocket</em> Class, <em class="filename">XML.send(
)</em></p>


</div>


<hr width="684" align="left" />
<div class="navbar"><table width="684" border="0"><tr><td align="left" valign="top" width="228"><a href="ch20_04.htm"><img alt="Previous" border="0" src="../gifs/txtpreva.gif" /></a></td><td align="center" valign="top" width="228"><a href="index.htm"><img alt="Home" border="0" src="../gifs/txthome.gif" /></a></td><td align="right" valign="top" width="228"><a href="part4.htm"><img alt="Next" border="0" src="../gifs/txtnexta.gif" /></a></td></tr><tr><td align="left" valign="top" width="228">20.4. Entry Headings</td><td align="center" valign="top" width="228"><a href="index/index.htm"><img alt="Book Index" border="0" src="../gifs/index.gif" /></a></td><td align="right" valign="top" width="228">IV. Appendixes</td></tr></table></div>
<hr width="684" align="left" />

<img alt="Library Navigation Links" border="0" src="../gifs/navbar.gif" usemap="#library-map" />
<p><font size="-1"><a href="copyrght.htm">Copyright &copy; 2002</a> O'Reilly &amp; Associates. All rights reserved.</font></p>

<map name="library-map"><area href="../index.htm" coords="0,1,78,93" shape="rect" /><area href="../wdesign/index.htm" coords="80,2,155,96" shape="rect" /><area href="../xhtml/index.htm" coords="158,0,263,97" shape="rect" /><area href="../audio/index.htm" coords="265,1,335,97" shape="rect" /><area href="../css/index.htm" coords="338,1,434,93" shape="rect" /><area href="index.htm" coords="439,0,540,102" shape="rect" /><area href="../infoarch/index.htm" coords="544,0,685,102" shape="rect" /></map>

</body></html>
