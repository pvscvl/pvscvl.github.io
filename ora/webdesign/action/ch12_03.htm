<html><head><title>Object Properties (ActionScript: The Definitive Guide)</title><link rel="stylesheet" type="text/css" href="../style/style1.css" />

<meta name="DC.Creator" content="Colin Moock" /><meta name="DC.Format" content="text/xml" scheme="MIME" /><meta name="DC.Language" content="en-US" /><meta name="DC.Publisher" content="O'Reilly &amp; Associates, Inc." /><meta name="DC.Source" scheme="ISBN" content="1565928520L" /><meta name="DC.Subject.Keyword" content="stuff" /><meta name="DC.Title" content="ActionScript: The Definitive Guide" /><meta name="DC.Type" content="Text.Monograph" />

</head><body bgcolor="#ffffff">

<img alt="Book Home" border="0" src="gifs/smbanner.gif" usemap="#banner-map" /><map name="banner-map"><area shape="rect" coords="1,-2,616,66" href="index.htm" alt="ActionScript: The Definitive Guide" /><area shape="rect" coords="629,-11,726,25" href="jobjects/fsearch.htm" alt="Search this book" /></map>

<div class="navbar"><table width="684" border="0"><tr><td align="left" valign="top" width="228"><a href="ch12_02.htm"><img alt="Previous" border="0" src="../gifs/txtpreva.gif" /></a></td><td align="center" valign="top" width="228"><a href="index.htm">ActionScript: The Definitive Guide</a></td><td align="right" valign="top" width="228"><a href="ch12_04.htm"><img alt="Next" border="0" src="../gifs/txtnexta.gif" /></a></td></tr></table></div>
<hr width="684" align="left" />


<h2 class="sect1">12.3. Object Properties</h2>


<p>Properties are named data containers associated with an object. They
are defined by an object's class and then set individually for
each object instance. Like variables, object properties can contain
any kind of data -- strings, numbers, Booleans,
<tt class="literal">null</tt>, <tt class="literal">undefined</tt>, functions,
arrays, movie clips, or even other objects.</p>


<a name="ch12-7-fm2xml" /><div class="sect2">
<h3 class="sect2">12.3.1. Referring to Properties</h3>


<p>The <a name="INDEX-1477" /> <a name="INDEX-1478" /> <a name="INDEX-1479" />familiar dot operator gives us
access to an object's properties. We separate the name of the
property from the object it belongs to using a dot (a period), as
follows:</p>


<blockquote><pre class="code"><em class="replaceable">objectName</em>.<em class="replaceable">propertyName</em></pre></blockquote>


<p>where <em class="replaceable">objectName</em> is the name of our object
and <em class="replaceable">propertyName</em> must be a legal
identifier that matches the name of some property of
<em class="replaceable">objectName</em>.</p>


<p>For example, if we have a <tt class="literal">ball</tt> object instance
with a <tt class="literal">radius</tt> property, we can access
<tt class="literal">radius</tt> using:</p>


<blockquote><pre class="code">ball.radius</pre></blockquote>


<p>Alternatively, we may refer to a property using the
<a name="INDEX-1480" />
<a name="INDEX-1481" /><tt class="literal">[]</tt> operator, as
follows:</p>


<blockquote><pre class="code"><em class="replaceable">objectName</em>[<em class="replaceable">propertyName</em>]</pre></blockquote>


<p>The <tt class="literal">[]</tt> operator allows us to compose a property
name using any expression that resolves to a string. For example:</p>


<blockquote><pre class="code">trace(ball["radius"]);

var prop = "radius";
trace(ball[prop]);  // <em class="replaceable">prop</em> resolves to "radius"</pre></blockquote>


<p>Built-in ActionScript properties are accessed in exactly the same
way. Recall the syntax for retrieving the value of pi:</p>


<blockquote><pre class="code">Math.PI</pre></blockquote>


<p>In that expression, we're accessing the built-in
<tt class="literal">PI</tt> property of the <tt class="literal">Math</tt> object.
However, in pure OOP, we'll nearly never access an
object's properties directly; instead, we'll use methods
to access property values. For example, to check the
<tt class="literal">volume</tt> property of an instance of the built-in
<em class="filename">Sound</em> class, we use:</p>


<blockquote><pre class="code">trace(mySound.getVolume( ));</pre></blockquote>


<p>not:</p>


<blockquote><pre class="code">trace(mySound.volume);</pre></blockquote>
</div>




<a name="ch12-8-fm2xml" /><div class="sect2">
<h3 class="sect2">12.3.2. Using a for-in Loop to Access an Object's Properties</h3>


<p>In <a href="ch08_01.htm">Chapter 8, "Loop Statements"</a>, <a name="INDEX-1482" /> <a name="INDEX-1483" />we learned that a
<em class="filename">for-in</em> loop can be used to enumerate the
properties of an object. Now that we know a little more about
objects, it's worth returning to the
<em class="filename">for-in</em> statement briefly to review how it can be
used to manipulate an object's properties.</p>


<p>Like all loops, the <em class="filename">for-in</em> statement includes a
header and a body. The body of a <em class="filename">for-in</em>
statement is automatically executed once for each property in the
specified object. We don't need to know the number of
properties or their names, because as each cycle of the loop
executes, our "iterator" variable automatically becomes
the name of the next property. We can therefore access the properties
of the object, like this:</p>


<blockquote><pre class="code">// List all the properties of the <em class="replaceable">ball</em> object
for (var prop in ball) {
  trace("Property " + prop + " has the value " + ball[prop]);
}</pre></blockquote>


<p>Note that the iterator variable, <tt class="literal">prop</tt>, in the
preceding example is not an integer as it would be in a
<em class="emphasis">for</em> loop. That is, don't confuse a
standard <em class="filename">for</em> loop, typically used for accessing
numbered array elements, with a <em class="filename">for-in</em> loop used
to access an object's properties. For more information on
<em class="filename">for-in</em> loops, see <a href="ch08_01.htm">Chapter 8, "Loop Statements"</a>.</p>
</div>


<hr width="684" align="left" />
<div class="navbar"><table width="684" border="0"><tr><td align="left" valign="top" width="228"><a href="ch12_02.htm"><img alt="Previous" border="0" src="../gifs/txtpreva.gif" /></a></td><td align="center" valign="top" width="228"><a href="index.htm"><img alt="Home" border="0" src="../gifs/txthome.gif" /></a></td><td align="right" valign="top" width="228"><a href="ch12_04.htm"><img alt="Next" border="0" src="../gifs/txtnexta.gif" /></a></td></tr><tr><td align="left" valign="top" width="228">12.2. Instantiating Objects</td><td align="center" valign="top" width="228"><a href="index/index.htm"><img alt="Book Index" border="0" src="../gifs/index.gif" /></a></td><td align="right" valign="top" width="228">12.4. Methods</td></tr></table></div>
<hr width="684" align="left" />

<img alt="Library Navigation Links" border="0" src="../gifs/navbar.gif" usemap="#library-map" />
<p><font size="-1"><a href="copyrght.htm">Copyright &copy; 2002</a> O'Reilly &amp; Associates. All rights reserved.</font></p>

<map name="library-map"><area href="../index.htm" coords="0,1,78,93" shape="rect" /><area href="../wdesign/index.htm" coords="80,2,155,96" shape="rect" /><area href="../xhtml/index.htm" coords="158,0,263,97" shape="rect" /><area href="../audio/index.htm" coords="265,1,335,97" shape="rect" /><area href="../css/index.htm" coords="338,1,434,93" shape="rect" /><area href="index.htm" coords="439,0,540,102" shape="rect" /><area href="../infoarch/index.htm" coords="544,0,685,102" shape="rect" /></map>

</body></html>