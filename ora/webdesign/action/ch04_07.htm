<html><head><title>The Boolean Type (ActionScript: The Definitive Guide)</title><link rel="stylesheet" type="text/css" href="../style/style1.css" />

<meta name="DC.Creator" content="Colin Moock" /><meta name="DC.Format" content="text/xml" scheme="MIME" /><meta name="DC.Language" content="en-US" /><meta name="DC.Publisher" content="O'Reilly &amp; Associates, Inc." /><meta name="DC.Source" scheme="ISBN" content="1565928520L" /><meta name="DC.Subject.Keyword" content="stuff" /><meta name="DC.Title" content="ActionScript: The Definitive Guide" /><meta name="DC.Type" content="Text.Monograph" />

</head><body bgcolor="#ffffff">

<img alt="Book Home" border="0" src="gifs/smbanner.gif" usemap="#banner-map" /><map name="banner-map"><area shape="rect" coords="1,-2,616,66" href="index.htm" alt="ActionScript: The Definitive Guide" /><area shape="rect" coords="629,-11,726,25" href="jobjects/fsearch.htm" alt="Search this book" /></map>

<div class="navbar"><table width="684" border="0"><tr><td align="left" valign="top" width="228"><a href="ch04_06.htm"><img alt="Previous" border="0" src="../gifs/txtpreva.gif" /></a></td><td align="center" valign="top" width="228"><a href="index.htm">ActionScript: The Definitive Guide</a></td><td align="right" valign="top" width="228"><a href="ch04_08.htm"><img alt="Next" border="0" src="../gifs/txtnexta.gif" /></a></td></tr></table></div>
<hr width="684" align="left" />


<h2 class="sect1">4.7. The Boolean Type</h2>


<p>Boolean <a name="INDEX-626" />data is used to represent the logical
states of truth and falsehood. There are, hence, only two legal
values of the <em class="filename">boolean</em> datatype:
<tt class="literal">true</tt> and <tt class="literal">false</tt>. Notice that
there are no quotation marks around the words <tt class="literal">true</tt>
and <tt class="literal">false</tt> because Boolean data is
<em class="emphasis">not</em> string data. The keywords
<tt class="literal">true</tt> and <tt class="literal">false</tt> are the reserved
primitive data values and may not be used as variable names or
identifiers.</p>


<p>We use Boolean values to add logic to the execution of code. For
example, we might assign the value <tt class="literal">true</tt> to a
variable that tracks the status of a spaceship's firepower:</p>


<blockquote><pre class="code">shipHasDoubleShots = true;</pre></blockquote>


<p>By comparing <tt class="literal">shipHasDoubleShots</tt> to the Boolean
literal <tt class="literal">true</tt>, we can then decide how much damage
to inflict when a shot hits its target:</p>


<blockquote><pre class="code">if (shipHasDoubleShots == true) {
  // Shoot them with twice the power.
  // This will be reached if the comparison is true.
} else {
  // Shoot them with a single dose.
  // This will be reached if the comparison is false.
}</pre></blockquote>


<p>When the double-shot power runs out, we can set the variable to
<tt class="literal">false</tt>:</p>


<blockquote><pre class="code">shipHasDoubleShots = false;</pre></blockquote>


<p>This will cause the larger expression <em class="emphasis">shipHasDoubleShots ==
true</em> to become <tt class="literal">false</tt>, causing the
single-damage-dose script to execute when a shot hits its target.</p>


<p>All <a name="INDEX-627" />comparison operators express
results with Boolean values. When we ask, "Is the user's
guess the same as the password?" the answer is given as a
Boolean:</p>


<blockquote><pre class="code">// <em class="replaceable">userGuess</em> == <em class="replaceable">password</em> will yield either true or false
if (userGuess == password) {
  gotoAndStop("secretContent");
}</pre></blockquote>


<p>And when we ask, "Is the movie clip rotated greater than 90
degrees?" the answer, again, is a Boolean:</p>


<blockquote><pre class="code">// myClip._rotation &gt; 90 will yield either true or false
if (myClip._rotation &gt; 90) {  
  // Fade out the clip if it's rotated past 90 degrees
  myClip._alpha = 50;
}</pre></blockquote>


<p>Many internal ActionScript properties and methods describe the Flash
movie environment in Boolean terms. For example, if we ask, "Is
the spacebar being pressed?" the interpreter answers with a
Boolean: <tt class="literal">true</tt> (yes) or <tt class="literal">false</tt>
(no):</p>


<blockquote><pre class="code">// Key.isDown( ) is a function that returns either true or false
if (Key.isDown(Key.SPACE)) {
  // Spacebar is being pressed, so make our spaceship fire
}</pre></blockquote>


<p>In <a href="ch05_01.htm">Chapter 5, "Operators"</a>, we'll learn how to phrase
complex logical expressions using Boolean operators.</p>


<a name="ch04-39-fm2xml" /><div class="sect2">
<h3 class="sect2">4.7.1. Using Boolean Values to Build a Preloader</h3>


<p>Let's <a name="INDEX-628" />consider an applied Boolean example.
Suppose we have a document with 500 frames and lots of content. The
beginning of our opening sequence, frame 20, is labeled
<tt class="literal">intro</tt>. We put the following code on frame 2 of
that movie's main timeline:</p>


<blockquote><pre class="code">if (_framesloaded &gt;= _totalframes) {
  gotoAndPlay("intro"); 
} else {
  gotoAndPlay(1);
}</pre></blockquote>


<p>When the movie plays, the playhead enters frame 2. The ActionScript
interpreter reaches the conditional statement and evaluates the
Boolean expression <em class="emphasis">_ framesloaded &gt;=
_totalframes</em>. While the movie is still loading,
<tt class="literal">_framesloaded</tt> is less than the total number of
frames in our movie ( <tt class="literal">_totalframes</tt>). If
<tt class="literal">_framesloaded</tt> is not greater than or equal to
<tt class="literal">_totalframes</tt>, then the expression <em class="emphasis">_
framesloaded &gt;=_totalframes</em>, yields
<tt class="literal">false</tt>. Therefore, the statement
<em class="emphasis">gotoAndPlay("intro")</em> is skipped and the
statement <em class="emphasis">gotoAndPlay(1)</em> is executed instead.
The <em class="emphasis">gotoAndPlay(1)</em> statement sends the playhead
back to frame 1 and plays the movie. When the playhead enters frame
2, our code is executed <em class="emphasis">again</em>. The playhead
keeps looping in this way until the expression <em class="emphasis">_
framesloaded &gt;= _totalframes</em> yields the value
<tt class="literal">true</tt> (i.e., until all the frames have loaded). At
that point, the statement <em class="emphasis">gotoAndPlay("intro")</em>,
which sends the playhead to the label <tt class="literal">intro</tt>, is
executed. There we can safely start our movie, now that all of the
frames have loaded.</p>


<p>Whammo! You've created a preloader based on a Boolean
expression. Solid stuff. We'll learn much more about
conditionals and controlling movies with Booleans in <a href="ch07_01.htm">Chapter 7, "Conditionals"</a>.</p>
</div>


<hr width="684" align="left" />
<div class="navbar"><table width="684" border="0"><tr><td align="left" valign="top" width="228"><a href="ch04_06.htm"><img alt="Previous" border="0" src="../gifs/txtpreva.gif" /></a></td><td align="center" valign="top" width="228"><a href="index.htm"><img alt="Home" border="0" src="../gifs/txthome.gif" /></a></td><td align="right" valign="top" width="228"><a href="ch04_08.htm"><img alt="Next" border="0" src="../gifs/txtnexta.gif" /></a></td></tr><tr><td align="left" valign="top" width="228">4.6. Working with Strings</td><td align="center" valign="top" width="228"><a href="index/index.htm"><img alt="Book Index" border="0" src="../gifs/index.gif" /></a></td><td align="right" valign="top" width="228">4.8. Undefined</td></tr></table></div>
<hr width="684" align="left" />

<img alt="Library Navigation Links" border="0" src="../gifs/navbar.gif" usemap="#library-map" />
<p><font size="-1"><a href="copyrght.htm">Copyright &copy; 2002</a> O'Reilly &amp; Associates. All rights reserved.</font></p>

<map name="library-map"><area href="../index.htm" coords="0,1,78,93" shape="rect" /><area href="../wdesign/index.htm" coords="80,2,155,96" shape="rect" /><area href="../xhtml/index.htm" coords="158,0,263,97" shape="rect" /><area href="../audio/index.htm" coords="265,1,335,97" shape="rect" /><area href="../css/index.htm" coords="338,1,434,93" shape="rect" /><area href="index.htm" coords="439,0,540,102" shape="rect" /><area href="../infoarch/index.htm" coords="544,0,685,102" shape="rect" /></map>

</body></html>