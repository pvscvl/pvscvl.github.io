<html><head><title>Movie Clips (ActionScript: The Definitive Guide)</title><link rel="stylesheet" type="text/css" href="../style/style1.css" />

<meta name="DC.Creator" content="Colin Moock" /><meta name="DC.Format" content="text/xml" scheme="MIME" /><meta name="DC.Language" content="en-US" /><meta name="DC.Publisher" content="O'Reilly &amp; Associates, Inc." /><meta name="DC.Source" scheme="ISBN" content="1565928520L" /><meta name="DC.Subject.Keyword" content="stuff" /><meta name="DC.Title" content="ActionScript: The Definitive Guide" /><meta name="DC.Type" content="Text.Monograph" />

</head><body bgcolor="#ffffff">

<img alt="Book Home" border="0" src="gifs/smbanner.gif" usemap="#banner-map" /><map name="banner-map"><area shape="rect" coords="1,-2,616,66" href="index.htm" alt="ActionScript: The Definitive Guide" /><area shape="rect" coords="629,-11,726,25" href="jobjects/fsearch.htm" alt="Search this book" /></map>

<div class="navbar"><table width="684" border="0"><tr><td align="left" valign="top" width="228"><a href="ch12_07.htm"><img alt="Previous" border="0" src="../gifs/txtpreva.gif" /></a></td><td align="center" valign="top" width="228"><a href="index.htm">ActionScript: The Definitive Guide</a></td><td align="right" valign="top" width="228"><a href="ch13_02.htm"><img alt="Next" border="0" src="../gifs/txtnexta.gif" /></a></td></tr></table></div>
<hr width="684" align="left" />



<h1 class="chapter">Chapter 13. Movie Clips</h1>
<div class="htmltoc"><h4 class="tochead">Contents:</h4><p>
<a href="ch13_01.htm">The "Objectness" of Movie Clips</a><br />
<a href="ch13_02.htm">Types of Movie Clips</a><br />
<a href="ch13_03.htm">Creating Movie Clips</a><br />
<a href="ch13_04.htm">Movie and Instance Stacking Order</a><br />
<a href="ch13_05.htm">Referring to Instances and Main Movies</a><br />
<a href="ch13_06.htm">Removing Clip Instances and Main Movies</a><br />
<a href="ch13_07.htm">Built-in Movie Clip Properties</a><br />
<a href="ch13_08.htm">Movie Clip Methods</a><br />
<a href="ch13_09.htm">Applied Movie Clip Examples</a><br />
<a href="ch13_10.htm">The Last Quiz</a><br />
<a href="ch13_11.htm">Onward!</a><br /></p></div>


<p>Every <a name="INDEX-1581" />Flash document contains a
<a name="INDEX-1582" />
<a name="INDEX-1583" />Stage -- on which we place
shapes, text, and other visual elements -- and a main timeline,
through which we define changes to the Stage's contents over
time. The Stage (i.e., the <em class="emphasis">main movie</em>) may
contain independent submovies, christened <em class="emphasis">movie clips
</em>(or<em class="emphasis"> clips </em>for short). Each movie clip
has its own independent timeline and <em class="emphasis">canvas</em> (the
Stage is the canvas of the main movie) and can even contain other
movie clips. A clip that contains another clip is referred to as that
clip's <em class="emphasis">host clip</em> or <em class="emphasis">parent
clip</em>.</p>


<p>A single Flash document can contain a hierarchy of interrelated movie
clips. For example, the main movie may contain a mountainous
landscape. A separate movie clip containing an animated character can
be moved across the landscape to give the illusion that the character
is walking. Another movie clip inside the character clip can be used
to independently animate the character's blinking eyes. When
the independent elements in the cartoon character are played back
together, they appear as a single piece of content. Furthermore, each
component can react intelligently to the others -- we can tell the
eyes to blink when the character stops moving or tell the legs to
walk when the character starts moving.</p>


<p>ActionScript offers detailed control over movie clips; we can play a
clip, stop it, move its playhead within its timeline,
programmatically set its properties (like its size, rotation,
transparency level, and position on the Stage) and manipulate it as a
true programming object. As a formal component of the ActionScript
language, movie clips may be thought of as the raw material used to
produce programmatically generated content in Flash. For example, a
movie clip may serve as a ball or a paddle in a pong game, as an
order form in a catalog web site, or simply as a container for
background sounds in an animation. At the end of this chapter
we'll use movie clips as the hands on a clock and the answers
in a multiple-choice quiz.</p>


<div class="sect1"><a name="ch13-58440" />
<h2 class="sect1">13.1. The "Objectness" of Movie Clips</h2>


<p>As of Flash 5, movie clips can be manipulated like the objects we
learned about in <a href="ch12_01.htm">Chapter 12, "Objects and Classes"</a>. We may retrieve and
set the properties of a clip, and we may invoke built-in or custom
methods on a clip. Unlike other objects, an operation performed on a
clip may have a visible or audible result in the Player.</p>


<p>Movie clips are not truly a type of object; there is no
<em class="filename">MovieClip</em> class or constructor, nor can we use
an object literal to instantiate a movie clip in our code. So what,
then, are movie clips if not objects? They are members of their very
own object-like datatype, called
<em class="filename">movieclip</em><a name="INDEX-1584" /> (we can prove it by executing
<em class="emphasis">typeof</em> on a movie clip, which returns the string
"movieclip"). The main difference between movie clips and
true objects is how they are allocated (created) and deallocated
(disposed of, or freed). For details, see <a href="ch15_01.htm">Chapter 15, "Advanced Topics"</a>. Despite this technicality, however, we nearly
always treat movie clips exactly like objects.</p>


<p>So how does the "objectness" of movie clips affect our
use of them in ActionScript? Most notably, it dictates the way we
control clips and examine their properties. Movie clips can be
controlled directly through built-in methods. For example:</p>


<blockquote><pre class="code">eyes.play( );</pre></blockquote>


<p>We <a name="INDEX-1585" /> <a name="INDEX-1586" /> <a name="INDEX-1587" />can retrieve and set a
movie clip's properties using the dot operator, just as we
would access the properties of any object:</p>


<blockquote><pre class="code">ball._xscale = 90;
var radius = ball._width / 2;</pre></blockquote>


<p>A <a name="INDEX-1588" />variable in a movie clip is
simply a property of that clip, and we can use the dot operator to
set and retrieve variable values:</p>


<blockquote><pre class="code">myClip.myVariable = 14;
x = myClip.myVariable;</pre></blockquote>


<p>Submovie <a name="INDEX-1589" />clips can be
treated as object properties of their parent movie clips. We
therefore use the dot operator to access "nested" clips:</p>


<blockquote><pre class="code">clipA.clipB.clipC.play( );</pre></blockquote>


<p>and we use the <a name="INDEX-1590" /> <a name="INDEX-1591" />reserved <tt class="literal">_ parent</tt>
property to refer to the clip containing the current clip:</p>


<blockquote><pre class="code">_ parent.clipC.play( );</pre></blockquote>


<p>Treating clips as objects affords us all the luxuries of convenient
syntax and flexible playback control. But our use of clips as objects
also lets us manage clips as data; we can store a movie clip in an
array element or a variable and even pass a clip reference to a
function as an argument! Here, for example, is a function that moves
a clip to a particular location on the screen:</p>


<blockquote><pre class="code">function moveClip (clip, x, y) {
  clip._x = x;
  clip._y = y;
}
moveClip(ball, 14, 399);</pre></blockquote>


<p>Throughout the rest of this chapter, we'll learn the specifics
of referencing, controlling, and manipulating movie clips as data
objects.</p>
</div>






































































































<hr width="684" align="left" />
<div class="navbar"><table width="684" border="0"><tr><td align="left" valign="top" width="228"><a href="ch12_07.htm"><img alt="Previous" border="0" src="../gifs/txtpreva.gif" /></a></td><td align="center" valign="top" width="228"><a href="index.htm"><img alt="Home" border="0" src="../gifs/txthome.gif" /></a></td><td align="right" valign="top" width="228"><a href="ch13_02.htm"><img alt="Next" border="0" src="../gifs/txtnexta.gif" /></a></td></tr><tr><td align="left" valign="top" width="228">12.7. Onward!</td><td align="center" valign="top" width="228"><a href="index/index.htm"><img alt="Book Index" border="0" src="../gifs/index.gif" /></a></td><td align="right" valign="top" width="228">13.2. Types of Movie Clips</td></tr></table></div>
<hr width="684" align="left" />

<img alt="Library Navigation Links" border="0" src="../gifs/navbar.gif" usemap="#library-map" />
<p><font size="-1"><a href="copyrght.htm">Copyright &copy; 2002</a> O'Reilly &amp; Associates. All rights reserved.</font></p>

<map name="library-map"><area href="../index.htm" coords="0,1,78,93" shape="rect" /><area href="../wdesign/index.htm" coords="80,2,155,96" shape="rect" /><area href="../xhtml/index.htm" coords="158,0,263,97" shape="rect" /><area href="../audio/index.htm" coords="265,1,335,97" shape="rect" /><area href="../css/index.htm" coords="338,1,434,93" shape="rect" /><area href="index.htm" coords="439,0,540,102" shape="rect" /><area href="../infoarch/index.htm" coords="544,0,685,102" shape="rect" /></map>

</body></html>