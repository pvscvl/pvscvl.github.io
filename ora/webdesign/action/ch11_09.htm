<html><head><title>General Array-Manipulation Tools (ActionScript: The Definitive Guide)</title><link rel="stylesheet" type="text/css" href="../style/style1.css" />

<meta name="DC.Creator" content="Colin Moock" /><meta name="DC.Format" content="text/xml" scheme="MIME" /><meta name="DC.Language" content="en-US" /><meta name="DC.Publisher" content="O'Reilly &amp; Associates, Inc." /><meta name="DC.Source" scheme="ISBN" content="1565928520L" /><meta name="DC.Subject.Keyword" content="stuff" /><meta name="DC.Title" content="ActionScript: The Definitive Guide" /><meta name="DC.Type" content="Text.Monograph" />

</head><body bgcolor="#ffffff">

<img alt="Book Home" border="0" src="gifs/smbanner.gif" usemap="#banner-map" /><map name="banner-map"><area shape="rect" coords="1,-2,616,66" href="index.htm" alt="ActionScript: The Definitive Guide" /><area shape="rect" coords="629,-11,726,25" href="jobjects/fsearch.htm" alt="Search this book" /></map>

<div class="navbar"><table width="684" border="0"><tr><td align="left" valign="top" width="228"><a href="ch11_08.htm"><img alt="Previous" border="0" src="../gifs/txtpreva.gif" /></a></td><td align="center" valign="top" width="228"><a href="index.htm">ActionScript: The Definitive Guide</a></td><td align="right" valign="top" width="228"><a href="ch11_10.htm"><img alt="Next" border="0" src="../gifs/txtnexta.gif" /></a></td></tr></table></div>
<hr width="684" align="left" />


<h2 class="sect1">11.9. General Array-Manipulation Tools</h2>


<p>Earlier we saw how array methods can be used to remove elements from
and add elements to arrays. ActionScript also offers built-in methods
for reordering and sorting elements, converting array elements to
strings, and extracting arrays from other arrays.</p>


<a name="ch11-33-fm2xml" /><div class="sect2">
<h3 class="sect2">11.9.1. The reverse( ) Method</h3>


<p>As <a name="INDEX-1419" />
<a name="INDEX-1420" />
<a name="INDEX-1421" />its name suggests, the
<em class="filename">reverse( )</em> method reverses the order of the
elements of an array. Simple, but impressive. Here's the
syntax:</p>


<blockquote><pre class="code"><em class="replaceable">arrayName</em>.reverse( )</pre></blockquote>


<p>And here are the impressive results:</p>


<blockquote><pre class="code">var x = [1, 2, 3, 4];
x.reverse( );
trace(x);  // Displays: "4,3,2,1"</pre></blockquote>


<p>We typically use <em class="filename">reverse( )</em> to reorder a sorted
list. For example, if we have a list of products sorted by ascending
price, we can display them from least to most expensive, or we can
reverse the list to display them from most to least expensive.</p>


<p>Reader Exercise: Try to write your own custom function to reverse the
elements in an array. Not only is it harder than it looks,
you'll most likely find that the built-in <em class="filename">reverse(
)</em> method is substantially faster.</p>
</div>




<a name="ch11-34-fm2xml" /><div class="sect2">
<h3 class="sect2">11.9.2. The sort( ) Method</h3>


<p>The <a name="INDEX-1422" />
<a name="INDEX-1423" /> <a name="INDEX-1424" />
<a name="INDEX-1425" /><em class="filename">sort(
)</em> method rearranges the sequence of elements in an array
according to an arbitrary rule that we provide. If we provide no
rule, <em class="filename">sort( )</em> places the elements in (roughly)
alphabetical order by default. Sorting an array alphabetically is
really easy, so let's see how that works first:</p>


<blockquote><pre class="code"><em class="replaceable">arrayName</em>.sort( )</pre></blockquote>


<p>When <a name="INDEX-1426" />
<a name="INDEX-1427" />we invoke an array's
<em class="filename">sort( )</em> method with no arguments, its elements
are temporarily converted to strings and sorted according to their
code points as shown in <a href="appb_01.htm">Appendix B, "Latin 1 Character Repertoire and Keycodes"</a> (see
"Character order and alphabetic comparisons" in <a href="ch04_01.htm">Chapter 4, "Primitive Datatypes"</a>, for important details):</p>


<blockquote><pre class="code">// This works as expected...
var animals = ["zebra", "ape"];
animals.sort( );
trace(animals);  // Displays: "ape,zebra"
                 // Cool! What a handy little method.

// Watch out, the sort order is not strictly alphabetical...The
// capital "Z" in zebra comes before the lowercase "a" in "ape".
var animals = ["Zebra", "ape"];
animals.sort( );
trace(animals);  // Displays: "Zebra,ape". Oops. See Appendix B.</pre></blockquote>


<p>We can also use <em class="filename">sort( )</em> to organize array
elements according to a rule of our own choosing. This technique is a
little trickier to work with, but quite powerful. We start by
creating a <em class="emphasis">compare function</em><a name="INDEX-1428" /> that dictates how the
interpreter should sort any two elements of an array. We then pass
that function to the <em class="filename">sort( )</em> method when we call
it, like this:</p>


<blockquote><pre class="code"><em class="replaceable">arrayName</em>.sort(<em class="replaceable">compareFunction</em>)</pre></blockquote>


<p>where <em class="replaceable">compareFunction</em> is the name of the
function that tells the interpreter how to make its sorting
decisions.</p>


<p>To build a compare function, we start with a new function that
accepts two arguments (these represent any two elements in the
array). In the function's body, we determine, however we see
fit, which of the elements we'd like to appear earlier in the
element list after a <em class="filename">sort( )</em>. If we want the
first element to appear <em class="emphasis">before</em> the second
element, we return a <em class="emphasis">negative</em> number from our
function. If we want the first element to appear
<em class="emphasis">after</em> the second element, we return a
<em class="emphasis">positive</em> number from our function. If we want
the elements to be left in the same positions, we return
from our function. In pseudocode, the approach generically looks like
this:</p>


<blockquote><pre class="code">function compareElements (element1, element2) {
  if (<em class="replaceable">element1 should appear before element2</em>) {
    return -1;
  } else if (<em class="replaceable">element1 should appear after element2</em>) {
    return 1;
  } else {
    return 0;  // The elements should be left alone
  }
}</pre></blockquote>


<p>For example, to put elements in ascending numeric order, we could use
a function like this:</p>


<blockquote><pre class="code">function sortAscendingNumbers (element1, element2) {
  if (element1 &lt; element2) {
    return -1;
  } else if (element1 &gt; element2) {
    return 1;
  } else {
    return 0;  // The elements are equal
  }
}

// Now that our compare function is ready, let's try it out
var x = [34, 55, 33, 1, 100];
x.sort(sortAscendingNumbers);
trace(x);    // Displays: "1,33,34,55,100"</pre></blockquote>


<p>Numeric-sort functions can actually be phrased much more succinctly.
The preceding <em class="filename">sortAscendingNumbers( )</em> function
could be written as:</p>


<blockquote><pre class="code">function sortAscendingNumbers (element1, element2) {
  return element1 - element2;
}</pre></blockquote>


<p>In our optimized version, a negative number is returned if
<tt class="literal">element1</tt> is less than <tt class="literal">element2</tt>,
a positive number is returned if <tt class="literal">element1</tt> is
greater than <tt class="literal">element2</tt>, and a
is returned if the two are equal. Now that's elegant! Here is a
version to perform a descending sort:</p>


<blockquote><pre class="code">function sortDescendingNumbers (element1, element2) {
  return element2 - element1;
}</pre></blockquote>


<p><a href="ch11_09.htm">Example 11-6</a> shows a compare function that adjusts
the default alphabetic comparison behavior of <em class="filename">sort(
)</em> so that upper- and lowercase letters are sorted without
regard to case.</p>


<a name="ch11-72467" /><div class="example">
<h4 class="objtitle">Example 11-6. A Case-Insensitive Alphabetic Array Sort </h4>

<blockquote><pre class="code">var animals = ["Zebra", "ape"];

function sortAscendingAlpha (element1, element2) {
	return (element2.toLowerCase() &lt; element1.toLowerCase( ));
}

animals.sort(sortAscendingAlpha);
trace(animals);  // Displays: "ape,Zebra"</pre></blockquote>
</div>


<p>Of course, the comparison does not always have to involve simple
strings and numbers. Here we sort an array of movie clips in
ascending order, according to their pixel area:</p>


<blockquote><pre class="code">var clips = [square1, square2, square3];

function sortByClipArea (clip1, clip2) {
  clip1area = clip1._width * clip1._height;
  clip2area = clip2._width * clip2._height
  return clip1area - clip2area;
}

clips.sort(sortByClipArea);</pre></blockquote>


<p>That's a mighty fine <a name="INDEX-1429" />sortin'
<a name="INDEX-1430" />
<a name="INDEX-1431" />
<a name="INDEX-1432" />
<a name="INDEX-1433" />machine!</p>
</div>




<a name="ch11-44621" /><div class="sect2">
<h3 class="sect2">11.9.3. The slice( ) Method</h3>


<p>Something <a name="INDEX-1434" />
<a name="INDEX-1435" />
<a name="INDEX-1436" />of a
subset of <em class="filename">splice( )</em>, <em class="filename">slice(
)</em> retrieves a series of elements from an array. Unlike
<em class="filename">splice( )</em>, <em class="filename">slice( )</em> only
<em class="emphasis">retrieves</em> elements. It creates a new array and
does not affect the array on which it is invoked. The
<em class="filename">slice( ) </em>method has the following syntax:</p>


<blockquote><pre class="code"><em class="replaceable">origArray</em>.slice(<em class="replaceable">startIndex</em>, <em class="replaceable">endIndex</em>)</pre></blockquote>


<p>where <em class="replaceable">startIndex</em> specifies the first
element to retrieve and <em class="replaceable">endIndex</em> specifies
the element <em class="emphasis">after</em> the last element we want to
retrieve. The <em class="filename">slice( )</em> method returns a new
array containing a copy of the series of elements from
<em class="replaceable">origArray</em><tt class="literal">[</tt><em class="replaceable">startIndex</em><tt class="literal">]</tt>
to
<em class="replaceable">origArray</em><tt class="literal">[</tt><em class="replaceable">endIndex</em>
<tt class="literal">-</tt> <tt class="literal">1]</tt>. If
<em class="replaceable">endIndex</em> is omitted, it defaults to
<em class="replaceable">origArray</em><tt class="literal">.length</tt> and
the returned array contains the elements from
<em class="replaceable">origArray</em><tt class="literal">[</tt><em class="replaceable">startIndex</em><tt class="literal">]</tt>
through
<em class="replaceable">origArray</em><tt class="literal">[</tt><em class="replaceable">origArray</em><tt class="literal">.length-1]</tt>.
Here are a couple of examples:</p>


<blockquote><pre class="code">var myList = ["a", "b", "c", "d", "e", "f"];
myList.slice(1, 3);  // Returns ["b", "c"], not ["b", "c", "d"]
myList.slice(2);     // Returns ["c", "d", "e", "f"]</pre></blockquote>
</div>




<a name="ch11-84102" /><div class="sect2">
<h3 class="sect2">11.9.4. The join( ) Method</h3>


<p>We <a name="INDEX-1437" />
<a name="INDEX-1438" />can
<a name="INDEX-1439" />
<a name="INDEX-1440" />use <em class="filename">join( )</em> to produce
a string that represents all the elements of an array. The
<em class="filename">join( )</em> method starts by converting each element
of the specified array to a string. Empty elements are converted to
the empty string (<tt class="literal">""</tt>). Then <em class="filename">join(
)</em> concatenates all the strings into one long string,
separating them with a character (or series of characters) called a
<em class="filename">delimiter</em><a name="INDEX-1441" />. Finally, <em class="filename">join( )</em>
returns the resulting string. The syntax of <em class="filename">join(
)</em> is:</p>


<blockquote><pre class="code"><em class="replaceable">arrayName</em>.join(<em class="replaceable">delimiter</em>)</pre></blockquote>


<p>where <em class="replaceable">delimiter</em> is the string used to
separate the converted elements of
<em class="replaceable">arrayName</em>. If unspecified,
<em class="replaceable">delimiter</em> defaults to a comma. The result
of a <em class="filename">join( )</em> statement is easiest to understand
through an example:</p>


<blockquote><pre class="code">var siteSections = ["animation", "short films", "games"];

// Sets <em class="replaceable">siteTitle</em> to "animation&gt;&gt; short films&gt;&gt; games"
var siteTitle = siteSections.join("&gt;&gt; ");

// Sets <em class="replaceable">siteTitle</em> to "animation:short films:games"
var siteTitle = siteSections.join(":");</pre></blockquote>


<p>Note that <em class="filename">join( )</em> does not modify the array upon
which it is invoked. Instead, it returns a string based on that
array.</p>


<p>When called without a delimiter argument, <em class="filename">join(
)</em> behaves exactly like <em class="filename">toString( )</em>.
Because <em class="filename">toString( )</em> does not add a space after
the comma it uses to delimit elements, we may wish to use
<em class="filename">join( )</em> if we want nicely formatted output:</p>


<blockquote><pre class="code">var x = [1, 2, 3];
trace(x.join(", "));  // Displays: "1, 2, 3" instead of "1,2,3"</pre></blockquote>


<p>The<em class="filename"> join( ) </em>method has a potentially surprising
result when used on an array that contains elements which are
<em class="emphasis">themselves</em> arrays. Since <em class="filename">join(
)</em> converts elements to strings, and arrays are converted
to strings via their <em class="filename">toString( )</em> method,
<a name="INDEX-1442" />nested arrays are converted to strings
using a comma delimiter, not the delimiter supplied to
<em class="filename">join( )</em> as an argument. In other words, any
delimiter supplied to <em class="filename">join( )</em> doesn't
affect nested arrays. For example:</p>


<blockquote><pre class="code">var x = [1, [2, 3, 4], 5];
x.join("|");  // Returns "1|2,3,4|5"</pre></blockquote>
</div>




<a name="ch11-35-fm2xml" /><div class="sect2">
<h3 class="sect2">11.9.5. The toString( ) Method</h3>


<p>As
<a name="INDEX-1443" />
<a name="INDEX-1444" />
<a name="INDEX-1445" />
<a name="INDEX-1446" />we'll learn in <a href="ch12_01.htm">Chapter 12, "Objects and Classes"</a>, <em class="filename">toString( )</em> is a
universal object method that returns a string representation of any
object upon which it is invoked. In the case of an
<em class="filename">Array</em> object, the <em class="filename">toString(
)</em> method returns a list of the array's elements
converted to strings and separated by commas. The <em class="filename">toString(
)</em> method may be called explicitly:</p>


<blockquote><pre class="code"><em class="replaceable">arrayName</em>.toString( )</pre></blockquote>


<p>Typically, we don't use <em class="filename">toString( )</em>
explicitly; rather, it is invoked automatically whenever
<em class="replaceable">arrayName</em> is used in a string context. For
example, when we write <em class="emphasis">trace(arrayName)</em>, a list
of comma-separated values appears in the Output window;
<em class="emphasis">trace(arrayName)</em> is equivalent to
<em class="emphasis">trace(arrayName.toString( ))</em>. The
<em class="filename">toString( )</em> method is often helpful during
debugging when we need a quick, unformatted look at the elements of
an array. For example:</p>


<blockquote><pre class="code">var sites = ["www.moock.org", "www.macromedia.com", "www.oreilly.com"];
// Display our array in a text field
debugOutput = "the sites array is " + sites.toString( );</pre></blockquote>
</div>




<a name="ch11-36-fm2xml" /><div class="sect2">
<h3 class="sect2">11.9.6. Arrays as Objects</h3>


<p>Once <a name="INDEX-1447" />you've
<a name="INDEX-1448" />read <a href="ch12_01.htm">Chapter 12, "Objects and Classes"</a>, you
should recognize that arrays are a type of object, specifically
instances of the <em class="filename">Array</em> class. As with other
objects, array objects can have properties added to them. When we add
named elements to an array, we're really just adding properties
to an <em class="filename">Array</em> object. However, as we learned
earlier, to use the built-in methods of the
<em class="filename">Array</em> class we must work with numbered elements.</p>


<p>In <a href="ch09_01.htm">Chapter 9, "Functions"</a>, we saw a useful
"array-object" hybrid, the <em class="filename">arguments</em>
object, that combined numbered elements with properties. (Recall that
the <em class="filename">arguments</em> object has a
<tt class="literal">callee</tt> property and also stores an array of
parameters as array elements.) Now we can see that all arrays contain
their numbered list of elements, plus the built-in property
<tt class="literal">length</tt>, plus any custom properties we add.</p>
</div>


<hr width="684" align="left" />
<div class="navbar"><table width="684" border="0"><tr><td align="left" valign="top" width="228"><a href="ch11_08.htm"><img alt="Previous" border="0" src="../gifs/txtpreva.gif" /></a></td><td align="center" valign="top" width="228"><a href="index.htm"><img alt="Home" border="0" src="../gifs/txthome.gif" /></a></td><td align="right" valign="top" width="228"><a href="ch11_10.htm"><img alt="Next" border="0" src="../gifs/txtnexta.gif" /></a></td></tr><tr><td align="left" valign="top" width="228">11.8. Removing Elements from an Array</td><td align="center" valign="top" width="228"><a href="index/index.htm"><img alt="Book Index" border="0" src="../gifs/index.gif" /></a></td><td align="right" valign="top" width="228">11.10. Multidimensional Arrays</td></tr></table></div>
<hr width="684" align="left" />

<img alt="Library Navigation Links" border="0" src="../gifs/navbar.gif" usemap="#library-map" />
<p><font size="-1"><a href="copyrght.htm">Copyright &copy; 2002</a> O'Reilly &amp; Associates. All rights reserved.</font></p>

<map name="library-map"><area href="../index.htm" coords="0,1,78,93" shape="rect" /><area href="../wdesign/index.htm" coords="80,2,155,96" shape="rect" /><area href="../xhtml/index.htm" coords="158,0,263,97" shape="rect" /><area href="../audio/index.htm" coords="265,1,335,97" shape="rect" /><area href="../css/index.htm" coords="338,1,434,93" shape="rect" /><area href="index.htm" coords="439,0,540,102" shape="rect" /><area href="../infoarch/index.htm" coords="544,0,685,102" shape="rect" /></map>

</body></html>