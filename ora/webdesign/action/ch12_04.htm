<html><head><title>Methods (ActionScript: The Definitive Guide)</title><link rel="stylesheet" type="text/css" href="../style/style1.css" />

<meta name="DC.Creator" content="Colin Moock" /><meta name="DC.Format" content="text/xml" scheme="MIME" /><meta name="DC.Language" content="en-US" /><meta name="DC.Publisher" content="O'Reilly &amp; Associates, Inc." /><meta name="DC.Source" scheme="ISBN" content="1565928520L" /><meta name="DC.Subject.Keyword" content="stuff" /><meta name="DC.Title" content="ActionScript: The Definitive Guide" /><meta name="DC.Type" content="Text.Monograph" />

</head><body bgcolor="#ffffff">

<img alt="Book Home" border="0" src="gifs/smbanner.gif" usemap="#banner-map" /><map name="banner-map"><area shape="rect" coords="1,-2,616,66" href="index.htm" alt="ActionScript: The Definitive Guide" /><area shape="rect" coords="629,-11,726,25" href="jobjects/fsearch.htm" alt="Search this book" /></map>

<div class="navbar"><table width="684" border="0"><tr><td align="left" valign="top" width="228"><a href="ch12_03.htm"><img alt="Previous" border="0" src="../gifs/txtpreva.gif" /></a></td><td align="center" valign="top" width="228"><a href="index.htm">ActionScript: The Definitive Guide</a></td><td align="right" valign="top" width="228"><a href="ch12_05.htm"><img alt="Next" border="0" src="../gifs/txtnexta.gif" /></a></td></tr></table></div>
<hr width="684" align="left" />


<h2 class="sect1">12.4. Methods</h2>


<p><em class="emphasis">Methods</em> <a name="INDEX-1484" />
<a name="INDEX-1485" />are functions that are associated with
objects and are typically used to perform a task or access an
object's data. We invoke methods with
<a name="INDEX-1486" />
<a name="INDEX-1487" />the
<a name="INDEX-1488" /> <a name="INDEX-1489" /> <a name="INDEX-1490" />function call operator, ( ), using the
dot operator to separate the method name from its object:</p>


<blockquote><pre class="code"><em class="replaceable">objectName</em>.<em class="replaceable">methodName</em>( )</pre></blockquote>


<p>For example:</p>


<blockquote><pre class="code">ball.getArea( );  // Call the <em class="replaceable">getArea( )</em> method of <em class="replaceable">ball</em></pre></blockquote>


<p>As with properties, methods are defined for a class and then invoked
on individual object instances. However, before we see how to create
methods within a class, we're going to bend the rules of good
object-oriented programming and attach a method to an individual
object instance of the built-in <em class="filename">Object</em> class.
Once we understand how a single method works on an isolated object,
we'll apply the concept correctly to a class of our own.</p>


<p>A method is essentially just a function stored in an object property.
By assigning a function to an object property, we turn that function
into a method of the object:</p>


<blockquote><pre class="code">// Create an object
myObject = new Object( );

// Create a function
function greet ( ) {
  trace("hello world");
}

// Now assign <em class="replaceable">greet</em> to the property <em class="replaceable">sayHello</em>
myObject.sayHello = greet;</pre></blockquote>


<p>Once a function resides in an object property, we may invoke that
function as a method, like this:</p>


<blockquote><pre class="code">myObject.sayHello( );  // Displays: "hello world"</pre></blockquote>


<p>Truth be known, you can also assign a function to an array element
(instead of to an object property) and invoke that function using the
call operator, like this:</p>


<blockquote><pre class="code">var myList = new Array( );
myList[0] = greet;
myList[0]( );          // Displays: "hello world"</pre></blockquote>


<p>But when a
<a name="INDEX-1491" />function is invoked
as a <em class="emphasis">method</em> of an object, something very special
happens to the function -- it gains the ability to retrieve or set
the properties of the object to which it is attached. Let's see
how this works with our <tt class="literal">sayHello</tt> property. First,
we add a <tt class="literal">msg</tt> property to our generic object
(again, we're bending the OOP rules for the sake of the
demonstration . . . it's bad form to attach a custom property
to an individual object instance):</p>


<blockquote><pre class="code">myObject.msg = "Nice day, isn't it?";</pre></blockquote>


<p>Now we adjust <em class="filename">greet( )</em> so that it displays the
value of <tt class="literal">msg</tt>:</p>


<blockquote><pre class="code">function greet ( ) {
  trace(this.msg);
}

// Now invoke <em class="replaceable">sayHello</em> again
myObject.sayHello( );  // Displays: "Nice day, isn't it?"</pre></blockquote>


<p>Notice the keyword <tt class="literal">this</tt> at the end of line 2?
That's our connection to <tt class="literal">myObject</tt>. When
executed as a method of <tt class="literal">myObject</tt>,
<em class="filename">sayHello( )</em> is effectively passed an invisible
argument called <tt class="literal">this</tt> containing a reference to
<tt class="literal">myObject</tt>. In the body of the function, we use
<tt class="literal">this</tt> to access <tt class="literal">myObject</tt>'s
<tt class="literal">msg</tt> property as <tt class="literal">this.msg</tt>. When
we invoke <em class="emphasis">myObject.sayHello( )</em>, the expression
<tt class="literal">this.msg</tt> resolves to
<tt class="literal">myObject.msg</tt>, which becomes "Nice day,
isn't it?".</p>


<p>A <a name="INDEX-1492" />
<a name="INDEX-1493" /> <a name="INDEX-1494" />method can both retrieve and set the value
of its host object's properties. <a href="ch12_04.htm">Example 12-1</a>
demonstrates a method that retrieves the value of two properties of
an object, performs a calculation based on those values, and then
sets the value of a third, new property. (Once again, because our
current focus is methods, the object we're using is only an
object instance. In the next section we'll learn how to add
object methods properly with a class.)</p>


<a name="ch12-66840" /><div class="example">
<h4 class="objtitle">Example 12-1. Implementing a Method that Sets a Property </h4>

<blockquote><pre class="code">// Make a new object and store it in <em class="replaceable">rectangle</em>
var rectangle = new Object( );
rectangle.width = 10;
rectangle.height = 5;

// Define a function to calculate a rectangle's area, and
// set a corresponding property. Note the use of the <em class="replaceable">this</em> keyword.
function rectArea( ) {
  this.area = this.width * this.height;
}

// Assign the function as a method of <em class="replaceable">rectangle</em>
rectangle.setArea = rectArea;

// Now invoke <em class="replaceable">rectangle</em>'s <em class="replaceable">setArea( )</em> method
rectangle.setArea( );    // Sets rectangle.area to 50

// Finally, examine the new property generated by <em class="replaceable">setArea( )</em>
trace(rectangle.area);  // Displays: 50</pre></blockquote>
</div>


<p>It's more typical to have a
<a name="INDEX-1495" />method return a value instead of setting
a property. Let's revise our
<tt class="literal">rectangle</tt>'s <em class="filename">setArea( )</em>
method to do just that, as shown in <a href="ch12_04.htm">Example 12-2</a>.</p>


<a name="ch12-39686" /><div class="example">
<h4 class="objtitle">Example 12-2. Returning a Value from a Method </h4>

<blockquote><pre class="code">// Create and set up our rectangle. Note that it's legal to assign
// the <em class="replaceable">area</em> method before the <em class="replaceable">rectArea</em> function appears in our code.
var rectangle = new Object( );
rectangle.width = 10;
rectangle.height = 5;
rectangle.area = rectArea;

// This time, just return the area, don't assign it to a property
function rectArea( ) {
  return this.width * this.height;
}

// Now it's even easier to use
trace("The area of rectangle is: " + rectangle.area( ));

// Displays: "The area of rectangle is: 50"</pre></blockquote>
</div>


<p>The <tt class="literal">this</tt> keyword can be a tricky concept because
it involves some sleight of hand by the interpreter. To illustrate
how the preceding code works, consider <a href="ch12_04.htm">Example 12-3</a>,
which exposes the implied relationship of <tt class="literal">this</tt> to
its object and method. (<a href="ch12_04.htm">Example 12-3</a> is fictitious
because <tt class="literal">this</tt> is a reserved keyword and would cause
an error if used as shown.)</p>


<a name="ch12-13079" /><div class="example">
<h4 class="objtitle">Example 12-3. A Fictitious Example Using this Explicitly </h4>

<blockquote><pre class="code">// Create and set up our rectangle object
var rectangle = new Object( );
rectangle.width = 10;
rectangle.height = 5;
rectangle.area = rectArea;

// Specifically require <em class="replaceable">this</em> as an argument of our <em class="replaceable">rectArea( )</em> function
function rectArea(this) {
  return this.width * this.height;
}

// Call the method with an explicit reference to the <em class="replaceable">rectangle</em> object
trace("The area of rectangle is: " + rectangle.area(rectangle));</pre></blockquote>
</div>


<p>Methods <a name="INDEX-1496" />
<a name="INDEX-1497" />
<a name="INDEX-1498" />may also be assigned to object
properties as function literals. By using a function literal to
create a method, we avoid the work of first creating our function and
then assigning it to a property. <a href="ch12_04.htm">Example 12-4</a> reworks
our rectangle object from <a href="ch12_04.htm">Example 12-2</a> showing the
use of a function literal.</p>


<a name="ch12-17132" /><div class="example">
<h4 class="objtitle">Example 12-4. Implementing Methods with Function Literals </h4>

<blockquote><pre class="code">var rectangle = new Object( );
rectangle.width = 10;
rectangle.height = 5;

// Here's the function literal assignment
rectangle.area = function ( ) {
  return this.width * this.height;
};  // Using a semicolon is good form at the end of the literal

// We can still invoke the function as before
trace("The area of rectangle is: " + rectangle.area( ));</pre></blockquote>
</div>


<p>Methods give us enormous control over objects. When used with
built-in objects, methods are one of our primary tools for
controlling the Flash movie environment.</p>


<p>In this section we've seen both how to store a function in a
property (thereby making it a method) and also how to invoke a
function through a property. These two endeavors have very similar
syntax, but very different results. It's crucial to understand
the difference.</p>




<a name="ch12-11-fm2xml" /><blockquote><h4>TIP</h4>
<p><a name="INDEX-1499" />
<a name="INDEX-1500" />When
<em class="emphasis">assigning</em> a method to a property,
<em class="emphasis">omit</em> the parentheses:</p>



<blockquote><pre class="code">myObj.myMethod = someFunction;</pre></blockquote>


<p>When <em class="emphasis">invoking</em> a method,
<em class="emphasis">include</em> the parentheses:</p>




<blockquote><pre class="code">myObj.myMethod( );</pre></blockquote>



<p><a name="INDEX-1501" />
<a name="INDEX-1502" />The
difference in syntax is subtle. Make sure to get it right.</p>
</blockquote>


<hr width="684" align="left" />
<div class="navbar"><table width="684" border="0"><tr><td align="left" valign="top" width="228"><a href="ch12_03.htm"><img alt="Previous" border="0" src="../gifs/txtpreva.gif" /></a></td><td align="center" valign="top" width="228"><a href="index.htm"><img alt="Home" border="0" src="../gifs/txthome.gif" /></a></td><td align="right" valign="top" width="228"><a href="ch12_05.htm"><img alt="Next" border="0" src="../gifs/txtnexta.gif" /></a></td></tr><tr><td align="left" valign="top" width="228">12.3. Object Properties</td><td align="center" valign="top" width="228"><a href="index/index.htm"><img alt="Book Index" border="0" src="../gifs/index.gif" /></a></td><td align="right" valign="top" width="228">12.5. Classes and Object-Oriented Programming</td></tr></table></div>
<hr width="684" align="left" />

<img alt="Library Navigation Links" border="0" src="../gifs/navbar.gif" usemap="#library-map" />
<p><font size="-1"><a href="copyrght.htm">Copyright &copy; 2002</a> O'Reilly &amp; Associates. All rights reserved.</font></p>

<map name="library-map"><area href="../index.htm" coords="0,1,78,93" shape="rect" /><area href="../wdesign/index.htm" coords="80,2,155,96" shape="rect" /><area href="../xhtml/index.htm" coords="158,0,263,97" shape="rect" /><area href="../audio/index.htm" coords="265,1,335,97" shape="rect" /><area href="../css/index.htm" coords="338,1,434,93" shape="rect" /><area href="index.htm" coords="439,0,540,102" shape="rect" /><area href="../infoarch/index.htm" coords="544,0,685,102" shape="rect" /></map>

</body></html>
