<html><head><title>Advanced Function Scope Issues (ActionScript: The Definitive Guide)</title><link rel="stylesheet" type="text/css" href="../style/style1.css" />

<meta name="DC.Creator" content="Colin Moock" /><meta name="DC.Format" content="text/xml" scheme="MIME" /><meta name="DC.Language" content="en-US" /><meta name="DC.Publisher" content="O'Reilly &amp; Associates, Inc." /><meta name="DC.Source" scheme="ISBN" content="1565928520L" /><meta name="DC.Subject.Keyword" content="stuff" /><meta name="DC.Title" content="ActionScript: The Definitive Guide" /><meta name="DC.Type" content="Text.Monograph" />

</head><body bgcolor="#ffffff">

<img alt="Book Home" border="0" src="gifs/smbanner.gif" usemap="#banner-map" /><map name="banner-map"><area shape="rect" coords="1,-2,616,66" href="index.htm" alt="ActionScript: The Definitive Guide" /><area shape="rect" coords="629,-11,726,25" href="jobjects/fsearch.htm" alt="Search this book" /></map>

<div class="navbar"><table width="684" border="0"><tr><td align="left" valign="top" width="228"><a href="ch15_02.htm"><img alt="Previous" border="0" src="../gifs/txtpreva.gif" /></a></td><td align="center" valign="top" width="228"><a href="index.htm">ActionScript: The Definitive Guide</a></td><td align="right" valign="top" width="228"><a href="ch15_04.htm"><img alt="Next" border="0" src="../gifs/txtnexta.gif" /></a></td></tr></table></div>
<hr width="684" align="left" />


<h2 class="sect1">15.3. Advanced Function Scope Issues</h2>


<p>This <a name="INDEX-2010" />section describes another advanced
topic that was too esoteric for our initial discussion about function
scope. Let's revisit it here now that we've learned about
movie clips, function scope, and objects.</p>


<p>We learned in <a href="ch09_01.htm">Chapter 9, "Functions"</a> that a function's
<a name="INDEX-2011" />scope chain is
normally determined relative to the function's declaration
statement. There is, however, a subtle extension to this rule. When a
function from one timeline is assigned to a variable in a different
movie clip's timeline, that <em class="emphasis">assignment</em>
also affects the function's scope chain. If the original
function is invoked directly, its scope chain includes its original
timeline, but if the function is invoked through the variable, its
scope chain includes the <em class="emphasis">variable's</em>
timeline.</p>


<p>For example, suppose we create a function called
<em class="filename">transformClip( )</em> that rotates and scales the
current clip. We set the amount to rotate and scale the clip in the
variable's <tt class="literal">rotateAmount</tt> and
<tt class="literal">widthAmount</tt>:</p>


<blockquote><pre class="code">var rotateAmount = 45;
var widthAmount = 50;

function transformClip ( ) {
	_rotation = rotateAmount;
	_xscale = widthAmount;
}

// Invoke the function
transformClip( );</pre></blockquote>


<p>Next we assign <tt class="literal">transformClip </tt> to a variable,
<tt class="literal">tc</tt>, in a clip called <tt class="literal">rect</tt>:</p>


<blockquote><pre class="code">rect.tc = transformClip;</pre></blockquote>


<p>When we invoke <tt class="literal">transformClip </tt> through
<tt class="literal">rect.tc</tt>, as follows, nothing happens:</p>


<blockquote><pre class="code">rect.tc( );</pre></blockquote>


<p>Why? The function stored in <tt class="literal">tc</tt> has a scope chain
that includes <tt class="literal">rect</tt>, not our original
function's timeline, so <tt class="literal">rotateAmount</tt> and
<tt class="literal">widthAmount</tt> are not found. But when we add
<tt class="literal">rotateAmount</tt> and <tt class="literal">widthAmount</tt>
variables to <tt class="literal">rect</tt>, the function can find the
variables, so it works:</p>


<blockquote><pre class="code">rect.widthAmount = 10;
rect.rotateAmount = 15;
rect.tc( );  // Sets rect to 10 percent width, and 15 degrees rotation</pre></blockquote>


<p>In <a name="INDEX-2012" />
<a name="INDEX-2013" />contrast, when regular data objects on the
same timeline are involved in function assignment, the assigned
function's scope chain is not altered; rather, the
function's scope chain is permanently determined relative to
the function declaration. <a href="ch15_03.htm">Example 15-4</a> demonstrates.</p>


<a name="ch15-99682" /><div class="example">
<h4 class="objtitle">Example 15-4. The Fixed Scope of Object Methods </h4>

<blockquote><pre class="code">// Set our variables
var rotateAmount = 45;
var widthAmount = 50;

// Create a <em class="replaceable">transformClip()</em> function 
// that prints the value of <em class="replaceable">rotateAmount</em> and <em class="replaceable">widthAmount</em>
function transformClip ( ) {
	trace(rotateAmount);
	trace(widthAmount);
}

// Create an object that corresponds with 
// the <em class="replaceable">rect</em> clip in the previous example
var rectObj = new Object( );

// Copy <em class="replaceable">transformClip</em> to a property of <em class="replaceable">rectObj</em>
rectObj.tc = transformClip;

// Set <em class="replaceable">rotateAmount</em> and <em class="replaceable">widthAmount</em> properties on <em class="replaceable">rectObj</em>
rectObj.rotateAmount = 15;
rectObj.widthAmount = 10;

// Now invoke <em class="replaceable">rectObj.tc</em>
rectObj.tc( );  // Displays 45 and 50, not 15 and 10. The scope of
               // <em class="replaceable">rectObj.tc</em> is the same as <em class="replaceable">transformClip()</em>.</pre></blockquote>
</div>


<p>When assigned to an <a name="INDEX-2014" />object property, a function is scoped to
the timeline that bears the function declaration. However, when
assigned to a remote movie clip, a function is scoped to the timeline
of the remote clip.</p>


<p>Note that this behavior is actually a departure from
<a name="INDEX-2015" />
<a name="INDEX-2016" />JavaScript, in which functions are
permanently scoped to objects based on the function declaration. For
example, if we assume the frames of an HTML frameset to be roughly
analogous to the clips in a Flash movie, then we can see the
discrepancy; in JavaScript, a function assigned to a remote frame is
still scoped to the frame with the function declaration, not the
remote frame, as shown in <a href="ch15_03.htm">Example 15-5</a>.</p>


<a name="ch15-56292" /><div class="example">
<h4 class="objtitle">Example 15-5.  JavaScript's Static Function Scope </h4>

<blockquote><pre class="code">// CODE ON FRAME 0 OF A FRAMESET
// Assign a variable in frame 0
var myVar = "frame 0";

// Set a function in frame 1 of the frameset, and copy that
// function back to frame 0
parent.frames[1].myMeth = function ( ) { alert(myVar); };
myMeth = parent.frames[1].myMeth;

// Invoke <em class="replaceable">myMeth()</em> from frame 0
myMeth( ); // displays "frame 0"

// CODE ON A BUTTON IN FRAME 1 OF THE SAME FRAMESET 
&lt;FORM&gt;
  &lt;INPUT type="button" value="click me" onClick="myMeth( );"&gt;
&lt;/FORM&gt;

// Now click the button to invoke <em class="replaceable">myMeth( )</em> from frame 1.
// "frame 0" is displayed.
// <em class="replaceable">myMeth( )</em> is not scoped to frame 1, but to frame 0, where
// the declaration statement occurred.<a name="INDEX-2017" /></pre></blockquote>
</div>


<hr width="684" align="left" />
<div class="navbar"><table width="684" border="0"><tr><td align="left" valign="top" width="228"><a href="ch15_02.htm"><img alt="Previous" border="0" src="../gifs/txtpreva.gif" /></a></td><td align="center" valign="top" width="228"><a href="index.htm"><img alt="Home" border="0" src="../gifs/txthome.gif" /></a></td><td align="right" valign="top" width="228"><a href="ch15_04.htm"><img alt="Next" border="0" src="../gifs/txtnexta.gif" /></a></td></tr><tr><td align="left" valign="top" width="228">15.2. Bitwise Programming</td><td align="center" valign="top" width="228"><a href="index/index.htm"><img alt="Book Index" border="0" src="../gifs/index.gif" /></a></td><td align="right" valign="top" width="228">15.4. The movieclip Datatype</td></tr></table></div>
<hr width="684" align="left" />

<img alt="Library Navigation Links" border="0" src="../gifs/navbar.gif" usemap="#library-map" />
<p><font size="-1"><a href="copyrght.htm">Copyright &copy; 2002</a> O'Reilly &amp; Associates. All rights reserved.</font></p>

<map name="library-map"><area href="../index.htm" coords="0,1,78,93" shape="rect" /><area href="../wdesign/index.htm" coords="80,2,155,96" shape="rect" /><area href="../xhtml/index.htm" coords="158,0,263,97" shape="rect" /><area href="../audio/index.htm" coords="265,1,335,97" shape="rect" /><area href="../css/index.htm" coords="338,1,434,93" shape="rect" /><area href="index.htm" coords="439,0,540,102" shape="rect" /><area href="../infoarch/index.htm" coords="544,0,685,102" shape="rect" /></map>

</body></html>