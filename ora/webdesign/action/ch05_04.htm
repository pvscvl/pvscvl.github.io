<html><head><title>The Equality and Inequality Operators (ActionScript: The Definitive Guide)</title><link rel="stylesheet" type="text/css" href="../style/style1.css" />

<meta name="DC.Creator" content="Colin Moock" /><meta name="DC.Format" content="text/xml" scheme="MIME" /><meta name="DC.Language" content="en-US" /><meta name="DC.Publisher" content="O'Reilly &amp; Associates, Inc." /><meta name="DC.Source" scheme="ISBN" content="1565928520L" /><meta name="DC.Subject.Keyword" content="stuff" /><meta name="DC.Title" content="ActionScript: The Definitive Guide" /><meta name="DC.Type" content="Text.Monograph" />

</head><body bgcolor="#ffffff">

<img alt="Book Home" border="0" src="gifs/smbanner.gif" usemap="#banner-map" /><map name="banner-map"><area shape="rect" coords="1,-2,616,66" href="index.htm" alt="ActionScript: The Definitive Guide" /><area shape="rect" coords="629,-11,726,25" href="jobjects/fsearch.htm" alt="Search this book" /></map>

<div class="navbar"><table width="684" border="0"><tr><td align="left" valign="top" width="228"><a href="ch05_03.htm"><img alt="Previous" border="0" src="../gifs/txtpreva.gif" /></a></td><td align="center" valign="top" width="228"><a href="index.htm">ActionScript: The Definitive Guide</a></td><td align="right" valign="top" width="228"><a href="ch05_05.htm"><img alt="Next" border="0" src="../gifs/txtnexta.gif" /></a></td></tr></table></div>
<hr width="684" align="left" />


<h2 class="sect1">5.4. The Equality and Inequality Operators</h2>


<p>We use the <a name="INDEX-721" /> <a name="INDEX-722" /><em class="emphasis">equality</em> operator (==)
to test whether two expressions have the same value. The equality
test takes the general form:</p>


<blockquote><pre class="code"><em class="replaceable">operand1</em> == <em class="replaceable">operand2</em></pre></blockquote>


<p>where <em class="replaceable">operand1</em> and
<em class="replaceable">operand2</em> may be any valid expression. The
equality operator can compare operands of any type. When
<em class="replaceable">operand1</em> and
<em class="replaceable">operand2</em> are equal, the expression returns
the Boolean value <tt class="literal">true</tt>; when they differ, it
returns the Boolean value <tt class="literal">false</tt>. For example:</p>


<blockquote><pre class="code">var x = 2;
x == 1     // false
x == 2     // true</pre></blockquote>





<a name="ch05-21-fm2xml" /><blockquote><h4>TIP</h4>
<p>The equality operator is created using two equal signs in a row
(<tt class="literal">==</tt>). It determines whether two expressions are
equal and should not be confused with the assignment operator (=)
which is used to assign a variable a new value.</p>

</blockquote>

<p>Consider this example:</p>


<blockquote><pre class="code">if (x = 5) {
  trace ("x is equal to 5")
}</pre></blockquote>


<p>The preceding example does <em class="emphasis">not</em> check whether
<tt class="literal">x</tt> equals 5. Instead, it <em class="emphasis">sets</em>
<tt class="literal">x</tt> equal to 5. The proper expression is as follows:</p>


<blockquote><pre class="code">// Use == instead of =
if (x == 5) {  
  trace ("x is equal to 5")
}</pre></blockquote>


<a name="ch05-22-fm2xml" /><div class="sect2">
<h3 class="sect2">5.4.1. Primitive Datatype Equality</h3>


<p>For the
<a name="INDEX-723" /> <a name="INDEX-724" />
<a name="INDEX-725" />primitive datatypes, the result of most
equality tests is fairly intuitive. <a href="ch05_04.htm">Table 5-2</a>
lists the rules that govern equality for each primitive datatype.</p>


<a name="ch05-25119" /><h4 class="objtitle">Table 5-2. Equality of Primitive Datatypes </h4><table border="1">



<tr>
<th>
<p>Type</p></th>
<th>
<p>Terms of Equality (both operands must be of given type)</p></th>
</tr>




<tr>
<td>
<p><a name="INDEX-726" />Number</p></td>
<td>
<p>If <em class="replaceable">operand1</em> is the same number as
<em class="replaceable">operand2</em>, the result is
<tt class="literal">true</tt>. If both operands are
<tt class="literal">+Infinity</tt> or both are
<tt class="literal">-Infinity</tt>, the result is <tt class="literal">true</tt>.
If both operands are either <tt class="literal">-0</tt> or
<tt class="literal">+0</tt>, the result is <tt class="literal">true</tt>. For all
other combinations, including if <em class="emphasis">either
</em>or<em class="emphasis"> both</em> operands are
<tt class="literal">NaN</tt>, the result is <tt class="literal">false</tt>:</p>


<blockquote><pre class="code">1 == 4                 // false
4 == 4                 // true
NaN == NaN             // false
+Infinity = -Infinity  // false</pre></blockquote></td>
</tr>

<tr>
<td>
<p><a name="INDEX-727" />String*</p></td>
<td>
<p>Performs case-sensitive string comparison. If
<em class="replaceable">operand1</em> and
<em class="replaceable">operand2</em> are strings of the same length
that contain the exact same sequence of characters, the result is
<tt class="literal">true</tt>; otherwise, the result is
<tt class="literal">false</tt>:</p>


<blockquote><pre class="code">"Flash" == "Flash"        // true
"O'Reilly" == "O Reilly"  // false
"Moock" == "moock"        // false ("m" and "M" are
                          // not the same character)</pre></blockquote></td>
</tr>

<tr>
<td>
<p><a name="INDEX-728" />Boolean</p></td>
<td>
<p>If both operands are <tt class="literal">true</tt> or both operands are
<tt class="literal">false</tt>, the result is <tt class="literal">true</tt>;
otherwise, the result is <tt class="literal">false</tt>:</p>


<blockquote><pre class="code">true == true    // true
false == false  // true
true == false   // false</pre></blockquote></td>
</tr>

<tr>
<td>
<p><tt class="literal">undefined</tt><a name="INDEX-729" /></p></td>
<td>
<p>If both operands are <tt class="literal">undefined</tt> or one operand is
<tt class="literal">undefined</tt> and the other is
<tt class="literal">null</tt>, the result is <tt class="literal">true</tt>;
otherwise, the result is <tt class="literal">false</tt>:</p></td>
</tr>

<tr>
<td>
<p><tt class="literal">null</tt><a name="INDEX-730" /></p></td>
<td>
<p>If both operands are <tt class="literal">null</tt> or if one operand is
<tt class="literal">undefined</tt> and the other is
<tt class="literal">null</tt>, the result is <tt class="literal">true</tt>;
otherwise, the result is <tt class="literal">false</tt>:</p></td>
</tr>

<tr>
<td>
<p>Composite datatypes</p></td>
<td>
<p>See <a href="ch05_04.htm">Section 5.4.2, "Composite Datatype Equality"</a>.</p></td>
</tr>


</table>


<p>* Flash 4's string equality operator was <tt class="literal">eq</tt>.
While <tt class="literal">eq</tt> is supported in Flash 5 for backward
compatibility, it is not recommended unless exporting to Flash 4
<em class="filename">.swf</em> format.</p>
</div>




<a name="ch05-23-fm2xml" /><div class="sect2">
<h3 class="sect2">5.4.2. Composite Datatype Equality</h3>


<p>Because <a name="INDEX-731" />variables containing composite data
(objects, arrays, functions, or movie clips) store
<em class="emphasis">references</em> to the data and not the data itself,
it is possible for two variables to refer to the same underlying
item. Two such operands are considered equal if and only if they
refer to the same underlying composite data, not if the operands
refer to two different items that contain identical contents. Even if
two operands can be converted to the same primitive value they are
still not necessarily considered equal.</p>


<p>The following examples illustrate how ActionScript compares the
references that point to the composite data, not the data itself. In
the first example, the operands (<tt class="literal">nameList1</tt> and
<tt class="literal">nameList2</tt>) refer to arrays that have the same
elements but are actually two distinct arrays. The references are
therefore different and the comparison evaluates to
<tt class="literal">false</tt>:</p>


<blockquote><pre class="code">nameList1 = ["Linkovich", "Harris", "Sadler"];
nameList2 = ["Linkovich", "Harris", "Sadler"];
nameList1 == nameList2  // false</pre></blockquote>


<p>In this example, <tt class="literal">cities</tt> and
<tt class="literal">canadianCities</tt> both refer to the same array:</p>


<blockquote><pre class="code">canadianCities = ["Toronto","Montreal","Vancouver"];
cities = canadianCities;
cities == canadianCities  // true</pre></blockquote>


<p>In this example, <tt class="literal">myFirstBall</tt> and
<tt class="literal">mySecondBall</tt> have the same constructor (i.e., are
both objects derived from the same class), but they exist as separate
(unequal) instances:</p>


<blockquote><pre class="code">myFirstBall = new Ball( );
mySecondBall = new Ball( );
myFirstBall == mySecondBall  // false</pre></blockquote>


<p>Thus, equality tests for composite data values are said to be
compared by reference, not by value. For more information on the
difference, see <a href="ch15_01.htm">Section 15.1, "Copying, Comparing, and Passing Data"</a> in <a href="ch15_01.htm">Chapter 15, "Advanced Topics"</a>.</p>


<p>To duplicate an array's contents without copying the array
reference, we can use the
<a name="INDEX-732" />
<a name="INDEX-733" />
<a name="INDEX-734" /><em class="filename">Array.slice( )</em>
method. In this example, we copy the elements from the
<tt class="literal">dishes</tt> array into <tt class="literal">kitchenItems</tt>:</p>


<blockquote><pre class="code">dishes = [ "cup", "plate", "spoon" ];
kitchenItems = dishes.slice(0, dishes.length);
trace(kitchenItems == dishes);  // Displays: false</pre></blockquote>


<p>Now <tt class="literal">kitchenItems</tt> and <tt class="literal">dishes</tt>
each contains its own private copy of the array elements and can
alter them without affecting each other.</p>
</div>




<a name="ch05-24-fm2xml" /><div class="sect2">
<h3 class="sect2">5.4.3. Equality and Datatype Conversion</h3>


<p>We've
<a name="INDEX-735" />seen
<a name="INDEX-736" />
<a name="INDEX-737" />the
<a name="INDEX-738" />results of equality tests when the
two operands have the same datatype, but what happens when we compare
operands of different datatypes, such as a string and a number, as
in:</p>


<blockquote><pre class="code">"asdf" == 13;</pre></blockquote>


<p>When the operands have disparate datatypes, the interpreter performs
a type conversion before performing the comparison. Here are the
rules the interpreter follows:</p>


<ol><li><p>If both operands are of the same type, compare them and return the
result. (If <tt class="literal">null</tt> is compared to
<tt class="literal">undefined</tt>, <tt class="literal">true</tt> is returned.)</p></li><li><p>If one operand is a number and the other operand is a string, convert
the string to a number and go back to step 1.</p></li><li><p>If one operand is a Boolean, convert the Boolean to a number
(<tt class="literal">true</tt> = 1, <tt class="literal">false</tt> = 0) and go
back to step 1.</p></li><li><p>If one operand is an object, invoke the <em class="filename">valueOf (
)</em> method of the object to convert it to a primitive type.
Return <tt class="literal">false</tt> if this is not possible. Otherwise,
go back to step 1.</p></li><li><p>Return <tt class="literal">false</tt> if the previous steps don't
obtain a valid result.</p></li></ol>
<p>Note that if one operand is an object and the other is a Boolean, the
Boolean will be converted to a number and compared to the primitive
value of the object. This means that <tt class="literal">someObject</tt>
<tt class="literal">==</tt> <tt class="literal">true</tt> is normally
<tt class="literal">false</tt>, even if <tt class="literal">someObject</tt>
exists, because <tt class="literal">someObject</tt> is converted to a
number or a string for the comparison while <tt class="literal">true</tt>
is converted to the number 1. To force <tt class="literal">someObject</tt>
to be treated as a Boolean in a comparison, we use the
<em class="filename">Boolean( )</em> function, like this:</p>


<blockquote><pre class="code">Boolean(someObject) == true    // Returns true if <em class="replaceable">someObject</em> exists, 
                               // or false if it doesn't</pre></blockquote>


<p>Conversions caused by equality operations favor the number type. If
you're wondering about the results of the various type
conversions just described, see <a href="ch03_04.htm">Section 3.4, "Datatype Conversion"</a>
in <a href="ch03_01.htm">Chapter 3, "Data and Datatypes"</a>.</p>


<p>Note that type conversions performed during a comparison do not alter
the original item's stored value or datatype. The results of
the temporary conversion are discarded once the expression has been
evaluated.</p>
</div>




<a name="ch05-25-fm2xml" /><div class="sect2">
<h3 class="sect2">5.4.4. The Inequality Operator</h3>


<p>The <a name="INDEX-739" /> <a name="INDEX-740" /> <a name="INDEX-741" />
<a name="INDEX-742" /><em class="emphasis">does-not-equal</em> or
<em class="emphasis">not-equal-to</em> operator (or
<em class="emphasis">inequality</em> operator) returns the opposite
Boolean result of the equality operator. It is often more readable to
say, "If <tt class="literal">x</tt> is <em class="emphasis">not</em> equal
to <tt class="literal">y</tt>, do this," than to say, "If
<tt class="literal">x</tt> is equal to <tt class="literal">y</tt>, don't do
anything, otherwise do this," as shown later in <a href="ch05_04.htm">Example 5-2</a>. The inequality operator takes the general
form:</p>


<blockquote><pre class="code"><em class="replaceable">operand1</em> != <em class="replaceable">operand2</em></pre></blockquote>


<p>For example:</p>


<blockquote><pre class="code">var a = 5;
var b = 6;
var c = 6;
a != b  // true
b != c  // false</pre></blockquote>


<p>The inequality operator follows the same type conversion rules as the
equality operator and always yields the opposite result, including
when using <tt class="literal">NaN</tt> as one operand:</p>


<blockquote><pre class="code">NaN != 7    // true
NaN != NaN  // true!</pre></blockquote>


<p>In some languages, including Flash4 ActionScript, the
<a name="INDEX-743" /> <a name="INDEX-744" />&lt;&gt; operator is used as the
inequality operator. See also the NOT operator (<tt class="literal">!</tt>)
discussed later.</p>
</div>




<a name="ch05-26-fm2xml" /><div class="sect2">
<h3 class="sect2">5.4.5. Common Uses of Equality Operations</h3>


<p>We'll frequently use equality operations to form Boolean
expressions within conditional statements or to assign a Boolean
value to a variable. <a href="ch05_04.htm">Example 5-2</a> shows both
situations and demonstrates the <tt class="literal">!=</tt> and
<tt class="literal">==</tt> operators in action.</p>


<a name="ch05-36268" /><div class="example">
<h4 class="objtitle">Example 5-2. Using the Equality and Inequality Operators </h4>

<blockquote><pre class="code">version = getVersion( );      // Retrieve Player version

// Check if the string "WIN" is in <em class="replaceable">version</em>. If so, 
// set <em class="replaceable">isWin</em> to true, otherwise set it to false
isWin = (version.indexOf("WIN") != -1);  

// If <em class="replaceable">isWin</em> is true...
if (isWin == true) {       
  // ...perform Windows-specific actions here
  trace("Please use IE4 or later on Windows.");
}</pre></blockquote>
</div>


<p>Experienced programmers will be quick to point out that we could have
reduced <em class="emphasis">if(isWin==true)</em> to
<em class="emphasis">if(isWin)</em>, because <tt class="literal">isWin</tt>
holds a Boolean value, which is what the <em class="filename">if</em>
statement expects. While that's quite right, it doesn't
make for a good example of the equality operator, now does it? Also,
new programmers usually find the more verbose form clearer. Both
approaches are perfectly acceptable. I'll cover this topic in
more detail <a name="INDEX-745" /> <a name="INDEX-746" />in <a href="ch07_01.htm">Chapter 7, "Conditionals"</a>.</p>
</div>


<hr width="684" align="left" />
<div class="navbar"><table width="684" border="0"><tr><td align="left" valign="top" width="228"><a href="ch05_03.htm"><img alt="Previous" border="0" src="../gifs/txtpreva.gif" /></a></td><td align="center" valign="top" width="228"><a href="index.htm"><img alt="Home" border="0" src="../gifs/txthome.gif" /></a></td><td align="right" valign="top" width="228"><a href="ch05_05.htm"><img alt="Next" border="0" src="../gifs/txtnexta.gif" /></a></td></tr><tr><td align="left" valign="top" width="228">5.3. Arithmetic Operators</td><td align="center" valign="top" width="228"><a href="index/index.htm"><img alt="Book Index" border="0" src="../gifs/index.gif" /></a></td><td align="right" valign="top" width="228">5.5. The Comparison Operators</td></tr></table></div>
<hr width="684" align="left" />

<img alt="Library Navigation Links" border="0" src="../gifs/navbar.gif" usemap="#library-map" />
<p><font size="-1"><a href="copyrght.htm">Copyright &copy; 2002</a> O'Reilly &amp; Associates. All rights reserved.</font></p>

<map name="library-map"><area href="../index.htm" coords="0,1,78,93" shape="rect" /><area href="../wdesign/index.htm" coords="80,2,155,96" shape="rect" /><area href="../xhtml/index.htm" coords="158,0,263,97" shape="rect" /><area href="../audio/index.htm" coords="265,1,335,97" shape="rect" /><area href="../css/index.htm" coords="338,1,434,93" shape="rect" /><area href="index.htm" coords="439,0,540,102" shape="rect" /><area href="../infoarch/index.htm" coords="544,0,685,102" shape="rect" /></map>

</body></html>
