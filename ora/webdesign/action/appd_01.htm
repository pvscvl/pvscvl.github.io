<html><head><title>Differences from ECMA-262 and JavaScript (ActionScript: The Definitive Guide)</title><link rel="stylesheet" type="text/css" href="../style/style1.css" />

<meta name="DC.Creator" content="Colin Moock" /><meta name="DC.Format" content="text/xml" scheme="MIME" /><meta name="DC.Language" content="en-US" /><meta name="DC.Publisher" content="O'Reilly &amp; Associates, Inc." /><meta name="DC.Source" scheme="ISBN" content="1565928520L" /><meta name="DC.Subject.Keyword" content="stuff" /><meta name="DC.Title" content="ActionScript: The Definitive Guide" /><meta name="DC.Type" content="Text.Monograph" />

</head><body bgcolor="#ffffff">

<img alt="Book Home" border="0" src="gifs/smbanner.gif" usemap="#banner-map" /><map name="banner-map"><area shape="rect" coords="1,-2,616,66" href="index.htm" alt="ActionScript: The Definitive Guide" /><area shape="rect" coords="629,-11,726,25" href="jobjects/fsearch.htm" alt="Search this book" /></map>

<div class="navbar"><table width="684" border="0"><tr><td align="left" valign="top" width="228"><a href="appc_02.htm"><img alt="Previous" border="0" src="../gifs/txtpreva.gif" /></a></td><td align="center" valign="top" width="228"><a href="index.htm">ActionScript: The Definitive Guide</a></td><td align="right" valign="top" width="228"><a href="index/index.htm"><img alt="Next" border="0" src="../gifs/txtnexta.gif" /></a></td></tr></table></div>
<hr width="684" align="left" />



<h1 class="chapter">Appendix D. Differences from ECMA-262 and JavaScript</h1>


<p>Naturally <a name="INDEX-3823" />
<a name="INDEX-3824" />
<a name="INDEX-3825" />this book has
focused on the intricacies of ActionScript, but if you own
O'Reilly's excellent <em class="emphasis">JavaScript: The Definitive
Guide</em>, you'll notice that the reference section of
the two books share many similarities.</p>


<p>Although ActionScript, like JavaScript, is based on the ECMA-262
standard, certain differences were necessitated by the constraints of
Player size and backward compatibility. If porting code from
JavaScript, Jscript, or another ECMA-262-based language, you'll
find <a href="appd_01.htm">Table D-1</a> valuable. It summarizes the
intentional differences between ECMA-262, JavaScript, and Flash 5
ActionScript. Likewise, if porting ActionScript to another language,
you'll be better able to avoid the pitfalls caused by
ActionScript's deviation from the ECMA-262 standard.</p>


<p><a href="appd_01.htm">Table D-1</a> reflects the
<em class="emphasis">intentional</em> differences between Flash 5
ActionScript and the ECMA-262 standard. It does not reflect any bugs
that may exist in its attempted implementation of the standard.</p>


<a name="appd-16399" /><h4 class="objtitle">Table D-1. Differences Between ECMA-262, JavaScript, and ActionScript </h4><table border="1">



<tr>
<th>
<p>Topic</p></th>
<th>
<p>Description</p></th>
</tr>




<tr>
<td>
<p>String-to-Boolean conversion</p></td>
<td>
<p>In ECMA-262, all nonempty strings convert to <tt class="literal">true</tt>.
In Flash 5, only the strings that can be converted to a valid nonzero
number convert to <tt class="literal">true</tt>.</p></td>
</tr>

<tr>
<td>
<p>Case sensitivity</p></td>
<td>
<p>The ECMA-262 specification demands complete case sensitivity. In
ActionScript, keywords are case-sensitive but identifiers are not.
See <a href="ch14_01.htm">Chapter 14, "Lexical Structure"</a>, especially <a href="ch14_04.htm">Table 14-1</a>.</p></td>
</tr>

<tr>
<td>
<p>Function scope</p></td>
<td>
<p>When a function from one timeline is assigned to a variable in a
different movie clip's timeline, the assigned function's
scope chain changes to that variable's timeline. In ECMA-262,
it's impossible to modify a function's scope chain
through assignment; scope is determined permanently by the location
of the function declaration statement.</p></td>
</tr>

<tr>
<td>
<p>Regular expressions</p></td>
<td>
<p>ActionScript does not support regular expressions.</p></td>
</tr>

<tr>
<td>
<p>Event handler names</p></td>
<td>
<p>Only object-based event handlers get their own named function in
ActionScript (e.g., <em class="filename">XML</em>'s
<em class="filename">onLoad( )</em>). Movie clip event handlers are
defined using <em class="filename">onClipEvent
(</em><em class="replaceable">eventName</em><em class="filename">)</em>,
and button event handlers are defined using <em class="filename">on
(</em><em class="replaceable">eventName</em><em class="filename">)</em>.
See "Event Handler Syntax" in <a href="ch10_01.htm">Chapter 10, "Events and Event Handlers"</a>.</p></td>
</tr>

<tr>
<td>
<p>Global variables</p></td>
<td>
<p>ActionScript does not support true document-wide global variables.
Global variables can be simulated by attaching properties to
<tt class="literal">Object.prototype</tt>, as described under <a href="ch12_05.htm">Section 12.5.4.4, "The end of the inheritance chain"</a> in <a href="ch12_01.htm">Chapter 12, "Objects and Classes"</a>.</p></td>
</tr>

<tr>
<td>
<p>The <em class="filename">eval( )</em> function</p></td>
<td>
<p>ActionScript's <em class="filename">eval( )</em> function supports a
small subset of ECMA-262's intended functionality; it works
only when its argument is an identifier and is used only to
dynamically generate references to identifiers.</p></td>
</tr>

<tr>
<td>
<p><tt class="literal">undefined</tt> datatype conversion</p></td>
<td>
<p>In ActionScript, the special <tt class="literal">undefined</tt> value
converts to the empty string (<tt class="literal">""</tt>) when used in a
string context and converts to the number
when used in a numeric context. In ECMA-262,
<tt class="literal">undefined</tt> converts to the string
"undefined" in string contexts and to the numeric value
<tt class="literal">NaN</tt> in numeric contexts.</p></td>
</tr>

<tr>
<td>
<p>The <em class="filename">Function</em> constructor</p></td>
<td>
<p>ActionScript does not support the <em class="filename">Function</em>
constructor, which is used in JavaScript to create functions with the
syntax <tt class="literal">new Function ( );</tt>.</p></td>
</tr>

<tr>
<td>
<p><em class="filename">Date</em> object creation</p></td>
<td>
<p>ActionScript will not accept (i.e., will not parse) a human-readable
date string such as "January 9, 2001" when creating a new
<em class="filename">Date</em> object.</p></td>
</tr>

<tr>
<td>
<p><em class="filename">switch</em> statement</p></td>
<td>
<p>ActionScript does not support the
<em class="filename">switch</em>/<em class="filename">case</em>/<em class="filename">default</em>
statements (used to phrase complex conditionals). See <a href="ch07_04.htm">Section 7.4, "Simulating the switch Statement"</a> in <a href="ch07_01.htm">Chapter 7, "Conditionals"</a>.</p></td>
</tr>

<tr>
<td>
<p>Language support</p></td>
<td>
<p>ECMA-262 requires support of the Unicode character-encoding standard,
which ActionScript does not support. ActionScript uses the Latin 1
and Shift-JIS character sets and implements a subset of Unicode-style
functions and conventions (such as <tt class="literal">\u</tt> escape
sequences).</p></td>
</tr>

<tr>
<td>
<p>Object model</p></td>
<td>
<p>Naturally, JavaScript includes built-in classes and objects that
relate to web browsers, whereas Flash includes those that relate to
Flash movies. For JavaScript programmers who are used to working with
DHTML, it may be helpful to think of the main movie of a Flash
document as being analogous to an HTML document object and movie
clips as being analogous to layer objects.</p></td>
</tr>

<tr>
<td>
<p>Timed code execution</p></td>
<td>
<p><a name="INDEX-3826" />
<a name="INDEX-3827" />
<a name="INDEX-3828" />The
<em class="filename">setTimeout( )</em> and <em class="filename">setInterval(
)</em> methods of the JavaScript window object are not
available in ActionScript but can be simulated with timeline and clip
event loops as discussed in <a href="ch08_01.htm">Chapter 8, "Loop Statements"</a>.</p></td>
</tr>

<tr>
<td>
<p><em class="filename">Object</em> constructor</p></td>
<td>
<p>In Flash 5, the ActionScript constructor for the
<em class="filename">Object</em> class does not accept any parameters. In
ECMA-262, <em class="emphasis">Object</em> accepts a
<em class="replaceable">value</em> parameter, which may be a Boolean,
string, or number primitive.</p></td>
</tr>


</table>





<hr width="684" align="left" />
<div class="navbar"><table width="684" border="0"><tr><td align="left" valign="top" width="228"><a href="appc_02.htm"><img alt="Previous" border="0" src="../gifs/txtpreva.gif" /></a></td><td align="center" valign="top" width="228"><a href="index.htm"><img alt="Home" border="0" src="../gifs/txthome.gif" /></a></td><td align="right" valign="top" width="228"><a href="index/index.htm"><img alt="Next" border="0" src="../gifs/txtnexta.gif" /></a></td></tr><tr><td align="left" valign="top" width="228">C.2. Controlling Movie Clips</td><td align="center" valign="top" width="228"><a href="index/index.htm"><img alt="Book Index" border="0" src="../gifs/index.gif" /></a></td><td align="right" valign="top" width="228">Index</td></tr></table></div>
<hr width="684" align="left" />

<img alt="Library Navigation Links" border="0" src="../gifs/navbar.gif" usemap="#library-map" />
<p><font size="-1"><a href="copyrght.htm">Copyright &copy; 2002</a> O'Reilly &amp; Associates. All rights reserved.</font></p>

<map name="library-map"><area href="../index.htm" coords="0,1,78,93" shape="rect" /><area href="../wdesign/index.htm" coords="80,2,155,96" shape="rect" /><area href="../xhtml/index.htm" coords="158,0,263,97" shape="rect" /><area href="../audio/index.htm" coords="265,1,335,97" shape="rect" /><area href="../css/index.htm" coords="338,1,434,93" shape="rect" /><area href="index.htm" coords="439,0,540,102" shape="rect" /><area href="../infoarch/index.htm" coords="544,0,685,102" shape="rect" /></map>

</body></html>
