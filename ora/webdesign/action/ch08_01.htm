<html><head><title>Loop Statements (ActionScript: The Definitive Guide)</title><link rel="stylesheet" type="text/css" href="../style/style1.css" />

<meta name="DC.Creator" content="Colin Moock" /><meta name="DC.Format" content="text/xml" scheme="MIME" /><meta name="DC.Language" content="en-US" /><meta name="DC.Publisher" content="O'Reilly &amp; Associates, Inc." /><meta name="DC.Source" scheme="ISBN" content="1565928520L" /><meta name="DC.Subject.Keyword" content="stuff" /><meta name="DC.Title" content="ActionScript: The Definitive Guide" /><meta name="DC.Type" content="Text.Monograph" />

</head><body bgcolor="#ffffff">

<img alt="Book Home" border="0" src="gifs/smbanner.gif" usemap="#banner-map" /><map name="banner-map"><area shape="rect" coords="1,-2,616,66" href="index.htm" alt="ActionScript: The Definitive Guide" /><area shape="rect" coords="629,-11,726,25" href="jobjects/fsearch.htm" alt="Search this book" /></map>

<div class="navbar"><table width="684" border="0"><tr><td align="left" valign="top" width="228"><a href="ch07_06.htm"><img alt="Previous" border="0" src="../gifs/txtpreva.gif" /></a></td><td align="center" valign="top" width="228"><a href="index.htm">ActionScript: The Definitive Guide</a></td><td align="right" valign="top" width="228"><a href="ch08_02.htm"><img alt="Next" border="0" src="../gifs/txtnexta.gif" /></a></td></tr></table></div>
<hr width="684" align="left" />



<h1 class="chapter">Chapter 8. Loop Statements</h1>
<div class="htmltoc"><h4 class="tochead">Contents:</h4><p>
<a href="ch08_01.htm">The while Loop</a><br />
<a href="ch08_02.htm">Loop Terminology</a><br />
<a href="ch08_03.htm">The do-while Loop</a><br />
<a href="ch08_04.htm">The for Loop</a><br />
<a href="ch08_05.htm">The for-in Loop</a><br />
<a href="ch08_06.htm">Stopping a Loop Prematurely</a><br />
<a href="ch08_07.htm">Timeline and Clip Event Loops</a><br />
<a href="ch08_08.htm">Onward!</a><br /></p></div>


<p>In <a name="INDEX-893" />the
previous chapter, we learned that a <em class="emphasis">conditional</em>
causes a statement block to be executed once if the value of its test
expression is <tt class="literal">true</tt>. A <em class="emphasis">loop</em>,
on the other hand, causes a statement block to be executed
repeatedly, for as long as its test expression remains
<tt class="literal">true</tt>.</p>


<p>Loops come in a variety of tasty flavors: <em class="filename">while</em>,
<em class="filename">do-while</em>, <em class="filename">for</em>, and
<em class="filename">for-in</em>. The first three types have very similar
effects, but with varying syntax. The last type of loop,
<em class="filename">for-in</em>, is a specialized kind of loop used with
objects. We'll start our exploration of loops with the
<em class="filename">while</em> statement, the easiest kind of loop to
understand.</p>


<div class="sect1"><a name="ch08-2-fm2xml" />
<h2 class="sect1">8.1. The while Loop</h2>


<p>Structurally, a <em class="filename">while</em><a name="INDEX-894" /> statement is constructed much like an
<em class="filename">if</em> statement: a main statement encloses a block
of <a name="INDEX-895" />
<a name="INDEX-896" />substatements that are executed only when a
given condition is <tt class="literal">true</tt>:</p>


<blockquote><pre class="code">while (<em class="replaceable">condition</em>) {
  <em class="replaceable">substatements</em>
}</pre></blockquote>


<p>If the condition is <tt class="literal">true</tt>,
<em class="replaceable">substatements</em> are executed. But unlike the
<em class="filename">if</em> statement, when the last substatement is
finished, execution begins anew at the beginning of the
<em class="filename">while</em> statement (that is the interpreter
"loops" back to the beginning of the
<em class="filename">while</em> statement). The second pass through the
<em class="filename">while</em> statement works just like the first: the
condition is evaluated, and if it is still <tt class="literal">true</tt>,
<em class="replaceable">substatements</em> are executed again. This
process continues until <em class="replaceable">condition</em> becomes
<tt class="literal">false</tt>, at which point execution continues with any
statements that follow the <em class="filename">while</em> statement in
the script.</p>


<p>Here's an example of a very simple loop:</p>


<blockquote><pre class="code">var i = 3;
while (i &lt; 5) {
  trace("x is less than 5");
}</pre></blockquote>


<p>The example reliably represents the correct syntax of a
<em class="filename">while</em> loop but is most likely in error. To see
why, let's follow along with the interpreter as it executes the
example.</p>


<p>We
<a name="INDEX-897" />
<a name="INDEX-898" />start
with the statement before the <em class="filename">while</em> statement,
<em class="emphasis">var i = 3</em>, which sets the variable
<tt class="literal">i</tt> to 3. Because the variable <tt class="literal">i</tt>
is used in the test expression of the loop, this step is often called
the loop <em class="filename">initialization</em>. Next, we begin
executing the <em class="filename">while</em> statement by resolving the
test expression: <em class="emphasis">i &lt; 5</em>. Because
<tt class="literal">i</tt> is 3, and 3 is less than 5, the value of the
test expression is <tt class="literal">true</tt> so we execute the
<a name="INDEX-899" /><em class="filename">trace( )</em>
statement in the loop.</p>


<p>With that done, it's time to restart the loop. Once again, we
check the value of the test expression. The value of the variable
<tt class="literal">i</tt> has not changed, so the test expression is still
<tt class="literal">true</tt> and we execute the <em class="filename">trace(
)</em> statement again. At this point, we're done
executing the loop body, so it's time to restart the loop.
Guess what? The variable <tt class="literal">i</tt> still has not changed,
so the test expression is still <tt class="literal">true</tt> and we must
execute the <em class="filename">trace( )</em> statement again, and again,
and again, forever. Because the test expression always returns
<tt class="literal">true</tt>, there's no way to exit the
loop -- we're trapped forever in an
<a name="INDEX-900" />
<a name="INDEX-901" /><em class="filename">infinite
loop</em>, unable to execute any other statements that may come
after the <em class="filename">while</em> statement. In ActionScript, an
infinite loop causes an error, as we'll see later.</p>


<p>Our loop is infinite because it lacks an <em class="emphasis">update statement
</em><a name="INDEX-902" />
<a name="INDEX-903" />that changes the value of the variable used
in the test expression. An update statement typically causes the test
expression to eventually yield <tt class="literal">false</tt>, which
terminates the loop. Let's fix our infinite loop by adding an
update statement:</p>


<blockquote><pre class="code">var i = 3;
while (i &lt; 5) {
  trace("x is less than 5");
  i++;
}</pre></blockquote>


<p>The update statement, <em class="emphasis">i++</em>, comes at the end of
the loop body. When the interpreter goes through our loop, it
executes the <em class="filename">trace( )</em> statement as before, but
it also executes the statement <em class="emphasis">i++</em>, which adds
one to the variable <tt class="literal">i</tt>. With each iteration of the
loop, the value of <tt class="literal">i</tt> increases. After the second
iteration, <tt class="literal">i</tt>'s value is 5, so the test
expression, <em class="emphasis">i &lt; 5</em>, becomes
<tt class="literal">false</tt>. The loop, therefore, safely ends.</p>


<p>Our loop's update statement performs a fundamental loop
activity: it counts. The variable <tt class="literal">i</tt> (called a
<em class="emphasis">counter</em>) runs through a predictable
numeric sequence -- perfect for methodical tasks such as
duplicating movie clips or accessing the elements of an array. Here
we duplicate the <tt class="literal">square</tt> movie clip five times
without using a loop:</p>
<a name="INDEX-904" /> <a name="INDEX-905" /> <a name="INDEX-906" /> <a name="INDEX-907" /> <a name="INDEX-908" /> <a name="INDEX-909" />

<blockquote><pre class="code">// Name each new clip sequentially and place it on its own level
duplicateMovieClip("square", "square1", 1);
duplicateMovieClip("square", "square2", 2);
duplicateMovieClip("square", "square3", 3);
duplicateMovieClip("square", "square4", 4);
duplicateMovieClip("square", "square5", 5);</pre></blockquote>


<p>And here we do it with a loop:</p>


<blockquote><pre class="code">var i = 1;
while (i &lt;= 5) {
  duplicateMovieClip("square", "square" + i, i);
  i++;
}</pre></blockquote>


<p>Imagine the difference if we were duplicating
<tt class="literal">square</tt> 100 times!</p>


<p>Loops are marvelously useful for manipulating data, particularly data
stored in <a name="INDEX-910" />arrays. <a href="ch08_01.htm">Example 8-1</a> shows a loop that displays all the elements of
an array to the Output window. Note that the first element is number
0, not number 1.</p>


<a name="ch08-36401" /><div class="example">
<h4 class="objtitle">Example 8-1. Displaying an Array with a while Loop </h4>

<blockquote><pre class="code">var people = ["John", "Joyce", "Margaret", "Michael"];  // Create an array
var i = 0;
while (i &lt; people.length) {
  trace("people element " + i + " is " + people[i]);
  i++;
}</pre></blockquote>
</div>


<p>The result in the Output window is:</p>


<blockquote><pre class="code">people element 0 is John
people element 1 is Joyce
people element 2 is Margaret
people element 3 is Michael</pre></blockquote>


<p>Notice that the variable <tt class="literal">i</tt> is used both in the
test expression and as the array index number, as is typical. Here we
use <tt class="literal">i</tt> again as an argument for the
<em class="filename">charAt( )</em> function:</p>


<blockquote><pre class="code">var city = "Toronto";
trace("The letters in the variable 'city' are ");
var i = 0;
while (i &lt; city.length) {
  trace(city.charAt(i));
  i++;
}</pre></blockquote>


<p>The Output window shows:</p>


<blockquote><pre class="code">The letters in the variable 'city' are:
T
o
r
o
n
t
o</pre></blockquote>


<p>Finally, instead of dissecting data, we use a loop to construct a
sentence from a series of words stored in an array:</p>


<blockquote><pre class="code">var words = ["Toronto", "is", "not", "the", "capital", "of", "Canada"];
var sentence;
var i = 0;
while (i &lt; words.length) {
  sentence += words[i];       // Add the current word to the sentence.

  // If it's not the last word...
  if (i &lt; words.length - 1) {
    sentence += " ";          // ...tack on a space.
  } else {
    sentence += ".";          // ...otherwise, end with a period.
  }
  i++;
}
trace(sentence);              // Displays: "Toronto is not the capital of Canada."</pre></blockquote>


<p>Nearly all loops involve some kind of counter (also sometimes called
an <em class="firstterm">iterator</em> or <em class="firstterm">index
variable</em>). Counters let us cycle sequentially through
data. This is particularly convenient when we determine the
counter's maximum limit using the <tt class="literal">length</tt>
property of the array or string we want to manipulate, as we did in
the preceding example.</p>


<p>It's also possible to create a loop whose end point
doesn't depend on a counter. As long as the test expression of
the loop eventually becomes <tt class="literal">false</tt>, the loop will
end. Here, for example, we examine the level stack of the Flash
Player to determine the first vacant level:</p>


<blockquote><pre class="code">var i = 0;
while (typeof eval("_level" + i) == "movieclip") {
  i++;
}
trace("The first vacant level is " + i);

// Now load a movie into the vacant level, knowing it's free
<a name="INDEX-911" />loadMovie("myMovie.swf", i);</pre></blockquote>
</div>








































































<hr width="684" align="left" />
<div class="navbar"><table width="684" border="0"><tr><td align="left" valign="top" width="228"><a href="ch07_06.htm"><img alt="Previous" border="0" src="../gifs/txtpreva.gif" /></a></td><td align="center" valign="top" width="228"><a href="index.htm"><img alt="Home" border="0" src="../gifs/txthome.gif" /></a></td><td align="right" valign="top" width="228"><a href="ch08_02.htm"><img alt="Next" border="0" src="../gifs/txtnexta.gif" /></a></td></tr><tr><td align="left" valign="top" width="228">7.6. Onward!</td><td align="center" valign="top" width="228"><a href="index/index.htm"><img alt="Book Index" border="0" src="../gifs/index.gif" /></a></td><td align="right" valign="top" width="228">8.2. Loop Terminology</td></tr></table></div>
<hr width="684" align="left" />

<img alt="Library Navigation Links" border="0" src="../gifs/navbar.gif" usemap="#library-map" />
<p><font size="-1"><a href="copyrght.htm">Copyright &copy; 2002</a> O'Reilly &amp; Associates. All rights reserved.</font></p>

<map name="library-map"><area href="../index.htm" coords="0,1,78,93" shape="rect" /><area href="../wdesign/index.htm" coords="80,2,155,96" shape="rect" /><area href="../xhtml/index.htm" coords="158,0,263,97" shape="rect" /><area href="../audio/index.htm" coords="265,1,335,97" shape="rect" /><area href="../css/index.htm" coords="338,1,434,93" shape="rect" /><area href="index.htm" coords="439,0,540,102" shape="rect" /><area href="../infoarch/index.htm" coords="544,0,685,102" shape="rect" /></map>

</body></html>