<html><head><title>Building a Multiple-Choice Quiz (ActionScript: The Definitive Guide)</title><link rel="stylesheet" type="text/css" href="../style/style1.css" />

<meta name="DC.Creator" content="Colin Moock" /><meta name="DC.Format" content="text/xml" scheme="MIME" /><meta name="DC.Language" content="en-US" /><meta name="DC.Publisher" content="O'Reilly &amp; Associates, Inc." /><meta name="DC.Source" scheme="ISBN" content="1565928520L" /><meta name="DC.Subject.Keyword" content="stuff" /><meta name="DC.Title" content="ActionScript: The Definitive Guide" /><meta name="DC.Type" content="Text.Monograph" />

</head><body bgcolor="#ffffff">

<img alt="Book Home" border="0" src="gifs/smbanner.gif" usemap="#banner-map" /><map name="banner-map"><area shape="rect" coords="1,-2,616,66" href="index.htm" alt="ActionScript: The Definitive Guide" /><area shape="rect" coords="629,-11,726,25" href="jobjects/fsearch.htm" alt="Search this book" /></map>

<div class="navbar"><table width="684" border="0"><tr><td align="left" valign="top" width="228"><a href="ch01_02.htm"><img alt="Previous" border="0" src="../gifs/txtpreva.gif" /></a></td><td align="center" valign="top" width="228"><a href="index.htm">ActionScript: The Definitive Guide</a></td><td align="right" valign="top" width="228"><a href="ch01_04.htm"><img alt="Next" border="0" src="../gifs/txtnexta.gif" /></a></td></tr></table></div>
<hr width="684" align="left" />


<h2 class="sect1">1.3. Building a Multiple-Choice Quiz</h2>


<p>Now that we've explored the basic principles of ActionScript,
let's apply those principles in the context of a real
<a name="INDEX-110" />Flash movie.
We'll start our applied study of Flash programming by creating
a multiple-choice quiz using very simple programming techniques, most
of which you've already learned. We'll revisit our quiz
in later chapters to see how it can be improved after learning more
advanced programming concepts. We'll eventually make the code
more elegant so that it's easier to extend and maintain, and
we'll add more features to our quiz so that it can easily
handle any number of questions.</p>


<p>The finished <em class="emphasis">.fla</em> file for this quiz may be
found in the online Code Depot. This is a lesson in Flash
programming, not Flash production. It is assumed that you are already
comfortable creating and using buttons, layers, frames, keyframes,
and the Text tool. The quiz shows real-world applications of the
following aspects of ActionScript programming:</p>


<ul><li><p>Variables</p></li><li><p>Controlling the playhead of a movie with functions</p></li><li><p>Button event handlers</p></li><li><p>Simple conditionals</p></li><li><p>Text field variables for on-screen display of information</p></li></ul>
<a name="ch01-24-fm2xml" /><div class="sect2">
<h3 class="sect2">1.3.1. Quiz Overview</h3>


<p>Our quiz, part of which is shown in <a href="ch01_03.htm">Figure 1-4</a>,
will have only two questions. Each question comes with three
multiple-choice answers. Users submit their answers by clicking the
button that corresponds to their desired selections. The selections
are recorded in a variable so that they may be used to grade the
user's score. When all the questions have been answered, the
number of correct answers is tallied and the user's score is
displayed.</p>


<a name="ch01-72865" /><div class="figure"><img alt="Figure 1-4" src="figs/act.0104.gif" /></div><h4 class="objtitle">Figure 1-4. A Flash quiz</h4>
</div>




<a name="ch01-25-fm2xml" /><div class="sect2">
<h3 class="sect2">1.3.2. Building the Layer Structure</h3>


<p>When building <a name="INDEX-111" /> <a name="INDEX-112" />Flash movies, it's important
to organize your content into manageable divisions by keeping
different content elements on individual layers. Layering content is
a good production technique in general, but it is essential in Flash
programming. In our quiz, and in the vast majority of our scripted
movies, we'll keep all our
<a name="INDEX-113" />timeline scripts on a single isolated
layer, called <em class="filename">scripts</em>. I keep the
<em class="filename">scripts</em> layer as the first one in my layer stack
so that it's easy to find.</p>


<p>We'll also keep all our
<a name="INDEX-114" />frame labels on a separate layer, called
(surprise, surprise)
<em class="filename">labels</em><a name="INDEX-115" />. The
<em class="filename">labels</em> layer should live beneath the
<em class="filename">scripts</em> layer on all your timelines. In addition
to these two standard layers (<em class="filename">scripts</em> and
<em class="filename">labels</em>), our quiz movie has a series of content
layers on which we'll isolate our various content assets.</p>


<p>Start building your quiz by creating and naming the following layers
and arranging them in the order that they appear here:</p>


<blockquote class="simplelist">

<p><em class="emphasis">scripts</em></p>

<p><em class="emphasis">labels</em></p>

<p><em class="emphasis">quiz end</em></p>

<p><em class="emphasis">question 2</em></p>

<p><em class="emphasis">question 1</em></p>

<p><em class="emphasis">housing</em></p>

</blockquote>


<p>Now add 30 frames to each of your layers. Your timeline should look
like the one in <a href="ch01_03.htm">Figure 1-5</a>.</p>


<a name="ch01-33244" /><div class="figure"><img alt="Figure 1-5" src="figs/act.0105.gif" /></div><h4 class="objtitle">Figure 1-5. Quiz timeline initial setup</h4>
</div>




<a name="ch01-26-fm2xml" /><div class="sect2">
<h3 class="sect2">1.3.3. Creating the Interface and Questions</h3>


<p>Before <a name="INDEX-116" />we get into the scripts that run
the quiz, we need to set up the questions and the interface that will
let the user proceed through the quiz.</p>


<p>Here are the steps you should follow:</p>


<ol><li><p>With frame 1 of the <em class="emphasis">housing</em> layer selected, use
the Text tool to type your quiz title directly on the Stage.</p></li><li><p>At frame 1 of the <em class="emphasis">question 1</em> layer, add the
question number "1" and the text for Question 1,
"When were movie clips introduced into Flash?" Leave room
for the answer text and buttons below your question.</p></li><li><p>Create a simple button that looks like a checkbox or radio button and
measures no higher than a line of text (see <a href="ch01_03.htm">Figure 1-6</a>).</p></li><li><p>Below your question text (still on the <em class="emphasis">question
1</em> layer), add the text of your three multiple-choice
answers: "Version 1," "Version 2," and
"Version 3," each on its own line.</p></li><li><p>Next to each of your three answers, place an instance of your
checkbox button.</p></li><li><p>We'll use Question 1 as a template for Question 2. Select the
first frame of the <em class="emphasis">question 1</em> layer and choose
Edit <img align="absmiddle" src="figs/U2192.gif" /> Copy Frames.</p></li><li><p>Select frame 10 of the <em class="emphasis">question 2</em> layer and
choose Edit <img align="absmiddle" src="figs/U2192.gif" /> Paste Frames. A duplicate of your first question
appears on the <em class="emphasis">question 2</em> layer at frame 10.</p></li><li><p>While still in frame 10 of the <em class="emphasis">question 2</em> layer,
change the question number from "1" to "2"
and change the text of the question to, "When was MP3 audio
support added to Flash?" Change the multiple-choice answers to
"Version 3," "Version 4," and "Version
5."</p></li><li><p>Finally, to prevent Question 1 from appearing underneath Question 2,
add a blank keyframe at frame 10 of the <em class="emphasis">question
1</em> layer.</p></li></ol>
<p><a href="ch01_03.htm">Figure 1-6</a> shows the Flash movie after you've
added the first question to the quiz. <a href="ch01_03.htm">Figure 1-7</a>
shows how your timeline will look after you've added the two
questions to the quiz.</p>


<a name="ch01-67055" /><div class="figure"><img alt="Figure 1-6" src="figs/act.0106.gif" /></div><h4 class="objtitle">Figure 1-6. Quiz title and Question 1</h4>

<a name="ch01-94452" /><div class="figure"><img alt="Figure 1-7" src="figs/act.0107.gif" /></div><h4 class="objtitle">Figure 1-7. Quiz timeline with two questions</h4>
</div>




<a name="ch01-27-fm2xml" /><div class="sect2">
<h3 class="sect2">1.3.4. Initializing the Quiz</h3>


<p>Our first order of business in our quiz script (and in most scripts)
is to create the main timeline variables we'll use throughout
our movie. In our quiz we do this on the first <a name="INDEX-117" /> <a name="INDEX-118" /> <a name="INDEX-119" /> <a name="INDEX-120" />frame of the movie, but in
other movies we'll normally do it after preloading part or all
of the movie. Either way, we want to initialize our <a name="INDEX-121" />
<a name="INDEX-122" />variables before any other scripting
occurs. Once our variables are defined, we invoke the <em class="filename">stop(
)</em><a name="INDEX-123" /> function to keep the user paused on
the first frame (where the quiz starts).</p>


<p>For more complex movies, we may also set the initial conditions by
calling <a name="INDEX-124" />functions
and assigning
<a name="INDEX-125" /> <a name="INDEX-126" />variable values in preparation for the
rest of the movie. This step is known as
<em class="emphasis">initialization</em>. Functions that start processes
in motion or define the initial conditions under which a system
operates are frequently named <em class="emphasis">init</em>.</p>


<p>Our quiz <em class="emphasis">init</em> code, shown in <a href="ch01_03.htm">Example 1-1</a>, is attached to frame 1 of the
<em class="filename">scripts</em> layer of our movie.</p>


<a name="ch01-59360" /><div class="example">
<h4 class="objtitle">Example 1-1. Init Code for Quiz </h4>

<blockquote><pre class="code">// Init main timeline variables
var q1answer;          // User's answer for question 1
var q2answer;          // User's answer for question 2
var totalCorrect = 0;  // Counts number of correct answers
var displayTotal;      // Text field for displaying user's score

// Stop the movie at the first question
stop( );</pre></blockquote>
</div>


<p>Line 1 of our <em class="emphasis">init</em> sequence is a <em class="emphasis">code
comment</em><a name="INDEX-127" /> <a name="INDEX-128" />. Code comments are notes that you add in
your code to explain what's going on. A single-line comment
starts with two forward slashes and a space, which is then followed
by a line of text:</p>


<blockquote><pre class="code">// This is a comment</pre></blockquote>


<p>Notice that comments can be placed on the same line as your code,
like this:</p>


<blockquote><pre class="code">x = 5; // This is also a comment</pre></blockquote>


<p>Line 2 of <a href="ch01_03.htm">Example 1-1</a> creates a variable named
<tt class="literal">q1answer</tt>. Recall that to create a variable we use
the <em class="filename">var</em> keyword followed by a variable name, as
in:</p>


<blockquote><pre class="code">var favoriteColor;</pre></blockquote>


<p>So, the second through fifth lines of our code declare the variables
we'll need, complete with comments explaining their purpose:</p>


<ul><li><p><tt class="literal">q1answer</tt> and <tt class="literal">q2answer</tt> will
contain the value of the user's answer (1, 2, or 3, indicating
which of the three multiple-choice options was selected for each
question). We'll use these values to check whether the user
answered the questions correctly.</p></li><li><p><tt class="literal">totalCorrect</tt> will be used at the end of the quiz
to tally the number of questions that the user answered correctly.</p></li><li><p><tt class="literal">displayTotal</tt> is the name of the text field that
we'll use to show the value of <tt class="literal">totalCorrect</tt>
on screen.</p></li></ul>
<p>Take a closer look at Line 4 of <a href="ch01_03.htm">Example 1-1</a>:</p>


<blockquote><pre class="code">var totalCorrect = 0;  // Counts number of correct answers</pre></blockquote>


<p>Line 4 performs double duty; it first declares the variable
<tt class="literal">totalCorrect</tt> and then assigns the value
to that variable using the assignment operator, <tt class="literal">=</tt>.
We want <tt class="literal">totalCorrect</tt> to default to
in case the user hasn't answered any of the questions
correctly. The other variables don't need default values
because they are all set explicitly during the quiz.</p>


<p>After our variables have been defined, we call the <em class="filename">stop(
)</em> function, which halts the playback of the movie on frame
1, where the quiz begins:</p>


<blockquote><pre class="code">// Stop the movie at the first question
stop( );</pre></blockquote>


<p>The <em class="filename">stop( )</em> function has the exact same effect
as any <em class="filename">stop</em> Action you may have used in Flash 4
or <a name="INDEX-129" />earlier (it pauses the playhead in
the current frame).</p>




<a name="ch01-29-fm2xml" /><blockquote><h4>WARNING</h4>
<p>Observe, again, the use of the comment before the <em class="filename">stop(
)</em> function call. That comment explains the intended effect
of the code that follows. Comments are optional, but they help
clarify our code if we leave it for a while and need a refresher when
we return or if we pass our code to another developer. Comments also
make code easy to scan, which is important during debugging.</p>

</blockquote>

<p>Now that you know what our <em class="emphasis">init</em> code does,
let's add it to our quiz movie:</p>


<ol><li><p>Select Frame 1 of the <em class="filename">scripts</em> layer.</p></li><li><p>Choose Window <img align="absmiddle" src="figs/U2192.gif" /> Actions. The
<a name="INDEX-130" />Frame Actions panel appears.</p></li><li><p>Make sure you're using Expert Mode, which can be set as a
permanent preference under Edit <img align="absmiddle" src="figs/U2192.gif" /> Preferences.</p></li><li><p>Into the right side of the Frame Actions panel, type the
<em class="filename">init</em> code as <a name="INDEX-131" />shown <a name="INDEX-132" /> <a name="INDEX-133" />earlier <a name="INDEX-134" /> <a name="INDEX-135" /> <a name="INDEX-136" /> <a name="INDEX-137" />in <a href="ch01_03.htm">Example 1-1</a>.</p></li></ol>
<a name="ch01-30-fm2xml" />

<blockquote>
<table border="1" cellpadding="6"><tr><td>
<h4 class="objtitle">Variable Naming Styles</h4>


<p>By
<a name="INDEX-138" />
<a name="INDEX-139" />now
you've seen quite a few variable names, and you may be
wondering about the <a name="INDEX-140" />capitalization. If you've never
programmed before, a capital letter in the middle of a word, as in
<tt class="literal">firstName</tt>, or <tt class="literal">totalCorrect</tt>, may
seem odd. Capitalizing the second word (and any following words) of a
variable name visually demarcates the words within that name. We use
this technique because spaces and dashes aren't allowed in a
variable name. But don't capitalize the first letter of a
variable name -- an initial capital letter is conventionally used
to name object classes, not variables.</p>


<p>If you use underscores instead of capital letters to separate words
in variables, as in <tt class="literal">first_name</tt> and
<tt class="literal">total_correct</tt>, be consistent. Don't use
<tt class="literal">firstName</tt> for some variables and
<tt class="literal">second_name</tt> for others. Use one of these styles so
that other programmers will find your code understandable. Variable
names in some languages are case-sensitive, meaning that
<tt class="literal">firstName</tt> and <tt class="literal">firstname</tt> would
be considered two different variables. ActionScript, however, treats
them as the same thing. But it's bad form to use two different
cases to refer to the same variable; if you call a variable
<tt class="literal">xPOS</tt>, don't refer to it elsewhere as
<tt class="literal">xpos</tt>.</p>


<p>Always give your variables and functions meaningful names that help
you remember what they are for. Avoid useless names like
"foo," and use single-letter variables, such as
"x" or "i" only for simple things like the
index (i.e., counting variable) in a loop.</p>
</td></tr></table></blockquote>
</div>




<a name="ch01-31-fm2xml" /><div class="sect2">
<h3 class="sect2">1.3.5. Adding Frame Labels</h3>


<p>We've <a name="INDEX-141" />
<a name="INDEX-142" />got our
quiz's <em class="filename">init</em> script done and our questions
built. We should now add some frame labels so that we can control the
playback of our quiz.</p>


<p>In order to step the user through our quiz one question at a time,
we've separated the content for Question 1 and Question 2 into
frames 1 and 10. By moving the playhead to those keyframes,
we'll create a slide show effect, where each slide contains a
question. We know that Question 2 is on frame 10, so when we want to
display Question 2, we can call the <em class="filename">gotoAndStop(
)</em><a name="INDEX-143" /> function like this:</p>


<blockquote><pre class="code">gotoAndStop(10);</pre></blockquote>


<p>which would cause the playhead to advance to frame 10, the location
of Question 2. A sensible piece of code, right? Wrong! Whereas using
the specific number 10 with our <em class="filename">gotoAndStop( )</em>
function works, it isn't flexible. If, for example, we added
five frames to the timeline before frame 10, Question 2 would
suddenly reside at frame 15, and our
<em class="filename">gotoAndStop(10)</em> command would not bring the user
to the correct frame. To allow our code to work even if the frames in
our timeline shift, we use <em class="emphasis">frame labels</em> instead
of <a name="INDEX-144" />frame numbers. Frame labels are
expressive names, such as <tt class="literal">q2</tt> or
<tt class="literal">quizEnd</tt>, by which we can refer to specific points
on the timeline. Once a point is labeled, we can use the label to
refer to the frame by name instead of by number.</p>


<p>The flexibility of frame labels is indispensable. I hardly ever use
frame numbers with playback-control functions like
<em class="filename">gotoAndStop( )</em>. Let's add all the labels
we'll need for our quiz now, so that we can use them later to
walk the user through the quiz questions:</p>


<ol><li><p>On the <em class="filename">labels</em> layer, click frame 1.</p></li><li><p>Select Modify <img align="absmiddle" src="figs/U2192.gif" /> Frame. The Frame panel appears.</p></li><li><p>In the Label text field, type <tt class="userinput"><b>init</b></tt>.</p></li><li><p>At frame 10 of the <em class="emphasis">labels</em> layer, add a blank
keyframe.</p></li><li><p>In the Frame panel, in the Label text field, type
<tt class="userinput"><b>q2</b></tt>.</p></li><li><p>At frame 20 of the <em class="emphasis">labels</em> layer, add a blank
keyframe.</p></li><li><p>In the Frame panel, in the Label text field, type
<tt class="userinput"><b>quizEnd</b></tt>.</p></li></ol>
</div>




<a name="ch01-32-fm2xml" /><div class="sect2">
<h3 class="sect2">1.3.6. Scripting the Answer Buttons</h3>


<p>Our <a name="INDEX-145" />questions are in place, our variables
have been initialized, and our frames have been labeled. If we were
to test our movie now, we'd see Question 1 appear with three
answer buttons that do nothing when clicked and no way for the user
to get to Question 2. We need to add some code to the answer buttons
so that they will advance the user through the quiz and keep track of
his answers along the way.</p>


<p>For convenience, we'll refer to the multiple-choice buttons as
button 1, button 2, and button 3, as shown in <a href="ch01_03.htm">Figure 1-8</a>.</p>


<a name="ch01-72046" /><div class="figure"><img alt="Figure 1-8" src="figs/act.0108.gif" /></div><h4 class="objtitle">Figure 1-8. The answer buttons</h4>

<p>Our three buttons get very similar scripts. <a href="ch01_03.htm">Example 1-2</a> through <a href="ch01_03.htm">Example 1-4</a> show the
code for each
<a name="INDEX-146" />button.</p>


<a name="ch01-91056" /><div class="example">
<h4 class="objtitle">Example 1-2. Code for Question 1, Button 1 </h4>

<blockquote><pre class="code">on (release) {
  q1answer = 1;
  gotoAndStop ("q2");
}</pre></blockquote>
</div>


<a name="ch01-51721" /><div class="example">
<h4 class="objtitle">Example 1-3. Code for Question 1, Button 2 </h4>

<blockquote><pre class="code">on (release) {
  q1answer = 2;
  gotoAndStop ("q2");
}</pre></blockquote>
</div>


<a name="ch01-82685" /><div class="example">
<h4 class="objtitle">Example 1-4. Code for Question 1, Button 3 </h4>

<blockquote><pre class="code">on (release) {
  q1answer = 3;
  gotoAndStop ("q2");
}</pre></blockquote>
</div>


<p>The button code consists of two statements (lines 2 and 3) that are
executed only when a mouseclick is detected. In natural language, the
code for each button says, "When the user clicks this button,
make a note that he chose answer 1, 2, or 3, then proceed to Question
2." Here's how it works.</p>


<p>Line 1 is the beginning of an <em class="emphasis">event
handler</em><a name="INDEX-147" /> :</p>


<blockquote><pre class="code">on (release) {</pre></blockquote>


<p>The event handler waits patiently for the user to click button 1.
Recall that an event handler listens for things (such as mouseclicks)
that happen while the movie is running. When an event occurs, the
code contained in the appropriate handler is executed.</p>


<p>Let's dissect the event handler that begins on line 1. The
keyword <em class="filename">on</em> signals the start of the event
handler. (If the word <em class="emphasis">on</em> seems a little awkward
to you, think of it as <em class="emphasis">when</em> until you're
comfortable with it.) The keyword <em class="filename">release</em>,
enclosed in parentheses, indicates the <em class="emphasis">type</em>
<em class="emphasis">of event</em> that the event handler is listening
for; in this case, we're listening for a
<em class="filename">release</em> event, which occurs when the user clicks
and releases the mouse over the button. The opening curly brace
(<tt class="literal">{</tt>) marks the beginning of the block of statements
that should be executed when the <em class="filename">release</em> event
occurs. The end of the code block is marked by a closing curly brace
(<tt class="literal">}</tt>) on line 4, which is the end of the event
handler.</p>


<p>Line 2 is the first of the statements that will be executed when the
<em class="filename">release</em> event occurs. The code in line 2 should
be getting quite familiar to you:</p>


<blockquote><pre class="code">q1answer = 1;</pre></blockquote>


<p>It sets the variable <tt class="literal">q1answer</tt> to 1 (the other
answer buttons set it to 2 or 3). The <tt class="literal">q1answer</tt>
variable stores the user's answer for the first question. Once
we have recorded the user's answer for Question 1, we advance
to Question 2 via line 3 of our button code:</p>


<blockquote><pre class="code">gotoAndStop ("q2");</pre></blockquote>


<p>Line 3 calls the <em class="filename">gotoAndStop( )</em> function,
passing it the frame label "q2" as an argument, which
advances the playhead to the frame <tt class="literal">q2</tt> where
Question 2 appears.</p>


<p>Now that you know how the button code works, let's add it to
the Question 1 buttons:</p>


<ol><li><p>With the Actions panel open, select button 1 on the Stage. The Frame
Actions title changes to Object Actions. Any code you add now will be
attached to button 1 (the selected object on the Stage).</p></li><li><p>Into the right side of the Actions panel, type the code from <a href="ch01_03.htm">Example 1-2</a>.</p></li><li><p>Repeat steps 1 and 2 to add button code to buttons 2 and 3. On button
2, set <tt class="literal">q1answer</tt> to 2; on button 3, set
<tt class="literal">q1answer</tt> to 3, as shown in <a href="ch01_03.htm">Example 1-3</a> and <a href="ch01_03.htm">Example 1-4</a>.</p></li></ol>
<p>The code for the Question 2 buttons is structurally identical to that
of the Question 1 buttons (we change only the name of the answer
variable and the destination of the <em class="filename">gotoAndStop(
)</em> call). <a href="ch01_03.htm">Example 1-5</a> shows the code for
button 1 of Question 2.</p>


<a name="ch01-65198" /><div class="example">
<h4 class="objtitle">Example 1-5. Code for Question 2, Button 1 </h4>

<blockquote><pre class="code">on (release) {
  q2answer = 1;
  gotoAndStop ("quizEnd");
}</pre></blockquote>
</div>


<p>We use the variable <tt class="literal">q2answer</tt> instead of
<tt class="literal">q1answer</tt> because we want the buttons to keep track
of the user's selection for Question 2. We use
"quizEnd" as the argument for our <em class="filename">gotoAndStop(
)</em> function call to advance the playhead to the end of the
quiz (i.e., the frame labeled <tt class="literal">quizEnd</tt>) after the
user answers Question 2.</p>


<p>Let's add the button code for the Question 2 buttons:</p>


<ol><li><p>Click on frame 10 of the <em class="emphasis">question 2</em> layer.</p></li><li><p>Click on button 1.</p></li><li><p>Into the Actions panel, type the code from <a href="ch01_03.htm">Example 1-5</a>.</p></li><li><p>Repeat steps 2 and 3 to add button code to buttons 2 and 3. On button
2, set <tt class="literal">q2answer</tt> to 2. On button 3, set
<tt class="literal">q2answer</tt> to 3.</p></li></ol>
<p>Having just added button code to six buttons, you will no doubt have
noticed how repetitive the code is. The code on each button differs
from the code on the others by only a few text characters.
That's not exactly efficient programming. Our button code cries
out for some kind of centralized entity that records the answer and
advances to the next screen in the quiz. In <a href="ch09_01.htm">Chapter 9, "Functions"</a> we'll see how to centralize our code
with <a name="INDEX-148" /><em class="emphasis">functions</em>.</p>
</div>




<a name="ch01-33-fm2xml" /><div class="sect2">
<h3 class="sect2">1.3.7. Building the Quiz End</h3>


<p>Our quiz is nearly complete. We now have two questions working with
an answer-tracking script that lets the user answer the questions and
progress through the quiz. We still need a quiz-ending screen where
we tell the user how well he fared.</p>


<p>To build our quiz-end screen, we need to do some basic Flash
production and some scripting. Let's do the production first:</p>


<ol><li><p>At frame 20 of the <em class="emphasis">question 2</em> layer, add a blank
<a name="INDEX-149" />
<a name="INDEX-150" />
<a name="INDEX-151" />keyframe. This prevents Question 2
from appearing underneath the contents of our quiz-end screen.</p></li><li><p>At frame 20 of the <em class="emphasis">quiz end</em> layer, add a blank
keyframe.</p></li><li><p>While you're still on that frame, put the following text on the
Stage: "Thank you for taking the quiz. Your final score is:
/2." Make sure to leave a decent amount of blank space between
"is:" and "/2." We'll put the
user's score there.</p></li><li><p>At frame 20 of the <em class="emphasis">scripts</em> layer, add a blank
keyframe.</p></li></ol>
<p>That takes care of the production work for our quiz-end screen. Your
end screen should look something like the one shown in <a href="ch01_03.htm">Figure 1-9</a>.</p>


<a name="ch01-49938" /><div class="figure"><img alt="Figure 1-9" src="figs/act.0109.gif" /></div><h4 class="objtitle">Figure 1-9. Judgment day</h4>

<p>Now let's work on the quiz-end script. When the playhead lands
on our <tt class="literal">quizEnd</tt> frame, we want to calculate the
user's score. We need a
<a name="INDEX-152" /> <a name="INDEX-153" />calculation script to execute
when the playhead reaches frame 20. Because any script placed on a
keyframe in the timeline is automatically executed when the playhead
enters that frame, we can simply attach our calculation script to the
keyframe we added at frame 20 of the <em class="emphasis">scripts</em>
layer.</p>


<p>In the calculation script, we first determine the user's score,
and then we display that score on the screen:</p>


<blockquote><pre class="code">// Tally up the user's correct answers
if (q1answer == 3){
  totalCorrect = totalCorrect + 1;
}
if (q2answer == 2){
  totalCorrect++;
}
// Show the user's score in an on-screen text field
displayTotal = totalCorrect;</pre></blockquote>


<p>Lines 1 and 8 are code comments that summarize the functionality of
the two sections of the script. On line 2, the first of two
<a name="INDEX-154" />conditionals in our calculation script
begins. In it, we see our <tt class="literal">q1answer</tt> variable put to
use:</p>


<blockquote><pre class="code">if (q1answer == 3){</pre></blockquote>


<p>The <a name="INDEX-155" />keyword <em class="filename">if</em> tells
the interpreter we're about to provide a list of statements
that should be executed only if a certain condition is met. The terms
of that condition are described in the parentheses that follow the
<em class="filename">if</em> keyword: <em class="emphasis">(q1answer ==
3)</em>, and the opening curly brace begins the list of
statements to be conditionally executed. Therefore, line 2 translates
into, "If the value of <tt class="literal">q1answer</tt> is equal to
3, then execute the statements contained in the following curly
braces."</p>


<p>But how exactly does the condition <em class="emphasis">q1answer == 3</em>
work? Well, let's break the phrase down. We recognize
<tt class="literal">q1answer</tt> as the variable in which we've
stored the user's answer to Question 1. The number 3 indicates
the correct answer to Question 1, because movie clips first appeared
in Flash 3. The double equal sign (==) between our variable and the
number 3 is the <em class="emphasis">equality </em>comparison operator,
which compares two expressions. If the expression on its left
(<tt class="literal">q1answer</tt>) equals the one on its right (3), our
condition is met, and the statements within the curly braces are
executed. If not, our condition is not met, and the statements within
the curly braces are skipped.</p>


<p>Flash has no way of knowing the right answers to our quiz questions.
Checking if <tt class="literal">q1answer</tt> is equal to 3 is our way of
telling Flash to check if the user got Question 1 right. If he did,
we tell Flash to add one to his total score as follows:</p>


<blockquote><pre class="code">totalCorrect = totalCorrect + 1;</pre></blockquote>


<p>Line 3 says, "Make the new value of
<tt class="literal">totalCorrect</tt> equal to the old value of
<tt class="literal">totalCorrect</tt> plus one," (i.e.,
<em class="emphasis">increment</em> <tt class="literal">totalCorrect</tt>).
Incrementing a variable is so common that it has its own special
operator, ++.</p>


<p>So instead of using this code:</p>


<blockquote><pre class="code">totalCorrect = totalCorrect + 1;</pre></blockquote>


<p>We normally write:</p>


<blockquote><pre class="code">totalCorrect++;</pre></blockquote>


<p>which does exactly the same thing, but more succinctly.</p>


<p>At line 4, we end the block of statements to execute if our first
condition is met:</p>


<blockquote><pre class="code">}</pre></blockquote>


<p>Lines 5 through 7 are another condition:</p>


<blockquote><pre class="code">if (q2answer == 2){
  totalCorrect++;
}</pre></blockquote>


<p>Here we're checking whether the user answered Question 2
correctly (MP3 audio support first appeared in Flash 4). If the user
chose the second answer, we add one to
<tt class="literal">totalCorrect</tt> using the increment operator ++.</p>


<p>Because there are only two questions in our quiz, we're done
tallying the user's score. For each question that the user
answered correctly, we added one to <tt class="literal">totalCorrect</tt>,
so <tt class="literal">totalCorrect</tt> now contains the user's
final score. The only thing left is to show the user his score, via
line 9, the last line of our quiz-end script:</p>


<blockquote><pre class="code">displayTotal = totalCorrect;</pre></blockquote>


<p>You already know enough about
<a name="INDEX-156" /> <a name="INDEX-157" />
<a name="INDEX-158" />variables to guess that the statement
on line 9 assigns the value of <tt class="literal">totalCorrect</tt> to the
variable <tt class="literal">displayTotal</tt>. But how does that make the
score appear on screen? So far, it doesn't. In order to make
the score appear on screen, we need to create a special kind of
variable called a <em class="emphasis">text field </em>variable that has a
physical representation on the screen. Let's make one now so
you can see how it works:</p>


<ol><li><p>Select the Text tool.</p></li><li><p>On the <em class="filename">quiz end</em> layer, click frame 20.</p></li><li><p>Place your pointer just before the text "/2" that you
created earlier, then click the Stage.</p></li><li><p>Drag out a text box big enough to hold a single number.</p></li><li><p>Choose Text <img align="absmiddle" src="figs/U2192.gif" /> Options.</p></li><li><p>In the Text Options panel, change Static Text to Dynamic Text.</p></li><li><p>In the Variable text field, type <tt class="userinput"><b>displayTotal</b></tt>.</p></li></ol>
<p>The variable <tt class="literal">displayTotal</tt> now has a screen
representation. If we change <tt class="literal">displayTotal</tt> in our
script, the corresponding text field variable will be updated on the
screen.</p>
</div>




<a name="ch01-34-fm2xml" /><div class="sect2">
<h3 class="sect2">1.3.8. Testing Our Quiz</h3>


<p>Well, that's it. Our quiz is finished. You can now check
whether the quiz works using Control <img align="absmiddle" src="figs/U2192.gif" /> Test Movie. Click on the
answers in different combinations to see if your quiz is keeping
score correctly. You can even create a restart button by attaching
the following code to a new button:</p>


<blockquote><pre class="code">on (release) {
  gotoAndStop("init");
}</pre></blockquote>


<p>Because <tt class="literal">totalCorrect</tt> is set to
in the code on the <tt class="literal">init</tt> frame, the score will
reset itself each time you send the playhead to
<tt class="literal">init</tt>.</p>


<p>If you find that your quiz isn't working, try comparing it with
the sample quiz provided at the online Code Depot. You may also want
to investigate the troubleshooting techniques described <a name="INDEX-159" />in <a href="ch19_01.htm">Chapter 19, "Debugging"</a>.</p>
</div>


<hr width="684" align="left" />
<div class="navbar"><table width="684" border="0"><tr><td align="left" valign="top" width="228"><a href="ch01_02.htm"><img alt="Previous" border="0" src="../gifs/txtpreva.gif" /></a></td><td align="center" valign="top" width="228"><a href="index.htm"><img alt="Home" border="0" src="../gifs/txthome.gif" /></a></td><td align="right" valign="top" width="228"><a href="ch01_04.htm"><img alt="Next" border="0" src="../gifs/txtnexta.gif" /></a></td></tr><tr><td align="left" valign="top" width="228">1.2. Further ActionScript Concepts</td><td align="center" valign="top" width="228"><a href="index/index.htm"><img alt="Book Index" border="0" src="../gifs/index.gif" /></a></td><td align="right" valign="top" width="228">1.4. Onward!</td></tr></table></div>
<hr width="684" align="left" />

<img alt="Library Navigation Links" border="0" src="../gifs/navbar.gif" usemap="#library-map" />
<p><font size="-1"><a href="copyrght.htm">Copyright &copy; 2002</a> O'Reilly &amp; Associates. All rights reserved.</font></p>

<map name="library-map"><area href="../index.htm" coords="0,1,78,93" shape="rect" /><area href="../wdesign/index.htm" coords="80,2,155,96" shape="rect" /><area href="../xhtml/index.htm" coords="158,0,263,97" shape="rect" /><area href="../audio/index.htm" coords="265,1,335,97" shape="rect" /><area href="../css/index.htm" coords="338,1,434,93" shape="rect" /><area href="index.htm" coords="439,0,540,102" shape="rect" /><area href="../infoarch/index.htm" coords="544,0,685,102" shape="rect" /></map>

</body></html>
