<html><head><title>Classification of Elements (Cascading Style Sheets: The Definitive Guide)</title><link rel="stylesheet" type="text/css" href="style/style.css" />

<meta name="DC.Creator" content="Eric A. Meyer" /><meta name="DC.Format" content="text/xml" scheme="MIME" /><meta name="DC.Language" content="en-US" /><meta name="DC.Publisher" content="O'Reilly &amp; Associates, Inc." /><meta name="DC.Source" scheme="ISBN" content="1565926226L" /><meta name="DC.Subject.Keyword" content="stuff" /><meta name="DC.Title" content="Cascading Style Sheets: The Definitive Guide" /><meta name="DC.Type" content="Text.Monograph" />

</head><body bgcolor="#ffffff">

<img alt="Book Home" border="0" src="gifs/smbanner.gif" usemap="#banner-map" /><map name="banner-map"><area shape="rect" coords="1,-2,616,66" href="index.htm" alt="Cascading Style Sheets: The Definitive Guide" /><area shape="rect" coords="629,-11,726,25" href="jobjects/fsearch.htm" alt="Search this book" /></map>

<div class="navbar"><table width="684" border="0"><tr><td align="left" valign="top" width="228"><a href="ch02_08.htm"><img alt="Previous" border="0" src="../gifs/txtpreva.gif" /></a></td><td align="center" valign="top" width="228"><a href="index.htm">Cascading Style Sheets: The Definitive Guide</a></td><td align="right" valign="top" width="228"><a href="ch02_10.htm"><img alt="Next" border="0" src="../gifs/txtnexta.gif" /></a></td></tr></table></div>
<hr width="684" align="left" />


<h2 class="sect1">2.9. Classification of Elements</h2>

<p><a name="INDEX-274" />As we have already discussed, elements in a
document occur in a sort of hierarchy. At the most basic level,
block-level elements contain other block-level elements, inline
elements, and <a name="INDEX-275" />replaced elements. A part of this
hierarchy scheme depends on the relationships between these types of
elements; for example, while inline elements can be children of
block-level elements, the reverse is not true.
</p>

<p>In CSS, elements are grouped into three types:</p>

<dl>
<dt><b><em class="filename">Block-level</em> elements</b></dt>
<dd>
<p><a name="INDEX-276" />Elements such as paragraphs, headings,
lists, tables, <tt class="literal">DIV</tt>s, and <tt class="literal">BODY</tt>.
Replaced elements, such as images and form inputs, can be block-level
elements but usually are not. Each block-level element is displayed
on a line by itself, so to speak, beginning on a new line and forcing
any element after it to do the same. Block-level elements can only be
children of other block-level elements, and then only in certain
circumstances.
</p>
</dd>

<dt><b><em class="filename">Inline</em> elements</b></dt>
<dd>
<p><a name="INDEX-277" />Elements
such as <tt class="literal">A</tt>, <tt class="literal">EM</tt> ,
<tt class="literal">SPAN</tt>, and most replaced elements, such as images
and form inputs. They do not force anything to start on a new line,
not even themselves, and can be the children of any other element.
</p>
</dd>

<dt><b><em class="filename">List-item</em> elements</b></dt>
<dd>
<p><a name="INDEX-278" />Elements that in HTML pretty much
include only the <tt class="literal">LI</tt> element. These are specially
defined to have presentation aspects such as a "marker"
(a bullet, letter, or number) and a certain sense of ordering, if
such an element appears within an ordered list of some kind. Thus,
list items within such a list can be automatically numbered, based on
their context within the document.
</p>
</dd>

</dl>

<p><a name="INDEX-279" />These terms are, as it happens, the
basic three of the four values for the property
<tt class="literal">display</tt>.
</p>

<table border="1">

<tr>
<td>
<dl>
<dt><p><h4>Display</h4></dt>
<dt><b>Values</b></dt>
<dd>
<p><tt class="literal">block</tt> | <tt class="literal">inline</tt> |
<tt class="literal">list-item</tt> | <tt class="literal">none</tt>
</p>
</dd>

<dt><b>Initial value </b></dt>
<dd>
<p><tt class="literal">block</tt></p>
</dd>

<dt><b>Inherited </b></dt>
<dd>
<p>no</p>
</dd>

<dt><b>Applies to </b></dt>
<dd>
<p>all elements</p>
</dd>

</dl>
</td>
</tr>

</table>

<p>Unlike almost every other property in CSS, <tt class="literal">display</tt>
is often evaluated to a value other than its default. Instead, the
value of <tt class="literal">display</tt> for a given element is defined in
the <a name="INDEX-280" /> <a name="INDEX-281" />document type
definition<a href="#FOOTNOTE-1">[1]</a>
(DTD) for the language being used. Thus, in HTML, the
<tt class="literal">H1</tt> and <tt class="literal">P</tt> elements are defined
to be block-level elements by the document type definition for HTML.
<tt class="literal">A</tt> and <tt class="literal">EM</tt>, on the other hand,
are inline elements, and of course <tt class="literal">LI</tt> is a list
item. Thus, the default <tt class="literal">display</tt> values for these
elements would be:
</p><blockquote class="footnote"> <a name="FOOTNOTE-1" /><p>[1]A <em class="filename">document type
definition</em> is a formal description of a markup language
such as HTML. The DTD provides a rigorous way of defining what
elements mean and how they fit into the language's hierarchy.
It's similar to describing English as a collection of nouns,
verbs, adverbs, and so on, but with the added bonus of describing
what each of the parts means and how they relate to each other. DTDs
are not easily readable by the untrained eye.</p> </blockquote>

<blockquote><pre class="code">H1, P {display: block;}
A, EM {display: inline;}
LI {display: list-item;}</pre></blockquote>

<p>Replaced elements may be one or the other, depending on their context
and how they are placed within the document flow. A floated image is
considered to be block-level, for example, but images are usually
inline.
</p>

<p>In theory, <tt class="literal">display</tt> makes it possible to completely
upset the structural definitions of a markup language. In traditional
HTML, paragraphs always have blank space between them, and two
paragraphs cannot appear "on the same line," so to speak.
This can be changed with the following rule:
</p>

<blockquote><pre class="code">P {display: inline;}</pre></blockquote>

<p>With this simple declaration, a <tt class="literal">P</tt> element becomes
no different than a <tt class="literal">SPAN</tt> element, for example. If
this rule were applied to a document with several paragraphs, they
would all suddenly run together in a single, rambling mass of text.
<a href="ch02_09.htm">Figure 2-33</a> shows the result.
</p>

<a name="css-CHP-2-FIG-33" /><div class="figure"><img height="143" alt="Figure 2-33" src="figs/css.0233.gif" width="407" /></div><h4 class="objtitle">Figure 2-33. Inline paragraphs</h4>

<p>Note that the styles applied to each paragraph, such as font and
color, still hold sway, even over inline paragraphs. Only those
properties that can only apply to block-level elements will cease to
work with an inline paragraph.
</p>

<p>The reverse of this is to change a normally inline element to a
block-level element. Let's say you wish to make sure all images
in a document appear on their own lines. All you need is the
following rule, which has the effect shown in <a href="ch02_09.htm">Figure 2-34</a>:
</p>

<blockquote><pre class="code">IMG {display: block;}</pre></blockquote>

<a name="css-CHP-2-FIG-34" /><div class="figure"><img height="125" alt="Figure 2-34" src="figs/css.0234.gif" width="275" /></div><h4 class="objtitle">Figure 2-34. Block-level images</h4>

<p>On the other hand, you might want to simply turn off all of the
images in a document, so that they aren't displayed at all:
</p>

<blockquote><pre class="code">IMG {display: none;}</pre></blockquote>

<p>If you set the <tt class="literal">display</tt> of an element to
<tt class="literal">none</tt>, the element's existence is completely
ignored by the user agent, as we can see in <a href="ch02_09.htm">Figure 2-35</a>.
</p>

<a name="css-CHP-2-FIG-35" /><div class="figure"><img height="49" alt="Figure 2-35" src="figs/css.0235.gif" width="402" /></div><h4 class="objtitle">Figure 2-35. Suppression of images using display: none </h4>

<p>Not only is it not displayed, but the space it would have otherwise
occupied is closed up. The document will be displayed as though the
suppressed element had never existed in the first place, even though
it's still in the source document:
</p>

<blockquote><pre class="code">&lt;P&gt;This is the first paragraph in the document.&lt;/P&gt;
&lt;P STYLE="display: none;"&gt;This will not be displayed, 
nor will it affect the layout of the document.&lt;/P&gt;
&lt;P&gt;This is another paragraph in the document.&lt;/P&gt;</pre></blockquote>

<p>This can be useful for creating little warnings which only non-CSS
browsers will display:
</p>

<blockquote><pre class="code">&lt;P STYLE="display: none;"&gt;This page was designed with CSS, and 
looks best in a CSS-aware browser--which, unfortunately, yours is not.
However, the document should still be perfectly readable, since that's
one of the advantages of using CSS.&lt;/P&gt;</pre></blockquote>

<p>The only way this warning will be seen is on a browser that
doesn't understand <tt class="literal">display:</tt>
<tt class="literal">none</tt>  -- in other words, a browser that
doesn't understand CSS at all, since every CSS-aware browser
known supports <tt class="literal">display:</tt> <tt class="literal">none</tt>.
</p>

<p>There is one other value for <tt class="literal">display</tt>, and
that's <tt class="literal">list-item</tt>. This value is used to
declare that an element is, well, a list item. This should, in
theory, make the element behave as though it is part of a list. List
items already have this display type by default, of course.
</p>

<a name="ch02-24-fm2xml" /><blockquote><h4>TIP</h4>
<p>Of course, <tt class="literal">none</tt> is one value of
<tt class="literal">display</tt> that most browsers get correct right off
the bat, while ignoring nearly everything else. (After all, the
vendors don't want you claiming to the world that they
don't have CSS-capable browsers, now do they?)
<tt class="literal">none</tt> is the only value of
<tt class="literal">display</tt> that you can reliably assume will work in
any CSS-capable browser. Internet Explorer 5.x for Windows was the
first browser to really support values of <tt class="literal">display</tt>
other than <tt class="literal">none</tt>, but even it isn't perfect:
it doesn't seem to handle <tt class="literal">list-item</tt>
correctly.
</p>
</blockquote>

<a name="css-CHP-2-SECT-9.1" /><div class="sect2">
<h3 class="sect2">2.9.1. Why Does the display Property Exist?</h3>

<p>The <tt class="literal">display</tt> property can be used to completely
upset the structure of HTML documents, as you may have realized. Try
to imagine the havoc caused by a style sheet like this one:
</p>

<blockquote><pre class="code">H1, H3, P, DIV {display: inline;}
IMG, B, STRONG, EM, A {display: block;}
A:link {display: none;}
H2, I, TABLE {display: list-item;}</pre></blockquote>

<p>Depicting this is not even possible with current browsers, nor should
we wish to try.
</p>

<p>So why have this property at all? First of all, the
<tt class="literal">display:</tt> <tt class="literal">none</tt> trick can be very
useful. Assume for a moment that you have a browser that supports
alternate style sheets. You could define a style sheet called
"No Images" in which you set the following style:
</p>

<blockquote><pre class="code">IMG {display: none;}</pre></blockquote>

<p>This rule will turn off the display of all images within the
document, as we saw earlier.
</p>

<p>More to the point, however, is that <tt class="literal">display</tt>
becomes very useful when CSS is linked to an <a name="INDEX-282" />XML document. XML contains next to no
information regarding the display of its elements, mostly because XML
has no predefined element types. Therefore, once you have finished
writing an XML document, you can work up a CSS style sheet that
describes which elements are block-level, which are inline, and so
forth. Without such a style sheet, a browser would have no idea which
XML elements were to be displayed as list items, which were
block-level, and so forth.
</p>

<p>It's worth noting that
<a name="INDEX-283" />CSS1 has no way to describe parts of
tables, such as cells or rows, so the formatting of tables
can't really be described using CSS1. Table-related
<tt class="literal">display</tt> values were first introduced in CSS2, and
a brief look at these values can be found
in<a name="INDEX-284" /> <a href="ch10_01.htm">Chapter 10, "CSS2: A Look Ahead"</a>.<a name="INDEX-285" />
</p>

</div>


<hr width="684" align="left" />
<div class="navbar"><table width="684" border="0"><tr><td align="left" valign="top" width="228"><a href="ch02_08.htm"><img alt="Previous" border="0" src="../gifs/txtpreva.gif" /></a></td><td align="center" valign="top" width="228"><a href="index.htm"><img alt="Home" border="0" src="../gifs/txthome.gif" /></a></td><td align="right" valign="top" width="228"><a href="ch02_10.htm"><img alt="Next" border="0" src="../gifs/txtnexta.gif" /></a></td></tr><tr><td align="left" valign="top" width="228">2.8. The Cascade</td><td align="center" valign="top" width="228"><a href="index/index.htm"><img alt="Book Index" border="0" src="../gifs/index.gif" /></a></td><td align="right" valign="top" width="228">2.10. Summary</td></tr></table></div>
<hr width="684" align="left" />

<img alt="Library Navigation Links" border="0" src="../gifs/navbar.gif" usemap="#library-map" />
<p><font size="-1"><a href="copyrght.htm">Copyright &copy; 2002</a> O'Reilly &amp; Associates. All rights reserved.</font></p>

<map name="library-map"><area href="../index.htm" coords="0,1,78,93" shape="rect" /><area href="../wdesign/index.htm" coords="80,2,155,96" shape="rect" /><area href="../xhtml/index.htm" coords="158,0,263,97" shape="rect" /><area href="../audio/index.htm" coords="265,1,335,97" shape="rect" /><area href="index.htm" coords="338,1,434,93" shape="rect" /><area href="../action/index.htm" coords="439,0,540,102" shape="rect" /><area href="../infoarch/index.htm" coords="544,0,685,102" shape="rect" /></map>

</body></html>
