<html><head><title>CSS to the Rescue (Cascading Style Sheets: The Definitive Guide)</title><link rel="stylesheet" type="text/css" href="style/style.css" />

<meta name="DC.Creator" content="Eric A. Meyer" /><meta name="DC.Format" content="text/xml" scheme="MIME" /><meta name="DC.Language" content="en-US" /><meta name="DC.Publisher" content="O'Reilly &amp; Associates, Inc." /><meta name="DC.Source" scheme="ISBN" content="1565926226L" /><meta name="DC.Subject.Keyword" content="stuff" /><meta name="DC.Title" content="Cascading Style Sheets: The Definitive Guide" /><meta name="DC.Type" content="Text.Monograph" />

</head><body bgcolor="#ffffff">

<img alt="Book Home" border="0" src="gifs/smbanner.gif" usemap="#banner-map" /><map name="banner-map"><area shape="rect" coords="1,-2,616,66" href="index.htm" alt="Cascading Style Sheets: The Definitive Guide" /><area shape="rect" coords="629,-11,726,25" href="jobjects/fsearch.htm" alt="Search this book" /></map>

<div class="navbar"><table width="684" border="0"><tr><td align="left" valign="top" width="228"><a href="ch01_01.htm"><img alt="Previous" border="0" src="../gifs/txtpreva.gif" /></a></td><td align="center" valign="top" width="228"><a href="index.htm">Cascading Style Sheets: The Definitive Guide</a></td><td align="right" valign="top" width="228"><a href="ch01_03.htm"><img alt="Next" border="0" src="../gifs/txtnexta.gif" /></a></td></tr></table></div>
<hr width="684" align="left" />


<h2 class="sect1">1.2. CSS to the Rescue</h2>

<p><a name="INDEX-10" />Of
course, the problem of polluting HTML with presentational markup was
not lost on the <a name="INDEX-11" /> <a name="INDEX-12" />World Wide Web Consortium (W3C). It
was recognized early on that this situation couldn't continue
forever, and that a good solution was needed quickly. In 1995, they
started publicizing a work-in-progress called CSS. By 1996, it had
become a full Recommendation, with the same weight as HTML itself.
</p>

<p>So what does CSS offer us? As of this writing, it offers us two
levels of itself. The first level is Cascading Style Sheets, Level 1
(<a name="INDEX-13" />CSS1), which was made
a full W3C Recommendation in 1996. Soon thereafter, the W3C's
Cascading Style Sheets and Formatting Properties
(<a name="INDEX-14" />
<a name="INDEX-15" />CSS&amp;FP) Working
Group got to work on a more advanced specification, and in 1998 their
work paid off when Cascading Style Sheets, Level 2
(<a name="INDEX-16" />CSS2) was made a full
Recommendation. CSS2 builds on CSS1 by extending the earlier work
without making major changes to it.
</p>

<p>The future is likely to see further advances in CSS, but until then,
let's go over what we already have.
</p>

<a name="css-CHP-1-SECT-2.1" /><div class="sect2">
<h3 class="sect2">1.2.1. Rich Styling</h3>

<p>In the first place, <a name="INDEX-17" />
<a name="INDEX-18" />CSS allows for much richer document
appearances than HTML ever allowed, even at the height of its
presentational fever. CSS contains the ability to set colors on text
and in the background of any element; it permits the creation of
borders around any element, as well as the increase or decrease of
the space around them; it allows authors to change the way text is
capitalized, decorated (e.g., underlining), its spacing, and even
whether or not it is displayed at all; and many other effects.
</p>

<p>Take, for example, the first (and main) heading on a page, which is
usually the title of the page itself. The proper markup is:
</p>

<blockquote><pre class="code">&lt;H1&gt;Leaping Above The Water&lt;/H1&gt;</pre></blockquote>

<p>Now, suppose you want this title to be dark red, use a certain font,
be italicized and underlined, and have a yellow background. To do all
of that with HTML, you'd have to put the <tt class="literal">H1</tt>
into a table and load it up with a ton of other tags like
<tt class="literal">FONT</tt> and <tt class="literal">U</tt>. With CSS, all you
need is one rule:
</p>

<blockquote><pre class="code">H1 {color: maroon; font: italic 1em Times, serif; text-decoration: underline; 
   background: yellow;}</pre></blockquote>

<p>That's it. As you can see, everything we did in HTML can be
done in CSS. There's no need to confine ourselves to only those
things HTML can do, however:
</p>

<blockquote><pre class="code">H1 {color: maroon; font: italic 1em Times, serif; text-decoration: underline; 
   background: yellow url(titlebg.png) repeat-x; 
   border: 1px solid red; margin-bottom: 0; padding: 5px;}</pre></blockquote>

<p>Now we have an image in the background of the <tt class="literal">H1</tt>
that is only repeated horizontally, plus a border around the
<tt class="literal">H1</tt> that is separated from the text by at least
five pixels, and we've removed the margin (blank space) from
the bottom of the element. These are things which HTML can't
even come close to matching -- and that's just a taste of
what CSS can do.
</p>

</div>
<a name="css-CHP-1-SECT-2.2" /><div class="sect2">
<h3 class="sect2">1.2.2. Ease of Use</h3>

<p>If the depth of CSS doesn't convince you, then perhaps this
will: style sheets can drastically reduce a web author's
workload.
</p>

<p>Style sheets can do this by centralizing the commands for certain
visual effects in one handy place, instead of scattering them
throughout the document. As an example, let's say you want all
of the headings in a document to be purple. (No, I don't know
why you would want this, but assume with me.) Using HTML, the way to
do this would be to put a <tt class="literal">FONT</tt> tag in every
heading tag, like so:
</p>

<blockquote><pre class="code">&lt;H2&gt;&lt;FONT COLOR="purple"&gt;This is purple!&lt;/FONT&gt;&lt;/H2&gt;</pre></blockquote>

<p>This has to be done for every heading of level two. If you have forty
headings in your document, you have to insert forty
<tt class="literal">FONT</tt> tags throughout, one for each heading!
That's a lot of work for one little effect.
</p>

<p>But let's assume that you've gone ahead and put in all
those <tt class="literal">FONT</tt> tags. You're done, you're
happy -- and then you decide (or your boss decides for you) that
headings should really be dark green, not purple. Now you have to go
back and fix every single one of those <tt class="literal">FONT</tt> tags.
Sure, you might be able to find-and-replace, as long as headings are
the only purple text in your document. If you've put other
purple <tt class="literal">FONT</tt> tags in your document, then you
<em class="emphasis">can't</em> find-and-replace, because
you'd affect them too.
</p>

<p>It would be much better to have a single rule instead:</p>

<blockquote><pre class="code">H2 {color: purple;}</pre></blockquote>

<p>Not only is this faster to type, but it's easier to change. If
you do switch from purple to dark green, all you have to change is
that one rule.
</p>

<p>Let's go back to the highly styled <tt class="literal">H1</tt>
element from the previous section:
</p>

<blockquote><pre class="code">H1 {color: maroon; font: italic 1em Times, serif; text-decoration: underline; 
   background: yellow;}</pre></blockquote>

<p>This may look like it's worse to write than using HTML, but
consider a case where you have a page with about a dozen
<tt class="literal">H2</tt> elements that should look the same as the
<tt class="literal">H1</tt>. How much markup will be required for those 12
<tt class="literal">H2</tt> elements? A lot. On the other hand, with CSS,
all you need to do is this:
</p>

<blockquote><pre class="code">H1, H2 {color: maroon; font: italic 1em Times, serif; text-decoration: underline; 
   background: yellow;}</pre></blockquote>

<p>Now the styles apply to both <tt class="literal">H1</tt> and
<tt class="literal">H2</tt> elements, with just three extra keystrokes.
</p>

<p>If you want to change the way <tt class="literal">H1</tt> and
<tt class="literal">H2</tt> elements look, the advantages of CSS become
even more striking. Consider how long it would take to change the
HTML markup for all <tt class="literal">H1</tt> and 12
<tt class="literal">H2</tt> elements, compared to changing the previous
styles to this:
</p>

<blockquote><pre class="code">H1, H2 {color: navy; font: bold 1em Helvetica, sans-serif; 
   text-decoration: underline overline; background: silver;}</pre></blockquote>

<p>If the two approaches were timed on a stopwatch, I'm betting
the CSS-savvy author would handily beat the HTML jockey.
</p>

<p>In addition, most CSS rules are collected into one location in the
document. It is possible to scatter them throughout the document by
associated styles to individual elements, but it's usually far
more efficient to place all of your styles into a single style sheet.
This lets you create (or change) the appearance of an entire document
in one place.
</p>

</div>
<a name="css-CHP-1-SECT-2.3" /><div class="sect2">
<h3 class="sect2">1.2.3. Using Your Styles on Multiple Pages</h3>

<p>But wait -- there's more! Not only can you centralize all of
the style information for a page in one place, but you can also
create a style sheet that can then be applied to
<a name="INDEX-19" />
<a name="INDEX-20" />multiple pages -- as many as you
like. This is done by a process in which a
<a name="INDEX-21" />
<a name="INDEX-22" />style
sheet is saved to its own document, and then imported by any page for
use with that document. Using this capability, you can quickly create
a consistent look for an entire web site. All you have to do is link
the single style sheet to all of the documents on your web site.
Then, if you ever want to change the look of your site's pages,
you need only edit a single file and the change will be propagated
throughout the entire server -- automatically!
</p>

<p>Consider a site where all of the headings are gray on a white
background. They get this color from a style sheet that says:
</p>

<blockquote><pre class="code">H1, H2, H3, H4, H5, H6 {color: gray; background: white;}</pre></blockquote>

<p>Now, let's say this site has 700 pages, each one of which uses
the style sheet that says headings should be gray. At some point,
it's decided that headings should be white on a gray
background. So the site's webmaster edits the style sheet to
say:
</p>

<blockquote><pre class="code">H1, H2, H3, H4, H5, H6 {color: white; background: gray;}</pre></blockquote>

<p>Then he saves the style sheet to disk, and the change is made. That
sure beats having to edit 700 pages to enclose every heading in a
table and a <tt class="literal">FONT</tt> tag, doesn't it?
</p>

</div>
<a name="css-CHP-1-SECT-2.4" /><div class="sect2">
<h3 class="sect2">1.2.4. Cascading</h3>

<p>And that's not all! CSS also makes provisions for conflicting
rules; these provisions are collectively referred to as <em class="filename">the
cascade</em><a name="INDEX-23" /> <a name="INDEX-24" />.
For instance, take the previous scenario in which you're
importing a single style sheet into a whole bunch of web pages. Now
inject a set of pages that share many of the same styles, but also
have specialized rules that apply only to them. You can create
another style sheet that is imported into those pages, in addition to
the already existing style sheet, or you can just place the special
styles into the pages that need them.
</p>

<p>For example, you might have one page out of the 700 where headings
should be yellow on dark blue instead of white on gray. In that
single document, then, you could insert this rule:
</p>

<blockquote><pre class="code">H1, H2, H3, H4, H5, H6 {color: yellow; background: blue;}</pre></blockquote>

<p>Thanks to the cascade, this rule will override the imported rule for
white-on-gray headings. By understanding the cascade rules and using
them to your advantage, you can create highly sophisticated sheets
that come together to give your pages a professional yet easily
changed look.
</p>

<p>This ability is not confined to just the author. Web surfers (or
<em class="filename">readers</em>) can, in some browsers, create their own
style sheets (called <em class="filename">reader style
sheets</em><a name="INDEX-25" />
<a name="INDEX-26" />,
oddly enough) that will cascade with the author's styles as
well as the styles used by the browser. Thus, a reader who is
color-blind could create a style that makes hyperlinks stand out:
</p>

<blockquote><pre class="code">A:link {color: white; background: black;}</pre></blockquote>

<p>A reader style sheet could contain almost anything: a directive to
make text large enough to read, if the user has impaired vision;
rules to remove images for faster reading and browsing; even styles
to place the user's favorite picture in the background of every
document. (This isn't recommended, of course, but it is
possible.) This lets readers customize their web experience without
having to turn off all of the author's styles.
</p>

<p>Between importing, cascading, and its variety of effects, CSS becomes
a wonderful tool for any author or reader.
</p>

</div>
<a name="css-CHP-1-SECT-2.5" /><div class="sect2">
<h3 class="sect2">1.2.5. Compact File Size</h3>

<p>Besides the visual power of <a name="INDEX-27" />
<a name="INDEX-28" />CSS and
its ability to empower both author and reader, there is something
else about it that your readers will like. It can help keep document
sizes as small as possible, thereby speeding download times. How? As
we've mentioned, a lot of pages have used tables and
<tt class="literal">FONT</tt> tags to achieve nifty visual effects.
Unfortunately, both of these methods create a lot of HTML markup, and
that drives up file sizes. By grouping visual style information into
central areas and representing those rules using a fairly compact
syntax, you can remove the <tt class="literal">FONT</tt> tags and other
bits of the usual tag soup. Thus, CSS can keep your load times low
and your reader satisfaction high.
</p>

</div>
<a name="css-CHP-1-SECT-2.6" /><div class="sect2">
<h3 class="sect2">1.2.6. Preparing for the Future</h3>

<p>HTML, as I previously pointed out, is a
<a name="INDEX-29" />structural language, while CSS is its
complement: a <a name="INDEX-30" />stylistic language. Recognizing this,
the World Wide Web Consortium (W3C), the body that debates and
approves standards for the Web, is beginning to remove stylistic tags
from HTML. The reasoning for this move is that style sheets can be
used to create the effects that certain HTML tags provide, so who
needs them?
</p>

<p>As of this writing, the
<a name="INDEX-31" />HTML 4.0 specification has a
number of tags that are deprecated; that is, they are in the process
of being phased out of the language altogether. Eventually, they will
be marked as obsolete, which means that browsers will be neither
required nor encouraged to support them. Among the deprecated tags
are <tt class="literal">&lt;FONT&gt;</tt>,
<tt class="literal">&lt;BASEFONT&gt;</tt>, <tt class="literal">&lt;U&gt;</tt>,
<tt class="literal">&lt;STRIKE&gt;</tt>, <tt class="literal">&lt;S&gt;</tt>, and
<tt class="literal">&lt;CENTER&gt;</tt>. With the advent of style sheets,
none of these HTML tags are necessary.
</p>

<p>As if that weren't enough, there is the very strong possibility
that HTML will be gradually replaced by the
<a name="INDEX-32" /> <a name="INDEX-33" />Extensible Markup
Language (XML). XML is much more complicated than HTML, but it is
also far more powerful and flexible. Despite this, XML does not, of
itself, provide any way to declare style tags such as
<tt class="literal">&lt;I&gt;</tt> or <tt class="literal">&lt;CENTER&gt;</tt>.
Instead, it is quite probable that XML documents will rely on style
sheets to determine the appearance of documents. While the style
sheets used with XML may not be CSS, they will probably be whatever
follows CSS and very closely resembles it. Therefore, learning
<a name="INDEX-34" />CSS now
will give authors a big advantage when the time comes to make the
jump to an XML-based Web.<a name="INDEX-35" />
</p>

</div>


<hr width="684" align="left" />
<div class="navbar"><table width="684" border="0"><tr><td align="left" valign="top" width="228"><a href="ch01_01.htm"><img alt="Previous" border="0" src="../gifs/txtpreva.gif" /></a></td><td align="center" valign="top" width="228"><a href="index.htm"><img alt="Home" border="0" src="../gifs/txthome.gif" /></a></td><td align="right" valign="top" width="228"><a href="ch01_03.htm"><img alt="Next" border="0" src="../gifs/txtnexta.gif" /></a></td></tr><tr><td align="left" valign="top" width="228">1. HTML and CSS</td><td align="center" valign="top" width="228"><a href="index/index.htm"><img alt="Book Index" border="0" src="../gifs/index.gif" /></a></td><td align="right" valign="top" width="228">1.3. Limitations of CSS</td></tr></table></div>
<hr width="684" align="left" />

<img alt="Library Navigation Links" border="0" src="../gifs/navbar.gif" usemap="#library-map" />
<p><font size="-1"><a href="copyrght.htm">Copyright &copy; 2002</a> O'Reilly &amp; Associates. All rights reserved.</font></p>

<map name="library-map"><area href="../index.htm" coords="0,1,78,93" shape="rect" /><area href="../wdesign/index.htm" coords="80,2,155,96" shape="rect" /><area href="../xhtml/index.htm" coords="158,0,263,97" shape="rect" /><area href="../audio/index.htm" coords="265,1,335,97" shape="rect" /><area href="index.htm" coords="338,1,434,93" shape="rect" /><area href="../action/index.htm" coords="439,0,540,102" shape="rect" /><area href="../infoarch/index.htm" coords="544,0,685,102" shape="rect" /></map>

</body></html>