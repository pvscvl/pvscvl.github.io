<html><head><title>Text Properties (Cascading Style Sheets: The Definitive Guide)</title><link rel="stylesheet" type="text/css" href="style/style.css" />

<meta name="DC.Creator" content="Eric A. Meyer" /><meta name="DC.Format" content="text/xml" scheme="MIME" /><meta name="DC.Language" content="en-US" /><meta name="DC.Publisher" content="O'Reilly &amp; Associates, Inc." /><meta name="DC.Source" scheme="ISBN" content="1565926226L" /><meta name="DC.Subject.Keyword" content="stuff" /><meta name="DC.Title" content="Cascading Style Sheets: The Definitive Guide" /><meta name="DC.Type" content="Text.Monograph" />

</head><body bgcolor="#ffffff">

<img alt="Book Home" border="0" src="gifs/smbanner.gif" usemap="#banner-map" /><map name="banner-map"><area shape="rect" coords="1,-2,616,66" href="index.htm" alt="Cascading Style Sheets: The Definitive Guide" /><area shape="rect" coords="629,-11,726,25" href="jobjects/fsearch.htm" alt="Search this book" /></map>

<div class="navbar"><table width="684" border="0"><tr><td align="left" valign="top" width="228"><a href="ch03_06.htm"><img alt="Previous" border="0" src="../gifs/txtpreva.gif" /></a></td><td align="center" valign="top" width="228"><a href="index.htm">Cascading Style Sheets: The Definitive Guide</a></td><td align="right" valign="top" width="228"><a href="ch04_02.htm"><img alt="Next" border="0" src="../gifs/txtnexta.gif" /></a></td></tr></table></div>
<hr width="684" align="left" />



<h1 class="chapter">Chapter 4. Text Properties</h1>
<div class="htmltoc"><h4 class="tochead">Contents:</h4><p>
<a href="ch04_01.htm">Manipulating Text</a><br />
<a href="ch04_02.htm">Summary</a><br /></p></div>

<p>While your web design efforts may be largely focused on picking the
right colors and getting the coolest look for your pages, when it
comes right down to it, you'll probably spend most of your time
worrying about where text will go and how it will look. This concern
gave rise to HTML tags such as <tt class="literal">&lt;FONT&gt;</tt> and
<tt class="literal">&lt;CENTER&gt;</tt>, which give you some measure of
control over the appearance and placement of text.
</p>

<p>Because of this fact, much of CSS is concerned with properties that
affect text in one way or another. In CSS1, the properties are split
up into two sections: "Text Properties" and "Font
Properties." This chapter is devoted to explaining the former.
We'll tackle fonts in <a href="ch05_01.htm">Chapter 5, "Fonts"</a>
 <em class="emphasis">--</em>  they're quite complicated in their
own way and so deserve a chapter all their own.
</p>

<div class="sect1"><a name="css-CHP-4-SECT-1" />
<h2 class="sect1">4.1. Manipulating Text</h2>

<p>You may well wonder what the difference is between text and fonts.
Simply put, text is the content. The font used to display it is just
one more way of altering the appearance of the text. Before we get
into fonts, though, there are some simpler ways to affect the
appearance of your text. Besides, some of the things we discuss here
will be important when we discuss the font properties, so it makes
more sense to discuss the text properties first.
</p>

<p>With the text properties, you can affect the position of text in
relation to the rest of the line, and do things like superscripting,
underlining, and changing the capitalization. You can even simulate,
to a limited degree, the use of the Tab key on a typewriter.
</p>

<a name="css-CHP-4-SECT-1.1" /><div class="sect2">
<h3 class="sect2">4.1.1. Indentation and Horizontal Alignment </h3>

<p>It's best to start with a discussion of how you can affect the
horizontal positioning of text within a line. This is not the same as
actual positioning, which is done with respect to the page itself.
Think of these properties as ways to affect how the lines of text are
laid out, as you might do when creating a newsletter or writing a
report.
</p>

<a name="css-CHP-4-SECT-1.1.1" /><div class="sect3">
<h3 class="sect3">4.1.1.1. Indenting text</h3>

<p><a name="INDEX-354" /> <a name="INDEX-355" />One
of the most sought-after effects in text formatting on the Web is the
ability to indent the first line of a paragraph. (Close behind that
is the desire to eliminate the "blank line" between
paragraphs, which is discussed in <a href="ch07_01.htm">Chapter 7, "Boxes and Borders"</a>). Some
sites solve this by placing a small transparent image before the
first letter in a paragraph, thus shoving the text over, and others
use the utterly nonstandard
<tt class="literal">SPACER</tt><a name="INDEX-356" />
tag to get a similar effect. There is a better way, thanks to CSS.
</p>

<a name="css-CHP-4-SIDEBAR-1" /><blockquote><table border="1" cellpadding="6"><tr><td>
<h3 class="objtitle">text-indent</h3>

<dl>
<dt><b>Values</b></dt>
<dd>
<p>&lt;length&gt; | &lt;percentage&gt;</p>
</dd>

</dl>

<dl>
<dt><b>Initial value</b></dt>
<dd>
<p><tt class="literal">0</tt></p>
</dd>

</dl>

<dl>
<dt><b>Inherited</b></dt>
<dd>
<p>yes</p>
</dd>

</dl>

<dl>
<dt><b>Applies to</b></dt>
<dd>
<p>block-level elements</p>
</dd>

</dl>

<a name="ch04-83116" /><blockquote><h4>WARNING</h4>
<p>Percentage values refer to parent element's width.</p>
</blockquote>
</td></tr></table></blockquote>

<p><a name="INDEX-357" />Using
<tt class="literal">text-indent</tt>, any element can have its
<a name="INDEX-358" />first line indented by a given
length -- even if that length is negative. The most common use for
this property, of course, is to indent the first line of paragraphs:
</p>

<blockquote><pre class="code">P {text-indent: 0.25in;}</pre></blockquote>

<p>This rule will cause the first line of any paragraph to be indented a
quarter-inch, as shown in <a href="ch04_01.htm">Figure 4-1</a>.
</p>

<a name="css-CHP-4-FIG-1" /><div class="figure"><img height="59" alt="Figure 4-1" src="figs/css.0401.gif" width="323" /></div><h4 class="objtitle">Figure 4-1. Text indenting</h4>

<p>In general, <tt class="literal">text-indent</tt> can be applied to any
block-level element, such as <tt class="literal">PRE</tt>,
<tt class="literal">H1</tt>, or <tt class="literal">BLOCKQUOTE</tt>. You
can't apply it to inline elements, such as
<tt class="literal">STRONG</tt> or <tt class="literal">A</tt>, nor can you use it
on replaced elements such as
<a name="INDEX-359" />images -- which makes sense, of
course. However, if you have an image within the first line of a
block-level element like a paragraph, it will be shifted over with
the rest of the text, as shown in <a href="ch04_01.htm">Figure 4-2</a>.
</p>

<a name="css-CHP-4-FIG-2" /><div class="figure"><img height="86" alt="Figure 4-2" src="figs/css.0402.gif" width="327" /></div><h4 class="objtitle">Figure 4-2. Text indenting and images</h4>

<p>It's possible to set negative values for
<tt class="literal">text-indent</tt>, which can be used in a number of
interesting ways. The most common is known as a
"<a name="INDEX-360" />hanging indent," where the first
line hangs out to the left of the rest of the element, as shown in
<a href="ch04_01.htm">Figure 4-3</a>:
</p>

<blockquote><pre class="code">P {text-indent: -4em;}</pre></blockquote>

<a name="css-CHP-4-FIG-3" /><div class="figure"><img height="130" alt="Figure 4-3" src="figs/css.0403.gif" width="295" /></div><h4 class="objtitle">Figure 4-3. Negative text indenting</h4>

<p>As you can see in <a href="ch04_01.htm">Figure 4-3</a>, there is an inherent
danger in setting a negative value for
<tt class="literal">text-indent</tt>: the first three words ("This is
a") have been chopped off by the left edge of the browser
window. In order to avoid such display problems, it is generally
advisable to use a margin or some padding that will accommodate the
negative indentation, as shown in <a href="ch04_01.htm">Figure 4-4</a>:
</p>

<blockquote><pre class="code">P {text-indent: -4em; padding-left: 4em;}</pre></blockquote>

<p>Negative indents can occasionally be used to one's advantage.
Consider the following example, demonstrated in <a href="ch04_01.htm">Figure 4-5</a>, which adds a floated
<a name="INDEX-361" />image
to the mix:
</p>

<blockquote><pre class="code">P.hang {text-indent: -30px;}

&lt;P CLASS="hang"&gt;&lt;IMG SRC="floater.gif" WIDTH="30px" HEIGHT="60px" 
ALIGN="left" ALT="Floated"&gt;This paragraph has a negatively indented first 
line, which overlaps the floated image which precedes the text.  Subsequent 
lines do not overlap the image, since they are not indented in any way.&lt;/P&gt;</pre></blockquote>

<a name="css-CHP-4-FIG-4" /><div class="figure"><img alt="Figure 4-4" src="figs/css.0405.gif" /></div><h4 class="objtitle">Figure 4-4. Floated images and negative text-indenting</h4>

<a name="css-CHP-4-FIG-5" /><div class="figure"><img alt="Figure 4-5" src="figs/css.0404.gif" /></div><h4 class="objtitle">Figure 4-5. Accounting for negative text-indenting</h4>

<p>Many interesting designs can be achieved using this simple technique.
<a href="ch04_01.htm">Figure 4-6</a> shows one example, where the first line
of text has been indented <tt class="literal">-40px</tt>.
</p>

<a name="css-CHP-4-FIG-6" /><div class="figure"><img height="145" alt="Figure 4-6" src="figs/css.0406.gif" width="431" /></div><h4 class="objtitle">Figure 4-6. Negative indents and floating images</h4>

<p>Any unit of length may be used with <tt class="literal">text-indent</tt>.
In addition, percentage values are allowed. In this case, the
percentage refers to the width of the parent element being indented.
Thus, if you set the indent value to <tt class="literal">5%</tt>, the first
line of an affected element will be indented by 5% of the parent
element's width, as shown in <a href="ch04_01.htm">Figure 4-7</a>:
</p>

<blockquote><pre class="code">DIV {width: 400px;}
P {text-indent: 5%;}

&lt;P&gt;This paragraph is contained inside a DIV which is 400px wide, so the 
first line of the paragraph is indented 20px (400 * 5% = 20).  This is because 
percentages are computed with respect to the width of the parent element.&lt;/P&gt;</pre></blockquote>

<a name="css-CHP-4-FIG-7" /><div class="figure"><img height="66" alt="Figure 4-7" src="figs/css.0407.gif" width="388" /></div><h4 class="objtitle">Figure 4-7. Text-indenting with percentages</h4>

<p>Note that this indentation will only apply to the first line of an
element, even if you insert line breaks. Thus, as <a href="ch04_01.htm">Figure 4-8</a> shows:
</p>

<blockquote><pre class="code">DIV {width: 400px;}
P {text-indent: 5%;}

&lt;DIV&gt;
&lt;P&gt;This paragraph is contained inside a DIV which is 400px wide, so the
first line of the paragraph is indented 20px (400 * 5% = 20).  Subsequent 
lines within the same element are not indented,&lt;BR&gt;
even if they follow a&lt;BR&gt;
line-break.&lt;/P&gt;
&lt;P&gt;Once again, the first line of this paragraph is indented by 20px, 
but other lines in the same element are not.&lt;/P&gt;
&lt;/DIV&gt;</pre></blockquote>

<a name="css-CHP-4-FIG-8" /><div class="figure"><img height="145" alt="Figure 4-8" src="figs/css.0408.gif" width="389" /></div><h4 class="objtitle">Figure 4-8. Text-indenting and line breaks</h4>

<p>The interesting part about <tt class="literal">text-indent</tt> is that
it's inherited, but what's inherited is the computed
value, not the declared value. Take the following markup:
</p>

<blockquote><pre class="code">BODY {width: 500px;}
DIV {width: 500px; text-indent: 10%;}
P {width: 200px;}

&lt;DIV&gt;
This first line of the DIV is indented by 50 pixels.
&lt;P&gt;This paragraph is 200px wide, and the first line of the paragraph 
is indented 50px.  This is because computed values for 'text-indent' 
are inherited, instead of the declared values.&lt;/P&gt;
&lt;/DIV&gt;</pre></blockquote>

<p>Even though the paragraph is only 200 pixels wide, its first line is
indented by 50 pixels (as <a href="ch04_01.htm">Figure 4-9</a> shows), which
is the inherited<a name="INDEX-362" /> value for<a name="INDEX-363" /> <a name="INDEX-364" />
<tt class="literal">text-indent</tt>.
</p>

<a name="css-CHP-4-FIG-9" /><div class="figure"><img height="192" alt="Figure 4-9" src="figs/css.0409.gif" width="350" /></div><h4 class="objtitle">Figure 4-9. Inherited text-indenting</h4>

</div>

<a name="css-CHP-4-SECT-1.1.2" /><div class="sect3">
<h3 class="sect3">4.1.1.2. Aligning text</h3>

<p><a name="INDEX-365" /> <a name="INDEX-366" />
<a name="INDEX-367" />Even <a name="INDEX-368" />more basic than
<tt class="literal">text-indent</tt> is the property
<tt class="literal">text-align</tt>, which affects how lines of text in an
element are aligned with respect to one another. There are four
values; the first three are pretty simple, but the fourth has a few
complexities.
</p>

<a name="css-CHP-4-SIDEBAR-2" /><blockquote><table border="1" cellpadding="6"><tr><td>
<h4 class="objtitle">text-align</h4>

<dl>
<dt><b>Values</b></dt>
<dd>
<p><tt class="literal">left</tt> | <tt class="literal">center</tt> |
<tt class="literal">right</tt> | <tt class="literal">justify</tt>
</p>
</dd>

</dl>

<dl>
<dt><b>Initial value</b></dt>
<dd>
<p>UA specific</p>
</dd>

</dl>

<dl>
<dt><b>Inherited</b></dt>
<dd>
<p>yes</p>
</dd>

</dl>

<dl>
<dt><b>Applies to</b></dt>
<dd>
<p>block-level elements</p>
</dd>

</dl>
</td></tr></table></blockquote>

<p>The fastest way to understand how these values work is to examine
<a href="ch04_01.htm">Figure 4-10</a>.
</p>

<a name="css-CHP-4-FIG-10" /><div class="figure"><img height="156" alt="Figure 4-10" src="figs/css.0410.gif" width="366" /></div><h4 class="objtitle">Figure 4-10. Behaviors of the text-align property</h4>

<p><tt class="literal">text-align</tt> is another property that only applies
to block-level elements such as paragraphs. It isn't possible
to center an anchor within its line without aligning the rest of the
line (nor would you really want to).
</p>

<p>The rule <tt class="literal">text-align:</tt> <tt class="literal">center</tt> can
be used to replace the operation of the
<tt class="literal">CENTER</tt><a name="INDEX-369" />
tag, as shown in <a href="ch04_01.htm">Figure 4-11</a>:
</p>

<blockquote><pre class="code">H1 {text-align: center;}</pre></blockquote>

<a name="css-CHP-4-FIG-11" /><div class="figure"><img height="75" alt="Figure 4-11" src="figs/css.0411.gif" width="391" /></div><h4 class="objtitle">Figure 4-11. Centering text with the text-align property</h4>

<p>You can also cause the centering of elements that have both text and
<a name="INDEX-370" />images within them -- again, it will
act just like the <tt class="literal">CENTER</tt> tag, as <a href="ch04_01.htm">Figure 4-12</a> and the following markup show:
</p>

<blockquote><pre class="code">DIV.first {text-align: center;}

&lt;H1&gt;An Un-centered H1 Element&lt;/H1&gt;
&lt;DIV CLASS="first"&gt;
&lt;P&gt;
This is a paragraph without any alignment styles applied to it.  However, it is 
contained within a DIV element which has alignment set, and this alignment will 
inherit into the paragraph.  This will also affect any images which appear within 
the DIV, such as this one &lt;IMG SRC="star.gif"&gt; or the next one.
&lt;/P&gt;
&lt;IMG SRC="floater.gif"&gt;
&lt;/DIV&gt;</pre></blockquote>

<a name="css-CHP-4-FIG-12" /><div class="figure"><img height="177" alt="Figure 4-12" src="figs/css.0412.gif" width="393" /></div><h4 class="objtitle">Figure 4-12. Centering text and inline images with the text-align property</h4>

<p>However, if you want to center an image all by itself,
<tt class="literal">text-align</tt> is <em class="emphasis">not</em> the correct
way to go about it. Given the following markup, you'll get the
result in <a href="ch04_01.htm">Figure 4-13</a>:
</p>

<blockquote><pre class="code">IMG {text-align: center;}</pre></blockquote>

<a name="css-CHP-4-FIG-13" /><div class="figure"><img height="139" alt="Figure 4-13" src="figs/css.0413.gif" width="377" /></div><h4 class="objtitle">Figure 4-13. The text-align property and block-level images</h4>

<p>The basic reason the image isn't centered is that it
isn't a block-level element. The only way to center an
<a name="INDEX-371" />image
using <tt class="literal">text-align</tt> is to wrap a
<tt class="literal">DIV</tt><a name="INDEX-372" />
around the image, and set the <tt class="literal">DIV</tt> 's
contents to be centered:
</p>

<blockquote><pre class="code">&lt;DIV STYLE="text-align: center;"&gt;
   &lt;IMG SRC="shiny.gif" ALT="Shiny object"&gt;
&lt;/DIV&gt;</pre></blockquote>

<p>As <a href="ch04_01.htm">Figure 4-14</a> shows, this will center the image.</p>

<a name="css-CHP-4-FIG-14" /><div class="figure"><img height="52" alt="Figure 4-14" src="figs/css.0414.gif" width="177" /></div><h4 class="objtitle">Figure 4-14. Centering images the hard way</h4>

<p>For Western languages, which are read from left to right, the default
value of <tt class="literal">text-align</tt> will be
<tt class="literal">left</tt>, with text lining up on the left margin and
having a ragged right margin (otherwise known as
"left-to-right" text). Other languages, such as
<a name="INDEX-373" /> <a name="INDEX-374" />Hebrew and
<a name="INDEX-375" />Arabic, will default to
<tt class="literal">right</tt> instead, since these languages are written
right-to-left. <tt class="literal">center</tt> has the expected effect, in
that it causes each line of text to be centered within the element.
</p>

<p><a name="INDEX-376" />
<a name="INDEX-377" />As
for <tt class="literal">justify</tt>, there are a few issues to consider.
As <a href="ch04_01.htm">Figure 4-15</a> shows, justified text is formatted
such that the ends of each line of text are placed at the inner edge
of the parent element. This is accomplished by changing the spacing
between words and letters so that each line is precisely the same
length. This is an effect common to the print world (such as in this
book), but under CSS, some extra considerations come into play.
</p>

<a name="css-CHP-4-FIG-15" /><div class="figure"><img height="200" alt="Figure 4-15" src="figs/css.0415.gif" width="339" /></div><h4 class="objtitle">Figure 4-15. Justified text</h4>

<p>CSS does not specify how justified text should be "stretched
out" to fill the space between the left and right edges of the
parent, so some user agents might add extra space only between words,
while others might distribute the extra space between letters.
It's also possible that some user agents will reduce space on
some lines, thus shmushing text together a bit more than usual. All
of these various choices will affect the appearance of an element,
and possibly even change its height, depending on how many lines
result from the justification choices the user agent makes (see <a href="ch04_01.htm">Figure 4-16</a>).
</p>

<a name="css-CHP-4-FIG-16" /><div class="figure"><img height="200" alt="Figure 4-16" src="figs/css.0416.gif" width="238" /></div><h4 class="objtitle">Figure 4-16. Justification choices</h4>

<p><a name="INDEX-378" />Another
problem is that CSS doesn't say anything about how hyphenation
should be handled. Most justified text uses hyphenation to break long
words across two lines, thus reducing the space between words and
improving the appearance of lines (see <a href="ch04_01.htm">Figure 4-17</a>).
</p>

<a name="css-CHP-4-FIG-17" /><div class="figure"><img height="200" alt="Figure 4-17" src="figs/css.0417.gif" width="259" /></div><h4 class="objtitle">Figure 4-17. Justification with hyphenation</h4>

<a name="ch04-6-fm2xml" /><blockquote><h4>TIP</h4>
<p>The fact that hyphenation is not described in CSS has more to do with
the fact that different <a name="INDEX-379" />languages have different hyphenation rules.
Rather than try to concoct a set of rules that would most likely be
incomplete, the specification simply avoids the problem. In addition,
this allows user agents to employ their own hyphenation rules, and
improve them over time without being hindered by anything in the CSS
specification.
</p>
</blockquote>

<p>Since there is no hyphenation in CSS, user agents are unlikely to be
able to perform any automatic hyphenation. Thus, justified text will
very likely be less attractive under CSS than it might be in print,
especially when elements become so narrow that only a few words can
fit on each line, as shown in <a href="ch04_01.htm">Figure 4-18</a>. You can
still justify text, of course, but be aware of the
drawbacks<a name="INDEX-380" />.
</p>

<a name="css-CHP-4-FIG-18" /><div class="figure"><img height="400" alt="Figure 4-18" src="figs/css.0418.gif" width="105" /></div><h4 class="objtitle">Figure 4-18. Justification without hyphenation in narrow circumstances</h4>

<a name="ch04-7-fm2xml" /><blockquote><h4>WARNING</h4>
<p>While almost every
<a name="INDEX-381" />browser that supports CSS will handle most
values of <tt class="literal">text-align</tt>, they often fall down when
handling <tt class="literal">justify</tt>. Navigator 4 does support
<tt class="literal">justify</tt>, but it's fairly buggy -- it most
often breaks down within tables. Internet Explorer 4.x does not
support <tt class="literal">justify</tt>, while IE5 does, and Opera 3.6
supports it as<a name="INDEX-382" /> well.<a name="INDEX-383" /> <a name="INDEX-384" /> <a name="INDEX-385" />
</p>
</blockquote>

</div>

<a name="css-CHP-4-SECT-1.1.3" /><div class="sect3">
<h3 class="sect3">4.1.1.3. Handling whitespace</h3>

<p><a name="INDEX-386" />
<a name="INDEX-387" /> <a name="INDEX-388" />For a change of pace, let's talk
about the property <tt class="literal">white-space</tt>, which can greatly
impact how text is actually displayed.
</p>

<tr>
<td>

<dl>
<dt><h3>white-space</h3></dt>
<dt><b>Values</b></dt>
<dd>
<p><tt class="literal">pre</tt> | <tt class="literal">nowrap</tt> |
<tt class="literal">normal</tt>
</p>
</dd>

</dl>

<dl>
<dt><b>Initial value</b></dt>
<dd>
<p><tt class="literal">normal</tt></p>
</dd>

</dl>

<dl>
<dt><b>Inherited</b></dt>
<dd>
<p>no </p>
</dd>

</dl>

<dl>
<dt><b>Applies to</b></dt>
<dd>
<p>block-level elements</p>
</dd>

</dl>
</td>
</tr>

</table>

<p>Using this property, you can affect how browser treats the whitespace
between words and lines of text. To a certain extent,
<a name="INDEX-389" />HTML already does this: it collapses any
whitespace down to a single space. Thus, the following markup would
be rendered as shown in <a href="ch04_01.htm">Figure 4-19</a>, with only one
space between each word:
</p>

<blockquote><pre class="code">&lt;P&gt;This    paragraph   has     many
    spaces        in it.&lt;/P&gt;</pre></blockquote>

<a name="css-CHP-4-FIG-19" /><div class="figure"><img height="17" alt="Figure 4-19" src="figs/css.0419.gif" width="234" /></div><h4 class="objtitle">Figure 4-19. Displaying a paragraph with many spaces</h4>

<p>You can explicitly set this behavior with the following declaration:</p>

<blockquote><pre class="code">P {white-space: normal;}</pre></blockquote>

<p>This rule will tell the browser that it should do as
<a name="INDEX-390" />browsers have always done, and discard
extra whitespace. Any extra spaces and carriage returns are
completely ignored by the browser.
</p>

<p>Should you set <tt class="literal">white-space</tt> to
<tt class="literal">pre</tt>, however, the whitespace in affected elements
will be treated as though the elements were <tt class="literal">PRE</tt>
elements, in that whitespace would not be ignored, as shown in <a href="ch04_01.htm">Figure 4-20</a>:
</p>

<blockquote><pre class="code">P {white-space: pre;}

&lt;P&gt;This    paragraph   has     many
    spaces        in it.&lt;/P&gt;</pre></blockquote>

<a name="css-CHP-4-FIG-20" /><div class="figure"><img height="32" alt="Figure 4-20" src="figs/css.0420.gif" width="196" /></div><h4 class="objtitle">Figure 4-20. Honoring the spaces in markup</h4>

<p>With a <tt class="literal">white-space</tt> value of
<tt class="literal">pre</tt>, the browser will pay attention to extra
spaces and even carriage returns. In this respect, and in this
respect alone, any element can be made to act like a
<tt class="literal">PRE</tt> element.
</p>

<p>On the other side of the coin is <tt class="literal">nowrap</tt>, which
prevents text from wrapping within a block-level element, except
through the use of <tt class="literal">&lt;BR&gt;</tt> elements. This is
rather similar to setting a table cell not to wrap through
<tt class="literal">&lt;TD</tt> <tt class="literal">NOWRAP&gt;</tt>, except that
<tt class="literal">white-space</tt> value can be applied to any
block-level element. Thus you can get effects as shown in <a href="ch04_01.htm">Figure 4-21</a>:
</p>

<blockquote><pre class="code">&lt;P STYLE="white-space: nowrap;"&gt;This paragraph is not allowed to wrap,
which means that the only way to end a line is to insert a line-break
element.  If no such element is inserted, then the line will go forever,
forcing the user to scroll horizontally to read whatever can't be
initially displayed &lt;BR&gt;in the browser window.&lt;/P&gt;</pre></blockquote>

<a name="css-CHP-4-FIG-21" /><div class="figure"><img height="105" alt="Figure 4-21" src="figs/css.0421.gif" width="288" /></div><h4 class="objtitle">Figure 4-21. Suppressing text-wrapping with the white-space property</h4>

<p>In fact, you can use <tt class="literal">white-space</tt> to replace the
<tt class="literal">nowrap</tt> attribute on <a name="INDEX-391" />table cells, as demonstrated in <a href="ch04_01.htm">Figure 4-22</a>:
</p>

<blockquote><pre class="code">TD {white-space: nowrap;}

&lt;TABLE&gt;&lt;TR&gt;
&lt;TD&gt;The contents of this cell are not wrapped.&lt;/TD&gt;
&lt;TD&gt;Neither are the contents of this cell.&lt;/TD&gt;
&lt;TD&gt;Nor this one, or any after it, or any other cell in this table.&lt;/TD&gt;
&lt;TD&gt;CSS prevents any wrapping from happening.&lt;/TD&gt;
&lt;/TR&gt;&lt;/TABLE&gt;</pre></blockquote>

<a name="css-CHP-4-FIG-22" /><div class="figure"><img height="103" alt="Figure 4-22" src="figs/css.0422.gif" width="299" /></div><h4 class="objtitle">Figure 4-22. Using the white-space: nowrap property to suppress wrapping in table cells.</h4>

<a name="ch04-10-fm2xml" /><blockquote><h4>WARNING</h4>
<p>Although <tt class="literal">white-space</tt> may seem like an insanely
useful property, as of this writing, it isn't supported by
anything except IE5 for Macintosh and preview builds of Netscape 6.
Not even the ability to use <tt class="literal">nowrap</tt> for table cells
is available in other browsers, despite the fact that it would seem
to be a very simple behavior to support.<a name="INDEX-392" /> <a name="INDEX-393" /> <a name="INDEX-394" />
</p>
</blockquote>

</div>
</div>
<a name="css-CHP-4-SECT-1.2" /><div class="sect2">
<h3 class="sect2">4.1.2. The Height of Lines</h3>

<p><a name="INDEX-395" /> <a name="INDEX-396" />
<a name="INDEX-397" />As opposed to the size of a font, which will
be discussed in <a href="ch05_01.htm">Chapter 5, "Fonts"</a>,
<tt class="literal">line-height</tt> refers to the distance between the
baselines of lines of text -- sort of. In fact, this property
determines the amount by which the height of each element's
line box is increased or decreased. In the simplest cases, it's
a way of increasing (or decreasing) the vertical space between lines
of text, but this is a misleadingly simple way of looking at how
<tt class="literal">line-height</tt> works. If you're familiar with
desktop publishing packages, then <tt class="literal">line-height</tt>
controls the
<em class="filename">leading</em><a name="INDEX-398" />,
which is the extra space between lines of text above and beyond the
font's size. The difference between the value of
<tt class="literal">line-height</tt> and the size of the font is the
leading.
</p>

<a name="css-CHP-4-SIDEBAR-3" /><blockquote><table border="1" cellpadding="6"><tr><td>



<dl>
<dt><h3>line-height</h3></dt>
<dt><b>Values</b></dt>
<dd>
<p>&lt;length&gt; | &lt;percentage&gt; | &lt;number&gt; |
<tt class="literal">normal</tt>
</p>
</dd>

</dl>

<dl>
<dt><b>Initial value</b></dt>
<dd>
<p><tt class="literal">normal</tt></p>
</dd>

</dl>

<dl>
<dt><b>Inherited</b></dt>
<dd>
<p>yes</p>
</dd>

</dl>

<dl>
<dt><b>Applies to</b></dt>
<dd>
<p>all elements</p>
</dd>

</dl>

<a name="ch04-85255" /><blockquote><h4>WARNING</h4>
<p>Percentage values are relative to the font size of the element.</p>
</blockquote>
</td></tr></table></blockquote>

<p>In technical terms, every element in a line generates a
<em class="filename">content area</em><a name="INDEX-399" />, which is determined by the size of the
font. This content area also generates an <em class="filename">inline
box</em><a name="INDEX-400" />
which is, in the absence of any other factors, exactly equal to the
content area. However, the leading generated by
<tt class="literal">line-height</tt> can increase or decrease the height of
the inline box. This is done by dividing the leading in half and
applying each half-leading to the top and bottom of the content area.
The result is the inline box. For example, if the content area is 14
points tall, and the <tt class="literal">line-height</tt> is set to 18
points, then the difference (4 points) is divided in half, and each
half applied to the top and bottom of the inline box to arrive at an
inline box which is 18 points tall. This sounds like a roundabout way
to describe how line height works, but rest assured that there are
excellent reasons for the description. See <a href="ch08_01.htm">Chapter 8, "Visual Formatting"</a>, for a detailed explanation of the inline
formatting model.
</p>

<p>If you use the default value of <tt class="literal">normal</tt>, the amount
of vertical space between lines will be the user agent's
default. This is generally somewhere between 1.0 and 1.2 times the
size of the font, but this can vary by user agent.
</p>

<p>Allowed lengths other than <tt class="literal">em</tt> and
<tt class="literal">ex</tt> are simple length measures (e.g.,
<tt class="literal">0.125in</tt>). The usual caveats apply here; even if
you use a valid length measure like <tt class="literal">4cm</tt> , the
browser (or the operating system) may have an incorrect metric for
real-world measures. Thus, when you display your document on a
monitor, a ruler might reveal that the line height was not exactly
four centimeters. For more details, see <a href="ch03_01.htm">Chapter 3, "Units and Values"</a>.
</p>

<p>Percentages, as well as <tt class="literal">em</tt> and
<tt class="literal">ex</tt>, are calculated with respect to the
element's <tt class="literal">font-size</tt>. Thus, this markup is
relatively straightforward, as 
<a href="ch04_01.htm">Figure 4-23</a> shows:
</p>

<blockquote><pre class="code">BODY {line-height: 14pt; font-size: 13pt;}
P.one {line-height: 1.2em;}
P.two {font-size: 10pt; line-height: 150%;}
P.three {line-height: 0.33in;}

&lt;P&gt;This paragraph inherits a 'line-height' of 14pt from the BODY, as well as 
a 'font-size' of 13pt.&lt;/P&gt;
&lt;P CLASS="one"&gt;This paragraph has a 'line-height' of 16.8pt (14 * 1.2), so 
it will have slightly more line-height than usual.&lt;/P&gt;
&lt;P CLASS="two"&gt;This paragraph has a 'line-height' of 15pt (10 * 150%), so 
it will have slightly more line-height than usual.&lt;/P&gt;
&lt;P CLASS="three"&gt;This paragraph has a 'line-height' of 0.33in, so it will have 
slightly more line-height than usual.&lt;/P&gt;</pre></blockquote>

<a name="css-CHP-4-FIG-23" /><div class="figure"><img height="177" alt="Figure 4-23" src="figs/css.0423.gif" width="339" /></div><h4 class="objtitle">Figure 4-23. Simple calculations with the line-height property</h4>

<p>However, things get less predictable once the
<tt class="literal">line-height</tt> is inherited from one block-level
element to another. The computed <tt class="literal">line-height</tt>
values are inherited no matter what <tt class="literal">font-size</tt>
might be set for a child element. This can be something of a problem,
as you can see in <a href="ch04_01.htm">Figure 4-24</a>:
</p>

<blockquote><pre class="code">BODY {font-size: 10pt;}
DIV {line-height: 12pt;}
P {font-size: 18pt;}

&lt;DIV&gt;
&lt;P&gt;This paragraph's 'font-size' is 18pt, but the inherited 'line-height' 
is only 12pt.  This may cause the lines of text to overlap each other by 
a small amount.&lt;/P&gt;
&lt;/DIV&gt;</pre></blockquote>

<a name="css-CHP-4-FIG-24" /><div class="figure"><img height="73" alt="Figure 4-24" src="figs/css.0424.gif" width="374" /></div><h4 class="objtitle">Figure 4-24. Small line height, large font size, slight problem</h4>

<p>There are two solutions. One is to set the
<tt class="literal">line-height</tt> explicitly for every element, but this
is not a very practical approach, given that you may have a number of
elements that need such properties. The other possibility is to set a
plain number instead, which actually sets a
<a name="INDEX-401" />scaling factor:
</p>

<blockquote><pre class="code">BODY {font-size: 10pt;}
DIV {line-height: 1.5;}
P {font-size: 18pt;}</pre></blockquote>

<p>When a number is used, the scaling factor is inherited instead of a
computed value. This factor is applied to the element and all of its
child elements, so that each element has a
<tt class="literal">line-height</tt> calculated with respect to its own
<tt class="literal">font-size</tt>, as demonstrated in <a href="ch04_01.htm">Figure 4-25</a>:
</p>

<blockquote><pre class="code">BODY {font-size: 10pt;}
DIV {line-height: 1.5;}
P {font-size: 18pt;}

&lt;DIV&gt;
&lt;P&gt;This paragraph's 'font-size' is 18pt, and since the 'line-height' 
set for the parent DIV is 1.5, the 'line-height' for this paragraph
is 27pt (18 * 1.5).&lt;/P&gt;
&lt;/DIV&gt;</pre></blockquote>

<a name="css-CHP-4-FIG-25" /><div class="figure"><img height="99" alt="Figure 4-25" src="figs/css.0425.gif" width="277" /></div><h4 class="objtitle">Figure 4-25. Using line-height factors to overcome inheritance problems</h4>

<p>As I said previously, although it seems like
<tt class="literal">line-height</tt> distributes extra space both above and
below each line of text, it actually adds (or subtracts) a certain
amount from the top and bottom of an<a name="INDEX-402" /> inline element.
This leads to some odd cases when a line has elements with different
font sizes, but for the moment, let's stick to a simple case.
Assume that the default <tt class="literal">font-size</tt> of a paragraph
is <tt class="literal">12pt</tt> and consider the following:
</p>

<blockquote><pre class="code">P {line-height: 16pt;}</pre></blockquote>

<p>Since the "inherent" line height of 12-point text is 12
points, the preceding rule means that there will be an extra 4 points
of space around each line of text in the paragraph. This extra amount
is divided in two, with half going above each line, and the other
half below. While there is a distance of 16 points between the lines,
this is an indirect result of how the extra space is apportioned.
</p>

<p>Now let's look at a slightly more complex case. Take the
following example:
</p>

<blockquote><pre class="code">BODY {font-size: 10pt;}
P {font-size: 18pt; line-height: 23pt;}
BIG {font-size: 250%;}

&lt;P&gt;This paragraph's 'font-size' is 18pt, and the 'line-height' for this 
paragraph is 23pt. However, a &lt;BIG&gt;larger element&lt;/BIG&gt; within the 
paragraph does not cause the value of 'line-height' to change, which can 
lead to some interesting effects.&lt;/P&gt;</pre></blockquote>

<p>The result shown in <a href="ch04_01.htm">Figure 4-26</a> may look like a
browser bug, but it isn't. It's exactly how the example
markup should be displayed.
</p>

<a name="css-CHP-4-FIG-26" /><div class="figure"><img height="148" alt="Figure 4-26" src="figs/css.0426.gif" width="481" /></div><h4 class="objtitle">Figure 4-26. Possible behavior with the line-height property and inline elements of different sizes</h4>

<p>This is by no means the only oddity which arises from using
<tt class="literal">line-height</tt>. As backwards as it may seem, in <a href="ch04_01.htm">Figure 4-27</a>, the value of <tt class="literal">line-height</tt>
is exactly the same for each and every line in the element, no matter
how far apart they may actually appear to be. This fact will come up
again in <a href="ch04_01.htm">Section 4.1.3, "Vertical Alignment"</a>.
</p>

<a name="css-CHP-4-FIG-27" /><div class="figure"><img height="156" alt="Figure 4-27" src="figs/css.0427.gif" width="350" /></div><h4 class="objtitle">Figure 4-27. Tall images don't change line height</h4>

<p>Again, the actual value for <tt class="literal">line-height</tt> in <a href="ch04_01.htm">Figure 4-27</a> is the same for every line.
</p>

<p>You can take advantage of the fact that
<tt class="literal">line-height</tt> can be set for any element, including
inline elements. Let's return to our previous example and make
one small change by adding a <tt class="literal">line-height</tt> to the
styles for the <tt class="literal">BIG</tt> element. We'll also change the line-height of the <tt class="literal">P</tt> element from 23pt to 27pt.
This will have the
result shown in <a href="ch04_01.htm">Figure 4-28</a>:
</p>

<blockquote><pre class="code">BODY {font-size: 10pt;}
P {font-size: 18pt; line-height: 27pt;}
BIG {font-size: 250%; line-height: 1em;}

&lt;P&gt;This paragraph's 'font-size' is 18pt, and the 'line-height' for this 
paragraph is 27pt. A &lt;BIG&gt;larger element&lt;/BIG&gt; within the paragraph does 
not cause the line's height to change, but setting its 'line-height' does, 
which leads to some interesting effects.&lt;/P&gt;</pre></blockquote>

<a name="css-CHP-4-FIG-28" /><div class="figure"><img height="224" alt="Figure 4-28" src="figs/css.0428.gif" width="456" /></div><h4 class="objtitle">Figure 4-28. Changing the line-height of an inline element</h4>

<p>Setting a <tt class="literal">line-height</tt> of <tt class="literal">1em</tt>
for the <tt class="literal">BIG</tt> element will actually cause its
<tt class="literal">line-height</tt> to be the same size as the
<tt class="literal">BIG</tt> text itself. This has the same effect the
images did: it opens up the entire line of text enough to clearly
display the elements within it. In this case, the effect is due to
the increased <tt class="literal">line-height</tt> of the inline element
<tt class="literal">BIG</tt>, as opposed to the intrinsic size of an image,
but the effect is largely the same.
</p>

<p>The reasons why all of this happens are actually rather complex. For
more details, please refer to the discussion of the inline formatting
model found in <a href="ch08_01.htm">Chapter 8, "Visual Formatting"</a>.
</p>

<a name="css-CHP-4-SECT-1.2.1" /><div class="sect3">
<h3 class="sect3">4.1.2.1. Real-world issues</h3>

<p>As we saw in the preceding section, a scaling factor is the best way
to avoid the kinds of inheritance problems you encounter with length
measures for <tt class="literal">line-height</tt>. It would therefore seem
that using a number is always preferred. Alas, this is not
necessarily so. Internet Explorer 3 will interpret a scaling factor
as a pixel value, so you get something like what's shown in
<a href="ch04_01.htm">Figure 4-29</a>.
</p>

<a name="css-CHP-4-FIG-29" /><div class="figure"><img height="27" alt="Figure 4-29" src="figs/css.0429.gif" width="291" /></div><h4 class="objtitle">Figure 4-29. Internet Explorer 3 and line-height factors mean big trouble</h4>

<p>According to the CSS specification, user agents are free to set
whatever value they think best for the default keyword
<tt class="literal">normal</tt>, but the suggested range is 1.0 to 1.2,
depending on what works best for the display medium and the font in
use. Most browsers seem to use something in the vicinity of 1.2, but
of course that could change with a new browser, or even a new version
of an old browser.<a name="INDEX-403" /> <a name="INDEX-404" />
</p>

</div>
</div>
<a name="css-CHP-4-SECT-1.3" /><div class="sect2">
<h3 class="sect2">4.1.3. Vertical Alignment</h3>

<p><a name="INDEX-405" /> <a name="INDEX-406" />
<a name="INDEX-407" /> <a name="INDEX-408" />The odds are
that you're already, to a certain extent, familiar with the
concept of vertical alignment of text. If you've ever used the
elements <tt class="literal">SUP</tt> and <tt class="literal">SUB</tt> (the
<a name="INDEX-409" />superscript and
<a name="INDEX-410" />subscript elements) or used an image
with markup along the lines of <tt class="literal">&lt;IMG</tt>
<tt class="literal">SRC="foo.gif"</tt>
<tt class="literal">ALIGN="texttop"&gt;</tt>, then you've done some
rudimentary vertical alignment. The CSS property
<tt class="literal">vertical-align</tt> permits all of the alignment you
used to do on inline elements, and more besides.
</p>

<a name="ch04-15-fm2xml" /><blockquote><h4>WARNING</h4>
<p>There is one thing to remember: <tt class="literal">vertical-align</tt> is
<em class="emphasis">not</em> meant to affect the alignment of content in
table cells, or within a block-level element. Under CSS1, there is no
provision for duplicating markup such as <tt class="literal">&lt;TD</tt>
<tt class="literal">valign="top"&gt;</tt>. (This changes under CSS2; see <a href="ch10_07.htm">Section 10.7, "Tables"</a> in <a href="ch10_01.htm">Chapter 10, "CSS2: A Look Ahead"</a>, for more details.)
</p>
</blockquote>

<p>So, let's see what can be done with
<tt class="literal">vertical-align</tt>. This property applies only to
<a name="INDEX-411" />inline elements, although that includes
replaced elements such as images and form inputs, and it is not
inherited.
</p>

<a name="css-CHP-4-SIDEBAR-4" /><blockquote><table border="1" cellpadding="6"><tr><td>

<dl>
<dt><h3>vertical-align</h3></dt>
<dt><b>Values</b></dt>
<dd>
<p><tt class="literal">baseline</tt> | <tt class="literal">sub</tt> |
<tt class="literal">super</tt> | <tt class="literal">bottom</tt> |
<tt class="literal">text-bottom</tt> | <tt class="literal">middle</tt> |
<tt class="literal">top</tt> | <tt class="literal">text-top</tt> |
&lt;percentage&gt;
</p>
</dd>

</dl>

<dl>
<dt><b>Initial value</b></dt>
<dd>
<p><tt class="literal">baseline</tt></p>
</dd>

</dl>

<dl>
<dt><b>Inherited</b></dt>
<dd>
<p>no</p>
</dd>

</dl>

<dl>
<dt><b>Applies to</b></dt>
<dd>
<p>inline elements</p>
</dd>

</dl>

<a name="ch04-11462" /><blockquote><h4>WARNING</h4>
<p>Percentage values refer to the line-height of the element.</p>
</blockquote>
</td></tr></table></blockquote>

<p><tt class="literal">vertical-align</tt> accepts any one of eight keywords,
or a percentage value, but never both. The keywords are a mix of the
familiar and unfamiliar: <tt class="literal">baseline</tt> (the default
value), <tt class="literal">sub</tt>, <tt class="literal">super</tt>,
<tt class="literal">bottom</tt> , <tt class="literal">text-bottom</tt> ,
<tt class="literal">middle</tt>, <tt class="literal">top</tt>, and
<tt class="literal">text-top</tt>. We'll examine how each works in
turn.
</p>

<a name="css-CHP-4-SECT-1.3.1" /><div class="sect3">
<h3 class="sect3">4.1.3.1. Baseline alignment</h3>

<p><tt class="literal">vertical-align:</tt> <tt class="literal">baseline</tt> forces
an element to align its <a name="INDEX-412" />baseline with the baseline of its
parent, which is pretty much what browsers already do anyway. For
example, this markup results in <a href="ch04_01.htm">Figure 4-30</a>:
</p>

<blockquote><pre class="code">B {vertical-align: baseline;}

&lt;P&gt;The baseline of the &lt;B&gt;boldfaced text&lt;/B&gt; is aligned with the baseline 
of this paragraph.&lt;/P&gt;</pre></blockquote>

<a name="css-CHP-4-FIG-30" /><div class="figure"><img height="31" alt="Figure 4-30" src="figs/css.0430.gif" width="284" /></div><h4 class="objtitle">Figure 4-30. Baseline alignment</h4>

<p>In examining <a href="ch04_01.htm">Fiture 4-30</a>, you'll see that it
doesn't look any different than you would expect. It
shouldn't.
</p>

<p>If a vertically aligned element doesn't have a
baseline -- that is, if it's an
<a name="INDEX-413" />image, a form input, or another replaced
element -- then the bottom of the element is aligned with the
baseline of its parent, as <a href="ch04_01.htm">Figure 4-31</a> shows:
</p>

<blockquote><pre class="code">IMG {vertical-align: baseline;}

&lt;P&gt;The image found in this paragraph &lt;IMG SRC="dot.gif" ALT="a dot"&gt; has its 
bottom edge aligned with the baseline of the paragraph.&lt;/P&gt;</pre></blockquote>

<a name="css-CHP-4-FIG-31" /><div class="figure"><img height="49" alt="Figure 4-31" src="figs/css.0431.gif" width="280" /></div><h4 class="objtitle">Figure 4-31. Baseline alignment of an image</h4>

</div>

<a name="css-CHP-4-SECT-1.3.2" /><div class="sect3">
<h3 class="sect3">4.1.3.2. Superscripting and subscripting</h3>

<p>The declaration <tt class="literal">vertical-align:</tt>
<tt class="literal">sub</tt> causes the element to be
"<a name="INDEX-414" />
<a name="INDEX-415" />subscripted."
In general, this means that the element's baseline (or bottom,
if it's a replaced element) is lowered with respect to its
parent's baseline. However, the distance it is lowered is not
defined in the specification, so it may vary from one user agent to
another. Note that <tt class="literal">sub</tt> does
<em class="emphasis">not</em> imply a change in the element's font
size, so it should not cause subscripted text to become smaller (or
larger). Instead, any text in the subscripted element should be, by
default, the same size as text in the parent element, as shown in
<a href="ch04_01.htm">Figure 4-32</a>:
</p>

<blockquote><pre class="code">SUB {vertical-align: sub;}

&lt;P&gt;This paragraph contains &lt;SUB&gt;subscripted&lt;/SUB&gt; text.&lt;/P&gt;</pre></blockquote>

<a name="css-CHP-4-FIG-32" /><div class="figure"><img height="21" alt="Figure 4-32" src="figs/css.0432.gif" width="257" /></div><h4 class="objtitle">Figure 4-32. Subscript alignment</h4>

<p>Of course, you could make the text smaller by using
<tt class="literal">font-size</tt>, but you have to do it yourself.
</p>

<p><tt class="literal">super</tt> acts in a fashion similar to
<tt class="literal">sub</tt>, but in this case, the element's
baseline (or bottom of a replaced element) is raised with respect to
the parent's baseline. Again, the distance the text will be
raised is dependent on the user agent, and there is no implied change
in the size of the font. This is demonstrated in <a href="ch04_01.htm">Figure 4-33</a>:
</p>

<blockquote><pre class="code">SUP {vertical-align: super;}

&lt;P&gt;This paragraph contains &lt;SUP&gt;superscripted&lt;/SUP&gt; text.&lt;/P&gt;</pre></blockquote>

<a name="css-CHP-4-FIG-33" /><div class="figure"><img height="21" alt="Figure 4-33" src="figs/css.0433.gif" width="270" /></div><h4 class="objtitle">Figure 4-33. Superscript alignment</h4>

</div>

<a name="css-CHP-4-SECT-1.3.3" /><div class="sect3">
<h3 class="sect3">4.1.3.3. Bottom feeding</h3>

<p><tt class="literal">vertical-align:</tt> <tt class="literal">bottom</tt> sounds
pretty simple: it aligns the bottom of the element's inline box
with the bottom of the line box. For example, this markup results in
<a href="ch04_01.htm">Figure 4-34</a>:
</p>

<blockquote><pre class="code">IMG.feeder {vertical-align: bottom;}

&lt;P&gt;This paragraph contains an image &lt;IMG SRC="tall.gif" ALIGN="middle" 
ALT="tall image"&gt; which is tall, and another image &lt;IMG SRC="short.gif" 
CLASS="feeder" ALT="short image"&gt; which is not tall.&lt;/P&gt;</pre></blockquote>

<a name="css-CHP-4-FIG-34" /><div class="figure"><img height="92" alt="Figure 4-34" src="figs/css.0434.gif" width="288" /></div><h4 class="objtitle">Figure 4-34. Bottom alignment</h4>

<p>As you can see from <a href="ch04_01.htm">Figure 4-34</a>, the second line of
the paragraph contains two images, and their bottom edges are aligned
with each other. (The first image has been set to a middle alignment
using the HTML attribute <tt class="literal">align</tt>. We'll look
into ways of achieving a similar effect with CSS a little later in
this chapter.)
</p>

<p><tt class="literal">vertical-align:</tt>
<tt class="literal">text-bottom</tt><a name="INDEX-416" /> refers to the
bottom of the text in the line. Replaced elements, or indeed nontext
elements of any kind, are ignored for the purposes of this value.
Instead, a "default" text box is considered. This default
box is derived from the <tt class="literal">font-size</tt> of the parent
element. The bottom of the aligned element's inline box is then
aligned with the bottom of default text box. Thus, given the
following markup, we get a situation such as that shown in <a href="ch04_01.htm">Figure 4-35</a>:
</p>

<blockquote><pre class="code">IMG.tbot {vertical-align: text-bottom;}

&lt;P&gt;Here: a &lt;IMG SRC="tall.gif" ALIGN="middle" 
ALT="tall image"&gt; tall image, and then a &lt;IMG SRC="short.gif" 
CLASS="tbot" ALT="short image"&gt; short image.&lt;/P&gt;</pre></blockquote>

<a name="css-CHP-4-FIG-35" /><div class="figure"><img height="63" alt="Figure 4-35" src="figs/css.0435.gif" width="323" /></div><h4 class="objtitle">Figure 4-35. Text-bottom alignment</h4>

</div>

<a name="css-CHP-4-SECT-1.3.4" /><div class="sect3">
<h3 class="sect3">4.1.3.4. Getting on top</h3>

<p>Employing <tt class="literal">vertical-align:</tt>
<tt class="literal">top</tt><a name="INDEX-417" /> <a name="INDEX-418" /> has pretty much
the opposite effect of <tt class="literal">bottom</tt> . Likewise,
<tt class="literal">vertical-align:</tt> <tt class="literal">text-top</tt> is the
reverse of <tt class="literal">text-bottom</tt> . <a href="ch04_01.htm">Figure 4-36</a> shows how the following markup would be
rendered:
</p>

<blockquote><pre class="code">IMG.up {vertical-align: top;}
IMG.textup {vertical-align: text-top;}

&lt;P&gt;Here: a &lt;IMG SRC="tall.gif" ALIGN="middle" 
ALT="tall image"&gt; tall image, and then a &lt;IMG SRC="short.gif" 
CLASS="up" ALT="short image"&gt; short image.&lt;/P&gt;
&lt;P&gt; Here: a &lt;IMG SRC="tall.gif" CLASS="textup"
ALT="tall image"&gt; tall image, and then a &lt;IMG SRC="short.gif" 
CLASS="textup" ALT="short image"&gt; short image.&lt;/P&gt;</pre></blockquote>

<a name="css-CHP-4-FIG-36" /><div class="figure"><img height="141" alt="Figure 4-36" src="figs/css.0436.gif" width="327" /></div><h4 class="objtitle">Figure 4-36. Aligning with the top and text-top of a line</h4>

<p>Of course, the exact position of that alignment will depend on what
elements are in the line and how tall they are.
</p>

</div>

<a name="css-CHP-4-SECT-1.3.5" /><div class="sect3">
<h3 class="sect3">4.1.3.5. In the middle</h3>

<p><a name="INDEX-419" />
<a name="INDEX-420" />Then there is
<tt class="literal">vertical-align:</tt> <tt class="literal">middle</tt>. This
value is usually applied to images, since it causes the vertical
midpoint of the element to be aligned with the "middle"
of the line. The middle of the line is defined to be the point which
is one-half <tt class="literal">ex</tt> above the baseline, where the value
of <tt class="literal">ex</tt> is derived from the
<tt class="literal">font-size</tt> of the parent element. An example is
shown in <a href="ch04_01.htm">Figure 4-37</a>:
</p>

<blockquote><pre class="code">IMG {vertical-align: middle;}</pre></blockquote>

<a name="css-CHP-4-FIG-37" /><div class="figure"><img height="138" alt="Figure 4-37" src="figs/css.0437.gif" width="413" /></div><h4 class="objtitle">Figure 4-37. Middle alignment</h4>

<p>In practice, since most user agents treat <tt class="literal">1ex</tt> as
one-half em, <tt class="literal">middle</tt> will cause the vertical
midpoint of an element to be aligned with a point one-quarter em
above the parent's baseline. <a href="ch04_01.htm">Figure 4-38</a> shows
this in more detail.
</p>

<a name="css-CHP-4-FIG-38" /><div class="figure"><img height="88" alt="Figure 4-38" src="figs/css.0438.gif" width="243" /></div><h4 class="objtitle">Figure 4-38. Precise detail of middle alignment</h4>

<p>This is pretty close to simulating <tt class="literal">&lt;IMG</tt>
<tt class="literal">ALIGN="middle"&gt;</tt>, as you can see, and
you'd probably think that percentages would get even closer.
</p>

</div>

<a name="css-CHP-4-SECT-1.3.6" /><div class="sect3">
<h3 class="sect3">4.1.3.6. Percentages</h3>

<p><a name="INDEX-421" />As it turns out, no, percentages
don't let you simulate <tt class="literal">ALIGN="middle"</tt> for
images. Instead, setting a percentage value for
<tt class="literal">vertical-align</tt> causes the baseline (or bottom of a
replaced element) of the element to be raised or lowered by the
amount declared, with respect to the parent's baseline. The
percentage you specify is calculated as a percentage of the value for
<tt class="literal">line-height</tt>. Positive percentage values cause the
element to be raised, and negative values cause it to be lowered.
This can cause elements to be raised or lowered such that they appear
to be placed in adjacent lines, as shown in <a href="ch04_01.htm">Figure 4-39</a>, so you should take care when using percentage
values:
</p>

<blockquote><pre class="code">B {vertical-align: 100%;}

&lt;P&gt;This paragraph contains some &lt;B&gt;boldfaced&lt;/B&gt; text, which is raised 
up 100%.  This makes it look as though it's on a preceding line.&lt;/P&gt;</pre></blockquote>

<a name="css-CHP-4-FIG-39" /><div class="figure"><img height="59" alt="Figure 4-39" src="figs/css.0439.gif" width="400" /></div><h4 class="objtitle">Figure 4-39. Vertical alignment with percentages</h4>

<p>However, it's important to realize that the vertically aligned
text is not part of another line. It just appears that way when there
isn't any other text around. Consider <a href="ch04_01.htm">Figure 4-40</a>, in which some vertically aligned text appears
in the middle of a paragraph.
</p>

<a name="css-CHP-4-FIG-40" /><div class="figure"><img height="74" alt="Figure 4-40" src="figs/css.0440.gif" width="399" /></div><h4 class="objtitle">Figure 4-40. Percentage alignments can affect the height of a line</h4>

<p>Of course, this sort of thing can lead to some fun visual effects, as
we see in <a href="ch04_01.htm">Figure 4-41</a>:
</p>

<blockquote><pre class="code">SUB {vertical-align: -100%;}
SUP {vertical-align: 100%;}

&lt;P&gt;We can either &lt;SUP&gt;soar to new heights&lt;/SUP&gt; or, instead, 
&lt;SUB&gt;sink into despair...&lt;/SUB&gt;&lt;/P&gt;</pre></blockquote>

<a name="css-CHP-4-FIG-41" /><div class="figure"><img height="57" alt="Figure 4-41" src="figs/css.0441.gif" width="355" /></div><h4 class="objtitle">Figure 4-41. Percentages and fun effects</h4>

<p>Since percentage values are meant to be percentages of the
<tt class="literal">line-height</tt>, what happens when a particularly tall
image within a line causes the line's apparent height to
increase?
</p>

<p>If you'll recall from before, the answer is that an image, no
matter how tall it is, doesn't actually cause the
<tt class="literal">line-height</tt> to increase. What is increased is the
height of the line box. Therefore, if a line's height is
<tt class="literal">14px</tt>, and an element within that line is
vertically aligned to <tt class="literal">50%</tt>, and within that same
line, there is an image 50 pixels tall, you get the result shown in
<a href="ch04_01.htm">Figure 4-42</a>:
</p>

<blockquote><pre class="code">SUP {vertical-align: 50%;}</pre></blockquote>

<a name="css-CHP-4-FIG-42" /><div class="figure"><img height="192" alt="Figure 4-42" src="figs/css.0442.gif" width="306" /></div><h4 class="objtitle">Figure 4-42. Vertical alignment with a percentage and a tall image</h4>

<p>The <tt class="literal">50%</tt>-aligned element has its baseline raised 7
pixels (which is half of <tt class="literal">14px</tt>), <em class="emphasis">not</em>
 25 pixels. Also note that the line-box has been made tall
enough to accommodate the image. This is actually consistent with the
inline box model, because replaced elements have this kind of effect.
</p>

<p>We can see the operation of vertical alignment more clearly if we
have two images, one of which is vertically aligned with a percentage
value. The results, shown in <a href="ch04_01.htm">Figure 4-43</a>, are
dependent on the <tt class="literal">line-height</tt>, which we'll
explicitly declare to be <tt class="literal">14px</tt>:
</p>

<blockquote><pre class="code">P {line-height: 14px;}
IMG.up {vertical-align: 50%;}

&lt;P&gt;Some &lt;IMG SRC="tall.gif" alt="tall image"&gt;
&lt;IMG SRC="short.gif" CLASS="up" ALT="short image"&gt; text.&lt;/P&gt;</pre></blockquote>

<a name="css-CHP-4-FIG-43" /><div class="figure"><img height="63" alt="Figure 4-43" src="figs/css.0443.gif" width="120" /></div><h4 class="objtitle">Figure 4-43. Vertical alignment with percentage and two images</h4>

<p>The bottom (or baseline) of the smaller image is raised by one-half
(<tt class="literal">50%</tt>) of the <tt class="literal">line-height</tt>, or 7
pixels. If we had set the alignment for <tt class="literal">IMG.up</tt> to
be <tt class="literal">-50%</tt>, then the shorter image would have been
lowered by 7 pixels.<a name="INDEX-422" /> <a name="INDEX-423" /> <a name="INDEX-424" /> <a name="INDEX-425" />
</p>

</div>

<a name="css-CHP-4-SECT-1.3.7" /><div class="sect3">
<h3 class="sect3">4.1.3.7. Combined alignment</h3>

<p><a name="INDEX-426" />As
we've already seen, the way a given line of text is displayed
will depend greatly on the vertical alignments of the various
elements within that line. However, this fact deserves to be
emphasized again, due to its importance. Assume, for example, that a
line contains an image which has been middle-aligned, and an inline
text element which has been bottom-aligned. This would result in the
situation shown in <a href="ch04_01.htm">Figure 4-44</a>:
</p>

<blockquote><pre class="code">IMG {vertical-align: middle;}
SUB {vertical-align: bottom;}</pre></blockquote>

<a name="css-CHP-4-FIG-44" /><div class="figure"><img height="77" alt="Figure 4-44" src="figs/css.0444.gif" width="317" /></div><h4 class="objtitle">Figure 4-44. Combining vertical alignments</h4>

<p>If we change the text element so that it's
<tt class="literal">text-bottom</tt>-aligned, though, the situation changes
quite radically, as <a href="ch04_01.htm">Figure 4-45</a> shows:
</p>

<blockquote><pre class="code">IMG {vertical-align: middle;}
SUB {vertical-align: text-bottom;}</pre></blockquote>

<a name="css-CHP-4-FIG-45" /><div class="figure"><img height="77" alt="Figure 4-45" src="figs/css.0445.gif" width="317" /></div><h4 class="objtitle">Figure 4-45. Combining vertical alignments in a different way</h4>

</div>
</div>
<a name="css-CHP-4-SECT-1.4" /><div class="sect2">
<h3 class="sect2">4.1.4. Word Spacing and Letterspacing</h3>

<p><a name="INDEX-427" />
<a name="INDEX-428" />The concepts here are fairly simple:
word and letterspacing are ways of inserting or reducing space
between either words or letters. As usual, though, there are some
nonintuitive issues to consider with these properties; first,
let's talk about the spaces between words.
</p>

<a name="css-CHP-4-SECT-1.4.1" /><div class="sect3">
<h3 class="sect3">4.1.4.1. Word spacing</h3>

<a name="css-CHP-4-TABLE-2" />
<table border="1">


<tr>
<td>

<dl>
<dt><h3>word-spacing</h3></dt>
<dt><b>Values</b></dt>
<dd>
<p>&lt;length&gt; | <tt class="literal">normal</tt></p>
</dd>

</dl>

<dl>
<dt><b>Initial value</b></dt>
<dd>
<p><tt class="literal">normal</tt></p>
</dd>

</dl>

<dl>
<dt><b>Inherited</b></dt>
<dd>
<p>yes</p>
</dd>

</dl>

<dl>
<dt><b>Applies to</b></dt>
<dd>
<p>all elements</p>
</dd>

</dl>
</td>
</tr>

</table>

<p>The <tt class="literal">word-spacing</tt><a name="INDEX-429" />
property will accept a length that is either positive or negative.
This value is <em class="emphasis">added</em> to the usual space between
words, which perhaps isn't quite what you might expect. In
effect, <tt class="literal">word-spacing</tt> is used as a
<em class="emphasis">modifier</em> to <a name="INDEX-430" />interword spacing. Therefore, the
default value of <tt class="literal">normal</tt> is the same as setting a
value of zero (<tt class="literal">0</tt>), as shown in <a href="ch04_01.htm">Figure 4-46</a>:
</p>

<blockquote><pre class="code">P.base {word-spacing: normal;}
P.norm {word-spacing: 0;}</pre></blockquote>

<a name="css-CHP-4-FIG-46" /><div class="figure"><img height="113" alt="Figure 4-46" src="figs/css.0446.gif" width="327" /></div><h4 class="objtitle">Figure 4-46. Two ways to achieve ordinary word spacing</h4>

<p>Therefore, if we supply a positive length value, then the space
between words will increase, as demonstrated in <a href="ch04_01.htm">Figure 4-47</a>:
</p>

<blockquote><pre class="code">P {word-spacing: 0.2em;}

&lt;P&gt;The spaces between words in paragraphs will be increased by 0.2em.&lt;/P&gt;</pre></blockquote>

<a name="css-CHP-4-FIG-47" /><div class="figure"><img height="31" alt="Figure 4-47" src="figs/css.0447.gif" width="325" /></div><h4 class="objtitle">Figure 4-47. Increasing the space between words</h4>

<p>By setting a negative value for <tt class="literal">word-spacing</tt>,
words can be brought closer together. This has an effect like that
shown in <a href="ch04_01.htm">Figure 4-48</a>:
</p>

<blockquote><pre class="code">P {word-spacing: -0.4em;}

&lt;P&gt;The spaces between words in paragraphs will be decreased by 0.4em.&lt;/P&gt;</pre></blockquote>

<a name="css-CHP-4-FIG-48" /><div class="figure"><img height="32" alt="Figure 4-48" src="figs/css.0448.gif" width="255" /></div><h4 class="objtitle">Figure 4-48. Decreasing the space between words</h4>

<p>So far, we've left out a precise definition of what a
"word" really is. In the simplest CSS terms, a
"word" is any string of non-whitespace characters that is
surrounded by whitespace of some kind. This definition has no real
semantic significance -- it is merely assumed that an author will
write a document such that each word is surrounded by one or more
whitespace characters. Obviously, a CSS-aware user agent cannot be
expected to decide what is a valid word in a given language and what
isn't.
</p>

<p>This also means that any languages that employ pictographs, or other
non-Roman writing styles, will probably not be able to take advantage
of this property. Furthermore, this definition of "word"
is not something user agents are required to follow; it merely
represents the most basic way of defining a word. User agents may
employ more sophisticated ways of deciding what a word is or
isn't.
</p>

<p>It is, of course, possible to create very unreadable documents with
this property, as <a href="ch04_01.htm">Figure 4-49</a> makes clear:<a name="INDEX-431" />
</p>

<blockquote><pre class="code">P {word-spacing: 1in;}</pre></blockquote>

<a name="css-CHP-4-FIG-49" /><div class="figure"><img height="109" alt="Figure 4-49" src="figs/css.0449.gif" width="443" /></div><h4 class="objtitle">Figure 4-49. Really wide word spacing</h4>

</div>

<a name="css-CHP-4-SECT-1.4.2" /><div class="sect3">
<h3 class="sect3">4.1.4.2. Letterspacing</h3>
<a name="ch04-28-fm2xml" />
<table border="1">


<tr>
<td>

<dl>
<dt><h3>letter-spacing</h3></dt>
<dt><b>Values</b></dt>
<dd>
<p>&lt;length&gt; | <tt class="literal">normal</tt></p>
</dd>

</dl>

<dl>
<dt><b>Initial value</b></dt>
<dd>
<p><tt class="literal">normal</tt></p>
</dd>

</dl>

<dl>
<dt><b>Inherited</b></dt>
<dd>
<p>yes</p>
</dd>

</dl>

<dl>
<dt><b>Applies to</b></dt>
<dd>
<p>all elements</p>
</dd>

</dl>
</td>
</tr>

</table>

<p><a name="INDEX-432" />
<a name="INDEX-433" />
<a name="INDEX-434" />Many of the same issues with
<tt class="literal">word-spacing</tt> return for
<tt class="literal">letter-spacing</tt>. The only real difference between
this property and <tt class="literal">word-spacing</tt> is that
<tt class="literal">letter-spacing</tt> is a modifier of the usual amount
of space between characters, or letters.
</p>

<p>Once again, the permitted values are any length value and the default
keyword <tt class="literal">normal</tt> (which is functionally the same as
<tt class="literal">letter-spacing:</tt> <tt class="literal">0</tt> ). Any length
value will increase or decrease the space between letters by the
amount declared. <a href="ch04_01.htm">Figure 4-50</a> shows the results of
the following markup:
</p>

<blockquote><pre class="code">P {letter-spacing: 0;}    /*  identical to 'normal'  */
P.spacious {letter-spacing: 0.25em;}
P.tight {letter-spacing: -0.25em;}

&lt;P&gt;The letters in this paragraph are spaced as normal.&lt;/P&gt;
&lt;P CLASS="spacious"&gt;The letters in this paragraph are spread out a bit.&lt;/P&gt;
&lt;P CLASS="tight"&gt;The letters in this paragraph are smooshed together a bit.&lt;/P&gt;</pre></blockquote>

<a name="css-CHP-4-FIG-50" /><div class="figure"><img height="96" alt="Figure 4-50" src="figs/css.0450.gif" width="313" /></div><h4 class="objtitle">Figure 4-50. Various kinds of letterspacing</h4>

<p>One interesting use for <tt class="literal">letter-spacing</tt> is to
increase emphasis, which is a technique that was common in past
centuries. Thus, you might declare the following to get an effect
like that shown in <a href="ch04_01.htm">Figure 4-51</a>:
</p>

<blockquote><pre class="code">STRONG {letter-spacing: 0.2em;}

&lt;P&gt;This paragraph contains &lt;STRONG&gt;strongly emphasized text&lt;/STRONG&gt; 
which is spread out for extra emphasis.&lt;/P&gt;</pre></blockquote>

<a name="css-CHP-4-FIG-51" /><div class="figure"><img height="49" alt="Figure 4-51" src="figs/css.0451.gif" width="336" /></div><h4 class="objtitle">Figure 4-51. Using letterspacing to increase emphasis</h4>

</div>

<a name="css-CHP-4-SECT-1.4.3" /><div class="sect3">
<h3 class="sect3">4.1.4.3. Spacing, alignment, and font size</h3>

<p><a name="INDEX-435" /> <a name="INDEX-436" /> <a name="INDEX-437" />Both
<tt class="literal">word-spacing</tt> and <tt class="literal">letter-spacing</tt>
can be influenced by the value of <tt class="literal">text-align</tt>. If
an element is set to be justified, then the spaces between letters
and words may be altered to permit full justification, which may in
turn alter the spacing declared by the author with
<tt class="literal">word-spacing</tt> or <tt class="literal">letter-spacing</tt>.
The CSS specification does not specify how the spacing should be
calculated in such a case, so user agents are free to do whatever
their programmers thought best.
</p>

<p>Furthermore, as usual, the computed value of an element is inherited
by any child elements. Unlike <tt class="literal">line-height</tt>, there
is no way to define a scaling factor for
<tt class="literal">word-spacing</tt> or <tt class="literal">letter-spacing</tt>
to be inherited in place of the computed value. Thus we have problems
such as those shown in <a href="ch04_01.htm">Figure 4-52</a>:
</p>

<blockquote><pre class="code">P {letter-spacing: 0.25em;}
SMALL {font-size: 50%;}

&lt;P&gt;This spacious paragraph features &lt;SMALL&gt;tiny text which is just 
as spacious&lt;/SMALL&gt;, even though the author probably wanted the 
spacing to be in proportion to the size of the text.&lt;/P&gt;</pre></blockquote>

<a name="css-CHP-4-FIG-52" /><div class="figure"><img height="78" alt="Figure 4-52" src="figs/css.0452.gif" width="334" /></div><h4 class="objtitle">Figure 4-52. Inherited letterspacing</h4>

<p>The only way to get an effect where the letterspacing is in
proportion to the size of the text is to set it explicitly, with the
result shown in <a href="ch04_01.htm">Figure 4-53</a>:
</p>

<blockquote><pre class="code">P {letter-spacing: 0.25em;}
SMALL {font-size: 50%; letter-spacing: 0.25em;}

&lt;P&gt;This spacious paragraph features &lt;SMALL&gt;tiny text which is 
proportionally spacious&lt;/SMALL&gt;, which is what the author 
probably wanted.&lt;/P&gt;</pre></blockquote>

<a name="css-CHP-4-FIG-53" /><div class="figure"><img height="63" alt="Figure 4-53" src="figs/css.0453.gif" width="324" /></div><h4 class="objtitle">Figure 4-53. Overcoming inherited letterspacing.
</h4>

</div>
</div>
<a name="css-CHP-4-SECT-1.5" /><div class="sect2">
<h3 class="sect2">4.1.5. Text Transformation</h3>

<p><a name="INDEX-438" /> <a name="INDEX-439" />
<a name="INDEX-440" />
<a name="INDEX-441" />
<a name="INDEX-442" /> <a name="INDEX-443" />
<a name="INDEX-444" />Now we turn to ways to fiddle with the
capitalization of text. This is done with the property
<tt class="literal">text-transform</tt> .
</p>

<a name="css-CHP-4-TABLE-3" />
<table border="1">


<tr>
<td>

<dl>
<dt><h3>text-transform</h3></dt>
<dt><b>Values</b></dt>
<dd>
<p><tt class="literal">uppercase</tt> | <tt class="literal">lowercase</tt> |
<tt class="literal">capitalize</tt> | <tt class="literal">none</tt>
</p>
</dd>

</dl>

<dl>
<dt><b>Initial value</b></dt>
<dd>
<p><tt class="literal">none</tt></p>
</dd>

</dl>

<dl>
<dt><b>Inherited</b></dt>
<dd>
<p>yes</p>
</dd>

</dl>

<dl>
<dt><b>Applies to</b></dt>
<dd>
<p>all elements</p>
</dd>

</dl>
</td>
</tr>

</table>

<p>The default value <tt class="literal">none</tt> will simply leave the text
alone and use whatever <a name="INDEX-445" /> <a name="INDEX-446" />capitalization
exists in the source document. <tt class="literal">uppercase</tt><a name="INDEX-447" /> <a name="INDEX-448" />
and <tt class="literal">lowercase</tt><a name="INDEX-449" /> <a name="INDEX-450" />
cause the text to be converted into all upper- or lowercase
characters, as their names would indicate. Finally,
<tt class="literal">capitalize</tt> causes the first letter of each word to
be capitalized and leaves the rest of the characters in each word
alone. (Note that for the purposes of this property, a
"word" is the same as discussed in the section on
<tt class="literal">word-spacing</tt>.)
</p>

<p><a href="ch04_01.htm">Figure 4-54</a> shows each of these settings in a
variety of ways:
</p>

<blockquote><pre class="code">STRONG {text-transform: uppercase;}
H1, H2, H3 {text-transform: capitalize;}
P.cummings {text-transform: lowercase;}
P.raw {text-transform: none;}

&lt;H1&gt;The heading-one at the beginninG&lt;/H1&gt;
&lt;P&gt;
By default, text is displayed in the capitalization it has in the source 
document, but &lt;STRONG&gt;it is possible to change this&lt;/STRONG&gt; using 
the property 'text-transform'.
&lt;/P&gt;
&lt;P CLASS="cummings"&gt;
For example, one could Create TEXT such as might have been Written by 
the late Poet E.E.Cummings.
&lt;/P&gt;
&lt;P CLASS="raw"&gt;
If you feel the need to Explicitly Declare the transformation of text, 
that can be done as well.
&lt;/P&gt;</pre></blockquote>

<a name="css-CHP-4-FIG-54" /><div class="figure"><img height="238" alt="Figure 4-54" src="figs/css.0454.gif" width="377" /></div><h4 class="objtitle">Figure 4-54. Various kinds of text transformation</h4>

<p>Note that different user agents may have different ways of deciding
where words begin, and thus which letters should be capitalized. As
an example, the text "heading-one" in the
<tt class="literal">H1</tt> element, shown in <a href="ch04_01.htm">Figure 4-54</a>,
could be rendered in one of two ways: "Heading-one" or
"Heading-One." CSS does not say which is correct, so
either one is possible.
</p>

<p>Also note that the last letter in the H1 element in <a href="ch04_01.htm">Figure 4-54</a> is still in uppercase. This is correct: when
applying a <tt class="literal">text-transform</tt> of
<tt class="literal">capitalize</tt>, CSS only requires that user agents
make sure that the first letter of each word is capitalized. They
don't have to do anything to the rest of the word.
</p>

<p>As a property, <tt class="literal">text-transform</tt> may not seem like it
does very much. In fact, it's very useful if you suddenly
decide that you want all of your <tt class="literal">H1</tt> elements to be
all capitals. Instead of having to actually change the content of all
your <tt class="literal">H1</tt> elements, you can just use
<tt class="literal">text-transform</tt> to make the change for you:
</p>

<blockquote><pre class="code">H1 {text-transform: uppercase;}

&lt;H1&gt;This is an H1 element&lt;/H1&gt;</pre></blockquote>

<p>As you can see from <a href="ch04_01.htm">Figure 4-55</a>, the text is now all
capitals.
</p>

<a name="css-CHP-4-FIG-55" /><div class="figure"><img height="25" alt="Figure 4-55" src="figs/css.0455.gif" width="386" /></div><h4 class="objtitle">Figure 4-55. Transforming an H1 element</h4>

<p>The advantages are twofold. First, all you have to do is write a
single rule to make this change, rather than having to make changes
to the <tt class="literal">H1</tt> itself. Second, if you decide later to
switch from all capitals to capitalizing the first letter of each
word, the change is even easier, as <a href="ch04_01.htm">Figure 4-56</a>
shows:
<a name="INDEX-451" />
<a name="INDEX-452" />
<a name="INDEX-453" />
<a name="INDEX-454" />
<a name="INDEX-455" />
<a name="INDEX-456" /> way.<a name="INDEX-457" />
<a name="INDEX-458" />
<a name="INDEX-459" />
</p>

<blockquote><pre class="code">H1 {text-transform: capitalize;}

&lt;H1&gt;This is an H1 element&lt;/H1&gt;</pre></blockquote>

<a name="css-CHP-4-FIG-56" /><div class="figure"><img height="30" alt="Figure 4-56" src="figs/css.0456.gif" width="317" /></div><h4 class="objtitle">Figure 4-56. Transforming an H1 element in a different</h4>

</div>
<a name="css-CHP-4-SECT-1.6" /><div class="sect2">
<h3 class="sect2">4.1.6. Text Decoration</h3>

<p><a name="INDEX-460" /> <a name="INDEX-461" /> <a name="INDEX-462" />
<a name="INDEX-463" />
<a name="INDEX-464" />
<a name="INDEX-465" />Finally,
we come to <tt class="literal">text-decoration</tt>, which is a fascinating
property that carries along a whole truckload of oddities and
inconsistencies in browsers. First, however, let's talk about
how it should work in theory.
</p>

<a name="css-CHP-4-TABLE-4" />
<table border="1">


<tr>
<td>


<dl>
<dt><h3>text-decoration</h3></dt>
<dt><b>Values</b></dt>
<dd>
<p><tt class="literal">none</tt> | [ <tt class="literal">underline</tt> ||
<tt class="literal">overline</tt> || <tt class="literal">line-through</tt> ||
<tt class="literal">blink</tt> ]
</p>
</dd>

</dl>

<dl>
<dt><b>Initial value</b></dt>
<dd>
<p><tt class="literal">none</tt></p>
</dd>

</dl>

<dl>
<dt><b>Inherited</b></dt>
<dd>
<p>no</p>
</dd>

</dl>

<dl>
<dt><b>Applies to</b></dt>
<dd>
<p>all elements</p>
</dd>

</dl>
</td>
</tr>

</table>

<p><a name="INDEX-466" />As you might expect,
<tt class="literal">underline</tt> causes an element to be underlined, just
like the <tt class="literal">U</tt><a name="INDEX-467" /> element in HTML.
<tt class="literal">overline</tt> is the flip side; a line is drawn across
the top of the text in an overlined element. The value
<tt class="literal">line-through</tt> draws a line straight through the
middle of the text, which also known as
"<a name="INDEX-468" />strikethrough"
text and is equivalent to the <tt class="literal">S</tt> and
<tt class="literal">STRIKE</tt><a name="INDEX-469" /> <a name="INDEX-470" /> elements in HTML. And, of course,
<tt class="literal">blink</tt><a name="INDEX-471" />
<a name="INDEX-472" />
<a name="INDEX-473" /> causes the text to blink on and off,
just like the
<tt class="literal">BLINK</tt><a name="INDEX-474" />
tag supported by Netscape. <a href="ch04_01.htm">Figure 4-57</a> shows
examples of each of these values:
</p>

<blockquote><pre class="code">P.emph {text-decoration: underline;}
P.topper {text-decoration: overline;}
P.old {text-decoration: line-through;}
P.annoy {text-decoration: blink;}
P.plain {text-decoration: none;}</pre></blockquote>

<a name="css-CHP-4-FIG-57" /><div class="figure"><img height="225" alt="Figure 4-57" src="figs/css.0457.gif" width="400" /></div><h4 class="objtitle">Figure 4-57. Various kinds of text decoration</h4>

<a name="ch04-34-fm2xml" /><blockquote><h4>WARNING</h4>
<p>It's impossible to show the effect of <tt class="literal">blink</tt>
in print, of course, but it's easy enough to imagine. User
agents are not required to support <tt class="literal">blink</tt>,
incidentally, and only Navigator 4.x actually supports it as of this
writing.
</p>
</blockquote>

<p>As the last part of <a href="ch04_01.htm">Figure 4-57</a> shows, the value
<tt class="literal">none</tt> turns off any decoration which might
otherwise have been applied to an element. This is usually the
default appearance for text, but not always. For example,
<a name="INDEX-475" />links are usually underlined by default.
If you wished to suppress the underlining of
<a name="INDEX-476" />
<a name="INDEX-477" />hyperlinks, a CSS rule to do so
would be:
</p>

<blockquote><pre class="code">A:link {text-decoration: none;}</pre></blockquote>

<p>The text in <a href="ch04_01.htm">Figure 4-58</a> contains three hyperlinks:
the three list items. Since we explicitly turned off link
underlining, the only visual difference between the anchors and
normal text is the color.
</p>

<a name="css-CHP-4-FIG-58" /><div class="figure"><img height="93" alt="Figure 4-58" src="figs/css.0458.gif" width="396" /></div><h4 class="objtitle">Figure 4-58. Suppressing the underlining of hyperlinks</h4>

<a name="ch04-35-fm2xml" /><blockquote><h4>TIP</h4>
<p>Although I personally don't have a problem with it, many users
have a tendency to get violently annoyed when they realize
you've turned off link underlining. Obviously, it's a
matter of opinion, so let your own tastes be your guide -- but
remember that if your link colors aren't sufficiently different
from normal text, visually impaired users may have a really hard time
finding hyperlinks in your documents.
</p>
</blockquote>

<p>It is also possible to combine <a name="INDEX-478" />
<a name="INDEX-479" /> <a name="INDEX-480" />decorations in a single rule.
For example, assume that you wish to have all hyperlinks be both
underlined and overlined. The needed rule for such an effect is:
</p>

<blockquote><pre class="code">A:link, A:visited {text-decoration: underline overline;}</pre></blockquote>

<p>This effectively makes <tt class="literal">text-decoration</tt> a shorthand
element. You have to be careful in this case, because if you have two
different decorations matched to the same element, the value of the
rule that wins out will completely replace the value of the loser.
Consider:
</p>

<blockquote><pre class="code">H2.stricken {text-decoration: line-through;}
H2 {text-decoration: underline overline;}</pre></blockquote>

<p>Given these rules, any <tt class="literal">H2</tt> element with a class of
<tt class="literal">stricken</tt> will have only a line-through decoration.
The underline and overline decorations are lost, since shorthand
values replace one another, instead of accumulating.
</p>

<a name="css-CHP-4-SECT-1.6.1" /><div class="sect3">
<h3 class="sect3">4.1.6.1. Weird decorations</h3>

<p>Now, let's get into the many strange things about
<tt class="literal">text-decoration</tt><a name="INDEX-481" />. First off is the fact that
<tt class="literal">text-decoration</tt> is <em class="emphasis">not</em> 
inherited. This implies a requirement that any decoration lines drawn
with the text -- either under, over, or through it -- should be
the same color as the parent element. This is the case even if the
child elements are different colors, as depicted in <a href="ch04_01.htm">Figure 4-59</a>:
</p>

<blockquote><pre class="code">P {text-decoration: underline; color: black;}
B {color: gray;}

&lt;P&gt;This paragraph, which is black and has a black underline, also contains 
&lt;B&gt;boldfaced text&lt;/B&gt; which has the black underline beneath it as well.&lt;/P&gt;</pre></blockquote>

<a name="css-CHP-4-FIG-59" /><div class="figure"><img height="48" alt="Figure 4-59" src="figs/css.0459.gif" width="320" /></div><h4 class="objtitle">Figure 4-59. Color consistency in underlines</h4>

<p>Why is this so? Because the value of
<tt class="literal">text-decoration</tt> is not inherited, the
<tt class="literal">B</tt> element has a default value of
<tt class="literal">none</tt>. Therefore, the <tt class="literal">B</tt> element
has <em class="emphasis">no</em> underline. Of course, there is very
clearly a line under the <tt class="literal">B</tt> element, so it seems
silly to say that it has no underline. Still, it doesn't. What
you see under the <tt class="literal">B</tt> element is the
paragraph's underline, which is effectively
"spanning" the <tt class="literal">B</tt> element. This can be
made more explicit by altering the styles for the boldface element
thus:
</p>

<blockquote><pre class="code">P {text-decoration: underline; color: black;}
B {color: gray; text-decoration: none;}

&lt;P&gt;This paragraph, which is black and has a black underline, also contains 
&lt;B&gt;boldfaced text&lt;/B&gt; which has the black underline beneath it as well.&lt;/P&gt;</pre></blockquote>

<p>The result is the same, since all we've done is to explicitly
declare what was already the case. In other words, there is no way to
"turn off " underlining (or overlining or a <a name="INDEX-482" />line-through)
within an element. If a decoration has been set for an element, then
all of its children will have the decoration applied visually, if not
in fact.
</p>

<p>Combined with <tt class="literal">vertical-align</tt><a name="INDEX-483" />, even
stranger things will happen. <a href="ch04_01.htm">Figure 4-60</a> shows but
one of these oddities. Since the <tt class="literal">SUP</tt> element has
no decoration of its own, but it is elevated within an overlined
element, the overline cuts through the middle of the
<tt class="literal">SUP</tt> element:
</p>

<blockquote><pre class="code">P {text-decoration: overline; font-size: 12pt;}
SUP {vertical-align: 50%; font-size: 12pt;}</pre></blockquote>

<a name="css-CHP-4-FIG-60" /><div class="figure"><img height="52" alt="Figure 4-60" src="figs/css.0460.gif" width="313" /></div><h4 class="objtitle">Figure 4-60. Correct, although strange, decorative behavior</h4>

<p>By now, you may be despairing of ever using text decorations, thanks
to all the problems they could cause. It gets worse, though (or maybe
better), because so far we've been exploring the way things
<em class="emphasis">should</em> work according to the specification. In
reality, many web browsers do turn off underlining in child elements,
even though they shouldn't really do so. The reason they
violate the specification is simple enough: author expectations.
</p>

<blockquote><pre class="code">P {text-decoration: underline; color: black;}
B {color: gray; text-decoration: none;}

&lt;P&gt;This paragraph, which is black and has a black underline, also contains 
&lt;B&gt;boldfaced text&lt;/B&gt; which does not have black underline beneath it.&lt;/P&gt;</pre></blockquote>

<p>As <a href="ch04_01.htm">Figure 4-61</a> shows, a web browser switched off the
<a name="INDEX-484" />
<a name="INDEX-485" /> <a name="INDEX-486" />
<a name="INDEX-487" />underlining for the
<tt class="literal">B</tt> element. Navigator, Explorer, and Opera all do
this, if there is an explicit <tt class="literal">text-decoration:</tt>
<tt class="literal">none</tt> to cause the suppression of underlining. This
is, of course, what an author would tend to expect, and that's
why the browsers do it.
</p>

<a name="css-CHP-4-FIG-61" /><div class="figure"><img height="42" alt="Figure 4-61" src="figs/css.0461.gif" width="291" /></div><h4 class="objtitle">Figure 4-61. How browsers really behave</h4>

<p>The caveat here is that browsers (or any other user agents) might one
day follow the specification precisely. If you depend on using
<tt class="literal">none</tt> for the suppression of decorations, realize
that it may come back to haunt you in the future. Then again, future
versions of CSS could include a way to turn off decorations without
using <tt class="literal">none</tt> in the wrong way, so maybe
there's hope.
</p>

<p>Finally, there is a way to change the color of a
<a name="INDEX-488" />
<a name="INDEX-489" />decoration without violating the
specification. As you'll recall, setting a text decoration on
an element means that the entire element should have the same color
decoration, even if there are child elements of different colors. In
order to match the decoration color with each element, you need to
explicitly declare the decoration, as follows:
</p>

<blockquote><pre class="code">P {text-decoration: underline; color: black;}
B {color: gray; text-decoration: underline;}

&lt;P&gt;This paragraph, which is black and has a black underline, also contains 
&lt;B&gt;boldfaced text&lt;/B&gt; which has its own gray underline.&lt;/P&gt;</pre></blockquote>

<p>In <a href="ch04_01.htm">Figure 4-62</a>, the <tt class="literal">B</tt> element is
set to be gray and to have an underline. The gray underline
"overwrites" the parent's black underline, and so
the decoration's color matches the color of the
<tt class="literal">B</tt> element.
<a name="INDEX-490" />
<a name="INDEX-491" />
<a name="INDEX-492" />
<a name="INDEX-493" />
<a name="INDEX-494" />
<a name="INDEX-495" />
</p>

<a name="css-CHP-4-FIG-62" /><div class="figure"><img height="45" alt="Figure 4-62" src="figs/css.0462.gif" width="300" /></div><h4 class="objtitle">Figure 4-62. Overcoming the default behavior of underlines
</h4>

</div>
</div>
</div>




<hr width="684" align="left" />
<div class="navbar"><table width="684" border="0"><tr><td align="left" valign="top" width="228"><a href="ch03_06.htm"><img alt="Previous" border="0" src="../gifs/txtpreva.gif" /></a></td><td align="center" valign="top" width="228"><a href="index.htm"><img alt="Home" border="0" src="../gifs/txthome.gif" /></a></td><td align="right" valign="top" width="228"><a href="ch04_02.htm"><img alt="Next" border="0" src="../gifs/txtnexta.gif" /></a></td></tr><tr><td align="left" valign="top" width="228">3.6. Summary</td><td align="center" valign="top" width="228"><a href="index/index.htm"><img alt="Book Index" border="0" src="../gifs/index.gif" /></a></td><td align="right" valign="top" width="228">4.2. Summary</td></tr></table></div>
<hr width="684" align="left" />

<img alt="Library Navigation Links" border="0" src="../gifs/navbar.gif" usemap="#library-map" />
<p><font size="-1"><a href="copyrght.htm">Copyright &copy; 2002</a> O'Reilly &amp; Associates. All rights reserved.</font></p>

<map name="library-map"><area href="../index.htm" coords="0,1,78,93" shape="rect" /><area href="../wdesign/index.htm" coords="80,2,155,96" shape="rect" /><area href="../xhtml/index.htm" coords="158,0,263,97" shape="rect" /><area href="../audio/index.htm" coords="265,1,335,97" shape="rect" /><area href="index.htm" coords="338,1,434,93" shape="rect" /><area href="../action/index.htm" coords="439,0,540,102" shape="rect" /><area href="../infoarch/index.htm" coords="544,0,685,102" shape="rect" /></map>

</body></html>
