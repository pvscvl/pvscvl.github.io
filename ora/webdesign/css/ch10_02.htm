<html><head><title>CSS2 Selectors (Cascading Style Sheets: The Definitive Guide)</title><link rel="stylesheet" type="text/css" href="style/style.css" />

<meta name="DC.Creator" content="Eric A. Meyer" /><meta name="DC.Format" content="text/xml" scheme="MIME" /><meta name="DC.Language" content="en-US" /><meta name="DC.Publisher" content="O'Reilly &amp; Associates, Inc." /><meta name="DC.Source" scheme="ISBN" content="1565926226L" /><meta name="DC.Subject.Keyword" content="stuff" /><meta name="DC.Title" content="Cascading Style Sheets: The Definitive Guide" /><meta name="DC.Type" content="Text.Monograph" />

</head><body bgcolor="#ffffff">

<img alt="Book Home" border="0" src="gifs/smbanner.gif" usemap="#banner-map" /><map name="banner-map"><area shape="rect" coords="1,-2,616,66" href="index.htm" alt="Cascading Style Sheets: The Definitive Guide" /><area shape="rect" coords="629,-11,726,25" href="jobjects/fsearch.htm" alt="Search this book" /></map>

<div class="navbar"><table width="684" border="0"><tr><td align="left" valign="top" width="228"><a href="ch10_01.htm"><img alt="Previous" border="0" src="../gifs/txtpreva.gif" /></a></td><td align="center" valign="top" width="228"><a href="index.htm">Cascading Style Sheets: The Definitive Guide</a></td><td align="right" valign="top" width="228"><a href="ch10_03.htm"><img alt="Next" border="0" src="../gifs/txtnexta.gif" /></a></td></tr></table></div>
<hr width="684" align="left" />


<h2 class="sect1">10.2. CSS2 Selectors</h2>

<p><a name="INDEX-1114" />
<a name="INDEX-1115" />We're
going to discuss CSS2 selectors in some detail because they're
likely to be one of the first parts of the specification to be
implemented quickly. Therefore, while you might not be able to do
everything described here as soon as you read this, expect most (if
not all) of this to be included in browsers released in the year 2000
or later.
</p>

<a name="css-CHP-10-SECT-2.1" /><div class="sect2">
<h3 class="sect2">10.2.1. Basic Selectors</h3>

<p>First, in addition to the existing selector mechanisms like
contextual selectors, we have several new selector symbols that will
make it a lot easier to construct very specific, very sophisticated
selections -- without having to resort to sprinkling classes or
IDs throughout the whole document.
</p>

<a name="css-CHP-10-SECT-2.1.1" /><div class="sect3">
<h3 class="sect3">10.2.1.1. Universal selector</h3>

<p><a name="INDEX-1116" />The most
powerful of the new selectors is the <em class="emphasis">universal
selector</em>. This is specified using an <a name="INDEX-1117" /> <a name="INDEX-1118" />asterisk
(<tt class="literal">*</tt>), and it matches any element in the document.
Thus, use this declaration to make sure all elements have a color of
black:
</p>

<blockquote><pre class="code">* {color: black;}</pre></blockquote>

<p>When used as part of a <a name="INDEX-1119" />contextual selector, the universal
selector can create some interesting effects. For example, assume
that you want to make gray any <tt class="literal">UL</tt> element that is
at least a grandchild of the <tt class="literal">BODY</tt>. In other words,
any <tt class="literal">UL</tt> that is a child of <tt class="literal">BODY</tt>
would not be gray, but any other <tt class="literal">UL</tt> -- whether
it's child to a <tt class="literal">DIV</tt>, a list item, or a
table -- should be gray. This is accomplished as follows:
</p>

<blockquote><pre class="code">BODY * UL {color: gray;}</pre></blockquote>

<p><a href="ch10_02.htm">Figure 10-3</a> shows the result of this declaration.</p>

<a name="css-CHP-10-FIG-3" /><div class="figure"><img alt="Figure 10-3" src="figs/css.1003.gif" /></div><h4 class="objtitle">Figure 10-3. Making BODY's grandchildren (and their descendants) gray</h4>

<p>On the other hand, perhaps you wish to make purple any element that
is a descendant of <tt class="literal">DIV</tt>. This would be written:
</p>

<blockquote><pre class="code">DIV * {color: purple;}</pre></blockquote>

<p>At first glance, this seems no different than if the
<tt class="literal">*</tt> were left out, instead relying on inheritance to
carry the color to <em class="emphasis">all</em> descendants of
<tt class="literal">DIV</tt>. However, there is a very real difference: the
rule shown would match every <tt class="literal">DIV</tt> descendant, and
therefore override the inheritance mechanism. Thus, even anchors
(which are descendants of a <tt class="literal">DIV</tt>) would be made
purple under the given rule, whereas simple inheritance would not be
sufficient to make them purple.
</p>

<p>While you can use the universal selector in combination with
<a name="INDEX-1120" />class and <a name="INDEX-1121" />ID selectors, there isn't much
reason to do so. The following two rules mean exactly the same thing:
</p>

<blockquote><pre class="code">*.apple {color: red;}
.apple {color: red;}</pre></blockquote>

<p>However, you should consider this: if you're concerned about
older user agents that don't know about CSS2, then
<tt class="literal">*.class</tt> (or <tt class="literal">*#id</tt>) is an easy
way to fool them. Since both of these are examples of invalid
selectors in CSS1, they should be ignored by CSS1-only parsers. If
they aren't ignored, then they're likely to cause strange
results. Therefore, it might be a good idea to omit the universal
selector in conjunction with class and ID selectors.
</p>

</div>

<a name="css-CHP-10-SECT-2.1.2" /><div class="sect3">
<h3 class="sect3">10.2.1.2. Child selector</h3>

<p>Another interesting selector is the <em class="filename">child
selector</em><a name="INDEX-1122" />, which is written using a
<a name="INDEX-1123" />
<a name="INDEX-1124" />greater-than symbol
(<tt class="literal">&gt;</tt>). This is used to match elements that are
direct children of other elements:
</p>

<blockquote><pre class="code">BODY &gt; P {color: green;}

&lt;BODY&gt;
&lt;P&gt;This paragraph is green.&lt;/P&gt;
&lt;DIV&gt;
&lt;P&gt;This paragraph is not green.&lt;/P&gt;
&lt;/DIV&gt;
&lt;P&gt;This paragraph is green.&lt;/P&gt;
&lt;/BODY&gt;</pre></blockquote>

<p>Only the first and third paragraphs match the rule because they are
children of <tt class="literal">BODY</tt>. The second paragraph is a child
of <tt class="literal">DIV</tt>, and therefore a grandchild of
<tt class="literal">BODY</tt>, so it does not match the rule.
</p>

<p>Child selectors must have at least two or more selectors separated by
the <tt class="literal">&gt;</tt> symbol. It is possible to make a child
selector part of a <a name="INDEX-1125" />contextual selector as well:
</p>

<blockquote><pre class="code">DIV OL&gt;LI EM {color: purple;}</pre></blockquote>

<p>This rule matches any <tt class="literal">EM</tt> text that is a descendant
of a list item, as long as that list item is a child of an
<tt class="literal">OL</tt> element that is a descendant of a
<tt class="literal">DIV</tt>. (Note also that there is no
<a name="INDEX-1126" />whitespace around the
<tt class="literal">&gt;</tt> symbol this time, which is legal; whitespace around this symbol is optional.) Thus:
</p>

<blockquote><pre class="code">&lt;BODY&gt;
&lt;OL&gt;
&lt;LI&gt;The EM text here is &lt;EM&gt;not&lt;/EM&gt; purple.&lt;/LI&gt;
&lt;/OL&gt;
&lt;DIV&gt;
&lt;OL&gt;
&lt;LI&gt;Look, a list:
&lt;UL&gt;
&lt;LI&gt;The emphasized text here &lt;EM&gt;is&lt;/EM&gt; purple.&lt;/LI&gt;
&lt;/UL&gt;
&lt;/LI&gt;
&lt;/OL&gt;
&lt;/DIV&gt;
&lt;/BODY&gt;</pre></blockquote>

<p>The purple <tt class="literal">EM</tt> text is purple because it's
the great-grandchild of an <tt class="literal">LI</tt> that is the direct
child of the <tt class="literal">OL</tt>, and the <tt class="literal">OL</tt> is
the grandchild of the <tt class="literal">BODY</tt> element. The first
<tt class="literal">EM</tt> is not matched because its grandparent
<tt class="literal">OL</tt> is not the direct child of a
<tt class="literal">DIV</tt>.
</p>

<p>Even better, you can string more than one child selector together to
precisely target a given type of element. Take this, for example:
</p>

<blockquote><pre class="code">BODY &gt; OL &gt; LI {color: silver;}

&lt;BODY&gt;
&lt;OL&gt;
&lt;LI&gt;The text here is silver.&lt;/LI&gt;
&lt;/OL&gt;
&lt;DIV&gt;
&lt;UL&gt;
&lt;LI&gt;Look, a list (and this text is not silver, by the way):
&lt;OL&gt;
&lt;LI&gt;The text here is &lt;EM&gt;not&lt;/EM&gt; silver.&lt;/LI&gt;
&lt;/OL&gt;
&lt;/LI&gt;
&lt;/UL&gt;
&lt;/DIV&gt;
&lt;/BODY&gt;</pre></blockquote>

<p>Given this rule, we get results like those shown in <a href="ch10_02.htm">Figure 10-4</a>.
</p>

<a name="css-CHP-10-FIG-4" /><div class="figure"><img alt="Figure 10-4" src="figs/css.1004.gif" /></div><h4 class="objtitle">Figure 10-4. Selecting grandchildren only </h4>

<p>The first list item in the source is silver because it's the
child of an ordered list that is itself the child of a
<tt class="literal">BODY</tt>. The second list item in the source is the
child of an unordered list, so it can't match the rule.
Finally, the third list item in the source is a child of an ordered
list, but the <tt class="literal">OL</tt> element is the child of an
<tt class="literal">LI</tt> element, so it doesn't match either.
</p>

</div>

<a name="css-CHP-10-SECT-2.1.3" /><div class="sect3">
<h3 class="sect3">10.2.1.3. Adjacent-sibling selector</h3>

<p><a name="INDEX-1127" />If you thought that was interesting,
consider our next subject: the <em class="emphasis">adjacent sibling</em>
 selector. This is in some ways like the child selector,
but in this case, styles are applied to elements that share a parent
and are next to each other in the document tree. For example:
</p>

<blockquote><pre class="code">H2 + P {color: silver;}

&lt;H2&gt;Coloring Text&lt;/H2&gt;
&lt;P&gt;This paragraph is silver.&lt;/P&gt;
&lt;P&gt;This paragraph is not.&lt;/P&gt;

&lt;H2&gt;More Coloring Text&lt;/H2&gt;
&lt;UL&gt;&lt;LI&gt;This is not silver&lt;/LI&gt;&lt;/UL&gt;
&lt;P&gt;Neither is this.&lt;/P&gt;

&lt;H2&gt;More Coloring Text&lt;/H2&gt;
This text is not silver.
&lt;P&gt;This paragraph is silver.&lt;/P&gt;
&lt;P&gt;This paragraph is not.&lt;/P&gt;</pre></blockquote>

<p>In the first set of markup, a paragraph immediately follows an
<tt class="literal">H2</tt>, so it is silver. In the second, the element
adjacent to the <tt class="literal">H2</tt> is a <tt class="literal">UL</tt>,
which does not match the rule, and neither does the paragraph right
after that. Finally, even though there is text directly after the
third <tt class="literal">H2</tt>, it isn't part of an element, so
the paragraph right after the text matches the rule and is colored
silver. All this is demonstrated in <a href="ch10_02.htm">Figure 10-5</a>.
</p>

<a name="css-CHP-10-FIG-5" /><div class="figure"><img alt="Figure 10-5" src="figs/css.1005.gif" /></div><h4 class="objtitle">Figure 10-5. Selecting adjacent elements</h4>

<p>If you wanted to make any element immediately following an
<tt class="literal">H2</tt> silver, then the universal selector comes into
play:
</p>

<blockquote><pre class="code">H2 + * {color: silver;}</pre></blockquote>

<p>The fact that user agents ignore text between elements can actually
be used to your advantage in many circumstances. Take, for example, a
document design in which you want <tt class="literal">STRONG</tt> text to
be gray, except when it follows <tt class="literal">EM</tt> text, in which
case it should be silver:
</p>

<blockquote><pre class="code">STRONG {color: gray;}
EM + STRONG {color: silver;}

&lt;P&gt;While the first strong element is &lt;STRONG&gt;gray&lt;/STRONG&gt;, the 
&lt;EM&gt;second&lt;/EM&gt; strong element is &lt;STRONG&gt;silver&lt;/STRONG&gt;, because it
follows an "EM" element.</pre></blockquote>

<p>The result is shown in <a href="ch10_02.htm">Figure 10-6</a>.
<a name="INDEX-1128" />
</p>

<a name="css-CHP-10-FIG-6" /><div class="figure"><img height="34" alt="Figure 10-6" src="figs/css.1006.gif" width="252" /></div><h4 class="objtitle">Figure 10-6. More adjacent selections</h4>

</div>
</div>
<a name="css-CHP-10-SECT-2.2" /><div class="sect2">
<h3 class="sect2">10.2.2. Attribute Selectors</h3>

<p><a name="INDEX-1129" />With the introduction of
<em class="emphasis">attribute selectors</em> , CSS gains a great deal of
flexibility, precision, and power. Attribute selectors can be matched
in four ways, each of which carries its own strengths and advantages.
</p>

<a name="css-CHP-10-SECT-2.2.1" /><div class="sect3">
<h3 class="sect3">10.2.2.1. Attribute matching</h3>

<p><a name="INDEX-1130" />First
off, there is the ability to create a selector that matches any
element with the specified attribute. For example, you can match all
anchors with a <tt class="literal">NAME</tt> attribute, or all
<tt class="literal">IMG</tt> elements with a <tt class="literal">BORDER</tt>
attribute, or all elements that have a class of some type:
</p>

<blockquote><pre class="code">A[name] {color: purple;}      /* colors any NAME anchor purple */
IMG[border] {border-color: blue;}  /* sets blue border for any bordered IMG */
[class] {color: red;}        /* sets any classed element red */</pre></blockquote>

<p>In none of these situations does it matter what value is assigned to
the attributes of each element. As long as the given attribute is
present for the element, the element will match the selector shown.
Thus, in the following example, the first two <tt class="literal">IMG</tt>
elements shown will match the preceding rule, whereas the third will
not, as illustrated by <a href="ch10_02.htm">Figure 10-7</a>:
</p>

<blockquote><pre class="code">IMG[border] {border-color: blue;}

&lt;IMG SRC="one.gif" BORDER="1" ALT="image one (match)"&gt;
&lt;IMG SRC="two.gif" BORDER="23" ALT="image two (match)"&gt;
&lt;IMG SRC="three.gif" ALT="image three (no match)"&gt;</pre></blockquote>

<a name="css-CHP-10-FIG-7" /><div class="figure"><img height="66" alt="Figure 10-7" src="figs/css.1007.gif" width="117" /></div><h4 class="objtitle">Figure 10-7. Attribute matching</h4>

</div>

<a name="css-CHP-10-SECT-2.2.2" /><div class="sect3">
<h3 class="sect3">10.2.2.2. Value matching</h3>

<p><a name="INDEX-1131" />It
is also possible to match attributes based on their values. Assume
that you wish to style all hyperlinks as gray, except for those that
point to the main page of the web site of the World Wide Web
Consortium (<a href="../../../../../../www.w3.org/">http://www.w3.org/</a>).
These links should be silver instead, as shown in <a href="ch10_02.htm">Figure 10-8</a>:
</p>

<blockquote><pre class="code">A[href] {color: gray;}
A[href="http://www.w3.org/"] {color: silver;}</pre></blockquote>

<a name="css-CHP-10-FIG-8" /><div class="figure"><img height="63" alt="Figure 10-8" src="figs/css.1008.gif" width="106" /></div><h4 class="objtitle">Figure 10-8. Matching on attribute values</h4>

<p>Thanks to the cascade, the second rule will apply when an anchor
points to the W3C web site, overriding the previous rule.
</p>

</div>

<a name="css-CHP-10-SECT-2.2.3" /><div class="sect3">
<h3 class="sect3">10.2.2.3. Matching single attribute values</h3>

<p><a name="INDEX-1132" /> <a name="INDEX-1133" /> <a name="INDEX-1134" />It has been possible since HTML
3.2 to set multiple class names on a given element, such as:
</p>

<blockquote><pre class="code">&lt;P CLASS="footnote example reference"&gt;</pre></blockquote>

<p>In CSS1 you could only refer to one of the values, using a selector
like <tt class="literal">P.example</tt>. In CSS2, you can create a selector
such that the class name must be an exact match, or you can set it up
so that only one of the values has to match.
<tt class="literal">P[class="example"]</tt> wouldn't match the
preceding three-class paragraph, because the values are different
(<tt class="literal">example</tt> isn't the same as
<tt class="literal">footnote</tt> <tt class="literal">example</tt>
<tt class="literal">reference</tt>).
</p>

<p>On the other hand, <tt class="literal">P[class~="example"]</tt>
<em class="emphasis">would</em> match <tt class="literal">footnote</tt>
<tt class="literal">example</tt> <tt class="literal">reference</tt> because this
type of selector has only to match <em class="emphasis">one</em>of the
values in the class attribute. The only difference is the tilde
character (<tt class="literal">~</tt>), but what a difference!
</p>

<p>As an example, let's assume a document in which elements can
have one or more class values of <tt class="literal">driving</tt>,
<tt class="literal">flying</tt>, <tt class="literal">nautical</tt>,
<tt class="literal">directions</tt>, and <tt class="literal">title</tt>. Thus, an
element could have a class of <tt class="literal">driving</tt>
<tt class="literal">directions</tt>, or perhaps <tt class="literal">flying</tt>
<tt class="literal">directions</tt> <tt class="literal">title</tt>. Furthermore,
we decide that while all titles should be red, anything (other than a
title) relating to flying should be green and anything relating to
driving should be purple. These can be declared as follows:
</p>

<blockquote><pre class="code">*[class~="flying"] {color: green;}
*[class~="driving"] {color: purple;}
*[class~="title"] {color: red;}</pre></blockquote>

<p>The <a name="INDEX-1135" />
<a name="INDEX-1136" />tilde
(<tt class="literal">~</tt>) before the equals sign is what causes these
selectors to match any one of the values in the
<tt class="literal">class</tt> attribute. Thus, the following rule would
match any <tt class="literal">IMG</tt> element with a
<tt class="literal">class</tt> of <tt class="literal">figure</tt> and an
<tt class="literal">alt</tt> attribute that contains the word
<tt class="literal">Figure</tt>  -- such as <tt class="literal">Figure</tt>
<tt class="literal">1</tt>, <tt class="literal">Figure</tt> <tt class="literal">2</tt>,
and so on:
</p>

<blockquote><pre class="code">IMG[class="figure"][alt~="Figure"] {margin: 5px;}

&lt;IMG SRC="picture13.jpg" CLASS="figure" ALT="Figure 13"&gt;</pre></blockquote>

</div>

<a name="css-CHP-10-SECT-2.2.4" /><div class="sect3">
<h3 class="sect3">10.2.2.4. Simulating class and ID</h3>

<p><a name="INDEX-1137" />
<a name="INDEX-1138" />
<a name="INDEX-1139" />Using attribute selectors, you can
also simulate class and ID selectors. The following pairs of rules
are roughly equivalent:
</p>

<blockquote><pre class="code">P[class="directions"] {color: red;}
P.directions {color: red;}

DIV[ID="abc123"] {color: blue;}
DIV#abc123 {color: blue;}</pre></blockquote>

<p>Obviously, the latter rule in each pair is much simpler to type and
edit, and you'll probably use such rules in most circumstances.
</p>

<p>If you want an exact match, you can use an ordinary attribute
selector. Thus, the following rule:
</p>

<blockquote><pre class="code">P[class="driving directions"] {color: green;}</pre></blockquote>

<p>will match this markup:</p>

<blockquote><pre class="code">&lt;P CLASS="driving directions" &gt;This is a side note (and it's green).&lt;/P&gt;</pre></blockquote>

<p>If you aren't quite so concerned about exact matching, you can
string class selectors together. This is a new feature of CSS2, and
with this approach, you can match a <tt class="literal">class</tt>
attribute with a value of <tt class="literal">driving</tt>
<tt class="literal">directions</tt> in this way:
</p>

<blockquote><pre class="code">P.driving.directions {color: blue;}

&lt;P CLASS="driving directions"&gt;This is a side note (and it's blue this time).
&lt;/P&gt;</pre></blockquote>

<p>You could use the same selector to match the value
<tt class="literal">directions</tt> <tt class="literal">for</tt>
<tt class="literal">driving</tt>, since it contains both
<tt class="literal">driving</tt> and
<tt class="literal">directions</tt> -- just not in that order.
</p>

<p>Again, this probably seems a bit easier to type. So why go to all the
effort of using the longer notation of attribute selectors? The
reason to use attribute selectors is that the
<tt class="literal">.class</tt> and <tt class="literal">#ID</tt> selectors apply
only to HTML documents, or to any other document that uses a language
that includes the concepts of class and ID. Other languages, such as
those based on XML, might not honor these conventions, in which case
you'll need to use the attribute selectors instead.
</p>

</div>

<a name="css-CHP-10-SECT-2.2.5" /><div class="sect3">
<h3 class="sect3">10.2.2.5. Matching hyphenated values</h3>

<p><a name="INDEX-1140" />
<a name="INDEX-1141" />The last type of attribute selector is
generally used for language matching, but it does have other uses.
Any attribute selector using the symbols
<tt class="literal">|=</tt><a name="INDEX-1142" /> will match a value that begins with the
specified value, given that the value is at the start of a
hyphen-separated value. For example:
</p>

<blockquote><pre class="code">P[lang|="en"]</pre></blockquote>

<p>This selector will match any paragraph whose <tt class="literal">lang</tt>
attribute has the value <tt class="literal">en</tt>,
<tt class="literal">en-US</tt>, <tt class="literal">en-UK</tt>,
<tt class="literal">en-Cockney</tt>, and so on.
</p>

<p>In fact, this can be used to match any value with a similar format.
For example, if you have images with <tt class="literal">ALT</tt> text of
<tt class="literal">fig-1</tt>, <tt class="literal">fig-2</tt>,
<tt class="literal">fig-3</tt>, and so on, and want to match any of them,
you could use this selector:
</p>

<blockquote><pre class="code">IMG[alt|="fig"]</pre></blockquote>

<p>This is a less likely use for <tt class="literal">|=</tt>, but it's
still perfectly valid. Note that the previous rule would not match
the value <tt class="literal">figure</tt> or <tt class="literal">config</tt>, as
neither of them starts with <tt class="literal">fig-</tt> or is simply
<tt class="literal">fig</tt>. The rule would match
<tt class="literal">fig-tree</tt>, however.<a name="INDEX-1143" />
</p>

</div>
</div>
<a name="css-CHP-10-SECT-2.3" /><div class="sect2">
<h3 class="sect2">10.2.3. More Pseudo-Classes and Pseudo-Elements</h3>

<p><a name="INDEX-1144" />
<a name="INDEX-1145" />Even though that might seem like
it's more than enough, another area of expansion is in
pseudo-class and pseudo-element selectors.
</p>

<a name="css-CHP-10-SECT-2.3.1" /><div class="sect3">
<h3 class="sect3">10.2.3.1. :hover</h3>

<p><a name="INDEX-1146" />To begin,
there is <tt class="literal">:hover</tt>. The basic idea is that the styles
in a <tt class="literal">:hover</tt> rule are applied while your mouse
pointer is "hovering" over an element. For example, when
the pointer is positioned over a link such that clicking the mouse
button would cause the browser to follow the link, the pointer is
"hovering" over the link. This is in some respects
similar to the somewhat famous JavaScript "rollover"
trick, where images change when the pointer hovers over them. Thanks
to <tt class="literal">:hover</tt>, you can specify a hover style very
easily:
</p>

<blockquote><pre class="code">A:link {background: white; color: blue;}
A:hover {background: blue; color: white;}</pre></blockquote>

<p>These styles will cause anchors to "reverse" in color
when the mouse pointer hovers over them, as illustrated in <a href="ch10_02.htm">Figure 10-9</a>.
</p>

<a name="css-CHP-10-FIG-9" /><div class="figure"><img height="38" alt="Figure 10-9" src="figs/css.1009.gif" width="105" /></div><h4 class="objtitle">Figure 10-9. Hover styles</h4>

<p>As a matter of fact, the rule for <tt class="literal">A:hover</tt> would be
used while the pointer hovers over any anchor, not just a hyperlink.
While some other pseudo-classes, like <tt class="literal">:link</tt> and
<tt class="literal">:visited</tt> , are constrained to the
<tt class="literal">A</tt> element in HTML, the same is not true of
<tt class="literal">:hover</tt>. User agents could, in theory, allow the
assignment of hover styles to any element, like this:
</p>

<blockquote><pre class="code">P:hover {font-weight: bold;}</pre></blockquote>

<p>Therefore, if you want to make sure your hover styles are applied
only to your hyperlinks, you would need to use this rule:
</p>

<blockquote><pre class="code">A:link:hover {background: blue; color: white;}</pre></blockquote>

<p>The ability to combine pseudo-classes is a new feature of CSS2.</p>

<a name="ch10-15-fm2xml" /><blockquote><h4>WARNING</h4>
<p><a name="INDEX-1147" />Internet
<a name="INDEX-1148" />Explorer 4.x and 5.x both
recognize <tt class="literal">:hover</tt> on anchors only. As of this
writing, no other browser will recognize <tt class="literal">:hover</tt>
under any circumstances.
</p>
</blockquote>

</div>

<a name="css-CHP-10-SECT-2.3.2" /><div class="sect3">
<h3 class="sect3">10.2.3.2. :focus</h3>

<p><a name="INDEX-1149" />Similar
to <tt class="literal">:hover</tt> is <tt class="literal">:focus</tt>, which is
used to define styles for elements that are "in focus." A
form element, for example, has "focus" when it is
currently ready to accept input. Therefore, the background of
<tt class="literal">INPUT</tt> elements could be set to yellow in order to
highlight the currently active input:
</p>

<blockquote><pre class="code">INPUT:focus {background: yellow;}</pre></blockquote>

<p>This style would only be applied to an element as long as it was in
focus. As soon as the user switched from one input to another, the
styles would be removed from the former and applied to the latter.
This is a welcome capability, as it reduces the need for using
JavaScript to create such effects.
</p>

<a name="ch10-17-fm2xml" /><blockquote><h4>TIP</h4>
<p>There are serious issues related to document reflow with
<tt class="literal">:hover</tt> and <tt class="literal">:focus</tt>. Take, for
example:
</p>

<blockquote><pre class="code">A:hover {font-size: 200%;}</pre></blockquote>

<p>In theory, a user agent would have to double the size of anchor text
as the pointer hovers over it, which could well cause major redisplay
issues. An author could cause similar problems by declaring that
<tt class="literal">TEXTAREA</tt> elements should change their size when
they are in focus. User agents are not required to reflow the
document based on styles assigned to these pseudo-elements, although
some may do so -- it remains to be seen.
</p>
</blockquote>

</div>

<a name="css-CHP-10-SECT-2.3.3" /><div class="sect3">
<h3 class="sect3">10.2.3.3. :lang</h3>

<p><a name="INDEX-1150" />
<a name="INDEX-1151" />On a completely different note is
the pseudo-class <tt class="literal">:lang</tt>, which is used to apply
styles to elements with matching languages. Let's say you want
all paragraphs in English to be black on white, and all paragraphs in
French to be white on black:
</p>

<blockquote><pre class="code">P:lang(en) {color: black; background: white;}
P:lang(fr) {color: white; background: black;}</pre></blockquote>

<p>Of course, user agents aren't likely to figure out element
languages on their own. Instead, they have to rely on document
markup, such as the <tt class="literal">lang</tt> attribute in HTML:
</p>

<blockquote><pre class="code">&lt;P lang="en"&gt;This paragraph is in English.&lt;/P&gt;
&lt;P lang="fr"&gt;Ce paragraphe est en fran&amp;ccedil;ais.&lt;/P&gt;</pre></blockquote>

<p>The results are shown in <a href="ch10_02.htm">Figure 10-10</a>.</p>

<a name="css-CHP-10-FIG-10" /><div class="figure"><img height="56" alt="Figure 10-10" src="figs/css.1010.gif" width="296" /></div><h4 class="objtitle">Figure 10-10. Changing styles based on language</h4>

<p>Even if this isn't something you're likely to use often,
it can still come in very handy. For example, you could define styles
to apply to entire documents:
</p>

<blockquote><pre class="code">HTML:lang(de) {color: black; background: yellow;}</pre></blockquote>

<p>Thus would all HTML documents marked as German be shown as black text
on a yellow background. This marking could be made with the
<tt class="literal">lang</tt> attribute, in a <tt class="literal">META</tt> tag
in the document's head, or even as a value in the
document's HTTP headers. This is somewhat similar to the
<tt class="literal">|=</tt> attribute selector discussed in the previous
section, but it is a little more general.
</p>

</div>

<a name="css-CHP-10-SECT-2.3.4" /><div class="sect3">
<h3 class="sect3">10.2.3.4. :first-child</h3>

<p><a name="INDEX-1152" />The
last of the new pseudo-class selectors we'll cover here is the
<tt class="literal">:first-child</tt> selector. This is used to match an
element that is the first child of another element. For example, you
might want to make the first child of every <tt class="literal">DIV</tt>
italicized instead of normal text, as long as that first child is a
paragraph (shown in <a href="ch10_02.htm">Figure 10-11</a>):
</p>

<blockquote><pre class="code">P {color: black;}
P:first-child {font-style: italic;}

&lt;BODY&gt;
&lt;P&gt;This paragraph should be italic.&lt;/P&gt;
&lt;P&gt;This paragraph should be normal.&lt;/P&gt;
&lt;DIV STYLE="border: 1px dashed gray;"&gt;
This text should be normal.
&lt;P&gt;This paragraph should be italic.&lt;/P&gt;
&lt;P&gt;This paragraph should be normal.&lt;/P&gt;
&lt;/DIV&gt;
&lt;DIV STYLE="border: 1px dotted gray;"&gt;
&lt;H2&gt;This H2 should be normal.&lt;/H2&gt;
&lt;P&gt;This paragraph should be normal.&lt;/P&gt;
&lt;P&gt;This paragraph should be normal.&lt;/P&gt;
&lt;/DIV&gt;
&lt;/BODY&gt;</pre></blockquote>

<a name="css-CHP-10-FIG-11" /><div class="figure"><img height="216" alt="Figure 10-11" src="figs/css.1011.gif" width="273" /></div><h4 class="objtitle">Figure 10-11. Selecting styles for certain first children</h4>

<p>The very first paragraph is italicized because it is the first child
of the <tt class="literal">BODY</tt> element. Similarly, the first
paragraph in the first <tt class="literal">DIV</tt> is italicized because
it is the first child of the <tt class="literal">DIV</tt>, even though text
preceded it. Only structural elements count for this pseudo-class, so
the text before the paragraph doesn't affect the
paragraph's status as the first child. However, in the second
<tt class="literal">DIV</tt>, the <tt class="literal">H2</tt> is the first child,
so it does not match the rule <tt class="literal">P:first-child</tt>. If
the intent is to have the first child of any element be italicized,
no matter what element that might be, then you need only leave off
the element part of the selector, or use it in conjunction with the
universal selector. This will yield the result shown in <a href="ch10_02.htm">Figure 10-12</a>:
</p>

<blockquote><pre class="code">*:first-child {font-style: italic;}</pre></blockquote>

<a name="css-CHP-10-FIG-12" /><div class="figure"><img height="266" alt="Figure 10-12" src="figs/css.1012.gif" width="336" /></div><h4 class="objtitle">Figure 10-12. Selecting any first child</h4>

<p>Now let's say we want to apply styles to elements that are part
of a first child; for example, all emphasized text within a
first-child paragraph should be italicized:
</p>

<blockquote><pre class="code">P:first-child EM {font-style: italic;}</pre></blockquote>

<p>Of course, this will match any first-child paragraph, no matter its
parent element. Suppose instead we want a rule that applies only to
paragraphs that are the first children of <tt class="literal">DIV</tt>
elements. In that case, we need to use the child selector:
</p>

<blockquote><pre class="code">DIV &gt; P:first-child {font-style: italic;}</pre></blockquote>

<p>This translates as, "any paragraph that is a first child, and
is a child of a <tt class="literal">DIV</tt>, should be in italics."
If we were to leave out the child selector as follows, though:
</p>

<blockquote><pre class="code">DIV P:first-child {font-style: italic;}</pre></blockquote>

<p>then the rule would read, "any paragraph that is a first child
of any element, and is also a descendant of a <tt class="literal">DIV</tt>,
should be in italics." The difference is subtle, but real.
</p>

</div>

<a name="css-CHP-10-SECT-2.3.5" /><div class="sect3">
<h3 class="sect3">10.2.3.5. Miscellaneous pseudo-elements and pseudo-classes</h3>

<p>There are two other new <a name="INDEX-1153" />
<a name="INDEX-1154" />pseudo-elements:
</p>

<blockquote><pre class="code">:before
:after</pre></blockquote>

<p>There are also three new
pseudo-classes<a name="INDEX-1155" />
<a name="INDEX-1156" /> <a name="INDEX-1157" />:
</p>

<blockquote><pre class="code">:left
:right
:first</pre></blockquote>

<p>The details of these pseudo-elements and pseudo-classes are discussed
later in<a name="INDEX-1158" /> <a name="INDEX-1159" /> this chapter.<a name="INDEX-1160" /> <a name="INDEX-1161" />
</p>

</div>
</div>


<hr width="684" align="left" />
<div class="navbar"><table width="684" border="0"><tr><td align="left" valign="top" width="228"><a href="ch10_01.htm"><img alt="Previous" border="0" src="../gifs/txtpreva.gif" /></a></td><td align="center" valign="top" width="228"><a href="index.htm"><img alt="Home" border="0" src="../gifs/txthome.gif" /></a></td><td align="right" valign="top" width="228"><a href="ch10_03.htm"><img alt="Next" border="0" src="../gifs/txtnexta.gif" /></a></td></tr><tr><td align="left" valign="top" width="228">10. CSS2: A Look Ahead</td><td align="center" valign="top" width="228"><a href="index/index.htm"><img alt="Book Index" border="0" src="../gifs/index.gif" /></a></td><td align="right" valign="top" width="228">10.3. Fonts and Text</td></tr></table></div>
<hr width="684" align="left" />

<img alt="Library Navigation Links" border="0" src="../gifs/navbar.gif" usemap="#library-map" />
<p><font size="-1"><a href="copyrght.htm">Copyright &copy; 2002</a> O'Reilly &amp; Associates. All rights reserved.</font></p>

<map name="library-map"><area href="../index.htm" coords="0,1,78,93" shape="rect" /><area href="../wdesign/index.htm" coords="80,2,155,96" shape="rect" /><area href="../xhtml/index.htm" coords="158,0,263,97" shape="rect" /><area href="../audio/index.htm" coords="265,1,335,97" shape="rect" /><area href="index.htm" coords="338,1,434,93" shape="rect" /><area href="../action/index.htm" coords="439,0,540,102" shape="rect" /><area href="../infoarch/index.htm" coords="544,0,685,102" shape="rect" /></map>

</body></html>
