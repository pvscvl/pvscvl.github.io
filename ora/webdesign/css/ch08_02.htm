<html><head><title>Block-Level Elements (Cascading Style Sheets: The Definitive Guide)</title><link rel="stylesheet" type="text/css" href="style/style.css" />

<meta name="DC.Creator" content="Eric A. Meyer" /><meta name="DC.Format" content="text/xml" scheme="MIME" /><meta name="DC.Language" content="en-US" /><meta name="DC.Publisher" content="O'Reilly &amp; Associates, Inc." /><meta name="DC.Source" scheme="ISBN" content="1565926226L" /><meta name="DC.Subject.Keyword" content="stuff" /><meta name="DC.Title" content="Cascading Style Sheets: The Definitive Guide" /><meta name="DC.Type" content="Text.Monograph" />

</head><body bgcolor="#ffffff">

<img alt="Book Home" border="0" src="gifs/smbanner.gif" usemap="#banner-map" /><map name="banner-map"><area shape="rect" coords="1,-2,616,66" href="index.htm" alt="Cascading Style Sheets: The Definitive Guide" /><area shape="rect" coords="629,-11,726,25" href="jobjects/fsearch.htm" alt="Search this book" /></map>

<div class="navbar"><table width="684" border="0"><tr><td align="left" valign="top" width="228"><a href="ch08_01.htm"><img alt="Previous" border="0" src="../gifs/txtpreva.gif" /></a></td><td align="center" valign="top" width="228"><a href="index.htm">Cascading Style Sheets: The Definitive Guide</a></td><td align="right" valign="top" width="228"><a href="ch08_03.htm"><img alt="Next" border="0" src="../gifs/txtnexta.gif" /></a></td></tr></table></div>
<hr width="684" align="left" />


<h2 class="sect1">8.2. Block-Level Elements</h2>

<p><a name="INDEX-915" />Block-level <a name="INDEX-916" />elements -- such as paragraphs,
<tt class="literal">H1</tt>s, lists, and list elements -- behave in
interesting ways, sometimes predictable, sometimes surprising. There
are differences in the handling of element placement along the
horizontal and vertical axes, for example. In order to fully
understand how block-level elements are handled, you must clearly
understand a number of boundaries and areas. They are shown in detail
in <a href="ch08_02.htm">Figure 8-2</a>.
</p>

<a name="css-CHP-8-FIG-2" /><div class="figure"><img height="286" alt="Figure 8-2" src="figs/css.0802.gif" width="403" /></div><h4 class="objtitle">Figure 8-2. The complete box model</h4>

<p>In general, the <tt class="literal">width</tt> of an element is defined to
be the distance from the left inner edge to the right inner edge, and
the <tt class="literal">height</tt> is the distance from the inner top to
the inner bottom. These are both, not coincidentally, properties that
can be applied to an element.
</p>

<p>The various widths, heights, padding, margins, and borders all
combine to determine how a document is laid out. In most cases, the
height and width are automatically determined by the browser, based
on the available display region and other factors. Under CSS, of
course, you can assert more direct control over the way elements are
sized and displayed. There are different effects to consider for
horizontal and vertical layout, so we'll tackle them
separately.
</p>

<a name="css-CHP-8-SECT-2.1" /><div class="sect2">
<h3 class="sect2">8.2.1. Vertical Formatting</h3>

<p><a name="INDEX-917" /> <a name="INDEX-918" />Vertical formatting is much easier
to cover, so let's do that first. A good deal of this was
covered in the previous chapter, so we'll revisit the high
points and delve into some trivia before moving on to the much more
complex subject of horizontal formatting.
</p>

<a name="css-CHP-8-SECT-2.1.1" /><div class="sect3">
<h3 class="sect3">8.2.1.1. Height</h3>

<p><a name="INDEX-919" /> <a name="INDEX-920" />In
general, the height of an element is determined by its content. This
can be affected by its width, of course; the skinnier a paragraph
becomes, for example, the taller it has to be in order to contain all
of the textual (and other) content.
</p>

<p>In CSS, it is possible to set an explicit height on any block-level
element. If this is done, the resulting behavior is somewhat
uncertain. Assume that the specified height is greater than that
needed to display the content:
</p>

<blockquote><pre class="code">&lt;P STYLE="height: 10em;"&gt;</pre></blockquote>

<p>In this case, then the extra height is treated somewhat like extra
padding, as depicted in <a href="ch08_02.htm">Figure 8-3</a>.
</p>

<a name="css-CHP-8-FIG-3" /><div class="figure"><img height="163" alt="Figure 8-3" src="figs/css.0803.gif" width="448" /></div><h4 class="objtitle">Figure 8-3. Setting the height property for block-level elements</h4>

<p>If, on the other hand, the <tt class="literal">height</tt> is
<em class="emphasis">less</em> than that needed to display the content:
</p>

<blockquote><pre class="code">&lt;P STYLE="height: 3em;"&gt;</pre></blockquote>

<p>then the browser is supposed to provide a way to see all content
without increasing the height. This could possibly mean adding a
scrollbar to the element, as shown in <a href="ch08_02.htm">Figure 8-4</a>.
</p>

<a name="css-CHP-8-FIG-4" /><div class="figure"><img height="45" alt="Figure 8-4" src="figs/css.0804.gif" width="481" /></div><h4 class="objtitle">Figure 8-4. One way to handle a short height on a tall element</h4>

<p>In practice, most browsers will not do this. They will instead simply
increase the height of the element, as though the value of
<tt class="literal">height</tt> had been set to <tt class="literal">auto</tt>.
This is permitted under CSS1, which states that browsers can ignore
any value of <tt class="literal">height</tt> other than
<tt class="literal">auto</tt> if an element is not a replaced element such
as an image. Under
<a name="INDEX-921" />
<a name="INDEX-922" />CSS2, it is possible to set up a
situation where scrollbars would be applied to an element such as a
paragraph.
</p>

<p>It's also possible to set the top and bottom margins of a
block-level element to be <tt class="literal">auto</tt>. If either of these
properties is set to <tt class="literal">auto</tt>, it is reset to
<tt class="literal">0</tt> (zero), effectively removing any top or bottom
margin from the element box, as shown in <a href="ch08_02.htm">Figure 8-5</a>. The lack of any space between the borders of
each paragraph is a result of <tt class="literal">auto</tt> being
reinterpreted as zero:
</p>

<blockquote><pre class="code">P {margin-top: auto; margin-bottom: auto;}</pre></blockquote>

<a name="css-CHP-8-FIG-5" /><div class="figure"><img height="199" alt="Figure 8-5" src="figs/css.0805.gif" width="424" /></div><h4 class="objtitle">Figure 8-5. Automatically setting margins to zero</h4>

</div>

<a name="css-CHP-8-SECT-2.1.2" /><div class="sect3">
<h3 class="sect3">8.2.1.2. Collapsing vertical margins</h3>

<p><a name="INDEX-923" />
<a name="INDEX-924" /> <a name="INDEX-925" />There is one other important
aspect of vertical formatting, which is the collapsing of adjacent
margins. This comes into play when an element with declared margins
immediately follows another such element in the document's
layout. This was discussed in the previous chapter, using this
example:
</p>

<blockquote><pre class="code">LI {margin-top: 10px; margin-bottom: 20px;}</pre></blockquote>

<p>Padding and borders, where they exist, are never collapsed. If
neither is declared, then both will default to <tt class="literal">0</tt>
(zero). This assumes that no style is set for the border. If a border
style is set, then the value of <tt class="literal">border-width</tt>
defaults to <tt class="literal">medium</tt> , not zero. The exact width of
<tt class="literal">medium</tt> will depend on the user agent's
programming, but a common value is 2<a name="INDEX-926" /> or 3 pixels.<a name="INDEX-927" />
</p>

</div>
</div>
<a name="css-CHP-8-SECT-2.2" /><div class="sect2">
<h3 class="sect2">8.2.2. Horizontal Formatting</h3>

<p><a name="INDEX-928" /> <a name="INDEX-929" />In contrast
to vertical formatting, horizontal formatting can get a little
complicated. Fortunately, it starts out simply enough; it's
only when you start putting things together that the situation
becomes difficult.
</p>

<p>First off, the simplest rule is this: unlike vertical margins,
horizontal
<a name="INDEX-930" /> <a name="INDEX-931" />margins are not
collapsed. If you somehow manage to have two block-level elements
next to each other, and each has a margin, the margins will not
collapse. The easiest way to illustrate this principle is to set
margins on two images and then have them appear on the same line, as
they do in <a href="ch08_02.htm">Figure 8-6</a>:
</p>

<blockquote><pre class="code">&lt;IMG SRC="test1.gif" STYLE="margin: 5px;" ALT="first test"&gt;
&lt;IMG SRC="test2.gif" STYLE="margin: 5px;" ALT="second test"&gt;</pre></blockquote>

<p>(Note that the images in <a href="ch08_02.htm">Figure 8-6</a> are actually
inline elements, but they effectively demonstrate that horizontally
adjacent margins do not collapse.)
</p>

<a name="css-CHP-8-FIG-6" /><div class="figure"><img height="42" alt="Figure 8-6" src="figs/css.0806.gif" width="61" /></div><h4 class="objtitle">Figure 8-6. Horizontal margins don't collapse</h4>

<p>Almost as simple is this: the sum of the horizontal components of a
nonfloated block-level element box always equals the
<tt class="literal">width</tt><a name="INDEX-932" /> of the parent. Take two paragraphs
within a <tt class="literal">DIV</tt>, for example, whose margins have been
set to be <tt class="literal">1em</tt>. The content width (in other words,
the value of <tt class="literal">width</tt>) of the paragraph, plus its
left and right padding, borders, and margins, always add up to the
<tt class="literal">width</tt> of the <tt class="literal">DIV</tt> 's
content, as illustrated in <a href="ch08_02.htm">Figure 8-7</a>.
</p>

<a name="css-CHP-8-FIG-7" /><div class="figure"><img height="150" alt="Figure 8-7" src="figs/css.0807.gif" width="424" /></div><h4 class="objtitle">Figure 8-7. Element boxes are as wide as the width of their parent element</h4>

<p>Thus, if the <tt class="literal">width</tt> of the <tt class="literal">DIV</tt>
is <tt class="literal">30em</tt> , then the sum total of the content width,
padding, borders, and margins of each paragraph will be
<tt class="literal">30em</tt>. In <a href="ch08_02.htm">Figure 8-7</a>, the
"blank" space around the paragraphs is actually their
margins. (If the <tt class="literal">DIV</tt> had any padding, there would
be even more blank space, but that wasn't the case here.)
</p>

<p>In a similar fashion, the overall width of a <a name="INDEX-933" />list item's element box is equal to
the content width of the list element that contains it. As you can
see in <a href="ch08_02.htm">Figure 8-8</a>, the margins of a parent element
can influence the layout of a child element.
</p>

<a name="css-CHP-8-FIG-8" /><div class="figure"><img height="181" alt="Figure 8-8" src="figs/css.0808.gif" width="334" /></div><h4 class="objtitle">Figure 8-8. List items' overall width equals the width of the UL element</h4>

<a name="css-CHP-8-SECT-2.2.1" /><div class="sect3">
<h3 class="sect3">8.2.2.1. Horizontal properties</h3>

<p><a name="INDEX-934" />There <a name="INDEX-935" />are a number of properties relating
to the layout of boxes. These are known as the
<a name="INDEX-936" />"seven
properties" of horizontal formatting: (from the left)
<tt class="literal">margin-left</tt>, <tt class="literal">border-left</tt>,
<tt class="literal">padding-left</tt>, <tt class="literal">width</tt> ,
<tt class="literal">padding-right</tt>, <tt class="literal">border-right</tt>,
and <tt class="literal">margin-right</tt>. These are illustrated in <a href="ch08_02.htm">Figure 8-9</a>. The values of these seven properties must
equal the value of <tt class="literal">width</tt> for an element's
parent.
</p>

<a name="css-CHP-8-FIG-9" /><div class="figure"><img height="166" alt="Figure 8-9" src="figs/css.0809.gif" width="403" /></div><h4 class="objtitle">Figure 8-9. The "seven properties" of horizontal formatting</h4>

<p>Only three of these seven properties can be set to
<tt class="literal">auto</tt>: the <tt class="literal">width</tt> of the
element's content, and the left and right margins. The left and
right padding and borders must be set to specific values, or else
they default to a width of zero (again, assuming no
<tt class="literal">border-style</tt> is declared; if one has been set,
then the width of the borders is set to be the vaguely defined value
<tt class="literal">medium</tt> ). <a href="ch08_02.htm">Figure 8-10</a> provides a
handy illustration for remembering which parts of the box can take a
value of <tt class="literal">auto</tt>, and which cannot.
</p>

<a name="css-CHP-8-FIG-10" /><div class="figure"><img height="166" alt="Figure 8-10" src="figs/css.0810.gif" width="403" /></div><h4 class="objtitle">Figure 8-10. Horizontal properties that can be set to auto</h4>

<p><tt class="literal">width</tt> must be set to either
<tt class="literal">auto</tt> or a non-negative value of some type. CSS
also allows browsers to set a minimum value for
<tt class="literal">width</tt>, below which a block-level element's
<tt class="literal">width</tt> cannot drop. The value of this minimum can
vary between browsers, as it is not defined in the specification.
</p>

</div>

<a name="css-CHP-8-SECT-2.2.2" /><div class="sect3">
<h3 class="sect3">8.2.2.2. Using auto</h3>

<p><a name="INDEX-937" />If <a name="INDEX-938" />only one of <tt class="literal">width</tt> ,
<tt class="literal">margin-left</tt>, or <tt class="literal">margin-right</tt> is
set to a value of <tt class="literal">auto</tt>, while the others are given
specific values, then the property set to be <tt class="literal">auto</tt>
will evaluate to whatever length is required to make the element
box's width equal the parent element's
<tt class="literal">width</tt>. Thus, if the sum of the seven properties
must equal 400 pixels, and no padding or borders are set, and the
right margin and width are set to <tt class="literal">100px</tt> while the
left margin is set to <tt class="literal">auto</tt>, then the left margin
will be 200 pixels wide:
</p>

<blockquote><pre class="code">P {margin-left: auto; margin-right: 100px; width: 100px;} </pre></blockquote>

<p>The results are shown in <a href="ch08_02.htm">Figure 8-11</a>.</p>

<a name="css-CHP-8-FIG-11" /><div class="figure"><img height="67" alt="Figure 8-11" src="figs/css.0811.gif" width="438" /></div><h4 class="objtitle">Figure 8-11. Automatic left margin</h4>

<p>In a sense, <tt class="literal">auto</tt> can be used to say, "make
up the difference between everything else and the required
total." However, what if all three of these properties are set
to <tt class="literal">100px</tt> , and none of them to
<tt class="literal">auto</tt> ?
</p>

<p>In the case where all three properties are set to something other
than <tt class="literal">auto</tt> -- or, to borrow a term from the CSS
specification, when these formatting properties have been
over-constrained -- then <tt class="literal">margin-right</tt> is
<em class="emphasis">always</em> forced to be <tt class="literal">auto</tt>.
This means that if both margins and the width are set to
<tt class="literal">100px</tt> , then the right margin will be set by the
user agent to <tt class="literal">auto</tt>:
</p>

<blockquote><pre class="code">P {margin-left: 100px; margin-right: 100px; width: 100px;}</pre></blockquote>

<p>It will then evaluate to <tt class="literal">200px</tt> , as shown in <a href="ch08_02.htm">Figure 8-12</a>.
</p>

<a name="css-CHP-8-FIG-12" /><div class="figure"><img height="68" alt="Figure 8-12" src="figs/css.0812.gif" width="439" /></div><h4 class="objtitle">Figure 8-12. Overriding the margin-right setting</h4>

<a name="ch08-10-fm2xml" /><blockquote><h4>TIP</h4>
<p>Note that <tt class="literal">margin-right</tt> is forced to be
<tt class="literal">auto</tt> only for left-to-right languages such as
English. In right-to-left languages, everything gets flipped around,
so <tt class="literal">margin-left</tt> is forced to be
<tt class="literal">auto</tt>, not <tt class="literal">margin-right</tt>. This is
not so much an issue under CSS1 as it is in CSS2, which introduces
properties related to writing direction.
</p>
</blockquote>

<p>If both margins are set explicitly, and <tt class="literal">width</tt> is
<tt class="literal">auto</tt>, then the value of <tt class="literal">width</tt>
will be set to be whatever is needed to reach the required total
(that is, the content width of the parent element). The following
markup is displayed as shown in <a href="ch08_02.htm">Figure 8-13</a>:
</p>

<blockquote><pre class="code">P {margin-left: 100px; margin-right: 100px; width: auto;}</pre></blockquote>

<a name="css-CHP-8-FIG-13" /><div class="figure"><img height="68" alt="Figure 8-13" src="figs/css.0813.gif" width="441" /></div><h4 class="objtitle">Figure 8-13. Automatic width</h4>

<p>This is the most common case, in fact, since it is equivalent to
setting the margins and not declaring anything for the
<tt class="literal">width</tt>. The result of this markup is exactly the
same as that shown in <a href="ch08_02.htm">Figure 8-13</a>:
</p>

<blockquote><pre class="code">P {margin-left: 100px; margin-right: 100px;} /* same as before */</pre></blockquote>

<a name="ch08-11-fm2xml" /><blockquote><h4>WARNING</h4>
<p>In practice, only browsers released in early 1999 or later correctly
handle <tt class="literal">auto</tt>, and not even all of them get it
right. Those that do not handle <tt class="literal">auto</tt> margins
correctly will behave in inconsistent ways, but the safest bet is to
assume that they will set both margins to zero. The browsers that do
get this right are Internet Explorer 4.5 and 5 for Macintosh, and
Opera 3.6.
</p>
</blockquote>

</div>

<a name="css-CHP-8-SECT-2.2.3" /><div class="sect3">
<h3 class="sect3">8.2.2.3. More than one auto</h3>

<p>Now let us consider the cases where two of these three properties are
set to <tt class="literal">auto</tt>. If both the margins are set to
<tt class="literal">auto</tt>, then they are set to equal lengths, thus
centering the element within its parent, as you can see from <a href="ch08_02.htm">Figure 8-14</a>:
</p>

<blockquote><pre class="code">P {width: 100px; margin-left: auto; margin-right: auto;}</pre></blockquote>

<a name="css-CHP-8-FIG-14" /><div class="figure"><img height="68" alt="Figure 8-14" src="figs/css.0814.gif" width="439" /></div><h4 class="objtitle">Figure 8-14. Setting an explicit width</h4>

<p>This is the correct way to center block-level elements, as a matter
of fact. <tt class="literal">text-align</tt> is supposed to apply to only
the inline content of a block-level element, so setting an element to
have a <tt class="literal">text-align</tt> of <tt class="literal">center</tt>
shouldn't center it. Instead, you should declare:
</p>

<blockquote><pre class="code">P {margin-left: auto; margin-right: auto; width: 50%;}</pre></blockquote>

<p>This will center all paragraphs within their parent elements, as
shown in <a href="ch08_02.htm">Figure 8-15</a>.
</p>

<a name="css-CHP-8-FIG-15" /><div class="figure"><img height="82" alt="Figure 8-15" src="figs/css.0815.gif" width="441" /></div><h4 class="objtitle">Figure 8-15. Centering an element with automatic margins</h4>

<a name="ch08-14-fm2xml" /><blockquote><h4>WARNING</h4>
<p>As of this writing, only Internet Explorer 4.5 and 5 for the
Macintosh and Opera 3.6 will center elements using
<tt class="literal">auto</tt> margins.
</p>
</blockquote>

<p>The other possibility is when one of the margins and the width are
set to be <tt class="literal">auto</tt>. In this case, then the margin set
to be <tt class="literal">auto</tt> is reduced to zero:
</p>

<blockquote><pre class="code">P {width: auto; margin-left: auto; margin-right: 100px;}</pre></blockquote>

<p>The <tt class="literal">width</tt> is then set to the value necessary to
reach the required total, as demonstrated in <a href="ch08_02.htm">Figure 8-16</a>.
</p>

<a name="css-CHP-8-FIG-16" /><div class="figure"><img height="68" alt="Figure 8-16" src="figs/css.0816.gif" width="438" /></div><h4 class="objtitle">Figure 8-16. Setting an explicit right margin</h4>

<p>Finally, what happens when all three properties are set to
<tt class="literal">auto</tt> ? The answer is simple: both margins are set
to zero, and the <tt class="literal">width</tt> is made as wide as
possible. This result is the same as the default situation when there
are no values explicitly declared for margins or the width. In such a
case, the margins default to zero (<tt class="literal">0</tt>) and the
width defaults to <tt class="literal">auto</tt>. This is illustrated in
<a href="ch08_02.htm">Figure 8-17</a>.
</p>

<a name="css-CHP-8-FIG-17" /><div class="figure"><img height="68" alt="Figure 8-17" src="figs/css.0817.gif" width="439" /></div><h4 class="objtitle">Figure 8-17. Everything set to auto</h4>

<p>Note that since horizontal margins do not collapse, the padding,
borders, and margin of a parent element can affect its children. This
is an indirect effect, of course, in that the margins (and so on) of
an element can induce an offset for child elements. Vertical margins
are still collapsed, as<a name="INDEX-939" /> shown<a name="INDEX-940" /> in <a href="ch08_02.htm">Figure 8-18</a>:
</p>

<blockquote><pre class="code">DIV {margin: 20px; padding: 20px;}
P {margin: 10px; padding: 10px;}</pre></blockquote>

<a name="css-CHP-8-FIG-18" /><div class="figure"><img height="123" alt="Figure 8-18" src="figs/css.0818.gif" width="441" /></div><h4 class="objtitle">Figure 8-18. Offset is implicit in the parent's margins and padding</h4>

</div>

<a name="css-CHP-8-SECT-2.2.4" /><div class="sect3">
<h3 class="sect3">8.2.2.4. Negative margins</h3>

<p><a name="INDEX-941" />So <a name="INDEX-942" />far, this probably all seems rather
straightforward, and you may be wondering why I said things could be
complicated. As it turns out, the complication is that margins can
have negative values.
</p>

<p>You'll remember that I said the second-simplest rule of
horizontal formatting was this: the total of the seven horizontal
properties always equals the <tt class="literal">width</tt> of the parent
element. At first glance, this can be interpreted to mean that an
element can never be wider than its parent's content
area -- and as long as all properties are zero or greater,
that's quite true. However, consider the following, depicted in
<a href="ch08_02.htm">Figure 8-19</a>:
</p>

<blockquote><pre class="code">DIV {width: 400px; border: 3px solid black}
P.wide {margin-left: 10px; width: auto; margin-right: -50px; 
  border: 1px solid gray;}</pre></blockquote>

<a name="css-CHP-8-FIG-19" /><div class="figure"><img height="107" alt="Figure 8-19" src="figs/css.0819.gif" width="481" /></div><h4 class="objtitle">Figure 8-19. Wider children through negative margins</h4>

<p>Yes, the child element is wider than its parent! This is
mathematically correct: 10 +
+
+ 450 +
+
- 50 = 400. Even though this leads to a child element
sticking out of its parent, technically the specification
hasn't been violated, because the values of the seven
properties add up to the required total. It's a semantic dodge,
but it's valid behavior.
</p>

<p>Let's consider another example, illustrated in <a href="ch08_02.htm">Figure 8-20</a>, where the left margin is set to be negative:
</p>

<blockquote><pre class="code">DIV {width: 400px; border: 1px solid black;}
P.wide {margin-left: -50px; width: auto; margin-right: 10px;
  border: 3px solid gray;}</pre></blockquote>

<a name="css-CHP-8-FIG-20" /><div class="figure"><img height="160" alt="Figure 8-20" src="figs/css.0820.gif" width="398" /></div><h4 class="objtitle">Figure 8-20. Setting a negative left margin</h4>

<p>In this case, not only does the paragraph spill beyond the borders of
the <tt class="literal">DIV</tt>, but also beyond the edge of the browser
window itself!
</p>

<a name="ch08-16-fm2xml" /><blockquote><h4>TIP</h4>
<p>Remember that padding, borders, and content widths can never be
negative. Only margins can be less than zero.
</p>
</blockquote>

<p>Negative margins have an impact on vertical formatting as well,
affecting how margins are collapsed. If there are negative vertical
margins, then the browser should take the absolute maximum of the
negative margins and subtract that from the maximum of any positive
margins.
</p>

<p>In the case where there are only two margins to be collapsed, one
positive and the other negative, the situation is handled in a fairly
simple manner. The absolute value of the negative margin is
subtracted from the positive margin -- or, to put it another way,
the negative is added to the positive -- and the resulting value
is the distance between the elements. <a href="ch08_02.htm">Figure 8-21</a>
provides two concrete examples.
</p>

<a name="css-CHP-8-FIG-21" /><div class="figure"><img height="234" alt="Figure 8-21" src="figs/css.0821.gif" width="330" /></div><h4 class="objtitle">Figure 8-21. Examples of negative vertical margins</h4>

<p>You'll notice the "pulling" effect of negative top
and bottom margins. This is really no different from the way in which
negative horizontal margins cause an element to push outside of its
parent. Consider:
</p>

<blockquote><pre class="code">DIV {width: 400px; border: 1px solid black;}
P.neg {margin-top: -50px; width: auto; margin-right: 10px;
  margin-left: 10px; border: 3px solid gray;}

&lt;DIV STYLE="width: 420px; background-color: silver; 
   padding: 10px; margin-top: 75px;"&gt;
&lt;P CLASSS="neg"&gt;
A paragraph.
&lt;/P&gt;
&lt;/DIV&gt;</pre></blockquote>

<p>As we can see from <a href="ch08_02.htm">Figure 8-22</a>, the paragraph has
simply been pulled upward by its negative top margin, such that
it's outside the parent <tt class="literal">DIV</tt> !
</p>

<a name="css-CHP-8-FIG-22" /><div class="figure"><img height="61" alt="Figure 8-22" src="figs/css.0822.gif" width="443" /></div><h4 class="objtitle">Figure 8-22. The effects of a negative top margin</h4>

<p>With a negative bottom margin, though, it looks as though everything
following the paragraph has been pulled upward. Compare the following
markup to the situation shown in <a href="ch08_02.htm">Figure 8-23</a>:
</p>

<blockquote><pre class="code">DIV {border: 1px solid black;}
P.neg {margin-bottom: -50px; width: auto; margin-right: 10px;
  margin-left: 10px; border: 3px solid gray;}

&lt;DIV STYLE="width: 420px; background-color: silver;
   padding: 10px; margin-top: 75px;"&gt;
&lt;P CLASS="neg"&gt;
A paragraph.
&lt;/P&gt;
&lt;/DIV&gt;
&lt;P&gt;
The next paragraph.
&lt;/P&gt;</pre></blockquote>

<a name="css-CHP-8-FIG-23" /><div class="figure"><img height="38" alt="Figure 8-23" src="figs/css.0823.gif" width="442" /></div><h4 class="objtitle">Figure 8-23. The effects of a negative bottom margin</h4>

<p>What's really happening in <a href="ch08_02.htm">Figure 8-23</a> is that
the elements following the <tt class="literal">DIV</tt> are placed
according to the location of the bottom of the
<tt class="literal">DIV</tt>. As we can see, the end of the
<tt class="literal">DIV</tt> is actually above the visual bottom of its
child paragraph. The next element after the <tt class="literal">DIV</tt> is
the appropriate distance from the bottom of the
<tt class="literal">DIV</tt>. The fact that it overlaps the paragraph
doesn't matter, at least not technically.
</p>

<p>Now let's consider an example where the margins of a list item,
an unordered list, and a heading are all collapsed. In this case, the
unordered list and heading will be set to have negative margins:
</p>

<blockquote><pre class="code">LI {margin-bottom: 20px;}
UL {margin-bottom: -15px;}
H1 {margin-top: -18px;}</pre></blockquote>

<p>The larger of the two negative margins (<tt class="literal">-18px</tt> ) is
added to the largest positive margin (<tt class="literal">20px</tt> ),
yielding (<tt class="literal">20px-18px</tt> = <tt class="literal">2px</tt> ).
Thus, there are only two pixels between the bottom of the list
item's content and the top of the paragraph's content.
This is what we see in <a href="ch08_02.htm">Figure 8-24</a>.
</p>

<a name="css-CHP-8-FIG-24" /><div class="figure"><img height="86" alt="Figure 8-24" src="figs/css.0824.gif" width="353" /></div><h4 class="objtitle">Figure 8-24. Collapsing margins and negative margins, in detail</h4>

<p>There is one area of unresolved behavior, which is this: if elements
overlap each other due to negative margins, which elements are
"on top?" You'll note that few of the examples in
this section use background colors for all elements. That's
because if they did, content might get overwritten by the background
color of a following element. The CSS specification does not say what
should happen when elements overlap in this manner; instead,
it's left up to implementors to decide.
</p>

<p>It has been argued that all foreground content is always shown
"in front of " all background content, and the behavior
of floated elements seems to support this interpretation. On the
other hand, the CSS2 property <tt class="literal">z-index</tt> makes this
reasoning more complicated. As of this writing, implementations have
not yet advanced sufficiently to test this out, and the CSS2
description of <tt class="literal">z-index</tt> doesn't really shed
any light on this subject.
</p>

<p>Ultimately, if you use negative margins, you may not get the same
results from all browsers. Since no one can clearly say which is
right, none of them can really be considered to be buggy -- at
least, not until the<a name="INDEX-943" /> specification is<a name="INDEX-944" />
sufficiently<a name="INDEX-945" /> clarified.<a name="INDEX-946" />
</p>

</div>
</div>
<a name="css-CHP-8-SECT-2.3" /><div class="sect2">
<h3 class="sect2">8.2.3. List Items</h3>

<p><a name="INDEX-947" />
<a name="INDEX-948" />Speaking of list items, they have a few
special rules in addition to everything discussed so far. List items
are typically preceded by a
<a name="INDEX-949" />
<a name="INDEX-950" />
<a name="INDEX-951" />marker, such as a small dot
or a number. This marker isn't actually part of the
list-item's content area, so you get effects like those
illustrated in <a href="ch08_02.htm">Figure 8-25</a>.
</p>

<a name="css-CHP-8-FIG-25" /><div class="figure"><img height="49" alt="Figure 8-25" src="figs/css.0825.gif" width="131" /></div><h4 class="objtitle">Figure 8-25. The content of list items</h4>

<p>In CSS1, very little is said about the placement and effects of this
marker with regard to the layout of a document.
<a name="INDEX-952" />CSS2 introduces properties specifically
designed to address this issue, such as
<tt class="literal">marker-offset</tt>. Since this property and its cousins
are not widely supported at the time of this writing, we will not
spend time on it here. There is a brief discussion of the marker
properties in <a href="ch10_01.htm">Chapter 10, "CSS2: A Look Ahead"</a>.
</p>

</div>
<a name="css-CHP-8-SECT-2.4" /><div class="sect2">
<h3 class="sect2">8.2.4. Block-Level Replaced Elements</h3>

<p><a name="INDEX-953" /> <a name="INDEX-954" />Block-level
replaced elements are also subject to a few differences in how
formatting is handled. The most important is that replaced elements
are assumed to have an intrinsic height and width; for example, an
image will be a certain number of pixels high and wide. Given this,
if either <tt class="literal">height</tt> or <tt class="literal">width</tt> are
set to <tt class="literal">auto</tt> for a replaced element, then the value
will always evaluate to the intrinsic height or width of the element.
Thus, if an image is 150 pixels wide, and its
<tt class="literal">width</tt> property is set to the value
<tt class="literal">auto</tt>, then its <tt class="literal">width</tt> will
evaluate to <tt class="literal">150px</tt> , as shown in <a href="ch08_02.htm">Figure 8-26</a>:
</p>

<blockquote><pre class="code">IMG {display: block; width: auto;}</pre></blockquote>

<a name="css-CHP-8-FIG-26" /><div class="figure"><img height="42" alt="Figure 8-26" src="figs/css.0826.gif" width="21" /></div><h4 class="objtitle">Figure 8-26. Replaced elements with auto width are rendered using their intrinsic size</h4>

<p>Replaced elements can have their <tt class="literal">height</tt> and
<tt class="literal">width</tt> set to a value other than
<tt class="literal">auto</tt> or their intrinsic dimensions. This is most
commonly used to "scale" images, either up or down. Thus,
if an image is 150 pixels wide and its <tt class="literal">width</tt> is
set to <tt class="literal">75px</tt> , then the image will be displayed
half as wide as it would ordinarily appear. In most browsers, the
height will be scaled to match, unless it has been explicitly set to
a certain value. <a href="ch08_02.htm">Figure 8-27</a> shows a few
possibilities.
</p>

<a name="css-CHP-8-FIG-27" /><div class="figure"><img height="481" alt="Figure 8-27" src="figs/css.0827.gif" width="118" /></div><h4 class="objtitle">Figure 8-27. Scaling images with the width property</h4>

<p>It's also possible to scale an image (or other replaced
element) using <tt class="literal">height</tt>:
</p>

<blockquote><pre class="code">&lt;IMG SRC="test.gif" STYLE="display: block;" ALT="test image"&gt;
&lt;IMG SRC="test.gif" STYLE="display: block; height: 50px;" ALT="test image"&gt;
&lt;IMG SRC="test.gif" STYLE="display: block; height: 200px;" ALT="test image"&gt;</pre></blockquote>

<p>This is exactly the same as using the <tt class="literal">HEIGHT</tt>
attribute on the <tt class="literal">IMG</tt> tag in HTML. If an image is
100 pixels tall, then by default its height will be
<tt class="literal">100px</tt> . If you specify another value, then the
image will be scaled appropriately, as illustrated in <a href="ch08_02.htm">Figure 8-28</a>.
</p>

<a name="css-CHP-8-FIG-28" /><div class="figure"><img height="275" alt="Figure 8-28" src="figs/css.0828.gif" width="102" /></div><h4 class="objtitle">Figure 8-28. Scaling images with the height property</h4>

<p>In almost all other ways, block-level replaced elements behave the
same as block-level elements when it comes to formatting: vertical
margins are collapsed while horizontal margins are not, and the
borders and padding default to zero unless explicitly declared
otherwise. Remember, however, that not all replaced elements are
images. Most form elements are replaced, for example.
</p>

<p>In general, all replaced elements (block-level or otherwise) can be
scaled using <tt class="literal">height</tt> and <tt class="literal">width</tt>.
In most other ways, inline replaced elements are handled very
differently, as we'll see later in<a name="INDEX-955" /> this<a name="INDEX-956" /> <a name="INDEX-957" /> chapter.<a name="INDEX-958" />
</p>

</div>


<hr width="684" align="left" />
<div class="navbar"><table width="684" border="0"><tr><td align="left" valign="top" width="228"><a href="ch08_01.htm"><img alt="Previous" border="0" src="../gifs/txtpreva.gif" /></a></td><td align="center" valign="top" width="228"><a href="index.htm"><img alt="Home" border="0" src="../gifs/txthome.gif" /></a></td><td align="right" valign="top" width="228"><a href="ch08_03.htm"><img alt="Next" border="0" src="../gifs/txtnexta.gif" /></a></td></tr><tr><td align="left" valign="top" width="228">8. Visual Formatting</td><td align="center" valign="top" width="228"><a href="index/index.htm"><img alt="Book Index" border="0" src="../gifs/index.gif" /></a></td><td align="right" valign="top" width="228">8.3. Floated Elements</td></tr></table></div>
<hr width="684" align="left" />

<img alt="Library Navigation Links" border="0" src="../gifs/navbar.gif" usemap="#library-map" />
<p><font size="-1"><a href="copyrght.htm">Copyright &copy; 2002</a> O'Reilly &amp; Associates. All rights reserved.</font></p>

<map name="library-map"><area href="../index.htm" coords="0,1,78,93" shape="rect" /><area href="../wdesign/index.htm" coords="80,2,155,96" shape="rect" /><area href="../xhtml/index.htm" coords="158,0,263,97" shape="rect" /><area href="../audio/index.htm" coords="265,1,335,97" shape="rect" /><area href="index.htm" coords="338,1,434,93" shape="rect" /><area href="../action/index.htm" coords="439,0,540,102" shape="rect" /><area href="../infoarch/index.htm" coords="544,0,685,102" shape="rect" /></map>

</body></html>
