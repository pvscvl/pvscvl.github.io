<html><head><title>CSS in Action (Cascading Style Sheets: The Definitive Guide)</title><link rel="stylesheet" type="text/css" href="style/style.css" />

<meta name="DC.Creator" content="Eric A. Meyer" /><meta name="DC.Format" content="text/xml" scheme="MIME" /><meta name="DC.Language" content="en-US" /><meta name="DC.Publisher" content="O'Reilly &amp; Associates, Inc." /><meta name="DC.Source" scheme="ISBN" content="1565926226L" /><meta name="DC.Subject.Keyword" content="stuff" /><meta name="DC.Title" content="Cascading Style Sheets: The Definitive Guide" /><meta name="DC.Type" content="Text.Monograph" />

</head><body bgcolor="#ffffff">

<img alt="Book Home" border="0" src="gifs/smbanner.gif" usemap="#banner-map" /><map name="banner-map"><area shape="rect" coords="1,-2,616,66" href="index.htm" alt="Cascading Style Sheets: The Definitive Guide" /><area shape="rect" coords="629,-11,726,25" href="jobjects/fsearch.htm" alt="Search this book" /></map>

<div class="navbar"><table width="684" border="0"><tr><td align="left" valign="top" width="228"><a href="ch10_09.htm"><img alt="Previous" border="0" src="../gifs/txtpreva.gif" /></a></td><td align="center" valign="top" width="228"><a href="index.htm">Cascading Style Sheets: The Definitive Guide</a></td><td align="right" valign="top" width="228"><a href="ch11_02.htm"><img alt="Next" border="0" src="../gifs/txtnexta.gif" /></a></td></tr></table></div>
<hr width="684" align="left" />



<h1 class="chapter">Chapter 11. CSS in Action</h1>
<div class="htmltoc"><h4 class="tochead">Contents:</h4><p>
<a href="ch11_01.htm">Conversion Projects</a><br />
<a href="ch11_02.htm">Tips &amp; Tricks</a><br /></p></div>

<p><a name="INDEX-1241" />
<a name="INDEX-1242" />No instructional work would be complete
without a chapter that explores ways to put all that theoretical
knowledge into practice, and that's just what we'll be
doing here. After we look at three different page (re)design projects
using CSS, we'll go through a grab bag of tricks and tips that
might help you get around some of your biggest CSS frustrations.
</p>

<div class="sect1"><a name="css-CHP-11-SECT-1" />
<h2 class="sect1">11.1. Conversion Projects</h2>

<p><a name="INDEX-1243" />Since we've covered
the entirety of CSS1, let's exercise that newfound knowledge
with three conversion projects. In each of these cases -- two of
them web pages and one a print magazine article -- we'll
break down the page into its components and determine the best way to
recreate the same effects using CSS1 and structural HTML.
</p>

<a name="css-CHP-11-SECT-1.1" /><div class="sect2">
<h3 class="sect2">11.1.1. Case 1: Consistent Look and Feel</h3>

<p><a name="INDEX-1244" />
<a name="INDEX-1245" /> <a name="INDEX-1246" />In this project, we will create an
external style sheet that will define a basic, consistent look and
feel for an entire corporate web site. Our main goal is to create
styles that are as simple as possible, using few (if any) classes or
IDs. For the purposes of the project, we will assume there is a
standard writing guide for employees of the company: document titles
are in <tt class="literal">H1</tt>, subheadings in <tt class="literal">H2</tt>,
every page uses standard graphics at the top, and so forth.
</p>

<p>Marketing has decreed that all pages shall use a white background
with a thin dark green stripe running down the left edge, black body
text in a serif font, and hyperlinks that are a dark green when
unvisited and dark gray when visited. Furthermore, document titles
must be underlined and use a color similar to the standard navigation
buttons found at the top of every page, which are gray text against a
dark green background -- the same dark green you are to use for
unvisited hyperlinks and the left edge of the browser window. All
headings, including document titles, are to use a sans serif font.
The rest is left to our discretion.
</p>

<p>A lot of this is fairly straightforward. For the document
<tt class="literal">BODY</tt>, we write:
</p>

<blockquote><pre class="code">BODY {font-family: Times,serif; color: black; 
  background: white url(pix/grstripe.gif) repeat-y top left;}</pre></blockquote>

<p>For the anchors, among other things, we need to know the color value
of the green being used. The art department reports that this
particular shade of green uses no red or blue, and just 40% green;
someone there has had the foresight to use web-safe colors.
(Remember, this is a hypothetical situation.) We want to do the same
for the visited links, so we write:
</p>

<blockquote><pre class="code">A:link {color: rgb(0%,40%,0%);}
A:visited {color: rgb(20%,20%,20%);}</pre></blockquote>

<p>This gives us our dark green and dark gray hyperlinks.</p>

<p>Now for headings. They're all supposed to be in a sans serif
font, but <tt class="literal">H1</tt>s have some special rules. In order to
cover all the bases in a compact manner, we declare:
</p>

<blockquote><pre class="code">H1, H2, H3, H4, H5, H6 {font-family: Verdana,sans-serif;}
H1 {color: rgb(0%,40%,0%); border-bottom: thin solid; width: 100%;}</pre></blockquote>

<p>With the second declaration, not only do we use the standard color,
but we enhance the idea of "underlining" by setting a
bottom border that will extend from the left edge of the text all the
way out to the right edge of the browser window. This line will also
inherit the green color of the text and so really punch up the fact
that the title and navigation buttons are separate from the rest of
the page.
</p>

<p>Now that this is all done, we need to link the style sheet into the
site's pages. The above declarations are collected into a
single file, which is saved to a file with the URL <a href="../../../../../../www.mycomp.com/style/site.css">http://www.mycomp.com/style/site.css</a>. Then
all of the site's pages are modified so that their
<tt class="literal">HEAD</tt> element contains the following:
</p>

<blockquote><pre class="code">&lt;LINK REL="stylesheet" TYPE="text/css"
  HREF="http://www.mycomp.com/style/site.css"&gt;</pre></blockquote>

<p>This ensures that all documents -- even those without their own
style declarations -- will use the site's overall style
sheet. <a href="ch11_01.htm">Figure 11-1</a> shows one example of how the
pages will appear.
</p>

<a name="css-CHP-11-FIG-1" /><div class="figure"><img height="320" alt="Figure 11-1" src="figs/css.1101.gif" width="427" /></div><h4 class="objtitle">Figure 11-1. Final results</h4>

</div>
<a name="css-CHP-11-SECT-1.2" /><div class="sect2">
<h3 class="sect2">11.1.2. Case 2: Library Catalog System Interface</h3>

<p><a name="INDEX-1247" />The library of Wattswith University
has been using a web-based library catalog system for the last few
years, and their web developers have always tried to keep up with the
times. Now that style sheets are gaining currency, the folks in the
lab are itching to convert the library system's interface over
to use them.
</p>

<p>However, the current design has been so popular that a mandate has
been handed down from the management: Thou Shalt Not Disrupt The Look
And Feel. Annoyed but undaunted, our intrepid websmiths forge ahead.
Their mission is to take what's there, then rip it apart and
put it all back together again without anyone noticing the
difference. (For the purposes of this project, the part of the
webmasters will be played by you, the reader.)
</p>

<p>The most complicated screen in the system is the record display
screen. Composed of three areas -- the system navigation bar, a
<a name="INDEX-1248" />sidebar
with current options, and the record display itself -- it's
structured around a table, with each area being enclosed in a table
cell. In addition, there is a fourth table cell between the sidebar
and the main part of the page, in order to create some blank space.
There are also a lot of <tt class="literal">FONT</tt> tags and a few tables
imbedded within the main table that determines the page's
layout. The skeleton of the page is expressed as a table, with a
border and cell padding added to make the structure more clear:
</p>

<blockquote><pre class="code">&lt;TABLE CELLSPACING=0 BORDER CELLPADDING="10"&gt;
&lt;TR&gt;
&lt;TD ROWSPAN=2&gt;sidebar&lt;/TD&gt;
&lt;TD COLSPAN=2&gt;navigation bar&lt;/TD&gt;
&lt;/TR&gt;
&lt;TR&gt; 
&lt;TD&gt;&amp;nbsp;&lt;/TD&gt;
&lt;TD&gt;main display&lt;/TD&gt;
&lt;/TR&gt;
&lt;/TABLE&gt;</pre></blockquote>

<p>This has the appearance shown in <a href="ch11_01.htm">Figure 11-2</a>.
Obviously, there is a lot more in the cells than what's listed
above. The actual content was replaced by labels for the sake of
brevity and clarity.
</p>

<a name="css-CHP-11-FIG-2" /><div class="figure"><img height="70" alt="Figure 11-2" src="figs/css.1102.gif" width="164" /></div><h4 class="objtitle">Figure 11-2. A simplified page structure </h4>

<p>In order to keep the changes fairly simple, and to avoid stealing a
trick I plan to use later in this chapter, for this project
we're still going to use a table for the page's overall
layout, but we're going to modify it slightly. Instead of four
cells, it will only have two: the sidebar and the rest of the screen.
The navigation bar will become part of the main display, and the
blank "spacing" table cell will be eliminated entirely.
This will leave us with the following:
</p>

<blockquote><pre class="code">&lt;TABLE CELLSPACING=0&gt;
&lt;TR&gt;
&lt;TD&gt;sidebar&lt;/TD&gt;
&lt;TD&gt;navigation bar and main display&lt;/TD&gt;
&lt;/TR&gt;
&lt;/TABLE&gt;</pre></blockquote>

<p>We'll turn to the sidebar first. Each set of links is grouped
into a list under a main heading; these headings look different from
the links. Each of the sections uses the following tags:
</p>

<blockquote><pre class="code">&lt;P&gt;
&lt;FONT FACE="Verdana" COLOR="white" size="+1"&gt;&lt;B&gt;&lt;U&gt;Heading&lt;/U&gt;&lt;/B&gt;&lt;/FONT&gt;
&lt;BR&gt;
&lt;FONT FACE="Verdana" SIZE="-1"&gt;
&lt;A HREF="link1.html"&gt;&lt;FONT COLOR="yellow"&gt;Link&lt;/FONT&gt;&lt;/A&gt;&lt;BR&gt;
&lt;A HREF="link2.html"&gt;&lt;FONT COLOR="yellow"&gt;Link&lt;/FONT&gt;&lt;/A&gt;&lt;BR&gt;
&lt;A HREF="link3.html"&gt;&lt;FONT COLOR="yellow"&gt;Link&lt;/FONT&gt;&lt;/A&gt;&lt;BR&gt;
&lt;/FONT&gt;
&lt;/P&gt;</pre></blockquote>

<p>Whew! Already we have our work cut out for us.</p>

<p>Probably the easiest thing to do is to assign a class to the
sidebar's table cell, so that we can specify certain
appearances that are specific to the sidebar. This leads us to enter
the tags <tt class="literal">&lt;TD</tt>
<tt class="literal">CLASS="sidebar"&gt;</tt> and
<tt class="literal">&lt;/TD&gt;</tt> for the beginning and end of the cell,
respectively.
</p>

<p>Now we have the sidebar enclosed in its very own classed table cell.
Since the background color for the sidebar is green, we can create
our first style:
</p>

<blockquote><pre class="code">.sidebar {background: green;}</pre></blockquote>

<p>Moving on with the sidebar, we want to get rid of all the
<tt class="literal">FONT</tt> tags, and hopefully the other style tags as
well (like <tt class="literal">&lt;B&gt;</tt> and
<tt class="literal">&lt;U&gt;</tt>). Since the entirety of the sidebar uses
the font Verdana, we can add that to our style sheet:
</p>

<blockquote><pre class="code">.sidebar {background: green; font-family: Verdana,sans-serif;}</pre></blockquote>

<p>We use <tt class="literal">font-family</tt> here because we don't
want to specify a <tt class="literal">font-size</tt> for the sidebar, so we
can't use the shorthand <tt class="literal">font</tt>.
</p>

<p>Now we <em class="emphasis">could</em> put headings and lists of links in
separate paragraphs and then mess around with the padding, margin,
and line heights of these paragraphs until they match the current
look. However, it's probably easier to simply leave the
paragraph and line break tags right where they are and simply
<tt class="literal">SPAN</tt> the headings:
</p>

<blockquote><pre class="code">&lt;SPAN CLASS="head"&gt;Heading&lt;/SPAN&gt;&lt;BR&gt;</pre></blockquote>

<a name="ch11-3-fm2xml" /><blockquote><h4>WARNING</h4>
<p>The danger in using <tt class="literal">SPAN</tt> instead of logical
elements like headings is that pre-CSS browsers won't recognize
the <tt class="literal">SPAN</tt> element. Also, indexing robots
won't be able to make any sense of <tt class="literal">SPAN</tt> as a
piece of document structure. On the other hand, using
<tt class="literal">SPAN</tt> avoids having to cope with a number of bugs
in early CSS implementations, so I've chosen to use
<tt class="literal">SPAN</tt> in this case study instead of something a
little more structured.
</p>
</blockquote>

<p>Having done this, we need a style declaration that will recreate the
effects of all the tags we just deleted. This should just about do
the trick:
</p>

<blockquote><pre class="code">.sidebar .head {font-size: larger; font-weight: bold; 
  text-decoration: underline; color: white;}</pre></blockquote>

<p>By using the contextual selector <tt class="literal">.sidebar</tt>
<tt class="literal">.head</tt>, we ensure only those
<tt class="literal">.head</tt>s inside a <tt class="literal">.sidebar</tt> will
receive these styles. Since the entire sidebar is already set to use
Verdana, the headings will inherit and use it. As for the links, they
need to be yellow, so we declare:
</p>

<blockquote><pre class="code">.sidebar A:link {color: yellow;}
.sidebar A:visited {color: yellow;}
.sidebar A:active {color: yellow;}</pre></blockquote>

<p>This will keep the links yellow no matter what, just as they are now.
<a href="ch11_01.htm">Figure 11-3</a> shows us the new, improved,
<tt class="literal">FONT</tt>-tag-free sidebar which results from the
preceding styles, and this markup:
<a name="INDEX-1249" />
</p>

<blockquote><pre class="code">&lt;TD CLASS="sidebar"&gt;&lt;P&gt;
&lt;SPAN CLASS="head"&gt;Heading&lt;/SPAN&gt;
&lt;BR&gt;
&lt;A HREF="link1.html"&gt;Link&lt;/A&gt;&lt;BR&gt;
&lt;A HREF="link2.html"&gt;Link&lt;/A&gt;&lt;BR&gt;
&lt;A HREF="link3.html"&gt;Link&lt;/A&gt;&lt;BR&gt;
&lt;/P&gt;
&lt;/TD&gt;</pre></blockquote>

<a name="css-CHP-11-FIG-3" /><div class="figure"><img height="92" alt="Figure 11-3" src="figs/css.1103.gif" width="89" /></div><h4 class="objtitle">Figure 11-3. The well-styled sidebar</h4>

<p>That was pretty easy, eh? Now let's tackle the navigation bar
at the top of the main part of the page. This area also has a green
background, and within it are a few images. Again, we use a
<tt class="literal">DIV</tt> tag with a specific class, like this:
</p>

<blockquote><pre class="code">&lt;DIV CLASS="navbar"&gt;
icons
&lt;/DIV&gt;</pre></blockquote>

<p>Now all we need is the style <tt class="literal">.navbar</tt>
<tt class="literal">{background:</tt> <tt class="literal">green;}</tt> and
we're set. Or are we?
</p>

<p>Not quite, no. In the old page, the <a name="INDEX-1250" />navigation bar was separated slightly from
the main display, but ran right up against the sidebar, thereby
creating a sort of inverted green "L" shape. We want to
make sure that this is still the case in the new setup. This is most
easily accomplished by making sure that the division has no padding
or border set, and that it is guaranteed to be as wide as the table
cell in which it's found. Plus, we want the bar to have a
little bit of blank space after it, so we need a margin of zero on
everything but the bottom, where we just want a few pixels. So we add
the following:
</p>

<blockquote><pre class="code">.navbar {background: green; padding: 0; margin: 0 0 10px 0; width: 100%;}</pre></blockquote>

<p>Now everything should be set for the navigation bar, as we can see in
<a href="ch11_01.htm">Figure 11-4</a>. All we need to do now is make sure the
main display has some blank space to its left, and we're done.
</p>

<a name="css-CHP-11-FIG-4" /><div class="figure"><img height="27" alt="Figure 11-4" src="figs/css.1104.gif" width="450" /></div><h4 class="objtitle">Figure 11-4. The greening of the navigational bar </h4>

<p>No doubt you already know how this will work. We create another
division, this one classed as <tt class="literal">main</tt> and enclosing
everything in the main part of the page that isn't the
navigation bar. Then we declare:
</p>

<blockquote><pre class="code">.main {margin-left: 1.5em;}</pre></blockquote>

<p>It seems like a reasonable amount of space, so we go with it. We
check the result in <a href="ch11_01.htm">Figure 11-5</a>, which is based
around this skeleton markup:
</p>

<blockquote><pre class="code">&lt;TABLE CELLPADDING="0" CELLSPACING="0" BORDER&gt;
&lt;TR VALIGN="top"&gt;
&lt;TD CLASS="sidebar"&gt;
(sidebar)
&lt;/TD&gt;
&lt;TD&gt;
&lt;DIV CLASS="navbar"&gt;
(icons)
&lt;/DIV&gt;
&lt;DIV CLASS="main"&gt;
(content)
&lt;/DIV&gt;
&lt;/TR&gt;
&lt;/TABLE&gt;</pre></blockquote>

<a name="css-CHP-11-FIG-5" /><div class="figure"><img height="248" alt="Figure 11-5" src="figs/css.1105.gif" width="450" /></div><h4 class="objtitle">Figure 11-5. Final results </h4>

<p>There are a few subtle differences from the original layout, but
overall, no significant changes in the document's presentation.
We can be quite pleased with the results -- and better still,
management will never notice the difference.
</p>

<p>The advantages of the new design are twofold: the ability to change
colors and fonts by editing a small number of styles instead of a
bunch of <tt class="literal">FONT</tt> tags and a reduction in
<a name="INDEX-1251" />size of the
HTML source itself. In a case like this, a page's size can
shrink by several kilobytes -- and in cases where a heavily
<tt class="literal">FONT</tt>ed page is converted to use CSS instead, the
document's file size can decrease by as much as 50% !<a name="INDEX-1252" />
</p>

</div>
<a name="css-CHP-11-SECT-1.3" /><div class="sect2">
<h3 class="sect2">11.1.3. Case 3: Putting a Magazine Article Online</h3>

<p><a name="INDEX-1253" />Finally, we turn to the situation faced
by the editorial offices of <em class="emphasis">Meerkat Monthly</em>.
This specialist magazine examines the issues of raising a suricate in
a domestic environment, away from others of its kind, and also
provides general information about the animals themselves. In an
effort to boost sales, the editors want to put a few articles online
each month.
</p>

<a name="ch11-5-fm2xml" /><blockquote><h4>TIP</h4>
<p>This case study ends up using quite a few advanced styles and, as
such, may be beyond the capabilities of most older user agents.
It's still very instructive, even on a theoretical level, and
it should work in a browser that fully and correctly supports CSS1.
Just be prepared for one or more errors if you try this in a web
browser. You may wish to follow along one step at a time, reloading
your page at each step, in order to know when things go
wrong -- assuming they do.
</p>
</blockquote>

<p>For their trial run, they decide to use a one-page article that talks
about suricates in general terms, examining their life in the wild
and their general appeal to humans. The article appears in the
magazine as shown in <a href="ch11_01.htm">Figure 11-6</a>.
</p>

<a name="css-CHP-11-FIG-6" /><div class="figure"><img height="400" alt="Figure 11-6" src="figs/css.1106.gif" width="288" /></div><h4 class="objtitle">Figure 11-6. The original print document </h4>

<p>Obviously, the folks at <em class="emphasis">Meerkat Monthly</em> have
been having some fun with their desktop publishing program. It
won't be easy to get everything just the way it is on the page,
but we'll see what we can do.
</p>

<p>First, let's take apart the page's layout and determine
what to eliminate. Since there are no pages on the Web, we can drop
the page number. Also, the outer margins can be modified to suit our
needs, since we don't have to worry about leaving extra space
for the staples and so forth. However, the editors want to keep the
two-column layout, the picture placement, and the general appearance
of the text, so we'll have to bear that in mind.
</p>

<p>First, let's create the two <a name="INDEX-1254" />
<a name="INDEX-1255" />columns. Remember, we don't want
to use tables or proprietary tags such as
<tt class="literal">MULTICOL</tt>, so we'll have to resort to
something else. In this case, since each column has a number of
paragraphs, we can use a <tt class="literal">DIV</tt> tag -- or, to be
more precise, two of them. All we need to do is split the article
text roughly in half, and wrap a <tt class="literal">DIV</tt> around each
half. (By article text, we mean the actual text of the article,
excluding the title.) Let's use the place where the column ends
on the printed page as our guide to end the first division and start
the second:
</p>

<blockquote><pre class="code">blah blah blah.
&lt;/P&gt;
&lt;/DIV&gt;
&lt;DIV&gt;
&lt;P&gt;
Blah blah blah</pre></blockquote>

<p>Once that's been done, we modify the first
<tt class="literal">DIV</tt> with the following style:
</p>

<blockquote><pre class="code">&lt;DIV STYLE="float: left; width: 40%; margin-left: 10%; margin-right: 5%;"&gt;</pre></blockquote>

<p>This causes the entire set of text in the first division to become a
floating block on the left margin and the following text to flow past
it on the right. In other words, a two-column layout! This first
column is declared to be 40% as wide as the browser window, have a
left margin 10% as wide as the browser window, and a right margin
that is 5% of the window's width. This will cause the second
column to automatically calculate its overall width as 45% (40 + 10 +
5 = 55, and 100 - 55 is 45).
</p>

<p>Thus, the two columns will be of not-quite-equal width, as we can see
in <a href="ch11_01.htm">Figure 11-7</a>, but that's the effect we want.
</p>

<a name="css-CHP-11-FIG-7" /><div class="figure"><img height="381" alt="Figure 11-7" src="figs/css.1107.gif" width="400" /></div><h4 class="objtitle">Figure 11-7. Two columns of text </h4>

<p>We may eventually have to adjust the point at which the divisions are
placed, but for the moment, let's leave things as they are.
</p>

<p>Actually, there is one more thing we should add. Here's the
markup:
</p>

<blockquote><pre class="code">&lt;DIV STYLE="float: right; width: 45%;"&gt;</pre></blockquote>

<p>This is the <tt class="literal">DIV</tt> for the second column. Why have we
<a name="INDEX-1256" />floated it as well? Assume for a moment
that the second column is longer than the first. Without the
<tt class="literal">float</tt> for the second column, we'd see a
situation like that depicted in <a href="ch11_01.htm">Figure 11-8</a>.
</p>

<a name="css-CHP-11-FIG-8" /><div class="figure"><img height="357" alt="Figure 11-8" src="figs/css.1108.gif" width="450" /></div><h4 class="objtitle">Figure 11-8. Why we float twice </h4>

<p>This is entirely consistent with the rules for floating, but it
obviously isn't what we want. By floating the second column, we
avoid this possibility altogether, and the columns stay
straight.<a name="INDEX-1257" /> <a name="INDEX-1258" />
</p>

<p>Now let's place the
<a name="INDEX-1259" />pictures.
There are two of them, both in the first column, so that makes things
a lot easier. Obviously, they're left-floating images. The
interesting part will be recreating the way they hang out into the
blank space to the left of the column.
</p>

<p>If we just give these pictures the style <tt class="literal">float:</tt>
<tt class="literal">left</tt>, they'll be completely contained within
the column. However, since the first column has a left margin, all we
have to do is give images a <a name="INDEX-1260" />negative <tt class="literal">margin-left</tt>,
like this:
</p>

<blockquote><pre class="code">IMG {float: left; margin-left: -2.5em;}</pre></blockquote>

<p>There is a potential danger here. Our floated images have a left
margin of 2.5em, but if you'll recall, the column itself has a
left margin of 10%. In a sufficiently narrow browser window, the left
margin of the column could end up being much less than 2.5em. If that
happens, then the images could get pushed far enough to the left that
they go partway "offscreen." Mixing
<a name="INDEX-1261" />
<a name="INDEX-1262" />units like this, even
indirectly, can be risky. A better choice might be this:
</p>

<blockquote><pre class="code">IMG{float: left; margin-left: -10%;}</pre></blockquote>

<p>This will allow the images' left margins to scale along with
the environment.
</p>

<p>Since we only have two images, and both of them require the same
effect, this declaration will work just fine. <a href="ch11_01.htm">Figure 11-9</a> reveals the result.
</p>

<a name="css-CHP-11-FIG-9" /><div class="figure"><img height="489" alt="Figure 11-9" src="figs/css.1109.gif" width="481" /></div><h4 class="objtitle">Figure 11-9. Floating images </h4>

<p>As you can see, the first column is now quite a bit longer than the
second. However, since we haven't done much of anything to the
second column, let's leave things as they are for the moment.
</p>

<p>An offset block of text showing a quotation in a larger size is
usually called a "<a name="INDEX-1263" />pull quote." We have one near the
middle of the second column, so let's decide how that will be
handled. First, the text is a bit larger than the font size of the
main article text, and it's in a sans serif font. Also, it has
those nice lines at the top and bottom of the pull quote's box,
both of which stretch slightly beyond the right and left boundaries
of the text itself. The background is a light gray, and there is a
bit of space around the box to separate it from the main body text.
The pull quote's text is also centered, the box is about half
the width of the column, and it's obviously floating to the
right.
</p>

<p>Here's what we come up with:</p>

<blockquote><pre class="code">.pullq {font: 150% Helvetica,Arial,sans-serif; text-align: center; 
  border-top: medium black solid; border-bottom: thin black solid; 
  margin: 1em; padding: 0.5em; background: #CCCCCC;
  width: 50%; float: right;}

&lt;P CLASS="pullq"&gt;
"The meerkat is a fun, smart, but often exasperating fellow."
&lt;/P&gt;</pre></blockquote>

<p>Since we've implemented this quote as a paragraph, if we simply
float it in place, the top of the pull quote's box will line up
with the beginning of the paragraph that comes after the quote in the
HTML document. We decide that's okay and end up with
what's shown in <a href="ch11_01.htm">Figure 11-10</a>.
</p>

<a name="css-CHP-11-FIG-10" /><div class="figure"><img height="491" alt="Figure 11-10" src="figs/css.1110.gif" width="481" /></div><h4 class="objtitle">Figure 11-10. A pull quote </h4>

<p>Now the document is a bit more even. Adjusting the placement of the
<tt class="literal">DIV</tt>s will make it as even as possible, but since
we still aren't quite finished, let's put that off yet
again.
</p>

<p>At the end of the article is a block of text that says a few words
about the author of the piece. This is in a smaller text size,
italicized, and separated from the rest of the article by a small
space and a thin line. We could put a horizontal rule in for the
line, but let's stick to CSS1 whenever possible. The following
should do quite nicely, as illustrated in <a href="ch11_01.htm">Figure 11-11</a>:
</p>

<blockquote><pre class="code">.author {font: italic x-small Times,serif; border-top: thin black solid; 
  padding-top: 0.25em; margin-top: 0.5em;}</pre></blockquote>

<a name="css-CHP-11-FIG-11" /><div class="figure"><img height="485" alt="Figure 11-11" src="figs/css.1111.gif" width="481" /></div><h4 class="objtitle">Figure 11-11. Styling the authorial note </h4>

<p>Before we create the title, let's clean up a few last details
in the article's body. The overall article has fully
<a name="INDEX-1264" />
<a name="INDEX-1265" />justified
text in a serif font. We decide that it should be easily readable, so
we go with Times. We also want the article to have black text on a
white background, thereby mimicking the appearance of printed text.
Each paragraph has its first line <a name="INDEX-1266" />
<a name="INDEX-1267" />indented
about half an inch, but we'll reduce that to a quarter-inch for
the web version. We can handle this with the following:
</p>

<blockquote><pre class="code">BODY {color: black; background: white;}
P {font-family: Times,serif; text-align: justify; text-indent: 0.25in;}</pre></blockquote>

<p><a href="ch11_01.htm">Figure 11-12</a> shows the appearance of a paragraph.</p>

<a name="css-CHP-11-FIG-12" /><div class="figure"><img height="125" alt="Figure 11-12" src="figs/css.1112.gif" width="278" /></div><h4 class="objtitle">Figure 11-12. Paragraph indenting </h4>

<p>The last rule will give us about the correct amount of indenting for
each paragraph, no matter the resolution to which the user's
monitor has been set. However, the very first letter of the first
paragraph of the article is a "<a name="INDEX-1268" />drop cap," which means that it's
larger and extends down from the first line, with subsequent lines
flowing past it. This first paragraph has no indentation of the first
line, so we'll have to counteract it somehow. This leads us to
the following:
</p>

<blockquote><pre class="code">.initial {text-indent: 0;}
P.initial:first-letter {font-size: 200%; float: left;}</pre></blockquote>

<p>These rules will, obviously, require us to add the attribute
<tt class="literal">class="initial"</tt> to the first paragraph tag. The
declaration of <tt class="literal">text-indent:</tt> <tt class="literal">0;</tt>
<a name="INDEX-1269" />overrides previously declared values, as
long as this block of declarations comes later in the style sheet.
They're also more specific than the other styles we're
using, due to the presence of a class selector, so that also helps
these rules win out. The values for <tt class="literal">:first-letter</tt>
will cause the first letter of the initial paragraph to be twice
normal size, and floated left, as shown in <a href="ch11_01.htm">Figure 11-13</a>.
</p>

<a name="ch11-6-fm2xml" /><blockquote><h4>TIP</h4>
<p>Under CSS2, the same effect can be achieved without the use of a
class on the first paragraph. This is done by using new CSS2
selectors, such as the <a name="INDEX-1270" />adjacent-sibling selector:
</p>

<blockquote><pre class="code"> H1 + P {text-indent: 0;}</pre></blockquote>

<p>In a CSS2-aware user agent, this will set a
<tt class="literal">text-indent</tt> of <tt class="literal">0</tt> for any
paragraph which immediately follows any <tt class="literal">H1</tt>
element. However, since the paragraph here is the child of a
<tt class="literal">DIV</tt>, it doesn't immediately follow the
<tt class="literal">H1</tt>. Therefore, we would need to add a child
selector and a first-child pseudo-class:
</p>

<blockquote><pre class="code">H1 + DIV &gt; P:first-child {text-indent: 0;}</pre></blockquote>

<p>This will match any paragraph that is the first child of a
<tt class="literal">DIV</tt> that immediately follows an
<tt class="literal">H1</tt> element. See <a href="ch10_01.htm">Chapter 10, "CSS2: A Look Ahead"</a>,
<em class="emphasis">CSS2: A Look Ahead</em>, for more details.
</p>
</blockquote>

<a name="css-CHP-11-FIG-13" /><div class="figure"><img height="86" alt="Figure 11-13" src="figs/css.1113.gif" width="253" /></div><h4 class="objtitle">Figure 11-13. First-letter styling </h4>

<p>Having set the article's body to the appearance we want, all
that remains is to adjust the placement of the divisions so that the
columns are of roughly equal length. We can do this now because
regardless of what we do to the title, the columns will be the same
length. So we move the divisions appropriately. Note that we may not
get an exact balance because of the need to break the divisions
between paragraphs. Whether the longer column should be the first or
the second is up to you.
</p>

<p>With all that done, all that remains is for us to recreate the
document's <a name="INDEX-1271" />title. Looking at it closely in <a href="ch11_01.htm">Figure 11-14</a>, we see that this is an interesting specimen:
it's right-justified and yet not aligned with the right margin
of the document; the letters are spaced rather far apart; the text is
small caps, and yet the first letter is much bigger than the others;
finally, the entire thing is set in a large sans serif font.
</p>

<a name="css-CHP-11-FIG-14" /><div class="figure"><img height="75" alt="Figure 11-14" src="figs/css.1114.gif" width="386" /></div><h4 class="objtitle">Figure 11-14. The original document's title </h4>

<p>Rather than dream up a new class for the title, let's just put
it into an <tt class="literal">H1</tt> and set styles on that element. At a
rough visual guess, the text is about three times larger than the
body text, and the space between each letter is about the size of one
of the letters. Starting with the easy stuff, here's what we
have for the title <tt class="literal">H1</tt>:
</p>

<blockquote><pre class="code">H1 {font: 300% Helvetica,sans-serif; font-variant: small-caps; 
  letter-spacing: 0.75em;}</pre></blockquote>

<p>As was already observed, the title is right-justified but isn't
up against the right margin. The easiest thing to do is insert some
padding to the <tt class="literal">H1</tt>'s right side, which leads
us to the following declarations:
</p>

<blockquote><pre class="code">H1 {font: 300% Helvetica,sans-serif; font-variant: small-caps; 
  letter-spacing: 0.75em; text-align: right; padding-right: 1em;}</pre></blockquote>

<p><a href="ch11_01.htm">Figure 11-15</a> shows us our progress so far.</p>

<a name="css-CHP-11-FIG-15" /><div class="figure"><img height="107" alt="Figure 11-15" src="figs/css.1115.gif" width="481" /></div><h4 class="objtitle">Figure 11-15. The styled title: a work in progress </h4>

<p>We're getting close; in fact, the only thing left is that first
letter of the title. We can easily handle it with a
<tt class="literal">:first-letter</tt> selector, so let's do that.
The "S" is about twice the size of the "K" in
"Kats," so we set the following:
</p>

<blockquote><pre class="code">H1 {font: 300% Helvetica,sans-serif; font-variant: small-caps; 
  letter-spacing: 0.75em; text-align: right; padding-right: 1em;
  line-height: 1em;}
H1:first-letter {font-size: 200%; line-height: 1px; vertical-align: -100%;}</pre></blockquote>

<p>Consulting <a href="ch11_01.htm">Figure 11-16</a>, we see that it looks about
right!
<a name="INDEX-1272" />
</p>

<a name="css-CHP-11-FIG-16" /><div class="figure"><img height="109" alt="Figure 11-16" src="figs/css.1116.gif" width="481" /></div><h4 class="objtitle">Figure 11-16. The final styled title</h4>

<p>The <tt class="literal">line-height</tt> and
<tt class="literal">vertical-align</tt> values deserve a small discussion.
What's been done is that the <a name="INDEX-1273" />inline box of the "S" has been
reduced so that it's only one pixel tall. (We could have used
almost any length value here, so long as it was a very small amount.)
This inline box, as we saw in <a href="ch08_01.htm">Chapter 8, "Visual Formatting"</a>, is
centered vertically inside the "S" itself. Then the
baseline of the "S" is lowered so that it's as far
down as the baseline of the next line of text (since a
<tt class="literal">-100%</tt> vertical alignment will lower the baseline
the same distance as the <tt class="literal">font-size</tt> of the parent
element). Ordinarily, this would make the first line box
correspondingly taller, but since we're declared
<tt class="literal">line-height:</tt> <tt class="literal">1px</tt> for the
"S", the actual inline box is so small that it has almost
no effect on the height of the line box. While the title shown in
<a href="ch11_01.htm">Figure 11-16</a> may not precisely match the title in
<a href="ch11_01.htm">Figure 11-14</a>, they're very close to each other.
</p>

<p>So, put together, here's the entire style sheet:</p>

<blockquote><pre class="code">BODY {color: black; background: white;}
P {font-family: Times,serif; text-align: justify; text-indent: 6em;}
IMG{float: left; margin: 0.5em 0.5em 0.5em -10%;}
.pullq {font: 200% Helvetica,Arial,sans-serif; text-align: center; 
  border-top: medium black solid; border-bottom: thin black solid; 
  margin: 1em; padding: 0.5em; background: #CCCCCC; 
  width: 50%; float: right;}
.author {font: italic x-small Times,serif; border-top: thin black solid;
  padding-top: 0.25em; margin-top: 0.5em;}
.initial {text-indent: 0;}
P.initial:first-letter {font-size: 200%; float: left;}
H1 {font: 300% Helvetica,sans-serif; font-variant: small-caps; 
  letter-spacing: 0.75em; text-align: right; padding-right: 1em;
  line-height: 1em;}
H1:first-letter {font-size: 200%; line-height: 1px;vertical-align: -100%;}</pre></blockquote>

<p><a href="ch11_01.htm">Figure 11-17</a> shows a side-by-side comparison of the
original article and its online cousin.
</p>

<a name="css-CHP-11-FIG-17" /><div class="figure"><img height="278" alt="Figure 11-17" src="figs/css.1117.gif" width="481" /></div><h4 class="objtitle">Figure 11-17. A comparison </h4>

<p>Furthermore, if we view the web page using a browser without style
sheets, it will come out looking like <a href="ch11_01.htm">Figure 11-18</a>.
It may not be as pretty, but it's still quite readable.
</p>

<a name="css-CHP-11-FIG-18" /><div class="figure"><img height="406" alt="Figure 11-18" src="figs/css.1118.gif" width="453" /></div><h4 class="objtitle">Figure 11-18. The styled page without any styles </h4>

<a name="css-CHP-11-SECT-1.3.1" /><div class="sect3">
<h3 class="sect3">11.1.3.1. Cleaning up</h3>

<p>There are a few places where the CSS version isn't quite the
same as the printed version, as a detailed study of <a href="ch11_01.htm">Figure 11-17</a> reveals, and of course the creation of the
columns is a bit of a hack. How can these be addressed?
</p>

<p>The title of the article is the most obvious visual difference
between the two layouts. The printed version of the article has a
title which is stretched out, so to speak. This could be easily
recreated using the CSS2 property <tt class="literal">font-stretch</tt>,
but sadly, this property was not supported at the time of this
writing. See <a href="ch10_01.htm">Chapter 10, "CSS2: A Look Ahead"</a> for a look at
<tt class="literal">font-stretch</tt>.
</p>

<p>The opening dropped capital "T" also doesn't seem
to quite match up. This might also be addressed using
<tt class="literal">font-stretch</tt>, or perhaps by giving the letter a
<tt class="literal">font-weight</tt> of <tt class="literal">900</tt>. However, it
might be best to leave things as they are, since this is a small
effect and not too important.
</p>

<p>How about those columns, though? In order to get these columns to
display properly, we were forced to enclose each column in its own
<tt class="literal">DIV</tt>. While this approach is certainly preferable
to using tables, it still requires us to do some small violence to
the structure of the page -- and trying to create visual effects
by adding elements is never a good idea. It would be far better to
simply set the <tt class="literal">BODY</tt> contents to be flowed into two
columns. Unfortunately, CSS2 contains no provisions for
<a name="INDEX-1274" />columns or column flow. There have been
discussions in the CSS community about adding such behaviors to CSS,
and perhaps they will be added in the future. For now, we're
forced to do things like add <tt class="literal">DIV</tt>s to represent
columns.
</p>

<p>This assumes that you wish to create columns at all, of course. We
went to a great deal of effort to get those columns, but was it
really worth it? Multiple-column layouts can be very difficult to
read on a monitor, since the user may be forced to scroll downward to
read the first column, then back up to the top of the second, then
down again. Adding the columns was an interesting theoretical
exercise, but it may not be the best approach for the<a name="INDEX-1275" /> Web.<a name="INDEX-1276" />
</p>

</div>
</div>
</div>




<hr width="684" align="left" />
<div class="navbar"><table width="684" border="0"><tr><td align="left" valign="top" width="228"><a href="ch10_09.htm"><img alt="Previous" border="0" src="../gifs/txtpreva.gif" /></a></td><td align="center" valign="top" width="228"><a href="index.htm"><img alt="Home" border="0" src="../gifs/txthome.gif" /></a></td><td align="right" valign="top" width="228"><a href="ch11_02.htm"><img alt="Next" border="0" src="../gifs/txtnexta.gif" /></a></td></tr><tr><td align="left" valign="top" width="228">10.9. Summary</td><td align="center" valign="top" width="228"><a href="index/index.htm"><img alt="Book Index" border="0" src="../gifs/index.gif" /></a></td><td align="right" valign="top" width="228">11.2. Tips &amp; Tricks</td></tr></table></div>
<hr width="684" align="left" />

<img alt="Library Navigation Links" border="0" src="../gifs/navbar.gif" usemap="#library-map" />
<p><font size="-1"><a href="copyrght.htm">Copyright &copy; 2002</a> O'Reilly &amp; Associates. All rights reserved.</font></p>

<map name="library-map"><area href="../index.htm" coords="0,1,78,93" shape="rect" /><area href="../wdesign/index.htm" coords="80,2,155,96" shape="rect" /><area href="../xhtml/index.htm" coords="158,0,263,97" shape="rect" /><area href="../audio/index.htm" coords="265,1,335,97" shape="rect" /><area href="index.htm" coords="338,1,434,93" shape="rect" /><area href="../action/index.htm" coords="439,0,540,102" shape="rect" /><area href="../infoarch/index.htm" coords="544,0,685,102" shape="rect" /></map>

</body></html>
