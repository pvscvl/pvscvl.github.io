<html><head><title>Pseudo-Classes and Pseudo-Elements (Cascading Style Sheets: The Definitive Guide)</title><link rel="stylesheet" type="text/css" href="style/style.css" />

<meta name="DC.Creator" content="Eric A. Meyer" /><meta name="DC.Format" content="text/xml" scheme="MIME" /><meta name="DC.Language" content="en-US" /><meta name="DC.Publisher" content="O'Reilly &amp; Associates, Inc." /><meta name="DC.Source" scheme="ISBN" content="1565926226L" /><meta name="DC.Subject.Keyword" content="stuff" /><meta name="DC.Title" content="Cascading Style Sheets: The Definitive Guide" /><meta name="DC.Type" content="Text.Monograph" />

</head><body bgcolor="#ffffff">

<img alt="Book Home" border="0" src="gifs/smbanner.gif" usemap="#banner-map" /><map name="banner-map"><area shape="rect" coords="1,-2,616,66" href="index.htm" alt="Cascading Style Sheets: The Definitive Guide" /><area shape="rect" coords="629,-11,726,25" href="jobjects/fsearch.htm" alt="Search this book" /></map>

<div class="navbar"><table width="684" border="0"><tr><td align="left" valign="top" width="228"><a href="ch02_03.htm"><img alt="Previous" border="0" src="../gifs/txtpreva.gif" /></a></td><td align="center" valign="top" width="228"><a href="index.htm">Cascading Style Sheets: The Definitive Guide</a></td><td align="right" valign="top" width="228"><a href="ch02_05.htm"><img alt="Next" border="0" src="../gifs/txtnexta.gif" /></a></td></tr></table></div>
<hr width="684" align="left" />


<h2 class="sect1">2.4. Pseudo-Classes and Pseudo-Elements</h2>

<p>Even more interesting, at least in terms of syntax, are the
<em class="filename">pseudo-class</em> and
<em class="filename">pseudo-element</em> selectors. These allow the author
to assign styles to structures that don't necessarily exist in
the document, or to things that are inferred by the state of certain
elements, or even the state of the document itself. In other words,
the styles are applied to pieces of a document based on something
other than the structure of the document, and in a way that cannot be
precisely deduced simply by studying the document's markup.
</p>

<p>This may sound like we're applying styles at random. Not at
all! Instead, the styles are applied based on somewhat ephemeral
conditions that can't be predicted in advance. Nonetheless, the
circumstances under which the styles will appear are well-defined.
This is sort of like saying, "During a sporting event, whenever
the home team scores, the crowd will cheer." You don't
know exactly when during a game this will happen, but when the right
conditions occur, the crowd will do just as predicted. The fact that
you can't predict the exact second (or inning, or quarter) in
which this will happen doesn't make the behavior any less
expected whenever the home team does score.
</p>

<a name="css-CHP-2-SECT-4.1" /><div class="sect2">
<h3 class="sect2">2.4.1. Pseudo-Class Selectors</h3>

<p><a name="INDEX-192" /> <a name="INDEX-193" />
<a name="INDEX-194" />First
we'll look at pseudo-class selectors, since they're
better supported by browsers and therefore more widely used.
Let's use an example to see how they work; this will take a
minute before I reach the actual point, so bear with me.
</p>

<p>Consider the anchor, which is used to set up a link from one document
to another. Anchors are always anchors, of course, but some anchors
refer to pages that have already been visited, while others refer to
pages that haven't been visited yet. You can't tell which
are which by simply looking at the HTML markup, because in the
markup, all anchors look the same. Only by comparing the links in a
document to the user's browser history is it possible to tell
which links have been visited and which have not. So, in a certain
sense, there are two basic types of
<a name="INDEX-195" />anchors:
<a name="INDEX-196" />visited and
<a name="INDEX-197" />unvisited.
In fact, these types are known as <em class="filename">pseudo-classes,
</em>and the selectors that use them are called<em class="filename">
pseudo-class selectors</em>. These cause, in a certain sense,
ghostly classes to be applied to elements.
</p>

<p>To see what I mean, let's consider for a moment how browsers
behave with regard to links. The Mosaic convention was that links to
pages you hadn't visited were blue, and links to already
visited pages were red (this was modified to purple in succeeding
browsers such as Internet Explorer). If you could only insert classes
into anchors, such that any anchor you had visited would have a class
of, say, "visited," then you could write a style to make
such anchors red:
</p>

<blockquote><pre class="code">A.visited {color: red;}

&lt;A HREF="http://www.w3.org/" CLASS="visited"&gt;W3C Web site&lt;/A&gt;</pre></blockquote>

<p>Such an approach, however, would require that the classes on anchors
change every time you visited a new page, which is a little silly.
Instead, CSS defines pseudo-classes that make the anchors to visited
pages act as though they have classes of "visited." Thus:
</p>

<blockquote><pre class="code">A:visited {color: red;}</pre></blockquote>

<p>There you have it -- any anchor that points to a visited page will
now be red, and you don't even have to add
<tt class="literal">CLASS</tt> attributes to any of the anchors. Note the
<a name="INDEX-198" />
<a name="INDEX-199" />colon
(<tt class="literal">:</tt>) in the rule. The colon separating the
<tt class="literal">A</tt> and the <tt class="literal">visited</tt> is the
calling card of a pseudo-class or pseudo-element. All pseudo-class
and
<a name="INDEX-200" />pseudo-element
keywords are preceded by a colon.
</p>

<p>Here's another example:</p>

<blockquote><pre class="code">A:visited {color: silver;}

&lt;A HREF="http://www.w3.org/"&gt;W3C Web site&lt;/A&gt;&lt;BR&gt;
&lt;A HREF="http://www.nowhere.net/"&gt;Nowhere in particular&lt;/A&gt;</pre></blockquote>

<p>As you can guess from <a href="ch02_04.htm">Figure 2-13</a>, the first anchor
points to an already visited page, and so it's silver, whereas
the second anchor is still blue, since the browser hasn't
loaded that page before.
</p>

<a name="css-CHP-2-FIG-13" /><div class="figure"><img height="30" alt="Figure 2-13" src="figs/css.0213.gif" width="123" /></div><h4 class="objtitle">Figure 2-13. Pseudo-classes in action</h4>

<p>In <a name="INDEX-201" />CSS1, there are only three pseudo-classes.
We've already seen
<tt class="literal">:visited</tt><a name="INDEX-202" /> , and in
addition, there are <tt class="literal">:link</tt><a name="INDEX-203" />
and <tt class="literal">:active</tt><a name="INDEX-204" />. Each
refers to a different kind of
<a name="INDEX-205" />anchor, as shown in
<a href="ch02_04.htm">Table 2-1</a>.
</p>

<a name="css-CHP-2-TABLE-1" /><h4 class="objtitle">Table 2-1. Psuedo-classes</h4><table border="1">



<tr>
<th>
<p>Name</p>
</th>
<th>
<p>Description</p>
</th>
</tr>


<tr>
<td>
<blockquote><pre class="code">:link</pre></blockquote>
</td>
<td>
<p>Refers to any anchor that is a hyperlink (i.e., has an
<tt class="literal">HREF</tt> attribute) and that points to an address that
has not been visited. Note that some browsers may interpret
<tt class="literal">:link</tt> to refer to any hyperlink, visited or
unvisited.
</p>
</td>
</tr>
<tr>
<td>
<blockquote><pre class="code">:visited</pre></blockquote>
</td>
<td>
<p>Refers to any anchor that is a hyperlink to an already visited page.</p>
</td>
</tr>
<tr>
<td>
<blockquote><pre class="code">:active</pre></blockquote>
</td>
<td>
<p>Refers to any anchor that is in the process of being activated (e.g.,
clicked). In CSS1, this applies only to hyperlinks, whereas in CSS2,
<tt class="literal">:active</tt> can theoretically apply to any element.
</p>
</td>
</tr>

</table>

<p>The first of the pseudo-classes in <a href="ch02_04.htm">Table 2-1</a> may
seem a little bit redundant. After all, if an anchor hasn't
been visited, then it must be unvisited, right? Therefore, all we
should need is the following:
</p>

<blockquote><pre class="code">A {color: blue;}
A:visited {color: red;}</pre></blockquote>

<p>That seems reasonable, but actually it's not quite enough. The
first of the rules shown here will apply not only to unvisited links,
but also target anchors such as this one:
</p>

<blockquote><pre class="code">&lt;A NAME="section4"&gt;4. The Lives of Salmon&lt;/A&gt;</pre></blockquote>

<p>The text shown would be blue, because the <tt class="literal">A</tt>
element will match the first rule shown before. Therefore, in order
to avoid applying your link styles to target anchors, use the
<tt class="literal">:link</tt> pseudo-class:
</p>

<blockquote><pre class="code">A:link {color: blue;}    /* unvisited links are blue */
A:visited {color: red;}   /* visited links are red */
A:active {color: yellow;}  /* anchors turn yellow while clicked */</pre></blockquote>

<p>As you may have already realized, the <tt class="literal">:link</tt> ,
<tt class="literal">:visited</tt> , and <tt class="literal">:active</tt>
selectors are functionally equivalent to the
<tt class="literal">BODY</tt><a name="INDEX-206" /> <a name="INDEX-207" /> attributes
<tt class="literal">LINK</tt><a name="INDEX-208" /> <a name="INDEX-209" /> ,
<tt class="literal">VLINK</tt><a name="INDEX-210" /> <a name="INDEX-211" /> , and
<tt class="literal">ALINK</tt><a name="INDEX-212" /> <a name="INDEX-213" /> . In the
case of the CSS pseudo-classes, of course, you can apply more than
just colors.
</p>

<p>Assume that an author wishes to create a page in which all anchors
are purple if the linked pages haven't been visited, red if
they have been, and yellow as the user clicks them. In HTML, this
could be done as follows:
</p>

<blockquote><pre class="code">&lt;BODY LINK="purple" VLINK="red" ALINK="yellow"&gt;</pre></blockquote>

<p>In CSS, this would be accomplished as:</p>

<blockquote><pre class="code">A:link {color: purple;}
A:visited {color: red;}
A:active {color: yellow;}</pre></blockquote>

<p>This is a good place to bring <a name="INDEX-214" /> <a name="INDEX-215" />class selectors back in and show how
they can be combined with pseudo-classes. For example, let's
say you wish to change the color of any link that points outside your
own site. If you assign a class to each of these anchors, it's
easy. For example:
</p>

<blockquote><pre class="code">&lt;A HREF="http://www.mysite.net/"&gt;My home page&lt;/A&gt;
&lt;A HREF="http://www.site.net/" CLASS="external"&gt;Another home page&lt;/A&gt;</pre></blockquote>

<p>In order to apply different styles to the external link, all you need
is a rule like this:
</p>

<blockquote><pre class="code">A.external:link, A.external:visited {color: maroon;}</pre></blockquote>

<p>This will have the effect of setting the second anchor in the
preceding markup to be maroon, while the first will be the default
color for hyperlinks (usually blue).
</p>

<a name="css-CHP-2-SECT-4.1.1" /><div class="sect3">
<h3 class="sect3">2.4.1.1. Real-world issues</h3>

<p>There are some interesting issues with the anchor pseudo-classes. For
example, it would be possible to set visited and unvisited links to
one font size, and active links to have a larger size:
</p>

<blockquote><pre class="code">A:link, A:visited {font-size: 12pt;}
A:active {font-size: 18pt;}</pre></blockquote>

<p>As you can see in <a href="ch02_04.htm">Figure 2-14</a>, the user agent has
increased the size of the anchor as it's being clicked. A user
agent that supports this behavior is forced to redraw the document as
an anchor is being clicked. However, the CSS specifications
specifically state the user agents are not required to do redraw a
document once it's been drawn for initial display, so you
can't absolutely rely on this happening. Whatever you do, avoid
designs that depend on such behavior!
</p>

<a name="css-CHP-2-FIG-14" /><div class="figure"><img height="70" alt="Figure 2-14" src="figs/css.0214.gif" width="324" /></div><h4 class="objtitle">Figure 2-14. Resizing elements based on their state</h4>

<a name="ch02-14-fm2xml" /><blockquote><h4>WARNING</h4>
<p>The <tt class="literal">:active</tt><a name="INDEX-216" /> pseudo-class isn't supported in
Navigator 4.x or Opera 3.x, although it is supported in Explorer 4.x
and 5.x.<a name="INDEX-217" /> <a name="INDEX-218" /> <a name="INDEX-219" />
</p>
</blockquote>

</div>
</div>
<a name="css-CHP-2-SECT-4.2" /><div class="sect2">
<h3 class="sect2">2.4.2. Pseudo-Element Selectors</h3>

<p><a name="INDEX-220" /> <a name="INDEX-221" />In
a fashion similar to the way that pseudo-classes cause ghostly
classes to be assigned to anchors, pseudo-elements trigger the
insertion of fictional elements into a document in order to achieve
certain effects.
</p>

<p>In <a name="INDEX-222" />CSS1, there are two
<a name="INDEX-223" />pseudo-elements,
called <tt class="literal">:first-letter</tt><a name="INDEX-224" /> and
<tt class="literal">:first-line</tt><a name="INDEX-225" />.
These are used to apply styles to the first letter or first line,
respectively, of a block-level element such as a paragraph. For
example:
</p>

<blockquote><pre class="code">P:first-letter {color: red;}</pre></blockquote>

<p>This will cause the first letter of every paragraph to be colored
red, which is pretty straightforward. Another possibility is to make
the first letter of each <tt class="literal">H2</tt> twice as big as the
rest of the heading, with the result seen in <a href="ch02_04.htm">Figure 2-15</a>:
</p>

<blockquote><pre class="code">H2:first-letter {font-size: 200%;}</pre></blockquote>

<a name="css-CHP-2-FIG-15" /><div class="figure"><img height="139" alt="Figure 2-15" src="figs/css.0215.gif" width="467" /></div><h4 class="objtitle">Figure 2-15. The :first-letter pseudo-element in action</h4>

<p>In a like way, <tt class="literal">:first-line</tt> can be used to affect
the first line of text in an element. For example, we could make the
first line of each paragraph in a document gray:
</p>

<blockquote><pre class="code">P:first-line {color: gray;}</pre></blockquote>

<p>In <a href="ch02_04.htm">Figure 2-16</a>, we see the style is applied to the
first displayed line of text in each paragraph. This is true no
matter how wide or narrow the display region may be. If the first
line contains only the first five words of the paragraph, then only
those five words will be gray. If the first line contains the first
30 words, then all 30 will be gray.
</p>

<a name="css-CHP-2-FIG-16" /><div class="figure"><img height="213" alt="Figure 2-16" src="figs/css.0216.gif" width="400" /></div><h4 class="objtitle">Figure 2-16. The :first-line pseudo-element in action</h4>

<p>The reason <tt class="literal">:first-line</tt> and
<tt class="literal">:first-letter</tt> are referred to as
<em class="filename">pseudo-element selectors</em> is that they cause, in
effect, a temporary element to appear within the document structure.
This is most easily visualized with an example employing
"<a name="INDEX-226" />fictional tags," as the CSS1
specification calls them.
</p>

<p>Assume the following markup:</p>

<blockquote><pre class="code">P:first-line {color: gray;}

&lt;P&gt;This is a paragraph of text which has only one style applied to it. That
style causes the first line to be gray. No other text in the paragraph is
affected by this rule (at least, it shouldn't be).&lt;/P&gt;</pre></blockquote>

<p>Assume further that a user agent displays the text like this:</p>

<blockquote><pre class="code">This is a paragraph of text which has only
one style applied to it. That style causes
the first line to be gray. No other ...</pre></blockquote>

<p>and so forth. Since the text from "This" to
"only" should be gray, the user agent employs a fictional
markup that looks something like this:
</p>

<blockquote><pre class="code">&lt;P&gt;&lt;P:first-line&gt;This is a paragraph of text which has only&lt;/P:first-line&gt;
one style applied to it. That style causes the first line to be gray. No other ...</pre></blockquote>

<p>This fictional tag sequence causes the effect seen in <a href="ch02_04.htm">Figure 2-17</a>.
</p>

<a name="css-CHP-2-FIG-17" /><div class="figure"><img height="82" alt="Figure 2-17" src="figs/css.0217.gif" width="266" /></div><h4 class="objtitle">Figure 2-17. How the pseudo-element selector :first-line works, in a theoretical sense</h4>

<p>This <tt class="literal">&lt;P:first-line&gt;</tt> element does
<em class="emphasis">not</em> appear in the document source. It
isn't even a valid element at all. Instead, its existence is
constructed on the fly by the user agent and used to apply the
<tt class="literal">:first-line</tt> style(s) to the appropriate block of
text. In other words, <tt class="literal">&lt;P:first-line&gt;</tt> is an
element that isn't really an element, but is instead a
pseudo-element. Remember, you don't have to add any new tags.
The user agent will do it for you.
</p>

<p>The <tt class="literal">:first-letter</tt> pseudo-element causes something
similar to happen:
</p>

<blockquote><pre class="code">P:first-letter {font-weight: bold;}

&lt;P&gt;&lt;P:first-letter&gt;T&lt;/P:first-letter&gt;his is a paragraph of text which has
another style sheet applied to it. This time it uses a first-letter effect.</pre></blockquote>

</div>
<a name="css-CHP-2-SECT-4.3" /><div class="sect2">
<h3 class="sect2">2.4.3. Restrictions on Pseudo-Class and  Pseudo-Element Selectors</h3>

<p><a name="INDEX-227" />
<a name="INDEX-228" />
<a name="INDEX-229" />There are limits to the
<a name="INDEX-230" />
<a name="INDEX-231" />CSS properties that
may be applied to <tt class="literal">:first-line</tt> and
<tt class="literal">:first-letter</tt>. These are given in <a href="ch02_04.htm">Table 2-2</a>.
</p>

<a name="css-CHP-2-TABLE-2" /><h4 class="objtitle">Table 2-2. Properties Permitted on Psuedo-elements</h4><table border="1">



<tr>
<th>
<p>:first-letter</p>
</th>
<th>
<p>:first-line</p>
</th>
</tr>


<tr>
<td>
<p>all <tt class="literal">font</tt> properties</p>

<p>all <tt class="literal">color</tt> and <tt class="literal">background</tt>
properties
</p>

<p><tt class="literal">text-decoration</tt></p>

<p><tt class="literal">vertical-align</tt> (if <tt class="literal">float</tt> is set
to <tt class="literal">none</tt>)
</p>

<p><tt class="literal">text-transform</tt></p>

<p><tt class="literal">line-height</tt></p>

<p>all <tt class="literal">margin</tt> properties</p>

<p>all <tt class="literal">padding</tt> properties</p>

<p>all <tt class="literal">border</tt> properties</p>

<p><tt class="literal">float</tt></p>

<p><tt class="literal">clear</tt></p>
</td>
<td>
<p>all <tt class="literal">font</tt> properties</p>

<p>all <tt class="literal">color</tt> and <tt class="literal">background</tt>
properties
</p>

<p><tt class="literal">word-spacing</tt></p>

<p><tt class="literal">letter-spacing</tt></p>

<p><tt class="literal">text-decoration</tt></p>

<p><tt class="literal">vertical-align</tt></p>

<p><tt class="literal">text-transform</tt></p>

<p><tt class="literal">line-height</tt></p>

<p><tt class="literal">clear</tt></p>
</td>
</tr>

</table>

<p>Under CSS1,
<a name="INDEX-232" />pseudo-classes
and
<a name="INDEX-233" />pseudo-elements
cannot be combined within a single selector. As we will see, this
changes to some degree in CSS2. It <em class="emphasis">is</em> possible
to combine pseudo-class and -element selectors with class and ID
selectors, although the syntax for doing so is fairly rigid. The
pseudo-class or pseudo-element is always the very last thing in the
selector, coming after the element, class, and/or ID portions
of<a name="INDEX-234" /> the<a name="INDEX-235" />
selector<a name="INDEX-236" /> <a name="INDEX-237" />:
</p>

<blockquote><pre class="code">A.external:link {color: gray;}
A#link721:visited {color: purple;}</pre></blockquote>

</div>


<hr width="684" align="left" />
<div class="navbar"><table width="684" border="0"><tr><td align="left" valign="top" width="228"><a href="ch02_03.htm"><img alt="Previous" border="0" src="../gifs/txtpreva.gif" /></a></td><td align="center" valign="top" width="228"><a href="index.htm"><img alt="Home" border="0" src="../gifs/txthome.gif" /></a></td><td align="right" valign="top" width="228"><a href="ch02_05.htm"><img alt="Next" border="0" src="../gifs/txtnexta.gif" /></a></td></tr><tr><td align="left" valign="top" width="228">2.3. Class and ID Selectors</td><td align="center" valign="top" width="228"><a href="index/index.htm"><img alt="Book Index" border="0" src="../gifs/index.gif" /></a></td><td align="right" valign="top" width="228">2.5. Structure</td></tr></table></div>
<hr width="684" align="left" />

<img alt="Library Navigation Links" border="0" src="../gifs/navbar.gif" usemap="#library-map" />
<p><font size="-1"><a href="copyrght.htm">Copyright &copy; 2002</a> O'Reilly &amp; Associates. All rights reserved.</font></p>

<map name="library-map"><area href="../index.htm" coords="0,1,78,93" shape="rect" /><area href="../wdesign/index.htm" coords="80,2,155,96" shape="rect" /><area href="../xhtml/index.htm" coords="158,0,263,97" shape="rect" /><area href="../audio/index.htm" coords="265,1,335,97" shape="rect" /><area href="index.htm" coords="338,1,434,93" shape="rect" /><area href="../action/index.htm" coords="439,0,540,102" shape="rect" /><area href="../infoarch/index.htm" coords="544,0,685,102" shape="rect" /></map>

</body></html>