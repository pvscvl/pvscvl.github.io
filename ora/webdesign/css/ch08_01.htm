<html><head><title>Visual Formatting (Cascading Style Sheets: The Definitive Guide)</title><link rel="stylesheet" type="text/css" href="style/style.css" />

<meta name="DC.Creator" content="Eric A. Meyer" /><meta name="DC.Format" content="text/xml" scheme="MIME" /><meta name="DC.Language" content="en-US" /><meta name="DC.Publisher" content="O'Reilly &amp; Associates, Inc." /><meta name="DC.Source" scheme="ISBN" content="1565926226L" /><meta name="DC.Subject.Keyword" content="stuff" /><meta name="DC.Title" content="Cascading Style Sheets: The Definitive Guide" /><meta name="DC.Type" content="Text.Monograph" />

</head><body bgcolor="#ffffff">

<img alt="Book Home" border="0" src="gifs/smbanner.gif" usemap="#banner-map" /><map name="banner-map"><area shape="rect" coords="1,-2,616,66" href="index.htm" alt="Cascading Style Sheets: The Definitive Guide" /><area shape="rect" coords="629,-11,726,25" href="jobjects/fsearch.htm" alt="Search this book" /></map>

<div class="navbar"><table width="684" border="0"><tr><td align="left" valign="top" width="228"><a href="ch07_08.htm"><img alt="Previous" border="0" src="../gifs/txtpreva.gif" /></a></td><td align="center" valign="top" width="228"><a href="index.htm">Cascading Style Sheets: The Definitive Guide</a></td><td align="right" valign="top" width="228"><a href="ch08_02.htm"><img alt="Next" border="0" src="../gifs/txtnexta.gif" /></a></td></tr></table></div>
<hr width="684" align="left" />



<h1 class="chapter">Chapter 8. Visual Formatting</h1>
<div class="htmltoc"><h4 class="tochead">Contents:</h4><p>
<a href="ch08_01.htm">Basic Boxes</a><br />
<a href="ch08_02.htm">Block-Level Elements</a><br />
<a href="ch08_03.htm">Floated Elements</a><br />
<a href="ch08_04.htm">Inline Elements</a><br />
<a href="ch08_05.htm">Summary</a><br /></p></div>

<p><a name="INDEX-907" />In the previous chapter, we covered a
great deal of information on how CSS handles the visual formatting of
a document. However, we did this in a mostly practical fashion: lots
of explanation about how things work, with only a little lip service
paid to the questions of why. In this chapter, we turn to the
theoretical side of visual rendering, with only occasional references
to the practical.
</p>

<p>You may wonder why it's necessary to spend an entire chapter on
the theoretical underpinnings of visual rendering in CSS. The main
reason is to cover all the bases. I attempted to provide as many and
varied examples as possible in the previous chapters, but with a
model as open and powerful as that contained within CSS, no book
could hope to cover every possible way of combining properties and
effects. Every reader of this book will obviously go on to discover
new ways of using CSS for their own document effects.
</p>

<p>In the course of so doing, you may encounter what seems like strange
behavior on the part of user agents. With a thorough grasp of how the
visual rendering model works in CSS, you'll be able to
determine whether the behavior is a correct (if unexpected)
consequence of the <a name="INDEX-908" />rendering engine CSS defines or whether
you've stumbled across a bug that needs to be reported. (See
<a href="appa_01.htm">Appendix A, "CSS Resources"</a>, for details on how to report problems
with rendering engines.)
</p>

<div class="sect1"><a name="css-CHP-8-SECT-1" />
<h2 class="sect1">8.1. Basic Boxes</h2>

<p>In the rendering of elements, CSS assumes that every element
generates one or more rectangular boxes, called <em class="filename">element
boxes</em><a name="INDEX-909" /> <a name="INDEX-910" />.
(Future versions of the specification may allow for nonrectangular
boxes, but for now everything is rectangular.) Each element box
consists of a <em class="filename">content
area</em><a name="INDEX-911" />
at its core. This content area is surrounded by optional amounts of
padding, borders, and margins. These are considered optional because
all could be set to a width of zero, effectively removing them from
the element box. An example content area is shown in <a href="ch08_01.htm">Figure 8-1</a>, along with the surrounding regions of
padding, border, and margins.
</p>

<a name="css-CHP-8-FIG-1" /><div class="figure"><img height="111" alt="Figure 8-1" src="figs/css.0801.gif" width="271" /></div><h4 class="objtitle">Figure 8-1. The content area and its surroundings</h4>

<p>Each of the margins, borders, and padding can be set using various
properties, such as <tt class="literal">margin-left</tt> or
<tt class="literal">border-bottom</tt>. The content's background (for
example, a color or tiled image) is also applied to the padding,
while the margins are always transparent, allowing the background of
any parent elements to be visible. In effect, the margins simulate
the <tt class="literal">HSPACE</tt><a name="INDEX-912" /> <a name="INDEX-913" /> and
<tt class="literal">VSPACE</tt><a name="INDEX-914" /> attributes of images, although in a
much more sophisticated fashion. Padding cannot be set to a negative
value, but margins can. The effects of negative margins are explored
later in this chapter.
</p>

<p>The borders, on the other hand, have their own rules. Borders are
generated using defined styles, such as <tt class="literal">solid</tt> or
<tt class="literal">inset</tt>, and their color can be set using the
<tt class="literal">border-color</tt> property. If no color is set, then
the color of the border is based on the foreground color of the
element's content. For example, if the text of a paragraph is
white, then any borders around that paragraph will be white, unless a
different border color is explicitly declared by the author. If a
border style has "gaps" of some type, then the
element's background is visible through those gaps; in other
words, the border has the same background as the content and padding.
Finally, the width of a border can never be negative.
</p>

<p>There are differences in how different types of elements are
formatted, however. Block-level elements are not treated in the same
way that inline elements are, for example, and floated elements
introduce a whole new level of complexity. Let's examine each
type of element in turn.
</p>

</div>










<hr width="684" align="left" />
<div class="navbar"><table width="684" border="0"><tr><td align="left" valign="top" width="228"><a href="ch07_08.htm"><img alt="Previous" border="0" src="../gifs/txtpreva.gif" /></a></td><td align="center" valign="top" width="228"><a href="index.htm"><img alt="Home" border="0" src="../gifs/txthome.gif" /></a></td><td align="right" valign="top" width="228"><a href="ch08_02.htm"><img alt="Next" border="0" src="../gifs/txtnexta.gif" /></a></td></tr><tr><td align="left" valign="top" width="228">7.8. Summary</td><td align="center" valign="top" width="228"><a href="index/index.htm"><img alt="Book Index" border="0" src="../gifs/index.gif" /></a></td><td align="right" valign="top" width="228">8.2. Block-Level Elements</td></tr></table></div>
<hr width="684" align="left" />

<img alt="Library Navigation Links" border="0" src="../gifs/navbar.gif" usemap="#library-map" />
<p><font size="-1"><a href="copyrght.htm">Copyright &copy; 2002</a> O'Reilly &amp; Associates. All rights reserved.</font></p>

<map name="library-map"><area href="../index.htm" coords="0,1,78,93" shape="rect" /><area href="../wdesign/index.htm" coords="80,2,155,96" shape="rect" /><area href="../xhtml/index.htm" coords="158,0,263,97" shape="rect" /><area href="../audio/index.htm" coords="265,1,335,97" shape="rect" /><area href="index.htm" coords="338,1,434,93" shape="rect" /><area href="../action/index.htm" coords="439,0,540,102" shape="rect" /><area href="../infoarch/index.htm" coords="544,0,685,102" shape="rect" /></map>

</body></html>