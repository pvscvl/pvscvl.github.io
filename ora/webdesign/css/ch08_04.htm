<html><head><title>Inline Elements (Cascading Style Sheets: The Definitive Guide)</title><link rel="stylesheet" type="text/css" href="style/style.css" />

<meta name="DC.Creator" content="Eric A. Meyer" /><meta name="DC.Format" content="text/xml" scheme="MIME" /><meta name="DC.Language" content="en-US" /><meta name="DC.Publisher" content="O'Reilly &amp; Associates, Inc." /><meta name="DC.Source" scheme="ISBN" content="1565926226L" /><meta name="DC.Subject.Keyword" content="stuff" /><meta name="DC.Title" content="Cascading Style Sheets: The Definitive Guide" /><meta name="DC.Type" content="Text.Monograph" />

</head><body bgcolor="#ffffff">

<img alt="Book Home" border="0" src="gifs/smbanner.gif" usemap="#banner-map" /><map name="banner-map"><area shape="rect" coords="1,-2,616,66" href="index.htm" alt="Cascading Style Sheets: The Definitive Guide" /><area shape="rect" coords="629,-11,726,25" href="jobjects/fsearch.htm" alt="Search this book" /></map>

<div class="navbar"><table width="684" border="0"><tr><td align="left" valign="top" width="228"><a href="ch08_03.htm"><img alt="Previous" border="0" src="../gifs/txtpreva.gif" /></a></td><td align="center" valign="top" width="228"><a href="index.htm">Cascading Style Sheets: The Definitive Guide</a></td><td align="right" valign="top" width="228"><a href="ch08_05.htm"><img alt="Next" border="0" src="../gifs/txtnexta.gif" /></a></td></tr></table></div>
<hr width="684" align="left" />


<h2 class="sect1">8.4. Inline Elements</h2>

<p><a name="INDEX-977" />Any visible element that is not a
block-level element (either directly, or by implication, as with
floated elements) is an inline element. Setting box properties for
inline elements gets into even more interesting territory than
we've already covered. Some good examples of inline elements
are the
<tt class="literal">EM</tt><a name="INDEX-978" />
tag and the
<tt class="literal">A</tt><a name="INDEX-979" />
tag, both of which are<a name="INDEX-980" /> nonreplaced elements, and images,
which are <a name="INDEX-981" />replaced elements.
</p>

<a name="ch08-28-fm2xml" /><blockquote><h4>WARNING</h4>
<p>Note that none of this applies to table elements.
<a name="INDEX-982" /> <a name="INDEX-983" />CSS2 introduces new properties and
behaviors for handling tables and table content, and these new
features behave in ways fairly distinct from either block-level or
inline formatting. See <a href="ch10_01.htm">Section 10.1, "Changes from CSS1"</a> for an overview.
</p>
</blockquote>

<a name="css-CHP-8-SECT-4.1" /><div class="sect2">
<h3 class="sect2">8.4.1. Line Layout</h3>

<p><a name="INDEX-984" />
<a name="INDEX-985" />First, we need to understand how inline
content is laid out. It isn't as simple and straightforward as
block-level elements, which just generate boxes and usually
don't let anything coexist next to them. That's all well
and good, of course (even if it does ignore floats), but look inside
a block-level element such as a paragraph. There are all these lines
of text, and we may well ask, "How did they get there? What
controls their arrangement? How can I affect that?"
</p>

<p>In order to understand how lines are generated, let's first
consider the case of an element containing one very long line of
text, as shown in <a href="ch08_04.htm">Figure 8-45</a>. Note that we've
put a border around the line; this has been accomplished by wrapping
the entire line in a <tt class="literal">SPAN</tt> element, and assigning
it a border style:
</p>

<blockquote><pre class="code">SPAN {border: 1px dashed black;}</pre></blockquote>

<a name="css-CHP-8-FIG-45" /><div class="figure"><img height="10" alt="Figure 8-45" src="figs/css.0845.gif" width="356" /></div><h4 class="objtitle">Figure 8-45. A single-line inline element</h4>

<p>This is the simplest case of an inline element contained by a
block-level element, no different in its way than a paragraph with
two words in it. The only differences are that in <a href="ch08_04.htm">Figure 8-45</a>, we have a few dozen words and that most
paragraphs don't contain an explicit inline element such as
<tt class="literal">SPAN</tt>.
</p>

<p>In order to get from this simplified state to something more
familiar, all we have to do is determine how wide the element should
be, and then break up the line so that the resulting pieces will fit
into the width of the element. Thus we arrive at the state shown in
<a href="ch08_04.htm">Figure 8-46</a>.
</p>

<a name="css-CHP-8-FIG-46" /><div class="figure"><img height="55" alt="Figure 8-46" src="figs/css.0846.gif" width="288" /></div><h4 class="objtitle">Figure 8-46. A multiple-line inline element</h4>

<p>Basically, nothing's changed. All we did was take the single
line and break it into pieces, and then stack those pieces on top of
each other. Piece of cake.
</p>

<p>In <a href="ch08_04.htm">Figure 8-46</a>, the borders for each line of text
also happen to coincide with the top and bottom of each line box.
This is only true because no padding or line height has been set for
the inline text, but for the moment, let's use the visual cue
for reference. Also, notice that the borders actually overlap each
other slightly: for example, the bottom border of the first line is
just below the top border of the second line. This is because the
border is actually drawn on the next pixel (assuming we're
using a monitor) to the <em class="emphasis">outside</em> of each line
box. Since the line boxes are touching each other, their borders will
overlap as shown in <a href="ch08_04.htm">Figure 8-46</a>.
</p>

<p>If we alter the <tt class="literal">SPAN</tt> styles to have a background
color, the actual placement of the line boxes becomes quite clear, as
we can see in <a href="ch08_04.htm">Figure 8-47</a>.
</p>

<a name="css-CHP-8-FIG-47" /><div class="figure"><img height="88" alt="Figure 8-47" src="figs/css.0847.gif" width="295" /></div><h4 class="objtitle">Figure 8-47. The full extent of each line box</h4>

<p>Here we see that not every line reaches to the right edge of the
paragraph's content area, which has been denoted with a dotted
gray border. The end of each line box is determined by the content of
the line box. For comparison, let's try the same thing, but
this time right-justify the paragraph, as shown in <a href="ch08_04.htm">Figure 8-48</a>.
</p>

<a name="css-CHP-8-FIG-48" /><div class="figure"><img height="89" alt="Figure 8-48" src="figs/css.0848.gif" width="293" /></div><h4 class="objtitle">Figure 8-48. Line-box layout with right justification</h4>

<p>Again, all we have here are the pieces of a single line of text which
have been stacked on top of one another with their right sides lined
up with each other. If we had set the paragraph to have a
<tt class="literal">text-align</tt> of <tt class="literal">center</tt>, then the
centers of the line boxes would have lined up, and if it were set to
<tt class="literal">justify</tt>, then each line box would be forced to be
as wide as the paragraph's content area. The difference is made
up in letter- and word-spacing, as we see in <a href="ch08_04.htm">Figure 8-49</a>.
</p>

<a name="css-CHP-8-FIG-49" /><div class="figure"><img height="88" alt="Figure 8-49" src="figs/css.0849.gif" width="320" /></div><h4 class="objtitle">Figure 8-49. Line-box layout with full justification</h4>

<p>That pretty well covers how line boxes are generated, at least in the
simplest cases. As we're about to see, however, the inline
formatting model is not exactly simple.<a name="INDEX-986" /> <a name="INDEX-987" />
</p>

</div>
<a name="css-CHP-8-SECT-4.2" /><div class="sect2">
<h3 class="sect2">8.4.2. Inline Formatting</h3>

<p><a name="INDEX-988" />
<a name="INDEX-989" />As we saw in <a href="ch04_01.htm">Chapter 4, "Text Properties"</a>, all elements have a
<tt class="literal">line-height</tt>. This fact has a great deal to do with
how inline elements are displayed, and it needs to be covered in
detail before we move on.
</p>

<p>First, let's establish how the <a name="INDEX-990" />height of a line is determined. A
line's height (or the height of the <em class="filename">line
box</em><a name="INDEX-991" />) is
determined by the height of its constituent elements and other
content (such as text). It's important to understand that
<tt class="literal">line-height</tt> really only applies to inline elements
and other inline content and not to block-level elements. We can set
a <tt class="literal">line-height</tt> value for a block-level element, but
the only way this will have any visual impact is by being applied to
inline content within that block-level element. Consider the
following paragraph, for example:
</p>

<blockquote><pre class="code">&lt;P STYLE="line-height: 0.25em;"&gt;&lt;/P&gt;</pre></blockquote>

<p>Without content, the paragraph won't have anything to display,
so it will not. The fact that this paragraph has a
<tt class="literal">line-height</tt> of any value -- be it
<tt class="literal">0.25em</tt> or <tt class="literal">25in</tt>  -- makes no
difference without inline content to take advantage of it.
</p>

<p>In a certain sense, then, each line of text contained within a
block-level element is its own inline element, even though it
isn't surrounded by any tags. If you like, picture a fictional
tag sequence something like this:
</p>

<blockquote><pre class="code">&lt;P&gt;
&lt;LINE&gt;This is a paragraph with a number of&lt;/LINE&gt;
&lt;LINE&gt;lines of text which make up the&lt;/LINE&gt;
&lt;LINE&gt;contents.&lt;/LINE&gt;
&lt;/P&gt;</pre></blockquote>

<p>Even though the <tt class="literal">LINE</tt> tags don't exist, the
situation is the same as if they did. Each line of text inherits
styles from the paragraph, so they may as well be contained within
tags such as these. Therefore, the only reason we create
<tt class="literal">line-height</tt> rules for block-level elements is so
that we don't have to explicitly declare a
<tt class="literal">line-height</tt> for all its inline elements, fictional
or otherwise.
</p>

<a name="ch08-31-fm2xml" /><blockquote><h4>TIP</h4>
<p>The fictional <tt class="literal">LINE</tt> element actually clarifies the
behavior that results from setting <tt class="literal">line-height</tt> on
a block-level element. According to the
<a name="INDEX-992" />CSS specification, declaring
<tt class="literal">line-height</tt> on a block-level element sets a
<em class="emphasis">minimum</em> line-box height for the content of that
block-level element. Thus, declaring <tt class="literal">P.spacious</tt>
<tt class="literal">{line-height:</tt> <tt class="literal">24pt;}</tt> means that
the minimum height for each line box is 24 points. Technically, the
only way content will inherit this line height is if it is inherited
by an inline element. Most text isn't contained by an inline
element. Thus, if we pretend that each line is contained by the
fictional <tt class="literal">LINE</tt> element, then the model works out
very nicely.
</p>
</blockquote>

<a name="css-CHP-8-SECT-4.2.1" /><div class="sect3">
<h3 class="sect3">8.4.2.1. Generating a line box</h3>

<p><a name="INDEX-993" />Here are
the steps a user agent has to go through in order to generate a line
box. First, for each inline nonreplaced element (or string of text
outside of an inline element), the <tt class="literal">font-size</tt> is
used to determine the initial <em class="filename">content-height</em>.
Thus, if an inline element has a <tt class="literal">font-size</tt> of
<tt class="literal">15px</tt> , then the content-height starts out as
<tt class="literal">15px</tt> .
</p>

<p>Second, all of the inline elements in a given line are aligned
according to their values for <tt class="literal">vertical-align</tt>. By
default, this will cause all text in the line to be aligned along
their baselines, but of course different
<tt class="literal">vertical-align</tt> values will have different effects.
All of the elements could be top-aligned, for example. We'll
return to vertical alignment later in the chapter, but for now will
assume that everything is baseline-aligned.
</p>

<p>Now the <tt class="literal">line-height</tt> comes into play. Let's
assume the following case:
</p>

<blockquote><pre class="code">&lt;P STYLE="font-size: 12px; line-height: 12px;"&gt;
This is text, &lt;EM&gt;some of which is emphasized&lt;/EM&gt;, plus other text&lt;BR&gt;
which is &lt;B STYLE="font-size: 24px;"&gt;boldfaced&lt;/B&gt; and which is&lt;BR&gt;
larger than the surrounding text.
&lt;/P&gt;</pre></blockquote>

<p>What we have here is a situation where some of the text has a
<tt class="literal">font-size</tt> of <tt class="literal">12px</tt> , while other
text has a size of <tt class="literal">24px</tt> . However, all of the text
has a <tt class="literal">line-height</tt> of <tt class="literal">12px</tt>,
since <tt class="literal">line-height</tt> is an inherited property. What
happens is that the difference between <tt class="literal">font-size</tt>
and <tt class="literal">line-height</tt> is divided in half, and then
applied to the top and bottom of each element's content-height
to arrive at the <a name="INDEX-994" /><em class="filename">inline box</em>. Each half
of the divided difference is referred to as
<em class="filename">half-leading</em><a name="INDEX-995" />
<a name="INDEX-996" />.
</p>

<p>Thus, for each bit of text where both the
<tt class="literal">font-size</tt> and <tt class="literal">line-height</tt> are
<tt class="literal">12px</tt> , nothing is applied to the content-height
(since 12 minus 12 equals zero, and half of nothing is nothing), and
so the inline box is <tt class="literal">12px</tt> high. For the boldfaced
text, however, the difference between <tt class="literal">font-size</tt>
and <tt class="literal">line-height</tt> is <tt class="literal">12px</tt> . This
is divided in half to determine the half-leading
(<tt class="literal">6px</tt>), and the half-leading is subtracted from
both the top and bottom of the content-height to arrive at an inline
box which is, in this case, <tt class="literal">12px</tt> high. This
12-pixel inline box is centered vertically within the content-height
of the element.
</p>

<p>So far it sounds like we've done the same thing to each bit of
text. This is not quite the case. The inline boxes don't
actually line up, as we can see in <a href="ch08_04.htm">Figure 8-50</a>,
because the text is all baseline-aligned.
</p>

<a name="css-CHP-8-FIG-50" /><div class="figure"><img height="45" alt="Figure 8-50" src="figs/css.0850.gif" width="450" /></div><h4 class="objtitle">Figure 8-50. How the inline boxes (gray) influence the height of the line box</h4>

<p>However, it is precisely the inline boxes which determine the height
of the overall line box. The line box is defined to be the distance
from the top of the highest inline box in the line to the bottom of
the lowest inline box, as illustrated by <a href="ch08_04.htm">Figure 8-51</a>.
</p>

<a name="css-CHP-8-FIG-51" /><div class="figure"><img height="61" alt="Figure 8-51" src="figs/css.0851.gif" width="450" /></div><h4 class="objtitle">Figure 8-51. Stacking the line boxes together</h4>

<p>Then the top of the line box is placed against the bottom of the line
box for the preceding line. This will give us a paragraph as shown in
<a href="ch08_04.htm">Figure 8-52</a>.
</p>

<a name="css-CHP-8-FIG-52" /><div class="figure"><img height="39" alt="Figure 8-52" src="figs/css.0852.gif" width="275" /></div><h4 class="objtitle">Figure 8-52. The final paragraph of stacked line boxes</h4>

<p>As we can see, the middle line is taller than the other two, but it
still isn't big enough to contain the text within it.
That's because the position of the inline boxes in the line
forces it to be taller than 12 pixels, but the line-box still
isn't tall enough for the text to avoid overlapping other
lines.
</p>

<p>The situation can become markedly different if we change the vertical
alignment of the inline boxes. Suppose that we change the boldface
text to have a vertical alignment of <tt class="literal">middle</tt>. This
would have the result shown in <a href="ch08_04.htm">Figure 8-53</a>.
</p>

<a name="css-CHP-8-FIG-53" /><div class="figure"><img height="35" alt="Figure 8-53" src="figs/css.0853.gif" width="274" /></div><h4 class="objtitle">Figure 8-53. Changing the vertical alignment of the larger text</h4>

<p>Here, the middle of the boldfaced text's inline box has lined
up with the middle of the inline boxes of the other text in the line.
Because the inline boxes are all 12px tall, and their middles are all
lined up, this means that the line box for this line is now only 12
pixels high, just like the others. However, it also means that the
oversized text intrudes into other lines even more than before.
</p>

<p>Let's consider another situation where another inline element
is in the same line as the boldfaced text, but its alignment is other
than the baseline:
</p>

<blockquote><pre class="code">&lt;P STYLE="font-size: 12px; line-height: 12px;"&gt;
This is text, &lt;EM&gt;some of which is emphasized&lt;/EM&gt;, plus other text&lt;BR&gt;
which is &lt;B STYLE="font-size: 24px;"&gt;boldfaced&lt;/B&gt; 
and &lt;SPAN STYLE="vertical-align: top;"&gt;tall&lt;/SPAN&gt; and which is&lt;BR&gt;
larger than the surrounding text.
&lt;/P&gt;</pre></blockquote>

<p>Now we're back to our earlier example, where the middle line
box is taller than the other line boxes. However, notice how the
"tall" text is aligned in <a href="ch08_04.htm">Figure 8-54</a>.
</p>

<a name="css-CHP-8-FIG-54" /><div class="figure"><img height="39" alt="Figure 8-54" src="figs/css.0854.gif" width="274" /></div><h4 class="objtitle">Figure 8-54. Top-aligning text</h4>

<p>What's happened here is that the top of the "tall"
text's inline box is aligned with the top of the line box.
Since the "tall" text has equal values for
<tt class="literal">font-size</tt> and <tt class="literal">line-height</tt>, its
content height and inline box are the same thing. However, consider
this:
</p>

<blockquote><pre class="code">&lt;P STYLE="font-size: 12px; line-height: 12px;"&gt;
This is text, &lt;EM&gt;some of which is emphasized&lt;/EM&gt;, plus other text&lt;BR&gt;
which is &lt;B STYLE="font-size: 24px;"&gt;boldfaced&lt;/B&gt; 
and &lt;SPAN STYLE="vertical-align: top; line-height: 4px;"&gt;tall&lt;/SPAN&gt; 
and which is&lt;BR&gt;
larger than the surrounding text.
&lt;/P&gt;</pre></blockquote>

<p>Since the <tt class="literal">line-height</tt> for the "tall"
text is less than its <tt class="literal">font-size</tt>, the inline box
for that element is smaller. This will change the placement of the
text itself, since the top of its inline box must be aligned with the
top of the line box for its line. Thus we get the result shown in
<a href="ch08_04.htm">Figure 8-55</a>.
</p>

<a name="css-CHP-8-FIG-55" /><div class="figure"><img height="39" alt="Figure 8-55" src="figs/css.0855.gif" width="274" /></div><h4 class="objtitle">Figure 8-55. The effects of a very small inline box</h4>

<p>On the other hand, we could set the "tall" text to have a
<tt class="literal">line-height</tt> which is actually bigger than its
font-size. For example:
</p>

<blockquote><pre class="code">&lt;P STYLE="font-size: 12px; line-height: 12px;"&gt;
This is text, &lt;EM&gt;some of which is emphasized&lt;/EM&gt;, plus other text&lt;BR&gt;
which is &lt;B STYLE="font-size: 24px;"&gt;boldfaced&lt;/B&gt; 
and &lt;SPAN STYLE="vertical-align: top; line-height: 18px;"&gt;tall&lt;/SPAN&gt; 
and which is&lt;BR&gt;
larger than the surrounding text.
&lt;/P&gt;</pre></blockquote>

<p>Since we've given the "tall" text a
<tt class="literal">line-height</tt> of <tt class="literal">18px</tt> , the
difference between <tt class="literal">font-size</tt> and
<tt class="literal">line-height</tt> is 6 pixels. In this case, though, the
half-leading of 3 pixels is added to the content area, not subtracted
(since the <tt class="literal">line-height</tt> is more than the
<tt class="literal">font-size</tt>). This will result in an inline box 18
pixels tall, and its top is aligned with the top of the line box.
Thus <a href="ch08_04.htm">Figure 8-56</a>.
</p>

<a name="css-CHP-8-FIG-56" /><div class="figure"><img height="43" alt="Figure 8-56" src="figs/css.0856.gif" width="277" /></div><h4 class="objtitle">Figure 8-56. Top-aligning text with a different line height</h4>

<p>Before we go any further, let's see what happens when we add
box properties to inline<a name="INDEX-997" /> elements.<a name="INDEX-998" />
</p>

</div>

<a name="css-CHP-8-SECT-4.2.2" /><div class="sect3">
<h3 class="sect3">8.4.2.2. Adding box properties</h3>

<p><a name="INDEX-999" />
<a name="INDEX-1000" />As we're aware
from previous discussions, padding, margins, and borders may all be
applied to inline nonreplaced elements, and they don't
influence the <tt class="literal">line-height</tt> at all. If we were to
apply some borders to a <tt class="literal">SPAN</tt> element without any
margins or padding, we'd get results such as that shown in
<a href="ch08_04.htm">Figure 8-57</a>.
</p>

<a name="css-CHP-8-FIG-57" /><div class="figure"><img height="196" alt="Figure 8-57" src="figs/css.0857.gif" width="338" /></div><h4 class="objtitle">Figure 8-57. Inline borders and line-box layout</h4>

<p>The borders are placed as they are because the border edge of inline
elements is controlled by the <tt class="literal">font-size</tt>, not the
<tt class="literal">line-height</tt>. In other words, if a
<tt class="literal">SPAN</tt> element has a <tt class="literal">font-size</tt> of
<tt class="literal">12pt</tt> and a <tt class="literal">line-height</tt> of
<tt class="literal">36pt</tt>, its content area is <tt class="literal">12pt</tt>
high, and the content area is what will be surrounded with the
border.
</p>

<p>This behavior can be altered by assigning padding to the inline
element, which will push the borders away from the text itself (shown
in <a href="ch08_04.htm">Figure 8-58</a>):
</p>

<blockquote><pre class="code">SPAN {border: 1px dashed black; padding: 4pt;}</pre></blockquote>

<a name="css-CHP-8-FIG-58" /><div class="figure"><img height="228" alt="Figure 8-58" src="figs/css.0858.gif" width="338" /></div><h4 class="objtitle">Figure 8-58. Inline padding and line-box layout</h4>

<p>Note that this padding does not alter the actual shape of the
content-height, and so will not affect the height of the inline box
for this element. Adding borders to an inline element will not affect
the way line boxes are generated, as <a href="ch08_04.htm">Figure 8-59</a>
illustrates.
</p>

<a name="css-CHP-8-FIG-59" /><div class="figure"><img height="223" alt="Figure 8-59" src="figs/css.0859.gif" width="384" /></div><h4 class="objtitle">Figure 8-59. Large inline boxes can overlap many other lines</h4>

<p>One can assign margins to nonreplaced inline elements as well, but
these effectively do not apply to the top and bottom of a nonreplaced
inline element, and so don't affect the height of the line box.
The ends of the element are another story, as we saw in <a href="ch07_01.htm">Chapter 7, "Boxes and Borders"</a>. Once again, this is because an inline element
that is displayed on multiple lines is just the same as a single-line
element that has been broken into pieces. Consult <a href="ch08_04.htm">Figure 8-60</a> for a more detailed look at this situation
caused by using these styles:
</p>

<blockquote><pre class="code">SPAN {border: 1px dashed black; padding: 4pt; margin: 8pt;}</pre></blockquote>

<a name="css-CHP-8-FIG-60" /><div class="figure"><img height="228" alt="Figure 8-60" src="figs/css.0860.gif" width="336" /></div><h4 class="objtitle">Figure 8-60. Inline margins and line-box layout</h4>

</div>
</div>
<a name="css-CHP-8-SECT-4.3" /><div class="sect2">
<h3 class="sect2">8.4.3. Managing the Line Height of Inline Elements</h3>

<p><a name="INDEX-1001" /> <a name="INDEX-1002" />In the previous section, we had a few
cases where changing the <tt class="literal">line-height</tt> of an inline
element led to the possibility of text from one line overlapping
another. In each case, though, the changes were made on individual
elements. So how can we affect the <tt class="literal">line-height</tt> of
elements in a more general way, in order to keep them from
<a name="INDEX-1003" />
<a name="INDEX-1004" />overlapping?
</p>

<p>One way to do this is to use the em unit in conjunction with an
element whose <tt class="literal">font-size</tt> has changed. For example:
</p>

<blockquote><pre class="code">P {font-size: 14pt; line-height: 16pt;}
SPAN {background: gray;}
BIG {font-size: 250%; line-height: 1em; background: silver;}

...line in which&lt;/SPAN&gt;&lt;BIG&gt;some big text&lt;/BIG&gt;&lt;SPAN&gt;is found...</pre></blockquote>

<p>The results of this are shown in <a href="ch08_04.htm">Figure 8-61</a>. By
setting a <tt class="literal">line-height</tt> for the
<tt class="literal">BIG</tt> element, the overall height of the line box
has been increased, thus providing enough room for the
<tt class="literal">BIG</tt> element to be displayed without overlapping
any other text and without changing the
<tt class="literal">line-height</tt> of all lines in the paragraph. We use
a value <tt class="literal">1em</tt> so that the
<tt class="literal">line-height</tt> for the <tt class="literal">BIG</tt> element
will be set to the same size as <tt class="literal">BIG</tt>'s
<tt class="literal">font-size</tt>  -- remember,
<tt class="literal">line-height</tt> is set in relation to the
<tt class="literal">font-size</tt> of the element itself, not the parent
element.
</p>

<a name="css-CHP-8-FIG-61" /><div class="figure"><img height="149" alt="Figure 8-61" src="figs/css.0861.gif" width="481" /></div><h4 class="objtitle">Figure 8-61. Assigning the line-height property to inline elements</h4>

<p>It's important to keep these sorts of things in mind when
you're trying to do things like add borders to an inline
element. Let's say you want to put 5-pixel borders around any
hyperlink:
</p>

<blockquote><pre class="code">A:link {border: 5px solid blue;}</pre></blockquote>

<p>If you don't set a large enough <tt class="literal">line-height</tt>
to accommodate the border, it will be in danger of overwriting other
lines, as shown in <a href="ch08_04.htm">Figure 8-62</a>.
</p>

<a name="css-CHP-8-FIG-62" /><div class="figure"><img height="146" alt="Figure 8-62" src="figs/css.0862.gif" width="403" /></div><h4 class="objtitle">Figure 8-62. Inline borders can be overlapped</h4>

<p>One solution is to increase the <tt class="literal">line-height</tt> of the
paragraph. This will affect every line in the entire element, not
just the line in which the bordered hyperlink appears:
</p>

<blockquote><pre class="code">A:link {border: 5px solid blue;}
P {font-size: 14px; line-height: 24px;}</pre></blockquote>

<p>Because there is extra space added above and below each line, the
border around the hyperlink doesn't impinge on any other line,
as we can see in <a href="ch08_04.htm">Figure 8-63</a>.
</p>

<a name="css-CHP-8-FIG-63" /><div class="figure"><img height="177" alt="Figure 8-63" src="figs/css.0863.gif" width="366" /></div><h4 class="objtitle">Figure 8-63. Increasing line-height to leave room for inline borders</h4>

<p>This approach works in this particular case, of course, because all
of the text is the same size. Just to cover all the bases, though, it
might make more sense to simply increase the
<tt class="literal">line-height</tt> of the anchor element itself, like
this:
</p>

<blockquote><pre class="code">A:link {border: 5px solid blue; line-height: 24px;}
P {font-size: 14px;}</pre></blockquote>

<p>If all the content of a line is text of the same size, then the line
box is always as tall as the biggest <tt class="literal">line-height</tt>
value contained within that line box (since this will coincide with
the height of the tallest inline box in the line), so this works.
Furthermore, it only affects those lines in which a hyperlink
appears. However, there is yet another alternative.
</p>

<a name="css-CHP-8-SECT-4.3.1" /><div class="sect3">
<h3 class="sect3">8.4.3.1. Scaling the line heights</h3>

<p><a name="INDEX-1005" />
<a name="INDEX-1006" />There's an even better way to set
<tt class="literal">line-height</tt>, as it turns out, and that's to
use a raw number as the value of <tt class="literal">line-height</tt>. This
is so much better because the number is used as a scaling factor, and
it is the factor that is inherited, not the computed value.
Let's say you want the <tt class="literal">line-height</tt> of all
elements in a document to be one-and-one-half times their
<tt class="literal">font-size</tt>. You would declare:
</p>

<blockquote><pre class="code">BODY {line-height: 1.5;}</pre></blockquote>

<p>This scaling factor of <tt class="literal">1.5</tt> is passed down from
element to element, and at each level the factor is used as a
multiplier of the <tt class="literal">font-size</tt> of each element.
Therefore, the following markup would be displayed as shown in <a href="ch08_04.htm">Figure 8-64</a> (backgrounds added for illustrative purposes):
</p>

<blockquote><pre class="code">P {font-size: 12px; line-height: 1.5;}
SMALL {font-size: 66%;}
BIG {font-size: 200%;}

&lt;P&gt;This paragraph has a line-height of 1.5 times its font-size. In addition,
any elements within it &lt;SMALL&gt;such as this small element&lt;/SMALL&gt; also have
line-heights 1.5 time their font-size... and that includes &lt;BIG&gt;this big 
element right here&lt;/BIG&gt;. By using a scaling factor, line-heights scale
to match the font-size of any element.&lt;/P&gt;</pre></blockquote>

<a name="css-CHP-8-FIG-64" /><div class="figure"><img height="120" alt="Figure 8-64" src="figs/css.0864.gif" width="338" /></div><h4 class="objtitle">Figure 8-64. Using a scaling factor for line-height</h4>

<p>In this example, the <tt class="literal">line-height</tt> for the
<tt class="literal">SMALL</tt> element turns out to be
<tt class="literal">12px</tt> , and for the <tt class="literal">BIG</tt> element,
it's <tt class="literal">36px</tt> . These may seem excessive, but
they're in keeping with the overall page design. Of course, if
you don't want your <tt class="literal">BIG</tt> text to generate too
much extra leading, just use these rules instead:
</p>

<blockquote><pre class="code">P {font-size: 12px; line-height: 1.5;}
SMALL {font-size: 66%;}
BIG {font-size: 200%; line-height: 1em;}</pre></blockquote>

<a name="ch08-36-fm2xml" /><blockquote><h4>WARNING</h4>
<p>Anything this useful has to have a drawback, right? As it happens,
<a name="INDEX-1007" />Internet Explorer 3.x will
treat scaling factors as though they were pixel units. Just try to
imagine a paragraph with a <tt class="literal">line-height</tt> of
<tt class="literal">1.5px</tt> . It isn't pretty.
</p>
</blockquote>

<p>Another solution is to set the styles such that lines are no taller
than absolutely necessary to hold their content. This is where you
might use a <tt class="literal">line-height</tt> of 
<tt class="literal">1.0</tt>. This value will multiply itself by every
<tt class="literal">font-size</tt> to get the same value as the
<tt class="literal">font-size</tt> of every element. Thus, for every
element, the inline box will be the same as the<a name="INDEX-1008" /> <a name="INDEX-1009" /> content
area.<a name="INDEX-1010" />
<a name="INDEX-1011" />
</p>

</div>
</div>
<a name="css-CHP-8-SECT-4.4" /><div class="sect2">
<h3 class="sect2">8.4.4. Inline Replaced Elements</h3>

<p><a name="INDEX-1012" />
<a name="INDEX-1013" />Inline
replaced elements, such as <a name="INDEX-1014" /> <a name="INDEX-1015" />images,
are subject to a few crucial differences in how inline formatting is
handled. This difference stems from the fact that replaced elements
are still assumed to have an intrinsic height and width; for example,
an image will be a certain number of pixels high and wide.
</p>

<p>However, a replaced element with an intrinsic height can cause a line
box to become taller than normal. This does <em class="emphasis">not</em>
 change the value of <tt class="literal">line-height</tt> for any
element in the line, <em class="emphasis">including the image itself</em>.
Instead, the line box is simply made tall enough to accommodate the
replaced element, <em class="emphasis">plus</em> any box properties. In
other words, the entirety of the replaced element -- content,
margins, borders, and padding -- is used to define the
element's inline box. The following markup gives one such
example, (shown in <a href="ch08_04.htm">Figure 8-65</a>):
</p>

<blockquote><pre class="code">P {font-size: 12px; line-height: 18px;}
IMG {height: 30px; margin: 0; padding: 0;}</pre></blockquote>

<a name="css-CHP-8-FIG-65" /><div class="figure"><img height="102" alt="Figure 8-65" src="figs/css.0865.gif" width="349" /></div><h4 class="objtitle">Figure 8-65. Replaced elements don't actually increase the line height</h4>

<p>Despite all the blank space, the effective value of
<tt class="literal">line-height</tt> has not changed. It simply has no
effect on the image's inline box, which is in this case
<tt class="literal">30px</tt> tall.
</p>

<p>Nonetheless, an inline replaced element still has a value for
<tt class="literal">line-height</tt>. Why? In order to be able to correctly
position the element if it's been vertically aligned. Recall
that, percentage values for <tt class="literal">vertical-align</tt> are
calculated with respect to an element's line height. Thus:
</p>

<blockquote><pre class="code">P {line-height: 18px;}
IMG {vertical-align: 50%;}

&lt;P&gt;The image in this paragraph &lt;IMG SRC="test.gif" ALT="test image"&gt; 
will be raised 9px.&lt;/P&gt;</pre></blockquote>

<p>The inherited value of <tt class="literal">line-height</tt> is what causes
the image to be raised nine pixels, instead of some other number.
Without a value for <tt class="literal">line-height</tt>, it wouldn't
be possible to perform percentage-value vertical alignments. The
height of the image itself has no relevance when it comes to vertical
alignment: the value of <tt class="literal">line-height</tt> is all that
matters.
</p>

<a name="css-CHP-8-SECT-4.4.1" /><div class="sect3">
<h3 class="sect3">8.4.4.1. Adding box properties</h3>

<p><a name="INDEX-1016" /> <a name="INDEX-1017" />
<a name="INDEX-1018" />After everything else, applying
margins, borders, and padding to inline replaced elements almost
seems simple.
</p>

<p>Padding and borders are applied to replaced elements as normal;
padding inserts space around the actual content (for example, a
graphic) and the border surrounds the padding. What's
interesting is that these two things actually do influence the height
of the line box. Consider <a href="ch08_04.htm">Figure 8-66</a>.
</p>

<a name="css-CHP-8-FIG-66" /><div class="figure"><img height="128" alt="Figure 8-66" src="figs/css.0866.gif" width="306" /></div><h4 class="objtitle">Figure 8-66. Adding padding and borders to an inline replaced element</h4>

<p>Note that the "first" line box is tall enough to contain
the image, whereas the "second" is tall enough to contain
the image, its padding, and its border. This is because the totality
of the replaced element (content, padding, borders) make up the
inline box for the replaced element. This is what forces the line
boxes to be taller in <a href="ch08_04.htm">Figure 8-66</a>.
</p>

<p>Margins are also contained within the line box, but they have their
own wrinkle. Setting a positive margin is no mystery: it will simply
make the line box taller, as in <a href="ch08_04.htm">Figure 8-67</a>.
</p>

<a name="css-CHP-8-FIG-67" /><div class="figure"><img height="149" alt="Figure 8-67" src="figs/css.0867.gif" width="306" /></div><h4 class="objtitle">Figure 8-67. Adding padding, borders, and margins to an inline replaced element</h4>

<p>Setting <a name="INDEX-1019" />negative margins, meanwhile, has exactly
the effect you might expect: it makes the line-box shorter. This is
illustrated in <a href="ch08_04.htm">Figure 8-68</a>, where we can see the
line above the image has been pulled down toward it.
</p>

<a name="css-CHP-8-FIG-68" /><div class="figure"><img height="131" alt="Figure 8-68" src="figs/css.0868.gif" width="324" /></div><h4 class="objtitle">Figure 8-68. The effect of negative margins on an inline replaced element</h4>

<p>This is quite similar to the operation of negative margins on
block-level elements, of course. In this case, the negative margins
are making the replaced element's inline box smaller than
ordinary. This is the only way to cause inline replaced elements to
bleed<a name="INDEX-1020" />
<a name="INDEX-1021" />
into<a name="INDEX-1022" />
<a name="INDEX-1023" />
other<a name="INDEX-1024" />
lines.<a name="INDEX-1025" />
</p>

</div>
</div>


<hr width="684" align="left" />
<div class="navbar"><table width="684" border="0"><tr><td align="left" valign="top" width="228"><a href="ch08_03.htm"><img alt="Previous" border="0" src="../gifs/txtpreva.gif" /></a></td><td align="center" valign="top" width="228"><a href="index.htm"><img alt="Home" border="0" src="../gifs/txthome.gif" /></a></td><td align="right" valign="top" width="228"><a href="ch08_05.htm"><img alt="Next" border="0" src="../gifs/txtnexta.gif" /></a></td></tr><tr><td align="left" valign="top" width="228">8.3. Floated Elements</td><td align="center" valign="top" width="228"><a href="index/index.htm"><img alt="Book Index" border="0" src="../gifs/index.gif" /></a></td><td align="right" valign="top" width="228">8.5. Summary</td></tr></table></div>
<hr width="684" align="left" />

<img alt="Library Navigation Links" border="0" src="../gifs/navbar.gif" usemap="#library-map" />
<p><font size="-1"><a href="copyrght.htm">Copyright &copy; 2002</a> O'Reilly &amp; Associates. All rights reserved.</font></p>

<map name="library-map"><area href="../index.htm" coords="0,1,78,93" shape="rect" /><area href="../wdesign/index.htm" coords="80,2,155,96" shape="rect" /><area href="../xhtml/index.htm" coords="158,0,263,97" shape="rect" /><area href="../audio/index.htm" coords="265,1,335,97" shape="rect" /><area href="index.htm" coords="338,1,434,93" shape="rect" /><area href="../action/index.htm" coords="439,0,540,102" shape="rect" /><area href="../infoarch/index.htm" coords="544,0,685,102" shape="rect" /></map>

</body></html>
