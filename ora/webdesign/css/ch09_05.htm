<html><head><title>Stacking Positioned Elements (Cascading Style Sheets: The Definitive Guide)</title><link rel="stylesheet" type="text/css" href="style/style.css" />

<meta name="DC.Creator" content="Eric A. Meyer" /><meta name="DC.Format" content="text/xml" scheme="MIME" /><meta name="DC.Language" content="en-US" /><meta name="DC.Publisher" content="O'Reilly &amp; Associates, Inc." /><meta name="DC.Source" scheme="ISBN" content="1565926226L" /><meta name="DC.Subject.Keyword" content="stuff" /><meta name="DC.Title" content="Cascading Style Sheets: The Definitive Guide" /><meta name="DC.Type" content="Text.Monograph" />

</head><body bgcolor="#ffffff">

<img alt="Book Home" border="0" src="gifs/smbanner.gif" usemap="#banner-map" /><map name="banner-map"><area shape="rect" coords="1,-2,616,66" href="index.htm" alt="Cascading Style Sheets: The Definitive Guide" /><area shape="rect" coords="629,-11,726,25" href="jobjects/fsearch.htm" alt="Search this book" /></map>

<div class="navbar"><table width="684" border="0"><tr><td align="left" valign="top" width="228"><a href="ch09_04.htm"><img alt="Previous" border="0" src="../gifs/txtpreva.gif" /></a></td><td align="center" valign="top" width="228"><a href="index.htm">Cascading Style Sheets: The Definitive Guide</a></td><td align="right" valign="top" width="228"><a href="ch09_06.htm"><img alt="Next" border="0" src="../gifs/txtnexta.gif" /></a></td></tr></table></div>
<hr width="684" align="left" />


<h2 class="sect1">9.5. Stacking Positioned Elements</h2>

<p><a name="INDEX-1098" /> <a name="INDEX-1099" />With all of the positioning going on,
there will inevitably be a situation where two elements will try to
exist in the same place, visually speaking. Obviously, one of them
will have to overlap the other -- but how do we control which one
comes out "on top"?
</p>

<p>This is where <tt class="literal">z-index</tt> comes in.</p>

<a name="css-CHP-9-SIDEBAR-13" /><blockquote><table border="1" cellpadding="6"><tr><td>
<h4 class="objtitle">z-index</h4>

<dl>
<dt><b>Values</b></dt>
<dd>
<p><tt class="literal">integer</tt> | <tt class="literal">auto</tt></p>
</dd>

</dl>

<dl>
<dt><b>Initial Value</b></dt>
<dd>
<p><tt class="literal">auto</tt></p>
</dd>

</dl>

<dl>
<dt><b>Applies to</b></dt>
<dd>
<p>positioned elements</p>
</dd>

</dl>

<dl>
<dt><b>Inherited</b></dt>
<dd>
<p>no</p>
</dd>

</dl>
</td></tr></table></blockquote>

<p><tt class="literal">z-index</tt><a name="INDEX-1100" /> allows the author to alter the way in
which elements
<a name="INDEX-1101" />
<a name="INDEX-1102" />overlap each other It takes its name
from the coordinate system in which side-to-side is the x-axis and
top-to-bottom is the y-axis. In such a case, the third
axis -- that runs from front to back, or if you prefer, closer to
further away from the user -- is termed the
<a name="INDEX-1103" />z-axis. Thus,
elements are given values along this axis and are represented using
<tt class="literal">z-index</tt>. <a href="ch09_05.htm">Figure 9-26</a> illustrates
this system.
</p>

<a name="css-CHP-9-FIG-26" /><div class="figure"><img height="350" alt="Figure 9-26" src="figs/css.0926.gif" width="307" /></div><h4 class="objtitle">Figure 9-26. A conceptual view of z-index stacking</h4>

<p>In this coordinate system, an element with a high
<tt class="literal">z-index</tt> value is closer to the reader than those
with lower <tt class="literal">z-index</tt> values. This will cause the
high-value element to overlap the others, as illustrated in <a href="ch09_05.htm">Figure 9-27</a>. This is referred to as
<em class="filename">stacking</em>.
</p>

<a name="css-CHP-9-FIG-27" /><div class="figure"><img height="260" alt="Figure 9-27" src="figs/css.0927.gif" width="238" /></div><h4 class="objtitle">Figure 9-27. How the elements are stacked</h4>

<p>Any integer can be used as a value for <tt class="literal">z-index</tt>,
including negative numbers. Assigning an element a negative
<tt class="literal">z-index</tt> will move it further away from the reader;
that is, it will be moved lower in the stack. Consider the following
styles, illustrated in <a href="ch09_05.htm">Figure 9-28</a>:
</p>

<blockquote><pre class="code">P.first {position: absolute; top: 0; left: 0; 
  width: 20%; height: 10em; z-index: 6;}
P.second {position: absolute; top: 0; left: 10%;
  width: 30%; height: 5em; z-index: 2;}
P.third {position: absolute; top: 15%; left: 5%; 
  width: 15%; height: 10em; z-index: -5;}
P.fourth {position: absolute; top: 10%; left: 15%;
  width: 40%; height: 10em; z-index: 0;}</pre></blockquote>

<a name="css-CHP-9-FIG-28" /><div class="figure"><img height="260" alt="Figure 9-28" src="figs/css.0928.gif" width="357" /></div><h4 class="objtitle">Figure 9-28. Stacked elements can overlap each other</h4>

<p>Each of the elements is positioned according to its styles, but the
usual order of stacking is altered by the <tt class="literal">z-index</tt>
values. Assuming the paragraphs were in numeric order, then a
reasonable stacking order would have been, from lowest to highest,
<tt class="literal">P.first</tt>, <tt class="literal">P.second</tt> ,
<tt class="literal">P.third</tt> , <tt class="literal">P.fourth</tt>. This would
have put <tt class="literal">P.first</tt> behind the other three elements
and <tt class="literal">P.fourth</tt> in front of the others. Now, thanks
to <tt class="literal">z-index</tt>, the stacking order is under our
control.
</p>

<p>As the previous example demonstrates, there is no particular need to
have the <tt class="literal">z-index</tt> values be contiguous. You can
assign any integer of any size. If you wanted to be fairly certain
that an element stayed in front of everything else, you might use a
rule along the lines of <tt class="literal">z-index:</tt>
<tt class="literal">100000</tt>. This would work as expected in most
cases -- although if you ever declared another element's
<tt class="literal">z-index</tt> to be <tt class="literal">100001</tt> (or
higher), it would appear in front.
</p>

<p>Once you assign an element a value for <tt class="literal">z-index</tt>
(other than <tt class="literal">auto</tt>), that element establishes its
own local <em class="filename">stacking
context</em><a name="INDEX-1104" />. This means that all of the
element's descendants have their own stacking order, relative
to the ancestor element. This is very similar to the way that
elements establish new containing blocks. Given the following styles,
you would see something like <a href="ch09_05.htm">Figure 9-29</a>:
</p>

<blockquote><pre class="code">P.one {position: absolute; top: 0; left: 0; width: 50%; height: 10em;
  z-index: 10;}
P.two {position: absolute; top: 30%; left: 25%; width: 50%; height: 10em;
  z-index: 7;}
P.three {position: absolute; top: 60%; left: 0; width: 50%; height: 10em;
  z-index: -1;}
P.one B {position: relative; left: 15em; top: 0; z-index: -404;}
P.two B {position: relative; left: 3em; top: -1em; z-index: 36;}
P.two EM {position: relative; top: 4em; left: 7em; z-index: -42;}
P.three B {position: relative; top: 0; left: 3em; z-index: 23;}</pre></blockquote>

<a name="css-CHP-9-FIG-29" /><div class="figure"><img height="410" alt="Figure 9-29" src="figs/css.0929.gif" width="336" /></div><h4 class="objtitle">Figure 9-29. An example of positioning and z-index</h4>

<p>Note where the relatively positioned inline elements fall in the
stacking order. Each of them is correctly positioned with respect to
its parent element, of course. However, pay close attention to the
children of <tt class="literal">P.two</tt>. While the <tt class="literal">B</tt>
element is in front of its parent, and the <tt class="literal">EM</tt> is
behind, both of them are in front of <tt class="literal">P.three</tt> !
This is because the <tt class="literal">z-index</tt> values of
<tt class="literal">36</tt> and <tt class="literal">-42</tt> are relative to
<tt class="literal">P.two</tt>, but not to the document in general. In a
sense, <tt class="literal">P.two</tt> and all of its children share a
<tt class="literal">z-index</tt> of <tt class="literal">7</tt>, while having
their own mini-<tt class="literal">z-index</tt> within the context of
<tt class="literal">P.two</tt>.
</p>

<p>If you want another way to look at this, it's as though the
<tt class="literal">B</tt> element has a <tt class="literal">z-index</tt> of
<tt class="literal">7,36</tt> while the <tt class="literal">EM</tt> 's
value is <tt class="literal">7,-42</tt>. These are merely implied
conceptual values; they don't conform to anything in the
specification. However, such a system helps to illustrate how the
overall stacking order is determined. Consider:
</p>

<blockquote><pre class="code">P.one        10
P.one B      10,-404
P.two B      7,36
P.two        7
P.two EM     7,-42 
P.three B   -1,23
P.three     -1</pre></blockquote>

<p>This conceptual framework precisely describes the order in which
these elements would be stacked. While the descendants of an element
can be above or below that element in the stacking order, they are
all grouped together with their ancestor.
</p>

<p>There remains one more value to examine. The specification has this
to say about the default value, <tt class="literal">auto</tt>:
</p>


<p>The stack level of the generated box in the current stacking context
is the same as its parent's box. The box does not establish a
new local stacking context. (CSS2: 9.9.1)
</p>


<p>What this seems to mean is that user agents are free to use whatever
stacking algorithm they already use in laying out a document.
However, it can also mean that any element with
<tt class="literal">z-index:</tt> <tt class="literal">auto</tt> can be treated as
though it is set to <tt class="literal">z-index:</tt> <tt class="literal">0</tt>.
Unfortunately, the CSS2 specification is not entirely clear on this
point, so there may be inconsistencies between different user
agents.<a name="INDEX-1105" /> <a name="INDEX-1106" />
</p>



<hr width="684" align="left" />
<div class="navbar"><table width="684" border="0"><tr><td align="left" valign="top" width="228"><a href="ch09_04.htm"><img alt="Previous" border="0" src="../gifs/txtpreva.gif" /></a></td><td align="center" valign="top" width="228"><a href="index.htm"><img alt="Home" border="0" src="../gifs/txthome.gif" /></a></td><td align="right" valign="top" width="228"><a href="ch09_06.htm"><img alt="Next" border="0" src="../gifs/txtnexta.gif" /></a></td></tr><tr><td align="left" valign="top" width="228">9.4. Fixed Positioning</td><td align="center" valign="top" width="228"><a href="index/index.htm"><img alt="Book Index" border="0" src="../gifs/index.gif" /></a></td><td align="right" valign="top" width="228">9.6. Summary</td></tr></table></div>
<hr width="684" align="left" />

<img alt="Library Navigation Links" border="0" src="../gifs/navbar.gif" usemap="#library-map" />
<p><font size="-1"><a href="copyrght.htm">Copyright &copy; 2002</a> O'Reilly &amp; Associates. All rights reserved.</font></p>

<map name="library-map"><area href="../index.htm" coords="0,1,78,93" shape="rect" /><area href="../wdesign/index.htm" coords="80,2,155,96" shape="rect" /><area href="../xhtml/index.htm" coords="158,0,263,97" shape="rect" /><area href="../audio/index.htm" coords="265,1,335,97" shape="rect" /><area href="index.htm" coords="338,1,434,93" shape="rect" /><area href="../action/index.htm" coords="439,0,540,102" shape="rect" /><area href="../infoarch/index.htm" coords="544,0,685,102" shape="rect" /></map>

</body></html>