<html><head><title>Advanced RealAudio applications (Designing Web Audio)</title><link rel="stylesheet" type="text/css" href="../style/style1.css" />

<meta name="DC.Creator" content="Josh Beggs and Dylan Thede" /><meta name="DC.Format" content="text/xml" scheme="MIME" /><meta name="DC.Language" content="en-US" /><meta name="DC.Publisher" content="O'Reilly &amp; Associates, Inc." /><meta name="DC.Source" scheme="ISBN" content="1565923537L" /><meta name="DC.Subject.Keyword" content="stuff" /><meta name="DC.Title" content="Designing Web Audio" /><meta name="DC.Type" content="Text.Monograph" />

</head><body bgcolor="#ffffff">

<img alt="Book Home" border="0" src="gifs/smbanner.gif" usemap="#banner-map" /><map name="banner-map"><area shape="rect" coords="1,-2,616,66" href="index.htm" alt="Designing Web Audio" /><area shape="rect" coords="629,-11,726,25" href="jobjects/fsearch.htm" alt="Search this book" /></map>

<div class="navbar"><table width="684" border="0"><tr><td align="left" valign="top" width="228"><a href="ch06_03.htm"><img alt="Previous" border="0" src="../gifs/txtpreva.gif" /></a></td><td align="center" valign="top" width="228"><a href="index.htm">Designing Web Audio</a></td><td align="right" valign="top" width="228"><a href="ch06_05.htm"><img alt="Next" border="0" src="../gifs/txtnexta.gif" /></a></td></tr></table></div>
<hr width="684" align="left" />


<h2 class="sect1">6.4. Advanced RealAudio applications</h2>

<p>Now that you are familiar with broadcasting prerecorded content,
let's explore some of the advanced capabilities of the
RealSystem, such as synchronizing media presentations, indexing
regions of a large file, broadcasting through firewalls, archiving
and delivering RealMedia content with a database, creating RealFlash
content, and broadcasting over an Intranet.
</p>

<a name="sound-CHP-6-SECT-4.1" /><div class="sect2">
<h3 class="sect2">6.4.1. Broadcasting through firewalls</h3>

<p>When RealAudio first hit the market, many listeners behind corporate
<a name="INDEX-795" />
<a name="INDEX-796" />firewalls
could not receive
<a name="INDEX-797" />RealAudio content because
all UDP traffic was blocked from their networks. RealAudio, similar
to other streaming media formats, uses UDP for bandwidth efficiency.
UDP is more efficient because it streams multimedia content without
tediously checking for transmission errors. Therefore, in congested
networks, UDP tends to step on TCP traffic. TCP, on the other hand,
is designed to throttle back during congestion. Primarily for this
reason, most firewalls block UDP traffic.
</p>

<p>Thus, RealNetworks has incorporated <a name="INDEX-798" />TCP
and <a name="INDEX-799" />HTTP
streaming in RealSystem 5.0 for broadcasting through firewalls. TCP
and HTTP are better than UDP for broadcasting through firewalls since
TCP ports are generally open to allow FTP, HTTP, and Telnet traffic
through, and HTTP ports are usually always open.
</p>

<p>Make sure your RealServer is not set to <a name="INDEX-800" />
<a name="INDEX-801" />multicast delivery only. Enable HTTP
Cloaking in the
<a name="INDEX-802" />RealServer config file
(<em class="filename">rmserver.cfg</em><a name="INDEX-803" />
) located in the application root directory. Open the file and change
the value with a text editor.<a name="INDEX-804" />HTTP Cloaking disguises a UDP stream
with HTTP headers. With HTTP Cloaking enabled, a player will try to
connect with UDP first, then TCP, and finally HTTP Cloaking if the
first two methods fail to connect. For live events, RealNetworks uses
the following protocols in the following order, which is also the
order of decreasing efficiency:
</p>

<ol><li>
<p>Multicast IP </p>
</li><li>
<p>UDP </p>
</li><li>
<p>TCP </p>
</li><li>
<p>HTTP </p>
</li></ol>
<p>The process works as follows: </p>

<ol><li>
<p>First, the user, either via the plug-in or a
<em class="filename">.ram</em> file, is directed to the RealServer via a
TCP connection from within the firewall to the RealServer.
</p>
</li><li>
<p>Next, the server, via a TCP connection, sends the stream information
(header, if you will) to the player.
</p>
</li><li>
<p>Third, the server sends the stream to the client via the most
efficient mechanism, as noted above. If no data is received after a
specific amount of time, usually two seconds for the RealPlayer, the
player notifies the server and the server streams the content via the
next most efficient protocol. This continues until there is no
connectivity even via HTTP. The player then gives an error message
and stops trying.
</p>
</li></ol>
<p>If you need to stream audio from behind a firewall to the public
Internet, you have two options:
</p>

<ul><li>
<p>Place your server outside the firewall or configure the firewall to
ignore traffic to and from your individual IP address.
</p>
</li><li>
<p>Configure the firewall to map a port or address through the firewall
to your server's IP address. You can pass
<a name="INDEX-805" />PNM traffic
through a firewall using a proxy kit available at <a href="../../../../../../www.real.com/firewall/index.html">http://www.real.com/firewall/index.html</a><em class="emphasis">.</em>

</p>
</li></ul>
<a name="sound-CHP-6-SIDEBAR-10" /><blockquote><table border="1" cellpadding="6"><tr><td>
<h4 class="objtitle">Broadcasting to a corporate LAN (Intranets) </h4>
&nbsp;
<p>For
<a name="INDEX-806" />
<a name="INDEX-807" />
<a name="INDEX-808" /> <a name="INDEX-809" />broadcasting audio over an Intranet
instead of the public Internet, you need to take extra steps to
prevent network congestion. Nick DelRegno, engineer for MCI
Enterprise Information Systems, outlines the best method for
broadcasting over an Intranet:
</p>
&nbsp;
<p>To broadcast RealAudio or RealVideo, configure the LAN/MAN/WAN for
<a name="INDEX-810" />IP
Multicast. By using IP Multicast for the live broadcasts, you can hit
every employee with minimal impact on the network. With the advent of
IP Multicast-aware Ethernet Switches, you can even control the impact
of Multicast on your flat LAN segments.
</p>
&nbsp;
<p><a name="INDEX-811" />MCI Enterprise Information Systems has
had very good success with multicasting 20 Kbps to 300Kbp RealAudio
and RealVideo streams across their network. The only problems
encountered have been on busy LAN segments and on Token Ring LANs.
</p>
&nbsp;
<p>RealNetworks also supports unicast (UDP, TCP, and HTTP) streaming so
that anyone on a non-multicast-enabled portion of the network, such
as dialup, can access the content via a unicast connection. With the
deployment of Resource Reservation protocols and IP Quality of
Service, busy LANs should become less of an issue.
</p>
&nbsp;
<p>MCI Enterprise Information Systems has deployed several servers to
handle the load, one with redundancy for live events and several
others to replicate content and distribute the load for archived
content. "We don't do any splitting because of the nature
of our network; however, for LANs connected by thin pipes, this is a
nice option. Our servers are located centrally within our Intranet so
that the encoder can sit anywhere, even in very remote locations
connected via ISDN dialup."
</p>
&nbsp;
<p>For <a name="INDEX-812" />security, Nick set up specific
multicast address ranges, which get blocked at MCI's boundary
routers. He also set relatively low <a name="INDEX-813" /> <a name="INDEX-814" />TimeToLive (TTL) settings
on MCI's multicasts. This helps prevent multicast leakage onto
the public Internet, yet allows them to multicast globally.
</p>
</td></tr></table></blockquote>

</div>
<a name="sound-CHP-6-SECT-4.2" /><div class="sect2">
<h3 class="sect2">6.4.2. Creating custom player controls </h3>

<p>The <a name="INDEX-815" /> <a name="INDEX-816" />RealSystem provides three basic
playback <a name="INDEX-817" />
<a name="INDEX-818" /> <a name="INDEX-819" />choices:
</p>

<ul><li>
<p>Bypass the player interface so that your audio content will begin
playing immediately when a user enters a web page.
</p>
</li><li>
<p>Build the player interface directly into your web page. </p>
</li><li>
<p>Use the standalone RealPlayer controls.</p>
</li></ul>
<p>Embedding controls into your web page is a visually more attractive
option than having another window pop up in front of your content.
Individual interactive components, such as a play button or volume
slider, can be placed anywhere on your web page, just as you would
place an image using the <tt class="literal">&lt;IMG&gt;</tt> tag in HTML.
Here is the HTML source for the embedded
<a name="INDEX-820" />player
controls used in Raspberry Media's Radio CounterCulture page
(<a href="../../../../../../www.counterculture.com/">http://www.counterculture.com</a>),
as shown in <a href="ch06_04.htm">Figure 6-8</a>:
</p>

<blockquote><pre class="code">&lt;OBJECT ID="RVOCX" CLASSID="CLSID:CFCDAA03-8BE4-11CF-B84B-
    0020AFBBCCFA" WIDTH="350" HEIGHT="100" BORDER="0"
    NAME="player"&gt;
&lt;PARAM NAME="SRC" VALUE="/ram/radio/003-y2k.ram"&gt;
&lt;PARAM NAME="CONTROLS" VALUE="All"&gt;
&lt;PARAM NAME="CONSOLE" VALUE="cons"&gt;
&lt;EMBED SRC="/ram/radio/003-y2k.ram"
    TYPE="audio/x-pn-realaudio-plugin" WIDTH="350" HEIGHT="100"
    CONTROLS="All" CONSOLE="cons" BORDER="0" NAME="player"&gt;&lt;/EMBED&gt;
&lt;/OBJECT&gt;</pre></blockquote>

<a name="sound-CHP-6-FIG-8" /><div class="figure"><img height="355" alt="Figure 6-8" src="figs/aud.0608.gif" width="400" /></div><h4 class="objtitle">Figure 6-8. The Radio CounterCulture page with embedded RealPlayer controls </h4>

<p>The drawback to using embedded controls is that the audio will stop
playback when a user leaves the site. Many listeners prefer to listen
to audio while they view other web sites. If you want to cater to the
"listen while they surf" crowd, you will have to hide the
player by embedding the player in a zero height or width frame or by
simply not embedding the player in the web page. By hiding the player
in a zero height or width frame, you can continue to play the content
until the user manually enters a new URL or until a
<tt class="literal">_top</tt> or <tt class="literal">_parent</tt> frame target is
used.
</p>

<a name="sound-CHP-6-SECT-4.2.1" /><div class="sect3">
<h3 class="sect3">6.4.2.1. Creating custom controls with JavaScript</h3>

<p>With <a name="INDEX-821" />JavaScript, you can
use custom graphics to build your own RealPlayer console with unique
start, stop, and play buttons. The following JavaScript example, by
Nick DelRegno from <a name="INDEX-822" />MCI Enterprise Information Systems, is
designed to create a RealMedia interface with customized GIF or JPEG
start and stop <a name="INDEX-823" />video playback buttons.
(RealSystem G2 offers more customizable controls besides start, stop,
and pause, such as volume control.)
</p>

<p>Here is the JavaScript and appropriate <tt class="literal">embed</tt> tags
necessary to create the customized RealPlayer console:
</p>

<blockquote><pre class="code">&lt;head&gt;
&lt;script language=JavaScript&gt;
function PlayClip(clipname)
{
        //alert(clipname);
        if (navigator.appName == "Netscape") {
                document.video.DoStop(); 
                document.video.SetSource(clipname);
                document.video.DoPlayPause();
        }
        else
        {
                video1.DoStop(); 
                video1.Source=clipname;
                video1.DoPlayPause();
        }
}
&lt;/script&gt;
&lt;/head&gt;

&lt;OBJECT ID="video1"
CLASSID="clsid:CFCDAA03-8BE4-11cf-B84B-0020AFBBCCFA"
ALIGN="baseline" BORDER="0" WIDTH="240" HEIGHT="180"&gt;
&lt;PARAM NAME="console" VALUE="Clip1"&gt;
&lt;PARAM NAME="controls" VALUE="imagewindow"&gt;
&lt;PARAM NAME="autostart" VALUE="false"&gt;
   &lt;EMBED SRC="empty.rpm" ALIGN="baseline" BORDER="0"
WIDTH="240" HEIGHT="180" NAME="video" CONTROLS="imageWindow"
CONSOLE="Clip1" AUTOSTART="false"&gt;
&lt;/OBJECT&gt;

&lt;A IMG="image.gif" onMouseOver="PlayClip('pnm://server_name/
filename.rm')"&gt;&lt;IMG SRC="imagelocation/start.gif" BORDER="0" 
WIDTH="80" HEIGHT="40"&gt;&lt;/a&gt;

&lt;A onMouseOver="PlayClip('pnm://server_name/filename.rm')"&gt;
&lt;IMG SRC="image_location/start.gif" BORDER="0" WIDTH="80"
HEIGHT="40"&gt;
&lt;/a&gt;
&lt;A onClick="PlayClip('pnm://server_name/filename.rm')"&gt;
&lt;IMG SRC="image_location/start.gif" BORDER="0" WIDTH="80" 
HEIGHT="40"&gt;
&lt;/A&gt;</pre></blockquote>

<p>The "Stop, Load Clip, and Start Video" function that
JavaScript placed within the header tag allows you to activate the
playback of audio and video content based on a user action such as a
mouseover or mouseclick. It can also be used with additional
scripting to launch audio or video playback based on the time of day,
day of the week, or season. You could also use a variation of the
code to build a virtual radio or jukebox. It is best to define this
function in the header tag.
</p>

<p>For an explanation of the JavaScript code, read the descriptions in
<a href="ch06_04.htm">Table 6-6</a>.
</p>

<a name="sound-CHP-6-SIDEBAR-11" /><blockquote><table border="1" cellpadding="6"><tr><td>
<h4 class="objtitle">RealAudio playback with a transparent plug-in</h4>
&nbsp;
<p>It may be preferable to have automatic audio playback when a user
clicks on a page without the RealPlayer coming to the foreground. For
example, if you want to include an optional audio commentary to
accompany a web tour, you can use hidden frames to embed a
transparent RealAudio plug-in. This allows the audio to play back
across several pages without bringing the player controls to the
foreground. If you have a "hidden" frame page, create a
link or a button that retrieves a web page into that hidden frame
containing the RealAudio plug-in set to autoplay. The user can then
navigate through several pages while the RealAudio cliptd is playing.
</p>
&nbsp;
<p>One of the last steps before you broadcast your audio is to determine
how you want the RealPlayer controls to appear on your web site. You
can customize the
<a name="INDEX-824" />RealPlayer with the ActiveX and
Netscape plug-in controls via HTML or JavaScript. You can find a
detailed list of player plug-in methods and properties in the
DevZone, under Toolkits/SDKs.
</p>
</td></tr></table></blockquote>

<a name="sound-CHP-6-TABLE-6" /><h4 class="objtitle">Table 6-6. JavaScript code descriptions </h4><table border="1">



<tr>
<th>
<p>Code</p>
</th>
<th>
<p>JavaScript Description</p>
</th>
</tr>


<tr>
<td>
<blockquote><pre class="code">function PlayClip(clipname)     </pre></blockquote>
</td>
<td>
<p>Defines the function used to initiate playback of the clip.</p>
</td>
</tr>
<tr>
<td>
<blockquote><pre class="code">if (navigator.appName == "Netscape") {</pre></blockquote>
</td>
<td>
<p>Tests for Netscape compatibility (Netscape and IE properties are a
bit different).
</p>
</td>
</tr>
<tr>
<td>
<blockquote><pre class="code">document.video.DoStop(); </pre></blockquote>
</td>
<td>
<p>Stops current clip; does nothing if the current clip has already
stopped.
</p>
</td>
</tr>
<tr>
<td>
<blockquote><pre class="code">document.video.SetSource(clipname);</pre></blockquote>
</td>
<td>
<p>Sets the source of the player to the value passed into
<tt class="literal">clipname</tt> from the calling location
<tt class="literal">document.video</tt>.
</p>
</td>
</tr>
<tr>
<td>
<blockquote><pre class="code">document.video.DoPlayPause();   </pre></blockquote>
</td>
<td>
<p>Starts the video (since we stopped it before). If used elsewhere when
the video is running, it pauses the video.
</p>
</td>
</tr>
<tr>
<td>
<blockquote><pre class="code">}
else</pre></blockquote>
</td>
<td>
<p>Non-Netscape browser assumed to be IE (for Internet use, further
testing may be required; for Intranet use, limited browser
assumptions are valid).
</p>
</td>
</tr>
<tr>
<td>
<blockquote><pre class="code">{
video1.DoStop();        </pre></blockquote>
</td>
<td>
<p>Stops current clip; does nothing if the current clip has already
stopped. Note slight difference from above.
</p>
</td>
</tr>
<tr>
<td>
<blockquote><pre class="code">video1.Source=clipname; </pre></blockquote>
</td>
<td>
<p>Sets the source of the player to the value passed into
<tt class="literal">clipname</tt> from calling location.
</p>
</td>
</tr>
<tr>
<td>
<blockquote><pre class="code">video1.DoPlayPause();   </pre></blockquote>
</td>
<td>
<p>Starts the video.</p>
</td>
</tr>

</table>

<p>The object tag embedded within the body of the HTML page actually
places the player on a web page:
</p>

<blockquote><pre class="code">&lt;OBJECT ID="video1"
CLASSID="clsid:CFCDAA03-8BE4-11cf-B84B-0020AFBBCCFA" 
ALIGN="baseline" BORDER="0" WIDTH="240" HEIGHT="180"&gt;
&lt;PARAM NAME="console" VALUE="Clip1"&gt;
&lt;PARAM NAME="controls" VALUE="imagewindow"&gt;
&lt;PARAM NAME="autostart" VALUE="false"&gt;
   &lt;EMBED SRC="empty.rpm" ALIGN="baseline" BORDER="0"
WIDTH="240" HEIGHT="180" NAME="video" CONTROLS="imageWindow" 
CONSOLE="Clip1" AUTOSTART="false"&gt;
&lt;/OBJECT&gt;</pre></blockquote>

<p>The image tag placed within the body of the HTML page acts like a
normal hyperlink, except that when clicked the browser executes the
JavaScript function instead of changing page location:
</p>

<blockquote><pre class="code">&lt;A IMG="image.gif" 
onMouseOver="PlayClip('pnm://server_name/filename.rm')"&gt;
&lt;IMG SRC="imagelocation/start.gif" BORDER="0" width="80"
height="40"&gt;&lt;/A&gt;</pre></blockquote>

<p>The mouseover tag can also be accomplished with an
<tt class="literal">onMouseOver</tt> or <tt class="literal">onClick</tt> event
handler. <tt class="literal">onMouseOver</tt> activates the player when the
mouse is over the link or the link is clicked; however, it is not
widely used this way. It is more often used with
<tt class="literal">onClick</tt>. Here is the
<tt class="literal">onMouseOver</tt> version:
</p>

<blockquote><pre class="code">&lt;A onMouseOver="PlayClip('pnm://server_name/filename.rm')"&gt;
&lt;IMG SRC="image_location/start.gif" BORDER="0" WIDTH="80" 
HEIGHT="40"&gt;
&lt;/A&gt;
&lt;A onClick="PlayClip('pnm://server_name/filename.rm')"&gt;
&lt;IMG SRC="image_location/start.gif" BORDER="0" WIDTH="80" 
HEIGHT="40"&gt;&lt;/a&gt;</pre></blockquote>

<p>A popular way to use a mouseover image to play the audio file is to
use a picture of a CD player. Use an image map to define the areas
containing the play button and the stop button. Use the JavaScript
stop and start commands to activate those regions.
</p>

</div>

<a name="sound-CHP-6-SECT-4.2.2" /><div class="sect3">
<h3 class="sect3">6.4.2.2. Note of caution</h3>

<p>This script should work fine for Internet Explorer 3.x or higher and
Netscape 4.x and higher. With older
<a name="INDEX-825" />browser versions, you may see
JavaScript errors and other anomalies, especially if you embed the
player within a table.
</p>

<p>Internet Explorer understands the <tt class="literal">&lt;object&gt;</tt>
with the <tt class="literal">clsid</tt> as an ActiveX object. Since the
second embed is within the <tt class="literal">&lt;object&gt;</tt> tag and
has no bearing on the ActiveX object, IE ignores it. Netscape
understands <tt class="literal">embed</tt> and not
<a name="INDEX-826" />ActiveX objects. Netscape
understands the <tt class="literal">&lt;object&gt;</tt> tag, but not the
identifier, so it ignores it. Instead, Netscape uses the information
within the <tt class="literal">&lt;embed&gt;</tt> tag.
</p>

<p>Note that the embed text refers to an
<em class="filename">empty.rpm</em><a name="INDEX-827" /> file. This is truly an empty file created
with a simple text editor like Notepad. This is necessary because
Netscape uses the MIME information associated with a file extension
to determine which plug-in to load. ActiveX objects explicitly define
which ActiveX control is to be used. Netscape must rely on the web
server to send the MIME information. Since this
<tt class="literal">embed</tt> tag is part of a dynamic page, which can
load any number of source files, you <a name="INDEX-828" /> <a name="INDEX-829" /> <a name="INDEX-830" />do not want to explicitly define
one <a name="INDEX-831" />source.
</p>

<p>Therefore, the <em class="filename">empty.rpm</em> allows for the passing
of the appropriate MIME information without passing any other
information. If you want a default source, you can place a
<em class="emphasis">pnm://servername/filename.rm</em>  statement within
the <em class="emphasis">.rpm</em> file just as you would with a
<em class="emphasis">.ram</em> metafile. <a name="INDEX-832" />
</p>

</div>

<a name="sound-CHP-6-SECT-4.2.3" /><div class="sect3">
<h3 class="sect3">6.4.2.3. Embedding custom player controls with RealPublisher</h3>

<p>One of the easiest
<a name="INDEX-833" />ways to embed
<a name="INDEX-834" />custom player controls, such as
play, stop, and pause buttons, into a web page is to use the
RealPublisher to generate the necessary HTML. The publish function in
the <a name="INDEX-835" />RealPublisher grabs the
<em class="filename">.ram</em>, <em class="filename">.rm</em>, and HTML files,
edits the links in the HTML and the <em class="filename">.ram </em>file,
and sends them to their respective locations on your web server. Once
you have generated the appropriate HTML with the RealPublisher, you
can copy it to any other web authoring application such as
<a name="INDEX-836" />Macromedia Dreamweaver. If you
upload your new page from another editor, make sure to update the
links to the audio files. When you have finished editing your web
page, use the RealPublisher to upload the page to the server or to
manually change the link names in the RealPublisher-generated HTML
yourself.
</p>

<p>To properly upload RealPublisher-generated player controls to your
web server, use one of three methods:
</p>

<ul><li>
<p>Create your HTML in the RealPublisher, and then publish it to the
server.
</p>
</li><li>
<p>Create your HTML in the RealPublisher, copy and paste it into another
HTML editor, and then use RealPublisher to upload the finished web
page.
</p>
</li><li>
<p>Create your HTML in the RealPublisher, copy and paste the HTML into
your HTML editor, and then manually edit the links in the
RealPublisher-generated HTML to point to the server. Once you have
manually changed the links, upload the page with your favorite HTML
editor.
</p>
</li></ul>
</div>

<a name="sound-CHP-6-SECT-4.2.4" /><div class="sect3">
<h3 class="sect3">6.4.2.4. Playing clips with a hidden control or plug-in</h3>

<p>If you want to play RealAudio or RealVideo clips without having a
visible plug-in control, hide the
<a name="INDEX-837" />control by embedding a plug-in in a
page that has its size set to <tt class="literal">width=2</tt>
<tt class="literal">height=0</tt>, and no image will appear on your web
page. You can control the plug-in with JavaScript. This example works
in both Netscape and Internet Explorer:
</p>

<blockquote><pre class="code">&lt;script Language=JavaScript&gt; 
function playSource() 
{if (navigator.appName == "Netscape") 
{document.javaPlug1.DoPlayPause();} 
else 
{RAOCX.DoPlayPause();} 
}
&lt;/script
&lt;A HREF="#" onClick="playSource()"&gt;
&lt;IMG SRC="button.gif"&gt;&lt;/A&gt;
&lt;OBJECT ID="RAOCX" CLASSID="clsid:CFCDAA03-8BE4-11cf-B84B-
0020AFBBCCFA" WIDTH="2" HEIGHT="0"&gt; 
&lt;PARAM NAME="SRC" VALUE="pnm://audio.real.com/welcome.rm"&gt; 
&lt;PARAM NAME="CONTROLS" VALUE="PlayButton"&gt;
&lt;embed src="start.rpm" WIDTH="2" HEIGHT="0" 
CONTROLS="PlayButton" NAME="javaPlug1"&gt; 
&lt;/OBJECT&gt;</pre></blockquote>

</div>
</div>
<a name="sound-CHP-6-SECT-4.3" /><div class="sect2">
<h3 class="sect2">6.4.3. Indexing RealMedia clips: creating a table of contents </h3>

<p><a name="INDEX-838" /> <a name="INDEX-839" />Use <a name="INDEX-840" />an index to make repeat
listening of a longer-playing file easier or to point listeners to
important content items within an audio clip. An index prevents you
from having to break up a contiguous audio file into smaller parts.
Short clips do not increase server performance. While short files
would make playback more convenient for the listener who wants to
jump from section to section, they are a hassle for those who want to
listen to the whole program at once. An index is the perfect
solution: it helps listeners get the specific information they want
and simplifies encoding and cataloging for the developer. With an
index, you can present one stream while giving users access to points
within the stream.
</p>

<p>For example, a one-hour music CD or instructional video could be
indexed by utilizing the start and stop tags within a
<em class="filename">.ram</em> or <em class="filename">.rpm</em> file. To
create a <em class="emphasis">.ram</em> file for indexing a RealMedia
clip, simply add the start and stop parameters to the URL in your
metafile as shown below:
</p>

<blockquote><pre class="code">pnm://servername.com/yourfile.rm?start=2:23.4&amp;end=2:59.2</pre></blockquote>

<p>Most of the time, these files are preset when the clips are
published, but if you enter your start and stop information in a
database, you can generate the <em class="filename">.ram</em> file on the
fly. By doing this, you can place a table of contents on the page
with each topic pointing to a <em class="filename">.ram</em> file with the
appropriate start and stop information. This technique gives you the
ability to use one file to provide full-length playback or random
(shuffle) play.
</p>

<p>Another common technique for indexing files is to use CGI or
JavaScript to generate a metafile using a timestamp that you pass to
it. The following example is a
<a name="INDEX-841" />JavaScript function and the call to
the function, provided by Steve McMillen, senior systems engineer for
RealNetworks. This example starts a RealVideo or RealAudio clip at a
specified time.
</p>

<p>In the <tt class="literal">head</tt> part of your HTML document, insert the
<tt class="literal">&lt;script&gt;</tt> tag with the following function:
</p>

<blockquote><pre class="code">&lt;script language="JavaScript"&gt;
 function startClip(Clip,Start,End,Title,Author,Copyright) {
// uncomment next two lines or set server in HREF below
// server = 'pnm://yourRealServer.com/'
// Clip = server + Clip;
  if(Start == null) Start = '0';
  Clip = Clip + "?start=" + '"' + Start + '"';
  if(End != null) {
    Clip = Clip + "&amp;end=" + '"' + End + '"';
  }
  if(Title != null) {
    Clip = Clip + "&amp;title=" + '"' + Title + '"';
  }
  if(Author != null) {
    Clip = Clip + "&amp;author=" + '"' + Author + '"';
  }
  if(Copyright != null) {
    Clip = Clip + "&amp;copyright=" + '"' + Copyright + '"';
  }
// uncomment following line for testing: 
// alert("URL: " + Clip);
  if (navigator.appName == "Netscape") {
    document.VideoObjName.DoStop();
    document.VideoObjName.SetSource(Clip);
    document.VideoObjName.DoPlayPause();
    } else {
    VideoObjName.DoStop();
    VideoObjName.Source= Clip;
    VideoObjName.DoPlayPause();
  }
 }
 &lt;/script&gt;</pre></blockquote>

<p>This function pastes together the necessary URL to play a clip, stops
the previous clip (if any), sets the source of the plug-in to the new
clip, and starts playing at the indicated start time. The server
location is included in the call to the function. You can also
hardcode the function itself at the indicated location within the
function. The only required parameter is the
<tt class="literal">clipname</tt>. Use <tt class="literal">'null'</tt> (notice
the single quotes) if there is no value for an argument.
<tt class="literal">clipname</tt>includes the
complete address and filename.
</p>

<p>At the minimum, the plug-in should look something like this:</p>

<blockquote><pre class="code">&lt;embed name="VideoObjName" type="audio/x-pn-realaudio-plugin"
width="176" height="144" controls="ImageWindow"&gt;</pre></blockquote>

<p>This code will work in both IE 3.0 and greater and Netscape 2.0 and
greater. It is strongly recommended that you not put the
<tt class="literal">&lt;embed&gt;</tt> tag within a table for
cross-platform compatibility.
</p>

<p>When you link to the content, call the <tt class="literal">startClip</tt>
function, as follows:
</p>

<blockquote><pre class="code">&lt;br&gt; &lt;A HREF="JavaScript:startClip( 'pnm://your.realserver.com/
glasr56.rm', '00:00:27.0', '00:00:54.1', null, null, null)"&gt; TimeN 
&lt;/A&gt;</pre></blockquote>

<p>Or you can use an image and call JavaScript using the
<tt class="literal">onClick</tt> function, as follows:
</p>

<blockquote><pre class="code">&lt;IMG SRC="button.jpg" onClick=startClip(video1.rm, 00:02:37.0,
    00:03:34.1, null, null, null)&gt;</pre></blockquote>

<p>The downside to this solution is that you are hardcoding <a name="INDEX-842" />your times into
the HTML.
</p>

</div>
<a name="sound-CHP-6-SECT-4.4" /><div class="sect2">
<h3 class="sect2">6.4.4. Creating RealFlash content </h3>

<p><a name="INDEX-843" />RealFlash is <a name="INDEX-844" />a hybrid file format
utilizing the bandwidth-friendly vector animation and image
compression of Macromedia Flash with the reliability and superior
streaming efficiency of RealNetwork's RealServer. Flash is
better suited for short interactive event sounds or sound effects
such as buttons and transitions that call for immediate playback.
Flash does not reliably stream long-playing audio files or feature
sophisticated server-side applications such as bandwidth negotiation,
multicasting, or splitting. In contrast, RealMedia is suited for
broadcasting long-playing media files over short interactive sounds.
Thus the marriage of the two formats into RealFlash results in the
ideal solution for interactive presentations with audio files of
several minutes or longer in length.
</p>

<p>To broadcast RealFlash, you need to purchase an extra license from
RealNetworks. For specific pricing information, visit <a href="../../../../../../www.real.com/">http://www.real.com</a>. For more information
about Flash, see <a href="ch10_01.htm">Chapter 10, "MIDI: Quick and Easy Audio for the Web"</a>.
</p>

<p>For some of the most cutting edge RealFlash content, such as riding a
motor scooter through Montmartre on a virtual web tour of Paris
(shown in <a href="ch06_04.htm">Figure 6-9</a>), visit <a href="../../../../../../www.shockwave.com/">http://www.shockwave.com/</a>.
</p>

<a name="sound-CHP-6-FIG-9" /><div class="figure"><img height="313" alt="Figure 6-9" src="figs/aud.0609.gif" width="338" /></div><h4 class="objtitle">Figure 6-9. The Club Internet RealFlash motor scooter tour of Montmartre in Paris with a RealVideo window embedded in a Flash animation screen</h4>

<p>To create your own RealFlash content, build a multimedia presentation
in Macromedia Flash, and then export the animation as a Shockwave
movie file and the streaming audio portion as a separate AVI video
file. Use the RealNetworks tools to convert the Flash video file into
the RealAudio format. Your final RealFlash presentation will consist
of two files:
</p>

<dl>
<dt><b><a name="INDEX-845" />Shockwave Flash file <em class="filename">(.swf</em> )</b></dt>
<dd>
<p><a name="INDEX-846" />Created with the
Flash Authoring tool
</p>
</dd><dt><b>RealAudio file (<em class="filename">.rm</em>)</b></dt>
<dd>
<p>Created with <a name="INDEX-847" />RealEncoder
or RealPublisher
</p>
</dd>

</dl>

<p>If you are using RealSystem G2, read the RealFlash G2 section in
<a href="ch07_01.htm">Chapter 7, "Designing Multimedia Presentations with SMIL and RealSystem G2"</a>.
</p>

<p>To properly export your
<a name="INDEX-848" />Flash animation file, follow these
steps:
</p>

<ol><li>
<p>Open the Flash file in Macromedia Flash, and select File <img height="15" alt="Figure 6.4.4" src="figs/U2192.gif" width="19" />
Export Movie.
</p>
</li><li>
<p>In the dialog box, choose <em class="filename">.swf</em> as the file type.
Make sure to type the <em class="filename">.swf</em> extension at the end
of the filename before clicking OK.
</p>
</li><li>
<p>From the Export Shockwave Flash dialog box, set
<a name="INDEX-849" />JPEG quality to 50 or
less.
</p>
</li><li>
<p>From the Audio Steam and Audio Event drop-down boxes, choose Disable
to turn off the Flash Audio tracks.
</p>
</li><li>
<p>Click OK to create the animation-only Shockwave file. </p>
</li></ol>
<p>To create a RealAudio file, follow these steps:</p>

<ol><li>
<p>With the same Flash file still open, select File <img height="15" alt="Figure 6.4.4" src="figs/U2192.gif" width="19" /> Export Movie.
</p>
</li><li>
<p>In the dialog box, choose AVI as the file type. Make sure to use the
<em class="filename">.avi</em> file extension in your filename.
</p>
</li><li>
<p>In the Export Windows AVI dialog box, select dimension 32 x 32
regardless of the movie's true dimensions. Click OK to create
the AVI file. This minimizes file size and creation time.
</p>
</li><li>
<p>Open the RealEncoder or RealPublisher and choose File <img height="15" alt="Figure 6.4.4" src="figs/U2192.gif" width="19" /> Open
Session.
</p>
</li><li>
<p>On the Source panel, click File and add your AVI file to the list
box. On the Destination panel, click RealMedia and specify an output
filename with the <em class="emphasis">.rm</em> extension. Click OK.
</p>
</li><li>
<p>In the Templates panel, click Advanced and deselect video. Then
select an audio codec. This tells the encoder to save only the
synchronized audio portion of the AVI file.
</p>
</li><li>
<p>Enter a template name and click Save. Then click Close.</p>
</li><li>
<p>In the Templates panel, click Start to create your audio file, and
you are ready to go with RealFlash.
</p>
</li></ol>
<p>Once you have created the <em class="filename">.swf </em>and
<em class="filename">.rm</em> files necessary for a RealFlash presentation
using the RealSystem 5.0, your web pages will need to link to the
appropriate metafile, which in turn points to the DNS name or IP
address of the computer on which your RealServer and RealMedia files
are located.
</p>

<p>For a <a name="INDEX-850" />RealFlash Animation metafile, you
should combine the audio filename with the RealFlash filename by
using the plus (+) sign, as follows:
</p>

<blockquote><pre class="code">pnm://www.server1.com/hello.rm+hello.swf</pre></blockquote>

<p>One of the challenges to creating RealFlash presentations is
optimizing the
<a name="INDEX-851" />bandwidth consumption of the
separate audio and animation files. You can optimize your RealFlash
media with the
<a name="INDEX-852" />RealFlash Bandwidth Tuner. The
<a name="INDEX-853" />Bandwidth
Tuner is included in the RealFlash Content Creation Kit for Windows
and is designed to graphically analyze and adjust the bandwidth
consumption of a RealFlash presentation. The utility,
<em class="filename">swftune</em><a name="INDEX-854" />, optimizes or tunes
"audioless" Shockwave Flash files and allows the user to
compare and adjust bitrate and buffering time for an optimal balance.
</p>

<p>To broadcast RealFlash, you need a RealServer to perform the
synchronization of the RealAudio track (<em class="filename">.rm</em>) and
the Flash animation (<em class="filename">.swf </em>). Additionally, the
two datatypes are married together using a URL syntax not recognized
by <a name="INDEX-855" />web browsers<a name="INDEX-856" />:
</p>

<blockquote><pre class="code">pnm://server.domain.com/realaudio.rm+realflash.swf</pre></blockquote>

</div>
<a name="sound-CHP-6-SECT-4.5" /><div class="sect2">
<h3 class="sect2">6.4.5. Creating synchronized RealAudio presentations with RealSystem 5.0</h3>

<p>While <a name="INDEX-857" />
<a name="INDEX-858" />synchronized media is easier to create
and broadcast with the newer multimedia-enhanced RealSystem G2, many
web producers still use RealSystem 5.0 due to pre-existing
infrastructure constraints and the number of viewers with older
RealAudio plug-ins. If you are not already using RealSystem 5.0 or
are not tied to 5.0 for a compelling reason, we recommend you use
G2's <a name="INDEX-859" />SMIL,
<a name="INDEX-860" />RealPix, and
<a name="INDEX-861" />RealText to create and broadcast
synchronized media presentations.
</p>

<p>If you are using RealSystem 5.0, there are two basic options for
creating real-time multimedia presentations with fast forward,
rewind, and pause controls:
</p>

<ul><li>
<p>You can use the <a name="INDEX-862" />Cevents utility to create a binary
event file for synchronizing web pages with audio. (RealAudio 3.0)
</p>
</li><li>
<p>You can create an output presentation file using the
<em class="filename">RMMerge.exe</em><a name="INDEX-863" /> tool to synchronize RealAudio content.
(RealAudio 4.0 and 5.0)
</p>
</li></ul>
<p>Next, we look at how David Dadekian from <a name="INDEX-864" />Internet News Services used
RealAudio to produce a guided tour of the <a name="INDEX-865" />TV Guide
Entertainment Network.
</p>

<p>At an All-Star Game Fan Fest, News Corp. hosted a booth to educate
people about its media presence on the Web. News Corp. developed a
RealAudio-guided tour for large screen video display to promote their
various web site properties such as TV Guide Entertainment Network.
RealAudio, combined with the Cevents command-line tool included in
the RealServer package, provided a simple solution.
</p>

<p>By simply adding an extra Cevent text file containing all the URL
links and their time specifications into the same directory as the
<em class="emphasis">.ra</em> file, Dadekian quickly generated an
audio-visual guided tour.
</p>

<p>To create your own 12-page <a name="INDEX-866" />guided tour, follow these three
steps:
</p>

<ol><li>
<p>Create a text file containing the written display time for each page
in the tour. With a standard text editor, create an input file with a
total of 12 lines of text specifying the display time for each URL in
the tour. For example, the first line specifies the start time for
the URL, <em class="filename">http://www.tvguide.com</em>, at
seconds and the end time at 30 seconds. The next line specifies a new
URL at a start time of 31 seconds and an end time of 60 seconds, and
so forth. Repeat this process for all 12 pages. See the
<em class="filename">tvgentour.txt</em> example text file below.
</p>

<p>You can also add comment lines to the <em class="filename">.rae</em>
(RealAudio Event) file by beginning them with the
<tt class="literal">#</tt> symbol:
</p>

<blockquote><pre class="code">#u &lt;starttime&gt; &lt;endtime&gt; &lt;URL&gt;
#i &lt;starttime&gt; &lt;endtime&gt; &lt;Title&gt;
#a &lt;starttime&gt; &lt;endtime&gt; &lt;Author&gt;
#c &lt;starttime&gt; &lt;endtime&gt; &lt;Copyright&gt;
u 00:00:00.0 00:00:29.9 http://www.tvguide.com/index.sml
u 00:00:30.0 00:00:59.9 http://www.tvguide.com/tv/
u 00:01:00.0 00:01:29.9 http://www.tvguide.com/tv/listings/
u 00:01:30.0 00:01:59.9 http://www.tvguide.com/tv/listings/
    editions/ny/g10.sml
u 00:02:00.0 00:02:29.9 http://www.tvguide.com/tv/listings/
    editions/ny/quickpicks.sml
u 00:02:30.0 00:02:59.9 http://www.tvguide.com/tv/listings/
    editions/ny/search.sml
u 00:03:00.0 00:03:29.9 http://www.tvguide.com/tv/watch/
u 00:03:30.0 00:03:59.9 http://www.tvguide.com/tv/circuits/
u 00:04:00.0 00:04:29.9 http://www.tvguide.com/area52/
u 00:04:30.0 00:04:59.9 http://www.tvguide.com/soapdish/
u 00:05:00.0 00:05:29.9 http://www.tvguide.com/movies/
u 00:05:30.0 00:05:59.9 http://www.tvguide.com/movies/
    database/</pre></blockquote>

<p>This code launches a browser window external to the player. While
this code is suitable for using with the standalone RealPlayer, it
won't work when the player is embedded in a web page. This code
causes the web browser to load the synchronized web page, changing
away from the web page with the embedded Player. If the player is
embedded, embed the player in one frame and leave a large secondary
frame for the synchronized content. Point the events at the secondary
frame by appending
<tt class="literal">&amp;&amp;secondary_frame_name&amp;&amp;</tt> to the
front of the URL.
</p>
</li><li>
<p>Convert the <a name="INDEX-867" />text file to a Cevent file. To create a
RealAudio Event file, run the <em class="filename">cevent32.exe</em>
program in the <em class="filename">raencode</em> directory from a DOS
prompt (command line). For example:
</p>

<blockquote><pre class="code">cevent32 tvgentour.txt tvgentour.rae</pre></blockquote>
</li>

<li>
<p>Upload your RealAudio (<em class="filename">.ra</em>) and RealAudio Event
(<em class="filename">.rae</em>) files to the RealServer.For example,after creating the Cevent file, Dadekian uploaded a
six-minute <em class="emphasis">.ra</em> file along with the
<em class="filename">.rae</em> file to the same directory on the RealAudio
Server. When a <em class="filename">.rae</em> file is placed within the
same directory as the corresponding <em class="filename">.ra</em> file on
the RealServer, the server default setting is automatically
configured to recognize the <em class="filename">.rae</em> file
(<em class="emphasis">pnmn://av.newscorp.com/tvtour.rae</em>).
</p>
</li></ol>
<p>When a user accesses the guided tour, the server goes to play the
<em class="emphasis">tour.ra</em> file but notices there is a
<em class="emphasis">tour.rae</em> file in the same folder. As the
RealAudio Event file plays, it triggers the web browser to display
web pages at the proper times.
</p>

<p>RealAudio 5.0 uses the <a name="INDEX-868" />RMMerge tool to generate timeline files.
To create a synchronized media presentation with RealAudio 5.0,
follow these two steps:
</p>

<ol><li>
<p>Using a text editor, create an input events file specifying the
display time for each URL, title, author, or copyright.
</p>
</li><li>
<p>After creating a text version of the input events file, generate an
output presentation file. This is done with the
<em class="filename">rmmerge.exe</em> tool that comes with RealEncoder 5.0
and RealPublisher 5.0. For more information, see the RealAudio 5.0
Content Creation Guide at <a href="../../../../../../www.realaudio.com/">http://www.realaudio.com</a>.
</p>
</li></ol>
<p>To find out more about <a name="INDEX-869" /> <a name="INDEX-870" />synchronized presentations with
SMIL, read <a href="ch07_01.htm">Chapter 7, "Designing Multimedia Presentations with SMIL and RealSystem G2"</a>.
</p>

</div>
<a name="sound-CHP-6-SECT-4.6" /><div class="sect2">
<h3 class="sect2">6.4.6. Database management and tracking of RealAudio content </h3>

<p>If you have hundreds or thousands of RealMedia files,
<a name="INDEX-871" />archive management becomes a
<a name="INDEX-872" />difficult issue. One
method for archiving and managing RealAudio content is to store the
<em class="filename">.ram</em> and <em class="filename">.rpm</em> text files in
a <a name="INDEX-873" />database. Since
<em class="emphasis">.ram</em> and <em class="emphasis">.rpm</em> files are
text-based, they can be generated by Java servlets or CGI scripts.
</p>

<p>A database can also be useful for implementing a variety of
interesting applications besides simply organizing your content. For
example, with Cold Fusion from Allaire you can select a particular
<em class="filename">.ram</em> file in a tree and then execute it
according to the day of the week or a particular category selection
made by a user. Further, MCI's Nick DelRegno reports that their
database is tied to their live scheduling system to dynamically
return live events upon request and generate the appropriate
<em class="filename">.ram</em> or <em class="filename">.rpm</em> file for the
user.
</p>

<p>Larry Bouthillier, head of multimedia production at Harvard Business
School, recommends building a database of all the metadata of your
content, including title, filename and path, servername, start time,
end time, and so on. A Java servlet can then be used to piece
together a <em class="filename">.ram</em> file-type string and return it
to the browser with the appropriate MIME type header.
</p>

<p>One good thing about having all the metadata in a database is that
you can make a web form that enters new entries into the database.
According to Bouthillier, "Creating a new video clip is as easy
as filling in the filename, start and end times, and saving it to the
database. You also have the beginnings of a primitive online video
editing system."
</p>

<p>For more on Java servlets, see <em class="filename">Java Servlet
Programming</em> by Jason Hunter (O'Reilly, 1998).
</p>

</div>
<a name="sound-CHP-6-SECT-4.7" /><div class="sect2">
<h3 class="sect2">6.4.7. Load balancing</h3>

<p>If you need to <a name="INDEX-874" />deliver simultaneous streams to a
large audience, consider clustering several servers together. In
order to set up a cluster of <a name="INDEX-875" /> <a name="INDEX-876" /> <a name="INDEX-877" />RealServers to handle the load of
RealPlayer file requests, you should use a Perl script to manage load
balancing, according to Kim Ayers, software engineer for
RealNetworks. The following Perl script, written by Rob Bowden, can
be used to balance the load across multiple RealServers:
</p>

<blockquote><pre class="code">#!/usr/bin/perl
# usage: 
http://www.webserver.com/cgi-bin/load?anything.rm
#@ip = ( 'server1', 'server2', 'server2', 'server2', 'server3' );
#$content = $ENV{'QUERY_STRING'};
srand($$ + time);
$count = int(rand($#ip + 1));
print "Content-type: audio/x-pn-realaudio\n\n";
print "pnm://$ip[$count]/$content\n";</pre></blockquote>

<p>To get the Perl script up and working, follow these steps:</p>

<ol><li>
<p>Put the Perl script in the
<em class="filename">cgi-bin</em><a name="INDEX-878" /> directory of a web server.
</p>
</li><li>
<p>Make the content link point to this script with the argument being
the requested content. For example:
</p>

<blockquote class="simplelist">

<p><em class="emphasis">http://www.webserver.com/cgi-bin/load?anything.rm</em></p>

</blockquote>

<p>Note that the Perl script is called <em class="filename">load.pl</em> but
the <em class="filename">.pl</em> suffix is not included because the
RealNetwork's web server is configured to recognize Perl
scripts in its <em class="filename">cgi-bin</em>. The argument following
the "?" is the name of the content.
</p>
</li><li>
<p>When the link is hit, the script returns text that combines a server
chosen randomly from the list of servers specified in
<em class="filename">load.pl</em> with the content name.
</p>
</li></ol>
<p>In the code above, the <tt class="literal">ip</tt> array contains five
elements:
</p>

<blockquote><pre class="code">ip[1] = server1
ip[2] = server2
ip[3] = server2
ip[4] = server2
ip[5] = server3</pre></blockquote>

<p>Using this list, server1 will get 20% of the load, server2 will get
60%, and server3 will get 20%. By adding multiple entries, you can
obtain any prescribed balance.
</p>

<p>You can easily modify this Perl script to randomly select RealAudio
clips. For example, if you want visitors to your site to be able to
listen to a different audio file each time they visit a particular
page, you could modify the Perl script to randomly call 1 of 10
files.
</p>

<p>Another method of load balancing is the use of a hardware-based
solution like the <a name="INDEX-879" />Local Director from
<a name="INDEX-880" />Cisco.
For example, MCI achieves load balancing by having several servers,
whose content is fully replicated among them, sitting behind a Local
Director router. Whenever a request hits the router, it routes the
TCP connection to the machine with the lowest load. This hardware
load balancing is completely transparent to the user and allows for
greatly improved fault tolerance, reliability, and the ability to
easily take systems out of service for maintenance by migrating
traffic off of the server in question. In the wide area, MCI is using
a similar system, aptly called Distributed Director, to route the
request to the closest cluster.
</p>

<p>Now that you have explored some of the advanced capabilities of the
RealSystem, let's take <a name="INDEX-881" /> <a name="INDEX-882" /> <a name="INDEX-883" />a look at one of the more popular
<a name="INDEX-884" />advanced applications: live
broadcasting.
</p>

</div>


<hr width="684" align="left" />
<div class="navbar"><table width="684" border="0"><tr><td align="left" valign="top" width="228"><a href="ch06_03.htm"><img alt="Previous" border="0" src="../gifs/txtpreva.gif" /></a></td><td align="center" valign="top" width="228"><a href="index.htm"><img alt="Home" border="0" src="../gifs/txthome.gif" /></a></td><td align="right" valign="top" width="228"><a href="ch06_05.htm"><img alt="Next" border="0" src="../gifs/txtnexta.gif" /></a></td></tr><tr><td align="left" valign="top" width="228">6.3. Professional webcasting </td><td align="center" valign="top" width="228"><a href="index/index.htm"><img alt="Book Index" border="0" src="../gifs/index.gif" /></a></td><td align="right" valign="top" width="228">6.5. Live broadcasting with RealAudio</td></tr></table></div>
<hr width="684" align="left" />

<img alt="Library Navigation Links" border="0" src="../gifs/navbar.gif" usemap="#library-map" />
<p><font size="-1"><a href="copyrght.htm">Copyright &copy; 2002</a> O'Reilly &amp; Associates. All rights reserved.</font></p>

<map name="library-map"><area href="../index.htm" coords="0,1,78,93" shape="rect" /><area href="../wdesign/index.htm" coords="80,2,155,96" shape="rect" /><area href="../xhtml/index.htm" coords="158,0,263,97" shape="rect" /><area href="index.htm" coords="265,1,335,97" shape="rect" /><area href="../css/index.htm" coords="338,1,434,93" shape="rect" /><area href="../action/index.htm" coords="439,0,540,102" shape="rect" /><area href="../infoarch/index.htm" coords="544,0,685,102" shape="rect" /></map>

</body></html>