<html><head><title>Understanding XML DTDs (HTML &amp; XHTML: The Definitive Guide, 4th Edition)</title><link rel="stylesheet" type="text/css" href="../style/style1.css" />

<meta name="DC.Creator" content="Chuck Musciano and Bill Kennedy" /><meta name="DC.Format" content="text/xml" scheme="MIME" /><meta name="DC.Language" content="en-US" /><meta name="DC.Publisher" content="O'Reilly &amp; Associates, Inc." /><meta name="DC.Source" scheme="ISBN" content="059600026XL" /><meta name="DC.Subject.Keyword" content="stuff" /><meta name="DC.Title" content="HTML &amp; XHTML: The Definitive Guide, 4th Edition" /><meta name="DC.Type" content="Text.Monograph" />

</head><body bgcolor="#ffffff">

<img alt="Book Home" border="0" src="gifs/smbanner.gif" usemap="#banner-map" /><map name="banner-map"><area shape="rect" coords="1,-2,616,66" href="index.htm" alt="HTML &amp; XHTML: The Definitive Guide" /><area shape="rect" coords="629,-11,726,25" href="jobjects/fsearch.htm" alt="Search this book" /></map>

<div class="navbar"><table width="684" border="0"><tr><td align="left" valign="top" width="228"><a href="ch15_02.htm"><img alt="Previous" border="0" src="../gifs/txtpreva.gif" /></a></td><td align="center" valign="top" width="228"><a href="index.htm">HTML &amp; XHTML: The Definitive Guide, 4th Edition</a></td><td align="right" valign="top" width="228"><a href="ch15_04.htm"><img alt="Next" border="0" src="../gifs/txtnexta.gif" /></a></td></tr></table></div>
<hr width="684" align="left" />


<h2 class="sect1">15.3. Understanding XML DTDs</h2>

<p>To use a markup language defined with XML, you should be able to read
and understand the elements and entities found in its XML DTD. But
don't be put off: while XML DTDs are verbose, filled with
obscure punctuation, and designed primarily for computer consumption,
they are actually easy to understand once you get past all the
syntactic sugar. Remember, your brain is better at languages than any
computer is.
</p>

<p>As we said previously, an <a name="INDEX-2634" />
<a name="INDEX-2635" />XML DTD is a
collection of XML entity and element declarations and comments.
Entities are name/value pairs that make the DTD easier to read and
understand, while elements are the actual markup tags defined by the
DTD, like HTML's <tt class="literal">&lt;p&gt;</tt> or
<tt class="literal">&lt;h1&gt;</tt> tags. The DTD also describes the
content and grammar for each tag in the language. Along with the
element declarations, you'll also find
<a name="INDEX-2636" />attribute declarations that define the
attributes authors may use with the tags defined by the element
declarations.
</p>

<p>There is no required order, although the careful DTD author arranges
declarations in such a way that humans can easily find and understand
them, computers notwithstanding. The beloved DTD author includes lots
of <a name="INDEX-2637" /> <a name="INDEX-2638" />comments,
too, that explain the declarations and how they can be used to create
a document. Throughout this chapter, we use examples taken from the
XHTML 1.0 DTD, which can be found in its entirety at the W3C web
site. Although lengthy, you'll find this DTD to be
well-written, complete, and, with a little practice, easy to
understand.
</p>

<p>XML also provides for conditional sections within a DTD, allowing
groups of declarations to be optionally included or excluded by the
the DTD parser. This is useful when a DTD actually defines several
versions of a markup language; the desired version can be derived by
including or excluding appropriate sections. The XHTML 1.0 DTD, for
example, defines both the "regular" version of HTML and a
version that supports frames. By allowing the parser to include only
the appropriate sections of the DTD, the rules for the
<tt class="literal">&lt;html&gt;</tt> tag can change to support either a
<tt class="literal">&lt;body&gt;</tt> tag or a
<tt class="literal">&lt;frameset&gt;</tt> tag, as needed.
</p>

<a name="html4-CHP-15-SECT-3.1" /><div class="sect2">
<h3 class="sect2">15.3.1. Comments</h3>

<p>The syntax for <a name="INDEX-2639" />comments within an XML DTD is exactly like
that for HTML comments: comments begin with
<tt class="literal">&lt;!--</tt> and end with <tt class="literal">--&gt;</tt>.
Everything between these two elements is ignored by the XML
processor. Comments may not be nested.
</p>

</div>
<a name="html4-CHP-15-SECT-3.2" /><div class="sect2">
<h3 class="sect2">15.3.2. Entities</h3>

<p>An <a name="INDEX-2640" />entity is a
fancy term for a constant. Entities are crucial to creating modular,
easily understood DTDs. Although they may differ in many ways, all
entities associate a name with a string of characters. When you use
the entity name elsewhere within a DTD, or in an XML document,
language parsers replace the name with the corresponding characters.
Drawing an example from HTML, the <tt class="literal">&amp;lt;</tt> entity
is replaced by the <tt class="literal">&lt;</tt> character wherever it
appears in an HTML document.
</p>

<p>Entities come in two flavors:
<em class="emphasis">parsed</em><a name="INDEX-2641" /> and
<em class="emphasis">unparsed</em>. Parsed entities are processed by an
XML processor; unparsed ones are ignored. The vast majority of
entities are parsed. An unparsed entity is reserved for use within
attribute lists of certain tags; it is nothing more than a
replacement string used as a value for a tag attribute.
</p>

<p>You can further divide the group of parsed entites into
<em class="emphasis">general</em><a name="INDEX-2642" /> <a name="INDEX-2643" /> entities and <em class="emphasis">parameter</em>
entities. General entities are used in the XML document, while
parameter entities are used in the XML DTD.
</p>

<p>You may not realize that you've been using general entities
within your HTML documents all along. For example, the entity for the
copyright (&copy;) symbol, <tt class="literal">&amp;copy;</tt> is a general
entity defined in the HTML DTD. Like all general entities, it is
referenced by preceding its name with the ampersand character. All of
the other general entities you know and love are listed in <a href="appf_01.htm">Appendix F, "Character Entities"</a>.
</p>

<p>To make life easier, XML predefines the five most common general
entities, which can be used in any XML document. While it is still
preferred that they be explicitly defined in any DTD that uses them,
these five entities are always available to any XML author:
</p>

<blockquote><pre class="code">&amp;amp;			&amp;
&amp;apos;			'
&amp;gt;			&gt;
&amp;lt;			&lt;
&amp;quot;			"</pre></blockquote>

<p>You'll find parameter entities littered throughout any
well-written DTD, including the HTML DTD. Parameter entities have a
percent sign (<tt class="literal">%</tt>) preceding their names. The
percent sign tells the XML processor to look up the entity name in
the DTD's list of parameter entities, insert the value of the
entity into the DTD in place of the entity reference, and process the
value of the entity as part of the DTD.
</p>

<p>That last bit is important. By processing the contents of the
parameter entity as part of the DTD, the XML processor allows you to
place any valid XML content in a parameter entity. Many parameter
entities contain lengthy XML definitions and may even contain other
entity definitions. Parameter entities are the workhorses of the XML
DTD; creating DTDs without them would be extremely
difficult.<a href="#FOOTNOTE-78">[78]</a>
</p><blockquote class="footnote"> <a name="FOOTNOTE-78" /><p>[78]C and C++ programmers may recognize that
the entity mechanism in XML is similar to the
<tt class="literal">#define</tt> macro mechanism in C and C++. The XML
entities provide only simple character string substitution and do not
employ C's more elaborate macro parameter mechanism.</p>
</blockquote>

</div>
<a name="html4-CHP-15-SECT-3.3" /><div class="sect2">
<h3 class="sect2">15.3.3. Entity Declarations</h3>

<p>Let's define an <a name="INDEX-2644" />entity with the
<tt class="literal">&lt;!ENTITY&gt;</tt> tag in an XML DTD. Inside the tag,
first supply the entity name and value, and then indicate whether it
is a general or parameter entity:
</p>

<blockquote><pre class="code">&lt;!ENTITY <em class="replaceable">name</em> <em class="replaceable">value</em>&gt;
&lt;!ENTITY % <em class="replaceable">name value</em>&gt;</pre></blockquote>

<p>The first version creates a general entity; the second, because of
the percent sign, creates a parameter entity.
</p>

<p>For both entity types, the name is simply a sequence of characters
beginning with a letter, colon, or underscore, and followed by any
combination of letters, numbers, periods, hyphens, underscores, or
colons. The only restriction is that names may not begin with the
sequence "xml" (either upper or lowercase).
</p>

<p>The entity value is either a character string within quotes (unlike
HTML markup, you must use quotes even if it is a string of contiguous
letters) or a reference to another document containing the value of
the entity. For these external entity values, you'll find
either the keyword SYSTEM, followed by the URL of the document
containing the entity value, or the keyword PUBLIC, followed by the
formal name of the document and its URL.
</p>

<p>A few examples will make this clear. Here is a simple general entity
declaration:
</p>

<blockquote><pre class="code">&lt;!ENTITY fruit "kumquat or other similar citrus fruit"&gt;</pre></blockquote>

<p>In this declaration, the entity <tt class="literal">"&amp;fruit;"</tt>
within the document will be replaced with the phrase "kumquat
or other similar citrus fruit" wherever it appears.
</p>

<p>Similarly, here is a parameter entity declaration:</p>

<blockquote><pre class="code">&lt;!ENTITY % ContentType "CDATA"&gt;</pre></blockquote>

<p>Anywhere the reference <tt class="literal">%ContentType;</tt> appears in
your DTD, it will be replaced with the word
"<a name="INDEX-2645" />CDATA".
This is the typical way to use parameter entities: to create a more
descriptive term for a generic parameter that will be used many times
in a DTD.
</p>

<p>Here is an external general entity declaration:</p>

<blockquote><pre class="code">&lt;!ENTITY boilerplate SYSTEM "http://server.com/boilerplate.txt"&gt;</pre></blockquote>

<p>It tells the XML processor to retrieve the contents of the file
<em class="emphasis">boilerplate.txt</em> from
<em class="emphasis">server.com</em> and use it as the value of the
boilerplate entity. Anywhere you use
<tt class="literal">&amp;boilerplate;</tt> in your document, the contents
of the file will be inserted as part of your document content.
</p>

<p>Here is an external parameter entity declaration, lifted from the
HTML DTD, that references a public external document:
</p>

<blockquote><pre class="code">&lt;!ENTITY % HTMLlat1 PUBLIC "-//W3C//ENTITIES Latin 1 for XHTML//EN" "xhtml-lat1.ent"&gt;</pre></blockquote>

<p>It defines an entity named <tt class="literal">HTMLlat1</tt> whose contents
are to be taken from the public document identified as
"<em class="emphasis">-//W3C//ENTITIES Latin 1 for
XHTML//EN</em>". If the processor does not have a copy of
this document available, it can use the URL
"<em class="emphasis">xhtml-lat1.ent</em> " to find it. This
particular public document is actually quite lengthy, containing all
of the general entity declarations for the Latin 1 character
encodings for HTML.<a href="#FOOTNOTE-79">[79]</a> </p><blockquote class="footnote"> <a name="FOOTNOTE-79" /><p>[79]You can enjoy this document for
yourself at <a href="../../../../../../www.w3.org/TR/xhtml1/DTD/xhtml-symbol.ent">http://www.w3.org/TR/xhtml1/DTD/xhtml-symbol.ent</a>.</p>
</blockquote><p>Accordingly, simply writing in the HTML DTD:
</p>

<blockquote><pre class="code">%HTMLlat1;</pre></blockquote>

<p>causes all of those general entities to be defined as part of the
language.
</p>

<p>A DTD author can use the PUBLIC and SYSTEM external values with
general and parameter entity declarations. You should structure your
external definitions to make your DTDs and documents easy to read and
understand.
</p>

<p>You'll recall that we began the section on entities with a
mention of unparsed entities whose only purpose is to be used as
values to certain attributes. You declare an unparsed entity by
appending the keyword NDATA to an external general entity
declaration, followed by the name of the unparsed entity. If we
wanted to convert our general boilerplate entity to an unparsed
general entity for use as an attribute value, we could say:
</p>

<blockquote><pre class="code">&lt;!ENTITY boilerplate SYSTEM "http://server.com/boilerplate.txt" NDATA text&gt;</pre></blockquote>

<p>With this declaration, attributes defined as type ENTITY (as
described in <a href="ch15_05.htm">Section 15.5.1, "Attribute Values"</a>) could use
<tt class="literal">boilerplate</tt> as one of their <a name="INDEX-2646" />values.
</p>

</div>
<a name="html4-CHP-15-SECT-3.4" /><div class="sect2">
<h3 class="sect2">15.3.4. Elements</h3>

<p>Elements <a name="INDEX-2647" />are definitions of the tags that can be used
in documents based on your XML markup language. In some ways, element
declarations are easier than entity declarations, since all you need
to do is specify the name of the tag and what sort of content that
tag may contain:
</p>

<blockquote><pre class="code">&lt;!ELEMENT <em class="replaceable">name contents</em>&gt;</pre></blockquote>

<p>The name follows the same rules as names for entity definitions. The
contents section may be one of four types described here:
</p>

<ul><li>
<p>The keyword EMPTY defines a tag with no content, like
<tt class="literal">&lt;hr&gt;</tt> and <tt class="literal">&lt;br&gt;</tt> in
HTML. Empty elements in XML get a bit of special handling, as
described in <a href="ch15_04.htm">Section 15.4.5, "Empty Elements"</a>.
</p>
</li><li>
<p>The keyword <tt class="literal">ANY</tt> indicates that the tag can have
any content, without restriction or further processing by the XML
processor.
</p>
</li><li>
<p>The content may be a set of grammar rules that define the order and
nesting of tags within the defined element. This content type is used
when the tag being defined contains only other tags, without
conventional content allowed directly within the tag. In HTML, the
<tt class="literal">&lt;ul&gt;</tt> tag is such a tag, as it is only
allowed to contain <tt class="literal">&lt;li&gt;</tt> tags.
</p>
</li><li>
<p>Mixed content, denoted by a comma-separated list of element names and
the keyword <tt class="literal">#PCDATA,</tt><a name="INDEX-2648" /> is enclosed in parentheses. This
content type allows tags to have user-defined content, along with
other markup elements. The <tt class="literal">&lt;li&gt;</tt> tag, for
example, may contain user-defined content as well as other tags.
</p>
</li></ul>
<p>These last two content types form the meat of most DTD element
declarations. This is <a name="INDEX-2649" /> <a name="INDEX-2650" />where the fun begins.
</p>

</div>


<hr width="684" align="left" />
<div class="navbar"><table width="684" border="0"><tr><td align="left" valign="top" width="228"><a href="ch15_02.htm"><img alt="Previous" border="0" src="../gifs/txtpreva.gif" /></a></td><td align="center" valign="top" width="228"><a href="index.htm"><img alt="Home" border="0" src="../gifs/txthome.gif" /></a></td><td align="right" valign="top" width="228"><a href="ch15_04.htm"><img alt="Next" border="0" src="../gifs/txtnexta.gif" /></a></td></tr><tr><td align="left" valign="top" width="228">15.2. Documents and DTDs</td><td align="center" valign="top" width="228"><a href="index/index.htm"><img alt="Book Index" border="0" src="../gifs/index.gif" /></a></td><td align="right" valign="top" width="228">15.4. Element Grammar</td></tr></table></div>
<hr width="684" align="left" />

<img alt="Library Navigation Links" border="0" src="../gifs/navbar.gif" usemap="#library-map" />
<p><font size="-1"><a href="copyrght.htm">Copyright &copy; 2002</a> O'Reilly &amp; Associates. All rights reserved.</font></p>

<map name="library-map"><area href="../index.htm" coords="0,1,78,93" shape="rect" /><area href="../wdesign/index.htm" coords="80,2,155,96" shape="rect" /><area href="index.htm" coords="158,0,263,97" shape="rect" /><area href="../audio/index.htm" coords="265,1,335,97" shape="rect" /><area href="../css/index.htm" coords="338,1,434,93" shape="rect" /><area href="../action/index.htm" coords="439,0,540,102" shape="rect" /><area href="../infoarch/index.htm" coords="544,0,685,102" shape="rect" /></map>

</body></html>