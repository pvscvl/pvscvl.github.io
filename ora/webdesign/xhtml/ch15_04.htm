<html><head><title>Element Grammar (HTML &amp; XHTML: The Definitive Guide, 4th Edition)</title><link rel="stylesheet" type="text/css" href="../style/style1.css" />

<meta name="DC.Creator" content="Chuck Musciano and Bill Kennedy" /><meta name="DC.Format" content="text/xml" scheme="MIME" /><meta name="DC.Language" content="en-US" /><meta name="DC.Publisher" content="O'Reilly &amp; Associates, Inc." /><meta name="DC.Source" scheme="ISBN" content="059600026XL" /><meta name="DC.Subject.Keyword" content="stuff" /><meta name="DC.Title" content="HTML &amp; XHTML: The Definitive Guide, 4th Edition" /><meta name="DC.Type" content="Text.Monograph" />

</head><body bgcolor="#ffffff">

<img alt="Book Home" border="0" src="gifs/smbanner.gif" usemap="#banner-map" /><map name="banner-map"><area shape="rect" coords="1,-2,616,66" href="index.htm" alt="HTML &amp; XHTML: The Definitive Guide" /><area shape="rect" coords="629,-11,726,25" href="jobjects/fsearch.htm" alt="Search this book" /></map>

<div class="navbar"><table width="684" border="0"><tr><td align="left" valign="top" width="228"><a href="ch15_03.htm"><img alt="Previous" border="0" src="../gifs/txtpreva.gif" /></a></td><td align="center" valign="top" width="228"><a href="index.htm">HTML &amp; XHTML: The Definitive Guide, 4th Edition</a></td><td align="right" valign="top" width="228"><a href="ch15_05.htm"><img alt="Next" border="0" src="../gifs/txtnexta.gif" /></a></td></tr></table></div>
<hr width="684" align="left" />


<h2 class="sect1">15.4. Element Grammar</h2>

<p>The <a name="INDEX-2651" /> <a name="INDEX-2652" />grammar of human language is rich with
a variety of sentence structures, verb tenses, and all sorts of
irregular constructs and exceptions to the rules. Nonetheless, you
mastered most of it by the age of three. Computer language grammars
typically are simple, regular, and have few exceptions. In fact,
computer grammars use only four rules to define how elements of a
language may be arranged: sequence, choice, grouping, and repetition.
</p>

<a name="html4-CHP-15-SECT-4.1" /><div class="sect2">
<h3 class="sect2">15.4.1. Sequence, Choice, Grouping, and Repetition</h3>

<p><em class="emphasis">Sequence</em> rules define the exact order in which
elements appear in a language. For instance, if a
<a name="INDEX-2653" />sequence grammar rule states that
element A is followed by B and then by C, your document must provide
elements A, B, and C in that exact order. A missing element (A and C,
but no B, for example), an extra element (A, B, E, then C), or an
element out of place (C, A, then B) violates the rule and does not
match the grammar.
</p>

<p>In many grammars, XML included, sequences are defined by simply
listing the appropriate elements, in order and separated by commas.
Accordingly, our example sequence in the DTD would appear simply as
<tt class="literal">A, B, C</tt>.
</p>

<p><em class="emphasis">Choice</em><a name="INDEX-2654" /> grammar rules provide flexibility by
letting the DTD author choose one element from among a group of valid
elements. For example, a choice rule might state that you may choose
elements D, E, or F; any one of these three elements would satisfy
the grammar. Like many other grammars, XML denotes choice rules by
listing the appropriate choices separated by a vertical bar
(<tt class="literal">|</tt>). Thus, our simple choice would be written in
the DTD as <tt class="literal">D | E | F</tt>. If you read the vertical bar
as the word <em class="emphasis">or</em>, choice rules become easy to
understand.
</p>

<p><em class="emphasis">Grouping</em><a name="INDEX-2655" /> rules collect two or more rules
into a single rule, building richer, more usable languages. For
example, a grouping rule might allow a sequence of elements, followed
by a choice, followed by a sequence. You can indicate groups within a
rule by enclosing them in parentheses in the DTD. For example:
</p>

<blockquote><pre class="code">Document ::= A, B, C, (D | E | F), G</pre></blockquote>

<p>requires that a document begin with elements A, B, and C, followed by
a choice of one element out of D, E, or F, followed by element G.
</p>

<p><em class="emphasis">Repetition</em><a name="INDEX-2656" /> lets you repeat one or more
elements some number of times. With XML, as with many other
languages, repetition is denoted by appending a special character
suffix to an element or group within a rule. Without the special
character, that element or group must appear exactly once in the
rule. Special characters include the plus sign
(<tt class="literal">+</tt>), meaning that the element may appear one or
more times in the document; the asterisk (<tt class="literal">*</tt>),
meaning the element may appear zero or more times; and the question
mark (<tt class="literal">?</tt>), meaning the element may appear either
zero or one time.
</p>

<p>For example, the rule:</p>

<blockquote><pre class="code">Document ::= A, B?, C*, (D | E | F)+, G*</pre></blockquote>

<p>creates an unlimited number of correct documents with the elements A
through F. According to the rule, each document must begin with A,
optionally followed a B, followed by zero or more occurrences of C,
followed by at least one, but perhaps more, of either D, E, or F,
followed by zero or more Gs. All of these documents (and many
others!) match this rule:
</p>

<blockquote><pre class="code">ABCDG
ACCCFFGGG
ACDFDFGG</pre></blockquote>

<p>You might want to work through these examples to prove to yourself
that they are, in fact, correct, with respect to the repetition rule.
</p>

</div>
<a name="html4-CHP-15-SECT-4.2" /><div class="sect2">
<h3 class="sect2">15.4.2. Multiple Grammar Rules</h3>

<p>By now you can probably imagine that specifying an entire language
grammar in a single rule is difficult, although possible.
Unfortunately, the result would be an almost unreadable sequence of
nearly unintelligible rules. To remedy this situation, the items in a
rule may themselves be rules containing other elements and rules. In
these cases, the items in a grammar that are themselves rules are
known as
<em class="emphasis">nonterminals</em><a name="INDEX-2657" />
<a name="INDEX-2658" />
<a name="INDEX-2659" />, while the items that are elements
in the language are known as <em class="emphasis">terminals</em>.
Eventually, all the nonterminals must reference rules that create
sequences of terminals, or the grammar would never produce a valid
document.
</p>

<p>For example, we can express our sample grammar in two rules:</p>

<blockquote><pre class="code">Document ::= A, B?, C*, Choices+, G*
Choices ::= D | E | F</pre></blockquote>

<p>In this example, Document and Choices are nonterminals, while A, B,
C, D, E, F, and G are terminals.
</p>

<p>There is no requirement in XML (or most other grammars) that dictates
or limits the number of nonterminals in your grammar. Most grammars
use nonterminals wherever it makes sense for clarity and ease of use.
</p>

</div>
<a name="html4-CHP-15-SECT-4.3" /><div class="sect2">
<h3 class="sect2">15.4.3. XML Element Grammar</h3>

<p>The <a name="INDEX-2660" />rules for
defining the contents of an element match the grammar rules we just
discussed. You may use sequences, choices, groups, and repetition to
define the allowable contents of an element. The nonterminals in
rules must be names of other elements defined in your DTD.
</p>

<p>A few examples show how this works. Consider the declaration of the
<tt class="literal">&lt;html&gt;</tt> tag, taken from the HTML DTD:
</p>

<blockquote><pre class="code">&lt;!ELEMENT html (head, body)&gt;</pre></blockquote>

<p>This defines the element named <tt class="literal">html</tt> whose content
is a <tt class="literal">head</tt> element followed by a
<tt class="literal">body</tt> element. Notice that you do not enclose the
element names in angle brackets within the DTD; that notation is used
only when the elements are actually used in a document.
</p>

<p>Within the HTML DTD, you can find the declaration of the
<tt class="literal">&lt;head&gt;</tt> tag:
</p>

<blockquote><pre class="code">&lt;!ELEMENT head (%head.misc;,
     ((title, %head.misc;, (base, %head.misc;)?) |
      (base, %head.misc;, (title, %head.misc;))))&gt;</pre></blockquote>

<p>Gulp. What on earth does this mean? First, notice that there is a
parameter entity named <tt class="literal">head.misc</tt> used several
times in this declaration. Let's go get it:
</p>

<blockquote><pre class="code">&lt;!ENTITY % head.misc "(script|style|meta|link|object)*"&gt;</pre></blockquote>

<p>Now things are starting to make sense: <tt class="literal">head.misc</tt>
defines a group of elements, from which you may choose one. However
the trailing asterisk indicates that you may include zero or more of
these elements. The net result is that anywhere
<tt class="literal">%head.misc;</tt> appears, you can include zero or more
<tt class="literal">script</tt>, <tt class="literal">style</tt>,
<tt class="literal">meta</tt>, <tt class="literal">link</tt>, or
<tt class="literal">object</tt> elements, in any order. Sound familiar?
</p>

<p>Returning to the <tt class="literal">head</tt> declaration, we see that we
are allowed to begin with any number of the <tt class="literal">head</tt>
miscellaneous elements. We must then make a choice: either a group
consisting of a <tt class="literal">title</tt> element, optional
miscellaneous items, and an optional <tt class="literal">base</tt> element
followed by miscellaneous items; or, a group consisting of a
<tt class="literal">base</tt> element, miscellaneous items, a
<tt class="literal">title</tt> element, and some more miscellaneous items.
</p>

<p>Why such a convoluted rule for the <tt class="literal">&lt;head&gt;</tt>
tag? Why not just write:
</p>

<blockquote><pre class="code">&lt;!ELEMENT head (script|style|meta|link|object|base|title)*&gt;</pre></blockquote>

<p>which allows any number of the <tt class="literal">head</tt> elements to
appear, or none at all? Because the HTML standard requires that every
<tt class="literal">&lt;head&gt;</tt> tag contain exactly one
<tt class="literal">&lt;title&gt;</tt> tag. It also allows for only one
<tt class="literal">&lt;base&gt;</tt> tag, if any. Otherwise, the standard
does allow any number of the other <tt class="literal">head</tt> elements,
in any order.
</p>

<p>Put simply, the <tt class="literal">head</tt> element declaration, while
initially confusing, forces the XML processor to ensure that exactly
one <tt class="literal">title</tt> element appears in the
<tt class="literal">head</tt> element, and that if specified, just one
<tt class="literal">base</tt> element appears as well. It then allows for
any of the other <tt class="literal">head</tt> elements, in any order.
</p>

<p>This one example demonstrates a lot of the power of XML: the ability
to define commonly used elements using parameter entities and the use
of grammar rules to dictate document syntax. If you can work through
the <tt class="literal">head</tt> element declaration and understand it,
you are well on your way to reading any XML DTD.
</p>

</div>
<a name="html4-CHP-15-SECT-4.4" /><div class="sect2">
<h3 class="sect2">15.4.4. Mixed Element Content</h3>

<p><a name="INDEX-2661" />Mixed element content extends the
element grammar rules to include the special
<tt class="literal">#PCDATA</tt> keyword.
"<a name="INDEX-2662" />PCDATA" stands for "parsed
character data" and signifies that the content of the element
will be parsed by the XML processor for general entity references.
After the entities are replaced, the character data is passed to the
XML application for further processing.
</p>

<p>What this boils down to is that parsed character data is the actual
content of your XML document. Elements that accept parsed character
data may contain plain ol' text, plus whatever other tags you
allow, as defined in the DTD.
</p>

<p>For instance:</p>

<blockquote><pre class="code">&lt;!ELEMENT title (#PCDATA)&gt;</pre></blockquote>

<p>means that the <tt class="literal">title</tt> element may contain only text
with entities. No other tags are allowed, just as in the HTML
standard.
</p>

<p>A more complex example is the <tt class="literal">&lt;p&gt;</tt> tag, whose
element declaration is:
</p>

<blockquote><pre class="code">&lt;!ELEMENT p %Inline;&gt;</pre></blockquote>

<p>Another parameter entity! The <tt class="literal">%Inline;</tt> entity is
defined in the HTML DTD:
</p>

<blockquote><pre class="code">&lt;!ENTITY % Inline "(#PCDATA | %inline; | %misc;)*"&gt;</pre></blockquote>

<p>which expands to these entities when you replace the parameters:</p>

<blockquote><pre class="code">&lt;!ENTITY % special "br | span | bdo | object | img | map"&gt;
&lt;!ENTITY % fontstyle "tt | i | b | big | small"&gt;
&lt;!ENTITY % phrase "em | strong | dfn | code | q | sub | sup | samp |
           kbd | var | cite | abbr | acronym"&gt;
&lt;!ENTITY % inline.forms "input | select | textarea | label | button"&gt;
&lt;!ENTITY % misc "ins | del | script | noscript"&gt;
&lt;!ENTITY % inline "a | %special; | %fontstyle; | %phrase; | 
           %inline.forms;"&gt;</pre></blockquote>

<p>What do we make of all this? The <tt class="literal">%Inline;</tt> entity
defines the contents of the <tt class="literal">p</tt> element as parsed
character data, plus any of the elements defined by
<tt class="literal">%inline;</tt> and any defined by
<tt class="literal">%misc;</tt>. Notice that case does matter:
<tt class="literal">%Inline;</tt> is different from
<tt class="literal">%inline;</tt>.
</p>

<p>The <tt class="literal">%inline;</tt> entity includes lots of stuff:
special elements, font-style elements, phrase elements, and inline
form elements. <tt class="literal">%misc</tt> includes the
<tt class="literal">ins</tt>, <tt class="literal">del</tt>,
<tt class="literal">script</tt>, and <tt class="literal">noscript</tt> elements.
You can read the HTML DTD for the other entity declarations to see
which elements are also allowed as the contents of a
<tt class="literal">p</tt> element.
</p>

<p>Why did the HTML DTD authors break up all these elements into
separate groups? If they were simply defining elements to be included
in the <tt class="literal">p</tt> element, they could have built a single
long list. However, HTML has rules that govern where inline elements
may appear in a document. The authors grouped elements that are
treated similarly into separate entities that could be referenced
several times in the DTD. This makes the DTD easier to read and
understand, as well as easier to maintain when a change is needed.
</p>

</div>
<a name="html4-CHP-15-SECT-4.5" /><div class="sect2">
<h3 class="sect2">15.4.5. Empty Elements</h3>

<p>Elements whose content is defined to be empty deserve a special
mention. XML introduces new notational rules for empty elements,
different from the traditional HTML rules that govern them.
</p>

<p>HTML authors are used to specifying an empty element as a single tag,
like <tt class="literal">&lt;br&gt;</tt> or <tt class="literal">&lt;img&gt;</tt>.
XML requires that every element have an opening and a closing tag, so
an image tag would be written as
<tt class="literal">&lt;img&gt;&lt;/img&gt;</tt> with no embedded content.
Other empty elements would be written in a similar manner.
</p>

<p>Since this format works well for non-empty tags but is a bit of
overkill for empty ones, you can use a special shorthand notation for
empty tags. To write an empty tag in XML, just place a slash
(<tt class="literal">/</tt>) immediately before the closing angle bracket
of the tag. Thus, a line break may be written as
<tt class="literal">&lt;br/&gt;</tt> and an image tag might be specified as
<tt class="literal">&lt;img src="myimage.gif"/&gt;</tt>. Notice that the
attributes of the empty element, if any, appear before the closing
slash <a name="INDEX-2663" /> <a name="INDEX-2664" />and bracket.
</p>

</div>


<hr width="684" align="left" />
<div class="navbar"><table width="684" border="0"><tr><td align="left" valign="top" width="228"><a href="ch15_03.htm"><img alt="Previous" border="0" src="../gifs/txtpreva.gif" /></a></td><td align="center" valign="top" width="228"><a href="index.htm"><img alt="Home" border="0" src="../gifs/txthome.gif" /></a></td><td align="right" valign="top" width="228"><a href="ch15_05.htm"><img alt="Next" border="0" src="../gifs/txtnexta.gif" /></a></td></tr><tr><td align="left" valign="top" width="228">15.3. Understanding XML DTDs</td><td align="center" valign="top" width="228"><a href="index/index.htm"><img alt="Book Index" border="0" src="../gifs/index.gif" /></a></td><td align="right" valign="top" width="228">15.5. Element Attributes</td></tr></table></div>
<hr width="684" align="left" />

<img alt="Library Navigation Links" border="0" src="../gifs/navbar.gif" usemap="#library-map" />
<p><font size="-1"><a href="copyrght.htm">Copyright &copy; 2002</a> O'Reilly &amp; Associates. All rights reserved.</font></p>

<map name="library-map"><area href="../index.htm" coords="0,1,78,93" shape="rect" /><area href="../wdesign/index.htm" coords="80,2,155,96" shape="rect" /><area href="index.htm" coords="158,0,263,97" shape="rect" /><area href="../audio/index.htm" coords="265,1,335,97" shape="rect" /><area href="../css/index.htm" coords="338,1,434,93" shape="rect" /><area href="../action/index.htm" coords="439,0,540,102" shape="rect" /><area href="../infoarch/index.htm" coords="544,0,685,102" shape="rect" /></map>

</body></html>