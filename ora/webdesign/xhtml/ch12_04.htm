<html><head><title>JavaScript Style Sheets (HTML &amp; XHTML: The Definitive Guide, 4th Edition)</title><link rel="stylesheet" type="text/css" href="../style/style1.css" />

<meta name="DC.Creator" content="Chuck Musciano and Bill Kennedy" /><meta name="DC.Format" content="text/xml" scheme="MIME" /><meta name="DC.Language" content="en-US" /><meta name="DC.Publisher" content="O'Reilly &amp; Associates, Inc." /><meta name="DC.Source" scheme="ISBN" content="059600026XL" /><meta name="DC.Subject.Keyword" content="stuff" /><meta name="DC.Title" content="HTML &amp; XHTML: The Definitive Guide, 4th Edition" /><meta name="DC.Type" content="Text.Monograph" />

</head><body bgcolor="#ffffff">

<img alt="Book Home" border="0" src="gifs/smbanner.gif" usemap="#banner-map" /><map name="banner-map"><area shape="rect" coords="1,-2,616,66" href="index.htm" alt="HTML &amp; XHTML: The Definitive Guide" /><area shape="rect" coords="629,-11,726,25" href="jobjects/fsearch.htm" alt="Search this book" /></map>

<div class="navbar"><table width="684" border="0"><tr><td align="left" valign="top" width="228"><a href="ch12_03.htm"><img alt="Previous" border="0" src="../gifs/txtpreva.gif" /></a></td><td align="center" valign="top" width="228"><a href="index.htm">HTML &amp; XHTML: The Definitive Guide, 4th Edition</a></td><td align="right" valign="top" width="228"><a href="ch13_01.htm"><img alt="Next" border="0" src="../gifs/txtnexta.gif" /></a></td></tr></table></div>
<hr width="684" align="left" />


<h2 class="sect1">12.4. JavaScript Style Sheets</h2>
<p><a name="INDEX-2425" />
<a name="INDEX-2426" />
<a name="INDEX-2427" />
<a name="INDEX-2428" />Much of a browser's work is manipulating the display, and much of its display code already has been exposed for JavaScripting. So it seemed only natural, perhaps even relatively easy, for the developers at Netscape to implement JavaScript Style Sheets. Based on the W3C recommended Cascading Style Sheet model (CSS; see <a href="ch08_01.htm">Chapter 8, "Cascading Style Sheets"</a>), this alternative document style technology lets you prescribe display properties for all the various HTML elements, either inline as tag attributes, at the document level, or for an entire document collection.</p>


<p>JavaScript Style Sheets (JSS) are a Netscape invention. In fact, for
a short time in the fall of 1996, Netscape appeared ready to eschew
the CSS methodology, which Internet Explorer had already implemented,
and use JSS exclusively for HTML document designers with its
then-current browser, Netscape Navigator 4. In the end, Netscape
Navigator 4 supported both JSS and CSS technologies while Netscape 6
eschews support for JSS in favor of the standard CSS2. At this point,
CSS should be seen as Netscape's long-term direction.
</p>

<p>We are strong proponents of reasonable standards, and now that the
CSS2 model is fully supported in HTML 4 and XHTML, we can't
recommend that you use anything but CSS-standard style sheets.
Evidently, Netscape now agrees with us on this point.
</p>

<p>The CSS model is a good one, and it is good that Netscape has decided
to support it. Whether Internet Explorer will someday support JSS is
not known, but we doubt it. It is clear that Microsoft intends
continued support for the CSS2 standard, as well as the HTML 4 and
XHTML standards (they haven't had good results bucking web
standards in the past).
</p>

<p>But standards aren't the whole story. We can't imagine
that the HTML author, let alone the page layout designer, is going to
abide the rigid programming syntax of JavaScript. Nonetheless, there
are some advantages to JSS that some authors will find useful, even
though it restricts their document's full potential to the
select Netscape 4 user.
</p>

<p>We thoroughly discuss the concepts and ideas behind style
sheets -- specifically, Cascading Style Sheets -- in <a href="ch08_01.htm">Chapter 8, "Cascading Style Sheets"</a>, so we won't repeat ourselves here.
Rather, we address only how to create and manipulate styles with
JavaScript. Before forging ahead in this section, we recommend that
you first absorb the information in <a href="ch08_01.htm">Chapter 8, "Cascading Style Sheets"</a>.
</p>

<a name="html4-CHP-12-SECT-4.1" /><div class="sect2">
<h3 class="sect2">12.4.1. JavaScript Style Sheet Syntax</h3>

<p>Netscape implements JSS by extending several existing HTML tags and
defining a few new objects that store your document's styles.
</p>

<a name="html4-CHP-12-SECT-4.1.1" /><div class="sect3">
<h3 class="sect3">12.4.1.1. External, document-level, and inline JSS</h3>

<p><a name="INDEX-2429" />As
with CSS, you can reference and load external JSS files with the
<tt class="literal">&lt;link&gt;</tt><a name="INDEX-2430" /> tag. For example:
</p>

<blockquote><pre class="code">&lt;link href="styles.js" rel=stylesheet type=text/JavaScript&gt;</pre></blockquote>

<p>The only real difference between this tag and the one for a CSS
external style sheet is that the <tt class="literal">type</tt> attribute of
the <tt class="literal">&lt;link&gt;</tt> tag is set to
<tt class="literal">text/JavaScript</tt> instead of
<tt class="literal">text/CSS</tt>. The referenced file,
<em class="filename">styles.js</em>, contains JavaScript statements that
define styles and classes that Netscape will then use to control
display of the current document.
</p>

<p><a name="INDEX-2431" />
<a name="INDEX-2432" />Document-level
JSS is defined within a <tt class="literal">&lt;style&gt;</tt> tag in the
<tt class="literal">&lt;head&gt;</tt> of the document, just like CSS.
Again, there is only one real difference in that the
<tt class="literal">type</tt> attribute of the
<tt class="literal">&lt;style&gt;</tt> tag is set to
<tt class="literal">text/JavaScript</tt> instead of
<tt class="literal">text/CSS</tt>.
</p>

<p>The contents of the <tt class="literal">&lt;style&gt;</tt> tag for JSS are
quite different from those for CSS, however. For example:
</p>

<blockquote><pre class="code">&lt;style type=text/JavaScript&gt;
&lt;!--
    tags.BODY.marginLeft = "20px";
    tags.P.fontWeight = "bold";
  // --&gt;
&lt;/style&gt;</pre></blockquote>

<p>First, notice that we use the standard JavaScript and HTML comments
to surround our JSS definitions, preventing noncompliant browsers
from processing them as HTML content. Also notice that the syntax of
the style definition is that of JavaScript, where letter case
<em class="emphasis">does</em> make a difference, among other things.
</p>

<p>You associate
<a name="INDEX-2433" />
<a name="INDEX-2434" />inline
JavaScript-based style rules with a specific tag using the
<tt class="literal">style</tt> attribute, just like CSS inline styles. The
value of the attribute is a list of JSS assignments, separated by
semicolons. For example:
</p>

<blockquote><pre class="code">&lt;p style="color = 'green'; fontWeight = 'bold'"&gt;</pre></blockquote>

<p>creates a green, bold-faced text paragraph. Notice first that you
need to enclose inline style values within single quotation marks,
not double quotation marks, as you might use for document-level and
in external JSS styles. This is reasonable, since the style attribute
value itself must be enclosed in double quotation marks.
</p>

<p>Also note that inline JSS definitions use only the property name, not
the containing tag object that owns the property. This makes sense,
since inline JSS styles affect only the current tag, not all
instances of the tag.
</p>

</div>

<a name="html4-CHP-12-SECT-4.1.2" /><div class="sect3">
<h3 class="sect3">12.4.1.2. JSS values</h3>

<p>In general, all of the values you may use for CSS may also be used in
JSS definitions. For keyword, length, and percentage values, simply
enclose the value in quotes and use it as you would any string value
in JavaScript. Thus, the CSS value <tt class="literal">bold</tt> becomes
<tt class="literal">"bold"</tt> or <tt class="literal">'bold'</tt> for JSS
document-level or inline styles, respectively;
<tt class="literal">12pt</tt> in CSS becomes <tt class="literal">'12pt'</tt> or
<tt class="literal">"12pt"</tt> in JSS.
</p>

<p>Specify <a name="INDEX-2435" />color
values as the color name or a hexadecimal color value, enclosed in
single or double quotes. The CSS decimal rgb notation is not
supported in JSS.
</p>

<p>JSS URL values are strings containing the desired URL. Thus, the CSS
URL value <tt class="literal">url(http://www.kumquat.com)</tt> becomes
<tt class="literal">'http://www.kumquat.com'</tt> for a JSS inline style;
or <tt class="literal">"http://www.kumquat.com"</tt> at the document level.
</p>

<p>One unique power of JSS is that any value can be computed dynamically
when the document is processed by the browser. Instead of statically
specifying the font size, for example, you can compute it on the fly:
</p>

<blockquote><pre class="code">tags.P.fontSize = favorite_font_size(  );</pre></blockquote>

<p>We assume that the JavaScript function <tt class="literal">favorite_font_size(
)</tt><a name="INDEX-2436" /> somehow determines the desired
<a name="INDEX-2437" />font size and returns a string
value containing that size. This, in turn, is assigned to the
<tt class="literal">fontSize</tt> property for the
<tt class="literal">&lt;p&gt;</tt> tag, defining the font size for all
paragraphs in the document.
</p>

</div>

<a name="html4-CHP-12-SECT-4.1.3" /><div class="sect3">
<h3 class="sect3">12.4.1.3. Defining styles for tags</h3>

<p>JavaScript defines a new document property,
<tt class="literal">tags</tt><a name="INDEX-2438" />, that contains the style
properties for all HTML tags. To define a style for a tag, simply set
the appropriate property of the desired style property within the
<tt class="literal">tag</tt> property of the <tt class="literal">document</tt>
object. For example:
</p>

<blockquote><pre class="code">document.tags.P.fontSize = '12pt';
document.tags.H2.color = 'blue';</pre></blockquote>

<p>These two JSS definitions set the font size for the
<tt class="literal">&lt;p&gt;</tt> tag to 12 points and render all
<tt class="literal">&lt;h2&gt;</tt> tags in blue. The equivalent CSS
definitions are:
</p>

<blockquote><pre class="code">p {font-size : 12pt}
h2 {color : blue}</pre></blockquote>

<p>Since the <tt class="literal">tags</tt> property always refers to the
current document, you may omit <tt class="literal">document</tt> from any
JSS tag style definition. We could have written the previous two
styles as:
</p>

<blockquote><pre class="code">tags.P.fontSize = '12pt';
tags.H2.color = 'blue';</pre></blockquote>

<p>Moreover, as we mentioned previously, you may omit the tag name, as
well as the <tt class="literal">document</tt> and <tt class="literal">tags</tt>
properties for inline JSS using the <tt class="literal">style</tt>
attribute.
</p>

<p><a name="INDEX-2439" />Capitalization and case are
significant in JSS. The tag names within the <tt class="literal">tags</tt>
property must always be fully capitalized. The embedded capital
letters within the tag properties are significant: any deviation from
the exact lettering produces an error, and Netscape won't honor
your JSS declaration. All of the following JSS definitions are
invalid, though the reason is not overly apparent:
</p>

<blockquote><pre class="code">tags.p.fontsize = '12pt';
tags.Body.Color = 'blue';
tags.P.COLOR = 'red';</pre></blockquote>

<p>The correct versions are:</p>

<blockquote><pre class="code">tags.P.fontSize = '12pt';
tags.BODY.color = 'blue';
tags.P.color = 'red';</pre></blockquote>

<p>It can be very tedious to specify a number of properties for a single
tag, so you can take advantage of the JavaScript
<tt class="literal">with</tt> statement to reduce your typing burden. These
styles:
</p>

<blockquote><pre class="code">tags.P.fontSize = '14pt';
tags.P.color = 'blue';
tags.P.fontWeight = 'bold';
tags.P.leftMargin = '20%';</pre></blockquote>

<p>can be more easily written as:</p>

<blockquote><pre class="code">with (tags.P) {
  fontSize = '14pt';
  color = 'blue';
  fontWeight = 'bold';
  leftMargin = '20%';
  }</pre></blockquote>

<p>You can apply similar styles to diverse tags just as easily:</p>

<blockquote><pre class="code">with (tags.P, tags.LI, tags.H1) {
  fontSize = '14pt';
  color = 'blue';
  fontWeight = 'bold';
  leftMargin = '20%';
  }</pre></blockquote>

</div>

<a name="html4-CHP-12-SECT-4.1.4" /><div class="sect3">
<h3 class="sect3">12.4.1.4. Defining style classes</h3>

<p><a name="INDEX-2440" />
<a name="INDEX-2441" />Like CSS, JSS lets you target styles for
specific ways in which a tag may be used in your document. JSS uses
the <tt class="literal">classes</tt>property to
define separate styles for the same tag. There are no predefined
properties within the <tt class="literal">classes</tt> property; instead,
any property you reference is defined as a class to be used by the
current document. For example:
</p>

<blockquote><pre class="code">classes.bold.P.fontWeight = 'bold';
with (classes.abstract.P) {
   leftMargin = '20pt';
   rightMargin = '20pt';
   fontStyle = 'italic';
   textAlign = 'justify';
   }</pre></blockquote>

<p>The first style defines a class of the <tt class="literal">&lt;p&gt;</tt>
tag named <tt class="literal">bold</tt> whose font weight is set to bold.
The next style uses the <tt class="literal">with</tt> statement to create a
class of the <tt class="literal">&lt;p&gt;</tt> tag named
<tt class="literal">abstract</tt> with the specified properties. The
equivalent CSS rules would be the following:
</p>

<blockquote><pre class="code">P.bold {font-weight : bold}
P.abstract {left-margin : 20pt;
            right-margin : 20pt;
            font-style : italic;
            text-align : justify
           }</pre></blockquote>

<p>Once defined, use a JSS class just like any CSS class: with the
<tt class="literal">class</tt> attribute and the class name.
</p>

<p>Like CSS, JSS also lets you define a class without defining the tag
that will use the class. This lets you define generic classes that
you can later apply to any tag. To create a generic style class in
JSS, use the special tag property <tt class="literal">all</tt>:
</p>

<blockquote><pre class="code">classes.green.all.color = "green";</pre></blockquote>

<p>You can then add <tt class="literal">class="green"</tt> to any tag to have
Netscape render its contents in green. The equivalent CSS is:
</p>

<blockquote><pre class="code">.green {color : green}</pre></blockquote>

</div>

<a name="html4-CHP-12-SECT-4.1.5" /><div class="sect3">
<h3 class="sect3">12.4.1.5. Using contextual styles</h3>

<p>One of the most powerful aspects of CSS is its
<a name="INDEX-2442" />
<a name="INDEX-2443" /> <a name="INDEX-2444" />contextual
style capability, wherein the browser applies a style to tags only if
they appear in the document in a certain nesting. JSS supports
contextual styles as well, through the special <tt class="literal">contextual(
)</tt> method within the <tt class="literal">tags</tt> property. The
parameters to this method are the tags and classes that define the
context in which Netscape will apply the style. For example:
</p>

<blockquote><pre class="code">tags.contextual(tags.UL, tags.UL, tags.LI).listStyleType = 'disc';</pre></blockquote>

<p>defines a context wherein the elements (<tt class="literal">tags.LI</tt>)
of an unordered list nested within another unordered list
(<tt class="literal">tags.UL</tt>, <tt class="literal">tags.UL</tt>) use the disc
as their bullet symbol. The CSS equivalent is:
</p>

<blockquote><pre class="code">ul ul li {list-style-type : disc}</pre></blockquote>

<p>You can mix tags and classes in the <tt class="literal">contextual( )</tt>
method. For instance:
</p>

<blockquote><pre class="code">tags.contextual(classes.abstract.P, tags.EM).color = 'red';</pre></blockquote>

<p>tells the browser to display in red <tt class="literal">&lt;em&gt;</tt>
tags that appear within paragraphs that are of the
<tt class="literal">abstract</tt> class. The CSS equivalent is:
</p>

<blockquote><pre class="code">p.abstract em {color : red}</pre></blockquote>

<p>Since the <tt class="literal">tags</tt> object is unambiguously included
within the <tt class="literal">contextual( )</tt> method, you may omit them
from the definition. Hence, our nested list example may be rewritten
as:
</p>

<blockquote><pre class="code">tags.contextual(UL, UL, LI).listStyleType = 'disc';</pre></blockquote>

</div>
</div>
<a name="html4-CHP-12-SECT-4.2" /><div class="sect2">
<h3 class="sect2">12.4.2. JavaScript Style Sheet Properties</h3>

<p><a name="INDEX-2445" /> <a name="INDEX-2446" /> <a name="INDEX-2447" /> <a name="INDEX-2448" />A subset of the CSS style
properties are supported in JSS. The JSS style properties, their CSS
equivalents, and the sections in which those properties are fully
documented are shown in <a href="ch12_04.htm">Table 12-2</a>.
</p>

<a name="html4-CHP-12-TABLE-2" /><h4 class="objtitle">Table 12-2.  JSS Properties and Cascading Style Sheet Equivalents </h4><table border="1">




<tr>
<th>
<p>JSS Property</p>
</th>
<th>
<p>CSS Property</p>
</th>
<th>
<p>See Section</p>
</th>
</tr>


<tr>
<td>
<p><tt class="literal">align</tt></p>
</td>
<td>
<p><tt class="literal">float</tt></p>
</td>
<td>
<p><a href="ch08_04.htm">Section 8.4.6.8, "The float property"</a></p>
</td>
</tr>
<tr>
<td>
<p><tt class="literal">backgroundImage</tt></p>
</td>
<td>
<p><tt class="literal">background-image</tt></p>
</td>
<td>
<p><a href="ch08_04.htm">Section 8.4.4.3, "The background-image property"</a></p>
</td>
</tr>
<tr>
<td>
<p><tt class="literal">backgroundColor</tt></p>
</td>
<td>
<p><tt class="literal">background-color</tt></p>
</td>
<td>
<p><a href="ch08_04.htm">Section 8.4.4.2, "The background-color property"</a></p>
</td>
</tr>
<tr>
<td>
<p><tt class="literal">borderBottomWidth</tt></p>
</td>
<td>
<p><tt class="literal">border-bottom-width</tt></p>
</td>
<td>
<p><a href="ch08_04.htm">Section 8.4.6.4, "The border-width property"</a></p>
</td>
</tr>
<tr>
<td>
<p><tt class="literal">borderLeftWidth</tt></p>
</td>
<td>
<p><tt class="literal">border-left-width</tt></p>
</td>
<td>
<p><a href="ch08_04.htm">Section 8.4.6.4, "The border-width property"</a></p>
</td>
</tr>
<tr>
<td>
<p><tt class="literal">borderRightWidth</tt></p>
</td>
<td>
<p><tt class="literal">border-right-width</tt></p>
</td>
<td>
<p><a href="ch08_04.htm">Section 8.4.6.4, "The border-width property"</a></p>
</td>
</tr>
<tr>
<td>
<p><tt class="literal">borderStyle</tt></p>
</td>
<td>
<p><tt class="literal">border-style</tt></p>
</td>
<td>
<p><a href="ch08_04.htm">Section 8.4.6.5, "The 






border-style property"</a></p>
</td>
</tr>
<tr>
<td>
<p><tt class="literal">borderTopWidth</tt></p>
</td>
<td>
<p><tt class="literal">border-top-width</tt></p>
</td>
<td>
<p><a href="ch08_04.htm">Section 8.4.6.4, "The border-width property"</a></p>
</td>
</tr>
<tr>
<td>
<p><tt class="literal">clear</tt></p>
</td>
<td>
<p><tt class="literal">clear</tt></p>
</td>
<td>
<p><a href="ch08_04.htm">Section 8.4.6.7, "The clear property"</a></p>
</td>
</tr>
<tr>
<td>
<p><tt class="literal">display</tt></p>
</td>
<td>
<p><tt class="literal">display</tt></p>
</td>
<td>
<p><a href="ch08_04.htm">Section 8.4.8.1, "The display property"</a></p>
</td>
</tr>
<tr>
<td>
<p><tt class="literal">fontSize</tt></p>
</td>
<td>
<p><tt class="literal">font-size</tt></p>
</td>
<td>
<p><a href="ch08_04.htm">Section 8.4.3.2, "The font-size property"</a>.</p>
</td>
</tr>
<tr>
<td>
<p><tt class="literal">fontStyle</tt></p>
</td>
<td>
<p><tt class="literal">font-style</tt></p>
</td>
<td>
<p><a href="ch08_04.htm">Section 8.4.3.5, "The font-style property"</a></p>
</td>
</tr>
<tr>
<td>
<p><tt class="literal">height</tt></p>
</td>
<td>
<p><tt class="literal">height</tt></p>
</td>
<td>
<p><a href="ch08_04.htm">Section 8.4.6.9, "The height property"</a></p>
</td>
</tr>
<tr>
<td>
<p><tt class="literal">lineHeight</tt></p>
</td>
<td>
<p><tt class="literal">line-height</tt></p>
</td>
<td>
<p><a href="ch08_04.htm">Section 8.4.5.2, "The line-height property"</a></p>
</td>
</tr>
<tr>
<td>
<p><tt class="literal">listStyleType</tt></p>
</td>
<td>
<p><tt class="literal">list-style-type</tt></p>
</td>
<td>
<p><a href="ch08_04.htm">Section 8.4.7.3, "The list-style-type property"</a></p>
</td>
</tr>
<tr>
<td>
<p><tt class="literal">marginBottom</tt></p>
</td>
<td>
<p><tt class="literal">margin-bottom</tt></p>
</td>
<td>
<p><a href="ch08_04.htm">Section 8.4.6.10, "The margin properties"</a></p>
</td>
</tr>
<tr>
<td>
<p><tt class="literal">marginLeft</tt></p>
</td>
<td>
<p><tt class="literal">margin-left</tt></p>
</td>
<td>
<p><a href="ch08_04.htm">Section 8.4.6.10, "The margin properties"</a></p>
</td>
</tr>
<tr>
<td>
<p><tt class="literal">marginRight</tt></p>
</td>
<td>
<p><tt class="literal">margin-right</tt></p>
</td>
<td>
<p><a href="ch08_04.htm">Section 8.4.6.10, "The margin properties"</a></p>
</td>
</tr>
<tr>
<td>
<p><tt class="literal">marginTop</tt></p>
</td>
<td>
<p><tt class="literal">margin-top</tt></p>
</td>
<td>
<p><a href="ch08_04.htm">Section 8.4.6.10, "The margin properties"</a></p>
</td>
</tr>
<tr>
<td>
<p><tt class="literal">paddingBottom</tt></p>
</td>
<td>
<p><tt class="literal">padding-bottom</tt></p>
</td>
<td>
<p><a href="ch08_04.htm">Section 8.4.6.11, "The padding properties"</a></p>
</td>
</tr>
<tr>
<td>
<p><tt class="literal">paddingLeft</tt></p>
</td>
<td>
<p><tt class="literal">padding-left</tt></p>
</td>
<td>
<p><a href="ch08_04.htm">Section 8.4.6.11, "The padding properties"</a></p>
</td>
</tr>
<tr>
<td>
<p><tt class="literal">paddingRight</tt></p>
</td>
<td>
<p><tt class="literal">padding-right</tt></p>
</td>
<td>
<p><a href="ch08_04.htm">Section 8.4.6.11, "The padding properties"</a></p>
</td>
</tr>
<tr>
<td>
<p><tt class="literal">paddingTop</tt></p>
</td>
<td>
<p><tt class="literal">padding-top</tt></p>
</td>
<td>
<p><a href="ch08_04.htm">Section 8.4.6.11, "The padding properties"</a></p>
</td>
</tr>
<tr>
<td>
<p><tt class="literal">textDecoration</tt></p>
</td>
<td>
<p><tt class="literal">text-decoration</tt></p>
</td>
<td>
<p><a href="ch08_04.htm">Section 8.4.5.4, "The text-decoration property"</a></p>
</td>
</tr>
<tr>
<td>
<p><tt class="literal">textTransform</tt></p>
</td>
<td>
<p><tt class="literal">text-transform</tt></p>
</td>
<td>
<p><a href="ch08_04.htm">Section 8.4.5.9, "The text-transform property"</a></p>
</td>
</tr>
<tr>
<td>
<p><tt class="literal">textAlign</tt></p>
</td>
<td>
<p><tt class="literal">text-align</tt></p>
</td>
<td>
<p><a href="ch08_04.htm">Section 8.4.5.3, "The text-align property"</a></p>
</td>
</tr>
<tr>
<td>
<p><tt class="literal">textIndent</tt></p>
</td>
<td>
<p><tt class="literal">text-indent</tt></p>
</td>
<td>
<p><a href="ch08_04.htm">Section 8.4.5.5, "The text-indent property"</a></p>
</td>
</tr>
<tr>
<td>
<p><tt class="literal">verticalAlign</tt></p>
</td>
<td>
<p><tt class="literal">vertical-align</tt></p>
</td>
<td>
<p><a href="ch08_04.htm">Section 8.4.5.7, "The vertical-align property"</a></p>
</td>
</tr>
<tr>
<td>
<p><tt class="literal">whiteSpace</tt></p>
</td>
<td>
<p><tt class="literal">white-space</tt></p>
</td>
<td>
<p><a href="ch08_04.htm">Section 8.4.8.2, "The white-space property"</a></p>
</td>
</tr>
<tr>
<td>
<p><tt class="literal">width</tt></p>
</td>
<td>
<p><tt class="literal">width</tt></p>
</td>
<td>
<p><a href="ch08_04.htm">Section 8.4.6.12, "The width property"</a></p>
</td>
</tr>

</table>

<p>JSS also defines three methods that allow you to define margins,
padding, and border widths within a single style property. The three
methods, <tt class="literal">margins( )</tt>, <tt class="literal">paddings(
)</tt>, and <tt class="literal">borderWidths( )</tt>, accept four
parameters, corresponding to the top, right, bottom, and left margin,
padding or border width, respectively. Unlike their CSS counterparts
(<tt class="literal">margin</tt>, <a href="ch08_04.htm">Section 8.4.6.10, "The margin properties"</a>;
<tt class="literal">padding</tt>, <a href="ch08_04.htm">Section 8.4.6.11, "The padding properties"</a>; and
<tt class="literal">border-width</tt>, <a href="ch08_04.htm">Section 8.4.6.4, "The border-width property"</a>), these
JSS methods require that you always specify all four parameters.
There is no shorthand way in JSS to set multiple margins, paddings,
or border widths with a single <a name="INDEX-2449" /> <a name="INDEX-2450" /> <a name="INDEX-2451" />value.<a name="INDEX-2452" /> <a name="INDEX-2453" /> <a name="INDEX-2454" /> <a name="INDEX-2455" />
</p>

</div>


<hr width="684" align="left" />
<div class="navbar"><table width="684" border="0"><tr><td align="left" valign="top" width="228"><a href="ch12_03.htm"><img alt="Previous" border="0" src="../gifs/txtpreva.gif" /></a></td><td align="center" valign="top" width="228"><a href="index.htm"><img alt="Home" border="0" src="../gifs/txthome.gif" /></a></td><td align="right" valign="top" width="228"><a href="ch13_01.htm"><img alt="Next" border="0" src="../gifs/txtnexta.gif" /></a></td></tr><tr><td align="left" valign="top" width="228">12.3. JavaScript</td><td align="center" valign="top" width="228"><a href="index/index.htm"><img alt="Book Index" border="0" src="../gifs/index.gif" /></a></td><td align="right" valign="top" width="228">13. Dynamic Documents</td></tr></table></div>
<hr width="684" align="left" />

<img alt="Library Navigation Links" border="0" src="../gifs/navbar.gif" usemap="#library-map" />
<p><font size="-1"><a href="copyrght.htm">Copyright &copy; 2002</a> O'Reilly &amp; Associates. All rights reserved.</font></p>

<map name="library-map"><area href="../index.htm" coords="0,1,78,93" shape="rect" /><area href="../wdesign/index.htm" coords="80,2,155,96" shape="rect" /><area href="index.htm" coords="158,0,263,97" shape="rect" /><area href="../audio/index.htm" coords="265,1,335,97" shape="rect" /><area href="../css/index.htm" coords="338,1,434,93" shape="rect" /><area href="../action/index.htm" coords="439,0,540,102" shape="rect" /><area href="../infoarch/index.htm" coords="544,0,685,102" shape="rect" /></map>

</body></html>