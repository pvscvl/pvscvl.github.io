<html><head><title>The &lt;input&gt; Tag (HTML &amp; XHTML: The Definitive Guide, 4th Edition)</title><link rel="stylesheet" type="text/css" href="../style/style1.css" />

<meta name="DC.Creator" content="Chuck Musciano and Bill Kennedy" /><meta name="DC.Format" content="text/xml" scheme="MIME" /><meta name="DC.Language" content="en-US" /><meta name="DC.Publisher" content="O'Reilly &amp; Associates, Inc." /><meta name="DC.Source" scheme="ISBN" content="059600026XL" /><meta name="DC.Subject.Keyword" content="stuff" /><meta name="DC.Title" content="HTML &amp; XHTML: The Definitive Guide, 4th Edition" /><meta name="DC.Type" content="Text.Monograph" />

</head><body bgcolor="#ffffff">

<img alt="Book Home" border="0" src="gifs/smbanner.gif" usemap="#banner-map" /><map name="banner-map"><area shape="rect" coords="1,-2,616,66" href="index.htm" alt="HTML &amp; XHTML: The Definitive Guide" /><area shape="rect" coords="629,-11,726,25" href="jobjects/fsearch.htm" alt="Search this book" /></map>

<div class="navbar"><table width="684" border="0"><tr><td align="left" valign="top" width="228"><a href="ch09_04.htm"><img alt="Previous" border="0" src="../gifs/txtpreva.gif" /></a></td><td align="center" valign="top" width="228"><a href="index.htm">HTML &amp; XHTML: The Definitive Guide, 4th Edition</a></td><td align="right" valign="top" width="228"><a href="ch09_06.htm"><img alt="Next" border="0" src="../gifs/txtnexta.gif" /></a></td></tr></table></div>
<hr width="684" align="left" />


<h2 class="sect1">9.5. The &lt;input&gt; Tag</h2>

<p>Use the <tt class="literal">&lt;input&gt;</tt><a name="INDEX-1814" /> <a name="INDEX-1815" /> tag to define any one of a number of
common form "controls," as they are called in the HTML 4
and XHTML standards, including text fields, multiple-choice lists,
clickable images, and submission buttons. Although there are many
attributes for the <tt class="literal">&lt;input&gt;</tt> tag, only the
<tt class="literal">type</tt> and <tt class="literal">name</tt> attributes are
required for each element (only <tt class="literal">type</tt> for a
submission or reset button; see following explanation). And as we
describe in detail later, each type of input control uses only a
subset of the allowed attributes. Additional
<tt class="literal">&lt;input&gt;</tt> attributes may be required based
upon which type of form element you specify.
</p>

<p><a href="ch09_05.htm">Table 9-1</a> summarizes the various form
&lt;<tt class="literal">input</tt>&gt; types and attributes, required and
optional.
</p>

<a name="html4-CHP-9-TABLE-1" /><h4 class="objtitle">Table 9-1. Required and Some Common Form Element Attributes </h4><table border="1">




























<tr>
<th>
<p>Form Tag or &lt;input&gt; Type</p>
</th>
<th>
<p>Attributes<a href="#FOOTNOTE-58">[58]</a>
</p>
</th>
</tr>
<tr>
<th />
<th>
<p>accept</p>
</th>
<th>
<p>accesskey</p>
</th>
<th>
<p>align</p>
</th>
<th>
<p>alt</p>
</th>
<th>
<p>border</p>
</th>
<th>
<p>cols</p>
</th>
<th>
<p>checked</p>
</th>
<th>
<p>disabled</p>
</th>
<th>
<p>maxlength</p>
</th>
<th>
<p>multiple</p>
</th>
<th>
<p>name</p>
</th>
<th>
<p>notab</p>
</th>
<th>
<p>onBlur</p>
</th>
<th>
<p>onChange</p>
</th>
<th>
<p>onClick</p>
</th>
<th>
<p>onFocus</p>
</th>
<th>
<p>onSelect</p>
</th>
<th>
<p>readonly</p>
</th>
<th>
<p>rows</p>
</th>
<th>
<p>size</p>
</th>
<th>
<p>src</p>
</th>
<th>
<p>tabindex</p>
</th>
<th>
<p>taborder</p>
</th>
<th>
<p>usemap</p>
</th>
<th>
<p>value</p>
</th>
<th>
<p>wrap</p>
</th>
</tr>


<tr>
<td>
<p>button</p>
</td>
<td>

</td>
<td>
<p><img src="figs/squ.gif"></p>
</td>
<td>

</td>
<td>

</td>
<td>

</td>
<td>

</td>
<td>

</td>
<td>
<p><img src="figs/squ.gif"></p>
</td>
<td>

</td>
<td>

</td>
<td>
<p>  x  </p>
</td>
<td>
<p><img src="figs/squ.gif"></p>
</td>
<td>
<p><img src="figs/squ.gif"></p>
</td>
<td>

</td>
<td>
<p><img src="figs/squ.gif"></p>
</td>
<td>
<p><img src="figs/squ.gif"></p>
</td>
<td>

</td>
<td>

</td>
<td>

</td>
<td>

</td>
<td>

</td>
<td>
<p><img src="figs/squ.gif"></p>
</td>
<td>
<p><img src="figs/squ.gif"></p>
</td>
<td>

</td>
<td>
<p>  x  </p>
</td>
<td>

</td>
</tr>
<tr>
<td>
<p>checkbox</p>
</td>
<td>

</td>
<td>
<p><img src="figs/squ.gif"></p>
</td>
<td>

</td>
<td>

</td>
<td>

</td>
<td>

</td>
<td>
<p><img src="figs/squ.gif"></p>
</td>
<td>
<p><img src="figs/squ.gif"></p>
</td>
<td>

</td>
<td>

</td>
<td>
<p>  x  </p>
</td>
<td>
<p><img src="figs/squ.gif"></p>
</td>
<td>

</td>
<td>

</td>
<td>
<p><img src="figs/squ.gif"></p>
</td>
<td>

</td>
<td>

</td>
<td>
<p><img src="figs/squ.gif"></p>
</td>
<td>

</td>
<td>

</td>
<td>

</td>
<td>
<p><img src="figs/squ.gif"></p>
</td>
<td>
<p><img src="figs/squ.gif"></p>
</td>
<td>

</td>
<td>
<p>  x  </p>
</td>
<td>

</td>
</tr>
<tr>
<td>
<p>file</p>
</td>
<td>
<p><img src="figs/squ.gif"></p>
</td>
<td>
<p><img src="figs/squ.gif"></p>
</td>
<td>

</td>
<td>

</td>
<td>

</td>
<td>

</td>
<td>

</td>
<td>
<p><img src="figs/squ.gif"></p>
</td>
<td>
<p><img src="figs/squ.gif"></p>
</td>
<td>

</td>
<td>
<p>  x  </p>
</td>
<td>
<p><img src="figs/squ.gif"></p>
</td>
<td>
<p><img src="figs/squ.gif"></p>
</td>
<td>
<p><img src="figs/squ.gif"></p>
</td>
<td>
<p><img src="figs/squ.gif"></p>
</td>
<td>
<p><img src="figs/squ.gif"></p>
</td>
<td>

</td>
<td>
<p><img src="figs/squ.gif"></p>
</td>
<td>

</td>
<td>
<p><img src="figs/squ.gif"></p>
</td>
<td>

</td>
<td>
<p><img src="figs/squ.gif"></p>
</td>
<td>
<p><img src="figs/squ.gif"></p>
</td>
<td>

</td>
<td>
<p><img src="figs/squ.gif"></p>
</td>
<td>

</td>
</tr>
<tr>
<td>
<p>hidden</p>
</td>
<td>

</td>
<td>

</td>
<td>

</td>
<td>

</td>
<td>

</td>
<td>

</td>
<td>

</td>
<td>

</td>
<td>

</td>
<td>

</td>
<td>
<p>  x  </p>
</td>
<td>

</td>
<td>

</td>
<td>

</td>
<td>

</td>
<td>

</td>
<td>

</td>
<td>

</td>
<td>

</td>
<td>

</td>
<td>

</td>
<td>

</td>
<td>

</td>
<td>

</td>
<td>
<p>  x  </p>
</td>
<td>

</td>
</tr>
<tr>
<td>
<p>image</p>
</td>
<td>

</td>
<td>
<p><img src="figs/squ.gif"></p>
</td>
<td>
<p><img src="figs/squ.gif"></p>
</td>
<td>
<p><img src="figs/squ.gif"></p>
</td>
<td>
<p><img src="figs/squ.gif"></p>
</td>
<td>

</td>
<td>

</td>
<td>
<p><img src="figs/squ.gif"></p>
</td>
<td>

</td>
<td>

</td>
<td>
<p><img src="figs/squ.gif"></p>
</td>
<td>
<p><img src="figs/squ.gif"></p>
</td>
<td>

</td>
<td>

</td>
<td>
<p><img src="figs/squ.gif"></p>
</td>
<td>

</td>
<td>

</td>
<td>

</td>
<td>

</td>
<td>

</td>
<td>
<p>  x  </p>
</td>
<td>
<p><img src="figs/squ.gif"></p>
</td>
<td>
<p><img src="figs/squ.gif"></p>
</td>
<td>
<p><img src="figs/squ.gif"></p>
</td>
<td>

</td>
<td>

</td>
</tr>
<tr>
<td>
<p>password</p>
</td>
<td>

</td>
<td>
<p><img src="figs/squ.gif"></p>
</td>
<td>

</td>
<td>

</td>
<td>

</td>
<td>

</td>
<td>

</td>
<td>
<p><img src="figs/squ.gif"></p>
</td>
<td>
<p><img src="figs/squ.gif"></p>
</td>
<td>

</td>
<td>
<p>  x  </p>
</td>
<td>
<p><img src="figs/squ.gif"></p>
</td>
<td>
<p><img src="figs/squ.gif"></p>
</td>
<td>
<p><img src="figs/squ.gif"></p>
</td>
<td>
<p><img src="figs/squ.gif"></p>
</td>
<td>
<p><img src="figs/squ.gif"></p>
</td>
<td>
<p><img src="figs/squ.gif"></p>
</td>
<td>
<p><img src="figs/squ.gif"></p>
</td>
<td>

</td>
<td>
<p><img src="figs/squ.gif"></p>
</td>
<td>

</td>
<td>
<p><img src="figs/squ.gif"></p>
</td>
<td>
<p><img src="figs/squ.gif"></p>
</td>
<td>

</td>
<td>
<p>  x  </p>
</td>
<td>

</td>
</tr>
<tr>
<td>
<p>radio</p>
</td>
<td>

</td>
<td>
<p><img src="figs/squ.gif"></p>
</td>
<td>

</td>
<td>

</td>
<td>

</td>
<td>

</td>
<td>
<p><img src="figs/squ.gif"></p>
</td>
<td>
<p><img src="figs/squ.gif"></p>
</td>
<td>

</td>
<td>

</td>
<td>
<p>  x  </p>
</td>
<td>
<p><img src="figs/squ.gif"></p>
</td>
<td>

</td>
<td>

</td>
<td>
<p><img src="figs/squ.gif"></p>
</td>
<td>

</td>
<td>

</td>
<td>
<p><img src="figs/squ.gif"></p>
</td>
<td>

</td>
<td>

</td>
<td>

</td>
<td>
<p><img src="figs/squ.gif"></p>
</td>
<td>
<p><img src="figs/squ.gif"></p>
</td>
<td>

</td>
<td>
<p>  x  </p>
</td>
<td>

</td>
</tr>
<tr>
<td>
<p>reset</p>
</td>
<td>

</td>
<td>
<p><img src="figs/squ.gif"></p>
</td>
<td>

</td>
<td>

</td>
<td>

</td>
<td>

</td>
<td>

</td>
<td>
<p><img src="figs/squ.gif"></p>
</td>
<td>

</td>
<td>

</td>
<td>

</td>
<td>
<p><img src="figs/squ.gif"></p>
</td>
<td>

</td>
<td>

</td>
<td>
<p><img src="figs/squ.gif"></p>
</td>
<td>

</td>
<td>

</td>
<td>

</td>
<td>

</td>
<td>

</td>
<td>

</td>
<td>
<p><img src="figs/squ.gif"></p>
</td>
<td>
<p><img src="figs/squ.gif"></p>
</td>
<td>

</td>
<td>
<p><img src="figs/squ.gif"></p>
</td>
<td>

</td>
</tr>
<tr>
<td>
<p>submit</p>
</td>
<td>

</td>
<td>
<p><img src="figs/squ.gif"></p>
</td>
<td>

</td>
<td>

</td>
<td>

</td>
<td>

</td>
<td>

</td>
<td>
<p><img src="figs/squ.gif"></p>
</td>
<td>

</td>
<td>

</td>
<td>
<p><img src="figs/squ.gif"></p>
</td>
<td>
<p><img src="figs/squ.gif"></p>
</td>
<td>

</td>
<td>

</td>
<td>
<p><img src="figs/squ.gif"></p>
</td>
<td>

</td>
<td>

</td>
<td>

</td>
<td>

</td>
<td>

</td>
<td>

</td>
<td>
<p><img src="figs/squ.gif"></p>
</td>
<td>
<p><img src="figs/squ.gif"></p>
</td>
<td>

</td>
<td>
<p><img src="figs/squ.gif"></p>
</td>
<td>

</td>
</tr>
<tr>
<td>
<p>text</p>
</td>
<td>

</td>
<td>
<p><img src="figs/squ.gif"></p>
</td>
<td>

</td>
<td>

</td>
<td>

</td>
<td>

</td>
<td>

</td>
<td>
<p><img src="figs/squ.gif"></p>
</td>
<td>
<p><img src="figs/squ.gif"></p>
</td>
<td>

</td>
<td>
<p>  x  </p>
</td>
<td>
<p><img src="figs/squ.gif"></p>
</td>
<td>
<p><img src="figs/squ.gif"></p>
</td>
<td>
<p><img src="figs/squ.gif"></p>
</td>
<td>
<p><img src="figs/squ.gif"></p>
</td>
<td>
<p><img src="figs/squ.gif"></p>
</td>
<td>
<p><img src="figs/squ.gif"></p>
</td>
<td>
<p><img src="figs/squ.gif"></p>
</td>
<td>

</td>
<td>
<p><img src="figs/squ.gif"></p>
</td>
<td>

</td>
<td>
<p><img src="figs/squ.gif"></p>
</td>
<td>
<p><img src="figs/squ.gif"></p>
</td>
<td>

</td>
<td>
<p><img src="figs/squ.gif"></p>
</td>
<td>

</td>
</tr>
<tr>
<td>
<p><tt class="literal">&lt;button&gt;</tt></p>
</td>
<td>

</td>
<td>
<p><img src="figs/squ.gif"></p>
</td>
<td>

</td>
<td>

</td>
<td>

</td>
<td>

</td>
<td>

</td>
<td>
<p><img src="figs/squ.gif"></p>
</td>
<td>

</td>
<td>

</td>
<td>
<p>  x  </p>
</td>
<td>

</td>
<td>
<p><img src="figs/squ.gif"></p>
</td>
<td>

</td>
<td>
<p><img src="figs/squ.gif"></p>
</td>
<td>
<p><img src="figs/squ.gif"></p>
</td>
<td>

</td>
<td>

</td>
<td>

</td>
<td>

</td>
<td>

</td>
<td>
<p><img src="figs/squ.gif"></p>
</td>
<td>

</td>
<td>

</td>
<td>
<p><img src="figs/squ.gif"></p>
</td>
<td>

</td>
</tr>
<tr>
<td>
<p><tt class="literal">&lt;select&gt;</tt></p>
</td>
<td>

</td>
<td>

</td>
<td>

</td>
<td>

</td>
<td>

</td>
<td>

</td>
<td>

</td>
<td>
<p><img src="figs/squ.gif"></p>
</td>
<td>

</td>
<td>
<p><img src="figs/squ.gif"></p>
</td>
<td>
<p>  x  </p>
</td>
<td>

</td>
<td>
<p><img src="figs/squ.gif"></p>
</td>
<td>
<p><img src="figs/squ.gif"></p>
</td>
<td>
<p><img src="figs/squ.gif"></p>
</td>
<td>
<p><img src="figs/squ.gif"></p>
</td>
<td>

</td>
<td>

</td>
<td>

</td>
<td>
<p><img src="figs/squ.gif"></p>
</td>
<td>

</td>
<td>
<p><img src="figs/squ.gif"></p>
</td>
<td>

</td>
<td>

</td>
<td>

</td>
<td>

</td>
</tr>
<tr>
<td>
<p><tt class="literal">&lt;textarea&gt;</tt></p>
</td>
<td>

</td>
<td>
<p><img src="figs/squ.gif"></p>
</td>
<td>

</td>
<td>

</td>
<td>

</td>
<td>
<p><img src="figs/squ.gif"></p>
</td>
<td>

</td>
<td>
<p><img src="figs/squ.gif"></p>
</td>
<td>

</td>
<td>

</td>
<td>
<p>  x  </p>
</td>
<td>

</td>
<td>
<p><img src="figs/squ.gif"></p>
</td>
<td>
<p><img src="figs/squ.gif"></p>
</td>
<td>
<p><img src="figs/squ.gif"></p>
</td>
<td>
<p><img src="figs/squ.gif"></p>
</td>
<td>
<p><img src="figs/squ.gif"></p>
</td>
<td>

</td>
<td>
<p><img src="figs/squ.gif"></p>
</td>
<td>

</td>
<td>

</td>
<td>
<p><img src="figs/squ.gif"></p>
</td>
<td>

</td>
<td>

</td>
<td>

</td>
<td>
<p><img src="figs/squ.gif"></p>
</td>
</tr>

</table><blockquote class="footnote"><a name="FOOTNOTE-58" /><p>[58]( x = required; <img src="figs/squ.gif"> = optional; blank = not
supported)</p></blockquote>

<a name="html4-CHP-9-SIDEBAR-2" /><blockquote><table border="1" cellpadding="6"><tr><td>
<h4 class="objtitle">&lt;input&gt;</h4>

<dl>
<dt><b>Function:</b></dt>
<dd>
<p>Create an input element within a form</p>
</dd>


<dt><b>Attributes:</b></dt><dd>

<table border="0">
<tr><td><p>ACCEPT</p></td><td><p>ONFOCUS</p></td></tr>


<tr><td><p>ACCESSKEY</p></td><td><p>ONKEYDOWN</p></td></tr>


<tr><td><p>ALIGN</p></td><td><p>ONKEYPRESS</p></td></tr>


<tr><td><p>ALT</p></td><td><p>ONKEYUP</p></td></tr>


<tr><td><p>BORDER <img src="figs/HTML_dingbat_N.gif"> </p></td><td><p>ONMOUSEDOWN</p></td></tr>


<tr><td><p>CHECKED</p></td><td><p>ONMOUSEMOVE</p></td></tr>


<tr><td><p>CLASS</p></td><td><p>ONMOUSEOUT</p></td></tr>


<tr><td><p>DIR</p></td><td><p>ONMOUSEUP</p></td></tr>


<tr><td><p>DISABLED</p></td><td><p>ONSELECT</p></td></tr>


<tr><td><p>ID</p></td><td><p>READONLY</p></td></tr>


<tr><td><p>LANG</p></td><td><p>SIZE</p></td></tr>


<tr><td><p>MAXLENGTH</p></td><td><p>SRC</p></td></tr>


<tr><td><p>NAME</p></td><td><p>STYLE</p></td></tr>


<tr><td><p>NOTAB <img src="figs/HTML_dingbat_I.gif"></p></td><td><p>TABINDEX</p></td></tr>


<tr><td><p>ONMOUSEOVER</p></td><td><p>TABORDER <img src="figs/HTML_dingbat_I.gif"></p></td></tr>


<tr><td><p>ONBLUR</p></td><td><p>TITLE</p></td></tr>


<tr><td><p>ONCHANGE</p></td><td><p>TYPE</p></td></tr>


<tr><td><p>ONCLICK</p></td><td><p>USEMAP</p></td></tr>


<tr><td><p>ONDBLCLICK</p></td><td><p>VALUE</p></td></tr>

</table>
</dd></dl>
<dl>
<dt><b>End tag:</b></dt>
<dd>
<p>None in HTML; &lt;/input&gt; or &lt;input ... /&gt; with XHTML</p>
</dd>

</dl>

<dl>
<dt><b>Contains:</b></dt>
<dd>
<p>Nothing</p>
</dd>

</dl>

<dl>
<dt><b>Used in:</b></dt>
<dd>
<p><em class="emphasis">form_content</em></p>
</dd>

</dl>
</td></tr></table></blockquote>

<p>You select the type of control to include in the form with the
<tt class="literal">&lt;input&gt;</tt> tag's required
<tt class="literal">type</tt> attribute, and you name the field (used
during the form submission process to the server; see earlier
description) with the <tt class="literal">name</tt><a name="INDEX-1816" /> attribute. Although the value
of the <tt class="literal">name</tt> attribute is technically an arbitrary
string, we recommend that you use a name without embedded spaces or
punctuation. If you stick to just letters and numbers (but no leading
digits) and represent spaces with the underscore ( _ ) character,
you'll have fewer problems. For example,
"cost_in_dollars" and "overhead_percentage"
are good choices for element names; "$cost" and
"overhead %" might cause problems.
</p>

<p>In addition, notice that the name you give to a form control is
directly associated with the data that the u ser inputs to that
control and which gets passed to the form-processing server. It is
not the same as and does not share the same namespace with the
<tt class="literal">name</tt> attribute for a hyperlink fragment or a frame
document.
</p>

<a name="html4-CHP-9-SECT-5.1" /><div class="sect2">
<h3 class="sect2">9.5.1. Text Fields in Forms</h3>

<p><a name="INDEX-1817" /> <a name="INDEX-1818" />The
HTML and XHTML standards let you include four types of text entry
controls in your forms: a conventional text entry field, a masked
field for secure data entry, a field that names a file to be
transmitted as part of your form data, and a special multiline text
entry <tt class="literal">&lt;textarea&gt;</tt> tag. The first three types
are <tt class="literal">&lt;input&gt;</tt>-based controls; the fourth is a
separate tag that we describe in <a href="ch09_07.htm">Section 9.7, "Multiline Text Areas"</a>.
</p>

<a name="html4-CHP-9-SECT-5.1.1" /><div class="sect3">
<h3 class="sect3">9.5.1.1. Conventional text fields</h3>

<p>The most useful as well as the most common form input control is the
<a name="INDEX-1819" /> <a name="INDEX-1820" />text entry field. A text entry
field appears in the browser window as an empty box on one line and
accepts a single line of user input that becomes the value of the
control when the user submits the form to the server. To create a
text entry field inside a form in your document, set the
<tt class="literal">type</tt> of the <tt class="literal">&lt;input&gt;</tt> form
element to <tt class="literal">text</tt>. Include a <tt class="literal">name</tt>
attribute as well; it's required.
</p>

<p><a name="INDEX-1821" />What constitutes a line of text differs
among the various browsers. Fortunately, HTML and XHTML give us a
way, with <tt class="literal">size</tt><a name="INDEX-1822" /> <a name="INDEX-1823" /> and <tt class="literal">maxlength</tt>
attributes, to dictate the width, in characters, of the text input
display box, and how many total characters to accept from the user,
respectively. The value for either attribute is an integer equal to
the maximum number of characters you'll allow the user to see
and type in the field. If <tt class="literal">maxlength</tt> exceeds
<tt class="literal">size</tt>, then text scrolls back and forth within the
text entry box. If <tt class="literal">maxlength</tt> is smaller than
<tt class="literal">size</tt>, there will be extra blank space in the text
entry box to make up the difference between the two attributes.
</p>

<p>The default value for <tt class="literal">size</tt> is dependent upon the
browser; the default value for <tt class="literal">maxlength</tt> is
unlimited. We recommend that you set them yourself. Adjust the
<tt class="literal">size</tt> attribute so that the text entry box does not
extend beyond the right margin of a typical browser window (about 60
characters with a very short prompt). Set
<tt class="literal">maxlength</tt> to a reasonable number of characters;
for example, 2 for state abbreviations, 12 for phone numbers, and so
on.
</p>

<p>A text entry field is usually blank until the user types something
into it. You may, however, specify an initial default value for the
field with the <tt class="literal">value</tt> attribute. The user may
modify the default, of course. If the user presses a form's
reset button, the value of the field is reset to this default value.
<a href="ch09_05.htm">Section 9.5.4.2, "Reset buttons"</a>
</p>

<p>These are all valid text entry form controls: </p>

<blockquote><pre class="code">&lt;input type=text name=comments&gt;
&lt;input type=text name=zipcode size=10 maxlength=10&gt;
&lt;input type="text" name="address" size="30" maxlength="256" /&gt;
&lt;input type="text" name="rate" size="3" maxlength="3" value="100" /&gt;</pre></blockquote>

<p>The first example is HTML and creates a text entry field set to the
browser's default width and maximum length. As we argued, this
is not a good idea, because defaults vary widely among browsers, and
your form layout is sure to look bad with some of them. Rather, fix
the width and maximum number of acceptable input characters as we do
in the second example: it lets the user type in up to ten characters
inside an input box ten characters wide. Its value will be sent to
the server with the name "zipcode" when the user submits
the form.
</p>

<p>The third example is XHTML and tells the browser to display a text
input box 30 characters wide into which the user may type up to 256
characters. The browser automatically scrolls text inside the input
box to expose the extra characters.
</p>

<p>The last text input control is XHTML, too, three characters wide so
that the user can type in only three characters, and sets its initial
value to 100.
</p>

<p>Notice in the second and fourth examples, it is implied that certain
kinds of data are to be entered by the user -- a postal code or a
numeric rate, respectively. Except for limiting <em class="emphasis">how
many</em>, neither HTML nor XHTML provide a way for you to
dictate <em class="emphasis">what</em> characters may be typed into a text
input field. For instance, in the last example field, the user may
type "ABC" even though you intend it to be a number less
than 1,000. Your server-side application or an applet must trap
erroneous or mistaken input, as well as check for incomplete forms,
and send the appropriate error message to the user when things
aren't right. That can be a tedious process, so we emphasize
again: provide clear and precise instructions and prompts. Make sure
your forms tell users what kinds of input you expect from them,
thereby reducing the number of mistakes they may make when filling it
out.<a name="INDEX-1824" />
<a name="INDEX-1825" />
<a name="INDEX-1826" />
</p>

</div>

<a name="html4-CHP-9-SECT-5.1.2" /><div class="sect3">
<h3 class="sect3">9.5.1.2. Masked text controls</h3>

<p><a name="INDEX-1827" />
<a name="INDEX-1828" />
<a name="INDEX-1829" />
<a name="INDEX-1830" />Like the Lone Ranger, the mask
is on the good guys in a masked text field. It behaves just like a
conventional text control in a form, except that the user-typed
characters don't appear onscreen. Rather, the browser obscures
the characters in a masked text to keep such things as passwords and
other sensitive codes away from prying eyes.
</p>

<p>To create a masked text control, set the value of the
<tt class="literal">type</tt> attribute to <tt class="literal">password</tt>. All
other attributes and semantics of the conventional text control apply
to the masked one. Hence, you must provide a name, and you may
specify a <tt class="literal">size</tt> and <tt class="literal">maxlength</tt>
for the field, as well as an initial <tt class="literal">value</tt> (we
recommend it).
</p>

<p>Don't be misled: a masked text control is not all that secure.
The typed-in value is only obscured onscreen; the browser transmits
it unencrypted when the form is submitted to the server, unless you
are using a special secure-forms server. So, while prying eyes may
not see them onscreen, devious bad guys may steal the information
electronically.
</p>

</div>

<a name="html4-CHP-9-SECT-5.1.3" /><div class="sect3">
<h3 class="sect3">9.5.1.3. File-selection controls</h3>

<p><a name="INDEX-1831" /> <a name="INDEX-1832" />As its name implies, the
file-selection control lets users select a file stored on their
computer and send it to the server when they submit the form. The
browser presents the file-selection form control to the user like
other text fields, and accompanied by a button labeled
"Browse" to its right. Users either type the pathname of
the file directly as text into the field or, with the Browse option,
select the name of a locally stored file from a system-specific
dialog box.
</p>

<p>Create a file-selection control in a form by setting the value of the
<tt class="literal">type</tt> attribute to <tt class="literal">file</tt>. Like
other text controls, the
<tt class="literal">size</tt><a name="INDEX-1833" /> <a name="INDEX-1834" /> and <tt class="literal">maxlength</tt> of a
file-selection field should be set to appropriate values, with the
browser creating a field 20 characters wide, if not otherwise
directed. Since file and directory names differ widely among systems,
it makes no sense to provide a default value for this control. As
such, the <tt class="literal">value</tt> attribute should not be used with
this kind of text control.
</p>
<p>The Browse button opens a platform-specific file-selection dialog box that allows users to select a value for the field. In this case, the entire pathname of the selected file is placed into the field, even if the length of that pathname exceeds the control's specified <tt class="literal">maxlength</tt>. </p>


<p>Use the <tt class="literal">accept</tt><a name="INDEX-1835" /> <a name="INDEX-1836" /> <a name="INDEX-1837" />
<a name="INDEX-1838" /> attribute to constrain the types
of files that the browser lets the user select. Its value is a
comma-separated list of MIME encodings; users can select only files
whose type matches one of those in the list. For example, to restrict
the selection to images, you might add
<tt class="literal">accept="image/*"</tt> to the file selection
<tt class="literal">&lt;input&gt;</tt> tag.
</p>

<p>Unlike other form input controls, the file-selection field works
correctly only with a specific form data encoding and transmission
method. If you include one or more file-selection fields in your
form, you must set the
<tt class="literal">enctype</tt><a name="INDEX-1839" /> attribute of the
<tt class="literal">&lt;form&gt;</tt> tag to
<tt class="literal">multipart/form-data</tt> and the
<tt class="literal">&lt;form&gt;</tt> tag's <tt class="literal">method</tt>
attribute to <tt class="literal">post</tt>. Otherwise, the file-selection
field behaves like a regular text field, transmitting its value (that
is, the file's pathname) to the server instead of the contents
of the file itself.
</p>

<p>This is all easier than it may sound. For example, here is an HTML
form that collects a person's name and favorite file:
</p>

<blockquote><pre class="code">&lt;form enctype="multipart/form-data" method=post
    action="cgi-bin/save_file"&gt;
Your name: &lt;input type=text size=20 name=the_name&gt;
&lt;p&gt;
Your favorite file: &lt;input type=file size=20 name=fav_file&gt;
&lt;/form&gt;</pre></blockquote>

<p>The data transmitted from the browser to the server for this example
form has two parts. The first contains the value for the name field,
and the second contains the name and contents of the specified file:
</p>

<blockquote><pre class="code">-----------------------------6099238414674
Content-Disposition: form-data; name="the_name"
  
One line of text field contents
-----------------------------6099238414674
Content-Disposition: form-data; name="fav_file"; filename="abc"
  
First line of file
...
Last line of file
-----------------------------6099238414674--</pre></blockquote>

<p>The browsers don't check that a valid file has been specified
by the user. If no file is specified, the filename portion of the
<tt class="literal">Content-Disposition</tt><a name="INDEX-1840" /> header will be empty. If the file
doesn't exist, its name appears in the filename subheader, but
there will be no <tt class="literal">Content-Type</tt><a name="INDEX-1841" /> header or subsequent lines of file
content. Valid files may contain nonprintable or binary data; there
is no way to restrict user-selectable file types. In light of these
potential problems, the form-processing application on the server
should be robust enough to handle missing files, erroneous files,
extremely large files, and files with unusual or unexpected<a name="INDEX-1842" /> <a name="INDEX-1843" /> formats.<a name="INDEX-1844" /> <a name="INDEX-1845" />
</p>

</div>
</div>
<a name="html4-CHP-9-SECT-5.2" /><div class="sect2">
<h3 class="sect2">9.5.2. Checkboxes</h3>

<p><a name="INDEX-1846" />
<a name="INDEX-1847" />
<a name="INDEX-1848" />The checkbox form control
gives users a way to select or deselect an item quickly and easily in
your form. Checkboxes may also be grouped to create a set of choices,
any of which may be selected or deselected by the user.
</p>

<p>Create individual checkboxes by setting the <tt class="literal">type</tt>
attribute for each <tt class="literal">&lt;input&gt;</tt> tag to
<tt class="literal">checkbox</tt>. Include the required
<tt class="literal">name</tt> and <tt class="literal">value</tt> attributes. If
the item is selected by the user, it will contribute a value when the
form is submitted. If it is not selected, that element will not
contribute a value. The optional <tt class="literal">checked</tt> attribute
(no value) tells the browser to display a checked checkbox and
include the value when submitting the form to the server unless the
user specifically clicks the mouse to deselect (uncheck) the box.
</p>

<p>The popular browsers include the value of selected (checked)
checkboxes with other form parameters when they are submitted to the
server. The value of the checked checkbox is the text string you
specify in the required <tt class="literal">value</tt> attribute. For
example, in XHTML:
</p>

<blockquote><pre class="code">&lt;form&gt;
  What pets do you own?
  &lt;p&gt;
    &lt;input type="checkbox" name="pets" value="dog" /&gt; Dog
  &lt;br /&gt;
    &lt;input type="checkbox" checked="checked" name="pets" value="cat" /&gt; Cat
  &lt;br /&gt;
    &lt;input type="checkbox" name="pets" value="bird" /&gt; Bird
  &lt;br /&gt;
    &lt;input type="checkbox" name="pets" value="fish" /&gt; Fish
  &lt;/p&gt;
&lt;/form&gt;</pre></blockquote>

<p>creates a checkbox group as shown in <a href="ch09_05.htm">Figure 9-3</a>. </p>

<a name="html4-CHP-9-FIG-3" /><div class="figure"><img height="180" alt="Figure 9-3" src="figs/xhtm.0903.gif" width="368" /></div><h4 class="objtitle">Figure 9-3. A checkbox group</h4>

<p>Although part of the group, each checkbox control appears as a
separate choice onscreen. Notice too, with all due respect to dog,
bird, and fish lovers, that we've preselected the cat checkbox
with the <tt class="literal">checked</tt> attribute in its tag. We've
also provided text labels; the similar value attributes don't
appear in the browser's window, but are the values included in
the form's parameter list if the checkbox is selected and the
form is submitted to the server by the user. Also, you need to use
paragraph or line-break tags to control the layout of your checkbox
group, as you do for other form controls.
</p>

<p>In the example, if "Cat" and "Fish" are
checked when the form is submitted, the values included in the
parameter list sent to the server would be:
</p>

<blockquote><pre class="code">pets=cat
pets=fish</pre></blockquote>

</div>
<a name="html4-CHP-9-SECT-5.3" /><div class="sect2">
<h3 class="sect2">9.5.3. Radio Buttons</h3>

<p><a name="INDEX-1849" /> <a name="INDEX-1850" /> <a name="INDEX-1851" />
<a name="INDEX-1852" />Radio-button form controls are
similar in behavior to checkboxes, except that only one in the group
may be selected by the user.<a href="#FOOTNOTE-59">[59]</a> Create a radio
button by setting the <tt class="literal">type</tt> attribute of the
<tt class="literal">&lt;input&gt;</tt> tag to <tt class="literal">radio</tt>.
Like with checkbox controls, radio buttons each require a
<tt class="literal">name</tt> and <tt class="literal">value</tt> attribute. Radio
buttons with the same name are members of a group. One of them may be
initially checked by including the <tt class="literal">checked</tt>
attribute with that element. If no element in the group is checked,
the browser automatically checks the first element in the group.
</p><blockquote class="footnote"> <a name="FOOTNOTE-59" /><p>[59]Some of us are old
enough, while not yet senile, to recall when automobile radios had
mechanical pushbuttons for selecting a station. Pushing in one button
popped out the previously depressed one, implementing a mechanical
one-of-many choice mechanism.</p> </blockquote>

<p>You should give each radio button element a different value, so that
the form-processing server can sort them out after submission of the
form.
</p>

<p>Here's the previous example reworked in HTML so you get to
choose only one animal as a favorite pet (see <a href="ch09_05.htm">Figure 9-4</a>):
</p>

<blockquote><pre class="code">&lt;form&gt;
  Which type of animal is your favorite pet?
  &lt;p&gt;
    &lt;input type=radio name=favorite value="dog"&gt; Dog
    &lt;input type=radio checked name=favorite value="cat"&gt; Cat
    &lt;input type=radio name=favorite value="bird"&gt; Bird
    &lt;input type=radio name=favorite value="fish"&gt; Fish
&lt;/form&gt;</pre></blockquote>

<p>Like the previous example with checkboxes, we've tipped our hat
toward felines, making the "Cat" radio button the default
choice. If you select an alternative -- "Bird," for
instance -- the browser automatically deselects "Cat."
When the user submits the form to the server, the browser includes
only one value with the name "favorite" in the list of
form parameters; <tt class="literal">favorite=bird</tt>, if that was your
choice.
</p>

<p>One of the controls in a group of radio buttons is always selected,
so it makes no sense to create a single radio button; they should
appear in your documents as groups of two or more. (Use checkboxes
for on/off, yes/no types of form <a name="INDEX-1853" /> <a name="INDEX-1854" /> <a name="INDEX-1855" /> <a name="INDEX-1856" />controls.)
</p>

<a name="html4-CHP-9-FIG-4" /><div class="figure"><img height="159" alt="Figure 9-4" src="figs/xhtm.0904.gif" width="306" /></div><h4 class="objtitle">Figure 9-4. Radio buttons allow only one selection per group</h4>

</div>
<a name="html4-CHP-9-SECT-5.4" /><div class="sect2">
<h3 class="sect2">9.5.4. Action Buttons</h3>

<p><a name="INDEX-1857" /> <a name="INDEX-1858" /> <a name="INDEX-1859" />
<a name="INDEX-1860" />Although the terminology is
potentially confusing, there is another class of buttons for forms.
Unlike the radio buttons and checkboxes described previously, these
special types of form controls act immediately, their effects cannot
be reversed, and they affect the entire contents of the form, not
just the value of a single field. These "action" buttons
(for lack of a better term) include submit, reset, regular, and
clickable image buttons. When selected by the user, both the submit
and image buttons cause the browser to submit all of the form's
parameters to the form-processing server. A regular button does not
submit the form, but can be used to invoke an applet to manipulate or
validate the form. The reset button acts locally to return a
partially filled-out form to its original (default) state. <a href="ch12_03.htm">Section 12.3.3, "JavaScript Event Handlers"</a>
</p>

<p>In this section we describe the action buttons that you may create
with the standard form <tt class="literal">&lt;input&gt;</tt> element. In
the next section, we describe in detail the newer
<tt class="literal">&lt;button&gt;</tt> tag that achieves identical effects
and allows you greater control over the presentation and display of
your form buttons.
</p>

<a name="html4-CHP-9-SECT-5.4.1" /><div class="sect3">
<h3 class="sect3">9.5.4.1. Submission buttons</h3>

<p>The <a name="INDEX-1861" />submit
button (<tt class="literal">&lt;input</tt>
<tt class="literal">type=submit&gt;</tt>) does what its name implies,
setting in motion the form's submission to the server from the
browser. You may have more than one submit button in a form. You may
also include <tt class="literal">name</tt> and <tt class="literal">value</tt>
attributes with the submit type of input form button.
</p>

<p>With the simplest submit button (that without a
<tt class="literal">name</tt> or <tt class="literal">value</tt> attribute), the
browser displays a small rectangle or oval with the default label
"Submit." Otherwise, the browser labels the button with
the text you include with the tag's <tt class="literal">value</tt>
attribute. If you provide a <tt class="literal">name</tt> attribute, the
<tt class="literal">value</tt> attribute for the submit button is added to
the parameter list the browser sends along to the server.
That's good, because it gives you a way to identify which
button in a form was pressed, letting you process any one of several
different forms with a single form processing application.
</p>

<p>The following are all valid submission buttons:</p>

<blockquote><pre class="code">&lt;input type=submit&gt;
&lt;input type=submit value="Order Kumquats"&gt;
&lt;input type="submit" value="Ship Overnight" name="ship_style" /&gt;</pre></blockquote>

<p>The first one is in HTML and is also the simplest: the browser
displays a button, labeled "Submit," which activates the
form-processing sequence when clicked by the user. It does not add an
element to the parameter list that the browser passes to the form
processing server and application.
</p>

<p>The second example HTML button has the <tt class="literal">value</tt>
attribute that makes the displayed button label "Order
Kumquats," but like the first example does not include the
button's value in the form's parameter list.
</p>

<p>The last example, in XHTML, sets the button label and makes it part
of the form's parameter list. When clicked by the user, the
last example of the submission button adds the parameter
<tt class="literal">ship_style="Ship Overnight"</tt> to the form's
parameter list.
</p>

</div>

<a name="html4-CHP-9-SECT-5.4.2" /><div class="sect3">
<h3 class="sect3">9.5.4.2. Reset buttons</h3>

<p>The <a name="INDEX-1862" />reset type
of form <tt class="literal">&lt;input&gt;</tt> button is nearly
self-explanatory: it lets the user reset -- erase or set to some
default value -- all elements in the form. Unlike the other
buttons, a reset button does not initiate form processing. Instead,
the browser does the work of resetting the form elements. The server
never knows (or cares, for that matter) if or when the user might
have pressed a reset button.
</p>

<p>By default, the browser displays a reset button with the label
"Reset." You can change that by specifying a
<tt class="literal">value</tt> attribute with your own button label.
</p>
<p>Here are two sample reset buttons: </p>

<blockquote><pre class="code">&lt;input type=reset&gt;
&lt;input type="reset" value="Use Defaults" /&gt;</pre></blockquote>

<p>The first one creates a reset button labeled "Reset"; the
browser labels the second example reset button with "Use
Defaults." They both initiate the same reset response in the
browser.
</p>

</div>

<a name="html4-CHP-9-SECT-5.4.3" /><div class="sect3">
<h3 class="sect3">9.5.4.3. Custom image buttons </h3>

<p><a name="INDEX-1863" />
<a name="INDEX-1864" /> <a name="INDEX-1865" />
<a name="INDEX-1866" />The
<tt class="literal">image</tt> type of <tt class="literal">&lt;input&gt;</tt>
form element creates a custom button that is a
"clickable" image. It's a special button made out
of your specified image that, when clicked by the user, tells the
browser to submit the form to the server and includes the x,y
coordinates of the mouse pointer in the form's parameter list,
much like the mouse-sensitive image maps we discuss in <a href="ch06_01.htm">Chapter 6, "Links and Webs"</a>. Image buttons require a
<tt class="literal">src</tt><a name="INDEX-1867" /> attribute with the URL of the image
file, and you can include a <tt class="literal">name</tt> attribute and a
descriptive <tt class="literal">alt</tt> attribute for non-graphical
browsers. Although deprecated in HTML 4, you may also use
<tt class="literal">align</tt><a name="INDEX-1868" /> <a name="INDEX-1869" />
<a name="INDEX-1870" />
<a name="INDEX-1871" /> to control alignment of the image
within the current line of text. Use the <tt class="literal">border</tt>
attribute to control the width, if any, of the frame Netscape puts
around the form image much like the <tt class="literal">border</tt>
attribute for the <tt class="literal">&lt;img&gt;</tt> tag (Internet
Explorer doesn't place a border around form
<tt class="literal">&lt;input&gt;</tt> images).
</p>

<p>Here are a couple of valid image buttons:</p>

<blockquote><pre class="code">&lt;input type="image" src="pics/map.gif" name="map" /&gt;
&lt;input type=image src="pics/xmap.gif" align=top name=map&gt;</pre></blockquote>

<p>The browser displays the designated image within the form's
content flow. The second button's image will be aligned with
the top of the adjacent text, as specified by the
<tt class="literal">align</tt> attribute. Netscape Navigator adds a border,
as it does when an image is part of an anchor
(<tt class="literal">&lt;a&gt;</tt> tag), to signal that the image is a
form button.
</p>

<p>When the user clicks the image, the browser sends the horizontal
offset, in pixels, of the mouse from the left edge of the image and
the vertical offset from the top edge of the image to the server.
These values are assigned the name of the image as specified with the
name attribute, followed by <tt class="literal">.x</tt> and
<tt class="literal">.y</tt>, respectively. Thus, if someone clicked the
image specified earlier in the example, the browser would send
parameters named <tt class="literal">map.x</tt> and
<tt class="literal">map.y</tt> to the server.
</p>

<p>Image buttons behave much like mouse-sensitive image maps
(<tt class="literal">usemap</tt>s), and, like the programs or client-side
<tt class="literal">&lt;map&gt;</tt> tags that process image maps, your
form-processor may use the x,y mouse-pointer parameters to choose a
special course of action. You should use an image button when you
need additional form information to process the user's request.
If an image map of links is all you need, use a mouse-sensitive image
map. Mouse-sensitive images also have the added benefit of providing
server-side support for automatic detection of shape selection within
the image, letting you deal with the image as a selectable collection
of shapes. Buttons with images require you to write code that
determines where the user clicked on the image and how this position
can be translated to an appropriate action by the server.
</p>

<p>Oddly, the HTML 4 and XHTML standards allow the use of the
<tt class="literal">usemap</tt> attribute with an image button, but do not
explain how such a use might conflict with normal server processing
of the x,y coordinates of the mouse position. We recommend not mixing
the two, using mouse-sensitive images outside of forms and image
buttons within forms.
</p>

</div>

<a name="html4-CHP-9-SECT-5.4.4" /><div class="sect3">
<h3 class="sect3">9.5.4.4. Push buttons</h3>

<p><a name="INDEX-1872" />Using the
<tt class="literal">&lt;input</tt> <tt class="literal">type=button&gt;</tt> tag
(or the <tt class="literal">&lt;button&gt;</tt> tag, described in <a href="ch09_06.htm">Section 9.6, "The &lt;button&gt; Tag"</a>), you can create a button that can be
clicked by the user but that does not submit or reset the form. The
<tt class="literal">value</tt> attribute can be used to set the label on
the button; the <tt class="literal">name</tt> attribute, if specified, will
cause the supplied value to be passed to the form processing script.
</p>

<p>You might wonder what value such buttons provide: little or none,
unless you supply one or more of the event
attributes<a name="INDEX-1873" />
along with a snippet of JavaScript to be executed when the user
interacts with the button. Thus empowered, regular buttons can be
used to validate form contents, update fields, manipulate the
document, and initiate all sorts of client-side activity.<a href="ch12_03.htm">Section 12.3.3, "JavaScript Event Handlers"</a>
</p>

</div>

<a name="html4-CHP-9-SECT-5.4.5" /><div class="sect3">
<h3 class="sect3">9.5.4.5. Multiple buttons in a single form</h3>

<p>You can have several buttons of the same or different types in a
single form. Even simple forms have both reset and submit buttons,
for example. To distinguish between them, make sure each has a
different <tt class="literal">value</tt> attribute, which the browser uses
for the button label. Depending on the way you program the
form-processing application, you might make the
<tt class="literal">name</tt> of each button different, but it is usually
easier to name all similarly acting buttons the same and let the
button handling subroutine sort them out by value. For instance (all
in HTML):
</p>

<blockquote><pre class="code">&lt;input type=submit name=action value="Add"&gt;
&lt;input type=submit name=action value="Delete"&gt;
&lt;input type=submit name=action value="Change"&gt;
&lt;input type=submit name=action value="Cancel"&gt;</pre></blockquote>

<p>When the user selects one of these example buttons, a form parameter
named <tt class="literal">action</tt> will be sent to the server. The value
of this parameter will be one of the button names. The server-side
application gets the value and behaves accordingly.
</p>

<p>Since an image button doesn't have a <tt class="literal">value</tt>
attribute, the only way to distinguish between several image buttons
on a single form is to ensure that they all have different names.
<a name="INDEX-1874" />
<a name="INDEX-1875" />
<a name="INDEX-1876" />
<a name="INDEX-1877" />
</p>

</div>
</div>
<a name="html4-CHP-9-SECT-5.5" /><div class="sect2">
<h3 class="sect2">9.5.5. Hidden Fields</h3>

<p><a name="INDEX-1878" />
<a name="INDEX-1879" />
<a name="INDEX-1880" />The last type of form input
control we describe in this chapter is hidden from view. No,
we're not trying to conceal anything. It's a way to embed
information into your forms that cannot be ignored or altered by the
browser or user. Rather, the <tt class="literal">&lt;input
type=hidden&gt;</tt> tag's required
<tt class="literal">name</tt> and <tt class="literal">value</tt> attributes
automatically get included in the submitted form's parameter
list. These serve to label the form and can be invaluable when
sorting out different forms or form versions from a collection of
submitted and saved forms.
</p>

<p>Another use for hidden fields is to manage user/server interactions.
For instance, it helps the server to know that the current form has
come from a person who made a similar request a few moments ago.
Normally, the server does not retain this information and each
transaction between the server and client is completely independent
from all other transactions.
</p>

<p>For example, the first form submitted by the user might have asked
for some basic information, such as the user's name and where
they live. Based on that initial contact, the server might create a
second form asking more specific questions of the user. Since it is
tedious for users to re-enter the same basic information from the
first form, the server can be programmed to put those values in the
second form in hidden fields. When the second form comes back, all
the important information from both forms is there, and the second
form can be matched to the first one, if necessary.
</p>

<p>Hidden fields may also direct the server towards some specific
action. For example, you might embed the hidden field:
</p>

<blockquote><pre class="code">&lt;input type=hidden name=action value=change&gt;</pre></blockquote>

<p>Therefore, if you have one server-side application that handles the
processing of several forms, each form might contain a different
action code to help that server application sort things out.
</p>

</div>


<hr width="684" align="left" />
<div class="navbar"><table width="684" border="0"><tr><td align="left" valign="top" width="228"><a href="ch09_04.htm"><img alt="Previous" border="0" src="../gifs/txtpreva.gif" /></a></td><td align="center" valign="top" width="228"><a href="index.htm"><img alt="Home" border="0" src="../gifs/txthome.gif" /></a></td><td align="right" valign="top" width="228"><a href="ch09_06.htm"><img alt="Next" border="0" src="../gifs/txtnexta.gif" /></a></td></tr><tr><td align="left" valign="top" width="228">9.4. Using Email to Collect Form Data </td><td align="center" valign="top" width="228"><a href="index/index.htm"><img alt="Book Index" border="0" src="../gifs/index.gif" /></a></td><td align="right" valign="top" width="228">9.6. The &lt;button&gt; Tag</td></tr></table></div>
<hr width="684" align="left" />

<img alt="Library Navigation Links" border="0" src="../gifs/navbar.gif" usemap="#library-map" />
<p><font size="-1"><a href="copyrght.htm">Copyright &copy; 2002</a> O'Reilly &amp; Associates. All rights reserved.</font></p>

<map name="library-map"><area href="../index.htm" coords="0,1,78,93" shape="rect" /><area href="../wdesign/index.htm" coords="80,2,155,96" shape="rect" /><area href="index.htm" coords="158,0,263,97" shape="rect" /><area href="../audio/index.htm" coords="265,1,335,97" shape="rect" /><area href="../css/index.htm" coords="338,1,434,93" shape="rect" /><area href="../action/index.htm" coords="439,0,540,102" shape="rect" /><area href="../infoarch/index.htm" coords="544,0,685,102" shape="rect" /></map>

</body></html>