<html><head><title>Embedded Content (HTML &amp; XHTML: The Definitive Guide, 4th Edition)</title><link rel="stylesheet" type="text/css" href="../style/style1.css" />

<meta name="DC.Creator" content="Chuck Musciano and Bill Kennedy" /><meta name="DC.Format" content="text/xml" scheme="MIME" /><meta name="DC.Language" content="en-US" /><meta name="DC.Publisher" content="O'Reilly &amp; Associates, Inc." /><meta name="DC.Source" scheme="ISBN" content="059600026XL" /><meta name="DC.Subject.Keyword" content="stuff" /><meta name="DC.Title" content="HTML &amp; XHTML: The Definitive Guide, 4th Edition" /><meta name="DC.Type" content="Text.Monograph" />

</head><body bgcolor="#ffffff">

<img alt="Book Home" border="0" src="gifs/smbanner.gif" usemap="#banner-map" /><map name="banner-map"><area shape="rect" coords="1,-2,616,66" href="index.htm" alt="HTML &amp; XHTML: The Definitive Guide" /><area shape="rect" coords="629,-11,726,25" href="jobjects/fsearch.htm" alt="Search this book" /></map>

<div class="navbar"><table width="684" border="0"><tr><td align="left" valign="top" width="228"><a href="ch12_01.htm"><img alt="Previous" border="0" src="../gifs/txtpreva.gif" /></a></td><td align="center" valign="top" width="228"><a href="index.htm">HTML &amp; XHTML: The Definitive Guide, 4th Edition</a></td><td align="right" valign="top" width="228"><a href="ch12_03.htm"><img alt="Next" border="0" src="../gifs/txtnexta.gif" /></a></td></tr></table></div>
<hr width="684" align="left" />


<h2 class="sect1">12.2. Embedded Content</h2>

<p>In this section, we cover three tags that support embedded content.
The <tt class="literal">&lt;object&gt;</tt><a name="INDEX-2289" /> <a name="INDEX-2290" /> tag is in the HTML
4 and XHTML standards. It is a generalized hybrid of the deprecated
<tt class="literal">&lt;applet&gt;</tt> tag for embedding applets,
particularly Java applets, and the <tt class="literal">&lt;embed&gt;</tt>
tag extension that lets you include an object whose MIME type
references the plug-in needed to process and possibly display that
object.
</p>

<p>The latest standards strongly encourage you to use the
<tt class="literal">&lt;object&gt;</tt> tag to include applets as well as a
variety of discrete inclusions in your documents, even images
(although the standards do not go so far as to deprecate the
<tt class="literal">&lt;img&gt;</tt> tag). Use
<tt class="literal">&lt;object&gt;</tt> with the <tt class="literal">classid</tt>
attribute to insert Java and other applets into a document, along
with their execution parameters as contents of the associated
<tt class="literal">&lt;param&gt;</tt> tag. And with
<tt class="literal">&lt;object&gt;</tt>, use the <tt class="literal">data</tt>
attribute to download and display non-HTML/XHTML content, such as
multimedia, in the user's computing environment. Object data
may be processed and rendered by an included applet, by utilities
that come with your browser, or by a plug-in ("helper")
application that the user supplies.
</p>

<p>For applets, the browser creates a display region in the containing
text flow exactly like an inline image: without line breaks and as a
single large entity. The browser then downloads and executes the
applet's program code, if specified, and downloads and renders
any included data just after download and display of the document.
Execution of the applet continues until the code terminates itself or
when the user stops viewing the page containing the applet.
</p>

<p>With data, the browser decodes the object's data type and will
either handle its rendering directly, such as with GIF and JPEG
images, or invoke an associated plug-in application for the job.
</p>

<a name="html4-CHP-12-SECT-2.1" /><div class="sect2">
<h3 class="sect2">12.2.1. The &lt;object&gt; Tag</h3>
<p>The <tt class="literal">&lt;object&gt;</tt> tag was originally implemented by Microsoft to support its ActiveX applets and only later added Java support. In a similar manner, Netscape initially supported the alternative <tt class="literal">&lt;embed&gt;</tt> and <tt class="literal">&lt;applet&gt;</tt> tags for inclusion objects and later provided limited support for the <tt class="literal">&lt;object&gt;</tt> tag.</p>


<p>All that jostling for position by the browser giants made us nervous,
and we were hesitant in previous editions of this book to even
suggest that you use <tt class="literal">&lt;object&gt;</tt> at all. We now
heartily endorse it, based on the strength of the HTML 4 and
particularly the XHTML standards. Although not fully supported yet,
expect <tt class="literal">&lt;object&gt;</tt> to be well supported soon by
the popular browsers and expect the alternative
<tt class="literal">&lt;embed&gt;</tt> and
<tt class="literal">&lt;applet&gt;</tt> tags to be less supported, if not
completely ignored, by future HTML 4/XHML-compliant browsers.
</p>

<a name="html4-CHP-12-SIDEBAR-1" /><blockquote><table border="1" cellpadding="6"><tr><td>
<h4 class="objtitle">&lt;object&gt;</h4>

<dl>
<dt><b>Function:</b></dt>
<dd>
<p>Embed an object or applet in a document</p>
</dd>


<dt><b>Attributes:</b></dt><dd>

<table border="0">
<tr><td><p>ALIGN</p></td><td><p>ONKEYDOWN</p></td></tr>


<tr><td><p>ARCHIVE</p></td><td><p>ONKEYPRESS</p></td></tr>


<tr><td><p>BORDER</p></td><td><p>ONKEYUP</p></td></tr>


<tr><td><p>CLASS</p></td><td><p>ONMOUSEDOWN</p></td></tr>


<tr><td><p>CLASSID</p></td><td><p>ONMOUSEMOVE</p></td></tr>


<tr><td><p>CODEBASE</p></td><td><p>ONMOUSEOUT</p></td></tr>


<tr><td><p>CODETYPE</p></td><td><p>ONMOUSEOVER</p></td></tr>


<tr><td><p>DATA</p></td><td><p>ONMOUSEUP</p></td></tr>


<tr><td><p>DECLARE</p></td><td><p>SHAPES <img src="figs/HTML_dingbat_I.gif"></p></td></tr>


<tr><td><p>DIR</p></td><td><p>STANDBY</p></td></tr>


<tr><td><p>HEIGHT</p></td><td><p>STYLE</p></td></tr>


<tr><td><p>HSPACE</p></td><td><p>TABINDEX</p></td></tr>


<tr><td><p>ID</p></td><td><p>TITLE</p></td></tr>


<tr><td><p>LANG</p></td><td><p>TYPE</p></td></tr>


<tr><td><p>NAME</p></td><td><p>USEMAP</p></td></tr>


<tr><td><p>NOTAB <img src="figs/HTML_dingbat_I.gif"></p></td><td><p>VSPACE</p></td></tr>


<tr><td><p>ONCLICK</p></td><td><p>WIDTH</p></td></tr>


<tr><td><p>ONDBLCLICK</p></td></tr>

</table></dd></dl>
<dl>
<dt><b>End tag:</b></dt>
<dd>
<p>&lt;/object&gt;; never omitted</p>
</dd>

</dl>

<dl>
<dt><b>Contains:</b></dt>
<dd>
<p><em class="emphasis">object_content</em></p>
</dd>

</dl>

<dl>
<dt><b>Used in:</b></dt>
<dd>
<p><em class="emphasis">text</em></p>
</dd>

</dl>
</td></tr></table></blockquote>

<p>The contents of the <tt class="literal">&lt;object&gt;</tt> tag may be any
valid HTML or XHTML content, along with
<tt class="literal">&lt;param&gt;</tt> tags that pass parameters to an
applet. If the browser can retrieve the requested object and
successfully process it, either by executing the applet or by
processing the object's data with a plug-in (helper)
application, the contents of the <tt class="literal">&lt;object&gt;</tt>
tag, except for the <tt class="literal">&lt;param&gt;</tt> tags, are
ignored. If any problem occurs during the retrieval and processing of
the object, the browser won't insert the object into the
document, but instead will display the contents of the
<tt class="literal">&lt;object&gt;</tt> tag, except for the
<tt class="literal">&lt;param&gt;</tt> tags. In short, you should provide
alternative content for browsers that cannot handle the
<tt class="literal">&lt;object&gt;</tt> tag or if the object cannot be
successfully loaded.
</p>

<a name="html4-CHP-12-SECT-2.1.1" /><div class="sect3">
<h3 class="sect3">12.2.1.1. The classid attribute</h3>

<p>Use the <tt class="literal">classid</tt><a name="INDEX-2291" /> attribute to specify the location of
the object, typically a Java class, that you want included by the
browser. The value may be an absolute or relative URL of the desired
object. Relative URLs are considered to be relative to the URL
specified by the <tt class="literal">codebase</tt> attribute if it is
provided; otherwise they are relative to the current document URL.
</p>

<p>For example, to execute a clock Java applet contained in a file named
<em class="filename">clock.class</em>, you might include in your HTML
document the code:
</p>

<blockquote><pre class="code">&lt;object classid="clock.class"&gt;
&lt;/object&gt;</pre></blockquote>

<p>The browser will locate the code for the applet using the current
document's base URL. Hence, if the current document's URL
is:
</p>

<blockquote><pre class="code">http://www.kumquat.com/harvest_time.html</pre></blockquote>

<p>the browser will retrieve the applet code for our
<tt class="literal">clock</tt> class example as:
</p>

<blockquote><pre class="code">http://www.kumquat.com/clock.class</pre></blockquote>

</div>

<a name="html4-CHP-12-SECT-2.1.2" /><div class="sect3">
<h3 class="sect3">12.2.1.2. The codebase attribute</h3>

<p>Use the <tt class="literal">codebase</tt><a name="INDEX-2292" /> attribute to provide an
alternative base URL from which the browser will retrieve an object.
The value of this attribute is a URL pointing to a directory
containing the object referenced by the <tt class="literal">classid</tt>
attribute. The <tt class="literal">codebase</tt> URL overrides, but does
not permanently replace, the document's base URL, which is the
default if you don't use <tt class="literal">codebase</tt>. <a href="ch06_02.htm">Section 6.2, "Referencing Documents: The URL"</a>
</p>

<p>Now, continuing with our previous examples, suppose your document
comes from <em class="emphasis">http://www.kumquat.com</em>, but the
<tt class="literal">clock</tt> applet is kept in a separate directory named
<tt class="literal">classes</tt>. You cannot retrieve the applet by
specifying <tt class="literal">classid="classes/clock.class"</tt>. Rather,
include the <tt class="literal">codebase</tt> attribute and new base URL:
</p>

<blockquote><pre class="code">&lt;object classid="clock.class" codebase="http://www.kumquat.com/classes/"&gt;
&lt;/object&gt;</pre></blockquote>

<p>which resolves to the URL:</p>

<blockquote><pre class="code">http://www.kumquat.com/classes/clock.class</pre></blockquote>

<p>Although we used an absolute URL in this example, you also can use a
relative URL. For instance, applets typically get stored on the same
server as the host documents, so we'd usually be better off,
for relocation's sake, specifying a relative URL for the
codebase, such as:
</p>

<blockquote><pre class="code">&lt;object code="clock.class" codebase="/classes/"&gt;
&lt;/object&gt;</pre></blockquote>

<p>The <tt class="literal">classid</tt> attribute is similar to the
<tt class="literal">code</tt> attribute of the
<tt class="literal">&lt;applet&gt;</tt> tag, providing the name of the file
containing the object and is used in conjunction with the
<tt class="literal">codebase</tt> attribute to determine the full URL of
the object to be retrieved and placed in the document.
</p>

</div>

<a name="html4-CHP-12-SECT-2.1.3" /><div class="sect3">
<h3 class="sect3">12.2.1.3. The archive attribute</h3>

<p><a name="INDEX-2293" />For performance reasons, you may
choose to preload collections of objects contained in one or more
archives. This is particularly true of Java-based applications, where
one Java class will rely on many other classes to get its work done.
The value of the <tt class="literal">archive</tt> attribute is a
quote-enclosed list of URLs, each pointing to an archive to be loaded
by the browser before rendering or executing the object.
</p>

</div>

<a name="html4-CHP-12-SECT-2.1.4" /><div class="sect3">
<h3 class="sect3">12.2.1.4. The codetype attribute</h3>

<p>The<a name="INDEX-2294" />
<tt class="literal">codetype</tt> attribute is required only if the browser
cannot determine an applet's MIME type from the
<tt class="literal">classid</tt> attribute or if the server does not
deliver the correct MIME type when downloading an object. This
attribute is nearly identical to <tt class="literal">type</tt> (<a href="ch12_02.htm">Section 12.2.1.6, "The type attribute"</a>), except that it is used to identify
program code type whereas <tt class="literal">type</tt> should be used to
identify data file types.
</p>

<p>The following example explicitly tells the browser that the
object's code is Java:
</p>

<blockquote><pre class="code">&lt;object code="clock.class" codetype="application/java"&gt;
&lt;/object&gt;</pre></blockquote>

</div>

<a name="html4-CHP-12-SECT-2.1.5" /><div class="sect3">
<h3 class="sect3">12.2.1.5. The data attribute</h3>

<p>Use the <tt class="literal">data</tt><a name="INDEX-2295" /> attribute to specify the data file, if any,
that is to be processed by the object. The <tt class="literal">data</tt>
attribute's value is the URL of the file, either absolute or
relative to the document's base URL or to that which you
provide with the <tt class="literal">codebase</tt> attribute. The browser
determines the data type by the type of object that is being inserted
in the document.
</p>

<p>This attribute is similar to the <tt class="literal">src</tt> attribute of
the <tt class="literal">&lt;img&gt;</tt> tag in that it downloads data to
be processed by the included object. The difference, of course, is
that the <tt class="literal">data</tt> attribute lets you include just
about any file type, not just an image file. In fact, the
<tt class="literal">&lt;object&gt;</tt> tag expects, but doesn't
require, that you explicitly name an enabling application for the
object with the <tt class="literal">classid</tt> attribute, or indicate the
MIME type of the file via the <tt class="literal">type</tt> attribute to
help the browser decide how to process and render the data.
</p>

<p>For example, here is an image included as an object, rather than as
an <tt class="literal">&lt;img&gt;</tt> file:
</p>

<blockquote><pre class="code">&lt;object data="pics/kumquat.gif" type="image/gif"&gt;
&lt;/object&gt;</pre></blockquote>

</div>

<a name="html4-CHP-12-SECT-2.1.6" /><div class="sect3">
<h3 class="sect3">12.2.1.6. The type attribute</h3>

<p>The <tt class="literal">type</tt><a name="INDEX-2296" /> attribute lets you explicitly define
the MIME type of the data that appears in the file you declare with
the <tt class="literal">data</tt> attribute. (Use
<tt class="literal">codetype</tt> to indicate an applet's MIME type.)
If you don't provide data, or if the MIME type of the data is
apparent from the URL or is provided by the server, you may omit this
attribute. We recommend you include it anyway to ensure that your
data is handled correctly by the browser and the included object.
</p>

<p>For examples of data MIME types, look in your browser preferences for
applications. There you'll find a list of the many file data
types your browser will recognize and the application, if not the
browser itself, that will process and render that file type.
</p>

</div>

<a name="html4-CHP-12-SECT-2.1.7" /><div class="sect3">
<h3 class="sect3">12.2.1.7. The align, class, border, height, hspace, style, vspace, and width attributes</h3>

<p>There are several attributes that let you control the appearance of
the <tt class="literal">&lt;object&gt;</tt> display region exactly like the
corresponding attributes for the <tt class="literal">&lt;img&gt;</tt> tag.
The <tt class="literal">height</tt> and <tt class="literal">width</tt> attributes
control the size of the viewing region. The <tt class="literal">hspace</tt>
and <tt class="literal">vspace</tt> attributes define a margin around the
viewing region. The value for each of these dimension attributes
should be an actual number of pixels.
</p>

<p><a name="INDEX-2297" />The
<tt class="literal">align</tt> attribute (deprecated in the HTML 4 and
XHTML standards here as well as for <tt class="literal">&lt;img&gt;</tt>
and all other tags in lieu of style sheets, yet still popularly used)
determines how the browser aligns the region in context with the
surrounding text. Use <tt class="literal">top</tt>,
<tt class="literal">texttop</tt>, <tt class="literal">middle</tt>,
<tt class="literal">absmiddle</tt>, <tt class="literal">baseline</tt>,
<tt class="literal">bottom</tt>, or <tt class="literal">absbottom</tt> to align
the object display space with adjacent text, or
<tt class="literal">left</tt> and <tt class="literal">right</tt> alignments for
wraparound content.
</p>

<p>The display region's dimensions often must match some other
applet requirement, so be careful to check these values with the
applet programmer. Sometimes, the applet may scale its display output
to match your specified region.
</p>

<p>For example, suppose our example clock applet should grow or shrink
to fit nearly any size display region. We might create a square clock
100 x 100 pixels:
</p>

<blockquote><pre class="code">&lt;object classid="clock.class" height="100" width="100"&gt;
&lt;/object&gt;</pre></blockquote>

<p>As with <tt class="literal">&lt;img&gt;</tt>, use the
<tt class="literal">border</tt><a name="INDEX-2298" /> attribute to control the width of the
frame that surrounds the object's display space when you
include it as part of a hyperlink. The null value
(<tt class="literal">border=0</tt>) removes the frame. <a href="ch05_02.htm">Section 5.2.6, "The &lt;img&gt; Tag"</a>
</p>

<p>Use the <tt class="literal">class</tt><a name="INDEX-2299" /> <a name="INDEX-2300" /> and <tt class="literal">style</tt>
attributes, of course, to control the display style for the content
enclosed by the tag and to format the content according to a
predefined class of the <tt class="literal">&lt;object&gt;</tt> tag. <a href="ch08_01.htm">Section 8.1.1, "Inline Styles: The style Attribute"</a>   <a href="ch08_03.htm#html4-CHP-8-SECT-3">Section 8.3, "Style Classes"</a>
</p>

</div>

<a name="html4-CHP-12-SECT-2.1.8" /><div class="sect3">
<h3 class="sect3">12.2.1.8. The declare attribute</h3>

<p>The <tt class="literal">declare</tt><a name="INDEX-2301" /> attribute lets you define an object but
restrains the browser from downloading and processing it. Used in
conjunction with the <tt class="literal">name</tt> attribute, this facility
is similar to a forward declaration in a more conventional
programming language that lets you defer download of an object until
it actually gets used in the document.
</p>

</div>

<a name="html4-CHP-12-SECT-2.1.9" /><div class="sect3">
<h3 class="sect3">12.2.1.9. The id, name, and title attributes</h3>

<p>Use the <tt class="literal">id</tt><a name="INDEX-2302" /> <a name="INDEX-2303" /> or <tt class="literal">name</tt> attributes
to uniquely label an object. Use the
<tt class="literal">title</tt><a name="INDEX-2304" /> attribute to simply entitle the tag.
Each attribute's value is a text string. The browser may choose
to display a title to the user or may use it in some other manner
while rendering the document. Use <tt class="literal">id</tt> or
<tt class="literal">name</tt> to reference the object in other elements of
your document, including hyperlinks and other objects.
</p>

<p>For example, suppose you have two clock applets in your document,
along with two applets the user operates to set those clocks. Provide
unique labels for the clock applets using the <tt class="literal">name</tt>
or <tt class="literal">id</tt> attribute, then pass those labels to the
setting applets using the <tt class="literal">&lt;param&gt;</tt> tag, which
we discuss later in this chapter:
</p>

<blockquote><pre class="code">&lt;object classid="clock.class" name="clock1"&gt;
&lt;/object&gt;
&lt;object classid="clock.class" name="clock2"&gt;
&lt;/object&gt;
&lt;object classid="setter.class"&gt;
  &lt;param name="clockToSet" value="clock1"&gt;
&lt;/object&gt;
&lt;object classid="setter.class"&gt;
  &lt;param name="clockToSet" value="clock2"&gt;
&lt;/object&gt;</pre></blockquote>

<p>Since we have no need to distinguish between the setter applets, we
choose not to identify their instances.
</p>

<p>The popular browsers support <tt class="literal">name</tt> and
<tt class="literal">id</tt>, but earlier versions of Internet Explorer
supported only <tt class="literal">name</tt>. For now, it may pay to use
either <tt class="literal">name</tt> or both <tt class="literal">name</tt> and
<tt class="literal">id</tt> in order to be compatible with the majority of
browsers today.
</p>

</div>

<a name="html4-CHP-12-SECT-2.1.10" /><div class="sect3">
<h3 class="sect3">12.2.1.10. The shapes and usemap attributes</h3>

<p><a name="INDEX-2305" />
<a name="INDEX-2306" />Recall from
our detailed discussion of hyperlinks in <a href="ch06_01.htm">Chapter 6, "Links and Webs"</a>, that you can divide a picture into geometric
regions and attach a hyperlink to each, creating a so-called image
map. The <tt class="literal">shapes</tt> and <tt class="literal">usemap</tt>
attributes for the <tt class="literal">&lt;object&gt;</tt> tag generalize
that feature to include other object types.
</p>

<p>The standard <tt class="literal">shapes</tt> attribute informs the browser
that the <tt class="literal">&lt;object&gt;</tt> tag's contents are a
series of hyperlinks and shape definitions. The
<tt class="literal">usemap</tt> attribute and required URL value point to a
<tt class="literal">&lt;map&gt;</tt> where you define the shapes and
associated hyperlinks identical to the client-side image map
discussed in <a href="ch06_05.htm">Section 6.5.2, "Client-Side Image Maps"</a>.
</p>

<p>For example, here is the image map we described in <a href="ch06_01.htm">Chapter 6, "Links and Webs"</a>, rewritten in XHTML as a "shaped"
object:
</p>

<blockquote><pre class="code">&lt;object data="pics/map.gif" shapes="shapes"&gt;
  &lt;a shape="rect" coords="0,0,49,49" href="main.html#link1"&gt;&lt;/a&gt; 
  &lt;a shape="rect" coords="50,0,99,49" href="main.html#link2"&gt;&lt;/a&gt; 
  &lt;a shape="rect" coords="0,50,49,99" href="main.html#link3"&gt;&lt;/a&gt; 
  &lt;a shape="rect" coords="50,50,99,99" href="main.html#link4"&gt;&lt;/a&gt;
&lt;/object&gt;</pre></blockquote>

<p>and as the more familiar image map:</p>

<blockquote><pre class="code">&lt;object data="pics/map.gif" usemap="#map1"&gt;
&lt;/object&gt;
... 
&lt;map name="map1"&gt;
  &lt;area coords="0,0,49,49" href="main.html#link1" /&gt; 
  &lt;area coords="50,0,99,49" href="main.html#link2" /&gt; 
  &lt;area coords="0,50,49,99" href="main.html#link3" /&gt; 
  &lt;area coords="50,50,99,99" href="main.html#link4" /&gt; 
&lt;/map&gt;</pre></blockquote>

<p>You also may take advantage of all the attributes associated with the
hyperlink, map, and <tt class="literal">&lt;area&gt;</tt> tags to define
and arrange the image map regions. For instance, we recommend that
you include alternative (<tt class="literal">alt</tt> attribute) text
descriptions for each sensitive region of the image map.
</p>

</div>

<a name="html4-CHP-12-SECT-2.1.11" /><div class="sect3">
<h3 class="sect3">12.2.1.11. The standby attribute</h3>

<p>The <tt class="literal">standby</tt><a name="INDEX-2307" /> attribute lets you display a
message -- the attribute's value text string -- during
the time the browser is downloading the object data. If your objects
are large or if you expect slow network response, add this attribute
as a courtesy to your users.
</p>

</div>

<a name="html4-CHP-12-SECT-2.1.12" /><div class="sect3">
<h3 class="sect3">12.2.1.12. The tabindex and notab attributes</h3>

<p><a name="INDEX-2308" />
<a name="INDEX-2309" />
<a name="INDEX-2310" />For Internet Explorer with ActiveX
objects only, the <tt class="literal">notab</tt> attribute excludes the
object from the document tabbing order.
</p>

<p>As an alternative to the mouse, users also may press the Tab key to
select and the Return or Enter key to activate a hyperlink or to
access a form control. Normally, each time the user presses the Tab
key, the browser steps to the next hyperlink or form control in the
order that they appear in the document. Use the HTML 4/XHTML-standard
<tt class="literal">tabindex</tt> and an integer value to modify the
position the object occupies in the sequence of tab-selected elements
on the page.
</p>

</div>

<a name="html4-CHP-12-SECT-2.1.13" /><div class="sect3">
<h3 class="sect3">12.2.1.13. The dir and lang attributes</h3>

<p>Use the <tt class="literal">dir</tt><a name="INDEX-2311" /> <a name="INDEX-2312" /> and <tt class="literal">lang</tt>
attributes, like their counterparts for most other tags, to specify
the language and dialect of the
<tt class="literal">&lt;object&gt;</tt>-enclosed contents as well as the
direction by which the browser adds the text characters to the
display. <a href="ch03_06.htm">Section 3.6.1.1, "The dir attribute"</a> <a href="ch03_06.htm">Section 3.6.1.2, "The lang attribute"</a>
</p>

</div>

<a name="html4-CHP-12-SECT-2.1.14" /><div class="sect3">
<h3 class="sect3">12.2.1.14. Object event handling</h3>

<p><a name="INDEX-2313" />As user-initiated mouse and keyboard
events occur within the object, you may want to perform special
actions. Accordingly, you can use the ten standard event attributes
to catch these events and execute JavaScript code. We describe
JavaScript event handlers more fully in <a href="ch12_03.htm">Section 12.3.3, "JavaScript Event Handlers"</a>.
</p>

</div>

<a name="html4-CHP-12-SECT-2.1.15" /><div class="sect3">
<h3 class="sect3">12.2.1.15. Supporting incompatible browsers</h3>

<p><a name="INDEX-2314" />Since some browsers
may not support applets or the <tt class="literal">&lt;object&gt;</tt> tag,
sometimes you may need to tell readers what they are missing. You do
this by including body content between the
<tt class="literal">&lt;object&gt;</tt> and
<tt class="literal">&lt;/object&gt;</tt> tags.
</p>

<p>Browsers that support the <tt class="literal">&lt;object&gt;</tt> tags
ignore the extraneous content inside. Of course, browsers that
don't support objects don't recognize the
<tt class="literal">&lt;object&gt;</tt> tags. Being generally tolerant of
apparent mistakes, browsers usually ignore the unrecognized tag and
blithely go on to display whatever content may appear inside.
It's as simple as that. The following fragment tells
object-incapable browser users they won't see our clock
example:
</p>

<blockquote><pre class="code">&lt;object classid=clock.class&gt;
  If your browser were capable of handling applets, you'd see
  a nifty clock right here!
&lt;/object&gt;</pre></blockquote>

<p>More importantly, object-capable browsers will display the contents
of the <tt class="literal">&lt;object&gt;</tt> tag if they cannot load,
execute, or render the object. If you have several objects of similar
intent but with differing capabilities, you can nest their object
tags. The browser will try each object in turn, stopping with the
first one it can handle. Thus, the outmost object might be a
full-motion video. Within that <tt class="literal">&lt;object&gt;</tt> tag,
you might include a simpler MPEG video, and within that
<tt class="literal">&lt;object&gt;</tt>, a simple GIF image. If the browser
can handle full-motion video, your users get the full effect. If that
level of video isn't available, the browser can try the simpler
MPEG video stream. If that fails, the browser can just display the
image. If images aren't possible, that innermost
<tt class="literal">&lt;object&gt;</tt> might contain a textual description
of the object.<a name="INDEX-2315" /> <a name="INDEX-2316" />
</p>

</div>
</div>
<a name="html4-CHP-12-SECT-2.2" /><div class="sect2">
<h3 class="sect2">12.2.2. The &lt;param&gt; Tag</h3>

<p><a name="INDEX-2317" /> <a name="INDEX-2318" />The
<tt class="literal">&lt;param&gt;</tt> tag supplies parameters for a
containing <tt class="literal">&lt;object&gt;</tt> or
<tt class="literal">&lt;applet&gt;</tt> tag. (We discuss the deprecated
<tt class="literal">&lt;applet&gt;</tt> tag in <a href="ch12_02.htm">Section 12.2.3, "The &lt;applet&gt; Tag (Deprecated)"</a>.)
</p>

<a name="html4-CHP-12-SIDEBAR-2" /><blockquote><table border="1" cellpadding="6"><tr><td>
<h4 class="objtitle"> &lt;param&gt;</h4>

<dl>
<dt><b>Function:</b></dt>
<dd>
<p>Supply a parameter to an embedded object</p>
</dd>


<dt><b>Attributes:</b></dt><dd>

<table border="0">
<tr><td><p>ID</p></td></tr>


<tr><td><p>NAME</p></td></tr>


<tr><td><p>TYPE</p></td></tr>


<tr><td><p>VALUE</p></td></tr>


<tr><td><p>VALUETYPE</p></td></tr>

</table></dd></dl>
<dl>
<dt><b>End tag:</b></dt>
<dd>
<p>None in HTML; &lt;/param&gt; or &lt;param ... /&gt; with XHTML</p>
</dd>

</dl>

<dl>
<dt><b>Contains:</b></dt>
<dd>
<p>Nothing</p>
</dd>

</dl>

<dl>
<dt><b>Used in:</b></dt>
<dd>
<p><em class="emphasis">applet_content</em></p>
</dd>

</dl>
</td></tr></table></blockquote>
<p>The <tt class="literal">&lt;param&gt;</tt> tag has no content and, with HTML, no end tag. It appears, perhaps with other <tt class="literal">&lt;param&gt;</tt> tags, only between an <tt class="literal">&lt;object&gt;</tt> or <tt class="literal">&lt;applet&gt;</tt> tag and its end tag. Use the <tt class="literal">&lt;param&gt;</tt> tag to pass parameters to the embedded object, such as a Java applet, as required for it to function correctly. </p>


<a name="html4-CHP-12-SECT-2.2.1" /><div class="sect3">
<h3 class="sect3">12.2.2.1. The name and value attributes</h3>

<p><a name="INDEX-2319" />
<a name="INDEX-2320" />The
<tt class="literal">&lt;param&gt;</tt> tag has two required attributes:
<tt class="literal">name</tt> or <tt class="literal">id,</tt> and
<tt class="literal">value</tt>. You've seen these before with forms.
Together, they define a name/value pair that the browser passes to
the applet.
</p>

<p>For instance, our clock applet example might let users specify the
time zone by which it sets its hour hand. To pass the parameter
identified as "timezone" with the value "EST"
to our example applet, specify the parameters as:
</p>

<blockquote><pre class="code">&lt;object classid="clock.class"&gt;
  &lt;param name="timezone" value="EST" /&gt;
&lt;/object&gt;</pre></blockquote>

<p>The browser will pass the name/value pairs to the applet, but that is
no guarantee that the applet is expecting the parameters, that the
names and values are correct, or that the applet will even use the
parameters. Correct parameter names, including capitalization and
acceptable values, are determined by the applet author. The wise
author will work closely with the applet programmer or have detailed
documentation to ensure that the applet parameters are named
correctly and assigned valid values.
</p>

</div>

<a name="html4-CHP-12-SECT-2.2.2" /><div class="sect3">
<h3 class="sect3">12.2.2.2. The type and valuetype attributes</h3>

<p>Use the <tt class="literal">type</tt><a name="INDEX-2321" /> <a name="INDEX-2322" /> and <tt class="literal">valuetype</tt>
attributes to define the type of the parameter the browser passes to
the embedded object and how that object is to interpret the value.
The <tt class="literal">valuetype</tt> attribute can have one of three
values: <tt class="literal">data</tt>, <tt class="literal">ref</tt>, or
<tt class="literal">object</tt>. The value <tt class="literal">data</tt>
indicates that the parameter value is a simple string. This is the
default value. The <tt class="literal">valuetype</tt> of
<tt class="literal">ref</tt> indicates that the value is a URL of some
other resource on the web. Finally, <tt class="literal">object</tt>
indicates that the value is the name of another embedded object in
the current document. This may be needed to support inter-object
communication within a document.
</p>
<p>The value of the <tt class="literal">type</tt> attribute is the MIME media type of the value of the parameter. This is usually of no significance when the parameter value is a simple string, but can be important when the value is actually a URL pointing to some other object on the Web. In those cases, the embedded object may need to know the MIME type of the object in order to use it correctly. For example, this parameter tells the embedded object that the parameter is actually the URL of a Microsoft Word document:</p>


<a name="INDEX-2323" /><a name="INDEX-2324" /><blockquote><pre class="code">&lt;param name="document" value="http://kumquats.com/quat.doc" 
   type="application/msword" valuetype="ref" /&gt;
</pre></blockquote>

</div>
</div>
<a name="html4-CHP-12-SECT-2.3" /><div class="sect2">
<h3 class="sect2">12.2.3. The &lt;applet&gt; Tag (Deprecated)</h3>

<p>Use the <tt class="literal">&lt;applet&gt;</tt><a name="INDEX-2325" /> <a name="INDEX-2326" /> tag within your
document to download and execute an applet. Also, use the tag to
define a region within the document display for the applet's
display area. You may supply alternative content within the
<tt class="literal">&lt;applet&gt;</tt> tag for display by browsers that do
not support applets.
</p>

<a name="html4-CHP-12-SIDEBAR-3" /><blockquote><table border="1" cellpadding="6"><tr><td>
<h4 class="objtitle">&lt;applet&gt;</h4>

<dl>
<dt><b>Function:</b></dt>
<dd>
<p>Insert an application into the current text flow</p>
</dd>


<dt><b>Attributes:</b></dt><dd>

<table border="0">
<tr><td><p>ALIGN</p></td><td><p>ID</p></td></tr>


<tr><td><p>ALT</p></td><td><p>MAYSCRIPT <img src="figs/HTML_dingbat_N.gif"></p></td></tr>


<tr><td><p>ARCHIVE</p></td><td><p>NAME</p></td></tr>


<tr><td><p>CLASS</p></td><td><p>OBJECT</p></td></tr>


<tr><td><p>CODE</p></td><td><p>STYLE</p></td></tr>


<tr><td><p>CODEBASE</p></td><td><p>TITLE</p></td></tr>


<tr><td><p>HEIGHT</p></td><td><p>VSPACE</p></td></tr>


<tr><td><p>HSPACE</p></td><td><p>WIDTH</p></td></tr>

</table></dd></dl>
<dl>
<dt><b>End tag:</b></dt>
<dd>
<p>&lt;/applet&gt;; never omitted</p>
</dd>

</dl>

<dl>
<dt><b>Contains:</b></dt>
<dd>
<p><em class="emphasis">applet_content</em></p>
</dd>

</dl>

<dl>
<dt><b>Used in:</b></dt>
<dd>
<p><em class="emphasis">text</em></p>
</dd>

</dl>
</td></tr></table></blockquote>

<p>Most applets require one or more parameters that you supply in the
document to control their execution. Put these parameters between the
<tt class="literal">&lt;applet&gt;</tt> tag and its corresponding
<tt class="literal">&lt;/applet&gt;</tt> end tag using the
<tt class="literal">&lt;param&gt;</tt> tag. The browser passes the
document-specific parameters to the applet at time of execution.
 <a href="ch12_02.htm">Section 12.2.2, "The &lt;param&gt; Tag"</a>
</p>

<p>The <tt class="literal">&lt;applet&gt;</tt> tag has been deprecated in the
HTML 4 and XHTML standards in deference to the generalized
<tt class="literal">&lt;object&gt;</tt> tag, which can do the same as
<tt class="literal">&lt;applet&gt;</tt> and much more. Nonetheless,
<tt class="literal">&lt;applet&gt;</tt> is a popular tag and remains
supported by the popular browsers. Don't expect that it will go
away any time soon, but do realize that
<tt class="literal">&lt;applet&gt;</tt> <em class="emphasis">will</em> go away.
</p>

<a name="html4-CHP-12-SECT-2.3.1" /><div class="sect3">
<h3 class="sect3">12.2.3.1. Applet rendering</h3>

<p><a name="INDEX-2327" />The browser creates an
applet's display region in the containing text flow exactly
like an inline image: without line breaks and as a single large
entity. The browser downloads and executes the applet just after
download and display of the document, and continues execution until
the code terminates itself or when the user stops viewing the page
containing the applet.
</p>

</div>

<a name="html4-CHP-12-SECT-2.3.2" /><div class="sect3">
<h3 class="sect3">12.2.3.2. The align attribute</h3>

<p><a name="INDEX-2328" />Like an
image, you may control the alignment of an applet's display
region with respect to its surrounding text. As with the
<tt class="literal">&lt;img&gt;</tt> tag, set the align attribute's
value to <tt class="literal">top</tt>, <tt class="literal">texttop</tt>,
<tt class="literal">middle</tt>, <tt class="literal">absmiddle</tt>,
<tt class="literal">baseline</tt>, <tt class="literal">bottom</tt>, or
<tt class="literal">absbottom</tt>, as well as <tt class="literal">left</tt> and
<tt class="literal">right</tt> alignments for wraparound content. <a href="ch05_02.htm">Section 5.2.6, "The &lt;img&gt; Tag"</a>
</p>

</div>

<a name="html4-CHP-12-SECT-2.3.3" /><div class="sect3">
<h3 class="sect3">12.2.3.3. The alt attribute</h3>

<p>The <tt class="literal">alt</tt><a name="INDEX-2329" /> attribute gives you a way to tell
users gracefully that something is missing if, for some reason, the
applet cannot or will not execute on their computer. Its value is a
quote-enclosed message string that, like the <tt class="literal">alt</tt>
attribute for images, gets displayed in lieu of the applet itself.
</p>

<p>The <tt class="literal">alt</tt> message is only for browsers that support
applets. See <a href="ch12_02.htm">Section 12.2.1.5, "The data attribute"</a> in order to find
out how to inform users of applet-incapable browsers why they
can't view an applet.
</p>

</div>

<a name="html4-CHP-12-SECT-2.3.4" /><div class="sect3">
<h3 class="sect3">12.2.3.4. The archive attribute</h3>

<p><a name="INDEX-2330" />The
<tt class="literal">archive</tt> attribute collects common Java classes
into a single library that is cached on the user's local disk.
Once cached, the browser doesn't need to use the network to
access an applet; it retrieves the software from the local cache,
thereby reducing the inherent delays of additional network activity
to load the class.
</p>

<p>The value of the <tt class="literal">archive</tt> attribute is a URL
identifying the archive file. The suffix of the archive filename may
be either <em class="emphasis">.zip</em> or <em class="emphasis">.jar</em>.
Archived <em class="emphasis">.zip</em> files are in the familiar ZIP
archive format, generated by PKZIP and many other utilities. Archived
<em class="emphasis">.jar</em> files are in the Java archive format.
Archived <em class="emphasis">.jar</em> files support compression and
advanced features like digital signatures.
</p>

<p>You may use the <tt class="literal">archive</tt> attribute with any
<tt class="literal">&lt;applet&gt;</tt> tag, even if the class referenced
by the tag's <tt class="literal">code</tt> attribute does not exist
in the archive. If the class is not found in the archive, the browser
simply attempts to retrieve the class relative to the document URL or
the <tt class="literal">codebase</tt> URL, if specified.
</p>

</div>

<a name="html4-CHP-12-SECT-2.3.5" /><div class="sect3">
<h3 class="sect3">12.2.3.5. The code and codebase attributes</h3>

<p>The <tt class="literal">code</tt><a name="INDEX-2331" /> attribute is required. Use
<tt class="literal">code</tt> to specify the filename,
<em class="emphasis">not</em> the URL, of the Java class to be executed by
the browser. Like <tt class="literal">&lt;object&gt;</tt>, make the search
relative to another storage location by using the
<tt class="literal">codebase</tt> attribute described in <a href="ch12_02.htm">Section 12.2.1.2, "The codebase attribute"</a> or an archive, as described in <a href="ch12_02.htm">Section 12.2.3.4, "The archive attribute"</a>. Also, the extension suffix of the filename
should be <em class="emphasis">.class</em>. If you don't include the
suffix, some browsers will append <em class="emphasis">.class</em>
automatically when searching for the applet.
</p>

<p>Here is our infamous clock example rewritten as an
<tt class="literal">&lt;applet&gt;</tt>:
</p>

<blockquote><pre class="code">&lt;applet code="clock.class" codebase="http://www.kumquat.com/classes/"&gt;
&lt;/applet&gt;</pre></blockquote>

<p>which the browser will retrieve and display from: </p>

<blockquote><pre class="code">http://www.kumquat.com/classes/clock.class</pre></blockquote>

</div>

<a name="html4-CHP-12-SECT-2.3.6" /><div class="sect3">
<h3 class="sect3">12.2.3.6. The name attribute</h3>

<p>The <tt class="literal">name</tt><a name="INDEX-2332" /> attribute lets you supply a unique
name for this instance of the code class -- the copy of the applet
that runs on the individual user's computer. Like other named
elements in your document, providing a name for the applet lets other
parts of your document, including other applets, reference and
interact with this one, such as sharing computed results.
</p>

</div>

<a name="html4-CHP-12-SECT-2.3.7" /><div class="sect3">
<h3 class="sect3">12.2.3.7. The height, hspace, vspace, and width attributes</h3>

<p>Use the <tt class="literal">height</tt><a name="INDEX-2333" /> <a name="INDEX-2334" />
<a name="INDEX-2335" />
and <tt class="literal">width</tt> attributes (identical to the
counterparts for the <tt class="literal">&lt;img&gt;</tt> and
<tt class="literal">&lt;object&gt;</tt> tags) to define the size of the
applet's display region in the document. Use
<tt class="literal">hspace</tt> and <tt class="literal">vspace</tt> to interpose
some empty space around the applet region and thereby set it off from
the text. They all accept values indicating the size of the region in
pixels. 

<a href="ch05_02.htm">Section 5.2.6.10, "The height and width attributes"</a> 
</p>

</div>

<a name="html4-CHP-12-SECT-2.3.8" /><div class="sect3">
<h3 class="sect3">12.2.3.8. The mayscript attribute</h3>

<p>The <tt class="literal">mayscript</tt><a name="INDEX-2336" /> attribute, supported only by
Netscape, indicates that the Java applet will be accessing JavaScript
features within the browser. Normally, Java applets attempting to
access JavaScript cause a browser error. If your applets access
JavaScript, you must specify <tt class="literal">mayscript</tt> in the
<tt class="literal">&lt;applet&gt;</tt> tag.
</p>

</div>

<a name="html4-CHP-12-SECT-2.3.9" /><div class="sect3">
<h3 class="sect3">12.2.3.9. The title attribute</h3>

<p>The value of this <a name="INDEX-2337" />attribute is a quoted string, which is
used by Internet Explorer to provide a title, if necessary, for the
applet. This attribute is not supported by Netscape.
</p>

</div>

<a name="html4-CHP-12-SECT-2.3.10" /><div class="sect3">
<h3 class="sect3">12.2.3.10. The object attribute</h3>

<p><a name="INDEX-2338" />This
unfortunately named attribute and its string value reference the name
of the resource that contains a serialized version of the applet. How
and what it does is an enigma; none of the popular browsers support
it.<a name="INDEX-2339" />
<a name="INDEX-2340" />
</p>

</div>
</div>
<a name="html4-CHP-12-SECT-2.4" /><div class="sect2">
<h3 class="sect2">12.2.4. The &lt;embed&gt; Tag</h3>

<p>Use the <tt class="literal">&lt;embed&gt;</tt><a name="INDEX-2341" /> <a name="INDEX-2342" /> tag to include a reference in your
document to some special plug-in application and perhaps data for
that application. The standard analog for
<tt class="literal">&lt;embed&gt;</tt> is the
<tt class="literal">&lt;object&gt;</tt> tag with the
<tt class="literal">data</tt> attribute.
</p>

<a name="html4-CHP-12-SIDEBAR-4" /><blockquote><table border="1" cellpadding="6"><tr><td>
<h4 class="objtitle">&lt;embed&gt; <img src="figs/HTML_dingbat_N.gif"> <img src="figs/HTML_dingbat_I.gif"></h4>

<dl>
<dt><b>Function:</b></dt>
<dd>
<p>Embed an object in a document</p>
</dd>


<dt><b>Attributes:</b></dt><dd>

<table border="0">
<tr><td><p>ALIGN <img src="figs/HTML_dingbat_N.gif"></p></td><td><p>PLUGINSPAGE &netscape;
</p></td></tr>


<tr><td><p>BORDER <img src="figs/HTML_dingbat_N.gif"></p></td><td><p>SRC</p></td></tr>


<tr><td><p>HEIGHT</p></td><td><p>TYPE <img src="figs/HTML_dingbat_N.gif"></p></td></tr>


<tr><td><p>HIDDEN</p></td><td><p>UNITS</p></td></tr>


<tr><td><p>HSPACE <img src="figs/HTML_dingbat_N.gif"></p></td><td><p>VSPACE &netscape;
</p></td></tr>


<tr><td><p>NAME</p></td><td><p>WIDTH</p></td></tr>


<tr><td><p>PALETTE</p></td></tr>

</table></dd></dl>
<dl>
<dt><b>End tag:</b></dt>
<dd>
<p>None</p>
</dd>

</dl>

<dl>
<dt><b>Contains:</b></dt>
<dd>
<p>Nothing</p>
</dd>

</dl>

<dl>
<dt><b>Used in:</b></dt>
<dd>
<p><em class="emphasis">text</em></p>
</dd>

</dl>
</td></tr></table></blockquote>

<p>With <tt class="literal">&lt;embed&gt;</tt>, reference the data object via
the <tt class="literal">src</tt> attribute and URL value for download by
the browser. The browser uses the MIME type of the
<tt class="literal">src</tt>'d object to determine the plug-in
required to process the object. Alternatively, you may also use the
<tt class="literal">type</tt> attribute to specify a MIME type without an
object, and thereby initiate execution of a plug-in application, if
it exists on the user's computer.
</p>

<p>Like all other tags, the nonstandard <tt class="literal">&lt;embed&gt;</tt>
tag extension has a set of predefined attributes that define
parameters and modify the tag's behavior. Unlike most other
tags, however, the browsers let you include plug-in-specific
name/value attribute pairs in <tt class="literal">&lt;embed&gt;</tt> that,
instead of altering the action of the tag itself, get passed to the
plug-in application for further processing.
</p>

<p>For example, this tag:</p>

<blockquote><pre class="code">&lt;embed src=movie.avi width=320 height=200 autostart=true loop=3&gt;</pre></blockquote>

<p>has attributes that are processed by the
<tt class="literal">&lt;embed&gt;</tt> tag (<tt class="literal">src</tt>,
<tt class="literal">width</tt>, and <tt class="literal">height</tt>) and two that
are not recognized, but rather passed to the plug-in associated with
AVI video clips: <tt class="literal">autostart</tt> and
<tt class="literal">loop</tt>.
</p>

<p>It is not possible to document all the possible attributes that the
many different plug-ins might need with their associated
<tt class="literal">&lt;embed&gt;</tt> tag. Instead, you must turn to the
plug-in developer to learn about all their required and optional
attributes for each particular plug-in you plan to use in your pages.
</p>

<a name="html4-CHP-12-SECT-2.4.1" /><div class="sect3">
<h3 class="sect3">12.2.4.1. The align, border, height, width, hspace, and vspace attributes</h3>

<p><a name="INDEX-2343" />
<a name="INDEX-2344" />
<a name="INDEX-2345" />
<a name="INDEX-2346" />
<a name="INDEX-2347" />
<a name="INDEX-2348" />
<a name="INDEX-2349" />The browser displays embedded objects
to the user in a region set aside within the document window. The
<tt class="literal">&lt;embed&gt;</tt> tag's
<tt class="literal">align</tt>, <tt class="literal">border</tt>,
<tt class="literal">height</tt>, <tt class="literal">width</tt>,
<tt class="literal">hspace</tt>, and <tt class="literal">vspace</tt> attributes
let you control the appearance of that region exactly as they do for
the <tt class="literal">&lt;img&gt;</tt> tag, so we won't belabor
them. <a href="ch05_02.htm">Section 5.2.6, "The &lt;img&gt; Tag"</a>
</p>

<p>Briefly, the <tt class="literal">height</tt> and <tt class="literal">width</tt>
attributes control the size of the viewing region. Normally, you
should specify the height and width in pixels, but you may also use
some other units of measure if you also specify the
<tt class="literal">units</tt> attribute (see <a href="ch12_02.htm">Section 12.2.4.8, "The units attribute"</a>). The <tt class="literal">hspace</tt> and
<tt class="literal">vspace</tt> attributes define a margin, in pixels,
around the viewing region. The <tt class="literal">align</tt> attribute
determines how the browser aligns the region within surrounding text,
while the <tt class="literal">border</tt> attribute determines the width of
the border surrounding the viewing region.
</p>

<p>Only Netscape supports the <tt class="literal">align</tt>,
<tt class="literal">border</tt>, <tt class="literal">hspace</tt>, and
<tt class="literal">vspace</tt> attributes for the
<tt class="literal">&lt;embed&gt;</tt> tag.
</p>

</div>

<a name="html4-CHP-12-SECT-2.4.2" /><div class="sect3">
<h3 class="sect3">12.2.4.2. The hidden attribute</h3>

<p>The <tt class="literal">hidden</tt><a name="INDEX-2350" /> attribute makes an object invisible to the
user, forcing it to have a height and width of zero. Note that
setting <tt class="literal">hidden</tt> does not cause the browser to
display an empty region within the document, but rather completely
removes the object from the containing text flow.
</p>

<p>The attribute's useful for audio streams placed within
documents. The HTML entry:
</p>

<blockquote><pre class="code">&lt;embed src=music.wav hidden autostart=true loop=true&gt;</pre></blockquote>

<p>embeds an audio object in the page. The browser does not show
anything to the user but rather plays background music for the page.
By contrast, the plug-in associated with:
</p>

<blockquote><pre class="code">&lt;embed src=music.wav&gt;</pre></blockquote>

<p>might present an audio control panel to users so that they might
start and stop the audio playback, adjust the volume, and so forth.
</p>

</div>

<a name="html4-CHP-12-SECT-2.4.3" /><div class="sect3">
<h3 class="sect3">12.2.4.3. The name attribute</h3>

<p>Like other <tt class="literal">name</tt><a name="INDEX-2351" /> attributes, this one also lets you
label the embedded object for later reference by other elements in
your document, including other objects. The value of the attribute is
a character string.
</p>

</div>

<a name="html4-CHP-12-SECT-2.4.4" /><div class="sect3">
<h3 class="sect3">12.2.4.4. The palette attribute</h3>

<p>The <tt class="literal">palette</tt><a name="INDEX-2352" /> attribute is supported by both Netscape and
Internet Explorer, but in completely different ways. With Netscape,
the value of the palette attribute is either
<tt class="literal">foreground</tt> or <tt class="literal">background</tt>,
indicating which palette of window system colors the plug-in uses for
its display.
</p>

<p>With Internet Explorer, the value of <tt class="literal">palette</tt> is
instead a pair of hexadecimal color values, separated by a vertical
bar. The first value determines the foreground color used by the
plug-in; the second sets the background color. Thus, specifying this
<tt class="literal">palette</tt>:
</p>

<blockquote><pre class="code">palette=#ff0000|#00ff00</pre></blockquote>

<p>causes the plug-in to use red as its foreground color and green as
its background color. For a complete description of hexadecimal color
values, see <a href="appg_01.htm">Appendix G, "Color Names and Values"</a>.
</p>

</div>

<a name="html4-CHP-12-SECT-2.4.5" /><div class="sect3">
<h3 class="sect3">12.2.4.5. The pluginspage attribute</h3>

<p>The <tt class="literal">pluginspage</tt><a name="INDEX-2353" /> attribute, supported only by
Netscape, specifies the URL of a web page that provides instruction
on where to obtain and how to install the plug-in associated with the
embedded object.
</p>

</div>

<a name="html4-CHP-12-SECT-2.4.6" /><div class="sect3">
<h3 class="sect3">12.2.4.6. The src attribute</h3>

<p><a name="INDEX-2354" />Like its
document-referencing counterparts for a myriad of other tags, the
<tt class="literal">src</tt> attribute supplies the URL of the data object
that you embed in the HTML document. The server providing the object
must be configured so that it notifies the browser of the correct
MIME type of the object. If not, the browser will use the suffix of
the last element of the <tt class="literal">src</tt> value -- the
object's filename in the URL path -- to determine the type
of the object. The browser uses this MIME type to determine which
plug-in it will execute to process the object.
</p>

<p>If you don't include a <tt class="literal">src</tt> attribute with
the <tt class="literal">&lt;embed&gt;</tt> tag, then you've got to
include a <tt class="literal">type</tt> attribute to explicitly reference
the MIME type and as a result the plug-in application.
</p>

</div>

<a name="html4-CHP-12-SECT-2.4.7" /><div class="sect3">
<h3 class="sect3">12.2.4.7. The type attribute</h3>

<p>Use the <tt class="literal">type</tt><a name="INDEX-2355" /> attribute in addition to or in lieu
of the <tt class="literal">src</tt> attribute. Its value explicitly
indicates the MIME type of the embedded object, which in turn
determines which plug-in the browser will invoke to process the
object. This attribute is not required if you include the
<tt class="literal">src</tt> attribute and the browser can determine the
object type from the object's URL or server. You must supply a
<tt class="literal">type</tt> attribute if you don't include the
<tt class="literal">src</tt> attribute.
</p>

<p>It may seem odd to use an <tt class="literal">&lt;embed&gt;</tt> tag
without a <tt class="literal">src</tt> attribute reference to some object,
but this is common if the plug-in requires no data or retrieves its
data dynamically after it is started. In these cases, the
<tt class="literal">type</tt> attribute is required so that the browser
knows which plug-in to invoke.
</p>

</div>

<a name="html4-CHP-12-SECT-2.4.8" /><div class="sect3">
<h3 class="sect3">12.2.4.8. The units attribute</h3>

<p>Pixels are the default <a name="INDEX-2356" />
<a name="INDEX-2357" />unit of measure for the
<tt class="literal">height</tt> and <tt class="literal">width</tt> attributes
that control the <tt class="literal">&lt;embed&gt;</tt> display space. The
<tt class="literal">units</tt> attribute lets you explicitly state that the
absolute measure is <tt class="literal">pixels</tt>, or change it to the
relative <tt class="literal">en</tt>, which is one-half the current point
size of text in the document. With the <tt class="literal">en</tt> units,
you tailor the object's viewing area (viewport) to be
proportional to its immediately surrounding content, the size of
which is varied by the user.
</p>

<p>For example:</p>

<blockquote><pre class="code">&lt;embed src=movie.avi height=200 width=320 units=pixels&gt;</pre></blockquote>

<p>creates a viewport for the window 200 x 320 pixels. By changing
<tt class="literal">units</tt> to <tt class="literal">en</tt>, that same
viewport, when included within a flow of 12-point text, will become
1200 x 1920 pixels.<a name="INDEX-2358" /> <a name="INDEX-2359" />
</p>

</div>
</div>
<a name="html4-CHP-12-SECT-2.5" /><div class="sect2">
<h3 class="sect2">12.2.5. The &lt;noembed&gt; Tag</h3>

<p><a name="INDEX-2360" />
<a name="INDEX-2361" />
<a name="INDEX-2362" />Some browsers do
not support the <tt class="literal">&lt;embed&gt;</tt> tag. The
<tt class="literal">&lt;noembed&gt;</tt> tag makes it easy to supply
alternative content that tells users what they are missing.
</p>

<a name="html4-CHP-12-SIDEBAR-5" /><blockquote><table border="1" cellpadding="6"><tr><td>
<h4 class="objtitle">&lt;noembed&gt; <img src="figs/HTML_dingbat_N.gif"> <img src="figs/HTML_dingbat_I.gif"></h4>

<dl>
<dt><b>Function:</b></dt>
<dd>
<p>Supply content to &lt;embed&gt;-incompatible browsers</p>
</dd>

</dl>

<dl>
<dt><b>Attributes:</b></dt>
<dd>
<p>None</p>
</dd>

</dl>

<dl>
<dt><b>End tag:</b></dt>
<dd>
<p>&lt;/noembed&gt;; never omitted</p>
</dd>

</dl>

<dl>
<dt><b>Contains:</b></dt>
<dd>
<p>Nothing</p>
</dd>

</dl>

<dl>
<dt><b>Used in:</b></dt>
<dd>
<p><em class="emphasis">text</em></p>
</dd>

</dl>
</td></tr></table></blockquote>

<p>The popular browsers ignore the contents of the
<tt class="literal">&lt;noembed&gt;</tt> tag, whereas browsers that do not
support the <tt class="literal">&lt;embed&gt;</tt> tag will display the
contents of the <tt class="literal">&lt;noembed&gt;</tt> tag. Normally, use
the contents of the <tt class="literal">&lt;noembed&gt;</tt> tag to display
some sort of message placating users of inadequate browsers:
</p>

<blockquote><pre class="code">&lt;embed src=cool.mov autostart=true loop=true&gt;
&lt;noembed&gt;To view the cool movie, you need to upgrade to a browser
that supports the &amp;lt;embed&amp;gt; tag!&lt;/noembed&gt;</pre></blockquote>

<p>We recommend using a <tt class="literal">&lt;noembed&gt;</tt> message only
in those cases where the object is crucial for the user to comprehend
and use your document. And, in those cases, provide a link to a
document that can stand alone without the embedded object, or nicely
explain the difficulty.
</p>

</div>


<hr width="684" align="left" />
<div class="navbar"><table width="684" border="0"><tr><td align="left" valign="top" width="228"><a href="ch12_01.htm"><img alt="Previous" border="0" src="../gifs/txtpreva.gif" /></a></td><td align="center" valign="top" width="228"><a href="index.htm"><img alt="Home" border="0" src="../gifs/txthome.gif" /></a></td><td align="right" valign="top" width="228"><a href="ch12_03.htm"><img alt="Next" border="0" src="../gifs/txtnexta.gif" /></a></td></tr><tr><td align="left" valign="top" width="228">12. Executable Content</td><td align="center" valign="top" width="228"><a href="index/index.htm"><img alt="Book Index" border="0" src="../gifs/index.gif" /></a></td><td align="right" valign="top" width="228">12.3. JavaScript</td></tr></table></div>
<hr width="684" align="left" />

<img alt="Library Navigation Links" border="0" src="../gifs/navbar.gif" usemap="#library-map" />
<p><font size="-1"><a href="copyrght.htm">Copyright &copy; 2002</a> O'Reilly &amp; Associates. All rights reserved.</font></p>

<map name="library-map"><area href="../index.htm" coords="0,1,78,93" shape="rect" /><area href="../wdesign/index.htm" coords="80,2,155,96" shape="rect" /><area href="index.htm" coords="158,0,263,97" shape="rect" /><area href="../audio/index.htm" coords="265,1,335,97" shape="rect" /><area href="../css/index.htm" coords="338,1,434,93" shape="rect" /><area href="../action/index.htm" coords="439,0,540,102" shape="rect" /><area href="../infoarch/index.htm" coords="544,0,685,102" shape="rect" /></map>

</body></html>