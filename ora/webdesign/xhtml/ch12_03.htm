<html><head><title>JavaScript (HTML &amp; XHTML: The Definitive Guide, 4th Edition)</title><link rel="stylesheet" type="text/css" href="../style/style1.css" />

<meta name="DC.Creator" content="Chuck Musciano and Bill Kennedy" /><meta name="DC.Format" content="text/xml" scheme="MIME" /><meta name="DC.Language" content="en-US" /><meta name="DC.Publisher" content="O'Reilly &amp; Associates, Inc." /><meta name="DC.Source" scheme="ISBN" content="059600026XL" /><meta name="DC.Subject.Keyword" content="stuff" /><meta name="DC.Title" content="HTML &amp; XHTML: The Definitive Guide, 4th Edition" /><meta name="DC.Type" content="Text.Monograph" />

</head><body bgcolor="#ffffff">

<img alt="Book Home" border="0" src="gifs/smbanner.gif" usemap="#banner-map" /><map name="banner-map"><area shape="rect" coords="1,-2,616,66" href="index.htm" alt="HTML &amp; XHTML: The Definitive Guide" /><area shape="rect" coords="629,-11,726,25" href="jobjects/fsearch.htm" alt="Search this book" /></map>

<div class="navbar"><table width="684" border="0"><tr><td align="left" valign="top" width="228"><a href="ch12_02.htm"><img alt="Previous" border="0" src="../gifs/txtpreva.gif" /></a></td><td align="center" valign="top" width="228"><a href="index.htm">HTML &amp; XHTML: The Definitive Guide, 4th Edition</a></td><td align="right" valign="top" width="228"><a href="ch12_04.htm"><img alt="Next" border="0" src="../gifs/txtnexta.gif" /></a></td></tr></table></div>
<hr width="684" align="left" />


<h2 class="sect1">12.3. JavaScript</h2>

<p><a name="INDEX-2363" /> <a name="INDEX-2364" />All the executable content elements
we've talked about so far have had one common trait: they are
separate from the browser and the HTML/XHTML document -- separate
data, separate execution engine.
</p>

<p>JavaScript is different. It is a scripting language that taps the
native functionality of the browser. You may sprinkle JavaScript
statements throughout your documents, either as blocks of code or
single statements attached to individual tags. The JavaScript-enabled
browsers, including both Netscape Navigator and Internet Explorer,
interpret and act upon the JavaScript statements you provide to do
such things as alter the appearance of the document, control the
display, validate and manipulate form elements, and perform general
computational tasks.
</p>

<p>As with Java, we will not pretend to teach JavaScript programming in
this book. We'll show you how to embed and execute JavaScript
within your documents and ask that you turn to books like
<em class="emphasis">JavaScript: The Definitive Guide</em> (O'Reilly
&amp; Associates) for a complete definition of the JavaScript
language.
</p>

<a name="html4-CHP-12-SECT-3.1" /><div class="sect2">
<h3 class="sect2">12.3.1. The &lt;script&gt; Tag</h3>
<p><a name="INDEX-2365" />
<a name="INDEX-2366" />One way to place JavaScript code in your document is via the HTML and XHTML standard <tt class="literal">&lt;script&gt;</tt> tag. </p>


<p><tt class="literal">E</tt>verything between <tt class="literal">&lt;script&gt;</tt> and <tt class="literal">&lt;/script&gt;</tt> is processed by the browser as executable JavaScript statements and data. You cannot place HTML or XHTML within this tag; it will be flagged as an error by the browser.</p>


<p>Browsers that do not support <tt class="literal">&lt;script&gt;</tt> will
process contents of the tag as regular HTML, to the confusion of the
user. For this reason, we recommend that you include the contents of
the <tt class="literal">&lt;script&gt;</tt> tag inside HTML comments:
</p>

<blockquote><pre class="code">&lt;script language="JavaScript"&gt;
&lt;!--
   <em class="replaceable">JavaScript statements go here</em>
// --&gt;
&lt;/script&gt;</pre></blockquote>

<p>For browsers that ignore the <tt class="literal">&lt;script&gt;</tt> tag,
the contents are masked by the comment delimiters
<tt class="literal">&lt;!--</tt> and <tt class="literal">--&gt;</tt>.
JavaScript-enabled browsers, on the other hand, automatically
recognize and interpret the JavaScript statements delimited by the
comment tags. By using this skeleton for all your
<tt class="literal">&lt;script&gt;</tt> tags, you can be sure that all
browsers will handle your document gracefully, if not completely.
</p>

<p>Unfortunately, as we discuss in <a href="ch16_01.htm">Chapter 16, "XHTML"</a>, as with
document-level stylesheets, script content for XHTML documents must
be within a special CDATA declaration rather than within comments.
Hence, HTML browsers won't honor XHTML scripts, and vice versa.
Our only recommendation at this point is to follow the popular
browsers: write in HTML, but use as many of the features of XHTML as
you can in preparation for the future.
</p>

<p>You may include more than one <tt class="literal">&lt;script&gt;</tt> tag
in a document, located in either the <tt class="literal">&lt;head&gt;</tt>
or the <tt class="literal">&lt;body&gt;</tt>. The JavaScript-enabled
browser executes the statements in order. Variables and functions
defined within one <tt class="literal">&lt;script&gt;</tt> tag may be
referenced by JavaScript statements in other
<tt class="literal">&lt;script&gt;</tt> tags. In fact, one common
JavaScript programming style is to use a single
<tt class="literal">&lt;script&gt;</tt> in the document
<tt class="literal">&lt;head&gt;</tt> to define common functions and global
variables for the document and then to call those functions and
reference their variables in other JavaScript statements sprinkled
throughout the document.
</p>

<a name="html4-CHP-12-SIDEBAR-6" /><blockquote><table border="1" cellpadding="6"><tr><td>
<h4 class="objtitle">&lt;script&gt;</h4>

<dl>
<dt><b>Function:</b></dt>
<dd>
<p>Define an executable script within a document</p>
</dd>


<dt><b>Attributes:</b></dt><dd>

<table border="0">
<tr><td><p>CHARSET</p></td></tr>


<tr><td><p>DEFER</p></td></tr>


<tr><td><p>LANGUAGE</p></td></tr>


<tr><td><p>SRC</p></td></tr>


<tr><td><p>TYPE</p></td></tr>

</table></dd></dl>
<dl>
<dt><b>End tag:</b></dt>
<dd>
<p>&lt;/script&gt;; never omitted</p>
</dd>

</dl>

<dl>
<dt><b>Contains:</b></dt>
<dd>
<p><em class="emphasis">scripts</em></p>
</dd>

</dl>

<dl>
<dt><b>Used in:</b></dt>
<dd>
<p><em class="emphasis">head_content, body_content</em></p>
</dd>

</dl>
</td></tr></table></blockquote>

<a name="html4-CHP-12-SECT-3.1.1" /><div class="sect3">
<h3 class="sect3">12.3.1.1. The language and type attributes</h3>

<p>Use the <tt class="literal">language</tt><a name="INDEX-2367" /> <a name="INDEX-2368" /> or <tt class="literal">type</tt> attribute
in the <tt class="literal">&lt;script&gt;</tt> tag to declare the scripting
language that you used to compose the contents of the tag. The
<tt class="literal">language</tt> attribute is deprecated by the HTML 4 and
XHTML standards in favor of the <tt class="literal">type</tt> attribute.
Regrettably, the value for each attribute is different.
</p>

<p>If you are using JavaScript -- by far the most common scripting
language on the Web -- use
<tt class="literal">language</tt>=<tt class="literal">JavaScript</tt> or use
<tt class="literal">type</tt>=<tt class="literal">text/javascript</tt>. You may
occasionally see the <tt class="literal">language</tt> value
<tt class="literal">VBScript</tt> (<tt class="literal">text/vbscript</tt> for
<tt class="literal">type</tt>), indicating that the enclosed code is
written in Microsoft's Visual Basic Script.
</p>

<p>With JavaScript, you may also use the language value
<tt class="literal">"JavaScript 1.1"</tt>, indicating that the enclosed
script is to be processed only by Netscape 3.0 or later. Netscape
2.0, which supports JavaScript 1.0, will not process scripts
identified as <tt class="literal">"JavaScript 1.1"</tt>.
</p>

</div>

<a name="html4-CHP-12-SECT-3.1.2" /><div class="sect3">
<h3 class="sect3">12.3.1.2. The src and charset attributes</h3>

<p><a name="INDEX-2369" />
<a name="INDEX-2370" />For
particularly large JavaScript programs or ones you reuse often, you
might want to store the code in a separate file. In these cases, have
the browser load that separate file through the
<tt class="literal">src</tt> attribute. The value of the
<tt class="literal">src</tt> attribute is the URL of the file containing
the JavaScript program. The stored file should have a MIME type of
<tt class="literal">application/x-javascript</tt>, but will also be
properly handled automatically by a properly configured server if the
filename suffix is <em class="emphasis">.js</em>.
</p>

<p>For example:</p>

<blockquote><pre class="code">&lt;script language="JavaScript" src="http://www.kumquat.com/quatscript.js"&gt;
&lt;/script&gt;</pre></blockquote>

<p>tells the <tt class="literal">&lt;script&gt;</tt>-able browser to load a
JavaScript program named <em class="filename">quatscript.js </em>from the
server. Although there are no <tt class="literal">&lt;script&gt;</tt>
contents, the ending <tt class="literal">&lt;/script&gt;</tt> is still
required.
</p>

<p>Used in conjunction with the <tt class="literal">src</tt> attribute, the
<tt class="literal">charset</tt> attribute tells the browser the character
set used to encode the JavaScript program. Its value is the name of
any ISO standard character set encoding.
</p>

</div>

<a name="html4-CHP-12-SECT-3.1.3" /><div class="sect3">
<h3 class="sect3">12.3.1.3. The defer attribute</h3>

<p><a name="INDEX-2371" />Some
JavaScript scripts are used to create actual document content using
the <tt class="literal">document.write</tt> method; others are not. If your
scripts do not alter the contents of the document, add the
<tt class="literal">defer</tt> attribute to the
<tt class="literal">&lt;script&gt;</tt> tag to speed processing of your
document. Since the browser knows that it can safely read the
remainder of the document without executing your scripts, it will
defer interpretation of the script until after the document has been
rendered for the user.<a name="INDEX-2372" /> <a name="INDEX-2373" />
</p>

</div>
</div>
<a name="html4-CHP-12-SECT-3.2" /><div class="sect2">
<h3 class="sect2">12.3.2. The &lt;noscript&gt; Tag</h3>

<p><a name="INDEX-2374" />
<a name="INDEX-2375" />Tell users of
browsers that do not support the <tt class="literal">&lt;script&gt;</tt>
tag that they are missing something via the
<tt class="literal">&lt;noscript&gt;</tt> tag.
</p>

<a name="html4-CHP-12-SIDEBAR-7" /><blockquote><table border="1" cellpadding="6"><tr><td>
<h4 class="objtitle">&lt;noscript&gt;</h4>

<dl>
<dt><b>Function:</b></dt>
<dd>
<p>Supply content to &lt;script&gt;-challenged browsers</p>
</dd>


<dt><b>Attributes:</b></dt><dd>

<table border="0">
<tr><td><p>None</p></td></tr>

</table>
</dd>

</dl>

<dl>
<dt><b>Contains:</b></dt>
<dd>
<p><em class="emphasis">body_content</em></p>
</dd>

</dl>

<dl>
<dt><b>Used in:</b></dt>
<dd>
<p><em class="emphasis">text</em></p>
</dd>

</dl>
</td></tr></table></blockquote>
<p>Unfortunately, only Netscape 3.0 and Internet Explorer 4.0 and later versions ignore the contents of the <tt class="literal">&lt;noscript&gt;</tt> tag. So even <tt class="literal">&lt;script&gt;</tt>-able browsers like Netscape 2 and Internet Explorer 3 will display the contents of the <tt class="literal">&lt;noscript&gt;</tt> tag, to the confusion of their users. There are other ways to detect and handle <tt class="literal">&lt;script&gt;</tt>-challenged browsers, detailed in any good JavaScript book.</p>



<p>The <tt class="literal">&lt;noscript&gt;</tt> tag supports the sixteen
standard HTML 4/XHTML attributes: <tt class="literal">class</tt> and
<tt class="literal">style</tt> for style management,
<tt class="literal">lang</tt> and <tt class="literal">dir</tt> for language type
and display direction, <tt class="literal">title</tt> and
<tt class="literal">id</tt> for titling and naming the enclosed content,
and the event attributes for user-initiated processing. 
<p>[<em>See also</em>: <a href="ch03_06.htm">Section 3.6.1.1, "The dir attribute"</a> <a href="ch03_06.htm">Section 3.6.1.2, "The lang attribute"</a> <a href="ch04_01.htm">Section 4.1.1.4, "The id attribute"</a> <a href="ch04_01.htm">Section 4.1.1.5, "The title attribute"</a> <a href="ch08_01.htm">Section 8.1.1, "Inline Styles: The style Attribute"</a>   <a href="ch08_03.htm#html4-CHP-8-SECT-3">Section 8.3, "Style Classes"</a> <a href="ch12_03.htm">Section 12.3.3, "JavaScript Event Handlers"</a>]
</p>

</div>
<a name="html4-CHP-12-SECT-3.3" /><div class="sect2">
<h3 class="sect2">12.3.3. JavaScript Event Handlers</h3>
<p><a name="INDEX-2376" />
<a name="INDEX-2377" />
<a name="INDEX-2378" />
<a name="INDEX-2379" />One of the most important features provided by JavaScript is the ability to detect and react to events that occur while a document is loading, rendering, and being browsed by the user. The JavaScript code that handles these events may be placed within the <tt class="literal">&lt;script&gt;</tt> tag, but more commonly, it is associated with a specific tag via one or more special tag attributes.</p>


<p>For example, you might want to invoke a JavaScript function when the
user passes the mouse over a hyperlink in a document. The
JavaScript-aware browsers support a special "mouse over"
event-handler attribute for the <tt class="literal">&lt;a&gt;</tt> tag
called <tt class="literal">onMouseOver</tt><a name="INDEX-2380" /> to do just that:
</p>

<blockquote><pre class="code">&lt;a href="doc.html" onMouseOver="status='Click me!'; 
return true"&gt;</pre></blockquote>

<p>When the mouse passes over this example link, the browser executes
the JavaScript statements. (Notice that the two JavaScript statements
are enclosed in quotes and separated by a semicolon, and that single
quotes surround the text-message portion of the first statement.)
</p>

<p>While a complete explanation of this code is beyond our scope, the
net result is that the browser places the message "Click
me!" in the status bar of the browser window. Commonly, authors
use this simple JavaScript function to display a more descriptive
explanation of a hyperlink, in place of the often cryptic URL that
the browser traditionally displays in the status window.
</p>

<p>HTML and XHTML both support a rich set of event handlers through
related "on" event tag attributes. The value of any of
the JavaScript event handler attributes is a quoted string containing
one or more JavaScript statements separated by semicolons. Extremely
long statements can be broken across several lines, if needed. Care
should also be taken in using entities for embedded double quotes in
the statements to avoid a syntax error when processing the attribute
value.
</p>

<a name="html4-CHP-12-SECT-3.3.1" /><div class="sect3">
<h3 class="sect3">12.3.3.1. Standard event handler attributes</h3>

<p><a href="ch12_03.htm">Table 12-1</a> presents the current set of event
handlers as tag attributes. Most are supported by the popular
browsers, which also support a variety of nonstandard event handlers
as well, tagged with asterisks in the table.
</p>

<p>We put the event handlers into two categories: user- and
document-related. The <a name="INDEX-2381" />user-related ones are the mouse and
keyboard events that occur when the user handles either device on the
computer. User-related events are quite ubiquitous, appearing as
standard attributes in nearly all the standard tags (even though they
may not yet be supported by any browser), so we don't list
their associated tags in <a href="ch12_03.htm">Table 12-1</a>. Instead,
we'll tell you which tags <em class="emphasis">do not</em> accept
these event attributes: <tt class="literal">&lt;applet&gt;</tt>,
<tt class="literal">&lt;base&gt;</tt>, <tt class="literal">&lt;basefont&gt;</tt>,
<tt class="literal">&lt;bdo&gt;</tt>, <tt class="literal">&lt;br&gt;</tt>,
<tt class="literal">&lt;font&gt;</tt>, <tt class="literal">&lt;frame&gt;</tt>,
<tt class="literal">&lt;frameset&gt;</tt>, <tt class="literal">&lt;head&gt;</tt>,
<tt class="literal">&lt;html&gt;</tt>, <tt class="literal">&lt;iframe&gt;</tt>,
<tt class="literal">&lt;isindex&gt;</tt>, <tt class="literal">&lt;meta&gt;</tt>,
<tt class="literal">&lt;param&gt;</tt>, <tt class="literal">&lt;script&gt;</tt>,
<tt class="literal">&lt;style&gt;</tt>, and
<tt class="literal">&lt;title&gt;</tt>.
</p>

<a name="html4-CHP-12-TABLE-1" /><h4 class="objtitle">Table 12-1. Event Handlers </h4><table border="0">



<tr>
<th>
<p>Event Handler</p>
</th>
<th>
<p>HTML/XHTML Tags</p>
</th>
</tr>


<tr>
<td>
<p><tt class="literal">onAbort*</tt><a name="INDEX-2382" />
</p>
</td>
<td>
<p><tt class="literal">&lt;img&gt;</tt></p>
</td>
</tr>
<tr>
<td>
<p><tt class="literal">onBlur</tt><a name="INDEX-2383" />
</p>
</td>
<td>
<p><tt class="literal">&lt;a&gt;</tt></p>

<p><tt class="literal">&lt;area&gt;</tt></p>

<p><tt class="literal">&lt;body&gt;</tt></p>

<p><tt class="literal">&lt;button&gt;</tt></p>

<p><tt class="literal">&lt;frameset&gt;</tt></p>

<p><tt class="literal">&lt;input&gt;</tt></p>

<p><tt class="literal">&lt;label&gt;</tt></p>

<p><tt class="literal">&lt;select&gt;</tt></p>

<p><tt class="literal">&lt;textarea&gt;</tt></p>
</td>
</tr>
<tr>
<td>
<p><tt class="literal">onChange</tt><a name="INDEX-2384" />
</p>
</td>
<td>
<p><tt class="literal">&lt;input&gt;</tt></p>

<p><tt class="literal">&lt;select&gt;</tt></p>

<p><tt class="literal">&lt;textarea&gt;</tt></p>
</td>
</tr>
<tr>
<td>
<p><tt class="literal">onClick</tt></p>
</td>
<td>
<p>Most tags</p>
</td>
</tr>
<tr>
<td>
<p><tt class="literal">onDblClick</tt></p>
</td>
<td>
<p>Most tags</p>
</td>
</tr>
<tr>
<td>
<p><tt class="literal">onError*</tt><a name="INDEX-2385" />
</p>
</td>
<td>
<p><tt class="literal">&lt;img&gt;</tt></p>
</td>
</tr>
<tr>
<td>
<p><tt class="literal">onFocus</tt><a name="INDEX-2386" />
</p>
</td>
<td>
<p><tt class="literal">&lt;a&gt;</tt></p>

<p><tt class="literal">&lt;area&gt;</tt></p>

<p><tt class="literal">&lt;body&gt;</tt></p>

<p><tt class="literal">&lt;button&gt;</tt></p>

<p><tt class="literal">&lt;frameset&gt;</tt></p>

<p><tt class="literal">&lt;input&gt;</tt></p>

<p><tt class="literal">&lt;label&gt;</tt></p>

<p><tt class="literal">&lt;select&gt;</tt></p>

<p><tt class="literal">&lt;textarea&gt;</tt></p>
</td>
</tr>
<tr>
<td>
<p><tt class="literal">onKeyDown</tt></p>
</td>
<td>
<p>Most tags</p>
</td>
</tr>
<tr>
<td>
<p><tt class="literal">onKeyPress</tt></p>
</td>
<td>
<p>Most tags</p>
</td>
</tr>
<tr>
<td>
<p><tt class="literal">onKeyUp</tt></p>
</td>
<td>
<p>Most tags</p>
</td>
</tr>
<tr>
<td>
<p><tt class="literal">onLoad</tt><a name="INDEX-2387" />
</p>
</td>
<td>
<p><tt class="literal">&lt;body&gt;</tt></p>

<p><tt class="literal">&lt;frameset&gt;</tt></p>

<p><tt class="literal">&lt;img&gt;*</tt></p>
</td>
</tr>
<tr>
<td>
<p><tt class="literal">onMouseDown</tt></p>
</td>
<td>
<p>Most tags</p>
</td>
</tr>
<tr>
<td>
<p><tt class="literal">onMouseMove</tt></p>
</td>
<td>
<p>Most tags</p>
</td>
</tr>
<tr>
<td>
<p><tt class="literal">onMouseOut</tt></p>
</td>
<td>
<p>Most tags</p>
</td>
</tr>
<tr>
<td>
<p><tt class="literal">onMouseOver</tt></p>
</td>
<td>
<p>Most tags</p>
</td>
</tr>
<tr>
<td>
<p><tt class="literal">onMouseUp</tt></p>
</td>
<td>
<p>Most tags</p>
</td>
</tr>
<tr>
<td>
<p><tt class="literal">onReset</tt><a name="INDEX-2388" />
</p>
</td>
<td>
<p><tt class="literal">&lt;form&gt;</tt></p>
</td>
</tr>
<tr>
<td>
<p><tt class="literal">onSelect</tt><a name="INDEX-2389" />
</p>
</td>
<td>
<p><tt class="literal">&lt;input&gt;</tt></p>

<p><tt class="literal">&lt;textarea&gt;</tt></p>
</td>
</tr>
<tr>
<td>
<p><tt class="literal">onSubmit</tt><a name="INDEX-2390" />
</p>
</td>
<td>
<p><tt class="literal">&lt;form&gt;</tt></p>
</td>
</tr>
<tr>
<td>
<p><tt class="literal">onUnload</tt><a name="INDEX-2391" />
</p>
</td>
<td>
<p><tt class="literal">&lt;body&gt;</tt></p>

<p><tt class="literal">&lt;frameset&gt;</tt><a name="INDEX-2392" /> <a name="INDEX-2393" />
</p>
</td>
</tr>

</table>

<p>Some events, however, occur rarely and with special tags. These
relate to the special events and states that occur during the display
and management of a document and its elements by the browser.
</p>

</div>

<a name="html4-CHP-12-SECT-3.3.2" /><div class="sect3">
<h3 class="sect3">12.3.3.2. The mouse-related events</h3>

<p>The <tt class="literal">onClick</tt><a name="INDEX-2394" /> <a name="INDEX-2395" /> <a name="INDEX-2396" /> <a name="INDEX-2397" /> <a name="INDEX-2398" />, <tt class="literal">onDblClick</tt>,
<tt class="literal">onMouseDown</tt> and <tt class="literal">onMouseUp</tt>
attributes refer to the mouse button. The <tt class="literal">onClick</tt>
event happens when the user presses down and then quickly releases
the mouse button, unless the user then quickly clicks the mouse
button for a second time. In that latter case, the
<tt class="literal">onDblClick</tt> event gets triggered in the browser.
</p>

<p>If you need to detect both halves of a mouse click as separate
events, use <tt class="literal">onMouseDown</tt> and
<tt class="literal">onMouseUp</tt>. When the user presses the mouse button,
the <tt class="literal">onMouseDown</tt> event occurs. The
<tt class="literal">onMouseUp</tt> event happens when the user releases the
mouse button.
</p>

<p>The <tt class="literal">onMouseMove</tt><a name="INDEX-2399" /> <a name="INDEX-2400" /> <a name="INDEX-2401" />, <tt class="literal">onMouseOut</tt>, and
<tt class="literal">onMouseOver</tt> events happen when the user drags the
mouse pointer. The <tt class="literal">onMouseOver</tt> event occurs when
the mouse first enters the display region occupied by the associated
HTML element. After entry, <tt class="literal">onMouseMove</tt> events are
generated as the mouse moves about within the element. Finally, when
the mouse exits the element, <tt class="literal">onMouseOut</tt> occurs.
</p>

<p>For some elements, the <tt class="literal">onFocus</tt> event corresponds
to <tt class="literal">onMouseOver</tt>, and <tt class="literal">onBlur</tt>
corresponds to <tt class="literal">onMouseOut</tt>.
</p>

</div>

<a name="html4-CHP-12-SECT-3.3.3" /><div class="sect3">
<h3 class="sect3">12.3.3.3. The keyboard events</h3>

<p><a name="INDEX-2402" />Only three
events currently are supported by the HTML 4 and XHTML standards
relating to user keyboard actions:
<tt class="literal">onKeyDown</tt><a name="INDEX-2403" /> <a name="INDEX-2404" /> <a name="INDEX-2405" />, <tt class="literal">onKeyUp</tt> and
<tt class="literal">onKeyPress</tt>,. The <tt class="literal">onKeyDown</tt>
event occurs when the user depresses a key on the keyboard;
<tt class="literal">onKeyUp</tt> happens when the key is released. The
<tt class="literal">onKeyPress</tt> attribute is triggered when a key is
pressed and released. Usually, you'll have handlers for either
the up and down events, or the composite keypress event, but not for
both.
</p>

</div>

<a name="html4-CHP-12-SECT-3.3.4" /><div class="sect3">
<h3 class="sect3">12.3.3.4. Document events</h3>

<p><a name="INDEX-2406" />
<a name="INDEX-2407" />Most of the document-related event
handlers relate to the actions and states of form controls. For
instance, <tt class="literal">onReset</tt><a name="INDEX-2408" /> <a name="INDEX-2409" /> and <tt class="literal">onSubmit</tt>
happen when the user activates the respective
<tt class="literal">reset</tt> or <tt class="literal">submit</tt> button.
Similarly, <tt class="literal">onSelect</tt><a name="INDEX-2410" /> <a name="INDEX-2411" /> and <tt class="literal">onChange</tt> occur
as users interact with certain form elements. Please consult <a href="ch09_01.htm">Chapter 9, "Forms"</a> for a detailed discussion of these
forms-related events.
</p>

<p>There also are some document-related event handlers that occur when
various document elements get handled by the browser. For instance,
the <tt class="literal">onLoad</tt> event may happen when a frameset is
complete, or when the body of an HTML or XHTML document gets loaded
and displayed by the browser. Similarly,
<tt class="literal">onUnload</tt><a name="INDEX-2412" /> <a name="INDEX-2413" /> occurs when a document is removed
from a frame or window.
</p>

</div>
</div>
<a name="html4-CHP-12-SECT-3.4" /><div class="sect2">
<h3 class="sect2">12.3.4. JavaScript URLs</h3>

<p><a name="INDEX-2414" /> <a name="INDEX-2415" />You can replace any conventional
URL reference in a document with one or more JavaScript statements.
The browser then executes the JavaScript code, rather than
downloading another document, whenever the browser references the
URL. The result of the last statement is taken to be the
"document" referenced by the URL and is displayed by the
browser accordingly. The result of the last statement is
<em class="emphasis">not</em> the URL of a document; it is the actual
content to be displayed by the browser.
</p>

<p>To create a JavaScript URL, use <tt class="literal">javascript</tt> as the
URL's protocol:
</p>

<blockquote><pre class="code">&lt;a href="javascript:generate_document(  )"&gt;</pre></blockquote>
<p>In the example, the JavaScript function <tt class="literal">generate_document(  )</tt> gets executed whenever the hyperlink gets selected by the user. The value returned by the function, presumably a valid HTML or XHTML document, is rendered and displayed by the browser.</p>


<p>It may be that the executed statement returns no value. In these
cases, the current document is left unchanged. For example, this
JavaScript URL:
</p>

<blockquote><pre class="code">&lt;a href="javascript:alert('Error!')"&gt;</pre></blockquote>

<p>pops up an alert dialog box and does nothing else. The document
containing the hyperlink would still be visible after the dialog box
was displayed and dismissed by the user.
</p>

</div>
<a name="html4-CHP-12-SECT-3.5" /><div class="sect2">
<h3 class="sect2">12.3.5. JavaScript Entities</h3>

<p><a name="INDEX-2416" />
<a name="INDEX-2417" />Character
<a name="INDEX-2418" />
<a name="INDEX-2419" />
<a name="INDEX-2420" /> <a name="INDEX-2421" />entities in HTML and XHTML consist of
an ampersand (<tt class="literal">&amp;</tt>), an entity name or number,
and a closing semicolon. For instance, to insert the ampersand
character itself in a document text flow, use the character sequence
<tt class="literal">&amp;amp;</tt>. Similarly, JavaScript entities consist
of an ampersand, one or more JavaScript statements enclosed in curly
braces, and a closing semicolon. For example:
</p>

<blockquote><pre class="code">&amp;{document.fgColor};</pre></blockquote>

<p>More than one statement must be separated by semicolons within the
curly braces. The value of the last (or only) statement is converted
to a string and replaces the entity in the document.
</p>

<p>Normally, entities can appear anywhere in an document. JavaScript
entities are restricted to values of tag attributes. This lets you
write "dynamic tags" whose attributes are not known until
the document is loaded and the JavaScript executed. For example:
</p>

<blockquote><pre class="code">&lt;body text=&amp;{favorite_color(  )};&gt;</pre></blockquote>

<p>will set the text color of the document to the color value returned
by the individual's <tt class="literal">favorite_color( )</tt>
function.
</p>

</div>
<a name="html4-CHP-12-SECT-3.6" /><div class="sect2">
<h3 class="sect2">12.3.6. The &lt;server&gt; Tag</h3>

<p>The <tt class="literal">&lt;server&gt;</tt><a name="INDEX-2422" />
<a name="INDEX-2423" /> tag is a strange beast. It is
processed by the web server and never seen by the browser. So what
you can do with this tag depends on the server you are using, not the
reader's browser.
</p>

<p>Netscape's server (not to be confused with the Netscape
Navigator browser) uses the <tt class="literal">&lt;server&gt;</tt> tag to
let you to place JavaScript statements within a document that get
processed by the server. The results of the executed JavaScript then
gets inserted into the document, replacing the
<tt class="literal">&lt;server&gt;</tt> tag. A complete discussion of this
so-called "server-side" JavaScript is completely beyond
this book; we include this brief reference only to document the
<tt class="literal">&lt;server&gt;</tt> tag.
</p>

<a name="html4-CHP-12-SIDEBAR-8" /><blockquote><table border="1" cellpadding="6"><tr><td>
<h4 class="objtitle">&lt;server&gt; <img src="figs/HTML_dingbat_N.gif"></h4>

<dl>
<dt><b>Function:</b></dt>
<dd>
<p>Define server-side JavaScript</p>
</dd>

</dl>

<dl>
<dt><b>Attributes:</b></dt>
<dd>
<p>None</p>
</dd>

</dl>

<dl>
<dt><b>End tag:</b></dt>
<dd>
<p>&lt;/server&gt;; never omitted</p>
</dd>

</dl>

<dl>
<dt><b>Contains:</b></dt>
<dd>
<p><em class="emphasis">JavaScript</em></p>
</dd>

</dl>

<dl>
<dt><b>Used in:</b></dt>
<dd>
<p><em class="emphasis">head_content</em></p>
</dd>

</dl>
</td></tr></table></blockquote>

<p>Like the <tt class="literal">&lt;script&gt;</tt> tag, the
<tt class="literal">&lt;server&gt;</tt> tag contains JavaScript code.
However, the latter tag and content code must appear inside the
document <tt class="literal">&lt;head&gt;</tt>. It is extracted from the
document and executed by the server when the document is requested
for download.
</p>

<p>Obviously, server-side JavaScript is tightly coupled to the server,
not to the browser. To fully exploit this tag and the benefits of
server-side JavaScript or other server-side programming languages,
consult your web server's documentation.<a name="INDEX-2424" />
</p>

</div>


<hr width="684" align="left" />
<div class="navbar"><table width="684" border="0"><tr><td align="left" valign="top" width="228"><a href="ch12_02.htm"><img alt="Previous" border="0" src="../gifs/txtpreva.gif" /></a></td><td align="center" valign="top" width="228"><a href="index.htm"><img alt="Home" border="0" src="../gifs/txthome.gif" /></a></td><td align="right" valign="top" width="228"><a href="ch12_04.htm"><img alt="Next" border="0" src="../gifs/txtnexta.gif" /></a></td></tr><tr><td align="left" valign="top" width="228">12.2. Embedded Content</td><td align="center" valign="top" width="228"><a href="index/index.htm"><img alt="Book Index" border="0" src="../gifs/index.gif" /></a></td><td align="right" valign="top" width="228">12.4. JavaScript Style Sheets</td></tr></table></div>
<hr width="684" align="left" />

<img alt="Library Navigation Links" border="0" src="../gifs/navbar.gif" usemap="#library-map" />
<p><font size="-1"><a href="copyrght.htm">Copyright &copy; 2002</a> O'Reilly &amp; Associates. All rights reserved.</font></p>

<map name="library-map"><area href="../index.htm" coords="0,1,78,93" shape="rect" /><area href="../wdesign/index.htm" coords="80,2,155,96" shape="rect" /><area href="index.htm" coords="158,0,263,97" shape="rect" /><area href="../audio/index.htm" coords="265,1,335,97" shape="rect" /><area href="../css/index.htm" coords="338,1,434,93" shape="rect" /><area href="../action/index.htm" coords="439,0,540,102" shape="rect" /><area href="../infoarch/index.htm" coords="544,0,685,102" shape="rect" /></map>

</body></html>
