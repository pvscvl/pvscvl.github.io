<html><head><title>The &lt;form&gt; Tag (HTML &amp; XHTML: The Definitive Guide, 4th Edition)</title><link rel="stylesheet" type="text/css" href="../style/style1.css" />

<meta name="DC.Creator" content="Chuck Musciano and Bill Kennedy" /><meta name="DC.Format" content="text/xml" scheme="MIME" /><meta name="DC.Language" content="en-US" /><meta name="DC.Publisher" content="O'Reilly &amp; Associates, Inc." /><meta name="DC.Source" scheme="ISBN" content="059600026XL" /><meta name="DC.Subject.Keyword" content="stuff" /><meta name="DC.Title" content="HTML &amp; XHTML: The Definitive Guide, 4th Edition" /><meta name="DC.Type" content="Text.Monograph" />

</head><body bgcolor="#ffffff">

<img alt="Book Home" border="0" src="gifs/smbanner.gif" usemap="#banner-map" /><map name="banner-map"><area shape="rect" coords="1,-2,616,66" href="index.htm" alt="HTML &amp; XHTML: The Definitive Guide" /><area shape="rect" coords="629,-11,726,25" href="jobjects/fsearch.htm" alt="Search this book" /></map>

<div class="navbar"><table width="684" border="0"><tr><td align="left" valign="top" width="228"><a href="ch09_01.htm"><img alt="Previous" border="0" src="../gifs/txtpreva.gif" /></a></td><td align="center" valign="top" width="228"><a href="index.htm">HTML &amp; XHTML: The Definitive Guide, 4th Edition</a></td><td align="right" valign="top" width="228"><a href="ch09_03.htm"><img alt="Next" border="0" src="../gifs/txtnexta.gif" /></a></td></tr></table></div>
<hr width="684" align="left" />


<h2 class="sect1">9.2. The &lt;form&gt; Tag</h2>

<p><a name="INDEX-1744" />Place a form anywhere
inside the body of a document with its elements enclosed by the
<tt class="literal">&lt;form&gt;</tt> tag and its respective end tag
<tt class="literal">&lt;/form&gt;</tt>. You can, and we recommend you often
do, include regular body content inside a form to specially label
user-input fields and to provide directions.
</p>

<a name="html4-CHP-9-SIDEBAR-1" /><blockquote><table border="1" cellpadding="6"><tr><td>
<h4 class="objtitle"><em class="emphasis">&lt;form&gt;</em></h4>

<dl>
<dt><b>Function:</b></dt>
<dd>
<p>Defines a form</p>
</dd>


<dt><b>Attributes:</b></dt><dd>

<table border="0">
<tr><td><p>ACCEPT</p></td></tr>


<tr><td><p>ACCEPT-CHARSET</p></td><td><p>ONKEYPRESS</p></td></tr>


<tr><td><p>ACTION</p></td><td><p>ONKEYUP</p></td></tr>


<tr><td><p>CLASS</p></td><td><p>ONMOUSEDOWN</p></td></tr>


<tr><td><p>DIR</p></td><td><p>ONMOUSEMOVE</p></td></tr>


<tr><td><p>ENCTYPE</p></td><td><p>ONMOUSEOUT</p></td></tr>


<tr><td><p>ID</p></td><td><p>ONMOUSEOVER</p></td></tr>


<tr><td><p>LANG </p></td><td><p>ONMOUSEUP</p></td></tr>


<tr><td><p>METHOD</p></td><td><p>ONRESET </p></td></tr>


<tr><td><p>NAME</p></td><td><p>ONSUBMIT</p></td></tr>


<tr><td><p>ONCLICK</p></td><td><p>STYLE</p></td></tr>


<tr><td><p>ONDBLCLICK</p></td><td><p>TARGET</p></td></tr>


<tr><td><p>ONKEYDOWN</p></td><td><p>TITLE</p></td></tr>

</table></dd></dl>
<dl>
<dt><b>End tag:</b></dt>
<dd>
<p>&lt;/form&gt;; never omitted</p>
</dd>

</dl>

<dl>
<dt><b>Contains:</b></dt>
<dd>
<p><em class="emphasis">form_content</em></p>
</dd>

</dl>

<dl>
<dt><b>Used in:</b></dt>
<dd>
<p><em class="emphasis">block</em></p>
</dd>

</dl>
</td></tr></table></blockquote>

<p>Browsers flow the special form elements into the containing
paragraphs as if they were small images embedded into the text. There
aren't any special layout rules for form elements, so you need
to use other elements, like tables and style sheets, to control the
placement of elements within the text flow.
</p>

<p>You must define at least two special form attributes, which provide
the name of the form's processing server and the method by
which the parameters are to be sent to the server. A third, optional
attribute lets you change how the parameters get encoded for secure
transmission over the network.
</p>

<a name="html4-CHP-9-SECT-2.1" /><div class="sect2">
<h3 class="sect2">9.2.1. The action Attribute</h3>

<p>The required <tt class="literal">action</tt><a name="INDEX-1745" /> attribute for the
<tt class="literal">&lt;form&gt;</tt> tag gives the URL of the application
that is to receive and process the form's data.
</p>

<p>Most webmasters keep their forms-processing applications in a special
directory on their web server, usually named
<em class="emphasis">cgi-bin</em>, which stands for
<a name="INDEX-1746" /> <a name="INDEX-1747" />Common Gateway
Interface-binaries.<a href="#FOOTNOTE-57">[57]</a> Keeping these special
forms-processing programs and applications in one directory makes it
easier to manage and secure the server.
</p><blockquote class="footnote"> <a name="FOOTNOTE-57" /><p>[57]The Common Gateway Interface
(CGI) defines the protocol by which servers interact with programs
that process form data.</p> </blockquote>

<p>A typical <tt class="literal">&lt;form&gt;</tt> tag with the
<tt class="literal">action</tt> attribute looks like this:
</p>

<blockquote><pre class="code">&lt;form action="http://www.kumquat.com/cgi-bin/update"&gt;
...
&lt;/form&gt;</pre></blockquote>

<p>The example URL tells the browser to contact the web server named
<em class="emphasis">www</em> in the <em class="emphasis">kumquat.com</em>
domain and pass along the user's form values to the application
named <em class="emphasis">update</em> located in the
<em class="emphasis">cgi-bin</em> directory.
</p>

<p>In general, if you see a URL that references a document in a
directory named <em class="emphasis">cgi-bin</em>, you can be pretty sure
that the document is actually an application that creates the desired
page dynamically each time it's invoked.
</p>

</div>
<a name="html4-CHP-9-SECT-2.2" /><div class="sect2">
<h3 class="sect2">9.2.2. The enctype Attribute</h3>

<p><a name="INDEX-1748" /> <a name="INDEX-1749" />The browser specially encodes the
form's data before it passes that data to the server so that it
does not become scrambled or corrupted during the transmission. It is
up to the server either to decode the parameters or to pass them,
still encoded, to the application.
</p>

<p>The standard encoding format is the Internet Media Type
"<a name="INDEX-1750" />
<a name="INDEX-1751" />
<a name="INDEX-1752" />application/x-www-form-urlencoded."
You can change that encoding with the optional
<tt class="literal">enctype</tt> attribute in the
<tt class="literal">&lt;form&gt;</tt> tag. The only optional encoding
formats currently supported are "multipart/form-data" and
"text/plain."
</p>

<p>The <a name="INDEX-1753" /> <a name="INDEX-1754" />
<a name="INDEX-1755" />multipart/form-data
alternative is required for those forms that contain file-selection
fields for upload by the user. The text/plain format should be used
in conjunction with a
<tt class="literal">mailto</tt><a name="INDEX-1756" /> <a name="INDEX-1757" /> <a name="INDEX-1758" /> URL
in the <tt class="literal">action</tt> attribute for sending forms to an
email address instead of a server. Unless your forms need
file-selection fields or you must use a <tt class="literal">mailto</tt> URL
in the <tt class="literal">action</tt> attribute, you probably should
ignore this attribute and simply rely upon the browser and your
processing server to use the default encoding type. 
<a href="ch09_05.htm">Section 9.5.1.3, "File-selection controls"</a> 
</p>

<a name="html4-CHP-9-SECT-2.2.1" /><div class="sect3">
<h3 class="sect3">9.2.2.1. The application/x-www-form-urlencoded encoding</h3>

<p>The standard
encoding -- application/x-www-form-urlencoded -- converts any
spaces in the form values to a plus sign (+), nonalphanumeric
characters into a percent sign (%) followed by two hexadecimal digits
that are the ASCII code of the character, and the line breaks in
multiline form data into <tt class="literal">%0D%0A</tt>.
</p>

<p>The standard encoding also includes a name for each field in the
form. (A "field" is a discrete element in the form, whose
value can be nearly anything from a single number to several lines of
text -- the user's address, for example.) If there is more
than one value in the field, the values are separated by ampersands.
</p>

<p>For example, here's what the browser sends to the server after
the user fills out a form with two input fields labeled
<tt class="literal">name</tt> and <tt class="literal">address</tt>; the former
field has just one line of text, while the latter field has several
lines of input:
</p>

<blockquote><pre class="code">name=O'Reilly+and+Associates&amp;address=101+Morris+Street%0D%0A
Sebastopol,%0D%0ACA+95472</pre></blockquote>

<p>We've broken the value into two lines for clarity in this book,
but in reality, the browser sends the data in an unbroken string. The
<tt class="literal">name</tt> field is "O'Reilly and
Associates" and the value of the <tt class="literal">address</tt>
field, complete with embedded newline characters, is:
</p>

<a name="INDEX-1759" /><a name="INDEX-1760" /><a name="INDEX-1761" /><blockquote><pre class="code">101 Morris Street
Sebastopol,
CA 95472

</pre></blockquote>

</div>

<a name="html4-CHP-9-SECT-2.2.2" /><div class="sect3">
<h3 class="sect3">9.2.2.2. The multipart/form-data encoding</h3>

<p>The
<a name="INDEX-1762" />multipart/form-data encoding encapsulates the
fields in the form as several parts of a single MIME-compatible
compound document. Each field has its own section in the resulting
file, set off by a standard delimiter. Within each section, one or
more header lines define the name of the field, followed by one or
more lines containing the value of the field. Since the value part of
each section can contain binary data or otherwise unprintable
characters, no character conversion or encoding occurs within the
transmitted data.
</p>

<p>This encoding format is by nature more verbose and longer than the
application/x-www-form-urlencoded format. As such, it can be used
only when the <tt class="literal">method</tt> attribute of the
<tt class="literal">&lt;form&gt;</tt> tag is set to
<tt class="literal">post</tt>, as described in <a href="ch09_02.htm">Section 9.2.4, "The method Attribute"</a>.
</p>

<p>A simple example makes it easy to understand this format.
Here's our previous example, when transmitted as
multipart/form-data:
</p>

<blockquote><pre class="code">------------------------------146931364513459
Content-Disposition: form-data; name="name"
  
O'Reilly and Associates
------------------------------146931364513459
Content-Disposition: form-data; name="address"
  
101 Morris Street
Sebastopol,
CA 95472
------------------------------146931364513459--</pre></blockquote>

<p>The first line of the transmission defines the delimiter that will
appear before each section of the document. It always consists of
thirty dashes and a long random number that distinguishes it from
other text that might appear in actual field values.
</p>

<p>The next lines contain the header fields for the first section. There
will always be a
<tt class="literal">Content-Disposition</tt><a name="INDEX-1763" /> field indicating the section contains
form data and providing the name of the form element whose value is
in this section. You may see other header fields; in particular, some
file-selection fields include a
<tt class="literal">Content-Type</tt><a name="INDEX-1764" /> header field
that indicates the type of data contained in the file being
transmitted.
</p>

<p>After the headers, there is a single blank line followed by the
actual value of the field on one or more lines. The section concludes
with a repeat of the delimiter line that started the transmission.
Another section follows immediately, and the pattern repeats until
all of the form parameters have been transmitted. The end of the
transmission is indicated by an extra two dashes at the end of the
last delimiter line.
</p>

<p>As we pointed out earlier, use multipart/form-data encoding only when
your form contains a file-selection field. Here's an example of
how the transmission of a file-selection field might look:
</p>

<blockquote><pre class="code">------------------------------146931364513459
Content-Disposition: form-data; name="thefile"; filename="test"
Content-Type: text/plain
  
First line of the file
...
Last line of the file
------------------------------146931364513459--</pre></blockquote>

<p>The only notable difference is that the
<tt class="literal">Content-Disposition</tt> field contains an extra
element, <tt class="literal">filename</tt>, that defines the name of the
file being transmitted. There might also be a
<tt class="literal">Content-Type</tt> field to further describe the
file's contents.<a name="INDEX-1765" /> <a name="INDEX-1766" /> <a name="INDEX-1767" />
</p>

</div>

<a name="html4-CHP-9-SECT-2.2.3" /><div class="sect3">
<h3 class="sect3">9.2.2.3. The text/plain encoding</h3>

<p><a name="INDEX-1768" /> <a name="INDEX-1769" />
<a name="INDEX-1770" />Use this
encoding only when you don't have access to a form-processing
server and need to send the form information by email (the
form's <tt class="literal">action</tt> attribute is a
<tt class="literal">mailto</tt> URL). The conventional encodings are
designed for computer consumption; text/plain is designed with people
in mind.
</p>

<p>In this encoding, each element in the form is placed on a single
line, with the name and value separated by an equal sign. Returning
to our name and address example, the form data would be returned as:
</p>

<blockquote><pre class="code">name=O'Reilly and Associates
address=101 Morris Street%0D%0ASebastopol,%0D%0ACA 95472</pre></blockquote>

<p>As you can see, the only characters still encoded in this form are
the carriage return and line feed characters in multiline text input
areas. Otherwise, the result is easily readable and generally
parsable by simple tools.<a name="INDEX-1771" />
</p>

</div>
</div>
<a name="html4-CHP-9-SECT-2.3" /><div class="sect2">
<h3 class="sect2">9.2.3. The accept-charset Attribute</h3>

<p>The <tt class="literal">accept-charset</tt><a name="INDEX-1772" /> attribute was introduced in the HTML 4.0
standard. It lets you specify a list of character sets that the
server must support to properly interpret the form data. The value of
this attribute is a quote-enclosed list of one or more ISO character
set names. The browser may choose to disregard the form or handle it
differently if the acceptable character sets do not match the
character set in use by the user. The default value of this attribute
is <tt class="literal">unknown</tt>, implying that the form character set
is the same as the document containing the form.
</p>

</div>
<a name="html4-CHP-9-SECT-2.4" /><div class="sect2">
<h3 class="sect2">9.2.4. The method Attribute</h3>

<p><a name="INDEX-1773" /> <a name="INDEX-1774" />The other required
attribute for the <tt class="literal">&lt;form&gt;</tt> tag sets the method
by which the browser sends the form's data to the server for
processing. There are two ways: the POST method and the GET method.
</p>

<p>With the <a name="INDEX-1775" />POST
method, the browser sends the data in two steps: the browser first
contacts the form-processing server specified in the
<tt class="literal">action</tt> attribute and, once contact is made, sends
the data to the server in a separate transmission.
</p>

<p>On the server side, POST-style applications are expected to read the
parameters from a standard location once they begin execution. Once
read, the parameters must be decoded before the application can use
the form values. Your particular server will define exactly how your
POST-style applications can expect to receive their parameters.
</p>

<p>The <a name="INDEX-1776" />GET method, on the other hand, contacts
the form-processing server and sends the form data in a single
transmission step: the browser appends the data to the form's
<tt class="literal">action</tt> URL, separated by the question mark
character.
</p>

<p>The common browsers transmit the form information by either method;
some servers receive the form data by only one or the other method.
You indicate which of the two methods -- POST or GET -- your
forms-processing server handles with the <tt class="literal">method</tt>
attribute in the <tt class="literal">&lt;form&gt;</tt> tag. Here's
the complete tag including the GET transmission
<tt class="literal">method</tt> attribute for the previous form example:
</p>

<blockquote><pre class="code">&lt;form method=GET 
   action="http://www.kumquat.com/cgi-bin/update"&gt; 
  ...
&lt;/form&gt;</pre></blockquote>

<a name="html4-CHP-9-SECT-2.4.1" /><div class="sect3">
<h3 class="sect3">9.2.4.1. POST or GET?</h3>

<p><a name="INDEX-1777" />Which one to use if your
form-processing server supports both the POST and GET methods? Here
are some rules of thumb:
</p>

<ul><li>
<p>For best form-transmission performance, send small forms with a few
short fields via the GET method.
</p>
</li><li>
<p>Because some server operating systems limit the number and length of
command-line arguments that can be passed to an application at once,
use the POST method to send forms that have many fields or that have
long text fields.
</p>
</li><li>
<p>If you are inexperienced in writing server-side form-processing
applications, choose GET. The extra steps involved in reading and
decoding POST-style transmitted parameters, while not too difficult,
may be more than you are willing to tackle.
</p>
</li><li>
<p>If security is an issue, choose POST. GET places the form parameters
directly in the application URL where they easily can be captured by
network sniffers or extracted from a server log file. If the
parameters contain sensitive information like credit card numbers,
you may be compromising your users without their knowledge. While
POST applications are not without their security holes, they can at
least take advantage of encryption when transmitting the parameters
as a separate transaction with the server.
</p>
</li><li>
<p>If you want to invoke the server-side application outside the realm
of a form, including passing it parameters, use GET because it lets
you include form-like parameters as part of a URL. POST-style
applications, on the other hand, expect an extra transmission from
the browser after the URL, something you can't do as part of a
conventional <tt class="literal">&lt;a&gt;</tt> tag.<a name="INDEX-1778" /> <a name="INDEX-1779" />
</p>
</li></ul>
</div>

<a name="html4-CHP-9-SECT-2.4.2" /><div class="sect3">
<h3 class="sect3">9.2.4.2. Passing parameters explicitly</h3>
<p><a name="INDEX-1780" />
<a name="INDEX-1781" />
<a name="INDEX-1782" />
<a name="INDEX-1783" />
<a name="INDEX-1784" />The foregoing bit of advice warrants some explanation. Suppose you had a simple form with two elements named x and y. When the values of these elements are encoded, they look like <a name="INDEX-1785" />
<a name="INDEX-1786" />this:</p>


<blockquote><pre class="code">x=27&amp;y=33</pre></blockquote>

<p>If the form uses <tt class="literal">method=GET</tt>, the URL used to
reference the server-side application looks something like this:
</p>

<blockquote><pre class="code">http://www.kumquat.com/cgi-bin/update?x=27&amp;y=33</pre></blockquote>

<p>There is nothing to keep you from creating a conventional
<tt class="literal">&lt;a&gt;</tt> tag that invokes the form with any
parameter value you desire, like so:
</p>

<blockquote><pre class="code">&lt;a href="http://www.kumquat.com/cgi-bin/update?x=19&amp;y=104"&gt;</pre></blockquote>

<p>The only hitch is that the ampersand that separates the parameters is
also the character-entity insertion character. When placed within the
<tt class="literal">href</tt> attribute of the <tt class="literal">&lt;a&gt;</tt>
tag, the ampersand will cause the browser to replace the characters
following it with a corresponding character entity.
</p>

<p>To keep this from happening, you must replace the literal ampersand
with its entity equivalent, either <tt class="literal">&amp;#38;</tt> or
<tt class="literal">&amp;amp;</tt>. With this substitution, our example of
the nonform reference to the server-side application looks like this:
</p>

<blockquote><pre class="code">&lt;a href="http://www.kumquat.com/cgi-bin/update?x=19&amp;amp;y=104"&gt;</pre></blockquote>

<p>Because of the potential confusion that arises from having to escape
the ampersands in the URL, server implementors are encouraged to also
accept the semicolon as a parameter separator. You might want to
check your server's documentation to see if the server honors
this convention. See <a href="appf_01.htm">Appendix F, "Character Entities"</a>. <a name="INDEX-1787" />
</p>

</div>
</div>
<a name="html4-CHP-9-SECT-2.5" /><div class="sect2">
<h3 class="sect2">9.2.5. The target Attribute</h3>

<p><a name="INDEX-1788" />
<a name="INDEX-1789" />
<a name="INDEX-1790" />
<a name="INDEX-1791" />With the advent of frames, it is possible
to redirect the results of a form to another window or frame. Simply
add the <tt class="literal">target</tt> attribute to your
<tt class="literal">&lt;form&gt;</tt> tag and provide the name of the
window or frame to receive the results.
</p>

<p>Like the <tt class="literal">target</tt> attribute used in conjunction with
the <tt class="literal">&lt;a&gt;</tt> tag, you can use a number of special
names with the <tt class="literal">target</tt> attribute in the
<tt class="literal">&lt;form&gt;</tt> tag to create a new window or to
replace the contents of existing windows and frames. 

<a href="ch11_07.htm">Section 11.7.1, "The target Attribute for the &lt;a&gt; Tag"</a>  
</p>

</div>
<a name="html4-CHP-9-SECT-2.6" /><div class="sect2">
<h3 class="sect2">9.2.6. The id, name, and title Attributes</h3>

<p>The <tt class="literal">id</tt> attribute lets you attach a unique string
label to your form for reference by programs (applets) and
hyperlinks. Before <tt class="literal">id</tt> was introduced in HTML 4.0,
Netscape Navigator used the
<tt class="literal">name</tt><a name="INDEX-1792" /> <a name="INDEX-1793" /> <a name="INDEX-1794" /> attribute to achieve similar effects,
although it cannot be used in a hyperlink. To be compatible with the
broadest range of browsers, we recommend that for now you include
both <tt class="literal">name</tt> and <tt class="literal">id</tt> with
<tt class="literal">&lt;form&gt;</tt>, if needed. In the future, you should
use only the <tt class="literal">id</tt> attribute for this purpose.
</p>

<p><a name="INDEX-1795" />The
<tt class="literal">title</tt> attribute defines a quote-enclosed string
value to label the form. However, it entitles only the form segment;
its value cannot be used in an applet reference or hyperlink. <a href="ch04_01.htm">Section 4.1.1.4, "The id attribute"</a> <a href="ch04_01.htm">Section 4.1.1.5, "The title attribute"</a>
</p>

</div>
<a name="html4-CHP-9-SECT-2.7" /><div class="sect2">
<h3 class="sect2">9.2.7. The class, style, lang, and dir Attributes</h3>

<p>The <tt class="literal">style</tt><a name="INDEX-1796" /> <a name="INDEX-1797" /> attribute creates an inline style for
the elements enclosed by the form, overriding any other style rule in
effect. The <tt class="literal">class</tt> attribute lets you format the
content according to a predefined class of the
<tt class="literal">&lt;form&gt;</tt> tag; its value is the name of that
class. <a href="ch08_01.htm">Section 8.1.1, "Inline Styles: The style Attribute"</a>   <a href="ch08_03.htm#html4-CHP-8-SECT-3">Section 8.3, "Style Classes"</a>
</p>

<p>The actual effects of <tt class="literal">style</tt> with
<tt class="literal">&lt;form&gt;</tt> are hard to predict, however. In
general, style properties affect the body content -- text, in
particular -- that you may include as part of the form's
contents, but <tt class="literal">&lt;form&gt;</tt> styles do affect the
display characteristics of the form elements.
</p>

<p>For instance, you may create a special font face and background color
style for the form. The form's text labels, but not the text
inside a text input form element, will appear in the specified font
face and background color. Similarly, the text labels you put beside
a set of radio buttons will be in the form-specified style, but not
the radio buttons themselves.
</p>

<p>The <tt class="literal">lang</tt><a name="INDEX-1798" /> <a name="INDEX-1799" /> attribute lets you specify the
language used within the form, with its value being any of the ISO
standard two-character language abbreviations, including an optional
language modifier. For example, adding <tt class="literal">lang=en-UK</tt>
tells the browser that the list is in English ("en") as
spoken and written in the United Kingdom (UK). Presumably, the
browser may make layout or typographic decisions based upon your
language choice.
</p>

<p>Similarly, the <tt class="literal">dir</tt> attribute tells the browser
which direction to display the list contents, from left to right
(<tt class="literal">dir=ltr</tt>) like English or French, or from right to
left (<tt class="literal">dir=rtl</tt>), such as with Hebrew or Chinese.
</p>

<p>The <tt class="literal">dir</tt> and <tt class="literal">lang</tt> attributes are
supported by the popular browsers, even though there are no behaviors
defined for any specific language. <a href="ch03_06.htm">Section 3.6.1.1, "The dir attribute"</a> <a href="ch03_06.htm">Section 3.6.1.2, "The lang attribute"</a>
</p>

</div>
<a name="html4-CHP-9-SECT-2.8" /><div class="sect2">
<h3 class="sect2">9.2.8. The Event Attributes</h3>

<p><a name="INDEX-1800" />As for most
other elements in a document, the <tt class="literal">&lt;form&gt;</tt> tag
honors the standard mouse and keyboard event-related attributes the
compliant browser will recognize. We describe the majority of these
attributes in detail in <a href="ch12_01.htm">Chapter 12, "Executable Content"</a>. <a href="ch12_03.htm">Section 12.3.3, "JavaScript Event Handlers"</a>
</p>

<p>Forms have two special event-related attributes:
<tt class="literal">onSubmit</tt><a name="INDEX-1801" /> <a name="INDEX-1802" /> and <tt class="literal">onReset</tt>. The
value of these event attributes is -- enclosed in quotation
marks -- one or a sequence of semicolon-separated JavaScript
expressions, methods, and function references. With
<tt class="literal">onSubmit</tt>, the browser executes these commands
before it actually submits the form's data to the server or
sends it to an email address.
</p>

<p>You may use the <tt class="literal">onSubmit</tt> event for a variety of
effects. The most popular is for a client-side form-verification
program that scans the form data and prompts the user to complete one
or more missing elements. Another popular and much simpler use is to
inform users when a <tt class="literal">mailto</tt> URL form is being
processed via email.
</p>

<p>The <tt class="literal">onReset</tt> attribute is used just like the
<tt class="literal">onSubmit</tt> attribute, except that the associated
program code is executed only if the user presses a
"Reset" button in the form.
</p>

</div>


<hr width="684" align="left" />
<div class="navbar"><table width="684" border="0"><tr><td align="left" valign="top" width="228"><a href="ch09_01.htm"><img alt="Previous" border="0" src="../gifs/txtpreva.gif" /></a></td><td align="center" valign="top" width="228"><a href="index.htm"><img alt="Home" border="0" src="../gifs/txthome.gif" /></a></td><td align="right" valign="top" width="228"><a href="ch09_03.htm"><img alt="Next" border="0" src="../gifs/txtnexta.gif" /></a></td></tr><tr><td align="left" valign="top" width="228">9. Forms</td><td align="center" valign="top" width="228"><a href="index/index.htm"><img alt="Book Index" border="0" src="../gifs/index.gif" /></a></td><td align="right" valign="top" width="228">9.3. A Simple Form Example</td></tr></table></div>
<hr width="684" align="left" />

<img alt="Library Navigation Links" border="0" src="../gifs/navbar.gif" usemap="#library-map" />
<p><font size="-1"><a href="copyrght.htm">Copyright &copy; 2002</a> O'Reilly &amp; Associates. All rights reserved.</font></p>

<map name="library-map"><area href="../index.htm" coords="0,1,78,93" shape="rect" /><area href="../wdesign/index.htm" coords="80,2,155,96" shape="rect" /><area href="index.htm" coords="158,0,263,97" shape="rect" /><area href="../audio/index.htm" coords="265,1,335,97" shape="rect" /><area href="../css/index.htm" coords="338,1,434,93" shape="rect" /><area href="../action/index.htm" coords="439,0,540,102" shape="rect" /><area href="../infoarch/index.htm" coords="544,0,685,102" shape="rect" /></map>

</body></html>