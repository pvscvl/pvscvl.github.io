<html><head><title>Server -Push Documents (HTML &amp; XHTML: The Definitive Guide, 4th Edition)</title><link rel="stylesheet" type="text/css" href="../style/style1.css" />

<meta name="DC.Creator" content="Chuck Musciano and Bill Kennedy" /><meta name="DC.Format" content="text/xml" scheme="MIME" /><meta name="DC.Language" content="en-US" /><meta name="DC.Publisher" content="O'Reilly &amp; Associates, Inc." /><meta name="DC.Source" scheme="ISBN" content="059600026XL" /><meta name="DC.Subject.Keyword" content="stuff" /><meta name="DC.Title" content="HTML &amp; XHTML: The Definitive Guide, 4th Edition" /><meta name="DC.Type" content="Text.Monograph" />

</head><body bgcolor="#ffffff">

<img alt="Book Home" border="0" src="gifs/smbanner.gif" usemap="#banner-map" /><map name="banner-map"><area shape="rect" coords="1,-2,616,66" href="index.htm" alt="HTML &amp; XHTML: The Definitive Guide" /><area shape="rect" coords="629,-11,726,25" href="jobjects/fsearch.htm" alt="Search this book" /></map>

<div class="navbar"><table width="684" border="0"><tr><td align="left" valign="top" width="228"><a href="ch13_02.htm"><img alt="Previous" border="0" src="../gifs/txtpreva.gif" /></a></td><td align="center" valign="top" width="228"><a href="index.htm">HTML &amp; XHTML: The Definitive Guide, 4th Edition</a></td><td align="right" valign="top" width="228"><a href="ch14_01.htm"><img alt="Next" border="0" src="../gifs/txtnexta.gif" /></a></td></tr></table></div>
<hr width="684" align="left" />


<h2 class="sect1">13.3. Server -Push Documents</h2>

<p><a name="INDEX-2489" /> <a name="INDEX-2490" />
<a name="INDEX-2491" />Server-push dynamic documents are
driven from the server side. The client-server connection remains
open after an initial transfer of data, and the server periodically
sends new data to the client, updating the document's display.
Server-push is made possible by some special programming on the
server side, and is enabled by the multipart mixed-media type feature
of Multipurpose Internet Mail Extensions (MIME), the computer
industry's standard for multimedia document transmission over
the Internet.
</p>

<p>Server-push documents currently are not supported by Internet
Explorer.
</p>

<a name="html4-CHP-13-SECT-3.1" /><div class="sect2">
<h3 class="sect2">13.3.1. The Multipart/Mixed Media Type</h3>

<p><a name="INDEX-2492" />
<a name="INDEX-2493" />
<a name="INDEX-2494" />As
we mentioned earlier in this chapter in the discussion of client-pull
dynamic documents, the HTTP server sends a two-part transmission to
the client browser: a header describing the document followed by the
document itself. The document's MIME type is part of the HTTP
header field. Normally, the server includes <tt class="literal">Content-type:
text/html</tt> in an HTML document's header before sending
its actual contents. By changing that content type to
multipart/mixed-media, you can send an HTML document or several
documents in several pieces, rather than in a single chunk. Only
Netscape, though, understands and responds to the multipart header
field; the other browsers either ignore additional parts or refuse
the document altogether.
</p>

<p><a name="INDEX-2495" />The general
form of the MIME multipart mixed-media content type header looks like
this:
</p>

<a name="INDEX-2496" /><blockquote><pre class="code">Content-type: multipart/mixed;boundary="SomeRandomString"</pre></blockquote>

<p>This HTTP header component tells the Netscape client to expect the
document to follow in several parts and to look for
<tt class="literal">SomeRandomString</tt>, which separates the parts. That
boundary string should be unique and not appear anywhere in any of
the individual parts. The content of the server-to-client
transmission looks like this:
</p>

<blockquote><pre class="code">--SomeRandomString
Content-type: text/plain

Data for the first part
--SomeRandomString
Content-type: text/plain

Data for the second part

--SomeRandomString--</pre></blockquote>

<p>The above example has two document parts, both plain text. The server
sends each part preceded by our <tt class="literal">SomeRandomString</tt>
document-boundary delimiter preceded by two dashes, followed by the
<tt class="literal">Content-type</tt> field, and then the data for each
part. The last transmission from server to client is a single
reference to the boundary string followed by two more dashes
indicating that this was the last part of the document.
</p>

<p>Upon receipt of each part, the Netscape browser automatically adds
the incoming data to the current document display.
</p>

<p>You've got to write a special HTTP server application to enable
this type of server-push dynamic document, one that creates the
special HTTP MIME multipart/mixed header and sends the various
documents separated by the boundary delimiter.
</p>

</div>
<a name="html4-CHP-13-SECT-3.2" /><div class="sect2">
<h3 class="sect2">13.3.2. Multipart Mixed-Replace Media Type</h3>

<p><a name="INDEX-2497" /> <a name="INDEX-2498" />
<a name="INDEX-2499" />Server-push
dynamic document authors may use an experimental variant of the MIME
multipart mixed-media content known as <em class="emphasis">multipart
mixed-replace-media</em>. The difference between this special
content-type and its predecessor is that rather than simply adding
content to the current display, the "replace" version has
each subsequent part replace the preceding one.
</p>

<p>The format of the mixed-replace HTTP header is very similar to its
multipart mixed counterpart; the only difference is in the
<tt class="literal">Content-type</tt>:
</p>

<blockquote><pre class="code">multipart/x-mixed-replace;boundary=SomeRandomString</pre></blockquote>

<p>All other rules regarding the format of the multipart content are the
same, including the boundary string used to separate the parts and
the individual <tt class="literal">Content-type</tt> fields for each part
of the content.
</p>

</div>
<a name="html4-CHP-13-SECT-3.3" /><div class="sect2">
<h3 class="sect2">13.3.3. Exploiting Multipart Documents</h3>

<p>It is easy to see how you can use the two special MIME multipart
content types to create server-push dynamic documents. By delaying
the time between parts, you might create an automatically scrolling
message in the Netscape browser window. Or by replacing portions of
the document through the x-mixed-replace MIME type, you might include
a dynamic billboard in your document, perhaps even animation.
</p>

<p>Note in particular that server-push multipart documents need not
apply only to HTML or other plain text documents. Images, too, are a
MIME-encoded content type, so you can have the HTTP server transmit
several images in sequence as parts of a multipart transmission.
Since you may also have each new image replace the previous one, the
result is crude animation. Done correctly over a network of
sufficient bandwidth, the effect can be quite satisfying.
</p>

<a name="html4-CHP-13-SECT-3.3.1" /><div class="sect3">
<h3 class="sect3">13.3.3.1. Efficiency considerations</h3>

<p><a name="INDEX-2500" />Server-push documents keep a
connection open between the client and server for the duration of the
dynamic document's activity. For some servers, this may consume
extra network resources and may also require that several processes
remain active, servicing the open connection. Make sure the
server-push process (and, hence, the client-server connection) expire
upon completion or after some idle period. Otherwise, someone will
inadvertently camp on an endlessly cycling server-push document and
choke off other users' access to the server.
</p>

<p>Before choosing to implement server-push documents, make sure that
your server can support the added processing and networking load.
Keep in mind that many simultaneous server-push documents may be
active, multiplying the impact on the server and seriously affecting
overall server performance.
</p>

</div>
</div>
<a name="html4-CHP-13-SECT-3.4" /><div class="sect2">
<h3 class="sect2">13.3.4. Creating a Server-Push Document</h3>

<p><a name="INDEX-2501" />Create a special application that
runs with the HTTP server to enable server-push dynamic documents.
The application must create the special MIME
<tt class="literal">Content-type</tt> header field that notifies the
Netscape browser that the following document comes in several
parts -- added to or replacing a portion of the current document.
The application must also create the appropriate boundary delimiter
and send the <tt class="literal">Content-type</tt> header and data for each
part, perhaps also delaying transmission of each part by some period
of time. You will need to consult your server's documentation
to learn how to create a server-side application that can be invoked
by accessing a specific URL on the server. With some servers this may
be as simple as placing the application in a certain directory on the
server. With others, you may have to bend over backwards and howl at
the moon on certain days.
</p>

<a name="html4-CHP-13-SECT-3.4.1" /><div class="sect3">
<h3 class="sect3">13.3.4.1. Server-push example application for NCSA and Apache httpd</h3>

<p>The NCSA and Apache <em class="emphasis">httpd</em> servers run on most
Unix systems. Administrators usually configure the server to run
server-side applications stored in a directory named
<em class="emphasis">cgi-bin</em>.
</p>

<p>The following is a simple Unix shell script that illustrates how to
send a multipart document to a Netscape client via NCSA or Apache
<em class="emphasis">httpd</em>:<a href="#FOOTNOTE-69">[69]</a>
</p><blockquote class="footnote"> <a name="FOOTNOTE-69" /><p>[69]It is an idiosyncrasy of
NCSA <em class="emphasis">httpd</em> that no spaces are allowed in the
<tt class="literal">Content-type</tt> field that precedes your multipart
document. Some authors like to place a space after the semicolon and
before the boundary keyword. Don't do this with NCSA
<em class="emphasis">httpd</em>; run the whole <tt class="literal">Content-type</tt>
together without spaces to get the server to recognize the
correct multipart content type.</p> </blockquote>

<blockquote><pre class="code">#!/bin/sh
#
# Let the client know we are sending a multipart document
# with a boundary string of "NEXT"
#
echo "HTTP/1.0 200"
echo "Content-type: multipart/x-mixed-replace;boundary=NEXT"
echo ""
echo "--NEXT"
while true
do
#
# Send the next part, followed by a boundary string
# Then sleep five seconds before repeating
#
 echo "Content-type: text/html"
 echo ""
 echo "&lt;html&gt;"
 echo "&lt;head&gt;"
 echo "&lt;title&gt;Processes On This Server&lt;/title&gt;"
 echo "&lt;/head&gt;"
 echo "&lt;body&gt;"
 echo "&lt;h3&gt; Processes On This Server&lt;/h3&gt;"
 echo "Date:"
 date
 echo "&lt;p&gt;"
 echo "&lt;pre&gt;"
 ps -el
 echo "&lt;/pre&gt;"
 echo "&lt;/body&gt;"
 echo "&lt;/html&gt;"
 echo "--NEXT"
 sleep 5
done</pre></blockquote>

<p>In a nutshell, this example script updates a list of the processes
running on the server machine every five seconds. The update
continues until the browser breaks the connection by moving on to
another document.
</p>

<p>We offer this shell script example to illustrate the basic logic
behind any server-push document generator. In reality, you should try
to create your server-side applications using a more conventional
programming language like Perl or C, for instance. The applications
run more efficiently and can better detect when the client has
severed the connection to the server. <a name="INDEX-2502" /> <a name="INDEX-2503" /> <a name="INDEX-2504" /> <a name="INDEX-2505" /> <a name="INDEX-2506" />
</p>

</div>
</div>


<hr width="684" align="left" />
<div class="navbar"><table width="684" border="0"><tr><td align="left" valign="top" width="228"><a href="ch13_02.htm"><img alt="Previous" border="0" src="../gifs/txtpreva.gif" /></a></td><td align="center" valign="top" width="228"><a href="index.htm"><img alt="Home" border="0" src="../gifs/txthome.gif" /></a></td><td align="right" valign="top" width="228"><a href="ch14_01.htm"><img alt="Next" border="0" src="../gifs/txtnexta.gif" /></a></td></tr><tr><td align="left" valign="top" width="228">13.2. Client-Pull Documents</td><td align="center" valign="top" width="228"><a href="index/index.htm"><img alt="Book Index" border="0" src="../gifs/index.gif" /></a></td><td align="right" valign="top" width="228">14. Netscape Layout Extensions</td></tr></table></div>
<hr width="684" align="left" />

<img alt="Library Navigation Links" border="0" src="../gifs/navbar.gif" usemap="#library-map" />
<p><font size="-1"><a href="copyrght.htm">Copyright &copy; 2002</a> O'Reilly &amp; Associates. All rights reserved.</font></p>

<map name="library-map"><area href="../index.htm" coords="0,1,78,93" shape="rect" /><area href="../wdesign/index.htm" coords="80,2,155,96" shape="rect" /><area href="index.htm" coords="158,0,263,97" shape="rect" /><area href="../audio/index.htm" coords="265,1,335,97" shape="rect" /><area href="../css/index.htm" coords="338,1,434,93" shape="rect" /><area href="../action/index.htm" coords="439,0,540,102" shape="rect" /><area href="../infoarch/index.htm" coords="544,0,685,102" shape="rect" /></map>

</body></html>