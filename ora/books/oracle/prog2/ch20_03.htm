<HTML
><HEAD
><TITLE
>[Chapter 20] 20.3 Syntax for Object Views</TITLE
><META
NAME="DC.Creator"
CONTENT="Steven Feuerstein &amp; Bill Pribyl"><META
NAME="DC.Date"
CONTENT="2000-04-29T19:09:39Z"><META
NAME="DC.Format"
CONTENT="text/html"
SCHEME="MIME"><META
NAME="DC.Identifier"
CONTENT="O'Reilly and Associates CD-ROM-1-56592-335-9E"><META
NAME="DC.Language"
CONTENT="en-US"><META
NAME="DC.Publisher"
CONTENT="O'Reilly &amp; Associates, Inc."><META
NAME="DC.Source"
CONTENT="1-56592-335-9E"
SCHEME="ISBN"><META
NAME="DC.Subject.Keyword"
CONTENT="Oracle PL/SQL"><META
NAME="DC.Title"
CONTENT="Oracle PL/SQL Programming, 2nd Edition"><META
NAME="DC.Type"
CONTENT="Text.Monograph"><META
NAME="generator"
CONTENT="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><LINK
REL="stylesheet"
TYPE="text/css"
HREF="../style/style1.css"><LINK
REV="made"
HREF="mailto:online-books@oreilly.com"
TITLE="Online Books Comments"><LINK
REL="up"
HREF="ch20_01.htm"
TITLE="20. Object Views"><LINK
REL="prev"
HREF="ch20_02.htm"
TITLE="20.2 INSTEAD OF Triggers"><LINK
REL="next"
HREF="ch20_04.htm#SQL2-CH-20-SECT-4.2.3"
TITLE="20.4 Differences Between Object Views and Object Tables"></HEAD
><BODY
><DIV
CLASS="htmlnav"
><H1
><IMG
SRC="gifs/smbanner.gif"
ALT="Oracle PL/SQL Programming, 2nd Edition"
USEMAP="#srchmap"
BORDER="0"></H1
><MAP
NAME="srchmap"
><AREA
SHAPE="RECT"
COORDS="0,0,466,65"
HREF="index.htm"
ALT="Oracle PL/SQL Programming, 2nd Edition"><AREA
SHAPE="RECT"
COORDS="467,0,514,18"
HREF="jobjects/fsearch.htm"
ALT="Search this book"></MAP
><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch20_02.htm"
TITLE="20.2 INSTEAD OF Triggers"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 20.2 INSTEAD OF Triggers"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><SPAN
CLASS="NAVTITLE"
><A
CLASS="chapter"
REL="up"
HREF="ch20_01.htm"
TITLE="20. Object Views"
>Chapter 20<BR>Object Views</A
></SPAN
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch20_04.htm#SQL2-CH-20-SECT-4.2.3"
TITLE="20.4 Differences Between Object Views and Object Tables"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 20.4 Differences Between Object Views and Object Tables"
BORDER="0"></A
></TD
></TR
></TABLE
>&nbsp;<HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"></DIV
><DIV
CLASS="sect1"
><H2
CLASS="sect1"
><A
CLASS="title"
NAME="SQL2-CH-20-SECT-3"
>20.3 Syntax for Object Views</A
></H2
><P
CLASS="para"
>Now that we've looked at one example and considered what INSTEAD OF triggers can offer, let's examine with more rigor the syntax required to create your own object views. </P
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="SQL2-CH-20-SECT-3.1"
>20.3.1 CREATE VIEW: Creating an Object View</A
></H3
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="ch20-idx-6258-1"
></A
><A
CLASS="indexterm"
NAME="ch20-idx-6258-2"
></A
>This is the basic syntax for creating an object view: </P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>CREATE [ OR REPLACE ] VIEW &lt;view name&gt;
   OF &lt;object type name&gt;
   [ WITH OBJECT OID DEFAULT | (&lt;attribute list&gt;) ]
   AS &lt;query&gt;
   [ WITH [ READ ONLY | CHECK OPTION ]];</PRE
></BLOCKQUOTE
><P
CLASS="para"
>Note that we've omitted some of the optional keywords, such as FORCE and CONSTRAINT, from this syntax discussion. The elements are as follows: </P
><DL
CLASS="variablelist"
><DT
CLASS="term"
>OF object type name</DT
><DD
CLASS="listitem"
><P
CLASS="para"
>The name of the preexisting user-defined object type that this view will emulate. </P
></DD
><DT
CLASS="term"
>WITH OBJECT OID</DT
><DD
CLASS="listitem"
><P
CLASS="para"
>Indicates only that the OID specification follows. (It's a bit strange that the clause requires all three keywords. It seems grammatically sufficient to me to say WITH OID, which should mean "with object identifier," as opposed to WITH OBJECT OID, which means "with object <EM
CLASS="emphasis"
>object</EM
> (sic) identifier." Must have been a late night at the syntax factory... </P
></DD
><DT
CLASS="term"
>DEFAULT</DT
><DD
CLASS="listitem"
><P
CLASS="para"
>In the event that the object view is defined on an underlying object table or object view, you can tell Oracle to use the OID of the underlying object. If your view is eligible to use DEFAULT, the result is the same whether you include or omit the WITH OBJECT OID DEFAULT clause. That is, the default is DEFAULT (!). </P
></DD
><DT
CLASS="term"
>attribute list</DT
><DD
CLASS="listitem"
><P
CLASS="para"
>Comma-separated list of type attributes which comprise a (usually unique) identifier. </P
></DD
><DT
CLASS="term"
>query</DT
><DD
CLASS="listitem"
><P
CLASS="para"
>Your query must retrieve columns or expressions that match one for one, in order, the individual attributes of the object type. The datatype of each SELECTed expression must also match, or be type-compatible with, the corresponding attribute defined in the object type. The maximum number of columns or expressions is 1000. </P
></DD
><DT
CLASS="term"
>WITH CHECK OPTION</DT
><DD
CLASS="listitem"
><P
CLASS="para"
>If your view is updateable&nbsp;-- either because it is inherently updateable or because you have created an INSTEAD OF trigger&nbsp;-- this option will prevent inserts or updates of data that cannot subsequently be selected (for example, because of a WHERE clause restriction). </P
></DD
><DT
CLASS="term"
>WITH READ ONLY</DT
><DD
CLASS="listitem"
><P
CLASS="para"
>Prevents any DML operation from being executed. This clause takes precedence over INSTEAD OF triggers. </P
></DD
></DL
><P
CLASS="para"
>It's also important to note what is missing. Conventional views may use an alias clause; that is, a comma-separated list of names that Oracle will assign, in order, to the columns of the view. By contrast, you cannot use an alias clause in an object view. Instead, the object view always derives its list of column (attribute) names from the attribute names of the underlying type.<A
CLASS="indexterm"
NAME="AUTOID-19007"
></A
> </P
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="SQL2-CH-20-SECT-3.2"
>20.3.2 DROP: Dropping Views and Triggers</A
></H3
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="AUTOID-19011"
></A
> <A
CLASS="indexterm"
NAME="AUTOID-19013"
></A
> <A
CLASS="indexterm"
NAME="AUTOID-19016"
></A
> <A
CLASS="indexterm"
NAME="AUTOID-19019"
></A
> <A
CLASS="indexterm"
NAME="AUTOID-19022"
></A
> There is no syntactic difference between dropping a conventional view and dropping an object view. Both are accomplished using the command: </P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>DROP VIEW &lt;view name&gt;;</PRE
></BLOCKQUOTE
><P
CLASS="para"
>Dropping a view has the side effect of dropping any INSTEAD OF triggers that you have created on the view. Of course, you can drop INSTEAD OF triggers explicitly, using the following: </P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>DROP TRIGGER &lt;trigger name&gt;;</PRE
></BLOCKQUOTE
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="SQL2-CH-20-SECT-3.3"
>20.3.3 MAKE_REF: Returning a Virtual REF</A
></H3
><P
CLASS="para"
>The <A
CLASS="indexterm"
NAME="ch20-idx-6263-1"
></A
> <A
CLASS="indexterm"
NAME="ch20-idx-6263-2"
></A
><A
CLASS="indexterm"
NAME="ch20-idx-6263-3"
></A
> MAKE_REF function returns a "virtual REF" for an object view. (REFs are described in <A
CLASS="xref"
HREF="ch18_01.htm"
>Chapter 18</A
>.) Its syntax is: </P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>MAKE_REF (&lt;view name&gt;, &lt;value list&gt;)</PRE
></BLOCKQUOTE
><P
CLASS="para"
>Where:</P
><DL
CLASS="variablelist"
><DT
CLASS="term"
>view name</DT
><DD
CLASS="listitem"
><P
CLASS="para"
>The view from which you wish to derive a REF value (which other object views may reference). </P
></DD
><DT
CLASS="term"
>value list</DT
><DD
CLASS="listitem"
><P
CLASS="para"
>Comma-separated list of column values whose datatype must match one for one with the OID attribute(s) of &lt;view name&gt;. </P
></DD
></DL
><P
CLASS="para"
>As a generic example, let's say that we have a table foo, and we define a corresponding object type and object view: </P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>CREATE TABLE foo (
   id NUMBER PRIMARY KEY,  -- defining it as a PK is optional
   name VARCHAR2(30)
);

CREATE TYPE Foo_t AS OBJECT (
   id NUMBER,
   name VARCHAR2(30)
);

CREATE VIEW foo_v
   OF Foo_t
   WITH OBJECT OID (id)
AS
   SELECT id, name
     FROM foo;</PRE
></BLOCKQUOTE
><P
CLASS="para"
>Now we can use MAKE_REF in an any statement, including something as simple as: </P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>SELECT MAKE_REF(foo_v, 123) FROM DUAL;</PRE
></BLOCKQUOTE
><P
CLASS="para"
>This statement will return a REF to the virtual object with id = 123. (Although you will see a result for this query when you execute it from SQL*Plus, Oracle's earlier admonition still applies: don't attempt to store this value anywhere. Incidentally, this query causes the ORA-00932 error, "inconsistent datatypes," in SQL Worksheet.[<A
CLASS="footnote"
HREF="#AUTOID-19055"
>2</A
>] ) </P
><BLOCKQUOTE
CLASS="footnote"
><DIV
CLASS="footnote"
><P
CLASS="para"
><A
CLASS="footnote"
NAME="AUTOID-19055"
>[2]</A
> SQL Worksheet is an SQL interpreter that ships with Oracle Enterprise Manager. SQL Worksheet has one significant advantage over SQL*Plus: it retains in memory a good number of your recently issued statements, allowing you to retrieve and edit SQL statements or PL/SQL code easily. I developed many of the examples for the objects chapters of this book using this tool.</P
></DIV
></BLOCKQUOTE
><P
CLASS="para"
>If you want to construct a REF via the foo_v view for object 123, the record in the foo table with id = 123 does not even need to exist! MAKE_REF merely applies an internal Oracle algorithm to the supplied arguments to derive a REF; it does not read the foo_v view to determine whether the object really exists in the underlying table. </P
><P
CLASS="para"
>One final note about MAKE_REF: you might be tempted to call MAKE_REF natively in PL/SQL: </P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>DECLARE
   foo_ref REF Foo_t;
BEGIN
   foo_ref := MAKE_REF (foo_v, 123);    -- invalid
END;</PRE
></BLOCKQUOTE
><P
CLASS="para"
>But that statement fails with the error PLS-00201, "identifier 'MAKE_REF' must be declared." You might also try the following: </P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>DECLARE
   foo_ref REF Foo_t;
BEGIN
   SELECT MAKE_REF(foo_v, 123)    -- invalid
     INTO foo_ref
     FROM DUAL;
END;</PRE
></BLOCKQUOTE
><P
CLASS="para"
>But this too fails, at least in Oracle 8.0.3. This behavior is a suspected bug.<A
CLASS="indexterm"
NAME="AUTOID-19063"
></A
> <A
CLASS="indexterm"
NAME="AUTOID-19064"
></A
> <A
CLASS="indexterm"
NAME="AUTOID-19065"
></A
> <A
CLASS="indexterm"
NAME="AUTOID-19066"
></A
> </P
></DIV
></DIV
><DIV
CLASS="htmlnav"
><P
></P
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch20_02.htm"
TITLE="20.2 INSTEAD OF Triggers"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 20.2 INSTEAD OF Triggers"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="book"
HREF="index.htm"
TITLE="Oracle PL/SQL Programming, 2nd Edition"
><IMG
SRC="../gifs/txthome.gif"
ALT="Oracle PL/SQL Programming, 2nd Edition"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch20_04.htm#SQL2-CH-20-SECT-4.2.3"
TITLE="20.4 Differences Between Object Views and Object Tables"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 20.4 Differences Between Object Views and Object Tables"
BORDER="0"></A
></TD
></TR
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
>20.2 INSTEAD OF Triggers</TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="index"
HREF="index/idx_0.htm"
TITLE="Book Index"
><IMG
SRC="../gifs/index.gif"
ALT="Book Index"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
>20.4 Differences Between Object Views and Object Tables</TD
></TR
></TABLE
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"></DIV
><IMG SRC="../gifs/smnavbar.gif"
USEMAP="#map"
BORDER="0"
ALT="The Oracle Library Navigation">

<P><font size="-1">
<a href="../copyrght.htm#copy">Copyright (c) 2000</a> O'Reilly &amp; Associates. All rights reserved.
</font></P>

<MAP NAME="map">

<AREA SHAPE="RECT"
COORDS="0,0,35,30"
HREF="../index.htm"
ALT="Library Home">

<AREA SHAPE="RECT"
COORDS="40,0,95,30"
HREF="index.htm"
ALT="Oracle PL/SQL Programming, 2nd. Ed.">

<AREA SHAPE="RECT"
COORDS="100,0,200,30"
HREF="../guide8i/index.htm"
ALT="Guide to Oracle 8i Features">

<AREA SHAPE="RECT"
COORDS="205,0,245,30"
HREF="../bipack/index.htm"
ALT="Oracle Built-in Packages">

<AREA SHAPE="RECT"
COORDS="250,0,320,30"
HREF="../advprog/index.htm"
ALT="Advanced PL/SQL Programming with Packages">

<AREA SHAPE="RECT"
COORDS="325,0,420,30"
HREF="../webapp/index.htm"
ALT="Oracle Web Applications">

<AREA SHAPE="RECT"
COORDS="425,0,490,30"
HREF="../langpkt/index.htm"
ALT="Oracle PL/SQL Language Pocket Reference">

<AREA SHAPE="RECT"
COORDS="495,0,570,30"
HREF="../bipkt/index.htm"
ALT="Oracle PL/SQL Built-ins Pocket Reference">
</MAP>

</BODY
>
<!-- Mirrored from liso.cs.pusan.ac.kr by HTTrack Website Copier/3.x [XR&CO'2001] -->
</HTML
>
