<HTML
><HEAD
><TITLE
>[Chapter 4] Variables and Program Data</TITLE
><META
NAME="DC.Creator"
CONTENT="Steven Feuerstein &amp; Bill Pribyl"><META
NAME="DC.Date"
CONTENT="2000-04-29T18:53:38Z"><META
NAME="DC.Format"
CONTENT="text/html"
SCHEME="MIME"><META
NAME="DC.Identifier"
CONTENT="O'Reilly and Associates CD-ROM-1-56592-335-9E"><META
NAME="DC.Language"
CONTENT="en-US"><META
NAME="DC.Publisher"
CONTENT="O'Reilly &amp; Associates, Inc."><META
NAME="DC.Source"
CONTENT="1-56592-335-9E"
SCHEME="ISBN"><META
NAME="DC.Subject.Keyword"
CONTENT="Oracle PL/SQL"><META
NAME="DC.Title"
CONTENT="Oracle PL/SQL Programming, 2nd Edition"><META
NAME="DC.Type"
CONTENT="Text.Monograph"><META
NAME="generator"
CONTENT="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><LINK
REL="stylesheet"
TYPE="text/css"
HREF="../style/style1.css"><LINK
REV="made"
HREF="mailto:online-books@oreilly.com"
TITLE="Online Books Comments"><LINK
REL="up"
HREF="part02.htm"
TITLE="II. PL/SQL Language Elements "><LINK
REL="prev"
HREF="part02.htm"
TITLE="II. PL/SQL Language Elements "><LINK
REL="next"
HREF="ch04_02.htm#SQL2-CH-4-SECT-2.7.7"
TITLE="4.2 Scalar Datatypes "></HEAD
><BODY
><DIV
CLASS="htmlnav"
><H1
><IMG
SRC="gifs/smbanner.gif"
ALT="Oracle PL/SQL Programming, 2nd Edition"
USEMAP="#srchmap"
BORDER="0"></H1
><MAP
NAME="srchmap"
><AREA
SHAPE="RECT"
COORDS="0,0,466,65"
HREF="index.htm"
ALT="Oracle PL/SQL Programming, 2nd Edition"><AREA
SHAPE="RECT"
COORDS="467,0,514,18"
HREF="jobjects/fsearch.htm"
ALT="Search this book"></MAP
><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="part"
HREF="part02.htm"
TITLE="II. PL/SQL Language Elements "
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: II. PL/SQL Language Elements "
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><SPAN
CLASS="NAVTITLE"
>Chapter 4</SPAN
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch04_02.htm#SQL2-CH-4-SECT-2.7.7"
TITLE="4.2 Scalar Datatypes "
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 4.2 Scalar Datatypes "
BORDER="0"></A
></TD
></TR
></TABLE
>&nbsp;<HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"></DIV
><DIV
CLASS="chapter"
><H1
CLASS="chapter"
><A
CLASS="title"
NAME="SQL2-CH-4"
>4. Variables and Program Data</A
></H1
><DIV
CLASS="htmltoc"
><P
><B
>Contents:</B
><BR><A
CLASS="sect1"
HREF="#SQL2-CH-4-SECT-1"
TITLE="4.1 Identifiers"
>Identifiers</A
><BR><A
CLASS="sect1"
HREF="ch04_02.htm#SQL2-CH-4-SECT-2.7.7"
TITLE="4.2 Scalar Datatypes "
>Scalar Datatypes </A
><BR><A
CLASS="sect1"
HREF="ch04_03.htm#SQL2-CH-4-SECT-3.3"
TITLE="4.3 NULLs in PL/SQL"
>NULLs in PL/SQL</A
><BR><A
CLASS="sect1"
HREF="ch04_04.htm#SQL2-CH-4-SECT-4.3"
TITLE="4.4 Variable Declarations"
>Variable Declarations</A
><BR><A
CLASS="sect1"
HREF="ch04_05.htm"
TITLE="4.5 Anchored Declarations"
>Anchored Declarations</A
><BR><A
CLASS="sect1"
HREF="ch04_06.htm#SQL2-CH-4-SECT-6.1"
TITLE="4.6 Programmer-Defined Subtypes"
>Programmer-Defined Subtypes</A
><BR><A
CLASS="sect1"
HREF="ch04_07.htm#SQL2-CH-4-SECT-7.7"
TITLE="4.7 Tips for Creating and Using Variables"
>Tips for Creating and Using Variables</A
></P
><P
></P
></DIV
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="AUTOID-2884"
></A
> <A
CLASS="indexterm"
NAME="AUTOID-2887"
></A
> <A
CLASS="indexterm"
NAME="AUTOID-2890"
></A
> <A
CLASS="indexterm"
NAME="ch04-idx-25575-4"
></A
>Almost every PL/SQL program you write contains internal data stored as variables, constants, records, or tables. This chapter refers to these various types of storage as variables. Variables may be used for many purposes; for example, they may store information retrieved from columns in a table or may hold calculated values for use only in the program. Variables may be scalar (made up of a single value) or composite (made up of multiple values or components). </P
><P
CLASS="para"
>The attributes of a variable are its name, datatype, and value (or values, in a complex datatype like a record). The name indicates the part of memory you want to access or change. The datatype determines the type of information you can store in the variable. The value (or values, in the case of a composite datatype) is the set of bits stored in the variable's memory location. </P
><P
CLASS="para"
>This chapter describes the kinds of names you can give PL/SQL elements and the different types of scalar variables you can declare and use in your programs. It also offers tips on how best to use program data in your code. </P
><DIV
CLASS="sect1"
><H2
CLASS="sect1"
><A
CLASS="title"
NAME="SQL2-CH-4-SECT-1"
>4.1 Identifiers</A
></H2
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="ch04-idx-998556-1"
></A
> <A
CLASS="indexterm"
NAME="ch04-idx-998556-2"
></A
> <A
CLASS="indexterm"
NAME="ch04-idx-998556-3"
></A
> Identifiers are the names given to PL/SQL elements such as variables or nested tables or cursors. Identifiers: </P
><UL
CLASS="itemizedlist"
><LI
CLASS="listitem"
><P
CLASS="para"
>Can be up to 30 characters in length</P
></LI
><LI
CLASS="listitem"
><P
CLASS="para"
>Must start with a letter</P
></LI
><LI
CLASS="listitem"
><P
CLASS="para"
>Can then be composed of any of the following: letters, numerals, $, #, and _ </P
></LI
></UL
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="AUTOID-2918"
></A
>A named constant is a special kind of variable. A named constant has a name, datatype, and value, just like a regular variable. However, unlike a regular variable, the value of a named constant must be set when the constant is declared and may not change thereafter. Its value is constant. Unless otherwise mentioned, the information provided below for variables also applies to named constants. </P
><BLOCKQUOTE
CLASS="note"
><P
CLASS="para"
><STRONG
>NOTE:</STRONG
> <A
CLASS="indexterm"
NAME="AUTOID-2922"
></A
>An unnamed constant is a literal value, such as 2 or Bobby McGee. A literal does not have a name, though it does have an implied (undeclared) datatype.</P
></BLOCKQUOTE
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="SQL2-CH-4-SECT-1.1"
>4.1.1 Choose the Right Name</A
></H3
><P
CLASS="para"
>The name of your identifier should describe as accurately and concisely as possible what the identifier represents. Let's take a look at choosing the name for a variable. Outside of the actual use or context of a variable, the name is all the variable's got. And if the name is bad, the context is often distorted by the bad choice of a moniker. </P
><P
CLASS="para"
>The first step towards choosing an accurate name is to have a clear idea of how the variable is to be used. You might even take a moment to write down&nbsp;-- in noncomputer terms&nbsp;-- what the variable represents. You can then easily extract an appropriate name from this statement. For example, if a variable represents the "total number of calls made about lukewarm coffee," a good name for that variable would be total_calls_on_cold_coffee&nbsp;-- or tot_cold_calls, if you are allergic to five-word variable names. A bad name for that variable would be "totcoffee" or t_#_calls_lwcoff, both of which are too cryptic to get the point across. </P
><P
CLASS="para"
>You can also give each variable a name that describes the business problem that variable will be used to solve. The name should be much more than a description of the internal or computer-oriented function of the variable. If you need a Boolean variable to indicate when "the total order amount exceeds existing balance," a good name would be total_order_exceeds_balance. A poorly chosen name would be float_overflow or group_sum_too_big. You, the developer, know that you had to perform a SUM with a GROUP BY to calculate the total order, but no one else needs to know about that. </P
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="SQL2-CH-4-SECT-1.2"
>4.1.2 Select Readable Names</A
></H3
><P
CLASS="para"
>PL/SQL lets you use 30 characters, including very clear separators such as the underscore character ( _ ), to name your variables. That gives you lots of room to come up with unambiguous names. In fact, if you have variable names of fewer than five characters in length, they are probably too short to be accurate and useful. </P
><P
CLASS="para"
>Resist the temptation to name a variable which stores the current date as curdat or now. Instead use the more descriptive current_date or even system_date (a logical expansion on the SQL function SYSDATE, which usually provides the value). </P
><P
CLASS="para"
>An excellent way to check the quality of your variable names (as well as the names of your other objects, particularly module names) is to ask for feedback from another developer on the same project. The code should, to a large extent, make sense if the variables and other identifiers are named in ways that describe the action, and not the cute programming tricks you used to meet the specifications.<A
CLASS="indexterm"
NAME="AUTOID-2935"
></A
> <A
CLASS="indexterm"
NAME="AUTOID-2936"
></A
> </P
></DIV
></DIV
></DIV
><DIV
CLASS="htmlnav"
><P
></P
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="part"
HREF="part02.htm"
TITLE="II. PL/SQL Language Elements "
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: II. PL/SQL Language Elements "
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="book"
HREF="index.htm"
TITLE="Oracle PL/SQL Programming, 2nd Edition"
><IMG
SRC="../gifs/txthome.gif"
ALT="Oracle PL/SQL Programming, 2nd Edition"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch04_02.htm#SQL2-CH-4-SECT-2.7.7"
TITLE="4.2 Scalar Datatypes "
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 4.2 Scalar Datatypes "
BORDER="0"></A
></TD
></TR
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
>II. PL/SQL Language Elements </TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="index"
HREF="index/idx_0.htm"
TITLE="Book Index"
><IMG
SRC="../gifs/index.gif"
ALT="Book Index"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
>4.2 Scalar Datatypes </TD
></TR
></TABLE
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"></DIV
><IMG SRC="../gifs/smnavbar.gif"
USEMAP="#map"
BORDER="0"
ALT="The Oracle Library Navigation">

<P><font size="-1">
<a href="../copyrght.htm#copy">Copyright (c) 2000</a> O'Reilly &amp; Associates. All rights reserved.
</font></P>

<MAP NAME="map">

<AREA SHAPE="RECT"
COORDS="0,0,35,30"
HREF="../index.htm"
ALT="Library Home">

<AREA SHAPE="RECT"
COORDS="40,0,95,30"
HREF="index.htm"
ALT="Oracle PL/SQL Programming, 2nd. Ed.">

<AREA SHAPE="RECT"
COORDS="100,0,200,30"
HREF="../guide8i/index.htm"
ALT="Guide to Oracle 8i Features">

<AREA SHAPE="RECT"
COORDS="205,0,245,30"
HREF="../bipack/index.htm"
ALT="Oracle Built-in Packages">

<AREA SHAPE="RECT"
COORDS="250,0,320,30"
HREF="../advprog/index.htm"
ALT="Advanced PL/SQL Programming with Packages">

<AREA SHAPE="RECT"
COORDS="325,0,420,30"
HREF="../webapp/index.htm"
ALT="Oracle Web Applications">

<AREA SHAPE="RECT"
COORDS="425,0,490,30"
HREF="../langpkt/index.htm"
ALT="Oracle PL/SQL Language Pocket Reference">

<AREA SHAPE="RECT"
COORDS="495,0,570,30"
HREF="../bipkt/index.htm"
ALT="Oracle PL/SQL Built-ins Pocket Reference">
</MAP>

</BODY
>
<!-- Mirrored from liso.cs.pusan.ac.kr by HTTrack Website Copier/3.x [XR&CO'2001] -->
</HTML
>
