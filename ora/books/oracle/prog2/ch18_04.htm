<HTML
><HEAD
><TITLE
>[Chapter 18] 18.4 Manipulating Objects in PL/SQL and SQL</TITLE
><META
NAME="DC.Creator"
CONTENT="Steven Feuerstein &amp; Bill Pribyl"><META
NAME="DC.Date"
CONTENT="2000-04-29T19:07:20Z"><META
NAME="DC.Format"
CONTENT="text/html"
SCHEME="MIME"><META
NAME="DC.Identifier"
CONTENT="O'Reilly and Associates CD-ROM-1-56592-335-9E"><META
NAME="DC.Language"
CONTENT="en-US"><META
NAME="DC.Publisher"
CONTENT="O'Reilly &amp; Associates, Inc."><META
NAME="DC.Source"
CONTENT="1-56592-335-9E"
SCHEME="ISBN"><META
NAME="DC.Subject.Keyword"
CONTENT="Oracle PL/SQL"><META
NAME="DC.Title"
CONTENT="Oracle PL/SQL Programming, 2nd Edition"><META
NAME="DC.Type"
CONTENT="Text.Monograph"><META
NAME="generator"
CONTENT="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><LINK
REL="stylesheet"
TYPE="text/css"
HREF="../style/style1.css"><LINK
REV="made"
HREF="mailto:online-books@oreilly.com"
TITLE="Online Books Comments"><LINK
REL="up"
HREF="ch18_01.htm"
TITLE="18. Object Types"><LINK
REL="prev"
HREF="ch18_03.htm#SQL2-CH-18-SECT-3.6.1"
TITLE="18.3 Syntax for Creating Object Types"><LINK
REL="next"
HREF="ch18_05.htm#SQL2-CH-18-SECT-5.3"
TITLE="18.5 Modifying Persistent Objects"></HEAD
><BODY
><DIV
CLASS="htmlnav"
><H1
><IMG
SRC="gifs/smbanner.gif"
ALT="Oracle PL/SQL Programming, 2nd Edition"
USEMAP="#srchmap"
BORDER="0"></H1
><MAP
NAME="srchmap"
><AREA
SHAPE="RECT"
COORDS="0,0,466,65"
HREF="index.htm"
ALT="Oracle PL/SQL Programming, 2nd Edition"><AREA
SHAPE="RECT"
COORDS="467,0,514,18"
HREF="jobjects/fsearch.htm"
ALT="Search this book"></MAP
><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch18_03.htm#SQL2-CH-18-SECT-3.6.1"
TITLE="18.3 Syntax for Creating Object Types"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 18.3 Syntax for Creating Object Types"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><SPAN
CLASS="NAVTITLE"
><A
CLASS="chapter"
REL="up"
HREF="ch18_01.htm"
TITLE="18. Object Types"
>Chapter 18<BR>Object Types</A
></SPAN
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch18_05.htm#SQL2-CH-18-SECT-5.3"
TITLE="18.5 Modifying Persistent Objects"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 18.5 Modifying Persistent Objects"
BORDER="0"></A
></TD
></TR
></TABLE
>&nbsp;<HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"></DIV
><DIV
CLASS="sect1"
><H2
CLASS="sect1"
><A
CLASS="title"
NAME="SQL2-CH-18-SECT-4"
>18.4 Manipulating Objects in PL/SQL and SQL</A
></H2
><P
CLASS="para"
>In this section we look more deeply into the constructs and concepts you will need in order to master to use objects in your applications. There are three different ways you can initialize an object: </P
><UL
CLASS="itemizedlist"
><LI
CLASS="listitem"
><P
CLASS="para"
>Use the default constructor</P
></LI
><LI
CLASS="listitem"
><P
CLASS="para"
>Make a direct assignment</P
></LI
><LI
CLASS="listitem"
><P
CLASS="para"
>SELECT INTO or FETCH INTO</P
></LI
></UL
><P
CLASS="para"
>In addition, after an object is initialized, it can be stored in the database, and you can then locate and use that object using several new language constructs: </P
><UL
CLASS="itemizedlist"
><LI
CLASS="listitem"
><P
CLASS="para"
>REF</P
></LI
><LI
CLASS="listitem"
><P
CLASS="para"
>VALUE</P
></LI
><LI
CLASS="listitem"
><P
CLASS="para"
>DEREF</P
></LI
></UL
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="SQL2-CH-18-SECT-4.1"
>18.4.1 The Need to Initialize</A
></H3
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="ch18-idx-8525-1"
></A
> <A
CLASS="indexterm"
NAME="ch18-idx-8525-2"
></A
> The designers of the PL/SQL language have established a general convention that uninitialized variables are null.[<A
CLASS="footnote"
HREF="#AUTOID-16596"
>12</A
>] Object variables are no exception; the term for this uninitialized object condition is "atomically null." Not only is the object null, but so are its individual attributes. To illustrate, let's take a trip back to the pet shop. </P
><BLOCKQUOTE
CLASS="footnote"
><DIV
CLASS="footnote"
><P
CLASS="para"
><A
CLASS="footnote"
NAME="AUTOID-16596"
>[12]</A
> One significant exception is the Version 2 table datatype, known as index-by tables in Version 3, which are non-null but empty when first declared. In PL/SQL8, uninitialized nested tables and uninitialized VARRAYs are, in fact, null</P
></DIV
></BLOCKQUOTE
><P
CLASS="para"
>Since all pets need a home, we might want to create an address object type: </P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>CREATE TYPE Address_t AS OBJECT(
   street VARCHAR2(40),
   city VARCHAR2(20),
   state VARCHAR2(10),
   country VARCHAR2(3)
);</PRE
></BLOCKQUOTE
><P
CLASS="para"
>In the example below, notice that the object itself is null, as well as the object's attributes: </P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>DECLARE
   cerberus_house Address_t;  -- cerberus_house is not initialized here
BEGIN
   IF cerberus_house IS NULL ...       -- will evaluate to TRUE
   IF cerberus_house.street IS NULL... -- also TRUE</PRE
></BLOCKQUOTE
><P
CLASS="para"
>The nullity of the elements in PL/SQL follows somewhat unpredictable rules; uninitialized RECORD variables have null elements (as with objects), but uninitialized collections have elements whose nullity is not defined. As with collections, when an object is null, you cannot simply assign values to its attributes; if you do, PL/SQL will raise an exception. Before assigning values to the attributes, you <EM
CLASS="emphasis"
>must</EM
> initialize the entire object. </P
><P
CLASS="para"
>Let's turn now to the three different ways a PL/SQL program can initialize an object. </P
><DIV
CLASS="sect3"
><H4
CLASS="sect3"
><A
CLASS="title"
NAME="SQL2-CH-18-SECT-4.1.1"
>18.4.1.1 Constructors</A
></H4
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="AUTOID-16608"
></A
> <A
CLASS="indexterm"
NAME="AUTOID-16610"
></A
>A constructor is a special method that allows the creation of an object from an object type. Invoking a constructor is a way to instantiate (create) an object. In Oracle 8.0, each object has a single default constructor that the programmer cannot alter or supplement. </P
><P
CLASS="para"
>The default constructor:</P
><UL
CLASS="itemizedlist"
><LI
CLASS="listitem"
><P
CLASS="para"
>Has the same name as the object type</P
></LI
><LI
CLASS="listitem"
><P
CLASS="para"
>Is a function rather than a procedure</P
></LI
><LI
CLASS="listitem"
><P
CLASS="para"
>Accepts attributes in named or positional notation</P
></LI
><LI
CLASS="listitem"
><P
CLASS="para"
>Returns an object</P
></LI
><LI
CLASS="listitem"
><P
CLASS="para"
>Must be called with a value, or the non-value NULL, for every attribute; there is no DEFAULT clause for object attributes </P
></LI
></UL
><P
CLASS="para"
>Notice how the name of the constructor matches the name of the object type, which may look odd at first glance (unless you're already an object-oriented programmer). The following declaration assigns an initial value to the cerberus_house object: </P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>DECLARE
   cerberus_house Address_t := Address_t('123 Main', 'AnyTown', 'TX', 'USA');</PRE
></BLOCKQUOTE
></DIV
><DIV
CLASS="sect3"
><H4
CLASS="sect3"
><A
CLASS="title"
NAME="SQL2-CH-18-SECT-4.1.2"
>18.4.1.2 Direct assignment</A
></H4
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="ch18-idx-8531-1"
></A
> <A
CLASS="indexterm"
NAME="ch18-idx-8531-2"
></A
> When assigning one object to another, you create a new object that starts life as a copy of the original. In the following example, minotaurs_labyrinth gets initialized using direct assignment. </P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>DECLARE
   cerberus_house Address_t := Address_t('123 Main', 'AnyTown', 'TX', 'USA');
   minotaurs_labyrinth Address_t;
BEGIN
  <B
CLASS="emphasis.bold"
> minotaurs_labyrinth := cerberus_house;</B
>
END;</PRE
></BLOCKQUOTE
><P
CLASS="para"
>The attributes of the two addresses start out identical, but subsequent modifications to one do not automatically apply to the other. </P
></DIV
><DIV
CLASS="sect3"
><H4
CLASS="sect3"
><A
CLASS="title"
NAME="SQL2-CH-18-SECT-4.1.3"
>18.4.1.3 Assignment via FETCH (with SELECT)</A
></H4
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="AUTOID-16641"
></A
><A
CLASS="indexterm"
NAME="AUTOID-16644"
></A
> Assuming that there is a "houses" table of Address_t objects, we can use a SELECT statement to retrieve from the database into a PL/SQL object. PL/SQL provides the VALUE keyword (described below) to retrieve the contents of the entire object: </P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>DECLARE
   troubles_house Address_t;
   CURSOR h_cur IS
      SELECT VALUE(h)
        FROM houses h
       WHERE resident_cat = 'TROUBLE';
BEGIN
   OPEN h_cur;
   <B
CLASS="emphasis.bold"
>FETCH h_cur INTO troubles_house;</B
><A
CLASS="indexterm"
NAME="AUTOID-16649"
></A
>
<A
CLASS="indexterm"
NAME="AUTOID-16650"
></A
>

... </PRE
></BLOCKQUOTE
></DIV
><DIV
CLASS="sect3"
><H4
CLASS="sect3"
><A
CLASS="title"
NAME="SQL2-CH-18-SECT-4.1.4"
>18.4.1.4 ACCESS_INTO_NULL exception</A
></H4
><P
CLASS="para"
>If your program attempts to assign a value to an attribute of an uninitialized object, PL/SQL will raise the predefined exception ACCESS_INTO_NULL: </P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>DECLARE
   our_house Address_t;              -- not initialized
BEGIN
   our_house.street := '123 Main';   -- raises ACCESS_INTO_NULL
END;</PRE
></BLOCKQUOTE
><P
CLASS="para"
>While seeming quite reasonable, this kind of an assignment will clearly not achieve the desired result. It bears repeating: always initialize your objects!<A
CLASS="indexterm"
NAME="AUTOID-16656"
></A
> <A
CLASS="indexterm"
NAME="AUTOID-16657"
></A
> </P
></DIV
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="SQL2-CH-18-SECT-4.2"
>18.4.2 OID, VALUE, REF, and DEREF</A
></H3
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="ch18-idx-8540-1"
></A
> <A
CLASS="indexterm"
NAME="ch18-idx-8540-2"
></A
>The Oracle objects option provides an initially bewildering set of constructs for locating and referring to persistent objects. Getting to know them may take some time, but understanding them will be essential to "doing objects right." <A
CLASS="xref"
HREF="ch18_04.htm#SQL2-CH-18-SECT-4.1.3"
>Table 18.3</A
> summarizes these schemes and the following sections look at them in more detail. </P
><BR><TABLE
CLASS="table"
BORDER="1"
CELLPADDING="3"
><CAPTION
CLASS="table"
><A
CLASS="title"
NAME="SQL2-CH-18-TABLE-8"
>Table 18.3: Schemes for Referring to Persistent Objects </A
></CAPTION
><THEAD
CLASS="thead"
><TR
CLASS="row"
VALIGN="TOP"
><TH
CLASS="entry"
ALIGN="LEFT"
ROWSPAN="1"
COLSPAN="1"
> <P
CLASS="para"
>Scheme</P
> </TH
><TH
CLASS="entry"
ALIGN="LEFT"
ROWSPAN="1"
COLSPAN="1"
> <P
CLASS="para"
>Description</P
> </TH
><TH
CLASS="entry"
ALIGN="LEFT"
ROWSPAN="1"
COLSPAN="1"
> <P
CLASS="para"
>Applications</P
> </TH
></TR
></THEAD
><TBODY
CLASS="tbody"
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
> <P
CLASS="para"
>Object identifier (OID)</P
> </TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
> <P
CLASS="para"
>An opaque, globally unique handle, produced when the object is stored in the database as a table (row) object. </P
> </TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
> <P
CLASS="para"
>This is the persistent object's handle; it's what REFs point to. Your program never uses it directly. </P
> </TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
> <P
CLASS="para"
>VALUE</P
> </TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
> <P
CLASS="para"
>An operator. In SQL it acts on an object in an object table and returns the object's "contents." Do not confuse this keyword with the VALUES keyword that appears in the INSERT statement. </P
> </TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
> <P
CLASS="para"
>Used when fetching a table (row) object into a variable, or when you need to refer to an object table as an object instead of a list of columns. </P
> </TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
> <P
CLASS="para"
>REF</P
> </TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
> <P
CLASS="para"
>A pointer to an object. May be used within a SQL statement as an operator, or in a declaration as a type modifier. </P
> </TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
> <P
CLASS="para"
>Allows quasi-"normalizing" of object-relational databases and "joining" of object tables using "dot navigation." In PL/SQL, REFs serve as input/output variables. </P
> </TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
> <P
CLASS="para"
>DEREF</P
> </TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
> <P
CLASS="para"
>Reverse pointer lookup for REFs. </P
> </TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
> <P
CLASS="para"
>Helpful for retrieving the contents of an object when all you know is its REF. </P
> </TD
></TR
></TBODY
></TABLE
><DIV
CLASS="sect3"
><H4
CLASS="sect3"
><A
CLASS="title"
NAME="SQL2-CH-18-SECT-4.2.1"
>18.4.2.1 Object identifiers (OIDs)</A
></H4
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="ch18-idx-8542-1"
></A
><A
CLASS="indexterm"
NAME="ch18-idx-8542-2"
></A
>Have you ever used an arbitrary number (maybe an Oracle sequence) as a table's primary key? The benefits are many&nbsp;-- chief among them that you can often hide it from the users and never have to worry about them wanting to change the key value! Object identifiers are a lot like your arbitrary numbers, except that they are assigned by Oracle. When you create a table of objects, Oracle adds a hidden field that will hold the object identifier for each object. Oracle also automatically creates a unique index on this column. When you insert an object into the table, Oracle automatically assigns the object a rather large but hidden object identifier (OID). The OID is: </P
><UL
CLASS="itemizedlist"
><LI
CLASS="listitem"
><P
CLASS="para"
><EM
CLASS="emphasis"
>Opaque</EM
>. Although your programs can indirectly use the OID, you don't typically see its value. </P
></LI
><LI
CLASS="listitem"
><P
CLASS="para"
>Potentially <EM
CLASS="emphasis"
>globally unique</EM
> across databases. The OID space makes provisions for up to 2<SUP
CLASS="superscript"
>128</SUP
> objects (definitely "many" by the reckoning of the Hottentots).[<A
CLASS="footnote"
HREF="#AUTOID-16727"
>13</A
>] </P
><BLOCKQUOTE
CLASS="footnote"
><DIV
CLASS="footnote"
><P
CLASS="para"
><A
CLASS="footnote"
NAME="AUTOID-16727"
>[13]</A
> Oracle could one day use an OS-dependent function to make OIDs globally unique; that way, no two OIDs could have the same value, even on different machines that are configured identically. Perhaps object navigation will be possible without database links. (In case you're wondering, the Hottentots had a four-valued counting system: 1, 2, 3, and "many.")</P
></DIV
></BLOCKQUOTE
></LI
><LI
CLASS="listitem"
><P
CLASS="para"
>Capable of being <EM
CLASS="emphasis"
>synthesized</EM
> from a primary key so that objects can be retrofitted onto relational schema using object views. </P
></LI
><LI
CLASS="listitem"
><P
CLASS="para"
><EM
CLASS="emphasis"
>Preserved</EM
> after export/import by the owner, unlike ROWIDs. This could allow objects to be distributable across databases in the future (contrast with ROWIDs, which are tied to a particular database).. </P
></LI
></UL
><P
CLASS="para"
>In addition, unless you are using primary key-based OIDs in object views, OIDs are <EM
CLASS="emphasis"
>immutable</EM
>. That is, even if you want to change the binary value of an OID, you can't do it unless you delete and recreate the object, at which point Oracle will assign a new OID. </P
><P
CLASS="para"
>Not all objects have an object identifier. In particular, objects stored in PL/SQL variables lack a referenceable OID, as do column objects. A column object only "makes sense" within the context of its row, and the row will have other means of unique identification. Implementors must sometimes choose between embedding an object and making it referenceable.[<A
CLASS="footnote"
HREF="#AUTOID-16738"
>14</A
>]<A
CLASS="indexterm"
NAME="AUTOID-16741"
></A
> <A
CLASS="indexterm"
NAME="AUTOID-16742"
></A
> </P
><BLOCKQUOTE
CLASS="footnote"
><DIV
CLASS="footnote"
><P
CLASS="para"
><A
CLASS="footnote"
NAME="AUTOID-16738"
>[14]</A
> This approach is 180 degrees off from relational industry experts who assert that OIDs should not be used for row identification, and that only column objects should have OIDs. See Hugh Darwen and C. J. Date, "The Third Manifesto," <EM
CLASS="emphasis"
>SIGMOD Record</EM
>, Volume 24 Number 1, March 1995.</P
></DIV
></BLOCKQUOTE
><DIV
CLASS="sidebar"
><H4
CLASS="sidebar"
><A
CLASS="title"
NAME="SQL2-CH-18-FIG-1"
>Hidden Columns Exposed</A
></H4
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="AUTOID-16746"
></A
> <A
CLASS="indexterm"
NAME="AUTOID-16749"
></A
> <A
CLASS="indexterm"
NAME="AUTOID-16752"
></A
>The name of the column where Oracle8.0.3 stores object identifiers is <A
CLASS="indexterm"
NAME="AUTOID-16755"
></A
> SYS_NC_OID$. This column is "hidden" in that you won't see it when you "describe" the table in SQL*Plus, but it exists for every object instance (row) in an object table. It contains a 16-byte binary value; although this value is selectable from SQL*Plus, it should never be stored or manipulated in your programs. Oracle has hidden the OID to prevent hardcoding memory addresses into programs&nbsp;-- a dangerous practice in any environment. Moreover, the OID structure could change in future Oracle versions. </P
><P
CLASS="para"
>There's another hidden column, <A
CLASS="indexterm"
NAME="AUTOID-16758"
></A
> SYS_NC_ROWINFO$, which provides a representation of the constructor for the row object. The same caution applies&nbsp;-- it's interesting to look at, but do <EM
CLASS="emphasis"
>not</EM
> rely on it in any applications. </P
><P
CLASS="para"
>Just to get an idea of what these columns look like, let's say we had a type foo_t which includes two attributes: a number and a collection of type bar_t: </P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>CREATE TYPE bar_t AS VARRAY(5) OF VARCHAR2(10)
/
CREATE TYPE foo_t AS OBJECT (
   id NUMBER,
   bars bar_t)
/
CREATE TABLE foos OF foo_t;

INSERT INTO foos VALUES (1, bar_t('apple','banana','cherry'));

SELECT SYS_NC_OID$ FROM foos;

SYS_NC_OID$
--------------------------------
5661E312079811D19F35006097646884

SELECT SYS_NC_ROWINFO$ FROM foos;

SYS_NC_ROWINFO$(ID, BARS)
---------------------------------------------
FOO_T(1, BAR_T('apple', 'banana', 'cherry'))</PRE
></BLOCKQUOTE
><P
CLASS="para"
>Oracle provides constructs such as REF( ) and VALUE( ) so you don't need direct access to these hidden columns. In fact, you can get the constructor out of SYS_NC_ROWINFO$ in an Oracle-supported manner as follows: </P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>SELECT VALUE(f) FROM foos f;

VALUE(F)(ID, BARS)
---------------------------------------------
FOO_T(1, BAR_T('apple', 'banana', 'cherry'))</PRE
></BLOCKQUOTE
></DIV
></DIV
><DIV
CLASS="sect3"
><H4
CLASS="sect3"
><A
CLASS="title"
NAME="SQL2-CH-18-SECT-4.2.2"
>18.4.2.2 REFs</A
></H4
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="ch18-idx-8548-1"
></A
>Oracle8 "reference" datatypes are destined to cause more than a few knitted brows in the Oracle user community. The confusion starts with the fact that REF has two different yet related meanings, depending on context. Toss in the fact that some objects have REFs and some don't. It's best to invest a little extra time early on to understand REFs if you want to avoid increasing your gray hair count (or, in my case, the size of my forehead). </P
><P
CLASS="para"
>The main reason that the reference concept is so critical is that REFs are the best way of uniquely referring to object instances. REFs are the way that we "see" object identifiers. REFs are the basis of object relationships and object "joins." </P
><DIV
CLASS="sect4"
><H4
CLASS="sect4"
><A
CLASS="title"
NAME="ch18-51-fm2xml"
>18.4.2.2.1 <A
CLASS="indexterm"
NAME="ch18-idx-8551-1"
></A
> <A
CLASS="indexterm"
NAME="ch18-idx-8551-2"
></A
> REF as operator</A
></H4
><P
CLASS="para"
>In a SQL statement, when you need to retrieve a table object's unique identifier, you will use REF. In this case, REF operates on a row object, accepting as its argument a <EM
CLASS="emphasis"
>table alias</EM
> (also known as a <EM
CLASS="emphasis"
>correlation variable</EM
><A
CLASS="indexterm"
NAME="AUTOID-16782"
></A
> <A
CLASS="indexterm"
NAME="AUTOID-16784"
></A
>). As hinted earlier, REF cannot operate on column objects or otherwise nested objects, because such objects do not have an OID. REFs are constructed from (but are not identical to) OIDs; only objects with OIDs get to have REFs pointing to them. </P
><P
CLASS="para"
>Syntactically, to retrieve a pointer from a table of objects, you will use: </P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>REF(table_alias_name)</PRE
></BLOCKQUOTE
><P
CLASS="para"
>as in</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>SELECT <B
CLASS="emphasis.bold"
>REF</B
>(p)
  FROM pets p     -- uses table alias &quot;p&quot;
 WHERE ...</PRE
></BLOCKQUOTE
><P
CLASS="para"
>While you can choose any unambiguous SQL identifier for the table alias, a short alias is generally more readable. In most cases in this book, we use a single letter. </P
><P
CLASS="para"
>But retrieving a REF is not terribly useful in and of itself unless you happen to like looking at long hex strings. More typically, REFs are used like a foreign key. To assign a value to a REF field, we must first retrieve the value from the object table: </P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>DECLARE
   person_ref REF Person_t;
   CURSOR pref_cur IS
      SELECT REF(p)
        FROM persons p
       WHERE last_name = 'RADCLIFF';
BEGIN
   OPEN pref_cur;
   FETCH pref_cur INTO person_ref;
   CLOSE pref_cur;
   INSERT INTO pets VALUES (Pet_t(10234, 'Wally', 'Blue whale',
      'M', null, null, <B
CLASS="emphasis.bold"
>person_ref</B
>));
END;</PRE
></BLOCKQUOTE
><P
CLASS="para"
>Or, more concisely:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>INSERT INTO pets
   SELECT Pet_t(10234, 'Wally', 'Blue whale',
      'M', null, null, <B
CLASS="emphasis.bold"
>REF(per)</B
>)
     FROM persons per
    WHERE last_name = 'RADCLIFF';</PRE
></BLOCKQUOTE
><P
CLASS="para"
>Then, after your data is loaded, you <EM
CLASS="emphasis"
>could </EM
> retrieve an attribute or member function of the referenced object via a join. </P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>SELECT p.tag_no, per.full_name()
  FROM pets p,
       persons per
 WHERE p.owner_ref = REF(per);</PRE
></BLOCKQUOTE
><P
CLASS="para"
>But wouldn't you be happier using Oracle's ability to traverse REFs automatically? </P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>SELECT tag_no, p.owner_ref.full_name()         -- cool!
  FROM pets p;</PRE
></BLOCKQUOTE
><P
CLASS="para"
>This illustration (which does work, by the way) shows how Oracle SQL elegantly supports object navigation across REFs, something not directly allowed in PL/SQL. This is some of "the neat stuff" that the object extensions provide. Most people will find this chained dot nomenclature much more intuitive and easier to maintain over the long run than the equivalent explicit join. </P
><P
CLASS="para"
>By the way, the two versions of this "join" are not <EM
CLASS="emphasis"
>exactly</EM
> identical. The first, with the explicit join, performs an "equi-join," which means that if the owner_ref column is null or dangling, the record (object) will not appear in the result set. However, the second, with dot navigation, performs an "outer join," meaning that a null or dangling owner_ref will simply cause the full_name field to show up null. </P
><BLOCKQUOTE
CLASS="note"
><P
CLASS="para"
><STRONG
>NOTE:</STRONG
> <EM
CLASS="emphasis"
>REFs are not foreign keys</EM
>. As previously discussed and as illustrated in <A
CLASS="xref"
HREF="ch18_02.htm#SQL2-CH-18-SECT-2.3"
>Table 18.2</A
>, the differences between REFs and foreign keys are significant. You will need to give some thought to how you are going to prevent dangling REFs. <A
CLASS="indexterm"
NAME="AUTOID-16811"
></A
> <A
CLASS="indexterm"
NAME="AUTOID-16812"
></A
></P
></BLOCKQUOTE
></DIV
><DIV
CLASS="sect4"
><H4
CLASS="sect4"
><A
CLASS="title"
NAME="ch18-53-fm2xml"
>18.4.2.2.2 <A
CLASS="indexterm"
NAME="ch18-idx-8563-1"
></A
> <A
CLASS="indexterm"
NAME="ch18-idx-8563-2"
></A
> REF as type modifier</A
></H4
><P
CLASS="para"
>To hold a REF in a local variable, declare the variable of type REF <EM
CLASS="emphasis"
>object_name</EM
>, and assign it via fetch or assignment from another REF that points to the same type. This example of REF as a "type modifier" shows that you can assign REFs using fetches and direct assignment, as you would expect. </P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>DECLARE
   pet_ref REF Pet_t;
   hold_pet_ref REF Pet_t;
BEGIN
   -- example of assignment via fetch
   SELECT REF(p) INTO pet_ref
     FROM pets p
    WHERE...

   -- example of direct assignment
   hold_pet_ref := pet_ref;</PRE
></BLOCKQUOTE
><P
CLASS="para"
>What about local object type variables? At first blush, it might seem that you should be able to do something like the following: </P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>DECLARE
   our_house Address_t := Address_t('123 Main','AnyTown','TX','USA');
   house_ref REF Address_t;
BEGIN
   house_ref := REF(our_house);  -- invalid</PRE
></BLOCKQUOTE
><P
CLASS="para"
>You can't get the REF to an object variable which exists only in a PL/SQL program. REFs are constructed from an object's OID, and transient objects don't have such a pointer. </P
><P
CLASS="para"
>If they are so much trouble, what good are REFs? As mentioned earlier, REFs are the only supported way of getting at OIDs. And despite the dangling REF problem, if you want to "normalize" an object-oriented design so that objects can be shared, you will have to use REFs. In addition, a REF is an efficient and lightweight means of passing object information as a parameter. That is, if you pass only the pointer, you avoid the overhead of allocating memory for a copy of the object contents. Be aware that passing a REF can allow the called program to change the object's contents, something you may or may not intend.<A
CLASS="indexterm"
NAME="AUTOID-16828"
></A
> <A
CLASS="indexterm"
NAME="AUTOID-16829"
></A
> <A
CLASS="indexterm"
NAME="AUTOID-16830"
></A
> </P
></DIV
></DIV
><DIV
CLASS="sect3"
><H4
CLASS="sect3"
><A
CLASS="title"
NAME="SQL2-CH-18-SECT-4.2.3"
>18.4.2.3 VALUE</A
></H4
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="ch18-idx-8573-1"
></A
>Like REF, the VALUE operator also accepts a table alias as its argument. However, VALUE retrieves the value of an object (for example, to create a copy of it) via SQL. </P
><P
CLASS="para"
>To understand what VALUE does, first consider what happens if you apply pre-Oracle8 techniques to an object table: </P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>DECLARE
   CURSOR h_cur IS
      SELECT *
       FROM houses;               -- houses is an object table
   their_house h_cur%ROWTYPE;
BEGIN
   OPEN h_cur;
   FETCH h_cur INTO their_house;</PRE
></BLOCKQUOTE
><P
CLASS="para"
>These non-object calls work fine even though "houses" is an object table. This is one demonstration of the relational side of an "object-relational database." But their_house is a record variable, not an object.[<A
CLASS="footnote"
HREF="#AUTOID-16839"
>15</A
>] If you later wanted to take advantage of objects in PL/SQL, your code would be ill-prepared. </P
><BLOCKQUOTE
CLASS="footnote"
><DIV
CLASS="footnote"
><P
CLASS="para"
><A
CLASS="footnote"
NAME="AUTOID-16839"
>[15]</A
> If you wanted an object variable built from the their_house record variable, you could declare the variable of type Address_t, and initialize it, using the Address_t constructor, from the elements in their_house.</P
></DIV
></BLOCKQUOTE
><P
CLASS="para"
>To use a local variable that has been typed as an object, you must declare it to be of the same datatype on which you have defined the table object, and you must use the VALUE operator: </P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>DECLARE
   <B
CLASS="emphasis.bold"
>some_house Address_t;</B
>
   CURSOR h_cur IS
      SELECT <B
CLASS="emphasis.bold"
>VALUE(h)</B
>
        FROM houses <B
CLASS="emphasis.bold"
>h</B
>;
BEGIN
   OPEN h_cur;
   FETCH h_cur INTO some_house;
   -- Attributes are available using dot notation
   IF some_house.city IS NULL THEN ...</PRE
></BLOCKQUOTE
><P
CLASS="para"
>This code begs the question: What is the difference between the "value" of an object and the object itself? Why is VALUE necessary at all? </P
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="AUTOID-16848"
></A
> Without VALUE, the retrieval of data in object tables would be ambiguous. You therefore have to tell Oracle whether you want the attributes or the whole object. SELECTing a table object <EM
CLASS="emphasis"
>without</EM
> the VALUE operator retrieves the attributes of the object, while using the VALUE retrieves the entire object as an object. </P
><P
CLASS="para"
>Omitting VALUE fails if we try to fetch <EM
CLASS="emphasis"
>columns</EM
> directly into an object variable: </P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>DECLARE
   some_house Address_t;
   CURSOR h_cur IS
      <B
CLASS="emphasis.bold"
>SELECT</B
> *
        <B
CLASS="emphasis.bold"
>FROM houses</B
>;
BEGIN
   OPEN h_cur;
   FETCH h_cur INTO some_house;    --invalid; type mismatch
...</PRE
></BLOCKQUOTE
><P
CLASS="para"
>It's worth pointing out that even if we fetch an object as an object from the database, we <EM
CLASS="emphasis"
>still</EM
> can't get to the REF from the local object variable. This is unfortunate. In other words, I would like the following to be possible: </P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>DECLARE
   some_house Address_t;
   some_house_ref REF Address_t;
   CURSOR h_cur IS
      SELECT VALUE(h)
        FROM houses h;
BEGIN
   OPEN h_cur;
   FETCH h_cur INTO some_house;
  <B
CLASS="emphasis.bold"
> some_house_ref := REF(some_house);  &nbsp;--  invalid</B
></PRE
></BLOCKQUOTE
><P
CLASS="para"
>Perhaps Oracle will consider adding this functionality to a future release. Until then, the workaround is simple enough: </P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>DECLARE
   some_house Address_t;
   some_house_ref REF Address_t;
   CURSOR h_cur IS
      SELECT VALUE(h), REF(h)
        FROM houses h;
BEGIN
   OPEN h_cur;
   FETCH h_cur INTO some_house, some_house_ref;
   CLOSE h_cur;
END;</PRE
></BLOCKQUOTE
><BLOCKQUOTE
CLASS="note"
><P
CLASS="para"
><STRONG
>NOTE:</STRONG
> <A
CLASS="indexterm"
NAME="AUTOID-16866"
></A
> VALUE does not apply to column objects, since retrieving a column object unambiguously retrieves an object value.<A
CLASS="indexterm"
NAME="AUTOID-16870"
></A
></P
></BLOCKQUOTE
></DIV
><DIV
CLASS="sect3"
><H4
CLASS="sect3"
><A
CLASS="title"
NAME="SQL2-CH-18-SECT-4.2.4"
>18.4.2.4 DEREF</A
></H4
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="AUTOID-16874"
></A
> <A
CLASS="indexterm"
NAME="AUTOID-16876"
></A
><A
CLASS="indexterm"
NAME="AUTOID-16879"
></A
>DEREF is the "dereference" operator. Like VALUE, it returns the <EM
CLASS="emphasis"
>value</EM
> of an object; unlike VALUE, DEREF's input is a REF to an object. That is, if you have a REF column in a table and you want to retrieve the target instead of the pointer, you use DEREF. It "un-does" a REF. Consider the following example which, as we noted earlier, fails to compile: </P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>DECLARE
   the_dalmatian Pet_t;
BEGIN
   SELECT VALUE(p) INTO the_dalmatian
     FROM pets p
    WHERE name = 'Cerberus';
   IF <B
CLASS="emphasis.bold"
>the_dalmatian.owner_ref.first_name =</B
> 'Persephone'  -- invalid
   THEN...</PRE
></BLOCKQUOTE
><P
CLASS="para"
>This can be "fixed" using DEREF as follows:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>DECLARE
     the_owner Person_t;
BEGIN
   SELECT DEREF(owner_ref) INTO the_owner
     FROM pets
    WHERE name = 'Cerberus';
   IF <B
CLASS="emphasis.bold"
>the_owner.first_name = 'Persephone'</B
> <A
CLASS="indexterm"
NAME="AUTOID-16888"
></A
>
<A
CLASS="indexterm"
NAME="AUTOID-16889"
></A
>

   THEN...</PRE
></BLOCKQUOTE
></DIV
></DIV
></DIV
><DIV
CLASS="htmlnav"
><P
></P
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch18_03.htm#SQL2-CH-18-SECT-3.6.1"
TITLE="18.3 Syntax for Creating Object Types"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 18.3 Syntax for Creating Object Types"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="book"
HREF="index.htm"
TITLE="Oracle PL/SQL Programming, 2nd Edition"
><IMG
SRC="../gifs/txthome.gif"
ALT="Oracle PL/SQL Programming, 2nd Edition"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch18_05.htm#SQL2-CH-18-SECT-5.3"
TITLE="18.5 Modifying Persistent Objects"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 18.5 Modifying Persistent Objects"
BORDER="0"></A
></TD
></TR
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
>18.3 Syntax for Creating Object Types</TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="index"
HREF="index/idx_0.htm"
TITLE="Book Index"
><IMG
SRC="../gifs/index.gif"
ALT="Book Index"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
>18.5 Modifying Persistent Objects</TD
></TR
></TABLE
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"></DIV
><IMG SRC="../gifs/smnavbar.gif"
USEMAP="#map"
BORDER="0"
ALT="The Oracle Library Navigation">

<P><font size="-1">
<a href="../copyrght.htm#copy">Copyright (c) 2000</a> O'Reilly &amp; Associates. All rights reserved.
</font></P>

<MAP NAME="map">

<AREA SHAPE="RECT"
COORDS="0,0,35,30"
HREF="../index.htm"
ALT="Library Home">

<AREA SHAPE="RECT"
COORDS="40,0,95,30"
HREF="index.htm"
ALT="Oracle PL/SQL Programming, 2nd. Ed.">

<AREA SHAPE="RECT"
COORDS="100,0,200,30"
HREF="../guide8i/index.htm"
ALT="Guide to Oracle 8i Features">

<AREA SHAPE="RECT"
COORDS="205,0,245,30"
HREF="../bipack/index.htm"
ALT="Oracle Built-in Packages">

<AREA SHAPE="RECT"
COORDS="250,0,320,30"
HREF="../advprog/index.htm"
ALT="Advanced PL/SQL Programming with Packages">

<AREA SHAPE="RECT"
COORDS="325,0,420,30"
HREF="../webapp/index.htm"
ALT="Oracle Web Applications">

<AREA SHAPE="RECT"
COORDS="425,0,490,30"
HREF="../langpkt/index.htm"
ALT="Oracle PL/SQL Language Pocket Reference">

<AREA SHAPE="RECT"
COORDS="495,0,570,30"
HREF="../bipkt/index.htm"
ALT="Oracle PL/SQL Built-ins Pocket Reference">
</MAP>

</BODY
>
<!-- Mirrored from liso.cs.pusan.ac.kr by HTTrack Website Copier/3.x [XR&CO'2001] -->
</HTML
>
