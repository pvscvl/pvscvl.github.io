<HTML
><HEAD
><TITLE
>[Chapter 19] Nested Tables and VARRAYs</TITLE
><META
NAME="DC.Creator"
CONTENT="Steven Feuerstein &amp; Bill Pribyl"><META
NAME="DC.Date"
CONTENT="2000-04-29T19:07:58Z"><META
NAME="DC.Format"
CONTENT="text/html"
SCHEME="MIME"><META
NAME="DC.Identifier"
CONTENT="O'Reilly and Associates CD-ROM-1-56592-335-9E"><META
NAME="DC.Language"
CONTENT="en-US"><META
NAME="DC.Publisher"
CONTENT="O'Reilly &amp; Associates, Inc."><META
NAME="DC.Source"
CONTENT="1-56592-335-9E"
SCHEME="ISBN"><META
NAME="DC.Subject.Keyword"
CONTENT="Oracle PL/SQL"><META
NAME="DC.Title"
CONTENT="Oracle PL/SQL Programming, 2nd Edition"><META
NAME="DC.Type"
CONTENT="Text.Monograph"><META
NAME="generator"
CONTENT="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><LINK
REL="stylesheet"
TYPE="text/css"
HREF="../style/style1.css"><LINK
REV="made"
HREF="mailto:online-books@oreilly.com"
TITLE="Online Books Comments"><LINK
REL="up"
HREF="part05.htm"
TITLE="V. New PL/SQL8 Features"><LINK
REL="prev"
HREF="ch18_07.htm"
TITLE="18.7 Making the Objects Option Work"><LINK
REL="next"
HREF="ch19_02.htm#SQL2-CH-19-SECT-2.1.1"
TITLE="19.2 Creating the New Collections"></HEAD
><BODY
><DIV
CLASS="htmlnav"
><H1
><IMG
SRC="gifs/smbanner.gif"
ALT="Oracle PL/SQL Programming, 2nd Edition"
USEMAP="#srchmap"
BORDER="0"></H1
><MAP
NAME="srchmap"
><AREA
SHAPE="RECT"
COORDS="0,0,466,65"
HREF="index.htm"
ALT="Oracle PL/SQL Programming, 2nd Edition"><AREA
SHAPE="RECT"
COORDS="467,0,514,18"
HREF="jobjects/fsearch.htm"
ALT="Search this book"></MAP
><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch18_07.htm"
TITLE="18.7 Making the Objects Option Work"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 18.7 Making the Objects Option Work"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><SPAN
CLASS="NAVTITLE"
>Chapter 19</SPAN
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch19_02.htm#SQL2-CH-19-SECT-2.1.1"
TITLE="19.2 Creating the New Collections"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 19.2 Creating the New Collections"
BORDER="0"></A
></TD
></TR
></TABLE
>&nbsp;<HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"></DIV
><DIV
CLASS="chapter"
><H1
CLASS="chapter"
><A
CLASS="title"
NAME="SQL2-CH-19"
>19. Nested Tables and VARRAYs</A
></H1
><DIV
CLASS="htmltoc"
><P
><B
>Contents:</B
><BR><A
CLASS="sect1"
HREF="#SQL2-CH-19-SECT-1"
TITLE="19.1 Types of Collections"
>Types of Collections</A
><BR><A
CLASS="sect1"
HREF="ch19_02.htm#SQL2-CH-19-SECT-2.1.1"
TITLE="19.2 Creating the New Collections"
>Creating the New Collections</A
><BR><A
CLASS="sect1"
HREF="ch19_03.htm"
TITLE="19.3 Syntax for Declaring Collection Datatypes"
>Syntax for Declaring Collection Datatypes</A
><BR><A
CLASS="sect1"
HREF="ch19_04.htm#SQL2-CH-19-SECT-4.1.3"
TITLE="19.4 Using Collections"
>Using Collections</A
><BR><A
CLASS="sect1"
HREF="ch19_05.htm#SQL2-CH-19-SECT-5.2"
TITLE="19.5 Collection Pseudo-Functions"
>Collection Pseudo-Functions</A
><BR><A
CLASS="sect1"
HREF="ch19_06.htm#SQL2-CH-19-SECT-6.0.5"
TITLE="19.6 Collection Built-Ins"
>Collection Built-Ins</A
><BR><A
CLASS="sect1"
HREF="ch19_07.htm"
TITLE="19.7 Example: PL/SQL-to-Server Integration"
>Example: PL/SQL-to-Server Integration</A
><BR><A
CLASS="sect1"
HREF="ch19_08.htm#SQL2-CH-19-SECT-8.1"
TITLE="19.8 Collections Housekeeping"
>Collections Housekeeping</A
><BR><A
CLASS="sect1"
HREF="ch19_09.htm"
TITLE="19.9 Which Collection Type Should I Use?"
>Which Collection Type Should I Use?</A
></P
><P
></P
></DIV
><P
CLASS="para"
>In PL/SQL Version 2, Oracle introduced the TABLE datatype as a  way of storing singly dimensioned sparse arrays in PL/SQL. Known as the "PL/SQL table," this structure is thoroughly documented in <A
CLASS="xref"
HREF="ch10_01.htm"
>Chapter 10, <CITE
CLASS="chapter"
>PL/SQL Tables</CITE
></A
>. PL/SQL8 introduces two new collection structures that have a wide range of new uses. These structures are <EM
CLASS="emphasis"
>nested tables</EM
> and <EM
CLASS="emphasis"
>variable-size arrays</EM
> (VARRAYs). Like PL/SQL tables, the new structures can also be used in PL/SQL programs. But what is dramatic and new is the ability to use the new collections as the datatypes of fields in conventional tables and attributes of objects. While not an exhaustive implementation of user-defined datatypes, collections offer rich new physical (and, by extension, logical) design opportunities for Oracle practitioners. </P
><P
CLASS="para"
>In this chapter we'll include brief examples showing how to create and use collection types both in the database and in PL/SQL programs. We'll also show the syntax for creating collection types. We'll present the three different initialization techniques with additional examples, and we'll discuss the new built-in "methods," EXTEND, TRIM, and DELETE, for managing collection content. This chapter also contains an introduction to the new "collection pseudo-functions" that Oracle8 provides to deal with nonatomic values in table columns. Although we can't cover every aspect of SQL usage, the examples will give you a sense of how important&nbsp;-- and useful&nbsp;-- these new devices can be, despite their complexity. We also include a reference section that details all of the built-in methods for collections: for each we'll show its specification, an example, and some programming considerations. The chapter concludes with a brief discussion of which type of collection is most appropriate for some common situations. </P
><DIV
CLASS="sect1"
><H2
CLASS="sect1"
><A
CLASS="title"
NAME="SQL2-CH-19-SECT-1"
>19.1 Types of Collections</A
></H2
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="ch19-idx-8438-1"
></A
>Oracle now supports three types of collections: </P
><UL
CLASS="itemizedlist"
><LI
CLASS="listitem"
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="AUTOID-17281"
></A
> <A
CLASS="indexterm"
NAME="AUTOID-17283"
></A
><A
CLASS="indexterm"
NAME="AUTOID-17287"
></A
> <A
CLASS="indexterm"
NAME="AUTOID-17290"
></A
> <A
CLASS="indexterm"
NAME="AUTOID-17293"
></A
>PL/SQL tables are singly dimensioned, unbounded, sparse collections of homogeneous elements and are available only in PL/SQL (see <A
CLASS="xref"
HREF="ch10_01.htm"
>Chapter 10</A
>). These are now called <A
CLASS="indexterm"
NAME="AUTOID-17298"
></A
>index-by tables. </P
></LI
><LI
CLASS="listitem"
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="ch19-idx-8432-1"
></A
>Nested tables are also singly dimensioned, unbounded collections of homogeneous elements. They are initially dense but can become sparse through deletions. Nested tables are available in both PL/SQL and the database (for example, as a column in a table). </P
></LI
><LI
CLASS="listitem"
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="AUTOID-17307"
></A
> <A
CLASS="indexterm"
NAME="AUTOID-17309"
></A
> <A
CLASS="indexterm"
NAME="AUTOID-17313"
></A
> <A
CLASS="indexterm"
NAME="AUTOID-17317"
></A
>VARRAYs, like the other two collection types, are also singly dimensioned collections of homogeneous elements. However, they are always bounded and never sparse. Like nested tables, they can be used in PL/SQL and in the database. Unlike nested tables, when you store and retrieve a VARRAY, its element order is preserved. </P
></LI
></UL
><P
CLASS="para"
>Using a nested table or VARRAY, you can store and retrieve nonatomic data in a single column. For example, the employee table used by the HR department could store the date of birth for each employee's dependents in a single column, as shown in <A
CLASS="xref"
HREF="ch19_01.htm"
>Table 19.1</A
>. </P
><BR><TABLE
CLASS="table"
BORDER="1"
CELLPADDING="3"
><CAPTION
CLASS="table"
><A
CLASS="title"
NAME="SQL2-CH-19-TABLE-2"
>Table 19.1: Storing a Nonatomic Column of Dependents in a Table of Employees </A
></CAPTION
><THEAD
CLASS="thead"
><TR
CLASS="row"
VALIGN="TOP"
><TH
CLASS="entry"
ALIGN="LEFT"
ROWSPAN="1"
COLSPAN="1"
> <P
CLASS="para"
>Id (NUMBER)</P
> </TH
><TH
CLASS="entry"
ALIGN="LEFT"
ROWSPAN="1"
COLSPAN="1"
> <P
CLASS="para"
>Name (VARCHAR2)</P
> </TH
><TH
CLASS="entry"
ALIGN="LEFT"
ROWSPAN="1"
COLSPAN="1"
> <P
CLASS="para"
>Dependents_ages (Dependent_birthdate_t)</P
> </TH
></TR
></THEAD
><TBODY
CLASS="tbody"
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
> <P
CLASS="para"
>10010</P
> </TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
> <P
CLASS="para"
>Zaphod Beeblebrox</P
> </TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
> <P
CLASS="para"
>12-JAN-1763</P
>  <P
CLASS="para"
>4-JUL-1977</P
>  <P
CLASS="para"
>22-MAR-2021</P
> </TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
> <P
CLASS="para"
>10020</P
> </TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
> <P
CLASS="para"
>Molly Squiggly</P
> </TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
> <P
CLASS="para"
>15-NOV-1968</P
>  <P
CLASS="para"
>15-NOV-1968</P
> </TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
> <P
CLASS="para"
>10030</P
> </TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
> <P
CLASS="para"
>Joseph Josephs</P
> </TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
>  </TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
> <P
CLASS="para"
>10040</P
> </TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
> <P
CLASS="para"
>Cepheus Usrbin</P
> </TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
> <P
CLASS="para"
>27-JUN-1995</P
>  <P
CLASS="para"
>9-AUG-1996</P
>  <P
CLASS="para"
>19-JUN-1997</P
> </TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
> <P
CLASS="para"
>10050</P
> </TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
> <P
CLASS="para"
>Deirdre Quattlebaum</P
> </TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
> <P
CLASS="para"
>21-SEP-1997</P
> </TD
></TR
></TBODY
></TABLE
><P
CLASS="para"
>It's not terribly difficult to create such a table. First we define the collection type: </P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>CREATE TYPE Dependent_birthdate_t AS VARRAY(10) OF DATE;</PRE
></BLOCKQUOTE
><P
CLASS="para"
>Now we can use it in the table definition:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>CREATE TABLE employees (
   id NUMBER,
   name VARCHAR2(50),
   ...other columns...,
   Dependents_ages Dependent_birthdate_t
);</PRE
></BLOCKQUOTE
><P
CLASS="para"
>We can populate this table using the following INSERT syntax, which relies on the type's <EM
CLASS="emphasis"
>default constructor</EM
> to transform a list of dates into values of the proper datatype: </P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>INSERT INTO employees VALUES (42, 'Zaphod Beeblebrox', ...,
   Dependent_birthdate_t( '12-JAN-1765', '4-JUL-1977', '22-MAR-2021'));</PRE
></BLOCKQUOTE
><P
CLASS="para"
>One slight problem: most of us have been trained to view nonatomic data as a design flaw. So why would we actually <EM
CLASS="emphasis"
>want</EM
> to do this? In some situations (for those in which you don't need to scan the contents of all the values in all the rows), theoreticians and practitioners alike consider nonatomic data to be perfectly acceptable. Even the conscience of the relational model, Chris Date, suggests that relational domains could contain complex values, including lists.[<A
CLASS="footnote"
HREF="#AUTOID-17385"
>1</A
>] Some database designers have believed for years that the large percentage of nonatomic data inherent in their applications demands a nonrelational solution. </P
><BLOCKQUOTE
CLASS="footnote"
><DIV
CLASS="footnote"
><P
CLASS="para"
><A
CLASS="footnote"
NAME="AUTOID-17385"
>[1]</A
> See Hugh Darwen and C. J. Date, "The Third Manifesto," SIGMOD Record, Volume 24 Number 1, March 1995.</P
></DIV
></BLOCKQUOTE
><P
CLASS="para"
>Setting aside theoretical arguments about "natural" data representations, Oracle collections provide a dramatic advantage from an application programmer's perspective: you can pass an entire collection between the database and PL/SQL using a single fetch. This feature alone could have significant positive impact on application performance. </P
><P
CLASS="para"
>As we've mentioned, within PL/SQL both nested tables and VARRAYs are ordered collections of homogeneous elements. Both bear some resemblance to the PL/SQL Version 2 table datatype, the elder member of the "collection" family. The new types are also singly dimensioned arrays, but they differ in areas such as sparseness (not exactly), how they're initialized (via a <EM
CLASS="emphasis"
>constructor</EM
>), and whether they can be null (yes). </P
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="AUTOID-17391"
></A
>One chief difference between nested tables and VARRAYs surfaces when we use them as column datatypes. Although using a VARRAY as a column's datatype can achieve much the same result as a nested table, VARRAY data must be predeclared to be of a maximum size, and is actually stored "inline" with the rest of the table's data. </P
><P
CLASS="para"
>Nested tables, by contrast, are stored in special auxiliary tables called <A
CLASS="indexterm"
NAME="AUTOID-17395"
></A
> <A
CLASS="indexterm"
NAME="AUTOID-17397"
></A
>store tables, and there is no pre-set limit on how large they can grow. For this reason, Oracle Corporation says that VARRAY columns are intended for "small" arrays, and that nested tables are appropriate for "large" arrays. </P
><P
CLASS="para"
>As we've mentioned, the old Version 2 table datatype is now called an <I
CLASS="firstterm"
>index-by table</I
><A
CLASS="indexterm"
NAME="AUTOID-17402"
></A
> <A
CLASS="indexterm"
NAME="AUTOID-17404"
></A
>, in honor of the INDEX BY BINARY_INTEGER syntax required when declaring such a type. Despite the many benefits of the new collection types, index-by tables have one important unique feature: initial sparseness. <A
CLASS="xref"
HREF="ch19_01.htm"
>Table 19.2</A
> illustrates many of the additional differences among index-by tables and the new collection types. </P
><BR><TABLE
CLASS="table"
BORDER="1"
CELLPADDING="3"
><CAPTION
CLASS="table"
><A
CLASS="title"
NAME="SQL2-CH-19-TABLE-4"
>Table 19.2: Comparing Oracle Collection Types </A
></CAPTION
><THEAD
CLASS="thead"
><TR
CLASS="row"
VALIGN="TOP"
><TH
CLASS="entry"
ALIGN="LEFT"
ROWSPAN="1"
COLSPAN="1"
> <P
CLASS="para"
>Characteristic</P
> </TH
><TH
CLASS="entry"
ALIGN="LEFT"
ROWSPAN="1"
COLSPAN="1"
> <P
CLASS="para"
>Index-By Table</P
> </TH
><TH
CLASS="entry"
ALIGN="LEFT"
ROWSPAN="1"
COLSPAN="1"
> <P
CLASS="para"
>Nested Table</P
> </TH
><TH
CLASS="entry"
ALIGN="LEFT"
ROWSPAN="1"
COLSPAN="1"
> <P
CLASS="para"
><A
CLASS="indexterm"
NAME="ch19-idx-8437-1"
></A
>VARRAY </P
> </TH
></TR
></THEAD
><TBODY
CLASS="tbody"
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
> <P
CLASS="para"
>Dimensionality</P
> </TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
> <P
CLASS="para"
>Single</P
> </TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
> <P
CLASS="para"
>Single</P
> </TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
> <P
CLASS="para"
>Single</P
> </TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
> <P
CLASS="para"
>Usable in SQL?</P
> </TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
> <P
CLASS="para"
>No</P
> </TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
> <P
CLASS="para"
>Yes</P
> </TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
> <P
CLASS="para"
>Yes</P
> </TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
> <P
CLASS="para"
>Usable as column datatype in a table?</P
> </TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
> <P
CLASS="para"
>No</P
> </TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
> <P
CLASS="para"
>Yes; data stored "out of line" (in separate table)</P
> </TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
> <P
CLASS="para"
>Yes; data stored "in line" (in same table)</P
> </TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
> <P
CLASS="para"
>Uninitialized state</P
> </TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
> <P
CLASS="para"
>Empty (cannot be null); elements undefined</P
> </TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
> <P
CLASS="para"
>Atomically null; illegal to reference elements</P
> </TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
> <P
CLASS="para"
>Atomically null; illegal to reference elements</P
> </TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
> <P
CLASS="para"
>Initialization</P
> </TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
> <P
CLASS="para"
>Automatic, when declared</P
> </TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
> <P
CLASS="para"
>Via constructor, fetch, assignment</P
> </TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
> <P
CLASS="para"
>Via constructor, fetch, assignment</P
> </TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
> <P
CLASS="para"
>In PL/SQL, elements referenced via</P
> </TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
> <P
CLASS="para"
>BINARY_INTEGER</P
>  <P
CLASS="para"
>(-2,147,483,647 .. 2,147,483,647)</P
> </TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
> <P
CLASS="para"
>Positive integer between 1 and 2,147,483,647</P
> </TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
> <P
CLASS="para"
>Positive integer between 1 and 2,147,483,647</P
> </TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
> <P
CLASS="para"
>Sparse?</P
> </TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
> <P
CLASS="para"
>Yes</P
> </TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
> <P
CLASS="para"
>Initially, no; after deletions, yes</P
> </TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
> <P
CLASS="para"
>No</P
> </TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
> <P
CLASS="para"
>Bounded?</P
> </TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
> <P
CLASS="para"
>No</P
> </TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
> <P
CLASS="para"
>Can be extended</P
> </TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
> <P
CLASS="para"
>Yes</P
> </TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
> <P
CLASS="para"
>Can assign value to any element at any time?</P
> </TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
> <P
CLASS="para"
>Yes</P
> </TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
> <P
CLASS="para"
>No; may need to EXTEND first</P
> </TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
> <P
CLASS="para"
>No; may need to EXTEND first, and cannot EXTEND past upper bound</P
> </TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
> <P
CLASS="para"
>Means of extending</P
> </TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
> <P
CLASS="para"
>Assign value to element with a new subscript</P
> </TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
> <P
CLASS="para"
>Use built-in EXTEND procedure (or TRIM to condense), with no predefined maximum </P
> </TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
> <P
CLASS="para"
>EXTEND (or TRIM), but only up to declared maximum size</P
> </TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
> <P
CLASS="para"
>Can be compared for equality?</P
> </TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
> <P
CLASS="para"
>No</P
> </TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
> <P
CLASS="para"
>No</P
> </TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
> <P
CLASS="para"
>No</P
> </TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
> <P
CLASS="para"
>Retains ordering and subscripts when stored in and retrieved from database? </P
> </TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
> <P
CLASS="para"
>N/A</P
> </TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
> <P
CLASS="para"
>No</P
> </TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
> <P
CLASS="para"
>Yes</P
> </TD
></TR
></TBODY
></TABLE
><P
CLASS="para"
>The inevitable question is: Which construct should I use? This chapter reviews some examples of the new collections and offers some suggestions in this area. The short answer: </P
><UL
CLASS="itemizedlist"
><LI
CLASS="listitem"
><P
CLASS="para"
>Nested tables are more flexible than VARRAYs for table columns. </P
></LI
><LI
CLASS="listitem"
><P
CLASS="para"
>VARRAYs are best when you need bounded arrays that preserve element order. </P
></LI
><LI
CLASS="listitem"
><P
CLASS="para"
>	Index-by tables are the only option that allows initial sparseness. </P
></LI
><LI
CLASS="listitem"
><P
CLASS="para"
>If your code must run in both Oracle7 and Oracle8, you can use only index-by tables. </P
></LI
></UL
><P
CLASS="para"
>We'll revisit these suggestions in more detail at the end of the chapter. Before diving in, though, let's review a few of the new terms: </P
><DL
CLASS="variablelist"
><DT
CLASS="term"
>Collection</DT
><DD
CLASS="listitem"
><P
CLASS="para"
>A term which can have several different meanings:</P
><UL
CLASS="itemizedlist"
><LI
CLASS="listitem"
><P
CLASS="para"
>A nested table, index-by table, or VARRAY <EM
CLASS="emphasis"
>datatype</EM
></P
></LI
><LI
CLASS="listitem"
><P
CLASS="para"
>A PL/SQL <EM
CLASS="emphasis"
>variable</EM
> of type nested table, index-by table, or VARRAY</P
></LI
><LI
CLASS="listitem"
><P
CLASS="para"
>A table <EM
CLASS="emphasis"
>column</EM
> of type nested table or VARRAY</P
></LI
></UL
></DD
><DT
CLASS="term"
>Outer table</DT
><DD
CLASS="listitem"
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="AUTOID-17568"
></A
> <A
CLASS="indexterm"
NAME="AUTOID-17570"
></A
>A term referring to the "enclosing" table in which you have used a nested table or VARRAY as a column's datatype </P
></DD
><DT
CLASS="term"
>Inner table</DT
><DD
CLASS="listitem"
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="AUTOID-17577"
></A
> <A
CLASS="indexterm"
NAME="AUTOID-17579"
></A
>The "enclosed" collection that is implemented as a column in a table; also known as a "nested table column" </P
></DD
><DT
CLASS="term"
>Store table</DT
><DD
CLASS="listitem"
><P
CLASS="para"
>The physical table which Oracle creates to hold values of the inner table </P
></DD
></DL
><P
CLASS="para"
>Unfortunately, the term "nested table" can be a bit misleading. A nested table, when declared and used in PL/SQL, is not nested at all! It is instead fairly similar to an array. Even when you use a nested table as a table column, in Oracle 8.0 you can only nest these structures to a single level. That is, your column cannot consist of a nested table of nested tables. </P
><P
CLASS="para"
>"Variable-size array" is also a deceptive name; one might assume, based on the fact that it is supposed to be "variable size," that it can be arbitrarily extended; quite the opposite is true. Although a VARRAY can have a variable number of elements, this number can never exceed the limit that you<A
CLASS="indexterm"
NAME="AUTOID-17588"
></A
> define<A
CLASS="indexterm"
NAME="AUTOID-17589"
></A
> when you create the type.<A
CLASS="indexterm"
NAME="AUTOID-17590"
></A
> </P
></DIV
></DIV
><DIV
CLASS="htmlnav"
><P
></P
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch18_07.htm"
TITLE="18.7 Making the Objects Option Work"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 18.7 Making the Objects Option Work"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="book"
HREF="index.htm"
TITLE="Oracle PL/SQL Programming, 2nd Edition"
><IMG
SRC="../gifs/txthome.gif"
ALT="Oracle PL/SQL Programming, 2nd Edition"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch19_02.htm#SQL2-CH-19-SECT-2.1.1"
TITLE="19.2 Creating the New Collections"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 19.2 Creating the New Collections"
BORDER="0"></A
></TD
></TR
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
>18.7 Making the Objects Option Work</TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="index"
HREF="index/idx_0.htm"
TITLE="Book Index"
><IMG
SRC="../gifs/index.gif"
ALT="Book Index"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
>19.2 Creating the New Collections</TD
></TR
></TABLE
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"></DIV
><IMG SRC="../gifs/smnavbar.gif"
USEMAP="#map"
BORDER="0"
ALT="The Oracle Library Navigation">

<P><font size="-1">
<a href="../copyrght.htm#copy">Copyright (c) 2000</a> O'Reilly &amp; Associates. All rights reserved.
</font></P>

<MAP NAME="map">

<AREA SHAPE="RECT"
COORDS="0,0,35,30"
HREF="../index.htm"
ALT="Library Home">

<AREA SHAPE="RECT"
COORDS="40,0,95,30"
HREF="index.htm"
ALT="Oracle PL/SQL Programming, 2nd. Ed.">

<AREA SHAPE="RECT"
COORDS="100,0,200,30"
HREF="../guide8i/index.htm"
ALT="Guide to Oracle 8i Features">

<AREA SHAPE="RECT"
COORDS="205,0,245,30"
HREF="../bipack/index.htm"
ALT="Oracle Built-in Packages">

<AREA SHAPE="RECT"
COORDS="250,0,320,30"
HREF="../advprog/index.htm"
ALT="Advanced PL/SQL Programming with Packages">

<AREA SHAPE="RECT"
COORDS="325,0,420,30"
HREF="../webapp/index.htm"
ALT="Oracle Web Applications">

<AREA SHAPE="RECT"
COORDS="425,0,490,30"
HREF="../langpkt/index.htm"
ALT="Oracle PL/SQL Language Pocket Reference">

<AREA SHAPE="RECT"
COORDS="495,0,570,30"
HREF="../bipkt/index.htm"
ALT="Oracle PL/SQL Built-ins Pocket Reference">
</MAP>

</BODY
>
<!-- Mirrored from liso.cs.pusan.ac.kr by HTTrack Website Copier/3.x [XR&CO'2001] -->
</HTML
>
