<HTML
><HEAD
><TITLE
>[Chapter 7] 7.6 Managing Loop Execution</TITLE
><META
NAME="DC.Creator"
CONTENT="Steven Feuerstein &amp; Bill Pribyl"><META
NAME="DC.Date"
CONTENT="2000-04-29T18:57:43Z"><META
NAME="DC.Format"
CONTENT="text/html"
SCHEME="MIME"><META
NAME="DC.Identifier"
CONTENT="O'Reilly and Associates CD-ROM-1-56592-335-9E"><META
NAME="DC.Language"
CONTENT="en-US"><META
NAME="DC.Publisher"
CONTENT="O'Reilly &amp; Associates, Inc."><META
NAME="DC.Source"
CONTENT="1-56592-335-9E"
SCHEME="ISBN"><META
NAME="DC.Subject.Keyword"
CONTENT="Oracle PL/SQL"><META
NAME="DC.Title"
CONTENT="Oracle PL/SQL Programming, 2nd Edition"><META
NAME="DC.Type"
CONTENT="Text.Monograph"><META
NAME="generator"
CONTENT="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><LINK
REL="stylesheet"
TYPE="text/css"
HREF="../style/style1.css"><LINK
REV="made"
HREF="mailto:online-books@oreilly.com"
TITLE="Online Books Comments"><LINK
REL="up"
HREF="ch07_01.htm"
TITLE="7. Loops"><LINK
REL="prev"
HREF="ch07_05.htm#SQL2-CH-7-SECT-5.1"
TITLE="7.5 The WHILE Loop"><LINK
REL="next"
HREF="ch07_07.htm#SQL2-CH-7-SECT-7.2.2"
TITLE="7.7 Tips for PL/SQL Loops"></HEAD
><BODY
><DIV
CLASS="htmlnav"
><H1
><IMG
SRC="gifs/smbanner.gif"
ALT="Oracle PL/SQL Programming, 2nd Edition"
USEMAP="#srchmap"
BORDER="0"></H1
><MAP
NAME="srchmap"
><AREA
SHAPE="RECT"
COORDS="0,0,466,65"
HREF="index.htm"
ALT="Oracle PL/SQL Programming, 2nd Edition"><AREA
SHAPE="RECT"
COORDS="467,0,514,18"
HREF="jobjects/fsearch.htm"
ALT="Search this book"></MAP
><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch07_05.htm#SQL2-CH-7-SECT-5.1"
TITLE="7.5 The WHILE Loop"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 7.5 The WHILE Loop"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><SPAN
CLASS="NAVTITLE"
><A
CLASS="chapter"
REL="up"
HREF="ch07_01.htm"
TITLE="7. Loops"
>Chapter 7<BR>Loops</A
></SPAN
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch07_07.htm#SQL2-CH-7-SECT-7.2.2"
TITLE="7.7 Tips for PL/SQL Loops"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 7.7 Tips for PL/SQL Loops"
BORDER="0"></A
></TD
></TR
></TABLE
>&nbsp;<HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"></DIV
><DIV
CLASS="sect1"
><H2
CLASS="sect1"
><A
CLASS="title"
NAME="SQL2-CH-7-SECT-6"
>7.6 Managing Loop Execution</A
></H2
><P
CLASS="para"
>I've explained how to construct the different kinds of PL/SQL loops. The topics in this section address the following nuances of loop execution: </P
><DL
CLASS="variablelist"
><DT
CLASS="term"
><EM
CLASS="emphasis"
>Labels</EM
></DT
><DD
CLASS="listitem"
><P
CLASS="para"
>You can associate a label with a loop and use that label to increase your control over loop execution. </P
></DD
><DT
CLASS="term"
><EM
CLASS="emphasis"
>Scope</EM
></DT
><DD
CLASS="listitem"
><P
CLASS="para"
>The loop boundary creates a scope similar to that of a PL/SQL block. </P
></DD
><DT
CLASS="term"
><EM
CLASS="emphasis"
>Termination</EM
></DT
><DD
CLASS="listitem"
><P
CLASS="para"
>There is only one way to enter a loop, but a number of ways you can exit your loop. </P
></DD
></DL
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="SQL2-CH-7-SECT-6.1"
>7.6.1 Loop Labels</A
></H3
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="ch07-idx-151613-1"
></A
><A
CLASS="indexterm"
NAME="ch07-idx-151613-2"
></A
><A
CLASS="indexterm"
NAME="ch07-idx-151613-3"
></A
> You can associate a name with a loop by using a label. A loop label in PL/SQL has the following format: </P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>&lt;&lt;label_name&gt;&gt;</PRE
></BLOCKQUOTE
><P
CLASS="para"
>where label_name is the name of the label. (By the way, this is the same format used for GOTO labels.) In order to associate a name with a loop, however, the loop label must appear just before the LOOP statement as shown below: </P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>&lt;&lt;all_emps&gt;&gt;
FOR emp_rec IN emp_cur
LOOP
   ...
END LOOP;</PRE
></BLOCKQUOTE
><P
CLASS="para"
>The label can also appear optionally after the END LOOP reserved words, as the following example demonstrates: </P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>&lt;&lt;year_loop&gt;&gt;
WHILE year_number &lt;= 1995
LOOP

   <B
CLASS="emphasis.bold"
>&lt;&lt;month_loop&gt;&gt;</B
>
   FOR month_number IN 1 .. 12
   LOOP
      ...
   END LOOP <B
CLASS="emphasis.bold"
>month_loop;</B
>

END LOOP <B
CLASS="emphasis.bold"
>year_loop;</B
></PRE
></BLOCKQUOTE
><P
CLASS="para"
>By providing a label for a loop, you give that loop a name. This allows you to use dot notation to refer to loop-related variables, such as the FOR loop index. In the following example of nested FOR loops, I qualify my reference to the year_number index with the loop name: </P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>&lt;&lt;year_loop&gt;&gt;
WHILE year_number &lt;= 1995
LOOP

   &lt;&lt;month_loop&gt;&gt;
   FOR month_number IN 1 .. 12
   LOOP
      IF <B
CLASS="emphasis.bold"
>year_loop.year_number</B
> = 1900
      THEN
         ...
      END IF;
   END LOOP month_loop;

END LOOP year_loop;</PRE
></BLOCKQUOTE
><DIV
CLASS="sect3"
><H4
CLASS="sect3"
><A
CLASS="title"
NAME="SQL2-CH-7-SECT-6.1.1"
>7.6.1.1 Benefits of loop labels</A
></H4
><P
CLASS="para"
>The loop label is useful in two particular situations:</P
><UL
CLASS="itemizedlist"
><LI
CLASS="listitem"
><P
CLASS="para"
>When you have written a loop whose code length exceeds a single page, use a loop label to tie the end of the loop back explicitly to its start. This visual tag will make it easier for a developer to maintain and debug the program. Without the loop label, it can be very difficult to keep track of which LOOP goes with which END LOOP. </P
></LI
><LI
CLASS="listitem"
><P
CLASS="para"
>When you have nested loops, you can use the label to both improve readability and increase control over the execution of your loops. This capability is explored in the next section. </P
></LI
></UL
></DIV
><DIV
CLASS="sect3"
><H4
CLASS="sect3"
><A
CLASS="title"
NAME="SQL2-CH-7-SECT-6.1.2"
>7.6.1.2 Loop termination using labels</A
></H4
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="AUTOID-6925"
></A
><A
CLASS="indexterm"
NAME="AUTOID-6928"
></A
>You can affect loop execution by adding a loop label after the EXIT keyword in the EXIT statement of a loop, as follows: </P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>EXIT loop_label;
EXIT loop_label WHEN condition;</PRE
></BLOCKQUOTE
><P
CLASS="para"
>When you specify a loop label with the EXIT statement, PL/SQL terminates the specified loop. </P
><P
CLASS="para"
>Consider the last example with nested year and month loops. You might encounter a condition in which both loops should be immediately terminated. The usual, unlabeled EXIT statement inside the month loop would simply halt the month processing for the current year. The year loop would, however, continue its iterations. If the EXIT statement includes the year_loop label, both loops will halt execution: </P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>&lt;&lt;year_loop&gt;&gt;
WHILE year_number &lt;= 1995
LOOP

   &lt;&lt;month_loop&gt;&gt;
   FOR month_number IN 1 .. 12
   LOOP
      calc_totals
         (year_number, month_number, termination_condition);

      /* If the termination condition is TRUE exit ALL loops. */
      <B
CLASS="emphasis.bold"
>EXIT year_loop WHEN termination_condition;</B
>

   END LOOP month_loop;

END LOOP year_loop;</PRE
></BLOCKQUOTE
><P
CLASS="para"
>In this way, the loop labels offer you added control. Nevertheless, don't use this variation of the EXIT WHEN statement unless absolutely necessary. This kind of EXIT is very unstructured, which makes it hard to test, debug, and maintain. If your loops do have exception conditions, you should instead code them into the boundary of the loop or allow the exception section to handle them. </P
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="AUTOID-6938"
></A
> <A
CLASS="indexterm"
NAME="AUTOID-6939"
></A
> In other words, if you need to conditionally terminate your loop, then you should not use a FOR loop. </P
></DIV
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="SQL2-CH-7-SECT-6.2"
>7.6.2 Loop Scope</A
></H3
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="ch07-idx-151633-1"
></A
><A
CLASS="indexterm"
NAME="ch07-idx-151633-2"
></A
>A PL/SQL block establishes a scope for all locally-declared variables. Outside of the block, those variables do not exist. A similar kind of scope is created in the body of a loop. </P
><DIV
CLASS="sect3"
><H4
CLASS="sect3"
><A
CLASS="title"
NAME="SQL2-CH-7-SECT-6.2.1"
>7.6.2.1 Scope in FOR loops</A
></H4
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="AUTOID-6952"
></A
> <A
CLASS="indexterm"
NAME="AUTOID-6955"
></A
> <A
CLASS="indexterm"
NAME="AUTOID-6959"
></A
>In both numeric and cursor FOR loops, the scope of the loop index is restricted to the body of the loop. You cannot make reference to this implicitly declared variable in code before or after the loop. If you declare a variable of the same name as the loop index, PL/SQL considers that to be a different variable. It will not be used within the loop. </P
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="AUTOID-6963"
></A
>The loop index always takes precedence over a variable of the same name declared outside the scope of the loop. Suppose you have the following code: </P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>PROCEDURE calc_revenue (year_in IN NUMBER)
IS
   month_number NUMBER (2) := 6;
BEGIN
   FOR month_number IN 1 .. 12
   LOOP
      calc_rev_for_month (month_number);
   END LOOP;
END;</PRE
></BLOCKQUOTE
><P
CLASS="para"
>The assignment of 6 to month_number in the declaration section has no impact whatsoever on the loop. Within the FOR loop, any reference to month_number is evaluated according to the current value of the loop index. </P
><P
CLASS="para"
>If you insist on declaring a variable whose name is the same as that of a loop index, you can use dot notation to qualify your references to these variables. In the following example I have a duplicate use of the month_number identifier: </P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>PROCEDURE calc_revenue (year_in IN NUMBER)
IS
   month_number NUMBER (2) := 6;
BEGIN
   FOR month_number IN 1 .. 12
   LOOP
      IF calc_revenue.month_number &lt; 6
      THEN
         ...
      END IF;
      calc_rev_for_month (month_number);
   END LOOP;
END;</PRE
></BLOCKQUOTE
><P
CLASS="para"
>Inside the loop, my first reference to month_number is qualified by the procedure name (calc_revenue.month_number). As a result, the compiler can obtain the right value for that month_number (6), while also using the loop index value in the call to calc_rev_for_month. </P
><P
CLASS="para"
>Of course, you can and should avoid this kind of confusion by using distinct names for your variables and loop indexes. </P
></DIV
><DIV
CLASS="sect3"
><H4
CLASS="sect3"
><A
CLASS="title"
NAME="SQL2-CH-7-SECT-6.2.2"
>7.6.2.2 Scope with labels</A
></H4
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="AUTOID-6975"
></A
><A
CLASS="indexterm"
NAME="AUTOID-6979"
></A
>If you define a label for a loop, then this label can be used to qualify the name of identifiers (loop indexes and locally-declared variables) inside the loop. </P
><P
CLASS="para"
>Once the loop has terminated, you cannot use the loop label to qualify identifiers. The scope of that label, in other words, is the boundary and body of the loop. </P
><P
CLASS="para"
>In the following example, I created two nested loops, both of which use a loop index named date_number. (Warning! Do not try this at home. Although it will compile, it can be dangerous to your sanity.) </P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>&lt;&lt;year_loop&gt;&gt;
FOR date_number IN 1994 .. 1999
LOOP

   &lt;&lt;month_loop&gt;&gt;
   FOR date_number IN 1 .. 12
   LOOP

      IF <B
CLASS="emphasis.bold"
>year_loop.date_number = 1994 AND</B
>
         date_number = 1
      THEN
         first_month_processing;
      END IF;

   END LOOP month_loop;

END LOOP year_loop;</PRE
></BLOCKQUOTE
><P
CLASS="para"
>The IF statement references the date_number loop index of both the outer and inner loops by prefixing the outer loop's name to the first reference to date_number, I tell the compiler which variable I want it to use. </P
><P
CLASS="para"
>Again, you would be much better off simply changing the name of one or both of the loop indexes; date_number is much too vague a name for either of these loops.<A
CLASS="indexterm"
NAME="AUTOID-6987"
></A
> <A
CLASS="indexterm"
NAME="AUTOID-6988"
></A
> </P
></DIV
></DIV
></DIV
><DIV
CLASS="htmlnav"
><P
></P
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch07_05.htm#SQL2-CH-7-SECT-5.1"
TITLE="7.5 The WHILE Loop"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 7.5 The WHILE Loop"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="book"
HREF="index.htm"
TITLE="Oracle PL/SQL Programming, 2nd Edition"
><IMG
SRC="../gifs/txthome.gif"
ALT="Oracle PL/SQL Programming, 2nd Edition"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch07_07.htm#SQL2-CH-7-SECT-7.2.2"
TITLE="7.7 Tips for PL/SQL Loops"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 7.7 Tips for PL/SQL Loops"
BORDER="0"></A
></TD
></TR
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
>7.5 The WHILE Loop</TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="index"
HREF="index/idx_0.htm"
TITLE="Book Index"
><IMG
SRC="../gifs/index.gif"
ALT="Book Index"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
>7.7 Tips for PL/SQL Loops</TD
></TR
></TABLE
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"></DIV
><IMG SRC="../gifs/smnavbar.gif"
USEMAP="#map"
BORDER="0"
ALT="The Oracle Library Navigation">

<P><font size="-1">
<a href="../copyrght.htm#copy">Copyright (c) 2000</a> O'Reilly &amp; Associates. All rights reserved.
</font></P>

<MAP NAME="map">

<AREA SHAPE="RECT"
COORDS="0,0,35,30"
HREF="../index.htm"
ALT="Library Home">

<AREA SHAPE="RECT"
COORDS="40,0,95,30"
HREF="index.htm"
ALT="Oracle PL/SQL Programming, 2nd. Ed.">

<AREA SHAPE="RECT"
COORDS="100,0,200,30"
HREF="../guide8i/index.htm"
ALT="Guide to Oracle 8i Features">

<AREA SHAPE="RECT"
COORDS="205,0,245,30"
HREF="../bipack/index.htm"
ALT="Oracle Built-in Packages">

<AREA SHAPE="RECT"
COORDS="250,0,320,30"
HREF="../advprog/index.htm"
ALT="Advanced PL/SQL Programming with Packages">

<AREA SHAPE="RECT"
COORDS="325,0,420,30"
HREF="../webapp/index.htm"
ALT="Oracle Web Applications">

<AREA SHAPE="RECT"
COORDS="425,0,490,30"
HREF="../langpkt/index.htm"
ALT="Oracle PL/SQL Language Pocket Reference">

<AREA SHAPE="RECT"
COORDS="495,0,570,30"
HREF="../bipkt/index.htm"
ALT="Oracle PL/SQL Built-ins Pocket Reference">
</MAP>

</BODY
>
<!-- Mirrored from liso.cs.pusan.ac.kr by HTTrack Website Copier/3.x [XR&CO'2001] -->
</HTML
>
