<HTML
><HEAD
><TITLE
>[Chapter 23] 23.2 Transaction Integrity and Execute Authority</TITLE
><META
NAME="DC.Creator"
CONTENT="Steven Feuerstein &amp; Bill Pribyl"><META
NAME="DC.Date"
CONTENT="2000-04-29T19:12:26Z"><META
NAME="DC.Format"
CONTENT="text/html"
SCHEME="MIME"><META
NAME="DC.Identifier"
CONTENT="O'Reilly and Associates CD-ROM-1-56592-335-9E"><META
NAME="DC.Language"
CONTENT="en-US"><META
NAME="DC.Publisher"
CONTENT="O'Reilly &amp; Associates, Inc."><META
NAME="DC.Source"
CONTENT="1-56592-335-9E"
SCHEME="ISBN"><META
NAME="DC.Subject.Keyword"
CONTENT="Oracle PL/SQL"><META
NAME="DC.Title"
CONTENT="Oracle PL/SQL Programming, 2nd Edition"><META
NAME="DC.Type"
CONTENT="Text.Monograph"><META
NAME="generator"
CONTENT="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><LINK
REL="stylesheet"
TYPE="text/css"
HREF="../style/style1.css"><LINK
REV="made"
HREF="mailto:online-books@oreilly.com"
TITLE="Online Books Comments"><LINK
REL="up"
HREF="ch23_01.htm"
TITLE="23. Managing Code in the Database"><LINK
REL="prev"
HREF="ch23_01.htm"
TITLE="23.1 Executing Stored Code"><LINK
REL="next"
HREF="ch23_03.htm"
TITLE="23.3 Module Validation and Dependency Management"></HEAD
><BODY
><DIV
CLASS="htmlnav"
><H1
><IMG
SRC="gifs/smbanner.gif"
ALT="Oracle PL/SQL Programming, 2nd Edition"
USEMAP="#srchmap"
BORDER="0"></H1
><MAP
NAME="srchmap"
><AREA
SHAPE="RECT"
COORDS="0,0,466,65"
HREF="index.htm"
ALT="Oracle PL/SQL Programming, 2nd Edition"><AREA
SHAPE="RECT"
COORDS="467,0,514,18"
HREF="jobjects/fsearch.htm"
ALT="Search this book"></MAP
><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch23_01.htm"
TITLE="23.1 Executing Stored Code"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 23.1 Executing Stored Code"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><SPAN
CLASS="NAVTITLE"
><A
CLASS="chapter"
REL="up"
HREF="ch23_01.htm"
TITLE="23. Managing Code in the Database"
>Chapter 23<BR>Managing Code in the Database</A
></SPAN
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch23_03.htm"
TITLE="23.3 Module Validation and Dependency Management"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 23.3 Module Validation and Dependency Management"
BORDER="0"></A
></TD
></TR
></TABLE
>&nbsp;<HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"></DIV
><DIV
CLASS="sect1"
><H2
CLASS="sect1"
><A
CLASS="title"
NAME="SQL2-CH-23-SECT-2"
>23.2 Transaction Integrity and Execute Authority</A
></H2
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="ch23-idx-410819-1"
></A
><A
CLASS="indexterm"
NAME="ch23-idx-410819-2"
></A
><A
CLASS="indexterm"
NAME="ch23-idx-410819-3"
></A
>The RDBMS and SQL languages give you the capability to tightly control access to and changes in any particular table. With the GRANT command you can, for example, make sure that only certain roles and users have the ability to perform an UPDATE on a given table. This GRANT statement cannot, on the other hand, make sure that the UPDATEs performed by a user or application are done correctly. </P
><P
CLASS="para"
>In a typical banking transaction, you might need to transfer funds from account A to account B. The balance of account B must be incremented, and that of account A decremented. Table access is necessary, but not sufficient, to guarantee that both of these steps are always performed by all programmers who write code to perform a transfer. Without stored objects, the best you can do is require extensive testing and code review to make sure that all transactions are properly constructed. With stored objects, on the other hand, you can guarantee that a funds transfer either completes successfully or is completely rolled back, regardless of who executes the process. </P
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="SQL2-CH-23-SECT-2.1"
>23.2.1 Execute Authority on Stored Objects</A
></H3
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="ch23-idx-999172-1"
></A
> <A
CLASS="indexterm"
NAME="ch23-idx-999172-2"
></A
><A
CLASS="indexterm"
NAME="ch23-idx-999172-3"
></A
><A
CLASS="indexterm"
NAME="ch23-idx-999172-4"
></A
>The secret to achieving this level of transaction integrity is the concept of execute authority (also known as run authority). Instead of granting to a role or user the authority to update a table, you grant privileges to that role/user only to execute a procedure. This procedure controls and provides access to the underlying data structures (see <A
CLASS="xref"
HREF="ch23_02.htm"
>Figure 23.2</A
>). The procedure is owned by a separate Oracle RDBMS account, which in turn is granted the actual update privileges on those tables needed to perform the transaction. The procedure therefore becomes the gatekeeper for the transfer transaction. The only way a program (whether an Oracle Forms application or a Pro*C executable) can execute the transfer is through the procedure, so the transaction integrity can be guaranteed. </P
><H4
CLASS="figure"
><A
CLASS="title"
NAME="SQL2-CH-23-FIG-2"
>Figure 23.2: Transaction integrity with a PL/SQL code layer</A
></H4
><IMG
CLASS="graphic"
SRC="figs/sql2.2302.gif"
ALT="Figure 23.2"><P
CLASS="para"
>In order for a stored procedure or package to compile (which occurs at the time of creation or replacement), the owner of that program must explicitly be granted all the necessary privileges to any objects referenced by the program. These privileges may not be granted simply to a role. If, for example, procedure disp_customer issues a SELECT statement against the customer table, then the owner of disp_customer must be granted a minimum of SELECT privileges on that table with an explicit command: </P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>GRANT privilege ON customer TO procedure_owner;</PRE
></BLOCKQUOTE
><P
CLASS="para"
>Requiring direct grants to individual Oracle users sometimes causes difficulty in environments where grants are controlled carefully and efficiently through the use of roles. After all, the whole idea of the role is to allow DBAs to move away from the onerous task of directly granting privileges to a myriad of individual users. Yet every one of those users must execute the stored procedures underlying an application. What's a DBA to do? </P
><P
CLASS="para"
>In some Oracle shops, a single account (user), which I'll call STOROBJ, is created in the production environment. This user owns all stored objects and has update privileges on all tables, as is appropriate. Other people who use the applications might have SELECT privileges on a number of tables, and perhaps even update privileges on certain tables that are maintained through Oracle Forms applications. But all complex transactions are bundled into stored procedures and stored functions, and users are granted EXECUTE authority only to those stored programs. If an Oracle Forms screen needs to perform a funds transfer, it calls the stored procedure and displays confirmation information on the screen. The logic and authority would, however, reside in the database and be controlled tightly by the STOROBJ account. </P
><P
CLASS="para"
>To grant execute authority on a stored object, you issue the following command (in SQL*Plus, SQL*DBA, or another product that supports the issuing of DDL calls): </P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>SQL&gt; GRANT EXECUTE ON object_name TO user_or_role;</PRE
></BLOCKQUOTE
><BLOCKQUOTE
CLASS="note"
><P
CLASS="para"
><STRONG
>NOTE:</STRONG
> You can only grant <A
CLASS="indexterm"
NAME="AUTOID-21434"
></A
> <A
CLASS="indexterm"
NAME="AUTOID-21437"
></A
>EXECUTE authority to an entire package, not to individual programs within a package. Suppose that you build a single package to encapsulate all SQL-based access to a table; this package contains procedures which perform inserts, updates, and deletes, as well as cursors and functions to query data. There is no way to grant "read-only" EXECUTE authority. A schema can either run all programs in a package or none. As a result, you might want to build a single package encapsulating all SQL against a table or view, but then build additional packages <EM
CLASS="emphasis"
>on top</EM
> of that "base" package which act as filters for certain classes of activity.<A
CLASS="indexterm"
NAME="AUTOID-21441"
></A
> <A
CLASS="indexterm"
NAME="AUTOID-21442"
></A
></P
></BLOCKQUOTE
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="SQL2-CH-23-SECT-2.2"
>23.2.2 Creating Synonyms for Stored Objects</A
></H3
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="ch23-idx-999164-1"
></A
><A
CLASS="indexterm"
NAME="ch23-idx-999164-2"
></A
><A
CLASS="indexterm"
NAME="ch23-idx-999164-3"
></A
>You should create public synonyms for each of the stored objects so that individual developers do not have to reference the STOROBJ account name in order to access the programs. Suppose, for example, that we have a funds transfer procedure, as follows: </P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>PROCEDURE xfer_funds
   (from_account_in IN NUMBER, to_account_in IN NUMBER,
    transfer_amount_in IN NUMBER, transfer_status_out OUT NUMBER);</PRE
></BLOCKQUOTE
><P
CLASS="para"
>Without a synonym, you would have to execute this procedure in this way: </P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>storobj.xfer_funds (:old_acct, :new_acct, :xfer_amt, :xfer_stat);</PRE
></BLOCKQUOTE
><P
CLASS="para"
>You should always avoid hardcoding the name of the owner of an object, be it a procedure or a table. What if you need to change the account name? What if you decide to move the procedure to an entirely different server and then need to execute this procedure as an RPC? Whenever you are working with stored objects, you should create synonyms, as follows: </P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>SQL&gt; CREATE PUBLIC SYNONYM xfer_funds FOR storobj.xfer_funds;</PRE
></BLOCKQUOTE
><P
CLASS="para"
>Now I can call the transfer procedure without making reference to its owner: </P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>xfer_funds (:old_acct, :new_acct, :xfer_amt, :xfer_stat);<A
CLASS="indexterm"
NAME="AUTOID-21462"
></A
>
<A
CLASS="indexterm"
NAME="AUTOID-21463"
></A
></PRE
></BLOCKQUOTE
><P
CLASS="para"
>While it is possible to create a synonym for a <A
CLASS="indexterm"
NAME="AUTOID-21465"
></A
> <A
CLASS="indexterm"
NAME="AUTOID-21468"
></A
>standalone procedure, it is not possible to create a synonym for a packaged procedure or function. You can, however, create a synonym for the package itself. In effect, synonyms can be used to avoid having to provide the schema name of an object; you cannot use it to avoid specifying the package name in which a program is defined. <A
CLASS="indexterm"
NAME="AUTOID-21471"
></A
> <A
CLASS="indexterm"
NAME="AUTOID-21472"
></A
> <A
CLASS="indexterm"
NAME="AUTOID-21473"
></A
> </P
></DIV
></DIV
><DIV
CLASS="htmlnav"
><P
></P
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch23_01.htm"
TITLE="23.1 Executing Stored Code"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 23.1 Executing Stored Code"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="book"
HREF="index.htm"
TITLE="Oracle PL/SQL Programming, 2nd Edition"
><IMG
SRC="../gifs/txthome.gif"
ALT="Oracle PL/SQL Programming, 2nd Edition"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch23_03.htm"
TITLE="23.3 Module Validation and Dependency Management"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 23.3 Module Validation and Dependency Management"
BORDER="0"></A
></TD
></TR
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
>23.1 Executing Stored Code</TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="index"
HREF="index/idx_0.htm"
TITLE="Book Index"
><IMG
SRC="../gifs/index.gif"
ALT="Book Index"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
>23.3 Module Validation and Dependency Management</TD
></TR
></TABLE
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"></DIV
><IMG SRC="../gifs/smnavbar.gif"
USEMAP="#map"
BORDER="0"
ALT="The Oracle Library Navigation">

<P><font size="-1">
<a href="../copyrght.htm#copy">Copyright (c) 2000</a> O'Reilly &amp; Associates. All rights reserved.
</font></P>

<MAP NAME="map">

<AREA SHAPE="RECT"
COORDS="0,0,35,30"
HREF="../index.htm"
ALT="Library Home">

<AREA SHAPE="RECT"
COORDS="40,0,95,30"
HREF="index.htm"
ALT="Oracle PL/SQL Programming, 2nd. Ed.">

<AREA SHAPE="RECT"
COORDS="100,0,200,30"
HREF="../guide8i/index.htm"
ALT="Guide to Oracle 8i Features">

<AREA SHAPE="RECT"
COORDS="205,0,245,30"
HREF="../bipack/index.htm"
ALT="Oracle Built-in Packages">

<AREA SHAPE="RECT"
COORDS="250,0,320,30"
HREF="../advprog/index.htm"
ALT="Advanced PL/SQL Programming with Packages">

<AREA SHAPE="RECT"
COORDS="325,0,420,30"
HREF="../webapp/index.htm"
ALT="Oracle Web Applications">

<AREA SHAPE="RECT"
COORDS="425,0,490,30"
HREF="../langpkt/index.htm"
ALT="Oracle PL/SQL Language Pocket Reference">

<AREA SHAPE="RECT"
COORDS="495,0,570,30"
HREF="../bipkt/index.htm"
ALT="Oracle PL/SQL Built-ins Pocket Reference">
</MAP>

</BODY
>
<!-- Mirrored from liso.cs.pusan.ac.kr by HTTrack Website Copier/3.x [XR&CO'2001] -->
</HTML
>
