<HTML
><HEAD
><TITLE
>[Chapter 17] 17.5 Calling Packaged Functions in SQL</TITLE
><META
NAME="DC.Creator"
CONTENT="Steven Feuerstein &amp; Bill Pribyl"><META
NAME="DC.Date"
CONTENT="2000-04-29T19:04:52Z"><META
NAME="DC.Format"
CONTENT="text/html"
SCHEME="MIME"><META
NAME="DC.Identifier"
CONTENT="O'Reilly and Associates CD-ROM-1-56592-335-9E"><META
NAME="DC.Language"
CONTENT="en-US"><META
NAME="DC.Publisher"
CONTENT="O'Reilly &amp; Associates, Inc."><META
NAME="DC.Source"
CONTENT="1-56592-335-9E"
SCHEME="ISBN"><META
NAME="DC.Subject.Keyword"
CONTENT="Oracle PL/SQL"><META
NAME="DC.Title"
CONTENT="Oracle PL/SQL Programming, 2nd Edition"><META
NAME="DC.Type"
CONTENT="Text.Monograph"><META
NAME="generator"
CONTENT="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><LINK
REL="stylesheet"
TYPE="text/css"
HREF="../style/style1.css"><LINK
REV="made"
HREF="mailto:online-books@oreilly.com"
TITLE="Online Books Comments"><LINK
REL="up"
HREF="ch17_01.htm"
TITLE="17. Calling PL/SQL Functions in SQL"><LINK
REL="prev"
HREF="ch17_04.htm"
TITLE="17.4 Restrictions on PL/SQL Functions in SQL"><LINK
REL="next"
HREF="ch17_06.htm"
TITLE="17.6 Column/Function Name Precedence"></HEAD
><BODY
><DIV
CLASS="htmlnav"
><H1
><IMG
SRC="gifs/smbanner.gif"
ALT="Oracle PL/SQL Programming, 2nd Edition"
USEMAP="#srchmap"
BORDER="0"></H1
><MAP
NAME="srchmap"
><AREA
SHAPE="RECT"
COORDS="0,0,466,65"
HREF="index.htm"
ALT="Oracle PL/SQL Programming, 2nd Edition"><AREA
SHAPE="RECT"
COORDS="467,0,514,18"
HREF="jobjects/fsearch.htm"
ALT="Search this book"></MAP
><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch17_04.htm"
TITLE="17.4 Restrictions on PL/SQL Functions in SQL"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 17.4 Restrictions on PL/SQL Functions in SQL"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><SPAN
CLASS="NAVTITLE"
><A
CLASS="chapter"
REL="up"
HREF="ch17_01.htm"
TITLE="17. Calling PL/SQL Functions in SQL"
>Chapter 17<BR>Calling PL/SQL Functions in SQL</A
></SPAN
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch17_06.htm"
TITLE="17.6 Column/Function Name Precedence"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 17.6 Column/Function Name Precedence"
BORDER="0"></A
></TD
></TR
></TABLE
>&nbsp;<HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"></DIV
><DIV
CLASS="sect1"
><H2
CLASS="sect1"
><A
CLASS="title"
NAME="SQL2-CH-17-SECT-5"
>17.5 Calling Packaged Functions in SQL</A
></H2
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="ch17-idx-998299-1"
></A
> <A
CLASS="indexterm"
NAME="ch17-idx-998299-2"
></A
><A
CLASS="indexterm"
NAME="ch17-idx-998299-3"
></A
>As I describe in <A
CLASS="xref"
HREF="ch16_01.htm"
>Chapter 16, <CITE
CLASS="chapter"
>Packages</CITE
></A
>, the specification and body of a package are distinct; a specification can (and must) exist before its body has been defined. This feature of packages makes life complicated when it comes to calling functions in SQL. When a SELECT statement calls a packaged function, the only information available to it is the package specification. Yet it is the contents of the package body which determine whether that function is valid for execution in SQL. The consequence of this structure is that you will have to add code to your package specification in order to enable a packaged function for calling in SQL. </P
><P
CLASS="para"
>To use the official lingo, you must explicitly "assert" the purity level (the extent to which a function is free of side effects) of a stored function in a package specification. The Oracle Server can then determine when the package body is compiled whether the function violates that purity level. If so, an error will be raised and you then face the sometimes daunting task of figuring out where and how the violation occurs. </P
><P
CLASS="para"
>You assert a purity level for a function with the RESTRICT_REFERENCES pragma, explored in the next section. </P
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="SQL2-CH-17-SECT-5.1"
>17.5.1 The RESTRICT_REFERENCES Pragma</A
></H3
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="ch17-idx-565558-1"
></A
><A
CLASS="indexterm"
NAME="ch17-idx-565558-2"
></A
> <A
CLASS="indexterm"
NAME="ch17-idx-565558-3"
></A
><A
CLASS="indexterm"
NAME="ch17-idx-565558-4"
></A
>As I've mentioned, a pragma is a special directive to the PL/SQL compiler. If you have ever created a programmer-defined, named exception, you have already encountered your first pragma. In the case of the RESTRICT_REFERENCES pragma, you are telling the compiler the purity level you believe your function meets or exceeds. </P
><P
CLASS="para"
>You need a separate pragma statement for each packaged function you wish to use in a SQL statement, and it must come after the function declaration in the package specification (you do not specify the pragma in the package body). </P
><P
CLASS="para"
>To assert a purity level with the pragma, use the following syntax:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>PRAGMA RESTRICT_REFERENCES
   (function_name, WNDS [, WNPS] [, RNDS] [, RNPS])</PRE
></BLOCKQUOTE
><P
CLASS="para"
>where function_name is the name of the function whose purity level you wish to assert, and the four different codes have the following meanings: </P
><DL
CLASS="variablelist"
><DT
CLASS="term"
><A
CLASS="indexterm"
NAME="ch17-idx-565559-1"
></A
> WNDS</DT
><DD
CLASS="listitem"
><P
CLASS="para"
>Writes No Database State. Asserts that the function does not modify any database tables. </P
></DD
><DT
CLASS="term"
><A
CLASS="indexterm"
NAME="ch17-idx-565560-1"
></A
> WNPS</DT
><DD
CLASS="listitem"
><P
CLASS="para"
>Writes No Package State. Asserts that the function does not modify any package variables. </P
></DD
><DT
CLASS="term"
><A
CLASS="indexterm"
NAME="ch17-idx-565561-1"
></A
> RNDS</DT
><DD
CLASS="listitem"
><P
CLASS="para"
>Reads No Database State. Asserts that the function does not read any database tables. </P
></DD
><DT
CLASS="term"
><A
CLASS="indexterm"
NAME="ch17-idx-565562-1"
></A
> RNPS</DT
><DD
CLASS="listitem"
><P
CLASS="para"
>Reads No Package State. Asserts that the function does not read any package variables. </P
></DD
></DL
><P
CLASS="para"
>Notice that only the WNDS level is mandatory in the pragma. That is consistent with the restriction that stored functions in SQL may not execute an UPDATE, INSERT, or DELETE statement. All other states are optional. You can list them in any order, but you must include the WNDS argument. No one argument implies another argument. I can write to the database without reading from it. I can read a package variable without writing to a package variable. </P
><P
CLASS="para"
>Here is an example of two different purity level assertions for functions in the company_financials package: </P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>PACKAGE company_financials
IS
   FUNCTION company_type (type_code_in IN VARCHAR2)
      RETURN VARCHAR2;

   FUNCTION company_name (company_id_in IN company.company_id%TYPE)
      RETURN VARCHAR2;

   PRAGMA RESTRICT_REFERENCES (company_type, WNDS, RNDS, WNPS, RNPS);
   PRAGMA RESTRICT_REFERENCES (company_name, WNDS, WNPS, RNPS);
END company_financials;</PRE
></BLOCKQUOTE
><P
CLASS="para"
>In this package, the company_name function reads from the database to obtain the name for the specified company. Notice that I placed both pragmas together at the bottom of the package specification&nbsp;-- the pragma does not need to immediately follow the function specification. I also went to the trouble of specifying the WNPS and RNPS arguments for both of the functions. Oracle Corporation recommends that you assert the highest possible purity levels so that the compiler will never reject the function unnecessarily. </P
><BLOCKQUOTE
CLASS="note"
><P
CLASS="para"
><STRONG
>NOTE:</STRONG
> If a function you want to call in SQL calls a procedure in a package, you must also provide a RESTRICT_REFERENCES pragma for that procedure. You can't call the procedure directly in SQL, but if it is going to be executed indirectly from within SQL, it still must follow the rules. </P
></BLOCKQUOTE
><DIV
CLASS="sect3"
><H4
CLASS="sect3"
><A
CLASS="title"
NAME="SQL2-CH-17-SECT-5.1.1"
>17.5.1.1 Pragma violation errors</A
></H4
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="ch17-idx-998320-1"
></A
>If your function violates its pragma, you will receive the <A
CLASS="indexterm"
NAME="ch17-idx-998324-1"
></A
>PLS-00452 error. Suppose, for example, that the body of the company_financials package looks like this: </P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>CREATE OR REPLACE PACKAGE BODY company_financials
IS
   FUNCTION company_type (type_code_in IN VARCHAR2)
      RETURN VARCHAR2
   IS
      v_sal NUMBER;
   BEGIN
      SELECT sal INTO v_sal FROM emp WHERE empno = 1;
      RETURN 'bigone';
   END;

   FUNCTION company_name (company_id_in IN company.company_id%TYPE)
      RETURN VARCHAR2
   IS
   BEGIN
      UPDATE emp SET sal = 0;
      RETURN 'bigone';
   END;
END company_financials;
/</PRE
></BLOCKQUOTE
><P
CLASS="para"
>When I attempt to compile this package body I will get the following error: </P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>3/4    PLS-00452: Subprogram 'COMPANY_TYPE' violates its associated pragma</PRE
></BLOCKQUOTE
><P
CLASS="para"
>because the company_type function reads from the database and I have asserted the RNDS purity level. If I remove that silly SELECT statement, I will then receive this error: </P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>11/4   PLS-00452: Subprogram 'COMPANY_NAME' violates its associated pragma</PRE
></BLOCKQUOTE
><P
CLASS="para"
>because the company_name function updates the database and I have asserted the WNDS level. You will sometimes look at your function and say: "Hey, I absolutely do <EM
CLASS="emphasis"
>not</EM
> violate my purity level. There is no UPDATE, DELETE, or UPDATE around." Maybe not. But there is a good chance that you are calling a built-in package or in some other way breaking the rules.<A
CLASS="indexterm"
NAME="AUTOID-15171"
></A
> <A
CLASS="indexterm"
NAME="AUTOID-15172"
></A
> </P
></DIV
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="SQL2-CH-17-SECT-5.2"
>17.5.2 Asserting Purity Level with Package Initialization Section</A
></H3
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="ch17-idx-565563-1"
></A
><A
CLASS="indexterm"
NAME="ch17-idx-565563-2"
></A
>If your package contains an initialization section (executable statements after a BEGIN statement in the package body), you must also assert the purity level of that section. The initialization section is executed automatically the first time any package object is referenced. So if a packaged function is used in a SQL statement, it will trigger execution of that code. If the initialization section modifies package variables or database information, the compiler needs to know about that through the pragma. </P
><P
CLASS="para"
>You can assert the purity level of the initialization section either explicitly or implicitly. To make an explicit assertion, use the following variation of the pragma RESTRICT_REFERENCES: </P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>PRAGMA RESTRICT_REFERENCES
   (package_name, WNDS, [, WNPS] [, RNDS] [, RNPS])</PRE
></BLOCKQUOTE
><P
CLASS="para"
>Instead of specifying the name of the function, you include the name of the package itself, followed by all the applicable state arguments. In the following argument I assert only WNDS and WNPS because the initialization section reads data from the configuration table and also reads the value of a global variable from another package (session_pkg.user_id). </P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>PACKAGE configure
IS
   PRAGMA RESTRICT_REFERENCES (configure, WNDS, WNPS);
   user_name VARCHAR2(100);
END configure;

PACKAGE BODY configure
IS
BEGIN
   SELECT lname || ', ' || fname INTO user_name
     FROM user_table
    WHERE user_id = session_pkg.user_id;
END configure;</PRE
></BLOCKQUOTE
><P
CLASS="para"
>Why can I assert the WNPS even though I do write to the user_name package variable? The answer is that it's a variable from this same package, so the action is not considered a side effect. </P
><P
CLASS="para"
>You can also implicitly assert the purity level of the package's initialization section by allowing the compiler to infer that level from the purity level(s) of all the pragmas for individual functions in the package. In the following version of the company package, the two pragmas for the functions allow the Oracle Server to infer a combined purity level of RNDS and WNPS for the initialization section. This means that the initialization section cannot read from the database and cannot write to a package variable. </P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>PACKAGE company
IS
   FUNCTION get_company (company_id_in IN VARCHAR2)
      RETURN company%ROWTYPE;

   FUNCTION deactivate_company (company_id_in IN company.company_id%TYPE)
      RETURN VARCHAR2;

   PRAGMA RESTRICT_REFERENCES (get_company, RNDS, WNPS);
   PRAGMA RESTRICT_REFERENCES (deactivate_name, WNPS);
END company;<A
CLASS="indexterm"
NAME="AUTOID-15190"
></A
>
<A
CLASS="indexterm"
NAME="AUTOID-15191"
></A
>
<A
CLASS="indexterm"
NAME="AUTOID-15192"
></A
>
<A
CLASS="indexterm"
NAME="AUTOID-15193"
></A
>
<A
CLASS="indexterm"
NAME="AUTOID-15194"
></A
>
<A
CLASS="indexterm"
NAME="AUTOID-15195"
></A
></PRE
></BLOCKQUOTE
><P
CLASS="para"
>Generally, you are probably better off providing an explicit purity level assertion for the initialization section. This makes it easier for those responsible for maintaining the package to understand both your intentions and your understanding of the <A
CLASS="indexterm"
NAME="AUTOID-15197"
></A
> <A
CLASS="indexterm"
NAME="AUTOID-15198"
></A
> <A
CLASS="indexterm"
NAME="AUTOID-15199"
></A
> package.<A
CLASS="indexterm"
NAME="AUTOID-15200"
></A
> <A
CLASS="indexterm"
NAME="AUTOID-15201"
></A
> <A
CLASS="indexterm"
NAME="AUTOID-15202"
></A
> <A
CLASS="indexterm"
NAME="AUTOID-15203"
></A
> </P
></DIV
></DIV
><DIV
CLASS="htmlnav"
><P
></P
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch17_04.htm"
TITLE="17.4 Restrictions on PL/SQL Functions in SQL"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 17.4 Restrictions on PL/SQL Functions in SQL"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="book"
HREF="index.htm"
TITLE="Oracle PL/SQL Programming, 2nd Edition"
><IMG
SRC="../gifs/txthome.gif"
ALT="Oracle PL/SQL Programming, 2nd Edition"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch17_06.htm"
TITLE="17.6 Column/Function Name Precedence"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 17.6 Column/Function Name Precedence"
BORDER="0"></A
></TD
></TR
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
>17.4 Restrictions on PL/SQL Functions in SQL</TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="index"
HREF="index/idx_0.htm"
TITLE="Book Index"
><IMG
SRC="../gifs/index.gif"
ALT="Book Index"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
>17.6 Column/Function Name Precedence</TD
></TR
></TABLE
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"></DIV
><IMG SRC="../gifs/smnavbar.gif"
USEMAP="#map"
BORDER="0"
ALT="The Oracle Library Navigation">

<P><font size="-1">
<a href="../copyrght.htm#copy">Copyright (c) 2000</a> O'Reilly &amp; Associates. All rights reserved.
</font></P>

<MAP NAME="map">

<AREA SHAPE="RECT"
COORDS="0,0,35,30"
HREF="../index.htm"
ALT="Library Home">

<AREA SHAPE="RECT"
COORDS="40,0,95,30"
HREF="index.htm"
ALT="Oracle PL/SQL Programming, 2nd. Ed.">

<AREA SHAPE="RECT"
COORDS="100,0,200,30"
HREF="../guide8i/index.htm"
ALT="Guide to Oracle 8i Features">

<AREA SHAPE="RECT"
COORDS="205,0,245,30"
HREF="../bipack/index.htm"
ALT="Oracle Built-in Packages">

<AREA SHAPE="RECT"
COORDS="250,0,320,30"
HREF="../advprog/index.htm"
ALT="Advanced PL/SQL Programming with Packages">

<AREA SHAPE="RECT"
COORDS="325,0,420,30"
HREF="../webapp/index.htm"
ALT="Oracle Web Applications">

<AREA SHAPE="RECT"
COORDS="425,0,490,30"
HREF="../langpkt/index.htm"
ALT="Oracle PL/SQL Language Pocket Reference">

<AREA SHAPE="RECT"
COORDS="495,0,570,30"
HREF="../bipkt/index.htm"
ALT="Oracle PL/SQL Built-ins Pocket Reference">
</MAP>

</BODY
>
<!-- Mirrored from liso.cs.pusan.ac.kr by HTTrack Website Copier/3.x [XR&CO'2001] -->
</HTML
>
