<HTML
><HEAD
><TITLE
>[Chapter 9] 9.3 Cursor-Based Records</TITLE
><META
NAME="DC.Creator"
CONTENT="Steven Feuerstein &amp; Bill Pribyl"><META
NAME="DC.Date"
CONTENT="2000-04-29T18:58:39Z"><META
NAME="DC.Format"
CONTENT="text/html"
SCHEME="MIME"><META
NAME="DC.Identifier"
CONTENT="O'Reilly and Associates CD-ROM-1-56592-335-9E"><META
NAME="DC.Language"
CONTENT="en-US"><META
NAME="DC.Publisher"
CONTENT="O'Reilly &amp; Associates, Inc."><META
NAME="DC.Source"
CONTENT="1-56592-335-9E"
SCHEME="ISBN"><META
NAME="DC.Subject.Keyword"
CONTENT="Oracle PL/SQL"><META
NAME="DC.Title"
CONTENT="Oracle PL/SQL Programming, 2nd Edition"><META
NAME="DC.Type"
CONTENT="Text.Monograph"><META
NAME="generator"
CONTENT="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><LINK
REL="stylesheet"
TYPE="text/css"
HREF="../style/style1.css"><LINK
REV="made"
HREF="mailto:online-books@oreilly.com"
TITLE="Online Books Comments"><LINK
REL="up"
HREF="ch09_01.htm"
TITLE="9. Records in PL/SQL"><LINK
REL="prev"
HREF="ch09_02.htm#SQL2-CH-9-SECT-2.1"
TITLE="9.2 Table-Based Records"><LINK
REL="next"
HREF="ch09_04.htm#SQL2-CH-9-SECT-4.1"
TITLE="9.4 Programmer-Defined Records"></HEAD
><BODY
><DIV
CLASS="htmlnav"
><H1
><IMG
SRC="gifs/smbanner.gif"
ALT="Oracle PL/SQL Programming, 2nd Edition"
USEMAP="#srchmap"
BORDER="0"></H1
><MAP
NAME="srchmap"
><AREA
SHAPE="RECT"
COORDS="0,0,466,65"
HREF="index.htm"
ALT="Oracle PL/SQL Programming, 2nd Edition"><AREA
SHAPE="RECT"
COORDS="467,0,514,18"
HREF="jobjects/fsearch.htm"
ALT="Search this book"></MAP
><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch09_02.htm#SQL2-CH-9-SECT-2.1"
TITLE="9.2 Table-Based Records"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 9.2 Table-Based Records"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><SPAN
CLASS="NAVTITLE"
><A
CLASS="chapter"
REL="up"
HREF="ch09_01.htm"
TITLE="9. Records in PL/SQL"
>Chapter 9<BR>Records in PL/SQL</A
></SPAN
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch09_04.htm#SQL2-CH-9-SECT-4.1"
TITLE="9.4 Programmer-Defined Records"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 9.4 Programmer-Defined Records"
BORDER="0"></A
></TD
></TR
></TABLE
>&nbsp;<HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"></DIV
><DIV
CLASS="sect1"
><H2
CLASS="sect1"
><A
CLASS="title"
NAME="SQL2-CH-9-SECT-3"
>9.3 Cursor-Based Records</A
></H2
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="ch09-idx-181193-1"
></A
><A
CLASS="indexterm"
NAME="ch09-idx-181193-2"
></A
> <A
CLASS="indexterm"
NAME="ch09-idx-181193-3"
></A
>A cursor-based record, or cursor record, is a record whose structure is drawn from the SELECT list of a cursor. (See <A
CLASS="xref"
HREF="ch06_01.htm"
>Chapter 6, <CITE
CLASS="chapter"
>Database Interaction and Cursors</CITE
></A
>, for more information on cursors.) Each field in the record corresponds to and has the same name as the column or aliased expression in the cursor's query. This relationship is illustrated by <A
CLASS="xref"
HREF="ch09_01.htm"
>Figure 9.1</A
>. </P
><P
CLASS="para"
>The same %ROWTYPE attribute used to declare table records is also used to declare a record for an explicitly declared cursor, as the following example illustrates: </P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>DECLARE
   /* Define the cursor */
   CURSOR comp_summary_cur IS
      SELECT C.company_id, name, city
        FROM company C, sales S
       WHERE c.company_id = s.company_id;

   /* Create a record based on that cursor */
   comp_summary_rec comp_summary_cur%ROWTYPE;
BEGIN</PRE
></BLOCKQUOTE
><P
CLASS="para"
>The general format of the cursor %ROWTYPE declaration is:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>&lt;record_name&gt; &lt;cursor_name&gt;%ROWTYPE;</PRE
></BLOCKQUOTE
><P
CLASS="para"
>where &lt;record_name&gt; is the name of the record and &lt;cursor_name&gt; is the name of the cursor upon which the record is based. This cursor must have been previously defined, in the same declaration section as the record, in an enclosing block, or in a package.<A
CLASS="indexterm"
NAME="AUTOID-8217"
></A
> </P
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="SQL2-CH-9-SECT-3.1"
>9.3.1 Choosing Columns for a Cursor Record</A
></H3
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="AUTOID-8221"
></A
>You could declare a cursor record with the same syntax as a table record, but you don't have to match a table's structure. A SELECT statement creates a "virtual table" with columns and expressions as the list of columns. A record based on that SELECT statement allows you to represent a row from this virtual table in exactly the same fashion as a true table record. The big difference is that I get to determine the fields in the record, as well as the names for those fields. Through the cursor you can, therefore, create special-purpose records tailored to a particular program and need. </P
><P
CLASS="para"
>The query for a cursor can contain all or only some of the columns from one or more tables. A cursor can also contain expressions or virtual columns in its select list. In addition, you can provide aliases for the columns and expressions in the select list of a cursor. These aliases effectively rename the fields in the cursor record. </P
><P
CLASS="para"
>In the following example I create a cursor against the rain forest history table for all records showing a greater than average loss of species in 1994. Then, for each record found, I execute the publicize_loss procedure to call attention to the problem and execute project_further_damage to come up with an analysis of future losses: </P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>DECLARE
   /*
   || Create a cursor and rename the columns to give them a more
   || specific meaning for this particular cursor and block of code.
   */
   CURSOR high_losses_cur IS
      SELECT country_code  dying_country_cd,
             size_in_acres shrinking_plot,
             species_lost  above_avg_loss
        FROM rain_forest_history
       WHERE species_lost &gt;
               (SELECT AVG (species_lost)
                  FROM rain_forest_history
                 WHERE TO_CHAR (analysis_date, 'YYYY') = '1994');

   /* Define the record for this cursor */
   high_losses_rec high_losses_cur%ROWTYPE;
BEGIN
   OPEN high_losses_cur;
   LOOP
      FETCH high_losses_cur INTO high_losses_rec;
      EXIT WHEN high_losses_cur%NOTFOUND;
      /*
      || Now when I reference one of the record's fields, I use the
      || name I gave that field in the cursor, not the original column
      || name from the table.
      */
      publicize_loss (high_losses_rec.dying_country_cd);
      project_further_damage (high_losses_rec.shrinking_plot);
   END LOOP;
   CLOSE high_losses_cur;
END;</PRE
></BLOCKQUOTE
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="SQL2-CH-9-SECT-3.2"
>9.3.2 Setting the Record's Column Names</A
></H3
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="AUTOID-8230"
></A
> <A
CLASS="indexterm"
NAME="AUTOID-8233"
></A
> <A
CLASS="indexterm"
NAME="AUTOID-8236"
></A
> <A
CLASS="indexterm"
NAME="AUTOID-8239"
></A
>The column aliases change the names of the fields in the record. In the above example, the customized column names are more descriptive of the matter at hand than the standard column names; the code becomes more readable as a result. </P
><P
CLASS="para"
>A cursor's query can also include calculated values or expressions; in those cases, you must provide an alias for that calculated value if you want to access it through a record. Otherwise, there is no way for PL/SQL to create a named field for that value in the record&nbsp;-- and that name is your handle to the data. Suppose, for example, I have a parameterized cursor and record defined as follows: </P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>CURSOR comp_performance_cur (id_in IN NUMBER) IS
   SELECT name, SUM (order_amount)
     FROM company
    WHERE company_id = id_in;
comp_performance_rec comp_performance_cur%ROWTYPE;</PRE
></BLOCKQUOTE
><P
CLASS="para"
>I can refer to the company name with standard dot notation:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>IF comp_performance_rec.name = 'ACME' THEN ...</PRE
></BLOCKQUOTE
><P
CLASS="para"
>But how can I refer to the sum of the order_amount values? I need to provide a name for this calculated column, as shown below: </P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>CURSOR comp_performance_cur (id_in IN NUMBER)
IS
   SELECT name, SUM (order_amount) tot_sales
     FROM company
    WHERE company_id = id_in;
comp_performance_rec comp_performance_cur%ROWTYPE;</PRE
></BLOCKQUOTE
><P
CLASS="para"
>I can now refer to the sum of the order_amount values as follows:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>IF comp_performance_rec.tot_sales &gt; 10000 THEN ...</PRE
></BLOCKQUOTE
><BLOCKQUOTE
CLASS="note"
><P
CLASS="para"
><STRONG
>NOTE:</STRONG
> Even though the same %ROWTYPE attribute is used in creating both table and cursor records and the declarations themselves look very similar, the record created from a table has a different record type from the record created from a cursor. Records of different types are restricted in how they can interact, a topic we will explore in the next section.<A
CLASS="indexterm"
NAME="AUTOID-8252"
></A
> <A
CLASS="indexterm"
NAME="AUTOID-8253"
></A
></P
></BLOCKQUOTE
></DIV
></DIV
><DIV
CLASS="htmlnav"
><P
></P
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch09_02.htm#SQL2-CH-9-SECT-2.1"
TITLE="9.2 Table-Based Records"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 9.2 Table-Based Records"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="book"
HREF="index.htm"
TITLE="Oracle PL/SQL Programming, 2nd Edition"
><IMG
SRC="../gifs/txthome.gif"
ALT="Oracle PL/SQL Programming, 2nd Edition"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch09_04.htm#SQL2-CH-9-SECT-4.1"
TITLE="9.4 Programmer-Defined Records"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 9.4 Programmer-Defined Records"
BORDER="0"></A
></TD
></TR
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
>9.2 Table-Based Records</TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="index"
HREF="index/idx_0.htm"
TITLE="Book Index"
><IMG
SRC="../gifs/index.gif"
ALT="Book Index"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
>9.4 Programmer-Defined Records</TD
></TR
></TABLE
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"></DIV
><IMG SRC="../gifs/smnavbar.gif"
USEMAP="#map"
BORDER="0"
ALT="The Oracle Library Navigation">

<P><font size="-1">
<a href="../copyrght.htm#copy">Copyright (c) 2000</a> O'Reilly &amp; Associates. All rights reserved.
</font></P>

<MAP NAME="map">

<AREA SHAPE="RECT"
COORDS="0,0,35,30"
HREF="../index.htm"
ALT="Library Home">

<AREA SHAPE="RECT"
COORDS="40,0,95,30"
HREF="index.htm"
ALT="Oracle PL/SQL Programming, 2nd. Ed.">

<AREA SHAPE="RECT"
COORDS="100,0,200,30"
HREF="../guide8i/index.htm"
ALT="Guide to Oracle 8i Features">

<AREA SHAPE="RECT"
COORDS="205,0,245,30"
HREF="../bipack/index.htm"
ALT="Oracle Built-in Packages">

<AREA SHAPE="RECT"
COORDS="250,0,320,30"
HREF="../advprog/index.htm"
ALT="Advanced PL/SQL Programming with Packages">

<AREA SHAPE="RECT"
COORDS="325,0,420,30"
HREF="../webapp/index.htm"
ALT="Oracle Web Applications">

<AREA SHAPE="RECT"
COORDS="425,0,490,30"
HREF="../langpkt/index.htm"
ALT="Oracle PL/SQL Language Pocket Reference">

<AREA SHAPE="RECT"
COORDS="495,0,570,30"
HREF="../bipkt/index.htm"
ALT="Oracle PL/SQL Built-ins Pocket Reference">
</MAP>

</BODY
>
<!-- Mirrored from liso.cs.pusan.ac.kr by HTTrack Website Copier/3.x [XR&CO'2001] -->
</HTML
>
