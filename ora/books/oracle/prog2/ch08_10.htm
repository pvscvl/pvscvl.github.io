<HTML
><HEAD
><TITLE
>[Chapter 8] 8.10 RAISE Nothing but Exceptions</TITLE
><META
NAME="DC.Creator"
CONTENT="Steven Feuerstein &amp; Bill Pribyl"><META
NAME="DC.Date"
CONTENT="2000-04-29T18:58:29Z"><META
NAME="DC.Format"
CONTENT="text/html"
SCHEME="MIME"><META
NAME="DC.Identifier"
CONTENT="O'Reilly and Associates CD-ROM-1-56592-335-9E"><META
NAME="DC.Language"
CONTENT="en-US"><META
NAME="DC.Publisher"
CONTENT="O'Reilly &amp; Associates, Inc."><META
NAME="DC.Source"
CONTENT="1-56592-335-9E"
SCHEME="ISBN"><META
NAME="DC.Subject.Keyword"
CONTENT="Oracle PL/SQL"><META
NAME="DC.Title"
CONTENT="Oracle PL/SQL Programming, 2nd Edition"><META
NAME="DC.Type"
CONTENT="Text.Monograph"><META
NAME="generator"
CONTENT="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><LINK
REL="stylesheet"
TYPE="text/css"
HREF="../style/style1.css"><LINK
REV="made"
HREF="mailto:online-books@oreilly.com"
TITLE="Online Books Comments"><LINK
REL="up"
HREF="ch08_01.htm"
TITLE="8. Exception Handlers"><LINK
REL="prev"
HREF="ch08_09.htm"
TITLE="8.9 Exception Handler as IF Statement"><LINK
REL="next"
HREF="ch09_01.htm"
TITLE="9. Records in PL/SQL"></HEAD
><BODY
><DIV
CLASS="htmlnav"
><H1
><IMG
SRC="gifs/smbanner.gif"
ALT="Oracle PL/SQL Programming, 2nd Edition"
USEMAP="#srchmap"
BORDER="0"></H1
><MAP
NAME="srchmap"
><AREA
SHAPE="RECT"
COORDS="0,0,466,65"
HREF="index.htm"
ALT="Oracle PL/SQL Programming, 2nd Edition"><AREA
SHAPE="RECT"
COORDS="467,0,514,18"
HREF="jobjects/fsearch.htm"
ALT="Search this book"></MAP
><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch08_09.htm"
TITLE="8.9 Exception Handler as IF Statement"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 8.9 Exception Handler as IF Statement"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><SPAN
CLASS="NAVTITLE"
><A
CLASS="chapter"
REL="up"
HREF="ch08_01.htm"
TITLE="8. Exception Handlers"
>Chapter 8<BR>Exception Handlers</A
></SPAN
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="chapter"
HREF="ch09_01.htm"
TITLE="9. Records in PL/SQL"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 9. Records in PL/SQL"
BORDER="0"></A
></TD
></TR
></TABLE
>&nbsp;<HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"></DIV
><DIV
CLASS="sect1"
><H2
CLASS="sect1"
><A
CLASS="title"
NAME="SQL2-CH-8-SECT-10"
>8.10 RAISE Nothing but Exceptions</A
></H2
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="ch08-idx-963078-1"
></A
><A
CLASS="indexterm"
NAME="ch08-idx-963078-2"
></A
> <A
CLASS="indexterm"
NAME="ch08-idx-963078-3"
></A
>Have you noticed that the RAISE statement acts in many ways like a GOTO statement? The GOTO statement in PL/SQL looks like this: </P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>GOTO label_name;</PRE
></BLOCKQUOTE
><P
CLASS="para"
>where label_name is the name of a label. This label is placed in a program as follows: </P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>&lt;&lt;label_name&gt;&gt;</PRE
></BLOCKQUOTE
><P
CLASS="para"
>When PL/SQL encounters a GOTO statement, it immediately shifts control to the first executable statement following the label (which must still be in the execution section of the PL/SQL block). The RAISE statement works much the same way: when PL/SQL encounters a RAISE, it immediately shifts control to the exception section, and then looks for a matching exception. </P
><P
CLASS="para"
>A very significant and fundamental difference between GOTO and RAISE, however, is that GOTO branches to another execution statement, whereas RAISE branches to the exception section. The RAISE statement, in other words, shifts the focus of the program from normal execution to "error handling mode." Both from the standpoint of code readability and also of maintenance, you should never use the RAISE statement as a substitute for a control structure, be it a GOTO or an IF statement. </P
><P
CLASS="para"
>If you have not tried to use RAISE in this way, you might think that I am building up a straw man in order to knock it down. Would that it were so. Just in the process of writing this book, I ran across several examples of this abuse of exception handling. Check out, for example, the function description for GET_GROUP_CHAR_CELL in Oracle Corporation's Oracle Forms Reference Volume 1. It offers a function called Is_Value_In_List, which returns the row number of the value if it is found in the record group, as an example of a way to use GET_GROUP_CHAR_CELL. </P
><P
CLASS="para"
>The central logic of Is_Value_In_List is shown in the following example. The function contains three different RAISE statements&nbsp;-- all of which raise the exit_function exception: </P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>1  FUNCTION Is_Value_In_List
2     (value VARCHAR2, rg_name VARCHAR2, rg_column VARCHAR2)
3     RETURN NUMBER
4  IS
5     Exit_Function EXCEPTION;
6  BEGIN
7     If bad-inputs THEN
8        RAISE Exit_Function;
9     END IF;
10
11    LOOP-through-record-group
12       IF match-found
13          RAISE Return_Value;
14       END IF;
15    END LOOP;
16
17    RAISE Exit_Function;
18
19 EXCEPTION
20    WHEN Return_Value THEN
21       RETURN row#;
22
23    WHEN Exit_Function THEN
24       RETURN 0;
25 END;</PRE
></BLOCKQUOTE
><P
CLASS="para"
>The first RAISE on line 8 is an appropriate use of an exception because we have an invalid data structure. The function should bail out. </P
><P
CLASS="para"
>The second RAISE on line 13 is, however, less justifiable. This RAISE is used to end the program and return the row in which the match was found. An exception is, in this case, used for successful completion. </P
><DIV
CLASS="sidebar"
><H4
CLASS="sidebar"
><A
CLASS="title"
NAME="AUTOID-7929"
>Exception Handling&nbsp;-- Quick Facts and Tips</A
></H4
><P
CLASS="para"
>Here are some facts and tips to remember about exception handling:</P
><UL
CLASS="itemizedlist"
><LI
CLASS="listitem"
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="AUTOID-7935"
></A
> <A
CLASS="indexterm"
NAME="AUTOID-7939"
></A
>The exception section of a PL/SQL block only handles exceptions raised in the execution section of that block. </P
></LI
><LI
CLASS="listitem"
><P
CLASS="para"
>An exception raised in the declaration section of a PL/SQL block is handled by the exception section of the enclosing block, if it exists. </P
></LI
><LI
CLASS="listitem"
><P
CLASS="para"
>An exception raised in the exception section of a PL/SQL block is handled by the exception section of the enclosing block, if it exists. </P
></LI
><LI
CLASS="listitem"
><P
CLASS="para"
>Use WHEN OTHERS when you want to trap and handle all exceptions in a PL/SQL block. </P
></LI
><LI
CLASS="listitem"
><P
CLASS="para"
>Once an exception is raised, the block's execution section is terminated and control is transferred to the exception section. You cannot return to that execution section after the exception is raised. </P
></LI
><LI
CLASS="listitem"
><P
CLASS="para"
>After an exception is handled, the next executable statement in the enclosing block is executed. </P
></LI
><LI
CLASS="listitem"
><P
CLASS="para"
>To handle a specific exception, it must have a name. You declare exceptions to give them names. </P
></LI
><LI
CLASS="listitem"
><P
CLASS="para"
>Once you have handled an exception, normal program execution continues. You are no longer in an "exception" situation. </P
></LI
></UL
></DIV
><P
CLASS="para"
>The third RAISE on line 17 is also questionable. This RAISE is the very last statement of the function. Now, to my mind, the last line of a function should be a RETURN statement. The whole point of the function, after all, is to return a value. In this case, however, the last line is an exception, because the author has structured the code so that if I got this far, I have not found a match. So raise the exception, right? Wrong. </P
><P
CLASS="para"
>"Row-not-found" is not an exception from the standpoint of the function. That condition should be considered one of the valid return values of a function that asks "Is value in list?" This function should be restructured so that the exception is raised only when there is a problem. </P
><P
CLASS="para"
>From the perspective of structured exception handling in PL/SQL, this function suffered from several weaknesses: </P
><DL
CLASS="variablelist"
><DT
CLASS="term"
><EM
CLASS="emphasis"
>Poorly named exceptions</EM
></DT
><DD
CLASS="listitem"
><P
CLASS="para"
>The exception names exit_function and return_value describe actions, rather than error conditions. The name of an exception should describe the error which took place. </P
></DD
><DT
CLASS="term"
><EM
CLASS="emphasis"
>Exceptions for valid outcomes</EM
></DT
><DD
CLASS="listitem"
><P
CLASS="para"
>By using these "action" names, the developers are actually being very open about how they are manipulating the exception handler. They say, "I use exceptions to implement logic branching." We should say to them, "Don't do it! Use the constructs PL/SQL provides to handle this code in a structured way." </P
></DD
></DL
><P
CLASS="para"
>If you encounter either of these conditions in code you are writing or reviewing, take a step back. Examine the logical flow of the program and see how you can use the standard control structures (IF, LOOP, and perhaps even GOTO) to accomplish your task. The result will be much more readable and maintainable code. <A
CLASS="indexterm"
NAME="AUTOID-7972"
></A
> <A
CLASS="indexterm"
NAME="AUTOID-7973"
></A
> <A
CLASS="indexterm"
NAME="AUTOID-7974"
></A
> </P
></DIV
><DIV
CLASS="htmlnav"
><P
></P
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch08_09.htm"
TITLE="8.9 Exception Handler as IF Statement"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 8.9 Exception Handler as IF Statement"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="book"
HREF="index.htm"
TITLE="Oracle PL/SQL Programming, 2nd Edition"
><IMG
SRC="../gifs/txthome.gif"
ALT="Oracle PL/SQL Programming, 2nd Edition"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="chapter"
HREF="ch09_01.htm"
TITLE="9. Records in PL/SQL"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 9. Records in PL/SQL"
BORDER="0"></A
></TD
></TR
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
>8.9 Exception Handler as IF Statement</TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="index"
HREF="index/idx_0.htm"
TITLE="Book Index"
><IMG
SRC="../gifs/index.gif"
ALT="Book Index"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
>9. Records in PL/SQL</TD
></TR
></TABLE
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"></DIV
><IMG SRC="../gifs/smnavbar.gif"
USEMAP="#map"
BORDER="0"
ALT="The Oracle Library Navigation">

<P><font size="-1">
<a href="../copyrght.htm#copy">Copyright (c) 2000</a> O'Reilly &amp; Associates. All rights reserved.
</font></P>

<MAP NAME="map">

<AREA SHAPE="RECT"
COORDS="0,0,35,30"
HREF="../index.htm"
ALT="Library Home">

<AREA SHAPE="RECT"
COORDS="40,0,95,30"
HREF="index.htm"
ALT="Oracle PL/SQL Programming, 2nd. Ed.">

<AREA SHAPE="RECT"
COORDS="100,0,200,30"
HREF="../guide8i/index.htm"
ALT="Guide to Oracle 8i Features">

<AREA SHAPE="RECT"
COORDS="205,0,245,30"
HREF="../bipack/index.htm"
ALT="Oracle Built-in Packages">

<AREA SHAPE="RECT"
COORDS="250,0,320,30"
HREF="../advprog/index.htm"
ALT="Advanced PL/SQL Programming with Packages">

<AREA SHAPE="RECT"
COORDS="325,0,420,30"
HREF="../webapp/index.htm"
ALT="Oracle Web Applications">

<AREA SHAPE="RECT"
COORDS="425,0,490,30"
HREF="../langpkt/index.htm"
ALT="Oracle PL/SQL Language Pocket Reference">

<AREA SHAPE="RECT"
COORDS="495,0,570,30"
HREF="../bipkt/index.htm"
ALT="Oracle PL/SQL Built-ins Pocket Reference">
</MAP>

</BODY
>
<!-- Mirrored from liso.cs.pusan.ac.kr by HTTrack Website Copier/3.x [XR&CO'2001] -->
</HTML
>
