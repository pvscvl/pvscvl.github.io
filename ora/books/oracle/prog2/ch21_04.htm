<HTML
><HEAD
><TITLE
>[Chapter 21] 21.4 Mapping Parameters</TITLE
><META
NAME="DC.Creator"
CONTENT="Steven Feuerstein &amp; Bill Pribyl"><META
NAME="DC.Date"
CONTENT="2000-04-29T19:10:30Z"><META
NAME="DC.Format"
CONTENT="text/html"
SCHEME="MIME"><META
NAME="DC.Identifier"
CONTENT="O'Reilly and Associates CD-ROM-1-56592-335-9E"><META
NAME="DC.Language"
CONTENT="en-US"><META
NAME="DC.Publisher"
CONTENT="O'Reilly &amp; Associates, Inc."><META
NAME="DC.Source"
CONTENT="1-56592-335-9E"
SCHEME="ISBN"><META
NAME="DC.Subject.Keyword"
CONTENT="Oracle PL/SQL"><META
NAME="DC.Title"
CONTENT="Oracle PL/SQL Programming, 2nd Edition"><META
NAME="DC.Type"
CONTENT="Text.Monograph"><META
NAME="generator"
CONTENT="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><LINK
REL="stylesheet"
TYPE="text/css"
HREF="../style/style1.css"><LINK
REV="made"
HREF="mailto:online-books@oreilly.com"
TITLE="Online Books Comments"><LINK
REL="up"
HREF="ch21_01.htm"
TITLE="21. External Procedures"><LINK
REL="prev"
HREF="ch21_03.htm#SQL2-CH-21-SECT-3.2"
TITLE="21.3 Syntax for External Procedures"><LINK
REL="next"
HREF="ch21_05.htm"
TITLE="21.5 OCI Service Routines"></HEAD
><BODY
><DIV
CLASS="htmlnav"
><H1
><IMG
SRC="gifs/smbanner.gif"
ALT="Oracle PL/SQL Programming, 2nd Edition"
USEMAP="#srchmap"
BORDER="0"></H1
><MAP
NAME="srchmap"
><AREA
SHAPE="RECT"
COORDS="0,0,466,65"
HREF="index.htm"
ALT="Oracle PL/SQL Programming, 2nd Edition"><AREA
SHAPE="RECT"
COORDS="467,0,514,18"
HREF="jobjects/fsearch.htm"
ALT="Search this book"></MAP
><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch21_03.htm#SQL2-CH-21-SECT-3.2"
TITLE="21.3 Syntax for External Procedures"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 21.3 Syntax for External Procedures"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><SPAN
CLASS="NAVTITLE"
><A
CLASS="chapter"
REL="up"
HREF="ch21_01.htm"
TITLE="21. External Procedures"
>Chapter 21<BR>External Procedures</A
></SPAN
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch21_05.htm"
TITLE="21.5 OCI Service Routines"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 21.5 OCI Service Routines"
BORDER="0"></A
></TD
></TR
></TABLE
>&nbsp;<HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"></DIV
><DIV
CLASS="sect1"
><H2
CLASS="sect1"
><A
CLASS="title"
NAME="SQL2-CH-21-SECT-4"
>21.4 Mapping Parameters</A
></H2
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="ch21-idx-7607-1"
></A
><A
CLASS="indexterm"
NAME="ch21-idx-7607-2"
></A
>Consider for a moment the problems of exchanging data between PL/SQL and C. PL/SQL has its own set of datatypes that are only somewhat similar to those you find in 3GLs. PL/SQL variables can be NULL and subject to three-valued truth table logic; C variables have no equivalent concept. Your C library might not know which national language character set you're using to express alphanumeric values. And should your C functions expect a given argument by value, or by reference (pointer)? </P
><P
CLASS="para"
>Given these hurdles, it would be easy to conclude that the job is impossible or, at best, difficult. The good news, though, is that Oracle has thought of all these issues already, and has built a lot of options into the PARAMETERS clause to cover the possibilities. So the programmer's key task is to figure out how to apply the options to a given situation. </P
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="SQL2-CH-21-SECT-4.1"
>21.4.1 Datatype Conversion</A
></H3
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="ch21-idx-7613-1"
></A
><A
CLASS="indexterm"
NAME="ch21-idx-7613-2"
></A
>Let's look first at the issue of datatype conversions. Oracle has kindly provided a useful set of default type conversions. <A
CLASS="indexterm"
NAME="AUTOID-19812"
></A
> <A
CLASS="indexterm"
NAME="AUTOID-19814"
></A
> Each PL/SQL datatype maps to an "external datatype," which in turn maps to an allowed set of C types as illustrated below: </P
><TABLE
CLASS="simplelist"
BORDER="0"
><TR
><TD
CLASS="member"
>PL/SQL types &#58213; External types &#58213; C types</TD
></TR
></TABLE
><P
CLASS="para"
>The external datatypes, which are included in the <A
CLASS="indexterm"
NAME="ch21-idx-7617-1"
></A
>PARAMETERS clause, are case-insensitive. In some cases, the external datatypes have the same name as the C type, but in some others, they do not. For example, the STRING external datatype maps to a char * in C. </P
><P
CLASS="para"
>As another example, if you pass a PL/SQL variable of type PLS_INTEGER, the corresponding default external type is INT, which maps to an int datatype in C. Or if you prefer, you can override this conversion with an explicit mapping to other external types such as SHORT (maps to short in C) or UNSIGNED INT (maps to unsigned int in C). </P
><P
CLASS="para"
><A
CLASS="xref"
HREF="ch21_04.htm#ch21-26-fm2xml"
>Table 21.1</A
> lists all the default datatype conversions, as well as alternative conversions, allowed by Oracle's PL/SQL to C interface.<A
CLASS="indexterm"
NAME="AUTOID-19825"
></A
>For brevity, in the cases where the external datatype and the C datatype are the same except for case sensitivity, we have listed the type name only once, in lowercase. Note that the allowable conversions depend on both the datatype and the mode of the PL/SQL formal parameter. </P
><BR><TABLE
CLASS="table"
BORDER="1"
CELLPADDING="3"
><CAPTION
CLASS="table"
><A
CLASS="title"
NAME="SQL2-CH-21-TABLE-4"
>Table 21.1: Legal Mappings of PL/SQL and C Datatypes </A
></CAPTION
><THEAD
CLASS="thead"
><TR
CLASS="row"
VALIGN="TOP"
><TH
CLASS="entry"
ALIGN="LEFT"
ROWSPAN="1"
COLSPAN="1"
></TH
><TH
CLASS="entry"
ALIGN="LEFT"
ROWSPAN="1"
COLSPAN="3"
> <P
CLASS="para"
>C Datatype if PL/SQL Formal Parameters are...</P
> </TH
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TH
CLASS="entry"
ALIGN="LEFT"
ROWSPAN="1"
COLSPAN="1"
> <P
CLASS="para"
>PL/SQL Datatype</P
> </TH
><TH
CLASS="entry"
ALIGN="LEFT"
ROWSPAN="1"
COLSPAN="1"
> <P
CLASS="para"
>IN or RETURN</P
> </TH
><TH
CLASS="entry"
ALIGN="LEFT"
ROWSPAN="1"
COLSPAN="1"
> <P
CLASS="para"
>IN BY REFERENCE or RETURN BY REFERENCE </P
> </TH
><TH
CLASS="entry"
ALIGN="LEFT"
ROWSPAN="1"
COLSPAN="1"
> <P
CLASS="para"
><A
CLASS="indexterm"
NAME="AUTOID-19850"
></A
><A
CLASS="indexterm"
NAME="AUTOID-19853"
></A
>IN OUT or OUT </P
> </TH
></TR
></THEAD
><TBODY
CLASS="tbody"
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
> <P
CLASS="para"
>"Long" integer family: BINARY_INTEGER, BOOLEAN,</P
>  <P
CLASS="para"
>PLS_INTEGER</P
> </TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
> <P
CLASS="para"
>int, char, unsigned char, short, unsigned short, unsigned int, long, unsigned long, sb1, ub1, sb2, ub2, sb4, ub4, size_t </P
> </TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
> <P
CLASS="para"
>Same list of types as at left, but use a pointer (for example, the default is int * rather than int) </P
> </TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
> <P
CLASS="para"
>Same list of types as at far left, but use a pointer (for example, the default is int * rather than int) </P
> </TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
> <P
CLASS="para"
>"Short" integer family: NATURAL, NATURALN, POSITIVE, POSITIVEN, SIGNTYPE </P
> </TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
> <P
CLASS="para"
>Same as above, except default is unsigned int</P
> </TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
> <P
CLASS="para"
>Same as above, except default is unsigned int *</P
> </TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
> <P
CLASS="para"
>Same as above, except default is unsigned int *</P
> </TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
> <P
CLASS="para"
>"Character" family: VARCHAR2, CHAR, LONG, VARCHAR, CHARACTER, ROWID </P
> </TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
> <P
CLASS="para"
>STRING[<A
CLASS="footnote"
HREF="#CH-21-TBL-FTNT-1"
>6</A
>] </P
> </TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
> <P
CLASS="para"
>STRING[<A
CLASS="footnote"
HREF="#CH-21-TBL-FTNT-1"
>6</A
>]</P
> </TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
> <P
CLASS="para"
>STRING[<A
CLASS="footnote"
HREF="#CH-21-TBL-FTNT-1"
>6</A
>]</P
> </TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
> <P
CLASS="para"
>DOUBLE PRECISION</P
> </TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
> <P
CLASS="para"
>Double</P
> </TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
> <P
CLASS="para"
>Double</P
> </TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
> <P
CLASS="para"
>Double</P
> </TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
> <P
CLASS="para"
>FLOAT, REAL</P
> </TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
> <P
CLASS="para"
>Float</P
> </TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
> <P
CLASS="para"
>Float</P
> </TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
> <P
CLASS="para"
>Float</P
> </TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
> <P
CLASS="para"
>RAW, LONG RAW</P
> </TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
> <P
CLASS="para"
>RAW[<A
CLASS="footnote"
HREF="#CH-21-TBL-FTNT-2"
>7</A
>] </P
> </TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
> <P
CLASS="para"
>RAW[<A
CLASS="footnote"
HREF="#CH-21-TBL-FTNT-2"
>7</A
>]</P
> </TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
> <P
CLASS="para"
>RAW[<A
CLASS="footnote"
HREF="#CH-21-TBL-FTNT-2"
>7</A
>]</P
> </TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
> <P
CLASS="para"
>BFILE, BLOB, CLOB</P
> </TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
> <P
CLASS="para"
>OCILOBLOCATOR[<A
CLASS="footnote"
HREF="#AUTOID-19925"
>8</A
>] </P
> </TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
> <P
CLASS="para"
>OCILOBLOCATOR</P
> </TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
> <P
CLASS="para"
>OCILOBLOCATOR</P
> </TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
> <P
CLASS="para"
>"User-defined" family: records, collections, objects, cursor variables </P
> </TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
> <P
CLASS="para"
>Disallowed in this Oracle release</P
> </TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
> <P
CLASS="para"
>Disallowed in this Oracle release</P
> </TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
> <P
CLASS="para"
>Disallowed in this Oracle release</P
> </TD
></TR
></TBODY
></TABLE
><BLOCKQUOTE
CLASS="footnote"
><DIV
CLASS="footnote"
><P
CLASS="para"
><A
CLASS="footnote"
NAME="CH-21-TBL-FTNT-1"
>[6]</A
> In the PARAMETERS clause, use the external datatype STRING, but in the C specification, use char *.</P
></DIV
><DIV
CLASS="footnote"
><P
CLASS="para"
><A
CLASS="footnote"
NAME="CH-21-TBL-FTNT-2"
>[7]</A
> In the PARAMETERS clause, use the external datatype RAW, but in the C specification, use unsigned char *.</P
></DIV
><DIV
CLASS="footnote"
><P
CLASS="para"
><A
CLASS="footnote"
NAME="AUTOID-19925"
>[8]</A
> In the PARAMETERS clause, use the external datatype OCILOBLOCATOR; in the C specification, use OciLobLocator * for parameters of mode IN, RETURN, IN BY REFERENCE, or RETURN BY REFERENCE; use OciLobLocator ** for IN OUT or OUT.</P
></DIV
></BLOCKQUOTE
><P
CLASS="para"
>In some simple cases where you are passing only numeric arguments and where the defaults are acceptable, you can omit the PARAMETERS clause entirely. </P
><P
CLASS="para"
>By contrast, any time you return a character parameter from an external procedure, you may need to include an explicit PARAMETERS clause. This is so that you can supply a "property" parameter such as <A
CLASS="indexterm"
NAME="AUTOID-19942"
></A
><A
CLASS="indexterm"
NAME="AUTOID-19944"
></A
><A
CLASS="indexterm"
NAME="AUTOID-19946"
></A
>INDICATOR, LENGTH, or MAXLEN that will tell PL/SQL the actual and maximum size of the character buffer. These properties apply both to arguments and to function return values. As it turns out, LENGTH is only needed for RAW datatypes since strings are null-terminated. </P
><P
CLASS="para"
>For example, if you had a generic procedure which accepted an operating system command and returned output from that command, your procedure body might look like this (notice the PARAMETERS clause): </P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>PROCEDURE run_command
   (command IN VARCHAR2,
    result OUT VARCHAR2)
IS EXTERNAL
   LIBRARY libshell_l
   LANGUAGE C
   PARAMETERS
      (command STRING,
       result STRING,
       result INDICATOR,
       result MAXLEN);</PRE
></BLOCKQUOTE
><P
CLASS="para"
>INDICATOR and MAXLEN are two of five properties with which we can pass supplemental information for any given PL/SQL parameter. We pass the "indicator" in addition to the variable if it's important to detect whether the value is null. Once we specify that the indicator should be included, Oracle sets and interprets this value properly on the PL/SQL side. Our C application, though, will need to get and set this value programmatically. MAXLEN, on the other hand, is a read-only property that gets set automatically by the PL/SQL environment; MAXLEN communicates to the C program the maximum storage that can be used for an IN OUT, OUT, or RETURN parameter. </P
><P
CLASS="para"
>Each piece of supplemental information we want to exchange will be passed as a parameter, and will appear both in the PARAMETERS clause and in the C language function specification.<A
CLASS="indexterm"
NAME="AUTOID-19952"
></A
> <A
CLASS="indexterm"
NAME="AUTOID-19953"
></A
> </P
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="SQL2-CH-21-SECT-4.2"
>21.4.2 More Syntax: The PARAMETERS Clause</A
></H3
><P
CLASS="para"
>Three types of entries may appear in the PARAMETERS clause: </P
><UL
CLASS="itemizedlist"
><LI
CLASS="listitem"
><P
CLASS="para"
>Formal parameters of the PL/SQL module</P
></LI
><LI
CLASS="listitem"
><P
CLASS="para"
>The function return value</P
></LI
><LI
CLASS="listitem"
><P
CLASS="para"
>A placeholder for the context area</P
></LI
></UL
><P
CLASS="para"
>The syntax you use to map a PL/SQL formal parameter to a C parameter is: </P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>&lt;parameter name&gt; [&lt;property&gt;] [BY REFERENCE] [&lt;external datatype&gt;]</PRE
></BLOCKQUOTE
><P
CLASS="para"
>For function return values, you use the keyword RETURN in lieu of a parameter name. RETURN must appear in the last position in the PARAMETERS clause: </P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
><B
CLASS="emphasis.bold"
>RETURN</B
> &lt;property&gt; [BY REFERENCE] [&lt;external datatype&gt;]</PRE
></BLOCKQUOTE
><P
CLASS="para"
>Use the third variation of the external PARAMETER<B
CLASS="emphasis.bold"
> </B
>clause when you have specified WITH CONTEXT. In this case, the parameter is simply </P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>CONTEXT</PRE
></BLOCKQUOTE
><P
CLASS="para"
>By convention, if you have specified WITH CONTEXT, you should make CONTEXT the first argument. That is its default location if you default all of the parameter mappings. </P
><P
CLASS="para"
>Parameter entries have the following meanings:</P
><DL
CLASS="variablelist"
><DT
CLASS="term"
>parameter name</DT
><DD
CLASS="listitem"
><P
CLASS="para"
>The name of the parameter as specified in the formal parameter list of the PL/SQL module. This name is not necessarily the name of the formal parameter in the C language routine. However, parameters in the PL/SQL parameter list must match one-for-one, in order, those in the C language specification. </P
></DD
><DT
CLASS="term"
>property</DT
><DD
CLASS="listitem"
><P
CLASS="para"
>One of the following: INDICATOR, LENGTH, MAXLEN, CHARSETID, or CHARSETFORM. These are described in <A
CLASS="xref"
HREF="ch21_04.htm#ch21-26-fm2xml"
>Section 21.4.3, "Properties"</A
>. </P
></DD
><DT
CLASS="term"
>BY REFERENCE</DT
><DD
CLASS="listitem"
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="AUTOID-19988"
></A
> <A
CLASS="indexterm"
NAME="AUTOID-19991"
></A
>Pass the parameter by reference. In other words, the module in the shared library is expecting a pointer to the parameter rather than its value. BY REFERENCE only has meaning for scalar IN parameters that are not strings, such as BINARY_INTEGER, PLS_INTEGER, FLOAT, DOUBLE PRECISION, and REAL. All others (IN OUT and OUT parameters, as well as IN parameters of type STRING) are <EM
CLASS="emphasis"
>always </EM
>passed by reference, and the corresponding C prototype must specify a pointer. </P
></DD
></DL
><BLOCKQUOTE
CLASS="warning"
><P
CLASS="para"
><STRONG
>WARNING:</STRONG
> The documentation for Oracle 8.0.3 erroneously states that the syntax for this option is "BY REF". </P
></BLOCKQUOTE
><DL
CLASS="variablelist"
><DT
CLASS="term"
>external datatype</DT
><DD
CLASS="listitem"
><P
CLASS="para"
>The C language datatype. If this is omitted, the external datatype will default as indicated in <A
CLASS="xref"
HREF="ch21_04.htm#ch21-26-fm2xml"
>Table 21.1</A
>. Most conversions that make sense are legal; see the table for additional details. </P
></DD
></DL
><BLOCKQUOTE
CLASS="tip"
><P
CLASS="para"
><STRONG
>TIP:</STRONG
> When you are mapping parameters, you <EM
CLASS="emphasis"
>must</EM
> use positional notation in the PARAMETERS clause. That is, the parameters you supply in this clause must match those in the C language function specification one-for-one, and must appear in the same order.</P
></BLOCKQUOTE
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="SQL2-CH-21-SECT-4.3"
>21.4.3 Properties</A
></H3
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="ch21-idx-7622-1"
></A
><A
CLASS="indexterm"
NAME="ch21-idx-7622-2"
></A
>This section describes each possible property you can specify in a PARAMETERS clause. </P
><DIV
CLASS="sect3"
><H4
CLASS="sect3"
><A
CLASS="title"
NAME="ch21-22-fm2xml"
>21.4.3.1 <A
CLASS="indexterm"
NAME="AUTOID-20017"
></A
> INDICATOR property</A
></H4
><DL
CLASS="variablelist"
><DT
CLASS="term"
>What it is</DT
><DD
CLASS="listitem"
><P
CLASS="para"
>"Flag" to denote whether the parameter is null</P
></DD
><DT
CLASS="term"
>Allowed External Types</DT
><DD
CLASS="listitem"
><P
CLASS="para"
>short (the default), int, long</P
></DD
><DT
CLASS="term"
>Allowed PL/SQL Types</DT
><DD
CLASS="listitem"
><P
CLASS="para"
>All scalars</P
></DD
><DT
CLASS="term"
>Allowed PL/SQL Modes</DT
><DD
CLASS="listitem"
><P
CLASS="para"
>IN, IN OUT, OUT, RETURN</P
></DD
><DT
CLASS="term"
>Call Mode</DT
><DD
CLASS="listitem"
><P
CLASS="para"
>By <EM
CLASS="emphasis"
>value</EM
> for IN parameters (unless BY REFERENCE specified), and by <EM
CLASS="emphasis"
>reference</EM
> for IN OUT, OUT, and RETURN variables </P
></DD
></DL
><P
CLASS="para"
>You can apply this property to any parameter, in any mode, including RETURNs. If you omit an indicator, PL/SQL is supposed to think that your external routine will always be non-null (but it's not that simple; see the sidebar <A
CLASS="xref"
HREF="ch21_04.htm#ch21-26-fm2xml"
>the sidebar "Indicating Without Indicators?"</A
>). </P
><P
CLASS="para"
>When you send an IN variable to the external procedure, and you've associated an indicator, Oracle will set its value automatically. However, if your C module is returning a value in a RETURN or OUT parameter and an indicator, your C code must set the indicator value. </P
><P
CLASS="para"
>For an IN parameter, an example of the indicator parameter in your C function might be: </P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>sb2 pIndicatorFoo</PRE
></BLOCKQUOTE
><P
CLASS="para"
>Or for an <A
CLASS="indexterm"
NAME="AUTOID-20048"
></A
>IN OUT parameter, the indicator might be: </P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>sb2 *pIndicatorFoo</PRE
></BLOCKQUOTE
><P
CLASS="para"
>In the body of your C function, you should use the #define constants OCI_IND_NOTNULL and OCI_IND_NULL supplied in <EM
CLASS="emphasis"
>oro.h</EM
> as values for the NOT NULL and NULL values. These are defined in <EM
CLASS="emphasis"
>oro.h</EM
> as: </P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>#define OCI_IND_NOTNULL 0                    /* not NULL */
#define OCI_IND_NULL (-1)                    /* NULL */</PRE
></BLOCKQUOTE
><DIV
CLASS="sidebar"
><H4
CLASS="sidebar"
><A
CLASS="title"
NAME="SQL2-CH-21-TABLE-6"
>Indicating Without Indicators?</A
></H4
><P
CLASS="para"
>What happens if you don't specify an indicator variable for a string and then return an empty C string? We wrote a short test program to find out: </P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>void myfunc(char *outbuff)
{
   outbuff[0] = '\0';
}</PRE
></BLOCKQUOTE
><P
CLASS="para"
>When invoked as an external procedure, PL/SQL interprets this parameter value as a NULL! The reason appears to be that the STRING external type is special; you can also indicate a NULL value to Oracle by passing a string of length 2 where the first byte is '\0'. (This only works if you <EM
CLASS="emphasis"
>omit</EM
> a LENGTH parameter.) </P
><P
CLASS="para"
>But don't rely on this little-known behavior. Always use an indicator! </P
></DIV
></DIV
><DIV
CLASS="sect3"
><H4
CLASS="sect3"
><A
CLASS="title"
NAME="ch21-24-fm2xml"
>21.4.3.2 <A
CLASS="indexterm"
NAME="ch21-idx-7636-1"
></A
> LENGTH property</A
></H4
><DL
CLASS="variablelist"
><DT
CLASS="term"
>What it is</DT
><DD
CLASS="listitem"
><P
CLASS="para"
>Statistic indicating the number of characters in a character parameter</P
></DD
><DT
CLASS="term"
>Allowed External Types</DT
><DD
CLASS="listitem"
><P
CLASS="para"
>int (the default), short, unsigned short, unsigned int, long, unsigned long </P
></DD
><DT
CLASS="term"
>Allowed PL/SQL Types</DT
><DD
CLASS="listitem"
><P
CLASS="para"
>VARCHAR2, CHAR, RAW, LONG RAW</P
></DD
><DT
CLASS="term"
>Allowed PL/SQL Modes</DT
><DD
CLASS="listitem"
><P
CLASS="para"
>IN, IN OUT, OUT, RETURN</P
></DD
><DT
CLASS="term"
>Call Mode</DT
><DD
CLASS="listitem"
><P
CLASS="para"
>By <EM
CLASS="emphasis"
>value</EM
> for IN parameters (unless BY REFERENCE specified), and by <EM
CLASS="emphasis"
>reference</EM
> for IN OUT, OUT, and RETURN variables </P
></DD
></DL
><P
CLASS="para"
>The Oracle documentation states that you <EM
CLASS="emphasis"
>must </EM
>include the LENGTH property for CHAR, RAW, LONG RAW, or VARCHAR2 parameters. In fact, LENGTH is only mandatory for RAW and LONGRAW. CHAR and VARCHAR2 are, in fact, passed on as STRING parameters for which the LENGTH parameter is redundant (since STRINGs follow null-termination semantics). For the external RAW datatype, a LENGTH parameter is necessary to read the length of the RAW data for IN and IN OUT variable modes, and to tell PL/SQL the length of the raw data for IN OUT, OUT, and RETURN variable modes. </P
><P
CLASS="para"
>For an IN parameter, an example of the indicator parameter in your C function might be: </P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>int pLenFoo</PRE
></BLOCKQUOTE
><P
CLASS="para"
>Or for an OUT or IN OUT parameter:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>int *pLenFoo<A
CLASS="indexterm"
NAME="AUTOID-20096"
></A
></PRE
></BLOCKQUOTE
></DIV
><DIV
CLASS="sect3"
><H4
CLASS="sect3"
><A
CLASS="title"
NAME="ch21-25-fm2xml"
>21.4.3.3 <A
CLASS="indexterm"
NAME="AUTOID-20099"
></A
> MAXLEN property</A
></H4
><DL
CLASS="variablelist"
><DT
CLASS="term"
>What it is</DT
><DD
CLASS="listitem"
><P
CLASS="para"
>Statistic indicating the <EM
CLASS="emphasis"
>maximum</EM
> number of characters in a string parameter </P
></DD
><DT
CLASS="term"
>Allowed External Types</DT
><DD
CLASS="listitem"
><P
CLASS="para"
>int (the default), short, unsigned short, unsigned int, long, unsigned long </P
></DD
><DT
CLASS="term"
>Allowed PL/SQL Types</DT
><DD
CLASS="listitem"
><P
CLASS="para"
>VARCHAR2, CHAR, RAW, LONG RAW</P
></DD
><DT
CLASS="term"
>Allowed PL/SQL Modes</DT
><DD
CLASS="listitem"
><P
CLASS="para"
>IN OUT, OUT, RETURN</P
></DD
><DT
CLASS="term"
>Call Mode</DT
><DD
CLASS="listitem"
><P
CLASS="para"
>By reference </P
></DD
></DL
><P
CLASS="para"
>MAXLEN is applied to IN OUT or OUT parameters and to no other mode. If you attempt to use it for an IN, you'll get a compile-time error "PLS-00250: Incorrect Usage of MAXLEN in parameters clause." </P
><P
CLASS="para"
>Unlike the LENGTH parameter, the MAXLEN data is always passed by reference. </P
><P
CLASS="para"
>An example of the C formal parameter follows:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>int *pMaxLenFoo</PRE
></BLOCKQUOTE
></DIV
><DIV
CLASS="sect3"
><H4
CLASS="sect3"
><A
CLASS="title"
NAME="ch21-26-fm2xml"
>21.4.3.4 CHARSETID and <A
CLASS="indexterm"
NAME="AUTOID-20129"
></A
> <A
CLASS="indexterm"
NAME="AUTOID-20131"
></A
> CHARSETFORM properties</A
></H4
><DL
CLASS="variablelist"
><DT
CLASS="term"
>What it is</DT
><DD
CLASS="listitem"
><P
CLASS="para"
>Flags denoting information about the character set</P
></DD
><DT
CLASS="term"
>Allowed External Types</DT
><DD
CLASS="listitem"
><P
CLASS="para"
>unsigned int (the default), unsigned short, unsigned long</P
></DD
><DT
CLASS="term"
>Allowed PL/SQL Types</DT
><DD
CLASS="listitem"
><P
CLASS="para"
>VARCHAR2, CHAR, CLOB</P
></DD
><DT
CLASS="term"
>Allowed PL/SQL Modes</DT
><DD
CLASS="listitem"
><P
CLASS="para"
>IN, IN OUT, OUT, RETURN</P
></DD
><DT
CLASS="term"
>Call Mode</DT
><DD
CLASS="listitem"
><P
CLASS="para"
>By reference</P
></DD
></DL
><P
CLASS="para"
>If you are passing data to the external procedure which is expressed in a nondefault character set, these properties will let you communicate its ID and form to the called C program. The values are read-only and should not be modified by the called program. For more information about national language support and how to accommodate it in an OCI program, refer to Oracle's <CITE
CLASS="citetitle"
>Programmer's Guide to the Oracle Call Interface</CITE
>.<A
CLASS="indexterm"
NAME="AUTOID-20156"
></A
> <A
CLASS="indexterm"
NAME="AUTOID-20157"
></A
> </P
></DIV
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="SQL2-CH-21-SECT-4.4"
>21.4.4 Correct Declaration of Properties</A
></H3
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="ch21-idx-7627-1"
></A
> <A
CLASS="indexterm"
NAME="ch21-idx-7627-2"
></A
> <A
CLASS="indexterm"
NAME="ch21-idx-7627-3"
></A
>With one exception, every parameter-property combination that you list in the PARAMETERS clause must have an entry in the C function specification. For example, if you had the following body: </P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>CREATE OR REPLACE PACKAGE BODY ext_utils
AS
   PROCEDURE my_foo (foo IN OUT VARCHAR2)
   IS EXTERNAL
      LIBRARY foobar_l
      PARAMETERS
         (foo STRING,
          foo MAXLEN,
          foo LENGTH);
END ext_utils;</PRE
></BLOCKQUOTE
><P
CLASS="para"
>then the C prototype would look like this:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>void myFunction
   (char *pFoo,
    int *pMaxLenFoo,
    int *pLenFoo );</PRE
></BLOCKQUOTE
><P
CLASS="para"
>Notice that myFunction is declared void, which is appropriate when mapping to a PL/SQL procedure rather than a function. Also, since this PARAMETERS clause includes no explicit datatypes, we will get the default type mapping: </P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>STRING &#8594; char *
MAXLEN &#8594; int *
LENGTH &#8594; int *</PRE
></BLOCKQUOTE
><P
CLASS="para"
>Char is typedefined as an unsigned char in <I
CLASS="filename"
>oratypes.h</I
>. </P
><P
CLASS="para"
>The exception to the one-to-one correspondence rule occurs when explicitly declaring properties of the function return value. As an example, look at the parameter list below: </P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>PARAMETERS
   (RETURN INT)</PRE
></BLOCKQUOTE
><P
CLASS="para"
>The corresponding C prototype could be:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>int someFunction();</PRE
></BLOCKQUOTE
><P
CLASS="para"
>(OK, it's not really an exception; it's more a question of<A
CLASS="indexterm"
NAME="AUTOID-20182"
></A
> <A
CLASS="indexterm"
NAME="AUTOID-20183"
></A
> <A
CLASS="indexterm"
NAME="AUTOID-20184"
></A
> semantics.)<A
CLASS="indexterm"
NAME="AUTOID-20185"
></A
> <A
CLASS="indexterm"
NAME="AUTOID-20186"
></A
> </P
></DIV
></DIV
><DIV
CLASS="htmlnav"
><P
></P
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch21_03.htm#SQL2-CH-21-SECT-3.2"
TITLE="21.3 Syntax for External Procedures"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 21.3 Syntax for External Procedures"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="book"
HREF="index.htm"
TITLE="Oracle PL/SQL Programming, 2nd Edition"
><IMG
SRC="../gifs/txthome.gif"
ALT="Oracle PL/SQL Programming, 2nd Edition"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch21_05.htm"
TITLE="21.5 OCI Service Routines"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 21.5 OCI Service Routines"
BORDER="0"></A
></TD
></TR
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
>21.3 Syntax for External Procedures</TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="index"
HREF="index/idx_0.htm"
TITLE="Book Index"
><IMG
SRC="../gifs/index.gif"
ALT="Book Index"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
>21.5 OCI Service Routines</TD
></TR
></TABLE
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"></DIV
><IMG SRC="../gifs/smnavbar.gif"
USEMAP="#map"
BORDER="0"
ALT="The Oracle Library Navigation">

<P><font size="-1">
<a href="../copyrght.htm#copy">Copyright (c) 2000</a> O'Reilly &amp; Associates. All rights reserved.
</font></P>

<MAP NAME="map">

<AREA SHAPE="RECT"
COORDS="0,0,35,30"
HREF="../index.htm"
ALT="Library Home">

<AREA SHAPE="RECT"
COORDS="40,0,95,30"
HREF="index.htm"
ALT="Oracle PL/SQL Programming, 2nd. Ed.">

<AREA SHAPE="RECT"
COORDS="100,0,200,30"
HREF="../guide8i/index.htm"
ALT="Guide to Oracle 8i Features">

<AREA SHAPE="RECT"
COORDS="205,0,245,30"
HREF="../bipack/index.htm"
ALT="Oracle Built-in Packages">

<AREA SHAPE="RECT"
COORDS="250,0,320,30"
HREF="../advprog/index.htm"
ALT="Advanced PL/SQL Programming with Packages">

<AREA SHAPE="RECT"
COORDS="325,0,420,30"
HREF="../webapp/index.htm"
ALT="Oracle Web Applications">

<AREA SHAPE="RECT"
COORDS="425,0,490,30"
HREF="../langpkt/index.htm"
ALT="Oracle PL/SQL Language Pocket Reference">

<AREA SHAPE="RECT"
COORDS="495,0,570,30"
HREF="../bipkt/index.htm"
ALT="Oracle PL/SQL Built-ins Pocket Reference">
</MAP>

</BODY
>
<!-- Mirrored from liso.cs.pusan.ac.kr by HTTrack Website Copier/3.x [XR&CO'2001] -->
</HTML
>
