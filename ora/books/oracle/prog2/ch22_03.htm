<HTML
><HEAD
><TITLE
>[Chapter 22] 22.3 Take Full Advantage of Local Modularization</TITLE
><META
NAME="DC.Creator"
CONTENT="Steven Feuerstein &amp; Bill Pribyl"><META
NAME="DC.Date"
CONTENT="2000-04-29T19:11:58Z"><META
NAME="DC.Format"
CONTENT="text/html"
SCHEME="MIME"><META
NAME="DC.Identifier"
CONTENT="O'Reilly and Associates CD-ROM-1-56592-335-9E"><META
NAME="DC.Language"
CONTENT="en-US"><META
NAME="DC.Publisher"
CONTENT="O'Reilly &amp; Associates, Inc."><META
NAME="DC.Source"
CONTENT="1-56592-335-9E"
SCHEME="ISBN"><META
NAME="DC.Subject.Keyword"
CONTENT="Oracle PL/SQL"><META
NAME="DC.Title"
CONTENT="Oracle PL/SQL Programming, 2nd Edition"><META
NAME="DC.Type"
CONTENT="Text.Monograph"><META
NAME="generator"
CONTENT="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><LINK
REL="stylesheet"
TYPE="text/css"
HREF="../style/style1.css"><LINK
REV="made"
HREF="mailto:online-books@oreilly.com"
TITLE="Online Books Comments"><LINK
REL="up"
HREF="ch22_01.htm"
TITLE="22. Code Design Tips"><LINK
REL="prev"
HREF="ch22_02.htm#SQL2-CH-22-SECT-2.1.1"
TITLE="22.2 Build the Most Functional Functions"><LINK
REL="next"
HREF="ch22_04.htm"
TITLE="22.4 Be Wary of Modules Without Any Parameters "></HEAD
><BODY
><DIV
CLASS="htmlnav"
><H1
><IMG
SRC="gifs/smbanner.gif"
ALT="Oracle PL/SQL Programming, 2nd Edition"
USEMAP="#srchmap"
BORDER="0"></H1
><MAP
NAME="srchmap"
><AREA
SHAPE="RECT"
COORDS="0,0,466,65"
HREF="index.htm"
ALT="Oracle PL/SQL Programming, 2nd Edition"><AREA
SHAPE="RECT"
COORDS="467,0,514,18"
HREF="jobjects/fsearch.htm"
ALT="Search this book"></MAP
><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch22_02.htm#SQL2-CH-22-SECT-2.1.1"
TITLE="22.2 Build the Most Functional Functions"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 22.2 Build the Most Functional Functions"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><SPAN
CLASS="NAVTITLE"
><A
CLASS="chapter"
REL="up"
HREF="ch22_01.htm"
TITLE="22. Code Design Tips"
>Chapter 22<BR>Code Design Tips</A
></SPAN
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch22_04.htm"
TITLE="22.4 Be Wary of Modules Without Any Parameters "
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 22.4 Be Wary of Modules Without Any Parameters "
BORDER="0"></A
></TD
></TR
></TABLE
>&nbsp;<HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"></DIV
><DIV
CLASS="sect1"
><H2
CLASS="sect1"
><A
CLASS="title"
NAME="SQL2-CH-22-SECT-3"
>22.3 Take Full Advantage of Local Modularization</A
></H2
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="ch22-idx-908832-1"
></A
><A
CLASS="indexterm"
NAME="ch22-idx-908832-2"
></A
> A local module is a procedure or function that is defined within the declaration section of another module. The scope of a local module is the module in which it is declared. It is invisible to all other modules, and can be called only from within that defining module. </P
><P
CLASS="para"
>Few PL/SQL developers are aware of the local module feature, and fewer yet take full advantage of this capability. Yet I can think of few other aspects of the language that are more important to constructing clean, elegant, easily maintained programs. I strongly encourage you to use local modules at every possible opportunity, and offer several examples in this section to highlight their usefulness. </P
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="AUTOID-20743"
></A
>Local modules are very handy ways to "normalize" redundant code inside a program. If you perform the same calculation over and over again in a module, don't hardcode the calculation repeatedly. Instead, place it in its own function or procedure and then call that module. The power of such an approach is clear when you examine the following program. In the format_data procedure, I extract a value from the rg_sales record group, divide it by projected sales, and convert to a formatted string&nbsp;-- over and over again. This code is taken from a production Oracle Forms application, and is actually just a small portion of the full set of more than two dozen repetitive calculations. </P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>PROCEDURE format_data
   (projected_sales_in IN NUMBER, year_in IN INTEGER)
IS
   /* Declare local variables for calculations. */
   total_cost NUMBER (9);
   gross_profit NUMBER (9);
   crew_labor NUMBER (9);
   mgmt_labor NUMBER (9);
BEGIN
   :owner.total_cost_pc :=
      TO_CHAR((net_present_value ('total_sales', year_in) /
               projected_sales_in * 100),'999.99');
   :owner.gross_profit_pc :=
      TO_CHAR((net_present_value ('gross_profit', year_in) /
               projected_sales_in * 100),'999.99');
   :owner.crew_labor_pc :=
      TO_CHAR((net_present_value ('crew_labor', year_in) /
               projected_sales_in * 100),'999.99');
   :owner.mgmt_labor_pc :=
      TO_CHAR((net_present_value ('mgmt_labor', year_in) /
               projected_sales_in * 100),999.99');
END;</PRE
></BLOCKQUOTE
><P
CLASS="para"
>I suppose that when you work in a Windows environment, it isn't necessarily such a big deal to write code like this. You cut and paste, cut and paste ... who knows? You might even use Microsoft Recorder or some other utility to automate the process. However you manage it, though, you still end up with lots of repetitions of the same fragment of code. You still end up with code that is hard to maintain. </P
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="ch22-idx-908834-1"
></A
> Because I have exposed the way I perform the calculation, I must upgrade each distinct calculation whenever a change is required (different numeric format, different numeric formula, etc.). If, on the other hand, I hide the calculation behind the interface of a callable module, then the calculation is coded only once. With the help of a local module, the format_data procedure is transformed as shown in this example: </P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>PROCEDURE format_data
   (projected_sales_in IN NUMBER, year_in IN INTEGER)
IS
   total_cost     NUMBER (9);
   gross_profit   NUMBER (9);
   crew_labor     NUMBER (9);
   mgmt_labor     NUMBER (9);

   /*----------------------- Local Module ----------------------*/
   FUNCTION npv (column_in IN VARCHAR2) RETURN VARCHAR2 IS
   BEGIN
      RETURN
         TO_CHAR((net_present_value ('' || column_in, year_in) /
                  projected_sales_in * 100),'999.99');
   END;

BEGIN
   /* Perform direct, readable assignments using the function. */
   :owner.total_cost_pc     := npv ('total_cost');
   :owner.gross_profit_pc := npv ('gross_profit');
   :owner.crew_labor_pc   := npv ('crew_labor');
   :owner.mgmt_labor_pc   := npv ('mgmt_labor');
END;</PRE
></BLOCKQUOTE
><P
CLASS="para"
>The total amount of code is less than before and the body of format_data is so much more readable. Notice how the name of the procedure actually helps make the code self-documenting. The procedure name states precisely the nature of the calculation performed. Any additional documentation would in itself be redundant. With npv, if I ever need to change the format mask or the formula, I simply make a change to the npv function and then recompile. No fuss, no muss. </P
><P
CLASS="para"
>Notice that it doesn't make any sense to create npv as a standalone module outside of the format_data procedure. This calculation is very specific to the format_data program. Because no other module would ever call it, you needn't clutter up your stored procedure environment or your Oracle Forms program unit listing with this module-specific utility. </P
><P
CLASS="para"
>I have found that few developers are aware of the ability to create local modules. I have also found that these modules-within-a-module play an important role in allowing me to write well-structured, elegant programs. </P
><P
CLASS="para"
>These days it seems that whenever I write a program with more than 20 lines, and with any complexity whatsoever, I end up creating several local modules. It helps me see my way through to a solution in the following ways: </P
><UL
CLASS="itemizedlist"
><LI
CLASS="listitem"
><P
CLASS="para"
>Conceptualizing my code at a higher level of abstraction by assigning a name to a whole sequence of statements. </P
></LI
><LI
CLASS="listitem"
><P
CLASS="para"
>Performing top-down design and step-wise refinement of my requirements. </P
></LI
><LI
CLASS="listitem"
><P
CLASS="para"
>Extracting local modules at a later date, thus making truly independent, reusable procedures or functions if the need arises. </P
></LI
></UL
><P
CLASS="para"
>Take a look at any of your more complex programs and I guarantee you will quickly identify segments of the code that would serve you better bundled into a local module. <A
CLASS="indexterm"
NAME="AUTOID-20765"
></A
> <A
CLASS="indexterm"
NAME="AUTOID-20766"
></A
> <A
CLASS="indexterm"
NAME="AUTOID-20767"
></A
> </P
></DIV
><DIV
CLASS="htmlnav"
><P
></P
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch22_02.htm#SQL2-CH-22-SECT-2.1.1"
TITLE="22.2 Build the Most Functional Functions"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 22.2 Build the Most Functional Functions"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="book"
HREF="index.htm"
TITLE="Oracle PL/SQL Programming, 2nd Edition"
><IMG
SRC="../gifs/txthome.gif"
ALT="Oracle PL/SQL Programming, 2nd Edition"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch22_04.htm"
TITLE="22.4 Be Wary of Modules Without Any Parameters "
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 22.4 Be Wary of Modules Without Any Parameters "
BORDER="0"></A
></TD
></TR
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
>22.2 Build the Most Functional Functions</TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="index"
HREF="index/idx_0.htm"
TITLE="Book Index"
><IMG
SRC="../gifs/index.gif"
ALT="Book Index"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
>22.4 Be Wary of Modules Without Any Parameters </TD
></TR
></TABLE
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"></DIV
><IMG SRC="../gifs/smnavbar.gif"
USEMAP="#map"
BORDER="0"
ALT="The Oracle Library Navigation">

<P><font size="-1">
<a href="../copyrght.htm#copy">Copyright (c) 2000</a> O'Reilly &amp; Associates. All rights reserved.
</font></P>

<MAP NAME="map">

<AREA SHAPE="RECT"
COORDS="0,0,35,30"
HREF="../index.htm"
ALT="Library Home">

<AREA SHAPE="RECT"
COORDS="40,0,95,30"
HREF="index.htm"
ALT="Oracle PL/SQL Programming, 2nd. Ed.">

<AREA SHAPE="RECT"
COORDS="100,0,200,30"
HREF="../guide8i/index.htm"
ALT="Guide to Oracle 8i Features">

<AREA SHAPE="RECT"
COORDS="205,0,245,30"
HREF="../bipack/index.htm"
ALT="Oracle Built-in Packages">

<AREA SHAPE="RECT"
COORDS="250,0,320,30"
HREF="../advprog/index.htm"
ALT="Advanced PL/SQL Programming with Packages">

<AREA SHAPE="RECT"
COORDS="325,0,420,30"
HREF="../webapp/index.htm"
ALT="Oracle Web Applications">

<AREA SHAPE="RECT"
COORDS="425,0,490,30"
HREF="../langpkt/index.htm"
ALT="Oracle PL/SQL Language Pocket Reference">

<AREA SHAPE="RECT"
COORDS="495,0,570,30"
HREF="../bipkt/index.htm"
ALT="Oracle PL/SQL Built-ins Pocket Reference">
</MAP>

</BODY
>
<!-- Mirrored from liso.cs.pusan.ac.kr by HTTrack Website Copier/3.x [XR&CO'2001] -->
</HTML
>
