<HTML
><HEAD
><TITLE
>[Chapter 6] 6.4 Declaring Cursors</TITLE
><META
NAME="DC.Creator"
CONTENT="Steven Feuerstein &amp; Bill Pribyl"><META
NAME="DC.Date"
CONTENT="2000-04-29T18:56:13Z"><META
NAME="DC.Format"
CONTENT="text/html"
SCHEME="MIME"><META
NAME="DC.Identifier"
CONTENT="O'Reilly and Associates CD-ROM-1-56592-335-9E"><META
NAME="DC.Language"
CONTENT="en-US"><META
NAME="DC.Publisher"
CONTENT="O'Reilly &amp; Associates, Inc."><META
NAME="DC.Source"
CONTENT="1-56592-335-9E"
SCHEME="ISBN"><META
NAME="DC.Subject.Keyword"
CONTENT="Oracle PL/SQL"><META
NAME="DC.Title"
CONTENT="Oracle PL/SQL Programming, 2nd Edition"><META
NAME="DC.Type"
CONTENT="Text.Monograph"><META
NAME="generator"
CONTENT="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><LINK
REL="stylesheet"
TYPE="text/css"
HREF="../style/style1.css"><LINK
REV="made"
HREF="mailto:online-books@oreilly.com"
TITLE="Online Books Comments"><LINK
REL="up"
HREF="ch06_01.htm"
TITLE="6. Database Interaction and Cursors"><LINK
REL="prev"
HREF="ch06_03.htm#SQL2-CH-6-SECT-3.1"
TITLE="6.3 Implicit and Explicit Cursors"><LINK
REL="next"
HREF="ch06_05.htm"
TITLE="6.5 Opening Cursors"></HEAD
><BODY
><DIV
CLASS="htmlnav"
><H1
><IMG
SRC="gifs/smbanner.gif"
ALT="Oracle PL/SQL Programming, 2nd Edition"
USEMAP="#srchmap"
BORDER="0"></H1
><MAP
NAME="srchmap"
><AREA
SHAPE="RECT"
COORDS="0,0,466,65"
HREF="index.htm"
ALT="Oracle PL/SQL Programming, 2nd Edition"><AREA
SHAPE="RECT"
COORDS="467,0,514,18"
HREF="jobjects/fsearch.htm"
ALT="Search this book"></MAP
><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch06_03.htm#SQL2-CH-6-SECT-3.1"
TITLE="6.3 Implicit and Explicit Cursors"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 6.3 Implicit and Explicit Cursors"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><SPAN
CLASS="NAVTITLE"
><A
CLASS="chapter"
REL="up"
HREF="ch06_01.htm"
TITLE="6. Database Interaction and Cursors"
>Chapter 6<BR>Database Interaction and Cursors</A
></SPAN
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch06_05.htm"
TITLE="6.5 Opening Cursors"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 6.5 Opening Cursors"
BORDER="0"></A
></TD
></TR
></TABLE
>&nbsp;<HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"></DIV
><DIV
CLASS="sect1"
><H2
CLASS="sect1"
><A
CLASS="title"
NAME="SQL2-CH-6-SECT-4"
>6.4 Declaring Cursors</A
></H2
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="ch06-idx-104720-1"
></A
> <A
CLASS="indexterm"
NAME="ch06-idx-104720-2"
></A
> <A
CLASS="indexterm"
NAME="ch06-idx-104720-3"
></A
><A
CLASS="indexterm"
NAME="ch06-idx-104720-4"
></A
>To use an explicit cursor, you must first declare it in the declaration section of your PL/SQL block or in a package, as shown here: </P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>CURSOR cursor_name [ ( [ parameter [, parameter ...] ) ]
   [ RETURN return_specification ]
   IS SELECT_statement;</PRE
></BLOCKQUOTE
><P
CLASS="para"
>where cursor_name is the name of the cursor, return_specification is an optional RETURN clause for the cursor, and SELECT_statement is any valid SQL SELECT statement. You can also pass arguments into a cursor through the optional parameter list described in <A
CLASS="xref"
HREF="ch06_10.htm#SQL2-CH-6-SECT-10.2"
>Section 6.10, "Cursor Parameters"</A
>. </P
><P
CLASS="para"
>Once you have declared a cursor you can then OPEN it and FETCH from it. </P
><P
CLASS="para"
>Here are some examples of explicit cursor declarations:</P
><UL
CLASS="itemizedlist"
><LI
CLASS="listitem"
><P
CLASS="para"
><EM
CLASS="emphasis"
>A cursor without parameters.</EM
> The result set of this cursor is the set of company ID numbers for each record in the table: </P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>CURSOR company_cur IS
   SELECT company_id FROM company;</PRE
></BLOCKQUOTE
></LI
><LI
CLASS="listitem"
><P
CLASS="para"
><EM
CLASS="emphasis"
>A cursor with parameters.</EM
> The result set of this cursor is the name of the company which matches the company ID passed to the cursor via the parameter: </P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>CURSOR name_cur (company_id_in IN NUMBER)
IS
   SELECT name FROM company
    WHERE company_id = company_id_in;</PRE
></BLOCKQUOTE
></LI
><LI
CLASS="listitem"
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="AUTOID-5318"
></A
>A cursor with a RETURN clause. The result set of this cursor is all columns (same structure as the underlying table) from all employee records in department 10: </P
></LI
></UL
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>CURSOR emp_cur RETURN employee%ROWTYPE
IS
   SELECT * FROM employee
    WHERE department_id = 10;</PRE
></BLOCKQUOTE
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="SQL2-CH-6-SECT-4.1"
>6.4.1 The Cursor Name</A
></H3
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="AUTOID-5325"
></A
> <A
CLASS="indexterm"
NAME="AUTOID-5328"
></A
> The name of an explicit cursor is not a PL/SQL variable. Instead, it is an undeclared identifier used to point to or refer to the query. You cannot assign values to a cursor, nor can you use it in an expression. </P
><P
CLASS="para"
>As a result, both of the executable statements after the BEGIN line below are invalid: </P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>DECLARE
   CURSOR company_cur IS
      SELECT company_id FROM company;
BEGIN
   company_cur := 15009; /* Invalid syntax */

   IF company_cur IS NOT NULL THEN ... ;  /* Invalid syntax */</PRE
></BLOCKQUOTE
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="AUTOID-5334"
></A
>In compiling either statement, you will receive the following error: </P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>PLS-0321: expression 'COMPANY_CUR' is inappropriate as the left-hand side of an assignment statement.</PRE
></BLOCKQUOTE
><P
CLASS="para"
>The name of a cursor can be up to 30 characters in length and follows the rules for any other identifier in PL/SQL. </P
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="SQL2-CH-6-SECT-4.2"
>6.4.2 PL/SQL Variables in a Cursor</A
></H3
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="AUTOID-5342"
></A
> <A
CLASS="indexterm"
NAME="AUTOID-5344"
></A
> <A
CLASS="indexterm"
NAME="AUTOID-5347"
></A
><A
CLASS="indexterm"
NAME="AUTOID-5350"
></A
>Because a cursor must be associated with a SELECT statement, every cursor must reference at least one table from the database and determine from that (and from the WHERE clause) which rows will be returned in the active set. This does not mean, however, that a cursor's SELECT may only return database information. The list of expressions that appears after the SELECT keyword and before the FROM keyword is called the select list. </P
><P
CLASS="para"
>In native SQL, this select list may contain both columns and expressions (SQL functions on those columns, constants, etc.). In PL/SQL, the select list of a SELECT may contain PL/SQL variables, expressions, and even functions (PL/SQL Release 2.1 and above). </P
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="AUTOID-5354"
></A
> In the following cursor, the SELECT statement retrieves rows based on the employee table, but the information returned in the select list contains a combination of table columns, a PL/SQL variable, and a bind variable from the host environment (such as an Oracle Forms item): </P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>DECLARE
   /* A local PL/SQL variable */
   projected_bonus NUMBER := 1000;
   /*
   || Cursor adds $1000 to the salary of each employee
   || hired more than three years ago.
   */
   CURSOR employee_cur
   IS
      SELECT employee_id,
             salary + projected_bonus new_salary, /* Column alias */
            :review.evaluation                    /* Bind variable */
        FROM employee
       WHERE hiredate &lt; ADD_MONTHS (SYSDATE, -36);

BEGIN
   ...
END;</PRE
></BLOCKQUOTE
><P
CLASS="para"
>You can reference local PL/SQL program data (PL/SQL variables and constants), as well as host language bind variables in the WHERE, GROUP, and HAVING clauses of the cursor's SELECT statement. </P
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="SQL2-CH-6-SECT-4.3"
>6.4.3 Identifier Precedence in a Cursor</A
></H3
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="AUTOID-5363"
></A
> <A
CLASS="indexterm"
NAME="AUTOID-5366"
></A
> <A
CLASS="indexterm"
NAME="AUTOID-5369"
></A
> <A
CLASS="indexterm"
NAME="AUTOID-5372"
></A
>Be careful about naming identifiers when you mix PL/SQL variables in with database columns. It is, for instance, common practice to give a variable the same name as the column whose data it is supposed to represent. This makes perfect sense until you want to reference those local variables in a SQL statement along with the column. </P
><P
CLASS="para"
>In the following example, I want to fetch each employee who was hired more than three years ago and, using a local variable, add $1000 to their salary. The employee table has a column named "salary." Unfortunately, this procedure relies on a local variable of the same name to achieve its ends. Although this code will compile without error, it will not produce the desired result: </P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>PROCEDURE improve_QOL
IS
   /* Local variable with same name as column: */
   salary NUMBER := 1000;

   CURSOR double_sal_cur
   IS
      SELECT salary + salary
        FROM employee
       WHERE hiredate &lt; ADD_MONTHS (SYSDATE, -36);
BEGIN</PRE
></BLOCKQUOTE
><P
CLASS="para"
>Instead of adding $1000 to each person's salary, this code will instead double his or her salary. Inside the SQL statement, any unqualified reference to "salary" is resolved by using the column named "salary." </P
><P
CLASS="para"
>I could achieve the desired effect by qualifying the PL/SQL variable with the name of the procedure, as follows: </P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>CURSOR double_sal_cur
IS
   SELECT salary + <B
CLASS="emphasis.bold"
>improve_QOL.</B
>salary
     FROM employee
    WHERE hiredate &lt; ADD_MONTHS (SYSDATE, -36);</PRE
></BLOCKQUOTE
><P
CLASS="para"
>In this situation, you are informing the compiler that the second reference to salary is that variable "owned" by the improve_QOL procedure. It will then add the current value of that variable to the salary column value. </P
><P
CLASS="para"
>I do not, however, recommend that you make use of qualified local variable names in this way. If your local variable names conflict with database column or table names, <EM
CLASS="emphasis"
>change the name of your variable.</EM
> Best of all, avoid this kind of duplication by using a standard naming convention for local variables which represent database information. </P
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="SQL2-CH-6-SECT-4.4"
>6.4.4 The Cursor RETURN Clause</A
></H3
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="ch06-idx-104727-1"
></A
><A
CLASS="indexterm"
NAME="ch06-idx-104727-2"
></A
>One of the most significant new features in PL/SQL Version 2 is the full support for packages and the resulting modularization of code that is now possible with that construct. Packages introduce an enhancement to the way you can declare a cursor: the RETURN clause. </P
><P
CLASS="para"
>When you group programs together into a package, you can make only the specification, or header information, of those programs available to developers. Although a developer can tell from the specification what the module is called and how to call it, he or she does not need to see any of the underlying code. As a result, you can create true black boxes behind which you can hide complex implementational details. </P
><P
CLASS="para"
>With Version 2 of PL/SQL you can accomplish the same objective with cursors by using the cursor RETURN clause. The RETURN clause allows you to create a specification for a cursor which is separate from its body (the SELECT statement). You may then place cursors in packages and hide the implementation details from developers. </P
><P
CLASS="para"
>Consider the following cursor declaration with RETURN clause:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>CURSOR caller_cur (id_in IN NUMBER) RETURN caller%ROWTYPE
IS
   SELECT * FROM caller WHERE caller_id = id_in;</PRE
></BLOCKQUOTE
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="AUTOID-5397"
></A
>The specification of the caller_cur cursor is: </P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>CURSOR caller_cur (id_in IN NUMBER) RETURN caller%ROWTYPE</PRE
></BLOCKQUOTE
><P
CLASS="para"
>while the <EM
CLASS="emphasis"
>body</EM
> of the caller_cur cursor is:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>SELECT * FROM caller WHERE caller_id = id_in;</PRE
></BLOCKQUOTE
><P
CLASS="para"
>Everything up to but not including the IS keyword is the specification, while everything following the IS keyword is the body. </P
><P
CLASS="para"
>You can include a RETURN clause for any cursor you write in PL/SQL Version 2, but it is required only for cursors which are contained in a package specification. </P
><P
CLASS="para"
>The RETURN clause may be made up of any of the following datatype structures: </P
><UL
CLASS="itemizedlist"
><LI
CLASS="listitem"
><P
CLASS="para"
>A record defined from a database table, using the %ROWTYPE attribute</P
></LI
><LI
CLASS="listitem"
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="AUTOID-5413"
></A
>A record defined from a programmer-defined record </P
></LI
></UL
><P
CLASS="para"
>Here is an example of a cursor defined in a package. First, the package specification provides the name of the cursor and the RETURN datatype (an entire row from the company table): </P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>PACKAGE company
IS
   CURSOR company_cur (id_in NUMBER) RETURN company%ROWTYPE;
END company;</PRE
></BLOCKQUOTE
><P
CLASS="para"
>Then the following package body repeats the cursor specification and adds the SQL statement: </P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>PACKAGE BODY company
IS
   CURSOR company_cur (id_in NUMBER) RETURN company%ROWTYPE
   IS
      SELECT * FROM company
       WHERE company_id = id_in;

END company;</PRE
></BLOCKQUOTE
><P
CLASS="para"
>The number of expressions in the cursor's select list must match the number of columns in the record identified by table_name%ROWTYPE or PLSQL_record%ROWTYPE. The datatypes of the elements must also be compatible. If the second element in the select list is type NUMBER, then the second column in the RETURN record cannot be type VARCHAR2 or BOOLEAN. </P
><P
CLASS="para"
>Why place cursors in a package? For the same reasons you would place a procedure or a function in a package: a package is a collection of logically related objects. By grouping the code into a package you make it easier for a developer to identify and use the code (see <A
CLASS="xref"
HREF="ch16_01.htm"
>Chapter 16, <CITE
CLASS="chapter"
>Packages</CITE
></A
>, for more details). Packaged cursors are essentially black boxes. This is advantageous to developers because they never have to code or even see the SELECT statement. They only need to know what records the cursor returns, in what order it returns them, and which columns are in the column list. </P
><P
CLASS="para"
>When cursor information is limited on this kind of "need to know" basis, it protects developers and the overall application from change. Suppose that a year from now the WHERE clause of a query has to change. If a packaged cursor is not used, then each program that has a hardcoded or local cursor will have to be modified to meet the new specification. If, on the other hand, all developers simply access the same cursor, then changes will only need to be made to that packaged declaration of the cursor. The programs can then be recompiled to automatically support this change. </P
></DIV
></DIV
><DIV
CLASS="htmlnav"
><P
></P
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch06_03.htm#SQL2-CH-6-SECT-3.1"
TITLE="6.3 Implicit and Explicit Cursors"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 6.3 Implicit and Explicit Cursors"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="book"
HREF="index.htm"
TITLE="Oracle PL/SQL Programming, 2nd Edition"
><IMG
SRC="../gifs/txthome.gif"
ALT="Oracle PL/SQL Programming, 2nd Edition"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch06_05.htm"
TITLE="6.5 Opening Cursors"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 6.5 Opening Cursors"
BORDER="0"></A
></TD
></TR
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
>6.3 Implicit and Explicit Cursors</TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="index"
HREF="index/idx_0.htm"
TITLE="Book Index"
><IMG
SRC="../gifs/index.gif"
ALT="Book Index"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
>6.5 Opening Cursors</TD
></TR
></TABLE
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"></DIV
><IMG SRC="../gifs/smnavbar.gif"
USEMAP="#map"
BORDER="0"
ALT="The Oracle Library Navigation">

<P><font size="-1">
<a href="../copyrght.htm#copy">Copyright (c) 2000</a> O'Reilly &amp; Associates. All rights reserved.
</font></P>

<MAP NAME="map">

<AREA SHAPE="RECT"
COORDS="0,0,35,30"
HREF="../index.htm"
ALT="Library Home">

<AREA SHAPE="RECT"
COORDS="40,0,95,30"
HREF="index.htm"
ALT="Oracle PL/SQL Programming, 2nd. Ed.">

<AREA SHAPE="RECT"
COORDS="100,0,200,30"
HREF="../guide8i/index.htm"
ALT="Guide to Oracle 8i Features">

<AREA SHAPE="RECT"
COORDS="205,0,245,30"
HREF="../bipack/index.htm"
ALT="Oracle Built-in Packages">

<AREA SHAPE="RECT"
COORDS="250,0,320,30"
HREF="../advprog/index.htm"
ALT="Advanced PL/SQL Programming with Packages">

<AREA SHAPE="RECT"
COORDS="325,0,420,30"
HREF="../webapp/index.htm"
ALT="Oracle Web Applications">

<AREA SHAPE="RECT"
COORDS="425,0,490,30"
HREF="../langpkt/index.htm"
ALT="Oracle PL/SQL Language Pocket Reference">

<AREA SHAPE="RECT"
COORDS="495,0,570,30"
HREF="../bipkt/index.htm"
ALT="Oracle PL/SQL Built-ins Pocket Reference">
</MAP>

</BODY
>
<!-- Mirrored from liso.cs.pusan.ac.kr by HTTrack Website Copier/3.x [XR&CO'2001] -->
</HTML
>
