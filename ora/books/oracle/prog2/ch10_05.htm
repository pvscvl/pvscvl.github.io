<HTML
><HEAD
><TITLE
>[Chapter 10] 10.5 Referencing and Modifying PL/SQL Table Rows</TITLE
><META
NAME="DC.Creator"
CONTENT="Steven Feuerstein &amp; Bill Pribyl"><META
NAME="DC.Date"
CONTENT="2000-04-29T18:59:09Z"><META
NAME="DC.Format"
CONTENT="text/html"
SCHEME="MIME"><META
NAME="DC.Identifier"
CONTENT="O'Reilly and Associates CD-ROM-1-56592-335-9E"><META
NAME="DC.Language"
CONTENT="en-US"><META
NAME="DC.Publisher"
CONTENT="O'Reilly &amp; Associates, Inc."><META
NAME="DC.Source"
CONTENT="1-56592-335-9E"
SCHEME="ISBN"><META
NAME="DC.Subject.Keyword"
CONTENT="Oracle PL/SQL"><META
NAME="DC.Title"
CONTENT="Oracle PL/SQL Programming, 2nd Edition"><META
NAME="DC.Type"
CONTENT="Text.Monograph"><META
NAME="generator"
CONTENT="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><LINK
REL="stylesheet"
TYPE="text/css"
HREF="../style/style1.css"><LINK
REV="made"
HREF="mailto:online-books@oreilly.com"
TITLE="Online Books Comments"><LINK
REL="up"
HREF="ch10_01.htm"
TITLE="10. PL/SQL Tables"><LINK
REL="prev"
HREF="ch10_04.htm#SQL2-CH-10-SECT-4.1"
TITLE="10.4 Declaring a PL/SQL Table"><LINK
REL="next"
HREF="ch10_06.htm"
TITLE="10.6 Filling the Rows of a PL/SQL Table"></HEAD
><BODY
><DIV
CLASS="htmlnav"
><H1
><IMG
SRC="gifs/smbanner.gif"
ALT="Oracle PL/SQL Programming, 2nd Edition"
USEMAP="#srchmap"
BORDER="0"></H1
><MAP
NAME="srchmap"
><AREA
SHAPE="RECT"
COORDS="0,0,466,65"
HREF="index.htm"
ALT="Oracle PL/SQL Programming, 2nd Edition"><AREA
SHAPE="RECT"
COORDS="467,0,514,18"
HREF="jobjects/fsearch.htm"
ALT="Search this book"></MAP
><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch10_04.htm#SQL2-CH-10-SECT-4.1"
TITLE="10.4 Declaring a PL/SQL Table"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 10.4 Declaring a PL/SQL Table"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><SPAN
CLASS="NAVTITLE"
><A
CLASS="chapter"
REL="up"
HREF="ch10_01.htm"
TITLE="10. PL/SQL Tables"
>Chapter 10<BR>PL/SQL Tables</A
></SPAN
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch10_06.htm"
TITLE="10.6 Filling the Rows of a PL/SQL Table"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 10.6 Filling the Rows of a PL/SQL Table"
BORDER="0"></A
></TD
></TR
></TABLE
>&nbsp;<HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"></DIV
><DIV
CLASS="sect1"
><H2
CLASS="sect1"
><A
CLASS="title"
NAME="SQL2-CH-10-SECT-5"
>10.5 Referencing and Modifying PL/SQL Table Rows</A
></H2
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="ch10-idx-824491-1"
></A
><A
CLASS="indexterm"
NAME="ch10-idx-824491-2"
></A
><A
CLASS="indexterm"
NAME="ch10-idx-824491-3"
></A
><A
CLASS="indexterm"
NAME="ch10-idx-824491-4"
></A
><A
CLASS="indexterm"
NAME="ch10-idx-824491-5"
></A
>Remember that a row, given the single columnar structure of the PL/SQL table in Version 2, is a scalar value. You refer to a particular row in a PL/SQL table by specifying the name of the table and the primary key value for that row. The syntax is very similar to standard, one-dimensional arrays: </P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>&lt;table_name&gt; ( &lt;primary_key_value&gt; )</PRE
></BLOCKQUOTE
><P
CLASS="para"
>where &lt;table_name&gt; is the name of the table and &lt;primary_key_value&gt; is a literal, variable, or expression whose datatype is compatible with the BINARY_INTEGER datatype. You assign values to a row in a table with the standard assignment operator (<CODE
CLASS="literal"
>:=</CODE
>). </P
><P
CLASS="para"
>All of the following table references and assignments are valid:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>company_names_tab (15) := 'Fabricators Anonymous';

company_keys_tab (-2000) := new_company_id;

header_string := 'Sales for ' || company_names_tab (25);</PRE
></BLOCKQUOTE
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="SQL2-CH-10-SECT-5.1"
>10.5.1 Automatic Conversion of Row Number Expressions</A
></H3
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="AUTOID-8800"
></A
> <A
CLASS="indexterm"
NAME="AUTOID-8804"
></A
><A
CLASS="indexterm"
NAME="AUTOID-8807"
></A
>PL/SQL will go to great lengths to convert an expression or string to BINARY_INTEGER for use as a row number. Here are some examples: </P
><UL
CLASS="itemizedlist"
><LI
CLASS="listitem"
><P
CLASS="para"
>Store the string in row 16:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>requests_table (15.566) := 'Totals by Category';</PRE
></BLOCKQUOTE
></LI
><LI
CLASS="listitem"
><P
CLASS="para"
>Store the string in row 255:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>company_keys_table ('25'||'5') := 1000;</PRE
></BLOCKQUOTE
></LI
><LI
CLASS="listitem"
><P
CLASS="para"
>The expression will be evaluated and used as the row number:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>keyword_list_table (last_row + 15) := 'ELSE';</PRE
></BLOCKQUOTE
></LI
></UL
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="SQL2-CH-10-SECT-5.2"
>10.5.2 Referencing an Undefined Row</A
></H3
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="AUTOID-8822"
></A
>As I've mentioned, a key difference between arrays and PL/SQL tables is that a row in a PL/SQL table does not exist until you assign a value to that row. This makes sense, given the fact that PL/SQL tables are unconstrained in size. In a 3GL program like C or FORTRAN, you specify a maximum size or dimension to an array when you declare it. Once an array is declared, the memory is set aside for all the cells in the array, and you can read from or place a value in any cell within the bounds of the array. </P
><P
CLASS="para"
>PL/SQL tables, on the other hand, have no predefined number of values, so PL/SQL does not create the memory structure for the rows in the table until you need them. Instead, whenever you assign a value to a row in a PL/SQL table, PL/SQL creates that row. </P
><P
CLASS="para"
>If, however, you reference a row which does not yet exist, PL/SQL raises the NO_DATA_FOUND exception. (The exception is also raised when an implicit cursor SELECT statement does not return any rows, or when you attempt to read past the end of a file with the UTL_FILE package.) </P
><P
CLASS="para"
>The following PL/SQL block will cause the NO_DATA_FOUND exception to be raised (and go unhandled) because row 15 has not yet been assigned a value: </P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>DECLARE
   new_request NUMBER;
   TYPE request_tabtype IS TABLE OF NUMBER INDEX BY BINARY_INTEGER;
   request_table request_tabtype;
BEGIN
   new_request := request_table (15);
END;</PRE
></BLOCKQUOTE
><P
CLASS="para"
>If you want to trap the NO_DATA_FOUND exception, then you will need to add the following exception handler to the exception section of the block: </P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>EXCEPTION
   WHEN NO_DATA_FOUND
   THEN
      ... take appropriate action ...
END;</PRE
></BLOCKQUOTE
><P
CLASS="para"
>You pay a stiff penalty for referencing a row in a table that has not been assigned a value. To avoid this exception, you need to keep track of the minimum and maximum row numbers used in a PL/SQL table. </P
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="SQL2-CH-10-SECT-5.3"
>10.5.3 Nonsequential Use of PL/SQL Table</A
></H3
><P
CLASS="para"
>Of course, the idea of using a minimum and maximum row assumes that the rows in the table are used sequentially. That is, you fill row one, then row two, etc. This is a perfectly reasonable way to fill a table's rows; to do this you absolutely must know the value of the row last filled. You are not, however, required to fill rows in this way. You can place a value in any row of the table you wish, regardless of the primary key value of the last row you filled. </P
><P
CLASS="para"
>The following example illustrates filling a PL/SQL table's rows randomly rather than sequentially: </P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>DECLARE
   TYPE countdown_tests_tabtype IS TABLE OF VARCHAR2(20)
      INDEX BY BINARY_INTEGER;
   countdown_test_list countdown_tests_tabtype;
BEGIN
   countdown_test_list (1) := 'All systems go';
   countdown_test_list (43) := 'Internal pressure';
   countdown_test_list (255) := 'Engine inflow';
END;</PRE
></BLOCKQUOTE
><P
CLASS="para"
>In this situation, the minimum and maximum values do not have much significance. </P
><P
CLASS="para"
>The ability to randomly place values in a table can come in very handy when the primary key value for the table's row is actually not sequentially derived, but is instead based on data in your application. This use of "intelligent" primary key values is explored in more detail in <A
CLASS="xref"
HREF="ch10_09.htm#SQL2-CH-10-SECT-9.5.6"
>Section 10.9.2, "Data-Smart Row Numbers in PL/SQL Tables"</A
> later in this chapter. </P
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="SQL2-CH-10-SECT-5.4"
>10.5.4 Passing PL/SQL Tables as Parameters</A
></H3
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="AUTOID-8842"
></A
> <A
CLASS="indexterm"
NAME="AUTOID-8845"
></A
> <A
CLASS="indexterm"
NAME="AUTOID-8848"
></A
> <A
CLASS="indexterm"
NAME="AUTOID-8851"
></A
>You can also pass a PL/SQL table as a parameter in a procedure or function; with this approach you can, in a single call, pass all the values in a table into the module. In the following package specification I define two modules that pass PL/SQL tables as parameters. The send_promos procedure sends a promotional mailing to all the companies in my table. The companies_overdue function returns a table filled with the names of companies that have overdue bills. </P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>PACKAGE company_pkg
IS
   TYPE primary_keys_tabtype IS TABLE OF company.company_id%TYPE NOT NULL
      INDEX BY BINARY_INTEGER;
   company_keys_tab primary_keys_tabtype;
   emp_keys_tab primary_keys_tabtype;

   /* Table type and table for company names */
   TYPE company_names_tabtype IS TABLE OF company.name%TYPE
      INDEX BY BINARY_INTEGER;
   company_names_tab company_names_tabtype;

   /* Parameter is a table of company primary keys */
   PROCEDURE send_promos (company_table_in IN primary_keys_tabtype);

   /* Function returns a table of company names */
   FUNCTION companies_overdue (overdue_date_in IN DATE)
      RETURN company_names_tabtype;

   /* Returns company ID for name. */
   FUNCTION id (name in IN company.name%TYPE)
      RETURN company.company id%TYPE

END company_pkg;</PRE
></BLOCKQUOTE
><P
CLASS="para"
>Now that I have a package containing both the table type and the programs referencing those types, I can call these programs. The only tricky part to remember here is that you must declare a PL/SQL table based on the type before you can use any of the programs. Here is an example of returning a PL/SQL table as a function's return value: </P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>CREATE OR REPLACE PROCEDURE send_promos_for_overdue_companies
   (date_in IN DATE := SYSDATE)
IS
   v_row PLS_INTEGER;

   /* Declare a PL/SQL table based on the packaged type. */
   cnames company_pkg.company_names_tabtype;
BEGIN
   cnames := company_pkg.companies_overdue (date_in);

   /*
   || In PL/SQL 2.3 I can use navigation methods to traverse.
   || Notice that I do not assume that rows are filled sequentially.
   */
   v_row := cnames.FIRST;
   LOOP
      EXIT WHEN v_row IS NULL;
      DBMS_OUTPUT.PUT_LINE (cnames(v_row));
      v_row := cnames.NEXT (v_row);
   END LOOP;
END;
/</PRE
></BLOCKQUOTE
><P
CLASS="para"
>Notice that I could also have avoided declaring my own PL/SQL table, cnames, by using the predefined table in the package: </P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>   company_pkg.company_names_tab :=
   company_pkg.companies_overdue (date_in);</PRE
></BLOCKQUOTE
><P
CLASS="para"
>If I had taken this approach, however, any rows already defined in this "global" table would have been erased. </P
><P
CLASS="para"
>Here is an example of calling a procedure, passing a PL/SQL table as an argument in the parameter list: </P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>DECLARE
   v_row PLS_INTEGER;

   /* Table of primary keys for company */
   company_ids company_pkg.primary_keys_tabtype;
BEGIN
   /* Populate the table with names of overdue companies. */
   company_pkg.company_names_tab :=
      company_pkg.companies_overdue (date_in);

   /* For each company name, look up the ID and pass it to the
   || PL/SQL table of company IDs.
   */
   v_row := company_pkg.company_names_tab.FIRST;
   LOOP
      EXIT WHEN v_row IS NULL;
      company_ids (NVL (company_ids.LAST, 0) + 1) :=
         company_pkg.id(company_pkg.company_name_tab(v_row));
      v_row := company_pkg.company_names_tab.NEXT (v_row);
   END LOOP;

   /* Now send out promotional flyers to those companies. */
   company_pkg.send_promos (company_ids);

   /* Delete all the rows from the company names table. */
   company_pkg.company_names_tab.DELETE;

END company_pkg;<A
CLASS="indexterm"
NAME="AUTOID-8862"
></A
>
<A
CLASS="indexterm"
NAME="AUTOID-8863"
></A
>
<A
CLASS="indexterm"
NAME="AUTOID-8864"
></A
>
<A
CLASS="indexterm"
NAME="AUTOID-8865"
></A
>
<A
CLASS="indexterm"
NAME="AUTOID-8866"
></A
></PRE
></BLOCKQUOTE
></DIV
></DIV
><DIV
CLASS="htmlnav"
><P
></P
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch10_04.htm#SQL2-CH-10-SECT-4.1"
TITLE="10.4 Declaring a PL/SQL Table"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 10.4 Declaring a PL/SQL Table"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="book"
HREF="index.htm"
TITLE="Oracle PL/SQL Programming, 2nd Edition"
><IMG
SRC="../gifs/txthome.gif"
ALT="Oracle PL/SQL Programming, 2nd Edition"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch10_06.htm"
TITLE="10.6 Filling the Rows of a PL/SQL Table"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 10.6 Filling the Rows of a PL/SQL Table"
BORDER="0"></A
></TD
></TR
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
>10.4 Declaring a PL/SQL Table</TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="index"
HREF="index/idx_0.htm"
TITLE="Book Index"
><IMG
SRC="../gifs/index.gif"
ALT="Book Index"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
>10.6 Filling the Rows of a PL/SQL Table</TD
></TR
></TABLE
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"></DIV
><IMG SRC="../gifs/smnavbar.gif"
USEMAP="#map"
BORDER="0"
ALT="The Oracle Library Navigation">

<P><font size="-1">
<a href="../copyrght.htm#copy">Copyright (c) 2000</a> O'Reilly &amp; Associates. All rights reserved.
</font></P>

<MAP NAME="map">

<AREA SHAPE="RECT"
COORDS="0,0,35,30"
HREF="../index.htm"
ALT="Library Home">

<AREA SHAPE="RECT"
COORDS="40,0,95,30"
HREF="index.htm"
ALT="Oracle PL/SQL Programming, 2nd. Ed.">

<AREA SHAPE="RECT"
COORDS="100,0,200,30"
HREF="../guide8i/index.htm"
ALT="Guide to Oracle 8i Features">

<AREA SHAPE="RECT"
COORDS="205,0,245,30"
HREF="../bipack/index.htm"
ALT="Oracle Built-in Packages">

<AREA SHAPE="RECT"
COORDS="250,0,320,30"
HREF="../advprog/index.htm"
ALT="Advanced PL/SQL Programming with Packages">

<AREA SHAPE="RECT"
COORDS="325,0,420,30"
HREF="../webapp/index.htm"
ALT="Oracle Web Applications">

<AREA SHAPE="RECT"
COORDS="425,0,490,30"
HREF="../langpkt/index.htm"
ALT="Oracle PL/SQL Language Pocket Reference">

<AREA SHAPE="RECT"
COORDS="495,0,570,30"
HREF="../bipkt/index.htm"
ALT="Oracle PL/SQL Built-ins Pocket Reference">
</MAP>

</BODY
>
<!-- Mirrored from liso.cs.pusan.ac.kr by HTTrack Website Copier/3.x [XR&CO'2001] -->
</HTML
>
