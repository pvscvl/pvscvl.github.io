<HTML
><HEAD
><TITLE
>[Chapter 2] 2.3 Literals</TITLE
><META
NAME="DC.Creator"
CONTENT="Steven Feuerstein &amp; Bill Pribyl"><META
NAME="DC.Date"
CONTENT="2000-04-29T18:50:42Z"><META
NAME="DC.Format"
CONTENT="text/html"
SCHEME="MIME"><META
NAME="DC.Identifier"
CONTENT="O'Reilly and Associates CD-ROM-1-56592-335-9E"><META
NAME="DC.Language"
CONTENT="en-US"><META
NAME="DC.Publisher"
CONTENT="O'Reilly &amp; Associates, Inc."><META
NAME="DC.Source"
CONTENT="1-56592-335-9E"
SCHEME="ISBN"><META
NAME="DC.Subject.Keyword"
CONTENT="Oracle PL/SQL"><META
NAME="DC.Title"
CONTENT="Oracle PL/SQL Programming, 2nd Edition"><META
NAME="DC.Type"
CONTENT="Text.Monograph"><META
NAME="generator"
CONTENT="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><LINK
REL="stylesheet"
TYPE="text/css"
HREF="../style/style1.css"><LINK
REV="made"
HREF="mailto:online-books@oreilly.com"
TITLE="Online Books Comments"><LINK
REL="up"
HREF="ch02_01.htm"
TITLE="2. PL/SQL Language Fundamentals"><LINK
REL="prev"
HREF="ch02_02.htm"
TITLE="2.2 Identifiers"><LINK
REL="next"
HREF="ch02_04.htm"
TITLE="2.4 The Semicolon Delimiter"></HEAD
><BODY
><DIV
CLASS="htmlnav"
><H1
><IMG
SRC="gifs/smbanner.gif"
ALT="Oracle PL/SQL Programming, 2nd Edition"
USEMAP="#srchmap"
BORDER="0"></H1
><MAP
NAME="srchmap"
><AREA
SHAPE="RECT"
COORDS="0,0,466,65"
HREF="index.htm"
ALT="Oracle PL/SQL Programming, 2nd Edition"><AREA
SHAPE="RECT"
COORDS="467,0,514,18"
HREF="jobjects/fsearch.htm"
ALT="Search this book"></MAP
><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch02_02.htm"
TITLE="2.2 Identifiers"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 2.2 Identifiers"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><SPAN
CLASS="NAVTITLE"
><A
CLASS="chapter"
REL="up"
HREF="ch02_01.htm"
TITLE="2. PL/SQL Language Fundamentals"
>Chapter 2<BR>PL/SQL Language Fundamentals</A
></SPAN
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch02_04.htm"
TITLE="2.4 The Semicolon Delimiter"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 2.4 The Semicolon Delimiter"
BORDER="0"></A
></TD
></TR
></TABLE
>&nbsp;<HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"></DIV
><DIV
CLASS="sect1"
><H2
CLASS="sect1"
><A
CLASS="title"
NAME="SQL2-CH-2-SECT-3"
>2.3 Literals</A
></H2
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="AUTOID-1975"
></A
> <A
CLASS="indexterm"
NAME="ch02-idx-115476-2"
></A
>A literal is a value which is not represented by an identifier; it is simply a value. A literal may be composed of one of the following types of data: </P
><DL
CLASS="variablelist"
><DT
CLASS="term"
><EM
CLASS="emphasis"
>Number</EM
><A
CLASS="indexterm"
NAME="AUTOID-1985"
></A
> <A
CLASS="indexterm"
NAME="AUTOID-1989"
></A
> <A
CLASS="indexterm"
NAME="AUTOID-1993"
></A
> </DT
><DD
CLASS="listitem"
><P
CLASS="para"
>415, 21.6, or NULL</P
></DD
><DT
CLASS="term"
><EM
CLASS="emphasis"
>String</EM
></DT
><DD
CLASS="listitem"
><P
CLASS="para"
>`This is my sentence' or `31-JAN-94' or NULL</P
></DD
><DT
CLASS="term"
><EM
CLASS="emphasis"
>Boolean</EM
></DT
><DD
CLASS="listitem"
><P
CLASS="para"
>TRUE, FALSE, or NULL</P
></DD
></DL
><P
CLASS="para"
>Notice that there is no way to indicate a true date literal. The value `31-JAN-94' is a string literal (any sequence of characters enclosed by single quotes is a string literal). PL/SQL and SQL automatically convert such a string to a date for you (by calling TO_DATE), but a date has only an internal representation. </P
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="AUTOID-2010"
></A
> A string literal can be composed of zero or more characters from the PL/SQL character set. <A
CLASS="indexterm"
NAME="AUTOID-2014"
></A
> A literal of zero characters is represented as <KBD
CLASS="command"
>''</KBD
> (two consecutive single quotes with no characters between them) and is defined as the NULL string. <A
CLASS="indexterm"
NAME="AUTOID-2018"
></A
>This literal has a datatype of CHAR (fixed-length string). </P
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="AUTOID-2021"
></A
> PL/SQL is case-sensitive within string literals. The following two literals are different: </P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>'Steven'
'steven'</PRE
></BLOCKQUOTE
><P
CLASS="para"
>The following condition, for example, evaluates to FALSE:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>IF 'Steven' = 'steven'</PRE
></BLOCKQUOTE
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="SQL2-CH-2-SECT-3.1"
>2.3.1 Embedding Single Quotes Inside a String</A
></H3
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="AUTOID-2030"
></A
> <A
CLASS="indexterm"
NAME="AUTOID-2032"
></A
> <A
CLASS="indexterm"
NAME="AUTOID-2035"
></A
>The trickiest part of working with string literals comes when you need to include a single quote inside a string literal (as part of the literal itself). Generally, the rule is that you write two single quotes next to each other inside a string if you want the literal to contain a single quote in that position. The following table shows the literal in one column and the resulting "internal" string in the second column: </P
><TABLE
CLASS="informaltable"
BORDER="1"
CELLPADDING="3"
><THEAD
CLASS="thead"
><TR
CLASS="row"
VALIGN="TOP"
><TH
CLASS="entry"
ALIGN="LEFT"
ROWSPAN="1"
COLSPAN="1"
>Literal</TH
><TH
CLASS="entry"
ALIGN="LEFT"
ROWSPAN="1"
COLSPAN="1"
>Actual Value</TH
></TR
></THEAD
><TBODY
CLASS="tbody"
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>'There''s no business like show business.'</PRE
></BLOCKQUOTE
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>There's no business like show business.</PRE
></BLOCKQUOTE
></TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>'&quot;Hound of the Baskervilles&quot;'</PRE
></BLOCKQUOTE
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>&quot;Hound of the Baskervilles&quot;</PRE
></BLOCKQUOTE
></TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>'NLS_LANGUAGE=''ENGLISH'''</PRE
></BLOCKQUOTE
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>NLS_LANGUAGE='ENGLISH'</PRE
></BLOCKQUOTE
></TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>''''</PRE
></BLOCKQUOTE
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>'</PRE
></BLOCKQUOTE
></TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>'''hello'''</PRE
></BLOCKQUOTE
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>'hello'</PRE
></BLOCKQUOTE
></TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>''''''</PRE
></BLOCKQUOTE
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>''</PRE
></BLOCKQUOTE
></TD
></TR
></TBODY
></TABLE
><P
CLASS="para"
>Here's a summary of how to embed single quotes in a literal:</P
><UL
CLASS="itemizedlist"
><LI
CLASS="listitem"
><P
CLASS="para"
>To place a single quote inside the literal, put two single quotes together. </P
></LI
><LI
CLASS="listitem"
><P
CLASS="para"
>To place a single quote at the beginning or end of a literal, put three single quotes together. </P
></LI
><LI
CLASS="listitem"
><P
CLASS="para"
>To create a string literal consisting of one single quote, put four single quotes together. </P
></LI
><LI
CLASS="listitem"
><P
CLASS="para"
>To create a string literal consisting of two single quotes together, put six single quotes together. </P
></LI
></UL
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="AUTOID-2087"
></A
> <A
CLASS="indexterm"
NAME="AUTOID-2089"
></A
> <A
CLASS="indexterm"
NAME="AUTOID-2091"
></A
>Two single quotes together is not the same as a double quote character. A double quote character does not have any special significance inside a string literal. It is treated the same as a letter or number. </P
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="SQL2-CH-2-SECT-3.2"
>2.3.2 Numeric Literals</A
></H3
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="AUTOID-2096"
></A
> Numeric literals can be integers or real numbers (a number that contains a fractional component). Note that PL/SQL considers the number 154.00 to be a real number, even though the fractional component is zero and the number is actually an integer. You can also use scientific notation to specify a numeric literal. Use the letter "e" (upper- or lowercase) to raise a number times 10 to the nth power. For example: 3.05E19, 12e-5. </P
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="SQL2-CH-2-SECT-3.3"
>2.3.3 Boolean Literals</A
></H3
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="AUTOID-2102"
></A
> <A
CLASS="indexterm"
NAME="AUTOID-2105"
></A
> <A
CLASS="indexterm"
NAME="AUTOID-2108"
></A
> <A
CLASS="indexterm"
NAME="AUTOID-2111"
></A
> <A
CLASS="indexterm"
NAME="AUTOID-2114"
></A
> Remember that the values TRUE and FALSE are not strings. They are Boolean literals with the literal meaning of TRUE or FALSE. You should never place single quotes around these values. The following code will fail to compile with the error listed below: </P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>DECLARE
   enough_money BOOLEAN;
BEGIN
   IF enough_money = 'TRUE'
   THEN
      ...

PLS-00306: wrong number or types of arguments in call to '='</PRE
></BLOCKQUOTE
><P
CLASS="para"
>Instead, you should reference the literal directly:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>DECLARE
   enough_money BOOLEAN;
BEGIN
   IF enough_money = TRUE
   THEN
      ...</PRE
></BLOCKQUOTE
><P
CLASS="para"
>Better yet, leave out the literal and just let the Boolean variable speak for itself in the conditional clause of the IF statement: </P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>DECLARE
   enough_money BOOLEAN;
BEGIN
   IF enough_money
   THEN
      ...</PRE
></BLOCKQUOTE
><P
CLASS="para"
>If you work with Oracle Forms, you may notice that some of the GET_ built-ins, such as GET_ITEM_PROPERTY, sometimes return a value of TRUE or FALSE. For example: </P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>GET_ITEM_PROPERTY ('block.item', DISPLAYED) </PRE
></BLOCKQUOTE
><P
CLASS="para"
>returns the character string FALSE if the DISPLAYED property is set to "Off" for the specified item. Do not confuse this value with the Boolean literal. The easiest way to keep this all straight is to remember that the GET_ built-ins always return a character string.<A
CLASS="indexterm"
NAME="AUTOID-2125"
></A
> </P
></DIV
></DIV
><DIV
CLASS="htmlnav"
><P
></P
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch02_02.htm"
TITLE="2.2 Identifiers"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 2.2 Identifiers"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="book"
HREF="index.htm"
TITLE="Oracle PL/SQL Programming, 2nd Edition"
><IMG
SRC="../gifs/txthome.gif"
ALT="Oracle PL/SQL Programming, 2nd Edition"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch02_04.htm"
TITLE="2.4 The Semicolon Delimiter"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 2.4 The Semicolon Delimiter"
BORDER="0"></A
></TD
></TR
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
>2.2 Identifiers</TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="index"
HREF="index/idx_0.htm"
TITLE="Book Index"
><IMG
SRC="../gifs/index.gif"
ALT="Book Index"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
>2.4 The Semicolon Delimiter</TD
></TR
></TABLE
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"></DIV
><IMG SRC="../gifs/smnavbar.gif"
USEMAP="#map"
BORDER="0"
ALT="The Oracle Library Navigation">

<P><font size="-1">
<a href="../copyrght.htm#copy">Copyright (c) 2000</a> O'Reilly &amp; Associates. All rights reserved.
</font></P>

<MAP NAME="map">

<AREA SHAPE="RECT"
COORDS="0,0,35,30"
HREF="../index.htm"
ALT="Library Home">

<AREA SHAPE="RECT"
COORDS="40,0,95,30"
HREF="index.htm"
ALT="Oracle PL/SQL Programming, 2nd. Ed.">

<AREA SHAPE="RECT"
COORDS="100,0,200,30"
HREF="../guide8i/index.htm"
ALT="Guide to Oracle 8i Features">

<AREA SHAPE="RECT"
COORDS="205,0,245,30"
HREF="../bipack/index.htm"
ALT="Oracle Built-in Packages">

<AREA SHAPE="RECT"
COORDS="250,0,320,30"
HREF="../advprog/index.htm"
ALT="Advanced PL/SQL Programming with Packages">

<AREA SHAPE="RECT"
COORDS="325,0,420,30"
HREF="../webapp/index.htm"
ALT="Oracle Web Applications">

<AREA SHAPE="RECT"
COORDS="425,0,490,30"
HREF="../langpkt/index.htm"
ALT="Oracle PL/SQL Language Pocket Reference">

<AREA SHAPE="RECT"
COORDS="495,0,570,30"
HREF="../bipkt/index.htm"
ALT="Oracle PL/SQL Built-ins Pocket Reference">
</MAP>

</BODY
>
<!-- Mirrored from liso.cs.pusan.ac.kr by HTTrack Website Copier/3.x [XR&CO'2001] -->
</HTML
>
