<HTML
><HEAD
><TITLE
>[Chapter 21] External Procedures</TITLE
><META
NAME="DC.Creator"
CONTENT="Steven Feuerstein &amp; Bill Pribyl"><META
NAME="DC.Date"
CONTENT="2000-04-29T19:10:09Z"><META
NAME="DC.Format"
CONTENT="text/html"
SCHEME="MIME"><META
NAME="DC.Identifier"
CONTENT="O'Reilly and Associates CD-ROM-1-56592-335-9E"><META
NAME="DC.Language"
CONTENT="en-US"><META
NAME="DC.Publisher"
CONTENT="O'Reilly &amp; Associates, Inc."><META
NAME="DC.Source"
CONTENT="1-56592-335-9E"
SCHEME="ISBN"><META
NAME="DC.Subject.Keyword"
CONTENT="Oracle PL/SQL"><META
NAME="DC.Title"
CONTENT="Oracle PL/SQL Programming, 2nd Edition"><META
NAME="DC.Type"
CONTENT="Text.Monograph"><META
NAME="generator"
CONTENT="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><LINK
REL="stylesheet"
TYPE="text/css"
HREF="../style/style1.css"><LINK
REV="made"
HREF="mailto:online-books@oreilly.com"
TITLE="Online Books Comments"><LINK
REL="up"
HREF="part05.htm"
TITLE="V. New PL/SQL8 Features"><LINK
REL="prev"
HREF="ch20_08.htm"
TITLE="20.8 Postscript: Using the BFILE Datatype"><LINK
REL="next"
HREF="ch21_02.htm#SQL2-CH-21-SECT-2.1"
TITLE="21.2 Steps in Creating an External Procedure"></HEAD
><BODY
><DIV
CLASS="htmlnav"
><H1
><IMG
SRC="gifs/smbanner.gif"
ALT="Oracle PL/SQL Programming, 2nd Edition"
USEMAP="#srchmap"
BORDER="0"></H1
><MAP
NAME="srchmap"
><AREA
SHAPE="RECT"
COORDS="0,0,466,65"
HREF="index.htm"
ALT="Oracle PL/SQL Programming, 2nd Edition"><AREA
SHAPE="RECT"
COORDS="467,0,514,18"
HREF="jobjects/fsearch.htm"
ALT="Search this book"></MAP
><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch20_08.htm"
TITLE="20.8 Postscript: Using the BFILE Datatype"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 20.8 Postscript: Using the BFILE Datatype"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><SPAN
CLASS="NAVTITLE"
>Chapter 21</SPAN
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch21_02.htm#SQL2-CH-21-SECT-2.1"
TITLE="21.2 Steps in Creating an External Procedure"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 21.2 Steps in Creating an External Procedure"
BORDER="0"></A
></TD
></TR
></TABLE
>&nbsp;<HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"></DIV
><DIV
CLASS="chapter"
><H1
CLASS="chapter"
><A
CLASS="title"
NAME="SQL2-CH-21"
>21. External Procedures</A
></H1
><DIV
CLASS="htmltoc"
><P
><B
>Contents:</B
><BR><A
CLASS="sect1"
HREF="#SQL2-CH-21-SECT-1"
TITLE="21.1 Introduction to External Procedures"
>Introduction to External Procedures</A
><BR><A
CLASS="sect1"
HREF="ch21_02.htm#SQL2-CH-21-SECT-2.1"
TITLE="21.2 Steps in Creating an External Procedure"
>Steps in Creating an External Procedure</A
><BR><A
CLASS="sect1"
HREF="ch21_03.htm#SQL2-CH-21-SECT-3.2"
TITLE="21.3 Syntax for External Procedures"
>Syntax for External Procedures</A
><BR><A
CLASS="sect1"
HREF="ch21_04.htm#ch21-26-fm2xml"
TITLE="21.4 Mapping Parameters"
>Mapping Parameters</A
><BR><A
CLASS="sect1"
HREF="ch21_05.htm"
TITLE="21.5 OCI Service Routines"
>OCI Service Routines</A
><BR><A
CLASS="sect1"
HREF="ch21_06.htm#SQL2-CH-21-SECT-6.1"
TITLE="21.6 External Procedure Housekeeping"
>External Procedure Housekeeping</A
><BR><A
CLASS="sect1"
HREF="ch21_07.htm#SQL2-CH-21-SECT-7.2"
TITLE="21.7 Examples"
>Examples</A
></P
><P
></P
></DIV
><P
CLASS="para"
>I've lost count of how many times I've heard the question "Can I call <EM
CLASS="emphasis"
>whatever</EM
> from within Oracle?" Typically, <EM
CLASS="emphasis"
>whatever</EM
> is a program that interacts with the external environment: sending email, polling or controlling hardware, or invoking the C library functions that PL/SQL lacks. Until very recently, the standard answer was "No, you can't do that directly, but you can use a database pipe and write a daemon that responds to requests on the pipe." An early paper on this approach[<A
CLASS="footnote"
HREF="#AUTOID-19442"
>1</A
>] describes pipes as an alternative to an even more primitive approach: using a temporary table as a sort of "bulletin board" for interprocess communication.[<A
CLASS="footnote"
HREF="#AUTOID-19445"
>2</A
>] </P
><BLOCKQUOTE
CLASS="footnote"
><DIV
CLASS="footnote"
><P
CLASS="para"
><A
CLASS="footnote"
NAME="AUTOID-19442"
>[1]</A
> See Dan Bikle, "Inter-Application Communication Using Oracle7 Database Pipes," <CITE
CLASS="citetitle"
>Select</CITE
> Vol. 1, No. 2, Winter 93/94, p. 34. </P
></DIV
><DIV
CLASS="footnote"
><P
CLASS="para"
><A
CLASS="footnote"
NAME="AUTOID-19445"
>[2]</A
> The original paper did not present a true UNIX daemon (which has a specific definition to UNIX and C programmers), but rather discussed the generic idea of a continuously running process.</P
></DIV
></BLOCKQUOTE
><P
CLASS="para"
>Temporary tables have serious limitations for this use, and even database pipe-based daemons have their shortcomings. Packing and unpacking the contents of the pipe is a challenge; the daemon typically execute in a separate Oracle session (and thus can't participate in a transaction), and the solution is inherently single-threaded. Moreover, with the pipe solution, it's difficult to get return values back from the daemon to the caller. What we need from Oracle is a fast, reliable way of calling out to operating system commands or functions from within PL/SQL. Better yet, Oracle should allow external routines to serve as user-defined functions so that you can use them in SQL statements. </P
><P
CLASS="para"
>Enter <EM
CLASS="emphasis"
>external procedures</EM
><A
CLASS="indexterm"
NAME="ch21-idx-7550-1"
></A
><A
CLASS="indexterm"
NAME="ch21-idx-7550-2"
></A
>. This long-awaited Oracle feature allows you to call anything that you can compile into the native "shared library" format of the operating system. Yes, the external procedures features is reliable; yes, it's multi-threaded; yes, communication is bidirectional; and yes, you can use external procedures as user-defined functions in SQL. </P
><P
CLASS="para"
>Under UNIX, a shared library is a shared object or <I
CLASS="filename"
>.so</I
> file; under Windows NT, it's a DLL (dynamically linked library). You can write the external routine in any language you wish, as long as your compiler and linker will generate the appropriate shared library format that is callable from C. In Oracle 8.0, however, C will be the most common language for external procedures, since all of Oracle's support libraries are written in C. Curiously, Oracle has named this feature external "procedures," although the external routines you invoke are, technically speaking, C functions. (There is no such thing as a procedure in C.) If the C function returns a value, you map it to a PL/SQL function; if it returns no value, you map it to a PL/SQL procedure. </P
><P
CLASS="para"
>This chapter presents a few examples of external procedures (and functions). In addition, we review the preconditions you must establish before they will work, and present the syntax for creating and using this new feature. So, the next time you hear the question about calling <EM
CLASS="emphasis"
>whatever</EM
>, you can answer, "You bet!...in Oracle8." </P
><P
CLASS="para"
>This chapter does <EM
CLASS="emphasis"
>not</EM
> discuss "distributed external procedures," which are a way of accessing non-Oracle data sources from an Oracle server. Despite the name, these procedures are not closely related to external procedures. Neither do we discuss at length the programming techniques that allow your 3GL code to call back to Oracle (we'll leave that to the books on programming C language access to Oracle). But we do include some samples that you can use right away. </P
><DIV
CLASS="sect1"
><H2
CLASS="sect1"
><A
CLASS="title"
NAME="SQL2-CH-21-SECT-1"
>21.1 Introduction to External Procedures</A
></H2
><P
CLASS="para"
>How do external procedures work? How can I build my own? What are their advantages and disadvantages? Before answering in detail, let's take a look at a quick example. </P
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="SQL2-CH-21-SECT-1.1"
>21.1.1 Example: Determining Free Disk Space on Windows NT</A
></H3
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="ch21-idx-7558-1"
></A
><A
CLASS="indexterm"
NAME="ch21-idx-7558-2"
></A
><A
CLASS="indexterm"
NAME="ch21-idx-7558-3"
></A
>Here is an external procedure that will discover the amount of free space on a given disk drive. This example is just to get you going. We won't try to explain all the details at this point. This example was designed for Windows NT 4.0, but the idea can be applied to any operating system that meets the requirements for external procedures. In this case, we simply make a call to the appropriate function in the Windows kernel, rather than writing our own DLL. </P
><P
CLASS="para"
>Windows NT's kernel, <EM
CLASS="emphasis"
>kernel32.dll</EM
>, contains a routine called GetDiskFreeSpaceA, which accepts a drive letter as an input parameter and returns four statistics about the drive. When we register the routine with PL/SQL, we will provide mappings for each of these parameters to a PL/SQL parameter. Then, when we invoke the external procedure from a PL/SQL program, we'll use these statistics to compute the free disk space. </P
><P
CLASS="para"
>First, we need to define a "library" to tell Oracle where the DLL lives: </P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>/* Filename on companion disk: nt_space.sql */
CREATE OR REPLACE LIBRARY nt_kernel
AS
   'c:\winnt\system32\kernel32.dll';</PRE
></BLOCKQUOTE
><P
CLASS="para"
>We'll create a package called disk_util that will contain our function, which we will call get_disk_free_space as shown here: </P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>CREATE OR REPLACE PACKAGE disk_util
AS
   FUNCTION get_disk_free_space
     (root_path IN VARCHAR2,
      sectors_per_cluster OUT PLS_INTEGER,
      bytes_per_sector OUT PLS_INTEGER,
      number_of_free_clusters OUT PLS_INTEGER,
      total_number_of_clusters OUT PLS_INTEGER)
   RETURN PLS_INTEGER;
   PRAGMA RESTRICT_REFERENCES (get_disk_free_space,
      WNPS, RNPS, WNDS, RNDS);
END disk_util;</PRE
></BLOCKQUOTE
><P
CLASS="para"
>All the magic is in the package body, which uses the EXTERNAL clause rather than a BEGIN..END block. This clause is where we define the interface between PL/SQL and the external routine: </P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>CREATE OR REPLACE PACKAGE BODY disk_util
AS
   FUNCTION get_disk_free_space
     (root_path IN VARCHAR2,
      sectors_per_cluster OUT PLS_INTEGER,
      bytes_per_sector OUT PLS_INTEGER,
      number_of_free_clusters OUT pls_integer,
      total_number_of_clusters OUT PLS_INTEGER)
   RETURN PLS_INTEGER
   IS EXTERNAL
      LIBRARY nt_kernel          -- our library (defined previously)
      NAME &quot;GetDiskFreeSpaceA&quot;   -- name of function in kernel32.dll
      LANGUAGE C                 -- external routine is written in C
      CALLING STANDARD PASCAL    -- uses Pascal parameter convention
      PARAMETERS                 -- map PL/SQL to C parameters by
                                 -- position
         (root_path STRING,
          sectors_per_cluster BY REFERENCE LONG,
          bytes_per_sector BY REFERENCE LONG,
          number_of_free_clusters BY REFERENCE LONG,
          total_number_of_clusters BY REFERENCE LONG,
          RETURN LONG); -- &quot;return code&quot; indicating success or failure
END disk_util;</PRE
></BLOCKQUOTE
><P
CLASS="para"
>Assuming that the DBA has set up the environment to support external procedures (see <A
CLASS="xref"
HREF="ch21_02.htm#SQL2-CH-21-SECT-2.1"
>Section 21.2.1, "Step 1: Set Up the Listener"</A
> later in this chapter), we can make an easy call to compute free disk space on the C: drive: </P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>SET SERVEROUTPUT ON SIZE 100000
DECLARE
   lroot_path VARCHAR2(3) := 'C:\';   -- look at C drive
   lsectors_per_cluster PLS_INTEGER;
   lbytes_per_sector PLS_INTEGER;
   lnumber_of_free_clusters PLS_INTEGER;
   ltotal_number_of_clusters PLS_INTEGER;
   return_code PLS_INTEGER;
   free_meg REAL;
BEGIN
   /* Call the external procedure. We ignore the return code
   || in this simple example.
   */
   return_code := disk_util.get_disk_free_space (lroot_path,
      lsectors_per_cluster, lbytes_per_sector,
      lnumber_of_free_clusters, ltotal_number_of_clusters);

   /* Using the drive statistics that are returned from the
   || external procedure, compute the amount of free disk space.
   || Remember Megabytes = (Bytes / 1024 / 1024)
   */
   free_meg := lsectors_per_cluster * lbytes_per_sector *
               lnumber_of_free_clusters / 1024 / 1024;

   DBMS_OUTPUT.PUT_LINE('free disk space, megabytes = ' || free_meg);
END;</PRE
></BLOCKQUOTE
><P
CLASS="para"
>On my machine, this fragment produces the following output:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>free disk space, megabytes = 214.53515625</PRE
></BLOCKQUOTE
><P
CLASS="para"
>Of course, you could put this computation in a named function or procedure, and even make it part of the disk_util<A
CLASS="indexterm"
NAME="AUTOID-19491"
></A
> <A
CLASS="indexterm"
NAME="AUTOID-19492"
></A
> package. </P
><H4
CLASS="figure"
><A
CLASS="title"
NAME="SQL2-CH-21-FIG-1"
>Figure 21.1: Invoking an external procedure</A
></H4
><IMG
CLASS="graphic"
SRC="figs/sql2.2101.gif"
ALT="Figure 21.1"></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="SQL2-CH-21-SECT-1.2"
>21.1.2 Architecture</A
></H3
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="ch21-idx-7562-1"
></A
>Let's take a look at what happens when you invoke an external procedure. As shown in <A
CLASS="xref"
HREF="ch21_01.htm"
>Figure 21.1</A
>, the process flow starts with a PL/SQL application that calls a special PL/SQL "module body." In our example above, this body defines the get_disk_free_space function. PL/SQL then looks for a special Net8 listener[<A
CLASS="footnote"
HREF="#AUTOID-19503"
>3</A
>] process, which should already be running in the background. At this point, the listener will spawn an executable program called extproc. This process loads the dynamic library and then invokes the desired routine in the shared library, whereupon it returns its results back to PL/SQL. </P
><BLOCKQUOTE
CLASS="footnote"
><DIV
CLASS="footnote"
><P
CLASS="para"
><A
CLASS="footnote"
NAME="AUTOID-19503"
>[3]</A
> Net8 is the name for what was formerly the Oracle SQL*Net product. A Net8 listener is a background process, typically configured by the DBA, which enables other processes to connect to a given service such as the Oracle server.</P
></DIV
></BLOCKQUOTE
><P
CLASS="para"
>To limit overhead, only one extproc process needs to run for a given Oracle session; this process starts with the first external procedure call and terminates when the session exits. For each distinct external procedure you call, this extproc process loads the associated shared library, but only if it hasn't already been loaded. </P
><P
CLASS="para"
>In case you are unfamiliar with <A
CLASS="indexterm"
NAME="AUTOID-19507"
></A
>dynamic linking, we've provided a few words of explanation. Calling a dynamically linked routine simply maps the shared code pages into the address space of the "user" process. Then, when that process touches one of the pages of the shared library, it will be paged into physical memory, if it isn't already there. The resident pages of the mapped shared library file will be shared automatically between users of that library.[<A
CLASS="footnote"
HREF="#AUTOID-19509"
>4</A
>] In practical terms, this means that heavy concurrent use of your external procedure often requires a <EM
CLASS="emphasis"
>lot </EM
>less computer processing power and memory than, say, the primitive approach you might take with database pipes.<A
CLASS="indexterm"
NAME="AUTOID-19514"
></A
> </P
><BLOCKQUOTE
CLASS="footnote"
><DIV
CLASS="footnote"
><P
CLASS="para"
><A
CLASS="footnote"
NAME="AUTOID-19509"
>[4]</A
> This description applies to Sun's Solaris operating system as well as to Windows NT. For a more detailed discussion from a UNIX perspective, see Adrian Cockroft's performance column, "Which is Better&nbsp;-- Static or Dynamic Linking?" in <EM
CLASS="emphasis"
>SunWorld Online</EM
>, February 1996, at <A
CLASS="systemitem.url"
HREF="../../../../../../../www.tritec.de/sunworldonline/swol-02-1996/swol-02-perf.html"
>http://www.tritec.de/sunworldonline/swol-02-1996/swol-02-perf.html</A
>.</P
></DIV
></BLOCKQUOTE
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="SQL2-CH-21-SECT-1.3"
>21.1.3 Advantages</A
></H3
><P
CLASS="para"
>Oracle has provided a number of features that make external procedures truly an industrial-strength resource. The four major features are summarized here. </P
><UL
CLASS="itemizedlist"
><LI
CLASS="listitem"
><P
CLASS="para"
>Oracle external procedures use shared libraries rather than executables. Requiring the external routine to be in a dynamically linked library, rather than in a statically linked module, helps prevent heavy use of the procedure from consuming your machine. By contrast, static linking means that all of the necessary libraries are actually copied into your compiled program, and each execution requires its own address space. By requiring a library rather than a program, Oracle further allows you to bundle many different external routines conveniently together into a single shared library file. Co-locating a family of related routines in one shared library provides the benefits of increased performance as well as manageability. </P
></LI
><LI
CLASS="listitem"
><P
CLASS="para"
>Oracle external procedures run in a separate memory space from the main kernel processes. This is a good thing; it makes it easy to prevent your custom code from stepping on the memory used by the database server. While it is technically possible to write an external procedure that would crash the Oracle server, you have to set out to do so. If the external procedure crashes, the companion process, extproc, returns an error to the PL/SQL engine, which in turn reports it to the application. </P
></LI
><LI
CLASS="listitem"
><P
CLASS="para"
>External procedures provide full transaction support; that is, they can participate fully in the current transaction. By accepting "context" information from PL/SQL, the procedure can call back to the database to fetch data, make SQL or PL/SQL calls, and raise exceptions. In the current release, utilizing these features requires some low-level Oracle Call Interface (OCI) programming...but at least it's possible! </P
></LI
><LI
CLASS="listitem"
><P
CLASS="para"
>Oracle enforces the execution of external procedures with database-level security. At the first level of security, only the DBA can execute or grant privileges on the required CREATE LIBRARY statement that tells Oracle where the operating system file exists. At the next level of security, users may only invoke the external procedure if they are granted EXECUTE privilege on it. </P
></LI
></UL
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="SQL2-CH-21-SECT-1.4"
>21.1.4 Limitations</A
></H3
><P
CLASS="para"
>External procedures are not perfect, although their benefits far outweigh their shortcomings. I have no doubt that external procedures will find uses in many applications. Here are some of the current limitations of these procedures: </P
><UL
CLASS="itemizedlist"
><LI
CLASS="listitem"
><P
CLASS="para"
>Despite the wonders of shared libraries, Oracle's architecture requires an unavoidable amount of interprocess communication. Moreover, in Oracle 8.0, extproc is single-threaded; while there is only one external procedure process per session, each session does require its own process. (A future version may be multi-threaded, allowing sessions to share a smaller number of extproc processes.) </P
></LI
><LI
CLASS="listitem"
><P
CLASS="para"
>External procedures (at least, as they are implemented in their first release) cannot pass parameters of any user-defined type. Arguments must be conventional scalars. If you wish to exchange objects or collections, a possible workaround is to write a PL/SQL module that would split them up into scalars before calling the external procedure, and reassemble them upon return. </P
></LI
><LI
CLASS="listitem"
><P
CLASS="para"
>With Oracle's current implementation, extproc closes the shared library after it's called, meaning that libraries are not cached. Although this approach could save memory, it could also mean more of a CPU hit for subsequent calls. In addition, the overhead for the first external procedure call from a given session may result in a noticeable delay in response time; however, subsequent calls are much faster.<EM
CLASS="emphasis"
></EM
><A
CLASS="indexterm"
NAME="AUTOID-19538"
></A
> </P
></LI
></UL
></DIV
></DIV
></DIV
><DIV
CLASS="htmlnav"
><P
></P
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch20_08.htm"
TITLE="20.8 Postscript: Using the BFILE Datatype"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 20.8 Postscript: Using the BFILE Datatype"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="book"
HREF="index.htm"
TITLE="Oracle PL/SQL Programming, 2nd Edition"
><IMG
SRC="../gifs/txthome.gif"
ALT="Oracle PL/SQL Programming, 2nd Edition"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch21_02.htm#SQL2-CH-21-SECT-2.1"
TITLE="21.2 Steps in Creating an External Procedure"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 21.2 Steps in Creating an External Procedure"
BORDER="0"></A
></TD
></TR
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
>20.8 Postscript: Using the BFILE Datatype</TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="index"
HREF="index/idx_0.htm"
TITLE="Book Index"
><IMG
SRC="../gifs/index.gif"
ALT="Book Index"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
>21.2 Steps in Creating an External Procedure</TD
></TR
></TABLE
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"></DIV
><IMG SRC="../gifs/smnavbar.gif"
USEMAP="#map"
BORDER="0"
ALT="The Oracle Library Navigation">

<P><font size="-1">
<a href="../copyrght.htm#copy">Copyright (c) 2000</a> O'Reilly &amp; Associates. All rights reserved.
</font></P>

<MAP NAME="map">

<AREA SHAPE="RECT"
COORDS="0,0,35,30"
HREF="../index.htm"
ALT="Library Home">

<AREA SHAPE="RECT"
COORDS="40,0,95,30"
HREF="index.htm"
ALT="Oracle PL/SQL Programming, 2nd. Ed.">

<AREA SHAPE="RECT"
COORDS="100,0,200,30"
HREF="../guide8i/index.htm"
ALT="Guide to Oracle 8i Features">

<AREA SHAPE="RECT"
COORDS="205,0,245,30"
HREF="../bipack/index.htm"
ALT="Oracle Built-in Packages">

<AREA SHAPE="RECT"
COORDS="250,0,320,30"
HREF="../advprog/index.htm"
ALT="Advanced PL/SQL Programming with Packages">

<AREA SHAPE="RECT"
COORDS="325,0,420,30"
HREF="../webapp/index.htm"
ALT="Oracle Web Applications">

<AREA SHAPE="RECT"
COORDS="425,0,490,30"
HREF="../langpkt/index.htm"
ALT="Oracle PL/SQL Language Pocket Reference">

<AREA SHAPE="RECT"
COORDS="495,0,570,30"
HREF="../bipkt/index.htm"
ALT="Oracle PL/SQL Built-ins Pocket Reference">
</MAP>

</BODY
>
<!-- Mirrored from liso.cs.pusan.ac.kr by HTTrack Website Copier/3.x [XR&CO'2001] -->
</HTML
>
