<HTML
><HEAD
><TITLE
>[Chapter 18] 18.2 Oracle Objects Example</TITLE
><META
NAME="DC.Creator"
CONTENT="Steven Feuerstein &amp; Bill Pribyl"><META
NAME="DC.Date"
CONTENT="2000-04-29T19:06:26Z"><META
NAME="DC.Format"
CONTENT="text/html"
SCHEME="MIME"><META
NAME="DC.Identifier"
CONTENT="O'Reilly and Associates CD-ROM-1-56592-335-9E"><META
NAME="DC.Language"
CONTENT="en-US"><META
NAME="DC.Publisher"
CONTENT="O'Reilly &amp; Associates, Inc."><META
NAME="DC.Source"
CONTENT="1-56592-335-9E"
SCHEME="ISBN"><META
NAME="DC.Subject.Keyword"
CONTENT="Oracle PL/SQL"><META
NAME="DC.Title"
CONTENT="Oracle PL/SQL Programming, 2nd Edition"><META
NAME="DC.Type"
CONTENT="Text.Monograph"><META
NAME="generator"
CONTENT="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><LINK
REL="stylesheet"
TYPE="text/css"
HREF="../style/style1.css"><LINK
REV="made"
HREF="mailto:online-books@oreilly.com"
TITLE="Online Books Comments"><LINK
REL="up"
HREF="ch18_01.htm"
TITLE="18. Object Types"><LINK
REL="prev"
HREF="ch18_01.htm"
TITLE="18.1 Introduction to Oracle8 Objects"><LINK
REL="next"
HREF="ch18_03.htm#SQL2-CH-18-SECT-3.6.1"
TITLE="18.3 Syntax for Creating Object Types"></HEAD
><BODY
><DIV
CLASS="htmlnav"
><H1
><IMG
SRC="gifs/smbanner.gif"
ALT="Oracle PL/SQL Programming, 2nd Edition"
USEMAP="#srchmap"
BORDER="0"></H1
><MAP
NAME="srchmap"
><AREA
SHAPE="RECT"
COORDS="0,0,466,65"
HREF="index.htm"
ALT="Oracle PL/SQL Programming, 2nd Edition"><AREA
SHAPE="RECT"
COORDS="467,0,514,18"
HREF="jobjects/fsearch.htm"
ALT="Search this book"></MAP
><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch18_01.htm"
TITLE="18.1 Introduction to Oracle8 Objects"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 18.1 Introduction to Oracle8 Objects"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><SPAN
CLASS="NAVTITLE"
><A
CLASS="chapter"
REL="up"
HREF="ch18_01.htm"
TITLE="18. Object Types"
>Chapter 18<BR>Object Types</A
></SPAN
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch18_03.htm#SQL2-CH-18-SECT-3.6.1"
TITLE="18.3 Syntax for Creating Object Types"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 18.3 Syntax for Creating Object Types"
BORDER="0"></A
></TD
></TR
></TABLE
>&nbsp;<HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"></DIV
><DIV
CLASS="sect1"
><H2
CLASS="sect1"
><A
CLASS="title"
NAME="SQL2-CH-18-SECT-2"
>18.2 Oracle Objects Example</A
></H2
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="ch18-idx-8431-1"
></A
>Relative Pets, a combination pet store and animal hospital, is developing a database to help track their clientele. They tend to take an animal-centric view of the world, so their main entity is the Pet. They're also working on a web site where they can post photos of some critters that have been put up for adoption. Being on the foreleg of technology, they of course want to use an object-relational database like Oracle8. </P
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="SQL2-CH-18-SECT-2.1"
>18.2.1 Defining the Object Type Specification</A
></H3
><P
CLASS="para"
>We'll start simple. In this example, all of the attributes are primitive datatypes rather than objects or collections. The photo attribute is of the Oracle8 datatype BFILE, which is simply a reference to a file stored in the operating system (see <A
CLASS="xref"
HREF="ch04_01.htm"
>Chapter 4, <CITE
CLASS="chapter"
>Variables and Program Data</CITE
></A
>). We'll follow the convention that object type names start with a capital letter and end in "_t." </P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>CREATE OR REPLACE TYPE Pet_t AS OBJECT (
   tag_no INTEGER,            -- pet license number
   name VARCHAR2(60),         -- name of pet
   animal_type VARCHAR2(30),  -- dog, cat, ferret,...
   sex VARCHAR2(1),           -- M/F
   photo BFILE,               -- JPG image in O/S file
   MEMBER FUNCTION set_tag_no (new_tag_no IN INTEGER)
      RETURN Pet_t,
   MEMBER FUNCTION set_photo (file_location IN VARCHAR2)
      RETURN Pet_t,
   MEMBER PROCEDURE print_me
);
/</PRE
></BLOCKQUOTE
><P
CLASS="para"
>This type contains scalar attributes and three methods. Note that the member functions return a value of type Pet_t. This affords flexibility in how the methods can be used later on. </P
><BLOCKQUOTE
CLASS="note"
><P
CLASS="para"
><STRONG
>NOTE:</STRONG
>  In SQL*Plus, you must enter the trailing slash after a CREATE TYPE or CREATE TYPE BODY statement. From this point forward in this text, we omit this trailing slash. </P
></BLOCKQUOTE
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="SQL2-CH-18-SECT-2.2"
>18.2.2 Defining the Object Type Body</A
></H3
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="ch18-idx-8434-1"
></A
>To implement the methods, create the object type body, using a syntax that is remarkably similar to that used to create a package body: </P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>CREATE OR REPLACE TYPE BODY Pet_t AS
   /* set_tag_no: Starting with the attributes of the &quot;current&quot;
   || pet object, return a new pet object with a new tag number.
   */
   MEMBER FUNCTION set_tag_no (new_tag_no IN INTEGER)
      RETURN Pet_t
   IS
      the_pet Pet_t := SELF;  -- initialize to current object
   BEGIN
      the_pet.tag_no := new_tag_no;
      RETURN the_pet;
   END;

   /* set_photo: Return new pet object with new photo filename.
   || Use BFILENAME, a built-in Oracle function that accepts
   || a directory alias and filename and returns a value of
   || type BFILE.
   */
   MEMBER FUNCTION set_photo (file_location IN VARCHAR2)
      RETURN Pet_t
   IS
      the_pet Pet_t := SELF;
   BEGIN
      the_pet.photo := BFILENAME('WEB_PHOTOS', file_location);
      RETURN the_pet;
   END;

   /* Do a simple listing of this object. Don't deal with the
   || contents of the photo, just its name.
   */
   MEMBER PROCEDURE print_me
   IS
      directory_alias VARCHAR2(60);
      file_name VARCHAR2(60);
   BEGIN
      DBMS_LOB.FILEGETNAME(SELF.photo, directory_alias, file_name);
      DBMS_OUTPUT.PUT_LINE('Tag No : ' || tag_no);
      DBMS_OUTPUT.PUT_LINE('Name   : ' || name);
      DBMS_OUTPUT.PUT_LINE('Type   : ' || animal_type);
      DBMS_OUTPUT.PUT_LINE('Sex    : ' || sex);
      DBMS_OUTPUT.PUT_LINE('Photo  : ' || file_name);
   END;
END;</PRE
></BLOCKQUOTE
><P
CLASS="para"
>This code introduces a couple of syntactic devices that we'll cover in detail later, namely the use of the "default constructor" to create an object of the designated type, and the use of the SELF parameter as a means of referring to the object and its component attributes. Notice that this code makes no mention of any tables in the database. </P
><P
CLASS="para"
>We haven't created a comprehensive implementation of this type yet, since we haven't coded methods for setting all of the attributes. Eventually, there could be quite a large number of new attributes, each of which could be managed by at least one method. Yes, an object approach can get a bit code-happy if you look at how the objects are implemented "under the covers." You may be asking yourself, why use these trivial procedures for setting attribute values? Why not expose the attributes and let application programs just set the value? </P
><P
CLASS="para"
>Although exceptions exist, a convention of the object approach is that <EM
CLASS="emphasis"
>all</EM
> operations on object data must be implemented by methods. As soon as you allow the use of a back door to manipulate data, you have violated encapsulation, and you are asking for the same kind of trouble you'd get with excessive use of global variables: code that breaks easily, with low confidence that modifications will be free of errors, and, in general, high maintenance costs (see the discussion of global variables in <A
CLASS="xref"
HREF="ch16_01.htm"
>Chapter 16, <CITE
CLASS="chapter"
>Packages</CITE
></A
>). It's true enough that comprehensive object definitions can be code intensive; the payback comes later on, during maintenance and future development, when well implemented objects are less likely to break and more likely to facilitate reuse and resilience. </P
><DIV
CLASS="sect3"
><H4
CLASS="sect3"
><A
CLASS="title"
NAME="SQL2-CH-18-SECT-2.2.1"
>18.2.2.1 PL/SQL usage </A
></H4
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="ch18-idx-8437-1"
></A
><A
CLASS="indexterm"
NAME="ch18-idx-8437-2"
></A
> <A
CLASS="indexterm"
NAME="ch18-idx-8437-3"
></A
><A
CLASS="indexterm"
NAME="ch18-idx-8437-4"
></A
>To create an object based on a type&nbsp;-- that is, to <I
CLASS="firstterm"
>instantiate</I
> it&nbsp;-- you can use a default <I
CLASS="firstterm"
>constructor</I
>, a function that Oracle makes available as soon as you create a type. The constructor has the same name as the object type, and accepts each attribute as an argument, in the order in which attributes are declared in the object type definition. That is, Pet_t is both the name of an object type and the name of the corresponding default constructor: </P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>DECLARE
   the_pet Pet_t;
BEGIN
   -- Instantiate the_pet using the default constructor
   the_pet := Pet_t(104525, 'Mambo', 'DOG', 'M',
      BFILENAME('WEB_PHOTOS','Mambo.jpg'));

   -- Invoke a method to change the tag number of the_pet
   the_pet := the_pet.set_tag_no(104552);

   -- Print a listing about the_pet
   the_pet.print_me();
END;</PRE
></BLOCKQUOTE
><P
CLASS="para"
>Notice the syntax for invoking the set_tag_no and print_me methods on the_pet. This <I
CLASS="filename"
>object.method</I
> syntax is not uncommon in other OO languages. It's different from <I
CLASS="filename"
>package.procedure_or_function</I
> syntax, because what you find on the left side of the dot is an object instance. That is, a correct call is: </P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
><B
CLASS="emphasis.bold"
>the_pet</B
>.set_tag_no(104552)  -- the_pet is a variable of type Pet_t</PRE
></BLOCKQUOTE
><P
CLASS="para"
>rather than:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
><B
CLASS="emphasis.bold"
>Pet_t</B
>.set_tag_no(104552)  -- invalid; what pet's no. are we changing?</PRE
></BLOCKQUOTE
><P
CLASS="para"
>You have to tell Oracle which particular object instance you want to use. </P
><P
CLASS="para"
>If you prefer, you can use a method invocation that is almost indistinguishable from a conventional packaged function or procedure call, with either named or positional notation. The following calls show how you can simply supply the object instance as the SELF parameter (more about SELF later): </P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
><B
CLASS="emphasis.bold"
>Pet_t</B
>.set_tag_no (<B
CLASS="emphasis.bold"
>the_pet</B
>, 104552)
<B
CLASS="emphasis.bold"
>Pet_t</B
>.set_tag_no (<B
CLASS="emphasis.bold"
>SELF=&gt;the_pet</B
>, new_tag_no=&gt;104552)<A
CLASS="indexterm"
NAME="AUTOID-15992"
></A
>
<A
CLASS="indexterm"
NAME="AUTOID-15993"
></A
>
<A
CLASS="indexterm"
NAME="AUTOID-15994"
></A
>
<A
CLASS="indexterm"
NAME="AUTOID-15995"
></A
></PRE
></BLOCKQUOTE
></DIV
><DIV
CLASS="sect3"
><H4
CLASS="sect3"
><A
CLASS="title"
NAME="SQL2-CH-18-SECT-2.2.2"
>18.2.2.2 DDL usage </A
></H4
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="ch18-idx-8441-1"
></A
><A
CLASS="indexterm"
NAME="ch18-idx-8441-2"
></A
>To create a database structure that will hold persistent objects of a given type, it's blissfully easy to create an object table: </P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>CREATE TABLE pets OF Pet_t
   (PRIMARY KEY (tag_no));</PRE
></BLOCKQUOTE
><P
CLASS="para"
>This creates a table with columns for the attributes. The table also has other special characteristics, such as a hidden object identifier column, on which Oracle automatically creates a unique index. As implied by the PRIMARY KEY clause, it also creates a relational primary key constraint&nbsp;-- and therefore an additional unique index&nbsp;-- on the tag_no column. (You cannot, by the way, use a nonscalar column such as a REF or a collection as the primary key.) </P
><DIV
CLASS="sidebar"
><H4
CLASS="sidebar"
><A
CLASS="title"
NAME="SQL2-CH-18-TABLE-4"
>Encapsulation of Persistent Objects in Oracle?</A
></H4
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="AUTOID-16010"
></A
> <A
CLASS="indexterm"
NAME="AUTOID-16013"
></A
>A conceptually pure implementation of encapsulation would restrict all operations on the object's attributes, meaning that: (1) you would need to implement methods for every different read and write operation; and (2) it would be impossible to read or write object data without using these methods. </P
><P
CLASS="para"
>In practical terms, this means that <EM
CLASS="emphasis"
>if</EM
> you design objects to be responsible for their own persistence&nbsp;-- in other words, you program the methods to know how to perform DML on table(s) that implement the object type&nbsp;-- you should not have to grant table-level INSERT, UPDATE, or DELETE privileges to anyone using the object. Instead, you should be able to simply grant EXECUTE on the object type to the Oracle user or role. </P
><P
CLASS="para"
>For improved reusability, however, there may be cases where you want public object methods to execute under the privilege set of the <EM
CLASS="emphasis"
>invoker</EM
> rather than the object <EM
CLASS="emphasis"
>owner</EM
>. How does this affect reuse? Remember that object types are only templates, not actual tables or columns. Under the owner rights model, if another Oracle user attempted to reuse a type definition "template," he might receive a load of inappropriate privileges, even if only during method execution. And he would wind up making a copy of the object type rather than reusing it&nbsp;-- not an ideal situation, but not the end of the world. </P
><P
CLASS="para"
>By contrast, under an invoker rights model, you would have to grant SELECT, INSERT, UPDATE, and/or DELETE on the object table to every user who needs to perform these operations. Once you do that, encapsulation is lost, since these operations are perfectly happy to attack the data from the relational side, undermining object encapsulation. </P
><P
CLASS="para"
>By relying strictly on owner rights, Oracle 8.0.3 may limit reuse, but at least it does not require you to violate encapsulation. If you GRANT EXECUTE ON <I
CLASS="filename"
>object_type</I
> TO <I
CLASS="filename"
>username</I
>, the user will execute any object methods under the privilege domain of the owner. If the object type owner can delete a table, and writes a table deletion method, the user will also be able to execute that method to delete from the table. </P
><P
CLASS="para"
>If Oracle implements an invoker rights model, how should they do it? In my opinion, Oracle should give PL/SQL developers a choice: we should be able to decide which rights model a given method will use. This option would afford the designer both flexibility for reuse and the security of encapsulation. </P
><P
CLASS="para"
>Without such a choice, a strict invoker rights model could essentially mean that you would not want to read or write persistent objects directly from object methods. Instead, your methods would have to call modules in PL/SQL packages (or vice versa) which manipulate the database, presuming that packages still operated under the owner rights model. </P
><P
CLASS="para"
>The package-encapsulating strategy was available even in Oracle7; schematically, it looks like this: </P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>CREATE TABLE foo (...);
/* foo can be a conventional table or an object table */

CREATE PACKAGE manage_foo AS ...
/* manage_foo contains stored procedures and functions that
|| encapsulate all DML on the foo table. It could also contain
|| REF cursors to encapsulate SELECTs.
*/

GRANT EXECUTE ON manage_foo TO taylor, fernando, kim;
/* Alternatively create an Oracle &quot;role&quot; and grant execute
|| on the role to the users
*/</PRE
></BLOCKQUOTE
></DIV
><P
CLASS="para"
>Proving to ourselves that our table looks right, we can do a "describe" on it as follows: </P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>SQL&gt; desc pets
 Name                            Null?    Type
 ------------------------------- -------- ----
 TAG_NO                                   NUMBER(38)
 NAME                                     VARCHAR2(60)
 ANIMAL_TYPE                              VARCHAR2(30)
 SEX                                      VARCHAR2(1)
 PHOTO                                    BINARY FILE LOB</PRE
></BLOCKQUOTE
><P
CLASS="para"
>and we can insert a record object into the table:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>INSERT INTO pets VALUES(Pet_t(1044526,'Socks','CAT', 'M',
   BFILENAME('WEB_PHOTOS', 'socks.jpg')));</PRE
></BLOCKQUOTE
><P
CLASS="para"
>The INSERT statement uses the constructor in the VALUES clause.[<A
CLASS="footnote"
HREF="#AUTOID-16034"
>10</A
>] Now the object can continue its life more or less permanently in a database table. It can get retrieved by PL/SQL programs or referenced by other tables as needed. However, up to this point, we have not defined any methods that will manage the persistent data. We'll see later how to design these additional methods you have to invoke when programs need to change the state of a persistent object.<A
CLASS="indexterm"
NAME="AUTOID-16036"
></A
> <A
CLASS="indexterm"
NAME="AUTOID-16037"
></A
> <A
CLASS="indexterm"
NAME="AUTOID-16038"
></A
> </P
><BLOCKQUOTE
CLASS="footnote"
><DIV
CLASS="footnote"
><P
CLASS="para"
><A
CLASS="footnote"
NAME="AUTOID-16034"
>[10]</A
> This statement also assumes that we have already created the WEB_PHOTOS directory alias using the SQL CREATE DIRECTORY statement, as in: CREATE DIRECTORY web_photos AS '/u01/www/images/photos'.</P
></DIV
></BLOCKQUOTE
></DIV
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="SQL2-CH-18-SECT-2.3"
>18.2.3 Adding Complex Data Structures</A
></H3
><P
CLASS="para"
>As a dues-paying member of the SPCA, Relative Pets keeps a vaccination history on each animal. To introduce the rich data structures available to objects, we can create a nested table datatype to hold information about vaccinations. Each pet can have many vaccinations. </P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>CREATE TYPE Vaccination_list_t AS TABLE OF VARCHAR2(30);</PRE
></BLOCKQUOTE
><P
CLASS="para"
>(See <A
CLASS="xref"
HREF="ch19_01.htm"
>Chapter 19, <CITE
CLASS="chapter"
>Nested Tables and VARRAYs</CITE
></A
>, for more information about this new collection type.) Since we are going to track the owners of the pets, we could benefit from having a "person" object. For now, we won't give this object type many attributes, but we will implement the RESTRICT_REFERENCES pragma so that we can use its "full_name" function in DML (see <A
CLASS="xref"
HREF="ch17_01.htm"
>Chapter 17, <CITE
CLASS="chapter"
>Calling PL/SQL Functions in SQL</CITE
></A
>, for a full discussion of this pragma): </P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>CREATE TYPE Person_t AS OBJECT (
   person_id INTEGER,
   last_name VARCHAR2(60),
   first_name VARCHAR2(30),
   MEMBER FUNCTION full_name RETURN VARCHAR2,
   PRAGMA RESTRICT_REFERENCES (full_name, RNDS, WNDS, RNPS, WNPS)
 );</PRE
></BLOCKQUOTE
><P
CLASS="para"
>Here is a simple body that implements the full_name method:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>CREATE TYPE BODY Person_t
AS
   MEMBER FUNCTION full_name RETURN VARCHAR2
   IS
   BEGIN
      RETURN first_name || ' ' || last_name;
   END;
END;</PRE
></BLOCKQUOTE
><P
CLASS="para"
>Finally, we can put a vaccination list and an owner in our "pet" object type: </P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>CREATE OR REPLACE TYPE Pet_t AS OBJECT (
   tag_no INTEGER,            -- pet license number
   name VARCHAR2(60),         -- name of pet
   animal_type VARCHAR2(30),  -- dog, cat, ferret,...
   sex VARCHAR2(1),           -- M/F
   photo BFILE,               -- JPG image in O/S file
   <B
CLASS="emphasis.bold"
>vaccinations Vaccination_list_t,</B
>
   <B
CLASS="emphasis.bold"
>owner Person_t,</B
>
   MEMBER FUNCTION set_tag_no (new_tag_no IN INTEGER)
      RETURN Pet_t,
   MEMBER FUNCTION set_photo (file_location IN VARCHAR2)
      RETURN Pet_t,
   MEMBER PROCEDURE print_me
);</PRE
></BLOCKQUOTE
><P
CLASS="para"
>Although not illustrated here, after making this change, we might want to add new member functions in the type specification and body. </P
><P
CLASS="para"
>In this example, we are setting ourselves up to use a nested "person" object within the pet object. This is not necessarily a good idea, since the enclosed objects are not sharable by anything else. That is, if one person owned many pets, the information about the owner would have to be copied into each pet object. We're passing up an opportunity to control data redundancy, which is one of the reasons we are using a such a wonderful database system in the first place. Not to worry: we can use the <A
CLASS="indexterm"
NAME="AUTOID-16055"
></A
>REF keyword to tell Oracle that we want to store only a pointer or <A
CLASS="indexterm"
NAME="ch18-idx-8451-1"
></A
><A
CLASS="indexterm"
NAME="ch18-idx-8451-2"
></A
><A
CLASS="indexterm"
NAME="ch18-idx-8451-3"
></A
><A
CLASS="indexterm"
NAME="ch18-idx-8451-4"
></A
> <EM
CLASS="emphasis"
>reference</EM
> to another (persistent) object. That is, in our final version: </P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>CREATE OR REPLACE TYPE Pet_t AS OBJECT (
   tag_no INTEGER,
   name VARCHAR2(60),
   animal_type VARCHAR2(30),
   sex VARCHAR2(1),
   photo BFILE,
   vaccinations vaccination_list_t,
   <B
CLASS="emphasis.bold"
>owner_ref REF Person_t,</B
>
   MEMBER FUNCTION set_tag_no (new_tag_no IN INTEGER)
      RETURN Pet_t,
   MEMBER FUNCTION set_photo (file_location VARCHAR2)
      RETURN Pet_t,
   MEMBER PROCEDURE print_me,
   MEMBER PROCEDURE vaccinate (vaccination VARCHAR2, on_date DATE),
   PRAGMA RESTRICT_REFERENCES (set_tag_no, RNDS, WNDS, RNPS, WNPS),
   PRAGMA RESTRICT_REFERENCES (set_photo, RNDS, WNDS, RNPS, WNPS)
);</PRE
></BLOCKQUOTE
><P
CLASS="para"
>we use REF Person_t to indicate that this attribute will store a pointer to an object rather than to its contents. </P
><P
CLASS="para"
>And we can build the tables:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>CREATE TABLE persons OF Person_t
   (PRIMARY KEY (person_id));

CREATE TABLE pets OF Pet_t
   (PRIMARY KEY (tag_no))
   NESTED TABLE  vaccinations STORE AS pet_vaccinations_tab;</PRE
></BLOCKQUOTE
><P
CLASS="para"
>Using this separate persons table and the REF attribute will allow the existence of people outside the context of their pets (something the pet-obsessed may not envision, but probably a good idea from a design point of view). In this context, REF is called a <EM
CLASS="emphasis"
>type modifier</EM
><A
CLASS="indexterm"
NAME="AUTOID-16078"
></A
><A
CLASS="indexterm"
NAME="AUTOID-16080"
></A
>. </P
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="ch18-idx-8455-1"
></A
><A
CLASS="indexterm"
NAME="ch18-idx-8455-2"
></A
>Does a REF sound a lot like a foreign key? While there are important differences between REFs and foreign keys (see <A
CLASS="xref"
HREF="ch18_02.htm#SQL2-CH-18-SECT-2.3"
>Table 18.2</A
>), Oracle actually claims that REFs, are "more reliable and persistent" than foreign keys&nbsp;-- probably because REFs do not refer to user-changeable values, but rather to invisible internal values. </P
><P
CLASS="para"
>In fact, the problem with REFs is that they are <EM
CLASS="emphasis"
>too </EM
><A
CLASS="indexterm"
NAME="AUTOID-16093"
></A
>persistent. Oracle currently allows you to delete an object that is the target of a REF without deleting the reference to it. They even dignify this state with a name: a <EM
CLASS="emphasis"
>dangling REF</EM
><A
CLASS="indexterm"
NAME="AUTOID-16097"
></A
>. This is roughly equivalent to what would happen if you delete a department record without changing the records of employees in that department. There is no declarative way to prevent dangling REFs, but it should not be too challenging to do so by implementing pre-delete triggers on the table that contains the "parent" objects.[<A
CLASS="footnote"
HREF="#AUTOID-16099"
>11</A
>] To make life somewhat easier, Oracle provides a predicate, <A
CLASS="indexterm"
NAME="AUTOID-16101"
></A
>IS DANGLING, to test for this condition: </P
><BLOCKQUOTE
CLASS="footnote"
><DIV
CLASS="footnote"
><P
CLASS="para"
><A
CLASS="footnote"
NAME="AUTOID-16099"
>[11]</A
> It is also possible to use a foreign key in combination with a REF. To do so, you would include an attribute for the foreign key in the Pet_t specification and include a FOREIGN KEY clause in the CREATE TABLE statement.</P
></DIV
></BLOCKQUOTE
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>UPDATE pets
   SET owner_ref = NULL
 WHERE owner_ref <B
CLASS="emphasis.bold"
>IS DANGLING</B
>;</PRE
></BLOCKQUOTE
><BR><TABLE
CLASS="table"
BORDER="1"
CELLPADDING="3"
><CAPTION
CLASS="table"
><A
CLASS="title"
NAME="SQL2-CH-18-TABLE-6"
>Table 18.2: Chief Differences between Foreign Keys and REFs </A
></CAPTION
><THEAD
CLASS="thead"
><TR
CLASS="row"
VALIGN="TOP"
><TH
CLASS="entry"
ALIGN="LEFT"
ROWSPAN="1"
COLSPAN="1"
> <P
CLASS="para"
>Characteristic</P
> </TH
><TH
CLASS="entry"
ALIGN="LEFT"
ROWSPAN="1"
COLSPAN="1"
> <P
CLASS="para"
>Foreign Key</P
> </TH
><TH
CLASS="entry"
ALIGN="LEFT"
ROWSPAN="1"
COLSPAN="1"
> <P
CLASS="para"
>REF</P
> </TH
></TR
></THEAD
><TBODY
CLASS="tbody"
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
> <P
CLASS="para"
>Who defines the value used as the "pointer?"</P
> </TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
> <P
CLASS="para"
>User (programmer)</P
> </TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
> <P
CLASS="para"
>System</P
> </TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
> <P
CLASS="para"
>Requirements on the parent</P
> </TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
> <P
CLASS="para"
>Must have primary or unique key</P
> </TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
> <P
CLASS="para"
>Must be an object table or object view</P
> </TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
> <P
CLASS="para"
>Only allows insertions of child if parent exists (or if the referencing columns are null)? </P
> </TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
> <P
CLASS="para"
>Yes, when enabled</P
> </TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
> <P
CLASS="para"
>Yes, since you can only insert a "real" REF</P
> </TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
> <P
CLASS="para"
>Can be defined in such a way that the child may be associated with one of several possible parents? </P
> </TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
> <P
CLASS="para"
>No (although foreign keys have a little-known ability to point to <EM
CLASS="emphasis"
>all</EM
> of several possible parents) </P
> </TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
> <P
CLASS="para"
>Yes; by default, a REF can refer to any row object of the given type</P
> </TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
> <P
CLASS="para"
>Can declaratively restrict the scope of the child so that it can point to only one given parent table? </P
> </TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
> <P
CLASS="para"
>No</P
> </TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
> <P
CLASS="para"
>Yes (by using the SCOPE clause in the CREATE TABLE command)</P
> </TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
> <P
CLASS="para"
>Restricts updates of the parent key when children exist?</P
> </TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
> <P
CLASS="para"
>Yes</P
> </TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
> <P
CLASS="para"
>Yes; object identifiers are not updateable</P
> </TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
> <P
CLASS="para"
>Can prevent the deletion of parent if children exist?</P
> </TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
> <P
CLASS="para"
>Yes</P
> </TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
> <P
CLASS="para"
>No</P
> </TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
> <P
CLASS="para"
>Can cascade deletions of the parent to child (objects)?</P
> </TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
> <P
CLASS="para"
>Yes, with ON DELETE CASCADE</P
> </TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
> <P
CLASS="para"
>No</P
> </TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
> <P
CLASS="para"
>Default type of relationship between parent and child when joined via SQL </P
> </TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
> <P
CLASS="para"
>Equi-join</P
> </TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
> <P
CLASS="para"
>Outer join (when using dot navigation)</P
> </TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
> <P
CLASS="para"
>Parent and child can be on different databases?</P
> </TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
> <P
CLASS="para"
>No; must be enforced with table-level triggers</P
> </TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
> <P
CLASS="para"
>Not in Oracle 8.0.3<A
CLASS="indexterm"
NAME="AUTOID-16191"
></A
> <A
CLASS="indexterm"
NAME="AUTOID-16192"
></A
> </P
> </TD
></TR
></TBODY
></TABLE
><BLOCKQUOTE
CLASS="note"
><P
CLASS="para"
><STRONG
>NOTE:</STRONG
> In <A
CLASS="xref"
HREF="ch18_02.htm#SQL2-CH-18-SECT-2.3"
>Table 18.2</A
>, we use the terminology "parent" and "child" only for convenience; these terms are not always accurate descriptions of objects linked via REFs. </P
></BLOCKQUOTE
><P
CLASS="para"
>Oracle has a special syntax for retrieving and modifying data in both SQL and PL/SQL using the REF operator; they also provide a DEREF operator (can you guess why?). We'll look at those operators a bit later.<A
CLASS="indexterm"
NAME="AUTOID-16197"
></A
> <A
CLASS="indexterm"
NAME="AUTOID-16198"
></A
> </P
></DIV
></DIV
><DIV
CLASS="htmlnav"
><P
></P
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch18_01.htm"
TITLE="18.1 Introduction to Oracle8 Objects"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 18.1 Introduction to Oracle8 Objects"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="book"
HREF="index.htm"
TITLE="Oracle PL/SQL Programming, 2nd Edition"
><IMG
SRC="../gifs/txthome.gif"
ALT="Oracle PL/SQL Programming, 2nd Edition"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch18_03.htm#SQL2-CH-18-SECT-3.6.1"
TITLE="18.3 Syntax for Creating Object Types"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 18.3 Syntax for Creating Object Types"
BORDER="0"></A
></TD
></TR
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
>18.1 Introduction to Oracle8 Objects</TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="index"
HREF="index/idx_0.htm"
TITLE="Book Index"
><IMG
SRC="../gifs/index.gif"
ALT="Book Index"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
>18.3 Syntax for Creating Object Types</TD
></TR
></TABLE
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"></DIV
><IMG SRC="../gifs/smnavbar.gif"
USEMAP="#map"
BORDER="0"
ALT="The Oracle Library Navigation">

<P><font size="-1">
<a href="../copyrght.htm#copy">Copyright (c) 2000</a> O'Reilly &amp; Associates. All rights reserved.
</font></P>

<MAP NAME="map">

<AREA SHAPE="RECT"
COORDS="0,0,35,30"
HREF="../index.htm"
ALT="Library Home">

<AREA SHAPE="RECT"
COORDS="40,0,95,30"
HREF="index.htm"
ALT="Oracle PL/SQL Programming, 2nd. Ed.">

<AREA SHAPE="RECT"
COORDS="100,0,200,30"
HREF="../guide8i/index.htm"
ALT="Guide to Oracle 8i Features">

<AREA SHAPE="RECT"
COORDS="205,0,245,30"
HREF="../bipack/index.htm"
ALT="Oracle Built-in Packages">

<AREA SHAPE="RECT"
COORDS="250,0,320,30"
HREF="../advprog/index.htm"
ALT="Advanced PL/SQL Programming with Packages">

<AREA SHAPE="RECT"
COORDS="325,0,420,30"
HREF="../webapp/index.htm"
ALT="Oracle Web Applications">

<AREA SHAPE="RECT"
COORDS="425,0,490,30"
HREF="../langpkt/index.htm"
ALT="Oracle PL/SQL Language Pocket Reference">

<AREA SHAPE="RECT"
COORDS="495,0,570,30"
HREF="../bipkt/index.htm"
ALT="Oracle PL/SQL Built-ins Pocket Reference">
</MAP>

</BODY
>
<!-- Mirrored from liso.cs.pusan.ac.kr by HTTrack Website Copier/3.x [XR&CO'2001] -->
</HTML
>
