<HTML
><HEAD
><TITLE
>[Chapter 24] 24.2 Debugging Tips and Strategies</TITLE
><META
NAME="DC.Creator"
CONTENT="Steven Feuerstein &amp; Bill Pribyl"><META
NAME="DC.Date"
CONTENT="2000-04-29T19:12:50Z"><META
NAME="DC.Format"
CONTENT="text/html"
SCHEME="MIME"><META
NAME="DC.Identifier"
CONTENT="O'Reilly and Associates CD-ROM-1-56592-335-9E"><META
NAME="DC.Language"
CONTENT="en-US"><META
NAME="DC.Publisher"
CONTENT="O'Reilly &amp; Associates, Inc."><META
NAME="DC.Source"
CONTENT="1-56592-335-9E"
SCHEME="ISBN"><META
NAME="DC.Subject.Keyword"
CONTENT="Oracle PL/SQL"><META
NAME="DC.Title"
CONTENT="Oracle PL/SQL Programming, 2nd Edition"><META
NAME="DC.Type"
CONTENT="Text.Monograph"><META
NAME="generator"
CONTENT="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><LINK
REL="stylesheet"
TYPE="text/css"
HREF="../style/style1.css"><LINK
REV="made"
HREF="mailto:online-books@oreilly.com"
TITLE="Online Books Comments"><LINK
REL="up"
HREF="ch24_01.htm"
TITLE="24. Debugging PL/SQL"><LINK
REL="prev"
HREF="ch24_01.htm"
TITLE="24.1 The Wrong Way to Debug"><LINK
REL="next"
HREF="ch25_01.htm"
TITLE="25. Tuning PL/SQL Applications"></HEAD
><BODY
><DIV
CLASS="htmlnav"
><H1
><IMG
SRC="gifs/smbanner.gif"
ALT="Oracle PL/SQL Programming, 2nd Edition"
USEMAP="#srchmap"
BORDER="0"></H1
><MAP
NAME="srchmap"
><AREA
SHAPE="RECT"
COORDS="0,0,466,65"
HREF="index.htm"
ALT="Oracle PL/SQL Programming, 2nd Edition"><AREA
SHAPE="RECT"
COORDS="467,0,514,18"
HREF="jobjects/fsearch.htm"
ALT="Search this book"></MAP
><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch24_01.htm"
TITLE="24.1 The Wrong Way to Debug"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 24.1 The Wrong Way to Debug"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><SPAN
CLASS="NAVTITLE"
><A
CLASS="chapter"
REL="up"
HREF="ch24_01.htm"
TITLE="24. Debugging PL/SQL"
>Chapter 24<BR>Debugging PL/SQL</A
></SPAN
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="chapter"
HREF="ch25_01.htm"
TITLE="25. Tuning PL/SQL Applications"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 25. Tuning PL/SQL Applications"
BORDER="0"></A
></TD
></TR
></TABLE
>&nbsp;<HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"></DIV
><DIV
CLASS="sect1"
><H2
CLASS="sect1"
><A
CLASS="title"
NAME="SQL2-CH-24-SECT-2"
>24.2 Debugging Tips and Strategies</A
></H2
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="ch24-idx-998384-1"
></A
>I do not pretend in this chapter to offer a comprehensive primer on debugging. The following tips and techniques, however, should improve upon your current set of error-fixing skills. </P
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="SQL2-CH-24-SECT-2.1"
>24.2.1 Gather Data</A
></H3
><P
CLASS="para"
>Gather as much data as possible about when, where, and how the error occurs. It is very unlikely that the first occurrence of an error will give you all the information you will want or need to figure out the source of that error. Upon noticing an error, the temptation is to show off one's knowledge of the program by declaring, "Got it! I know what's going on and I know exactly what to do to fix it." Such a move can be very gratifying when it turns out that you do have a handle on the problem, and that will be the case for simple bugs. Some problems can appear simple, however, and turn out to require extensive testing and analysis. Save yourself the embarrassment of pretending (or believing) that you know more than you actually do. Before rushing to change your code, take these steps: </P
><OL
CLASS="orderedlist"
><LI
CLASS="listitem"
><P
CLASS="para"
><EM
CLASS="emphasis"
>Run the program again to see if the error is reproducible.</EM
> This will be the first indication of the complexity of the problem. It is almost impossible to determine the cause of a problem if you are unable to get it to occur predictably. Once you work out the steps needed to cause the error to occur, you will have gained much valuable information about its cause. </P
></LI
><LI
CLASS="listitem"
><P
CLASS="para"
><EM
CLASS="emphasis"
>Narrow the test case needed to generate the error.</EM
> I recently had to debug a problem in one of my Oracle Forms modules. A pop-up window would lose its data under certain circumstances. At first glance, the rule seemed to be: "For a new call, if you enter only one request, that request will be lost." If I had stopped testing at this point, I would have had to analyze all code that initialized the call record and handled the INSERT logic. Instead, I tried additional variations of data entry and soon found that the data was lost only when I navigated to the pop-up window directly from a certain item. Now I had a very narrow test case to analyze and it was very easy to uncover the error in logic. </P
></LI
><LI
CLASS="listitem"
><P
CLASS="para"
><EM
CLASS="emphasis"
>Examine the circumstances under which the problem does not occur.</EM
> "Failure to fail" can offer many insights into the reason an error does occur. It also helps you narrow down the sections of code and the conditions you have to analyze when you go back to the program. </P
></LI
></OL
><DIV
CLASS="sidebar"
><H4
CLASS="sidebar"
><A
CLASS="title"
NAME="AUTOID-22152"
>Get it Right the First Time</A
></H4
><P
CLASS="para"
>There can be no doubt that the best way to decrease the effort and time required to debug your application is to write code that has fewer bugs. Such code will have fewer errors, and the errors it does have are more likely to be typos and superficial mistakes. A single, fundamental logical flaw in a program can generate a multitude of other symptomatic errors. </P
><P
CLASS="para"
>We all have to accept the fact that it takes more effort and time to be careful and methodical. Yet we are almost always in a rush&nbsp;-- to meet a deadline, to go home and play with the baby, to go bowling. And so we truly, deeply believe that "this next one is easy." Heck, why not just code it straight out? </P
><P
CLASS="para"
>The morning after such a lapse in judgment, however, is uniformly painful and embarrassing. If you have a reputation as a guru with a tool, you may not want to have to go through several rounds of test, debug, and fix to get your program to work. If you are just learning the tool and working hard for a promotion, you can't afford to reveal sloppy programming habits. If you are responsible for a complex project, which is bound to be behind schedule, you've got to make every hour, every line of code count. </P
><P
CLASS="para"
>There is no substitute for getting it right the first time. Here are a few of the things you can do to minimize the number of bugs you introduce into a program: </P
><UL
CLASS="itemizedlist"
><LI
CLASS="listitem"
><P
CLASS="para"
>Understand the purpose of the program and its logic. You should be thoroughly comfortable with the objective of your coding task. You should have a strong picture in your mind of the overall structure of the program and how that relates to the documented specifications before you write a single line of code. With this fundamental grounding, it will be much more difficult for you to introduce gross errors into the program. </P
></LI
><LI
CLASS="listitem"
><P
CLASS="para"
>Use top-down design and stepwise refinement to help keep your eyes on the prize. It is difficult, especially with complicated programs, to translate specifications directly into code without getting a bit lost in the programming details. Before you start coding, use pseudo-code at a very high level to list the different steps or functions needed to build the program. Then, for each of these steps in turn, focus your attention just on the details needed to implement that step. In this way you isolate complexities behind your steps (which will, you hope, turn into modules) and concentrate more effectively on the structure of your program before you worry about its details. </P
></LI
><LI
CLASS="listitem"
><P
CLASS="para"
><EM
CLASS="emphasis"
>Modularize, modularize, modularize!</EM
> Once you are ready to code, avoid writing one large, amorphous program. Instead, break up your code into separate modules, each with a specific purpose, that you can implement and test individually.</P
></LI
></UL
><P
CLASS="para"
> In addition to these high-level tips, follow the many pieces of advice offered throughout the book to improve the quality, readability, and maintainability of your code. Taken together and used together, these techniques should greatly improve your chances of bug-free programs.</P
></DIV
><P
CLASS="para"
>The more information you gather about the problem at hand, the easier it will be to solve that problem. It is worth the extra time it will take to assemble the evidence. So even when you are absolutely sure you are on to that bug, hold off and investigate a little further. </P
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="SQL2-CH-24-SECT-2.2"
>24.2.2 Remain Logical at All Times</A
></H3
><P
CLASS="para"
>Symbolic logic is the life-blood of programmers. No matter which programming language you use, the underlying logical framework is a constant. PL/SQL has one particular syntax. The C language uses different keywords and the IF statement looks a little different. The elegance of LISP demands a very different way of building programs. But underneath it all, symbolic logic provides the backbone on which you hang the statements that solve your problems. </P
><P
CLASS="para"
>The reliance on logical and rational thought in programming is one reason that it is so easy for a developer to learn a new programming language. As long as you can take the statement of a problem and develop a logical solution step by step, the particulars of a language are secondary. </P
><P
CLASS="para"
>With logic at the core of our being, it amazes me to see how often we programmers abandon this logic and pursue the most irrational path to solving a problem. We engage in wishful thinking and highly superstitious, irrational, or dubious thought processes. Even though we know better&nbsp;-- much better&nbsp;-- we find ourselves questioning code that conforms to documented functionality, has worked in the past, and surely works right at that moment. This irrationality almost always involves shifting the blame from oneself to "the other": the computer, the compiler, our spouse, the word processor, whatever. Anything and anybody but our own pristine selves! </P
><P
CLASS="para"
>When you attempt to shift blame, you only put off solving your problem. Computers and compilers may not be intelligent, but they are very fast and they are very consistent. All they can do is follow rules, and you write the rules for them in your program. So when you uncover a bug in your code, take responsibility for that error. Assume that you did something wrong. Don't blame the PL/SQL compiler or Oracle Forms or the text editor. </P
><P
CLASS="para"
>If you do find yourself questioning a basic element or rule in the compiler that has always worked for you in the past (but maybe not in this precise circumstance, right?), it is time to take a break. Better yet, it is time to get someone else to look at your code. It is amazing how another pair of eyes can focus your own analytical powers on the real causes of a problem. </P
><P
CLASS="para"
>Strive to be the Spock of Programming. Accept only what is logical. Reject that which has no explanation. </P
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="SQL2-CH-24-SECT-2.3"
>24.2.3 Analyze Instead of Trying</A
></H3
><P
CLASS="para"
>So you have a pile of data, all the clues you could ask for in profiling the symptoms of your problem. Now it is time to analyze that data. For many people, analysis takes the following form: "Hmm, this looks like it could be the answer. I'll make this change, recompile, and <EM
CLASS="emphasis"
>try</EM
> it to see if it works." </P
><P
CLASS="para"
>What's wrong with this approach? When you try a solution to see what will happen, what you are really saying is: </P
><UL
CLASS="itemizedlist"
><LI
CLASS="listitem"
><P
CLASS="para"
>You are not sure that the change really is a solution. If you were sure, you wouldn't "try" it to see what would happen. You would make the change and then test that change. </P
></LI
><LI
CLASS="listitem"
><P
CLASS="para"
>You have not fully analyzed the error to understand what causes it to happen. If you know why an error occurs, then you know if a particular change will fix that problem. If you are unsure about the source of the error, you will be tempted to simply try a change and examine the impact. This is, unfortunately, very faulty logic. </P
></LI
><LI
CLASS="listitem"
><P
CLASS="para"
>Even if the change stops the error from occurring, you cannot be sure that your "solution" really solved anything. Because you are not sure why the problem occurred, the simple fact that the problem does not appear with your particular test (or tests) does not mean that you fixed the bug. The most you can say is that your change stopped the bug from occurring under certain, perhaps even most, circumstances. </P
></LI
></UL
><P
CLASS="para"
>To truly solve a problem, you must completely analyze the cause of the problem. Once you understand why the problem occurs, you have found the root cause and you can take the steps necessary to make sure the problem goes away in all circumstances. </P
><P
CLASS="para"
>When you identify a potential solution, perform a walk-through of your code based on that change. Don't execute your form. Examine your program and mentally try out different scenarios to test your hypothesis. Once you are certain that your change actually does address the problem, you can then perform a test of that solution. You won't be trying anything; you will be verifying a fix. </P
><P
CLASS="para"
>Analyze your bug fully before you try solutions. If you say to yourself, "Why don't I try this?" in the hope that it will solve the problem, then you are wasting your time and debugging inefficiently. </P
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="SQL2-CH-24-SECT-2.4"
>24.2.4 Take Breaks and Ask for Help</A
></H3
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="ch24-idx-998385-1"
></A
>We are often our own biggest obstacles when it comes to sorting out our problems, whether a program bug or a personal crisis. When you are stuck on the inside of a problem, it is hard to maintain an objective distance and, with that distance, a fresh look. </P
><P
CLASS="para"
>When you are making absolutely no progress and feel that you have tried everything, try these two radical techniques: </P
><UL
CLASS="itemizedlist"
><LI
CLASS="listitem"
><P
CLASS="para"
>Take a break</P
></LI
><LI
CLASS="listitem"
><P
CLASS="para"
>Ask for help</P
></LI
></UL
><P
CLASS="para"
>When I have struggled with a bug for any length of time without success, I not only become ineffective, I also tend to lose perspective. I pursue irrational and superstitious leads. I lose track of what I have already tested and what I have assumed to be right. I get too close to the problem to debug it effectively. </P
><P
CLASS="para"
>My frustration level usually correlates closely to the amount of time I have sat in my ergonomic chair and perched over my wrist-padded keyboard and stared at my low-radiation screen. Often the very simple act of stepping away from the workstation will clear my head and leave room for a solution to pop into place. Did you ever wake up the morning after a very difficult day at work to find the elusive answer sitting there at the end of your dream? </P
><P
CLASS="para"
>Make it a rule to get up and walk around at least once an hour when you are working on a problem&nbsp;-- heck, even when you are writing your programs. Give your brain a chance to let its neural networks make the connections and develop new options for your programming. There is a whole big world out there. Even when your eyes are glued to the monitor and your source code, the world keeps turning. It never hurts to remind yourself of the bigger picture, even if that only amounts to taking note of the weather outside your air-conditioned cocoon. </P
><P
CLASS="para"
>Even more effective than taking a break is asking another person to look at your problem. There is something entirely magical about the dynamic of adding another pair of eyes to the situation. You might have struggled without any result for an hour or two on a problem, and finally, out of desperation, asked a coworker to have a go at it. Then, at the exact moment that you explain the problem to your friend, the solution will jump out at you. It could be a mismatch on names, a false assumption, or a misunderstanding of the IF statement logic. Whatever the case, chances are that you yourself will find it (even though you couldn't for the last two hours) as soon as you ask someone else to find it for you. </P
><P
CLASS="para"
>If the error does not yield itself quite that easily, you still have lots to gain from the perspective of another person who (a) did not write the code and has no subconscious assumptions or biases about the code, and (b) isn't mad at the program. </P
><P
CLASS="para"
>Other benefits accrue from asking for help. You improve the self-esteem and self-confidence of other programmers by showing that you respect their opinions. If you are one of the best developers in the group, then your request for help demonstrates that you, too, make mistakes and need help from the team to move forward. This builds the sense (and reality) of teamwork, which will improve the overall development and testing efforts on the project.<A
CLASS="indexterm"
NAME="AUTOID-22209"
></A
> </P
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="SQL2-CH-24-SECT-2.5"
>24.2.5 Change and Test One Area of Code at a Time</A
></H3
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="ch24-idx-998388-1"
></A
> <A
CLASS="indexterm"
NAME="ch24-idx-998388-2"
></A
> <A
CLASS="indexterm"
NAME="ch24-idx-998388-3"
></A
> One of my biggest problems when I debug my code is that I try to make too many changes at once. I am overconfident about my development and debugging skills. So I make five or ten changes, rerun my test, and get very unreliable and minimally useful results. I find that my changes cause other problems (a common phenomenon until a program stabilizes and a sure sign that lots more debugging and testing is needed), that some of the original errors are gone, but not all of them, and I have no idea which changes fixed which errors, and which changes caused new errors. </P
><P
CLASS="para"
>In short, my debugging effort is a mess and I have to back out of changes until I have a clearer picture of what is happening in my program. </P
><P
CLASS="para"
>Unless you are making very simple changes, you should fix one problem at a time and then test that fix. The amount of time it takes to compile, generate, and test may increase, but in the long run you will be much more productive. </P
><P
CLASS="para"
>One other aspect of incremental testing and debugging is performing "unit tests" on individual modules before you test a program which calls these various modules. If you test the programs separately and determine that they work, when you debug your application as a whole (in a system test), you do not have to worry about whether those modules return correct values or perform the correct actions. Instead, you can concentrate on the code that calls the modules.<A
CLASS="indexterm"
NAME="AUTOID-22225"
></A
> <A
CLASS="indexterm"
NAME="AUTOID-22226"
></A
> <A
CLASS="indexterm"
NAME="AUTOID-22227"
></A
> </P
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="SQL2-CH-24-SECT-2.6"
>24.2.6 Document and Back Up Your Efforts</A
></H3
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="AUTOID-22231"
></A
> <A
CLASS="indexterm"
NAME="AUTOID-22234"
></A
> <A
CLASS="indexterm"
NAME="AUTOID-22237"
></A
> <A
CLASS="indexterm"
NAME="AUTOID-22239"
></A
> Are you offended that I would even say this? Of course we all back up our programs. Of course we all document our efforts. </P
><P
CLASS="para"
>And pigs can fly.</P
><P
CLASS="para"
>What I personally cannot believe is that, as recently as September, 1994, I managed to delete the entire contents of my source code directory for a data transfer utility. Sure, there was a backup&nbsp;-- on tape. It was already archived. It took the operations department five hours to recover my code and then I still lost three hours of work from that morning. You see, I hadn't bothered to back up my code to my own convenient refresh directory. And I had decided to clean up my UNIX subdirectories of old data files. My clean-up script, sad to say, had a bug in it, which caused it to remain in my source directory and remove all files. </P
><P
CLASS="para"
>You can snicker all you want, but the same thing has happened to you, and will happen again, unless you constantly remind yourself to: </P
><UL
CLASS="itemizedlist"
><LI
CLASS="listitem"
><P
CLASS="para"
>Archive your original program version</P
></LI
><LI
CLASS="listitem"
><P
CLASS="para"
>Copy incremental versions to different files</P
></LI
><LI
CLASS="listitem"
><P
CLASS="para"
>Save your current changes</P
></LI
></UL
><P
CLASS="para"
>Suppose you have finished development on a very complex and difficult program. You are not surprised when you discover many different bugs. You hunker right down to the task of analyzing and fixing the errors. As you complete a number of fixes, you should save that program out to a different file so that you have "frozen" a version to which you can return if necessary. Then if, as you continue debugging, you take a wrong turn and code yourself into a nonproductive corner, you do not have to spend time surgically removing your mistakes. You can instead shift back to an earlier version of the program. </P
><P
CLASS="para"
>Clearly, there are source code control programs such as PVCS that handle these functions for you. In many cases with Oracle software, however, these utilities are not used and it is completely up to you to take the steps necessary to protect yourself and your code. </P
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="SQL2-CH-24-SECT-2.7"
>24.2.7 Test All Assumptions</A
></H3
><P
CLASS="para"
>Every move you make, every test you take, every line of code you write has assumptions attached to it. You need to be conscious of those assumptions and, when you start your debug cycle, test those assumptions to make sure they are valid. </P
><P
CLASS="para"
>I recently wasted several hours debugging a problem. I could have solved it in about three minutes&nbsp;-- if I'd properly tested my assumptions. A stored function accepted three parameters and returned a value as shown below: </P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>new_rate := mortgage_rate (down_payment, prime_rate, mortgage_type);</PRE
></BLOCKQUOTE
><P
CLASS="para"
>The mortgage_rate function was, unfortunately, setting new_rate to NULL. After examining the function, it was clear to me that the only way it could return a NULL was if one of the inputs was NULL. I then used this information as follows: </P
><OL
CLASS="orderedlist"
><LI
CLASS="listitem"
><P
CLASS="para"
>I had just examined the global variable holding the mortgage type. That global value was transferred to the mortgage_type variable in an earlier program and passed to my current module, so I knew that it was OK. </P
></LI
><LI
CLASS="listitem"
><P
CLASS="para"
>I performed a walk-through of the code and could not identify how any of the other two variables could be NULL. </P
></LI
><LI
CLASS="listitem"
><P
CLASS="para"
>So I inserted a trace statement before and after the call to mortgage_rate. My code now looked like this: </P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>DBMS_OUTPUT.PUT_LINE
   ('Inputs: ' || TO_CHAR (down_payment) || '-' ||
    TO_CHAR  (prime_rate));

new_rate := mortgage_rate (
   down_payment, prime_rate,
   bank, mortgage_type);

DBMS_OUTPUT.PUT_LINE ('Rate: ' || NVL (TO_CHAR (new_rate), 'Missing'));</PRE
></BLOCKQUOTE
></LI
><LI
CLASS="listitem"
><P
CLASS="para"
>I ran the program and no matter what data I entered on the screen, my trace statements remained the same: </P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>Inputs: 55000-9.5
Rate: Missing</PRE
></BLOCKQUOTE
></LI
></OL
><P
CLASS="para"
>I wracked my obviously overwrought brain: what could cause a stored function to return a NULL value? I looked at the source code for the function again. There wasn't much to it. Just division and multiplication. How could it return a NULL without a NULL input? </P
><P
CLASS="para"
>After two hours of this nonsense, I finally said to myself, "Well, you know that you really haven't verified the value of the mortgage_type variable." I knew that it was OK, but, hey, it wouldn't hurt to check&nbsp;-- and if I didn't solve this one soon I would have to actually ask for help. </P
><P
CLASS="para"
>So I modified my trace statement and, sure enough, the mortgage type was NULL. Turns out that while the global variable held the proper value, the previous program did not pass it to the local variable properly. My assumption did me in. </P
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="AUTOID-22276"
></A
> One of the first assumptions you will make in your testing is that you have valid inputs to your program. This can also be one of the most dangerous assumptions to make. </P
><P
CLASS="para"
>Data errors are perhaps the most frustrating of all the kinds of bugs you will encounter. You follow all the right steps for debugging and analyzing your code, only to discover that there is nothing actually wrong with your program. Instead, the data that drives your program is wrong. </P
><P
CLASS="para"
>I encounter this problem most often in the following situations:</P
><UL
CLASS="itemizedlist"
><LI
CLASS="listitem"
><P
CLASS="para"
>I am testing my code in multiple database instances. Never assume that the data structures and actual rows of data are identical in all instances. Never assume that all indexes have been defined the same way. </P
></LI
><LI
CLASS="listitem"
><P
CLASS="para"
>The reference data is still unstable. What is the valid code for a "closed" call? What are the ten valid company types? If this data is still changing, your program is likely to break. </P
></LI
></UL
><P
CLASS="para"
>If you do not understand why your program is doing what it is doing, make a list of all your assumptions and then test those&nbsp;-- including the data you rely on to run your program. There is a good chance that your error was introduced very early into the process. </P
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="SQL2-CH-24-SECT-2.8"
>24.2.8 Leverage Existing Utilities&nbsp;-- Or Build Your Own</A
></H3
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="ch24-idx-998396-1"
></A
> As you build more and more complex programs, you will find it increasingly difficult and incredibly frustrating to manage and debug these programs without a utility of some kind. Take the time to investigate what is available and what it will do for you. </P
><P
CLASS="para"
>Historically, Oracle Corporation has been very slow to offer debugging and other programmer-oriented utilities. Third-party vendors seem to have taken a clue from Oracle and also have not hurried to provide a strong set of tools for PL/SQL developers. As of mid-year 1997, that situation is finally changing. You can now purchase debuggers from the following vendors: </P
><UL
CLASS="itemizedlist"
><LI
CLASS="listitem"
><P
CLASS="para"
>Oracle Corporation: Procedure Builder</P
></LI
><LI
CLASS="listitem"
><P
CLASS="para"
>Platinum Technology: SQL Station Debugger</P
></LI
><LI
CLASS="listitem"
><P
CLASS="para"
>Technosolutions: SQL Navigator </P
></LI
><LI
CLASS="listitem"
><P
CLASS="para"
>Compuware: XPediter/SQL</P
></LI
></UL
><P
CLASS="para"
>All of these products greatly improve the ability to debug client-side PL/SQL; you will need to carefully examine the specific benefits and features before deciding which of these (and, I hope, by the time this book is published, others as well) fit your needs most closely. </P
><P
CLASS="para"
>If, on the other hand, you cannot find anything that will help (or you can't get the approval to buy the utility of your dreams), you might consider building your own. I have found in the past that it is relatively straightforward to implement utilities that have a significant impact on my debugging capabilities. I built XRay Vision, a debugger for SQL*Forms, implemented entirely in SQL*Forms itself, which gave me the ability to view and modify all variables in my programs. You'll find this debugger, <I
CLASS="filename"
>xrayvizn.zip</I
>, on the RevealNet Web site. While you are unlikely to be using SQL*Forms at this point, you may find the source code of interest (stored in the good, old INP files). </P
><P
CLASS="para"
>When Oracle Forms 4.x (even the version in Oracle Developer/2000 that has its own source code debugger) came along, I realized that it was impossible to view and change data structures created at runtime (record groups, parameter lists, etc.). So I built a utility named Arjy (pronounced "RG" for Record Group), which gave me that access. The shareware version of Arjy, <I
CLASS="filename"
>arjy.zip</I
> is also available at the RevealNet Web site. </P
><P
CLASS="para"
>The basic PL/SQL product from Oracle Corporation will never have everything you need. If you can't find what you need to get the job done, then get creative and take a crack at meeting your own needs. Dive in and build your own utility. Not only will you improve your productivity (and that of others), but you will gain a feeling of intense satisfaction from solving your own problems all by yourself. <A
CLASS="indexterm"
NAME="AUTOID-22308"
></A
> <A
CLASS="indexterm"
NAME="AUTOID-22309"
></A
> </P
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="SQL2-CH-24-SECT-2.9"
>24.2.9 Build Debugging Messages into Your Packages</A
></H3
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="ch24-idx-998387-1"
></A
><A
CLASS="indexterm"
NAME="ch24-idx-998387-2"
></A
><A
CLASS="indexterm"
NAME="ch24-idx-998387-3"
></A
><A
CLASS="indexterm"
NAME="ch24-idx-998387-4"
></A
>If you do not use a GUI-based, source code debugger, you probably spend a fair amount of time throwing debug or trace messages into your code and then removing them when things are fixed. A much better approach is to leave these messages intact, but give yourself lots of flexibility in deciding when you want to see them. </P
><P
CLASS="para"
>The simplest model for this technique is actually built right into the DBMS_OUTPUT package. The DBMS_OUTPUT.PUT_LINE procedure displays output from your PL/SQL program when that program completes execution. But it will not show anything unless the package itself is enabled with a call to DBMS_OUTPUT.ENABLE and/or unless from within SQL*Plus you issue the SET SERVEROUTPUT ON command. Furthermore, this is an all-or-nothing proposition: you either see no output, or you see output from every call to this procedure from every corner of your application. That can be overwhelming if you have inserted lots of trace messages. </P
><P
CLASS="para"
>You can easily come up with a more discerning technique when working with packages. Suppose I have developed a package to perform calculations for profit-and-loss statements. My p_and_l package maintains a last statement date as a global variable for use within the package. I build a "get and set" layer of code around the variable so that applications can retrieve and manipulate the variable&nbsp;-- but only through my code layer. Here is the package: </P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>CREATE OR REPLACE PACKAGE p_and_l
IS
   PROCEDURE set_lastdate (date_in IN DATE);
   FUNCTION lastdate RETURN DATE;

   /* Lots of other stuff, too! */
   . . .
END p_and_l;
/

CREATE OR REPLACE PACKAGE BODY p_and_l
IS
   g_lastdate DATE;

   PROCEDURE set_lastdate (date_in IN DATE)
   IS
   BEGIN
      /* Date cannot be in future. */
      g_lastdate := LEAST (SYSDATE, date_in);
   END;

   FUNCTION lastdate RETURN DATE
   IS
   BEGIN
      RETURN g_lastdate;
   END;
END p_and_l;
/</PRE
></BLOCKQUOTE
><P
CLASS="para"
>As I test this package as part of a large, complex application, suppose that I find that the last date variable is being set improperly, but I can't figure out what is doing it and why. I can go into the p_and_l.set_lastdate procedure and insert a call to DBMS_OUTPUT.PUT_LINE as follows: </P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>PROCEDURE set_lastdate (date_in IN DATE)
IS
BEGIN
   DBMS_OUTPUT.PUT_LINE (`setting date to ` || TO_CHAR (date_in));
   /* Date cannot be in future. */
   g_lastdate := LEAST (SYSDATE, date_in);
END;</PRE
></BLOCKQUOTE
><P
CLASS="para"
>but then I have to see all the output in my application and try to find this one statement among all the others. The approach I take instead is to provide a debug "toggle" in my package which allows me to focus output to just the statements I need to see. With the toggle technique, I add three programs to my package specification: </P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>CREATE OR REPLACE PACKAGE p_and_l
IS
   PROCEDURE set_lastdate (date_in IN DATE);
   FUNCTION lastdate RETURN DATE;

   PROCEDURE dbg;
   PROCEURE nodbg;
   FUNCTION debugging RETURN BOOLEAN;

   /* Lots of other stuff, too! */
   . . .
END p_and_l;
/</PRE
></BLOCKQUOTE
><P
CLASS="para"
>I also modify the package body to both implement this toggle and use it inside the set_lastdate procedure: </P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>CREATE OR REPLACE PACKAGE BODY p_and_l
IS
   g_lastdate DATE;
   g_dbg BOOLEAN := FALSE;

   PROCEDURE dbg IS BEGIN g_dbg := TRUE; END;
   PROCEDURE nodbg IS BEGIN g_dbg := FALSE; END;
   FUNCTION debugging RETURN BOOLEAN RETURN g_dbg; END;

   PROCEDURE set_lastdate (date_in IN DATE)
   IS
   BEGIN
      IF debugging
      THEN
         DBMS_OUTPUT.PUT_LINE (`before set ` || TO_CHAR (g_lastdate));
      END IF;

      /* Date cannot be in future. */
      g_lastdate := LEAST (SYSDATE, date_in);

      IF debugging
      THEN
         DBMS_OUTPUT.PUT_LINE (`after set ` || TO_CHAR (g_lastdate));
      END IF;
   END;

   FUNCTION lastdate RETURN DATE
   IS
   BEGIN
      RETURN g_lastdate;
   END;
END p_and_l;
/</PRE
></BLOCKQUOTE
><P
CLASS="para"
>Then if I want to see what is happening to the g_lastdate variable, I can issue the debug command in SQL*Plus for this package and see just the output I need: </P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>SQL&gt; exec p_and_l.dbg
SQL&gt; exec testing_program
before set 12-JAN-97
after set 15-JAN-97</PRE
></BLOCKQUOTE
><P
CLASS="para"
>Of course, you'd probably want to see more information, such as the execution call stack to see what program called the p_and_l.set_lastdate procedure. You can add anything you want&nbsp;-- all within the confines of the IF debugging clause&nbsp;-- and that information will be available only on a need-to-know basis. You might even decide to free yourself from the confines of DBMS_OUTPUT by writing information out to a database pipe. </P
><P
CLASS="para"
>Furthermore, if you set as a standard in your group that every package is to have a debug toggle, then it will be much easier for users of those packages to debug their own use (or misuse) of that reusable code. They know that there will be a program named PKG.dbg which can be used to extract additional information about package processing. </P
><P
CLASS="para"
>This technique is explored in more detail and with a slightly different focus (production support) in <A
CLASS="xref"
HREF="ch26_01.htm"
>Chapter 26, <CITE
CLASS="chapter"
>Tracing PL/SQL Execution</CITE
></A
>.<A
CLASS="indexterm"
NAME="AUTOID-22339"
></A
> <A
CLASS="indexterm"
NAME="AUTOID-22340"
></A
> <A
CLASS="indexterm"
NAME="AUTOID-22341"
></A
> <A
CLASS="indexterm"
NAME="AUTOID-22342"
></A
> </P
></DIV
></DIV
><DIV
CLASS="htmlnav"
><P
></P
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch24_01.htm"
TITLE="24.1 The Wrong Way to Debug"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 24.1 The Wrong Way to Debug"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="book"
HREF="index.htm"
TITLE="Oracle PL/SQL Programming, 2nd Edition"
><IMG
SRC="../gifs/txthome.gif"
ALT="Oracle PL/SQL Programming, 2nd Edition"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="chapter"
HREF="ch25_01.htm"
TITLE="25. Tuning PL/SQL Applications"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 25. Tuning PL/SQL Applications"
BORDER="0"></A
></TD
></TR
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
>24.1 The Wrong Way to Debug</TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="index"
HREF="index/idx_0.htm"
TITLE="Book Index"
><IMG
SRC="../gifs/index.gif"
ALT="Book Index"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
>25. Tuning PL/SQL Applications</TD
></TR
></TABLE
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"></DIV
><IMG SRC="../gifs/smnavbar.gif"
USEMAP="#map"
BORDER="0"
ALT="The Oracle Library Navigation">

<P><font size="-1">
<a href="../copyrght.htm#copy">Copyright (c) 2000</a> O'Reilly &amp; Associates. All rights reserved.
</font></P>

<MAP NAME="map">

<AREA SHAPE="RECT"
COORDS="0,0,35,30"
HREF="../index.htm"
ALT="Library Home">

<AREA SHAPE="RECT"
COORDS="40,0,95,30"
HREF="index.htm"
ALT="Oracle PL/SQL Programming, 2nd. Ed.">

<AREA SHAPE="RECT"
COORDS="100,0,200,30"
HREF="../guide8i/index.htm"
ALT="Guide to Oracle 8i Features">

<AREA SHAPE="RECT"
COORDS="205,0,245,30"
HREF="../bipack/index.htm"
ALT="Oracle Built-in Packages">

<AREA SHAPE="RECT"
COORDS="250,0,320,30"
HREF="../advprog/index.htm"
ALT="Advanced PL/SQL Programming with Packages">

<AREA SHAPE="RECT"
COORDS="325,0,420,30"
HREF="../webapp/index.htm"
ALT="Oracle Web Applications">

<AREA SHAPE="RECT"
COORDS="425,0,490,30"
HREF="../langpkt/index.htm"
ALT="Oracle PL/SQL Language Pocket Reference">

<AREA SHAPE="RECT"
COORDS="495,0,570,30"
HREF="../bipkt/index.htm"
ALT="Oracle PL/SQL Built-ins Pocket Reference">
</MAP>

</BODY
>
<!-- Mirrored from liso.cs.pusan.ac.kr by HTTrack Website Copier/3.x [XR&CO'2001] -->
</HTML
>
