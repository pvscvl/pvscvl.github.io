<HTML
><HEAD
><TITLE
>[Chapter 3] 3.3 Formatting Control Structures</TITLE
><META
NAME="DC.Creator"
CONTENT="Steven Feuerstein &amp; Bill Pribyl"><META
NAME="DC.Date"
CONTENT="2000-04-29T18:51:00Z"><META
NAME="DC.Format"
CONTENT="text/html"
SCHEME="MIME"><META
NAME="DC.Identifier"
CONTENT="O'Reilly and Associates CD-ROM-1-56592-335-9E"><META
NAME="DC.Language"
CONTENT="en-US"><META
NAME="DC.Publisher"
CONTENT="O'Reilly &amp; Associates, Inc."><META
NAME="DC.Source"
CONTENT="1-56592-335-9E"
SCHEME="ISBN"><META
NAME="DC.Subject.Keyword"
CONTENT="Oracle PL/SQL"><META
NAME="DC.Title"
CONTENT="Oracle PL/SQL Programming, 2nd Edition"><META
NAME="DC.Type"
CONTENT="Text.Monograph"><META
NAME="generator"
CONTENT="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><LINK
REL="stylesheet"
TYPE="text/css"
HREF="../style/style1.css"><LINK
REV="made"
HREF="mailto:online-books@oreilly.com"
TITLE="Online Books Comments"><LINK
REL="up"
HREF="ch03_01.htm"
TITLE="3. Effective Coding Style"><LINK
REL="prev"
HREF="ch03_02.htm"
TITLE="3.2 Formatting SQL Statements"><LINK
REL="next"
HREF="ch03_04.htm"
TITLE="3.4 Formatting PL/SQL Blocks"></HEAD
><BODY
><DIV
CLASS="htmlnav"
><H1
><IMG
SRC="gifs/smbanner.gif"
ALT="Oracle PL/SQL Programming, 2nd Edition"
USEMAP="#srchmap"
BORDER="0"></H1
><MAP
NAME="srchmap"
><AREA
SHAPE="RECT"
COORDS="0,0,466,65"
HREF="index.htm"
ALT="Oracle PL/SQL Programming, 2nd Edition"><AREA
SHAPE="RECT"
COORDS="467,0,514,18"
HREF="jobjects/fsearch.htm"
ALT="Search this book"></MAP
><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch03_02.htm"
TITLE="3.2 Formatting SQL Statements"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 3.2 Formatting SQL Statements"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><SPAN
CLASS="NAVTITLE"
><A
CLASS="chapter"
REL="up"
HREF="ch03_01.htm"
TITLE="3. Effective Coding Style"
>Chapter 3<BR>Effective Coding Style</A
></SPAN
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch03_04.htm"
TITLE="3.4 Formatting PL/SQL Blocks"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 3.4 Formatting PL/SQL Blocks"
BORDER="0"></A
></TD
></TR
></TABLE
>&nbsp;<HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"></DIV
><DIV
CLASS="sect1"
><H2
CLASS="sect1"
><A
CLASS="title"
NAME="SQL2-CH-3-SECT-3"
>3.3 Formatting Control Structures</A
></H2
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="ch03-idx-220720-1"
></A
> <A
CLASS="indexterm"
NAME="ch03-idx-220720-2"
></A
>The control structures in your program are the most direct representation of the logic needed to implement your specifications. The format of these control structures, therefore, will have a significant impact on the readability of your code. </P
><P
CLASS="para"
>Indentation is the most important element of control structure layout. Always keep statements of the same "logical level" at the same indentation level. Let's see what this means for the various control structures of PL/SQL. </P
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="SQL2-CH-3-SECT-3.1"
>3.3.1 Formatting IF Statements</A
></H3
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="ch03-idx-220721-1"
></A
> This conditional construct comes in three flavors: </P
><TABLE
CLASS="informaltable"
BORDER="1"
CELLPADDING="3"
><TBODY
CLASS="tbody"
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
> <BLOCKQUOTE
><PRE
CLASS="programlisting"
>IF &lt;expression&gt;
END IF;
</PRE
></BLOCKQUOTE
> </TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
> <BLOCKQUOTE
><PRE
CLASS="programlisting"
>IF &lt;expression&gt;
ELSE
END IF;
</PRE
></BLOCKQUOTE
> </TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
> <BLOCKQUOTE
><PRE
CLASS="programlisting"
>IF &lt;expression&gt;
ELSEIF &lt;expression&gt;
ELSE
END IF;
</PRE
></BLOCKQUOTE
> </TD
></TR
></TBODY
></TABLE
><P
CLASS="para"
>In general, the IF statement is composed of clauses in which there is a Boolean expression or condition and a section of code executed when that condition evaluates to TRUE. </P
><P
CLASS="para"
>So if you want to use indentation to reveal the logical structure of the simplest form of the IF statement (IF-END IF), I suggest one of these two styles: </P
><TABLE
CLASS="informaltable"
BORDER="1"
CELLPADDING="3"
><THEAD
CLASS="thead"
><TR
CLASS="row"
VALIGN="TOP"
><TH
CLASS="entry"
ALIGN="LEFT"
ROWSPAN="1"
COLSPAN="1"
> New Line for THEN </TH
><TH
CLASS="entry"
ALIGN="LEFT"
ROWSPAN="1"
COLSPAN="1"
> Same Line for THEN </TH
></TR
></THEAD
><TBODY
CLASS="tbody"
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
> <BLOCKQUOTE
><PRE
CLASS="programlisting"
>IF &lt;expression&gt;
THEN
   executable_statements;
END IF;
</PRE
></BLOCKQUOTE
> </TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
> <BLOCKQUOTE
><PRE
CLASS="programlisting"
>IF &lt;expression&gt; THEN
   executable_statements
END IF;
</PRE
></BLOCKQUOTE
> </TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
> <BLOCKQUOTE
><PRE
CLASS="programlisting"
>IF &lt;expression&gt;
THEN
   executable_statements;
ELSE
   else_executable_statements;
END IF;
</PRE
></BLOCKQUOTE
> </TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
> <BLOCKQUOTE
><PRE
CLASS="programlisting"
>IF &lt;expression&gt; THEN
   executable_statements
ELSE
   else_executable_statements;
END IF;
</PRE
></BLOCKQUOTE
> </TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
> <BLOCKQUOTE
><PRE
CLASS="programlisting"
>IF &lt;expression&gt;1
THEN
   executable_statements1;

ELSEIF &lt;expression2&gt;
THEN
   executable_statements2;
...

ELSEIF &lt;expressionN&gt;
THEN
   executable_statementsN;

ELSE
   else_executable_statements;
END IF;
</PRE
></BLOCKQUOTE
> </TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
> <BLOCKQUOTE
><PRE
CLASS="programlisting"
>IF &lt;expression&gt;1 THEN
   executable_statements1;

ELSEIF &lt;expression2&gt; THEN
   executable_statements2;
...

ELSEIF &lt;expressionN&gt; THEN
   executable_statementsN;

ELSE
   else_executable_statements;
END IF;
</PRE
></BLOCKQUOTE
> </TD
></TR
></TBODY
></TABLE
><P
CLASS="para"
>Notice that in both versions the executable statements are indented three spaces from the column in which the IF and END IF reserved words are found. The only difference between the two formats is the placement of the THEN reserved word. I prefer the new line format, in which the THEN appears on a line by itself after the IF condition. This format provides more whitespace than the other. I could create the whitespace by using a blank, rather than indenting three spaces, but then the executable statements for the IF clause are made distinct from the condition&nbsp;-- and they are logically connected. Let's examine some actual code to get a better sense of the differences. </P
><P
CLASS="para"
>The following example shows proper IF statement indentation with THEN on the same line: </P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>IF max_sales &gt; 2000 THEN
   notify_accounting ('over_limit');
   RAISE FORM_TRIGGER_FAILURE;
END IF;</PRE
></BLOCKQUOTE
><P
CLASS="para"
>This code has proper IF statement indentation with THEN on the next line: </P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>IF max_sales &gt; 2000
THEN
   notify_accounting ('over_limit');
   RAISE FORM_TRIGGER_FAILURE;
END IF;<A
CLASS="indexterm"
NAME="AUTOID-2599"
></A
></PRE
></BLOCKQUOTE
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="SQL2-CH-3-SECT-3.2"
>3.3.2 Formatting Loops</A
></H3
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="AUTOID-2603"
></A
> You are going to be writing many loops in your PL/SQL programs, and they will usually surround some of the most complicated code in your application. For this reason, the format you use to structure your loops will make a critical difference in the overall comprehensibility of your programs. </P
><P
CLASS="para"
>PL/SQL offers the following kinds of loops:</P
><UL
CLASS="itemizedlist"
><LI
CLASS="listitem"
><P
CLASS="para"
>Infinite or simple loop</P
></LI
><LI
CLASS="listitem"
><P
CLASS="para"
>WHILE loop</P
></LI
><LI
CLASS="listitem"
><P
CLASS="para"
>Indexed FOR loop (numeric and cursor)</P
></LI
></UL
><P
CLASS="para"
>Each loop has a loop boundary (begin and end statements) and a loop body. The loop body should be indented from the boundary (again, I recommend three spaces of indentation). </P
><P
CLASS="para"
>As with the IF statement, you can either choose to leave the LOOP reserved word at the end of the line containing the WHILE and FOR statements or place it on the next line. I prefer the latter, because then both the LOOP and END LOOP reserved words appear at the same column position (indentation) in the program. </P
><P
CLASS="para"
>Here are my recommendations for formatting your loops:</P
><UL
CLASS="itemizedlist"
><LI
CLASS="listitem"
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="AUTOID-2620"
></A
> <A
CLASS="indexterm"
NAME="AUTOID-2623"
></A
>The infinite or simple loop: </P
></LI
></UL
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>LOOP
   executable_statements;
END LOOP;</PRE
></BLOCKQUOTE
><UL
CLASS="itemizedlist"
><LI
CLASS="listitem"
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="AUTOID-2630"
></A
>The WHILE loop: </P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>WHILE condition
LOOP
   executable_statements;
END LOOP;</PRE
></BLOCKQUOTE
></LI
><LI
CLASS="listitem"
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="AUTOID-2636"
></A
> <A
CLASS="indexterm"
NAME="AUTOID-2639"
></A
> <A
CLASS="indexterm"
NAME="AUTOID-2643"
></A
>The numeric and cursor FOR loops: </P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>FOR for_index IN low_value .. high_value
LOOP
   executable_statements;
END LOOP;

FOR record_index IN my_cursor
LOOP
   executable_statements;
END LOOP;</PRE
></BLOCKQUOTE
></LI
></UL
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="SQL2-CH-3-SECT-3.3"
>3.3.3 Formatting Exception Handlers</A
></H3
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="AUTOID-2650"
></A
><A
CLASS="indexterm"
NAME="AUTOID-2653"
></A
>PL/SQL provides a very powerful facility for dealing with errors. An entirely separate exception section contains one or more "handlers" to trap exceptions and execute code when that exception occurs. Logically, the exception section is structured like a conditional CASE statement (which, by the way, is not supported by PL/SQL). </P
><P
CLASS="para"
>As you might expect, the format for the exception section should resemble that of an IF statement. Here is a general example of the exception section: </P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>EXCEPTION
   WHEN NO_DATA_FOUND
   THEN
      executable_statements1;

   WHEN DUP_VAL_ON_INDEX
   THEN
      executable_statements1;

   ...
   WHEN OTHERS
   THEN
      otherwise_code;
END;</PRE
></BLOCKQUOTE
><P
CLASS="para"
>Instead of an IF or ELSIF keyword, the exception handler uses the word WHEN. In place of a condition (Boolean expression), the WHEN clause lists an exception name followed by a THEN and finally the executable statements for that exception. In place of ELSE, the exception section offers a WHEN OTHERS clause. </P
><P
CLASS="para"
>Follow these guidelines:</P
><UL
CLASS="itemizedlist"
><LI
CLASS="listitem"
><P
CLASS="para"
>Indent each WHEN clause in from the EXCEPTION keyword that indicates the start of the exception section, as I've shown above. Place the THEN directly below the WHEN. </P
></LI
><LI
CLASS="listitem"
><P
CLASS="para"
>Indent all the executable statements for that handler in from the THEN keyword. </P
></LI
><LI
CLASS="listitem"
><P
CLASS="para"
>Place a blank line before each WHEN (except for the first).</P
></LI
></UL
></DIV
></DIV
><DIV
CLASS="htmlnav"
><P
></P
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch03_02.htm"
TITLE="3.2 Formatting SQL Statements"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 3.2 Formatting SQL Statements"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="book"
HREF="index.htm"
TITLE="Oracle PL/SQL Programming, 2nd Edition"
><IMG
SRC="../gifs/txthome.gif"
ALT="Oracle PL/SQL Programming, 2nd Edition"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch03_04.htm"
TITLE="3.4 Formatting PL/SQL Blocks"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 3.4 Formatting PL/SQL Blocks"
BORDER="0"></A
></TD
></TR
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
>3.2 Formatting SQL Statements</TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="index"
HREF="index/idx_0.htm"
TITLE="Book Index"
><IMG
SRC="../gifs/index.gif"
ALT="Book Index"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
>3.4 Formatting PL/SQL Blocks</TD
></TR
></TABLE
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"></DIV
><IMG SRC="../gifs/smnavbar.gif"
USEMAP="#map"
BORDER="0"
ALT="The Oracle Library Navigation">

<P><font size="-1">
<a href="../copyrght.htm#copy">Copyright (c) 2000</a> O'Reilly &amp; Associates. All rights reserved.
</font></P>

<MAP NAME="map">

<AREA SHAPE="RECT"
COORDS="0,0,35,30"
HREF="../index.htm"
ALT="Library Home">

<AREA SHAPE="RECT"
COORDS="40,0,95,30"
HREF="index.htm"
ALT="Oracle PL/SQL Programming, 2nd. Ed.">

<AREA SHAPE="RECT"
COORDS="100,0,200,30"
HREF="../guide8i/index.htm"
ALT="Guide to Oracle 8i Features">

<AREA SHAPE="RECT"
COORDS="205,0,245,30"
HREF="../bipack/index.htm"
ALT="Oracle Built-in Packages">

<AREA SHAPE="RECT"
COORDS="250,0,320,30"
HREF="../advprog/index.htm"
ALT="Advanced PL/SQL Programming with Packages">

<AREA SHAPE="RECT"
COORDS="325,0,420,30"
HREF="../webapp/index.htm"
ALT="Oracle Web Applications">

<AREA SHAPE="RECT"
COORDS="425,0,490,30"
HREF="../langpkt/index.htm"
ALT="Oracle PL/SQL Language Pocket Reference">

<AREA SHAPE="RECT"
COORDS="495,0,570,30"
HREF="../bipkt/index.htm"
ALT="Oracle PL/SQL Built-ins Pocket Reference">
</MAP>

</BODY
>
<!-- Mirrored from liso.cs.pusan.ac.kr by HTTrack Website Copier/3.x [XR&CO'2001] -->
</HTML
>
