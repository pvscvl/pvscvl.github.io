<HTML
><HEAD
><TITLE
>[Chapter 22] 22.7 Tips for Parameter Design</TITLE
><META
NAME="DC.Creator"
CONTENT="Steven Feuerstein &amp; Bill Pribyl"><META
NAME="DC.Date"
CONTENT="2000-04-29T19:12:10Z"><META
NAME="DC.Format"
CONTENT="text/html"
SCHEME="MIME"><META
NAME="DC.Identifier"
CONTENT="O'Reilly and Associates CD-ROM-1-56592-335-9E"><META
NAME="DC.Language"
CONTENT="en-US"><META
NAME="DC.Publisher"
CONTENT="O'Reilly &amp; Associates, Inc."><META
NAME="DC.Source"
CONTENT="1-56592-335-9E"
SCHEME="ISBN"><META
NAME="DC.Subject.Keyword"
CONTENT="Oracle PL/SQL"><META
NAME="DC.Title"
CONTENT="Oracle PL/SQL Programming, 2nd Edition"><META
NAME="DC.Type"
CONTENT="Text.Monograph"><META
NAME="generator"
CONTENT="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><LINK
REL="stylesheet"
TYPE="text/css"
HREF="../style/style1.css"><LINK
REV="made"
HREF="mailto:online-books@oreilly.com"
TITLE="Online Books Comments"><LINK
REL="up"
HREF="ch22_01.htm"
TITLE="22. Code Design Tips"><LINK
REL="prev"
HREF="ch22_06.htm"
TITLE="22.6 Construct Abstract Data Types (ADTs)"><LINK
REL="next"
HREF="ch23_01.htm"
TITLE="23. Managing Code in the Database"></HEAD
><BODY
><DIV
CLASS="htmlnav"
><H1
><IMG
SRC="gifs/smbanner.gif"
ALT="Oracle PL/SQL Programming, 2nd Edition"
USEMAP="#srchmap"
BORDER="0"></H1
><MAP
NAME="srchmap"
><AREA
SHAPE="RECT"
COORDS="0,0,466,65"
HREF="index.htm"
ALT="Oracle PL/SQL Programming, 2nd Edition"><AREA
SHAPE="RECT"
COORDS="467,0,514,18"
HREF="jobjects/fsearch.htm"
ALT="Search this book"></MAP
><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch22_06.htm"
TITLE="22.6 Construct Abstract Data Types (ADTs)"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 22.6 Construct Abstract Data Types (ADTs)"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><SPAN
CLASS="NAVTITLE"
><A
CLASS="chapter"
REL="up"
HREF="ch22_01.htm"
TITLE="22. Code Design Tips"
>Chapter 22<BR>Code Design Tips</A
></SPAN
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="chapter"
HREF="ch23_01.htm"
TITLE="23. Managing Code in the Database"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 23. Managing Code in the Database"
BORDER="0"></A
></TD
></TR
></TABLE
>&nbsp;<HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"></DIV
><DIV
CLASS="sect1"
><H2
CLASS="sect1"
><A
CLASS="title"
NAME="SQL2-CH-22-SECT-7"
>22.7 Tips for Parameter Design</A
></H2
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="ch22-idx-908852-1"
></A
><A
CLASS="indexterm"
NAME="ch22-idx-908852-2"
></A
>This section offers tips for designing and using your parameters most effectively. </P
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="SQL2-CH-22-SECT-7.1"
>22.7.1 Document All Parameters and Their Functions</A
></H3
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="AUTOID-21041"
></A
> <A
CLASS="indexterm"
NAME="AUTOID-21044"
></A
> <A
CLASS="indexterm"
NAME="AUTOID-21047"
></A
>In the header of the program or directly next to each parameter, you should include comments explaining any assumptions about the parameter and the way it's used in the program. Such information would handle the following situations: </P
><UL
CLASS="itemizedlist"
><LI
CLASS="listitem"
><P
CLASS="para"
>The units of measure for a numeric parameter. If the parameter is speed_in, is the speed in miles-per-hour or kilometers-per-hour? </P
></LI
><LI
CLASS="listitem"
><P
CLASS="para"
>The valid ranges for incoming parameter values. Remember that all parameters are unconstrained. You cannot, for example, declare a parameter as NUMBER(3). So if a parameter does have a valid range or list of values, explain that. </P
></LI
><LI
CLASS="listitem"
><P
CLASS="para"
>Invalid or impossible values for the parameters. If the speed_in parameter cannot have a value less than or greater than 200, a statement to that effect can help a person who is fixing a bug in that program or in a program that calls it. </P
></LI
><LI
CLASS="listitem"
><P
CLASS="para"
>Error status and flag information. If the program returns a status flag, code, or message, you should indicate this at the start of the program so that anyone who reads the program is aware of the expected values. </P
></LI
></UL
><P
CLASS="para"
>It can be particularly handy to include these comments in the actual parameter list because that documentation then becomes part of the program's specification. Then, even when developers do not have access to the body of the program, as with packages like Oracle Developer/2000 PL/SQL libraries, they can still see important information about the parameters in the specification. </P
><P
CLASS="para"
>The following procedure specification illustrates some of these recommendations: </P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>PROCEDURE calc_elapsed_time
   (start_time_in IN NUMBER /* Range: 0 through 24 */,
    start_loc_in  IN VARCHAR2 /* NY, CHI or SF */,
    end_loc_in    IN VARCHAR2 /* DC, LA, or NO */,
    valid_out     OUT VARCHAR2 /* VALID or INVALID */);</PRE
></BLOCKQUOTE
><P
CLASS="para"
>It can be hard to make time for this kind of documentation, but it can make a big difference in how easily your programs can be used by others. </P
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="SQL2-CH-22-SECT-7.2"
>22.7.2 Use Self-Identifying Parameters (Avoid Boolean Values)</A
></H3
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="ch22-idx-908854-1"
></A
><A
CLASS="indexterm"
NAME="ch22-idx-908854-2"
></A
> A common parameter for a module is a flag that relies on two-valued logic (TRUE or FALSE) to pass information to the module. The temptation in such a case is to declare the parameter to be type BOOLEAN. With this approach, when you call the program, you will pass either TRUE or FALSE. You will find in these circumstances that while the specification for your program is very readable, the way you call it in other programs will be difficult to follow. </P
><P
CLASS="para"
>Consider the parameters for the following procedure, which is used to generate reports and optionally print the reports out on the specified queue: </P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>PROCEDURE generate_report
   (report_id_in IN NUMBER,
    queue_in IN VARCHAR2,
    clean_up_log_files_in IN BOOLEAN := TRUE,
    print_file_in IN BOOLEAN := TRUE);</PRE
></BLOCKQUOTE
><P
CLASS="para"
>In order to make generate_report more flexible, the developer has provided two Boolean parameters: </P
><DL
CLASS="variablelist"
><DT
CLASS="term"
>clean_up_log_files_in </DT
><DD
CLASS="listitem"
><P
CLASS="para"
>TRUE if the procedure should clean up (remove) any log and listing files created in the process of generating the report; FALSE to keep the files in place, usually for purposes of debugging. </P
></DD
><DT
CLASS="term"
>print_file_in </DT
><DD
CLASS="listitem"
><P
CLASS="para"
>TRUE if the output file of the report should be printed; FALSE to skip the print step. </P
></DD
></DL
><P
CLASS="para"
>When one glances over the procedure's specification, the purpose and usage of each parameter seems clear enough. But take a look at how I would call this procedure: </P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>generate_report (report_id, 'PRINT_QUEUE1', TRUE, TRUE);</PRE
></BLOCKQUOTE
><P
CLASS="para"
>As you can see, these Boolean parameter values are not very descriptive. Without the context provided by their names, actual Boolean parameters are unable to self-document their effect. A developer (or, most importantly, a maintainer) of the code must go back to the source to understand the impact of a particular value. That completely defeats the information hiding principle of modular programming. </P
><P
CLASS="para"
>This problem is not restricted to true Booleans, either. You will be just as confused by parameters acting as "pseudo-Boolean" parameters. In the following version of generate_report, the BOOLEAN parameters are replaced by VARCHAR2 parameters, to little advantage. </P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>PROCEDURE generate_report
   (report_id_in IN NUMBER, queue_in IN VARCHAR2,
    clean_up_log_files_in IN VARCHAR2:= 'Y',
    print_file_in IN VARCHAR2 := 'Y');</PRE
></BLOCKQUOTE
><P
CLASS="para"
>With these VARCHAR2 replacements, calls to generate_report now look like this: </P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>generate_report (new_report_id, temp_queue_name,'Y', 'Y');</PRE
></BLOCKQUOTE
><P
CLASS="para"
>While it is true that I no longer have the obscure TRUE or FALSE to deal with in the call interface, it would be hard to argue that "Y" or "N" is any more illuminating. A much better approach replaces Boolean and pseudo-Boolean parameters with character parameters whose acceptable values are descriptions of the action or situation. </P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>PROCEDURE generate_report
   (report_id_in IN NUMBER, queue_in IN VARCHAR2,
    clean_up_log_files_in IN VARCHAR2:= 'CLEANUP',
    print_file_in IN VARCHAR2 := 'PRINT');</PRE
></BLOCKQUOTE
><P
CLASS="para"
>Now a call to generate_report states clearly its intentions:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>generate_report
   (report_id, queue_name, 'CLEANUP', 'PRINT');</PRE
></BLOCKQUOTE
><P
CLASS="para"
>or:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>generate_report
   (report_id, queue_name, 'NO_CLEANUP', 'PRINT');</PRE
></BLOCKQUOTE
><P
CLASS="para"
>or:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>generate_report
   (report_id, queue_name, 'NO_CLEANUP', 'NO_PRINT');</PRE
></BLOCKQUOTE
><P
CLASS="para"
>As you can see from these examples, I write my procedures to accept an unambiguous affirmative value (CLEANUP) and the most clearly-defined negative form (NO_CLEANUP). One complication to this style is that you need to validate the parameter values; if you were using a Boolean, the strong datatyping in PL/SQL would guarantee that a legal value is passed.<A
CLASS="indexterm"
NAME="AUTOID-21100"
></A
> <A
CLASS="indexterm"
NAME="AUTOID-21101"
></A
> </P
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="SQL2-CH-22-SECT-7.3"
>22.7.3 Assign Values to All OUT and IN OUT Parameters</A
></H3
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="ch22-idx-908856-1"
></A
><A
CLASS="indexterm"
NAME="ch22-idx-908856-2"
></A
><A
CLASS="indexterm"
NAME="ch22-idx-908856-3"
></A
><A
CLASS="indexterm"
NAME="ch22-idx-908856-4"
></A
>Make sure that all OUT and IN OUT parameters are assigned values in your procedure (you should never have such parameters in a function, after all). Remember that any assignments made to OUT or IN OUT parameters in the body of a program are ignored when an exception is raised in that program. PL/SQL performs its own internal rollback of all incomplete changes. This can result in situations where the program that called the function or procedure with these parameters does not have reliable data with which to work. </P
><DIV
CLASS="sect3"
><H4
CLASS="sect3"
><A
CLASS="title"
NAME="SQL2-CH-22-SECT-7.3.1"
>22.7.3.1 Perform assignments within exception handlers</A
></H4
><P
CLASS="para"
>The way to make sure that you assign values to your OUT and IN OUT parameters whether the program succeeds or fails is to perform assignments within the exception handlers. Consider the generate_raise procedure: </P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>PROCEDURE generate_raise
   (employee_id_in IN employee.employee_id%TYPE,
    salary_out OUT employee.salary%TYPE)
IS
   sal NUMBER;
   days_employed BINARY_INTEGER;
BEGIN
   -- Initialize the salary to zero.
   salary_out := 0;
   SELECT salary, SYSDATE - hire_date
     INTO sal, days_employed
     FROM employee
    WHERE employee_id = employee_id_in;
   salary_out := sal * (days_employed/365 + .15);
END;</PRE
></BLOCKQUOTE
><P
CLASS="para"
>Because the procedure does not have an exception section, any errors arising from the implicit cursor ("SELECT ... FROM employee ...") are not trapped in the program. As a result, generate_raise does not always return a valid amount in the salary_out parameter. By including an exception section, we can trap such errors and assign a value to salary_out, as shown in this example: </P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>PROCEDURE generate_raise
   (employee_id_in IN employee.employee_id%TYPE,
    salary_out OUT employee.salary%TYPE)
IS
   sal NUMBER;
   days_employed BINARY_INTEGER;
BEGIN
   ... as shown above ...
EXCEPTION
   /*
   || Handle all exceptions in this single handler:
   || set the salary_out to zero.
   */
   WHEN OTHERS THEN
      salary_out := 0;
END;</PRE
></BLOCKQUOTE
><P
CLASS="para"
>Now you can be sure that salary_out always has a value. Of course, it might not make sense to simply set the salary to zero when an error occurs. By doing so, you have placed a special, undocumented meaning on that value of zero. It doesn't just mean a very low salary. It means something went wrong. </P
><P
CLASS="para"
>It is generally not a good idea to load a variable with double meanings like that. It is hard to document and it makes the procedure difficult for people to use. Even if you changed the assignment in the exception handler to return NULL, you still have blurred the use of the salary_out parameter. </P
></DIV
><DIV
CLASS="sect3"
><H4
CLASS="sect3"
><A
CLASS="title"
NAME="SQL2-CH-22-SECT-7.3.2"
>22.7.3.2 Use a flag to verify successful completion</A
></H4
><P
CLASS="para"
>A better approach is to pass back an explicit indication that the program has succeeded or failed; in this way the code that called the program can make an unambiguous check on the status of that procedure's results. This final version of generate_raise adds another OUT parameter whose sole purpose in life is to let me know how everything went inside the black box of the procedure. </P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>PROCEDURE generate_raise
      (employee_id_in IN  employee.employee_id%TYPE,
       salary_out        OUT employee.salary%TYPE,
       found_emp_out  OUT VARCHAR2)
IS
   sal NUMBER;
   days_employed BINARY_INTEGER;
BEGIN
   ... as shown above ...
EXCEPTION
   /*
   || Now I set the salary to NULL, which is probably a better choice
   || for the error value, but I also set the status parameter to
   || &quot;NOT FOUND&quot; to show that something went wrong..
   */
   WHEN OTHERS THEN
      salary_out := NULL;
      found_emp_out := 'NOT FOUND';
END;</PRE
></BLOCKQUOTE
><P
CLASS="para"
>Now when I call generate_raise, I follow it immediately with a check of the status parameter and act accordingly (in this case of an Oracle Forms code fragment, I display an alert and then fail out of the trigger). </P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>generate_raise (:employee.employee_id, :employee.salary, employee_around);
IF employee_around = 'NOT FOUND'
THEN
   alert_selection := SHOW_ALERT ('al_emp_not_found');
   RAISE FORM_TRIGGER_FAILURE;
END IF;<A
CLASS="indexterm"
NAME="AUTOID-21129"
></A
>
<A
CLASS="indexterm"
NAME="AUTOID-21130"
></A
>
<A
CLASS="indexterm"
NAME="AUTOID-21131"
></A
>
<A
CLASS="indexterm"
NAME="AUTOID-21132"
></A
></PRE
></BLOCKQUOTE
></DIV
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="SQL2-CH-22-SECT-7.4"
>22.7.4 Ensure Case Consistency of Parameters</A
></H3
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="ch22-idx-908858-1"
></A
><A
CLASS="indexterm"
NAME="ch22-idx-908858-2"
></A
><A
CLASS="indexterm"
NAME="ch22-idx-908858-3"
></A
><A
CLASS="indexterm"
NAME="ch22-idx-908858-4"
></A
>Procedures and functions will often take character values as parameters and use those strings in an IF statement to determine which code to execute. Parameters like action types, status flags, or selection codes often perform this kind of function. When a programmer calls a module with such a conditional parameter, the programmer must pass a value, which the program will recognize and process correctly. </P
><P
CLASS="para"
>Suppose I wrote a procedure that takes an action code as a parameter and then executes the appropriate code for that action. The routine might look like this: </P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>PROCEDURE exec_action (action_in IN VARCHAR2)
IS
BEGIN
   IF action_in = 'DISPLAY_LEDGER'
   THEN
      ... the code to display the ledger.

   ELSIF action_in = 'CALC_PROFITS'
   THEN
      ... the code to calculate the profits.

   ELSIF ...
   END IF;
END;</PRE
></BLOCKQUOTE
><P
CLASS="para"
>This procedure will work correctly only when the argument for action_in is passed in uppercase. Yet, if you didn't happen to be the author of this program, you would have to be downright lucky to get the format of the value correct. </P
><P
CLASS="para"
>The exec_action module requires the user of the program&nbsp;-- in this case, another programmer&nbsp;-- to know and remember an aspect of the way the program was implemented. This is a violation of good coding style (make your program a black box). On top of that, the requirement that the parameter be uppercased is simply an avoidable bother. When people sense that they are being expected to follow a rule that is, well, dumb, they will at some level&nbsp;-- consciously or unconsciously&nbsp;-- rebel against that rule. The rebellion in this case will most likely take the form of truly annoying whines and sloppy code. </P
><P
CLASS="para"
>You show your respect for other people by not wasting their time and their brain cells. In the world of programming, you show this respect by freeing up your users (whether they are end users or other programmers) to concentrate on making important decisions and remembering key rules and information. In other words, you make your code smarter so your users don't have to worry over the details. </P
><P
CLASS="para"
>If you want to make the exec_action procedure as useful as possible, you will make it as easy and foolproof to use as possible. You will shift the burden of knowledge and effort from the user to the code. Programmers in particular shouldn't have to know or care about the format of the name of the requested action. You work it out for them. </P
><P
CLASS="para"
>In the version of exec_action that follows, I put some smarts in the code: </P
><UL
CLASS="itemizedlist"
><LI
CLASS="listitem"
><P
CLASS="para"
>Uppercasing the action as I copy it into a local (internal) variable, which I will then use for comparisons </P
></LI
><LI
CLASS="listitem"
><P
CLASS="para"
>Checking for both full action strings and abbreviations, to save the programmer some typing </P
></LI
><LI
CLASS="listitem"
><P
CLASS="para"
>Adding an ELSE clause to check for invalid actions</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>PROCEDURE exec_action (action_in IN VARCHAR2)
IS
   /* Uppercased copy of action. The &quot;int&quot; stands for &quot;internal&quot; */
   action_int VARCHAR2(30) := UPPER (action_in);
BEGIN
   /* Adds support for action abbreviations, too! */
   IF action_int IN ('DISPLAY_LEDGER', 'DL')
   THEN
      ... the code to display the ledger.

   ELSIF action_int IN ('CALC_PROFITS', 'CP')
   THEN
      ... the code to calculate the profits.

   ELSE
      MESSAGE (' Invalid action code: ' || action_in);
   END IF;
END;</PRE
></BLOCKQUOTE
></LI
></UL
><P
CLASS="para"
>Now, no matter how the user enters the action, exec_action can figure out what to do: </P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>exec_action ('DL');
exec_action ('dl');
exec_action ('display_LEDGER');
exec_action ('calc_profits');</PRE
></BLOCKQUOTE
><P
CLASS="para"
>The ELSE clause also checks for an invalid value. While you, the author, may be sure that you would never enter an incorrect action, a new developer might be a lot less certain about the specific values. If you do not trap and report the mistake, this person would be at a tremendous disadvantage. </P
><P
CLASS="para"
>Never forget the Golden Rule when it comes to programming: trap mistakes for others as you hope they would trap them for you! </P
><P
CLASS="para"
>When checking for bad codes, you do have an alternative to performing the check at the end of a sometimes long IF-ELSIF sequence. That final ELSE clause is less than ideal since it can be hard to find in the code and, from a performance standpoint, you have to actually perform all the valid comparison checks before you register the problem. I suggest that you develop a generic code_check procedure that takes the list of valid codes, the code entered by the user, and an optional message text. If the code is not found in the list, code_check forces termination of the calling program. </P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>PROCEDURE exec_action (action_in IN VARCHAR2)
IS
   action_int VARCHAR2(30) := UPPER (action_in);
BEGIN
   code_check ('|DISPLAY_LEDGE|DL|CALC_PROFITS|CP', action_int,
               'action code');
   IF action IN ('DISPLAY_LEDGER', 'DL')
   THEN -- the code to display the ledger.
   ELSIF action IN ('CALC_PROFITS', 'CP')
   THEN -- the code to calculate the profits.
   ELSIF ...
   END IF;
END;</PRE
></BLOCKQUOTE
><P
CLASS="para"
>Here is the code_check routine in Oracle Forms:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>PROCEDURE code_check
   (valid_codes_in IN VARCHAR2,
    check_code_in IN VARCHAR2,
    code_name_in IN VARCHAR2 := 'code',
    delimiter_in IN VARCHAR2 := '|')
IS
BEGIN
   IF INSTR (valid_codes_in, delimiter_in || check_code_in) = 0
   THEN
      MESSAGE
      (' Invalid ' || code_name_in || ': &quot;' || check_code_in || '&quot;');
      RAISE FORM_TRIGGER_FAILURE;
   END IF;
END;</PRE
></BLOCKQUOTE
><P
CLASS="para"
>Using code_check, if I execute the following statement with an invalid action code: </P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>exec_action ('dp');</PRE
></BLOCKQUOTE
><P
CLASS="para"
>the following text will appear on the message line or in an alert box:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>Invalid action code: &quot;dp&quot;</PRE
></BLOCKQUOTE
><P
CLASS="para"
>Whether or not you go to the trouble of building a separate routine to check for valid codes, as long as you do validate the input to your modules, programmers will make fewer errors and be able to fix those faster. The more work your code does for the programmer, the more productive that programmer will be.<A
CLASS="indexterm"
NAME="AUTOID-21175"
></A
> <A
CLASS="indexterm"
NAME="AUTOID-21176"
></A
> <A
CLASS="indexterm"
NAME="AUTOID-21177"
></A
> <A
CLASS="indexterm"
NAME="AUTOID-21178"
></A
> </P
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="SQL2-CH-22-SECT-7.5"
>22.7.5 Default Values and Remote Procedure Calls</A
></H3
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="ch22-idx-908860-1"
></A
><A
CLASS="indexterm"
NAME="ch22-idx-908860-2"
></A
><A
CLASS="indexterm"
NAME="ch22-idx-908860-3"
></A
> <A
CLASS="indexterm"
NAME="ch22-idx-908860-4"
></A
>If you are using Oracle Server Version 7.0, you will encounter a number of situations where you have to include a value for every parameter in your module's parameter list. In Version 7.0, any call to a remote procedure must include all arguments, as indicated by the following error: </P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>PLS-424: 'all arguments must be provided in remote procedure call;
          no defaults'.</PRE
></BLOCKQUOTE
><P
CLASS="para"
>You might say to yourself, "No problem. I do not have a distributed database. I am not performing any RPCs (remote procedure calls)." From the standpoint of PL/SQL, however, any of the following scenarios involves a remote procedure call: </P
><UL
CLASS="itemizedlist"
><LI
CLASS="listitem"
><P
CLASS="para"
>A Pro*C program that calls a stored procedure</P
></LI
><LI
CLASS="listitem"
><P
CLASS="para"
>An Oracle Developer/2000 tool that calls a stored procedure</P
></LI
><LI
CLASS="listitem"
><P
CLASS="para"
>An honest-to-goodness remote procedure call of the format:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>procedure_name@database_link;</PRE
></BLOCKQUOTE
></LI
></UL
><P
CLASS="para"
>One way you can get around this problem is to create a local procedure that supports default values by passing its own default to the stored procedure. Suppose I have a stored procedure as follows: </P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>PROCEDURE calc_profits
   (company_id_in IN NUMBER,
    profit_type_in IN VARCHAR2 := 'NET');</PRE
></BLOCKQUOTE
><P
CLASS="para"
>If I try to use this procedure in Oracle Forms, I must include a value for both parameters, even if I use the default: </P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>calc_profits (:company.company_id, 'NET');</PRE
></BLOCKQUOTE
><P
CLASS="para"
>Suppose I now create the following local procedure (either in the form itself or in a PL/SQL library): </P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>PROCEDURE of_calc_profits
   (company_id_in IN NUMBER,
    profit_type_in IN VARCHAR2 := 'NET')
IS
BEGIN
   calc_profits (company_id_in, profit_type_in);
END;</PRE
></BLOCKQUOTE
><P
CLASS="para"
>I can now call this procedure using the default value of NET, since the Oracle Forms version of the procedure always passes a value to the stored procedure version: </P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>of_calc_profits (:company.company_id);</PRE
></BLOCKQUOTE
><P
CLASS="para"
>(In Version 7.1 of the Oracle Server, by the way, you will be permitted to use default values in remote procedure calls.) </P
><P
CLASS="para"
>This situation with Oracle Server Version 7 reinforces one of my suggestions regarding default parameter values: always specify a value for each of the module's parameters, even if a value is the same as the default. You will find yourself less vulnerable to problems down the <A
CLASS="indexterm"
NAME="AUTOID-21213"
></A
> <A
CLASS="indexterm"
NAME="AUTOID-21214"
></A
> line.<A
CLASS="indexterm"
NAME="AUTOID-21215"
></A
> <A
CLASS="indexterm"
NAME="AUTOID-21216"
></A
> <A
CLASS="indexterm"
NAME="AUTOID-21217"
></A
> <A
CLASS="indexterm"
NAME="AUTOID-21218"
></A
> <A
CLASS="indexterm"
NAME="AUTOID-21219"
></A
> </P
></DIV
></DIV
><DIV
CLASS="htmlnav"
><P
></P
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch22_06.htm"
TITLE="22.6 Construct Abstract Data Types (ADTs)"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 22.6 Construct Abstract Data Types (ADTs)"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="book"
HREF="index.htm"
TITLE="Oracle PL/SQL Programming, 2nd Edition"
><IMG
SRC="../gifs/txthome.gif"
ALT="Oracle PL/SQL Programming, 2nd Edition"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="chapter"
HREF="ch23_01.htm"
TITLE="23. Managing Code in the Database"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 23. Managing Code in the Database"
BORDER="0"></A
></TD
></TR
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
>22.6 Construct Abstract Data Types (ADTs)</TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="index"
HREF="index/idx_0.htm"
TITLE="Book Index"
><IMG
SRC="../gifs/index.gif"
ALT="Book Index"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
>23. Managing Code in the Database</TD
></TR
></TABLE
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"></DIV
><IMG SRC="../gifs/smnavbar.gif"
USEMAP="#map"
BORDER="0"
ALT="The Oracle Library Navigation">

<P><font size="-1">
<a href="../copyrght.htm#copy">Copyright (c) 2000</a> O'Reilly &amp; Associates. All rights reserved.
</font></P>

<MAP NAME="map">

<AREA SHAPE="RECT"
COORDS="0,0,35,30"
HREF="../index.htm"
ALT="Library Home">

<AREA SHAPE="RECT"
COORDS="40,0,95,30"
HREF="index.htm"
ALT="Oracle PL/SQL Programming, 2nd. Ed.">

<AREA SHAPE="RECT"
COORDS="100,0,200,30"
HREF="../guide8i/index.htm"
ALT="Guide to Oracle 8i Features">

<AREA SHAPE="RECT"
COORDS="205,0,245,30"
HREF="../bipack/index.htm"
ALT="Oracle Built-in Packages">

<AREA SHAPE="RECT"
COORDS="250,0,320,30"
HREF="../advprog/index.htm"
ALT="Advanced PL/SQL Programming with Packages">

<AREA SHAPE="RECT"
COORDS="325,0,420,30"
HREF="../webapp/index.htm"
ALT="Oracle Web Applications">

<AREA SHAPE="RECT"
COORDS="425,0,490,30"
HREF="../langpkt/index.htm"
ALT="Oracle PL/SQL Language Pocket Reference">

<AREA SHAPE="RECT"
COORDS="495,0,570,30"
HREF="../bipkt/index.htm"
ALT="Oracle PL/SQL Built-ins Pocket Reference">
</MAP>

</BODY
>
<!-- Mirrored from liso.cs.pusan.ac.kr by HTTrack Website Copier/3.x [XR&CO'2001] -->
</HTML
>
