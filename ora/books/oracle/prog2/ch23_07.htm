<HTML
><HEAD
><TITLE
>[Chapter 23] 23.7 Encrypting Stored Code</TITLE
><META
NAME="DC.Creator"
CONTENT="Steven Feuerstein &amp; Bill Pribyl"><META
NAME="DC.Date"
CONTENT="2000-04-29T19:12:42Z"><META
NAME="DC.Format"
CONTENT="text/html"
SCHEME="MIME"><META
NAME="DC.Identifier"
CONTENT="O'Reilly and Associates CD-ROM-1-56592-335-9E"><META
NAME="DC.Language"
CONTENT="en-US"><META
NAME="DC.Publisher"
CONTENT="O'Reilly &amp; Associates, Inc."><META
NAME="DC.Source"
CONTENT="1-56592-335-9E"
SCHEME="ISBN"><META
NAME="DC.Subject.Keyword"
CONTENT="Oracle PL/SQL"><META
NAME="DC.Title"
CONTENT="Oracle PL/SQL Programming, 2nd Edition"><META
NAME="DC.Type"
CONTENT="Text.Monograph"><META
NAME="generator"
CONTENT="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><LINK
REL="stylesheet"
TYPE="text/css"
HREF="../style/style1.css"><LINK
REV="made"
HREF="mailto:online-books@oreilly.com"
TITLE="Online Books Comments"><LINK
REL="up"
HREF="ch23_01.htm"
TITLE="23. Managing Code in the Database"><LINK
REL="prev"
HREF="ch23_06.htm#SQL2-CH-23-SECT-6.3"
TITLE="23.6 Using SQL to Examine Stored Objects"><LINK
REL="next"
HREF="ch24_01.htm"
TITLE="24. Debugging PL/SQL"></HEAD
><BODY
><DIV
CLASS="htmlnav"
><H1
><IMG
SRC="gifs/smbanner.gif"
ALT="Oracle PL/SQL Programming, 2nd Edition"
USEMAP="#srchmap"
BORDER="0"></H1
><MAP
NAME="srchmap"
><AREA
SHAPE="RECT"
COORDS="0,0,466,65"
HREF="index.htm"
ALT="Oracle PL/SQL Programming, 2nd Edition"><AREA
SHAPE="RECT"
COORDS="467,0,514,18"
HREF="jobjects/fsearch.htm"
ALT="Search this book"></MAP
><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch23_06.htm#SQL2-CH-23-SECT-6.3"
TITLE="23.6 Using SQL to Examine Stored Objects"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 23.6 Using SQL to Examine Stored Objects"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><SPAN
CLASS="NAVTITLE"
><A
CLASS="chapter"
REL="up"
HREF="ch23_01.htm"
TITLE="23. Managing Code in the Database"
>Chapter 23<BR>Managing Code in the Database</A
></SPAN
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="chapter"
HREF="ch24_01.htm"
TITLE="24. Debugging PL/SQL"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 24. Debugging PL/SQL"
BORDER="0"></A
></TD
></TR
></TABLE
>&nbsp;<HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"></DIV
><DIV
CLASS="sect1"
><H2
CLASS="sect1"
><A
CLASS="title"
NAME="SQL2-CH-23-SECT-7"
>23.7 Encrypting Stored Code</A
></H2
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="ch23-idx-999196-1"
></A
> <A
CLASS="indexterm"
NAME="ch23-idx-999196-2"
></A
> <A
CLASS="indexterm"
NAME="ch23-idx-999196-3"
></A
> <A
CLASS="indexterm"
NAME="ch23-idx-999196-4"
></A
>It's kind of fun to watch a programming language like PL/SQL evolve over time. First there was Version 1.0&nbsp;-- very useful for batch processing scripts, but not much else. And very buggy. Then with Version 2.0 we started to see the real promise of the language. Stored program units, packages, and more. Why, it was so useful that third-party vendors began to write applications in PL/SQL. And when they sold these applications to customers, they shipped them their software for installation&nbsp;-- and then ran smack into a depressing discovery: there wasn't any way to hide their proprietary formulas, knowledge, and plain hard work from the eyes of competitors! </P
><P
CLASS="para"
>To install a PL/SQL-based application in another database instance, you must CREATE OR REPLACE those program units from the source code. Source code must, therefore, be supplied to each customer. "Wake up, Oracle!" came the cry from value-added resellers (VARs), "we can't let everyone see our secrets." Mostly in response to this basic need of VARs, Oracle added (with PL/SQL Release 2.2 and beyond) the ability to encrypt or "wrap" source code. </P
><P
CLASS="para"
>When you encrypt PL/SQL source (I prefer that word to "wrap," since the concept of <A
CLASS="indexterm"
NAME="AUTOID-21936"
></A
>wrapping code is common to many languages, but generally means "encapsulation"), you convert your readable ASCII text source code into unreadable ASCII text source code. This unreadable code can then be distributed to customers or regional offices or whatever for creation in new database instances. It is as portable as your original PL/SQL code, and is included in imports and exports. The Oracle database maintains dependencies for this encrypted code as it would programs compiled from readable text. In short, an encrypted program is treated within the database just as normal PL/SQL programs are treated; the only difference is that prying eyes can't query the USER_SOURCE data dictionary to extract trade secrets. </P
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="SQL2-CH-23-SECT-7.1"
>23.7.1 How to Encrypt Code</A
></H3
><P
CLASS="para"
>To encrypt PL/SQL source code, you run the <A
CLASS="indexterm"
NAME="AUTOID-21942"
></A
>wrap executable. This program may be found in the bin directory of the Oracle instance. In UNIX, this directory is located at $ORACLE_HOME/bin. In Windows NT, you can cd to c:\OraNT\bin, where "c:" denotes the drive on which Oracle has been installed. You will then find in your <EM
CLASS="emphasis"
>bin</EM
> directory a program whose name has this format: <I
CLASS="filename"
>wrapNN.exe</I
>, where NN is the version number of the database. So if you have Oracle 7.3 installed, you will have a <I
CLASS="filename"
>wrap73.exe</I
> file in the bin directory. </P
><P
CLASS="para"
>The format of the encryption command is:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>wrap<I
CLASS="replaceable"
>NN</I
> iname=<I
CLASS="replaceable"
>readablefile</I
> [oname=<I
CLASS="replaceable"
>encryptedfile</I
>]</PRE
></BLOCKQUOTE
><P
CLASS="para"
>where <EM
CLASS="emphasis"
>NN</EM
> is your version number (72, 73, 80, etc.), <I
CLASS="filename"
>readablefile</I
> points to the original, readable version ("in" file) of your program, and <I
CLASS="filename"
>encryptedfile</I
> is the name of the file which will contain the encrypted version of code ("out" file). </P
><P
CLASS="para"
>If <I
CLASS="filename"
>readablefile</I
> does not contain a file extension, then the default of sql is assumed. </P
><P
CLASS="para"
>If you do not provide an <I
CLASS="filename"
>oname</I
> argument, then <I
CLASS="filename"
>wrapNN</I
> creates a file with the same name as <I
CLASS="filename"
>readablefile</I
>, but with a default extention of plb, which stands for "PL/SQL binary" (a misnomer, but it gets the idea across: binaries are unreadable). </P
><P
CLASS="para"
>Here are some examples of using the <I
CLASS="filename"
>wrap73</I
> executable:</P
><OL
CLASS="orderedlist"
><LI
CLASS="listitem"
><P
CLASS="para"
>Wrap a program relying on all of the defaults:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>c:\orant\bin\wrap73 iname=secretprog</PRE
></BLOCKQUOTE
></LI
><LI
CLASS="listitem"
><P
CLASS="para"
>Wrap a package body, specifying overrides of all the defaults. Notice that the encrypted file does not have to have the same filename or extension as the original: </P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>c:\orant\bin\wrap73 iname=secretbody.spb oname=shhhhhh.bin</PRE
></BLOCKQUOTE
></LI
></OL
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="SQL2-CH-23-SECT-7.2"
>23.7.2 Working with Encrypted Code</A
></H3
><P
CLASS="para"
>I have found the following steps to be useful in working with encrypted code: </P
><UL
CLASS="itemizedlist"
><LI
CLASS="listitem"
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="AUTOID-21977"
></A
> <A
CLASS="indexterm"
NAME="AUTOID-21980"
></A
><A
CLASS="indexterm"
NAME="AUTOID-21983"
></A
>Establish standard file extensions which clearly identify encrypted code. I use the following extensions: </P
></LI
></UL
><TABLE
CLASS="informaltable"
BORDER="1"
CELLPADDING="3"
><THEAD
CLASS="thead"
><TR
CLASS="row"
VALIGN="TOP"
><TH
CLASS="entry"
ALIGN="LEFT"
ROWSPAN="1"
COLSPAN="1"
> <P
CLASS="para"
>Expression </P
> </TH
><TH
CLASS="entry"
ALIGN="LEFT"
ROWSPAN="1"
COLSPAN="1"
> <P
CLASS="para"
>Contents</P
> </TH
></TR
></THEAD
><TBODY
CLASS="tbody"
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
> <P
CLASS="para"
>sps</P
> </TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
> <P
CLASS="para"
>Readable package specifications</P
> </TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
> <P
CLASS="para"
>spb</P
> </TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
> <P
CLASS="para"
>Readable package bodies</P
> </TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
> <P
CLASS="para"
>pls</P
> </TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
> <P
CLASS="para"
>Encrypted package specifications</P
> </TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
> <P
CLASS="para"
>plb</P
> </TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
> <P
CLASS="para"
>Encrypted package bodies</P
> </TD
></TR
></TBODY
></TABLE
><UL
CLASS="itemizedlist"
><LI
CLASS="listitem"
><P
CLASS="para"
>In Windows NT and Windows 95, you will have to open an MS-DOS window and then execute the <EM
CLASS="emphasis"
>wrapNN</EM
> command from there. My suggestion is that you do not execute the program from within the Oracle <EM
CLASS="emphasis"
>bin</EM
> directory, but instead cd to the directory containing your source code and execute the <EM
CLASS="emphasis"
>wrapNN.exe</EM
> file from there. </P
></LI
><LI
CLASS="listitem"
><P
CLASS="para"
>Create <A
CLASS="indexterm"
NAME="AUTOID-22025"
></A
>batch files so that you can easily, quickly, and uniformly encrypt one or more files. In Windows NT, I create bat files in the directories containing my source code which contain lines like this: </P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>c:\orant\bin\wrap73 iname=plvrep.sps oname=plvrep.pls</PRE
></BLOCKQUOTE
><P
CLASS="para"
>Of course, you can also create parameterized scripts and pass in the names of the files you want to encrypt. </P
></LI
></UL
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="SQL2-CH-23-SECT-7.3"
>23.7.3 Impact of Encrypting Code</A
></H3
><P
CLASS="para"
>There are several points to consider as you move to encrypting your PL/SQL code base: </P
><UL
CLASS="itemizedlist"
><LI
CLASS="listitem"
><P
CLASS="para"
>If you are an Oracle VAR, you probably are supporting multiple Oracle versions, from 7.0 or 7.1 to Oracle 8.x. If you are a lucky Oracle VAR, you will have (in many cases) one version of PL/SQL code which will work across all of these versions. If this is the case, then you can decide whether you want to have different encrypted versions of that same program for each Oracle release. You can do this (execute <EM
CLASS="emphasis"
>wrap71</EM
>, <EM
CLASS="emphasis"
>wrap72</EM
>, etc., for each of your versions) or you can simply encrypt at the highest version number (say, <I
CLASS="filename"
>wrap</I
> 80). This most recent encryption will compile in earlier versions. Earlier versions of encrypted code will not, however, compile properly in later versions of Oracle. </P
></LI
><LI
CLASS="listitem"
><P
CLASS="para"
>To encrypt your source code, you must place that code in an operating system file. If you are working within a PL/SQL development environment which allows you to build and maintain source directly in the database, you will have to "dump" this code to a file, wrap it, and then compile it back into the database&nbsp;-- thereby wiping out your original, readable, and maintainable source code. This is not an issue as you <EM
CLASS="emphasis"
>deploy</EM
> software to customers, but it could cause some uncomfortable situations as you develop and maintain applications. </P
></LI
><LI
CLASS="listitem"
><P
CLASS="para"
>You can only encrypt package specifications, package bodies, and standalone functions and procedures. You can run the <EM
CLASS="emphasis"
>wrapNN</EM
> binary against any other sort of SQL and PL/SQL statement, but those files will not be changed. </P
></LI
><LI
CLASS="listitem"
><P
CLASS="para"
>You can tell when a program is encrypted by examining the program header. If there are no comments in the program <A
CLASS="indexterm"
NAME="AUTOID-22047"
></A
>header, then you will see this text in the first line of USER_SOURCE for a encrypted package body: </P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>PACKAGE BODY &lt;package_name&gt; WRAPPED </PRE
></BLOCKQUOTE
><P
CLASS="para"
>Even if you don't notice the keyword WRAPPED on the first line, you will immediately know that you are looking at encrypted code because the text in USER_SOURCE will look like this: </P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>   LINE TEXT
------- ----------------------
     45 abcd
     46 95a425ff
     47 a2
     48 7 PACKAGE:</PRE
></BLOCKQUOTE
><P
CLASS="para"
>and you know that no matter how bad your coding style, it surely isn't that bad. </P
></LI
><LI
CLASS="listitem"
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="AUTOID-22056"
></A
> <A
CLASS="indexterm"
NAME="AUTOID-22059"
></A
> Comment lines are removed from the encrypted program (who's going to read them?) except for comment text which appears in the header of the program definition. That is, any comments that appear before the AS or IS keywords are preserved. This allows you to provide documentation on usage and copyright to all users of your software without revealing any proprietary information. For example, the following program description will appear in readable format in USER_SOURCE: </P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>CREATE OR REPLACE PACKAGE
/*
|| Author: Steven Feuerstein
|| Overview: Collect all financial calcs together.
*/
financials WRAPPED</PRE
></BLOCKQUOTE
><P
CLASS="para"
>I have found that when using large, complex comment blocks, the <EM
CLASS="emphasis"
>wrapNN</EM
> program (at least through <EM
CLASS="emphasis"
>wrap73</EM
>) either rejects valid source code for encryption, or encrypts successfully but then fails to compile. You may find that you need to simplify or shorten your standard headers when using the wrap utility. </P
></LI
><LI
CLASS="listitem"
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="AUTOID-22068"
></A
> <A
CLASS="indexterm"
NAME="AUTOID-22071"
></A
>Encrypted code is much larger than the original source. I have found in my experience that a 57KB readable package body turns into a 153KB encrypted package body, while a 86KB readable package body turns into a 357KB encrypted package body. These increases in file size do result in increased requirements for storing source code in the database. The size of compiled code stays the same. </P
></LI
></UL
><BLOCKQUOTE
CLASS="note"
><P
CLASS="para"
><STRONG
>NOTE:</STRONG
> As of fall 1997, no one has yet admitted to having been able to (or bothering to) crack the encryption of wrapped PL/SQL code. But don't get your hopes up too high!<A
CLASS="indexterm"
NAME="AUTOID-22076"
></A
> <A
CLASS="indexterm"
NAME="AUTOID-22077"
></A
> <A
CLASS="indexterm"
NAME="AUTOID-22078"
></A
> <A
CLASS="indexterm"
NAME="AUTOID-22079"
></A
></P
></BLOCKQUOTE
></DIV
></DIV
><DIV
CLASS="htmlnav"
><P
></P
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch23_06.htm#SQL2-CH-23-SECT-6.3"
TITLE="23.6 Using SQL to Examine Stored Objects"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 23.6 Using SQL to Examine Stored Objects"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="book"
HREF="index.htm"
TITLE="Oracle PL/SQL Programming, 2nd Edition"
><IMG
SRC="../gifs/txthome.gif"
ALT="Oracle PL/SQL Programming, 2nd Edition"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="chapter"
HREF="ch24_01.htm"
TITLE="24. Debugging PL/SQL"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 24. Debugging PL/SQL"
BORDER="0"></A
></TD
></TR
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
>23.6 Using SQL to Examine Stored Objects</TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="index"
HREF="index/idx_0.htm"
TITLE="Book Index"
><IMG
SRC="../gifs/index.gif"
ALT="Book Index"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
>24. Debugging PL/SQL</TD
></TR
></TABLE
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"></DIV
><IMG SRC="../gifs/smnavbar.gif"
USEMAP="#map"
BORDER="0"
ALT="The Oracle Library Navigation">

<P><font size="-1">
<a href="../copyrght.htm#copy">Copyright (c) 2000</a> O'Reilly &amp; Associates. All rights reserved.
</font></P>

<MAP NAME="map">

<AREA SHAPE="RECT"
COORDS="0,0,35,30"
HREF="../index.htm"
ALT="Library Home">

<AREA SHAPE="RECT"
COORDS="40,0,95,30"
HREF="index.htm"
ALT="Oracle PL/SQL Programming, 2nd. Ed.">

<AREA SHAPE="RECT"
COORDS="100,0,200,30"
HREF="../guide8i/index.htm"
ALT="Guide to Oracle 8i Features">

<AREA SHAPE="RECT"
COORDS="205,0,245,30"
HREF="../bipack/index.htm"
ALT="Oracle Built-in Packages">

<AREA SHAPE="RECT"
COORDS="250,0,320,30"
HREF="../advprog/index.htm"
ALT="Advanced PL/SQL Programming with Packages">

<AREA SHAPE="RECT"
COORDS="325,0,420,30"
HREF="../webapp/index.htm"
ALT="Oracle Web Applications">

<AREA SHAPE="RECT"
COORDS="425,0,490,30"
HREF="../langpkt/index.htm"
ALT="Oracle PL/SQL Language Pocket Reference">

<AREA SHAPE="RECT"
COORDS="495,0,570,30"
HREF="../bipkt/index.htm"
ALT="Oracle PL/SQL Built-ins Pocket Reference">
</MAP>

</BODY
>
<!-- Mirrored from liso.cs.pusan.ac.kr by HTTrack Website Copier/3.x [XR&CO'2001] -->
</HTML
>
