<HTML
><HEAD
><TITLE
>[Chapter 19] 19.7 Example: PL/SQL-to-Server Integration</TITLE
><META
NAME="DC.Creator"
CONTENT="Steven Feuerstein &amp; Bill Pribyl"><META
NAME="DC.Date"
CONTENT="2000-04-29T19:09:00Z"><META
NAME="DC.Format"
CONTENT="text/html"
SCHEME="MIME"><META
NAME="DC.Identifier"
CONTENT="O'Reilly and Associates CD-ROM-1-56592-335-9E"><META
NAME="DC.Language"
CONTENT="en-US"><META
NAME="DC.Publisher"
CONTENT="O'Reilly &amp; Associates, Inc."><META
NAME="DC.Source"
CONTENT="1-56592-335-9E"
SCHEME="ISBN"><META
NAME="DC.Subject.Keyword"
CONTENT="Oracle PL/SQL"><META
NAME="DC.Title"
CONTENT="Oracle PL/SQL Programming, 2nd Edition"><META
NAME="DC.Type"
CONTENT="Text.Monograph"><META
NAME="generator"
CONTENT="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><LINK
REL="stylesheet"
TYPE="text/css"
HREF="../style/style1.css"><LINK
REV="made"
HREF="mailto:online-books@oreilly.com"
TITLE="Online Books Comments"><LINK
REL="up"
HREF="ch19_01.htm"
TITLE="19. Nested Tables and VARRAYs"><LINK
REL="prev"
HREF="ch19_06.htm#SQL2-CH-19-SECT-6.0.5"
TITLE="19.6 Collection Built-Ins"><LINK
REL="next"
HREF="ch19_08.htm#SQL2-CH-19-SECT-8.1"
TITLE="19.8 Collections Housekeeping"></HEAD
><BODY
><DIV
CLASS="htmlnav"
><H1
><IMG
SRC="gifs/smbanner.gif"
ALT="Oracle PL/SQL Programming, 2nd Edition"
USEMAP="#srchmap"
BORDER="0"></H1
><MAP
NAME="srchmap"
><AREA
SHAPE="RECT"
COORDS="0,0,466,65"
HREF="index.htm"
ALT="Oracle PL/SQL Programming, 2nd Edition"><AREA
SHAPE="RECT"
COORDS="467,0,514,18"
HREF="jobjects/fsearch.htm"
ALT="Search this book"></MAP
><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch19_06.htm#SQL2-CH-19-SECT-6.0.5"
TITLE="19.6 Collection Built-Ins"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 19.6 Collection Built-Ins"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><SPAN
CLASS="NAVTITLE"
><A
CLASS="chapter"
REL="up"
HREF="ch19_01.htm"
TITLE="19. Nested Tables and VARRAYs"
>Chapter 19<BR>Nested Tables and VARRAYs</A
></SPAN
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch19_08.htm#SQL2-CH-19-SECT-8.1"
TITLE="19.8 Collections Housekeeping"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 19.8 Collections Housekeeping"
BORDER="0"></A
></TD
></TR
></TABLE
>&nbsp;<HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"></DIV
><DIV
CLASS="sect1"
><H2
CLASS="sect1"
><A
CLASS="title"
NAME="SQL2-CH-19-SECT-7"
>19.7 Example: PL/SQL-to-Server Integration</A
></H2
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="ch19-idx-8663-1"
></A
><A
CLASS="indexterm"
NAME="ch19-idx-8663-2"
></A
><A
CLASS="indexterm"
NAME="ch19-idx-8663-3"
></A
>To provide an(other) demonstration of how collections can ease the burden of transferring data between server and PL/SQL application program, let's look at a new example. The main entity in this example is the "apartment complex." We use a nested table of objects in order to hold the list of apartments for each apartment complex. </P
><P
CLASS="para"
>Each apartment is described by the following attributes:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>CREATE TYPE Apartment_t AS OBJECT (
   unit_no NUMBER,
   square_feet NUMBER,
   bedrooms NUMBER,
   bathrooms NUMBER,
   rent_in_dollars NUMBER
);</PRE
></BLOCKQUOTE
><P
CLASS="para"
>And we can now define the nested table type which will hold a list of these apartment objects: </P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>CREATE TYPE Apartment_tab_t AS TABLE OF Apartment_t;</PRE
></BLOCKQUOTE
><P
CLASS="para"
>Using this type as the type of a column, here is the definition of our database table: </P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>CREATE TABLE apartment_complexes
  (name VARCHAR2(75),
   landlord_name VARCHAR2(45),
   apartments Apartment_tab_t)
NESTED TABLE apartments STORE AS apartments_store_tab;</PRE
></BLOCKQUOTE
><P
CLASS="para"
>If you're curious, the INSERT statements to populate such a table look like the following (note the use of nested constructors to create the collection of objects): </P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>INSERT INTO apartment_complexes VALUES
   ('RIVER OAKS FOUR', 'MR. JOHNSON',
     Apartment_tab_t(
        Apartment_t(1, 780, 2, 1, 975),
        Apartment_t(2, 1200, 3, 2, 1590),
        Apartment_t(3, 690, 1, 1.5, 800),
        Apartment_t(4, 690, 1, 2, 450),
        Apartment_t(5, 870, 2, 2, 990)
     )
   );
INSERT INTO apartment_complexes VALUES
   ('GALLERIA PLACE', 'MS. DODENHOFF',
     Apartment_tab_t(
        Apartment_t(101, 1000, 3, 2, 1295),
        Apartment_t(102, 800, 2, 1, 995),
        Apartment_t(103, 800, 2, 1, 995),
        Apartment_t(201, 920, 3, 1.5, 1195),
        Apartment_t(202, 920, 3, 1.5, 1195),
        Apartment_t(205, 1000, 3, 2, 1295)
     )
  );</PRE
></BLOCKQUOTE
><P
CLASS="para"
>Now, at last, we can show off some wonderful features of storing collections in the database. </P
><P
CLASS="para"
>Imagine that we are the new managers of the River Oaks Four apartments (hardly large enough to qualify as a complex) and we want to demolish any unit that rents for less than $500, and raise the rent on everything else by 15%. </P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>DECLARE
   /* Declare the cursor that will retrieve the collection of
   || apartment objects. Since we know we're going to update the
   || record, we can lock it using FOR UPDATE.
   */
   CURSOR aptcur IS
      SELECT apartments
        FROM apartment_complexes
       WHERE name = 'RIVER OAKS FOUR'
         FOR UPDATE OF apartments;

   /* Need a local variable to hold the collection of fetched
   || apartment objects.
   */
   l_apartments apartment_tab_t;
   which INTEGER;
BEGIN
   /* A single fetch is all we need! */
   OPEN aptcur;
   FETCH aptcur INTO l_apartments;
   CLOSE aptcur;

   /* Iterate over the apartment objects in the collection and
   || delete any elements of the nested table which meet the
   || criteria
   */
   which := l_apartments.FIRST;
   LOOP
      EXIT WHEN which IS NULL;
      IF l_apartments(which).rent_in_dollars &lt; 500
      THEN
         l_apartments.DELETE(which);
      END IF;
      which := l_apartments.NEXT(which);
   END LOOP;

   /* Now iterate over the remaining apartments and raise the
   || rent. Notice that this code will skip any deleted
   || elements.
   */
   which := l_apartments.FIRST;
   LOOP
      EXIT WHEN which IS NULL;
      l_apartments(which).rent_in_dollars :=
         l_apartments(which).rent_in_dollars * 1.15;
      which := l_apartments.NEXT(which);

   END LOOP;

   /* Finally, ship the entire apartment collection back to the
   || server -- in a single statement!
   */
   UPDATE apartment_complexes
      SET apartments = l_apartments
    WHERE name = 'RIVER OAKS FOUR';

END;</PRE
></BLOCKQUOTE
><P
CLASS="para"
>To me, one of the most significant aspects of this example is the single-statement fetch (and store). This PL/SQL fragment emulates the creating of a "client-side cache" of data, which is an essential concept in many object-oriented and client-server architectures. Using this kind of approach with collections can reduce network traffic and improve the quality of your code.<A
CLASS="indexterm"
NAME="AUTOID-18609"
></A
> <A
CLASS="indexterm"
NAME="AUTOID-18610"
></A
> <A
CLASS="indexterm"
NAME="AUTOID-18611"
></A
> </P
></DIV
><DIV
CLASS="htmlnav"
><P
></P
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch19_06.htm#SQL2-CH-19-SECT-6.0.5"
TITLE="19.6 Collection Built-Ins"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 19.6 Collection Built-Ins"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="book"
HREF="index.htm"
TITLE="Oracle PL/SQL Programming, 2nd Edition"
><IMG
SRC="../gifs/txthome.gif"
ALT="Oracle PL/SQL Programming, 2nd Edition"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch19_08.htm#SQL2-CH-19-SECT-8.1"
TITLE="19.8 Collections Housekeeping"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 19.8 Collections Housekeeping"
BORDER="0"></A
></TD
></TR
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
>19.6 Collection Built-Ins</TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="index"
HREF="index/idx_0.htm"
TITLE="Book Index"
><IMG
SRC="../gifs/index.gif"
ALT="Book Index"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
>19.8 Collections Housekeeping</TD
></TR
></TABLE
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"></DIV
><IMG SRC="../gifs/smnavbar.gif"
USEMAP="#map"
BORDER="0"
ALT="The Oracle Library Navigation">

<P><font size="-1">
<a href="../copyrght.htm#copy">Copyright (c) 2000</a> O'Reilly &amp; Associates. All rights reserved.
</font></P>

<MAP NAME="map">

<AREA SHAPE="RECT"
COORDS="0,0,35,30"
HREF="../index.htm"
ALT="Library Home">

<AREA SHAPE="RECT"
COORDS="40,0,95,30"
HREF="index.htm"
ALT="Oracle PL/SQL Programming, 2nd. Ed.">

<AREA SHAPE="RECT"
COORDS="100,0,200,30"
HREF="../guide8i/index.htm"
ALT="Guide to Oracle 8i Features">

<AREA SHAPE="RECT"
COORDS="205,0,245,30"
HREF="../bipack/index.htm"
ALT="Oracle Built-in Packages">

<AREA SHAPE="RECT"
COORDS="250,0,320,30"
HREF="../advprog/index.htm"
ALT="Advanced PL/SQL Programming with Packages">

<AREA SHAPE="RECT"
COORDS="325,0,420,30"
HREF="../webapp/index.htm"
ALT="Oracle Web Applications">

<AREA SHAPE="RECT"
COORDS="425,0,490,30"
HREF="../langpkt/index.htm"
ALT="Oracle PL/SQL Language Pocket Reference">

<AREA SHAPE="RECT"
COORDS="495,0,570,30"
HREF="../bipkt/index.htm"
ALT="Oracle PL/SQL Built-ins Pocket Reference">
</MAP>

</BODY
>
<!-- Mirrored from liso.cs.pusan.ac.kr by HTTrack Website Copier/3.x [XR&CO'2001] -->
</HTML
>
