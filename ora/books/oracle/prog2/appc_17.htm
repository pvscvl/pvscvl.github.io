<HTML
><HEAD
><TITLE
>[Appendix C] C.17 UTL_FILE</TITLE
><META
NAME="DC.Creator"
CONTENT="Steven Feuerstein &amp; Bill Pribyl"><META
NAME="DC.Date"
CONTENT="2000-04-29T19:14:47Z"><META
NAME="DC.Format"
CONTENT="text/html"
SCHEME="MIME"><META
NAME="DC.Identifier"
CONTENT="O'Reilly and Associates CD-ROM-1-56592-335-9E"><META
NAME="DC.Language"
CONTENT="en-US"><META
NAME="DC.Publisher"
CONTENT="O'Reilly &amp; Associates, Inc."><META
NAME="DC.Source"
CONTENT="1-56592-335-9E"
SCHEME="ISBN"><META
NAME="DC.Subject.Keyword"
CONTENT="Oracle PL/SQL"><META
NAME="DC.Title"
CONTENT="Oracle PL/SQL Programming, 2nd Edition"><META
NAME="DC.Type"
CONTENT="Text.Monograph"><META
NAME="generator"
CONTENT="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><LINK
REL="stylesheet"
TYPE="text/css"
HREF="../style/style1.css"><LINK
REV="made"
HREF="mailto:online-books@oreilly.com"
TITLE="Online Books Comments"><LINK
REL="up"
HREF="appc_01.htm"
TITLE="C. Built-In Packages"><LINK
REL="prev"
HREF="appc_16.htm#appc-133-fm2xml"
TITLE="C.16 DBMS_UTILITY"></HEAD
><BODY
><DIV
CLASS="htmlnav"
><H1
><IMG
SRC="gifs/smbanner.gif"
ALT="Oracle PL/SQL Programming, 2nd Edition"
USEMAP="#srchmap"
BORDER="0"></H1
><MAP
NAME="srchmap"
><AREA
SHAPE="RECT"
COORDS="0,0,466,65"
HREF="index.htm"
ALT="Oracle PL/SQL Programming, 2nd Edition"><AREA
SHAPE="RECT"
COORDS="467,0,514,18"
HREF="jobjects/fsearch.htm"
ALT="Search this book"></MAP
><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="appc_16.htm#appc-133-fm2xml"
TITLE="C.16 DBMS_UTILITY"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: C.16 DBMS_UTILITY"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><SPAN
CLASS="NAVTITLE"
><A
CLASS="appendix"
REL="up"
HREF="appc_01.htm"
TITLE="C. Built-In Packages"
>Appendix C<BR>Built-In Packages</A
></SPAN
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
>&nbsp;</TD
></TR
></TABLE
>&nbsp;<HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"></DIV
><DIV
CLASS="sect1"
><H2
CLASS="sect1"
><A
CLASS="title"
NAME="SQL2-AP-C-SECT-17"
>C.17 UTL_FILE</A
></H2
><P
CLASS="para"
>The <A
CLASS="indexterm"
NAME="appc-idx-857327-1"
></A
><A
CLASS="indexterm"
NAME="appc-idx-857327-2"
></A
><A
CLASS="indexterm"
NAME="appc-idx-857327-3"
></A
>UTL_FILE package allows your PL/SQL programs to both read from and write to operating system files. You can call UTL_FILE from within programs stored in the database server or from within client-side application modules, such as those built with Oracle Forms. You can, therefore, interact with operating system files both on the local workstation (client) and on the server disks. </P
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="SQL2-AP-C-SECT-17.1"
>C.17.1 Setting Up UTL_FILE</A
></H3
><P
CLASS="para"
>Before you can read and write operating system files on the server, you must make changes to the <I
CLASS="filename"
>INIT.ORA</I
> initialization file of your database instance (this is generally a DBA task). Specifically, you must add one or more entries for the utl_file_dir parameter. Each line must have this format: </P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>utl_file_dir = &lt;directory&gt;</PRE
></BLOCKQUOTE
><P
CLASS="para"
>where &lt;directory&gt; is either a specific directory or a single asterisk. If your entry has this format: </P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>utl_file_dir = *</PRE
></BLOCKQUOTE
><P
CLASS="para"
>then you will be able to read from and write to any directory accessible from your server machine. If you want to enable file I/O for a restricted set of directories, provide separate entries in the <I
CLASS="filename"
>INIT.ORA</I
> file as shown below: </P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>utl_file_dir = /tmp/trace
utl_file_dir = /user/dev/george/files</PRE
></BLOCKQUOTE
><P
CLASS="para"
>The Oracle user must then have operating system privileges on a directory in order to write to it or read from it. Finally, any files created through UTL_FILE will have the default privileges taken from the Oracle user. </P
><DIV
CLASS="sect3"
><H4
CLASS="sect3"
><A
CLASS="title"
NAME="appc-144-fm2xml"
>C.17.1.1 The <A
CLASS="indexterm"
NAME="AUTOID-25130"
></A
> FCLOSE procedure</A
></H4
><P
CLASS="para"
>Use FCLOSE to close an open file. The specification is:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>PROCEDURE UTL_FILE.FCLOSE (file_in UTL_FILE.FILE_TYPE);</PRE
></BLOCKQUOTE
></DIV
><DIV
CLASS="sect3"
><H4
CLASS="sect3"
><A
CLASS="title"
NAME="appc-145-fm2xml"
>C.17.1.2 The <A
CLASS="indexterm"
NAME="AUTOID-25136"
></A
> FCLOSE_ALL procedure</A
></H4
><P
CLASS="para"
>FCLOSE_ALL closes all of the opened files. The specification is:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>PROCEDURE UTL_FILE.FCLOSE_ALL;</PRE
></BLOCKQUOTE
></DIV
><DIV
CLASS="sect3"
><H4
CLASS="sect3"
><A
CLASS="title"
NAME="appc-146-fm2xml"
>C.17.1.3 The <A
CLASS="indexterm"
NAME="AUTOID-25142"
></A
> FFLUSH procedure</A
></H4
><P
CLASS="para"
>The FFLUSH procedure flushes the contents of the UTL_FILE buffer out to the specified file. You will want to use FFLUSH to make sure that any buffered messages are written to the file and therefore available for reading. The specification is: </P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>PROCEDURE UTL_FILE.FFLUSH (file IN FILE_TYPE);</PRE
></BLOCKQUOTE
></DIV
><DIV
CLASS="sect3"
><H4
CLASS="sect3"
><A
CLASS="title"
NAME="appc-147-fm2xml"
>C.17.1.4 The <A
CLASS="indexterm"
NAME="AUTOID-25148"
></A
> FOPEN function</A
></H4
><P
CLASS="para"
>The FOPEN function opens the specified file and returns a file handle that you can then use to manipulate the file. The specification is: </P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>FUNCTION UTL_FILE.FOPEN
   (location_in IN VARCHAR2,
    file_name_in IN VARCHAR2,
    file_mode_in IN VARCHAR2)
RETURN UTL_FILE.FILE_TYPE;</PRE
></BLOCKQUOTE
></DIV
><DIV
CLASS="sect3"
><H4
CLASS="sect3"
><A
CLASS="title"
NAME="appc-148-fm2xml"
>C.17.1.5 The <A
CLASS="indexterm"
NAME="AUTOID-25154"
></A
> GET_LINE procedure</A
></H4
><P
CLASS="para"
>The GET_LINE procedure reads a line of data from the specified file, if it is open, into the provided line buffer. The specification is: </P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>PROCEDURE UTL_FILE.GET_LINE
   (file_in IN UTL_FILE.FILE_TYPE,
    line_out OUT VARCHAR2);</PRE
></BLOCKQUOTE
></DIV
><DIV
CLASS="sect3"
><H4
CLASS="sect3"
><A
CLASS="title"
NAME="appc-149-fm2xml"
>C.17.1.6 The <A
CLASS="indexterm"
NAME="AUTOID-25160"
></A
> IS_OPEN function</A
></H4
><P
CLASS="para"
>The IS_OPEN function returns TRUE if the specified handle points to a file that is already open. Otherwise it returns false. The specification is: </P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>FUNCTION UTL_FILE.IS_OPEN
   (file_in IN UTL_FILE.FILE_TYPE)
RETURN BOOLEAN;</PRE
></BLOCKQUOTE
></DIV
><DIV
CLASS="sect3"
><H4
CLASS="sect3"
><A
CLASS="title"
NAME="appc-150-fm2xml"
>C.17.1.7 The <A
CLASS="indexterm"
NAME="AUTOID-25166"
></A
> NEW_LINE procedure</A
></H4
><P
CLASS="para"
>The NEW_LINE procedure inserts one or more newline characters in the specified file. The specification is: </P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>PROCEDURE UTL_FILE.NEW_LINE
   (file_in IN UTL_FILE.FILE_TYPE,
    num_lines_in IN PLS_INTEGER := 1); </PRE
></BLOCKQUOTE
></DIV
><DIV
CLASS="sect3"
><H4
CLASS="sect3"
><A
CLASS="title"
NAME="appc-151-fm2xml"
>C.17.1.8 The <A
CLASS="indexterm"
NAME="AUTOID-25172"
></A
> PUT procedure</A
></H4
><P
CLASS="para"
>The PUT procedure puts data out to the specified file. The PUT procedure is heavily overloaded so that you can easily call PUT with a number of different combinations of arguments. The specifications are: </P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>PROCEDURE UTL_FILE.PUT
   (file_in UTL_FILE.FILE_TYPE,
    item_in IN VARCHAR2);

PROCEDURE UTL_FILE.PUT (item_in IN VARCHAR2);

PROCEDURE UTL_FILE.PUT
   (file_in UTL_FILE.FILE_TYPE,
    item_in IN DATE);

PROCEDURE UTL_FILE.PUT (item_in IN DATE);

PROCEDURE UTL_FILE.PUT
   (file_in UTL_FILE.FILE_TYPE,
    item_in IN NUMBER);

PROCEDURE UTL_FILE.PUT (item_in IN NUMBER);

PROCEDURE UTL_FILE.PUT
   (file_in UTL_FILE.FILE_TYPE,
    item_in IN PLS_INTEGER);

PROCEDURE UTL_FILE.PUT (item_in IN PLS_INTEGER);</PRE
></BLOCKQUOTE
></DIV
><DIV
CLASS="sect3"
><H4
CLASS="sect3"
><A
CLASS="title"
NAME="appc-152-fm2xml"
>C.17.1.9 The <A
CLASS="indexterm"
NAME="AUTOID-25178"
></A
> PUTF procedure</A
></H4
><P
CLASS="para"
>Like PUT, PUTF puts data into a file, but it uses a message format (hence, the "F" in "PUTF") to interpret the different elements to be placed in the file. You can pass between one and five different items of data to PUTF. The specification is: </P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>PROCEDURE UTL_FILE.PUTF
   (file_in UTL_FILE.FILE_TYPE,
    format_in IN VARCHAR2,
    item1_in IN VARCHAR2
    [, item2_in IN VARCHAR2 ... item5_in IN VARCHAR2]);</PRE
></BLOCKQUOTE
></DIV
><DIV
CLASS="sect3"
><H4
CLASS="sect3"
><A
CLASS="title"
NAME="appc-153-fm2xml"
>C.17.1.10 The <A
CLASS="indexterm"
NAME="AUTOID-25184"
></A
> PUT_LINE procedure</A
></H4
><P
CLASS="para"
>The third variation of the PUT feature in UTL_FILE is PUT_LINE. This procedure writes data to a file and then immediately appends a newline character after the text. The specification is: </P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>PROCEDURE UTL_FILE.PUT_LINE
(file_in UTL_FILE.FILE_TYPE,<A
CLASS="indexterm"
NAME="AUTOID-25188"
></A
>
<A
CLASS="indexterm"
NAME="AUTOID-25189"
></A
>

item_in IN VARCHAR2);<A
CLASS="indexterm"
NAME="AUTOID-25190"
></A
>
<A
CLASS="indexterm"
NAME="AUTOID-25191"
></A
>
<A
CLASS="indexterm"
NAME="AUTOID-25192"
></A
></PRE
></BLOCKQUOTE
></DIV
></DIV
></DIV
><DIV
CLASS="htmlnav"
><P
></P
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="appc_16.htm#appc-133-fm2xml"
TITLE="C.16 DBMS_UTILITY"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: C.16 DBMS_UTILITY"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="book"
HREF="index.htm"
TITLE="Oracle PL/SQL Programming, 2nd Edition"
><IMG
SRC="../gifs/txthome.gif"
ALT="Oracle PL/SQL Programming, 2nd Edition"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
>&nbsp;</TD
></TR
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
>C.16 DBMS_UTILITY</TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="index"
HREF="index/idx_0.htm"
TITLE="Book Index"
><IMG
SRC="../gifs/index.gif"
ALT="Book Index"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
>&nbsp;</TD
></TR
></TABLE
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"></DIV
><IMG SRC="../gifs/smnavbar.gif"
USEMAP="#map"
BORDER="0"
ALT="The Oracle Library Navigation">

<P><font size="-1">
<a href="../copyrght.htm#copy">Copyright (c) 2000</a> O'Reilly &amp; Associates. All rights reserved.
</font></P>

<MAP NAME="map">

<AREA SHAPE="RECT"
COORDS="0,0,35,30"
HREF="../index.htm"
ALT="Library Home">

<AREA SHAPE="RECT"
COORDS="40,0,95,30"
HREF="index.htm"
ALT="Oracle PL/SQL Programming, 2nd. Ed.">

<AREA SHAPE="RECT"
COORDS="100,0,200,30"
HREF="../guide8i/index.htm"
ALT="Guide to Oracle 8i Features">

<AREA SHAPE="RECT"
COORDS="205,0,245,30"
HREF="../bipack/index.htm"
ALT="Oracle Built-in Packages">

<AREA SHAPE="RECT"
COORDS="250,0,320,30"
HREF="../advprog/index.htm"
ALT="Advanced PL/SQL Programming with Packages">

<AREA SHAPE="RECT"
COORDS="325,0,420,30"
HREF="../webapp/index.htm"
ALT="Oracle Web Applications">

<AREA SHAPE="RECT"
COORDS="425,0,490,30"
HREF="../langpkt/index.htm"
ALT="Oracle PL/SQL Language Pocket Reference">

<AREA SHAPE="RECT"
COORDS="495,0,570,30"
HREF="../bipkt/index.htm"
ALT="Oracle PL/SQL Built-ins Pocket Reference">
</MAP>

</BODY
>
<!-- Mirrored from liso.cs.pusan.ac.kr by HTTrack Website Copier/3.x [XR&CO'2001] -->
</HTML
>
