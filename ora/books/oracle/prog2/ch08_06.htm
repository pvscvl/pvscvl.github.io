<HTML
><HEAD
><TITLE
>[Chapter 8] 8.6 Handling Exceptions</TITLE
><META
NAME="DC.Creator"
CONTENT="Steven Feuerstein &amp; Bill Pribyl"><META
NAME="DC.Date"
CONTENT="2000-04-29T18:58:13Z"><META
NAME="DC.Format"
CONTENT="text/html"
SCHEME="MIME"><META
NAME="DC.Identifier"
CONTENT="O'Reilly and Associates CD-ROM-1-56592-335-9E"><META
NAME="DC.Language"
CONTENT="en-US"><META
NAME="DC.Publisher"
CONTENT="O'Reilly &amp; Associates, Inc."><META
NAME="DC.Source"
CONTENT="1-56592-335-9E"
SCHEME="ISBN"><META
NAME="DC.Subject.Keyword"
CONTENT="Oracle PL/SQL"><META
NAME="DC.Title"
CONTENT="Oracle PL/SQL Programming, 2nd Edition"><META
NAME="DC.Type"
CONTENT="Text.Monograph"><META
NAME="generator"
CONTENT="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><LINK
REL="stylesheet"
TYPE="text/css"
HREF="../style/style1.css"><LINK
REV="made"
HREF="mailto:online-books@oreilly.com"
TITLE="Online Books Comments"><LINK
REL="up"
HREF="ch08_01.htm"
TITLE="8. Exception Handlers"><LINK
REL="prev"
HREF="ch08_05.htm#SQL2-CH-8-SECT-5.1.2"
TITLE="8.5 Raising an Exception"><LINK
REL="next"
HREF="ch08_07.htm"
TITLE="8.7 Client-Server Error Communication"></HEAD
><BODY
><DIV
CLASS="htmlnav"
><H1
><IMG
SRC="gifs/smbanner.gif"
ALT="Oracle PL/SQL Programming, 2nd Edition"
USEMAP="#srchmap"
BORDER="0"></H1
><MAP
NAME="srchmap"
><AREA
SHAPE="RECT"
COORDS="0,0,466,65"
HREF="index.htm"
ALT="Oracle PL/SQL Programming, 2nd Edition"><AREA
SHAPE="RECT"
COORDS="467,0,514,18"
HREF="jobjects/fsearch.htm"
ALT="Search this book"></MAP
><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch08_05.htm#SQL2-CH-8-SECT-5.1.2"
TITLE="8.5 Raising an Exception"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 8.5 Raising an Exception"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><SPAN
CLASS="NAVTITLE"
><A
CLASS="chapter"
REL="up"
HREF="ch08_01.htm"
TITLE="8. Exception Handlers"
>Chapter 8<BR>Exception Handlers</A
></SPAN
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch08_07.htm"
TITLE="8.7 Client-Server Error Communication"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 8.7 Client-Server Error Communication"
BORDER="0"></A
></TD
></TR
></TABLE
>&nbsp;<HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"></DIV
><DIV
CLASS="sect1"
><H2
CLASS="sect1"
><A
CLASS="title"
NAME="SQL2-CH-8-SECT-6"
>8.6 Handling Exceptions</A
></H2
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="ch08-idx-998456-1"
></A
>Once an exception is raised, the current PL/SQL block stops its regular execution and transfers control to the exception section. The exception is then either handled by an exception handler in the current PL/SQL block or passed to the enclosing block. </P
><P
CLASS="para"
>Remember: once an exception is raised, the execution section is terminated. You cannot return to that body of code. </P
><P
CLASS="para"
>To handle or trap an exception once it is raised, you must write an exception handler for that exception. In your code, your exception handlers must appear after all the executable statements in your program but before the END statement of the block. <A
CLASS="indexterm"
NAME="AUTOID-7755"
></A
>The EXCEPTION keyword indicates the start of the exception section and the individual exception handlers. </P
><P
CLASS="para"
>The structure of the exception section is very similar to a CASE statement (which is not available in PL/SQL): </P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>EXCEPTION
   WHEN exception_name1
   THEN
      &lt;executable statements&gt;

   WHEN exception_nameN
   THEN
      &lt;executable statements&gt;

   WHEN OTHERS
   THEN
      &lt;executable statements&gt;
END;</PRE
></BLOCKQUOTE
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="AUTOID-7760"
></A
>where exception_name1 is the name of the first exception handled in the section, exception_nameN is the name of the last named exception handled in the section, and the WHEN OTHERS clause provides the "otherwise" portion of the CASE statement. Of course, the code for each exception handler need not be on the same line, as shown in the preceding example. Every executable statement after a THEN and before the next WHEN or the final END statement belongs to the exception named by the previous WHEN statement, and is executed when that exception is raised. </P
><P
CLASS="para"
>The WHEN OTHERS clause must be the last exception handler in the exception section. If you place any other WHEN clauses after WHEN OTHER, you will receive the following compilation error: </P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>PLS-00370: OTHERS handler must be last among the exception handlers
           of a block</PRE
></BLOCKQUOTE
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="SQL2-CH-8-SECT-6.1"
>8.6.1 Combining Multiple Exceptions in a Single Handler</A
></H3
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="AUTOID-7768"
></A
> You can, within a single WHEN clause, combine multiple exceptions together with an OR operator, just as you would combine multiple Boolean expressions: </P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>WHEN invalid_company_id OR negative_balance
THEN</PRE
></BLOCKQUOTE
><P
CLASS="para"
>You can also combine application and system exception names in a single handler: </P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>WHEN balance_too_low OR ZERO_DIVIDE
THEN</PRE
></BLOCKQUOTE
><P
CLASS="para"
>You cannot, however, use the AND operator, because only one exception can be raised at a time. </P
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="SQL2-CH-8-SECT-6.2"
>8.6.2 Unhandled Exceptions</A
></H3
><P
CLASS="para"
>If an exception is raised in your program and that exception is not handled by an exception section in either the current or enclosing PL/SQL blocks, that exception is "unhandled." PL/SQL returns the error which raised an unhandled exception all the way back to the application environment from which PL/SQL was run. That application environment (a tool like SQL*Plus, Oracle Forms, or a Powerbuilder program) then takes an action appropriate to the situation. </P
><P
CLASS="para"
>A well-designed application will not allow unhandled exceptions to occur. The best way to avoid unhandled exceptions is to make sure that the outermost PL/SQL block (whether it is an anonymous block in SQL*Plus or a stored procedure in the database) contains a WHEN OTHERS clause in its exception section. </P
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="SQL2-CH-8-SECT-6.3"
>8.6.3 Using SQLCODE and SQLERRM in WHEN OTHERS Clause</A
></H3
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="AUTOID-7783"
></A
> <A
CLASS="indexterm"
NAME="AUTOID-7785"
></A
><A
CLASS="indexterm"
NAME="AUTOID-7789"
></A
>You can use the WHEN OTHERS clause in the exception section to trap all otherwise unhandled exceptions, including internal errors which are not predefined by PL/SQL. Once inside the exception handler, however, you will often want to know which error occurred. You can use the SQLCODE function to obtain this information. </P
><P
CLASS="para"
>Consider the following situation. My application maintains companies and orders entered for those companies. My foreign key constraint on company_id in the orders table guarantees that I cannot delete a company if there are still child records (orders) in the database for that company. The following procedure deletes companies and handles any exceptions which might arise: </P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>PROCEDURE delete_company (company_id_in IN NUMBER)
IS
BEGIN
   DELETE FROM company WHERE company_id = company_id_in;

EXCEPTION
   WHEN OTHERS
   THEN
      DBMS_OUTPUT.PUTLINE (' Error deleting company.');
END;</PRE
></BLOCKQUOTE
><P
CLASS="para"
>Notice the generic nature of the error message. I don't have any idea what brought me there, so I cannot pass on much useful information to the users. Did the delete fail because there are orders still present? Then perhaps I would want to delete them and then delete the company. <A
CLASS="indexterm"
NAME="AUTOID-7794"
></A
>Fortunately, Oracle provides two functions, SQLCODE and SQLERRM, which return, respectively, the error code and the error message resulting from the most recently raised exception. (These two functions are described in detail in <A
CLASS="xref"
HREF="ch13_01.htm"
>Chapter 13, <CITE
CLASS="chapter"
>Numeric, LOB, and Miscellaneous Functions</CITE
></A
>, <EM
CLASS="emphasis"
>Numeric, LOB, and Miscellaneous Functions</EM
>.) </P
><P
CLASS="para"
>Combined with WHEN OTHERS, SQLCODE provides a way for you to handle different, specific exceptions without having to use the EXCEPTION_INIT pragma. In the next example, I trap both of the parent-child exceptions, -2292 and -2291, and then take an action appropriate to each situation: </P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>PROCEDURE delete_company (company_id_in IN NUMBER)
IS
BEGIN
   DELETE FROM company
    WHERE company_id = company_id_in;
EXCEPTION
   WHEN OTHERS
   THEN
      /*
      || Anonymous block inside the exception handler lets me declare
      || local variables to hold the error code information.
      */
      DECLARE
         error_code NUMBER := SQLCODE;
         error_msg  VARCHAR2 (300) := SQLERRM;
      BEGIN
         IF error_code = -2292
         THEN
            /* Child records found. Delete those too! */
            DELETE FROM employee
             WHERE company_id = company_id_in;

            /* Now delete parent again. */
            DELETE FROM company
             WHERE company_id = company_id_in;

         ELSIF error_code = -2291
         THEN
            /* Parent key not found. */
            DBMS_OUTPUT.PUTLINE
               (' Invalid company ID: '||TO_CHAR (company_id_in));
         ELSE
            /* This is like a WHEN OTHERS inside a WHEN OTHERS! */
            DBMS_OUTPUT.PUTLINE
               (' Error deleting company, error: '||error_msg);
         END IF;
      END; -- End of anonymous block.

END delete_company;</PRE
></BLOCKQUOTE
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="SQL2-CH-8-SECT-6.4"
>8.6.4 Continuing Past Exceptions</A
></H3
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="AUTOID-7805"
></A
>When an exception is raised in a PL/SQL block, normal execution is halted and control is transferred to the exception section. "You can never go home again," and you can never return to the execution section once an exception is raised in that block. In some cases, however, the ability to continue past exceptions is exactly the desired behavior. </P
><P
CLASS="para"
>Consider the following scenario: I need to write a procedure which performs a series of DML statements against a variety of tables (delete from one table, update another, insert into a final table). My first pass at writing this procedure might produce code like the following: </P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>PROCEDURE change_data IS
BEGIN
   DELETE FROM employee WHERE ... ;
   UPDATE company SET ... ;
   INSERT INTO company_history SELECT * FROM company WHERE ... ;
END;</PRE
></BLOCKQUOTE
><P
CLASS="para"
>This procedure certainly contains all the appropriate DML statements. But one of the requirements for this program is that, in spite of the fact that these statements are executed in sequence, they are logically independent of each other. In other words, even if the delete fails, I want to go on and perform the update and insert. </P
><P
CLASS="para"
>With the current version of change_data, I cannot make sure that all three DML statements will at least be attempted. If an exception is raised from the DELETE, for example, then the entire program's execution will halt and control will be passed to the exception section (if there is one). The remaining SQL statements will not be executed. </P
><P
CLASS="para"
>How can I get the exception to be raised and handled without terminating the program as a whole? The solution is to place the DELETE within its own PL/SQL block. Consider this next version of the change_data program: </P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>PROCEDURE change_data IS
BEGIN
   BEGIN
      DELETE FROM employee WHERE ... ;
   EXCEPTION
      WHEN OTHERS THEN NULL;
   END;

   BEGIN
      UPDATE company SET ... ;
   EXCEPTION
      WHEN OTHERS THEN NULL;
   END;

   BEGIN
      INSERT INTO company_history SELECT * FROM company WHERE ... ;
   EXCEPTION
      WHEN OTHERS THEN NULL;
   END;
END;</PRE
></BLOCKQUOTE
><P
CLASS="para"
>With this new format, if the DELETE raises an exception, control is immediately passed to the exception section. But now what a difference! Because the DELETE statement is in its own block, it has its own exception section. The WHEN OTHERS clause in that section smoothly handles the error by doing nothing. Control is then passed out of the DELETE's block and back to the enclosing change_data procedure. </P
><P
CLASS="para"
>Execution in this enclosing block then continues to the next statement in the procedure. A new anonymous block is then entered for the UPDATE statement. If the UPDATE statement fails, the WHEN OTHERS in the UPDATE's own exception section traps the problem and returns control to change_data, which blithely moves on to the INSERT statement (contained in its very own block). </P
><P
CLASS="para"
><A
CLASS="xref"
HREF="ch08_06.htm"
>Figure 8.8</A
> shows this process for two sequential DELETE statements. </P
><H4
CLASS="figure"
><A
CLASS="title"
NAME="SQL2-CH-8-FIG-9"
>Figure 8.8: Sequential DELETEs, using two different approaches to scope</A
></H4
><IMG
CLASS="graphic"
SRC="figs/sql2.0808.gif"
ALT="Figure 8.8"><P
CLASS="para"
>To summarize: a raised exception will always be handled in the current block&nbsp;-- if there is a matching handler present. You can always create a "virtual block" around any statement(s) by prefacing it with a BEGIN and following it with an EXCEPTION section and an END statement. So you can control the scope of failure caused by an exception by establishing "buffers" of anonymous blocks in your code. </P
><P
CLASS="para"
>You can also take this strategy a step further and move the code you want to isolate into its own procedures or functions. These named PL/SQL blocks may also, of course, have their own exception sections and will offer the same protection from total failure. The advantage of using procedures and functions is that you hide all the BEGIN-EXCEPTION-END statements from the mainline program. The program is then easier to read, understand, and maintain. </P
></DIV
></DIV
><DIV
CLASS="htmlnav"
><P
></P
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch08_05.htm#SQL2-CH-8-SECT-5.1.2"
TITLE="8.5 Raising an Exception"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 8.5 Raising an Exception"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="book"
HREF="index.htm"
TITLE="Oracle PL/SQL Programming, 2nd Edition"
><IMG
SRC="../gifs/txthome.gif"
ALT="Oracle PL/SQL Programming, 2nd Edition"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch08_07.htm"
TITLE="8.7 Client-Server Error Communication"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 8.7 Client-Server Error Communication"
BORDER="0"></A
></TD
></TR
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
>8.5 Raising an Exception</TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="index"
HREF="index/idx_0.htm"
TITLE="Book Index"
><IMG
SRC="../gifs/index.gif"
ALT="Book Index"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
>8.7 Client-Server Error Communication</TD
></TR
></TABLE
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"></DIV
><IMG SRC="../gifs/smnavbar.gif"
USEMAP="#map"
BORDER="0"
ALT="The Oracle Library Navigation">

<P><font size="-1">
<a href="../copyrght.htm#copy">Copyright (c) 2000</a> O'Reilly &amp; Associates. All rights reserved.
</font></P>

<MAP NAME="map">

<AREA SHAPE="RECT"
COORDS="0,0,35,30"
HREF="../index.htm"
ALT="Library Home">

<AREA SHAPE="RECT"
COORDS="40,0,95,30"
HREF="index.htm"
ALT="Oracle PL/SQL Programming, 2nd. Ed.">

<AREA SHAPE="RECT"
COORDS="100,0,200,30"
HREF="../guide8i/index.htm"
ALT="Guide to Oracle 8i Features">

<AREA SHAPE="RECT"
COORDS="205,0,245,30"
HREF="../bipack/index.htm"
ALT="Oracle Built-in Packages">

<AREA SHAPE="RECT"
COORDS="250,0,320,30"
HREF="../advprog/index.htm"
ALT="Advanced PL/SQL Programming with Packages">

<AREA SHAPE="RECT"
COORDS="325,0,420,30"
HREF="../webapp/index.htm"
ALT="Oracle Web Applications">

<AREA SHAPE="RECT"
COORDS="425,0,490,30"
HREF="../langpkt/index.htm"
ALT="Oracle PL/SQL Language Pocket Reference">

<AREA SHAPE="RECT"
COORDS="495,0,570,30"
HREF="../bipkt/index.htm"
ALT="Oracle PL/SQL Built-ins Pocket Reference">
</MAP>

</BODY
>
<!-- Mirrored from liso.cs.pusan.ac.kr by HTTrack Website Copier/3.x [XR&CO'2001] -->
</HTML
>
