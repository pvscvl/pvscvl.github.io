<HTML
><HEAD
><TITLE
>[Chapter 25] Tuning PL/SQL Applications</TITLE
><META
NAME="DC.Creator"
CONTENT="Steven Feuerstein &amp; Bill Pribyl"><META
NAME="DC.Date"
CONTENT="2000-04-29T19:13:01Z"><META
NAME="DC.Format"
CONTENT="text/html"
SCHEME="MIME"><META
NAME="DC.Identifier"
CONTENT="O'Reilly and Associates CD-ROM-1-56592-335-9E"><META
NAME="DC.Language"
CONTENT="en-US"><META
NAME="DC.Publisher"
CONTENT="O'Reilly &amp; Associates, Inc."><META
NAME="DC.Source"
CONTENT="1-56592-335-9E"
SCHEME="ISBN"><META
NAME="DC.Subject.Keyword"
CONTENT="Oracle PL/SQL"><META
NAME="DC.Title"
CONTENT="Oracle PL/SQL Programming, 2nd Edition"><META
NAME="DC.Type"
CONTENT="Text.Monograph"><META
NAME="generator"
CONTENT="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><LINK
REL="stylesheet"
TYPE="text/css"
HREF="../style/style1.css"><LINK
REV="made"
HREF="mailto:online-books@oreilly.com"
TITLE="Online Books Comments"><LINK
REL="up"
HREF="part06.htm"
TITLE="VI. Making PL/SQL Programs Work"><LINK
REL="prev"
HREF="ch24_02.htm#SQL2-CH-24-SECT-2.6"
TITLE="24.2 Debugging Tips and Strategies"><LINK
REL="next"
HREF="ch25_02.htm#SQL2-CH-25-SECT-2.3"
TITLE="25.2 Tuning Access to Compiled Code"></HEAD
><BODY
><DIV
CLASS="htmlnav"
><H1
><IMG
SRC="gifs/smbanner.gif"
ALT="Oracle PL/SQL Programming, 2nd Edition"
USEMAP="#srchmap"
BORDER="0"></H1
><MAP
NAME="srchmap"
><AREA
SHAPE="RECT"
COORDS="0,0,466,65"
HREF="index.htm"
ALT="Oracle PL/SQL Programming, 2nd Edition"><AREA
SHAPE="RECT"
COORDS="467,0,514,18"
HREF="jobjects/fsearch.htm"
ALT="Search this book"></MAP
><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch24_02.htm#SQL2-CH-24-SECT-2.6"
TITLE="24.2 Debugging Tips and Strategies"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 24.2 Debugging Tips and Strategies"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><SPAN
CLASS="NAVTITLE"
>Chapter 25</SPAN
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch25_02.htm#SQL2-CH-25-SECT-2.3"
TITLE="25.2 Tuning Access to Compiled Code"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 25.2 Tuning Access to Compiled Code"
BORDER="0"></A
></TD
></TR
></TABLE
>&nbsp;<HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"></DIV
><DIV
CLASS="chapter"
><H1
CLASS="chapter"
><A
CLASS="title"
NAME="SQL2-CH-25"
>25. Tuning PL/SQL Applications</A
></H1
><DIV
CLASS="htmltoc"
><P
><B
>Contents:</B
><BR><A
CLASS="sect1"
HREF="#SQL2-CH-25-SECT-1"
TITLE="25.1 Analyzing Program Performance"
>Analyzing Program Performance</A
><BR><A
CLASS="sect1"
HREF="ch25_02.htm#SQL2-CH-25-SECT-2.3"
TITLE="25.2 Tuning Access to Compiled Code"
>Tuning Access to Compiled Code</A
><BR><A
CLASS="sect1"
HREF="ch25_03.htm#SQL2-CH-25-SECT-3.4"
TITLE="25.3 Tuning Access to Your Data"
>Tuning Access to Your Data</A
><BR><A
CLASS="sect1"
HREF="ch25_04.htm#ch25-26-fm2xml"
TITLE="25.4 Tuning Your Algorithms"
>Tuning Your Algorithms</A
><BR><A
CLASS="sect1"
HREF="ch25_05.htm"
TITLE="25.5 Overview of PL/SQL8 Enhancements"
>Overview of PL/SQL8 Enhancements</A
></P
><P
></P
></DIV
><P
CLASS="para"
>Tuning an application is a very complicated process. Really, it deserves a book of its own. Fortunately, there is such a book: <CITE
CLASS="citetitle"
>Oracle Performance Tuning</CITE
> by Mark Gurry and Peter Corrigan.[<A
CLASS="footnote"
HREF="#AUTOID-22348"
>1</A
>] Many of the ideas in this section are drawn from&nbsp;-- and explored more thoroughly in&nbsp;-- Gurry and Corrigan's book. </P
><BLOCKQUOTE
CLASS="footnote"
><DIV
CLASS="footnote"
><P
CLASS="para"
><A
CLASS="footnote"
NAME="AUTOID-22348"
>[1]</A
> O'Reilly &amp; Associates, Second Edition, 1996. There are other books on Oracle tuning as well.</P
></DIV
></BLOCKQUOTE
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="AUTOID-22351"
></A
><A
CLASS="indexterm"
NAME="AUTOID-22354"
></A
><A
CLASS="indexterm"
NAME="AUTOID-22356"
></A
>Before diving into the particulars, I want to be sure that you recognize the different aspects of tuning PL/SQL that you might want to perform: </P
><UL
CLASS="itemizedlist"
><LI
CLASS="listitem"
><P
CLASS="para"
><EM
CLASS="emphasis"
>Analyzing program performance.</EM
> Before you can tune your application, you need to figure out what is running slowly and where you should focus your efforts. </P
></LI
><LI
CLASS="listitem"
><P
CLASS="para"
><EM
CLASS="emphasis"
>Tuning access to compiled code.</EM
> Before your code can be executed (and perhaps run too slowly), it must be loaded into the System Global Area (SGA) of the Oracle instance. This process can benefit from a focused tuning effort. </P
></LI
><LI
CLASS="listitem"
><P
CLASS="para"
><EM
CLASS="emphasis"
>Tuning access to your data.</EM
> Much of the tuning you do will attempt to optimize the way PL/SQL programs manipulate data in the Oracle database, both queries and DML (updates, inserts, deletes). Lots of the issues here involve tuning SQL statements (out of the scope of this book), but there are certainly steps you can take in your PL/SQL code and environment to improve the performance of even an optimally constructed chunk of SQL. </P
></LI
><LI
CLASS="listitem"
><P
CLASS="para"
><EM
CLASS="emphasis"
>Tuning your algorithms.</EM
> As a procedural language, PL/SQL is often used to implement complex formulas and algorithms. You make use of conditional statements, loops, perhaps even GOTOs and reusable modules (I hope) to get the job done. These algorithms can be written in many different ways, some of which perform very badly. How do you tune poorly written algorithms? A tough question with no simple answers; I offer some case studies at the end of this chapter which will perhaps give you some fresh approaches to bring to bear on your own code. </P
></LI
></UL
><P
CLASS="para"
>The following sections address each of these areas of PL/SQL tuning.</P
><DIV
CLASS="sect1"
><H2
CLASS="sect1"
><A
CLASS="title"
NAME="SQL2-CH-25-SECT-1"
>25.1 Analyzing Program Performance</A
></H2
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="ch25-idx-999808-1"
></A
><A
CLASS="indexterm"
NAME="ch25-idx-999808-2"
></A
><A
CLASS="indexterm"
NAME="ch25-idx-999808-3"
></A
><A
CLASS="indexterm"
NAME="ch25-idx-999808-4"
></A
> Before you can tune your application, you need to know what is causing it to slow down. To do this, you usually need to be able to analyze the performance of your application. Oracle offers a number of database monitoring and diagnostic tools, as do third-party vendors like Platinum Technology and Quest. Check Oracle documentation and Chapter 10 of <CITE
CLASS="citetitle"
>Oracle Performance Tuning</CITE
> for more details, and be aware of the following major tools:<A
CLASS="indexterm"
NAME="ch25-idx-999853-1"
></A
><A
CLASS="indexterm"
NAME="ch25-idx-999853-2"
></A
> </P
><DL
CLASS="variablelist"
><DT
CLASS="term"
>MONITOR<A
CLASS="indexterm"
NAME="AUTOID-22398"
></A
> </DT
><DD
CLASS="listitem"
><P
CLASS="para"
>A SQL*DBA facility that lets you look at various system activity and performance tables. </P
></DD
><DT
CLASS="term"
><A
CLASS="indexterm"
NAME="AUTOID-22404"
></A
> SQL_TRACE</DT
><DD
CLASS="listitem"
><P
CLASS="para"
>A utility that writes a trace file containing performance statistics.</P
></DD
><DT
CLASS="term"
>TKPROF</DT
><DD
CLASS="listitem"
><P
CLASS="para"
>A utility that translates the SQL_TRACE file into readable output and can also show the execution plan for a SQL statement. </P
></DD
><DT
CLASS="term"
><A
CLASS="indexterm"
NAME="AUTOID-22414"
></A
> EXPLAIN PLAN</DT
><DD
CLASS="listitem"
><P
CLASS="para"
>A statement that analyzes and displays the execution plan for a SQL statement. </P
></DD
><DT
CLASS="term"
><A
CLASS="indexterm"
NAME="AUTOID-22420"
></A
> ORADBX</DT
><DD
CLASS="listitem"
><P
CLASS="para"
>An undocumented tool that allows you to track a running process and create a trace file in the same format as the SQL_TRACE trace file. You can then run TKPROF against the trace file to obtain the execution plan details, as well as disk I/O, parsing, and CPU usage. </P
></DD
><DT
CLASS="term"
><A
CLASS="indexterm"
NAME="AUTOID-22426"
></A
> ANALYZE</DT
><DD
CLASS="listitem"
><P
CLASS="para"
>A statement that compiles statistics for use by the cost-based optimizer to construct its execution plan. The statement also produces other useful information that can be used to detect chained rows and help with capacity planning. </P
></DD
><DT
CLASS="term"
><A
CLASS="indexterm"
NAME="AUTOID-22432"
></A
> UTLBSTAT (begin) and UTLESTAT (end)</DT
><DD
CLASS="listitem"
><P
CLASS="para"
>Scripts that produce a snapshot of how the database is performing from the time you start UTLBSTAT until you run UTLESTAT. </P
></DD
><DT
CLASS="term"
><A
CLASS="indexterm"
NAME="AUTOID-22438"
></A
> Enterprise Manager/Performance Pack</DT
><DD
CLASS="listitem"
><P
CLASS="para"
>An Oracle product introduced with Oracle7.3 that provides some excellent tuning tools, including Oracle Performance Manager, Oracle Trace, and Oracle Expert. </P
></DD
></DL
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch25-2-fm2xml"
>25.1.1 Use the <A
CLASS="indexterm"
NAME="ch25-idx-999869-1"
></A
> <A
CLASS="indexterm"
NAME="ch25-idx-999869-2"
></A
> DBMS_UTILITY.GET_TIME Function</A
></H3
><P
CLASS="para"
>The tools listed in the previous section provide varying levels of detail and granularity; however, they all do require some effort&nbsp;-- often on the part of a person other than the PL/SQL developer in need&nbsp;-- to get them enabled. And then they require even more effort to interpret results. Don't get me wrong; I am not really complaining. It's just that, quite frankly, PL/SQL developers often want to examine the performance of a particular program and do not want to have to deal with all that other stuff. </P
><P
CLASS="para"
>No problem! PL/SQL provides a mechanism to obtain timings of code execution that are accurate to 100th of a second: the DBMS_UTILTY.GET_TIME function. Yes, that's right. I said 100th of a second. For those of you who have programmed in Oracle over the past few years, this should be a welcome surprise. Before the advent of the DBMS_UTILITY package, the only way to measure elapsed time was to use SYSDATE and examine the difference in the time component. Sadly, this component only records times down to the nearest second. This doesn't help much when you need to measure subsecond response time. </P
><P
CLASS="para"
>DBMS_UTILTY.GET_TIME returns the number of hundredths of seconds which have elapsed since some arbitrary point in time. I don't remember what that point is and, well, that's the whole point. A single value returned by a call to dbms_utility.get_time is, by itself, meaningless. If, on the other hand, you call this built-in function <EM
CLASS="emphasis"
>twice</EM
> and then take the difference between the two returned values, you will have determined the number of hundredths of seconds which elapsed <EM
CLASS="emphasis"
>between</EM
> the two calls. So if you sandwich the execution of your own program between calls to DBMS_UTILTY.GET_TIME, you will have discovered how long it takes to run that program. </P
><P
CLASS="para"
>The anonymous block below shows how to use GET_TIME to determine the time it takes to perform the calc_totals procedure: </P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>DECLARE
   time_before BINARY_INTEGER;
   time_after BINARY_INTEGER;
BEGIN
   time_before := DBMS_UTILITY.GET_TIME;
   calc_totals;
   time_after := DBMS_UTILITY.GET_TIME;
   DBMS_OUTPUT.PUT_LINE (time_after - time_before);
END;</PRE
></BLOCKQUOTE
><P
CLASS="para"
>I found myself relying on GET_TIME frequently as I developed the code in this book, because I wanted to analyze the performance impact of a particular approach or technique. Is it faster to raise an exception or execute an IF statement? Is it faster to load 100 rows in a table or concatenate 100 substrings into a long string? </P
><P
CLASS="para"
>There are two basic approaches you can take to using this handy function: </P
><UL
CLASS="itemizedlist"
><LI
CLASS="listitem"
><P
CLASS="para"
>Write again and again the kind of script you see above, changing the program or lines of code executed. </P
></LI
><LI
CLASS="listitem"
><P
CLASS="para"
>Encapsulate the way dbms_utility.get_time operates inside a package, which will hide the details and make it easier to use. </P
></LI
></UL
><P
CLASS="para"
>You will find on the companion disk an explanation and code for such a package, sp_timer, in the files sptimer.sps and sptimer.spb. In addition, you will find in <CITE
CLASS="citetitle"
>Advanced Oracle PL/SQL Programming with Packages</CITE
> a more complete performance timing utility based on DBMS_UTILITY.GET_TIME in the PLVtmr package. </P
><P
CLASS="para"
>Once you have encapsulated your usage of DBMS_UTILITY.GET_TIME, it is very easy to put together scripts which not only analyze performance, but also compare different implementations. The following script, for example, executes two different versions of the is_number function (see "<A
CLASS="xref"
HREF="ch25_04.htm#ch25-26-fm2xml"
>Section 25.4, "Tuning Your Algorithms"</A
>" for more information on this function) and displays the resulting elapsed times (using the PLVtmr and p packages from the PL/Vision library; again, see <CITE
CLASS="citetitle"
>Advanced Oracle PL/SQL Programming with Packages</CITE
>: </P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>SET VERIFY OFF
DECLARE
   b BOOLEAN;
BEGIN
   PLVtmr.set_factor (&amp;1)
   PLVtmr.capture;
   FOR repind IN 1 .. &amp;1 -- Number of iterations
   LOOP
      b := isnum ('&amp;2'); -- The string to test
      IF repind = 1
      THEN
         p.l (b);
      END IF;
   END LOOP;
   PLVtmr.show_elapsed (`TO_NUMBER Version');

   PLVtmr.set_factor (&amp;1)
   PLVtmr.capture;
   FOR repind IN 1 .. &amp;1
   LOOP
      b := isnum_translate ('&amp;2');
      PLVtmr.last_timing := 15;
      IF repind = 1
      THEN
         p.l (b);
      END IF;
   END LOOP;<A
CLASS="indexterm"
NAME="AUTOID-22469"
></A
>
<A
CLASS="indexterm"
NAME="AUTOID-22470"
></A
>

   PLVtmr.show_elapsed (`TRANSLATE Version');<A
CLASS="indexterm"
NAME="AUTOID-22471"
></A
>
<A
CLASS="indexterm"
NAME="AUTOID-22472"
></A
>

 END;<A
CLASS="indexterm"
NAME="AUTOID-22473"
></A
>
<A
CLASS="indexterm"
NAME="AUTOID-22474"
></A
>
<A
CLASS="indexterm"
NAME="AUTOID-22475"
></A
>
<A
CLASS="indexterm"
NAME="AUTOID-22476"
></A
>

/</PRE
></BLOCKQUOTE
></DIV
></DIV
></DIV
><DIV
CLASS="htmlnav"
><P
></P
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch24_02.htm#SQL2-CH-24-SECT-2.6"
TITLE="24.2 Debugging Tips and Strategies"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 24.2 Debugging Tips and Strategies"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="book"
HREF="index.htm"
TITLE="Oracle PL/SQL Programming, 2nd Edition"
><IMG
SRC="../gifs/txthome.gif"
ALT="Oracle PL/SQL Programming, 2nd Edition"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch25_02.htm#SQL2-CH-25-SECT-2.3"
TITLE="25.2 Tuning Access to Compiled Code"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 25.2 Tuning Access to Compiled Code"
BORDER="0"></A
></TD
></TR
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
>24.2 Debugging Tips and Strategies</TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="index"
HREF="index/idx_0.htm"
TITLE="Book Index"
><IMG
SRC="../gifs/index.gif"
ALT="Book Index"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
>25.2 Tuning Access to Compiled Code</TD
></TR
></TABLE
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"></DIV
><IMG SRC="../gifs/smnavbar.gif"
USEMAP="#map"
BORDER="0"
ALT="The Oracle Library Navigation">

<P><font size="-1">
<a href="../copyrght.htm#copy">Copyright (c) 2000</a> O'Reilly &amp; Associates. All rights reserved.
</font></P>

<MAP NAME="map">

<AREA SHAPE="RECT"
COORDS="0,0,35,30"
HREF="../index.htm"
ALT="Library Home">

<AREA SHAPE="RECT"
COORDS="40,0,95,30"
HREF="index.htm"
ALT="Oracle PL/SQL Programming, 2nd. Ed.">

<AREA SHAPE="RECT"
COORDS="100,0,200,30"
HREF="../guide8i/index.htm"
ALT="Guide to Oracle 8i Features">

<AREA SHAPE="RECT"
COORDS="205,0,245,30"
HREF="../bipack/index.htm"
ALT="Oracle Built-in Packages">

<AREA SHAPE="RECT"
COORDS="250,0,320,30"
HREF="../advprog/index.htm"
ALT="Advanced PL/SQL Programming with Packages">

<AREA SHAPE="RECT"
COORDS="325,0,420,30"
HREF="../webapp/index.htm"
ALT="Oracle Web Applications">

<AREA SHAPE="RECT"
COORDS="425,0,490,30"
HREF="../langpkt/index.htm"
ALT="Oracle PL/SQL Language Pocket Reference">

<AREA SHAPE="RECT"
COORDS="495,0,570,30"
HREF="../bipkt/index.htm"
ALT="Oracle PL/SQL Built-ins Pocket Reference">
</MAP>

</BODY
>
<!-- Mirrored from liso.cs.pusan.ac.kr by HTTrack Website Copier/3.x [XR&CO'2001] -->
</HTML
>
