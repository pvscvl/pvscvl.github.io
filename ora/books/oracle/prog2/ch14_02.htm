<HTML
><HEAD
><TITLE
>[Chapter 14] 14.2 Conversion Function Descriptions</TITLE
><META
NAME="DC.Creator"
CONTENT="Steven Feuerstein &amp; Bill Pribyl"><META
NAME="DC.Date"
CONTENT="2000-04-29T19:01:56Z"><META
NAME="DC.Format"
CONTENT="text/html"
SCHEME="MIME"><META
NAME="DC.Identifier"
CONTENT="O'Reilly and Associates CD-ROM-1-56592-335-9E"><META
NAME="DC.Language"
CONTENT="en-US"><META
NAME="DC.Publisher"
CONTENT="O'Reilly &amp; Associates, Inc."><META
NAME="DC.Source"
CONTENT="1-56592-335-9E"
SCHEME="ISBN"><META
NAME="DC.Subject.Keyword"
CONTENT="Oracle PL/SQL"><META
NAME="DC.Title"
CONTENT="Oracle PL/SQL Programming, 2nd Edition"><META
NAME="DC.Type"
CONTENT="Text.Monograph"><META
NAME="generator"
CONTENT="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><LINK
REL="stylesheet"
TYPE="text/css"
HREF="../style/style1.css"><LINK
REV="made"
HREF="mailto:online-books@oreilly.com"
TITLE="Online Books Comments"><LINK
REL="up"
HREF="ch14_01.htm"
TITLE="14. Conversion Functions"><LINK
REL="prev"
HREF="ch14_01.htm"
TITLE="14.1 Conversion Formats"><LINK
REL="next"
HREF="ch14_03.htm#SQL2-CH-14-SECT-3.1"
TITLE="14.3 Conversion Function Examples"></HEAD
><BODY
><DIV
CLASS="htmlnav"
><H1
><IMG
SRC="gifs/smbanner.gif"
ALT="Oracle PL/SQL Programming, 2nd Edition"
USEMAP="#srchmap"
BORDER="0"></H1
><MAP
NAME="srchmap"
><AREA
SHAPE="RECT"
COORDS="0,0,466,65"
HREF="index.htm"
ALT="Oracle PL/SQL Programming, 2nd Edition"><AREA
SHAPE="RECT"
COORDS="467,0,514,18"
HREF="jobjects/fsearch.htm"
ALT="Search this book"></MAP
><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch14_01.htm"
TITLE="14.1 Conversion Formats"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 14.1 Conversion Formats"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><SPAN
CLASS="NAVTITLE"
><A
CLASS="chapter"
REL="up"
HREF="ch14_01.htm"
TITLE="14. Conversion Functions"
>Chapter 14<BR>Conversion Functions</A
></SPAN
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch14_03.htm#SQL2-CH-14-SECT-3.1"
TITLE="14.3 Conversion Function Examples"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 14.3 Conversion Function Examples"
BORDER="0"></A
></TD
></TR
></TABLE
>&nbsp;<HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"></DIV
><DIV
CLASS="sect1"
><H2
CLASS="sect1"
><A
CLASS="title"
NAME="SQL2-CH-14-SECT-2"
>14.2 Conversion Function Descriptions</A
></H2
><P
CLASS="para"
>This section describes the various conversion functions provided by PL/SQL. </P
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="SQL2-CH-14-SECT-2.0.1"
>14.2.1 The CHARTOROWID function</A
></H3
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="AUTOID-12508"
></A
><A
CLASS="indexterm"
NAME="AUTOID-12511"
></A
><A
CLASS="indexterm"
NAME="AUTOID-12513"
></A
><A
CLASS="indexterm"
NAME="ch14-idx-137932-4"
></A
>The CHARTOROWID function converts a string of either type CHAR or VARCHAR2 to a value of type ROWID. The specification of the CHARTOROWID function is: </P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>FUNCTION CHARTOROWID (string_in IN CHAR) RETURN ROWID
FUNCTION CHARTOROWID (string_in IN VARCHAR2) RETURN ROWID</PRE
></BLOCKQUOTE
><P
CLASS="para"
>In order for CHARTOROWID to successfully convert the string, it must be of the format: </P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>BBBBBBBB.RRRR.FFFF</PRE
></BLOCKQUOTE
><P
CLASS="para"
>where BBBBBBBB is the number of the block in the database file, RRRR is the number of the row in the block, and FFFF is the number of the database file. All three numbers must be in hexadecimal format. </P
><P
CLASS="para"
>If the input string does not conform to the above format, PL/SQL raises the VALUE_ERROR exception. </P
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="SQL2-CH-14-SECT-2.0.2"
>14.2.2 The CONVERT function</A
></H3
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="AUTOID-12527"
></A
> <A
CLASS="indexterm"
NAME="AUTOID-12529"
></A
><A
CLASS="indexterm"
NAME="AUTOID-12533"
></A
>The CONVERT function converts strings from one character set to another character set. The specification of the CONVERT function is: </P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>FUNCTION CONVERT
   (string_in IN VARCHAR2,
    new_char_set VARCHAR2
    [, old_char_set VARCHAR2])
RETURN VARCHAR2</PRE
></BLOCKQUOTE
><P
CLASS="para"
>The old_char_set is an optional argument. If this third argument is not specified, then the default character set for the database instance is used. </P
><P
CLASS="para"
>The CONVERT function does not translate words or phrases from one language to another! CONVERT simply substitutes the letter or symbol in one character set with the corresponding letter or symbol in another character set. (A character set is not the same thing as a human language.) </P
><P
CLASS="para"
>Two commonly used character sets are US7ASCII (U.S. 7-bit ASCII character set) and F7DEC (DEC French 7-bit character set). </P
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="SQL2-CH-14-SECT-2.0.3"
>14.2.3 The HEXTORAW function</A
></H3
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="AUTOID-12542"
></A
><A
CLASS="indexterm"
NAME="AUTOID-12544"
></A
> <A
CLASS="indexterm"
NAME="AUTOID-12546"
></A
> <A
CLASS="indexterm"
NAME="AUTOID-12549"
></A
> <A
CLASS="indexterm"
NAME="AUTOID-12551"
></A
> The HEXTORAW function converts a hexadecimal string from type CHAR or VARCHAR2 to type RAW. The specification of the HEXTORAW function is: </P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>FUNCTION HEXTORAW (string_in IN CHAR) RETURN RAW
FUNCTION HEXTORAW (string_in IN VARCHAR2) RETURN RAW</PRE
></BLOCKQUOTE
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="SQL2-CH-14-SECT-2.0.4"
>14.2.4 The RAWTOHEX function</A
></H3
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="AUTOID-12559"
></A
>The RAWTOHEX function converts a value from type RAW to a hexadecimal string of type VARCHAR2. The specification of the RAWTOHEX function is: </P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>FUNCTION RAWTOHEX (binary_value_in IN RAW) RETURN VARCHAR2</PRE
></BLOCKQUOTE
><P
CLASS="para"
>RAWTOHEX always returns a variable-length string value, even if its mirror conversion function is overloaded to support both types of input. </P
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="SQL2-CH-14-SECT-2.0.5"
>14.2.5 The ROWIDTOCHAR function</A
></H3
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="AUTOID-12566"
></A
> <A
CLASS="indexterm"
NAME="AUTOID-12568"
></A
><A
CLASS="indexterm"
NAME="AUTOID-12571"
></A
> The ROWIDTOCHAR function converts a binary value of type ROWID to a string of type VARCHAR2. The specification of the ROWIDTOCHAR function is: </P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>FUNCTION ROWIDTOCHAR (row_in IN ROWID ) RETURN VARCHAR2</PRE
></BLOCKQUOTE
><P
CLASS="para"
>The string returned by this function has the format:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>BBBBBBBB.RRRR.FFFF</PRE
></BLOCKQUOTE
><P
CLASS="para"
>where BBBBBBBB is the number of the block in the database file, RRRR is the number of the row in the block, and FFFF is the number of the database file. All three numbers are in hexadecimal format. </P
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="SQL2-CH-14-SECT-2.0.6"
>14.2.6 The TO_CHAR function (date conversion)</A
></H3
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="AUTOID-12579"
></A
> <A
CLASS="indexterm"
NAME="AUTOID-12582"
></A
><A
CLASS="indexterm"
NAME="ch14-idx-137937-3"
></A
>The TO_CHAR function can be used to convert both dates and numbers to a variable-length string. The following specification describes TO_CHAR for dates: </P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>FUNCTION TO_CHAR
   (date_in IN DATE
    [, format_mask IN VARCHAR2
    [, nls_language IN VARCHAR2]])
RETURN VARCHAR2</PRE
></BLOCKQUOTE
><P
CLASS="para"
>where date_in is the date to be converted to character format, the format_mask is the mask made up of one or more of the date format elements, and nls_language is a string specifying a date language. Both the format mask and the NLS language parameters are optional. </P
><P
CLASS="para"
>If the format mask is not specified, then the default date format for the database instance is used. This format is DD-MON-YY, unless the initialization parameter NLS_DATE_FORMAT is included in the initialization file. The format of the specification of an alternative date mask is: </P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>NLS_DATE_FORMAT = 'MM/DD/YYYY'</PRE
></BLOCKQUOTE
><P
CLASS="para"
>If the NLS language parameter is not specified, then the default date language for the instance is used. This is either the language for the instance specified by the NLS_LANGUAGE parameter, or the date language specified in the initialization file with the parameter NLS_DATE_LANGUAGE. Note that if you want to specify a date language, you also must include a format mask. You cannot skip over the intervening parameters. </P
><P
CLASS="para"
>Here are some examples of TO_CHAR for date conversion:</P
><UL
CLASS="itemizedlist"
><LI
CLASS="listitem"
><P
CLASS="para"
>Notice that there are two blanks between month and day and a leading zero for the fifth day: </P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>TO_CHAR (SYSDATE, 'Month DD, YYYY') ==&gt; 'February  05, 1994'</PRE
></BLOCKQUOTE
></LI
><LI
CLASS="listitem"
><P
CLASS="para"
>Use the FM fill mode element to suppress blanks and zeros:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>TO_CHAR (SYSDATE, 'FMMonth DD, YYYY') ==&gt; 'February 5, 1994'</PRE
></BLOCKQUOTE
></LI
><LI
CLASS="listitem"
><P
CLASS="para"
>Note the case difference on the month abbreviations of the next two samples. You get exactly what you ask for with Oracle date formats! </P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>TO_CHAR (SYSDATE, 'MON DDth, YYYY') ==&gt; 'FEB 05th, 1994'
TO_CHAR (SYSDATE, 'fmMon DDth, YYYY') ==&gt; 'Feb 5th, 1994'</PRE
></BLOCKQUOTE
></LI
><LI
CLASS="listitem"
><P
CLASS="para"
>Show the day of year, the month, and the week for the date:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>TO_CHAR (SYSDATE, 'DDD DD D ') ==&gt; '036 05 7'
TO_CHAR (SYSDATE, 'fmDDD DD D ') ==&gt; '36 5 7'</PRE
></BLOCKQUOTE
></LI
><LI
CLASS="listitem"
><P
CLASS="para"
>Some fancy formatting for reporting purposes:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>TO_CHAR (SYSDATE, '&quot;In month &quot;RM&quot; of year &quot;YEAR')
==&gt;
   'In month II   of year NINETEEN NINETY FOUR'</PRE
></BLOCKQUOTE
></LI
></UL
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="SQL2-CH-14-SECT-2.0.7"
>14.2.7 The TO_CHAR function (number conversion)</A
></H3
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="AUTOID-12613"
></A
> <A
CLASS="indexterm"
NAME="AUTOID-12616"
></A
>The TO_CHAR function converts numbers as well as dates. The specification of the TO_CHAR (number) function is: </P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>FUNCTION TO_CHAR
   (number_in IN NUMBER
    [, format_mask IN VARCHAR2
    [, nls_language IN VARCHAR2]])
RETURN VARCHAR2;</PRE
></BLOCKQUOTE
><P
CLASS="para"
>where number_in is the number to be converted to character format, the format_mask is the mask made up of one of more of the number format elements, and nls_language is a string specifying one or more of the NLS parameters which affect the way numbers are displayed. Both the format mask and the NLS language parameters are optional. </P
><P
CLASS="para"
>If the format mask is not specified, then the default number format for the database instance is used. </P
><P
CLASS="para"
>Here are some examples of TO_CHAR for number conversion:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>TO_CHAR (564.70, '$999.9') ==&gt;  $564.7
TO_CHAR (564.70, '$0000999.9') ==&gt; $0000564.7 </PRE
></BLOCKQUOTE
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="SQL2-CH-14-SECT-2.0.8"
>14.2.8 The TO_DATE function</A
></H3
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="AUTOID-12628"
></A
> <A
CLASS="indexterm"
NAME="AUTOID-12630"
></A
> <A
CLASS="indexterm"
NAME="AUTOID-12633"
></A
> <A
CLASS="indexterm"
NAME="AUTOID-12637"
></A
> The TO_DATE function converts a character string to a true DATE datatype. The specification of the TO_DATE function is overloaded for string and number input: </P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>FUNCTION TO_DATE (string_in IN VARCHAR2
    [, format_mask IN VARCHAR2
    [, nls_language IN VARCHAR2 ]]
   )
RETURN DATE;

FUNCTION TO_DATE
   (number_in IN NUMBER
    [, format_mask IN VARCHAR2   [, nls_language IN VARCHAR2 ]])
RETURN DATE;</PRE
></BLOCKQUOTE
><P
CLASS="para"
>The second version of TO_DATE can be used only with the format mask of J for Julian date. The Julian date is the number of days which have passed since January 1, 4712 B.C. Only in this use of TO_DATE can a number be passed as the first parameter of TO_DATE. </P
><P
CLASS="para"
>For all other cases, string_in is the string variable, literal, named constant, or expression to be converted, format_mask is the format mask TO_DATE will use to convert the string, and nls_language is a string which specifies the language which is to be used to interpret the names and abbreviations of both months and days in the string. The format of nls_language is as follows: </P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>'NLS_DATE_LANGUAGE=&lt;language&gt;'</PRE
></BLOCKQUOTE
><P
CLASS="para"
>where &lt;language&gt; is a language recognized by your instance of the database. You can usually determine the acceptable languages by checking your installation guide. </P
><P
CLASS="para"
>Here are some examples of the TO_DATE function:</P
><UL
CLASS="itemizedlist"
><LI
CLASS="listitem"
><P
CLASS="para"
>Convert the string `123188' to a date:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>TO_DATE ('123188', 'MMDDYY') ==&gt; 31-DEC-1988</PRE
></BLOCKQUOTE
></LI
><LI
CLASS="listitem"
><P
CLASS="para"
>Convert a date using the Spanish language:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>TO_DATE ('Abril 12 1991', 'Month DD YYYY', 'NLS_DATE_LANGUAGE=Spanish')
   ==&gt; 12-APR-1991</PRE
></BLOCKQUOTE
></LI
></UL
><P
CLASS="para"
>Any Oracle errors between ORA-01800 and ORA-01899 are related to the internal Oracle date function and can arise when you encounter date conversion errors. You can learn additional nuances of date conversion rules by perusing the different errors and reading about the documented causes of these errors. Some of these rules are: </P
><UL
CLASS="itemizedlist"
><LI
CLASS="listitem"
><P
CLASS="para"
>A date literal passed to TO_CHAR for conversion to a date cannot be longer than 220 characters. </P
></LI
><LI
CLASS="listitem"
><P
CLASS="para"
>You cannot include both a Julian date element (J) and the day of year element (DDD) in a single format mask. </P
></LI
><LI
CLASS="listitem"
><P
CLASS="para"
>You cannot include multiple elements for the same component of the date/time in the mask. For example, the format mask YYYY-YYY-DD-MM is illegal because it includes two year elements, YYYY and YYY. </P
></LI
><LI
CLASS="listitem"
><P
CLASS="para"
>You cannot use the 24-hour time format (HH24) and a meridian element (e.g., AM) in the same mask. </P
></LI
></UL
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="SQL2-CH-14-SECT-2.0.9"
>14.2.9 The TO_NUMBER function</A
></H3
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="AUTOID-12666"
></A
> <A
CLASS="indexterm"
NAME="AUTOID-12668"
></A
> <A
CLASS="indexterm"
NAME="AUTOID-12671"
></A
>The TO_NUMBER function converts both fixed- and variable-length strings to numbers using the associated format mask. The specification of the TO_NUMBER function is as follows: </P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>FUNCTION TO_NUMBER
   (string_in IN CHAR
    [, format_mask VARCHAR2 [, nls_language VARCHAR2 ]])
RETURN NUMBER;

FUNCTION TO_NUMBER
   (string_in IN VARCHAR2
    [, format_mask VARCHAR2 [, nls_language VARCHAR2 ]])
RETURN NUMBER;</PRE
></BLOCKQUOTE
><P
CLASS="para"
>where string_in is the string containing a sequence of characters to be converted to a number, format_mask is the optional string directing TO_NUMBER how to convert the character bytes to a number, and nls_language is a string containing up to three specifications of National Language Support parameters, as follows: </P
><DL
CLASS="variablelist"
><DT
CLASS="term"
>NLS_NUMERIC_CHARACTERS</DT
><DD
CLASS="listitem"
><P
CLASS="para"
>The characters used to specify the decimal point and the group separator in a number. The decimal point character for the American language is a dot (<CODE
CLASS="literal"
>.</CODE
>) while the group separator is a comma (<CODE
CLASS="literal"
>,</CODE
>). </P
></DD
><DT
CLASS="term"
>NLS_CURRENCY</DT
><DD
CLASS="listitem"
><P
CLASS="para"
>The character(s) used to specify the local currency symbol. The currency character for the American language is a dollar sign (<CODE
CLASS="literal"
>$</CODE
>). </P
></DD
><DT
CLASS="term"
>NLS_ISO_CURRENCY</DT
><DD
CLASS="listitem"
><P
CLASS="para"
>The character(s) used to specify the international currency symbol in the string. </P
></DD
></DL
><P
CLASS="para"
>The format for nls_language in the call to TO_NUMBER is as follows:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>'NLS_NUMERIC_CHARACTERS = ''string'''
'NLS_CURRENCY = ''string'''
'NLS_ISO_CURRENCY = ''string'''</PRE
></BLOCKQUOTE
><P
CLASS="para"
>Two contiguous single quotes are needed before and after the values for each string value so that PL/SQL will parse the entire parameter and leave behind a single quote around each value. </P
></DIV
></DIV
><DIV
CLASS="htmlnav"
><P
></P
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch14_01.htm"
TITLE="14.1 Conversion Formats"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 14.1 Conversion Formats"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="book"
HREF="index.htm"
TITLE="Oracle PL/SQL Programming, 2nd Edition"
><IMG
SRC="../gifs/txthome.gif"
ALT="Oracle PL/SQL Programming, 2nd Edition"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch14_03.htm#SQL2-CH-14-SECT-3.1"
TITLE="14.3 Conversion Function Examples"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 14.3 Conversion Function Examples"
BORDER="0"></A
></TD
></TR
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
>14.1 Conversion Formats</TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="index"
HREF="index/idx_0.htm"
TITLE="Book Index"
><IMG
SRC="../gifs/index.gif"
ALT="Book Index"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
>14.3 Conversion Function Examples</TD
></TR
></TABLE
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"></DIV
><IMG SRC="../gifs/smnavbar.gif"
USEMAP="#map"
BORDER="0"
ALT="The Oracle Library Navigation">

<P><font size="-1">
<a href="../copyrght.htm#copy">Copyright (c) 2000</a> O'Reilly &amp; Associates. All rights reserved.
</font></P>

<MAP NAME="map">

<AREA SHAPE="RECT"
COORDS="0,0,35,30"
HREF="../index.htm"
ALT="Library Home">

<AREA SHAPE="RECT"
COORDS="40,0,95,30"
HREF="index.htm"
ALT="Oracle PL/SQL Programming, 2nd. Ed.">

<AREA SHAPE="RECT"
COORDS="100,0,200,30"
HREF="../guide8i/index.htm"
ALT="Guide to Oracle 8i Features">

<AREA SHAPE="RECT"
COORDS="205,0,245,30"
HREF="../bipack/index.htm"
ALT="Oracle Built-in Packages">

<AREA SHAPE="RECT"
COORDS="250,0,320,30"
HREF="../advprog/index.htm"
ALT="Advanced PL/SQL Programming with Packages">

<AREA SHAPE="RECT"
COORDS="325,0,420,30"
HREF="../webapp/index.htm"
ALT="Oracle Web Applications">

<AREA SHAPE="RECT"
COORDS="425,0,490,30"
HREF="../langpkt/index.htm"
ALT="Oracle PL/SQL Language Pocket Reference">

<AREA SHAPE="RECT"
COORDS="495,0,570,30"
HREF="../bipkt/index.htm"
ALT="Oracle PL/SQL Built-ins Pocket Reference">
</MAP>

</BODY
>
<!-- Mirrored from liso.cs.pusan.ac.kr by HTTrack Website Copier/3.x [XR&CO'2001] -->
</HTML
>
