<HTML
><HEAD
><TITLE
>[Chapter 22] Code Design Tips</TITLE
><META
NAME="DC.Creator"
CONTENT="Steven Feuerstein &amp; Bill Pribyl"><META
NAME="DC.Date"
CONTENT="2000-04-29T19:11:46Z"><META
NAME="DC.Format"
CONTENT="text/html"
SCHEME="MIME"><META
NAME="DC.Identifier"
CONTENT="O'Reilly and Associates CD-ROM-1-56592-335-9E"><META
NAME="DC.Language"
CONTENT="en-US"><META
NAME="DC.Publisher"
CONTENT="O'Reilly &amp; Associates, Inc."><META
NAME="DC.Source"
CONTENT="1-56592-335-9E"
SCHEME="ISBN"><META
NAME="DC.Subject.Keyword"
CONTENT="Oracle PL/SQL"><META
NAME="DC.Title"
CONTENT="Oracle PL/SQL Programming, 2nd Edition"><META
NAME="DC.Type"
CONTENT="Text.Monograph"><META
NAME="generator"
CONTENT="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><LINK
REL="stylesheet"
TYPE="text/css"
HREF="../style/style1.css"><LINK
REV="made"
HREF="mailto:online-books@oreilly.com"
TITLE="Online Books Comments"><LINK
REL="up"
HREF="part06.htm"
TITLE="VI. Making PL/SQL Programs Work"><LINK
REL="prev"
HREF="part06.htm"
TITLE="VI. Making PL/SQL Programs Work"><LINK
REL="next"
HREF="ch22_02.htm#SQL2-CH-22-SECT-2.1.1"
TITLE="22.2 Build the Most Functional Functions"></HEAD
><BODY
><DIV
CLASS="htmlnav"
><H1
><IMG
SRC="gifs/smbanner.gif"
ALT="Oracle PL/SQL Programming, 2nd Edition"
USEMAP="#srchmap"
BORDER="0"></H1
><MAP
NAME="srchmap"
><AREA
SHAPE="RECT"
COORDS="0,0,466,65"
HREF="index.htm"
ALT="Oracle PL/SQL Programming, 2nd Edition"><AREA
SHAPE="RECT"
COORDS="467,0,514,18"
HREF="jobjects/fsearch.htm"
ALT="Search this book"></MAP
><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="part"
HREF="part06.htm"
TITLE="VI. Making PL/SQL Programs Work"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: VI. Making PL/SQL Programs Work"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><SPAN
CLASS="NAVTITLE"
>Chapter 22</SPAN
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch22_02.htm#SQL2-CH-22-SECT-2.1.1"
TITLE="22.2 Build the Most Functional Functions"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 22.2 Build the Most Functional Functions"
BORDER="0"></A
></TD
></TR
></TABLE
>&nbsp;<HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"></DIV
><DIV
CLASS="chapter"
><H1
CLASS="chapter"
><A
CLASS="title"
NAME="SQL2-CH-22"
>22. Code Design Tips</A
></H1
><DIV
CLASS="htmltoc"
><P
><B
>Contents:</B
><BR><A
CLASS="sect1"
HREF="#SQL2-CH-22-SECT-1"
TITLE="22.1 Select Meaningful Module and Parameter Names"
>Select Meaningful Module and Parameter Names</A
><BR><A
CLASS="sect1"
HREF="ch22_02.htm#SQL2-CH-22-SECT-2.1.1"
TITLE="22.2 Build the Most Functional Functions"
>Build the Most Functional Functions</A
><BR><A
CLASS="sect1"
HREF="ch22_03.htm"
TITLE="22.3 Take Full Advantage of Local Modularization"
>Take Full Advantage of Local Modularization</A
><BR><A
CLASS="sect1"
HREF="ch22_04.htm"
TITLE="22.4 Be Wary of Modules Without Any Parameters "
>Be Wary of Modules Without Any Parameters </A
><BR><A
CLASS="sect1"
HREF="ch22_05.htm#SQL2-CH-22-SECT-5.4"
TITLE="22.5 Create Independent Modules"
>Create Independent Modules</A
><BR><A
CLASS="sect1"
HREF="ch22_06.htm"
TITLE="22.6 Construct Abstract Data Types (ADTs)"
>Construct Abstract Data Types (ADTs)</A
><BR><A
CLASS="sect1"
HREF="ch22_07.htm#SQL2-CH-22-SECT-7.2"
TITLE="22.7 Tips for Parameter Design"
>Tips for Parameter Design</A
></P
><P
></P
></DIV
><P
CLASS="para"
>Syntax, syntax&nbsp;-- is everything just a matter of syntax? You need literacy, a decent memory, and a good reference manual to master the syntax of a computer language like PL/SQL. But how far does that really get you? If you know the correct sequence of keywords to construct a valid procedure, does that mean that you also know how to design that procedure for maximum readability and minimum maintenance? Of course not. </P
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="ch22-idx-999137-1"
></A
>Conquering PL/SQL's syntax is just the first leg of the journey you must take to develop the skills you need to modularize complex and effective applications. This chapter takes another step towards top quality module construction by offering a series of practical, directed tips. Many of these discussions repeat or summarize advice I've given elsewhere in this book, but I've collected it here for easy reference. </P
><P
CLASS="para"
>These tips cover both how to construct your procedures and functions and how to design your parameters. Once you have written a module and made it available in your development environment, very few people ever look at the code inside the program. Instead, users of your module refer to the module name and parameters, and to the documentation about the module. </P
><P
CLASS="para"
>The module parameters are far and away the most important part of a module's specification. They determine what information goes into the program and what information can be returned by it (as does the RETURN clause for a function). So this chapter includes a number of tips to help ensure that your parameter lists provide the most accurate information in the clearest manner possible. </P
><DIV
CLASS="sect1"
><H2
CLASS="sect1"
><A
CLASS="title"
NAME="SQL2-CH-22-SECT-1"
>22.1 Select Meaningful Module and Parameter Names</A
></H2
><P
CLASS="para"
>A name can make a big difference in the effectiveness of modules and parameters. The tips provided in this section should help you select names and define conventions for names that will improve the readability of your code. </P
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="SQL2-CH-22-SECT-1.1"
>22.1.1 Make Sure the Module Name Explains the Module</A
></H3
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="ch22-idx-908814-1"
></A
> <A
CLASS="indexterm"
NAME="ch22-idx-908814-2"
></A
> When you place code in a module, you hide it from view and give those executable statements a name (the name of the function or procedure). Information hiding is a good thing when it enhances your understanding of a program by letting you focus on a higher level of abstraction. Information hiding is a bad thing when it obscures your understanding of a program. This usually happens when you do not choose an accurate name for your module. </P
><P
CLASS="para"
>The name of your module should describe what it does in such a way that the replacement of code with the module call "self-documents" your program&nbsp;-- that is, the name should describe the action performed by the module. In addition, the grammatical structure of the name you use is important. </P
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="AUTOID-20470"
></A
> <A
CLASS="indexterm"
NAME="AUTOID-20473"
></A
> <A
CLASS="indexterm"
NAME="AUTOID-20476"
></A
>A procedure is an executable statement, a command to the PL/SQL compiler. Consequently, the grammar of a procedure name should be similar to a command: </P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>Verb_Subject</PRE
></BLOCKQUOTE
><P
CLASS="para"
>as in:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>Calculate_P_and_L
Display_Errors
Confirm_New_Entries</PRE
></BLOCKQUOTE
><P
CLASS="para"
>A function is used like an expression in an executable statement. It returns or represents a value, so the grammar of a function name should be a noun: </P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>Description_of_Returned_Value</PRE
></BLOCKQUOTE
><P
CLASS="para"
>as in:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>Net_Profit
Company_Name
Number_of_Jobs
Earliest_Hire_Date</PRE
></BLOCKQUOTE
><P
CLASS="para"
>If I use the wrong grammatical structure for my names, they do not "read" properly. Consider the FOR loop below. </P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>tabrow := 1;
FOR company_cur IN company_rec
LOOP
   profit_and_loss (company_cur.company_id);
   net_profit_table (tabrow) :=
      calculate_net_profit (company_cur.company_id);
   tabrow := tabrow + 1;
END LOOP;</PRE
></BLOCKQUOTE
><P
CLASS="para"
>Try reading this code out loud: "For every company in my cursor, profit-and-loss the company and then add the calculate-net-profit to the table." It doesn't sound right and it doesn't look right. If you simply name the procedure "profit_and_loss," you do not explain what you are doing with the profit and loss. And if you include a verb in the function name, you have one verb too many; the assignment operator itself already serves as the "action" for that statement. </P
><P
CLASS="para"
>I can make a few, minor adjustments in these module names and end up with much more readable code, as shown in this example: </P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>tabrow := 1;
FOR company_cur IN company_rec
LOOP
   calculate_p_and_l (company_cur.company_id);
   net_profit_table (tabrow) := net_profit (company_cur.company_id);
   tabrow := tabrow + 1;
END LOOP;</PRE
></BLOCKQUOTE
><P
CLASS="para"
>The module names say it all: "For each company retrieved from the cursor, calculate the profit and loss and store the net profit for that company in the net profit PL/SQL table." Additional, formal documentation seems unnecessary. Can I say the same thing about the next version of the loop? </P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>tabrow := 1;
FOR company_cur IN company_rec
LOOP
   calcpl (company_cur.company_id);
   net_profit_table (tabrow) := np (company_cur.company_id);
   tabrow := tabrow + 1;
END LOOP;</PRE
></BLOCKQUOTE
><P
CLASS="para"
>The module names in this code are excessively abbreviated. It is unrealistic to expect someone who didn't actually write the calcpl procedure and the np function to understand what those terms are supposed to mean. You should strike a happy medium between the above obscure identifiers and verbose names like these: </P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>calculate_profit_and_loss_per_company
net_profit_for_single_company</PRE
></BLOCKQUOTE
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="AUTOID-20496"
></A
> <A
CLASS="indexterm"
NAME="AUTOID-20497"
></A
> Don't forget that you or someone else will have to type those program names! </P
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="SQL2-CH-22-SECT-1.2"
>22.1.2 Develop Consistent Naming Conventions for Your Formal Parameters </A
></H3
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="AUTOID-20501"
></A
> <A
CLASS="indexterm"
NAME="AUTOID-20504"
></A
> <A
CLASS="indexterm"
NAME="AUTOID-20507"
></A
> A parameter plays a specific role within a program; its name should indicate this difference. I recommend that in order to further distinguish parameters from other PL/SQL identifiers you include the parameter mode right in the name of the formal parameter. </P
><P
CLASS="para"
>A parameter has one of three modes: IN, OUT, or IN OUT. An IN parameter passes a value into the module, but its value cannot be modified. An OUT parameter passes a value out of the module, but its value cannot be referenced in the module. An IN OUT parameter can be both referenced and modified in the module. </P
><P
CLASS="para"
>By incorporating the parameter mode directly into the parameter name, its purpose in the module is self-documenting. Whenever you encounter that parameter in the code, you know that you are looking at a parameter, not a local variable, and you know exactly the ways in which that parameter can be used and/or changed. </P
><P
CLASS="para"
>In order for the parameter mode to stand out in the formal parameter name, you can include it either as a suffix or as a prefix. As a suffix, the mode is appended to the end of the parameter name, as follows: </P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>PROCEDURE combine_and_format_names
   (first_name_inout IN OUT VARCHAR2,
    last_name_inout IN OUT VARCHAR2,
    full_name_out OUT VARCHAR2,
    name_format_in IN VARCHAR2 := 'LAST,FIRST');</PRE
></BLOCKQUOTE
><P
CLASS="para"
>The prefix standard would result in a parameter list for the above procedure as follows: </P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>PROCEDURE combine_and_format_names
   (inout_first_name IN OUT VARCHAR2,
    inout_last_name IN OUT VARCHAR2,
    out_full_name OUT VARCHAR2,
    in_name_format IN VARCHAR2 := 'LAST,FIRST') ;</PRE
></BLOCKQUOTE
><P
CLASS="para"
>You could also opt for a minimum of typing by simply using the first letter of each parameter mode: </P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>PROCEDURE combine_and_format_names
   (io_first_name IN OUT VARCHAR2,
    io_last_name IN OUT VARCHAR2,
    o_full_name OUT VARCHAR2,
    i_name_format IN VARCHAR2 := 'LAST,FIRST') ;</PRE
></BLOCKQUOTE
><P
CLASS="para"
>In any of these cases, a quick glance over the code identifies which objects represent parameters in the program. You can also more easily catch logic errors, such as the following case of an illegal update of an IN parameter: </P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>in_name_format := 'FIRST MIDDLE LAST';</PRE
></BLOCKQUOTE
><P
CLASS="para"
>A parameter with an "in" suffix or prefix should never have its value changed. A parameter with an "out" suffix or prefix should never be used on the right-hand side of an assignment because its value is indeterminate in the program (until it is given a value). </P
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="SQL2-CH-22-SECT-1.3"
>22.1.3 Name Packages and Their Elements to Reflect the Packaged Structure</A
></H3
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="ch22-idx-908818-1"
></A
> <A
CLASS="indexterm"
NAME="ch22-idx-908818-2"
></A
> Given that a package provides a new layer or context over the normal variables and modules, you should take some special care in naming your packages and the elements within them. The name you use for a standalone module, in particular, will change when you move it inside a package. Consider the following example. If I develop a set of standalone procedures and functions to maintain lists of information, I might name them as follows: </P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>PROCEDURE list_create (list_in IN VARCHAR2);
PROCEDURE list_get
   (list_in IN VARCHAR2, position_in IN NUMBER, item_out OUT VARCHAR2);</PRE
></BLOCKQUOTE
><P
CLASS="para"
>and so on. I need to use the "list_" prefix in front of each module name so that the name clearly identifies the structure for the action. </P
><P
CLASS="para"
>Suppose I now move modules like these inside the scope of a package called "list." The specification for the package looks like this: </P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>PACKAGE list
IS
   PROCEDURE list_create (list_in IN VARCHAR2);
   PROCEDURE list_get
      (list_in IN VARCHAR2, position_in IN NUMBER, item_out OUT VARCHAR2);
END list;</PRE
></BLOCKQUOTE
><P
CLASS="para"
>At first glance this looks reasonable enough. The real test, however, comes when you try to use the modules. Let's try it. To create a list using the package procedure, I would execute a statement like this: </P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>list_pkg.list_create ('company_names');</PRE
></BLOCKQUOTE
><P
CLASS="para"
>Now, that looks silly. The "list" is mentioned in both the package name and the module name. It didn't make much sense to carry over the standalone module names to the package names. A much cleaner naming scheme should produce executable statements that remove the redundancies: </P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>PACKAGE list_pkg
IS
   PROCEDURE create (list_in IN VARCHAR2);
   PROCEDURE get
      (list_in IN VARCHAR2, position_in IN NUMBER, item_out OUT VARCHAR2);
END list_pkg;

list.create ('company_names');</PRE
></BLOCKQUOTE
><P
CLASS="para"
>As you define modules in a package, always think of them within the context of the package. If a package is supposed to maintain lists, then the name of the package should reflect that general purpose. The names of the individual modules ought to focus on their particular purpose&nbsp;-- again, within the broader orientation of the package. </P
><P
CLASS="para"
>You might also consider setting as a standard the use of a _pkg suffix for all package names. With this approach, the list package and calls to the package look like this: </P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>PACKAGE list_pkg
IS
   PROCEDURE create (list_in IN VARCHAR2);
   PROCEDURE get
      (list_in IN VARCHAR2, position_in IN NUMBER, item_out OUT VARCHAR2);
END list_pkg;

list_pkg.create ('company_names');</PRE
></BLOCKQUOTE
><P
CLASS="para"
>Personally, I have mixed feelings about this naming convention. It is important and useful to include information about the type of data in the name of the data, and I certainly encourage such a convention with cursors, records, tables, etc. A package, however, is a different sort of animal. It contains all those other language constructs. The way in which the package name is used to qualify the object already tells you what it is. It seems to me that inclusion of the _pkg suffix (or other indicator) reduces the readability of the code. <A
CLASS="indexterm"
NAME="AUTOID-20542"
></A
> <A
CLASS="indexterm"
NAME="AUTOID-20543"
></A
> </P
></DIV
></DIV
></DIV
><DIV
CLASS="htmlnav"
><P
></P
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="part"
HREF="part06.htm"
TITLE="VI. Making PL/SQL Programs Work"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: VI. Making PL/SQL Programs Work"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="book"
HREF="index.htm"
TITLE="Oracle PL/SQL Programming, 2nd Edition"
><IMG
SRC="../gifs/txthome.gif"
ALT="Oracle PL/SQL Programming, 2nd Edition"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch22_02.htm#SQL2-CH-22-SECT-2.1.1"
TITLE="22.2 Build the Most Functional Functions"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 22.2 Build the Most Functional Functions"
BORDER="0"></A
></TD
></TR
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
>VI. Making PL/SQL Programs Work</TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="index"
HREF="index/idx_0.htm"
TITLE="Book Index"
><IMG
SRC="../gifs/index.gif"
ALT="Book Index"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
>22.2 Build the Most Functional Functions</TD
></TR
></TABLE
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"></DIV
><IMG SRC="../gifs/smnavbar.gif"
USEMAP="#map"
BORDER="0"
ALT="The Oracle Library Navigation">

<P><font size="-1">
<a href="../copyrght.htm#copy">Copyright (c) 2000</a> O'Reilly &amp; Associates. All rights reserved.
</font></P>

<MAP NAME="map">

<AREA SHAPE="RECT"
COORDS="0,0,35,30"
HREF="../index.htm"
ALT="Library Home">

<AREA SHAPE="RECT"
COORDS="40,0,95,30"
HREF="index.htm"
ALT="Oracle PL/SQL Programming, 2nd. Ed.">

<AREA SHAPE="RECT"
COORDS="100,0,200,30"
HREF="../guide8i/index.htm"
ALT="Guide to Oracle 8i Features">

<AREA SHAPE="RECT"
COORDS="205,0,245,30"
HREF="../bipack/index.htm"
ALT="Oracle Built-in Packages">

<AREA SHAPE="RECT"
COORDS="250,0,320,30"
HREF="../advprog/index.htm"
ALT="Advanced PL/SQL Programming with Packages">

<AREA SHAPE="RECT"
COORDS="325,0,420,30"
HREF="../webapp/index.htm"
ALT="Oracle Web Applications">

<AREA SHAPE="RECT"
COORDS="425,0,490,30"
HREF="../langpkt/index.htm"
ALT="Oracle PL/SQL Language Pocket Reference">

<AREA SHAPE="RECT"
COORDS="495,0,570,30"
HREF="../bipkt/index.htm"
ALT="Oracle PL/SQL Built-ins Pocket Reference">
</MAP>

</BODY
>
<!-- Mirrored from liso.cs.pusan.ac.kr by HTTrack Website Copier/3.x [XR&CO'2001] -->
</HTML
>
