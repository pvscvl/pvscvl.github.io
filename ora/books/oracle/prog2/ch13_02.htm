<HTML
><HEAD
><TITLE
>[Chapter 13] 13.2 LOB Function Descriptions</TITLE
><META
NAME="DC.Creator"
CONTENT="Steven Feuerstein &amp; Bill Pribyl"><META
NAME="DC.Date"
CONTENT="2000-04-29T19:01:34Z"><META
NAME="DC.Format"
CONTENT="text/html"
SCHEME="MIME"><META
NAME="DC.Identifier"
CONTENT="O'Reilly and Associates CD-ROM-1-56592-335-9E"><META
NAME="DC.Language"
CONTENT="en-US"><META
NAME="DC.Publisher"
CONTENT="O'Reilly &amp; Associates, Inc."><META
NAME="DC.Source"
CONTENT="1-56592-335-9E"
SCHEME="ISBN"><META
NAME="DC.Subject.Keyword"
CONTENT="Oracle PL/SQL"><META
NAME="DC.Title"
CONTENT="Oracle PL/SQL Programming, 2nd Edition"><META
NAME="DC.Type"
CONTENT="Text.Monograph"><META
NAME="generator"
CONTENT="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><LINK
REL="stylesheet"
TYPE="text/css"
HREF="../style/style1.css"><LINK
REV="made"
HREF="mailto:online-books@oreilly.com"
TITLE="Online Books Comments"><LINK
REL="up"
HREF="ch13_01.htm"
TITLE="13. Numeric, LOB, and Miscellaneous Functions"><LINK
REL="prev"
HREF="ch13_01.htm"
TITLE="13.1 Numeric Function Descriptions"><LINK
REL="next"
HREF="ch13_03.htm#SQL2-CH-13-SECT-3.0.3"
TITLE="13.3 Miscellaneous Function Descriptions"></HEAD
><BODY
><DIV
CLASS="htmlnav"
><H1
><IMG
SRC="gifs/smbanner.gif"
ALT="Oracle PL/SQL Programming, 2nd Edition"
USEMAP="#srchmap"
BORDER="0"></H1
><MAP
NAME="srchmap"
><AREA
SHAPE="RECT"
COORDS="0,0,466,65"
HREF="index.htm"
ALT="Oracle PL/SQL Programming, 2nd Edition"><AREA
SHAPE="RECT"
COORDS="467,0,514,18"
HREF="jobjects/fsearch.htm"
ALT="Search this book"></MAP
><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch13_01.htm"
TITLE="13.1 Numeric Function Descriptions"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 13.1 Numeric Function Descriptions"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><SPAN
CLASS="NAVTITLE"
><A
CLASS="chapter"
REL="up"
HREF="ch13_01.htm"
TITLE="13. Numeric, LOB, and Miscellaneous Functions"
>Chapter 13<BR>Numeric, LOB, and Miscellaneous Functions</A
></SPAN
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch13_03.htm#SQL2-CH-13-SECT-3.0.3"
TITLE="13.3 Miscellaneous Function Descriptions"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 13.3 Miscellaneous Function Descriptions"
BORDER="0"></A
></TD
></TR
></TABLE
>&nbsp;<HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"></DIV
><DIV
CLASS="sect1"
><H2
CLASS="sect1"
><A
CLASS="title"
NAME="SQL2-CH-13-SECT-2"
>13.2 LOB Function Descriptions</A
></H2
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="ch13-idx-998639-1"
></A
><A
CLASS="indexterm"
NAME="ch13-idx-998639-2"
></A
><A
CLASS="indexterm"
NAME="ch13-idx-998639-3"
></A
>PL/SQL provides three functions to use within SQL DML statements to initialize a large object (LOB) locator. </P
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="SQL2-CH-13-SECT-2.0.1"
>13.2.1 The BFILENAME function</A
></H3
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="ch13-idx-82867-1"
></A
><A
CLASS="indexterm"
NAME="ch13-idx-82867-2"
></A
><A
CLASS="indexterm"
NAME="ch13-idx-82867-3"
></A
><A
CLASS="indexterm"
NAME="ch13-idx-82867-4"
></A
><A
CLASS="indexterm"
NAME="ch13-idx-82867-5"
></A
>The BFILENAME function initializes a BFILE column in a database table or a BFILE variable in PL/SQL by returning a locator to a physical file in the server's filesystem. The header for BFILENAME is: </P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>FUNCTION BFILENAME
   (directory_alias IN VARCHAR2, filename IN VARCHAR2
RETURN BFILE;</PRE
></BLOCKQUOTE
><P
CLASS="para"
>where directory_alias is a DIRECTORY database object which has already been defined with a CREATE DIRECTORY statement (see the following examples), and filename is the name of the file containing the large binary object. </P
><P
CLASS="para"
>This function will return NULL if you try to get a BFILE locator with a directory alias which does not yet exist. </P
><P
CLASS="para"
>You can use BFILENAME in SQL INSERT and UPDATE statements. You can also use it to initialize a BFILE locator in a PL/SQL program. Here are examples of both usages: </P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>UPDATE school_report
   SET photo_op =
       BFILENAME ('projects', 'grasshoppers.atwork')
 WHERE title = 'REPRODUCTIVE CYCLES OF BUGS';

DECLARE
   pricelist BFILE;
BEGIN
   /* Now this is a BIG file. */
   pricelist := BFILENAME ('OraclePrices', '1997.all');
   </PRE
></BLOCKQUOTE
><P
CLASS="para"
>The BFILENAME function does not validate that the user has READ privileges on the specified file or directory alias. It also does not perform a physical check to see if the directory or file actually exist. Instead, these checks are performed when access against the BFILE object is attempted. </P
><P
CLASS="para"
>There are several issues to keep in mind with directory aliases:</P
><UL
CLASS="itemizedlist"
><LI
CLASS="listitem"
><P
CLASS="para"
>An alias is a database object, an "internal" name for an external, filesystem-based directory location. </P
></LI
><LI
CLASS="listitem"
><P
CLASS="para"
>You must create a directory alias before you can use it.</P
></LI
><LI
CLASS="listitem"
><P
CLASS="para"
>To create a directory alias, you will need the CREATE DIRECTORY or CREATE ANY DIRECTORY privileges. </P
></LI
><LI
CLASS="listitem"
><P
CLASS="para"
>To access a directory alias, you must be the owner or be granted the READ privilege on that alias. </P
></LI
><LI
CLASS="listitem"
><P
CLASS="para"
>Directory aliases <EM
CLASS="emphasis"
>can be</EM
> case-sensitive! </P
></LI
></UL
><P
CLASS="para"
>Let's step through the creation and use of several directory aliases to drive home these points. Suppose I want to let the SCOTT account create directory aliases. I will connect to my DBA account and grant the privilege: </P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>SQL&gt; GRANT CREATE DIRECTORY TO SCOTT;</PRE
></BLOCKQUOTE
><P
CLASS="para"
>Then, connecting as SCOTT, I will create two directory aliases:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>SQL&gt; CREATE DIRECTORY projects AS 'm:\school\projects';
SQL&gt; CREATE DIRECTORY "OraclePrices" AS '/oracle/prices';</PRE
></BLOCKQUOTE
><P
CLASS="para"
>Notice the double quotes around OraclePrices. By taking this approach, I have requested that this directory alias be stored in the database with mixed case. The PROJECTS directory alias, on the other hand, has been defined in the database using the default, uppercase method. </P
><P
CLASS="para"
>I want to let anyone access the OraclePrices directory, but let only ELI access the projects directory: </P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>SQL&gt; GRANT READ ON DIRECTORY projects TO SCOTT;
Grant succeeded.
SQL&gt; GRANT READ ON DIRECTORY OraclePrices TO PUBLIC;
GRANT READ ON DIRECTORY OraclePrices TO PUBLIC;
                        *
ERROR at line 1:
ORA-22930: directory does not exist</PRE
></BLOCKQUOTE
><P
CLASS="para"
>What went wrong? I did not put double quotes around OraclePrices, so Oracle converted the identifier to uppercase and then could not find a match inside the ALL_DIRECTORIES data dictionary view. </P
><P
CLASS="para"
>Once I have defined the directory in mixed case, I need to continue to use the double quotes in my DDL statements for those statements to succeed. Within SQL DML and PL/SQL, the situation is a little bit different. When you call BFILENAME, you pass in a directory alias, either as an identifier or as a literal. In the call to BFILENAME, the case used to set that directory alias must match the case originally used to define the directory alias. </P
><P
CLASS="para"
>The following INSERT statement correctly identifies the OraclePrices alias: </P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>INSERT INTO sw_budget
   (item_desc, price, source_lob)
VALUES
   ('ORACLE8', a_bargain, BFILENAME ('OraclePrices', '1997.rdbms');</PRE
></BLOCKQUOTE
><P
CLASS="para"
>where a_bargain is a PL/SQL variable previously defined and set. </P
><P
CLASS="para"
>The following PL/SQL block incorrectly defines the projects directory alias: </P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>DECLARE
   projects_dir VARCHAR2(30) := 'projects'; -- lower case!
   ants_scurrying BFILE;
BEGIN
   ants_scurrying := BFILENAME (projects_dir, 'ants_building.hill');

   /* FILEOPEN will fail because BFILE locator is NULL. */
   DBMS_LOB.FILEOPEN (ants_scurrying);
BEGIN</PRE
></BLOCKQUOTE
><P
CLASS="para"
>I have passed in a lowercase "projects", but the directory alias has been set to uppercase since I did not surround the directory alias name in double quotes in the CREATE DIRECTORY statement. This behavior differs from much of the rest of PL/SQL's interaction with the data dictionary. Usually, all names passed in for data dictionary access are by default uppercased. You will need to be careful how you define directory aliases and then reference them in your code.<A
CLASS="indexterm"
NAME="AUTOID-11830"
></A
> <A
CLASS="indexterm"
NAME="AUTOID-11831"
></A
> <A
CLASS="indexterm"
NAME="AUTOID-11832"
></A
> <A
CLASS="indexterm"
NAME="AUTOID-11833"
></A
> <A
CLASS="indexterm"
NAME="AUTOID-11834"
></A
> </P
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="SQL2-CH-13-SECT-2.0.2"
>13.2.2 The EMPTY_BLOB function</A
></H3
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="AUTOID-11838"
></A
> <A
CLASS="indexterm"
NAME="AUTOID-11840"
></A
>The EMPTY_BLOB function returns an empty locator of type BLOB (binary large object). The specification for the EMPTY_BLOB function is: </P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>FUNCTION EMPTY_BLOB RETURN BLOB;</PRE
></BLOCKQUOTE
><P
CLASS="para"
>You can call this function without any parentheses or with an empty pair. Here are some examples: </P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>INSERT INTO family_member (name, photo)
   VALUES ('Steven Feuerstein', EMPTY_BLOB());

DECLARE
   my_photo BLOB := EMPTY_BLOB;
BEGIN</PRE
></BLOCKQUOTE
><P
CLASS="para"
>Use EMPTY_BLOB to initialize a BLOB to "empty." Before you can work with a BLOB, either to reference it in SQL DML statements such as INSERTs or to assign it a value in PL/SQL, it must contain a locator. It cannot be NULL. The locator might point to an empty BLOB value, but it <EM
CLASS="emphasis"
>will</EM
> be a valid BLOB locator. </P
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="SQL2-CH-13-SECT-2.0.3"
>13.2.3 The EMPTY_CLOB function</A
></H3
><P
CLASS="para"
>The <A
CLASS="indexterm"
NAME="AUTOID-11851"
></A
> <A
CLASS="indexterm"
NAME="AUTOID-11853"
></A
>EMPTY_CLOB function returns an empty locator of type CLOB. The specification for the EMPTY_CLOB function is: </P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>FUNCTION EMPTY_CLOB RETURN CLOB;</PRE
></BLOCKQUOTE
><P
CLASS="para"
>You can call this function without any parentheses or with an empty pair. Here are some examples: </P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>INSERT INTO diary (entry, text) VALUES (SYSDATE, EMPTY_CLOB());

DECLARE
   the_big_novel CLOB := EMPTY_CLOB;
BEGIN</PRE
></BLOCKQUOTE
><P
CLASS="para"
>Use EMPTY_CLOB to initialize a CLOB to "empty". Before you can work with a CLOB, either to reference it in SQL DML statements such as INSERTs or to assign it a value in PL/SQL, it must contain a locator. It cannot be NULL. The locator might point to an empty CLOB value, but it <EM
CLASS="emphasis"
>will</EM
> be a valid CLOB locator. </P
></DIV
></DIV
><DIV
CLASS="htmlnav"
><P
></P
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch13_01.htm"
TITLE="13.1 Numeric Function Descriptions"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 13.1 Numeric Function Descriptions"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="book"
HREF="index.htm"
TITLE="Oracle PL/SQL Programming, 2nd Edition"
><IMG
SRC="../gifs/txthome.gif"
ALT="Oracle PL/SQL Programming, 2nd Edition"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch13_03.htm#SQL2-CH-13-SECT-3.0.3"
TITLE="13.3 Miscellaneous Function Descriptions"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 13.3 Miscellaneous Function Descriptions"
BORDER="0"></A
></TD
></TR
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
>13.1 Numeric Function Descriptions</TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="index"
HREF="index/idx_0.htm"
TITLE="Book Index"
><IMG
SRC="../gifs/index.gif"
ALT="Book Index"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
>13.3 Miscellaneous Function Descriptions</TD
></TR
></TABLE
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"></DIV
><IMG SRC="../gifs/smnavbar.gif"
USEMAP="#map"
BORDER="0"
ALT="The Oracle Library Navigation">

<P><font size="-1">
<a href="../copyrght.htm#copy">Copyright (c) 2000</a> O'Reilly &amp; Associates. All rights reserved.
</font></P>

<MAP NAME="map">

<AREA SHAPE="RECT"
COORDS="0,0,35,30"
HREF="../index.htm"
ALT="Library Home">

<AREA SHAPE="RECT"
COORDS="40,0,95,30"
HREF="index.htm"
ALT="Oracle PL/SQL Programming, 2nd. Ed.">

<AREA SHAPE="RECT"
COORDS="100,0,200,30"
HREF="../guide8i/index.htm"
ALT="Guide to Oracle 8i Features">

<AREA SHAPE="RECT"
COORDS="205,0,245,30"
HREF="../bipack/index.htm"
ALT="Oracle Built-in Packages">

<AREA SHAPE="RECT"
COORDS="250,0,320,30"
HREF="../advprog/index.htm"
ALT="Advanced PL/SQL Programming with Packages">

<AREA SHAPE="RECT"
COORDS="325,0,420,30"
HREF="../webapp/index.htm"
ALT="Oracle Web Applications">

<AREA SHAPE="RECT"
COORDS="425,0,490,30"
HREF="../langpkt/index.htm"
ALT="Oracle PL/SQL Language Pocket Reference">

<AREA SHAPE="RECT"
COORDS="495,0,570,30"
HREF="../bipkt/index.htm"
ALT="Oracle PL/SQL Built-ins Pocket Reference">
</MAP>

</BODY
>
<!-- Mirrored from liso.cs.pusan.ac.kr by HTTrack Website Copier/3.x [XR&CO'2001] -->
</HTML
>
