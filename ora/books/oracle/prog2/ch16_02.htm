<HTML
><HEAD
><TITLE
>[Chapter 16] 16.2 Overview of Package Structure</TITLE
><META
NAME="DC.Creator"
CONTENT="Steven Feuerstein &amp; Bill Pribyl"><META
NAME="DC.Date"
CONTENT="2000-04-29T19:04:07Z"><META
NAME="DC.Format"
CONTENT="text/html"
SCHEME="MIME"><META
NAME="DC.Identifier"
CONTENT="O'Reilly and Associates CD-ROM-1-56592-335-9E"><META
NAME="DC.Language"
CONTENT="en-US"><META
NAME="DC.Publisher"
CONTENT="O'Reilly &amp; Associates, Inc."><META
NAME="DC.Source"
CONTENT="1-56592-335-9E"
SCHEME="ISBN"><META
NAME="DC.Subject.Keyword"
CONTENT="Oracle PL/SQL"><META
NAME="DC.Title"
CONTENT="Oracle PL/SQL Programming, 2nd Edition"><META
NAME="DC.Type"
CONTENT="Text.Monograph"><META
NAME="generator"
CONTENT="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><LINK
REL="stylesheet"
TYPE="text/css"
HREF="../style/style1.css"><LINK
REV="made"
HREF="mailto:online-books@oreilly.com"
TITLE="Online Books Comments"><LINK
REL="up"
HREF="ch16_01.htm"
TITLE="16. Packages"><LINK
REL="prev"
HREF="ch16_01.htm"
TITLE="16.1 The Benefits of Packages"><LINK
REL="next"
HREF="ch16_03.htm#SQL2-CH-16-SECT-3.1.2"
TITLE="16.3 The Package Specification"></HEAD
><BODY
><DIV
CLASS="htmlnav"
><H1
><IMG
SRC="gifs/smbanner.gif"
ALT="Oracle PL/SQL Programming, 2nd Edition"
USEMAP="#srchmap"
BORDER="0"></H1
><MAP
NAME="srchmap"
><AREA
SHAPE="RECT"
COORDS="0,0,466,65"
HREF="index.htm"
ALT="Oracle PL/SQL Programming, 2nd Edition"><AREA
SHAPE="RECT"
COORDS="467,0,514,18"
HREF="jobjects/fsearch.htm"
ALT="Search this book"></MAP
><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch16_01.htm"
TITLE="16.1 The Benefits of Packages"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 16.1 The Benefits of Packages"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><SPAN
CLASS="NAVTITLE"
><A
CLASS="chapter"
REL="up"
HREF="ch16_01.htm"
TITLE="16. Packages"
>Chapter 16<BR>Packages</A
></SPAN
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch16_03.htm#SQL2-CH-16-SECT-3.1.2"
TITLE="16.3 The Package Specification"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 16.3 The Package Specification"
BORDER="0"></A
></TD
></TR
></TABLE
>&nbsp;<HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"></DIV
><DIV
CLASS="sect1"
><H2
CLASS="sect1"
><A
CLASS="title"
NAME="SQL2-CH-16-SECT-2"
>16.2 Overview of Package Structure</A
></H2
><P
CLASS="para"
>A package provides an extra layer of code and structure over that of an individual module. Many of the concepts needed to understand a package's structure will be familiar to you. In fact, a package is very similar in structure to a PL/SQL module that has local modules defined within it. </P
><P
CLASS="para"
>Whereas a module has a header and a body, a package has a specification and a body. Just as the module's header explains to a developer how to call that module, the package specification describes the different elements of the package that can be called. Beyond that, however, there are key differences between the constructs in the module and in the package. </P
><P
CLASS="para"
>A module's specification and body are connected by the IS keyword; both are required and one cannot be written without the other. The specification determines how you call the module. The body, after the IS keyword, contains the code that is executed when the function is used. These two components of a module are coded together and are completely inseparable. </P
><P
CLASS="para"
>A package also has a specification and a body, but the package's two parts are structured differently, and have a different significance, from those for a single module. With a package, the specification and body are completely distinct objects. You can write and compile the specification independently of the body. When you create and replace stored packages in the database, you perform this action separately for each of the specification and body. </P
><P
CLASS="para"
>This separation of specification and body allows you to employ top-down design techniques in a powerful way. Don't worry about the details of how a procedure or function is going to do its job. Just concentrate on the different modules you need and how they should be connected together. </P
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="SQL2-CH-16-SECT-2.1"
>16.2.1 The Specification</A
></H3
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="AUTOID-14402"
></A
> <A
CLASS="indexterm"
NAME="AUTOID-14405"
></A
> The package specification contains the definition or specification of all elements in the package that may be referenced outside of the package. These are called the public elements of the package (see the section entitled <A
CLASS="xref"
HREF="ch16_02.htm#SQL2-CH-16-SECT-2.4"
>Section 16.2.4, "Public and Private Package Elements"</A
>" for more information). <A
CLASS="xref"
HREF="ch16_02.htm#SQL2-CH-16-SECT-2.4"
>Figure 16.1</A
> shows an example of a package specification containing two module definitions. </P
><H4
CLASS="figure"
><A
CLASS="title"
NAME="SQL2-CH-16-FIG-1"
>Figure 16.1: The specification of sp_timer package</A
></H4
><IMG
CLASS="graphic"
SRC="figs/sql2.1601.gif"
ALT="Figure 16.1"><P
CLASS="para"
>Like the module, the package specification contains all the code that is needed for a developer to understand how to call the objects in the package. A developer should never have to examine the code behind the specification (which is the body) in order to understand how to use and benefit from the package. </P
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="SQL2-CH-16-SECT-2.2"
>16.2.2 The Body</A
></H3
><P
CLASS="para"
>The body of the package contains all the code behind the package specification: the implementation of the modules, cursors, and other objects. <A
CLASS="xref"
HREF="ch16_02.htm#SQL2-CH-16-SECT-2.4"
>Figure 16.2</A
> illustrates the body required to implement the specification of the sp_timer package shown in <A
CLASS="xref"
HREF="ch16_02.htm#SQL2-CH-16-SECT-2.4"
>Figure 16.1</A
>. </P
><H4
CLASS="figure"
><A
CLASS="title"
NAME="SQL2-CH-16-FIG-2"
>Figure 16.2: The body of sp_timer package</A
></H4
><IMG
CLASS="graphic"
SRC="figs/sql2.1602.gif"
ALT="Figure 16.2"><P
CLASS="para"
><A
CLASS="indexterm"
NAME="AUTOID-14423"
></A
>The body may also contain elements that do not appear in the specification. These are called the private elements of the package. A private element cannot be referenced outside of the package, since it does not appear in the specification. </P
><P
CLASS="para"
>The body of the package resembles a standalone module's declaration section. It contains both declarations of variables and the definitions of all package modules. The package body may also contain an execution section, which is called the <EM
CLASS="emphasis"
>initialization section</EM
> because it is only run once, to initialize the package. </P
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="SQL2-CH-16-SECT-2.3"
>16.2.3 Package Syntax</A
></H3
><P
CLASS="para"
>The general syntax for the two parts of a package follows:</P
><UL
CLASS="itemizedlist"
><LI
CLASS="listitem"
><P
CLASS="para"
>The package specification:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>PACKAGE package_name
IS
[ declarations of variables and types ]

[ specifications of cursors ]

[ specifications of modules ]

END [ package_name ];</PRE
></BLOCKQUOTE
><P
CLASS="para"
>You can declare variables and include specifications of both cursors and modules (and only the specifications). You must have at least one declaration or specification statement in the package specification. </P
><P
CLASS="para"
>Notice that the package specification has its own BEGIN-END block syntax. This enables its independent existence and compilation from the package body. </P
></LI
><LI
CLASS="listitem"
><P
CLASS="para"
>The package body:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>PACKAGE BODY package_name
IS
[ declarations of variables and types ]

[ specification and SELECT statement of cursors ]

[ specification and body of modules ]

[ BEGIN
   executable statements ]

[ EXCEPTION
   exception handlers ]

END [ package_name ];</PRE
></BLOCKQUOTE
><P
CLASS="para"
>In the body you can declare other variables, but you do not repeat the declarations in the specification. The body contains the full implementation of cursors and modules. In the case of a cursor, the package body contains both specification and SQL statement for the cursor. In the case of a module the package body contains both the specification and body of the module. </P
></LI
></UL
><P
CLASS="para"
>The BEGIN keyword indicates the presence of an execution or initialization section for the package. This section can also optionally include an exception section. </P
><P
CLASS="para"
>As with a procedure or function, you can add the name of the package, as a label, after the END keyword in both the specification and package. </P
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="SQL2-CH-16-SECT-2.4"
>16.2.4 Public and Private Package Elements</A
></H3
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="AUTOID-14446"
></A
> <A
CLASS="indexterm"
NAME="AUTOID-14449"
></A
> <A
CLASS="indexterm"
NAME="AUTOID-14452"
></A
>A central concept of packages is the privacy level of its elements. One of the most valuable aspects of a package is its ability to actually enforce information hiding. With a package you can not only modularize your secrets behind a procedural interface, you can keep these parts of your application completely private. </P
><P
CLASS="para"
>An element of a package, whether it is a variable or a module, can either be private or public, as defined below: </P
><DL
CLASS="variablelist"
><DT
CLASS="term"
><EM
CLASS="emphasis"
>Public</EM
></DT
><DD
CLASS="listitem"
><P
CLASS="para"
>Defined in the specification. A public element can be referenced from other programs and PL/SQL blocks. </P
></DD
><DT
CLASS="term"
><EM
CLASS="emphasis"
>Private</EM
></DT
><DD
CLASS="listitem"
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="AUTOID-14467"
></A
>Defined only in the body of the package, but does not appear in the specification. A private element cannot be referenced outside of the package. Any other element of the package may, however, reference and use a private element. Private elements in a package must be defined before they can be referenced by other elements of the package. If, in other words, a public procedure calls a private function, that function must be defined above the public procedure in the package body. You can, alternatively, use a forward declaration if you wish to keep your private programs at the bottom of the package body (see <A
CLASS="xref"
HREF="ch15_01.htm"
>Chapter 15, <CITE
CLASS="chapter"
>Procedures and Functions</CITE
></A
>). </P
></DD
></DL
><P
CLASS="para"
>If you find that a formerly private object such as a module or cursor should instead be made public, simply add that object to the package specification and recompile. It will then be visible outside of the package. </P
><P
CLASS="para"
>The distinct difference between public and private elements gives PL/SQL developers unprecedented control over their data structures and programs. <A
CLASS="xref"
HREF="ch16_02.htm#SQL2-CH-16-SECT-2.4"
>Figure 16.3</A
> shows a Booch diagram[<A
CLASS="footnote"
HREF="#AUTOID-14474"
>1</A
>] for the package that displays private and public package elements. </P
><BLOCKQUOTE
CLASS="footnote"
><DIV
CLASS="footnote"
><P
CLASS="para"
><A
CLASS="footnote"
NAME="AUTOID-14474"
>[1]</A
> This diagram is named after Grady Booch, who pioneered many of the ideas of the package, particularly in the context of object-oriented design.</P
></DIV
></BLOCKQUOTE
><H4
CLASS="figure"
><A
CLASS="title"
NAME="SQL2-CH-16-FIG-3"
>Figure 16.3: Booch diagram showing public and private package elements</A
></H4
><IMG
CLASS="graphic"
SRC="figs/sql2.1603.gif"
ALT="Figure 16.3"><P
CLASS="para"
><A
CLASS="indexterm"
NAME="ch16-idx-333138-1"
></A
><A
CLASS="indexterm"
NAME="ch16-idx-333138-2"
></A
>The diagram offers a clear representation of the public/private character of PL/SQL packages. The large rectangle establishes the graphical boundary of the package. A program external to the package may only call a package element if a part of the element extends past the boundary of the package. Thus, all public elements defined in the specification straddle the package boundary. Part of the element is inside the boundary, and part lies outside, accessible to other programs. </P
><P
CLASS="para"
>All the objects (data and modules) that are completely surrounded by the boundary of the package are private objects. These are defined only in the package body and do not appear in the specification. Because they are wholly contained, no external program can reference those elements. </P
><P
CLASS="para"
>Because the border of the public elements exists both outside and inside the package boundary, all elements in the package (private and public) can use those elements. </P
><P
CLASS="para"
>The next section offers a quick tour of a simple package which illustrates these concepts. </P
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="SQL2-CH-16-SECT-2.5"
>16.2.5 How to Reference Package Elements</A
></H3
><P
CLASS="para"
>A package owns its objects, just as a table owns its columns. You use the same dot notation to provide a fully qualified specification for a package's object as you would for a table's column. </P
><P
CLASS="para"
>The following package specification declares a constant, an exception, a cursor, and several modules: </P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>PACKAGE pets_inc
IS
   max_pets_in_facility CONSTANT INTEGER := 120;
   pet_is_sick EXCEPTION;

   CURSOR pet_cur RETURN pet%ROWTYPE;

   FUNCTION next_pet_shots (pet_id_in IN NUMBER) RETURN DATE;
   PROCEDURE set_schedule (pet_id_in IN NUMBER);

END pets_inc;</PRE
></BLOCKQUOTE
><P
CLASS="para"
>To reference any of these objects, I preface the object name with the package name, as follows: </P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>BEGIN
   IF pets_inc.max_pets_in_facility &gt; 100
   THEN
      ...
   END IF;
EXCEPTION
   WHEN pets_inc.pet_is_sick
   THEN
      ...
END;

OPEN pets_inc.pet_cur;

:pet_master.next_appointment
      := pets_inc.next_pet_shots (:pet_master.pet_id);</PRE
></BLOCKQUOTE
><P
CLASS="para"
>If you do not preface the call to next_pet_shots with the package name, pets_inc, PL/SQL is not able to resolve the reference and the compile fails. </P
><P
CLASS="para"
>So, the rule for referencing package elements is simple and clear: <EM
CLASS="emphasis"
>To reference a stored package element, use dot notation.</EM
> The one exception is that inside a package, you do not need to qualify references to other elements of that package. PL/SQL will automatically resolve your reference within the scope of the package. </P
><P
CLASS="para"
>Suppose, for example, that the set_schedule procedure of pets_inc references the max_pets_in_facility constant. Such a reference would be unqualified as shown here: </P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>PROCEDURE set_schedule (pet_id_in IN NUMBER)
IS
   ...
BEGIN
   ...
   IF total_pets &lt; max_pets_in_facility
   THEN
      ...
   END IF;
END;</PRE
></BLOCKQUOTE
><P
CLASS="para"
>Of course, if you want to reference the element of a second package inside the current package, you will need to include the name of that package.<A
CLASS="indexterm"
NAME="AUTOID-14501"
></A
> <A
CLASS="indexterm"
NAME="AUTOID-14502"
></A
> </P
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="SQL2-CH-16-SECT-2.6"
>16.2.6 Quick Tour of a Package</A
></H3
><P
CLASS="para"
>The pet maintenance package defined below is used by veterinarians to keep track of their patients and to determine when a pet needs another visit. Its specification identifies the public elements of the package. The body implements those elements and also creates two private elements. </P
><DIV
CLASS="sect3"
><H4
CLASS="sect3"
><A
CLASS="title"
NAME="SQL2-CH-16-SECT-2.6.1"
>16.2.6.1 The pets_inc package specification</A
></H4
><P
CLASS="para"
>The specification for the pets_inc package establishes the five public elements: </P
><TABLE
CLASS="informaltable"
BORDER="1"
CELLPADDING="3"
><THEAD
CLASS="thead"
><TR
CLASS="row"
VALIGN="TOP"
><TH
CLASS="entry"
ALIGN="LEFT"
ROWSPAN="1"
COLSPAN="1"
> Name </TH
><TH
CLASS="entry"
ALIGN="LEFT"
ROWSPAN="1"
COLSPAN="1"
> Type </TH
><TH
CLASS="entry"
ALIGN="LEFT"
ROWSPAN="1"
COLSPAN="1"
> Description </TH
></TR
></THEAD
><TBODY
CLASS="tbody"
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
> petid_type </TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
> Subtype definition </TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
> Creates a programmer-defined subtype for the pet table primary key. </TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
> petid_nu </TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
> Variable declaration </TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
> Represents the primary key in pet table. </TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
> pet_cur </TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
> Cursor specification </TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
> Retrieves information about specified pet. </TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
> next_pet_shots </TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
> Function specification </TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
> Returns the date for next shots. </TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
> set_schedule </TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
> Procedure specification </TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
> Sets the schedule for the specified pet. </TD
></TR
></TBODY
></TABLE
><P
CLASS="para"
>Here is the pets_inc package specification:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>PACKAGE pets_inc
IS
   SUBTYPE petid_type IS pet.pet_id%TYPE;

   petid_nu petid_type;

   CURSOR pet_cur (pet_name_in IN VARCHAR2) RETURN pet%ROWTYPE;

   FUNCTION next_pet_shots (pet_id_in IN petid_type) RETURN DATE;

   PROCEDURE set_schedule (pet_id_in IN petid_type)

END pets_inc;</PRE
></BLOCKQUOTE
><P
CLASS="para"
>The header for the package specification simply states PACKAGE. You do not explicitly indicate that it is the specification, as in PACKAGE SPECIFICATION. Instead, when you create the body of a package, you indicate explicitly in the first line of the definition that you are defining the body of the pets_inc package. </P
><P
CLASS="para"
>Since all of these elements are in the package, I can reference them in other programs, such as the following procedure: </P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>PROCEDURE show_next_visit (pet_in IN VARCHAR2)
IS
   next_visit DATE;

   /* Declare record to receive row fetched from package cursor. */
   pet_rec pets_inc.pet_cur%ROWTYPE;
BEGIN
   /* Open the package-based cursor. */
   OPEN pets_inc.pet_cur (pet_in);

   /* Fetch from cursor into local record. */
   FETCH pets_inc.pet_cur INTO pet_rec;

   IF pets_inc.pet_cur%FOUND
   THEN
      /* Call packaged function to get next visit date. */
      next_visit := pets_inc.next_pet_shots (pet_rec.pet_id);

      /* Display the information. */
      DBMS_OUTPUT.PUT_LINE
         ('Schedule next visit for ' || pet_in || ' on ' ||
          TO_CHAR (next_visit));
   END IF;

   CLOSE pets_inc.pet_cur;
END;</PRE
></BLOCKQUOTE
></DIV
><DIV
CLASS="sect3"
><H4
CLASS="sect3"
><A
CLASS="title"
NAME="SQL2-CH-16-SECT-2.6.2"
>16.2.6.2 The pets_inc package body</A
></H4
><P
CLASS="para"
>The package body for pets_inc contains elements shown in the following table: </P
><TABLE
CLASS="informaltable"
BORDER="1"
CELLPADDING="3"
><THEAD
CLASS="thead"
><TR
CLASS="row"
VALIGN="TOP"
><TH
CLASS="entry"
ALIGN="LEFT"
ROWSPAN="1"
COLSPAN="1"
> Name </TH
><TH
CLASS="entry"
ALIGN="LEFT"
ROWSPAN="1"
COLSPAN="1"
> Type </TH
><TH
CLASS="entry"
ALIGN="LEFT"
ROWSPAN="1"
COLSPAN="1"
> Description </TH
></TR
></THEAD
><TBODY
CLASS="tbody"
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
> max_date </TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
> Constant declaration </TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
> Private variable. Maximum date llowed. </TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
> pet_cur </TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
> Cursor declaration </TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
> The cursor specification and SQL statement that retrieves information about specified pet. </TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
> pet_status </TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
> Function definition </TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
> Private module. The specification and body for the function that returns the status of teh pet. </TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
> next_pet_shots </TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
> Function definition </TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
> The specification and body for the function that returns date for next shots. </TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
> set_schedule </TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
> Procedure definition </TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
> The specification and body for the procedure that sets the schedule for the specified pet. </TD
></TR
></TBODY
></TABLE
><P
CLASS="para"
>Here is the pets_inc package body:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>PACKAGE BODY pets_inc
IS
   max_date CONSTANT DATE := SYSDATE + 10;

   CURSOR pet_cur (pet_name_in IN VARCHAR2) RETURN pet%ROWTYPE IS
      SELECT * FROM pet;

   FUNCTION pet_status  (pet_id_in IN petid_type) RETURN VARCHAR2
   IS
   BEGIN
      ... code behind the module ...
   END;

   FUNCTION next_pet_shots (pet_id_in IN petid_type) RETURN DATE
   IS
   BEGIN
      ... the code behind the module ...
   END;

   PROCEDURE set_schedule (pet_id_in IN petid_type)
   IS
   BEGIN
      ... the code behind the module ...
   END;

END pets_inc;</PRE
></BLOCKQUOTE
><P
CLASS="para"
>The body for the pet maintenance package contains the SELECT statement for the pet_cur cursor as well as the code required to implement all the modules. </P
><P
CLASS="para"
>This package body contains two private elements: max_date and pet_status. The max_date constant is used inside the package modules to validate dates that are manipulated in the package. The pet_status function is used by other modules to retrieve the status of the pet. </P
><P
CLASS="para"
>Because these elements are private, they can only be referenced by other elements of the package. </P
></DIV
><DIV
CLASS="sect3"
><H4
CLASS="sect3"
><A
CLASS="title"
NAME="SQL2-CH-16-SECT-2.6.3"
>16.2.6.3 Observations about pets_inc</A
></H4
><P
CLASS="para"
>There are several interesting facts to point out about the previous two package components: </P
><UL
CLASS="itemizedlist"
><LI
CLASS="listitem"
><P
CLASS="para"
>The package specification does not contain any executable statements or exception handlers. A specification only specifies, or declares, those objects in the package that are public&nbsp;-- that is, visible outside of the package and callable by other programs. </P
></LI
><LI
CLASS="listitem"
><P
CLASS="para"
>The declaration of the petid_nu variable and the petid_type subtype are not repeated inside the body. The declaration in the specification is enough for the whole package. Any module in the body can reference variables declared in the specification. </P
></LI
><LI
CLASS="listitem"
><P
CLASS="para"
>Both the body and the specification of pets_inc are actually extended declaration sections. The package body can, however, also contain execution and exception sections. These two parts of the package body make up the initialization section of the package, which is explored later in this chapter. </P
></LI
></UL
><P
CLASS="para"
>Now that you've had an introduction to the various parts of the package, let's take a closer look at each package component. </P
></DIV
></DIV
></DIV
><DIV
CLASS="htmlnav"
><P
></P
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch16_01.htm"
TITLE="16.1 The Benefits of Packages"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 16.1 The Benefits of Packages"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="book"
HREF="index.htm"
TITLE="Oracle PL/SQL Programming, 2nd Edition"
><IMG
SRC="../gifs/txthome.gif"
ALT="Oracle PL/SQL Programming, 2nd Edition"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch16_03.htm#SQL2-CH-16-SECT-3.1.2"
TITLE="16.3 The Package Specification"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 16.3 The Package Specification"
BORDER="0"></A
></TD
></TR
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
>16.1 The Benefits of Packages</TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="index"
HREF="index/idx_0.htm"
TITLE="Book Index"
><IMG
SRC="../gifs/index.gif"
ALT="Book Index"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
>16.3 The Package Specification</TD
></TR
></TABLE
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"></DIV
><IMG SRC="../gifs/smnavbar.gif"
USEMAP="#map"
BORDER="0"
ALT="The Oracle Library Navigation">

<P><font size="-1">
<a href="../copyrght.htm#copy">Copyright (c) 2000</a> O'Reilly &amp; Associates. All rights reserved.
</font></P>

<MAP NAME="map">

<AREA SHAPE="RECT"
COORDS="0,0,35,30"
HREF="../index.htm"
ALT="Library Home">

<AREA SHAPE="RECT"
COORDS="40,0,95,30"
HREF="index.htm"
ALT="Oracle PL/SQL Programming, 2nd. Ed.">

<AREA SHAPE="RECT"
COORDS="100,0,200,30"
HREF="../guide8i/index.htm"
ALT="Guide to Oracle 8i Features">

<AREA SHAPE="RECT"
COORDS="205,0,245,30"
HREF="../bipack/index.htm"
ALT="Oracle Built-in Packages">

<AREA SHAPE="RECT"
COORDS="250,0,320,30"
HREF="../advprog/index.htm"
ALT="Advanced PL/SQL Programming with Packages">

<AREA SHAPE="RECT"
COORDS="325,0,420,30"
HREF="../webapp/index.htm"
ALT="Oracle Web Applications">

<AREA SHAPE="RECT"
COORDS="425,0,490,30"
HREF="../langpkt/index.htm"
ALT="Oracle PL/SQL Language Pocket Reference">

<AREA SHAPE="RECT"
COORDS="495,0,570,30"
HREF="../bipkt/index.htm"
ALT="Oracle PL/SQL Built-ins Pocket Reference">
</MAP>

</BODY
>
<!-- Mirrored from liso.cs.pusan.ac.kr by HTTrack Website Copier/3.x [XR&CO'2001] -->
</HTML
>
