<HTML
><HEAD
><TITLE
>[Chapter 4] 4.3 NULLs in PL/SQL</TITLE
><META
NAME="DC.Creator"
CONTENT="Steven Feuerstein &amp; Bill Pribyl"><META
NAME="DC.Date"
CONTENT="2000-04-29T18:54:56Z"><META
NAME="DC.Format"
CONTENT="text/html"
SCHEME="MIME"><META
NAME="DC.Identifier"
CONTENT="O'Reilly and Associates CD-ROM-1-56592-335-9E"><META
NAME="DC.Language"
CONTENT="en-US"><META
NAME="DC.Publisher"
CONTENT="O'Reilly &amp; Associates, Inc."><META
NAME="DC.Source"
CONTENT="1-56592-335-9E"
SCHEME="ISBN"><META
NAME="DC.Subject.Keyword"
CONTENT="Oracle PL/SQL"><META
NAME="DC.Title"
CONTENT="Oracle PL/SQL Programming, 2nd Edition"><META
NAME="DC.Type"
CONTENT="Text.Monograph"><META
NAME="generator"
CONTENT="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><LINK
REL="stylesheet"
TYPE="text/css"
HREF="../style/style1.css"><LINK
REV="made"
HREF="mailto:online-books@oreilly.com"
TITLE="Online Books Comments"><LINK
REL="up"
HREF="ch04_01.htm"
TITLE="4. Variables and Program Data"><LINK
REL="prev"
HREF="ch04_02.htm#SQL2-CH-4-SECT-2.7.7"
TITLE="4.2 Scalar Datatypes "><LINK
REL="next"
HREF="ch04_04.htm#SQL2-CH-4-SECT-4.3"
TITLE="4.4 Variable Declarations"></HEAD
><BODY
><DIV
CLASS="htmlnav"
><H1
><IMG
SRC="gifs/smbanner.gif"
ALT="Oracle PL/SQL Programming, 2nd Edition"
USEMAP="#srchmap"
BORDER="0"></H1
><MAP
NAME="srchmap"
><AREA
SHAPE="RECT"
COORDS="0,0,466,65"
HREF="index.htm"
ALT="Oracle PL/SQL Programming, 2nd Edition"><AREA
SHAPE="RECT"
COORDS="467,0,514,18"
HREF="jobjects/fsearch.htm"
ALT="Search this book"></MAP
><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch04_02.htm#SQL2-CH-4-SECT-2.7.7"
TITLE="4.2 Scalar Datatypes "
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 4.2 Scalar Datatypes "
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><SPAN
CLASS="NAVTITLE"
><A
CLASS="chapter"
REL="up"
HREF="ch04_01.htm"
TITLE="4. Variables and Program Data"
>Chapter 4<BR>Variables and Program Data</A
></SPAN
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch04_04.htm#SQL2-CH-4-SECT-4.3"
TITLE="4.4 Variable Declarations"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 4.4 Variable Declarations"
BORDER="0"></A
></TD
></TR
></TABLE
>&nbsp;<HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"></DIV
><DIV
CLASS="sect1"
><H2
CLASS="sect1"
><A
CLASS="title"
NAME="SQL2-CH-4-SECT-3"
>4.3 NULLs in PL/SQL</A
></H2
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="ch04-idx-26062-1"
></A
><A
CLASS="indexterm"
NAME="ch04-idx-26062-2"
></A
> Wouldn't it be nice if everything was knowable, and known? Hmmm. Maybe not. The question, however, is moot. We don't know the answer to many questions. We are surrounded by the Big Unknown, and because Oracle Corporation prides itself on providing database technology to reflect the real world, it supports the concept of a null value. </P
><P
CLASS="para"
>When a variable, column, or constant has a value of NULL, its value is unknown&nbsp;-- indeterminate. "Unknown" is very different from a blank or a zero or the Boolean value FALSE. "Unknown" means that the variable has no value at all and so cannot be compared directly with other variables. The following three rules hold for null values: </P
><UL
CLASS="itemizedlist"
><LI
CLASS="listitem"
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="AUTOID-3815"
></A
>A null is never equal to anything else. None of the following IF statements can ever evaluate to TRUE: </P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>my_string := ' ';
IF my_string = NULL THEN ...--This will never be true.

max_salary := 0;
IF max_salary = NULL THEN ...--This will never be true.

IF NULL = NULL THEN ...--Even this will never be true.</PRE
></BLOCKQUOTE
></LI
><LI
CLASS="listitem"
><P
CLASS="para"
><EM
CLASS="emphasis"
>A null is never not equal to anything else.</EM
> Remember: with null values, you just never know. None of the following IF statements can ever evaluate to TRUE. </P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>my_string := 'Having Fun';
your_string := NULL;
IF my_string != your_string THEN ..--This will never be true.

max_salary := 1234;
IF max_salary != NULL THEN ...--This will never be true.

IF NULL != NULL THEN ...--This will never be true.</PRE
></BLOCKQUOTE
></LI
><LI
CLASS="listitem"
><P
CLASS="para"
><EM
CLASS="emphasis"
>When you apply a function to a null value, you generally receive a null value as a result</EM
> (there are some exceptions, listed below). A null value cannot be found in a string with the INSTR function. A null string has a null length, not a zero length. A null raised to the 10th power is still null. </P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>my_string := NULL;
IF LENGTH (my_string) = 0 THEN ...--This will not work.

new_value := POWER (NULL, 10);--new_value is set to null value.</PRE
></BLOCKQUOTE
></LI
></UL
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="SQL2-CH-4-SECT-3.1"
>4.3.1 NULL Values in Comparisons</A
></H3
><P
CLASS="para"
>In general, whenever you perform a comparison involving one or more null values, the result of that comparison is also a null value&nbsp;-- which is different from TRUE or FALSE&nbsp;-- so the comparison cannot help but fail. </P
><P
CLASS="para"
>Whenever PL/SQL executes a program, it initializes all locally declared variables to null (you can override this value with your own default value). Always make sure that your variable has been assigned a value before you use it in an operation. </P
><P
CLASS="para"
>You can also use special syntax provided by Oracle to check dependably for null values, and even assign a null value to a variable. PL/SQL provides a special reserved word, NULL, to represent a null value in PL/SQL. So if you want to actually set a variable to the null value, you simply perform the following assignment: </P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>my_string := NULL; </PRE
></BLOCKQUOTE
><P
CLASS="para"
>If you want to incorporate the possibility of null values in comparison operations, you must perform special case checking with the IS NULL and IS NOT NULL operators. The syntax for these two operators is as follows: </P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>&lt;identifier&gt; IS NULL
&lt;identifier&gt; IS NOT NULL</PRE
></BLOCKQUOTE
><P
CLASS="para"
>where &lt;identifier&gt; is the name of a variable, a constant, or a database column. The IS NULL operator returns TRUE when the value of the identifier is the null value; otherwise, it returns FALSE. The IS NOT NULL operator returns TRUE when the value of the identifier is not a null value; otherwise, it returns FALSE. </P
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="SQL2-CH-4-SECT-3.2"
>4.3.2 Checking for NULL Values</A
></H3
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="AUTOID-3839"
></A
> Here are some examples describing how to use operators to check for null values in your program: </P
><UL
CLASS="itemizedlist"
><LI
CLASS="listitem"
><P
CLASS="para"
>In the following example, the validation rule for the hire_date is that it cannot be later than the current date and it must be entered. If the user does not enter a hire_date, then the comparison to SYSDATE will fail because a null is never greater than or equal to (<KBD
CLASS="command"
>&gt;=</KBD
>) anything. The second part of the OR operator, however, explicitly checks for a null hire_date. If either condition is TRUE, then we have a problem. </P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>IF hire_date &gt;= SYSDATE OR hire_date IS NULL
THEN
   DBMS_OUTPUT.PUT_LINE (' Date required and cannot be in  future.');
END IF;</PRE
></BLOCKQUOTE
></LI
><LI
CLASS="listitem"
><P
CLASS="para"
>In the following example, a bonus generator rewards the hard-working support people (not the salespeople). If the employee's commission is over the target compensation plan target, then send a thank you note. If the commission is under target, tell them to work harder, darn it! But if the person has no commission at all (that is, if the commission IS NULL), give them a bonus recognizing that everything they do aids in the sales effort. (You can probably figure out what my job at Oracle Corporation was.) If the commission is a null value, then neither of the first two expressions will evaluate to TRUE: </P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>IF :employee.commission &gt;= comp_plan.target_commission
THEN
   just_send_THANK_YOU_note (:employee_id);
ELSIF :employee.commission &lt; comp_plan.target_commission
THEN
   send_WORK_HARDER_singing_telegram (:employee_id);
ELSIF :employee.commission IS NULL
THEN
   non_sales_BONUS (:employee_id);
END IF;</PRE
></BLOCKQUOTE
></LI
><LI
CLASS="listitem"
><P
CLASS="para"
>PL/SQL treats a string of zero-length as a NULL. A zero-length string is two single quotes without any characters in between. The following two assignments are equivalent: </P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>my_string := NULL;
my_string := '';</PRE
></BLOCKQUOTE
></LI
></UL
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="SQL2-CH-4-SECT-3.3"
>4.3.3 Function Results with NULL Arguments</A
></H3
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="AUTOID-3855"
></A
>While it is generally true that functions which take a NULL argument return the null value, there are several exceptions: </P
><UL
CLASS="itemizedlist"
><LI
CLASS="listitem"
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="AUTOID-3861"
></A
> <A
CLASS="indexterm"
NAME="AUTOID-3863"
></A
> <A
CLASS="indexterm"
NAME="AUTOID-3865"
></A
><A
CLASS="indexterm"
NAME="AUTOID-3867"
></A
>Concatenation. There are two ways to concatenate strings: the CONCAT function (described in <A
CLASS="xref"
HREF="ch11_01.htm"
>Chapter 11</A
>) and the concatenation operator (double vertical bars: <KBD
CLASS="command"
>||</KBD
>). In both cases, concatenation ignores null values, and simply concatenates "around" the null. Consider the following examples: </P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>CONCAT ('junk', NULL) ==&gt; junk

'junk' || NULL || ' ' || NULL || 'mail' ==&gt; junk mail</PRE
></BLOCKQUOTE
><P
CLASS="para"
>Of course, if all the individual strings in a concatenation are NULL, then the result is also NULL. </P
></LI
><LI
CLASS="listitem"
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="AUTOID-3875"
></A
>The NVL function. The NVL function (described in <A
CLASS="xref"
HREF="ch13_01.htm"
>Chapter 13</A
>) exists specifically to translate a null value to a non-null value. It takes two arguments. If the first argument is NULL, then the second argument is returned. In the following example, I return the string `Not Applicable' if the incoming string is NULL: </P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>new_description := NVL (old_description, 'Not Applicable');</PRE
></BLOCKQUOTE
></LI
><LI
CLASS="listitem"
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="AUTOID-3881"
></A
>The REPLACE function. The REPLACE function (described in <A
CLASS="xref"
HREF="ch11_01.htm"
>Chapter 11</A
>) returns a string in which all occurrences of a specified match string are replaced with a replacement string. If the match_string is NULL, then REPLACE does not try to match and replace any characters in the original string. If the replace_string is NULL, then REPLACE removes from the original string any characters found in match_string. </P
></LI
></UL
><P
CLASS="para"
>Although there are some exceptions to the rules for null values, nulls must generally be handled differently from other data. If your data has NULLS, whether from the database or in local variables, you will need to add code to either convert your null values to known values, or use the IS NULL and IS NOT NULL operators for special case null value handling.<A
CLASS="indexterm"
NAME="AUTOID-3885"
></A
> <A
CLASS="indexterm"
NAME="AUTOID-3886"
></A
> <A
CLASS="indexterm"
NAME="AUTOID-3887"
></A
> </P
></DIV
></DIV
><DIV
CLASS="htmlnav"
><P
></P
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch04_02.htm#SQL2-CH-4-SECT-2.7.7"
TITLE="4.2 Scalar Datatypes "
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 4.2 Scalar Datatypes "
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="book"
HREF="index.htm"
TITLE="Oracle PL/SQL Programming, 2nd Edition"
><IMG
SRC="../gifs/txthome.gif"
ALT="Oracle PL/SQL Programming, 2nd Edition"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch04_04.htm#SQL2-CH-4-SECT-4.3"
TITLE="4.4 Variable Declarations"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 4.4 Variable Declarations"
BORDER="0"></A
></TD
></TR
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
>4.2 Scalar Datatypes </TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="index"
HREF="index/idx_0.htm"
TITLE="Book Index"
><IMG
SRC="../gifs/index.gif"
ALT="Book Index"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
>4.4 Variable Declarations</TD
></TR
></TABLE
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"></DIV
><IMG SRC="../gifs/smnavbar.gif"
USEMAP="#map"
BORDER="0"
ALT="The Oracle Library Navigation">

<P><font size="-1">
<a href="../copyrght.htm#copy">Copyright (c) 2000</a> O'Reilly &amp; Associates. All rights reserved.
</font></P>

<MAP NAME="map">

<AREA SHAPE="RECT"
COORDS="0,0,35,30"
HREF="../index.htm"
ALT="Library Home">

<AREA SHAPE="RECT"
COORDS="40,0,95,30"
HREF="index.htm"
ALT="Oracle PL/SQL Programming, 2nd. Ed.">

<AREA SHAPE="RECT"
COORDS="100,0,200,30"
HREF="../guide8i/index.htm"
ALT="Guide to Oracle 8i Features">

<AREA SHAPE="RECT"
COORDS="205,0,245,30"
HREF="../bipack/index.htm"
ALT="Oracle Built-in Packages">

<AREA SHAPE="RECT"
COORDS="250,0,320,30"
HREF="../advprog/index.htm"
ALT="Advanced PL/SQL Programming with Packages">

<AREA SHAPE="RECT"
COORDS="325,0,420,30"
HREF="../webapp/index.htm"
ALT="Oracle Web Applications">

<AREA SHAPE="RECT"
COORDS="425,0,490,30"
HREF="../langpkt/index.htm"
ALT="Oracle PL/SQL Language Pocket Reference">

<AREA SHAPE="RECT"
COORDS="495,0,570,30"
HREF="../bipkt/index.htm"
ALT="Oracle PL/SQL Built-ins Pocket Reference">
</MAP>

</BODY
>
<!-- Mirrored from liso.cs.pusan.ac.kr by HTTrack Website Copier/3.x [XR&CO'2001] -->
</HTML
>
