<HTML
><HEAD
><TITLE
>[Chapter 15] 15.8 Module Overloading</TITLE
><META
NAME="DC.Creator"
CONTENT="Steven Feuerstein &amp; Bill Pribyl"><META
NAME="DC.Date"
CONTENT="2000-04-29T19:03:49Z"><META
NAME="DC.Format"
CONTENT="text/html"
SCHEME="MIME"><META
NAME="DC.Identifier"
CONTENT="O'Reilly and Associates CD-ROM-1-56592-335-9E"><META
NAME="DC.Language"
CONTENT="en-US"><META
NAME="DC.Publisher"
CONTENT="O'Reilly &amp; Associates, Inc."><META
NAME="DC.Source"
CONTENT="1-56592-335-9E"
SCHEME="ISBN"><META
NAME="DC.Subject.Keyword"
CONTENT="Oracle PL/SQL"><META
NAME="DC.Title"
CONTENT="Oracle PL/SQL Programming, 2nd Edition"><META
NAME="DC.Type"
CONTENT="Text.Monograph"><META
NAME="generator"
CONTENT="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><LINK
REL="stylesheet"
TYPE="text/css"
HREF="../style/style1.css"><LINK
REV="made"
HREF="mailto:online-books@oreilly.com"
TITLE="Online Books Comments"><LINK
REL="up"
HREF="ch15_01.htm"
TITLE="15. Procedures and Functions"><LINK
REL="prev"
HREF="ch15_07.htm"
TITLE="15.7 Local Modules"><LINK
REL="next"
HREF="ch15_09.htm"
TITLE="15.9 Forward Declarations"></HEAD
><BODY
><DIV
CLASS="htmlnav"
><H1
><IMG
SRC="gifs/smbanner.gif"
ALT="Oracle PL/SQL Programming, 2nd Edition"
USEMAP="#srchmap"
BORDER="0"></H1
><MAP
NAME="srchmap"
><AREA
SHAPE="RECT"
COORDS="0,0,466,65"
HREF="index.htm"
ALT="Oracle PL/SQL Programming, 2nd Edition"><AREA
SHAPE="RECT"
COORDS="467,0,514,18"
HREF="jobjects/fsearch.htm"
ALT="Search this book"></MAP
><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch15_07.htm"
TITLE="15.7 Local Modules"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 15.7 Local Modules"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><SPAN
CLASS="NAVTITLE"
><A
CLASS="chapter"
REL="up"
HREF="ch15_01.htm"
TITLE="15. Procedures and Functions"
>Chapter 15<BR>Procedures and Functions</A
></SPAN
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch15_09.htm"
TITLE="15.9 Forward Declarations"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 15.9 Forward Declarations"
BORDER="0"></A
></TD
></TR
></TABLE
>&nbsp;<HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"></DIV
><DIV
CLASS="sect1"
><H2
CLASS="sect1"
><A
CLASS="title"
NAME="SQL2-CH-15-SECT-8"
>15.8 Module Overloading</A
></H2
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="ch15-idx-949000-1"
></A
> <A
CLASS="indexterm"
NAME="ch15-idx-949000-2"
></A
>Two or more modules can, under certain conditions, have the same name with different parameter lists. Such modules are said to be overloaded. The code in these overloaded programs can be very similar or can be completely different. Here is an example of two overloaded modules defined in the declaration section of an anonymous block (both are local modules): </P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>DECLARE
   /* First version takes a DATE parameter. */
   FUNCTION value_ok (date_in IN DATE) RETURN BOOLEAN
   IS
   BEGIN
      RETURN date_in &lt;= SYSDATE;
   END;

   /* Second version takes a NUMBER parameter. */
   FUNCTION value_ok (number_in IN NUMBER) RETURN BOOLEAN
   IS
   BEGIN
      RETURN number_in &gt; 0;
   END;
BEGIN</PRE
></BLOCKQUOTE
><P
CLASS="para"
>When the PL/SQL run-time engine encounters the following statement:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>IF value_ok (SYSDATE) THEN ...</PRE
></BLOCKQUOTE
><P
CLASS="para"
>the compile compares the actual parameter against the different parameter lists for the overloaded modules. It then executes the code in the body of the program with the matching header. </P
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="SQL2-CH-15-SECT-8.1"
>15.8.1 Overloading in PL/SQL Built-Ins</A
></H3
><P
CLASS="para"
>PL/SQL itself makes extensive use of overloading, as do various development tools such as Oracle Forms. An example of an overloaded program in PL/SQL is the TO_CHAR function. Module overloading allows developers to use a single function to convert both numbers and dates to character format: </P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>date_string := TO_CHAR (SYSDATE, 'MMDDYY');
number_string := TO_CHAR (10000);</PRE
></BLOCKQUOTE
><P
CLASS="para"
>If overloading was not supported in PL/SQL (TO_CHAR is a function in the STANDARD package), then two different functions would be required to support conversions to character format. They might look and work as follows: </P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>date_string := TO_CHAR_FROM_DATE (SYSDATE, 'MMDDYY');
number_string := TO_CHAR_FROM_NUMBER (10000);</PRE
></BLOCKQUOTE
><P
CLASS="para"
>You probably just always took it for granted that TO_CHAR automatically detects the difference in the argument (date versus number) and "does the right thing." There's nothing wrong with that. We should take an awful lot for granted in our hardware and software. (In fact, I think that our computers and software should function in more intelligent ways than they do today.) Coming back to the matter of overloading, however, PL/SQL actually examines the value you pass to TO_CHAR. Based on the datatype of this value, it executes the appropriate TO_CHAR function. </P
><P
CLASS="para"
>There are, in other words, two different TO_CHAR functions defined in PL/SQL. Module overloading simply makes this fact transparent to developers. Fortunately, this is a feature that is available to developers as well as to the people who brought you PL/SQL. You, too, can overload! </P
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="SQL2-CH-15-SECT-8.2"
>15.8.2 Benefits of Overloading </A
></H3
><P
CLASS="para"
>Overloading can greatly simplify your life and the lives of other developers. This technique consolidates the call interfaces for many similar programs into a single module name. This process transfers the burden of knowledge from the developer to the software. You do not have to try to remember, for instance, the six different names for programs adding values (dates, strings, Booleans, numbers, etc.) to various PL/SQL tables. Instead, you simply tell the compiler that you want to add and pass it the value you want added. PL/SQL and your overloaded programs figure out what you want to do and they do it for you. </P
><P
CLASS="para"
>When you build overloaded modules, you spend more time in design and implementation than you might with separate, standalone modules. This additional up-front time will be repaid handsomely down the line. You and others will find that it is easier and more efficient to use your programs. </P
><P
CLASS="para"
>You will find many examples of how overloading is used in <A
CLASS="xref"
HREF="ch16_01.htm"
>Chapter 16</A
>. </P
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="SQL2-CH-15-SECT-8.3"
>15.8.3 Where to Overload Modules</A
></H3
><P
CLASS="para"
>There are only two places in PL/SQL programs where you can overload modules: </P
><UL
CLASS="itemizedlist"
><LI
CLASS="listitem"
><P
CLASS="para"
>Inside the declaration section of a PL/SQL block</P
></LI
><LI
CLASS="listitem"
><P
CLASS="para"
>Inside a package</P
></LI
></UL
><P
CLASS="para"
>You cannot, in other words, overload the names of standalone programs, nor can you create two completely independent modules with the same name but different parameter lists. For example if you attempt from SQL*Plus to "create or replace" the following two versions of chg_estimate, the second try will fail, as shown below: </P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>CREATE OR REPLACE PROCEDURE chg_estimate (date_in IN DATE) IS
BEGIN
   ...
END chg_estimate;
/

Procedure created.

CREATE OR REPLACE FUNCTION chg_estimate (dollars_in IN NUMBER)
RETURN NUMBER
IS
BEGIN
   ...
END chg_estimate;

ORA-0955: name is already used by an existing object</PRE
></BLOCKQUOTE
><P
CLASS="para"
>Because the name was already used for a procedure, PL/SQL rejected the attempt to replace it with a function. The compiler would not interpret this second "create or replace" as an effort to create a second module of the same name. </P
><P
CLASS="para"
>Modules must be overloaded within a particular context. A PL/SQL block provides a scope: anything declared in its declaration section can only be accessed within the execution and exception sections. A PL/SQL package also provides a context for the overloaded modules. </P
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="SQL2-CH-15-SECT-8.4"
>15.8.4 Restrictions on Overloading</A
></H3
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="AUTOID-14230"
></A
> There are several restrictions on how you can overload programs. When the PL/SQL engine compiles and runs your program, it has to be able to distinguish between the different overloaded versions of a program; after all, it can't run two different modules at the same time. So when you compile your code, PL/SQL will reject any improperly overloaded modules. It cannot distinguish between the modules by their name, because by definition that is the same in all overloaded programs. Instead, PL/SQL uses the parameter lists of these sibling programs to determine which one to execute. As a result, the following restrictions apply to overloaded programs. </P
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="AUTOID-14234"
></A
> <A
CLASS="indexterm"
NAME="AUTOID-14237"
></A
>The datatype family of at least one of the parameters of overloaded programs must differ. INTEGER, REAL, DECIMAL, FLOAT, etc., are NUMBER subtypes. CHAR, VARCHAR2, and LONG are character subtypes. If the parameters differ only by datatype within the supertype or family of datatypes, PL/SQL does not have enough information with which to determine the appropriate program to execute. As a result, the following programs cannot be overloaded: </P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>FUNCTION calculate_net_profit (revenue_in IN POSITIVE)
RETURN NUMBER IS
BEGIN
   ...
END calculate_net_profit;

FUNCTION calculate_net_profit (revenue_in IN BINARY_INTEGER)
RETURN NUMBER IS
BEGIN
   ...
END calculate_net_profit;</PRE
></BLOCKQUOTE
><P
CLASS="para"
>Nor can these programs be successfully overloaded, since CHAR and VARCHAR2 are both character datatypes: </P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>PROCEDURE trim_and_center (string_in IN CHAR) IS
BEGIN
   ...
END;

PROCEDURE trim_and_center (string_in IN VARCHAR2) IS
BEGIN
   ...
END;</PRE
></BLOCKQUOTE
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="AUTOID-14244"
></A
> <A
CLASS="indexterm"
NAME="AUTOID-14248"
></A
> Another way of looking at this rule for users of PL/SQL Release 2.1 is that two programs cannot be overloaded if their formal parameters differ only by their subtypes and if those subtypes are based on the same datatype. This was already illustrated in the last example: POSITIVE is a subtype of BINARY_INTEGER. </P
><P
CLASS="para"
>With PL/SQL Release 2.1 (and beyond) you can now create your own subtypes, and the same rules apply for these subtypes as for the predefined subtypes. If you have declared the following subtypes: </P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>SUBTYPE line_text_type IS LONG;
SUBTYPE atomic_type IS VARCHAR2;
SUBTYPE word_separator_type IS VARCHAR2;</PRE
></BLOCKQUOTE
><P
CLASS="para"
>then the following attempt at overloading will fail:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>PROCEDURE count_occurrences
   (line_in line_text_type, fragment_in atomic_type);
PROCEDURE count_occurrences
   (line_in line_text_type, between_in word_separator_type);</PRE
></BLOCKQUOTE
><P
CLASS="para"
>because atomic_type and word_separator_type are two programmer-defined subtypes that share the same base datatype. </P
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="AUTOID-14257"
></A
> Overloaded programs with parameter lists which differ only by name must be called using named notation. If you don't use the name of the argument, how could the compiler distinguish between calls to the following two overloaded programs? </P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>FUNCTION calculate_net_profit (revenue_in IN NUMBER)
RETURN NUMBER IS
BEGIN
   ...
END calculate_net_profit;

FUNCTION calculate_net_profit (total_revenue_in IN NUMBER)
RETURN NUMBER IS
BEGIN
   ...
END calculate_net_profit;</PRE
></BLOCKQUOTE
><P
CLASS="para"
>The only way to direct PL/SQL to the right version of calculate_net_profit is to explicitly identify the version as shown below: </P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>calculate_net_profit (revenue_in =&gt; 197890);</PRE
></BLOCKQUOTE
><P
CLASS="para"
><EM
CLASS="emphasis"
>The parameter list of overloaded programs must differ by more than parameter mode.</EM
> Even if a parameter in one version is IN and that same parameter is IN OUT in another version, PL/SQL cannot tell the difference at the point in which the program is called. Suppose you overload the trim_and_center procedure as follows: </P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>PROCEDURE trim_and_center (string_in IN VARCHAR2) IS
BEGIN
   ...
END;

PROCEDURE trim_and_center (string_in IN OUT VARCHAR2) IS
BEGIN
   ...
END;</PRE
></BLOCKQUOTE
><P
CLASS="para"
>How, then, could the compiler know which of trim_and_center to execute when it encounters this line of code? </P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>trim_and_center ('ABC');</PRE
></BLOCKQUOTE
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="AUTOID-14269"
></A
> <A
CLASS="indexterm"
NAME="AUTOID-14272"
></A
>Overloaded functions must differ by more than their return type (the datatype specified in the RETURN clause of the function). At the time that the overloaded function is called, the compiler doesn't know what type of data that function will return. The compiler cannot, therefore, determine which version of the function to use if all the parameters are the same. The following attempt at overloading will fail once again with the PLS-00307 error: </P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>FUNCTION calculate_net_profit (revenue_in IN NUMBER)
RETURN NUMBER IS -- How much did we make?
BEGIN
   ...
END calculate_net_profit;

FUNCTION calculate_net_profit (revenue_in IN NUMBER)
RETURN BOOLEAN IS -- Bankrupt or not?
BEGIN
   ...
END calculate_net_profit;</PRE
></BLOCKQUOTE
><P
CLASS="para"
><EM
CLASS="emphasis"
>All of the overloaded programs must be defined within the same PL/SQL scope or block (anonymous block, module, or package)</EM
>. You cannot define one version in one block (scope level) and define another version in a different block. In the following example, I first define a chg_estimate procedure with a date parameter in the develop_analysis module. Then I define a chg_estimate procedure with a numeric parameter in the anonymous block in the body of develop_analysis: </P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>PROCEDURE develop_analysis (quarter_end_in IN DATE, sales_in IN NUMBER)
IS
   PROCEDURE chg_estimate (date_in IN DATE) IS BEGIN ... END;
BEGIN
   DECLARE
      PROCEDURE chg_estimate
         (dollars_in IN NUMBER) IS BEGIN ... END;
   BEGIN
      chg_estimate (quarter_end_in);
      chg_estimate (dollars_in);
   END;
END develop_analysis;</PRE
></BLOCKQUOTE
><P
CLASS="para"
>When I try to compile this code I get the following error:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>Error in line 8/column 3:
PLS-00306: wrong number or type of arguments in call to 'CHG_ESTIMATE'</PRE
></BLOCKQUOTE
><P
CLASS="para"
>Why do I get this error? I call chg_estimate with a date parameter (quarter_end_in) and it is defined in the declaration section of develop_analysis with a date parameter. I will answer this question ("Why do I get this error?") with another question: are these two procedures overloaded? The answer is no! Because they are defined in different PL/SQL blocks, they have a different scope and visibility. The scope of the date chg_estimate is the entire body of develop_analysis. The scope of the numeric chg_estimate is the anonymous block only, and it takes precedence over the date chg_estimate. There is no overloading going on here. </P
></DIV
></DIV
><DIV
CLASS="htmlnav"
><P
></P
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch15_07.htm"
TITLE="15.7 Local Modules"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 15.7 Local Modules"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="book"
HREF="index.htm"
TITLE="Oracle PL/SQL Programming, 2nd Edition"
><IMG
SRC="../gifs/txthome.gif"
ALT="Oracle PL/SQL Programming, 2nd Edition"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch15_09.htm"
TITLE="15.9 Forward Declarations"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 15.9 Forward Declarations"
BORDER="0"></A
></TD
></TR
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
>15.7 Local Modules</TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="index"
HREF="index/idx_0.htm"
TITLE="Book Index"
><IMG
SRC="../gifs/index.gif"
ALT="Book Index"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
>15.9 Forward Declarations</TD
></TR
></TABLE
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"></DIV
><IMG SRC="../gifs/smnavbar.gif"
USEMAP="#map"
BORDER="0"
ALT="The Oracle Library Navigation">

<P><font size="-1">
<a href="../copyrght.htm#copy">Copyright (c) 2000</a> O'Reilly &amp; Associates. All rights reserved.
</font></P>

<MAP NAME="map">

<AREA SHAPE="RECT"
COORDS="0,0,35,30"
HREF="../index.htm"
ALT="Library Home">

<AREA SHAPE="RECT"
COORDS="40,0,95,30"
HREF="index.htm"
ALT="Oracle PL/SQL Programming, 2nd. Ed.">

<AREA SHAPE="RECT"
COORDS="100,0,200,30"
HREF="../guide8i/index.htm"
ALT="Guide to Oracle 8i Features">

<AREA SHAPE="RECT"
COORDS="205,0,245,30"
HREF="../bipack/index.htm"
ALT="Oracle Built-in Packages">

<AREA SHAPE="RECT"
COORDS="250,0,320,30"
HREF="../advprog/index.htm"
ALT="Advanced PL/SQL Programming with Packages">

<AREA SHAPE="RECT"
COORDS="325,0,420,30"
HREF="../webapp/index.htm"
ALT="Oracle Web Applications">

<AREA SHAPE="RECT"
COORDS="425,0,490,30"
HREF="../langpkt/index.htm"
ALT="Oracle PL/SQL Language Pocket Reference">

<AREA SHAPE="RECT"
COORDS="495,0,570,30"
HREF="../bipkt/index.htm"
ALT="Oracle PL/SQL Built-ins Pocket Reference">
</MAP>

</BODY
>
<!-- Mirrored from liso.cs.pusan.ac.kr by HTTrack Website Copier/3.x [XR&CO'2001] -->
</HTML
>
