<HTML
><HEAD
><TITLE
>[Chapter 13] Numeric, LOB, and Miscellaneous Functions</TITLE
><META
NAME="DC.Creator"
CONTENT="Steven Feuerstein &amp; Bill Pribyl"><META
NAME="DC.Date"
CONTENT="2000-04-29T19:01:23Z"><META
NAME="DC.Format"
CONTENT="text/html"
SCHEME="MIME"><META
NAME="DC.Identifier"
CONTENT="O'Reilly and Associates CD-ROM-1-56592-335-9E"><META
NAME="DC.Language"
CONTENT="en-US"><META
NAME="DC.Publisher"
CONTENT="O'Reilly &amp; Associates, Inc."><META
NAME="DC.Source"
CONTENT="1-56592-335-9E"
SCHEME="ISBN"><META
NAME="DC.Subject.Keyword"
CONTENT="Oracle PL/SQL"><META
NAME="DC.Title"
CONTENT="Oracle PL/SQL Programming, 2nd Edition"><META
NAME="DC.Type"
CONTENT="Text.Monograph"><META
NAME="generator"
CONTENT="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><LINK
REL="stylesheet"
TYPE="text/css"
HREF="../style/style1.css"><LINK
REV="made"
HREF="mailto:online-books@oreilly.com"
TITLE="Online Books Comments"><LINK
REL="up"
HREF="part03.htm"
TITLE="III. Built-In Functions "><LINK
REL="prev"
HREF="ch12_02.htm#SQL2-CH-12-SECT-2.1"
TITLE="12.2 Date Function Examples"><LINK
REL="next"
HREF="ch13_02.htm#SQL2-CH-13-SECT-2.0.1"
TITLE="13.2 LOB Function Descriptions"></HEAD
><BODY
><DIV
CLASS="htmlnav"
><H1
><IMG
SRC="gifs/smbanner.gif"
ALT="Oracle PL/SQL Programming, 2nd Edition"
USEMAP="#srchmap"
BORDER="0"></H1
><MAP
NAME="srchmap"
><AREA
SHAPE="RECT"
COORDS="0,0,466,65"
HREF="index.htm"
ALT="Oracle PL/SQL Programming, 2nd Edition"><AREA
SHAPE="RECT"
COORDS="467,0,514,18"
HREF="jobjects/fsearch.htm"
ALT="Search this book"></MAP
><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch12_02.htm#SQL2-CH-12-SECT-2.1"
TITLE="12.2 Date Function Examples"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 12.2 Date Function Examples"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><SPAN
CLASS="NAVTITLE"
>Chapter 13</SPAN
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch13_02.htm#SQL2-CH-13-SECT-2.0.1"
TITLE="13.2 LOB Function Descriptions"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 13.2 LOB Function Descriptions"
BORDER="0"></A
></TD
></TR
></TABLE
>&nbsp;<HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"></DIV
><DIV
CLASS="chapter"
><H1
CLASS="chapter"
><A
CLASS="title"
NAME="SQL2-CH-13"
>13. Numeric, LOB, and Miscellaneous Functions</A
></H1
><DIV
CLASS="htmltoc"
><P
><B
>Contents:</B
><BR><A
CLASS="sect1"
HREF="#SQL2-CH-13-SECT-1"
TITLE="13.1 Numeric Function Descriptions"
>Numeric Function Descriptions</A
><BR><A
CLASS="sect1"
HREF="ch13_02.htm#SQL2-CH-13-SECT-2.0.1"
TITLE="13.2 LOB Function Descriptions"
>LOB Function Descriptions</A
><BR><A
CLASS="sect1"
HREF="ch13_03.htm#SQL2-CH-13-SECT-3.0.3"
TITLE="13.3 Miscellaneous Function Descriptions"
>Miscellaneous Function Descriptions</A
></P
><P
></P
></DIV
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="ch13-idx-122927-1"
></A
><A
CLASS="indexterm"
NAME="ch13-idx-122927-2"
></A
> This chapter describes three sets of PL/SQL functions: the functions that manipulate numbers; the functions used to initialize large object (LOB) values; and a variety of miscellaneous functions which you will find useful. These sets of functions are listed in Tables <A
CLASS="xref"
HREF="ch13_01.htm"
>Table 13.1</A
> through <A
CLASS="xref"
HREF="ch13_01.htm"
>Table 13.3</A
>. </P
><BR><TABLE
CLASS="table"
BORDER="1"
CELLPADDING="3"
><CAPTION
CLASS="table"
><A
CLASS="title"
NAME="SQL2-CH-13-TABLE-2"
>Table 13.1: The Built-in Numeric Functions </A
></CAPTION
><THEAD
CLASS="thead"
><TR
CLASS="row"
VALIGN="TOP"
><TH
CLASS="entry"
ALIGN="LEFT"
ROWSPAN="1"
COLSPAN="1"
> <P
CLASS="para"
>Name</P
> </TH
><TH
CLASS="entry"
ALIGN="LEFT"
ROWSPAN="1"
COLSPAN="1"
> <P
CLASS="para"
>Description</P
> </TH
></TR
></THEAD
><TBODY
CLASS="tbody"
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
> <P
CLASS="para"
>ABS</P
> </TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
> <P
CLASS="para"
>Returns the absolute value of the number.</P
> </TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
> <P
CLASS="para"
>ACOS</P
> </TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
> <P
CLASS="para"
>Returns the inverse cosine.</P
> </TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
> <P
CLASS="para"
>ASIN</P
> </TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
> <P
CLASS="para"
>Returns the inverse sine.</P
> </TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
> <P
CLASS="para"
>ATAN</P
> </TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
> <P
CLASS="para"
>Returns the inverse tangent.</P
> </TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
> <P
CLASS="para"
>ATAN2</P
> </TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
> <P
CLASS="para"
>Returns the result of the tan2 inverse trigonometric function.</P
> </TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
> <P
CLASS="para"
>CEIL</P
> </TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
> <P
CLASS="para"
>Returns the smallest integer greater than or equal to the specified number. </P
> </TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
> <P
CLASS="para"
>COS</P
> </TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
> <P
CLASS="para"
>Returns the cosine.</P
> </TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
> <P
CLASS="para"
>COSH</P
> </TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
> <P
CLASS="para"
>Returns the hyperbolic cosine.</P
> </TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
> <P
CLASS="para"
>EXP (n)</P
> </TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
> <P
CLASS="para"
>Returns e raised to the <EM
CLASS="emphasis"
>n</EM
>th power, where e = 2.71828183... </P
> </TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
> <P
CLASS="para"
>FLOOR</P
> </TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
> <P
CLASS="para"
>Returns the largest integer equal to or less than the specified number. </P
> </TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
> <P
CLASS="para"
>LN (a)</P
> </TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
> <P
CLASS="para"
>Returns the natural logarithm of <EM
CLASS="emphasis"
>a</EM
>.</P
> </TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
> <P
CLASS="para"
>LOG (a, b)</P
> </TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
> <P
CLASS="para"
>Returns the logarithm, base <EM
CLASS="emphasis"
>a</EM
>, of <EM
CLASS="emphasis"
>b</EM
>. </P
> </TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
> <P
CLASS="para"
>MOD (a, b)</P
> </TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
> <P
CLASS="para"
>Returns the remainder of <EM
CLASS="emphasis"
>a</EM
> divided by <EM
CLASS="emphasis"
>b</EM
>. </P
> </TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
> <P
CLASS="para"
>POWER (a, b)</P
> </TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
> <P
CLASS="para"
>Returns <EM
CLASS="emphasis"
>a</EM
> raised to the <EM
CLASS="emphasis"
>b</EM
>th power. </P
> </TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
> <P
CLASS="para"
>ROUND (a, [b])</P
> </TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
> <P
CLASS="para"
>Returns <EM
CLASS="emphasis"
>a</EM
> rounded to <EM
CLASS="emphasis"
>b</EM
> decimal places. </P
> </TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
> <P
CLASS="para"
>SIGN (a)</P
> </TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
> <P
CLASS="para"
>Returns 1 if <EM
CLASS="emphasis"
>a</EM
> is positive, if <EM
CLASS="emphasis"
>a</EM
> is 0, and -1 if <EM
CLASS="emphasis"
>a</EM
> is less than 0. </P
> </TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
> <P
CLASS="para"
>SIN</P
> </TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
> <P
CLASS="para"
>Returns the sine.</P
> </TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
> <P
CLASS="para"
>SINH</P
> </TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
> <P
CLASS="para"
>Returns the hyperbolic sine.</P
> </TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
> <P
CLASS="para"
>SQRT</P
> </TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
> <P
CLASS="para"
>Returns the square root of the number.</P
> </TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
> <P
CLASS="para"
>TAN</P
> </TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
> <P
CLASS="para"
>Returns the tangent.</P
> </TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
> <P
CLASS="para"
>TANH</P
> </TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
> <P
CLASS="para"
>Returns the hyperbolic tangent.</P
> </TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
> <P
CLASS="para"
>TRUNC (a, [b])</P
> </TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
> <P
CLASS="para"
>Returns <EM
CLASS="emphasis"
>a</EM
> truncated to <EM
CLASS="emphasis"
>b</EM
> decimal places. </P
> </TD
></TR
></TBODY
></TABLE
><P
CLASS="para"
>Note that the trigonometric and logarithmic functions are available only in PL/SQL Version 2.0 and subsequent releases. The inverse trigonometric functions are available only in PL/SQL Release 2.3. In these functions, all results are expressed in radians. Oracle Corporation did not implement pi itself, but it can be obtained through the following call: </P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>ACOS (-1) </PRE
></BLOCKQUOTE
><BR><TABLE
CLASS="table"
BORDER="1"
CELLPADDING="3"
><CAPTION
CLASS="table"
><A
CLASS="title"
NAME="SQL2-CH-13-TABLE-4"
>Table 13.2: The Built-in LOB Functions </A
></CAPTION
><THEAD
CLASS="thead"
><TR
CLASS="row"
VALIGN="TOP"
><TH
CLASS="entry"
ALIGN="LEFT"
ROWSPAN="1"
COLSPAN="1"
> <P
CLASS="para"
>Name</P
> </TH
><TH
CLASS="entry"
ALIGN="LEFT"
ROWSPAN="1"
COLSPAN="1"
> <P
CLASS="para"
>Description</P
> </TH
></TR
></THEAD
><TBODY
CLASS="tbody"
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
> <P
CLASS="para"
>BFILENAME</P
> </TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
> <P
CLASS="para"
>Initializes a BFILE column in an INSERT statement by associating it with a file in the server's filesystem. </P
> </TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
> <P
CLASS="para"
>EMPTY_BLOB</P
> </TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
> <P
CLASS="para"
>Returns an empty locator of type BLOB (binary large object).</P
> </TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
> <P
CLASS="para"
>EMPTY_CLOB</P
> </TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
> <P
CLASS="para"
>Returns an empty locator of type CLOB (character large object).</P
> </TD
></TR
></TBODY
></TABLE
><P
CLASS="para"
>Note that the DBMS_LOB built-in package (See <A
CLASS="xref"
HREF="appc_01.htm"
>Appendix C, <CITE
CLASS="appendix"
>Built-In Packages</CITE
></A
>) contains many more functions and procedures for manipulating LOB data. </P
><BR><TABLE
CLASS="table"
BORDER="1"
CELLPADDING="3"
><CAPTION
CLASS="table"
><A
CLASS="title"
NAME="SQL2-CH-13-TABLE-6"
>Table 13.3: The Built-in MiscellaneousFunctions </A
></CAPTION
><THEAD
CLASS="thead"
><TR
CLASS="row"
VALIGN="TOP"
><TH
CLASS="entry"
ALIGN="LEFT"
ROWSPAN="1"
COLSPAN="1"
> <P
CLASS="para"
>Name</P
> </TH
><TH
CLASS="entry"
ALIGN="LEFT"
ROWSPAN="1"
COLSPAN="1"
> <P
CLASS="para"
>Description</P
> </TH
></TR
></THEAD
><TBODY
CLASS="tbody"
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
> <P
CLASS="para"
>DUMP</P
> </TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
> <P
CLASS="para"
>Returns a string containing a "dump" of the specified expression. This dump includes the datatype, length in bytes, and internal representation. </P
> </TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
> <P
CLASS="para"
>GREATEST</P
> </TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
> <P
CLASS="para"
>Returns the greatest of the specified list of values.</P
> </TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
> <P
CLASS="para"
>LEAST</P
> </TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
> <P
CLASS="para"
>Returns the least of the specified list of values.</P
> </TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
> <P
CLASS="para"
>NVL</P
> </TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
> <P
CLASS="para"
>Returns a substitution value if the argument is NULL.</P
> </TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
> <P
CLASS="para"
>SQLCODE</P
> </TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
> <P
CLASS="para"
>Returns the number of the Oracle error for the most recent internal exception. </P
> </TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
> <P
CLASS="para"
>SQLERRM</P
> </TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
> <P
CLASS="para"
>Returns the error message associated with the error number returned by SQLCODE. </P
> </TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
> <P
CLASS="para"
>UID</P
> </TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
> <P
CLASS="para"
>Returns the User ID (a unique integer) of the current Oracle session.</P
> </TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
> <P
CLASS="para"
>USER</P
> </TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
> <P
CLASS="para"
>Returns the name of the current Oracle user.</P
> </TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
> <P
CLASS="para"
>USERENV</P
> </TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
> <P
CLASS="para"
>Returns a string containing information about the current session.</P
> </TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
> <P
CLASS="para"
>VSIZE</P
> </TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
> <P
CLASS="para"
>Returns the number of bytes in the internal representation of the specified value. </P
> </TD
></TR
></TBODY
></TABLE
><DIV
CLASS="sect1"
><H2
CLASS="sect1"
><A
CLASS="title"
NAME="SQL2-CH-13-SECT-1"
>13.1 Numeric Function Descriptions</A
></H2
><P
CLASS="para"
>The following sections briefly describe each of the PL/SQL numeric functions. </P
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="SQL2-CH-13-SECT-1.0.1"
>13.1.1 The ABS function</A
></H3
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="AUTOID-11484"
></A
> <A
CLASS="indexterm"
NAME="AUTOID-11486"
></A
>The ABS function returns the absolute value of the input. The specification for the ABS function is: </P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>FUNCTION ABS (n NUMBER) RETURN NUMBER;</PRE
></BLOCKQUOTE
><P
CLASS="para"
>The ABS function can help simplify your code logic. Here's an example: </P
><P
CLASS="para"
>In one program I reviewed, line items and amounts for a profit and loss statement were footed or balanced. If the variance on the line amount was greater than $100, either positive or negative, that line item was flagged as "in error." The first version of the code that implemented this requirement looked like this (variance_table is a PL/SQL table holding the variance for each line item): </P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>IF variance_table (line_item_nu) BETWEEN 1 AND 100 OR
   variance_table (line_item_nu) BETWEEN -100 AND -1
THEN
   apply_variance (statement_id);
ELSE
   flag_error (statement_id, line_item_nu);
END IF;</PRE
></BLOCKQUOTE
><P
CLASS="para"
>There are two ways to express this logic. First, do not hardcode the maximum allowable variance; put the value in a named constant. Second, use ABS so that you perform the range check only once. With these changes, the above code can be rewritten as follows: </P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>IF ABS (variance_table (line_item_nu))
   BETWEEN min_variance AND max_variance
THEN
   apply_variance (statement_id);
ELSE
   flag_error (statement_id, line_item_nu);
END IF;</PRE
></BLOCKQUOTE
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="SQL2-CH-13-SECT-1.0.2"
>13.1.2 The ACOS function</A
></H3
><P
CLASS="para"
>The ACOS function returns the inverse cosine. The specification for the ACOS function is: </P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>FUNCTION ACOS (n NUMBER) RETURN NUMBER;</PRE
></BLOCKQUOTE
><P
CLASS="para"
>where the number <EM
CLASS="emphasis"
>n</EM
> must be between -1 and 1, and the value returned by ACOS is between 0 and pi. </P
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="SQL2-CH-13-SECT-1.0.3"
>13.1.3 The ASIN function</A
></H3
><P
CLASS="para"
>The ASIN function returns the inverse sine. The specification for the ASIN function is: </P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>FUNCTION ASIN (n NUMBER) RETURN NUMBER;</PRE
></BLOCKQUOTE
><P
CLASS="para"
>where the number <EM
CLASS="emphasis"
>n</EM
> must be between -1 and 1, and the value returned by ASIN is between -pi/2 and pi/2. </P
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="SQL2-CH-13-SECT-1.0.4"
>13.1.4 The ATAN function</A
></H3
><P
CLASS="para"
>The ATAN function returns the inverse tangent. The specification for the ATAN function is: </P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>FUNCTION ATAN (n NUMBER) RETURN NUMBER;</PRE
></BLOCKQUOTE
><P
CLASS="para"
>where the number <EM
CLASS="emphasis"
>n</EM
> must be between -infinity and infinity, and the value returned by ATAN is between -pi/2 and pi/2. </P
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="SQL2-CH-13-SECT-1.0.5"
>13.1.5 The ATAN2 function</A
></H3
><P
CLASS="para"
>The ATAN2 function returns the result of the tan2 inverse trigonometric function. The specification for the ATAN2 function is: </P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>FUNCTION ATAN (n NUMBER, m NUMBER) RETURN NUMBER;</PRE
></BLOCKQUOTE
><P
CLASS="para"
>where the numbers <EM
CLASS="emphasis"
>n</EM
> and <EM
CLASS="emphasis"
>m</EM
> must be between -infinity and infinity, and the value returned by ATAN is between -pi and pi. </P
><P
CLASS="para"
>As a result, the following holds true:</P
><UL
CLASS="itemizedlist"
><LI
CLASS="listitem"
><P
CLASS="para"
>atan2(-0.00001, -1) is approximately -pi.</P
></LI
><LI
CLASS="listitem"
><P
CLASS="para"
>atan2(0,-1) is pi.</P
></LI
></UL
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="SQL2-CH-13-SECT-1.0.6"
>13.1.6 The CEIL function</A
></H3
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="ch13-idx-122929-1"
></A
>The CEIL ("ceiling") function returns the smallest integer greater than or equal to the specified number. The specification for the CEIL function is: </P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>FUNCTION CEIL (n NUMBER) RETURN NUMBER;</PRE
></BLOCKQUOTE
><P
CLASS="para"
>Here are some examples of the effect of CEIL:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>CEIL (6) ==&gt; 6
CEIL (119.1) ==&gt; 120
CEIL (-17.2) ==&gt; -17</PRE
></BLOCKQUOTE
><P
CLASS="para"
>I have found CEIL useful in calculating loop indexes for date ranges. Suppose that I need to calculate the net profit for sales activity in each month between two dates, and to store each value in a PL/SQL table. I don't really care where in the month the endpoints of the date range fall; I simply want to start from that month and loop through each month in between to the last month. </P
><P
CLASS="para"
>I could use a WHILE loop which increments a date variable until it is past the end date. That code would look like this: </P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>PROCEDURE fill_profit_table (start_date_in IN DATE, end_date_in IN DATE)
IS
   /* Need local variables for loop condition and row in table. */
   curr_date DATE;
   month_index BINARY_INTEGER;
BEGIN
   /* Use TRUNC to always compare against first days of month. */
   curr_date := TRUNC (start_date_in, 'MONTH');
   month_index := 1;

   /* Loop until date exceeds  */
   WHILE curr_date &lt;= TRUNC (end_date_in, 'MONTH')
   LOOP
      profit (month_index) := calc_profits (curr_date, 'NET');
      month_index := month_index + 1;
      curr_date := ADD_MONTHS (curr_date, 1);
   END LOOP;
END;</PRE
></BLOCKQUOTE
><P
CLASS="para"
>That works fine, but with CEIL I can produce a much simpler and cleaner implementation, as shown in the following code. I use both CEIL and MONTHS_BETWEEN to compute the number of months over which I need to calculate net profit. This number of months then bexcomes the upper limit of a fixed, numeric FOR loop. For each iteration of that loop, I call the calc_profits function and stuff the return value into the table: </P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>PROCEDURE fill_profit_table (start_date_in IN DATE, end_date_in IN DATE)
IS
   number_of_months INTEGER :=
      CEIL (MONTHS_BETWEEN (end_date_in, start_date_in-1));
BEGIN
   FOR month_index IN 1 .. number_of_months
   LOOP
      profit (month_index) :=
         calc_profits (ADD_MONTHS (start_date_in, month_index - 1), 'NET');
   END LOOP;
END;</PRE
></BLOCKQUOTE
><P
CLASS="para"
>Notice that I subtract a day from the start_date_in in my computation of the number of months. I have to do this because if both the start_date_in and the end_date_in fall on the last days of their months, MONTHS_BETWEEN is one less than I need. In other words, if start_date_in = 28-FEB-97 and end_date is 31-MAR-97, MONTHS_BETWEEN (end_date_in, start_date_in) returns 1. For the purposes of this program, however, I need to generate profits for two months. </P
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="AUTOID-11540"
></A
> For a comparison of CEIL with several other numeric functions, see <A
CLASS="xref"
HREF="ch13_01.htm"
>Section 13.1.23, "Rounding and Truncation with PL/SQL"</A
> later in this chapter. </P
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="SQL2-CH-13-SECT-1.0.7"
>13.1.7 The COS function</A
></H3
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="AUTOID-11545"
></A
>The COS trigonometric function returns the cosine of the specified angle. The specification for the COS function is: </P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>FUNCTION COS (angle NUMBER) RETURN NUMBER;</PRE
></BLOCKQUOTE
><P
CLASS="para"
>where angle must be expressed in radians. A radian is equal to 180/pi or roughly 57.29578. If your angle is specified in degrees, then you should call COS as follows: </P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>my_cosine := COS (angle_in_degrees/57.29578);</PRE
></BLOCKQUOTE
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="SQL2-CH-13-SECT-1.0.8"
>13.1.8 The COSH function</A
></H3
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="AUTOID-11553"
></A
> <A
CLASS="indexterm"
NAME="AUTOID-11555"
></A
> The COSH trigonometric function returns the hyperbolic cosine of the specified number. The specification for the COSH function is: </P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>FUNCTION COSH (n NUMBER) RETURN NUMBER;</PRE
></BLOCKQUOTE
><P
CLASS="para"
>If <EM
CLASS="emphasis"
>n</EM
> is a real number and <EM
CLASS="emphasis"
>i</EM
> = &#8730;-1 (the imaginary square root of -1), then the relationship between COS and COSH can be expressed as follows: </P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>COS (i * n) = COSH (h)</PRE
></BLOCKQUOTE
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="SQL2-CH-13-SECT-1.0.9"
>13.1.9 The EXP function</A
></H3
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="AUTOID-11565"
></A
>The EXP function returns the value <EM
CLASS="emphasis"
>e</EM
> raised to the <EM
CLASS="emphasis"
>n</EM
>th power, where <EM
CLASS="emphasis"
>n</EM
> is the input argument. The specification for the EXP function is: </P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>FUNCTION EXP (n NUMBER) RETURN NUMBER;</PRE
></BLOCKQUOTE
><P
CLASS="para"
>The number <EM
CLASS="emphasis"
>e</EM
> (approximately equal to 2.71828) is the base of the system of natural logarithms. </P
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="SQL2-CH-13-SECT-1.0.10"
>13.1.10 The FLOOR function</A
></H3
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="AUTOID-11576"
></A
>The FLOOR function, the opposite of the CEIL function, returns the largest integer that is less than or equal to the input number. The specification for the FLOOR function is: </P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>FUNCTION FLOOR (n NUMBER) RETURN NUMBER;</PRE
></BLOCKQUOTE
><P
CLASS="para"
>Here are some examples of the values returned by FLOOR:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>FLOOR (6.2) ==&gt; 6
FLOOR (-89.4) ==&gt; -90</PRE
></BLOCKQUOTE
><P
CLASS="para"
>For a comparison of FLOOR with several other numeric functions, see <A
CLASS="xref"
HREF="ch13_01.htm"
>Section 13.1.23</A
> later in this chapter. </P
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="SQL2-CH-13-SECT-1.0.11"
>13.1.11 The LN function</A
></H3
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="AUTOID-11586"
></A
> <A
CLASS="indexterm"
NAME="AUTOID-11588"
></A
> The LN function returns the natural logarithm of the input. The specification for the LN function is: </P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>FUNCTION LN (n NUMBER) RETURN NUMBER;</PRE
></BLOCKQUOTE
><P
CLASS="para"
>The argument <EM
CLASS="emphasis"
>n</EM
> must be greater than or equal to 0. If you pass LN a negative argument, you will receive the following error: </P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>ORA-01428: argument '-1' is out of range</PRE
></BLOCKQUOTE
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="SQL2-CH-13-SECT-1.0.12"
>13.1.12 The LOG function</A
></H3
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="AUTOID-11597"
></A
>The LOG function returns the base<EM
CLASS="emphasis"
>-b</EM
> logarithm of the input value. The specification for the LOG function is: </P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>FUNCTION LOG (b NUMBER, n NUMBER) RETURN NUMBER;</PRE
></BLOCKQUOTE
><P
CLASS="para"
>The argument <EM
CLASS="emphasis"
>n</EM
> must be greater than or equal to 0. The base <EM
CLASS="emphasis"
>b</EM
> must be greater than 1. If you pass LOG an argument that violates either of these rules, you will receive the following error: </P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>ORA-01428: argument '-1' is out of range</PRE
></BLOCKQUOTE
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="SQL2-CH-13-SECT-1.0.13"
>13.1.13 The MOD function</A
></H3
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="AUTOID-11608"
></A
> <A
CLASS="indexterm"
NAME="AUTOID-11610"
></A
>The MOD function returns the remainder of one number when divided by a second number. The specification for the MOD function is: </P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>FUNCTION MOD (dividend NUMBER, divisor NUMBER) RETURN NUMBER;</PRE
></BLOCKQUOTE
><P
CLASS="para"
>If the divisor is zero, then the dividend is returned unchanged. Here are some examples of MOD: </P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>MOD (10, 5) ==&gt; 0
MOD (2, 1) ==&gt; 0
MOD (3,2) == 1</PRE
></BLOCKQUOTE
><P
CLASS="para"
>You can use MOD to determine quickly if a number is odd or even:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>FUNCTION is_odd (num_in IN NUMBER) RETURN BOOLEAN
IS
BEGIN
   RETURN MOD (num_in, 2) = 1;
END;

FUNCTION is_even (num_in IN NUMBER) RETURN BOOLEAN
IS
BEGIN
   RETURN MOD (num_in, 2) = 0;
END;</PRE
></BLOCKQUOTE
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="SQL2-CH-13-SECT-1.0.14"
>13.1.14 The POWER function</A
></H3
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="AUTOID-11620"
></A
> <A
CLASS="indexterm"
NAME="AUTOID-11622"
></A
>The POWER function raises the first argument to the power indicated by the second argument. The specification for the POWER function is: </P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>FUNCTION POWER (base NUMBER, power NUMBER) RETURN NUMBER;</PRE
></BLOCKQUOTE
><P
CLASS="para"
>If base is negative, then power must be an integer. The following expression calculates the range of valid values for a BINARY_INTEGER variable (-2<SUP
CLASS="superscript"
>31</SUP
>-1 through 2<SUP
CLASS="superscript"
>31</SUP
>-1): </P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>POWER (-2, 31) - 1 .. POWER (2, 31) - 1</PRE
></BLOCKQUOTE
><P
CLASS="para"
>or:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>-2147483637 .. 2147483637 </PRE
></BLOCKQUOTE
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="SQL2-CH-13-SECT-1.0.15"
>13.1.15 The ROUND function</A
></H3
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="AUTOID-11634"
></A
>The ROUND function returns the first argument rounded to the number of decimal places specified in the second argument. The specification for the ROUND function is: </P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>FUNCTION ROUND (n NUMBER, [decimal_places NUMBER]) RETURN NUMBER;</PRE
></BLOCKQUOTE
><P
CLASS="para"
>The decimal_places argument is optional and defaults to 0, which means that <EM
CLASS="emphasis"
>n</EM
> will be rounded to zero decimal places, a whole number. The value of decimal_places can be less than zero. A negative value for this argument directs ROUND to round digits to the left of the decimal point, rather than to the right. Here are some examples: </P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>ROUND (153.46) ==&gt; 153
ROUND (153.46, 1) ==&gt; 153.5
ROUND (153, -1) ==&gt; 150</PRE
></BLOCKQUOTE
><P
CLASS="para"
>For a comparison of ROUND with several other numeric functions, see <A
CLASS="xref"
HREF="ch13_01.htm"
>Section 13.1.23</A
> later in this chapter. </P
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="SQL2-CH-13-SECT-1.0.16"
>13.1.16 The SIGN function</A
></H3
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="AUTOID-11645"
></A
>The SIGN function returns the sign of the input number. The specification for the SIGN function is: </P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>FUNCTION SIGN (n NUMBER) RETURN NUMBER;</PRE
></BLOCKQUOTE
><P
CLASS="para"
>This function returns one of the three values shown below:</P
><DL
CLASS="variablelist"
><DT
CLASS="term"
>-1</DT
><DD
CLASS="listitem"
><P
CLASS="para"
><EM
CLASS="emphasis"
>n</EM
> is less than zero</P
></DD
><DT
CLASS="term"
>0</DT
><DD
CLASS="listitem"
><P
CLASS="para"
><EM
CLASS="emphasis"
>n</EM
> is equal to zero</P
></DD
><DT
CLASS="term"
>+1</DT
><DD
CLASS="listitem"
><P
CLASS="para"
><EM
CLASS="emphasis"
>n</EM
> is greater than zero</P
></DD
></DL
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="SQL2-CH-13-SECT-1.0.17"
>13.1.17 The SIN function</A
></H3
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="AUTOID-11668"
></A
> <A
CLASS="indexterm"
NAME="AUTOID-11670"
></A
>The SIN trigonometric function returns the sine of the specified angle. The specification for the SIN function is: </P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>FUNCTION SIN (angle NUMBER) RETURN NUMBER;</PRE
></BLOCKQUOTE
><P
CLASS="para"
>where angle must be expressed in radians. A radian is equal to 180/pi or roughly 57.29578. If your angle is specified in degrees, then you should call SIN as follows: </P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>my_sine := SIN (angle_in_degrees/57.29578);</PRE
></BLOCKQUOTE
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="SQL2-CH-13-SECT-1.0.18"
>13.1.18 The SINH function</A
></H3
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="AUTOID-11679"
></A
> <A
CLASS="indexterm"
NAME="AUTOID-11681"
></A
> The SINH trigonometric function returns the hyperbolic sine of the specified number. The specification for the SINH function is: </P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>FUNCTION SINH (n NUMBER) RETURN NUMBER;</PRE
></BLOCKQUOTE
><P
CLASS="para"
>If <EM
CLASS="emphasis"
>n</EM
> is a real number and <EM
CLASS="emphasis"
>i</EM
> = &#8730;-1 (the imaginary square root of -1), then the relationship between SIN and SINH can be expressed as follows: </P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>SIN (i * n) = i * SINH (h)</PRE
></BLOCKQUOTE
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="SQL2-CH-13-SECT-1.0.19"
>13.1.19 The SQRT function</A
></H3
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="AUTOID-11691"
></A
>The SQRT function returns the square root of the input number. The specification for the SQRT function is: </P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>FUNCTION SQRT (n NUMBER) RETURN NUMBER;</PRE
></BLOCKQUOTE
><P
CLASS="para"
>where <EM
CLASS="emphasis"
>n</EM
> must be greater than or equal to 0. If <EM
CLASS="emphasis"
>n</EM
> is negative, you will receive the following error: </P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>ORA-01428: argument '-1' is out of range</PRE
></BLOCKQUOTE
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="SQL2-CH-13-SECT-1.0.20"
>13.1.20 The TAN function</A
></H3
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="AUTOID-11701"
></A
>The TAN trigonometric function returns the tangent of the specified angle. The specification for the TAN function is: </P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>FUNCTION TAN (angle NUMBER) RETURN NUMBER;</PRE
></BLOCKQUOTE
><P
CLASS="para"
>where angle must be expressed in radians. A radian is equal to 180/pi or roughly 57.29578. If your angle is specified in degrees, then you should call TAN as follows: </P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>my_tane := TAN (angle_in_degrees/57.29578);</PRE
></BLOCKQUOTE
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="SQL2-CH-13-SECT-1.0.21"
>13.1.21 The TANH function</A
></H3
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="AUTOID-11709"
></A
> <A
CLASS="indexterm"
NAME="AUTOID-11711"
></A
> The TANH trigonometric function returns the hyperbolic tangent of the specified number. The specification for the TANH function is: </P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>FUNCTION TANH (n NUMBER) RETURN NUMBER;</PRE
></BLOCKQUOTE
><P
CLASS="para"
>If n is a real number and i = &#8730;-1 (the imaginary square root of -1), then the relationship between TAN and TANH can be expressed as follows: </P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>TAN (i * n) = i * TANH (h)</PRE
></BLOCKQUOTE
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="SQL2-CH-13-SECT-1.0.22"
>13.1.22 The TRUNC function</A
></H3
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="AUTOID-11719"
></A
> <A
CLASS="indexterm"
NAME="AUTOID-11721"
></A
>The TRUNC function truncates the first argument to the number of decimal places specified by the second argument. The specification for the TRUNC function is: </P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>FUNCTION TRUNC (n NUMBER, [decimal_places NUMBER]) RETURN NUMBER;</PRE
></BLOCKQUOTE
><P
CLASS="para"
>The decimal_places argument is optional and defaults to 0, which means that n will be truncated to zero decimal places, a whole number. The value of decimal_places can be less than zero. A negative value for this argument directs TRUNC to truncate or zero-out digits to the left of the decimal point, rather than to the right. Here are some examples: </P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>TRUNC (153.46) ==&gt; 153
TRUNC (153.46, 1) ==&gt; 153.4
TRUNC (-2003.16, -1) ==&gt; -2000</PRE
></BLOCKQUOTE
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="SQL2-CH-13-SECT-1.0.23"
>13.1.23 Rounding and Truncation with PL/SQL</A
></H3
><P
CLASS="para"
>There are four different numeric functions that perform rounding and truncation actions: CEIL, FLOOR, ROUND, and TRUNC. It is easy to get confused about which of the functions to use in a particular situation. The following table compares functions. <A
CLASS="xref"
HREF="ch13_01.htm"
>Figure 13.1</A
> illustrates the use of the functions for different values and decimal place rounding. </P
><TABLE
CLASS="informaltable"
BORDER="1"
CELLPADDING="3"
><THEAD
CLASS="thead"
><TR
CLASS="row"
VALIGN="TOP"
><TH
CLASS="entry"
ALIGN="LEFT"
ROWSPAN="1"
COLSPAN="1"
> <P
CLASS="para"
>Function</P
> </TH
><TH
CLASS="entry"
ALIGN="LEFT"
ROWSPAN="1"
COLSPAN="1"
> <P
CLASS="para"
>Summary</P
> </TH
></TR
></THEAD
><TBODY
CLASS="tbody"
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
> <P
CLASS="para"
>CEIL</P
> </TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
> <P
CLASS="para"
>Returns the smallest integer that is greater than the specified value. This integer is the "ceiling" over your value. </P
> </TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
> <P
CLASS="para"
>FLOOR</P
> </TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
> <P
CLASS="para"
>Returns the largest integer that is less than the specified value. This integer is the "floor" under your value. </P
> </TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
> <P
CLASS="para"
>ROUND</P
> </TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
> <P
CLASS="para"
>Performs rounding on a number. You can round with a positive number of decimal places (the number of digits to the right of the decimal point) and also with a negative number of decimal places (the number of digits to the right of the decimal point). </P
> </TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
> <P
CLASS="para"
>TRUNC</P
> </TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
> <P
CLASS="para"
><A
CLASS="indexterm"
NAME="AUTOID-11761"
></A
> <A
CLASS="indexterm"
NAME="AUTOID-11762"
></A
> Truncates a number to the specified number of decimal places. TRUNC simply discards all values beyond the decimal places provided in the call. </P
> </TD
></TR
></TBODY
></TABLE
><H4
CLASS="figure"
><A
CLASS="title"
NAME="SQL2-CH-13-FIG-1"
>Figure 13.1: Impact of rounding and truncating functions</A
></H4
><IMG
CLASS="graphic"
SRC="figs/sql2.1301.gif"
ALT="Figure 13.1"></DIV
></DIV
></DIV
><DIV
CLASS="htmlnav"
><P
></P
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch12_02.htm#SQL2-CH-12-SECT-2.1"
TITLE="12.2 Date Function Examples"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 12.2 Date Function Examples"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="book"
HREF="index.htm"
TITLE="Oracle PL/SQL Programming, 2nd Edition"
><IMG
SRC="../gifs/txthome.gif"
ALT="Oracle PL/SQL Programming, 2nd Edition"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch13_02.htm#SQL2-CH-13-SECT-2.0.1"
TITLE="13.2 LOB Function Descriptions"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 13.2 LOB Function Descriptions"
BORDER="0"></A
></TD
></TR
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
>12.2 Date Function Examples</TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="index"
HREF="index/idx_0.htm"
TITLE="Book Index"
><IMG
SRC="../gifs/index.gif"
ALT="Book Index"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
>13.2 LOB Function Descriptions</TD
></TR
></TABLE
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"></DIV
><IMG SRC="../gifs/smnavbar.gif"
USEMAP="#map"
BORDER="0"
ALT="The Oracle Library Navigation">

<P><font size="-1">
<a href="../copyrght.htm#copy">Copyright (c) 2000</a> O'Reilly &amp; Associates. All rights reserved.
</font></P>

<MAP NAME="map">

<AREA SHAPE="RECT"
COORDS="0,0,35,30"
HREF="../index.htm"
ALT="Library Home">

<AREA SHAPE="RECT"
COORDS="40,0,95,30"
HREF="index.htm"
ALT="Oracle PL/SQL Programming, 2nd. Ed.">

<AREA SHAPE="RECT"
COORDS="100,0,200,30"
HREF="../guide8i/index.htm"
ALT="Guide to Oracle 8i Features">

<AREA SHAPE="RECT"
COORDS="205,0,245,30"
HREF="../bipack/index.htm"
ALT="Oracle Built-in Packages">

<AREA SHAPE="RECT"
COORDS="250,0,320,30"
HREF="../advprog/index.htm"
ALT="Advanced PL/SQL Programming with Packages">

<AREA SHAPE="RECT"
COORDS="325,0,420,30"
HREF="../webapp/index.htm"
ALT="Oracle Web Applications">

<AREA SHAPE="RECT"
COORDS="425,0,490,30"
HREF="../langpkt/index.htm"
ALT="Oracle PL/SQL Language Pocket Reference">

<AREA SHAPE="RECT"
COORDS="495,0,570,30"
HREF="../bipkt/index.htm"
ALT="Oracle PL/SQL Built-ins Pocket Reference">
</MAP>

</BODY
>
<!-- Mirrored from liso.cs.pusan.ac.kr by HTTrack Website Copier/3.x [XR&CO'2001] -->
</HTML
>
