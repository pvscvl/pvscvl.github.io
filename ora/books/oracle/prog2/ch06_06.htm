<HTML
><HEAD
><TITLE
>[Chapter 6] 6.6 Fetching from Cursors</TITLE
><META
NAME="DC.Creator"
CONTENT="Steven Feuerstein &amp; Bill Pribyl"><META
NAME="DC.Date"
CONTENT="2000-04-29T18:56:36Z"><META
NAME="DC.Format"
CONTENT="text/html"
SCHEME="MIME"><META
NAME="DC.Identifier"
CONTENT="O'Reilly and Associates CD-ROM-1-56592-335-9E"><META
NAME="DC.Language"
CONTENT="en-US"><META
NAME="DC.Publisher"
CONTENT="O'Reilly &amp; Associates, Inc."><META
NAME="DC.Source"
CONTENT="1-56592-335-9E"
SCHEME="ISBN"><META
NAME="DC.Subject.Keyword"
CONTENT="Oracle PL/SQL"><META
NAME="DC.Title"
CONTENT="Oracle PL/SQL Programming, 2nd Edition"><META
NAME="DC.Type"
CONTENT="Text.Monograph"><META
NAME="generator"
CONTENT="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><LINK
REL="stylesheet"
TYPE="text/css"
HREF="../style/style1.css"><LINK
REV="made"
HREF="mailto:online-books@oreilly.com"
TITLE="Online Books Comments"><LINK
REL="up"
HREF="ch06_01.htm"
TITLE="6. Database Interaction and Cursors"><LINK
REL="prev"
HREF="ch06_05.htm"
TITLE="6.5 Opening Cursors"><LINK
REL="next"
HREF="ch06_07.htm"
TITLE="6.7 Column Aliases in Cursors"></HEAD
><BODY
><DIV
CLASS="htmlnav"
><H1
><IMG
SRC="gifs/smbanner.gif"
ALT="Oracle PL/SQL Programming, 2nd Edition"
USEMAP="#srchmap"
BORDER="0"></H1
><MAP
NAME="srchmap"
><AREA
SHAPE="RECT"
COORDS="0,0,466,65"
HREF="index.htm"
ALT="Oracle PL/SQL Programming, 2nd Edition"><AREA
SHAPE="RECT"
COORDS="467,0,514,18"
HREF="jobjects/fsearch.htm"
ALT="Search this book"></MAP
><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch06_05.htm"
TITLE="6.5 Opening Cursors"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 6.5 Opening Cursors"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><SPAN
CLASS="NAVTITLE"
><A
CLASS="chapter"
REL="up"
HREF="ch06_01.htm"
TITLE="6. Database Interaction and Cursors"
>Chapter 6<BR>Database Interaction and Cursors</A
></SPAN
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch06_07.htm"
TITLE="6.7 Column Aliases in Cursors"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 6.7 Column Aliases in Cursors"
BORDER="0"></A
></TD
></TR
></TABLE
>&nbsp;<HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"></DIV
><DIV
CLASS="sect1"
><H2
CLASS="sect1"
><A
CLASS="title"
NAME="SQL2-CH-6-SECT-6"
>6.6 Fetching from Cursors</A
></H2
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="ch06-idx-104734-1"
></A
><A
CLASS="indexterm"
NAME="ch06-idx-104734-2"
></A
><A
CLASS="indexterm"
NAME="ch06-idx-104734-3"
></A
> A SELECT statement creates a virtual table in SQL: its return set is a series of rows determined by the WHERE clause (or lack thereof) and with columns determined by the column list of the SELECT. So a cursor represents that virtual table within your PL/SQL program. In almost every situation, the point of declaring and opening a cursor is to return, or fetch, the rows of data from the cursor and then manipulate the information retrieved. PL/SQL provides a FETCH statement for this action. </P
><P
CLASS="para"
>The general syntax for a FETCH is shown below:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>FETCH &lt;cursor_name&gt; INTO &lt;record_or_variable_list&gt;;</PRE
></BLOCKQUOTE
><P
CLASS="para"
>where &lt;cursor_name&gt; is the name of the cursor from which the record is fetched and &lt;record_or_variable_list&gt; is the PL/SQL data structure into which the next row of the active set of records is copied. You can fetch into a record structure (declared with the %ROWTYPE attribute or TYPE declaration statement) or you can fetch into a list of one or more variables (PL/SQL variables or application-specific bind variables such as Oracle Forms items). </P
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="AUTOID-5474"
></A
> <A
CLASS="indexterm"
NAME="AUTOID-5478"
></A
>The following examples illustrate the variety of possible fetches: </P
><UL
CLASS="itemizedlist"
><LI
CLASS="listitem"
><P
CLASS="para"
>Fetch into a PL/SQL record:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>FETCH company_cur INTO company_rec;</PRE
></BLOCKQUOTE
></LI
><LI
CLASS="listitem"
><P
CLASS="para"
>Fetch into a variable:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>FETCH new_balance_cur INTO new_balance_dollars;</PRE
></BLOCKQUOTE
></LI
><LI
CLASS="listitem"
><P
CLASS="para"
>Fetch into the row of a PL/SQL table row, a variable, and an Oracle Forms bind variable: </P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>FETCH emp_name_cur INTO emp_name (1), hiredate, :dept.min_salary;</PRE
></BLOCKQUOTE
></LI
></UL
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="SQL2-CH-6-SECT-6.1"
>6.6.1 Matching Column List with INTO Clause</A
></H3
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="AUTOID-5495"
></A
>When you fetch into a list of variables, the number of variables must match the number of expressions in the SELECT list of the cursor. When you fetch into a record, the number of columns in the record must match the number of expressions in the SELECT list of the cursor. </P
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="AUTOID-5499"
></A
>If you do not match up the column list in the cursor's query with the INTO elements in the FETCH, you will receive the following compile error: </P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>PLS-00394: wrong number of values in the INTO list of a FETCH statement</PRE
></BLOCKQUOTE
><P
CLASS="para"
>Let's look at variations of FETCH to see what will and will not work. Suppose I have declared the following cursor, records, and variables: </P
><UL
CLASS="itemizedlist"
><LI
CLASS="listitem"
><P
CLASS="para"
>Cursor that selects just three columns from dr_seuss table and a record based on that cursor: </P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>CURSOR green_eggs_cur (character_in IN VARCHAR2)
IS
   SELECT ham_quantity, times_refused, excuse
     FROM dr_seuss
   WHERE book_title = 'GREEN EGGS AND HAM'
      AND character_name = character_in;
green_eggs_rec green_eggs_cur%ROWTYPE;</PRE
></BLOCKQUOTE
></LI
><LI
CLASS="listitem"
><P
CLASS="para"
>Cursor for all columns in dr_seuss table and a record based on the dr_seuss table: </P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>CURSOR dr_seuss_cur
IS
   SELECT * FROM dr_seuss;
dr_seuss_rec dr_seuss_cur%ROWTYPE;</PRE
></BLOCKQUOTE
></LI
><LI
CLASS="listitem"
><P
CLASS="para"
>Programmer-defined record type which contains all three of the green_eggs_cur columns, followed by declaration of record: </P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>TYPE green_eggs_rectype IS RECORD
   (ham# dr_seuss.ham_quantity%TYPE;
    saidno# dr_seuss.times_refused%TYPE,
    reason dr_seuss.excuse%TYPE);
full_green_eggs_rec green_eggs_rectype;</PRE
></BLOCKQUOTE
></LI
><LI
CLASS="listitem"
><P
CLASS="para"
>Programmer-defined record type which contains only two of the three cursor columns, following by declaration of record: </P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>TYPE partial_green_eggs_rectype IS RECORD
   (ham# dr_seuss.ham_quantity%TYPE;
    saidno# dr_seuss.times_refused%TYPE);
partial_rec partial_green_eggs_rectype;</PRE
></BLOCKQUOTE
></LI
><LI
CLASS="listitem"
><P
CLASS="para"
>A set of local PL/SQL variables:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>ham_amount NUMBER;
refused_count INTEGER;
lousy_excuse VARCHAR2(60);</PRE
></BLOCKQUOTE
></LI
></UL
><P
CLASS="para"
>Now that everything is declared, I then OPEN the cursor for the "Sam I Am" character (passed as an argument) as follows: </P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>OPEN green_eggs_cur ('Sam I Am');</PRE
></BLOCKQUOTE
><P
CLASS="para"
>All of the following fetches will compile without error because the number and type of items in the INTO clause match those of the cursor: </P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>FETCH green_eggs_cur INTO green_eggs_rec;
FETCH green_eggs_cur INTO ham_amount, refused_count, lousy_excuse;
FETCH green_eggs_cur INTO full_green_eggs_rec;
FETCH dr_seuss_cur INTO dr_seuss_rec;</PRE
></BLOCKQUOTE
><P
CLASS="para"
>Notice that you can FETCH a cursor's row into either a table-based or a programmer-defined record. You do not have to worry about record type compatibility in this situation. PL/SQL just needs to be able to match up a cursor column/expression with a variable/field in the INTO clause. </P
><P
CLASS="para"
>As you can see from the above FETCHes, you are not restricted to using any single record or variable list for a particular FETCH&nbsp;-- even in the same program. You can declare multiple records for the same cursor and use all those different records for different fetches. You can also fetch once INTO a record and then later INTO a variable list, as shown below: </P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>OPEN green_eggs_cur ('Sam I Am');
FETCH green_eggs_cur INTO green_eggs_rec;
FETCH green_eggs_cur INTO amount_of_ham, num_rejections, reason;
CLOSE green_eggs_cur;</PRE
></BLOCKQUOTE
><P
CLASS="para"
>PL/SQL is very flexible in how it matches up the cursor columns with the INTO clause. </P
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="SQL2-CH-6-SECT-6.2"
>6.6.2 Fetching Past the Last Row</A
></H3
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="AUTOID-5531"
></A
> <A
CLASS="indexterm"
NAME="AUTOID-5535"
></A
>Once you open a cursor, you can FETCH from it until there are no more records left in the active set. At this point the %NOTFOUND cursor attribute for the cursor is set to TRUE. </P
><P
CLASS="para"
>Actually, you can even FETCH past the last record! In this case, PL/SQL will not raise any exceptions. It just won't do anything for you. Because there is nothing left to fetch, though, it also will not modify the values in the INTO list of the FETCH. The fetch will not set those values to NULL. </P
><P
CLASS="para"
>You should, therefore, never test the values of INTO variables to determine if the FETCH against the cursor succeeded. Instead, you should check the value of the %NOTFOUND attribute, as explained in <A
CLASS="xref"
HREF="ch06_09.htm#SQL2-CH-6-SECT-9.1"
>Section 6.9</A
>. </P
></DIV
></DIV
><DIV
CLASS="htmlnav"
><P
></P
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch06_05.htm"
TITLE="6.5 Opening Cursors"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 6.5 Opening Cursors"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="book"
HREF="index.htm"
TITLE="Oracle PL/SQL Programming, 2nd Edition"
><IMG
SRC="../gifs/txthome.gif"
ALT="Oracle PL/SQL Programming, 2nd Edition"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch06_07.htm"
TITLE="6.7 Column Aliases in Cursors"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 6.7 Column Aliases in Cursors"
BORDER="0"></A
></TD
></TR
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
>6.5 Opening Cursors</TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="index"
HREF="index/idx_0.htm"
TITLE="Book Index"
><IMG
SRC="../gifs/index.gif"
ALT="Book Index"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
>6.7 Column Aliases in Cursors</TD
></TR
></TABLE
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"></DIV
><IMG SRC="../gifs/smnavbar.gif"
USEMAP="#map"
BORDER="0"
ALT="The Oracle Library Navigation">

<P><font size="-1">
<a href="../copyrght.htm#copy">Copyright (c) 2000</a> O'Reilly &amp; Associates. All rights reserved.
</font></P>

<MAP NAME="map">

<AREA SHAPE="RECT"
COORDS="0,0,35,30"
HREF="../index.htm"
ALT="Library Home">

<AREA SHAPE="RECT"
COORDS="40,0,95,30"
HREF="index.htm"
ALT="Oracle PL/SQL Programming, 2nd. Ed.">

<AREA SHAPE="RECT"
COORDS="100,0,200,30"
HREF="../guide8i/index.htm"
ALT="Guide to Oracle 8i Features">

<AREA SHAPE="RECT"
COORDS="205,0,245,30"
HREF="../bipack/index.htm"
ALT="Oracle Built-in Packages">

<AREA SHAPE="RECT"
COORDS="250,0,320,30"
HREF="../advprog/index.htm"
ALT="Advanced PL/SQL Programming with Packages">

<AREA SHAPE="RECT"
COORDS="325,0,420,30"
HREF="../webapp/index.htm"
ALT="Oracle Web Applications">

<AREA SHAPE="RECT"
COORDS="425,0,490,30"
HREF="../langpkt/index.htm"
ALT="Oracle PL/SQL Language Pocket Reference">

<AREA SHAPE="RECT"
COORDS="495,0,570,30"
HREF="../bipkt/index.htm"
ALT="Oracle PL/SQL Built-ins Pocket Reference">
</MAP>

</BODY
>
<!-- Mirrored from liso.cs.pusan.ac.kr by HTTrack Website Copier/3.x [XR&CO'2001] -->
</HTML
>
