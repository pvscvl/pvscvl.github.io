<HTML
><HEAD
><TITLE
>[Chapter 9] 9.5 Assigning Values to and from Records</TITLE
><META
NAME="DC.Creator"
CONTENT="Steven Feuerstein &amp; Bill Pribyl"><META
NAME="DC.Date"
CONTENT="2000-04-29T18:58:46Z"><META
NAME="DC.Format"
CONTENT="text/html"
SCHEME="MIME"><META
NAME="DC.Identifier"
CONTENT="O'Reilly and Associates CD-ROM-1-56592-335-9E"><META
NAME="DC.Language"
CONTENT="en-US"><META
NAME="DC.Publisher"
CONTENT="O'Reilly &amp; Associates, Inc."><META
NAME="DC.Source"
CONTENT="1-56592-335-9E"
SCHEME="ISBN"><META
NAME="DC.Subject.Keyword"
CONTENT="Oracle PL/SQL"><META
NAME="DC.Title"
CONTENT="Oracle PL/SQL Programming, 2nd Edition"><META
NAME="DC.Type"
CONTENT="Text.Monograph"><META
NAME="generator"
CONTENT="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><LINK
REL="stylesheet"
TYPE="text/css"
HREF="../style/style1.css"><LINK
REV="made"
HREF="mailto:online-books@oreilly.com"
TITLE="Online Books Comments"><LINK
REL="up"
HREF="ch09_01.htm"
TITLE="9. Records in PL/SQL"><LINK
REL="prev"
HREF="ch09_04.htm#SQL2-CH-9-SECT-4.1"
TITLE="9.4 Programmer-Defined Records"><LINK
REL="next"
HREF="ch09_06.htm#SQL2-CH-9-SECT-6.1.1"
TITLE="9.6 Record Types and Record Compatibility"></HEAD
><BODY
><DIV
CLASS="htmlnav"
><H1
><IMG
SRC="gifs/smbanner.gif"
ALT="Oracle PL/SQL Programming, 2nd Edition"
USEMAP="#srchmap"
BORDER="0"></H1
><MAP
NAME="srchmap"
><AREA
SHAPE="RECT"
COORDS="0,0,466,65"
HREF="index.htm"
ALT="Oracle PL/SQL Programming, 2nd Edition"><AREA
SHAPE="RECT"
COORDS="467,0,514,18"
HREF="jobjects/fsearch.htm"
ALT="Search this book"></MAP
><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch09_04.htm#SQL2-CH-9-SECT-4.1"
TITLE="9.4 Programmer-Defined Records"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 9.4 Programmer-Defined Records"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><SPAN
CLASS="NAVTITLE"
><A
CLASS="chapter"
REL="up"
HREF="ch09_01.htm"
TITLE="9. Records in PL/SQL"
>Chapter 9<BR>Records in PL/SQL</A
></SPAN
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch09_06.htm#SQL2-CH-9-SECT-6.1.1"
TITLE="9.6 Record Types and Record Compatibility"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 9.6 Record Types and Record Compatibility"
BORDER="0"></A
></TD
></TR
></TABLE
>&nbsp;<HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"></DIV
><DIV
CLASS="sect1"
><H2
CLASS="sect1"
><A
CLASS="title"
NAME="SQL2-CH-9-SECT-5"
>9.5 Assigning Values to and from Records</A
></H2
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="AUTOID-8340"
></A
> <A
CLASS="indexterm"
NAME="AUTOID-8342"
></A
><A
CLASS="indexterm"
NAME="AUTOID-8344"
></A
>You can modify the values in a record in the following ways: </P
><UL
CLASS="itemizedlist"
><LI
CLASS="listitem"
><P
CLASS="para"
>Direct field assignment with the assignment operator</P
></LI
><LI
CLASS="listitem"
><P
CLASS="para"
>SELECT INTO from an implicit cursor</P
></LI
><LI
CLASS="listitem"
><P
CLASS="para"
>FETCH INTO from an explicit cursor</P
></LI
><LI
CLASS="listitem"
><P
CLASS="para"
>Aggregate assignment</P
></LI
></UL
><P
CLASS="para"
>These assignment methods are described in the sections that follow.</P
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="SQL2-CH-9-SECT-5.1"
>9.5.1 Direct Field Assignment </A
></H3
><P
CLASS="para"
>The assignment operator (<CODE
CLASS="literal"
>:=</CODE
>) changes the value of a particular field. In the first assignment, total_sales is zeroed out. In the second assignment, a function is called to return a value for the Boolean flag output_generated (it is set to either TRUE or FALSE): </P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>top_customer_rec.total_sales := 0;

report_rec.output_generated :=
   check_report_status (report_rec.report_id);</PRE
></BLOCKQUOTE
><P
CLASS="para"
>In the next example I create a record based on the rain_forest_history table, populate it with values, and then insert a record into that same table: </P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>DECLARE
   rain_forest_rec rain_forest_history%ROWTYPE;
BEGIN
   /* Set values for the record */
   rain_forest_rec.country_code  := 1005;
   rain_forest_rec.analysis_date := SYSDATE;
   rain_forest_rec.size_in_acres := 32;
   rain_forest_rec.species_lost  := 425;

   /* Insert a row in the table using the record values */
   INSERT INTO rain_forest_history VALUES
      (rain_forest_rec.country_code,
       rain_forest_rec.analysis_date,
       rain_forest_rec.size_in_acres,
       rain_forest_rec.species_lost);
   ...
END;</PRE
></BLOCKQUOTE
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="SQL2-CH-9-SECT-5.2"
>9.5.2 SELECT INTO from an Implicit Cursor</A
></H3
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="AUTOID-8366"
></A
> <A
CLASS="indexterm"
NAME="AUTOID-8368"
></A
> <A
CLASS="indexterm"
NAME="AUTOID-8371"
></A
><A
CLASS="indexterm"
NAME="AUTOID-8375"
></A
>Use the implicit cursor SELECT INTO to fill the values in a record. You can SELECT INTO either the record as a whole or the individual fields in the record: </P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>DECLARE
   TYPE customer_sales_rectype IS RECORD
      (customer_id   NUMBER (5),
       customer_name customer.name%TYPE,
       total_sales   NUMBER (15,2)
       );
   top_customer_rec  customer_sales_rectype;
BEGIN
   /* Move values directly into the record: */
   SELECT customer_id, name, SUM (sales)
     INTO top_customer_rec
     FROM customer
    WHERE sold_on BETWEEN &lt; ADD_MONTHS (SYSDATE, -3);

   /* or list the individual fields: */
   SELECT customer_id, name, SUM (sales)
     INTO top_customer_rec.customer_id, top_customer_rec.customer_name,
          top_customer_rec.total_sales
     FROM customer
    WHERE sold_on BETWEEN &lt; ADD_MONTHS (SYSDATE, -3);</PRE
></BLOCKQUOTE
><P
CLASS="para"
>If you SELECT INTO a record, you must be sure that the structure of the select list (columns or expressions) matches that of the record. </P
><P
CLASS="para"
>The INTO clause of an implicit query is the only part of a SQL DML statement in which a PL/SQL record (as an aggregate and not its component fields) can be referenced. </P
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="SQL2-CH-9-SECT-5.3"
>9.5.3 FETCH INTO from an Explicit Cursor</A
></H3
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="AUTOID-8383"
></A
> <A
CLASS="indexterm"
NAME="AUTOID-8385"
></A
> <A
CLASS="indexterm"
NAME="AUTOID-8389"
></A
><A
CLASS="indexterm"
NAME="AUTOID-8393"
></A
>Use an explicit cursor to FETCH values INTO a record. You can FETCH INTO the record as a whole or into the individual fields in the record: </P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>DECLARE
   /*
   || Declare a cursor and then define a record based on that cursor
   || with the %ROWTYPE attribute.
   */
   CURSOR cust_sales_cur IS
      SELECT customer_id, name, SUM (sales) tot_sales
        FROM customer
       WHERE sold_on BETWEEN &lt; ADD_MONTHS (SYSDATE, -3);
   cust_sales_rec cust_sales_cur%ROWTYPE;

BEGIN
   /* Move values directly into record by fetching from cursor */

   OPEN cust_sales_cur;
   FETCH cust_sales_cur INTO cust_sales_rec;

   /* or fetch values from the select list into individual fields. */

   OPEN cust_sales_cur;
   FETCH cust_sales_cur
      INTO cust_sales_rec.customer_id,
           cust_sales_rec.customer_name,
           cust_sales_rec.total_sales;</PRE
></BLOCKQUOTE
><P
CLASS="para"
>If you FETCH INTO the record without specifying the fields, you must be sure that the structure of the cursor's select list (columns or expressions) matches that of the record. </P
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="SQL2-CH-9-SECT-5.4"
>9.5.4 Aggregate Assignment </A
></H3
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="AUTOID-8400"
></A
> In this last and most powerful approach to record assignments, I change all the values of the record once, through an aggregate assignment or assignment of the group. When you SELECT INTO the entire record without listing its individual fields, you perform a type of aggregate assignment. But you can also change the values of every field in a record simultaneously with the assignment operator (<CODE
CLASS="literal"
>:=</CODE
>). In the following example I declare two different rain_forest_history records and then set the current history information to the previous history record: </P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>DECLARE
   prev_rain_forest_rec rain_forest_history%ROWTYPE;
   curr_rain_forest_rec rain_forest_history%ROWTYPE;
BEGIN
   ... initialize previous year rain forest data ...

   -- Transfer data from previous to current records.
   curr_rain_forest_rec := prev_rain_forest_rec;</PRE
></BLOCKQUOTE
><P
CLASS="para"
>The result of this aggregate assignment is that the value of each field in the current record is set to the value of the corresponding field record in the previous record. I could also have accomplished this with individual direct assignments from the previous to current records. This would require four separate assignments and lots of typing: </P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>curr_rain_forest_rec.country_code := prev_rain_forest_rec.country_code;
curr_rain_forest_rec.analysis_date := prev_rain_forest_rec.analysis_date;
curr_rain_forest_rec.size_in_acres := prev_rain_forest_rec.size_in_acres;
curr_rain_forest_rec.species_lost := prev_rain_forest_rec.species_lost;</PRE
></BLOCKQUOTE
><P
CLASS="para"
>Which of these two types of assignments would you rather code? Which would you rather have to maintain? </P
><P
CLASS="para"
>I was able to perform this aggregate assignment because both of the records were based on the same rowtype. If the records are not compatible in this way, your assignment will not compile. </P
><P
CLASS="para"
>The next section on record types and record compatibility explores the restrictions on use of aggregate assignments and other record operations. </P
></DIV
></DIV
><DIV
CLASS="htmlnav"
><P
></P
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch09_04.htm#SQL2-CH-9-SECT-4.1"
TITLE="9.4 Programmer-Defined Records"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 9.4 Programmer-Defined Records"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="book"
HREF="index.htm"
TITLE="Oracle PL/SQL Programming, 2nd Edition"
><IMG
SRC="../gifs/txthome.gif"
ALT="Oracle PL/SQL Programming, 2nd Edition"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch09_06.htm#SQL2-CH-9-SECT-6.1.1"
TITLE="9.6 Record Types and Record Compatibility"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 9.6 Record Types and Record Compatibility"
BORDER="0"></A
></TD
></TR
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
>9.4 Programmer-Defined Records</TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="index"
HREF="index/idx_0.htm"
TITLE="Book Index"
><IMG
SRC="../gifs/index.gif"
ALT="Book Index"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
>9.6 Record Types and Record Compatibility</TD
></TR
></TABLE
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"></DIV
><IMG SRC="../gifs/smnavbar.gif"
USEMAP="#map"
BORDER="0"
ALT="The Oracle Library Navigation">

<P><font size="-1">
<a href="../copyrght.htm#copy">Copyright (c) 2000</a> O'Reilly &amp; Associates. All rights reserved.
</font></P>

<MAP NAME="map">

<AREA SHAPE="RECT"
COORDS="0,0,35,30"
HREF="../index.htm"
ALT="Library Home">

<AREA SHAPE="RECT"
COORDS="40,0,95,30"
HREF="index.htm"
ALT="Oracle PL/SQL Programming, 2nd. Ed.">

<AREA SHAPE="RECT"
COORDS="100,0,200,30"
HREF="../guide8i/index.htm"
ALT="Guide to Oracle 8i Features">

<AREA SHAPE="RECT"
COORDS="205,0,245,30"
HREF="../bipack/index.htm"
ALT="Oracle Built-in Packages">

<AREA SHAPE="RECT"
COORDS="250,0,320,30"
HREF="../advprog/index.htm"
ALT="Advanced PL/SQL Programming with Packages">

<AREA SHAPE="RECT"
COORDS="325,0,420,30"
HREF="../webapp/index.htm"
ALT="Oracle Web Applications">

<AREA SHAPE="RECT"
COORDS="425,0,490,30"
HREF="../langpkt/index.htm"
ALT="Oracle PL/SQL Language Pocket Reference">

<AREA SHAPE="RECT"
COORDS="495,0,570,30"
HREF="../bipkt/index.htm"
ALT="Oracle PL/SQL Built-ins Pocket Reference">
</MAP>

</BODY
>
<!-- Mirrored from liso.cs.pusan.ac.kr by HTTrack Website Copier/3.x [XR&CO'2001] -->
</HTML
>
