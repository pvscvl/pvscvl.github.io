<HTML
><HEAD
><TITLE
>[Chapter 17] Calling PL/SQL Functions in SQL</TITLE
><META
NAME="DC.Creator"
CONTENT="Steven Feuerstein &amp; Bill Pribyl"><META
NAME="DC.Date"
CONTENT="2000-04-29T19:04:42Z"><META
NAME="DC.Format"
CONTENT="text/html"
SCHEME="MIME"><META
NAME="DC.Identifier"
CONTENT="O'Reilly and Associates CD-ROM-1-56592-335-9E"><META
NAME="DC.Language"
CONTENT="en-US"><META
NAME="DC.Publisher"
CONTENT="O'Reilly &amp; Associates, Inc."><META
NAME="DC.Source"
CONTENT="1-56592-335-9E"
SCHEME="ISBN"><META
NAME="DC.Subject.Keyword"
CONTENT="Oracle PL/SQL"><META
NAME="DC.Title"
CONTENT="Oracle PL/SQL Programming, 2nd Edition"><META
NAME="DC.Type"
CONTENT="Text.Monograph"><META
NAME="generator"
CONTENT="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><LINK
REL="stylesheet"
TYPE="text/css"
HREF="../style/style1.css"><LINK
REV="made"
HREF="mailto:online-books@oreilly.com"
TITLE="Online Books Comments"><LINK
REL="up"
HREF="part04.htm"
TITLE="IV. Modular Code "><LINK
REL="prev"
HREF="ch16_06.htm"
TITLE="16.6 Package Initialization"><LINK
REL="next"
HREF="ch17_02.htm"
TITLE="17.2 Syntax for Calling Stored Functions in SQL"></HEAD
><BODY
><DIV
CLASS="htmlnav"
><H1
><IMG
SRC="gifs/smbanner.gif"
ALT="Oracle PL/SQL Programming, 2nd Edition"
USEMAP="#srchmap"
BORDER="0"></H1
><MAP
NAME="srchmap"
><AREA
SHAPE="RECT"
COORDS="0,0,466,65"
HREF="index.htm"
ALT="Oracle PL/SQL Programming, 2nd Edition"><AREA
SHAPE="RECT"
COORDS="467,0,514,18"
HREF="jobjects/fsearch.htm"
ALT="Search this book"></MAP
><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch16_06.htm"
TITLE="16.6 Package Initialization"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 16.6 Package Initialization"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><SPAN
CLASS="NAVTITLE"
>Chapter 17</SPAN
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch17_02.htm"
TITLE="17.2 Syntax for Calling Stored Functions in SQL"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 17.2 Syntax for Calling Stored Functions in SQL"
BORDER="0"></A
></TD
></TR
></TABLE
>&nbsp;<HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"></DIV
><DIV
CLASS="chapter"
><H1
CLASS="chapter"
><A
CLASS="title"
NAME="SQL2-CH-17"
>17. Calling PL/SQL Functions in SQL</A
></H1
><DIV
CLASS="htmltoc"
><P
><B
>Contents:</B
><BR><A
CLASS="sect1"
HREF="#SQL2-CH-17-SECT-1"
TITLE="17.1 Looking at the Problem"
>Looking at the Problem</A
><BR><A
CLASS="sect1"
HREF="ch17_02.htm"
TITLE="17.2 Syntax for Calling Stored Functions in SQL"
>Syntax for Calling Stored Functions in SQL</A
><BR><A
CLASS="sect1"
HREF="ch17_03.htm"
TITLE="17.3 Requirements for Stored Functions in SQL"
>Requirements for Stored Functions in SQL</A
><BR><A
CLASS="sect1"
HREF="ch17_04.htm"
TITLE="17.4 Restrictions on PL/SQL Functions in SQL"
>Restrictions on PL/SQL Functions in SQL</A
><BR><A
CLASS="sect1"
HREF="ch17_05.htm#SQL2-CH-17-SECT-5.1.1"
TITLE="17.5 Calling Packaged Functions in SQL"
>Calling Packaged Functions in SQL</A
><BR><A
CLASS="sect1"
HREF="ch17_06.htm"
TITLE="17.6 Column/Function Name Precedence"
>Column/Function Name Precedence</A
><BR><A
CLASS="sect1"
HREF="ch17_07.htm#SQL2-CH-17-SECT-7.1"
TITLE="17.7 Realities: Calling PL/SQL Functions in SQL"
>Realities: Calling PL/SQL Functions in SQL</A
><BR><A
CLASS="sect1"
HREF="ch17_08.htm#SQL2-CH-17-SECT-8.4"
TITLE="17.8 Examples of Embedded PL/SQL"
>Examples of Embedded PL/SQL</A
></P
><P
></P
></DIV
><P
CLASS="para"
>PL/SQL is a procedural language extension to SQL, so you can also issue native calls to SQL statements such as SELECT, INSERT, and UPDATE from within your PL/SQL programs. Until Release 2.1 of PL/SQL (which comes with Oracle7 Release 7.1 of the RDBMS), however, you weren't able to place your own PL/SQL functions inside a SQL statement. </P
><BLOCKQUOTE
CLASS="note"
><P
CLASS="para"
><STRONG
>NOTE:</STRONG
> The capabilities described in this chapter are available only in PL/SQL Release 2.1 and above.</P
></BLOCKQUOTE
><DIV
CLASS="sect1"
><H2
CLASS="sect1"
><A
CLASS="title"
NAME="SQL2-CH-17-SECT-1"
>17.1 Looking at the Problem</A
></H2
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="ch17-idx-998278-1"
></A
><A
CLASS="indexterm"
NAME="ch17-idx-998278-2"
></A
> <A
CLASS="indexterm"
NAME="ch17-idx-998278-3"
></A
>The restriction on putting PL/SQL functions inside an SQL statement often resulted in cumbersome SQL statements and redundant implementation of business rules. Suppose, for example, you need to calculate and use an employee's total compensation both in native SQL and also in your forms. The computation itself is straightforward enough: </P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>Total compensation = salary + bonus</PRE
></BLOCKQUOTE
><P
CLASS="para"
>My SQL statement would include this formula:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>SELECT employee_name, salary + NVL (bonus, 0)
  FROM employee;</PRE
></BLOCKQUOTE
><P
CLASS="para"
>while my Post-Query trigger in my Oracle Forms application would employ the following PL/SQL code: </P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>:employee.total_comp := :employee.salary + NVL (:employee.bonus, 0);</PRE
></BLOCKQUOTE
><P
CLASS="para"
>In this case, the calculation is very simple, but the fact remains that if you need to change the total compensation formula for any reason (different kinds of bonuses, for example), you would then have to change all of these hardcoded calculations both in the SQL statements and in the front end application components. </P
><P
CLASS="para"
>A far better approach is to create a function that returns the total compensation: </P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>FUNCTION total_comp
   (salary_in IN employee.salary%TYPE, bonus_in IN employee.bonus%TYPE)
   RETURN NUMBER
IS
BEGIN
   RETURN salary_in + NVL (bonus_in, 0);
END;</PRE
></BLOCKQUOTE
><P
CLASS="para"
>Then I could replace the formulas in my code as follows:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>SELECT employee_name, total_comp (salary, bonus)
  FROM employee;

:employee.total_comp := total_comp (:employee.salary, :employee.bonus);</PRE
></BLOCKQUOTE
><P
CLASS="para"
>Until Release 2.1 of PL/SQL the above SELECT statement raised the following error: </P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>ORA-00919: invalid function</PRE
></BLOCKQUOTE
><P
CLASS="para"
>because there was no mechanism for SQL to resolve references to programmer-defined functions stored in the database. Now, Oracle has made the relationship between PL/SQL and SQL more of a two-way street. This makes sense, since the functions are stored in the database (in tables, of course) and therefore easily accessible at the SQL layer via a SELECT statement. </P
><P
CLASS="para"
>With PL/SQL Release 2.1, you can now call stored functions anywhere in a SQL statement where an expression is allowed, including the SELECT, WHERE, START WITH, GROUP BY, HAVING, ORDER BY, SET, and VALUES clauses (since stored procedures are in and of themselves PL/SQL executable statements, they cannot be embedded in a SQL statement). </P
><P
CLASS="para"
>You can use one of your own functions just as you would a built-in SQL function such as TO_DATE or SUBSTR or LENGTH. On the disk I've included a package, ps.parse (filenames <EM
CLASS="emphasis"
>psparse.sps</EM
> and <EM
CLASS="emphasis"
>psparse.spb</EM
>) that includes a function that returns the number of atomics (words and/or delimiters) in a string. I can employ this directly in a SQL statement to show the distribution of words in a series of textual notes, as follows: </P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>SELECT line_number,
       ps_parse.number_of_atomics (line_text) AS num_words
  FROM notes
ORDER BY num_words DESC;</PRE
></BLOCKQUOTE
><P
CLASS="para"
>Notice that, in this case, I have assigned a column alias to my function call using the "AS" syntax. I can then use that alias in the ORDER BY without having to repeat the syntax for the function call itself. </P
><P
CLASS="para"
>The ability to place <A
CLASS="indexterm"
NAME="AUTOID-14949"
></A
> programmer-defined PL/SQL functions inside SQL is a very powerful enhancement to the Oracle development environment. With these functions you will be able to do the following: </P
><UL
CLASS="itemizedlist"
><LI
CLASS="listitem"
><P
CLASS="para"
><EM
CLASS="emphasis"
>Consolidate business rule logic into a smaller number of well tuned and easily maintained functions.</EM
> You do not have to repeat this logic across individual SQL statements and PL/SQL programs. This is probably the most far-reaching and important advantage of using functions in PL/SQL. </P
></LI
><LI
CLASS="listitem"
><P
CLASS="para"
>Improve the <A
CLASS="indexterm"
NAME="AUTOID-14958"
></A
>performance of your SQL statements. SQL is a nonprocedural language, yet application requirements often demand procedural logic in your SQL. The SQL language is robust enough to let you get at the answer, but in some situations it is a very inefficient way to get that answer. Embedded PL/SQL can sometimes do the job much more quickly. There is also, of course, some overhead associated with calling these functions from within SQL. You will consequently need to evaluate carefully when and where PL/SQL functions in SQL will do you the most good. </P
></LI
><LI
CLASS="listitem"
><P
CLASS="para"
><EM
CLASS="emphasis"
>Simplify your SQL statements.</EM
> All the reasons you have to modularize your PL/SQL code apply to SQL as well, particularly the need to hide complicated expressions and logic behind a function specification. From the DECODE statement to nested, correlated subselects, the readability of many SQL statements will benefit from programmer-defined functions. </P
></LI
><LI
CLASS="listitem"
><P
CLASS="para"
><EM
CLASS="emphasis"
>Perform actions in SQL which are otherwise impossible.</EM
> SQL is a set-at-a-time language, identifying a set of rows and applying actions to those rows. It does not support iterative processing against an individual column value. Suppose you need to identify the number of occurrences of a substring within the names of companies. With pure SQL, you cannot do this. You can, on the other hand, apply a PL/SQL function to the company name in a SELECT list which can perform this kind of iterative processing. </P
></LI
></UL
><P
CLASS="para"
>You can place functions in a VALUES list, a SET clause, or a GROUP BY clause, as shown in the following: </P
><UL
CLASS="itemizedlist"
><LI
CLASS="listitem"
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="AUTOID-14971"
></A
> VALUES list. Consider the following example: </P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>INSERT INTO notes
   (call_id, line_text, line_number)
VALUES
   (:call.call_id, :note.text, next_line_number (:call.call_id));</PRE
></BLOCKQUOTE
><P
CLASS="para"
>The next_line_number function obtains the next sequence number for the notes for that particular call (i.e., while you might use the sequence generator to obtain the next unique call ID number, the line_number for notes for a given call always starts from one, so a sequence generator is inapplicable). </P
></LI
><LI
CLASS="listitem"
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="AUTOID-14977"
></A
> SET clause. The max_compensation function returns the maximum compensation possible for an employee's department. </P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>UPDATE employee SET salary = max_compensation (department_id)
 WHERE employee_id = 1005;</PRE
></BLOCKQUOTE
><P
CLASS="para"
>In this case the max_compensation function replaces a subselect, which would use the SQL AVG function to compute the value. </P
></LI
><LI
CLASS="listitem"
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="AUTOID-14983"
></A
>GROUP BY clause. My company has done a very poor job of normalizing its job titles; there are 15 different variations of VICE PRESIDENT, 20 different kinds of MANAGER, and so forth. The following SELECT statement cuts through all the confusion and displays the total salary for each "category" of job. </P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>SELECT job_category (job_title_id) as title, SUM (salary)
  FROM employee
 GROUP BY title;</PRE
></BLOCKQUOTE
><P
CLASS="para"
>The function is used both in the SELECT list and in the GROUP BY. </P
></LI
></UL
></DIV
></DIV
><DIV
CLASS="htmlnav"
><P
></P
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch16_06.htm"
TITLE="16.6 Package Initialization"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 16.6 Package Initialization"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="book"
HREF="index.htm"
TITLE="Oracle PL/SQL Programming, 2nd Edition"
><IMG
SRC="../gifs/txthome.gif"
ALT="Oracle PL/SQL Programming, 2nd Edition"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch17_02.htm"
TITLE="17.2 Syntax for Calling Stored Functions in SQL"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 17.2 Syntax for Calling Stored Functions in SQL"
BORDER="0"></A
></TD
></TR
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
>16.6 Package Initialization</TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="index"
HREF="index/idx_0.htm"
TITLE="Book Index"
><IMG
SRC="../gifs/index.gif"
ALT="Book Index"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
>17.2 Syntax for Calling Stored Functions in SQL</TD
></TR
></TABLE
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"></DIV
><IMG SRC="../gifs/smnavbar.gif"
USEMAP="#map"
BORDER="0"
ALT="The Oracle Library Navigation">

<P><font size="-1">
<a href="../copyrght.htm#copy">Copyright (c) 2000</a> O'Reilly &amp; Associates. All rights reserved.
</font></P>

<MAP NAME="map">

<AREA SHAPE="RECT"
COORDS="0,0,35,30"
HREF="../index.htm"
ALT="Library Home">

<AREA SHAPE="RECT"
COORDS="40,0,95,30"
HREF="index.htm"
ALT="Oracle PL/SQL Programming, 2nd. Ed.">

<AREA SHAPE="RECT"
COORDS="100,0,200,30"
HREF="../guide8i/index.htm"
ALT="Guide to Oracle 8i Features">

<AREA SHAPE="RECT"
COORDS="205,0,245,30"
HREF="../bipack/index.htm"
ALT="Oracle Built-in Packages">

<AREA SHAPE="RECT"
COORDS="250,0,320,30"
HREF="../advprog/index.htm"
ALT="Advanced PL/SQL Programming with Packages">

<AREA SHAPE="RECT"
COORDS="325,0,420,30"
HREF="../webapp/index.htm"
ALT="Oracle Web Applications">

<AREA SHAPE="RECT"
COORDS="425,0,490,30"
HREF="../langpkt/index.htm"
ALT="Oracle PL/SQL Language Pocket Reference">

<AREA SHAPE="RECT"
COORDS="495,0,570,30"
HREF="../bipkt/index.htm"
ALT="Oracle PL/SQL Built-ins Pocket Reference">
</MAP>

</BODY
>
<!-- Mirrored from liso.cs.pusan.ac.kr by HTTrack Website Copier/3.x [XR&CO'2001] -->
</HTML
>
