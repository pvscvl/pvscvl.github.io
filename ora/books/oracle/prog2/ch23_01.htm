<HTML
><HEAD
><TITLE
>[Chapter 23] Managing Code in the Database</TITLE
><META
NAME="DC.Creator"
CONTENT="Steven Feuerstein &amp; Bill Pribyl"><META
NAME="DC.Date"
CONTENT="2000-04-29T19:12:17Z"><META
NAME="DC.Format"
CONTENT="text/html"
SCHEME="MIME"><META
NAME="DC.Identifier"
CONTENT="O'Reilly and Associates CD-ROM-1-56592-335-9E"><META
NAME="DC.Language"
CONTENT="en-US"><META
NAME="DC.Publisher"
CONTENT="O'Reilly &amp; Associates, Inc."><META
NAME="DC.Source"
CONTENT="1-56592-335-9E"
SCHEME="ISBN"><META
NAME="DC.Subject.Keyword"
CONTENT="Oracle PL/SQL"><META
NAME="DC.Title"
CONTENT="Oracle PL/SQL Programming, 2nd Edition"><META
NAME="DC.Type"
CONTENT="Text.Monograph"><META
NAME="generator"
CONTENT="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><LINK
REL="stylesheet"
TYPE="text/css"
HREF="../style/style1.css"><LINK
REV="made"
HREF="mailto:online-books@oreilly.com"
TITLE="Online Books Comments"><LINK
REL="up"
HREF="part06.htm"
TITLE="VI. Making PL/SQL Programs Work"><LINK
REL="prev"
HREF="ch22_07.htm#SQL2-CH-22-SECT-7.2"
TITLE="22.7 Tips for Parameter Design"><LINK
REL="next"
HREF="ch23_02.htm"
TITLE="23.2 Transaction Integrity and Execute Authority"></HEAD
><BODY
><DIV
CLASS="htmlnav"
><H1
><IMG
SRC="gifs/smbanner.gif"
ALT="Oracle PL/SQL Programming, 2nd Edition"
USEMAP="#srchmap"
BORDER="0"></H1
><MAP
NAME="srchmap"
><AREA
SHAPE="RECT"
COORDS="0,0,466,65"
HREF="index.htm"
ALT="Oracle PL/SQL Programming, 2nd Edition"><AREA
SHAPE="RECT"
COORDS="467,0,514,18"
HREF="jobjects/fsearch.htm"
ALT="Search this book"></MAP
><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch22_07.htm#SQL2-CH-22-SECT-7.2"
TITLE="22.7 Tips for Parameter Design"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 22.7 Tips for Parameter Design"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><SPAN
CLASS="NAVTITLE"
>Chapter 23</SPAN
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch23_02.htm"
TITLE="23.2 Transaction Integrity and Execute Authority"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 23.2 Transaction Integrity and Execute Authority"
BORDER="0"></A
></TD
></TR
></TABLE
>&nbsp;<HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"></DIV
><DIV
CLASS="chapter"
><H1
CLASS="chapter"
><A
CLASS="title"
NAME="SQL2-CH-23"
>23. Managing Code in the Database</A
></H1
><DIV
CLASS="htmltoc"
><P
><B
>Contents:</B
><BR><A
CLASS="sect1"
HREF="#SQL2-CH-23-SECT-1"
TITLE="23.1 Executing Stored Code"
>Executing Stored Code</A
><BR><A
CLASS="sect1"
HREF="ch23_02.htm"
TITLE="23.2 Transaction Integrity and Execute Authority"
>Transaction Integrity and Execute Authority</A
><BR><A
CLASS="sect1"
HREF="ch23_03.htm"
TITLE="23.3 Module Validation and Dependency Management"
>Module Validation and Dependency Management</A
><BR><A
CLASS="sect1"
HREF="ch23_04.htm"
TITLE="23.4 Remote Procedure Calls"
>Remote Procedure Calls</A
><BR><A
CLASS="sect1"
HREF="ch23_05.htm#SQL2-CH-23-SECT-5.3"
TITLE="23.5 Managing Stored Objects with SQL*Plus"
>Managing Stored Objects with SQL*Plus</A
><BR><A
CLASS="sect1"
HREF="ch23_06.htm#SQL2-CH-23-SECT-6.3"
TITLE="23.6 Using SQL to Examine Stored Objects"
>Using SQL to Examine Stored Objects</A
><BR><A
CLASS="sect1"
HREF="ch23_07.htm#SQL2-CH-23-SECT-7.3"
TITLE="23.7 Encrypting Stored Code"
>Encrypting Stored Code</A
></P
><P
></P
></DIV
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="ch23-idx-410818-1"
></A
> <A
CLASS="indexterm"
NAME="ch23-idx-410818-2"
></A
> <A
CLASS="indexterm"
NAME="ch23-idx-410818-3"
></A
> <A
CLASS="indexterm"
NAME="ch23-idx-410818-4"
></A
><A
CLASS="indexterm"
NAME="ch23-idx-410818-5"
></A
>You will either embed PL/SQL programs in your client-side application, as happens in the Oracle Developer/2000 tools, or you will store your code in the Oracle database. </P
><P
CLASS="para"
>The term <EM
CLASS="emphasis"
>stored procedure</EM
> commonly refers to code that is stored in the database. Along with procedures, you can also store functions and packages, which can contain variables, cursors, record structures, etc. Whenever you hear the term stored procedures, you should think "stored objects." </P
><P
CLASS="para"
>There are a number of benefits to storing an object in the database: </P
><UL
CLASS="itemizedlist"
><LI
CLASS="listitem"
><P
CLASS="para"
><EM
CLASS="emphasis"
>The database manages dependencies between your stored objects.</EM
> For example, if a stored function relies on a certain table and that table's structure is changed, the status of that function is automatically set to INVALID and recompilation takes place, again automatically, when someone tries to execute that function. </P
></LI
><LI
CLASS="listitem"
><P
CLASS="para"
><EM
CLASS="emphasis"
>Any session with EXECUTE authority can execute the stored object.</EM
> Whether you are in an Oracle Forms application, a database trigger, or a batch process, that stored object is accessible as long as the database is accessible. The compiled code for the object is made available from the shared memory of the database instance. </P
></LI
><LI
CLASS="listitem"
><P
CLASS="para"
><EM
CLASS="emphasis"
>You can execute a module stored in another (remote) database.</EM
> This is known as a remote procedure call, or RPC. The ability to execute code on a different database means that you do not have to distribute application code to multiple databases in order to support distributed applications. </P
></LI
><LI
CLASS="listitem"
><P
CLASS="para"
><EM
CLASS="emphasis"
>Stored modules offer transaction-level security,</EM
> which goes well beyond the table- and column-level data and referential integrity offered by the database. With a stored module you can make sure that transactions involving multiple tables and different steps are always performed properly. This was actually one of the original motivations for the development of the PL/SQL language. </P
></LI
><LI
CLASS="listitem"
><P
CLASS="para"
><EM
CLASS="emphasis"
>Execution of a stored object shifts CPU load to the server.</EM
> Rather than run your code locally in a form or report, the stored object executes on the database server. Assuming that the server is sized to handle the load, this shift could improve overall application performance. This feature could be less of a benefit, of course, if the server is already heavily burdened. </P
></LI
></UL
><P
CLASS="para"
>Stored objects play an important role in today's client-server applications. The information in this chapter will help you make the best possible use of stored objects. </P
><DIV
CLASS="sect1"
><H2
CLASS="sect1"
><A
CLASS="title"
NAME="SQL2-CH-23-SECT-1"
>23.1 Executing Stored Code</A
></H2
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="ch23-idx-999129-1"
></A
><A
CLASS="indexterm"
NAME="ch23-idx-999129-2"
></A
><A
CLASS="indexterm"
NAME="ch23-idx-999129-3"
></A
>To execute a stored program unit, you must first store this program in the database. I'll explain this CREATE OR REPLACE step later in this chapter. For now, let's take a look at what happens when you run a stored PL/SQL program. </P
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="SQL2-CH-23-SECT-1.1"
>23.1.1 Executing Procedures</A
></H3
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="ch23-idx-999139-1"
></A
> <A
CLASS="indexterm"
NAME="ch23-idx-999139-2"
></A
> If you are working in SQL*Plus, you can execute programs directly from the command line. Use the <A
CLASS="indexterm"
NAME="AUTOID-21280"
></A
>EXECUTE command to run procedures as follows: </P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>SQL&gt; execute calc_totals</PRE
></BLOCKQUOTE
><P
CLASS="para"
>Notice that you do <EM
CLASS="emphasis"
>not</EM
> have to provide a semicolon. In fact, if you are going to use the EXECUTE command, the entire PL/SQL procedure call must fit on one physical line. As soon as you press the Enter key, the program executes. </P
><P
CLASS="para"
>You can also save a few microseconds (but accumulated over a whole year...) by providing only the minimum number of characters for the EXECUTE command: </P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>SQL&gt; exec calc_totals</PRE
></BLOCKQUOTE
><P
CLASS="para"
>When you are executing a procedure within a PL/SQL block, you do not use the EXECUTE syntax. You simply call the procedure, passing all necessary parameters within parentheses, and then terminate the line of code with a semicolon. Here is the syntax for calling the calc_totals procedure within a PL/SQL block: </P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>BEGIN
   calc_totals;
END;</PRE
></BLOCKQUOTE
><P
CLASS="para"
>You can also execute PL/SQL procedures in various "front-end" tools, such as Oracle Forms, PowerBuilder, and many 3GL languages like C and COBOL. The syntax for calling procedures (and functions) will vary from tool to tool. Within the Oracle Developer/2000 environment, you can call stored programs from within a "native," albeit outdated, version of PL/SQL (see <A
CLASS="xref"
HREF="appb_01.htm"
>Appendix B, <CITE
CLASS="appendix"
>Calling Stored Procedures from PL/SQL Version 1.1</CITE
></A
>, for more information). From a language like C, you will actually use a precompiler called Pro*C (from Oracle) and embed calls to PL/SQL programs within a SQL execution block like this: </P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>EXEC SQL EXECUTE
   BEGIN
      calc_totals;
   END;
END-EXEC;<A
CLASS="indexterm"
NAME="AUTOID-21292"
></A
>
<A
CLASS="indexterm"
NAME="AUTOID-21293"
></A
></PRE
></BLOCKQUOTE
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="SQL2-CH-23-SECT-1.2"
>23.1.2 Executing Functions</A
></H3
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="ch23-idx-999144-1"
></A
> <A
CLASS="indexterm"
NAME="ch23-idx-999144-2"
></A
> <A
CLASS="indexterm"
NAME="ch23-idx-999144-3"
></A
>The situation with functions is a little bit different. A function returns a value, so you can't just execute it directly. If you try to run a function as if it is a procedure, you will get the following error: </P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>SQL&gt; exec total_sales (1997)
begin total_sales (1997); end;
 *
ERROR at line 1:
ORA-06550: line 1, column 7:
PLS-00221: 'TOTAL_SALES' is not a procedure or is undefined
ORA-06550: line 1, column 7:
PL/SQL: Statement ignored</PRE
></BLOCKQUOTE
><P
CLASS="para"
>If you want to run a function simply to view its return value, you can execute it within a call to DBMS_OUTPUT.<A
CLASS="indexterm"
NAME="AUTOID-21309"
></A
>PUT_LINE as follows: </P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>SQL&gt; exec DBMS_OUTPUT.PUT_LINE (total_sales (1997))</PRE
></BLOCKQUOTE
><P
CLASS="para"
>Of course, this only works if the datatype of the return value of the function matches one of the datatypes supported by DBMS_OUTPUT: number, string and date. For anything else, you will need to execute the function within an anonymous block and then convert the value as necessary for display. In the following example, I declare a PL/SQL table of strings to retrieve the value from a function that returns all the foreign key information for a table. I then use a FOR loop to display that information: </P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>/* Employs PL/SQL 2.3 syntax for PL/SQL tables. */
DECLARE
   TYPE strtabtype IS TABLE OF VARCHAR2(100) INDEX BY BINARY_INTEGER;
   strtab strtabtype;
BEGIN
   strtab := primary_keys.for_table (`emp');
   IF strtab.COUNT &gt; 0
   THEN
      FOR tabrow IN strtab.FIRST .. strtab.LAST
      LOOP
         DBMS_OUTPUT.PUT_LINE (strtab.column_name);
      END LOOP;
   END IF;
END;
/</PRE
></BLOCKQUOTE
><P
CLASS="para"
>If I have saved this block in a file called myscript.sql, I can then execute this program and verify my function's behavior as follows: </P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>SQL&gt; @myscript</PRE
></BLOCKQUOTE
><BLOCKQUOTE
CLASS="note"
><P
CLASS="para"
><STRONG
>NOTE:</STRONG
> You might wonder why I placed my FOR loop inside an IF statement. Surely, if there were no rows, the strtab.FIRST method would return NULL and the loop would not execute. Yes and no. The FIRST and LAST methods do return NULL if the PL/SQL table is empty, but oddly enough, if your numeric FOR loop range evaluates to: </P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>FOR tabrow IN NULL .. NULL</PRE
></BLOCKQUOTE
><P
CLASS="para"
>then the PL/SQL runtime engine does enter the loop and try to process the body contents immediately. Then it raises an ORA-06502 VALUE_ERROR exception. So you really want to put some conditional logic around those FOR loops if you think the range endpoints might evaluate to NULL.1</P
></BLOCKQUOTE
><P
CLASS="para"
>Now that you've seen how to execute programs "from the outside," let's move inside and take a look at the architecture Oracle employs to deliver that code to you for execution.<A
CLASS="indexterm"
NAME="AUTOID-21321"
></A
> <A
CLASS="indexterm"
NAME="AUTOID-21322"
></A
> <A
CLASS="indexterm"
NAME="AUTOID-21323"
></A
> </P
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="SQL2-CH-23-SECT-1.3"
>23.1.3 Memory-Based Architecture of PL/SQL Code </A
></H3
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="ch23-idx-999149-1"
></A
><A
CLASS="indexterm"
NAME="ch23-idx-999149-2"
></A
><A
CLASS="indexterm"
NAME="ch23-idx-999149-3"
></A
>Whenever you start up an Oracle instance, a chunk (usually a rather large chunk) of memory is set aside for the System Global Area or SGA. Various Oracle processes manage this area of memory to do any of the following and more: </P
><UL
CLASS="itemizedlist"
><LI
CLASS="listitem"
><P
CLASS="para"
>Retrieve data from the database and deliver it to user processes (a PL/SQL procedure executing an explicit cursor, an Oracle Forms application querying records through a base table block, an Internet HTML page utilizing the Oracle WebServer interface, and so on). </P
></LI
><LI
CLASS="listitem"
><P
CLASS="para"
>Change data and then manage the transaction processing (commits and rollbacks) based on those changes. </P
></LI
><LI
CLASS="listitem"
><P
CLASS="para"
>Provide access to PL/SQL programs for execution in the server itself.</P
></LI
><LI
CLASS="listitem"
><P
CLASS="para"
>Transfer information between Oracle sessions using database pipes and database alerts. </P
></LI
></UL
><P
CLASS="para"
>When you use a stored program element (by executing a procedure or function or by making reference to a nonexecutable part of a package like a constant or cursor), it must be accessible from the SGA. So when you reference a program element, its compiled version is loaded into the SGA's shared pool, if it is not already present. Then any program data associated with that element is instantiated in your Program Global Area (PGA). At that point, the code can be executed or otherwise used in your session. </P
><P
CLASS="para"
>The next time a session with execute authority on that program element references it, it will already have been loaded and will therefore be available for execution. </P
><P
CLASS="para"
>When the SGA shared pool area fills up, code in the pool will be aged out (that is, room will be made for newly requested programs) on a least-recently-used basis. Programs which are used often will therefore most likely be available immediately upon request. You can also <EM
CLASS="emphasis"
>pin</EM
> programs into shared memory if you want to make certain that they will not be aged out. See <A
CLASS="xref"
HREF="ch25_01.htm"
>Chapter 25, <CITE
CLASS="chapter"
>Tuning PL/SQL Applications</CITE
></A
>, for more details on pinning. </P
><P
CLASS="para"
>Note that even if your compiled code is aged out of the SGA, any persistent, package-based data will remain available in your PGA. In other words, code may be swapped out of the SGA, but program data remains and persists for the duration of your session (or until you explicitly request a reinitialization of your schema).<A
CLASS="indexterm"
NAME="AUTOID-21351"
></A
> <A
CLASS="indexterm"
NAME="AUTOID-21352"
></A
> <A
CLASS="indexterm"
NAME="AUTOID-21353"
></A
> </P
><P
CLASS="para"
><A
CLASS="xref"
HREF="ch23_01.htm"
>Figure 23.1</A
> illustrates a number of the points covered in this section. </P
><H4
CLASS="figure"
><A
CLASS="title"
NAME="ch23-6-fm2xml"
>Figure 23.1: The System Global Area and Program Global Area</A
></H4
><IMG
CLASS="graphic"
SRC="figs/sql2.2301.gif"
ALT="Figure 23.1"></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="SQL2-CH-23-SECT-1.4"
>23.1.4 Key Concepts for Program Execution</A
></H3
><P
CLASS="para"
>Here are some basic principles to remember about program execution:</P
><UL
CLASS="itemizedlist"
><LI
CLASS="listitem"
><P
CLASS="para"
>Compiled PL/SQL code is shared among all users with <A
CLASS="indexterm"
NAME="AUTOID-21365"
></A
>EXECUTE authority on that code. Usually you will set up your environment so that one account or schema owns all the code for an application. You then grant EXECUTE authority to other users on that code. When any of those schemas runs this code, they are working with the same compiled code. Again, the data instantiated and manipulated within those programs is specific to each connection. </P
></LI
><LI
CLASS="listitem"
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="AUTOID-21370"
></A
>When you reference any individual element in a package, the entire package is loaded into shared memory. This can be both an advantage and a disadvantage. If you group together (in a package) functionality which is usually executed in "close proximity," then you are more likely to find the program you need in shared memory. This will speed up the completion of your program. </P
><P
CLASS="para"
>On the other hand, suppose that you build some very large packages which contain programs covering a disparate range of functionality. My application needs just one function out of the 100 procedures, functions, and cursors defined. Too bad! My SGA and my PGA must absorb the full punishment of the package (both the room needed for the shared, compiled code and all the package data instantiated in my PGA). </P
></LI
><LI
CLASS="listitem"
><P
CLASS="para"
>Program data <A
CLASS="indexterm"
NAME="AUTOID-21376"
></A
>instantiated within a program is stored in PGA for each user, rather than in the SGA. This means that each user has his own copy of program data. If a procedure declares a PL/SQL table and stuffs it full of 1000 strings, every user who executes that procedure has his own copy of that table and its 1000 strings. The nice thing about this characteristic is that gives you a fair amount of flexibility in finding the delicate balance between those ever-competing resources: CPU and memory. </P
></LI
></UL
><BLOCKQUOTE
CLASS="note"
><P
CLASS="para"
><STRONG
>NOTE:</STRONG
>  The architecture in the multi-threaded server (MTS) is a bit different, but the principle is the same: different users have their own copies of their program data.</P
></BLOCKQUOTE
><UL
CLASS="itemizedlist"
><LI
CLASS="listitem"
><P
CLASS="para"
><EM
CLASS="emphasis"
>Stored code runs under the authority of that code's owner, not that of the schema which is executing the code.</EM
> Suppose that you have stored all the code for your order entry application in the SYSTEM account (a very bad idea, as this example will illustrate). You then grant EXECUTE authority on that code to SCOTT, the traditional Oracle demonstration account, which has very little power outside of doing whatever it wants with the emp and dept tables. </P
><P
CLASS="para"
>Now suppose further that the delall procedure of the ordent package allows you to delete all orders from the application table. The intention is that only administrators will have the ability to do that. In fact, the only account that can delete from the orders table at all is SYSTEM. Once you have granted EXECUTE authority on ordent to SCOTT, however, all heck can very decidedly break loose. For when a user logged in as SCOTT executes the ordent.delall procedure, that user is, for that moment, acting as though she were connected to SYSTEM. All rows are removed from the orders table! </P
><P
CLASS="para"
>You must, consequently, very careful about (a) the authority of the schema owning your shared application code, and (b) to whom you grant EXECUTE authority on that code. </P
></LI
><LI
CLASS="listitem"
><P
CLASS="para"
><EM
CLASS="emphasis"
>Even though stored code runs under the authority of that code's owner, the USER function still returns the name of the schema currently connected to Oracle.</EM
> The USER function does not, in other words, return the name of the schema which owns the code in which the USER function was called.<A
CLASS="indexterm"
NAME="AUTOID-21390"
></A
> <A
CLASS="indexterm"
NAME="AUTOID-21391"
></A
> <A
CLASS="indexterm"
NAME="AUTOID-21392"
></A
> </P
></LI
></UL
></DIV
></DIV
></DIV
><DIV
CLASS="htmlnav"
><P
></P
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch22_07.htm#SQL2-CH-22-SECT-7.2"
TITLE="22.7 Tips for Parameter Design"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 22.7 Tips for Parameter Design"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="book"
HREF="index.htm"
TITLE="Oracle PL/SQL Programming, 2nd Edition"
><IMG
SRC="../gifs/txthome.gif"
ALT="Oracle PL/SQL Programming, 2nd Edition"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch23_02.htm"
TITLE="23.2 Transaction Integrity and Execute Authority"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 23.2 Transaction Integrity and Execute Authority"
BORDER="0"></A
></TD
></TR
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
>22.7 Tips for Parameter Design</TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="index"
HREF="index/idx_0.htm"
TITLE="Book Index"
><IMG
SRC="../gifs/index.gif"
ALT="Book Index"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
>23.2 Transaction Integrity and Execute Authority</TD
></TR
></TABLE
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"></DIV
><IMG SRC="../gifs/smnavbar.gif"
USEMAP="#map"
BORDER="0"
ALT="The Oracle Library Navigation">

<P><font size="-1">
<a href="../copyrght.htm#copy">Copyright (c) 2000</a> O'Reilly &amp; Associates. All rights reserved.
</font></P>

<MAP NAME="map">

<AREA SHAPE="RECT"
COORDS="0,0,35,30"
HREF="../index.htm"
ALT="Library Home">

<AREA SHAPE="RECT"
COORDS="40,0,95,30"
HREF="index.htm"
ALT="Oracle PL/SQL Programming, 2nd. Ed.">

<AREA SHAPE="RECT"
COORDS="100,0,200,30"
HREF="../guide8i/index.htm"
ALT="Guide to Oracle 8i Features">

<AREA SHAPE="RECT"
COORDS="205,0,245,30"
HREF="../bipack/index.htm"
ALT="Oracle Built-in Packages">

<AREA SHAPE="RECT"
COORDS="250,0,320,30"
HREF="../advprog/index.htm"
ALT="Advanced PL/SQL Programming with Packages">

<AREA SHAPE="RECT"
COORDS="325,0,420,30"
HREF="../webapp/index.htm"
ALT="Oracle Web Applications">

<AREA SHAPE="RECT"
COORDS="425,0,490,30"
HREF="../langpkt/index.htm"
ALT="Oracle PL/SQL Language Pocket Reference">

<AREA SHAPE="RECT"
COORDS="495,0,570,30"
HREF="../bipkt/index.htm"
ALT="Oracle PL/SQL Built-ins Pocket Reference">
</MAP>

</BODY
>
<!-- Mirrored from liso.cs.pusan.ac.kr by HTTrack Website Copier/3.x [XR&CO'2001] -->
</HTML
>
