<HTML
><HEAD
><TITLE
>[Chapter 6] 6.13 Working with Cursors </TITLE
><META
NAME="DC.Creator"
CONTENT="Steven Feuerstein &amp; Bill Pribyl"><META
NAME="DC.Date"
CONTENT="2000-04-29T18:57:24Z"><META
NAME="DC.Format"
CONTENT="text/html"
SCHEME="MIME"><META
NAME="DC.Identifier"
CONTENT="O'Reilly and Associates CD-ROM-1-56592-335-9E"><META
NAME="DC.Language"
CONTENT="en-US"><META
NAME="DC.Publisher"
CONTENT="O'Reilly &amp; Associates, Inc."><META
NAME="DC.Source"
CONTENT="1-56592-335-9E"
SCHEME="ISBN"><META
NAME="DC.Subject.Keyword"
CONTENT="Oracle PL/SQL"><META
NAME="DC.Title"
CONTENT="Oracle PL/SQL Programming, 2nd Edition"><META
NAME="DC.Type"
CONTENT="Text.Monograph"><META
NAME="generator"
CONTENT="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><LINK
REL="stylesheet"
TYPE="text/css"
HREF="../style/style1.css"><LINK
REV="made"
HREF="mailto:online-books@oreilly.com"
TITLE="Online Books Comments"><LINK
REL="up"
HREF="ch06_01.htm"
TITLE="6. Database Interaction and Cursors"><LINK
REL="prev"
HREF="ch06_12.htm#SQL2-CH-6-SECT-12.5"
TITLE="6.12 Cursor Variables"><LINK
REL="next"
HREF="ch07_01.htm"
TITLE="7. Loops"></HEAD
><BODY
><DIV
CLASS="htmlnav"
><H1
><IMG
SRC="gifs/smbanner.gif"
ALT="Oracle PL/SQL Programming, 2nd Edition"
USEMAP="#srchmap"
BORDER="0"></H1
><MAP
NAME="srchmap"
><AREA
SHAPE="RECT"
COORDS="0,0,466,65"
HREF="index.htm"
ALT="Oracle PL/SQL Programming, 2nd Edition"><AREA
SHAPE="RECT"
COORDS="467,0,514,18"
HREF="jobjects/fsearch.htm"
ALT="Search this book"></MAP
><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch06_12.htm#SQL2-CH-6-SECT-12.5"
TITLE="6.12 Cursor Variables"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 6.12 Cursor Variables"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><SPAN
CLASS="NAVTITLE"
><A
CLASS="chapter"
REL="up"
HREF="ch06_01.htm"
TITLE="6. Database Interaction and Cursors"
>Chapter 6<BR>Database Interaction and Cursors</A
></SPAN
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="chapter"
HREF="ch07_01.htm"
TITLE="7. Loops"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 7. Loops"
BORDER="0"></A
></TD
></TR
></TABLE
>&nbsp;<HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"></DIV
><DIV
CLASS="sect1"
><H2
CLASS="sect1"
><A
CLASS="title"
NAME="ch06-32443"
>6.13 Working with Cursors<A
CLASS="indexterm"
NAME="ch06-idx-999797-1"
></A
> </A
></H2
><P
CLASS="para"
>The following sections offer some practical applications of cursors. They are also designed to be programs you can put to use in your own environments with a few changes. The following files on the companion disk offer additional examples: </P
><DL
CLASS="variablelist"
><DT
CLASS="term"
><EM
CLASS="emphasis"
>varcurs.doc</EM
></DT
><DD
CLASS="listitem"
><P
CLASS="para"
>Explanation of how to emulate a cursor variable with local modules</P
></DD
><DT
CLASS="term"
><EM
CLASS="emphasis"
>unquein.doc</EM
></DT
><DD
CLASS="listitem"
><P
CLASS="para"
>Explanation of how to guarantee unique entry with cursors</P
></DD
><DT
CLASS="term"
><EM
CLASS="emphasis"
>unquein.ff</EM
></DT
><DD
CLASS="listitem"
><P
CLASS="para"
>Code required to guarantee unique entry with cursors</P
></DD
></DL
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="SQL2-CH-6-SECT-13.1"
>6.13.1 Validating Foreign Key Entry with Cursors</A
></H3
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="ch06-idx-104792-1"
></A
><A
CLASS="indexterm"
NAME="ch06-idx-104792-2"
></A
>A hefty percentage of our code can be taken up with validating the entry or selection of foreign keys. Consider the example of an application which maintains companies and employees of that company. On the employee maintenance screen, I want to let my user enter the name or partial name of the company that employs a person. If the user has identified a unique company, the form displays that name and stores the company ID on the null canvas. If the user's entry finds more than one match, a message is displayed. If no matches are found, the entry is rejected. </P
><P
CLASS="para"
>How should I implement this requirement? Well, the first thing that comes to the minds of many programmers is the following: </P
><BLOCKQUOTE
CLASS="blockquote"
><P
CLASS="para"
> Use a cursor which, with a single fetch, employs the COUNT built-in to compute the total number of companies that match the enemy. </P
></BLOCKQUOTE
><P
CLASS="para"
>This is, perhaps, the most obvious and direct solution to the requirement&nbsp;-- when it is phrased as follows: </P
><BLOCKQUOTE
CLASS="blockquote"
><P
CLASS="para"
> To find out if the user's entry has more than one match, count up just how many matches there are. </P
></BLOCKQUOTE
><DIV
CLASS="sect3"
><H4
CLASS="sect3"
><A
CLASS="title"
NAME="SQL2-CH-6-SECT-13.1.1"
>6.13.1.1 Inefficiency of group functions in cursors</A
></H4
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="AUTOID-6357"
></A
> <A
CLASS="indexterm"
NAME="AUTOID-6359"
></A
> <A
CLASS="indexterm"
NAME="AUTOID-6362"
></A
> There are, however, two serious problems with using the COUNT group function in my cursor: </P
><UL
CLASS="itemizedlist"
><LI
CLASS="listitem"
><P
CLASS="para"
><EM
CLASS="emphasis"
>The cursor does far too much work on my behalf.</EM
> By using COUNT, the cursor must scan through all records (or, I hope, those identified by the index) and count up the total number of matching records. Yet, all I really need to know is whether more than one company matched the entry. The performance penalty on this COUNT could be severe if the query goes out over a network or if the user's entry matches many of the records. What if a user entered a percent sign (<KBD
CLASS="command"
>%)</KBD
>? All records would then match. An application should never punish a user for poorly thought-out data entry. </P
></LI
><LI
CLASS="listitem"
><P
CLASS="para"
><EM
CLASS="emphasis"
>The cursor does not do enough for me.</EM
> If the COUNT-based query did return a value of 1, I would still have to go back to the company table and SELECT the ID for that company with another cursor. As a result, I would have coded the same query twice. This redundancy introduces maintenance and performance issues. </P
></LI
></UL
><P
CLASS="para"
>You should use COUNT only when you need to know or display the total number of matches for the user's entry. In this scenario, I don't really need that total; I need only to know if the total is greater than one (i.e., if there is more than one match). I can obtain this knowledge in a much more efficient and straightforward manner. </P
></DIV
><DIV
CLASS="sect3"
><H4
CLASS="sect3"
><A
CLASS="title"
NAME="SQL2-CH-6-SECT-13.1.2"
>6.13.1.2 Using multiple fetches more efficiently </A
></H4
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="AUTOID-6377"
></A
> Use a cursor that, with multiple fetches, determines if there are at least two companies that match the entry. This approach takes a bit more sophistication and thought, but is always a better performer and offers more flexibility to programmers. </P
><P
CLASS="para"
>To employ the multiple-fetch technique, take the following steps:</P
><OL
CLASS="orderedlist"
><LI
CLASS="listitem"
><P
CLASS="para"
>Declare a cursor which returns the company_id of all companies that match the value in the item: </P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>CURSOR company_cur
IS
   SELECT company_id
      FROM company
   WHERE company_name LIKE :company.company_name || '%';</PRE
></BLOCKQUOTE
></LI
><LI
CLASS="listitem"
><P
CLASS="para"
>Fetch twice against this cursor. If I can fetch twice successfully (company_cur%NOTFOUND is FALSE both times), that means that there is more than one match for the company name. If I can fetch only once before the %NOTFOUND cursor attribute returns FALSE, then I have found a unique match. If the very first fetch fails, then there is no match for the name. </P
></LI
><LI
CLASS="listitem"
><P
CLASS="para"
>Because my cursor returns the company_id, I do not have to perform another select once I have determined that I have a unique match. I simply use the ID that was provided in the first fetch. </P
></LI
></OL
><P
CLASS="para"
>The procedure in the following example supports the foreign key validation requirements with a double fetch against the cursor (it is coded for Oracle Forms, but can be adapted easily to other tool environments): </P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>/* Filename on companion disk: fkval.fp */
PROCEDURE validate_company
   (comp_name_inout IN OUT company.company_name%TYPE,
    comp_id_out OUT company.company_id%TYPE)
IS
   /* Cursor as explained above */
   CURSOR company_cur IS
      SELECT company_id, company_name
        FROM company
      WHERE company_name LIKE comp_name_inout || '%';

   /* Declare two records against the same cursor. */
   company_rec company_cur%ROWTYPE;
   duplicate_rec company_cur%ROWTYPE;
BEGIN
   /* Open and perform the first fetch against cursor. */
   OPEN company_cur;
   FETCH company_cur INTO company_rec;
   IF company_cur%NOTFOUND
   THEN
      /* Not even one match for this name. Display message and reject. */
      MESSAGE
         (' No company found with name like &quot;' ||
          comp_name_inout || '&quot;.');
      CLOSE company_cur;
      RAISE FORM_TRIGGER_FAILURE;
   ELSE
      /*
      || Found one match. Now FETCH again, but this time FETCH into the
      || duplicate_rec record. This is just a &quot;place holder&quot;. I don't
      || need to see the contents of the record. I just need to know if
      || I can successfully retrieve another record from the cursor.
      */
      FETCH company_cur INTO duplicate_rec;
      IF company_cur%NOTFOUND
      THEN
         /*
         || Found 1 match, but not second. Unique! Assign values to
         || the OUT parameters and close the cursor.
         */
         comp_id_out := company_rec.company_id;
         comp_name_inout := company_rec.company_name;
         CLOSE company_cur;
      ELSE
         /*
         || At least two matches found for this name. I don't know how
         || many more and I do not care. Reject with message.
         */
         MESSAGE (' More than one company matches name like &quot;' ||
                  comp_name_inout || '&quot;.');
         CLOSE company_cur;
         RAISE FORM_TRIGGER_FAILURE;
      END IF;
   END IF;
END;</PRE
></BLOCKQUOTE
><P
CLASS="para"
>Call this procedure in the When-Validate-Item trigger so that any changes to the company name can be validated. Here is an example of an actual call to validate_company: </P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>validate_company (:employee.company_name, :employee.company_id);</PRE
></BLOCKQUOTE
><P
CLASS="para"
>Notice that the first parameter (the company name) is an IN OUT parameter. I want to let the user enter just a part of the name and let the application figure out if that entry is enough to uniquely identify a company. If a single match is found, the form replaces the partial entry with the full name. </P
><P
CLASS="para"
>I believe strongly that we should design our applications to allow the user to enter the minimal amount of information necessary to get the job done. Our applications should be smart enough to take advantage of the dumb, brute strength of our CPUs in order to lift some of the burden off the user.<A
CLASS="indexterm"
NAME="AUTOID-6395"
></A
> <A
CLASS="indexterm"
NAME="AUTOID-6396"
></A
> </P
></DIV
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="SQL2-CH-6-SECT-13.2"
>6.13.2 Managing a Work Queue with SELECT FOR UPDATE</A
></H3
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="ch06-idx-104797-1"
></A
><A
CLASS="indexterm"
NAME="ch06-idx-104797-2"
></A
><A
CLASS="indexterm"
NAME="ch06-idx-104797-3"
></A
><A
CLASS="indexterm"
NAME="ch06-idx-104797-4"
></A
>As discussed earlier, a cursor with a SELECT...FOR UPDATE syntax issues a row-level lock on each row identified by the query. I encountered a very interesting application of this feature while helping a client resolve a problem. </P
><P
CLASS="para"
>The client offers a distribution package which tracks warehouse inventory. The work queue screen assigns warehouse floor packers their next tasks. The packer opens the screen and requests a task. The screen finds the next unassigned task and assigns it to the packer. A task might involve collecting various products together for shipment or returning products to the shelf. Completion of this task can take anywhere between one and ten minutes. When the task is completed, the packer will commit the changes or close the screen, performing an implicit commit. </P
><P
CLASS="para"
>For the amount of time it takes a packer to finish the task, that record must be tagged as "assigned" so that no other packer is given the same job to do. The first attempt at implementing this feature involved the use of a status flag. Whenever a packer was assigned a task, the flag on that task was set to ASSIGNED and the task record committed. The screen then excludes that task from the work queue. The problem with this approach is that the status had to be committed to the database so that other users could see the new status. This commit not only interrupted the actual transaction in the screen, but also created a number of headaches: </P
><UL
CLASS="itemizedlist"
><LI
CLASS="listitem"
><P
CLASS="para"
>What if the user never completes the task and exits the screen? The form would have to detect this scenario (and there are generally many ways to cancel/exit) and update the status flag to AVAILABLE, which involves yet another commit. </P
></LI
><LI
CLASS="listitem"
><P
CLASS="para"
>Worse yet, what if the database goes down while the user is performing the task? That task will disappear from the work queue until manual intervention resets the status. </P
></LI
></UL
><P
CLASS="para"
>My client needed a mechanism by which the task could be flagged as UNAVAILABLE without having to perform commits, build complex checks into the form, and develop crash-recovery guidelines. They needed a program that would step through each of the open tasks in priority until it found a task that was unassigned. The SELECT...FOR UPDATE construct proved to be the perfect answer, in combination with two queries against the task table&nbsp;-- an explicit cursor and an implicit cursor using a FOR UPDATE clause. </P
><P
CLASS="para"
>The function in the following example returns the primary key of the next unassigned task using a cursor against the task table to look through all open tasks in priority order. The tasks returned by this first cursor include those which are assigned but "in process" (and should therefore not be assigned again). For each task retrieved from this cursor, the function then tries to obtain a lock on that record using the FOR UPDATE...NOWAIT clause. If the SELECT statement cannot obtain a lock, it means that task is being handled by another packer. So the function fetches the next task and tries, once again, to obtain a lock, continuing on in this fashion until a free task is found or the last task is fetched. </P
><P
CLASS="para"
>Notice that the next_task function does not perform any commits, so it doesn't have to do any kind of complicated clean-up. It simply requests the lock and returns the primary key for that task. The calling program can then offer this task to the packer who will issue the commit, freeing the lock, when she or he is done with the task: </P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>/* Filename on companion disk: selupdt.sf */
FUNCTION next_task RETURN task.task_id%TYPE
IS
   /* Cursor of all open tasks, assigned and unassigned */
   CURSOR task_cur IS
      SELECT task_id
        FROM task
       WHERE task_status = 'OPEN'
       ORDER BY task_priority, date_entered DESC;

   /* The record for the above cursor */
   task_rec task_cur%ROWTYPE;
   /*
   || An exception for error ORA-00054:
   || &quot;resource busy and acquire with NOWAIT specified&quot;
   */
   record_locked EXCEPTION
   PRAGMA EXCEPTION_INIT (record_locked, -54);
   /*
   || Variables which determine whether function should continue
   || to loop through the cursor's records.
   */
   found_unassigned_task BOOLEAN := FALSE;
   more_tasks BOOLEAN := TRUE;

   /* The primary key of the unassigned task to be returned */
   return_value task.task_id%TYPE := NULL;
BEGIN
   /* Open the cursor and start up the loop through its records */
   OPEN task_cur;
   WHILE NOT found_unassigned_task AND more_tasks
   LOOP
      /* Fetch the next record. If nothing found, we are done */
      FETCH task_cur INTO task_rec;
      more_tasks := task_cur%FOUND;
      IF more_tasks
      THEN
         /*
         || A record was fetched. Create an anonymous block within
         || the function so that I can trap the record_locked
         || exception and still stay inside the cursor loop.
         */
         BEGIN
            /* Try to get a lock on the current task */
            SELECT task_id INTO return_value
              FROM task
              WHERE task_id = task_rec.task_id
             FOR UPDATE OF task_id NOWAIT;
            /*
            || If I get to this line then I was able to get a lock
            || on this particular task. Notice that the SELECT INTO
            || has therefore already set the function's return value.
            || Now set the Boolean to stop the loop.
            */
            found_unassigned_task := TRUE;
         EXCEPTION
            WHEN record_locked
            THEN
               /* Record was already locked, so just keep on going */
               NULL;
         END;
      END IF;
   END LOOP;
   /*
   || Return the task id. Notice that if an unassigned task was NOT
   || found, I will simply return NULL per declaration default.
   */
   CLOSE task_cur;
   RETURN return_value;
EXCEPTION
   /*
   || General exception handler for the function: if an error occurred,
   || then close the cursor and return NULL for the task ID.
   */
   WHEN OTHERS
   THEN
      CLOSE task_cur;
      RETURN NULL;
END; <A
CLASS="indexterm"
NAME="AUTOID-6420"
></A
>
<A
CLASS="indexterm"
NAME="AUTOID-6421"
></A
>
<A
CLASS="indexterm"
NAME="AUTOID-6422"
></A
>
<A
CLASS="indexterm"
NAME="AUTOID-6423"
></A
>
<A
CLASS="indexterm"
NAME="AUTOID-6424"
></A
></PRE
></BLOCKQUOTE
></DIV
></DIV
><DIV
CLASS="htmlnav"
><P
></P
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch06_12.htm#SQL2-CH-6-SECT-12.5"
TITLE="6.12 Cursor Variables"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 6.12 Cursor Variables"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="book"
HREF="index.htm"
TITLE="Oracle PL/SQL Programming, 2nd Edition"
><IMG
SRC="../gifs/txthome.gif"
ALT="Oracle PL/SQL Programming, 2nd Edition"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="chapter"
HREF="ch07_01.htm"
TITLE="7. Loops"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 7. Loops"
BORDER="0"></A
></TD
></TR
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
>6.12 Cursor Variables</TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="index"
HREF="index/idx_0.htm"
TITLE="Book Index"
><IMG
SRC="../gifs/index.gif"
ALT="Book Index"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
>7. Loops</TD
></TR
></TABLE
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"></DIV
><IMG SRC="../gifs/smnavbar.gif"
USEMAP="#map"
BORDER="0"
ALT="The Oracle Library Navigation">

<P><font size="-1">
<a href="../copyrght.htm#copy">Copyright (c) 2000</a> O'Reilly &amp; Associates. All rights reserved.
</font></P>

<MAP NAME="map">

<AREA SHAPE="RECT"
COORDS="0,0,35,30"
HREF="../index.htm"
ALT="Library Home">

<AREA SHAPE="RECT"
COORDS="40,0,95,30"
HREF="index.htm"
ALT="Oracle PL/SQL Programming, 2nd. Ed.">

<AREA SHAPE="RECT"
COORDS="100,0,200,30"
HREF="../guide8i/index.htm"
ALT="Guide to Oracle 8i Features">

<AREA SHAPE="RECT"
COORDS="205,0,245,30"
HREF="../bipack/index.htm"
ALT="Oracle Built-in Packages">

<AREA SHAPE="RECT"
COORDS="250,0,320,30"
HREF="../advprog/index.htm"
ALT="Advanced PL/SQL Programming with Packages">

<AREA SHAPE="RECT"
COORDS="325,0,420,30"
HREF="../webapp/index.htm"
ALT="Oracle Web Applications">

<AREA SHAPE="RECT"
COORDS="425,0,490,30"
HREF="../langpkt/index.htm"
ALT="Oracle PL/SQL Language Pocket Reference">

<AREA SHAPE="RECT"
COORDS="495,0,570,30"
HREF="../bipkt/index.htm"
ALT="Oracle PL/SQL Built-ins Pocket Reference">
</MAP>

</BODY
>
<!-- Mirrored from liso.cs.pusan.ac.kr by HTTrack Website Copier/3.x [XR&CO'2001] -->
</HTML
>
