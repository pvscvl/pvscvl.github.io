<HTML
><HEAD
><TITLE
>[Chapter 6] Database Interaction and Cursors</TITLE
><META
NAME="DC.Creator"
CONTENT="Steven Feuerstein &amp; Bill Pribyl"><META
NAME="DC.Date"
CONTENT="2000-04-29T18:55:56Z"><META
NAME="DC.Format"
CONTENT="text/html"
SCHEME="MIME"><META
NAME="DC.Identifier"
CONTENT="O'Reilly and Associates CD-ROM-1-56592-335-9E"><META
NAME="DC.Language"
CONTENT="en-US"><META
NAME="DC.Publisher"
CONTENT="O'Reilly &amp; Associates, Inc."><META
NAME="DC.Source"
CONTENT="1-56592-335-9E"
SCHEME="ISBN"><META
NAME="DC.Subject.Keyword"
CONTENT="Oracle PL/SQL"><META
NAME="DC.Title"
CONTENT="Oracle PL/SQL Programming, 2nd Edition"><META
NAME="DC.Type"
CONTENT="Text.Monograph"><META
NAME="generator"
CONTENT="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><LINK
REL="stylesheet"
TYPE="text/css"
HREF="../style/style1.css"><LINK
REV="made"
HREF="mailto:online-books@oreilly.com"
TITLE="Online Books Comments"><LINK
REL="up"
HREF="part02.htm"
TITLE="II. PL/SQL Language Elements "><LINK
REL="prev"
HREF="ch05_02.htm#SQL2-CH-5-SECT-2.1"
TITLE="5.2 Sequential Control Statements"><LINK
REL="next"
HREF="ch06_02.htm#SQL2-CH-6-SECT-2.2"
TITLE="6.2 Cursors in PL/SQL"></HEAD
><BODY
><DIV
CLASS="htmlnav"
><H1
><IMG
SRC="gifs/smbanner.gif"
ALT="Oracle PL/SQL Programming, 2nd Edition"
USEMAP="#srchmap"
BORDER="0"></H1
><MAP
NAME="srchmap"
><AREA
SHAPE="RECT"
COORDS="0,0,466,65"
HREF="index.htm"
ALT="Oracle PL/SQL Programming, 2nd Edition"><AREA
SHAPE="RECT"
COORDS="467,0,514,18"
HREF="jobjects/fsearch.htm"
ALT="Search this book"></MAP
><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch05_02.htm#SQL2-CH-5-SECT-2.1"
TITLE="5.2 Sequential Control Statements"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 5.2 Sequential Control Statements"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><SPAN
CLASS="NAVTITLE"
>Chapter 6</SPAN
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch06_02.htm#SQL2-CH-6-SECT-2.2"
TITLE="6.2 Cursors in PL/SQL"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 6.2 Cursors in PL/SQL"
BORDER="0"></A
></TD
></TR
></TABLE
>&nbsp;<HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"></DIV
><DIV
CLASS="chapter"
><H1
CLASS="chapter"
><A
CLASS="title"
NAME="SQL2-CH-6"
>6. Database Interaction and Cursors</A
></H1
><DIV
CLASS="htmltoc"
><P
><B
>Contents:</B
><BR><A
CLASS="sect1"
HREF="#SQL2-CH-6-SECT-1"
TITLE="6.1 Transaction Management"
>Transaction Management</A
><BR><A
CLASS="sect1"
HREF="ch06_02.htm#SQL2-CH-6-SECT-2.2"
TITLE="6.2 Cursors in PL/SQL"
>Cursors in PL/SQL</A
><BR><A
CLASS="sect1"
HREF="ch06_03.htm#SQL2-CH-6-SECT-3.1"
TITLE="6.3 Implicit and Explicit Cursors"
>Implicit and Explicit Cursors</A
><BR><A
CLASS="sect1"
HREF="ch06_04.htm#SQL2-CH-6-SECT-4.3"
TITLE="6.4 Declaring Cursors"
>Declaring Cursors</A
><BR><A
CLASS="sect1"
HREF="ch06_05.htm"
TITLE="6.5 Opening Cursors"
>Opening Cursors</A
><BR><A
CLASS="sect1"
HREF="ch06_06.htm"
TITLE="6.6 Fetching from Cursors"
>Fetching from Cursors</A
><BR><A
CLASS="sect1"
HREF="ch06_07.htm"
TITLE="6.7 Column Aliases in Cursors"
>Column Aliases in Cursors</A
><BR><A
CLASS="sect1"
HREF="ch06_08.htm"
TITLE="6.8 Closing Cursors"
>Closing Cursors</A
><BR><A
CLASS="sect1"
HREF="ch06_09.htm#SQL2-CH-6-SECT-9.1"
TITLE="6.9 Cursor Attributes"
>Cursor Attributes</A
><BR><A
CLASS="sect1"
HREF="ch06_10.htm#SQL2-CH-6-SECT-10.2"
TITLE="6.10 Cursor Parameters"
>Cursor Parameters</A
><BR><A
CLASS="sect1"
HREF="ch06_11.htm#SQL2-CH-6-SECT-11.1"
TITLE="6.11 SELECT FOR UPDATE in Cursors"
>SELECT FOR UPDATE in Cursors</A
><BR><A
CLASS="sect1"
HREF="ch06_12.htm#SQL2-CH-6-SECT-12.5"
TITLE="6.12 Cursor Variables"
>Cursor Variables</A
><BR><A
CLASS="sect1"
HREF="ch06_13.htm#SQL2-CH-6-SECT-13.2"
TITLE="6.13 Working with Cursors "
>Working with Cursors </A
></P
><P
></P
></DIV
><P
CLASS="para"
>PL/SQL is tightly integrated with the Oracle database via the SQL language. From within PL/SQL, you can execute any DML (data manipulation language) statements, including INSERTs, UPDATEs, DELETEs, and, of course, queries. You can also join multiple SQL statements together logically as a transaction, so that they are either saved ("committed" in SQL parlance) together or rejected in their entirety (rolled back). This chapter examines the SQL statements available inside PL/SQL to manage transactions. It then moves on to cursors, which give you a way to fetch and process database information in your PL/SQL program. </P
><DIV
CLASS="sect1"
><H2
CLASS="sect1"
><A
CLASS="title"
NAME="SQL2-CH-6-SECT-1"
>6.1 Transaction Management</A
></H2
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="ch06-idx-999629-1"
></A
> The Oracle RDBMS provides a very robust transaction model, as you might expect for a relational database. You (or more precisely, your application code) determine what constitutes a transaction, the logical unit of work that must be either saved together with a COMMIT statement or rolled back together with a ROLLBACK statement. A transaction begins implicitly with the first SQL statement issued since the last COMMIT or ROLLBACK (or with the start of a session). </P
><P
CLASS="para"
>PL/SQL provides the following statements for transaction management:</P
><DL
CLASS="variablelist"
><DT
CLASS="term"
>COMMIT</DT
><DD
CLASS="listitem"
><P
CLASS="para"
>Saves all outstanding changes since the last COMMIT or ROLLBACK and releases all locks. </P
></DD
><DT
CLASS="term"
>ROLLBACK</DT
><DD
CLASS="listitem"
><P
CLASS="para"
>Erases all outstanding changes since the last COMMIT or ROLLBACK and releases all locks. </P
></DD
><DT
CLASS="term"
>ROLLBACK TO SAVEPOINT</DT
><DD
CLASS="listitem"
><P
CLASS="para"
>Erases all changes made since the specified savepoint was established. </P
></DD
><DT
CLASS="term"
>SAVEPOINT</DT
><DD
CLASS="listitem"
><P
CLASS="para"
>Establishes a savepoint, which then allows you to perform partial ROLLBACKs. </P
></DD
><DT
CLASS="term"
>SET TRANSACTION</DT
><DD
CLASS="listitem"
><P
CLASS="para"
>Allows you to begin a read-only or read-write session, establish an isolation level, or assign the current transaction to a specified rollback segment. </P
></DD
><DT
CLASS="term"
>LOCK TABLE</DT
><DD
CLASS="listitem"
><P
CLASS="para"
>Allows you to lock an entire database table in the specified mode. This overrides the default row-level locking usually applied to a table. </P
></DD
></DL
><P
CLASS="para"
>These statements are explained in more detail in the following sections. </P
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="SQL2-CH-6-SECT-1.1"
>6.1.1 The COMMIT Statement</A
></H3
><P
CLASS="para"
>When you <A
CLASS="indexterm"
NAME="ch06-idx-999640-1"
></A
>COMMIT, you make permanent any changes made by your session to the database in the current transaction. Once you commit, your changes will be visible to other Oracle sessions or users. The syntax for the COMMIT statement is: </P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>	COMMIT [WORK] [COMMENT text];</PRE
></BLOCKQUOTE
><P
CLASS="para"
>The <A
CLASS="indexterm"
NAME="AUTOID-4904"
></A
>WORK keyword is optional and can be used to improve readability. </P
><P
CLASS="para"
>The <A
CLASS="indexterm"
NAME="AUTOID-4907"
></A
> <A
CLASS="indexterm"
NAME="AUTOID-4909"
></A
> <A
CLASS="indexterm"
NAME="AUTOID-4912"
></A
>COMMENT keyword specifies a comment which is then associated with the current transaction. The text must be a quoted literal and can be no more than 50 characters in length. The COMMENT text is usually employed with distributed transactions. This text can be handy for examining and resolving in-doubt transactions within a two-phase commit framework. It is stored in the data dictionary along with the transaction ID. </P
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="AUTOID-4916"
></A
> <A
CLASS="indexterm"
NAME="AUTOID-4919"
></A
>Note that COMMIT releases any row and table locks issued in your session, such as with a SELECT FOR UPDATE statement. It also erases any <A
CLASS="indexterm"
NAME="AUTOID-4923"
></A
>savepoints issued since the last COMMIT or ROLLBACK. </P
><P
CLASS="para"
>Once you COMMIT your changes, you cannot roll them back with a ROLLBACK statement. </P
><P
CLASS="para"
>The following statements are all valid uses of the COMMIT:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>COMMIT;
COMMIT WORK;
COMMIT COMMENT 'maintaining account balance'.</PRE
></BLOCKQUOTE
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="SQL2-CH-6-SECT-1.2"
>6.1.2 The ROLLBACK Statement</A
></H3
><P
CLASS="para"
>When you <A
CLASS="indexterm"
NAME="ch06-idx-999654-1"
></A
><A
CLASS="indexterm"
NAME="ch06-idx-999654-2"
></A
>ROLLBACK, you undo some or all changes made by your session to the database in the current transaction. Why would you want to erase changes? From an <I
CLASS="foreignphrase"
>ad hoc</I
> SQL standpoint, the ROLLBACK gives you a way to erase mistakes you might have made, as in: </P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>	DELETE FROM orders;</PRE
></BLOCKQUOTE
><P
CLASS="para"
>"No, no! I meant to delete only the orders before May 1995!" No problem, just issue ROLLBACK. From an application coding standpoint, ROLLBACK is important because it allows you to clean up or restart from a "clean state" when a problem occurs. </P
><P
CLASS="para"
>The syntax for the ROLLBACK statement is:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>	ROLLBACK [WORK] [TO [SAVEPOINT] savepoint_name];</PRE
></BLOCKQUOTE
><P
CLASS="para"
>There are two basic ways to use ROLLBACK: without parameters or with the TO clause to indicate a savepoint at which the ROLLBACK should stop. </P
><P
CLASS="para"
>The parameterless ROLLBACK undoes all outstanding changes in your transaction. </P
><P
CLASS="para"
>The <A
CLASS="indexterm"
NAME="AUTOID-4945"
></A
>ROLLBACK TO version allows you to undo all changes and release all acquired locks which were issued since the savepoint identified by savepoint_name was marked (see the next section on the SAVEPOINT statement for more information on how to mark a savepoint in your application). </P
><P
CLASS="para"
>The savepoint_name is an undeclared Oracle identifier. It cannot be a literal (enclosed in quotes) or variable name. </P
><P
CLASS="para"
>All of the following uses of ROLLBACK are valid:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>ROLLBACK;
ROLLBACK WORK;
ROLLBACK TO begin_cleanup;</PRE
></BLOCKQUOTE
><P
CLASS="para"
>All of the following uses of ROLLBACK are invalid:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>ROLLBACK SAVEPOINT;
  -- ORA-02181: invalid option to ROLLBACK WORK
  -- Must use TO keyword before SAVEPOINT.
ROLLBACK WORK TO;
  -- ORA-02182: save point name expected
  -- Must specify savepoint name.
ROLLBACK TO SAVEPOINT 'favorite_movies';
  -- ORA-03001: Unimplemented feature
  -- Savepoint cannot be in quotes.</PRE
></BLOCKQUOTE
><P
CLASS="para"
>When you roll back to a specific savepoint, all savepoints issued after the specified savepoint_name are erased. The savepoint to which you roll back is not, however, erased. This means that you can restart your transaction from that point and, if necessary, roll back to that same savepoint if another error occurs. </P
><P
CLASS="para"
>Immediately before you execute an INSERT, UPDATE, or DELETE, PL/SQL implicitly generates a savepoint. If your DML statement then fails, a rollback is automatically performed to that implicit savepoint. In this way, only that last DML statement is undone. </P
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="SQL2-CH-6-SECT-1.3"
>6.1.3 The SAVEPOINT Statement</A
></H3
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="AUTOID-4958"
></A
> <A
CLASS="indexterm"
NAME="AUTOID-4960"
></A
> <A
CLASS="indexterm"
NAME="AUTOID-4963"
></A
> <A
CLASS="indexterm"
NAME="AUTOID-4966"
></A
> SAVEPOINT gives a name to and marks a point in the processing of your transaction. This marker allows you to ROLLBACK TO that point, erasing any changes and releasing any locks issued after that savepoint, but preserving any changes and locks which occurred <EM
CLASS="emphasis"
>before</EM
> you marked the savepoint. </P
><P
CLASS="para"
>The syntax for the SAVEPOINT statement is:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>SAVEPOINT savepoint_name;</PRE
></BLOCKQUOTE
><P
CLASS="para"
>where savepoint_name is an undeclared identifier. This means that it must conform to the rules for an Oracle identifier (up to 30 characters in length, starting with a letter, containing letters, numbers and #, $, or _ ), but that you do not need to (nor can you) declare that identifier. </P
><P
CLASS="para"
>Savepoints are not scoped to PL/SQL blocks. If you reuse a savepoint name within the current transaction, that savepoint is "moved" from its original position to the current point in the transaction, regardless of the procedure, function, or anonymous block in which the SAVEPOINT statements are executed. As a corollary, if you issue a SAVEPOINT inside a recursive program, a new SAVEPOINT is executed at each level of recursion, but you can only roll back to the most recently marked savepoint. </P
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="SQL2-CH-6-SECT-1.4"
>6.1.4 The SET TRANSACTION Statement</A
></H3
><P
CLASS="para"
>The <A
CLASS="indexterm"
NAME="ch06-idx-999662-1"
></A
>SET TRANSACTION statement allows you to begin a read-only or read-write session, establish an isolation level, or assign the current transaction to a specified rollback segment. This statement must be the first SQL statement processed in a transaction and it can appear only once. This statement comes in the following four flavors: </P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>SET TRANSACTION READ ONLY;</PRE
></BLOCKQUOTE
><P
CLASS="para"
>This version defines the current transaction as <A
CLASS="indexterm"
NAME="AUTOID-4982"
></A
> <A
CLASS="indexterm"
NAME="AUTOID-4984"
></A
> read-only. In a read-only transaction, all subsequent queries only see those changes which were committed before the transaction began (providing a read-consistent view across tables and queries). This statement is useful when you are executing long-running, multiple query reports and you want to make sure that the data used in the report is consistent: </P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>SET TRANSACTION READ WRITE;</PRE
></BLOCKQUOTE
><P
CLASS="para"
>This version defines the current transaction as read-write: </P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>SET TRANSACTION ISOLATION LEVEL SERIALIZABLE|READ COMMITTED;</PRE
></BLOCKQUOTE
><P
CLASS="para"
>This version defines how transactions that modify the database should be handled. <A
CLASS="indexterm"
NAME="AUTOID-4991"
></A
><A
CLASS="indexterm"
NAME="AUTOID-4993"
></A
> <A
CLASS="indexterm"
NAME="AUTOID-4995"
></A
>You can specify a serializable or read-committed isolation level. When you specify SERIALIZABLE, a data manipulation statement (update, insert, delete) which attempts to modify a table already modified in an uncommitted transaction will fail. To execute this command, you must set the database initialization parameter COMPATIBLE to 7.3.0 or higher. </P
><P
CLASS="para"
>If you specify READ COMMITTED, a DML which requires row-level locks held by another transaction will wait until those row locks are released: </P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>SET TRANSACTION USE ROLLBACK SEGMENT rollback_segname;</PRE
></BLOCKQUOTE
><P
CLASS="para"
>This version assigns the current transaction to the specified rollback segment and establishes the transaction as read-write. This statement cannot be used in conjunction with SET TRANSACTION READ ONLY.<A
CLASS="indexterm"
NAME="AUTOID-5000"
></A
> </P
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="SQL2-CH-6-SECT-1.5"
>6.1.5 The LOCK TABLE Statement</A
></H3
><P
CLASS="para"
>This <A
CLASS="indexterm"
NAME="ch06-idx-999668-1"
></A
><A
CLASS="indexterm"
NAME="ch06-idx-999668-2"
></A
> statement allows you to lock an entire database table with the specified lock mode. By doing this, you can share or deny access to that table while you perform operations against it. The syntax for this statement is: </P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>LOCK TABLE table_reference_list IN lock_mode MODE [NOWAIT];</PRE
></BLOCKQUOTE
><P
CLASS="para"
>where table_reference_list is a list of one or more table references (identifying either a local table/view or a remote entity through a database link), and lock_mode is the mode of the lock, which can be one of the following: </P
><TABLE
CLASS="simplelist"
BORDER="0"
><TR
><TD
CLASS="member"
>ROW SHARE</TD
></TR
><TR
><TD
CLASS="member"
>ROW EXCLUSIVE</TD
></TR
><TR
><TD
CLASS="member"
>SHARE UPDATE</TD
></TR
><TR
><TD
CLASS="member"
>SHARE</TD
></TR
><TR
><TD
CLASS="member"
>SHARE ROW EXCLUSIVE</TD
></TR
><TR
><TD
CLASS="member"
>EXCLUSIVE</TD
></TR
></TABLE
><P
CLASS="para"
>If you specify the <A
CLASS="indexterm"
NAME="AUTOID-5018"
></A
>NOWAIT keyword, Oracle will not wait for the lock if the table has already been locked by another user. If you leave out the NOWAIT keyword, Oracle waits until the table is available (and there is no set limit on how long Oracle will wait). Locking a table never stops other users from querying or reading the table. </P
><P
CLASS="para"
>The following LOCK TABLE statements show valid variations:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>LOCK TABLE emp IN ROW EXCLUSIVE MODE;
LOCK TABLE emp, dept IN SHARE MODE NOWAIT;
LOCK TABLE scott.emp@new_york IN SHARE UPDATE MODE;</PRE
></BLOCKQUOTE
><P
CLASS="para"
>Now that you know the "macro" commands for managing transactions from within a PL/SQL application, let's move on to cursors; you will use cursors (in one form or another) to create transactions (i.e., specify the SQL statements which make up the transaction).<A
CLASS="indexterm"
NAME="AUTOID-5023"
></A
> <A
CLASS="indexterm"
NAME="AUTOID-5024"
></A
> <A
CLASS="indexterm"
NAME="AUTOID-5025"
></A
> </P
></DIV
></DIV
></DIV
><DIV
CLASS="htmlnav"
><P
></P
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch05_02.htm#SQL2-CH-5-SECT-2.1"
TITLE="5.2 Sequential Control Statements"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 5.2 Sequential Control Statements"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="book"
HREF="index.htm"
TITLE="Oracle PL/SQL Programming, 2nd Edition"
><IMG
SRC="../gifs/txthome.gif"
ALT="Oracle PL/SQL Programming, 2nd Edition"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch06_02.htm#SQL2-CH-6-SECT-2.2"
TITLE="6.2 Cursors in PL/SQL"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 6.2 Cursors in PL/SQL"
BORDER="0"></A
></TD
></TR
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
>5.2 Sequential Control Statements</TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="index"
HREF="index/idx_0.htm"
TITLE="Book Index"
><IMG
SRC="../gifs/index.gif"
ALT="Book Index"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
>6.2 Cursors in PL/SQL</TD
></TR
></TABLE
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"></DIV
><IMG SRC="../gifs/smnavbar.gif"
USEMAP="#map"
BORDER="0"
ALT="The Oracle Library Navigation">

<P><font size="-1">
<a href="../copyrght.htm#copy">Copyright (c) 2000</a> O'Reilly &amp; Associates. All rights reserved.
</font></P>

<MAP NAME="map">

<AREA SHAPE="RECT"
COORDS="0,0,35,30"
HREF="../index.htm"
ALT="Library Home">

<AREA SHAPE="RECT"
COORDS="40,0,95,30"
HREF="index.htm"
ALT="Oracle PL/SQL Programming, 2nd. Ed.">

<AREA SHAPE="RECT"
COORDS="100,0,200,30"
HREF="../guide8i/index.htm"
ALT="Guide to Oracle 8i Features">

<AREA SHAPE="RECT"
COORDS="205,0,245,30"
HREF="../bipack/index.htm"
ALT="Oracle Built-in Packages">

<AREA SHAPE="RECT"
COORDS="250,0,320,30"
HREF="../advprog/index.htm"
ALT="Advanced PL/SQL Programming with Packages">

<AREA SHAPE="RECT"
COORDS="325,0,420,30"
HREF="../webapp/index.htm"
ALT="Oracle Web Applications">

<AREA SHAPE="RECT"
COORDS="425,0,490,30"
HREF="../langpkt/index.htm"
ALT="Oracle PL/SQL Language Pocket Reference">

<AREA SHAPE="RECT"
COORDS="495,0,570,30"
HREF="../bipkt/index.htm"
ALT="Oracle PL/SQL Built-ins Pocket Reference">
</MAP>

</BODY
>
<!-- Mirrored from liso.cs.pusan.ac.kr by HTTrack Website Copier/3.x [XR&CO'2001] -->
</HTML
>
