<HTML
><HEAD
><TITLE
>[Chapter 19] 19.8 Collections Housekeeping</TITLE
><META
NAME="DC.Creator"
CONTENT="Steven Feuerstein &amp; Bill Pribyl"><META
NAME="DC.Date"
CONTENT="2000-04-29T19:09:01Z"><META
NAME="DC.Format"
CONTENT="text/html"
SCHEME="MIME"><META
NAME="DC.Identifier"
CONTENT="O'Reilly and Associates CD-ROM-1-56592-335-9E"><META
NAME="DC.Language"
CONTENT="en-US"><META
NAME="DC.Publisher"
CONTENT="O'Reilly &amp; Associates, Inc."><META
NAME="DC.Source"
CONTENT="1-56592-335-9E"
SCHEME="ISBN"><META
NAME="DC.Subject.Keyword"
CONTENT="Oracle PL/SQL"><META
NAME="DC.Title"
CONTENT="Oracle PL/SQL Programming, 2nd Edition"><META
NAME="DC.Type"
CONTENT="Text.Monograph"><META
NAME="generator"
CONTENT="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><LINK
REL="stylesheet"
TYPE="text/css"
HREF="../style/style1.css"><LINK
REV="made"
HREF="mailto:online-books@oreilly.com"
TITLE="Online Books Comments"><LINK
REL="up"
HREF="ch19_01.htm"
TITLE="19. Nested Tables and VARRAYs"><LINK
REL="prev"
HREF="ch19_07.htm"
TITLE="19.7 Example: PL/SQL-to-Server Integration"><LINK
REL="next"
HREF="ch19_09.htm"
TITLE="19.9 Which Collection Type Should I Use?"></HEAD
><BODY
><DIV
CLASS="htmlnav"
><H1
><IMG
SRC="gifs/smbanner.gif"
ALT="Oracle PL/SQL Programming, 2nd Edition"
USEMAP="#srchmap"
BORDER="0"></H1
><MAP
NAME="srchmap"
><AREA
SHAPE="RECT"
COORDS="0,0,466,65"
HREF="index.htm"
ALT="Oracle PL/SQL Programming, 2nd Edition"><AREA
SHAPE="RECT"
COORDS="467,0,514,18"
HREF="jobjects/fsearch.htm"
ALT="Search this book"></MAP
><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch19_07.htm"
TITLE="19.7 Example: PL/SQL-to-Server Integration"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 19.7 Example: PL/SQL-to-Server Integration"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><SPAN
CLASS="NAVTITLE"
><A
CLASS="chapter"
REL="up"
HREF="ch19_01.htm"
TITLE="19. Nested Tables and VARRAYs"
>Chapter 19<BR>Nested Tables and VARRAYs</A
></SPAN
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch19_09.htm"
TITLE="19.9 Which Collection Type Should I Use?"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 19.9 Which Collection Type Should I Use?"
BORDER="0"></A
></TD
></TR
></TABLE
>&nbsp;<HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"></DIV
><DIV
CLASS="sect1"
><H2
CLASS="sect1"
><A
CLASS="title"
NAME="SQL2-CH-19-SECT-8"
>19.8 Collections Housekeeping</A
></H2
><P
CLASS="para"
>Here are some not-so-obvious bits of information that will assist you in using nested tables and VARRAYS. </P
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="SQL2-CH-19-SECT-8.1"
>19.8.1 Privileges</A
></H3
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="ch19-idx-8673-1"
></A
> <A
CLASS="indexterm"
NAME="ch19-idx-8673-2"
></A
> When they live in the database, collection datatypes can be shared by more than one Oracle user (schema). As you can imagine, privileges are involved. Fortunately, it's not complicated; only one Oracle privilege&nbsp;-- <A
CLASS="indexterm"
NAME="ch19-idx-8678-1"
></A
> EXECUTE&nbsp;-- applies to collection types. </P
><P
CLASS="para"
>If you are SCOTT and you want to grant JOE permission to use Color_tab_t in his programs, all you need to do is grant the EXECUTE privilege to him: </P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>GRANT EXECUTE on Color_tab_t TO JOE;</PRE
></BLOCKQUOTE
><P
CLASS="para"
>Joe can then refer to the type using <I
CLASS="filename"
>schema.type</I
> notation. For example: </P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>CREATE TABLE my_stuff_to_paint (
   which_stuff VARCHAR2(512),
   paint_mixture SCOTT.Color_tab_t
);</PRE
></BLOCKQUOTE
><P
CLASS="para"
>EXECUTE privileges are also required by users who need to run PL/SQL anonymous blocks that uses the object type. That's one of several reasons that named PL/SQL modules&nbsp;-- packages, procedures, functions&nbsp;-- are generally preferred. Granting EXECUTE on the module confers the grantor's privileges to the grantee while executing the module. </P
><P
CLASS="para"
>For tables that include collection columns, the traditional SELECT, INSERT, UDPATE, and DELETE privileges still have meaning, as long as there is no requirement to build a collection for any columns. However, if a user is going to INSERT or UPDATE the contents of a collection column, the user must have the EXECUTE privilege on the type, because that is the only way to use the default constructor.<A
CLASS="indexterm"
NAME="AUTOID-18634"
></A
> <A
CLASS="indexterm"
NAME="AUTOID-18635"
></A
> <A
CLASS="indexterm"
NAME="AUTOID-18636"
></A
> </P
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="SQL2-CH-19-SECT-8.2"
>19.8.2 Data Dictionary</A
></H3
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="AUTOID-18640"
></A
> <A
CLASS="indexterm"
NAME="AUTOID-18643"
></A
>There are a few new entries in the data dictionary (shown in <A
CLASS="xref"
HREF="ch19_08.htm#SQL2-CH-19-SECT-8.1"
>Table 19.3</A
>) that will be very helpful in managing your collection types. The shorthand dictionary term for user-defined types is simply TYPE. Collection type definitions are found in the USER_SOURCE view (or DBA_SOURCE, or ALL_SOURCE). </P
><BR><TABLE
CLASS="table"
BORDER="1"
CELLPADDING="3"
><CAPTION
CLASS="table"
><A
CLASS="title"
NAME="SQL2-CH-19-TABLE-6"
>Table 19.3: Data Dictionary Entries for Collection Types </A
></CAPTION
><THEAD
CLASS="thead"
><TR
CLASS="row"
VALIGN="TOP"
><TH
CLASS="entry"
ALIGN="LEFT"
ROWSPAN="1"
COLSPAN="1"
> <P
CLASS="para"
>To Answer the Question...</P
> </TH
><TH
CLASS="entry"
ALIGN="LEFT"
ROWSPAN="1"
COLSPAN="1"
> <P
CLASS="para"
>Use This View</P
> </TH
><TH
CLASS="entry"
ALIGN="LEFT"
ROWSPAN="1"
COLSPAN="1"
> <P
CLASS="para"
>As In</P
> </TH
></TR
></THEAD
><TBODY
CLASS="tbody"
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
> <P
CLASS="para"
>What collection types have I created?</P
> </TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
> <P
CLASS="para"
>USER_TYPES</P
> </TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
> <BLOCKQUOTE
><PRE
CLASS="programlisting"
>SELECT type_name
  FROM user_types
 WHERE type_code = 'COLLECTION';</PRE
></BLOCKQUOTE
> </TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
> <P
CLASS="para"
>What was the original type definition of collection Foo_t?</P
> </TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
> <P
CLASS="para"
>USER_SOURCE</P
> </TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
> <BLOCKQUOTE
><PRE
CLASS="programlisting"
>SELECT text
  FROM user_source
 WHERE name = 'FOO_T'
   AND type = 'TYPE'
ORDER BY line;</PRE
></BLOCKQUOTE
> </TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
> <P
CLASS="para"
>What columns implement Foo_t?</P
> </TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
> <P
CLASS="para"
>USER_TAB_COLUMNS</P
> </TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
> <BLOCKQUOTE
><PRE
CLASS="programlisting"
>SELECT table_name, column_name
  FROM user_tab_columns
 WHERE data_type = 'FOO_T';</PRE
></BLOCKQUOTE
> </TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
> <P
CLASS="para"
>What database objects are dependent on Foo_t?</P
> </TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
> <P
CLASS="para"
>USER_DEPENDENCIES</P
> </TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
> <BLOCKQUOTE
><PRE
CLASS="programlisting"
>SELECT name, type
  FROM user_dependencies
 WHERE referenced_name = 'FOO_T';</PRE
></BLOCKQUOTE
> </TD
></TR
></TBODY
></TABLE
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="SQL2-CH-19-SECT-8.3"
>19.8.3 Call by Reference or Call by Value</A
></H3
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="AUTOID-18693"
></A
> <A
CLASS="indexterm"
NAME="AUTOID-18696"
></A
>Under certain circumstances that are beyond the control of the programmer, PL/SQL will pass collection arguments by reference rather than by value. The rationale is that since collections can be large, it is more efficient to pass only a pointer (call by reference) than to make a copy of the collection (call by value). Usually, the compiler's choice of parameter passing approach is invisible to the application programmer. </P
><P
CLASS="para"
>Not knowing whether the compiler will pass arguments by reference or by value can lead to unexpected results if all of the following conditions are met: </P
><OL
CLASS="orderedlist"
><LI
CLASS="listitem"
><P
CLASS="para"
>You have created a procedure or function "in line" in another module's declaration section (these are known as nested or local program units and are explained in <A
CLASS="xref"
HREF="ch15_01.htm"
>Chapter 15, <CITE
CLASS="chapter"
>Procedures and Functions</CITE
></A
>). </P
></LI
><LI
CLASS="listitem"
><P
CLASS="para"
>The inline module refers to a "global" collection variable declared outside its definition. </P
></LI
><LI
CLASS="listitem"
><P
CLASS="para"
>In the body of the outer module, this collection variable is passed as an actual parameter to the inline module. </P
></LI
></OL
><P
CLASS="para"
>This is a rather uncommon combination of affairs in most PL/SQL programs. If you are in the habit of using "in line" module definitions, it's probably not a good idea to rely on the value of global variables anyway! </P
></DIV
></DIV
><DIV
CLASS="htmlnav"
><P
></P
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch19_07.htm"
TITLE="19.7 Example: PL/SQL-to-Server Integration"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 19.7 Example: PL/SQL-to-Server Integration"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="book"
HREF="index.htm"
TITLE="Oracle PL/SQL Programming, 2nd Edition"
><IMG
SRC="../gifs/txthome.gif"
ALT="Oracle PL/SQL Programming, 2nd Edition"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch19_09.htm"
TITLE="19.9 Which Collection Type Should I Use?"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 19.9 Which Collection Type Should I Use?"
BORDER="0"></A
></TD
></TR
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
>19.7 Example: PL/SQL-to-Server Integration</TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="index"
HREF="index/idx_0.htm"
TITLE="Book Index"
><IMG
SRC="../gifs/index.gif"
ALT="Book Index"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
>19.9 Which Collection Type Should I Use?</TD
></TR
></TABLE
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"></DIV
><IMG SRC="../gifs/smnavbar.gif"
USEMAP="#map"
BORDER="0"
ALT="The Oracle Library Navigation">

<P><font size="-1">
<a href="../copyrght.htm#copy">Copyright (c) 2000</a> O'Reilly &amp; Associates. All rights reserved.
</font></P>

<MAP NAME="map">

<AREA SHAPE="RECT"
COORDS="0,0,35,30"
HREF="../index.htm"
ALT="Library Home">

<AREA SHAPE="RECT"
COORDS="40,0,95,30"
HREF="index.htm"
ALT="Oracle PL/SQL Programming, 2nd. Ed.">

<AREA SHAPE="RECT"
COORDS="100,0,200,30"
HREF="../guide8i/index.htm"
ALT="Guide to Oracle 8i Features">

<AREA SHAPE="RECT"
COORDS="205,0,245,30"
HREF="../bipack/index.htm"
ALT="Oracle Built-in Packages">

<AREA SHAPE="RECT"
COORDS="250,0,320,30"
HREF="../advprog/index.htm"
ALT="Advanced PL/SQL Programming with Packages">

<AREA SHAPE="RECT"
COORDS="325,0,420,30"
HREF="../webapp/index.htm"
ALT="Oracle Web Applications">

<AREA SHAPE="RECT"
COORDS="425,0,490,30"
HREF="../langpkt/index.htm"
ALT="Oracle PL/SQL Language Pocket Reference">

<AREA SHAPE="RECT"
COORDS="495,0,570,30"
HREF="../bipkt/index.htm"
ALT="Oracle PL/SQL Built-ins Pocket Reference">
</MAP>

</BODY
>
<!-- Mirrored from liso.cs.pusan.ac.kr by HTTrack Website Copier/3.x [XR&CO'2001] -->
</HTML
>
