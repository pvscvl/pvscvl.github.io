<HTML
><HEAD
><TITLE
>[Chapter 20] 20.4 Differences Between Object Views and Object Tables</TITLE
><META
NAME="DC.Creator"
CONTENT="Steven Feuerstein &amp; Bill Pribyl"><META
NAME="DC.Date"
CONTENT="2000-04-29T19:09:43Z"><META
NAME="DC.Format"
CONTENT="text/html"
SCHEME="MIME"><META
NAME="DC.Identifier"
CONTENT="O'Reilly and Associates CD-ROM-1-56592-335-9E"><META
NAME="DC.Language"
CONTENT="en-US"><META
NAME="DC.Publisher"
CONTENT="O'Reilly &amp; Associates, Inc."><META
NAME="DC.Source"
CONTENT="1-56592-335-9E"
SCHEME="ISBN"><META
NAME="DC.Subject.Keyword"
CONTENT="Oracle PL/SQL"><META
NAME="DC.Title"
CONTENT="Oracle PL/SQL Programming, 2nd Edition"><META
NAME="DC.Type"
CONTENT="Text.Monograph"><META
NAME="generator"
CONTENT="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><LINK
REL="stylesheet"
TYPE="text/css"
HREF="../style/style1.css"><LINK
REV="made"
HREF="mailto:online-books@oreilly.com"
TITLE="Online Books Comments"><LINK
REL="up"
HREF="ch20_01.htm"
TITLE="20. Object Views"><LINK
REL="prev"
HREF="ch20_03.htm#SQL2-CH-20-SECT-3.3"
TITLE="20.3 Syntax for Object Views"><LINK
REL="next"
HREF="ch20_05.htm"
TITLE="20.5 Not All Views with Objects Are Object Views"></HEAD
><BODY
><DIV
CLASS="htmlnav"
><H1
><IMG
SRC="gifs/smbanner.gif"
ALT="Oracle PL/SQL Programming, 2nd Edition"
USEMAP="#srchmap"
BORDER="0"></H1
><MAP
NAME="srchmap"
><AREA
SHAPE="RECT"
COORDS="0,0,466,65"
HREF="index.htm"
ALT="Oracle PL/SQL Programming, 2nd Edition"><AREA
SHAPE="RECT"
COORDS="467,0,514,18"
HREF="jobjects/fsearch.htm"
ALT="Search this book"></MAP
><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch20_03.htm#SQL2-CH-20-SECT-3.3"
TITLE="20.3 Syntax for Object Views"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 20.3 Syntax for Object Views"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><SPAN
CLASS="NAVTITLE"
><A
CLASS="chapter"
REL="up"
HREF="ch20_01.htm"
TITLE="20. Object Views"
>Chapter 20<BR>Object Views</A
></SPAN
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch20_05.htm"
TITLE="20.5 Not All Views with Objects Are Object Views"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 20.5 Not All Views with Objects Are Object Views"
BORDER="0"></A
></TD
></TR
></TABLE
>&nbsp;<HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"></DIV
><DIV
CLASS="sect1"
><H2
CLASS="sect1"
><A
CLASS="title"
NAME="SQL2-CH-20-SECT-4"
>20.4 Differences Between Object Views and Object Tables</A
></H2
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="ch20-idx-6267-1"
></A
><A
CLASS="indexterm"
NAME="ch20-idx-6267-2"
></A
>In addition to the obvious difference between a view and a table, more subtle differences exist between an object view and an object table. Areas of difference include the following: </P
><UL
CLASS="itemizedlist"
><LI
CLASS="listitem"
><P
CLASS="para"
>Uniqueness of object identifiers</P
></LI
><LI
CLASS="listitem"
><P
CLASS="para"
>Use of REFs</P
></LI
><LI
CLASS="listitem"
><P
CLASS="para"
>Storage of REFs</P
></LI
><LI
CLASS="listitem"
><P
CLASS="para"
>REFs to nonunique OIDs</P
></LI
></UL
><P
CLASS="para"
>Lets look at each difference in turn.</P
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="SQL2-CH-20-SECT-4.1"
>20.4.1 OID Uniqueness</A
></H3
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="ch20-idx-6283-1"
></A
><A
CLASS="indexterm"
NAME="ch20-idx-6283-2"
></A
> An object table will always have a unique, system-defined object identifier, whether or not the object type includes attribute(s) which can serve as a unique identifier. While this is seldom, if ever, good practice, it is technically possible to create an object table where two or more object instances (rows) contain duplicate values in every column; the instances will still be unique in their object identifier. And, as discussed in the previous chapter, OIDs of table objects are globally unique, even across databases. </P
><P
CLASS="para"
>By contrast, object views can give rise to two types of OID duplication: </P
><UL
CLASS="itemizedlist"
><LI
CLASS="listitem"
><P
CLASS="para"
>Duplication of OIDs within a single object view</P
></LI
><LI
CLASS="listitem"
><P
CLASS="para"
>Duplication of OIDs across multiple views (or across an object view and an object table) </P
></LI
></UL
><DIV
CLASS="sect3"
><H4
CLASS="sect3"
><A
CLASS="title"
NAME="SQL2-CH-20-SECT-4.1.1"
>20.4.1.1 Duplicate OIDs in a single view</A
></H4
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="AUTOID-19105"
></A
>An object view can easily contain multiple object instances (rows) for a given OID. Let's look at how that can happen. </P
><P
CLASS="para"
>In our earlier example, we chose to "smush" the detail table into a collection and use the primary key of the parent table as the (unique) OID of the view. If for some reason we had used a simple join on the foreign key, a given value of the primary key of the parent could indeed yield a nonunique OID. This would require a different underlying object type where the "keywords" attribute is a scalar rather than a collection: </P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>CREATE TYPE Image_keyword_t AS OBJECT (
   image_id INTEGER,
   file_name VARCHAR2(512),
   file_type VARCHAR2(12),
   bytes INTEGER,
   <B
CLASS="emphasis.bold"
>keywords VARCHAR2(45)</B
>
);</PRE
></BLOCKQUOTE
><P
CLASS="para"
>The object view could then be created as follows.</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>CREATE VIEW image_keyword_v
   OF Image_keyword_t
   WITH OBJECT OID (image_id)
AS
   SELECT i.image_id, i.file_name, i.file_type, i.bytes, k.keyword
     FROM keywords k, images i
    WHERE k.image_id = i.image_id;</PRE
></BLOCKQUOTE
><P
CLASS="para"
>This duplication of OIDs may make sense for some applications; however, in the more likely case that you want to avoid duplicate OIDs, simply include enough attributes to make it unique: </P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>WITH OBJECT OID (image_id, keywords)</PRE
></BLOCKQUOTE
></DIV
><DIV
CLASS="sect3"
><H4
CLASS="sect3"
><A
CLASS="title"
NAME="SQL2-CH-20-SECT-4.1.2"
>20.4.1.2 Duplicate OIDs across multiple views</A
></H4
><P
CLASS="para"
>There are other scenarios in which object views duplicate object identifiers used elsewhere. For example, if your object view is defined on an underlying object table or view <EM
CLASS="emphasis"
>and</EM
> if you use the DEFAULT keyword to specify the OID, the view contains OIDs that match the OIDs of the underlying construct: </P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>CREATE VIEW gif_images_v
   OF Image_t
   WITH OBJECT OID DEFAULT
AS
   SELECT *
     FROM images_v
    WHERE file_type = 'GIF';</PRE
></BLOCKQUOTE
><P
CLASS="para"
>In this case, all of the OIDs that Oracle uses for instances (rows) of gif_images_v will match existing OIDs of the images_v view. </P
><P
CLASS="para"
>Logically, this possibility of "duplication" makes a certain amount of sense. A view is often thought of as a "stored query." Used here, the query simply retrieves a subset of the underlying objects and does not modify them in any way. </P
><BLOCKQUOTE
CLASS="note"
><P
CLASS="para"
><STRONG
>NOTE:</STRONG
> Just because your object view is defined on an object table, you don't <EM
CLASS="emphasis"
>have</EM
> to use the underlying OID. If you want the OIDs of the objects in gif_images_v to be unique from those of the underlying object, you could simply specify the image_id attribute as the OID: </P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>CREATE VIEW gif_images_v
   OF Image_t
   WITH OBJECT OID (image_id)
   AS SELECT * 
        FROM images_v
       WHERE file_type = 'GIF';</PRE
></BLOCKQUOTE
><P
CLASS="para"
>In this view, Oracle will use its internal algorithm to derive unique OIDs for the objects retrieved via gif_images_v.1</P
></BLOCKQUOTE
></DIV
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="SQL2-CH-20-SECT-4.2"
>20.4.2 Using REFs with Object Views</A
></H3
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="ch20-idx-6288-1"
></A
><A
CLASS="indexterm"
NAME="ch20-idx-6288-2"
></A
>As we saw in <A
CLASS="xref"
HREF="ch18_01.htm"
>Chapter 18</A
>, Oracle allows us to define a "reference" or REF datatype to designate relationships between two object tables. We also saw how REF types provide convenient navigation among families of persistent objects through dot notation rather than explicit relational joins. </P
><P
CLASS="para"
>In the same way that you can define a REF to link two object tables, you can create a "virtual REF" to link two object views. To see how this works, and to examine a critical difference between virtual REFs and "real" REFs, let's return to an example at our favorite Web design firm, Planetary Pages. </P
><DIV
CLASS="sect3"
><H4
CLASS="sect3"
><A
CLASS="title"
NAME="SQL2-CH-20-SECT-4.2.1"
>20.4.2.1 Defining virtual REFs</A
></H4
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="ch20-idx-6297-1"
></A
>As it turns out, the table of images we mentioned earlier includes a column that designates the creator of the image, as a foreign key to a table of artists. Our intention is to make the images_v object view include a REF to an object view of the artists table. </P
><P
CLASS="para"
>The (admittedly simplistic) table of artists looks like this:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>CREATE TABLE artists (
   id INTEGER NOT NULL,
   name VARCHAR2(60),
   CONSTRAINT artists_pk PRIMARY KEY (id)
);</PRE
></BLOCKQUOTE
><P
CLASS="para"
>Here's the images table definition, with the new foreign key defined: </P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>CREATE TABLE images (
   image_id INTEGER NOT NULL,
   file_name VARCHAR2(512),
   file_type VARCHAR2(12),
   bytes INTEGER,
   <B
CLASS="emphasis.bold"
>artist_id INTEGER,</B
>
   CONSTRAINT image_pk PRIMARY KEY (image_id),
   <B
CLASS="emphasis.bold"
>CONSTRAINT image_created_by_artist FOREIGN KEY (artist_id)</B
>
      <B
CLASS="emphasis.bold"
>REFERENCES artists (id)</B
>
);</PRE
></BLOCKQUOTE
><P
CLASS="para"
>Because we will use the Oracle function MAKE_REF, which only works with object views, we will need to define an object type for artists: </P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>CREATE TYPE Artist_t AS OBJECT (
   id INTEGER,
   name VARCHAR2(60)
);</PRE
></BLOCKQUOTE
><P
CLASS="para"
>Now we can layer the Artist_t type on the artists table using an object view: </P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>CREATE VIEW artists_v
   OF Artist_t
   WITH OBJECT OID (id)
AS
   SELECT id, name
     FROM artists;</PRE
></BLOCKQUOTE
><P
CLASS="para"
>We need to redefine the image_t type to include the REF:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>CREATE TYPE Image_t AS OBJECT (
   image_id INTEGER,
   file_name VARCHAR2(512),
   file_type VARCHAR2(12),
   bytes INTEGER,
   <B
CLASS="emphasis.bold"
>artist_ref REF Artist_t,</B
>
   keywords Keyword_tab_t,
   MEMBER FUNCTION set_attrs (new_file_name IN VARCHAR2,
      new_file_type IN VARCHAR2, new_bytes IN INTEGER)
      RETURN Image_t,
   MEMBER FUNCTION set_keywords (new_keywords IN Keyword_tab_t)
      RETURN Image_t,
   PRAGMA RESTRICT_REFERENCES (DEFAULT, RNDS, WNDS, RNPS, WNPS)
);</PRE
></BLOCKQUOTE
><P
CLASS="para"
>After all of this preparatory work, we can at last show the new version of the object view. This statement uses the built-in MAKE_REF function, which accepts a key value and returns a REF to an object view: </P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>CREATE VIEW images_v
   OF Image_t
   WITH OBJECT OID (image_id)
AS
   SELECT i.image_id, i.file_name, i.file_type, i.bytes,
     <B
CLASS="emphasis.bold"
> MAKE_REF (artists_v, i.artist_id),</B
>
      CAST (MULTISET (SELECT keyword
                        FROM keywords k
                       WHERE k.image_id = i.image_id)
            AS Keyword_tab_t)
     FROM images i;</PRE
></BLOCKQUOTE
><P
CLASS="para"
>The expression in bold above means "construct the REF that should point to the artists_v virtual object with artist ID of i.artist_id." I say "should" rather than "will" because Oracle does not check to make sure that the artist_id actually exists. </P
><P
CLASS="para"
>Let's take a closer look at the MAKE_REF in the example above:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>MAKE_REF (artists_v, i.artist_id)</PRE
></BLOCKQUOTE
><P
CLASS="para"
>The first argument of this function, artist_v, is the target object view. The second argument, i.artist_id, is the value which MAKE_REF will convert into an OID to retrieve an instance of the virtual artist object. </P
><P
CLASS="para"
>It is not strictly necessary to have a foreign key, or even a primary key, in order to use MAKE_REF. But in almost all cases, it is highly desirable to make sure the target of the REF is a primary key-based OID, and that the REF is based on a foreign key.<A
CLASS="indexterm"
NAME="AUTOID-19166"
></A
> </P
></DIV
><DIV
CLASS="sect3"
><H4
CLASS="sect3"
><A
CLASS="title"
NAME="SQL2-CH-20-SECT-4.2.2"
>20.4.2.2 Using virtual REFs</A
></H4
><P
CLASS="para"
>Where does all this get us? Once we have the view with its virtual REF, we can issue SQL statements that use dot navigation: </P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>SELECT image_id, <B
CLASS="emphasis.bold"
>i.artist_ref.name</B
></PRE
></BLOCKQUOTE
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>  FROM images_v i
 WHERE file_name = 'cheesefries.jpg';</PRE
></BLOCKQUOTE
><P
CLASS="para"
>On the surface, this statement is indistinguishable from what we might use with object tables. But there is a very important difference: </P
><BLOCKQUOTE
CLASS="blockquote"
><P
CLASS="para"
> <EM
CLASS="emphasis"
>Using MAKE_REF in a view to convert a foreign key into a REF will produce an error if the foreign key value is NULL.</EM
> </P
></BLOCKQUOTE
><P
CLASS="para"
>To illustrate this inconvenient behavior, let's put some data in the underlying artist and image tables: </P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>INSERT INTO artists VALUES (100, 'Sam Picasso');

/* Insert an image with a valid artist id (for Case 1) */
INSERT INTO images VALUES (1000, 'cheesefries.jpg', 'JPG', 2097, 100);

/* Insert an image with an invalid artist id (must first disable the
|| foreign key constraint.)  This is for Case 2.
*/
ALTER TABLE images
   DISABLE CONSTRAINT image_created_by_artist;

INSERT INTO images VALUES (1002, 'sodajerk.jpg', 'JPG', 813, 99);

/* Insert an image with a NULL artist id. This is for Case 3. */
INSERT INTO images VALUES (1001, '57chevy.gif', 'GIF', 3128, NULL);</PRE
></BLOCKQUOTE
><P
CLASS="para"
>Let's run each of three cases and assess the results.</P
><P
CLASS="para"
>Case 1 is the "normal" case in which the artist_id actually exists: </P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>/* Case 1 */
SELECT image_id, <B
CLASS="emphasis.bold"
>i.artist_ref.name</B
></PRE
></BLOCKQUOTE
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>  FROM images_v i
 WHERE file_name = 'cheesefries.jpg';

 IMAGE_ID ARTIST_REF.NAME
--------- ------------------------------------------------------------
     1000 Sam Picasso</PRE
></BLOCKQUOTE
><P
CLASS="para"
>That works just fine&nbsp;-- just as if images_v and artists_v were object tables. As long as there is a valid foreign key, we can use dot navigation until the cows come home. </P
><P
CLASS="para"
>Case 2 illustrates what happens when the artist_id in the images table is non-null, but does not point to a valid artist_id in the artists table. In other words, you have a referential integrity problem&nbsp;-- we had to disable the foreign key to try this one out: </P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>/* Case 2 */
SELECT image_id, i.artist_ref.name
  FROM images_v i
 WHERE file_name = 'sodajerk.jpg';

 IMAGE_ID ARTIST_REF.NAME
--------- ------------------------------------------------------------
     1002</PRE
></BLOCKQUOTE
><P
CLASS="para"
>Here, Oracle simply returns i.artist_ref.name as a NULL. This behavior matches that of object tables; if the object corresponding to the REF doesn't exist, you get a NULL back. Another name for this unknown reference value is a <I
CLASS="firstterm"
>dangling REF</I
>. </P
><P
CLASS="para"
>Case 3 is the problem child. For the 57chevy.gif record, the artist_id field in the images table is simply null. This might be a common occurrence if, for example, the artist is unknown. </P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>/* Case 3 */
SELECT image_id, i.artist_ref.name
  FROM images_v i
 WHERE file_name = '57chevy.gif';</PRE
></BLOCKQUOTE
><P
CLASS="para"
>Oracle replies, somewhat unforgivingly:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>ERROR at line 3:
ORA-22972: NULL value not allowed in PRIMARY KEY-based object identifier</PRE
></BLOCKQUOTE
><P
CLASS="para"
>We get the same Oracle error whether or not the foreign key constraint is enabled. This behavior is vastly different from that of object tables, which simply return a null (as in the previous case). Personally, I prefer the behavior of object tables, in which REF-based navigation is more like a relational "outer join." </P
></DIV
><DIV
CLASS="sect3"
><H4
CLASS="sect3"
><A
CLASS="title"
NAME="SQL2-CH-20-SECT-4.2.3"
>20.4.2.3 Working around the ORA-22972 problem</A
></H4
><P
CLASS="para"
>One workaround for this behavior is to use a DECODE in the <A
CLASS="indexterm"
NAME="AUTOID-19197"
></A
><A
CLASS="indexterm"
NAME="AUTOID-19200"
></A
>MAKE_REF so that null artist_ids get converted to some weird value that will never appear in the artists table. Since Oracle doesn't complain if an artist_id doesn't exist (as illustrated in Case 2) the silent response results in a null&nbsp;-- which is the desired result. </P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>CREATE VIEW images_v
   OF Image_t
   WITH OBJECT OID (image_id)
AS
   SELECT i.image_id, i.file_name, i.file_type, i.bytes,
          MAKE_REF (artists_v,
             <B
CLASS="emphasis.bold"
>DECODE(i.artist_id,</B
>
                <B
CLASS="emphasis.bold"
>    NULL, -1,</B
>
<B
CLASS="emphasis.bold"
>                    i.artist_id)</B
>),
      CAST (MULTISET (SELECT keyword
                        FROM keywords k
                       WHERE k.image_id = i.image_id)
            AS Keyword_tab_t)
     FROM images i;</PRE
></BLOCKQUOTE
><P
CLASS="para"
>The DECODE returns -1 if the artist_id is unknown; we are making the assumption that the artist_id will never, in fact, equal -1. </P
><P
CLASS="para"
>Seems like a lot of work just to use dot notation, doesn't it? There are other good reasons to use REFs, such as <EM
CLASS="emphasis"
>complex object retrieval</EM
> (COR), but this feature is at present available only to OCI applications. (Note that OCI is beyond the scope of this book.) COR allows an application to efficiently retrieve an object and pre-fetch all objects REFerenced by that object to a predefined "depth level." It isn't yet clear whether Oracle will support some form of COR in a future version of PL/SQL. </P
></DIV
><DIV
CLASS="sect3"
><H4
CLASS="sect3"
><A
CLASS="title"
NAME="SQL2-CH-20-SECT-4.2.4"
>20.4.2.4 DEREF: Interpreting a virtual REF</A
></H4
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="ch20-idx-6311-1"
></A
> <A
CLASS="indexterm"
NAME="ch20-idx-6311-2"
></A
> What should we do about updates to an object view that contains a REF if, for example, we are writing an INSTEAD OF trigger? How do we tell the view to deal with the constructed REF? Why, we use the DEREF function, of course. (Just what you were thinking, I bet.) </P
><P
CLASS="para"
>Here is the new version of our earlier INSTEAD OF trigger, modified to deal with the REF: </P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>CREATE OR REPLACE TRIGGER images_v_insert
INSTEAD OF INSERT ON images_v
FOR EACH ROW
DECLARE
   /* The unrefcur cursor serves to &quot;dereference&quot; the artist_ref,
   || so that we can retrieve the object to which it refers.
   */
  <B
CLASS="emphasis.bold"
> CURSOR unrefcur IS</B
>
<B
CLASS="emphasis.bold"
>      SELECT DEREF(:new.artist_ref)</B
>
<B
CLASS="emphasis.bold"
>        FROM DUAL;</B
>

   /* We'll need a place to hold the object: */
  <B
CLASS="emphasis.bold"
> artist Artist_t;</B
>
BEGIN
   /* Go get the object... */
<B
CLASS="emphasis.bold"
>   OPEN unrefcur;</B
>
<B
CLASS="emphasis.bold"
>   FETCH unrefcur INTO artist;</B
>
<B
CLASS="emphasis.bold"
>   CLOSE unrefcur;</B
>

   /* This will fail with DUP_VAL_ON_INDEX if the images table
   || already contains a record with the new image_id.
   */
   INSERT INTO images
      VALUES (:NEW.image_id, :NEW.file_name, :NEW.file_type,
              :NEW.bytes, <B
CLASS="emphasis.bold"
>artist.id</B
>);

   IF :NEW.keywords IS NOT NULL THEN
      DECLARE
         /* Note: apparent bug prevents use of :NEW.keywords.LAST.
         || The workaround is to store :NEW.keywords as a local
         || variable (in this case keywords_holder.)
         */
         keywords_holder Keyword_tab_t := :NEW.keywords;
      BEGIN
         FOR the_keyword IN 1..keywords_holder.LAST
         LOOP
            INSERT INTO keywords
            VALUES (:NEW.image_id, keywords_holder(the_keyword));
         END LOOP;
       END;
   END IF;
END;</PRE
></BLOCKQUOTE
><P
CLASS="para"
>With this trigger defined, we can look briefly at an example of doing an INSERT: </P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>INSERT INTO images_v                             -- invalid (bug?)
SELECT Image_t(451, 'library.jpg', 'JPG', 3092,
               REF(a),
               keyword_tab_t('BOOKS', 'LIBRARY', 'PUBLIC BUILDINGS'))
  FROM artists_v a
 WHERE id = 100;</PRE
></BLOCKQUOTE
><P
CLASS="para"
>which ought to work but fails with an ORA-00932 error, "inconsistent datatypes." (This is a suspected bug in Oracle 8.0.3.) As a workaround, you can either use the "relational equivalent" insert or issue an equivalent PL/SQL statement that does work. </P
><P
CLASS="para"
>The relational equivalent insert uses column values rather than the default constructor: </P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>INSERT INTO images_v
SELECT 451, 'library.jpg', 'JPG', 3092,
       REF(a),
       keyword_tab_t('BOOKS', 'LIBRARY', 'PUBLIC BUILDINGS')
  FROM artists_v a
 WHERE id = 100;</PRE
></BLOCKQUOTE
><P
CLASS="para"
>The following PL/SQL snippet also works, with (or without) the constructor: </P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>DECLARE
   image Image_t;
BEGIN
  SELECT Image_t(451, 'library.jpg', 'JPG', 3092,
                REF(a),
                keyword_tab_t('BOOKS', 'LIBRARY', 'PUBLIC BUILDINGS'))
    INTO image
    FROM artists_v a
   WHERE id = 100;
  INSERT INTO images_v VALUES (image);
END;</PRE
></BLOCKQUOTE
><P
CLASS="para"
>For more details about DEREF, refer to <A
CLASS="xref"
HREF="ch18_01.htm"
>Chapter 18</A
>.<A
CLASS="indexterm"
NAME="AUTOID-19238"
></A
> <A
CLASS="indexterm"
NAME="AUTOID-19239"
></A
> </P
></DIV
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="SQL2-CH-20-SECT-4.3"
>20.4.3 Storage of Virtual REFs</A
></H3
><P
CLASS="para"
>With object tables, <A
CLASS="indexterm"
NAME="AUTOID-19243"
></A
> <A
CLASS="indexterm"
NAME="AUTOID-19246"
></A
> <A
CLASS="indexterm"
NAME="AUTOID-19249"
></A
>REFs get physically stored in a table. That is, a column defined as a REF type can contain a binary value that Oracle can use as a "pointer" to an object. </P
><P
CLASS="para"
>However, when dealing with object views, Oracle does not yet allow you to store a REF pointing to a virtual object. In other words, even if you create a table with an appropriately typed REF column, you cannot actually save a value in this column. From one perspective, this is an irritant rather than a significant deficiency; as a workaround, create an object view of the table, and use MAKE_REF. </P
><P
CLASS="para"
>From another perspective, it's a bit unpleasant that we cannot intermingle object tables with object views; nor can we perform a simple transformation from an object view into an object table. I would like to be able to create an object table: </P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>CREATE TABLE images2 OF image_t
   NESTED TABLE keywords STORE AS keyword_tab;</PRE
></BLOCKQUOTE
><P
CLASS="para"
>and then populate it from the view:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>INSERT INTO images2                  -- invalid
 SELECT VALUE(i) FROM images_v i;</PRE
></BLOCKQUOTE
><P
CLASS="para"
>But alas, Oracle tells me I cannot: this request results in an ORA-22979 error, "cannot INSERT a REF from an object view into a table." </P
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="SQL2-CH-20-SECT-4.4"
>20.4.4 REFs to Nonunique OIDs</A
></H3
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="AUTOID-19261"
></A
>What do you suppose will happen if you create a REF to an object in an object view, but it has multiple object instances for the OID in question? Granted, this is a pretty weird case; you shouldn't be creating object views with ambiguous OIDs. </P
><P
CLASS="para"
>I won't keep you in suspense for this one. In my testing, DEREFing this type of virtual REF returned a null OID. That seems like an unusual result, so I don't think I would count on it in an<A
CLASS="indexterm"
NAME="AUTOID-19265"
></A
> <A
CLASS="indexterm"
NAME="AUTOID-19266"
></A
> application.<A
CLASS="indexterm"
NAME="AUTOID-19267"
></A
> <A
CLASS="indexterm"
NAME="AUTOID-19268"
></A
> </P
></DIV
></DIV
><DIV
CLASS="htmlnav"
><P
></P
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch20_03.htm#SQL2-CH-20-SECT-3.3"
TITLE="20.3 Syntax for Object Views"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 20.3 Syntax for Object Views"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="book"
HREF="index.htm"
TITLE="Oracle PL/SQL Programming, 2nd Edition"
><IMG
SRC="../gifs/txthome.gif"
ALT="Oracle PL/SQL Programming, 2nd Edition"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch20_05.htm"
TITLE="20.5 Not All Views with Objects Are Object Views"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 20.5 Not All Views with Objects Are Object Views"
BORDER="0"></A
></TD
></TR
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
>20.3 Syntax for Object Views</TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="index"
HREF="index/idx_0.htm"
TITLE="Book Index"
><IMG
SRC="../gifs/index.gif"
ALT="Book Index"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
>20.5 Not All Views with Objects Are Object Views</TD
></TR
></TABLE
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"></DIV
><IMG SRC="../gifs/smnavbar.gif"
USEMAP="#map"
BORDER="0"
ALT="The Oracle Library Navigation">

<P><font size="-1">
<a href="../copyrght.htm#copy">Copyright (c) 2000</a> O'Reilly &amp; Associates. All rights reserved.
</font></P>

<MAP NAME="map">

<AREA SHAPE="RECT"
COORDS="0,0,35,30"
HREF="../index.htm"
ALT="Library Home">

<AREA SHAPE="RECT"
COORDS="40,0,95,30"
HREF="index.htm"
ALT="Oracle PL/SQL Programming, 2nd. Ed.">

<AREA SHAPE="RECT"
COORDS="100,0,200,30"
HREF="../guide8i/index.htm"
ALT="Guide to Oracle 8i Features">

<AREA SHAPE="RECT"
COORDS="205,0,245,30"
HREF="../bipack/index.htm"
ALT="Oracle Built-in Packages">

<AREA SHAPE="RECT"
COORDS="250,0,320,30"
HREF="../advprog/index.htm"
ALT="Advanced PL/SQL Programming with Packages">

<AREA SHAPE="RECT"
COORDS="325,0,420,30"
HREF="../webapp/index.htm"
ALT="Oracle Web Applications">

<AREA SHAPE="RECT"
COORDS="425,0,490,30"
HREF="../langpkt/index.htm"
ALT="Oracle PL/SQL Language Pocket Reference">

<AREA SHAPE="RECT"
COORDS="495,0,570,30"
HREF="../bipkt/index.htm"
ALT="Oracle PL/SQL Built-ins Pocket Reference">
</MAP>

</BODY
>
<!-- Mirrored from liso.cs.pusan.ac.kr by HTTrack Website Copier/3.x [XR&CO'2001] -->
</HTML
>
