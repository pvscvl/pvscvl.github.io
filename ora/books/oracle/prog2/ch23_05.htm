<HTML
><HEAD
><TITLE
>[Chapter 23] 23.5 Managing Stored Objects with SQL*Plus</TITLE
><META
NAME="DC.Creator"
CONTENT="Steven Feuerstein &amp; Bill Pribyl"><META
NAME="DC.Date"
CONTENT="2000-04-29T19:12:34Z"><META
NAME="DC.Format"
CONTENT="text/html"
SCHEME="MIME"><META
NAME="DC.Identifier"
CONTENT="O'Reilly and Associates CD-ROM-1-56592-335-9E"><META
NAME="DC.Language"
CONTENT="en-US"><META
NAME="DC.Publisher"
CONTENT="O'Reilly &amp; Associates, Inc."><META
NAME="DC.Source"
CONTENT="1-56592-335-9E"
SCHEME="ISBN"><META
NAME="DC.Subject.Keyword"
CONTENT="Oracle PL/SQL"><META
NAME="DC.Title"
CONTENT="Oracle PL/SQL Programming, 2nd Edition"><META
NAME="DC.Type"
CONTENT="Text.Monograph"><META
NAME="generator"
CONTENT="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><LINK
REL="stylesheet"
TYPE="text/css"
HREF="../style/style1.css"><LINK
REV="made"
HREF="mailto:online-books@oreilly.com"
TITLE="Online Books Comments"><LINK
REL="up"
HREF="ch23_01.htm"
TITLE="23. Managing Code in the Database"><LINK
REL="prev"
HREF="ch23_04.htm"
TITLE="23.4 Remote Procedure Calls"><LINK
REL="next"
HREF="ch23_06.htm#SQL2-CH-23-SECT-6.3"
TITLE="23.6 Using SQL to Examine Stored Objects"></HEAD
><BODY
><DIV
CLASS="htmlnav"
><H1
><IMG
SRC="gifs/smbanner.gif"
ALT="Oracle PL/SQL Programming, 2nd Edition"
USEMAP="#srchmap"
BORDER="0"></H1
><MAP
NAME="srchmap"
><AREA
SHAPE="RECT"
COORDS="0,0,466,65"
HREF="index.htm"
ALT="Oracle PL/SQL Programming, 2nd Edition"><AREA
SHAPE="RECT"
COORDS="467,0,514,18"
HREF="jobjects/fsearch.htm"
ALT="Search this book"></MAP
><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch23_04.htm"
TITLE="23.4 Remote Procedure Calls"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 23.4 Remote Procedure Calls"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><SPAN
CLASS="NAVTITLE"
><A
CLASS="chapter"
REL="up"
HREF="ch23_01.htm"
TITLE="23. Managing Code in the Database"
>Chapter 23<BR>Managing Code in the Database</A
></SPAN
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch23_06.htm#SQL2-CH-23-SECT-6.3"
TITLE="23.6 Using SQL to Examine Stored Objects"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 23.6 Using SQL to Examine Stored Objects"
BORDER="0"></A
></TD
></TR
></TABLE
>&nbsp;<HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"></DIV
><DIV
CLASS="sect1"
><H2
CLASS="sect1"
><A
CLASS="title"
NAME="SQL2-CH-23-SECT-5"
>23.5 Managing Stored Objects with SQL*Plus</A
></H2
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="ch23-idx-410825-1"
></A
><A
CLASS="indexterm"
NAME="ch23-idx-410825-2"
></A
><A
CLASS="indexterm"
NAME="ch23-idx-410825-3"
></A
>You can use SQL*Plus to manage stored objects like database triggers, procedures, functions, and packages. When Oracle7 was first released, SQL*Plus was the only way to create stored procedures. With the advent of CDE and Oracle Procedure Builder, however, you now have a number of choices for creating and updating your stored objects. Still, many of you will rely on SQL*Plus, especially if your DBA activities are performed on a UNIX (or other non-Windows) server. </P
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="SQL2-CH-23-SECT-5.1"
>23.5.1 Creating Stored Objects</A
></H3
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="AUTOID-21579"
></A
>The syntax to create stored objects is as follows: </P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>CREATE [OR REPLACE] PROCEDURE proc_name (param_list) AS ... ;
CREATE [OR REPLACE] FUNCTION func_name (param_list) RETURN datatype AS ... ;
CREATE [OR REPLACE] PACKAGE pkg_name AS ... ;
CREATE [OR REPLACE] PACKAGE BODY pkg_name AS ... ;
CREATE [OR REPLACE] DATABASE TRIGGER trig_name AS ... ;</PRE
></BLOCKQUOTE
><P
CLASS="para"
>Everything from the object name onwards has the same syntax shown in the appropriate chapter on that object. The CREATE OR REPLACE syntax in front of the normal syntax indicates to SQL*Plus that you want to create the object in the database. This is a DDL (data definition language) statement in SQL, just like a CREATE TABLE statement. </P
><P
CLASS="para"
>You must create a package specification separately from the package body. In fact, you must create the specification first, or else you receive the following error: </P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>PLS-00304: cannot compile body of 'pkg_name' without its specification</PRE
></BLOCKQUOTE
><P
CLASS="para"
>When an object is created, it is stored in a data dictionary table. The source for procedures, packages, functions, and package bodies is kept in the SOURCE$ table (owned by SYS). Views into the SOURCE$ table are: </P
><DL
CLASS="variablelist"
><DT
CLASS="term"
>ALL_SOURCE</DT
><DD
CLASS="listitem"
><P
CLASS="para"
>Source for all objects to which you have access, and therefore EXECUTE privilege on that object </P
></DD
><DT
CLASS="term"
>USER_SOURCE</DT
><DD
CLASS="listitem"
><P
CLASS="para"
>Source for all objects you have created</P
></DD
></DL
><P
CLASS="para"
>The statements executed by a trigger are stored in the ACTION column of the TRIGGER$ table (owned by SYS). You can view all triggers you created by accessing USER_TRIGGERS, or all triggers to which you have access by viewing the contents of ALL_TRIGGERS. </P
><P
CLASS="para"
>Even though you store your modules in the database, you do not maintain your source code for these modules directly in their data dictionary tables. Instead, you must always keep the source code in text files. If you need to make a change to an object, make the changes in the source code and then replace the object in the database. </P
><P
CLASS="para"
>In order to distinguish regular SQL*Plus scripts from scripts that maintain stored objects, I employ a different file extension for them, as shown in the following table: </P
><TABLE
CLASS="informaltable"
BORDER="1"
CELLPADDING="3"
><THEAD
CLASS="thead"
><TR
CLASS="row"
VALIGN="TOP"
><TH
CLASS="entry"
ALIGN="LEFT"
ROWSPAN="1"
COLSPAN="1"
> <P
CLASS="para"
>File Type</P
> </TH
><TH
CLASS="entry"
ALIGN="LEFT"
ROWSPAN="1"
COLSPAN="1"
> <P
CLASS="para"
>Extension</P
> </TH
></TR
></THEAD
><TBODY
CLASS="tbody"
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
> <P
CLASS="para"
>General SQL*Plus script </P
> </TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
> <P
CLASS="para"
><EM
CLASS="emphasis"
>&lt;file&gt;.sql</EM
></P
> </TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
> <P
CLASS="para"
>Testing script</P
> </TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
> <P
CLASS="para"
><EM
CLASS="emphasis"
>&lt;file&gt;.tst</EM
></P
> </TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
> <P
CLASS="para"
>Stored procedure</P
> </TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
> <P
CLASS="para"
><EM
CLASS="emphasis"
>&lt;file&gt;.sp</EM
></P
> </TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
> <P
CLASS="para"
>Stored function</P
> </TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
> <P
CLASS="para"
><EM
CLASS="emphasis"
>&lt;file&gt;.sf</EM
></P
> </TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
> <P
CLASS="para"
>Stored package body</P
> </TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
> <P
CLASS="para"
><EM
CLASS="emphasis"
>&lt;file&gt;spb</EM
></P
> </TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
> <P
CLASS="para"
>Stored package specification</P
> </TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
> <P
CLASS="para"
><EM
CLASS="emphasis"
>&lt;file&gt;.sps</EM
></P
> </TD
></TR
></TBODY
></TABLE
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="SQL2-CH-23-SECT-5.2"
>23.5.2 Tips for Storing Code in Files</A
></H3
><P
CLASS="para"
>Here are some tips for storing code in files:</P
><UL
CLASS="itemizedlist"
><LI
CLASS="listitem"
><P
CLASS="para"
>Always keep your CREATE OR REPLACE statements for package specifications separate from those of your package bodies. That way you can compile each separately. If you keep them together, when you change something in the package body, you will recompile both specification and body. When you recompile your specification, the status of any programs referencing an element in that package will be marked INVALID. They will then have to be recompiled. </P
></LI
><LI
CLASS="listitem"
><P
CLASS="para"
>When you construct installation scripts for your package-based applications, first compile all specifications and then compile all bodies. When package bodies are compiled, references to other package elements are resolved through the specification. With all the specifications "in place" in the database, you are much less likely to run into seemingly circular dependencies. Note that you will have to be careful about the order in which you compile specifications to resolve any dependencies in those specifications themselves. On the other hand, you can compile your bodies in any order you like. </P
></LI
></UL
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="SQL2-CH-23-SECT-5.3"
>23.5.3 Changing Stored Objects</A
></H3
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="AUTOID-21656"
></A
> There are two ways to change an existing object in the database: </P
><UL
CLASS="itemizedlist"
><LI
CLASS="listitem"
><P
CLASS="para"
>Drop the object and recreate it</P
></LI
><LI
CLASS="listitem"
><P
CLASS="para"
>Use the CREATE OR REPLACE syntax instead of CREATE</P
></LI
></UL
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="AUTOID-21664"
></A
>With the first approach, I would issue a DROP command followed by a CREATE command, as follows: </P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>DROP PROCEDURE calc_totals;
CREATE PROCEDURE calc_totals
   (company_id_in IN NUMBER, totals_out OUT NUMBER)
IS
BEGIN
   ... body of procedure ...
END;
/</PRE
></BLOCKQUOTE
><P
CLASS="para"
>Alternatively, I can use a single command to indicate that if the object already exists, replace it in its entirety with the new version found in the statement: </P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>CREATE OR REPLACE PROCEDURE calc_totals
   (company_id_in IN NUMBER, totals_out OUT NUMBER)
IS
BEGIN
   ... body of procedure ...
END;
/</PRE
></BLOCKQUOTE
><P
CLASS="para"
>If you are replacing a very large procedure, you might at times encounter an error like the following: </P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>CREATE OR REPLACE PACKAGE BODY PSGlobal
*
ERROR at line 1:
ORA-00604: error occurred at recursive SQL level 1
ORA-01562: failed to extend rollback segment (id = 2)
ORA-01547: failed to allocate extent of size 5 in tablespace 'ROLLBACK_DATA'</PRE
></BLOCKQUOTE
><P
CLASS="para"
>The RDBMS writes the rows being replaced (deleted) to the rollback segment; if the program is very large and your rollback segments are not commensurately massive, your CREATE OR REPLACE does not succeed. To get around this problem you can increase the size of your rollback segments or you can drop your object before you try to CREATE OR REPLACE. Because the DROP is a DDL statement, it will perform a commit upon completion. Then your rollback segments don't have to maintain the old, deleted rows while the INSERT is taking place. </P
><DIV
CLASS="sidebar"
><H4
CLASS="sidebar"
><A
CLASS="title"
NAME="AUTOID-21672"
>Storing Versus Executing a Stored Program</A
></H4
><P
CLASS="para"
>An important point to remember with stored objects is that the command to CREATE OR REPLACE an object does not actually execute the stored object. It simply places the code for that object in the database and compiles it. <A
CLASS="indexterm"
NAME="AUTOID-21675"
></A
>To execute the program, you can then use the EXECUTE command at the SQL&gt; prompt, or place a call to the program in a PL/SQL block. (This distinction is one reason I think that it is so important to use a different file extension (.sp) for the CREATE statements than for the normal SQL*Plus scripts (.sql ).) </P
><P
CLASS="para"
>Say, for example, you create a file named calctot.sp, as follows:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>CREATE OR REPLACE PROCEDURE calc_totals
   (company_id_in IN NUMBER, totals_out OUT NUMBER)
IS
BEGIN
   ... body of procedure ...
END;
/</PRE
></BLOCKQUOTE
><P
CLASS="para"
>Then, when you execute this file with the command:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>SQL&gt; start calctot.sp</PRE
></BLOCKQUOTE
><P
CLASS="para"
>you receive the following message:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>Procedure created.</PRE
></BLOCKQUOTE
><P
CLASS="para"
>No totals will have been calculated. The procedure was simply created. To calculate and display those totals you can now create a .sql file with a PL/SQL block, as follows: </P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>DECLARE
   mytot NUMBER;
BEGIN
   calc_totals (1005, mytot);
   DBMS_OUTPUT.PUT_LINE ('Totals for company 1005 is ' || TO_CHAR (mytot));
END;
/</PRE
></BLOCKQUOTE
><P
CLASS="para"
>and then run the script:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>SQL&gt; start calctots.sql</PRE
></BLOCKQUOTE
><P
CLASS="para"
>If you do receive a compile error when creating a stored object, you see a message like this: </P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>Warning: Package Body created with compilation errors.</PRE
></BLOCKQUOTE
></DIV
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="SQL2-CH-23-SECT-5.4"
>23.5.4 Viewing Compilation Errors in SQL*Plus</A
></H3
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="AUTOID-21692"
></A
> <A
CLASS="indexterm"
NAME="AUTOID-21695"
></A
> <A
CLASS="indexterm"
NAME="AUTOID-21698"
></A
>When the PL/SQL engine encounters errors, it writes the generated error messages to the ERROR$ table (owned by SYS). To see these error messages, you can either write a query against the USER_ERRORS view, or you can type the following command at the SQL*Plus prompt: </P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>SQL&gt; show errors</PRE
></BLOCKQUOTE
><P
CLASS="para"
>The "show errors" command runs a script that formats the contents of USER_ERRORS so you can easily scan the errors. Here is an example of the output from show errors: </P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>Errors for PACKAGE BODY PS_GLOBAL:

SQL&gt; show errors
LINE/COL ERROR
-------- --------------------------------------------------------------
0/0      PL/SQL: Compilation unit analysis terminated
1/14     PLS-00304: cannot compile body of 'PSGLOBAL' without its
         specification</PRE
></BLOCKQUOTE
><P
CLASS="para"
>So you have a line number and an error message. Unfortunately, it is difficult to use these line numbers, since they do not correspond directly to the line numbers in your file. They are always relative to a specific program or PL/SQL block (remember that you can have more than one such program unit in a file). Even within that block, you will find it difficult to correlate the line number with a particular PL/SQL statement. </P
><P
CLASS="para"
>But, wait, there is hope for those line numbers! Even if they do not match your source code, they do match the line numbers saved with the text of that module in the data dictionary view of source code. The next section shows how to query this view to identify the line of code corresponding to a line number. <A
CLASS="indexterm"
NAME="AUTOID-21706"
></A
> <A
CLASS="indexterm"
NAME="AUTOID-21707"
></A
> <A
CLASS="indexterm"
NAME="AUTOID-21708"
></A
> </P
></DIV
></DIV
><DIV
CLASS="htmlnav"
><P
></P
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch23_04.htm"
TITLE="23.4 Remote Procedure Calls"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 23.4 Remote Procedure Calls"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="book"
HREF="index.htm"
TITLE="Oracle PL/SQL Programming, 2nd Edition"
><IMG
SRC="../gifs/txthome.gif"
ALT="Oracle PL/SQL Programming, 2nd Edition"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch23_06.htm#SQL2-CH-23-SECT-6.3"
TITLE="23.6 Using SQL to Examine Stored Objects"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 23.6 Using SQL to Examine Stored Objects"
BORDER="0"></A
></TD
></TR
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
>23.4 Remote Procedure Calls</TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="index"
HREF="index/idx_0.htm"
TITLE="Book Index"
><IMG
SRC="../gifs/index.gif"
ALT="Book Index"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
>23.6 Using SQL to Examine Stored Objects</TD
></TR
></TABLE
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"></DIV
><IMG SRC="../gifs/smnavbar.gif"
USEMAP="#map"
BORDER="0"
ALT="The Oracle Library Navigation">

<P><font size="-1">
<a href="../copyrght.htm#copy">Copyright (c) 2000</a> O'Reilly &amp; Associates. All rights reserved.
</font></P>

<MAP NAME="map">

<AREA SHAPE="RECT"
COORDS="0,0,35,30"
HREF="../index.htm"
ALT="Library Home">

<AREA SHAPE="RECT"
COORDS="40,0,95,30"
HREF="index.htm"
ALT="Oracle PL/SQL Programming, 2nd. Ed.">

<AREA SHAPE="RECT"
COORDS="100,0,200,30"
HREF="../guide8i/index.htm"
ALT="Guide to Oracle 8i Features">

<AREA SHAPE="RECT"
COORDS="205,0,245,30"
HREF="../bipack/index.htm"
ALT="Oracle Built-in Packages">

<AREA SHAPE="RECT"
COORDS="250,0,320,30"
HREF="../advprog/index.htm"
ALT="Advanced PL/SQL Programming with Packages">

<AREA SHAPE="RECT"
COORDS="325,0,420,30"
HREF="../webapp/index.htm"
ALT="Oracle Web Applications">

<AREA SHAPE="RECT"
COORDS="425,0,490,30"
HREF="../langpkt/index.htm"
ALT="Oracle PL/SQL Language Pocket Reference">

<AREA SHAPE="RECT"
COORDS="495,0,570,30"
HREF="../bipkt/index.htm"
ALT="Oracle PL/SQL Built-ins Pocket Reference">
</MAP>

</BODY
>
<!-- Mirrored from liso.cs.pusan.ac.kr by HTTrack Website Copier/3.x [XR&CO'2001] -->
</HTML
>
