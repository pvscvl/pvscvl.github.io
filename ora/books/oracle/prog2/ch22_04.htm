<HTML
><HEAD
><TITLE
>[Chapter 22] 22.4 Be Wary of Modules Without Any Parameters </TITLE
><META
NAME="DC.Creator"
CONTENT="Steven Feuerstein &amp; Bill Pribyl"><META
NAME="DC.Date"
CONTENT="2000-04-29T19:12:00Z"><META
NAME="DC.Format"
CONTENT="text/html"
SCHEME="MIME"><META
NAME="DC.Identifier"
CONTENT="O'Reilly and Associates CD-ROM-1-56592-335-9E"><META
NAME="DC.Language"
CONTENT="en-US"><META
NAME="DC.Publisher"
CONTENT="O'Reilly &amp; Associates, Inc."><META
NAME="DC.Source"
CONTENT="1-56592-335-9E"
SCHEME="ISBN"><META
NAME="DC.Subject.Keyword"
CONTENT="Oracle PL/SQL"><META
NAME="DC.Title"
CONTENT="Oracle PL/SQL Programming, 2nd Edition"><META
NAME="DC.Type"
CONTENT="Text.Monograph"><META
NAME="generator"
CONTENT="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><LINK
REL="stylesheet"
TYPE="text/css"
HREF="../style/style1.css"><LINK
REV="made"
HREF="mailto:online-books@oreilly.com"
TITLE="Online Books Comments"><LINK
REL="up"
HREF="ch22_01.htm"
TITLE="22. Code Design Tips"><LINK
REL="prev"
HREF="ch22_03.htm"
TITLE="22.3 Take Full Advantage of Local Modularization"><LINK
REL="next"
HREF="ch22_05.htm#SQL2-CH-22-SECT-5.4"
TITLE="22.5 Create Independent Modules"></HEAD
><BODY
><DIV
CLASS="htmlnav"
><H1
><IMG
SRC="gifs/smbanner.gif"
ALT="Oracle PL/SQL Programming, 2nd Edition"
USEMAP="#srchmap"
BORDER="0"></H1
><MAP
NAME="srchmap"
><AREA
SHAPE="RECT"
COORDS="0,0,466,65"
HREF="index.htm"
ALT="Oracle PL/SQL Programming, 2nd Edition"><AREA
SHAPE="RECT"
COORDS="467,0,514,18"
HREF="jobjects/fsearch.htm"
ALT="Search this book"></MAP
><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch22_03.htm"
TITLE="22.3 Take Full Advantage of Local Modularization"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 22.3 Take Full Advantage of Local Modularization"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><SPAN
CLASS="NAVTITLE"
><A
CLASS="chapter"
REL="up"
HREF="ch22_01.htm"
TITLE="22. Code Design Tips"
>Chapter 22<BR>Code Design Tips</A
></SPAN
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch22_05.htm#SQL2-CH-22-SECT-5.4"
TITLE="22.5 Create Independent Modules"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 22.5 Create Independent Modules"
BORDER="0"></A
></TD
></TR
></TABLE
>&nbsp;<HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"></DIV
><DIV
CLASS="sect1"
><H2
CLASS="sect1"
><A
CLASS="title"
NAME="SQL2-CH-22-SECT-4"
>22.4 Be Wary of Modules Without Any Parameters </A
></H2
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="ch22-idx-908840-1"
></A
><A
CLASS="indexterm"
NAME="ch22-idx-908840-2"
></A
>While you certainly shouldn't create parameters where you don't need them, I have found that a lack of parameters in a module usually reflects a limited vision of how the module will be used. That limited vision generally translates directly to a limited use of the module.[<A
CLASS="footnote"
HREF="#AUTOID-20778"
>1</A
>] </P
><BLOCKQUOTE
CLASS="footnote"
><DIV
CLASS="footnote"
><P
CLASS="para"
><A
CLASS="footnote"
NAME="AUTOID-20778"
>[1]</A
> Very few modules truly have no input or output. Two examples of appropriate parameterless modules are a procedure that simply encapsulates a sequence of statements and a procedure that manipulates global variables. Such programs are the exception rather than the rule.</P
></DIV
></BLOCKQUOTE
><P
CLASS="para"
>In many of the cases, modules without parameter lists are fundamentally crippled&nbsp;-- they force a programmer to know about the internals of the module and therefore cannot act as true black boxes. This situation arises most often from an overreliance on global variables. </P
><P
CLASS="para"
>Consider the example of the parameterless company_name function shown here. This program is driven by an Oracle Forms global variable. It returns the name of the company corresponding to the company ID number in the global. </P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>FUNCTION company_name RETURN VARCHAR2
IS
   cname company.company_id%TYPE;
BEGIN
   SELECT name INTO cname FROM company
    WHERE company_id = :GLOBAL.company_id;
   RETURN cname;
EXCEPTION
   WHEN NO_DATA_FOUND THEN    RETURN NULL;
END;</PRE
></BLOCKQUOTE
><P
CLASS="para"
>This function works just fine, as long as I make sure that I have set the global variable to the appropriate company ID before I call the function. If I look only at the function's specification: </P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>FUNCTION company_name RETURN VARCHAR2</PRE
></BLOCKQUOTE
><P
CLASS="para"
>there is no way for me to know that the function requires a particular global variable. It simply tells me, "I will give you a company name." But for which company? The lack of a parameter renders this function largely unusable. </P
><P
CLASS="para"
>Fortunately, the situation is easily remedied. The version of company_name below takes a company ID number and returns the corresponding company name: </P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>FUNCTION company_name
   (company_id_in IN company.company_id%TYPE)
RETURN VARCHAR2
IS
   cname company.company_id%TYPE;
BEGIN
   SELECT name INTO cname FROM company
    WHERE company_id = company_id_in;
   RETURN cname;
EXCEPTION
   WHEN NO_DATA_FOUND THEN    RETURN NULL;
END;</PRE
></BLOCKQUOTE
><P
CLASS="para"
>Now, compare the specifications for these two versions of company_name: </P
><UL
CLASS="itemizedlist"
><LI
CLASS="listitem"
><P
CLASS="para"
>First, a function that hides source of primary key:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>FUNCTION company_name RETURN VARCHAR2;</PRE
></BLOCKQUOTE
></LI
><LI
CLASS="listitem"
><P
CLASS="para"
>Next, a function that requires input of primary key:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>FUNCTION company_name (company_id_in IN company.company_id%TYPE)
   RETURN VARCHAR2;</PRE
></BLOCKQUOTE
></LI
></UL
><P
CLASS="para"
>In the first case, I don't have any clue whatsoever about how I can provide the company ID to the function in order to look up the name. In order to use this version of company_name, I must either depend on external documentation, which states the reliance on :GLOBAL.company_id, or look at the body of the function. External documentation of modules is always something to be avoided, or at least kept to an absolute minimum. Because it is hard to maintain, it is often out of date. As for taking a peek at the body of the function, well, that simply isn't always possible and is never desirable. You should design your modules so that a developer needs nothing more than the specification in order to understand how to use that module. </P
><P
CLASS="para"
>In the second case, the specification is very explicit about needing a company ID number in order to look up the name. In the case of company_name, the company ID number is the "linkage" between the code calling company_name and the internal implementation of the function. </P
><P
CLASS="para"
>Whenever possible, you should make such linkages explicit and visible; the best way to do this is to place those items in the parameter list of the module.<A
CLASS="indexterm"
NAME="AUTOID-20799"
></A
> <A
CLASS="indexterm"
NAME="AUTOID-20800"
></A
> </P
></DIV
><DIV
CLASS="htmlnav"
><P
></P
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch22_03.htm"
TITLE="22.3 Take Full Advantage of Local Modularization"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 22.3 Take Full Advantage of Local Modularization"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="book"
HREF="index.htm"
TITLE="Oracle PL/SQL Programming, 2nd Edition"
><IMG
SRC="../gifs/txthome.gif"
ALT="Oracle PL/SQL Programming, 2nd Edition"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch22_05.htm#SQL2-CH-22-SECT-5.4"
TITLE="22.5 Create Independent Modules"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 22.5 Create Independent Modules"
BORDER="0"></A
></TD
></TR
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
>22.3 Take Full Advantage of Local Modularization</TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="index"
HREF="index/idx_0.htm"
TITLE="Book Index"
><IMG
SRC="../gifs/index.gif"
ALT="Book Index"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
>22.5 Create Independent Modules</TD
></TR
></TABLE
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"></DIV
><IMG SRC="../gifs/smnavbar.gif"
USEMAP="#map"
BORDER="0"
ALT="The Oracle Library Navigation">

<P><font size="-1">
<a href="../copyrght.htm#copy">Copyright (c) 2000</a> O'Reilly &amp; Associates. All rights reserved.
</font></P>

<MAP NAME="map">

<AREA SHAPE="RECT"
COORDS="0,0,35,30"
HREF="../index.htm"
ALT="Library Home">

<AREA SHAPE="RECT"
COORDS="40,0,95,30"
HREF="index.htm"
ALT="Oracle PL/SQL Programming, 2nd. Ed.">

<AREA SHAPE="RECT"
COORDS="100,0,200,30"
HREF="../guide8i/index.htm"
ALT="Guide to Oracle 8i Features">

<AREA SHAPE="RECT"
COORDS="205,0,245,30"
HREF="../bipack/index.htm"
ALT="Oracle Built-in Packages">

<AREA SHAPE="RECT"
COORDS="250,0,320,30"
HREF="../advprog/index.htm"
ALT="Advanced PL/SQL Programming with Packages">

<AREA SHAPE="RECT"
COORDS="325,0,420,30"
HREF="../webapp/index.htm"
ALT="Oracle Web Applications">

<AREA SHAPE="RECT"
COORDS="425,0,490,30"
HREF="../langpkt/index.htm"
ALT="Oracle PL/SQL Language Pocket Reference">

<AREA SHAPE="RECT"
COORDS="495,0,570,30"
HREF="../bipkt/index.htm"
ALT="Oracle PL/SQL Built-ins Pocket Reference">
</MAP>

</BODY
>
<!-- Mirrored from liso.cs.pusan.ac.kr by HTTrack Website Copier/3.x [XR&CO'2001] -->
</HTML
>
