<HTML
><HEAD
><TITLE
>[Chapter 26] 26.5 Quick-and-Dirty Tracing</TITLE
><META
NAME="DC.Creator"
CONTENT="Steven Feuerstein &amp; Bill Pribyl"><META
NAME="DC.Date"
CONTENT="2000-04-29T19:14:00Z"><META
NAME="DC.Format"
CONTENT="text/html"
SCHEME="MIME"><META
NAME="DC.Identifier"
CONTENT="O'Reilly and Associates CD-ROM-1-56592-335-9E"><META
NAME="DC.Language"
CONTENT="en-US"><META
NAME="DC.Publisher"
CONTENT="O'Reilly &amp; Associates, Inc."><META
NAME="DC.Source"
CONTENT="1-56592-335-9E"
SCHEME="ISBN"><META
NAME="DC.Subject.Keyword"
CONTENT="Oracle PL/SQL"><META
NAME="DC.Title"
CONTENT="Oracle PL/SQL Programming, 2nd Edition"><META
NAME="DC.Type"
CONTENT="Text.Monograph"><META
NAME="generator"
CONTENT="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><LINK
REL="stylesheet"
TYPE="text/css"
HREF="../style/style1.css"><LINK
REV="made"
HREF="mailto:online-books@oreilly.com"
TITLE="Online Books Comments"><LINK
REL="up"
HREF="ch26_01.htm"
TITLE="26. Tracing PL/SQL Execution"><LINK
REL="prev"
HREF="ch26_04.htm"
TITLE="26.4 Structured Interface Filtering"><LINK
REL="next"
HREF="part07.htm"
TITLE="VII. Appendixes"></HEAD
><BODY
><DIV
CLASS="htmlnav"
><H1
><IMG
SRC="gifs/smbanner.gif"
ALT="Oracle PL/SQL Programming, 2nd Edition"
USEMAP="#srchmap"
BORDER="0"></H1
><MAP
NAME="srchmap"
><AREA
SHAPE="RECT"
COORDS="0,0,466,65"
HREF="index.htm"
ALT="Oracle PL/SQL Programming, 2nd Edition"><AREA
SHAPE="RECT"
COORDS="467,0,514,18"
HREF="jobjects/fsearch.htm"
ALT="Search this book"></MAP
><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch26_04.htm"
TITLE="26.4 Structured Interface Filtering"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 26.4 Structured Interface Filtering"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><SPAN
CLASS="NAVTITLE"
><A
CLASS="chapter"
REL="up"
HREF="ch26_01.htm"
TITLE="26. Tracing PL/SQL Execution"
>Chapter 26<BR>Tracing PL/SQL Execution</A
></SPAN
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="part"
HREF="part07.htm"
TITLE="VII. Appendixes"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: VII. Appendixes"
BORDER="0"></A
></TD
></TR
></TABLE
>&nbsp;<HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"></DIV
><DIV
CLASS="sect1"
><H2
CLASS="sect1"
><A
CLASS="title"
NAME="SQL2-CH-26-SECT-5"
>26.5 Quick-and-Dirty Tracing</A
></H2
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="ch26-idx-998445-1"
></A
>I have found that in many situations, PL/SQL developers don't have the time or the access to tools to perform comprehensive tracing. Instead, they just need to get more information out of a specific package or program, and they need it right away. </P
><P
CLASS="para"
>Let's take a look at the options you have for some "quick-and-dirty" tracing. First of all, there is <A
CLASS="indexterm"
NAME="ch26-idx-998449-1"
></A
>DBMS_OUTPUT.PUT_LINE, a built-in which generates output from within a PL/SQL program. For example, if I executed in SQL*Plus the following block: </P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>BEGIN
   FOR emp_rec IN
      (SELECT ename, sal FROM emp ORDER BY sal DESC)
   LOOP
      DBMS_OUTPUT.PUT_LINE
         ('Employee ' || emp_rec.ename || ' earns ' ||
          TO_CHAR (emp_rec.sal) || ' dollars.');
   END LOOP;
END;
/</PRE
></BLOCKQUOTE
><P
CLASS="para"
>I would see the following output when the program terminated:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>Employee KING earns 5000 dollars.
Employee SCOTT earns 3000 dollars.
Employee JONES earns 2975 dollars.
Employee ADAMS earns 1100 dollars.
Employee JAMES earns 950 dollars.</PRE
></BLOCKQUOTE
><P
CLASS="para"
>You will only see trace information from DBMS_OUTPUT in SQL*Plus if you issue the following command: </P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>SQL&gt; set serveroutput on</PRE
></BLOCKQUOTE
><P
CLASS="para"
>This will enable the package within SQL*Plus. You can also set the buffer which contains trace information to its maximum size of 1MB as follows: </P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>SQL&gt; set serveroutput on size 1000000</PRE
></BLOCKQUOTE
><P
CLASS="para"
>Finally, if you are running Oracle Server 7.3 and above, you can also request that output from DBMS_OUTPUT.PUT_LINE be "wrapped" so that leading blanks are not trimmed and long lines are wrapped within the SQL*Plus linesize: </P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>SQL&gt; set serveroutput on size 1000000 format wrapped</PRE
></BLOCKQUOTE
><P
CLASS="para"
>So <A
CLASS="indexterm"
NAME="AUTOID-23562"
></A
> DBMS_OUTPUT does give you the flexibility of <A
CLASS="indexterm"
NAME="AUTOID-23563"
></A
>embedding trace calls inside your program, but only seeing the output when you have SET SERVEROUTPUT ON. It is, unfortunately, an all-or-nothing proposition with this package. You see no messages or you see all messages. Using DBMS_OUTPUT.PUT_LINE "in the raw" as a trace mechanism therefore leaves much to be desired. (Well, to be honest, when talking about the inadequacies of DBMS_OUTPUT, one would also have to mention that it can only display a maximum of 255 bytes per call, that it does not display Booleans or combinations of data, and that it will not work in the Oracle Developer/2000 environment nor in Oracle WebServer.)[<A
CLASS="footnote"
HREF="#AUTOID-23566"
>2</A
>] </P
><BLOCKQUOTE
CLASS="footnote"
><DIV
CLASS="footnote"
><P
CLASS="para"
><A
CLASS="footnote"
NAME="AUTOID-23566"
>[2]</A
> See <CITE
CLASS="citetitle"
>Chapter 7</CITE
> of my book on packages, <CITE
CLASS="citetitle"
>Advanced Oracle PL/SQL Programming with Packages</CITE
>, for details about the usage of DBMS_OUTPUT.PUT_LINE.</P
></DIV
></BLOCKQUOTE
><P
CLASS="para"
>Ideally, you would like to be able to set up a trace mechanism so that you can see information about only this package or that procedure. The best way to do that is to set up a "toggle" within a package. Let's step through a simple example to make the technique clear. </P
><P
CLASS="para"
>Suppose I have a package which assigns a value to a package variable (which must be defined in the package specification) using dynamic SQL execution. (This is similar to the indirect referencing available in Oracle Forms with COPY and NAME_IN.) The specification and body of such a package is shown below: </P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>/* filename on companion disk: dynvar.spp */
CREATE OR REPLACE PACKAGE dynvar
IS
   PROCEDURE assign (var_in IN VARCHAR2, val_in IN VARCHAR2);
   FUNCTION val (var_in IN VARCHAR2) RETURN VARCHAR2;
END dynvar;
/
CREATE OR REPLACE PACKAGE BODY dynvar
IS
   PROCEDURE assign (var_in IN VARCHAR2, val_in IN VARCHAR2)
   IS
      cur INTEGER;
      fdbk INTEGER;
   BEGIN
      cur := DBMS_SQL.OPEN_CURSOR;
      DBMS_SQL.PARSE (cur,
         'BEGIN ' || var_in || ' := :val; END;', DBMS_SQL.NATIVE);
      DBMS_SQL.BIND_VARIABLE (cur, 'val', val_in, 2000);
      fdbk := DBMS_SQL.EXECUTE (cur);
      DBMS_SQL.CLOSE_CURSOR (cur);
   END;

   FUNCTION val (var_in IN VARCHAR2) RETURN VARCHAR2
   IS
      cur INTEGER;
      fdbk INTEGER;
      retval VARCHAR2(2000);
   BEGIN
      cur := DBMS_SQL.OPEN_CURSOR;
      DBMS_SQL.PARSE
         (cur, 'BEGIN :val := ' || var_in || '; END;', DBMS_SQL.NATIVE);
      DBMS_SQL.BIND_VARIABLE (cur, 'val', var_in, 2000);
      fdbk := DBMS_SQL.EXECUTE (cur);
      DBMS_SQL.VARIABLE_VALUE (cur, 'val', retval);
      DBMS_SQL.CLOSE_CURSOR (cur);
      RETURN retval;
   END;

END dynvar;
/</PRE
></BLOCKQUOTE
><P
CLASS="para"
>Here is a little test package and some program calls in SQL*Plus to give you a sense of how it would work: </P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>CREATE OR REPLACE PACKAGE TSTVAR
IS
    str1 varchar2(2000);
    str2 varchar2(2000);
END;
/

SQL&gt; exec dynvar.assign ('tstvar.str1', 'abc')

SQL&gt; exec dbms_output.put_line (tstvar.str1)
abc

SQL&gt; exec dbms_output.put_line (dynvar.val ('tstvar.str1'))
abc</PRE
></BLOCKQUOTE
><P
CLASS="para"
>This package seems to work just fine. When working with dynamic SQL and PL/SQL, however, the trickiest aspect of the package might not be building it, but <EM
CLASS="emphasis"
>using</EM
> it. The user of dynvar must construct the package variable's name properly and if she gets it wrong, she will get all sorts of interesting but confusing errors. Let's add a trace feature to dynvar so that when a user has trouble, she can very selectively activate trace just for this package and the dynamic management of package globals. </P
><P
CLASS="para"
>First, I will add my toggle to the package specification:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>CREATE OR REPLACE PACKAGE dynvar
IS
   PROCEDURE assign (var_in IN VARCHAR2, val_in IN VARCHAR2);
   FUNCTION val (var_in IN VARCHAR2) RETURN VARCHAR2;

   PROCEDURE trc;
   PROCEDURE notrc;
   FUNCTION tracing RETURN BOOLEAN;

END dynvar;
/</PRE
></BLOCKQUOTE
><P
CLASS="para"
>I turn on trace for this package with the following command:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>SQL&gt; exec dynvar.trc</PRE
></BLOCKQUOTE
><P
CLASS="para"
> Similarly, I can turn off trace with this command:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>SQL&gt; exec dynvar.notrc</PRE
></BLOCKQUOTE
><P
CLASS="para"
>The implementation of this toggle in the package body is very straightforward: </P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>CREATE OR REPLACE PACKAGE BODY dynvar
IS
   g_trc BOOLEAN := FALSE;
   PROCEDURE trc IS BEGIN g_trc := TRUE; END;
   PROCEDURE notrc IS BEGIN g_trc := FALSE; END;
   FUNCTION tracing RETURN BOOLEAN IS BEGIN RETURN g_trc; END;

   . . .
END dynvar;</PRE
></BLOCKQUOTE
><P
CLASS="para"
>I establish a private global variable to hold the trace setting (default is "off"). When you call dynvar.trc, the variable is set to TRUE or "on." Now the question is this: how do I put this toggle to use inside the assign and val programs? Right after the BEGIN statement in each program, I will add a conditional clause. If tracing is turned on, then I display a message: </P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>CREATE OR REPLACE PACKAGE BODY dynvar
IS
   PROCEDURE assign (var_in IN VARCHAR2, val_in IN VARCHAR2)
   IS
      cur INTEGER;
      fdbk INTEGER;
   BEGIN
      IF tracing
      THEN
         DBMS_OUTPUT.PUT_LINE
            ('dynvar assigning ' || val_in || ' to ' || var_in);
      END IF;

      /* same dynamic PL/SQL as before */
   END;

   FUNCTION val (var_in IN VARCHAR2) RETURN VARCHAR2
   IS
      /* same declarations as before */
   BEGIN
      IF debuging
      THEN
         DBMS_OUTPUT.PUT_LINE ('dynvar retrieving value of ' || var_in);
      END IF;

      /* same dynamic PL/SQL as before */
   END;

END dynvar;
/</PRE
></BLOCKQUOTE
><P
CLASS="para"
>With this new version of the dynvar package installed, I can then turn on trace and get feedback each time either of the package's programs are executed: </P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>SQL&gt; set serveroutput on
SQL&gt; exec dynvar.trc

SQL&gt; exec dynvar.assign ('tstvar.str1', 'abc')
dynvar assigning abc to tstvar.str1

SQL&gt; exec p.l(dynvar.val ('tstvar.str1'))
dynvar retrieving value of tstvar.str1
abc</PRE
></BLOCKQUOTE
><P
CLASS="para"
>Of course in the "real world," you will want to enhance the information displayed with the context in which these programs were called (perhaps a date-time stamp and so forth). This should, however, give you a flavor of the basic technique and how to employ it.<A
CLASS="indexterm"
NAME="AUTOID-23590"
></A
> </P
><BLOCKQUOTE
CLASS="note"
><P
CLASS="para"
><STRONG
>NOTE:</STRONG
> Intrigued by dynvar? You will find more information about dynamic PL/SQL in <CITE
CLASS="citetitle"
>Oracle Built-in Packages</CITE
>. You can also overload the dynvar package to perform assignments and retrievals for dates, numbers, and so on in their native formats.<A
CLASS="indexterm"
NAME="AUTOID-23594"
></A
> <A
CLASS="indexterm"
NAME="AUTOID-23595"
></A
> <A
CLASS="indexterm"
NAME="AUTOID-23596"
></A
> <A
CLASS="indexterm"
NAME="AUTOID-23597"
></A
></P
></BLOCKQUOTE
></DIV
><DIV
CLASS="htmlnav"
><P
></P
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch26_04.htm"
TITLE="26.4 Structured Interface Filtering"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 26.4 Structured Interface Filtering"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="book"
HREF="index.htm"
TITLE="Oracle PL/SQL Programming, 2nd Edition"
><IMG
SRC="../gifs/txthome.gif"
ALT="Oracle PL/SQL Programming, 2nd Edition"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="part"
HREF="part07.htm"
TITLE="VII. Appendixes"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: VII. Appendixes"
BORDER="0"></A
></TD
></TR
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
>26.4 Structured Interface Filtering</TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="index"
HREF="index/idx_0.htm"
TITLE="Book Index"
><IMG
SRC="../gifs/index.gif"
ALT="Book Index"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
>VII. Appendixes</TD
></TR
></TABLE
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"></DIV
><IMG SRC="../gifs/smnavbar.gif"
USEMAP="#map"
BORDER="0"
ALT="The Oracle Library Navigation">

<P><font size="-1">
<a href="../copyrght.htm#copy">Copyright (c) 2000</a> O'Reilly &amp; Associates. All rights reserved.
</font></P>

<MAP NAME="map">

<AREA SHAPE="RECT"
COORDS="0,0,35,30"
HREF="../index.htm"
ALT="Library Home">

<AREA SHAPE="RECT"
COORDS="40,0,95,30"
HREF="index.htm"
ALT="Oracle PL/SQL Programming, 2nd. Ed.">

<AREA SHAPE="RECT"
COORDS="100,0,200,30"
HREF="../guide8i/index.htm"
ALT="Guide to Oracle 8i Features">

<AREA SHAPE="RECT"
COORDS="205,0,245,30"
HREF="../bipack/index.htm"
ALT="Oracle Built-in Packages">

<AREA SHAPE="RECT"
COORDS="250,0,320,30"
HREF="../advprog/index.htm"
ALT="Advanced PL/SQL Programming with Packages">

<AREA SHAPE="RECT"
COORDS="325,0,420,30"
HREF="../webapp/index.htm"
ALT="Oracle Web Applications">

<AREA SHAPE="RECT"
COORDS="425,0,490,30"
HREF="../langpkt/index.htm"
ALT="Oracle PL/SQL Language Pocket Reference">

<AREA SHAPE="RECT"
COORDS="495,0,570,30"
HREF="../bipkt/index.htm"
ALT="Oracle PL/SQL Built-ins Pocket Reference">
</MAP>

</BODY
>
<!-- Mirrored from liso.cs.pusan.ac.kr by HTTrack Website Copier/3.x [XR&CO'2001] -->
</HTML
>
