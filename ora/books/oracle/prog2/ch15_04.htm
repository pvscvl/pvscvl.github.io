<HTML
><HEAD
><TITLE
>[Chapter 15] 15.4 Procedures</TITLE
><META
NAME="DC.Creator"
CONTENT="Steven Feuerstein &amp; Bill Pribyl"><META
NAME="DC.Date"
CONTENT="2000-04-29T19:03:15Z"><META
NAME="DC.Format"
CONTENT="text/html"
SCHEME="MIME"><META
NAME="DC.Identifier"
CONTENT="O'Reilly and Associates CD-ROM-1-56592-335-9E"><META
NAME="DC.Language"
CONTENT="en-US"><META
NAME="DC.Publisher"
CONTENT="O'Reilly &amp; Associates, Inc."><META
NAME="DC.Source"
CONTENT="1-56592-335-9E"
SCHEME="ISBN"><META
NAME="DC.Subject.Keyword"
CONTENT="Oracle PL/SQL"><META
NAME="DC.Title"
CONTENT="Oracle PL/SQL Programming, 2nd Edition"><META
NAME="DC.Type"
CONTENT="Text.Monograph"><META
NAME="generator"
CONTENT="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><LINK
REL="stylesheet"
TYPE="text/css"
HREF="../style/style1.css"><LINK
REV="made"
HREF="mailto:online-books@oreilly.com"
TITLE="Online Books Comments"><LINK
REL="up"
HREF="ch15_01.htm"
TITLE="15. Procedures and Functions"><LINK
REL="prev"
HREF="ch15_03.htm"
TITLE="15.3 The Anonymous PL/SQL Block"><LINK
REL="next"
HREF="ch15_05.htm#SQL2-CH-15-SECT-5.3"
TITLE="15.5 Functions"></HEAD
><BODY
><DIV
CLASS="htmlnav"
><H1
><IMG
SRC="gifs/smbanner.gif"
ALT="Oracle PL/SQL Programming, 2nd Edition"
USEMAP="#srchmap"
BORDER="0"></H1
><MAP
NAME="srchmap"
><AREA
SHAPE="RECT"
COORDS="0,0,466,65"
HREF="index.htm"
ALT="Oracle PL/SQL Programming, 2nd Edition"><AREA
SHAPE="RECT"
COORDS="467,0,514,18"
HREF="jobjects/fsearch.htm"
ALT="Search this book"></MAP
><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch15_03.htm"
TITLE="15.3 The Anonymous PL/SQL Block"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 15.3 The Anonymous PL/SQL Block"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><SPAN
CLASS="NAVTITLE"
><A
CLASS="chapter"
REL="up"
HREF="ch15_01.htm"
TITLE="15. Procedures and Functions"
>Chapter 15<BR>Procedures and Functions</A
></SPAN
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch15_05.htm#SQL2-CH-15-SECT-5.3"
TITLE="15.5 Functions"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 15.5 Functions"
BORDER="0"></A
></TD
></TR
></TABLE
>&nbsp;<HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"></DIV
><DIV
CLASS="sect1"
><H2
CLASS="sect1"
><A
CLASS="title"
NAME="SQL2-CH-15-SECT-4"
>15.4 Procedures</A
></H2
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="ch15-idx-948962-1"
></A
>A procedure is a module performing one or more actions. Because a procedure is a standalone executable statement in PL/SQL, a PL/SQL block could consist of nothing more than a single call to a procedure. Procedures are key building blocks of modular code, allowing you to both consolidate and reuse your program logic. </P
><P
CLASS="para"
>The general format of a PL/SQL procedure is as follows:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>PROCEDURE name [ ( parameter [, parameter ... ] ) ]
IS
   [declaration statements]

BEGIN
   executable-statements

[ EXCEPTION
     exception handler statements]

END [ name ];</PRE
></BLOCKQUOTE
><P
CLASS="para"
>where each component is used in the following ways:</P
><DL
CLASS="variablelist"
><DT
CLASS="term"
><EM
CLASS="emphasis"
>name</EM
> </DT
><DD
CLASS="listitem"
><P
CLASS="para"
>The name of the procedure comes directly after the keyword PROCEDURE.</P
></DD
><DT
CLASS="term"
><EM
CLASS="emphasis"
>parameters</EM
> </DT
><DD
CLASS="listitem"
><P
CLASS="para"
>An optional list of parameters that you define to both pass information into the procedure and send information out of the procedure, back to the calling program. </P
></DD
><DT
CLASS="term"
><EM
CLASS="emphasis"
>declaration statements</EM
> </DT
><DD
CLASS="listitem"
><P
CLASS="para"
>The declarations of local identifiers for that procedure. If you do not have any declarations, then there will not be any statements between the IS and BEGIN statements. </P
></DD
><DT
CLASS="term"
><EM
CLASS="emphasis"
>executable statements</EM
> </DT
><DD
CLASS="listitem"
><P
CLASS="para"
>The statements that the procedure executes when it is called. You must have at least one executable statement after the BEGIN and before the END or EXCEPTION keywords. </P
></DD
><DT
CLASS="term"
><EM
CLASS="emphasis"
>exception handler statements</EM
> </DT
><DD
CLASS="listitem"
><P
CLASS="para"
>The optional exception handlers for the procedure. If you do not explicitly handle any exceptions, then you can leave out the EXCEPTION keyword and simply terminate the execution section with the END keyword. </P
></DD
></DL
><P
CLASS="para"
><A
CLASS="xref"
HREF="ch15_04.htm#SQL2-CH-15-SECT-4.4"
>Figure 15.9</A
> shows the apply_discount procedure, which contains all four sections of the named PL/SQL block, as well as a parameter list. </P
><H4
CLASS="figure"
><A
CLASS="title"
NAME="SQL2-CH-15-FIG-9"
>Figure 15.9: The apply_discount procedure</A
></H4
><IMG
CLASS="graphic"
SRC="figs/sql2.1509.gif"
ALT="Figure 15.9"><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="SQL2-CH-15-SECT-4.1"
>15.4.1 Calling a Procedure</A
></H3
><P
CLASS="para"
>A procedure is called as an executable PL/SQL statement. In other words, a call to a procedure must end with a semicolon (<B
CLASS="emphasis.bold"
>;</B
>) and be executed before and after other SQL or PL/SQL statements. </P
><P
CLASS="para"
>The following executable statement runs the apply_discount procedure:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>apply_discount( new_company_id, 0.15 );  -- 15% discount</PRE
></BLOCKQUOTE
><P
CLASS="para"
>If the procedure does not have any parameters, then you must call the procedure without any parentheses: </P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>display_store_summary;</PRE
></BLOCKQUOTE
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="SQL2-CH-15-SECT-4.2"
>15.4.2 Procedure Header</A
></H3
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="AUTOID-13636"
></A
> <A
CLASS="indexterm"
NAME="AUTOID-13639"
></A
> The portion of the procedure definition that comes before the IS keyword is called the procedure header. The header provides all the information a programmer needs to call that procedure, namely: </P
><UL
CLASS="itemizedlist"
><LI
CLASS="listitem"
><P
CLASS="para"
>The procedure name</P
></LI
><LI
CLASS="listitem"
><P
CLASS="para"
>The parameter list, if any</P
></LI
></UL
><P
CLASS="para"
>A programmer does not need to know about the inside of the procedure in order to be able to call it properly from another program. </P
><P
CLASS="para"
>The header for the apply_discount procedure discussed above is:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>PROCEDURE apply_discount
   (company_id_in IN company.company_id%TYPE,
    discount_in IN NUMBER)</PRE
></BLOCKQUOTE
><P
CLASS="para"
>It consists of the module type, the name, and a list of two parameters. </P
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="SQL2-CH-15-SECT-4.3"
>15.4.3 Procedure Body</A
></H3
><P
CLASS="para"
>The body of the procedure is the code required to implement the procedure. It consists of the declaration, execution, and exception sections of the function. Everything after the IS keyword in the procedure makes up that procedure's body. </P
><P
CLASS="para"
>Once again, the declaration and exception sections are optional. If you have no exception handlers, you will leave off the EXCEPTION keyword and simply enter the END statement to terminate the procedure. </P
><P
CLASS="para"
>If you do not have any declarations, the BEGIN statement simply follows immediately after the IS keyword (see the do_nothing procedure below for an example of this structure.). </P
><P
CLASS="para"
>You must supply at least one executable statement in a procedure. Here is my candidate for the procedure in PL/SQL with the smallest possible body: </P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>PROCEDURE do_nothing IS
BEGIN
   NULL;
END;</PRE
></BLOCKQUOTE
><P
CLASS="para"
>Does the do_nothing procedure seem silly? A procedure that doesn't do anything can, in fact, be very useful when you are creating stubs for modules in a top-down design effort. I have also used this kind of procedure when building templates. My do_nothing procedure acts initially as a placeholder in my code, but then also provides a mechanism for customization of the templates. </P
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="SQL2-CH-15-SECT-4.4"
>15.4.4 The END Label</A
></H3
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="AUTOID-13662"
></A
>You can append the name of the procedure directly after the END keyword when you complete your procedure, as shown below: </P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>PROCEDURE display_stores (region_in IN VARCHAR2) IS
BEGIN
   ...
END display_stores;</PRE
></BLOCKQUOTE
><P
CLASS="para"
>This name serves as a label that explicitly links up the end of the program with its beginning. You should as a matter of habit use an END label. It is especially important to do so when you have a procedure that spans more than a single page, or is one in a series of procedures and functions in a package body. </P
></DIV
></DIV
><DIV
CLASS="htmlnav"
><P
></P
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch15_03.htm"
TITLE="15.3 The Anonymous PL/SQL Block"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 15.3 The Anonymous PL/SQL Block"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="book"
HREF="index.htm"
TITLE="Oracle PL/SQL Programming, 2nd Edition"
><IMG
SRC="../gifs/txthome.gif"
ALT="Oracle PL/SQL Programming, 2nd Edition"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch15_05.htm#SQL2-CH-15-SECT-5.3"
TITLE="15.5 Functions"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 15.5 Functions"
BORDER="0"></A
></TD
></TR
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
>15.3 The Anonymous PL/SQL Block</TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="index"
HREF="index/idx_0.htm"
TITLE="Book Index"
><IMG
SRC="../gifs/index.gif"
ALT="Book Index"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
>15.5 Functions</TD
></TR
></TABLE
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"></DIV
><IMG SRC="../gifs/smnavbar.gif"
USEMAP="#map"
BORDER="0"
ALT="The Oracle Library Navigation">

<P><font size="-1">
<a href="../copyrght.htm#copy">Copyright (c) 2000</a> O'Reilly &amp; Associates. All rights reserved.
</font></P>

<MAP NAME="map">

<AREA SHAPE="RECT"
COORDS="0,0,35,30"
HREF="../index.htm"
ALT="Library Home">

<AREA SHAPE="RECT"
COORDS="40,0,95,30"
HREF="index.htm"
ALT="Oracle PL/SQL Programming, 2nd. Ed.">

<AREA SHAPE="RECT"
COORDS="100,0,200,30"
HREF="../guide8i/index.htm"
ALT="Guide to Oracle 8i Features">

<AREA SHAPE="RECT"
COORDS="205,0,245,30"
HREF="../bipack/index.htm"
ALT="Oracle Built-in Packages">

<AREA SHAPE="RECT"
COORDS="250,0,320,30"
HREF="../advprog/index.htm"
ALT="Advanced PL/SQL Programming with Packages">

<AREA SHAPE="RECT"
COORDS="325,0,420,30"
HREF="../webapp/index.htm"
ALT="Oracle Web Applications">

<AREA SHAPE="RECT"
COORDS="425,0,490,30"
HREF="../langpkt/index.htm"
ALT="Oracle PL/SQL Language Pocket Reference">

<AREA SHAPE="RECT"
COORDS="495,0,570,30"
HREF="../bipkt/index.htm"
ALT="Oracle PL/SQL Built-ins Pocket Reference">
</MAP>

</BODY
>
<!-- Mirrored from liso.cs.pusan.ac.kr by HTTrack Website Copier/3.x [XR&CO'2001] -->
</HTML
>
