<HTML
><HEAD
><TITLE
>[Chapter 16] 16.6 Package Initialization</TITLE
><META
NAME="DC.Creator"
CONTENT="Steven Feuerstein &amp; Bill Pribyl"><META
NAME="DC.Date"
CONTENT="2000-04-29T19:04:39Z"><META
NAME="DC.Format"
CONTENT="text/html"
SCHEME="MIME"><META
NAME="DC.Identifier"
CONTENT="O'Reilly and Associates CD-ROM-1-56592-335-9E"><META
NAME="DC.Language"
CONTENT="en-US"><META
NAME="DC.Publisher"
CONTENT="O'Reilly &amp; Associates, Inc."><META
NAME="DC.Source"
CONTENT="1-56592-335-9E"
SCHEME="ISBN"><META
NAME="DC.Subject.Keyword"
CONTENT="Oracle PL/SQL"><META
NAME="DC.Title"
CONTENT="Oracle PL/SQL Programming, 2nd Edition"><META
NAME="DC.Type"
CONTENT="Text.Monograph"><META
NAME="generator"
CONTENT="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><LINK
REL="stylesheet"
TYPE="text/css"
HREF="../style/style1.css"><LINK
REV="made"
HREF="mailto:online-books@oreilly.com"
TITLE="Online Books Comments"><LINK
REL="up"
HREF="ch16_01.htm"
TITLE="16. Packages"><LINK
REL="prev"
HREF="ch16_05.htm#SQL2-CH-16-SECT-5.2"
TITLE="16.5 Package Data"><LINK
REL="next"
HREF="ch17_01.htm"
TITLE="17. Calling PL/SQL Functions in SQL"></HEAD
><BODY
><DIV
CLASS="htmlnav"
><H1
><IMG
SRC="gifs/smbanner.gif"
ALT="Oracle PL/SQL Programming, 2nd Edition"
USEMAP="#srchmap"
BORDER="0"></H1
><MAP
NAME="srchmap"
><AREA
SHAPE="RECT"
COORDS="0,0,466,65"
HREF="index.htm"
ALT="Oracle PL/SQL Programming, 2nd Edition"><AREA
SHAPE="RECT"
COORDS="467,0,514,18"
HREF="jobjects/fsearch.htm"
ALT="Search this book"></MAP
><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch16_05.htm#SQL2-CH-16-SECT-5.2"
TITLE="16.5 Package Data"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 16.5 Package Data"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><SPAN
CLASS="NAVTITLE"
><A
CLASS="chapter"
REL="up"
HREF="ch16_01.htm"
TITLE="16. Packages"
>Chapter 16<BR>Packages</A
></SPAN
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="chapter"
HREF="ch17_01.htm"
TITLE="17. Calling PL/SQL Functions in SQL"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 17. Calling PL/SQL Functions in SQL"
BORDER="0"></A
></TD
></TR
></TABLE
>&nbsp;<HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"></DIV
><DIV
CLASS="sect1"
><H2
CLASS="sect1"
><A
CLASS="title"
NAME="SQL2-CH-16-SECT-6"
>16.6 Package Initialization</A
></H2
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="ch16-idx-333158-1"
></A
> <A
CLASS="indexterm"
NAME="ch16-idx-333158-2"
></A
> The first time your application makes a reference to a package element, the entire package (in pre-compiled form) is loaded into the SGA of the database instance, making all objects immediately available in memory. You can supplement this automatic instantiation of the package code with the automatic execution of initialization code for the package. This initialization code is contained in the optional initialization section of the package body. </P
><P
CLASS="para"
>The initialization section consists of all statements following the BEGIN statement through the END statement for the entire package body. It is called the initialization section because the statements in this section are executed only once, the first time an object in the package is referenced (a program is called, a cursor is opened, or a variable is used in an assignment, to name a few possibilities). The initialization section initializes the package; it is commonly used to set values for variables declared and referenced in the package. </P
><P
CLASS="para"
>The initialization section is a powerful mechanism: PL/SQL detects automatically when this code should be run. You do not have to explicitly execute the statements, and you can be sure they are run only once. </P
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="SQL2-CH-16-SECT-6.1"
>16.6.1 Drawbacks of Package Initialization</A
></H3
><P
CLASS="para"
>There are some disadvantages to the initialization section. </P
><UL
CLASS="itemizedlist"
><LI
CLASS="listitem"
><P
CLASS="para"
>It can be dangerous to have your tool perform actions for you that are not explicitly triggered by a user or developer action. </P
></LI
><LI
CLASS="listitem"
><P
CLASS="para"
>It is harder to trace actions triggered automatically by the tool ("Now where does that variable get set? How did that record get inserted into that table? I don't see it in any of my code!"). </P
></LI
><LI
CLASS="listitem"
><P
CLASS="para"
>Executable statements buried in initialization sections are much harder to maintain; what are the chances that a new developer will think to search the ends of packages for the cause of (or solution to) a problem? </P
></LI
></UL
><P
CLASS="para"
>In my experience, the initialization section is rarely used. By and large, you spend most of your package development time in the declaration area of the package body, since you use the package mostly to define modules, which can then be called outside of the package. </P
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="SQL2-CH-16-SECT-6.2"
>16.6.2 Use Initialization Section for Complex Logic</A
></H3
><P
CLASS="para"
>Use the initialization section only when you need to set the initial values of package elements using rules and complex logic that cannot be handled in the default value syntax for variables. You do not need an initialization section to set the value of the constant earliest_date to today's date. Instead, simply declare the variable with a default value. The straightforward declaration in the package specification looks like this: </P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>PACKAGE config_pkg
IS
   earliest_date CONSTANT DATE := SYSDATE;
END config_pkg;</PRE
></BLOCKQUOTE
><P
CLASS="para"
>and should always be used in place of something like this:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>PACKAGE config_pkg
IS
   earliest_date DATE;
END config_pkg;

PACKAGE BODY config_pkg
/*
|| This package body only exists to provide an initial value for the
|| earliest_date variable. This could have been done in the declaration
|| itself. This is not a justifiable use of an initialization section.
*/
IS
BEGIN
   earliest_date := SYSDATE;
END config_pkg;</PRE
></BLOCKQUOTE
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="SQL2-CH-16-SECT-6.3"
>16.6.3 Side Effects</A
></H3
><P
CLASS="para"
>Avoid setting the values of package global data from other packages within the initialization section. This precaution could prevent havoc in code execution and confusion for maintenance programmers. As the following example demonstrates, keep the initialization section code focused on the current package so it can get its job done. Remember: this code is executed whenever your application first tries to use the package element. You don't want to have your users sitting idle while the package performs some snazzy, expensive setup computations that could be parceled out to different packages or even triggers in the application. </P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>PACKAGE BODY company IS
BEGIN
   /*
   || Initialization section of company_pkg updates the global
   || package data of another package. This is a no-no!
   */
   SELECT SUM (salary)
     INTO employee_pkg.max_salary
     FROM employee;

END company;</PRE
></BLOCKQUOTE
><P
CLASS="para"
>If your initialization requirements do not fit within the above guidelines, you should consider alternatives to the initialization section, such as grouping your startup statements together into a procedure in the package. Give the procedure a name like init_environment. Then, at the appropriate initialization point in your application, call the init_environment procedure to set up your session. </P
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="SQL2-CH-16-SECT-6.4"
>16.6.4 Load Session Data in Initialization Section</A
></H3
><P
CLASS="para"
>A perfectly legitimate use of the initialization section is shown below for the session_pkg. This package contains information about the current user session&nbsp;-- the name of the user, the Oracle account name, user preferences, and so forth. All the package global variables are set the very first time any of the variables are referenced in an application's code. I need to use an initialization section because most (but not all) of the user information is stored in a table. </P
><P
CLASS="para"
>The package specification declares all the variables and sets whatever values it can: </P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>PACKAGE session_pkg
IS
   user_name VARCHAR2 (80);
   user_id VARCHAR2 (10) := USER;
   show_lov VARCHAR2 (1);
   show_toolbar VARCHAR2 (1);
   printer VARCHAR2 (30);

END session_pkg;</PRE
></BLOCKQUOTE
><P
CLASS="para"
>The package body selects the data from the table to fill in the remaining values. If no match is found for the current user, an exception section traps that problem and assigns default values for an "unregistered" user. If any other exception is raised, then RAISE_APPLICATION_ERROR communicates the problem back to the calling program and most likely halts execution of the application, as shown in this example: </P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>PACKAGE BODY session_pkg
/*
|| Look, Ma! No declarations in the package body at all!
|| Just an initialization section to support the specification.
*/
IS
BEGIN
   SELECT first_name || ' ' || last_name,
          show_lov_flag,
          show_toolbar_flag,
          default_printer
     INTO user_name, user_id, show_lov, show_toolbar, printer
     FROM user_config
    WHERE user_id = USER;

EXCEPTION
   WHEN NO_DATA_FOUND
   THEN
      /* No record in config table for this user. */
      user_name:= 'NOT REGISTERED';
      show_lov:= 'Y';
      show_toolbar:= 'Y';
      printer:= 'lpt1';

   WHEN OTHERS
   THEN
      /* Display generic error for unknown problem */
      RAISE_APPLICATION_ERROR
            (-20000, 'Problem obtaining user profile for ' || USER);

END session_pkg; <A
CLASS="indexterm"
NAME="AUTOID-14906"
></A
>
<A
CLASS="indexterm"
NAME="AUTOID-14907"
></A
>
<A
CLASS="indexterm"
NAME="AUTOID-14908"
></A
>
<A
CLASS="indexterm"
NAME="AUTOID-14909"
></A
></PRE
></BLOCKQUOTE
></DIV
></DIV
><DIV
CLASS="htmlnav"
><P
></P
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch16_05.htm#SQL2-CH-16-SECT-5.2"
TITLE="16.5 Package Data"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 16.5 Package Data"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="book"
HREF="index.htm"
TITLE="Oracle PL/SQL Programming, 2nd Edition"
><IMG
SRC="../gifs/txthome.gif"
ALT="Oracle PL/SQL Programming, 2nd Edition"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="chapter"
HREF="ch17_01.htm"
TITLE="17. Calling PL/SQL Functions in SQL"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 17. Calling PL/SQL Functions in SQL"
BORDER="0"></A
></TD
></TR
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
>16.5 Package Data</TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="index"
HREF="index/idx_0.htm"
TITLE="Book Index"
><IMG
SRC="../gifs/index.gif"
ALT="Book Index"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
>17. Calling PL/SQL Functions in SQL</TD
></TR
></TABLE
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"></DIV
><IMG SRC="../gifs/smnavbar.gif"
USEMAP="#map"
BORDER="0"
ALT="The Oracle Library Navigation">

<P><font size="-1">
<a href="../copyrght.htm#copy">Copyright (c) 2000</a> O'Reilly &amp; Associates. All rights reserved.
</font></P>

<MAP NAME="map">

<AREA SHAPE="RECT"
COORDS="0,0,35,30"
HREF="../index.htm"
ALT="Library Home">

<AREA SHAPE="RECT"
COORDS="40,0,95,30"
HREF="index.htm"
ALT="Oracle PL/SQL Programming, 2nd. Ed.">

<AREA SHAPE="RECT"
COORDS="100,0,200,30"
HREF="../guide8i/index.htm"
ALT="Guide to Oracle 8i Features">

<AREA SHAPE="RECT"
COORDS="205,0,245,30"
HREF="../bipack/index.htm"
ALT="Oracle Built-in Packages">

<AREA SHAPE="RECT"
COORDS="250,0,320,30"
HREF="../advprog/index.htm"
ALT="Advanced PL/SQL Programming with Packages">

<AREA SHAPE="RECT"
COORDS="325,0,420,30"
HREF="../webapp/index.htm"
ALT="Oracle Web Applications">

<AREA SHAPE="RECT"
COORDS="425,0,490,30"
HREF="../langpkt/index.htm"
ALT="Oracle PL/SQL Language Pocket Reference">

<AREA SHAPE="RECT"
COORDS="495,0,570,30"
HREF="../bipkt/index.htm"
ALT="Oracle PL/SQL Built-ins Pocket Reference">
</MAP>

</BODY
>
<!-- Mirrored from liso.cs.pusan.ac.kr by HTTrack Website Copier/3.x [XR&CO'2001] -->
</HTML
>
