<HTML
><HEAD
><TITLE
>[Chapter 22] 22.6 Construct Abstract Data Types (ADTs)</TITLE
><META
NAME="DC.Creator"
CONTENT="Steven Feuerstein &amp; Bill Pribyl"><META
NAME="DC.Date"
CONTENT="2000-04-29T19:12:05Z"><META
NAME="DC.Format"
CONTENT="text/html"
SCHEME="MIME"><META
NAME="DC.Identifier"
CONTENT="O'Reilly and Associates CD-ROM-1-56592-335-9E"><META
NAME="DC.Language"
CONTENT="en-US"><META
NAME="DC.Publisher"
CONTENT="O'Reilly &amp; Associates, Inc."><META
NAME="DC.Source"
CONTENT="1-56592-335-9E"
SCHEME="ISBN"><META
NAME="DC.Subject.Keyword"
CONTENT="Oracle PL/SQL"><META
NAME="DC.Title"
CONTENT="Oracle PL/SQL Programming, 2nd Edition"><META
NAME="DC.Type"
CONTENT="Text.Monograph"><META
NAME="generator"
CONTENT="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><LINK
REL="stylesheet"
TYPE="text/css"
HREF="../style/style1.css"><LINK
REV="made"
HREF="mailto:online-books@oreilly.com"
TITLE="Online Books Comments"><LINK
REL="up"
HREF="ch22_01.htm"
TITLE="22. Code Design Tips"><LINK
REL="prev"
HREF="ch22_05.htm#SQL2-CH-22-SECT-5.4"
TITLE="22.5 Create Independent Modules"><LINK
REL="next"
HREF="ch22_07.htm#SQL2-CH-22-SECT-7.2"
TITLE="22.7 Tips for Parameter Design"></HEAD
><BODY
><DIV
CLASS="htmlnav"
><H1
><IMG
SRC="gifs/smbanner.gif"
ALT="Oracle PL/SQL Programming, 2nd Edition"
USEMAP="#srchmap"
BORDER="0"></H1
><MAP
NAME="srchmap"
><AREA
SHAPE="RECT"
COORDS="0,0,466,65"
HREF="index.htm"
ALT="Oracle PL/SQL Programming, 2nd Edition"><AREA
SHAPE="RECT"
COORDS="467,0,514,18"
HREF="jobjects/fsearch.htm"
ALT="Search this book"></MAP
><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch22_05.htm#SQL2-CH-22-SECT-5.4"
TITLE="22.5 Create Independent Modules"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 22.5 Create Independent Modules"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><SPAN
CLASS="NAVTITLE"
><A
CLASS="chapter"
REL="up"
HREF="ch22_01.htm"
TITLE="22. Code Design Tips"
>Chapter 22<BR>Code Design Tips</A
></SPAN
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch22_07.htm#SQL2-CH-22-SECT-7.2"
TITLE="22.7 Tips for Parameter Design"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 22.7 Tips for Parameter Design"
BORDER="0"></A
></TD
></TR
></TABLE
>&nbsp;<HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"></DIV
><DIV
CLASS="sect1"
><H2
CLASS="sect1"
><A
CLASS="title"
NAME="SQL2-CH-22-SECT-6"
>22.6 Construct Abstract Data Types (ADTs)</A
></H2
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="ch22-idx-908846-1"
></A
> <A
CLASS="indexterm"
NAME="ch22-idx-908846-2"
></A
>The term <I
CLASS="filename"
>abstract data type</I
> is about as dry and technical sounding as you can get. Yet the concept of an abstract data type, or ADT, is something we apply&nbsp;-- or should apply&nbsp;-- in every single one of our application efforts, sometimes without even realizing that we are doing it. An abstract data type is a collection of information and operations that act on that information. An ADT can represent computer objects such as lists, records, stacks, arrays, and tables; but an ADT can also represent real-world objects, such as a company, a product, or the set of assembly line operations at a factory. </P
><P
CLASS="para"
>The power behind the ADT lies in the first word of its name: abstract. When you create an ADT, you work with objects as opposed to variables, columns, and other computer science items. You perform an abstraction from the implementation details to the "thing in itself" and work on a higher level. </P
><P
CLASS="para"
>PL/SQL offers several different constructs with which to build and manage ADTs, most importantly the package. The most general description of an ADT, in fact, sounds just like the description of a package: a collection of data and operations on that data. </P
><P
CLASS="para"
>Every application you build is filled with the need and potential for abstract data types. In order to construct an ADT, however, you first need to be able to identify which data is best represented at a new and higher level of abstraction. You then need to be able to build that ADT so that the programmatic interface to the underlying data is consistent and effective. </P
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="SQL2-CH-22-SECT-6.1"
>22.6.1 Build an ADT in Phases</A
></H3
><P
CLASS="para"
>You should build an ADT in four phases:</P
><OL
CLASS="orderedlist"
><LI
CLASS="listitem"
><P
CLASS="para"
><EM
CLASS="emphasis"
>Clarify the data to be represented by the ADT.</EM
> Make sure you understand all the attributes of the data and the way it is used in your application. When your ADT is based on a database table or entity, much of this phase is already done. </P
></LI
><LI
CLASS="listitem"
><P
CLASS="para"
><EM
CLASS="emphasis"
>List the key features and functions of the ADT as it relates to the underlying data</EM
>. Don't write any code until you have come up with a comprehensive list of all the operations on and by the ADT. </P
></LI
><LI
CLASS="listitem"
><P
CLASS="para"
><EM
CLASS="emphasis"
>Build the interface for the ADT.</EM
> This is equivalent to designing the specification of all the modules which are called by programmers to manipulate the ADT. Translate the list of features into procedure and function calls. You need to decide on module names and their parameter lists. </P
></LI
><LI
CLASS="listitem"
><P
CLASS="para"
><EM
CLASS="emphasis"
>Build the body of code behind the interface.</EM
> You know how programmers will manage the ADT, since they must work with the specification. The final phase is to actually implement the ADT. What internal data structures will you use? What code will you share among the different modules of the ADT? What data will you hide from view? </P
></LI
></OL
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="SQL2-CH-22-SECT-6.2"
>22.6.2 Some ADT Guidelines</A
></H3
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="AUTOID-20904"
></A
>Here are some guidelines you should follow when designing an ADT: </P
><UL
CLASS="itemizedlist"
><LI
CLASS="listitem"
><P
CLASS="para"
><EM
CLASS="emphasis"
>Maintain a consistent level of abstraction.</EM
> This is probably the most important aspect of your ADT implementation. All the modules you build to represent your abstract data structure should operate with the same level of data. If the ADT representing a company's product is implemented as a PL/SQL record, then all of the modules should accept or return this record structure. If there are alternative means of identifying a particular product (the product name, the ID number, the record as a whole), then provide functions that convert between the different identifier formats so that the programmer can easily shift to the ADT structure required by the main modules. </P
></LI
><LI
CLASS="listitem"
><P
CLASS="para"
><EM
CLASS="emphasis"
>Provide a comprehensive interface to the abstract data type.</EM
> Make sure that the user (a programmer, in this case) can perform all necessary operations on the ADT without having to go around the interface you build to the ADT. Hide all the implementational details of your ADT behind calls to procedures and modules&nbsp;-- without exception. If you implement a stack data structure as an ADT and forget to provide a way to pop a value off the stack, the programmer will have to invade your turf and mess around in your stack to retrieve the needed value. Of course, this is an obvious example. In many situations the gaps in an ADT's implementation are less obvious and sometimes discovered only when a programmer starts using the ADT in earnest. </P
></LI
><LI
CLASS="listitem"
><P
CLASS="para"
><EM
CLASS="emphasis"
>Use the package structure, the most natural repository for ADT code.</EM
> The ADT represents a "thing" by presenting a layer of code that allows you to perform operations on that thing as a whole, rather than on its individual components. The package joins related objects together and so corresponds closely to the ADT. If your ADT represents a caller, then create a package named "caller" containing all the modules, variables, cursors, etc., needed to manipulate the caller. The package clearly distinguishes between the public and private parts of the code. The public objects make up the interface to the ADT. The private objects contain and hide the implementational details for the ADT. </P
></LI
></UL
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="SQL2-CH-22-SECT-6.3"
>22.6.3 Progress Box as ADT</A
></H3
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="ch22-idx-908848-1"
></A
> <A
CLASS="indexterm"
NAME="ch22-idx-908848-2"
></A
> The advantages of working with abstract data types should become clear from the following example of a "progress box". The development team of a financials application found that their Oracle Forms 4.0 application would not change the cursor from an arrow to an hourglass with long-running PL/SQL programs. With a wait-time of between three and five minutes, they were concerned that users would get impatient, click irresponsibly with the mouse, and possibly cause damage. Their solution was to construct a progress box aimed at keeping the user informed of the program's progress. </P
><P
CLASS="para"
>The progress box consisted of a window named progress_window, a canvas view named cv_progress, and the following three items, all defined in a block named b_progress: </P
><DL
CLASS="variablelist"
><DT
CLASS="term"
>process_name</DT
><DD
CLASS="listitem"
><P
CLASS="para"
>The description of the program currently executing</P
></DD
><DT
CLASS="term"
>percent_done</DT
><DD
CLASS="listitem"
><P
CLASS="para"
>A textual description of the percentage of the job completed</P
></DD
><DT
CLASS="term"
>thermometer</DT
><DD
CLASS="listitem"
><P
CLASS="para"
>A graphical representation of the percentage of the job completed</P
></DD
></DL
><P
CLASS="para"
>A very clever programmer found that by setting the visual attributes (specifically the font) of the thermometer in the item, the letter "n" would appear as a solid box (blue!) on the screen. Two letters would appear as two blocks and so on. Make the item ten characters long and you have a graphical representation of percentage completion in 10% increments. </P
><P
CLASS="para"
>Here are the four lines of code needed to show 20% completed:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>:B_PROGRESS.PERCENT_DONE := '20 % Complete.';
:B_PROGRESS.THERMOMETER  := 'nn';
Show_View('CV_PROGRESS');
synchronize;</PRE
></BLOCKQUOTE
><P
CLASS="para"
>Actually, before any particular percentage of completion was displayed, it was necessary to initialize the progress box. The following five lines set the process name (in effect, the title for the bar) and initialized the other items: </P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>SET_WINDOW_PROPERTY ('PROGRESS_WINDOW', Visible, Property_On);
:C_CONTROL.NBT_PROCESS_NAME := 'Updating Profit and Loss data...';
:C_CONTROL.NBT_PERCENT_DONE := '0 % Complete.';
:C_CONTROL.NBT_THERMOMETER  := 'n';
Show_View('CV_PROGRESS');
synchronize;</PRE
></BLOCKQUOTE
><P
CLASS="para"
>This progress box was also needed within a loop, which executed over a period of up to ten years. The development team was able to adapt their basic progress box code to dynamically adjust according to the loop index, year_count: </P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>:B_PROGRESS.PERCENT_DONE :=
   TO_CHAR (round((year_count / years_displayed * 100),0)) ||
            ' % Complete.';
:B_PROGRESS.THERMOMETER  := :B_PROGRESS.THERMOMETER || 'n';
Show_View('CV_PROGRESS');
synchronize;</PRE
></BLOCKQUOTE
><P
CLASS="para"
>In this case, they simply concatenated another "n" onto the current value of the thermometer for each iteration of the loop. </P
><P
CLASS="para"
>Of course, they needed to hide the progress box when the program ended: </P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>Hide_View('CV_PROGRESS');
SET_WINDOW_PROPERTY('PROGRESS_WINDOW', Visible, Property_Off);
synchronize;</PRE
></BLOCKQUOTE
><P
CLASS="para"
>Finally, there were also times when they would use the progress box to display a message, but not use the thermometer. The following code shows the lines required to implement this variation on the progress box: </P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>SET_WINDOW_PROPERTY('PROGRESS_WINDOW', Visible, Property_On);
:B_PROGRESS.PROCESS_NAME := 'Building reports...';
:B_PROGRESS.PERCENT_DONE := null;
:B_PROGRESS.THERMOMETER  := null;
Show_View('CV_PROGRESS');
synchronize;</PRE
></BLOCKQUOTE
><P
CLASS="para"
>My first impression of their approach was that it was very clever. It had a nice look to it and definitely saved the users from wondering what was happening in their application. Then I took a look inside the form and found that the samples of code I presented previously were repeated over and over again in various forms in many different procedures, triggers, and functions. <A
CLASS="indexterm"
NAME="AUTOID-20953"
></A
> </P
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="SQL2-CH-22-SECT-6.4"
>22.6.4 Price Paid for Code Dispersion</A
></H3
><P
CLASS="para"
>The developers had not treated the progress box as a thing in itself, as an abstract data type. Instead, the progress was simply a series of executable statements: set the title, change the thermometer setting, make the view visible, etc. Because they did not abstract those individual statements into an object with rules and structure, they were forced to repeat those statements wherever a progress box of any form was needed. This approach not only required repetition of the statements, it also exposed the particular elements of the implementation (the fact that the letter "n" was needed to created a box on the screen, for example) throughout the application. </P
><P
CLASS="para"
>Well, the developers worked through these issues and got their application moved into production and everything seemed fine. Then a couple of things happened. First, I was asked to review the code with the objective of reducing code volume and improving performance. Second, we converted the application to Oracle Forms 4.5. </P
><P
CLASS="para"
>Replacing the sequence of executable statements used to produce the progress box with a procedure call was an obvious way to reduce the amount of code in the application. But the conversion to Oracle Forms 4.5 raised another whole issue: the font used to produce a graphical box from the letter "n" wasn't available any longer in the list of fonts for visual attributes! All the individual assignments of the thermometer to the letter "n" would now do little more than make a blue "n" appear on the screen. </P
><P
CLASS="para"
>These two factors forced us to completely revamp the progress box implementation. Instead of representing the progress box with the separate lines of code, we needed to create an object called a progress box, figure out the ways that progress box was used in the application, and create modules that would implement those different methods. I wanted to be particularly careful to not let individual programmers hardcode a letter or symbol, like "n", in order to achieve the desired effect in the thermometer item. </P
><P
CLASS="para"
>After some analysis, I determined that the application used the progress box in three ways: </P
><UL
CLASS="itemizedlist"
><LI
CLASS="listitem"
><P
CLASS="para"
>To display a message (which turns off the display of the thermometer bar) </P
></LI
><LI
CLASS="listitem"
><P
CLASS="para"
>To display a percentage completion message with the thermometer</P
></LI
><LI
CLASS="listitem"
><P
CLASS="para"
>To hide the box from view</P
></LI
></UL
><P
CLASS="para"
>I then converted this high-level specification to a package specification, as shown in the next section. </P
><DIV
CLASS="sect3"
><H4
CLASS="sect3"
><A
CLASS="title"
NAME="SQL2-CH-22-SECT-6.4.1"
>22.6.4.1 The progress package specification</A
></H4
><BLOCKQUOTE
><PRE
CLASS="programlisting"
><A
CLASS="indexterm"
NAME="ch22-idx-908850-1"
></A
>/* filename on companion disk: progress.fpp */
PACKAGE progress
IS
   PROCEDURE msg (msg_in IN VARCHAR2);

   PROCEDURE bar
      (pct_in IN INTEGER,
       thermom_in IN INTEGER := 1,
       init_in IN VARCHAR2 := 'NOINIT',
       msg_in IN VARCHAR2 := NULL);

   PROCEDURE hide (item_prop_in IN INTEGER := PROPERTY_OFF);

END progress;</PRE
></BLOCKQUOTE
><P
CLASS="para"
>The msg procedure simply displays the provided message and hides the thermometer. </P
><P
CLASS="para"
>The bar procedures takes four parameters as follows:</P
><DL
CLASS="variablelist"
><DT
CLASS="term"
>pct_in</DT
><DD
CLASS="listitem"
><P
CLASS="para"
>The percentage completed as a number. The module then converts the number to a string in the format "20% Completed." </P
></DD
><DT
CLASS="term"
>thermom_in </DT
><DD
CLASS="listitem"
><P
CLASS="para"
>The number of boxes to be added to the current thermometer setting. </P
></DD
><DT
CLASS="term"
>init_in</DT
><DD
CLASS="listitem"
><P
CLASS="para"
>Indicates whether the thermometer should be initialized with the thermom_in number of boxes (`INIT'), or if the thermometer should have that number of boxes concatenated to the current thermometer display. </P
></DD
><DT
CLASS="term"
>msg_in</DT
><DD
CLASS="listitem"
><P
CLASS="para"
>The message to be displayed above the thermometer, if any.</P
></DD
></DL
><P
CLASS="para"
>The hide procedure hides the property box and optionally sets the property of the thermometer item. </P
><P
CLASS="para"
>The package body needed to consolidate all of the formerly hardcoded executable statements in the application is shown in the next section. Notice that programmers do not specify a character, like "n", when calling the progress.bar procedure. Instead, they just indicate the number of boxes to add to the thermometer. Inside the package, a one-character string named thermom_char is set to a value of "n". If the font requires a change, this single variable is modified and none of the code that calls progress.bar is affected. </P
></DIV
><DIV
CLASS="sect3"
><H4
CLASS="sect3"
><A
CLASS="title"
NAME="SQL2-CH-22-SECT-6.4.2"
>22.6.4.2 The progress package body</A
></H4
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>/* filename on companion disk: progress.fpp */
PACKAGE BODY progress
IS
   thermom_char VARCHAR2(1) := 'n';

   PROCEDURE msg (msg_in IN VARCHAR2) IS
   BEGIN
      SET_WINDOW_PROPERTY (handles.progress_window_id, Visible, Property_On);
      SET_ITEM_PROPERTY (handles.thermometer_id, DISPLAYED, PROPERTY_OFF);
      :b_progress.percent_done := msg_in;
      :b_progress.process_name := NULL;
      :b_progress.thermometer := NULL;
      SHOW_VIEW (handles.cv_progress_id);
      synchronize;
   END;

   PROCEDURE bar
      (pct_in IN INTEGER,
       thermom_in IN INTEGER := 1,
       init_in IN VARCHAR2 := 'NOINIT',
       msg_in IN VARCHAR2 := NULL)
   IS
      /* Create the string to be added to the thermometer. */
      bar_stg VARCHAR2(80) := LPAD (thermom_char, thermom_in, thermom_char);
   BEGIN
      SET_WINDOW_PROPERTY (handles.progress_window_id, Visible, PROPERTY_ON);
      SET_ITEM_PROPERTY (handles.thermometer_id, DISPLAYED, PROPERTY_ON);
      IF msg_in IS NOT NULL
      THEN
         :b_progress.process_name := msg_in;
      END IF;
      :b_progress.percent_done := TO_CHAR (pct_in) || ' % Complete';
      IF UPPER (init_in) = 'INIT'
      THEN
         :b_progress.thermometer := bar_stg;
      ELSE
         :b_progress.thermometer := :b_progress.thermometer || bar_stg;
      END IF;
      SHOW_VIEW (handles.cv_progress_id);
      synchronize;
   END;

   PROCEDURE hide (item_prop_in IN INTEGER := PROPERTY_OFF)
   IS
   BEGIN
      Hide_View (handles.cv_progress_id);
      SET_ITEM_PROPERTY (handles.thermometer_id, DISPLAYED, item_prop_in);
      SET_WINDOW_PROPERTY (handles.progress_window_id, Visible,
         PROPERTY_OFF);
      synchronize;
   END;

END progress;</PRE
></BLOCKQUOTE
><P
CLASS="para"
>Now I can replace the cumbersome, virtually unmaintainable sequences of statements with a single call to the package modules. The following examples show the "before and after" of the progress box code. </P
><UL
CLASS="itemizedlist"
><LI
CLASS="listitem"
><P
CLASS="para"
>Initialize the thermometer with a title, empty thermometer, and 0% completed: </P
><P
CLASS="para"
>Before:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>:B_PROGRESS.PROCESS_NAME := 'Updating profit and loss data...';
:B_PROGRESS.PERCENT_DONE := '0 % Complete.';
:B_PROGRESS.THERMOMETER  := NULL;
Show_View('CV_PROGRESS');
synchronize;</PRE
></BLOCKQUOTE
><P
CLASS="para"
>After:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>progress.bar (0, 0, 'INIT', 'Updating Profit and Loss data...');</PRE
></BLOCKQUOTE
></LI
><LI
CLASS="listitem"
><P
CLASS="para"
>Set the thermometer to 20% completion:</P
><P
CLASS="para"
>Before:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>:B_PROGRESS.PERCENT_DONE := '20 % Complete.';
:B_PROGRESS.THERMOMETER  := 'nn';
Show_View('CV_PROGRESS');
synchronize;</PRE
></BLOCKQUOTE
><P
CLASS="para"
>After:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>progress.bar (20, 2);</PRE
></BLOCKQUOTE
></LI
><LI
CLASS="listitem"
><P
CLASS="para"
>Adjust dynamically the contents of the progress box according to the loop index, year_count: </P
><P
CLASS="para"
>Before:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>:B_PROGRESS.PERCENT_DONE :=
   TO_CHAR (round((year_count / years_displayed * 100),0)) ||
            ' % Complete.';
:B_PROGRESS.THERMOMETER  := :B_PROGRESS.THERMOMETER || 'n';
Show_View('CV_PROGRESS');
synchronize;</PRE
></BLOCKQUOTE
><P
CLASS="para"
>After:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>progress.bar (ROUND((year_count / years_displayed * 100),0), 1);</PRE
></BLOCKQUOTE
></LI
><LI
CLASS="listitem"
><P
CLASS="para"
>Hide the progress box when the program completed and control was returned to the user: </P
><P
CLASS="para"
>Before:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>Hide_View('CV_PROGRESS');
SET_WINDOW_PROPERTY('PROGRESS_WINDOW', Visible, Property_Off);
synchronize;</PRE
></BLOCKQUOTE
><P
CLASS="para"
>After:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>progress.hide; </PRE
></BLOCKQUOTE
></LI
></UL
><P
CLASS="para"
>By treating the progress box as an object with rules governing its use and appearance, I was able to greatly reduce the volume of code required. The resulting statements are also much more comprehensible and maintainable.<A
CLASS="indexterm"
NAME="AUTOID-21025"
></A
> <A
CLASS="indexterm"
NAME="AUTOID-21026"
></A
> <A
CLASS="indexterm"
NAME="AUTOID-21027"
></A
> </P
></DIV
></DIV
></DIV
><DIV
CLASS="htmlnav"
><P
></P
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch22_05.htm#SQL2-CH-22-SECT-5.4"
TITLE="22.5 Create Independent Modules"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 22.5 Create Independent Modules"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="book"
HREF="index.htm"
TITLE="Oracle PL/SQL Programming, 2nd Edition"
><IMG
SRC="../gifs/txthome.gif"
ALT="Oracle PL/SQL Programming, 2nd Edition"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch22_07.htm#SQL2-CH-22-SECT-7.2"
TITLE="22.7 Tips for Parameter Design"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 22.7 Tips for Parameter Design"
BORDER="0"></A
></TD
></TR
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
>22.5 Create Independent Modules</TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="index"
HREF="index/idx_0.htm"
TITLE="Book Index"
><IMG
SRC="../gifs/index.gif"
ALT="Book Index"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
>22.7 Tips for Parameter Design</TD
></TR
></TABLE
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"></DIV
><IMG SRC="../gifs/smnavbar.gif"
USEMAP="#map"
BORDER="0"
ALT="The Oracle Library Navigation">

<P><font size="-1">
<a href="../copyrght.htm#copy">Copyright (c) 2000</a> O'Reilly &amp; Associates. All rights reserved.
</font></P>

<MAP NAME="map">

<AREA SHAPE="RECT"
COORDS="0,0,35,30"
HREF="../index.htm"
ALT="Library Home">

<AREA SHAPE="RECT"
COORDS="40,0,95,30"
HREF="index.htm"
ALT="Oracle PL/SQL Programming, 2nd. Ed.">

<AREA SHAPE="RECT"
COORDS="100,0,200,30"
HREF="../guide8i/index.htm"
ALT="Guide to Oracle 8i Features">

<AREA SHAPE="RECT"
COORDS="205,0,245,30"
HREF="../bipack/index.htm"
ALT="Oracle Built-in Packages">

<AREA SHAPE="RECT"
COORDS="250,0,320,30"
HREF="../advprog/index.htm"
ALT="Advanced PL/SQL Programming with Packages">

<AREA SHAPE="RECT"
COORDS="325,0,420,30"
HREF="../webapp/index.htm"
ALT="Oracle Web Applications">

<AREA SHAPE="RECT"
COORDS="425,0,490,30"
HREF="../langpkt/index.htm"
ALT="Oracle PL/SQL Language Pocket Reference">

<AREA SHAPE="RECT"
COORDS="495,0,570,30"
HREF="../bipkt/index.htm"
ALT="Oracle PL/SQL Built-ins Pocket Reference">
</MAP>

</BODY
>
<!-- Mirrored from liso.cs.pusan.ac.kr by HTTrack Website Copier/3.x [XR&CO'2001] -->
</HTML
>
