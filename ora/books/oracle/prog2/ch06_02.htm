<HTML
><HEAD
><TITLE
>[Chapter 6] 6.2 Cursors in PL/SQL</TITLE
><META
NAME="DC.Creator"
CONTENT="Steven Feuerstein &amp; Bill Pribyl"><META
NAME="DC.Date"
CONTENT="2000-04-29T18:55:59Z"><META
NAME="DC.Format"
CONTENT="text/html"
SCHEME="MIME"><META
NAME="DC.Identifier"
CONTENT="O'Reilly and Associates CD-ROM-1-56592-335-9E"><META
NAME="DC.Language"
CONTENT="en-US"><META
NAME="DC.Publisher"
CONTENT="O'Reilly &amp; Associates, Inc."><META
NAME="DC.Source"
CONTENT="1-56592-335-9E"
SCHEME="ISBN"><META
NAME="DC.Subject.Keyword"
CONTENT="Oracle PL/SQL"><META
NAME="DC.Title"
CONTENT="Oracle PL/SQL Programming, 2nd Edition"><META
NAME="DC.Type"
CONTENT="Text.Monograph"><META
NAME="generator"
CONTENT="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><LINK
REL="stylesheet"
TYPE="text/css"
HREF="../style/style1.css"><LINK
REV="made"
HREF="mailto:online-books@oreilly.com"
TITLE="Online Books Comments"><LINK
REL="up"
HREF="ch06_01.htm"
TITLE="6. Database Interaction and Cursors"><LINK
REL="prev"
HREF="ch06_01.htm"
TITLE="6.1 Transaction Management"><LINK
REL="next"
HREF="ch06_03.htm#SQL2-CH-6-SECT-3.1"
TITLE="6.3 Implicit and Explicit Cursors"></HEAD
><BODY
><DIV
CLASS="htmlnav"
><H1
><IMG
SRC="gifs/smbanner.gif"
ALT="Oracle PL/SQL Programming, 2nd Edition"
USEMAP="#srchmap"
BORDER="0"></H1
><MAP
NAME="srchmap"
><AREA
SHAPE="RECT"
COORDS="0,0,466,65"
HREF="index.htm"
ALT="Oracle PL/SQL Programming, 2nd Edition"><AREA
SHAPE="RECT"
COORDS="467,0,514,18"
HREF="jobjects/fsearch.htm"
ALT="Search this book"></MAP
><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch06_01.htm"
TITLE="6.1 Transaction Management"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 6.1 Transaction Management"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><SPAN
CLASS="NAVTITLE"
><A
CLASS="chapter"
REL="up"
HREF="ch06_01.htm"
TITLE="6. Database Interaction and Cursors"
>Chapter 6<BR>Database Interaction and Cursors</A
></SPAN
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch06_03.htm#SQL2-CH-6-SECT-3.1"
TITLE="6.3 Implicit and Explicit Cursors"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 6.3 Implicit and Explicit Cursors"
BORDER="0"></A
></TD
></TR
></TABLE
>&nbsp;<HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"></DIV
><DIV
CLASS="sect1"
><H2
CLASS="sect1"
><A
CLASS="title"
NAME="SQL2-CH-6-SECT-2"
>6.2 Cursors in PL/SQL</A
></H2
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="ch06-idx-999677-1"
></A
>When you execute a SQL statement from PL/SQL, the Oracle RDBMS assigns a private work area for that statement. This work area contains information about the SQL statement and the set of data returned or affected by that statement. The PL/SQL cursor is a mechanism by which you can name that work area and manipulate the information within it. </P
><P
CLASS="para"
>In its simplest form, you can think of a cursor as a pointer into a table in the database. For example, the following cursor declaration associates the entire employee table with the cursor named employee_cur: </P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>CURSOR employee_cur IS SELECT * FROM employee;</PRE
></BLOCKQUOTE
><P
CLASS="para"
>Once I have declared the cursor, I can open it:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>OPEN employee_cur;</PRE
></BLOCKQUOTE
><P
CLASS="para"
>And then I can fetch rows from it: </P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>FETCH employee_cur INTO employee_rec;</PRE
></BLOCKQUOTE
><P
CLASS="para"
>and, finally, I can close the cursor:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>CLOSE employee_cur;</PRE
></BLOCKQUOTE
><P
CLASS="para"
>In this case, each record fetched from this cursor represents an entire record in the employee table. You can, however, associate any valid <A
CLASS="indexterm"
NAME="AUTOID-5040"
></A
> SELECT statement with a cursor. In the next example I have a join of three tables in my cursor declaration: </P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>DECLARE
   CURSOR joke_feedback_cur
   IS
      SELECT J.name, R.laugh_volume, C.name
        FROM joke J, response R, comedian C
       WHERE J.joke_id = R.joke_id
         AND J.joker_id = C.joker_id;
BEGIN
   ...
END;</PRE
></BLOCKQUOTE
><P
CLASS="para"
>Here, the cursor does not act as a pointer into any actual table in the database. Instead, the cursor is a pointer into the <A
CLASS="indexterm"
NAME="AUTOID-5045"
></A
> <A
CLASS="indexterm"
NAME="AUTOID-5047"
></A
> virtual table represented by the SELECT statement (SELECT is called a virtual table because the data it produces has the same structure as a table&nbsp;-- rows and columns&nbsp;-- but it exists only for the duration of the execution of the SQL statement). If the triple-join returns 20 rows, each row containing the three columns in the preceding example, then the cursor functions as a pointer into those 20 rows. </P
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="SQL2-CH-6-SECT-2.1"
>6.2.1 Types of Cursors</A
></H3
><P
CLASS="para"
>You have lots of options in PL/SQL for executing SQL, and all of them occur as some type of cursor. Generally, there are two types of SQL that you can execute in PL/SQL: static and dynamic. SQL is <A
CLASS="indexterm"
NAME="AUTOID-5053"
></A
> <A
CLASS="indexterm"
NAME="AUTOID-5055"
></A
><A
CLASS="indexterm"
NAME="AUTOID-5058"
></A
>static if the content of the SQL statement is determined at compile time. A SQL statement is dynamic if it is constructed at runtime and then executed. </P
><P
CLASS="para"
>Dynamic SQL is made possible in PL/SQL only through the use of the DBMS_SQL built-in package (see <A
CLASS="xref"
HREF="appc_01.htm"
>Appendix C, <CITE
CLASS="appendix"
>Built-In Packages</CITE
></A
>). All other forms of SQL executed inside a PL/SQL program represent static SQL; these forms of cursors are the focus of the remainder of this chapter. </P
><P
CLASS="para"
>Even within the category of static SQL, we have further differentiation. With the advent of PL/SQL Release 2.3, you can choose between two distinct types of cursor objects: </P
><DL
CLASS="variablelist"
><DT
CLASS="term"
><EM
CLASS="emphasis"
>Static cursor objects</EM
></DT
><DD
CLASS="listitem"
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="ch06-idx-999683-1"
></A
> <A
CLASS="indexterm"
NAME="ch06-idx-999683-2"
></A
> These are the really static cursors of PL/SQL. The SQL is determined at compile time, and the cursor always refers to one SQL statement, which is known at compile time. The examples shown earlier in this chapter are static cursors. </P
><P
CLASS="para"
>Unless otherwise noted, any reference to "static cursor" refers to this sub-category of static (as opposed to dynamic) cursors. </P
></DD
><DT
CLASS="term"
><EM
CLASS="emphasis"
>Cursor variables</EM
></DT
><DD
CLASS="listitem"
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="AUTOID-5080"
></A
> <A
CLASS="indexterm"
NAME="AUTOID-5083"
></A
>You can declare a variable which references a cursor object in the database. Your variable may refer to different SQL statements at different times (but that SQL is defined at compile time, not run time). </P
></DD
></DL
><P
CLASS="para"
>The cursor variable is one of the newest enhancements to PL/SQL and will be unfamiliar to most programmers. Cursor variables act as references to cursor objects. As a true variable, a cursor variable can change its value as your program executes. The variable can refer to different cursor objects (queries) at different times. You can also pass a cursor variable as a parameter to a procedure or function. Cursor variables are discussed later in this chapter. </P
><P
CLASS="para"
>Static PL/SQL cursors have been available since PL/SQL Version 1. The static version of cursors "hardcodes" a link between the cursor name and a SELECT statement. The static cursor itself comes in two flavors: implicit and explicit.<A
CLASS="indexterm"
NAME="AUTOID-5088"
></A
> <A
CLASS="indexterm"
NAME="AUTOID-5089"
></A
> </P
><P
CLASS="para"
>PL/SQL declares and manages an <A
CLASS="indexterm"
NAME="AUTOID-5091"
></A
> <A
CLASS="indexterm"
NAME="AUTOID-5093"
></A
> <A
CLASS="indexterm"
NAME="AUTOID-5096"
></A
> <A
CLASS="indexterm"
NAME="AUTOID-5099"
></A
> implicit cursor every time you execute a SQL DML statement, such as an INSERT or a SELECT that returns a single row. </P
><P
CLASS="para"
>You, the programmer, define your own <EM
CLASS="emphasis"
>explicit cursors</EM
> in your code. You must use an explicit cursor when you need to retrieve more than one row of data at a time through a SELECT statement. You can then use the cursor to fetch these rows one at a time. The set of rows returned by the query associated with an explicit cursor is called the <EM
CLASS="emphasis"
>active set</EM
> or <EM
CLASS="emphasis"
>result set</EM
> of the cursor. The row to which the explicit cursor points is called the <EM
CLASS="emphasis"
>current row</EM
> of the result set. </P
><P
CLASS="para"
>The bulk of this chapter is devoted to the management of static, explicit cursors. All information about cursor variables is localized in <A
CLASS="xref"
HREF="ch06_12.htm#SQL2-CH-6-SECT-12.5"
>Section 6.12, "Cursor Variables"</A
>. Any references to PL/SQL cursors and cursor characteristics outside of that section will pertain to static cursors. </P
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="SQL2-CH-6-SECT-2.2"
>6.2.2 Cursor Operations</A
></H3
><P
CLASS="para"
>Regardless of the type of cursor, <A
CLASS="indexterm"
NAME="AUTOID-5112"
></A
><A
CLASS="indexterm"
NAME="AUTOID-5114"
></A
><A
CLASS="indexterm"
NAME="AUTOID-5116"
></A
><A
CLASS="indexterm"
NAME="AUTOID-5118"
></A
><A
CLASS="indexterm"
NAME="AUTOID-5121"
></A
><A
CLASS="indexterm"
NAME="AUTOID-5124"
></A
>PL/SQL performs the same operations to execute a SQL statement from within your program: </P
><DL
CLASS="variablelist"
><DT
CLASS="term"
>PARSE</DT
><DD
CLASS="listitem"
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="AUTOID-5132"
></A
>The first step in processing an SQL statement is to parse it to make sure it is valid and to determine the execution plan (using either the rule-based or cost-based optimizer). </P
></DD
><DT
CLASS="term"
>BIND</DT
><DD
CLASS="listitem"
><P
CLASS="para"
>When you bind, you associate values from your program (host variables) with placeholders inside your SQL statement. For static SQL, the SQL engine itself performs these binds. When you use dynamic SQL, you explicitly request a binding of variable values. </P
></DD
><DT
CLASS="term"
>OPEN</DT
><DD
CLASS="listitem"
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="AUTOID-5142"
></A
> <A
CLASS="indexterm"
NAME="AUTOID-5145"
></A
>When you open a cursor, the bind variables are used to determine the result set for the SQL statement. The pointer to the active or current row is set to the first row. Sometimes you will not explicitly open a cursor; instead the PL/SQL engine will perform this operation for you (as with implicit cursors). </P
></DD
><DT
CLASS="term"
>EXECUTE</DT
><DD
CLASS="listitem"
><P
CLASS="para"
>In the execute phase, the statement is run within the SQL engine.</P
></DD
><DT
CLASS="term"
>FETCH</DT
><DD
CLASS="listitem"
><P
CLASS="para"
>If you are performing a query, the <A
CLASS="indexterm"
NAME="AUTOID-5155"
></A
>FETCH command retrieves the next row from the cursor's result set. Each time you fetch, PL/SQL moves the pointer forward in the result set. When working with explicit cursors, remember that if there are no more rows to retrieve, then FETCH does nothing (it does not raise an error). </P
></DD
><DT
CLASS="term"
>CLOSE</DT
><DD
CLASS="listitem"
><P
CLASS="para"
>The <A
CLASS="indexterm"
NAME="AUTOID-5161"
></A
>CLOSE statement closes the cursor and releases all memory used by the cursor. Once closed, the cursor no longer has a result set. Sometimes you will not explicitly close a cursor; instead the PL/SQL engine will perform this operation for you (as with implicit cursors). </P
></DD
></DL
><P
CLASS="para"
><A
CLASS="xref"
HREF="ch06_02.htm#SQL2-CH-6-SECT-2.2"
>Figure 6.1</A
> shows how some of these different operations are used to fetch information from the database into your PL/SQL<A
CLASS="indexterm"
NAME="AUTOID-5165"
></A
> program. </P
><H4
CLASS="figure"
><A
CLASS="title"
NAME="SQL2-CH-6-FIG-1"
>Figure 6.1: Using cursor operations to fetch database information into your program</A
></H4
><IMG
CLASS="graphic"
SRC="figs/sql2.0601.gif"
ALT="Figure 6.1"></DIV
></DIV
><DIV
CLASS="htmlnav"
><P
></P
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch06_01.htm"
TITLE="6.1 Transaction Management"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 6.1 Transaction Management"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="book"
HREF="index.htm"
TITLE="Oracle PL/SQL Programming, 2nd Edition"
><IMG
SRC="../gifs/txthome.gif"
ALT="Oracle PL/SQL Programming, 2nd Edition"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch06_03.htm#SQL2-CH-6-SECT-3.1"
TITLE="6.3 Implicit and Explicit Cursors"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 6.3 Implicit and Explicit Cursors"
BORDER="0"></A
></TD
></TR
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
>6.1 Transaction Management</TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="index"
HREF="index/idx_0.htm"
TITLE="Book Index"
><IMG
SRC="../gifs/index.gif"
ALT="Book Index"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
>6.3 Implicit and Explicit Cursors</TD
></TR
></TABLE
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"></DIV
><IMG SRC="../gifs/smnavbar.gif"
USEMAP="#map"
BORDER="0"
ALT="The Oracle Library Navigation">

<P><font size="-1">
<a href="../copyrght.htm#copy">Copyright (c) 2000</a> O'Reilly &amp; Associates. All rights reserved.
</font></P>

<MAP NAME="map">

<AREA SHAPE="RECT"
COORDS="0,0,35,30"
HREF="../index.htm"
ALT="Library Home">

<AREA SHAPE="RECT"
COORDS="40,0,95,30"
HREF="index.htm"
ALT="Oracle PL/SQL Programming, 2nd. Ed.">

<AREA SHAPE="RECT"
COORDS="100,0,200,30"
HREF="../guide8i/index.htm"
ALT="Guide to Oracle 8i Features">

<AREA SHAPE="RECT"
COORDS="205,0,245,30"
HREF="../bipack/index.htm"
ALT="Oracle Built-in Packages">

<AREA SHAPE="RECT"
COORDS="250,0,320,30"
HREF="../advprog/index.htm"
ALT="Advanced PL/SQL Programming with Packages">

<AREA SHAPE="RECT"
COORDS="325,0,420,30"
HREF="../webapp/index.htm"
ALT="Oracle Web Applications">

<AREA SHAPE="RECT"
COORDS="425,0,490,30"
HREF="../langpkt/index.htm"
ALT="Oracle PL/SQL Language Pocket Reference">

<AREA SHAPE="RECT"
COORDS="495,0,570,30"
HREF="../bipkt/index.htm"
ALT="Oracle PL/SQL Built-ins Pocket Reference">
</MAP>

</BODY
>
<!-- Mirrored from liso.cs.pusan.ac.kr by HTTrack Website Copier/3.x [XR&CO'2001] -->
</HTML
>
