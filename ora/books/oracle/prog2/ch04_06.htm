<HTML
><HEAD
><TITLE
>[Chapter 4] 4.6 Programmer-Defined Subtypes</TITLE
><META
NAME="DC.Creator"
CONTENT="Steven Feuerstein &amp; Bill Pribyl"><META
NAME="DC.Date"
CONTENT="2000-04-29T18:55:25Z"><META
NAME="DC.Format"
CONTENT="text/html"
SCHEME="MIME"><META
NAME="DC.Identifier"
CONTENT="O'Reilly and Associates CD-ROM-1-56592-335-9E"><META
NAME="DC.Language"
CONTENT="en-US"><META
NAME="DC.Publisher"
CONTENT="O'Reilly &amp; Associates, Inc."><META
NAME="DC.Source"
CONTENT="1-56592-335-9E"
SCHEME="ISBN"><META
NAME="DC.Subject.Keyword"
CONTENT="Oracle PL/SQL"><META
NAME="DC.Title"
CONTENT="Oracle PL/SQL Programming, 2nd Edition"><META
NAME="DC.Type"
CONTENT="Text.Monograph"><META
NAME="generator"
CONTENT="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><LINK
REL="stylesheet"
TYPE="text/css"
HREF="../style/style1.css"><LINK
REV="made"
HREF="mailto:online-books@oreilly.com"
TITLE="Online Books Comments"><LINK
REL="up"
HREF="ch04_01.htm"
TITLE="4. Variables and Program Data"><LINK
REL="prev"
HREF="ch04_05.htm"
TITLE="4.5 Anchored Declarations"><LINK
REL="next"
HREF="ch04_07.htm#SQL2-CH-4-SECT-7.7"
TITLE="4.7 Tips for Creating and Using Variables"></HEAD
><BODY
><DIV
CLASS="htmlnav"
><H1
><IMG
SRC="gifs/smbanner.gif"
ALT="Oracle PL/SQL Programming, 2nd Edition"
USEMAP="#srchmap"
BORDER="0"></H1
><MAP
NAME="srchmap"
><AREA
SHAPE="RECT"
COORDS="0,0,466,65"
HREF="index.htm"
ALT="Oracle PL/SQL Programming, 2nd Edition"><AREA
SHAPE="RECT"
COORDS="467,0,514,18"
HREF="jobjects/fsearch.htm"
ALT="Search this book"></MAP
><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch04_05.htm"
TITLE="4.5 Anchored Declarations"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 4.5 Anchored Declarations"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><SPAN
CLASS="NAVTITLE"
><A
CLASS="chapter"
REL="up"
HREF="ch04_01.htm"
TITLE="4. Variables and Program Data"
>Chapter 4<BR>Variables and Program Data</A
></SPAN
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch04_07.htm#SQL2-CH-4-SECT-7.7"
TITLE="4.7 Tips for Creating and Using Variables"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 4.7 Tips for Creating and Using Variables"
BORDER="0"></A
></TD
></TR
></TABLE
>&nbsp;<HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"></DIV
><DIV
CLASS="sect1"
><H2
CLASS="sect1"
><A
CLASS="title"
NAME="SQL2-CH-4-SECT-6"
>4.6 Programmer-Defined Subtypes</A
></H2
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="ch04-idx-26084-1"
></A
> <A
CLASS="indexterm"
NAME="ch04-idx-26084-2"
></A
><A
CLASS="indexterm"
NAME="ch04-idx-26084-3"
></A
> With Version 2.1 of PL/SQL (available with Oracle Server Version 7.1), you can define your own unconstrained subtypes of predefined datatypes. In PL/SQL, a subtype of a datatype is a variation that specifies the same set of rules as the original datatype, but might allow only a subset of the datatype's values. </P
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="AUTOID-4122"
></A
>There are two kinds of subtypes: constrained and unconstrained. A constrained subtype is one that restricts or constrains the values normally allowed by the datatype itself. POSITIVE is an example of a constrained subtype of BINARY_INTEGER. The package STANDARD, which predefines the datatypes and the functions that are parts of the standard PL/SQL language, declares the subtype POSITIVE as follows: </P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>SUBTYPE POSITIVE IS BINARY_INTEGER RANGE 1 .. 2147483647;</PRE
></BLOCKQUOTE
><P
CLASS="para"
>A variable that is declared POSITIVE can only store integer values greater than zero. The following assignment raises the VALUE_ERROR exception: </P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>DECLARE
   pentagon_cost_cutting POSITIVE;--The report to Congress
BEGIN
   pentagon_cost_cutting := -100000000;--The inside reality</PRE
></BLOCKQUOTE
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="AUTOID-4128"
></A
>An unconstrained subtype is a subtype that does not restrict the values of the original datatype in variables declared with the subtype. FLOAT is an example of an unconstrained subtype of NUMBER. Its definition in the STANDARD package is: </P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>SUBTYPE FLOAT IS NUMBER;</PRE
></BLOCKQUOTE
><P
CLASS="para"
>In other words, an unconstrained subtype provides an alias or alternate name for the original datatype. </P
><P
CLASS="para"
>In spite of the limitations of unconstrained subtypes, you should still use them wherever you can identify a logical subtype of data in your applications. Later, when you can implement constrained subtypes, you will only have to include a constraint in the SUBTYPE declaration, and all variables that are declared with this subtype will take on those constraints. </P
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="SQL2-CH-4-SECT-6.1"
>4.6.1 Declaring Subtypes</A
></H3
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="AUTOID-4136"
></A
> In order to make a subtype available, you first have to declare it in the declaration section of an anonymous PL/SQL block, procedure, function, or package. You've already seen the syntax for declaring a subtype used by PL/SQL in the STANDARD package. The general format of a subtype declaration is: </P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>SUBTYPE &lt;subtype_name&gt; IS &lt;base_type&gt;;</PRE
></BLOCKQUOTE
><P
CLASS="para"
>where subtype_name is the name of the new subtype; this name is the identifier that will be referenced in declarations of variables of that type. <A
CLASS="indexterm"
NAME="AUTOID-4141"
></A
>The base_type, which specifies the datatype which forms the basis for the subtype, can be any of the categories shown in <A
CLASS="xref"
HREF="ch04_06.htm#SQL2-CH-4-SECT-6.1"
>Table 4.3</A
>. </P
><BR><TABLE
CLASS="table"
BORDER="1"
CELLPADDING="3"
><CAPTION
CLASS="table"
><A
CLASS="title"
NAME="SQL2-CH-4-TABLE-6"
>Table 4.3: PL/SQL Subtypes </A
></CAPTION
><THEAD
CLASS="thead"
><TR
CLASS="row"
VALIGN="TOP"
><TH
CLASS="entry"
ALIGN="LEFT"
ROWSPAN="1"
COLSPAN="1"
> <P
CLASS="para"
>Subtype Category</P
> </TH
><TH
CLASS="entry"
ALIGN="LEFT"
ROWSPAN="1"
COLSPAN="1"
> <P
CLASS="para"
>Description</P
> </TH
></TR
></THEAD
><TBODY
CLASS="tbody"
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
> <P
CLASS="para"
>PL/SQL datatype</P
> </TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
> <P
CLASS="para"
>Predefined PL/SQL datatype, including predefined subtypes, such as POSITIVE. </P
> </TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
> <P
CLASS="para"
>Programmer-defined subtype</P
> </TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
> <P
CLASS="para"
>Previously created with a SUBTYPE declaration.</P
> </TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
> <P
CLASS="para"
>variable_name%TYPE</P
> </TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
> <P
CLASS="para"
>The subtype is inferred from the datatype of the variable.</P
> </TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
> <P
CLASS="para"
>table_name.column_name%TYPE</P
> </TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
> <P
CLASS="para"
>Determined from the datatype of the column in the table.</P
> </TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
> <P
CLASS="para"
>table_name%ROWTYPE</P
> </TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
> <P
CLASS="para"
>Contains the same structure as the table.</P
> </TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
> <P
CLASS="para"
>cursor_name%ROWTYPE</P
> </TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
> <P
CLASS="para"
>Contains the same structure as the "virtual table" created by the cursor. </P
> </TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
> <P
CLASS="para"
>PL/SQL table</P
> </TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
> <P
CLASS="para"
>Contains the same structure as the PL/SQL table previously declared with a TYPE statement. </P
> </TD
></TR
></TBODY
></TABLE
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="SQL2-CH-4-SECT-6.2"
>4.6.2 Examples of Subtype Declarations</A
></H3
><P
CLASS="para"
>Here are some examples of subtype declarations:</P
><UL
CLASS="itemizedlist"
><LI
CLASS="listitem"
><P
CLASS="para"
>A subtype based on a predefined datatype:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>SUBTYPE hire_date_type IS DATE;</PRE
></BLOCKQUOTE
></LI
><LI
CLASS="listitem"
><P
CLASS="para"
>A subtype based on a predefined subtype:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>SUBTYPE soc_sec_number_type IS POSITIVE;</PRE
></BLOCKQUOTE
></LI
><LI
CLASS="listitem"
><P
CLASS="para"
>Multiple subtypes based on a PL/SQL table:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>TYPE room_tab IS TABLE OF NUMBER(3) INDEX BY BINARY INTEGER;
SUBTYPE hotel_room_tab_type IS room_tab;
SUBTYPE motel_room_tab_type IS room_tab;
SUBTYPE resort_room_tab_type IS room_tab;</PRE
></BLOCKQUOTE
></LI
><LI
CLASS="listitem"
><P
CLASS="para"
>A general subtype based on NUMBER and then additional subtypes defined on that original subtype: </P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>SUBTYPE primary_key_number_type IS NUMBER;
SUBTYPE company_key_type IS primary_key_number;
SUBTYPE employee_key_type IS primary_key_number;</PRE
></BLOCKQUOTE
></LI
><LI
CLASS="listitem"
><P
CLASS="para"
>A subtype based on the datatype of a table's column:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>SUBTYPE last_name_type IS employee.last_name%TYPE;</PRE
></BLOCKQUOTE
></LI
><LI
CLASS="listitem"
><P
CLASS="para"
>A subtype based on the datatype of a record's column:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>SUBTYPE first_name_type IS emp_rec.first_name%TYPE;</PRE
></BLOCKQUOTE
></LI
><LI
CLASS="listitem"
><P
CLASS="para"
>The following subtype declarations are invalid because they seek to apply a constraint to the subtype: </P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>SUBTYPE three_value_logic IS            -- Invalid constraint!
VARCHAR2 IN ('YES', 'NO', 'MAYBE');

SUBTYPE prefix_type IS CHAR(3);         -- Invalid constraint!</PRE
></BLOCKQUOTE
></LI
></UL
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="SQL2-CH-4-SECT-6.3"
>4.6.3 Emulating Constrained Subtypes</A
></H3
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="AUTOID-4220"
></A
> <A
CLASS="indexterm"
NAME="AUTOID-4222"
></A
>While you cannot directly constrain a subtype in PL/SQL at present you can, in effect, create a constrained subtype by anchoring a subtype to a constrained type declaration. </P
><P
CLASS="para"
>Suppose that the column big_line of table text_editor was set to VARCHAR2(200), as shown below: </P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>CREATE TABLE text_editor
   (big_line VARCHAR2(200) NOT NULL, ...other columns...);</PRE
></BLOCKQUOTE
><P
CLASS="para"
>By applying this example, I can now create a subtype through a %TYPE reference to that column, as follows: </P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>SUBTYPE paragraph_type IS text_editor.big_line%TYPE;</PRE
></BLOCKQUOTE
><P
CLASS="para"
>Like the original column declaration of big_line, this paragraph type is defined as VARCHAR2(200). If I use paragraph_type to declare character variables, then those variables will take on a maximum length of 200: </P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>opening_paragraph paragraph_type; </PRE
></BLOCKQUOTE
><P
CLASS="para"
>You can also use %TYPE against a PL/SQL variable to constrain a datatype. Suppose I declare the following variables and a single subtype: </P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>DECLARE
   /* A local PL/SQL string of length 10 */
   small_string VARCHAR2(10);

   /* Create a subtype based on that variable */
   SUBTYPE teensy IS small_string%TYPE;

   /* Declare two variables based on the subtype */
   weensy teensy;
   weensy_plus teensy(100);
BEGIN</PRE
></BLOCKQUOTE
><P
CLASS="para"
>The subtype is based on the small_string variable. As a result, the weensy variable, which is declared on the subtype, has a length of 10 bytes by default. So if I try to perform the following assignment, PL/SQL will raise the VALUE_ERROR exception: </P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>weensy := 'morethantenchars';</PRE
></BLOCKQUOTE
><P
CLASS="para"
>When I declared the weensy_plus variable, on the other hand, I overrode the default subtype-based length of 10 with a maximum length of 100. As a result, this next assignment does not raise an exception: </P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>weensy_plus := 'Lots of room for me to type now';</PRE
></BLOCKQUOTE
><P
CLASS="para"
>When you create a subtype based on an existing variable or database column, that subtype inherits the length (or precision and scale, in the case of a NUMBER datatype) from the original datatype. This constraint takes effect when you declare variables based on the subtype, but only as a default. You can always override that constraint. You will have to wait for a future version of PL/SQL, however, to actually enforce the constraint in a programmer-defined subtype. </P
><P
CLASS="para"
>Finally, an anchored subtype does not carry over the NOT NULL constraint to the variables it defines. Nor does it transfer a default value that was included in the original declaration of a variable or column specification. </P
></DIV
></DIV
><DIV
CLASS="htmlnav"
><P
></P
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch04_05.htm"
TITLE="4.5 Anchored Declarations"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 4.5 Anchored Declarations"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="book"
HREF="index.htm"
TITLE="Oracle PL/SQL Programming, 2nd Edition"
><IMG
SRC="../gifs/txthome.gif"
ALT="Oracle PL/SQL Programming, 2nd Edition"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch04_07.htm#SQL2-CH-4-SECT-7.7"
TITLE="4.7 Tips for Creating and Using Variables"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 4.7 Tips for Creating and Using Variables"
BORDER="0"></A
></TD
></TR
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
>4.5 Anchored Declarations</TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="index"
HREF="index/idx_0.htm"
TITLE="Book Index"
><IMG
SRC="../gifs/index.gif"
ALT="Book Index"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
>4.7 Tips for Creating and Using Variables</TD
></TR
></TABLE
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"></DIV
><IMG SRC="../gifs/smnavbar.gif"
USEMAP="#map"
BORDER="0"
ALT="The Oracle Library Navigation">

<P><font size="-1">
<a href="../copyrght.htm#copy">Copyright (c) 2000</a> O'Reilly &amp; Associates. All rights reserved.
</font></P>

<MAP NAME="map">

<AREA SHAPE="RECT"
COORDS="0,0,35,30"
HREF="../index.htm"
ALT="Library Home">

<AREA SHAPE="RECT"
COORDS="40,0,95,30"
HREF="index.htm"
ALT="Oracle PL/SQL Programming, 2nd. Ed.">

<AREA SHAPE="RECT"
COORDS="100,0,200,30"
HREF="../guide8i/index.htm"
ALT="Guide to Oracle 8i Features">

<AREA SHAPE="RECT"
COORDS="205,0,245,30"
HREF="../bipack/index.htm"
ALT="Oracle Built-in Packages">

<AREA SHAPE="RECT"
COORDS="250,0,320,30"
HREF="../advprog/index.htm"
ALT="Advanced PL/SQL Programming with Packages">

<AREA SHAPE="RECT"
COORDS="325,0,420,30"
HREF="../webapp/index.htm"
ALT="Oracle Web Applications">

<AREA SHAPE="RECT"
COORDS="425,0,490,30"
HREF="../langpkt/index.htm"
ALT="Oracle PL/SQL Language Pocket Reference">

<AREA SHAPE="RECT"
COORDS="495,0,570,30"
HREF="../bipkt/index.htm"
ALT="Oracle PL/SQL Built-ins Pocket Reference">
</MAP>

</BODY
>
<!-- Mirrored from liso.cs.pusan.ac.kr by HTTrack Website Copier/3.x [XR&CO'2001] -->
</HTML
>
