<HTML
><HEAD
><TITLE
>[Chapter 19] 19.5 Collection Pseudo-Functions</TITLE
><META
NAME="DC.Creator"
CONTENT="Steven Feuerstein &amp; Bill Pribyl"><META
NAME="DC.Date"
CONTENT="2000-04-29T19:08:52Z"><META
NAME="DC.Format"
CONTENT="text/html"
SCHEME="MIME"><META
NAME="DC.Identifier"
CONTENT="O'Reilly and Associates CD-ROM-1-56592-335-9E"><META
NAME="DC.Language"
CONTENT="en-US"><META
NAME="DC.Publisher"
CONTENT="O'Reilly &amp; Associates, Inc."><META
NAME="DC.Source"
CONTENT="1-56592-335-9E"
SCHEME="ISBN"><META
NAME="DC.Subject.Keyword"
CONTENT="Oracle PL/SQL"><META
NAME="DC.Title"
CONTENT="Oracle PL/SQL Programming, 2nd Edition"><META
NAME="DC.Type"
CONTENT="Text.Monograph"><META
NAME="generator"
CONTENT="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><LINK
REL="stylesheet"
TYPE="text/css"
HREF="../style/style1.css"><LINK
REV="made"
HREF="mailto:online-books@oreilly.com"
TITLE="Online Books Comments"><LINK
REL="up"
HREF="ch19_01.htm"
TITLE="19. Nested Tables and VARRAYs"><LINK
REL="prev"
HREF="ch19_04.htm#SQL2-CH-19-SECT-4.1.3"
TITLE="19.4 Using Collections"><LINK
REL="next"
HREF="ch19_06.htm#SQL2-CH-19-SECT-6.0.5"
TITLE="19.6 Collection Built-Ins"></HEAD
><BODY
><DIV
CLASS="htmlnav"
><H1
><IMG
SRC="gifs/smbanner.gif"
ALT="Oracle PL/SQL Programming, 2nd Edition"
USEMAP="#srchmap"
BORDER="0"></H1
><MAP
NAME="srchmap"
><AREA
SHAPE="RECT"
COORDS="0,0,466,65"
HREF="index.htm"
ALT="Oracle PL/SQL Programming, 2nd Edition"><AREA
SHAPE="RECT"
COORDS="467,0,514,18"
HREF="jobjects/fsearch.htm"
ALT="Search this book"></MAP
><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch19_04.htm#SQL2-CH-19-SECT-4.1.3"
TITLE="19.4 Using Collections"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 19.4 Using Collections"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><SPAN
CLASS="NAVTITLE"
><A
CLASS="chapter"
REL="up"
HREF="ch19_01.htm"
TITLE="19. Nested Tables and VARRAYs"
>Chapter 19<BR>Nested Tables and VARRAYs</A
></SPAN
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch19_06.htm#SQL2-CH-19-SECT-6.0.5"
TITLE="19.6 Collection Built-Ins"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 19.6 Collection Built-Ins"
BORDER="0"></A
></TD
></TR
></TABLE
>&nbsp;<HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"></DIV
><DIV
CLASS="sect1"
><H2
CLASS="sect1"
><A
CLASS="title"
NAME="SQL2-CH-19-SECT-5"
>19.5 Collection Pseudo-Functions</A
></H2
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="ch19-idx-8596-1"
></A
> <A
CLASS="indexterm"
NAME="ch19-idx-8596-2"
></A
> I've been working with Oracle's SQL for more than ten years and PL/SQL for more than five. My brain has rarely turned as many cartwheels over SQL's semantics as it has recently, when contemplating the "collection pseudo-functions" introduced in Oracle8. </P
><P
CLASS="para"
>These collection pseudo-functions exist to coerce database tables into acting like collections, and vice versa. Because there are some manipulations that work best when data are in one form versus the other, these functions give application programmers access to a rich and interesting set of structures and operations. </P
><P
CLASS="para"
>Note that these operators are not available in PL/SQL proper, but only in SQL. You can, however, employ these operators in SQL statements which appear in your PL/SQL code, and it is extremely useful to understand how and when to do so. We'll get to some examples shortly. </P
><P
CLASS="para"
>The four collection pseudo-functions are as follows:</P
><DL
CLASS="variablelist"
><DT
CLASS="term"
>THE</DT
><DD
CLASS="listitem"
><P
CLASS="para"
>Maps a single column value in a single row into a virtual database table. This pseudo-function allows you to manipulate the elements of a persistent collection. </P
></DD
><DT
CLASS="term"
>CAST</DT
><DD
CLASS="listitem"
><P
CLASS="para"
>Maps a collection of one type to a collection of another type. This can encompass mapping a VARRAY into a nested table. </P
></DD
><DT
CLASS="term"
>MULTISET</DT
><DD
CLASS="listitem"
><P
CLASS="para"
>Maps a database table to a collection. With MULTISET and CAST, you can actually retrieve rows from a database table as a collection-typed column. </P
></DD
><DT
CLASS="term"
>TABLE</DT
><DD
CLASS="listitem"
><P
CLASS="para"
>Maps a collection to a database table. This is the inverse of MULTISET. </P
></DD
></DL
><P
CLASS="para"
>Oracle has introduced these pseudo-functions in order to manipulate collections that live in the database. They are important to our PL/SQL programs for several reasons, not the least of which is that they provide an incredibly efficient way to move data between the database and the application. </P
><P
CLASS="para"
>Yes, these pseudo-functions can be puzzling; but if you're the kind of person who gets truly excited by arcane code, these Oracle8 SQL extensions will make you jumping-up-and-down silly. </P
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="SQL2-CH-19-SECT-5.1"
>19.5.1 The THE Pseudo-function</A
></H3
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="ch19-idx-8607-1"
></A
><A
CLASS="indexterm"
NAME="ch19-idx-8607-2"
></A
><A
CLASS="indexterm"
NAME="ch19-idx-8607-3"
></A
>If you have a column that's a nested table, and you want to insert, update, or delete from the contents of this column, you cannot do so with any SQL statement that is familiar to you from Oracle7. Instead, you will need to use the strangely named keyword THE, which helps tell Oracle which row from the outer table you want to deal with. </P
><P
CLASS="para"
>Earlier, we created the color_models table:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>CREATE TABLE color_models (
   model_type VARCHAR2(12),
   colors Color_tab_t)
NESTED TABLE colors STORE AS color_model_colors_tab;</PRE
></BLOCKQUOTE
><P
CLASS="para"
>We had inserted a row with model_type ='RGB' and a colors column containing ('RED', 'GREEN', 'BLUE'). Imagine now that we've populated color_models with a half dozen or so records. </P
><P
CLASS="para"
>One question that might have come into your mind is: how can we retrieve all of the colors for a single model using a SELECT statement? </P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>SELECT VALUE(c) FROM
   THE(SELECT colors FROM color_models
        WHERE model_type = 'RGB') c;</PRE
></BLOCKQUOTE
><P
CLASS="para"
>OK, you can exhale now. The meaning of this statement is "retrieve the individual elements of RGB color model." Or, more literally, "retrieve the value of each element of the colors nested table within the color_models outer table." Sure enough, it displays the following:[<A
CLASS="footnote"
HREF="#AUTOID-18103"
>3</A
>] </P
><BLOCKQUOTE
CLASS="footnote"
><DIV
CLASS="footnote"
><P
CLASS="para"
><A
CLASS="footnote"
NAME="AUTOID-18103"
>[3]</A
> As of Oracle 8.0.4.</P
></DIV
></BLOCKQUOTE
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>VALUE(C)
------------------------------
RED
GREEN
BLUE</PRE
></BLOCKQUOTE
><P
CLASS="para"
>I guess it's really not <EM
CLASS="emphasis"
>that</EM
> weird; we're just substituting a subquery for a table in the FROM clause. </P
><P
CLASS="para"
>Why does the language use the keyword name THE instead of, say, OUTER? Oracle's documentation says "THE (<EM
CLASS="emphasis"
>select expression</EM
>) identifies <EM
CLASS="emphasis"
>the</EM
> nested table on which the DML operation is to be performed." I guess somebody at Oracle has a sense of humor! </P
><P
CLASS="para"
>Another way you could have expressed the previous query is to use the predefined alias COLUMN_VALUE: </P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>SELECT COLUMN_VALUE FROM
   THE(SELECT colors FROM color_models
        WHERE model_type = 'RGB');</PRE
></BLOCKQUOTE
><P
CLASS="para"
>COLUMN_VALUE is a way of referring to elements of a nested table of scalars. It is a syntactic shortcut to achieve the same result as the previous example. </P
><P
CLASS="para"
>The general structure of a SELECT statement with THE is shown here:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>SELECT &lt;<I
CLASS="replaceable"
>expression list</I
>&gt;
FROM THE(SELECT <I
CLASS="replaceable"
>&lt;outer column name&gt;</I
>
           FROM <I
CLASS="replaceable"
>&lt;outer table&gt;</I
>          -- which outer table row?
          WHERE <I
CLASS="replaceable"
>&lt;condition on outer table&gt;</I
>)
WHERE <I
CLASS="replaceable"
>&lt;condition on inner table&gt;</I
>;</PRE
></BLOCKQUOTE
><P
CLASS="para"
>Where:</P
><DL
CLASS="variablelist"
><DT
CLASS="term"
>expression list</DT
><DD
CLASS="listitem"
><P
CLASS="para"
>Is COLUMN_VALUE or a SELECT-list, depending on whether the retrieved collection is a scalar or a composite. If it's a composite (such as an object), then the Select-list can include any of the object type's attributes. </P
></DD
><DT
CLASS="term"
>outer column name</DT
><DD
CLASS="listitem"
><P
CLASS="para"
>Refers to the name you've given the outer table column, which is a collection type. </P
></DD
></DL
><P
CLASS="para"
>The WHERE condition on the outer table must retrieve zero or one row(s); otherwise, you'll get the message "ORA-01427: single-row subquery returns more than one row." </P
><P
CLASS="para"
>You can also use a THE subquery as the target of an <A
CLASS="indexterm"
NAME="AUTOID-18133"
></A
><A
CLASS="indexterm"
NAME="AUTOID-18136"
></A
><A
CLASS="indexterm"
NAME="AUTOID-18139"
></A
>INSERT, UPDATE, and DELETE statements. Some brief examples: </P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>-- change BLUE to BURGUNDY inside the collection
UPDATE THE(SELECT colors
                  FROM color_models
                 WHERE model_type = 'RGB')
   SET COLUMN_VALUE = 'BURGUNDY'
 WHERE COLUMN_VALUE = 'BLUE';

-- add a silly extra color
INSERT INTO THE(SELECT colors
                  FROM color_models
                 WHERE model_type = 'RGB')
VALUES ('EXTRA-COLOR');

-- show the current colors
SELECT COLUMN_VALUE FROM THE(SELECT colors
                               FROM color_models
                              WHERE model_type = 'RGB');

COLUMN_VALUE
-------------------
RED
GREEN
BURGUNDY
EXTRA-COLOR

-- delete the extra color
DELETE THE(SELECT colors
             FROM color_models
            WHERE model_type = 'RGB')
WHERE COLUMN_VALUE = 'EXTRA-COLOR';</PRE
></BLOCKQUOTE
><P
CLASS="para"
>The Oracle8 Server Application Developers Guide is a good source of more sample DML on collections.<A
CLASS="indexterm"
NAME="AUTOID-18144"
></A
> <A
CLASS="indexterm"
NAME="AUTOID-18145"
></A
> <A
CLASS="indexterm"
NAME="AUTOID-18146"
></A
> </P
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="SQL2-CH-19-SECT-5.2"
>19.5.2 The CAST Pseudo-function</A
></H3
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="ch19-idx-8611-1"
></A
>The new THE pseudo-function does not work directly on VARRAYs. However, it is possible to use Oracle8's CAST function on a <A
CLASS="indexterm"
NAME="ch19-idx-8628-1"
></A
>VARRAY so we can emulate the SELECT statement shown in the previous section. </P
><DIV
CLASS="sect3"
><H4
CLASS="sect3"
><A
CLASS="title"
NAME="SQL2-CH-19-SECT-5.2.1"
>19.5.2.1 Casting a named collection</A
></H4
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="ch19-idx-8632-1"
></A
><A
CLASS="indexterm"
NAME="ch19-idx-8632-2"
></A
> <A
CLASS="indexterm"
NAME="ch19-idx-8632-3"
></A
>Here is an example of casting a named collection. If we have created the color_models table based on a VARRAY type as follows: </P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>CREATE TYPE Color_array_t AS VARRAY(16) OF VARCHAR2(30);

CREATE TABLE color_models_a (
   model_type VARCHAR2(12),
   colors Color_array_t);</PRE
></BLOCKQUOTE
><P
CLASS="para"
>we can CAST the VARRAY colors column as a nested table and apply the THE pseudo-function to the result: </P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>SELECT COLUMN_VALUE FROM
   THE(SELECT <B
CLASS="emphasis.bold"
>CAST(colors AS Color_tab_t)</B
>
         FROM color_models_a
        WHERE model_type = 'FGB');</PRE
></BLOCKQUOTE
><P
CLASS="para"
>CAST performs an on-the-fly conversion of the Color_array_t collection type to the Color_tab_t collection type. </P
><BLOCKQUOTE
CLASS="note"
><P
CLASS="para"
><STRONG
>NOTE:</STRONG
> CAST is available only within SQL statements. That means you can't use it directly within PL/SQL. However, it is useful in SELECTs and DML statements that appear in your PL/SQL programs. </P
></BLOCKQUOTE
><P
CLASS="para"
>A subtle difference exists between what you can accomplish with CAST and what you can accomplish with THE. As we saw in the previous section, THE can serve on either the "left-hand side" or the "right-hand side" of an INSERT, UPDATE, or DELETE statement. THE subqueries can be part of the source, or the target, of these DML statements. By contrast, CAST only works in SELECTs or on the right-hand side of DML statements.<A
CLASS="indexterm"
NAME="AUTOID-18173"
></A
> <A
CLASS="indexterm"
NAME="AUTOID-18174"
></A
> <A
CLASS="indexterm"
NAME="AUTOID-18175"
></A
> <A
CLASS="indexterm"
NAME="AUTOID-18176"
></A
> </P
></DIV
><DIV
CLASS="sect3"
><H4
CLASS="sect3"
><A
CLASS="title"
NAME="SQL2-CH-19-SECT-5.2.2"
>19.5.2.2 Casting an "unnamed collection"</A
></H4
><P
CLASS="para"
>It is also possible to cast a "bunch of records"&nbsp;-- such as the result of a subquery&nbsp;-- as a particular collection type. Doing so requires the MULTISET function, covered in the next section.<A
CLASS="indexterm"
NAME="AUTOID-18180"
></A
> </P
></DIV
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="SQL2-CH-19-SECT-5.3"
>19.5.3 The MULTISET Pseudo-function</A
></H3
><P
CLASS="para"
>This new Oracle8 function exists only for use within CASTs. <A
CLASS="indexterm"
NAME="ch19-idx-8615-1"
></A
>MULTISET allows you to retrieve a set of data and convert it on-the-fly to a collection type. The simplest example is this: </P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>SELECT CAST (MULTISET (SELECT <I
CLASS="replaceable"
>field</I
> FROM <I
CLASS="replaceable"
>table</I
>) AS <I
CLASS="replaceable"
>collection-type</I
>)
   FROM DUAL;</PRE
></BLOCKQUOTE
><P
CLASS="para"
>So if we happened to have a relational table of colors:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>CREATE TABLE some_colors (
   color_name VARCHAR2(30),
   color_classification VARCHAR2(30));</PRE
></BLOCKQUOTE
><P
CLASS="para"
>and we wanted to CAST to a collection so we could fetch a set of them at once, we could do this: </P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>DECLARE
   some_hot_colors Color_tab_t;
BEGIN
   SELECT CAST(MULTISET(SELECT color_name
                          FROM some_colors
                         WHERE color_classification = 'HOT')
            AS Color_tab_t)
     INTO some_hot_colors
     FROM DUAL;
END;</PRE
></BLOCKQUOTE
><P
CLASS="para"
>Another way to use MULTISET involves a correlated subquery in the SELECT list: </P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>SELECT <I
CLASS="replaceable"
>outerfield</I
>,
  CAST(MULTISET(SELECT <I
CLASS="replaceable"
>field</I
> FROM <I
CLASS="replaceable"
>whateverTable</I
>
                 WHERE <I
CLASS="replaceable"
>correlationCriteria</I
>)
    AS <I
CLASS="replaceable"
>collectionTypeName</I
>)
  FROM <I
CLASS="replaceable"
>outerTable</I
>;</PRE
></BLOCKQUOTE
><P
CLASS="para"
>This technique is useful for making joins look as if they include a collection. Going back to our birds example, suppose that we had a detail table that listed, for each bird, the countries where that species lives: </P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>CREATE TABLE birds (
   genus VARCHAR2(128),
   species VARCHAR2(128),
   colors Color_array_t,
   PRIMARY KEY (genus, species)
);

CREATE TABLE bird_habitats (
   genus VARCHAR2(128),
   species VARCHAR2(128),
   country VARCHAR2(60),
   FOREIGN KEY (genus, species) REFERENCES birds (genus, species)
);

CREATE TYPE Country_tab_t AS TABLE OF VARCHAR2(60);</PRE
></BLOCKQUOTE
><P
CLASS="para"
>We should then be able to "smush" the master and detail tables together in a single SELECT that converts the detail records into a collection type. This feature has enormous significance for client/server programs, since the number of round trips can be cut down without the overhead of duplicating the master records with each and every detail record: </P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>DECLARE
   CURSOR bird_curs IS
      SELECT b.genus, b.species,
         CAST(MULTISET(SELECT bh.country FROM bird_habitats bh
                        WHERE bh.genus = b.genus
                          AND bh.species = b.species)
           AS country_tab_t)
        FROM birds b;
   bird_row bird_curs%ROWTYPE;
BEGIN
   OPEN bird_curs;
   FETCH bird_curs into bird_row;
   CLOSE bird_curs;
END;</PRE
></BLOCKQUOTE
><BLOCKQUOTE
CLASS="note"
><P
CLASS="para"
><STRONG
>NOTE:</STRONG
> In Oracle 8.0.3 this code produces the error "PLS-00201: identifier 'B.GENUS' must be declared." It works properly in 8.0.4. See Oracle's <CITE
CLASS="citetitle"
>SQL Reference Guide</CITE
> for more information and examples. As with the CAST pseudo-function, MULTISET cannot serve as the target of an INSERT, UPDATE, or DELETE statement.</P
></BLOCKQUOTE
><P
CLASS="para"
>The workaround for this bug is to create a packaged function which will return the desired data expressed in the form of a collection. Then you can use this function, rather than the correlated subquery, in the SELECT statement. Here is the package specification that we need: </P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>CREATE PACKAGE fixbug AS
    FUNCTION get_country_tab (p_genus IN VARCHAR2,
      p_species IN VARCHAR2)
      RETURN Country_tab_t;

   PRAGMA RESTRICT_REFERENCES (get_country_tab, WNDS, RNPS, WNPS);
END;</PRE
></BLOCKQUOTE
><P
CLASS="para"
>And the body:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>CREATE PACKAGE BODY fixbug AS
   FUNCTION get_country_tab (p_genus IN VARCHAR2,p_species IN VARCHAR2)
     RETURN Country_tab_t
   IS
      l_country_tab Country_tab_t;
      CURSOR ccur IS
         SELECT CAST(MULTISET(SELECT bh.country FROM bird_habitats bh
                               WHERE bh.species = p_species
                                 AND bh.genus = p_genus)
              AS country_tab_t)
        FROM DUAL;

   BEGIN
      OPEN ccur;
      FETCH ccur INTO l_country_tab;
      CLOSE ccur;
      RETURN l_country_tab;

   END;
END;</PRE
></BLOCKQUOTE
><P
CLASS="para"
>Note that the CAST above uses a selection from DUAL to substitute for the correlated subquery. </P
><P
CLASS="para"
>We can now rewrite our original PL/SQL fragment as follows:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>DECLARE
   CURSOR bird_curs IS
      SELECT b.genus, b.species,
        <B
CLASS="emphasis.bold"
>fixbug.get_country_tab(b.genus, b.species)</B
>
        FROM birds b;
   bird_row bird_curs%ROWTYPE;
BEGIN
   OPEN bird_curs;
   FETCH bird_curs into bird_row;
   CLOSE bird_curs;
END;<A
CLASS="indexterm"
NAME="AUTOID-18217"
></A
></PRE
></BLOCKQUOTE
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="SQL2-CH-19-SECT-5.4"
>19.5.4 The TABLE Pseudo-function</A
></H3
><P
CLASS="para"
>Just what you were hoping for, another use of the <A
CLASS="indexterm"
NAME="ch19-idx-8619-1"
></A
>TABLE keyword! In this case, TABLE is operating as a function that coerces a collection-valued column into something you can SELECT from. It sounds complicated, but this section presents an example that's not too hard to follow. </P
><P
CLASS="para"
>Looking at it another way, let's say that you have a database table with a column of a collection type. How can you figure out which rows in the table contain a collection that meets certain criteria? That is, how can you select from the database table, putting a WHERE clause on the collection's contents? </P
><P
CLASS="para"
>Wouldn't it be nice if you could just say:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>SELECT *
  FROM table_name
 WHERE collection_column
       HAS CONTENTS 'whatever';   -- invalid; imaginary syntax!</PRE
></BLOCKQUOTE
><P
CLASS="para"
>Logically, that's exactly what you can do with the TABLE function. Going back to our color_models database table, how could we get a listing of all color models which contain the color RED? Here's the real way to do it: </P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>SELECT *
  FROM color_models c
 WHERE 'RED' IN
       (SELECT * FROM TABLE(c.colors));</PRE
></BLOCKQUOTE
><P
CLASS="para"
>which, in SQL*Plus, returns</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>MODEL_TYPE   COLORS
------------ ------------------------------------------------------
RGB          COLOR_TAB_T('RED', 'GREEN', 'BLUE')</PRE
></BLOCKQUOTE
><P
CLASS="para"
>The query means "go through the color_models table and return all rows whose list of colors contains at least one RED element." Had there been more rows with a RED element in their colors column, these rows too would have appeared in our SQL*Plus result set. </P
><P
CLASS="para"
>As illustrated above, TABLE accepts an alias-qualified collection column as its argument: </P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>TABLE(alias_name.collection_name)</PRE
></BLOCKQUOTE
><P
CLASS="para"
>TABLE returns the contents of this collection coerced into a virtual database table. Hence, you can SELECT from it; in our example, it's used in a subquery. </P
><P
CLASS="para"
>Does the TABLE function remind you vaguely of the <A
CLASS="indexterm"
NAME="ch19-idx-8633-1"
></A
>THE pseudo-function? Recall our THE example: </P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>SELECT VALUE(c) FROM
   THE(SELECT colors FROM color_models
        WHERE model_type = 'RGB') c;</PRE
></BLOCKQUOTE
><P
CLASS="para"
>which (in Oracle 8.0.4 and later) returns:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>VALUE(C)
------------------------------
RED
GREEN
BLUE</PRE
></BLOCKQUOTE
><P
CLASS="para"
>So what is the difference between the pseudo-functions THE and TABLE? Both return something that, for purposes of the rest of the SQL statement, serves as a "virtual database table." So the difference between the functions must lie in that on which they operate&nbsp;-- their "inputs." The TABLE function operates on a (column-typed) nested table. By contrast, the pseudo-function THE operates on a SELECT statement's result set that contains exactly one row with one column which is a (column-typed) nested table. </P
><P
CLASS="para"
>As it turns out, the TABLE function gets called "under the covers" whenever you use <A
CLASS="indexterm"
NAME="AUTOID-18242"
></A
> THE as the target of an INSERT, UPDATE, or DELETE statement. This under-the-covers call coerces the results of the subquery into a virtual database table upon which the DML makes sense to operate. </P
><BLOCKQUOTE
CLASS="tip"
><P
CLASS="para"
><STRONG
>TIP:</STRONG
> To repeat an earlier admonition, none of the collection pseudo-functions are available from within PL/SQL, but PL/SQL programmers will certainly want to know how to use these gizmos in their SQL statements!</P
></BLOCKQUOTE
><P
CLASS="para"
>Personally, I find these new features fascinating, and I enjoy the mental calisthenics required to understand and use them. Maybe mine isn't a universal sentiment, but at least you can admit that Oracle hasn't let their language technology get<A
CLASS="indexterm"
NAME="AUTOID-18246"
></A
> tired!<A
CLASS="indexterm"
NAME="AUTOID-18247"
></A
> <A
CLASS="indexterm"
NAME="AUTOID-18248"
></A
> </P
></DIV
></DIV
><DIV
CLASS="htmlnav"
><P
></P
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch19_04.htm#SQL2-CH-19-SECT-4.1.3"
TITLE="19.4 Using Collections"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 19.4 Using Collections"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="book"
HREF="index.htm"
TITLE="Oracle PL/SQL Programming, 2nd Edition"
><IMG
SRC="../gifs/txthome.gif"
ALT="Oracle PL/SQL Programming, 2nd Edition"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch19_06.htm#SQL2-CH-19-SECT-6.0.5"
TITLE="19.6 Collection Built-Ins"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 19.6 Collection Built-Ins"
BORDER="0"></A
></TD
></TR
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
>19.4 Using Collections</TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="index"
HREF="index/idx_0.htm"
TITLE="Book Index"
><IMG
SRC="../gifs/index.gif"
ALT="Book Index"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
>19.6 Collection Built-Ins</TD
></TR
></TABLE
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"></DIV
><IMG SRC="../gifs/smnavbar.gif"
USEMAP="#map"
BORDER="0"
ALT="The Oracle Library Navigation">

<P><font size="-1">
<a href="../copyrght.htm#copy">Copyright (c) 2000</a> O'Reilly &amp; Associates. All rights reserved.
</font></P>

<MAP NAME="map">

<AREA SHAPE="RECT"
COORDS="0,0,35,30"
HREF="../index.htm"
ALT="Library Home">

<AREA SHAPE="RECT"
COORDS="40,0,95,30"
HREF="index.htm"
ALT="Oracle PL/SQL Programming, 2nd. Ed.">

<AREA SHAPE="RECT"
COORDS="100,0,200,30"
HREF="../guide8i/index.htm"
ALT="Guide to Oracle 8i Features">

<AREA SHAPE="RECT"
COORDS="205,0,245,30"
HREF="../bipack/index.htm"
ALT="Oracle Built-in Packages">

<AREA SHAPE="RECT"
COORDS="250,0,320,30"
HREF="../advprog/index.htm"
ALT="Advanced PL/SQL Programming with Packages">

<AREA SHAPE="RECT"
COORDS="325,0,420,30"
HREF="../webapp/index.htm"
ALT="Oracle Web Applications">

<AREA SHAPE="RECT"
COORDS="425,0,490,30"
HREF="../langpkt/index.htm"
ALT="Oracle PL/SQL Language Pocket Reference">

<AREA SHAPE="RECT"
COORDS="495,0,570,30"
HREF="../bipkt/index.htm"
ALT="Oracle PL/SQL Built-ins Pocket Reference">
</MAP>

</BODY
>
<!-- Mirrored from liso.cs.pusan.ac.kr by HTTrack Website Copier/3.x [XR&CO'2001] -->
</HTML
>
