<HTML
><HEAD
><TITLE
>[Chapter 16] 16.5 Package Data</TITLE
><META
NAME="DC.Creator"
CONTENT="Steven Feuerstein &amp; Bill Pribyl"><META
NAME="DC.Date"
CONTENT="2000-04-29T19:04:33Z"><META
NAME="DC.Format"
CONTENT="text/html"
SCHEME="MIME"><META
NAME="DC.Identifier"
CONTENT="O'Reilly and Associates CD-ROM-1-56592-335-9E"><META
NAME="DC.Language"
CONTENT="en-US"><META
NAME="DC.Publisher"
CONTENT="O'Reilly &amp; Associates, Inc."><META
NAME="DC.Source"
CONTENT="1-56592-335-9E"
SCHEME="ISBN"><META
NAME="DC.Subject.Keyword"
CONTENT="Oracle PL/SQL"><META
NAME="DC.Title"
CONTENT="Oracle PL/SQL Programming, 2nd Edition"><META
NAME="DC.Type"
CONTENT="Text.Monograph"><META
NAME="generator"
CONTENT="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><LINK
REL="stylesheet"
TYPE="text/css"
HREF="../style/style1.css"><LINK
REV="made"
HREF="mailto:online-books@oreilly.com"
TITLE="Online Books Comments"><LINK
REL="up"
HREF="ch16_01.htm"
TITLE="16. Packages"><LINK
REL="prev"
HREF="ch16_04.htm#SQL2-CH-16-SECT-4.2"
TITLE="16.4 The Package Body"><LINK
REL="next"
HREF="ch16_06.htm"
TITLE="16.6 Package Initialization"></HEAD
><BODY
><DIV
CLASS="htmlnav"
><H1
><IMG
SRC="gifs/smbanner.gif"
ALT="Oracle PL/SQL Programming, 2nd Edition"
USEMAP="#srchmap"
BORDER="0"></H1
><MAP
NAME="srchmap"
><AREA
SHAPE="RECT"
COORDS="0,0,466,65"
HREF="index.htm"
ALT="Oracle PL/SQL Programming, 2nd Edition"><AREA
SHAPE="RECT"
COORDS="467,0,514,18"
HREF="jobjects/fsearch.htm"
ALT="Search this book"></MAP
><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch16_04.htm#SQL2-CH-16-SECT-4.2"
TITLE="16.4 The Package Body"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 16.4 The Package Body"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><SPAN
CLASS="NAVTITLE"
><A
CLASS="chapter"
REL="up"
HREF="ch16_01.htm"
TITLE="16. Packages"
>Chapter 16<BR>Packages</A
></SPAN
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch16_06.htm"
TITLE="16.6 Package Initialization"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 16.6 Package Initialization"
BORDER="0"></A
></TD
></TR
></TABLE
>&nbsp;<HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"></DIV
><DIV
CLASS="sect1"
><H2
CLASS="sect1"
><A
CLASS="title"
NAME="SQL2-CH-16-SECT-5"
>16.5 Package Data</A
></H2
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="ch16-idx-333153-1"
></A
><A
CLASS="indexterm"
NAME="ch16-idx-333153-2"
></A
> Some of the most interesting and useful features of packages have to do with package data. Package data is any data structure declared in a package body or specification. With package data you can: </P
><UL
CLASS="itemizedlist"
><LI
CLASS="listitem"
><P
CLASS="para"
>Create global variables that are accessible from any program in the current session. </P
></LI
><LI
CLASS="listitem"
><P
CLASS="para"
>Create persistent data structures&nbsp;-- data that retains its value throughout your Oracle session, even when no package programs are running. </P
></LI
></UL
><P
CLASS="para"
>This section describes the architecture of and uses for package data.</P
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="SQL2-CH-16-SECT-5.1"
>16.5.1 Architecture of Package-Based Data</A
></H3
><P
CLASS="para"
>The first time you reference a package element, the entire package (compiled) is loaded into the SGA of the Oracle database instance on the server. That code is then shared by all sessions having EXECUTE authority on the package. </P
><P
CLASS="para"
>The data that is declared by the package elements is also instantiated in the SGA, but it is not shared across all sessions. Instead, each Oracle session is assigned its own private PL/SQL area, which contains a copy of the package data (see <A
CLASS="xref"
HREF="ch16_05.htm#SQL2-CH-16-SECT-5.2"
>Figure 16.4</A
>). This private PL/SQL area is maintained in the SGA for as long as your session is running. The values assigned to your packaged data structures also remain available in the SGA throughout your session. In other words, they persist for the duration. </P
><P
CLASS="para"
>Contrast this behavior with the variables instantiated in the declaration section of a standalone module. The scope of those variables is restricted to the module. When the module terminates, the memory and values associated with those variables are released. They are no more. </P
><H4
CLASS="figure"
><A
CLASS="title"
NAME="SQL2-CH-16-FIG-6"
>Figure 16.4: Private PL/SQL areas in shared memory</A
></H4
><IMG
CLASS="graphic"
SRC="figs/sql2.1604.gif"
ALT="Figure 16.4"><P
CLASS="para"
>The scope of a package is, however, the entire schema in which it is defined. Any session that has EXECUTE authority on the package may access the package and use the data defined inside the package. Because the scope of the package data is the entire session, their values are maintained in the SGA. You are not, in other words, simply sharing the data structure among your programs. You share the values in those structures as well. </P
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="SQL2-CH-16-SECT-5.2"
>16.5.2 Global Within a Single Oracle Session</A
></H3
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="AUTOID-14797"
></A
><A
CLASS="indexterm"
NAME="ch16-idx-333154-2"
></A
> <A
CLASS="indexterm"
NAME="ch16-idx-333154-3"
></A
> As a result of the SGA-based architecture, package data structures act as globals within the PL/SQL environment. Remember, however, that they are globals only within a single Oracle session or connection. Package data is not shared across sessions. If you need to share data between different Oracle sessions, you must use the DBMS_PIPE package (see <A
CLASS="xref"
HREF="appc_01.htm"
>Appendix C</A
>, for more information). </P
><P
CLASS="para"
>You need to be careful about assuming that different parts of your application do maintain a single Oracle connection. There are times when a tool may establish a new connection to the database to perform an action. If this occurs, the data you have stored in a package in the first connection will not be available. </P
><P
CLASS="para"
>Consider the scenario in <A
CLASS="xref"
HREF="ch16_05.htm#SQL2-CH-16-SECT-5.2"
>Figure 16.5</A
>. An Oracle Forms application has saved values to data structures in a package. When the form calls a stored procedure, this stored procedure can access these same package-based variables and values as the form, because they share a single Oracle connection. </P
><P
CLASS="para"
>The form then uses the RUN_PRODUCT built-in to kick off a report using Oracle Reports. By default, Oracle Reports uses a second connection to the database (same user name and password) to run the report. So even if this report accesses the same package and its data structures, the values in those data structures will not match those used by the form. It is a different Oracle connection and a new instantiation of the data structures. </P
><H4
CLASS="figure"
><A
CLASS="title"
NAME="SQL2-CH-16-FIG-7"
>Figure 16.5: Two Oracle connections between Oracle Forms and Oracle Reports</A
></H4
><IMG
CLASS="graphic"
SRC="figs/sql2.1605.gif"
ALT="Figure 16.5"><P
CLASS="para"
>Just as there are two types of data structures in the package (public and private), there are also two types of global package data to consider: global public data and global private data. The next two sections explore the differences between these kinds of package data. </P
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="SQL2-CH-16-SECT-5.3"
>16.5.3 Global Public Data</A
></H3
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="AUTOID-14819"
></A
> <A
CLASS="indexterm"
NAME="AUTOID-14823"
></A
>Any data structure declared in the specification of a package is a global, public data structure. This means that any program outside of the package can access the data structure. You can, for example, define a PL/SQL table in a package specification and use it to keep a running list of all employees selected for a raise. You can also create a package of constants which are used throughout all of your programs. Then all developers will reference the packaged constants instead of hardcoding the values in their programs. </P
><P
CLASS="para"
>You can also change global public data structures, unless they are variables declared as CONSTANTs in the declaration statement. </P
><P
CLASS="para"
>Global data is the proverbial "loose cannon" of programming. It is very convenient to declare, and have available from any module at any point in time, all sorts of information. Reliance on global data structures, however, leads to unstructured code that is full of side effects. </P
><P
CLASS="para"
>Remember that the specification of a module should give you all the information you need to understand how to call and use that module. If the program reads and/or writes global data structures, you cannot tell this from the module specification. You cannot be sure of what is happening in your application and which program changes what data. </P
><P
CLASS="para"
>It is always preferable to pass data as parameters in and out of modules. In that way, the reliance on those data structures is documented in the specification and can be accounted for by the developer. </P
><P
CLASS="para"
>On the other hand, you should create named, global data structures for information that truly is global to an application, such as constants and configuration information. </P
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="SQL2-CH-16-SECT-5.4"
>16.5.4 Global Private Data</A
></H3
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="AUTOID-14834"
></A
> <A
CLASS="indexterm"
NAME="AUTOID-14838"
></A
>A global but private data structure, also called package-level data, is declared in the body of the package. Since it does not appear in the specification, this data cannot be referenced outside of the package&nbsp;-- only from within the package, by other package elements. This data only exists on the level of the package. </P
><P
CLASS="para"
>A data structure declared in a package still does function as a global. Since it is not declared in any specific module's declaration section, it is available to all modules, cursors, and other elements of the package. </P
><P
CLASS="para"
>In the following example of the sp_timer package (the full version is on the disk), the last_timing variable is a package-level global. It is referenced in both of the modules, capture and elapsed. The capture procedures sets the value of last_timing. The elapsed function uses the value of last_timing to compute the elapsed time. </P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>/* Filename on companion disk: sptimer.sps. */
PACKAGE BODY sp_timer
IS
   /* Package variable which stores the last timing made */
   last_timing NUMBER := NULL;

   PROCEDURE capture (context_in IN VARCHAR2 := NULL)
   /* Save current time and context to package variables. */
   IS
   BEGIN
      last_timing := DBMS_UTILITY.GET_TIME;
   END;

   FUNCTION elapsed RETURN NUMBER IS
   BEGIN
      IF last_timing IS NULL
      THEN
         RETURN NULL;
      ELSE
         RETURN DBMS_UTILITY.GET_TIME - last_timing;
      END IF;
   END;

END sp_timer;</PRE
></BLOCKQUOTE
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="SQL2-CH-16-SECT-5.5"
>16.5.5 Providing an Interface to Global Data</A
></H3
><P
CLASS="para"
>You will often want to build a programmatic interface around your global data, due to the following drawbacks of global data: </P
><UL
CLASS="itemizedlist"
><LI
CLASS="listitem"
><P
CLASS="para"
><EM
CLASS="emphasis"
>Loss of control.</EM
> When you declare a data structure in the package specification, that variable (or PL/SQL table or whatever) becomes fair game for any program that wants to change it (unless it is declared as a CONSTANT). If a program can make changes without any controls, then you lose the ability to apply rules to the way the data is used. It is impossible to provide an object orientation to your application if this happens. </P
></LI
><LI
CLASS="listitem"
><P
CLASS="para"
><EM
CLASS="emphasis"
>Maintenance headaches.</EM
> When you allow programmers to make direct references to package data structures, you are limiting your ability to change those data structures over time. Suppose that last year I implemented an in-memory profit-and-loss statement as a string variable filled with numbers padded to a length of ten. Suppose too that the total profit entry in the statement is the fourteenth number in the string. If I declared this string in my package specification, programmers who needed access to the statement would write a line of code like this: </P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>total_profit_loc := 14;
total_profit := SUBSTR (pl.stmt, (total_profit_loc-1)*10 + 1, 10);</PRE
></BLOCKQUOTE
><P
CLASS="para"
>Then along comes PL/SQL Release 2.3 and I can use PL/SQL tables of records to store my many P &amp; L statements. Suddenly my hands are tied. If I change the underlying data structure of my P &amp; L statement, every single program that directly accessed the filled string will have to be changed. </P
></LI
></UL
><P
CLASS="para"
>You can regain control of your package data and also ease your maintenance and enhancement frustrations by building a programmatic interface around your data. This interface is also referred to as "get and set programs" and "access routines," because they usually get and set the values of data and control access to those data structures. </P
><P
CLASS="para"
>In the preceding code, if I had instead declared the stmt string in the body of my pl package, I could have provided functions to retrieve the different elements of the statement as follows: </P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>total_profit := pl.retrieve ('total_profit');</PRE
></BLOCKQUOTE
><P
CLASS="para"
>I would then be free to change the underlying data structure from filled string to PL/SQL table. As long as the interface to the pl.retrieve function did not change, none of the programs that relied on the old data would have to change. My programmatic interface would have protected both my data structure and all the programs that relied on it. </P
><P
CLASS="para"
>Consider the simple sp_timer package (the body of which was reviewed in the last section). The whole point of this package is to keep track of the elapsed time, down to the 100th of a second. It calculates the elapsed time by storing the starting point in a private global variable, last_timing. If a programmer could have direct access to this variable, he could change its value and disrupt the elapsed time calculation. So instead of defining last_timing in the specification, I place it in the body and instead provide two modules in the specification as follows: </P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>PACKAGE sp_timer
IS
   PROCEDURE capture (context_in IN VARCHAR2 := NULL);

   FUNCTION elapsed RETURN NUMBER;

END sp_timer;</PRE
></BLOCKQUOTE
><P
CLASS="para"
>The only way a developer can change last_timing is through the capture procedure. The only way a developer can retrieve the elapsed time is through the elapsed function. My data structure is <A
CLASS="indexterm"
NAME="AUTOID-14863"
></A
> protected.<A
CLASS="indexterm"
NAME="AUTOID-14864"
></A
> <A
CLASS="indexterm"
NAME="AUTOID-14865"
></A
> </P
></DIV
></DIV
><DIV
CLASS="htmlnav"
><P
></P
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch16_04.htm#SQL2-CH-16-SECT-4.2"
TITLE="16.4 The Package Body"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 16.4 The Package Body"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="book"
HREF="index.htm"
TITLE="Oracle PL/SQL Programming, 2nd Edition"
><IMG
SRC="../gifs/txthome.gif"
ALT="Oracle PL/SQL Programming, 2nd Edition"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch16_06.htm"
TITLE="16.6 Package Initialization"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 16.6 Package Initialization"
BORDER="0"></A
></TD
></TR
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
>16.4 The Package Body</TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="index"
HREF="index/idx_0.htm"
TITLE="Book Index"
><IMG
SRC="../gifs/index.gif"
ALT="Book Index"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
>16.6 Package Initialization</TD
></TR
></TABLE
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"></DIV
><IMG SRC="../gifs/smnavbar.gif"
USEMAP="#map"
BORDER="0"
ALT="The Oracle Library Navigation">

<P><font size="-1">
<a href="../copyrght.htm#copy">Copyright (c) 2000</a> O'Reilly &amp; Associates. All rights reserved.
</font></P>

<MAP NAME="map">

<AREA SHAPE="RECT"
COORDS="0,0,35,30"
HREF="../index.htm"
ALT="Library Home">

<AREA SHAPE="RECT"
COORDS="40,0,95,30"
HREF="index.htm"
ALT="Oracle PL/SQL Programming, 2nd. Ed.">

<AREA SHAPE="RECT"
COORDS="100,0,200,30"
HREF="../guide8i/index.htm"
ALT="Guide to Oracle 8i Features">

<AREA SHAPE="RECT"
COORDS="205,0,245,30"
HREF="../bipack/index.htm"
ALT="Oracle Built-in Packages">

<AREA SHAPE="RECT"
COORDS="250,0,320,30"
HREF="../advprog/index.htm"
ALT="Advanced PL/SQL Programming with Packages">

<AREA SHAPE="RECT"
COORDS="325,0,420,30"
HREF="../webapp/index.htm"
ALT="Oracle Web Applications">

<AREA SHAPE="RECT"
COORDS="425,0,490,30"
HREF="../langpkt/index.htm"
ALT="Oracle PL/SQL Language Pocket Reference">

<AREA SHAPE="RECT"
COORDS="495,0,570,30"
HREF="../bipkt/index.htm"
ALT="Oracle PL/SQL Built-ins Pocket Reference">
</MAP>

</BODY
>
<!-- Mirrored from liso.cs.pusan.ac.kr by HTTrack Website Copier/3.x [XR&CO'2001] -->
</HTML
>
