<HTML
><HEAD
><TITLE
>[Chapter 8] 8.5 Raising an Exception</TITLE
><META
NAME="DC.Creator"
CONTENT="Steven Feuerstein &amp; Bill Pribyl"><META
NAME="DC.Date"
CONTENT="2000-04-29T18:58:11Z"><META
NAME="DC.Format"
CONTENT="text/html"
SCHEME="MIME"><META
NAME="DC.Identifier"
CONTENT="O'Reilly and Associates CD-ROM-1-56592-335-9E"><META
NAME="DC.Language"
CONTENT="en-US"><META
NAME="DC.Publisher"
CONTENT="O'Reilly &amp; Associates, Inc."><META
NAME="DC.Source"
CONTENT="1-56592-335-9E"
SCHEME="ISBN"><META
NAME="DC.Subject.Keyword"
CONTENT="Oracle PL/SQL"><META
NAME="DC.Title"
CONTENT="Oracle PL/SQL Programming, 2nd Edition"><META
NAME="DC.Type"
CONTENT="Text.Monograph"><META
NAME="generator"
CONTENT="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><LINK
REL="stylesheet"
TYPE="text/css"
HREF="../style/style1.css"><LINK
REV="made"
HREF="mailto:online-books@oreilly.com"
TITLE="Online Books Comments"><LINK
REL="up"
HREF="ch08_01.htm"
TITLE="8. Exception Handlers"><LINK
REL="prev"
HREF="ch08_04.htm#SQL2-CH-8-SECT-4.1.3"
TITLE="8.4 Determining Exception-Handling Behavior"><LINK
REL="next"
HREF="ch08_06.htm"
TITLE="8.6 Handling Exceptions"></HEAD
><BODY
><DIV
CLASS="htmlnav"
><H1
><IMG
SRC="gifs/smbanner.gif"
ALT="Oracle PL/SQL Programming, 2nd Edition"
USEMAP="#srchmap"
BORDER="0"></H1
><MAP
NAME="srchmap"
><AREA
SHAPE="RECT"
COORDS="0,0,466,65"
HREF="index.htm"
ALT="Oracle PL/SQL Programming, 2nd Edition"><AREA
SHAPE="RECT"
COORDS="467,0,514,18"
HREF="jobjects/fsearch.htm"
ALT="Search this book"></MAP
><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch08_04.htm#SQL2-CH-8-SECT-4.1.3"
TITLE="8.4 Determining Exception-Handling Behavior"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 8.4 Determining Exception-Handling Behavior"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><SPAN
CLASS="NAVTITLE"
><A
CLASS="chapter"
REL="up"
HREF="ch08_01.htm"
TITLE="8. Exception Handlers"
>Chapter 8<BR>Exception Handlers</A
></SPAN
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch08_06.htm"
TITLE="8.6 Handling Exceptions"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 8.6 Handling Exceptions"
BORDER="0"></A
></TD
></TR
></TABLE
>&nbsp;<HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"></DIV
><DIV
CLASS="sect1"
><H2
CLASS="sect1"
><A
CLASS="title"
NAME="SQL2-CH-8-SECT-5"
>8.5 Raising an Exception</A
></H2
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="ch08-idx-963062-1"
></A
> <A
CLASS="indexterm"
NAME="ch08-idx-963062-2"
></A
>There are four ways that you or the PL/SQL runtime engine can raise an exception: </P
><UL
CLASS="itemizedlist"
><LI
CLASS="listitem"
><P
CLASS="para"
><EM
CLASS="emphasis"
>The PL/SQL runtime engine raised a named system exception.</EM
> These exceptions are raised automatically by the program. You cannot control when PL/SQL will raise a system exception. You can, however, write code to handle those exceptions when they are raised. </P
></LI
><LI
CLASS="listitem"
><P
CLASS="para"
><EM
CLASS="emphasis"
>The programmer raises a named exception.</EM
> The programmer can use an explicit call to the RAISE statement to raise a programmer-defined or system-named exception. </P
></LI
><LI
CLASS="listitem"
><P
CLASS="para"
><EM
CLASS="emphasis"
>The programmer raises an unnamed, programmer-defined exception.</EM
> These are raised with an explicit call to the RAISE_APPLICATION_ERROR procedure in the DBMS_STANDARD package. </P
></LI
><LI
CLASS="listitem"
><P
CLASS="para"
><EM
CLASS="emphasis"
>The programmer re-raises the "current" exception.</EM
> From within an exception handler, you can re-raise the same exception for propagation to the enclosing block. </P
></LI
></UL
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="SQL2-CH-8-SECT-5.1"
>8.5.1 Who Raises the Exception?</A
></H3
><P
CLASS="para"
>The following sections show how you can let PL/SQL raise a system error or you can check for the error yourself and then raise that same system error. </P
><DIV
CLASS="sect3"
><H4
CLASS="sect3"
><A
CLASS="title"
NAME="SQL2-CH-8-SECT-5.1.1"
>8.5.1.1 PL/SQL raises ZERO_DIVIDE exception</A
></H4
><P
CLASS="para"
>In the following example, I raise my own exception, sales_domination, when the percentage of a customer's sales is over 50% of total sales. If, on the other hand, the total_sales is zero (as will be the case in the senseless code below), PL/SQL will automatically raise the ZERO_DIVIDE exception. Because I include a handler for that specific problem, the application does not abort when this code is executed. Instead, a message is displayed informing the user of a serious problem: </P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>DECLARE
   total_sales NUMBER := 0;
   cust_sales NUMBER;
   sales_domination EXCEPTION;
BEGIN
   SELECT SUM (sales) INTO cust_sales
     FROM invoice WHERE customer_id = 1001;
   IF cust_sales / total_sales &gt; .5
   THEN
      <B
CLASS="emphasis.bold"
>RAISE sales_domination;</B
>
   END IF;
EXCEPTION
   WHEN ZERO_DIVIDE
   THEN
      DBMS_OUTPUT.PUT_LINE
         (' We haven''t sold anything. We are bankrupt!');

   WHEN sales_domination
   THEN
      DBMS_OUTPUT.PUT_LINE
         (' Customer 1001 accounts for more than half of all sales!');
END;</PRE
></BLOCKQUOTE
><P
CLASS="para"
>Notice that there is no RAISE statement for the ZERO_DIVIDE exception in the body of the program. Instead, I leave it to PL/SQL to raise such internally generated exceptions. There is no restriction, however, on a programmer's raising a predefined exception. </P
></DIV
><DIV
CLASS="sect3"
><H4
CLASS="sect3"
><A
CLASS="title"
NAME="SQL2-CH-8-SECT-5.1.2"
>8.5.1.2 Programmer raises ZERO_DIVIDE exception</A
></H4
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="AUTOID-7700"
></A
>I could recode the previous anonymous block as follows: </P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>DECLARE
   total_sales NUMBER := 0;
   cust_sales NUMBER;
   sales_domination EXCEPTION;
BEGIN
   SELECT SUM (sales) INTO cust_sales
     FROM invoice WHERE customer_id = 1001;

   /* Check for zero divisor and raise exception if necessary */
   IF total_sales = 0
   THEN
      <B
CLASS="emphasis.bold"
>RAISE ZERO_DIVIDE;</B
>
   ELSIF cust_sales / total_sales &gt; .5
   THEN
      <B
CLASS="emphasis.bold"
>RAISE sales_domination;</B
>
   END IF;
EXCEPTION
   ... unchanged ...
END;</PRE
></BLOCKQUOTE
><P
CLASS="para"
>Here, my own code raises the ZERO_DIVIDE exception because as author of the program I know that a total_sales of zero will result in a division by zero. With either approach, the result is the same. Regardless of how the ZERO_DIVIDE exception is raised, the same exception handler will trap the error. </P
></DIV
><DIV
CLASS="sect3"
><H4
CLASS="sect3"
><A
CLASS="title"
NAME="SQL2-CH-8-SECT-5.1.3"
>8.5.1.3 Impact of unhandled exceptions</A
></H4
><P
CLASS="para"
>If an exception is raised in a PL/SQL block and goes unhandled, there are several consequences to consider. First, if the program contains OUT or IN OUT parameters, then the PL/SQL runtime engine does not assign values to those parameters. Any changes to those parameters made during the program execution are, in essence, rolled back. Second, the runtime engine does <EM
CLASS="emphasis"
>not</EM
> roll back any database work performed by that PL/SQL block. Instead, you must issue an explicit ROLLBACK statement to achieve this effect. </P
></DIV
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="SQL2-CH-8-SECT-5.2"
>8.5.2 Re-Raising an Exception</A
></H3
><P
CLASS="para"
>When you are inside an exception handler in an exception section, you can re-raise the exception that "got you there" by issuing an unqualified RAISE statement as follows: </P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>RAISE;</PRE
></BLOCKQUOTE
><P
CLASS="para"
>Since you do not specify an exception, the PL/SQL runtime engine re-raises the current exception (whose error number would be returned by a call to the SQLCODE function). </P
><P
CLASS="para"
> Here is an example of using raise in this way:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>EXCEPTION
   WHEN OTHERS
   THEN
      send_error_to_pipe (SQLCODE);
      RAISE;
END;</PRE
></BLOCKQUOTE
><P
CLASS="para"
>This re-raise functionality comes in very handy when you need to raise exceptions which have not been assigned a name through use of the EXCEPTION_INIT pragma. </P
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="SQL2-CH-8-SECT-5.3"
>8.5.3 Exceptions Raised in a Declaration</A
></H3
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="AUTOID-7721"
></A
>When an exception is raised in the declaration section of a block, control is passed immediately to the enclosing block, if there is one, not to the exception section of the current block, as shown in <A
CLASS="xref"
HREF="ch08_05.htm#SQL2-CH-8-SECT-5.1.2"
>Figure 8.6</A
>. </P
><P
CLASS="para"
>The assignment of the default value to little_string is too big for the variable. This causes PL/SQL to raise the VALUE_ERROR exception. This exception will not, however, be handled by the VALUE_ERROR handler in the anonymous block's exception section. Instead, PL/SQL will terminate the anonymous block and try to handle the exception in early_failure's exception section. </P
><H4
CLASS="figure"
><A
CLASS="title"
NAME="SQL2-CH-8-FIG-7"
>Figure 8.6: VALUE_ERROR raised in nested block declaration section</A
></H4
><IMG
CLASS="graphic"
SRC="figs/sql2.0806.gif"
ALT="Figure 8.6"><P
CLASS="para"
>The reason for this behavior is simple, as we describe in the next section. </P
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="SQL2-CH-8-SECT-5.4"
>8.5.4 Exceptions Raised in an Exception Handler</A
></H3
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="AUTOID-7733"
></A
>You can raise another exception from within an exception handler, but that exception can be handled only in the exception section of an enclosing block&nbsp;-- never in the current block. The exception section of the current PL/SQL block will only handle exceptions raised in the execution section of that block. </P
><P
CLASS="para"
>When an exception is raised, the execution in the current block is immediately terminated, and control is passed in to the exception section, as shown in <A
CLASS="xref"
HREF="ch08_05.htm#SQL2-CH-8-SECT-5.1.2"
>Figure 8.7</A
>. Once a match for the exception has been found, the rest of the exception section is inaccessible. At this point it is impossible to re-enter this same exception section because the corresponding execution section has been exited. </P
><H4
CLASS="figure"
><A
CLASS="title"
NAME="SQL2-CH-8-FIG-8"
>Figure 8.7: Exception raised in exception handler immediately exits the exception section</A
></H4
><IMG
CLASS="graphic"
SRC="figs/sql2.0807.gif"
ALT="Figure 8.7"><P
CLASS="para"
>Why would you want to raise an exception <EM
CLASS="emphasis"
>inside</EM
> an exception handler? You will find it useful to raise new exceptions from the current exception section when you do not want the enclosing block to continue normal processing after an exception in the subblock. You may instead want execution to branch off in a different direction, or to skip the rest of the enclosing block and move immediately to the enclosing block of that enclosing block. </P
><P
CLASS="para"
>In the following example, I have a triple nesting of anonymous blocks. When the innermost block raises an exception, I want to terminate both the second and third blocks, but continue normal processing in the outermost block. Raising an exception from within an exception block produces this behavior for me: </P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>DECLARE -- Outermost block
BEGIN

   DECLARE -- First sub-block.
      -- An exception whose scope is the two sub-blocks.
      skip_sub_block EXCEPTION;
   BEGIN
      ... executable statements for first sub-block ...

      BEGIN -- Second sub-block.
         ... executable statements for innermost block ...
      EXCEPTION
         WHEN NO_DATA_FOUND -- A table fetch returned no values.
         THEN
            RAISE skip_sub_block; -- Raise exception in enclosing block.
      END;

   EXCEPTION
      WHEN skip_sub_block
      THEN
         NULL; -- Terminate this sub-block, return to main block.
   END;

   -- Now continue with main block processing.
   ... executable statements ...

END;<A
CLASS="indexterm"
NAME="AUTOID-7745"
></A
>
<A
CLASS="indexterm"
NAME="AUTOID-7746"
></A
>
 </PRE
></BLOCKQUOTE
></DIV
></DIV
><DIV
CLASS="htmlnav"
><P
></P
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch08_04.htm#SQL2-CH-8-SECT-4.1.3"
TITLE="8.4 Determining Exception-Handling Behavior"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 8.4 Determining Exception-Handling Behavior"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="book"
HREF="index.htm"
TITLE="Oracle PL/SQL Programming, 2nd Edition"
><IMG
SRC="../gifs/txthome.gif"
ALT="Oracle PL/SQL Programming, 2nd Edition"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch08_06.htm"
TITLE="8.6 Handling Exceptions"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 8.6 Handling Exceptions"
BORDER="0"></A
></TD
></TR
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
>8.4 Determining Exception-Handling Behavior</TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="index"
HREF="index/idx_0.htm"
TITLE="Book Index"
><IMG
SRC="../gifs/index.gif"
ALT="Book Index"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
>8.6 Handling Exceptions</TD
></TR
></TABLE
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"></DIV
><IMG SRC="../gifs/smnavbar.gif"
USEMAP="#map"
BORDER="0"
ALT="The Oracle Library Navigation">

<P><font size="-1">
<a href="../copyrght.htm#copy">Copyright (c) 2000</a> O'Reilly &amp; Associates. All rights reserved.
</font></P>

<MAP NAME="map">

<AREA SHAPE="RECT"
COORDS="0,0,35,30"
HREF="../index.htm"
ALT="Library Home">

<AREA SHAPE="RECT"
COORDS="40,0,95,30"
HREF="index.htm"
ALT="Oracle PL/SQL Programming, 2nd. Ed.">

<AREA SHAPE="RECT"
COORDS="100,0,200,30"
HREF="../guide8i/index.htm"
ALT="Guide to Oracle 8i Features">

<AREA SHAPE="RECT"
COORDS="205,0,245,30"
HREF="../bipack/index.htm"
ALT="Oracle Built-in Packages">

<AREA SHAPE="RECT"
COORDS="250,0,320,30"
HREF="../advprog/index.htm"
ALT="Advanced PL/SQL Programming with Packages">

<AREA SHAPE="RECT"
COORDS="325,0,420,30"
HREF="../webapp/index.htm"
ALT="Oracle Web Applications">

<AREA SHAPE="RECT"
COORDS="425,0,490,30"
HREF="../langpkt/index.htm"
ALT="Oracle PL/SQL Language Pocket Reference">

<AREA SHAPE="RECT"
COORDS="495,0,570,30"
HREF="../bipkt/index.htm"
ALT="Oracle PL/SQL Built-ins Pocket Reference">
</MAP>

</BODY
>
<!-- Mirrored from liso.cs.pusan.ac.kr by HTTrack Website Copier/3.x [XR&CO'2001] -->
</HTML
>
