<HTML
><HEAD
><TITLE
>[Chapter 7] 7.2 The Simple Loop</TITLE
><META
NAME="DC.Creator"
CONTENT="Steven Feuerstein &amp; Bill Pribyl"><META
NAME="DC.Date"
CONTENT="2000-04-29T18:57:33Z"><META
NAME="DC.Format"
CONTENT="text/html"
SCHEME="MIME"><META
NAME="DC.Identifier"
CONTENT="O'Reilly and Associates CD-ROM-1-56592-335-9E"><META
NAME="DC.Language"
CONTENT="en-US"><META
NAME="DC.Publisher"
CONTENT="O'Reilly &amp; Associates, Inc."><META
NAME="DC.Source"
CONTENT="1-56592-335-9E"
SCHEME="ISBN"><META
NAME="DC.Subject.Keyword"
CONTENT="Oracle PL/SQL"><META
NAME="DC.Title"
CONTENT="Oracle PL/SQL Programming, 2nd Edition"><META
NAME="DC.Type"
CONTENT="Text.Monograph"><META
NAME="generator"
CONTENT="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><LINK
REL="stylesheet"
TYPE="text/css"
HREF="../style/style1.css"><LINK
REV="made"
HREF="mailto:online-books@oreilly.com"
TITLE="Online Books Comments"><LINK
REL="up"
HREF="ch07_01.htm"
TITLE="7. Loops"><LINK
REL="prev"
HREF="ch07_01.htm"
TITLE="7.1 Loop Basics"><LINK
REL="next"
HREF="ch07_03.htm"
TITLE="7.3 The Numeric FOR Loop"></HEAD
><BODY
><DIV
CLASS="htmlnav"
><H1
><IMG
SRC="gifs/smbanner.gif"
ALT="Oracle PL/SQL Programming, 2nd Edition"
USEMAP="#srchmap"
BORDER="0"></H1
><MAP
NAME="srchmap"
><AREA
SHAPE="RECT"
COORDS="0,0,466,65"
HREF="index.htm"
ALT="Oracle PL/SQL Programming, 2nd Edition"><AREA
SHAPE="RECT"
COORDS="467,0,514,18"
HREF="jobjects/fsearch.htm"
ALT="Search this book"></MAP
><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch07_01.htm"
TITLE="7.1 Loop Basics"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 7.1 Loop Basics"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><SPAN
CLASS="NAVTITLE"
><A
CLASS="chapter"
REL="up"
HREF="ch07_01.htm"
TITLE="7. Loops"
>Chapter 7<BR>Loops</A
></SPAN
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch07_03.htm"
TITLE="7.3 The Numeric FOR Loop"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 7.3 The Numeric FOR Loop"
BORDER="0"></A
></TD
></TR
></TABLE
>&nbsp;<HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"></DIV
><DIV
CLASS="sect1"
><H2
CLASS="sect1"
><A
CLASS="title"
NAME="SQL2-CH-7-SECT-2"
>7.2 The Simple Loop</A
></H2
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="ch07-idx-151590-1"
></A
> <A
CLASS="indexterm"
NAME="ch07-idx-151590-2"
></A
> <A
CLASS="indexterm"
NAME="ch07-idx-151590-3"
></A
><A
CLASS="indexterm"
NAME="ch07-idx-151590-4"
></A
>The structure of the simple loop is the most basic of all the loop constructs. It consists of the LOOP keyword, the body of executable code, and the END LOOP keywords, as shown here: </P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>LOOP
   &lt;executable statement(s)&gt;
END LOOP; </PRE
></BLOCKQUOTE
><P
CLASS="para"
>The loop boundary consists solely of the LOOP and END LOOP reserved words. The body must consist of at least one executable statement. The following table summarizes the properties of the single loop: </P
><TABLE
CLASS="informaltable"
BORDER="1"
CELLPADDING="3"
><THEAD
CLASS="thead"
><TR
CLASS="row"
VALIGN="TOP"
><TH
CLASS="entry"
ALIGN="LEFT"
ROWSPAN="1"
COLSPAN="1"
> <P
CLASS="para"
>Property</P
> </TH
><TH
CLASS="entry"
ALIGN="LEFT"
ROWSPAN="1"
COLSPAN="1"
> <P
CLASS="para"
>Description</P
> </TH
></TR
></THEAD
><TBODY
CLASS="tbody"
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
> <P
CLASS="para"
>How the loop is terminated</P
> </TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
> <P
CLASS="para"
>The simple loop is terminated when an EXIT statement is executed in the body of the loop. If this statement is not executed, the simple loop becomes a true infinite loop. </P
> </TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
> <P
CLASS="para"
>When the test for termination takes place</P
> </TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
> <P
CLASS="para"
>The test takes place inside the body of the loop&nbsp;-- and then only if an EXIT or EXIT WHEN statement is executed. Therefore, the body&nbsp;-- or part of the body&nbsp;-- of the simple loop will always execute at least once. </P
> </TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
> <P
CLASS="para"
>Reason to use this loop</P
> </TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
> <P
CLASS="para"
>Use the simple loop when: </P
> <UL
CLASS="itemizedlist"
><LI
CLASS="listitem"
><P
CLASS="para"
>You are not sure how many times you will want the loop to execute, and </P
></LI
><LI
CLASS="listitem"
><P
CLASS="para"
>You want the loop to run at least once.</P
></LI
></UL
> </TD
></TR
></TBODY
></TABLE
><P
CLASS="para"
>This loop is useful when you want to guarantee that the body (or at least part of the body) executes at least one time. Because there is no condition associated with the loop boundary that determines whether or not it should execute, the body of the loop will always execute the first time. </P
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="AUTOID-6569"
></A
>The simple loop will terminate only when an EXIT statement is executed in its body (see "Terminating a Single Loop: EXIT and EXIT WHEN" below). Because this doesn't have to be the case, a simple loop can also become an infinite loop. This could cause difficulties in your program and is something to be avoided. </P
><P
CLASS="para"
>The following example shows a simple loop which is truly infinite; it keeps checking for messages from a particular pipe so that it can respond immediately and display the information in the pipe. (This is the central concept behind a DBMS_PIPE-based debugger for PL/SQL code&nbsp;-- a prototype of which may be found in the <I
CLASS="filename"
>dbg.doc</I
> file on the companion disk. See <A
CLASS="xref"
HREF="appa_01.htm"
>Appendix A, <CITE
CLASS="appendix"
>What's on the Companion Disk?</CITE
></A
>, for details.) </P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>DECLARE
   pipe_status INTEGER;
   message_text VARCHAR2
BEGIN
   LOOP
      pipe_status := DBMS_PIPE.RECEIVE_MESSAGE ('execution_trace');
      IF pipe_status = 0
      THEN
         DBMS_PIPE.UNPACK_MESSAGE (message_text);
         DBMS_OUTPUT.PUT_LINE (message_text);
      END IF;
   END LOOP;
END;</PRE
></BLOCKQUOTE
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="SQL2-CH-7-SECT-2.1"
>7.2.1 Terminating a Simple Loop: EXIT and EXIT WHEN</A
></H3
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="AUTOID-6578"
></A
> <A
CLASS="indexterm"
NAME="AUTOID-6580"
></A
><A
CLASS="indexterm"
NAME="AUTOID-6583"
></A
> <A
CLASS="indexterm"
NAME="AUTOID-6586"
></A
>Be very careful when you use simple loops. Make sure they always have a way to stop. To force a simple loop to stop processing, execute an EXIT or EXIT WHEN statement within the body of the loop. The syntax for these statements is as follows: </P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>EXIT:
EXIT WHEN condition;</PRE
></BLOCKQUOTE
><P
CLASS="para"
>where condition is a Boolean expression.</P
><P
CLASS="para"
>The following example demonstrates how the EXIT forces the loop to immediately halt execution and pass control to the next statement after the END LOOP statement. The account_balance procedure returns the amount of money remaining in the account specified by the account ID. If there is less than $1000 left, the EXIT statement is executed and the loop is terminated. Otherwise, the program applies the balance to the outstanding orders for that account. </P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>LOOP
   balance_remaining := account_balance (account_id);
   IF balance_remaining &lt; 1000
   THEN
      EXIT;
   ELSE
      apply_balance (account_id, balance_remaining);
   END IF;
END LOOP; </PRE
></BLOCKQUOTE
><P
CLASS="para"
>You can use an EXIT statement only within a LOOP. </P
><P
CLASS="para"
>PL/SQL also offers the EXIT WHEN statement, which supports the concept of "conditional termination" of the loop. Essentially, the EXIT WHEN combines an IF-THEN statement with the EXIT statement. Using the same example I showed above, the EXIT WHEN changes the loop to: </P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>LOOP
   /* Calculate the balance */
   balance_remaining := account_balance (account_id);

   /* Embed the IF logic into the EXIT statement */
   EXIT WHEN balance_remaining &lt; 1000;

   /* Apply balance if still executing the loop */
   apply_balance (account_id, balance_remaining);
END LOOP; </PRE
></BLOCKQUOTE
><P
CLASS="para"
>Notice that the loop no longer requires an IF statement to determine when it should exit. Instead, that conditional logic is embedded inside the EXIT WHEN statement. </P
><P
CLASS="para"
>EXIT WHEN is a very concise and readable way to terminate a simple loop; I recommend its use over the unconditional EXIT statement. After all, you should always have an EXIT statement nested within an IF-THEN. If you don't, then you either have an infinite loop or you have a loop that executes just once. In the latter case, it is better to execute the body of the loop without using a loop. If the EXIT is always included within the IF-THEN, you'd be better off using a language construct built specifically for the purpose. The EXIT WHEN construct also reduces the amount of code you need to write. </P
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="SQL2-CH-7-SECT-2.2"
>7.2.2 Emulating a REPEAT UNTIL Loop</A
></H3
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="AUTOID-6602"
></A
> <A
CLASS="indexterm"
NAME="AUTOID-6604"
></A
>PL/SQL does not provide a REPEAT UNTIL loop in which the condition is tested after the body of the loop is executed and thus guarantees that the loop always executes at least once. You can, however, emulate a REPEAT UNTIL with a simple loop, as follows: </P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>LOOP
   ... body of loop ...
   EXIT WHEN boolean_condition;
END LOOP;</PRE
></BLOCKQUOTE
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="AUTOID-6609"
></A
><A
CLASS="indexterm"
NAME="AUTOID-6612"
></A
> <A
CLASS="indexterm"
NAME="AUTOID-6613"
></A
> where boolean_condition is a Boolean variable or an expression that evaluates to a Boolean value of TRUE or FALSE. </P
></DIV
></DIV
><DIV
CLASS="htmlnav"
><P
></P
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch07_01.htm"
TITLE="7.1 Loop Basics"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 7.1 Loop Basics"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="book"
HREF="index.htm"
TITLE="Oracle PL/SQL Programming, 2nd Edition"
><IMG
SRC="../gifs/txthome.gif"
ALT="Oracle PL/SQL Programming, 2nd Edition"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch07_03.htm"
TITLE="7.3 The Numeric FOR Loop"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 7.3 The Numeric FOR Loop"
BORDER="0"></A
></TD
></TR
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
>7.1 Loop Basics</TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="index"
HREF="index/idx_0.htm"
TITLE="Book Index"
><IMG
SRC="../gifs/index.gif"
ALT="Book Index"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
>7.3 The Numeric FOR Loop</TD
></TR
></TABLE
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"></DIV
><IMG SRC="../gifs/smnavbar.gif"
USEMAP="#map"
BORDER="0"
ALT="The Oracle Library Navigation">

<P><font size="-1">
<a href="../copyrght.htm#copy">Copyright (c) 2000</a> O'Reilly &amp; Associates. All rights reserved.
</font></P>

<MAP NAME="map">

<AREA SHAPE="RECT"
COORDS="0,0,35,30"
HREF="../index.htm"
ALT="Library Home">

<AREA SHAPE="RECT"
COORDS="40,0,95,30"
HREF="index.htm"
ALT="Oracle PL/SQL Programming, 2nd. Ed.">

<AREA SHAPE="RECT"
COORDS="100,0,200,30"
HREF="../guide8i/index.htm"
ALT="Guide to Oracle 8i Features">

<AREA SHAPE="RECT"
COORDS="205,0,245,30"
HREF="../bipack/index.htm"
ALT="Oracle Built-in Packages">

<AREA SHAPE="RECT"
COORDS="250,0,320,30"
HREF="../advprog/index.htm"
ALT="Advanced PL/SQL Programming with Packages">

<AREA SHAPE="RECT"
COORDS="325,0,420,30"
HREF="../webapp/index.htm"
ALT="Oracle Web Applications">

<AREA SHAPE="RECT"
COORDS="425,0,490,30"
HREF="../langpkt/index.htm"
ALT="Oracle PL/SQL Language Pocket Reference">

<AREA SHAPE="RECT"
COORDS="495,0,570,30"
HREF="../bipkt/index.htm"
ALT="Oracle PL/SQL Built-ins Pocket Reference">
</MAP>

</BODY
>
<!-- Mirrored from liso.cs.pusan.ac.kr by HTTrack Website Copier/3.x [XR&CO'2001] -->
</HTML
>
