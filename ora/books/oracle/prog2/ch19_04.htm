<HTML
><HEAD
><TITLE
>[Chapter 19] 19.4 Using Collections</TITLE
><META
NAME="DC.Creator"
CONTENT="Steven Feuerstein &amp; Bill Pribyl"><META
NAME="DC.Date"
CONTENT="2000-04-29T19:08:24Z"><META
NAME="DC.Format"
CONTENT="text/html"
SCHEME="MIME"><META
NAME="DC.Identifier"
CONTENT="O'Reilly and Associates CD-ROM-1-56592-335-9E"><META
NAME="DC.Language"
CONTENT="en-US"><META
NAME="DC.Publisher"
CONTENT="O'Reilly &amp; Associates, Inc."><META
NAME="DC.Source"
CONTENT="1-56592-335-9E"
SCHEME="ISBN"><META
NAME="DC.Subject.Keyword"
CONTENT="Oracle PL/SQL"><META
NAME="DC.Title"
CONTENT="Oracle PL/SQL Programming, 2nd Edition"><META
NAME="DC.Type"
CONTENT="Text.Monograph"><META
NAME="generator"
CONTENT="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><LINK
REL="stylesheet"
TYPE="text/css"
HREF="../style/style1.css"><LINK
REV="made"
HREF="mailto:online-books@oreilly.com"
TITLE="Online Books Comments"><LINK
REL="up"
HREF="ch19_01.htm"
TITLE="19. Nested Tables and VARRAYs"><LINK
REL="prev"
HREF="ch19_03.htm"
TITLE="19.3 Syntax for Declaring Collection Datatypes"><LINK
REL="next"
HREF="ch19_05.htm#SQL2-CH-19-SECT-5.2"
TITLE="19.5 Collection Pseudo-Functions"></HEAD
><BODY
><DIV
CLASS="htmlnav"
><H1
><IMG
SRC="gifs/smbanner.gif"
ALT="Oracle PL/SQL Programming, 2nd Edition"
USEMAP="#srchmap"
BORDER="0"></H1
><MAP
NAME="srchmap"
><AREA
SHAPE="RECT"
COORDS="0,0,466,65"
HREF="index.htm"
ALT="Oracle PL/SQL Programming, 2nd Edition"><AREA
SHAPE="RECT"
COORDS="467,0,514,18"
HREF="jobjects/fsearch.htm"
ALT="Search this book"></MAP
><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch19_03.htm"
TITLE="19.3 Syntax for Declaring Collection Datatypes"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 19.3 Syntax for Declaring Collection Datatypes"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><SPAN
CLASS="NAVTITLE"
><A
CLASS="chapter"
REL="up"
HREF="ch19_01.htm"
TITLE="19. Nested Tables and VARRAYs"
>Chapter 19<BR>Nested Tables and VARRAYs</A
></SPAN
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch19_05.htm#SQL2-CH-19-SECT-5.2"
TITLE="19.5 Collection Pseudo-Functions"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 19.5 Collection Pseudo-Functions"
BORDER="0"></A
></TD
></TR
></TABLE
>&nbsp;<HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"></DIV
><DIV
CLASS="sect1"
><H2
CLASS="sect1"
><A
CLASS="title"
NAME="SQL2-CH-19-SECT-4"
>19.4 Using Collections</A
></H2
><P
CLASS="para"
>There are three main programming tasks you must understand when you are working with collections in PL/SQL: </P
><UL
CLASS="itemizedlist"
><LI
CLASS="listitem"
><P
CLASS="para"
>How to properly initialize the collection variable</P
></LI
><LI
CLASS="listitem"
><P
CLASS="para"
>How to assign values to elements without raising exceptions</P
></LI
><LI
CLASS="listitem"
><P
CLASS="para"
>How to add and remove "slots" for elements</P
></LI
></UL
><P
CLASS="para"
>In addition, to fully exploit the programming utility of collections, you will want to learn how to retrieve and store sets of data with them. This leads into our section on pseudo-functions, which allow you to perform magic tricks with collections. (Okay, maybe it's not real magic, but you're almost guaranteed to say "How did they do that?" the first time you try to program this stuff and find yourself bewildered.) </P
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="SQL2-CH-19-SECT-4.1"
>19.4.1 Initializing Collection Variables</A
></H3
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="ch19-idx-8527-1"
></A
><A
CLASS="indexterm"
NAME="ch19-idx-8527-2"
></A
><A
CLASS="indexterm"
NAME="ch19-idx-8527-3"
></A
>With an <A
CLASS="indexterm"
NAME="ch19-idx-8535-1"
></A
> <A
CLASS="indexterm"
NAME="ch19-idx-8535-2"
></A
> <A
CLASS="indexterm"
NAME="ch19-idx-8535-3"
></A
> <A
CLASS="indexterm"
NAME="ch19-idx-8535-4"
></A
>index-by table datatype, initialization is a non-issue. Simply declaring an index-by table variable also initializes it, in an "empty" state. Then you can just assign values to subscripted table elements as you desire. Index values (subscripts) can be almost any positive or negative integer. A program can even assign subscripts to index-by tables arbitrarily, skipping huge ranges of subscripts without paying a memory or performance penalty.[<A
CLASS="footnote"
HREF="#AUTOID-17851"
>2</A
>] </P
><BLOCKQUOTE
CLASS="footnote"
><DIV
CLASS="footnote"
><P
CLASS="para"
><A
CLASS="footnote"
NAME="AUTOID-17851"
>[2]</A
> This sparseness makes it possible to use an index-by table as an in-memory representation of almost any database table which uses an integer primary key. (See <A
CLASS="xref"
HREF="ch10_01.htm"
>Chapter 10</A
> for a discussion of this eminently useful technique.)</P
></DIV
></BLOCKQUOTE
><P
CLASS="para"
>The allocation scheme for nested tables and VARRAYs is different from that of index-by tables. First off, if you don't initialize one of these collections, it will be "atomically null," and any attempt to read or write an element of an atomically null collection will generate a runtime error. For example: </P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>DECLARE
   /* The variable cool_colors is not initialized in its
   || declaration; it is &quot;atomically null.&quot;
   */
   cool_colors Color_tab_t;
BEGIN
   IF cool_colors IS NULL THEN         -- valid; will be TRUE
      ...
   IF cool_colors(1) IS NULL THEN      -- invalid
      ...
   cool_colors(1) := 'BLUE';           -- invalid</PRE
></BLOCKQUOTE
><P
CLASS="para"
>You must initialize the collection before using it. There are three ways you can initialize a collection: </P
><UL
CLASS="itemizedlist"
><LI
CLASS="listitem"
><P
CLASS="para"
>Explicitly, using a constructor</P
></LI
><LI
CLASS="listitem"
><P
CLASS="para"
>Implicitly, via a fetch from the database</P
></LI
><LI
CLASS="listitem"
><P
CLASS="para"
>Implicitly, via a direct assignment of another collection variable</P
></LI
></UL
><P
CLASS="para"
>There is no requirement that you initialize any particular number of elements in a collection. Zero, one, or more are fine, and you can always add more values later. In particular, don't be confused by VARRAYs. Just because you specify a limit on the number of elements it can hold does not imply that you have to put that many elements in when you initialize it. </P
><DIV
CLASS="sect3"
><H4
CLASS="sect3"
><A
CLASS="title"
NAME="SQL2-CH-19-SECT-4.1.1"
>19.4.1.1 Initializing with a constructor</A
></H4
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="AUTOID-17868"
></A
>Earlier, we saw declarations that looked like this: </P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>my_favorite_colors Color_tab_t := Color_tab_t('PURPLE', 'GREEN');
my_favorite_numbers Number_t := Number_t(42, 65536);</PRE
></BLOCKQUOTE
><P
CLASS="para"
>Color_tab_t( ) is the constructor function supplied by Oracle when we created the Color_tab_t collection type. This function accepts an arbitrary number of arguments, as long as each argument is of the "proper" datatype&nbsp;-- which in this case is VARCHAR2(30), since our original type definition statement was the following: </P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>CREATE TYPE Color_tab_t AS TABLE OF <B
CLASS="emphasis.bold"
>VARCHAR2(30)</B
>;</PRE
></BLOCKQUOTE
><P
CLASS="para"
>At initialization, Oracle allocates to the variable an amount of memory necessary to hold the values you supply as arguments. Initialization both creates the "slots" for the elements and populates them. </P
><P
CLASS="para"
>So, if I want to "fix" the earlier invalid example, I can simply initialize the variable: </P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>DECLARE
   cool_colors Color_tab_t := Color_tab_t('VIOLET');  -- initialize
BEGIN
   IF cool_colors(1) IS NULL THEN   -- This is OK now!</PRE
></BLOCKQUOTE
><P
CLASS="para"
>What do you suppose Oracle does with the following initialization?</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>   working_colors Color_tab_t := Color_tab_t();</PRE
></BLOCKQUOTE
><P
CLASS="para"
>This is a way of creating an "empty" collection. Empty is a sort of enigmatic state in which the collection is not atomically null but still has no data. Whenever you create such an empty collection, you'll need to "extend" the collection variable later when you want to put elements into it. (The EXTEND built-in is explored later in this chapter.) </P
></DIV
><DIV
CLASS="sect3"
><H4
CLASS="sect3"
><A
CLASS="title"
NAME="SQL2-CH-19-SECT-4.1.2"
>19.4.1.2 Initializing implicitly during direct assignment</A
></H4
><P
CLASS="para"
>You can copy the entire contents of one collection to another as long as both are built from the exact same datatype. When you do so, initialization comes along "for free." </P
><P
CLASS="para"
>Here's an example illustrating implicit initialization that occurs when we assign wedding_colors to be the value of earth_colors. </P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>DECLARE
   earth_colors Color_tab_t := Color_tab_t('BRICK', 'RUST', 'DIRT');
   wedding_colors Color_tab_t;
BEGIN
   wedding_colors := earth_colors;
   wedding_colors(3) := 'CANVAS';
END;</PRE
></BLOCKQUOTE
><P
CLASS="para"
>This code initializes wedding_colors and creates three elements that match those in earth_colors. These are independent variables rather than pointers to identical values; changing the third element of wedding_colors to 'CANVAS' does not have any effect on the third element of earth_colors. </P
><P
CLASS="para"
>Note that assignment is not possible when datatypes are merely "type-compatible." Even if you have created two different types with the exact same definition, the fact that they have different names makes them different types. A collection variable cannot be assigned to another variable of a different datatype: </P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>DECLARE
   TYPE Local_colors_t IS VARRAY(16) OF VARCHAR2(30);
   TYPE Remote_colors_t IS VARRAY(16) OF VARCHAR2(30);
   l_color Local_colors_t := Local_colors_t('THALO BLUE');
   r_color Remote_colors_t;
BEGIN
   r_color := l_color;  -- invalid
END;</PRE
></BLOCKQUOTE
><P
CLASS="para"
>This code will fail with the compile-time error "PLS-00382: expression is of wrong type," because r_color and l_color are of different types. </P
></DIV
><DIV
CLASS="sect3"
><H4
CLASS="sect3"
><A
CLASS="title"
NAME="SQL2-CH-19-SECT-4.1.3"
>19.4.1.3 Initializing implicitly via fetch</A
></H4
><P
CLASS="para"
>If you use a collection as a type in a database table, Oracle provides some very elegant ways of moving the collection between PL/SQL and the table. As with direct assignment, when you use <A
CLASS="indexterm"
NAME="ch19-idx-8557-1"
></A
>FETCH or <A
CLASS="indexterm"
NAME="ch19-idx-8561-1"
></A
>SELECT INTO to retrieve a collection and drop it into a collection variable, you get automatic initialization of the variable. Collections can turn out to be incredibly useful! </P
><P
CLASS="para"
>Although we mentioned this briefly in an earlier example, let's take a closer look at how you can read an entire collection in a single fetch. First, we want to create a table containing a collection and populate it with a couple of values: </P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>CREATE TABLE color_models (
   model_type VARCHAR2(12),
   colors Color_tab_t)
NESTED TABLE colors STORE AS color_model_colors_tab;

insert into color_models
   values ('RGB', Color_tab_t('RED','GREEN','BLUE'));
insert into color_models
   values ('CYMK',Color_tab_t('CYAN','YELLOW','MAGENTA','BLACK'));</PRE
></BLOCKQUOTE
><P
CLASS="para"
>Now we can show off the neat integration features. With one trip to the database we can retrieve all of the values of the "colors" column for a given row, and deposit them into a local variable: </P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>DECLARE
   l_colors Color_tab_t;
BEGIN
   /* Retrieve all the nested values in a single fetch.
   || This is the cool part.
   */
   SELECT colors INTO l_colors FROM color_models
      WHERE model_type = 'RGB';

   /* Loop through each value and print it. This is only to demonstrate
   || that we really have the data in the local variable.
   */
   FOR element IN 1..l_colors.COUNT
   LOOP
      dbms_output.put_line (element || ' ' || l_colors(element));
   END LOOP;
END;</PRE
></BLOCKQUOTE
><P
CLASS="para"
>With SERVEROUTPUT turned on, SQL*Plus prints the following when this code fragment executes: </P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>1 RED
2 GREEN
3 BLUE</PRE
></BLOCKQUOTE
><P
CLASS="para"
>Pretty neat, huh? A few important points to notice:</P
><UL
CLASS="itemizedlist"
><LI
CLASS="listitem"
><P
CLASS="para"
>Oracle, not the programmer, assigns the subscripts of l_colors when fetched from the database. </P
></LI
><LI
CLASS="listitem"
><P
CLASS="para"
>Oracle's assigned subscripts begin with 1 (as opposed to 0, as you may be used to in some other languages) and increment by 1. </P
></LI
><LI
CLASS="listitem"
><P
CLASS="para"
>Fetching satisfies the requirement to initialize the local collection variable before assigning values to elements. We didn't initialize l_colors with a constructor, but PL/SQL knew how to deal with it. </P
></LI
></UL
><P
CLASS="para"
>You can also make changes to the contents of the nested table and just as easily move the data back into a database table. Just to be mischievous, let's create a Fuschia-Green-Blue color model: </P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>DECLARE
   color_tab Color_tab_t;
BEGIN
   SELECT colors INTO color_tab FROM color_models
      WHERE model_type = 'RGB';
   FOR element IN 1..color_tab.COUNT
   LOOP
      IF color_tab(element) = 'RED'
      THEN
         color_tab(element) := 'FUSCHIA';
      END IF;
   END LOOP;
   /* Here is the cool part of this example. Only one insert
   || statement is needed -- it sends the entire nested table
   || back into the color_models table in the database.
   */
   INSERT INTO color_models VALUES ('FGB', color_tab);<A
CLASS="indexterm"
NAME="AUTOID-17916"
></A
>
<A
CLASS="indexterm"
NAME="AUTOID-17917"
></A
>

END;<A
CLASS="indexterm"
NAME="AUTOID-17918"
></A
>
<A
CLASS="indexterm"
NAME="AUTOID-17919"
></A
>
<A
CLASS="indexterm"
NAME="AUTOID-17920"
></A
></PRE
></BLOCKQUOTE
></DIV
><DIV
CLASS="sect3"
><H4
CLASS="sect3"
><A
CLASS="title"
NAME="SQL2-CH-19-SECT-4.1.4"
>19.4.1.4 VARRAY integration</A
></H4
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="AUTOID-17924"
></A
> <A
CLASS="indexterm"
NAME="AUTOID-17927"
></A
> <A
CLASS="indexterm"
NAME="AUTOID-17931"
></A
> Does this database-to-PL/SQL integration work for VARRAYs too? You bet, although there are a couple of differences. </P
><P
CLASS="para"
>First of all, realize that when you store and retrieve the contents of a nested table in the database, Oracle makes no promises about preserving the order of the elements. This makes sense, because the server is just putting the nested data into a store table behind the scenes, and we all know that relational databases don't give two hoots about row order. By contrast, storing and retrieving the contents of a VARRAY does preserve the order of the elements. </P
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="AUTOID-17937"
></A
>Preserving the order of VARRAY elements is actually a fairly useful capability. It makes possible something you cannot do in a pure relational database: embedding meaning in the order of the data. For example, if you want to store someone's favorite colors in rank order, you can do it with a single VARRAY column. Every time you retrieve the column collection, its elements will be in the same order as when you last stored it. By contrast, abiding by a pure relational model, you would need two columns, one for an integer corresponding to the rank, and one for the color. </P
><P
CLASS="para"
>Thinking about this order-preservation of VARRAYs brings to mind some interesting utility functions. For example, you could fairly easily code a tool that would allow the insertion of a new "favorite" at the low end of the list by "shifting up" all the other elements. </P
><P
CLASS="para"
>A second difference between integration of nested tables and integration of VARRAYs with the database is that some SELECT statements you could use to fetch the contents of a nested table will have to be modified if you want to fetch a VARRAY. (See <A
CLASS="xref"
HREF="ch19_05.htm#SQL2-CH-19-SECT-5.2"
>Section 19.5</A
> later for some examples.)<A
CLASS="indexterm"
NAME="AUTOID-17943"
></A
> <A
CLASS="indexterm"
NAME="AUTOID-17944"
></A
> <A
CLASS="indexterm"
NAME="AUTOID-17945"
></A
> </P
></DIV
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="SQL2-CH-19-SECT-4.2"
>19.4.2 Assigning Values to Elements: Index (Subscript) Considerations</A
></H3
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="AUTOID-17949"
></A
> <A
CLASS="indexterm"
NAME="AUTOID-17952"
></A
> <A
CLASS="indexterm"
NAME="AUTOID-17955"
></A
>In contrast to index-by tables, you can't assign values to arbitrarily numbered subscripts of nested tables and VARRAYs; instead, the indexes, at least initially, are monotonically increasing integers, assigned by the PL/SQL engine. That is, if you initialize n elements, they will have subscripts 1 through n. And, as implied above, you cannot rely on the assignment of particular subscripts to particular element values in nested tables. Yes, any element can be null, but null is different from nonexistent (sparse). </P
><P
CLASS="para"
>Nested tables are initially dense, with no skipped subscripts. Once a nested table exists, however, it is possible to remove any element from it, even one in the "middle." This will result in a sparse array. </P
><P
CLASS="para"
>VARRAYs, on the other hand, are always dense. Elements of VARRAYs can only be removed from the "end" of the array, so VARRAYs cannot be coerced into being sparse. </P
><P
CLASS="para"
>However, if what you want is a sparse array in PL/SQL, you would be much better off using an index-by table. The real strength of nested tables and VARRAYs is their ability to move gracefully in and out of the database. </P
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="SQL2-CH-19-SECT-4.3"
>19.4.3 Adding and Removing Elements</A
></H3
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="ch19-idx-8584-1"
></A
><A
CLASS="indexterm"
NAME="ch19-idx-8584-2"
></A
><A
CLASS="indexterm"
NAME="ch19-idx-8584-3"
></A
><A
CLASS="indexterm"
NAME="ch19-idx-8584-4"
></A
><A
CLASS="indexterm"
NAME="ch19-idx-8584-5"
></A
><A
CLASS="indexterm"
NAME="ch19-idx-8584-6"
></A
>With an old-style index-by table, Oracle automatically allocates memory for new elements. When you want to add an element, you simply pick a value for the subscript and assign a value to that element. To remove an element, you could use the DELETE method. To illustrate: </P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>DECLARE
   TYPE color_tab_type IS TABLE OF VARCHAR2(30)
      INDEX BY BINARY_INTEGER;
   color_tab color_tab_type;
BEGIN
   color_tab(3845) := 'SEAFOAM GREEN';
   color_tab(702) := 'CERULEAN BLUE';
   color_tab.DELETE(3845);
END;</PRE
></BLOCKQUOTE
><P
CLASS="para"
>What would happen if you tried this assignment with a nested table? Aha, you say, knowing that subscripts start with 1 and are monotonically increasing, I'll just try: </P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>DECLARE
   /* colors starts life initialized by empty */
   colors Color_tab_t := Color_tab_t();
BEGIN
   colors(1) = 'SEAFOAM GREEN'; -- invalid</PRE
></BLOCKQUOTE
><P
CLASS="para"
>But this code produces an "ORA-06533, Subscript beyond count" error. This is why you need EXTEND. </P
><DIV
CLASS="sect3"
><H4
CLASS="sect3"
><A
CLASS="title"
NAME="SQL2-CH-19-SECT-4.3.1"
>19.4.3.1 Adding elements using EXTEND</A
></H4
><P
CLASS="para"
>Adding an element to a collection requires a separate allocation step. Making a "slot" in memory for a collection element is independent from assigning a value to it. If you haven't initialized the collection with a sufficient number of elements (null or otherwise), you must first use the <A
CLASS="indexterm"
NAME="AUTOID-17989"
></A
>EXTEND procedure on the variable. (For the formal syntax and usage of this procedure, refer to <A
CLASS="xref"
HREF="ch19_06.htm#SQL2-CH-19-SECT-6.0.5"
>Section 19.6, "Collection Built-Ins"</A
>.) </P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>DECLARE
   /* The colors variable begins life initialized but with
   || no elements allocated
   */
   colors Color_tab_t := Color_tab_t();
BEGIN
   colors.EXTEND;  -- allocate space for a single element
   colors(1) := 'GRANITE';  -- this works
   colors(2) := 'HUNTER GREEN';  -- invalid; we only extended by 1
END;</PRE
></BLOCKQUOTE
></DIV
><DIV
CLASS="sect3"
><H4
CLASS="sect3"
><A
CLASS="title"
NAME="SQL2-CH-19-SECT-4.3.2"
>19.4.3.2 Removing elements using DELETE</A
></H4
><P
CLASS="para"
>When you <A
CLASS="indexterm"
NAME="AUTOID-17997"
></A
> <A
CLASS="indexterm"
NAME="AUTOID-18000"
></A
> DELETE an element, PL/SQL removes that element from the collection. Interestingly, it doesn't actually remove all traces of the element; in fact, a placeholder gets left behind. That means you can reassign the element later without having to re-allocate the space. </P
><P
CLASS="para"
>DELETE has three different forms depending on how much you want to remove: one, several (contiguous), or all of the elements. <A
CLASS="xref"
HREF="ch19_06.htm#SQL2-CH-19-SECT-6.0.5"
>Section 19.6</A
> describes all the forms of this procedure. </P
><P
CLASS="para"
>In physical terms, PL/SQL actually releases the memory only when your program deletes a sufficient number of elements to free an entire page of memory (unless you DELETE all of the elements, which frees all of the memory immediately). This de-allocation happens automatically and requires no accommodations or devices in your code. </P
></DIV
><DIV
CLASS="sect3"
><H4
CLASS="sect3"
><A
CLASS="title"
NAME="SQL2-CH-19-SECT-4.3.3"
>19.4.3.3 ...And what about TRIM?</A
></H4
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="AUTOID-18009"
></A
>TRIM is another built-in which lets you remove elements from a collection; it's equally applicable to nested tables and VARRAYs. (Again, refer to <A
CLASS="xref"
HREF="ch19_06.htm#SQL2-CH-19-SECT-6.0.5"
>Section 19.6</A
> for details.) As its name implies, TRIM drops elements off the end of a collection. Unlike DELETE, TRIM leaves no placeholder behind when it does its work. </P
><P
CLASS="para"
>Although my programming exercise above didn't need TRIM, this built-in, combined with EXTEND, can be very useful if you want to program a "stack" abstraction. In general, the syntax is simply the following: </P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
><I
CLASS="filename"
>collection_name</I
>.TRIM(<I
CLASS="function"
>n</I
>);</PRE
></BLOCKQUOTE
><P
CLASS="para"
>where <EM
CLASS="emphasis"
>n</EM
> is the number of elements to remove. If you don't supply <EM
CLASS="emphasis"
>n</EM
>, it defaults to 1. </P
><P
CLASS="para"
>Unfortunately, if you use TRIM and DELETE on the same collection, you can get some very surprising results. Consider this scenario: if you DELETE an element at the end of a nested table variable and then do a TRIM on the same variable, how many elements have you removed? You would think that you have removed two elements, but, in fact, you have removed only one. The placeholder that is left by DELETE is what TRIM acts upon.</P
><BLOCKQUOTE
CLASS="tip"
><P
CLASS="para"
><STRONG
>TIP:</STRONG
> To avoid confusion, Oracle Corporation recommends using either DELETE or TRIM, but not both, on a given collection.<A
CLASS="indexterm"
NAME="AUTOID-18023"
></A
> <A
CLASS="indexterm"
NAME="AUTOID-18024"
></A
> <A
CLASS="indexterm"
NAME="AUTOID-18025"
></A
> <A
CLASS="indexterm"
NAME="AUTOID-18026"
></A
> <A
CLASS="indexterm"
NAME="AUTOID-18027"
></A
> </P
></BLOCKQUOTE
></DIV
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="SQL2-CH-19-SECT-4.4"
>19.4.4 Comparing Collections</A
></H3
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="ch19-idx-8592-1"
></A
> <A
CLASS="indexterm"
NAME="ch19-idx-8592-2"
></A
> Unfortunately, there is no built-in capability to compare collections and determine whether one is "equal to" or "greater than" the other. Attempts to do so will produce compile-time errors. The only comparison that is legal for collections is a test for nullness, as we saw previously: </P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>DECLARE
   cool_colors Color_tab_t;
BEGIN
   IF cool_colors IS NULL THEN         -- valid; will be TRUE</PRE
></BLOCKQUOTE
><P
CLASS="para"
>If comparing collections is important to your application, you could put an object "container" around the collection, and use objects instead of collections as the structure that your applications manipulate. Doing so allows you to define your own object comparison semantics. Although <A
CLASS="xref"
HREF="ch18_01.htm"
>Chapter 18</A
> provides a detailed discussion of defining your own object comparisons using the MAP and ORDER methods, we'll divert momentarily to illustrate how this technique will help us compare collections. </P
><P
CLASS="para"
>Without repeating a lot of descriptive detail that you'll find in <A
CLASS="xref"
HREF="ch18_01.htm"
>Chapter 18</A
>, your object type specification might look quite simple: </P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>CREATE TYPE Color_object_t AS OBJECT (
   crayons Color_array_t,
   ORDER MEMBER FUNCTION compare(c_obj Color_object_t) RETURN INTEGER);</PRE
></BLOCKQUOTE
><P
CLASS="para"
>This creates an object with a single attribute, crayons, and a special method that Oracle will use when it needs to compare instances of type Color_object_t. </P
><P
CLASS="para"
>The object type body could be implemented as follows:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>CREATE TYPE BODY Color_object_t AS
   ORDER MEMBER FUNCTION compare(c_obj Color_object_t) RETURN INTEGER
      IS
   BEGIN
      /* If one object has more elements than the other, it is
      || by our convention defined to be &quot;greater&quot; than the other.
      */
      IF nvl(SELF.crayons.COUNT,0) &gt; nvl(c_obj.crayons.COUNT,0)
      THEN
         RETURN 1;
      ELSIF nvl(SELF.crayons.COUNT,0) &lt; nvl(c_obj.crayons.COUNT,0)
      THEN
         RETURN -1;
      ELSE
         /* Otherwise we compare the individual elements.
         || If the two arrays have the same number of elements,
         || we'll call them &quot;equal.&quot;
         */
         RETURN 0;
      END IF;
   END compare;
END;</PRE
></BLOCKQUOTE
><P
CLASS="para"
>In PL/SQL, you can now compare objects of type Color_object_t to your heart's content, achieving a kind of <EM
CLASS="emphasis"
>de facto</EM
> collection comparison: </P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>DECLARE
   color_object_1 Color_object_t
      := Color_object_t(Color_array_t('BLUE','GREEN','RED'));
   color_object_2 Color_object_t := color_object_1;
BEGIN
   ...
   IF color_object_1 = color_object_2 THEN
      ...
END;</PRE
></BLOCKQUOTE
><P
CLASS="para"
>And if you needed this structure as a column in a table, it could go something like this: </P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>CREATE TABLE kids_coloring_kits (
   NAME VARCHAR2(30),
   crayon_colors Color_object_t
);</PRE
></BLOCKQUOTE
><P
CLASS="para"
>Once the table is populated, you can then use SQL sorting features such as ORDER BY, GROUP BY, and DISTINCT on the crayon_colors column, since your ORDER member function tells Oracle how to compare values in the column.<A
CLASS="indexterm"
NAME="AUTOID-18052"
></A
> <A
CLASS="indexterm"
NAME="AUTOID-18053"
></A
> </P
></DIV
></DIV
><DIV
CLASS="htmlnav"
><P
></P
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch19_03.htm"
TITLE="19.3 Syntax for Declaring Collection Datatypes"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 19.3 Syntax for Declaring Collection Datatypes"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="book"
HREF="index.htm"
TITLE="Oracle PL/SQL Programming, 2nd Edition"
><IMG
SRC="../gifs/txthome.gif"
ALT="Oracle PL/SQL Programming, 2nd Edition"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch19_05.htm#SQL2-CH-19-SECT-5.2"
TITLE="19.5 Collection Pseudo-Functions"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 19.5 Collection Pseudo-Functions"
BORDER="0"></A
></TD
></TR
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
>19.3 Syntax for Declaring Collection Datatypes</TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="index"
HREF="index/idx_0.htm"
TITLE="Book Index"
><IMG
SRC="../gifs/index.gif"
ALT="Book Index"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
>19.5 Collection Pseudo-Functions</TD
></TR
></TABLE
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"></DIV
><IMG SRC="../gifs/smnavbar.gif"
USEMAP="#map"
BORDER="0"
ALT="The Oracle Library Navigation">

<P><font size="-1">
<a href="../copyrght.htm#copy">Copyright (c) 2000</a> O'Reilly &amp; Associates. All rights reserved.
</font></P>

<MAP NAME="map">

<AREA SHAPE="RECT"
COORDS="0,0,35,30"
HREF="../index.htm"
ALT="Library Home">

<AREA SHAPE="RECT"
COORDS="40,0,95,30"
HREF="index.htm"
ALT="Oracle PL/SQL Programming, 2nd. Ed.">

<AREA SHAPE="RECT"
COORDS="100,0,200,30"
HREF="../guide8i/index.htm"
ALT="Guide to Oracle 8i Features">

<AREA SHAPE="RECT"
COORDS="205,0,245,30"
HREF="../bipack/index.htm"
ALT="Oracle Built-in Packages">

<AREA SHAPE="RECT"
COORDS="250,0,320,30"
HREF="../advprog/index.htm"
ALT="Advanced PL/SQL Programming with Packages">

<AREA SHAPE="RECT"
COORDS="325,0,420,30"
HREF="../webapp/index.htm"
ALT="Oracle Web Applications">

<AREA SHAPE="RECT"
COORDS="425,0,490,30"
HREF="../langpkt/index.htm"
ALT="Oracle PL/SQL Language Pocket Reference">

<AREA SHAPE="RECT"
COORDS="495,0,570,30"
HREF="../bipkt/index.htm"
ALT="Oracle PL/SQL Built-ins Pocket Reference">
</MAP>

</BODY
>
<!-- Mirrored from liso.cs.pusan.ac.kr by HTTrack Website Copier/3.x [XR&CO'2001] -->
</HTML
>
