<HTML
><HEAD
><TITLE
>[Chapter 7] Loops</TITLE
><META
NAME="DC.Creator"
CONTENT="Steven Feuerstein &amp; Bill Pribyl"><META
NAME="DC.Date"
CONTENT="2000-04-29T18:57:31Z"><META
NAME="DC.Format"
CONTENT="text/html"
SCHEME="MIME"><META
NAME="DC.Identifier"
CONTENT="O'Reilly and Associates CD-ROM-1-56592-335-9E"><META
NAME="DC.Language"
CONTENT="en-US"><META
NAME="DC.Publisher"
CONTENT="O'Reilly &amp; Associates, Inc."><META
NAME="DC.Source"
CONTENT="1-56592-335-9E"
SCHEME="ISBN"><META
NAME="DC.Subject.Keyword"
CONTENT="Oracle PL/SQL"><META
NAME="DC.Title"
CONTENT="Oracle PL/SQL Programming, 2nd Edition"><META
NAME="DC.Type"
CONTENT="Text.Monograph"><META
NAME="generator"
CONTENT="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><LINK
REL="stylesheet"
TYPE="text/css"
HREF="../style/style1.css"><LINK
REV="made"
HREF="mailto:online-books@oreilly.com"
TITLE="Online Books Comments"><LINK
REL="up"
HREF="part02.htm"
TITLE="II. PL/SQL Language Elements "><LINK
REL="prev"
HREF="ch06_13.htm#SQL2-CH-6-SECT-13.2"
TITLE="6.13 Working with Cursors "><LINK
REL="next"
HREF="ch07_02.htm#SQL2-CH-7-SECT-2.1"
TITLE="7.2 The Simple Loop"></HEAD
><BODY
><DIV
CLASS="htmlnav"
><H1
><IMG
SRC="gifs/smbanner.gif"
ALT="Oracle PL/SQL Programming, 2nd Edition"
USEMAP="#srchmap"
BORDER="0"></H1
><MAP
NAME="srchmap"
><AREA
SHAPE="RECT"
COORDS="0,0,466,65"
HREF="index.htm"
ALT="Oracle PL/SQL Programming, 2nd Edition"><AREA
SHAPE="RECT"
COORDS="467,0,514,18"
HREF="jobjects/fsearch.htm"
ALT="Search this book"></MAP
><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch06_13.htm#SQL2-CH-6-SECT-13.2"
TITLE="6.13 Working with Cursors "
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 6.13 Working with Cursors "
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><SPAN
CLASS="NAVTITLE"
>Chapter 7</SPAN
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch07_02.htm#SQL2-CH-7-SECT-2.1"
TITLE="7.2 The Simple Loop"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 7.2 The Simple Loop"
BORDER="0"></A
></TD
></TR
></TABLE
>&nbsp;<HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"></DIV
><DIV
CLASS="chapter"
><H1
CLASS="chapter"
><A
CLASS="title"
NAME="SQL2-CH-7"
>7. Loops</A
></H1
><DIV
CLASS="htmltoc"
><P
><B
>Contents:</B
><BR><A
CLASS="sect1"
HREF="#SQL2-CH-7-SECT-1"
TITLE="7.1 Loop Basics"
>Loop Basics</A
><BR><A
CLASS="sect1"
HREF="ch07_02.htm#SQL2-CH-7-SECT-2.1"
TITLE="7.2 The Simple Loop"
>The Simple Loop</A
><BR><A
CLASS="sect1"
HREF="ch07_03.htm"
TITLE="7.3 The Numeric FOR Loop"
>The Numeric FOR Loop</A
><BR><A
CLASS="sect1"
HREF="ch07_04.htm"
TITLE="7.4 The Cursor FOR Loop"
>The Cursor FOR Loop</A
><BR><A
CLASS="sect1"
HREF="ch07_05.htm#SQL2-CH-7-SECT-5.1"
TITLE="7.5 The WHILE Loop"
>The WHILE Loop</A
><BR><A
CLASS="sect1"
HREF="ch07_06.htm#SQL2-CH-7-SECT-6.1.2"
TITLE="7.6 Managing Loop Execution"
>Managing Loop Execution</A
><BR><A
CLASS="sect1"
HREF="ch07_07.htm#SQL2-CH-7-SECT-7.2.2"
TITLE="7.7 Tips for PL/SQL Loops"
>Tips for PL/SQL Loops</A
></P
><P
></P
></DIV
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="ch07-idx-151588-1"
></A
> <A
CLASS="indexterm"
NAME="ch07-idx-151588-2"
></A
><A
CLASS="indexterm"
NAME="ch07-idx-151588-3"
></A
> <A
CLASS="indexterm"
NAME="ch07-idx-151588-4"
></A
> This chapter explores the iterative control structures of PL/SQL, otherwise known as loops, which let you execute the same code repeatedly. PL/SQL provides three different kinds of loop constructs: </P
><UL
CLASS="itemizedlist"
><LI
CLASS="listitem"
><P
CLASS="para"
>The simple or infinite loop </P
></LI
><LI
CLASS="listitem"
><P
CLASS="para"
>The FOR loop (numeric and cursor) </P
></LI
><LI
CLASS="listitem"
><P
CLASS="para"
>The WHILE loop </P
></LI
></UL
><P
CLASS="para"
>Each type of loop is designed for a specific purpose with its own nuances, rules for use, and guidelines for high-quality construction. As I explain each of the loops, I will include a table (based on the following one) describing the following properties of the loop: </P
><TABLE
CLASS="informaltable"
BORDER="1"
CELLPADDING="3"
><THEAD
CLASS="thead"
><TR
CLASS="row"
VALIGN="TOP"
><TH
CLASS="entry"
ALIGN="LEFT"
ROWSPAN="1"
COLSPAN="1"
> <P
CLASS="para"
>Property</P
> </TH
><TH
CLASS="entry"
ALIGN="LEFT"
ROWSPAN="1"
COLSPAN="1"
> <P
CLASS="para"
>Description</P
> </TH
></TR
></THEAD
><TBODY
CLASS="tbody"
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
> How the loop is terminated </TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
> A loop executes code repetitively. How do you make the loop stop executing its body? </TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
> When the test for termination takes place </TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
> Does the test for termination take place at the beginning or end of the loop? What are the consequences? </TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
> Reason to use this loop </TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
> What are the special factors you should consider to determine if this loop is right for your situation? </TD
></TR
></TBODY
></TABLE
><DIV
CLASS="sect1"
><H2
CLASS="sect1"
><A
CLASS="title"
NAME="SQL2-CH-7-SECT-1"
>7.1 Loop Basics</A
></H2
><P
CLASS="para"
>Why are there three different kinds of loops? To provide you with the flexibility you need to write the most straightforward code to handle any particular situation. Most situations which require a loop could be written with any of the three loop constructs. If you do not pick the construct best-suited for that particular requirement, however, you could end up having to write many additional lines of code. The resulting module would also be harder to understand and maintain. </P
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="SQL2-CH-7-SECT-1.1"
>7.1.1 Examples of Different Loops</A
></H3
><P
CLASS="para"
>To give you a feeling for the way the different loops solve their problems in different ways, consider the following three procedures. In each case, the procedure executes the same body of code inside a loop: </P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>set_rank (ranking_level);</PRE
></BLOCKQUOTE
><P
CLASS="para"
>where set_rank performs a ranking for the specified level.</P
><UL
CLASS="itemizedlist"
><LI
CLASS="listitem"
><P
CLASS="para"
><EM
CLASS="emphasis"
>The simple loop.</EM
> My procedure accepts a maximum ranking as an argument and then sets the rank until the level exceeds the maximum. Notice the IF statement to guard against executing the loop when the maximum rank is negative. Notice also the EXIT WHEN statement used to terminate the loop: </P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>PROCEDURE set_all_ranks (max_rank_in IN INTEGER)
IS
   ranking_level NUMBER(3) := 1;
BEGIN
   IF max_rank_in &gt;= 1
   THEN
      LOOP
         set_rank (ranking_level);
         ranking_level := ranking_level + 1;
         EXIT WHEN ranking_level &gt; max_rank_in;
      END LOOP;
   END IF;
END;</PRE
></BLOCKQUOTE
></LI
><LI
CLASS="listitem"
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="AUTOID-6486"
></A
>The FOR loop. In this case, I rank for the fixed range of values, from one to the maximum number: </P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>PROCEDURE set_all_ranks (max_rank_in IN INTEGER)
IS
BEGIN
   FOR ranking_level IN 1 .. max_rank_in
   LOOP
      set_rank (ranking_level);
   END LOOP;
END;</PRE
></BLOCKQUOTE
></LI
><LI
CLASS="listitem"
><P
CLASS="para"
><EM
CLASS="emphasis"
>The WHILE loop.</EM
> My procedure accepts a maximum ranking as an argument and then sets the rank until the level exceeds the maximum. Notice that the condition which terminates the loop comes on the same line as the WHILE keyword: </P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>PROCEDURE set_all_ranks (max_rank_in IN INTEGER)
IS
   ranking_level NUMBER(3) := 1;
BEGIN
   WHILE ranking_level &lt;= max_rank_in
   LOOP
      set_rank (ranking_level);
      ranking_level := ranking_level + 1;
   END LOOP;
END;</PRE
></BLOCKQUOTE
></LI
></UL
><P
CLASS="para"
>In the above example, the FOR loop clearly requires the smallest amount of code. Yet I could only use it in this case because I knew that I would run the body of the loop a specific number of times (max_rank_in). In many other situations, the number of times a loop must execute varies and so the FOR loop cannot be used. </P
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="SQL2-CH-7-SECT-1.2"
>7.1.2 Structure of PL/SQL Loops</A
></H3
><P
CLASS="para"
>While there are differences among the three loop constructs, every loop has two parts: the <EM
CLASS="emphasis"
>loop boundary</EM
> and the <EM
CLASS="emphasis"
>loop body</EM
>. The loop boundary is composed of the reserved words that initiate the loop, the condition that causes the loop to terminate, and the END LOOP statement that ends the loop. The body of the loop is the sequence of executable statements inside the loop boundary which execute on each iteration of the loop. </P
><P
CLASS="para"
><A
CLASS="xref"
HREF="ch07_01.htm"
>Figure 7.1</A
> shows the boundary and body of a WHILE loop. </P
><H4
CLASS="figure"
><A
CLASS="title"
NAME="SQL2-CH-7-FIG-2"
>Figure 7.1: The boundary and body of the WHILE loop</A
></H4
><IMG
CLASS="graphic"
SRC="figs/sql2.0701.gif"
ALT="Figure 7.1"><P
CLASS="para"
>In general, think of a loop much as you would a procedure or a function. The body of the loop is a black box, and the condition that causes loop termination is the interface to that black box. Code outside of the loop should not have to know about the inner workings of the loop. Keep this in mind as you go through the different kinds of loops and examples in the rest of the chapter. </P
><P
CLASS="para"
>In addition to the examples you will find in this chapter, I have included several lengthy code samples utilizing PL/SQL loops in the Oracle Forms environment in the following files on the disk: </P
><DL
CLASS="variablelist"
><DT
CLASS="term"
><EM
CLASS="emphasis"
>highrec.doc</EM
> and <EM
CLASS="emphasis"
>highrec.fp</EM
></DT
><DD
CLASS="listitem"
><P
CLASS="para"
>Demonstrate highlighting items in an Oracle Forms record.</P
></DD
><DT
CLASS="term"
><EM
CLASS="emphasis"
>ofquery.doc, postqry.fp</EM
>, and <EM
CLASS="emphasis"
>preqry.fp</EM
></DT
><DD
CLASS="listitem"
><P
CLASS="para"
>Demonstrate automatic post- and pre-query processing in Oracle Forms.</P
></DD
></DL
></DIV
></DIV
></DIV
><DIV
CLASS="htmlnav"
><P
></P
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch06_13.htm#SQL2-CH-6-SECT-13.2"
TITLE="6.13 Working with Cursors "
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 6.13 Working with Cursors "
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="book"
HREF="index.htm"
TITLE="Oracle PL/SQL Programming, 2nd Edition"
><IMG
SRC="../gifs/txthome.gif"
ALT="Oracle PL/SQL Programming, 2nd Edition"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch07_02.htm#SQL2-CH-7-SECT-2.1"
TITLE="7.2 The Simple Loop"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 7.2 The Simple Loop"
BORDER="0"></A
></TD
></TR
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
>6.13 Working with Cursors </TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="index"
HREF="index/idx_0.htm"
TITLE="Book Index"
><IMG
SRC="../gifs/index.gif"
ALT="Book Index"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
>7.2 The Simple Loop</TD
></TR
></TABLE
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"></DIV
><IMG SRC="../gifs/smnavbar.gif"
USEMAP="#map"
BORDER="0"
ALT="The Oracle Library Navigation">

<P><font size="-1">
<a href="../copyrght.htm#copy">Copyright (c) 2000</a> O'Reilly &amp; Associates. All rights reserved.
</font></P>

<MAP NAME="map">

<AREA SHAPE="RECT"
COORDS="0,0,35,30"
HREF="../index.htm"
ALT="Library Home">

<AREA SHAPE="RECT"
COORDS="40,0,95,30"
HREF="index.htm"
ALT="Oracle PL/SQL Programming, 2nd. Ed.">

<AREA SHAPE="RECT"
COORDS="100,0,200,30"
HREF="../guide8i/index.htm"
ALT="Guide to Oracle 8i Features">

<AREA SHAPE="RECT"
COORDS="205,0,245,30"
HREF="../bipack/index.htm"
ALT="Oracle Built-in Packages">

<AREA SHAPE="RECT"
COORDS="250,0,320,30"
HREF="../advprog/index.htm"
ALT="Advanced PL/SQL Programming with Packages">

<AREA SHAPE="RECT"
COORDS="325,0,420,30"
HREF="../webapp/index.htm"
ALT="Oracle Web Applications">

<AREA SHAPE="RECT"
COORDS="425,0,490,30"
HREF="../langpkt/index.htm"
ALT="Oracle PL/SQL Language Pocket Reference">

<AREA SHAPE="RECT"
COORDS="495,0,570,30"
HREF="../bipkt/index.htm"
ALT="Oracle PL/SQL Built-ins Pocket Reference">
</MAP>

</BODY
>
<!-- Mirrored from liso.cs.pusan.ac.kr by HTTrack Website Copier/3.x [XR&CO'2001] -->
</HTML
>
