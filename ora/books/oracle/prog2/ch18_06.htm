<HTML
><HEAD
><TITLE
>[Chapter 18] 18.6 Object Housekeeping</TITLE
><META
NAME="DC.Creator"
CONTENT="Steven Feuerstein &amp; Bill Pribyl"><META
NAME="DC.Date"
CONTENT="2000-04-29T19:07:50Z"><META
NAME="DC.Format"
CONTENT="text/html"
SCHEME="MIME"><META
NAME="DC.Identifier"
CONTENT="O'Reilly and Associates CD-ROM-1-56592-335-9E"><META
NAME="DC.Language"
CONTENT="en-US"><META
NAME="DC.Publisher"
CONTENT="O'Reilly &amp; Associates, Inc."><META
NAME="DC.Source"
CONTENT="1-56592-335-9E"
SCHEME="ISBN"><META
NAME="DC.Subject.Keyword"
CONTENT="Oracle PL/SQL"><META
NAME="DC.Title"
CONTENT="Oracle PL/SQL Programming, 2nd Edition"><META
NAME="DC.Type"
CONTENT="Text.Monograph"><META
NAME="generator"
CONTENT="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><LINK
REL="stylesheet"
TYPE="text/css"
HREF="../style/style1.css"><LINK
REV="made"
HREF="mailto:online-books@oreilly.com"
TITLE="Online Books Comments"><LINK
REL="up"
HREF="ch18_01.htm"
TITLE="18. Object Types"><LINK
REL="prev"
HREF="ch18_05.htm#SQL2-CH-18-SECT-5.3"
TITLE="18.5 Modifying Persistent Objects"><LINK
REL="next"
HREF="ch18_07.htm"
TITLE="18.7 Making the Objects Option Work"></HEAD
><BODY
><DIV
CLASS="htmlnav"
><H1
><IMG
SRC="gifs/smbanner.gif"
ALT="Oracle PL/SQL Programming, 2nd Edition"
USEMAP="#srchmap"
BORDER="0"></H1
><MAP
NAME="srchmap"
><AREA
SHAPE="RECT"
COORDS="0,0,466,65"
HREF="index.htm"
ALT="Oracle PL/SQL Programming, 2nd Edition"><AREA
SHAPE="RECT"
COORDS="467,0,514,18"
HREF="jobjects/fsearch.htm"
ALT="Search this book"></MAP
><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch18_05.htm#SQL2-CH-18-SECT-5.3"
TITLE="18.5 Modifying Persistent Objects"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 18.5 Modifying Persistent Objects"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><SPAN
CLASS="NAVTITLE"
><A
CLASS="chapter"
REL="up"
HREF="ch18_01.htm"
TITLE="18. Object Types"
>Chapter 18<BR>Object Types</A
></SPAN
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch18_07.htm"
TITLE="18.7 Making the Objects Option Work"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 18.7 Making the Objects Option Work"
BORDER="0"></A
></TD
></TR
></TABLE
>&nbsp;<HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"></DIV
><DIV
CLASS="sect1"
><H2
CLASS="sect1"
><A
CLASS="title"
NAME="SQL2-CH-18-SECT-6"
>18.6 Object Housekeeping</A
></H2
><P
CLASS="para"
>In the business of working with objects, you will gain a familiarity with a number of ways of getting information about object types that you have created. These include making direct queries of the data dictionary and using the SQL*Plus "describe" command. </P
><P
CLASS="para"
>Another topic in the "housekeeping" category is how to deal with schema changes after you have already built tables on your object types. As the next section of the chapter explains, there are no easy answers to this question. </P
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="SQL2-CH-18-SECT-6.1"
>18.6.1 Data Dictionary</A
></H3
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="AUTOID-17077"
></A
><A
CLASS="indexterm"
NAME="AUTOID-17080"
></A
>There are a few new entries in the data dictionary that will be very helpful in managing your object types. The shorthand dictionary term for object types is simply TYPE. Object type definitions and object type bodies are both found in the USER_SOURCE view (or DBA_SOURCE, or ALL_SOURCE), just as package specifications and bodies are. <A
CLASS="xref"
HREF="ch18_06.htm#SQL2-CH-18-SECT-6.1"
>Table 18.4</A
> summarizes the views. </P
><BR><TABLE
CLASS="table"
BORDER="1"
CELLPADDING="3"
><CAPTION
CLASS="table"
><A
CLASS="title"
NAME="SQL2-CH-18-TABLE-10"
>Table 18.4: Data Dictionary Entries for Object Types </A
></CAPTION
><THEAD
CLASS="thead"
><TR
CLASS="row"
VALIGN="TOP"
><TH
CLASS="entry"
ALIGN="LEFT"
ROWSPAN="1"
COLSPAN="1"
> <P
CLASS="para"
>To Answer the Question...</P
> </TH
><TH
CLASS="entry"
ALIGN="LEFT"
ROWSPAN="1"
COLSPAN="1"
> <P
CLASS="para"
>Use This View</P
> </TH
><TH
CLASS="entry"
ALIGN="LEFT"
ROWSPAN="1"
COLSPAN="1"
> <P
CLASS="para"
>As In</P
> </TH
></TR
></THEAD
><TBODY
CLASS="tbody"
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
> <P
CLASS="para"
>What object types have I created?</P
> </TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
> <P
CLASS="para"
>USER_TYPES</P
> </TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
> <BLOCKQUOTE
><PRE
CLASS="programlisting"
>SELECT type_name
  FROM user_types
 WHERE type_code = 'OBJECT';</PRE
></BLOCKQUOTE
> </TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
> <P
CLASS="para"
>What are the attributes of type Foo_t?</P
> </TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
> <P
CLASS="para"
>USER_TYPE_ATTRS</P
> </TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
> <BLOCKQUOTE
><PRE
CLASS="programlisting"
>SELECT *
  FROM user_type_attrs
 WHERE type_name = 'FOO_T';</PRE
></BLOCKQUOTE
> </TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
> <P
CLASS="para"
>What are the methods of type Foo_t?</P
> </TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
> <P
CLASS="para"
>USER_TYPE_METHODS</P
> </TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
> <BLOCKQUOTE
><PRE
CLASS="programlisting"
>SELECT *
  FROM user_type_methods
 WHERE type_name = 'FOO_T';</PRE
></BLOCKQUOTE
> </TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
> <P
CLASS="para"
>What are the parameters of Foo_t's methods?</P
> </TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
> <P
CLASS="para"
>USER_METHOD_PARAMS</P
> </TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
> <BLOCKQUOTE
><PRE
CLASS="programlisting"
>SELECT *
  FROM user_method_params
 WHERE type_name = 'FOO_T';</PRE
></BLOCKQUOTE
> </TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
> <P
CLASS="para"
>What datatype is returned by Foo_t's method called bar?</P
> </TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
> <P
CLASS="para"
>USER_METHOD_RESULTS</P
> </TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
> <BLOCKQUOTE
><PRE
CLASS="programlisting"
>SELECT *
  FROM user_method_results
 WHERE type_name = 'FOO_T'
   AND method_name = 'BAR';</PRE
></BLOCKQUOTE
> </TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
> <P
CLASS="para"
>What is the source code for Foo_t?</P
> </TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
> <P
CLASS="para"
>USER_SOURCE</P
> </TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
> <BLOCKQUOTE
><PRE
CLASS="programlisting"
>SELECT text
  FROM user_source
 WHERE name = 'FOO_T'
   AND type = 'TYPE'
 ORDER BY line;</PRE
></BLOCKQUOTE
> </TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
> <P
CLASS="para"
>What is the code used in the object body of Foo_t?</P
> </TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
> <P
CLASS="para"
>USER_SOURCE</P
> </TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
> <BLOCKQUOTE
><PRE
CLASS="programlisting"
>SELECT text
  FROM user_source
 WHERE name = 'FOO_T'
   AND type = 'TYPE BODY'
 ORDER BY line;</PRE
></BLOCKQUOTE
> </TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
> <P
CLASS="para"
>What are the object tables that implement Foo_t?</P
> </TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
> <P
CLASS="para"
>USER_TABLES</P
> </TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
> <BLOCKQUOTE
><PRE
CLASS="programlisting"
>SELECT table_name
  FROM user_object_tables
 WHERE table_type = 'FOO_T';</PRE
></BLOCKQUOTE
> </TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
> <P
CLASS="para"
>What columns implement Foo_t?</P
> </TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
> <P
CLASS="para"
>USER_TAB_COLUMNS</P
> </TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
> <BLOCKQUOTE
><PRE
CLASS="programlisting"
>SELECT table_name, column_name
  FROM user_tab_columns
 WHERE data_type = 'FOO_T';</PRE
></BLOCKQUOTE
> </TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
> <P
CLASS="para"
>What database objects are dependent on Foo_t?</P
> </TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
> <P
CLASS="para"
>USER_DEPENDENCIES</P
> </TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
> <BLOCKQUOTE
><PRE
CLASS="programlisting"
>SELECT name, type
  FROM user_dependencies
 WHERE referenced_name = 'FOO_T';</PRE
></BLOCKQUOTE
> </TD
></TR
></TBODY
></TABLE
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="SQL2-CH-18-SECT-6.2"
>18.6.2 SQL*Plus "Describe" Command</A
></H3
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="AUTOID-17172"
></A
> <A
CLASS="indexterm"
NAME="AUTOID-17175"
></A
>If you're like me and don't like to type any more than necessary, you'll appreciate a wonderful enhancement that Oracle has provided for the describe command in SQL*Plus. It will report not only the attributes of an object type, but also the methods and their arguments. To illustrate: </P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>SQL&gt; desc pet_t
 Name                            Null?    Type
 ------------------------------- -------- ----
 TAG_NO                                   NUMBER(38)
 NAME                                     VARCHAR2(60)
 ANIMAL_TYPE                              VARCHAR2(30)
 SEX                                      VARCHAR2(1)
 PHOTO                                    BINARY FILE LOB
 VACCINATIONS                             VACCINATION_LIST_T
 OWNER                                    REF OF PERSON_T

METHOD
------
 MEMBER FUNCTION SET_TAG_NO RETURNS PET_T
 Argument Name                  Type                    In/Out Default?
 ------------------------------ ----------------------- ------ --------
 NEW_TAG_NO                     NUMBER                  IN

METHOD
------
 MEMBER FUNCTION SET_PHOTO RETURNS PET_T
 Argument Name                  Type                    In/Out Default?
 ------------------------------ ----------------------- ------ --------
 FILE_LOCATION                  VARCHAR2                IN
 MEMBER PROCEDURE PRINT_ME</PRE
></BLOCKQUOTE
><P
CLASS="para"
>Although the formatting could be improved, this is much easier than SELECTing the equivalent information from the data dictionary. </P
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="SQL2-CH-18-SECT-6.3"
>18.6.3 Schema Evolution</A
></H3
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="ch18-idx-8606-1"
></A
> <A
CLASS="indexterm"
NAME="ch18-idx-8606-2"
></A
>Let's say that you have created an object type and you need to make a change to its definition. What do you do? The answer is that <EM
CLASS="emphasis"
>it</EM
> <EM
CLASS="emphasis"
>depends</EM
>&nbsp;-- on whether you have used the type, and on what type of change you want to make. Precious few modifications are easy; the rest will probably age you prematurely. Consider the implications of where you have used the type: </P
><UL
CLASS="itemizedlist"
><LI
CLASS="listitem"
><P
CLASS="para"
><EM
CLASS="emphasis"
>Type has no dependencies</EM
>. Using CREATE OR REPLACE, you can change the object type to you heart's content. Or drop and recreate it; who cares? Life is good. </P
></LI
><LI
CLASS="listitem"
><P
CLASS="para"
><EM
CLASS="emphasis"
>Type is used only in PL/SQL modules</EM
>. In this case, since you don't have to rebuild any dependent tables, life is still easy. Oracle will automatically recompile dependent PL/SQL modules the next time they are called. </P
></LI
><LI
CLASS="listitem"
><P
CLASS="para"
><EM
CLASS="emphasis"
>Type is used in one or more tables</EM
>. Consider what would be a simple change to a relational table: adding a column. If you try to add a column to an object table, you get an "ORA-22856 cannot add columns to object tables." The "Action" for this message says we need to "Create a new type with additional attributes, and use the new type to create an object table. The new object table will have the desired columns." Your frustrations are beginning. </P
></LI
></UL
><P
CLASS="para"
>OK, if you want to add an attribute, you're out of luck. What about methods? Oracle8.0 does include an ALTER TYPE statement that allows you to recompile an object specification or body. It also allows you to add new methods. It is extremely limited, however; it does not allow you to add or remove attributes, nor does it allow you to modify the quantity or datatypes of existing method arguments. The basic syntax is: </P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>Form I
ALTER TYPE [ BODY ] type_name COMPILE [ SPECIFICATION | BODY ];</PRE
></BLOCKQUOTE
><P
CLASS="para"
>which does not solve our problem, or:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>Form II
ALTER TYPE [ BODY ] type_name REPLACE
   &lt;the entire new type or body definition&gt;;</PRE
></BLOCKQUOTE
><P
CLASS="para"
>Using Form II, we can, in fact, add an entirely new method to an object type, even if there are dependencies on the type. </P
><P
CLASS="para"
>In the case of changing a method's specification (or deleting a method) in object type Foo_t which is implemented in table foo, you would think that export/import would work, using something like: </P
><OL
CLASS="orderedlist"
><LI
CLASS="listitem"
><P
CLASS="para"
>Export the foo table.</P
></LI
><LI
CLASS="listitem"
><P
CLASS="para"
>Drop the foo table.</P
></LI
><LI
CLASS="listitem"
><P
CLASS="para"
>CREATE OR REPLACE TYPE Foo_t with the new definition.</P
></LI
><LI
CLASS="listitem"
><P
CLASS="para"
>Import the foo table.</P
></LI
></OL
><P
CLASS="para"
>But alas, it doesn't work, because when you CREATE OR REPLACE the type, it actually assigns a new OID to the type, and the import fails with IMP-00063 when it sees that the OID is different. Huh? What do you mean, "assigns a new OID to the type?" For reasons apparently having to do with facilitating certain operations in the Oracle Call Interface (OCI), object types themselves have an OID. See for yourself&nbsp;-- you can easily retrieve them from the USER_TYPES data dictionary view. </P
><P
CLASS="para"
>Neither can you "CREATE new_object_table AS SELECT ... FROM old_object_table." Even if you could, the REFs wouldn't match up to the OIDs of the new table. </P
><P
CLASS="para"
>It's even worse if you want to make any serious modifications to an object type and you have a dependency on the type from other types or tables. You cannot drop and recreate a parent object table unless you drop the child object types and object tables first. So maybe you could: </P
><OL
CLASS="orderedlist"
><LI
CLASS="listitem"
><P
CLASS="para"
>Create new object types and tables.</P
></LI
><LI
CLASS="listitem"
><P
CLASS="para"
>Somehow populate new from the old.</P
></LI
><LI
CLASS="listitem"
><P
CLASS="para"
>Drop the old object tables and types.</P
></LI
><LI
CLASS="listitem"
><P
CLASS="para"
>Rename the new types and object tables to the old names.</P
></LI
></OL
><P
CLASS="para"
>It is not obvious to me how to do the second step in a way that will preserve REFs to the type. The only way I see to do it in a guaranteed fashion is to rely on relational primary and foreign keys for tuple identification. That is, your schema will include not only REFs but also equivalent foreign keys. Then, when your OIDs change because you have rebuilt an object table, you can update all the REFs to that object table using foreign key values. Not a pretty picture. </P
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="AUTOID-17230"
></A
><A
CLASS="indexterm"
NAME="AUTOID-17233"
></A
>Also, you cannot rename object types (number 4 above); attempting to do so fails with "ORA-03001: unimplemented feature." </P
><BLOCKQUOTE
CLASS="warning"
><P
CLASS="para"
><STRONG
>WARNING:</STRONG
> Requiring the dropping of <EM
CLASS="emphasis"
>all</EM
> dependent types and objects before altering a type is not going to endear the Oracle objects option to the average database administrator (or to anyone else, for that matter). Object schema evolution is a significant area where Oracle could make a lot of improvements. <A
CLASS="indexterm"
NAME="AUTOID-17239"
></A
> <A
CLASS="indexterm"
NAME="AUTOID-17240"
></A
></P
></BLOCKQUOTE
></DIV
></DIV
><DIV
CLASS="htmlnav"
><P
></P
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch18_05.htm#SQL2-CH-18-SECT-5.3"
TITLE="18.5 Modifying Persistent Objects"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 18.5 Modifying Persistent Objects"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="book"
HREF="index.htm"
TITLE="Oracle PL/SQL Programming, 2nd Edition"
><IMG
SRC="../gifs/txthome.gif"
ALT="Oracle PL/SQL Programming, 2nd Edition"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch18_07.htm"
TITLE="18.7 Making the Objects Option Work"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 18.7 Making the Objects Option Work"
BORDER="0"></A
></TD
></TR
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
>18.5 Modifying Persistent Objects</TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="index"
HREF="index/idx_0.htm"
TITLE="Book Index"
><IMG
SRC="../gifs/index.gif"
ALT="Book Index"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
>18.7 Making the Objects Option Work</TD
></TR
></TABLE
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"></DIV
><IMG SRC="../gifs/smnavbar.gif"
USEMAP="#map"
BORDER="0"
ALT="The Oracle Library Navigation">

<P><font size="-1">
<a href="../copyrght.htm#copy">Copyright (c) 2000</a> O'Reilly &amp; Associates. All rights reserved.
</font></P>

<MAP NAME="map">

<AREA SHAPE="RECT"
COORDS="0,0,35,30"
HREF="../index.htm"
ALT="Library Home">

<AREA SHAPE="RECT"
COORDS="40,0,95,30"
HREF="index.htm"
ALT="Oracle PL/SQL Programming, 2nd. Ed.">

<AREA SHAPE="RECT"
COORDS="100,0,200,30"
HREF="../guide8i/index.htm"
ALT="Guide to Oracle 8i Features">

<AREA SHAPE="RECT"
COORDS="205,0,245,30"
HREF="../bipack/index.htm"
ALT="Oracle Built-in Packages">

<AREA SHAPE="RECT"
COORDS="250,0,320,30"
HREF="../advprog/index.htm"
ALT="Advanced PL/SQL Programming with Packages">

<AREA SHAPE="RECT"
COORDS="325,0,420,30"
HREF="../webapp/index.htm"
ALT="Oracle Web Applications">

<AREA SHAPE="RECT"
COORDS="425,0,490,30"
HREF="../langpkt/index.htm"
ALT="Oracle PL/SQL Language Pocket Reference">

<AREA SHAPE="RECT"
COORDS="495,0,570,30"
HREF="../bipkt/index.htm"
ALT="Oracle PL/SQL Built-ins Pocket Reference">
</MAP>

</BODY
>
<!-- Mirrored from liso.cs.pusan.ac.kr by HTTrack Website Copier/3.x [XR&CO'2001] -->
</HTML
>
