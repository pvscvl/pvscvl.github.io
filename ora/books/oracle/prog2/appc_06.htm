<HTML
><HEAD
><TITLE
>[Appendix C] C.6 DBMS_LOB (PL/SQL8 Only)</TITLE
><META
NAME="DC.Creator"
CONTENT="Steven Feuerstein &amp; Bill Pribyl"><META
NAME="DC.Date"
CONTENT="2000-04-29T19:14:30Z"><META
NAME="DC.Format"
CONTENT="text/html"
SCHEME="MIME"><META
NAME="DC.Identifier"
CONTENT="O'Reilly and Associates CD-ROM-1-56592-335-9E"><META
NAME="DC.Language"
CONTENT="en-US"><META
NAME="DC.Publisher"
CONTENT="O'Reilly &amp; Associates, Inc."><META
NAME="DC.Source"
CONTENT="1-56592-335-9E"
SCHEME="ISBN"><META
NAME="DC.Subject.Keyword"
CONTENT="Oracle PL/SQL"><META
NAME="DC.Title"
CONTENT="Oracle PL/SQL Programming, 2nd Edition"><META
NAME="DC.Type"
CONTENT="Text.Monograph"><META
NAME="generator"
CONTENT="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><LINK
REL="stylesheet"
TYPE="text/css"
HREF="../style/style1.css"><LINK
REV="made"
HREF="mailto:online-books@oreilly.com"
TITLE="Online Books Comments"><LINK
REL="up"
HREF="appc_01.htm"
TITLE="C. Built-In Packages"><LINK
REL="prev"
HREF="appc_05.htm#SQL2-AP-C-SECT-5.0.2"
TITLE="C.5 DBMS_  JOB"><LINK
REL="next"
HREF="appc_07.htm#SQL2-AP-C-SECT-7.0.1"
TITLE="C.7 DBMS_LOCK"></HEAD
><BODY
><DIV
CLASS="htmlnav"
><H1
><IMG
SRC="gifs/smbanner.gif"
ALT="Oracle PL/SQL Programming, 2nd Edition"
USEMAP="#srchmap"
BORDER="0"></H1
><MAP
NAME="srchmap"
><AREA
SHAPE="RECT"
COORDS="0,0,466,65"
HREF="index.htm"
ALT="Oracle PL/SQL Programming, 2nd Edition"><AREA
SHAPE="RECT"
COORDS="467,0,514,18"
HREF="jobjects/fsearch.htm"
ALT="Search this book"></MAP
><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="appc_05.htm#SQL2-AP-C-SECT-5.0.2"
TITLE="C.5 DBMS_  JOB"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: C.5 DBMS_  JOB"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><SPAN
CLASS="NAVTITLE"
><A
CLASS="appendix"
REL="up"
HREF="appc_01.htm"
TITLE="C. Built-In Packages"
>Appendix C<BR>Built-In Packages</A
></SPAN
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="appc_07.htm#SQL2-AP-C-SECT-7.0.1"
TITLE="C.7 DBMS_LOCK"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: C.7 DBMS_LOCK"
BORDER="0"></A
></TD
></TR
></TABLE
>&nbsp;<HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"></DIV
><DIV
CLASS="sect1"
><H2
CLASS="sect1"
><A
CLASS="title"
NAME="SQL2-AP-C-SECT-6"
>C.6 DBMS_LOB (PL/SQL8 Only)</A
></H2
><P
CLASS="para"
>Use the <A
CLASS="indexterm"
NAME="appc-idx-998510-1"
></A
><A
CLASS="indexterm"
NAME="appc-idx-998510-2"
></A
>DBMS_LOB package to manipulate LOBs (large objects) from within a PL/SQL program and SQL statements. With DBMS_LOB you can read and modify BLOBs (binary LOBs), CLOBs (single-byte character data), and NCLOBs (fixed-width single-byte or multibyte character data), and you can perform read-only operations on BFILEs (file-based LOBs). </P
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="appc-32-fm2xml"
>C.6.1 The <A
CLASS="indexterm"
NAME="AUTOID-24204"
></A
> APPEND procedure </A
></H3
><P
CLASS="para"
>Call the APPEND procedure to append the contents of a source LOB to a destination LOB. The specifications are: </P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>PROCEDURE DBMS_LOB.APPEND
   (dest_lob IN OUT BLOB,
    src_lob IN BLOB);

PROCEDURE DBMS_LOB.APPEND
   (dest_lob IN OUT CLOB CHARACTER SET ANY_CS,
    src_lob IN CLOB CHARACTER SET DEST_LOB%CHARSET);</PRE
></BLOCKQUOTE
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="appc-33-fm2xml"
>C.6.2 The <A
CLASS="indexterm"
NAME="AUTOID-24210"
></A
> COMPARE function</A
></H3
><P
CLASS="para"
>Use the compare function to compare two LOBs in their entirety, or compare just parts of two LOBs. The specifications are: </P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>FUNCTION DBMS_LOB.COMPARE
   (lob_1 IN BLOB,
    lob_2 IN BLOB,
    amount IN INTEGER := 4294967295,
    offset_1 IN INTEGER := 1,
    offset_2 IN INTEGER := 1)
RETURN INTEGER;

FUNCTION DBMS_LOB.COMPARE
   (lob_1 IN CLOB CHARACTER SET ANY_CS,
    lob_2 IN CLOB CHARACTER SET LOB_1%CHARSET,
    amount IN INTEGER := 4294967295,
    offset_1 IN INTEGER := 1,
    offset_2 IN INTEGER := 1)
RETURN INTEGER;

FUNCTION DBMS_LOB.COMPARE
   (file_1 IN BFILE,
    file_2 IN BFILE,
    amount IN INTEGER,
    offset_1 IN INTEGER := 1,
    offset_2 IN INTEGER := 1)
RETURN INTEGER;</PRE
></BLOCKQUOTE
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="appc-34-fm2xml"
>C.6.3 The <A
CLASS="indexterm"
NAME="AUTOID-24216"
></A
> COPY procedure</A
></H3
><P
CLASS="para"
>The copy procedure copies all or part of a source LOB to a destination LOB. The specifications are: </P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>PROCEDURE DBMS_LOB.COPY
   (dest_lob IN OUT BLOB,
    src_lob IN BLOB,
    amount IN OUT INTEGER,
    dest_offset IN INTEGER := 1,
    src_offset IN INTEGER := 1);

PROCEDURE DBMS_LOB.COPY
   (dest_lob IN OUT CLOB CHARACTER SET ANY_CS,
    src_lob IN CLOB CHARACTER SET DEST_LOB%CHARSET,
    amount IN OUT INTEGER,
    dest_offset IN INTEGER := 1,
    src_offset IN INTEGER := 1);</PRE
></BLOCKQUOTE
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="appc-35-fm2xml"
>C.6.4 The <A
CLASS="indexterm"
NAME="AUTOID-24222"
></A
> ERASE procedure</A
></H3
><P
CLASS="para"
>The erase procedure erases an entire LOB or part of a LOB. The specifications are: </P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>PROCEDURE DBMS_LOB.ERASE
   (lob_loc IN OUT BLOB,
    amount IN OUT INTEGER,
    offset IN INTEGER := 1);

PROCEDURE DBMS_LOB.ERASE
   (lob_loc IN OUT CLOB CHARACTER SET ANY_CS,
    amount IN OUT INTEGER,
    offset IN INTEGER := 1);</PRE
></BLOCKQUOTE
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="appc-36-fm2xml"
>C.6.5 The <A
CLASS="indexterm"
NAME="AUTOID-24228"
></A
> FILECLOSE procedure</A
></H3
><P
CLASS="para"
>Call the fileclose procedure to close a BFILE which has previously been opened in your session or PL/SQL block. The specification is: </P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>PROCEDURE DBMS_LOB.FILECLOSE (file_loc IN OUT BFILE);</PRE
></BLOCKQUOTE
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="appc-37-fm2xml"
>C.6.6 The <A
CLASS="indexterm"
NAME="AUTOID-24234"
></A
> FILECLOSEALL procedure</A
></H3
><P
CLASS="para"
>The filecloseall procedure closes all BFILEs which have previously been opened in your session. The specification is: </P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>PROCEDURE DBMS_LOB.FILECLOSEALL;</PRE
></BLOCKQUOTE
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="appc-38-fm2xml"
>C.6.7 The <A
CLASS="indexterm"
NAME="AUTOID-24240"
></A
> FILEEXISTS function</A
></H3
><P
CLASS="para"
>The fileexists function returns 1 if the file you have specified via a BFILE locator exists. The specification is: </P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>FUNCTION DBMS_LOB.FILEEXISTS (file_loc IN BFILE) RETURN INTEGER;</PRE
></BLOCKQUOTE
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="appc-39-fm2xml"
>C.6.8 The <A
CLASS="indexterm"
NAME="AUTOID-24246"
></A
> FILEGETNAME procedure</A
></H3
><P
CLASS="para"
>Use the filegetname procedure to translate a BFILE locator into its directory alias and filename components. The specification is: </P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>PROCEDURE DBMS_LOB.FILEGETNAME
   (file_loc IN BFILE,
    dir_alias OUT VARCHAR2,
    filename OUT VARCHAR2);</PRE
></BLOCKQUOTE
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="appc-40-fm2xml"
>C.6.9 The <A
CLASS="indexterm"
NAME="AUTOID-24252"
></A
> FILEISOPEN function </A
></H3
><P
CLASS="para"
>The fileisopen function returns 1 if the BFILE is already open. The specification is: </P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>FUNCTION DBMS_LOB.FILEISOPEN (file_loc IN BFILE) RETURN INTEGER;</PRE
></BLOCKQUOTE
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="appc-41-fm2xml"
>C.6.10 The <A
CLASS="indexterm"
NAME="AUTOID-24258"
></A
> FILEOPEN procedure</A
></H3
><P
CLASS="para"
>The fileopen procedure opens a BFILE with the specified mode. The specification is: </P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>PROCEDURE DBMS_LOB.FILEOPEN
   (file_loc IN OUT BFILE,
    open_mode IN BINARY_INTEGER := FILE_READONLY);</PRE
></BLOCKQUOTE
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="appc-42-fm2xml"
>C.6.11 The <A
CLASS="indexterm"
NAME="AUTOID-24264"
></A
> GETLENGTH function</A
></H3
><P
CLASS="para"
>Use the getlength function to return the length of the specified LOB in bytes or characters, depending on the type of LOB. The specifications are: </P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>FUNCTION DBMS_LOB.GETLENGTH (lob_loc IN BLOB) RETURN INTEGER;

FUNCTION DBMS_LOB.GETLENGTH(lob_loc IN CLOB CHARACTER SET ANY_CS)
RETURN INTEGER;

FUNCTION DBMS_LOB.GETLENGTH (file_loc IN BFILE) RETURN INTEGER;</PRE
></BLOCKQUOTE
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="appc-43-fm2xml"
>C.6.12 The <A
CLASS="indexterm"
NAME="AUTOID-24270"
></A
> INSTR function</A
></H3
><P
CLASS="para"
>The instr function returns the matching location of the nth occurrence of the specified pattern in the LOB. The specifications are: </P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>FUNCTION DBMS_LOB.INSTR
   (lob_loc IN BLOB,
    pattern IN RAW,
    offset IN INTEGER := 1,
    nth IN INTEGER := 1)
RETURN INTEGER;

FUNCTION DBMS_LOB.INSTR
   (lob_loc IN CLOB CHARACTER SET ANY_CS,
    pattern IN VARCHAR2 CHARACTER SET LOB_LOC%CHARSET,
    offset IN INTEGER := 1,
    nth IN INTEGER := 1)
RETURN INTEGER;

FUNCTION DBMS_LOB.INSTR
   (file_loc IN BFILE,
    pattern IN RAW,
    offset IN INTEGER := 1,
    nth IN INTEGER := 1)
RETURN INTEGER;</PRE
></BLOCKQUOTE
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="appc-44-fm2xml"
>C.6.13 The <A
CLASS="indexterm"
NAME="AUTOID-24276"
></A
> READ procedure</A
></H3
><P
CLASS="para"
>Call the read procedure to read a portion of a LOB into a buffer variable. The specifications are: </P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>PROCEDURE DBMS_LOB.READ
   (lob_loc IN BLOB,
    amount IN OUT BINARY_INTEGER,
    offset IN INTEGER,
    buffer OUT RAW);

PROCEDURE DBMS_LOB.READ
   (lob_loc IN CLOB CHARACTER SET ANY_CS,
    amount IN OUT BINARY_INTEGER,
    offset IN INTEGER,
    buffer OUT VARCHAR2 CHARACTER SET LOB_LOC%CHARSET);

PROCEDURE DBMS_LOB.READ
   (file_loc IN BFILE,
    amount IN OUT BINARY_INTEGER,
    offset IN INTEGER,
    buffer OUT RAW);</PRE
></BLOCKQUOTE
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="appc-45-fm2xml"
>C.6.14 The <A
CLASS="indexterm"
NAME="AUTOID-24282"
></A
> SUBSTR function</A
></H3
><P
CLASS="para"
>The substr function returns the specified number of bytes or characters from a LOB. The specifications are: </P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>FUNCTION DBMS_LOB.SUBSTR
   (lob_loc IN BLOB,
    amount IN INTEGER := 32767,
    offset IN INTEGER := 1)
RETURN RAW;

FUNCTION DBMS_LOB.SUBSTR
   (lob_loc IN CLOB CHARACTER SET ANY_CS,
    amount IN INTEGER := 32767,
    offset IN INTEGER := 1)
RETURN VARCHAR2;

FUNCTION DBMS_LOB.SUBSTR
   (file_loc IN BFILE,
    amount IN INTEGER := 32767,
    offset IN INTEGER := 1)
RETURN RAW;</PRE
></BLOCKQUOTE
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="appc-46-fm2xml"
>C.6.15 The <A
CLASS="indexterm"
NAME="AUTOID-24288"
></A
> TRIM procedure</A
></H3
><P
CLASS="para"
>Use the trim procedure to trim the LOB value to the length you specify. The specifications are: </P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>PROCEDURE DBMS_LOB.TRIM
   (lob_loc IN OUT BLOB,
    newlen IN INTEGER);

PROCEDURE DBMS_LOB.TRIM
   (lob_loc IN OUT CLOB CHARACTER SET ANY_CS,
    newlen IN INTEGER);</PRE
></BLOCKQUOTE
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="appc-47-fm2xml"
>C.6.16 The <A
CLASS="indexterm"
NAME="AUTOID-24294"
></A
> WRITE procedure</A
></H3
><P
CLASS="para"
>Call the write procedure to write a specified number of bytes or characters from a buffer variable into a LOB at a specified position. The specifications are: </P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>PROCEDURE DBMS_LOB.WRITE
   (lob_loc IN OUT BLOB,
    amount IN OUT BINARY_INTEGER,
    offset IN INTEGER,
    buffer IN RAW);

PROCEDURE DBMS_LOB.WRITE
   (lob_loc IN OUT CLOB CHARACTER SET ANY_CS,
    amount IN OUT BINARY_INTEGER,
    offset IN INTEGER,
    buffer IN VARCHAR2 CHARACTER SET LOB_LOC%CHARSET);<A
CLASS="indexterm"
NAME="AUTOID-24298"
></A
>
<A
CLASS="indexterm"
NAME="AUTOID-24299"
></A
></PRE
></BLOCKQUOTE
></DIV
></DIV
><DIV
CLASS="htmlnav"
><P
></P
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="appc_05.htm#SQL2-AP-C-SECT-5.0.2"
TITLE="C.5 DBMS_  JOB"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: C.5 DBMS_  JOB"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="book"
HREF="index.htm"
TITLE="Oracle PL/SQL Programming, 2nd Edition"
><IMG
SRC="../gifs/txthome.gif"
ALT="Oracle PL/SQL Programming, 2nd Edition"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="appc_07.htm#SQL2-AP-C-SECT-7.0.1"
TITLE="C.7 DBMS_LOCK"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: C.7 DBMS_LOCK"
BORDER="0"></A
></TD
></TR
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
>C.5 DBMS_  JOB</TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="index"
HREF="index/idx_0.htm"
TITLE="Book Index"
><IMG
SRC="../gifs/index.gif"
ALT="Book Index"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
>C.7 DBMS_LOCK</TD
></TR
></TABLE
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"></DIV
><IMG SRC="../gifs/smnavbar.gif"
USEMAP="#map"
BORDER="0"
ALT="The Oracle Library Navigation">

<P><font size="-1">
<a href="../copyrght.htm#copy">Copyright (c) 2000</a> O'Reilly &amp; Associates. All rights reserved.
</font></P>

<MAP NAME="map">

<AREA SHAPE="RECT"
COORDS="0,0,35,30"
HREF="../index.htm"
ALT="Library Home">

<AREA SHAPE="RECT"
COORDS="40,0,95,30"
HREF="index.htm"
ALT="Oracle PL/SQL Programming, 2nd. Ed.">

<AREA SHAPE="RECT"
COORDS="100,0,200,30"
HREF="../guide8i/index.htm"
ALT="Guide to Oracle 8i Features">

<AREA SHAPE="RECT"
COORDS="205,0,245,30"
HREF="../bipack/index.htm"
ALT="Oracle Built-in Packages">

<AREA SHAPE="RECT"
COORDS="250,0,320,30"
HREF="../advprog/index.htm"
ALT="Advanced PL/SQL Programming with Packages">

<AREA SHAPE="RECT"
COORDS="325,0,420,30"
HREF="../webapp/index.htm"
ALT="Oracle Web Applications">

<AREA SHAPE="RECT"
COORDS="425,0,490,30"
HREF="../langpkt/index.htm"
ALT="Oracle PL/SQL Language Pocket Reference">

<AREA SHAPE="RECT"
COORDS="495,0,570,30"
HREF="../bipkt/index.htm"
ALT="Oracle PL/SQL Built-ins Pocket Reference">
</MAP>

</BODY
>
<!-- Mirrored from liso.cs.pusan.ac.kr by HTTrack Website Copier/3.x [XR&CO'2001] -->
</HTML
>
