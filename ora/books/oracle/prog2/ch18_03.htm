<HTML
><HEAD
><TITLE
>[Chapter 18] 18.3 Syntax for Creating Object Types</TITLE
><META
NAME="DC.Creator"
CONTENT="Steven Feuerstein &amp; Bill Pribyl"><META
NAME="DC.Date"
CONTENT="2000-04-29T19:06:52Z"><META
NAME="DC.Format"
CONTENT="text/html"
SCHEME="MIME"><META
NAME="DC.Identifier"
CONTENT="O'Reilly and Associates CD-ROM-1-56592-335-9E"><META
NAME="DC.Language"
CONTENT="en-US"><META
NAME="DC.Publisher"
CONTENT="O'Reilly &amp; Associates, Inc."><META
NAME="DC.Source"
CONTENT="1-56592-335-9E"
SCHEME="ISBN"><META
NAME="DC.Subject.Keyword"
CONTENT="Oracle PL/SQL"><META
NAME="DC.Title"
CONTENT="Oracle PL/SQL Programming, 2nd Edition"><META
NAME="DC.Type"
CONTENT="Text.Monograph"><META
NAME="generator"
CONTENT="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><LINK
REL="stylesheet"
TYPE="text/css"
HREF="../style/style1.css"><LINK
REV="made"
HREF="mailto:online-books@oreilly.com"
TITLE="Online Books Comments"><LINK
REL="up"
HREF="ch18_01.htm"
TITLE="18. Object Types"><LINK
REL="prev"
HREF="ch18_02.htm#SQL2-CH-18-SECT-2.3"
TITLE="18.2 Oracle Objects Example"><LINK
REL="next"
HREF="ch18_04.htm#SQL2-CH-18-SECT-4.1.3"
TITLE="18.4 Manipulating Objects in PL/SQL and SQL"></HEAD
><BODY
><DIV
CLASS="htmlnav"
><H1
><IMG
SRC="gifs/smbanner.gif"
ALT="Oracle PL/SQL Programming, 2nd Edition"
USEMAP="#srchmap"
BORDER="0"></H1
><MAP
NAME="srchmap"
><AREA
SHAPE="RECT"
COORDS="0,0,466,65"
HREF="index.htm"
ALT="Oracle PL/SQL Programming, 2nd Edition"><AREA
SHAPE="RECT"
COORDS="467,0,514,18"
HREF="jobjects/fsearch.htm"
ALT="Search this book"></MAP
><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch18_02.htm#SQL2-CH-18-SECT-2.3"
TITLE="18.2 Oracle Objects Example"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 18.2 Oracle Objects Example"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><SPAN
CLASS="NAVTITLE"
><A
CLASS="chapter"
REL="up"
HREF="ch18_01.htm"
TITLE="18. Object Types"
>Chapter 18<BR>Object Types</A
></SPAN
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch18_04.htm#SQL2-CH-18-SECT-4.1.3"
TITLE="18.4 Manipulating Objects in PL/SQL and SQL"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 18.4 Manipulating Objects in PL/SQL and SQL"
BORDER="0"></A
></TD
></TR
></TABLE
>&nbsp;<HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"></DIV
><DIV
CLASS="sect1"
><H2
CLASS="sect1"
><A
CLASS="title"
NAME="SQL2-CH-18-SECT-3"
>18.3 Syntax for Creating Object Types</A
></H2
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="ch18-idx-8467-1"
></A
>This section explains the syntax for CREATE TYPE, CREATE TYPE BODY, and some of the other statements you will use when working with Oracle objects. </P
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="SQL2-CH-18-SECT-3.1"
>18.3.1 About Object Types</A
></H3
><P
CLASS="para"
>A given object type can have all of the following:</P
><UL
CLASS="itemizedlist"
><LI
CLASS="listitem"
><P
CLASS="para"
>One default constructor method</P
></LI
><LI
CLASS="listitem"
><P
CLASS="para"
>Zero or one comparison methods</P
></LI
><LI
CLASS="listitem"
><P
CLASS="para"
>Any number of member methods</P
></LI
></UL
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="AUTOID-16216"
></A
> <A
CLASS="indexterm"
NAME="AUTOID-16218"
></A
> <A
CLASS="indexterm"
NAME="AUTOID-16221"
></A
> <A
CLASS="indexterm"
NAME="AUTOID-16224"
></A
>The default constructor, supplied automatically when you create an object type, allows you to create an object of the corresponding type. You have no direct control over this function (aside from how you have defined the attributes of the object type). The constructor is the only type of method that does not operate on an existing object. </P
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="AUTOID-16228"
></A
> Comparison methods are either MAP or ORDER methods (see <A
CLASS="xref"
HREF="ch18_03.htm#SQL2-CH-18-SECT-3.6.1"
>Section 18.3.6, "Comparing Objects"</A
> later in this chapter). They allow you to establish rules so that SQL statements and PL/SQL programs can order, group, and otherwise compare object instances. Comparison methods are always functions. </P
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="AUTOID-16232"
></A
>Member methods are either member functions or member procedures. These are where programmers define the bulk of the object's behavior. </P
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="SQL2-CH-18-SECT-3.2"
>18.3.2 CREATE TYPE and DROP TYPE: Creating and Dropping Types</A
></H3
><P
CLASS="para"
>The <A
CLASS="indexterm"
NAME="ch18-idx-8472-1"
></A
>CREATE TYPE statement has the following general format: </P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>CREATE [ OR REPLACE ] TYPE &lt;type name&gt; AS OBJECT
   &lt;attribute name&gt; datatype, ...,
   MEMBER PROCEDURE | FUNCTION &lt;procedure or function spec&gt;, ...,
   [ MAP | ORDER MEMBER FUNCTION &lt;comparison function spec&gt;, ... ]
   [ PRAGMA RESTRICT_REFERENCES (&lt;what to restrict&gt;, restrictions) ]
);</PRE
></BLOCKQUOTE
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="ch18-idx-8473-1"
></A
>As you would expect, you can drop a type using a DROP statement as follows: </P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>DROP TYPE &lt;type name&gt; [ FORCE ] ;</PRE
></BLOCKQUOTE
><P
CLASS="para"
>Parameters have the following meanings:</P
><DL
CLASS="variablelist"
><DT
CLASS="term"
>OR REPLACE</DT
><DD
CLASS="listitem"
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="AUTOID-16250"
></A
>Tells Oracle that you want to rebuild the type if it should happen to already exist. This will preserve grants. (See "Schema Evolution" later in the chapter for information about the effect this option has on the object type's metadata.) </P
></DD
><DT
CLASS="term"
>type name</DT
><DD
CLASS="listitem"
><P
CLASS="para"
>A legal Oracle identifier that isn't already in use by any other Oracle database object such as another type, table, or package. May be expressed in "schema dot" notation (e.g., SCOTT.foo). </P
></DD
><DT
CLASS="term"
>attribute name</DT
><DD
CLASS="listitem"
><P
CLASS="para"
>A legal PL/SQL identifier for the attribute.</P
></DD
><DT
CLASS="term"
>datatype</DT
><DD
CLASS="listitem"
><P
CLASS="para"
>Any legal Oracle datatype <EM
CLASS="emphasis"
>except</EM
> LONG, LONG RAW, NCHAR, NCLOB, NVARCHAR2, ROWID, BINARY_INTEGER, BOOLEAN, PLS_INTEGER, RECORD, REF CURSOR, %TYPE, %ROWTYPE, or types that exist only within packages. </P
></DD
><DT
CLASS="term"
>comparison function</DT
><DD
CLASS="listitem"
><P
CLASS="para"
>Defines a function that allows comparison of object values.</P
></DD
><DT
CLASS="term"
>what to restrict</DT
><DD
CLASS="listitem"
><P
CLASS="para"
>This is either the name of the function or procedure, or the keyword DEFAULT. Using DEFAULT tells Oracle that <EM
CLASS="emphasis"
>all </EM
>member functions and procedures in the object type will have the designated restrictions, without having to list each one in its own RESTRICT_REFERENCES pragma. </P
></DD
><DT
CLASS="term"
>restrictions</DT
><DD
CLASS="listitem"
><P
CLASS="para"
>One or more of the following: RNDS, WNDS, RNPS, and WNPS (see <A
CLASS="xref"
HREF="ch17_01.htm"
>Chapter 17</A
>). </P
></DD
><DT
CLASS="term"
>FORCE++</DT
><DD
CLASS="listitem"
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="AUTOID-16283"
></A
>Tells Oracle that you want to drop a type even if there are other objects with dependencies on it. Even if you use FORCE, you can only drop a type if it has not been implemented in a table; you must first drop the table(s) before dropping the type. </P
></DD
></DL
><P
CLASS="para"
>Notice that the syntax for creating the specification is merely a comma-separated list of attributes and methods. There are no semicolons as you would find in a package specification. </P
><P
CLASS="para"
>You cannot impose NOT NULL or DEFAULT constraints at the attribute level. These constraints can, however, be applied to scalar attributes if you create an object table based on type. The syntax is: </P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>CREATE TABLE &lt;table name&gt; OF &lt;object type name&gt;
   (&lt;column constraint&gt;, ... );</PRE
></BLOCKQUOTE
><P
CLASS="para"
>For example:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>CREATE TABLE foos OF Foo_t
   (bar NOT NULL);</PRE
></BLOCKQUOTE
><P
CLASS="para"
>or, if you wish to name a constraint:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>CREATE TABLE foos OF Foo_t
   (CONSTRAINT bar_not_null CHECK (bar IS NOT NULL));<A
CLASS="indexterm"
NAME="AUTOID-16292"
></A
>
<A
CLASS="indexterm"
NAME="AUTOID-16293"
></A
></PRE
></BLOCKQUOTE
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="SQL2-CH-18-SECT-3.3"
>18.3.3 CREATE TYPE BODY: Creating a Body</A
></H3
><P
CLASS="para"
>The syntax for the <A
CLASS="indexterm"
NAME="AUTOID-16297"
></A
>CREATE TYPE BODY statement is the following: </P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>CREATE [ OR REPLACE ] TYPE BODY &lt;type name&gt; AS | IS (
   MEMBER PROCEDURE | FUNCTION &lt;procedure or function body&gt;, ...,
   [ MAP | ORDER MEMBER FUNCTION &lt;comparison function body&gt; ]
END;</PRE
></BLOCKQUOTE
><P
CLASS="para"
>Strictly speaking, type bodies are optional; you need a body only if you have created any methods in the specification. Similar to the rules for package specifications and bodies, the methods declared in the specification must match one for one the methods implemented in the body. Methods can be overloaded (see <A
CLASS="xref"
HREF="ch15_01.htm"
>Chapter 15</A
>), and the standard rules about overloading apply. </P
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="SQL2-CH-18-SECT-3.4"
>18.3.4 Dot Notation</A
></H3
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="ch18-idx-8480-1"
></A
><A
CLASS="indexterm"
NAME="ch18-idx-8480-2"
></A
>Even if you don't use the object extensions to Oracle, dot notation can be confusing. In SQL, for example, you may have references such as basil.meals.calories, referring to a column called calories in a meals table owned by basil. Add in remote database references, and you might get something like basil.meals.calories@mktg.ny.acme.com. In PL/SQL Version 2 and up, dots are found in record datatypes, table datatype operators, packaged procedure or function references, and elsewhere. </P
><P
CLASS="para"
>In the objects option, there are at least two new opportunities to get confused with dots: object data structures and object methods. (And the discussion below ignores the fact that object names can be preceded by the schema name, as in schema_name.object_name.) </P
><DIV
CLASS="sect3"
><H4
CLASS="sect3"
><A
CLASS="title"
NAME="SQL2-CH-18-SECT-3.4.1"
>18.3.4.1 Dots in data structures</A
></H4
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="AUTOID-16314"
></A
>In a PL/SQL program, you can refer to object attributes with dot notation, as in object_name.attribute_name. For example, after declaring and initializing an object my_pet of type Pet_t, we can do this: </P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>IF my_pet<B
CLASS="emphasis.bold"
>.</B
>sex = 'M' THEN...</PRE
></BLOCKQUOTE
><P
CLASS="para"
>This variable means "the sex attribute of the object instance my_pet." </P
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="AUTOID-16321"
></A
>Referring to nested objects in PL/SQL using dot notation is almost intuitive, as long as you're using embedded objects (that is, the attribute is an object itself, not a REF to an object). </P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>CREATE OBJECT Pet_t (
   ...
   owner Person_t,     -- embedded object, not a REF
   ...);

DECLARE
   the_dalmatian Pet_t;
BEGIN
   ...
   IF <B
CLASS="emphasis.bold"
>the_dalmatian.owner.first_name</B
> = 'Persephone'
   THEN...</PRE
></BLOCKQUOTE
><P
CLASS="para"
>The IF test above simply checks whether the first name of the owner of the Dalmatian is Persephone. In SQL statements, you can also use dots to navigate the components of nested objects. Even when you have nested objects with REFs, SQL graciously allows you to navigate to the referenced object without actually doing a join: </P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>CREATE OBJECT Pet_t (
   ...
   owner_ref <B
CLASS="emphasis.bold"
>REF</B
> Person_t,
   ...);

CREATE TABLE pets of Pet_t;

SELECT name, p.<B
CLASS="emphasis.bold"
>owner_ref.first_name</B
>
  FROM pets p;</PRE
></BLOCKQUOTE
><P
CLASS="para"
>That's a pretty neat trick. No ugly join clause, just an intuitive "do the right thing" call. It works for attributes and member functions that are defined with the appropriate RESTRICT_REFERENCES pragma. But what do we do in PL/SQL? Is this legal? </P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>DECLARE
   the_dalmatian Pet_t;
BEGIN
   SELECT VALUE(p) INTO the_dalmatian
     FROM pets p
    WHERE name = 'Cerberus';...
   IF <B
CLASS="emphasis.bold"
>the_dalmatian.owner_ref.first_name</B
> = 'Persephone'   -- invalid
   THEN... </PRE
></BLOCKQUOTE
><P
CLASS="para"
>It won't work! In Oracle 8.0.3, you cannot navigate the database through PL/SQL REF variables. Repeat this to yourself like a mantra. Dot notation doesn't help us in this case. For now, you can instead use DEREF, described in detail later on; a future version of Oracle will likely include a built-in package called UTL_REF that supports navigation in PL/SQL. </P
></DIV
><DIV
CLASS="sect3"
><H4
CLASS="sect3"
><A
CLASS="title"
NAME="SQL2-CH-18-SECT-3.4.2"
>18.3.4.2 Dots in method invocations</A
></H4
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="ch18-idx-8485-1"
></A
>When you invoke an object's member function or procedure, the dot syntax is straightforward, as in the following: </P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>object_instance_name.function_name (args)
object_instance_name.procedure_name (args)</PRE
></BLOCKQUOTE
><P
CLASS="para"
>If you want to use the output from one method as the input to another, you don't have to use a temporary variable. You can actually chain methods together with dots, as long as they are type compatible: </P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>object_name.function_name(args).function_name(args).procedure_name(args)</PRE
></BLOCKQUOTE
><P
CLASS="para"
>Before we can take a look at an example that chains our Pet_t methods, we'll want to change the specification of print_me. Instead of using the default IN OUT mode of the <A
CLASS="indexterm"
NAME="AUTOID-16345"
></A
>SELF parameter in a member procedure, we are going to make it an IN. That is, instead of: </P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>MEMBER PROCEDURE print_me</PRE
></BLOCKQUOTE
><P
CLASS="para"
>we want to use:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>MEMBER PROCEDURE print_me (SELF IN Pet_t)</PRE
></BLOCKQUOTE
><P
CLASS="para"
>(Remember that we have to make this change in both the object type specification and the object type body.) </P
><P
CLASS="para"
>Why did we make the change? The default IN OUT mode can only accept a SELF parameter that is writeable, and function return values are never writeable. But as an IN-only parameter, SELF can now accept a Pet_t object that is returned from one of the other functions. </P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>DECLARE
   the_pet Pet_t := Pet_t(1949,'Godzilla','BIG MONKEY','M',
      NULL,NULL,NULL);
BEGIN
   <B
CLASS="emphasis.bold"
>the_pet.set_tag_no(1948).set_photo('gz105.jpg').print_me();</B
>
END;</PRE
></BLOCKQUOTE
><P
CLASS="para"
>This means "change the tag number of the pet variable to 1948, change its photo to gz105.jpg, and print the result." If you give a little thought to the implications of this convenience feature, you'll realize that it could be valuable to define member functions which return the base object type, so that you can chain them together later. </P
><P
CLASS="para"
>Here are some rules about chaining:</P
><UL
CLASS="itemizedlist"
><LI
CLASS="listitem"
><P
CLASS="para"
>	Methods are invoked in order from left to right.</P
></LI
><LI
CLASS="listitem"
><P
CLASS="para"
>The return value of a chained method must be of the object type expected by the method to its right. </P
></LI
><LI
CLASS="listitem"
><P
CLASS="para"
>	A chained call can include at most a single procedure.</P
></LI
><LI
CLASS="listitem"
><P
CLASS="para"
>If your chained call includes a procedure, it must be the right-most method in the chain. </P
></LI
><LI
CLASS="listitem"
><P
CLASS="para"
>Be sure that you don't try to use a function's return value (which is read-only) as an IN OUT input to the next method in the chain. </P
></LI
></UL
></DIV
><DIV
CLASS="sect3"
><H4
CLASS="sect3"
><A
CLASS="title"
NAME="SQL2-CH-18-SECT-3.4.3"
>18.3.4.3 Attribute or method?</A
></H4
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="AUTOID-16371"
></A
>In PL/SQL, there is no automatic visual distinction between an object attribute and an object method unless the method has arguments. That is, in this code fragment: </P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>IF my_pet.whatever = 'a value' THEN...</PRE
></BLOCKQUOTE
><P
CLASS="para"
>we can't immediately determine if "whatever" is an attribute or a method! In some cases, this ambiguity could be a feature, since one day we might want to replace an attribute by a method of the same name. </P
><P
CLASS="para"
>If we want to make our code less mysterious, we can add a trailing empty parameter list to method calls which have no parameters, as in the following: </P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>my_pet.print_me();</PRE
></BLOCKQUOTE
><P
CLASS="para"
>The empty parentheses notation works for both member functions and member procedures. </P
><BLOCKQUOTE
CLASS="note"
><P
CLASS="para"
><STRONG
>NOTE:</STRONG
> The situation is different in SQL statements. If you call a member function without parameters in a SQL statement, you <EM
CLASS="emphasis"
>must</EM
> use empty parentheses notation. That is, if somefun is a function, don't do this:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>SELECT p.somefun FROM pets p;  -- invalid</PRE
></BLOCKQUOTE
><P
CLASS="para"
>The statement above fails with an ORA-00904, "invalid column name." The correct syntax is:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>SELECT p.somefun() FROM pets p;<A
CLASS="indexterm"
NAME="AUTOID-16385"
></A
>
<A
CLASS="indexterm"
NAME="AUTOID-16386"
></A
>
<A
CLASS="indexterm"
NAME="AUTOID-16387"
></A
></PRE
></BLOCKQUOTE
></BLOCKQUOTE
></DIV
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="SQL2-CH-18-SECT-3.5"
>18.3.5 SELF: The Implied Parameter</A
></H3
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="ch18-idx-8494-1"
></A
><A
CLASS="indexterm"
NAME="ch18-idx-8494-2"
></A
>Because a method can only be called within the context of a particular object instance, it always has an object of the corresponding type as a "parameter." This makes sense because the method will (almost) always need access to that object's attributes. This implied parameter is called SELF. By default, SELF is an IN parameter in member functions, and an IN OUT parameter in member procedures. </P
><P
CLASS="para"
>If we create an object to hold American Kennel Club papers:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>CREATE TYPE Akc_paper_t AS OBJECT(
   pet_ref REF Pet_t,
   issued_on DATE,
   contents BLOB);</PRE
></BLOCKQUOTE
><P
CLASS="para"
>the following member function specifications are equivalent:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>MEMBER FUNCTION print_me RETURN BOOLEAN;
MEMBER FUNCTION print_me (SELF Akc_paper_t) RETURN BOOLEAN;
MEMBER FUNCTION print_me (SELF IN Akc_paper_t) RETURN BOOLEAN;</PRE
></BLOCKQUOTE
><P
CLASS="para"
>Similarly, member procedure SELF parameters default to IN OUT, so the following are equivalent to one another: </P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>MEMBER PROCEDURE reissue;
MEMBER PROCEDURE reissue (SELF Akc_paper_t);
MEMBER PROCEDURE reissue (SELF IN OUT Akc_paper_t);</PRE
></BLOCKQUOTE
><P
CLASS="para"
>Within the object type body, you can refer to the SELF object explicitly; if you do not, PL/SQL name resolution rules will attempt to "do the right thing" with attribute references. In the example below, the name and issued_on attributes will resolve to attribute values even without the SELF parameter: </P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>CREATE TYPE BODY Akc_paper_t
AS
   MEMBER FUNCTION print_me RETURN BOOLEAN
   IS
   BEGIN
      DBMS_OUTPUT.PUT_LINE('Name     : ' || name);
      DBMS_OUTPUT.PUT_LINE('Issued On: ' || issued_on);
      ...
   END;
END;</PRE
></BLOCKQUOTE
><P
CLASS="para"
>The PUT_LINE statements above are equivalent to:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>      DBMS_OUTPUT.PUT_LINE('Name     : ' || <B
CLASS="emphasis.bold"
>SELF.</B
>name);
      DBMS_OUTPUT.PUT_LINE('Issued On: ' || <B
CLASS="emphasis.bold"
>SELF.</B
>issued_on);</PRE
></BLOCKQUOTE
><BLOCKQUOTE
CLASS="note"
><P
CLASS="para"
><STRONG
>NOTE:</STRONG
> Including SELF explicitly can improve program clarity.</P
></BLOCKQUOTE
><DIV
CLASS="sect3"
><H4
CLASS="sect3"
><A
CLASS="title"
NAME="SQL2-CH-18-SECT-3.5.1"
>18.3.5.1 Forward type definitions</A
></H4
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="AUTOID-16414"
></A
> <A
CLASS="indexterm"
NAME="AUTOID-16416"
></A
>What would you do if you wanted to define object types that depend on each other? Suppose that we want to implement the following relationships: </P
><UL
CLASS="itemizedlist"
><LI
CLASS="listitem"
><P
CLASS="para"
>Each pet has an owner of type Person_t; owners can have one or more pets. </P
></LI
><LI
CLASS="listitem"
><P
CLASS="para"
>A person can have one and only one <EM
CLASS="emphasis"
>favorite</EM
> pet.</P
></LI
></UL
><P
CLASS="para"
>The solution is a <EM
CLASS="emphasis"
>forward type definition</EM
>, similar to forward declarations in PL/SQL packages (see <A
CLASS="xref"
HREF="ch16_01.htm"
>Chapter 16</A
>). A forward definition allows you to declare your intention to create a type before you actually define it: </P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>/* Here is the incomplete type definition */
CREATE TYPE Person_t;

/* Now owner_ref can make a &quot;forward&quot; reference to the
|| Person_t type
*/
CREATE TYPE Pet_t AS OBJECT (
   tag_no INTEGER,
   owner_ref REF Person_t,
   ...the rest of the attributes and methods...
);
/* Now we can complete the type definition we started
|| earlier.
*/
CREATE TYPE Person_t AS OBJECT (
   name VARCHAR2(512),
   favorite_pet REF Pet_t,
   ...
);</PRE
></BLOCKQUOTE
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="AUTOID-16430"
></A
>If you want to create a recursive type, that is, one which refers to itself, a forward type definition is not required. For example, the Relative Pets organizational hierarchy might be implemented with recursion: </P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>CREATE TYPE organization_unit_t AS OBJECT (
   id NUMBER,
   parent REF organization_unit_t
      -- works fine without forward type def
);</PRE
></BLOCKQUOTE
></DIV
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="SQL2-CH-18-SECT-3.6"
>18.3.6 Comparing Objects</A
></H3
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="ch18-idx-8499-1"
></A
> <A
CLASS="indexterm"
NAME="ch18-idx-8499-2"
></A
> In the "old days," when Oracle offered only scalar datatypes, the semantics for comparing values were clearly defined. For example, columns of type NUMBER are easily compared, ordered, and grouped. Ditto for dates, and even character types, despite differences in national language sorting conventions. NULLs have always given us some grief, but we can't argue that the rules about them were vague. Things got a little more interesting in PL/SQL programs, because there we can have complex data structures such as records and table datatypes, which offer very few comparison features within the language. </P
><P
CLASS="para"
>Now, if we are taking an object-oriented approach, it would be useful if Oracle allowed statements such as the following: </P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>IF my_pet &gt; your_pet THEN ... -- my_pet and your_pet are objects

SELECT ... FROM pets ORDER BY owner;   -- owner is an object column</PRE
></BLOCKQUOTE
><P
CLASS="para"
>But it is not at all obvious how Oracle would deal with statements like these. Should it do some sort of "munching" average on the objects' attributes, or what? </P
><P
CLASS="para"
>In fact, Oracle allows us to formulate our own comparison rules for the object types we create. By defining a special MAP or ORDER member function when we define an object type, we can tell Oracle how to compare objects of that type in both PL/SQL and SQL expressions. </P
><DIV
CLASS="sect3"
><H4
CLASS="sect3"
><A
CLASS="title"
NAME="SQL2-CH-18-SECT-3.6.1"
>18.3.6.1 The MAP and ORDER methods</A
></H4
><P
CLASS="para"
>Let's say that we have created an object type Appointment_t that will help us in scheduling visits to the veterinary offices of Relative Pets. We might need an application to compare appointments: </P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>DECLARE
   my_appointment Appointment_t;
   your_appointment Appointment_t;
BEGIN
   ...initialize the appointments...

   <B
CLASS="emphasis.bold"
>IF my_appointment &gt; your_appointment THEN ...</B
>
</PRE
></BLOCKQUOTE
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="AUTOID-16453"
></A
>To perform this greater-than comparison, you'll need to define either a MAP or an ORDER function. MAP and ORDER methods are mutually exclusive; a given object type may have exactly one MAP method, or exactly one ORDER method (or zero comparison methods of either type). </P
><DIV
CLASS="sect4"
><H4
CLASS="sect4"
><A
CLASS="title"
NAME="SQL2-CH-18-SECT-3.6.1.1"
>18.3.6.1.1 MAP member functions</A
></H4
><P
CLASS="para"
>The MAP method simply translates or "maps" each object into a scalar datatype space that Oracle knows how to compare. For example, suppose we had a simple rule that says appointments are "greater than" others if they occur later in time. Then the MAP method is trivial: </P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>CREATE TYPE Appointment_t AS OBJECT (
   pet REF Pet_t,
   scheduled_date DATE,
   with_whom REF Doctor_t,
   <B
CLASS="emphasis.bold"
>MAP MEMBER FUNCTION compare RETURN DATE</B
>
);

CREATE TYPE BODY Appointment_t
AS
   MAP MEMBER FUNCTION compare RETURN DATE
   IS
   BEGIN
      RETURN scheduled_date;
   END compare;
END;</PRE
></BLOCKQUOTE
><P
CLASS="para"
>MAP functions accept no parameters and must return a date, character, or number&nbsp;-- that is, something that SQL and PL/SQL already know how to compare. </P
></DIV
><DIV
CLASS="sect4"
><H4
CLASS="sect4"
><A
CLASS="title"
NAME="ch18-36-fm2xml"
>18.3.6.1.2 <A
CLASS="indexterm"
NAME="ch18-idx-8502-1"
></A
> ORDER member functions</A
></H4
><P
CLASS="para"
>The alternative to MAP is an ORDER member function, which accepts two objects: SELF and another object of the same type. You must program the ORDER member function to return an INTEGER that is one of the values -1, 0, or 1, indicating the ordering relationship of the second object to SELF. That is, if you want: </P
><UL
CLASS="itemizedlist"
><LI
CLASS="listitem"
><P
CLASS="para"
>SELF &lt; second object, return -1</P
></LI
><LI
CLASS="listitem"
><P
CLASS="para"
>SELF = second object, return 0</P
></LI
><LI
CLASS="listitem"
><P
CLASS="para"
>SELF &gt; second object, return +1</P
></LI
><LI
CLASS="listitem"
><P
CLASS="para"
>Undefined comparison, return NULL.</P
></LI
></UL
><P
CLASS="para"
>Let's look at an example of this type of function:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>CREATE TYPE Location_t AS OBJECT (
   latitude REAL,
   longitude REAL,
   altitude REAL,
   <B
CLASS="emphasis.bold"
>ORDER MEMBER FUNCTION compare (the_location IN Location_t) </B
>
<B
CLASS="emphasis.bold"
>      RETURN INTEGER</B
>
);

CREATE TYPE BODY Location_t
AS
   ORDER MEMBER FUNCTION compare (the_location IN Location_t)
      RETURN INTEGER
   IS
   -- A very lame attempt at comparing geographic locations
   BEGIN
      IF the_location.latitude = SELF.latitude
         AND the_location.longitude = SELF.longitude
         AND the_location.altitude = SELF.altitude THEN
            RETURN 0;
      ELSIF SELF.latitude &gt; the_location.latitude
         OR SELF.longitude &gt; the_location.longitude
         OR SELF.altitude &gt; the_location.altitude THEN
            RETURN 1;
      ELSE
         RETURN -1;
      END IF;
   END;
END;</PRE
></BLOCKQUOTE
><P
CLASS="para"
>This ORDER member function will allow us to make simple comparisons such as: </P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>IF location1 &gt; location2 THEN
   plant_a_flag;
END IF:</PRE
></BLOCKQUOTE
><P
CLASS="para"
>Although not recommended, your ORDER method can return NULL under certain situations, and the object comparison itself will evaluate to NULL. That is, if our object type body were rewritten as follows: </P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>CREATE TYPE BODY Location_t
AS
   ORDER MEMBER FUNCTION compare (the_location IN Location_t)
      RETURN INTEGER
   IS
   -- An even more lame attempt at comparing geographic locations
   BEGIN
      IF the_location.latitude = SELF.latitude
         AND the_location.longitude = SELF.longitude
         AND the_location.altitude = SELF.altitude THEN
            RETURN 0;
      ELSE
         RETURN NULL;
      END IF;
   END;
END;</PRE
></BLOCKQUOTE
><P
CLASS="para"
>Then, if attributes of two locations are equal, the expression (location1 = location2) will evaluate to TRUE; but if any of the attributes differ, then you can detect the condition using the IS NULL operator. Using the second version of the Location_t body, the expression below will always be true! </P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>IF (location1 &lt; location2) IS NULL THEN...</PRE
></BLOCKQUOTE
><P
CLASS="para"
>Suffice it to say that returning NULL from a comparison function is not particularly helpful. </P
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="AUTOID-16487"
></A
>There is nothing magic about the name you give the MAP and ORDER functions. In fact, other than in the type definition statements, you may never refer to this name. An added bonus of using MAP or ORDER functions is that they enable you to do things like ORDER BY and GROUP BY the object in SQL statements. </P
><P
CLASS="para"
>Which should you use&nbsp;-- MAP or ORDER? To some extent, it's a matter of what makes sense to your application, but keep in mind the following restrictions and qualifications: </P
><UL
CLASS="itemizedlist"
><LI
CLASS="listitem"
><P
CLASS="para"
>A MAP method is more efficient than the equivalent ORDER method.</P
></LI
><LI
CLASS="listitem"
><P
CLASS="para"
>If you plan to perform hash joins on the object in SQL, you must use MAP, because this type of join requires a value to hash. </P
></LI
><LI
CLASS="listitem"
><P
CLASS="para"
>A MAP method is particularly appropriate if you are sequencing a large series of objects, while an ORDER method is more useful if you are comparing two objects.<A
CLASS="indexterm"
NAME="AUTOID-16497"
></A
> </P
></LI
></UL
></DIV
></DIV
><DIV
CLASS="sect3"
><H4
CLASS="sect3"
><A
CLASS="title"
NAME="SQL2-CH-18-SECT-3.6.2"
>18.3.6.2 Equality comparisons</A
></H4
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="AUTOID-16501"
></A
> <A
CLASS="indexterm"
NAME="AUTOID-16504"
></A
> <A
CLASS="indexterm"
NAME="AUTOID-16507"
></A
>If you <EM
CLASS="emphasis"
>don't</EM
> create a MAP or ORDER method, Oracle allows you to test only for <EM
CLASS="emphasis"
>equality</EM
> of two different objects. Two Oracle objects are "equal" if and only if they (1) are of the same object type; and (2) both have attributes with identical values. Object <A
CLASS="indexterm"
NAME="AUTOID-16512"
></A
>attributes get compared one at a time, in order, and the testing stops when the first mismatch is discovered. </P
><P
CLASS="para"
>Here is an example of testing for equality:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>DECLARE
   the_1997_spec Marketing_spec_t;
   the_1998_spec Marketing_spec_t;
BEGIN
   ...
  <B
CLASS="emphasis.bold"
> IF the_1997_spec = the_1998_spec THEN ...</B
></PRE
></BLOCKQUOTE
><P
CLASS="para"
>Or, if we had one table of marketing specs per year:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>CREATE TABLE marketing_1997 OF Marketing_spec_t;
CREATE TABLE marketing_1998 OF Marketing_spec_t;</PRE
></BLOCKQUOTE
><P
CLASS="para"
>then we could compare from within SQL by using the VALUE operator:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>SELECT s97.make, s97.model
 FROM marketing_1997 s97,
      marketing_1998 s98
WHERE VALUE(s97) = VALUE(s98);</PRE
></BLOCKQUOTE
><BLOCKQUOTE
CLASS="note"
><P
CLASS="para"
><STRONG
>NOTE:</STRONG
>  Default equality comparisons work only if the object table contains attributes that Oracle knows how to compare. For example, they will work on objects with scalar attributes, but they will not work on objects with collection attributes, embedded object types, REFs, or LOBs. Also, if you create a MAP or ORDER member function, you override Oracle's ability to perform the default equality test by comparing all the attributes.<A
CLASS="indexterm"
NAME="AUTOID-16524"
></A
> <A
CLASS="indexterm"
NAME="AUTOID-16525"
></A
></P
></BLOCKQUOTE
></DIV
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="SQL2-CH-18-SECT-3.7"
>18.3.7 Privileges</A
></H3
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="ch18-idx-8509-1"
></A
> <A
CLASS="indexterm"
NAME="ch18-idx-8509-2"
></A
>While there are two categories of users to whom object privileges may be granted, programmers and end users, there is only one Oracle privilege that applies to object types: EXECUTE. Let's look at how this privilege applies to DDL (typically for programmers) and DML (typically for end users). </P
><DIV
CLASS="sect3"
><H4
CLASS="sect3"
><A
CLASS="title"
NAME="SQL2-CH-18-SECT-3.7.2"
>18.3.7.1 DDL</A
></H4
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="AUTOID-16538"
></A
>Let's say that you are the Oracle user named SCOTT and you have created an object type Pet_t. You want to grant JOE permission to use this type in his own PL/SQL programs or tables. All you need to do is grant the EXECUTE privilege to him: </P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>GRANT EXECUTE on Pet_t TO JOE;</PRE
></BLOCKQUOTE
><P
CLASS="para"
>Joe can then refer to the type using <EM
CLASS="emphasis"
>schema.type</EM
> notation: </P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>CREATE TABLE my_pets OF SCOTT.PET_T;

DECLARE
  the_pet SCOTT.PET_T;</PRE
></BLOCKQUOTE
><P
CLASS="para"
>EXECUTE privileges are also required by users who simply need to run PL/SQL anonymous blocks that use the object type. </P
></DIV
><DIV
CLASS="sect3"
><H4
CLASS="sect3"
><A
CLASS="title"
NAME="SQL2-CH-18-SECT-3.7.3"
>18.3.7.2 DML</A
></H4
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="AUTOID-16549"
></A
>For object tables, the traditional SELECT, INSERT, UDPATE, and DELETE privileges still have meaning. A user with SELECT on the object table may only retrieve the relational columns and not the object-as-object. That is, he cannot use the VALUE operator. Similarly, the other three privileges, INSERT, UPDATE, and DELETE, apply only to the relational interpretation of the table. </P
><P
CLASS="para"
>In the same fashion, the grantee does not have permission to use the constructor or other object methods unless the object type owner has granted the user EXECUTE privilege on the object type. </P
></DIV
><DIV
CLASS="sect3"
><H4
CLASS="sect3"
><A
CLASS="title"
NAME="SQL2-CH-18-SECT-3.7.4"
>18.3.7.3 Rights model</A
></H4
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="AUTOID-16556"
></A
> <A
CLASS="indexterm"
NAME="AUTOID-16558"
></A
>Suppose that the owner of a package grants me EXECUTE privileges on it in Oracle7. Whenever I execute the package, I am actually using the owner's privileges on tables, views, and the like. I need no privileges on the underlying structures. This <EM
CLASS="emphasis"
>definer rights </EM
><A
CLASS="indexterm"
NAME="AUTOID-16562"
></A
>model can be very useful in encapsulating the table data and protecting it from change except through the package. </P
><P
CLASS="para"
>As mentioned earlier in the chapter (see the Sidebar called "Encapsulation of Persistent Objects in Oracle"), the owner rights model may have a negative impact on object reuse, and it's conceivable that an object-relational database like Oracle could implement an <EM
CLASS="emphasis"
>invoker rights</EM
> model for object methods. As with all new technology, we will simply have to wait and see whether such a change comes about, and if it does, what sort of impact it will have<A
CLASS="indexterm"
NAME="AUTOID-16566"
></A
> <A
CLASS="indexterm"
NAME="AUTOID-16567"
></A
> on existing applications.<A
CLASS="indexterm"
NAME="AUTOID-16568"
></A
> </P
></DIV
></DIV
></DIV
><DIV
CLASS="htmlnav"
><P
></P
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch18_02.htm#SQL2-CH-18-SECT-2.3"
TITLE="18.2 Oracle Objects Example"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 18.2 Oracle Objects Example"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="book"
HREF="index.htm"
TITLE="Oracle PL/SQL Programming, 2nd Edition"
><IMG
SRC="../gifs/txthome.gif"
ALT="Oracle PL/SQL Programming, 2nd Edition"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch18_04.htm#SQL2-CH-18-SECT-4.1.3"
TITLE="18.4 Manipulating Objects in PL/SQL and SQL"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 18.4 Manipulating Objects in PL/SQL and SQL"
BORDER="0"></A
></TD
></TR
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
>18.2 Oracle Objects Example</TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="index"
HREF="index/idx_0.htm"
TITLE="Book Index"
><IMG
SRC="../gifs/index.gif"
ALT="Book Index"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
>18.4 Manipulating Objects in PL/SQL and SQL</TD
></TR
></TABLE
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"></DIV
><IMG SRC="../gifs/smnavbar.gif"
USEMAP="#map"
BORDER="0"
ALT="The Oracle Library Navigation">

<P><font size="-1">
<a href="../copyrght.htm#copy">Copyright (c) 2000</a> O'Reilly &amp; Associates. All rights reserved.
</font></P>

<MAP NAME="map">

<AREA SHAPE="RECT"
COORDS="0,0,35,30"
HREF="../index.htm"
ALT="Library Home">

<AREA SHAPE="RECT"
COORDS="40,0,95,30"
HREF="index.htm"
ALT="Oracle PL/SQL Programming, 2nd. Ed.">

<AREA SHAPE="RECT"
COORDS="100,0,200,30"
HREF="../guide8i/index.htm"
ALT="Guide to Oracle 8i Features">

<AREA SHAPE="RECT"
COORDS="205,0,245,30"
HREF="../bipack/index.htm"
ALT="Oracle Built-in Packages">

<AREA SHAPE="RECT"
COORDS="250,0,320,30"
HREF="../advprog/index.htm"
ALT="Advanced PL/SQL Programming with Packages">

<AREA SHAPE="RECT"
COORDS="325,0,420,30"
HREF="../webapp/index.htm"
ALT="Oracle Web Applications">

<AREA SHAPE="RECT"
COORDS="425,0,490,30"
HREF="../langpkt/index.htm"
ALT="Oracle PL/SQL Language Pocket Reference">

<AREA SHAPE="RECT"
COORDS="495,0,570,30"
HREF="../bipkt/index.htm"
ALT="Oracle PL/SQL Built-ins Pocket Reference">
</MAP>

</BODY
>
<!-- Mirrored from liso.cs.pusan.ac.kr by HTTrack Website Copier/3.x [XR&CO'2001] -->
</HTML
>
