<HTML
><HEAD
><TITLE
>[Chapter 8] 8.4 Determining Exception-Handling Behavior</TITLE
><META
NAME="DC.Creator"
CONTENT="Steven Feuerstein &amp; Bill Pribyl"><META
NAME="DC.Date"
CONTENT="2000-04-29T18:58:06Z"><META
NAME="DC.Format"
CONTENT="text/html"
SCHEME="MIME"><META
NAME="DC.Identifier"
CONTENT="O'Reilly and Associates CD-ROM-1-56592-335-9E"><META
NAME="DC.Language"
CONTENT="en-US"><META
NAME="DC.Publisher"
CONTENT="O'Reilly &amp; Associates, Inc."><META
NAME="DC.Source"
CONTENT="1-56592-335-9E"
SCHEME="ISBN"><META
NAME="DC.Subject.Keyword"
CONTENT="Oracle PL/SQL"><META
NAME="DC.Title"
CONTENT="Oracle PL/SQL Programming, 2nd Edition"><META
NAME="DC.Type"
CONTENT="Text.Monograph"><META
NAME="generator"
CONTENT="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><LINK
REL="stylesheet"
TYPE="text/css"
HREF="../style/style1.css"><LINK
REV="made"
HREF="mailto:online-books@oreilly.com"
TITLE="Online Books Comments"><LINK
REL="up"
HREF="ch08_01.htm"
TITLE="8. Exception Handlers"><LINK
REL="prev"
HREF="ch08_03.htm#SQL2-CH-8-SECT-3.2"
TITLE="8.3 Types of Exceptions"><LINK
REL="next"
HREF="ch08_05.htm#SQL2-CH-8-SECT-5.1.2"
TITLE="8.5 Raising an Exception"></HEAD
><BODY
><DIV
CLASS="htmlnav"
><H1
><IMG
SRC="gifs/smbanner.gif"
ALT="Oracle PL/SQL Programming, 2nd Edition"
USEMAP="#srchmap"
BORDER="0"></H1
><MAP
NAME="srchmap"
><AREA
SHAPE="RECT"
COORDS="0,0,466,65"
HREF="index.htm"
ALT="Oracle PL/SQL Programming, 2nd Edition"><AREA
SHAPE="RECT"
COORDS="467,0,514,18"
HREF="jobjects/fsearch.htm"
ALT="Search this book"></MAP
><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch08_03.htm#SQL2-CH-8-SECT-3.2"
TITLE="8.3 Types of Exceptions"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 8.3 Types of Exceptions"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><SPAN
CLASS="NAVTITLE"
><A
CLASS="chapter"
REL="up"
HREF="ch08_01.htm"
TITLE="8. Exception Handlers"
>Chapter 8<BR>Exception Handlers</A
></SPAN
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch08_05.htm#SQL2-CH-8-SECT-5.1.2"
TITLE="8.5 Raising an Exception"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 8.5 Raising an Exception"
BORDER="0"></A
></TD
></TR
></TABLE
>&nbsp;<HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"></DIV
><DIV
CLASS="sect1"
><H2
CLASS="sect1"
><A
CLASS="title"
NAME="SQL2-CH-8-SECT-4"
>8.4 Determining Exception-Handling Behavior</A
></H2
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="ch08-idx-998454-1"
></A
>A PL/SQL program is an anonymous block, a procedure, or a function. This program, or "highest-level" block, can call other procedures or functions, or nest an anonymous block within that block. So at any given point in execution, there might be several layers of PL/SQL blocks nested within other blocks. Each PL/SQL block can have its own exception section, or it can be totally void of exception handlers. </P
><P
CLASS="para"
>To determine the appropriate exception-handling behavior, PL/SQL follows rules regarding: </P
><DL
CLASS="variablelist"
><DT
CLASS="term"
><EM
CLASS="emphasis"
>Scope</EM
></DT
><DD
CLASS="listitem"
><P
CLASS="para"
>The PL/SQL block or blocks in which an exception can be raised and handled. </P
></DD
><DT
CLASS="term"
><EM
CLASS="emphasis"
>Propagation</EM
></DT
><DD
CLASS="listitem"
><P
CLASS="para"
>The way in which an exception is passed back through enclosing blocks until it is handled or is resolved to be an unhandled exception </P
></DD
></DL
><P
CLASS="para"
>Let's look at these two properties of exceptions.</P
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="SQL2-CH-8-SECT-4.1"
>8.4.1 Scope of an Exception</A
></H3
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="ch08-idx-962934-1"
></A
><A
CLASS="indexterm"
NAME="ch08-idx-962934-2"
></A
>The scope of an exception is that portion of the code which is "covered" by that exception. An exception covers a block of code if it can be raised in that block. The following table shows the scope for each of the different kinds of exceptions: </P
><TABLE
CLASS="informaltable"
BORDER="1"
CELLPADDING="3"
><THEAD
CLASS="thead"
><TR
CLASS="row"
VALIGN="TOP"
><TH
CLASS="entry"
ALIGN="LEFT"
ROWSPAN="1"
COLSPAN="1"
> <P
CLASS="para"
>Exception Type</P
> </TH
><TH
CLASS="entry"
ALIGN="LEFT"
ROWSPAN="1"
COLSPAN="1"
> <P
CLASS="para"
>Description of Scope</P
> </TH
></TR
></THEAD
><TBODY
CLASS="tbody"
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
> Named system exceptions </TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
> These exceptions are globally available because they are not declared in or confined to any particular block of code. You can raise and handle a named system exception in any block. </TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
> Named programmer-defined exceptions </TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
> These exceptions can only be raised and handled in the execution and exception sections of the block in which they are declared (and all nested blocks). </TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
> Unnamed system exceptions </TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
> These exceptions can be handled in any PL/SQL exception section via the WHEN OTHERS section. If they are assigned a name, then the scope of that name is the same as that of the named programmer-defined exception. </TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
> Unnamed programmer-defined exceptions </TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
> This exception is only defined in the call to RAISE_APPLICATION_ERROR and then is passed back to the calling program. </TD
></TR
></TBODY
></TABLE
><DIV
CLASS="sect3"
><H4
CLASS="sect3"
><A
CLASS="title"
NAME="SQL2-CH-8-SECT-4.1.1"
>8.4.1.1 Scope of programmer-defined exception</A
></H4
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="AUTOID-7558"
></A
>Consider the following example of the exception overdue_balance declared in procedure check_account. The scope of that exception is the check_account procedure, and nothing else: </P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>PROCEDURE check_account (company_id_in IN NUMBER)
IS
   overdue_balance EXCEPTION;
BEGIN
   ... executable statements ...
   LOOP
      ...
      IF ... THEN
         RAISE overdue_balance;
      END IF;
   END LOOP;
EXCEPTION
   WHEN overdue_balance THEN ...
END;</PRE
></BLOCKQUOTE
><P
CLASS="para"
>I can RAISE the overdue_balance inside the check_account procedure, but I cannot raise that exception from a program that calls check_account. The following anonymous block will generate the associated compile error: </P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>DECLARE
   company_id NUMBER := 100;
BEGIN
   check_account (100);
EXCEPTION
   WHEN overdue_balance /* PL/SQL cannot resolve this reference. */
   THEN ...
END;

PLS-00201: identifier &quot;OVERDUE_BALANCE&quot; must be declared</PRE
></BLOCKQUOTE
><P
CLASS="para"
>The check_account procedure is a "black box" as far as the anonymous block is concerned. Any identifiers&nbsp;-- including exceptions&nbsp;-- which are declared inside check_account are invisible outside of that program. </P
></DIV
><DIV
CLASS="sect3"
><H4
CLASS="sect3"
><A
CLASS="title"
NAME="SQL2-CH-8-SECT-4.1.2"
>8.4.1.2 Raising exceptions in nested blocks</A
></H4
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="ch08-idx-962936-1"
></A
><A
CLASS="indexterm"
NAME="ch08-idx-962936-2"
></A
><A
CLASS="indexterm"
NAME="ch08-idx-962936-3"
></A
>When you declare an exception in a block, it is local to that block, but global to all the blocks which are enclosed by that block (nested blocks). In the version of check_account shown in the following example, the procedure contains an anonymous subblock which also raises the overdue_balance. Because the subblock is enclosed by the procedure block, PL/SQL can resolve the reference to that exception: </P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>PROCEDURE check_account (company_id_in IN NUMBER)
IS
   overdue_balance EXCEPTION;
BEGIN
   ... executable statements ...

   -- Start of sub-block inside check_account
   BEGIN
      ... statements within sub-block ...
      RAISE overdue_balance;  -- Exception raised in sub-block.
   END;
   -- End of sub-block inside check_account

   LOOP
      ...
      IF ... THEN
         RAISE overdue_balance; -- Exception raised in main block.
      END IF;
   END LOOP;

EXCEPTION
   WHEN overdue_balance THEN ... -- Exception handled in main block.
END;</PRE
></BLOCKQUOTE
><P
CLASS="para"
>When the overdue_balance exception is raised in either the subblock or the main block, control is transferred immediately to the main block&nbsp;-- the only exception section in the entire procedure. Because overdue_balance was declared for the whole procedure, the name is known throughout all subblocks.<A
CLASS="indexterm"
NAME="AUTOID-7582"
></A
> <A
CLASS="indexterm"
NAME="AUTOID-7583"
></A
> </P
></DIV
><DIV
CLASS="sect3"
><H4
CLASS="sect3"
><A
CLASS="title"
NAME="SQL2-CH-8-SECT-4.1.3"
>8.4.1.3 Overlapping exception names</A
></H4
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="ch08-idx-962938-1"
></A
><A
CLASS="indexterm"
NAME="ch08-idx-962938-2"
></A
> You never have to declare a named system exception because they have all been declared in the STANDARD package, which is instantiated as soon as you run any PL/SQL code. You can, on the other hand, declare your own exceptions with the same name as a previously defined system exception, as shown below: </P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>DECLARE
   no_data_found EXCEPTION;
BEGIN</PRE
></BLOCKQUOTE
><P
CLASS="para"
>This locally declared exception will take precedence over the system exception. As a result, the following exception handler will not trap an error caused by an implicit query that returns no rows: </P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>EXCEPTION
   WHEN no_data_found -- This is MY exception, not PL/SQL's.
   THEN
      ...
END;</PRE
></BLOCKQUOTE
></DIV
><DIV
CLASS="sect3"
><H4
CLASS="sect3"
><A
CLASS="title"
NAME="SQL2-CH-8-SECT-4.1.4"
>8.4.1.4 Qualifying exception names</A
></H4
><P
CLASS="para"
>If I really want to name a local exception the same as a predefined exception and handle the latter in that same PL/SQL block, I need to use the dot notation on the predefined exception. This notation distinguishes between the two and allows PL/SQL to find the handler for the predefined exception. I can then handle those two different exceptions separately, or I can combine them in a single expression: </P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>EXCEPTION
   WHEN no_data_found
   THEN
      DBMS_OUTPUT.PUT_LINE ('My own local exception');

   WHEN STANDARD.NO_DATA_FOUND
   THEN
      DBMS_OUTPUT.PUT_LINE ('The predefined exception');
END;</PRE
></BLOCKQUOTE
><P
CLASS="para"
>or:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>EXCEPTION
   WHEN no_data_found OR STANDARD.NO_DATA_FOUND
   THEN
      DBMS_OUTPUT.PUT_LINE ('Could not find the data');
END;</PRE
></BLOCKQUOTE
><P
CLASS="para"
>Of course, the best solution is to never declare exceptions with the same name as a named system exception. </P
></DIV
><DIV
CLASS="sect3"
><H4
CLASS="sect3"
><A
CLASS="title"
NAME="SQL2-CH-8-SECT-4.1.5"
>8.4.1.5 Referencing duplicate exceptions in nested blocks</A
></H4
><P
CLASS="para"
>You cannot declare the same exception more than once in a single block, but you can declare an exception in a nested block with the same name as that of an enclosing block. When you do this, the declaration local to that nested block takes precedence over the global exception. When you raise that exception, you are raising the local exception, which is a completely different exception from the outer exception, even though they share the same name. </P
><P
CLASS="para"
>In the following version of check_account, my nested block contains its own declaration of the overdue_balance exception: </P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>1  PROCEDURE check_account (company_id_in IN NUMBER)
2  IS
3     /* Main block exception declaration */
4     <B
CLASS="emphasis.bold"
>overdue_balance EXCEPTION;</B
>
5  BEGIN
6     ... executable statements ...
7
8     /* Start of sub-block inside check_account */
9     DECLARE
10       /* Sub-block exception declaration */
11       <B
CLASS="emphasis.bold"
>overdue_balance EXCEPTION;</B
>
12    BEGIN
13       ... statements within sub-block ...
14
15       /* Exception raised in sub-block. */
16       RAISE overdue_balance;
17    END;
18    /* End of sub-block inside check_account */
19
20    LOOP
21       ...
22       IF ... THEN
23          /* Exception raised in main block. */
24          RAISE overdue_balance;
25       END IF;
26    END LOOP;
27
28 EXCEPTION
29    /* Exception handled in main block. */
30    WHEN overdue_balance
31    THEN
32       DBMS_OUTPUT.PUT_LINE ('Balance is overdue. Pay up!');
33 END;</PRE
></BLOCKQUOTE
><P
CLASS="para"
>This program will compile without a hitch. Even though the overdue_balance exception is declared twice, each declaration takes place in a different PL/SQL block, hence in a different scope. The procedure-level overdue_balance is declared on line 4. The exception of the same name for the nested block is declared on line 11. Following these declarations, there are two RAISE statements&nbsp;-- one within the nested block on line 16 and one in the main body of the procedure on line 24. Finally, there is just a single exception section and one handler for overdue_balance on line 30. </P
><P
CLASS="para"
>Well, the overdue_balance exception is certainly declared in every block in which it is raised. Yet the exception-handling behavior of check_account may not be as you would expect. What happens, for example, when the RAISE statement on line 16 executes? Do you see this: </P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>'Balance is overdue. Pay up!'</PRE
></BLOCKQUOTE
><P
CLASS="para"
>or this:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>ORA-06501: PL/SQL: unhandled user-defined exception
ORA-6512: at &quot;USER.CHECK_ACCOUNT&quot;, line N</PRE
></BLOCKQUOTE
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="AUTOID-7616"
></A
>You will, in fact, have raised an unhandled exception when you RAISE overdue_balance in the nested block. How can this be? </P
><P
CLASS="para"
>Remember that the nested block does not have its own exception section&nbsp;-- yet it does have its own, locally declared exception. So when the exception is raised on line 16, the nested block cannot handle the exception. Instead, that exception (declared only in that nested block) is passed on to the enclosing block and PL/SQL tries to handle it there. </P
><P
CLASS="para"
>As soon as control passes to the enclosing block, however, the nested block terminates and all local identifiers are erased. This includes the exception which was just raised. It is no longer defined and therefore cannot be handled in the outer block, even though it seems to have an handler for precisely that exception. </P
><P
CLASS="para"
>But there is still a glitch: the enclosing block doesn't know anything about the local overdue_balance, only its own rendition. And even though they appear to have the same name, these exceptions are different exceptions as far as the compiler is concerned. As a result, the nested block overdue_balance exception goes unhandled. </P
><P
CLASS="para"
>How can you get around this problem? First of all, you should avoid such duplication of exception names. This only makes the code very hard to understand and follow. But if you insist on these overlapping names, you can take any of the following steps: </P
><OL
CLASS="orderedlist"
><LI
CLASS="listitem"
><P
CLASS="para"
>Raise the procedure-level overdue_balance exception within the subblock if the enclosing block has a name (if it is a procedure or a function). You can use dot notation to distinguish the local exception from its global counterpart as follows: </P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>RAISE check_account.overdue_balance;</PRE
></BLOCKQUOTE
></LI
><LI
CLASS="listitem"
><P
CLASS="para"
>Make sure that the locally raised overdue_balance is handled by the main check_account exception section by including a WHEN OTHERS clause to trap any exceptions not otherwise handled. </P
></LI
><LI
CLASS="listitem"
><P
CLASS="para"
>Remove the local declaration of overdue_balance so this exception is declared only once in the program unit.<A
CLASS="indexterm"
NAME="AUTOID-7631"
></A
> <A
CLASS="indexterm"
NAME="AUTOID-7632"
></A
> <A
CLASS="indexterm"
NAME="AUTOID-7633"
></A
> <A
CLASS="indexterm"
NAME="AUTOID-7634"
></A
> </P
></LI
></OL
></DIV
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="SQL2-CH-8-SECT-4.2"
>8.4.2 Propagation of an Exception </A
></H3
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="ch08-idx-962942-1"
></A
><A
CLASS="indexterm"
NAME="ch08-idx-962942-2"
></A
>The scope rules for exceptions determine the block in which an exception can be raised. The rules for exception propagation address the way in which an exception is handled, once it has been raised. </P
><P
CLASS="para"
>When an exception is raised, PL/SQL looks for an exception handler in the current block (anonymous block, procedure, or function) for this exception. If it does not find a match, then PL/SQL <EM
CLASS="emphasis"
>propagates</EM
> the exception to the enclosing block of that current block. PL/SQL then attempts to handle the exception by raising that exception once more in the enclosing block. It continues to do this in each successive enclosing block until there are no more blocks in which to raise the exception (see <A
CLASS="xref"
HREF="ch08_04.htm#SQL2-CH-8-SECT-4.1.3"
>Figure 8.3</A
>). When all blocks are exhausted, PL/SQL returns an unhandled exception to the application environment that executed the outermost PL/SQL block. An unhandled exception halts the execution of the host program. </P
><H4
CLASS="figure"
><A
CLASS="title"
NAME="SQL2-CH-8-FIG-4"
>Figure 8.3: Propagation of exception through nested blocks</A
></H4
><IMG
CLASS="graphic"
SRC="figs/sql2.0803.gif"
ALT="Figure 8.3"><P
CLASS="para"
>One very direct consequence of this propagation method is that if PL/SQL cannot locate an exception handler in the current block for a local, programmer-defined exception, the exception will not be handled at all. The exception is not recognized outside of the current block, so propagating to enclosing blocks will never cause the exception to be handled (unless you use the blanket WHEN OTHERS handler). </P
><P
CLASS="para"
>Let's look at a few examples of the way exceptions propagate through enclosing blocks. </P
><P
CLASS="para"
><A
CLASS="xref"
HREF="ch08_04.htm#SQL2-CH-8-SECT-4.1.3"
>Figure 8.4</A
> shows the exception raised in the inner block too_many_faults is handled by the next enclosing block. </P
><H4
CLASS="figure"
><A
CLASS="title"
NAME="SQL2-CH-8-FIG-5"
>Figure 8.4: Propagation of exception handling to first nested block</A
></H4
><IMG
CLASS="graphic"
SRC="figs/sql2.0804.gif"
ALT="Figure 8.4"><P
CLASS="para"
>The innermost block has an exception section, so PL/SQL first checks to see if the too_many_faults is handled in this section. Because it was not handled, PL/SQL closes that block and raises the too_many_faults exception in the enclosing block, Nested Block 1. Control immediately passes to the exception section of Nested Block 1. (The executable statements after Nested Block 2 are not executed.) PL/SQL scans the exception handlers and finds that too_many_faults is handled in this block, so the code for that handler is executed, after which control passes back to the main list_my_faults procedure. </P
><P
CLASS="para"
>Notice that if the NO_DATA_FOUND exception had been raised in the innermost block (Nested Block 2), then the exception section for Nested Block 2 would have handled the exception. Then control would pass back to Nested Block 1 and the executable statements which come after Nested Block 2 would be executed. </P
><P
CLASS="para"
>In <A
CLASS="xref"
HREF="ch08_04.htm#SQL2-CH-8-SECT-4.1.3"
>Figure 8.5</A
>, the exception raised in the inner block is handled by the outermost block. </P
><H4
CLASS="figure"
><A
CLASS="title"
NAME="SQL2-CH-8-FIG-6"
>Figure 8.5: Exception raised in nested block handled by outermost block</A
></H4
><IMG
CLASS="graphic"
SRC="figs/sql2.0805.gif"
ALT="Figure 8.5"><P
CLASS="para"
>The outermost block is the only one with an exception section, so when Nested Block 2 raises the too_many_faults exception, PL/SQL terminates execution of that block and raises that exception in the enclosing block, Nested Block 1. Again, this block has no exception section so PL/SQL immediately terminates Nested Block 1 and passes control to the outermost block (the list_my_faults procedure). This procedure does have an exception section, so PL/SQL scans the exception handlers, finds a match for too_many_faults, executes the code for that handler, and then returns control to whatever program called list_my_faults.<A
CLASS="indexterm"
NAME="AUTOID-7664"
></A
> <A
CLASS="indexterm"
NAME="AUTOID-7665"
></A
> <A
CLASS="indexterm"
NAME="AUTOID-7666"
></A
> </P
></DIV
></DIV
><DIV
CLASS="htmlnav"
><P
></P
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch08_03.htm#SQL2-CH-8-SECT-3.2"
TITLE="8.3 Types of Exceptions"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 8.3 Types of Exceptions"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="book"
HREF="index.htm"
TITLE="Oracle PL/SQL Programming, 2nd Edition"
><IMG
SRC="../gifs/txthome.gif"
ALT="Oracle PL/SQL Programming, 2nd Edition"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch08_05.htm#SQL2-CH-8-SECT-5.1.2"
TITLE="8.5 Raising an Exception"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 8.5 Raising an Exception"
BORDER="0"></A
></TD
></TR
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
>8.3 Types of Exceptions</TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="index"
HREF="index/idx_0.htm"
TITLE="Book Index"
><IMG
SRC="../gifs/index.gif"
ALT="Book Index"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
>8.5 Raising an Exception</TD
></TR
></TABLE
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"></DIV
><IMG SRC="../gifs/smnavbar.gif"
USEMAP="#map"
BORDER="0"
ALT="The Oracle Library Navigation">

<P><font size="-1">
<a href="../copyrght.htm#copy">Copyright (c) 2000</a> O'Reilly &amp; Associates. All rights reserved.
</font></P>

<MAP NAME="map">

<AREA SHAPE="RECT"
COORDS="0,0,35,30"
HREF="../index.htm"
ALT="Library Home">

<AREA SHAPE="RECT"
COORDS="40,0,95,30"
HREF="index.htm"
ALT="Oracle PL/SQL Programming, 2nd. Ed.">

<AREA SHAPE="RECT"
COORDS="100,0,200,30"
HREF="../guide8i/index.htm"
ALT="Guide to Oracle 8i Features">

<AREA SHAPE="RECT"
COORDS="205,0,245,30"
HREF="../bipack/index.htm"
ALT="Oracle Built-in Packages">

<AREA SHAPE="RECT"
COORDS="250,0,320,30"
HREF="../advprog/index.htm"
ALT="Advanced PL/SQL Programming with Packages">

<AREA SHAPE="RECT"
COORDS="325,0,420,30"
HREF="../webapp/index.htm"
ALT="Oracle Web Applications">

<AREA SHAPE="RECT"
COORDS="425,0,490,30"
HREF="../langpkt/index.htm"
ALT="Oracle PL/SQL Language Pocket Reference">

<AREA SHAPE="RECT"
COORDS="495,0,570,30"
HREF="../bipkt/index.htm"
ALT="Oracle PL/SQL Built-ins Pocket Reference">
</MAP>

</BODY
>
<!-- Mirrored from liso.cs.pusan.ac.kr by HTTrack Website Copier/3.x [XR&CO'2001] -->
</HTML
>
