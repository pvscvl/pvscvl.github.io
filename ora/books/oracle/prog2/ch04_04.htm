<HTML
><HEAD
><TITLE
>[Chapter 4] 4.4 Variable Declarations</TITLE
><META
NAME="DC.Creator"
CONTENT="Steven Feuerstein &amp; Bill Pribyl"><META
NAME="DC.Date"
CONTENT="2000-04-29T18:55:11Z"><META
NAME="DC.Format"
CONTENT="text/html"
SCHEME="MIME"><META
NAME="DC.Identifier"
CONTENT="O'Reilly and Associates CD-ROM-1-56592-335-9E"><META
NAME="DC.Language"
CONTENT="en-US"><META
NAME="DC.Publisher"
CONTENT="O'Reilly &amp; Associates, Inc."><META
NAME="DC.Source"
CONTENT="1-56592-335-9E"
SCHEME="ISBN"><META
NAME="DC.Subject.Keyword"
CONTENT="Oracle PL/SQL"><META
NAME="DC.Title"
CONTENT="Oracle PL/SQL Programming, 2nd Edition"><META
NAME="DC.Type"
CONTENT="Text.Monograph"><META
NAME="generator"
CONTENT="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><LINK
REL="stylesheet"
TYPE="text/css"
HREF="../style/style1.css"><LINK
REV="made"
HREF="mailto:online-books@oreilly.com"
TITLE="Online Books Comments"><LINK
REL="up"
HREF="ch04_01.htm"
TITLE="4. Variables and Program Data"><LINK
REL="prev"
HREF="ch04_03.htm#SQL2-CH-4-SECT-3.3"
TITLE="4.3 NULLs in PL/SQL"><LINK
REL="next"
HREF="ch04_05.htm"
TITLE="4.5 Anchored Declarations"></HEAD
><BODY
><DIV
CLASS="htmlnav"
><H1
><IMG
SRC="gifs/smbanner.gif"
ALT="Oracle PL/SQL Programming, 2nd Edition"
USEMAP="#srchmap"
BORDER="0"></H1
><MAP
NAME="srchmap"
><AREA
SHAPE="RECT"
COORDS="0,0,466,65"
HREF="index.htm"
ALT="Oracle PL/SQL Programming, 2nd Edition"><AREA
SHAPE="RECT"
COORDS="467,0,514,18"
HREF="jobjects/fsearch.htm"
ALT="Search this book"></MAP
><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch04_03.htm#SQL2-CH-4-SECT-3.3"
TITLE="4.3 NULLs in PL/SQL"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 4.3 NULLs in PL/SQL"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><SPAN
CLASS="NAVTITLE"
><A
CLASS="chapter"
REL="up"
HREF="ch04_01.htm"
TITLE="4. Variables and Program Data"
>Chapter 4<BR>Variables and Program Data</A
></SPAN
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch04_05.htm"
TITLE="4.5 Anchored Declarations"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 4.5 Anchored Declarations"
BORDER="0"></A
></TD
></TR
></TABLE
>&nbsp;<HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"></DIV
><DIV
CLASS="sect1"
><H2
CLASS="sect1"
><A
CLASS="title"
NAME="SQL2-CH-4-SECT-4"
>4.4 Variable Declarations</A
></H2
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="ch04-idx-26070-1"
></A
> <A
CLASS="indexterm"
NAME="ch04-idx-26070-2"
></A
> Before you can make a reference to a variable, you must declare it. (The only exception to this rule is for the index variables of FOR loops.) All declarations must be made in the declaration section of your anonymous block, procedure, function, or package (see <A
CLASS="xref"
HREF="ch15_01.htm"
>Chapter 15, <CITE
CLASS="chapter"
>Procedures and Functions</CITE
></A
>, for more details on the structure of the declaration section). </P
><P
CLASS="para"
>When you declare a variable, PL/SQL allocates memory for the variable's value and names the storage location so that the value can be retrieved and changed. The declaration also specifies the datatype of the variable; this datatype is then used to validate values assigned to the variable. </P
><P
CLASS="para"
>The basic syntax for a declaration is:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>&lt;variable_name&gt; &lt;datatype&gt; [optional default assignment];</PRE
></BLOCKQUOTE
><P
CLASS="para"
>where &lt;variable_name&gt; is the name of the variable to be declared and &lt;datatype&gt; is the datatype or subtype which determines the type of data which can be assigned to the variable. The [optional default assignment] clause allows you to initialize the variable with a value, a topic covered in the next section. </P
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="SQL2-CH-4-SECT-4.1"
>4.4.1 Constrained Declarations</A
></H3
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="AUTOID-3905"
></A
> <A
CLASS="indexterm"
NAME="AUTOID-3907"
></A
> The datatype in a declaration can either be constrained or unconstrained. A datatype is constrained when you specify a number which constrains or restricts the magnitude of the value which can be assigned to that variable. A datatype is unconstrained when there are no such restrictions. </P
><P
CLASS="para"
>Consider the datatype NUMBER. It supports up to 38 digits of precision&nbsp;-- and uses up the memory needed for all those digits. If your variable does not require this much memory, you could declare a number with a constraint, such as the following: </P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>itty_bitty_# NUMBER(1);

large_but_constrained_# NUMBER(20,5);</PRE
></BLOCKQUOTE
><P
CLASS="para"
>Constrained variables require less memory than unconstrained number declarations like this: </P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>no_limits_here NUMBER;</PRE
></BLOCKQUOTE
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="SQL2-CH-4-SECT-4.2"
>4.4.2 Declaration Examples</A
></H3
><P
CLASS="para"
>Here are some examples of variable declarations:</P
><UL
CLASS="itemizedlist"
><LI
CLASS="listitem"
><P
CLASS="para"
>Declaration of date variable:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>hire_date DATE;</PRE
></BLOCKQUOTE
></LI
><LI
CLASS="listitem"
><P
CLASS="para"
>This variable can only have one of three values: TRUE, FALSE, NULL:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>enough_data BOOLEAN;</PRE
></BLOCKQUOTE
></LI
><LI
CLASS="listitem"
><P
CLASS="para"
>This number rounds to the nearest hundredth (cent):</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>total_revenue NUMBER (15,2);</PRE
></BLOCKQUOTE
></LI
><LI
CLASS="listitem"
><P
CLASS="para"
>This variable-length string will fit in a VARCHAR2 database column:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>long_paragraph VARCHAR2 (2000);</PRE
></BLOCKQUOTE
></LI
><LI
CLASS="listitem"
><P
CLASS="para"
>This constant date is unlikely to change:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>next_tax_filing_date CONSTANT DATE := '15-APR-96';</PRE
></BLOCKQUOTE
></LI
></UL
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="SQL2-CH-4-SECT-4.3"
>4.4.3 Default Values</A
></H3
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="AUTOID-3936"
></A
><A
CLASS="indexterm"
NAME="AUTOID-3939"
></A
> <A
CLASS="indexterm"
NAME="AUTOID-3941"
></A
>You can assign default values to a variable when it is declared. When declaring a constant, you must include a default value in order for the declaration to compile successfully. The default value is assigned to the variable with one of the following two formats: </P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>&lt;variable_name&gt; &lt;datatype&gt; := &lt;default_value&gt;;
&lt;variable_name&gt; &lt;datatype&gt; DEFAULT &lt;default_value&gt;;</PRE
></BLOCKQUOTE
><P
CLASS="para"
>The &lt;default_value&gt; can be a literal, previously declared variable, or expression, as the following examples demonstrate: </P
><UL
CLASS="itemizedlist"
><LI
CLASS="listitem"
><P
CLASS="para"
>Set variable to 3:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>term_limit NUMBER DEFAULT  3;</PRE
></BLOCKQUOTE
></LI
><LI
CLASS="listitem"
><P
CLASS="para"
>Default value taken from Oracle Forms bind variable:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>call_topic VARCHAR2 (100) DEFAULT :call.description;</PRE
></BLOCKQUOTE
></LI
><LI
CLASS="listitem"
><P
CLASS="para"
>Default value is the result of a function call:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>national_debt FLOAT DEFAULT POWER (10,10);</PRE
></BLOCKQUOTE
></LI
><LI
CLASS="listitem"
><P
CLASS="para"
>Default value is the result of the expression:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>order_overdue CONSTANT BOOLEAN :=
   ship_date &gt; ADD_MONTHS (order_date, 3) OR
   priority_level (company_id) = 'HIGH';</PRE
></BLOCKQUOTE
></LI
></UL
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="AUTOID-3960"
></A
> <A
CLASS="indexterm"
NAME="AUTOID-3962"
></A
>I like to use the assignment operator (<KBD
CLASS="command"
>:=)</KBD
> to set default values for constants, and the DEFAULT syntax for variables. In the case of the constant, the assigned value is not really a default, but an initial (and unchanging) value, so the DEFAULT syntax feels misleading to me. </P
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="SQL2-CH-4-SECT-4.4"
>4.4.4 NOT NULL Clause</A
></H3
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="AUTOID-3968"
></A
> <A
CLASS="indexterm"
NAME="AUTOID-3970"
></A
>If you do assign a default value, you can also specify that the variable must be NOT NULL. For example, the following declaration initializes the company_name variable to PCS R US and makes sure that the name can never be set to NULL: </P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>company_name VARCHAR2(60) NOT NULL DEFAULT 'PCS R US';</PRE
></BLOCKQUOTE
><P
CLASS="para"
>If your code includes a line like this:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>company_name := NULL;</PRE
></BLOCKQUOTE
><P
CLASS="para"
>then PL/SQL will raise the VALUE_ERROR exception. You will, in addition, receive a compilation error with this next declaration: </P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>company_name VARCHAR2(60) NOT NULL;</PRE
></BLOCKQUOTE
><P
CLASS="para"
>Why? Because your NOT NULL constraint conflicts instantly with the indeterminate or NULL value of the company_name variable when it is instantiated.<A
CLASS="indexterm"
NAME="AUTOID-3979"
></A
> <A
CLASS="indexterm"
NAME="AUTOID-3980"
></A
> </P
></DIV
></DIV
><DIV
CLASS="htmlnav"
><P
></P
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch04_03.htm#SQL2-CH-4-SECT-3.3"
TITLE="4.3 NULLs in PL/SQL"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 4.3 NULLs in PL/SQL"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="book"
HREF="index.htm"
TITLE="Oracle PL/SQL Programming, 2nd Edition"
><IMG
SRC="../gifs/txthome.gif"
ALT="Oracle PL/SQL Programming, 2nd Edition"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch04_05.htm"
TITLE="4.5 Anchored Declarations"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 4.5 Anchored Declarations"
BORDER="0"></A
></TD
></TR
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
>4.3 NULLs in PL/SQL</TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="index"
HREF="index/idx_0.htm"
TITLE="Book Index"
><IMG
SRC="../gifs/index.gif"
ALT="Book Index"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
>4.5 Anchored Declarations</TD
></TR
></TABLE
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"></DIV
><IMG SRC="../gifs/smnavbar.gif"
USEMAP="#map"
BORDER="0"
ALT="The Oracle Library Navigation">

<P><font size="-1">
<a href="../copyrght.htm#copy">Copyright (c) 2000</a> O'Reilly &amp; Associates. All rights reserved.
</font></P>

<MAP NAME="map">

<AREA SHAPE="RECT"
COORDS="0,0,35,30"
HREF="../index.htm"
ALT="Library Home">

<AREA SHAPE="RECT"
COORDS="40,0,95,30"
HREF="index.htm"
ALT="Oracle PL/SQL Programming, 2nd. Ed.">

<AREA SHAPE="RECT"
COORDS="100,0,200,30"
HREF="../guide8i/index.htm"
ALT="Guide to Oracle 8i Features">

<AREA SHAPE="RECT"
COORDS="205,0,245,30"
HREF="../bipack/index.htm"
ALT="Oracle Built-in Packages">

<AREA SHAPE="RECT"
COORDS="250,0,320,30"
HREF="../advprog/index.htm"
ALT="Advanced PL/SQL Programming with Packages">

<AREA SHAPE="RECT"
COORDS="325,0,420,30"
HREF="../webapp/index.htm"
ALT="Oracle Web Applications">

<AREA SHAPE="RECT"
COORDS="425,0,490,30"
HREF="../langpkt/index.htm"
ALT="Oracle PL/SQL Language Pocket Reference">

<AREA SHAPE="RECT"
COORDS="495,0,570,30"
HREF="../bipkt/index.htm"
ALT="Oracle PL/SQL Built-ins Pocket Reference">
</MAP>

</BODY
>
<!-- Mirrored from liso.cs.pusan.ac.kr by HTTrack Website Copier/3.x [XR&CO'2001] -->
</HTML
>
