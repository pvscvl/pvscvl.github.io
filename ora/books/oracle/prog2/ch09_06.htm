<HTML
><HEAD
><TITLE
>[Chapter 9] 9.6 Record Types and Record Compatibility</TITLE
><META
NAME="DC.Creator"
CONTENT="Steven Feuerstein &amp; Bill Pribyl"><META
NAME="DC.Date"
CONTENT="2000-04-29T18:58:48Z"><META
NAME="DC.Format"
CONTENT="text/html"
SCHEME="MIME"><META
NAME="DC.Identifier"
CONTENT="O'Reilly and Associates CD-ROM-1-56592-335-9E"><META
NAME="DC.Language"
CONTENT="en-US"><META
NAME="DC.Publisher"
CONTENT="O'Reilly &amp; Associates, Inc."><META
NAME="DC.Source"
CONTENT="1-56592-335-9E"
SCHEME="ISBN"><META
NAME="DC.Subject.Keyword"
CONTENT="Oracle PL/SQL"><META
NAME="DC.Title"
CONTENT="Oracle PL/SQL Programming, 2nd Edition"><META
NAME="DC.Type"
CONTENT="Text.Monograph"><META
NAME="generator"
CONTENT="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><LINK
REL="stylesheet"
TYPE="text/css"
HREF="../style/style1.css"><LINK
REV="made"
HREF="mailto:online-books@oreilly.com"
TITLE="Online Books Comments"><LINK
REL="up"
HREF="ch09_01.htm"
TITLE="9. Records in PL/SQL"><LINK
REL="prev"
HREF="ch09_05.htm"
TITLE="9.5 Assigning Values to and from Records"><LINK
REL="next"
HREF="ch09_07.htm"
TITLE="9.7 Nested Records"></HEAD
><BODY
><DIV
CLASS="htmlnav"
><H1
><IMG
SRC="gifs/smbanner.gif"
ALT="Oracle PL/SQL Programming, 2nd Edition"
USEMAP="#srchmap"
BORDER="0"></H1
><MAP
NAME="srchmap"
><AREA
SHAPE="RECT"
COORDS="0,0,466,65"
HREF="index.htm"
ALT="Oracle PL/SQL Programming, 2nd Edition"><AREA
SHAPE="RECT"
COORDS="467,0,514,18"
HREF="jobjects/fsearch.htm"
ALT="Search this book"></MAP
><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch09_05.htm"
TITLE="9.5 Assigning Values to and from Records"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 9.5 Assigning Values to and from Records"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><SPAN
CLASS="NAVTITLE"
><A
CLASS="chapter"
REL="up"
HREF="ch09_01.htm"
TITLE="9. Records in PL/SQL"
>Chapter 9<BR>Records in PL/SQL</A
></SPAN
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch09_07.htm"
TITLE="9.7 Nested Records"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 9.7 Nested Records"
BORDER="0"></A
></TD
></TR
></TABLE
>&nbsp;<HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"></DIV
><DIV
CLASS="sect1"
><H2
CLASS="sect1"
><A
CLASS="title"
NAME="SQL2-CH-9-SECT-6"
>9.6 Record Types and Record Compatibility</A
></H2
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="ch09-idx-181165-1"
></A
>As we have discussed, PL/SQL supports three types of records: table-based, cursor-based, and programmer-defined. A record is defined by its name, its type, and its structure. Two records can have the same structure but be of a different type. PL/SQL places restrictions on certain operations between different record types. This section explains these restrictions based on the records declared below: </P
><UL
CLASS="itemizedlist"
><LI
CLASS="listitem"
><P
CLASS="para"
>The table structure against which all the different types of records will be declared: </P
></LI
></UL
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>CREATE TABLE cust_sales_roundup
      (customer_id NUMBER (5),
       customer_name VARCHAR2 (100),
       total_sales NUMBER (15,2)
      );</PRE
></BLOCKQUOTE
><UL
CLASS="itemizedlist"
><LI
CLASS="listitem"
><P
CLASS="para"
>The table-based record:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>cust_sales_roundup_rec cust_sales_roundup%ROWTYPE;</PRE
></BLOCKQUOTE
></LI
><LI
CLASS="listitem"
><P
CLASS="para"
>The cursor-based record:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>CURSOR cust_sales_cur IS SELECT * FROM cust_sales_roundup;
cust_sales_rec cust_sales_cur%ROWTYPE;</PRE
></BLOCKQUOTE
></LI
><LI
CLASS="listitem"
><P
CLASS="para"
>The programmer-defined record:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>TYPE customer_sales_rectype IS RECORD
   (customer_id NUMBER (5),
    customer_name customer.name%TYPE,
    total_sales NUMBER (15,2)
   );
top_customer_rec  customer_sales_rectype;</PRE
></BLOCKQUOTE
></LI
><LI
CLASS="listitem"
><P
CLASS="para"
>A "manual" record: a collection of individual variables which the programmer can treat as a group by always making changes to and referring to all variables together: </P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>v_customer_id NUMBER (5);
v_customer_name customer_name%TYPE;
v_total_sales NUMBER (15,2);</PRE
></BLOCKQUOTE
></LI
></UL
><P
CLASS="para"
>All three PL/SQL records defined above (cust_sales_roundup_rec, cust_sales_rec, and top_customer_rec) and the "manual" record have exactly the same structure. Each, however, is of a different type. Records of different types are incompatible with each other at the record level. As a result, you can't perform certain kinds of operations between them. </P
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="SQL2-CH-9-SECT-6.1"
>9.6.1 Assignment Restrictions</A
></H3
><P
CLASS="para"
>Using the previously defined records, the following sections describe the various restrictions you will encounter due to incompatible record types. </P
><DIV
CLASS="sect3"
><H4
CLASS="sect3"
><A
CLASS="title"
NAME="SQL2-CH-9-SECT-6.1.1"
>9.6.1.1 Manual records</A
></H4
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="AUTOID-8440"
></A
> <A
CLASS="indexterm"
NAME="AUTOID-8442"
></A
> You cannot assign a manual record to a real record of any type, and vice versa. If you want to assign individual variables to a record, or assign values in fields to individual variables, you must execute a separate assignment for each field in the record: </P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>top_customer_rec.customer_id := v_customer_id;
top_customer_rec.customer_name := v_customer_name;
top_customer_rec.total_sales := v_total_sales;</PRE
></BLOCKQUOTE
></DIV
><DIV
CLASS="sect3"
><H4
CLASS="sect3"
><A
CLASS="title"
NAME="SQL2-CH-9-SECT-6.1.2"
>9.6.1.2 Records of the same type</A
></H4
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="AUTOID-8449"
></A
> You can perform aggregate assignments only between records of the same type and same source. All of the aggregate assignments you saw in previous examples were valid because both the source and target records in the assignment were based on the same table, cursor, or TYPE statement. </P
><P
CLASS="para"
>The two assignments below are invalid and will fail because the record types do not match: </P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>cust_sales_roundup_rec := top_customer_rec; /* Incompatible! */
cust_sales_rec := cust_sales_roundup_rec ; /* Incompatible! */</PRE
></BLOCKQUOTE
><P
CLASS="para"
>Even when both records in an aggregate assignment are the same type and same structure, the assignment can fail. Your assignment must, in addition, conform to these rules: </P
><UL
CLASS="itemizedlist"
><LI
CLASS="listitem"
><P
CLASS="para"
>Both cursor-based records in an aggregate assignment must be based on the same cursor. </P
></LI
><LI
CLASS="listitem"
><P
CLASS="para"
>Both table-based records in an aggregate assignment must be based on the same table. </P
></LI
><LI
CLASS="listitem"
><P
CLASS="para"
>Both programmer-defined records in an aggregate assignment must be based on the same TYPE...RECORD statement. </P
></LI
></UL
></DIV
><DIV
CLASS="sect3"
><H4
CLASS="sect3"
><A
CLASS="title"
NAME="SQL2-CH-9-SECT-6.1.3"
>9.6.1.3 Setting records to NULL</A
></H4
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="AUTOID-8465"
></A
> <A
CLASS="indexterm"
NAME="AUTOID-8468"
></A
>In earlier versions of Oracle (7.2 and below), the following assignmentwould cause an erroor: </P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
><CODE
CLASS="literal"
>comp_sales_rec := NULL;</CODE
></PRE
></BLOCKQUOTE
><P
CLASS="para"
>NULL was treated as a scalar value, and would not be applied to each of the record's fields. </P
><P
CLASS="para"
>In Oracle 7.3 and above, the assignment of NULL to a record is allowed, and will set each of the fields back to the default value of NULL. </P
></DIV
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="SQL2-CH-9-SECT-6.2"
>9.6.2 Record Initialization</A
></H3
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="AUTOID-8478"
></A
> <A
CLASS="indexterm"
NAME="AUTOID-8481"
></A
> When you declare a scalar variable (a variable with a scalar or noncomposite datatype), you can provide a default or initial value for that variable. In the following example, I declare the total_sales variable and initialize it to zero using both the DEFAULT syntax and the assignment operator: </P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>total_sales NUMBER (15,2) := 0;</PRE
></BLOCKQUOTE
><P
CLASS="para"
>As you might expect based on the aggregate assignment discussed above, you can initialize a table or cursor record at the time of declaration only with another record of the same type and source. </P
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="AUTOID-8487"
></A
> If you want to initialize a record at the time of its declaration, you must use a compatible record to the right of the assignment operator (<CODE
CLASS="literal"
>:=</CODE
>) or DEFAULT phrase. The following two examples show such initializations: </P
><UL
CLASS="itemizedlist"
><LI
CLASS="listitem"
><P
CLASS="para"
>Declare a local record with the same type and structure as the parameter and then set the default value of that local record to the incoming record: </P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>PROCEDURE compare_companies
   (prev_company_rec IN company%ROWTYPE)
IS
   curr_company_rec company%ROWTYPE := prev_company_rec;
BEGIN
   ...
END;</PRE
></BLOCKQUOTE
></LI
><LI
CLASS="listitem"
><P
CLASS="para"
>Create a new record type and record. Then create a second record type using the first record type as its single column. Initialize this new record with the previously-defined record: </P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>DECLARE
   TYPE first_rectype IS RECORD (var1 VARCHAR2(100));
   first_rec first_rectype;

   TYPE second_rectype IS RECORD
      (nested_rec first_rectype := first_rec);
BEGIN
   ...
END;<A
CLASS="indexterm"
NAME="AUTOID-8498"
></A
></PRE
></BLOCKQUOTE
></LI
></UL
></DIV
></DIV
><DIV
CLASS="htmlnav"
><P
></P
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch09_05.htm"
TITLE="9.5 Assigning Values to and from Records"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 9.5 Assigning Values to and from Records"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="book"
HREF="index.htm"
TITLE="Oracle PL/SQL Programming, 2nd Edition"
><IMG
SRC="../gifs/txthome.gif"
ALT="Oracle PL/SQL Programming, 2nd Edition"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch09_07.htm"
TITLE="9.7 Nested Records"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 9.7 Nested Records"
BORDER="0"></A
></TD
></TR
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
>9.5 Assigning Values to and from Records</TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="index"
HREF="index/idx_0.htm"
TITLE="Book Index"
><IMG
SRC="../gifs/index.gif"
ALT="Book Index"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
>9.7 Nested Records</TD
></TR
></TABLE
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"></DIV
><IMG SRC="../gifs/smnavbar.gif"
USEMAP="#map"
BORDER="0"
ALT="The Oracle Library Navigation">

<P><font size="-1">
<a href="../copyrght.htm#copy">Copyright (c) 2000</a> O'Reilly &amp; Associates. All rights reserved.
</font></P>

<MAP NAME="map">

<AREA SHAPE="RECT"
COORDS="0,0,35,30"
HREF="../index.htm"
ALT="Library Home">

<AREA SHAPE="RECT"
COORDS="40,0,95,30"
HREF="index.htm"
ALT="Oracle PL/SQL Programming, 2nd. Ed.">

<AREA SHAPE="RECT"
COORDS="100,0,200,30"
HREF="../guide8i/index.htm"
ALT="Guide to Oracle 8i Features">

<AREA SHAPE="RECT"
COORDS="205,0,245,30"
HREF="../bipack/index.htm"
ALT="Oracle Built-in Packages">

<AREA SHAPE="RECT"
COORDS="250,0,320,30"
HREF="../advprog/index.htm"
ALT="Advanced PL/SQL Programming with Packages">

<AREA SHAPE="RECT"
COORDS="325,0,420,30"
HREF="../webapp/index.htm"
ALT="Oracle Web Applications">

<AREA SHAPE="RECT"
COORDS="425,0,490,30"
HREF="../langpkt/index.htm"
ALT="Oracle PL/SQL Language Pocket Reference">

<AREA SHAPE="RECT"
COORDS="495,0,570,30"
HREF="../bipkt/index.htm"
ALT="Oracle PL/SQL Built-ins Pocket Reference">
</MAP>

</BODY
>
<!-- Mirrored from liso.cs.pusan.ac.kr by HTTrack Website Copier/3.x [XR&CO'2001] -->
</HTML
>
