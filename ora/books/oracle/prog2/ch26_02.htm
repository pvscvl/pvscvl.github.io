<HTML
><HEAD
><TITLE
>[Chapter 26] 26.2 Tracing for Production Support</TITLE
><META
NAME="DC.Creator"
CONTENT="Steven Feuerstein &amp; Bill Pribyl"><META
NAME="DC.Date"
CONTENT="2000-04-29T19:13:55Z"><META
NAME="DC.Format"
CONTENT="text/html"
SCHEME="MIME"><META
NAME="DC.Identifier"
CONTENT="O'Reilly and Associates CD-ROM-1-56592-335-9E"><META
NAME="DC.Language"
CONTENT="en-US"><META
NAME="DC.Publisher"
CONTENT="O'Reilly &amp; Associates, Inc."><META
NAME="DC.Source"
CONTENT="1-56592-335-9E"
SCHEME="ISBN"><META
NAME="DC.Subject.Keyword"
CONTENT="Oracle PL/SQL"><META
NAME="DC.Title"
CONTENT="Oracle PL/SQL Programming, 2nd Edition"><META
NAME="DC.Type"
CONTENT="Text.Monograph"><META
NAME="generator"
CONTENT="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><LINK
REL="stylesheet"
TYPE="text/css"
HREF="../style/style1.css"><LINK
REV="made"
HREF="mailto:online-books@oreilly.com"
TITLE="Online Books Comments"><LINK
REL="up"
HREF="ch26_01.htm"
TITLE="26. Tracing PL/SQL Execution"><LINK
REL="prev"
HREF="ch26_01.htm"
TITLE="26.1 The PL/SQL Trace Facility"><LINK
REL="next"
HREF="ch26_03.htm"
TITLE="26.3 Free Format Filtering"></HEAD
><BODY
><DIV
CLASS="htmlnav"
><H1
><IMG
SRC="gifs/smbanner.gif"
ALT="Oracle PL/SQL Programming, 2nd Edition"
USEMAP="#srchmap"
BORDER="0"></H1
><MAP
NAME="srchmap"
><AREA
SHAPE="RECT"
COORDS="0,0,466,65"
HREF="index.htm"
ALT="Oracle PL/SQL Programming, 2nd Edition"><AREA
SHAPE="RECT"
COORDS="467,0,514,18"
HREF="jobjects/fsearch.htm"
ALT="Search this book"></MAP
><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch26_01.htm"
TITLE="26.1 The PL/SQL Trace Facility"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 26.1 The PL/SQL Trace Facility"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><SPAN
CLASS="NAVTITLE"
><A
CLASS="chapter"
REL="up"
HREF="ch26_01.htm"
TITLE="26. Tracing PL/SQL Execution"
>Chapter 26<BR>Tracing PL/SQL Execution</A
></SPAN
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch26_03.htm"
TITLE="26.3 Free Format Filtering"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 26.3 Free Format Filtering"
BORDER="0"></A
></TD
></TR
></TABLE
>&nbsp;<HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"></DIV
><DIV
CLASS="sect1"
><H2
CLASS="sect1"
><A
CLASS="title"
NAME="SQL2-CH-26-SECT-2"
>26.2 Tracing for Production Support</A
></H2
><P
CLASS="para"
>You build a PL/SQL-based application. You debug it, probably by placing calls to some kind of trace procedure throughout your code.[<A
CLASS="footnote"
HREF="#AUTOID-23448"
>1</A
>] Finally, after very careful QA and extensive testing with users, the application is deployed out into the field. You now have hundreds of people working with your code across the country (or maybe just in a single building). </P
><BLOCKQUOTE
CLASS="footnote"
><DIV
CLASS="footnote"
><P
CLASS="para"
><A
CLASS="footnote"
NAME="AUTOID-23448"
>[1]</A
> Unless you are lucky enough to be using one of the few PL/SQL debuggers out there in the marketplace like Platinum's SQL-Station or Oracle's Procedure Builder.</P
></DIV
></BLOCKQUOTE
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="ch26-idx-998428-1"
></A
>And, of course, problems rear their ugly heads. A user calls the support line and says that his program is behaving in a certain way. You cannot easily reproduce the problem. You are not entirely sure that the environment in which you are running your code is the same as that of your user. What you would really like to do is connect into his session and watch what he is doing as he is doing it. </P
><P
CLASS="para"
>This section explores an implementation of a package architecture which allows you to "hook" into running programs and perform production support. You can also adapt it for use as a debugger/execution trace mechanism. </P
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="SQL2-CH-26-SECT-2.1"
>26.2.1 Features of a Real-Time Support Mechanism</A
></H3
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="ch26-idx-998429-1"
></A
>First, let's come up with a concise definition of "real-time" support for PL/SQL-based applications: the ability to watch or analyze the activity of a currently connected Oracle user without disturbing that user's activity or otherwise affecting the behavior of the application. This is, obviously, very different from simply running the "same" code under the "same" circumstances&nbsp;-- that is a simulation of what your users are doing. </P
><P
CLASS="para"
>To achieve this real-time support, you need to be able to get information out of your PL/SQL program and place it in some kind of repository where you can analyze what is going on and come up with fixes. You also need to be able to enable and disable the support mechanism while the user session is executing. </P
><P
CLASS="para"
>Based on my discussions with customers and my own experience, here are the kinds of features developers need to effectively support their applications: </P
><UL
CLASS="itemizedlist"
><LI
CLASS="listitem"
><P
CLASS="para"
>The mechanism should be completely transparent to the user&nbsp;-- both when it is enabled and when it is disabled. </P
></LI
><LI
CLASS="listitem"
><P
CLASS="para"
>A support person can enable the mechanism "remotely," that is, she can connect into a running session, turn on (or turn off) the real-time trace, and then analyze the application behavior. </P
></LI
><LI
CLASS="listitem"
><P
CLASS="para"
>When placing the trace inside the PL/SQL application code, the developer can specify a filter of some kind (nested levels, numeric ranges, categories, or some other type of filter) so that the support trace can be turned on selectively within the application. </P
></LI
><LI
CLASS="listitem"
><P
CLASS="para"
>Output from the support mechanism can be changed and specified for each support session. In other words, sometimes you might want to write the trace information to a file, sometimes to a database pipe, and sometimes to a database table. </P
></LI
></UL
><P
CLASS="para"
>In this chapter, I can't provide a detailed implementation of all these features. Instead, I will discuss some of the more interesting challenges, and offer you ideas on building such a mechanism yourself. </P
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="SQL2-CH-26-SECT-2.2"
>26.2.2 Starting and Stopping a Support Session</A
></H3
><P
CLASS="para"
>How do you tell an Oracle session which is already up and running that you want to take a look around at its internal processing? How do you tell it that you are done and that it should stop feeding you information? Well, let's assume that you have put a call to the trace startup procedure at the beginning of each program. It would look something like this: </P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>CREATE OR REPLACE PROCEDURE calctotals
IS
BEGIN
   trace.startup ('calctotals');
   . . .
END;
/</PRE
></BLOCKQUOTE
><P
CLASS="para"
>I could then have trace.startup check <EM
CLASS="emphasis"
>something somehow</EM
> to see whether the trace mechanism should be turned on or off. I could do the same thing in any other trace procedure which is placed inside application code. Let's take the simplest and most direct approach: using a database table. </P
><P
CLASS="para"
>I create a table as follows:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>CREATE TABLE tracetab_activate
   (username VARCHAR2(60),
    action VARCHAR2(20));</PRE
></BLOCKQUOTE
><P
CLASS="para"
>Then I add these constants and function to the trace package:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>CREATE OR REPLACE PACKAGE trace
IS
   /* Just showing the part of the package that is relevant */
   /* for this functionality. */
   c_start CONSTANT CHAR(1) := 'Y';
   c_stop CONSTANT CHAR(1) := 'N';

   FUNCTION activated (username_in IN VARCHAR2) RETURN BOOLEAN;
END trace;
/

CREATE OR REPLACE PACKAGE BODY trace
IS
   /* Just showing the part of the package that is relevant
      for this functionality. */

   FUNCTION activated (username_in IN VARCHAR2) RETURN BOOLEAN
   IS
      CURSOR act_cur
      IS
         SELECT action FROM tracetab_activate
          WHERE username = UPPER (username_in);

      act_rec act_cur%ROWTYPE;
   BEGIN
      OPEN act_cur;
      FETCH act_cur INTO act_rec;
      RETURN (act_rec.action = c_start);
   END activated;

END trace;
/</PRE
></BLOCKQUOTE
><P
CLASS="para"
>With this function in place, I can modify my trace.startup procedure as follows: </P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>PROCEDURE startup (context_in IN VARCHAR2)
IS
BEGIN
   IF activated (USER)
   THEN
      log;
   ELSE
      nolog;
   END IF;

   /* Then the rest of the procedure activity. */
END startup;</PRE
></BLOCKQUOTE
><P
CLASS="para"
>In other words, if the user should be activated, I call the trace.log procedure to turn on logging for that session. All calls to execution trace programs will then write their information out to the log specified by the PLVlog package (it can be an operating system file, database table, database pipe, etc.). </P
><P
CLASS="para"
>Normally, the activation table would be kept empty. If a user calls with a problem, the support person can get that user's Oracle account name and issue an insert (I hope through some sort of GUI interface) as follows: </P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>INSERT INTO tracetab_activate VALUES ('SAM_I_AM', 'Y');</PRE
></BLOCKQUOTE
><P
CLASS="para"
>The next time Sam I Am's session executes trace.startup, the trace will be activated and the analysis can commence. To deactivate the real-time trace, the support person can simply delete that record from the table. Then the next time trace.startup is executed, logging will be turned off. </P
><P
CLASS="para"
>This approach provides a straightforward mechanism to "get inside" an already-running session. One concern about using the trace.activated function in this way, however, is that a query against the tracetab_activate must be performed every time that trace.startup (and other trace "show" programs) is encountered. This could turn into an unacceptable amount of overhead if an application is well-modularized. </P
><P
CLASS="para"
>That's the difference between a prototype and a production-quality utility. To really make this architecture successful, it would very likely need to be fine-tuned. One refinement is to maintain a counter in the trace package and be able to specify that you want to check for activation of the trace logging only every 50 or 100 or 1000 calls to trace programs. This would cut down on the overhead by skipping lots of queries, but it would also mean that it might take longer to activate the trace.<A
CLASS="indexterm"
NAME="AUTOID-23489"
></A
> <A
CLASS="indexterm"
NAME="AUTOID-23490"
></A
> </P
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="SQL2-CH-26-SECT-2.3"
>26.2.3 Filtering Trace Information</A
></H3
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="ch26-idx-998433-1"
></A
>Another critical element of a successful support mechanism is the ability to specify which trace information you want to see. If a system contains four main subsystems (with lots of interactions) and hundreds of programs, you're probably going to want to look at trace information from a particular area of functionality, based on the clues provided by the user. </P
><P
CLASS="para"
>There are many different approaches one can take to filtering out trace messages so the support person or developer (let's call this person the analyzer) sees only what is relevant at that time. Here are the ideas I have thought of: </P
><DL
CLASS="variablelist"
><DT
CLASS="term"
>Free format</DT
><DD
CLASS="listitem"
><P
CLASS="para"
>Allow the analyzer to provide a wildcard string which any trace message must be LIKE in order to actively logged during this connection. Knowing this in advance, a developer could concatenate a "context" or level or category to the beginning of the message string. This is the most primitive form of filtering and requires all developers to know about the way in which trace performs its filter check. </P
></DD
><DT
CLASS="term"
>Structured interface</DT
><DD
CLASS="listitem"
><P
CLASS="para"
>Provide a separate argument in calls to programs like trace.startup and trace.show which would allow a developer to explicitly associate a level (integer) or category (string) with a given trace. With this approach, the trace message is kept distinct from the filter criteria. This is probably easier for developers to work with, but it requires more work within trace to provide an interface through which the analyzer can request a trace just for specific levels, ranges of levels, or one or more categories. </P
></DD
></DL
><P
CLASS="para"
>If you are going to try to design your own package to handle this kind of functionality, you will find yourself at a crossroads of sorts. How much effort do you want to put into something like this versus how much effort are you going to require that developers/analyzers make in order to take advantage of your package? It can sometimes be hard to justify the resources required to "do it right." </P
><P
CLASS="para"
>Obviously, I can't make that decision for you. In fact, I had trouble making that decision for myself as I designed the PLVxmn package of PL/Vision. I can, however, review what I think an appropriate interface would be to support these different approaches. </P
></DIV
></DIV
><DIV
CLASS="htmlnav"
><P
></P
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch26_01.htm"
TITLE="26.1 The PL/SQL Trace Facility"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 26.1 The PL/SQL Trace Facility"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="book"
HREF="index.htm"
TITLE="Oracle PL/SQL Programming, 2nd Edition"
><IMG
SRC="../gifs/txthome.gif"
ALT="Oracle PL/SQL Programming, 2nd Edition"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch26_03.htm"
TITLE="26.3 Free Format Filtering"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 26.3 Free Format Filtering"
BORDER="0"></A
></TD
></TR
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
>26.1 The PL/SQL Trace Facility</TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="index"
HREF="index/idx_0.htm"
TITLE="Book Index"
><IMG
SRC="../gifs/index.gif"
ALT="Book Index"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
>26.3 Free Format Filtering</TD
></TR
></TABLE
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"></DIV
><IMG SRC="../gifs/smnavbar.gif"
USEMAP="#map"
BORDER="0"
ALT="The Oracle Library Navigation">

<P><font size="-1">
<a href="../copyrght.htm#copy">Copyright (c) 2000</a> O'Reilly &amp; Associates. All rights reserved.
</font></P>

<MAP NAME="map">

<AREA SHAPE="RECT"
COORDS="0,0,35,30"
HREF="../index.htm"
ALT="Library Home">

<AREA SHAPE="RECT"
COORDS="40,0,95,30"
HREF="index.htm"
ALT="Oracle PL/SQL Programming, 2nd. Ed.">

<AREA SHAPE="RECT"
COORDS="100,0,200,30"
HREF="../guide8i/index.htm"
ALT="Guide to Oracle 8i Features">

<AREA SHAPE="RECT"
COORDS="205,0,245,30"
HREF="../bipack/index.htm"
ALT="Oracle Built-in Packages">

<AREA SHAPE="RECT"
COORDS="250,0,320,30"
HREF="../advprog/index.htm"
ALT="Advanced PL/SQL Programming with Packages">

<AREA SHAPE="RECT"
COORDS="325,0,420,30"
HREF="../webapp/index.htm"
ALT="Oracle Web Applications">

<AREA SHAPE="RECT"
COORDS="425,0,490,30"
HREF="../langpkt/index.htm"
ALT="Oracle PL/SQL Language Pocket Reference">

<AREA SHAPE="RECT"
COORDS="495,0,570,30"
HREF="../bipkt/index.htm"
ALT="Oracle PL/SQL Built-ins Pocket Reference">
</MAP>

</BODY
>
<!-- Mirrored from liso.cs.pusan.ac.kr by HTTrack Website Copier/3.x [XR&CO'2001] -->
</HTML
>
