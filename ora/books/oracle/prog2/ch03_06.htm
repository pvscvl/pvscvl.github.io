<HTML
><HEAD
><TITLE
>[Chapter 3] 3.6 Using Comments Effectively</TITLE
><META
NAME="DC.Creator"
CONTENT="Steven Feuerstein &amp; Bill Pribyl"><META
NAME="DC.Date"
CONTENT="2000-04-29T18:51:08Z"><META
NAME="DC.Format"
CONTENT="text/html"
SCHEME="MIME"><META
NAME="DC.Identifier"
CONTENT="O'Reilly and Associates CD-ROM-1-56592-335-9E"><META
NAME="DC.Language"
CONTENT="en-US"><META
NAME="DC.Publisher"
CONTENT="O'Reilly &amp; Associates, Inc."><META
NAME="DC.Source"
CONTENT="1-56592-335-9E"
SCHEME="ISBN"><META
NAME="DC.Subject.Keyword"
CONTENT="Oracle PL/SQL"><META
NAME="DC.Title"
CONTENT="Oracle PL/SQL Programming, 2nd Edition"><META
NAME="DC.Type"
CONTENT="Text.Monograph"><META
NAME="generator"
CONTENT="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><LINK
REL="stylesheet"
TYPE="text/css"
HREF="../style/style1.css"><LINK
REV="made"
HREF="mailto:online-books@oreilly.com"
TITLE="Online Books Comments"><LINK
REL="up"
HREF="ch03_01.htm"
TITLE="3. Effective Coding Style"><LINK
REL="prev"
HREF="ch03_05.htm"
TITLE="3.5 Formatting Packages"><LINK
REL="next"
HREF="ch03_07.htm"
TITLE="3.7 Documenting the Entire Package"></HEAD
><BODY
><DIV
CLASS="htmlnav"
><H1
><IMG
SRC="gifs/smbanner.gif"
ALT="Oracle PL/SQL Programming, 2nd Edition"
USEMAP="#srchmap"
BORDER="0"></H1
><MAP
NAME="srchmap"
><AREA
SHAPE="RECT"
COORDS="0,0,466,65"
HREF="index.htm"
ALT="Oracle PL/SQL Programming, 2nd Edition"><AREA
SHAPE="RECT"
COORDS="467,0,514,18"
HREF="jobjects/fsearch.htm"
ALT="Search this book"></MAP
><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch03_05.htm"
TITLE="3.5 Formatting Packages"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 3.5 Formatting Packages"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><SPAN
CLASS="NAVTITLE"
><A
CLASS="chapter"
REL="up"
HREF="ch03_01.htm"
TITLE="3. Effective Coding Style"
>Chapter 3<BR>Effective Coding Style</A
></SPAN
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch03_07.htm"
TITLE="3.7 Documenting the Entire Package"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 3.7 Documenting the Entire Package"
BORDER="0"></A
></TD
></TR
></TABLE
>&nbsp;<HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"></DIV
><DIV
CLASS="sect1"
><H2
CLASS="sect1"
><A
CLASS="title"
NAME="SQL2-CH-3-SECT-6"
>3.6 Using Comments Effectively</A
></H2
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="ch03-idx-220735-1"
></A
><A
CLASS="indexterm"
NAME="ch03-idx-220735-2"
></A
>The object of an effective coding style is to make the program more understandable and maintainable. Most programs will benefit from documentation which explains what is going on inside those programs. There are two forms of code documentation: external and internal. External documentation is descriptive information about a program which is written and stored separately from the program itself. Internal documentation, also known as inline documentation or comments, is placed within the program itself, either at the program level or the statement level. (For an introduction to inline documentation and the types of PL/SQL comments, see the section called <A
CLASS="xref"
HREF="ch02_05.htm#SQL2-CH-2-SECT-5.1"
>Section 2.5, "Comments"</A
>" in <A
CLASS="xref"
HREF="ch02_01.htm"
>Chapter 2</A
>.) </P
><P
CLASS="para"
>The best kind of internal documentation derives from your programming style. If you apply many of the guidelines in this chapter and throughout this book, you will be able to write code which is, to a great extent, self-documenting. Here are some general tips: </P
><UL
CLASS="itemizedlist"
><LI
CLASS="listitem"
><P
CLASS="para"
>Write straightforward code that avoids clever tricks.</P
></LI
><LI
CLASS="listitem"
><P
CLASS="para"
>Think of names for variables and modules that accurately describe their purpose. </P
></LI
><LI
CLASS="listitem"
><P
CLASS="para"
>Use named constants instead of literal values.</P
></LI
><LI
CLASS="listitem"
><P
CLASS="para"
>Employ a clean, consistent layout.</P
></LI
></UL
><P
CLASS="para"
>Do all these things and more, and you will find that you need to write fewer comments to explain your code. </P
><P
CLASS="para"
>Reducing the need for comments is important. Few developers make or have the time for extensive documentation in addition to their development efforts, and, more importantly, many comments tend to duplicate the code. This raises a maintenance issue because those comments will have to be changed when the code is changed. </P
><P
CLASS="para"
>While it is my hope that after reading this book you will write more self-documenting code, there is little doubt that you will still need to comment your code. The following example shows the use of single- and multiline comments in PL/SQL: </P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>PROCEDURE calc_totals (company_id IN NUMBER,--The company key
                       total_type IN VARCHAR2--ALL or NET
                      );

/*
|| For every employee hired more than five years ago,
|| give them a bonus and send them an e-mail notification.
*/
FOR emp_rec IN emp_cur (ADD_MONTHS (SYSDATE, -60))
LOOP
   apply_bonus (emp_rec.employee_id);
   send_notification (emp_rec.employee_id);
END LOOP;

-- IF :SYSTEM.FORM_STATUS = 'CHANGED' THEN COMMIT; END IF;

FUNCTION display_user
   (user_id IN NUMBER /* Must be valid ID */, user_type IN VARCHAR2)</PRE
></BLOCKQUOTE
><P
CLASS="para"
>The first example uses the single-line comment syntax to include endline descriptions for each parameter in the procedure specification. The second example uses a multiline comment to explain the purpose of the FOR loop. The third example uses the double-hyphen to comment out a whole line of code. The last example embeds a comment in the middle of a line of code using the block comment syntax. </P
><P
CLASS="para"
>These two types of comments offer the developer flexibility in how to provide inline documentation. The rest of this section offers guidelines for writing effective comments in your PL/SQL programs. </P
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="SQL2-CH-3-SECT-6.1"
>3.6.1 Comment As You Code</A
></H3
><P
CLASS="para"
>It is very difficult to make time to document your code after you have finished writing your program. Psychologically, you want to (and often need to) move on to the next programming challenge after you get a program working. </P
><P
CLASS="para"
>You may also have a harder time writing your comments once you have put some distance between your brain cells and those lines of code. Why exactly did you write the loop that way? Where precisely is the value of that global variable set? Unless you have total recall, post-development documentation can be a real challenge. </P
><P
CLASS="para"
>The last and perhaps most important reason to write your comments as you write your code is that the resulting code will have fewer bugs and (independent of the comments themselves) be easier to understand. </P
><P
CLASS="para"
>When you write a comment you (theoretically) explain what your code is meant to accomplish. If you find it difficult to come up with that explanation, there is a good chance that you lack a full understanding of what the program does or should do. </P
><P
CLASS="para"
>The effort that you make to come up with the right comment will certainly improve your comprehension, and may also result in code correction. In this sense, good inline documentation can be as beneficial as a review of your code by a peer. In both cases, the explanation will reveal important information about your program. </P
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="SQL2-CH-3-SECT-6.2"
>3.6.2 Explain the Why&nbsp;-- Not the How&nbsp;-- of Your Program</A
></H3
><P
CLASS="para"
>What do you think of the comments in the following Oracle Forms trigger code? </P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>-- If the total compensation is more than the maximum...
IF :employee.total_comp &gt; maximum_salary
THEN
   -- Inform the user of the problem.
   MESSAGE ('Total compensation exceeds maximum. Please re-enter!');

   -- Reset the counter to zero.
   :employee.comp_counter := 0;

   -- Raise the exception to stop trigger processing.
   RAISE FORM_TRIGGER_FAILURE;
END IF;</PRE
></BLOCKQUOTE
><P
CLASS="para"
>None of these comments add anything to the comprehension of the code. Each comment simply restates the line of code, which in most cases is self-explanatory. </P
><P
CLASS="para"
>Avoid adding comments simply so that you can say, "Yes, I documented my code!" Rely as much as possible on the structure and layout of the code itself to express the meaning of the program. Reserve your comments to explain the Why of your code: What business rule is it meant to implement? Why did you need to implement a certain requirement in a certain way? </P
><P
CLASS="para"
>In addition, use comments to translate internal, computer-language terminology into something meaningful for the application. Suppose you are using Oracle Forms GLOBAL variables to keep track of a list of names entered. Does the following comment explain the purpose of the code or simply restate what the code is doing? </P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>/* Set the number of elements to zero. */
:GLOBAL.num_elements := 0;</PRE
></BLOCKQUOTE
><P
CLASS="para"
>Once again, the comment adds no value. Does the next comment offer additional information? </P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>/* Empty the list of names. */
:GLOBAL.num_elements := 0;</PRE
></BLOCKQUOTE
><P
CLASS="para"
>This comment actually explains the purpose of the assignment of the global to zero. By setting the number of elements to zero, I will have effectively emptied the list. This comment has translated the "computer lingo" into a description of the effect of the statement. Of course, you would be even better off hiding the fact that you use this particular global variable to empty a list and instead build a procedure as follows: </P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>PROCEDURE empty_list IS
BEGIN
   :GLOBAL.num_elements := 0;
END;</PRE
></BLOCKQUOTE
><P
CLASS="para"
>Then to empty a list you would not need any comment at all. You could simply include the statement: </P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>empty_list;</PRE
></BLOCKQUOTE
><P
CLASS="para"
>and the meaning would be perfectly clear.</P
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="SQL2-CH-3-SECT-6.3"
>3.6.3 Make Comments Easy to Enter and Maintain</A
></H3
><P
CLASS="para"
>You shouldn't spend a lot of time formatting your comments. You need to develop a style that is clean and easy to read, but also easy to maintain. When you have to change a comment, you shouldn't have to reformat every line in the comment. Lots of fancy formatting is a good indication that you have a high-maintenance documentation style. The following block comment is a maintenance nightmare: </P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>/*
===========================================================
| Parameter          Description                          |
|                                                         |
| company_id         The primary key to company           |
| start_date         Start date used for date range       |
| end_date           End date for date range              |
===========================================================
*/</PRE
></BLOCKQUOTE
><P
CLASS="para"
>The right-justified vertical lines and column formatting for the parameters require way too much effort to enter and maintain. What happens if you add a parameter with a very long name? What if you need to write a longer description? A simpler and more maintainable version of this comment might be: </P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>/*
===========================================================
| Parameter - Description
|
| company_id - The primary key to company
| start_date - Start date used for date range
| end_date - End date for date range
===========================================================
*/</PRE
></BLOCKQUOTE
><P
CLASS="para"
>I like to use the following format for my block comments:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>/*
|| I put the slash-asterisk that starts the comment on a line all by
|| itself. Then I start each line in the comment block with a double
|| vertical bar to highlight the presence of the comment. Finally,
|| I place the asterisk-slash on a line all by itself.
*/</PRE
></BLOCKQUOTE
><P
CLASS="para"
>On the negative side, the vertical bars have to be erased whenever I reformat the lines, but that isn't too much of an effort. On the positive side, those vertical bars make it very easy for a programmer who is scanning the left side of the code to pick out the comments. </P
><P
CLASS="para"
>I put the comment markers on their own lines to increase the whitespace in my program and set off the comment. That way I can avoid "heavy" horizontal lines full of delimiters, such as asterisks or dashes, and avoid having to match the longest line in the comment. </P
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="SQL2-CH-3-SECT-6.4"
>3.6.4 Maintain Indentation</A
></H3
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="ch03-idx-220736-1"
></A
>Inline commentary should reinforce the indentation and therefore the logical structure of the program. For example, it is very easy to find the comments in the make_array procedures shown below. I do not use any double-hyphens, so the slash-asterisk sequences stand out nicely. In addition, all comments start in the first column, so I can easily scan down the left-hand side of the program and pick out the documentation:<A
CLASS="indexterm"
NAME="AUTOID-2793"
></A
> </P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>PROCEDURE make_array (num_rows_in IN INTEGER)
/* Create an array of specified numbers of rows */
IS
/* Handles to Oracle Forms structures */
   col_id GROUPCOLUMN;
   rg_id RECORDGROUP;
BEGIN
/* Create new record group and column */
   rg_id := CREATE_GROUP ('array');
   col_id := ADD_GROUP_COLUMN ('col');
/*
|| Use a loop to create the specified number of rows and
|| set the value in each cell.
*/
   FOR row_index IN 1 .. num_rows_in
   LOOP
/* Create a row at the end of the group to accept data */
      ADD_GROUP_ROW (return_value, END_OF_GROUP);
      FOR col_index IN 1 .. num_columns_in
      LOOP
/* Set the initial value in the cell */
         SET_GROUP_NUMBER_CELL (col_id, row_index, 0);
      END LOOP;
   END LOOP;
END;</PRE
></BLOCKQUOTE
><P
CLASS="para"
>The problem with these comments is precisely that they do all start in the first column, regardless of the code they describe. The most glaring example of this formatting "disconnect" comes in the inner loop, repeated below: </P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>      FOR col_index IN 1 .. num_columns_in
      LOOP
/* Set the initial value in the cell */
         SET_GROUP_NUMBER_CELL (col_id, row_index, 0);
      END LOOP;</PRE
></BLOCKQUOTE
><P
CLASS="para"
>Your eye follows the three-space indentation very smoothly into the loop and then you are forced to move all the way to the left to pick up the comment. This format disrupts your reading of the code and therefore its readability. The code loses some of its ability to communicate the logical flow "at a glance," because the physical sense of indentation as logical flow is marred by the comments. Finally, you may end up writing full-line comments which are much longer than the code they appear next to, further distorting the code. </P
><P
CLASS="para"
>Your comments should always be indented at the same level as the code which they describe. Assuming the comments come before the code itself, those lines of descriptive text will initiate the indentation at that logical level, which will also reinforce that structure. The make_array procedure, properly indented, is shown below: </P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>PROCEDURE make_array (num_rows_in IN INTEGER)
/* Create an array of specified numbers of rows */
IS
   /* Handles to Oracle Forms structures */
   col_id GROUPCOLUMN;
   rg_id RECORDGROUP;
BEGIN
   /* Create new record group and column */
   rg_id := CREATE_GROUP ('array');
   col_id := ADD_GROUP_COLUMN ('col');
   /*
   || Use a loop to create the specified number of rows and
   || set the value in each cell.
   */
   FOR row_index IN 1 .. num_rows_in
   LOOP
      /* Create a row at the end of the group to accept data */
      ADD_GROUP_ROW (return_value, END_OF_GROUP);
      FOR col_index IN 1 .. num_columns_in
      LOOP
         /* Set the initial value in the cell */
         SET_GROUP_NUMBER_CELL (col_id, row_index, 0);
      END LOOP;
   END LOOP;
END;</PRE
></BLOCKQUOTE
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>      END LOOP;</PRE
></BLOCKQUOTE
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>   END LOOP;
END;<A
CLASS="indexterm"
NAME="AUTOID-2804"
></A
></PRE
></BLOCKQUOTE
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="SQL2-CH-3-SECT-6.5"
>3.6.5 Comment Declaration Statements</A
></H3
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="AUTOID-2808"
></A
> I propose the following simple rule for documenting declaration statements: </P
><TABLE
CLASS="simplelist"
BORDER="0"
><TR
><TD
CLASS="member"
><EM
CLASS="emphasis"
>Provide a comment for each and every declaration</EM
>.</TD
></TR
></TABLE
><P
CLASS="para"
>Does that sound excessive? Well, I must admit that I do not follow this guideline at all times, but I bet people who read my code wish I had. The declaration of a variable which seems to me to be perfectly clear may be a source of abiding confusion for others. Like many other people, I still have difficulty understanding that what is obvious to me is not necessarily obvious to someone else. </P
><P
CLASS="para"
>Consider the declaration section in the next example. The commenting style is inconsistent. I use double-hyphens for a two-line comment; then I use the standard block format to provide information about three variables all at once. I provide comments for some variables, but not for others. It's hard to make sense of the various declaration statements: </P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>DECLARE
   -- Assume a maximum string length of 1000 for a line of text.
   text_line VARCHAR2 (1000);
   len_text    NUMBER;
   /*
   || Variables used to keep track of string scan:
   ||    atomic_count - running count of atomics scanned.
   ||    still_scanning - Boolean variable controls WHILE loop.
   */
   atomic_count NUMBER := 1;
   still_scanning BOOLEAN;
BEGIN</PRE
></BLOCKQUOTE
><P
CLASS="para"
>Let's recast this declaration section using my proposed guideline: a comment for each declaration statement. In the result shown below, the declaration section is now longer than the first version, but it uses whitespace more effectively. Each declaration has its own comment, set off by a blank line if a single-line comment: </P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>DECLARE
   /* Assume a maximum string length of 1000 for a line of text. */
   text_line VARCHAR2 (1000);

   /* Calculate length of string at time of declaration */
   len_string NUMBER;

   /* Running count of number of atomics scanned */
   atomic_count NUMBER := 1;

   /* Boolean variable that controls WHILE loop */
   still_scanning BOOLEAN ;
BEGIN<A
CLASS="indexterm"
NAME="AUTOID-2819"
></A
></PRE
></BLOCKQUOTE
></DIV
></DIV
><DIV
CLASS="htmlnav"
><P
></P
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch03_05.htm"
TITLE="3.5 Formatting Packages"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 3.5 Formatting Packages"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="book"
HREF="index.htm"
TITLE="Oracle PL/SQL Programming, 2nd Edition"
><IMG
SRC="../gifs/txthome.gif"
ALT="Oracle PL/SQL Programming, 2nd Edition"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch03_07.htm"
TITLE="3.7 Documenting the Entire Package"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 3.7 Documenting the Entire Package"
BORDER="0"></A
></TD
></TR
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
>3.5 Formatting Packages</TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="index"
HREF="index/idx_0.htm"
TITLE="Book Index"
><IMG
SRC="../gifs/index.gif"
ALT="Book Index"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
>3.7 Documenting the Entire Package</TD
></TR
></TABLE
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"></DIV
><IMG SRC="../gifs/smnavbar.gif"
USEMAP="#map"
BORDER="0"
ALT="The Oracle Library Navigation">

<P><font size="-1">
<a href="../copyrght.htm#copy">Copyright (c) 2000</a> O'Reilly &amp; Associates. All rights reserved.
</font></P>

<MAP NAME="map">

<AREA SHAPE="RECT"
COORDS="0,0,35,30"
HREF="../index.htm"
ALT="Library Home">

<AREA SHAPE="RECT"
COORDS="40,0,95,30"
HREF="index.htm"
ALT="Oracle PL/SQL Programming, 2nd. Ed.">

<AREA SHAPE="RECT"
COORDS="100,0,200,30"
HREF="../guide8i/index.htm"
ALT="Guide to Oracle 8i Features">

<AREA SHAPE="RECT"
COORDS="205,0,245,30"
HREF="../bipack/index.htm"
ALT="Oracle Built-in Packages">

<AREA SHAPE="RECT"
COORDS="250,0,320,30"
HREF="../advprog/index.htm"
ALT="Advanced PL/SQL Programming with Packages">

<AREA SHAPE="RECT"
COORDS="325,0,420,30"
HREF="../webapp/index.htm"
ALT="Oracle Web Applications">

<AREA SHAPE="RECT"
COORDS="425,0,490,30"
HREF="../langpkt/index.htm"
ALT="Oracle PL/SQL Language Pocket Reference">

<AREA SHAPE="RECT"
COORDS="495,0,570,30"
HREF="../bipkt/index.htm"
ALT="Oracle PL/SQL Built-ins Pocket Reference">
</MAP>

</BODY
>
<!-- Mirrored from liso.cs.pusan.ac.kr by HTTrack Website Copier/3.x [XR&CO'2001] -->
</HTML
>
