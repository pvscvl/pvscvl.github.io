<HTML
><HEAD
><TITLE
>[Appendix C] C.10 DBMS_PIPE</TITLE
><META
NAME="DC.Creator"
CONTENT="Steven Feuerstein &amp; Bill Pribyl"><META
NAME="DC.Date"
CONTENT="2000-04-29T19:14:34Z"><META
NAME="DC.Format"
CONTENT="text/html"
SCHEME="MIME"><META
NAME="DC.Identifier"
CONTENT="O'Reilly and Associates CD-ROM-1-56592-335-9E"><META
NAME="DC.Language"
CONTENT="en-US"><META
NAME="DC.Publisher"
CONTENT="O'Reilly &amp; Associates, Inc."><META
NAME="DC.Source"
CONTENT="1-56592-335-9E"
SCHEME="ISBN"><META
NAME="DC.Subject.Keyword"
CONTENT="Oracle PL/SQL"><META
NAME="DC.Title"
CONTENT="Oracle PL/SQL Programming, 2nd Edition"><META
NAME="DC.Type"
CONTENT="Text.Monograph"><META
NAME="generator"
CONTENT="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><LINK
REL="stylesheet"
TYPE="text/css"
HREF="../style/style1.css"><LINK
REV="made"
HREF="mailto:online-books@oreilly.com"
TITLE="Online Books Comments"><LINK
REL="up"
HREF="appc_01.htm"
TITLE="C. Built-In Packages"><LINK
REL="prev"
HREF="appc_09.htm#SQL2-AP-C-SECT-9.0.2"
TITLE="C.9 DBMS_OUTPUT"><LINK
REL="next"
HREF="appc_11.htm#appc-76-fm2xml"
TITLE="C.11 DBMS_ROWID (PL/SQL8 Only)"></HEAD
><BODY
><DIV
CLASS="htmlnav"
><H1
><IMG
SRC="gifs/smbanner.gif"
ALT="Oracle PL/SQL Programming, 2nd Edition"
USEMAP="#srchmap"
BORDER="0"></H1
><MAP
NAME="srchmap"
><AREA
SHAPE="RECT"
COORDS="0,0,466,65"
HREF="index.htm"
ALT="Oracle PL/SQL Programming, 2nd Edition"><AREA
SHAPE="RECT"
COORDS="467,0,514,18"
HREF="jobjects/fsearch.htm"
ALT="Search this book"></MAP
><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="appc_09.htm#SQL2-AP-C-SECT-9.0.2"
TITLE="C.9 DBMS_OUTPUT"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: C.9 DBMS_OUTPUT"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><SPAN
CLASS="NAVTITLE"
><A
CLASS="appendix"
REL="up"
HREF="appc_01.htm"
TITLE="C. Built-In Packages"
>Appendix C<BR>Built-In Packages</A
></SPAN
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="appc_11.htm#appc-76-fm2xml"
TITLE="C.11 DBMS_ROWID (PL/SQL8 Only)"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: C.11 DBMS_ROWID (PL/SQL8 Only)"
BORDER="0"></A
></TD
></TR
></TABLE
>&nbsp;<HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"></DIV
><DIV
CLASS="sect1"
><H2
CLASS="sect1"
><A
CLASS="title"
NAME="SQL2-AP-C-SECT-10"
>C.10 DBMS_PIPE</A
></H2
><P
CLASS="para"
>The <A
CLASS="indexterm"
NAME="appc-idx-854880-1"
></A
><A
CLASS="indexterm"
NAME="appc-idx-854880-2"
></A
><A
CLASS="indexterm"
NAME="appc-idx-854880-3"
></A
><A
CLASS="indexterm"
NAME="appc-idx-854880-4"
></A
>DBMS_PIPE package provides a way for sessions in the same database instance to communicate with each other. One of the most useful aspects of Oracle pipes is that pipe communication is asynchronous: you need not COMMIT a transaction in order to initiate pipe-related activity, as is necessary with the DBMS_ALERT package. You can send a message through and receive a message from a pipe at any time. Indeed, more than one session can read or write to the same pipe. </P
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="SQL2-AP-C-SECT-10.0.1"
>C.10.1 The CREATE_PIPE function</A
></H3
><P
CLASS="para"
>With PL/SQL Release 2.2 only, the CREATE_PIPE function allows you to explicitly request the creation of a pipe, either public or private. The specification is: </P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>FUNCTION DBMS_PIPE.CREATE_PIPE
   (pipename IN VARCHAR2,
    maxpipesize IN INTEGER DEFAULT 8192,
    private IN BOOLEAN DEFAULT TRUE)
RETURN INTEGER;</PRE
></BLOCKQUOTE
><P
CLASS="para"
>The function returns a numeric status code. If it returns 0, then the pipe was created successfully. </P
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="SQL2-AP-C-SECT-10.0.2"
>C.10.2 The NEXT_ITEM_TYPE function</A
></H3
><P
CLASS="para"
>The <A
CLASS="indexterm"
NAME="AUTOID-24468"
></A
> NEXT_ITEM_TYPE function returns the type of the next item in the local message buffer. Data is put in the message buffer with both the PACK_MESSAGE and the RECEIVE_MESSAGE procedures. Use NEXT_ITEM_TYPE to decide which kind of variable you should use to receive the data from the buffer with the overloaded UNPACK_MESSAGE module. The specification is: </P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>FUNCTION DBMS_PIPE.NEXT_ITEM_TYPE RETURN INTEGER;</PRE
></BLOCKQUOTE
><P
CLASS="para"
>where the return value for the function is one of the following:</P
><DL
CLASS="variablelist"
><DT
CLASS="term"
>0 </DT
><DD
CLASS="listitem"
><P
CLASS="para"
>No more items in buffer</P
></DD
><DT
CLASS="term"
>9</DT
><DD
CLASS="listitem"
><P
CLASS="para"
>VARCHAR2</P
></DD
><DT
CLASS="term"
>6</DT
><DD
CLASS="listitem"
><P
CLASS="para"
>NUMBER</P
></DD
><DT
CLASS="term"
>12</DT
><DD
CLASS="listitem"
><P
CLASS="para"
>DATE</P
></DD
></DL
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="SQL2-AP-C-SECT-10.0.3"
>C.10.3 The PACK_MESSAGE procedure</A
></H3
><P
CLASS="para"
>The <A
CLASS="indexterm"
NAME="AUTOID-24492"
></A
> PACK_MESSAGE procedure packs an item into the message buffer for your session. A pipe message item may have a datatype of VARCHAR2, NUMBER, or DATE. The specifications are: </P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>PROCEDURE DBMS_PIPE.PACK_MESSAGE (item IN VARCHAR2);
PROCEDURE DBMS_PIPE.PACK_MESSAGE (item IN NUMBER);
PROCEDURE DBMS_PIPE.PACK_MESSAGE (item IN DATE);</PRE
></BLOCKQUOTE
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="SQL2-AP-C-SECT-10.0.4"
>C.10.4 The PURGE procedure</A
></H3
><P
CLASS="para"
>The <A
CLASS="indexterm"
NAME="AUTOID-24498"
></A
>PURGE procedure empties the contents of the named pipe. The specification is: </P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>PROCEDURE DBMS_PIPE.PURGE (pipename IN VARCHAR2);</PRE
></BLOCKQUOTE
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="SQL2-AP-C-SECT-10.0.5"
>C.10.5 The RECEIVE_MESSAGE function</A
></H3
><P
CLASS="para"
>The <A
CLASS="indexterm"
NAME="AUTOID-24504"
></A
>RECEIVE_MESSAGE function receives a message from the named pipe and copies the contents of that message to the local message buffer. Once you receive the message into the buffer, you can use the UNPACK_MESSAGE procedure to extract the items from the buffer into local variables. The specification is: </P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>FUNCTION DBMS_PIPE.RECEIVE_MESSAGE
   (pipename IN VARCHAR2, timeout IN INTEGER DEFAULT MAXWAIT)
RETURN INTEGER;</PRE
></BLOCKQUOTE
><P
CLASS="para"
>The function returns a status, which will be one of the following INTEGER values: </P
><DL
CLASS="variablelist"
><DT
CLASS="term"
>0</DT
><DD
CLASS="listitem"
><P
CLASS="para"
>Successful receipt of message</P
></DD
><DT
CLASS="term"
>1</DT
><DD
CLASS="listitem"
><P
CLASS="para"
>Timed out waiting to receive a message</P
></DD
><DT
CLASS="term"
>2</DT
><DD
CLASS="listitem"
><P
CLASS="para"
>Record in pipe too big for buffer; this should never happen</P
></DD
><DT
CLASS="term"
>3</DT
><DD
CLASS="listitem"
><P
CLASS="para"
>Receipt of message was interrupted</P
></DD
></DL
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="SQL2-AP-C-SECT-10.0.6"
>C.10.6 The REMOVE_PIPE function</A
></H3
><P
CLASS="para"
>The <A
CLASS="indexterm"
NAME="AUTOID-24528"
></A
> REMOVE_PIPE function removes a pipe from shared memory. This function must be called to remove a pipe created explicitly with CREATE_PIPE. If your pipe is created implicitly, then it will be removed with a call to PURGE or whenever the pipe is emptied. The specification is: </P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>FUNCTION DBMS_PIPE.REMOVE_PIPE (pipename IN VARCHAR2) RETURN INTEGER; </PRE
></BLOCKQUOTE
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="appc-67-fm2xml"
>C.10.7 The RESET_BUFFER procedure</A
></H3
><P
CLASS="para"
>The <A
CLASS="indexterm"
NAME="AUTOID-24534"
></A
> RESET_BUFFER procedure clears the buffer so that both PACK_MESSAGE and UNPACK_MESSAGE will work from the first item. The specification is: </P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>PROCEDURE DBMS_PIPE.RESET_BUFFER;</PRE
></BLOCKQUOTE
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="SQL2-AP-C-SECT-10.0.8"
>C.10.8 The SEND_MESSAGE function</A
></H3
><P
CLASS="para"
>The <A
CLASS="indexterm"
NAME="AUTOID-24540"
></A
> SEND_MESSAGE function sends the contents of the local message buffer to the named pipe. The specification is: </P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>FUNCTION DBMS_PIPE.SEND_MESSAGE
  (pipename IN VARCHAR2,
   timeout IN INTEGER DEFAULT MAXWAIT,
   maxpipesize IN INTEGER DEFAULT 8192)
RETURN INTEGER;</PRE
></BLOCKQUOTE
><P
CLASS="para"
>The function returns a status code as follows:</P
><DL
CLASS="variablelist"
><DT
CLASS="term"
>0</DT
><DD
CLASS="listitem"
><P
CLASS="para"
>Successful receipt of message</P
></DD
><DT
CLASS="term"
>1</DT
><DD
CLASS="listitem"
><P
CLASS="para"
>Timed out waiting to send a message</P
></DD
><DT
CLASS="term"
>3</DT
><DD
CLASS="listitem"
><P
CLASS="para"
>Sending of message was interrupted</P
></DD
></DL
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="SQL2-AP-C-SECT-10.0.9"
>C.10.9 The UNIQUE_SESSION_NAME function</A
></H3
><P
CLASS="para"
>The <A
CLASS="indexterm"
NAME="AUTOID-24560"
></A
>UNIQUE_SESSION_NAME function returns a name that is unique among the sessions currently connected to the database. You can use this function to obtain a name for a pipe that you know will not be in use by any other sessions. The specification is: </P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>FUNCTION DBMS_PIPE.UNIQUE_SESSION_NAME RETURN VARCHAR2;</PRE
></BLOCKQUOTE
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="SQL2-AP-C-SECT-10.0.10"
>C.10.10 The UNPACK_MESSAGE procedure</A
></H3
><P
CLASS="para"
>The <A
CLASS="indexterm"
NAME="AUTOID-24566"
></A
>UNPACK_MESSAGE procedure unpacks the next item from the local message buffer and deposits it into the specified local variable. The specification is: </P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>PROCEDURE DBMS_PIPE.UNPACK_MESSAGE (item OUT VARCHAR2);<A
CLASS="indexterm"
NAME="AUTOID-24569"
></A
>
<A
CLASS="indexterm"
NAME="AUTOID-24570"
></A
>

PROCEDURE DBMS_PIPE.UNPACK_MESSAGE (item OUT NUMBER);
PROCEDURE DBMS_PIPE.UNPACK_MESSAGE (item OUT DATE);</PRE
></BLOCKQUOTE
></DIV
></DIV
><DIV
CLASS="htmlnav"
><P
></P
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="appc_09.htm#SQL2-AP-C-SECT-9.0.2"
TITLE="C.9 DBMS_OUTPUT"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: C.9 DBMS_OUTPUT"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="book"
HREF="index.htm"
TITLE="Oracle PL/SQL Programming, 2nd Edition"
><IMG
SRC="../gifs/txthome.gif"
ALT="Oracle PL/SQL Programming, 2nd Edition"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="appc_11.htm#appc-76-fm2xml"
TITLE="C.11 DBMS_ROWID (PL/SQL8 Only)"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: C.11 DBMS_ROWID (PL/SQL8 Only)"
BORDER="0"></A
></TD
></TR
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
>C.9 DBMS_OUTPUT</TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="index"
HREF="index/idx_0.htm"
TITLE="Book Index"
><IMG
SRC="../gifs/index.gif"
ALT="Book Index"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
>C.11 DBMS_ROWID (PL/SQL8 Only)</TD
></TR
></TABLE
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"></DIV
><IMG SRC="../gifs/smnavbar.gif"
USEMAP="#map"
BORDER="0"
ALT="The Oracle Library Navigation">

<P><font size="-1">
<a href="../copyrght.htm#copy">Copyright (c) 2000</a> O'Reilly &amp; Associates. All rights reserved.
</font></P>

<MAP NAME="map">

<AREA SHAPE="RECT"
COORDS="0,0,35,30"
HREF="../index.htm"
ALT="Library Home">

<AREA SHAPE="RECT"
COORDS="40,0,95,30"
HREF="index.htm"
ALT="Oracle PL/SQL Programming, 2nd. Ed.">

<AREA SHAPE="RECT"
COORDS="100,0,200,30"
HREF="../guide8i/index.htm"
ALT="Guide to Oracle 8i Features">

<AREA SHAPE="RECT"
COORDS="205,0,245,30"
HREF="../bipack/index.htm"
ALT="Oracle Built-in Packages">

<AREA SHAPE="RECT"
COORDS="250,0,320,30"
HREF="../advprog/index.htm"
ALT="Advanced PL/SQL Programming with Packages">

<AREA SHAPE="RECT"
COORDS="325,0,420,30"
HREF="../webapp/index.htm"
ALT="Oracle Web Applications">

<AREA SHAPE="RECT"
COORDS="425,0,490,30"
HREF="../langpkt/index.htm"
ALT="Oracle PL/SQL Language Pocket Reference">

<AREA SHAPE="RECT"
COORDS="495,0,570,30"
HREF="../bipkt/index.htm"
ALT="Oracle PL/SQL Built-ins Pocket Reference">
</MAP>

</BODY
>
<!-- Mirrored from liso.cs.pusan.ac.kr by HTTrack Website Copier/3.x [XR&CO'2001] -->
</HTML
>
