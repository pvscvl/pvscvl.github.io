<HTML
><HEAD
><TITLE
>[Chapter 6] 6.10 Cursor Parameters</TITLE
><META
NAME="DC.Creator"
CONTENT="Steven Feuerstein &amp; Bill Pribyl"><META
NAME="DC.Date"
CONTENT="2000-04-29T18:56:52Z"><META
NAME="DC.Format"
CONTENT="text/html"
SCHEME="MIME"><META
NAME="DC.Identifier"
CONTENT="O'Reilly and Associates CD-ROM-1-56592-335-9E"><META
NAME="DC.Language"
CONTENT="en-US"><META
NAME="DC.Publisher"
CONTENT="O'Reilly &amp; Associates, Inc."><META
NAME="DC.Source"
CONTENT="1-56592-335-9E"
SCHEME="ISBN"><META
NAME="DC.Subject.Keyword"
CONTENT="Oracle PL/SQL"><META
NAME="DC.Title"
CONTENT="Oracle PL/SQL Programming, 2nd Edition"><META
NAME="DC.Type"
CONTENT="Text.Monograph"><META
NAME="generator"
CONTENT="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><LINK
REL="stylesheet"
TYPE="text/css"
HREF="../style/style1.css"><LINK
REV="made"
HREF="mailto:online-books@oreilly.com"
TITLE="Online Books Comments"><LINK
REL="up"
HREF="ch06_01.htm"
TITLE="6. Database Interaction and Cursors"><LINK
REL="prev"
HREF="ch06_09.htm#SQL2-CH-6-SECT-9.1"
TITLE="6.9 Cursor Attributes"><LINK
REL="next"
HREF="ch06_11.htm#SQL2-CH-6-SECT-11.1"
TITLE="6.11 SELECT FOR UPDATE in Cursors"></HEAD
><BODY
><DIV
CLASS="htmlnav"
><H1
><IMG
SRC="gifs/smbanner.gif"
ALT="Oracle PL/SQL Programming, 2nd Edition"
USEMAP="#srchmap"
BORDER="0"></H1
><MAP
NAME="srchmap"
><AREA
SHAPE="RECT"
COORDS="0,0,466,65"
HREF="index.htm"
ALT="Oracle PL/SQL Programming, 2nd Edition"><AREA
SHAPE="RECT"
COORDS="467,0,514,18"
HREF="jobjects/fsearch.htm"
ALT="Search this book"></MAP
><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch06_09.htm#SQL2-CH-6-SECT-9.1"
TITLE="6.9 Cursor Attributes"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 6.9 Cursor Attributes"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><SPAN
CLASS="NAVTITLE"
><A
CLASS="chapter"
REL="up"
HREF="ch06_01.htm"
TITLE="6. Database Interaction and Cursors"
>Chapter 6<BR>Database Interaction and Cursors</A
></SPAN
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch06_11.htm#SQL2-CH-6-SECT-11.1"
TITLE="6.11 SELECT FOR UPDATE in Cursors"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 6.11 SELECT FOR UPDATE in Cursors"
BORDER="0"></A
></TD
></TR
></TABLE
>&nbsp;<HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"></DIV
><DIV
CLASS="sect1"
><H2
CLASS="sect1"
><A
CLASS="title"
NAME="SQL2-CH-6-SECT-10"
>6.10 Cursor Parameters</A
></H2
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="ch06-idx-104763-1"
></A
><A
CLASS="indexterm"
NAME="ch06-idx-104763-2"
></A
>You are probably familiar with parameters for procedures and functions. Parameters provide a way to pass information into and out of a module. Used properly, parameters improve the usefulness and flexibility of modules. </P
><P
CLASS="para"
>PL/SQL also allows you to pass parameters into cursors. The same rationale for using parameters in modules applies to parameters for cursors: </P
><UL
CLASS="itemizedlist"
><LI
CLASS="listitem"
><P
CLASS="para"
><EM
CLASS="emphasis"
>A parameter makes the cursor more reusable.</EM
> Instead of hardcoding a value into the WHERE clause of a query to select particular information, you can use a parameter and then pass different values to the WHERE clause each time a cursor is opened. </P
></LI
><LI
CLASS="listitem"
><P
CLASS="para"
><EM
CLASS="emphasis"
>A parameter avoids scoping problems.</EM
> When you pass parameters instead of hardcoding values, the result set for that cursor is not tied to a specific variable in a program or block. If your program has nested blocks, you can define the cursor at a higher-level (enclosing) block and use it in any of the subblocks with variables defined in those local blocks. </P
></LI
></UL
><P
CLASS="para"
>You can specify as many cursor parameters as you want and need. When you OPEN the parameter, you need to include an argument in the parameter list for each parameter, except for trailing parameters that have default values. </P
><P
CLASS="para"
>When should you parameterize your cursor? I apply the same rule of thumb to cursors as to modules: if I am going to use the cursor in more than one place, with different values for the same WHERE clause, then I should create a parameter for the cursor. </P
><P
CLASS="para"
>Let's take a look at the difference between parameterized and unparameterized cursors. First, a cursor without any parameters: </P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>CURSOR joke_cur IS
   SELECT name, category, last_used_date
     FROM joke;</PRE
></BLOCKQUOTE
><P
CLASS="para"
>The result set of this cursor is all the rows in the joke table. If I just wanted to retrieve all jokes in the HUSBAND category, I would need to add a WHERE clause as follows: </P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>CURSOR joke_cur IS
   SELECT name, category, last_used_date
     FROM joke
    WHERE category = 'HUSBAND';</PRE
></BLOCKQUOTE
><P
CLASS="para"
>I didn't use a cursor parameter to accomplish this task, nor did I need to. The joke_cur cursor now retrieves only those jokes about husbands. That's all well and good, but what if I also would like to see lightbulb jokes and then chicken-and-egg jokes and finally, as my ten-year-old would certainly demand, all my knock-knock jokes? </P
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="SQL2-CH-6-SECT-10.1"
>6.10.1 Generalizing Cursors with Parameters</A
></H3
><P
CLASS="para"
>I really don't want to write a separate cursor for each different category&nbsp;-- that is definitely not a data-driven approach to programming. Instead, I would much rather be able to change the joke cursor so that it can accept different categories and return the appropriate rows. The best (though not the only) way to do this is with a cursor parameter: </P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>DECLARE
   /*
   || Cursor with parameter list consisting of a single
   || string parameter.
   */
   CURSOR joke_cur (category_in VARCHAR2)
   IS
      SELECT name, category, last_used_date
        FROM joke
       WHERE category = UPPER (category_in);

   joke_rec joke_cur%ROWTYPE;

BEGIN
   /* Now when I open the cursor, I also pass the argument */
   OPEN joke_cur (:joke.category);
   FETCH joke_cur INTO joke_rec;</PRE
></BLOCKQUOTE
><P
CLASS="para"
>I added a parameter list after the cursor name and before the IS keyword. I took out the hardcoded "HUSBAND" and replaced it with "UPPER (category_in)" so that I could enter "HUSBAND", "husband", or "HuSbAnD" and the cursor would still work. Now when I open the cursor, I specify the value I wish to pass as the category by including that value (which can be a literal, constant, or expression) inside parentheses. At the moment the cursor is opened, the SELECT statement is parsed and bound using the specified value for category_in. The result set is identified and the cursor is readied for fetching. </P
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="SQL2-CH-6-SECT-10.2"
>6.10.2 Opening Cursors with Parameters</A
></H3
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="AUTOID-5807"
></A
> <A
CLASS="indexterm"
NAME="AUTOID-5810"
></A
> <A
CLASS="indexterm"
NAME="AUTOID-5812"
></A
>I can OPEN that same cursor with any category I like. Now I don't have to write a separate cursor to accommodate this requirement: </P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>OPEN joke_cur (:joke.category);
OPEN joke_cur ('husband');
OPEN joke_cur ('politician');
OPEN joke_cur (:joke.relation || ' IN-LAW');</PRE
></BLOCKQUOTE
><P
CLASS="para"
>The most common place to use a parameter in a cursor is in the WHERE clause, but you can make reference to it anywhere in the SELECT statement, as shown here: </P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>DECLARE
   CURSOR joke_cur (category_in VARCHAR2)
   IS
      SELECT name, category_in, last_used_date
        FROM joke
       WHERE category = UPPER (category_in);</PRE
></BLOCKQUOTE
><P
CLASS="para"
>Instead of returning the category from the table, I simply pass back the category_in parameter in the select list. The result will be the same either way, because my WHERE clause restricts categories to the parameter value. </P
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="SQL2-CH-6-SECT-10.3"
>6.10.3 Scope of Cursor Parameters</A
></H3
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="AUTOID-5821"
></A
>The scope of the cursor parameter is confined to that cursor. You cannot refer to the cursor parameter outside of the SELECT statement associated with the cursor. The following PL/SQL fragment will not compile because the program_name identifier is not a local variable in the block. Instead, it is a formal parameter for the cursor and is defined only inside the cursor: </P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>DECLARE
   CURSOR scariness_cur (program_name VARCHAR2)
   IS
      SELECT SUM (scary_level) total_scary_level
        FROM tales_from_the_crypt
       WHERE prog_name = program_name;
BEGIN
   program_name := 'THE BREATHING MUMMY'; /* Illegal reference */
   OPEN scariness_cur (program_name);
END;</PRE
></BLOCKQUOTE
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="SQL2-CH-6-SECT-10.4"
>6.10.4 Cursor Parameter Modes </A
></H3
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="AUTOID-5828"
></A
> The syntax for cursor parameters is very similar to that of procedures and functions, with the restriction that a cursor parameter can be an IN parameter only. You cannot specify OUT or IN OUT modes for cursor parameters (see <A
CLASS="xref"
HREF="ch15_01.htm"
>Chapter 15, <CITE
CLASS="chapter"
>Procedures and Functions</CITE
></A
>, for more information on parameter modes). </P
><P
CLASS="para"
>The IN and IN OUT modes are used to pass values out of a procedure through that parameter. This doesn't make sense for a cursor. Values cannot be passed back out of a cursor through the parameter list. Information is retrieved from a cursor only by fetching a record and copying values from the column list with an INTO clause. </P
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="SQL2-CH-6-SECT-10.5"
>6.10.5 Default Values for Parameters</A
></H3
><P
CLASS="para"
>Cursor parameters can be assigned default values. Here is an example of a parameterized cursor with a default value: </P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>CURSOR emp_cur (emp_id_in NUMBER := 0)
IS
   SELECT employee_id, emp_name
     FROM employee
    WHERE employee_id = emp_id_in;</PRE
></BLOCKQUOTE
><P
CLASS="para"
>So if Joe Smith's employee ID is 1001, the following statements would set my_emp_id to 1001 and my_emp_name to JOE SMITH: </P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>OPEN emp_cur (1001);
FETCH emp_cur INTO my_emp_id, my_emp_name;</PRE
></BLOCKQUOTE
><P
CLASS="para"
>Because the emp_id_in parameter has a default value, I can also open and fetch from the cursor without specifying a parameter. If I do not specify a value for the parameter, the cursor uses the default value.<A
CLASS="indexterm"
NAME="AUTOID-5839"
></A
> <A
CLASS="indexterm"
NAME="AUTOID-5840"
></A
> </P
></DIV
></DIV
><DIV
CLASS="htmlnav"
><P
></P
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch06_09.htm#SQL2-CH-6-SECT-9.1"
TITLE="6.9 Cursor Attributes"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 6.9 Cursor Attributes"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="book"
HREF="index.htm"
TITLE="Oracle PL/SQL Programming, 2nd Edition"
><IMG
SRC="../gifs/txthome.gif"
ALT="Oracle PL/SQL Programming, 2nd Edition"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch06_11.htm#SQL2-CH-6-SECT-11.1"
TITLE="6.11 SELECT FOR UPDATE in Cursors"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 6.11 SELECT FOR UPDATE in Cursors"
BORDER="0"></A
></TD
></TR
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
>6.9 Cursor Attributes</TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="index"
HREF="index/idx_0.htm"
TITLE="Book Index"
><IMG
SRC="../gifs/index.gif"
ALT="Book Index"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
>6.11 SELECT FOR UPDATE in Cursors</TD
></TR
></TABLE
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"></DIV
><IMG SRC="../gifs/smnavbar.gif"
USEMAP="#map"
BORDER="0"
ALT="The Oracle Library Navigation">

<P><font size="-1">
<a href="../copyrght.htm#copy">Copyright (c) 2000</a> O'Reilly &amp; Associates. All rights reserved.
</font></P>

<MAP NAME="map">

<AREA SHAPE="RECT"
COORDS="0,0,35,30"
HREF="../index.htm"
ALT="Library Home">

<AREA SHAPE="RECT"
COORDS="40,0,95,30"
HREF="index.htm"
ALT="Oracle PL/SQL Programming, 2nd. Ed.">

<AREA SHAPE="RECT"
COORDS="100,0,200,30"
HREF="../guide8i/index.htm"
ALT="Guide to Oracle 8i Features">

<AREA SHAPE="RECT"
COORDS="205,0,245,30"
HREF="../bipack/index.htm"
ALT="Oracle Built-in Packages">

<AREA SHAPE="RECT"
COORDS="250,0,320,30"
HREF="../advprog/index.htm"
ALT="Advanced PL/SQL Programming with Packages">

<AREA SHAPE="RECT"
COORDS="325,0,420,30"
HREF="../webapp/index.htm"
ALT="Oracle Web Applications">

<AREA SHAPE="RECT"
COORDS="425,0,490,30"
HREF="../langpkt/index.htm"
ALT="Oracle PL/SQL Language Pocket Reference">

<AREA SHAPE="RECT"
COORDS="495,0,570,30"
HREF="../bipkt/index.htm"
ALT="Oracle PL/SQL Built-ins Pocket Reference">
</MAP>

</BODY
>
<!-- Mirrored from liso.cs.pusan.ac.kr by HTTrack Website Copier/3.x [XR&CO'2001] -->
</HTML
>
