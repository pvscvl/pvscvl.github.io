<HTML
><HEAD
><TITLE
>[Chapter 9] 9.4 Programmer-Defined Records</TITLE
><META
NAME="DC.Creator"
CONTENT="Steven Feuerstein &amp; Bill Pribyl"><META
NAME="DC.Date"
CONTENT="2000-04-29T18:58:42Z"><META
NAME="DC.Format"
CONTENT="text/html"
SCHEME="MIME"><META
NAME="DC.Identifier"
CONTENT="O'Reilly and Associates CD-ROM-1-56592-335-9E"><META
NAME="DC.Language"
CONTENT="en-US"><META
NAME="DC.Publisher"
CONTENT="O'Reilly &amp; Associates, Inc."><META
NAME="DC.Source"
CONTENT="1-56592-335-9E"
SCHEME="ISBN"><META
NAME="DC.Subject.Keyword"
CONTENT="Oracle PL/SQL"><META
NAME="DC.Title"
CONTENT="Oracle PL/SQL Programming, 2nd Edition"><META
NAME="DC.Type"
CONTENT="Text.Monograph"><META
NAME="generator"
CONTENT="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><LINK
REL="stylesheet"
TYPE="text/css"
HREF="../style/style1.css"><LINK
REV="made"
HREF="mailto:online-books@oreilly.com"
TITLE="Online Books Comments"><LINK
REL="up"
HREF="ch09_01.htm"
TITLE="9. Records in PL/SQL"><LINK
REL="prev"
HREF="ch09_03.htm#SQL2-CH-9-SECT-3.2"
TITLE="9.3 Cursor-Based Records"><LINK
REL="next"
HREF="ch09_05.htm"
TITLE="9.5 Assigning Values to and from Records"></HEAD
><BODY
><DIV
CLASS="htmlnav"
><H1
><IMG
SRC="gifs/smbanner.gif"
ALT="Oracle PL/SQL Programming, 2nd Edition"
USEMAP="#srchmap"
BORDER="0"></H1
><MAP
NAME="srchmap"
><AREA
SHAPE="RECT"
COORDS="0,0,466,65"
HREF="index.htm"
ALT="Oracle PL/SQL Programming, 2nd Edition"><AREA
SHAPE="RECT"
COORDS="467,0,514,18"
HREF="jobjects/fsearch.htm"
ALT="Search this book"></MAP
><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch09_03.htm#SQL2-CH-9-SECT-3.2"
TITLE="9.3 Cursor-Based Records"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 9.3 Cursor-Based Records"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><SPAN
CLASS="NAVTITLE"
><A
CLASS="chapter"
REL="up"
HREF="ch09_01.htm"
TITLE="9. Records in PL/SQL"
>Chapter 9<BR>Records in PL/SQL</A
></SPAN
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch09_05.htm"
TITLE="9.5 Assigning Values to and from Records"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 9.5 Assigning Values to and from Records"
BORDER="0"></A
></TD
></TR
></TABLE
>&nbsp;<HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"></DIV
><DIV
CLASS="sect1"
><H2
CLASS="sect1"
><A
CLASS="title"
NAME="SQL2-CH-9-SECT-4"
>9.4 Programmer-Defined Records</A
></H2
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="ch09-idx-181157-1"
></A
> <A
CLASS="indexterm"
NAME="ch09-idx-181157-2"
></A
> Now you know how to create a record with the same structure as a table or a cursor. These are certainly very useful constructs in a programming language designed to interface with the Oracle RDBMS. Yet do these kinds of records cover all of our needs for composite data structures? </P
><P
CLASS="para"
>What if I want to create a record that has nothing to do with either a table or a cursor? What if I want to create a record whose structure is derived from several different tables and views? Should I really have to create a "dummy" cursor just so I can end up with a record of the desired structure? For just these kinds of situations, PL/SQL offers programmer-defined records, declared with the TYPE...RECORD statement.[<A
CLASS="footnote"
HREF="#AUTOID-8264"
>1</A
>] </P
><BLOCKQUOTE
CLASS="footnote"
><DIV
CLASS="footnote"
><P
CLASS="para"
><A
CLASS="footnote"
NAME="AUTOID-8264"
>[1]</A
>  Programmer-defined records are supported&nbsp;-- but undocumented&nbsp;-- in PL/SQL Release 1.1.</P
></DIV
></BLOCKQUOTE
><P
CLASS="para"
>With the programmer-defined record, you have complete control over the number, names, and datatypes of fields in the record. </P
><P
CLASS="para"
>To declare a programmer-defined record, you must perform two distinct steps: </P
><OL
CLASS="orderedlist"
><LI
CLASS="listitem"
><P
CLASS="para"
>Declare or define a record TYPE containing the structure you want in your record. </P
></LI
><LI
CLASS="listitem"
><P
CLASS="para"
>Use this record TYPE as the basis for declarations of your own actual records having that structure. </P
></LI
></OL
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="SQL2-CH-9-SECT-4.1"
>9.4.1 Declaring Programmer-Defined Record TYPEs</A
></H3
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="AUTOID-8276"
></A
> <A
CLASS="indexterm"
NAME="AUTOID-8278"
></A
> <A
CLASS="indexterm"
NAME="AUTOID-8281"
></A
> You declare a record type with the record TYPE statement. The TYPE statement specifies the name of the new record structure, and the components or fields which make up that record. </P
><P
CLASS="para"
>The general syntax of the record TYPE definition is:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>TYPE &lt;type_name&gt; IS RECORD
   (&lt;field_name1&gt; &lt;datatype1&gt;,
    &lt;field_name2&gt; &lt;datatype2&gt;,
    ...
    &lt;field_nameN&gt; &lt;datatypeN&gt;
   );</PRE
></BLOCKQUOTE
><P
CLASS="para"
>where &lt;field_nameN&gt; is the name of the Nth field in the record and &lt;datatypeN&gt; is the datatype of that Nth field. The datatype of a record's field can be any of the following: </P
><UL
CLASS="itemizedlist"
><LI
CLASS="listitem"
><P
CLASS="para"
>Pre-defined datatype (VARCHAR2, NUMBER, etc.)</P
></LI
><LI
CLASS="listitem"
><P
CLASS="para"
>Programmer-defined subtype (PL/SQL Release 2.1 and above)</P
></LI
><LI
CLASS="listitem"
><P
CLASS="para"
>Declarations using %TYPE attributes</P
></LI
><LI
CLASS="listitem"
><P
CLASS="para"
>Declarations using %ROWTYPE attributes</P
></LI
><LI
CLASS="listitem"
><P
CLASS="para"
>PL/SQL record type</P
></LI
><LI
CLASS="listitem"
><P
CLASS="para"
>PL/SQL table type </P
></LI
></UL
><P
CLASS="para"
>You cannot, on the other hand, declare a field to be an exception or a cursor. (With PL/SQL Release 2.3, you can declare a field to be a cursor variable.) </P
><P
CLASS="para"
>Here is an example of a record TYPE statement:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>TYPE company_rectype IS RECORD
   (comp# company.company_id%TYPE,
    name  company.name%TYPE);</PRE
></BLOCKQUOTE
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="SQL2-CH-9-SECT-4.2"
>9.4.2 Declaring the Record</A
></H3
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="AUTOID-8305"
></A
> <A
CLASS="indexterm"
NAME="AUTOID-8308"
></A
> Once you have created your own customized record types, you can use those types in declarations of specific records. The actual record declarations have the following format: </P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>&lt;record_name&gt; &lt;record_type&gt;;</PRE
></BLOCKQUOTE
><P
CLASS="para"
>where &lt;record_name&gt; is the name of the record and &lt;record_type&gt; is the name of a record type you have defined with the TYPE...RECORD statement. </P
><P
CLASS="para"
>To build a customer sales record, for example, I would first establish a RECORD type called customer_sales_type, as follows: </P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>TYPE customer_sales_rectype IS RECORD
   (customer_id   NUMBER (5),
    customer_name customer.name%TYPE,
    total_sales   NUMBER (15,2)
   );</PRE
></BLOCKQUOTE
><P
CLASS="para"
>This is a three-field record structure which contains the primary key and name information for a customer, as well as a calculated, total amount of sales for the customer. I can then use this new record type to declare records with the same structure as this type: </P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>prev_customer_sales_rec customer_sales_rectype;
top_customer_rec customer_sales_rectype;</PRE
></BLOCKQUOTE
><P
CLASS="para"
>Notice that I do not need the %ROWTYPE attribute, or any other kind of keyword, to denote this as a record declaration. The %ROWTYPE attribute is only needed for table and cursor records. </P
><P
CLASS="para"
>The customer_sales_rectype identifier is itself a record type, so PL/SQL does not need the attribute to properly declare the record. You simply must make sure that the record type is defined before you try to use it. You can declare it in the same declaration section as the records themselves, in a block which encloses the current block of code, or in a package specification that makes that record type globally accessible. </P
><P
CLASS="para"
>In addition to specifying the datatype, you can supply default values for individual fields in a record with the DEFAULT or <KBD
CLASS="command"
>:=</KBD
> syntax. You can also apply constraints to the declaration of a record's fields. You can specify that a field in a record be NOT NULL (in which case you must also assign a default value). Finally, each field name within a record must be unique. </P
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="SQL2-CH-9-SECT-4.3"
>9.4.3 Examples of Programmer-Defined Record Declarations</A
></H3
><P
CLASS="para"
>Suppose that I declare the following subtype (an alias for VARCHAR2), a cursor, and a PL/SQL table data structure: </P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>SUBTYPE long_line_type IS VARCHAR2;

CURSOR company_sales_cur IS
   SELECT name, SUM (order_amount) total_sales
     FROM company c, order o
    WHERE c.company_id = o.company_id;

TYPE employee_ids_tabletype IS
   TABLE OF employee.employee_id
   INDEX BY BINARY_INTEGER;</PRE
></BLOCKQUOTE
><P
CLASS="para"
>I can then declare the following programmer-defined records:</P
><UL
CLASS="itemizedlist"
><LI
CLASS="listitem"
><P
CLASS="para"
>A programmer-defined record which is a subset of the company table, plus a PL/SQL table of employees. I use the %TYPE attribute to link the fields in the record directly to the table. I then add a third field which is actually a PL/SQL table of employee ID numbers. (PL/SQL tables are described in <A
CLASS="xref"
HREF="ch10_01.htm"
>Chapter 10, <CITE
CLASS="chapter"
>PL/SQL Tables</CITE
></A
>.) </P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>TYPE company_rectype IS RECORD
   (company_id    company.company_id%TYPE,
    company_name  company.name%TYPE,
    new_hires_tab employee_ids_tabletype);</PRE
></BLOCKQUOTE
></LI
><LI
CLASS="listitem"
><P
CLASS="para"
>A mish-mash of a record which demonstrates the different kinds of field declarations in a record, including: the NOT NULL constraint, use of a subtype, the %TYPE attribute, default value specification, a PL/SQL table, and a nested record. These varieties are shown below. </P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>TYPE mishmash_rectype IS RECORD
   (emp_number NUMBER(10) NOT NULL,
    paragraph_text long_line_type,
    company_nm company.name%TYPE,
    total_sales company_sales_cur.total_sales%TYPE := 0,
    new_hires_tab employee_ids_tabletype,
    prefers_nonsmoking_fl BOOLEAN := FALSE,
    new_company_rec company_rectype
   );

BEGIN</PRE
></BLOCKQUOTE
></LI
></UL
><P
CLASS="para"
>As you can readily see, PL/SQL offers you tremendous flexibility in designing your own record structures. They can represent your tables, views, and SELECT statements in a PL/SQL program. They can also, however, be arbitrarily complex, with fields that are actually records within records, and with fields that are PL/SQL tables.<A
CLASS="indexterm"
NAME="AUTOID-8335"
></A
> <A
CLASS="indexterm"
NAME="AUTOID-8336"
></A
> </P
></DIV
></DIV
><DIV
CLASS="htmlnav"
><P
></P
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch09_03.htm#SQL2-CH-9-SECT-3.2"
TITLE="9.3 Cursor-Based Records"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 9.3 Cursor-Based Records"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="book"
HREF="index.htm"
TITLE="Oracle PL/SQL Programming, 2nd Edition"
><IMG
SRC="../gifs/txthome.gif"
ALT="Oracle PL/SQL Programming, 2nd Edition"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch09_05.htm"
TITLE="9.5 Assigning Values to and from Records"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 9.5 Assigning Values to and from Records"
BORDER="0"></A
></TD
></TR
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
>9.3 Cursor-Based Records</TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="index"
HREF="index/idx_0.htm"
TITLE="Book Index"
><IMG
SRC="../gifs/index.gif"
ALT="Book Index"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
>9.5 Assigning Values to and from Records</TD
></TR
></TABLE
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"></DIV
><IMG SRC="../gifs/smnavbar.gif"
USEMAP="#map"
BORDER="0"
ALT="The Oracle Library Navigation">

<P><font size="-1">
<a href="../copyrght.htm#copy">Copyright (c) 2000</a> O'Reilly &amp; Associates. All rights reserved.
</font></P>

<MAP NAME="map">

<AREA SHAPE="RECT"
COORDS="0,0,35,30"
HREF="../index.htm"
ALT="Library Home">

<AREA SHAPE="RECT"
COORDS="40,0,95,30"
HREF="index.htm"
ALT="Oracle PL/SQL Programming, 2nd. Ed.">

<AREA SHAPE="RECT"
COORDS="100,0,200,30"
HREF="../guide8i/index.htm"
ALT="Guide to Oracle 8i Features">

<AREA SHAPE="RECT"
COORDS="205,0,245,30"
HREF="../bipack/index.htm"
ALT="Oracle Built-in Packages">

<AREA SHAPE="RECT"
COORDS="250,0,320,30"
HREF="../advprog/index.htm"
ALT="Advanced PL/SQL Programming with Packages">

<AREA SHAPE="RECT"
COORDS="325,0,420,30"
HREF="../webapp/index.htm"
ALT="Oracle Web Applications">

<AREA SHAPE="RECT"
COORDS="425,0,490,30"
HREF="../langpkt/index.htm"
ALT="Oracle PL/SQL Language Pocket Reference">

<AREA SHAPE="RECT"
COORDS="495,0,570,30"
HREF="../bipkt/index.htm"
ALT="Oracle PL/SQL Built-ins Pocket Reference">
</MAP>

</BODY
>
<!-- Mirrored from liso.cs.pusan.ac.kr by HTTrack Website Copier/3.x [XR&CO'2001] -->
</HTML
>
