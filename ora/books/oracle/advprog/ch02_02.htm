<HTML
><HEAD
><TITLE
>[Chapter 2] 2.2 Using Effective Coding Style for Packages</TITLE
><META
NAME="DC.Creator"
CONTENT="Steven Feuerstein"><META
NAME="DC.Date"
CONTENT="2000-04-29T18:21:40Z"><META
NAME="DC.Format"
CONTENT="text/html"
SCHEME="MIME"><META
NAME="DC.Identifier"
CONTENT="O'Reilly and Associates-1-56592-238-7E"><META
NAME="DC.Language"
CONTENT="en-US"><META
NAME="DC.Publisher"
CONTENT="O'Reilly &amp; Associates, Inc."><META
NAME="DC.Source"
CONTENT="1-56592-238-7E"
SCHEME="ISBN"><META
NAME="DC.Subject.Keyword"
CONTENT="PL/SQL SQL Oracle Packages"><META
NAME="DC.Title"
CONTENT="Advanced Oracle PL/SQL Programming with Packages"><META
NAME="DC.Type"
CONTENT="Text.Monograph"><META
NAME="generator"
CONTENT="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><LINK
REL="stylesheet"
TYPE="text/css"
HREF="../style/style1.css"><LINK
REV="made"
HREF="mailto:online-books@oreilly.com"
TITLE="Online Books Comments"><LINK
REL="up"
HREF="ch02_01.htm"
TITLE="2. Best Practices for Packages"><LINK
REL="prev"
HREF="ch02_01.htm"
TITLE="2.1 Starting With Packages"><LINK
REL="next"
HREF="ch02_03.htm"
TITLE="2.3 Selecting Package Names"></HEAD>
<BODY><DIV CLASS="htmlnav"
><H1
><IMG
SRC="gifs/smbanner.gif"
ALT="Advanced Oracle PL/SQL Programming with Packages"
USEMAP="#srchmap"
BORDER="0"></H1
><MAP
NAME="srchmap"
><AREA
SHAPE="RECT"
COORDS="0,0,466,65"
HREF="index.htm"
ALT="Advanced Oracle PL/SQL Programming with Packages"><AREA
SHAPE="RECT"
COORDS="467,0,514,18"
HREF="jobjects/fsearch.htm"
ALT="Search this book"></MAP
><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch02_01.htm"
TITLE="2.1 Starting With Packages"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 2.1 Starting With Packages"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><SPAN
CLASS="NAVTITLE"
><A
CLASS="chapter"
REL="up"
HREF="ch02_01.htm"
TITLE="2. Best Practices for Packages"
>Chapter 2<BR>Best Practices for Packages</A
></SPAN
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch02_03.htm"
TITLE="2.3 Selecting Package Names"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 2.3 Selecting Package Names"
BORDER="0"></A
></TD
></TR
></TABLE
>&nbsp;<HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"></DIV
><DIV
CLASS="sect1"
><H2
CLASS="sect1"
><A
CLASS="title"
NAME="ch02-SECT-2"
>2.2 Using Effective Coding Style for Packages</A
></H2
><P
CLASS="para"
>A package is a collection of <SPAN
CLASS="acronym"
>PL/SQL</SPAN
> elements, including data structures (from cursors to constants) and program units (procedures and functions). Packages are generally the most complicated and extended pieces of code <SPAN
CLASS="acronym"
>PL/SQL</SPAN
> developers will write. To make matters worse, the current array of <SPAN
CLASS="acronym"
>PL/SQL</SPAN
> development environments do not offer any tools for viewing and managing a package as a collection. A package is treated and presented no differently from a single function&nbsp;-- just a whole bunch of lines of source code.</P
><P
CLASS="para"
>As a result, it is up to you to design and write your package to make it as readable and maintainable as possible. There are two fundamental strategies you can employ to help meet this objective:</P
><P
CLASS="para"
><EM
CLASS="emphasis"
>Strategy 1:</EM
> Use all available techniques to make your code as clean, modular, and structured as possible.</P
><P
CLASS="para"
><EM
CLASS="emphasis"
>Strategy 2:</EM
> Come up with a consistent coding style and format for your packages&nbsp;-- and get people to follow that style.</P
><P
CLASS="para"
>Many of the other best practices covered in this chapter address the first strategy&nbsp;-- which is clearly the more important and difficult of the two. In this section, I suggest elements of a coding style for packages. It is absolutely critical that you adopt an effective coding style and employ it consistently. This style should be compatible, of course, with the style you use throughout your <SPAN
CLASS="acronym"
>PL/SQL</SPAN
> code. It should also, however, include components that reflect and support the structure and significance of the package. </P
><P
CLASS="para"
>The most basic elements of a package style are, first of all, no different from the style I encourage for all other kinds of <SPAN
CLASS="acronym"
>PL/SQL</SPAN
> code. These elements include:</P
><UL
CLASS="itemizedlist"
><LI
CLASS="listitem"
><P
CLASS="para"
>Use consistent <A
CLASS="indexterm"
NAME="ch02-idx-999931-0"
></A
>indentation to reveal the logical flow of the program and to delineate the different sections of the <SPAN
CLASS="acronym"
>PL/SQL</SPAN
> program structure. Generally, this means that all executable statements are indented in from the <A
CLASS="indexterm"
NAME="ch02-idx-999932-0"
></A
><A
CLASS="indexterm"
NAME="ch02-idx-999932-1"
></A
>BEGIN keyword, the body of a loop is indented within the LOOP and END LOOP keywords, and so on. Within a package, all specification declarations are indented between the IS and END keywords.</P
></LI
><LI
CLASS="listitem"
><P
CLASS="para"
>Code all <A
CLASS="indexterm"
NAME="ch02-idx-999933-0"
></A
><A
CLASS="indexterm"
NAME="ch02-idx-999933-1"
></A
>reserved words in the <SPAN
CLASS="acronym"
>PL/SQL</SPAN
> language in upper-case. Use lower-case for all application-specific identifiers. Generally, this is accomplished with hard-coded literals and the use of UPPER and LOWER. This guideline presents more of a challenge when applied to complex expressions passed to PLVgen as default values, as we'll see later.</P
></LI
><LI
CLASS="listitem"
><P
CLASS="para"
>Use <A
CLASS="indexterm"
NAME="ch02-idx-999934-0"
></A
>comments to add value to the code. Don't bother with comments that simply repeat what the code clearly states. </P
></LI
></UL
><P
CLASS="para"
>The style elements I find valuable particularly for packages include the following:</P
><UL
CLASS="itemizedlist"
><LI
CLASS="listitem"
><P
CLASS="para"
>Use <A
CLASS="indexterm"
NAME="ch02-idx-999935-0"
></A
>banners (specially formatted comment lines) to mark clearly the different groupings of package elements.</P
></LI
><LI
CLASS="listitem"
><P
CLASS="para"
>Use end labels for the package and for all program units defined in the package body.</P
></LI
></UL
><P
CLASS="para"
>The best way to demonstrate these coding styles is to show you the template I use for package construction. I have been writing a lot of <SPAN
CLASS="acronym"
>PL/SQL</SPAN
> code in the past year and I found myself typing the same words and phrases over and over again. To improve my productivity and also the consistency of my code, I built a package called PLVgen to generate <SPAN
CLASS="acronym"
>PL/SQL</SPAN
> programs (see <A
CLASS="xref"
HREF="ch15_01.htm"
>Chapter 15, <CITE
CLASS="chapter"
>PLVvu: Viewing Source Code and Compile Errors</CITE
></A
>). <A
CLASS="xref"
HREF="ch02_02.htm"
>Example 2.1</A
> shows the basic template of a package generated with PLVgen.</P
><BLOCKQUOTE
CLASS="note"
><P
CLASS="para"
><STRONG
>NOTE:</STRONG
>  The <I
CLASS="function"
>PLVgen.pkg</I
> procedure also generated the line numbers to go with the source code.</P
></BLOCKQUOTE
><DIV
CLASS="example"
><H4
CLASS="example"
><A
CLASS="title"
NAME="ch02-33277"
>Example 2.1: A Generated Package Template </A
></H4
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>SQL&gt; exec <A
CLASS="indexterm"
NAME="ch02-idx-999989-0"
></A
>PLVgen.pkg('emp_maint');
  1 CREATE OR REPLACE PACKAGE emp_maint
  2 /*
  3 || Program: emp_maint
  4 ||  Author: Steven Feuerstein
  5 ||    File: emp_maint.SQL
  6 || Created: APR 13, 1996 18:56:59
  7 */
  8 /*HELP
  9 Add help text here...
 10 HELP*/
 11
 12 /*EXAMPLES
 13 Add help text here...
 14 EXAMPLES*/
 15
 16 IS
 17 /* Public Data Structures */
 18
 19 /* Public Programs */
 20
 21    PROCEDURE help (context_in IN VARCHAR2 := NULL);
 22
 23 END emp_maint;
 24 /
 25
 26 CREATE OR REPLACE PACKAGE BODY emp_maint
 27 IS
 28 /* Private Data Structures */
 29
 30 /* Private Programs */
 31
 32 /* Public Programs */
 33
 34    PROCEDURE help (context_in IN VARCHAR2 := NULL)
 35    IS
 36    BEGIN
 37       PLVhlp.show ('s:emp_maint', context_in);
 38    END help;
 39 END emp_maint;
 40 /</PRE
></BLOCKQUOTE
></DIV
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="ch02-idx-999936-0"
></A
>There are several features I would like to highlight in my package template:</P
><TABLE
CLASS="informaltable"
BORDER="1"
CELLPADDING="3"
><THEAD
CLASS="thead"
><TR
CLASS="row"
VALIGN="TOP"
><TH
CLASS="entry"
ALIGN="LEFT"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>Lines</P
></TH
><TH
CLASS="entry"
ALIGN="LEFT"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>Significance</P
></TH
></TR
></THEAD
><TBODY
CLASS="tbody"
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>2-7</P
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>A standard <A
CLASS="indexterm"
NAME="ch02-idx-999937-0"
></A
>header for the package, showing the author, filename, and date created.</P
></TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>8-14</P
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>Stubs for <A
CLASS="indexterm"
NAME="ch02-idx-999938-0"
></A
><A
CLASS="indexterm"
NAME="ch02-idx-999938-1"
></A
><A
CLASS="indexterm"
NAME="ch02-idx-999938-2"
></A
>help text. I have developed an architecture (and the PLVhlp package, described in <A
CLASS="xref"
HREF="ch16_01.htm"
>Chapter 16, <CITE
CLASS="chapter"
>PLVgen: Generating PL/SQL Programs</CITE
></A
>) to provide online help for <SPAN
CLASS="acronym"
>PL/SQL</SPAN
> programs. These comment blocks provide both inline code documentation and help text to users.</P
></TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>17-19</P
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="ch02-idx-999941-0"
></A
>Banners to identify the two main kinds of elements that can appear in a package specification: data structures and program units.</P
></TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>21</P
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>Header for a procedure that delivers online help for this package. Of course, this should only be included if the online help package is being used. </P
></TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>23</P
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>The END statement with the package name appended.</P
></TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>28-32</P
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>Banners to identify the three kinds of elements that can appear in a package body: private data structures, program units, and the implementation of the public program units.</P
></TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>34-38</P
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>The implementation of the help procedure. Notice that the procedure uses an end label with the program name and is also indented in multiple steps from the overall package.</P
></TD
></TR
></TBODY
></TABLE
><P
CLASS="para"
>The <KBD
CLASS="command"
>emp_maint</KBD
> package shown in <A
CLASS="xref"
HREF="ch02_02.htm"
>Example 2.1</A
> contains the most important elements of a package's "look and feel." All elements declared in the specification are indented in from the package definition statement. They exist within the context of the package, and that relationship is made clear through the indentation. The same rule holds true in the package body (you can see this with the definition of the <KBD
CLASS="command"
>help</KBD
> procedure). The banner comment lines, on the other hand, are left-justified to match the margin of the package itself. I do this to make sure that these boundary markers stand out as you scan the code.</P
><P
CLASS="para"
>The banners identifying the different sections become very critical when the package is full of many different elements and runs to hundreds or thousands of lines. They also provide an internal guide during development. As you write a new package program, you may find that you need to create another private variable or private function. If you have the banners in place, you can easily perform a search and then drop this new element into its rightful spot. The alternative (throwing the code in at whatever point of the package you happen to be coding) results in a very chaotic package that is difficult to follow and maintain.</P
><P
CLASS="para"
>As I make clear in the way I created <A
CLASS="xref"
HREF="ch02_02.htm"
>Example 2.1</A
>, you can use <I
CLASS="function"
>PLVgen.pkg</I
> to generate a package with this (or a modified) format.</P
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch02-SECT-2.1"
>2.2.1 Choosing the Order of Elements</A
></H3
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="ch02-idx-999943-0"
></A
><A
CLASS="indexterm"
NAME="ch02-idx-999943-1"
></A
>As with the declaration sections of procedures and functions, you must (both in the package specification and body) declare all variables and data structures before you declare any program units. But what about the order of these program units themselves? As you can see from my banners, I always try to define all my <A
CLASS="indexterm"
NAME="ch02-idx-999944-0"
></A
><A
CLASS="indexterm"
NAME="ch02-idx-999944-1"
></A
><A
CLASS="indexterm"
NAME="ch02-idx-999944-2"
></A
>private modules before any of my public modules. These are the building blocks used by the public programs. I group them together so they are easier to locate.</P
><P
CLASS="para"
>Is this ordering strictly necessary? Yes and no. Yes, you must define a private program before it is referenced by another program in the package (public or private). No, you do not have to group them together. You could instead define all private modules just before they are used by their public counterparts. This can make sense if the private program is only used by a single public program. If it is shared by many public programs (or other private ones, for that matter), then this placement does not accurately reflect its role in the package.</P
><P
CLASS="para"
>You can, by the way, place the definitions of the public program units anywhere in the package body (after the variable declarations)&nbsp;-- even <EM
CLASS="emphasis"
>after</EM
> they are referenced by another program. How is this possible? Since their headers have already been established in the package specification, the <SPAN
CLASS="acronym"
>PL/SQL</SPAN
> compiler has all the information it needs to resolve the reference.</P
></DIV
></DIV
><DIV
CLASS="htmlnav"
><P
></P
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch02_01.htm"
TITLE="2.1 Starting With Packages"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 2.1 Starting With Packages"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="book"
HREF="index.htm"
TITLE="Advanced Oracle PL/SQL Programming with Packages"
><IMG
SRC="../gifs/txthome.gif"
ALT="Advanced Oracle PL/SQL Programming with Packages"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch02_03.htm"
TITLE="2.3 Selecting Package Names"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 2.3 Selecting Package Names"
BORDER="0"></A
></TD
></TR
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
>2.1 Starting With Packages</TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="index"
HREF="index/idx_0.htm"
TITLE="Book Index"
><IMG
SRC="../gifs/index.gif"
ALT="Book Index"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
>2.3 Selecting Package Names</TD
></TR
></TABLE
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"></DIV
><IMG
SRC="../gifs/smnavbar.gif"
USEMAP="#map"
BORDER="0"
ALT="The Oracle Library Navigation">

<P><font size="-1">
<a href="../copyrght.htm#copy">Copyright (c) 2000</a> O'Reilly & Associates. All rights reserved.
</font></P>

<MAP NAME="map">

<AREA SHAPE="RECT"
COORDS="0,0,35,30"
HREF="../index.htm"
ALT="Library Home">

<AREA SHAPE="RECT"
COORDS="40,0,95,30"
HREF="../prog2/index.htm"
ALT="Oracle PL/SQL Programming, 2nd. Ed.">

<AREA SHAPE="RECT"
COORDS="100,0,200,30"
HREF="../guide8i/index.htm"
ALT="Guide to Oracle 8i Features">

<AREA SHAPE="RECT"
COORDS="205,0,245,30"
HREF="../bipack/index.htm"
ALT="Oracle Built-in Packages">

<AREA SHAPE="RECT"
COORDS="250,0,320,30"
HREF="index.htm"
ALT="Advanced PL/SQL Programming with Packages">

<AREA SHAPE="RECT"
COORDS="325,0,420,30"
HREF="../webapp/index.htm"
ALT="Oracle Web Applications">

<AREA SHAPE="RECT"
COORDS="425,0,490,30"
HREF="../langpkt/index.htm"
ALT="Oracle PL/SQL Language Pocket Reference">

<AREA SHAPE="RECT"
COORDS="495,0,570,30"
HREF="../bipkt/index.htm"
ALT="Oracle PL/SQL Built-ins Pocket Reference">
</MAP>
</BODY
>
<!-- Mirrored from liso.cs.pusan.ac.kr by HTTrack Website Copier/3.x [XR&CO'2001] -->
</HTML
>
