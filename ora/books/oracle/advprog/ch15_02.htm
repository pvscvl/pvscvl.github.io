<HTML
><HEAD
><TITLE
>[Chapter 15] 15.2 Displaying Compile Errors</TITLE
><META
NAME="DC.Creator"
CONTENT="Steven Feuerstein"><META
NAME="DC.Date"
CONTENT="2000-04-29T18:28:29Z"><META
NAME="DC.Format"
CONTENT="text/html"
SCHEME="MIME"><META
NAME="DC.Identifier"
CONTENT="O'Reilly and Associates-1-56592-238-7E"><META
NAME="DC.Language"
CONTENT="en-US"><META
NAME="DC.Publisher"
CONTENT="O'Reilly &amp; Associates, Inc."><META
NAME="DC.Source"
CONTENT="1-56592-238-7E"
SCHEME="ISBN"><META
NAME="DC.Subject.Keyword"
CONTENT="PL/SQL SQL Oracle Packages"><META
NAME="DC.Title"
CONTENT="Advanced Oracle PL/SQL Programming with Packages"><META
NAME="DC.Type"
CONTENT="Text.Monograph"><META
NAME="generator"
CONTENT="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><LINK
REL="stylesheet"
TYPE="text/css"
HREF="../style/style1.css"><LINK
REV="made"
HREF="mailto:online-books@oreilly.com"
TITLE="Online Books Comments"><LINK
REL="up"
HREF="ch15_01.htm"
TITLE="15. PLVvu: Viewing Source Code and Compile Errors"><LINK
REL="prev"
HREF="ch15_01.htm"
TITLE="15.1 Compiling PL/SQL Code in SQL*Plus"><LINK
REL="next"
HREF="ch15_03.htm"
TITLE="15.3 Displaying Source Code"></HEAD>
<BODY><DIV CLASS="htmlnav"
><H1
><IMG
SRC="gifs/smbanner.gif"
ALT="Advanced Oracle PL/SQL Programming with Packages"
USEMAP="#srchmap"
BORDER="0"></H1
><MAP
NAME="srchmap"
><AREA
SHAPE="RECT"
COORDS="0,0,466,65"
HREF="index.htm"
ALT="Advanced Oracle PL/SQL Programming with Packages"><AREA
SHAPE="RECT"
COORDS="467,0,514,18"
HREF="jobjects/fsearch.htm"
ALT="Search this book"></MAP
><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch15_01.htm"
TITLE="15.1 Compiling PL/SQL Code in SQL*Plus"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 15.1 Compiling PL/SQL Code in SQL*Plus"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><SPAN
CLASS="NAVTITLE"
><A
CLASS="chapter"
REL="up"
HREF="ch15_01.htm"
TITLE="15. PLVvu: Viewing Source Code and Compile Errors"
>Chapter 15<BR>PLVvu: Viewing Source Code and Compile Errors</A
></SPAN
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch15_03.htm"
TITLE="15.3 Displaying Source Code"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 15.3 Displaying Source Code"
BORDER="0"></A
></TD
></TR
></TABLE
>&nbsp;<HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"></DIV
><DIV
CLASS="sect1"
><H2
CLASS="sect1"
><A
CLASS="title"
NAME="ch15-40302"
>15.2 Displaying Compile Errors</A
></H2
><P
CLASS="para"
>The <KBD
CLASS="command"
>err</KBD
><A
CLASS="indexterm"
NAME="ch15-idx-998792-0"
></A
> procedure of the PLVvu package offers a very useful alternative to the SQL*Plus SHOW ERRORS command. The header for this procedure is:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>PROCEDURE err 
   (name_in IN VARCHAR2 := NULL, overlap_in IN INTEGER := overlap);</PRE
></BLOCKQUOTE
><P
CLASS="para"
>You provide the name of the program unit for which you want errors displayed and the <KBD
CLASS="command"
>err</KBD
> procedure not only displays all errors found in the USER_ERRORS view, but it also shows you exactly which lines of code are causing the problem. The second argument specifies the numbers of lines of code to display around the line with the compile error. The default value is the value set by the <KBD
CLASS="command"
>set_overlap</KBD
> procedure (described in a later section).</P
><P
CLASS="para"
>If you do not supply a program name, <KBD
CLASS="command"
>PLVvu.err</KBD
> will show you the compile errors for the most recently-compiled program unit. It determines this information by searching for the object in ALL_OBJECTS whose <KBD
CLASS="command"
>last_ddl_time</KBD
> equals the MAX (<KBD
CLASS="command"
>last_ddl_time</KBD
>).</P
><P
CLASS="para"
>The format for specifying a program unit is explained fully in <A
CLASS="xref"
HREF="ch11_01.htm"
>Chapter 11, <CITE
CLASS="chapter"
> PLVobj: A Packaged Interface to ALL_OBJECTS</CITE
></A
>. Briefly, you can supply only the name, the <EM
CLASS="emphasis"
>type:name</EM
> (as in "b:PLVio" for the body of the PLVio package), or even the <EM
CLASS="emphasis"
>type:schema.name</EM
> (as in "s:scott.showemps" to see the specification of the <KBD
CLASS="command"
>showemps</KBD
> package owned by SCOTT).</P
><P
CLASS="para"
>The <KBD
CLASS="command"
>err</KBD
> procedure tries to be smart about displaying the surrounding lines of code. Suppose, for example, that you have errors on two consecutive lines (318 and 319) and you have specified 10 lines of overlap. You would not want to see lines 309 through 318 as well as 319 through 328, twice, would you? The logic required to handle this complexity is covered in <A
CLASS="xref"
HREF="ch15_04.htm#ch15-SECT-4.1"
>Section 15.4.2, "Implementing the SHOW ERRORS Alternative"</A
></P
><P
CLASS="para"
>PL/Vision also provides a script named <KBD
CLASS="command"
>sherr.sql</KBD
> so that you do not have to type the full execute command for the <KBD
CLASS="command"
>PLVvu.err</KBD
> procedure at the SQL*Plus prompt. The following two requests to show errors are, therefore, equivalent:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>SQL&gt; exec PLVvu.err
SQL&gt; @sherr </PRE
></BLOCKQUOTE
><P
CLASS="para"
>If you want to pass the name of a particular program to <KBD
CLASS="command"
>PLVvu.err</KBD
>, you will not be able to use the <KBD
CLASS="command"
>sherr.sql</KBD
> script.</P
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch15-SECT-2.1"
>15.2.1 Impact of PLVvu.err</A
></H3
><P
CLASS="para"
>Consider the SQL*Plus session shown below. First, we have the output from SHOW ERRORS. It reveals that compile errors were found on lines 333 and 349. As usual, it is very difficult to determine from these error messages what is actually wrong with my program and how I should go about finding the source of the problems. It is hard to even tell what the problem is because SHOW ERRORS does not display the line of code in which the error was found.</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>SQL&gt; show errors
Errors for PACKAGE BODY PLVGEN:
LINE/COL ERROR
-------- --------------------------------------------------------------
333/53   PLS-00103: Encountered the symbol &quot;;&quot; when expecting one of
         the following:
         . ( ) , * @ % &amp; | = - + &lt; / &gt; in mod not rem =&gt; ..
         an exponent (**) &lt;&gt; or != or ~= &gt;= &lt;= &lt;&gt; and or like etc.
         ) was inserted before &quot;;&quot; to continue.
349/4    PLS-00103: Encountered the symbol &quot;BEGIN&quot; when expecting one
         of the following:
         begin end function package pragma procedure form
         Replacing &quot;BEGIN&quot; with &quot;begin&quot;.</PRE
></BLOCKQUOTE
><P
CLASS="para"
>Now let's check out the PLVvu alternative. In the following SQL*Plus session, instead of typing SHOW ERRORS, I call the <KBD
CLASS="command"
>PLVvu.err</KBD
> procedure. Since I do not provide a program name, it automatically locates the last compiled object, finds some errors, and displays the information. </P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>SQL&gt; exec PLVvu.err
-----------------------------------------------------------------------
PL/Vision Error Listing for PACKAGE BODY PLVGEN
-----------------------------------------------------------------------
Line#  Source
-----------------------------------------------------------------------
  331          put_line;
  332       END IF;
  333       PLVio.put_line (indent_stg (plus_in) || stg_in;
ERR                                                        *
    PLS-00103: Encountered the symbol &quot;;&quot; when expecting one of
    the following:  . ( ) , * @ % &amp; | = - + &lt; / &gt; in mod not rem
     =&gt; ..     an exponent (**) &lt;&gt; or != or ~= &gt;= &lt;= &lt;&gt; and or
    like etc.  ) was inserted before &quot;;&quot; to continue.
  334       IF blanks_in IN (c_both, c_after)
  335       THEN
-----------------------------------------------------------------------
  347        plus_in IN INTEGER := 0,
  348        blanks_in IN VARCHAR2 := c_none);
  349    IS
ERR       *
    PLS-00103: Encountered the symbol &quot;BEGIN&quot; when expecting one
    of the following:  begin end function package pragma
    procedure form Replacing &quot;BEGIN&quot; with &quot;begin&quot;.
  350    BEGIN
  351       IF using_cmnt
-----------------------------------------------------------------------</PRE
></BLOCKQUOTE
><P
CLASS="para"
>Well, that certainly looks different! The same two error messages show up (immediately after the word ERR on the left margin of the output). But in addition to those error messages, the <KBD
CLASS="command"
>PLVvu.err</KBD
> procedure displays the line of source code with which <SPAN
CLASS="acronym"
>PL/SQL</SPAN
> had a problem, as well as two lines before and after that problematic line of code.</P
><P
CLASS="para"
>With this added data, it is very easy for me to see what went wrong:</P
><OL
CLASS="orderedlist"
><LI
CLASS="listitem"
><P
CLASS="para"
>I left off the right parenthesis in my call to PLV<KBD
CLASS="command"
>io.put_line</KBD
>. </P
></LI
><LI
CLASS="listitem"
><P
CLASS="para"
>I included a semicolon at the end of line 348&nbsp;-- this usually happens when I copy the header for a program out of the package specification and then paste it into the body and forget to remove the semicolon.</P
></LI
></OL
><P
CLASS="para"
>Notice that in both these cases the lines of code that were in error were not the lines of code indicated by the compiler. Hey, no compiler's perfect, right? In any case, I am able to immediately return to my source code and make the corrections. I have found that the <KBD
CLASS="command"
>PLVvu.err</KBD
> procedure can save me a solid 30 seconds each time I run into a compile error&nbsp;-- and believe me, I run into lots of compile errors with my code. This utility alone saves me an incredible amount of development time.</P
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch15-SECT-2.2"
>15.2.2 Setting the Code Overlap</A
></H3
><P
CLASS="para"
>You can specify the number of lines to display around the line in error by using the <KBD
CLASS="command"
>set_overlap</KBD
><A
CLASS="indexterm"
NAME="ch15-idx-998793-0"
></A
><A
CLASS="indexterm"
NAME="ch15-idx-998793-1"
></A
><A
CLASS="indexterm"
NAME="ch15-idx-998793-2"
></A
> procedure:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>PROCEDURE set_overlap (size_in IN INTEGER := c_overlap);</PRE
></BLOCKQUOTE
><P
CLASS="para"
>The default value for the single size argument is provided by the package constant, <KBD
CLASS="command"
>c_overlap</KBD
>, which has a value of 5. So if you never call <KBD
CLASS="command"
>set_overlap</KBD
>, PLVvu will display five lines of code before and after a line with a compile error.</P
><P
CLASS="para"
>The following line of code changes the overlap to only two lines:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>PLVvu.set_overlap (2);</PRE
></BLOCKQUOTE
><P
CLASS="para"
>And this call to <KBD
CLASS="command"
>set_overlap</KBD
> changes the overlap back to the default, since no value is provided.</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>PLVvu.set_overlap;</PRE
></BLOCKQUOTE
><P
CLASS="para"
>You can obtain the current value of the overlap by calling the <KBD
CLASS="command"
>overlap</KBD
> function:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>FUNCTION overlap RETURN INTEGER;</PRE
></BLOCKQUOTE
><P
CLASS="para"
>If you don't like the default value of five lines, you might include a call to <KBD
CLASS="command"
>PLVvu.set_overlap</KBD
> in your <KBD
CLASS="command"
>login.sql</KBD
> to make sure that it is always set the way you like it in SQL*Plus.<A
CLASS="indexterm"
NAME="ch15-idx-998794-0"
></A
><A
CLASS="indexterm"
NAME="ch15-idx-998794-1"
></A
><A
CLASS="indexterm"
NAME="ch15-idx-998794-2"
></A
><A
CLASS="indexterm"
NAME="ch15-idx-998794-3"
></A
><A
CLASS="indexterm"
NAME="ch15-idx-998794-4"
></A
></P
></DIV
></DIV
><DIV
CLASS="htmlnav"
><P
></P
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch15_01.htm"
TITLE="15.1 Compiling PL/SQL Code in SQL*Plus"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 15.1 Compiling PL/SQL Code in SQL*Plus"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="book"
HREF="index.htm"
TITLE="Advanced Oracle PL/SQL Programming with Packages"
><IMG
SRC="../gifs/txthome.gif"
ALT="Advanced Oracle PL/SQL Programming with Packages"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch15_03.htm"
TITLE="15.3 Displaying Source Code"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 15.3 Displaying Source Code"
BORDER="0"></A
></TD
></TR
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
>15.1 Compiling PL/SQL Code in SQL*Plus</TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="index"
HREF="index/idx_0.htm"
TITLE="Book Index"
><IMG
SRC="../gifs/index.gif"
ALT="Book Index"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
>15.3 Displaying Source Code</TD
></TR
></TABLE
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"></DIV
><IMG
SRC="../gifs/smnavbar.gif"
USEMAP="#map"
BORDER="0"
ALT="The Oracle Library Navigation">

<P><font size="-1">
<a href="../copyrght.htm#copy">Copyright (c) 2000</a> O'Reilly & Associates. All rights reserved.
</font></P>

<MAP NAME="map">

<AREA SHAPE="RECT"
COORDS="0,0,35,30"
HREF="../index.htm"
ALT="Library Home">

<AREA SHAPE="RECT"
COORDS="40,0,95,30"
HREF="../prog2/index.htm"
ALT="Oracle PL/SQL Programming, 2nd. Ed.">

<AREA SHAPE="RECT"
COORDS="100,0,200,30"
HREF="../guide8i/index.htm"
ALT="Guide to Oracle 8i Features">

<AREA SHAPE="RECT"
COORDS="205,0,245,30"
HREF="../bipack/index.htm"
ALT="Oracle Built-in Packages">

<AREA SHAPE="RECT"
COORDS="250,0,320,30"
HREF="index.htm"
ALT="Advanced PL/SQL Programming with Packages">

<AREA SHAPE="RECT"
COORDS="325,0,420,30"
HREF="../webapp/index.htm"
ALT="Oracle Web Applications">

<AREA SHAPE="RECT"
COORDS="425,0,490,30"
HREF="../langpkt/index.htm"
ALT="Oracle PL/SQL Language Pocket Reference">

<AREA SHAPE="RECT"
COORDS="495,0,570,30"
HREF="../bipkt/index.htm"
ALT="Oracle PL/SQL Built-ins Pocket Reference">
</MAP>
</BODY
>
<!-- Mirrored from liso.cs.pusan.ac.kr by HTTrack Website Copier/3.x [XR&CO'2001] -->
</HTML
>
