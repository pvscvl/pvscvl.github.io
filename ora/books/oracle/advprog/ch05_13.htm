<HTML
><HEAD
><TITLE
>[Chapter 5] 5.13 PLVgen: PL/SQL Code Generator</TITLE
><META
NAME="DC.Creator"
CONTENT="Steven Feuerstein"><META
NAME="DC.Date"
CONTENT="2000-04-29T18:24:54Z"><META
NAME="DC.Format"
CONTENT="text/html"
SCHEME="MIME"><META
NAME="DC.Identifier"
CONTENT="O'Reilly and Associates-1-56592-238-7E"><META
NAME="DC.Language"
CONTENT="en-US"><META
NAME="DC.Publisher"
CONTENT="O'Reilly &amp; Associates, Inc."><META
NAME="DC.Source"
CONTENT="1-56592-238-7E"
SCHEME="ISBN"><META
NAME="DC.Subject.Keyword"
CONTENT="PL/SQL SQL Oracle Packages"><META
NAME="DC.Title"
CONTENT="Advanced Oracle PL/SQL Programming with Packages"><META
NAME="DC.Type"
CONTENT="Text.Monograph"><META
NAME="generator"
CONTENT="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><LINK
REL="stylesheet"
TYPE="text/css"
HREF="../style/style1.css"><LINK
REV="made"
HREF="mailto:online-books@oreilly.com"
TITLE="Online Books Comments"><LINK
REL="up"
HREF="ch05_01.htm"
TITLE="5. PL/Vision Package Specifications"><LINK
REL="prev"
HREF="ch05_12.htm#ch05-SECT-12.0.4"
TITLE="5.12 PLVfk: Foreign Key Interface"><LINK
REL="next"
HREF="ch05_14.htm#ch05-SECT-14.0.3"
TITLE="5.14 PLVhlp: Online Help Architechture"></HEAD>
<BODY><DIV CLASS="htmlnav"
><H1
><IMG
SRC="gifs/smbanner.gif"
ALT="Advanced Oracle PL/SQL Programming with Packages"
USEMAP="#srchmap"
BORDER="0"></H1
><MAP
NAME="srchmap"
><AREA
SHAPE="RECT"
COORDS="0,0,466,65"
HREF="index.htm"
ALT="Advanced Oracle PL/SQL Programming with Packages"><AREA
SHAPE="RECT"
COORDS="467,0,514,18"
HREF="jobjects/fsearch.htm"
ALT="Search this book"></MAP
><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch05_12.htm#ch05-SECT-12.0.4"
TITLE="5.12 PLVfk: Foreign Key Interface"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 5.12 PLVfk: Foreign Key Interface"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><SPAN
CLASS="NAVTITLE"
><A
CLASS="chapter"
REL="up"
HREF="ch05_01.htm"
TITLE="5. PL/Vision Package Specifications"
>Chapter 5<BR>PL/Vision Package Specifications</A
></SPAN
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch05_14.htm#ch05-SECT-14.0.3"
TITLE="5.14 PLVhlp: Online Help Architechture"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 5.14 PLVhlp: Online Help Architechture"
BORDER="0"></A
></TD
></TR
></TABLE
>&nbsp;<HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"></DIV
><DIV
CLASS="sect1"
><H2
CLASS="sect1"
><A
CLASS="title"
NAME="ch05-SECT-13"
>5.13 PLVgen: PL/SQL Code Generator</A
></H2
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="ch05-idx-1001278-0"
></A
><A
CLASS="indexterm"
NAME="ch05-idx-1001278-1"
></A
><A
CLASS="indexterm"
NAME="ch05-idx-1001278-2"
></A
><A
CLASS="indexterm"
NAME="ch05-idx-1001278-3"
></A
>The PLVgen (PL/Vision GENerator) package provides a set of procedure you can use to generate your own <SPAN
CLASS="acronym"
>PL/SQL</SPAN
> code. See <A
CLASS="xref"
HREF="ch16_01.htm"
>Chapter 16, <CITE
CLASS="chapter"
>PLVgen: Generating PL/SQL Programs</CITE
></A
> for details.</P
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch05-SECT-13.0.1"
>5.13.1 Package constants</A
></H3
><DL
CLASS="variablelist"
><DT
CLASS="term"
><CODE
CLASS="literal"
> c_indent CONSTANT INTEGER := 0;</CODE
><A
CLASS="indexterm"
NAME="ch05-idx-1001280-0"
></A
><A
CLASS="indexterm"
NAME="ch05-idx-1001280-1"
></A
><A
CLASS="indexterm"
NAME="ch05-idx-1001280-2"
></A
></DT
><DD
CLASS="listitem"
><P
CLASS="para"
>The default initial indentation of generated code.</P
></DD
><DT
CLASS="term"
><CODE
CLASS="literal"
> c_incr_indent CONSTANT INTEGER := 3;</CODE
><A
CLASS="indexterm"
NAME="ch05-idx-1001281-0"
></A
></DT
><DD
CLASS="listitem"
><P
CLASS="para"
>The default incremental indentation of generated code.</P
></DD
><DT
CLASS="term"
><CODE
CLASS="literal"
> c_literal CONSTANT CHAR(1) := '=';</CODE
><A
CLASS="indexterm"
NAME="ch05-idx-1001282-0"
></A
></DT
><DD
CLASS="listitem"
><P
CLASS="para"
>The character used to indicate that the default value for the string function is not to be evaluated before placing in the function definition.</P
></DD
><DT
CLASS="term"
><CODE
CLASS="literal"
> c_def_length CONSTANT INTEGER := 100;</CODE
><A
CLASS="indexterm"
NAME="ch05-idx-1001283-0"
></A
></DT
><DD
CLASS="listitem"
><P
CLASS="para"
>The default length for a string function's local variable.</P
></DD
><DT
CLASS="term"
><CODE
CLASS="literal"
> c_none CONSTANT VARCHAR2(1) := 'N';</CODE
><A
CLASS="indexterm"
NAME="ch05-idx-1001284-0"
></A
></DT
><DD
CLASS="listitem"
><P
CLASS="para"
>Indicates that no blank lines are to be placed before or after the current line of code.</P
></DD
><DT
CLASS="term"
><CODE
CLASS="literal"
> c_before CONSTANT VARCHAR2(1) := 'B';</CODE
><A
CLASS="indexterm"
NAME="ch05-idx-1001285-0"
></A
></DT
><DD
CLASS="listitem"
><P
CLASS="para"
>Indicates that a blank line is to be placed before the current line of code.</P
></DD
><DT
CLASS="term"
><CODE
CLASS="literal"
> c_after CONSTANT VARCHAR2(1) := 'A';</CODE
><A
CLASS="indexterm"
NAME="ch05-idx-1001286-0"
></A
></DT
><DD
CLASS="listitem"
><P
CLASS="para"
>Indicates that a blank line is to be placed after the current line of code.</P
></DD
><DT
CLASS="term"
><CODE
CLASS="literal"
> c_both CONSTANT VARCHAR2(2) := 'BA';</CODE
><A
CLASS="indexterm"
NAME="ch05-idx-1001287-0"
></A
></DT
><DD
CLASS="listitem"
><P
CLASS="para"
>Indicates that a blank line is to be placed both before and after the current line of code.</P
></DD
></DL
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch05-SECT-13.0.2"
>5.13.2 Setting the indentation</A
></H3
><DL
CLASS="variablelist"
><DT
CLASS="term"
><CODE
CLASS="literal"
> PROCEDURE set_indent</CODE
></DT
><DT
CLASS="term"
><CODE
CLASS="literal"
>   (indent_in IN NUMBER,</CODE
></DT
><DT
CLASS="term"
><CODE
CLASS="literal"
>    incr_indent_in IN NUMBER := c_incr_indent);</CODE
></DT
><DD
CLASS="listitem"
><P
CLASS="para"
>Sets the initial and incremental indentation.</P
></DD
><DT
CLASS="term"
><CODE
CLASS="literal"
> FUNCTION indent RETURN NUMBER;</CODE
></DT
><DD
CLASS="listitem"
><P
CLASS="para"
>Returns the current value for initial indentation.</P
></DD
><DT
CLASS="term"
><CODE
CLASS="literal"
> FUNCTION incr_indent RETURN NUMBER;</CODE
></DT
><DD
CLASS="listitem"
><P
CLASS="para"
>Returns the current value for incremental indentation.</P
></DD
></DL
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch05-SECT-13.0.3"
>5.13.3 Setting the author</A
></H3
><DL
CLASS="variablelist"
><DT
CLASS="term"
><CODE
CLASS="literal"
> PROCEDURE set_author (author_in IN VARCHAR2);</CODE
><A
CLASS="indexterm"
NAME="ch05-idx-1001288-0"
></A
><A
CLASS="indexterm"
NAME="ch05-idx-1001288-1"
></A
></DT
><DD
CLASS="listitem"
><P
CLASS="para"
>Assigns a value for the author string used in program headers.</P
></DD
><DT
CLASS="term"
><CODE
CLASS="literal"
> FUNCTION author RETURN VARCHAR2;</CODE
><A
CLASS="indexterm"
NAME="ch05-idx-1001289-0"
></A
></DT
><DD
CLASS="listitem"
><P
CLASS="para"
>Returns the current author string.</P
></DD
></DL
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch05-SECT-13.0.4"
>5.13.4 <A
CLASS="indexterm"
NAME="ch05-idx-1001290-0"
></A
>Toggles affecting generated code</A
></H3
><P
CLASS="para"
>PLVgen offers a large selection of toggles or on-off switches, which you can use to modify the content of code generated by this package. Each toggle has a "turn on" procedure, a "turn off" procedure, and a function returning the current state of the toggle (on or off). </P
><DL
CLASS="variablelist"
><DT
CLASS="term"
><CODE
CLASS="literal"
> PROCEDURE usetrc;</CODE
></DT
><DT
CLASS="term"
><CODE
CLASS="literal"
>PROCEDURE nousetrc;</CODE
></DT
><DT
CLASS="term"
><CODE
CLASS="literal"
>FUNCTION using_trc RETURN BOOLEAN;</CODE
></DT
><DD
CLASS="listitem"
><P
CLASS="para"
>Controls inclusion of the PLVtrc startup and terminate procedures.</P
></DD
><DT
CLASS="term"
><CODE
CLASS="literal"
> PROCEDURE useexc;</CODE
></DT
><DT
CLASS="term"
><CODE
CLASS="literal"
>PROCEDURE nouseexc;</CODE
></DT
><DT
CLASS="term"
><CODE
CLASS="literal"
>FUNCTION using_exc RETURN BOOLEAN;</CODE
></DT
><DD
CLASS="listitem"
><P
CLASS="para"
>Controls inclusion of PLVexc exception handlers in exception sections of programs.</P
></DD
><DT
CLASS="term"
><CODE
CLASS="literal"
> PROCEDURE usehdr;</CODE
></DT
><DT
CLASS="term"
><CODE
CLASS="literal"
>PROCEDURE nousehdr;</CODE
></DT
><DT
CLASS="term"
><CODE
CLASS="literal"
>FUNCTION using_hdr RETURN BOOLEAN;</CODE
></DT
><DD
CLASS="listitem"
><P
CLASS="para"
>Controls inclusion of program headers in packages, procedures, and functions.</P
></DD
><DT
CLASS="term"
><CODE
CLASS="literal"
> PROCEDURE usecmnt;</CODE
></DT
><DT
CLASS="term"
><CODE
CLASS="literal"
>PROCEDURE nousecmnt;</CODE
></DT
><DT
CLASS="term"
><CODE
CLASS="literal"
>FUNCTION using_cmnt RETURN BOOLEAN;</CODE
></DT
><DD
CLASS="listitem"
><P
CLASS="para"
>Controls inclusion of comment lines in generated code.</P
></DD
><DT
CLASS="term"
><CODE
CLASS="literal"
> PROCEDURE usehlp;</CODE
></DT
><DT
CLASS="term"
><CODE
CLASS="literal"
>PROCEDURE nousehlp;</CODE
></DT
><DT
CLASS="term"
><CODE
CLASS="literal"
>FUNCTION using_hlp RETURN BOOLEAN;</CODE
></DT
><DD
CLASS="listitem"
><P
CLASS="para"
>Controls inclusion of help text stubs and generation of the <KBD
CLASS="command"
>help</KBD
> procedure in packages.</P
></DD
><DT
CLASS="term"
><CODE
CLASS="literal"
> PROCEDURE usecor;</CODE
></DT
><DT
CLASS="term"
><CODE
CLASS="literal"
>PROCEDURE nousecor;</CODE
></DT
><DT
CLASS="term"
><CODE
CLASS="literal"
>FUNCTION using_cor RETURN BOOLEAN;</CODE
></DT
><DD
CLASS="listitem"
><P
CLASS="para"
>Controls inclusion of code required to CREATE OR REPLACE program units.</P
></DD
><DT
CLASS="term"
><CODE
CLASS="literal"
> PROCEDURE useln;</CODE
></DT
><DT
CLASS="term"
><CODE
CLASS="literal"
>PROCEDURE nouseln;</CODE
></DT
><DT
CLASS="term"
><CODE
CLASS="literal"
>FUNCTION usingln RETURN BOOLEAN;</CODE
></DT
><DD
CLASS="listitem"
><P
CLASS="para"
>Controls inclusion of line numbers in prefix of generated code.</P
></DD
><DT
CLASS="term"
><CODE
CLASS="literal"
> PROCEDURE usemin;</CODE
></DT
><DD
CLASS="listitem"
><P
CLASS="para"
>Turns off all the above toggles.</P
></DD
><DT
CLASS="term"
><CODE
CLASS="literal"
> PROCEDURE usemax;</CODE
></DT
><DD
CLASS="listitem"
><P
CLASS="para"
>Turns on all the above toggles.</P
></DD
></DL
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch05-SECT-13.0.5"
>5.13.5 Help generators</A
></H3
><DL
CLASS="variablelist"
><DT
CLASS="term"
><CODE
CLASS="literal"
> PROCEDURE helpproc</CODE
><A
CLASS="indexterm"
NAME="ch05-idx-1001291-0"
></A
><A
CLASS="indexterm"
NAME="ch05-idx-1001291-1"
></A
></DT
><DT
CLASS="term"
><CODE
CLASS="literal"
>   (prog_in IN VARCHAR2 := NULL, indent_in IN INTEGER := 0);</CODE
></DT
><DD
CLASS="listitem"
><P
CLASS="para"
>Generates a procedure that gives main-topic help for the specified program unit.</P
></DD
><DT
CLASS="term"
><CODE
CLASS="literal"
> PROCEDURE helptext (context_in IN VARCHAR2 := PLVhlp.c_main);</CODE
><A
CLASS="indexterm"
NAME="ch05-idx-1001292-0"
></A
><A
CLASS="indexterm"
NAME="ch05-idx-1001292-1"
></A
></DT
><DD
CLASS="listitem"
><P
CLASS="para"
>Generates a comment block in the correct format to be used as online help text with the PLVhlp package.</P
></DD
></DL
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch05-SECT-13.0.6"
>5.13.6 Generating a package</A
></H3
><DL
CLASS="variablelist"
><DT
CLASS="term"
><CODE
CLASS="literal"
> PROCEDURE pkg (name_in IN VARCHAR2);</CODE
><A
CLASS="indexterm"
NAME="ch05-idx-1001293-0"
></A
><A
CLASS="indexterm"
NAME="ch05-idx-1001293-1"
></A
></DT
><DD
CLASS="listitem"
><P
CLASS="para"
>Generates the skeleton structure for a package's specification and body.</P
></DD
></DL
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch05-SECT-13.0.7"
>5.13.7 Generating a procedure</A
></H3
><DL
CLASS="variablelist"
><DT
CLASS="term"
><CODE
CLASS="literal"
> PROCEDURE proc</CODE
><A
CLASS="indexterm"
NAME="ch05-idx-1001294-0"
></A
></DT
><DT
CLASS="term"
><CODE
CLASS="literal"
>   (name_in IN VARCHAR2,</CODE
></DT
><DT
CLASS="term"
><CODE
CLASS="literal"
>    params_in IN VARCHAR2 := NULL, </CODE
></DT
><DT
CLASS="term"
><CODE
CLASS="literal"
>    exec_in IN VARCHAR2 := NULL,</CODE
></DT
><DT
CLASS="term"
><CODE
CLASS="literal"
>    incl_exc_in IN BOOLEAN := TRUE,</CODE
></DT
><DT
CLASS="term"
><CODE
CLASS="literal"
>    indent_in IN INTEGER := 0,</CODE
></DT
><DT
CLASS="term"
><CODE
CLASS="literal"
>    blank_lines_in IN VARCHAR2 := c_before);</CODE
></DT
><DD
CLASS="listitem"
><P
CLASS="para"
>Generates a procedure of the specified name. You can also provide a parameter list and one or more executable lines. Finally, you can decide to include an exception section, indent the code, and perform blank-line processing.</P
></DD
></DL
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch05-SECT-13.0.8"
>5.13.8 <A
CLASS="indexterm"
NAME="ch05-idx-1001295-0"
></A
>Generating functions</A
></H3
><P
CLASS="para"
>A function has a RETURN datatype. PLVgen allows you to generate string, numeric, date, and Boolean functions. You can also supply literal and symbol default values. As a result, the <KBD
CLASS="command"
>func</KBD
> procedure is overloaded as shown:</P
><DL
CLASS="variablelist"
><DT
CLASS="term"
><CODE
CLASS="literal"
> PROCEDURE func</CODE
><A
CLASS="indexterm"
NAME="ch05-idx-1001296-0"
></A
></DT
><DT
CLASS="term"
><CODE
CLASS="literal"
>   (name_in IN VARCHAR2,</CODE
></DT
><DT
CLASS="term"
><CODE
CLASS="literal"
>    datadesc_in VARCHAR2, </CODE
></DT
><DT
CLASS="term"
><CODE
CLASS="literal"
>    defval_in IN VARCHAR2 := NULL,</CODE
></DT
><DT
CLASS="term"
><CODE
CLASS="literal"
>    length_in IN INTEGER := c_def_length,</CODE
></DT
><DT
CLASS="term"
><CODE
CLASS="literal"
>    incl_exc_in IN BOOLEAN := TRUE);</CODE
></DT
><DD
CLASS="listitem"
><P
CLASS="para"
>Generates a string function (since the datatype for the <KBD
CLASS="command"
>datdesc_in</KBD
> parameter is VARCHAR2).</P
></DD
><DT
CLASS="term"
><CODE
CLASS="literal"
> PROCEDURE func</CODE
></DT
><DT
CLASS="term"
><CODE
CLASS="literal"
>   (name_in IN VARCHAR2,</CODE
></DT
><DT
CLASS="term"
><CODE
CLASS="literal"
>    datadesc_in <I
CLASS="replaceable"
>datatype</I
>, </CODE
></DT
><DT
CLASS="term"
><CODE
CLASS="literal"
>    defval_in IN <I
CLASS="replaceable"
>datatype</I
> := NULL,</CODE
></DT
><DT
CLASS="term"
><CODE
CLASS="literal"
>    incl_exc_in IN BOOLEAN := TRUE);</CODE
></DT
><DD
CLASS="listitem"
><P
CLASS="para"
>Generates a function of the specified <KBD
CLASS="command"
>datatype</KBD
>, which is either NUMBER, DATE, or BOOLEAN. Notice that the default has the same datatype as the <KBD
CLASS="command"
>datadesc_in</KBD
> parameter. This is a default value that is evaluated as a literal.</P
></DD
><DT
CLASS="term"
><CODE
CLASS="literal"
> PROCEDURE func</CODE
></DT
><DT
CLASS="term"
><CODE
CLASS="literal"
>   (name_in IN VARCHAR2,</CODE
></DT
><DT
CLASS="term"
><CODE
CLASS="literal"
>    datadesc_in <I
CLASS="replaceable"
>datatype</I
>, </CODE
></DT
><DT
CLASS="term"
><CODE
CLASS="literal"
>    defval_in IN VARCHAR2,</CODE
></DT
><DT
CLASS="term"
><CODE
CLASS="literal"
>    incl_exc_in IN BOOLEAN := TRUE);</CODE
></DT
><DD
CLASS="listitem"
><P
CLASS="para"
>Generates a function of the specified <KBD
CLASS="command"
>datatype</KBD
>, which is either NUMBER, DATE, or BOOLEAN. Notice that the default in this version is a string. When you use this format, the default value is treated as an expression that is <EM
CLASS="emphasis"
>not</EM
> evaluated.</P
></DD
></DL
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch05-SECT-13.0.9"
>5.13.9 Generating get-and-set routines</A
></H3
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="ch05-idx-1001297-0"
></A
><A
CLASS="indexterm"
NAME="ch05-idx-1001297-1"
></A
>Get-and-set routines provide a programmatic layer of code around a private data structure. As a result, the get-and-sets or "gas" generators have associated with them a datatype. PLVgen allows you to generate string, numeric, date, and Boolean get-and-sets. You can also supply literal and symbol default values. As a result, the <KBD
CLASS="command"
>gas</KBD
> procedure is overloaded with the following flavors:</P
><DL
CLASS="variablelist"
><DT
CLASS="term"
><CODE
CLASS="literal"
> PROCEDURE gas</CODE
></DT
><DT
CLASS="term"
><CODE
CLASS="literal"
>   (name_in IN VARCHAR2,</CODE
></DT
><DT
CLASS="term"
><CODE
CLASS="literal"
>    valtype_in VARCHAR2, </CODE
></DT
><DT
CLASS="term"
><CODE
CLASS="literal"
>    defval_in IN VARCHAR2 := NULL,</CODE
></DT
><DT
CLASS="term"
><CODE
CLASS="literal"
>    length_in IN INTEGER := c_def_length);</CODE
></DT
><DD
CLASS="listitem"
><P
CLASS="para"
>Generates a string function (since the datatype for the <KBD
CLASS="command"
>datdesc_in</KBD
> parameter is VARCHAR2).</P
></DD
><DT
CLASS="term"
><CODE
CLASS="literal"
> PROCEDURE gas</CODE
></DT
><DT
CLASS="term"
><CODE
CLASS="literal"
>   (name_in IN VARCHAR2, </CODE
></DT
><DT
CLASS="term"
><CODE
CLASS="literal"
>    valtype_in <I
CLASS="replaceable"
>datatype</I
>,  </CODE
></DT
><DT
CLASS="term"
><CODE
CLASS="literal"
>    defval_in IN <I
CLASS="replaceable"
>datatype</I
> := NULL);</CODE
></DT
><DD
CLASS="listitem"
><P
CLASS="para"
>Generates get-and-sets of the specified <KBD
CLASS="command"
>datatype</KBD
>, which is either NUMBER, DATE, or BOOLEAN. Notice that the default has the same datatype as the <KBD
CLASS="command"
>datadesc_in</KBD
> parameter. This is a default value that is evaluated as a literal.</P
></DD
><DT
CLASS="term"
><CODE
CLASS="literal"
> PROCEDURE gas</CODE
></DT
><DT
CLASS="term"
><CODE
CLASS="literal"
>   (name_in IN VARCHAR2, valtype_in <I
CLASS="replaceable"
>datatype</I
>,</CODE
></DT
><DT
CLASS="term"
><CODE
CLASS="literal"
>    defval_in IN VARCHAR2);</CODE
></DT
><DD
CLASS="listitem"
><P
CLASS="para"
>Generates get-and-sets of the specified <KBD
CLASS="command"
>datatype</KBD
>, which is either NUMBER, DATE, or BOOLEAN. Notice that the default in this version is a string. When you use this format, the default value is an expression that is <EM
CLASS="emphasis"
>not</EM
> evaluated.</P
></DD
><DT
CLASS="term"
><CODE
CLASS="literal"
> PROCEDURE toggle (name_in IN VARCHAR2 := NULL);</CODE
></DT
><DD
CLASS="listitem"
><P
CLASS="para"
>Generates a variation of get-and-set based on a Boolean toggle. If you do not give a name, <KBD
CLASS="command"
>turn_on</KBD
> and <KBD
CLASS="command"
>turn_off</KBD
> are used as the on-off procedure names.</P
></DD
></DL
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch05-SECT-13.0.10"
>5.13.10 Miscellaneous code generators</A
></H3
><DL
CLASS="variablelist"
><DT
CLASS="term"
><CODE
CLASS="literal"
> PROCEDURE curdecl </CODE
><A
CLASS="indexterm"
NAME="ch05-idx-1001298-0"
></A
></DT
><DT
CLASS="term"
><CODE
CLASS="literal"
>   (cur_in IN VARCHAR2,</CODE
></DT
><DT
CLASS="term"
><CODE
CLASS="literal"
>    ind_in IN INTEGER := 0,</CODE
></DT
><DT
CLASS="term"
><CODE
CLASS="literal"
>    table_in IN VARCHAR2 := NULL,</CODE
></DT
><DT
CLASS="term"
><CODE
CLASS="literal"
>    collist_in IN VARCHAR2 := NULL,</CODE
></DT
><DT
CLASS="term"
><CODE
CLASS="literal"
>    gen_rec_in IN BOOLEAN := TRUE);</CODE
></DT
><DD
CLASS="listitem"
><P
CLASS="para"
>Generates a cursor declaration with the <SPAN
CLASS="acronym"
>SQL</SPAN
> statement formatted for maximum readability.</P
></DD
><DT
CLASS="term"
><CODE
CLASS="literal"
> PROCEDURE cfloop (table_in IN VARCHAR2); </CODE
><A
CLASS="indexterm"
NAME="ch05-idx-1001299-0"
></A
></DT
><DD
CLASS="listitem"
><P
CLASS="para"
>Generates a cursor FOR loop and framework for a cursor declaration.</P
></DD
><DT
CLASS="term"
><CODE
CLASS="literal"
> PROCEDURE recfnd (table_in IN VARCHAR2);</CODE
><A
CLASS="indexterm"
NAME="ch05-idx-1001300-0"
></A
></DT
><DD
CLASS="listitem"
><P
CLASS="para"
>Generates a function that returns TRUE if a record is found, FALSE otherwise.</P
></DD
><DT
CLASS="term"
><CODE
CLASS="literal"
> PROCEDURE timer (plsql_in IN VARCHAR2);</CODE
><A
CLASS="indexterm"
NAME="ch05-idx-1001301-0"
></A
></DT
><DD
CLASS="listitem"
><P
CLASS="para"
>Generates a function that returns TRUE if a record is found, FALSE otherwise.<A
CLASS="indexterm"
NAME="ch05-idx-1001303-0"
></A
><A
CLASS="indexterm"
NAME="ch05-idx-1001303-1"
></A
><A
CLASS="indexterm"
NAME="ch05-idx-1001303-2"
></A
><A
CLASS="indexterm"
NAME="ch05-idx-1001303-3"
></A
></P
></DD
></DL
></DIV
></DIV
><DIV
CLASS="htmlnav"
><P
></P
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch05_12.htm#ch05-SECT-12.0.4"
TITLE="5.12 PLVfk: Foreign Key Interface"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 5.12 PLVfk: Foreign Key Interface"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="book"
HREF="index.htm"
TITLE="Advanced Oracle PL/SQL Programming with Packages"
><IMG
SRC="../gifs/txthome.gif"
ALT="Advanced Oracle PL/SQL Programming with Packages"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch05_14.htm#ch05-SECT-14.0.3"
TITLE="5.14 PLVhlp: Online Help Architechture"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 5.14 PLVhlp: Online Help Architechture"
BORDER="0"></A
></TD
></TR
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
>5.12 PLVfk: Foreign Key Interface</TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="index"
HREF="index/idx_0.htm"
TITLE="Book Index"
><IMG
SRC="../gifs/index.gif"
ALT="Book Index"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
>5.14 PLVhlp: Online Help Architechture</TD
></TR
></TABLE
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"></DIV
><IMG
SRC="../gifs/smnavbar.gif"
USEMAP="#map"
BORDER="0"
ALT="The Oracle Library Navigation">

<P><font size="-1">
<a href="../copyrght.htm#copy">Copyright (c) 2000</a> O'Reilly & Associates. All rights reserved.
</font></P>

<MAP NAME="map">

<AREA SHAPE="RECT"
COORDS="0,0,35,30"
HREF="../index.htm"
ALT="Library Home">

<AREA SHAPE="RECT"
COORDS="40,0,95,30"
HREF="../prog2/index.htm"
ALT="Oracle PL/SQL Programming, 2nd. Ed.">

<AREA SHAPE="RECT"
COORDS="100,0,200,30"
HREF="../guide8i/index.htm"
ALT="Guide to Oracle 8i Features">

<AREA SHAPE="RECT"
COORDS="205,0,245,30"
HREF="../bipack/index.htm"
ALT="Oracle Built-in Packages">

<AREA SHAPE="RECT"
COORDS="250,0,320,30"
HREF="index.htm"
ALT="Advanced PL/SQL Programming with Packages">

<AREA SHAPE="RECT"
COORDS="325,0,420,30"
HREF="../webapp/index.htm"
ALT="Oracle Web Applications">

<AREA SHAPE="RECT"
COORDS="425,0,490,30"
HREF="../langpkt/index.htm"
ALT="Oracle PL/SQL Language Pocket Reference">

<AREA SHAPE="RECT"
COORDS="495,0,570,30"
HREF="../bipkt/index.htm"
ALT="Oracle PL/SQL Built-ins Pocket Reference">
</MAP>
</BODY
>
<!-- Mirrored from liso.cs.pusan.ac.kr by HTTrack Website Copier/3.x [XR&CO'2001] -->
</HTML
>
