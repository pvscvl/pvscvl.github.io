<HTML
><HEAD
><TITLE
>[Chapter 2] 2.7 Building Windows Into Your Packages</TITLE
><META
NAME="DC.Creator"
CONTENT="Steven Feuerstein"><META
NAME="DC.Date"
CONTENT="2000-04-29T18:22:05Z"><META
NAME="DC.Format"
CONTENT="text/html"
SCHEME="MIME"><META
NAME="DC.Identifier"
CONTENT="O'Reilly and Associates-1-56592-238-7E"><META
NAME="DC.Language"
CONTENT="en-US"><META
NAME="DC.Publisher"
CONTENT="O'Reilly &amp; Associates, Inc."><META
NAME="DC.Source"
CONTENT="1-56592-238-7E"
SCHEME="ISBN"><META
NAME="DC.Subject.Keyword"
CONTENT="PL/SQL SQL Oracle Packages"><META
NAME="DC.Title"
CONTENT="Advanced Oracle PL/SQL Programming with Packages"><META
NAME="DC.Type"
CONTENT="Text.Monograph"><META
NAME="generator"
CONTENT="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><LINK
REL="stylesheet"
TYPE="text/css"
HREF="../style/style1.css"><LINK
REV="made"
HREF="mailto:online-books@oreilly.com"
TITLE="Online Books Comments"><LINK
REL="up"
HREF="ch02_01.htm"
TITLE="2. Best Practices for Packages"><LINK
REL="prev"
HREF="ch02_06.htm#ch02-SECT-6.3.1"
TITLE="2.6 Building Flexibility Into Your Packages"><LINK
REL="next"
HREF="ch02_08.htm"
TITLE="2.8 Overloading for Smart Packages"></HEAD>
<BODY><DIV CLASS="htmlnav"
><H1
><IMG
SRC="gifs/smbanner.gif"
ALT="Advanced Oracle PL/SQL Programming with Packages"
USEMAP="#srchmap"
BORDER="0"></H1
><MAP
NAME="srchmap"
><AREA
SHAPE="RECT"
COORDS="0,0,466,65"
HREF="index.htm"
ALT="Advanced Oracle PL/SQL Programming with Packages"><AREA
SHAPE="RECT"
COORDS="467,0,514,18"
HREF="jobjects/fsearch.htm"
ALT="Search this book"></MAP
><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch02_06.htm#ch02-SECT-6.3.1"
TITLE="2.6 Building Flexibility Into Your Packages"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 2.6 Building Flexibility Into Your Packages"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><SPAN
CLASS="NAVTITLE"
><A
CLASS="chapter"
REL="up"
HREF="ch02_01.htm"
TITLE="2. Best Practices for Packages"
>Chapter 2<BR>Best Practices for Packages</A
></SPAN
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch02_08.htm"
TITLE="2.8 Overloading for Smart Packages"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 2.8 Overloading for Smart Packages"
BORDER="0"></A
></TD
></TR
></TABLE
>&nbsp;<HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"></DIV
><DIV
CLASS="sect1"
><H2
CLASS="sect1"
><A
CLASS="title"
NAME="ch02-20739"
>2.7 Building Windows Into Your Packages</A
></H2
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="ch02-idx-1000010-0"
></A
><A
CLASS="indexterm"
NAME="ch02-idx-1000010-1"
></A
><A
CLASS="indexterm"
NAME="ch02-idx-1000010-2"
></A
><A
CLASS="indexterm"
NAME="ch02-idx-1000010-3"
></A
>A special kind of toggle can be used to provide what I call a window into a package. This window allows a restricted view into the inner workings of a package, which can be critical to making the package usable in a complex, multilayered application. </P
><P
CLASS="para"
>As I've explained in <A
CLASS="xref"
HREF="ch01_01.htm"
>Chapter 1, <CITE
CLASS="chapter"
>PL/SQL Packages</CITE
></A
>, packages are broken up into the specification and the body. The specification defines those elements that can be called from outside of the package (the <A
CLASS="indexterm"
NAME="ch02-idx-1000021-0"
></A
><A
CLASS="indexterm"
NAME="ch02-idx-1000021-1"
></A
><EM
CLASS="emphasis"
>public</EM
> elements). The body contains the implementation of public elements and also of <EM
CLASS="emphasis"
>private</EM
> elements (those elements that can only be referenced inside the body of the package). This dichotomy allows us to hide quite securely implementation details that users need not be aware of in order to make use of the package.</P
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="ch02-idx-1000022-0"
></A
><A
CLASS="indexterm"
NAME="ch02-idx-1000022-1"
></A
><A
CLASS="indexterm"
NAME="ch02-idx-1000022-2"
></A
>This "information hiding" aspect of packages is a great feature&nbsp;-- until a developer needs to know what is going on inside the package. The black box in this case can become a hindrance. For example, I built a package called <A
CLASS="indexterm"
NAME="ch02-idx-1000023-0"
></A
>PLVdyn (which stands for "PL/Vision DYNamic <SPAN
CLASS="acronym"
>SQL</SPAN
>") to make it easier for developers to use the built-in DBMS_SQL package. PLVdyn lets the user parse and execute dynamically constructed <SPAN
CLASS="acronym"
>SQL</SPAN
> and <SPAN
CLASS="acronym"
>PL/SQL</SPAN
> statements without fussing with all the details inherent in the built-in package.</P
><P
CLASS="para"
>With PLVdyn, you construct a <SPAN
CLASS="acronym"
>SQL</SPAN
> statement and pass that string to a PLVdyn program for parsing or execution. It's a big time-saver, but it also implies a loss of some control. You trust PLVdyn to do the right thing&nbsp;-- and it does. The question that is more likely in need of an answer: what is your code passing to PLVdyn? </P
><P
CLASS="para"
>The code we write to construct the dynamic <SPAN
CLASS="acronym"
>SQL</SPAN
> statement is often complicated. The PL/Vision packages themselves make extensive use of PLVdyn. As I tested PLVdyn, I often found that I wanted to see the <SPAN
CLASS="acronym"
>SQL</SPAN
> statement that PLVdyn was executing, so I could verify that my <EM
CLASS="emphasis"
>calling</EM
> program (in PLVio or PLVlog or...) had put the <SPAN
CLASS="acronym"
>SQL</SPAN
> together properly. This was not, conceptually, a difficult problem. I could simply place calls to DBMS_OUTPUT <EM
CLASS="emphasis"
>before</EM
> each of my calls to PLVdyn modules. In this way, I would not have to change PLVdyn (it is not, after all, the fault of PLVdyn&nbsp;-- or its author!&nbsp;-- that I wasn't sure what my code was doing). With this approach, if I used <I
CLASS="function"
>PLVdyn.ddl</I
> to execute a DDL statement, I could simply preface it with a call to <I
CLASS="function"
>p.l</I
> (the PL/Vision version of DBMS_OUTPUT) as follows:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>p.l (ddl_statement);
PLVdyn.ddl (ddl_statement);</PRE
></BLOCKQUOTE
><P
CLASS="para"
>For all its simplicity, there is a key drawback to this solution: I would have to add calls to <I
CLASS="function"
>p.l</I
> in all the places I call a PLVdyn program. This meant going back to existing programs to make changes. I would have to remember to add this call whenever I used PLVdyn or felt the need to trace my activity. In either case, it involved changes to my code. Such changes invite misspellings and logical bugs.</P
><P
CLASS="para"
>This weakness, combined with the need to see what PLVdyn is doing almost caused me to abandon PLVdyn. Rather than use the package, developers would cannibalize it for the parts that seem useful. Or they would simply ignore this package-based solution and write all of their dynamic <SPAN
CLASS="acronym"
>SQL</SPAN
> directly into their programs. The result? Applications that do not reuse prebuilt code, but instead create maintenance and enhancement nightmares.</P
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch02-SECT-7.1"
>2.7.1 Centralizing the View Mechanism</A
></H3
><P
CLASS="para"
>A far superior approach would allow users to view the string they passed to PLVdyn <EM
CLASS="emphasis"
>without</EM
> changing any of their own code. This view mechanism would be sophisticated enough to handle any number of different scenarios for <SPAN
CLASS="acronym"
>SQL</SPAN
> statement output, such as very long strings. The way to implement this approach successfully is to build the viewing feature directly into the PLVdyn package itself. </P
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="ch02-idx-1000024-0"
></A
>With the trace implemented inside PLVdyn, I can avoid modifying my own code when the output from that trace is needed. Instead, I can simply call a program in the PLVdyn package to tell it turn on the trace. I can then view the output until it is no longer needed and call a program to direct the package to turn off the trace. This sequence of commands is illustrated below, along with the toggle, a call to the PLVcmt which turns off commit processing. I want to run a test of my program to shift employees; I want to check my dynamic <SPAN
CLASS="acronym"
>SQL</SPAN
> without actually committing any possible mistakes.</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>SQL&gt; exec PLVdyn.showsql
SQL&gt; exec PLVcmt.turn_off
SQL&gt; @test_move_emps
PLVdyn: INSERT INTO emp VALUES (1506, 1105, 'SMITH')
PLVdyn: UPDATE emp SET sal = 150000
PLVdyn: UPDATE emp SET hiredate = SYSDATE</PRE
></BLOCKQUOTE
><P
CLASS="para"
>I execute these steps, look over the trace, and decide that this all looks good. I then turn on commit processing, turn off the <SPAN
CLASS="acronym"
>SQL</SPAN
> trace, and run the program. All without making a single change to the <KBD
CLASS="command"
>move_emps</KBD
> program.</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>SQL&gt; exec PLVdyn.noshowsql
SQL&gt; exec PLVcmt.turn_on
SQL&gt; @move_emps</PRE
></BLOCKQUOTE
><P
CLASS="para"
>By incorporating the trace into PLVdyn, I can't deny that I make my own job that much more difficult. I have to write the code for the trace and then figure out how best to implement it comprehensively for all PLVdyn modules. Yet once I have provided this feature, it is available for all users of PLVdyn. This kind of tradeoff (author effort vs. user ease of use) is always worthwhile in my view.</P
><P
CLASS="para"
>There are two aspects to keep in mind when building a trace or window into a package:</P
><OL
CLASS="orderedlist"
><LI
CLASS="listitem"
><P
CLASS="para"
>You need to provide the programmatic interface so that a developer can turn on/off the trace. This interface is a typical PL/Vision toggle and will usually take the same form in any package. As a result, it is a prime candidate for generation with the PLVgen package (see the <KBD
CLASS="command"
>toggle</KBD
> and <KBD
CLASS="command"
>gas</KBD
> procedures in <A
CLASS="xref"
HREF="ch15_01.htm"
>Chapter 15</A
>).</P
></LI
><LI
CLASS="listitem"
><P
CLASS="para"
>You need to implement the trace carefully inside your package. What information will you provide? What mechanism will you use to display the trace? DBMS_OUTPUT or the <I
CLASS="function"
>p</I
> package or maybe even the PLVlog package? And, most importantly, <EM
CLASS="emphasis"
>where</EM
> will you put the trace in the package so that you can minimize the number of different places it will appear? Remember: you want to avoid code redundancy. If you were aggressive about modularizing your package body, you should be able to identify a few programs or maybe even just one program (when you wish upon a star...) in which the trace can be implemented, but will then be used by all programs in the package. This process is explored in the next section.</P
></LI
></OL
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch02-SECT-7.2"
>2.7.2 Designing the Window Interface</A
></H3
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="ch02-idx-1000025-0"
></A
><A
CLASS="indexterm"
NAME="ch02-idx-1000025-1"
></A
>The first step in <A
CLASS="indexterm"
NAME="ch02-idx-1000033-0"
></A
>installing a window in a package is to design the interface for the window, also referenced in this section as a trace. To do this, I must ask and answer these questions: </P
><UL
CLASS="itemizedlist"
><LI
CLASS="listitem"
><P
CLASS="para"
>How should the user ask to turn the trace on and off?</P
></LI
><LI
CLASS="listitem"
><P
CLASS="para"
>What other information can I provide to or ask from the user?</P
></LI
></UL
><P
CLASS="para"
>The easiest way for developers to specify their desires is to call a procedure. The first inclination might be to build a single procedure that accepts actions such as ON or TRACE vs. OFF or NO_TRACE as a single parameter. The header for such a procedure would look like this:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>PROCEDURE set_trace (onoff_in IN VARCHAR2);</PRE
></BLOCKQUOTE
><P
CLASS="para"
>The developer would then call <KBD
CLASS="command"
>set_trace</KBD
> in SQL*Plus or another execution environment as follows:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>SQL&gt; exec PLVdyn.set_trace ('ON');
SQL&gt; exec PLVdyn.set_trace ('OFF');</PRE
></BLOCKQUOTE
><P
CLASS="para"
>The problem with this approach is that the developer must then know what value to pass to the procedure to achieve the proper effect. Is it ON or YES? Is the value case-insensitive? Why, I ask myself in this situation, should a developer have to worry about such things? Even the seemingly clear TRUE/FALSE Boolean values are open to interpretation. If you generally do not want the trace in action, then TRUE should mean "keep it off." If you are often interested in the output of the trace, you would most naturally conclude that TRUE means "show the trace." </P
><P
CLASS="para"
>A completely different technique is to provide two different programs to turn the trace on and off. The names of the programs themselves would make it very clear what they did. You don't have to worry about getting a literal value wrong. If you type in the wrong program name, the runtime engine will inform you immediately of the error.</P
><P
CLASS="para"
>I can employ a very generic naming convention for this pair of on/off procedures as follows:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>PROCEDURE turn_on;
PROCEDURE turn_off;</PRE
></BLOCKQUOTE
><P
CLASS="para"
>As an alternative, I could use names that describe the type of trace being provided. This is especially important when more than one trace is provided in the same package.</P
><P
CLASS="para"
>In PLVdyn, I opted for the less generic style and so provide these two procedures in the package specification:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>PROCEDURE showsql;
PROCEDURE noshowsql;</PRE
></BLOCKQUOTE
><P
CLASS="para"
>With these programs in place, I could turn on my trace in SQL*Plus as follows (<I
CLASS="filename"
>ssoo.sql</I
> is a PL/Vision script that sets SERVEROUTPUT to ON, enabling the DBMS_OUTPUT package in SQL*Plus):</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>SQL&gt; @ssoo
SQL&gt; execute PLVdyn.showsql;</PRE
></BLOCKQUOTE
><P
CLASS="para"
>The third program of the package trace is a function that lets me know the current status of the PLVdyn trace facility. In the PLVdyn package, I offer the <KBD
CLASS="command"
>showing_sql</KBD
> function. This program returns TRUE if the trace is turned on, <SPAN
CLASS="acronym"
>FALSE</SPAN
> otherwise:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>FUNCTION showing_sql RETURN BOOLEAN;</PRE
></BLOCKQUOTE
><P
CLASS="para"
>The PLVdyn uses this function (shown later in this section) when trying to determine whether or not the <SPAN
CLASS="acronym"
>SQL</SPAN
> should be shown. Even the package body respects the interface of the toggle and uses the function instead of a direct reference to the private variable.</P
><P
CLASS="para"
>The <KBD
CLASS="command"
>showing_sql</KBD
> function also provides a sense of completeness to the interface for the trace facility. A developer using PLVdyn can remain within the API of the package to obtain all the information she needs to use the trace and get the most out of the package.</P
><P
CLASS="para"
>The full implementation of the trace facility in PLVdyn even goes a bit further than you have seen so far. The header for the <I
CLASS="function"
>showsql</I
> procedure is:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>PROCEDURE showsql (start_with_in IN VARCHAR2 := NULL);</PRE
></BLOCKQUOTE
><P
CLASS="para"
>You can, in other words, provide a string to <I
CLASS="function"
>showsql</I
> to indicate the point in the <SPAN
CLASS="acronym"
>SQL</SPAN
> from which you want to view the text. You could ask to see, for example, everything after the WHERE keyword by calling <I
CLASS="function"
>showsql</I
> as follows:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>SQL&gt; exec PLVdyn.showsql ('where');</PRE
></BLOCKQUOTE
><P
CLASS="para"
>This additional flexibility can come in handy when you don't want to have to read your way through a long, complicated <SPAN
CLASS="acronym"
>SQL</SPAN
> statement. It's quite easy to provide additional functionality to a package window once it has been put in place. My first implementation of <KBD
CLASS="command"
>showsql</KBD
> did not support this "start with" argument nor did it display long strings very gracefully. I was able to add all of this functionality incrementally as I identified the need.</P
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch02-SECT-7.3"
>2.7.3 Implementing the Window</A
></H3
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="ch02-idx-1000034-0"
></A
>Now that the interface to the window has been defined, I need to implement the code that will fill that window with data. One of the biggest challenges in crafting a trace facility in a package like PLVdyn is to figure out where to put the trace. PLVdyn is a big package, offering many different high-level operators to perform dynamic <SPAN
CLASS="acronym"
>SQL</SPAN
>. </P
><P
CLASS="para"
>I did not want to have to add calls to DBMS_OUTPUT all over the package. That would make it more difficult to maintain and enhance. So I analyzed the way the package (and dynamic <SPAN
CLASS="acronym"
>SQL</SPAN
>) works and found my attention drawn back continually to the <KBD
CLASS="command"
>open_and_parse</KBD
><A
CLASS="indexterm"
NAME="ch02-idx-1000040-0"
></A
> function. Before you can execute a <SPAN
CLASS="acronym"
>SQL</SPAN
> statement, you have to open a cursor and then parse the <SPAN
CLASS="acronym"
>SQL</SPAN
>. </P
><P
CLASS="para"
>The <KBD
CLASS="command"
>open_and_parse</KBD
> function was one of the first programs I created in PLVdyn, and it is used by all other programs before they move on to their specific dynamic tasks. As a result, <KBD
CLASS="command"
>open_and_parse</KBD
> acts as a kind of gateway into the rest of the package. I reasoned, therefore, that if I added the trace capability to <KBD
CLASS="command"
>open_and_parse</KBD
>, I could then make the trace available to the entire package. Now that's a payoff from earlier modularization! Here is the body of <KBD
CLASS="command"
>open_and_parse</KBD
>:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>FUNCTION open_and_parse (string_in IN VARCHAR2,
    mode_in IN INTEGER := DBMS_SQL.NATIVE) RETURN INTEGER
IS
   cur INTEGER := DBMS_SQL.OPEN_CURSOR;
BEGIN
   display_dynamic_sql (string_in);
   DBMS_SQL.PARSE (cur, string_in, mode_in);
   RETURN cur;
END;</PRE
></BLOCKQUOTE
><P
CLASS="para"
>As you can see, the <KBD
CLASS="command"
>display_dynamic_sql</KBD
> procedure intercepts the string that is going to be parsed by the built-in PARSE procedure. A simplified version of the <KBD
CLASS="command"
>display</KBD
> program is shown below:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>PROCEDURE display_dynamic_sql (string_in IN VARCHAR2)
IS
BEGIN
   IF showing_sql
   THEN
      PLVprs.display_wrap ('PLVdyn: ' || v_string, 60);
   END IF;
END;</PRE
></BLOCKQUOTE
><P
CLASS="para"
>Notice that <KBD
CLASS="command"
>display_dynamic_sql</KBD
> only displays information when <KBD
CLASS="command"
>showing_sql</KBD
> returns TRUE. It also takes advantage of the <KBD
CLASS="command"
>PLVprs.display_wrap</KBD
> procedure to show long <SPAN
CLASS="acronym"
>SQL</SPAN
> statements in paragraph form wrapped at a line size of 60 columns.</P
><P
CLASS="para"
>The <KBD
CLASS="command"
>open_and_parse</KBD
> program is called six times in PLVdyn. Actually, as I wrote this section, I had been thinking that the count would be even higher. It turns out that any of the programs that call <KBD
CLASS="command"
>open_and_parse</KBD
> are, in turn, called by other PLVdyn modules, keeping the direct references to <KBD
CLASS="command"
>open_and_parse</KBD
> from exploding. The <KBD
CLASS="command"
>display_dynamic_sql</KBD
> program, on the other hand, is called just once. When I want to upgrade or change the functionality of my trace, I can go to this one program and make all the changes. </P
><P
CLASS="para"
>The way I was able to implement the trace in PLVdyn is a best-case scenario. The requirement in dynamic <SPAN
CLASS="acronym"
>SQL</SPAN
> to parse your <SPAN
CLASS="acronym"
>SQL</SPAN
> statement, combined with my initial modularization and reuse of <KBD
CLASS="command"
>open_and_parse</KBD
>, offered an easy way to put the trace in place. In other PL/Vision packages and your own as well, you may need to include calls to your trace display mechanism more than once. That's fine, as long as you do create a separate procedure to display the information (do not just call DBMS_OUTPUT.PUT_LINE directly in your package) and as long as you minimize the number of repetitions of the program.<A
CLASS="indexterm"
NAME="ch02-idx-1000038-0"
></A
><A
CLASS="indexterm"
NAME="ch02-idx-1000038-1"
></A
></P
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch02-SECT-7.4"
>2.7.4 Summarizing the Window Technique</A
></H3
><P
CLASS="para"
>The trace facility of PLVdyn illustrates some important principles of both generic package structure and high-quality reusable code (see <A
CLASS="xref"
HREF="ch02_07.htm"
>Figure 2.1</A
>). First, the public-private nature of the package allows me to construct a window into PLVdyn. This window offers a very controlled glimpse into the interior of the package. I let developers view the dynamic <SPAN
CLASS="acronym"
>SQL</SPAN
> string, but they can't look at or do anything else. This level of control allows Oracle to give us all of those wonderful built-in packages like DBMS_SQL and DBMS_PIPE. And it lets developers provide reusable <SPAN
CLASS="acronym"
>PL/SQL</SPAN
> components to other developers without fearing corruption of internal data structures. </P
><H4
CLASS="figure"
><A
CLASS="title"
NAME="ch02-27798"
>Figure 2.1: Window/trace in PLVdyn</A
></H4
><IMG
CLASS="graphic"
SRC="figs/pladv_0201.gif"
ALT="Figure 2.1"><P
CLASS="para"
>The three elements of the interface to the window are:</P
><OL
CLASS="orderedlist"
><LI
CLASS="listitem"
><P
CLASS="para"
>A procedure to open the window and turn on the trace</P
></LI
><LI
CLASS="listitem"
><P
CLASS="para"
>A procedure to close the window and turn off the trace</P
></LI
><LI
CLASS="listitem"
><P
CLASS="para"
>A function that returns TRUE if the window is open, FALSE otherwise</P
></LI
></OL
><P
CLASS="para"
>Your package can have more than one window, in which case you will want to have a distinct triumvirate of programs for each trace (multiple toggles, in other words). If you have a number of different kinds of windows, you may also want to build a master switch that turns on and off all of the windows at once. The PLVgen <KBD
CLASS="command"
>usemin</KBD
> and <KBD
CLASS="command"
>usemax</KBD
> procedures are good examples of this meta-toggle for multiple flags in the package.</P
><P
CLASS="para"
>As you build more and more sophisticated packages, you will find yourself building code in multiple layers that interact in ways mysterious to normal human beings. The windowing technique illustrated by <I
CLASS="function"
>PLVdyn.showsql</I
> will be absolutely critical to making your packages widely accessible and usable. If you do not provide clearly defined windows into your inner workings, there is a good chance that developers will first be baffled and then become frustrated. The end result is that they will not use your packages.<A
CLASS="indexterm"
NAME="ch02-idx-1000012-0"
></A
><A
CLASS="indexterm"
NAME="ch02-idx-1000012-1"
></A
><A
CLASS="indexterm"
NAME="ch02-idx-1000012-2"
></A
><A
CLASS="indexterm"
NAME="ch02-idx-1000012-3"
></A
></P
></DIV
></DIV
><DIV
CLASS="htmlnav"
><P
></P
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch02_06.htm#ch02-SECT-6.3.1"
TITLE="2.6 Building Flexibility Into Your Packages"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 2.6 Building Flexibility Into Your Packages"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="book"
HREF="index.htm"
TITLE="Advanced Oracle PL/SQL Programming with Packages"
><IMG
SRC="../gifs/txthome.gif"
ALT="Advanced Oracle PL/SQL Programming with Packages"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch02_08.htm"
TITLE="2.8 Overloading for Smart Packages"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 2.8 Overloading for Smart Packages"
BORDER="0"></A
></TD
></TR
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
>2.6 Building Flexibility Into Your Packages</TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="index"
HREF="index/idx_0.htm"
TITLE="Book Index"
><IMG
SRC="../gifs/index.gif"
ALT="Book Index"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
>2.8 Overloading for Smart Packages</TD
></TR
></TABLE
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"></DIV
><IMG
SRC="../gifs/smnavbar.gif"
USEMAP="#map"
BORDER="0"
ALT="The Oracle Library Navigation">

<P><font size="-1">
<a href="../copyrght.htm#copy">Copyright (c) 2000</a> O'Reilly & Associates. All rights reserved.
</font></P>

<MAP NAME="map">

<AREA SHAPE="RECT"
COORDS="0,0,35,30"
HREF="../index.htm"
ALT="Library Home">

<AREA SHAPE="RECT"
COORDS="40,0,95,30"
HREF="../prog2/index.htm"
ALT="Oracle PL/SQL Programming, 2nd. Ed.">

<AREA SHAPE="RECT"
COORDS="100,0,200,30"
HREF="../guide8i/index.htm"
ALT="Guide to Oracle 8i Features">

<AREA SHAPE="RECT"
COORDS="205,0,245,30"
HREF="../bipack/index.htm"
ALT="Oracle Built-in Packages">

<AREA SHAPE="RECT"
COORDS="250,0,320,30"
HREF="index.htm"
ALT="Advanced PL/SQL Programming with Packages">

<AREA SHAPE="RECT"
COORDS="325,0,420,30"
HREF="../webapp/index.htm"
ALT="Oracle Web Applications">

<AREA SHAPE="RECT"
COORDS="425,0,490,30"
HREF="../langpkt/index.htm"
ALT="Oracle PL/SQL Language Pocket Reference">

<AREA SHAPE="RECT"
COORDS="495,0,570,30"
HREF="../bipkt/index.htm"
ALT="Oracle PL/SQL Built-ins Pocket Reference">
</MAP>
</BODY
>
<!-- Mirrored from liso.cs.pusan.ac.kr by HTTrack Website Copier/3.x [XR&CO'2001] -->
</HTML
>
