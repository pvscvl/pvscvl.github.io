<HTML
><HEAD
><TITLE
>[Chapter 15] 15.3 Displaying Source Code</TITLE
><META
NAME="DC.Creator"
CONTENT="Steven Feuerstein"><META
NAME="DC.Date"
CONTENT="2000-04-29T18:28:35Z"><META
NAME="DC.Format"
CONTENT="text/html"
SCHEME="MIME"><META
NAME="DC.Identifier"
CONTENT="O'Reilly and Associates-1-56592-238-7E"><META
NAME="DC.Language"
CONTENT="en-US"><META
NAME="DC.Publisher"
CONTENT="O'Reilly &amp; Associates, Inc."><META
NAME="DC.Source"
CONTENT="1-56592-238-7E"
SCHEME="ISBN"><META
NAME="DC.Subject.Keyword"
CONTENT="PL/SQL SQL Oracle Packages"><META
NAME="DC.Title"
CONTENT="Advanced Oracle PL/SQL Programming with Packages"><META
NAME="DC.Type"
CONTENT="Text.Monograph"><META
NAME="generator"
CONTENT="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><LINK
REL="stylesheet"
TYPE="text/css"
HREF="../style/style1.css"><LINK
REV="made"
HREF="mailto:online-books@oreilly.com"
TITLE="Online Books Comments"><LINK
REL="up"
HREF="ch15_01.htm"
TITLE="15. PLVvu: Viewing Source Code and Compile Errors"><LINK
REL="prev"
HREF="ch15_02.htm"
TITLE="15.2 Displaying Compile Errors"><LINK
REL="next"
HREF="ch15_04.htm#ch15-SECT-4.1"
TITLE="15.4 Implementing PLVvu"></HEAD>
<BODY><DIV CLASS="htmlnav"
><H1
><IMG
SRC="gifs/smbanner.gif"
ALT="Advanced Oracle PL/SQL Programming with Packages"
USEMAP="#srchmap"
BORDER="0"></H1
><MAP
NAME="srchmap"
><AREA
SHAPE="RECT"
COORDS="0,0,466,65"
HREF="index.htm"
ALT="Advanced Oracle PL/SQL Programming with Packages"><AREA
SHAPE="RECT"
COORDS="467,0,514,18"
HREF="jobjects/fsearch.htm"
ALT="Search this book"></MAP
><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch15_02.htm"
TITLE="15.2 Displaying Compile Errors"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 15.2 Displaying Compile Errors"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><SPAN
CLASS="NAVTITLE"
><A
CLASS="chapter"
REL="up"
HREF="ch15_01.htm"
TITLE="15. PLVvu: Viewing Source Code and Compile Errors"
>Chapter 15<BR>PLVvu: Viewing Source Code and Compile Errors</A
></SPAN
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch15_04.htm#ch15-SECT-4.1"
TITLE="15.4 Implementing PLVvu"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 15.4 Implementing PLVvu"
BORDER="0"></A
></TD
></TR
></TABLE
>&nbsp;<HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"></DIV
><DIV
CLASS="sect1"
><H2
CLASS="sect1"
><A
CLASS="title"
NAME="ch15-28121"
>15.3 Displaying Source Code</A
></H2
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="ch15-idx-998795-0"
></A
><A
CLASS="indexterm"
NAME="ch15-idx-998795-1"
></A
>PLVvu provides two procedures to display source code: the <KBD
CLASS="command"
>code</KBD
> and <KBD
CLASS="command"
>code_after</KBD
> programs. The <KBD
CLASS="command"
>code</KBD
> program displays all the lines of code for the specified program unit found between the start and end lines specified. The <KBD
CLASS="command"
>code_after</KBD
> program displays the specified number of lines found after the <EM
CLASS="emphasis"
>n</EM
> th occurrence of a particular string. They are both explained below.</P
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch15-SECT-3.1"
>15.3.1 Displaying Code by Line Number</A
></H3
><P
CLASS="para"
>The header for the <KBD
CLASS="command"
>code</KBD
> program is:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>PROCEDURE code
   (name_in IN VARCHAR2 := NULL, 
    start_in IN INTEGER := 1,
    end_in IN INTEGER := NULL,
    header_in IN VARCHAR2 := 'Code for');</PRE
></BLOCKQUOTE
><P
CLASS="para"
>The first argument is the name of the program unit. If you do not supply a program, <KBD
CLASS="command"
>PLVvu.code</KBD
> will use the object last compiled into the database. </P
><P
CLASS="para"
>The format for specifying a program unit is explained in <A
CLASS="xref"
HREF="ch11_01.htm"
>Chapter 11</A
>. Briefly, you can supply only the name, the <EM
CLASS="emphasis"
>type:name</EM
> (as in "b:PLVio" for the body of the PLVio package), or even the <EM
CLASS="emphasis"
>type:schema.name</EM
> (as in "s:scott.showemps" to see the specification of the <KBD
CLASS="command"
>showemps</KBD
> package owned by SCOTT).</P
><P
CLASS="para"
>The second and third arguments provide the range of line numbers of the code to be displayed. The default is all lines, with the start value of 1 and the end value NULL. The final argument provides a prefix for the output's header.</P
><P
CLASS="para"
>If you want to see all the lines of source code for a program unit, simply pass the program name and leave all the other arguments as the default. This approach is shown below:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>SQL&gt; exec PLVvu.code('s:testcase');
 --------------------------------------------------------------------
 Code for PACKAGE TESTCASE
 --------------------------------------------------------------------
 Line#  Source
 --------------------------------------------------------------------
     1 package testcase
     2 is
     3    procedure save (string_in in varchar2);
     4 end testcase;</PRE
></BLOCKQUOTE
><P
CLASS="para"
>The next call to <KBD
CLASS="command"
>PLVvu.code</KBD
> requests that it display lines 85 through 95 of the body of the PLVvu package.</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>SQL&gt; exec PLVvu.code ('b:PLVvu', 85, 95, 'Contents of');
 ----------------------------------------------------------------------
 Contents of PACKAGE BODY PLVVU
 ----------------------------------------------------------------------
 Line#  Source
 ----------------------------------------------------------------------
    85      THEN
    86         p.l ('ERR' || LPAD ('*', err_rec.position+4));
    87         PLVprs.display_wrap
    88            (PLVchr.stripped (err_rec.text, PLVchr.newline_char),
    89             60, '    ');
    90      END IF;
    91      CLOSE err_cur;
    92   END;
    93   /*--------------- Public Modules -----------------*/
    94   PROCEDURE set_overlap
    95      (size_in IN INTEGER := c_overlap)</PRE
></BLOCKQUOTE
><P
CLASS="para"
>The <KBD
CLASS="command"
>code.sql</KBD
> SQL*Plus script allows you to skip some of the typing (and all of those irritating single quotes) when you use <KBD
CLASS="command"
>PLVvu.code</KBD
>. The last execution of <KBD
CLASS="command"
>PLVvu.code</KBD
>, for example, could be shortened to:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>SQL&gt; @code b:PLVvu 85 95</PRE
></BLOCKQUOTE
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch15-SECT-3.2"
>15.3.2 Displaying Code by Keyword</A
></H3
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="ch15-idx-998796-0"
></A
>The code procedure is very useful and saves you the effort of putting together a quick SQL*Plus script to view lines of source code. However, scanning source code by line number ranges is not the only way you might want to locate and view your code. Another common method is to search for a keyword and then display the lines of code before, after, or around that keyword. </P
><P
CLASS="para"
>The <KBD
CLASS="command"
>code_after</KBD
><A
CLASS="indexterm"
NAME="ch15-idx-998797-0"
></A
> procedure displays the specified lines of code appearing after the <EM
CLASS="emphasis"
>n</EM
>th occurrence of a keyword you provide. The header for <KBD
CLASS="command"
>code_after</KBD
> is:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>PROCEDURE code_after
   (name_in IN VARCHAR2 := NULL, 
    start_with_in IN VARCHAR2,
    num_lines_in IN INTEGER := overlap,
    nth_in IN INTEGER := 1)</PRE
></BLOCKQUOTE
><P
CLASS="para"
>The first argument is the name of the program unit. If you do not supply a program, <KBD
CLASS="command"
>PLVvu.code</KBD
> will use the object last compiled into the database. </P
><P
CLASS="para"
>The format for specifying a program unit is explained in <A
CLASS="xref"
HREF="ch11_01.htm"
>Chapter 11</A
>. Briefly, you can supply only the name, the <EM
CLASS="emphasis"
>type:name</EM
> (as in "b:PLVio" for the body of the PLVio package), or even the <EM
CLASS="emphasis"
>type:schema.name</EM
> (as in "s:scott.showemps" to see the specification of the <KBD
CLASS="command"
>showemps</KBD
> package owned by SCOTT).</P
><P
CLASS="para"
>The second argument supplies the string for which <KBD
CLASS="command"
>code_after</KBD
> will search. The <KBD
CLASS="command"
>num_lines_in</KBD
> argument is the number of lines after the keyword is found that will be displayed (default provided by the current value of the overlap count). The last argument, <KBD
CLASS="command"
>nth_in</KBD
>, specifies the number of occurrences to be located before displaying the subsequent lines of code.</P
><P
CLASS="para"
>The following calls to <KBD
CLASS="command"
>code_after</KBD
> demonstrate the use of these different arguments. In the first example, I ask to see the default number of lines (5) following the first occurrence of SUBSTR. In the second call to <KBD
CLASS="command"
>code_after</KBD
>, I request to see only three lines following the fifth occurrence of SUBSTR.</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>SQL&gt; exec PLVvu.code_after('b:PLVio','SUBSTR');
 ----------------------------------------------------------------------
 Code Starting with &quot;SUBSTR&quot; in PACKAGE BODY PLVIO
 ----------------------------------------------------------------------
 Line#  Source
 ----------------------------------------------------------------------
   330           (SUBSTR (srcrep.select_sql, 1, loc-1) ||
   331           srcrep.where_clause || ' ' ||
   332           SUBSTR (srcrep.select_sql, loc));
   333      ELSE
   334         RETURN srcrep.select_sql;
   335      END IF;

SQL&gt; exec PLVvu.code_after('b:PLVio','SUBSTR', 3, 5);
 ----------------------------------------------------------------------
 Code Starting with &quot;SUBSTR&quot; in PACKAGE BODY PLVIO
 ----------------------------------------------------------------------
 Line#  Source
 ----------------------------------------------------------------------
   704                   SUBSTR
   705                      (string_repos.text_in,
   706                       string_repos.start_pos);
   707                string_repos.start_pos :=</PRE
></BLOCKQUOTE
><P
CLASS="para"
>Now you know how to use the <KBD
CLASS="command"
>code</KBD
> and <KBD
CLASS="command"
>code_after</KBD
> procedures to display your source code. <A
CLASS="xref"
HREF="ch15_04.htm#ch15-SECT-4.1"
>Section 15.4, "Implementing PLVvu"</A
> shows you the techniques used to obtain this information.<A
CLASS="indexterm"
NAME="ch15-idx-998798-0"
></A
></P
><DIV
CLASS="sidebar"
><H4
CLASS="sidebar"
><A
CLASS="title"
NAME="AUTOID-16145"
>Special Notes on PLVvu</A
></H4
><P
CLASS="para"
>Currently PLVvu only reads from the ALL_SOURCE data dictionary view to show source text with the <KBD
CLASS="command"
>code</KBD
> and <KBD
CLASS="command"
>code_after</KBD
> procedures. You cannot, for example, redirect the "source repository" to a file. </P
></DIV
></DIV
></DIV
><DIV
CLASS="htmlnav"
><P
></P
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch15_02.htm"
TITLE="15.2 Displaying Compile Errors"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 15.2 Displaying Compile Errors"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="book"
HREF="index.htm"
TITLE="Advanced Oracle PL/SQL Programming with Packages"
><IMG
SRC="../gifs/txthome.gif"
ALT="Advanced Oracle PL/SQL Programming with Packages"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch15_04.htm#ch15-SECT-4.1"
TITLE="15.4 Implementing PLVvu"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 15.4 Implementing PLVvu"
BORDER="0"></A
></TD
></TR
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
>15.2 Displaying Compile Errors</TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="index"
HREF="index/idx_0.htm"
TITLE="Book Index"
><IMG
SRC="../gifs/index.gif"
ALT="Book Index"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
>15.4 Implementing PLVvu</TD
></TR
></TABLE
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"></DIV
><IMG
SRC="../gifs/smnavbar.gif"
USEMAP="#map"
BORDER="0"
ALT="The Oracle Library Navigation">

<P><font size="-1">
<a href="../copyrght.htm#copy">Copyright (c) 2000</a> O'Reilly & Associates. All rights reserved.
</font></P>

<MAP NAME="map">

<AREA SHAPE="RECT"
COORDS="0,0,35,30"
HREF="../index.htm"
ALT="Library Home">

<AREA SHAPE="RECT"
COORDS="40,0,95,30"
HREF="../prog2/index.htm"
ALT="Oracle PL/SQL Programming, 2nd. Ed.">

<AREA SHAPE="RECT"
COORDS="100,0,200,30"
HREF="../guide8i/index.htm"
ALT="Guide to Oracle 8i Features">

<AREA SHAPE="RECT"
COORDS="205,0,245,30"
HREF="../bipack/index.htm"
ALT="Oracle Built-in Packages">

<AREA SHAPE="RECT"
COORDS="250,0,320,30"
HREF="index.htm"
ALT="Advanced PL/SQL Programming with Packages">

<AREA SHAPE="RECT"
COORDS="325,0,420,30"
HREF="../webapp/index.htm"
ALT="Oracle Web Applications">

<AREA SHAPE="RECT"
COORDS="425,0,490,30"
HREF="../langpkt/index.htm"
ALT="Oracle PL/SQL Language Pocket Reference">

<AREA SHAPE="RECT"
COORDS="495,0,570,30"
HREF="../bipkt/index.htm"
ALT="Oracle PL/SQL Built-ins Pocket Reference">
</MAP>
</BODY
>
<!-- Mirrored from liso.cs.pusan.ac.kr by HTTrack Website Copier/3.x [XR&CO'2001] -->
</HTML
>
