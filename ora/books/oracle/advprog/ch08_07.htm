<HTML
><HEAD
><TITLE
>[Chapter 8] 8.7 Implementing PLVtab.display</TITLE
><META
NAME="DC.Creator"
CONTENT="Steven Feuerstein"><META
NAME="DC.Date"
CONTENT="2000-04-29T18:26:53Z"><META
NAME="DC.Format"
CONTENT="text/html"
SCHEME="MIME"><META
NAME="DC.Identifier"
CONTENT="O'Reilly and Associates-1-56592-238-7E"><META
NAME="DC.Language"
CONTENT="en-US"><META
NAME="DC.Publisher"
CONTENT="O'Reilly &amp; Associates, Inc."><META
NAME="DC.Source"
CONTENT="1-56592-238-7E"
SCHEME="ISBN"><META
NAME="DC.Subject.Keyword"
CONTENT="PL/SQL SQL Oracle Packages"><META
NAME="DC.Title"
CONTENT="Advanced Oracle PL/SQL Programming with Packages"><META
NAME="DC.Type"
CONTENT="Text.Monograph"><META
NAME="generator"
CONTENT="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><LINK
REL="stylesheet"
TYPE="text/css"
HREF="../style/style1.css"><LINK
REV="made"
HREF="mailto:online-books@oreilly.com"
TITLE="Online Books Comments"><LINK
REL="up"
HREF="ch08_01.htm"
TITLE="8. PLVtab: Easy Access to PL/SQL Tables"><LINK
REL="prev"
HREF="ch08_06.htm#ch08-SECT-6.1"
TITLE="8.6 Emptying Tables with PLVtab"><LINK
REL="next"
HREF="ch09_01.htm"
TITLE="9. PLVmsg: Single-Sourcing PL/SQL Message Text"></HEAD>
<BODY><DIV CLASS="htmlnav"
><H1
><IMG
SRC="gifs/smbanner.gif"
ALT="Advanced Oracle PL/SQL Programming with Packages"
USEMAP="#srchmap"
BORDER="0"></H1
><MAP
NAME="srchmap"
><AREA
SHAPE="RECT"
COORDS="0,0,466,65"
HREF="index.htm"
ALT="Advanced Oracle PL/SQL Programming with Packages"><AREA
SHAPE="RECT"
COORDS="467,0,514,18"
HREF="jobjects/fsearch.htm"
ALT="Search this book"></MAP
><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch08_06.htm#ch08-SECT-6.1"
TITLE="8.6 Emptying Tables with PLVtab"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 8.6 Emptying Tables with PLVtab"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><SPAN
CLASS="NAVTITLE"
><A
CLASS="chapter"
REL="up"
HREF="ch08_01.htm"
TITLE="8. PLVtab: Easy Access to PL/SQL Tables"
>Chapter 8<BR>PLVtab: Easy Access to PL/SQL Tables</A
></SPAN
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="chapter"
HREF="ch09_01.htm"
TITLE="9. PLVmsg: Single-Sourcing PL/SQL Message Text"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 9. PLVmsg: Single-Sourcing PL/SQL Message Text"
BORDER="0"></A
></TD
></TR
></TABLE
>&nbsp;<HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"></DIV
><DIV
CLASS="sect1"
><H2
CLASS="sect1"
><A
CLASS="title"
NAME="ch08-16002"
>8.7 Implementing PLVtab.display</A
></H2
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="ch08-idx-997789-0"
></A
>I faced several challenges when building the <KBD
CLASS="command"
>display</KBD
> procedures:</P
><UL
CLASS="itemizedlist"
><LI
CLASS="listitem"
><P
CLASS="para"
>I had to create a separate procedure for each of the different table types, but I did not want to actually have separate display engines for each table type; the code would be very cumbersome and lengthy. Yet consolidating this code would also be difficult since each display procedure drew its information from a different <SPAN
CLASS="acronym"
>PL/SQL</SPAN
> table.</P
></LI
><LI
CLASS="listitem"
><P
CLASS="para"
>With the implementation of <SPAN
CLASS="acronym"
>PL/SQL</SPAN
> tables prior to Release 2.3 of <SPAN
CLASS="acronym"
>PL/SQL</SPAN
>, it is impossible to obtain information about the state of a <SPAN
CLASS="acronym"
>PL/SQL</SPAN
> table from the runtime engine. Instead, you must keep track of the rows that have been used or be ready to handle the NO_DATA_FOUND exception.</P
></LI
></UL
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="ch08-idx-997790-0"
></A
>I took care of the code redundancy problem by creating a single internal display procedure (<KBD
CLASS="command"
>idisplay</KBD
>) that is called by each of the public display procedures. Here is an example of the full body of the <KBD
CLASS="command"
>display</KBD
> procedure for date tables:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>   PROCEDURE display 
      (tab_in IN date_table, 
       end_in IN INTEGER,
       hdr_in IN VARCHAR2 := NULL,
       start_in IN INTEGER := 1,
       failure_threshold_in IN INTEGER := 0,
       increment_in IN INTEGER := +1)
   IS
   BEGIN
      idate := tab_in;
      idisplay
        (c_date, end_in, hdr_in, start_in, 
         failure_threshold_in, increment_in);
      idate := empty_date;
   END;</PRE
></BLOCKQUOTE
><P
CLASS="para"
>What is going on here? First, I copy the incoming table into a private <SPAN
CLASS="acronym"
>PL/SQL</SPAN
> table (<KBD
CLASS="command"
>idate</KBD
>). Then I display the contents of the <KBD
CLASS="command"
>idate</KBD
> table and not the user's table. Finally, I empty the internal <SPAN
CLASS="acronym"
>PL/SQL</SPAN
> table to minimize memory utilization. Notice that the <KBD
CLASS="command"
>idate</KBD
> table does not appear in the parameter list for <KBD
CLASS="command"
>idisplay</KBD
>. Instead, I pass in a constant, <KBD
CLASS="command"
>c_date</KBD
>, to indicate that <KBD
CLASS="command"
>idisplay</KBD
> should get the row values from the <KBD
CLASS="command"
>idate</KBD
> table.</P
><P
CLASS="para"
>I have, then, achieved my first objective: Use a single procedure to implement all of the different overloaded versions (this follows the diamond effect described in <A
CLASS="xref"
HREF="ch04_01.htm"
>Chapter 4, <CITE
CLASS="chapter"
>Getting Started with PL/Vision</CITE
></A
>). Of course, all I have really done is move the complexity down into the <KBD
CLASS="command"
>idisplay</KBD
> procedure. At least, however, all the complexity is concentrated into that single module.</P
><P
CLASS="para"
>But when you look inside the <KBD
CLASS="command"
>idisplay</KBD
> procedure you will find that there is actually very little complexity there either. Instead, I further buried the "how" of displaying all these different types of <SPAN
CLASS="acronym"
>PL/SQL</SPAN
> tables in another private module, <KBD
CLASS="command"
>display_row</KBD
>. Here is the main loop of the <KBD
CLASS="command"
>idisplay</KBD
> procedure:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>   WHILE in_range (current_row) AND within_threshold
   LOOP
      display_row
      (type_in, failure_threshold_in, increment_in, 
      count_misses, current_row, within_threshold);
   END LOOP;</PRE
></BLOCKQUOTE
><P
CLASS="para"
>The <KBD
CLASS="command"
>display_row</KBD
> procedure<A
CLASS="indexterm"
NAME="ch08-idx-997791-0"
></A
> takes as its first argument the type of table (<KBD
CLASS="command"
>c_date</KBD
>, <KBD
CLASS="command"
>c_number</KBD
>, etc.). It then executes an extended IF statement to determine from which table the row value should be extracted. The initial portion of this IF statement is shown below. The <KBD
CLASS="command"
>rowval</KBD
> variable is passed to <KBD
CLASS="command"
>p.l</KBD
> by the <KBD
CLASS="command"
>display_row</KBD
> procedure.</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>  IF type_in = c_boolean
  THEN
     rowval := 
        PLV.boolstg (iboolean (curr_row_inout), real_null_in =&gt; TRUE);

  ELSIF type_in = c_date
  THEN
     rowval := TO_CHAR (idate (curr_row_inout), PLV.datemask);

  ELSIF type_in = c_integer
  THEN
     rowval := TO_CHAR (iinteger (curr_row_inout));</PRE
></BLOCKQUOTE
><P
CLASS="para"
>Take some time to review the implementation of <KBD
CLASS="command"
>PLVtab.idisplay</KBD
>. On the one hand, you might think that the author is a somewhat off-balance, obsessive kind of guy. You might be right. On the other hand, you might also learn some interesting techniques for code consolidation inside packages when providing highly overloaded programs to users.<A
CLASS="indexterm"
NAME="ch08-idx-997792-0"
></A
><A
CLASS="indexterm"
NAME="ch08-idx-997792-1"
></A
><A
CLASS="indexterm"
NAME="ch08-idx-997792-2"
></A
></P
></DIV
><DIV
CLASS="htmlnav"
><P
></P
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch08_06.htm#ch08-SECT-6.1"
TITLE="8.6 Emptying Tables with PLVtab"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 8.6 Emptying Tables with PLVtab"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="book"
HREF="index.htm"
TITLE="Advanced Oracle PL/SQL Programming with Packages"
><IMG
SRC="../gifs/txthome.gif"
ALT="Advanced Oracle PL/SQL Programming with Packages"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="chapter"
HREF="ch09_01.htm"
TITLE="9. PLVmsg: Single-Sourcing PL/SQL Message Text"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 9. PLVmsg: Single-Sourcing PL/SQL Message Text"
BORDER="0"></A
></TD
></TR
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
>8.6 Emptying Tables with PLVtab</TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="index"
HREF="index/idx_0.htm"
TITLE="Book Index"
><IMG
SRC="../gifs/index.gif"
ALT="Book Index"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
>9. PLVmsg: Single-Sourcing PL/SQL Message Text</TD
></TR
></TABLE
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"></DIV
><IMG
SRC="../gifs/smnavbar.gif"
USEMAP="#map"
BORDER="0"
ALT="The Oracle Library Navigation">

<P><font size="-1">
<a href="../copyrght.htm#copy">Copyright (c) 2000</a> O'Reilly & Associates. All rights reserved.
</font></P>

<MAP NAME="map">

<AREA SHAPE="RECT"
COORDS="0,0,35,30"
HREF="../index.htm"
ALT="Library Home">

<AREA SHAPE="RECT"
COORDS="40,0,95,30"
HREF="../prog2/index.htm"
ALT="Oracle PL/SQL Programming, 2nd. Ed.">

<AREA SHAPE="RECT"
COORDS="100,0,200,30"
HREF="../guide8i/index.htm"
ALT="Guide to Oracle 8i Features">

<AREA SHAPE="RECT"
COORDS="205,0,245,30"
HREF="../bipack/index.htm"
ALT="Oracle Built-in Packages">

<AREA SHAPE="RECT"
COORDS="250,0,320,30"
HREF="index.htm"
ALT="Advanced PL/SQL Programming with Packages">

<AREA SHAPE="RECT"
COORDS="325,0,420,30"
HREF="../webapp/index.htm"
ALT="Oracle Web Applications">

<AREA SHAPE="RECT"
COORDS="425,0,490,30"
HREF="../langpkt/index.htm"
ALT="Oracle PL/SQL Language Pocket Reference">

<AREA SHAPE="RECT"
COORDS="495,0,570,30"
HREF="../bipkt/index.htm"
ALT="Oracle PL/SQL Built-ins Pocket Reference">
</MAP>
</BODY
>
<!-- Mirrored from liso.cs.pusan.ac.kr by HTTrack Website Copier/3.x [XR&CO'2001] -->
</HTML
>
