<HTML
><HEAD
><TITLE
>[Chapter 3] 3.10 Choosing the Best Performer</TITLE
><META
NAME="DC.Creator"
CONTENT="Steven Feuerstein"><META
NAME="DC.Date"
CONTENT="2000-04-29T18:23:09Z"><META
NAME="DC.Format"
CONTENT="text/html"
SCHEME="MIME"><META
NAME="DC.Identifier"
CONTENT="O'Reilly and Associates-1-56592-238-7E"><META
NAME="DC.Language"
CONTENT="en-US"><META
NAME="DC.Publisher"
CONTENT="O'Reilly &amp; Associates, Inc."><META
NAME="DC.Source"
CONTENT="1-56592-238-7E"
SCHEME="ISBN"><META
NAME="DC.Subject.Keyword"
CONTENT="PL/SQL SQL Oracle Packages"><META
NAME="DC.Title"
CONTENT="Advanced Oracle PL/SQL Programming with Packages"><META
NAME="DC.Type"
CONTENT="Text.Monograph"><META
NAME="generator"
CONTENT="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><LINK
REL="stylesheet"
TYPE="text/css"
HREF="../style/style1.css"><LINK
REV="made"
HREF="mailto:online-books@oreilly.com"
TITLE="Online Books Comments"><LINK
REL="up"
HREF="ch03_01.htm"
TITLE="3. The PL/SQL Development Spiral"><LINK
REL="prev"
HREF="ch03_09.htm"
TITLE="3.9 Considering Implementation Options"><LINK
REL="next"
HREF="ch03_11.htm"
TITLE="3.11 Don't Forget Backward Compatibility"></HEAD>
<BODY><DIV CLASS="htmlnav"
><H1
><IMG
SRC="gifs/smbanner.gif"
ALT="Advanced Oracle PL/SQL Programming with Packages"
USEMAP="#srchmap"
BORDER="0"></H1
><MAP
NAME="srchmap"
><AREA
SHAPE="RECT"
COORDS="0,0,466,65"
HREF="index.htm"
ALT="Advanced Oracle PL/SQL Programming with Packages"><AREA
SHAPE="RECT"
COORDS="467,0,514,18"
HREF="jobjects/fsearch.htm"
ALT="Search this book"></MAP
><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch03_09.htm"
TITLE="3.9 Considering Implementation Options"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 3.9 Considering Implementation Options"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><SPAN
CLASS="NAVTITLE"
><A
CLASS="chapter"
REL="up"
HREF="ch03_01.htm"
TITLE="3. The PL/SQL Development Spiral"
>Chapter 3<BR>The PL/SQL Development Spiral</A
></SPAN
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch03_11.htm"
TITLE="3.11 Don't Forget Backward Compatibility"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 3.11 Don't Forget Backward Compatibility"
BORDER="0"></A
></TD
></TR
></TABLE
>&nbsp;<HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"></DIV
><DIV
CLASS="sect1"
><H2
CLASS="sect1"
><A
CLASS="title"
NAME="ch03-27113"
>3.10 Choosing the Best Performer</A
></H2
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="ch03-idx-999804-0"
></A
><A
CLASS="indexterm"
NAME="ch03-idx-999804-1"
></A
>If there is a difference in execution time between the performance of my two string-repeaters, it will not be a big one. I will need to execute the functions many times to compare the cumulative difference. The best way to calculate the elapsed time of <SPAN
CLASS="acronym"
>PL/SQL</SPAN
> code execution is with the GET_TIME function of the DBMS_UTILITY builtin package. I have encapsulated GET_TIME inside the PLVtmr package (PL/Vision TiMeR) to make it easier to use. <A
CLASS="xref"
HREF="ch03_10.htm"
>Example 3.9</A
> shows the kind of script I used.[<A
CLASS="footnote"
HREF="#ch03-pgfId-999827"
>4</A
>]</P
><BLOCKQUOTE
CLASS="footnote"
><DIV
CLASS="footnote"
><P
CLASS="para"
><A
CLASS="footnote"
NAME="ch03-pgfId-999827"
>[4]</A
> By the way, this code was for the most part generated for me with the PLVgen package to compare the performance of <KBD
CLASS="command"
>repeated</KBD
>, <KBD
CLASS="command"
>rep_rpad</KBD
>, and also the recursion-based implementation of <KBD
CLASS="command"
>repeated</KBD
> (see sidebar).</P
></DIV
></BLOCKQUOTE
><P
CLASS="para"
>This SQL*Plus script (stored in the file <I
CLASS="function"
>timerep.sql</I
> on the disk) takes three arguments. The first, <I
CLASS="function"
>&amp;1</I
>, accepts the number of times to execute each function. The second, <I
CLASS="function"
>&amp;2</I
>, accepts a string that is to be duplicated. The third, <I
CLASS="function"
>&amp;3</I
>, accepts the number of repetitions of the string. I ran the script several times as shown below:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>SQL&gt; @timerep 100 abc 1
duprpad Elapsed: .77 seconds. Factored: .0077 seconds.
duploop Elapsed: .66 seconds. Factored: .0066 seconds.
recrep Elapsed: .71 seconds. Factored: .0071 seconds.

SQL&gt; @timerep 100 abc 10
duprpad Elapsed: .71 seconds. Factored: .0071 seconds.
duploop Elapsed: .99 seconds. Factored: .0099 seconds.
recrep Elapsed: 1.54 seconds. Factored: .0154 seconds.</PRE
></BLOCKQUOTE
><P
CLASS="para"
>I ran each of these tests several times to allow the numbers to stabilize. The results are very interesting and certainly reinforce the need for a careful test plan. When repeating the string just once, the recursion-based implementation is superior. Upon reflection, this should not be a surprise. It handles a single repetition as a special case: an unmediated concatenation of two strings. The loop-based implementation comes in second, but all of the timings are very close. When we move to multiple repetitions of the string, however, the <I
CLASS="function"
>recrep</I
> function becomes extremely slow; again, I would expect that behavior because of the extra work performed by the <SPAN
CLASS="acronym"
>PL/SQL</SPAN
> runtime engine to manage a recursive program. The big news from this round, however, is that the RPAD implementation of <KBD
CLASS="command"
>repeated</KBD
> establishes itself clearly as the fastest technique. </P
><DIV
CLASS="example"
><H4
CLASS="example"
><A
CLASS="title"
NAME="ch03-32178"
>Example 3.9: A Performance Comparison Script </A
></H4
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>DECLARE
   a VARCHAR2(100) := '&amp;2';
   aa VARCHAR2(10000);
BEGIN
   PLVtmr.set_factor (&amp;1);
   PLVtmr.capture;
   FOR rep IN 1 .. &amp;1
   LOOP
      aa := rep_rpad (a, 'UL', &amp;3);
   END LOOP;
   PLVtmr.show_elapsed ('duprpad');
   
   PLVtmr.set_factor (&amp;1);
   PLVtmr.capture;
   FOR rep IN 1 .. &amp;1
   LOOP
      aa := repeated (a, 'UL', &amp;3);
   END LOOP;
   PLVtmr.show_elapsed ('duploop');

   PLVtmr.set_factor (&amp;1);
   PLVtmr.capture;
   FOR rep IN 1 .. &amp;1
   LOOP
      aa := recrep (a, 'UL', &amp;3);
   END LOOP;
   PLVtmr.show_elapsed ('recrep');      
END;
/  </PRE
></BLOCKQUOTE
></DIV
><DIV
CLASS="sidebar"
><H4
CLASS="sidebar"
><A
CLASS="title"
NAME="AUTOID-3703"
>Using Recursion to Repeat the String</A
></H4
><P
CLASS="para"
>Just when you think you've covered the bases, someone comes along and shows you a new way. I often use the <I
CLASS="function"
>twice</I
> function in my classes to demonstrate the development spiral. While training a group of 35 students at the Oracle Netherlands training center in De Meern, I reached the point where it was time to expand the scope of <I
CLASS="function"
>twice</I
> to allow any number of repetitions of the string. So I asked my class for some ideas. Immediately, a quiet voice piped up from the first row: "Use <A
CLASS="indexterm"
NAME="ch03-idx-999806-0"
></A
>recursion." Recursion? It had never crossed my mind. I must admit that recursion is not an approach to which my brain readily turns. But it certainly seemed like a logical approach to take with the <I
CLASS="function"
>repeated</I
> function.</P
><P
CLASS="para"
>Never one to scorn a student's idea, we quickly cobbled together the version of <I
CLASS="function"
>repeated</I
> you see in <A
CLASS="xref"
HREF="ch03_10.htm"
>Example 3.10</A
>. It is called <I
CLASS="function"
>recrep</I
> for RECursive REPeater.</P
></DIV
><P
CLASS="para"
>Of course, I also need to compare the performance for different kinds of strings. I ran the same <KBD
CLASS="command"
>timer</KBD
> script as follows to see how each function handled NULL values:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>SQL&gt; @timerep 200 null 10
duprpad Elapsed: 1.59 seconds. Factored: .00795 seconds.
duploop Elapsed: 2.03 seconds. Factored: .01015 seconds.
recrep Elapsed: 2.91 seconds. Factored: .01455 seconds.</PRE
></BLOCKQUOTE
><P
CLASS="para"
>In this scenario, the RPAD implementation was considerably faster than the loop and recursion techniques (though, once again, I found that if the number of repetitions was set to 1, the <KBD
CLASS="command"
>recrep</KBD
> function was faster). Finally, I greatly increased the number of string repetitions and then all became clear:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>SQL&gt; @timerep 100 abc 100
duprpad Elapsed: .77 seconds. Factored: .0077 seconds.
duploop Elapsed: 4.28 seconds. Factored: .0428 seconds.
recrep Elapsed: 5.22 seconds. Factored: .0522 seconds.</PRE
></BLOCKQUOTE
><P
CLASS="para"
>The conclusion I draw from my tests is that the RPAD technique offers a much more stable solution than that based on the FOR loop. Regardless of the number of repetitions, RPAD takes about the same amount of time. With the FOR loop and recursion approaches, as the repetitions increase, the performance degrades. That is not the sign of a healthy algorithm.</P
><P
CLASS="para"
>Given the results, it would make sense to implement the <KBD
CLASS="command"
>repeated</KBD
> function using the RPAD technique. You could possibly optimize further by using the FOR loop approach for small numbers of repetitions, and then switch to RPAD for larger repetitions. The gain with the FOR loop for minimal repetitions is, however, minimal&nbsp;-- it's probably not worth the trouble.</P
><P
CLASS="para"
>I was glad to see that the RPAD approach is faster. You should always use a builtin if it exists, rather than build your own. The FOR loop technique arose quite naturally from the way I expanded the scope of the <I
CLASS="function"
>twice</I
> function. It turned out, however, that it was not the path to the optimal solution. As for recursion, well, it is always an interesting phenomenon to watch and puzzle out, but it rarely offers the best implementation (except when it is the <EM
CLASS="emphasis"
>only</EM
> implementation feasible).</P
><DIV
CLASS="example"
><H4
CLASS="example"
><A
CLASS="title"
NAME="ch03-13004"
>Example 3.10: The Code for the Recursive Implementation of repeated</A
></H4
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>CREATE OR REPLACE FUNCTION recrep 
   (string_in IN VARCHAR2, 
    action_in IN VARCHAR2 := NULL,
    num_in IN INTEGER := 1)
   RETURN VARCHAR2
IS
   v_action VARCHAR2(10) := UPPER (action_in);  
   initval VARCHAR2(32767);
   nextval VARCHAR2(32767); 
   v_retval VARCHAR2(32767);
   
BEGIN
   assert
      (v_action IN ('UL', 'LU', 'N'),
       'Please enter UL LU or N');
   assert
      (num_in &gt;= 0, 'Duplication count must be at least 0.');

   IF v_action = 'UL'
   THEN
      initval := UPPER (string_in);   
      nextval := LOWER (string_in);
   ELSIF v_action = 'LU'
   THEN
      initval := LOWER (string_in);      
      nextval := UPPER (string_in);
   ELSE
      initval := string_in;      
      nextval := string_in;
   END IF; 

   IF num_in = 1
   THEN
      RETURN initval || nextval;
   ELSE
      /* No more case conversions performed... */
      RETURN (initval || repeated (nextval, 'N' , num_in-1));
   END IF;
END recrep;
/<A
CLASS="indexterm"
NAME="ch03-idx-999805-0"
></A
></PRE
></BLOCKQUOTE
></DIV
></DIV
><DIV
CLASS="htmlnav"
><P
></P
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch03_09.htm"
TITLE="3.9 Considering Implementation Options"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 3.9 Considering Implementation Options"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="book"
HREF="index.htm"
TITLE="Advanced Oracle PL/SQL Programming with Packages"
><IMG
SRC="../gifs/txthome.gif"
ALT="Advanced Oracle PL/SQL Programming with Packages"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch03_11.htm"
TITLE="3.11 Don't Forget Backward Compatibility"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 3.11 Don't Forget Backward Compatibility"
BORDER="0"></A
></TD
></TR
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
>3.9 Considering Implementation Options</TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="index"
HREF="index/idx_0.htm"
TITLE="Book Index"
><IMG
SRC="../gifs/index.gif"
ALT="Book Index"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
>3.11 Don't Forget Backward Compatibility</TD
></TR
></TABLE
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"></DIV
><IMG
SRC="../gifs/smnavbar.gif"
USEMAP="#map"
BORDER="0"
ALT="The Oracle Library Navigation">

<P><font size="-1">
<a href="../copyrght.htm#copy">Copyright (c) 2000</a> O'Reilly & Associates. All rights reserved.
</font></P>

<MAP NAME="map">

<AREA SHAPE="RECT"
COORDS="0,0,35,30"
HREF="../index.htm"
ALT="Library Home">

<AREA SHAPE="RECT"
COORDS="40,0,95,30"
HREF="../prog2/index.htm"
ALT="Oracle PL/SQL Programming, 2nd. Ed.">

<AREA SHAPE="RECT"
COORDS="100,0,200,30"
HREF="../guide8i/index.htm"
ALT="Guide to Oracle 8i Features">

<AREA SHAPE="RECT"
COORDS="205,0,245,30"
HREF="../bipack/index.htm"
ALT="Oracle Built-in Packages">

<AREA SHAPE="RECT"
COORDS="250,0,320,30"
HREF="index.htm"
ALT="Advanced PL/SQL Programming with Packages">

<AREA SHAPE="RECT"
COORDS="325,0,420,30"
HREF="../webapp/index.htm"
ALT="Oracle Web Applications">

<AREA SHAPE="RECT"
COORDS="425,0,490,30"
HREF="../langpkt/index.htm"
ALT="Oracle PL/SQL Language Pocket Reference">

<AREA SHAPE="RECT"
COORDS="495,0,570,30"
HREF="../bipkt/index.htm"
ALT="Oracle PL/SQL Built-ins Pocket Reference">
</MAP>
</BODY
>
<!-- Mirrored from liso.cs.pusan.ac.kr by HTTrack Website Copier/3.x [XR&CO'2001] -->
</HTML
>
