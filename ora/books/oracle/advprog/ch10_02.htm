<HTML
><HEAD
><TITLE
>[Chapter 10] 10.2 PLVtkn: Managing PL/SQL Tokens</TITLE
><META
NAME="DC.Creator"
CONTENT="Steven Feuerstein"><META
NAME="DC.Date"
CONTENT="2000-04-29T18:27:12Z"><META
NAME="DC.Format"
CONTENT="text/html"
SCHEME="MIME"><META
NAME="DC.Identifier"
CONTENT="O'Reilly and Associates-1-56592-238-7E"><META
NAME="DC.Language"
CONTENT="en-US"><META
NAME="DC.Publisher"
CONTENT="O'Reilly &amp; Associates, Inc."><META
NAME="DC.Source"
CONTENT="1-56592-238-7E"
SCHEME="ISBN"><META
NAME="DC.Subject.Keyword"
CONTENT="PL/SQL SQL Oracle Packages"><META
NAME="DC.Title"
CONTENT="Advanced Oracle PL/SQL Programming with Packages"><META
NAME="DC.Type"
CONTENT="Text.Monograph"><META
NAME="generator"
CONTENT="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><LINK
REL="stylesheet"
TYPE="text/css"
HREF="../style/style1.css"><LINK
REV="made"
HREF="mailto:online-books@oreilly.com"
TITLE="Online Books Comments"><LINK
REL="up"
HREF="ch10_01.htm"
TITLE="10. PLVprs, PLVtkn, and PLVprsps: Parsing Strings"><LINK
REL="prev"
HREF="ch10_01.htm"
TITLE="10.1 PLVprs: Useful String Parsing Extensions"><LINK
REL="next"
HREF="ch10_03.htm#ch10-SECT-3.2.2"
TITLE="10.3 PLVprsps: Parsing PL/SQL Strings"></HEAD>
<BODY><DIV CLASS="htmlnav"
><H1
><IMG
SRC="gifs/smbanner.gif"
ALT="Advanced Oracle PL/SQL Programming with Packages"
USEMAP="#srchmap"
BORDER="0"></H1
><MAP
NAME="srchmap"
><AREA
SHAPE="RECT"
COORDS="0,0,466,65"
HREF="index.htm"
ALT="Advanced Oracle PL/SQL Programming with Packages"><AREA
SHAPE="RECT"
COORDS="467,0,514,18"
HREF="jobjects/fsearch.htm"
ALT="Search this book"></MAP
><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch10_01.htm"
TITLE="10.1 PLVprs: Useful String Parsing Extensions"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 10.1 PLVprs: Useful String Parsing Extensions"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><SPAN
CLASS="NAVTITLE"
><A
CLASS="chapter"
REL="up"
HREF="ch10_01.htm"
TITLE="10. PLVprs, PLVtkn, and PLVprsps: Parsing Strings"
>Chapter 10<BR>PLVprs, PLVtkn, and PLVprsps: Parsing Strings</A
></SPAN
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch10_03.htm#ch10-SECT-3.2.2"
TITLE="10.3 PLVprsps: Parsing PL/SQL Strings"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 10.3 PLVprsps: Parsing PL/SQL Strings"
BORDER="0"></A
></TD
></TR
></TABLE
>&nbsp;<HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"></DIV
><DIV
CLASS="sect1"
><H2
CLASS="sect1"
><A
CLASS="title"
NAME="ch10-34331"
>10.2 PLVtkn: Managing PL/SQL Tokens</A
></H2
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="ch10-idx-998728-0"
></A
><A
CLASS="indexterm"
NAME="ch10-idx-998728-1"
></A
><A
CLASS="indexterm"
NAME="ch10-idx-998728-2"
></A
>The<A
CLASS="indexterm"
NAME="ch10-idx-998729-0"
></A
><A
CLASS="indexterm"
NAME="ch10-idx-998729-1"
></A
> <KBD
CLASS="command"
>PLVtkn</KBD
> (PL/Vision ToKeN) package determines whether an identifier is a <SPAN
CLASS="acronym"
>PL/SQL</SPAN
> keyword. It does this by using a token table containing these keywords.</P
><P
CLASS="para"
>Every <SPAN
CLASS="acronym"
>PL/SQL</SPAN
> program is filled with identifiers. Identifiers are named <SPAN
CLASS="acronym"
>PL/SQL</SPAN
> language elements and include variable names, program names, and reserved words. Reserved words play a very different role in our programs than do the application-specific identifiers. I recommend strongly in <CITE
CLASS="citetitle"
>Oracle PL/SQL Programming</CITE
> that you reflect these different roles in your program by using the UPPER-lower method: all reserved words are typed in UPPER case and all application-specific identifiers are typed in lower case. I even go so far, in PL/Vision, as to provide you with a package (PLVcase) which will automatically convert your programs to the UPPER-lower method.</P
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch10-SECT-2.1"
>10.2.1 Keeping Track of PL/SQL Keywords</A
></H3
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="ch10-idx-998730-0"
></A
><A
CLASS="indexterm"
NAME="ch10-idx-998730-1"
></A
>Well, if <KBD
CLASS="command"
>PLVcase</KBD
> is going to uppercase only keywords, it has to know which identifiers in a <SPAN
CLASS="acronym"
>PL/SQL</SPAN
> program are the reserved words. This information is maintained in the <KBD
CLASS="command"
>PLV_token</KBD
> table, which has the following structure:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
> Name                            Null?    Type
 ------------------------------- -------- ----
 TOKEN                           NOT NULL VARCHAR2(100)
 TOKEN_TYPE                               VARCHAR2(10)</PRE
></BLOCKQUOTE
><P
CLASS="para"
>where the <KBD
CLASS="command"
>token</KBD
> column is the identifier and <KBD
CLASS="command"
>token_type</KBD
> indicates the type.</P
><P
CLASS="para"
>The different token types in the <KBD
CLASS="command"
>PLV_token</KBD
> table are stored in the <KBD
CLASS="command"
>PLV_token_type</KBD
> table, which has this structure:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
> Name                            Null?    Type
 ------------------------------- -------- ----
 TOKEN_TYPE                               VARCHAR2(10)
 NAME                            NOT NULL VARCHAR2(100)</PRE
></BLOCKQUOTE
><P
CLASS="para"
>The contents of the <KBD
CLASS="command"
>PLV_token_type</KBD
> are explained in the following table:</P
><TABLE
CLASS="informaltable"
BORDER="1"
CELLPADDING="3"
><THEAD
CLASS="thead"
><TR
CLASS="row"
VALIGN="TOP"
><TH
CLASS="entry"
ALIGN="LEFT"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="ch10-idx-998731-0"
></A
>Token Type</P
></TH
><TH
CLASS="entry"
ALIGN="LEFT"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>Name</P
></TH
><TH
CLASS="entry"
ALIGN="LEFT"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>Description</P
></TH
></TR
></THEAD
><TBODY
CLASS="tbody"
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>B</P
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>BUILT-IN</P
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>Builtin functions and procedures of the <SPAN
CLASS="acronym"
>PL/SQL</SPAN
> language, including packaged builtins.</P
></TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>D </P
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>DATATYPE</P
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>Different datatypes of the <SPAN
CLASS="acronym"
>PL/SQL</SPAN
> language, such as INTEGER and VARCHAR2.</P
></TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>DD</P
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>DATA-DICTIONARY</P
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>Views and tables from the Oracle Server data dictionary, such as ALL_SOURCE and DUAL.</P
></TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>E </P
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>EXCEPTION</P
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>Predefined system exceptions such as ZERO_DIVIDE.</P
></TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>OF</P
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>ORACLE-FORMS</P
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>Reserved words from the Oracle Forms product set</P
></TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>S </P
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>SYMBOL</P
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>Symbols like + and =.</P
></TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>SQL </P
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>SQL</P
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>Elements of the <SPAN
CLASS="acronym"
>SQL</SPAN
> language. In many cases, <SPAN
CLASS="acronym"
>SQL</SPAN
> tokens are used in <SPAN
CLASS="acronym"
>PL/SQL</SPAN
> and also in Oracle Developer/2000. These are still listed as <SPAN
CLASS="acronym"
>SQL</SPAN
> tokens. </P
></TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>X </P
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>SYNTAX</P
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>Syntax elements of the <SPAN
CLASS="acronym"
>PL/SQL</SPAN
> language, such as AND or LIKE.</P
></TD
></TR
></TBODY
></TABLE
><P
CLASS="para"
>There is a row in <KBD
CLASS="command"
>PLV_token</KBD
> for each reserved word in <SPAN
CLASS="acronym"
>PL/SQL</SPAN
>. You can change the contents of this table if you want. You might, for example, want to add keywords for the Oracle Developer/2000 builtins or the Oracle Web Agent <SPAN
CLASS="acronym"
>PL/SQL</SPAN
> packages. You can even add your own application-specific identifiers to the table. As long as the token type you assign is not any of those listed above, PL/Vision will not misinterpret your entries.</P
><P
CLASS="para"
>There are currently 1,235 rows in the <KBD
CLASS="command"
>PLV_token</KBD
> table, broken down by token type as follows:</P
><TABLE
CLASS="informaltable"
BORDER="1"
CELLPADDING="3"
><THEAD
CLASS="thead"
><TR
CLASS="row"
VALIGN="TOP"
><TH
CLASS="entry"
ALIGN="LEFT"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>Token Type</P
></TH
><TH
CLASS="entry"
ALIGN="LEFT"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>Count</P
></TH
></TR
></THEAD
><TBODY
CLASS="tbody"
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>BUILT-IN</P
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>198</P
></TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>DATATYPE</P
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>22</P
></TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>DATA-DICTIONARY</P
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>168</P
></TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>EXCEPTION</P
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>15</P
></TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>ORACLE-FORMS</P
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>623</P
></TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>SYMBOL</P
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>32</P
></TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
><SPAN
CLASS="acronym"
>SQL</SPAN
></P
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>94</P
></TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>SYNTAX</P
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>83</P
></TD
></TR
></TBODY
></TABLE
><P
CLASS="para"
>From the <SPAN
CLASS="acronym"
>PL/SQL</SPAN
> side of things, the PLVtkn package provides an interface to the <KBD
CLASS="command"
>PLV_token</KBD
> table. This package is used by PLVcase to determine the case of an individual token according to the UPPER-lower method. </P
><P
CLASS="para"
>As you will soon see, PLVtkn is not a particularly large or complicated package. Its purpose in life is to consolidate all of the logic having to do with individual <SPAN
CLASS="acronym"
>PL/SQL</SPAN
> tokens, particularly regarding keywords. By hiding the implementation details (the name and structure of the <KBD
CLASS="command"
>PLV_token</KBD
> table, the particular values used to denote a symbol or syntax element or builtin function), PLVtkn makes it easier for developers to apply this information in their own programs.<A
CLASS="indexterm"
NAME="ch10-idx-998732-0"
></A
><A
CLASS="indexterm"
NAME="ch10-idx-998732-1"
></A
></P
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch10-SECT-2.2"
>10.2.2 Determining Token Type</A
></H3
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="ch10-idx-998733-0"
></A
>PLVtkn provides a set of functions you can use to determine a string's token type in <SPAN
CLASS="acronym"
>PL/SQL</SPAN
>. The headers for these functions are shown below:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>FUNCTION is_keyword<A
CLASS="indexterm"
NAME="ch10-idx-998739-0"
></A
> 
   (token_in IN VARCHAR2, type_in IN VARCHAR2 := c_any) RETURN BOOLEAN;

FUNCTION is_syntax<A
CLASS="indexterm"
NAME="ch10-idx-998734-0"
></A
> (token_in IN VARCHAR2) RETURN BOOLEAN;
FUNCTION is_builtin<A
CLASS="indexterm"
NAME="ch10-idx-998735-0"
></A
> (token_in IN VARCHAR2) RETURN BOOLEAN;
FUNCTION is_symbol<A
CLASS="indexterm"
NAME="ch10-idx-998736-0"
></A
> (token_in IN VARCHAR2) RETURN BOOLEAN;
FUNCTION is_datatype<A
CLASS="indexterm"
NAME="ch10-idx-998737-0"
></A
> (token_in IN VARCHAR2) RETURN BOOLEAN;
FUNCTION is_exception<A
CLASS="indexterm"
NAME="ch10-idx-998738-0"
></A
> (token_in IN VARCHAR2) RETURN BOOLEAN;</PRE
></BLOCKQUOTE
><P
CLASS="para"
>All of the functions except for <KBD
CLASS="command"
>is_keyword</KBD
> take a single string argument and return TRUE if the string is that type of token. The following examples illustrate the way the PLVtkn functions interpret various strings:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>SQL&gt; exec p.l(PLVtkn.is_builtin('to_char'));
TRUE
SQL&gt; exec p.l(PLVtkn.is_builtin('loop'));
FALSE
SQL&gt; exec p.l(PLVtkn.is_syntax('loop'));
TRUE
SQL&gt; exec p.l(PLVtkn.is_syntax('='));
FALSE
SQL&gt; exec p.l(PLVtkn.is_symbol('='));
TRUE</PRE
></BLOCKQUOTE
><DIV
CLASS="sect3"
><H4
CLASS="sect3"
><A
CLASS="title"
NAME="ch10-SECT-2.2.1"
>10.2.2.1 Generic keyword checking</A
></H4
><P
CLASS="para"
>The <KBD
CLASS="command"
>is_keyword</KBD
> function is a more general-purpose function. It returns TRUE if the token is a keyword of the type specified by the second argument. The default value for this second parameter is <KBD
CLASS="command"
>PLVprs.c_any</KBD
>, which means that <KBD
CLASS="command"
>is_keyword</KBD
> will return TRUE if the specified token is any kind of keyword. </P
><P
CLASS="para"
><KBD
CLASS="command"
>PLVcase</KBD
> uses the <KBD
CLASS="command"
>is_keyword</KBD
> to determine whether the token should be upper- or lowercase. When applying the UPPER-lower method, it doesn't matter if the token is a builtin function or a syntax element, such as the END statement. All such keywords must be uppercase. Here is the code from the <KBD
CLASS="command"
>PLVcase.token</KBD
> procedure which performs the actual conversion:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>IF PLVtkn.is_keyword (v_token)
THEN
  v_token := UPPER (v_token);
ELSE
  v_token := LOWER (v_token);
END IF;</PRE
></BLOCKQUOTE
><P
CLASS="para"
>To keep code volume in PLVtkn to an absolute minimum and eliminate redundancy, I implement all of the "specialized" <KBD
CLASS="command"
>is</KBD
> functions (<KBD
CLASS="command"
>is_builtin</KBD
>, <KBD
CLASS="command"
>is_syntax</KBD
>, etc.) with a call to <KBD
CLASS="command"
>is_keyword</KBD
>, as shown below:<A
CLASS="indexterm"
NAME="ch10-idx-998740-0"
></A
></P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>FUNCTION is_symbol (token_in IN VARCHAR2)
   RETURN BOOLEAN
IS
BEGIN
   RETURN (is_keyword (token_in, c_symbol));
END;<A
CLASS="indexterm"
NAME="ch10-idx-998741-0"
></A
></PRE
></BLOCKQUOTE
></DIV
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch10-SECT-2.3"
>10.2.3 Retrieving Information About a Token</A
></H3
><P
CLASS="para"
>You will use the <KBD
CLASS="command"
>get_keyword</KBD
> procedure<A
CLASS="indexterm"
NAME="ch10-idx-998742-0"
></A
> to retrieve from the <KBD
CLASS="command"
>PLV_token</KBD
> table all information stored about a particular token. The header of this procedure is:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>   PROCEDURE get_keyword (token_in IN VARCHAR2, kw OUT kw_rectype);</PRE
></BLOCKQUOTE
><P
CLASS="para"
>You provide the token or string and <KBD
CLASS="command"
>get_keyword</KBD
> returns a <SPAN
CLASS="acronym"
>PL/SQL</SPAN
> record, which is a translated version of the row in the table. The translation generally involves converting string constants to Boolean values. For example, one of the record's fields is named <KBD
CLASS="command"
>is_keyword</KBD
>. The expression assigned to this Boolean field is:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>   kw.is_keyword := 
      kw_rec.token_type IN 
         (c_syntax, c_builtin, c_symbol,
          c_sql, c_datatype, c_datadict, c_exception);</PRE
></BLOCKQUOTE
><P
CLASS="para"
>where <KBD
CLASS="command"
>kw_rec</KBD
> is the cursor-based record into which the <KBD
CLASS="command"
>PLV_token</KBD
> row is fetched.</P
><P
CLASS="para"
>The anonymous block below shows how to use <KBD
CLASS="command"
>get_keyword</KBD
>. It accepts a string from the user of this script (<KBD
CLASS="command"
>plvtkn.tst</KBD
>), retrieves the information about that string (as a token), and displays some of the data.</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>DECLARE
   my_kw PLVtkn.kw_rectype;
BEGIN
   PLVtkn.get_keyword ('&amp;1', my_kw);
   p.l (my_kw.token_type);
   p.l (my_kw.is_keyword);
END;
/</PRE
></BLOCKQUOTE
><P
CLASS="para"
>The lines below show this script being executed for the THEN keyword.</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>SQL&gt; @plvtkn.tst then
X
TRUE</PRE
></BLOCKQUOTE
><DIV
CLASS="sidebar"
><H4
CLASS="sidebar"
><A
CLASS="title"
NAME="AUTOID-12864"
>Special Notes on PLVtkn</A
></H4
><P
CLASS="para"
>PLVtkn recognizes keywords defined in the Oracle Forms tool, but does not recognize reserved words in Oracle Reports, Oracle Graphics, or Oracle Developer/2000 that are not listed specifically as reserved words in Oracle Forms.<A
CLASS="indexterm"
NAME="ch10-idx-998894-0"
></A
><A
CLASS="indexterm"
NAME="ch10-idx-998894-1"
></A
><A
CLASS="indexterm"
NAME="ch10-idx-998894-2"
></A
></P
></DIV
></DIV
></DIV
><DIV
CLASS="htmlnav"
><P
></P
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch10_01.htm"
TITLE="10.1 PLVprs: Useful String Parsing Extensions"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 10.1 PLVprs: Useful String Parsing Extensions"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="book"
HREF="index.htm"
TITLE="Advanced Oracle PL/SQL Programming with Packages"
><IMG
SRC="../gifs/txthome.gif"
ALT="Advanced Oracle PL/SQL Programming with Packages"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch10_03.htm#ch10-SECT-3.2.2"
TITLE="10.3 PLVprsps: Parsing PL/SQL Strings"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 10.3 PLVprsps: Parsing PL/SQL Strings"
BORDER="0"></A
></TD
></TR
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
>10.1 PLVprs: Useful String Parsing Extensions</TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="index"
HREF="index/idx_0.htm"
TITLE="Book Index"
><IMG
SRC="../gifs/index.gif"
ALT="Book Index"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
>10.3 PLVprsps: Parsing PL/SQL Strings</TD
></TR
></TABLE
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"></DIV
><IMG
SRC="../gifs/smnavbar.gif"
USEMAP="#map"
BORDER="0"
ALT="The Oracle Library Navigation">

<P><font size="-1">
<a href="../copyrght.htm#copy">Copyright (c) 2000</a> O'Reilly & Associates. All rights reserved.
</font></P>

<MAP NAME="map">

<AREA SHAPE="RECT"
COORDS="0,0,35,30"
HREF="../index.htm"
ALT="Library Home">

<AREA SHAPE="RECT"
COORDS="40,0,95,30"
HREF="../prog2/index.htm"
ALT="Oracle PL/SQL Programming, 2nd. Ed.">

<AREA SHAPE="RECT"
COORDS="100,0,200,30"
HREF="../guide8i/index.htm"
ALT="Guide to Oracle 8i Features">

<AREA SHAPE="RECT"
COORDS="205,0,245,30"
HREF="../bipack/index.htm"
ALT="Oracle Built-in Packages">

<AREA SHAPE="RECT"
COORDS="250,0,320,30"
HREF="index.htm"
ALT="Advanced PL/SQL Programming with Packages">

<AREA SHAPE="RECT"
COORDS="325,0,420,30"
HREF="../webapp/index.htm"
ALT="Oracle Web Applications">

<AREA SHAPE="RECT"
COORDS="425,0,490,30"
HREF="../langpkt/index.htm"
ALT="Oracle PL/SQL Language Pocket Reference">

<AREA SHAPE="RECT"
COORDS="495,0,570,30"
HREF="../bipkt/index.htm"
ALT="Oracle PL/SQL Built-ins Pocket Reference">
</MAP>
</BODY
>
<!-- Mirrored from liso.cs.pusan.ac.kr by HTTrack Website Copier/3.x [XR&CO'2001] -->
</HTML
>
