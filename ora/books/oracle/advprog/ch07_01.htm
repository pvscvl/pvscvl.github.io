<HTML
><HEAD
><TITLE
>[Chapter 7] p: A Powerful Substitute for DBMS_OUTPUT</TITLE
><META
NAME="DC.Creator"
CONTENT="Steven Feuerstein"><META
NAME="DC.Date"
CONTENT="2000-04-29T18:26:39Z"><META
NAME="DC.Format"
CONTENT="text/html"
SCHEME="MIME"><META
NAME="DC.Identifier"
CONTENT="O'Reilly and Associates-1-56592-238-7E"><META
NAME="DC.Language"
CONTENT="en-US"><META
NAME="DC.Publisher"
CONTENT="O'Reilly &amp; Associates, Inc."><META
NAME="DC.Source"
CONTENT="1-56592-238-7E"
SCHEME="ISBN"><META
NAME="DC.Subject.Keyword"
CONTENT="PL/SQL SQL Oracle Packages"><META
NAME="DC.Title"
CONTENT="Advanced Oracle PL/SQL Programming with Packages"><META
NAME="DC.Type"
CONTENT="Text.Monograph"><META
NAME="generator"
CONTENT="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><LINK
REL="stylesheet"
TYPE="text/css"
HREF="../style/style1.css"><LINK
REV="made"
HREF="mailto:online-books@oreilly.com"
TITLE="Online Books Comments"><LINK
REL="up"
HREF="part03.htm"
TITLE="III. Building Block Packages"><LINK
REL="prev"
HREF="ch06_06.htm"
TITLE="6.6 The Predefined Constants"><LINK
REL="next"
HREF="ch07_02.htm"
TITLE="7.2 The Line Separator"></HEAD>
<BODY><DIV CLASS="htmlnav"
><H1
><IMG
SRC="gifs/smbanner.gif"
ALT="Advanced Oracle PL/SQL Programming with Packages"
USEMAP="#srchmap"
BORDER="0"></H1
><MAP
NAME="srchmap"
><AREA
SHAPE="RECT"
COORDS="0,0,466,65"
HREF="index.htm"
ALT="Advanced Oracle PL/SQL Programming with Packages"><AREA
SHAPE="RECT"
COORDS="467,0,514,18"
HREF="jobjects/fsearch.htm"
ALT="Search this book"></MAP
><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch06_06.htm"
TITLE="6.6 The Predefined Constants"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 6.6 The Predefined Constants"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><SPAN
CLASS="NAVTITLE"
>Chapter 7</SPAN
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch07_02.htm"
TITLE="7.2 The Line Separator"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 7.2 The Line Separator"
BORDER="0"></A
></TD
></TR
></TABLE
>&nbsp;<HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"></DIV
><DIV
CLASS="chapter"
><H1
CLASS="chapter"
><A
CLASS="title"
NAME="plsql-adv-ch-7"
>7. p: A Powerful Substitute for DBMS_OUTPUT</A
></H1
><DIV
CLASS="htmltoc"
><P
><B
>Contents:</B
><BR><A
CLASS="sect1"
HREF="#ch07-10801"
TITLE="7.1 Using the l Procedure"
>Using the l Procedure</A
><BR><A
CLASS="sect1"
HREF="ch07_02.htm"
TITLE="7.2 The Line Separator"
>The Line Separator</A
><BR><A
CLASS="sect1"
HREF="ch07_03.htm"
TITLE="7.3 The Output Prefix "
>The Output Prefix </A
><BR><A
CLASS="sect1"
HREF="ch07_04.htm"
TITLE="7.4 Controlling Output from p"
>Controlling Output from p</A
></P
><P
></P
></DIV
><P
CLASS="para"
>The <KBD
CLASS="command"
>p</KBD
><A
CLASS="indexterm"
NAME="ch07-idx-997635-0"
></A
> (PL/Vision Put) package is one of the first and simplest packages I ever built. It is also one of my favorites. The concept is clear, the payback immediate and everlasting. It also demonstrates some of the key advantages of <SPAN
CLASS="acronym"
>PL/SQL</SPAN
> packages in general.</P
><P
CLASS="para"
>The <KBD
CLASS="command"
>p</KBD
> package offers a powerful, flexible substitute for the DBMS_OUTPUT.PUT_LINE builtin package (see sidebar for a quick review of DBMS_OUTPUT). This is the <KBD
CLASS="command"
>l</KBD
> procedure. Generally, you will use the <KBD
CLASS="command"
>l</KBD
> procedure of the <KBD
CLASS="command"
>p</KBD
> package in place of DBMS_OUTPUT.PUT_LINE to display output from within a <SPAN
CLASS="acronym"
>PL/SQL </SPAN
>program. The <KBD
CLASS="command"
>p</KBD
> package improves your development productivity by minimizing keystrokes (as I described in <A
CLASS="xref"
HREF="ch01_01.htm"
>Chapter 1, <CITE
CLASS="chapter"
>PL/SQL Packages</CITE
></A
>, I grew to detest those 20 characters and sought out names for the package and procedure that would involve the smallest amount of typing possible), but its advantages go beyond this superficial benefit<A
CLASS="indexterm"
NAME="ch07-idx-997636-0"
></A
><A
CLASS="indexterm"
NAME="ch07-idx-997636-1"
></A
>. </P
><P
CLASS="para"
>The builtin DBMS_OUTPUT.PUT_LINE procedure, particularly as it is supported within the SQL*Plus environment, has the following complications:</P
><UL
CLASS="itemizedlist"
><LI
CLASS="listitem"
><P
CLASS="para"
>If you pass it a string that is longer than 255 bytes, the <SPAN
CLASS="acronym"
>PL/SQL</SPAN
> runtime engine raises the VALUE_ERROR exception.</P
></LI
><LI
CLASS="listitem"
><P
CLASS="para"
>If you try to display a NULL value, PUT_LINE simply ignores your request. Not even a blank line is displayed.</P
></LI
><LI
CLASS="listitem"
><P
CLASS="para"
>All leading blanks are trimmed from the string when displayed.[<A
CLASS="footnote"
HREF="#ch07-pgfId-997722"
>1</A
>]</P
><BLOCKQUOTE
CLASS="footnote"
><DIV
CLASS="footnote"
><P
CLASS="para"
><A
CLASS="footnote"
NAME="ch07-pgfId-997722"
>[1]</A
> In SQL*Plus 3.3, you can issue the command <KBD
CLASS="command"
>set serveroutput on format wrapped</KBD
>, and leading blanks are preserved and long lines are wrapped to the length specified in SQL*Plus. However, you still can't display more than 255 characters. [undocumented feature reported by Laurence Pit]</P
></DIV
></BLOCKQUOTE
></LI
><LI
CLASS="listitem"
><P
CLASS="para"
>PUT_LINE's overloading is quite limited. It cannot display a Boolean value, nor can it handle combinations of data.</P
></LI
></UL
><P
CLASS="para"
>I created the <KBD
CLASS="command"
>p</KBD
> package to compensate for these deficiencies&nbsp;-- and then I put it to use. In fact, you will find only one package in PL/Vision in which DBMS_OUTPUT.PUT_LINE is called: the <KBD
CLASS="command"
>p</KBD
> package. I have been very careful to always use my own substitution program for this builtin, to make sure that the robust features of <KBD
CLASS="command"
>p.l</KBD
> are leveraged throughout the library.</P
><P
CLASS="para"
>The following sections of this chapter show you how to use <KBD
CLASS="command"
>p.l</KBD
> to display information. They also show you how to modify the behavior of <KBD
CLASS="command"
>p.l</KBD
> as follows:</P
><UL
CLASS="itemizedlist"
><LI
CLASS="listitem"
><P
CLASS="para"
>Set the line prefix. This prefix allows you to preserve leading spaces.</P
></LI
><LI
CLASS="listitem"
><P
CLASS="para"
>Set the line separator. This character gives you a way to preserve white space (blank lines) in your source.</P
></LI
><LI
CLASS="listitem"
><P
CLASS="para"
>Control <KBD
CLASS="command"
>p.l</KBD
> output. The show override argument in the <KBD
CLASS="command"
>p.l</KBD
> procedure gives you some added flexibility over when <KBD
CLASS="command"
>p.l</KBD
> will actually show you something.</P
></LI
></UL
><DIV
CLASS="sect1"
><H2
CLASS="sect1"
><A
CLASS="title"
NAME="ch07-10801"
>7.1 Using the l Procedure<A
CLASS="indexterm"
NAME="ch07-idx-997638-0"
></A
></A
></H2
><P
CLASS="para"
>The <KBD
CLASS="command"
>p.l</KBD
> procedure<A
CLASS="indexterm"
NAME="ch07-idx-997637-0"
></A
> is a pleasure to use. When you call <KBD
CLASS="command"
>p.l</KBD
> instead of the DBMS_OUTPUT.PUT_LINE procedure, you will never have to worry about raising the VALUE_ERROR exception. You can display values of up to 32,767 bytes! You can pass many different kinds of data to the <KBD
CLASS="command"
>l</KBD
> procedure and it will figure out what to do and how to best display the information. </P
><P
CLASS="para"
>What, you worry? No, you let the package do the worrying for you. You get to concentrate on building your application.</P
><P
CLASS="para"
>You use <KBD
CLASS="command"
>p.l</KBD
> just as you would its builtin cousin, except that the <KBD
CLASS="command"
>p</KBD
> package offers a much wider overloading for different types and combinations of types of data. You pass it one or more values for display purposes. You can also use the final argument of the <KBD
CLASS="command"
>p.l</KBD
> procedure to control when output should be displayed (see <A
CLASS="xref"
HREF="ch07_04.htm"
>Section 7.4, "Controlling Output from p<A
CLASS="indexterm"
NAME="ch07-idx-997653-0"
></A
><A
CLASS="indexterm"
NAME="ch07-idx-997653-1"
></A
><A
CLASS="indexterm"
NAME="ch07-idx-997653-2"
></A
>"</A
>). </P
><P
CLASS="para"
>Here are the headers for the version of <KBD
CLASS="command"
>p.l</KBD
> that display a number and a string-date combination, respectively.</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>PROCEDURE l (number_in IN NUMBER, show_in IN BOOLEAN := FALSE);

PROCEDURE l 
   (char_in IN VARCHAR2, date_in IN DATE,
    mask_in IN VARCHAR2 := PLV.datemask,
    show_in IN BOOLEAN := FALSE);</PRE
></BLOCKQUOTE
><P
CLASS="para"
>To view the salary of an employee, you simply execute:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>p.l (emp_rec.sal);</PRE
></BLOCKQUOTE
><P
CLASS="para"
>To view the employee name and hire date, you execute:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>p.l (emp_rec.ename, emp_rec.hiredate)</PRE
></BLOCKQUOTE
><P
CLASS="para"
>and you will see this data in this format:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>JONES: May 12, 1981 22:45:47</PRE
></BLOCKQUOTE
><P
CLASS="para"
>To get the same information using the default functionality of DBMS_OUTPUT, you would have to enter something as ugly and time-consuming as this:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>DBMS_OUTPUT.PUT_LINE (emp_rec.ename || ': ' || 
   TO_CHAR (emp_rec.hiredate, 'FMMonth DD, YYYY HH:MI:SS'))</PRE
></BLOCKQUOTE
><P
CLASS="para"
>Which would you rather type? That should give you a good sense of the potential productivity gains available through <KBD
CLASS="command"
>p</KBD
>![<A
CLASS="footnote"
HREF="#ch07-pgfId-997426"
>2</A
>]</P
><BLOCKQUOTE
CLASS="footnote"
><DIV
CLASS="footnote"
><P
CLASS="para"
><A
CLASS="footnote"
NAME="ch07-pgfId-997426"
>[2]</A
> Did you ever notice how old the data in the <KBD
CLASS="command"
>emp</KBD
> table is? Oracle Corporation should update that demonstration table to reflect corporate growth and increased salaries...but I guess they have to worry about backward compatibility of demonstration scripts!</P
></DIV
></BLOCKQUOTE
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch07-SECT-1.1"
>7.1.1 Valid Data Combinations for p.l</A
></H3
><P
CLASS="para"
><A
CLASS="xref"
HREF="ch07_01.htm"
>Table 7.1</A
> shows the different types<A
CLASS="indexterm"
NAME="ch07-idx-997709-0"
></A
> of data that can be passed to the <KBD
CLASS="command"
>p.l</KBD
> procedure. </P
><P
CLASS="para"
>See the <KBD
CLASS="command"
>p</KBD
> package specification (or the table in <A
CLASS="xref"
HREF="ch05_01.htm"
>Chapter 5, <CITE
CLASS="chapter"
>PL/Vision Package Specifications</CITE
></A
>) for the headers of all the corresponding versions of the <KBD
CLASS="command"
>l</KBD
> procedure. </P
><BR><TABLE
CLASS="table"
BORDER="1"
CELLPADDING="3"
><CAPTION
CLASS="table"
><A
CLASS="title"
NAME="ch07-41067"
>Table 7.1: Valid Data Combinations for p.l </A
></CAPTION
><THEAD
CLASS="thead"
><TR
CLASS="row"
VALIGN="TOP"
><TH
CLASS="entry"
ALIGN="LEFT"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>Data Combinations</P
></TH
><TH
CLASS="entry"
ALIGN="LEFT"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>Resulting Value</P
></TH
></TR
></THEAD
><TBODY
CLASS="tbody"
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>VARCHAR2</P
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>The string as supplied by the user.</P
></TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>DATE</P
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>The date converted to a string, using the specified date mask. The default date mask is provided by <KBD
CLASS="command"
>PLV.datemask</KBD
>&nbsp;-- a PL/Vision-wide setting.</P
></TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>NUMBER</P
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>The number converted to a string using the default format mask.</P
></TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>BOOLEAN</P
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>The string "TRUE" if the Boolean expression evaluates to TRUE, "FALSE" if FALSE, and the NULL substitution value if NULL.</P
></TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>VARCHAR2, DATE</P
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>The string concatenated to a colon, concatenated to the date (converted to a string as explained above).</P
></TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>VARCHAR2, NUMBER</P
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>The string concatenated to a colon, concatenated to the number (converted to a string as explained above).</P
></TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>VARCHAR2, BOOLEAN</P
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>The string concatenated to a colon, concatenated to the Boolean (converted to a string as explained above).</P
></TD
></TR
></TBODY
></TABLE
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch07-SECT-1.2"
>7.1.2 Displaying Dates</A
></H3
><P
CLASS="para"
>When you display a date<A
CLASS="indexterm"
NAME="ch07-idx-997640-0"
></A
> using <KBD
CLASS="command"
>p.l</KBD
>, it uses the string returned by the <KBD
CLASS="command"
>PLV.datemask</KBD
> function as the format mask<A
CLASS="indexterm"
NAME="ch07-idx-997641-0"
></A
>. The default value of the format mask is:</P
><DIV
CLASS="sidebar"
><H4
CLASS="sidebar"
><A
CLASS="title"
NAME="AUTOID-11293"
>The DBMS_OUTPUT Package</A
></H4
><P
CLASS="para"
>The DBMS_OUTPUT package<A
CLASS="indexterm"
NAME="ch07-idx-997642-0"
></A
> allows you to display information to your session's output device from within your <SPAN
CLASS="acronym"
>PL/SQL</SPAN
> program. As such, it serves as just about the only easily accessible means of debugging your <SPAN
CLASS="acronym"
>PL/SQL</SPAN
> Version 2 programs. DBMS_OUTPUT is also the package you will use to generate reports from <SPAN
CLASS="acronym"
>PL/SQL</SPAN
> scripts run in SQL*Plus.</P
><P
CLASS="para"
>Theoretically, you write information to the DBMS_OUTPUT buffer with calls to PUT_LINE and PUT and then extract that information for display with the GET_LINE program. In reality (in SQL*Plus, anyway), you simply call the PUT_LINE program from within your <SPAN
CLASS="acronym"
>PL/SQL</SPAN
> program and when your program finishes executing, all the text "put" to the buffer is displayed on your screen. The following SQL*Plus session gives you an idea of what you must type:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>SQL&gt; exec DBMS_OUTPUT.PUT_LINE ('this is great!');
this is great
</PRE
></BLOCKQUOTE
><P
CLASS="para"
>The size of the DBMS_OUTPUT buffer can be set to a size between 2,000 bytes (the default) and 1,000,000 bytes with the ENABLE procedure. If you do not ENABLE the package, then no information will be displayed or will be retrievable from the buffer. </P
><P
CLASS="para"
>When using DBMS_OUTPUT in SQL*Plus, you can use the SET command to enable output from DBMS_OUTPUT and also set the size of the buffer. To enable output, you must issue this command:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>SQL&gt; set serveroutput on
</PRE
></BLOCKQUOTE
><P
CLASS="para"
>To set the buffer size to a value other than 2,000, add the size clause as follows:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>SQL&gt; set serveroutput on size 1000000
</PRE
></BLOCKQUOTE
><P
CLASS="para"
>I recommend that you put the SET SERVEROUTPUT command<A
CLASS="indexterm"
NAME="ch07-idx-997643-0"
></A
> in your <KBD
CLASS="command"
>login.sql</KBD
> script so your session is automatically enabled for output. Remember, however, that every time you reconnect inside SQL*Plus, all of your package variables are reinitialized. So if you issue a CONNECT command<A
CLASS="indexterm"
NAME="ch07-idx-997644-0"
></A
> in SQL*Plus, you will need to reenable DBMS_OUTPUT. The script <KBD
CLASS="command"
>ssoo.sql</KBD
> (on the disk) does this for you with a minimum of fuss. To enable output and set the buffer to its maximize size (1 megabyte), simply type:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>SQL&gt; @ssoo
</PRE
></BLOCKQUOTE
><P
CLASS="para"
>See <CITE
CLASS="citetitle"
>Chapter 15</CITE
> of <CITE
CLASS="citetitle"
>Oracle PL/SQL Programming</CITE
>, for more details on DBMS_OUTPUT.</P
></DIV
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>'FMMonth DD, YYYY FMHH24:MI:SS'</PRE
></BLOCKQUOTE
><P
CLASS="para"
>If you would like to change the format used to display dates, you can either specify a new format when you call <KBD
CLASS="command"
>p.l</KBD
> or you can change the default mask maintained by the PLV package.</P
><P
CLASS="para"
>To specify a different format in the call to <KBD
CLASS="command"
>p.l</KBD
>, simply include the mask string after the date argument. Here, for example, is the header for the version of <KBD
CLASS="command"
>p.l </KBD
>that displays a date:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>PROCEDURE l 
   (date_in IN DATE,
    mask_in IN VARCHAR2 := PLV.datemask,
    show_in IN BOOLEAN := FALSE);</PRE
></BLOCKQUOTE
><P
CLASS="para"
>So to display the name of an employee and the month/year she was hired, I can use:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>p.l (emp_rec.ename, emp_rec.hiredate, 'Month YYYY');</PRE
></BLOCKQUOTE
><P
CLASS="para"
>Alternatively, I can set the default format for any date displayed in PLV with this call:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>PLV.set_datemask ('Month YYYY');</PRE
></BLOCKQUOTE
><P
CLASS="para"
>and then the call to <KBD
CLASS="command"
>p.l</KBD
> could be simplified to:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>p.l (emp_rec.ename, emp_rec.hiredate);<A
CLASS="indexterm"
NAME="ch07-idx-997645-0"
></A
><A
CLASS="indexterm"
NAME="ch07-idx-997645-1"
></A
></PRE
></BLOCKQUOTE
></DIV
></DIV
></DIV
><DIV
CLASS="htmlnav"
><P
></P
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch06_06.htm"
TITLE="6.6 The Predefined Constants"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 6.6 The Predefined Constants"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="book"
HREF="index.htm"
TITLE="Advanced Oracle PL/SQL Programming with Packages"
><IMG
SRC="../gifs/txthome.gif"
ALT="Advanced Oracle PL/SQL Programming with Packages"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch07_02.htm"
TITLE="7.2 The Line Separator"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 7.2 The Line Separator"
BORDER="0"></A
></TD
></TR
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
>6.6 The Predefined Constants</TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="index"
HREF="index/idx_0.htm"
TITLE="Book Index"
><IMG
SRC="../gifs/index.gif"
ALT="Book Index"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
>7.2 The Line Separator</TD
></TR
></TABLE
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"></DIV
><IMG
SRC="../gifs/smnavbar.gif"
USEMAP="#map"
BORDER="0"
ALT="The Oracle Library Navigation">

<P><font size="-1">
<a href="../copyrght.htm#copy">Copyright (c) 2000</a> O'Reilly & Associates. All rights reserved.
</font></P>

<MAP NAME="map">

<AREA SHAPE="RECT"
COORDS="0,0,35,30"
HREF="../index.htm"
ALT="Library Home">

<AREA SHAPE="RECT"
COORDS="40,0,95,30"
HREF="../prog2/index.htm"
ALT="Oracle PL/SQL Programming, 2nd. Ed.">

<AREA SHAPE="RECT"
COORDS="100,0,200,30"
HREF="../guide8i/index.htm"
ALT="Guide to Oracle 8i Features">

<AREA SHAPE="RECT"
COORDS="205,0,245,30"
HREF="../bipack/index.htm"
ALT="Oracle Built-in Packages">

<AREA SHAPE="RECT"
COORDS="250,0,320,30"
HREF="index.htm"
ALT="Advanced PL/SQL Programming with Packages">

<AREA SHAPE="RECT"
COORDS="325,0,420,30"
HREF="../webapp/index.htm"
ALT="Oracle Web Applications">

<AREA SHAPE="RECT"
COORDS="425,0,490,30"
HREF="../langpkt/index.htm"
ALT="Oracle PL/SQL Language Pocket Reference">

<AREA SHAPE="RECT"
COORDS="495,0,570,30"
HREF="../bipkt/index.htm"
ALT="Oracle PL/SQL Built-ins Pocket Reference">
</MAP>
</BODY
>
<!-- Mirrored from liso.cs.pusan.ac.kr by HTTrack Website Copier/3.x [XR&CO'2001] -->
</HTML
>
