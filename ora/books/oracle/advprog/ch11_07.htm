<HTML
><HEAD
><TITLE
>[Chapter 11] 11.7 A Programmatic Cursor FOR Loop</TITLE
><META
NAME="DC.Creator"
CONTENT="Steven Feuerstein"><META
NAME="DC.Date"
CONTENT="2000-04-29T18:27:31Z"><META
NAME="DC.Format"
CONTENT="text/html"
SCHEME="MIME"><META
NAME="DC.Identifier"
CONTENT="O'Reilly and Associates-1-56592-238-7E"><META
NAME="DC.Language"
CONTENT="en-US"><META
NAME="DC.Publisher"
CONTENT="O'Reilly &amp; Associates, Inc."><META
NAME="DC.Source"
CONTENT="1-56592-238-7E"
SCHEME="ISBN"><META
NAME="DC.Subject.Keyword"
CONTENT="PL/SQL SQL Oracle Packages"><META
NAME="DC.Title"
CONTENT="Advanced Oracle PL/SQL Programming with Packages"><META
NAME="DC.Type"
CONTENT="Text.Monograph"><META
NAME="generator"
CONTENT="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><LINK
REL="stylesheet"
TYPE="text/css"
HREF="../style/style1.css"><LINK
REV="made"
HREF="mailto:online-books@oreilly.com"
TITLE="Online Books Comments"><LINK
REL="up"
HREF="ch11_01.htm"
TITLE="11.  PLVobj: A Packaged Interface to ALL_OBJECTS"><LINK
REL="prev"
HREF="ch11_06.htm"
TITLE="11.6 Populating a PL/SQL Table with Object Names"><LINK
REL="next"
HREF="ch11_08.htm"
TITLE="11.8 Tracing PLVobj Activity"></HEAD>
<BODY><DIV CLASS="htmlnav"
><H1
><IMG
SRC="gifs/smbanner.gif"
ALT="Advanced Oracle PL/SQL Programming with Packages"
USEMAP="#srchmap"
BORDER="0"></H1
><MAP
NAME="srchmap"
><AREA
SHAPE="RECT"
COORDS="0,0,466,65"
HREF="index.htm"
ALT="Advanced Oracle PL/SQL Programming with Packages"><AREA
SHAPE="RECT"
COORDS="467,0,514,18"
HREF="jobjects/fsearch.htm"
ALT="Search this book"></MAP
><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch11_06.htm"
TITLE="11.6 Populating a PL/SQL Table with Object Names"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 11.6 Populating a PL/SQL Table with Object Names"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><SPAN
CLASS="NAVTITLE"
><A
CLASS="chapter"
REL="up"
HREF="ch11_01.htm"
TITLE="11.  PLVobj: A Packaged Interface to ALL_OBJECTS"
>Chapter 11<BR> PLVobj: A Packaged Interface to ALL_OBJECTS</A
></SPAN
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch11_08.htm"
TITLE="11.8 Tracing PLVobj Activity"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 11.8 Tracing PLVobj Activity"
BORDER="0"></A
></TD
></TR
></TABLE
>&nbsp;<HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"></DIV
><DIV
CLASS="sect1"
><H2
CLASS="sect1"
><A
CLASS="title"
NAME="ch11-26835"
>11.7 A Programmatic Cursor FOR Loop</A
></H2
><P
CLASS="para"
>The <KBD
CLASS="command"
>loopexec</KBD
> procedure provides the procedural equivalent of a cursor FOR loop. Its header is shown below:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>PROCEDURE loopexec
   (module_in IN VARCHAR2,
    exec_in IN VARCHAR2 := c_show_object,
    placeholder_in IN VARCHAR2 := c_leph,
    name_format_in IN VARCHAR2 := c_modspec);</PRE
></BLOCKQUOTE
><P
CLASS="para"
>The <KBD
CLASS="command"
>loopexec</KBD
><A
CLASS="indexterm"
NAME="ch11-idx-998827-0"
></A
><A
CLASS="indexterm"
NAME="ch11-idx-998827-1"
></A
><A
CLASS="indexterm"
NAME="ch11-idx-998827-2"
></A
> procedure executes the line of code found in the <KBD
CLASS="command"
>exec_in</KBD
> argument for all of the modules specified by the <KBD
CLASS="command"
>module_in</KBD
> argument. If the <KBD
CLASS="command"
>module_in</KBD
> string does not have any wildcard characters, then it will apply the <KBD
CLASS="command"
>exec_in</KBD
> command to the single program only.</P
><P
CLASS="para"
>The default value for the executable statement is <KBD
CLASS="command"
>c_show_object</KBD
><A
CLASS="indexterm"
NAME="ch11-idx-998828-0"
></A
>, a constant defined in the package specification as follows:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>c_show_object CONSTANT VARCHAR2(100) := 'p.l (:rowobj)';</PRE
></BLOCKQUOTE
><P
CLASS="para"
>where <KBD
CLASS="command"
>rowobj</KBD
> is the placeholder for the object identified by the current row fetched from the PLVobj cursor. The default action is, therefore, to display the name of the current object.</P
><P
CLASS="para"
>The <KBD
CLASS="command"
>placeholder_in</KBD
> argument tells <KBD
CLASS="command"
>loopexec</KBD
> which string will serve as a placeholder in the execution string (this placeholder is similar to the dynamic <SPAN
CLASS="acronym"
>SQL</SPAN
> bind variable placeholder). The default is defined in the PLVobj constant, <KBD
CLASS="command"
>c_leph</KBD
><A
CLASS="indexterm"
NAME="ch11-idx-998829-0"
></A
>, as follows:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>c_leph CONSTANT VARCHAR2(10) := 'rowobj';</PRE
></BLOCKQUOTE
><P
CLASS="para"
>You can, however, override this value with your own string (an example of this process is shown in the next section).[<A
CLASS="footnote"
HREF="#ch11-pgfId-998191"
>1</A
>] </P
><BLOCKQUOTE
CLASS="footnote"
><DIV
CLASS="footnote"
><P
CLASS="para"
><A
CLASS="footnote"
NAME="ch11-pgfId-998191"
>[1]</A
> For curious readers, the <KBD
CLASS="command"
>leph</KBD
> stands for "LoopExec PlaceHolder."</P
></DIV
></BLOCKQUOTE
><P
CLASS="para"
>The <KBD
CLASS="command"
>name_format_in</KBD
> argument specifies the form that the current object string should take when constructed by PLVobj. The options for the format are:</P
><TABLE
CLASS="informaltable"
BORDER="1"
CELLPADDING="3"
><THEAD
CLASS="thead"
><TR
CLASS="row"
VALIGN="TOP"
><TH
CLASS="entry"
ALIGN="LEFT"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>Format Constant</P
></TH
><TH
CLASS="entry"
ALIGN="LEFT"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>Format of Object String</P
></TH
></TR
></THEAD
><TBODY
CLASS="tbody"
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
><CODE
CLASS="literal"
>c_modspec</CODE
></P
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>TYPE:SCHEMA.NAME</P
></TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
><CODE
CLASS="literal"
>c_modname</CODE
></P
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>SCHEMA.NAME</P
></TD
></TR
></TBODY
></TABLE
><P
CLASS="para"
>The <KBD
CLASS="command"
>c_modspec</KBD
><A
CLASS="indexterm"
NAME="ch11-idx-998830-0"
></A
> format is useful when the current object is to be passed to another program that supports the PLVobj format for specifying objects (particularly in PL/Vision utilities). The <KBD
CLASS="command"
>c_modname</KBD
><A
CLASS="indexterm"
NAME="ch11-idx-998831-0"
></A
> option structures the name so that it is a valid program unit name in <SPAN
CLASS="acronym"
>PL/SQL</SPAN
>.</P
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch11-SECT-7.1"
>11.7.1 Some Simple Applications of loopexec</A
></H3
><P
CLASS="para"
>The default statement executed by <KBD
CLASS="command"
>PLVobj.loopexec</KBD
> requests that <KBD
CLASS="command"
>loopexec</KBD
> display the name of the current object. So if I want to display all of the objects located with the string <KBD
CLASS="command"
>s:PLVc%</KBD
>, I would simply enter:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>SQL&gt; exec PLVobj.loopexec ('s:PLVc%');
PACKAGE:PLV.PLVCASE
PACKAGE:PLV.PLVCAT
PACKAGE:PLV.PLVCHR
PACKAGE:PLV.PLVCMT</PRE
></BLOCKQUOTE
><P
CLASS="para"
>and would discover that I have four package specifications whose names start with PLVC. To obtain this information, I did not have to write a loop against the ALL_OBJECTS cursor. Neither did I have to call the various <KBD
CLASS="command"
>PLVobj</KBD
> cursor management programs like <KBD
CLASS="command"
>fetch_object</KBD
>. Instead, I simply told <KBD
CLASS="command"
>PLVobj</KBD
>: For every object identified, execute this code. It is, in other words, a programmatically defined cursor FOR loop! See what I mean about <SPAN
CLASS="acronym"
>PL/SQL</SPAN
> being fun?</P
><P
CLASS="para"
>Now suppose that I want to do something besides display the objects. Let's see how to use <KBD
CLASS="command"
>loopexec</KBD
> to generate a set of DESCRIBE commands for use in SQL*Plus to show the call interface to stored code. The format for this command in SQL*Plus is:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>SQL&gt; desc prog</PRE
></BLOCKQUOTE
><P
CLASS="para"
>where <KBD
CLASS="command"
>prog</KBD
> is the name of a <SPAN
CLASS="acronym"
>PL/SQL</SPAN
> program, either a function or a procedure (standalone or packaged). So if my <SPAN
CLASS="acronym"
>PL/SQL</SPAN
> program is going to generate these commands, I would have to execute something like this:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>p.l ('DESC ' || current_object);</PRE
></BLOCKQUOTE
><P
CLASS="para"
>where <KBD
CLASS="command"
>current_object</KBD
> is a variable containing the current object string. In this scenario, however, I am working with dynamic <SPAN
CLASS="acronym"
>PL/SQL</SPAN
>; <KBD
CLASS="command"
>loopexec</KBD
> does not know in advance which statement I want to execute. So I need to convert this command into a string that will be evaluated <EM
CLASS="emphasis"
>into</EM
> the proper <SPAN
CLASS="acronym"
>PL/SQL</SPAN
> command. In particular, I must double all single quotes and give <KBD
CLASS="command"
>loopexec</KBD
> a way to find my reference to the current object. I do this through the use of a placeholder string. </P
><P
CLASS="para"
>This approach is shown in the following script (stored in file <KBD
CLASS="command"
>gendesc.sql</KBD
><A
CLASS="indexterm"
NAME="ch11-idx-998832-0"
></A
>):</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>BEGIN
   PLVobj.loopexec
      ('&amp;1', 'p.l (''DESC '' || :XX)', 'XX', PLVobj.c_modname); 
END;
/</PRE
></BLOCKQUOTE
><P
CLASS="para"
>In this call to <KBD
CLASS="command"
>loopexec</KBD
>, I provide a value for every argument! The first value is actually a SQL*Plus substitution parameter containing the specification of the program unit(s) for which I want to generate a DESC command. The second argument is the dynamic <SPAN
CLASS="acronym"
>PL/SQL</SPAN
> version of the call to <KBD
CLASS="command"
>p.l</KBD
>, which outputs a DESC command. Notice the double quotes around DESC and the hard-coding of a concatenation of the <KBD
CLASS="command"
>XX</KBD
> placeholder. The third argument (<KBD
CLASS="command"
>XX</KBD
>) tells <KBD
CLASS="command"
>loopexec</KBD
> to replace any occurrence of <KBD
CLASS="command"
>:XX</KBD
> in the command with the current object. Finally, the fourth argument requests that the current object string be returned as a valid <SPAN
CLASS="acronym"
>PL/SQL</SPAN
> object name (the DESC command doesn't know about the <EM
CLASS="emphasis"
>type:schema.name</EM
> syntax of PL/Vision). </P
><P
CLASS="para"
>I execute <KBD
CLASS="command"
>gendesc</KBD
> below to create DESCRIBE commands for all procedures in the PLV schema.</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>SQL&gt;  @gendesc p:%
DESC PLV.CREATE_INDEX
DESC PLV.MODVALS
DESC PLV.MORE
DESC PLV.PLVHELP
DESC PLV.PLVSTOP
DESC PLV.SHOWEMPS
DESC PLV.SHOWERR
DESC PLV.SHOWUSER</PRE
></BLOCKQUOTE
><P
CLASS="para"
>I can then cut and paste these commands into a file (or use the SPOOL command) and execute them. </P
><P
CLASS="para"
>You might still be looking at the arguments I passed to <KBD
CLASS="command"
>PLVobj.loopexec</KBD
> and wondering what the heck that all means and, more importantly, how you could ever figure out how to use <KBD
CLASS="command"
>loopexec</KBD
> properly. So let's now turn our attention to the task of constructing an execution string for the <KBD
CLASS="command"
>loopexec</KBD
> procedure.</P
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch11-SECT-7.2"
>11.7.2 Constructing the Execution String</A
></H3
><P
CLASS="para"
>The <KBD
CLASS="command"
>loopexec</KBD
> procedure uses dynamic <SPAN
CLASS="acronym"
>PL/SQL</SPAN
> (via the PL/Vision <KBD
CLASS="command"
>PLVdyn</KBD
> package and, as a result, the builtin DBMS_SQL package) to execute the string you pass to it. For this to work properly, you must build a string which evaluates to a valid <SPAN
CLASS="acronym"
>PL/SQL</SPAN
> command. This task can become very complicated when you need to include single quote marks and especially when you want your executed code to operate on the current object (which is, after all, the main reason you would use <KBD
CLASS="command"
>loopexec</KBD
>). To work with the current object fetched from the PLVobj cursor, <KBD
CLASS="command"
>loopexec</KBD
> needs to bind the current object into the dynamic <SPAN
CLASS="acronym"
>PL/SQL</SPAN
> string.</P
><P
CLASS="para"
>To understand how to deal with these issues, let's start by looking more closely at the default action. This code string is contained in the packaged constant,          <KBD
CLASS="command"
>c_show_object</KBD
>, which is the following string:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
><A
CLASS="indexterm"
NAME="ch11-idx-998833-0"
></A
>c_show_object CONSTANT VARCHAR2(100) := 'p.l (:rowobj)';</PRE
></BLOCKQUOTE
><P
CLASS="para"
>In PLVobj terminology, the string <KBD
CLASS="command"
>:rowobj</KBD
> is the placeholder for the current object. This is the default placeholder string and is defined in a package-level constant shown below:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
><A
CLASS="indexterm"
NAME="ch11-idx-998834-0"
></A
>c_leph CONSTANT VARCHAR2(10) := 'rowobj';</PRE
></BLOCKQUOTE
><P
CLASS="para"
>The <KBD
CLASS="command"
>p.l</KBD
> procedure, as you should be well aware by now, displays output to the screen. So this command says: "Display the current object." When <KBD
CLASS="command"
>loopexec</KBD
> prepares to execute this simple command, it replaces all occurrences of the string <KBD
CLASS="command"
>:rowobj</KBD
> with the variable containing the current object string (in the form <EM
CLASS="emphasis"
>type:schema.name</EM
>). It then passes this string to the <KBD
CLASS="command"
>open_and_parse</KBD
> function of PLVdyn and immediately executes the <SPAN
CLASS="acronym"
>PL/SQL</SPAN
> program contained in the string.</P
><P
CLASS="para"
>When you construct your own strings to pass to <KBD
CLASS="command"
>loopexec</KBD
>, you can use the default placeholder string or you can specify your own string. You saw in the last section how I used my own placeholder, <KBD
CLASS="command"
>XX</KBD
>, to direct <KBD
CLASS="command"
>loopexec</KBD
> to perform the right substitution. Now let's look at how <KBD
CLASS="command"
>PLVcase</KBD
> uses <KBD
CLASS="command"
>loopexec</KBD
> to convert the case of multiple programs to demonstrate use of the default placeholder. The full body of the <KBD
CLASS="command"
>PLVcase.modules</KBD
><A
CLASS="indexterm"
NAME="ch11-idx-998835-0"
></A
> procedure is shown below:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>PLVobj.loopexec
   (module_spec_in,
    'PLVcase.module(' || PLVobj.c_leph || ', PLVcase.c_usecor,
       FALSE)');</PRE
></BLOCKQUOTE
><P
CLASS="para"
>As you can see, it consists of a single line: a call to the <KBD
CLASS="command"
>loopexec</KBD
> program. This call contains only two arguments, so the default values will be used for the last two arguments (the placeholder string and the string format). The line of code executed by <KBD
CLASS="command"
>loopexec</KBD
> is a call to <KBD
CLASS="command"
>PLVcase.module</KBD
> program, which converts the case of a single <SPAN
CLASS="acronym"
>PL/SQL</SPAN
> program. Suppose that I am converting the <KBD
CLASS="command"
>employee_maint</KBD
> package. I would then want this string executed by <KBD
CLASS="command"
>loopexec</KBD
>:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>PLVcase.module ('employee_maint', PLVcase.c_usecor, FALSE);</PRE
></BLOCKQUOTE
><P
CLASS="para"
>Since I am passing in a variable containing the package name, however, my call to <KBD
CLASS="command"
>PLVcase.module</KBD
> would look more like this:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>PLVcase.module (v_currobj, PLVcase.c_usecor, FALSE);</PRE
></BLOCKQUOTE
><P
CLASS="para"
>Now, it is theoretically possible for me to find out the specific string used by PLVobj for its placeholder replacement (you have already seen it: <KBD
CLASS="command"
>:rowobj</KBD
>). This is an example, however, of dangerous knowledge. In this situation, what I know could hurt me. What if I hard-code the <KBD
CLASS="command"
>rowobj</KBD
> string into my calls to <KBD
CLASS="command"
>loopexec</KBD
> and then somewhere down the line, PLVobj is changed and a new string is used? Yikes! Lots of broken code.</P
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch11-SECT-7.3"
>11.7.3 Using the Predefined Placeholder</A
></H3
><P
CLASS="para"
>A better approach is to reference the placeholder string by a named constant, rather than a literal value. This constant is provided by the <KBD
CLASS="command"
>PLVobj.c_leph</KBD
> constant. In this approach, when I call <KBD
CLASS="command"
>PLVcase.module</KBD
>, I would concatenate this constant into my command string wherever the current object variable appeared in the last example:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>'PLVcase.module(' || PLVobj.c_leph || ', PLVcase.c_usecor, FALSE)'</PRE
></BLOCKQUOTE
><P
CLASS="para"
>When passed to <KBD
CLASS="command"
>loopexec</KBD
>, this string will be executed for every object retrieved from the cursor. And for each of those objects, the placeholder string will be replaced by the object name and the dynamic <SPAN
CLASS="acronym"
>PL/SQL</SPAN
> code then executed for that object.</P
><P
CLASS="para"
>The PLVcat package also calls the <KBD
CLASS="command"
>loopexec</KBD
> procedure in its <KBD
CLASS="command"
>modules</KBD
> program to catalogue multiple programs. In this case, when I pass the current object to the <KBD
CLASS="command"
>PLVcat.module</KBD
> I only want to pass the SCHEMA.NAME portion of the current object. Consequently, I request the alternative name format:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>PLVobj.loopexec
   ('s:' || module_in,
    'PLVcat.module(' || PLVobj.c_leph || ')',
    name_format_in =&gt; PLVobj.c_modname);</PRE
></BLOCKQUOTE
><P
CLASS="para"
>If you do not want to bother with making reference to the PLVobj constant for the placeholder value, you can specify another of your own design. For example, I could recode my call to <KBD
CLASS="command"
>loopexec</KBD
> in PLVcat to this:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>PLVobj.loopexec
   ('s:' || module_in,
    'PLVcat.module(:XX)',
    'XX',
    PLVobj.c_modname);</PRE
></BLOCKQUOTE
><BLOCKQUOTE
CLASS="note"
><P
CLASS="para"
><STRONG
>NOTE:</STRONG
>  When you execute dynamic <SPAN
CLASS="acronym"
>PL/SQL</SPAN
> as practiced by PLVobj, you can only reference global data structures and programs. You can, in other words, only reference elements defined in a package specification to which you have access. A <SPAN
CLASS="acronym"
>PL/SQL</SPAN
> block that is executed dynamically is not a nested block in the current program; it is treated as a standalone block. That is why when <KBD
CLASS="command"
>PLVcase.modules</KBD
> calls <KBD
CLASS="command"
>loopexec</KBD
> in this section's example, it includes the package name PLVcase in its reference to module and the constant, <KBD
CLASS="command"
>c_usecor</KBD
>. </P
></BLOCKQUOTE
><P
CLASS="para"
>Now I have hard-coded the <KBD
CLASS="command"
>XX</KBD
> placeholder string into my execution string, but I also inform <KBD
CLASS="command"
>loopexec</KBD
> that <KBD
CLASS="command"
>XX</KBD
> is the new placeholder string. I have, therefore, established internal consistency. Even if the value of the <KBD
CLASS="command"
>c_leph</KBD
> constant changes, my code will not be affected.</P
><P
CLASS="para"
>As you can see, <KBD
CLASS="command"
>PLVobj.loopexec</KBD
> offers a tremendous amount of flexibility and potential. That's what happens when you leverage dynamic <SPAN
CLASS="acronym"
>PL/SQL</SPAN
> code execution and you take the time to build an interface through which users can tweak a utility's behavior. Take some time to play around with <KBD
CLASS="command"
>loopexec</KBD
> and all its parameter variations. You will benefit not only in your ability to take advantage of PLVobj, but also in your efforts with DBMS_SQL. It will be an investment of time richly rewarded.</P
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch11-SECT-7.4"
>11.7.4 Applying loopexec in PL/Vision</A
></H3
><P
CLASS="para"
>I found that in a number of <A
CLASS="indexterm"
NAME="ch11-idx-998836-0"
></A
>PL/Vision packages I wanted to execute a certain piece of functionality (convert the case, build a catalogue, etc.) for more than one object at a time. For example, I might want to catalogue all the external references in all packages with names like <KBD
CLASS="command"
>PLV%</KBD
>. The first time I did this, for PLVcase, I made use of my carefully constructed cursor-related programs to come up with a loop like this:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>PROCEDURE modules 
  (module_spec_in IN VARCHAR2 := NULL)
IS
   objects PLVtab.vc2000_table;
   numobj INTEGER := 0;
BEGIN
   PLVobj.setcurr (module_spec_in);

   PLVobj.open_objects;

   LOOP
      PLVobj.fetch_object;
      EXIT WHEN NOT PLVobj.more_objects;
      numobj := numobj + 1;
      objects (numobj) :=
         PLVobj.currtype || ':' ||
         PLVobj.currschema || '.' ||
         PLVobj.currname;
   END LOOP;

   PLVobj.close_objects;

   FOR objind IN 1 .. numobj
   LOOP
      module (objects (objind), c_usecor, FALSE);
   END LOOP;

   save_program;
END;</PRE
></BLOCKQUOTE
><P
CLASS="para"
>In this procedure, I loop through the cursor, loading up a <SPAN
CLASS="acronym"
>PL/SQL</SPAN
> table with the selected objects. Then I use a cursor FOR loop to convert the case of each program found in that table. I was proud of the way I was able to quickly apply my different, high-level elements of PL/Vision to come up with rich functionality. But then I got to the PLVcat package and I wanted to do the same thing there as well. Suddenly my elegant set of loops seemed like an awful lot of code to repeat. So what did I do? I built the <KBD
CLASS="command"
>vu2pstab</KBD
> procedure of PLVobj and was able to shrink down the <KBD
CLASS="command"
>PLVcase.modules</KBD
> program to nothing more than:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>PROCEDURE modules 
  (module_spec_in IN VARCHAR2 := NULL)
IS
   objects PLVtab.vc2000_table;
   numobj INTEGER := 0;
BEGIN
   PLVobj.vu2pstab (module_spec_in, objects, numobj);

   FOR objind IN 1 .. numobj
   LOOP
      module (objects (objind), c_usecor, FALSE);
   END LOOP;
   save_program;
END;</PRE
></BLOCKQUOTE
><P
CLASS="para"
>And <EM
CLASS="emphasis"
>that</EM
> was a very satisfying reduction of code and simultaneous abstraction of the process. Yet I still found myself repeating that FOR loop again and again, the only difference being the line of code that was executed inside the loop. This repetition brought me to another realization: Maybe I could use the PLVdyn package to dynamically construct and execute the body of the FOR loop. If that were true, then I could hide all of these details behind a single procedure call. </P
><P
CLASS="para"
>With the <KBD
CLASS="command"
>PLVobj.loopexec</KBD
> procedure, such a consolidation is possible. The final implementation of <KBD
CLASS="command"
>PLVcat.modules</KBD
> does in fact consist of a single line of code as shown below:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>PROCEDURE modules (module_in IN VARCHAR2) IS
BEGIN
   PLVobj.loopexec
      ('s:' || notype (module_in),
       'PLVcat.module(' || PLVobj.c_leph || ')',
       name_format_in =&gt; PLVobj.c_modname);
END;</PRE
></BLOCKQUOTE
><P
CLASS="para"
>It uses the default placeholder string in the call to <KBD
CLASS="command"
>PLVcat.module</KBD
>. Since that placeholder argument does not need to be specified, it uses named notation to make sure that the module name format is used.</P
><P
CLASS="para"
>It was possible in this way to shrink a 15-line program body down to just one line. In the process, I switched from a procedural mode of coding to a declarative style. By calling <KBD
CLASS="command"
>loopexec</KBD
>, I simply describe the action I want and let the underlying engine work out the details.<A
CLASS="indexterm"
NAME="ch11-idx-998837-0"
></A
><A
CLASS="indexterm"
NAME="ch11-idx-998837-1"
></A
><A
CLASS="indexterm"
NAME="ch11-idx-998837-2"
></A
><A
CLASS="indexterm"
NAME="ch11-idx-998837-3"
></A
></P
></DIV
></DIV
><DIV
CLASS="htmlnav"
><P
></P
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch11_06.htm"
TITLE="11.6 Populating a PL/SQL Table with Object Names"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 11.6 Populating a PL/SQL Table with Object Names"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="book"
HREF="index.htm"
TITLE="Advanced Oracle PL/SQL Programming with Packages"
><IMG
SRC="../gifs/txthome.gif"
ALT="Advanced Oracle PL/SQL Programming with Packages"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch11_08.htm"
TITLE="11.8 Tracing PLVobj Activity"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 11.8 Tracing PLVobj Activity"
BORDER="0"></A
></TD
></TR
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
>11.6 Populating a PL/SQL Table with Object Names</TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="index"
HREF="index/idx_0.htm"
TITLE="Book Index"
><IMG
SRC="../gifs/index.gif"
ALT="Book Index"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
>11.8 Tracing PLVobj Activity</TD
></TR
></TABLE
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"></DIV
><IMG
SRC="../gifs/smnavbar.gif"
USEMAP="#map"
BORDER="0"
ALT="The Oracle Library Navigation">

<P><font size="-1">
<a href="../copyrght.htm#copy">Copyright (c) 2000</a> O'Reilly & Associates. All rights reserved.
</font></P>

<MAP NAME="map">

<AREA SHAPE="RECT"
COORDS="0,0,35,30"
HREF="../index.htm"
ALT="Library Home">

<AREA SHAPE="RECT"
COORDS="40,0,95,30"
HREF="../prog2/index.htm"
ALT="Oracle PL/SQL Programming, 2nd. Ed.">

<AREA SHAPE="RECT"
COORDS="100,0,200,30"
HREF="../guide8i/index.htm"
ALT="Guide to Oracle 8i Features">

<AREA SHAPE="RECT"
COORDS="205,0,245,30"
HREF="../bipack/index.htm"
ALT="Oracle Built-in Packages">

<AREA SHAPE="RECT"
COORDS="250,0,320,30"
HREF="index.htm"
ALT="Advanced PL/SQL Programming with Packages">

<AREA SHAPE="RECT"
COORDS="325,0,420,30"
HREF="../webapp/index.htm"
ALT="Oracle Web Applications">

<AREA SHAPE="RECT"
COORDS="425,0,490,30"
HREF="../langpkt/index.htm"
ALT="Oracle PL/SQL Language Pocket Reference">

<AREA SHAPE="RECT"
COORDS="495,0,570,30"
HREF="../bipkt/index.htm"
ALT="Oracle PL/SQL Built-ins Pocket Reference">
</MAP>
</BODY
>
<!-- Mirrored from liso.cs.pusan.ac.kr by HTTrack Website Copier/3.x [XR&CO'2001] -->
</HTML
>
