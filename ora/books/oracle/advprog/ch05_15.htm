<HTML
><HEAD
><TITLE
>[Chapter 5] 5.15 PLVio: Input/Output Processing</TITLE
><META
NAME="DC.Creator"
CONTENT="Steven Feuerstein"><META
NAME="DC.Date"
CONTENT="2000-04-29T18:25:06Z"><META
NAME="DC.Format"
CONTENT="text/html"
SCHEME="MIME"><META
NAME="DC.Identifier"
CONTENT="O'Reilly and Associates-1-56592-238-7E"><META
NAME="DC.Language"
CONTENT="en-US"><META
NAME="DC.Publisher"
CONTENT="O'Reilly &amp; Associates, Inc."><META
NAME="DC.Source"
CONTENT="1-56592-238-7E"
SCHEME="ISBN"><META
NAME="DC.Subject.Keyword"
CONTENT="PL/SQL SQL Oracle Packages"><META
NAME="DC.Title"
CONTENT="Advanced Oracle PL/SQL Programming with Packages"><META
NAME="DC.Type"
CONTENT="Text.Monograph"><META
NAME="generator"
CONTENT="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><LINK
REL="stylesheet"
TYPE="text/css"
HREF="../style/style1.css"><LINK
REV="made"
HREF="mailto:online-books@oreilly.com"
TITLE="Online Books Comments"><LINK
REL="up"
HREF="ch05_01.htm"
TITLE="5. PL/Vision Package Specifications"><LINK
REL="prev"
HREF="ch05_14.htm#ch05-SECT-14.0.3"
TITLE="5.14 PLVhlp: Online Help Architechture"><LINK
REL="next"
HREF="ch05_16.htm#ch05-SECT-16.0.1"
TITLE="5.16 PLVlex: Lexical Analysis"></HEAD>
<BODY><DIV CLASS="htmlnav"
><H1
><IMG
SRC="gifs/smbanner.gif"
ALT="Advanced Oracle PL/SQL Programming with Packages"
USEMAP="#srchmap"
BORDER="0"></H1
><MAP
NAME="srchmap"
><AREA
SHAPE="RECT"
COORDS="0,0,466,65"
HREF="index.htm"
ALT="Advanced Oracle PL/SQL Programming with Packages"><AREA
SHAPE="RECT"
COORDS="467,0,514,18"
HREF="jobjects/fsearch.htm"
ALT="Search this book"></MAP
><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch05_14.htm#ch05-SECT-14.0.3"
TITLE="5.14 PLVhlp: Online Help Architechture"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 5.14 PLVhlp: Online Help Architechture"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><SPAN
CLASS="NAVTITLE"
><A
CLASS="chapter"
REL="up"
HREF="ch05_01.htm"
TITLE="5. PL/Vision Package Specifications"
>Chapter 5<BR>PL/Vision Package Specifications</A
></SPAN
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch05_16.htm#ch05-SECT-16.0.1"
TITLE="5.16 PLVlex: Lexical Analysis"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 5.16 PLVlex: Lexical Analysis"
BORDER="0"></A
></TD
></TR
></TABLE
>&nbsp;<HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"></DIV
><DIV
CLASS="sect1"
><H2
CLASS="sect1"
><A
CLASS="title"
NAME="ch05-SECT-15"
>5.15 PLVio: Input/Output Processing</A
></H2
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="ch05-idx-1001310-0"
></A
><A
CLASS="indexterm"
NAME="ch05-idx-1001310-1"
></A
>The PLVio (PL/Vision Input/Output) package consolidates all of the logic required to read from and write to repositories for <SPAN
CLASS="acronym"
>PL/SQL</SPAN
> source code. See <A
CLASS="xref"
HREF="ch12_01.htm"
>Chapter 12, <CITE
CLASS="chapter"
>PLVio: Reading and Writing PL/SQL Source Code</CITE
></A
> for details.</P
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch05-SECT-15.0.1"
>5.15.1 Package constants and exceptions</A
></H3
><DL
CLASS="variablelist"
><DT
CLASS="term"
><CODE
CLASS="literal"
> c_name PLV.plsql_identifier%TYPE := 'name';</CODE
></DT
><DT
CLASS="term"
><CODE
CLASS="literal"
>c_type PLV.plsql_identifier%TYPE := 'type';</CODE
></DT
><DT
CLASS="term"
><CODE
CLASS="literal"
>c_text PLV.plsql_identifier%TYPE := 'text';</CODE
></DT
><DT
CLASS="term"
><CODE
CLASS="literal"
>c_line PLV.plsql_identifier%TYPE := 'line';</CODE
></DT
><DT
CLASS="term"
><CODE
CLASS="literal"
>c_schema PLV.plsql_identifier%TYPE := 'owner'; </CODE
></DT
><DD
CLASS="listitem"
><P
CLASS="para"
>The default names for the columns of the database table repository. You can override these names in calls to <KBD
CLASS="command"
>setsrc</KBD
> and <KBD
CLASS="command"
>settrg</KBD
>.</P
></DD
><DT
CLASS="term"
><CODE
CLASS="literal"
> c_notset CONSTANT VARCHAR2(1) := 'U';</CODE
></DT
><DD
CLASS="listitem"
><P
CLASS="para"
>The value used by PLVio to detect when a repository (source or target) have not yet been set.</P
></DD
><DT
CLASS="term"
><CODE
CLASS="literal"
> insert_failure EXCEPTION;</CODE
><A
CLASS="indexterm"
NAME="ch05-idx-1001311-0"
></A
><A
CLASS="indexterm"
NAME="ch05-idx-1001311-1"
></A
></DT
><DD
CLASS="listitem"
><P
CLASS="para"
>Exception raised when PLVio is unable to insert or put a line to the target repository.</P
></DD
></DL
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch05-SECT-15.0.2"
>5.15.2 Package records</A
></H3
><DL
CLASS="variablelist"
><DT
CLASS="term"
><CODE
CLASS="literal"
> TYPE line_type IS RECORD</CODE
><A
CLASS="indexterm"
NAME="ch05-idx-1001312-0"
></A
></DT
><DT
CLASS="term"
><CODE
CLASS="literal"
>   (text VARCHAR2(2000) := NULL,</CODE
></DT
><DT
CLASS="term"
><CODE
CLASS="literal"
>    len INTEGER := NULL,</CODE
></DT
><DT
CLASS="term"
><CODE
CLASS="literal"
>    pos INTEGER := 1,</CODE
></DT
><DT
CLASS="term"
><CODE
CLASS="literal"
>    line INTEGER := 0, /* line # in original */</CODE
></DT
><DT
CLASS="term"
><CODE
CLASS="literal"
>    line# INTEGER := 0,	/* line # for new */</CODE
></DT
><DT
CLASS="term"
><CODE
CLASS="literal"
>    is_blank BOOLEAN := FALSE,</CODE
></DT
><DT
CLASS="term"
><CODE
CLASS="literal"
>    eof BOOLEAN := FALSE,</CODE
></DT
><DT
CLASS="term"
><CODE
CLASS="literal"
>    indent INTEGER := 0,</CODE
></DT
><DT
CLASS="term"
><CODE
CLASS="literal"
>    unindent BOOLEAN := FALSE,</CODE
></DT
><DT
CLASS="term"
><CODE
CLASS="literal"
>    continuation BOOLEAN := FALSE,</CODE
></DT
><DT
CLASS="term"
><CODE
CLASS="literal"
>    blank_line_before BOOLEAN := FALSE);</CODE
></DT
><DD
CLASS="listitem"
><P
CLASS="para"
>The <KBD
CLASS="command"
>line_type</KBD
> record TYPE defines the structure for a line datatype in PLVio. </P
></DD
><DT
CLASS="term"
><CODE
CLASS="literal"
> empty_line line_type;</CODE
></DT
><DD
CLASS="listitem"
><P
CLASS="para"
>Predefined empty line that can be used to initialize a line's fields.</P
></DD
></DL
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch05-SECT-15.0.3"
>5.15.3 <A
CLASS="indexterm"
NAME="ch05-idx-1001313-0"
></A
><A
CLASS="indexterm"
NAME="ch05-idx-1001313-1"
></A
>Source and target repository type functions</A
></H3
><DL
CLASS="variablelist"
><DT
CLASS="term"
><CODE
CLASS="literal"
> FUNCTION file_source RETURN BOOLEAN;</CODE
></DT
><DT
CLASS="term"
><CODE
CLASS="literal"
>FUNCTION pstab_source RETURN BOOLEAN;</CODE
></DT
><DT
CLASS="term"
><CODE
CLASS="literal"
>FUNCTION dbtab_source RETURN BOOLEAN;</CODE
></DT
><DT
CLASS="term"
><CODE
CLASS="literal"
>FUNCTION string_source RETURN BOOLEAN;</CODE
></DT
><DD
CLASS="listitem"
><P
CLASS="para"
>Returns TRUE if the current source repository matches that indicated by the name, FALSE otherwise.</P
></DD
><DT
CLASS="term"
><CODE
CLASS="literal"
> FUNCTION file_target RETURN BOOLEAN;</CODE
></DT
><DT
CLASS="term"
><CODE
CLASS="literal"
>FUNCTION pstab_target RETURN BOOLEAN;</CODE
></DT
><DT
CLASS="term"
><CODE
CLASS="literal"
>FUNCTION dbtab_target RETURN BOOLEAN;</CODE
></DT
><DT
CLASS="term"
><CODE
CLASS="literal"
>FUNCTION string_target RETURN BOOLEAN;</CODE
></DT
><DT
CLASS="term"
><CODE
CLASS="literal"
>FUNCTION stdout_target RETURN BOOLEAN;</CODE
></DT
><DD
CLASS="listitem"
><P
CLASS="para"
>Returns TRUE if the current target repository matches that indicated by the name, FALSE otherwise.</P
></DD
><DT
CLASS="term"
><CODE
CLASS="literal"
> FUNCTION nosrc RETURN BOOLEAN;</CODE
></DT
><DT
CLASS="term"
><CODE
CLASS="literal"
>FUNCTION notrg RETURN BOOLEAN;</CODE
></DT
><DD
CLASS="listitem"
><P
CLASS="para"
>These functions return TRUE if the source and target repositories, respectively, have not yet been set.</P
></DD
><DT
CLASS="term"
><CODE
CLASS="literal"
> FUNCTION srctype RETURN VARCHAR2;</CODE
></DT
><DT
CLASS="term"
><CODE
CLASS="literal"
>FUNCTION trgtype RETURN VARCHAR2; </CODE
></DT
><DD
CLASS="listitem"
><P
CLASS="para"
>These functions return the current source and target repository types. The values returned can be matched against constants in the PLV package.</P
></DD
></DL
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch05-SECT-15.0.4"
>5.15.4 Managing the source repository</A
></H3
><DL
CLASS="variablelist"
><DT
CLASS="term"
><CODE
CLASS="literal"
> PROCEDURE setsrc</CODE
><A
CLASS="indexterm"
NAME="ch05-idx-1001314-0"
></A
></DT
><DT
CLASS="term"
><CODE
CLASS="literal"
>   (srctype_in IN VARCHAR2,  </CODE
></DT
><DT
CLASS="term"
><CODE
CLASS="literal"
>    name_in IN VARCHAR2 := 'user_source',</CODE
></DT
><DT
CLASS="term"
><CODE
CLASS="literal"
>    name_col_in IN VARCHAR2 := c_name,</CODE
></DT
><DT
CLASS="term"
><CODE
CLASS="literal"
>    type_col_in IN VARCHAR2 := c_type,</CODE
></DT
><DT
CLASS="term"
><CODE
CLASS="literal"
>    line#_col_in IN VARCHAR2 := c_line,</CODE
></DT
><DT
CLASS="term"
><CODE
CLASS="literal"
>    text_col_in IN VARCHAR2 := c_text,</CODE
></DT
><DT
CLASS="term"
><CODE
CLASS="literal"
>    schema_col_in IN VARCHAR2 := NULL);</CODE
></DT
><DD
CLASS="listitem"
><P
CLASS="para"
>This procedure sets the source repository. You provide the repository type, the name, and then, if a database table, the names of the columns in the table. </P
></DD
><DT
CLASS="term"
><CODE
CLASS="literal"
> PROCEDURE initsrc</CODE
><A
CLASS="indexterm"
NAME="ch05-idx-1001315-0"
></A
></DT
><DT
CLASS="term"
><CODE
CLASS="literal"
>   (starting_at_in IN INTEGER,</CODE
></DT
><DT
CLASS="term"
><CODE
CLASS="literal"
>    ending_at_in IN INTEGER,</CODE
></DT
><DT
CLASS="term"
><CODE
CLASS="literal"
>    where_in IN VARCHAR2 := NULL);</CODE
></DT
><DT
CLASS="term"
><CODE
CLASS="literal"
>PROCEDURE initsrc</CODE
></DT
><DT
CLASS="term"
><CODE
CLASS="literal"
>   (starting_at_in IN VARCHAR2 := NULL,</CODE
></DT
><DT
CLASS="term"
><CODE
CLASS="literal"
>    ending_at_in IN VARCHAR2 := NULL,</CODE
></DT
><DT
CLASS="term"
><CODE
CLASS="literal"
>    where_in IN VARCHAR2 := NULL);</CODE
></DT
><DD
CLASS="listitem"
><P
CLASS="para"
>The <KBD
CLASS="command"
>initsrc</KBD
> procedures initialize the source after it has been set. You can provide additional information in the call to <KBD
CLASS="command"
>initsrc</KBD
> to restrict which rows are retrieved from the source, including a WHERE clause and start-end line numbers or strings.</P
></DD
><DT
CLASS="term"
><CODE
CLASS="literal"
> PROCEDURE usrc</CODE
><A
CLASS="indexterm"
NAME="ch05-idx-1001316-0"
></A
></DT
><DT
CLASS="term"
><CODE
CLASS="literal"
>   (starting_at_in IN VARCHAR2 := NULL,</CODE
></DT
><DT
CLASS="term"
><CODE
CLASS="literal"
>    ending_at_in IN VARCHAR2 := NULL,</CODE
></DT
><DT
CLASS="term"
><CODE
CLASS="literal"
>    where_in IN VARCHAR2 := NULL);</CODE
></DT
><DT
CLASS="term"
><CODE
CLASS="literal"
>PROCEDURE usrc</CODE
></DT
><DT
CLASS="term"
><CODE
CLASS="literal"
>   (starting_at_in IN INTEGER,</CODE
></DT
><DT
CLASS="term"
><CODE
CLASS="literal"
>    ending_at_in IN INTEGER,</CODE
></DT
><DT
CLASS="term"
><CODE
CLASS="literal"
>    where_in IN VARCHAR2 := NULL);</CODE
></DT
><DD
CLASS="listitem"
><P
CLASS="para"
>The two <KBD
CLASS="command"
>usrc</KBD
> procedures set the source repository to the <A
CLASS="indexterm"
NAME="ch05-idx-1001317-0"
></A
>USER_SOURCE data dictionary view and then initialize the source with a call to <KBD
CLASS="command"
>initsrc</KBD
>, passing along the arguments provided to it (notice that they match those of <KBD
CLASS="command"
>initsrc</KBD
>).</P
></DD
><DT
CLASS="term"
><CODE
CLASS="literal"
> PROCEDURE asrc</CODE
><A
CLASS="indexterm"
NAME="ch05-idx-1001318-0"
></A
></DT
><DT
CLASS="term"
><CODE
CLASS="literal"
>   (starting_at_in IN VARCHAR2 := NULL,</CODE
></DT
><DT
CLASS="term"
><CODE
CLASS="literal"
>    ending_at_in IN VARCHAR2 := NULL,</CODE
></DT
><DT
CLASS="term"
><CODE
CLASS="literal"
>    where_in IN VARCHAR2 := NULL);</CODE
></DT
><DT
CLASS="term"
><CODE
CLASS="literal"
>PROCEDURE asrc </CODE
></DT
><DT
CLASS="term"
><CODE
CLASS="literal"
>   (starting_at_in IN INTEGER,</CODE
></DT
><DT
CLASS="term"
><CODE
CLASS="literal"
>    ending_at_in IN INTEGER,</CODE
></DT
><DT
CLASS="term"
><CODE
CLASS="literal"
>    where_in IN VARCHAR2 := NULL);</CODE
></DT
><DD
CLASS="listitem"
><P
CLASS="para"
>The two <KBD
CLASS="command"
>asrc</KBD
> procedures set the source repository to the <A
CLASS="indexterm"
NAME="ch05-idx-1001319-0"
></A
>ALL_SOURCE data dictionary view and then initialize the source with a call to <KBD
CLASS="command"
>initsrc</KBD
>, passing along the arguments provided to it (notice that they match those of <KBD
CLASS="command"
>initsrc</KBD
>).</P
></DD
><DT
CLASS="term"
><CODE
CLASS="literal"
> FUNCTION srcselect RETURN VARCHAR2;</CODE
><A
CLASS="indexterm"
NAME="ch05-idx-1001320-0"
></A
></DT
><DD
CLASS="listitem"
><P
CLASS="para"
>Returns the current SELECT statement associated with the source repository. This is only relevant when the source type is a database table (<KBD
CLASS="command"
>PLV.dbtab</KBD
>).</P
></DD
><DT
CLASS="term"
><CODE
CLASS="literal"
> PROCEDURE closesrc;</CODE
><A
CLASS="indexterm"
NAME="ch05-idx-1001321-0"
></A
></DT
><DD
CLASS="listitem"
><P
CLASS="para"
>  Closes the source repository. If a database table, the cursor is closed. If a file, the file is closed.</P
></DD
></DL
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch05-SECT-15.0.5"
>5.15.5 Managing the source WHERE clause</A
></H3
><P
CLASS="para"
>When the source type is a database table, you can manipulate the <A
CLASS="indexterm"
NAME="ch05-idx-1001322-0"
></A
>WHERE clause which identifies or restricts those rows that are read from the source table. The following constants and programs all have an impact on the WHERE clause.</P
><DL
CLASS="variablelist"
><DT
CLASS="term"
><CODE
CLASS="literal"
> c_first CONSTANT VARCHAR2(1) := 'F';</CODE
></DT
><DT
CLASS="term"
><CODE
CLASS="literal"
>c_last CONSTANT VARCHAR2(1) := 'L';</CODE
></DT
><DT
CLASS="term"
><CODE
CLASS="literal"
>c_before CONSTANT VARCHAR2(1) := 'B';</CODE
></DT
><DT
CLASS="term"
><CODE
CLASS="literal"
>c_after CONSTANT VARCHAR2(1) := 'A';</CODE
></DT
><DD
CLASS="listitem"
><P
CLASS="para"
>These constants indicate the type of match to be performed when using the <KBD
CLASS="command"
>line_with</KBD
> and <KBD
CLASS="command"
>set_line_limit</KBD
> procedures. </P
></DD
><DT
CLASS="term"
><CODE
CLASS="literal"
> PROCEDURE set_srcwhere (where_in IN VARCHAR2 := NULL);</CODE
><A
CLASS="indexterm"
NAME="ch05-idx-1001323-0"
></A
></DT
><DD
CLASS="listitem"
><P
CLASS="para"
>Sets the source repository WHERE clause, either by replacing it or providing additional elements.</P
></DD
><DT
CLASS="term"
><CODE
CLASS="literal"
> PROCEDURE rem_srcwhere;</CODE
><A
CLASS="indexterm"
NAME="ch05-idx-1001324-0"
></A
></DT
><DD
CLASS="listitem"
><P
CLASS="para"
>Removes any additional elements that have been added to the WHERE clause.</P
></DD
><DT
CLASS="term"
><CODE
CLASS="literal"
> FUNCTION line_with </CODE
><A
CLASS="indexterm"
NAME="ch05-idx-1001325-0"
></A
></DT
><DT
CLASS="term"
><CODE
CLASS="literal"
>   (text_in IN VARCHAR2,</CODE
></DT
><DT
CLASS="term"
><CODE
CLASS="literal"
>    loc_type_in IN VARCHAR2 := c_first,</CODE
></DT
><DT
CLASS="term"
><CODE
CLASS="literal"
>    after_in IN INTEGER := NULL)</CODE
></DT
><DT
CLASS="term"
><CODE
CLASS="literal"
>RETURN INTEGER;</CODE
></DT
><DT
CLASS="term"
><CODE
CLASS="literal"
>FUNCTION line_with </CODE
></DT
><DT
CLASS="term"
><CODE
CLASS="literal"
>   (text_in IN VARCHAR2,</CODE
></DT
><DT
CLASS="term"
><CODE
CLASS="literal"
>    loc_type_in IN VARCHAR2 := c_first,</CODE
></DT
><DT
CLASS="term"
><CODE
CLASS="literal"
>    after_in IN VARCHAR2,</CODE
></DT
><DT
CLASS="term"
><CODE
CLASS="literal"
>    after_loc_type_in IN VARCHAR2 := c_first)</CODE
></DT
><DT
CLASS="term"
><CODE
CLASS="literal"
>RETURN INTEGER;</CODE
></DT
><DD
CLASS="listitem"
><P
CLASS="para"
>The <KBD
CLASS="command"
>line_with</KBD
> functions return the line number associated with the values passed to them. They answer questions like "What is the first line in the PLVvu package containing `IF'?" and "What is the last line in the PLV package containing `CONSTANT' that comes after the string `VARCHAR2'?"</P
></DD
><DT
CLASS="term"
><CODE
CLASS="literal"
> PROCEDURE set_line_limit</CODE
><A
CLASS="indexterm"
NAME="ch05-idx-1001326-0"
></A
></DT
><DT
CLASS="term"
><CODE
CLASS="literal"
>   (line_in IN INTEGER, loc_type_in IN VARCHAR2 := c_first);</CODE
></DT
><DD
CLASS="listitem"
><P
CLASS="para"
>Adds an element to the WHERE clause of the source repository restricting the text retrieved by a line number.</P
></DD
><DT
CLASS="term"
><CODE
CLASS="literal"
> PROCEDURE rem_line_limit (line_in IN INTEGER);</CODE
><A
CLASS="indexterm"
NAME="ch05-idx-1001327-0"
></A
></DT
><DD
CLASS="listitem"
><P
CLASS="para"
>Use this procedure to remove from the WHERE clause an element added by <KBD
CLASS="command"
>set_line_limit</KBD
>.</P
></DD
></DL
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch05-SECT-15.0.6"
>5.15.6 Managing the <A
CLASS="indexterm"
NAME="ch05-idx-1001328-0"
></A
>target repository</A
></H3
><DL
CLASS="variablelist"
><DT
CLASS="term"
><CODE
CLASS="literal"
> target_table PLVtab.vc2000_table;</CODE
></DT
><DD
CLASS="listitem"
><P
CLASS="para"
>The <SPAN
CLASS="acronym"
>PL/SQL</SPAN
> table that contains the code when the target is set to <SPAN
CLASS="acronym"
>PL/SQL</SPAN
> table.</P
></DD
><DT
CLASS="term"
><CODE
CLASS="literal"
> target_row BINARY_INTEGER;</CODE
></DT
><DD
CLASS="listitem"
><P
CLASS="para"
>The number of rows in the target <SPAN
CLASS="acronym"
>PL/SQL</SPAN
> table.</P
></DD
><DT
CLASS="term"
><CODE
CLASS="literal"
> PROCEDURE settrg</CODE
><A
CLASS="indexterm"
NAME="ch05-idx-1001329-0"
></A
></DT
><DT
CLASS="term"
><CODE
CLASS="literal"
>   (trgtype_in IN VARCHAR2,</CODE
></DT
><DT
CLASS="term"
><CODE
CLASS="literal"
>    name_in IN VARCHAR2 := 'PLV_source',</CODE
></DT
><DT
CLASS="term"
><CODE
CLASS="literal"
>    target_name_col_in IN VARCHAR2 := 'name',</CODE
></DT
><DT
CLASS="term"
><CODE
CLASS="literal"
>    trgtype_col_in IN VARCHAR2 := 'type',</CODE
></DT
><DT
CLASS="term"
><CODE
CLASS="literal"
>    target_line#_col_in IN VARCHAR2 := 'line',</CODE
></DT
><DT
CLASS="term"
><CODE
CLASS="literal"
>    target_text_col_in IN VARCHAR2 := 'text');</CODE
></DT
><DD
CLASS="listitem"
><P
CLASS="para"
>Sets the target and, if a database table, the structure of the table containing the text. This program also calls <KBD
CLASS="command"
>inittrg</KBD
> (not so with the source repository).</P
></DD
><DT
CLASS="term"
><CODE
CLASS="literal"
> PROCEDURE disptrg</CODE
><A
CLASS="indexterm"
NAME="ch05-idx-1001330-0"
></A
></DT
><DT
CLASS="term"
><CODE
CLASS="literal"
>   (header_in IN VARCHAR2 := NULL,</CODE
></DT
><DT
CLASS="term"
><CODE
CLASS="literal"
>    start_in IN INTEGER := 1,</CODE
></DT
><DT
CLASS="term"
><CODE
CLASS="literal"
>    end_in IN INTEGER := target_row,</CODE
></DT
><DT
CLASS="term"
><CODE
CLASS="literal"
>    type_in IN VARCHAR2 := trgtype);</CODE
></DT
><DD
CLASS="listitem"
><P
CLASS="para"
>Displays the contents of the target repository. The second and third arguments apply to <SPAN
CLASS="acronym"
>PL/SQL</SPAN
> tables and file repositories only. The fourth argument allows you to override the current target type to display the contents of another type repository.</P
></DD
><DT
CLASS="term"
><CODE
CLASS="literal"
> PROCEDURE inittrg;</CODE
><A
CLASS="indexterm"
NAME="ch05-idx-1001331-0"
></A
><A
CLASS="indexterm"
NAME="ch05-idx-1001331-1"
></A
></DT
><DD
CLASS="listitem"
><P
CLASS="para"
>Initializes the target repository; this is called by <KBD
CLASS="command"
>settrg</KBD
> so there is very little reason to execute this directly.</P
></DD
><DT
CLASS="term"
><CODE
CLASS="literal"
> FUNCTION trgstg RETURN VARCHAR2;</CODE
><A
CLASS="indexterm"
NAME="ch05-idx-1001332-0"
></A
></DT
><DD
CLASS="listitem"
><P
CLASS="para"
>Returns the string target repository. Separate lines of text in the repository are separated by a <KBD
CLASS="command"
>CHR(10)</KBD
> character.</P
></DD
><DT
CLASS="term"
><CODE
CLASS="literal"
> PROCEDURE closetrg;</CODE
><A
CLASS="indexterm"
NAME="ch05-idx-1001333-0"
></A
></DT
><DD
CLASS="listitem"
><P
CLASS="para"
>Closes the target repository.</P
></DD
><DT
CLASS="term"
><CODE
CLASS="literal"
> PROCEDURE clrtrg </CODE
><A
CLASS="indexterm"
NAME="ch05-idx-1001334-0"
></A
></DT
><DT
CLASS="term"
><CODE
CLASS="literal"
>   (program_name_in IN VARCHAR2 := NULL,</CODE
></DT
><DT
CLASS="term"
><CODE
CLASS="literal"
>    program_type_in IN VARCHAR2 := NULL);</CODE
></DT
><DD
CLASS="listitem"
><P
CLASS="para"
>Clears the specified repository. If a database table, the rows are deleted. If a string or <SPAN
CLASS="acronym"
>PL/SQL</SPAN
> table, the repository is set to NULL.</P
></DD
></DL
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch05-SECT-15.0.7"
>5.15.7 <A
CLASS="indexterm"
NAME="ch05-idx-1001335-0"
></A
><A
CLASS="indexterm"
NAME="ch05-idx-1001335-1"
></A
>Reading and writing lines</A
></H3
><P
CLASS="para"
>The whole point of PLVio is to read from the source repository and/or write to the target repository. In PLVio lingo, this means that you get a line from the source and put a line to the target.</P
><DL
CLASS="variablelist"
><DT
CLASS="term"
><CODE
CLASS="literal"
> PROCEDURE initline</CODE
><A
CLASS="indexterm"
NAME="ch05-idx-1001336-0"
></A
></DT
><DT
CLASS="term"
><CODE
CLASS="literal"
>   (line_inout IN OUT line_type,</CODE
></DT
><DT
CLASS="term"
><CODE
CLASS="literal"
>    text_in IN VARCHAR2 := NULL,</CODE
></DT
><DT
CLASS="term"
><CODE
CLASS="literal"
>    len_in IN INTEGER := NULL,</CODE
></DT
><DT
CLASS="term"
><CODE
CLASS="literal"
>    pos_in IN INTEGER := 1,</CODE
></DT
><DT
CLASS="term"
><CODE
CLASS="literal"
>    line#_in IN INTEGER := 0,</CODE
></DT
><DT
CLASS="term"
><CODE
CLASS="literal"
>    is_blank_in IN BOOLEAN := FALSE,</CODE
></DT
><DT
CLASS="term"
><CODE
CLASS="literal"
>    eof_in IN BOOLEAN := FALSE);</CODE
></DT
><DD
CLASS="listitem"
><P
CLASS="para"
>Initializes a line record (defined with the PLV<KBD
CLASS="command"
>io.line_type</KBD
> record TYPE) with the values provided in the parameter list. </P
></DD
><DT
CLASS="term"
><CODE
CLASS="literal"
> PROCEDURE get_line </CODE
><A
CLASS="indexterm"
NAME="ch05-idx-1001337-0"
></A
></DT
><DT
CLASS="term"
><CODE
CLASS="literal"
>   (line_inout IN OUT line_type,</CODE
></DT
><DT
CLASS="term"
><CODE
CLASS="literal"
>    curr_line#_in IN INTEGER := NULL);</CODE
></DT
><DD
CLASS="listitem"
><P
CLASS="para"
>Gets a line from the source repository and deposits it in the line record provided in the argument list.</P
></DD
><DT
CLASS="term"
><CODE
CLASS="literal"
> FUNCTION rest_of_line</CODE
><A
CLASS="indexterm"
NAME="ch05-idx-1001338-0"
></A
></DT
><DT
CLASS="term"
><CODE
CLASS="literal"
>   (line_in IN line_type, pos_in IN INTEGER := line_in.pos)    </CODE
></DT
><DT
CLASS="term"
><CODE
CLASS="literal"
>RETURN VARCHAR2;</CODE
></DT
><DD
CLASS="listitem"
><P
CLASS="para"
>Returns the rest of the line that has not yet been scanned, based on the current position in the line (provided by the second argument).</P
></DD
><DT
CLASS="term"
><CODE
CLASS="literal"
> PROCEDURE put_line (line_in IN line_type);</CODE
><A
CLASS="indexterm"
NAME="ch05-idx-1001339-0"
></A
></DT
><DD
CLASS="listitem"
><P
CLASS="para"
>Puts a line record in the target repository. </P
></DD
><DT
CLASS="term"
><CODE
CLASS="literal"
> PROCEDURE put_line</CODE
></DT
><DT
CLASS="term"
><CODE
CLASS="literal"
>   (string_in IN VARCHAR2, line#_in IN INTEGER := NULL);</CODE
></DT
><DD
CLASS="listitem"
><P
CLASS="para"
>Puts a string in the target repository. Use this version of <KBD
CLASS="command"
>put_line</KBD
> when you are not otherwise working with a record defined with the <KBD
CLASS="command"
>line_type</KBD
> record TYPE and simply have a string to move to the repository.</P
></DD
></DL
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch05-SECT-15.0.8"
>5.15.8 Saving and restoring repository settings</A
></H3
><DL
CLASS="variablelist"
><DT
CLASS="term"
><CODE
CLASS="literal"
> PROCEDURE savesrc;</CODE
><A
CLASS="indexterm"
NAME="ch05-idx-1001340-0"
></A
><A
CLASS="indexterm"
NAME="ch05-idx-1001340-1"
></A
><A
CLASS="indexterm"
NAME="ch05-idx-1001340-2"
></A
></DT
><DD
CLASS="listitem"
><P
CLASS="para"
>Requests that the current settings for the source repository be saved and then restored upon close of the (new) source (the default).</P
></DD
><DT
CLASS="term"
><CODE
CLASS="literal"
> PROCEDURE nosavesrc;</CODE
><A
CLASS="indexterm"
NAME="ch05-idx-1001341-0"
></A
></DT
><DD
CLASS="listitem"
><P
CLASS="para"
>Requests that saves and restores not be performed.</P
></DD
><DT
CLASS="term"
><CODE
CLASS="literal"
> FUNCTION saving_src RETURN BOOLEAN;</CODE
><A
CLASS="indexterm"
NAME="ch05-idx-1001342-0"
></A
></DT
><DD
CLASS="listitem"
><P
CLASS="para"
>Returns TRUE if saves and restores are being performed.</P
></DD
><DT
CLASS="term"
><CODE
CLASS="literal"
> PROCEDURE savetrg;</CODE
><A
CLASS="indexterm"
NAME="ch05-idx-1001343-0"
></A
></DT
><DD
CLASS="listitem"
><P
CLASS="para"
>Requests that the current settings for the target repository be saved and then restored upon close of the (new) target (the default).</P
></DD
><DT
CLASS="term"
><CODE
CLASS="literal"
> PROCEDURE nosavetrg;</CODE
><A
CLASS="indexterm"
NAME="ch05-idx-1001344-0"
></A
></DT
><DD
CLASS="listitem"
><P
CLASS="para"
>Requests that saves and restores for the target not be performed.</P
></DD
><DT
CLASS="term"
><CODE
CLASS="literal"
> FUNCTION saving_trg RETURN BOOLEAN;</CODE
><A
CLASS="indexterm"
NAME="ch05-idx-1001345-0"
></A
></DT
><DD
CLASS="listitem"
><P
CLASS="para"
>Returns TRUE if saves and restores for the target are being performed.</P
></DD
><DT
CLASS="term"
><CODE
CLASS="literal"
> PROCEDURE restoresrc;</CODE
><A
CLASS="indexterm"
NAME="ch05-idx-1001346-0"
></A
></DT
><DD
CLASS="listitem"
><P
CLASS="para"
>Restores the source repository to its previous value.</P
></DD
><DT
CLASS="term"
><CODE
CLASS="literal"
> PROCEDURE restoretrg;</CODE
><A
CLASS="indexterm"
NAME="ch05-idx-1001347-0"
></A
></DT
><DD
CLASS="listitem"
><P
CLASS="para"
>Restores the target repository to its previous value.</P
></DD
></DL
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch05-SECT-15.0.9"
>5.15.9 Miscellaneous PLVio programs</A
></H3
><DL
CLASS="variablelist"
><DT
CLASS="term"
><CODE
CLASS="literal"
> PROCEDURE src2trg (close_in IN BOOLEAN := TRUE);</CODE
><A
CLASS="indexterm"
NAME="ch05-idx-1001348-0"
></A
><A
CLASS="indexterm"
NAME="ch05-idx-1001348-1"
></A
></DT
><DD
CLASS="listitem"
><P
CLASS="para"
>Transfers the contents of the source repository directly to the target repository.</P
></DD
></DL
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch05-SECT-15.0.10"
>5.15.10 <A
CLASS="indexterm"
NAME="ch05-idx-1001349-0"
></A
>Tracing PLVio activity</A
></H3
><DL
CLASS="variablelist"
><DT
CLASS="term"
><CODE
CLASS="literal"
> PROCEDURE display;</CODE
></DT
><DD
CLASS="listitem"
><P
CLASS="para"
>Requests that PLVio actions be displayed as they occur.</P
></DD
><DT
CLASS="term"
><CODE
CLASS="literal"
> PROCEDURE nodisplay;</CODE
></DT
><DD
CLASS="listitem"
><P
CLASS="para"
>Requests that PLVio actions not be displayed as they occur.</P
></DD
><DT
CLASS="term"
><CODE
CLASS="literal"
> FUNCTION displaying RETURN BOOLEAN;</CODE
></DT
><DD
CLASS="listitem"
><P
CLASS="para"
>Returns TRUE if PLVio is displaying its actions.</P
></DD
></DL
></DIV
></DIV
><DIV
CLASS="htmlnav"
><P
></P
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch05_14.htm#ch05-SECT-14.0.3"
TITLE="5.14 PLVhlp: Online Help Architechture"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 5.14 PLVhlp: Online Help Architechture"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="book"
HREF="index.htm"
TITLE="Advanced Oracle PL/SQL Programming with Packages"
><IMG
SRC="../gifs/txthome.gif"
ALT="Advanced Oracle PL/SQL Programming with Packages"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch05_16.htm#ch05-SECT-16.0.1"
TITLE="5.16 PLVlex: Lexical Analysis"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 5.16 PLVlex: Lexical Analysis"
BORDER="0"></A
></TD
></TR
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
>5.14 PLVhlp: Online Help Architechture</TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="index"
HREF="index/idx_0.htm"
TITLE="Book Index"
><IMG
SRC="../gifs/index.gif"
ALT="Book Index"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
>5.16 PLVlex: Lexical Analysis</TD
></TR
></TABLE
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"></DIV
><IMG
SRC="../gifs/smnavbar.gif"
USEMAP="#map"
BORDER="0"
ALT="The Oracle Library Navigation">

<P><font size="-1">
<a href="../copyrght.htm#copy">Copyright (c) 2000</a> O'Reilly & Associates. All rights reserved.
</font></P>

<MAP NAME="map">

<AREA SHAPE="RECT"
COORDS="0,0,35,30"
HREF="../index.htm"
ALT="Library Home">

<AREA SHAPE="RECT"
COORDS="40,0,95,30"
HREF="../prog2/index.htm"
ALT="Oracle PL/SQL Programming, 2nd. Ed.">

<AREA SHAPE="RECT"
COORDS="100,0,200,30"
HREF="../guide8i/index.htm"
ALT="Guide to Oracle 8i Features">

<AREA SHAPE="RECT"
COORDS="205,0,245,30"
HREF="../bipack/index.htm"
ALT="Oracle Built-in Packages">

<AREA SHAPE="RECT"
COORDS="250,0,320,30"
HREF="index.htm"
ALT="Advanced PL/SQL Programming with Packages">

<AREA SHAPE="RECT"
COORDS="325,0,420,30"
HREF="../webapp/index.htm"
ALT="Oracle Web Applications">

<AREA SHAPE="RECT"
COORDS="425,0,490,30"
HREF="../langpkt/index.htm"
ALT="Oracle PL/SQL Language Pocket Reference">

<AREA SHAPE="RECT"
COORDS="495,0,570,30"
HREF="../bipkt/index.htm"
ALT="Oracle PL/SQL Built-ins Pocket Reference">
</MAP>
</BODY
>
<!-- Mirrored from liso.cs.pusan.ac.kr by HTTrack Website Copier/3.x [XR&CO'2001] -->
</HTML
>
