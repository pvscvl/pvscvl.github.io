<HTML
><HEAD
><TITLE
>[Chapter 10] 10.3 PLVprsps: Parsing PL/SQL Strings</TITLE
><META
NAME="DC.Creator"
CONTENT="Steven Feuerstein"><META
NAME="DC.Date"
CONTENT="2000-04-29T18:27:14Z"><META
NAME="DC.Format"
CONTENT="text/html"
SCHEME="MIME"><META
NAME="DC.Identifier"
CONTENT="O'Reilly and Associates-1-56592-238-7E"><META
NAME="DC.Language"
CONTENT="en-US"><META
NAME="DC.Publisher"
CONTENT="O'Reilly &amp; Associates, Inc."><META
NAME="DC.Source"
CONTENT="1-56592-238-7E"
SCHEME="ISBN"><META
NAME="DC.Subject.Keyword"
CONTENT="PL/SQL SQL Oracle Packages"><META
NAME="DC.Title"
CONTENT="Advanced Oracle PL/SQL Programming with Packages"><META
NAME="DC.Type"
CONTENT="Text.Monograph"><META
NAME="generator"
CONTENT="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><LINK
REL="stylesheet"
TYPE="text/css"
HREF="../style/style1.css"><LINK
REV="made"
HREF="mailto:online-books@oreilly.com"
TITLE="Online Books Comments"><LINK
REL="up"
HREF="ch10_01.htm"
TITLE="10. PLVprs, PLVtkn, and PLVprsps: Parsing Strings"><LINK
REL="prev"
HREF="ch10_02.htm#ch10-SECT-2.3"
TITLE="10.2 PLVtkn: Managing PL/SQL Tokens"><LINK
REL="next"
HREF="ch11_01.htm"
TITLE="11.  PLVobj: A Packaged Interface to ALL_OBJECTS"></HEAD>
<BODY><DIV CLASS="htmlnav"
><H1
><IMG
SRC="gifs/smbanner.gif"
ALT="Advanced Oracle PL/SQL Programming with Packages"
USEMAP="#srchmap"
BORDER="0"></H1
><MAP
NAME="srchmap"
><AREA
SHAPE="RECT"
COORDS="0,0,466,65"
HREF="index.htm"
ALT="Advanced Oracle PL/SQL Programming with Packages"><AREA
SHAPE="RECT"
COORDS="467,0,514,18"
HREF="jobjects/fsearch.htm"
ALT="Search this book"></MAP
><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch10_02.htm#ch10-SECT-2.3"
TITLE="10.2 PLVtkn: Managing PL/SQL Tokens"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 10.2 PLVtkn: Managing PL/SQL Tokens"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><SPAN
CLASS="NAVTITLE"
><A
CLASS="chapter"
REL="up"
HREF="ch10_01.htm"
TITLE="10. PLVprs, PLVtkn, and PLVprsps: Parsing Strings"
>Chapter 10<BR>PLVprs, PLVtkn, and PLVprsps: Parsing Strings</A
></SPAN
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="chapter"
HREF="ch11_01.htm"
TITLE="11.  PLVobj: A Packaged Interface to ALL_OBJECTS"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 11.  PLVobj: A Packaged Interface to ALL_OBJECTS"
BORDER="0"></A
></TD
></TR
></TABLE
>&nbsp;<HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"></DIV
><DIV
CLASS="sect1"
><H2
CLASS="sect1"
><A
CLASS="title"
NAME="ch10-16339"
>10.3 PLVprsps: Parsing PL/SQL Strings</A
></H2
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="ch10-idx-998744-0"
></A
>The PLVprsps (PL/Vision PaRSe) <SPAN
CLASS="acronym"
>PL/SQL</SPAN
> package builds upon all the other string parsing and analyzing packages to provide easy-to-use, high-level programs to parse <SPAN
CLASS="acronym"
>PL/SQL</SPAN
> strings and programs. The parsed output is passed back into a <SPAN
CLASS="acronym"
>PL/SQL</SPAN
> table you provide in your calls to PLVprs modules. You can then work with the contents of the <SPAN
CLASS="acronym"
>PL/SQL</SPAN
> table as you see fit.</P
><P
CLASS="para"
>This parsing process separates <SPAN
CLASS="acronym"
>PL/SQL</SPAN
> code into individual atomics, which can then be used for any of the following purposes:</P
><UL
CLASS="itemizedlist"
><LI
CLASS="listitem"
><P
CLASS="para"
>Analyze the contents of a <SPAN
CLASS="acronym"
>PL/SQL</SPAN
> program. What programs are defined in the package? Are any variables not being used?</P
></LI
><LI
CLASS="listitem"
><P
CLASS="para"
>Reformat or pretty-print the <SPAN
CLASS="acronym"
>PL/SQL</SPAN
> program. Once the atomics are separated, you can put them back together however you want and end up with the same program (as long as you preserve the <EM
CLASS="emphasis"
>order</EM
> of the atomics).</P
></LI
></UL
><P
CLASS="para"
>The PLVprsps package offers several different levels of parsing programs (parse a string, parse a line, parse a program). With PLVprsps, you can also specify precisely which type of language elements you want to return in your parse. </P
><P
CLASS="para"
>The following sections show how to use the different elements of PLVprsps.</P
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch10-SECT-3.1"
>10.3.1 Selecting Token Types for Parsing</A
></H3
><P
CLASS="para"
>One of the users of PLVprsps is the PLVcat package<A
CLASS="indexterm"
NAME="ch10-idx-998745-0"
></A
> (described in <A
CLASS="xref"
HREF="ch18_01.htm"
>Chapter 18, <CITE
CLASS="chapter"
>PLVcase and PLVcat: Converting and Analyzing PL/SQL Code</CITE
></A
>), which catalogues the contents and usage of <SPAN
CLASS="acronym"
>PL/SQL</SPAN
> program units. You could ask, for example, to generate a list of those builtins which are used by a particular program. Or you could request to see only those nonkeyword references, which would give you the list of all application-specific identifiers in your code.</P
><P
CLASS="para"
>The way PLVcat is able to offer this flexibility is by offering you the ability in PLVprsps to request that the output from a call to the parsing programs (<KBD
CLASS="command"
>plsql_string</KBD
> or <KBD
CLASS="command"
>module</KBD
>) return only certain kinds of tokens. The different types currently recognized by PLVprsps are:</P
><UL
CLASS="itemizedlist"
><LI
CLASS="listitem"
><P
CLASS="para"
>Any keywords</P
></LI
><LI
CLASS="listitem"
><P
CLASS="para"
>Builtin functions, procedures, and packages</P
></LI
><LI
CLASS="listitem"
><P
CLASS="para"
>Application-specific identifiers (non-keyword identifiers)</P
></LI
><LI
CLASS="listitem"
><P
CLASS="para"
>All tokens</P
></LI
></UL
><P
CLASS="para"
>For each of these token types, PLVprsps offers toggles<A
CLASS="indexterm"
NAME="ch10-idx-998746-0"
></A
> so that you direct the package to keep only the tokens in which you are interested. These are the "keep" and "nokeep" programs. The headers for these programs are:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>PROCEDURE keep_all;
PROCEDURE keep_kw;
PROCEDURE keep_nonkw;
PROCEDURE keep_bi;

PROCEDURE nokeep_all;
PROCEDURE nokeep_kw;
PROCEDURE nokeep_nonkw;
PROCEDURE nokeep_bi;</PRE
></BLOCKQUOTE
><P
CLASS="para"
>So if I wanted to keep builtins and non-keywords when I perform my parse, I would issue these two calls:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>PLVprsps.keep_nonkw;
PLVprsps.keep_bi;</PRE
></BLOCKQUOTE
><P
CLASS="para"
>All keywords which are not builtins would, therefore, be discarded in the parse. You would not see such atomics as IF and =.</P
><P
CLASS="para"
>If, on the other hand, I want to obtain all non-keywords, but reject all keywords in the parse, I would call these two programs:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>PLVprsps.keep_nonkw;
PLVprsps.nokeep_kw;</PRE
></BLOCKQUOTE
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch10-SECT-3.2"
>10.3.2 Parsing PL/SQL Code</A
></H3
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="ch10-idx-998747-0"
></A
><A
CLASS="indexterm"
NAME="ch10-idx-998747-1"
></A
><A
CLASS="indexterm"
NAME="ch10-idx-998747-2"
></A
>PLVprsps offers two programs for <SPAN
CLASS="acronym"
>PL/SQL</SPAN
> source code parsing: <KBD
CLASS="command"
>plsql_string</KBD
> and <KBD
CLASS="command"
>module</KBD
>. The <KBD
CLASS="command"
>plsql_string</KBD
> procedure parses the string passed to it. The <KBD
CLASS="command"
>module</KBD
> procedure parses all the lines of code for a specified program&nbsp;-- by calling the <KBD
CLASS="command"
>plsql_string</KBD
> program for each line in that program. Both of these programs are explained below.</P
><DIV
CLASS="sect3"
><H4
CLASS="sect3"
><A
CLASS="title"
NAME="ch10-SECT-3.2.1"
>10.3.2.1 plsql_string procedure<A
CLASS="indexterm"
NAME="ch10-idx-998748-0"
></A
></A
></H4
><P
CLASS="para"
>The header for <KBD
CLASS="command"
>plsql_string</KBD
> is:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>PROCEDURE plsql_string
   (line_in IN VARCHAR2,
    tokens_out IN OUT PLVtab.vc2000_table,
    num_tokens_out IN OUT INTEGER,
    in_multiline_comment_out IN OUT BOOLEAN);</PRE
></BLOCKQUOTE
><P
CLASS="para"
>The <KBD
CLASS="command"
>line_in</KBD
> argument is the line of code to be parsed. The <KBD
CLASS="command"
>tokens_out</KBD
> <SPAN
CLASS="acronym"
>PL/SQL</SPAN
> table holds the distinct tokens found in the line. The <KBD
CLASS="command"
>num_tokens_out</KBD
> argument indicates the number of tokens found and in the <SPAN
CLASS="acronym"
>PL/SQL</SPAN
> table. The <KBD
CLASS="command"
>in_multiline_comment_out</KBD
> argument returns TRUE if the line of code has initiated or is part of a multiline comment block. You should initialize this IN OUT argument to FALSE to make sure that the parsing is performed as expected.</P
><P
CLASS="para"
>Comments<A
CLASS="indexterm"
NAME="ch10-idx-998749-0"
></A
> are not considered atomics for the purposes of parsing. The comment text is parsed but never written to the <SPAN
CLASS="acronym"
>PL/SQL</SPAN
> table. For this reason, all of the following strings will be parsed into precisely the same set of tokens:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>v_err := 'ORA-' || TO_CHAR (SQLERRM);
v_err := 'ORA-' || /* Concatenate! */ TO_CHAR (SQLERRM);
/* ASSIGN VALUE */ v_err := 'ORA-' || TO_CHAR (SQLERRM);
*/ v_err := 'ORA-' || TO_CHAR (SQLERRM);
v_err := 'ORA-' || TO_CHAR (SQLERRM); -- end of line</PRE
></BLOCKQUOTE
><P
CLASS="para"
>In all of these cases, the last argument of <KBD
CLASS="command"
>plsql_string</KBD
> will be returned as FALSE. The same set of tokens will be returned with the following string as well, but in this case the last argument of <KBD
CLASS="command"
>plsql_string</KBD
> will be returned as TRUE since a multiline comment block has been started:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>v_err := 'ORA-' || TO_CHAR (SQLERRM); /* big comment coming:</PRE
></BLOCKQUOTE
></DIV
><DIV
CLASS="sect3"
><H4
CLASS="sect3"
><A
CLASS="title"
NAME="ch10-SECT-3.2.2"
>10.3.2.2 Script to test plsql_string</A
></H4
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="ch10-idx-998750-0"
></A
>The anonymous block shown below (and found in file <KBD
CLASS="command"
>PLVprsps.tst</KBD
>) illustrates how to set up variables and then call the <KBD
CLASS="command"
>plsql_string</KBD
> program. It also uses <KBD
CLASS="command"
>PLVtab.display</KBD
> to easily show the contents of my <SPAN
CLASS="acronym"
>PL/SQL</SPAN
> table of tokens.</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>DECLARE
   full_string VARCHAR2(100)
       := 'v_err := ''ORA-'' || TO_CHAR (SQLERRM)';
   strings PLVtab.vc2000_table;
   num INTEGER := 1;
   incmnt BOOLEAN := FALSE;
BEGIN
   p.l (full_string);
   PLVprsps.plsql_string (full_string, strings, num, incmnt);
   PLVtab.display (strings, num);
   p.l (incmnt);
END;
/</PRE
></BLOCKQUOTE
><P
CLASS="para"
>Here are the results from an execution of the test script:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>SQL&gt; start PLVprsps.tst
v_err := 'ORA-' || TO_CHAR (SQLERRM)
Contents of Table
v_err
:=
'ORA-'
||
TO_CHAR
(
SQLERRM
)
FALSE</PRE
></BLOCKQUOTE
></DIV
><DIV
CLASS="sect3"
><H4
CLASS="sect3"
><A
CLASS="title"
NAME="ch10-SECT-3.2.3"
>10.3.2.3 module procedure<A
CLASS="indexterm"
NAME="ch10-idx-998751-0"
></A
></A
></H4
><P
CLASS="para"
>Use <KBD
CLASS="command"
>PLVprsps.module</KBD
> to parse an entire module or <SPAN
CLASS="acronym"
>PL/SQL</SPAN
> program unit. The <KBD
CLASS="command"
>module</KBD
> procedure is overloaded in the following two versions:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>PROCEDURE module
   (module_in IN VARCHAR2 := NULL, 
    tokens_out IN OUT PLVtab.vc2000_table,
    num_tokens_out IN OUT INTEGER);

PROCEDURE module
   (tokens_out IN OUT PLVtab.vc2000_table,
    num_tokens_out IN OUT INTEGER);</PRE
></BLOCKQUOTE
><P
CLASS="para"
>In the first version, you provide the name of the module that you wish to parse and the data structures that will be filled with the parsed tokens: a <SPAN
CLASS="acronym"
>PL/SQL</SPAN
> table and a count of the rows filled. In the second version, you simply supply the <SPAN
CLASS="acronym"
>PL/SQL</SPAN
> table and the variable to hold the number of tokens. This version of <KBD
CLASS="command"
>module</KBD
> assumes that you have already set the current object with a call to <KBD
CLASS="command"
>PLVobj.setcurr</KBD
>. </P
><P
CLASS="para"
>The three-argument version of <KBD
CLASS="command"
>module</KBD
> simply calls the two-argument version as shown below:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>PROCEDURE module
   (module_in IN VARCHAR2 := NULL, 
    tokens_out IN OUT PLVtab.vc2000_table,
    num_tokens_out IN OUT INTEGER)
IS
BEGIN
   PLVobj.setcurr (module_in);
   module (tokens_out, num_tokens_out);
END;</PRE
></BLOCKQUOTE
></DIV
><DIV
CLASS="sect3"
><H4
CLASS="sect3"
><A
CLASS="title"
NAME="ch10-SECT-3.2.4"
>10.3.2.4 Implementing a module parser</A
></H4
><P
CLASS="para"
>The two-argument version of <KBD
CLASS="command"
>PLVprsps.module</KBD
> that assumes that the object has already been set is not much more complex than the one you see above. The reason that it is so straightforward is that it relies on the <KBD
CLASS="command"
>plsql_string</KBD
> program to parse each line of code. And it gets those lines of code by using the PLVio package. The implementation of <KBD
CLASS="command"
>module</KBD
> is shown below:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>PROCEDURE module
   (tokens_out IN OUT PLVtab.vc2000_table,
    num_tokens_out IN OUT INTEGER)
IS
   srcline PLVio.line_type;
   in_multiline_comment BOOLEAN := FALSE;
BEGIN
   init_table (tokens_out, num_tokens_out);
   PLVio.asrc;
   LOOP
      PLVio.get_line (srcline);
      EXIT WHEN srcline.eof;
      plsql_string 
         (srcline.text, tokens_out, num_tokens_out,
          in_multiline_comment);
   END LOOP;
END;</PRE
></BLOCKQUOTE
><P
CLASS="para"
>In the declaration section of the procedure, I declare a record to hold the line of code extracted with a call to the <KBD
CLASS="command"
>PLVio.get_line</KBD
> procedure. I also declare a Boolean variable, which is required for a call to <KBD
CLASS="command"
>plsql_string</KBD
>.</P
><P
CLASS="para"
>In the body of the procedure I first initialize the table that will hold the parsed tokens. Then I request reading of the source code from the ALL_SOURCE data dictionary view. Since I am going to read all of the lines of code in the specified program (assumed to be the current object in PLVobj), my call to <KBD
CLASS="command"
>PLVio.asrc</KBD
> does not have any arguments.</P
><P
CLASS="para"
>Now all I have to do is loop through the lines of code using the <KBD
CLASS="command"
>PLVio.get_line</KBD
> procedure. If I have not reached "end of file," I parse that string. Notice that I do not have to manually add the new parsed tokens to my table. The <KBD
CLASS="command"
>plsql_string</KBD
> program automatically places the new tokens in the rows after the current value of the <KBD
CLASS="command"
>num_tokens_out</KBD
> variable (that is why the third argument of <KBD
CLASS="command"
>plsql_string</KBD
> is an IN OUT parameter).</P
><P
CLASS="para"
>It is amazing how easy it can be to implement complex new functionality when you build upon preexisting elements.<A
CLASS="indexterm"
NAME="ch10-idx-998752-0"
></A
><A
CLASS="indexterm"
NAME="ch10-idx-998752-1"
></A
><A
CLASS="indexterm"
NAME="ch10-idx-998752-2"
></A
><A
CLASS="indexterm"
NAME="ch10-idx-998752-3"
></A
></P
></DIV
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch10-SECT-3.3"
>10.3.3 Initializing<A
CLASS="indexterm"
NAME="ch10-idx-998753-0"
></A
><A
CLASS="indexterm"
NAME="ch10-idx-998753-1"
></A
><A
CLASS="indexterm"
NAME="ch10-idx-998753-2"
></A
> a Table of Tokens</A
></H3
><P
CLASS="para"
>PLVprsps provides a program to initialize the <SPAN
CLASS="acronym"
>PL/SQL</SPAN
> table and row counter you will use to store parsed tokens. It is called by the <KBD
CLASS="command"
>module</KBD
> program; its header is shown below:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>PROCEDURE init_table<A
CLASS="indexterm"
NAME="ch10-idx-998754-0"
></A
>
   (tokens_out IN OUT PLVtab.vc2000_table,
    num_tokens_out IN OUT INTEGER);</PRE
></BLOCKQUOTE
><P
CLASS="para"
>At this time the <KBD
CLASS="command"
>init_table</KBD
> procedure does nothing more than assign an empty table to the <SPAN
CLASS="acronym"
>PL/SQL</SPAN
> table argument passed to it and set the row counter to 0. </P
><P
CLASS="para"
>Why bother building a program like <KBD
CLASS="command"
>init_table</KBD
>? There are two good reasons:</P
><UL
CLASS="itemizedlist"
><LI
CLASS="listitem"
><P
CLASS="para"
>By hiding this logic behind a programmatic interface, I make it easier to enhance this initialization process if the need arises in the future. If I rely on users to prepare the <SPAN
CLASS="acronym"
>PL/SQL</SPAN
> table to receive the parsed tokens, it will be very difficult for them to upgrade their own code to meet the new requirements of my package.</P
></LI
><LI
CLASS="listitem"
><P
CLASS="para"
>If the user can call <KBD
CLASS="command"
>init_table</KBD
>, she does not have to worry about the specific steps necessary to prepare the <SPAN
CLASS="acronym"
>PL/SQL</SPAN
> table. The individual steps are abstracted into a named action and taken care of by PLVprsps itself.</P
></LI
></UL
><P
CLASS="para"
>The <KBD
CLASS="command"
>init_table</KBD
> procedure is a gesture of respect for the users of PLVprsps. You don't have time to worry about insignificant details. Furthermore, you are much more likely to use PLVprsps if I offer this kind of feature.</P
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch10-SECT-3.4"
>10.3.4 Using PLVprsps</A
></H3
><P
CLASS="para"
>To give you a sense of how PLVprsps breaks apart <SPAN
CLASS="acronym"
>PL/SQL</SPAN
> code, let's see what it does with the following package body:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>PACKAGE BODY testcase
IS
   PROCEDURE save (string_in IN VARCHAR2)
   IS
      n INTEGER := DBMS_SQL.OPEN_CURSOR;
   BEGIN
      UPDATE PLV_output SET program = string_in;
      IF SQL%ROWCOUNT = 0
      THEN
         INSERT INTO PLV_output VALUES (string_in);
      END IF;
      PLVcmt.perform_commit;
   END;
END testcase;</PRE
></BLOCKQUOTE
><P
CLASS="para"
>This program has calls to builtins, as well as application-specific identifiers. Now take a look at the following script (found in <KBD
CLASS="command"
>modprs.sql</KBD
>). It takes two SQL*Plus arguments: the name of the program to be parsed and the type of tokens to retain and then display:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>DECLARE
   strings PLVtab.vc2000_table;
   num INTEGER := 1;
BEGIN
   PLVprsps.nokeep_all;
   PLVprsps.keep_&amp;2;
   PLVprsps.module ('&amp;1', strings, num);
   PLVtab.display (strings, num);
END;
/</PRE
></BLOCKQUOTE
><P
CLASS="para"
>Let's take a look at the output generated by different calls to this script. The first call to <KBD
CLASS="command"
>modprs</KBD
> requests the parse to display only builtins. The second call shows all those identifiers which are not keywords in the <SPAN
CLASS="acronym"
>PL/SQL</SPAN
> language.</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>SQL&gt; start modprs b:testcase bi
Contents of Table
DBMS_SQL.OPEN_CURSOR
UPDATE
ROWCOUNT
INSERT

SQL&gt; start modprs b:testcase nonkw
Contents of Table
testcase
save
string_in
n
PLV_output
program
string_in
PLV_output
string_in
PLVcmt.perform_commit
testcase</PRE
></BLOCKQUOTE
><DIV
CLASS="sidebar"
><H4
CLASS="sidebar"
><A
CLASS="title"
NAME="AUTOID-13056"
>Special Notes on PLVprsps</A
></H4
><P
CLASS="para"
>The current version always reads source code from the ALL_SOURCE data dictionary view. You cannot, in other words, parse <SPAN
CLASS="acronym"
>PL/SQL</SPAN
> code from operating system files (in PL/Vision Lite).<A
CLASS="indexterm"
NAME="ch10-idx-998755-0"
></A
><A
CLASS="indexterm"
NAME="ch10-idx-998755-1"
></A
></P
></DIV
></DIV
></DIV
><DIV
CLASS="htmlnav"
><P
></P
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch10_02.htm#ch10-SECT-2.3"
TITLE="10.2 PLVtkn: Managing PL/SQL Tokens"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 10.2 PLVtkn: Managing PL/SQL Tokens"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="book"
HREF="index.htm"
TITLE="Advanced Oracle PL/SQL Programming with Packages"
><IMG
SRC="../gifs/txthome.gif"
ALT="Advanced Oracle PL/SQL Programming with Packages"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="chapter"
HREF="ch11_01.htm"
TITLE="11.  PLVobj: A Packaged Interface to ALL_OBJECTS"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 11.  PLVobj: A Packaged Interface to ALL_OBJECTS"
BORDER="0"></A
></TD
></TR
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
>10.2 PLVtkn: Managing PL/SQL Tokens</TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="index"
HREF="index/idx_0.htm"
TITLE="Book Index"
><IMG
SRC="../gifs/index.gif"
ALT="Book Index"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
>11.  PLVobj: A Packaged Interface to ALL_OBJECTS</TD
></TR
></TABLE
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"></DIV
><IMG
SRC="../gifs/smnavbar.gif"
USEMAP="#map"
BORDER="0"
ALT="The Oracle Library Navigation">

<P><font size="-1">
<a href="../copyrght.htm#copy">Copyright (c) 2000</a> O'Reilly & Associates. All rights reserved.
</font></P>

<MAP NAME="map">

<AREA SHAPE="RECT"
COORDS="0,0,35,30"
HREF="../index.htm"
ALT="Library Home">

<AREA SHAPE="RECT"
COORDS="40,0,95,30"
HREF="../prog2/index.htm"
ALT="Oracle PL/SQL Programming, 2nd. Ed.">

<AREA SHAPE="RECT"
COORDS="100,0,200,30"
HREF="../guide8i/index.htm"
ALT="Guide to Oracle 8i Features">

<AREA SHAPE="RECT"
COORDS="205,0,245,30"
HREF="../bipack/index.htm"
ALT="Oracle Built-in Packages">

<AREA SHAPE="RECT"
COORDS="250,0,320,30"
HREF="index.htm"
ALT="Advanced PL/SQL Programming with Packages">

<AREA SHAPE="RECT"
COORDS="325,0,420,30"
HREF="../webapp/index.htm"
ALT="Oracle Web Applications">

<AREA SHAPE="RECT"
COORDS="425,0,490,30"
HREF="../langpkt/index.htm"
ALT="Oracle PL/SQL Language Pocket Reference">

<AREA SHAPE="RECT"
COORDS="495,0,570,30"
HREF="../bipkt/index.htm"
ALT="Oracle PL/SQL Built-ins Pocket Reference">
</MAP>
</BODY
>
<!-- Mirrored from liso.cs.pusan.ac.kr by HTTrack Website Copier/3.x [XR&CO'2001] -->
</HTML
>
