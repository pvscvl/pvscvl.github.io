<HTML
><HEAD
><TITLE
>[Chapter 13] 13.9 Handling File Errors with PLVfile</TITLE
><META
NAME="DC.Creator"
CONTENT="Steven Feuerstein"><META
NAME="DC.Date"
CONTENT="2000-04-29T18:28:17Z"><META
NAME="DC.Format"
CONTENT="text/html"
SCHEME="MIME"><META
NAME="DC.Identifier"
CONTENT="O'Reilly and Associates-1-56592-238-7E"><META
NAME="DC.Language"
CONTENT="en-US"><META
NAME="DC.Publisher"
CONTENT="O'Reilly &amp; Associates, Inc."><META
NAME="DC.Source"
CONTENT="1-56592-238-7E"
SCHEME="ISBN"><META
NAME="DC.Subject.Keyword"
CONTENT="PL/SQL SQL Oracle Packages"><META
NAME="DC.Title"
CONTENT="Advanced Oracle PL/SQL Programming with Packages"><META
NAME="DC.Type"
CONTENT="Text.Monograph"><META
NAME="generator"
CONTENT="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><LINK
REL="stylesheet"
TYPE="text/css"
HREF="../style/style1.css"><LINK
REV="made"
HREF="mailto:online-books@oreilly.com"
TITLE="Online Books Comments"><LINK
REL="up"
HREF="ch13_01.htm"
TITLE="13. PLVfile: Reading and Writing Operating System Files"><LINK
REL="prev"
HREF="ch13_08.htm"
TITLE="13.8 Displaying File Contents"><LINK
REL="next"
HREF="ch13_10.htm"
TITLE="13.10 Tracing PLVfile Activity"></HEAD>
<BODY><DIV CLASS="htmlnav"
><H1
><IMG
SRC="gifs/smbanner.gif"
ALT="Advanced Oracle PL/SQL Programming with Packages"
USEMAP="#srchmap"
BORDER="0"></H1
><MAP
NAME="srchmap"
><AREA
SHAPE="RECT"
COORDS="0,0,466,65"
HREF="index.htm"
ALT="Advanced Oracle PL/SQL Programming with Packages"><AREA
SHAPE="RECT"
COORDS="467,0,514,18"
HREF="jobjects/fsearch.htm"
ALT="Search this book"></MAP
><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch13_08.htm"
TITLE="13.8 Displaying File Contents"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 13.8 Displaying File Contents"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><SPAN
CLASS="NAVTITLE"
><A
CLASS="chapter"
REL="up"
HREF="ch13_01.htm"
TITLE="13. PLVfile: Reading and Writing Operating System Files"
>Chapter 13<BR>PLVfile: Reading and Writing Operating System Files</A
></SPAN
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch13_10.htm"
TITLE="13.10 Tracing PLVfile Activity"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 13.10 Tracing PLVfile Activity"
BORDER="0"></A
></TD
></TR
></TABLE
>&nbsp;<HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"></DIV
><DIV
CLASS="sect1"
><H2
CLASS="sect1"
><A
CLASS="title"
NAME="ch13-22860"
>13.9 Handling File Errors with PLVfile</A
></H2
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="ch13-idx-998518-0"
></A
><A
CLASS="indexterm"
NAME="ch13-idx-998518-1"
></A
>Many different errors can occur when you are attempting to read and write files. A file may not have been opened when you try to read it, or you may have opened it in read-only status and tried to write to it, and so on. When the <SPAN
CLASS="acronym"
>PL/SQL</SPAN
> runtime engine detects a problem, it raises one of the system exceptions (NO_DATA_FOUND and VALUE_ERROR) or one of the package-specific exceptions (such as UTL_FILE.READ_ERROR). The package-specific exceptions are user-defined, which means that if you check the SQLCODE return value in a WHEN OTHERS exception section, you see the value 1. This information is not very useful for debugging purposes.</P
><P
CLASS="para"
>The current version of PLVfile does attempt to trap the appropriate UTL_FILE exceptions in some of its programs (see the implementations of <KBD
CLASS="command"
>fcreate</KBD
>, <KBD
CLASS="command"
>fopen</KBD
>, and <KBD
CLASS="command"
>get_line</KBD
>, among others). It also provides a sample program which has an exception section handling each of the package-specific exceptions. </P
><P
CLASS="para"
>This procedure, <KBD
CLASS="command"
>exc_section</KBD
><A
CLASS="indexterm"
NAME="ch13-idx-998519-0"
></A
>, is not intended to be executed as it is written. Instead, you should cut the exception section from this procedure and paste it into your own program. You will then be able to trap, identify, and respond to the specific errors raised when using the UTL_FILE package.</P
><P
CLASS="para"
>To show how to use this block of code, suppose that the exception section consists only of these lines:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>EXCEPTION
   WHEN UTL_FILE.INVALID_PATH
   THEN
      PLVexc.recNstop ('Invalid path');
   WHEN OTHERS
   THEN
      PLVexc.recNstop (SQLCODE);
END;</PRE
></BLOCKQUOTE
><P
CLASS="para"
>In other words, if the <A
CLASS="indexterm"
NAME="ch13-idx-998520-0"
></A
><A
CLASS="indexterm"
NAME="ch13-idx-998520-1"
></A
>INVALID_PATH exception is raised, the PLVexc program records the problem and then raises an exception to stop the process. For any other error, the SQLCODE is saved with the error information and program execution halts.</P
><P
CLASS="para"
>I then build the following procedure to read the first line from a file and display that line.</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>PROCEDURE checkitout (file_in IN VARCHAR2)
IS
   aline PLVfile.max_line%TYPE;
BEGIN
   aline := PLVfile.line (file_in, 1);
   p.l (aline);
END;</PRE
></BLOCKQUOTE
><P
CLASS="para"
>When I run the program, I keep getting unhandled exceptions. Since I do not check for any specific exceptions, the <SPAN
CLASS="acronym"
>PL/SQL</SPAN
> runtime engine simply informs me that a user-defined exception occurred. It is very difficult for me to figure out what is going on. So I paste in the exception section provided by PLVfile and then I have:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>PROCEDURE checkitout (file_in IN VARCHAR2)
IS
   aline PLVfile.max_line%TYPE;
BEGIN
   aline := PLVfile.line (file_in, 1);
   p.l (aline);
EXCEPTION
   WHEN UTL_FILE.INVALID_PATH
   THEN
      PLVexc.recNstop ('Invalid path');
   WHEN OTHERS
   THEN
      PLVexc.recNstop (SQLCODE);
END;</PRE
></BLOCKQUOTE
><P
CLASS="para"
>Now when the program executes, the message "Invalid path" appears on my screen. I immediately realize that I have not called the <KBD
CLASS="command"
>PLVfile.set_dir</KBD
> to set my default directory and so my file open step is failing.</P
><P
CLASS="para"
>In the real world you will find yourself adding an exception section with eight different handlers so you can distinguish between all the different errors. This adds many lines to your programs, but it is worth it when you have to debug your file I/O activity. In addition, since it is predefined for you in PLVfile, you do not have to personally do a whole lot of work to get the benefit. </P
><P
CLASS="para"
>This standard exception section is defined in the package body within the <KBD
CLASS="command"
>exc_section</KBD
> procedure, but it is also included as a help text stub under the topic EXC_SECTION in the package specification. So you can at any time execute the following line to display the exception section:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>SQL&gt; exec PLVfile.help ('exceptions');<A
CLASS="indexterm"
NAME="ch13-idx-998522-0"
></A
><A
CLASS="indexterm"
NAME="ch13-idx-998522-1"
></A
></PRE
></BLOCKQUOTE
></DIV
><DIV
CLASS="htmlnav"
><P
></P
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch13_08.htm"
TITLE="13.8 Displaying File Contents"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 13.8 Displaying File Contents"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="book"
HREF="index.htm"
TITLE="Advanced Oracle PL/SQL Programming with Packages"
><IMG
SRC="../gifs/txthome.gif"
ALT="Advanced Oracle PL/SQL Programming with Packages"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch13_10.htm"
TITLE="13.10 Tracing PLVfile Activity"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 13.10 Tracing PLVfile Activity"
BORDER="0"></A
></TD
></TR
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
>13.8 Displaying File Contents</TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="index"
HREF="index/idx_0.htm"
TITLE="Book Index"
><IMG
SRC="../gifs/index.gif"
ALT="Book Index"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
>13.10 Tracing PLVfile Activity</TD
></TR
></TABLE
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"></DIV
><IMG
SRC="../gifs/smnavbar.gif"
USEMAP="#map"
BORDER="0"
ALT="The Oracle Library Navigation">

<P><font size="-1">
<a href="../copyrght.htm#copy">Copyright (c) 2000</a> O'Reilly & Associates. All rights reserved.
</font></P>

<MAP NAME="map">

<AREA SHAPE="RECT"
COORDS="0,0,35,30"
HREF="../index.htm"
ALT="Library Home">

<AREA SHAPE="RECT"
COORDS="40,0,95,30"
HREF="../prog2/index.htm"
ALT="Oracle PL/SQL Programming, 2nd. Ed.">

<AREA SHAPE="RECT"
COORDS="100,0,200,30"
HREF="../guide8i/index.htm"
ALT="Guide to Oracle 8i Features">

<AREA SHAPE="RECT"
COORDS="205,0,245,30"
HREF="../bipack/index.htm"
ALT="Oracle Built-in Packages">

<AREA SHAPE="RECT"
COORDS="250,0,320,30"
HREF="index.htm"
ALT="Advanced PL/SQL Programming with Packages">

<AREA SHAPE="RECT"
COORDS="325,0,420,30"
HREF="../webapp/index.htm"
ALT="Oracle Web Applications">

<AREA SHAPE="RECT"
COORDS="425,0,490,30"
HREF="../langpkt/index.htm"
ALT="Oracle PL/SQL Language Pocket Reference">

<AREA SHAPE="RECT"
COORDS="495,0,570,30"
HREF="../bipkt/index.htm"
ALT="Oracle PL/SQL Built-ins Pocket Reference">
</MAP>
</BODY
>
<!-- Mirrored from liso.cs.pusan.ac.kr by HTTrack Website Copier/3.x [XR&CO'2001] -->
</HTML
>
