<HTML
><HEAD
><TITLE
>[Chapter 3] 3.12 Obliterating the Literals</TITLE
><META
NAME="DC.Creator"
CONTENT="Steven Feuerstein"><META
NAME="DC.Date"
CONTENT="2000-04-29T18:23:12Z"><META
NAME="DC.Format"
CONTENT="text/html"
SCHEME="MIME"><META
NAME="DC.Identifier"
CONTENT="O'Reilly and Associates-1-56592-238-7E"><META
NAME="DC.Language"
CONTENT="en-US"><META
NAME="DC.Publisher"
CONTENT="O'Reilly &amp; Associates, Inc."><META
NAME="DC.Source"
CONTENT="1-56592-238-7E"
SCHEME="ISBN"><META
NAME="DC.Subject.Keyword"
CONTENT="PL/SQL SQL Oracle Packages"><META
NAME="DC.Title"
CONTENT="Advanced Oracle PL/SQL Programming with Packages"><META
NAME="DC.Type"
CONTENT="Text.Monograph"><META
NAME="generator"
CONTENT="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><LINK
REL="stylesheet"
TYPE="text/css"
HREF="../style/style1.css"><LINK
REV="made"
HREF="mailto:online-books@oreilly.com"
TITLE="Online Books Comments"><LINK
REL="up"
HREF="ch03_01.htm"
TITLE="3. The PL/SQL Development Spiral"><LINK
REL="prev"
HREF="ch03_11.htm"
TITLE="3.11 Don't Forget Backward Compatibility"><LINK
REL="next"
HREF="ch03_13.htm"
TITLE="3.13 Glancing Backward, Looking Upward"></HEAD>
<BODY><DIV CLASS="htmlnav"
><H1
><IMG
SRC="gifs/smbanner.gif"
ALT="Advanced Oracle PL/SQL Programming with Packages"
USEMAP="#srchmap"
BORDER="0"></H1
><MAP
NAME="srchmap"
><AREA
SHAPE="RECT"
COORDS="0,0,466,65"
HREF="index.htm"
ALT="Advanced Oracle PL/SQL Programming with Packages"><AREA
SHAPE="RECT"
COORDS="467,0,514,18"
HREF="jobjects/fsearch.htm"
ALT="Search this book"></MAP
><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch03_11.htm"
TITLE="3.11 Don't Forget Backward Compatibility"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 3.11 Don't Forget Backward Compatibility"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><SPAN
CLASS="NAVTITLE"
><A
CLASS="chapter"
REL="up"
HREF="ch03_01.htm"
TITLE="3. The PL/SQL Development Spiral"
>Chapter 3<BR>The PL/SQL Development Spiral</A
></SPAN
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch03_13.htm"
TITLE="3.13 Glancing Backward, Looking Upward"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 3.13 Glancing Backward, Looking Upward"
BORDER="0"></A
></TD
></TR
></TABLE
>&nbsp;<HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"></DIV
><DIV
CLASS="sect1"
><H2
CLASS="sect1"
><A
CLASS="title"
NAME="ch03-30055"
>3.12 Obliterating the Literals</A
></H2
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="ch03-idx-999813-0"
></A
><A
CLASS="indexterm"
NAME="ch03-idx-999813-1"
></A
>There are still two things that bother me about the <I
CLASS="function"
>repeated</I
> function: first, the function is not defined in a package and, second, a user of repeated has to know the correct literals to pass to it to get the right kind of conversion action. On general principles, I believe that everything built in <SPAN
CLASS="acronym"
>PL/SQL</SPAN
> should be placed inside a package. This construct is the cornerstone of programming in the <SPAN
CLASS="acronym"
>PL/SQL</SPAN
> language and offers many advantages, explored in detail throughout this book. My second concern about literals can be answered by creating a package&nbsp;-- so I will show you how to convert the standalone <KBD
CLASS="command"
>repeated</KBD
> function into a package. </P
><P
CLASS="para"
>I do not believe that a user of my code should have to remember the specific characters to pass in a string literal. Is it <I
CLASS="function"
>UL</I
> or <I
CLASS="function"
>BS</I
>? Is it <I
CLASS="function"
>n</I
> for "no action" or <I
CLASS="function"
>l</I
> for "leave alone"? With the function as implemented throughout this chapter, there is no way for a developer to know <EM
CLASS="emphasis"
>at compile time</EM
> if she called <I
CLASS="function"
>repeated</I
> properly. </P
><P
CLASS="para"
>Beyond this difficulty, applications the world over would be much better off if their creators avoided the use of <A
CLASS="indexterm"
NAME="ch03-idx-999814-0"
></A
>hard-coded literals in their code. Every time the <I
CLASS="function"
>repeated</I
> function is called, some string literal is being hard-coded into a program. If the <I
CLASS="function"
>repeated</I
> function is ever modified to expand the scope of action and different literals are used, all those other programs could go haywire. A much better approach would provide <EM
CLASS="emphasis"
>named constants</EM
> in place of the hard-coded strings so that (a) at compile time a developer would know if the call to the function is correct and (b) the actual string values for the action codes can be hidden from view&nbsp;-- and changed as often as is necessary.</P
><P
CLASS="para"
>The best way (really, the only way) to create named constants for use throughout a <SPAN
CLASS="acronym"
>PL/SQL</SPAN
> application is to put these constants&nbsp;-- and the code with which they are used&nbsp;-- into a package. The <I
CLASS="function"
>stg</I
> package shown in <A
CLASS="xref"
HREF="ch03_12.htm"
>Example 3.11</A
> offers the same functionality as the repeated function, with the additional benefit of named constants. Now instead of having a standalone repeated function, I have a <I
CLASS="function"
>dup</I
> function in the <I
CLASS="function"
>stg</I
> package, and the following constants:</P
><DL
CLASS="variablelist"
><DT
CLASS="term"
><I
CLASS="function"
>stg.ul</I
></DT
><DD
CLASS="listitem"
><P
CLASS="para"
>Indicates that you want UPPER-lower case conversion</P
></DD
><DT
CLASS="term"
><I
CLASS="function"
>stg.lu</I
></DT
><DD
CLASS="listitem"
><P
CLASS="para"
>Indicates that you want lower-UPPER case conversion</P
></DD
><DT
CLASS="term"
><I
CLASS="function"
>stg.n</I
></DT
><DD
CLASS="listitem"
><P
CLASS="para"
>Indicates that you do not want any case conversion</P
></DD
></DL
><P
CLASS="para"
>So when I want to duplicate or repeat the string "abc" 10 times with UPPER-lower conversion, I would execute this statement:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>stg.dup ('abc', stg.ul, 10);</PRE
></BLOCKQUOTE
><P
CLASS="para"
>By referencing the <I
CLASS="function"
>stg.ul</I
> constant, I can verify at compile time that I am using a valid action code for case conversion.</P
><P
CLASS="para"
>Notice that I have placed the <I
CLASS="function"
>dup</I
> function within a very generic string package. I do this to anticipate future requirements for string processing. By creating this package, I have established a repository in which I can place other, related functions and procedures as I think of them. All will be called with the "stg" prefix, indicating that they are oriented to string processing.</P
><DIV
CLASS="example"
><H4
CLASS="example"
><A
CLASS="title"
NAME="ch03-21084"
>Example 3.11: A Duplicate String Package </A
></H4
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>CREATE OR REPLACE PACKAGE stg
IS
   lu CONSTANT VARCHAR2(1) := 'A';
   ul CONSTANT VARCHAR2(1) := 'B';
   n  CONSTANT VARCHAR2(1) := 'X';

   FUNCTION dup 
      (stg_in IN VARCHAR2, 
       action_in IN VARCHAR2 := n,
       num_in IN INTEGER := 1)
   RETURN VARCHAR2;
END stg;
/        
CREATE OR REPLACE PACKAGE BODY stg
IS
   FUNCTION dup
      (string_in IN VARCHAR2, 
       action_in IN VARCHAR2 DEFAULT n,
       num_in IN INTEGER := 1)
   RETURN VARCHAR2
   IS
      v_action VARCHAR2(10) := UPPER (action_in);  
      initval VARCHAR2(32767);
      nextval VARCHAR2(32767); 
      v_retval VARCHAR2(32767);
      
   BEGIN
      assert
         (v_action IN (lu, ul, n),
          'Please use the package constants: ul, lu or n');
      assert
         (num_in &gt;= 0, 'Duplication count must be at least 0.');

      IF v_action = ul
      THEN
         initval := UPPER (string_in);   
         nextval := LOWER (string_in);

      ELSIF v_action = lu
      THEN
         initval := LOWER (string_in);      
         nextval := UPPER (string_in);

      ELSE
         initval := string_in;      
         nextval := string_in;
      END IF; 

      v_retval := 
         RPAD (initval, LENGTH (string_in) * (num_in+1), nextval);

      RETURN v_retval;         
   END dup;
END stg;
/<A
CLASS="indexterm"
NAME="ch03-idx-999819-0"
></A
><A
CLASS="indexterm"
NAME="ch03-idx-999819-1"
></A
></PRE
></BLOCKQUOTE
></DIV
></DIV
><DIV
CLASS="htmlnav"
><P
></P
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch03_11.htm"
TITLE="3.11 Don't Forget Backward Compatibility"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 3.11 Don't Forget Backward Compatibility"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="book"
HREF="index.htm"
TITLE="Advanced Oracle PL/SQL Programming with Packages"
><IMG
SRC="../gifs/txthome.gif"
ALT="Advanced Oracle PL/SQL Programming with Packages"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch03_13.htm"
TITLE="3.13 Glancing Backward, Looking Upward"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 3.13 Glancing Backward, Looking Upward"
BORDER="0"></A
></TD
></TR
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
>3.11 Don't Forget Backward Compatibility</TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="index"
HREF="index/idx_0.htm"
TITLE="Book Index"
><IMG
SRC="../gifs/index.gif"
ALT="Book Index"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
>3.13 Glancing Backward, Looking Upward</TD
></TR
></TABLE
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"></DIV
><IMG
SRC="../gifs/smnavbar.gif"
USEMAP="#map"
BORDER="0"
ALT="The Oracle Library Navigation">

<P><font size="-1">
<a href="../copyrght.htm#copy">Copyright (c) 2000</a> O'Reilly & Associates. All rights reserved.
</font></P>

<MAP NAME="map">

<AREA SHAPE="RECT"
COORDS="0,0,35,30"
HREF="../index.htm"
ALT="Library Home">

<AREA SHAPE="RECT"
COORDS="40,0,95,30"
HREF="../prog2/index.htm"
ALT="Oracle PL/SQL Programming, 2nd. Ed.">

<AREA SHAPE="RECT"
COORDS="100,0,200,30"
HREF="../guide8i/index.htm"
ALT="Guide to Oracle 8i Features">

<AREA SHAPE="RECT"
COORDS="205,0,245,30"
HREF="../bipack/index.htm"
ALT="Oracle Built-in Packages">

<AREA SHAPE="RECT"
COORDS="250,0,320,30"
HREF="index.htm"
ALT="Advanced PL/SQL Programming with Packages">

<AREA SHAPE="RECT"
COORDS="325,0,420,30"
HREF="../webapp/index.htm"
ALT="Oracle Web Applications">

<AREA SHAPE="RECT"
COORDS="425,0,490,30"
HREF="../langpkt/index.htm"
ALT="Oracle PL/SQL Language Pocket Reference">

<AREA SHAPE="RECT"
COORDS="495,0,570,30"
HREF="../bipkt/index.htm"
ALT="Oracle PL/SQL Built-ins Pocket Reference">
</MAP>
</BODY
>
<!-- Mirrored from liso.cs.pusan.ac.kr by HTTrack Website Copier/3.x [XR&CO'2001] -->
</HTML
>
