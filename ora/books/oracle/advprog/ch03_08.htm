<HTML
><HEAD
><TITLE
>[Chapter 3] 3.8 Broadening the Scope</TITLE
><META
NAME="DC.Creator"
CONTENT="Steven Feuerstein"><META
NAME="DC.Date"
CONTENT="2000-04-29T18:23:06Z"><META
NAME="DC.Format"
CONTENT="text/html"
SCHEME="MIME"><META
NAME="DC.Identifier"
CONTENT="O'Reilly and Associates-1-56592-238-7E"><META
NAME="DC.Language"
CONTENT="en-US"><META
NAME="DC.Publisher"
CONTENT="O'Reilly &amp; Associates, Inc."><META
NAME="DC.Source"
CONTENT="1-56592-238-7E"
SCHEME="ISBN"><META
NAME="DC.Subject.Keyword"
CONTENT="PL/SQL SQL Oracle Packages"><META
NAME="DC.Title"
CONTENT="Advanced Oracle PL/SQL Programming with Packages"><META
NAME="DC.Type"
CONTENT="Text.Monograph"><META
NAME="generator"
CONTENT="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><LINK
REL="stylesheet"
TYPE="text/css"
HREF="../style/style1.css"><LINK
REV="made"
HREF="mailto:online-books@oreilly.com"
TITLE="Online Books Comments"><LINK
REL="up"
HREF="ch03_01.htm"
TITLE="3. The PL/SQL Development Spiral"><LINK
REL="prev"
HREF="ch03_07.htm"
TITLE="3.7 Handling Program Assumptions"><LINK
REL="next"
HREF="ch03_09.htm"
TITLE="3.9 Considering Implementation Options"></HEAD>
<BODY><DIV CLASS="htmlnav"
><H1
><IMG
SRC="gifs/smbanner.gif"
ALT="Advanced Oracle PL/SQL Programming with Packages"
USEMAP="#srchmap"
BORDER="0"></H1
><MAP
NAME="srchmap"
><AREA
SHAPE="RECT"
COORDS="0,0,466,65"
HREF="index.htm"
ALT="Advanced Oracle PL/SQL Programming with Packages"><AREA
SHAPE="RECT"
COORDS="467,0,514,18"
HREF="jobjects/fsearch.htm"
ALT="Search this book"></MAP
><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch03_07.htm"
TITLE="3.7 Handling Program Assumptions"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 3.7 Handling Program Assumptions"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><SPAN
CLASS="NAVTITLE"
><A
CLASS="chapter"
REL="up"
HREF="ch03_01.htm"
TITLE="3. The PL/SQL Development Spiral"
>Chapter 3<BR>The PL/SQL Development Spiral</A
></SPAN
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch03_09.htm"
TITLE="3.9 Considering Implementation Options"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 3.9 Considering Implementation Options"
BORDER="0"></A
></TD
></TR
></TABLE
>&nbsp;<HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"></DIV
><DIV
CLASS="sect1"
><H2
CLASS="sect1"
><A
CLASS="title"
NAME="ch03-11635"
>3.8 Broadening the Scope</A
></H2
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="ch03-idx-999790-0"
></A
><A
CLASS="indexterm"
NAME="ch03-idx-999790-1"
></A
>Surely I am done with <I
CLASS="function"
>twice</I
> now. It is well structured, handles errors gracefully, and offers a reasonable amount of flexibility. It has come a long way from its original one-line version. So I would have to say that, yes indeed, I am done with <I
CLASS="function"
>twice</I
>. But a few days of programming go by and I encounter a very interesting requirement:</P
><TABLE
CLASS="simplelist"
BORDER="0"
><TR
><TD
CLASS="member"
><EM
CLASS="emphasis"
>Take a string and return it repeated it three times, not just twice!</EM
></TD
></TR
></TABLE
><P
CLASS="para"
>Of course, I instantly think of <I
CLASS="function"
>twice</I
> and how it would be very easy to create another function called <I
CLASS="function"
>thrice</I
> that performs an additional concatenation&nbsp;-- but that otherwise is unchanged. But then I take a coffee break and realize in my moment away from the screen (excellent thinking time&nbsp;-- I recommend it to all my readers!) that tomorrow I could run into a need for four repetitions and then five. The <I
CLASS="function"
>twice</I
> function is finished&nbsp;-- but only within its limited scope. What would be really great is a function that allows me to perform any number of duplications, as specified by the user. Now that would be a neat little function. So let's build it.</P
><P
CLASS="para"
>First of all, since I am going to let the user specify the number of repetitions, I will need to: (a) change the name of the function and (b) add a third parameter. Here is the new header for my new function:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>CREATE OR REPLACE FUNCTION repeated 
   (string_in IN VARCHAR2, 
    action_in IN VARCHAR2 DEFAULT 'N',
    num_in IN INTEGER := 1)   
RETURN VARCHAR2</PRE
></BLOCKQUOTE
><P
CLASS="para"
>The name of the function reflects its general utility. It returns a string repeated any number of times. The third parameter, <KBD
CLASS="command"
>num_in</KBD
>, indicates the number of times to repeat the string. Notice that the default is 1, which means a single repetition&nbsp;-- thereby matching the functionality of <I
CLASS="function"
>twice</I
>. Otherwise the parameter list is the same. </P
><P
CLASS="para"
>It probably won't take much thought on your part to realize two things about the implementation of <I
CLASS="function"
>repeated</I
>:</P
><OL
CLASS="orderedlist"
><LI
CLASS="listitem"
><P
CLASS="para"
>I can use a numeric FOR loop in a very straightforward way to create a string which repeats a substring N times.</P
></LI
><LI
CLASS="listitem"
><P
CLASS="para"
>The case conversion logic that applied itself so clearly in <I
CLASS="function"
>twice</I
> is less obvious now. If users specify UPPER-lower, do they want UPPER-lower-UPPER-lower or do they want UPPER-lower-lower-lower?</P
></LI
></OL
><P
CLASS="para"
>There is only one answer to this question: I don't know. A different user may want or expect a different outcome. As the creator of <KBD
CLASS="command"
>repeated</KBD
>, I can either build the function to handle both these two scenarios and other case conversion options, or simply decide that <I
CLASS="function"
>repeated</I
> will offer only one option.</P
><P
CLASS="para"
>In this chapter, I implement <I
CLASS="function"
>repeated</I
> in such a way that its case conversion is limited to applying the first half of the conversion to the input string and second half of the conversion to all the repetitions of that string. The following example shows what <I
CLASS="function"
>repeated</I
> will do:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>SQL&gt; exec DBMS_OUTPUT.PUT_LINE (repeated ('abc','UL',2));
ABCabcabc
SQL&gt; exec DBMS_OUTPUT.PUT_LINE (repeated ('abc','LU',2));
abcABCABC</PRE
></BLOCKQUOTE
><P
CLASS="para"
>I will leave it to my readers to come up with an implementation of <I
CLASS="function"
>repeated</I
> that offers other patterns (or all patterns).[<A
CLASS="footnote"
HREF="#ch03-pgfId-997058"
>3</A
>] The full implementation of <I
CLASS="function"
>repeated</I
> is shown in <A
CLASS="xref"
HREF="ch03_08.htm#ch03-SECT-8.1"
>Example 3.7</A
>. Here I step through that implementation.</P
><BLOCKQUOTE
CLASS="footnote"
><DIV
CLASS="footnote"
><P
CLASS="para"
><A
CLASS="footnote"
NAME="ch03-pgfId-997058"
>[3]</A
> Please send me your solutions at Compuserve 72053,441.</P
></DIV
></BLOCKQUOTE
><P
CLASS="para"
>The first thing I want to do in <I
CLASS="function"
>repeated</I
> is assert the validity of all of my assumptions. I have the same assumption for action that <I
CLASS="function"
>twice</I
> did, but I have another assumption as well: that the <KBD
CLASS="command"
>num_in</KBD
> argument will not be negative. So <I
CLASS="function"
>repeated</I
> will add this call to assert:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>assert
   (num_in &gt;= 0, 'Duplication count must be at least 0.');</PRE
></BLOCKQUOTE
><P
CLASS="para"
>Once I know that my arguments are all right, I can proceed to my algorithm. With my new approach to case conversion, I have two different kinds of strings for repetition: the initial string and the repetition string. The cases of these two strings need to be set separately (as you read this section, see if you can tell how <I
CLASS="function"
>twice</I
> is only a special case of this logic), based on the action code. I do this in the following IF statement:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>   IF v_action = 'UL'
   THEN
      initval := UPPER (string_in);   
      nextval := LOWER (string_in);
   ELSIF v_action = 'LU'
   THEN
      initval := LOWER (string_in);      
      nextval := UPPER (string_in);
   ELSE
      initval := string_in;      
      nextval := string_in;
   END IF; </PRE
></BLOCKQUOTE
><P
CLASS="para"
>Once I have set the initial and repetition (or next) strings, I can set the initial value for the return value and then use a FOR loop to generate the repeated string:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>   v_retval := initval;
   FOR dup_ind IN 1 .. num_in
   LOOP
      v_retval := v_retval || nextval;
   END LOOP;</PRE
></BLOCKQUOTE
><P
CLASS="para"
>And the return value variable is then ready to be RETURNed by the function.</P
><DIV
CLASS="example"
><H4
CLASS="example"
><A
CLASS="title"
NAME="ch03-26676"
>Example 3.7: The repeated Function </A
></H4
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>CREATE OR REPLACE FUNCTION repeated 
   (string_in IN VARCHAR2, 
    action_in IN VARCHAR2 DEFAULT 'N',
    num_in IN INTEGER := 1)   
RETURN VARCHAR2
IS
   v_action VARCHAR2(10) := UPPER (action_in);   
   initval VARCHAR2(32767);
   nextval VARCHAR2(32767); 
   v_retval VARCHAR2(32767) := string_in;
   
BEGIN
   assert
      (v_action IN ('UL', 'LU', 'N'),
       'Please enter UL LU or N');
   assert
      (num_in &gt;= 0,
       'Duplication count must be at least 0.');

   IF v_action = 'UL'
   THEN
      initval := UPPER (string_in);   
      nextval := LOWER (string_in);
   ELSIF v_action = 'LU'
   THEN
      initval := LOWER (string_in);      
      nextval := UPPER (string_in);
   ELSE
      initval := string_in;      
      nextval := string_in;
   END IF; 

   v_retval := initval;
   FOR dup_ind IN 1 .. num_in-1
   LOOP
      v_retval := v_retval || nextval;
   END LOOP;
   RETURN v_retval;
END duploop;
/</PRE
></BLOCKQUOTE
></DIV
><P
CLASS="para"
>Now that <I
CLASS="function"
>repeated</I
> is coded, let's walk through that code for some specific argument values to see if my logic holds up.</P
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch03-SECT-8.1"
>3.8.1 When the num_in Argument Is 0</A
></H3
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="ch03-idx-999794-0"
></A
><A
CLASS="indexterm"
NAME="ch03-idx-999794-1"
></A
><A
CLASS="indexterm"
NAME="ch03-idx-999794-2"
></A
>This is a <I
CLASS="firstterm"
>boundary check</I
>. Zero is the lowest allowable value for <KBD
CLASS="command"
>num_in</KBD
>. Any test case that lies on the boundary of a range of values is a prime candidate for failure. How often have you written an algorithm that works fine in general, but which breaks down exactly on the low or high end or another kind of special case that is perfectly valid?</P
><P
CLASS="para"
>When <KBD
CLASS="command"
>num_in</KBD
> is 0, the FOR loop does not execute even once. Therefore, the return value is set to the initial value and that is what is returned: the string passed in by the user, converted as specified, repeated zero times.</P
><P
CLASS="para"
>The <I
CLASS="function"
>repeated</I
> function checks out for <KBD
CLASS="command"
>num_in</KBD
> equal to 0. Of course, I should and do execute the function for this case as well, but the code walkthrough comes first. You should be able to deduce logically that your code runs fine before you run it. Here goes:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>SQL&gt; exec DBMS_OUTPUT.PUT_LINE (repeated ('abc','UL',0));
ABC</PRE
></BLOCKQUOTE
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch03-SECT-8.2"
>3.8.2 When string_in Is NULL</A
></H3
><P
CLASS="para"
>Another special case. The <I
CLASS="function"
>twice</I
> function handles it smoothly since NULL concatenated to NULL is still NULL. Will <I
CLASS="function"
>repeated</I
> act any differently? The answer is no. It might execute more concatenations, but it still will return NULL when a NULL string is passed to it for the first argument.</P
><P
CLASS="para"
>In addition to my code walkthroughs for these cases, I executed <I
CLASS="function"
>repeated</I
> for a variety of different inputs and it seems to work just fine. I now have a very generic function to generate string repetitions with case conversion.<A
CLASS="indexterm"
NAME="ch03-idx-999792-0"
></A
><A
CLASS="indexterm"
NAME="ch03-idx-999792-1"
></A
></P
></DIV
></DIV
><DIV
CLASS="htmlnav"
><P
></P
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch03_07.htm"
TITLE="3.7 Handling Program Assumptions"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 3.7 Handling Program Assumptions"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="book"
HREF="index.htm"
TITLE="Advanced Oracle PL/SQL Programming with Packages"
><IMG
SRC="../gifs/txthome.gif"
ALT="Advanced Oracle PL/SQL Programming with Packages"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch03_09.htm"
TITLE="3.9 Considering Implementation Options"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 3.9 Considering Implementation Options"
BORDER="0"></A
></TD
></TR
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
>3.7 Handling Program Assumptions</TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="index"
HREF="index/idx_0.htm"
TITLE="Book Index"
><IMG
SRC="../gifs/index.gif"
ALT="Book Index"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
>3.9 Considering Implementation Options</TD
></TR
></TABLE
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"></DIV
><IMG
SRC="../gifs/smnavbar.gif"
USEMAP="#map"
BORDER="0"
ALT="The Oracle Library Navigation">

<P><font size="-1">
<a href="../copyrght.htm#copy">Copyright (c) 2000</a> O'Reilly & Associates. All rights reserved.
</font></P>

<MAP NAME="map">

<AREA SHAPE="RECT"
COORDS="0,0,35,30"
HREF="../index.htm"
ALT="Library Home">

<AREA SHAPE="RECT"
COORDS="40,0,95,30"
HREF="../prog2/index.htm"
ALT="Oracle PL/SQL Programming, 2nd. Ed.">

<AREA SHAPE="RECT"
COORDS="100,0,200,30"
HREF="../guide8i/index.htm"
ALT="Guide to Oracle 8i Features">

<AREA SHAPE="RECT"
COORDS="205,0,245,30"
HREF="../bipack/index.htm"
ALT="Oracle Built-in Packages">

<AREA SHAPE="RECT"
COORDS="250,0,320,30"
HREF="index.htm"
ALT="Advanced PL/SQL Programming with Packages">

<AREA SHAPE="RECT"
COORDS="325,0,420,30"
HREF="../webapp/index.htm"
ALT="Oracle Web Applications">

<AREA SHAPE="RECT"
COORDS="425,0,490,30"
HREF="../langpkt/index.htm"
ALT="Oracle PL/SQL Language Pocket Reference">

<AREA SHAPE="RECT"
COORDS="495,0,570,30"
HREF="../bipkt/index.htm"
ALT="Oracle PL/SQL Built-ins Pocket Reference">
</MAP>
</BODY
>
<!-- Mirrored from liso.cs.pusan.ac.kr by HTTrack Website Copier/3.x [XR&CO'2001] -->
</HTML
>
