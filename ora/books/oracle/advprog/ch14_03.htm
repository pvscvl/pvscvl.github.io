<HTML
><HEAD
><TITLE
>[Chapter 14] 14.3 Retrieving and Displaying the Elapsed Time</TITLE
><META
NAME="DC.Creator"
CONTENT="Steven Feuerstein"><META
NAME="DC.Date"
CONTENT="2000-04-29T18:28:22Z"><META
NAME="DC.Format"
CONTENT="text/html"
SCHEME="MIME"><META
NAME="DC.Identifier"
CONTENT="O'Reilly and Associates-1-56592-238-7E"><META
NAME="DC.Language"
CONTENT="en-US"><META
NAME="DC.Publisher"
CONTENT="O'Reilly &amp; Associates, Inc."><META
NAME="DC.Source"
CONTENT="1-56592-238-7E"
SCHEME="ISBN"><META
NAME="DC.Subject.Keyword"
CONTENT="PL/SQL SQL Oracle Packages"><META
NAME="DC.Title"
CONTENT="Advanced Oracle PL/SQL Programming with Packages"><META
NAME="DC.Type"
CONTENT="Text.Monograph"><META
NAME="generator"
CONTENT="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><LINK
REL="stylesheet"
TYPE="text/css"
HREF="../style/style1.css"><LINK
REV="made"
HREF="mailto:online-books@oreilly.com"
TITLE="Online Books Comments"><LINK
REL="up"
HREF="ch14_01.htm"
TITLE="14. PLVtmr: Analyzing Program Performance"><LINK
REL="prev"
HREF="ch14_02.htm"
TITLE="14.2 Capturing the Start Time"><LINK
REL="next"
HREF="ch14_04.htm#ch14-SECT-4.1"
TITLE="14.4 Using PLVtmr in Scripts"></HEAD>
<BODY><DIV CLASS="htmlnav"
><H1
><IMG
SRC="gifs/smbanner.gif"
ALT="Advanced Oracle PL/SQL Programming with Packages"
USEMAP="#srchmap"
BORDER="0"></H1
><MAP
NAME="srchmap"
><AREA
SHAPE="RECT"
COORDS="0,0,466,65"
HREF="index.htm"
ALT="Advanced Oracle PL/SQL Programming with Packages"><AREA
SHAPE="RECT"
COORDS="467,0,514,18"
HREF="jobjects/fsearch.htm"
ALT="Search this book"></MAP
><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch14_02.htm"
TITLE="14.2 Capturing the Start Time"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 14.2 Capturing the Start Time"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><SPAN
CLASS="NAVTITLE"
><A
CLASS="chapter"
REL="up"
HREF="ch14_01.htm"
TITLE="14. PLVtmr: Analyzing Program Performance"
>Chapter 14<BR>PLVtmr: Analyzing Program Performance</A
></SPAN
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch14_04.htm#ch14-SECT-4.1"
TITLE="14.4 Using PLVtmr in Scripts"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 14.4 Using PLVtmr in Scripts"
BORDER="0"></A
></TD
></TR
></TABLE
>&nbsp;<HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"></DIV
><DIV
CLASS="sect1"
><H2
CLASS="sect1"
><A
CLASS="title"
NAME="ch14-34088"
>14.3 Retrieving and Displaying the Elapsed Time</A
></H2
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="ch14-idx-997551-0"
></A
><A
CLASS="indexterm"
NAME="ch14-idx-997551-1"
></A
>PLVtmr offers several different programs to retrieve and display the elapsed time: <KBD
CLASS="command"
>elapsed</KBD
>, <KBD
CLASS="command"
>elapsed_message</KBD
>, and <KBD
CLASS="command"
>show_elapsed</KBD
>. To get a non-<SPAN
CLASS="acronym"
>NULL</SPAN
> result from these programs, you must first have called the <KBD
CLASS="command"
>capture</KBD
> procedure. </P
><P
CLASS="para"
>The <KBD
CLASS="command"
>elapsed</KBD
><A
CLASS="indexterm"
NAME="ch14-idx-997552-0"
></A
> function returns the number of hundredths of seconds since the last call to <KBD
CLASS="command"
>capture</KBD
>. Its header is:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>FUNCTION elapsed RETURN NUMBER;</PRE
></BLOCKQUOTE
><P
CLASS="para"
>You will want to use <KBD
CLASS="command"
>elapsed</KBD
> when you wish to store the elapsed time, rather than display it, or when you wish to display it in a format not supported by the other programs of PLVtmr.</P
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch14-SECT-3.1"
>14.3.1 elapsed_message Function</A
></H3
><P
CLASS="para"
>The <KBD
CLASS="command"
>elapsed_message</KBD
><A
CLASS="indexterm"
NAME="ch14-idx-997553-0"
></A
><A
CLASS="indexterm"
NAME="ch14-idx-997553-1"
></A
> function returns the elapsed time displayed within a standard format that incorporates the iteration factor (see <A
CLASS="xref"
HREF="ch14_04.htm#ch14-SECT-4.1"
>Section 14.4, "Using PLVtmr in Scripts"</A
>). The header for <KBD
CLASS="command"
>elapsed_message</KBD
> follows:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>FUNCTION elapsed_message
   (prefix_in IN VARCHAR2 := NULL,
    adjust_in IN NUMBER := 0,
    reset_in IN BOOLEAN := TRUE,
    reset_context_in IN VARCHAR2 := NULL)
RETURN VARCHAR2;</PRE
></BLOCKQUOTE
><P
CLASS="para"
>The first argument, <KBD
CLASS="command"
>prefix_in</KBD
>, is another "context" string. In addition to the string provided in the call to <KBD
CLASS="command"
>capture</KBD
>, you can pass additional information to the PLVtmr package to display with the elapsed timing message. The value of the <KBD
CLASS="command"
>adjust_in</KBD
> argument allows you adjust or calibrate your timing with any overhead computations you may have made. The <KBD
CLASS="command"
>reset_in</KBD
> argument indicates whether or not the <KBD
CLASS="command"
>capture</KBD
> procedure should be called to "reset" the starting time of the next elapsed timing. The final argument, <KBD
CLASS="command"
>reset_context_in</KBD
>, provides a starting context for that reset call to <KBD
CLASS="command"
>capture</KBD
>.</P
><P
CLASS="para"
>Notice that default values are provided for every argument to <KBD
CLASS="command"
>elapsed_message</KBD
>. I can, therefore, execute it as simply as this:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>v_howmuch := PLVtmr.elapsed_message;</PRE
></BLOCKQUOTE
><P
CLASS="para"
>The impact of this call to <KBD
CLASS="command"
>elapsed_message</KBD
> will be to return a message that contains the elapsed time without any prefix string, unadjusted for any overhead, with the start time that is maintained by PLVtmr reset by a call to the <KBD
CLASS="command"
>PLVtmr.capture</KBD
> procedure.</P
><P
CLASS="para"
>If you want to obtain the elapsed timing information without automatically calling <KBD
CLASS="command"
>capture</KBD
> to reset the start time, pass FALSE for <KBD
CLASS="command"
>reset_in</KBD
> as shown below:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>v_howmuch := PLVtmr.elapsed_message (reset_in =&gt; FALSE);</PRE
></BLOCKQUOTE
><P
CLASS="para"
>This next call to <KBD
CLASS="command"
>elapsed_message</KBD
> supplies a full set of arguments:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>v_howmuch := PLVtmr.elapsed_message
                (TO_CHAR (v_empid), v_compcalc, TRUE, 'Profit Share');</PRE
></BLOCKQUOTE
><P
CLASS="para"
>In this call, a prefix of the current employee ID number is provided to be placed in the message string. The timing is also adjusted by the amount of time it took to calculate the compensation (<KBD
CLASS="command"
>v_compcalc</KBD
>). I request that <KBD
CLASS="command"
>capture</KBD
> be called to start the clock ticking again from a new start time. Finally, I associate the string "Profit Share" with the new timing session.</P
><P
CLASS="para"
>For examples of the format of the output from <KBD
CLASS="command"
>elapsed_message</KBD
>, see the next session on the <KBD
CLASS="command"
>show_elapsed</KBD
> procedure.</P
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch14-SECT-3.2"
>14.3.2 show_elapsed Procedure</A
></H3
><P
CLASS="para"
>The <KBD
CLASS="command"
>show_elapsed</KBD
><A
CLASS="indexterm"
NAME="ch14-idx-997554-0"
></A
> procedure is the highest-level mechanism for displayed elapsed timings. It relies on the DBMS_OUTPUT.PUT_LINE procedure (through the <KBD
CLASS="command"
>p</KBD
> package) to display the information. If you want to use another mechanism for displaying the elapsed timing (such as MESSAGE in Oracle Forms), you will simply call <KBD
CLASS="command"
>elapsed</KBD
> or <KBD
CLASS="command"
>elapsed_message</KBD
> and display that information.</P
><P
CLASS="para"
>The header for <KBD
CLASS="command"
>show_elapsed</KBD
> is:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>PROCEDURE show_elapsed
   (prefix_in IN VARCHAR2 := NULL,
    adjust_in IN NUMBER := 0,
    reset_in IN BOOLEAN := TRUE);</PRE
></BLOCKQUOTE
><P
CLASS="para"
>The first argument, <KBD
CLASS="command"
>prefix_in</KBD
>, is another "context" string. In addition to the string provided in the call to <KBD
CLASS="command"
>capture</KBD
>, you can pass additional information to the PLVtmr package to display with the elapsed timing message. The <KBD
CLASS="command"
>adjust_in</KBD
> value allows you adjust or calibrate your timing with any overhead computations you may have made. The <KBD
CLASS="command"
>reset_in</KBD
> argument indicates whether or not the <KBD
CLASS="command"
>capture</KBD
> procedure should be called to "reset" the starting time of the next elapsed timing. </P
><P
CLASS="para"
>As with <KBD
CLASS="command"
>elapsed_message</KBD
>, all arguments have defaults, so you can simply specify:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>PLVtmr.show_elapsed;</PRE
></BLOCKQUOTE
><P
CLASS="para"
>to see the number of hundredths of seconds elapsed since the last call to <KBD
CLASS="command"
>capture</KBD
> without any adjustment. You will also reset the start time.</P
><P
CLASS="para"
>The following SQL*Plus-based calls to the PLVtmr programs will give you a sense of the format used to display the timing information:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>SQL&gt; exec PLVtmr.capture ('calc totals');
SQL&gt; exec PLVtmr.show_elapsed;
Elapsed since calc totals: 5.28 seconds.
SQL&gt;  exec PLVtmr.capture ('calc totals');
SQL&gt;  exec PLVtmr.show_elapsed ('year 1995');
year 1995 Elapsed since calc totals: 9.45 seconds.</PRE
></BLOCKQUOTE
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch14-SECT-3.3"
>14.3.3 Setting the Timing Factor</A
></H3
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="ch14-idx-997557-0"
></A
><A
CLASS="indexterm"
NAME="ch14-idx-997557-1"
></A
>In many cases (and as demonstrated in <A
CLASS="xref"
HREF="ch14_04.htm#ch14-SECT-4.1"
>Section 14.4</A
>), you will want to calculate the performance of an element of code which executes very quickly. In order to gain a true sense of its performance, you will put this code inside a loop and execute it multiple times.</P
><P
CLASS="para"
>You can use the factoring programs of PLVtmr to tell PLVtmr the number of times you are executing your code. It will then factor that number into its presentation of elapsed time.</P
><P
CLASS="para"
>The factoring programs are as follows:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>PROCEDURE set_factor (factor_in IN NUMBER);
FUNCTION factor RETURN NUMBER;</PRE
></BLOCKQUOTE
><P
CLASS="para"
>The <KBD
CLASS="command"
>set_factor</KBD
><A
CLASS="indexterm"
NAME="ch14-idx-997555-0"
></A
> procedure sets the factoring value. The <KBD
CLASS="command"
>factor</KBD
><A
CLASS="indexterm"
NAME="ch14-idx-997556-0"
></A
> function returns the current setting. </P
><P
CLASS="para"
>Here is an example of how the use of the factoring value affects the output from the PLVtmr package:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>SQL&gt; exec PLVtmr.set_factor(100);
SQL&gt; exec PLVtmr.capture ('calc totals');
SQL&gt; exec PLVtmr.show_elapsed ('year 1995');
year 1995 Elapsed since calc totals: 3.79 seconds. Factored: .0379 seconds.</PRE
></BLOCKQUOTE
></DIV
></DIV
><DIV
CLASS="htmlnav"
><P
></P
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch14_02.htm"
TITLE="14.2 Capturing the Start Time"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 14.2 Capturing the Start Time"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="book"
HREF="index.htm"
TITLE="Advanced Oracle PL/SQL Programming with Packages"
><IMG
SRC="../gifs/txthome.gif"
ALT="Advanced Oracle PL/SQL Programming with Packages"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch14_04.htm#ch14-SECT-4.1"
TITLE="14.4 Using PLVtmr in Scripts"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 14.4 Using PLVtmr in Scripts"
BORDER="0"></A
></TD
></TR
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
>14.2 Capturing the Start Time</TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="index"
HREF="index/idx_0.htm"
TITLE="Book Index"
><IMG
SRC="../gifs/index.gif"
ALT="Book Index"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
>14.4 Using PLVtmr in Scripts</TD
></TR
></TABLE
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"></DIV
><IMG
SRC="../gifs/smnavbar.gif"
USEMAP="#map"
BORDER="0"
ALT="The Oracle Library Navigation">

<P><font size="-1">
<a href="../copyrght.htm#copy">Copyright (c) 2000</a> O'Reilly & Associates. All rights reserved.
</font></P>

<MAP NAME="map">

<AREA SHAPE="RECT"
COORDS="0,0,35,30"
HREF="../index.htm"
ALT="Library Home">

<AREA SHAPE="RECT"
COORDS="40,0,95,30"
HREF="../prog2/index.htm"
ALT="Oracle PL/SQL Programming, 2nd. Ed.">

<AREA SHAPE="RECT"
COORDS="100,0,200,30"
HREF="../guide8i/index.htm"
ALT="Guide to Oracle 8i Features">

<AREA SHAPE="RECT"
COORDS="205,0,245,30"
HREF="../bipack/index.htm"
ALT="Oracle Built-in Packages">

<AREA SHAPE="RECT"
COORDS="250,0,320,30"
HREF="index.htm"
ALT="Advanced PL/SQL Programming with Packages">

<AREA SHAPE="RECT"
COORDS="325,0,420,30"
HREF="../webapp/index.htm"
ALT="Oracle Web Applications">

<AREA SHAPE="RECT"
COORDS="425,0,490,30"
HREF="../langpkt/index.htm"
ALT="Oracle PL/SQL Language Pocket Reference">

<AREA SHAPE="RECT"
COORDS="495,0,570,30"
HREF="../bipkt/index.htm"
ALT="Oracle PL/SQL Built-ins Pocket Reference">
</MAP>
</BODY
>
<!-- Mirrored from liso.cs.pusan.ac.kr by HTTrack Website Copier/3.x [XR&CO'2001] -->
</HTML
>
