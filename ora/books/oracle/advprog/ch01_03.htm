<HTML
><HEAD
><TITLE
>[Chapter 1] 1.3 What Are the Benefits of Packages?</TITLE
><META
NAME="DC.Creator"
CONTENT="Steven Feuerstein"><META
NAME="DC.Date"
CONTENT="2000-04-29T18:21:07Z"><META
NAME="DC.Format"
CONTENT="text/html"
SCHEME="MIME"><META
NAME="DC.Identifier"
CONTENT="O'Reilly and Associates-1-56592-238-7E"><META
NAME="DC.Language"
CONTENT="en-US"><META
NAME="DC.Publisher"
CONTENT="O'Reilly &amp; Associates, Inc."><META
NAME="DC.Source"
CONTENT="1-56592-238-7E"
SCHEME="ISBN"><META
NAME="DC.Subject.Keyword"
CONTENT="PL/SQL SQL Oracle Packages"><META
NAME="DC.Title"
CONTENT="Advanced Oracle PL/SQL Programming with Packages"><META
NAME="DC.Type"
CONTENT="Text.Monograph"><META
NAME="generator"
CONTENT="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><LINK
REL="stylesheet"
TYPE="text/css"
HREF="../style/style1.css"><LINK
REV="made"
HREF="mailto:online-books@oreilly.com"
TITLE="Online Books Comments"><LINK
REL="up"
HREF="ch01_01.htm"
TITLE="1. PL/SQL Packages"><LINK
REL="prev"
HREF="ch01_02.htm#ch01-SECT-2.2"
TITLE="1.2 What Are the Types and Layers of Packages?"><LINK
REL="next"
HREF="ch01_04.htm#ch01-SECT-4.1"
TITLE="1.4 Using Packages"></HEAD>
<BODY><DIV CLASS="htmlnav"
><H1
><IMG
SRC="gifs/smbanner.gif"
ALT="Advanced Oracle PL/SQL Programming with Packages"
USEMAP="#srchmap"
BORDER="0"></H1
><MAP
NAME="srchmap"
><AREA
SHAPE="RECT"
COORDS="0,0,466,65"
HREF="index.htm"
ALT="Advanced Oracle PL/SQL Programming with Packages"><AREA
SHAPE="RECT"
COORDS="467,0,514,18"
HREF="jobjects/fsearch.htm"
ALT="Search this book"></MAP
><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch01_02.htm#ch01-SECT-2.2"
TITLE="1.2 What Are the Types and Layers of Packages?"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 1.2 What Are the Types and Layers of Packages?"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><SPAN
CLASS="NAVTITLE"
><A
CLASS="chapter"
REL="up"
HREF="ch01_01.htm"
TITLE="1. PL/SQL Packages"
>Chapter 1<BR>PL/SQL Packages</A
></SPAN
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch01_04.htm#ch01-SECT-4.1"
TITLE="1.4 Using Packages"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 1.4 Using Packages"
BORDER="0"></A
></TD
></TR
></TABLE
>&nbsp;<HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"></DIV
><DIV
CLASS="sect1"
><H2
CLASS="sect1"
><A
CLASS="title"
NAME="ch01-33228"
>1.3 What Are the Benefits of Packages?</A
></H2
><P
CLASS="para"
>Before exploring the architecture of packages and how best to build them, let's look at some of the most important benefits of the package.</P
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch01-SECT-3.1"
>1.3.1 Enforced Information Hiding</A
></H3
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="ch01-idx-999320-0"
></A
><A
CLASS="indexterm"
NAME="ch01-idx-999320-1"
></A
><A
CLASS="indexterm"
NAME="ch01-idx-999320-2"
></A
><A
CLASS="indexterm"
NAME="ch01-idx-999320-3"
></A
>When you build a package, you decide which of the package elements are public (can be referenced outside of the package) and which are <A
CLASS="indexterm"
NAME="ch01-idx-999332-0"
></A
><A
CLASS="indexterm"
NAME="ch01-idx-999332-1"
></A
>private (available only within the package itself). You also can restrict access to the package to only the specification. In this way, you use the package to hide the implementation details of your programs. This is most important when you want to isolate the most volatile aspects of your application, such as platform dependencies, frequently changing data structures, and temporary workarounds. </P
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch01-SECT-3.2"
>1.3.2 Object-Oriented Design</A
></H3
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="ch01-idx-999321-0"
></A
><A
CLASS="indexterm"
NAME="ch01-idx-999321-1"
></A
><A
CLASS="indexterm"
NAME="ch01-idx-999321-2"
></A
>While <SPAN
CLASS="acronym"
>PL/SQL</SPAN
> does not yet offer full object-oriented capabilities, packages do offer the ability to follow many object-oriented design principles. The package gives developers very tight control over how the modules and data structures inside the package can be accessed. </P
><P
CLASS="para"
>You can, therefore, embed all the rules about your entities (whether they are database tables or memory-based structures), and access to them, in the package. Since this is the only way to work with that entity, you have in essence created an abstracted and encapsulated object. </P
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch01-SECT-3.3"
>1.3.3 Top-Down Design</A
></H3
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="ch01-idx-999322-0"
></A
><A
CLASS="indexterm"
NAME="ch01-idx-999322-1"
></A
><A
CLASS="indexterm"
NAME="ch01-idx-999322-2"
></A
>A package's specification can be written before its body. You can, in other words, design the <I
CLASS="firstterm"
>interface</I
> to the code hidden in the package (the modules, their names, and their parameters) before you have actually implemented the modules themselves. This feature dovetails nicely with top-down design, in which you move from high-level requirements to functional decompositions to module calls. </P
><P
CLASS="para"
>Of course, you can design the names of standalone modules just as you can the names of packages and their modules. The big difference with the package specification is that you can compile it even without its body or implementation. Furthermore and most remarkably, programs that call packaged modules also compile successfully&nbsp;-- even if nothing more than the specification has been defined.</P
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch01-SECT-3.4"
>1.3.4 Object Persistence</A
></H3
><P
CLASS="para"
><SPAN
CLASS="acronym"
>PL/SQL</SPAN
><A
CLASS="indexterm"
NAME="ch01-idx-999323-0"
></A
><A
CLASS="indexterm"
NAME="ch01-idx-999323-1"
></A
><A
CLASS="indexterm"
NAME="ch01-idx-999323-2"
></A
><A
CLASS="indexterm"
NAME="ch01-idx-999323-3"
></A
> packages offer the ability to implement <I
CLASS="firstterm"
>global data</I
> in your application environment. Global data is information that persists across application components; it isn't just local to the current module. If you have designed screens with SQL*Forms or Oracle Forms, you are probably familiar with its GLOBAL variables, which allow you to pass information between screens. Those globals have many limitations (e.g., GLOBAL variables are always represented as fixed-length CHAR variables with a length of 254), but they sure can be useful. Package-based data gets around all these limitations.</P
><P
CLASS="para"
>Objects declared in a package specification (that is, visible to anyone with execute authority on that package) act as global data for all <SPAN
CLASS="acronym"
>PL/SQL</SPAN
> objects in the application. If you have access to the package, you can modify package variables in one module and then reference those changed variables in another module. This data persists for the duration of a user session (connection to the database). </P
><P
CLASS="para"
>And your global data doesn't consist merely of scalar data like numbers. If, for example, a packaged procedure opens a <A
CLASS="indexterm"
NAME="ch01-idx-999324-0"
></A
>cursor, that cursor remains open and is available to other packaged routines throughout the session. You do not have to explicitly define the cursor in each program. You can open it in one module and fetch it in another module.</P
><P
CLASS="para"
>Finally, package variables can carry data across the boundaries of transactions, since they are tied to the session itself and not to a transaction.</P
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch01-SECT-3.5"
>1.3.5 Guaranteeing Transaction Integrity</A
></H3
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="ch01-idx-999325-0"
></A
><A
CLASS="indexterm"
NAME="ch01-idx-999325-1"
></A
><A
CLASS="indexterm"
NAME="ch01-idx-999325-2"
></A
><A
CLASS="indexterm"
NAME="ch01-idx-999325-3"
></A
><A
CLASS="indexterm"
NAME="ch01-idx-999325-4"
></A
><A
CLASS="indexterm"
NAME="ch01-idx-999325-5"
></A
>The RDBMs and <SPAN
CLASS="acronym"
>SQL</SPAN
> language give you the ability to tightly control access to, and changes in, any particular table. With the GRANT command you can, for example, make sure that only certain roles and users have the ability to perform an UPDATE on a given table. But this GRANT statement cannot make sure that the UPDATEs performed by a user or application that affect multiple tables conform to all complex business rules.</P
><P
CLASS="para"
>In a typical banking transaction, for example, you might need to transfer funds from account A to account B. The balance of account B must be incremented, and that of account A decremented. Table access is necessary, but not sufficient, to guarantee that both of these steps are always performed by all programmers who write code to perform a transfer. With stored code in general, and packages in particular, you can guarantee that a funds transfer either completes successfully or is completely rolled back&nbsp;-- regardless of who executes the process.</P
><P
CLASS="para"
>The secret to achieving this level of transaction integrity is the <I
CLASS="firstterm"
>execute authority</I
> concept. Instead of granting the authority to update a table to a role or user, you grant privileges to that role/user only to <EM
CLASS="emphasis"
>execute a procedure</EM
>. This procedure controls and provides access to the underlying data structures. The procedure is owned by a separate Oracle RDBMs account, which, in turn, is granted the actual update privileges on those tables needed to perform the transaction. The procedure therefore becomes the gatekeeper for the transfer transaction. The only way a program (whether it is an Oracle Forms application or a Pro*C executable) can execute the transfer is through the procedure, thus guaranteeing transaction integrity.</P
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch01-SECT-3.6"
>1.3.6 Performance Improvement</A
></H3
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="ch01-idx-999326-0"
></A
>When an object in a package is referenced for the first time, the entire package (already compiled and validated) is loaded into memory (the System Global Area, or SGA, of the RDBMs). All other package elements are thereby made immediately available for future calls to the package. The <SPAN
CLASS="acronym"
>PL/SQL</SPAN
> runtime engine does not have to keep retrieving program elements or data from disk each time a new object is referenced.</P
><P
CLASS="para"
>This feature is especially important in a <A
CLASS="indexterm"
NAME="ch01-idx-999327-0"
></A
>distributed execution environment. You may reference packages from different databases across a local-area or even a wide-area network. You want to minimize the network traffic involved in executing your code.</P
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="ch01-idx-999328-0"
></A
>Packages also offer performance advantages on the development side, with a potential impact on overall database performance. The Oracle RDBMs automatically tracks the validity of all program objects (procedures, functions, packages) stored in the database. It determines what other objects that program is dependent on, such as tables. If a dependent object changes (for example, a table's structure changes), then all programs that rely on that object are flagged as invalid. The database then automatically recompiles these invalid programs when they are referenced next. </P
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="ch01-idx-999329-0"
></A
>You can limit the need for recompiles by placing functions and procedures inside packages. If program A calls packaged module B, it does so through the package's specification. As long as the specification of a packaged module does not change, any program that calls the module is not flagged as invalid and will not have to be recompiled. </P
><P
CLASS="para"
>This brief review of the benefits of packages should help focus your interest on this fascinating and powerful element of the <SPAN
CLASS="acronym"
>PL/SQL</SPAN
> language.</P
></DIV
></DIV
><DIV
CLASS="htmlnav"
><P
></P
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch01_02.htm#ch01-SECT-2.2"
TITLE="1.2 What Are the Types and Layers of Packages?"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 1.2 What Are the Types and Layers of Packages?"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="book"
HREF="index.htm"
TITLE="Advanced Oracle PL/SQL Programming with Packages"
><IMG
SRC="../gifs/txthome.gif"
ALT="Advanced Oracle PL/SQL Programming with Packages"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch01_04.htm#ch01-SECT-4.1"
TITLE="1.4 Using Packages"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 1.4 Using Packages"
BORDER="0"></A
></TD
></TR
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
>1.2 What Are the Types and Layers of Packages?</TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="index"
HREF="index/idx_0.htm"
TITLE="Book Index"
><IMG
SRC="../gifs/index.gif"
ALT="Book Index"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
>1.4 Using Packages</TD
></TR
></TABLE
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"></DIV
><IMG
SRC="../gifs/smnavbar.gif"
USEMAP="#map"
BORDER="0"
ALT="The Oracle Library Navigation">

<P><font size="-1">
<a href="../copyrght.htm#copy">Copyright (c) 2000</a> O'Reilly & Associates. All rights reserved.
</font></P>

<MAP NAME="map">

<AREA SHAPE="RECT"
COORDS="0,0,35,30"
HREF="../index.htm"
ALT="Library Home">

<AREA SHAPE="RECT"
COORDS="40,0,95,30"
HREF="../prog2/index.htm"
ALT="Oracle PL/SQL Programming, 2nd. Ed.">

<AREA SHAPE="RECT"
COORDS="100,0,200,30"
HREF="../guide8i/index.htm"
ALT="Guide to Oracle 8i Features">

<AREA SHAPE="RECT"
COORDS="205,0,245,30"
HREF="../bipack/index.htm"
ALT="Oracle Built-in Packages">

<AREA SHAPE="RECT"
COORDS="250,0,320,30"
HREF="index.htm"
ALT="Advanced PL/SQL Programming with Packages">

<AREA SHAPE="RECT"
COORDS="325,0,420,30"
HREF="../webapp/index.htm"
ALT="Oracle Web Applications">

<AREA SHAPE="RECT"
COORDS="425,0,490,30"
HREF="../langpkt/index.htm"
ALT="Oracle PL/SQL Language Pocket Reference">

<AREA SHAPE="RECT"
COORDS="495,0,570,30"
HREF="../bipkt/index.htm"
ALT="Oracle PL/SQL Built-ins Pocket Reference">
</MAP>
</BODY
>
<!-- Mirrored from liso.cs.pusan.ac.kr by HTTrack Website Copier/3.x [XR&CO'2001] -->
</HTML
>
