<HTML
><HEAD
><TITLE
>[Chapter 11] 11.6 Populating a PL/SQL Table with Object Names</TITLE
><META
NAME="DC.Creator"
CONTENT="Steven Feuerstein"><META
NAME="DC.Date"
CONTENT="2000-04-29T18:27:31Z"><META
NAME="DC.Format"
CONTENT="text/html"
SCHEME="MIME"><META
NAME="DC.Identifier"
CONTENT="O'Reilly and Associates-1-56592-238-7E"><META
NAME="DC.Language"
CONTENT="en-US"><META
NAME="DC.Publisher"
CONTENT="O'Reilly &amp; Associates, Inc."><META
NAME="DC.Source"
CONTENT="1-56592-238-7E"
SCHEME="ISBN"><META
NAME="DC.Subject.Keyword"
CONTENT="PL/SQL SQL Oracle Packages"><META
NAME="DC.Title"
CONTENT="Advanced Oracle PL/SQL Programming with Packages"><META
NAME="DC.Type"
CONTENT="Text.Monograph"><META
NAME="generator"
CONTENT="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><LINK
REL="stylesheet"
TYPE="text/css"
HREF="../style/style1.css"><LINK
REV="made"
HREF="mailto:online-books@oreilly.com"
TITLE="Online Books Comments"><LINK
REL="up"
HREF="ch11_01.htm"
TITLE="11.  PLVobj: A Packaged Interface to ALL_OBJECTS"><LINK
REL="prev"
HREF="ch11_05.htm"
TITLE="11.5 Binding Objects to a Dynamic Cursor"><LINK
REL="next"
HREF="ch11_07.htm"
TITLE="11.7 A Programmatic Cursor FOR Loop"></HEAD>
<BODY><DIV CLASS="htmlnav"
><H1
><IMG
SRC="gifs/smbanner.gif"
ALT="Advanced Oracle PL/SQL Programming with Packages"
USEMAP="#srchmap"
BORDER="0"></H1
><MAP
NAME="srchmap"
><AREA
SHAPE="RECT"
COORDS="0,0,466,65"
HREF="index.htm"
ALT="Advanced Oracle PL/SQL Programming with Packages"><AREA
SHAPE="RECT"
COORDS="467,0,514,18"
HREF="jobjects/fsearch.htm"
ALT="Search this book"></MAP
><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch11_05.htm"
TITLE="11.5 Binding Objects to a Dynamic Cursor"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 11.5 Binding Objects to a Dynamic Cursor"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><SPAN
CLASS="NAVTITLE"
><A
CLASS="chapter"
REL="up"
HREF="ch11_01.htm"
TITLE="11.  PLVobj: A Packaged Interface to ALL_OBJECTS"
>Chapter 11<BR> PLVobj: A Packaged Interface to ALL_OBJECTS</A
></SPAN
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch11_07.htm"
TITLE="11.7 A Programmatic Cursor FOR Loop"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 11.7 A Programmatic Cursor FOR Loop"
BORDER="0"></A
></TD
></TR
></TABLE
>&nbsp;<HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"></DIV
><DIV
CLASS="sect1"
><H2
CLASS="sect1"
><A
CLASS="title"
NAME="ch11-32286"
>11.6 Populating a PL/SQL Table with Object Names</A
></H2
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="ch11-idx-998826-0"
></A
><A
CLASS="indexterm"
NAME="ch11-idx-998826-1"
></A
><A
CLASS="indexterm"
NAME="ch11-idx-998826-2"
></A
><A
CLASS="indexterm"
NAME="ch11-idx-998826-3"
></A
><A
CLASS="indexterm"
NAME="ch11-idx-998826-4"
></A
>PLVobj provides a procedure to transfer the names of all objects identified by user input from the view into a <SPAN
CLASS="acronym"
>PL/SQL</SPAN
> table. This <KBD
CLASS="command"
>vu2pstab</KBD
> procedure's header is as follows:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>PROCEDURE vu2pstab
   (module_in IN VARCHAR2,
    table_out OUT PLVtab.vc2000_table,
    num_objects_inout IN OUT INTEGER);</PRE
></BLOCKQUOTE
><P
CLASS="para"
>The first argument, <KBD
CLASS="command"
>module_in</KBD
>, is the module specification. This can be a single module or, with wildcarding characters, a set of objects. The second argument, <KBD
CLASS="command"
>table_out</KBD
>, is the <SPAN
CLASS="acronym"
>PL/SQL</SPAN
> table that will hold the names of all identified objects. The final argument, <KBD
CLASS="command"
>num_objects_inout</KBD
>, contains the number of rows populated in the <SPAN
CLASS="acronym"
>PL/SQL</SPAN
> table (starting from row 1).</P
><P
CLASS="para"
>Use the <KBD
CLASS="command"
>vu2pstab</KBD
> procedure when you want to create a list of the objects which you can then use as the basis for one or more passes through the list to perform actions against the objects. This can be particularly important when you want to make use of different elements of PL/Vision which rely on PLVobj and a current object for processing. If these packages are nested, the outer loop that uses PLVobj can be affected or overridden by the inner usage.</P
><P
CLASS="para"
>The script <KBD
CLASS="command"
>showobj1.sql</KBD
> shown in a previous section used a simple loop to retrieve and display each of the objects specified by the SQL*Plus argument. That loop can be replaced by a call to <KBD
CLASS="command"
>vu2pstab</KBD
> and a call to <KBD
CLASS="command"
>PLVtab.display</KBD
> to show the contents of the table. This version of "show objects" (stored in the file <KBD
CLASS="command"
>showobj2.sql</KBD
>) is shown below:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>DECLARE
   objects PLVtab.vc2000_table;
   numobjs INTEGER;
BEGIN
   PLVobj.vu2pstab ('&amp;1', objects, numobjs);
   PLVtab.display (objects, numobjs);
END;
/</PRE
></BLOCKQUOTE
><P
CLASS="para"
>This is far less code than was required by the first version; the open, fetch, and close steps of the cursor manipulation are hidden behind the <KBD
CLASS="command"
>vu2pstab</KBD
> program. In this way, <KBD
CLASS="command"
>PLVobj.vu2pstab</KBD
> offers some of the flavor and code savings of a cursor FOR loop. The <KBD
CLASS="command"
>loopexec</KBD
> procedure covered in the next section, on the other hand, offers an even closer resemblance to the cursor FOR loop and is a very entertaining application of dynamic <SPAN
CLASS="acronym"
>PL/SQL</SPAN
> code execution. </P
></DIV
><DIV
CLASS="htmlnav"
><P
></P
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch11_05.htm"
TITLE="11.5 Binding Objects to a Dynamic Cursor"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 11.5 Binding Objects to a Dynamic Cursor"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="book"
HREF="index.htm"
TITLE="Advanced Oracle PL/SQL Programming with Packages"
><IMG
SRC="../gifs/txthome.gif"
ALT="Advanced Oracle PL/SQL Programming with Packages"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch11_07.htm"
TITLE="11.7 A Programmatic Cursor FOR Loop"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 11.7 A Programmatic Cursor FOR Loop"
BORDER="0"></A
></TD
></TR
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
>11.5 Binding Objects to a Dynamic Cursor</TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="index"
HREF="index/idx_0.htm"
TITLE="Book Index"
><IMG
SRC="../gifs/index.gif"
ALT="Book Index"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
>11.7 A Programmatic Cursor FOR Loop</TD
></TR
></TABLE
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"></DIV
><IMG
SRC="../gifs/smnavbar.gif"
USEMAP="#map"
BORDER="0"
ALT="The Oracle Library Navigation">

<P><font size="-1">
<a href="../copyrght.htm#copy">Copyright (c) 2000</a> O'Reilly & Associates. All rights reserved.
</font></P>

<MAP NAME="map">

<AREA SHAPE="RECT"
COORDS="0,0,35,30"
HREF="../index.htm"
ALT="Library Home">

<AREA SHAPE="RECT"
COORDS="40,0,95,30"
HREF="../prog2/index.htm"
ALT="Oracle PL/SQL Programming, 2nd. Ed.">

<AREA SHAPE="RECT"
COORDS="100,0,200,30"
HREF="../guide8i/index.htm"
ALT="Guide to Oracle 8i Features">

<AREA SHAPE="RECT"
COORDS="205,0,245,30"
HREF="../bipack/index.htm"
ALT="Oracle Built-in Packages">

<AREA SHAPE="RECT"
COORDS="250,0,320,30"
HREF="index.htm"
ALT="Advanced PL/SQL Programming with Packages">

<AREA SHAPE="RECT"
COORDS="325,0,420,30"
HREF="../webapp/index.htm"
ALT="Oracle Web Applications">

<AREA SHAPE="RECT"
COORDS="425,0,490,30"
HREF="../langpkt/index.htm"
ALT="Oracle PL/SQL Language Pocket Reference">

<AREA SHAPE="RECT"
COORDS="495,0,570,30"
HREF="../bipkt/index.htm"
ALT="Oracle PL/SQL Built-ins Pocket Reference">
</MAP>
</BODY
>
<!-- Mirrored from liso.cs.pusan.ac.kr by HTTrack Website Copier/3.x [XR&CO'2001] -->
</HTML
>
