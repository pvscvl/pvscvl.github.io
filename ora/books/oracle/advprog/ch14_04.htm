<HTML
><HEAD
><TITLE
>[Chapter 14] 14.4 Using PLVtmr in Scripts</TITLE
><META
NAME="DC.Creator"
CONTENT="Steven Feuerstein"><META
NAME="DC.Date"
CONTENT="2000-04-29T18:28:25Z"><META
NAME="DC.Format"
CONTENT="text/html"
SCHEME="MIME"><META
NAME="DC.Identifier"
CONTENT="O'Reilly and Associates-1-56592-238-7E"><META
NAME="DC.Language"
CONTENT="en-US"><META
NAME="DC.Publisher"
CONTENT="O'Reilly &amp; Associates, Inc."><META
NAME="DC.Source"
CONTENT="1-56592-238-7E"
SCHEME="ISBN"><META
NAME="DC.Subject.Keyword"
CONTENT="PL/SQL SQL Oracle Packages"><META
NAME="DC.Title"
CONTENT="Advanced Oracle PL/SQL Programming with Packages"><META
NAME="DC.Type"
CONTENT="Text.Monograph"><META
NAME="generator"
CONTENT="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><LINK
REL="stylesheet"
TYPE="text/css"
HREF="../style/style1.css"><LINK
REV="made"
HREF="mailto:online-books@oreilly.com"
TITLE="Online Books Comments"><LINK
REL="up"
HREF="ch14_01.htm"
TITLE="14. PLVtmr: Analyzing Program Performance"><LINK
REL="prev"
HREF="ch14_03.htm"
TITLE="14.3 Retrieving and Displaying the Elapsed Time"><LINK
REL="next"
HREF="ch15_01.htm"
TITLE="15. PLVvu: Viewing Source Code and Compile Errors"></HEAD>
<BODY><DIV CLASS="htmlnav"
><H1
><IMG
SRC="gifs/smbanner.gif"
ALT="Advanced Oracle PL/SQL Programming with Packages"
USEMAP="#srchmap"
BORDER="0"></H1
><MAP
NAME="srchmap"
><AREA
SHAPE="RECT"
COORDS="0,0,466,65"
HREF="index.htm"
ALT="Advanced Oracle PL/SQL Programming with Packages"><AREA
SHAPE="RECT"
COORDS="467,0,514,18"
HREF="jobjects/fsearch.htm"
ALT="Search this book"></MAP
><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch14_03.htm"
TITLE="14.3 Retrieving and Displaying the Elapsed Time"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 14.3 Retrieving and Displaying the Elapsed Time"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><SPAN
CLASS="NAVTITLE"
><A
CLASS="chapter"
REL="up"
HREF="ch14_01.htm"
TITLE="14. PLVtmr: Analyzing Program Performance"
>Chapter 14<BR>PLVtmr: Analyzing Program Performance</A
></SPAN
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="chapter"
HREF="ch15_01.htm"
TITLE="15. PLVvu: Viewing Source Code and Compile Errors"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 15. PLVvu: Viewing Source Code and Compile Errors"
BORDER="0"></A
></TD
></TR
></TABLE
>&nbsp;<HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"></DIV
><DIV
CLASS="sect1"
><H2
CLASS="sect1"
><A
CLASS="title"
NAME="ch14-25448"
>14.4 Using PLVtmr in Scripts</A
></H2
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="ch14-idx-997558-0"
></A
>In most situations, you will not place calls to PLVtmr inside your production code. Instead, you will extract specific elements of your application which you wish to focus on and understand their performance implications. You will usually write a SQL*Plus script that executes your code one or more times. If you do place the code within a loop, you should use the <KBD
CLASS="command"
>set_factor</KBD
> procedure to let PLVtmr know that it is timing multiple iterations of the code.</P
><P
CLASS="para"
>The following anonymous block, for example, calculates how long it takes to calculate totals. It also computes an average execution time over the specified number of iterations (passed in as a SQL*Plus argument) by calling the <KBD
CLASS="command"
>set_factor</KBD
> procedure:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
> BEGIN
    PLVtmr.set_factor (&amp;1);
    PLVtmr.capture;
    FOR rep IN 1 .. &amp;1
    LOOP
       calc_totals;
    END LOOP;
    PLVtmr.show_elapsed ('calc_totals');
 END;
 /</PRE
></BLOCKQUOTE
><P
CLASS="para"
>The PLVgen package will generate a loop like the one you see above. In fact, that script <EM
CLASS="emphasis"
>was</EM
> generated with the following call in SQL*Plus:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>SQL&gt; exec PLVgen.timer ('calc_totals');</PRE
></BLOCKQUOTE
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch14-SECT-4.1"
>14.4.1 Comparing Performance of Different Implementations</A
></H3
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="ch14-idx-997559-0"
></A
>Another common operation with PLVtmr is to compare two or more implementations of the same business rule or function. One example of this approach is shown below. In this script, I see which of my implementations of an "is number" function is most efficient. The first version is based on the TO_NUMBER builtin, while the second uses the LTRIM function.</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>SET SERVEROUTPUT ON
SET VERIFY OFF
DECLARE
   stg VARCHAR2(66) := '&amp;2';
   bool BOOLEAN;
BEGIN
   PLVtmr.capture;
   FOR i IN 1 .. &amp;1
   LOOP
      bool := isnum.tonumber (stg);
      IF i = 1 THEN do.pl(bool); END IF;
   END LOOP;
   PLVtmr.show_elapsed ('tonumber');

   PLVtmr.capture;
   FOR i IN 1 .. &amp;1
   LOOP
      bool := isnum.trim (stg);
      IF i = 1 THEN do.pl(bool); END IF;
   END LOOP;
   PLVtmr.show_elapsed ('trim');
END;
/</PRE
></BLOCKQUOTE
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch14-SECT-4.2"
>14.4.2 Calculating Overhead of an Action</A
></H3
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="ch14-idx-997560-0"
></A
>You can also use PLVtmr to calculate the overhead associated with a given operation. One example of this approach is shown by the <KBD
CLASS="command"
>func</KBD
><A
CLASS="indexterm"
NAME="ch14-idx-997561-0"
></A
> procedure of PLVtmr:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>PROCEDURE func
IS
   myval NUMBER;
   baseval NUMBER;
BEGIN
   PLVtmr.capture;
   FOR rep IN 1 .. v_repeats
   LOOP
      myval := 0;
   END LOOP;
   baseval := elapsed;
   PLVtmr.capture;
   FOR rep IN 1 .. v_repeats
   LOOP
      myval := numval;
   END LOOP;
   show_elapsed ('Function Overhead', baseval);
END;</PRE
></BLOCKQUOTE
><P
CLASS="para"
>In this procedure, I compute the overhead associated with calling a function (versus making a direct assignment). I execute two different loops the number of times specified by <KBD
CLASS="command"
>v_repeats</KBD
><A
CLASS="indexterm"
NAME="ch14-idx-997562-0"
></A
> (which is set by the <KBD
CLASS="command"
>set_repeats</KBD
> procedure). In the first loop I obtain a baseline in which an assignment is executed. Rather than display that value, I simply assign to a local variable, <KBD
CLASS="command"
>baseval</KBD
>. I then execute a loop in which the function is called in place of the assignment. When this loop is completed, I display the elapsed time, passing the <KBD
CLASS="command"
>baseval</KBD
> variable as the amount by which the total elapsed time should be adjusted.</P
><P
CLASS="para"
>Here is an example of an execution of the <KBD
CLASS="command"
>func</KBD
> procedure three times, each based on 10,000 iterations. It shows that you can expect to incur upwards of 1/2 of one-thousandth of a second to make a function call (this was on a Pentium 90 Mhz laptop).</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>SQL&gt; exec PLVtmr.set_repeats(10000);
SQL&gt; exec PLVtmr.func
Function Overhead Elapsed: 5.33 seconds. Factored: .00053 seconds.
SQL&gt; exec PLVtmr.func
Function Overhead Elapsed: 4.73 seconds. Factored: .00047 seconds.
SQL&gt; exec PLVtmr.func
Function Overhead Elapsed: 4.56 seconds. Factored: .00046 seconds.</PRE
></BLOCKQUOTE
><P
CLASS="para"
>In fact, PLVtmr offers a number of programs to perform these kinds of comparisons: <KBD
CLASS="command"
>calibrate</KBD
>, <KBD
CLASS="command"
>currsucc</KBD
>, <KBD
CLASS="command"
>currfail</KBD
>, and, of course, <KBD
CLASS="command"
>func</KBD
>. In all cases, when you use PLVtmr to analyze performance, you should execute your test multiple times to make sure that your results stabilize around a consistent answer.<A
CLASS="indexterm"
NAME="ch14-idx-997545-0"
></A
><A
CLASS="indexterm"
NAME="ch14-idx-997545-1"
></A
><A
CLASS="indexterm"
NAME="ch14-idx-997545-2"
></A
></P
></DIV
></DIV
><DIV
CLASS="htmlnav"
><P
></P
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch14_03.htm"
TITLE="14.3 Retrieving and Displaying the Elapsed Time"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 14.3 Retrieving and Displaying the Elapsed Time"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="book"
HREF="index.htm"
TITLE="Advanced Oracle PL/SQL Programming with Packages"
><IMG
SRC="../gifs/txthome.gif"
ALT="Advanced Oracle PL/SQL Programming with Packages"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="chapter"
HREF="ch15_01.htm"
TITLE="15. PLVvu: Viewing Source Code and Compile Errors"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 15. PLVvu: Viewing Source Code and Compile Errors"
BORDER="0"></A
></TD
></TR
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
>14.3 Retrieving and Displaying the Elapsed Time</TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="index"
HREF="index/idx_0.htm"
TITLE="Book Index"
><IMG
SRC="../gifs/index.gif"
ALT="Book Index"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
>15. PLVvu: Viewing Source Code and Compile Errors</TD
></TR
></TABLE
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"></DIV
><IMG
SRC="../gifs/smnavbar.gif"
USEMAP="#map"
BORDER="0"
ALT="The Oracle Library Navigation">

<P><font size="-1">
<a href="../copyrght.htm#copy">Copyright (c) 2000</a> O'Reilly & Associates. All rights reserved.
</font></P>

<MAP NAME="map">

<AREA SHAPE="RECT"
COORDS="0,0,35,30"
HREF="../index.htm"
ALT="Library Home">

<AREA SHAPE="RECT"
COORDS="40,0,95,30"
HREF="../prog2/index.htm"
ALT="Oracle PL/SQL Programming, 2nd. Ed.">

<AREA SHAPE="RECT"
COORDS="100,0,200,30"
HREF="../guide8i/index.htm"
ALT="Guide to Oracle 8i Features">

<AREA SHAPE="RECT"
COORDS="205,0,245,30"
HREF="../bipack/index.htm"
ALT="Oracle Built-in Packages">

<AREA SHAPE="RECT"
COORDS="250,0,320,30"
HREF="index.htm"
ALT="Advanced PL/SQL Programming with Packages">

<AREA SHAPE="RECT"
COORDS="325,0,420,30"
HREF="../webapp/index.htm"
ALT="Oracle Web Applications">

<AREA SHAPE="RECT"
COORDS="425,0,490,30"
HREF="../langpkt/index.htm"
ALT="Oracle PL/SQL Language Pocket Reference">

<AREA SHAPE="RECT"
COORDS="495,0,570,30"
HREF="../bipkt/index.htm"
ALT="Oracle PL/SQL Built-ins Pocket Reference">
</MAP>
</BODY
>
<!-- Mirrored from liso.cs.pusan.ac.kr by HTTrack Website Copier/3.x [XR&CO'2001] -->
</HTML
>
