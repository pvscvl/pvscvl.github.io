<HTML
><HEAD
><TITLE
>[Chapter 3] 3.4 Improving the User Interface</TITLE
><META
NAME="DC.Creator"
CONTENT="Steven Feuerstein"><META
NAME="DC.Date"
CONTENT="2000-04-29T18:22:59Z"><META
NAME="DC.Format"
CONTENT="text/html"
SCHEME="MIME"><META
NAME="DC.Identifier"
CONTENT="O'Reilly and Associates-1-56592-238-7E"><META
NAME="DC.Language"
CONTENT="en-US"><META
NAME="DC.Publisher"
CONTENT="O'Reilly &amp; Associates, Inc."><META
NAME="DC.Source"
CONTENT="1-56592-238-7E"
SCHEME="ISBN"><META
NAME="DC.Subject.Keyword"
CONTENT="PL/SQL SQL Oracle Packages"><META
NAME="DC.Title"
CONTENT="Advanced Oracle PL/SQL Programming with Packages"><META
NAME="DC.Type"
CONTENT="Text.Monograph"><META
NAME="generator"
CONTENT="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><LINK
REL="stylesheet"
TYPE="text/css"
HREF="../style/style1.css"><LINK
REV="made"
HREF="mailto:online-books@oreilly.com"
TITLE="Online Books Comments"><LINK
REL="up"
HREF="ch03_01.htm"
TITLE="3. The PL/SQL Development Spiral"><LINK
REL="prev"
HREF="ch03_03.htm"
TITLE="3.3 Supplying Backward Compatibility"><LINK
REL="next"
HREF="ch03_05.htm"
TITLE="3.5 Rough Waters Ahead"></HEAD>
<BODY><DIV CLASS="htmlnav"
><H1
><IMG
SRC="gifs/smbanner.gif"
ALT="Advanced Oracle PL/SQL Programming with Packages"
USEMAP="#srchmap"
BORDER="0"></H1
><MAP
NAME="srchmap"
><AREA
SHAPE="RECT"
COORDS="0,0,466,65"
HREF="index.htm"
ALT="Advanced Oracle PL/SQL Programming with Packages"><AREA
SHAPE="RECT"
COORDS="467,0,514,18"
HREF="jobjects/fsearch.htm"
ALT="Search this book"></MAP
><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch03_03.htm"
TITLE="3.3 Supplying Backward Compatibility"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 3.3 Supplying Backward Compatibility"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><SPAN
CLASS="NAVTITLE"
><A
CLASS="chapter"
REL="up"
HREF="ch03_01.htm"
TITLE="3. The PL/SQL Development Spiral"
>Chapter 3<BR>The PL/SQL Development Spiral</A
></SPAN
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch03_05.htm"
TITLE="3.5 Rough Waters Ahead"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 3.5 Rough Waters Ahead"
BORDER="0"></A
></TD
></TR
></TABLE
>&nbsp;<HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"></DIV
><DIV
CLASS="sect1"
><H2
CLASS="sect1"
><A
CLASS="title"
NAME="ch03-33733"
>3.4 Improving the User Interface</A
></H2
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="ch03-idx-999771-0"
></A
><A
CLASS="indexterm"
NAME="ch03-idx-999771-1"
></A
><A
CLASS="indexterm"
NAME="ch03-idx-999771-2"
></A
>A couple of weeks go by before I encounter another need for <I
CLASS="function"
>twice</I
>. Then I need to call it for lower-UPPER conversion on a company name. So I put this line in my program:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>v_full_name := twice (comp_rec.short_name, 'lu');</PRE
></BLOCKQUOTE
><P
CLASS="para"
>but when I execute the program, the full name is not in lower-UPPER format. It is all uppercased and, as I trace my way back to the data, that is just how the company short name is stored in the database. It doesn't seem to be doing any conversion at all.</P
><P
CLASS="para"
>Frustrated, I decide to head back to the source code. Of course, I can't remember where I stored the source code on disk. It was just a dinky little program. And it's generally not too easy to view the source code as it exists in the USER_SOURCE data dictionary view. Fortunately, I have built a PL/Vision package named PLVvu (more about this in <A
CLASS="xref"
HREF="ch14_01.htm"
>Chapter 14, <CITE
CLASS="chapter"
>PLVtmr: Analyzing Program Performance</CITE
></A
>) to view the code and so I execute that program to refresh my memory:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>SQL&gt; exec PLVvu.code('twice');
-----------------------------------------------------------
Code for FUNCTION TWICE
-----------------------------------------------------------
Line#  Source
-----------------------------------------------------------
    1 FUNCTION twice
    2    (string_in IN VARCHAR2, action_in IN VARCHAR2)
    3 RETURN VARCHAR2
    4 IS
    5 BEGIN
    6    IF action_in = 'UL'
    7    THEN
    8       RETURN (UPPER (string_in) || LOWER (string_in));
    9    ELSIF action_in = 'LU'
   10    THEN
   11       RETURN (LOWER (string_in) || UPPER (string_in));
   12    ELSIF action_in = 'N'
   13    THEN
   14       RETURN string_in || string_in;
   15    END IF;
   16 END twice;</PRE
></BLOCKQUOTE
><P
CLASS="para"
>The problem becomes clear: the action must be passed in as uppercase: <I
CLASS="function"
>LU</I
> and not <I
CLASS="function"
>lu</I
>. The solution seems to me to be equally clear: fix my line of code to pass upper case.</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>v_full_name := twice (comp_rec.short_name, 'LU');</PRE
></BLOCKQUOTE
><P
CLASS="para"
>Well, that certainly is one way to solve the problem. Unfortunately, it is really just a variation on "blame the victim." Why couldn't I pass <I
CLASS="function"
>lu</I
> in lowercase to get the action I wanted? It's not as if the lowercase version is used by <I
CLASS="function"
>twice</I
> to perform some other kind of conversion. The case of the action should not be a factor in the way <I
CLASS="function"
>twice</I
> works. Unfortunately, the way I wrote the program, any user must be aware of this inflexibility of <I
CLASS="function"
>twice</I
>&nbsp;-- be aware of minute implementation details of <I
CLASS="function"
>twice</I
>&nbsp;-- or risk introducing bugs in her code.</P
><P
CLASS="para"
>These are danger signs pointing to a poorly designed program. A user should not have to know anything about the internals of <I
CLASS="function"
>twice</I
> to use it. Furthermore, the program should be smart enough to accept the action in any number of different formats and do the right thing for the user.</P
><P
CLASS="para"
>The solution is straightforward: convert the action value provided by the user to upper or lower case and then test based on that case. In this way, the user can enter lower, upper, or mixed case and the program will function as expected. <A
CLASS="xref"
HREF="ch03_04.htm"
>Example 3.3</A
> shows the "smart" version of <I
CLASS="function"
>twice</I
>, which utilizes this parameter-conversion technique.</P
><DIV
CLASS="example"
><H4
CLASS="example"
><A
CLASS="title"
NAME="ch03-33452"
>Example 3.3: The twice Function with Parameter Conversion </A
></H4
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>CREATE OR REPLACE FUNCTION twice 
   (string_in IN VARCHAR2, 
    action_in IN VARCHAR2 DEFAULT 'N')
RETURN VARCHAR2
IS
   v_action VARCHAR2(10) := UPPER (action_in);
BEGIN
   IF v_action = 'UL'
   THEN
      RETURN (UPPER (string_in) || LOWER (string_in));      
      
   ELSIF v_action = 'LU'
   THEN
      RETURN (LOWER (string_in) || UPPER (string_in));      
      
   ELSIF v_action = 'N' 
   THEN
      RETURN string_in || string_in;
   END IF; 
END twice;
/</PRE
></BLOCKQUOTE
></DIV
><P
CLASS="para"
>Whenever you require your user to enter literals to direct activity in your program, you should make sure that they do not have to know about the "proper" case in which to enter the literal. Make your program smart enough to interpret a range of entries. <A
CLASS="indexterm"
NAME="ch03-idx-999773-0"
></A
><A
CLASS="indexterm"
NAME="ch03-idx-999773-1"
></A
><A
CLASS="indexterm"
NAME="ch03-idx-999773-2"
></A
></P
></DIV
><DIV
CLASS="htmlnav"
><P
></P
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch03_03.htm"
TITLE="3.3 Supplying Backward Compatibility"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 3.3 Supplying Backward Compatibility"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="book"
HREF="index.htm"
TITLE="Advanced Oracle PL/SQL Programming with Packages"
><IMG
SRC="../gifs/txthome.gif"
ALT="Advanced Oracle PL/SQL Programming with Packages"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch03_05.htm"
TITLE="3.5 Rough Waters Ahead"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 3.5 Rough Waters Ahead"
BORDER="0"></A
></TD
></TR
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
>3.3 Supplying Backward Compatibility</TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="index"
HREF="index/idx_0.htm"
TITLE="Book Index"
><IMG
SRC="../gifs/index.gif"
ALT="Book Index"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
>3.5 Rough Waters Ahead</TD
></TR
></TABLE
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"></DIV
><IMG
SRC="../gifs/smnavbar.gif"
USEMAP="#map"
BORDER="0"
ALT="The Oracle Library Navigation">

<P><font size="-1">
<a href="../copyrght.htm#copy">Copyright (c) 2000</a> O'Reilly & Associates. All rights reserved.
</font></P>

<MAP NAME="map">

<AREA SHAPE="RECT"
COORDS="0,0,35,30"
HREF="../index.htm"
ALT="Library Home">

<AREA SHAPE="RECT"
COORDS="40,0,95,30"
HREF="../prog2/index.htm"
ALT="Oracle PL/SQL Programming, 2nd. Ed.">

<AREA SHAPE="RECT"
COORDS="100,0,200,30"
HREF="../guide8i/index.htm"
ALT="Guide to Oracle 8i Features">

<AREA SHAPE="RECT"
COORDS="205,0,245,30"
HREF="../bipack/index.htm"
ALT="Oracle Built-in Packages">

<AREA SHAPE="RECT"
COORDS="250,0,320,30"
HREF="index.htm"
ALT="Advanced PL/SQL Programming with Packages">

<AREA SHAPE="RECT"
COORDS="325,0,420,30"
HREF="../webapp/index.htm"
ALT="Oracle Web Applications">

<AREA SHAPE="RECT"
COORDS="425,0,490,30"
HREF="../langpkt/index.htm"
ALT="Oracle PL/SQL Language Pocket Reference">

<AREA SHAPE="RECT"
COORDS="495,0,570,30"
HREF="../bipkt/index.htm"
ALT="Oracle PL/SQL Built-ins Pocket Reference">
</MAP>
</BODY
>
<!-- Mirrored from liso.cs.pusan.ac.kr by HTTrack Website Copier/3.x [XR&CO'2001] -->
</HTML
>
