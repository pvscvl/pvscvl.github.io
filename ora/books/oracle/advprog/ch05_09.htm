<HTML
><HEAD
><TITLE
>[Chapter 5] 5.9 PLVdyn: Dynamic SQL Operations</TITLE
><META
NAME="DC.Creator"
CONTENT="Steven Feuerstein"><META
NAME="DC.Date"
CONTENT="2000-04-29T18:24:29Z"><META
NAME="DC.Format"
CONTENT="text/html"
SCHEME="MIME"><META
NAME="DC.Identifier"
CONTENT="O'Reilly and Associates-1-56592-238-7E"><META
NAME="DC.Language"
CONTENT="en-US"><META
NAME="DC.Publisher"
CONTENT="O'Reilly &amp; Associates, Inc."><META
NAME="DC.Source"
CONTENT="1-56592-238-7E"
SCHEME="ISBN"><META
NAME="DC.Subject.Keyword"
CONTENT="PL/SQL SQL Oracle Packages"><META
NAME="DC.Title"
CONTENT="Advanced Oracle PL/SQL Programming with Packages"><META
NAME="DC.Type"
CONTENT="Text.Monograph"><META
NAME="generator"
CONTENT="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><LINK
REL="stylesheet"
TYPE="text/css"
HREF="../style/style1.css"><LINK
REV="made"
HREF="mailto:online-books@oreilly.com"
TITLE="Online Books Comments"><LINK
REL="up"
HREF="ch05_01.htm"
TITLE="5. PL/Vision Package Specifications"><LINK
REL="prev"
HREF="ch05_08.htm#ch05-SECT-8.0.3"
TITLE="5.8 PLVddd: DDL Syntax Dump"><LINK
REL="next"
HREF="ch05_10.htm#ch05-SECT-10.0.2"
TITLE="5.10 PLVexc: Exception Handling"></HEAD>
<BODY><DIV CLASS="htmlnav"
><H1
><IMG
SRC="gifs/smbanner.gif"
ALT="Advanced Oracle PL/SQL Programming with Packages"
USEMAP="#srchmap"
BORDER="0"></H1
><MAP
NAME="srchmap"
><AREA
SHAPE="RECT"
COORDS="0,0,466,65"
HREF="index.htm"
ALT="Advanced Oracle PL/SQL Programming with Packages"><AREA
SHAPE="RECT"
COORDS="467,0,514,18"
HREF="jobjects/fsearch.htm"
ALT="Search this book"></MAP
><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch05_08.htm#ch05-SECT-8.0.3"
TITLE="5.8 PLVddd: DDL Syntax Dump"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 5.8 PLVddd: DDL Syntax Dump"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><SPAN
CLASS="NAVTITLE"
><A
CLASS="chapter"
REL="up"
HREF="ch05_01.htm"
TITLE="5. PL/Vision Package Specifications"
>Chapter 5<BR>PL/Vision Package Specifications</A
></SPAN
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch05_10.htm#ch05-SECT-10.0.2"
TITLE="5.10 PLVexc: Exception Handling"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 5.10 PLVexc: Exception Handling"
BORDER="0"></A
></TD
></TR
></TABLE
>&nbsp;<HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"></DIV
><DIV
CLASS="sect1"
><H2
CLASS="sect1"
><A
CLASS="title"
NAME="ch05-SECT-9"
>5.9 PLVdyn: Dynamic SQL Operations</A
></H2
><P
CLASS="para"
>The PLVdyn (PL/Vision DYNamic SQL) package<A
CLASS="indexterm"
NAME="ch05-idx-1000500-0"
></A
> provides a high-level interface to Oracle's builtin DBMS_SQL package. See <A
CLASS="xref"
HREF="ch19_01.htm"
>Chapter 19, <CITE
CLASS="chapter"
>PLVdyn and PLVfk: Dynamic SQL and PL/SQL</CITE
></A
> for details. </P
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch05-SECT-9.0.1"
>5.9.1 Tracing PLVdyn activity<A
CLASS="indexterm"
NAME="ch05-idx-1000502-0"
></A
></A
></H3
><DL
CLASS="variablelist"
><DT
CLASS="term"
><CODE
CLASS="literal"
> PROCEDURE showsql (start_with_in IN VARCHAR2 := NULL);</CODE
><A
CLASS="indexterm"
NAME="ch05-idx-1000501-0"
></A
></DT
><DD
CLASS="listitem"
><P
CLASS="para"
>Requests that the string being parsed dynamically be displayed. You can specify the string that should start the displayed text.</P
></DD
><DT
CLASS="term"
><CODE
CLASS="literal"
> PROCEDURE noshowsql;</CODE
><A
CLASS="indexterm"
NAME="ch05-idx-1000503-0"
></A
></DT
><DD
CLASS="listitem"
><P
CLASS="para"
>Turns off the display of the dynamic <SPAN
CLASS="acronym"
>SQL</SPAN
> string.</P
></DD
><DT
CLASS="term"
><CODE
CLASS="literal"
> FUNCTION showing RETURN BOOLEAN;</CODE
><A
CLASS="indexterm"
NAME="ch05-idx-1000504-0"
></A
></DT
><DD
CLASS="listitem"
><P
CLASS="para"
> Returns TRUE if currently showing the dynamic <SPAN
CLASS="acronym"
>SQL</SPAN
>.</P
></DD
></DL
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch05-SECT-9.0.2"
>5.9.2 Controlling execution of dynamic SQL</A
></H3
><DL
CLASS="variablelist"
><DT
CLASS="term"
><CODE
CLASS="literal"
> PROCEDURE execsql;</CODE
><A
CLASS="indexterm"
NAME="ch05-idx-1000505-0"
></A
></DT
><DD
CLASS="listitem"
><P
CLASS="para"
>Requests that calls to <KBD
CLASS="command"
>PLVdyn.execute</KBD
> call the underlying DBMS_SQL.EXECUTE builtin.</P
></DD
><DT
CLASS="term"
><CODE
CLASS="literal"
> PROCEDURE noexecsql;</CODE
><A
CLASS="indexterm"
NAME="ch05-idx-1000506-0"
></A
></DT
><DD
CLASS="listitem"
><P
CLASS="para"
>Requests that <KBD
CLASS="command"
>PLVdyn.execute</KBD
> <EM
CLASS="emphasis"
>not</EM
> actually execute the specified cursor.</P
></DD
><DT
CLASS="term"
><CODE
CLASS="literal"
> FUNCTION executing RETURN BOOLEAN;</CODE
><A
CLASS="indexterm"
NAME="ch05-idx-1000507-0"
></A
></DT
><DD
CLASS="listitem"
><P
CLASS="para"
>Returns TRUE if currently executing the dynamic SQL.</P
></DD
></DL
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch05-SECT-9.0.3"
>5.9.3 Bundled, low-level operations<A
CLASS="indexterm"
NAME="ch05-idx-1000508-0"
></A
></A
></H3
><DL
CLASS="variablelist"
><DT
CLASS="term"
><CODE
CLASS="literal"
> FUNCTION open_and_parse </CODE
><A
CLASS="indexterm"
NAME="ch05-idx-1000509-0"
></A
></DT
><DT
CLASS="term"
><CODE
CLASS="literal"
>   (string_in IN VARCHAR2,</CODE
></DT
><DT
CLASS="term"
><CODE
CLASS="literal"
>    mode_in IN INTEGER := DBMS_SQL.NATIVE) RETURN INTEGER;</CODE
></DT
><DD
CLASS="listitem"
><P
CLASS="para"
>Combines the open and parse operations into a single function call.</P
></DD
><DT
CLASS="term"
><CODE
CLASS="literal"
> PROCEDURE execute (cur_inout IN INTEGER);</CODE
><A
CLASS="indexterm"
NAME="ch05-idx-1000510-0"
></A
></DT
><DD
CLASS="listitem"
><P
CLASS="para"
>A passthrough to the DBMS_SQL.EXECUTE function. By using <KBD
CLASS="command"
>PLVdyn.execute</KBD
>, you give yourself the flexibility to turn off execution without modifying your code.</P
></DD
><DT
CLASS="term"
><CODE
CLASS="literal"
> PROCEDURE execute_and_fetch</CODE
><A
CLASS="indexterm"
NAME="ch05-idx-1000511-0"
></A
></DT
><DT
CLASS="term"
><CODE
CLASS="literal"
>   (cur_inout IN INTEGER, match_in IN BOOLEAN := FALSE);</CODE
></DT
><DD
CLASS="listitem"
><P
CLASS="para"
>A passthrough to the DBMS_SQL.EXECUTE_AND_FETCH function. By using this procedure, you give yourself the flexibility to turn off execution without modifying your code. </P
></DD
><DT
CLASS="term"
><CODE
CLASS="literal"
> PROCEDURE execute_and_close (cur_inout IN OUT INTEGER);</CODE
><A
CLASS="indexterm"
NAME="ch05-idx-1000512-0"
></A
></DT
><DD
CLASS="listitem"
><P
CLASS="para"
>Combines the execute and close operations into a single call.</P
></DD
><DT
CLASS="term"
><CODE
CLASS="literal"
> PROCEDURE parse_delete</CODE
><A
CLASS="indexterm"
NAME="ch05-idx-1000513-0"
></A
></DT
><DT
CLASS="term"
><CODE
CLASS="literal"
>   (table_in IN VARCHAR2, where_in IN VARCHAR2,</CODE
></DT
><DT
CLASS="term"
><CODE
CLASS="literal"
>    cur_out OUT INTEGER);</CODE
></DT
><DD
CLASS="listitem"
><P
CLASS="para"
>Performs the parse step of DBMS_SQL for a DELETE string constructed from the arguments in the parameter list.</P
></DD
></DL
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch05-SECT-9.0.4"
>5.9.4 Data Definition Language operations<A
CLASS="indexterm"
NAME="ch05-idx-1000515-0"
></A
></A
></H3
><DL
CLASS="variablelist"
><DT
CLASS="term"
><CODE
CLASS="literal"
> PROCEDURE ddl (string_in IN VARCHAR2);</CODE
><A
CLASS="indexterm"
NAME="ch05-idx-1000514-0"
></A
></DT
><DD
CLASS="listitem"
><P
CLASS="para"
>Executes any DDL statement by performing an OPEN, then a PARSE. This program forces a commit in your session, as when any DDL command is given.</P
></DD
><DT
CLASS="term"
><CODE
CLASS="literal"
> PROCEDURE drop_object</CODE
><A
CLASS="indexterm"
NAME="ch05-idx-1000516-0"
></A
></DT
><DT
CLASS="term"
><CODE
CLASS="literal"
>   (type_in IN VARCHAR2, name_in IN VARCHAR2,</CODE
></DT
><DT
CLASS="term"
><CODE
CLASS="literal"
>    schema_in IN VARCHAR2 := USER);</CODE
></DT
><DD
CLASS="listitem"
><P
CLASS="para"
>Provides a generic, powerful interface to the DDL DROP command. You can drop individual or multiple objects.</P
></DD
><DT
CLASS="term"
><CODE
CLASS="literal"
> PROCEDURE truncate </CODE
><A
CLASS="indexterm"
NAME="ch05-idx-1000517-0"
></A
></DT
><DT
CLASS="term"
><CODE
CLASS="literal"
>   (type_in IN VARCHAR2, name_in IN VARCHAR2,</CODE
></DT
><DT
CLASS="term"
><CODE
CLASS="literal"
>    schema_in IN VARCHAR2 := USER);</CODE
></DT
><DD
CLASS="listitem"
><P
CLASS="para"
>Truncates either a table or a cluster as specified.</P
></DD
><DT
CLASS="term"
><CODE
CLASS="literal"
> PROCEDURE compile</CODE
><A
CLASS="indexterm"
NAME="ch05-idx-1000518-0"
></A
></DT
><DT
CLASS="term"
><CODE
CLASS="literal"
>   (stg_in IN VARCHAR2, show_err_in IN VARCHAR2 := PLV.noshow);</CODE
></DT
><DD
CLASS="listitem"
><P
CLASS="para"
>Executes a CREATE OR REPLACE of the program contained in the first argument, <KBD
CLASS="command"
>stg_in</KBD
>. You can also request that errors from this compile be immediately displayed with a call to the <KBD
CLASS="command"
>PLVvu.err</KBD
> procedure.</P
></DD
><DT
CLASS="term"
><CODE
CLASS="literal"
> PROCEDURE compile </CODE
></DT
><DT
CLASS="term"
><CODE
CLASS="literal"
>   (table_in IN PLVtab.vc2000_table, </CODE
></DT
><DT
CLASS="term"
><CODE
CLASS="literal"
>    lines_in IN INTEGER, </CODE
></DT
><DT
CLASS="term"
><CODE
CLASS="literal"
>    show_err_in IN VARCHAR2 := PLV.noshow);</CODE
></DT
><DD
CLASS="listitem"
><P
CLASS="para"
>Another version of dynamic CREATE OR REPLACE that reads the source code for the program from the <SPAN
CLASS="acronym"
>PL/SQL</SPAN
> table.</P
></DD
><DT
CLASS="term"
><CODE
CLASS="literal"
> FUNCTION nextseq (seq_in IN VARCHAR2, increment_in IN INTEGER := 1)</CODE
><A
CLASS="indexterm"
NAME="ch05-idx-1000519-0"
></A
></DT
><DT
CLASS="term"
><CODE
CLASS="literal"
>RETURN INTEGER;</CODE
></DT
><DD
CLASS="listitem"
><P
CLASS="para"
>Returns the next value from the specified sequence. Can retrieve the immediate next value or the <EM
CLASS="emphasis"
>n</EM
>th next value. Use of this function avoids direct reference to the DUAL table.</P
></DD
></DL
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch05-SECT-9.0.5"
>5.9.5 Data Manipulation Language operations</A
></H3
><DL
CLASS="variablelist"
><DT
CLASS="term"
><CODE
CLASS="literal"
> PROCEDURE dml_insert_select</CODE
><A
CLASS="indexterm"
NAME="ch05-idx-1000520-0"
></A
></DT
><DT
CLASS="term"
><CODE
CLASS="literal"
>   (table_in IN VARCHAR2, select_in IN VARCHAR2);</CODE
></DT
><DD
CLASS="listitem"
><P
CLASS="para"
>Issues an INSERT-SELECT statement based on the arguments provided.</P
></DD
><DT
CLASS="term"
><CODE
CLASS="literal"
> PROCEDURE dml_delete</CODE
><A
CLASS="indexterm"
NAME="ch05-idx-1000521-0"
></A
></DT
><DT
CLASS="term"
><CODE
CLASS="literal"
>   (table_in IN VARCHAR2, where_in IN VARCHAR2 := NULL);</CODE
></DT
><DD
CLASS="listitem"
><P
CLASS="para"
>Deletes all rows specified by the WHERE clause from the table argument.</P
></DD
><DT
CLASS="term"
><CODE
CLASS="literal"
> PROCEDURE dml_update</CODE
><A
CLASS="indexterm"
NAME="ch05-idx-1000522-0"
></A
></DT
><DT
CLASS="term"
><CODE
CLASS="literal"
>   (table_in IN VARCHAR2, </CODE
></DT
><DT
CLASS="term"
><CODE
CLASS="literal"
>    column_in IN VARCHAR2,</CODE
></DT
><DT
CLASS="term"
><CODE
CLASS="literal"
>    value_in IN VARCHAR2|NUMBER|DATE,</CODE
></DT
><DT
CLASS="term"
><CODE
CLASS="literal"
>    where_in IN VARCHAR2 := NULL);</CODE
></DT
><DD
CLASS="listitem"
><P
CLASS="para"
>Overloaded to support string, numeric, and date values, <KBD
CLASS="command"
>dml_update</KBD
> performs a single-column UPDATE as specified by the arguments.</P
></DD
></DL
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch05-SECT-9.0.6"
>5.9.6 Executing dynamic PL/SQL</A
></H3
><DL
CLASS="variablelist"
><DT
CLASS="term"
><CODE
CLASS="literal"
> PROCEDURE plsql (string_in IN VARCHAR2);</CODE
><A
CLASS="indexterm"
NAME="ch05-idx-1000523-0"
></A
></DT
><DD
CLASS="listitem"
><P
CLASS="para"
>Executes any <SPAN
CLASS="acronym"
>PL/SQL</SPAN
> code. This procedure automatically packages your string inside a BEGIN-END block and terminates it with a semicolon.</P
></DD
></DL
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch05-SECT-9.0.7"
>5.9.7 Miscellaneous programs</A
></H3
><DL
CLASS="variablelist"
><DT
CLASS="term"
><CODE
CLASS="literal"
> PROCEDURE disptab</CODE
><A
CLASS="indexterm"
NAME="ch05-idx-1000524-0"
></A
></DT
><DT
CLASS="term"
><CODE
CLASS="literal"
>   (table_in IN VARCHAR2,</CODE
></DT
><DT
CLASS="term"
><CODE
CLASS="literal"
>    where_in IN VARCHAR2 := NULL,</CODE
></DT
><DT
CLASS="term"
><CODE
CLASS="literal"
>    string_length_in IN INTEGER := 20,</CODE
></DT
><DT
CLASS="term"
><CODE
CLASS="literal"
>    date_format_in IN VARCHAR2 := PLV.datemask,</CODE
></DT
><DT
CLASS="term"
><CODE
CLASS="literal"
>    num_length_in IN INTEGER := 10);</CODE
></DT
><DD
CLASS="listitem"
><P
CLASS="para"
>Displays the requested contents of any database table. Good example of the kind of code required to perform Method 4 dynamic <SPAN
CLASS="acronym"
>SQL</SPAN
>.</P
></DD
><DT
CLASS="term"
><CODE
CLASS="literal"
> FUNCTION plsql_block (string_in IN VARCHAR2) RETURN VARCHAR2;</CODE
><A
CLASS="indexterm"
NAME="ch05-idx-1000525-0"
></A
></DT
><DD
CLASS="listitem"
><P
CLASS="para"
>Returns a string that is a valid <SPAN
CLASS="acronym"
>PL/SQL</SPAN
> block for dynamic <SPAN
CLASS="acronym"
>PL/SQL</SPAN
> execution.</P
></DD
><DT
CLASS="term"
><CODE
CLASS="literal"
> FUNCTION placeholder</CODE
><A
CLASS="indexterm"
NAME="ch05-idx-1000526-0"
></A
></DT
><DT
CLASS="term"
><CODE
CLASS="literal"
>   (string_in IN VARCHAR2, start_in IN INTEGER := 1)</CODE
></DT
><DT
CLASS="term"
><CODE
CLASS="literal"
>RETURN VARCHAR2;</CODE
></DT
><DD
CLASS="listitem"
><P
CLASS="para"
>Locates and returns the <EM
CLASS="emphasis"
>n</EM
>th placeholder for bind variables in strings.</P
></DD
><DT
CLASS="term"
><CODE
CLASS="literal"
> FUNCTION tabexists (table_in IN VARCHAR2) RETURN BOOLEAN;</CODE
><A
CLASS="indexterm"
NAME="ch05-idx-1000527-0"
></A
></DT
><DD
CLASS="listitem"
><P
CLASS="para"
>Returns TRUE if the specified table exists.</P
></DD
><DT
CLASS="term"
><CODE
CLASS="literal"
> PROCEDURE time_plsql</CODE
><A
CLASS="indexterm"
NAME="ch05-idx-1000528-0"
></A
></DT
><DT
CLASS="term"
><CODE
CLASS="literal"
>   (stg_in IN VARCHAR2, repetitions_in IN INTEGER := 1);</CODE
></DT
><DD
CLASS="listitem"
><P
CLASS="para"
>Calculates the overhead required to execute a dynamically constructed anonymous <SPAN
CLASS="acronym"
>PL/SQL</SPAN
> block.</P
></DD
></DL
></DIV
></DIV
><DIV
CLASS="htmlnav"
><P
></P
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch05_08.htm#ch05-SECT-8.0.3"
TITLE="5.8 PLVddd: DDL Syntax Dump"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 5.8 PLVddd: DDL Syntax Dump"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="book"
HREF="index.htm"
TITLE="Advanced Oracle PL/SQL Programming with Packages"
><IMG
SRC="../gifs/txthome.gif"
ALT="Advanced Oracle PL/SQL Programming with Packages"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch05_10.htm#ch05-SECT-10.0.2"
TITLE="5.10 PLVexc: Exception Handling"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 5.10 PLVexc: Exception Handling"
BORDER="0"></A
></TD
></TR
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
>5.8 PLVddd: DDL Syntax Dump</TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="index"
HREF="index/idx_0.htm"
TITLE="Book Index"
><IMG
SRC="../gifs/index.gif"
ALT="Book Index"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
>5.10 PLVexc: Exception Handling</TD
></TR
></TABLE
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"></DIV
><IMG
SRC="../gifs/smnavbar.gif"
USEMAP="#map"
BORDER="0"
ALT="The Oracle Library Navigation">

<P><font size="-1">
<a href="../copyrght.htm#copy">Copyright (c) 2000</a> O'Reilly & Associates. All rights reserved.
</font></P>

<MAP NAME="map">

<AREA SHAPE="RECT"
COORDS="0,0,35,30"
HREF="../index.htm"
ALT="Library Home">

<AREA SHAPE="RECT"
COORDS="40,0,95,30"
HREF="../prog2/index.htm"
ALT="Oracle PL/SQL Programming, 2nd. Ed.">

<AREA SHAPE="RECT"
COORDS="100,0,200,30"
HREF="../guide8i/index.htm"
ALT="Guide to Oracle 8i Features">

<AREA SHAPE="RECT"
COORDS="205,0,245,30"
HREF="../bipack/index.htm"
ALT="Oracle Built-in Packages">

<AREA SHAPE="RECT"
COORDS="250,0,320,30"
HREF="index.htm"
ALT="Advanced PL/SQL Programming with Packages">

<AREA SHAPE="RECT"
COORDS="325,0,420,30"
HREF="../webapp/index.htm"
ALT="Oracle Web Applications">

<AREA SHAPE="RECT"
COORDS="425,0,490,30"
HREF="../langpkt/index.htm"
ALT="Oracle PL/SQL Language Pocket Reference">

<AREA SHAPE="RECT"
COORDS="495,0,570,30"
HREF="../bipkt/index.htm"
ALT="Oracle PL/SQL Built-ins Pocket Reference">
</MAP>
</BODY
>
<!-- Mirrored from liso.cs.pusan.ac.kr by HTTrack Website Copier/3.x [XR&CO'2001] -->
</HTML
>
