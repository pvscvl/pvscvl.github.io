<HTML
><HEAD
><TITLE
>[Chapter 11]  PLVobj: A Packaged Interface to ALL_OBJECTS</TITLE
><META
NAME="DC.Creator"
CONTENT="Steven Feuerstein"><META
NAME="DC.Date"
CONTENT="2000-04-29T18:27:21Z"><META
NAME="DC.Format"
CONTENT="text/html"
SCHEME="MIME"><META
NAME="DC.Identifier"
CONTENT="O'Reilly and Associates-1-56592-238-7E"><META
NAME="DC.Language"
CONTENT="en-US"><META
NAME="DC.Publisher"
CONTENT="O'Reilly &amp; Associates, Inc."><META
NAME="DC.Source"
CONTENT="1-56592-238-7E"
SCHEME="ISBN"><META
NAME="DC.Subject.Keyword"
CONTENT="PL/SQL SQL Oracle Packages"><META
NAME="DC.Title"
CONTENT="Advanced Oracle PL/SQL Programming with Packages"><META
NAME="DC.Type"
CONTENT="Text.Monograph"><META
NAME="generator"
CONTENT="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><LINK
REL="stylesheet"
TYPE="text/css"
HREF="../style/style1.css"><LINK
REV="made"
HREF="mailto:online-books@oreilly.com"
TITLE="Online Books Comments"><LINK
REL="up"
HREF="part03.htm"
TITLE="III. Building Block Packages"><LINK
REL="prev"
HREF="ch10_03.htm#ch10-SECT-3.2.2"
TITLE="10.3 PLVprsps: Parsing PL/SQL Strings"><LINK
REL="next"
HREF="ch11_02.htm"
TITLE="11.2 ALL_OBJECTS View"></HEAD>
<BODY><DIV CLASS="htmlnav"
><H1
><IMG
SRC="gifs/smbanner.gif"
ALT="Advanced Oracle PL/SQL Programming with Packages"
USEMAP="#srchmap"
BORDER="0"></H1
><MAP
NAME="srchmap"
><AREA
SHAPE="RECT"
COORDS="0,0,466,65"
HREF="index.htm"
ALT="Advanced Oracle PL/SQL Programming with Packages"><AREA
SHAPE="RECT"
COORDS="467,0,514,18"
HREF="jobjects/fsearch.htm"
ALT="Search this book"></MAP
><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch10_03.htm#ch10-SECT-3.2.2"
TITLE="10.3 PLVprsps: Parsing PL/SQL Strings"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 10.3 PLVprsps: Parsing PL/SQL Strings"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><SPAN
CLASS="NAVTITLE"
>Chapter 11</SPAN
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch11_02.htm"
TITLE="11.2 ALL_OBJECTS View"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 11.2 ALL_OBJECTS View"
BORDER="0"></A
></TD
></TR
></TABLE
>&nbsp;<HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"></DIV
><DIV
CLASS="chapter"
><H1
CLASS="chapter"
><A
CLASS="title"
NAME="plsql-adv-ch-11"
>11.  PLVobj: A Packaged Interface to ALL_OBJECTS</A
></H1
><DIV
CLASS="htmltoc"
><P
><B
>Contents:</B
><BR><A
CLASS="sect1"
HREF="#ch11-40730"
TITLE="11.1 Why PLVobj?"
>Why PLVobj?</A
><BR><A
CLASS="sect1"
HREF="ch11_02.htm"
TITLE="11.2 ALL_OBJECTS View"
>ALL_OBJECTS View</A
><BR><A
CLASS="sect1"
HREF="ch11_03.htm#ch11-SECT-3.2"
TITLE="11.3 Setting the Current Object"
>Setting the Current Object</A
><BR><A
CLASS="sect1"
HREF="ch11_04.htm"
TITLE="11.4 Accessing ALL_OBJECTS "
>Accessing ALL_OBJECTS </A
><BR><A
CLASS="sect1"
HREF="ch11_05.htm"
TITLE="11.5 Binding Objects to a Dynamic Cursor"
>Binding Objects to a Dynamic Cursor</A
><BR><A
CLASS="sect1"
HREF="ch11_06.htm"
TITLE="11.6 Populating a PL/SQL Table with Object Names"
>Populating a PL/SQL Table with Object Names</A
><BR><A
CLASS="sect1"
HREF="ch11_07.htm"
TITLE="11.7 A Programmatic Cursor FOR Loop"
>A Programmatic Cursor FOR Loop</A
><BR><A
CLASS="sect1"
HREF="ch11_08.htm"
TITLE="11.8 Tracing PLVobj Activity"
>Tracing PLVobj Activity</A
></P
><P
></P
></DIV
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="ch11-idx-998779-0"
></A
><A
CLASS="indexterm"
NAME="ch11-idx-998779-1"
></A
><A
CLASS="indexterm"
NAME="ch11-idx-998779-2"
></A
><A
CLASS="indexterm"
NAME="ch11-idx-998779-3"
></A
>The PLVobj (PL/Vision OBJect) package provides a programmatic interface to the <SPAN
CLASS="acronym"
>PL/SQL</SPAN
> objects stored in the ALL_OBJECTS data dictionary view. It is used throughout PL/Vision in two ways:</P
><UL
CLASS="itemizedlist"
><LI
CLASS="listitem"
><P
CLASS="para"
>To parse and manage a "current object," which is composed of the schema, name, and type of the object. The PLVobj package handles the complexity of parsing various versions of the current object specification. It also uses NAME_RESOLVE to locate the object you specify in the data dictionary.</P
></LI
><LI
CLASS="listitem"
><P
CLASS="para"
>To easily fetch objects from the ALL_OBJECTS view. With the programmatic interface between you and the ALL_OBJECTS view, you never have to explicitly open, fetch from, or close a cursor against this view in order to retrieve object information. Instead, you call <SPAN
CLASS="acronym"
>PL/SQL</SPAN
> programs which do the job for you.</P
></LI
></UL
><P
CLASS="para"
>PLVobj offers some excellent lessons in how to use packages to:</P
><UL
CLASS="itemizedlist"
><LI
CLASS="listitem"
><P
CLASS="para"
>Hide implementational and data structure details from developers who don't want or need to deal with that level of detail.</P
></LI
><LI
CLASS="listitem"
><P
CLASS="para"
>Use the persistent characteristic of packaged variables to implement a current object that can be used in many different programs and circumstances.</P
></LI
><LI
CLASS="listitem"
><P
CLASS="para"
>Provide a comprehensive procedural interface to a cursor. This includes the <KBD
CLASS="command"
>loopexec</KBD
> program, which simulates a cursor FOR loop against the cursor.</P
></LI
></UL
><P
CLASS="para"
>The PLVobj package is not a flashy piece of software. It isn't anything end users or even developer users will ever really see. It is, however, a very useful low-level building-block component for developers who work with this data dictionary view and who may want to build similar interfaces to other predefined views.</P
><DIV
CLASS="sect1"
><H2
CLASS="sect1"
><A
CLASS="title"
NAME="ch11-40730"
>11.1 Why PLVobj?</A
></H2
><P
CLASS="para"
>PL/Vision contains a number of utilities which analyze and manipulate the contents of data dictionary views containing <SPAN
CLASS="acronym"
>PL/SQL</SPAN
> code source text. These utilities convert the case of a <SPAN
CLASS="acronym"
>PL/SQL</SPAN
> program, analyze which external programs and package elements a program references, display stored source code, show compiler errors, etc. In each of these cases I needed to take the same or similar actions again and again:</P
><UL
CLASS="itemizedlist"
><LI
CLASS="listitem"
><P
CLASS="para"
>Accept a string from the user that specifies the program unit he wants the package to work with. Convert it to the owner-name-type information I need to use when working with the data dictionary views.</P
></LI
><LI
CLASS="listitem"
><P
CLASS="para"
>Fetch rows from one or more data dictionary views based on the program unit specified.</P
></LI
></UL
><P
CLASS="para"
>I would like to be able to say that as I began writing my first source-related utility I instantly recognized the need to create a package like PLVobj. The truth is that my first read of the situation was that it was very easy to define a cursor against USER_OBJECTS and get what I needed for my package. So I just started hacking away. I built the first version of my program and got it working. And then I started on my next utility. Suddenly I was confronted with having to write the same (or very similar) kind of code again. I was troubled by the redundancy. Still, it was pretty simple stuff, so I went ahead with the duplication of code. I got that second utility to work as well. Then I sent the packages to one of my devoted beta testers. He installed them in a networked environment under a common user and told his developers to try them out.</P
><P
CLASS="para"
>Neither utility worked. At all. It didn't take too long to figure out why. In my own, intimate development and testing environment, everything existed in the same Oracle account. In the beta environment the utilities were installed in a single account and then shared by all. My naive reliance on the USER_OBJECTS data dictionary view doomed the utilities. I needed instead to use the ALL_OBJECTS view. This meant that I also needed to provide a schema or owner to the cursor. Suddenly I had to perform less-than-trivial enhancements to two different programs.</P
><P
CLASS="para"
>At this point, I came to my senses. I needed to consolidate all of this logic, all code relating to the objects data dictionary view, into a single location&nbsp;-- a package. I could not afford, in terms of productivity and code quality, to have code redundancy. As you begin to use new data structures or develop a new technique the <EM
CLASS="emphasis"
>first</EM
> time, it is sometimes difficult to justify cleaving off the code to its own repository or package. When you get to needing it the second time, however, there should be no excuses. Avoid with fanatical determination any redundancies in your application code.</P
><P
CLASS="para"
>And so PLVobj was born. Of course, the version I share with you is very different from the first, second, third, and fourth versions of the package. Believe me, it has changed a lot over a four-month period. I seem to come across new complexities every week. (For example, a module name is not always in upper case; you can create program units whose names have lowercase letters if you enclose the name in double quotes.)</P
><P
CLASS="para"
>The PLVobj package offers functionality in several areas:</P
><UL
CLASS="itemizedlist"
><LI
CLASS="listitem"
><P
CLASS="para"
>Set and view the "current object" maintained inside the package. </P
></LI
><LI
CLASS="listitem"
><P
CLASS="para"
>Access a cursor into the ALL_OBJECTS view, providing a full range of cursor-based functionality through <SPAN
CLASS="acronym"
>PL/SQL</SPAN
> procedures and functions.</P
></LI
><LI
CLASS="listitem"
><P
CLASS="para"
>Trace the actions of the package. </P
></LI
></UL
><P
CLASS="para"
>The elements available in PLVobj are described in the following sections. Before diving into the programs, however, let's review the ALL_OBJECTS view.</P
></DIV
></DIV
><DIV
CLASS="htmlnav"
><P
></P
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch10_03.htm#ch10-SECT-3.2.2"
TITLE="10.3 PLVprsps: Parsing PL/SQL Strings"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 10.3 PLVprsps: Parsing PL/SQL Strings"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="book"
HREF="index.htm"
TITLE="Advanced Oracle PL/SQL Programming with Packages"
><IMG
SRC="../gifs/txthome.gif"
ALT="Advanced Oracle PL/SQL Programming with Packages"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch11_02.htm"
TITLE="11.2 ALL_OBJECTS View"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 11.2 ALL_OBJECTS View"
BORDER="0"></A
></TD
></TR
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
>10.3 PLVprsps: Parsing PL/SQL Strings</TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="index"
HREF="index/idx_0.htm"
TITLE="Book Index"
><IMG
SRC="../gifs/index.gif"
ALT="Book Index"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
>11.2 ALL_OBJECTS View</TD
></TR
></TABLE
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"></DIV
><IMG
SRC="../gifs/smnavbar.gif"
USEMAP="#map"
BORDER="0"
ALT="The Oracle Library Navigation">

<P><font size="-1">
<a href="../copyrght.htm#copy">Copyright (c) 2000</a> O'Reilly & Associates. All rights reserved.
</font></P>

<MAP NAME="map">

<AREA SHAPE="RECT"
COORDS="0,0,35,30"
HREF="../index.htm"
ALT="Library Home">

<AREA SHAPE="RECT"
COORDS="40,0,95,30"
HREF="../prog2/index.htm"
ALT="Oracle PL/SQL Programming, 2nd. Ed.">

<AREA SHAPE="RECT"
COORDS="100,0,200,30"
HREF="../guide8i/index.htm"
ALT="Guide to Oracle 8i Features">

<AREA SHAPE="RECT"
COORDS="205,0,245,30"
HREF="../bipack/index.htm"
ALT="Oracle Built-in Packages">

<AREA SHAPE="RECT"
COORDS="250,0,320,30"
HREF="index.htm"
ALT="Advanced PL/SQL Programming with Packages">

<AREA SHAPE="RECT"
COORDS="325,0,420,30"
HREF="../webapp/index.htm"
ALT="Oracle Web Applications">

<AREA SHAPE="RECT"
COORDS="425,0,490,30"
HREF="../langpkt/index.htm"
ALT="Oracle PL/SQL Language Pocket Reference">

<AREA SHAPE="RECT"
COORDS="495,0,570,30"
HREF="../bipkt/index.htm"
ALT="Oracle PL/SQL Built-ins Pocket Reference">
</MAP>
</BODY
>
<!-- Mirrored from liso.cs.pusan.ac.kr by HTTrack Website Copier/3.x [XR&CO'2001] -->
</HTML
>
