<HTML
><HEAD
><TITLE
>[Chapter 2] Best Practices for Packages</TITLE
><META
NAME="DC.Creator"
CONTENT="Steven Feuerstein"><META
NAME="DC.Date"
CONTENT="2000-04-29T18:21:37Z"><META
NAME="DC.Format"
CONTENT="text/html"
SCHEME="MIME"><META
NAME="DC.Identifier"
CONTENT="O'Reilly and Associates-1-56592-238-7E"><META
NAME="DC.Language"
CONTENT="en-US"><META
NAME="DC.Publisher"
CONTENT="O'Reilly &amp; Associates, Inc."><META
NAME="DC.Source"
CONTENT="1-56592-238-7E"
SCHEME="ISBN"><META
NAME="DC.Subject.Keyword"
CONTENT="PL/SQL SQL Oracle Packages"><META
NAME="DC.Title"
CONTENT="Advanced Oracle PL/SQL Programming with Packages"><META
NAME="DC.Type"
CONTENT="Text.Monograph"><META
NAME="generator"
CONTENT="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><LINK
REL="stylesheet"
TYPE="text/css"
HREF="../style/style1.css"><LINK
REV="made"
HREF="mailto:online-books@oreilly.com"
TITLE="Online Books Comments"><LINK
REL="up"
HREF="part01.htm"
TITLE="I. Working With Packages"><LINK
REL="prev"
HREF="ch01_06.htm#ch01-SECT-6.2.1"
TITLE="1.6 Building Packages"><LINK
REL="next"
HREF="ch02_02.htm"
TITLE="2.2 Using Effective Coding Style for Packages"></HEAD>
<BODY><DIV CLASS="htmlnav"
><H1
><IMG
SRC="gifs/smbanner.gif"
ALT="Advanced Oracle PL/SQL Programming with Packages"
USEMAP="#srchmap"
BORDER="0"></H1
><MAP
NAME="srchmap"
><AREA
SHAPE="RECT"
COORDS="0,0,466,65"
HREF="index.htm"
ALT="Advanced Oracle PL/SQL Programming with Packages"><AREA
SHAPE="RECT"
COORDS="467,0,514,18"
HREF="jobjects/fsearch.htm"
ALT="Search this book"></MAP
><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch01_06.htm#ch01-SECT-6.2.1"
TITLE="1.6 Building Packages"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 1.6 Building Packages"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><SPAN
CLASS="NAVTITLE"
>Chapter 2</SPAN
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch02_02.htm"
TITLE="2.2 Using Effective Coding Style for Packages"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 2.2 Using Effective Coding Style for Packages"
BORDER="0"></A
></TD
></TR
></TABLE
>&nbsp;<HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"></DIV
><DIV
CLASS="chapter"
><H1
CLASS="chapter"
><A
CLASS="title"
NAME="ch02-39481"
>2. Best Practices for Packages</A
></H1
><DIV
CLASS="htmltoc"
><P
><B
>Contents:</B
><BR><A
CLASS="sect1"
HREF="#ch02-20342"
TITLE="2.1 Starting With Packages"
>Starting With Packages</A
><BR><A
CLASS="sect1"
HREF="ch02_02.htm"
TITLE="2.2 Using Effective Coding Style for Packages"
>Using Effective Coding Style for Packages</A
><BR><A
CLASS="sect1"
HREF="ch02_03.htm"
TITLE="2.3 Selecting Package Names"
>Selecting Package Names</A
><BR><A
CLASS="sect1"
HREF="ch02_04.htm"
TITLE="2.4 Organizing Package Source Code"
>Organizing Package Source Code</A
><BR><A
CLASS="sect1"
HREF="ch02_05.htm#ch02-SECT-5.3"
TITLE="2.5 Constructing the Optimal Interface to Your Package"
>Constructing the Optimal Interface to Your Package</A
><BR><A
CLASS="sect1"
HREF="ch02_06.htm#ch02-SECT-6.3.1"
TITLE="2.6 Building Flexibility Into Your Packages"
>Building Flexibility Into Your Packages</A
><BR><A
CLASS="sect1"
HREF="ch02_07.htm"
TITLE="2.7 Building Windows Into Your Packages"
>Building Windows Into Your Packages</A
><BR><A
CLASS="sect1"
HREF="ch02_08.htm"
TITLE="2.8 Overloading for Smart Packages"
>Overloading for Smart Packages</A
><BR><A
CLASS="sect1"
HREF="ch02_09.htm#ch02-SECT-9.2"
TITLE="2.9 Modularizing for Maintainable Packages"
>Modularizing for Maintainable Packages</A
><BR><A
CLASS="sect1"
HREF="ch02_10.htm#ch02-SECT-10.5"
TITLE="2.10 Hiding Package Data"
>Hiding Package Data</A
><BR><A
CLASS="sect1"
HREF="ch02_11.htm"
TITLE="2.11 Simultaneous Construction of Multiple Packages"
>Simultaneous Construction of Multiple Packages</A
></P
><P
></P
></DIV
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="ch02-idx-999923-0"
></A
><A
CLASS="indexterm"
NAME="ch02-idx-999923-1"
></A
>Packages are the most important construct in <SPAN
CLASS="acronym"
>PL/SQL</SPAN
> for building reusable code and plug-and-play components, and for employing object-oriented design techniques. As you become more comfortable with the language, you will find more of your time spent inside packages&nbsp;-- and using programs from packages built by other developers. This may be a very pleasant and rewarding experience&nbsp;-- if the packages are designed and implemented properly. If, on the other hand, you decide to build your packages in the same helter-skelter method (or lack thereof) I run into way too often, life out there in front of the monitor may get pretty miserable.</P
><P
CLASS="para"
>This chapter discusses some of the most important "best practices" for package construction and goes into detail on an effective coding style for packages. If you follow the ideas presented below, you have a very good chance of writing packages that are readable, maintainable, and enhanceable. It is also much more likely that other developers will find your packages usable and useful. You will find additional explanation regarding these practices, along with examples of the application of these practices, in the sections covering specific PL/Vision packages.</P
><P
CLASS="para"
>The following list offers a summary of the best practices for packages covered in this chapter:</P
><UL
CLASS="itemizedlist"
><LI
CLASS="listitem"
><P
CLASS="para"
><EM
CLASS="emphasis"
>Start with packages.</EM
> Get out of the habit of building standalone procedures and functions. Instead, start with a package. </P
></LI
><LI
CLASS="listitem"
><P
CLASS="para"
><EM
CLASS="emphasis"
>Use a consistent and effective coding style.</EM
> Use comment lines as banners to delineate the different kinds of elements in the package. Employ a standard ordering for the elements of the package. </P
></LI
><LI
CLASS="listitem"
><P
CLASS="para"
><EM
CLASS="emphasis"
>Choose appropriate and accurate names for both the package and the elements in the package.</EM
> As with any other kind of identifier, your package name should clearly communicate the point of the package. Avoid redundancies in the package name and its element names (such as <KBD
CLASS="command"
>emp.emp_name</KBD
>). </P
></LI
><LI
CLASS="listitem"
><P
CLASS="para"
><EM
CLASS="emphasis"
>Organize package source code.</EM
> Come up with consistent file-naming conventions for the source code you stored in operating system files. Separate the package specification and body CREATE OR REPLACE statement into separate files.</P
></LI
><LI
CLASS="listitem"
><P
CLASS="para"
><EM
CLASS="emphasis"
>Construct the optimal interface to your package.</EM
> Design your package so that it is easy&nbsp;-- and a pleasure&nbsp;-- to use. When you build packages for reuse, other <SPAN
CLASS="acronym"
>PL/SQL</SPAN
> developers become your users. Treat them with respect. Make the parameters in your programs case-insensitive. Don't require users to know about and pass literal values.</P
></LI
><LI
CLASS="listitem"
><P
CLASS="para"
><EM
CLASS="emphasis"
>Build flexibility directly into your packages.</EM
> Anticipate areas where options and flexibility will be required and then build them right in&nbsp;-- either with additional parameters or separate programs. Build toggles into your package so the behavior of the package can be changed without having to change the user's application.</P
></LI
><LI
CLASS="listitem"
><P
CLASS="para"
><EM
CLASS="emphasis"
>Build windows into your packages.</EM
> Packages allow you to control tightly what a developer can see and affect inside the package. The flip side of this control is blindness and bewilderment. Your users can't figure out what is going on. Package windows allow for controlled read-only access to package data and activity.</P
></LI
><LI
CLASS="listitem"
><P
CLASS="para"
><EM
CLASS="emphasis"
>Overload aggressively for smart packages.</EM
> Overloading modules means that you create more than one program with the same name. Overloading transfers the burden of knowledge from the user to the software. You do not have to try to remember the different names of the modules and their specific arguments. Properly constructed, overloaded modules will anticipate the different variations, hiding them behind a single name, and liberate your brain for other, more important matters. </P
></LI
><LI
CLASS="listitem"
><P
CLASS="para"
><EM
CLASS="emphasis"
>Modularize the package body to create maintainable packages.</EM
> To build packages that are both immediately useful and enhanceable over the long run,  you must develop a wicked allergy to any kind of code duplication inside the package. You need to be ready, willing, and able to create private programs in your package to contain all the shared code behind the public programs of the package. </P
></LI
><LI
CLASS="listitem"
><P
CLASS="para"
><EM
CLASS="emphasis"
>Hide your package data.</EM
> Never define variables in the specification of a package (except when explicitly needed that way). Instead, declare them in the body and then provide a procedure to set the value of that variable, and a function to change the value of that variable (get-and-set). If you follow this practice, you will retain control over the values of, and access to, your package data. You can also then trace any reads from and writes to that data.</P
></LI
><LI
CLASS="listitem"
><P
CLASS="para"
><EM
CLASS="emphasis"
>Construct multiple packages simultaneously.</EM
> As you build a program, be aware of both existing packages and the need for new areas or layers of functionality. Take the time to break off from development of program A to enhance packages B, C, and D&nbsp;-- and then apply those new features back into A. It might take a little bit longer to finish your first program, but when you are done you will have strengthened your overall <SPAN
CLASS="acronym"
>PL/SQL</SPAN
> development environment and increased your volume of reusable code.</P
></LI
></UL
><DIV
CLASS="sect1"
><H2
CLASS="sect1"
><A
CLASS="title"
NAME="ch02-20342"
>2.1 Starting With Packages</A
></H2
><P
CLASS="para"
>Late in July 1996, I received this note from one of my technical reviewers, John M. Beresniewicz:</P
><BLOCKQUOTE
CLASS="blockquote"
><P
CLASS="para"
>I've built half a dozen pretty hefty packages, and still I find myself wondering at the start of implementing some new functionality: how should I do this? I think packages are intimidating developers out there (maybe I'm wrong) and part of the reason may be that it is very hard to decide what to put where and why. It seems like most of my packages start with an idea that becomes a <I
CLASS="function"
>JMB_</I
><KBD
CLASS="command"
>procname</KBD
> stored procedure. (All initial experiments are named with the prefix <I
CLASS="function"
>JMB_</I
> to let me know they are part of my playground.) As soon as the procedure becomes more than 100 lines long or contains code duplication or a related but different procedure suggests itself or needs to stash some persistent data, a package is magically born. </P
><P
CLASS="para"
>Once spawned, packages often have a life of their own, they grow and mature and sometimes die or are subsumed by larger packages. I don't know if there is an idea here, but something that makes deciding what and how to start a package may help developers... I suppose the whole book is just that in a sense.</P
></BLOCKQUOTE
><P
CLASS="para"
>There is definitely an idea in there, but my perspective is somewhat simpler than what John probably had in mind: Get out of the habit of building standalone procedures and functions. Instead, start with a package! It is certainly the case that most complex programs eventually mutate into or are absorbed by packages. There is nothing wrong with that evolutionary process. You can, however, save yourself some trouble by creating a package to hold that seemingly simple and lonely procedure or function.</P
><P
CLASS="para"
>If you start with a package, several benefits accrue:</P
><UL
CLASS="itemizedlist"
><LI
CLASS="listitem"
><P
CLASS="para"
>You immediately work at a higher level of abstraction. You think of your single program as just one component of a whole range of related functionality. In the first implementation of the package you may not be aware of even one other program for this package, but you are allowing for the possibility of such programs. </P
></LI
><LI
CLASS="listitem"
><P
CLASS="para"
>Related to the level of abstraction, you find yourself creating separate layers and partitions of functionality. Then, as you work on additional programs, you identify the appropriate package for that program. Lo and behold, you find things falling into place. You realize that everything has a place. Your code takes on an elegant sense of internal organization that makes it easier to use and understand.</P
></LI
><LI
CLASS="listitem"
><P
CLASS="para"
>From the beginning, all calls to that program employ the dot notation necessary (and, I would argue, inevitable) to reference a package-based element. You don't have to go back later and change those calls or create another layer of code to support backward compatibility.</P
></LI
></UL
><P
CLASS="para"
>You will never regret the minuscule amount of extra time required to encapsulate your standalone programs inside a package.</P
></DIV
></DIV
><DIV
CLASS="htmlnav"
><P
></P
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch01_06.htm#ch01-SECT-6.2.1"
TITLE="1.6 Building Packages"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 1.6 Building Packages"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="book"
HREF="index.htm"
TITLE="Advanced Oracle PL/SQL Programming with Packages"
><IMG
SRC="../gifs/txthome.gif"
ALT="Advanced Oracle PL/SQL Programming with Packages"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch02_02.htm"
TITLE="2.2 Using Effective Coding Style for Packages"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 2.2 Using Effective Coding Style for Packages"
BORDER="0"></A
></TD
></TR
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
>1.6 Building Packages</TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="index"
HREF="index/idx_0.htm"
TITLE="Book Index"
><IMG
SRC="../gifs/index.gif"
ALT="Book Index"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
>2.2 Using Effective Coding Style for Packages</TD
></TR
></TABLE
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"></DIV
><IMG
SRC="../gifs/smnavbar.gif"
USEMAP="#map"
BORDER="0"
ALT="The Oracle Library Navigation">

<P><font size="-1">
<a href="../copyrght.htm#copy">Copyright (c) 2000</a> O'Reilly & Associates. All rights reserved.
</font></P>

<MAP NAME="map">

<AREA SHAPE="RECT"
COORDS="0,0,35,30"
HREF="../index.htm"
ALT="Library Home">

<AREA SHAPE="RECT"
COORDS="40,0,95,30"
HREF="../prog2/index.htm"
ALT="Oracle PL/SQL Programming, 2nd. Ed.">

<AREA SHAPE="RECT"
COORDS="100,0,200,30"
HREF="../guide8i/index.htm"
ALT="Guide to Oracle 8i Features">

<AREA SHAPE="RECT"
COORDS="205,0,245,30"
HREF="../bipack/index.htm"
ALT="Oracle Built-in Packages">

<AREA SHAPE="RECT"
COORDS="250,0,320,30"
HREF="index.htm"
ALT="Advanced PL/SQL Programming with Packages">

<AREA SHAPE="RECT"
COORDS="325,0,420,30"
HREF="../webapp/index.htm"
ALT="Oracle Web Applications">

<AREA SHAPE="RECT"
COORDS="425,0,490,30"
HREF="../langpkt/index.htm"
ALT="Oracle PL/SQL Language Pocket Reference">

<AREA SHAPE="RECT"
COORDS="495,0,570,30"
HREF="../bipkt/index.htm"
ALT="Oracle PL/SQL Built-ins Pocket Reference">
</MAP>
</BODY
>
<!-- Mirrored from liso.cs.pusan.ac.kr by HTTrack Website Copier/3.x [XR&CO'2001] -->
</HTML
>
