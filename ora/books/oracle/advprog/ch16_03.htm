<HTML
><HEAD
><TITLE
>[Chapter 16] 16.3 Modifying PLVgen Behavior</TITLE
><META
NAME="DC.Creator"
CONTENT="Steven Feuerstein"><META
NAME="DC.Date"
CONTENT="2000-04-29T18:29:25Z"><META
NAME="DC.Format"
CONTENT="text/html"
SCHEME="MIME"><META
NAME="DC.Identifier"
CONTENT="O'Reilly and Associates-1-56592-238-7E"><META
NAME="DC.Language"
CONTENT="en-US"><META
NAME="DC.Publisher"
CONTENT="O'Reilly &amp; Associates, Inc."><META
NAME="DC.Source"
CONTENT="1-56592-238-7E"
SCHEME="ISBN"><META
NAME="DC.Subject.Keyword"
CONTENT="PL/SQL SQL Oracle Packages"><META
NAME="DC.Title"
CONTENT="Advanced Oracle PL/SQL Programming with Packages"><META
NAME="DC.Type"
CONTENT="Text.Monograph"><META
NAME="generator"
CONTENT="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><LINK
REL="stylesheet"
TYPE="text/css"
HREF="../style/style1.css"><LINK
REV="made"
HREF="mailto:online-books@oreilly.com"
TITLE="Online Books Comments"><LINK
REL="up"
HREF="ch16_01.htm"
TITLE="16. PLVgen: Generating PL/SQL Programs"><LINK
REL="prev"
HREF="ch16_02.htm#ch16-SECT-2.3.2"
TITLE="16.2 Code Generated by PLVgen"><LINK
REL="next"
HREF="ch16_04.htm#ch16-SECT-4.3.2"
TITLE="16.4 Implementing PLVgen"></HEAD>
<BODY><DIV CLASS="htmlnav"
><H1
><IMG
SRC="gifs/smbanner.gif"
ALT="Advanced Oracle PL/SQL Programming with Packages"
USEMAP="#srchmap"
BORDER="0"></H1
><MAP
NAME="srchmap"
><AREA
SHAPE="RECT"
COORDS="0,0,466,65"
HREF="index.htm"
ALT="Advanced Oracle PL/SQL Programming with Packages"><AREA
SHAPE="RECT"
COORDS="467,0,514,18"
HREF="jobjects/fsearch.htm"
ALT="Search this book"></MAP
><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch16_02.htm#ch16-SECT-2.3.2"
TITLE="16.2 Code Generated by PLVgen"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 16.2 Code Generated by PLVgen"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><SPAN
CLASS="NAVTITLE"
><A
CLASS="chapter"
REL="up"
HREF="ch16_01.htm"
TITLE="16. PLVgen: Generating PL/SQL Programs"
>Chapter 16<BR>PLVgen: Generating PL/SQL Programs</A
></SPAN
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch16_04.htm#ch16-SECT-4.3.2"
TITLE="16.4 Implementing PLVgen"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 16.4 Implementing PLVgen"
BORDER="0"></A
></TD
></TR
></TABLE
>&nbsp;<HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"></DIV
><DIV
CLASS="sect1"
><H2
CLASS="sect1"
><A
CLASS="title"
NAME="ch16-10979"
>16.3 Modifying PLVgen Behavior</A
></H2
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="ch16-idx-1000266-0"
></A
>The PLVgen package is a tool to improve the quality of life of developers. It can be used directly in an environment like SQL*Plus. It can also be utilized from within a GUI interface to make it easier to select options and combine different code fragments. Given the wide variety of circumstances under which PLVgen could be used, and the variety of coding styles used by developers, I face a big challenge in implementing PLVgen: make it flexible!</P
><P
CLASS="para"
>I cannot, for example, force anyone to use my PLVexc package to handle exceptions. An application team might not want to use the PLVtrc package to build in an execution trace. If I don't give users of PLVgen the option to use and ignore these different elements, I will not have very many users of the package. Consequently, I supply a variety of get-and-set programs in PLVgen to toggle various aspects of generate behavior. I even used early versions of PLVgen to generate get-and-set programs for the PLVgen package itself!</P
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="ch16-idx-1000267-0"
></A
>PLVgen offers a set of toggles to turn on or off the inclusion of various elements of code. It also provides a set of programs to modify the appearance of output, particularly as regards indentation. These programs are listed in <A
CLASS="xref"
HREF="ch16_03.htm#ch16-SECT-3.3"
>Table 16.1</A
> and are explained in the following sections. </P
><BR><TABLE
CLASS="table"
BORDER="1"
CELLPADDING="3"
><CAPTION
CLASS="table"
><A
CLASS="title"
NAME="ch16-28576"
>Table 16.1: Programs to Modify PLVgen Behavior and Output </A
></CAPTION
><THEAD
CLASS="thead"
><TR
CLASS="row"
VALIGN="TOP"
><TH
CLASS="entry"
ALIGN="LEFT"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>Behavior</P
></TH
><TH
CLASS="entry"
ALIGN="LEFT"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>Programs</P
></TH
><TH
CLASS="entry"
ALIGN="LEFT"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>Description</P
></TH
></TR
></THEAD
><TBODY
CLASS="tbody"
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>Set author</P
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
> <CODE
CLASS="literal"
> set_author author</CODE
> </TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>Sets and retrieves the current string used as the author in a program header. The default is <KBD
CLASS="command"
>NULL</KBD
>.</P
></TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>Set indentation</P
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
> <CODE
CLASS="literal"
> set_indent indent incr_indent</CODE
> </TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>Sets and retrieves the two types of indentation: initial and incremental. The default for the indent is 0 and for the incremental is 3.</P
></TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>Use program trace</P
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
> <CODE
CLASS="literal"
> usetrc nousetrc</CODE
> </TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>Inserts calls to <KBD
CLASS="command"
>PLVtrc.startup</KBD
> and <KBD
CLASS="command"
>PLVtrc.terminate</KBD
> in generated procedures and functions. Default is OFF.</P
></TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>Use exception handling</P
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
> <CODE
CLASS="literal"
> useexc nouseexc</CODE
> </TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>Inserts a <SPAN
CLASS="acronym"
>WHEN</SPAN
> <SPAN
CLASS="acronym"
>OTHERS</SPAN
> exception handler that calls the exception handler <KBD
CLASS="command"
>PLVexc.rec_continue</KBD
>, a generic program that records the error and then continues execution. You can then add other handlers as well. Default is OFF.</P
></TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>Use program header</P
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
> <CODE
CLASS="literal"
> usehdr nousehdr</CODE
> </TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>Places a header (within a comment block) for procedures and functions. This header uses the author name set with a call to <KBD
CLASS="command"
>set_author</KBD
>. Default is OFF.</P
></TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>Use comments</P
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
> <CODE
CLASS="literal"
> usecmnt nousecmnt</CODE
> </TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>Places comments inside the generated code. Examples of comments include banners for the different components of a package and descriptions of the components of get-and-set routines. Default is ON.</P
></TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>Use online help</P
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
> <CODE
CLASS="literal"
> usehlp nousehlp</CODE
> </TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>Puts stubs for help text in programs and also creates a procedure in your generated package to provide help for that package. Default is ON.</P
></TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>Add <SPAN
CLASS="acronym"
>CREATE</SPAN
> OR <SPAN
CLASS="acronym"
>REPLACE</SPAN
></P
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
> <CODE
CLASS="literal"
> usecor nousecor</CODE
> </TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>Adds the syntax necessary to <SPAN
CLASS="acronym"
>CREATE</SPAN
> OR <SPAN
CLASS="acronym"
>REPLACE</SPAN
> the generated procedure, function, or package. Default is OFF.</P
></TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>Use line numbers</P
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
> <CODE
CLASS="literal"
> useln nouseln</CODE
> </TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>Displays the line number next to the source code. </P
></TD
></TR
></TBODY
></TABLE
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch16-SECT-3.1"
>16.3.1 Indentation in PLVgen</A
></H3
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="ch16-idx-1000268-0"
></A
><A
CLASS="indexterm"
NAME="ch16-idx-1000268-1"
></A
>There are two elements to indentation: the initial indentation and the next or incremental indentation. The initial value is the number of spaces inserted before any line of code is generated. The incremental indentation is the number of spaces indented for each successive indent (code within a loop, declarations within the declaration section, and so on). PLVgen provides a single set program for both of these values:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>PROCEDURE <A
CLASS="indexterm"
NAME="ch16-idx-1000269-0"
></A
>set_indent 
   (indent_in IN NUMBER, 
    incr_indent_in IN NUMBER := c_incr_indent);</PRE
></BLOCKQUOTE
><P
CLASS="para"
>The default starting indentation is 0. The default incremental indentation is 3. Use the <KBD
CLASS="command"
>set_indent</KBD
> procedure to change either or both of these values. </P
><P
CLASS="para"
>PLVgen provides two functions to return the current indentation values. The <KBD
CLASS="command"
>indent</KBD
> function returns the current starting indentation value. The <KBD
CLASS="command"
>incr_indent</KBD
> function returns the current incremental indentation value. The headers for these functions are shown below:<A
CLASS="indexterm"
NAME="ch16-idx-1000270-0"
></A
><A
CLASS="indexterm"
NAME="ch16-idx-1000270-1"
></A
></P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>FUNCTION indent RETURN NUMBER;
FUNCTION incr_indent RETURN NUMBER;</PRE
></BLOCKQUOTE
><P
CLASS="para"
>When might you call <KBD
CLASS="command"
>set_indent</KBD
>? If you are going to generate a function to stick inside a package, you want to set the starting indentation at 3 (or whatever your standard is) so that the resulting code is indented properly within the context of the package. This saves you editing time in which you insert spaces at the beginning of each line.</P
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch16-SECT-3.2"
>16.3.2 Setting the Code Author</A
></H3
><P
CLASS="para"
>If you are generating a header for your code, you can set the name of the author placed in the header. The default for the author is NULL. You can call the <KBD
CLASS="command"
>set_author</KBD
> procedure to change the author. Call the <KBD
CLASS="command"
>author</KBD
> function to retrieve the current author name.</P
><P
CLASS="para"
>The headers for these two functions are shown below:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>PROCEDURE <A
CLASS="indexterm"
NAME="ch16-idx-1000271-0"
></A
><A
CLASS="indexterm"
NAME="ch16-idx-1000271-1"
></A
><A
CLASS="indexterm"
NAME="ch16-idx-1000271-2"
></A
><A
CLASS="indexterm"
NAME="ch16-idx-1000271-3"
></A
>set_author (author_in IN VARCHAR2);
FUNCTION author RETURN VARCHAR2;</PRE
></BLOCKQUOTE
><P
CLASS="para"
>The following execution of <KBD
CLASS="command"
>set_author</KBD
>, for example, sets the name to "Steven Feuerstein".</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>SQL&gt; exec PLVgen.set_author ('Steven Feuerstein');</PRE
></BLOCKQUOTE
><P
CLASS="para"
>To make certain that this author value is always set for me when generating code, I include the above command in my <KBD
CLASS="command"
>login.sql</KBD
> script. This file is executed automatically on startup of SQL*Plus and initializes my environment.</P
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch16-SECT-3.3"
>16.3.3 Using the Program Header</A
></H3
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="ch16-idx-1000272-0"
></A
><A
CLASS="indexterm"
NAME="ch16-idx-1000272-1"
></A
>You can decide if you want PLVgen to include a standard header in your generated program units (packages, functions, and procedures). The format for this header is:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>/*
|| Program: 
||  Author: 
||    File: 
|| Created: 
*/</PRE
></BLOCKQUOTE
><P
CLASS="para"
>The program name is usually taken from other inputs to the generator program. The author string is set through a call to PLV<KBD
CLASS="command"
>gen.author</KBD
>. The file name is constructed from the program string. The create date/time stamp is SYSDATE.</P
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="ch16-idx-1000273-0"
></A
>You can toggle the header on or off. In addition, you can call a function to determine the current status of the "use program header" toggle. The headers for these three programs are:<A
CLASS="indexterm"
NAME="ch16-idx-1000274-0"
></A
><A
CLASS="indexterm"
NAME="ch16-idx-1000274-1"
></A
><A
CLASS="indexterm"
NAME="ch16-idx-1000274-2"
></A
></P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>PROCEDURE usehdr;
PROCEDURE nousehdr;
FUNCTION using_hdr RETURN BOOLEAN;</PRE
></BLOCKQUOTE
><P
CLASS="para"
>You call <KBD
CLASS="command"
>usehdr</KBD
> to turn on use of the header and <KBD
CLASS="command"
>nousehdr</KBD
> to turn off the header. Call the <KBD
CLASS="command"
>using_hdr</KBD
> function if you want to know whether the header is being used. (This is included mostly as a courtesy and for completeness. Usually you simply turn the feature on or off and be done with it.)</P
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch16-SECT-3.4"
>16.3.4 Using the Program Trace </A
></H3
><P
CLASS="para"
>The <A
CLASS="indexterm"
NAME="ch16-idx-1000275-0"
></A
><A
CLASS="indexterm"
NAME="ch16-idx-1000275-1"
></A
><A
CLASS="indexterm"
NAME="ch16-idx-1000275-2"
></A
>PLVtrc package offers the ability to maintain a trace of the programs that are currently on the execution stack of <SPAN
CLASS="acronym"
>PL/SQL</SPAN
>. <SPAN
CLASS="acronym"
>PL/SQL</SPAN
> itself provides this information with the DBMS_UTILITY.FORMAT_CALL_STACK function, but that stack does not show the names of programs within a package&nbsp;-- a serious drawback for package-centered <SPAN
CLASS="acronym"
>PL/SQL</SPAN
> code development. So you can call <KBD
CLASS="command"
>PLVtrc.startup</KBD
> to indicate that a particular program has started. And you call <KBD
CLASS="command"
>PLVtrc.terminate</KBD
> to signal that the program has ended. See <A
CLASS="xref"
HREF="ch21_01.htm"
>Chapter 21, <CITE
CLASS="chapter"
>PLVlog and PLVtrc: Logging and Tracing</CITE
></A
>, for more information on how to use PLVtrc.</P
><P
CLASS="para"
>The PLVgen package is "PLVtrc-aware." It automatically inserts calls to the startup and terminate programs of the trace facility if you turn on this feature. You can toggle the trace on or off. In addition, you can call a function to determine the current status of the "use program trace" toggle. The headers for these three programs are:<A
CLASS="indexterm"
NAME="ch16-idx-1000276-0"
></A
><A
CLASS="indexterm"
NAME="ch16-idx-1000276-1"
></A
><A
CLASS="indexterm"
NAME="ch16-idx-1000276-2"
></A
></P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>PROCEDURE usetrc;
PROCEDURE nousetrc;
FUNCTION using_trc RETURN BOOLEAN;</PRE
></BLOCKQUOTE
><P
CLASS="para"
>You call <KBD
CLASS="command"
>usetrc</KBD
> to turn on use of the trace and <KBD
CLASS="command"
>nousetrc</KBD
> to turn off the trace. Call the <KBD
CLASS="command"
>using_trc</KBD
> function if you want to know whether the trace is being used.</P
><P
CLASS="para"
>When you are using the program trace, a generated procedure has at a minimum the following body or execution section:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>PROCEDURE calc_totals
IS
BEGIN
   PLVtrc.startup ('calc_totals');
   PLVtrc.terminate;
END calc_totals;</PRE
></BLOCKQUOTE
><P
CLASS="para"
>Notice that PLVgen automatically inserts the name of the current program unit to <KBD
CLASS="command"
>PLVtrc.startup</KBD
>; you don't have to mess with this. You just insert all of your application-specific code between the startup and terminate lines. By using PLVgen, you can make the use of PLVtrc practical and comprehensive. This is especially worthwhile when you are going to take advantage of the high-level exception handlers provided by PLVexc.</P
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch16-SECT-3.5"
>16.3.5 Using the PLVexc Exception Handler</A
></H3
><P
CLASS="para"
>The <A
CLASS="indexterm"
NAME="ch16-idx-1000277-0"
></A
><A
CLASS="indexterm"
NAME="ch16-idx-1000277-1"
></A
>PLVexc package provides a high-level, declarative approach to exception handling in <SPAN
CLASS="acronym"
>PL/SQL</SPAN
> programs. It is a powerful facility for consistent, high-quality handling of errors. </P
><P
CLASS="para"
>The PLVgen package is also "PLVexc-aware." It automatically creates an exception section and provides a single WHEN OTHERS handler that calls a PLVexc handler procedure. There are two possible handlers that will be placed in the exception section. If you are using PLVtrc (you have called <KBD
CLASS="command"
>PLVgen.usetrc</KBD
>), then the more abstract <KBD
CLASS="command"
>rec_continue</KBD
> procedure will be used. If you are not using PLVtrc, PLVgen inserts a call into the lower-level <KBD
CLASS="command"
>PLVexc.handle</KBD
> procedure (see <A
CLASS="xref"
HREF="ch22_01.htm"
>Chapter 22, <CITE
CLASS="chapter"
>Exception Handling</CITE
></A
>, for more information about the differences between these two programs).</P
><P
CLASS="para"
>You can toggle the inclusion of PLVexc on or off. In addition, you can call a function to determine the current status of the "use program PLVexc" toggle. The headers for these three programs are:<A
CLASS="indexterm"
NAME="ch16-idx-1000278-0"
></A
><A
CLASS="indexterm"
NAME="ch16-idx-1000278-1"
></A
><A
CLASS="indexterm"
NAME="ch16-idx-1000278-2"
></A
></P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>PROCEDURE useexc;
PROCEDURE nouseexc;
FUNCTION using_exc RETURN BOOLEAN;</PRE
></BLOCKQUOTE
><P
CLASS="para"
>You call <KBD
CLASS="command"
>useexc</KBD
> to turn on use of the PLVexc and <KBD
CLASS="command"
>nouseexc</KBD
> to turn off the PLVexc. Call the <KBD
CLASS="command"
>using_exc</KBD
> function if you want to know if PLVexc is being used.</P
><P
CLASS="para"
>When you are using exception handling and the trace facility (enabled by a call to <KBD
CLASS="command"
>PLVgen.usemax</KBD
> or to both <KBD
CLASS="command"
>PLVgen.useexc</KBD
> and <KBD
CLASS="command"
>PLVgen.usetrc</KBD
>), the exception section for a procedure looks like this:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>EXCEPTION
   /* Call PLVexc in every handler. */
   WHEN OTHERS
   THEN
      PLVexc.rec_continue;
END calc_totals;</PRE
></BLOCKQUOTE
><P
CLASS="para"
>Notice the comment line before the exception handler. If you are going to use PLVtrc in conjunction with PLVexc, you must call a PLVexc exception handler procedure in every exception handler section.</P
><P
CLASS="para"
>If you have turned on exception handling in PLVgen, but have turned off use of PLVtrc, the exception section for your generated programs looks like this:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>EXCEPTION
   WHEN OTHERS
   THEN
      PLVexc.handle (calc_totals, SQLCODE, PLVexc.rec_continue);
END calc_totals;</PRE
></BLOCKQUOTE
><BLOCKQUOTE
CLASS="note"
><P
CLASS="para"
><STRONG
>NOTE:</STRONG
>  If you want to use a different PLVexc handler, such as <KBD
CLASS="command"
>rec_halt</KBD
>, you need to cut and paste and then edit your generated code (you could, alternatively, change the name of the default handler, that is stored in <KBD
CLASS="command"
>c_PLVexc_handler</KBD
> in the PLVgen body).</P
></BLOCKQUOTE
><P
CLASS="para"
>When you are not using PLVexc-based exception handling (you have called <KBD
CLASS="command"
>PLVgen.nouseexc</KBD
>), the exception section for a procedure looks like this:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>EXCEPTION
   WHEN OTHERS
   THEN
      NULL;
END calc_totals;</PRE
></BLOCKQUOTE
><P
CLASS="para"
>So even when you do not take advantage of PL/Vision-based exception handling, PLVgen still generates an exception section in your code. This is an important element of best practices for module construction and should almost never be compromised.</P
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch16-SECT-3.6"
>16.3.6 Generating Comments</A
></H3
><P
CLASS="para"
>PLVgen includes a number of different kinds of comments in your generated code. You can toggle the generation of these comments on or off. In addition, you can call a function to determine the current status of the "use comments" toggle. The headers for these three programs are:<A
CLASS="indexterm"
NAME="ch16-idx-1000280-0"
></A
><A
CLASS="indexterm"
NAME="ch16-idx-1000280-1"
></A
><A
CLASS="indexterm"
NAME="ch16-idx-1000280-2"
></A
></P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>PROCEDURE usecmnt;
PROCEDURE nousecmnt;
FUNCTION using_cmnt RETURN BOOLEAN;</PRE
></BLOCKQUOTE
><P
CLASS="para"
>You call <KBD
CLASS="command"
>usecmnt</KBD
> to turn on use of the comment lines and <KBD
CLASS="command"
>nousecmnt</KBD
> to turn it off. Call the <KBD
CLASS="command"
>using_cmnt</KBD
> function if you want to know whether the comments are being used.</P
><BLOCKQUOTE
CLASS="note"
><P
CLASS="para"
><STRONG
>NOTE:</STRONG
>  The header and the help text stubs are not affected by the setting of this toggle. They are <SPAN
CLASS="acronym"
>PL/SQL</SPAN
> comments, but they act as specialized text within the PLVgen package and so are treated differently (with their own toggles).</P
></BLOCKQUOTE
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch16-SECT-3.7"
>16.3.7 <A
CLASS="indexterm"
NAME="ch16-idx-1000281-0"
></A
><A
CLASS="indexterm"
NAME="ch16-idx-1000281-1"
></A
><A
CLASS="indexterm"
NAME="ch16-idx-1000281-2"
></A
>Generating Online Help Text Stubs</A
></H3
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="ch16-idx-1000279-0"
></A
><A
CLASS="indexterm"
NAME="ch16-idx-1000279-1"
></A
>You can control the generation of online help text stubs (available through use of the PLVhlp package) with the "use help" toggle. You can toggle the generation of these stubs on or off. In addition, you can call a function to determine the current status of the "use help" toggle. The headers for these three programs are:<A
CLASS="indexterm"
NAME="ch16-idx-1000282-0"
></A
><A
CLASS="indexterm"
NAME="ch16-idx-1000282-1"
></A
><A
CLASS="indexterm"
NAME="ch16-idx-1000282-2"
></A
></P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>PROCEDURE usehlp;
PROCEDURE nousehlp;
FUNCTION using_hlp RETURN BOOLEAN;</PRE
></BLOCKQUOTE
><P
CLASS="para"
>You call <KBD
CLASS="command"
>usehlp</KBD
> to turn on use of the comment lines and <KBD
CLASS="command"
>nousehlp</KBD
> to turn it off. Call the <KBD
CLASS="command"
>using_hlp</KBD
> function if you want to know whether the comments are being used.</P
><P
CLASS="para"
>If you know that you are not going to use PLVhlp to make online help available to users, you can keep these extraneous comments out of your programs with a call to the <KBD
CLASS="command"
>PLVgen.nousehlp</KBD
> procedure. If you generate these stubs into your programs and then never use them, you will have absolutely no adverse impact on your program execution.</P
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch16-SECT-3.8"
>16.3.8 <A
CLASS="indexterm"
NAME="ch16-idx-1000283-0"
></A
><A
CLASS="indexterm"
NAME="ch16-idx-1000283-1"
></A
>Generating Line Numbers</A
></H3
><P
CLASS="para"
>PLVgen lets you generate line numbers for your programs. This may not mean much to any of you, but it sure was important to me. I wanted to be able to point out specific lines of generated code for your attention, so I built this facility into the package itself. </P
><P
CLASS="para"
>You can toggle the generation of these line numbers on or off. In addition, you can call a function to determine the current status of the "use line numbers" toggle. The headers for these three programs are:<A
CLASS="indexterm"
NAME="ch16-idx-1000284-0"
></A
><A
CLASS="indexterm"
NAME="ch16-idx-1000284-1"
></A
><A
CLASS="indexterm"
NAME="ch16-idx-1000284-2"
></A
></P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>PROCEDURE useln;
PROCEDURE nouseln;
FUNCTION using_ln RETURN BOOLEAN;</PRE
></BLOCKQUOTE
><P
CLASS="para"
>You call <KBD
CLASS="command"
>useln</KBD
> to turn on use of the line numbers and <KBD
CLASS="command"
>nouseln</KBD
> to turn it off. Call the <KBD
CLASS="command"
>using_ln</KBD
> function if you want to know whether the line numbers are being generated.</P
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch16-SECT-3.9"
>16.3.9 <A
CLASS="indexterm"
NAME="ch16-idx-1000285-0"
></A
>Including CREATE OR REPLACE</A
></H3
><P
CLASS="para"
>When you are generating code to be compiled and stored in the database through SQL*Plus, you need to use the CREATE OR REPLACE syntax. In all other situations (generating code for inclusion in an Oracle Developer/2000 environment or to be pasted into a GUI development environment like Oracle Procedure Builder), you will <EM
CLASS="emphasis"
>not</EM
> use CREATE OR REPLACE. That part of the syntax is done for you.</P
><P
CLASS="para"
>PLVgen gives you the ability to choose whether you want to generate a program with the CREATE OR REPLACE syntax. The three programs managing this toggle are listed here:<A
CLASS="indexterm"
NAME="ch16-idx-1000286-0"
></A
><A
CLASS="indexterm"
NAME="ch16-idx-1000286-1"
></A
><A
CLASS="indexterm"
NAME="ch16-idx-1000286-2"
></A
></P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>PROCEDURE usecor;
PROCEDURE nousecor;
FUNCTION using_cor RETURN BOOLEAN;</PRE
></BLOCKQUOTE
><P
CLASS="para"
>Call the <KBD
CLASS="command"
>usecor</KBD
> program to request that a CREATE OR REPLACE be put before the program unit name&nbsp;-- and a forward slash be added as the last line of the generated output. Call <KBD
CLASS="command"
>nousecor</KBD
> to ignore this DDL syntax. Finally, call <KBD
CLASS="command"
>using_cor</KBD
> to find out the current status of this toggle.</P
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch16-SECT-3.10"
>16.3.10 <A
CLASS="indexterm"
NAME="ch16-idx-1000287-0"
></A
>Setting Groups of Toggles</A
></H3
><P
CLASS="para"
>As you can see, there are many options when it comes to modifying the output and behavior of the PLVgen package. Without this flexibility, I doubt that anyone would ever find a package like PLVgen useful. On the other hand, there may be one thing worse than offering no options: offering too many options. </P
><P
CLASS="para"
>Suppose, for example, you wanted to turn on all of the different toggles available in PLVgen. You would then have to execute all of the following commands:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>SQL&gt; exec PLVgen.usehdr
SQL&gt; exec PLVgen.useexc
SQL&gt; exec PLVgen.usehlp
SQL&gt; exec PLVgen.usecor
SQL&gt; exec PLVgen.usetrc
SQL&gt; exec PLVgen.usecmt
SQL&gt; exec PLVgen.useln</PRE
></BLOCKQUOTE
><P
CLASS="para"
>There are at least two big problems with this: you would have to know about all of these options&nbsp;-- and the set of options will quite likely be expanding in the foreseeable future. You would also have to do an awful lot of typing&nbsp;-- you simply wouldn't bother!</P
><P
CLASS="para"
>This is not a recipe for usability. So in addition to providing each of the individual toggles, I provide two other "master switches" for setting the toggles:<A
CLASS="indexterm"
NAME="ch16-idx-1000288-0"
></A
><A
CLASS="indexterm"
NAME="ch16-idx-1000288-1"
></A
></P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>PROCEDURE usemin;
PROCEDURE usemax;</PRE
></BLOCKQUOTE
><P
CLASS="para"
>The <KBD
CLASS="command"
>usemin</KBD
> program turns off all the toggles; the <KBD
CLASS="command"
>usemax</KBD
> turns them all on. If you want to make sure that you generate line numbers, but otherwise have everything else turned off, you would execute these two commands before generating code:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>SQL&gt; exec PLVgen.usemin;
SQL&gt; exec PLVgen.useln;</PRE
></BLOCKQUOTE
><P
CLASS="para"
>As PLVgen is expanded to support new toggles and areas of flexibility, I expect that it will be necessary to create other programs to turn on or off various sets of toggles. These combinations will create "preferences" and further improve the usability of the package.<A
CLASS="indexterm"
NAME="ch16-idx-1000289-0"
></A
></P
></DIV
></DIV
><DIV
CLASS="htmlnav"
><P
></P
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch16_02.htm#ch16-SECT-2.3.2"
TITLE="16.2 Code Generated by PLVgen"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 16.2 Code Generated by PLVgen"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="book"
HREF="index.htm"
TITLE="Advanced Oracle PL/SQL Programming with Packages"
><IMG
SRC="../gifs/txthome.gif"
ALT="Advanced Oracle PL/SQL Programming with Packages"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch16_04.htm#ch16-SECT-4.3.2"
TITLE="16.4 Implementing PLVgen"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 16.4 Implementing PLVgen"
BORDER="0"></A
></TD
></TR
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
>16.2 Code Generated by PLVgen</TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="index"
HREF="index/idx_0.htm"
TITLE="Book Index"
><IMG
SRC="../gifs/index.gif"
ALT="Book Index"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
>16.4 Implementing PLVgen</TD
></TR
></TABLE
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"></DIV
><IMG
SRC="../gifs/smnavbar.gif"
USEMAP="#map"
BORDER="0"
ALT="The Oracle Library Navigation">

<P><font size="-1">
<a href="../copyrght.htm#copy">Copyright (c) 2000</a> O'Reilly & Associates. All rights reserved.
</font></P>

<MAP NAME="map">

<AREA SHAPE="RECT"
COORDS="0,0,35,30"
HREF="../index.htm"
ALT="Library Home">

<AREA SHAPE="RECT"
COORDS="40,0,95,30"
HREF="../prog2/index.htm"
ALT="Oracle PL/SQL Programming, 2nd. Ed.">

<AREA SHAPE="RECT"
COORDS="100,0,200,30"
HREF="../guide8i/index.htm"
ALT="Guide to Oracle 8i Features">

<AREA SHAPE="RECT"
COORDS="205,0,245,30"
HREF="../bipack/index.htm"
ALT="Oracle Built-in Packages">

<AREA SHAPE="RECT"
COORDS="250,0,320,30"
HREF="index.htm"
ALT="Advanced PL/SQL Programming with Packages">

<AREA SHAPE="RECT"
COORDS="325,0,420,30"
HREF="../webapp/index.htm"
ALT="Oracle Web Applications">

<AREA SHAPE="RECT"
COORDS="425,0,490,30"
HREF="../langpkt/index.htm"
ALT="Oracle PL/SQL Language Pocket Reference">

<AREA SHAPE="RECT"
COORDS="495,0,570,30"
HREF="../bipkt/index.htm"
ALT="Oracle PL/SQL Built-ins Pocket Reference">
</MAP>
</BODY
>
<!-- Mirrored from liso.cs.pusan.ac.kr by HTTrack Website Copier/3.x [XR&CO'2001] -->
</HTML
>
