<HTML
><HEAD
><TITLE
>[Chapter 2] 2.9 Modularizing for Maintainable Packages</TITLE
><META
NAME="DC.Creator"
CONTENT="Steven Feuerstein"><META
NAME="DC.Date"
CONTENT="2000-04-29T18:22:26Z"><META
NAME="DC.Format"
CONTENT="text/html"
SCHEME="MIME"><META
NAME="DC.Identifier"
CONTENT="O'Reilly and Associates-1-56592-238-7E"><META
NAME="DC.Language"
CONTENT="en-US"><META
NAME="DC.Publisher"
CONTENT="O'Reilly &amp; Associates, Inc."><META
NAME="DC.Source"
CONTENT="1-56592-238-7E"
SCHEME="ISBN"><META
NAME="DC.Subject.Keyword"
CONTENT="PL/SQL SQL Oracle Packages"><META
NAME="DC.Title"
CONTENT="Advanced Oracle PL/SQL Programming with Packages"><META
NAME="DC.Type"
CONTENT="Text.Monograph"><META
NAME="generator"
CONTENT="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><LINK
REL="stylesheet"
TYPE="text/css"
HREF="../style/style1.css"><LINK
REV="made"
HREF="mailto:online-books@oreilly.com"
TITLE="Online Books Comments"><LINK
REL="up"
HREF="ch02_01.htm"
TITLE="2. Best Practices for Packages"><LINK
REL="prev"
HREF="ch02_08.htm"
TITLE="2.8 Overloading for Smart Packages"><LINK
REL="next"
HREF="ch02_10.htm#ch02-SECT-10.5"
TITLE="2.10 Hiding Package Data"></HEAD>
<BODY><DIV CLASS="htmlnav"
><H1
><IMG
SRC="gifs/smbanner.gif"
ALT="Advanced Oracle PL/SQL Programming with Packages"
USEMAP="#srchmap"
BORDER="0"></H1
><MAP
NAME="srchmap"
><AREA
SHAPE="RECT"
COORDS="0,0,466,65"
HREF="index.htm"
ALT="Advanced Oracle PL/SQL Programming with Packages"><AREA
SHAPE="RECT"
COORDS="467,0,514,18"
HREF="jobjects/fsearch.htm"
ALT="Search this book"></MAP
><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch02_08.htm"
TITLE="2.8 Overloading for Smart Packages"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 2.8 Overloading for Smart Packages"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><SPAN
CLASS="NAVTITLE"
><A
CLASS="chapter"
REL="up"
HREF="ch02_01.htm"
TITLE="2. Best Practices for Packages"
>Chapter 2<BR>Best Practices for Packages</A
></SPAN
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch02_10.htm#ch02-SECT-10.5"
TITLE="2.10 Hiding Package Data"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 2.10 Hiding Package Data"
BORDER="0"></A
></TD
></TR
></TABLE
>&nbsp;<HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"></DIV
><DIV
CLASS="sect1"
><H2
CLASS="sect1"
><A
CLASS="title"
NAME="ch02-13089"
>2.9 Modularizing for Maintainable Packages</A
></H2
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="ch02-idx-1000064-0"
></A
><A
CLASS="indexterm"
NAME="ch02-idx-1000064-1"
></A
><A
CLASS="indexterm"
NAME="ch02-idx-1000064-2"
></A
>To build packages that are both immediately useful and enhanceable over the long-run, you must avoid any kind of code duplication inside the package. You need to be ready, willing, and able to create private programs in your package to contain all the shared code behind the public programs of the package. The alternative is a debilitating reliance on the Windows cut-and-paste feature. Cut-and-paste will let you build rapidly&nbsp;-- but what you will be building is a wide, deep hole from which you will never see the light of day. </P
><P
CLASS="para"
>I set a simple rule for myself when building packages: never repeat a line of code. Instead, construct a private module and call that module twice (or more, depending on the circumstances). By consolidating any reused logic rigorously, you have less code to debug and maintain. You will often end up with multiple layers of code right <EM
CLASS="emphasis"
>inside</EM
> a single package. These layers will make it easier to enhance the package and also to build in additional functionality, such as the windows and toggles discussed earlier in this chapter.</P
><P
CLASS="para"
>The <A
CLASS="indexterm"
NAME="ch02-idx-1000068-0"
></A
><A
CLASS="indexterm"
NAME="ch02-idx-1000068-1"
></A
><A
CLASS="indexterm"
NAME="ch02-idx-1000068-2"
></A
>PLVdyn package offers an example of in-package layering. As explained in the section on "Building Windows into Packages," the <KBD
CLASS="command"
>open_and_parse</KBD
> function consolidates the open and parse phases of dynamic <SPAN
CLASS="acronym"
>SQL</SPAN
>. This function is then called by many other higher-level operators in PLVdyn. These operators are in turn called by still other programs. The result is at least five layers of code as shown in <A
CLASS="xref"
HREF="ch02_09.htm#ch02-SECT-9.2"
>Figure 2.2</A
>.</P
><BLOCKQUOTE
CLASS="note"
><P
CLASS="para"
><STRONG
>NOTE:</STRONG
>  While it is uncommon, it is certainly possible for two programs to have the same name (and therefore be overloaded) but have little or nothing in common in their implementation. In this situation, you will probably not be able to consolidate the code in the package body for these two programs into a single, private program. There is nothing wrong with this situation (except that it might raise question of why you are using the same name for both programs). </P
></BLOCKQUOTE
><P
CLASS="para"
>The need for modularization inside a package is most clear when it comes to implementing overloaded programs. The next section will explore implementation strategies for overloading.</P
><H4
CLASS="figure"
><A
CLASS="title"
NAME="ch02-26192"
>Figure 2.2: Layers of reusable code in PLVdyn</A
></H4
><IMG
CLASS="graphic"
SRC="figs/pladv_0202.gif"
ALT="Figure 2.2"><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch02-SECT-9.1"
>2.9.1 Implementing Overloading with Private Programs</A
></H3
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="ch02-idx-1000069-0"
></A
>Overloading and modularization must be considered two sides of the same coin if you are going to implement your package properly. The previous section encouraged you to overload frequently and thoroughly. When you overload, you offer multiple versions of the same program. By doing so, you simplify the interface for the user, which is critical. At some point, however, you have to deal with the package body. If you've overloaded a particular procedure ten times, are you going to end up with ten completely separate procedure bodies and a large volume of redundant code that is very difficult to maintain?</P
><P
CLASS="para"
>Let's first understand the problem you can encounter inside packages when you overload. Consider that simplest (at first glance) of packages: the <I
CLASS="function"
>p</I
> package. You might be tempted to think that all it really does is provide a layer of code over the DBMS_OUTPUT.PUT_LINE built-in so that you can pass it more and different types of data. If that were the case, I could implement the <I
CLASS="function"
>p.l</I
> procedure as shown by the two of seven implementations below:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>PROCEDURE l (char_in IN VARCHAR2, number_in IN NUMBER) IS
BEGIN
   DBMS_OUTPUT.PUT_LINE (char_in || ': ' || TO_CHAR (number_in));
END;

PROCEDURE l 
   (char_in IN VARCHAR2, date_in IN DATE,
    mask_in IN VARCHAR2 := PLV.datemask) 
IS
BEGIN
   DBMS_OUTPUT.PUT_LINE
      (char_in || ': ' || TO_CHAR (date_in, mask_in));
END;</PRE
></BLOCKQUOTE
><P
CLASS="para"
>I have achieved the objective of overloading by taking on the job of combining the different pieces of data before passing it to the built-in package. No need for a private program shared by all the <KBD
CLASS="command"
>l</KBD
> procedures, is there? Well, that depends on just how useful you want that package to be. </P
><P
CLASS="para"
>Let's pretend that it is July 1994. I am writing <CITE
CLASS="citetitle"
>Oracle PL/SQL Programming</CITE
> and just beginning to get a handle on packages. The <I
CLASS="function"
>p</I
> package (at that time called the <KBD
CLASS="command"
>do</KBD
> package) is one of my first and I throw it together, just as you see it above: a "raw" call to DBMS_OUTPUT. Then I start to use it to debug the PLVlst package (as it first appeared in that book) and at some point pass it a string with 463 characters. Suddenly, my program is generating a VALUE_ERROR exception. After a hour of debugging, I realize that the problem is not occurring in PLVlst, but in my <I
CLASS="function"
>p</I
> package. The DBMS_OUTPUT.PUT_LINE program cannot handle values with more than 255 bytes. I mutter venomously about the brain-dead implementations proffered at times by Oracle Corporation and quickly move to fix the problem, as you can see below:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>PROCEDURE l (char_in IN VARCHAR2, number_in IN NUMBER) IS
BEGIN
   DBMS_OUTPUT.PUT_LINE 
      (SUBSTR (char_in || ': ' || TO_CHAR (number_in), 1, 255));
END;

PROCEDURE l 
   (char_in IN VARCHAR2, date_in IN DATE,
    mask_in IN VARCHAR2 := PLV.datemask) 
IS
BEGIN
   DBMS_OUTPUT.PUT_LINE
     (SUBSTR (char_in || ': ' || TO_CHAR (date_in, mask_in), 1, 255));
END;</PRE
></BLOCKQUOTE
><P
CLASS="para"
>Remember, I do this for all eight versions of the <I
CLASS="function"
>l</I
> procedure, not just the two you see. Well, that certainly takes care of that problem! So I continue my debugging and soon discover that when I ask DBMS_OUTPUT.PUT_LINE to display a NULL value or any string that LTRIMs to NULL, it just ignores me. I do not see a blank line; it just pretends that I never made the call. This is very confusing and irritating, but again the fix is clear: use the NVL operator. So now each of the <I
CLASS="function"
>l</I
> procedures looks like this:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>PROCEDURE l (char_in IN VARCHAR2, number_in IN NUMBER) IS
BEGIN
   DBMS_OUTPUT.PUT_LINE 
      (NVL (SUBSTR (char_in || ': ' || TO_CHAR (number_in), 1, 255), 
       'NULL'));
END;

PROCEDURE l 
   (char_in IN VARCHAR2, date_in IN DATE,
    mask_in IN VARCHAR2 := PLV.datemask) 
IS
BEGIN
   DBMS_OUTPUT.PUT_LINE
     (NVL (SUBSTR (char_in || ': ' || TO_CHAR (date_in, mask_in),
       1, 255), 'NULL'));
END;</PRE
></BLOCKQUOTE
><P
CLASS="para"
>On and on I go, discovering new wrinkles in the implementation of DBMS_OUTPUT.PUT_LINE and scrambling to compensate in each of my eight procedures (see <A
CLASS="xref"
HREF="ch06_01.htm"
>Chapter 6, <CITE
CLASS="chapter"
>PLV: Top-Level Constants and Functions </CITE
></A
>, for more details on these wrinkles). Eventually each of my <I
CLASS="function"
>l</I
> procedures grows very convoluted, very similar to all the others, and very tedious to maintain. This is clearly not the way to go.</P
><P
CLASS="para"
>Now compare that process with the final state of the <I
CLASS="function"
>p</I
> package. Each of the <I
CLASS="function"
>l</I
> procedures consists of exactly one line of code, as you can see below:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>PROCEDURE l 
   (char_in IN VARCHAR2, number_in IN NUMBER,
    show_in IN BOOLEAN := FALSE) 
IS
BEGIN
   display_line (show_in, char_in || ': ' || TO_CHAR (number_in));
END;

PROCEDURE l 
   (char_in IN VARCHAR2, date_in IN DATE,
    mask_in IN VARCHAR2 := PLV.datemask,
    show_in IN BOOLEAN := FALSE) 
IS
BEGIN
   display_line 
      (show_in, char_in || ': ' || TO_CHAR (date_in, mask_in));
END;</PRE
></BLOCKQUOTE
><P
CLASS="para"
>Only two actions are performed inside the <I
CLASS="function"
>l</I
> procedure:</P
><OL
CLASS="orderedlist"
><LI
CLASS="listitem"
><P
CLASS="para"
>Create the string to be displayed (usually occurring right inside the call to <KBD
CLASS="command"
>display_line</KBD
>), and</P
></LI
><LI
CLASS="listitem"
><P
CLASS="para"
>Call the private module, <KBD
CLASS="command"
>display_line</KBD
>, to handle all the other issues. </P
></LI
></OL
><P
CLASS="para"
>The <KBD
CLASS="command"
>display_line</KBD
> procedure, in turn, looks like this:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>PROCEDURE display_line (show_in IN VARCHAR2, line_in IN VARCHAR2)
IS
   v_maxline INTEGER := 80;
BEGIN
   IF v_show OR show_in
   THEN
      IF RTRIM (line_in) IS NULL
      THEN
         put_line (v_prefix || PLV.nullval);

      ELSIF LTRIM (RTRIM (line_in)) = v_linesep 
      THEN
         put_line (v_prefix); 

      ELSIF LENGTH (line_in) &gt; v_maxline
      THEN
         PLVprs.display_wrap (line_in, v_maxline-5, NULL);

      ELSE 
         put_line 
            (v_prefix ||
             SUBSTR (line_in, 1, c_max_dopl_line-v_prefix_len));
      END IF;
   END IF;
END;</PRE
></BLOCKQUOTE
><P
CLASS="para"
>Wow! It got really complicated, didn't it? In the final version of <I
CLASS="function"
>p.l</I
>, in fact, you can turn off the display of information using the built-in toggle. You can display long lines in paragraph-wrapped format. You can identify a character as a line separator so that white space can be preserved inside stored code and displayed as true blank lines in SQL*Plus. </P
><P
CLASS="para"
>I didn't come up with all of these features in a single flash of inspiration. I built them in over a period of months. Once I had transferred all common logic into the <KBD
CLASS="command"
>display_line</KBD
> procedure, however, it was a cinch to provide significant new functionality: I only had to make the changes in <EM
CLASS="emphasis"
>one location in my package</EM
>. No user of the <I
CLASS="function"
>p</I
> package ever calls the <KBD
CLASS="command"
>display_line</KBD
> procedure; it is hidden. It exists only to consolidate all the common logic for displaying information. </P
><P
CLASS="para"
>I use this same approach throughout PL/Vision. Again and again, you will see the many overloadings of the package specification reduced to a single program inside the package body. I like to think of this of the overload-modularize diamond for packages, which is shown in <A
CLASS="xref"
HREF="ch02_09.htm#ch02-SECT-9.2"
>Figure 2.3</A
>. The upper point of the diamond is the user view: a single action (i.e., overloaded name) known and called by the user. The facets of the diamond broaden out to the different, overloaded programs in the specification. The lower point of the diamond represents the narrowing of the different programs to a single private program in the package body.</P
><H4
CLASS="figure"
><A
CLASS="title"
NAME="ch02-27835"
>Figure 2.3: The overload-modularize diamond for packages</A
></H4
><IMG
CLASS="graphic"
SRC="figs/pladv_0203.gif"
ALT="Figure 2.3"><P
CLASS="para"
>Sometimes creating this diamond shape in your packaged code is straightforward. The <I
CLASS="function"
>p</I
> package illustrates this simple case. The only difference between each of the overloaded programs is the way the string is constructed for display. In other packages, it takes lots more thought and creative programming to come up with a way to conform to my "only in one place" rule. The PLVtab package is such a package; in fact, the complexity of modularizing the internals of PLVtab resulted in what I call the <EM
CLASS="emphasis"
>lava lamp effect</EM
>.<A
CLASS="indexterm"
NAME="ch02-idx-1000070-0"
></A
></P
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch02-SECT-9.2"
>2.9.2 Lava Lamp Code Consolidation</A
></H3
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="ch02-idx-1000071-0"
></A
><A
CLASS="indexterm"
NAME="ch02-idx-1000071-1"
></A
><A
CLASS="indexterm"
NAME="ch02-idx-1000071-2"
></A
>The objective of PLVtab is to make it easier for developers to use <SPAN
CLASS="acronym"
>PL/SQL</SPAN
> tables, particularly when it comes to displaying the contents of these tables. PLVtab predefines a set of table <A
CLASS="indexterm"
NAME="ch02-idx-1000079-0"
></A
>TYPE structures, such as tables of numbers, strings of various lengths, Booleans, and dates. It then offers a separate <KBD
CLASS="command"
>display</KBD
> procedure for each of the table TYPEs. Since each table TYPE is a different datatype, a separate, overloaded program is needed for each TYPE. The headers for two of these follow:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>PROCEDURE display 
 (table_in IN number_table, 
  end_row_in IN INTEGER,
  header_in IN VARCHAR2 := NULL,
  start_row_in IN INTEGER := 1,
  failure_threshold_in IN INTEGER := 0,
  increment_in IN INTEGER := +1);

PROCEDURE display 
 (table_in IN vc30_table, 
  end_row_in IN INTEGER,
  header_in IN VARCHAR2 := NULL,
  start_row_in IN INTEGER := 1,
  failure_threshold_in IN INTEGER := 0,
  increment_in IN INTEGER := +1);</PRE
></BLOCKQUOTE
><P
CLASS="para"
>As you can see from all of the parameters in the <KBD
CLASS="command"
>display</KBD
> procedures, PLVtab offers lots of flexibility in what you display and how you display it. This kind of flexibility <EM
CLASS="emphasis"
>always</EM
> means a more complex implementation behind the scene in the package body. In fact, I use 184 lines of code spread across two private procedures to handle all the logic. Yet the body of each <KBD
CLASS="command"
>display</KBD
> procedure consists of just three lines as illustrated by the <KBD
CLASS="command"
>number_table</KBD
> <KBD
CLASS="command"
>display</KBD
> procedure below:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>PROCEDURE display 
   (table_in IN number_table, 
   end_row_in IN INTEGER,
   header_in IN VARCHAR2 := NULL,
   start_row_in IN INTEGER := 1,
   failure_threshold_in IN INTEGER := 0,
   increment_in IN INTEGER := +1)
IS
BEGIN
   internal_number := table_in;
   internal_display
      (c_number, end_row_in, header_in, start_row_in, 
       failure_threshold_in, increment_in);
   internal_number := empty_number;
END;</PRE
></BLOCKQUOTE
><P
CLASS="para"
>The first line copies the incoming table to a private <SPAN
CLASS="acronym"
>PL/SQL</SPAN
> table of the same type; the second line calls the consolidated, internal version of the <KBD
CLASS="command"
>display</KBD
> program; and the third line empties the private <SPAN
CLASS="acronym"
>PL/SQL</SPAN
> table to minimize memory utilization. These same three lines appear in each of the nine <KBD
CLASS="command"
>display</KBD
> procedures, the only difference being the type of the private <SPAN
CLASS="acronym"
>PL/SQL</SPAN
> table and the first argument in the call to <KBD
CLASS="command"
>internal_display</KBD
>. This value tells <KBD
CLASS="command"
>internal_display</KBD
> which table is to be displayed. This approach allows me to create the lower point of my diamond: a single program called by each <KBD
CLASS="command"
>display</KBD
> program.</P
><P
CLASS="para"
>The difference in this case&nbsp;-- what I call the lava lamp effect&nbsp;-- is that deep within the <KBD
CLASS="command"
>internal_display</KBD
> procedure, I broaden out my code again (creating a base for my lava lamp; see <A
CLASS="xref"
HREF="ch02_09.htm#ch02-SECT-9.2"
>Figure 2.4</A
>) with a large IF statement.</P
><H4
CLASS="figure"
><A
CLASS="title"
NAME="ch02-16758"
>Figure 2.4: The lava lamp effect for consolidating overloaded code</A
></H4
><IMG
CLASS="graphic"
SRC="figs/pladv_0204.gif"
ALT="Figure 2.4"><P
CLASS="para"
>The main algorithm of <KBD
CLASS="command"
>internal_display</KBD
> is this WHILE loop:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>WHILE in_range (current_row) AND within_threshold
LOOP
   display_row
      (type_in, failure_threshold_in, increment_in, 
      count_misses, current_row, within_threshold);
END LOOP;</PRE
></BLOCKQUOTE
><P
CLASS="para"
>which translates roughly as "display each row within the specified range." The <KBD
CLASS="command"
>display_row</KBD
> is another private procedure that converts the <KBD
CLASS="command"
>type_in</KBD
> argument (the type of table being displayed) and the <KBD
CLASS="command"
>current_row</KBD
> into the row value to be displayed. To do this, it uses a big IF statement, a portion of which is shown here:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>...
ELSIF type_in = c_date
THEN
   rowval := TO_CHAR (internal_date (current_row), PLV.datemask);

ELSIF type_in = c_integer
THEN
   rowval := TO_CHAR (internal_integer (current_row));

ELSIF type_in = c_number
THEN
   rowval := TO_CHAR (internal_number (current_row));

ELSIF type_in = c_vc30
THEN
   rowval := internal_vc30 (current_row);
...</PRE
></BLOCKQUOTE
><P
CLASS="para"
>The overloading and modularization in PLVtab (and PLVgen as well) reminds me of playing an accordion: First, I squeeze in to present a single program for the user. Then I pull out to define the many overloadings in the specification. Squeeze back in to implement all those overloadings with a single private module. Pull back out inside that private module to handle all the different types of data. It may seem like a convoluted road to travel, but the end result is code that is very easily maintained, enhanced, and expanded. </P
><P
CLASS="para"
>As an exercise for the reader, I suggest that you perform this exercise: make a copy of <I
CLASS="function"
>PLVtab.sps</I
> and <I
CLASS="function"
>PLVtab.spb</I
> and see if you can figure out the steps required to add support for another type of <SPAN
CLASS="acronym"
>PL/SQL</SPAN
><A
CLASS="indexterm"
NAME="ch02-idx-1000073-0"
></A
><A
CLASS="indexterm"
NAME="ch02-idx-1000073-1"
></A
><A
CLASS="indexterm"
NAME="ch02-idx-1000073-2"
></A
> table.<A
CLASS="indexterm"
NAME="ch02-idx-1000066-0"
></A
><A
CLASS="indexterm"
NAME="ch02-idx-1000066-1"
></A
></P
></DIV
></DIV
><DIV
CLASS="htmlnav"
><P
></P
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch02_08.htm"
TITLE="2.8 Overloading for Smart Packages"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 2.8 Overloading for Smart Packages"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="book"
HREF="index.htm"
TITLE="Advanced Oracle PL/SQL Programming with Packages"
><IMG
SRC="../gifs/txthome.gif"
ALT="Advanced Oracle PL/SQL Programming with Packages"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch02_10.htm#ch02-SECT-10.5"
TITLE="2.10 Hiding Package Data"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 2.10 Hiding Package Data"
BORDER="0"></A
></TD
></TR
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
>2.8 Overloading for Smart Packages</TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="index"
HREF="index/idx_0.htm"
TITLE="Book Index"
><IMG
SRC="../gifs/index.gif"
ALT="Book Index"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
>2.10 Hiding Package Data</TD
></TR
></TABLE
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"></DIV
><IMG
SRC="../gifs/smnavbar.gif"
USEMAP="#map"
BORDER="0"
ALT="The Oracle Library Navigation">

<P><font size="-1">
<a href="../copyrght.htm#copy">Copyright (c) 2000</a> O'Reilly & Associates. All rights reserved.
</font></P>

<MAP NAME="map">

<AREA SHAPE="RECT"
COORDS="0,0,35,30"
HREF="../index.htm"
ALT="Library Home">

<AREA SHAPE="RECT"
COORDS="40,0,95,30"
HREF="../prog2/index.htm"
ALT="Oracle PL/SQL Programming, 2nd. Ed.">

<AREA SHAPE="RECT"
COORDS="100,0,200,30"
HREF="../guide8i/index.htm"
ALT="Guide to Oracle 8i Features">

<AREA SHAPE="RECT"
COORDS="205,0,245,30"
HREF="../bipack/index.htm"
ALT="Oracle Built-in Packages">

<AREA SHAPE="RECT"
COORDS="250,0,320,30"
HREF="index.htm"
ALT="Advanced PL/SQL Programming with Packages">

<AREA SHAPE="RECT"
COORDS="325,0,420,30"
HREF="../webapp/index.htm"
ALT="Oracle Web Applications">

<AREA SHAPE="RECT"
COORDS="425,0,490,30"
HREF="../langpkt/index.htm"
ALT="Oracle PL/SQL Language Pocket Reference">

<AREA SHAPE="RECT"
COORDS="495,0,570,30"
HREF="../bipkt/index.htm"
ALT="Oracle PL/SQL Built-ins Pocket Reference">
</MAP>
</BODY
>
<!-- Mirrored from liso.cs.pusan.ac.kr by HTTrack Website Copier/3.x [XR&CO'2001] -->
</HTML
>
