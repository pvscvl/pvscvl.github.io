<HTML
><HEAD
><TITLE
>[Chapter 2] 2.6 Building Flexibility Into Your Packages</TITLE
><META
NAME="DC.Creator"
CONTENT="Steven Feuerstein"><META
NAME="DC.Date"
CONTENT="2000-04-29T18:22:00Z"><META
NAME="DC.Format"
CONTENT="text/html"
SCHEME="MIME"><META
NAME="DC.Identifier"
CONTENT="O'Reilly and Associates-1-56592-238-7E"><META
NAME="DC.Language"
CONTENT="en-US"><META
NAME="DC.Publisher"
CONTENT="O'Reilly &amp; Associates, Inc."><META
NAME="DC.Source"
CONTENT="1-56592-238-7E"
SCHEME="ISBN"><META
NAME="DC.Subject.Keyword"
CONTENT="PL/SQL SQL Oracle Packages"><META
NAME="DC.Title"
CONTENT="Advanced Oracle PL/SQL Programming with Packages"><META
NAME="DC.Type"
CONTENT="Text.Monograph"><META
NAME="generator"
CONTENT="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><LINK
REL="stylesheet"
TYPE="text/css"
HREF="../style/style1.css"><LINK
REV="made"
HREF="mailto:online-books@oreilly.com"
TITLE="Online Books Comments"><LINK
REL="up"
HREF="ch02_01.htm"
TITLE="2. Best Practices for Packages"><LINK
REL="prev"
HREF="ch02_05.htm#ch02-SECT-5.3"
TITLE="2.5 Constructing the Optimal Interface to Your Package"><LINK
REL="next"
HREF="ch02_07.htm"
TITLE="2.7 Building Windows Into Your Packages"></HEAD>
<BODY><DIV CLASS="htmlnav"
><H1
><IMG
SRC="gifs/smbanner.gif"
ALT="Advanced Oracle PL/SQL Programming with Packages"
USEMAP="#srchmap"
BORDER="0"></H1
><MAP
NAME="srchmap"
><AREA
SHAPE="RECT"
COORDS="0,0,466,65"
HREF="index.htm"
ALT="Advanced Oracle PL/SQL Programming with Packages"><AREA
SHAPE="RECT"
COORDS="467,0,514,18"
HREF="jobjects/fsearch.htm"
ALT="Search this book"></MAP
><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch02_05.htm#ch02-SECT-5.3"
TITLE="2.5 Constructing the Optimal Interface to Your Package"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 2.5 Constructing the Optimal Interface to Your Package"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><SPAN
CLASS="NAVTITLE"
><A
CLASS="chapter"
REL="up"
HREF="ch02_01.htm"
TITLE="2. Best Practices for Packages"
>Chapter 2<BR>Best Practices for Packages</A
></SPAN
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch02_07.htm"
TITLE="2.7 Building Windows Into Your Packages"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 2.7 Building Windows Into Your Packages"
BORDER="0"></A
></TD
></TR
></TABLE
>&nbsp;<HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"></DIV
><DIV
CLASS="sect1"
><H2
CLASS="sect1"
><A
CLASS="title"
NAME="ch02-34831"
>2.6 Building Flexibility Into Your Packages</A
></H2
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="ch02-idx-999980-0"
></A
><A
CLASS="indexterm"
NAME="ch02-idx-999980-1"
></A
>Who is going to argue with this one? Sure, we want our code to be flexible, in a practical sort of way. It is quite another thing to internalize this issue in the context of packages and figure out how to take full advantage of the package structure to offer maximum flexibility.</P
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="ch02-idx-999984-0"
></A
><A
CLASS="indexterm"
NAME="ch02-idx-999984-1"
></A
>If a program is going to be widely reusable, it should be able to adapt to different circumstances to meet different needs. It is easy to talk about flexibility. I have found that when it comes to packages there are two basic ways to be flexible when writing programs for others to use:</P
><OL
CLASS="orderedlist"
><LI
CLASS="listitem"
><P
CLASS="para"
>Offer lots of parameters in the parameter lists of the package's functions and procedures. This is the traditional, well-worn path.</P
></LI
><LI
CLASS="listitem"
><P
CLASS="para"
>Provide toggles or on-off switches, distinct from the main programs of the package, which modify the behavior of those programs. This approach takes advantage of the package structure to offer a new way of doing things.</P
></LI
></OL
><P
CLASS="para"
>It certainly makes sense to offer arguments in a packaged program unit to improve the flexibility of that <EM
CLASS="emphasis"
>individual</EM
> program. Consider the <KBD
CLASS="command"
>display</KBD
> procedure of the <A
CLASS="indexterm"
NAME="ch02-idx-999994-0"
></A
>PLVtab package, whose header is shown below:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>   PROCEDURE display 
    (table_in IN date_table, 
     end_row_in IN INTEGER,
     header_in IN VARCHAR2 := NULL,
     start_row_in IN INTEGER := 1,
     failure_threshold_in IN INTEGER := 0,
     increment_in IN INTEGER := +1);</PRE
></BLOCKQUOTE
><P
CLASS="para"
>This procedure has a whole bunch of parameters, and every one of them makes sense for the display of a particular table. Do you want to provide a header different from the default "Contents of Table"? Provide an argument to the <KBD
CLASS="command"
>header_in</KBD
> parameter. Do you want to display every fifth row? Pass in 5 for <KBD
CLASS="command"
>increment_in</KBD
>. Sensible defaults are, on the other hand, provided for almost every parameter, so you only need to provide values if you want to override these defaults.</P
><P
CLASS="para"
>What do you do, however, when you want to provide flexibility that affects the behavior of the package <EM
CLASS="emphasis"
>as a whole</EM
>, not just for a particular program? What if you want to alter the configuration of a package for an entire session? Furthermore, what if you want to change the behavior of your package without changing the application code that uses your package?</P
><P
CLASS="para"
>Again, let's take a look at the PLVtab package for an illustration of this situation. PLVtab is a low-level package used throughout PL/Vision under many different circumstances. In some situations, I wanted to be able to display the row number in which the data is found. In other scenarios, I did not want any header to display before the table data was shown. Finally, I thought it would be useful to be able to see a translation of a blank line (i.e., does the line contain actual blanks or is it NULL or is it some other non-printing character?).</P
><P
CLASS="para"
>I could simply have kept adding new parameters to the <KBD
CLASS="command"
>display</KBD
> procedure (actually, adding new parameters to the <EM
CLASS="emphasis"
>nine</EM
> different overloaded versions of <KBD
CLASS="command"
>display</KBD
>) to handle all of these variations. I would then end up with a header for <KBD
CLASS="command"
>display</KBD
> that looked like this:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>   PROCEDURE display 
    (table_in IN date_table, 
     end_row_in IN INTEGER,
     header_in IN VARCHAR2 := NULL,
     start_row_in IN INTEGER := 1,
     failure_threshold_in IN INTEGER := 0,
     increment_in IN INTEGER := +1,
     use_header_in IN BOOLEAN := TRUE,
     show_rownums_in IN BOOLEAN := FALSE,
     show_blanks_in IN BOOLEAN := FALSE);</PRE
></BLOCKQUOTE
><P
CLASS="para"
>I don't know about you, but when I look at programs with more than six or seven parameters, my head starts to spin. Human brains are not, according to numerous studies, well equipped to deal with more than seven items at once. You could contend that these additional parameters increase the flexibility of the <KBD
CLASS="command"
>display</KBD
> procedure. I would argue, instead, that these additional parameters doom the <I
CLASS="function"
>PLVtab.display</I
> procedure to the dustbin of history. Few people will be brave enough to try to use it, particularly if they have to modify the default values of those trailing arguments.</P
><P
CLASS="para"
>Fortunately, certain aspects of the <SPAN
CLASS="acronym"
>PL/SQL</SPAN
> package provide an alternative to turning your procedure into a sinking ship (weighed down by too many parameters): you can build <EM
CLASS="emphasis"
>toggles</EM
> into your packages that allow a user of the package to change the behavior of the utility with the "flip of a switch." </P
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch02-SECT-6.1"
>2.6.1 Toggling Package Behavior</A
></H3
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="ch02-idx-999985-0"
></A
><A
CLASS="indexterm"
NAME="ch02-idx-999985-1"
></A
>You will find toggles appearing throughout the PL/Vision packages. A toggle is a set of three programs: two procedures that allow you to turn a feature on or off, and a function to tell you the current status (on or off). The liberal application of toggles can transform the usability of your packages. The easiest way to teach you this technique is to show you how I use it in PL/Vision.</P
><P
CLASS="para"
>In PLVtab, I did not add a use header argument to the nine display procedures. Instead, I offer a toggle or on-off switch using these three programs:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>   PROCEDURE showhdr;
   PROCEDURE noshowhdr;
   FUNCTION showing_header RETURN BOOLEAN;</PRE
></BLOCKQUOTE
><P
CLASS="para"
>The <I
CLASS="function"
>showhdr</I
> program turns on the showing of the header. The <I
CLASS="function"
>noshowhdr</I
> turns off the display of the header. The <KBD
CLASS="command"
>showing_header</KBD
> function returns TRUE if the header is currently set to be shown. These three programs contain very little. They simply maintain and access a private global variable, as shown below:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>   v_display_header BOOLEAN := TRUE;

   PROCEDURE showhdr IS
   BEGIN
     v_display_header := TRUE;
   END;

   PROCEDURE noshowhdr IS
   BEGIN
     v_display_header := FALSE;
   END;

   FUNCTION showing_header RETURN BOOLEAN IS
   BEGIN
     RETURN v_display_header;
   END;</PRE
></BLOCKQUOTE
><P
CLASS="para"
>How do I put these toggles to use? Suppose that in most cases in my application I wish to hide the header. Since the default value for <KBD
CLASS="command"
>v_display_header</KBD
> is TRUE, I must turn off the display of the header at the start of my session. I could do that in my SQL*Plus <I
CLASS="function"
>login.sql</I
> script as follows:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>exec PLVtab.noshowhdr;</PRE
></BLOCKQUOTE
><P
CLASS="para"
>Alternatively, if I am using PLVtab within an Oracle Developer/2000 Oracle Forms screen, I might place this call inside the When-New-Form-Instance trigger:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>PLVtab.noshowhdr;</PRE
></BLOCKQUOTE
><P
CLASS="para"
>If, at some point in my application, I want to display a table with its header, I can temporarily override the default setting as follows:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>PLVtab.showhdr;
PLVtab.display (selected_comp_tab, v_tot_selected, 'Selected Companies');
PLVtab.noshowhdr;</PRE
></BLOCKQUOTE
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch02-SECT-6.2"
>2.6.2 Toggles for Code Generation</A
></H3
><P
CLASS="para"
>Now consider the <A
CLASS="indexterm"
NAME="ch02-idx-999996-0"
></A
><A
CLASS="indexterm"
NAME="ch02-idx-999996-1"
></A
>PLVgen package. PLVgen generates many different kinds of <SPAN
CLASS="acronym"
>PL/SQL</SPAN
> code elements. I used PLVgen earlier in this chapter, in fact, to generate a template for a package to show you a recommended format for packages. Since there are many variations in the way you might want to generate your code, PLVgen contains <EM
CLASS="emphasis"
>nine</EM
> toggles that affect the appearance and contents of the generated code. It is totally impractical to add nine arguments to every one of my two dozen code generator procedures. It is very practical, on the other hand, to offer you the toggles to set, in effect, your own standard approach to generating <SPAN
CLASS="acronym"
>PL/SQL</SPAN
> code. </P
><P
CLASS="para"
>To offer just two examples, the default settings for this <SPAN
CLASS="acronym"
>PL/SQL</SPAN
> code generator package are to include auto-generated comments and to <EM
CLASS="emphasis"
>not</EM
> include a standard header for program units. I can, however, change those defaults with calls to the appropriate toggles as shown below:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>SQL&gt; exec PLVgen.usehdr
SQL&gt; exec PLVgen.nousecmnt</PRE
></BLOCKQUOTE
><P
CLASS="para"
>These toggle programs set the values of private global variables in the package. These variables are then referenced to determine the behavior of the package. If you look inside the <I
CLASS="function"
>PLVgen.spb</I
> file (the package body), you will also see instances where I call PLVgen toggles from <EM
CLASS="emphasis"
>inside</EM
> some code generators so that I can achieve just the behavior I desire. Consider the <I
CLASS="function"
>helptext</I
> package below.</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>   PROCEDURE helptext (context_in IN VARCHAR2 := PLVhlp.c_main)
   IS
      v_save BOOLEAN := using_hlp;
   BEGIN
      /* Turn off help, but then restore if necessary. */
      usehlp;
      put_help (context_in);
      IF NOT v_save THEN nousehlp; END IF;
   END;</PRE
></BLOCKQUOTE
><P
CLASS="para"
>This procedure generates a comment stub for help text. It calls the private <KBD
CLASS="command"
>put_help</KBD
> procedure to construct that stub. If, however, the user has previously turned off help text generation, this program will do nothing. So the <I
CLASS="function"
>helptext</I
> procedure saves the current setting for using help text, turns that toggle on, generates the help text, and then turns the help text setting off, if that was the previous setting.</P
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch02-SECT-6.3"
>2.6.3 Changing Package Behavior Without Changing the Application</A
></H3
><P
CLASS="para"
>One of the most exciting benefits of package toggles is that they allow a user of the package to modify the behavior of the package without changing any application code that calls the package element. Let's start with an example to explain that complicated statement, and then I will generalize.</P
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="ch02-idx-1000000-0"
></A
>Suppose you want to use the <A
CLASS="indexterm"
NAME="ch02-idx-999999-0"
></A
>PLVlog package to keep track of any changes made to the <KBD
CLASS="command"
>emp</KBD
> table. To do this, you will make calls to <KBD
CLASS="command"
>PLVlog.put_line</KBD
> in the appropriate database triggers. Here is an example of one such call:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>PLVlog.put_line ('insert', :new.empno, :new.empname);</PRE
></BLOCKQUOTE
><P
CLASS="para"
>This request logs the fact that I am inserting a new employee with the specified ID number and name. The log mechanism also records the current user, as well as date and time. This code works just fine and goes into production. Then my company, in the true enterprising spirit of the 1980s and 1990s, purchases a company ten times its own size (which means no more raises for me, since they must now use all their money to pay off interest on the assumed debt). Suddenly, I must add 25,000 employees to my <KBD
CLASS="command"
>emp</KBD
> table. My log table cannot handle this volume of data in its current structure. Furthermore, I don't even really want an audit of this activity. The data should just be "slammed" in and used as a new baseline for corporate employment.</P
><P
CLASS="para"
>If I did not have a toggle in PLVlog, what would I have to do to turn off logging? I can think of two options:</P
><OL
CLASS="orderedlist"
><LI
CLASS="listitem"
><P
CLASS="para"
>Go into each trigger and comment out the call to PLVlog.</P
></LI
><LI
CLASS="listitem"
><P
CLASS="para"
>Disable all triggers on the <KBD
CLASS="command"
>emp</KBD
> table.</P
></LI
></OL
><P
CLASS="para"
>The first approach should make you shudder. You never, ever want to have to go into production code and make such temporary changes&nbsp;-- even (especially?) if those changes are not in a program per se, but are instead a part of the data structures. The second solution is not much better. You have to write a script to disable all the triggers and then this code is disabled for <EM
CLASS="emphasis"
>all</EM
> users of the application, not just the single process, which is going to batch load all of the new employees. So if you disable triggers, you have to deny access to the application by other users. Two very ugly prospects.</P
><P
CLASS="para"
>If, on the other hand, you have a PL/Vision toggle in place, this situation does not cause you any grief at all. Before you start the process to load the employees (let's call it session A), you simply execute this command:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>SQL&gt; exec PLVlog.turn_off</PRE
></BLOCKQUOTE
><P
CLASS="para"
>Now, whenever the database trigger calls <KBD
CLASS="command"
>PLVlog.put_line</KBD
> for DML initiated by session A, nothing happens. Why? Because the first thing <KBD
CLASS="command"
>put_line</KBD
> does is check the value of the private toggle variable (by calling the toggle function) as shown below:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>IF logging OR override_in
THEN
   ... log the information ...
END IF;</PRE
></BLOCKQUOTE
><P
CLASS="para"
>You didn't have to change your program and you didn't have to modify the state of your database. From <EM
CLASS="emphasis"
>outside</EM
> the package, you call the toggle program to reach <EM
CLASS="emphasis"
>inside</EM
> the package and change the way the package will behave. This ability to leave your own code intact comes in particularly handy not only for special exceptions but also for testing, as I explore below.</P
><DIV
CLASS="sect3"
><H4
CLASS="sect3"
><A
CLASS="title"
NAME="ch02-SECT-6.3.1"
>2.6.3.1 The test/debug cycle in PL/SQL</A
></H4
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="ch02-idx-1000001-0"
></A
><A
CLASS="indexterm"
NAME="ch02-idx-1000001-1"
></A
><A
CLASS="indexterm"
NAME="ch02-idx-1000001-2"
></A
>A common debug and test cycle in <SPAN
CLASS="acronym"
>PL/SQL</SPAN
> shops goes like this:</P
><OL
CLASS="orderedlist"
><LI
CLASS="listitem"
><P
CLASS="para"
>You identify incorrect behavior in your program.</P
></LI
><LI
CLASS="listitem"
><P
CLASS="para"
>Unable to understand the cause of the behavior, you place numerous calls to <I
CLASS="function"
>DBMS_OUTPUT.PUT_LINE</I
> (or, with your purchase of this book, PL/Vision's much more friendly <I
CLASS="function"
>p.l</I
> procedure) and other kinds of tracing lines of code so that you can see what is going on.</P
></LI
><LI
CLASS="listitem"
><P
CLASS="para"
>You analyze the output, track down the problem, and fix it.</P
></LI
><LI
CLASS="listitem"
><P
CLASS="para"
>You finally decide that all the bugs are gone. </P
></LI
><LI
CLASS="listitem"
><P
CLASS="para"
>You notify your manager that the application is ready to go. Excitement mounts. Other organizations are told to start moving the code from test to production. Suddenly, you break out in a cold sweat and tell your bewildered manager to "hold off a minute." </P
></LI
><LI
CLASS="listitem"
><P
CLASS="para"
>You forgot about all that debugging code you littered into your application. It can't go into production like that. You have to go back into the program to comment out or outright remove all that trace code. No problem, you tell yourself. Easy to do...but there <EM
CLASS="emphasis"
>could</EM
> be a problem. After all, any time you touch the code, you can break it. After any changes of any kind to your code, you really should retest. </P
></LI
><LI
CLASS="listitem"
><P
CLASS="para"
>So you have to go back to your manager and ask for more time to make sure everything really is all right. Not a pleasant situation in which to find yourself.</P
></LI
></OL
><P
CLASS="para"
>If, on the other hand, you used packages with toggles to trace your debugging activity (such as PLVtrc and even the lower-level <I
CLASS="function"
>p</I
> package), you would not have to worry about any of that. You could keep your code intact and simply issue a call to the appropriate package toggle to turn off any superfluous activity, as in:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>SQL&gt; exec PLVtrc.turn_off
SQL&gt; exec p.turn_off</PRE
></BLOCKQUOTE
><P
CLASS="para"
>Of course, you can do more with toggles than simply turn functionality on and off. Remember that logging capability I built into my <KBD
CLASS="command"
>emp</KBD
> table triggers? Suppose that I want to write my log information to an operating system file instead of to a database table. That is a pretty major change in how the log will work, and a daunting task if the log mechanism is designed poorly. Yet with PL/Vision it requires no change at all to the database triggers. The call to PLV<KBD
CLASS="command"
>log.put_line</KBD
> remains exactly the same. Instead of modifying that application's code, I can simply redirect the output of the logging package with a call to the appropriate procedure as follows:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>SQL&gt; exec PLVlog.to_file ('log.dat');</PRE
></BLOCKQUOTE
><P
CLASS="para"
>and then all subsequent calls to PLV<KBD
CLASS="command"
>log.put_line</KBD
> for that particular Oracle session will write the information to the <I
CLASS="filename"
>log.dat</I
> file on the server. </P
><P
CLASS="para"
>In my experience, package toggles make an enormous difference in the flexibility and usability of my packages. You can never add too many toggles. Just make sure that the default setting is the value that's normally desired. Then only those people who need flexibility in that particular fashion ever need to bother with the toggle. You can always add toggles later; it is generally not the kind of thing you have to plan in advance. This is particularly true if you have been aggressive in modularizing your package body code. If you have religiously avoided code redundancy and repetition (get it?), there will usually be just one place you have to apply the toggle to achieve a new level of flexibility.</P
><P
CLASS="para"
>I cannot overemphasize the importance of toggles in your packages. They are an essential element in transforming your package from a handy utility into a robust, flexible component or what is, in essence, a product. </P
><P
CLASS="para"
>To paraphrase an over-paraphrased saying: "If you toggle your package, they will use it."<A
CLASS="indexterm"
NAME="ch02-idx-999982-0"
></A
><A
CLASS="indexterm"
NAME="ch02-idx-999982-1"
></A
><A
CLASS="indexterm"
NAME="ch02-idx-999982-2"
></A
><A
CLASS="indexterm"
NAME="ch02-idx-999982-3"
></A
></P
></DIV
></DIV
></DIV
><DIV
CLASS="htmlnav"
><P
></P
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch02_05.htm#ch02-SECT-5.3"
TITLE="2.5 Constructing the Optimal Interface to Your Package"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 2.5 Constructing the Optimal Interface to Your Package"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="book"
HREF="index.htm"
TITLE="Advanced Oracle PL/SQL Programming with Packages"
><IMG
SRC="../gifs/txthome.gif"
ALT="Advanced Oracle PL/SQL Programming with Packages"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch02_07.htm"
TITLE="2.7 Building Windows Into Your Packages"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 2.7 Building Windows Into Your Packages"
BORDER="0"></A
></TD
></TR
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
>2.5 Constructing the Optimal Interface to Your Package</TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="index"
HREF="index/idx_0.htm"
TITLE="Book Index"
><IMG
SRC="../gifs/index.gif"
ALT="Book Index"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
>2.7 Building Windows Into Your Packages</TD
></TR
></TABLE
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"></DIV
><IMG
SRC="../gifs/smnavbar.gif"
USEMAP="#map"
BORDER="0"
ALT="The Oracle Library Navigation">

<P><font size="-1">
<a href="../copyrght.htm#copy">Copyright (c) 2000</a> O'Reilly & Associates. All rights reserved.
</font></P>

<MAP NAME="map">

<AREA SHAPE="RECT"
COORDS="0,0,35,30"
HREF="../index.htm"
ALT="Library Home">

<AREA SHAPE="RECT"
COORDS="40,0,95,30"
HREF="../prog2/index.htm"
ALT="Oracle PL/SQL Programming, 2nd. Ed.">

<AREA SHAPE="RECT"
COORDS="100,0,200,30"
HREF="../guide8i/index.htm"
ALT="Guide to Oracle 8i Features">

<AREA SHAPE="RECT"
COORDS="205,0,245,30"
HREF="../bipack/index.htm"
ALT="Oracle Built-in Packages">

<AREA SHAPE="RECT"
COORDS="250,0,320,30"
HREF="index.htm"
ALT="Advanced PL/SQL Programming with Packages">

<AREA SHAPE="RECT"
COORDS="325,0,420,30"
HREF="../webapp/index.htm"
ALT="Oracle Web Applications">

<AREA SHAPE="RECT"
COORDS="425,0,490,30"
HREF="../langpkt/index.htm"
ALT="Oracle PL/SQL Language Pocket Reference">

<AREA SHAPE="RECT"
COORDS="495,0,570,30"
HREF="../bipkt/index.htm"
ALT="Oracle PL/SQL Built-ins Pocket Reference">
</MAP>
</BODY
>
<!-- Mirrored from liso.cs.pusan.ac.kr by HTTrack Website Copier/3.x [XR&CO'2001] -->
</HTML
>
