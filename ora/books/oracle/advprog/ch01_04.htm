<HTML
><HEAD
><TITLE
>[Chapter 1] 1.4 Using Packages</TITLE
><META
NAME="DC.Creator"
CONTENT="Steven Feuerstein"><META
NAME="DC.Date"
CONTENT="2000-04-29T18:21:09Z"><META
NAME="DC.Format"
CONTENT="text/html"
SCHEME="MIME"><META
NAME="DC.Identifier"
CONTENT="O'Reilly and Associates-1-56592-238-7E"><META
NAME="DC.Language"
CONTENT="en-US"><META
NAME="DC.Publisher"
CONTENT="O'Reilly &amp; Associates, Inc."><META
NAME="DC.Source"
CONTENT="1-56592-238-7E"
SCHEME="ISBN"><META
NAME="DC.Subject.Keyword"
CONTENT="PL/SQL SQL Oracle Packages"><META
NAME="DC.Title"
CONTENT="Advanced Oracle PL/SQL Programming with Packages"><META
NAME="DC.Type"
CONTENT="Text.Monograph"><META
NAME="generator"
CONTENT="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><LINK
REL="stylesheet"
TYPE="text/css"
HREF="../style/style1.css"><LINK
REV="made"
HREF="mailto:online-books@oreilly.com"
TITLE="Online Books Comments"><LINK
REL="up"
HREF="ch01_01.htm"
TITLE="1. PL/SQL Packages"><LINK
REL="prev"
HREF="ch01_03.htm#ch01-SECT-3.1"
TITLE="1.3 What Are the Benefits of Packages?"><LINK
REL="next"
HREF="ch01_05.htm#ch01-SECT-5.3"
TITLE="1.5 Types of Packages"></HEAD>
<BODY><DIV CLASS="htmlnav"
><H1
><IMG
SRC="gifs/smbanner.gif"
ALT="Advanced Oracle PL/SQL Programming with Packages"
USEMAP="#srchmap"
BORDER="0"></H1
><MAP
NAME="srchmap"
><AREA
SHAPE="RECT"
COORDS="0,0,466,65"
HREF="index.htm"
ALT="Advanced Oracle PL/SQL Programming with Packages"><AREA
SHAPE="RECT"
COORDS="467,0,514,18"
HREF="jobjects/fsearch.htm"
ALT="Search this book"></MAP
><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch01_03.htm#ch01-SECT-3.1"
TITLE="1.3 What Are the Benefits of Packages?"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 1.3 What Are the Benefits of Packages?"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><SPAN
CLASS="NAVTITLE"
><A
CLASS="chapter"
REL="up"
HREF="ch01_01.htm"
TITLE="1. PL/SQL Packages"
>Chapter 1<BR>PL/SQL Packages</A
></SPAN
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch01_05.htm#ch01-SECT-5.3"
TITLE="1.5 Types of Packages"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 1.5 Types of Packages"
BORDER="0"></A
></TD
></TR
></TABLE
>&nbsp;<HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"></DIV
><DIV
CLASS="sect1"
><H2
CLASS="sect1"
><A
CLASS="title"
NAME="ch01-34363"
>1.4 Using Packages</A
></H2
><P
CLASS="para"
>Whether you are referencing an element in a builtin package, prebuilt package, or build-your-own package, the syntax is the same. One thing to remember is that a package itself is not any kind of executable piece of code. Instead, it is a repository for code that is executed or otherwise used. When you use a package, you actually execute or make reference to an element <EM
CLASS="emphasis"
>in</EM
> a package. To use a package you must know what is defined and available inside the package. This information is contained in the package specification.</P
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch01-SECT-4.1"
>1.4.1 The Package Specification</A
></H3
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="ch01-idx-999330-0"
></A
><A
CLASS="indexterm"
NAME="ch01-idx-999330-1"
></A
><A
CLASS="indexterm"
NAME="ch01-idx-999330-2"
></A
>The package specification contains the definition or specification of all elements in the package that may be referenced outside of the package. These are called the <A
CLASS="indexterm"
NAME="ch01-idx-999331-0"
></A
><I
CLASS="firstterm"
>public</I
> elements of the package. Here is a very simple package specification consisting of two procedures:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>PACKAGE sp_timer
IS
   PROCEDURE capture;
   PROCEDURE show_elapsed;
END sp_timer;</PRE
></BLOCKQUOTE
><P
CLASS="para"
>(The <KBD
CLASS="command"
>sp_timer</KBD
> package is an early version of the PLVtmr package, used to time <SPAN
CLASS="acronym"
>PL/SQL</SPAN
> code execution.) What do you learn by looking at this specification? That you can call either the <KBD
CLASS="command"
>capture</KBD
> or the <KBD
CLASS="command"
>show_elapsed</KBD
> procedures of <KBD
CLASS="command"
>sp_timer</KBD
>&nbsp;-- and that is it.</P
><P
CLASS="para"
>The package specification contains all the code needed for a developer to understand how to call the objects in the package. A developer should never have to examine the code behind the specification (which is the body) in order to understand how to use and benefit from the package.</P
><P
CLASS="para"
>Here is a more generic representation of the syntax for a package specification:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>PACKAGE package_name 
IS
   [ declarations of variables and types ]
   [ headers of cursors ]
   [ headers of procedures and functions ]
END [ package_name ];</PRE
></BLOCKQUOTE
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="ch01-idx-999333-0"
></A
><A
CLASS="indexterm"
NAME="ch01-idx-999333-1"
></A
>You can declare variables and include headers of both cursors and modules (and only the specifications). You must have at least one declaration or header statement in the package specification.</P
><P
CLASS="para"
>Notice that the package specification has its own <A
CLASS="indexterm"
NAME="ch01-idx-999341-0"
></A
>BEGIN-END block syntax. This establishes a named context for all the elements of the package and allows them to exist outside of any particular <SPAN
CLASS="acronym"
>PL/SQL</SPAN
> block, such as a procedure or function.</P
><P
CLASS="para"
>Now let's take a look at a more complex package specification and use that as a springboard to learn how to execute and reference package-based <SPAN
CLASS="acronym"
>PL/SQL</SPAN
> code. <A
CLASS="xref"
HREF="ch01_04.htm#ch01-SECT-4.1"
>Example 1.1</A
> shows the specification for the <KBD
CLASS="command"
>pets_r_us</KBD
> package, which is used by veterinarians to keep track of their patients and to determine when a pet needs another visit. </P
><DIV
CLASS="example"
><H4
CLASS="example"
><A
CLASS="title"
NAME="ch01-25133"
>Example 1.1: The specification of the pets_r_us package</A
></H4
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>PACKAGE pets_r_us 
IS
   max_pets_in_facility CONSTANT INTEGER := 120;
   pet_is_sick EXCEPTION;
   next_appointment DATE := SYSDATE;
   CURSOR onepet_cur (pet_id_in IN INTEGER) RETURN pet%ROWTYPE;
   CURSOR allpets_cur IS SELECT pet_id, name, owner FROM pet;
   FUNCTION next_pet_shots (pet_id_in IN NUMBER) RETURN DATE;
   PROCEDURE set_schedule (pet_id_in IN NUMBER);
END pets_r_us;</PRE
></BLOCKQUOTE
></DIV
><P
CLASS="para"
>The <KBD
CLASS="command"
>pets_r_us</KBD
> package specification shown in <A
CLASS="xref"
HREF="ch01_04.htm#ch01-SECT-4.1"
>Example 1.1</A
> declares a constant, an exception, a variable, two cursors, a function, and a procedure. The constant informs us that the package restricts the number of pets allowed in the facility to 120. The <KBD
CLASS="command"
>pets_r_us</KBD
> package also provides an exception that can be used throughout the application to indicate that a pet is sick. It offers a predefined variable to hold the date of the next appointment and initializes that variable to today's date.</P
><P
CLASS="para"
>The code in this package might look odd to you; only the headers are present for the function and procedure. The executable code for these modules is, in fact, hidden in the package body (explored later in this chapter). A package specification never contains executable statements; you should not have to see this code in order to understand how to call the program.</P
><P
CLASS="para"
>Notice the difference between the two <A
CLASS="indexterm"
NAME="ch01-idx-999342-0"
></A
>cursors. The first cursor, <KBD
CLASS="command"
>onepet_cur</KBD
>, takes a single parameter (primary key for a pet) and returns a record with the same structure as the pet table. The SELECT statement for this query is not, however, present. Instead, the query is hidden in the package body (the <SPAN
CLASS="acronym"
>SQL</SPAN
> is, after all, the implementation of the cursor) and the RETURN clause is used. In the second cursor, the RETURN clause is replaced by the actual query for the cursor. You can take either approach to cursors in packages.<A
CLASS="indexterm"
NAME="ch01-idx-999335-0"
></A
><A
CLASS="indexterm"
NAME="ch01-idx-999335-1"
></A
><A
CLASS="indexterm"
NAME="ch01-idx-999335-2"
></A
></P
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch01-SECT-4.2"
>1.4.2 Referencing Package Elements</A
></H3
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="ch01-idx-999343-0"
></A
><A
CLASS="indexterm"
NAME="ch01-idx-999343-1"
></A
><A
CLASS="indexterm"
NAME="ch01-idx-999343-2"
></A
><A
CLASS="indexterm"
NAME="ch01-idx-999343-3"
></A
>A package owns its elements, just as a table owns its columns. An individual element of a package only makes sense, in fact, in the context of the package. Consequently, you use the same <A
CLASS="indexterm"
NAME="ch01-idx-999344-0"
></A
>dot notation employed in "table.column" syntax for "package.element". Let's take a look at this practice by calling elements of the <KBD
CLASS="command"
>pets_r_us</KBD
> package.</P
><P
CLASS="para"
>In the following IF statement, I check to see if I am allowed to handle more than 100 pets in the facility:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>IF pets_r_us.max_pets_in_facility &gt; 100
   THEN
      ...
   END IF;</PRE
></BLOCKQUOTE
><P
CLASS="para"
>In this exception section, I check for and handle the situation of a sick pet:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>EXCEPTION
   WHEN pets_r_us.pet_is_sick
   THEN
      ...
END;</PRE
></BLOCKQUOTE
><P
CLASS="para"
>I can open the cursor defined in a package by prefixing the package name to the cursor and passing any required arguments:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>OPEN pets_r_us.onepet_cur (1305);</PRE
></BLOCKQUOTE
><P
CLASS="para"
>In the following statement, I assign (to the package variable <KBD
CLASS="command"
>next_appointment</KBD
>) the date for the next shot for a pet identified by an Oracle Forms host variable (indicated by the use of the <KBD
CLASS="command"
>:</KBD
> before the <KBD
CLASS="command"
>block.item</KBD
> name):</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>:pets_r_us.next_appointment 
      := pets_r_us.next_pet_shots (:pet_master.pet_id);</PRE
></BLOCKQUOTE
><P
CLASS="para"
>And if you forget to qualify a package element with its package name? The compiler will try to find an unqualified element (table, standalone procedure, etc.) with the same name and characteristics. Failing that, your code will not compile.</P
><DIV
CLASS="sect3"
><H4
CLASS="sect3"
><A
CLASS="title"
NAME="ch01-SECT-4.2.1"
>1.4.2.1 Unqualified package references</A
></H4
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="ch01-idx-999345-0"
></A
><A
CLASS="indexterm"
NAME="ch01-idx-999345-1"
></A
>There is one exception to the rule of qualifying a package element with its package name. Inside the body of a package, you do not need to qualify references to other elements of that package. <SPAN
CLASS="acronym"
>PL/SQL</SPAN
> will automatically resolve your reference within the scope of the package; the package is the "current" context. Suppose, for example, that the <KBD
CLASS="command"
>set_schedule</KBD
> procedure of <KBD
CLASS="command"
>pets_r_us</KBD
> (defined in the package specification) references the <KBD
CLASS="command"
>max_pets_in_facility</KBD
> constant. Such a reference would be <EM
CLASS="emphasis"
>unqualified</EM
>, as shown below in the partial implementation of <KBD
CLASS="command"
>set_schedule</KBD
> (found in the package body):</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>PROCEDURE set_schedule (pet_id_in IN NUMBER) 
IS
   total_pets NUMBER := pet_analysis.current_load;
BEGIN
   ...
   IF total_pets &lt; max_pets_in_facility 
   THEN
      ...
   END IF;
END;</PRE
></BLOCKQUOTE
><P
CLASS="para"
>There is no need to preface the "maximum pets" constant with <KBD
CLASS="command"
>pets_r_us</KBD
>. There is a need, on the other hand, to prefix the reference to the <KBD
CLASS="command"
>current_load</KBD
> function of the <KBD
CLASS="command"
>pet_analysis</KBD
> package. </P
></DIV
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch01-SECT-4.3"
>1.4.3 The Memory-Resident Architecture of Packages</A
></H3
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="ch01-idx-999346-0"
></A
><A
CLASS="indexterm"
NAME="ch01-idx-999346-1"
></A
><A
CLASS="indexterm"
NAME="ch01-idx-999346-2"
></A
>To use packages most effectively, you must understand the architecture of these constructs within an Oracle Server instance. <A
CLASS="xref"
HREF="ch01_04.htm#ch01-SECT-4.1"
>Figure 1.2</A
> shows how the different elements of shared memory are employed to support both package code and data.</P
><H4
CLASS="figure"
><A
CLASS="title"
NAME="ch01-23100"
>Figure 1.2: The architecture of packages in shared memory</A
></H4
><IMG
CLASS="graphic"
SRC="figs/pladv_0102.gif"
ALT="Figure 1.2"><P
CLASS="para"
>Before exploring the relationships in <A
CLASS="xref"
HREF="ch01_04.htm#ch01-SECT-4.1"
>Figure 1.2</A
>, keep these basic principles in mind:</P
><UL
CLASS="itemizedlist"
><LI
CLASS="listitem"
><P
CLASS="para"
>The compiled code for stored objects (procedures, functions, and packages) is shared by all users of the instance with execute authority on that code.</P
></LI
><LI
CLASS="listitem"
><P
CLASS="para"
>Each Oracle session has its own copy of the in-memory data defined within stored objects.</P
></LI
><LI
CLASS="listitem"
><P
CLASS="para"
>The Oracle Server applies a least-recently used (LRU) algorithm to maintaining compiled code in shared memory.</P
></LI
></UL
><P
CLASS="para"
>When a user executes a stored program or references a package-based data structure, the <SPAN
CLASS="acronym"
>PL/SQL</SPAN
> runtime engine first must make sure that the compiled version of that code is available in the <A
CLASS="indexterm"
NAME="ch01-idx-999350-0"
></A
><A
CLASS="indexterm"
NAME="ch01-idx-999350-1"
></A
>System Global Area or SGA of the Oracle instance. If the code is present in the SGA, it is then executed for that user. If the code is not present, the Oracle Server reads the compiled code from disk and loads it into the shared memory area. At that point the code is available to all users with execute authority on that code.</P
><P
CLASS="para"
>So if session 1 is the first account in the Oracle instance to reference package A, session 1 will cause the compiled code for A to be loaded into shared memory. When session 2 references an element in package A, that code is already present in shared memory and is re-used.</P
><P
CLASS="para"
>A user's relationship to data structures defined in stored code, particularly package data, is very different from that of the compiled code. While the same compiled code is shared, each user gets her own version of the data. This process is clear for procedures and functions. Any data declared in the declaration section of these programs is instantiated, manipulated, and then, on the termination of that program, erased. Every time a user calls that procedure or function, she gets her own local versions of the data. </P
><P
CLASS="para"
>The situation with packages is the same as that with stored code, but is less obvious at first glance. Data declared at the package level (defined outside of any particular procedure or function in the package) persist for as long as a session is active&nbsp;-- but those data are specific to a single Oracle session or connection. Each Oracle session is assigned its own private <SPAN
CLASS="acronym"
>PL/SQL</SPAN
> area, which contains a copy of the package data. This private <SPAN
CLASS="acronym"
>PL/SQL</SPAN
> area is maintained by the <SPAN
CLASS="acronym"
>PL/SQL</SPAN
> runtime engine for as long as your session is running. When session 1 references package A, session 1 instantiates her own version of the data structures used by A. When session 2 calls a program in A or accesses a data structure defined by A, session 2 gets her own copy of that data. Any changes made to the memory-based package data in session 1 is not affected by and does not affect the data in session 2.</P
><BLOCKQUOTE
CLASS="note"
><P
CLASS="para"
><STRONG
>NOTE:</STRONG
> If you are running a multithreaded Oracle Server, then <A
CLASS="xref"
HREF="ch01_04.htm#ch01-SECT-4.1"
>Figure 1.2</A
> changes slightly. With the multithreaded architecture, the program global areas for each user are also stored within the SGA of the Oracle instance.</P
></BLOCKQUOTE
><DIV
CLASS="sect3"
><H4
CLASS="sect3"
><A
CLASS="title"
NAME="ch01-SECT-4.3.1"
>1.4.3.1 Managing packages in shared memory</A
></H4
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="ch01-idx-999355-0"
></A
>When a package is loaded into shared memory, a contiguous amount of memory is required to hold the package (the same is true for any piece of stored code). So if you have a large package, you may have to tune your shared pool in the SGA to accommodate this package. (The shared pool is the area in the SGA devoted to shared <SPAN
CLASS="acronym"
>SQL</SPAN
> and <SPAN
CLASS="acronym"
>PL/SQL</SPAN
> statements.) You can get more space for your stored code by increasing the value of the <A
CLASS="indexterm"
NAME="ch01-idx-999356-0"
></A
>SHARED_POOL_SIZE parameter in the database instance initialization file.[<A
CLASS="footnote"
HREF="#ch01-pgfId-998211"
>2</A
>]</P
><BLOCKQUOTE
CLASS="footnote"
><DIV
CLASS="footnote"
><P
CLASS="para"
><A
CLASS="footnote"
NAME="ch01-pgfId-998211"
>[2]</A
> If the Oracle Server is having trouble fitting your stored code into memory, you will get ORA-04031 errors: out of shared memory.</P
></DIV
></BLOCKQUOTE
><P
CLASS="para"
>The Oracle Server uses a <A
CLASS="indexterm"
NAME="ch01-idx-999357-0"
></A
><A
CLASS="indexterm"
NAME="ch01-idx-999357-1"
></A
>least-recently used (LRU) algorithm to decide which items in the shared pool will remain present. If your package is flushed out of memory and is then needed by another program, the compiled code of the package will have to be read again from disk. Contiguous memory will also need to be available at that point. </P
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="ch01-idx-999367-0"
></A
><A
CLASS="indexterm"
NAME="ch01-idx-999367-1"
></A
>If you know that you will want to use a large package or standalone program intermittently throughout application execution and do not want to have the code flushed out of memory, you can use the <A
CLASS="indexterm"
NAME="ch01-idx-999358-0"
></A
>DBMS_SHARED_POOL package to pin your code into memory. The <A
CLASS="indexterm"
NAME="ch01-idx-999359-0"
></A
>KEEP procedure of this package exempts the specified program or package from the LRU algorithm. </P
><P
CLASS="para"
>To pin the <KBD
CLASS="command"
>config</KBD
> package into shared memory, for example, you would execute this statement:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>DBMS_SHARED_POOL.KEEP ('config');</PRE
></BLOCKQUOTE
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="ch01-idx-999368-0"
></A
><A
CLASS="indexterm"
NAME="ch01-idx-999368-1"
></A
>You can also <I
CLASS="firstterm"
>unpin</I
> a program with the <A
CLASS="indexterm"
NAME="ch01-idx-999361-0"
></A
>UNKEEP program. The DBMS_SHARED_POOL package is not installed by default when you create an Oracle Server instance. You will need to execute (usually from within the SYS account) the <I
CLASS="filename"
>dbmspool.sql</I
> script in the <I
CLASS="filename"
>admin</I
> subdirectory of your particular version of the server. For example, on Windows95 and Oracle 7.2, you would issue this command in SQL*Plus:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>SQL&gt; @c:\orawin95\rdbms72\admin\dbmspool</PRE
></BLOCKQUOTE
><P
CLASS="para"
>You should only pin programs if absolutely necessary and unavoidable (you cannot, for instance, further expand the overall size of the SGA and the shared pool). Why? In answer, I quote from the above-mentioned <I
CLASS="filename"
>dbmspool.sql</I
> file about KEEP:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>--WARNING:  This procedure may not be supported in the future when
--and if automatic mechanisms are implemented to make this unnecessary.</PRE
></BLOCKQUOTE
><P
CLASS="para"
>You can calculate the size of a package or any other piece of stored code by executing queries against the <A
CLASS="indexterm"
NAME="ch01-idx-999375-0"
></A
>USER_OBJECT_SIZE data dictionary view. This view contains information about the size of the source code, the size of the parsed code, and the size of the compiled code. The <SPAN
CLASS="acronym"
>SQL</SPAN
> statement below will display the names and sizes for any stored code larger than the specified SQL*Plus parameter:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>SELECT name, type, source_size, parsed_size, code_size
  FROM user_object_size
 WHERE code_size &gt; &amp;1
 ORDER BY code_size DESC
/<A
CLASS="indexterm"
NAME="ch01-idx-999348-0"
></A
><A
CLASS="indexterm"
NAME="ch01-idx-999348-1"
></A
></PRE
></BLOCKQUOTE
></DIV
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch01-SECT-4.4"
>1.4.4 Access to Package Elements</A
></H3
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="ch01-idx-999376-0"
></A
><A
CLASS="indexterm"
NAME="ch01-idx-999376-1"
></A
>One of the most valuable aspects of a package is its ability to truly enforce information hiding. With a package you can not only modularize your secrets behind a procedural interface, you can keep those parts of your application completely private.</P
><P
CLASS="para"
>An element of a package, whether it is a variable or a module, can be either public or private:</P
><DL
CLASS="variablelist"
><DT
CLASS="term"
><EM
CLASS="emphasis"
>Public</EM
></DT
><DD
CLASS="listitem"
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="ch01-idx-999378-0"
></A
>An element is public if it is defined in the specification. A public element can be referenced directly from other programs and <SPAN
CLASS="acronym"
>PL/SQL</SPAN
> blocks. The package specification is, in a sense, the gatekeeper for the package. It determines the package elements to which a developer may have access.</P
></DD
><DT
CLASS="term"
><EM
CLASS="emphasis"
>Private</EM
></DT
><DD
CLASS="listitem"
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="ch01-idx-999377-0"
></A
>An element is private if it is defined only in the body of the package, but does not appear in the specification. A private element cannot be referenced outside of the package. Any other element of the package may, however, reference and use a private element.</P
></DD
></DL
><P
CLASS="para"
>The distinction between public and private elements gives <SPAN
CLASS="acronym"
>PL/SQL</SPAN
> developers unprecedented control over their data structures and programs. <A
CLASS="xref"
HREF="ch01_04.htm#ch01-SECT-4.1"
>Figure 1.3</A
> shows a Booch[<A
CLASS="footnote"
HREF="#ch01-pgfId-999074"
>3</A
>] diagram for the package that displays private and public package elements, and very neatly portrays the way these two kinds of elements interact.</P
><BLOCKQUOTE
CLASS="footnote"
><DIV
CLASS="footnote"
><P
CLASS="para"
><A
CLASS="footnote"
NAME="ch01-pgfId-999074"
>[3]</A
> This diagram is named after Grady Booch, who pioneered many of the ideas of the package, particularly in the context of object-oriented design.</P
></DIV
></BLOCKQUOTE
><H4
CLASS="figure"
><A
CLASS="title"
NAME="ch01-29891"
>Figure 1.3: A Booch diagram for a package</A
></H4
><IMG
CLASS="graphic"
SRC="figs/pladv_0103.gif"
ALT="Figure 1.3"><P
CLASS="para"
>In <A
CLASS="xref"
HREF="ch01_04.htm#ch01-SECT-4.1"
>Figure 1.3</A
>, all of the boxes that lie completely inside the box are private elements, defined only within the body of the package. Boxes that lie on the boundary of the box are public elements, defined in the package specification and implemented (if programs) in the package body. An external program can make direct references only to those package elements that lie on the boundary. But any package element, whether wholly inside the boundary or straddling that line, can reference any other package element.</P
><P
CLASS="para"
>A boundary in the package delineates that which is publicly available and that which is private or hidden from view. It has particularly important and valuable consequences for data structures defined in a package.</P
><DIV
CLASS="sect3"
><H4
CLASS="sect3"
><A
CLASS="title"
NAME="ch01-SECT-4.4.1"
>1.4.4.1 Public and private data</A
></H4
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="ch01-idx-999386-0"
></A
><A
CLASS="indexterm"
NAME="ch01-idx-999386-1"
></A
><A
CLASS="indexterm"
NAME="ch01-idx-999386-2"
></A
>Whether a variable is declared in the specification or body, it <EM
CLASS="emphasis"
>does</EM
> function as a global piece of data. Once the package is instantiated in your session, data declared in the package persist for the duration of the session. A variable will retain its value until it is changed. That value will be available to any program that has access to the data. The kind of access depends on whether the variable is defined in the package specification or in the body.</P
><P
CLASS="para"
>To understand the consequences of public (specification-declared) data and private (body-declared) data in packages, consider the following simple package. In <KBD
CLASS="command"
>downsize</KBD
>, <KBD
CLASS="command"
>hire_date</KBD
> is a public variable and <KBD
CLASS="command"
>fire_date</KBD
> is a private variable.</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>PACKAGE downsize
IS
   v_hire_date DATE;
END;

PACKAGE BODY downsize
IS
   v_fire_date DATE;
END;</PRE
></BLOCKQUOTE
><P
CLASS="para"
>Since <KBD
CLASS="command"
>v_hire_date</KBD
> is defined in the package specification, I can directly reference that variable in my own code outside of the <I
CLASS="function"
>downsize</I
> package, as follows:</P
><OL
CLASS="orderedlist"
><LI
CLASS="listitem"
><P
CLASS="para"
>Read the value of the <KBD
CLASS="command"
>hire_date</KBD
> variable:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>last_hired := downsize.v_hire_date;</PRE
></BLOCKQUOTE
></LI
><LI
CLASS="listitem"
><P
CLASS="para"
>Change the value of the <KBD
CLASS="command"
>hire_date</KBD
> variable to ten days in the future:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>downsize.v_hire_date := SYSDATE + 10;</PRE
></BLOCKQUOTE
></LI
></OL
><P
CLASS="para"
>If I try to access <KBD
CLASS="command"
>v_fire_date</KBD
> in the same way, however, my code will not compile. It is hidden behind the public boundary of the package. Its value is maintained in my private global area since it is in a package, but the only programs that can reference it are those defined within the package itself, either in the body or the specification. </P
><P
CLASS="para"
>The next chapter covers the implications of public global data and contains recommendations on how to safeguard your application and data.</P
></DIV
><DIV
CLASS="sect3"
><H4
CLASS="sect3"
><A
CLASS="title"
NAME="ch01-SECT-4.4.2"
>1.4.4.2 Switching between public and private</A
></H4
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="ch01-idx-999391-0"
></A
><A
CLASS="indexterm"
NAME="ch01-idx-999391-1"
></A
><A
CLASS="indexterm"
NAME="ch01-idx-999391-2"
></A
>When you first create a package, your decision about which elements of a package are public and which private is not cast in stone. You can, in fact, switch a public element to private and vice versa at any time. </P
><P
CLASS="para"
>If you find that a private element program or cursor should instead be made public, simply add the header of that element to the package specification and recompile. It will then be visible outside of the package. Notice that you do not need to make any changes at all to the package body.</P
><P
CLASS="para"
>If you want to make a private variable accessible directly from outside the package, you will need to remove the declaration of that data structure from the body and paste it into the specification. You cannot declare the same element in both the body and the specification.</P
><P
CLASS="para"
>If you do make a public element private, you will need to remember that any program that referenced that element will no longer compile successfully.<A
CLASS="indexterm"
NAME="ch01-idx-999380-0"
></A
><A
CLASS="indexterm"
NAME="ch01-idx-999380-1"
></A
></P
></DIV
></DIV
></DIV
><DIV
CLASS="htmlnav"
><P
></P
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch01_03.htm#ch01-SECT-3.1"
TITLE="1.3 What Are the Benefits of Packages?"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 1.3 What Are the Benefits of Packages?"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="book"
HREF="index.htm"
TITLE="Advanced Oracle PL/SQL Programming with Packages"
><IMG
SRC="../gifs/txthome.gif"
ALT="Advanced Oracle PL/SQL Programming with Packages"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch01_05.htm#ch01-SECT-5.3"
TITLE="1.5 Types of Packages"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 1.5 Types of Packages"
BORDER="0"></A
></TD
></TR
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
>1.3 What Are the Benefits of Packages?</TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="index"
HREF="index/idx_0.htm"
TITLE="Book Index"
><IMG
SRC="../gifs/index.gif"
ALT="Book Index"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
>1.5 Types of Packages</TD
></TR
></TABLE
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"></DIV
><IMG
SRC="../gifs/smnavbar.gif"
USEMAP="#map"
BORDER="0"
ALT="The Oracle Library Navigation">

<P><font size="-1">
<a href="../copyrght.htm#copy">Copyright (c) 2000</a> O'Reilly & Associates. All rights reserved.
</font></P>

<MAP NAME="map">

<AREA SHAPE="RECT"
COORDS="0,0,35,30"
HREF="../index.htm"
ALT="Library Home">

<AREA SHAPE="RECT"
COORDS="40,0,95,30"
HREF="../prog2/index.htm"
ALT="Oracle PL/SQL Programming, 2nd. Ed.">

<AREA SHAPE="RECT"
COORDS="100,0,200,30"
HREF="../guide8i/index.htm"
ALT="Guide to Oracle 8i Features">

<AREA SHAPE="RECT"
COORDS="205,0,245,30"
HREF="../bipack/index.htm"
ALT="Oracle Built-in Packages">

<AREA SHAPE="RECT"
COORDS="250,0,320,30"
HREF="index.htm"
ALT="Advanced PL/SQL Programming with Packages">

<AREA SHAPE="RECT"
COORDS="325,0,420,30"
HREF="../webapp/index.htm"
ALT="Oracle Web Applications">

<AREA SHAPE="RECT"
COORDS="425,0,490,30"
HREF="../langpkt/index.htm"
ALT="Oracle PL/SQL Language Pocket Reference">

<AREA SHAPE="RECT"
COORDS="495,0,570,30"
HREF="../bipkt/index.htm"
ALT="Oracle PL/SQL Built-ins Pocket Reference">
</MAP>
</BODY
>
<!-- Mirrored from liso.cs.pusan.ac.kr by HTTrack Website Copier/3.x [XR&CO'2001] -->
</HTML
>
