<HTML
><HEAD
><TITLE
>[Chapter 12] 12.3 Managing the Source Repository</TITLE
><META
NAME="DC.Creator"
CONTENT="Steven Feuerstein"><META
NAME="DC.Date"
CONTENT="2000-04-29T18:27:46Z"><META
NAME="DC.Format"
CONTENT="text/html"
SCHEME="MIME"><META
NAME="DC.Identifier"
CONTENT="O'Reilly and Associates-1-56592-238-7E"><META
NAME="DC.Language"
CONTENT="en-US"><META
NAME="DC.Publisher"
CONTENT="O'Reilly &amp; Associates, Inc."><META
NAME="DC.Source"
CONTENT="1-56592-238-7E"
SCHEME="ISBN"><META
NAME="DC.Subject.Keyword"
CONTENT="PL/SQL SQL Oracle Packages"><META
NAME="DC.Title"
CONTENT="Advanced Oracle PL/SQL Programming with Packages"><META
NAME="DC.Type"
CONTENT="Text.Monograph"><META
NAME="generator"
CONTENT="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><LINK
REL="stylesheet"
TYPE="text/css"
HREF="../style/style1.css"><LINK
REV="made"
HREF="mailto:online-books@oreilly.com"
TITLE="Online Books Comments"><LINK
REL="up"
HREF="ch12_01.htm"
TITLE="12. PLVio: Reading and Writing PL/SQL Source Code"><LINK
REL="prev"
HREF="ch12_02.htm#ch12-SECT-2.5"
TITLE="12.2 Code Repositories Supported by PLVio"><LINK
REL="next"
HREF="ch12_04.htm#ch12-SECT-4.3"
TITLE="12.4 The Source WHERE Clause"></HEAD>
<BODY><DIV CLASS="htmlnav"
><H1
><IMG
SRC="gifs/smbanner.gif"
ALT="Advanced Oracle PL/SQL Programming with Packages"
USEMAP="#srchmap"
BORDER="0"></H1
><MAP
NAME="srchmap"
><AREA
SHAPE="RECT"
COORDS="0,0,466,65"
HREF="index.htm"
ALT="Advanced Oracle PL/SQL Programming with Packages"><AREA
SHAPE="RECT"
COORDS="467,0,514,18"
HREF="jobjects/fsearch.htm"
ALT="Search this book"></MAP
><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch12_02.htm#ch12-SECT-2.5"
TITLE="12.2 Code Repositories Supported by PLVio"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 12.2 Code Repositories Supported by PLVio"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><SPAN
CLASS="NAVTITLE"
><A
CLASS="chapter"
REL="up"
HREF="ch12_01.htm"
TITLE="12. PLVio: Reading and Writing PL/SQL Source Code"
>Chapter 12<BR>PLVio: Reading and Writing PL/SQL Source Code</A
></SPAN
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch12_04.htm#ch12-SECT-4.3"
TITLE="12.4 The Source WHERE Clause"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 12.4 The Source WHERE Clause"
BORDER="0"></A
></TD
></TR
></TABLE
>&nbsp;<HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"></DIV
><DIV
CLASS="sect1"
><H2
CLASS="sect1"
><A
CLASS="title"
NAME="ch12-12011"
>12.3 Managing the Source Repository</A
></H2
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="ch12-idx-998715-0"
></A
>To read information from a PLVio repository, you must do the following:</P
><OL
CLASS="orderedlist"
><LI
CLASS="listitem"
><P
CLASS="para"
>Define the source using the <KBD
CLASS="command"
>setsrc</KBD
> program.</P
></LI
><LI
CLASS="listitem"
><P
CLASS="para"
>Fine-tune your access to the source repository. You can modify the WHERE clause of your SELECT from a database table source with a number of procedures.</P
></LI
><LI
CLASS="listitem"
><P
CLASS="para"
>Initialize the source using the <KBD
CLASS="command"
>initsrc</KBD
> program.</P
></LI
></OL
><P
CLASS="para"
>You are then ready to use the <KBD
CLASS="command"
>get_line</KBD
> procedure to retrieve lines of text from the source repository.</P
><P
CLASS="para"
>This section explains the <KBD
CLASS="command"
>setsrc</KBD
> and <KBD
CLASS="command"
>initsrc</KBD
> procedures. The next section explores how to modify the WHERE clause of the source SELECT for database tables.</P
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch12-SECT-3.1"
>12.3.1 Setting the Source</A
></H3
><P
CLASS="para"
>The <KBD
CLASS="command"
>setsrc</KBD
><A
CLASS="indexterm"
NAME="ch12-idx-998716-0"
></A
> procedure assigns the type of source repository and defines the structure of the source (if a database table). The header for <KBD
CLASS="command"
>setsrc</KBD
> is as follows:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>PROCEDURE setsrc
   (srctype_in IN VARCHAR2,  
    name_in IN VARCHAR2 := 'user_source',
    name_col_in IN VARCHAR2 := 'name',
    srctype_col_in IN VARCHAR2 := 'type',
    line#_col_in IN VARCHAR2 := 'line',
    text_col_in IN VARCHAR2 := 'text',
    schema_col_in IN VARCHAR2 := NULL);</PRE
></BLOCKQUOTE
><P
CLASS="para"
>The first argument, <KBD
CLASS="command"
>srctype_in</KBD
>, is the type of repository. The second argument, <KBD
CLASS="command"
>name_in</KBD
>, is the name of the repository. Its content varies according to the type of repository and will be explained below. The third through seventh arguments provide the names of the columns required for a database table source. The default values match the structure of the default table (the USER_SOURCE data dictionary view). Notice, therefore, that the schema column name is NULL. This column would be used only if you specified a table/view like ALL_SOURCE, which contains the source code for all programs to which you have access, regardless of schema.</P
><P
CLASS="para"
>The <KBD
CLASS="command"
>setsrc</KBD
> procedure transfers the arguments to the <KBD
CLASS="command"
>srcrep</KBD
> record, which is defined using the <KBD
CLASS="command"
>repos_rectype</KBD
> shown earlier. If you are using a string source, then the <KBD
CLASS="command"
>string_repos</KBD
> record is updated. If you are using a database source, then the SELECT statement that will be used to query from that table is constructed as follows (this is a simplified version of the actual SELECT, but gives you an idea of its structure):</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>srcrep.select_sql :=
   'SELECT ' || source_text_col_in || ', ' ||
                source_line#_col_in ||
   '  FROM ' || name_in || ' ' ||
   ' WHERE ' || source_name_col_in || ' = :name ' ||
   '   AND ' || srctype_col_in || ' = :type' ||
   ' ORDER BY ' || source_line#_col_in;</PRE
></BLOCKQUOTE
><P
CLASS="para"
>If you are using a string source, the <KBD
CLASS="command"
>name_in</KBD
> argument contains the string which holds the text for the program you want to read. All other arguments are ignored. This string is then assigned into the string repository record as shown below:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>IF string_source
THEN
   string_repos.text_in := name_in;
   string_repos.start_pos := 1;
   string_repos.text_len := LENGTH (name_in);
   string_repos.text_out := NULL;</PRE
></BLOCKQUOTE
><P
CLASS="para"
>Notice that the other fields of the <KBD
CLASS="command"
>string_repos</KBD
> record are also initialized.</P
><P
CLASS="para"
>If you are using a file source, then the <KBD
CLASS="command"
>name_in</KBD
> argument is the name of the file. The <KBD
CLASS="command"
>source_name_col_in</KBD
> argument should contain the <EM
CLASS="emphasis"
>type:name</EM
> specification for the object you are reading. So if you are reading the package body of PLVvu from the file <KBD
CLASS="command"
>PLVvu.spb</KBD
>, you would call <KBD
CLASS="command"
>setsrc</KBD
> as follows:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>PLVio.setsrc (PLV.file, 'PLVvu.spb', 'b:PLVvu');</PRE
></BLOCKQUOTE
><P
CLASS="para"
>You must supply this third argument if you are writing (have set the target to) a database table.</P
><P
CLASS="para"
>If you are using a file source, all other arguments (after the first three) are ignored.</P
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch12-SECT-3.2"
>12.3.2 Initializing the Source</A
></H3
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="ch12-idx-998717-0"
></A
>Once you have set the source repository, you can either move directly to initializing that repository, or you can, in the case of a database table source, modify the WHERE clause of the SELECT constructed by <KBD
CLASS="command"
>setsrc</KBD
>. In most cases, you will simply call <KBD
CLASS="command"
>initsrc</KBD
>, so I will discuss that procedure below. The next section discusses how to modify the source repository WHERE clause.</P
><P
CLASS="para"
>The header for the <KBD
CLASS="command"
>initsrc</KBD
><A
CLASS="indexterm"
NAME="ch12-idx-998718-0"
></A
> procedure is overloaded as follows:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>PROCEDURE initsrc
   (starting_at_in IN INTEGER,
    ending_at_in IN INTEGER,
    where_in IN VARCHAR2 := NULL);

PROCEDURE initsrc
   (starting_at_in IN VARCHAR2 := NULL,
    ending_at_in IN VARCHAR2 := NULL,
    where_in IN VARCHAR2 := NULL);</PRE
></BLOCKQUOTE
><P
CLASS="para"
>The "integer version" of <KBD
CLASS="command"
>initsrc</KBD
> accepts up to three arguments, as follows:</P
><DL
CLASS="variablelist"
><DT
CLASS="term"
><CODE
CLASS="literal"
>starting_at_in</CODE
></DT
><DD
CLASS="listitem"
><P
CLASS="para"
> The line number at which the query should start. </P
></DD
><DT
CLASS="term"
>ending_at_in</DT
><DD
CLASS="listitem"
><P
CLASS="para"
> The line number at which the query should end. </P
></DD
><DT
CLASS="term"
>where_in</DT
><DD
CLASS="listitem"
><P
CLASS="para"
> An optional WHERE clause to add to the existing clause of the source's SELECT statement. </P
></DD
></DL
><P
CLASS="para"
>If the source is a database table, specifying start and/or end line numbers results in additional elements in the WHERE clause of the SELECT statement. The <KBD
CLASS="command"
>where_in</KBD
> string is also appended to the SELECT's WHERE clause, if provided. For any other code sources, these three arguments are currently ignored. In other words, if you work with non-database table sources, you will always read the full set of lines of text in those sources. It is easy to see how <KBD
CLASS="command"
>initsrc</KBD
> should be enhanced to support these arguments; it's just a matter of time and resources. I encourage you to try adding this functionality yourself. </P
><P
CLASS="para"
>The "string version" of <KBD
CLASS="command"
>initsrc</KBD
> allows you to specify starting and ending strings for the source repository. In this case (and only when the source is a database table), the <KBD
CLASS="command"
>get_line</KBD
> procedure will only read those lines that come after the first occurrence of the starting string and before the first occurrence of the ending string.</P
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch12-SECT-3.3"
>12.3.3 Using setsrc and initsrc</A
></H3
><P
CLASS="para"
>Here are some examples of calls to <KBD
CLASS="command"
>setsrc</KBD
><A
CLASS="indexterm"
NAME="ch12-idx-998719-0"
></A
> and <KBD
CLASS="command"
>initsrc</KBD
>.</P
><OL
CLASS="orderedlist"
><LI
CLASS="listitem"
><P
CLASS="para"
>Set the source to a string and then initialize the source.</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>PLVio.setsrc (PLVio.c_string, long_code_string);
PLVIO.initsrc;</PRE
></BLOCKQUOTE
></LI
><LI
CLASS="listitem"
><P
CLASS="para"
>Set the current object in PLVobj to the body of the PLVvu package. Set the source to the ALL_SOURCE data dictionary view and restrict access to only the first five lines of the code for the PLVvu package body.</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>PLVobj.setcurr ('b:PLVvu');
PLVio.setsrc (PLV.dbtab, 'all_source', schema_col_in =&gt; 'owner');
PLVio.initsrc (1, 5);</PRE
></BLOCKQUOTE
></LI
><LI
CLASS="listitem"
><P
CLASS="para"
>Set the source to a table named <KBD
CLASS="command"
>temp_source</KBD
> with a set of completely different column names. Request that only those rows for the procedure <KBD
CLASS="command"
>calc_totals</KBD
> containing the string RAISE be read. Notice the use of named notation in my call to <KBD
CLASS="command"
>initsrc</KBD
>. Which of the two versions of <KBD
CLASS="command"
>initsrc</KBD
> is executed?</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>PLVobj.setcurr ('p:calc_totals');
PLVio.setsrc 
   (PLV.dbtab, 'temp_source', 'progname', 'progtype', 'line#', 'line');
PLVio.initsrc (where_in =&gt; 'INSTR (line, ''RAISE'') &gt; 0);</PRE
></BLOCKQUOTE
></LI
></OL
><P
CLASS="para"
>Answer: the string version of <KBD
CLASS="command"
>initsrc</KBD
> is executed, since there are default values for the string arguments. The integer version requires that the start and end numbers be provided.<A
CLASS="indexterm"
NAME="ch12-idx-998720-0"
></A
><A
CLASS="indexterm"
NAME="ch12-idx-998720-1"
></A
></P
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch12-SECT-3.4"
>12.3.4 High-Level Source Management Programs</A
></H3
><P
CLASS="para"
>Recognizing the most common sources of <SPAN
CLASS="acronym"
>PL/SQL</SPAN
> code, PLVio offers two specialized programs to both set and initialize the source, <KBD
CLASS="command"
>usrc</KBD
> and <KBD
CLASS="command"
>asrc</KBD
>. The <KBD
CLASS="command"
>usrc</KBD
><A
CLASS="indexterm"
NAME="ch12-idx-998721-0"
></A
><A
CLASS="indexterm"
NAME="ch12-idx-998721-1"
></A
> procedure sets the source repository to the USER_SOURCE data dictionary view. The <KBD
CLASS="command"
>asrc</KBD
> procedure sets the source repository to the ALL_SOURCE data dictionary view. Both <KBD
CLASS="command"
>usrc</KBD
> and <KBD
CLASS="command"
>asrc</KBD
> are overloaded with the same arguments as <KBD
CLASS="command"
>initsrc</KBD
>: the "starting at" string or line number, the "ending at" string or line number, and the optional WHERE clause. The headers for these programs are shown below:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>PROCEDURE usrc
   (starting_at_in IN VARCHAR2 := NULL,
    ending_at_in IN VARCHAR2 := NULL,
    where_in IN VARCHAR2 := NULL);

PROCEDURE usrc
   (starting_at_in IN INTEGER,
    ending_at_in IN INTEGER,
    where_in IN VARCHAR2 := NULL);

PROCEDURE asrc
   (starting_at_in IN VARCHAR2 := NULL,
    ending_at_in IN VARCHAR2 := NULL,
    where_in IN VARCHAR2 := NULL);

PROCEDURE asrc 
   (starting_at_in IN INTEGER,
    ending_at_in IN INTEGER,
    where_in IN VARCHAR2 := NULL);</PRE
></BLOCKQUOTE
><P
CLASS="para"
>With <KBD
CLASS="command"
>asrc</KBD
>, for example, I could replace these three lines of code:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>PLVobj.setcurr ('b:PLVvu');
PLVio.setsrc (PLV.dbtab, 'all_source', schema_col_in =&gt; 'owner');
PLVio.initsrc (1, 5);</PRE
></BLOCKQUOTE
><P
CLASS="para"
>with the following two lines:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>PLVobj.setcurr ('b:PLVvu');
PLVio.asrc (1, 5);</PRE
></BLOCKQUOTE
><P
CLASS="para"
>You shouldn't have to deal with all those details when it is the kind of source setting you will be performing again and again.</P
></DIV
></DIV
><DIV
CLASS="htmlnav"
><P
></P
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch12_02.htm#ch12-SECT-2.5"
TITLE="12.2 Code Repositories Supported by PLVio"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 12.2 Code Repositories Supported by PLVio"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="book"
HREF="index.htm"
TITLE="Advanced Oracle PL/SQL Programming with Packages"
><IMG
SRC="../gifs/txthome.gif"
ALT="Advanced Oracle PL/SQL Programming with Packages"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch12_04.htm#ch12-SECT-4.3"
TITLE="12.4 The Source WHERE Clause"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 12.4 The Source WHERE Clause"
BORDER="0"></A
></TD
></TR
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
>12.2 Code Repositories Supported by PLVio</TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="index"
HREF="index/idx_0.htm"
TITLE="Book Index"
><IMG
SRC="../gifs/index.gif"
ALT="Book Index"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
>12.4 The Source WHERE Clause</TD
></TR
></TABLE
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"></DIV
><IMG
SRC="../gifs/smnavbar.gif"
USEMAP="#map"
BORDER="0"
ALT="The Oracle Library Navigation">

<P><font size="-1">
<a href="../copyrght.htm#copy">Copyright (c) 2000</a> O'Reilly & Associates. All rights reserved.
</font></P>

<MAP NAME="map">

<AREA SHAPE="RECT"
COORDS="0,0,35,30"
HREF="../index.htm"
ALT="Library Home">

<AREA SHAPE="RECT"
COORDS="40,0,95,30"
HREF="../prog2/index.htm"
ALT="Oracle PL/SQL Programming, 2nd. Ed.">

<AREA SHAPE="RECT"
COORDS="100,0,200,30"
HREF="../guide8i/index.htm"
ALT="Guide to Oracle 8i Features">

<AREA SHAPE="RECT"
COORDS="205,0,245,30"
HREF="../bipack/index.htm"
ALT="Oracle Built-in Packages">

<AREA SHAPE="RECT"
COORDS="250,0,320,30"
HREF="index.htm"
ALT="Advanced PL/SQL Programming with Packages">

<AREA SHAPE="RECT"
COORDS="325,0,420,30"
HREF="../webapp/index.htm"
ALT="Oracle Web Applications">

<AREA SHAPE="RECT"
COORDS="425,0,490,30"
HREF="../langpkt/index.htm"
ALT="Oracle PL/SQL Language Pocket Reference">

<AREA SHAPE="RECT"
COORDS="495,0,570,30"
HREF="../bipkt/index.htm"
ALT="Oracle PL/SQL Built-ins Pocket Reference">
</MAP>
</BODY
>
<!-- Mirrored from liso.cs.pusan.ac.kr by HTTrack Website Copier/3.x [XR&CO'2001] -->
</HTML
>
