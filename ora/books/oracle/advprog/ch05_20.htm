<HTML
><HEAD
><TITLE
>[Chapter 5] 5.20 PLVobj: Object Interface</TITLE
><META
NAME="DC.Creator"
CONTENT="Steven Feuerstein"><META
NAME="DC.Date"
CONTENT="2000-04-29T18:25:28Z"><META
NAME="DC.Format"
CONTENT="text/html"
SCHEME="MIME"><META
NAME="DC.Identifier"
CONTENT="O'Reilly and Associates-1-56592-238-7E"><META
NAME="DC.Language"
CONTENT="en-US"><META
NAME="DC.Publisher"
CONTENT="O'Reilly &amp; Associates, Inc."><META
NAME="DC.Source"
CONTENT="1-56592-238-7E"
SCHEME="ISBN"><META
NAME="DC.Subject.Keyword"
CONTENT="PL/SQL SQL Oracle Packages"><META
NAME="DC.Title"
CONTENT="Advanced Oracle PL/SQL Programming with Packages"><META
NAME="DC.Type"
CONTENT="Text.Monograph"><META
NAME="generator"
CONTENT="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><LINK
REL="stylesheet"
TYPE="text/css"
HREF="../style/style1.css"><LINK
REV="made"
HREF="mailto:online-books@oreilly.com"
TITLE="Online Books Comments"><LINK
REL="up"
HREF="ch05_01.htm"
TITLE="5. PL/Vision Package Specifications"><LINK
REL="prev"
HREF="ch05_19.htm#ch05-SECT-19.0.2"
TITLE="5.19 PLVmsg: Message Handling"><LINK
REL="next"
HREF="ch05_21.htm#ch05-SECT-21.0.1"
TITLE="5.21 PLVprs: String Parsing"></HEAD>
<BODY><DIV CLASS="htmlnav"
><H1
><IMG
SRC="gifs/smbanner.gif"
ALT="Advanced Oracle PL/SQL Programming with Packages"
USEMAP="#srchmap"
BORDER="0"></H1
><MAP
NAME="srchmap"
><AREA
SHAPE="RECT"
COORDS="0,0,466,65"
HREF="index.htm"
ALT="Advanced Oracle PL/SQL Programming with Packages"><AREA
SHAPE="RECT"
COORDS="467,0,514,18"
HREF="jobjects/fsearch.htm"
ALT="Search this book"></MAP
><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch05_19.htm#ch05-SECT-19.0.2"
TITLE="5.19 PLVmsg: Message Handling"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 5.19 PLVmsg: Message Handling"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><SPAN
CLASS="NAVTITLE"
><A
CLASS="chapter"
REL="up"
HREF="ch05_01.htm"
TITLE="5. PL/Vision Package Specifications"
>Chapter 5<BR>PL/Vision Package Specifications</A
></SPAN
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch05_21.htm#ch05-SECT-21.0.1"
TITLE="5.21 PLVprs: String Parsing"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 5.21 PLVprs: String Parsing"
BORDER="0"></A
></TD
></TR
></TABLE
>&nbsp;<HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"></DIV
><DIV
CLASS="sect1"
><H2
CLASS="sect1"
><A
CLASS="title"
NAME="ch05-SECT-20"
>5.20 PLVobj: Object Interface</A
></H2
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="ch05-idx-1001405-0"
></A
><A
CLASS="indexterm"
NAME="ch05-idx-1001405-1"
></A
><A
CLASS="indexterm"
NAME="ch05-idx-1001405-2"
></A
>The PLVobj (PL/Vision OBJect) package provides a programmatic interface to the <SPAN
CLASS="acronym"
>PL/SQL</SPAN
> objects stored in the ALL_OBJECTS data dictionary view. See <A
CLASS="xref"
HREF="ch20_01.htm"
>Chapter 20</A
> for details.</P
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch05-SECT-20.0.1"
>5.20.1 <A
CLASS="indexterm"
NAME="ch05-idx-1001406-0"
></A
>Tracing PLVobj activity</A
></H3
><DL
CLASS="variablelist"
><DT
CLASS="term"
><CODE
CLASS="literal"
> PROCEDURE display;</CODE
></DT
><DD
CLASS="listitem"
><P
CLASS="para"
>Turns on display of information about activity occurring in PLVobj.</P
></DD
><DT
CLASS="term"
><CODE
CLASS="literal"
> PROCEDURE nodisplay;</CODE
></DT
><DD
CLASS="listitem"
><P
CLASS="para"
>Turns off display of PLVobj activity.</P
></DD
><DT
CLASS="term"
><CODE
CLASS="literal"
> FUNCTION displaying RETURN BOOLEAN;</CODE
></DT
><DD
CLASS="listitem"
><P
CLASS="para"
>Returns TRUE if showing activity in PLVobj.</P
></DD
></DL
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch05-SECT-20.0.2"
>5.20.2 General constants and exceptions</A
></H3
><DL
CLASS="variablelist"
><DT
CLASS="term"
><CODE
CLASS="literal"
> no_name_specified EXCEPTION;</CODE
><A
CLASS="indexterm"
NAME="ch05-idx-1001407-0"
></A
></DT
><DD
CLASS="listitem"
><P
CLASS="para"
>Exception raised when you try to perform an operation but have not specified the name of the object (the "current object" has not been set).</P
></DD
><DT
CLASS="term"
><CODE
CLASS="literal"
> c_pkg_spec CONSTANT VARCHAR2(1) := 'S';</CODE
></DT
><DT
CLASS="term"
><CODE
CLASS="literal"
>c_pkg_body CONSTANT VARCHAR2(1) := 'B';</CODE
></DT
><DT
CLASS="term"
><CODE
CLASS="literal"
>c_entire_pkg CONSTANT VARCHAR2(2) := 'SB';</CODE
></DT
><DT
CLASS="term"
><CODE
CLASS="literal"
>c_proc CONSTANT VARCHAR2(2) := 'P';</CODE
></DT
><DT
CLASS="term"
><CODE
CLASS="literal"
>c_func CONSTANT VARCHAR2(2) := 'F';</CODE
></DT
><DD
CLASS="listitem"
><P
CLASS="para"
>Names for the different types of program units. You can use these in calls to <KBD
CLASS="command"
>set_type</KBD
> or simply pass the literal values as part of a single type-name string.</P
></DD
><DT
CLASS="term"
><CODE
CLASS="literal"
> c_procedure CONSTANT VARCHAR2(30) := 'PROCEDURE';</CODE
></DT
><DT
CLASS="term"
><CODE
CLASS="literal"
>c_function CONSTANT VARCHAR2(30) := 'FUNCTION';</CODE
></DT
><DT
CLASS="term"
><CODE
CLASS="literal"
>c_synonym CONSTANT VARCHAR2(30) := 'SYNONYM';</CODE
></DT
><DT
CLASS="term"
><CODE
CLASS="literal"
>c_package CONSTANT VARCHAR2(30) := 'PACKAGE';</CODE
></DT
><DT
CLASS="term"
><CODE
CLASS="literal"
>c_package_body CONSTANT VARCHAR2(30) := 'PACKAGE BODY';</CODE
></DT
><DD
CLASS="listitem"
><P
CLASS="para"
>Full names of program unit types as they are found in ALL_OBJECTS.</P
></DD
></DL
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch05-SECT-20.0.3"
>5.20.3 Setting the current object</A
></H3
><DL
CLASS="variablelist"
><DT
CLASS="term"
><CODE
CLASS="literal"
> PROCEDURE setcurr</CODE
></DT
><DT
CLASS="term"
><CODE
CLASS="literal"
>   (name_in IN  VARCHAR2, type_in IN VARCHAR2 := NULL);</CODE
></DT
><DD
CLASS="listitem"
><P
CLASS="para"
>Sets the current object for other PLVobj modules. When you call <KBD
CLASS="command"
>setcurr</KBD
>, you set the schema, name, and type for the object. You can also call the individual programs listed below to set a single part of the current object.</P
></DD
><DT
CLASS="term"
><CODE
CLASS="literal"
> PROCEDURE set_schema (schema_in IN VARCHAR2 := USER);</CODE
></DT
><DD
CLASS="listitem"
><P
CLASS="para"
>Sets the schema for the current object.</P
></DD
><DT
CLASS="term"
><CODE
CLASS="literal"
> PROCEDURE set_type (type_in IN VARCHAR2);</CODE
></DT
><DD
CLASS="listitem"
><P
CLASS="para"
>Sets the type for the current object.</P
></DD
><DT
CLASS="term"
><CODE
CLASS="literal"
> PROCEDURE set_name (name_in IN VARCHAR2);</CODE
></DT
><DD
CLASS="listitem"
><P
CLASS="para"
>  Sets the name for the current object.</P
></DD
></DL
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch05-SECT-20.0.4"
>5.20.4 Accessing the current object</A
></H3
><DL
CLASS="variablelist"
><DT
CLASS="term"
><CODE
CLASS="literal"
> FUNCTION currname RETURN VARCHAR2;</CODE
><A
CLASS="indexterm"
NAME="ch05-idx-1001408-0"
></A
><A
CLASS="indexterm"
NAME="ch05-idx-1001408-1"
></A
></DT
><DD
CLASS="listitem"
><P
CLASS="para"
>Returns the name of the current object.</P
></DD
><DT
CLASS="term"
><CODE
CLASS="literal"
> FUNCTION currtype RETURN VARCHAR2;</CODE
><A
CLASS="indexterm"
NAME="ch05-idx-1001409-0"
></A
></DT
><DD
CLASS="listitem"
><P
CLASS="para"
>Returns the type of the current object.</P
></DD
><DT
CLASS="term"
><CODE
CLASS="literal"
> FUNCTION currschema RETURN VARCHAR2;</CODE
><A
CLASS="indexterm"
NAME="ch05-idx-1001410-0"
></A
></DT
><DD
CLASS="listitem"
><P
CLASS="para"
>Returns the schema of the current object.</P
></DD
><DT
CLASS="term"
><CODE
CLASS="literal"
> FUNCTION fullname RETURN VARCHAR2;</CODE
><A
CLASS="indexterm"
NAME="ch05-idx-1001411-0"
></A
></DT
><DD
CLASS="listitem"
><P
CLASS="para"
>Returns the full name of the current object (the different elements concatenated together).</P
></DD
><DT
CLASS="term"
><CODE
CLASS="literal"
> PROCEDURE showcurr (show_header_in IN BOOLEAN := TRUE);</CODE
><A
CLASS="indexterm"
NAME="ch05-idx-1001412-0"
></A
></DT
><DD
CLASS="listitem"
><P
CLASS="para"
>Displays the full name of the current object. </P
></DD
></DL
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch05-SECT-20.0.5"
>5.20.5 Interfacing with the PLVobj cursor</A
></H3
><DL
CLASS="variablelist"
><DT
CLASS="term"
><CODE
CLASS="literal"
> PROCEDURE open_objects;</CODE
><A
CLASS="indexterm"
NAME="ch05-idx-1001413-0"
></A
><A
CLASS="indexterm"
NAME="ch05-idx-1001413-1"
></A
></DT
><DD
CLASS="listitem"
><P
CLASS="para"
>Opens the PLVobj cursor for the current object settings.</P
></DD
><DT
CLASS="term"
><CODE
CLASS="literal"
> PROCEDURE fetch_object;</CODE
></DT
><DT
CLASS="term"
><CODE
CLASS="literal"
>PROCEDURE fetch_object</CODE
><A
CLASS="indexterm"
NAME="ch05-idx-1001414-0"
></A
></DT
><DT
CLASS="term"
><CODE
CLASS="literal"
>   (name_out OUT VARCHAR2, type_out OUT VARCHAR2);</CODE
></DT
><DD
CLASS="listitem"
><P
CLASS="para"
>Two overloaded versions to fetch the next row from the PLVobj cursor. The first version fetches the next object into the current object. The second version allows you to fetch the next object into local variables, leaving the current object unchanged.</P
></DD
><DT
CLASS="term"
><CODE
CLASS="literal"
> FUNCTION more_objects RETURN BOOLEAN;</CODE
><A
CLASS="indexterm"
NAME="ch05-idx-1001415-0"
></A
></DT
><DD
CLASS="listitem"
><P
CLASS="para"
>Returns TRUE if the last fetch from the PLVobj cursor returned a record.</P
></DD
><DT
CLASS="term"
><CODE
CLASS="literal"
> PROCEDURE close_objects;</CODE
><A
CLASS="indexterm"
NAME="ch05-idx-1001416-0"
></A
></DT
><DD
CLASS="listitem"
><P
CLASS="para"
>Closes the PLVobj cursor.</P
></DD
></DL
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch05-SECT-20.0.6"
>5.20.6 Programmatic cursor FOR loop elements</A
></H3
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>PROCEDURE <A
CLASS="indexterm"
NAME="ch05-idx-1001417-0"
></A
>loopexec
   (module_in IN VARCHAR2,
    exec_in IN VARCHAR2 := c_show_object,
    placeholder_in IN VARCHAR2 := c_leph,
    name_format_in IN VARCHAR2 := c_modspec);
</PRE
></BLOCKQUOTE
><P
CLASS="para"
>The <KBD
CLASS="command"
>loopexec</KBD
> procedure simulates a cursor FOR loop through a programmatic interface using dynamic <SPAN
CLASS="acronym"
>PL/SQL</SPAN
>. You can modify the behavior of <KBD
CLASS="command"
>loopexec</KBD
> through the use of the following constants. </P
><DL
CLASS="variablelist"
><DT
CLASS="term"
><CODE
CLASS="literal"
> c_leph CONSTANT VARCHAR2(10) := ':rowobj';</CODE
><A
CLASS="indexterm"
NAME="ch05-idx-1001418-0"
></A
></DT
><DD
CLASS="listitem"
><P
CLASS="para"
>The default Loop Exec PlaceHolder string. </P
></DD
><DT
CLASS="term"
><CODE
CLASS="literal"
> c_show_object CONSTANT VARCHAR2(100) := 'p.l (:rowobj)';</CODE
><A
CLASS="indexterm"
NAME="ch05-idx-1001419-0"
></A
></DT
><DD
CLASS="listitem"
><P
CLASS="para"
>The default action for <KBD
CLASS="command"
>loopexec</KBD
>, which is to display the set of objects that are fetched by the cursor.</P
></DD
><DT
CLASS="term"
><CODE
CLASS="literal"
> c_modspec CONSTANT VARCHAR2(1) := 'S';</CODE
><A
CLASS="indexterm"
NAME="ch05-idx-1001420-0"
></A
></DT
><DT
CLASS="term"
><CODE
CLASS="literal"
>c_modname CONSTANT VARCHAR2(1) := 'N';</CODE
><A
CLASS="indexterm"
NAME="ch05-idx-1001421-0"
></A
></DT
><DD
CLASS="listitem"
><P
CLASS="para"
>Named constants for the two different formats for object names manipulated by <KBD
CLASS="command"
>loopexec</KBD
>: S for module specification and N for module name.</P
></DD
><DT
CLASS="term"
><CODE
CLASS="literal"
> v_letab PLVtab.vc2000_table;</CODE
><A
CLASS="indexterm"
NAME="ch05-idx-1001422-0"
></A
></DT
><DT
CLASS="term"
><CODE
CLASS="literal"
>v_lerowind INTEGER;</CODE
><A
CLASS="indexterm"
NAME="ch05-idx-1001423-0"
></A
></DT
><DD
CLASS="listitem"
><P
CLASS="para"
>The <SPAN
CLASS="acronym"
>PL/SQL</SPAN
> table and row count variable used to store all the objects retrieved by the programmatic cursor FOR loop, <KBD
CLASS="command"
>loopexec</KBD
>.</P
></DD
></DL
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch05-SECT-20.0.7"
>5.20.7 Saving and restoring PLVobj settings</A
></H3
><DL
CLASS="variablelist"
><DT
CLASS="term"
><CODE
CLASS="literal"
> PROCEDURE savecurr;</CODE
></DT
><DD
CLASS="listitem"
><P
CLASS="para"
>Saves the current object to private variables so that it can be restored.</P
></DD
><DT
CLASS="term"
><CODE
CLASS="literal"
> PROCEDURE restcurr;</CODE
></DT
><DD
CLASS="listitem"
><P
CLASS="para"
>  Restore the current object from the saved setting.</P
></DD
></DL
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch05-SECT-20.0.8"
>5.20.8 Miscellaneous PLVobj programs</A
></H3
><DL
CLASS="variablelist"
><DT
CLASS="term"
><CODE
CLASS="literal"
> PROCEDURE vu2pstab</CODE
><A
CLASS="indexterm"
NAME="ch05-idx-1001424-0"
></A
></DT
><DT
CLASS="term"
><CODE
CLASS="literal"
>   (module_in IN VARCHAR2,</CODE
></DT
><DT
CLASS="term"
><CODE
CLASS="literal"
>    table_out OUT PLVtab.vc2000_table,</CODE
></DT
><DT
CLASS="term"
><CODE
CLASS="literal"
>    num_objects_inout IN OUT INTEGER);</CODE
></DT
><DD
CLASS="listitem"
><P
CLASS="para"
>Copies the set of objects identified by the PLVobj cursor to a <SPAN
CLASS="acronym"
>PL/SQL</SPAN
> table. </P
></DD
><DT
CLASS="term"
><CODE
CLASS="literal"
> PROCEDURE convobj</CODE
><A
CLASS="indexterm"
NAME="ch05-idx-1001425-0"
></A
></DT
><DT
CLASS="term"
><CODE
CLASS="literal"
>  (name_inout IN OUT VARCHAR2, </CODE
></DT
><DT
CLASS="term"
><CODE
CLASS="literal"
>   type_inout IN OUT VARCHAR2, </CODE
></DT
><DT
CLASS="term"
><CODE
CLASS="literal"
>   schema_inout IN OUT VARCHAR2);</CODE
></DT
><DD
CLASS="listitem"
><P
CLASS="para"
>Converts a single object string (which can have a complex format such as <EM
CLASS="emphasis"
>type:schema.name</EM
>) </P
></DD
><DT
CLASS="term"
><CODE
CLASS="literal"
> PROCEDURE bindobj</CODE
><A
CLASS="indexterm"
NAME="ch05-idx-1001426-0"
></A
><A
CLASS="indexterm"
NAME="ch05-idx-1001426-1"
></A
></DT
><DT
CLASS="term"
><CODE
CLASS="literal"
>   (cur_in IN INTEGER,</CODE
></DT
><DT
CLASS="term"
><CODE
CLASS="literal"
>    name_col_in IN VARCHAR2 := 'name', </CODE
></DT
><DT
CLASS="term"
><CODE
CLASS="literal"
>    type_col_in IN VARCHAR2 := 'type',</CODE
></DT
><DT
CLASS="term"
><CODE
CLASS="literal"
>    schema_col_in IN VARCHAR2 := NULL);</CODE
></DT
><DD
CLASS="listitem"
><P
CLASS="para"
>Encapsulates calls to DBMS_SQL.BIND_VARIABLE to allow binding of the different elements of the current object into the specified cursor. You can bind all three elements as a subset; binding will only occur for those arguments that have non-NULL values.</P
></DD
><DT
CLASS="term"
><CODE
CLASS="literal"
> PROCEDURE convert_type (type_inout IN OUT VARCHAR2);</CODE
><A
CLASS="indexterm"
NAME="ch05-idx-1001427-0"
></A
></DT
><DD
CLASS="listitem"
><P
CLASS="para"
>Converts a variety of abbreviations for program unit types into the strings employed in the ALL_OBJECTS data dictionary view. The string "BODY", for example, is converted to the full "PACKAGE BODY".</P
></DD
></DL
></DIV
></DIV
><DIV
CLASS="htmlnav"
><P
></P
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch05_19.htm#ch05-SECT-19.0.2"
TITLE="5.19 PLVmsg: Message Handling"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 5.19 PLVmsg: Message Handling"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="book"
HREF="index.htm"
TITLE="Advanced Oracle PL/SQL Programming with Packages"
><IMG
SRC="../gifs/txthome.gif"
ALT="Advanced Oracle PL/SQL Programming with Packages"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch05_21.htm#ch05-SECT-21.0.1"
TITLE="5.21 PLVprs: String Parsing"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 5.21 PLVprs: String Parsing"
BORDER="0"></A
></TD
></TR
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
>5.19 PLVmsg: Message Handling</TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="index"
HREF="index/idx_0.htm"
TITLE="Book Index"
><IMG
SRC="../gifs/index.gif"
ALT="Book Index"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
>5.21 PLVprs: String Parsing</TD
></TR
></TABLE
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"></DIV
><IMG
SRC="../gifs/smnavbar.gif"
USEMAP="#map"
BORDER="0"
ALT="The Oracle Library Navigation">

<P><font size="-1">
<a href="../copyrght.htm#copy">Copyright (c) 2000</a> O'Reilly & Associates. All rights reserved.
</font></P>

<MAP NAME="map">

<AREA SHAPE="RECT"
COORDS="0,0,35,30"
HREF="../index.htm"
ALT="Library Home">

<AREA SHAPE="RECT"
COORDS="40,0,95,30"
HREF="../prog2/index.htm"
ALT="Oracle PL/SQL Programming, 2nd. Ed.">

<AREA SHAPE="RECT"
COORDS="100,0,200,30"
HREF="../guide8i/index.htm"
ALT="Guide to Oracle 8i Features">

<AREA SHAPE="RECT"
COORDS="205,0,245,30"
HREF="../bipack/index.htm"
ALT="Oracle Built-in Packages">

<AREA SHAPE="RECT"
COORDS="250,0,320,30"
HREF="index.htm"
ALT="Advanced PL/SQL Programming with Packages">

<AREA SHAPE="RECT"
COORDS="325,0,420,30"
HREF="../webapp/index.htm"
ALT="Oracle Web Applications">

<AREA SHAPE="RECT"
COORDS="425,0,490,30"
HREF="../langpkt/index.htm"
ALT="Oracle PL/SQL Language Pocket Reference">

<AREA SHAPE="RECT"
COORDS="495,0,570,30"
HREF="../bipkt/index.htm"
ALT="Oracle PL/SQL Built-ins Pocket Reference">
</MAP>
</BODY
>
<!-- Mirrored from liso.cs.pusan.ac.kr by HTTrack Website Copier/3.x [XR&CO'2001] -->
</HTML
>
