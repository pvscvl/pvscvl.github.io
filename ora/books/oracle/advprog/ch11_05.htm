<HTML
><HEAD
><TITLE
>[Chapter 11] 11.5 Binding Objects to a Dynamic Cursor</TITLE
><META
NAME="DC.Creator"
CONTENT="Steven Feuerstein"><META
NAME="DC.Date"
CONTENT="2000-04-29T18:27:29Z"><META
NAME="DC.Format"
CONTENT="text/html"
SCHEME="MIME"><META
NAME="DC.Identifier"
CONTENT="O'Reilly and Associates-1-56592-238-7E"><META
NAME="DC.Language"
CONTENT="en-US"><META
NAME="DC.Publisher"
CONTENT="O'Reilly &amp; Associates, Inc."><META
NAME="DC.Source"
CONTENT="1-56592-238-7E"
SCHEME="ISBN"><META
NAME="DC.Subject.Keyword"
CONTENT="PL/SQL SQL Oracle Packages"><META
NAME="DC.Title"
CONTENT="Advanced Oracle PL/SQL Programming with Packages"><META
NAME="DC.Type"
CONTENT="Text.Monograph"><META
NAME="generator"
CONTENT="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><LINK
REL="stylesheet"
TYPE="text/css"
HREF="../style/style1.css"><LINK
REV="made"
HREF="mailto:online-books@oreilly.com"
TITLE="Online Books Comments"><LINK
REL="up"
HREF="ch11_01.htm"
TITLE="11.  PLVobj: A Packaged Interface to ALL_OBJECTS"><LINK
REL="prev"
HREF="ch11_04.htm"
TITLE="11.4 Accessing ALL_OBJECTS "><LINK
REL="next"
HREF="ch11_06.htm"
TITLE="11.6 Populating a PL/SQL Table with Object Names"></HEAD>
<BODY><DIV CLASS="htmlnav"
><H1
><IMG
SRC="gifs/smbanner.gif"
ALT="Advanced Oracle PL/SQL Programming with Packages"
USEMAP="#srchmap"
BORDER="0"></H1
><MAP
NAME="srchmap"
><AREA
SHAPE="RECT"
COORDS="0,0,466,65"
HREF="index.htm"
ALT="Advanced Oracle PL/SQL Programming with Packages"><AREA
SHAPE="RECT"
COORDS="467,0,514,18"
HREF="jobjects/fsearch.htm"
ALT="Search this book"></MAP
><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch11_04.htm"
TITLE="11.4 Accessing ALL_OBJECTS "
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 11.4 Accessing ALL_OBJECTS "
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><SPAN
CLASS="NAVTITLE"
><A
CLASS="chapter"
REL="up"
HREF="ch11_01.htm"
TITLE="11.  PLVobj: A Packaged Interface to ALL_OBJECTS"
>Chapter 11<BR> PLVobj: A Packaged Interface to ALL_OBJECTS</A
></SPAN
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch11_06.htm"
TITLE="11.6 Populating a PL/SQL Table with Object Names"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 11.6 Populating a PL/SQL Table with Object Names"
BORDER="0"></A
></TD
></TR
></TABLE
>&nbsp;<HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"></DIV
><DIV
CLASS="sect1"
><H2
CLASS="sect1"
><A
CLASS="title"
NAME="ch11-19864"
>11.5 Binding Objects to a Dynamic Cursor</A
></H2
><P
CLASS="para"
>PLVobj provides the <KBD
CLASS="command"
>bindobj</KBD
><A
CLASS="indexterm"
NAME="ch11-idx-998823-0"
></A
><A
CLASS="indexterm"
NAME="ch11-idx-998823-1"
></A
><A
CLASS="indexterm"
NAME="ch11-idx-998823-2"
></A
><A
CLASS="indexterm"
NAME="ch11-idx-998823-3"
></A
> procedure to make it easier for you to utilize the PLVobj current object inside dynamic <SPAN
CLASS="acronym"
>SQL</SPAN
>. This program can be used when you have placed bind variables in your dynamically constructed cursor that correspond to one or more of the elements of the current object.</P
><P
CLASS="para"
>The header for <KBD
CLASS="command"
>bindobj</KBD
> is as follows:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>PROCEDURE bindobj
   (cur_in IN INTEGER,
    name_col_in IN VARCHAR2 := 'name', 
    type_col_in IN VARCHAR2 := 'type',
    schema_col_in IN VARCHAR2 := 'owner');</PRE
></BLOCKQUOTE
><P
CLASS="para"
>The first, and only required, argument is the handle to the DBMS_SQL cursor handle. The other parameters provide the strings which are the placeholders in the string that was parsed for that cursor handle. The default values for these placeholders correspond to the names of the columns in the ALL_SOURCE data dictionary view.</P
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch11-SECT-5.1"
>11.5.1 Specifying Which Binds Occur</A
></H3
><P
CLASS="para"
>The <KBD
CLASS="command"
>bindobj</KBD
> procedure will only call BIND_VARIABLE for those placeholders for which a non-NULL column name is provided. For example, in the following call to <KBD
CLASS="command"
>bindobj</KBD
>, BIND_VARIABLE will only be executed for the name placeholder.</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>PLVobj.bindobj (cur_handle, 'objname', NULL, NULL);</PRE
></BLOCKQUOTE
><P
CLASS="para"
>Notice that since the default values for these column names are not NULL, you must explicitly pass a NULL value in to <KBD
CLASS="command"
>bindobj</KBD
> in order to turn off a binding for that placeholder (if you do not, DBMS_SQL will raise an exception). If you only want to turn off one of the trailing bind operations (such as for the schema), while leaving the earlier column names with their defaults, you can use named notation to specify an override for just that column as shown below:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>PLVobj.bindobj (cur_handle, schema_col_in =&gt; NULL);</PRE
></BLOCKQUOTE
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch11-SECT-5.2"
>11.5.2 Using bindobj</A
></H3
><P
CLASS="para"
>The <KBD
CLASS="command"
>bindobj</KBD
> procedure comes in handy when you are using PLVobj to manage a current object, but you are not using PLVobj to query records from the ALL_OBJECTS view. You might, as does PL/Vision, want to read information from another data dictionary view that also contains object-related information, such as USER_SOURCE or USER_ERRORS. </P
><P
CLASS="para"
>I'll take you through a simple example of how to use <KBD
CLASS="command"
>bindobj</KBD
>. The script below (found in <KBD
CLASS="command"
>inline.sql</KBD
>) uses PLVobj and PLVdyn to display the line numbers of the stored source code which contains the specified string. With this script you answer such questions as: "How many (and which) lines of code in the PLVio package use the SUBSTR function?" Here, in fact, is the answer to that question:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>SQL&gt; start inline b:PLVprs SUBSTR
Lines with SUBSTR in PLV.PLVPRS.PACKAGE BODY
54
63
76
141
144
219
242
282
303
306
312
315
377</PRE
></BLOCKQUOTE
><P
CLASS="para"
>And here is the <KBD
CLASS="command"
>inline.sql</KBD
> script:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>SET VERIFY OFF
DECLARE
   v_sql VARCHAR2(2000) := 
     'SELECT line FROM user_source ' ||
     ' WHERE name = :name ' ||
     '   AND type = :type ' ||
     '   AND INSTR (text, ''&amp;2'') &gt; 0' ||
     ' ORDER BY line';
   v_line INTEGER;
   cur INTEGER;
BEGIN
   PLVobj.setcurr ('&amp;1');</PRE
></BLOCKQUOTE
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>   cur := PLVdyn.open_and_parse (v_sql);
   DBMS_SQL.DEFINE_COLUMN (cur, 1, v_line);
   PLVobj.bindobj (cur, schema_col_in =&gt; NULL);
   PLVdyn.execute (cur);
   
   p.l ('Lines with &amp;2 in ' || PLVobj.fullname);
   LOOP
      EXIT WHEN DBMS_SQL.FETCH_ROWS (cur) = 0;
      DBMS_SQL.COLUMN_VALUE (cur, 1, v_line);
      p.l (v_line);
   END LOOP; 
END;
/</PRE
></BLOCKQUOTE
><P
CLASS="para"
>In the <KBD
CLASS="command"
>inline.sql</KBD
> script, I use <KBD
CLASS="command"
>PLVobj.setcurr</KBD
> to set the current object (passed in as the first argument to the script). I then perform several steps of dynamic <SPAN
CLASS="acronym"
>SQL</SPAN
> to open and parse the cursor and then define the single column for the SELECT statement. Before I can execute the cursor, I need to provide bind values for the <KBD
CLASS="command"
>:name</KBD
> and <KBD
CLASS="command"
>:type</KBD
> placeholders. </P
><P
CLASS="para"
>Since I have called <KBD
CLASS="command"
>PLVobj.setcurr</KBD
>, I can take advantage of the current object by calling the <KBD
CLASS="command"
>bindobj</KBD
> procedure. It automatically binds the name and type of the current object to my locally defined dynamic <SPAN
CLASS="acronym"
>SQL</SPAN
> statement. Since I am working with USER_SOURCE, I specify in my call to <KBD
CLASS="command"
>bindobj</KBD
> that I do not have any schema placeholder to be bound.</P
><P
CLASS="para"
>Following the bind, I execute and then loop through all the rows in the result set, displaying the line number.</P
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch11-SECT-5.3"
>11.5.3 Using bindobj in PL/Vision</A
></H3
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="ch11-idx-998824-0"
></A
>The PLVio package contains a private procedure that makes use of <KBD
CLASS="command"
>PLVobj.bindobj</KBD
>. The <KBD
CLASS="command"
>prepsrc</KBD
> procedure prepares the source when it is a database table. This preparation phase involves calling the necessary dynamic <SPAN
CLASS="acronym"
>SQL</SPAN
> programs to define and execute a cursor against the table. Here is a simplified version of <KBD
CLASS="command"
>prepsrc</KBD
>:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>PROCEDURE prepsrc (cur_in IN OUT INTEGER)
IS
   v_namecol PLV.plsql_identifier%TYPE := srcrep.name_col;
   v_typecol PLV.plsql_identifier%TYPE := srcrep.type_col;
   v_schemacol PLV.plsql_identifier%TYPE := srcrep.schema_col;
BEGIN
   cur_in := PLVdyn.open_and_parse (srcselect);

  /* Check to see if placeholders need to be bound. */

   IF INSTR (srcselect, ':' || v_namecol) = 0
   THEN
      v_namecol := NULL;
   END IF;

   IF INSTR (srcselect, ':' || v_typecol) = 0
   THEN
       v_typecol := NULL;
    END IF;

   IF INSTR (srcselect, ':' || v_schemacol) = 0
   THEN
       v_schemacol := NULL;
    END IF;

   PLVobj.bindobj (cur_in, v_namecol, v_typecol, v_schemacol);

   PLVdyn.execute (cur_in);

END prepsrc;</PRE
></BLOCKQUOTE
><P
CLASS="para"
>Translation: Use the PLVdyn (PL/Vision DYNamic SQL) package to open and parse a select statement which has already been constructed (and is returned by the call to the function <KBD
CLASS="command"
>srcselect</KBD
>). Since the user of PLVio can modify the contents of the SELECT statement, I then use IF statements to check to see whether the standard name and type placeholders are in the dynamic <SPAN
CLASS="acronym"
>SQL</SPAN
> string. I use the INSTR builtin combined with the default column names to see if placeholders for name, type, or schema appear in the SELECT statement. If not, I set the corresponding column names to NULL. </P
><P
CLASS="para"
>Next, I call the <KBD
CLASS="command"
>bindobj</KBD
> procedure to bind this cursor for the current object (<KBD
CLASS="command"
>PLVmod.currschema</KBD
>, <KBD
CLASS="command"
>PLVmod.currname</KBD
>, and <KBD
CLASS="command"
>PLVmod.currtype</KBD
>), but only for those placeholders that are present. At the end of <KBD
CLASS="command"
>prepsrc</KBD
>, I execute the cursor using PLVdyn. <A
CLASS="indexterm"
NAME="ch11-idx-998825-0"
></A
><A
CLASS="indexterm"
NAME="ch11-idx-998825-1"
></A
><A
CLASS="indexterm"
NAME="ch11-idx-998825-2"
></A
><A
CLASS="indexterm"
NAME="ch11-idx-998825-3"
></A
></P
></DIV
></DIV
><DIV
CLASS="htmlnav"
><P
></P
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch11_04.htm"
TITLE="11.4 Accessing ALL_OBJECTS "
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 11.4 Accessing ALL_OBJECTS "
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="book"
HREF="index.htm"
TITLE="Advanced Oracle PL/SQL Programming with Packages"
><IMG
SRC="../gifs/txthome.gif"
ALT="Advanced Oracle PL/SQL Programming with Packages"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch11_06.htm"
TITLE="11.6 Populating a PL/SQL Table with Object Names"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 11.6 Populating a PL/SQL Table with Object Names"
BORDER="0"></A
></TD
></TR
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
>11.4 Accessing ALL_OBJECTS </TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="index"
HREF="index/idx_0.htm"
TITLE="Book Index"
><IMG
SRC="../gifs/index.gif"
ALT="Book Index"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
>11.6 Populating a PL/SQL Table with Object Names</TD
></TR
></TABLE
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"></DIV
><IMG
SRC="../gifs/smnavbar.gif"
USEMAP="#map"
BORDER="0"
ALT="The Oracle Library Navigation">

<P><font size="-1">
<a href="../copyrght.htm#copy">Copyright (c) 2000</a> O'Reilly & Associates. All rights reserved.
</font></P>

<MAP NAME="map">

<AREA SHAPE="RECT"
COORDS="0,0,35,30"
HREF="../index.htm"
ALT="Library Home">

<AREA SHAPE="RECT"
COORDS="40,0,95,30"
HREF="../prog2/index.htm"
ALT="Oracle PL/SQL Programming, 2nd. Ed.">

<AREA SHAPE="RECT"
COORDS="100,0,200,30"
HREF="../guide8i/index.htm"
ALT="Guide to Oracle 8i Features">

<AREA SHAPE="RECT"
COORDS="205,0,245,30"
HREF="../bipack/index.htm"
ALT="Oracle Built-in Packages">

<AREA SHAPE="RECT"
COORDS="250,0,320,30"
HREF="index.htm"
ALT="Advanced PL/SQL Programming with Packages">

<AREA SHAPE="RECT"
COORDS="325,0,420,30"
HREF="../webapp/index.htm"
ALT="Oracle Web Applications">

<AREA SHAPE="RECT"
COORDS="425,0,490,30"
HREF="../langpkt/index.htm"
ALT="Oracle PL/SQL Language Pocket Reference">

<AREA SHAPE="RECT"
COORDS="495,0,570,30"
HREF="../bipkt/index.htm"
ALT="Oracle PL/SQL Built-ins Pocket Reference">
</MAP>
</BODY
>
<!-- Mirrored from liso.cs.pusan.ac.kr by HTTrack Website Copier/3.x [XR&CO'2001] -->
</HTML
>
