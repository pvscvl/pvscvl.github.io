<HTML
><HEAD
><TITLE
>[Chapter 19] 19.3 The Dynamic Packages of PL/Vision</TITLE
><META
NAME="DC.Creator"
CONTENT="Steven Feuerstein"><META
NAME="DC.Date"
CONTENT="2000-04-29T18:30:36Z"><META
NAME="DC.Format"
CONTENT="text/html"
SCHEME="MIME"><META
NAME="DC.Identifier"
CONTENT="O'Reilly and Associates-1-56592-238-7E"><META
NAME="DC.Language"
CONTENT="en-US"><META
NAME="DC.Publisher"
CONTENT="O'Reilly &amp; Associates, Inc."><META
NAME="DC.Source"
CONTENT="1-56592-238-7E"
SCHEME="ISBN"><META
NAME="DC.Subject.Keyword"
CONTENT="PL/SQL SQL Oracle Packages"><META
NAME="DC.Title"
CONTENT="Advanced Oracle PL/SQL Programming with Packages"><META
NAME="DC.Type"
CONTENT="Text.Monograph"><META
NAME="generator"
CONTENT="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><LINK
REL="stylesheet"
TYPE="text/css"
HREF="../style/style1.css"><LINK
REV="made"
HREF="mailto:online-books@oreilly.com"
TITLE="Online Books Comments"><LINK
REL="up"
HREF="ch19_01.htm"
TITLE="19. PLVdyn and PLVfk: Dynamic SQL and PL/SQL"><LINK
REL="prev"
HREF="ch19_02.htm"
TITLE="19.2 Declarative Programming in PL/SQL"><LINK
REL="next"
HREF="ch19_04.htm#ch19-SECT-4.1.7"
TITLE="19.4 PLVdyn: A Code Layer over DBMS_SQL"></HEAD>
<BODY><DIV CLASS="htmlnav"
><H1
><IMG
SRC="gifs/smbanner.gif"
ALT="Advanced Oracle PL/SQL Programming with Packages"
USEMAP="#srchmap"
BORDER="0"></H1
><MAP
NAME="srchmap"
><AREA
SHAPE="RECT"
COORDS="0,0,466,65"
HREF="index.htm"
ALT="Advanced Oracle PL/SQL Programming with Packages"><AREA
SHAPE="RECT"
COORDS="467,0,514,18"
HREF="jobjects/fsearch.htm"
ALT="Search this book"></MAP
><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch19_02.htm"
TITLE="19.2 Declarative Programming in PL/SQL"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 19.2 Declarative Programming in PL/SQL"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><SPAN
CLASS="NAVTITLE"
><A
CLASS="chapter"
REL="up"
HREF="ch19_01.htm"
TITLE="19. PLVdyn and PLVfk: Dynamic SQL and PL/SQL"
>Chapter 19<BR>PLVdyn and PLVfk: Dynamic SQL and PL/SQL</A
></SPAN
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch19_04.htm#ch19-SECT-4.1.7"
TITLE="19.4 PLVdyn: A Code Layer over DBMS_SQL"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 19.4 PLVdyn: A Code Layer over DBMS_SQL"
BORDER="0"></A
></TD
></TR
></TABLE
>&nbsp;<HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"></DIV
><DIV
CLASS="sect1"
><H2
CLASS="sect1"
><A
CLASS="title"
NAME="ch19-42631"
>19.3 The Dynamic Packages of PL/Vision</A
></H2
><P
CLASS="para"
>The builtin <A
CLASS="indexterm"
NAME="ch19-idx-999291-0"
></A
>DBMS_SQL package supports all four methods of dynamic <SPAN
CLASS="acronym"
>SQL</SPAN
>, as well as dynamic <SPAN
CLASS="acronym"
>PL/SQL</SPAN
> code execution. It is a very powerful and useful tool that can in many ways transform the way in which you build applications, especially generic, reusable utilities, with <SPAN
CLASS="acronym"
>PL/SQL</SPAN
>.</P
><P
CLASS="para"
>There is, however, a tiny, little problem with DBMS_SQL: it is just too darn complicated. It consists of more than a dozen procedures and functions. These programs need to be used in a very particular sequence. Furthermore, depending on the method of dynamic <SPAN
CLASS="acronym"
>SQL</SPAN
> you wish to implement, you will use different combinations of those builtins. Finally, it just comes down to an awful lot of typing and know-how, even if you want to do something relatively simple. (See the sidebar for a general description of the flow of program calls for dynamic <SPAN
CLASS="acronym"
>SQL</SPAN
>. See <A
CLASS="xref"
HREF="ch15_01.htm"
>Chapter 15, <CITE
CLASS="chapter"
>PLVvu: Viewing Source Code and Compile Errors</CITE
></A
>, for a more complete description of DBMS_SQL.)</P
><P
CLASS="para"
>The result of this complexity is that relatively few developers take full advantage of all that DBMS_SQL has to offer. And since many of the actions required for dynamic <SPAN
CLASS="acronym"
>SQL</SPAN
> are the same regardless of the <SPAN
CLASS="acronym"
>SQL</SPAN
> statement, those individuals will be writing the same code over again.</P
><P
CLASS="para"
>What is wrong with this picture? Code redundancy is a maintenance nightmare. Requiring all developers to know the picayune details of technology like dynamic <SPAN
CLASS="acronym"
>SQL</SPAN
> is a productivity nightmare. Getting all of these versions of dynamic <SPAN
CLASS="acronym"
>SQL</SPAN
> to work is a code quality nightmare. Hey! Working with <SPAN
CLASS="acronym"
>PL/SQL</SPAN
> should not resemble a Freddy Krueger sequel. There's got to be something we can do here.</P
><DIV
CLASS="sidebar"
><H4
CLASS="sidebar"
><A
CLASS="title"
NAME="AUTOID-19564"
>A DBMS_SQL Recap</A
></H4
><P
CLASS="para"
>The builtin DBMS_SQL package allows you to dynamically construct and execute <SPAN
CLASS="acronym"
>SQL</SPAN
> and <SPAN
CLASS="acronym"
>PL/SQL</SPAN
> statements. You get full programmatic control&nbsp;-- and with it comes full <EM
CLASS="emphasis"
>responsibility</EM
>. With DBMS_SQL, nothing is taken for granted. You must specify each and every operation on the <SPAN
CLASS="acronym"
>SQL</SPAN
> statement, usually with a wide variety of procedure calls, from the <SPAN
CLASS="acronym"
>SQL</SPAN
> statement itself down to the values of bind variables and the data types of columns in SELECT statements.</P
><P
CLASS="para"
>To execute dynamic <SPAN
CLASS="acronym"
>SQL</SPAN
> (and <SPAN
CLASS="acronym"
>PL/SQL</SPAN
>) with the DBMS_SQL you must follow this general flow:</P
><P
CLASS="para"
><EM
CLASS="emphasis"
>Open a cursor.</EM
> When you open a cursor, you ask the RDBMs to set aside and maintain a valid cursor structure for your use with future DBMS_SQL calls. The RDBMs returns an INTEGER "handle" to this cursor. You will use this handle in all future calls to DBMS_SQL modules for this dynamic <SPAN
CLASS="acronym"
>SQL</SPAN
> statement. Note that this cursor is completely distinct from static <SPAN
CLASS="acronym"
>PL/SQL</SPAN
> cursors (whether implicit or explicit).</P
><P
CLASS="para"
><EM
CLASS="emphasis"
>Parse the SQL statement.</EM
> Before you can specify bind variable values and column structures for the <SPAN
CLASS="acronym"
>SQL</SPAN
> statement, it must be parsed by the RDBMs. This parse phase verifies that the <SPAN
CLASS="acronym"
>SQL</SPAN
> statement is properly constructed. It then associates the <SPAN
CLASS="acronym"
>SQL</SPAN
> statement with your cursor handle. Note that when you parse a DDL statement it is also executed immediately. Upon successful completion of the DDL parse, the RDBMs also issues an implicit commit. This behavior is consistent with that of SQL*Plus.</P
><P
CLASS="para"
><EM
CLASS="emphasis"
>Bind all host variables.</EM
> If the <SPAN
CLASS="acronym"
>SQL</SPAN
> statement contains references to host <SPAN
CLASS="acronym"
>PL/SQL</SPAN
> variables, you include placeholders to those variables in the <SPAN
CLASS="acronym"
>SQL</SPAN
> statement by prefacing their names with a colon, as in <KBD
CLASS="command"
>:salary</KBD
>. You must then bind the actual value for that variable into the <SPAN
CLASS="acronym"
>SQL</SPAN
> statement.</P
><P
CLASS="para"
><EM
CLASS="emphasis"
>Define the columns in SELECT statements.</EM
> Each column in the list of the SELECT must be defined. This define phase sets up a correspondence between the expressions in the list of the <SPAN
CLASS="acronym"
>SQL</SPAN
> statement and local <SPAN
CLASS="acronym"
>PL/SQL</SPAN
> variables that receive the values when a row is fetched (see COLUMN_VALUE). This step is necessary only for SELECT statements and is roughly equivalent to the INTO clause of an implicit SELECT statement in <SPAN
CLASS="acronym"
>PL/SQL</SPAN
>.</P
><P
CLASS="para"
><EM
CLASS="emphasis"
>Execute the SQL statement.</EM
> Execute the specified cursor, that is, its associated <SPAN
CLASS="acronym"
>SQL</SPAN
> statement. If the <SPAN
CLASS="acronym"
>SQL</SPAN
> statement is an INSERT, UPDATE, or DELETE, the EXECUTE command returns the numbers of rows processed. Otherwise you should ignore that return value.</P
><P
CLASS="para"
><EM
CLASS="emphasis"
>Fetch rows from the dynamic SQL query.</EM
> If you execute a <SPAN
CLASS="acronym"
>SQL</SPAN
> statement, you must then fetch the rows from the cursor, as you would with a <SPAN
CLASS="acronym"
>PL/SQL</SPAN
> cursor. When you fetch, however, you do not fetch directly into local <SPAN
CLASS="acronym"
>PL/SQL</SPAN
> variables.</P
><P
CLASS="para"
><EM
CLASS="emphasis"
>Retrieve values from the execution of the dynamic SQL.</EM
> If the SQL statement is a query, you will retrieve values from the SELECT expression list using COLUMN_VALUE. If you have executed a PL/SQL block, you will use VARIABLE_VALUE to retrieve any bind variables included in the PL/SQL code.</P
><P
CLASS="para"
><EM
CLASS="emphasis"
>Close the cursor.</EM
> Just as with normal PL/SQL cursors, you should always clean up by closing the cursor when you are done. This releases the memory associated with the cursor.</P
></DIV
><P
CLASS="para"
>The answer is simple, at least in concept: build a package. And that is what I did. In fact, I built three packages for dynamic <SPAN
CLASS="acronym"
>SQL</SPAN
> that make it easier to use the builtin DBMS_SQL package: </P
><DL
CLASS="variablelist"
><DT
CLASS="term"
>PLVdyn</DT
><DD
CLASS="listitem"
><P
CLASS="para"
>Gives a thorough layer of code built around the DBMS_SQL builtin package.</P
></DD
></DL
><DL
CLASS="variablelist"
><DT
CLASS="term"
>PLVdyn1</DT
><DD
CLASS="listitem"
><P
CLASS="para"
>Supports single bind variable dynamic <SPAN
CLASS="acronym"
>SQL</SPAN
>.</P
></DD
></DL
><DL
CLASS="variablelist"
><DT
CLASS="term"
>PLVfk</DT
><DD
CLASS="listitem"
><P
CLASS="para"
>Offers a generic utility to perform foreign key lookups for any table.</P
></DD
></DL
><P
CLASS="para"
>PLVdyn and PLVfk are covered in this chapter; PLVdyn1, which works in similar fashion to PLVdyn, is described on the companion disk.</P
></DIV
><DIV
CLASS="htmlnav"
><P
></P
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch19_02.htm"
TITLE="19.2 Declarative Programming in PL/SQL"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 19.2 Declarative Programming in PL/SQL"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="book"
HREF="index.htm"
TITLE="Advanced Oracle PL/SQL Programming with Packages"
><IMG
SRC="../gifs/txthome.gif"
ALT="Advanced Oracle PL/SQL Programming with Packages"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch19_04.htm#ch19-SECT-4.1.7"
TITLE="19.4 PLVdyn: A Code Layer over DBMS_SQL"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 19.4 PLVdyn: A Code Layer over DBMS_SQL"
BORDER="0"></A
></TD
></TR
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
>19.2 Declarative Programming in PL/SQL</TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="index"
HREF="index/idx_0.htm"
TITLE="Book Index"
><IMG
SRC="../gifs/index.gif"
ALT="Book Index"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
>19.4 PLVdyn: A Code Layer over DBMS_SQL</TD
></TR
></TABLE
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"></DIV
><IMG
SRC="../gifs/smnavbar.gif"
USEMAP="#map"
BORDER="0"
ALT="The Oracle Library Navigation">

<P><font size="-1">
<a href="../copyrght.htm#copy">Copyright (c) 2000</a> O'Reilly & Associates. All rights reserved.
</font></P>

<MAP NAME="map">

<AREA SHAPE="RECT"
COORDS="0,0,35,30"
HREF="../index.htm"
ALT="Library Home">

<AREA SHAPE="RECT"
COORDS="40,0,95,30"
HREF="../prog2/index.htm"
ALT="Oracle PL/SQL Programming, 2nd. Ed.">

<AREA SHAPE="RECT"
COORDS="100,0,200,30"
HREF="../guide8i/index.htm"
ALT="Guide to Oracle 8i Features">

<AREA SHAPE="RECT"
COORDS="205,0,245,30"
HREF="../bipack/index.htm"
ALT="Oracle Built-in Packages">

<AREA SHAPE="RECT"
COORDS="250,0,320,30"
HREF="index.htm"
ALT="Advanced PL/SQL Programming with Packages">

<AREA SHAPE="RECT"
COORDS="325,0,420,30"
HREF="../webapp/index.htm"
ALT="Oracle Web Applications">

<AREA SHAPE="RECT"
COORDS="425,0,490,30"
HREF="../langpkt/index.htm"
ALT="Oracle PL/SQL Language Pocket Reference">

<AREA SHAPE="RECT"
COORDS="495,0,570,30"
HREF="../bipkt/index.htm"
ALT="Oracle PL/SQL Built-ins Pocket Reference">
</MAP>
</BODY
>
<!-- Mirrored from liso.cs.pusan.ac.kr by HTTrack Website Copier/3.x [XR&CO'2001] -->
</HTML
>
