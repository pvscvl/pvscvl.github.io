<HTML
><HEAD
><TITLE
>[Chapter 12] 12.4 The Source WHERE Clause</TITLE
><META
NAME="DC.Creator"
CONTENT="Steven Feuerstein"><META
NAME="DC.Date"
CONTENT="2000-04-29T18:27:48Z"><META
NAME="DC.Format"
CONTENT="text/html"
SCHEME="MIME"><META
NAME="DC.Identifier"
CONTENT="O'Reilly and Associates-1-56592-238-7E"><META
NAME="DC.Language"
CONTENT="en-US"><META
NAME="DC.Publisher"
CONTENT="O'Reilly &amp; Associates, Inc."><META
NAME="DC.Source"
CONTENT="1-56592-238-7E"
SCHEME="ISBN"><META
NAME="DC.Subject.Keyword"
CONTENT="PL/SQL SQL Oracle Packages"><META
NAME="DC.Title"
CONTENT="Advanced Oracle PL/SQL Programming with Packages"><META
NAME="DC.Type"
CONTENT="Text.Monograph"><META
NAME="generator"
CONTENT="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><LINK
REL="stylesheet"
TYPE="text/css"
HREF="../style/style1.css"><LINK
REV="made"
HREF="mailto:online-books@oreilly.com"
TITLE="Online Books Comments"><LINK
REL="up"
HREF="ch12_01.htm"
TITLE="12. PLVio: Reading and Writing PL/SQL Source Code"><LINK
REL="prev"
HREF="ch12_03.htm#ch12-SECT-3.2"
TITLE="12.3 Managing the Source Repository"><LINK
REL="next"
HREF="ch12_05.htm"
TITLE="12.5 Managing the Target Repository"></HEAD>
<BODY><DIV CLASS="htmlnav"
><H1
><IMG
SRC="gifs/smbanner.gif"
ALT="Advanced Oracle PL/SQL Programming with Packages"
USEMAP="#srchmap"
BORDER="0"></H1
><MAP
NAME="srchmap"
><AREA
SHAPE="RECT"
COORDS="0,0,466,65"
HREF="index.htm"
ALT="Advanced Oracle PL/SQL Programming with Packages"><AREA
SHAPE="RECT"
COORDS="467,0,514,18"
HREF="jobjects/fsearch.htm"
ALT="Search this book"></MAP
><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch12_03.htm#ch12-SECT-3.2"
TITLE="12.3 Managing the Source Repository"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 12.3 Managing the Source Repository"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><SPAN
CLASS="NAVTITLE"
><A
CLASS="chapter"
REL="up"
HREF="ch12_01.htm"
TITLE="12. PLVio: Reading and Writing PL/SQL Source Code"
>Chapter 12<BR>PLVio: Reading and Writing PL/SQL Source Code</A
></SPAN
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch12_05.htm"
TITLE="12.5 Managing the Target Repository"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 12.5 Managing the Target Repository"
BORDER="0"></A
></TD
></TR
></TABLE
>&nbsp;<HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"></DIV
><DIV
CLASS="sect1"
><H2
CLASS="sect1"
><A
CLASS="title"
NAME="ch12-25286"
>12.4 The Source WHERE Clause</A
></H2
><P
CLASS="para"
>PLVio provides a set of programs used within PLVio and also available to you to modify the contents of the <A
CLASS="indexterm"
NAME="ch12-idx-998722-0"
></A
><A
CLASS="indexterm"
NAME="ch12-idx-998722-1"
></A
><A
CLASS="indexterm"
NAME="ch12-idx-998722-2"
></A
>WHERE clause of the SELECT statement for a database table source. These programs must be called after the call to <KBD
CLASS="command"
>setsrc</KBD
> and before the call to <KBD
CLASS="command"
>initsrc</KBD
>.</P
><P
CLASS="para"
>The default WHERE clause for the database source is:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>WHERE name = PLVobj.currname
  AND type = PLVobj.currtype</PRE
></BLOCKQUOTE
><P
CLASS="para"
>This WHERE clause reflects the relationship between the current object of PLVobj and the default PLVio source database table, <KBD
CLASS="command"
>user_source</KBD
>. It is stored directly in the <KBD
CLASS="command"
>srcrep.select_sql</KBD
> field and is set in the call to <KBD
CLASS="command"
>setsrc</KBD
>. Additional WHERE clause information is stored in the <KBD
CLASS="command"
>where_clause</KBD
> field of the same <KBD
CLASS="command"
>srcrep</KBD
> record (see <A
CLASS="xref"
HREF="ch12_02.htm#ch12-SECT-2.5"
>Section 12.2.2, "Database Source or Target"</A
> earlier in this chapter).</P
><P
CLASS="para"
>You can modify this WHERE clause in two ways: replace it completely or add additional elements to that clause. The <KBD
CLASS="command"
>set_srcselect</KBD
> will do either of these actions. The <KBD
CLASS="command"
>set_line_limit</KBD
> applies additional elements to the WHERE clause. <KBD
CLASS="command"
>rem_srcselect</KBD
> and <KBD
CLASS="command"
>rem_line_limit</KBD
> remove elements from the WHERE clause. The <KBD
CLASS="command"
>srcselect</KBD
> function displays the current SELECT statement.</P
><P
CLASS="para"
>Each of these programs is explained below.</P
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch12-SECT-4.1"
>12.4.1 Viewing the Current Source SELECT</A
></H3
><P
CLASS="para"
>First, use the <KBD
CLASS="command"
>srcselect</KBD
><A
CLASS="indexterm"
NAME="ch12-idx-998723-0"
></A
><A
CLASS="indexterm"
NAME="ch12-idx-998723-1"
></A
> function to retrieve the current structure of the SELECT statement for the source repository. In the following example, I use <KBD
CLASS="command"
>p.l</KBD
> to display the current SELECT.</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>SQL&gt; exec p.l(PLVio.srcselect);
SELECT text, line  FROM user_source WHERE instr (text, 'RAISE') &gt; 0 AND
name = 'PLVEXC' ORDER BY line</PRE
></BLOCKQUOTE
><P
CLASS="para"
>This string is an example of a SELECT in which the WHERE clause was substituted completely by a call to <KBD
CLASS="command"
>set_srcwhere</KBD
>. The following session in SQL*Plus sets the source to the ALL_SOURCE view. The <KBD
CLASS="command"
>srcselect</KBD
> function returns the default (and more normal) kind of SELECT built and executed by PLVio.</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>SQL&gt; exec PLVio.asrc
SQL&gt; exec p.l(PLVio.srcselect);
SELECT text, line  FROM all_source WHERE name = :name AND type = :type
 AND owner = :owner ORDER BY line</PRE
></BLOCKQUOTE
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch12-SECT-4.2"
>12.4.2 Changing the WHERE Clause </A
></H3
><P
CLASS="para"
>To modify directly the WHERE clause of the SELECT statement, you will call the <KBD
CLASS="command"
>set_srcwhere</KBD
><A
CLASS="indexterm"
NAME="ch12-idx-998724-0"
></A
> procedure, whose header is:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>   PROCEDURE set_srcwhere (where_in IN VARCHAR2);</PRE
></BLOCKQUOTE
><P
CLASS="para"
>This procedure modifies the WHERE clause according to the following rules:</P
><OL
CLASS="orderedlist"
><LI
CLASS="listitem"
><P
CLASS="para"
>If the string starts with AND, then the string is simply concatenated to the current WHERE clause.</P
></LI
><LI
CLASS="listitem"
><P
CLASS="para"
>If the string starts with WHERE, then the entire current WHERE clause is replaced with the string provided by the user.</P
></LI
><LI
CLASS="listitem"
><P
CLASS="para"
>In all other cases, the core part of the WHERE clause (containing the bind variables for <KBD
CLASS="command"
>PLVobj.currname</KBD
> and <KBD
CLASS="command"
>PLVobj.currtype</KBD
>) is preserved, but any other additional elements are replaced by the specified string.</P
></LI
></OL
><P
CLASS="para"
>A few examples will demonstrate this procedure's impact. In each case, I initialize the SELECT statement with a call to <KBD
CLASS="command"
>PLVio.asrc</KBD
> so that the <KBD
CLASS="command"
>select_stg</KBD
> contains this information:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>SELECT text, line  
  FROM all_source
 WHERE name = :name 
   AND type = :type
   AND owner = :owner
 ORDER BY line</PRE
></BLOCKQUOTE
><P
CLASS="para"
>Let's see what happens when I use <KBD
CLASS="command"
>set_srcselect</KBD
> to change the WHERE clause:</P
><OL
CLASS="orderedlist"
><LI
CLASS="listitem"
><P
CLASS="para"
>Add a clause to request that only lines 1 through 5 are read from ALL_SOURCE:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>PLVio.set_srcselect ('AND line BETWEEN 1 AND 5');</PRE
></BLOCKQUOTE
><P
CLASS="para"
>The <KBD
CLASS="command"
>srcselect</KBD
> now looks like this:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>SELECT text, line  
  FROM all_source
 WHERE name = :name 
   AND type = :type
   AND owner = :owner
   AND line BETWEEN 1 AND 5
 ORDER BY line</PRE
></BLOCKQUOTE
></LI
><LI
CLASS="listitem"
><P
CLASS="para"
>Add the same clause as in Example 1 and then <EM
CLASS="emphasis"
>replace</EM
> it with an element that limits rows retrieved to those that start with the keyword IF.</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>PLVio.set_srcselect ('AND line BETWEEN 1 AND 5');
PLVio.set_srcselect ('LTRIM (text) LIKE ''IF%''');</PRE
></BLOCKQUOTE
><P
CLASS="para"
>The <KBD
CLASS="command"
>srcselect</KBD
> now looks like this:</P
></LI
></OL
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>SELECT text, line  </PRE
></BLOCKQUOTE
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>  FROM all_source
 WHERE name = :name 
   AND type = :type
   AND owner = :owner
   AND LTRIM (text) LIKE 'IF%'
 ORDER BY line</PRE
></BLOCKQUOTE
><OL
CLASS="orderedlist"
START="3"
><LI
CLASS="listitem"
><P
CLASS="para"
>The following script displays all the lines currently stored in the USER_SOURCE data dictionary view that contain the keyword RAISE.</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>DECLARE
   line PLVio.line_type;
   numlines NUMBER;
BEGIN
   PLVio.setsrc (PLV.dbtab);
   PLVio.set_srcwhere
      ('WHERE instr (text, ''RAISE'') &gt; 0');
   PLVio.initsrc;       
   LOOP
      PLVio.get_line (line, numlines);
      exit when line.eof;
      p.l (line.text);
   END LOOP;
END;
/</PRE
></BLOCKQUOTE
><P
CLASS="para"
>Notice that the string I pass to <KBD
CLASS="command"
>set_srcwhere</KBD
> begins with the WHERE keyword. This signals to PLVio that the entire WHERE clause is to be discarded and replaced with the argument string so, in this case, <KBD
CLASS="command"
>srcselect</KBD
> would display this string:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>SELECT text, line  
  FROM all_source
 WHERE instr (text, 'RAISE') &gt; 0
 ORDER BY line<A
CLASS="indexterm"
NAME="ch12-idx-998725-0"
></A
></PRE
></BLOCKQUOTE
></LI
></OL
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch12-SECT-4.3"
>12.4.3 Setting a Line Limit</A
></H3
><P
CLASS="para"
>The final program you can use to change the WHERE clause is the <KBD
CLASS="command"
>set_line_limit</KBD
><A
CLASS="indexterm"
NAME="ch12-idx-998726-0"
></A
><A
CLASS="indexterm"
NAME="ch12-idx-998726-1"
></A
><A
CLASS="indexterm"
NAME="ch12-idx-998726-2"
></A
> procedure. The header of <KBD
CLASS="command"
>set_line_limit</KBD
> is:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>   PROCEDURE set_line_limit
      (line_in IN INTEGER, loc_type_in IN VARCHAR2 := c_first);</PRE
></BLOCKQUOTE
><P
CLASS="para"
>The first argument, <KBD
CLASS="command"
>line_in</KBD
>, is the line number involved in the restriction. The <KBD
CLASS="command"
>loc_type_in</KBD
> argument dictates how the line number is used to narrow down the rows retrieved. There are four possible location types; the impact of each of these is explained in the table below.</P
><TABLE
CLASS="informaltable"
BORDER="1"
CELLPADDING="3"
><THEAD
CLASS="thead"
><TR
CLASS="row"
VALIGN="TOP"
><TH
CLASS="entry"
ALIGN="LEFT"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>Constant</P
></TH
><TH
CLASS="entry"
ALIGN="LEFT"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>Action</P
></TH
></TR
></THEAD
><TBODY
CLASS="tbody"
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
><KBD
CLASS="command"
>c_first</KBD
></P
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>Retrieve lines &gt;= specified line number</P
></TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
><KBD
CLASS="command"
>c_last</KBD
></P
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>Retrieve lines &lt;= specified line number</P
></TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
><KBD
CLASS="command"
>c_before</KBD
></P
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>Retrieve lines &gt; specified line number</P
></TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
><KBD
CLASS="command"
>c_after</KBD
></P
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>Retrieve lines &lt; specified line number</P
></TD
></TR
></TBODY
></TABLE
><P
CLASS="para"
>Here are some examples of the impact of <KBD
CLASS="command"
>set_line_limit</KBD
>:</P
><OL
CLASS="orderedlist"
><LI
CLASS="listitem"
><P
CLASS="para"
>Request that only lines greater than 100 be retrieved:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>PLVio.set_line_limit (100, PLVio.c_after);</PRE
></BLOCKQUOTE
><P
CLASS="para"
>which adds the following element to the WHERE clause:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>/*LL100*/ AND line &gt; 100 /*LL100*/</PRE
></BLOCKQUOTE
><P
CLASS="para"
>The comments which bracket the AND statement are included so that the entire element can be identified and removed as needed.</P
></LI
><LI
CLASS="listitem"
><P
CLASS="para"
>Request that only lines less than or equal to 27 be retrieved:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>PLVio.set_line_limit (27, PLVio.c_last);</PRE
></BLOCKQUOTE
><P
CLASS="para"
>This call adds the following element to the WHERE clause:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>/*LL100*/ AND line &lt;= 27 /*LL100*/</PRE
></BLOCKQUOTE
><P
CLASS="para"
>The <KBD
CLASS="command"
>set_line_limit</KBD
> procedure is used by <KBD
CLASS="command"
>initsrc</KBD
> to process the "starting at" and "ending at" arguments. The string version of <KBD
CLASS="command"
>initsrc</KBD
> also makes use of the <KBD
CLASS="command"
>line_with</KBD
> function to convert a "starting at" string into the appropriate line number, which is then passed to the integer version of <KBD
CLASS="command"
>initsrc</KBD
>, which then calls <KBD
CLASS="command"
>set_line_limit</KBD
>. Review that code for more pointers about how to use both of these line-restricter programs.</P
></LI
></OL
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch12-SECT-4.4"
>12.4.4 Cleaning Up the WHERE Clause</A
></H3
><P
CLASS="para"
>You can also <EM
CLASS="emphasis"
>remove</EM
> elements from the <A
CLASS="indexterm"
NAME="ch12-idx-998727-0"
></A
><A
CLASS="indexterm"
NAME="ch12-idx-998727-1"
></A
><A
CLASS="indexterm"
NAME="ch12-idx-998727-2"
></A
>WHERE clause using the <KBD
CLASS="command"
>rem_srcwhere</KBD
> and <KBD
CLASS="command"
>rem_line_limit</KBD
> procedures. The <KBD
CLASS="command"
>rem_srcwhere</KBD
> program sets the <KBD
CLASS="command"
>srcrep.where_clause</KBD
> string to NULL, which means that the entire SELECT statement will be determined by the contents of the <KBD
CLASS="command"
>srcrep.select_sql</KBD
> field. The <KBD
CLASS="command"
>rem_srcwhere</KBD
> procedure takes no arguments so you would call it simply as follows:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>PLVio.rem_srcwhere;</PRE
></BLOCKQUOTE
><P
CLASS="para"
>It is important to remember that <KBD
CLASS="command"
>rem_srcwhere</KBD
> only NULLs out the <KBD
CLASS="command"
>srcrep.where_clause</KBD
>. If you have previously called <KBD
CLASS="command"
>set_srcwhere</KBD
> with a string that started with WHERE, then the text of the <KBD
CLASS="command"
>srcrep.select_sql</KBD
> field itself is modified. This change is not corrected in any way by a call to <KBD
CLASS="command"
>rem_srcwhere</KBD
>. Instead, in this situation you will have to re-execute <KBD
CLASS="command"
>setsrc</KBD
> (and consequently, <KBD
CLASS="command"
>initsrc</KBD
>) to get back to the default SELECT statement.</P
><P
CLASS="para"
>The <KBD
CLASS="command"
>rem_line_limit</KBD
> will remove an element from the WHERE clause that was added by a call to <KBD
CLASS="command"
>set_line_limit</KBD
>. The header of this procedure is:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>PROCEDURE rem_line_limit (line_in IN INTEGER);</PRE
></BLOCKQUOTE
><P
CLASS="para"
>You specify the same line number of the line limit passed to <KBD
CLASS="command"
>set_line_limit</KBD
>, and the appropriate chunk of text is extracted from the <KBD
CLASS="command"
>srcrep.where_clause</KBD
> string.</P
><P
CLASS="para"
>Suppose I called <KBD
CLASS="command"
>set_line_limit</KBD
> to ask that I only retrieve rows where the line number is greater than 10:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>PLVio.set_line_limit (10, PLVio.c_after);</PRE
></BLOCKQUOTE
><P
CLASS="para"
>Then the following call to <KBD
CLASS="command"
>rem_line_limit</KBD
> will take out this restricting factor:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>PLVio.rem_line_limit (10);<A
CLASS="indexterm"
NAME="ch12-idx-998728-0"
></A
><A
CLASS="indexterm"
NAME="ch12-idx-998728-1"
></A
><A
CLASS="indexterm"
NAME="ch12-idx-998728-2"
></A
><A
CLASS="indexterm"
NAME="ch12-idx-998728-3"
></A
></PRE
></BLOCKQUOTE
></DIV
></DIV
><DIV
CLASS="htmlnav"
><P
></P
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch12_03.htm#ch12-SECT-3.2"
TITLE="12.3 Managing the Source Repository"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 12.3 Managing the Source Repository"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="book"
HREF="index.htm"
TITLE="Advanced Oracle PL/SQL Programming with Packages"
><IMG
SRC="../gifs/txthome.gif"
ALT="Advanced Oracle PL/SQL Programming with Packages"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch12_05.htm"
TITLE="12.5 Managing the Target Repository"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 12.5 Managing the Target Repository"
BORDER="0"></A
></TD
></TR
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
>12.3 Managing the Source Repository</TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="index"
HREF="index/idx_0.htm"
TITLE="Book Index"
><IMG
SRC="../gifs/index.gif"
ALT="Book Index"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
>12.5 Managing the Target Repository</TD
></TR
></TABLE
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"></DIV
><IMG
SRC="../gifs/smnavbar.gif"
USEMAP="#map"
BORDER="0"
ALT="The Oracle Library Navigation">

<P><font size="-1">
<a href="../copyrght.htm#copy">Copyright (c) 2000</a> O'Reilly & Associates. All rights reserved.
</font></P>

<MAP NAME="map">

<AREA SHAPE="RECT"
COORDS="0,0,35,30"
HREF="../index.htm"
ALT="Library Home">

<AREA SHAPE="RECT"
COORDS="40,0,95,30"
HREF="../prog2/index.htm"
ALT="Oracle PL/SQL Programming, 2nd. Ed.">

<AREA SHAPE="RECT"
COORDS="100,0,200,30"
HREF="../guide8i/index.htm"
ALT="Guide to Oracle 8i Features">

<AREA SHAPE="RECT"
COORDS="205,0,245,30"
HREF="../bipack/index.htm"
ALT="Oracle Built-in Packages">

<AREA SHAPE="RECT"
COORDS="250,0,320,30"
HREF="index.htm"
ALT="Advanced PL/SQL Programming with Packages">

<AREA SHAPE="RECT"
COORDS="325,0,420,30"
HREF="../webapp/index.htm"
ALT="Oracle Web Applications">

<AREA SHAPE="RECT"
COORDS="425,0,490,30"
HREF="../langpkt/index.htm"
ALT="Oracle PL/SQL Language Pocket Reference">

<AREA SHAPE="RECT"
COORDS="495,0,570,30"
HREF="../bipkt/index.htm"
ALT="Oracle PL/SQL Built-ins Pocket Reference">
</MAP>
</BODY
>
<!-- Mirrored from liso.cs.pusan.ac.kr by HTTrack Website Copier/3.x [XR&CO'2001] -->
</HTML
>
