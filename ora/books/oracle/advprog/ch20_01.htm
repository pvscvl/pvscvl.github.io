<HTML
><HEAD
><TITLE
>[Chapter 20] PLVcmt and PLVrb: Commit and Rollback Processing </TITLE
><META
NAME="DC.Creator"
CONTENT="Steven Feuerstein"><META
NAME="DC.Date"
CONTENT="2000-04-29T18:31:13Z"><META
NAME="DC.Format"
CONTENT="text/html"
SCHEME="MIME"><META
NAME="DC.Identifier"
CONTENT="O'Reilly and Associates-1-56592-238-7E"><META
NAME="DC.Language"
CONTENT="en-US"><META
NAME="DC.Publisher"
CONTENT="O'Reilly &amp; Associates, Inc."><META
NAME="DC.Source"
CONTENT="1-56592-238-7E"
SCHEME="ISBN"><META
NAME="DC.Subject.Keyword"
CONTENT="PL/SQL SQL Oracle Packages"><META
NAME="DC.Title"
CONTENT="Advanced Oracle PL/SQL Programming with Packages"><META
NAME="DC.Type"
CONTENT="Text.Monograph"><META
NAME="generator"
CONTENT="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><LINK
REL="stylesheet"
TYPE="text/css"
HREF="../style/style1.css"><LINK
REV="made"
HREF="mailto:online-books@oreilly.com"
TITLE="Online Books Comments"><LINK
REL="up"
HREF="part05.htm"
TITLE="V. Plug-and-Play Packages"><LINK
REL="prev"
HREF="ch19_06.htm#ch19-SECT-6.4"
TITLE="19.6 PLVfk: Generic Foreign Key Lookups"><LINK
REL="next"
HREF="ch20_02.htm#ch20-SECT-2.1"
TITLE="20.2 PLVrb: Performing Rollbacks"></HEAD>
<BODY><DIV CLASS="htmlnav"
><H1
><IMG
SRC="gifs/smbanner.gif"
ALT="Advanced Oracle PL/SQL Programming with Packages"
USEMAP="#srchmap"
BORDER="0"></H1
><MAP
NAME="srchmap"
><AREA
SHAPE="RECT"
COORDS="0,0,466,65"
HREF="index.htm"
ALT="Advanced Oracle PL/SQL Programming with Packages"><AREA
SHAPE="RECT"
COORDS="467,0,514,18"
HREF="jobjects/fsearch.htm"
ALT="Search this book"></MAP
><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch19_06.htm#ch19-SECT-6.4"
TITLE="19.6 PLVfk: Generic Foreign Key Lookups"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 19.6 PLVfk: Generic Foreign Key Lookups"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><SPAN
CLASS="NAVTITLE"
>Chapter 20</SPAN
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch20_02.htm#ch20-SECT-2.1"
TITLE="20.2 PLVrb: Performing Rollbacks"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 20.2 PLVrb: Performing Rollbacks"
BORDER="0"></A
></TD
></TR
></TABLE
>&nbsp;<HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"></DIV
><DIV
CLASS="chapter"
><H1
CLASS="chapter"
><A
CLASS="title"
NAME="plsql-adv-ch-20"
>20. PLVcmt and PLVrb: Commit and Rollback Processing </A
></H1
><DIV
CLASS="htmltoc"
><P
><B
>Contents:</B
><BR><A
CLASS="sect1"
HREF="#ch20-18494"
TITLE="20.1 PLVcmt: Enhancing Commit Processing"
>PLVcmt: Enhancing Commit Processing</A
><BR><A
CLASS="sect1"
HREF="ch20_02.htm#ch20-SECT-2.1"
TITLE="20.2 PLVrb: Performing Rollbacks"
>PLVrb: Performing Rollbacks</A
></P
><P
></P
></DIV
><P
CLASS="para"
>PL/Vision provides two packages that help you manage <A
CLASS="indexterm"
NAME="ch20-idx-997748-0"
></A
><A
CLASS="indexterm"
NAME="ch20-idx-997748-1"
></A
>transaction processing in <SPAN
CLASS="acronym"
>PL/SQL</SPAN
> applications: PLVcmt and PLVrb. These packages provide a layer of code around the transaction-oriented builtins of the <SPAN
CLASS="acronym"
>PL/SQL</SPAN
> language. If you make full use of PLVcmt and PLVrb, you will no longer need to make direct calls to COMMIT and ROLLBACK. Instead, you will call the corresponding programs in these two packages; by doing so, you will greatly increase your flexibility, improve your ability to test your code, and reduce overall code volume.</P
><DIV
CLASS="sect1"
><H2
CLASS="sect1"
><A
CLASS="title"
NAME="ch20-18494"
>20.1 PLVcmt: Enhancing Commit Processing</A
></H2
><P
CLASS="para"
>The <A
CLASS="indexterm"
NAME="ch20-idx-997747-0"
></A
><A
CLASS="indexterm"
NAME="ch20-idx-997747-1"
></A
>PLVcmt (PL/Vision CoMmiT) package encapsulates logic and complexity for dealing with commit processing. For example, you can use PLVcmt to rapidly define scripts that execute commits every 1,000 transactions. You can replace any direct calls to COMMIT with a call to PLV<KBD
CLASS="command"
>cmt.perform_commit</KBD
> and thereby give yourself additional testing and debugging flexibility. By providing a programmatic interface to commit activity in <SPAN
CLASS="acronym"
>PL/SQL</SPAN
>, PL/Vision gives you the ability to change transaction-level behavior at runtime. You can also reduce the volume of code you write to perform commits in your applications. </P
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch20-SECT-1.1"
>20.1.1 Who Needs PLVcmt?</A
></H3
><P
CLASS="para"
>In my first book on <SPAN
CLASS="acronym"
>PL/SQL</SPAN
>, I used more that 900 pages to talk about almost every aspect of the <SPAN
CLASS="acronym"
>PL/SQL</SPAN
> language. But notice that word: almost. I did not, in fact, cover two very important commands in <SPAN
CLASS="acronym"
>PL/SQL</SPAN
>: COMMIT and ROLLBACK. Why didn't I discuss these commands? For two reasons: oversight and rationalization. The oversight was due to the fact that I had up to that time rarely performed commits in my <SPAN
CLASS="acronym"
>PL/SQL</SPAN
> programs (they were usually a part of Oracle Forms applications or were developer utilities). </P
><P
CLASS="para"
>When I did issue a commit, I didn't pay much attention. There just wasn't much to it. And that is where the rationalization part of the explanation comes in. Even when I did realize that COMMIT and ROLLBACK were missing from my book (fairly late in the game, but in time to include them), I said to myself: they are so simple and easy to use. I don't really need to write about that aspect of <SPAN
CLASS="acronym"
>PL/SQL</SPAN
>. Everybody knows about them from the <SPAN
CLASS="acronym"
>SQL</SPAN
> language anyway. </P
><P
CLASS="para"
>Since those days, I have had good reason to take a second, longer look at the (deceptively) simple COMMIT statement and its use in <SPAN
CLASS="acronym"
>PL/SQL</SPAN
> programs. I found from work at an account in early 1996 that there can be much more to committing than meets the eye. I found, in particular, that by managing your commit processing from within a package you can greatly improve your flexibility in testing. You will also gain an additional, welcome level of control in your batch processing applications. In fact, coming out of my experience I would make the following recommendation:</P
><BLOCKQUOTE
CLASS="note"
><P
CLASS="para"
><STRONG
>NOTE:</STRONG
> <A
CLASS="indexterm"
NAME="ch20-idx-997757-0"
></A
><A
CLASS="indexterm"
NAME="ch20-idx-997757-1"
></A
>You should never make a direct call to COMMIT, ROLLBACK, or SAVEPOINT in your code. By doing so, you hard-code irreversible operations into your <SPAN
CLASS="acronym"
>PL/SQL</SPAN
> programs and limit your flexibility. </P
></BLOCKQUOTE
><P
CLASS="para"
>At this point, you must surely consider me a package fanatic. What is the big deal about the COMMIT statement? Why would you possibly want to go to the trouble of building a package just to do a commit? Well, certainly on the logical level, a COMMIT is a very big deal. It completes a transaction by saving information to the database. When you are writing applications to manage data in your Oracle7 Server, the commit is a central and critical step. It certainly is easy enough to do a commit. You just type the following statement in your program:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>COMMIT;</PRE
></BLOCKQUOTE
><P
CLASS="para"
>No, executing a commit is easy. Determining when and how often to do the commit can be more challenging. Managing rollbacks is, furthermore, even more interesting. I found that a package gave me the flexibility I needed to meet their requirements. The PLVcmt package arose from this application's challenges.</P
><DIV
CLASS="sect3"
><H4
CLASS="sect3"
><A
CLASS="title"
NAME="ch20-SECT-1.1.1"
>20.1.1.1 Commit processing challenges</A
></H4
><P
CLASS="para"
>My customer, which I'll refer to as Bigdata Inc., needed to perform a complex data translation from one Oracle database instance to another. Approximately 20 million records in two tables were involved. It wasn't one of those all-or-nothing situations. If we could manage to get through a million records before some failure occurred, that was fine. All we had to do was come up with a mechanism for keeping track of which records had already been processed, so we didn't do them again. We used a "transfer indicator," which also led to a distributed transaction.</P
><P
CLASS="para"
>I've got to be honest with you: I have not spent many hours of my career (prior to Bigdata) working with this kind of volume of data. It sure puts a different spin on everything you do. When a simple SELECT could take hours to complete, you get very careful about the queries you execute. You no longer make casual statements (and take casual actions) like: "Let's just run this and see how it works. If it fails, we'll try it again." Three days later (or two weeks later), the job might crash from a "snapshot too old" error and you are back at square one&nbsp;-- if you didn't take precautions.</P
><P
CLASS="para"
>In fact, I quickly became intimate with a range of Oracle errors that earlier had been fairly academic to me: the -015NN series. Errors like:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>ORA-01555 <A
CLASS="indexterm"
NAME="ch20-idx-997758-0"
></A
>snapshot too old (rollback segment too small)
ORA-01562 failed to extend rollback segment</PRE
></BLOCKQUOTE
><P
CLASS="para"
>became a regular and unwelcome part of my life. Sure, we had big rollback segments, but one of our tables took up 2 gigabytes of storage in the database. We simply couldn't execute queries across the entire table at the same time that updates were taking place. I learned to "chunk down" by primary key ranges the rows I processed in each pass of my program. And I discovered the need to get flexible when it came to commits.</P
></DIV
><DIV
CLASS="sect3"
><H4
CLASS="sect3"
><A
CLASS="title"
NAME="ch20-SECT-1.1.2"
>20.1.1.2 Committing every ? records</A
></H4
><P
CLASS="para"
>When I first started with the account, we agreed that committing every 10,000 records would be great. This is the kind of code we wrote to handle the situation:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>commit_counter := 0
FOR original_rec IN original_cur
LOOP
   translate_data (original_rec);
   IF commit_counter &gt;= 10000
   THEN
      COMMIT;
      commit_counter := 0;
   ELSE
      commit_counter := commit_counter + 1;
   END IF;
END LOOP;
COMMIT;</PRE
></BLOCKQUOTE
><P
CLASS="para"
>Of course, there were a number of different programs and each had this logic, along with a declaration of <KBD
CLASS="command"
>commit_counter</KBD
>, in each program. We soon found, however, that 10,000 was simply too high a number. We blew out rollback segments on a maddeningly occasional, but unpredictable basis. So we decided to change the number to 1,000 and off I went to each of the different programs removing that troublesome zero. </P
><P
CLASS="para"
>I felt dumb doing this, but of course we faced looming deadlines and had no time to reflect. The next complication I ran into was the need to run my script in "test mode:" perform the data translation for one or several records and then examine the accuracy of the data. In this situation, I found that I would rather not commit at all. Just run the program, use queries to examine the changes, and then issue a ROLLBACK. To do this, I went back into my program and commented-out the entire IF statement having to do with commits and keeping counts.</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>commit_counter := 0
FOR original_rec IN original_cur
LOOP
   translate_data (original_rec);
   /*
   IF commit_counter &gt;= 1000
   THEN
      COMMIT;
      commit_counter := 0;
   ELSE
      commit_counter := commit_counter + 1;
   END IF;
   */
END LOOP;
COMMIT;</PRE
></BLOCKQUOTE
><P
CLASS="para"
>Once I got through several debug-test cycles, I reactivated my commit logic by removing the comment markers and recompiling. </P
></DIV
><DIV
CLASS="sect3"
><H4
CLASS="sect3"
><A
CLASS="title"
NAME="ch20-SECT-1.1.3"
>20.1.1.3 What committed when?</A
></H4
><P
CLASS="para"
>It was then time to run the process for the full sweep of the data (in its manageable chunks). So I started the program and went home for the weekend. Saturday and Sunday were very pleasant, but I came back in on Monday and found that the job has stopped on Sunday afternoon. I had a heck of a time figuring out why it had stopped and how far it had gotten. I realized that it would have been very useful to have a log of each commit performed by the program. So I changed my basic loop (shown previously) as follows:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>commit_counter := 0
FOR original_rec IN original_cur
LOOP
   translate_data (original_rec);
   IF commit_counter &gt;= 1000
   THEN
      COMMIT;
      DBMS_OUTPUT.PUT_LINE
        ('Commit at' ||
         original_rec.keyvalue);
      commit_counter := 0;
   ELSE
      commit_counter := 
          commit_counter + 1;
   END IF;
END LOOP;
COMMIT;</PRE
></BLOCKQUOTE
><P
CLASS="para"
>Now, every time a commit occurred, the primary key value would be displayed. I set up this job to run and after an hour or two it died&nbsp;-- this time because my program's output had exceeded the DBMS_OUTPUT default buffer of 2K! This was getting very frustrating. Maybe I should expand the size of the buffer. Maybe I should be writing the commit log out to a table. Or maybe it was just time for a break.</P
><P
CLASS="para"
>With a moment to reflect, I saw the insanity of my way. Here I was putting out little fires, patching up this hole, then that hole in my logic. In the process, the code I had written to perform commits was actually getting more complicated than the actual application logic&nbsp;-- and, again, it was repeated in several different programs.</P
></DIV
><DIV
CLASS="sect3"
><H4
CLASS="sect3"
><A
CLASS="title"
NAME="ch20-SECT-1.1.4"
>20.1.1.4 Getting back on track</A
></H4
><P
CLASS="para"
>Time out! I declared to myself and the rest of the technical team. I had committed several grievous errors, any one of which should have raised a red flag:</P
><OL
CLASS="orderedlist"
><LI
CLASS="listitem"
><P
CLASS="para"
>I repeated the same code in multiple programs (declaration of <KBD
CLASS="command"
>commit_counter</KBD
>, IF statement, etc.). This should always be avoided by consolidating repetitive code behind a procedural interface.</P
></LI
><LI
CLASS="listitem"
><P
CLASS="para"
>I edited my code in order to move from "test mode" to "production" status&nbsp;-- I inserted and then removed the comment markers. You want to avoid whenever possible these kinds of last-minute, "no problem" edits of code. Any time you change your code, you really should retest. Do you want to introduce another round of testing right after you thought you <EM
CLASS="emphasis"
>finished</EM
> all your testing?</P
></LI
></OL
><P
CLASS="para"
>No, it was time to go back to square one, do some top-down design, and do it right...the second time around. </P
><P
CLASS="para"
>The first thing that caught my eye is that I could simply be smarter about how to determine when to perform my commit. Rather than use an independent counter, I could take advantage of the <A
CLASS="indexterm"
NAME="ch20-idx-997759-0"
></A
>%ROWCOUNT cursor attribute to figure out how many rows I had fetched. Combined with use of the <A
CLASS="indexterm"
NAME="ch20-idx-997760-0"
></A
>MOD function, I could change my loop to the following, more concise implementation:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>FOR original_rec IN original_cur
LOOP
   translate_data (original_rec);
   IF MOD (original_cur%ROWCOUNT, 1000) = 0
   THEN
      COMMIT;
   END IF;
END LOOP;
COMMIT;</PRE
></BLOCKQUOTE
><P
CLASS="para"
>In this approach, whenever the number of rows fetched is a multiple of 1000, the MOD function returns 0 and <SPAN
CLASS="acronym"
>COMMIT</SPAN
> is executed. No local variable counter to declare and maintain&nbsp;-- when working within a cursor loop anyway. This was a satisfying discovery, but it didn't address some of my other concerns: turning off commits for test purposes, changing the number to use in the call to MOD, and so on. No, I decided to press on...and come up with a package-based solution, which turned into PLVcmt.</P
></DIV
><DIV
CLASS="sect3"
><H4
CLASS="sect3"
><A
CLASS="title"
NAME="ch20-SECT-1.1.5"
>20.1.1.5 The impact of PLVcmt</A
></H4
><P
CLASS="para"
>Here is what my data translation loop looks like when I use a package-based approach:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>PLVcmt.init_counter;
FOR original_rec IN original_cur
LOOP
   translate_data (original_rec);
   PLVcmt.increment_and_commit;
END LOOP;
PLVcmt.perform_commit;</PRE
></BLOCKQUOTE
><P
CLASS="para"
>In other words:</P
><OL
CLASS="orderedlist"
><LI
CLASS="listitem"
><P
CLASS="para"
>I initialize my commit package values.</P
></LI
><LI
CLASS="listitem"
><P
CLASS="para"
>I commit based on the counter inside the loop.</P
></LI
><LI
CLASS="listitem"
><P
CLASS="para"
>Then after the loop terminates, I perform a final commit. </P
></LI
></OL
><P
CLASS="para"
>Notice that the <KBD
CLASS="command"
>commit_counter</KBD
> variable has disappeared. I don't want to deal with that. Also gone is the code to display the commit action and the IF statement. Nor can you find a call to COMMIT. It's all tucked away somewhere else. Ah! A sigh of relief. And&nbsp;-- here is where it gets really dreamy&nbsp;-- if I want to run the program and <EM
CLASS="emphasis"
>not</EM
> perform any commits, I wish to be able to simply call another PLVcmt program to tell it not to commit, like this:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>execute PLVcmt.turn_off;</PRE
></BLOCKQUOTE
><P
CLASS="para"
>Without making any changes to <EM
CLASS="emphasis"
>my</EM
> program, the behavior of the PLVcmt package would change. Now that would be a wondrous thing, would it not? Let's see how we might go about building such a package, because at least in this case, my fantasies can be transformed fully into reality.</P
><P
CLASS="para"
>Now that you've seen the inspiration behind PLVcmt and how useful it can be, it's time for a formal introduction. These following sections explain these features of the PLVcmt package:</P
><UL
CLASS="itemizedlist"
><LI
CLASS="listitem"
><P
CLASS="para"
>Using a package-based substitute for COMMIT</P
></LI
><LI
CLASS="listitem"
><P
CLASS="para"
>Performing incremental commits</P
></LI
><LI
CLASS="listitem"
><P
CLASS="para"
>Controlling commit processing</P
></LI
><LI
CLASS="listitem"
><P
CLASS="para"
>Logging commit activity</P
></LI
></UL
></DIV
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch20-SECT-1.2"
>20.1.2 The COMMIT Substitute</A
></H3
><P
CLASS="para"
>PLVcmt offers two programs that can perform commits for you: <KBD
CLASS="command"
>perform_commit</KBD
><A
CLASS="indexterm"
NAME="ch20-idx-997761-0"
></A
> and <KBD
CLASS="command"
>increment_and_commit</KBD
>. The <KBD
CLASS="command"
>perform_commit</KBD
> program is a direct substitution for COMMIT. The <KBD
CLASS="command"
>increment_and_commit</KBD
> program is used in conjunction with loops in situations where you want to commit every <EM
CLASS="emphasis"
>n</EM
> transactions.</P
><P
CLASS="para"
>The header for <KBD
CLASS="command"
>perform_commit</KBD
> is:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>PROCEDURE perform_commit (context_in IN VARCHAR2 := NULL);</PRE
></BLOCKQUOTE
><P
CLASS="para"
>The single argument to <KBD
CLASS="command"
>perform_commit</KBD
>, <KBD
CLASS="command"
>context_in</KBD
>, is an optional string that you want to associate with this commit point. This string is then logged with the PLVlog package when a commit is performed through PLVcmt <EM
CLASS="emphasis"
>and</EM
> the user has requested that commits be shown. </P
><P
CLASS="para"
>A direct substitution for a call to COMMIT is this statement:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>PLVcmt.perform_commit;</PRE
></BLOCKQUOTE
><P
CLASS="para"
>The following call to this procedure associates the commit point with a calculation of net sales for the current year.</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>PLVcmt.perform_commit ('Net sales ' || TO_CHAR (v_curr_year));</PRE
></BLOCKQUOTE
><P
CLASS="para"
>This string is ignored unless you have executed the PLVcmt.log command to turn on logging of commits.</P
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch20-SECT-1.3"
>20.1.3 Performing Incremental Commits</A
></H3
><P
CLASS="para"
><KBD
CLASS="command"
></KBD
><A
CLASS="indexterm"
NAME="ch20-idx-997763-0"
></A
><A
CLASS="indexterm"
NAME="ch20-idx-997763-1"
></A
>When you use PLVcmt, it is very easy to write code that handles the following kind of requirement: "commit every 100 records." With PLVcmt, you don't have to declare a local counter, increment the counter, or call COMMIT. Instead, you simply make calls to the appropriate PLVcmt programs and concentrate on writing your transaction logic. </P
><P
CLASS="para"
>Three PLVcmt programs implement incremental commits: the <KBD
CLASS="command"
>init_counter</KBD
>, <KBD
CLASS="command"
>commit_after</KBD
>, and <KBD
CLASS="command"
>increment_and_commit</KBD
> procedures.</P
><DIV
CLASS="sect3"
><H4
CLASS="sect3"
><A
CLASS="title"
NAME="ch20-SECT-1.3.1"
>20.1.3.1 Setting the commit point</A
></H4
><P
CLASS="para"
>The first step in using PLVcmt to perform incremental commits is to tell the package how often you want a commit to occur. You do this with the <KBD
CLASS="command"
>commit_after</KBD
><A
CLASS="indexterm"
NAME="ch20-idx-997765-0"
></A
> procedure, whose header is shown below:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>PROCEDURE commit_after (count_in IN INTEGER);</PRE
></BLOCKQUOTE
><P
CLASS="para"
>where <KBD
CLASS="command"
>count_in</KBD
> is the number of transactions you want to occur before a commit takes place. The default, initial value of the count is 1, which means that every time you call <KBD
CLASS="command"
>PLVcmt.increment_and_commit</KBD
>, a COMMIT is executed (unless you have turned off commit processing, which is discussed in the next section).</P
><P
CLASS="para"
>In the following call to <KBD
CLASS="command"
>commit_after</KBD
>, I request that a commit occur every 100 transactions.</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>PLVcmt.commit_after (100);</PRE
></BLOCKQUOTE
><P
CLASS="para"
>In this next call to <KBD
CLASS="command"
>commit_after</KBD
>, I set the commit point to 0. </P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>PLVcmt.commit_after (0);</PRE
></BLOCKQUOTE
><P
CLASS="para"
>This effectively turns off the execution of a COMMIT from within the <KBD
CLASS="command"
>increment_and_commit</KBD
> program. With the "commit after" set to zero, a COMMIT occurs only when <KBD
CLASS="command"
>PLVcmt.perform_commit</KBD
> is called.</P
><BLOCKQUOTE
CLASS="note"
><P
CLASS="para"
><STRONG
>NOTE:</STRONG
>  The commit point established by the <KBD
CLASS="command"
>commit_after</KBD
> procedure does not in any way affect the behavior of the <KBD
CLASS="command"
>perform_commit</KBD
> procedure.</P
></BLOCKQUOTE
></DIV
><DIV
CLASS="sect3"
><H4
CLASS="sect3"
><A
CLASS="title"
NAME="ch20-SECT-1.3.2"
>20.1.3.2 Initializing the counter</A
></H4
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="ch20-idx-997766-0"
></A
><A
CLASS="indexterm"
NAME="ch20-idx-997766-1"
></A
><A
CLASS="indexterm"
NAME="ch20-idx-997766-2"
></A
>You have called <KBD
CLASS="command"
>PLVcmt.commit_after</KBD
> to tell PLVcmt that you want to commit every n records. Before you start running your code, you should initialize the PLVcmt counter to make sure that <EM
CLASS="emphasis"
>n</EM
> transactions occur before a commit.</P
><P
CLASS="para"
>The header for <KBD
CLASS="command"
>init_counter</KBD
> is:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>PROCEDURE init_counter;</PRE
></BLOCKQUOTE
><P
CLASS="para"
>When called, this program sets the internal PLVcmt counter to 0. The only way to modify this counter is with a call to <KBD
CLASS="command"
>init_counter</KBD
> or to <KBD
CLASS="command"
>increment_and_commit</KBD
>.</P
></DIV
><DIV
CLASS="sect3"
><H4
CLASS="sect3"
><A
CLASS="title"
NAME="ch20-SECT-1.3.3"
>20.1.3.3 Increment and commit</A
></H4
><P
CLASS="para"
>When you want to commit every <EM
CLASS="emphasis"
>n</EM
> records, you can simply insert a call to the <KBD
CLASS="command"
>increment_and_commit</KBD
> procedure in your code. The header is:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>PROCEDURE increment_and_commit (context_in IN VARCHAR2 := NULL);</PRE
></BLOCKQUOTE
><P
CLASS="para"
>This program always increments the PLVcmt counter. If the counter exceeds the commit-after value set with a call to <KBD
CLASS="command"
>PLVcmt.commit_after</KBD
>, then the <KBD
CLASS="command"
>perform_commit</KBD
> procedure is called. Immediately after that, PLVcmt calls its own <KBD
CLASS="command"
>init_counter</KBD
> to reset the counter to 0.<KBD
CLASS="command"
></KBD
><A
CLASS="indexterm"
NAME="ch20-idx-997768-0"
></A
><A
CLASS="indexterm"
NAME="ch20-idx-997768-1"
></A
></P
></DIV
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch20-SECT-1.4"
>20.1.4 Controlling Commit Processing</A
></H3
><P
CLASS="para"
>One of the big advantages to using PLVcmt instead of issuing direct calls to COMMIT is that you have placed a layer of code between your application and COMMIT. This layer gives you (through PL/Vision) the ability to modify commit processing behavior <EM
CLASS="emphasis"
>without changing your application code.</EM
> This is very important because it allows you to stabilize your code, but still change the way it works for purposes of testing and debugging. <A
CLASS="xref"
HREF="ch20_01.htm"
>Figure 20.1</A
> shows this layer of code.</P
><H4
CLASS="figure"
><A
CLASS="title"
NAME="ch20-12417"
>Figure 20.1: Code layer around COMMIT</A
></H4
><IMG
CLASS="graphic"
SRC="figs/pladv_2001.gif"
ALT="Figure 20.1"><P
CLASS="para"
>By using PLVcmt you can, in fact, actually disable COMMITs in your application. I have found this feature useful when I am working with test data. My code changes the data, but then I have to change it <EM
CLASS="emphasis"
>back</EM
> for the next test. If, however, I call PLVcmt commit programs instead of issuing direct calls to COMMIT, I can simply tell PLVcmt to not commit for the test run. I can then run my code, examine the results within my current session, and perform a rollback. No recovery scripts are necessary.</P
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="ch20-idx-997770-0"
></A
><A
CLASS="indexterm"
NAME="ch20-idx-997770-1"
></A
>PLVcmt offers a standard PL/Vision toggle to control commit processing. This triumvirate of programs is:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>PROCEDURE turn_on;
PROCEDURE turn_off;
FUNCTION committing RETURN BOOLEAN;</PRE
></BLOCKQUOTE
><P
CLASS="para"
>One procedure to turn on commit processing, another to turn it off, and a final function to indicate the current state of affairs (for completeness <EM
CLASS="emphasis"
>and</EM
> politeness). All the two procedures do is set the value of a private Boolean variable, but by correctly applying that Boolean inside an IF statement in PLVcmt, the package's user gets to fine-tune the package's behavior. </P
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch20-SECT-1.5"
>20.1.5 Logging Commits </A
></H3
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="ch20-idx-997771-0"
></A
>The commit action in an application is a critical step. It is, for one thing, irreversible. Once you commit, you cannot uncommit. It is often very useful to know when commits have taken place and the action that was taken around that commit point. I have found this to be most important when I am executing long-running processes with incremental commits. How far along am I in processing my ten million transactions? The PLVcmt logging facility gives you access to this information.</P
><P
CLASS="para"
>Whenever you call <KBD
CLASS="command"
>PLVcmt.perform_commit</KBD
> and <KBD
CLASS="command"
>PLVcmt.increment_and_commit</KBD
>, you can supply a string or context for that action. This string is ignored unless logging is turned on. If logging is enabled, PLVcmt calls the PLVlog facility to log your message. You can, within PLVlog, send this information to a database table, <SPAN
CLASS="acronym"
>PL/SQL</SPAN
> table, operating system file (with Release 2.3 of <SPAN
CLASS="acronym"
>PL/SQL</SPAN
>), or standard output (your screen).</P
><P
CLASS="para"
>PLVcmt offers a standard PL/Vision toggle to control commit processing. This triumvirate of programs is:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>PROCEDURE log;
PROCEDURE <A
CLASS="indexterm"
NAME="ch20-idx-997772-0"
></A
>nolog;
FUNCTION logging RETURN BOOLEAN;</PRE
></BLOCKQUOTE
><BLOCKQUOTE
CLASS="note"
><P
CLASS="para"
><STRONG
>NOTE:</STRONG
>  You do not have to turn on logging in PLVlog for the PLVcmt log to function properly. It will automatically turn on logging in PLVlog in order to write its commit-related information, and then reset the PLVlog status to its prior state.</P
></BLOCKQUOTE
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch20-SECT-1.6"
>20.1.6 Using PLVcmt</A
></H3
><P
CLASS="para"
>The following several examples show how to use these different elements of PLVcmt. First, we'll recast the previous anonymous block as a procedure so that it can be called from within a SQL*Plus session:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>PROCEDURE translate_all
IS
   CURSOR original_cur IS SELECT ...;
BEGIN
   PLVcmt.init_counter;
   FOR original_rec IN original_cur
   LOOP
      translate_data (original_rec);
      PLVcmt.increment_and_commit
         (original_rec.keyvalue);
   END LOOP;
   PLVcmt.perform_commit;
END translate_all;</PRE
></BLOCKQUOTE
><P
CLASS="para"
>Again, notice that by using PLVcmt I do not have to declare or manage a counter. By default, this program commits the data translation for each record fetched by the original data cursor and then commits on the way out. Whenever I increment inside the loop, I also pass the key value to PLVcmt for display&nbsp;-- when so specified. Now I can call this program in conjunction with other PLVcmt modules.</P
><P
CLASS="para"
>In the following SQL*Plus session, I specify that a commit should take place every 1,000 records:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>SQL&gt; exec PLVcmt.commit_after (1000)
SQL&gt; exec translate_all</PRE
></BLOCKQUOTE
><P
CLASS="para"
>In this next SQL*Plus session, I request a display of the commits as they occur and then sit back and watch the results:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>SQL&gt; exec PLVcmt.commit_after (1000)
SQL&gt; exec PLVcmt.log
SQL&gt; exec translate_all
commit ON IL123457
commit ON KY000566
commit ON NY121249</PRE
></BLOCKQUOTE
><P
CLASS="para"
>The reason PLVcmt indicates that commit is on is that I could run this same session, but avoid doing any commits. However, I might still want to see the output to verify correctness. Here we go:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>SQL&gt; exec PLVcmt.turn_off
SQL&gt; exec PLVcmt.log
SQL&gt; exec translate_all
commit OFF IL123457
commit OFF KY000566
commit OFF NY121249</PRE
></BLOCKQUOTE
><P
CLASS="para"
>Notice that I can achieve this change in behavior of my application without making any changes whatsoever to the application code itself. All the logic and complexity is hidden behind the interface of the package. </P
><P
CLASS="para"
>Since the writing of my first book, I have fallen in with love (sure, go ahead, laugh at me!) with these kinds of toggles and tightly controlled windows into packages. I can write my basic, useful package and then pack into it all kinds of flexibility, controlled by the user of the package. This flexibility makes my package more useful in a variety of circumstances. This improved usability increases the reusability of my own code and the code of others who have begun to use PL/Vision.</P
><DIV
CLASS="sidebar"
><H4
CLASS="sidebar"
><A
CLASS="title"
NAME="AUTOID-21020"
>Special Notes on PLVcmt</A
></H4
><P
CLASS="para"
>One idea for an enhancement: Allow the developer to specify a commit not simply when a counter is reached, but also when a Boolean expression evaluates to TRUE. For example, you might want to commit when the balance in an account exceeds $1000. To do this, you might consider overloading the <KBD
CLASS="command"
>increment_and_commit</KBD
> procedure to accept a Boolean parameter&nbsp;-- or create an additional program entirely.<A
CLASS="indexterm"
NAME="ch20-idx-997751-0"
></A
><A
CLASS="indexterm"
NAME="ch20-idx-997751-1"
></A
></P
></DIV
></DIV
></DIV
></DIV
><DIV
CLASS="htmlnav"
><P
></P
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch19_06.htm#ch19-SECT-6.4"
TITLE="19.6 PLVfk: Generic Foreign Key Lookups"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 19.6 PLVfk: Generic Foreign Key Lookups"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="book"
HREF="index.htm"
TITLE="Advanced Oracle PL/SQL Programming with Packages"
><IMG
SRC="../gifs/txthome.gif"
ALT="Advanced Oracle PL/SQL Programming with Packages"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch20_02.htm#ch20-SECT-2.1"
TITLE="20.2 PLVrb: Performing Rollbacks"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 20.2 PLVrb: Performing Rollbacks"
BORDER="0"></A
></TD
></TR
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
>19.6 PLVfk: Generic Foreign Key Lookups</TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="index"
HREF="index/idx_0.htm"
TITLE="Book Index"
><IMG
SRC="../gifs/index.gif"
ALT="Book Index"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
>20.2 PLVrb: Performing Rollbacks</TD
></TR
></TABLE
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"></DIV
><IMG
SRC="../gifs/smnavbar.gif"
USEMAP="#map"
BORDER="0"
ALT="The Oracle Library Navigation">

<P><font size="-1">
<a href="../copyrght.htm#copy">Copyright (c) 2000</a> O'Reilly & Associates. All rights reserved.
</font></P>

<MAP NAME="map">

<AREA SHAPE="RECT"
COORDS="0,0,35,30"
HREF="../index.htm"
ALT="Library Home">

<AREA SHAPE="RECT"
COORDS="40,0,95,30"
HREF="../prog2/index.htm"
ALT="Oracle PL/SQL Programming, 2nd. Ed.">

<AREA SHAPE="RECT"
COORDS="100,0,200,30"
HREF="../guide8i/index.htm"
ALT="Guide to Oracle 8i Features">

<AREA SHAPE="RECT"
COORDS="205,0,245,30"
HREF="../bipack/index.htm"
ALT="Oracle Built-in Packages">

<AREA SHAPE="RECT"
COORDS="250,0,320,30"
HREF="index.htm"
ALT="Advanced PL/SQL Programming with Packages">

<AREA SHAPE="RECT"
COORDS="325,0,420,30"
HREF="../webapp/index.htm"
ALT="Oracle Web Applications">

<AREA SHAPE="RECT"
COORDS="425,0,490,30"
HREF="../langpkt/index.htm"
ALT="Oracle PL/SQL Language Pocket Reference">

<AREA SHAPE="RECT"
COORDS="495,0,570,30"
HREF="../bipkt/index.htm"
ALT="Oracle PL/SQL Built-ins Pocket Reference">
</MAP>
</BODY
>
<!-- Mirrored from liso.cs.pusan.ac.kr by HTTrack Website Copier/3.x [XR&CO'2001] -->
</HTML
>
