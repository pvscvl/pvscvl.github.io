<HTML
><HEAD
><TITLE
>[Chapter 2] 2.8 Overloading for Smart Packages</TITLE
><META
NAME="DC.Creator"
CONTENT="Steven Feuerstein"><META
NAME="DC.Date"
CONTENT="2000-04-29T18:22:20Z"><META
NAME="DC.Format"
CONTENT="text/html"
SCHEME="MIME"><META
NAME="DC.Identifier"
CONTENT="O'Reilly and Associates-1-56592-238-7E"><META
NAME="DC.Language"
CONTENT="en-US"><META
NAME="DC.Publisher"
CONTENT="O'Reilly &amp; Associates, Inc."><META
NAME="DC.Source"
CONTENT="1-56592-238-7E"
SCHEME="ISBN"><META
NAME="DC.Subject.Keyword"
CONTENT="PL/SQL SQL Oracle Packages"><META
NAME="DC.Title"
CONTENT="Advanced Oracle PL/SQL Programming with Packages"><META
NAME="DC.Type"
CONTENT="Text.Monograph"><META
NAME="generator"
CONTENT="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><LINK
REL="stylesheet"
TYPE="text/css"
HREF="../style/style1.css"><LINK
REV="made"
HREF="mailto:online-books@oreilly.com"
TITLE="Online Books Comments"><LINK
REL="up"
HREF="ch02_01.htm"
TITLE="2. Best Practices for Packages"><LINK
REL="prev"
HREF="ch02_07.htm"
TITLE="2.7 Building Windows Into Your Packages"><LINK
REL="next"
HREF="ch02_09.htm#ch02-SECT-9.2"
TITLE="2.9 Modularizing for Maintainable Packages"></HEAD>
<BODY><DIV CLASS="htmlnav"
><H1
><IMG
SRC="gifs/smbanner.gif"
ALT="Advanced Oracle PL/SQL Programming with Packages"
USEMAP="#srchmap"
BORDER="0"></H1
><MAP
NAME="srchmap"
><AREA
SHAPE="RECT"
COORDS="0,0,466,65"
HREF="index.htm"
ALT="Advanced Oracle PL/SQL Programming with Packages"><AREA
SHAPE="RECT"
COORDS="467,0,514,18"
HREF="jobjects/fsearch.htm"
ALT="Search this book"></MAP
><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch02_07.htm"
TITLE="2.7 Building Windows Into Your Packages"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 2.7 Building Windows Into Your Packages"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><SPAN
CLASS="NAVTITLE"
><A
CLASS="chapter"
REL="up"
HREF="ch02_01.htm"
TITLE="2. Best Practices for Packages"
>Chapter 2<BR>Best Practices for Packages</A
></SPAN
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch02_09.htm#ch02-SECT-9.2"
TITLE="2.9 Modularizing for Maintainable Packages"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 2.9 Modularizing for Maintainable Packages"
BORDER="0"></A
></TD
></TR
></TABLE
>&nbsp;<HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"></DIV
><DIV
CLASS="sect1"
><H2
CLASS="sect1"
><A
CLASS="title"
NAME="ch02-27079"
>2.8 Overloading for Smart Packages</A
></H2
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="ch02-idx-1000041-0"
></A
><A
CLASS="indexterm"
NAME="ch02-idx-1000041-1"
></A
>One of the most powerful aspects of the package is the ability to overload program units. When you overload, you define more than one program with the same name. These programs will differ in other ways (usually the number and types of parameters) so that at runtime the <SPAN
CLASS="acronym"
>PL/SQL</SPAN
> engine can figure out which of the programs to execute. You can take advantage of the overloading feature of packages to make your package-based features as accessible as possible.</P
><P
CLASS="para"
>Does overloading sound unfamiliar or strange? Well, have you ever used the <A
CLASS="indexterm"
NAME="ch02-idx-1000045-0"
></A
>TO_CHAR function? If so, then you have already been enjoying the creature comforts of overloading. TO_CHAR converts both numbers and dates to strings. Have you ever wondered why you don't have to call functions with names like TO_CHAR_FROM_DATE or TO_CHAR_FROM_NUMBER? Probably not. You probably just took TO_CHAR for granted, and that is how it should be. </P
><P
CLASS="para"
>In reality, there are two different TO_CHAR functions (both defined in the STANDARD package): one to convert dates and another to convert numbers. The reason that you don't have to care about such details and can simply execute TO_CHAR is that the <SPAN
CLASS="acronym"
>PL/SQL</SPAN
> runtime engine examines the kind of data you pass to TO_CHAR and then automatically figures out which of the two functions (with the same name) to execute. It's like magic, only it's better than magic: it's intelligent software!</P
><P
CLASS="para"
>When you build overloaded modules, you spend more time in design and implementation than you might with separate, standalone modules. This additional up-front time will be repaid handsomely down the line in program productivity and ease of use.</P
><P
CLASS="para"
>You will not have to try to remember the different names of the modules and their specific arguments. Properly constructed, overloaded modules will have anticipated the different variations, hidden them behind a single name, and liberated your brain for other, more important matters. </P
><P
CLASS="para"
>See <CITE
CLASS="citetitle"
>Chapter 16</CITE
>, of <CITE
CLASS="citetitle"
>Oracle PL/SQL Programming</CITE
> for a more comprehensive coverage of overloading restrictions and examples.</P
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch02-SECT-8.1"
>2.8.1 When to Overload</A
></H3
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="ch02-idx-1000046-0"
></A
>When you overload, you take the first step towards providing a declarative interface to <SPAN
CLASS="acronym"
>PL/SQL</SPAN
>-based functionality. With a declarative approach, a developer does not write a program to obtain the necessary functionality. Instead, she describes what she wants and lets the underlying code handle the details (this follows the approach used by the <SPAN
CLASS="acronym"
>SQL</SPAN
> language). The process of overloading involves abstracting out from separate programs into a single action. </P
><P
CLASS="para"
>You want to display a date? You want to display a number? You want to display a string <EM
CLASS="emphasis"
>and</EM
> a number? Hold on a minute. The common element is that you want to display something&nbsp;-- lots of somethings, in fact. So don't create <KBD
CLASS="command"
>display_date</KBD
>, <KBD
CLASS="command"
>display_string</KBD
>, etc. procedures. Instead, offer a single <KBD
CLASS="command"
>display</KBD
> procedure, which is in fact many overloaded <KBD
CLASS="command"
>display</KBD
> procedures. </P
><P
CLASS="para"
>With the overloading in place, your user must only remember this: when I want to display something, I simply ask the <KBD
CLASS="command"
>display</KBD
> program to take care of it for me. What do I pass to it? Whatever I want it to display. I will not (and do not have to) worry about the <EM
CLASS="emphasis"
>how</EM
> of the display mechanism. Those details are hidden from me. </P
><P
CLASS="para"
>Here are some of the circumstances that cause the <SPAN
CLASS="acronym"
>PL/SQL</SPAN
> fairy to whisper in my ear "Overload, overload...":</P
><UL
CLASS="itemizedlist"
><LI
CLASS="listitem"
><P
CLASS="para"
>Apply the same action to different kinds or combinations of data. </P
></LI
><LI
CLASS="listitem"
><P
CLASS="para"
>Allow developers to use a program in the most natural and intuitive fashion; you use overloading to fit your program to the needs of the user.</P
></LI
><LI
CLASS="listitem"
><P
CLASS="para"
>Make it easy for developers to specify, unambiguously and simply, the kind of action desired. </P
></LI
></UL
><P
CLASS="para"
>I explore these circumstances in the following sections.</P
><DIV
CLASS="sect3"
><H4
CLASS="sect3"
><A
CLASS="title"
NAME="ch02-SECT-8.1.1"
>2.8.1.1 Supporting many data combinations</A
></H4
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="ch02-idx-1000052-0"
></A
>This is probably the most common reason to employ overloading. The <KBD
CLASS="command"
>p</KBD
><A
CLASS="indexterm"
NAME="ch02-idx-1000050-0"
></A
> package of PL/Vision (see the following sidebar) offers an excellent example of this kind of overloading opportunity. This package contains eight overloadings of the <KBD
CLASS="command"
>l</KBD
><A
CLASS="indexterm"
NAME="ch02-idx-1000051-0"
></A
> procedure so that you can pass many different combinations of data and have the package interpret and display the information properly. The following headers show, for example, a simplified portion of the specification for the <I
CLASS="function"
>p</I
> package, which illustrates the overloading:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>PROCEDURE l (date_in IN DATE, mask_in IN VARCHAR2 := PLV.datemask);   
PROCEDURE l (char_in IN VARCHAR2, number_in IN NUMBER);
PROCEDURE l (boolean_in IN BOOLEAN);</PRE
></BLOCKQUOTE
><P
CLASS="para"
>Because of my extensive overloading, I can pass a complex date expression (taking me back 18 years) and see the date and time in a readable format with a minimum of effort:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>SQL&gt; exec p.l(ADD_MONTHS(SYSDATE,-316));
February 18, 1970 17:50:12</PRE
></BLOCKQUOTE
><P
CLASS="para"
>I can combine strings and numbers together easily, as shown in this exception section:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>BEGIN
    p.l (1/0);
EXCEPTION
   WHEN ZERO_DIVIDE
   THEN
      p.l (SQLERRM, SQLCODE);
END;
/

SQL&gt; @above_script
ORA-01476: divisor is equal to zero: -1476</PRE
></BLOCKQUOTE
><P
CLASS="para"
>And, finally, I can pass a Boolean expression directly to the <I
CLASS="function"
>p.l</I
> procedure and have it display meaningful information:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>SQL&gt; exec p.l ('a' IN ('d', 'e', 'f'));
FALSE</PRE
></BLOCKQUOTE
><P
CLASS="para"
>Just to give you a sense of the benefit of overloading in this case, if I did not have access to the <I
CLASS="function"
>p</I
> package and instead relied on <A
CLASS="indexterm"
NAME="ch02-idx-1000055-0"
></A
>DBMS_OUTPUT.PUT_LINE to generate my output, I would have to write the following code to handle the last call to <I
CLASS="function"
>p.l</I
>:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>IF bool_value IN ('d', 'e', 'f')
THEN
   DBMS_OUTPUT.PUT_LINE ('TRUE');
ELSE
   DBMS_OUTPUT.PUT_LINE ('FALSE');
END IF;</PRE
></BLOCKQUOTE
><P
CLASS="para"
>Why do I need to do this? The DBMS_OUTPUT package <EM
CLASS="emphasis"
>does</EM
> overload its <A
CLASS="indexterm"
NAME="ch02-idx-1000054-0"
></A
>PUT_LINE procedure, but only for single string, date, and number values. It does not handle Booleans at all. It also does not allow me to pass combinations of data. And it does not show the time component of a date variable. What a hassle! For all these reasons, my extra layer of overloaded code in the <I
CLASS="function"
>p</I
> package liberates me from having to write extra code. I just tell <I
CLASS="function"
>p.l</I
> what I want to see and it figures out how to display that information.</P
><DIV
CLASS="sidebar"
><H4
CLASS="sidebar"
><A
CLASS="title"
NAME="ch02-TABLE-2"
>Why Name a Package "p"?</A
></H4
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="ch02-idx-1000056-0"
></A
><A
CLASS="indexterm"
NAME="ch02-idx-1000056-1"
></A
>I talk about coming up with names for your package that are clear, accurate, and easy to remember. Then I showcase the <I
CLASS="function"
>p.l</I
> procedure in my best practice on overloading. Surely I am not going to argue that <I
CLASS="function"
>p</I
> is a good name for a package&nbsp;-- and what about <I
CLASS="function"
>l</I
> as the name of a procedure? What justification could I possibly have for the names I chose for these elements?</P
><P
CLASS="para"
>My <I
CLASS="function"
>p.l</I
> procedure is a substitute for and <EM
CLASS="emphasis"
>rebellion against</EM
> the DBMS_OUTPUT.PUT_LINE procedure. I hated the 20 characters I had to type to generate output from my <SPAN
CLASS="acronym"
>PL/SQL</SPAN
> programs (in uppercase no less, since that is my convention). I was frustrated by the limited overloading of the package itself. So when I set out to build my own layer of code around DBMS_OUTPUT, I was determined to use the fewest characters possible. The result is <I
CLASS="function"
>p.l</I
>. </P
><P
CLASS="para"
>I found it difficult to justify this obscure name, but John Beresniewicz, my able and deep-thinking reviewer, contributed this observation: "It's possible that the need for clearly descriptive (i.e., lengthy) names is directly proportional to the amount of work performed by the procedure and inversely proportional to the frequency of use. That is, procedures that implement a high level of functionality need clearly descriptive names and they will presumably be called less frequently (and these long names won't clog up the source code). Conversely, low-level routines called frequently need shorter names (to avoid clog) but nobody forgets their names (even if cryptic) since they are used all the time." I couldn't have stated it better myself!</P
></DIV
><P
CLASS="para"
>The same technique is also readily visible in the <A
CLASS="indexterm"
NAME="ch02-idx-1000053-0"
></A
>PLVtab package. This <SPAN
CLASS="acronym"
>PL/SQL</SPAN
> table-oriented package offers nine overloadings of the <KBD
CLASS="command"
>display</KBD
> procedure, one for each kind of <SPAN
CLASS="acronym"
>PL/SQL</SPAN
> table predefined in the package. As far as a user of <I
CLASS="function"
>PLVtab.display</I
> is concerned, there is just one program to display a <SPAN
CLASS="acronym"
>PL/SQL</SPAN
> table. The only difference between each of the versions of <I
CLASS="function"
>PLVtab.display</I
> is the first argument, the table type, as shown in the following header for the <KBD
CLASS="command"
>display</KBD
> procedure:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>PROCEDURE display 
 (table_in IN number_table|boolean_table|date_table, 
  end_row_in IN INTEGER,
  header_in IN VARCHAR2 := NULL,
  start_row_in IN INTEGER := 1,
  failure_threshold_in IN INTEGER := 0,
  increment_in IN INTEGER := +1);</PRE
></BLOCKQUOTE
><P
CLASS="para"
>When you see that vertical bar in documentation for program headers, by the way, that means you are dealing with an overloaded program. The more variations of data you provide in your overloadings, the more useful you make your package. There is, of course, a price to pay for your overloadings. While the user thinks there is just one program to call, you know that in reality there is a <EM
CLASS="emphasis"
>different</EM
> program for each overloading.</P
><P
CLASS="para"
>A key challenge, therefore, that comes with successful overloading is to figure out how to implement all those programs without creating a total mess in your package body. This challenge is addressed in the section called "Modularizing for Maintainable Packages" later in this chapter.</P
></DIV
><DIV
CLASS="sect3"
><H4
CLASS="sect3"
><A
CLASS="title"
NAME="ch02-SECT-8.1.2"
>2.8.1.2 Fitting the program to the user </A
></H4
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="ch02-idx-1000057-0"
></A
><A
CLASS="indexterm"
NAME="ch02-idx-1000057-1"
></A
><A
CLASS="indexterm"
NAME="ch02-idx-1000057-2"
></A
>Does the idea of fitting a program to your user sound odd or unnecessary? If so, change your attitude. We write our software to be used, to help others get their jobs done more easily or more efficiently. You should always be on the lookout for ways to improve your code so that it responds as closely as possible to the needs of your users. Overloading offers one way to achieve a very close fit.</P
><P
CLASS="para"
>You may sometimes end up with several overloadings of the same program because developers will be using the program in different ways. In this case, the overloading does not provide a single name for different activities, so much as providing different ways of requesting the same activity. Consider the overloading for the <I
CLASS="function"
>PLVlog.p</I
><KBD
CLASS="command"
>ut_line</KBD
> (shown in simplified form below):</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>PROCEDURE put_line
   (context_in IN VARCHAR2,
    code_in IN INTEGER,
    string_in IN VARCHAR2 := NULL,
    create_by_in IN VARCHAR2 := USER);

PROCEDURE put_line (string_in IN VARCHAR2);</PRE
></BLOCKQUOTE
><P
CLASS="para"
>The first header is the low-level version of <KBD
CLASS="command"
>put_line</KBD
>. It allows you to specify a full set of arguments to the program, including the context, the code, a string and the Oracle account providing the information. The second header asks only for the string, the text to be logged. What happened to all the other arguments? I suppressed them, because I found that in many situations a user of PLVlog simply doesn't care about all of those arguments. He simply wants to pass it a string to be saved. So rather than make him enter dummy values for all the unnecessary data, I provide a simpler interface, which in turn calls the low-level <KBD
CLASS="command"
>put_line</KBD
> with its own dummy values:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>PROCEDURE put_line (string_in IN VARCHAR2) IS
BEGIN
   put_line (NULL, 0, string_in, USER);
END;</PRE
></BLOCKQUOTE
><P
CLASS="para"
>It wasn't necessary for me to take this step and provide this overloading. I could simply require that anyone who uses <KBD
CLASS="command"
>PLVlog.put_line</KBD
> provide values for all those non-defaulted parameters. If developers really had to use PLVlog, they would follow my bidding. And if I were on some kind of power trip, I would feel properly stroked. But if a developer could choose between PLVlog and another package or utility that didn't make him feel dumb, PLVlog would simply not be used. We almost always have choices. I would rather that my software be used because it was too useful and easy to use to reject.</P
></DIV
><DIV
CLASS="sect3"
><H4
CLASS="sect3"
><A
CLASS="title"
NAME="ch02-SECT-8.1.3"
>2.8.1.3 Unambiguous, simple arguments</A
></H4
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="ch02-idx-1000058-0"
></A
><A
CLASS="indexterm"
NAME="ch02-idx-1000058-1"
></A
><A
CLASS="indexterm"
NAME="ch02-idx-1000058-2"
></A
>A less common application of overloading offers a way for developers to specify very easily which of the overloaded programs should be executed. The best way to explain this technique is with an example. The PLVgen package allows you to generate <SPAN
CLASS="acronym"
>PL/SQL</SPAN
> source code, including procedures, functions, and packages. Let's consider how to request the generation of a function.</P
><P
CLASS="para"
>A function has a datatype: the type of data returned by the function. So when you generate a function, you want to be able to specify whether it is a number function, string function, date function, etc. If I ignored overloading, I might offer a package specification like this:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>PACKAGE PLVgen
IS
    PROCEDURE stg_func (name_in IN VARCHAR2);
    PROCEDURE num_func (name_in IN VARCHAR2);
    PROCEDURE date_func (name_in IN VARCHAR2);
END;</PRE
></BLOCKQUOTE
><P
CLASS="para"
>to name just a few. Of course, this means that a user of PLVgen must remember all of these different program names. Is it <I
CLASS="function"
>num</I
> or <I
CLASS="function"
>nbr</I
>? <I
CLASS="function"
>Stg</I
> or <I
CLASS="function"
>strg</I
> or <I
CLASS="function"
>string</I
>? Why use the four-letter <I
CLASS="function"
>date</I
> when the others are just three letters? Wow! That is very confusing. Let's try overloading of the kind previously encountered in this chapter. I will declare a named constant for each kind of data and then, well, it would seem that I really only need one version of the <I
CLASS="function"
>func</I
> procedure:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>PACKAGE PLVgen
IS
    stg CONSTANT VARCHAR2(1) := 'S';
    num CONSTANT VARCHAR2(1) := 'N';
    dat CONSTANT VARCHAR2(1) := 'D';
    PROCEDURE func (name_in IN VARCHAR2, type_in IN VARCHAR2);
END;</PRE
></BLOCKQUOTE
><P
CLASS="para"
>I could then generate a numeric function as follows:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>SQL&gt; exec PLVgen.func ('booksales', PLVgen.num);</PRE
></BLOCKQUOTE
><P
CLASS="para"
>Now, I still need to know the names of the constants, so it is pretty much the same situation as we encountered in my first <I
CLASS="function"
>func</I
> attempt. Furthermore, I would like to be able to pass a default value to be returned by the generated function, so I really would need to overload as shown in the next iteration:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>PACKAGE PLVgen
IS
    stg CONSTANT VARCHAR2(1) := 'S';
    num CONSTANT VARCHAR2(1) := 'N';
    dat CONSTANT VARCHAR2(1) := 'D';
    PROCEDURE func 
      (name_in IN VARCHAR2, type_in IN VARCHAR2, defval_in IN VARCHAR2);
    PROCEDURE func 
      (name_in IN VARCHAR2, type_in IN VARCHAR2, defval_in IN NUMBER);
    PROCEDURE func 
      (name_in IN VARCHAR2, type_in IN VARCHAR2, defval_in IN DATE);
END;</PRE
></BLOCKQUOTE
><P
CLASS="para"
>Might there not be a simpler way to handle this? Notice that the second parameter is a way for the user to specify the datatype of the function. You pass in a string constant, and PLVgen uses an IF statement to determine which constant you have provided. Why not skip the constant and simply pass in <EM
CLASS="emphasis"
>data</EM
> itself of the right type? Then the <SPAN
CLASS="acronym"
>PL/SQL</SPAN
> runtime engine itself would automatically perform the conditional logic to determine which program to run, which code to execute. Consider this next version of the PLVgen package specification:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>PACKAGE PLVgen
IS
    PROCEDURE func 
      (name_in IN VARCHAR2, type_in IN VARCHAR2, defval_in IN VARCHAR2);
    PROCEDURE func 
      (name_in IN VARCHAR2, type_in IN NUMBER, defval_in IN NUMBER);
    PROCEDURE func 
      (name_in IN VARCHAR2, type_in IN DATE, defval_in IN DATE);
END;</PRE
></BLOCKQUOTE
><P
CLASS="para"
>The named constants are gone, no longer needed. I can now generate a numeric function with a default value of 15,000 as follows:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>SQL&gt; exec PLVgen.func ('booksales', 1, 15000);</PRE
></BLOCKQUOTE
><P
CLASS="para"
>It doesn't really matter what value I pass as the second argument; it doesn't matter if the argument is a literal or a variable or an expression. It just has to evaluate to a number, so that the <SPAN
CLASS="acronym"
>PL/SQL</SPAN
> runtime engine will know to execute the code associated with the second header in the specification. What could be simpler? You want a numeric function? Pass a number&nbsp;-- any number&nbsp;-- as the type argument. You want a date function? Pass a date&nbsp;-- be it SYSDATE or some locally declared variable. </P
><P
CLASS="para"
>I am sure that many readers are looking at that last specification and wondering why I just didn't use the <KBD
CLASS="command"
>defval_in</KBD
> argument to determine the datatype of the function and skip the <KBD
CLASS="command"
>type_in</KBD
> argument entirely. Take a look at the final PLVgen package specification. I provide a default value of NULL for all the <KBD
CLASS="command"
>defval_in</KBD
> arguments. I reasoned that you shouldn't have to provide a default value for the function. So I do need that separate, second argument (always required since it has no default value) to guarantee that you will unambiguously specify one of the function generators.</P
><P
CLASS="para"
>PLVgen uses this technique both for the <I
CLASS="function"
>func</I
> procedures and the <I
CLASS="function"
>gas</I
> (get-and-set) procedures. Oracle Corporation also uses this overloading approach in the DBMS_SQL built-in package (check out the DEFINE_COLUMN procedure). In fact, it was the DEFINE_COLUMN overloading that gave me the idea for the overloading you find in the PLVgen package. It took me a while to think through what <SPAN
CLASS="acronym"
>PL/SQL</SPAN
> was doing with DEFINE_COLUMN; I found the simplicity simultaneously clever, devilishly simple, and extremely elegant. It is a technique we should all put into use whenever<A
CLASS="indexterm"
NAME="ch02-idx-1000062-0"
></A
><A
CLASS="indexterm"
NAME="ch02-idx-1000062-1"
></A
><A
CLASS="indexterm"
NAME="ch02-idx-1000062-2"
></A
> appropriate.<A
CLASS="indexterm"
NAME="ch02-idx-1000048-0"
></A
></P
></DIV
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch02-SECT-8.2"
>2.8.2 Developing an Appreciation of Overloading</A
></H3
><P
CLASS="para"
>You should now have a solid feeling for the technique of overloading. To build excellent packages, however, you will need to move beyond simply overloading occasionally to overloading at every possible opportunity and in every possible way. You need to develop a sensitivity to when you should overload and how you can overload most effectively. </P
><P
CLASS="para"
>The benefits and the beauty of overloading can be appreciated fully only by using overloaded programs&nbsp;-- and then in most cases, you won't even notice, because overloading hides the underlying complexity so you can concentrate on more important issues. You will, I hope, get a sense of the value of overloading from using&nbsp;-- and perhaps even extending&nbsp;-- PL/Vision. Do take some time to pursue the various <I
CLASS="function"
>spb</I
> files (the package bodies) and examine the many different examples of overloading you will find there. </P
><P
CLASS="para"
>When I've successfully overloaded an interesting set of programs and succeeded in hiding much of the underlying complexity of my package, I get an all-the-pieces-falling-into-place feeling and a this-is-as-it-should-be feeling and a sense of how-elegant! If you think I sound a bit strange, please withhold judgment until you do some really fancy and extensive overloading and then tell me how you feel.</P
><P
CLASS="para"
>The more you overload your packaged procedures and functions, the more functionality you offer to your users. Where overloading is appropriate, it is also impossible to overdo your overloading. If you see another interesting and useful combination, if you see a way to simplify the way a user passes information to your package, then overload for it! It will always be the right thing to do; your biggest challenge will be in figuring out how to implement all these overloadings in a modular and maintainable fashion. This issue is addressed in the next section.<A
CLASS="indexterm"
NAME="ch02-idx-1000043-0"
></A
><A
CLASS="indexterm"
NAME="ch02-idx-1000043-1"
></A
></P
></DIV
></DIV
><DIV
CLASS="htmlnav"
><P
></P
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch02_07.htm"
TITLE="2.7 Building Windows Into Your Packages"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 2.7 Building Windows Into Your Packages"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="book"
HREF="index.htm"
TITLE="Advanced Oracle PL/SQL Programming with Packages"
><IMG
SRC="../gifs/txthome.gif"
ALT="Advanced Oracle PL/SQL Programming with Packages"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch02_09.htm#ch02-SECT-9.2"
TITLE="2.9 Modularizing for Maintainable Packages"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 2.9 Modularizing for Maintainable Packages"
BORDER="0"></A
></TD
></TR
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
>2.7 Building Windows Into Your Packages</TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="index"
HREF="index/idx_0.htm"
TITLE="Book Index"
><IMG
SRC="../gifs/index.gif"
ALT="Book Index"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
>2.9 Modularizing for Maintainable Packages</TD
></TR
></TABLE
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"></DIV
><IMG
SRC="../gifs/smnavbar.gif"
USEMAP="#map"
BORDER="0"
ALT="The Oracle Library Navigation">

<P><font size="-1">
<a href="../copyrght.htm#copy">Copyright (c) 2000</a> O'Reilly & Associates. All rights reserved.
</font></P>

<MAP NAME="map">

<AREA SHAPE="RECT"
COORDS="0,0,35,30"
HREF="../index.htm"
ALT="Library Home">

<AREA SHAPE="RECT"
COORDS="40,0,95,30"
HREF="../prog2/index.htm"
ALT="Oracle PL/SQL Programming, 2nd. Ed.">

<AREA SHAPE="RECT"
COORDS="100,0,200,30"
HREF="../guide8i/index.htm"
ALT="Guide to Oracle 8i Features">

<AREA SHAPE="RECT"
COORDS="205,0,245,30"
HREF="../bipack/index.htm"
ALT="Oracle Built-in Packages">

<AREA SHAPE="RECT"
COORDS="250,0,320,30"
HREF="index.htm"
ALT="Advanced PL/SQL Programming with Packages">

<AREA SHAPE="RECT"
COORDS="325,0,420,30"
HREF="../webapp/index.htm"
ALT="Oracle Web Applications">

<AREA SHAPE="RECT"
COORDS="425,0,490,30"
HREF="../langpkt/index.htm"
ALT="Oracle PL/SQL Language Pocket Reference">

<AREA SHAPE="RECT"
COORDS="495,0,570,30"
HREF="../bipkt/index.htm"
ALT="Oracle PL/SQL Built-ins Pocket Reference">
</MAP>
</BODY
>
<!-- Mirrored from liso.cs.pusan.ac.kr by HTTrack Website Copier/3.x [XR&CO'2001] -->
</HTML
>
