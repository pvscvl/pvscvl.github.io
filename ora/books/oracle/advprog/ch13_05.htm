<HTML
><HEAD
><TITLE
>[Chapter 13] 13.5 Reading From a File</TITLE
><META
NAME="DC.Creator"
CONTENT="Steven Feuerstein"><META
NAME="DC.Date"
CONTENT="2000-04-29T18:28:12Z"><META
NAME="DC.Format"
CONTENT="text/html"
SCHEME="MIME"><META
NAME="DC.Identifier"
CONTENT="O'Reilly and Associates-1-56592-238-7E"><META
NAME="DC.Language"
CONTENT="en-US"><META
NAME="DC.Publisher"
CONTENT="O'Reilly &amp; Associates, Inc."><META
NAME="DC.Source"
CONTENT="1-56592-238-7E"
SCHEME="ISBN"><META
NAME="DC.Subject.Keyword"
CONTENT="PL/SQL SQL Oracle Packages"><META
NAME="DC.Title"
CONTENT="Advanced Oracle PL/SQL Programming with Packages"><META
NAME="DC.Type"
CONTENT="Text.Monograph"><META
NAME="generator"
CONTENT="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><LINK
REL="stylesheet"
TYPE="text/css"
HREF="../style/style1.css"><LINK
REV="made"
HREF="mailto:online-books@oreilly.com"
TITLE="Online Books Comments"><LINK
REL="up"
HREF="ch13_01.htm"
TITLE="13. PLVfile: Reading and Writing Operating System Files"><LINK
REL="prev"
HREF="ch13_04.htm"
TITLE="13.4 Opening and Closing Files"><LINK
REL="next"
HREF="ch13_06.htm#ch13-SECT-6.1"
TITLE="13.6 Writing to a File"></HEAD>
<BODY><DIV CLASS="htmlnav"
><H1
><IMG
SRC="gifs/smbanner.gif"
ALT="Advanced Oracle PL/SQL Programming with Packages"
USEMAP="#srchmap"
BORDER="0"></H1
><MAP
NAME="srchmap"
><AREA
SHAPE="RECT"
COORDS="0,0,466,65"
HREF="index.htm"
ALT="Advanced Oracle PL/SQL Programming with Packages"><AREA
SHAPE="RECT"
COORDS="467,0,514,18"
HREF="jobjects/fsearch.htm"
ALT="Search this book"></MAP
><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch13_04.htm"
TITLE="13.4 Opening and Closing Files"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 13.4 Opening and Closing Files"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><SPAN
CLASS="NAVTITLE"
><A
CLASS="chapter"
REL="up"
HREF="ch13_01.htm"
TITLE="13. PLVfile: Reading and Writing Operating System Files"
>Chapter 13<BR>PLVfile: Reading and Writing Operating System Files</A
></SPAN
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch13_06.htm#ch13-SECT-6.1"
TITLE="13.6 Writing to a File"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 13.6 Writing to a File"
BORDER="0"></A
></TD
></TR
></TABLE
>&nbsp;<HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"></DIV
><DIV
CLASS="sect1"
><H2
CLASS="sect1"
><A
CLASS="title"
NAME="ch13-33673"
>13.5 Reading From a File</A
></H2
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="ch13-idx-998494-0"
></A
><A
CLASS="indexterm"
NAME="ch13-idx-998494-1"
></A
>PLVfile offers several different ways to read information from an operating system file. The <KBD
CLASS="command"
>get_line</KBD
> procedure gets the next line from the file. The <KBD
CLASS="command"
>line</KBD
> function returns the <EM
CLASS="emphasis"
>n</EM
>th line from a file. The overloaded <KBD
CLASS="command"
>infile</KBD
> functions returns the line in which a string is found. These programs are explored below.</P
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch13-SECT-5.1"
>13.5.1 Reading the Next Line</A
></H3
><P
CLASS="para"
>Use the <KBD
CLASS="command"
>get_line</KBD
><A
CLASS="indexterm"
NAME="ch13-idx-998498-0"
></A
> procedure to read the next line from a file. The header for <KBD
CLASS="command"
>get_line</KBD
> is:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>PROCEDURE get_line 
   (file_in IN UTL_FILE.FILE_TYPE, line_out OUT VARCHAR2,
    eof_out OUT BOOLEAN);</PRE
></BLOCKQUOTE
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="ch13-idx-998499-0"
></A
>You must provide a file handle (<KBD
CLASS="command"
>file_in</KBD
>); you cannot get the next line from a file by name. This means that you must already have opened the file using one of the <KBD
CLASS="command"
>fopen</KBD
> functions. The second argument of <KBD
CLASS="command"
>get_line</KBD
> (<KBD
CLASS="command"
>line_out</KBD
>) receives the string which is found on the next line. The <KBD
CLASS="command"
>eof_out</KBD
> argument is a flag which is set to TRUE if you have read past the end of the file.</P
><P
CLASS="para"
>When <KBD
CLASS="command"
>eof_out</KBD
> returns TRUE, <KBD
CLASS="command"
>line_out</KBD
> is set to NULL. You should not, however, test the value of <KBD
CLASS="command"
>line_out</KBD
> to determine if you are at the end of the file. The <KBD
CLASS="command"
>line_out</KBD
> argument could be set to NULL if the next line in a file is blank.</P
><P
CLASS="para"
>The following script (stored in the file <KBD
CLASS="command"
>dispfile.sql</KBD
>) uses <KBD
CLASS="command"
>get_line</KBD
> to read all the lines from a file and then display those lines.</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>DECLARE
   fileid UTL_FILE.FILETYPE;
   line PLVfile.max_line%TYPE;
   eof BOOLEAN;
BEGIN
   fileid := PLVfile.fopen ('&amp;1');
   LOOP
      PLVfile.get_line (fileid, line, eof);
      EXIT WHEN eof;
      p.l (line);
   END LOOP;
   PLVfile.fclose (fileid);
END;
/</PRE
></BLOCKQUOTE
><P
CLASS="para"
>I use the <KBD
CLASS="command"
>max_line</KBD
> variable of PLVfile to declare the line datatype. This gives me a way to avoid having to hard-code the length of a line. Then I open the file (provided through a SQL*Plus substitution parameter) in the simplest possible way: location and name combined, assuming read-only access. My simple loop reads the next line and exits when the end-of-file condition is reached. If I did retrieve a line, I display it. When done, I close the file.</P
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch13-SECT-5.2"
>13.5.2 Reading the nth Line</A
></H3
><P
CLASS="para"
>Use the <KBD
CLASS="command"
>line</KBD
><A
CLASS="indexterm"
NAME="ch13-idx-998500-0"
></A
> function to retrieve the specified line from a file. The header for <KBD
CLASS="command"
>line</KBD
> is:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>FUNCTION line (file_in IN VARCHAR2, line_num_in IN INTEGER)
RETURN VARCHAR2;</PRE
></BLOCKQUOTE
><P
CLASS="para"
>Notice that in this function you supply a file name and not a file handle (in fact, you don't even have the option of providing the location and name separately). The second argument is the line number you want retrieved.</P
><P
CLASS="para"
>The <KBD
CLASS="command"
>line</KBD
> function opens (in read-only mode), scans, and closes your file. You do not have to&nbsp;-- and should not&nbsp;-- perform any of these steps. If the line number specified is 0 or is greater than the number of lines in the file, the function will return a NULL value. </P
><P
CLASS="para"
>This function is handy when the lines in your file have a predefined or predictable structure. For example, you might have an <I
CLASS="filename"
>.ini</I
> or initialization file for a program in which the first line is the name of the program, the second line the date and time of last use, and the third line the user who last accessed account information. You could then use <KBD
CLASS="command"
>PLVfile.line</KBD
> to retrieve precisely the information you needed. The following call to the <KBD
CLASS="command"
>line</KBD
> function extracts just the date and time of last use. It assumes that you have also made use of the standard PL/Vision date mask when writing this information to the file.</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
><A
CLASS="indexterm"
NAME="ch13-idx-998501-0"
></A
>v_lastuse := TO_DATE (PLVfile.line ('oe.ini', 2), PLV.datemask);</PRE
></BLOCKQUOTE
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch13-SECT-5.3"
>13.5.3 The INSTR of PLVFile</A
></H3
><P
CLASS="para"
>PLVfile provides a function which operates within a file in much the same way that the builtin <A
CLASS="indexterm"
NAME="ch13-idx-998502-0"
></A
>INSTR function operates on a string. INSTR returns the position in which the <EM
CLASS="emphasis"
>n</EM
> th occurrence of a substring is found. <KBD
CLASS="command"
>PLVfile.infile</KBD
> returns the line number in which the <EM
CLASS="emphasis"
>n</EM
>th occurrence of a string occurs. The header of the <KBD
CLASS="command"
>infile</KBD
> function, again overloaded to allow specification of the file in two different ways, is shown below:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>FUNCTION <A
CLASS="indexterm"
NAME="ch13-idx-998503-0"
></A
>infile 
   (loc_in IN VARCHAR2,
    file_in IN VARCHAR2, 
    text_in IN VARCHAR2, 
    nth_in IN INTEGER := 1,
    start_line_in IN INTEGER := 1,
    end_line_in IN INTEGER := NULL,
    ignore_case_in IN BOOLEAN := TRUE)
RETURN INTEGER;

FUNCTION infile 
   (file_in IN VARCHAR2, 
    text_in IN VARCHAR2, 
    nth_in IN INTEGER := 1,
    start_line_in IN INTEGER := 1,
    end_line_in IN INTEGER := NULL,
    ignore_case_in IN BOOLEAN := TRUE)
RETURN INTEGER;</PRE
></BLOCKQUOTE
><P
CLASS="para"
>The arguments to the <KBD
CLASS="command"
>infile</KBD
> function are described below:</P
><TABLE
CLASS="informaltable"
BORDER="1"
CELLPADDING="3"
><THEAD
CLASS="thead"
><TR
CLASS="row"
VALIGN="TOP"
><TH
CLASS="entry"
ALIGN="LEFT"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>Parameter Name</P
></TH
><TH
CLASS="entry"
ALIGN="LEFT"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>Description</P
></TH
></TR
></THEAD
><TBODY
CLASS="tbody"
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
> <BLOCKQUOTE
><PRE
CLASS="programlisting"
>file_in
loc_in, file_in</PRE
></BLOCKQUOTE
> </TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>The name of the file to be opened. The function is overloaded to allow both the location name and combined name specification for the file. All other arguments are common among the two.</P
></TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
> <BLOCKQUOTE
><PRE
CLASS="programlisting"
>text_in</PRE
></BLOCKQUOTE
> </TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>The chunk of text to be searched for in each line of the file.</P
></TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
> <BLOCKQUOTE
><PRE
CLASS="programlisting"
>nth_in</PRE
></BLOCKQUOTE
> </TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>The number of times the text should be found in distinct lines in the file before the function returns the line number. Default is 1, which means the first match. This value must be at least 1.</P
></TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
> <BLOCKQUOTE
><PRE
CLASS="programlisting"
>start_line_in</PRE
></BLOCKQUOTE
> </TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>The first line in the file from which the function should start its search. This value must be greater than 0.</P
></TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
> <BLOCKQUOTE
><PRE
CLASS="programlisting"
>end_line_in</PRE
></BLOCKQUOTE
> </TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>The last line in the file to which the function should continue its search. If NULL (the default), then search through end of the file. This value must be greater than or equal to <KBD
CLASS="command"
>start_line_in</KBD
>.</P
></TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
> <BLOCKQUOTE
><PRE
CLASS="programlisting"
>ignore_case_in</PRE
></BLOCKQUOTE
> </TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>Indicates whether the case of the file contents and <KBD
CLASS="command"
>text_in</KBD
> should be ignored when checking for its presence in the line.</P
></TD
></TR
></TBODY
></TABLE
><P
CLASS="para"
>The <KBD
CLASS="command"
>infile</KBD
> function opens (in read-only mode), scans, and closes your file. You do not have to&nbsp;-- and should not&nbsp;-- perform any of these steps.</P
><P
CLASS="para"
>The only required parameters are <KBD
CLASS="command"
>file_in</KBD
> and <KBD
CLASS="command"
>text_in</KBD
>. I can, as a result, call <KBD
CLASS="command"
>infile</KBD
> with this minimum number of arguments:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>first_find := PLVfile.infile ('names.vp', 'Hanubi';</PRE
></BLOCKQUOTE
><P
CLASS="para"
>I can, however, also do so much more, as shown in the examples below.</P
><OL
CLASS="orderedlist"
><LI
CLASS="listitem"
><P
CLASS="para"
>Confirm that the role assigned to this user is SUPERVISOR. </P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>IF PLVfile.line ('config.usr', 'ROLE=SUPERVISOR') &gt; 0
THEN
   update_schedule;
END IF;</PRE
></BLOCKQUOTE
></LI
><LI
CLASS="listitem"
><P
CLASS="para"
>Find the second occurrence of `<SPAN
CLASS="acronym"
>DELETE</SPAN
>' starting with the fifth line.</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>v_line := PLVfile.line ('commands.dat', 'delete', 2, 5);</PRE
></BLOCKQUOTE
></LI
><LI
CLASS="listitem"
><P
CLASS="para"
>Verify that the third line contains a terminal type specification. I ask for an exact match on the case of the text in the file, since the setup file has a specific structure.</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>v_line := PLVfile.line
   ('setup.cfg', 'termtype=', 1, 3, ignore_case_in =&gt; FALSE);</PRE
></BLOCKQUOTE
></LI
></OL
><P
CLASS="para"
>The <KBD
CLASS="command"
>infile</KBD
> function differs from INSTR in at least one way: it does not support negative values for the starting line number of the search. INSTR does recognize this kind of argument, causing it to scan backwards through the string. You cannot scan backwards through the contents of a file.</P
><DIV
CLASS="sect3"
><H4
CLASS="sect3"
><A
CLASS="title"
NAME="ch13-SECT-5.3.1"
>13.5.3.1 Building utilities around infile</A
></H4
><P
CLASS="para"
>Suppose I receive profit-and-loss statements electronically from each of my regional offices every month. The number of items in the statement can change, but the file must contain a monthly total line in the format:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>month_total=<EM
CLASS="emphasis"
>NNNNNN</EM
></PRE
></BLOCKQUOTE
><P
CLASS="para"
>where <EM
CLASS="emphasis"
>NNNNNN</EM
> is the dollar amount.</P
><P
CLASS="para"
>Before the availability of UTL_FILE, you would have had to use SQL*Loader to load the file into a "temporary" table and then query the contents of that table. With UTL_FILE and (more to the point of this chapter, PLVfile's functions) you can skip the temporary table and extract the information directly from the file.</P
><P
CLASS="para"
>The <KBD
CLASS="command"
>mth_total</KBD
><A
CLASS="indexterm"
NAME="ch13-idx-998504-0"
></A
> function shown below (stored in file <I
CLASS="filename"
>use\mthtotal.sf </I
> ) makes use of both <KBD
CLASS="command"
>PLVfile.line</KBD
> and <KBD
CLASS="command"
>PLVfile.infile</KBD
> to extract the monthly total for the specified region and month.</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>FUNCTION mth_total 
   (region_in IN INTEGER,
    month_in IN VARCHAR2,
    key_in IN VARCHAR2 := 'month_total=') RETURN NUMBER
IS
   v_file VARCHAR2(100) := 
      'pnl' || TO_CHAR (region_in) || '.' || month_in;
   v_linenum INTEGER;
   v_line PLVfile.max_line%TYPE;

   retval NUMBER := NULL;
BEGIN
   v_linenum := PLVfile.line (v_file, key_in);
   If v_linenum IS NOT NULL
   THEN
      v_line := PLVfile.line (v_file, v_linenum);
      retval := SUBSTR (v_line, LENGTH (key_in) + 1); 
   END IF;
   RETURN retval
EXCEPTION
   WHEN OTHERS THEN RETURN NULL;
END;</PRE
></BLOCKQUOTE
><P
CLASS="para"
>This function, first of all, assumes that the default directory for the profit-and-loss files has already been set. It then constructs the file name from the region number and month string (the month string is an extension of the form <EM
CLASS="emphasis"
>MMYY</EM
>). The call to <KBD
CLASS="command"
>PLVfile.line</KBD
> locates the line containing the keyword (which is also passed in as an argument to increase the flexibility of the function). If the line number if not NULL, a match was found. So <KBD
CLASS="command"
>PLVfile.line</KBD
> is then called to return the text of that line. Finally, I use SUBSTR to extract only the numeric part of the line.<A
CLASS="indexterm"
NAME="ch13-idx-998496-0"
></A
><A
CLASS="indexterm"
NAME="ch13-idx-998496-1"
></A
><A
CLASS="indexterm"
NAME="ch13-idx-998496-2"
></A
><A
CLASS="indexterm"
NAME="ch13-idx-998496-3"
></A
></P
></DIV
></DIV
></DIV
><DIV
CLASS="htmlnav"
><P
></P
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch13_04.htm"
TITLE="13.4 Opening and Closing Files"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 13.4 Opening and Closing Files"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="book"
HREF="index.htm"
TITLE="Advanced Oracle PL/SQL Programming with Packages"
><IMG
SRC="../gifs/txthome.gif"
ALT="Advanced Oracle PL/SQL Programming with Packages"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch13_06.htm#ch13-SECT-6.1"
TITLE="13.6 Writing to a File"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 13.6 Writing to a File"
BORDER="0"></A
></TD
></TR
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
>13.4 Opening and Closing Files</TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="index"
HREF="index/idx_0.htm"
TITLE="Book Index"
><IMG
SRC="../gifs/index.gif"
ALT="Book Index"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
>13.6 Writing to a File</TD
></TR
></TABLE
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"></DIV
><IMG
SRC="../gifs/smnavbar.gif"
USEMAP="#map"
BORDER="0"
ALT="The Oracle Library Navigation">

<P><font size="-1">
<a href="../copyrght.htm#copy">Copyright (c) 2000</a> O'Reilly & Associates. All rights reserved.
</font></P>

<MAP NAME="map">

<AREA SHAPE="RECT"
COORDS="0,0,35,30"
HREF="../index.htm"
ALT="Library Home">

<AREA SHAPE="RECT"
COORDS="40,0,95,30"
HREF="../prog2/index.htm"
ALT="Oracle PL/SQL Programming, 2nd. Ed.">

<AREA SHAPE="RECT"
COORDS="100,0,200,30"
HREF="../guide8i/index.htm"
ALT="Guide to Oracle 8i Features">

<AREA SHAPE="RECT"
COORDS="205,0,245,30"
HREF="../bipack/index.htm"
ALT="Oracle Built-in Packages">

<AREA SHAPE="RECT"
COORDS="250,0,320,30"
HREF="index.htm"
ALT="Advanced PL/SQL Programming with Packages">

<AREA SHAPE="RECT"
COORDS="325,0,420,30"
HREF="../webapp/index.htm"
ALT="Oracle Web Applications">

<AREA SHAPE="RECT"
COORDS="425,0,490,30"
HREF="../langpkt/index.htm"
ALT="Oracle PL/SQL Language Pocket Reference">

<AREA SHAPE="RECT"
COORDS="495,0,570,30"
HREF="../bipkt/index.htm"
ALT="Oracle PL/SQL Built-ins Pocket Reference">
</MAP>
</BODY
>
<!-- Mirrored from liso.cs.pusan.ac.kr by HTTrack Website Copier/3.x [XR&CO'2001] -->
</HTML
>
