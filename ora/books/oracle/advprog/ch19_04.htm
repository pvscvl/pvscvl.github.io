<HTML
><HEAD
><TITLE
>[Chapter 19] 19.4 PLVdyn: A Code Layer over DBMS_SQL</TITLE
><META
NAME="DC.Creator"
CONTENT="Steven Feuerstein"><META
NAME="DC.Date"
CONTENT="2000-04-29T18:30:41Z"><META
NAME="DC.Format"
CONTENT="text/html"
SCHEME="MIME"><META
NAME="DC.Identifier"
CONTENT="O'Reilly and Associates-1-56592-238-7E"><META
NAME="DC.Language"
CONTENT="en-US"><META
NAME="DC.Publisher"
CONTENT="O'Reilly &amp; Associates, Inc."><META
NAME="DC.Source"
CONTENT="1-56592-238-7E"
SCHEME="ISBN"><META
NAME="DC.Subject.Keyword"
CONTENT="PL/SQL SQL Oracle Packages"><META
NAME="DC.Title"
CONTENT="Advanced Oracle PL/SQL Programming with Packages"><META
NAME="DC.Type"
CONTENT="Text.Monograph"><META
NAME="generator"
CONTENT="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><LINK
REL="stylesheet"
TYPE="text/css"
HREF="../style/style1.css"><LINK
REV="made"
HREF="mailto:online-books@oreilly.com"
TITLE="Online Books Comments"><LINK
REL="up"
HREF="ch19_01.htm"
TITLE="19. PLVdyn and PLVfk: Dynamic SQL and PL/SQL"><LINK
REL="prev"
HREF="ch19_03.htm"
TITLE="19.3 The Dynamic Packages of PL/Vision"><LINK
REL="next"
HREF="ch19_05.htm#ch19-SECT-5.0.4"
TITLE="19.5 DML Operations"></HEAD>
<BODY><DIV CLASS="htmlnav"
><H1
><IMG
SRC="gifs/smbanner.gif"
ALT="Advanced Oracle PL/SQL Programming with Packages"
USEMAP="#srchmap"
BORDER="0"></H1
><MAP
NAME="srchmap"
><AREA
SHAPE="RECT"
COORDS="0,0,466,65"
HREF="index.htm"
ALT="Advanced Oracle PL/SQL Programming with Packages"><AREA
SHAPE="RECT"
COORDS="467,0,514,18"
HREF="jobjects/fsearch.htm"
ALT="Search this book"></MAP
><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch19_03.htm"
TITLE="19.3 The Dynamic Packages of PL/Vision"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 19.3 The Dynamic Packages of PL/Vision"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><SPAN
CLASS="NAVTITLE"
><A
CLASS="chapter"
REL="up"
HREF="ch19_01.htm"
TITLE="19. PLVdyn and PLVfk: Dynamic SQL and PL/SQL"
>Chapter 19<BR>PLVdyn and PLVfk: Dynamic SQL and PL/SQL</A
></SPAN
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch19_05.htm#ch19-SECT-5.0.4"
TITLE="19.5 DML Operations"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 19.5 DML Operations"
BORDER="0"></A
></TD
></TR
></TABLE
>&nbsp;<HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"></DIV
><DIV
CLASS="sect1"
><H2
CLASS="sect1"
><A
CLASS="title"
NAME="ch19-20240"
>19.4 PLVdyn: A Code Layer over DBMS_SQL</A
></H2
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="ch19-idx-999293-0"
></A
><A
CLASS="indexterm"
NAME="ch19-idx-999293-1"
></A
>The PLVdyn (PL/Vision DYNamic SQL) package offers an easy-to-use, programmatic interface, or API, to the DBMS_SQL builtin package. It combines many basic operations in DBMS_SQL into functions and procedures, freeing up developers from having to know about many of the intricacies of using the builtin package.</P
><P
CLASS="para"
>Operations include:</P
><UL
CLASS="itemizedlist"
><LI
CLASS="listitem"
><P
CLASS="para"
>Execute a Data Definition Language (DDL) statement with one line of code</P
></LI
><LI
CLASS="listitem"
><P
CLASS="para"
>Execute a <SPAN
CLASS="acronym"
>PL/SQL</SPAN
> block with one line of code</P
></LI
><LI
CLASS="listitem"
><P
CLASS="para"
>Delete from or truncate the specified table</P
></LI
><LI
CLASS="listitem"
><P
CLASS="para"
>Drop one or more objects from the data dictionary</P
></LI
><LI
CLASS="listitem"
><P
CLASS="para"
>Execute an INSERT...SELECT FROM statement with an absolute minimum of SQL coding</P
></LI
><LI
CLASS="listitem"
><P
CLASS="para"
>View the contents of the specified table</P
></LI
><LI
CLASS="listitem"
><P
CLASS="para"
>Toggle on/off tracing that displays the dynamic <SPAN
CLASS="acronym"
>SQL</SPAN
> statement being parsed</P
></LI
></UL
><P
CLASS="para"
>The following sections show how to use each of the different elements of the PLVdyn package.</P
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch19-SECT-4.1"
>19.4.1 DDL Operations </A
></H3
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="ch19-idx-999294-0"
></A
><A
CLASS="indexterm"
NAME="ch19-idx-999294-1"
></A
>The PLVdyn package offers several programmatic interfaces to DDL or Data Definition Language commands. Before DBMS_SQL was available, you could not execute any DDL statements (such as CREATE TABLE, CREATE INDEX, etc.) within <SPAN
CLASS="acronym"
>PL/SQL</SPAN
>. Now DBMS_SQL lets you execute anything you want&nbsp;-- as long as you have the appropriate authority.</P
><P
CLASS="para"
>DDL statements in <SPAN
CLASS="acronym"
>SQL</SPAN
> are handled differently from DML (Data Manipulation Language) statements such as UPDATE, INSERT, and so on. There is no need to execute a DDL statement. The simple act of parsing DDL automatically executes it and performs a COMMIT. This is true in SQL*Plus and it is true in <SPAN
CLASS="acronym"
>PL/SQL</SPAN
> programs. If you execute a DDL statement in your <SPAN
CLASS="acronym"
>PL/SQL</SPAN
> program, it commits all outstanding changes in your session. This may or may not be acceptable, so factor it into your use of the following PLVdyn programs.</P
><BLOCKQUOTE
CLASS="note"
><P
CLASS="para"
><STRONG
>NOTE:</STRONG
>  <A
CLASS="indexterm"
NAME="ch19-idx-999296-0"
></A
><A
CLASS="indexterm"
NAME="ch19-idx-999296-1"
></A
>To dynamically execute DDL from within PL/Vision, the account in which PLVdyn is installed must have the appropriate privilege granted to it explicitly. If you rely solely on role-based privileges, you receive an <KBD
CLASS="command"
>ORA-01031 error: insufficient privileges</KBD
>. For example, if you want to create tables from within PLVdyn, you need to have CREATE TABLE privilege granted to the PLVdyn account. </P
></BLOCKQUOTE
><DIV
CLASS="sect3"
><H4
CLASS="sect3"
><A
CLASS="title"
NAME="ch19-SECT-4.1.1"
>19.4.1.1 Generic DDL interface</A
></H4
><P
CLASS="para"
>First of all, PLVdyn offers a single, completely generic procedure to execute a DDL statement. Its header follows:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>PROCEDURE <A
CLASS="indexterm"
NAME="ch19-idx-999295-0"
></A
>ddl (string_in IN VARCHAR2);</PRE
></BLOCKQUOTE
><P
CLASS="para"
>You pass the string to <KBD
CLASS="command"
>PLVdyn.ddl</KBD
> and it takes care of the details (the implementation of which is discussed in the section called "Bundling Common Operations").</P
><P
CLASS="para"
>I can use the <KBD
CLASS="command"
>ddl</KBD
> procedure to perform any kind of DDL, as the following examples illustrate.</P
><OL
CLASS="orderedlist"
><LI
CLASS="listitem"
><P
CLASS="para"
>Create an index on the <KBD
CLASS="command"
>emp</KBD
> table.</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>PLVdyn.ddl ('CREATE INDEX empsal ON emp (sal)');</PRE
></BLOCKQUOTE
></LI
><LI
CLASS="listitem"
><P
CLASS="para"
>Create or replace a procedure called <KBD
CLASS="command"
>temp</KBD
>.</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>PLVdyn.ddl
   ('CREATE OR REPLACE PROCEDURE temp ' ||
    'IS BEGIN NULL; END;');</PRE
></BLOCKQUOTE
></LI
></OL
><P
CLASS="para"
>PLVdyn offers a number of other, more specialized programs to execute various kinds of DDL. These are described in the following sections.</P
></DIV
><DIV
CLASS="sect3"
><H4
CLASS="sect3"
><A
CLASS="title"
NAME="ch19-SECT-4.1.2"
>19.4.1.2 Dropping and truncating objects with PLVdyn</A
></H4
><P
CLASS="para"
>PLVdyn offers two separate "cleanup" programs: <KBD
CLASS="command"
>drop_object</KBD
> and <KBD
CLASS="command"
>truncate</KBD
>. The <KBD
CLASS="command"
>drop_object</KBD
><A
CLASS="indexterm"
NAME="ch19-idx-999297-0"
></A
> procedure provides a powerful, flexible interface for dropping one or many objects in your schema. The header for <KBD
CLASS="command"
>drop_object</KBD
> is:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>PROCEDURE drop_object 
   (type_in IN VARCHAR2, 
    name_in IN VARCHAR2, 
    schema_in IN VARCHAR2 := USER);</PRE
></BLOCKQUOTE
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="ch19-idx-999298-0"
></A
>The <KBD
CLASS="command"
>truncate</KBD
> command truncates either tables or clusters and has the same interface as <KBD
CLASS="command"
>drop_object</KBD
>:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>PROCEDURE truncate 
   (type_in IN VARCHAR2, 
    name_in IN VARCHAR2, 
    schema_in IN VARCHAR2 := USER);</PRE
></BLOCKQUOTE
><P
CLASS="para"
>The rest of this section describes the behavior and flexibility of <KBD
CLASS="command"
>drop_object</KBD
>. The same information applies to <KBD
CLASS="command"
>truncate</KBD
>. </P
><P
CLASS="para"
>You provide the type of object to drop, the name of the object, and the schema, (if you do want to drop objects in another schema). So instead of typing statements like this in SQL*Plus:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>SQL&gt; drop table emp;</PRE
></BLOCKQUOTE
><P
CLASS="para"
>you can now use PLVdyn and enter this instead:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>SQL&gt; exec PLVdyn.drop_object ('table', 'emp');</PRE
></BLOCKQUOTE
><P
CLASS="para"
>If I were an aggressive and desperate salesperson, I would try to convince you that my way (with PLVdyn) is better than the "native" DROP TABLE statement. That is, however, totally foolish. This is a case where the simple DDL statement is much more straightforward. So why did I bother writing the <KBD
CLASS="command"
>drop_object</KBD
> procedure? Because when I wrote it, I didn't plan simply to match the capabilities of a single DDL statement. Instead, I examined the way in which DBAs often need to drop and manipulate objects in a schema and I discovered a way to leverage <SPAN
CLASS="acronym"
>PL/SQL</SPAN
> to provide added value when it came to dropping objects.</P
></DIV
><DIV
CLASS="sect3"
><H4
CLASS="sect3"
><A
CLASS="title"
NAME="ch19-SECT-4.1.3"
>19.4.1.3 Adding value with PL/SQL</A
></H4
><P
CLASS="para"
>In many of the accounts in which I have worked, an application abbreviation is prefixed onto the names of all objects (tables, views, programs, synonyms, etc.) for the application. The inventory system would use the <KBD
CLASS="command"
>INV</KBD
> abbreviation, for instance, to segregate by name all related objects. The main inventory table is named <KBD
CLASS="command"
>INV_master</KBD
>, the line items table named <KBD
CLASS="command"
>INV_item</KBD
>, and the package to maintain the invoices named <KBD
CLASS="command"
>INV_maint</KBD
>. </P
><P
CLASS="para"
>A common action taken in such environments is to drop all objects for a particular application or to clean out all of the stored procedures or tables or views. I may want to clear the inventory application from my test schema so that I can move the next release over from development. Without dynamic <SPAN
CLASS="acronym"
>SQL</SPAN
> in <SPAN
CLASS="acronym"
>PL/SQL</SPAN
>, you would have to use <SPAN
CLASS="acronym"
>SQL</SPAN
> to generate <SPAN
CLASS="acronym"
>SQL</SPAN
>, reading rows from the USER_OBJECTS table to create a series of DROP statements, and then execute those statements in SQL*Plus. </P
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="ch19-idx-999299-0"
></A
>With DBMS_SQL and the PLVdyn package, you no longer have to take such a convoluted path to get the job done. Both the type and name arguments of the <KBD
CLASS="command"
>drop_object</KBD
> procedure can be wildcarded, and this gives you a tremendous amount of flexibility. I can drop all the objects with the inventory prefix as follows:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>SQL&gt; exec PLVdyn.drop_object ('%', 'INV%');</PRE
></BLOCKQUOTE
><P
CLASS="para"
>I can also request that all tables in the SCOTT schema be dropped with this command (it will, of course, only work if the owner of PLVdyn has the authority to drop objects in the SCOTT schema):</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>SQL&gt; exec PLVdyn.drop_object ('table', '%', 'scott');</PRE
></BLOCKQUOTE
><P
CLASS="para"
>You can provide the same kinds of wildcarded arguments to <KBD
CLASS="command"
>truncate</KBD
>. If you specify "%" for the object type, for instance, <KBD
CLASS="command"
>truncate</KBD
> automatically applies the truncate command only to objects of type TABLE or CLUSTER. </P
></DIV
><DIV
CLASS="sect3"
><H4
CLASS="sect3"
><A
CLASS="title"
NAME="ch19-SECT-4.1.4"
>19.4.1.4 <A
CLASS="indexterm"
NAME="ch19-idx-999300-0"
></A
>Implementing multiobject actions</A
></H4
><P
CLASS="para"
>The implementation of <KBD
CLASS="command"
>drop_object</KBD
> and <KBD
CLASS="command"
>truncate</KBD
> is interesting; both of these programs simply call a private module called <KBD
CLASS="command"
>multiobj</KBD
>, which stands for "multiple objects." This procedure applies the specified command to all the objects in the ALL_OBJECTS view that match the type and name provided. </P
><P
CLASS="para"
>The <KBD
CLASS="command"
>multiobj</KBD
><A
CLASS="indexterm"
NAME="ch19-idx-999303-0"
></A
> procedure itself is a combination of static and dynamic SQL, as shown below:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>PROCEDURE multiobj 
   (action_in IN VARCHAR2,
    type_in IN VARCHAR2, 
    name_in IN VARCHAR2, 
    schema_in IN VARCHAR2 := USER)
IS
   /* The static cursor retrieving all matching objects */
   CURSOR obj_cur IS
      SELECT object_name, object_type
        FROM all_objects
       WHERE object_name LIKE UPPER (name_in)
         AND object_type LIKE UPPER (type_in) 
            AND (UPPER (action_in) != c_truncate OR
              (UPPER (action_in) = c_truncate AND
               object_type IN ('TABLE', 'CLUSTER')))
         AND owner = UPPER (schema_in);

BEGIN
   /* For each matching object ... */
   FOR obj_rec IN obj_cur
   LOOP
      /* Open and parse the drop statement. */
      ddl 
         (action_in || ' ' || 
          obj_rec.object_type || ' ' || 
          UPPER (schema_in) || '.' ||
          obj_rec.object_name); 
   END LOOP;
END;</PRE
></BLOCKQUOTE
><P
CLASS="para"
>The first argument to <KBD
CLASS="command"
>multiobj</KBD
> is the action desired. The rest of the arguments specify one or more objects upon which the action is to be applied.</P
><P
CLASS="para"
>The static cursor fetches all records from the ALL_OBJECTS data dictionary view that match the criteria. The dynamic cursor is defined and executed inside the generic <KBD
CLASS="command"
>PLVdyn.ddl</KBD
> procedure.</P
><P
CLASS="para"
>Why, my readers may be asking, did I not use the PLVobj package to fetch from the ALL_OBJECTS view? The whole point of that package was to allow me to avoid making direct references to that view; instead I could rely on a programmatic interface and very high-level operators. Using <KBD
CLASS="command"
>PLVobj.loopexec</KBD
>, I could theoretically implement <KBD
CLASS="command"
>multiobj</KBD
> with a single statement, in which I execute <KBD
CLASS="command"
>PLVdyn.ddl</KBD
> as a dynamically constructed <SPAN
CLASS="acronym"
>PL/SQL</SPAN
> program.</P
><P
CLASS="para"
>Believe me, I really <EM
CLASS="emphasis"
>wanted</EM
> to use PLVobj in this program. The problem I encountered is that PLVobj is not sufficiently flexible. As you can see in the declaration section of <KBD
CLASS="command"
>multiobj</KBD
>, my cursor against ALL_OBJECTS is somewhat specialized. I have very particular logic inserted that automatically filters out objects that are not appropriate for TRUNCATE operations. There was no way for me to incorporate this logic into PLVobj as it currently exists. I do plan, however, that a future version of PLVobj will utilize dynamic <SPAN
CLASS="acronym"
>SQL</SPAN
> and then allow me to modify the WHERE clause (and even which view it works against: USER_OBJECTS, ALL_OBJECTS, or DBA_OBJECTS). </P
><P
CLASS="para"
>In the meantime, I write my own, somewhat redundant cursor against ALL_OBJECTS and then construct the appropriate DDL statement based on the incoming action and values from the row fetched from ALL_OBJECTS.</P
></DIV
><DIV
CLASS="sect3"
><H4
CLASS="sect3"
><A
CLASS="title"
NAME="ch19-SECT-4.1.5"
>19.4.1.5 Generating sequence numbers</A
></H4
><P
CLASS="para"
>The <KBD
CLASS="command"
>nextseq</KBD
><A
CLASS="indexterm"
NAME="ch19-idx-999304-0"
></A
><A
CLASS="indexterm"
NAME="ch19-idx-999304-1"
></A
><A
CLASS="indexterm"
NAME="ch19-idx-999304-2"
></A
> function returns the <EM
CLASS="emphasis"
>n</EM
>th next value from the specified Oracle sequence. Its header is as follows:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>FUNCTION nextseq
   (seq_in IN VARCHAR2, increment_in IN INTEGER := 1)
   RETURN INTEGER;</PRE
></BLOCKQUOTE
><P
CLASS="para"
>The default value for the increment is 1, so by default you get the immediate next value from the sequence with a call like this:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>:emp.empno := PLVdyn.nextseq ('emp_seq');</PRE
></BLOCKQUOTE
><P
CLASS="para"
>You can also use <KBD
CLASS="command"
>nextseq</KBD
> to move your sequence forward by an arbitrary number of values. This is often necessary when the sequence has somehow gotten out of sync with the data. To move the <KBD
CLASS="command"
>emp_seq</KBD
> sequence ahead by 1000 values, simply execute this statement:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>SQL&gt; exec PLVdyn.nextseq.('emp_seq', 1000);</PRE
></BLOCKQUOTE
><P
CLASS="para"
>Why did I bother building <KBD
CLASS="command"
>nextseq</KBD
> ? The Oracle database offers a very powerful method for generating unique sequential numbers: the sequence generator. This database object guarantees uniqueness of values and comes in very handy when you need to get the next primary key value for INSERTs. One drawback of the sequence generator is that you can only obtain the next value in the sequence by referencing the sequence object from within a <SPAN
CLASS="acronym"
>SQL</SPAN
> statement. </P
><P
CLASS="para"
>The following SELECT statement, for example, is like the one often used within PRE-INSERT triggers in Oracle Forms applications:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>SELECT emp_seq.NEXTVAL INTO :emp.empno FROM dual;</PRE
></BLOCKQUOTE
><P
CLASS="para"
>In other words, you must make this artificial query from the <KBD
CLASS="command"
>dual</KBD
> table to obtain the sequence number to then use inside the Oracle Forms application. </P
><P
CLASS="para"
>And suppose that you want to move the sequence forward by 1000 (this kind of requirement arises when, for one reason or another, the sequence has gotten out of sync with the table's primary key). You would then have to write and execute a FOR along these lines:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>DECLARE
   dummy INTEGER;
BEGIN
   FOR val IN 1 .. 1000
   LOOP
      SELECT emp_seq.NEXTVAL INTO dummy FROM dual;
   END LOOP;
END;
/</PRE
></BLOCKQUOTE
><P
CLASS="para"
>I don't know about you, but the year is 1996 and I just don't think I should have to execute queries against <KBD
CLASS="command"
>dual</KBD
> to get things done. That makes me feel like a dummy! I also believe that Oracle Corporation will come to its senses eventually and allow you to obtain sequence numbers without going to the <SPAN
CLASS="acronym"
>SQL</SPAN
> layer. In the meantime, however, PLVdyn offers a programmatic interface to any sequence so that you can at least hide the fact that you are using <KBD
CLASS="command"
>dual</KBD
> to get your sequence number. You even get to hide the specific syntax of sequence generation (the NEXTVAL keyword, for instance), which will make it easier for anyone from novices to developers to utilize this technology.</P
></DIV
><DIV
CLASS="sect3"
><H4
CLASS="sect3"
><A
CLASS="title"
NAME="ch19-SECT-4.1.6"
>19.4.1.6 What about the overhead?</A
></H4
><P
CLASS="para"
>Of course, since you are executing dynamic <SPAN
CLASS="acronym"
>SQL</SPAN
>, it takes more time to generate the sequence with <KBD
CLASS="command"
>nextseq</KBD
> compared with a static generation. My tests showed that, on average, the static generation approach (using a direct call to the sequence NEXTVAL through a dummy <SPAN
CLASS="acronym"
>SQL</SPAN
> query) took .55 seconds for 100 increments of the sequence. The dynamic approach using <KBD
CLASS="command"
>PLVdyn.nextseq</KBD
>, on the other hand, required 1.54 seconds for 100 increments of the sequence. There are two ways of looking at these results:</P
><OL
CLASS="orderedlist"
><LI
CLASS="listitem"
><P
CLASS="para"
><EM
CLASS="emphasis"
>Cup half empty:</EM
> The dynamic sequence generation is three times slower than static! How awful!</P
></LI
><LI
CLASS="listitem"
><P
CLASS="para"
><EM
CLASS="emphasis"
>Cup half full:</EM
> Dynamic generation of a single sequence value took only .0154 seconds on average. Unless I am working in a high-transaction, subsecond kind of environment, this is a totally acceptable level of performance.</P
></LI
></OL
><P
CLASS="para"
>Is your cup half empty or half full? It depends on your specific application situation. As a general rule, you should carefully evaluate your use of dynamic <SPAN
CLASS="acronym"
>SQL</SPAN
> to make sure that you can afford the overhead. When your application can absorb the extra CPU cycles (and your users can tolerate the difference in response time), a program like <KBD
CLASS="command"
>PLVdyn.nextseq</KBD
> offers many advantages. <A
CLASS="indexterm"
NAME="ch19-idx-999305-0"
></A
><A
CLASS="indexterm"
NAME="ch19-idx-999305-1"
></A
><A
CLASS="indexterm"
NAME="ch19-idx-999305-2"
></A
></P
></DIV
><DIV
CLASS="sect3"
><H4
CLASS="sect3"
><A
CLASS="title"
NAME="ch19-SECT-4.1.7"
>19.4.1.7 Compiling source code with PLVdyn</A
></H4
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="ch19-idx-999306-0"
></A
><A
CLASS="indexterm"
NAME="ch19-idx-999306-1"
></A
><A
CLASS="indexterm"
NAME="ch19-idx-999306-2"
></A
><A
CLASS="indexterm"
NAME="ch19-idx-999306-3"
></A
><A
CLASS="indexterm"
NAME="ch19-idx-999306-4"
></A
><A
CLASS="indexterm"
NAME="ch19-idx-999306-5"
></A
>When you CREATE OR REPLACE a <SPAN
CLASS="acronym"
>PL/SQL</SPAN
> program unit in SQL*Plus, you are executing a DDL command. You can, consequently, issue that same command using DBMS_SQL&nbsp;-- the difference is that you can construct, create, and compile the <SPAN
CLASS="acronym"
>PL/SQL</SPAN
> program dynamically. PLVdyn offers two versions of the <KBD
CLASS="command"
>compile</KBD
> procedure precisely to allow you to take this action. The headers of the <KBD
CLASS="command"
>compile</KBD
> programs are as shown:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>PROCEDURE compile 
   (stg_in IN VARCHAR2, 
    show_err_in IN VARCHAR2 := PLV.noshow);
PROCEDURE compile
   (table_in IN PLVtab.vc2000_table, 
    lines_in IN INTEGER, 
    show_err_in IN VARCHAR2 := PLV.noshow);</PRE
></BLOCKQUOTE
><P
CLASS="para"
>The second version of <KBD
CLASS="command"
>compile</KBD
> assumes that the program definition is in a <SPAN
CLASS="acronym"
>PL/SQL</SPAN
> table in which each row starting from 1 and going to <KBD
CLASS="command"
>lines_in</KBD
> rows contains a sequential line of code. This procedure simply concatenates all of the lines together and passes them to the first version of <KBD
CLASS="command"
>compile</KBD
>.</P
><P
CLASS="para"
>The string version of <KBD
CLASS="command"
>cor</KBD
> takes two arguments: <KBD
CLASS="command"
>stg_in</KBD
>, a string of up to 32,767 characters that contains the definition of the program, and <KBD
CLASS="command"
>show_err_in</KBD
>, which indicates whether you want to call <KBD
CLASS="command"
>PLVvu.err</KBD
> after compilation to check for compile errors. The program definition should start with the program unit type (PROCEDURE, FUNCTION, PACKAGE, or PACKAGE BODY). Do not append a CREATE OR REPLACE to the string; <KBD
CLASS="command"
>compile</KBD
> does this automatically. You also should not include a final / after the END; statement. This syntax is necessary only when executing the CREATE OR REPLACE directly in SQL*Plus. You can, on the other hand, include newline characters in your string.</P
><P
CLASS="para"
>Here is an example of using <KBD
CLASS="command"
>PLVdyn.compile</KBD
> to create a very simple procedure with an error. I also request that PLVdyn show me the compile errors.</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>SQL&gt; exec PLVdyn.compile('procedure temp is begin nul; end;',PLV.show);
--------------------------------------------------------------------
PL/Vision Error Listing for PROCEDURE TEMP
--------------------------------------------------------------------
Line#  Source
--------------------------------------------------------------------
    1 procedure temp is begin nul; end;
ERR                            *
    PLS-00313: 'NUL' not declared in this scope</PRE
></BLOCKQUOTE
><P
CLASS="para"
>How would you use <KBD
CLASS="command"
>PLVdyn.compile</KBD
>? You might try building yourself a Windows-based frontend for <SPAN
CLASS="acronym"
>PL/SQL</SPAN
> development. For example, find a really good programming editor that has a macro language and the ability to execute dynamic link libraries (DLLs). Create a DLL that accepts a string and executes <KBD
CLASS="command"
>PLVdyn.compile</KBD
>. Tie this in to the editor and you are on your way to dramatically improving your <SPAN
CLASS="acronym"
>PL/SQL</SPAN
> development environment.</P
><BLOCKQUOTE
CLASS="note"
><P
CLASS="para"
><STRONG
>NOTE:</STRONG
>  To dynamically compile and create stored <SPAN
CLASS="acronym"
>PL/SQL</SPAN
> code from within PL/Vision, the account in which PLVdyn is installed must be directly granted CREATE PROCEDURE authority. If you rely solely on role-based privileges, you receive an <KBD
CLASS="command"
>ORA-01031 error: insufficient privileges</KBD
>.</P
></BLOCKQUOTE
><P
CLASS="para"
>You might also use <KBD
CLASS="command"
>PLVdyn.compile</KBD
> to temporarily create program units for use in your application, and then drop them at the end of your session. You could, for example, create a package dynamically that would define some global data structures whose names are established dynamically. They could only be referenced through dynamic <SPAN
CLASS="acronym"
>PL/SQL</SPAN
> as well, but PLVdyn does make this possible.</P
></DIV
><DIV
CLASS="sect3"
><H4
CLASS="sect3"
><A
CLASS="title"
NAME="ch19-SECT-4.1.8"
>19.4.1.8 Implementing the compile procedure</A
></H4
><P
CLASS="para"
>The implementation of the string-based <KBD
CLASS="command"
>compile</KBD
> procedure is a good example of how I am able to leverage existing elements of PL/Vision to easily extend the functionality of my library. The body of <KBD
CLASS="command"
>compile</KBD
> is shown below:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>PROCEDURE compile 
   (stg_in IN VARCHAR2, 
    show_err_in IN VARCHAR2 := PLV.noshow)
IS
   v_name1 PLV.plsql_identifier%TYPE;
   v_name2 PLV.plsql_identifier%TYPE;
BEGIN
   ddl ('CREATE OR REPLACE ' || stg_in);
   IF show_err_in = PLV.show
   THEN
      v_name1 := PLVprs.nth_atomic (stg_in, 1, PLVprs.c_word);
      v_name2 := PLVprs.nth_atomic (stg_in, 2, PLVprs.c_word);
      IF UPPER(v_name1||' '||v_name2) = 'PACKAGE BODY'
      THEN
         v_name1 := v_name1 || ' ' || v_name2;
         v_name2 :=
            PLVprs.nth_atomic (stg_in, 3, PLVprs.c_word);
      END IF;
      PLVvu.err (v_name1 || ':' || v_name2); 
   END IF;
END;</PRE
></BLOCKQUOTE
><P
CLASS="para"
>Notice, first of all, that it relies on the <KBD
CLASS="command"
>ddl</KBD
> procedure to execute the program. Then <KBD
CLASS="command"
>compile</KBD
> checks to see if you wanted to view compile errors. If so, it uses the <KBD
CLASS="command"
>nth_atomic</KBD
> function of PLVprs to extract the first two words from the program definition. If a PACKAGE BODY, it then retrieves the third word, which is the name of the package. Finally, it calls <KBD
CLASS="command"
>PLVvu.err</KBD
> to display any errors.<A
CLASS="indexterm"
NAME="ch19-idx-999307-0"
></A
><A
CLASS="indexterm"
NAME="ch19-idx-999307-1"
></A
><A
CLASS="indexterm"
NAME="ch19-idx-999307-2"
></A
><A
CLASS="indexterm"
NAME="ch19-idx-999307-3"
></A
></P
></DIV
></DIV
></DIV
><DIV
CLASS="htmlnav"
><P
></P
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch19_03.htm"
TITLE="19.3 The Dynamic Packages of PL/Vision"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 19.3 The Dynamic Packages of PL/Vision"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="book"
HREF="index.htm"
TITLE="Advanced Oracle PL/SQL Programming with Packages"
><IMG
SRC="../gifs/txthome.gif"
ALT="Advanced Oracle PL/SQL Programming with Packages"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch19_05.htm#ch19-SECT-5.0.4"
TITLE="19.5 DML Operations"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 19.5 DML Operations"
BORDER="0"></A
></TD
></TR
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
>19.3 The Dynamic Packages of PL/Vision</TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="index"
HREF="index/idx_0.htm"
TITLE="Book Index"
><IMG
SRC="../gifs/index.gif"
ALT="Book Index"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
>19.5 DML Operations</TD
></TR
></TABLE
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"></DIV
><IMG
SRC="../gifs/smnavbar.gif"
USEMAP="#map"
BORDER="0"
ALT="The Oracle Library Navigation">

<P><font size="-1">
<a href="../copyrght.htm#copy">Copyright (c) 2000</a> O'Reilly & Associates. All rights reserved.
</font></P>

<MAP NAME="map">

<AREA SHAPE="RECT"
COORDS="0,0,35,30"
HREF="../index.htm"
ALT="Library Home">

<AREA SHAPE="RECT"
COORDS="40,0,95,30"
HREF="../prog2/index.htm"
ALT="Oracle PL/SQL Programming, 2nd. Ed.">

<AREA SHAPE="RECT"
COORDS="100,0,200,30"
HREF="../guide8i/index.htm"
ALT="Guide to Oracle 8i Features">

<AREA SHAPE="RECT"
COORDS="205,0,245,30"
HREF="../bipack/index.htm"
ALT="Oracle Built-in Packages">

<AREA SHAPE="RECT"
COORDS="250,0,320,30"
HREF="index.htm"
ALT="Advanced PL/SQL Programming with Packages">

<AREA SHAPE="RECT"
COORDS="325,0,420,30"
HREF="../webapp/index.htm"
ALT="Oracle Web Applications">

<AREA SHAPE="RECT"
COORDS="425,0,490,30"
HREF="../langpkt/index.htm"
ALT="Oracle PL/SQL Language Pocket Reference">

<AREA SHAPE="RECT"
COORDS="495,0,570,30"
HREF="../bipkt/index.htm"
ALT="Oracle PL/SQL Built-ins Pocket Reference">
</MAP>
</BODY
>
<!-- Mirrored from liso.cs.pusan.ac.kr by HTTrack Website Copier/3.x [XR&CO'2001] -->
</HTML
>
