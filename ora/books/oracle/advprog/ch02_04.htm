<HTML
><HEAD
><TITLE
>[Chapter 2] 2.4 Organizing Package Source Code</TITLE
><META
NAME="DC.Creator"
CONTENT="Steven Feuerstein"><META
NAME="DC.Date"
CONTENT="2000-04-29T18:21:55Z"><META
NAME="DC.Format"
CONTENT="text/html"
SCHEME="MIME"><META
NAME="DC.Identifier"
CONTENT="O'Reilly and Associates-1-56592-238-7E"><META
NAME="DC.Language"
CONTENT="en-US"><META
NAME="DC.Publisher"
CONTENT="O'Reilly &amp; Associates, Inc."><META
NAME="DC.Source"
CONTENT="1-56592-238-7E"
SCHEME="ISBN"><META
NAME="DC.Subject.Keyword"
CONTENT="PL/SQL SQL Oracle Packages"><META
NAME="DC.Title"
CONTENT="Advanced Oracle PL/SQL Programming with Packages"><META
NAME="DC.Type"
CONTENT="Text.Monograph"><META
NAME="generator"
CONTENT="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><LINK
REL="stylesheet"
TYPE="text/css"
HREF="../style/style1.css"><LINK
REV="made"
HREF="mailto:online-books@oreilly.com"
TITLE="Online Books Comments"><LINK
REL="up"
HREF="ch02_01.htm"
TITLE="2. Best Practices for Packages"><LINK
REL="prev"
HREF="ch02_03.htm"
TITLE="2.3 Selecting Package Names"><LINK
REL="next"
HREF="ch02_05.htm#ch02-SECT-5.3"
TITLE="2.5 Constructing the Optimal Interface to Your Package"></HEAD>
<BODY><DIV CLASS="htmlnav"
><H1
><IMG
SRC="gifs/smbanner.gif"
ALT="Advanced Oracle PL/SQL Programming with Packages"
USEMAP="#srchmap"
BORDER="0"></H1
><MAP
NAME="srchmap"
><AREA
SHAPE="RECT"
COORDS="0,0,466,65"
HREF="index.htm"
ALT="Advanced Oracle PL/SQL Programming with Packages"><AREA
SHAPE="RECT"
COORDS="467,0,514,18"
HREF="jobjects/fsearch.htm"
ALT="Search this book"></MAP
><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch02_03.htm"
TITLE="2.3 Selecting Package Names"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 2.3 Selecting Package Names"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><SPAN
CLASS="NAVTITLE"
><A
CLASS="chapter"
REL="up"
HREF="ch02_01.htm"
TITLE="2. Best Practices for Packages"
>Chapter 2<BR>Best Practices for Packages</A
></SPAN
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch02_05.htm#ch02-SECT-5.3"
TITLE="2.5 Constructing the Optimal Interface to Your Package"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 2.5 Constructing the Optimal Interface to Your Package"
BORDER="0"></A
></TD
></TR
></TABLE
>&nbsp;<HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"></DIV
><DIV
CLASS="sect1"
><H2
CLASS="sect1"
><A
CLASS="title"
NAME="ch02-26385"
>2.4 Organizing Package Source Code</A
></H2
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="ch02-idx-999959-0"
></A
><A
CLASS="indexterm"
NAME="ch02-idx-999959-1"
></A
><A
CLASS="indexterm"
NAME="ch02-idx-999959-2"
></A
>Most Oracle shops still rely on SQL*Plus to create and compile <SPAN
CLASS="acronym"
>PL/SQL</SPAN
> programs. This means that the source code resides in one or more operating system files. To avoid losing control of that source, you should adopt some simple conventions for the extensions of your files. The approach I have taken is shown in the table below.</P
><TABLE
CLASS="informaltable"
BORDER="1"
CELLPADDING="3"
><THEAD
CLASS="thead"
><TR
CLASS="row"
VALIGN="TOP"
><TH
CLASS="entry"
ALIGN="LEFT"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>File Extension</P
></TH
><TH
CLASS="entry"
ALIGN="LEFT"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>Description</P
></TH
></TR
></THEAD
><TBODY
CLASS="tbody"
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
><KBD
CLASS="command"
>procname</KBD
><I
CLASS="function"
>.sp</I
></P
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>The definition of a stored procedure.</P
></TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
><KBD
CLASS="command"
>funcname</KBD
><I
CLASS="function"
>.sf</I
></P
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>The definition of a stored function.</P
></TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
><KBD
CLASS="command"
>pkgname</KBD
><I
CLASS="function"
>.spp</I
></P
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>A stored package definition that contains the code for both the package specification and the package body.</P
></TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
><KBD
CLASS="command"
>pkgname</KBD
><I
CLASS="function"
>.sps</I
></P
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>The definition of a stored package specification only.</P
></TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
><KBD
CLASS="command"
>pkgname</KBD
><I
CLASS="function"
>.spb</I
></P
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>The definition of a stored package body only.</P
></TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
><KBD
CLASS="command"
>scriptname</KBD
><I
CLASS="function"
>.sql</I
></P
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>An anonymous <SPAN
CLASS="acronym"
>PL/SQL</SPAN
> block or a SQL*Plus script (<SPAN
CLASS="acronym"
>SQL</SPAN
> statement plus SQL*Plus commands).</P
></TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
><KBD
CLASS="command"
>procname</KBD
><I
CLASS="function"
>.wp</I
></P
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>The wrapped[<A
CLASS="footnote"
HREF="#ch02-pgfId-997045"
>2</A
>] definition of a stored procedure.</P
></TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
><KBD
CLASS="command"
>funcname</KBD
><I
CLASS="function"
>.wf</I
></P
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>The wrapped definition of a stored function.</P
></TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
><KBD
CLASS="command"
>pkgname</KBD
><I
CLASS="function"
>.wpp</I
></P
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>A stored package definition that contains the wrapped code for both the package specification and the package body.</P
></TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
><KBD
CLASS="command"
>pkgname</KBD
><I
CLASS="function"
>.wps</I
></P
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>The wrapped definition of a stored package specification only.</P
></TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
><KBD
CLASS="command"
>pkgname</KBD
><I
CLASS="function"
>.wpb</I
></P
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>The wrapped definition of a stored package body only.</P
></TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
><KBD
CLASS="command"
>scriptname</KBD
><I
CLASS="function"
>.sql</I
></P
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>An anonymous <SPAN
CLASS="acronym"
>PL/SQL</SPAN
> block or a SQL*Plus script (<SPAN
CLASS="acronym"
>SQL</SPAN
> statement plus SQL*Plus commands).</P
></TD
></TR
></TBODY
></TABLE
><BLOCKQUOTE
CLASS="footnote"
><DIV
CLASS="footnote"
><P
CLASS="para"
><A
CLASS="footnote"
NAME="ch02-pgfId-997045"
>[2]</A
> As of <SPAN
CLASS="acronym"
>PL/SQL</SPAN
> Release 2.2, you can "wrap" your <SPAN
CLASS="acronym"
>PL/SQL</SPAN
> source code into an encrypted format. This format can be compiled into the database, but is not readable. Wrapped code is primarily of value to third-party vendors who provide <SPAN
CLASS="acronym"
>PL/SQL</SPAN
>-based applications, but are not interested in letting the competition see how they built their applications.</P
></DIV
></BLOCKQUOTE
><P
CLASS="para"
>With your code separated and easily identified in this manner, you will be able to locate and maintain it more easily. You can fine-tune these extensions even more. For example, I often use the ".tab" extension for SQL*Plus Data Definition Language (DDL) scripts that create tables. The most important aspect of these naming conventions is the implied separation of package specification and body (<KBD
CLASS="command"
>sps</KBD
> and <KBD
CLASS="command"
>spb</KBD
>). </P
><P
CLASS="para"
>There are two advantages to creating and compiling specifications and bodies separately:</P
><UL
CLASS="itemizedlist"
><LI
CLASS="listitem"
><P
CLASS="para"
><EM
CLASS="emphasis"
>Minimize the need to recompile programs.</EM
> If you <A
CLASS="indexterm"
NAME="ch02-idx-999965-0"
></A
><A
CLASS="indexterm"
NAME="ch02-idx-999965-1"
></A
>recompile a package specification, then any program that references an element in that package will need to be recompiled (its status in the USER_OBJECTS view is set to INVALID). If you recompile only the body, on the other hand, none of the programs calling that package's element are set to invalid. So if you change a package's body and not its specification, you should not recompile the specification&nbsp;-- which means that you should keep those elements of the package in different files.</P
></LI
><LI
CLASS="listitem"
><P
CLASS="para"
><EM
CLASS="emphasis"
>Allow different packages to depend upon each other.</EM
> This codependency of packages is explored below.</P
></LI
></UL
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch02-SECT-4.1"
>2.4.1 Creating Codependent Packages</A
></H3
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="ch02-idx-999970-0"
></A
><A
CLASS="indexterm"
NAME="ch02-idx-999970-1"
></A
><A
CLASS="indexterm"
NAME="ch02-idx-999970-2"
></A
>Codependency is not just an issue for psychologists and the self-help publishing industry. It can also rear its ugly head with <SPAN
CLASS="acronym"
>PL/SQL</SPAN
> packages. Suppose that package A calls a program in package B, and that package B calls a program in package A. These two packages depend on each other. How can one be defined before the other? How can either or both of these packages be made to compile? Simple: define all specifications and then define all bodies.</P
><P
CLASS="para"
>I ran into this codependency problem just before I was to give a class on packages. I planned to give out a copy of PL/Vision Lite and started work on an installation disk. Most of my packages were stored in <KBD
CLASS="command"
>spp</KBD
> files. The package specification and body were, in other words, stored in the same file. So I placed calls to execute all of these scripts in my installation file and tested the process in a fresh (of PL/Vision) Oracle account. The installation failed miserably and I couldn't understand the problem. I was able to compile any of these individual packages in my existing PL/Vision account (PLV) without any difficulty. </P
><P
CLASS="para"
>Suddenly, I realized the problem: when I compiled a package in my PLV account, it could reference the other packages that already existed. The package would, as a result, compile successfully. In an account with no preexisting PL/Vision code, however, when I tried to compile the <I
CLASS="function"
>p</I
> package body (a very basic package used by almost every other package in PL/Vision), it could not find the PLVprs package, which was not yet defined because it referenced the <I
CLASS="function"
>p</I
> package (among others). PLVprs was compiled later in the installation script.</P
><P
CLASS="para"
>For about five minutes I despaired. Had I constructed a product that wasn't even capable of installing? Then I came to my senses. The package specification and body do not have to be compiled together. And if the <I
CLASS="function"
>p</I
> package relies on the PLVprs package, it only requires the package <EM
CLASS="emphasis"
>specification</EM
> for PLVprs to be in place. The <SPAN
CLASS="acronym"
>PL/SQL</SPAN
> compiler only needs to know, in other words, that the <I
CLASS="function"
>p.l</I
> procedure is calling <KBD
CLASS="command"
>PLVprs.display_wrap</KBD
> properly&nbsp;-- and that information is contained in the specification. I didn't have a faulty product. I had a faulty installation script!</P
><P
CLASS="para"
>Take a look at the <KBD
CLASS="command"
>PLVinst.sql</KBD
> file on your disk. This SQL*Plus script now installs the PL/Vision packages in a more sensible fashion. You will see that there are two phases to the installation of PL/Vision: first, all the package specifications are created, and then package body creation scripts are executed. In this way, I can leverage all the different, handy elements of PL/Vision in other parts of the product.</P
><P
CLASS="para"
>I learned from this experience that I should <EM
CLASS="emphasis"
>always</EM
> separate the scripts for the creation of the package specification and body, even if the packages are very short and simple.</P
><BLOCKQUOTE
CLASS="note"
><P
CLASS="para"
><STRONG
>NOTE:</STRONG
>  This separation of specification and body will not work in all codependent situations. If the specification of package A references an element in package B, and the specification of package B references an element in package A, you will <EM
CLASS="emphasis"
>not</EM
> be able to compile these two packages. Each specification requires the other specification to be previously defined, which simply isn't possible.</P
></BLOCKQUOTE
></DIV
></DIV
><DIV
CLASS="htmlnav"
><P
></P
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch02_03.htm"
TITLE="2.3 Selecting Package Names"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 2.3 Selecting Package Names"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="book"
HREF="index.htm"
TITLE="Advanced Oracle PL/SQL Programming with Packages"
><IMG
SRC="../gifs/txthome.gif"
ALT="Advanced Oracle PL/SQL Programming with Packages"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch02_05.htm#ch02-SECT-5.3"
TITLE="2.5 Constructing the Optimal Interface to Your Package"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 2.5 Constructing the Optimal Interface to Your Package"
BORDER="0"></A
></TD
></TR
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
>2.3 Selecting Package Names</TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="index"
HREF="index/idx_0.htm"
TITLE="Book Index"
><IMG
SRC="../gifs/index.gif"
ALT="Book Index"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
>2.5 Constructing the Optimal Interface to Your Package</TD
></TR
></TABLE
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"></DIV
><IMG
SRC="../gifs/smnavbar.gif"
USEMAP="#map"
BORDER="0"
ALT="The Oracle Library Navigation">

<P><font size="-1">
<a href="../copyrght.htm#copy">Copyright (c) 2000</a> O'Reilly & Associates. All rights reserved.
</font></P>

<MAP NAME="map">

<AREA SHAPE="RECT"
COORDS="0,0,35,30"
HREF="../index.htm"
ALT="Library Home">

<AREA SHAPE="RECT"
COORDS="40,0,95,30"
HREF="../prog2/index.htm"
ALT="Oracle PL/SQL Programming, 2nd. Ed.">

<AREA SHAPE="RECT"
COORDS="100,0,200,30"
HREF="../guide8i/index.htm"
ALT="Guide to Oracle 8i Features">

<AREA SHAPE="RECT"
COORDS="205,0,245,30"
HREF="../bipack/index.htm"
ALT="Oracle Built-in Packages">

<AREA SHAPE="RECT"
COORDS="250,0,320,30"
HREF="index.htm"
ALT="Advanced PL/SQL Programming with Packages">

<AREA SHAPE="RECT"
COORDS="325,0,420,30"
HREF="../webapp/index.htm"
ALT="Oracle Web Applications">

<AREA SHAPE="RECT"
COORDS="425,0,490,30"
HREF="../langpkt/index.htm"
ALT="Oracle PL/SQL Language Pocket Reference">

<AREA SHAPE="RECT"
COORDS="495,0,570,30"
HREF="../bipkt/index.htm"
ALT="Oracle PL/SQL Built-ins Pocket Reference">
</MAP>
</BODY
>
<!-- Mirrored from liso.cs.pusan.ac.kr by HTTrack Website Copier/3.x [XR&CO'2001] -->
</HTML
>
