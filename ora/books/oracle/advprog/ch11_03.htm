<HTML
><HEAD
><TITLE
>[Chapter 11] 11.3 Setting the Current Object</TITLE
><META
NAME="DC.Creator"
CONTENT="Steven Feuerstein"><META
NAME="DC.Date"
CONTENT="2000-04-29T18:27:24Z"><META
NAME="DC.Format"
CONTENT="text/html"
SCHEME="MIME"><META
NAME="DC.Identifier"
CONTENT="O'Reilly and Associates-1-56592-238-7E"><META
NAME="DC.Language"
CONTENT="en-US"><META
NAME="DC.Publisher"
CONTENT="O'Reilly &amp; Associates, Inc."><META
NAME="DC.Source"
CONTENT="1-56592-238-7E"
SCHEME="ISBN"><META
NAME="DC.Subject.Keyword"
CONTENT="PL/SQL SQL Oracle Packages"><META
NAME="DC.Title"
CONTENT="Advanced Oracle PL/SQL Programming with Packages"><META
NAME="DC.Type"
CONTENT="Text.Monograph"><META
NAME="generator"
CONTENT="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><LINK
REL="stylesheet"
TYPE="text/css"
HREF="../style/style1.css"><LINK
REV="made"
HREF="mailto:online-books@oreilly.com"
TITLE="Online Books Comments"><LINK
REL="up"
HREF="ch11_01.htm"
TITLE="11.  PLVobj: A Packaged Interface to ALL_OBJECTS"><LINK
REL="prev"
HREF="ch11_02.htm"
TITLE="11.2 ALL_OBJECTS View"><LINK
REL="next"
HREF="ch11_04.htm"
TITLE="11.4 Accessing ALL_OBJECTS "></HEAD>
<BODY><DIV CLASS="htmlnav"
><H1
><IMG
SRC="gifs/smbanner.gif"
ALT="Advanced Oracle PL/SQL Programming with Packages"
USEMAP="#srchmap"
BORDER="0"></H1
><MAP
NAME="srchmap"
><AREA
SHAPE="RECT"
COORDS="0,0,466,65"
HREF="index.htm"
ALT="Advanced Oracle PL/SQL Programming with Packages"><AREA
SHAPE="RECT"
COORDS="467,0,514,18"
HREF="jobjects/fsearch.htm"
ALT="Search this book"></MAP
><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch11_02.htm"
TITLE="11.2 ALL_OBJECTS View"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 11.2 ALL_OBJECTS View"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><SPAN
CLASS="NAVTITLE"
><A
CLASS="chapter"
REL="up"
HREF="ch11_01.htm"
TITLE="11.  PLVobj: A Packaged Interface to ALL_OBJECTS"
>Chapter 11<BR> PLVobj: A Packaged Interface to ALL_OBJECTS</A
></SPAN
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch11_04.htm"
TITLE="11.4 Accessing ALL_OBJECTS "
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 11.4 Accessing ALL_OBJECTS "
BORDER="0"></A
></TD
></TR
></TABLE
>&nbsp;<HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"></DIV
><DIV
CLASS="sect1"
><H2
CLASS="sect1"
><A
CLASS="title"
NAME="ch11-30842"
>11.3 Setting the Current Object</A
></H2
><P
CLASS="para"
><KBD
CLASS="command"
>PLVobj</KBD
> provides a number of different programs to set and change the current object of <KBD
CLASS="command"
>PLVobj</KBD
>. The current object of <KBD
CLASS="command"
>PLVobj</KBD
> is defined by three private package variables:</P
><DL
CLASS="variablelist"
><DT
CLASS="term"
><CODE
CLASS="literal"
> v_currschema</CODE
><A
CLASS="indexterm"
NAME="ch11-idx-998799-0"
></A
></DT
><DD
CLASS="listitem"
><P
CLASS="para"
>The owner of the object(s).</P
></DD
><DT
CLASS="term"
><CODE
CLASS="literal"
> v_currname</CODE
><A
CLASS="indexterm"
NAME="ch11-idx-998800-0"
></A
></DT
><DD
CLASS="listitem"
><P
CLASS="para"
>The name of the object(s). The name can be wildcarded, by including % in the name specified.</P
></DD
><DT
CLASS="term"
><CODE
CLASS="literal"
> v_currtype</CODE
><A
CLASS="indexterm"
NAME="ch11-idx-998801-0"
></A
></DT
><DD
CLASS="listitem"
><P
CLASS="para"
>The type of the object(s). The type can be wildcarded as well, again by including % in the type specified.</P
></DD
></DL
><P
CLASS="para"
>Since the above elements are private variables, a user of <KBD
CLASS="command"
>PLVobj</KBD
> will never see or reference these variables directly. Instead, I provide the following set of procedures and functions to maintain these variables (I call this layer of code which surrounds variables "get and set" routines): <KBD
CLASS="command"
>setcurr</KBD
>, <KBD
CLASS="command"
>set_name</KBD
>, <KBD
CLASS="command"
>set_type</KBD
>, and <KBD
CLASS="command"
>set_schema</KBD
>.</P
><P
CLASS="para"
>The <KBD
CLASS="command"
>setcurr</KBD
><A
CLASS="indexterm"
NAME="ch11-idx-998802-0"
></A
> program calls the other set programs. Its header is:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>PROCEDURE setcurr
   (name_in IN VARCHAR2, type_in IN VARCHAR2 := NULL);</PRE
></BLOCKQUOTE
><P
CLASS="para"
>The first argument is the module name, the second, optional argument is the module type. While the first argument is called a "name" argument, you can actually in this single argument supply the name, type, and schema. <KBD
CLASS="command"
>PLVobj</KBD
> makes it as easy as possible to supply this information. All of the following formats for the <KBD
CLASS="command"
>name_in</KBD
> argument are acceptable:</P
><DL
CLASS="variablelist"
><DT
CLASS="term"
><CODE
CLASS="literal"
> name</CODE
></DT
><DD
CLASS="listitem"
><P
CLASS="para"
>An unqualified identifier. In this case, PLVobj determines the type of the object from the data dictionary. This type will be unambiguous if name refers to a procedure or function. If a package, then the type could be either PACKAGE or PACKAGE BODY. PLVobj defaults to PACKAGE.</P
></DD
><DT
CLASS="term"
><CODE
CLASS="literal"
> schema.name</CODE
></DT
><DD
CLASS="listitem"
><P
CLASS="para"
>The name of the object is qualified by the schema name. You will need to specify the schema name if you want to convert the case of a program owned by another user.</P
></DD
><DT
CLASS="term"
><CODE
CLASS="literal"
> type:name</CODE
></DT
><DD
CLASS="listitem"
><P
CLASS="para"
>Both the type and the name are specified, separated by a colon. Valid type strings for each type of program unit are shown below.</P
></DD
><DT
CLASS="term"
><CODE
CLASS="literal"
> type:schema.name</CODE
></DT
><DD
CLASS="listitem"
><P
CLASS="para"
>In this case, the user has specified all three elements of a program unit: the type of the program, the owner, and the name.</P
></DD
></DL
><P
CLASS="para"
>In fact, the second argument is optional because <KBD
CLASS="command"
>PLVobj</KBD
> allows you to concatenate the type onto the name argument. </P
><P
CLASS="para"
>The following table shows different ways of specifying programs and the resulting <KBD
CLASS="command"
>PLVobj</KBD
> current object values. In this table, <KBD
CLASS="command"
>pkg</KBD
> is the name of a package, <KBD
CLASS="command"
>func</KBD
> the name of a function, and <KBD
CLASS="command"
>proc</KBD
> the name of a procedure. The <KBD
CLASS="command"
>setcurr</KBD
> program is executed from the PLV account.</P
><TABLE
CLASS="informaltable"
BORDER="1"
CELLPADDING="3"
><THEAD
CLASS="thead"
><TR
CLASS="row"
VALIGN="TOP"
><TH
CLASS="entry"
ALIGN="LEFT"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>Call to setcurr</P
></TH
><TH
CLASS="entry"
ALIGN="LEFT"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>Schema</P
></TH
><TH
CLASS="entry"
ALIGN="LEFT"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>Program Type</P
></TH
><TH
CLASS="entry"
ALIGN="LEFT"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>Program Name</P
></TH
></TR
></THEAD
><TBODY
CLASS="tbody"
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
> <BLOCKQUOTE
><PRE
CLASS="programlisting"
>PLVobj.setcurr ('proc');</PRE
></BLOCKQUOTE
> </TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
><SPAN
CLASS="acronym"
>PLV</SPAN
></P
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
><SPAN
CLASS="acronym"
>PROCEDURE</SPAN
></P
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
> <BLOCKQUOTE
><PRE
CLASS="programlisting"
>proc</PRE
></BLOCKQUOTE
> </TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
> <BLOCKQUOTE
><PRE
CLASS="programlisting"
>PLVobj.setcurr ('func');</PRE
></BLOCKQUOTE
> </TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
><SPAN
CLASS="acronym"
>PLV</SPAN
></P
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
><SPAN
CLASS="acronym"
>FUNCTION</SPAN
></P
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
> <BLOCKQUOTE
><PRE
CLASS="programlisting"
>func</PRE
></BLOCKQUOTE
> </TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
> <BLOCKQUOTE
><PRE
CLASS="programlisting"
>PLVobj.setcurr ('pkg');</PRE
></BLOCKQUOTE
> </TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
><SPAN
CLASS="acronym"
>PLV</SPAN
></P
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
><SPAN
CLASS="acronym"
>PACKAGE</SPAN
></P
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
> <BLOCKQUOTE
><PRE
CLASS="programlisting"
>pkg</PRE
></BLOCKQUOTE
> </TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
> <BLOCKQUOTE
><PRE
CLASS="programlisting"
>PLVobj.setcurr ('b:pkg');</PRE
></BLOCKQUOTE
> </TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
><SPAN
CLASS="acronym"
>PLV</SPAN
></P
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
><SPAN
CLASS="acronym"
>PACKAGE BODY</SPAN
></P
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
> <BLOCKQUOTE
><PRE
CLASS="programlisting"
>pkg</PRE
></BLOCKQUOTE
> </TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
> <BLOCKQUOTE
><PRE
CLASS="programlisting"
>PLVobj.setcurr ('body:pkg');</PRE
></BLOCKQUOTE
> </TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
><SPAN
CLASS="acronym"
>PLV</SPAN
></P
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
><SPAN
CLASS="acronym"
>PACKAGE BODY</SPAN
></P
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
> <BLOCKQUOTE
><PRE
CLASS="programlisting"
>pkg</PRE
></BLOCKQUOTE
> </TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
> <BLOCKQUOTE
><PRE
CLASS="programlisting"
>PLVobj.setcurr ('s:SCOTT.empmaint');</PRE
></BLOCKQUOTE
> </TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
><SPAN
CLASS="acronym"
>SCOTT</SPAN
></P
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
><SPAN
CLASS="acronym"
>PACKAGE</SPAN
></P
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
> <BLOCKQUOTE
><PRE
CLASS="programlisting"
>empmaint</PRE
></BLOCKQUOTE
> </TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
> <BLOCKQUOTE
><PRE
CLASS="programlisting"
>PLVobj.setcurr ('%:plv%');</PRE
></BLOCKQUOTE
> </TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
><SPAN
CLASS="acronym"
>PLV</SPAN
></P
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
><SPAN
CLASS="acronym"
>ALL TYPES</SPAN
></P
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
> <BLOCKQUOTE
><PRE
CLASS="programlisting"
>Like PLV%</PRE
></BLOCKQUOTE
> </TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
> <BLOCKQUOTE
><PRE
CLASS="programlisting"
>PLVobj.setcurr ('s:scott.% ');</PRE
></BLOCKQUOTE
> </TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
><SPAN
CLASS="acronym"
>SCOTT</SPAN
></P
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
><SPAN
CLASS="acronym"
>PACKAGE </SPAN
></P
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
> <BLOCKQUOTE
><PRE
CLASS="programlisting"
>All present</PRE
></BLOCKQUOTE
> </TD
></TR
></TBODY
></TABLE
><P
CLASS="para"
>The above table assumes, by the way, that the PLV account has execute authority on SCOTT's <KBD
CLASS="command"
>empmaint</KBD
> package.</P
><P
CLASS="para"
>Notice that when I specify a function or procedure, I do not have to provide the type at all. There can only be one object of a given name in a schema, and the <KBD
CLASS="command"
>object_type</KBD
> is therefore unambiguously set to PROCEDURE. On the other hand, when I am working with packages, the situation is more ambiguous. A package can have up to two objects: the specification and the body. So if you provide a package name but do not supply a type, PLVobj will set the current type to PACKAGE. If you want to set the current object to a package body, you must supply a valid object type or object type abbreviation.</P
><P
CLASS="para"
>Here are the valid options for object type:</P
><TABLE
CLASS="informaltable"
BORDER="1"
CELLPADDING="3"
><THEAD
CLASS="thead"
><TR
CLASS="row"
VALIGN="TOP"
><TH
CLASS="entry"
ALIGN="LEFT"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>Program Type</P
></TH
><TH
CLASS="entry"
ALIGN="LEFT"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>Valid Entries for Type in Call to setcurr</P
></TH
></TR
></THEAD
><TBODY
CLASS="tbody"
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>Package Specification</P
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
><KBD
CLASS="command"
>S PS SPEC</KBD
> or <KBD
CLASS="command"
>SPECIFICATION</KBD
></P
></TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>Package Body</P
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
><KBD
CLASS="command"
>B PB BODY</KBD
> or <KBD
CLASS="command"
>PACKAGE BODY</KBD
></P
></TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>Procedure</P
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
><KBD
CLASS="command"
>P PROC</KBD
> or <KBD
CLASS="command"
>PROCEDURE</KBD
></P
></TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>Function</P
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
><KBD
CLASS="command"
>F FUNC</KBD
> or <KBD
CLASS="command"
>FUNCTION</KBD
></P
></TD
></TR
></TBODY
></TABLE
><P
CLASS="para"
>So I can set the current object to the PACKAGE BODY of the <KBD
CLASS="command"
>testcase</KBD
> package with any of the following calls to <KBD
CLASS="command"
>setcurr</KBD
>:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>PLVobj.setcurr ('b:testcase');
PLVobj.setcurr ('pb:testcase');
PLVobj.setcurr ('body:testcase');
PLVobj.setcurr ('package body:testcase');</PRE
></BLOCKQUOTE
><BLOCKQUOTE
CLASS="note"
><P
CLASS="para"
><STRONG
>NOTE:</STRONG
>  The <KBD
CLASS="command"
>setcurr</KBD
> program relies on DBMS_UTILITY.NAME_RESOLVE to uncover all the components of a non-wildcarded object entry. This builtin only returns non-NULL values for <SPAN
CLASS="acronym"
>PL/SQL</SPAN
> stored code elements. Consequently, you cannot use <KBD
CLASS="command"
>setcurr</KBD
> to set the current object to non-<SPAN
CLASS="acronym"
>PL/SQL</SPAN
> elements such as tables and indexes. Instead, you will need to call the individual set programs explored in the next section.<A
CLASS="indexterm"
NAME="ch11-idx-998803-0"
></A
></P
></BLOCKQUOTE
><P
CLASS="para"
>You can use the <KBD
CLASS="command"
>PLVobj.setcurr</KBD
> program to convert your entry and set the current object accordingly. In some cases, however, you may want simply to change the current object type. Or you may want to take advantage of the parsing and conversion algorithms of PLVobj without actually changing the current object. To provide this flexibility, PLVobj offers a number of additional programs which are explained below.</P
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch11-SECT-3.1"
>11.3.1 Setting Individual Elements of Current Object</A
></H3
><P
CLASS="para"
>You can change the current schema, name, or type independently with the set programs. You can also retrieve the current object values with corresponding functions. The "get and set" programs are shown below:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>PROCEDURE <A
CLASS="indexterm"
NAME="ch11-idx-998804-0"
></A
>set_schema (schema_in IN VARCHAR2 := USER);
FUNCTION <A
CLASS="indexterm"
NAME="ch11-idx-998807-0"
></A
>currschema RETURN VARCHAR2;
PROCEDURE <A
CLASS="indexterm"
NAME="ch11-idx-998805-0"
></A
>set_type (type_in IN VARCHAR2);
FUNCTION <A
CLASS="indexterm"
NAME="ch11-idx-998808-0"
></A
>currtype RETURN VARCHAR2;

PROCEDURE <A
CLASS="indexterm"
NAME="ch11-idx-998806-0"
></A
>set_name (name_in IN VARCHAR2);
FUNCTION <A
CLASS="indexterm"
NAME="ch11-idx-998809-0"
></A
>currname RETURN VARCHAR2;</PRE
></BLOCKQUOTE
><P
CLASS="para"
>I use these programs in the <KBD
CLASS="command"
>PLVvu.err</KBD
><A
CLASS="indexterm"
NAME="ch11-idx-998810-0"
></A
> procedure, which displays compile errors for the specified program. The main body of <KBD
CLASS="command"
>err</KBD
> is shown below:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>PLVobj.setcurr (name_in);
IF PLVobj.currtype = PLVobj.c_package AND
   INSTR (name_in, ':') = 0
THEN
   /* Show errors for package spec, then body. */
   show_errors;
   PLVobj.set_type (PLVobj.c_package_body);
   show_errors (TRUE);
ELSE
   show_errors (TRUE);
END IF;</PRE
></BLOCKQUOTE
><P
CLASS="para"
>Translation: I call the <KBD
CLASS="command"
>setcurr</KBD
> procedure to set the current object. Then I call <KBD
CLASS="command"
>currtype</KBD
> to see if the program type is PACKAGE. If it is, I need to check to see if the developer has requested to see errors for just the package specification or both specification and body. If both were requested (there is no colon in the name, therefore no type specified), then I show errors for the specification, explicitly set the type to PACKAGE BODY&nbsp;-- overriding the existing value&nbsp;-- and then show errors for the body.</P
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch11-SECT-3.2"
>11.3.2 Converting the Program Name</A
></H3
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="ch11-idx-998811-0"
></A
><A
CLASS="indexterm"
NAME="ch11-idx-998811-1"
></A
><A
CLASS="indexterm"
NAME="ch11-idx-998811-2"
></A
><A
CLASS="indexterm"
NAME="ch11-idx-998811-3"
></A
><A
CLASS="indexterm"
NAME="ch11-idx-998811-4"
></A
>All the logic to convert a string into the separate components of schema, name, and type are handled by the <KBD
CLASS="command"
>convobj</KBD
> program, whose header is shown below:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>PROCEDURE convobj
   (name_inout IN OUT VARCHAR2, 
    type_inout IN OUT VARCHAR2,
    schema_inout IN OUT VARCHAR2);</PRE
></BLOCKQUOTE
><P
CLASS="para"
>All three arguments of <KBD
CLASS="command"
>convobj</KBD
> are IN OUT parameters, so that you can provide a value and also have a value sent back for each of the components of an object.</P
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="ch11-idx-998813-0"
></A
><A
CLASS="indexterm"
NAME="ch11-idx-998813-1"
></A
>The logic inside <KBD
CLASS="command"
>convobj</KBD
> is complex. If the name or type passed in to <KBD
CLASS="command"
>convobj</KBD
> contains a wildcard, those wildcarded strings are returned (in their separate components) by the procedure. If, on the other hand, no wildcards are present, <KBD
CLASS="command"
>convobj</KBD
> relies on the DBMS_UTILITY.NAME_RESOLVE builtin procedure to automatically resolve the program name into its individual components. </P
><P
CLASS="para"
>NAME_RESOLVE resolves the specified object name into the owner or schema, first name, second name (if in a package), program type, and database link if any. The program type is one of the following numbers: </P
><DL
CLASS="variablelist"
><DT
CLASS="term"
>5</DT
><DD
CLASS="listitem"
><P
CLASS="para"
>(synonym)</P
></DD
><DT
CLASS="term"
>7</DT
><DD
CLASS="listitem"
><P
CLASS="para"
>(procedure)</P
></DD
><DT
CLASS="term"
>8</DT
><DD
CLASS="listitem"
><P
CLASS="para"
>(function)</P
></DD
><DT
CLASS="term"
>9</DT
><DD
CLASS="listitem"
><P
CLASS="para"
>(package)</P
></DD
></DL
><P
CLASS="para"
>NAME_RESOLVE is so useful because it automatically determines the appropriate schema of the named element you pass in. Notice that NAME_RESOLVE does not distinguish between a package body and its specification (they both have the same name, so that would be something of a challenge). The <KBD
CLASS="command"
>nameres.sql</KBD
> script in the <EM
CLASS="emphasis"
>plvision\use</EM
> subdirectory provides an easy way to call and see the results from DBMS_UTILITY.NAME_RESOLVE. </P
><P
CLASS="para"
>You can call <KBD
CLASS="command"
>convobj</KBD
> when you want to convert a name to its different components without changing the current object in the PLVobj package. I do this, for example, in the <KBD
CLASS="command"
>setcase.sql</KBD
> script, which provides an easy-to-use frontend to PLVcase for case conversion of your code. I call <KBD
CLASS="command"
>PLVobj.convobj</KBD
> even before I call any PLVcase programs because I want to display the program you have just requested for conversion. This code is shown below:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>PLVobj.convobj (modname, modtype, modschema);
modstring := modtype || ' ' || modname;
p.l ('=========================');
p.l ('PL/Vision Case Conversion');
p.l ('=========================');
p.l ('Converting ' || modstring || '..');</PRE
></BLOCKQUOTE
><P
CLASS="para"
>The PLVobj package also offers a <KBD
CLASS="command"
>convert_type</KBD
><A
CLASS="indexterm"
NAME="ch11-idx-998814-0"
></A
> procedure, which encapsulates the logic by which it converts any number of different abbreviations and strings to a valid object type for the ALL_OBJECTS view. The header for <KBD
CLASS="command"
>convert_type</KBD
> is as follows:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>PROCEDURE convert_type (type_inout IN OUT VARCHAR2);</PRE
></BLOCKQUOTE
><P
CLASS="para"
>You pass it a string and it changes that screen to a valid type.</P
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch11-SECT-3.3"
>11.3.3 Displaying the Current Object</A
></H3
><P
CLASS="para"
>PLVobj provides the <KBD
CLASS="command"
>showcurr</KBD
><A
CLASS="indexterm"
NAME="ch11-idx-998815-0"
></A
> procedure to display the current object. Its header is:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>PROCEDURE showcurr (show_header_in IN BOOLEAN := TRUE);</PRE
></BLOCKQUOTE
><P
CLASS="para"
>You can display the current object with a header (the default) or without, in which case you will simply see the schema, name, and type (note that this full name is constructed with a call to the <KBD
CLASS="command"
>fullname</KBD
> function, also available for your use). Some examples follow:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>SQL&gt; exec PLVobj.set_name ('PLVctlg');
SQL&gt; exec PLVobj.set_type ('table);
SQL&gt; exec PLVobj.showcurr; -- Displays a header
Schema.Name.Type
-----------------------------------------
PLV.PLVCTLG.TABLE
SQL&gt; exec PLVobj.setcurr ('PLVio');
SQL&gt; exec PLVobj.showcurr (FALSE); -- Suppresses header
PLV.PLVIO.PACKAGE</PRE
></BLOCKQUOTE
><P
CLASS="para"
>The <KBD
CLASS="command"
>showobj1.sql</KBD
> SQL*Plus script uses <KBD
CLASS="command"
>showcurr</KBD
> to display all the objects specified by your input. This script is described below in the section called "Accessing ALL_OBJECTS<SPAN
CLASS="acronym"
>.</SPAN
>"</P
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch11-SECT-3.4"
>11.3.4 <A
CLASS="indexterm"
NAME="ch11-idx-998816-0"
></A
><A
CLASS="indexterm"
NAME="ch11-idx-998816-1"
></A
>Saving and Restoring the Current Object</A
></H3
><P
CLASS="para"
>PLVobj provides programs to both save the current object and restore it from the last save. The headers for these programs are shown below:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>PROCEDURE savecurr;
PROCEDURE restcurr;</PRE
></BLOCKQUOTE
><P
CLASS="para"
>You will want to use these programs if you are using PLVobj (in particular, the current object of PLVobj) more than once in a given program execution. Suppose, for example, that you have nested loops. In the outer loop, you call <KBD
CLASS="command"
>PLVobj.setcurr</KBD
> to scan through a set of program units. Inside the inner loop, you need to use <KBD
CLASS="command"
>PLVobj.setcurr</KBD
> to change the focus of activity to another object. When you are done with the inner loop execution, however, you will want to set the current object back to the outer loop values. </P
><P
CLASS="para"
>PL/Vision runs into this scenario because of the extensive work manipulating <SPAN
CLASS="acronym"
>PL/SQL</SPAN
> code objects. </P
></DIV
></DIV
><DIV
CLASS="htmlnav"
><P
></P
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch11_02.htm"
TITLE="11.2 ALL_OBJECTS View"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 11.2 ALL_OBJECTS View"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="book"
HREF="index.htm"
TITLE="Advanced Oracle PL/SQL Programming with Packages"
><IMG
SRC="../gifs/txthome.gif"
ALT="Advanced Oracle PL/SQL Programming with Packages"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch11_04.htm"
TITLE="11.4 Accessing ALL_OBJECTS "
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 11.4 Accessing ALL_OBJECTS "
BORDER="0"></A
></TD
></TR
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
>11.2 ALL_OBJECTS View</TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="index"
HREF="index/idx_0.htm"
TITLE="Book Index"
><IMG
SRC="../gifs/index.gif"
ALT="Book Index"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
>11.4 Accessing ALL_OBJECTS </TD
></TR
></TABLE
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"></DIV
><IMG
SRC="../gifs/smnavbar.gif"
USEMAP="#map"
BORDER="0"
ALT="The Oracle Library Navigation">

<P><font size="-1">
<a href="../copyrght.htm#copy">Copyright (c) 2000</a> O'Reilly & Associates. All rights reserved.
</font></P>

<MAP NAME="map">

<AREA SHAPE="RECT"
COORDS="0,0,35,30"
HREF="../index.htm"
ALT="Library Home">

<AREA SHAPE="RECT"
COORDS="40,0,95,30"
HREF="../prog2/index.htm"
ALT="Oracle PL/SQL Programming, 2nd. Ed.">

<AREA SHAPE="RECT"
COORDS="100,0,200,30"
HREF="../guide8i/index.htm"
ALT="Guide to Oracle 8i Features">

<AREA SHAPE="RECT"
COORDS="205,0,245,30"
HREF="../bipack/index.htm"
ALT="Oracle Built-in Packages">

<AREA SHAPE="RECT"
COORDS="250,0,320,30"
HREF="index.htm"
ALT="Advanced PL/SQL Programming with Packages">

<AREA SHAPE="RECT"
COORDS="325,0,420,30"
HREF="../webapp/index.htm"
ALT="Oracle Web Applications">

<AREA SHAPE="RECT"
COORDS="425,0,490,30"
HREF="../langpkt/index.htm"
ALT="Oracle PL/SQL Language Pocket Reference">

<AREA SHAPE="RECT"
COORDS="495,0,570,30"
HREF="../bipkt/index.htm"
ALT="Oracle PL/SQL Built-ins Pocket Reference">
</MAP>
</BODY
>
<!-- Mirrored from liso.cs.pusan.ac.kr by HTTrack Website Copier/3.x [XR&CO'2001] -->
</HTML
>
