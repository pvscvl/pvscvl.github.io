<HTML
><HEAD
><TITLE
>[Chapter 3] 3.7 Handling Program Assumptions</TITLE
><META
NAME="DC.Creator"
CONTENT="Steven Feuerstein"><META
NAME="DC.Date"
CONTENT="2000-04-29T18:23:04Z"><META
NAME="DC.Format"
CONTENT="text/html"
SCHEME="MIME"><META
NAME="DC.Identifier"
CONTENT="O'Reilly and Associates-1-56592-238-7E"><META
NAME="DC.Language"
CONTENT="en-US"><META
NAME="DC.Publisher"
CONTENT="O'Reilly &amp; Associates, Inc."><META
NAME="DC.Source"
CONTENT="1-56592-238-7E"
SCHEME="ISBN"><META
NAME="DC.Subject.Keyword"
CONTENT="PL/SQL SQL Oracle Packages"><META
NAME="DC.Title"
CONTENT="Advanced Oracle PL/SQL Programming with Packages"><META
NAME="DC.Type"
CONTENT="Text.Monograph"><META
NAME="generator"
CONTENT="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><LINK
REL="stylesheet"
TYPE="text/css"
HREF="../style/style1.css"><LINK
REV="made"
HREF="mailto:online-books@oreilly.com"
TITLE="Online Books Comments"><LINK
REL="up"
HREF="ch03_01.htm"
TITLE="3. The PL/SQL Development Spiral"><LINK
REL="prev"
HREF="ch03_06.htm"
TITLE="3.6 Building a Structured Function"><LINK
REL="next"
HREF="ch03_08.htm#ch03-SECT-8.1"
TITLE="3.8 Broadening the Scope"></HEAD>
<BODY><DIV CLASS="htmlnav"
><H1
><IMG
SRC="gifs/smbanner.gif"
ALT="Advanced Oracle PL/SQL Programming with Packages"
USEMAP="#srchmap"
BORDER="0"></H1
><MAP
NAME="srchmap"
><AREA
SHAPE="RECT"
COORDS="0,0,466,65"
HREF="index.htm"
ALT="Advanced Oracle PL/SQL Programming with Packages"><AREA
SHAPE="RECT"
COORDS="467,0,514,18"
HREF="jobjects/fsearch.htm"
ALT="Search this book"></MAP
><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch03_06.htm"
TITLE="3.6 Building a Structured Function"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 3.6 Building a Structured Function"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><SPAN
CLASS="NAVTITLE"
><A
CLASS="chapter"
REL="up"
HREF="ch03_01.htm"
TITLE="3. The PL/SQL Development Spiral"
>Chapter 3<BR>The PL/SQL Development Spiral</A
></SPAN
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch03_08.htm#ch03-SECT-8.1"
TITLE="3.8 Broadening the Scope"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 3.8 Broadening the Scope"
BORDER="0"></A
></TD
></TR
></TABLE
>&nbsp;<HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"></DIV
><DIV
CLASS="sect1"
><H2
CLASS="sect1"
><A
CLASS="title"
NAME="ch03-18437"
>3.7 Handling Program Assumptions</A
></H2
><P
CLASS="para"
>Now let's address the problem of <A
CLASS="indexterm"
NAME="ch03-idx-999781-0"
></A
><A
CLASS="indexterm"
NAME="ch03-idx-999781-1"
></A
><A
CLASS="indexterm"
NAME="ch03-idx-999781-2"
></A
><A
CLASS="indexterm"
NAME="ch03-idx-999781-3"
></A
><A
CLASS="indexterm"
NAME="ch03-idx-999781-4"
></A
>invalid action codes. You've already seen the downside: the user is not notified of an invalid entry; the program simply failed with -6503. With my latest version of <I
CLASS="function"
>twice</I
>, you no longer get the error. On the other hand, the function now returns the same value if you pass in a NULL string or if you pass in a bad action code. This is not a good way for a function to notify the user of errors. And that is because I do not explicitly handle an underlying assumption of my program.</P
><P
CLASS="para"
>Just about every piece of software you write makes assumptions about the data it manipulates. For example, parameters may have only certain values or must be within a certain range; a string value should have a certain format, or perhaps an underlying data structure is assumed to have been created. It's fine to have such rules and assumptions, but it is also very important to verify, or assert, that none of the rules are being violated. Because if you assume it and you don't check, your program can end up acting very strangely.</P
><P
CLASS="para"
>In the <I
CLASS="function"
>twice</I
> function, I assume that you, the user, know that you use <I
CLASS="function"
>UL</I
> for UPPER-lower, <I
CLASS="function"
>LU</I
> for lower-UPPER, and <I
CLASS="function"
>N</I
> for no case conversion. But how are you supposed to know this? You either have to see the source code, which is not always going to be possible or desirable, or you have to be given external documentation about the function. And even if you read the documentation on Monday, who says you are going to remember it on Friday?</P
><P
CLASS="para"
>If a low-level utility like <I
CLASS="function"
>twice</I
> is going to be successfully reused, it has to have the smarts built into it to check for bad actions and inform the user of the problem. The best way to do this is to assert that the incoming argument is correct. The following line of code asserts, for example, that the action code is correct. If not, it raises an exception.</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>IF v_action NOT IN ('UL', 'LU', 'N')
THEN
   RAISE VALUE_ERROR;
END IF;</PRE
></BLOCKQUOTE
><P
CLASS="para"
>If the action is valid, then <I
CLASS="function"
>twice</I
> would function as it normally does. Now if the action code is invalid, an exception is raised and no value is returned from the function. Is this a violation of my recommendation that a function always return a value? I would suggest that in this case an exception is more appropriate. The use of <I
CLASS="function"
>twice</I
> is invalid if it is not passed a valid code. In this context, it doesn't even make sense to continue processing. This is not the kind of error that occurs in production. My IF statement uncovers a design-level error in the code that must be corrected before you can even worry about data entry errors or other application-level concerns.</P
><P
CLASS="para"
>One problem with the <A
CLASS="indexterm"
NAME="ch03-idx-999785-0"
></A
>IF statement is that it doesn't really inform the user about the problem. It just raises a generic, system exception. I think that if you are going to assert assumptions, you should display some feedback when the assumption is not met. Furthermore, I suggest that instead of building IF statements like this throughout your code, you create a single <A
CLASS="indexterm"
NAME="ch03-idx-999786-0"
></A
>assert procedure like the one shown in <A
CLASS="xref"
HREF="ch03_07.htm"
>Example 3.5</A
>. This program accepts the Boolean expression that needs to be true and a string to be displayed in case of failure.</P
><DIV
CLASS="example"
><H4
CLASS="example"
><A
CLASS="title"
NAME="ch03-11475"
>Example 3.5: A Very Generic Assertion Routine </A
></H4
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>PROCEDURE assert
    (bool_in IN BOOLEAN, stg_in IN VARCHAR2 := NULL)
IS
BEGIN
   IF NOT bool_in OR bool_in IS NULL 
   THEN
      IF stg_in IS NOT NULL
      THEN
         DBMS_OUTPUT.PUT_LINE (stg_in);
      END IF;
      RAISE VALUE_ERROR;
   END IF;
END; </PRE
></BLOCKQUOTE
></DIV
><P
CLASS="para"
>With the <KBD
CLASS="command"
>assert</KBD
> routine added to my arsenal, I now have a very robust <I
CLASS="function"
>twice</I
> function (see <A
CLASS="xref"
HREF="ch03_07.htm"
>Example 3.6</A
>). If another codeveloper tries the same BS from an anonymous block in SQL*Plus, here is the feedback she will receive:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>Please enter UL LU or N
declare
 *
ERROR at line 1:
ORA-06502: PL/SQL: numeric or value error</PRE
></BLOCKQUOTE
><P
CLASS="para"
>With my assert program in place, I spend less time on telephone support for <I
CLASS="function"
>twice</I
>. And if someone does call, I will tell them to "RTFM!", as in: "Read The Fancy Message!"</P
><DIV
CLASS="example"
><H4
CLASS="example"
><A
CLASS="title"
NAME="ch03-18998"
>Example 3.6: Using an Assertion Routine Inside twice </A
></H4
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>CREATE OR REPLACE FUNCTION twice 
   (string_in IN VARCHAR2, 
    action_in IN VARCHAR2 DEFAULT 'N')
RETURN VARCHAR2
IS
   v_action VARCHAR2(10) := UPPER (action_in);   
   v_retval VARCHAR2(100);
BEGIN
   assert
      (v_action IN ('UL', 'LU', 'N'),
       'Please enter UL LU or N');
   IF v_action = 'UL'
   THEN
      v_retval := UPPER (string_in) || LOWER (string_in);      
      
   ELSIF v_action = 'LU'
   THEN
      v_retval := LOWER (string_in) || UPPER (string_in);      
      
   ELSIF v_action = 'N' 
   THEN
      v_retval := string_in || string_in;
   END IF; 
   RETURN v_retval;
END twice;
/<A
CLASS="indexterm"
NAME="ch03-idx-999788-0"
></A
><A
CLASS="indexterm"
NAME="ch03-idx-999788-1"
></A
><A
CLASS="indexterm"
NAME="ch03-idx-999788-2"
></A
><A
CLASS="indexterm"
NAME="ch03-idx-999788-3"
></A
><A
CLASS="indexterm"
NAME="ch03-idx-999788-4"
></A
></PRE
></BLOCKQUOTE
></DIV
></DIV
><DIV
CLASS="htmlnav"
><P
></P
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch03_06.htm"
TITLE="3.6 Building a Structured Function"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 3.6 Building a Structured Function"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="book"
HREF="index.htm"
TITLE="Advanced Oracle PL/SQL Programming with Packages"
><IMG
SRC="../gifs/txthome.gif"
ALT="Advanced Oracle PL/SQL Programming with Packages"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch03_08.htm#ch03-SECT-8.1"
TITLE="3.8 Broadening the Scope"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 3.8 Broadening the Scope"
BORDER="0"></A
></TD
></TR
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
>3.6 Building a Structured Function</TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="index"
HREF="index/idx_0.htm"
TITLE="Book Index"
><IMG
SRC="../gifs/index.gif"
ALT="Book Index"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
>3.8 Broadening the Scope</TD
></TR
></TABLE
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"></DIV
><IMG
SRC="../gifs/smnavbar.gif"
USEMAP="#map"
BORDER="0"
ALT="The Oracle Library Navigation">

<P><font size="-1">
<a href="../copyrght.htm#copy">Copyright (c) 2000</a> O'Reilly & Associates. All rights reserved.
</font></P>

<MAP NAME="map">

<AREA SHAPE="RECT"
COORDS="0,0,35,30"
HREF="../index.htm"
ALT="Library Home">

<AREA SHAPE="RECT"
COORDS="40,0,95,30"
HREF="../prog2/index.htm"
ALT="Oracle PL/SQL Programming, 2nd. Ed.">

<AREA SHAPE="RECT"
COORDS="100,0,200,30"
HREF="../guide8i/index.htm"
ALT="Guide to Oracle 8i Features">

<AREA SHAPE="RECT"
COORDS="205,0,245,30"
HREF="../bipack/index.htm"
ALT="Oracle Built-in Packages">

<AREA SHAPE="RECT"
COORDS="250,0,320,30"
HREF="index.htm"
ALT="Advanced PL/SQL Programming with Packages">

<AREA SHAPE="RECT"
COORDS="325,0,420,30"
HREF="../webapp/index.htm"
ALT="Oracle Web Applications">

<AREA SHAPE="RECT"
COORDS="425,0,490,30"
HREF="../langpkt/index.htm"
ALT="Oracle PL/SQL Language Pocket Reference">

<AREA SHAPE="RECT"
COORDS="495,0,570,30"
HREF="../bipkt/index.htm"
ALT="Oracle PL/SQL Built-ins Pocket Reference">
</MAP>
</BODY
>
<!-- Mirrored from liso.cs.pusan.ac.kr by HTTrack Website Copier/3.x [XR&CO'2001] -->
</HTML
>
