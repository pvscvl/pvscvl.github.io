<HTML
><HEAD
><TITLE
>[Chapter 13] PLVfile: Reading and Writing Operating System Files</TITLE
><META
NAME="DC.Creator"
CONTENT="Steven Feuerstein"><META
NAME="DC.Date"
CONTENT="2000-04-29T18:28:02Z"><META
NAME="DC.Format"
CONTENT="text/html"
SCHEME="MIME"><META
NAME="DC.Identifier"
CONTENT="O'Reilly and Associates-1-56592-238-7E"><META
NAME="DC.Language"
CONTENT="en-US"><META
NAME="DC.Publisher"
CONTENT="O'Reilly &amp; Associates, Inc."><META
NAME="DC.Source"
CONTENT="1-56592-238-7E"
SCHEME="ISBN"><META
NAME="DC.Subject.Keyword"
CONTENT="PL/SQL SQL Oracle Packages"><META
NAME="DC.Title"
CONTENT="Advanced Oracle PL/SQL Programming with Packages"><META
NAME="DC.Type"
CONTENT="Text.Monograph"><META
NAME="generator"
CONTENT="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><LINK
REL="stylesheet"
TYPE="text/css"
HREF="../style/style1.css"><LINK
REV="made"
HREF="mailto:online-books@oreilly.com"
TITLE="Online Books Comments"><LINK
REL="up"
HREF="part03.htm"
TITLE="III. Building Block Packages"><LINK
REL="prev"
HREF="ch12_09.htm#ch12-SECT-9.2"
TITLE="12.9 Cleaning Up Source and Target"><LINK
REL="next"
HREF="ch13_02.htm#ch13-SECT-2.1"
TITLE="13.2 Specifying the File in PLVfile"></HEAD>
<BODY><DIV CLASS="htmlnav"
><H1
><IMG
SRC="gifs/smbanner.gif"
ALT="Advanced Oracle PL/SQL Programming with Packages"
USEMAP="#srchmap"
BORDER="0"></H1
><MAP
NAME="srchmap"
><AREA
SHAPE="RECT"
COORDS="0,0,466,65"
HREF="index.htm"
ALT="Advanced Oracle PL/SQL Programming with Packages"><AREA
SHAPE="RECT"
COORDS="467,0,514,18"
HREF="jobjects/fsearch.htm"
ALT="Search this book"></MAP
><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch12_09.htm#ch12-SECT-9.2"
TITLE="12.9 Cleaning Up Source and Target"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 12.9 Cleaning Up Source and Target"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><SPAN
CLASS="NAVTITLE"
>Chapter 13</SPAN
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch13_02.htm#ch13-SECT-2.1"
TITLE="13.2 Specifying the File in PLVfile"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 13.2 Specifying the File in PLVfile"
BORDER="0"></A
></TD
></TR
></TABLE
>&nbsp;<HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"></DIV
><DIV
CLASS="chapter"
><H1
CLASS="chapter"
><A
CLASS="title"
NAME="plsql-adv-ch-13"
>13. PLVfile: Reading and Writing Operating System Files</A
></H1
><DIV
CLASS="htmltoc"
><P
><B
>Contents:</B
><BR><A
CLASS="sect1"
HREF="#ch13-25121"
TITLE="13.1 A Review of UTL_FILE"
>A Review of UTL_FILE</A
><BR><A
CLASS="sect1"
HREF="ch13_02.htm#ch13-SECT-2.1"
TITLE="13.2 Specifying the File in PLVfile"
>Specifying the File in PLVfile</A
><BR><A
CLASS="sect1"
HREF="ch13_03.htm"
TITLE="13.3 Creating and Checking Existence of Files"
>Creating and Checking Existence of Files</A
><BR><A
CLASS="sect1"
HREF="ch13_04.htm"
TITLE="13.4 Opening and Closing Files"
>Opening and Closing Files</A
><BR><A
CLASS="sect1"
HREF="ch13_05.htm#ch13-SECT-5.3"
TITLE="13.5 Reading From a File"
>Reading From a File</A
><BR><A
CLASS="sect1"
HREF="ch13_06.htm#ch13-SECT-6.1"
TITLE="13.6 Writing to a File"
>Writing to a File</A
><BR><A
CLASS="sect1"
HREF="ch13_07.htm#ch13-SECT-7.3"
TITLE="13.7 Copying File Contents"
>Copying File Contents</A
><BR><A
CLASS="sect1"
HREF="ch13_08.htm"
TITLE="13.8 Displaying File Contents"
>Displaying File Contents</A
><BR><A
CLASS="sect1"
HREF="ch13_09.htm"
TITLE="13.9 Handling File Errors with PLVfile"
>Handling File Errors with PLVfile</A
><BR><A
CLASS="sect1"
HREF="ch13_10.htm"
TITLE="13.10 Tracing PLVfile Activity"
>Tracing PLVfile Activity</A
></P
><P
></P
></DIV
><P
CLASS="para"
>The <A
CLASS="indexterm"
NAME="ch13-idx-998436-0"
></A
><A
CLASS="indexterm"
NAME="ch13-idx-998436-1"
></A
><A
CLASS="indexterm"
NAME="ch13-idx-998436-2"
></A
>PLVfile (PL/Vision FILE package) provides a layer of code around the builtin <A
CLASS="indexterm"
NAME="ch13-idx-998444-0"
></A
>UTL_FILE package (which is available only with Release 2.3 of <SPAN
CLASS="acronym"
>PL/SQL</SPAN
> and beyond). UTL_FILE allows you to read from and write to operating system files on the same machine in which the database instance is running. The ability to read and write operating system files has been a long-standing request ("desperate plea" would, perhaps, be a better description) of <SPAN
CLASS="acronym"
>PL/SQL</SPAN
> developers.</P
><P
CLASS="para"
>The PLVfile package provides a number of high-level programs, such as <KBD
CLASS="command"
>fcopy</KBD
> to copy files, and <KBD
CLASS="command"
>infile</KBD
>, a file-oriented version of INSTR, to make it easier for <SPAN
CLASS="acronym"
>PL/SQL</SPAN
> developers to take advantage of this very useful builtin package.</P
><P
CLASS="para"
>This chapter show how to use each of the different elements of the PLVfile package.</P
><DIV
CLASS="sect1"
><H2
CLASS="sect1"
><A
CLASS="title"
NAME="ch13-25121"
>13.1 A Review of UTL_FILE</A
></H2
><P
CLASS="para"
>Before you dive in to using either UTL_FILE or the PLVfile package, however, you should review the following information about UTL_FILE. <CITE
CLASS="citetitle"
>Chapter 15</CITE
> of <CITE
CLASS="citetitle"
>Oracle PL/SQL Programming</CITE
> offers more detail about these topics and the programs of the UTL_FILE package. The following sections offer some information about UTL_FILE that you need to know in order to use PLVfile properly.</P
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch13-SECT-1.1"
>13.1.1 Enabling File Access in the Oracle Server </A
></H3
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="ch13-idx-998448-0"
></A
><A
CLASS="indexterm"
NAME="ch13-idx-998448-1"
></A
><A
CLASS="indexterm"
NAME="ch13-idx-998448-2"
></A
><A
CLASS="indexterm"
NAME="ch13-idx-998448-3"
></A
>To use the UTL_FILE package, you must add a line to the initialization file or <I
CLASS="filename"
>init.ora</I
> for your database instance that indicates the directories in which you can read and write operating system files. This precaution is taken by Oracle so that you do not inadvertently corrupt important files like the database log files.</P
><P
CLASS="para"
>The entry in the <I
CLASS="filename"
>init.ora</I
><A
CLASS="indexterm"
NAME="ch13-idx-998449-0"
></A
> file can have one of two formats:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>utl_file_dir='*'
<I
CLASS="lineannotation"
>or</I
>
utl_file_dir='dir1,dir2...dir<EM
CLASS="emphasis"
>n</EM
>'</PRE
></BLOCKQUOTE
><P
CLASS="para"
>where dir1 through dir<EM
CLASS="emphasis"
>n</EM
> are individual, specific directory listings. If you use the first format, you are telling the Oracle database that developers can use UTL_FILE to write to any directory.</P
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch13-SECT-1.2"
>13.1.2 File Handles</A
></H3
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="ch13-idx-998450-0"
></A
><A
CLASS="indexterm"
NAME="ch13-idx-998450-1"
></A
><A
CLASS="indexterm"
NAME="ch13-idx-998450-2"
></A
>Before you can do anything with a file, you have to open it (this process is explained below). At this point, UTL_FILE returns a handle or pointer to that file. You will then use this handle in all future manipulations of the file. A file handle has a special datatype of UTL_FILE.FILE_TYPE. FILE_TYPE is actually a <SPAN
CLASS="acronym"
>PL/SQL</SPAN
> record whose fields contain all the information about the file needed by UTL_FILE. (Currently, the record consists of a single column, named "id".)</P
><P
CLASS="para"
>You will reference the file handle, but not any of the individual fields of the handle. A handle is declared as follows:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>DECLARE
   file_handle UTL_FILE.FILE_TYPE;
BEGIN</PRE
></BLOCKQUOTE
><P
CLASS="para"
>You could display the file handle which is generated by a call to UTL_FILE.FOPEN or the corresponding <KBD
CLASS="command"
>PLVfile.fopen</KBD
> functions as follows:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>DECLARE
   file_handle UTL_FILE.FILE_TYPE;
BEGIN
   file_handle := PLVfile.fopen ('login.sql', PLVfile.c_read);
   p.l (file_handle.id);
END;
/</PRE
></BLOCKQUOTE
><P
CLASS="para"
>The <KBD
CLASS="command"
>p.l</KBD
> procedure is also overloaded in the <SPAN
CLASS="acronym"
>PL/SQL</SPAN
> 2.3 version so you can pass it the file handle directly and it will display the id field, as shown here:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>p.l (file_handle);</PRE
></BLOCKQUOTE
><P
CLASS="para"
>Many PLVfile programs give you the option of providing either the file name or the file handle. In some cases, such as when you read from a file, you must use the file handle. In other situations, you can choose your method of specifying the file you want.</P
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch13-SECT-1.3"
>13.1.3 File Location, Name, and Mode</A
></H3
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="ch13-idx-998451-0"
></A
><A
CLASS="indexterm"
NAME="ch13-idx-998451-1"
></A
><A
CLASS="indexterm"
NAME="ch13-idx-998451-2"
></A
>When you open a file with the UTL_FILE.FOPEN function, you must provide three arguments, as shown in the header below:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>FUNCTION FOPEN 
   (location_in IN VARCHAR2, file_name_in IN VARCHAR2,
    file_mode_in IN VARCHAR2)
RETURN UTL_FILE.FILE_TYPE;</PRE
></BLOCKQUOTE
><P
CLASS="para"
>The first argument is the location of the file (the directory); the second is the name of the file (name and extension); and the third is the file mode: "R" for read-only, "W" for write-only, and "A" for append. </P
><P
CLASS="para"
>While UTL_FILE needs all of this information, you should not necessarily have to provide it all every time you want to perform a file-related action. To make it easier for developers to work with files, PLVfile offers several options for opening and referencing files. You can provide separate locations and names in the UTL_FILE format. You can also provide a single string that which contains both the location and name and let PLVfile parse that string into its separate components. </P
><P
CLASS="para"
>See <A
CLASS="xref"
HREF="ch13_02.htm#ch13-SECT-2.1"
>Section 13.2, "Specifying the File in PLVfile"</A
> for more information on the approach taken by PL/Vision.</P
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch13-SECT-1.4"
>13.1.4 Handling UTL_FILE Errors</A
></H3
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="ch13-idx-998452-0"
></A
><A
CLASS="indexterm"
NAME="ch13-idx-998452-1"
></A
><A
CLASS="indexterm"
NAME="ch13-idx-998452-2"
></A
>The UTL_FILE package provides a set of package-based exceptions and also makes use of two, more generic exceptions to inform you of problems it encounters. These exceptions are shown in <A
CLASS="xref"
HREF="ch13_01.htm"
>Table 13.1</A
>.</P
><P
CLASS="para"
>It is great that the UTL_FILE package offers some predefined exceptions. By providing specific names for different exception conditions, I can trap for and handle those conditions. The downside of this approach is that I need to include explicit exception handlers by name, as shown below:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>EXCEPTION
   WHEN UTL_FILE.<A
CLASS="indexterm"
NAME="ch13-idx-998459-0"
></A
><A
CLASS="indexterm"
NAME="ch13-idx-998459-1"
></A
>INVALID_PATH
   THEN
      p.l ('Invalid path');</PRE
></BLOCKQUOTE
><P
CLASS="para"
>If I try to use a WHEN OTHERS clause instead (as you can see, there are many UTL_FILE-specific exceptions), the SQLCODE function simply and uniformly returns the number 1&nbsp;-- indicating a user-defined exception. I cannot, in other words, determine which of the UTL_FILE exceptions occurred.</P
><BR><TABLE
CLASS="table"
BORDER="1"
CELLPADDING="3"
><CAPTION
CLASS="table"
><A
CLASS="title"
NAME="ch13-41876"
>Table 13.1: Exceptions Related to the UTL_FILE Package </A
></CAPTION
><THEAD
CLASS="thead"
><TR
CLASS="row"
VALIGN="TOP"
><TH
CLASS="entry"
ALIGN="LEFT"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>Exception Name</P
></TH
><TH
CLASS="entry"
ALIGN="LEFT"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>Description</P
></TH
></TR
></THEAD
><TBODY
CLASS="tbody"
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
> <BLOCKQUOTE
><PRE
CLASS="programlisting"
>NO_DATA_FOUND<A
CLASS="indexterm"
NAME="ch13-idx-998460-0"
></A
></PRE
></BLOCKQUOTE
> </TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>The GET_LINE procedure tried to read past the end of the file. Remember that this same exception is also raised by implicit cursors and references to <SPAN
CLASS="acronym"
>PL/SQL</SPAN
> tables.</P
></TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
> <BLOCKQUOTE
><PRE
CLASS="programlisting"
>UTL_FILE.INTERNAL_ERROR</PRE
></BLOCKQUOTE
> </TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>An internal error occurred. The requested operation was not completed.</P
></TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
> <BLOCKQUOTE
><PRE
CLASS="programlisting"
>UTL_FILE.INVALID_FILE_HANDLE<A
CLASS="indexterm"
NAME="ch13-idx-998461-0"
></A
></PRE
></BLOCKQUOTE
> </TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>The specified file handle does not identify a valid, open file. This exception may be raised by calls to FCLOSE and FFLUSH.</P
></TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
> <BLOCKQUOTE
><PRE
CLASS="programlisting"
>UTL_FILE.INVALID_MODE<A
CLASS="indexterm"
NAME="ch13-idx-998462-0"
></A
></PRE
></BLOCKQUOTE
> </TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>The mode supplied to FOPEN is not valid. Valid modes are: `a', `r', or `w' (upper or lower case is acceptable).</P
></TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
> <BLOCKQUOTE
><PRE
CLASS="programlisting"
>UTL_FILE.INVALID_OPERATION<A
CLASS="indexterm"
NAME="ch13-idx-998463-0"
></A
></PRE
></BLOCKQUOTE
> </TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>In FOPEN, this exception is raised when the file cannot be opened as requested. To open a file in read or append mode, the file must exist already. To open in write mode, the file must be writeable/ createable.</P
><P
CLASS="para"
>In GET_LINE, FFLUSH, NEW_LINE, PUT, PUTF, and PUT_LINE, this exception is raised when you try to perform an operation which is incompatible with the mode under which the file was opened. For example, you tried to write to a read-only file.</P
></TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
> <BLOCKQUOTE
><PRE
CLASS="programlisting"
>UTL_FILE.INVALID_PATH<A
CLASS="indexterm"
NAME="ch13-idx-998464-0"
></A
></PRE
></BLOCKQUOTE
> </TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>The path name supplied in a call to FOPEN is not valid. This error occurs when the location is not accessible or the path name is improperly constructed.</P
></TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
> <BLOCKQUOTE
><PRE
CLASS="programlisting"
>UTL_FILE.READ_ERROR<A
CLASS="indexterm"
NAME="ch13-idx-998465-0"
></A
></PRE
></BLOCKQUOTE
> </TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>An operating system-specific error occurred when you tried to read from the file. For example, there might be a disk error.</P
></TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
> <BLOCKQUOTE
><PRE
CLASS="programlisting"
>UTL_FILE.WRITE_ERROR<A
CLASS="indexterm"
NAME="ch13-idx-998466-0"
></A
><A
CLASS="indexterm"
NAME="ch13-idx-998466-1"
></A
></PRE
></BLOCKQUOTE
> </TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>An operating system-specific error occurred when you tried to write to the file. For example, the disk might be full.</P
></TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
> <BLOCKQUOTE
><PRE
CLASS="programlisting"
>VALUE_ERROR<A
CLASS="indexterm"
NAME="ch13-idx-998467-0"
></A
><A
CLASS="indexterm"
NAME="ch13-idx-998467-1"
></A
></PRE
></BLOCKQUOTE
> </TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>The text read by GET_LINE is too long to fit in the specified buffer.</P
></TD
></TR
></TBODY
></TABLE
><P
CLASS="para"
>To help you deal with this situation, PLVfile offers the <KBD
CLASS="command"
>exc_section</KBD
> procedure, which predefines all these handlers (see <A
CLASS="xref"
HREF="ch13_09.htm"
>Section 13.9, "Handling File Errors with PLVfile"</A
>).<A
CLASS="indexterm"
NAME="ch13-idx-998446-0"
></A
></P
></DIV
></DIV
></DIV
><DIV
CLASS="htmlnav"
><P
></P
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch12_09.htm#ch12-SECT-9.2"
TITLE="12.9 Cleaning Up Source and Target"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 12.9 Cleaning Up Source and Target"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="book"
HREF="index.htm"
TITLE="Advanced Oracle PL/SQL Programming with Packages"
><IMG
SRC="../gifs/txthome.gif"
ALT="Advanced Oracle PL/SQL Programming with Packages"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch13_02.htm#ch13-SECT-2.1"
TITLE="13.2 Specifying the File in PLVfile"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 13.2 Specifying the File in PLVfile"
BORDER="0"></A
></TD
></TR
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
>12.9 Cleaning Up Source and Target</TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="index"
HREF="index/idx_0.htm"
TITLE="Book Index"
><IMG
SRC="../gifs/index.gif"
ALT="Book Index"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
>13.2 Specifying the File in PLVfile</TD
></TR
></TABLE
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"></DIV
><IMG
SRC="../gifs/smnavbar.gif"
USEMAP="#map"
BORDER="0"
ALT="The Oracle Library Navigation">

<P><font size="-1">
<a href="../copyrght.htm#copy">Copyright (c) 2000</a> O'Reilly & Associates. All rights reserved.
</font></P>

<MAP NAME="map">

<AREA SHAPE="RECT"
COORDS="0,0,35,30"
HREF="../index.htm"
ALT="Library Home">

<AREA SHAPE="RECT"
COORDS="40,0,95,30"
HREF="../prog2/index.htm"
ALT="Oracle PL/SQL Programming, 2nd. Ed.">

<AREA SHAPE="RECT"
COORDS="100,0,200,30"
HREF="../guide8i/index.htm"
ALT="Guide to Oracle 8i Features">

<AREA SHAPE="RECT"
COORDS="205,0,245,30"
HREF="../bipack/index.htm"
ALT="Oracle Built-in Packages">

<AREA SHAPE="RECT"
COORDS="250,0,320,30"
HREF="index.htm"
ALT="Advanced PL/SQL Programming with Packages">

<AREA SHAPE="RECT"
COORDS="325,0,420,30"
HREF="../webapp/index.htm"
ALT="Oracle Web Applications">

<AREA SHAPE="RECT"
COORDS="425,0,490,30"
HREF="../langpkt/index.htm"
ALT="Oracle PL/SQL Language Pocket Reference">

<AREA SHAPE="RECT"
COORDS="495,0,570,30"
HREF="../bipkt/index.htm"
ALT="Oracle PL/SQL Built-ins Pocket Reference">
</MAP>
</BODY
>
<!-- Mirrored from liso.cs.pusan.ac.kr by HTTrack Website Copier/3.x [XR&CO'2001] -->
</HTML
>
