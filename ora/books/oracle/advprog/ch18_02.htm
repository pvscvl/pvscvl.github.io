<HTML
><HEAD
><TITLE
>[Chapter 18] 18.2 PLVcat: Cataloguing PL/SQL Source Code</TITLE
><META
NAME="DC.Creator"
CONTENT="Steven Feuerstein"><META
NAME="DC.Date"
CONTENT="2000-04-29T18:30:23Z"><META
NAME="DC.Format"
CONTENT="text/html"
SCHEME="MIME"><META
NAME="DC.Identifier"
CONTENT="O'Reilly and Associates-1-56592-238-7E"><META
NAME="DC.Language"
CONTENT="en-US"><META
NAME="DC.Publisher"
CONTENT="O'Reilly &amp; Associates, Inc."><META
NAME="DC.Source"
CONTENT="1-56592-238-7E"
SCHEME="ISBN"><META
NAME="DC.Subject.Keyword"
CONTENT="PL/SQL SQL Oracle Packages"><META
NAME="DC.Title"
CONTENT="Advanced Oracle PL/SQL Programming with Packages"><META
NAME="DC.Type"
CONTENT="Text.Monograph"><META
NAME="generator"
CONTENT="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><LINK
REL="stylesheet"
TYPE="text/css"
HREF="../style/style1.css"><LINK
REV="made"
HREF="mailto:online-books@oreilly.com"
TITLE="Online Books Comments"><LINK
REL="up"
HREF="ch18_01.htm"
TITLE="18. PLVcase and PLVcat: Converting and Analyzing PL/SQL Code"><LINK
REL="prev"
HREF="ch18_01.htm"
TITLE="18.1 PLVcase: Converting the Case of PL/SQL Programs"><LINK
REL="next"
HREF="part05.htm"
TITLE="V. Plug-and-Play Packages"></HEAD>
<BODY><DIV CLASS="htmlnav"
><H1
><IMG
SRC="gifs/smbanner.gif"
ALT="Advanced Oracle PL/SQL Programming with Packages"
USEMAP="#srchmap"
BORDER="0"></H1
><MAP
NAME="srchmap"
><AREA
SHAPE="RECT"
COORDS="0,0,466,65"
HREF="index.htm"
ALT="Advanced Oracle PL/SQL Programming with Packages"><AREA
SHAPE="RECT"
COORDS="467,0,514,18"
HREF="jobjects/fsearch.htm"
ALT="Search this book"></MAP
><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch18_01.htm"
TITLE="18.1 PLVcase: Converting the Case of PL/SQL Programs"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 18.1 PLVcase: Converting the Case of PL/SQL Programs"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><SPAN
CLASS="NAVTITLE"
><A
CLASS="chapter"
REL="up"
HREF="ch18_01.htm"
TITLE="18. PLVcase and PLVcat: Converting and Analyzing PL/SQL Code"
>Chapter 18<BR>PLVcase and PLVcat: Converting and Analyzing PL/SQL Code</A
></SPAN
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="part"
HREF="part05.htm"
TITLE="V. Plug-and-Play Packages"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: V. Plug-and-Play Packages"
BORDER="0"></A
></TD
></TR
></TABLE
>&nbsp;<HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"></DIV
><DIV
CLASS="sect1"
><H2
CLASS="sect1"
><A
CLASS="title"
NAME="ch18-24793"
>18.2 PLVcat: Cataloguing PL/SQL Source Code</A
></H2
><P
CLASS="para"
>The <A
CLASS="indexterm"
NAME="ch18-idx-998575-0"
></A
><A
CLASS="indexterm"
NAME="ch18-idx-998575-1"
></A
><A
CLASS="indexterm"
NAME="ch18-idx-998575-2"
></A
>PLVcat package gives you a way to parse and store (in a table-based catalogue) information about the contents of <SPAN
CLASS="acronym"
>PL/SQL</SPAN
> package specifications. You will glean information from this catalogue that is currently unavailable from the Oracle Server data dictionary. </P
><P
CLASS="para"
>Before describing the different areas of functionality of PLVcat, let's look at the problem PLVcat is intended to solve.</P
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch18-SECT-2.1"
>18.2.1 Knowing What You've Got</A
></H3
><P
CLASS="para"
>One of the tremendous advantages of storing <SPAN
CLASS="acronym"
>PL/SQL</SPAN
> programs in the database is that they can be executed by anyone granted authority to those objects. You don't have to know where the source code resides on disk; link lists and paths will not badger you in the world of <SPAN
CLASS="acronym"
>PL/SQL</SPAN
>. Yet you do face other challenges when seeking to leverage stored code&nbsp;-- especially on an enterprise-wide basis. These obstacles include:</P
><UL
CLASS="itemizedlist"
><LI
CLASS="listitem"
><P
CLASS="para"
><EM
CLASS="emphasis"
>Knowing what is available.</EM
> How do you know what programs are stored where, what they are supposed to do, and how you are supposed to use them?</P
></LI
><LI
CLASS="listitem"
><P
CLASS="para"
><EM
CLASS="emphasis"
>Knowing where and how programs are being used.</EM
> How do you measure the impact of changing a particular program? It is often very useful to be able to answer questions like which programs use this function? How, then, is the function used?</P
></LI
></UL
><P
CLASS="para"
>At the time I'm writing this book, I think that it is fair to say that the potential and functionality of <SPAN
CLASS="acronym"
>PL/SQL</SPAN
> have outstripped the features of development environments using <SPAN
CLASS="acronym"
>PL/SQL</SPAN
>. Developers using <SPAN
CLASS="acronym"
>PL/SQL</SPAN
> often work within a light fog, stumbling about for information on the programs they can use. As a result, code reuse remains a lofty objective, an agreed-upon principle rarely put into practice.</P
><P
CLASS="para"
>Oracle provides some ability to get answers to your questions about stored <SPAN
CLASS="acronym"
>PL/SQL</SPAN
> It provides a set of data dictionary views that you can access using the SQL language. These views include:</P
><DL
CLASS="variablelist"
><DT
CLASS="term"
><A
CLASS="indexterm"
NAME="ch18-idx-998576-0"
></A
>USER_SOURCE</DT
><DD
CLASS="listitem"
><P
CLASS="para"
>The source code of your stored programs. (There is also an ALL_SOURCE view, which contains the source code of all programs to which you have access.)</P
></DD
><DT
CLASS="term"
><A
CLASS="indexterm"
NAME="ch18-idx-998577-0"
></A
>USER_DEPENDENCIES</DT
><DD
CLASS="listitem"
><P
CLASS="para"
>Information about dependencies between all kinds of objects stored in the database.</P
></DD
></DL
><P
CLASS="para"
>Having this kind of information in views is a wonderful feature of an active data dictionary. But you have to ask yourself two questions: how easy is it to get the data and how good is the data? Sure, you can use <SPAN
CLASS="acronym"
>SQL</SPAN
> to retrieve the information from the views, but that can get very time-consuming and cumbersome. Suppose you want to see a list of all of the programs defined in a package specification. You <EM
CLASS="emphasis"
>could</EM
> view that specification using the <KBD
CLASS="command"
>PLVvu.code</KBD
> procedure. That can at times be an overwhelming volume of information&nbsp;-- and it doesn't lend itself easily to generating a report showing this information in an outline view.</P
><P
CLASS="para"
>In the case of USER_DEPENDENCIES, the problem is not access to data; the problem is with a lack of data. This view shows you which package another object relies on, but it does not "pierce the veil" of the package to show you which element <EM
CLASS="emphasis"
>inside</EM
> that package is the cause of the dependency. In other words, if my <KBD
CLASS="command"
>calc_totals</KBD
> program makes the following call:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>recalc.full_analysis;</PRE
></BLOCKQUOTE
><P
CLASS="para"
>then the USER_DEPENDENCIES view shows that <KBD
CLASS="command"
>calc_totals</KBD
> is dependent on <KBD
CLASS="command"
>recalc</KBD
>. It will not, however, inform you that <KBD
CLASS="command"
>full_analysis</KBD
> is the program of the <KBD
CLASS="command"
>recalc</KBD
> package that is called by <KBD
CLASS="command"
>calc_totals</KBD
>. </P
><P
CLASS="para"
>PL/Vision fixes these shortcomings with a set of programs that parses the contents of your <SPAN
CLASS="acronym"
>PL/SQL</SPAN
> code and then stores the results of that process in database tables. You can then write simple <SPAN
CLASS="acronym"
>SQL</SPAN
> statements against these tables to generate reports that provide a much greater granularity of detail about your <SPAN
CLASS="acronym"
>PL/SQL</SPAN
> programs.</P
><P
CLASS="para"
>These elements of the PLVcat package are explained in later sections.</P
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch18-SECT-2.2"
>18.2.2 <A
CLASS="indexterm"
NAME="ch18-idx-998578-0"
></A
><A
CLASS="indexterm"
NAME="ch18-idx-998578-1"
></A
><A
CLASS="indexterm"
NAME="ch18-idx-998578-2"
></A
>The PLVcat Database Tables</A
></H3
><P
CLASS="para"
>The PLVcat programs generate information about your <SPAN
CLASS="acronym"
>PL/SQL</SPAN
> code and then deposit that information in one of two database tables: <KBD
CLASS="command"
>PLVctlg</KBD
> or <KBD
CLASS="command"
>PLVrfrnc</KBD
>. These tables are created when you install PL/Vision. The <KBD
CLASS="command"
>PLVctlg</KBD
> table contains the catalogue of the contents of packages (those elements defined in the specification). The <KBD
CLASS="command"
>PLVrfrnc</KBD
> table contains the references or dependencies generated by calls to the <KBD
CLASS="command"
>ref</KBD
> programs. These tables and how to interpret their contents are explained below.</P
><DIV
CLASS="sect3"
><H4
CLASS="sect3"
><A
CLASS="title"
NAME="ch18-SECT-2.2.1"
>18.2.2.1 <A
CLASS="indexterm"
NAME="ch18-idx-998579-0"
></A
>PLVctlg table</A
></H4
><P
CLASS="para"
>The structure of the <KBD
CLASS="command"
>PLVctlg</KBD
> table is:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>CREATE TABLE PLVctlg
   (owner VARCHAR2(100),
    name1 VARCHAR2(100), /* Package name */
    name2 VARCHAR2(100), /* Element name */
    type VARCHAR2(100),  /* Same as in user_objects */
    iname VARCHAR2(100), /* Name of object inside */
    itype VARCHAR2(100), /* Type of object inside */
    idatatype VARCHAR2(100),
    overload INTEGER)</PRE
></BLOCKQUOTE
><P
CLASS="para"
>The <KBD
CLASS="command"
>owner</KBD
>, <KBD
CLASS="command"
>name1</KBD
>, <KBD
CLASS="command"
>name2</KBD
>, and <KBD
CLASS="command"
>type</KBD
> columns define the program unit for which elements have been catalogued. The <KBD
CLASS="command"
>name2</KBD
> column is always NULL in this version of PLVcat, since PL/Vision currently catalogues only package specifications. </P
><P
CLASS="para"
>The "inside" columns (<KBD
CLASS="command"
>iname</KBD
>, <KBD
CLASS="command"
>itype</KBD
>, and <CITE
CLASS="citetitle"
>idatatype</CITE
>) indicate the element found in the program unit. The <KBD
CLASS="command"
>idatatype</KBD
> column is non-NULL if the element is a function or TYPE statement. The <KBD
CLASS="command"
>overload</KBD
> column contains the number of overloadings of a particular procedure or function name. All values are stored in uppercase.</P
><P
CLASS="para"
>Examples of how this table is filled from calling PLVcat modules are shown later in this chapter.</P
></DIV
><DIV
CLASS="sect3"
><H4
CLASS="sect3"
><A
CLASS="title"
NAME="ch18-SECT-2.2.2"
>18.2.2.2 <A
CLASS="indexterm"
NAME="ch18-idx-998580-0"
></A
>PLVrfrnc table</A
></H4
><P
CLASS="para"
>The <KBD
CLASS="command"
>PLVrfrnc</KBD
> table contains information about the references made to external elements from within a <SPAN
CLASS="acronym"
>PL/SQL</SPAN
> program unit. The structure of this table is:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>CREATE TABLE PLVrfrnc
   (owner VARCHAR2(100),
    name1 VARCHAR2(100),
    name2 VARCHAR2(100),
    type VARCHAR2(100),
    reftype VARCHAR2 (100), /* Type of reference */
    rowner VARCHAR2(100), /* Leave null if not specified */
    rname1 VARCHAR2(100), /* Package name or stand alone */
    rname2 VARCHAR2(100)  /* Null if not in package. */
   )    </PRE
></BLOCKQUOTE
><P
CLASS="para"
>The <KBD
CLASS="command"
>owner</KBD
>, <KBD
CLASS="command"
>name1</KBD
>, <KBD
CLASS="command"
>name2</KBD
>, and <KBD
CLASS="command"
>type</KBD
> columns define the program unit for which references have been analyzed. The <KBD
CLASS="command"
>reftype</KBD
>, <KBD
CLASS="command"
>rowner</KBD
>, <KBD
CLASS="command"
>rname1</KBD
>, and <KBD
CLASS="command"
>rname2</KBD
> columns define the object that is referenced inside the program unit. All values are stored in uppercase.</P
><P
CLASS="para"
>Examples of how this table is filled from calling PLVcat modules are shown later in this chapter.</P
></DIV
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch18-SECT-2.3"
>18.2.3 Building a Catalogue</A
></H3
><P
CLASS="para"
>You can build a catalogue of your <SPAN
CLASS="acronym"
>PL/SQL</SPAN
> source code with the <KBD
CLASS="command"
>module</KBD
> and <KBD
CLASS="command"
>modules</KBD
> procedures. The <KBD
CLASS="command"
>module</KBD
> procedure catalogues a single program unit, while the <KBD
CLASS="command"
>modules</KBD
> procedure can handle wildcarded program names and automatically catalogue multiple program units, including all the stored code in a schema.</P
><DIV
CLASS="sect3"
><H4
CLASS="sect3"
><A
CLASS="title"
NAME="ch18-SECT-2.3.1"
>18.2.3.1 Cataloguing a single module </A
></H4
><P
CLASS="para"
>To build a catalogue of a single <SPAN
CLASS="acronym"
>PL/SQL</SPAN
> program, you call the <KBD
CLASS="command"
>module</KBD
><A
CLASS="indexterm"
NAME="ch18-idx-998583-0"
></A
> procedure, whose header is:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>PROCEDURE module (module_in IN VARCHAR2);</PRE
></BLOCKQUOTE
><P
CLASS="para"
>You provide the name of the program you want to catalogue (currently only package specifications are supported; any types provided to the left of the <KBD
CLASS="command"
>:</KBD
> are ignored). The <KBD
CLASS="command"
>module</KBD
> program automatically sets the PLVio source repository to the ALL_SOURCE data dictionary view. It parses the source code using the PLVprsps package, searching for the definitions of any of the following <SPAN
CLASS="acronym"
>PL/SQL</SPAN
> code elements:</P
><UL
CLASS="itemizedlist"
><LI
CLASS="listitem"
><P
CLASS="para"
>Procedure header</P
></LI
><LI
CLASS="listitem"
><P
CLASS="para"
>Function header</P
></LI
><LI
CLASS="listitem"
><P
CLASS="para"
>Cursor header</P
></LI
><LI
CLASS="listitem"
><P
CLASS="para"
>TYPE statement</P
></LI
></UL
><P
CLASS="para"
><KBD
CLASS="command"
>PLVcat.module</KBD
> does not, in other words, currently catalogue variables, constants, exceptions, or other program elements that might appear in a <SPAN
CLASS="acronym"
>PL/SQL</SPAN
> package.</P
><P
CLASS="para"
>Since the <KBD
CLASS="command"
>module</KBD
> procedure works only with package specifications at this time, you do not have to tell PLVcat the type of object you want to catalogue when you call <KBD
CLASS="command"
>PLVcat.module</KBD
>. You simply provide the name of the package and it automatically scans the specification. As an example, to catalogue the PLVio package I would execute the following command in SQL*Plus:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>SQL&gt; exec PLVcat.module ('PLVio');</PRE
></BLOCKQUOTE
><P
CLASS="para"
>When control is returned back to the SQL*Plus prompt, the rows will have been written to <KBD
CLASS="command"
>PLVctlg</KBD
> and will be available for reporting and analysis. If your package is large, it may take a minute or two to complete the catalogue. String parsing and manipulation in the <SPAN
CLASS="acronym"
>PL/SQL</SPAN
> language is not known to be lightning fast.</P
></DIV
><DIV
CLASS="sect3"
><H4
CLASS="sect3"
><A
CLASS="title"
NAME="ch18-SECT-2.3.2"
>18.2.3.2 <A
CLASS="indexterm"
NAME="ch18-idx-998584-0"
></A
><A
CLASS="indexterm"
NAME="ch18-idx-998584-1"
></A
>Cataloguing multiple modules </A
></H4
><P
CLASS="para"
>The <KBD
CLASS="command"
>PLVcat.module</KBD
> procedure can only process a single package at a time; you cannot pass in wildcarded package names for multiple-program cataloguing in one call. The <KBD
CLASS="command"
>PLVcat.modules</KBD
> procedure offers this capability; its header is:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>PROCEDURE modules (module_in IN VARCHAR2);</PRE
></BLOCKQUOTE
><P
CLASS="para"
>You can use <KBD
CLASS="command"
>modules</KBD
> to catalogue all the packages in your schema with this call:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>SQL&gt; exec PLVcat.modules ('%');</PRE
></BLOCKQUOTE
><P
CLASS="para"
>Or you can be more selective. The following call to <KBD
CLASS="command"
>modules</KBD
> will catalogue all packages in the PL/Vision library:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>SQL&gt; exec PLVcat.modules ('PLV%');</PRE
></BLOCKQUOTE
><P
CLASS="para"
>The case you use to specify the package names is not significant. All program names are stored in the data dictionary in uppercase. (All right, so if you surround your program name in double quotes you can actually create programs with names in mixed case in the data dictionary; if you do this, you deserve all the ensuing complexities!)</P
></DIV
><DIV
CLASS="sect3"
><H4
CLASS="sect3"
><A
CLASS="title"
NAME="ch18-SECT-2.3.3"
>18.2.3.3 Examining the catalogue</A
></H4
><P
CLASS="para"
>To see how the <KBD
CLASS="command"
>PLVctlg</KBD
> table is populated by calls to <KBD
CLASS="command"
>PLVcat.module</KBD
> and <KBD
CLASS="command"
>PLVcat.modules</KBD
>, consider the following simplified version of the <A
CLASS="indexterm"
NAME="ch18-idx-998588-0"
></A
>PLVtmr package specification:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>PACKAGE PLVtmr
IS
   FUNCTION elapsed RETURN NUMBER;
   PROCEDURE show_elapsed;
END PLVtmr;
/</PRE
></BLOCKQUOTE
><P
CLASS="para"
>After cataloguing this package with <KBD
CLASS="command"
>PLVcat.module</KBD
>, I will have two rows in the <KBD
CLASS="command"
>PLVctlg</KBD
> table as follows:</P
><TABLE
CLASS="informaltable"
BORDER="1"
CELLPADDING="3"
><THEAD
CLASS="thead"
><TR
CLASS="row"
VALIGN="TOP"
><TH
CLASS="entry"
ALIGN="LEFT"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>Owner</P
></TH
><TH
CLASS="entry"
ALIGN="LEFT"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>Name1</P
></TH
><TH
CLASS="entry"
ALIGN="LEFT"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>Type</P
></TH
><TH
CLASS="entry"
ALIGN="LEFT"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>Iname</P
></TH
><TH
CLASS="entry"
ALIGN="LEFT"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>Itype</P
></TH
><TH
CLASS="entry"
ALIGN="LEFT"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>Idatatype</P
></TH
><TH
CLASS="entry"
ALIGN="LEFT"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>Overloading</P
></TH
></TR
></THEAD
><TBODY
CLASS="tbody"
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
> <BLOCKQUOTE
><PRE
CLASS="programlisting"
>PLV</PRE
></BLOCKQUOTE
> </TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
> <BLOCKQUOTE
><PRE
CLASS="programlisting"
>PLVtmr</PRE
></BLOCKQUOTE
> </TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
> <BLOCKQUOTE
><PRE
CLASS="programlisting"
>PACKAGE</PRE
></BLOCKQUOTE
> </TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
> <BLOCKQUOTE
><PRE
CLASS="programlisting"
>elapsed</PRE
></BLOCKQUOTE
> </TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
> <BLOCKQUOTE
><PRE
CLASS="programlisting"
>FUNCTION</PRE
></BLOCKQUOTE
> </TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
> <BLOCKQUOTE
><PRE
CLASS="programlisting"
>NUMBER</PRE
></BLOCKQUOTE
> </TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
> <BLOCKQUOTE
><PRE
CLASS="programlisting"
>1</PRE
></BLOCKQUOTE
> </TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
> <BLOCKQUOTE
><PRE
CLASS="programlisting"
>PLV</PRE
></BLOCKQUOTE
> </TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
> <BLOCKQUOTE
><PRE
CLASS="programlisting"
>PLVtmr</PRE
></BLOCKQUOTE
> </TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
> <BLOCKQUOTE
><PRE
CLASS="programlisting"
>PACKAGE</PRE
></BLOCKQUOTE
> </TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
> <BLOCKQUOTE
><PRE
CLASS="programlisting"
>show_elapsed</PRE
></BLOCKQUOTE
> </TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
> <BLOCKQUOTE
><PRE
CLASS="programlisting"
>PROCEDURE</PRE
></BLOCKQUOTE
> </TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
> <BLOCKQUOTE
><PRE
CLASS="programlisting"
>NULL</PRE
></BLOCKQUOTE
> </TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
> <BLOCKQUOTE
><PRE
CLASS="programlisting"
>1</PRE
></BLOCKQUOTE
> </TD
></TR
></TBODY
></TABLE
><P
CLASS="para"
>To obtain a list of all elements in the PLVtmr package, therefore, I could execute a <SPAN
CLASS="acronym"
>SQL</SPAN
> statement like this:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>SELECT iname
  FROM PLVctlg
 WHERE name1 = 'PLVTMR';</PRE
></BLOCKQUOTE
><P
CLASS="para"
>To obtain a list of all functions catalogued for the PLV user account, I could execute a <SPAN
CLASS="acronym"
>SQL</SPAN
> statement like this:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>SELECT iname
  FROM PLVctlg
 WHERE owner = 'PLV'
   AND itype = 'FUNCTION';</PRE
></BLOCKQUOTE
><P
CLASS="para"
>The script named <KBD
CLASS="command"
>inctlg.sql</KBD
><A
CLASS="indexterm"
NAME="ch18-idx-998589-0"
></A
> contains a more complex and useful SQL statement for viewing the contents of the catalogue. The code for this script is:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>TTITLE 'Elements Catalogued in &amp;1'
SET VERIFY OFF
SET PAGESIZE 66
SET LINESIZE 60
COLUMN element FORMAT A60
SELECT DECODE (idatatype, NULL, NULL, idatatype || ' ') ||
       itype || ' ' || owner || '.' ||  
       name1 || '.' || iname  || ' ' ||
       DECODE (overload, 1, NULL, 
               '(' || TO_CHAR(overload) || ')') element
  FROM PLVctlg
 WHERE name1 like UPPER ('&amp;1')
 ORDER BY owner, type, name1, itype, iname;</PRE
></BLOCKQUOTE
><P
CLASS="para"
>This script accepts as a single parameter the name of the package whose catalogue you wish to view. Executing this script for the <KBD
CLASS="command"
>p</KBD
> package provides the following output:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>SQL&gt; @inctlg p
Sat Jun 01                                         page    1
               Elements Catalogued in p
ELEMENT
------------------------------------------------------------
VARCHAR2 FUNCTION PLV.P.LINESEP
VARCHAR2 FUNCTION PLV.P.PREFIX
PROCEDURE PLV.P.L (7)
PROCEDURE PLV.P.SET_LINESEP
PROCEDURE PLV.P.SET_PREFIX
PROCECURE PLV.P.TURN_OFF
PROCECURE PLV.P.TURN_ON</PRE
></BLOCKQUOTE
><P
CLASS="para"
>Notice that I am informed that the <KBD
CLASS="command"
>p.l</KBD
> procedure is overloaded seven times.</P
></DIV
><DIV
CLASS="sect3"
><H4
CLASS="sect3"
><A
CLASS="title"
NAME="ch18-SECT-2.3.4"
>18.2.3.4 Cataloguing PL/Vision</A
></H4
><P
CLASS="para"
>You can generate the catalogue for PL/Vision packages by executing the <KBD
CLASS="command"
>plvcat.sql</KBD
><A
CLASS="indexterm"
NAME="ch18-idx-998590-0"
></A
><A
CLASS="indexterm"
NAME="ch18-idx-998590-1"
></A
> script, located in the <I
CLASS="filename"
>plvision\use</I
> subdirectory.</P
><P
CLASS="para"
>The code for <KBD
CLASS="command"
>plvcat.sql</KBD
> is simply:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>BEGIN
   FOR objind IN 1 .. PLV.numobjects
   LOOP
      PLVcat.module (PLV.objects(objind));
   END LOOP;
END;
/</PRE
></BLOCKQUOTE
><P
CLASS="para"
>This script takes advantage of the list of PL/Vision objects that are stored in the <KBD
CLASS="command"
>PLV.objects</KBD
> <SPAN
CLASS="acronym"
>PL/SQL</SPAN
> table. This <SPAN
CLASS="acronym"
>PL/SQL</SPAN
> table is created and assigned values in the initialization section of the PLV package. The <KBD
CLASS="command"
>plvcat.sql</KBD
> script generates 396 rows in the <KBD
CLASS="command"
>PLVctlg</KBD
> table.</P
></DIV
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch18-SECT-2.4"
>18.2.4 <A
CLASS="indexterm"
NAME="ch18-idx-998591-0"
></A
><A
CLASS="indexterm"
NAME="ch18-idx-998591-1"
></A
><A
CLASS="indexterm"
NAME="ch18-idx-998591-2"
></A
>Identifying References and Dependencies</A
></H3
><P
CLASS="para"
>The other major area of functionality in PLVcat is to identify the references made within a program unit to external program elements. Such a reference implies a dependency; this information can be very useful in maintaining code, analyzing reuse and impact, and so on. The Oracle7 Server does maintain some dependency information, but it is only the minimum data required by the database to validate the status of compiled code. I cannot, for example, find out from the <SPAN
CLASS="acronym"
>USER_DEPENDENCIES</SPAN
> data dictionary view how many programs use the PLVdyn.ddl procedure. The most I can determine is the set of programs that use something in PLVdyn&nbsp;-- and this is not enough to support adequately an enterprise-wide deployment of <SPAN
CLASS="acronym"
>PL/SQL</SPAN
> applications.</P
><P
CLASS="para"
>The PLVcat package offers three programs to generate dependency information right down to the name of the package element that was referenced. It even lets you catalogue references to builtin functions like SUBSTR and all the builtin package programs. The three procedures that perform this task are:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>PROCEDURE refnonkw (module_in IN VARCHAR2);
PROCEDURE refbi (module_in IN VARCHAR2);
PROCEDURE refall (module_in IN VARCHAR2);</PRE
></BLOCKQUOTE
><P
CLASS="para"
>In all three cases, you pass in the name of the individual module for which you want references generated. </P
><DL
CLASS="variablelist"
><DT
CLASS="term"
><CODE
CLASS="literal"
> refnonkw</CODE
><A
CLASS="indexterm"
NAME="ch18-idx-998592-0"
></A
><A
CLASS="indexterm"
NAME="ch18-idx-998592-1"
></A
><A
CLASS="indexterm"
NAME="ch18-idx-998592-2"
></A
></DT
><DD
CLASS="listitem"
><P
CLASS="para"
>Identifies references to all non-keyword identifiers (application-specific elements). </P
></DD
><DT
CLASS="term"
><CODE
CLASS="literal"
> refbi</CODE
></DT
><DD
CLASS="listitem"
><P
CLASS="para"
>Identifies references to all kinds of builtins. </P
></DD
><DT
CLASS="term"
><CODE
CLASS="literal"
> refall</CODE
></DT
><DD
CLASS="listitem"
><P
CLASS="para"
>Identifies references to both non-keyword identifiers and builtins by calling <KBD
CLASS="command"
>refnonkw</KBD
> and <KBD
CLASS="command"
>refbi</KBD
>. Note that in the current implementation of <KBD
CLASS="command"
>refall</KBD
>, two passes are made against the specified module to parse the code. </P
></DD
></DL
><P
CLASS="para"
>The results of these scans are deposited in the <KBD
CLASS="command"
>PLVrfrnc</KBD
> table.</P
><DIV
CLASS="sect3"
><H4
CLASS="sect3"
><A
CLASS="title"
NAME="ch18-SECT-2.4.1"
>18.2.4.1 Examining the references</A
></H4
><P
CLASS="para"
>Let's look at an example of how this table is populated from the source code. Consider the <KBD
CLASS="command"
>testcase</KBD
> package:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>PACKAGE BODY testcase
IS
   PROCEDURE save (string_in IN VARCHAR2)
   IS
      n INTEGER := DBMS_SQL.OPEN_CURSOR;
   BEGIN
      UPDATE PLV_output SET program = string_in;
      IF SQL%ROWCOUNT = 0 
      THEN
         INSERT INTO PLV_output VALUES (string_in)
      END IF;
      PLVcmt.perform_commit;
   END;
END testcase;</PRE
></BLOCKQUOTE
><P
CLASS="para"
>After cataloguing all builtins in this package with the <KBD
CLASS="command"
>PLVcat.refbi</KBD
>, I will have four rows in the <KBD
CLASS="command"
>PLVrfrnc</KBD
><A
CLASS="indexterm"
NAME="ch18-idx-998593-0"
></A
> table as follows:</P
><TABLE
CLASS="informaltable"
BORDER="1"
CELLPADDING="3"
><THEAD
CLASS="thead"
><TR
CLASS="row"
VALIGN="TOP"
><TH
CLASS="entry"
ALIGN="LEFT"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>Owner</P
></TH
><TH
CLASS="entry"
ALIGN="LEFT"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>Name1</P
></TH
><TH
CLASS="entry"
ALIGN="LEFT"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>Name2</P
></TH
><TH
CLASS="entry"
ALIGN="LEFT"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>Type</P
></TH
><TH
CLASS="entry"
ALIGN="LEFT"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>Rowner</P
></TH
><TH
CLASS="entry"
ALIGN="LEFT"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>Rname1</P
></TH
><TH
CLASS="entry"
ALIGN="LEFT"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>Rname2</P
></TH
></TR
></THEAD
><TBODY
CLASS="tbody"
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
> <BLOCKQUOTE
><PRE
CLASS="programlisting"
>PLV</PRE
></BLOCKQUOTE
> </TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
> <BLOCKQUOTE
><PRE
CLASS="programlisting"
>testcase</PRE
></BLOCKQUOTE
> </TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
> <BLOCKQUOTE
><PRE
CLASS="programlisting"
>NULL</PRE
></BLOCKQUOTE
> </TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
> <BLOCKQUOTE
><PRE
CLASS="programlisting"
>PACKAGE BODY</PRE
></BLOCKQUOTE
> </TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
> <BLOCKQUOTE
><PRE
CLASS="programlisting"
>SYS</PRE
></BLOCKQUOTE
> </TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
> <BLOCKQUOTE
><PRE
CLASS="programlisting"
>DBMS_SQL</PRE
></BLOCKQUOTE
> </TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
> <BLOCKQUOTE
><PRE
CLASS="programlisting"
>OPEN_CURSOR</PRE
></BLOCKQUOTE
> </TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
> <BLOCKQUOTE
><PRE
CLASS="programlisting"
>PLV</PRE
></BLOCKQUOTE
> </TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
> <BLOCKQUOTE
><PRE
CLASS="programlisting"
>testcase</PRE
></BLOCKQUOTE
> </TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
> <BLOCKQUOTE
><PRE
CLASS="programlisting"
>NULL</PRE
></BLOCKQUOTE
> </TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
> <BLOCKQUOTE
><PRE
CLASS="programlisting"
>PACKAGE BODY</PRE
></BLOCKQUOTE
> </TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
> <BLOCKQUOTE
><PRE
CLASS="programlisting"
>SYS</PRE
></BLOCKQUOTE
> </TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
> <BLOCKQUOTE
><PRE
CLASS="programlisting"
>INSERT</PRE
></BLOCKQUOTE
> </TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
> <BLOCKQUOTE
><PRE
CLASS="programlisting"
>NULL</PRE
></BLOCKQUOTE
> </TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
> <BLOCKQUOTE
><PRE
CLASS="programlisting"
>PLV</PRE
></BLOCKQUOTE
> </TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
> <BLOCKQUOTE
><PRE
CLASS="programlisting"
>testcase</PRE
></BLOCKQUOTE
> </TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
> <BLOCKQUOTE
><PRE
CLASS="programlisting"
>NULL</PRE
></BLOCKQUOTE
> </TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
> <BLOCKQUOTE
><PRE
CLASS="programlisting"
>PACKAGE BODY</PRE
></BLOCKQUOTE
> </TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
> <BLOCKQUOTE
><PRE
CLASS="programlisting"
>SYS</PRE
></BLOCKQUOTE
> </TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
> <BLOCKQUOTE
><PRE
CLASS="programlisting"
>ROWCOUNT</PRE
></BLOCKQUOTE
> </TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
> <BLOCKQUOTE
><PRE
CLASS="programlisting"
>NULL</PRE
></BLOCKQUOTE
> </TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
> <BLOCKQUOTE
><PRE
CLASS="programlisting"
>PLV</PRE
></BLOCKQUOTE
> </TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
> <BLOCKQUOTE
><PRE
CLASS="programlisting"
>testcase</PRE
></BLOCKQUOTE
> </TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
> <BLOCKQUOTE
><PRE
CLASS="programlisting"
>NULL</PRE
></BLOCKQUOTE
> </TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
> <BLOCKQUOTE
><PRE
CLASS="programlisting"
>PACKAGE BODY</PRE
></BLOCKQUOTE
> </TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
> <BLOCKQUOTE
><PRE
CLASS="programlisting"
>SYS</PRE
></BLOCKQUOTE
> </TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
> <BLOCKQUOTE
><PRE
CLASS="programlisting"
>UPDATE</PRE
></BLOCKQUOTE
> </TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
> <BLOCKQUOTE
><PRE
CLASS="programlisting"
>NULL</PRE
></BLOCKQUOTE
> </TD
></TR
></TBODY
></TABLE
><P
CLASS="para"
>After extracting all non-keywords in this package with the <KBD
CLASS="command"
>PLVcat.refnonkw</KBD
>, I will have a single row in the <KBD
CLASS="command"
>PLVrfrnc</KBD
> table as follows:</P
><TABLE
CLASS="informaltable"
BORDER="1"
CELLPADDING="3"
><THEAD
CLASS="thead"
><TR
CLASS="row"
VALIGN="TOP"
><TH
CLASS="entry"
ALIGN="LEFT"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>Owner</P
></TH
><TH
CLASS="entry"
ALIGN="LEFT"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>Name1</P
></TH
><TH
CLASS="entry"
ALIGN="LEFT"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>Name2</P
></TH
><TH
CLASS="entry"
ALIGN="LEFT"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>Type</P
></TH
><TH
CLASS="entry"
ALIGN="LEFT"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>Rowner</P
></TH
><TH
CLASS="entry"
ALIGN="LEFT"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>Rname1</P
></TH
><TH
CLASS="entry"
ALIGN="LEFT"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>Rname2</P
></TH
></TR
></THEAD
><TBODY
CLASS="tbody"
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
> <BLOCKQUOTE
><PRE
CLASS="programlisting"
>PLV</PRE
></BLOCKQUOTE
> </TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
> <BLOCKQUOTE
><PRE
CLASS="programlisting"
>testcase</PRE
></BLOCKQUOTE
> </TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
> <BLOCKQUOTE
><PRE
CLASS="programlisting"
>NULL</PRE
></BLOCKQUOTE
> </TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
> <BLOCKQUOTE
><PRE
CLASS="programlisting"
>PACKAGE BODY</PRE
></BLOCKQUOTE
> </TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
> <BLOCKQUOTE
><PRE
CLASS="programlisting"
>PLV</PRE
></BLOCKQUOTE
> </TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
> <BLOCKQUOTE
><PRE
CLASS="programlisting"
>PLVCMT</PRE
></BLOCKQUOTE
> </TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
> <BLOCKQUOTE
><PRE
CLASS="programlisting"
>PERFORM_COMMIT</PRE
></BLOCKQUOTE
> </TD
></TR
></TBODY
></TABLE
><P
CLASS="para"
>Notice that PLVcat does not currently store references to non-<SPAN
CLASS="acronym"
>PL/SQL</SPAN
> objects, such as the <KBD
CLASS="command"
>PLV_output</KBD
> table. The reason is that it uses DBMS_UTILITY.NAME_RESOLVE to locate the code and this builtin does not work with non-<SPAN
CLASS="acronym"
>PL/SQL</SPAN
> objects.</P
><P
CLASS="para"
>To see a list of all program units that call the SUBSTR builtin function, you could execute this query:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>SELECT owner || '.' || name1 program
  FROM PLVrfrnc
 WHERE rname1 = 'SUBSTR';</PRE
></BLOCKQUOTE
><P
CLASS="para"
>To see a list of all program units that call the <KBD
CLASS="command"
>open_and_parse</KBD
> function of the PLVdyn package, you could execute this query:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>SELECT owner || '.' || name1 program
  FROM PLVrfrnc
 WHERE rname1 = 'PLVdyn'
   AND rname2 = 'OPEN_AND_PARSE';</PRE
></BLOCKQUOTE
><P
CLASS="para"
>The script named <KBD
CLASS="command"
>inctlg.sql</KBD
><A
CLASS="indexterm"
NAME="ch18-idx-998594-0"
></A
> contains a more complex and useful SQL statement for viewing the contents of the catalogue. The code for this script is:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>TTITLE 'Elements Referenced by &amp;1'
SET VERIFY OFF
SET PAGESIZE 66
SET LINESIZE 60
COLUMN element FORMAT A60
SELECT owner || '.' ||  
       name1 || ' CONTAINS ' || rname1  || 
       DECODE (rname2, NULL, NULL, '.' || rname2) element
  FROM PLVrfrnc
 WHERE name1 like UPPER ('&amp;1')
 ORDER BY owner, type, name1, rname1, rname2;</PRE
></BLOCKQUOTE
><P
CLASS="para"
>This script accepts as a single parameter the name of the program whose references you wish to view. Executing this script for the <KBD
CLASS="command"
>testcase</KBD
> package body provides the following output:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>SQL&gt; start inrfrnc testcase
Sat Jun 01                                         page    1
              Elements Referenced by testcase
ELEMENT
------------------------------------------------------------
PLV.testcase CONTAINS DBMS_SQL.OPEN_CURSOR
PLV.testcase CONTAINS INSERT
PLV.testcase CONTAINS INSTR
PLV.testcase CONTAINS ROWCOUNT
PLV.testcase CONTAINS UPDATE
<A
CLASS="indexterm"
NAME="ch18-idx-998595-0"
></A
><A
CLASS="indexterm"
NAME="ch18-idx-998595-1"
></A
><A
CLASS="indexterm"
NAME="ch18-idx-998595-2"
></A
>PLV.testcase CONTAINS PLVcmt.PERFORM_COMMIT</PRE
></BLOCKQUOTE
><DIV
CLASS="sidebar"
><H4
CLASS="sidebar"
><A
CLASS="title"
NAME="AUTOID-19471"
>Special Notes on PLVcat</A
></H4
><P
CLASS="para"
>Here are some factors to consider when working with PLVcat:</P
><UL
CLASS="itemizedlist"
><LI
CLASS="listitem"
><P
CLASS="para"
>The PLVcat package supports only the ALL_SOURCE data dictionary view as a source repository for the <SPAN
CLASS="acronym"
>PL/SQL</SPAN
> source code. Future versions of PL/Vision Professional will support reading from operating system files.</P
></LI
><LI
CLASS="listitem"
><P
CLASS="para"
>The <KBD
CLASS="command"
>build</KBD
> program performs a commit after completing its inserts into the <KBD
CLASS="command"
>PLVctlg</KBD
> table. The <KBD
CLASS="command"
>refnonkw</KBD
> and <KBD
CLASS="command"
>refbi</KBD
> programs perform a commit after completing their inserts into the <KBD
CLASS="command"
>PLVrfrnc</KBD
> table. These commits are executed through the PLVcmt package, so you can turn off commit processing by executing the <KBD
CLASS="command"
>PLVcmt.turn_off</KBD
> toggle (see <A
CLASS="xref"
HREF="ch20_01.htm"
>Chapter 20, <CITE
CLASS="chapter"
>PLVcmt and PLVrb: Commit and Rollback Processing </CITE
></A
>).<A
CLASS="indexterm"
NAME="ch18-idx-998596-0"
></A
><A
CLASS="indexterm"
NAME="ch18-idx-998596-1"
></A
><A
CLASS="indexterm"
NAME="ch18-idx-998596-2"
></A
></P
></LI
></UL
></DIV
></DIV
></DIV
></DIV
><DIV
CLASS="htmlnav"
><P
></P
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch18_01.htm"
TITLE="18.1 PLVcase: Converting the Case of PL/SQL Programs"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 18.1 PLVcase: Converting the Case of PL/SQL Programs"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="book"
HREF="index.htm"
TITLE="Advanced Oracle PL/SQL Programming with Packages"
><IMG
SRC="../gifs/txthome.gif"
ALT="Advanced Oracle PL/SQL Programming with Packages"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="part"
HREF="part05.htm"
TITLE="V. Plug-and-Play Packages"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: V. Plug-and-Play Packages"
BORDER="0"></A
></TD
></TR
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
>18.1 PLVcase: Converting the Case of PL/SQL Programs</TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="index"
HREF="index/idx_0.htm"
TITLE="Book Index"
><IMG
SRC="../gifs/index.gif"
ALT="Book Index"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
>V. Plug-and-Play Packages</TD
></TR
></TABLE
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"></DIV
><IMG
SRC="../gifs/smnavbar.gif"
USEMAP="#map"
BORDER="0"
ALT="The Oracle Library Navigation">

<P><font size="-1">
<a href="../copyrght.htm#copy">Copyright (c) 2000</a> O'Reilly & Associates. All rights reserved.
</font></P>

<MAP NAME="map">

<AREA SHAPE="RECT"
COORDS="0,0,35,30"
HREF="../index.htm"
ALT="Library Home">

<AREA SHAPE="RECT"
COORDS="40,0,95,30"
HREF="../prog2/index.htm"
ALT="Oracle PL/SQL Programming, 2nd. Ed.">

<AREA SHAPE="RECT"
COORDS="100,0,200,30"
HREF="../guide8i/index.htm"
ALT="Guide to Oracle 8i Features">

<AREA SHAPE="RECT"
COORDS="205,0,245,30"
HREF="../bipack/index.htm"
ALT="Oracle Built-in Packages">

<AREA SHAPE="RECT"
COORDS="250,0,320,30"
HREF="index.htm"
ALT="Advanced PL/SQL Programming with Packages">

<AREA SHAPE="RECT"
COORDS="325,0,420,30"
HREF="../webapp/index.htm"
ALT="Oracle Web Applications">

<AREA SHAPE="RECT"
COORDS="425,0,490,30"
HREF="../langpkt/index.htm"
ALT="Oracle PL/SQL Language Pocket Reference">

<AREA SHAPE="RECT"
COORDS="495,0,570,30"
HREF="../bipkt/index.htm"
ALT="Oracle PL/SQL Built-ins Pocket Reference">
</MAP>
</BODY
>
<!-- Mirrored from liso.cs.pusan.ac.kr by HTTrack Website Copier/3.x [XR&CO'2001] -->
</HTML
>
