<HTML
><HEAD
><TITLE
>[Chapter 12] 12.2 Code Repositories Supported by PLVio</TITLE
><META
NAME="DC.Creator"
CONTENT="Steven Feuerstein"><META
NAME="DC.Date"
CONTENT="2000-04-29T18:27:40Z"><META
NAME="DC.Format"
CONTENT="text/html"
SCHEME="MIME"><META
NAME="DC.Identifier"
CONTENT="O'Reilly and Associates-1-56592-238-7E"><META
NAME="DC.Language"
CONTENT="en-US"><META
NAME="DC.Publisher"
CONTENT="O'Reilly &amp; Associates, Inc."><META
NAME="DC.Source"
CONTENT="1-56592-238-7E"
SCHEME="ISBN"><META
NAME="DC.Subject.Keyword"
CONTENT="PL/SQL SQL Oracle Packages"><META
NAME="DC.Title"
CONTENT="Advanced Oracle PL/SQL Programming with Packages"><META
NAME="DC.Type"
CONTENT="Text.Monograph"><META
NAME="generator"
CONTENT="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><LINK
REL="stylesheet"
TYPE="text/css"
HREF="../style/style1.css"><LINK
REV="made"
HREF="mailto:online-books@oreilly.com"
TITLE="Online Books Comments"><LINK
REL="up"
HREF="ch12_01.htm"
TITLE="12. PLVio: Reading and Writing PL/SQL Source Code"><LINK
REL="prev"
HREF="ch12_01.htm"
TITLE="12.1 Why PLVio?"><LINK
REL="next"
HREF="ch12_03.htm#ch12-SECT-3.2"
TITLE="12.3 Managing the Source Repository"></HEAD>
<BODY><DIV CLASS="htmlnav"
><H1
><IMG
SRC="gifs/smbanner.gif"
ALT="Advanced Oracle PL/SQL Programming with Packages"
USEMAP="#srchmap"
BORDER="0"></H1
><MAP
NAME="srchmap"
><AREA
SHAPE="RECT"
COORDS="0,0,466,65"
HREF="index.htm"
ALT="Advanced Oracle PL/SQL Programming with Packages"><AREA
SHAPE="RECT"
COORDS="467,0,514,18"
HREF="jobjects/fsearch.htm"
ALT="Search this book"></MAP
><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch12_01.htm"
TITLE="12.1 Why PLVio?"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 12.1 Why PLVio?"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><SPAN
CLASS="NAVTITLE"
><A
CLASS="chapter"
REL="up"
HREF="ch12_01.htm"
TITLE="12. PLVio: Reading and Writing PL/SQL Source Code"
>Chapter 12<BR>PLVio: Reading and Writing PL/SQL Source Code</A
></SPAN
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch12_03.htm#ch12-SECT-3.2"
TITLE="12.3 Managing the Source Repository"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 12.3 Managing the Source Repository"
BORDER="0"></A
></TD
></TR
></TABLE
>&nbsp;<HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"></DIV
><DIV
CLASS="sect1"
><H2
CLASS="sect1"
><A
CLASS="title"
NAME="ch12-22277"
>12.2 Code Repositories Supported by PLVio</A
></H2
><P
CLASS="para"
>The various programs in the PLVio package that manage the source and target repositories and that read and write lines of text are independent of the particular sources and targets. When you call <KBD
CLASS="command"
>put_line</KBD
>, for instance, you do not write code that says "write this line to a file." You simply "say" with your code: "Write this line to the target." You define the target independently of the actual read and write commands. This separation of logical and physical aspects of <SPAN
CLASS="acronym"
>PL/SQL</SPAN
> code I/O makes it easy to support a wide range of repositories&nbsp;-- and to add to that range as <SPAN
CLASS="acronym"
>PL/SQL</SPAN
>'s capabilities expand.</P
><P
CLASS="para"
>When I first built PLVio, I was working with Release 2.1 of the <SPAN
CLASS="acronym"
>PL/SQL</SPAN
> language. I was able, therefore, to write PLVio to read to and write from database tables, but I could not read and write operating system files. That feature was not available until Release 2.3. I was still able to build the package and put it to use throughout PL/Vision. When Release 2.3 became available, I enhanced PLVio to support this new repository option and, with the simple act of a recompile <EM
CLASS="emphasis"
>only</EM
> of the PLVio package body, my existing utilities could now manipulate <SPAN
CLASS="acronym"
>PL/SQL</SPAN
> source code in operating system files!</P
><P
CLASS="para"
>The PLVio package supports the following types of repositories: </P
><UL
CLASS="itemizedlist"
><LI
CLASS="listitem"
><P
CLASS="para"
><SPAN
CLASS="acronym"
>PL/SQL</SPAN
> string</P
></LI
><LI
CLASS="listitem"
><P
CLASS="para"
>Database table </P
></LI
><LI
CLASS="listitem"
><P
CLASS="para"
><SPAN
CLASS="acronym"
>PL/SQL</SPAN
> table</P
></LI
><LI
CLASS="listitem"
><P
CLASS="para"
>Operating system file (server side)</P
></LI
><LI
CLASS="listitem"
><P
CLASS="para"
>Standard output (the screen, usually) </P
></LI
></UL
><P
CLASS="para"
>You set the source by calling <KBD
CLASS="command"
>PLVio.setsrc</KBD
>: you set the target by calling <KBD
CLASS="command"
>PLVio.settrg</KBD
>. Both are described in later sections. </P
><P
CLASS="para"
>Before diving into all the different programs, here are some details about how these different repositories are handled in PLVio, both as source and target.</P
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch12-SECT-2.1"
>12.2.1 String Source or Target</A
></H3
><P
CLASS="para"
>When you specify a string as source, you pass that string of text in to PLVio when you call the <KBD
CLASS="command"
>PLVio.setsrc</KBD
><A
CLASS="indexterm"
NAME="ch12-idx-998706-0"
></A
><A
CLASS="indexterm"
NAME="ch12-idx-998706-1"
></A
> procedure. At that time, your string will be assigned to the <KBD
CLASS="command"
>text_in</KBD
> field of the <KBD
CLASS="command"
>string_repos</KBD
>. The <KBD
CLASS="command"
>string_repos</KBD
> record is defined as an instance of the following record TYPE:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>  <A
CLASS="indexterm"
NAME="ch12-idx-998707-0"
></A
><A
CLASS="indexterm"
NAME="ch12-idx-998707-1"
></A
> TYPE string_repostype IS RECORD
      (text_in PLV.max_varchar2%TYPE,
       start_pos INTEGER := 1,
       text_len INTEGER := NULL,
       text_out PLV.max_varchar2%TYPE := NULL);</PRE
></BLOCKQUOTE
><P
CLASS="para"
>PLVio defines a line within this string source as all text up to the next newline character in the string (equivalent to CHR(10) and available as a named constant of <KBD
CLASS="command"
>PLVchr.newline_char</KBD
>). The maximum size of a line in PLVio is 2000 bytes, so you will need to break up a large program into multiple strings separated by a newline if you want to specify a string as a source. The maximize size of the entire text is 32,767&nbsp;-- the maximum length of a <SPAN
CLASS="acronym"
>PL/SQL</SPAN
> variable length string (represented in the above record definition by the <KBD
CLASS="command"
>PLV.max_varchar%TYPE</KBD
> anchored declaration).</P
><P
CLASS="para"
>You can view the current contents of the source or target strings by calling the <KBD
CLASS="command"
>PLVio.srcstg</KBD
> or <KBD
CLASS="command"
>PLVio.trgstg</KBD
> functions, respectively.</P
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch12-SECT-2.2"
>12.2.2 Database Source or Target</A
></H3
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="ch12-idx-998708-0"
></A
>You can use a database table as a source or target for <SPAN
CLASS="acronym"
>PL/SQL</SPAN
> code. In either case, you can use the default table (which is the <SPAN
CLASS="acronym"
>USER_SOURCE</SPAN
> data dictionary view for source and the <KBD
CLASS="command"
>PLV_source</KBD
> table for target) or you can specify your own table. Since PLVio uses PLVdyn to execute dynamic <SPAN
CLASS="acronym"
>SQL</SPAN
>, you can provide the name of the table and its columns. Regardless of their names, however, the columns of a database repository for PLVio must have at least four columns structured as shown in the record TYPE for a repository below:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>   TYPE <A
CLASS="indexterm"
NAME="ch12-idx-998709-0"
></A
><A
CLASS="indexterm"
NAME="ch12-idx-998709-1"
></A
>repos_rectype IS
   RECORD
      (name VARCHAR2(60),
       type VARCHAR2(10) := c_notset,
       name_col VARCHAR2(60) := 'name',
       type_col VARCHAR2(60) := 'type',
       line#_col VARCHAR2(60) := 'line',
       text_col VARCHAR2(60) := 'text',
       select_sql VARCHAR2(2000),
       insert_sql VARCHAR2(2000),
       where_clause VARCHAR2(1000) := NULL,
       starting_at VARCHAR2(1000) := NULL);</PRE
></BLOCKQUOTE
><P
CLASS="para"
>In other words, you will need a name string column, a type string column, a line number column, and a text string column. These columns can be named whatever you want and you can have other columns in addition to these four, but these columns must be available and specified to PLVio.</P
><P
CLASS="para"
>Given these requirements, the table shown in the left-hand column below is valid for use in PLVio, while the table in the right-hand column cannot be used, since it lacks a line number column:</P
><TABLE
CLASS="informaltable"
BORDER="1"
CELLPADDING="3"
><THEAD
CLASS="thead"
><TR
CLASS="row"
VALIGN="TOP"
><TH
CLASS="entry"
ALIGN="LEFT"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>Valid for PLVio Source</P
></TH
><TH
CLASS="entry"
ALIGN="LEFT"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>Not Usable for PLVio Source</P
></TH
></TR
></THEAD
><TBODY
CLASS="tbody"
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
> <BLOCKQUOTE
><PRE
CLASS="programlisting"
>CREATE TABLE temp_source
   (progname VARCHAR2(100),
    progtype VARCHAR2(30),
    linenum INTEGER,
    linetext VARCHAR2(120));
</PRE
></BLOCKQUOTE
> </TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
> <BLOCKQUOTE
><PRE
CLASS="programlisting"
>CREATE TABLE temp_source
   (objname VARCHAR2(100),
    objtype VARCHAR2(30),
    objline VARCHAR2(120));
</PRE
></BLOCKQUOTE
> </TD
></TR
></TBODY
></TABLE
><P
CLASS="para"
>As you can see, the record TYPE for a PLVio repository also stores other database-related information, such as the dynamically constructed SELECT and INSERT strings and the optional WHERE clause.</P
><P
CLASS="para"
>You need to have SELECT privileges only on the source database table. You will need INSERT and DELETE authority on the target database table. You may not, therefore, specify the USER_SOURCE data dictionary view as the target for output from PLVio.</P
><P
CLASS="para"
>When you specify a database table as the source repository, you will also make use of the PLVobj package to indicate the schema, program name, and program type you are interested in. Examples of this dependency are shown in <A
CLASS="xref"
HREF="ch12_03.htm#ch12-SECT-3.2"
>Section 12.3, "Managing the Source Repository"</A
>.</P
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch12-SECT-2.3"
>12.2.3 PL/SQL Table Target</A
></H3
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="ch12-idx-998710-0"
></A
>If you want to avoid the <SPAN
CLASS="acronym"
>SQL</SPAN
> layer, you can use a <SPAN
CLASS="acronym"
>PL/SQL</SPAN
> table defined inside PLVio as the target for <SPAN
CLASS="acronym"
>PL/SQL</SPAN
> source code. PLVio does not currently support <SPAN
CLASS="acronym"
>PL/SQL</SPAN
> tables as sources for reading <SPAN
CLASS="acronym"
>PL/SQL</SPAN
> code. The <SPAN
CLASS="acronym"
>PL/SQL</SPAN
> table is defined in the PLVio specification as follows:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>   target_table PLVtab.vc2000_table;
   target_row BINARY_INTEGER;</PRE
></BLOCKQUOTE
><P
CLASS="para"
>Since the <KBD
CLASS="command"
>target_table</KBD
> is in the specification, a user of PLVio can directly access and change the contents of <KBD
CLASS="command"
>target_table</KBD
>. It is up to you to only use this table in ways that are appropriate to PLVio and/or your specific coding objectives.</P
><P
CLASS="para"
>The <KBD
CLASS="command"
>target_row</KBD
><A
CLASS="indexterm"
NAME="ch12-idx-998711-0"
></A
> variable will tell you how many lines of code are defined in the <SPAN
CLASS="acronym"
>PL/SQL</SPAN
> table. The row number is treated as the line number for the source code. Once you have populated the table, you can display its contents or pass the table as an argument to another program to process the data in that table.</P
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch12-SECT-2.4"
>12.2.4 File Source or Target</A
></H3
><P
CLASS="para"
>You can request that <KBD
CLASS="command"
>PLVio.put_line</KBD
> write its text to an operating system file. In this case, <KBD
CLASS="command"
>PLVio.put_line</KBD
> calls the <KBD
CLASS="command"
>PLVfile.put_line</KBD
> program. This procedure in turn calls the appropriate elements of the builtin UTL_FILE package to interact with the operating system file. For more information on the requirements and restrictions when working with UTL_FILE, see <A
CLASS="xref"
HREF="ch13_01.htm"
>Chapter 13, <CITE
CLASS="chapter"
>PLVfile: Reading and Writing Operating System Files</CITE
></A
>.</P
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch12-SECT-2.5"
>12.2.5 <A
CLASS="indexterm"
NAME="ch12-idx-998713-0"
></A
><A
CLASS="indexterm"
NAME="ch12-idx-998713-1"
></A
>Standard Output Target</A
></H3
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="ch12-idx-998712-0"
></A
>You can request that output from calls to <KBD
CLASS="command"
>PLVio.put_line</KBD
> be directed to standard output or the screen. When you do this, <KBD
CLASS="command"
>PLVio.put_line</KBD
> is, in effect, calling the DBMS_OUTPUT.PUT_LINE program to display output (although it does happen through the <KBD
CLASS="command"
>p</KBD
> package). This is the way that <KBD
CLASS="command"
>PLVgen</KBD
> generates its <SPAN
CLASS="acronym"
>PL/SQL</SPAN
> source code, for example. </P
><P
CLASS="para"
>So if you ever execute a PLVgen program to generate code and you don't see anything, check your PLVio target type (with a call to the <KBD
CLASS="command"
>PLVio.trgtype</KBD
> function). You might be writing your code to a file or <SPAN
CLASS="acronym"
>PL/SQL</SPAN
> table or database table!<A
CLASS="indexterm"
NAME="ch12-idx-998714-0"
></A
></P
></DIV
></DIV
><DIV
CLASS="htmlnav"
><P
></P
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch12_01.htm"
TITLE="12.1 Why PLVio?"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 12.1 Why PLVio?"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="book"
HREF="index.htm"
TITLE="Advanced Oracle PL/SQL Programming with Packages"
><IMG
SRC="../gifs/txthome.gif"
ALT="Advanced Oracle PL/SQL Programming with Packages"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch12_03.htm#ch12-SECT-3.2"
TITLE="12.3 Managing the Source Repository"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 12.3 Managing the Source Repository"
BORDER="0"></A
></TD
></TR
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
>12.1 Why PLVio?</TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="index"
HREF="index/idx_0.htm"
TITLE="Book Index"
><IMG
SRC="../gifs/index.gif"
ALT="Book Index"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
>12.3 Managing the Source Repository</TD
></TR
></TABLE
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"></DIV
><IMG
SRC="../gifs/smnavbar.gif"
USEMAP="#map"
BORDER="0"
ALT="The Oracle Library Navigation">

<P><font size="-1">
<a href="../copyrght.htm#copy">Copyright (c) 2000</a> O'Reilly & Associates. All rights reserved.
</font></P>

<MAP NAME="map">

<AREA SHAPE="RECT"
COORDS="0,0,35,30"
HREF="../index.htm"
ALT="Library Home">

<AREA SHAPE="RECT"
COORDS="40,0,95,30"
HREF="../prog2/index.htm"
ALT="Oracle PL/SQL Programming, 2nd. Ed.">

<AREA SHAPE="RECT"
COORDS="100,0,200,30"
HREF="../guide8i/index.htm"
ALT="Guide to Oracle 8i Features">

<AREA SHAPE="RECT"
COORDS="205,0,245,30"
HREF="../bipack/index.htm"
ALT="Oracle Built-in Packages">

<AREA SHAPE="RECT"
COORDS="250,0,320,30"
HREF="index.htm"
ALT="Advanced PL/SQL Programming with Packages">

<AREA SHAPE="RECT"
COORDS="325,0,420,30"
HREF="../webapp/index.htm"
ALT="Oracle Web Applications">

<AREA SHAPE="RECT"
COORDS="425,0,490,30"
HREF="../langpkt/index.htm"
ALT="Oracle PL/SQL Language Pocket Reference">

<AREA SHAPE="RECT"
COORDS="495,0,570,30"
HREF="../bipkt/index.htm"
ALT="Oracle PL/SQL Built-ins Pocket Reference">
</MAP>
</BODY
>
<!-- Mirrored from liso.cs.pusan.ac.kr by HTTrack Website Copier/3.x [XR&CO'2001] -->
</HTML
>
