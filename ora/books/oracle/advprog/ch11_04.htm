<HTML
><HEAD
><TITLE
>[Chapter 11] 11.4 Accessing ALL_OBJECTS </TITLE
><META
NAME="DC.Creator"
CONTENT="Steven Feuerstein"><META
NAME="DC.Date"
CONTENT="2000-04-29T18:27:27Z"><META
NAME="DC.Format"
CONTENT="text/html"
SCHEME="MIME"><META
NAME="DC.Identifier"
CONTENT="O'Reilly and Associates-1-56592-238-7E"><META
NAME="DC.Language"
CONTENT="en-US"><META
NAME="DC.Publisher"
CONTENT="O'Reilly &amp; Associates, Inc."><META
NAME="DC.Source"
CONTENT="1-56592-238-7E"
SCHEME="ISBN"><META
NAME="DC.Subject.Keyword"
CONTENT="PL/SQL SQL Oracle Packages"><META
NAME="DC.Title"
CONTENT="Advanced Oracle PL/SQL Programming with Packages"><META
NAME="DC.Type"
CONTENT="Text.Monograph"><META
NAME="generator"
CONTENT="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><LINK
REL="stylesheet"
TYPE="text/css"
HREF="../style/style1.css"><LINK
REV="made"
HREF="mailto:online-books@oreilly.com"
TITLE="Online Books Comments"><LINK
REL="up"
HREF="ch11_01.htm"
TITLE="11.  PLVobj: A Packaged Interface to ALL_OBJECTS"><LINK
REL="prev"
HREF="ch11_03.htm#ch11-SECT-3.2"
TITLE="11.3 Setting the Current Object"><LINK
REL="next"
HREF="ch11_05.htm"
TITLE="11.5 Binding Objects to a Dynamic Cursor"></HEAD>
<BODY><DIV CLASS="htmlnav"
><H1
><IMG
SRC="gifs/smbanner.gif"
ALT="Advanced Oracle PL/SQL Programming with Packages"
USEMAP="#srchmap"
BORDER="0"></H1
><MAP
NAME="srchmap"
><AREA
SHAPE="RECT"
COORDS="0,0,466,65"
HREF="index.htm"
ALT="Advanced Oracle PL/SQL Programming with Packages"><AREA
SHAPE="RECT"
COORDS="467,0,514,18"
HREF="jobjects/fsearch.htm"
ALT="Search this book"></MAP
><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch11_03.htm#ch11-SECT-3.2"
TITLE="11.3 Setting the Current Object"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 11.3 Setting the Current Object"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><SPAN
CLASS="NAVTITLE"
><A
CLASS="chapter"
REL="up"
HREF="ch11_01.htm"
TITLE="11.  PLVobj: A Packaged Interface to ALL_OBJECTS"
>Chapter 11<BR> PLVobj: A Packaged Interface to ALL_OBJECTS</A
></SPAN
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch11_05.htm"
TITLE="11.5 Binding Objects to a Dynamic Cursor"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 11.5 Binding Objects to a Dynamic Cursor"
BORDER="0"></A
></TD
></TR
></TABLE
>&nbsp;<HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"></DIV
><DIV
CLASS="sect1"
><H2
CLASS="sect1"
><A
CLASS="title"
NAME="ch11-33551"
>11.4 Accessing ALL_OBJECTS </A
></H2
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="ch11-idx-998817-0"
></A
><A
CLASS="indexterm"
NAME="ch11-idx-998817-1"
></A
>Once you have set the current object in PLVobj (with either a call to <KBD
CLASS="command"
>setcurr</KBD
> or calls to the individual set programs), you can open, fetch from, and close the PLVobj cursor.</P
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch11-SECT-4.1"
>11.4.1 <A
CLASS="indexterm"
NAME="ch11-idx-998818-0"
></A
><A
CLASS="indexterm"
NAME="ch11-idx-998818-1"
></A
><A
CLASS="indexterm"
NAME="ch11-idx-998818-2"
></A
><A
CLASS="indexterm"
NAME="ch11-idx-998818-3"
></A
><A
CLASS="indexterm"
NAME="ch11-idx-998818-4"
></A
>Opening and Closing the PLVobj Cursor</A
></H3
><P
CLASS="para"
>To open the cursor, you call the <KBD
CLASS="command"
>open_objects</KBD
> procedure, defined as follows:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>   PROCEDURE open_objects;</PRE
></BLOCKQUOTE
><P
CLASS="para"
>This procedure first checks to see if the cursor is already open and, if not, takes that action. The implementation of <KBD
CLASS="command"
>open_objects</KBD
> is shown below:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>   PROCEDURE open_objects IS
   BEGIN
      IF obj_cur%ISOPEN
      THEN
         NULL;
      ELSE
         OPEN obj_cur;
      END IF;
   END;</PRE
></BLOCKQUOTE
><P
CLASS="para"
>When you are done fetching from the cursor, you may close it with the following procedure:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>   PROCEDURE <A
CLASS="indexterm"
NAME="ch11-idx-998819-0"
></A
>close_objects;</PRE
></BLOCKQUOTE
><P
CLASS="para"
>whose implementation makes sure that the cursor is actually open before attempting to close the cursor:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>   PROCEDURE close_objects IS
   BEGIN
      IF obj_cur%ISOPEN
      THEN
         CLOSE obj_cur;
      END IF;
   END;</PRE
></BLOCKQUOTE
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch11-SECT-4.2"
>11.4.2 Fetching from the PLVobj Cursor</A
></H3
><P
CLASS="para"
>Once the cursor is open, you will usually want to fetch rows from the result set. You do this with the <KBD
CLASS="command"
>fetch_object</KBD
><A
CLASS="indexterm"
NAME="ch11-idx-998820-0"
></A
><A
CLASS="indexterm"
NAME="ch11-idx-998820-1"
></A
> procedure, which is overloaded as follows:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>PROCEDURE fetch_object;
PROCEDURE fetch_object (name_out OUT VARCHAR2, type_out OUT VARCHAR2);</PRE
></BLOCKQUOTE
><P
CLASS="para"
>If you call <KBD
CLASS="command"
>fetch_objects</KBD
> without providing any OUT arguments, the name and type will be passed directly into the current object variables, <KBD
CLASS="command"
>v_currname</KBD
> and <KBD
CLASS="command"
>v_currtype</KBD
>. </P
><P
CLASS="para"
>If, on the other hand, you provide two return values in the call to <KBD
CLASS="command"
>fetch_object</KBD
>, the current object will remain unchanged and you will be able to do what you want with the fetched values. The call to <KBD
CLASS="command"
>fetch_object</KBD
> without arguments is, therefore, equivalent to:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>PLVobj.fetch_object (v_name, v_type);
PLVobj.setcurr (v_name, v_type);</PRE
></BLOCKQUOTE
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch11-SECT-4.3"
>11.4.3 Checking for Last Record</A
></H3
><P
CLASS="para"
>To determine when you have fetched all of the records from the cursor, use the <KBD
CLASS="command"
>more_objects</KBD
><A
CLASS="indexterm"
NAME="ch11-idx-998821-0"
></A
><A
CLASS="indexterm"
NAME="ch11-idx-998821-1"
></A
> function, whose header is:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>   FUNCTION more_objects RETURN BOOLEAN;</PRE
></BLOCKQUOTE
><P
CLASS="para"
>This function returns TRUE when the <KBD
CLASS="command"
>obj_cur</KBD
> is open and when <KBD
CLASS="command"
>obj_cur%FOUND</KBD
> returns TRUE. In all other cases, the function returns FALSE (including when the PLVobj cursor is not even open).</P
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch11-SECT-4.4"
>11.4.4 Showing Objects with PLVobj</A
></H3
><P
CLASS="para"
>To see how all of these different cursor-oriented programs can be utilized, consider the following script (stored in <KBD
CLASS="command"
>showobj1.sql</KBD
>). </P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>DECLARE
   first_one BOOLEAN := TRUE;
BEGIN
   PLVobj.setcurr ('&amp;1');
   PLVobj.open_objects;
   LOOP
      PLVobj.fetch_object;
      EXIT WHEN NOT PLVobj.more_objects;
      PLVobj.showcurr (first_one);
      first_one := FALSE;
   END LOOP;
   PLVobj.close_objects;
END;
/</PRE
></BLOCKQUOTE
><P
CLASS="para"
>It sets the current object to the value passed in at the SQL*Plus command line. It then opens and fetches from the PLVobj cursor, exiting when <KBD
CLASS="command"
>more_objects</KBD
> returns FALSE. Finally, it closes the PLVobj cursor. This cursor close action is truly required. The PLVobj cursor is not declared in the scope of the anonymous block; instead, it is defined in the package body. After you open it, it will remain open for the duration of your session, unless you close it explicitly.</P
><P
CLASS="para"
>In the following example of a call to <KBD
CLASS="command"
>showobj1.sql</KBD
>, I ask to see all the package specifications in my account whose names start with "PLVC". I see that I have four packages.</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>SQL&gt; start showobj1 s:PLVc%
Schema.Name.Type
PLV.PLVCASE.PACKAGE
PLV.PLVCAT.PACKAGE
PLV.PLVCHR.PACKAGE
PLV.PLVCMT.PACKAGE</PRE
></BLOCKQUOTE
><P
CLASS="para"
>If you are not working in SQL*Plus, you can easily convert the <KBD
CLASS="command"
>showobj1.sql</KBD
> script into a procedure as follows:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>CREATE OR REPLACE PROCEDURE showobj (obj_in IN VARCHAR2)
IS
   first_one BOOLEAN := TRUE;
BEGIN
   PLVobj.setcurr (obj_in);
   PLVobj.open_objects;
   LOOP
      PLVobj.fetch_object;
      EXIT WHEN NOT PLVobj.more_objects;
      PLVobj.showcurr (first_one);
      first_one := FALSE;
   END LOOP;
   PLVobj.close_objects;
END;
/<A
CLASS="indexterm"
NAME="ch11-idx-998822-0"
></A
><A
CLASS="indexterm"
NAME="ch11-idx-998822-1"
></A
></PRE
></BLOCKQUOTE
></DIV
></DIV
><DIV
CLASS="htmlnav"
><P
></P
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch11_03.htm#ch11-SECT-3.2"
TITLE="11.3 Setting the Current Object"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 11.3 Setting the Current Object"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="book"
HREF="index.htm"
TITLE="Advanced Oracle PL/SQL Programming with Packages"
><IMG
SRC="../gifs/txthome.gif"
ALT="Advanced Oracle PL/SQL Programming with Packages"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch11_05.htm"
TITLE="11.5 Binding Objects to a Dynamic Cursor"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 11.5 Binding Objects to a Dynamic Cursor"
BORDER="0"></A
></TD
></TR
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
>11.3 Setting the Current Object</TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="index"
HREF="index/idx_0.htm"
TITLE="Book Index"
><IMG
SRC="../gifs/index.gif"
ALT="Book Index"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
>11.5 Binding Objects to a Dynamic Cursor</TD
></TR
></TABLE
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"></DIV
><IMG
SRC="../gifs/smnavbar.gif"
USEMAP="#map"
BORDER="0"
ALT="The Oracle Library Navigation">

<P><font size="-1">
<a href="../copyrght.htm#copy">Copyright (c) 2000</a> O'Reilly & Associates. All rights reserved.
</font></P>

<MAP NAME="map">

<AREA SHAPE="RECT"
COORDS="0,0,35,30"
HREF="../index.htm"
ALT="Library Home">

<AREA SHAPE="RECT"
COORDS="40,0,95,30"
HREF="../prog2/index.htm"
ALT="Oracle PL/SQL Programming, 2nd. Ed.">

<AREA SHAPE="RECT"
COORDS="100,0,200,30"
HREF="../guide8i/index.htm"
ALT="Guide to Oracle 8i Features">

<AREA SHAPE="RECT"
COORDS="205,0,245,30"
HREF="../bipack/index.htm"
ALT="Oracle Built-in Packages">

<AREA SHAPE="RECT"
COORDS="250,0,320,30"
HREF="index.htm"
ALT="Advanced PL/SQL Programming with Packages">

<AREA SHAPE="RECT"
COORDS="325,0,420,30"
HREF="../webapp/index.htm"
ALT="Oracle Web Applications">

<AREA SHAPE="RECT"
COORDS="425,0,490,30"
HREF="../langpkt/index.htm"
ALT="Oracle PL/SQL Language Pocket Reference">

<AREA SHAPE="RECT"
COORDS="495,0,570,30"
HREF="../bipkt/index.htm"
ALT="Oracle PL/SQL Built-ins Pocket Reference">
</MAP>
</BODY
>
<!-- Mirrored from liso.cs.pusan.ac.kr by HTTrack Website Copier/3.x [XR&CO'2001] -->
</HTML
>
