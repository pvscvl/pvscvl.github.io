<HTML
><HEAD
><TITLE
>[Chapter 2] 2.5 Constructing the Optimal Interface to Your Package</TITLE
><META
NAME="DC.Creator"
CONTENT="Steven Feuerstein"><META
NAME="DC.Date"
CONTENT="2000-04-29T18:21:57Z"><META
NAME="DC.Format"
CONTENT="text/html"
SCHEME="MIME"><META
NAME="DC.Identifier"
CONTENT="O'Reilly and Associates-1-56592-238-7E"><META
NAME="DC.Language"
CONTENT="en-US"><META
NAME="DC.Publisher"
CONTENT="O'Reilly &amp; Associates, Inc."><META
NAME="DC.Source"
CONTENT="1-56592-238-7E"
SCHEME="ISBN"><META
NAME="DC.Subject.Keyword"
CONTENT="PL/SQL SQL Oracle Packages"><META
NAME="DC.Title"
CONTENT="Advanced Oracle PL/SQL Programming with Packages"><META
NAME="DC.Type"
CONTENT="Text.Monograph"><META
NAME="generator"
CONTENT="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><LINK
REL="stylesheet"
TYPE="text/css"
HREF="../style/style1.css"><LINK
REV="made"
HREF="mailto:online-books@oreilly.com"
TITLE="Online Books Comments"><LINK
REL="up"
HREF="ch02_01.htm"
TITLE="2. Best Practices for Packages"><LINK
REL="prev"
HREF="ch02_04.htm"
TITLE="2.4 Organizing Package Source Code"><LINK
REL="next"
HREF="ch02_06.htm#ch02-SECT-6.3.1"
TITLE="2.6 Building Flexibility Into Your Packages"></HEAD>
<BODY><DIV CLASS="htmlnav"
><H1
><IMG
SRC="gifs/smbanner.gif"
ALT="Advanced Oracle PL/SQL Programming with Packages"
USEMAP="#srchmap"
BORDER="0"></H1
><MAP
NAME="srchmap"
><AREA
SHAPE="RECT"
COORDS="0,0,466,65"
HREF="index.htm"
ALT="Advanced Oracle PL/SQL Programming with Packages"><AREA
SHAPE="RECT"
COORDS="467,0,514,18"
HREF="jobjects/fsearch.htm"
ALT="Search this book"></MAP
><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch02_04.htm"
TITLE="2.4 Organizing Package Source Code"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 2.4 Organizing Package Source Code"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><SPAN
CLASS="NAVTITLE"
><A
CLASS="chapter"
REL="up"
HREF="ch02_01.htm"
TITLE="2. Best Practices for Packages"
>Chapter 2<BR>Best Practices for Packages</A
></SPAN
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch02_06.htm#ch02-SECT-6.3.1"
TITLE="2.6 Building Flexibility Into Your Packages"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 2.6 Building Flexibility Into Your Packages"
BORDER="0"></A
></TD
></TR
></TABLE
>&nbsp;<HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"></DIV
><DIV
CLASS="sect1"
><H2
CLASS="sect1"
><A
CLASS="title"
NAME="ch02-22305"
>2.5 Constructing the Optimal Interface to Your Package</A
></H2
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="ch02-idx-999972-0"
></A
><A
CLASS="indexterm"
NAME="ch02-idx-999972-1"
></A
>The interface to your package consists of the names of the public elements and, in the cases of procedures, functions, and cursors, the parameter lists and RETURN datatypes.</P
><P
CLASS="para"
>The interface of your package is, in the broadest sense, affected by almost every best practice in this chapter. There are several recommendations that apply more narrowly to the interface (particularly the parameter lists); those are covered in the following sections. Before delving into those particulars, however, I need     to step way back and address a philosophical issue of package design that is fundamental to making your packages as useful and usable as possible: the need to see other developers as users, and the impact that has on your package design.</P
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch02-SECT-5.1"
>2.5.1 Seeing Developers as Users</A
></H3
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="ch02-idx-999976-0"
></A
><A
CLASS="indexterm"
NAME="ch02-idx-999976-1"
></A
>The vast majority of the packages I build are utilities and components for other developers. <SPAN
CLASS="acronym"
>PL/SQL</SPAN
> developers are, in other words, my users. Now you are probably aware that developers generally don't have many good things to say about <EM
CLASS="emphasis"
>their</EM
> users. "Those users" are always modifying their requirements and are incredibly lazy; they change their minds on a daily or hourly basis; and they could care less about your resource issues. Why (I hear again and again), if it's not absolutely obvious and easy to navigate through an application, "those users" complain and complain&nbsp;-- and sometimes refuse outright to use your application. Ungrateful wretches.</P
><P
CLASS="para"
>Well, I have news for you: developers as users are no different from end users as users. They (and I include myself fully in this characterization) have a very low tolerance for rigmarole and wasted motion. They will use a utility I offer them only if they can understand it intuitively and put it to use instantly. I believe that attitude is appropriate. Our software should be smart and easy to use. Ease of use is, however, just the first requirement. Developers also want total <A
CLASS="indexterm"
NAME="ch02-idx-999977-0"
></A
>flexibility. They don't want to have to do things <EM
CLASS="emphasis"
>my</EM
> way just because I "wrote the book" on <SPAN
CLASS="acronym"
>PL/SQL</SPAN
> and wrote the package, too. </P
><P
CLASS="para"
>How do I know that my users will be so fussy? Because for the last year I have been struggling to use my own software and have constantly needed more flexibility in order to make that software useful to <EM
CLASS="emphasis"
>me</EM
>. I have watched PL/Vision grow both in number of packages and internal complexity of those packages. In the process I have taught myself several techniques that I explore in this section. You'll see these over and over again in PL/Vision (especially the building into my packages of toggles and windows).</P
><P
CLASS="para"
>As far as I am concerned, it is always worth it for me to spend more time in the design and development of my code if it results in programs that are smarter and therefore easier to use. I don't necessarily believe that we should follow the tenet that the user is always right, but we should generally take a more respectful view towards our users&nbsp;-- especially the developer ones. In almost every case, they have a legitimate gripe. Computers and the software installed on them are not nearly as intuitive and accessible as they should be. Do your part in your design of <SPAN
CLASS="acronym"
>PL/SQL</SPAN
> packages to improve that situation.</P
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch02-SECT-5.2"
>2.5.2 Making Your Programs Case-Insensitive</A
></H3
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="ch02-idx-999978-0"
></A
><A
CLASS="indexterm"
NAME="ch02-idx-999978-1"
></A
>Make sure users don't trip over senseless obstacles on the path to using your programs. A common source of frustration is the requirement that arguments to a program be in one case or another (usually upper or lower).</P
><P
CLASS="para"
>Consider the following program:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>CREATE OR REPLACE FUNCTION twice 
   (string_in IN VARCHAR2, action_in IN VARCHAR2)
RETURN VARCHAR2
IS
BEGIN
   IF action_in = 'UL'
   THEN
      RETURN (UPPER (string_in) || LOWER (string_in));      
      
   ELSIF action_in = 'LU'
   THEN
      RETURN (LOWER (string_in) || UPPER (string_in));      
      
   ELSIF action_in = 'N' 
   THEN
      RETURN string_in || string_in;
   END IF; 
END twice;
/</PRE
></BLOCKQUOTE
><P
CLASS="para"
>This function (which is not even defined inside a package; this best practice, like many others, applies equally to standalone modules as well) returns a string concatenated to itself, with some optional case-conversion action. You pass it UL or LU or N, and the appropriate transformation of the string is made. But what if someone calls <KBD
CLASS="command"
>twice</KBD
> as follows?</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>bigger_string := twice (smaller_string, 'ul');</PRE
></BLOCKQUOTE
><P
CLASS="para"
>The <SPAN
CLASS="acronym"
>PL/SQL</SPAN
> runtime engine will actually raise an exception:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>ORA-06503: PL/SQL: Function returned without value</PRE
></BLOCKQUOTE
><P
CLASS="para"
>This is very poor behavior by the function. If developers are going to reuse your code, they need to get dependable results from it. It should never raise the -6503 exception or, in general, any exception at all. Instead it should return a value that indicates a problem whenever possible. Beyond that, users of <KBD
CLASS="command"
>twice</KBD
> should not have to care about the case of the string they pass for the action code. Your program should automatically force all entries of this kind (action codes and types) to either lower- or upper-case and then proceed from there. The best way to do this, I have found, is to declare a local variable that accepts as a default value the case-converted argument. This technique is shown in the following example:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>CREATE OR REPLACE FUNCTION twice 
   (string_in IN VARCHAR2, action_in IN VARCHAR2)
RETURN VARCHAR2
IS
   v_action VARCHAR2(10) := UPPER (action_in);
BEGIN</PRE
></BLOCKQUOTE
><P
CLASS="para"
>With this approach, you never reference the parameter <KBD
CLASS="command"
>action_in</KBD
> in the function. Instead, you work with <KBD
CLASS="command"
>v_action</KBD
> in the body of the function, and case is never an issue. This may seem like a small issue, but it can loom large when a developer is under lots of pressure, wants to use your code, and fails the first three times because the case is wrong or the literal used for the action code is in some way erroneous.</P
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch02-SECT-5.3"
>2.5.3 Avoiding Need for User to Know and Pass Literals</A
></H3
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="ch02-idx-999979-0"
></A
><A
CLASS="indexterm"
NAME="ch02-idx-999979-1"
></A
><A
CLASS="indexterm"
NAME="ch02-idx-999979-2"
></A
>If you follow the advice of the previous section, a user of the <KBD
CLASS="command"
>twice</KBD
> function will be able to enter <KBD
CLASS="command"
>UL</KBD
>, <KBD
CLASS="command"
>ul</KBD
>, <KBD
CLASS="command"
>uL</KBD
>, <KBD
CLASS="command"
>LU</KBD
>, <KBD
CLASS="command"
>lu</KBD
>, <KBD
CLASS="command"
>N</KBD
>, or <KBD
CLASS="command"
>n,</KBD
> and the program will react properly. But in an ideal world, users wouldn't even have to know about these literal values&nbsp;-- and they certainly wouldn't have to place such literals in their program. What if someone decides to change the particular constants used by <KBD
CLASS="command"
>twice</KBD
> to recognize different kinds of actions?</P
><P
CLASS="para"
>Removing literals from your programs for these kinds of arguments is made particularly easy using packages. There are two ways to achieve this objective:</P
><OL
CLASS="orderedlist"
><LI
CLASS="listitem"
><P
CLASS="para"
>Provide separate programs for each of the different actions.</P
></LI
><LI
CLASS="listitem"
><P
CLASS="para"
>Provide package-based constants that hide the action values and offer a named element in their places.</P
></LI
></OL
><P
CLASS="para"
>Creating different program specifications for each action is practical only if there is a fixed number of actions. I use this approach in PLVexc; there, I convert a handler action argument in the handle procedure to four different procedures:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>PROCEDURE stop;
PROCEDURE recNstop;
PROCEDURE go;
PROCEDURE recNgo;</PRE
></BLOCKQUOTE
><P
CLASS="para"
>This proliferation of procedures is not desirable if you think that the set of possible actions might change or expand. Also, in some cases, you really want to stick with one overloaded name and not bewilder the user with a whole suite of programs. For example, if I took the PLVexc approach with the <KBD
CLASS="command"
>twice</KBD
> function I would end up with:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>FUNCTION twiceUL ...;
FUNCTION twiceLU ...;
FUNCTION twiceN ...;</PRE
></BLOCKQUOTE
><P
CLASS="para"
>As an alternative, I could define a set of constants, one for each action, as shown in the package specification below:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>CREATE OR REPLACE PACKAGE dup
IS
   lu CONSTANT VARCHAR2(1) := 'A';
   ul CONSTANT VARCHAR2(1) := 'B';
   n  CONSTANT VARCHAR2(1) := 'X';
   FUNCTION stg 
      (stg_in IN VARCHAR2, 
       action_in IN VARCHAR2 := n,
       num_in IN INTEGER := 1)
   RETURN VARCHAR2;
END dup;
/        </PRE
></BLOCKQUOTE
><P
CLASS="para"
>Notice that the <KBD
CLASS="command"
>twice</KBD
> function has now been replaced with <KBD
CLASS="command"
>dup.stg</KBD
>, a more generalized string-duplication function. The default action for a call to <KBD
CLASS="command"
>dup.stg</KBD
> is now the constant <KBD
CLASS="command"
>n</KBD
>, rather than the literal <KBD
CLASS="command"
>N</KBD
>. So if I want to duplicate a string 10 times and convert it to UPPER-lower format, I would call <KBD
CLASS="command"
>dup.stg</KBD
> as follows:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>v_bigone := dup.stg (v_ittybitty, dup.ul, 10);</PRE
></BLOCKQUOTE
><P
CLASS="para"
>Sure, I have to know the names of the constants, but I will be informed <EM
CLASS="emphasis"
>at compile time</EM
> if I got it wrong. This is a very important distinction from the mysterious, hard-to-trace error I will receive if I simply pass the wrong literal value. The compiler could care less about if I pass the right literal. There are no right or wrong literal values as far as the compiler is concerned; my code must therefore be qualitatively more robust to handle this error gracefully.</P
><P
CLASS="para"
>The other advantage to the package constant approach is that you can change the underlying values without affecting anyone's use of <I
CLASS="function"
>dup.stg</I
>. As you can see in the package specification, I deliberately gave these constants values that did not match the previous values. This will flush out old usages and force compliance with the use of the constants, rather than the literals. You don't have to do this, and may not be able to for reasons of backward compliance, but it is a useful technique to keep in mind.<A
CLASS="indexterm"
NAME="ch02-idx-999974-0"
></A
><A
CLASS="indexterm"
NAME="ch02-idx-999974-1"
></A
></P
></DIV
></DIV
><DIV
CLASS="htmlnav"
><P
></P
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch02_04.htm"
TITLE="2.4 Organizing Package Source Code"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 2.4 Organizing Package Source Code"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="book"
HREF="index.htm"
TITLE="Advanced Oracle PL/SQL Programming with Packages"
><IMG
SRC="../gifs/txthome.gif"
ALT="Advanced Oracle PL/SQL Programming with Packages"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch02_06.htm#ch02-SECT-6.3.1"
TITLE="2.6 Building Flexibility Into Your Packages"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 2.6 Building Flexibility Into Your Packages"
BORDER="0"></A
></TD
></TR
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
>2.4 Organizing Package Source Code</TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="index"
HREF="index/idx_0.htm"
TITLE="Book Index"
><IMG
SRC="../gifs/index.gif"
ALT="Book Index"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
>2.6 Building Flexibility Into Your Packages</TD
></TR
></TABLE
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"></DIV
><IMG
SRC="../gifs/smnavbar.gif"
USEMAP="#map"
BORDER="0"
ALT="The Oracle Library Navigation">

<P><font size="-1">
<a href="../copyrght.htm#copy">Copyright (c) 2000</a> O'Reilly & Associates. All rights reserved.
</font></P>

<MAP NAME="map">

<AREA SHAPE="RECT"
COORDS="0,0,35,30"
HREF="../index.htm"
ALT="Library Home">

<AREA SHAPE="RECT"
COORDS="40,0,95,30"
HREF="../prog2/index.htm"
ALT="Oracle PL/SQL Programming, 2nd. Ed.">

<AREA SHAPE="RECT"
COORDS="100,0,200,30"
HREF="../guide8i/index.htm"
ALT="Guide to Oracle 8i Features">

<AREA SHAPE="RECT"
COORDS="205,0,245,30"
HREF="../bipack/index.htm"
ALT="Oracle Built-in Packages">

<AREA SHAPE="RECT"
COORDS="250,0,320,30"
HREF="index.htm"
ALT="Advanced PL/SQL Programming with Packages">

<AREA SHAPE="RECT"
COORDS="325,0,420,30"
HREF="../webapp/index.htm"
ALT="Oracle Web Applications">

<AREA SHAPE="RECT"
COORDS="425,0,490,30"
HREF="../langpkt/index.htm"
ALT="Oracle PL/SQL Language Pocket Reference">

<AREA SHAPE="RECT"
COORDS="495,0,570,30"
HREF="../bipkt/index.htm"
ALT="Oracle PL/SQL Built-ins Pocket Reference">
</MAP>
</BODY
>
<!-- Mirrored from liso.cs.pusan.ac.kr by HTTrack Website Copier/3.x [XR&CO'2001] -->
</HTML
>
