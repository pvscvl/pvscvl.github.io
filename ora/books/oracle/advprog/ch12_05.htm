<HTML
><HEAD
><TITLE
>[Chapter 12] 12.5 Managing the Target Repository</TITLE
><META
NAME="DC.Creator"
CONTENT="Steven Feuerstein"><META
NAME="DC.Date"
CONTENT="2000-04-29T18:27:53Z"><META
NAME="DC.Format"
CONTENT="text/html"
SCHEME="MIME"><META
NAME="DC.Identifier"
CONTENT="O'Reilly and Associates-1-56592-238-7E"><META
NAME="DC.Language"
CONTENT="en-US"><META
NAME="DC.Publisher"
CONTENT="O'Reilly &amp; Associates, Inc."><META
NAME="DC.Source"
CONTENT="1-56592-238-7E"
SCHEME="ISBN"><META
NAME="DC.Subject.Keyword"
CONTENT="PL/SQL SQL Oracle Packages"><META
NAME="DC.Title"
CONTENT="Advanced Oracle PL/SQL Programming with Packages"><META
NAME="DC.Type"
CONTENT="Text.Monograph"><META
NAME="generator"
CONTENT="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><LINK
REL="stylesheet"
TYPE="text/css"
HREF="../style/style1.css"><LINK
REV="made"
HREF="mailto:online-books@oreilly.com"
TITLE="Online Books Comments"><LINK
REL="up"
HREF="ch12_01.htm"
TITLE="12. PLVio: Reading and Writing PL/SQL Source Code"><LINK
REL="prev"
HREF="ch12_04.htm#ch12-SECT-4.3"
TITLE="12.4 The Source WHERE Clause"><LINK
REL="next"
HREF="ch12_06.htm"
TITLE="12.6 Reading From the Source"></HEAD>
<BODY><DIV CLASS="htmlnav"
><H1
><IMG
SRC="gifs/smbanner.gif"
ALT="Advanced Oracle PL/SQL Programming with Packages"
USEMAP="#srchmap"
BORDER="0"></H1
><MAP
NAME="srchmap"
><AREA
SHAPE="RECT"
COORDS="0,0,466,65"
HREF="index.htm"
ALT="Advanced Oracle PL/SQL Programming with Packages"><AREA
SHAPE="RECT"
COORDS="467,0,514,18"
HREF="jobjects/fsearch.htm"
ALT="Search this book"></MAP
><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch12_04.htm#ch12-SECT-4.3"
TITLE="12.4 The Source WHERE Clause"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 12.4 The Source WHERE Clause"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><SPAN
CLASS="NAVTITLE"
><A
CLASS="chapter"
REL="up"
HREF="ch12_01.htm"
TITLE="12. PLVio: Reading and Writing PL/SQL Source Code"
>Chapter 12<BR>PLVio: Reading and Writing PL/SQL Source Code</A
></SPAN
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch12_06.htm"
TITLE="12.6 Reading From the Source"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 12.6 Reading From the Source"
BORDER="0"></A
></TD
></TR
></TABLE
>&nbsp;<HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"></DIV
><DIV
CLASS="sect1"
><H2
CLASS="sect1"
><A
CLASS="title"
NAME="ch12-22754"
>12.5 Managing the Target Repository</A
></H2
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="ch12-idx-998729-0"
></A
><A
CLASS="indexterm"
NAME="ch12-idx-998729-1"
></A
>After reading about how to manage the source repository, you will probably be relieved to find that there is much less complexity involved in working with the target repository. Since the target is on the receiving end, there is no need to fiddle with the WHERE clause. You simply set and initialize the target, and then you are ready to write into that repository.</P
><P
CLASS="para"
>The <KBD
CLASS="command"
>settrg</KBD
><A
CLASS="indexterm"
NAME="ch12-idx-998730-0"
></A
> procedure defines the type of repository and its structure. The header for <KBD
CLASS="command"
>settrg</KBD
> is:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>PROCEDURE settrg
   (trgtype_in IN VARCHAR2,
    name_in IN VARCHAR2 := 'PLV_source',
    target_name_col_in IN VARCHAR2 := 'name',
    trgtype_col_in IN VARCHAR2 := 'type',
    target_line#_col_in IN VARCHAR2 := 'line',
    target_text_col_in IN VARCHAR2 := 'text');</PRE
></BLOCKQUOTE
><P
CLASS="para"
>The first argument, <KBD
CLASS="command"
>trgtype_in</KBD
>, is the type of repository. The second argument, <KBD
CLASS="command"
>name_in</KBD
>, is the name of the repository. Its content varies according to the type of repository and is explained below. The third through sixth arguments provide the names of the columns required for a database table target. The default values match the structure of the default table (<KBD
CLASS="command"
>PLV_source</KBD
>).</P
><P
CLASS="para"
>The <KBD
CLASS="command"
>settrg</KBD
> procedure transfers the arguments to the <KBD
CLASS="command"
>trgrep</KBD
> record, which is defined using the <KBD
CLASS="command"
>repos_rectype</KBD
> shown earlier. If you are using a database target, then the <A
CLASS="indexterm"
NAME="ch12-idx-998731-0"
></A
>INSERT statement that will be used to write lines to that table is constructed as follows:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>trgrep.insert_sql :=
   'INSERT INTO ' || trgrep.name ||
      '( ' ||
      target_name_col_in || ', ' ||
      trgtype_col_in || ', ' ||
      target_line#_col_in || ', ' ||
      target_text_col_in || ') ' ||
   'VALUES (:name, :type, :line, :text)';</PRE
></BLOCKQUOTE
><P
CLASS="para"
>Notice that in the INSERT statement the name of the table and its columns are not hard-coded. You can establish those names in your call to <KBD
CLASS="command"
>PLVio.settrg</KBD
>. For example, if the target table is structured like this:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>CREATE TABLE temp_target
   (progname VARCHAR2(100),
    progtype VARCHAR2(30),
    linenum INTEGER,
    linetext VARCHAR2(120));</PRE
></BLOCKQUOTE
><P
CLASS="para"
>then you would need to call <KBD
CLASS="command"
>settrg</KBD
> as follows:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>PLVio.settrg
    (PLV.dbtab, 'temp_target', 
     'progname', 'progtype', 
     'linenum', 'linetext');</PRE
></BLOCKQUOTE
><P
CLASS="para"
>If you are using a string target, all arguments after the first are ignored. Lines of text are written to the <KBD
CLASS="command"
>string_repos.text_out</KBD
> field with newline characters inserted between lines.</P
><P
CLASS="para"
>If you are using a file target, then the <KBD
CLASS="command"
>name_in</KBD
> argument is the name of the file. All other arguments are ignored. Lines of text are written to the file in the order of execution. </P
><BLOCKQUOTE
CLASS="note"
><P
CLASS="para"
><STRONG
>NOTE:</STRONG
>  Only the Write mode (replacing current contents of file) is supported. You cannot use PLVio to <EM
CLASS="emphasis"
>append</EM
> to the end of a file.</P
></BLOCKQUOTE
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch12-SECT-5.1"
>12.5.1 Initializing the Target</A
></H3
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="ch12-idx-998732-0"
></A
><A
CLASS="indexterm"
NAME="ch12-idx-998732-1"
></A
>Since there are really no intermediate actions between setting and initializing the target repository, the first line of <KBD
CLASS="command"
>settrg</KBD
> executes <KBD
CLASS="command"
>inittrg</KBD
>, so there is no need for you to do so explicitly.</P
><P
CLASS="para"
>If the target is a <SPAN
CLASS="acronym"
>PL/SQL</SPAN
> table, the PLVio <KBD
CLASS="command"
>target_table</KBD
> is emptied. If the target is a string, <KBD
CLASS="command"
>string_repos.text_out</KBD
> is set to NULL. </P
><P
CLASS="para"
>Currently, if the target is a database table or file, no initialization actions are taken. You will, therefore, need to perform the appropriate management on these data structures before using the <KBD
CLASS="command"
>PLVio.put_line</KBD
> procedure.<A
CLASS="indexterm"
NAME="ch12-idx-998733-0"
></A
><A
CLASS="indexterm"
NAME="ch12-idx-998733-1"
></A
></P
></DIV
></DIV
><DIV
CLASS="htmlnav"
><P
></P
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch12_04.htm#ch12-SECT-4.3"
TITLE="12.4 The Source WHERE Clause"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 12.4 The Source WHERE Clause"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="book"
HREF="index.htm"
TITLE="Advanced Oracle PL/SQL Programming with Packages"
><IMG
SRC="../gifs/txthome.gif"
ALT="Advanced Oracle PL/SQL Programming with Packages"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch12_06.htm"
TITLE="12.6 Reading From the Source"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 12.6 Reading From the Source"
BORDER="0"></A
></TD
></TR
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
>12.4 The Source WHERE Clause</TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="index"
HREF="index/idx_0.htm"
TITLE="Book Index"
><IMG
SRC="../gifs/index.gif"
ALT="Book Index"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
>12.6 Reading From the Source</TD
></TR
></TABLE
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"></DIV
><IMG
SRC="../gifs/smnavbar.gif"
USEMAP="#map"
BORDER="0"
ALT="The Oracle Library Navigation">

<P><font size="-1">
<a href="../copyrght.htm#copy">Copyright (c) 2000</a> O'Reilly & Associates. All rights reserved.
</font></P>

<MAP NAME="map">

<AREA SHAPE="RECT"
COORDS="0,0,35,30"
HREF="../index.htm"
ALT="Library Home">

<AREA SHAPE="RECT"
COORDS="40,0,95,30"
HREF="../prog2/index.htm"
ALT="Oracle PL/SQL Programming, 2nd. Ed.">

<AREA SHAPE="RECT"
COORDS="100,0,200,30"
HREF="../guide8i/index.htm"
ALT="Guide to Oracle 8i Features">

<AREA SHAPE="RECT"
COORDS="205,0,245,30"
HREF="../bipack/index.htm"
ALT="Oracle Built-in Packages">

<AREA SHAPE="RECT"
COORDS="250,0,320,30"
HREF="index.htm"
ALT="Advanced PL/SQL Programming with Packages">

<AREA SHAPE="RECT"
COORDS="325,0,420,30"
HREF="../webapp/index.htm"
ALT="Oracle Web Applications">

<AREA SHAPE="RECT"
COORDS="425,0,490,30"
HREF="../langpkt/index.htm"
ALT="Oracle PL/SQL Language Pocket Reference">

<AREA SHAPE="RECT"
COORDS="495,0,570,30"
HREF="../bipkt/index.htm"
ALT="Oracle PL/SQL Built-ins Pocket Reference">
</MAP>
</BODY
>
<!-- Mirrored from liso.cs.pusan.ac.kr by HTTrack Website Copier/3.x [XR&CO'2001] -->
</HTML
>
