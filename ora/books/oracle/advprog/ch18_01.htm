<HTML
><HEAD
><TITLE
>[Chapter 18] PLVcase and PLVcat: Converting and Analyzing PL/SQL Code</TITLE
><META
NAME="DC.Creator"
CONTENT="Steven Feuerstein"><META
NAME="DC.Date"
CONTENT="2000-04-29T18:30:18Z"><META
NAME="DC.Format"
CONTENT="text/html"
SCHEME="MIME"><META
NAME="DC.Identifier"
CONTENT="O'Reilly and Associates-1-56592-238-7E"><META
NAME="DC.Language"
CONTENT="en-US"><META
NAME="DC.Publisher"
CONTENT="O'Reilly &amp; Associates, Inc."><META
NAME="DC.Source"
CONTENT="1-56592-238-7E"
SCHEME="ISBN"><META
NAME="DC.Subject.Keyword"
CONTENT="PL/SQL SQL Oracle Packages"><META
NAME="DC.Title"
CONTENT="Advanced Oracle PL/SQL Programming with Packages"><META
NAME="DC.Type"
CONTENT="Text.Monograph"><META
NAME="generator"
CONTENT="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><LINK
REL="stylesheet"
TYPE="text/css"
HREF="../style/style1.css"><LINK
REV="made"
HREF="mailto:online-books@oreilly.com"
TITLE="Online Books Comments"><LINK
REL="up"
HREF="part04.htm"
TITLE="IV. Developer Utility Packages"><LINK
REL="prev"
HREF="ch17_05.htm#ch17-SECT-5.2"
TITLE="17.5 Implementing PLVhlp"><LINK
REL="next"
HREF="ch18_02.htm#ch18-SECT-2.2"
TITLE="18.2 PLVcat: Cataloguing PL/SQL Source Code"></HEAD>
<BODY><DIV CLASS="htmlnav"
><H1
><IMG
SRC="gifs/smbanner.gif"
ALT="Advanced Oracle PL/SQL Programming with Packages"
USEMAP="#srchmap"
BORDER="0"></H1
><MAP
NAME="srchmap"
><AREA
SHAPE="RECT"
COORDS="0,0,466,65"
HREF="index.htm"
ALT="Advanced Oracle PL/SQL Programming with Packages"><AREA
SHAPE="RECT"
COORDS="467,0,514,18"
HREF="jobjects/fsearch.htm"
ALT="Search this book"></MAP
><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch17_05.htm#ch17-SECT-5.2"
TITLE="17.5 Implementing PLVhlp"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 17.5 Implementing PLVhlp"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><SPAN
CLASS="NAVTITLE"
>Chapter 18</SPAN
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch18_02.htm#ch18-SECT-2.2"
TITLE="18.2 PLVcat: Cataloguing PL/SQL Source Code"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 18.2 PLVcat: Cataloguing PL/SQL Source Code"
BORDER="0"></A
></TD
></TR
></TABLE
>&nbsp;<HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"></DIV
><DIV
CLASS="chapter"
><H1
CLASS="chapter"
><A
CLASS="title"
NAME="plsql-adv-ch-18"
>18. PLVcase and PLVcat: Converting and Analyzing PL/SQL Code</A
></H1
><DIV
CLASS="htmltoc"
><P
><B
>Contents:</B
><BR><A
CLASS="sect1"
HREF="#ch18-26514"
TITLE="18.1 PLVcase: Converting the Case of PL/SQL Programs"
>PLVcase: Converting the Case of PL/SQL Programs</A
><BR><A
CLASS="sect1"
HREF="ch18_02.htm#ch18-SECT-2.2"
TITLE="18.2 PLVcat: Cataloguing PL/SQL Source Code"
>PLVcat: Cataloguing PL/SQL Source Code</A
></P
><P
></P
></DIV
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="ch18-idx-998565-0"
></A
><A
CLASS="indexterm"
NAME="ch18-idx-998565-1"
></A
>PL/Vision provides two packages to convert and analyze <SPAN
CLASS="acronym"
>PL/SQL</SPAN
> source code: PLVcase and PLVcat. The PLVcase (PL/Vision CASE) package converts the case of <SPAN
CLASS="acronym"
>PL/SQL</SPAN
> source code so that it conforms to the UPPER-lower method (reserved words in uppercase, application-specific identifiers in lowercase). The PLVcat (PL/Vision CATalogue) package catalogues <SPAN
CLASS="acronym"
>PL/SQL</SPAN
> source code so that you can analyze the contents of your program for cross-references, dependencies, and so on. These two packages are explored in this chapter.</P
><DIV
CLASS="sect1"
><H2
CLASS="sect1"
><A
CLASS="title"
NAME="ch18-26514"
>18.1 PLVcase: Converting the Case of PL/SQL Programs</A
></H2
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="ch18-idx-998566-0"
></A
><A
CLASS="indexterm"
NAME="ch18-idx-998566-1"
></A
>The PLVcase conversion package converts the case of <SPAN
CLASS="acronym"
>PL/SQL</SPAN
> source code according to the UPPER-lower method: all reserved words are converted to upper-case, while all application-specific identifiers are converted to lowercase. The consistency of case in a program&nbsp;-- and, in particular, the UPPER-lower standard&nbsp;-- aids greatly in the ability of developers to read, understand, and maintain their (and others') code.</P
><P
CLASS="para"
>Consider the following package body definition:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>create or replace package body testcase
is
   procedure save (string_in in varchar2)
   is
      n integer := dbms_sql.open_cursor;
   begin
      update PLV_output set program = string_in;
      if sql%rowcount = 0
      then
         insert into PLV_output values (string_in);
      end if;
      PLVcmt.perform_commit;
   end;
end testcase;
/</PRE
></BLOCKQUOTE
><P
CLASS="para"
>This program is consistently indented to reveal the logical flow of the save procedure defined in the testcase package. Yet it is still difficult to read. With all the text in lowercase, the syntax and logic blurs into an indistinguishable stream of characters. </P
><P
CLASS="para"
>Here is the same package body after being passed through PLVcase:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>PACKAGE BODY testcase
IS
   PROCEDURE save (string_in IN VARCHAR2)
   IS
      n INTEGER := DBMS_SQL.OPEN_CURSOR;
   BEGIN
      UPDATE PLV_output SET program = string_in;
      IF SQL%ROWCOUNT = 0
      THEN
         INSERT INTO PLV_output VALUES (string_in);
      END IF;
      PLVcmt.perform_commit;
   END;
END testcase;</PRE
></BLOCKQUOTE
><P
CLASS="para"
>PLVcase is a general-purpose engine for case conversion. It relies on many different packages in PL/Vision to achieve a high degree of flexibility. For example, PLVcase can read and convert <SPAN
CLASS="acronym"
>PL/SQL</SPAN
> source code from the data dictionary, an operating system file (with <SPAN
CLASS="acronym"
>PL/SQL</SPAN
> Release 2.3), and even individual string variables. You can redirect PLVcase for both read and write by making the appropriate calls to the PLVio package. </P
><P
CLASS="para"
>PLVcase also relies heavily on the PLVtkn package. After all, if PLVcase is going to uppercase only keywords, it has to know which identifiers in a <SPAN
CLASS="acronym"
>PL/SQL</SPAN
> program are reserved words. This information is maintained in the <KBD
CLASS="command"
>PLV_token</KBD
> table, which in turn is made available through PLVtkn (see <A
CLASS="xref"
HREF="ch10_01.htm"
>Chapter 10, <CITE
CLASS="chapter"
>PLVprs, PLVtkn, and PLVprsps: Parsing Strings</CITE
></A
>).</P
><P
CLASS="para"
>The body of the PLVcase package is actually rather simple considering the complexity of its task. The following sections show how to use each of the different elements of the PLVcase package.</P
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch18-SECT-1.1"
>18.1.1 <A
CLASS="indexterm"
NAME="ch18-idx-998567-0"
></A
>The Various Conversion Procedures</A
></H3
><P
CLASS="para"
>PLVcase offers a sequence of procedures to convert increasingly complex text. The <KBD
CLASS="command"
>token</KBD
> procedure converts a single token.</P
><DL
CLASS="variablelist"
><DT
CLASS="term"
><CODE
CLASS="literal"
> line</CODE
></DT
><DD
CLASS="listitem"
><P
CLASS="para"
>Converts the text found with a record of the <KBD
CLASS="command"
>PLVio.line_type</KBD
> structure.</P
></DD
><DT
CLASS="term"
><CODE
CLASS="literal"
> string</CODE
></DT
><DD
CLASS="listitem"
><P
CLASS="para"
>Converts the text in a simple string.</P
></DD
><DT
CLASS="term"
><CODE
CLASS="literal"
> module</CODE
></DT
><DD
CLASS="listitem"
><P
CLASS="para"
>Converts all the lines of code in the specified module.</P
></DD
><DT
CLASS="term"
><CODE
CLASS="literal"
> modules</CODE
></DT
><DD
CLASS="listitem"
><P
CLASS="para"
>Converts multiple programs in a single pass.</P
></DD
></DL
><P
CLASS="para"
>As you would expect, <KBD
CLASS="command"
>line</KBD
> uses <KBD
CLASS="command"
>token</KBD
>, <KBD
CLASS="command"
>string</KBD
> uses <KBD
CLASS="command"
>line</KBD
>, <KBD
CLASS="command"
>module</KBD
> uses <KBD
CLASS="command"
>line</KBD
>, and <KBD
CLASS="command"
>modules</KBD
> uses <KBD
CLASS="command"
>module</KBD
>.</P
><P
CLASS="para"
>It is easy to use the conversion programs. The more complicated aspect of PLVcase arises in determining the source of the program (data dictionary view, file, string, etc.) and the target for the converted code. This is discussed later in the chapter.</P
><DIV
CLASS="sect3"
><H4
CLASS="sect3"
><A
CLASS="title"
NAME="ch18-SECT-1.1.1"
>18.1.1.1 Converting a single token</A
></H4
><P
CLASS="para"
>The <KBD
CLASS="command"
>token</KBD
><A
CLASS="indexterm"
NAME="ch18-idx-998569-0"
></A
> function can take two arguments as shown in the header:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>FUNCTION token (token_in IN VARCHAR2, pkg_in IN VARCHAR2 := NULL)
RETURN VARCHAR2</PRE
></BLOCKQUOTE
><P
CLASS="para"
>The second argument is an optional name of a package. If <KBD
CLASS="command"
>pkg_in</KBD
> is provided, that package name is prefixed onto the token value and then that string is case-converted.</P
><P
CLASS="para"
>Here is an example of using <KBD
CLASS="command"
>PLVcase.token</KBD
> to convert a single identifier:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>v_newtoken := PLVcase.token (v_oldtoken);</PRE
></BLOCKQUOTE
><P
CLASS="para"
>In this second example, I request conversion of a program from the DBMS_SQL package:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>v_newtoken := PLVcase.token ('open_cursor', 'dbms_sql');</PRE
></BLOCKQUOTE
><P
CLASS="para"
>In this case, <KBD
CLASS="command"
>v_newstring</KBD
> is set to OPEN_CURSOR. In other words, the package name is not prefixed onto the token name.</P
></DIV
><DIV
CLASS="sect3"
><H4
CLASS="sect3"
><A
CLASS="title"
NAME="ch18-SECT-1.1.2"
>18.1.1.2 <A
CLASS="indexterm"
NAME="ch18-idx-998568-0"
></A
>Converting a string</A
></H4
><P
CLASS="para"
>To convert the case of all tokens in a string, use one of the <KBD
CLASS="command"
>PLVcase.string</KBD
> program units. The <KBD
CLASS="command"
>string</KBD
> program is overloaded as follows:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>PROCEDURE string (string_inout IN OUT VARCHAR2);
FUNCTION string (string_in IN VARCHAR2) RETURN VARCHAR2;</PRE
></BLOCKQUOTE
><P
CLASS="para"
>I provide these two versions of <KBD
CLASS="command"
>string</KBD
> to support different applications of this functionality. In some cases you just want to pass a string to the PLVcase package for conversion. In this scenario, use the string procedure as follows:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>PLVcase.string (v_header);</PRE
></BLOCKQUOTE
><P
CLASS="para"
>Under other circumstances, you may want to preserve the original string value (it might, for example, be an IN parameter), as well as generating a case-converted version of the string. In this scenario, use the string function as follows:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>v_newstring := PLVcase.string (original_in);</PRE
></BLOCKQUOTE
><P
CLASS="para"
>Another use of PLVcase is illustrated by the PLVgen package. This package uses PLVcase to apply the proper case to any symbolic default values provided by the user. For example, I can call <KBD
CLASS="command"
>PLVgen.func</KBD
> to generate a function with a default return value that would have mixed cases as follows:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>SQL&gt; exec PLVgen.func ('tot_sales', 1, 'sales_to_date (sysdate)');</PRE
></BLOCKQUOTE
><P
CLASS="para"
>The function name, <KBD
CLASS="command"
>sales_to_date</KBD
>, should be in lowercase, while the argument to that function, SYSDATE, should be in uppercase. The construction of the initial return value inside the PLVgen package uses the <KBD
CLASS="command"
>PLVcase.string</KBD
> function to accomplish this effect:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>retval := 
   v_name || ' ' || v_datatype || ' := ' ||
   PLVcase.string (v_defval) || ';';</PRE
></BLOCKQUOTE
></DIV
><DIV
CLASS="sect3"
><H4
CLASS="sect3"
><A
CLASS="title"
NAME="ch18-SECT-1.1.3"
>18.1.1.3 <A
CLASS="indexterm"
NAME="ch18-idx-998570-0"
></A
><A
CLASS="indexterm"
NAME="ch18-idx-998570-1"
></A
>Converting a line</A
></H4
><P
CLASS="para"
>PLVcase is "PLVio-aware." It allows you to convert the text contained in a line record defined in the PLVio package. The header for the <KBD
CLASS="command"
>line</KBD
> procedure is:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>PROCEDURE line
   (line_in IN OUT PLVio.line_type,
    line_out IN OUT PLVio.line_type,
    found_out OUT BOOLEAN);</PRE
></BLOCKQUOTE
><P
CLASS="para"
>Notice that the original line record is left unchanged. Instead, the modified line text is deposited in an OUT record of the same line type. The <KBD
CLASS="command"
>found_out</KBD
> parameter is set to TRUE if at least one token is found in the line's text.</P
><P
CLASS="para"
>The <KBD
CLASS="command"
>PLVcase.line</KBD
> procedure makes use of <KBD
CLASS="command"
>PLVlex.get_next_token</KBD
> to parse out the next token in the line's text and then convert the case using PLVtkn. The <KBD
CLASS="command"
>PLVcase.string</KBD
> function, in turn, calls <KBD
CLASS="command"
>PLVcase.line</KBD
>. Finally, the <KBD
CLASS="command"
>PLVcase.string</KBD
> procedure calls the <KBD
CLASS="command"
>PLVcase.string</KBD
> function.</P
><P
CLASS="para"
>To give you a sense of the layering involved, here is the body of the <KBD
CLASS="command"
>PLVcase.string</KBD
> function:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>FUNCTION string (string_in IN VARCHAR2)
   RETURN VARCHAR2
IS
   line1 PLVio.line_type;
   line2 PLVio.line_type;
   code_found BOOLEAN := FALSE;
BEGIN
   first_token := TRUE;
   PLVio.initline (line1, string_in, LENGTH (string_in), 1);
   PLVio.initline (line2);   
   line (line1, line2, code_found);
   IF code_found 
   THEN
      RETURN line2.text;
   ELSE
      RETURN NULL;
   END IF;
END;</PRE
></BLOCKQUOTE
></DIV
><DIV
CLASS="sect3"
><H4
CLASS="sect3"
><A
CLASS="title"
NAME="ch18-SECT-1.1.4"
>18.1.1.4 Converting a module</A
></H4
><P
CLASS="para"
>The <KBD
CLASS="command"
>module</KBD
><A
CLASS="indexterm"
NAME="ch18-idx-998571-0"
></A
> procedure allows you to convert all the lines of code in a specified program unit with one procedure call. The header for <KBD
CLASS="command"
>module</KBD
> is as follows:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>PROCEDURE module
   (module_in IN VARCHAR2, 
    cor_in IN VARCHAR2 := c_usecor,
    last_module_in IN BOOLEAN := TRUE);</PRE
></BLOCKQUOTE
><P
CLASS="para"
>The three arguments of <KBD
CLASS="command"
>module</KBD
> are explained below:</P
><DL
CLASS="variablelist"
><DT
CLASS="term"
><CODE
CLASS="literal"
> module_in</CODE
></DT
><DD
CLASS="listitem"
><P
CLASS="para"
>The name of the module. You can pass in an nonqualified name, such as <KBD
CLASS="command"
>total_sales</KBD
>. You can also pass in a string in the format <EM
CLASS="emphasis"
>type:name</EM
>. Valid values for type are listed in the next section.</P
></DD
><DT
CLASS="term"
><CODE
CLASS="literal"
> cor_in</CODE
></DT
><DD
CLASS="listitem"
><P
CLASS="para"
>Use this argument to pass in the constant <KBD
CLASS="command"
>PLVcase.c_usecor</KBD
> if you want PLVcase to automatically attach CREATE OR REPLACE syntax in the converted source code. You do this if you are converting source code that will be recompiled back into the database using SQL*Plus.</P
></DD
><DT
CLASS="term"
><CODE
CLASS="literal"
> last_module_in</CODE
></DT
><DD
CLASS="listitem"
><P
CLASS="para"
>Pass in TRUE if this is the last module to be converted. The default is TRUE, since module is intended to convert a single program unit at a time. When <KBD
CLASS="command"
>last_module_in</KBD
> is TRUE, the PLVio-directed source is closed and all changes are saved. This argument is needed to allow <KBD
CLASS="command"
>PLVcase.modules</KBD
> to convert multiple program units.</P
></DD
></DL
><P
CLASS="para"
>The PLVcase package uses the PLVobj interface to the ALL_OBJECTS data dictionary view to identify the program or programs indicated by the user. PLVobj is flexible in interpreting your input. The following variations are allowed: <EM
CLASS="emphasis"
>name</EM
>, <EM
CLASS="emphasis"
>schema.name</EM
>, <EM
CLASS="emphasis"
>type:name</EM
>, and <EM
CLASS="emphasis"
>type:schema.name</EM
>. </P
><P
CLASS="para"
><KBD
CLASS="command"
>PLVcase.module</KBD
> relies on the PLVio to determine the location or target repository for the converted source code. If you have previously executed this statement:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>PLVio.settrg (PLV.pstab);</PRE
></BLOCKQUOTE
><P
CLASS="para"
>then the converted code will be placed in <KBD
CLASS="command"
>PLVio.target_table</KBD
>. If, on the other hand, you execute this statement:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>PLVio.settrg (PLV.stdout);</PRE
></BLOCKQUOTE
><P
CLASS="para"
>then you see the converted code scrolled onto your screen when the conversion process is complete.</P
><P
CLASS="para"
>You can also convert the case of more than one module at a time by calling the <KBD
CLASS="command"
>modules</KBD
> procedure, whose header is:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>PROCEDURE modules (module_spec_in IN VARCHAR2 := NULL);</PRE
></BLOCKQUOTE
><P
CLASS="para"
>The following examples using <KBD
CLASS="command"
>Plvcase.module</KBD
> and <KBD
CLASS="command"
>PLVcase.modules</KBD
> give you a sense of how you can apply this functionality in your own environment.</P
><OL
CLASS="orderedlist"
><LI
CLASS="listitem"
><P
CLASS="para"
>Convert a stored function named <KBD
CLASS="command"
>total_sales</KBD
> without CREATE OR REPLACE syntax as follows:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>PLVcase.module ('f:total_sales', PLVcase.c_nousecor);</PRE
></BLOCKQUOTE
></LI
><LI
CLASS="listitem"
><P
CLASS="para"
>Convert the case of (a) a single function and (b) all the package specifications in the current schema:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>SQL&gt; exec PLVcase.module ('total_sales');
SQL&gt; exec PLVcase.modules ('s:%');</PRE
></BLOCKQUOTE
></LI
></OL
><P
CLASS="para"
>In the call to <KBD
CLASS="command"
>PLVcase.modules</KBD
> I specify "s" or "specification" for the module type and "%" or "any and all" for the names of the modules.</P
></DIV
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch18-SECT-1.2"
>18.1.2 <A
CLASS="indexterm"
NAME="ch18-idx-998572-0"
></A
>A Script to Convert Programs</A
></H3
><P
CLASS="para"
>Most of the time when you use PLVcase on your source code, you will not simply execute a single call to a PLVcase procedure. PLVcase is too tightly integrated into and dependent on other packages in PL/Vision. For example, you first need to initialize the PLVio package so that PLVcase can find the original source code and properly write out the converted code.</P
><P
CLASS="para"
>I wrote the <KBD
CLASS="command"
>setcase.sql</KBD
> SQL*Plus script, shown in <A
CLASS="xref"
HREF="ch18_01.htm"
>Example 18.1</A
>, to make it easier for developers to use PLVcase properly. This program prompts you for the module or modules you wish to convert. It then assumes that you want to read the source code from the ALL_SOURCE data dictionary&nbsp;-- and calls <KBD
CLASS="command"
>PLVio.asrc</KBD
> to "make it so." It also assumes that you want the converted source code simply CREATEd OR REPLACEd back into the database. It accomplishes this with the following call:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>PLVio.settrg (PLV.dbtab);</PRE
></BLOCKQUOTE
><P
CLASS="para"
>This setting means that the converted code will be written to the <KBD
CLASS="command"
>PLV_source</KBD
> table. The <KBD
CLASS="command"
>setcase</KBD
> script then uses a SELECT on this table to write the new version of the source code to a command file called <KBD
CLASS="command"
>setcase.cmd</KBD
>. As a final step, <KBD
CLASS="command"
>setcase.sql</KBD
> executes the <KBD
CLASS="command"
>setcase.cmd</KBD
> file in SQL*Plus and the code is reinserted into the database.</P
><DIV
CLASS="example"
><H4
CLASS="example"
><A
CLASS="title"
NAME="ch18-31685"
>Example 18.1: The <A
CLASS="indexterm"
NAME="ch18-idx-998573-0"
></A
>setcase Script </A
></H4
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>SET ServerOutput ON
SET FEEDBACK OFF
SET VERIFY OFF
DELETE FROM PLV_source;
DECLARE
   modname VARCHAR2(100) := UPPER ('&amp;1');
   modname2 VARCHAR2(100);
   modtype VARCHAR2(100);
   modschema VARCHAR2(100);
   modstring VARCHAR2(100);
   delim_loc INTEGER;
BEGIN
   IF INSTR (modname, '%') &gt; 0 OR INSTR (modname, ':') = 0
   THEN
      /* Doing &gt;1 module. */
      p.l ('=========================');
      p.l ('PL/Vision Case Conversion');
      p.l ('=========================');
      p.l ('Converting ' || modname || '...');
      PLVio.asrc;
      PLVio.settrg (PLV.dbtab);
      PLVcase.modules (modname);
   ELSE
      modname2 := modname;
      PLVobj.convobj (modname, modtype, modschema);
      modstring := modtype || ' ' || modname;
      p.l ('=========================');
      p.l ('PL/Vision Case Conversion');
      p.l ('=========================');
      p.l ('Converting ' || modstring || '..');
      PLVio.asrc;
      PLVio.settrg (PLV.dbtab);
      PLVcase.module (modname2);
   END IF;
END;
/
prompt Generating program creation script...
set pagesize 0
set linesize 120
set termout off
column text format a120
spool setcase.cmd
SELECT text
  FROM PLV_source
 ORDER BY 
DECODE (type, 
        'PACKAGE',   1, 'PACKAGE BODY', 2,
        'PROCEDURE', 3, 'FUNCTION',     4, 
        5),
   name, line
/
spool off
set pagesize 25
set termout on
set feedback on
start setcase.cmd</PRE
></BLOCKQUOTE
></DIV
><P
CLASS="para"
>See the sections on the PLVobj and PLVio packages for more information about how you can alter the source and target repositories for the source code converted by PLVcase. You could, for instance, convert program units stored in Oracle Forms tables in the database.<A
CLASS="indexterm"
NAME="ch18-idx-998574-0"
></A
><A
CLASS="indexterm"
NAME="ch18-idx-998574-1"
></A
><A
CLASS="indexterm"
NAME="ch18-idx-998574-2"
></A
></P
></DIV
></DIV
></DIV
><DIV
CLASS="htmlnav"
><P
></P
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch17_05.htm#ch17-SECT-5.2"
TITLE="17.5 Implementing PLVhlp"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 17.5 Implementing PLVhlp"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="book"
HREF="index.htm"
TITLE="Advanced Oracle PL/SQL Programming with Packages"
><IMG
SRC="../gifs/txthome.gif"
ALT="Advanced Oracle PL/SQL Programming with Packages"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch18_02.htm#ch18-SECT-2.2"
TITLE="18.2 PLVcat: Cataloguing PL/SQL Source Code"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 18.2 PLVcat: Cataloguing PL/SQL Source Code"
BORDER="0"></A
></TD
></TR
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
>17.5 Implementing PLVhlp</TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="index"
HREF="index/idx_0.htm"
TITLE="Book Index"
><IMG
SRC="../gifs/index.gif"
ALT="Book Index"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
>18.2 PLVcat: Cataloguing PL/SQL Source Code</TD
></TR
></TABLE
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"></DIV
><IMG
SRC="../gifs/smnavbar.gif"
USEMAP="#map"
BORDER="0"
ALT="The Oracle Library Navigation">

<P><font size="-1">
<a href="../copyrght.htm#copy">Copyright (c) 2000</a> O'Reilly & Associates. All rights reserved.
</font></P>

<MAP NAME="map">

<AREA SHAPE="RECT"
COORDS="0,0,35,30"
HREF="../index.htm"
ALT="Library Home">

<AREA SHAPE="RECT"
COORDS="40,0,95,30"
HREF="../prog2/index.htm"
ALT="Oracle PL/SQL Programming, 2nd. Ed.">

<AREA SHAPE="RECT"
COORDS="100,0,200,30"
HREF="../guide8i/index.htm"
ALT="Guide to Oracle 8i Features">

<AREA SHAPE="RECT"
COORDS="205,0,245,30"
HREF="../bipack/index.htm"
ALT="Oracle Built-in Packages">

<AREA SHAPE="RECT"
COORDS="250,0,320,30"
HREF="index.htm"
ALT="Advanced PL/SQL Programming with Packages">

<AREA SHAPE="RECT"
COORDS="325,0,420,30"
HREF="../webapp/index.htm"
ALT="Oracle Web Applications">

<AREA SHAPE="RECT"
COORDS="425,0,490,30"
HREF="../langpkt/index.htm"
ALT="Oracle PL/SQL Language Pocket Reference">

<AREA SHAPE="RECT"
COORDS="495,0,570,30"
HREF="../bipkt/index.htm"
ALT="Oracle PL/SQL Built-ins Pocket Reference">
</MAP>
</BODY
>
<!-- Mirrored from liso.cs.pusan.ac.kr by HTTrack Website Copier/3.x [XR&CO'2001] -->
</HTML
>
