<HTML
><HEAD
><TITLE
>[Chapter 13] 13.3 Creating and Checking Existence of Files</TITLE
><META
NAME="DC.Creator"
CONTENT="Steven Feuerstein"><META
NAME="DC.Date"
CONTENT="2000-04-29T18:28:10Z"><META
NAME="DC.Format"
CONTENT="text/html"
SCHEME="MIME"><META
NAME="DC.Identifier"
CONTENT="O'Reilly and Associates-1-56592-238-7E"><META
NAME="DC.Language"
CONTENT="en-US"><META
NAME="DC.Publisher"
CONTENT="O'Reilly &amp; Associates, Inc."><META
NAME="DC.Source"
CONTENT="1-56592-238-7E"
SCHEME="ISBN"><META
NAME="DC.Subject.Keyword"
CONTENT="PL/SQL SQL Oracle Packages"><META
NAME="DC.Title"
CONTENT="Advanced Oracle PL/SQL Programming with Packages"><META
NAME="DC.Type"
CONTENT="Text.Monograph"><META
NAME="generator"
CONTENT="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><LINK
REL="stylesheet"
TYPE="text/css"
HREF="../style/style1.css"><LINK
REV="made"
HREF="mailto:online-books@oreilly.com"
TITLE="Online Books Comments"><LINK
REL="up"
HREF="ch13_01.htm"
TITLE="13. PLVfile: Reading and Writing Operating System Files"><LINK
REL="prev"
HREF="ch13_02.htm#ch13-SECT-2.1"
TITLE="13.2 Specifying the File in PLVfile"><LINK
REL="next"
HREF="ch13_04.htm"
TITLE="13.4 Opening and Closing Files"></HEAD>
<BODY><DIV CLASS="htmlnav"
><H1
><IMG
SRC="gifs/smbanner.gif"
ALT="Advanced Oracle PL/SQL Programming with Packages"
USEMAP="#srchmap"
BORDER="0"></H1
><MAP
NAME="srchmap"
><AREA
SHAPE="RECT"
COORDS="0,0,466,65"
HREF="index.htm"
ALT="Advanced Oracle PL/SQL Programming with Packages"><AREA
SHAPE="RECT"
COORDS="467,0,514,18"
HREF="jobjects/fsearch.htm"
ALT="Search this book"></MAP
><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch13_02.htm#ch13-SECT-2.1"
TITLE="13.2 Specifying the File in PLVfile"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 13.2 Specifying the File in PLVfile"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><SPAN
CLASS="NAVTITLE"
><A
CLASS="chapter"
REL="up"
HREF="ch13_01.htm"
TITLE="13. PLVfile: Reading and Writing Operating System Files"
>Chapter 13<BR>PLVfile: Reading and Writing Operating System Files</A
></SPAN
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch13_04.htm"
TITLE="13.4 Opening and Closing Files"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 13.4 Opening and Closing Files"
BORDER="0"></A
></TD
></TR
></TABLE
>&nbsp;<HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"></DIV
><DIV
CLASS="sect1"
><H2
CLASS="sect1"
><A
CLASS="title"
NAME="ch13-11568"
>13.3 Creating and Checking Existence of Files</A
></H2
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="ch13-idx-998487-0"
></A
><A
CLASS="indexterm"
NAME="ch13-idx-998487-1"
></A
><A
CLASS="indexterm"
NAME="ch13-idx-998487-2"
></A
>PLVfile provides a program (four overloaded versions, actually) to create a file. The headers for <KBD
CLASS="command"
>fcreate</KBD
> are the following:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>FUNCTION fcreate 
   (loc_in IN VARCHAR2, file_in IN VARCHAR2, line_in IN VARCHAR2)
RETURN UTL_FILE.FILE_TYPE;

FUNCTION fcreate (file_in IN VARCHAR2, line_in IN VARCHAR2 := NULL)
RETURN UTL_FILE.FILE_TYPE;

PROCEDURE fcreate 
   (loc_in IN VARCHAR2, file_in IN VARCHAR2, line_in IN VARCHAR2);

PROCEDURE fcreate (file_in IN VARCHAR2, line_in IN VARCHAR2 := NULL);</PRE
></BLOCKQUOTE
><P
CLASS="para"
>In versions of <KBD
CLASS="command"
>fcreate</KBD
><A
CLASS="indexterm"
NAME="ch13-idx-998488-0"
></A
> with three arguments, you provide the location, name, and single line to be deposited in the file. Notice that all three values are required. In versions of <KBD
CLASS="command"
>fcreate</KBD
> with two arguments, you provide the file specification (location and name combined, or just the name, in which case the default directory will be applied).</P
><P
CLASS="para"
>Notice that the overloading is not only among different parameter lists, but even different program types. I will explain this approach to overloading in PLVfile in this section; you will see it repeatedly throughout the package.</P
><P
CLASS="para"
>The overloading of <KBD
CLASS="command"
>fcreate</KBD
> achieves two objectives:</P
><OL
CLASS="orderedlist"
><LI
CLASS="listitem"
><P
CLASS="para"
>It allows the developer to either obtain the handle to the newly created file (the function versions) or ignore that file handle entirely (the procedure versions). You'll want to retrieve the handle if you plan to perform other actions on that file. If you only want to create the file and then move on to other business, it will be easier and more intuitive to use the procedure versions.</P
></LI
><LI
CLASS="listitem"
><P
CLASS="para"
>It allows the developer to provide the location and name separately (UTL_FILE style) or specify a single, combined string. The three-argument version requires all entries. The two-argument version allows you provide just a name; if you do not specify a line, it places the following default substitution line in the file:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
><A
CLASS="indexterm"
NAME="ch13-idx-998489-0"
></A
>v_subst_line VARCHAR2(200) :=
   'I make my disk light blink, therefore I am.';</PRE
></BLOCKQUOTE
></LI
></OL
><P
CLASS="para"
>When you call <KBD
CLASS="command"
>fcreate</KBD
>, it "initializes" a file to the line you provide (or the default line value) and then it closes the file if you have called the procedure version of <KBD
CLASS="command"
>fcreate</KBD
>. On the other hand, if you have called the <KBD
CLASS="command"
>fcreate</KBD
> function, PLVfile returns the handle to the file and then keeps the file open.</P
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch13-SECT-3.1"
>13.3.1 Checking a File's Existence</A
></H3
><P
CLASS="para"
>Perhaps you only want to create a file if it already exists. PLVfile offers the <KBD
CLASS="command"
>fexists</KBD
> function to provide you with this information. The headers for this overloaded function are:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>FUNCTION <A
CLASS="indexterm"
NAME="ch13-idx-998490-0"
></A
>fexists (loc_in IN VARCHAR2, file_in IN VARCHAR2)
RETURN BOOLEAN;

FUNCTION fexists (file_in IN VARCHAR2)
RETURN BOOLEAN;</PRE
></BLOCKQUOTE
><P
CLASS="para"
>You can provide separate locations and file names, or simply pass in the single string with combined information. The function returns TRUE if the file can be opened for read-only access successfully. If the file is already open, this function will return FALSE&nbsp;-- so use <KBD
CLASS="command"
>fexists</KBD
> with care.</P
></DIV
></DIV
><DIV
CLASS="htmlnav"
><P
></P
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch13_02.htm#ch13-SECT-2.1"
TITLE="13.2 Specifying the File in PLVfile"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 13.2 Specifying the File in PLVfile"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="book"
HREF="index.htm"
TITLE="Advanced Oracle PL/SQL Programming with Packages"
><IMG
SRC="../gifs/txthome.gif"
ALT="Advanced Oracle PL/SQL Programming with Packages"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch13_04.htm"
TITLE="13.4 Opening and Closing Files"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 13.4 Opening and Closing Files"
BORDER="0"></A
></TD
></TR
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
>13.2 Specifying the File in PLVfile</TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="index"
HREF="index/idx_0.htm"
TITLE="Book Index"
><IMG
SRC="../gifs/index.gif"
ALT="Book Index"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
>13.4 Opening and Closing Files</TD
></TR
></TABLE
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"></DIV
><IMG
SRC="../gifs/smnavbar.gif"
USEMAP="#map"
BORDER="0"
ALT="The Oracle Library Navigation">

<P><font size="-1">
<a href="../copyrght.htm#copy">Copyright (c) 2000</a> O'Reilly & Associates. All rights reserved.
</font></P>

<MAP NAME="map">

<AREA SHAPE="RECT"
COORDS="0,0,35,30"
HREF="../index.htm"
ALT="Library Home">

<AREA SHAPE="RECT"
COORDS="40,0,95,30"
HREF="../prog2/index.htm"
ALT="Oracle PL/SQL Programming, 2nd. Ed.">

<AREA SHAPE="RECT"
COORDS="100,0,200,30"
HREF="../guide8i/index.htm"
ALT="Guide to Oracle 8i Features">

<AREA SHAPE="RECT"
COORDS="205,0,245,30"
HREF="../bipack/index.htm"
ALT="Oracle Built-in Packages">

<AREA SHAPE="RECT"
COORDS="250,0,320,30"
HREF="index.htm"
ALT="Advanced PL/SQL Programming with Packages">

<AREA SHAPE="RECT"
COORDS="325,0,420,30"
HREF="../webapp/index.htm"
ALT="Oracle Web Applications">

<AREA SHAPE="RECT"
COORDS="425,0,490,30"
HREF="../langpkt/index.htm"
ALT="Oracle PL/SQL Language Pocket Reference">

<AREA SHAPE="RECT"
COORDS="495,0,570,30"
HREF="../bipkt/index.htm"
ALT="Oracle PL/SQL Built-ins Pocket Reference">
</MAP>
</BODY
>
<!-- Mirrored from liso.cs.pusan.ac.kr by HTTrack Website Copier/3.x [XR&CO'2001] -->
</HTML
>
