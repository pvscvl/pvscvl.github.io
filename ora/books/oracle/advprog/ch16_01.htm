<HTML
><HEAD
><TITLE
>[Chapter 16] PLVgen: Generating PL/SQL Programs</TITLE
><META
NAME="DC.Creator"
CONTENT="Steven Feuerstein"><META
NAME="DC.Date"
CONTENT="2000-04-29T18:28:54Z"><META
NAME="DC.Format"
CONTENT="text/html"
SCHEME="MIME"><META
NAME="DC.Identifier"
CONTENT="O'Reilly and Associates-1-56592-238-7E"><META
NAME="DC.Language"
CONTENT="en-US"><META
NAME="DC.Publisher"
CONTENT="O'Reilly &amp; Associates, Inc."><META
NAME="DC.Source"
CONTENT="1-56592-238-7E"
SCHEME="ISBN"><META
NAME="DC.Subject.Keyword"
CONTENT="PL/SQL SQL Oracle Packages"><META
NAME="DC.Title"
CONTENT="Advanced Oracle PL/SQL Programming with Packages"><META
NAME="DC.Type"
CONTENT="Text.Monograph"><META
NAME="generator"
CONTENT="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><LINK
REL="stylesheet"
TYPE="text/css"
HREF="../style/style1.css"><LINK
REV="made"
HREF="mailto:online-books@oreilly.com"
TITLE="Online Books Comments"><LINK
REL="up"
HREF="part04.htm"
TITLE="IV. Developer Utility Packages"><LINK
REL="prev"
HREF="ch15_04.htm#ch15-SECT-4.1"
TITLE="15.4 Implementing PLVvu"><LINK
REL="next"
HREF="ch16_02.htm#ch16-SECT-2.3.2"
TITLE="16.2 Code Generated by PLVgen"></HEAD>
<BODY><DIV CLASS="htmlnav"
><H1
><IMG
SRC="gifs/smbanner.gif"
ALT="Advanced Oracle PL/SQL Programming with Packages"
USEMAP="#srchmap"
BORDER="0"></H1
><MAP
NAME="srchmap"
><AREA
SHAPE="RECT"
COORDS="0,0,466,65"
HREF="index.htm"
ALT="Advanced Oracle PL/SQL Programming with Packages"><AREA
SHAPE="RECT"
COORDS="467,0,514,18"
HREF="jobjects/fsearch.htm"
ALT="Search this book"></MAP
><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch15_04.htm#ch15-SECT-4.1"
TITLE="15.4 Implementing PLVvu"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 15.4 Implementing PLVvu"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><SPAN
CLASS="NAVTITLE"
>Chapter 16</SPAN
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch16_02.htm#ch16-SECT-2.3.2"
TITLE="16.2 Code Generated by PLVgen"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 16.2 Code Generated by PLVgen"
BORDER="0"></A
></TD
></TR
></TABLE
>&nbsp;<HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"></DIV
><DIV
CLASS="chapter"
><H1
CLASS="chapter"
><A
CLASS="title"
NAME="plsql-adv-ch-16"
>16. PLVgen: Generating PL/SQL Programs</A
></H1
><DIV
CLASS="htmltoc"
><P
><B
>Contents:</B
><BR><A
CLASS="sect1"
HREF="#ch16-27860"
TITLE="16.1 Options for Best Practices"
>Options for Best Practices</A
><BR><A
CLASS="sect1"
HREF="ch16_02.htm#ch16-SECT-2.3.2"
TITLE="16.2 Code Generated by PLVgen"
>Code Generated by PLVgen</A
><BR><A
CLASS="sect1"
HREF="ch16_03.htm#ch16-SECT-3.3"
TITLE="16.3 Modifying PLVgen Behavior"
>Modifying PLVgen Behavior</A
><BR><A
CLASS="sect1"
HREF="ch16_04.htm#ch16-SECT-4.3.2"
TITLE="16.4 Implementing PLVgen"
>Implementing PLVgen</A
></P
><P
></P
></DIV
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="ch16-idx-1000236-0"
></A
><A
CLASS="indexterm"
NAME="ch16-idx-1000236-1"
></A
><A
CLASS="indexterm"
NAME="ch16-idx-1000236-2"
></A
>The PLVgen (PL/Vision GENerator) package provides a set of procedures you can use to generate your own <SPAN
CLASS="acronym"
>PL/SQL</SPAN
> code. With PLVgen you can:</P
><UL
CLASS="itemizedlist"
><LI
CLASS="listitem"
><P
CLASS="para"
>Implement coding standards and best practices by incorporating those elements into the code generated by the package. </P
></LI
><LI
CLASS="listitem"
><P
CLASS="para"
>Improve developer productivity. You don't have to do as much typing; the code is generated for you&nbsp;-- and it comes free of typos.</P
></LI
><LI
CLASS="listitem"
><P
CLASS="para"
>Take full advantage of PL/Vision programming components. When you generate code with PLVgen, it includes calls to PLVhlp, PLVtrc, and PLVexc package elements. PLVgen can make practical the widespread deployment of a library like PL/Vision.</P
></LI
></UL
><DIV
CLASS="sect1"
><H2
CLASS="sect1"
><A
CLASS="title"
NAME="ch16-27860"
>16.1 Options for <A
CLASS="indexterm"
NAME="ch16-idx-1000318-0"
></A
>Best Practices</A
></H2
><P
CLASS="para"
>I teach a series of classes called "Achieving <SPAN
CLASS="acronym"
>PL/SQL</SPAN
> Excellence." I spend a lot of time in those classes talking about "best practices," the guidelines and techniques you should follow to write <EM
CLASS="emphasis"
>excellent</EM
> <SPAN
CLASS="acronym"
>PL/SQL</SPAN
> programs. It's not enough to simply know how to write a procedure, function, or package. You need to know how to write those modules so that you are productive and so that the code is readable, efficient, and maintainable. That is a far more challenging task. </P
><P
CLASS="para"
>There are a couple of different options to implementing best practices: </P
><OL
CLASS="orderedlist"
><LI
CLASS="listitem"
><P
CLASS="para"
><EM
CLASS="emphasis"
>The manual (a.k.a. "hard") way:</EM
> Write or obtain a document that lists those best practices. Make sure that all developers study this guide and then set up a code review process to make sure that the standards and techniques have been followed.</P
></LI
><LI
CLASS="listitem"
><P
CLASS="para"
><EM
CLASS="emphasis"
>The automatic way:</EM
> Build or obtain a development environment that incorporates, generates, and automatically promotes the use of your best practices. </P
></LI
></OL
><P
CLASS="para"
>It should be pretty obvious to everyone which of these two options is preferable. Yet it is more than a matter of preference. The manual approach is also thoroughly impossible to apply with any degree of success. It requires a level of discipline and commitment from each developer that simply isn't practical. In addition, there are no tools available that allow you to do your code review in any practical fashion.</P
><P
CLASS="para"
>The automatic way is undeniably the way to go&nbsp;-- but who's going to get you going? After years of developer agony, third-party tools vendors and Oracle Corporation itself just getting around to offer a debugger. No one is addressing seriously how to improve the code <EM
CLASS="emphasis"
>construction</EM
> phase. So the issue then becomes: what can you build yourself (or get from someone else) to improve your development environment and the quality of code written in your shop?</P
><P
CLASS="para"
>The answer, it turns out, is that you can build an amazingly useful array of utilities and components. While these home-grown solutions are not as powerful and easy to use as the real products we will eventually be able to purchase, they can have a dramatic impact on your work now. Various chapters in this book provide examples of such components, including an alternative to SHOW ERRORS and a mechanism to deliver online help for <SPAN
CLASS="acronym"
>PL/SQL</SPAN
> programs. </P
><P
CLASS="para"
>In this chapter, I present a package that generates <SPAN
CLASS="acronym"
>PL/SQL</SPAN
> code that can conform to an organization's standards; it enforces best practices by making it extremely easy to follow those best practices. I built PLVgen because I got tired of doing all the typing necessary to follow my own standards. I started to feel like a robot, and when that happens I know that there must be a way to automate what I am doing. You can easily build upon this package to support your own approaches to code. </P
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch16-SECT-1.1"
>16.1.1 Generating a Best Practice</A
></H3
><P
CLASS="para"
>I'll give you an example of how PLVgen has improved my life. One very important best practice in package construction is to <EM
CLASS="emphasis"
>never</EM
> declare variables in the package specification (see <A
CLASS="xref"
HREF="ch02_01.htm"
>Chapter 2, <CITE
CLASS="chapter"
>Best Practices for Packages</CITE
></A
>). This means that the variable is "public" and can both be read and be modified directly by any user with execute authority on the package. Instead, you should declare variables inside the body of the package. Once you do this, however, you must provide get-and-set or "gas" routines in the specification to retrieve the value of the variable (get) and change the value of the variable (set). You must, in addition, declare the private variable and build the get-and-set routines in the package body.</P
><P
CLASS="para"
>Each of these programs is straightforward, but also each takes time to write&nbsp;-- especially if I want to get my formatting correct (use of upper- and lowercase, indentation, comments, etc.) and follow my templates for program structure. Before the advent of PLVgen, I would take the time to write this code, but would feel the minutes ticking by.</P
><P
CLASS="para"
>Now with the PLVgen package, I can generate all the code I need to do it right&nbsp;-- to hide my data and build the get-and-set code. The following command executed in SQL*Plus, for example, generates a get-and-set for a packaged variable named <KBD
CLASS="command"
>pagesize</KBD
>:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>SQL&gt; exec PLVgen.gas ('pagesize', 1, 25);</PRE
></BLOCKQUOTE
><P
CLASS="para"
>Depending on the toggles I have turned on for generated code content, the <KBD
CLASS="command"
>PLVgen.gas</KBD
> procedure could produce anywhere from 18 to 50 lines of perfectly formatted, bug-free code&nbsp;-- in seconds. </P
><P
CLASS="para"
>I am a rapid typist and I know my standards inside and out. Regardless, a call to PLVgen is far more efficient than anything I can achieve with the old-fashioned (pre-PL/Vision) approach. The advantages, however, even go beyond this efficiency. The PLVgen package makes use of another PL/Vision package, PLVio, to put a line on the screen. If you so desire, you can redirect the output of the package to a different target repository, including a <SPAN
CLASS="acronym"
>PL/SQL</SPAN
> table, a database table, and, with Release 2.3 of <SPAN
CLASS="acronym"
>PL/SQL</SPAN
>, a file. So you can plug-and-play PLVgen within a GUI interface that allows a developer to construct standards-smart and library-aware <SPAN
CLASS="acronym"
>PL/SQL</SPAN
> programs.</P
><P
CLASS="para"
>That should give you a feel for the advantages of generating code with PLVgen. In the next section I review the full set of program units and code fragments you can generate with PLVgen. Later, I'll present the techniques used to implement PLVgen.</P
></DIV
></DIV
></DIV
><DIV
CLASS="htmlnav"
><P
></P
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch15_04.htm#ch15-SECT-4.1"
TITLE="15.4 Implementing PLVvu"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 15.4 Implementing PLVvu"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="book"
HREF="index.htm"
TITLE="Advanced Oracle PL/SQL Programming with Packages"
><IMG
SRC="../gifs/txthome.gif"
ALT="Advanced Oracle PL/SQL Programming with Packages"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch16_02.htm#ch16-SECT-2.3.2"
TITLE="16.2 Code Generated by PLVgen"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 16.2 Code Generated by PLVgen"
BORDER="0"></A
></TD
></TR
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
>15.4 Implementing PLVvu</TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="index"
HREF="index/idx_0.htm"
TITLE="Book Index"
><IMG
SRC="../gifs/index.gif"
ALT="Book Index"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
>16.2 Code Generated by PLVgen</TD
></TR
></TABLE
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"></DIV
><IMG
SRC="../gifs/smnavbar.gif"
USEMAP="#map"
BORDER="0"
ALT="The Oracle Library Navigation">

<P><font size="-1">
<a href="../copyrght.htm#copy">Copyright (c) 2000</a> O'Reilly & Associates. All rights reserved.
</font></P>

<MAP NAME="map">

<AREA SHAPE="RECT"
COORDS="0,0,35,30"
HREF="../index.htm"
ALT="Library Home">

<AREA SHAPE="RECT"
COORDS="40,0,95,30"
HREF="../prog2/index.htm"
ALT="Oracle PL/SQL Programming, 2nd. Ed.">

<AREA SHAPE="RECT"
COORDS="100,0,200,30"
HREF="../guide8i/index.htm"
ALT="Guide to Oracle 8i Features">

<AREA SHAPE="RECT"
COORDS="205,0,245,30"
HREF="../bipack/index.htm"
ALT="Oracle Built-in Packages">

<AREA SHAPE="RECT"
COORDS="250,0,320,30"
HREF="index.htm"
ALT="Advanced PL/SQL Programming with Packages">

<AREA SHAPE="RECT"
COORDS="325,0,420,30"
HREF="../webapp/index.htm"
ALT="Oracle Web Applications">

<AREA SHAPE="RECT"
COORDS="425,0,490,30"
HREF="../langpkt/index.htm"
ALT="Oracle PL/SQL Language Pocket Reference">

<AREA SHAPE="RECT"
COORDS="495,0,570,30"
HREF="../bipkt/index.htm"
ALT="Oracle PL/SQL Built-ins Pocket Reference">
</MAP>
</BODY
>
<!-- Mirrored from liso.cs.pusan.ac.kr by HTTrack Website Copier/3.x [XR&CO'2001] -->
</HTML
>
