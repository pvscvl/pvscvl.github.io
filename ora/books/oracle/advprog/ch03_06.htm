<HTML
><HEAD
><TITLE
>[Chapter 3] 3.6 Building a Structured Function</TITLE
><META
NAME="DC.Creator"
CONTENT="Steven Feuerstein"><META
NAME="DC.Date"
CONTENT="2000-04-29T18:23:03Z"><META
NAME="DC.Format"
CONTENT="text/html"
SCHEME="MIME"><META
NAME="DC.Identifier"
CONTENT="O'Reilly and Associates-1-56592-238-7E"><META
NAME="DC.Language"
CONTENT="en-US"><META
NAME="DC.Publisher"
CONTENT="O'Reilly &amp; Associates, Inc."><META
NAME="DC.Source"
CONTENT="1-56592-238-7E"
SCHEME="ISBN"><META
NAME="DC.Subject.Keyword"
CONTENT="PL/SQL SQL Oracle Packages"><META
NAME="DC.Title"
CONTENT="Advanced Oracle PL/SQL Programming with Packages"><META
NAME="DC.Type"
CONTENT="Text.Monograph"><META
NAME="generator"
CONTENT="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><LINK
REL="stylesheet"
TYPE="text/css"
HREF="../style/style1.css"><LINK
REV="made"
HREF="mailto:online-books@oreilly.com"
TITLE="Online Books Comments"><LINK
REL="up"
HREF="ch03_01.htm"
TITLE="3. The PL/SQL Development Spiral"><LINK
REL="prev"
HREF="ch03_05.htm"
TITLE="3.5 Rough Waters Ahead"><LINK
REL="next"
HREF="ch03_07.htm"
TITLE="3.7 Handling Program Assumptions"></HEAD>
<BODY><DIV CLASS="htmlnav"
><H1
><IMG
SRC="gifs/smbanner.gif"
ALT="Advanced Oracle PL/SQL Programming with Packages"
USEMAP="#srchmap"
BORDER="0"></H1
><MAP
NAME="srchmap"
><AREA
SHAPE="RECT"
COORDS="0,0,466,65"
HREF="index.htm"
ALT="Advanced Oracle PL/SQL Programming with Packages"><AREA
SHAPE="RECT"
COORDS="467,0,514,18"
HREF="jobjects/fsearch.htm"
ALT="Search this book"></MAP
><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch03_05.htm"
TITLE="3.5 Rough Waters Ahead"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 3.5 Rough Waters Ahead"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><SPAN
CLASS="NAVTITLE"
><A
CLASS="chapter"
REL="up"
HREF="ch03_01.htm"
TITLE="3. The PL/SQL Development Spiral"
>Chapter 3<BR>The PL/SQL Development Spiral</A
></SPAN
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch03_07.htm"
TITLE="3.7 Handling Program Assumptions"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 3.7 Handling Program Assumptions"
BORDER="0"></A
></TD
></TR
></TABLE
>&nbsp;<HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"></DIV
><DIV
CLASS="sect1"
><H2
CLASS="sect1"
><A
CLASS="title"
NAME="ch03-36009"
>3.6 Building a Structured Function</A
></H2
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="ch03-idx-999777-0"
></A
><A
CLASS="indexterm"
NAME="ch03-idx-999777-1"
></A
>Consider the problem of a function that does not execute a RETURN. The whole point of a function is to return a value. Not only should it return a value when everything goes right, it should even return a value when the function fails and raises an exception (NULL being the usual candidate under these circumstances). </P
><P
CLASS="para"
>In the <I
CLASS="function"
>twice</I
> function all my RETURN statements are nested inside IF clauses. So an invalid entry by the user means that all those RETURNs are ignored. There are lots of ways to fix this specific problem. You could include an ELSE statement. You could make sure that the action was valid at the start of the function (we'll look at that in a moment). The best all-around solution, however, is to always construct your functions with the following templated structure:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
> 1    FUNCTION twice RETURN VARCHAR2
 2    IS
 3       v_retval VARCHAR2(100) := 'null';
 4    BEGIN
 5
 6       RETURN v_retval;
 7
 8    EXCEPTION
 9       WHEN OTHERS
10       THEN
11          RETURN NULL;
12    END twice;</PRE
></BLOCKQUOTE
><P
CLASS="para"
>In this template I declare a local variable (the return value or <KBD
CLASS="command"
>v_retval</KBD
>) with the same datatype as the function itself. I then always make the last line of the function a RETURN of the <KBD
CLASS="command"
>v_retval</KBD
> variable's value. In addition, my exception returns NULL if any kind of exception is raised. You will never get a -6503 error with this template&nbsp;-- and it is easier to debug than functions with RETURN statements scattered throughout the body of the program.</P
><P
CLASS="para"
>A version of <I
CLASS="function"
>twice</I
> that follows the template is shown in <A
CLASS="xref"
HREF="ch03_06.htm"
>Example 3.4</A
>. Now I have a return value variable as the last line of the function body. To do this, I simply replaced each of the individual RETURN statements inside the IF statement with an assignment to <KBD
CLASS="command"
>v_retval</KBD
>. I have not, therefore, added any kind of special handling for invalid actions. Yet I no longer have to worry about -6503, because I have chosen a structure for my function that automatically rules out that possibility. Furthermore, it even returns a sensible value in the case of a bad action code. The <KBD
CLASS="command"
>v_retval</KBD
> is initialized by <SPAN
CLASS="acronym"
>PL/SQL</SPAN
> to NULL. If the user passes a code like BS, the value of <KBD
CLASS="command"
>v_retval</KBD
> will not be changed and, as a result, NULL will be returned, indicating an incorrect value (or, come to think of it, NULL<A
CLASS="indexterm"
NAME="ch03-idx-999779-0"
></A
><A
CLASS="indexterm"
NAME="ch03-idx-999779-1"
></A
> input). </P
><DIV
CLASS="example"
><H4
CLASS="example"
><A
CLASS="title"
NAME="ch03-26755"
>Example 3.4: A Template-based twice Function</A
></H4
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>CREATE OR REPLACE FUNCTION twice 
   (string_in IN VARCHAR2, 
    action_in IN VARCHAR2 DEFAULT 'N')
RETURN VARCHAR2
IS
   v_action VARCHAR2(10) := UPPER (action_in);
   v_retval VARCHAR2(100);
BEGIN
   IF v_action = 'UL'
   THEN
      v_retval := UPPER (string_in) || LOWER (string_in);      
      
   ELSIF v_action = 'LU'
   THEN
      v_retval := LOWER (string_in) || UPPER (string_in);      
      
   ELSIF v_action = 'N' 
   THEN
      v_retval := string_in || string_in;
   END IF; 
   RETURN v_retval;
EXCEPTION
   WHEN OTHERS
   THEN
      RETURN NULL;
END twice;
/</PRE
></BLOCKQUOTE
></DIV
></DIV
><DIV
CLASS="htmlnav"
><P
></P
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch03_05.htm"
TITLE="3.5 Rough Waters Ahead"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 3.5 Rough Waters Ahead"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="book"
HREF="index.htm"
TITLE="Advanced Oracle PL/SQL Programming with Packages"
><IMG
SRC="../gifs/txthome.gif"
ALT="Advanced Oracle PL/SQL Programming with Packages"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch03_07.htm"
TITLE="3.7 Handling Program Assumptions"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 3.7 Handling Program Assumptions"
BORDER="0"></A
></TD
></TR
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
>3.5 Rough Waters Ahead</TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="index"
HREF="index/idx_0.htm"
TITLE="Book Index"
><IMG
SRC="../gifs/index.gif"
ALT="Book Index"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
>3.7 Handling Program Assumptions</TD
></TR
></TABLE
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"></DIV
><IMG
SRC="../gifs/smnavbar.gif"
USEMAP="#map"
BORDER="0"
ALT="The Oracle Library Navigation">

<P><font size="-1">
<a href="../copyrght.htm#copy">Copyright (c) 2000</a> O'Reilly & Associates. All rights reserved.
</font></P>

<MAP NAME="map">

<AREA SHAPE="RECT"
COORDS="0,0,35,30"
HREF="../index.htm"
ALT="Library Home">

<AREA SHAPE="RECT"
COORDS="40,0,95,30"
HREF="../prog2/index.htm"
ALT="Oracle PL/SQL Programming, 2nd. Ed.">

<AREA SHAPE="RECT"
COORDS="100,0,200,30"
HREF="../guide8i/index.htm"
ALT="Guide to Oracle 8i Features">

<AREA SHAPE="RECT"
COORDS="205,0,245,30"
HREF="../bipack/index.htm"
ALT="Oracle Built-in Packages">

<AREA SHAPE="RECT"
COORDS="250,0,320,30"
HREF="index.htm"
ALT="Advanced PL/SQL Programming with Packages">

<AREA SHAPE="RECT"
COORDS="325,0,420,30"
HREF="../webapp/index.htm"
ALT="Oracle Web Applications">

<AREA SHAPE="RECT"
COORDS="425,0,490,30"
HREF="../langpkt/index.htm"
ALT="Oracle PL/SQL Language Pocket Reference">

<AREA SHAPE="RECT"
COORDS="495,0,570,30"
HREF="../bipkt/index.htm"
ALT="Oracle PL/SQL Built-ins Pocket Reference">
</MAP>
</BODY
>
<!-- Mirrored from liso.cs.pusan.ac.kr by HTTrack Website Copier/3.x [XR&CO'2001] -->
</HTML
>
