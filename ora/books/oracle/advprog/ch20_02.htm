<HTML
><HEAD
><TITLE
>[Chapter 20] 20.2 PLVrb: Performing Rollbacks</TITLE
><META
NAME="DC.Creator"
CONTENT="Steven Feuerstein"><META
NAME="DC.Date"
CONTENT="2000-04-29T18:31:20Z"><META
NAME="DC.Format"
CONTENT="text/html"
SCHEME="MIME"><META
NAME="DC.Identifier"
CONTENT="O'Reilly and Associates-1-56592-238-7E"><META
NAME="DC.Language"
CONTENT="en-US"><META
NAME="DC.Publisher"
CONTENT="O'Reilly &amp; Associates, Inc."><META
NAME="DC.Source"
CONTENT="1-56592-238-7E"
SCHEME="ISBN"><META
NAME="DC.Subject.Keyword"
CONTENT="PL/SQL SQL Oracle Packages"><META
NAME="DC.Title"
CONTENT="Advanced Oracle PL/SQL Programming with Packages"><META
NAME="DC.Type"
CONTENT="Text.Monograph"><META
NAME="generator"
CONTENT="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><LINK
REL="stylesheet"
TYPE="text/css"
HREF="../style/style1.css"><LINK
REV="made"
HREF="mailto:online-books@oreilly.com"
TITLE="Online Books Comments"><LINK
REL="up"
HREF="ch20_01.htm"
TITLE="20. PLVcmt and PLVrb: Commit and Rollback Processing "><LINK
REL="prev"
HREF="ch20_01.htm"
TITLE="20.1 PLVcmt: Enhancing Commit Processing"><LINK
REL="next"
HREF="ch21_01.htm"
TITLE="21. PLVlog and PLVtrc: Logging and Tracing"></HEAD>
<BODY><DIV CLASS="htmlnav"
><H1
><IMG
SRC="gifs/smbanner.gif"
ALT="Advanced Oracle PL/SQL Programming with Packages"
USEMAP="#srchmap"
BORDER="0"></H1
><MAP
NAME="srchmap"
><AREA
SHAPE="RECT"
COORDS="0,0,466,65"
HREF="index.htm"
ALT="Advanced Oracle PL/SQL Programming with Packages"><AREA
SHAPE="RECT"
COORDS="467,0,514,18"
HREF="jobjects/fsearch.htm"
ALT="Search this book"></MAP
><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch20_01.htm"
TITLE="20.1 PLVcmt: Enhancing Commit Processing"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 20.1 PLVcmt: Enhancing Commit Processing"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><SPAN
CLASS="NAVTITLE"
><A
CLASS="chapter"
REL="up"
HREF="ch20_01.htm"
TITLE="20. PLVcmt and PLVrb: Commit and Rollback Processing "
>Chapter 20<BR>PLVcmt and PLVrb: Commit and Rollback Processing </A
></SPAN
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="chapter"
HREF="ch21_01.htm"
TITLE="21. PLVlog and PLVtrc: Logging and Tracing"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 21. PLVlog and PLVtrc: Logging and Tracing"
BORDER="0"></A
></TD
></TR
></TABLE
>&nbsp;<HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"></DIV
><DIV
CLASS="sect1"
><H2
CLASS="sect1"
><A
CLASS="title"
NAME="ch20-28391"
>20.2 PLVrb: Performing Rollbacks</A
></H2
><P
CLASS="para"
>The <A
CLASS="indexterm"
NAME="ch20-idx-997773-0"
></A
><A
CLASS="indexterm"
NAME="ch20-idx-997773-1"
></A
>PLVrb PL/Vision RollBack package provides a programmatic interface to rollback activity in <SPAN
CLASS="acronym"
>PL/SQL</SPAN
>. With PLVrb, you no longer issue explicit ROLLBACK and SAVEPOINT commands. Instead, you call the appropriate PLVrb module. This layer of code gives you the ability to change transaction-level behavior at runtime. With PLVrb, you can even execute soft-coded savepoints, a feat usually considered impossible in <SPAN
CLASS="acronym"
>PL/SQL</SPAN
>.</P
><P
CLASS="para"
>These different elements of the PLVrb package are explained in the following sections.</P
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch20-SECT-2.1"
>20.2.1 Controlling Rollbacks</A
></H3
><P
CLASS="para"
>One of the big advantages to using PLVrb instead of direct calls to ROLLBACK is that you have placed a layer of code between your application and the ROLLBACK. This layer gives you (through PL/Vision) the ability to modify rollback processing behavior <EM
CLASS="emphasis"
>without changing your application code.</EM
> This is very important because it allows you to stabilize your code, but still change the way it works for purposes of testing and debugging.</P
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="ch20-idx-997777-0"
></A
>PLVrb offers a standard PL/Vision toggle to control rollback processing. This triumvirate of programs is:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>PROCEDURE turn_on;
PROCEDURE turn_off;
FUNCTION rolling_back RETURN BOOLEAN;</PRE
></BLOCKQUOTE
><P
CLASS="para"
>All that the first two procedures do is set the value of a private Boolean variable, but by correctly applying that Boolean inside an IF statement in PLVrb, the package's user gets to fine-tune the package's behavior. </P
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch20-SECT-2.2"
>20.2.2 Logging Rollbacks </A
></H3
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="ch20-idx-997778-0"
></A
>The rollback action in an application is a critical step. It is, for one thing, irreversible. Once you rollback, you cannot un-rollback. It is often very useful to know when rollbacks have taken place and the action that was taken around that rollback point. I have found this to be most important when I am executing long-running processes. Have I issued any rollbacks? If so, what was the cause? The PLVrb logging facility gives me the answers to these types of questions.</P
><P
CLASS="para"
>Whenever you call <KBD
CLASS="command"
>PLVrb.perform_rollback</KBD
>, <KBD
CLASS="command"
>PLVrb.rb_to_last</KBD
>, and <KBD
CLASS="command"
>PLVrb.rollback_to</KBD
>, you can supply a string or context for that action. This string is ignored unless logging is turned on. If logging is enabled, PLVrb calls the PLVlog facility to log your message. You can, within PLVlog, send this information to a database table, <SPAN
CLASS="acronym"
>PL/SQL</SPAN
> table, operating system file (with Release 2.3 of <SPAN
CLASS="acronym"
>PL/SQL</SPAN
>), or standard output (your screen).</P
><P
CLASS="para"
>PLVrb offers a standard PL/Vision toggle to control the logging of rollback processing. This triumvirate of programs is:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>PROCEDURE log;
PROCEDURE nolog;
FUNCTION logging RETURN BOOLEAN;</PRE
></BLOCKQUOTE
><BLOCKQUOTE
CLASS="note"
><P
CLASS="para"
><STRONG
>NOTE:</STRONG
>  You do not have to turn on logging in PLVlog for the PLVrb log to function properly. It automatically turns on logging in PLVlog in order to write its rollback-related information, and then reset the PLVlog status to its prior state.</P
></BLOCKQUOTE
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch20-SECT-2.3"
>20.2.3 Setting Savepoints</A
></H3
><P
CLASS="para"
>When you set a <A
CLASS="indexterm"
NAME="ch20-idx-997779-0"
></A
>savepoint in <SPAN
CLASS="acronym"
>PL/SQL</SPAN
>, you give yourself a spot in your code to which you can rollback your changes. This is useful when you need to discard some, but not all, of your uncommitted changes. The usual situation you face with <SPAN
CLASS="acronym"
>PL/SQL</SPAN
> is that you must hard code the names of savepoints in your code. A savepoint is, in fact, an undeclared identifier. You don't (and cannot) declare a savepoint in your declaration section, as you would with an exception. Instead, you simply provide an identifier after the keyword SAVEPOINT in your code and that savepoint is established. Then, when you issue a ROLLBACK, you must also hard code that same identifier value in the ROLLBACK.</P
><P
CLASS="para"
>In the following block of code, I set a savepoint and then in the exception section rollback to that same savepoint.</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>BEGIN
   SAVEPOINT start_trans;
   INSERT INTO emp ...;
   DELETE FROM emp_history ... ;
EXCEPTION
   WHEN OTHERS
   THEN
      ROLLBACK TO start_trans;
END;</PRE
></BLOCKQUOTE
><P
CLASS="para"
>I cannot, on the other hand, write code like this:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>PACKAGE empsav
IS
   insert_point VARCHAR2(10) := insert ;
   delete_point VARCHAR2(10) := delete ;
END;

BEGIN
   SAVEPOINT empsav.insert_point;
   INSERT INTO emp ... ;
   SAVEPOINT empsav.delete_point;
   DELETE FROM emp_history ... ;
EXCEPTION
   WHEN DUP_VAL_ON_INDEX
   THEN
      ROLLBACK TO empsav.insert_point;

   WHEN empsav.still_active
   THEN
      ROLLBACK TO empsav.delete_point;
END;</PRE
></BLOCKQUOTE
><P
CLASS="para"
><SPAN
CLASS="acronym"
>PL/SQL</SPAN
> will not, absolutely not, evaluate the packaged contents into a literal and then use that literal to direct rollback activity. Instead, the code will fail to compile as shown:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>SAVEPOINT empsav.insert_point;
                *
ERROR at line 2:
ORA-06550: line 2, column 20:
PLS-00103: Encountered the symbol &quot;.&quot; when expecting one of the
   following:</PRE
></BLOCKQUOTE
><P
CLASS="para"
>One consequence of this hard-coding is that you must know the name of the savepoint at compile time, not at runtime. In most situations, this might be fine. In other programs, this can be a significant obstacle. PLVlog, for example, offers a generic logging mechanism. When logging to a database table, you must often perform a ROLLBACK before an INSERT to the log table and then follow up with the setting of a SAVEPOINT. And it really needs to do these steps for a dynamically determined savepoint. </P
><P
CLASS="para"
>This dynamic setting of savepoints (and rolling back to those savepoints) is provided by the PLVrb package. To set a savepoint whose name is determined at runtime, call the <KBD
CLASS="command"
>set_savepoint</KBD
><A
CLASS="indexterm"
NAME="ch20-idx-997786-0"
></A
> procedure. The header for this program is:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>   PROCEDURE set_savepoint (sp_in IN VARCHAR2);</PRE
></BLOCKQUOTE
><P
CLASS="para"
>where <KBD
CLASS="command"
>sp_in</KBD
> is the savepoint name. The <KBD
CLASS="command"
>sp_in</KBD
> argument must be a valid <SPAN
CLASS="acronym"
>PL/SQL</SPAN
> identifier (starts with a letter, is composed of letters, digits, $, #, and the underscore character, and must be no longer than 30 characters in length).</P
><P
CLASS="para"
>Every time you set a savepoint, the procedure takes the following actions:</P
><OL
CLASS="orderedlist"
><LI
CLASS="listitem"
><P
CLASS="para"
>Set the savepoint with a call to <KBD
CLASS="command"
>PLVdyn.plsql</KBD
>. The <KBD
CLASS="command"
>set_savepoint</KBD
> programs constructs the SAVEPOINT command and executes it dynamically.</P
></LI
><LI
CLASS="listitem"
><P
CLASS="para"
>Sets the last savepoint value to the provided savepoint. </P
></LI
><LI
CLASS="listitem"
><P
CLASS="para"
>Pushes the savepoint onto the stack of savepoints maintained by PLVrb using the PLVstk package.</P
></LI
></OL
><P
CLASS="para"
>Instead of issuing statements like this:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>SAVEPOINT start_trans;</PRE
></BLOCKQUOTE
><P
CLASS="para"
>you can now pass the name of your savepoint to PLVrb for setting:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>PLVrb.set_savepoint ('start_trans');</PRE
></BLOCKQUOTE
><P
CLASS="para"
>or:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>PLVrb.set_savepoint (v_starttrans_sp);<A
CLASS="indexterm"
NAME="ch20-idx-997781-0"
></A
></PRE
></BLOCKQUOTE
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch20-SECT-2.4"
>20.2.4 Performing Rollbacks</A
></H3
><P
CLASS="para"
>PLVrb offers three programs to perform rollbacks: <KBD
CLASS="command"
>perform_rollback</KBD
>, <KBD
CLASS="command"
>rollback_to</KBD
>, and <KBD
CLASS="command"
>rb_to_last</KBD
>. The headers for these programs are:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>PROCEDURE <A
CLASS="indexterm"
NAME="ch20-idx-997783-0"
></A
>perform_rollback
   (context_in IN VARCHAR2 := NULL);

PROCEDURE <A
CLASS="indexterm"
NAME="ch20-idx-997784-0"
></A
>rollback_to
   (sp_in IN VARCHAR2,
    context_in IN VARCHAR2 := NULL);

PROCEDURE <A
CLASS="indexterm"
NAME="ch20-idx-997785-0"
></A
>rb_to_last
   (context_in IN VARCHAR2 := NULL);</PRE
></BLOCKQUOTE
><P
CLASS="para"
>In all three procedures, the <KBD
CLASS="command"
>context_in</KBD
> argument is a string that will be logged using PLVlog if you have called <KBD
CLASS="command"
>PLVrb.log</KBD
> to turn on logging. </P
><P
CLASS="para"
>When you call <KBD
CLASS="command"
>perform_rollback</KBD
>, a full, unqualified rollback is performed; no savepoint is used, and all uncommitted changes are rolled back.</P
><P
CLASS="para"
>When you call <KBD
CLASS="command"
>rollback_to</KBD
>, PLVrb issues a ROLLBACK to the specified savepoint. Besides issuing the savepoint, PLVrb also removes from the savepoint stack any savepoints that came after the savepoint you specified. If the savepoint argument is not in the PLVrb savepoint stack, the stack is emptied.</P
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="ch20-idx-997749-0"
></A
>When you call <KBD
CLASS="command"
>rb_to_lst</KBD
>, PLVrb issues a ROLLBACK to the savepoint specified in the most recent call to <KBD
CLASS="command"
>set_savepoint</KBD
>.</P
><DIV
CLASS="sidebar"
><H4
CLASS="sidebar"
><A
CLASS="title"
NAME="AUTOID-21127"
>Special Notes on PLVrb</A
></H4
><P
CLASS="para"
>If you want to use PLVrb, you should also use PLVcmt. This commit package maintains the savepoint stack of PLVrb. If you use PLVrb to set savepoints and then issue explicit <SPAN
CLASS="acronym"
>COMMITS</SPAN
> in your programs, the savepoint stack will be out of sync with your transaction.<A
CLASS="indexterm"
NAME="ch20-idx-997775-0"
></A
><A
CLASS="indexterm"
NAME="ch20-idx-997775-1"
></A
></P
></DIV
></DIV
></DIV
><DIV
CLASS="htmlnav"
><P
></P
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch20_01.htm"
TITLE="20.1 PLVcmt: Enhancing Commit Processing"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 20.1 PLVcmt: Enhancing Commit Processing"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="book"
HREF="index.htm"
TITLE="Advanced Oracle PL/SQL Programming with Packages"
><IMG
SRC="../gifs/txthome.gif"
ALT="Advanced Oracle PL/SQL Programming with Packages"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="chapter"
HREF="ch21_01.htm"
TITLE="21. PLVlog and PLVtrc: Logging and Tracing"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 21. PLVlog and PLVtrc: Logging and Tracing"
BORDER="0"></A
></TD
></TR
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
>20.1 PLVcmt: Enhancing Commit Processing</TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="index"
HREF="index/idx_0.htm"
TITLE="Book Index"
><IMG
SRC="../gifs/index.gif"
ALT="Book Index"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
>21. PLVlog and PLVtrc: Logging and Tracing</TD
></TR
></TABLE
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"></DIV
><IMG
SRC="../gifs/smnavbar.gif"
USEMAP="#map"
BORDER="0"
ALT="The Oracle Library Navigation">

<P><font size="-1">
<a href="../copyrght.htm#copy">Copyright (c) 2000</a> O'Reilly & Associates. All rights reserved.
</font></P>

<MAP NAME="map">

<AREA SHAPE="RECT"
COORDS="0,0,35,30"
HREF="../index.htm"
ALT="Library Home">

<AREA SHAPE="RECT"
COORDS="40,0,95,30"
HREF="../prog2/index.htm"
ALT="Oracle PL/SQL Programming, 2nd. Ed.">

<AREA SHAPE="RECT"
COORDS="100,0,200,30"
HREF="../guide8i/index.htm"
ALT="Guide to Oracle 8i Features">

<AREA SHAPE="RECT"
COORDS="205,0,245,30"
HREF="../bipack/index.htm"
ALT="Oracle Built-in Packages">

<AREA SHAPE="RECT"
COORDS="250,0,320,30"
HREF="index.htm"
ALT="Advanced PL/SQL Programming with Packages">

<AREA SHAPE="RECT"
COORDS="325,0,420,30"
HREF="../webapp/index.htm"
ALT="Oracle Web Applications">

<AREA SHAPE="RECT"
COORDS="425,0,490,30"
HREF="../langpkt/index.htm"
ALT="Oracle PL/SQL Language Pocket Reference">

<AREA SHAPE="RECT"
COORDS="495,0,570,30"
HREF="../bipkt/index.htm"
ALT="Oracle PL/SQL Built-ins Pocket Reference">
</MAP>
</BODY
>
<!-- Mirrored from liso.cs.pusan.ac.kr by HTTrack Website Copier/3.x [XR&CO'2001] -->
</HTML
>
