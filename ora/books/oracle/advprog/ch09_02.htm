<HTML
><HEAD
><TITLE
>[Chapter 9] 9.2 Storing Message Text</TITLE
><META
NAME="DC.Creator"
CONTENT="Steven Feuerstein"><META
NAME="DC.Date"
CONTENT="2000-04-29T18:26:56Z"><META
NAME="DC.Format"
CONTENT="text/html"
SCHEME="MIME"><META
NAME="DC.Identifier"
CONTENT="O'Reilly and Associates-1-56592-238-7E"><META
NAME="DC.Language"
CONTENT="en-US"><META
NAME="DC.Publisher"
CONTENT="O'Reilly &amp; Associates, Inc."><META
NAME="DC.Source"
CONTENT="1-56592-238-7E"
SCHEME="ISBN"><META
NAME="DC.Subject.Keyword"
CONTENT="PL/SQL SQL Oracle Packages"><META
NAME="DC.Title"
CONTENT="Advanced Oracle PL/SQL Programming with Packages"><META
NAME="DC.Type"
CONTENT="Text.Monograph"><META
NAME="generator"
CONTENT="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><LINK
REL="stylesheet"
TYPE="text/css"
HREF="../style/style1.css"><LINK
REV="made"
HREF="mailto:online-books@oreilly.com"
TITLE="Online Books Comments"><LINK
REL="up"
HREF="ch09_01.htm"
TITLE="9. PLVmsg: Single-Sourcing PL/SQL Message Text"><LINK
REL="prev"
HREF="ch09_01.htm"
TITLE="9.1 PLVmsg Data Structures"><LINK
REL="next"
HREF="ch09_03.htm"
TITLE="9.3 Retrieving Message Text"></HEAD>
<BODY><DIV CLASS="htmlnav"
><H1
><IMG
SRC="gifs/smbanner.gif"
ALT="Advanced Oracle PL/SQL Programming with Packages"
USEMAP="#srchmap"
BORDER="0"></H1
><MAP
NAME="srchmap"
><AREA
SHAPE="RECT"
COORDS="0,0,466,65"
HREF="index.htm"
ALT="Advanced Oracle PL/SQL Programming with Packages"><AREA
SHAPE="RECT"
COORDS="467,0,514,18"
HREF="jobjects/fsearch.htm"
ALT="Search this book"></MAP
><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch09_01.htm"
TITLE="9.1 PLVmsg Data Structures"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 9.1 PLVmsg Data Structures"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><SPAN
CLASS="NAVTITLE"
><A
CLASS="chapter"
REL="up"
HREF="ch09_01.htm"
TITLE="9. PLVmsg: Single-Sourcing PL/SQL Message Text"
>Chapter 9<BR>PLVmsg: Single-Sourcing PL/SQL Message Text</A
></SPAN
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch09_03.htm"
TITLE="9.3 Retrieving Message Text"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 9.3 Retrieving Message Text"
BORDER="0"></A
></TD
></TR
></TABLE
>&nbsp;<HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"></DIV
><DIV
CLASS="sect1"
><H2
CLASS="sect1"
><A
CLASS="title"
NAME="ch09-30838"
>9.2 Storing Message Text<A
CLASS="indexterm"
NAME="ch09-idx-998216-0"
></A
></A
></H2
><P
CLASS="para"
>Before<A
CLASS="indexterm"
NAME="ch09-idx-998217-0"
></A
><A
CLASS="indexterm"
NAME="ch09-idx-998217-1"
></A
><A
CLASS="indexterm"
NAME="ch09-idx-998217-2"
></A
> your programs can retrieve messages from the PLVmsg <SPAN
CLASS="acronym"
>PL/SQL</SPAN
> table, you must place these messages in the table. You can do so in one of two ways:</P
><OL
CLASS="orderedlist"
><LI
CLASS="listitem"
><P
CLASS="para"
>Load individual messages with calls to the <KBD
CLASS="command"
>add_text</KBD
> procedure.</P
></LI
><LI
CLASS="listitem"
><P
CLASS="para"
>Load sets of messages from a database table with the <KBD
CLASS="command"
>load_from_dbms</KBD
> procedure.</P
></LI
></OL
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch09-SECT-2.1"
>9.2.1 Adding a Single Message</A
></H3
><P
CLASS="para"
>With <KBD
CLASS="command"
>add_text</KBD
>, you add specific strings to the message table at the specified row. Here is the header for <KBD
CLASS="command"
>add_text</KBD
>:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>PROCEDURE add_text (err_code_in IN INTEGER, err_text_in IN VARCHAR2);</PRE
></BLOCKQUOTE
><P
CLASS="para"
>The following statements, for example, define message text for several error numbers set aside by Oracle Corporation for application-specific use (passed with a call to the RAISE_APPLICATION_ERROR builtin):</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>PLVmsg.add_text (-20000, 'General error');
PLVmsg.add_text (-20100, 'No department with that number.);
PLVmsg.add_text (-20200, 'Employee too young.');</PRE
></BLOCKQUOTE
><P
CLASS="para"
><A
CLASS="xref"
HREF="ch09_03.htm"
>Section 9.3, "Retrieving Message Text"</A
>, later in this chapter, will show how you can extract these messages.</P
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch09-SECT-2.2"
>9.2.2 Batch Loading of Message Text<A
CLASS="indexterm"
NAME="ch09-idx-998218-0"
></A
></A
></H3
><P
CLASS="para"
>In many environments, a database table is used to store and maintain error messages, as well as other types of message text. The <KBD
CLASS="command"
>load_from_dbms</KBD
> procedure<A
CLASS="indexterm"
NAME="ch09-idx-998219-0"
></A
> can be used to make this information available through the PLVmsg interface. The header for this procedure is:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>PROCEDURE load_from_dbms
   (table_in IN VARCHAR2, 
    where_clause_in IN VARCHAR2 := NULL,
    code_col_in IN VARCHAR2 := 'error_code',
    text_col_in IN VARCHAR2 := 'error_text');</PRE
></BLOCKQUOTE
><P
CLASS="para"
>This procedure reads the rows from the specified table and transfers them to the <SPAN
CLASS="acronym"
>PL/SQL</SPAN
> table. Recall that the PLVmsg <KBD
CLASS="command"
>msgtxt_table</KBD
> is not filled sequentially; the rows defined in the table are determined by the contents of the code column in the specified table.</P
><P
CLASS="para"
>To make the package as flexible as possible, PLVmsg relies on DBMS_SQL so that you can use whatever database table fits (or already exists) in your schema. When you call <KBD
CLASS="command"
>load_from_dbms</KBD
>, you tell it the name of the table and its columns, as well as an optional WHERE clause. The PLVmsg program then constructs the <SPAN
CLASS="acronym"
>SQL</SPAN
> necessary to grab the text data. The only requirement of the table is that it has a numeric column for message numbers (used as <SPAN
CLASS="acronym"
>PL/SQL</SPAN
> table rows) and a string column for the message text.</P
><P
CLASS="para"
>You must, at a minimum, provide the name of the messages table. The default names of the columns are<A
CLASS="indexterm"
NAME="ch09-idx-998220-0"
></A
><A
CLASS="indexterm"
NAME="ch09-idx-998220-1"
></A
>: </P
><DL
CLASS="variablelist"
><DT
CLASS="term"
><CODE
CLASS="literal"
>error_code</CODE
></DT
><DD
CLASS="listitem"
><P
CLASS="para"
>The error number for the message</P
></DD
><DT
CLASS="term"
><CODE
CLASS="literal"
>error_text</CODE
></DT
><DD
CLASS="listitem"
><P
CLASS="para"
>The text of the error message</P
></DD
></DL
><P
CLASS="para"
>In the following call to <KBD
CLASS="command"
>load_from_dbms</KBD
>, I rely on the full set of defaults for the structure of the error table to transfer all rows from the <KBD
CLASS="command"
>error_messages</KBD
> table:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>PLVmsg.load_from_dbms ('error_messages');</PRE
></BLOCKQUOTE
><P
CLASS="para"
>This request will work only if the <KBD
CLASS="command"
>error_messages</KBD
> table has columns named <KBD
CLASS="command"
>error_code</KBD
> and <KBD
CLASS="command"
>error_text</KBD
>.</P
><P
CLASS="para"
>In this next example, I supply customized values for all arguments:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>PLVmsg.load_from_dbms
   ('errtxt',
    'code BETWEEN -20000 AND -20999', 
    'code', 'text');</PRE
></BLOCKQUOTE
><P
CLASS="para"
>My table is named <KBD
CLASS="command"
>errtxt</KBD
> and has two columns, <KBD
CLASS="command"
>code</KBD
> and <KBD
CLASS="command"
>text</KBD
>. I further request that only the text for messages with error numbers between -20,000 and -20,999 be placed in the PLVmsg <SPAN
CLASS="acronym"
>PL/SQL</SPAN
> table. This WHERE clause implies that for all other errors, my program will rely on the message returned by SQLERRM (see the next section for more details).</P
><P
CLASS="para"
>You might be asking yourself: why bother with PLVmsg if you already have a database table-driven architecture for such messages? There are two key advantages:</P
><OL
CLASS="orderedlist"
><LI
CLASS="listitem"
><P
CLASS="para"
>With PLVmsg you will be reading the message text from memory (after the initial transfer) without having to go through the <SPAN
CLASS="acronym"
>SQL</SPAN
> layer. This will improve performance, though it will also require more memory since each user of PLVmsg will have her own copy of the messages. </P
></LI
><LI
CLASS="listitem"
><P
CLASS="para"
>PLVmsg is very flexible, in that you can dynamically direct your program to either the PLVmsg text or the database error message. <A
CLASS="indexterm"
NAME="ch09-idx-998221-0"
></A
></P
></LI
></OL
></DIV
></DIV
><DIV
CLASS="htmlnav"
><P
></P
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch09_01.htm"
TITLE="9.1 PLVmsg Data Structures"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 9.1 PLVmsg Data Structures"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="book"
HREF="index.htm"
TITLE="Advanced Oracle PL/SQL Programming with Packages"
><IMG
SRC="../gifs/txthome.gif"
ALT="Advanced Oracle PL/SQL Programming with Packages"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch09_03.htm"
TITLE="9.3 Retrieving Message Text"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 9.3 Retrieving Message Text"
BORDER="0"></A
></TD
></TR
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
>9.1 PLVmsg Data Structures</TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="index"
HREF="index/idx_0.htm"
TITLE="Book Index"
><IMG
SRC="../gifs/index.gif"
ALT="Book Index"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
>9.3 Retrieving Message Text</TD
></TR
></TABLE
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"></DIV
><IMG
SRC="../gifs/smnavbar.gif"
USEMAP="#map"
BORDER="0"
ALT="The Oracle Library Navigation">

<P><font size="-1">
<a href="../copyrght.htm#copy">Copyright (c) 2000</a> O'Reilly & Associates. All rights reserved.
</font></P>

<MAP NAME="map">

<AREA SHAPE="RECT"
COORDS="0,0,35,30"
HREF="../index.htm"
ALT="Library Home">

<AREA SHAPE="RECT"
COORDS="40,0,95,30"
HREF="../prog2/index.htm"
ALT="Oracle PL/SQL Programming, 2nd. Ed.">

<AREA SHAPE="RECT"
COORDS="100,0,200,30"
HREF="../guide8i/index.htm"
ALT="Guide to Oracle 8i Features">

<AREA SHAPE="RECT"
COORDS="205,0,245,30"
HREF="../bipack/index.htm"
ALT="Oracle Built-in Packages">

<AREA SHAPE="RECT"
COORDS="250,0,320,30"
HREF="index.htm"
ALT="Advanced PL/SQL Programming with Packages">

<AREA SHAPE="RECT"
COORDS="325,0,420,30"
HREF="../webapp/index.htm"
ALT="Oracle Web Applications">

<AREA SHAPE="RECT"
COORDS="425,0,490,30"
HREF="../langpkt/index.htm"
ALT="Oracle PL/SQL Language Pocket Reference">

<AREA SHAPE="RECT"
COORDS="495,0,570,30"
HREF="../bipkt/index.htm"
ALT="Oracle PL/SQL Built-ins Pocket Reference">
</MAP>
</BODY
>
<!-- Mirrored from liso.cs.pusan.ac.kr by HTTrack Website Copier/3.x [XR&CO'2001] -->
</HTML
>
