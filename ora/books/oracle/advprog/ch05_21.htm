<HTML
><HEAD
><TITLE
>[Chapter 5] 5.21 PLVprs: String Parsing</TITLE
><META
NAME="DC.Creator"
CONTENT="Steven Feuerstein"><META
NAME="DC.Date"
CONTENT="2000-04-29T18:25:34Z"><META
NAME="DC.Format"
CONTENT="text/html"
SCHEME="MIME"><META
NAME="DC.Identifier"
CONTENT="O'Reilly and Associates-1-56592-238-7E"><META
NAME="DC.Language"
CONTENT="en-US"><META
NAME="DC.Publisher"
CONTENT="O'Reilly &amp; Associates, Inc."><META
NAME="DC.Source"
CONTENT="1-56592-238-7E"
SCHEME="ISBN"><META
NAME="DC.Subject.Keyword"
CONTENT="PL/SQL SQL Oracle Packages"><META
NAME="DC.Title"
CONTENT="Advanced Oracle PL/SQL Programming with Packages"><META
NAME="DC.Type"
CONTENT="Text.Monograph"><META
NAME="generator"
CONTENT="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><LINK
REL="stylesheet"
TYPE="text/css"
HREF="../style/style1.css"><LINK
REV="made"
HREF="mailto:online-books@oreilly.com"
TITLE="Online Books Comments"><LINK
REL="up"
HREF="ch05_01.htm"
TITLE="5. PL/Vision Package Specifications"><LINK
REL="prev"
HREF="ch05_20.htm#ch05-SECT-20.0.8"
TITLE="5.20 PLVobj: Object Interface"><LINK
REL="next"
HREF="ch05_22.htm#ch05-SECT-22.0.2"
TITLE="5.22 PLVprsps: PL/SQL Source Code Parsing"></HEAD>
<BODY><DIV CLASS="htmlnav"
><H1
><IMG
SRC="gifs/smbanner.gif"
ALT="Advanced Oracle PL/SQL Programming with Packages"
USEMAP="#srchmap"
BORDER="0"></H1
><MAP
NAME="srchmap"
><AREA
SHAPE="RECT"
COORDS="0,0,466,65"
HREF="index.htm"
ALT="Advanced Oracle PL/SQL Programming with Packages"><AREA
SHAPE="RECT"
COORDS="467,0,514,18"
HREF="jobjects/fsearch.htm"
ALT="Search this book"></MAP
><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch05_20.htm#ch05-SECT-20.0.8"
TITLE="5.20 PLVobj: Object Interface"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 5.20 PLVobj: Object Interface"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><SPAN
CLASS="NAVTITLE"
><A
CLASS="chapter"
REL="up"
HREF="ch05_01.htm"
TITLE="5. PL/Vision Package Specifications"
>Chapter 5<BR>PL/Vision Package Specifications</A
></SPAN
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch05_22.htm#ch05-SECT-22.0.2"
TITLE="5.22 PLVprsps: PL/SQL Source Code Parsing"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 5.22 PLVprsps: PL/SQL Source Code Parsing"
BORDER="0"></A
></TD
></TR
></TABLE
>&nbsp;<HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"></DIV
><DIV
CLASS="sect1"
><H2
CLASS="sect1"
><A
CLASS="title"
NAME="ch05-SECT-21"
>5.21 PLVprs: String Parsing</A
></H2
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="ch05-idx-1001428-0"
></A
><A
CLASS="indexterm"
NAME="ch05-idx-1001428-1"
></A
><A
CLASS="indexterm"
NAME="ch05-idx-1001428-2"
></A
>The PLVprs (PL/Vision PaRSe) package offers a set of programs which provide generic and flexible string parsing capabilities. See <A
CLASS="xref"
HREF="ch10_01.htm"
>Chapter 10, <CITE
CLASS="chapter"
>PLVprs, PLVtkn, and PLVprsps: Parsing Strings</CITE
></A
> for details.</P
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch05-SECT-21.0.1"
>5.21.1 Package constants</A
></H3
><DL
CLASS="variablelist"
><DT
CLASS="term"
><CODE
CLASS="literal"
> c_ignore_case CONSTANT VARCHAR2(1) := 'I';</CODE
><A
CLASS="indexterm"
NAME="ch05-idx-1001429-0"
></A
></DT
><DT
CLASS="term"
><CODE
CLASS="literal"
>c_respect_case CONSTANT VARCHAR2(1) := 'R';</CODE
><A
CLASS="indexterm"
NAME="ch05-idx-1001430-0"
></A
></DT
><DD
CLASS="listitem"
><P
CLASS="para"
>Use these constants to indicate whether you want case to be ignored or respected in the current operation.</P
></DD
><DT
CLASS="term"
><CODE
CLASS="literal"
> c_all CONSTANT VARCHAR(3) := 'ALL';</CODE
><A
CLASS="indexterm"
NAME="ch05-idx-1001431-0"
></A
></DT
><DT
CLASS="term"
><CODE
CLASS="literal"
>c_word CONSTANT VARCHAR(4) := 'WORD';</CODE
><A
CLASS="indexterm"
NAME="ch05-idx-1001432-0"
></A
></DT
><DT
CLASS="term"
><CODE
CLASS="literal"
>c_delim CONSTANT VARCHAR(5) := 'DELIM';</CODE
><A
CLASS="indexterm"
NAME="ch05-idx-1001433-0"
></A
></DT
><DD
CLASS="listitem"
><P
CLASS="para"
>The different types of atomics; <KBD
CLASS="command"
>c_all</KBD
> indicates "all atomics"; <KBD
CLASS="command"
>c_word</KBD
> indicates "words only"; <KBD
CLASS="command"
>c_delim</KBD
> indicates "delimiters only".</P
></DD
><DT
CLASS="term"
><CODE
CLASS="literal"
> std_delimiters CONSTANT VARCHAR2 (50) :=</CODE
><A
CLASS="indexterm"
NAME="ch05-idx-1001434-0"
></A
><A
CLASS="indexterm"
NAME="ch05-idx-1001434-1"
></A
></DT
><DT
CLASS="term"
><CODE
CLASS="literal"
>   '!@#$%^&amp;*()-_=+\|`~{{]};:''&quot;,&lt;.&gt;/?' ||</CODE
></DT
><DT
CLASS="term"
><CODE
CLASS="literal"
>    PLVchr.newline_char || PLVchr.tab_char || PLVchr.space_char;</CODE
></DT
><DD
CLASS="listitem"
><P
CLASS="para"
>The standard set of delimiter characters.</P
></DD
><DT
CLASS="term"
><CODE
CLASS="literal"
> plsql_delimiters CONSTANT VARCHAR2 (50) :=</CODE
><A
CLASS="indexterm"
NAME="ch05-idx-1001435-0"
></A
></DT
><DT
CLASS="term"
><CODE
CLASS="literal"
>   '!@%^&amp;*()-=+\|`~{{]};:''&quot;,&lt;.&gt;/?' ||</CODE
></DT
><DT
CLASS="term"
><CODE
CLASS="literal"
>    PLVchr.newline_char || PLVchr.tab_char || PLVchr.space_char;</CODE
></DT
><DD
CLASS="listitem"
><P
CLASS="para"
>The set of delimiters for the <SPAN
CLASS="acronym"
>PL/SQL</SPAN
> language; this list is a bit different from the <KBD
CLASS="command"
>std_delimiters</KBD
>. The underscore and pound sign characters, for example, are not delimiters in <SPAN
CLASS="acronym"
>PL/SQL</SPAN
>.</P
></DD
></DL
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch05-SECT-21.0.2"
>5.21.2 <A
CLASS="indexterm"
NAME="ch05-idx-1001436-0"
></A
><A
CLASS="indexterm"
NAME="ch05-idx-1001436-1"
></A
><A
CLASS="indexterm"
NAME="ch05-idx-1001436-2"
></A
>Wrapping long strings into paragraphs </A
></H3
><DL
CLASS="variablelist"
><DT
CLASS="term"
><CODE
CLASS="literal"
> PROCEDURE wrap</CODE
><A
CLASS="indexterm"
NAME="ch05-idx-1001437-0"
></A
></DT
><DT
CLASS="term"
><CODE
CLASS="literal"
>  (text_in IN VARCHAR2,</CODE
></DT
><DT
CLASS="term"
><CODE
CLASS="literal"
>   line_length IN INTEGER,</CODE
></DT
><DT
CLASS="term"
><CODE
CLASS="literal"
>   paragraph_out IN OUT PLVtab.vc2000_table,</CODE
></DT
><DT
CLASS="term"
><CODE
CLASS="literal"
>   num_lines_out IN OUT INTEGER);</CODE
></DT
><DD
CLASS="listitem"
><P
CLASS="para"
>Wraps the string provided by <KBD
CLASS="command"
>text_in</KBD
> into separate lines with a maximum specified length, each line of which is stored in consecutive rows in a <SPAN
CLASS="acronym"
>PL/SQL</SPAN
> table.</P
></DD
><DT
CLASS="term"
><CODE
CLASS="literal"
> FUNCTION wrapped_string</CODE
><A
CLASS="indexterm"
NAME="ch05-idx-1001438-0"
></A
></DT
><DT
CLASS="term"
><CODE
CLASS="literal"
>  (text_in IN VARCHAR2,</CODE
></DT
><DT
CLASS="term"
><CODE
CLASS="literal"
>   line_length IN INTEGER := 80,</CODE
></DT
><DT
CLASS="term"
><CODE
CLASS="literal"
>   prefix_in IN VARCHAR2 := NULL)</CODE
></DT
><DT
CLASS="term"
><CODE
CLASS="literal"
>RETURN VARCHAR2;</CODE
></DT
><DD
CLASS="listitem"
><P
CLASS="para"
>Returns a long string wrapped into a series of lines separated by newline characters. This version of wrap avoids the need to define and manipulate a <SPAN
CLASS="acronym"
>PL/SQL</SPAN
> table.</P
></DD
><DT
CLASS="term"
><CODE
CLASS="literal"
> PROCEDURE display_wrap</CODE
><A
CLASS="indexterm"
NAME="ch05-idx-1001439-0"
></A
></DT
><DT
CLASS="term"
><CODE
CLASS="literal"
>  (text_in IN VARCHAR2,</CODE
></DT
><DT
CLASS="term"
><CODE
CLASS="literal"
>   line_length IN INTEGER := 80,</CODE
></DT
><DT
CLASS="term"
><CODE
CLASS="literal"
>   prefix_in IN VARCHAR2 := NULL);</CODE
></DT
><DD
CLASS="listitem"
><P
CLASS="para"
>Displays the wrapped version of <KBD
CLASS="command"
>text_in</KBD
> using the <KBD
CLASS="command"
>p.l</KBD
> procedure (and DBMS_OUTPUT.PUT_LINE).</P
></DD
></DL
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch05-SECT-21.0.3"
>5.21.3 Analyzing string contents</A
></H3
><DL
CLASS="variablelist"
><DT
CLASS="term"
><CODE
CLASS="literal"
> FUNCTION next_atom_loc </CODE
><A
CLASS="indexterm"
NAME="ch05-idx-1001440-0"
></A
></DT
><DT
CLASS="term"
><CODE
CLASS="literal"
>  (string_in IN VARCHAR2, </CODE
></DT
><DT
CLASS="term"
><CODE
CLASS="literal"
>   start_loc_in IN NUMBER,</CODE
></DT
><DT
CLASS="term"
><CODE
CLASS="literal"
>   direction_in IN NUMBER := +1,</CODE
></DT
><DT
CLASS="term"
><CODE
CLASS="literal"
>   delimiters_in IN VARCHAR2 := std_delimiters)</CODE
></DT
><DT
CLASS="term"
><CODE
CLASS="literal"
>RETURN INTEGER;           </CODE
></DT
><DD
CLASS="listitem"
><P
CLASS="para"
>Returns the location in the string of the next atomic. You provide the starting location of the scan, the direction of the scan (usually +1 or -1, but you can provide other values as well), and the delimiters to be used in the scan.</P
></DD
><DT
CLASS="term"
><CODE
CLASS="literal"
> FUNCTION numatomics </CODE
><A
CLASS="indexterm"
NAME="ch05-idx-1001441-0"
></A
></DT
><DT
CLASS="term"
><CODE
CLASS="literal"
>   (string_in IN VARCHAR2, </CODE
></DT
><DT
CLASS="term"
><CODE
CLASS="literal"
>    count_type_in IN VARCHAR2 := c_all,</CODE
></DT
><DT
CLASS="term"
><CODE
CLASS="literal"
>    delimiters_in IN VARCHAR2 := std_delimiters)</CODE
></DT
><DT
CLASS="term"
><CODE
CLASS="literal"
>RETURN INTEGER;</CODE
></DT
><DD
CLASS="listitem"
><P
CLASS="para"
>Returns the number of atomics in a string, where the definition of an atomic is provided by the count type (all or word or delimiter) and the set of delimiters.</P
></DD
><DT
CLASS="term"
><CODE
CLASS="literal"
> FUNCTION nth_atomic</CODE
><A
CLASS="indexterm"
NAME="ch05-idx-1001442-0"
></A
></DT
><DT
CLASS="term"
><CODE
CLASS="literal"
>   (string_in IN VARCHAR2, </CODE
></DT
><DT
CLASS="term"
><CODE
CLASS="literal"
>    nth_in IN NUMBER,</CODE
></DT
><DT
CLASS="term"
><CODE
CLASS="literal"
>    count_type_in IN VARCHAR2 := c_all,</CODE
></DT
><DT
CLASS="term"
><CODE
CLASS="literal"
>    delimiters_in IN VARCHAR2 := std_delimiters)</CODE
></DT
><DT
CLASS="term"
><CODE
CLASS="literal"
>RETURN VARCHAR2;</CODE
></DT
><DD
CLASS="listitem"
><P
CLASS="para"
>Returns the <EM
CLASS="emphasis"
>n</EM
>th atomic in a string, where the definition of an atomic is provided by the count type (all or word or delimiter) and the set of delimiters.</P
></DD
><DT
CLASS="term"
><CODE
CLASS="literal"
>FUNCTION numinstr</CODE
><A
CLASS="indexterm"
NAME="ch05-idx-1001443-0"
></A
></DT
><DT
CLASS="term"
><CODE
CLASS="literal"
>   (string_in IN VARCHAR2,</CODE
></DT
><DT
CLASS="term"
><CODE
CLASS="literal"
>    substring_in IN VARCHAR2,</CODE
></DT
><DT
CLASS="term"
><CODE
CLASS="literal"
>    ignore_case_in IN VARCHAR2 := c_ignore_case)</CODE
></DT
><DT
CLASS="term"
><CODE
CLASS="literal"
>RETURN INTEGER;</CODE
></DT
><DD
CLASS="listitem"
><P
CLASS="para"
>Returns the number of times a substring occurs in a string. You can choose to perform a search that is case-sensitive or that ignores case.</P
></DD
></DL
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch05-SECT-21.0.4"
>5.21.4 Parsing strings</A
></H3
><DL
CLASS="variablelist"
><DT
CLASS="term"
><CODE
CLASS="literal"
> PROCEDURE string </CODE
><A
CLASS="indexterm"
NAME="ch05-idx-1001444-0"
></A
></DT
><DT
CLASS="term"
><CODE
CLASS="literal"
>   (string_in IN VARCHAR2, </CODE
></DT
><DT
CLASS="term"
><CODE
CLASS="literal"
>    atomics_list_out OUT PLVtab.vc2000_table, </CODE
></DT
><DT
CLASS="term"
><CODE
CLASS="literal"
>    num_atomics_out IN OUT NUMBER,</CODE
></DT
><DT
CLASS="term"
><CODE
CLASS="literal"
>    delimiters_in IN VARCHAR2 := std_delimiters);</CODE
></DT
><DD
CLASS="listitem"
><P
CLASS="para"
>Parses a string into atomics that are loaded into a <SPAN
CLASS="acronym"
>PL/SQL</SPAN
> table. You decide which characters will serve as the delimiters.</P
></DD
><DT
CLASS="term"
><CODE
CLASS="literal"
> PROCEDURE string </CODE
></DT
><DT
CLASS="term"
><CODE
CLASS="literal"
>   (string_in IN VARCHAR2, </CODE
></DT
><DT
CLASS="term"
><CODE
CLASS="literal"
>    atomics_list_out IN OUT VARCHAR2, </CODE
></DT
><DT
CLASS="term"
><CODE
CLASS="literal"
>    num_atomics_out IN OUT NUMBER,</CODE
></DT
><DT
CLASS="term"
><CODE
CLASS="literal"
>    delimiters_in IN VARCHAR2 := std_delimiters);</CODE
></DT
><DD
CLASS="listitem"
><P
CLASS="para"
>Parses a string into atomics stored in a string with each atomic separated by a vertical bar. Once again, you decide which characters will serve as the delimiters.</P
></DD
><DT
CLASS="term"
><CODE
CLASS="literal"
> PROCEDURE display_atomics</CODE
><A
CLASS="indexterm"
NAME="ch05-idx-1001445-0"
></A
><A
CLASS="indexterm"
NAME="ch05-idx-1001445-1"
></A
><A
CLASS="indexterm"
NAME="ch05-idx-1001445-2"
></A
><A
CLASS="indexterm"
NAME="ch05-idx-1001445-3"
></A
><A
CLASS="indexterm"
NAME="ch05-idx-1001445-4"
></A
><A
CLASS="indexterm"
NAME="ch05-idx-1001445-5"
></A
></DT
><DT
CLASS="term"
><CODE
CLASS="literal"
>   (string_in IN VARCHAR2, </CODE
></DT
><DT
CLASS="term"
><CODE
CLASS="literal"
>    delimiters_in IN VARCHAR2 := std_delimiters);</CODE
></DT
><DD
CLASS="listitem"
><P
CLASS="para"
>Displays the individual atomics in a string, as defined by the provided list of delimiters.</P
></DD
></DL
></DIV
></DIV
><DIV
CLASS="htmlnav"
><P
></P
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch05_20.htm#ch05-SECT-20.0.8"
TITLE="5.20 PLVobj: Object Interface"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 5.20 PLVobj: Object Interface"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="book"
HREF="index.htm"
TITLE="Advanced Oracle PL/SQL Programming with Packages"
><IMG
SRC="../gifs/txthome.gif"
ALT="Advanced Oracle PL/SQL Programming with Packages"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch05_22.htm#ch05-SECT-22.0.2"
TITLE="5.22 PLVprsps: PL/SQL Source Code Parsing"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 5.22 PLVprsps: PL/SQL Source Code Parsing"
BORDER="0"></A
></TD
></TR
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
>5.20 PLVobj: Object Interface</TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="index"
HREF="index/idx_0.htm"
TITLE="Book Index"
><IMG
SRC="../gifs/index.gif"
ALT="Book Index"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
>5.22 PLVprsps: PL/SQL Source Code Parsing</TD
></TR
></TABLE
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"></DIV
><IMG
SRC="../gifs/smnavbar.gif"
USEMAP="#map"
BORDER="0"
ALT="The Oracle Library Navigation">

<P><font size="-1">
<a href="../copyrght.htm#copy">Copyright (c) 2000</a> O'Reilly & Associates. All rights reserved.
</font></P>

<MAP NAME="map">

<AREA SHAPE="RECT"
COORDS="0,0,35,30"
HREF="../index.htm"
ALT="Library Home">

<AREA SHAPE="RECT"
COORDS="40,0,95,30"
HREF="../prog2/index.htm"
ALT="Oracle PL/SQL Programming, 2nd. Ed.">

<AREA SHAPE="RECT"
COORDS="100,0,200,30"
HREF="../guide8i/index.htm"
ALT="Guide to Oracle 8i Features">

<AREA SHAPE="RECT"
COORDS="205,0,245,30"
HREF="../bipack/index.htm"
ALT="Oracle Built-in Packages">

<AREA SHAPE="RECT"
COORDS="250,0,320,30"
HREF="index.htm"
ALT="Advanced PL/SQL Programming with Packages">

<AREA SHAPE="RECT"
COORDS="325,0,420,30"
HREF="../webapp/index.htm"
ALT="Oracle Web Applications">

<AREA SHAPE="RECT"
COORDS="425,0,490,30"
HREF="../langpkt/index.htm"
ALT="Oracle PL/SQL Language Pocket Reference">

<AREA SHAPE="RECT"
COORDS="495,0,570,30"
HREF="../bipkt/index.htm"
ALT="Oracle PL/SQL Built-ins Pocket Reference">
</MAP>
</BODY
>
<!-- Mirrored from liso.cs.pusan.ac.kr by HTTrack Website Copier/3.x [XR&CO'2001] -->
</HTML
>
