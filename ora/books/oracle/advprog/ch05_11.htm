<HTML
><HEAD
><TITLE
>[Chapter 5] 5.11 PLVfile: Operating System I/O Manager</TITLE
><META
NAME="DC.Creator"
CONTENT="Steven Feuerstein"><META
NAME="DC.Date"
CONTENT="2000-04-29T18:24:42Z"><META
NAME="DC.Format"
CONTENT="text/html"
SCHEME="MIME"><META
NAME="DC.Identifier"
CONTENT="O'Reilly and Associates-1-56592-238-7E"><META
NAME="DC.Language"
CONTENT="en-US"><META
NAME="DC.Publisher"
CONTENT="O'Reilly &amp; Associates, Inc."><META
NAME="DC.Source"
CONTENT="1-56592-238-7E"
SCHEME="ISBN"><META
NAME="DC.Subject.Keyword"
CONTENT="PL/SQL SQL Oracle Packages"><META
NAME="DC.Title"
CONTENT="Advanced Oracle PL/SQL Programming with Packages"><META
NAME="DC.Type"
CONTENT="Text.Monograph"><META
NAME="generator"
CONTENT="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><LINK
REL="stylesheet"
TYPE="text/css"
HREF="../style/style1.css"><LINK
REV="made"
HREF="mailto:online-books@oreilly.com"
TITLE="Online Books Comments"><LINK
REL="up"
HREF="ch05_01.htm"
TITLE="5. PL/Vision Package Specifications"><LINK
REL="prev"
HREF="ch05_10.htm#ch05-SECT-10.0.2"
TITLE="5.10 PLVexc: Exception Handling"><LINK
REL="next"
HREF="ch05_12.htm#ch05-SECT-12.0.4"
TITLE="5.12 PLVfk: Foreign Key Interface"></HEAD>
<BODY><DIV CLASS="htmlnav"
><H1
><IMG
SRC="gifs/smbanner.gif"
ALT="Advanced Oracle PL/SQL Programming with Packages"
USEMAP="#srchmap"
BORDER="0"></H1
><MAP
NAME="srchmap"
><AREA
SHAPE="RECT"
COORDS="0,0,466,65"
HREF="index.htm"
ALT="Advanced Oracle PL/SQL Programming with Packages"><AREA
SHAPE="RECT"
COORDS="467,0,514,18"
HREF="jobjects/fsearch.htm"
ALT="Search this book"></MAP
><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch05_10.htm#ch05-SECT-10.0.2"
TITLE="5.10 PLVexc: Exception Handling"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 5.10 PLVexc: Exception Handling"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><SPAN
CLASS="NAVTITLE"
><A
CLASS="chapter"
REL="up"
HREF="ch05_01.htm"
TITLE="5. PL/Vision Package Specifications"
>Chapter 5<BR>PL/Vision Package Specifications</A
></SPAN
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch05_12.htm#ch05-SECT-12.0.4"
TITLE="5.12 PLVfk: Foreign Key Interface"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 5.12 PLVfk: Foreign Key Interface"
BORDER="0"></A
></TD
></TR
></TABLE
>&nbsp;<HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"></DIV
><DIV
CLASS="sect1"
><H2
CLASS="sect1"
><A
CLASS="title"
NAME="ch05-SECT-11"
>5.11 PLVfile: Operating System I/O Manager</A
></H2
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="ch05-idx-1001247-0"
></A
><A
CLASS="indexterm"
NAME="ch05-idx-1001247-1"
></A
><A
CLASS="indexterm"
NAME="ch05-idx-1001247-2"
></A
><A
CLASS="indexterm"
NAME="ch05-idx-1001247-3"
></A
>The PLVfile (PL/Vision FILE) package manages operating system I/O by providing a layer of code around Oracle's builtin UTL_FILE package. See <A
CLASS="xref"
HREF="ch13_01.htm"
>Chapter 13, <CITE
CLASS="chapter"
>PLVfile: Reading and Writing Operating System Files</CITE
></A
> for details.</P
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch05-SECT-11.0.1"
>5.11.1 Package constants and exceptions</A
></H3
><DL
CLASS="variablelist"
><DT
CLASS="term"
><CODE
CLASS="literal"
> max_line_size CONSTANT INTEGER := 1000;</CODE
><A
CLASS="indexterm"
NAME="ch05-idx-1001248-0"
></A
></DT
><DD
CLASS="listitem"
><P
CLASS="para"
>The maximum size of a line allowed to be read or written with PLVfile.</P
></DD
><DT
CLASS="term"
><CODE
CLASS="literal"
> max_line VARCHAR2(1000);</CODE
><A
CLASS="indexterm"
NAME="ch05-idx-1001249-0"
></A
></DT
><DD
CLASS="listitem"
><P
CLASS="para"
>I had to "hard code" the 1000 again in this declaration because you must supply a <EM
CLASS="emphasis"
>literal</EM
> when you declare a length for a VARCHAR2 string. Predefined variable you can use to anchor declarations of local variables in your own programs that will hold the maximum length line allowed in PLVfile.</P
></DD
><DT
CLASS="term"
><CODE
CLASS="literal"
> c_append CONSTANT VARCHAR2(1) := 'A';</CODE
><A
CLASS="indexterm"
NAME="ch05-idx-1001250-0"
></A
></DT
><DT
CLASS="term"
><CODE
CLASS="literal"
>c_read CONSTANT VARCHAR2(1) := 'R';</CODE
><A
CLASS="indexterm"
NAME="ch05-idx-1001251-0"
></A
></DT
><DT
CLASS="term"
><CODE
CLASS="literal"
>c_write CONSTANT VARCHAR2(1) := 'W';</CODE
><A
CLASS="indexterm"
NAME="ch05-idx-1001252-0"
></A
></DT
><DD
CLASS="listitem"
><P
CLASS="para"
>The different types of file access allowed with the UTL_FILE builtin package (<KBD
CLASS="command"
>A</KBD
> = append to existing lines in file, <KBD
CLASS="command"
>R</KBD
> = read-only from file and <KBD
CLASS="command"
>W</KBD
> = write over existing contents of file).</P
></DD
><DT
CLASS="term"
><CODE
CLASS="literal"
> c_unixdelim CONSTANT VARCHAR2(1) := '/';</CODE
><A
CLASS="indexterm"
NAME="ch05-idx-1001253-0"
></A
><A
CLASS="indexterm"
NAME="ch05-idx-1001253-1"
></A
><A
CLASS="indexterm"
NAME="ch05-idx-1001253-2"
></A
></DT
><DT
CLASS="term"
><CODE
CLASS="literal"
>c_dosdelim CONSTANT VARCHAR2(1) := '\';</CODE
><A
CLASS="indexterm"
NAME="ch05-idx-1001254-0"
></A
><A
CLASS="indexterm"
NAME="ch05-idx-1001254-1"
></A
></DT
><DD
CLASS="listitem"
><P
CLASS="para"
>Predefined operating system directory/path delimiters for <SPAN
CLASS="acronym"
>UNIX</SPAN
> and <SPAN
CLASS="acronym"
>MS-DOS</SPAN
>.</P
></DD
></DL
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch05-SECT-11.0.2"
>5.11.2 <A
CLASS="indexterm"
NAME="ch05-idx-1001255-0"
></A
>Trace PLVfile activity</A
></H3
><DL
CLASS="variablelist"
><DT
CLASS="term"
><CODE
CLASS="literal"
> PROCEDURE show;</CODE
></DT
><DD
CLASS="listitem"
><P
CLASS="para"
>Turns on the trace of PLVfile activity.</P
></DD
><DT
CLASS="term"
><CODE
CLASS="literal"
> PROCEDURE noshow;</CODE
></DT
><DD
CLASS="listitem"
><P
CLASS="para"
>Turns off the trace of PLVfile activity (default setting).</P
></DD
><DT
CLASS="term"
><CODE
CLASS="literal"
> FUNCTION showing RETURN BOOLEAN;</CODE
></DT
><DD
CLASS="listitem"
><P
CLASS="para"
>Returns <SPAN
CLASS="acronym"
>TRUE</SPAN
> if you are currently tracing PLVfile activity.</P
></DD
></DL
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch05-SECT-11.0.3"
>5.11.3 Setting the operating system delimiter</A
></H3
><DL
CLASS="variablelist"
><DT
CLASS="term"
><CODE
CLASS="literal"
> PROCEDURE set_delim (delim_in IN VARCHAR2);</CODE
><A
CLASS="indexterm"
NAME="ch05-idx-1001256-0"
></A
><A
CLASS="indexterm"
NAME="ch05-idx-1001256-1"
></A
><A
CLASS="indexterm"
NAME="ch05-idx-1001256-2"
></A
></DT
><DD
CLASS="listitem"
><P
CLASS="para"
>Sets the string to be used as the operating system delimiter (the character that goes between the file location and the file name).</P
></DD
><DT
CLASS="term"
><CODE
CLASS="literal"
> FUNCTION delim RETURN VARCHAR2;</CODE
><A
CLASS="indexterm"
NAME="ch05-idx-1001257-0"
></A
></DT
><DD
CLASS="listitem"
><P
CLASS="para"
>Returns the current operating system delimiter.</P
></DD
></DL
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch05-SECT-11.0.4"
>5.11.4 Setting the default directory or location</A
></H3
><DL
CLASS="variablelist"
><DT
CLASS="term"
><CODE
CLASS="literal"
> PROCEDURE set_dir (dir_in IN VARCHAR2);</CODE
><A
CLASS="indexterm"
NAME="ch05-idx-1001258-0"
></A
><A
CLASS="indexterm"
NAME="ch05-idx-1001258-1"
></A
><A
CLASS="indexterm"
NAME="ch05-idx-1001258-2"
></A
><A
CLASS="indexterm"
NAME="ch05-idx-1001258-3"
></A
></DT
><DD
CLASS="listitem"
><P
CLASS="para"
>Sets the default directory for the file you are managing with PLVfile. If you specify the directory with <KBD
CLASS="command"
>set_dir</KBD
>, you will not have to provide it in each call to PLVfile programs.</P
></DD
><DT
CLASS="term"
><CODE
CLASS="literal"
> FUNCTION dir RETURN VARCHAR2;</CODE
><A
CLASS="indexterm"
NAME="ch05-idx-1001259-0"
></A
></DT
><DD
CLASS="listitem"
><P
CLASS="para"
>Returns the current default directory.</P
></DD
></DL
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch05-SECT-11.0.5"
>5.11.5 <A
CLASS="indexterm"
NAME="ch05-idx-1001261-0"
></A
>Creating files</A
></H3
><DL
CLASS="variablelist"
><DT
CLASS="term"
><CODE
CLASS="literal"
> FUNCTION fcreate </CODE
><A
CLASS="indexterm"
NAME="ch05-idx-1001260-0"
></A
></DT
><DT
CLASS="term"
><CODE
CLASS="literal"
>   (loc_in IN VARCHAR2, file_in IN VARCHAR2, line_in IN VARCHAR2)</CODE
></DT
><DT
CLASS="term"
><CODE
CLASS="literal"
>RETURN UTL_FILE.FILE_TYPE;</CODE
></DT
><DD
CLASS="listitem"
><P
CLASS="para"
>Specify file location and name separately, as well as the single line of text to place in the file. The <KBD
CLASS="command"
>fcreate</KBD
> procedure will create the file and return the handle to the file.</P
></DD
><DT
CLASS="term"
><CODE
CLASS="literal"
> FUNCTION fcreate </CODE
></DT
><DT
CLASS="term"
><CODE
CLASS="literal"
>   (file_in IN VARCHAR2, line_in IN VARCHAR2 := NULL)</CODE
></DT
><DT
CLASS="term"
><CODE
CLASS="literal"
>RETURN UTL_FILE.FILE_TYPE;</CODE
></DT
><DD
CLASS="listitem"
><P
CLASS="para"
>Create the file without explicitly providing the file location.</P
></DD
><DT
CLASS="term"
><CODE
CLASS="literal"
> PROCEDURE fcreate </CODE
></DT
><DT
CLASS="term"
><CODE
CLASS="literal"
>   (loc_in IN VARCHAR2, file_in IN VARCHAR2, line_in IN VARCHAR2);</CODE
></DT
><DD
CLASS="listitem"
><P
CLASS="para"
>Create the file but do not return the handle to the file.</P
></DD
><DT
CLASS="term"
><CODE
CLASS="literal"
> PROCEDURE fcreate </CODE
></DT
><DT
CLASS="term"
><CODE
CLASS="literal"
>   (file_in IN VARCHAR2, line_in IN VARCHAR2 := NULL);</CODE
></DT
><DD
CLASS="listitem"
><P
CLASS="para"
>Create the file without explicitly providing the file location and do not return the handle to the file.</P
></DD
></DL
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch05-SECT-11.0.6"
>5.11.6 Checking for file existence</A
></H3
><DL
CLASS="variablelist"
><DT
CLASS="term"
><CODE
CLASS="literal"
> FUNCTION fexists (loc_in IN VARCHAR2, file_in IN VARCHAR2)</CODE
><A
CLASS="indexterm"
NAME="ch05-idx-1001262-0"
></A
><A
CLASS="indexterm"
NAME="ch05-idx-1001262-1"
></A
><A
CLASS="indexterm"
NAME="ch05-idx-1001262-2"
></A
><A
CLASS="indexterm"
NAME="ch05-idx-1001262-3"
></A
></DT
><DT
CLASS="term"
><CODE
CLASS="literal"
>RETURN BOOLEAN;</CODE
></DT
><DD
CLASS="listitem"
><P
CLASS="para"
>Provide location and name separately; function returns TRUE if PLVfile is able to open the file with read-only access.</P
></DD
><DT
CLASS="term"
><CODE
CLASS="literal"
> FUNCTION fexists (file_in IN VARCHAR2) RETURN BOOLEAN;</CODE
></DT
><DD
CLASS="listitem"
><P
CLASS="para"
>Returns TRUE if PLVfile is able to open the specified file with read-only access.</P
></DD
></DL
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch05-SECT-11.0.7"
>5.11.7 Opening a file</A
></H3
><DL
CLASS="variablelist"
><DT
CLASS="term"
><CODE
CLASS="literal"
> PROCEDURE fopen</CODE
><A
CLASS="indexterm"
NAME="ch05-idx-1001263-0"
></A
><A
CLASS="indexterm"
NAME="ch05-idx-1001263-1"
></A
><A
CLASS="indexterm"
NAME="ch05-idx-1001263-2"
></A
></DT
><DT
CLASS="term"
><CODE
CLASS="literal"
>   (loc_in IN VARCHAR2, file_in IN VARCHAR2, mode_in IN VARCHAR2);</CODE
></DT
><DD
CLASS="listitem"
><P
CLASS="para"
>Opens a file for the specified mode (location and name provided separately) and does not return the handle to the file.</P
></DD
><DT
CLASS="term"
><CODE
CLASS="literal"
> PROCEDURE fopen</CODE
></DT
><DT
CLASS="term"
><CODE
CLASS="literal"
>   (file_in IN VARCHAR2, mode_in IN VARCHAR2 := c_append);</CODE
></DT
><DD
CLASS="listitem"
><P
CLASS="para"
>Opens a file for the specified mode and does not return the handle to the file.</P
></DD
><DT
CLASS="term"
><CODE
CLASS="literal"
> FUNCTION fopen </CODE
></DT
><DT
CLASS="term"
><CODE
CLASS="literal"
>   (file_in IN VARCHAR2, mode_in IN VARCHAR2 := c_append)</CODE
></DT
><DT
CLASS="term"
><CODE
CLASS="literal"
>RETURN UTL_FILE.FILE_TYPE;</CODE
></DT
><DD
CLASS="listitem"
><P
CLASS="para"
>Opens a file for the specified mode and returns the handle to the file.</P
></DD
><DT
CLASS="term"
><CODE
CLASS="literal"
> FUNCTION fopen </CODE
></DT
><DT
CLASS="term"
><CODE
CLASS="literal"
>   (loc_in IN VARCHAR2, file_in IN VARCHAR2, mode_in IN VARCHAR2)</CODE
></DT
><DT
CLASS="term"
><CODE
CLASS="literal"
>RETURN UTL_FILE.FILE_TYPE;</CODE
></DT
><DD
CLASS="listitem"
><P
CLASS="para"
>Opens a file for the specified mode (location and name provided separately) and returns the handle to the file.</P
></DD
></DL
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch05-SECT-11.0.8"
>5.11.8 <A
CLASS="indexterm"
NAME="ch05-idx-1001267-0"
></A
>Closing a file</A
></H3
><DL
CLASS="variablelist"
><DT
CLASS="term"
><CODE
CLASS="literal"
> PROCEDURE fclose (file_in IN UTL_FILE.FILE_TYPE);</CODE
><A
CLASS="indexterm"
NAME="ch05-idx-1001264-0"
></A
></DT
><DD
CLASS="listitem"
><P
CLASS="para"
>Closes the specified file.</P
></DD
><DT
CLASS="term"
><CODE
CLASS="literal"
> PROCEDURE fclose_all;</CODE
><A
CLASS="indexterm"
NAME="ch05-idx-1001265-0"
></A
></DT
><DD
CLASS="listitem"
><P
CLASS="para"
>Closes all open files.</P
></DD
></DL
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch05-SECT-11.0.9"
>5.11.9 Reading from a file</A
></H3
><DL
CLASS="variablelist"
><DT
CLASS="term"
><CODE
CLASS="literal"
> PROCEDURE get_line </CODE
><A
CLASS="indexterm"
NAME="ch05-idx-1001266-0"
></A
><A
CLASS="indexterm"
NAME="ch05-idx-1001266-1"
></A
><A
CLASS="indexterm"
NAME="ch05-idx-1001266-2"
></A
></DT
><DT
CLASS="term"
><CODE
CLASS="literal"
>   (file_in IN UTL_FILE.FILE_TYPE, </CODE
></DT
><DT
CLASS="term"
><CODE
CLASS="literal"
>    line_out IN OUT VARCHAR2, </CODE
></DT
><DT
CLASS="term"
><CODE
CLASS="literal"
>    eof_out OUT BOOLEAN);</CODE
></DT
><DD
CLASS="listitem"
><P
CLASS="para"
>Retrieves the next line from the specified file (by file handle). Returns a flag indicating whether the end of the file has been reached.</P
></DD
><DT
CLASS="term"
><CODE
CLASS="literal"
> FUNCTION line (file_in IN VARCHAR2, line_num_in IN INTEGER)</CODE
><A
CLASS="indexterm"
NAME="ch05-idx-1001268-0"
></A
></DT
><DT
CLASS="term"
><CODE
CLASS="literal"
>RETURN VARCHAR2;</CODE
></DT
><DD
CLASS="listitem"
><P
CLASS="para"
>Returns the <EM
CLASS="emphasis"
>n</EM
>th line from the specified file. This program opens, reads from, and closes the file.</P
></DD
><DT
CLASS="term"
><CODE
CLASS="literal"
> FUNCTION infile </CODE
><A
CLASS="indexterm"
NAME="ch05-idx-1001269-0"
></A
></DT
><DT
CLASS="term"
><CODE
CLASS="literal"
>   (loc_in IN VARCHAR2,</CODE
></DT
><DT
CLASS="term"
><CODE
CLASS="literal"
>    file_in IN VARCHAR2, </CODE
></DT
><DT
CLASS="term"
><CODE
CLASS="literal"
>    text_in IN VARCHAR2, </CODE
></DT
><DT
CLASS="term"
><CODE
CLASS="literal"
>    nth_in IN INTEGER := 1,</CODE
></DT
><DT
CLASS="term"
><CODE
CLASS="literal"
>    start_line_in IN INTEGER := 1,</CODE
></DT
><DT
CLASS="term"
><CODE
CLASS="literal"
>    end_line_in IN INTEGER := 0,</CODE
></DT
><DT
CLASS="term"
><CODE
CLASS="literal"
>    ignore_case_in IN BOOLEAN := TRUE)</CODE
></DT
><DT
CLASS="term"
><CODE
CLASS="literal"
>RETURN INTEGER;</CODE
></DT
><DD
CLASS="listitem"
><P
CLASS="para"
>UTL_FILE-version of INSTR. Finds the <EM
CLASS="emphasis"
>n</EM
>th appearance of a string (<KBD
CLASS="command"
>text_in</KBD
>) within the specified range of lines.</P
></DD
><DT
CLASS="term"
><CODE
CLASS="literal"
> FUNCTION infile </CODE
></DT
><DT
CLASS="term"
><CODE
CLASS="literal"
>   (file_in IN VARCHAR2, </CODE
></DT
><DT
CLASS="term"
><CODE
CLASS="literal"
>    text_in IN VARCHAR2, </CODE
></DT
><DT
CLASS="term"
><CODE
CLASS="literal"
>    nth_in IN INTEGER := 1,</CODE
></DT
><DT
CLASS="term"
><CODE
CLASS="literal"
>    start_line_in IN INTEGER := 1,</CODE
></DT
><DT
CLASS="term"
><CODE
CLASS="literal"
>    end_line_in IN INTEGER := 0,</CODE
></DT
><DT
CLASS="term"
><CODE
CLASS="literal"
>    ignore_case_in IN BOOLEAN := TRUE)</CODE
></DT
><DT
CLASS="term"
><CODE
CLASS="literal"
>RETURN INTEGER;</CODE
></DT
><DD
CLASS="listitem"
><P
CLASS="para"
>UTL_FILE-version of INSTR. Finds the <EM
CLASS="emphasis"
>n</EM
>th appearance of a string (<KBD
CLASS="command"
>text_in</KBD
>) within the specified range of lines. In this version you do not have to provide the location of the file separately from the name.</P
></DD
></DL
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch05-SECT-11.0.10"
>5.11.10 Writing to a file</A
></H3
><DL
CLASS="variablelist"
><DT
CLASS="term"
><CODE
CLASS="literal"
> PROCEDURE put_line </CODE
><A
CLASS="indexterm"
NAME="ch05-idx-1001270-0"
></A
><A
CLASS="indexterm"
NAME="ch05-idx-1001270-1"
></A
></DT
><DT
CLASS="term"
><CODE
CLASS="literal"
>   (file_in IN UTL_FILE.FILE_TYPE,line_in IN VARCHAR2); </CODE
></DT
><DD
CLASS="listitem"
><P
CLASS="para"
>Adds a line to the end of the specified file (by file handle). This file must already be opened for write or append access.</P
></DD
><DT
CLASS="term"
><CODE
CLASS="literal"
> PROCEDURE append_line (file_in IN VARCHAR2, line_in IN VARCHAR2);</CODE
><A
CLASS="indexterm"
NAME="ch05-idx-1001271-0"
></A
></DT
><DD
CLASS="listitem"
><P
CLASS="para"
>Add a line to the end of the specified file. This program opens the file for append access, writes to the file using <KBD
CLASS="command"
>put_line</KBD
>, and then closes the file.</P
></DD
></DL
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch05-SECT-11.0.11"
>5.11.11 Copying a file</A
></H3
><DL
CLASS="variablelist"
><DT
CLASS="term"
><CODE
CLASS="literal"
> PROCEDURE fcopy </CODE
><A
CLASS="indexterm"
NAME="ch05-idx-1001272-0"
></A
><A
CLASS="indexterm"
NAME="ch05-idx-1001272-1"
></A
><A
CLASS="indexterm"
NAME="ch05-idx-1001272-2"
></A
></DT
><DT
CLASS="term"
><CODE
CLASS="literal"
>   (ofile_in IN VARCHAR2, nfile_in IN VARCHAR2,</CODE
></DT
><DT
CLASS="term"
><CODE
CLASS="literal"
>    start_in IN INTEGER := 1, end_in IN INTEGER := NULL);</CODE
></DT
><DD
CLASS="listitem"
><P
CLASS="para"
>Copies the contents of the old file (<KBD
CLASS="command"
>ofile_in</KBD
>) to the new file (<KBD
CLASS="command"
>nfile_in</KBD
>) for all lines within the specified range.</P
></DD
><DT
CLASS="term"
><CODE
CLASS="literal"
> PROCEDURE file2pstab </CODE
><A
CLASS="indexterm"
NAME="ch05-idx-1001273-0"
></A
><A
CLASS="indexterm"
NAME="ch05-idx-1001273-1"
></A
></DT
><DT
CLASS="term"
><CODE
CLASS="literal"
>   (file_in IN VARCHAR2,</CODE
></DT
><DT
CLASS="term"
><CODE
CLASS="literal"
>    table_inout IN OUT PLVtab.vc2000_table,</CODE
></DT
><DT
CLASS="term"
><CODE
CLASS="literal"
>    rows_out OUT INTEGER);</CODE
></DT
><DD
CLASS="listitem"
><P
CLASS="para"
>Copies the contents of the file to the <SPAN
CLASS="acronym"
>PL/SQL</SPAN
> table.</P
></DD
><DT
CLASS="term"
><CODE
CLASS="literal"
> PROCEDURE file2list (file_in IN VARCHAR2, list_in IN VARCHAR2);</CODE
><A
CLASS="indexterm"
NAME="ch05-idx-1001274-0"
></A
><A
CLASS="indexterm"
NAME="ch05-idx-1001274-1"
></A
></DT
><DD
CLASS="listitem"
><P
CLASS="para"
>Copies the contents of the file to the PLVlst list specified by the list name.</P
></DD
><DT
CLASS="term"
><CODE
CLASS="literal"
> PROCEDURE pstab2file </CODE
><A
CLASS="indexterm"
NAME="ch05-idx-1001275-0"
></A
></DT
><DT
CLASS="term"
><CODE
CLASS="literal"
>   (table_in IN PLVtab.vc2000_table,</CODE
></DT
><DT
CLASS="term"
><CODE
CLASS="literal"
>    rows_in IN INTEGER,</CODE
></DT
><DT
CLASS="term"
><CODE
CLASS="literal"
>    file_in IN VARCHAR2,</CODE
></DT
><DT
CLASS="term"
><CODE
CLASS="literal"
>    mode_in IN VARCHAR2 := c_write);</CODE
></DT
><DD
CLASS="listitem"
><P
CLASS="para"
>Copies the contents of the <SPAN
CLASS="acronym"
>PL/SQL</SPAN
> table to a file. You can open the file in either write mode or append mode (in which case the rows are added to the current contents of the file).</P
></DD
></DL
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch05-SECT-11.0.12"
>5.11.12 Displaying the contents of a file</A
></H3
><DL
CLASS="variablelist"
><DT
CLASS="term"
><CODE
CLASS="literal"
> PROCEDURE display </CODE
><A
CLASS="indexterm"
NAME="ch05-idx-1001276-0"
></A
></DT
><DT
CLASS="term"
><CODE
CLASS="literal"
>   (file_in IN UTL_FILE.FILE_TYPE, </CODE
></DT
><DT
CLASS="term"
><CODE
CLASS="literal"
>    header_in IN VARCHAR2 := NULL,</CODE
></DT
><DT
CLASS="term"
><CODE
CLASS="literal"
>    start_in IN INTEGER := 1,</CODE
></DT
><DT
CLASS="term"
><CODE
CLASS="literal"
>    end_in IN INTEGER := NULL);</CODE
></DT
><DD
CLASS="listitem"
><P
CLASS="para"
>Displays the contents of the file (specified by file handle) using the <KBD
CLASS="command"
>p.l</KBD
> procedure. This version of <KBD
CLASS="command"
>display</KBD
> assumes that the file has been opened.</P
></DD
><DT
CLASS="term"
><CODE
CLASS="literal"
> PROCEDURE display</CODE
></DT
><DT
CLASS="term"
><CODE
CLASS="literal"
>   (file_in IN VARCHAR2, </CODE
></DT
><DT
CLASS="term"
><CODE
CLASS="literal"
>    header_in IN VARCHAR2 := NULL,</CODE
></DT
><DT
CLASS="term"
><CODE
CLASS="literal"
>    start_in IN INTEGER := 1,</CODE
></DT
><DT
CLASS="term"
><CODE
CLASS="literal"
>    end_in IN INTEGER := NULL);</CODE
></DT
><DD
CLASS="listitem"
><P
CLASS="para"
>Displays the contents of the file (specified by file name using the <KBD
CLASS="command"
>p.l</KBD
> procedure. This version of <KBD
CLASS="command"
>display</KBD
> assumes that the file must be opened before reading the contents.</P
></DD
></DL
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch05-SECT-11.0.13"
>5.11.13 Miscellaneous operations</A
></H3
><DL
CLASS="variablelist"
><DT
CLASS="term"
><CODE
CLASS="literal"
> PROCEDURE parse_name </CODE
><A
CLASS="indexterm"
NAME="ch05-idx-1001277-0"
></A
><A
CLASS="indexterm"
NAME="ch05-idx-1001277-1"
></A
><A
CLASS="indexterm"
NAME="ch05-idx-1001277-2"
></A
></DT
><DT
CLASS="term"
><CODE
CLASS="literal"
>   (file_in IN VARCHAR2, loc_out IN OUT VARCHAR2,</CODE
></DT
><DT
CLASS="term"
><CODE
CLASS="literal"
>    name_out IN OUT VARCHAR2);</CODE
></DT
><DD
CLASS="listitem"
><P
CLASS="para"
>Parses a file specification (directory, name, and extension) into two separate strings: the location or directory and the file name itself.<A
CLASS="indexterm"
NAME="ch05-idx-1001279-0"
></A
><A
CLASS="indexterm"
NAME="ch05-idx-1001279-1"
></A
><A
CLASS="indexterm"
NAME="ch05-idx-1001279-2"
></A
></P
></DD
></DL
></DIV
></DIV
><DIV
CLASS="htmlnav"
><P
></P
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch05_10.htm#ch05-SECT-10.0.2"
TITLE="5.10 PLVexc: Exception Handling"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 5.10 PLVexc: Exception Handling"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="book"
HREF="index.htm"
TITLE="Advanced Oracle PL/SQL Programming with Packages"
><IMG
SRC="../gifs/txthome.gif"
ALT="Advanced Oracle PL/SQL Programming with Packages"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch05_12.htm#ch05-SECT-12.0.4"
TITLE="5.12 PLVfk: Foreign Key Interface"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 5.12 PLVfk: Foreign Key Interface"
BORDER="0"></A
></TD
></TR
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
>5.10 PLVexc: Exception Handling</TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="index"
HREF="index/idx_0.htm"
TITLE="Book Index"
><IMG
SRC="../gifs/index.gif"
ALT="Book Index"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
>5.12 PLVfk: Foreign Key Interface</TD
></TR
></TABLE
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"></DIV
><IMG
SRC="../gifs/smnavbar.gif"
USEMAP="#map"
BORDER="0"
ALT="The Oracle Library Navigation">

<P><font size="-1">
<a href="../copyrght.htm#copy">Copyright (c) 2000</a> O'Reilly & Associates. All rights reserved.
</font></P>

<MAP NAME="map">

<AREA SHAPE="RECT"
COORDS="0,0,35,30"
HREF="../index.htm"
ALT="Library Home">

<AREA SHAPE="RECT"
COORDS="40,0,95,30"
HREF="../prog2/index.htm"
ALT="Oracle PL/SQL Programming, 2nd. Ed.">

<AREA SHAPE="RECT"
COORDS="100,0,200,30"
HREF="../guide8i/index.htm"
ALT="Guide to Oracle 8i Features">

<AREA SHAPE="RECT"
COORDS="205,0,245,30"
HREF="../bipack/index.htm"
ALT="Oracle Built-in Packages">

<AREA SHAPE="RECT"
COORDS="250,0,320,30"
HREF="index.htm"
ALT="Advanced PL/SQL Programming with Packages">

<AREA SHAPE="RECT"
COORDS="325,0,420,30"
HREF="../webapp/index.htm"
ALT="Oracle Web Applications">

<AREA SHAPE="RECT"
COORDS="425,0,490,30"
HREF="../langpkt/index.htm"
ALT="Oracle PL/SQL Language Pocket Reference">

<AREA SHAPE="RECT"
COORDS="495,0,570,30"
HREF="../bipkt/index.htm"
ALT="Oracle PL/SQL Built-ins Pocket Reference">
</MAP>
</BODY
>
<!-- Mirrored from liso.cs.pusan.ac.kr by HTTrack Website Copier/3.x [XR&CO'2001] -->
</HTML
>
