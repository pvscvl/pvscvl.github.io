<HTML
><HEAD
><TITLE
>[Chapter 8] 8.2 Displaying PLVtab Tables</TITLE
><META
NAME="DC.Creator"
CONTENT="Steven Feuerstein"><META
NAME="DC.Date"
CONTENT="2000-04-29T18:26:48Z"><META
NAME="DC.Format"
CONTENT="text/html"
SCHEME="MIME"><META
NAME="DC.Identifier"
CONTENT="O'Reilly and Associates-1-56592-238-7E"><META
NAME="DC.Language"
CONTENT="en-US"><META
NAME="DC.Publisher"
CONTENT="O'Reilly &amp; Associates, Inc."><META
NAME="DC.Source"
CONTENT="1-56592-238-7E"
SCHEME="ISBN"><META
NAME="DC.Subject.Keyword"
CONTENT="PL/SQL SQL Oracle Packages"><META
NAME="DC.Title"
CONTENT="Advanced Oracle PL/SQL Programming with Packages"><META
NAME="DC.Type"
CONTENT="Text.Monograph"><META
NAME="generator"
CONTENT="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><LINK
REL="stylesheet"
TYPE="text/css"
HREF="../style/style1.css"><LINK
REV="made"
HREF="mailto:online-books@oreilly.com"
TITLE="Online Books Comments"><LINK
REL="up"
HREF="ch08_01.htm"
TITLE="8. PLVtab: Easy Access to PL/SQL Tables"><LINK
REL="prev"
HREF="ch08_01.htm"
TITLE="8.1 Using PLVtab-Based PL/SQL Table Types"><LINK
REL="next"
HREF="ch08_03.htm"
TITLE="8.3 Showing Header Toggle"></HEAD>
<BODY><DIV CLASS="htmlnav"
><H1
><IMG
SRC="gifs/smbanner.gif"
ALT="Advanced Oracle PL/SQL Programming with Packages"
USEMAP="#srchmap"
BORDER="0"></H1
><MAP
NAME="srchmap"
><AREA
SHAPE="RECT"
COORDS="0,0,466,65"
HREF="index.htm"
ALT="Advanced Oracle PL/SQL Programming with Packages"><AREA
SHAPE="RECT"
COORDS="467,0,514,18"
HREF="jobjects/fsearch.htm"
ALT="Search this book"></MAP
><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch08_01.htm"
TITLE="8.1 Using PLVtab-Based PL/SQL Table Types"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 8.1 Using PLVtab-Based PL/SQL Table Types"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><SPAN
CLASS="NAVTITLE"
><A
CLASS="chapter"
REL="up"
HREF="ch08_01.htm"
TITLE="8. PLVtab: Easy Access to PL/SQL Tables"
>Chapter 8<BR>PLVtab: Easy Access to PL/SQL Tables</A
></SPAN
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch08_03.htm"
TITLE="8.3 Showing Header Toggle"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 8.3 Showing Header Toggle"
BORDER="0"></A
></TD
></TR
></TABLE
>&nbsp;<HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"></DIV
><DIV
CLASS="sect1"
><H2
CLASS="sect1"
><A
CLASS="title"
NAME="ch08-29284"
>8.2 Displaying PLVtab Tables<A
CLASS="indexterm"
NAME="ch08-idx-997778-0"
></A
></A
></H2
><P
CLASS="para"
>For each type of table, PLVtab provides a <KBD
CLASS="command"
>display</KBD
> procedure to show the contents of the table. As a result, there are nine, overloaded versions of the <KBD
CLASS="command"
>display</KBD
> procedure. The headers for each of these programs are the same, except for the datatype of the first parameter (the kind of table to be displayed).</P
><P
CLASS="para"
>Here, for example, is the specification of the procedure to display a date table:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>   PROCEDURE display 
    (tab_in IN date_table, 
     end_in IN INTEGER,
     hdr_in IN VARCHAR2 := NULL,
     start_in IN INTEGER := 1,
     failure_threshold_in IN INTEGER := 0,
     increment_in IN INTEGER := +1);</PRE
></BLOCKQUOTE
><P
CLASS="para"
>As you can see, there are lots of parameters, and that means lots of flexibility in specifying what rows are displayed and the format of the display. Here is an explanation of the various arguments:</P
><TABLE
CLASS="informaltable"
BORDER="1"
CELLPADDING="3"
><THEAD
CLASS="thead"
><TR
CLASS="row"
VALIGN="TOP"
><TH
CLASS="entry"
ALIGN="LEFT"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>Argument</P
></TH
><TH
CLASS="entry"
ALIGN="LEFT"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>Description</P
></TH
></TR
></THEAD
><TBODY
CLASS="tbody"
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
><KBD
CLASS="command"
>tab_in</KBD
></P
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>The <SPAN
CLASS="acronym"
>PL/SQL</SPAN
> table you want to display. The table type must be one of those predefined in PLVtab.</P
></TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
><KBD
CLASS="command"
>end_in</KBD
></P
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>The last row you want displayed. This is required. Until <SPAN
CLASS="acronym"
>PL/SQL</SPAN
> Release 2.3 there is no way for PLVtab to know the total number of rows defined in the table. As you will see below, you can also specify the starting row, which defaults to 1.</P
></TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
><KBD
CLASS="command"
>hdr_in</KBD
></P
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>The header you want displayed before the individual rows are written out using the <KBD
CLASS="command"
>p.l</KBD
> procedure.</P
></TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
><KBD
CLASS="command"
>start_in</KBD
></P
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>The first row you want displayed. The default value is 1. This is placed after the <KBD
CLASS="command"
>end_in</KBD
> argument because in almost every case it will not need to be specified.</P
></TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
><KBD
CLASS="command"
>failure_threshold_in</KBD
></P
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>The number of times the display program can reference an undefined row in the table before it stops trying any more. Remember: <SPAN
CLASS="acronym"
>PL/SQL</SPAN
> tables are sparse. Consecutive rows do not need to be defined, but the display program does need to move sequentially through the table to display its rows.</P
></TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
><KBD
CLASS="command"
>increment_in</KBD
></P
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>The increment used to move from the current row to the next row. The default value is 1, but you could ask display to show every fifth row by passing a value of 5.</P
></TD
></TR
></TBODY
></TABLE
><P
CLASS="para"
>The following examples illustrate how the different arguments are used.</P
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch08-SECT-2.1"
>8.2.1 Displaying Wrapped Text<A
CLASS="indexterm"
NAME="ch08-idx-997779-0"
></A
><A
CLASS="indexterm"
NAME="ch08-idx-997779-1"
></A
></A
></H3
><P
CLASS="para"
>The <KBD
CLASS="command"
>display_wrap</KBD
> program<A
CLASS="indexterm"
NAME="ch08-idx-997780-0"
></A
> of the PLVprs package takes advantage of the PLVtab package in several ways. It declares and uses a VARCHAR2(2000) table to receive the output from the <KBD
CLASS="command"
>wrap</KBD
> procedure, which wraps a long string into multiple lines, each line of which is stored in a row in the <SPAN
CLASS="acronym"
>PL/SQL</SPAN
> table. This table is then displayed with a call to the <KBD
CLASS="command"
>display</KBD
> procedure. Notice that <KBD
CLASS="command"
>display_wrap</KBD
> also turns off the PLVtab header and sets the prefix before performing the display. These toggles for PLVtab are discussed in the next section.</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>PROCEDURE display_wrap
  (text_in IN VARCHAR2,
   line_length IN INTEGER := 80,
   prefix_in IN VARCHAR2 := NULL)
IS
  lines PLVtab.vc2000_table;
  line_count INTEGER := 0;
BEGIN
  PLVtab.noshow_header;
  PLVtab.set_prefix (prefix_in);
  wrap (text_in, line_length, lines, line_count);
  PLVtab.display (lines, line_count); 
END;</PRE
></BLOCKQUOTE
><P
CLASS="para"
>Notice that in this call to <KBD
CLASS="command"
>display</KBD
> I employ most of the defaults: a NULL header, a starting row of 1, a failure threshold of 0 (all rows should be defined), and an increment of 1. I do not want a header since I am essentially using <KBD
CLASS="command"
>display</KBD
> as a utility within another program.</P
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch08-SECT-2.2"
>8.2.2 Displaying Selected Companies</A
></H3
><P
CLASS="para"
>Suppose that I have populated a <SPAN
CLASS="acronym"
>PL/SQL</SPAN
> table with company names, where the row number is the primary key or company ID. I am, therefore, not filling the <SPAN
CLASS="acronym"
>PL/SQL</SPAN
> table sequentially. By keeping track of the lowest and highest row used in the table, however, I can still display all the defined rows in the <SPAN
CLASS="acronym"
>PL/SQL</SPAN
> table as shown below.</P
><P
CLASS="para"
>First, the package containing the data structures associated with the list of company names:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>PACKAGE comp_names
IS
   /* The table of names. */
   list PLVtab.vc80_table;
   /* The lowest row number used. */
   lo_row BINARY_INTEGER := NULL;
   /* The highest row number used. */
   hi_row BINARY_INTEGER := NULL;
END comp_names;</PRE
></BLOCKQUOTE
><P
CLASS="para"
>Then various programs have been called to fill up the <SPAN
CLASS="acronym"
>PL/SQL</SPAN
> table with any number of company names. The following call to display will show all defined rows regardless of how many there are, and how many undefined rows lie between company names.</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>PLVtab.display 
  (comp_names.list,
   comp_names.hi_row,
   'Selected Company Names',
   comp_names.lo_row,
   comp_names.hi_row - comp_names.lo_row); </PRE
></BLOCKQUOTE
><P
CLASS="para"
>Let's look at a concrete example. Row 1506 is assigned the value of ACME, while row 20200 contains the company name ArtForms. I can then make the above call to <KBD
CLASS="command"
>PLVtab.display</KBD
> and get the following results displayed on the screen:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>Selected Company Names
ACME
ArtForms</PRE
></BLOCKQUOTE
><P
CLASS="para"
>You will probably be surprised to hear that it took more than 83 seconds on my Pentium 90Mhz laptop to produce these results. Why so long a delay? The <KBD
CLASS="command"
>display</KBD
> procedure displayed row 1506 and then attempted unsuccessfully 18,693 times to retrieve the rows between 1506 and 20200. Each time <KBD
CLASS="command"
>display</KBD
> referenced an undefined row, the <SPAN
CLASS="acronym"
>PL/SQL</SPAN
> runtime engine raised the NO_DATA_FOUND exception, which was ignored.</P
><P
CLASS="para"
>The conclusion you should draw from this example is that <KBD
CLASS="command"
>PLVtab.display</KBD
> does a great job of hiding these kinds of details, but it is still important for you to understand the architecture of <SPAN
CLASS="acronym"
>PL/SQL</SPAN
> tables. This understanding will help you explain what would otherwise be an absurdly slow response time&nbsp;-- and also help you decide when to take advantage of the <KBD
CLASS="command"
>PLVtab.display</KBD
> procedure. If your defined rows are dispersed widely, <KBD
CLASS="command"
>PLVtab.display</KBD
> may not be efficient enough a method to display the contents of your table.</P
></DIV
></DIV
><DIV
CLASS="htmlnav"
><P
></P
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch08_01.htm"
TITLE="8.1 Using PLVtab-Based PL/SQL Table Types"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 8.1 Using PLVtab-Based PL/SQL Table Types"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="book"
HREF="index.htm"
TITLE="Advanced Oracle PL/SQL Programming with Packages"
><IMG
SRC="../gifs/txthome.gif"
ALT="Advanced Oracle PL/SQL Programming with Packages"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch08_03.htm"
TITLE="8.3 Showing Header Toggle"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 8.3 Showing Header Toggle"
BORDER="0"></A
></TD
></TR
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
>8.1 Using PLVtab-Based PL/SQL Table Types</TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="index"
HREF="index/idx_0.htm"
TITLE="Book Index"
><IMG
SRC="../gifs/index.gif"
ALT="Book Index"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
>8.3 Showing Header Toggle</TD
></TR
></TABLE
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"></DIV
><IMG
SRC="../gifs/smnavbar.gif"
USEMAP="#map"
BORDER="0"
ALT="The Oracle Library Navigation">

<P><font size="-1">
<a href="../copyrght.htm#copy">Copyright (c) 2000</a> O'Reilly & Associates. All rights reserved.
</font></P>

<MAP NAME="map">

<AREA SHAPE="RECT"
COORDS="0,0,35,30"
HREF="../index.htm"
ALT="Library Home">

<AREA SHAPE="RECT"
COORDS="40,0,95,30"
HREF="../prog2/index.htm"
ALT="Oracle PL/SQL Programming, 2nd. Ed.">

<AREA SHAPE="RECT"
COORDS="100,0,200,30"
HREF="../guide8i/index.htm"
ALT="Guide to Oracle 8i Features">

<AREA SHAPE="RECT"
COORDS="205,0,245,30"
HREF="../bipack/index.htm"
ALT="Oracle Built-in Packages">

<AREA SHAPE="RECT"
COORDS="250,0,320,30"
HREF="index.htm"
ALT="Advanced PL/SQL Programming with Packages">

<AREA SHAPE="RECT"
COORDS="325,0,420,30"
HREF="../webapp/index.htm"
ALT="Oracle Web Applications">

<AREA SHAPE="RECT"
COORDS="425,0,490,30"
HREF="../langpkt/index.htm"
ALT="Oracle PL/SQL Language Pocket Reference">

<AREA SHAPE="RECT"
COORDS="495,0,570,30"
HREF="../bipkt/index.htm"
ALT="Oracle PL/SQL Built-ins Pocket Reference">
</MAP>
</BODY
>
<!-- Mirrored from liso.cs.pusan.ac.kr by HTTrack Website Copier/3.x [XR&CO'2001] -->
</HTML
>
