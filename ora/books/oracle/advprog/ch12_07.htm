<HTML
><HEAD
><TITLE
>[Chapter 12] 12.7 Writing to the Target</TITLE
><META
NAME="DC.Creator"
CONTENT="Steven Feuerstein"><META
NAME="DC.Date"
CONTENT="2000-04-29T18:27:56Z"><META
NAME="DC.Format"
CONTENT="text/html"
SCHEME="MIME"><META
NAME="DC.Identifier"
CONTENT="O'Reilly and Associates-1-56592-238-7E"><META
NAME="DC.Language"
CONTENT="en-US"><META
NAME="DC.Publisher"
CONTENT="O'Reilly &amp; Associates, Inc."><META
NAME="DC.Source"
CONTENT="1-56592-238-7E"
SCHEME="ISBN"><META
NAME="DC.Subject.Keyword"
CONTENT="PL/SQL SQL Oracle Packages"><META
NAME="DC.Title"
CONTENT="Advanced Oracle PL/SQL Programming with Packages"><META
NAME="DC.Type"
CONTENT="Text.Monograph"><META
NAME="generator"
CONTENT="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><LINK
REL="stylesheet"
TYPE="text/css"
HREF="../style/style1.css"><LINK
REV="made"
HREF="mailto:online-books@oreilly.com"
TITLE="Online Books Comments"><LINK
REL="up"
HREF="ch12_01.htm"
TITLE="12. PLVio: Reading and Writing PL/SQL Source Code"><LINK
REL="prev"
HREF="ch12_06.htm"
TITLE="12.6 Reading From the Source"><LINK
REL="next"
HREF="ch12_08.htm"
TITLE="12.8 Saving and Restoring Settings"></HEAD>
<BODY><DIV CLASS="htmlnav"
><H1
><IMG
SRC="gifs/smbanner.gif"
ALT="Advanced Oracle PL/SQL Programming with Packages"
USEMAP="#srchmap"
BORDER="0"></H1
><MAP
NAME="srchmap"
><AREA
SHAPE="RECT"
COORDS="0,0,466,65"
HREF="index.htm"
ALT="Advanced Oracle PL/SQL Programming with Packages"><AREA
SHAPE="RECT"
COORDS="467,0,514,18"
HREF="jobjects/fsearch.htm"
ALT="Search this book"></MAP
><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch12_06.htm"
TITLE="12.6 Reading From the Source"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 12.6 Reading From the Source"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><SPAN
CLASS="NAVTITLE"
><A
CLASS="chapter"
REL="up"
HREF="ch12_01.htm"
TITLE="12. PLVio: Reading and Writing PL/SQL Source Code"
>Chapter 12<BR>PLVio: Reading and Writing PL/SQL Source Code</A
></SPAN
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch12_08.htm"
TITLE="12.8 Saving and Restoring Settings"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 12.8 Saving and Restoring Settings"
BORDER="0"></A
></TD
></TR
></TABLE
>&nbsp;<HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"></DIV
><DIV
CLASS="sect1"
><H2
CLASS="sect1"
><A
CLASS="title"
NAME="ch12-13491"
>12.7 Writing to the Target</A
></H2
><P
CLASS="para"
>The <KBD
CLASS="command"
>put_line</KBD
><A
CLASS="indexterm"
NAME="ch12-idx-998736-0"
></A
><A
CLASS="indexterm"
NAME="ch12-idx-998736-1"
></A
><A
CLASS="indexterm"
NAME="ch12-idx-998736-2"
></A
> procedure of PLVio writes text to the target repository. Its header is overloaded as follows:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>PROCEDURE put_line
   (string_in IN VARCHAR2, line#_in IN INTEGER := NULL);

PROCEDURE put_line (line_in IN line_type);</PRE
></BLOCKQUOTE
><P
CLASS="para"
>The first, "string" version of <KBD
CLASS="command"
>put_line</KBD
> simply bundles the text and line number into a record of type <KBD
CLASS="command"
>line_type</KBD
> and then calls the second, "record" version of <KBD
CLASS="command"
>put_line</KBD
> as shown below:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>PROCEDURE put_line 
   (string_in IN VARCHAR2, line#_in IN INTEGER := NULL)
IS
   v_line line_type;
BEGIN
   v_line.text := string_in;
   v_line.line# := line#_in;
   put_line (v_line);
END;</PRE
></BLOCKQUOTE
><P
CLASS="para"
>Why do I bother with these two versions? To make the package as easy as possible to use. In many situations, you will simply want to take a string and an optional line number and throw it out into the target. You aren't dealing with the more complex aspects of PLVio and therefore have no need for a line record. In this situation, calling the "record version" of <KBD
CLASS="command"
>put_line</KBD
> becomes a hassle. By writing a few extra lines of code into the package itself, I relieve my users of the burden of declaring a throw-away data structure&nbsp;-- the <KBD
CLASS="command"
>line_type</KBD
> record. </P
><P
CLASS="para"
>If you plan to build reusable code that will really and truly be reused, you will need to make this kind of extra effort. </P
><P
CLASS="para"
>The <KBD
CLASS="command"
>put_line</KBD
> procedure (which from this point on refers to the record version) hides all of the complexity about the current target. You simply tell PLVio that you want to put a line in the target; it worries about the specific mechanics required for the current type of repository, as discussed below.</P
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch12-SECT-7.1"
>12.7.1 Putting to Different Repositories</A
></H3
><P
CLASS="para"
>If writing to a file, <KBD
CLASS="command"
>put_line</KBD
> calls its comrade-in-code, PLV<KBD
CLASS="command"
>file.put_line</KBD
>. All details are pushed down to this building block package. This lower-level layer of code helps PLVio avoid being bogged down in writing to an operating system file.</P
><P
CLASS="para"
>If writing to a string, <KBD
CLASS="command"
>put_line</KBD
> concatenates the new text onto the existing <KBD
CLASS="command"
>string_repos.text_out</KBD
> value, making sure to append the specified line to the current value of <KBD
CLASS="command"
>string_repos.text_out</KBD
> with an intervening newline character:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>ELSIF string_target
THEN
   IF string_repos.text_out IS NULL
   THEN
      string_repos.text_out := line_in.text;
   ELSE 
      string_repos.text_out :=
         string_repos.text_out || 
         PLVchr.newline_char || 
         line_in.text;
   END IF;</PRE
></BLOCKQUOTE
><P
CLASS="para"
>The use of the newline character allows you to dump the contents of this string into a readable format either for display purposes or for spooling to a file.</P
><P
CLASS="para"
>When writing to a <SPAN
CLASS="acronym"
>PL/SQL</SPAN
> table, <KBD
CLASS="command"
>put_line</KBD
> assigns the value to the appropriate row in the table. If standard output is the target, <KBD
CLASS="command"
>p.l</KBD
> is used to display the text. </P
><P
CLASS="para"
>Finally, if the target is a database table, <KBD
CLASS="command"
>put_line</KBD
> makes use of dynamic <SPAN
CLASS="acronym"
>SQL</SPAN
> (using the builtin DBMS_SQL package and the PL/Vision PLVdyn and PLVobj packages) to insert a row in the table and then (at the interval specified by PLVcmt) possibly perform a commit as well. The program name and type that are written to the database table (see <KBD
CLASS="command"
>settrg</KBD
> for information on specifying the names of the columns holding this information) are taken from the PLVobj current object.</P
><BLOCKQUOTE
CLASS="note"
><P
CLASS="para"
><STRONG
>NOTE:</STRONG
>  When you are writing to an operating system file, you must execute the <KBD
CLASS="command"
>PLVio.closetrg</KBD
> command to close the file before you can see any of the new information you have written to the file.</P
></BLOCKQUOTE
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch12-24508"
>12.7.2 Batch Transfer of Source to Target</A
></H3
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="ch12-idx-998737-0"
></A
><A
CLASS="indexterm"
NAME="ch12-idx-998737-1"
></A
><A
CLASS="indexterm"
NAME="ch12-idx-998737-2"
></A
>PLVio provides a procedure named <KBD
CLASS="command"
>src2trg</KBD
>; with a single line of code, this procedure copies the specified contents of the source repository to the target. The header for <KBD
CLASS="command"
>src2trg</KBD
> is:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>PROCEDURE src2trg (close_in IN BOOLEAN := TRUE);</PRE
></BLOCKQUOTE
><P
CLASS="para"
>If you pass a value of TRUE in your call to <KBD
CLASS="command"
>src2tg</KBD
>, then <KBD
CLASS="command"
>src2trg</KBD
> will also close the target when it is done performing the transfer. You will almost certainly want to do this when you are writing to a file. </P
><P
CLASS="para"
>The <KBD
CLASS="command"
>src2trg</KBD
> procedure executes a loop to read through the source with <KBD
CLASS="command"
>get_lines</KBD
> and write to the target with <KBD
CLASS="command"
>put_lines</KBD
>, as the body of the procedure makes clear:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>PROCEDURE src2trg
IS
   line line_type;
BEGIN
   LOOP
      get_line (line);
      EXIT WHEN line.eof;
      put_line (line);
   END LOOP;

   IF close_in
   THEN
      closetrg;
   ENDIF;
END;</PRE
></BLOCKQUOTE
><P
CLASS="para"
>I wrote this procedure for the <KBD
CLASS="command"
>PLVhlp.show</KBD
> procedure. This program needs to read all the help text from the source and transfer it to a <SPAN
CLASS="acronym"
>PL/SQL</SPAN
> table. From that point on, the <KBD
CLASS="command"
>more</KBD
> program displays a page's worth of text from the <SPAN
CLASS="acronym"
>PL/SQL</SPAN
> table using the <KBD
CLASS="command"
>PLVio.disptrg</KBD
> procedure (described in the next section).</P
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch12-36419"
>12.7.3 Displaying the Target Repository</A
></H3
><P
CLASS="para"
>The <KBD
CLASS="command"
>disptrg</KBD
><A
CLASS="indexterm"
NAME="ch12-idx-998738-0"
></A
> procedure displays the contents of the target repository. Its header is:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>PROCEDURE disptrg
   (header_in IN VARCHAR2 := NULL,
    start_in IN INTEGER := 1,
    end_in IN INTEGER := target_row);</PRE
></BLOCKQUOTE
><P
CLASS="para"
>The first argument, <KBD
CLASS="command"
>header_in</KBD
>, is an optional header to describe the output. The second and third arguments, also optional, restrict the lines to be displayed. These arguments are currently used only when the target type is <SPAN
CLASS="acronym"
>PL/SQL</SPAN
> table. For all other target types, all the code found in the target will be displayed.</P
><P
CLASS="para"
>Let's look at an example of using <KBD
CLASS="command"
>disptrg</KBD
>. In the following script (stored in file <KBD
CLASS="command"
>dumpemp.sql</KBD
>), I employ PLVio to write information to a table and then display it. This script simply transfers employee names from <KBD
CLASS="command"
>emp</KBD
> to the target <SPAN
CLASS="acronym"
>PL/SQL</SPAN
> table and then displays the contents of the target. Notice that I do not use PLVio for reading from any kind of source repository. I am only using the target side of PLVio. No one says you have to employ both source and target repositories of PLVio. </P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>BEGIN
   PLVio.settrg (PLV.pstab);
   FOR emp_rec IN 
       (SELECT ename FROM emp WHERE deptno = &amp;1)
   LOOP
      PLVio.put_line (emp_rec.ename);
   END LOOP;
   PLVio.disptrg;
END;
/</PRE
></BLOCKQUOTE
><P
CLASS="para"
>Here is an example of the execution of <KBD
CLASS="command"
>dumpemp.sql</KBD
>:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>SQL&gt; start dumpemp 20
Contents of Table
JONES
FORD
SMITH
SCOTT
ADAMS</PRE
></BLOCKQUOTE
><P
CLASS="para"
>I could remove the first line of the script, which sets the target, and the rest of the script would work just fine. With this simple action, the script would work with whatever target has been selected outside of the script. The call to <KBD
CLASS="command"
>put_line</KBD
> would add a line to the target. And the final call to <KBD
CLASS="command"
>PLVio.disptrg</KBD
> would display the current target's contents. The utility and applicability of <KBD
CLASS="command"
>disptrg</KBD
> are kept distinct from the particular target.<A
CLASS="indexterm"
NAME="ch12-idx-998739-0"
></A
><A
CLASS="indexterm"
NAME="ch12-idx-998739-1"
></A
><A
CLASS="indexterm"
NAME="ch12-idx-998739-2"
></A
></P
></DIV
></DIV
><DIV
CLASS="htmlnav"
><P
></P
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch12_06.htm"
TITLE="12.6 Reading From the Source"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 12.6 Reading From the Source"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="book"
HREF="index.htm"
TITLE="Advanced Oracle PL/SQL Programming with Packages"
><IMG
SRC="../gifs/txthome.gif"
ALT="Advanced Oracle PL/SQL Programming with Packages"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch12_08.htm"
TITLE="12.8 Saving and Restoring Settings"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 12.8 Saving and Restoring Settings"
BORDER="0"></A
></TD
></TR
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
>12.6 Reading From the Source</TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="index"
HREF="index/idx_0.htm"
TITLE="Book Index"
><IMG
SRC="../gifs/index.gif"
ALT="Book Index"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
>12.8 Saving and Restoring Settings</TD
></TR
></TABLE
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"></DIV
><IMG
SRC="../gifs/smnavbar.gif"
USEMAP="#map"
BORDER="0"
ALT="The Oracle Library Navigation">

<P><font size="-1">
<a href="../copyrght.htm#copy">Copyright (c) 2000</a> O'Reilly & Associates. All rights reserved.
</font></P>

<MAP NAME="map">

<AREA SHAPE="RECT"
COORDS="0,0,35,30"
HREF="../index.htm"
ALT="Library Home">

<AREA SHAPE="RECT"
COORDS="40,0,95,30"
HREF="../prog2/index.htm"
ALT="Oracle PL/SQL Programming, 2nd. Ed.">

<AREA SHAPE="RECT"
COORDS="100,0,200,30"
HREF="../guide8i/index.htm"
ALT="Guide to Oracle 8i Features">

<AREA SHAPE="RECT"
COORDS="205,0,245,30"
HREF="../bipack/index.htm"
ALT="Oracle Built-in Packages">

<AREA SHAPE="RECT"
COORDS="250,0,320,30"
HREF="index.htm"
ALT="Advanced PL/SQL Programming with Packages">

<AREA SHAPE="RECT"
COORDS="325,0,420,30"
HREF="../webapp/index.htm"
ALT="Oracle Web Applications">

<AREA SHAPE="RECT"
COORDS="425,0,490,30"
HREF="../langpkt/index.htm"
ALT="Oracle PL/SQL Language Pocket Reference">

<AREA SHAPE="RECT"
COORDS="495,0,570,30"
HREF="../bipkt/index.htm"
ALT="Oracle PL/SQL Built-ins Pocket Reference">
</MAP>
</BODY
>
<!-- Mirrored from liso.cs.pusan.ac.kr by HTTrack Website Copier/3.x [XR&CO'2001] -->
</HTML
>
