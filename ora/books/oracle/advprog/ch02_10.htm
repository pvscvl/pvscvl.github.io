<HTML
><HEAD
><TITLE
>[Chapter 2] 2.10 Hiding Package Data</TITLE
><META
NAME="DC.Creator"
CONTENT="Steven Feuerstein"><META
NAME="DC.Date"
CONTENT="2000-04-29T18:22:35Z"><META
NAME="DC.Format"
CONTENT="text/html"
SCHEME="MIME"><META
NAME="DC.Identifier"
CONTENT="O'Reilly and Associates-1-56592-238-7E"><META
NAME="DC.Language"
CONTENT="en-US"><META
NAME="DC.Publisher"
CONTENT="O'Reilly &amp; Associates, Inc."><META
NAME="DC.Source"
CONTENT="1-56592-238-7E"
SCHEME="ISBN"><META
NAME="DC.Subject.Keyword"
CONTENT="PL/SQL SQL Oracle Packages"><META
NAME="DC.Title"
CONTENT="Advanced Oracle PL/SQL Programming with Packages"><META
NAME="DC.Type"
CONTENT="Text.Monograph"><META
NAME="generator"
CONTENT="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><LINK
REL="stylesheet"
TYPE="text/css"
HREF="../style/style1.css"><LINK
REV="made"
HREF="mailto:online-books@oreilly.com"
TITLE="Online Books Comments"><LINK
REL="up"
HREF="ch02_01.htm"
TITLE="2. Best Practices for Packages"><LINK
REL="prev"
HREF="ch02_09.htm#ch02-SECT-9.2"
TITLE="2.9 Modularizing for Maintainable Packages"><LINK
REL="next"
HREF="ch02_11.htm"
TITLE="2.11 Simultaneous Construction of Multiple Packages"></HEAD>
<BODY><DIV CLASS="htmlnav"
><H1
><IMG
SRC="gifs/smbanner.gif"
ALT="Advanced Oracle PL/SQL Programming with Packages"
USEMAP="#srchmap"
BORDER="0"></H1
><MAP
NAME="srchmap"
><AREA
SHAPE="RECT"
COORDS="0,0,466,65"
HREF="index.htm"
ALT="Advanced Oracle PL/SQL Programming with Packages"><AREA
SHAPE="RECT"
COORDS="467,0,514,18"
HREF="jobjects/fsearch.htm"
ALT="Search this book"></MAP
><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch02_09.htm#ch02-SECT-9.2"
TITLE="2.9 Modularizing for Maintainable Packages"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 2.9 Modularizing for Maintainable Packages"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><SPAN
CLASS="NAVTITLE"
><A
CLASS="chapter"
REL="up"
HREF="ch02_01.htm"
TITLE="2. Best Practices for Packages"
>Chapter 2<BR>Best Practices for Packages</A
></SPAN
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch02_11.htm"
TITLE="2.11 Simultaneous Construction of Multiple Packages"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 2.11 Simultaneous Construction of Multiple Packages"
BORDER="0"></A
></TD
></TR
></TABLE
>&nbsp;<HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"></DIV
><DIV
CLASS="sect1"
><H2
CLASS="sect1"
><A
CLASS="title"
NAME="ch02-10484"
>2.10 Hiding Package Data</A
></H2
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="ch02-idx-1000080-0"
></A
><A
CLASS="indexterm"
NAME="ch02-idx-1000080-1"
></A
><A
CLASS="indexterm"
NAME="ch02-idx-1000080-2"
></A
><A
CLASS="indexterm"
NAME="ch02-idx-1000080-3"
></A
>You implement <SPAN
CLASS="acronym"
>PL/SQL</SPAN
>-based global data with <I
CLASS="firstterm"
>package data</I
>. Package data is any data structure declared in a package body or specification. There are two kinds of package data: public data (declared in the specification) and private data (declared in the body).</P
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="ch02-idx-1000084-0"
></A
><A
CLASS="indexterm"
NAME="ch02-idx-1000084-1"
></A
>What's the difference between public and private? Public global data is the proverbial "loose cannon" of programming. Public package data is certainly very convenient. Simply declare a few variables in a package specification and they are available from/to any module. If you need to get a piece of information, just grab it from the global. If you want to change the value of that variable, go at it. Reliance on global data structures, however, leads to two significant problems:</P
><UL
CLASS="itemizedlist"
><LI
CLASS="listitem"
><P
CLASS="para"
><EM
CLASS="emphasis"
>Loss of control</EM
>. When you declare a data structure in the package specification, you lose control over that data structure's value. Since any program can write to it, you can never trust its value. Instead, you must trust developers to do the right thing when working with that variable. Now, I am as trusting as the next programmer, but anarchy really has little place in the world of software development.</P
></LI
><LI
CLASS="listitem"
><P
CLASS="para"
><EM
CLASS="emphasis"
>Loss of flexibility</EM
>. When you allow programmers to make direct references to global data, you lose the <A
CLASS="indexterm"
NAME="ch02-idx-1000085-0"
></A
>flexibility you need to enhance your application to take advantage of new features. Very specifically, you limit your ability to change the data structures used to implement your global data. </P
></LI
></UL
><P
CLASS="para"
>You don't <EM
CLASS="emphasis"
>have</EM
> to create these troublesome globals to gain many of the advantages of <SPAN
CLASS="acronym"
>PL/SQL</SPAN
> global data structures. You can regain control of your package data and also ease your maintenance and enhancement frustrations by building a programmatic interface around your data. This interface is also referred to as get-and-set programs or "access routines," since they usually get and set the values of data and control access to those data structures.</P
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch02-SECT-10.1"
>2.10.1 Gaining Control of Your Data</A
></H3
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="ch02-idx-1000086-0"
></A
><A
CLASS="indexterm"
NAME="ch02-idx-1000086-1"
></A
>I recommend, in fact, that you <EM
CLASS="emphasis"
>never</EM
> define variables in the specification of a package (except when explicitly needed that way, as discussed at the end of this section). Instead, you always declare the variable in the package body. You then provide a procedure to set the value of that variable and a function to retrieve the value of that variable.</P
><P
CLASS="para"
>Let's look at a very simple example to drive home the point and then move on to more interesting applications of this practice. Suppose I have a profit-and-loss package that maintains a "last statement date" in a package variable. With the variable defined in the specification, my package looks like this:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>PACKAGE P_and_L 
IS
   last_stmt_dt DATE;                                                        
END P_and_L;</PRE
></BLOCKQUOTE
><P
CLASS="para"
>Suppose further that I have a business rule that applies to the last statement date: it can never be in the future. Since the variable is defined in the package specification, any user with execute authority on this package can directly reference and modify the variable as shown in these code fragments:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>P_and_L.last_stmt_dt := SYSDATE + 12;
v_newdate := P_and_L.last_stmt_dt;</PRE
></BLOCKQUOTE
><P
CLASS="para"
>In the first line, my code violates the business rule&nbsp;-- and there is nothing I can do to stop this violation. </P
><P
CLASS="para"
>Let's now move the <KBD
CLASS="command"
>last_stmt_dt</KBD
> inside the package body. When I do this, I must write some code to provide a programmatic interface to that date variable. The resulting package specification and body shown in <A
CLASS="xref"
HREF="ch02_10.htm#ch02-SECT-10.5"
>Example 2.2</A
> provide get-and-set routines to get the current value of the last statement date and also set the value of that variable.</P
><DIV
CLASS="example"
><H4
CLASS="example"
><A
CLASS="title"
NAME="ch02-31334"
>Example 2.2: The P_and_L Package with Private Data</A
></H4
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>PACKAGE P_and_L
IS
   FUNCTION last_date RETURN DATE;

   PROCEDURE set_last_date (date_in IN DATE);
END P_and_L;

PACKAGE BODY P_and_L
IS
   last_stmt_dt DATE; 

   FUNCTION last_date RETURN DATE IS 
   BEGIN
      RETURN last_stmt_dt;
   END;

   PROCEDURE set_last_date (date_in IN DATE) IS
   BEGIN
      last_stmt_dt := LEAST (date_in, SYSDATE);
   END;
END P_and_L;</PRE
></BLOCKQUOTE
></DIV
><P
CLASS="para"
>Sure, this is a lot more code than was necessary to simply "publish" the last statement date variable in the package specification. The benefits of this code are, however, significant and will now be explored. First of all, notice that the <KBD
CLASS="command"
>set_last_date</KBD
> procedure applies or enforces the business rule whenever anyone tries to change the value of the <KBD
CLASS="command"
>last_stmt_dt</KBD
> variable. Let's examine the impact of this enforcement. With my packaged interface, the two lines of code I showed you earlier would be changed to:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>P_and_L.set_last_date (SYSDATE + 12);
v_newdate := P_and_L.last_date;</PRE
></BLOCKQUOTE
><P
CLASS="para"
>Now instead of setting the last statement date to twelve days in the future, <KBD
CLASS="command"
>set_last_date</KBD
> intervenes and sets the date to the system date. (Of course, in the real world, you would probably not enforce a business rule by simply overriding a user action. For purposes of demonstration, however, it gets the point across.)</P
><P
CLASS="para"
>By moving <KBD
CLASS="command"
>last_stmt_dt</KBD
> to the inside of the package, I have exerted control over my package data. I can now guarantee the integrity of this data to any user of the package; you know what you are getting when you call the <KBD
CLASS="command"
>last_date</KBD
> function. In the first version of the <I
CLASS="function"
>P_and_L</I
> package, there was no way to know how the value was set. </P
><P
CLASS="para"
>This control and integrity is the most important benefit accrued from hiding your data in the body of the package. Many other wonderful advantages are possible, however, once you have taken this step. These are covered in the following sections. <A
CLASS="indexterm"
NAME="ch02-idx-1000087-0"
></A
><A
CLASS="indexterm"
NAME="ch02-idx-1000087-1"
></A
></P
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch02-SECT-10.2"
>2.10.2 Tracing Variable Reads and Writes</A
></H3
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="ch02-idx-1000088-0"
></A
><A
CLASS="indexterm"
NAME="ch02-idx-1000088-1"
></A
><A
CLASS="indexterm"
NAME="ch02-idx-1000088-2"
></A
><A
CLASS="indexterm"
NAME="ch02-idx-1000088-3"
></A
>Have you ever lost control of your application? I once worked on an Oracle Forms application in which there was no doubt that the complexity of the code (and workarounds in the code) had caused it take on a life of its own. This application relied heavily on Oracle Forms GLOBAL variables&nbsp;-- to the tune of 400 or so of these useful, but dangerous constructs. And, sad to say, we could not, in a number of circumstances, figure out why and how a particular global was being set to NULL or to some other value that made no sense for the action at hand. </P
><P
CLASS="para"
>There had been no forethought in the use of the global variables. Everyone was scrambling to meet deadlines with a very early version of Oracle Forms (4.0.6 for those of you who know to shudder at such things) and just threw direct references to the globals willy-nilly throughout the code. There was no way, consequently, to trace where and when a global value was changed. If, on the other hand, the original developers of the application had built a package around the use of Oracle Forms globals, such a trace would have been very possible, and much agony would have been averted.</P
><P
CLASS="para"
>I demonstrate below the tracing technique for the <I
CLASS="function"
>P_and_L</I
> package. You can then apply this technique to Oracle Forms global variables and any other variable data structure.</P
><P
CLASS="para"
>Let's go back to the <I
CLASS="function"
>P_and_L</I
> package shown in <A
CLASS="xref"
HREF="ch02_10.htm#ch02-SECT-10.5"
>Example 2.2</A
> and the last statement date. The variable is declared in the package body. A function is provided to return the current value of <KBD
CLASS="command"
>last_stmt_dt</KBD
>. A procedure, <KBD
CLASS="command"
>set_last_date</KBD
>, allows me to change the variable's value. I build an application making many references to these programs and then I start testing that application. I soon run into trouble. The last statement date is being set improperly, but it is very difficult for me to figure out how and why its value is being changed. </P
><P
CLASS="para"
>What I would really like to do is obtain a trace of every contact with that variable. If I had not hidden the last statement date variable inside a package, my situation would be hopeless. I would have no way to know when my programs were touching the last statement date. </P
><P
CLASS="para"
>With my <KBD
CLASS="command"
>last_date</KBD
> function and <KBD
CLASS="command"
>set_last_date</KBD
> procedure in place, on the other hand, I can with just a few lines of code get all the information I need. In the upgraded version of the <KBD
CLASS="command"
>P_and_L</KBD
> package below, I use the PLVtrc package (see code in bold) to add an execution trace to the last statement date's get-and-set:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>PACKAGE BODY P_and_L
IS
   last_stmt_dt DATE; 

   FUNCTION last_date RETURN DATE IS 
   BEGIN
<B
CLASS="emphasis.bold"
>      PLVtrc.show ('Retrieve last_date', last_stmt_dt);</B
>
      RETURN last_stmt_dt;
   END;

   PROCEDURE set_last_date (date_in IN DATE) IS
   BEGIN
<B
CLASS="emphasis.bold"
>      PLVtrc.show ('Set last_date', date_in);</B
>
      last_stmt_dt := LEAST (date_in/, SYSDATE);
   END;
END P_and_L;</PRE
></BLOCKQUOTE
><P
CLASS="para"
>The <KBD
CLASS="command"
>PLVtrc.show</KBD
> procedure intercepts attempts to read or write the <KBD
CLASS="command"
>last_stmt_dt</KBD
> variable. This trace is, however, not active, until the following command is used to turn on the trace for the current session:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>PLVtrc.turn_on;</PRE
></BLOCKQUOTE
><P
CLASS="para"
>When she turns trace on, a developer can view (or write to the PL/Vision log) a record of every effort to read or write the variable. And if the <SPAN
CLASS="acronym"
>PL/SQL</SPAN
> programs that call the <I
CLASS="function"
>P_and_L</I
> package make use of the PLVtrc startup and terminate programs, this record will automatically include the names of the programs or context when the <KBD
CLASS="command"
>last_stmt_dt</KBD
> variable was referenced (see <A
CLASS="xref"
HREF="ch20_01.htm"
>Chapter 20, <CITE
CLASS="chapter"
>PLVcmt and PLVrb: Commit and Rollback Processing </CITE
></A
>). Just a little bit of added code produced a significant enhancement in functionality!</P
><P
CLASS="para"
>Furthermore, all of my tracing changes occurred to the package body; the specification was left intact. As a result, none of the programs that call the <KBD
CLASS="command"
>P_and_L</KBD
> elements need to be changed or even recompiled. No one even has to know that the package has been upgraded with the new feature; it will be invisible until turned on&nbsp;-- and then only for the current Oracle session, not for all users.</P
><P
CLASS="para"
>Once I built the get-and-set around my date variable, adding an execution trace facility was very simple. Just get that layer of code in place and many seemingly and formerly impossible tasks become easy!<A
CLASS="indexterm"
NAME="ch02-idx-1000090-0"
></A
><A
CLASS="indexterm"
NAME="ch02-idx-1000090-1"
></A
><A
CLASS="indexterm"
NAME="ch02-idx-1000090-2"
></A
><A
CLASS="indexterm"
NAME="ch02-idx-1000090-3"
></A
></P
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch02-SECT-10.3"
>2.10.3 Simplifying Package Interfaces</A
></H3
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="ch02-idx-1000105-0"
></A
><A
CLASS="indexterm"
NAME="ch02-idx-1000105-1"
></A
>Another reason for moving data into the package body is to simplify the interfaces to the package elements. When data are declared in the package body, they are <A
CLASS="indexterm"
NAME="ch02-idx-1000109-0"
></A
><A
CLASS="indexterm"
NAME="ch02-idx-1000109-1"
></A
>global <EM
CLASS="emphasis"
>within the package</EM
>. All programs defined in the package (specification and body) can reference these variables directly. You can use this fact to your advantage by <EM
CLASS="emphasis"
>not</EM
> passing in these values in the parameter lists of the package elements.</P
><P
CLASS="para"
>Consider the PLVobj package, which provides a programmatic interface to the ALL_OBJECTS data dictionary view. PLVobj works with a current object, which is made up of three elements:</P
><UL
CLASS="itemizedlist"
><LI
CLASS="listitem"
><P
CLASS="para"
>The owner or the schema of the object</P
></LI
><LI
CLASS="listitem"
><P
CLASS="para"
>The name of the object </P
></LI
><LI
CLASS="listitem"
><P
CLASS="para"
>The type of the object</P
></LI
></UL
><P
CLASS="para"
>The PLVobj package and other packages such as PLVio, perform many different operations on this current object, including the following: bind the object for dynamic SQL execution, open a cursor into the ALL_OBJECTS view for this object, read the source code for that object, and so on.</P
><P
CLASS="para"
>Suppose that I did not store this current object in the package. Then every time I wanted to perform one of the above actions, I would have to provide the values for each of these elements of the current object in the parameter list. Let's look at some examples.</P
><P
CLASS="para"
>Instead of calling <KBD
CLASS="command"
>PLVobj.open_objects</KBD
> without any arguments like this:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>PROCEDURE open_objects;</PRE
></BLOCKQUOTE
><P
CLASS="para"
>I would need to modify the header as follows:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>PROCEDURE open_objects
   (name_in IN VARCHAR2, type_in IN VARCHAR2, schema_in IN VARCHAR2);</PRE
></BLOCKQUOTE
><P
CLASS="para"
>And deep within the PLVio package, I could no longer simply call the <I
CLASS="function"
>bindobj</I
> program relying on the context or current object previously set, as I do here:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>PLVobj.bindobj (cur);</PRE
></BLOCKQUOTE
><P
CLASS="para"
>Instead, I would have to maintain variables inside PLVio with the current object values and then pass them into <KBD
CLASS="command"
>bindobj</KBD
> as follows:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>PLVobj.bindobj (cur, currobj_name, currobj_type, currobj_schema);</PRE
></BLOCKQUOTE
><P
CLASS="para"
>Would you use a package designed that way? I don't think I would. All those arguments, passed in over and over again. Each time thinking: why can't the package just keep track of that for me? </P
><P
CLASS="para"
>Well, it can and PLVobj does just that. The current object of PLVobj is defined by three private package variables:</P
><DL
CLASS="variablelist"
><DT
CLASS="term"
><KBD
CLASS="command"
>v_currschema</KBD
></DT
><DD
CLASS="listitem"
><P
CLASS="para"
>The owner of the object</P
></DD
><DT
CLASS="term"
><KBD
CLASS="command"
>v_currname</KBD
></DT
><DD
CLASS="listitem"
><P
CLASS="para"
>The name of the object </P
></DD
><DT
CLASS="term"
><KBD
CLASS="command"
>v_currtype</KBD
></DT
><DD
CLASS="listitem"
><P
CLASS="para"
>The type of the object(s)</P
></DD
></DL
><P
CLASS="para"
>Since the above elements are private variables, a user of PLVobj will never see or reference these variables directly. Instead, I provide a program to set the current object. Its header is:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>PROCEDURE setcurr (name_in IN VARCHAR2);</PRE
></BLOCKQUOTE
><P
CLASS="para"
>where the argument is the module name, which can actually be a composite of the schema, name, and type. </P
><P
CLASS="para"
>With the <KBD
CLASS="command"
>setcurr</KBD
> procedure assigning values to my current object, the parameter lists of my object-management programs in PLVobj become short and sweet. They are much easier to use.</P
><P
CLASS="para"
>There is, of course, a tradeoff when you rely on package global data instead of passing parameters. Sure, the data is private and access to it is controlled. But it also means that the package program is completely dependent on that data. You cannot use the program to analyze or manipulate data until it is set into the package globals. The only way you can use the PLVobj package is to first call the <KBD
CLASS="command"
>setcurr</KBD
> procedure. </P
><P
CLASS="para"
>I believe that in many cases, this tradeoff is a good investment. It reinforces my perspective on the package as an <EM
CLASS="emphasis"
>environment</EM
> more than simply a collection of related code elements.<A
CLASS="indexterm"
NAME="ch02-idx-1000098-0"
></A
><A
CLASS="indexterm"
NAME="ch02-idx-1000098-1"
></A
></P
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch02-SECT-10.4"
>2.10.4 When to Make Data Public</A
></H3
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="ch02-idx-1000113-0"
></A
><A
CLASS="indexterm"
NAME="ch02-idx-1000113-1"
></A
><A
CLASS="indexterm"
NAME="ch02-idx-1000113-2"
></A
>You shouldn't always hide your data in the package body. Sometimes you really do want to let someone directly access the information. I have found, for example, that if you are going to execute dynamically constructed <SPAN
CLASS="acronym"
>PL/SQL</SPAN
> code with the DBMS_SQL package and you want to reference any kind of external data directly, it must be defined in the specification of some package. Dynamically executed <SPAN
CLASS="acronym"
>PL/SQL</SPAN
> blocks are never nested within another block. As a result, they can only reference variables declared in the dynamic block or in a package specification (see <A
CLASS="xref"
HREF="ch18_01.htm"
>Chapter 18, <CITE
CLASS="chapter"
>PLVcase and PLVcat: Converting and Analyzing PL/SQL Code</CITE
></A
>, for more details).</P
><P
CLASS="para"
>Another place in PL/Vision where I violate this practice and declare data structures in the specification is the PLVio package. You can choose to use a <SPAN
CLASS="acronym"
>PL/SQL</SPAN
> table as a target with the following call:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>PLVio.settrg (PLV.pstab);</PRE
></BLOCKQUOTE
><P
CLASS="para"
>Then all subsequent calls to <KBD
CLASS="command"
>PLVio.put_line</KBD
> will deposit information in another row of data in the PLVio-based <SPAN
CLASS="acronym"
>PL/SQL</SPAN
> table, defined in the specification as follows:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>   target_table PLVtab.vc2000_table;
   target_row BINARY_INTEGER;</PRE
></BLOCKQUOTE
><P
CLASS="para"
>Why did I put this table in the specification? I suppose I could have hidden it away in the body and then built some programs that would maintain the contents of the table, along these lines:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>   PROCEDURE init_table;
   PROCEDURE set_row (val_in IN VARCHAR2);
   FUNCTION rowval (row_in IN INTEGER) RETURN VARCHAR2;
   PROCEDURE display;</PRE
></BLOCKQUOTE
><P
CLASS="para"
>Maybe I just got lazy that night. But maybe, just maybe, it actually makes more sense in this case to allow the developer to do whatever she wants with the table and its contents. It is just a repository, after all, for the output from calls to the <KBD
CLASS="command"
>PLVio.put_line</KBD
> procedure. You might, in fact, want to write some information from PLVio and then add a few rows of data from your own, independent source. Rather than put up the barrier of get-and-set routines, I just leave the table in the specification and make the user responsible for its contents.</P
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch02-SECT-10.5"
>2.10.5 Anchoring to Public Variables</A
></H3
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="ch02-idx-1000118-0"
></A
><A
CLASS="indexterm"
NAME="ch02-idx-1000118-1"
></A
><A
CLASS="indexterm"
NAME="ch02-idx-1000118-2"
></A
><A
CLASS="indexterm"
NAME="ch02-idx-1000118-3"
></A
>There is one other case in which specification-based variables are useful: anchored declarations. You can anchor or base the declaration of a variable on another, predefined structure. To do this, you use the <A
CLASS="indexterm"
NAME="ch02-idx-1000122-0"
></A
><A
CLASS="indexterm"
NAME="ch02-idx-1000122-1"
></A
>%TYPE and %ROWTYPE attributes. The most common way %TYPE is used is to anchor a local <SPAN
CLASS="acronym"
>PL/SQL</SPAN
> variable to a database column, as shown below:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>   v_ename emp.ename%TYPE;</PRE
></BLOCKQUOTE
><P
CLASS="para"
>You can also, however, anchor variables to other <SPAN
CLASS="acronym"
>PL/SQL</SPAN
> data structures. You can define variables in one package (a repository of subtypes) that are used to define variables in another package. In this case, the variables must be declared in the specification. An example from PL/Vision will demonstrate this technique.</P
><P
CLASS="para"
>A number of PL/Vision packages manipulate <SPAN
CLASS="acronym"
>PL/SQL</SPAN
> source code (PLVgen, PLVcase, PLVcat, etc.). One important element of <SPAN
CLASS="acronym"
>PL/SQL</SPAN
> code is the <A
CLASS="indexterm"
NAME="ch02-idx-1000123-0"
></A
><I
CLASS="firstterm"
>identifier</I
>. An identifier is a named element of the language. Today, identifiers can be up to 30 characters in length and must start with a letter. </P
><P
CLASS="para"
>As I built packages to read and parse identifiers (see PLVprsps), I would declare local variables to hold those values. At first, I declared the variable as follows:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>v_ident VARCHAR2(30);</PRE
></BLOCKQUOTE
><P
CLASS="para"
>This always made me uncomfortable, though. I could just see Oracle Corporation in its next release announce that it would now allow identifiers to be up to, say, 60 characters in length. My code would instantly become very vulnerable. So I would often compensate by declaring the variable as:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>v_ident VARCHAR2(100);</PRE
></BLOCKQUOTE
><P
CLASS="para"
>I felt safe, but dissatisfied. The justification for that declaration was weak; it would be hard (embarrassing?) to explain to another developer why I chose this number. After too many months, I found the ideal solution: use an anchored declaration. </P
><P
CLASS="para"
>So I added the following declaration to the PLV package specification:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>plsql_identifier VARCHAR2(100) := 'IRRELEVANT';</PRE
></BLOCKQUOTE
><P
CLASS="para"
>I decided to use 100 because my identifier variable needed to hold identifiers of the form "package.element" and so that I had some extra space with which to work. I then changed my hard-coded declaration of <KBD
CLASS="command"
>v_ident</KBD
> and many other variables to this format:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>v_ident PLV.plsql_identifier%TYPE;</PRE
></BLOCKQUOTE
><P
CLASS="para"
>Now if I ever do need to change the length or other characteristic of variables that represented <SPAN
CLASS="acronym"
>PL/SQL</SPAN
> identifiers, I could make that change in just one place. Notice that I assigned the default value of IRRELEVANT to the variable. I did that to emphasize that the value contained in <I
CLASS="function"
>plsql_identifier</I
> is irrelevant. It is never referenced (or intended to be referenced) for its value, only for its datatype.</P
><BLOCKQUOTE
CLASS="note"
><P
CLASS="para"
><STRONG
>NOTE:</STRONG
>  You might be thinking that I should just have declared <I
CLASS="function"
>plsql_identifier</I
> as a constant and then the value of this "reference only" structure could not be mucked with. That certainly makes sense. I found, however, that you cannot reference a constant in an anchored declaration. If I wanted to use <KBD
CLASS="command"
>plsql_identifier</KBD
> to anchor other variable declarations, it had to be declared a variable.</P
></BLOCKQUOTE
><P
CLASS="para"
>So there are certainly circumstances in which you will want to declare data structures in the package specification. This should occur, however, on an exception basis&nbsp;-- and you should be able to justify your action with some application-specific requirements. Otherwise, hide that package data in the body and you will reap many<A
CLASS="indexterm"
NAME="ch02-idx-1000120-0"
></A
><A
CLASS="indexterm"
NAME="ch02-idx-1000120-1"
></A
><A
CLASS="indexterm"
NAME="ch02-idx-1000120-2"
></A
><A
CLASS="indexterm"
NAME="ch02-idx-1000120-3"
></A
> benefits.<A
CLASS="indexterm"
NAME="ch02-idx-1000082-0"
></A
><A
CLASS="indexterm"
NAME="ch02-idx-1000082-1"
></A
><A
CLASS="indexterm"
NAME="ch02-idx-1000082-2"
></A
></P
></DIV
></DIV
><DIV
CLASS="htmlnav"
><P
></P
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch02_09.htm#ch02-SECT-9.2"
TITLE="2.9 Modularizing for Maintainable Packages"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 2.9 Modularizing for Maintainable Packages"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="book"
HREF="index.htm"
TITLE="Advanced Oracle PL/SQL Programming with Packages"
><IMG
SRC="../gifs/txthome.gif"
ALT="Advanced Oracle PL/SQL Programming with Packages"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch02_11.htm"
TITLE="2.11 Simultaneous Construction of Multiple Packages"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 2.11 Simultaneous Construction of Multiple Packages"
BORDER="0"></A
></TD
></TR
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
>2.9 Modularizing for Maintainable Packages</TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="index"
HREF="index/idx_0.htm"
TITLE="Book Index"
><IMG
SRC="../gifs/index.gif"
ALT="Book Index"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
>2.11 Simultaneous Construction of Multiple Packages</TD
></TR
></TABLE
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"></DIV
><IMG
SRC="../gifs/smnavbar.gif"
USEMAP="#map"
BORDER="0"
ALT="The Oracle Library Navigation">

<P><font size="-1">
<a href="../copyrght.htm#copy">Copyright (c) 2000</a> O'Reilly & Associates. All rights reserved.
</font></P>

<MAP NAME="map">

<AREA SHAPE="RECT"
COORDS="0,0,35,30"
HREF="../index.htm"
ALT="Library Home">

<AREA SHAPE="RECT"
COORDS="40,0,95,30"
HREF="../prog2/index.htm"
ALT="Oracle PL/SQL Programming, 2nd. Ed.">

<AREA SHAPE="RECT"
COORDS="100,0,200,30"
HREF="../guide8i/index.htm"
ALT="Guide to Oracle 8i Features">

<AREA SHAPE="RECT"
COORDS="205,0,245,30"
HREF="../bipack/index.htm"
ALT="Oracle Built-in Packages">

<AREA SHAPE="RECT"
COORDS="250,0,320,30"
HREF="index.htm"
ALT="Advanced PL/SQL Programming with Packages">

<AREA SHAPE="RECT"
COORDS="325,0,420,30"
HREF="../webapp/index.htm"
ALT="Oracle Web Applications">

<AREA SHAPE="RECT"
COORDS="425,0,490,30"
HREF="../langpkt/index.htm"
ALT="Oracle PL/SQL Language Pocket Reference">

<AREA SHAPE="RECT"
COORDS="495,0,570,30"
HREF="../bipkt/index.htm"
ALT="Oracle PL/SQL Built-ins Pocket Reference">
</MAP>
</BODY
>
<!-- Mirrored from liso.cs.pusan.ac.kr by HTTrack Website Copier/3.x [XR&CO'2001] -->
</HTML
>
