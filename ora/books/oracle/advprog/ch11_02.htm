<HTML
><HEAD
><TITLE
>[Chapter 11] 11.2 ALL_OBJECTS View</TITLE
><META
NAME="DC.Creator"
CONTENT="Steven Feuerstein"><META
NAME="DC.Date"
CONTENT="2000-04-29T18:27:23Z"><META
NAME="DC.Format"
CONTENT="text/html"
SCHEME="MIME"><META
NAME="DC.Identifier"
CONTENT="O'Reilly and Associates-1-56592-238-7E"><META
NAME="DC.Language"
CONTENT="en-US"><META
NAME="DC.Publisher"
CONTENT="O'Reilly &amp; Associates, Inc."><META
NAME="DC.Source"
CONTENT="1-56592-238-7E"
SCHEME="ISBN"><META
NAME="DC.Subject.Keyword"
CONTENT="PL/SQL SQL Oracle Packages"><META
NAME="DC.Title"
CONTENT="Advanced Oracle PL/SQL Programming with Packages"><META
NAME="DC.Type"
CONTENT="Text.Monograph"><META
NAME="generator"
CONTENT="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><LINK
REL="stylesheet"
TYPE="text/css"
HREF="../style/style1.css"><LINK
REV="made"
HREF="mailto:online-books@oreilly.com"
TITLE="Online Books Comments"><LINK
REL="up"
HREF="ch11_01.htm"
TITLE="11.  PLVobj: A Packaged Interface to ALL_OBJECTS"><LINK
REL="prev"
HREF="ch11_01.htm"
TITLE="11.1 Why PLVobj?"><LINK
REL="next"
HREF="ch11_03.htm#ch11-SECT-3.2"
TITLE="11.3 Setting the Current Object"></HEAD>
<BODY><DIV CLASS="htmlnav"
><H1
><IMG
SRC="gifs/smbanner.gif"
ALT="Advanced Oracle PL/SQL Programming with Packages"
USEMAP="#srchmap"
BORDER="0"></H1
><MAP
NAME="srchmap"
><AREA
SHAPE="RECT"
COORDS="0,0,466,65"
HREF="index.htm"
ALT="Advanced Oracle PL/SQL Programming with Packages"><AREA
SHAPE="RECT"
COORDS="467,0,514,18"
HREF="jobjects/fsearch.htm"
ALT="Search this book"></MAP
><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch11_01.htm"
TITLE="11.1 Why PLVobj?"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 11.1 Why PLVobj?"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><SPAN
CLASS="NAVTITLE"
><A
CLASS="chapter"
REL="up"
HREF="ch11_01.htm"
TITLE="11.  PLVobj: A Packaged Interface to ALL_OBJECTS"
>Chapter 11<BR> PLVobj: A Packaged Interface to ALL_OBJECTS</A
></SPAN
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch11_03.htm#ch11-SECT-3.2"
TITLE="11.3 Setting the Current Object"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 11.3 Setting the Current Object"
BORDER="0"></A
></TD
></TR
></TABLE
>&nbsp;<HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"></DIV
><DIV
CLASS="sect1"
><H2
CLASS="sect1"
><A
CLASS="title"
NAME="ch11-13024"
>11.2 ALL_OBJECTS View</A
></H2
><P
CLASS="para"
>The main objective of PLVobj is to provide a programmatic interface to the <A
CLASS="indexterm"
NAME="ch11-idx-998795-0"
></A
>ALL_OBJECTS view. This data dictionary view has the following columns:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
> Name             Null?    Type
 ---------------- -------- ----
 OWNER            NOT NULL VARCHAR2(30)
 OBJECT_NAME      NOT NULL VARCHAR2(30)
 OBJECT_ID        NOT NULL NUMBER
 OBJECT_TYPE               VARCHAR2(12)
 CREATED          NOT NULL DATE
 LAST_DDL_TIME    NOT NULL DATE
 TIMESTAMP                 VARCHAR2(75)
 STATUS                    VARCHAR2(7)</PRE
></BLOCKQUOTE
><P
CLASS="para"
>It contains a row for every stored code object to which you have execute access (the USER_OBJECTS view contains a row for each stored code object you created). The OWNER is the schema that owns the program unit. </P
><DL
CLASS="variablelist"
><DT
CLASS="term"
><CODE
CLASS="literal"
> object_name</CODE
></DT
><DD
CLASS="listitem"
><P
CLASS="para"
>The name of the object.</P
></DD
><DT
CLASS="term"
><CODE
CLASS="literal"
> object_type</CODE
></DT
><DD
CLASS="listitem"
><P
CLASS="para"
>The type of the object, which is one of the following: package, package body, procedure, function, or synonym. </P
></DD
><DT
CLASS="term"
><CODE
CLASS="literal"
> object_id</CODE
></DT
><DD
CLASS="listitem"
><P
CLASS="para"
>An internal pointer used to quickly obtain related information about the object in other data dictionary views.</P
></DD
><DT
CLASS="term"
><CODE
CLASS="literal"
> last_ddl_time </CODE
></DT
><DD
CLASS="listitem"
><P
CLASS="para"
>Stores the date and timestamp when this object was last compiled into the database.</P
></DD
><DT
CLASS="term"
>Status column</DT
><DD
CLASS="listitem"
><P
CLASS="para"
>Either VALID or INVALID. This column is set by the Oracle Server as it maintains dependencies and performs compiles.</P
></DD
></DL
><P
CLASS="para"
>Without a package like PLVobj, every time you wanted to read from this view, you would need to write a SELECT statement in SQL*Plus or, in <SPAN
CLASS="acronym"
>PL/SQL</SPAN
>, define a cursor, and then do the "cursor thing." You would need to understand the complexities of the ALL_OBJECTS view (for example, all names are uppercased unless you created the object with double quotes around the name). You would also need to know how to parse a program name into its full set of components: owner, name, and type.</P
><P
CLASS="para"
>If several developers in your organization need to do the same thing, you soon have a situation where the same kind of query and similar code is "hard-coded" across your application or utilities. Lots of hours are wasted and the resources required for maintenance of the application multiply.</P
><P
CLASS="para"
>A better solution is to write the cursor once&nbsp;-- in a package, of course&nbsp;-- and then let all developers reference that cursor. They each do their own opens, fetches, and closes, but the <SPAN
CLASS="acronym"
>SQL</SPAN
> (just about the most volatile part of one's application) is shared. An even better solution, however, is to hide the cursor in the body of the package and build a complete programmatic interface to the cursor. With this approach, you build procedures and functions that perform the cursor operations; a user of the package never has to call native <SPAN
CLASS="acronym"
>PL/SQL</SPAN
> cursor operations. This is the approach I have taken with PLVobj and described in the following sections.</P
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch11-SECT-2.1"
>11.2.1 Cursor Into ALL_OBJECTS</A
></H3
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="ch11-idx-998797-0"
></A
><A
CLASS="indexterm"
NAME="ch11-idx-998797-1"
></A
>At the heart of <KBD
CLASS="command"
>PLVobj</KBD
> (in the package body) is a cursor against the ALL_OBJECTS view. The cursor is defined as follows:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>CURSOR obj_cur 
IS
   SELECT owner, object_name, object_type, status
     FROM ALL_OBJECTS
    WHERE object_name LIKE v_currname 
      AND object_type LIKE v_currtype
      AND owner LIKE v_currschema
    ORDER BY owner,
       DECODE (object_type, 
          'PACKAGE', 1, 
          'PACKAGE BODY', 2,
          'PROCEDURE', 3,
          'FUNCTION', 4,
          'TRIGGER', 5, 
          6),
       object_name;</PRE
></BLOCKQUOTE
><P
CLASS="para"
>Notice that the cursor contains references to three package variables: <KBD
CLASS="command"
>v_currschema</KBD
>, <KBD
CLASS="command"
>v_currname</KBD
>, and <KBD
CLASS="command"
>v_currtype</KBD
>. These three variables make up the current object of <KBD
CLASS="command"
>PLVobj</KBD
> and are discussed in more detail later in this chapter.</P
><P
CLASS="para"
>Notice that I use the LIKE operator so that you can retrieve multiple objects from a single schema, or even multiple schemas. Furthermore, since my <SPAN
CLASS="acronym"
>PL/SQL</SPAN
> development is <SPAN
CLASS="acronym"
>PL/SQL</SPAN
> and package-centric, I use a DECODE statement to bring those up first in the ordering system.</P
><P
CLASS="para"
>Again, since this cursor is defined in the package body, users of <KBD
CLASS="command"
>PLVobj</KBD
> cannot directly OPEN, fetch from, or CLOSE the cursor. All of these actions must be taken through procedures which are described in the next section.<A
CLASS="indexterm"
NAME="ch11-idx-998798-0"
></A
></P
></DIV
></DIV
><DIV
CLASS="htmlnav"
><P
></P
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch11_01.htm"
TITLE="11.1 Why PLVobj?"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 11.1 Why PLVobj?"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="book"
HREF="index.htm"
TITLE="Advanced Oracle PL/SQL Programming with Packages"
><IMG
SRC="../gifs/txthome.gif"
ALT="Advanced Oracle PL/SQL Programming with Packages"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch11_03.htm#ch11-SECT-3.2"
TITLE="11.3 Setting the Current Object"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 11.3 Setting the Current Object"
BORDER="0"></A
></TD
></TR
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
>11.1 Why PLVobj?</TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="index"
HREF="index/idx_0.htm"
TITLE="Book Index"
><IMG
SRC="../gifs/index.gif"
ALT="Book Index"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
>11.3 Setting the Current Object</TD
></TR
></TABLE
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"></DIV
><IMG
SRC="../gifs/smnavbar.gif"
USEMAP="#map"
BORDER="0"
ALT="The Oracle Library Navigation">

<P><font size="-1">
<a href="../copyrght.htm#copy">Copyright (c) 2000</a> O'Reilly & Associates. All rights reserved.
</font></P>

<MAP NAME="map">

<AREA SHAPE="RECT"
COORDS="0,0,35,30"
HREF="../index.htm"
ALT="Library Home">

<AREA SHAPE="RECT"
COORDS="40,0,95,30"
HREF="../prog2/index.htm"
ALT="Oracle PL/SQL Programming, 2nd. Ed.">

<AREA SHAPE="RECT"
COORDS="100,0,200,30"
HREF="../guide8i/index.htm"
ALT="Guide to Oracle 8i Features">

<AREA SHAPE="RECT"
COORDS="205,0,245,30"
HREF="../bipack/index.htm"
ALT="Oracle Built-in Packages">

<AREA SHAPE="RECT"
COORDS="250,0,320,30"
HREF="index.htm"
ALT="Advanced PL/SQL Programming with Packages">

<AREA SHAPE="RECT"
COORDS="325,0,420,30"
HREF="../webapp/index.htm"
ALT="Oracle Web Applications">

<AREA SHAPE="RECT"
COORDS="425,0,490,30"
HREF="../langpkt/index.htm"
ALT="Oracle PL/SQL Language Pocket Reference">

<AREA SHAPE="RECT"
COORDS="495,0,570,30"
HREF="../bipkt/index.htm"
ALT="Oracle PL/SQL Built-ins Pocket Reference">
</MAP>
</BODY
>
<!-- Mirrored from liso.cs.pusan.ac.kr by HTTrack Website Copier/3.x [XR&CO'2001] -->
</HTML
>
