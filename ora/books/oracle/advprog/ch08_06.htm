<HTML
><HEAD
><TITLE
>[Chapter 8] 8.6 Emptying Tables with PLVtab</TITLE
><META
NAME="DC.Creator"
CONTENT="Steven Feuerstein"><META
NAME="DC.Date"
CONTENT="2000-04-29T18:26:51Z"><META
NAME="DC.Format"
CONTENT="text/html"
SCHEME="MIME"><META
NAME="DC.Identifier"
CONTENT="O'Reilly and Associates-1-56592-238-7E"><META
NAME="DC.Language"
CONTENT="en-US"><META
NAME="DC.Publisher"
CONTENT="O'Reilly &amp; Associates, Inc."><META
NAME="DC.Source"
CONTENT="1-56592-238-7E"
SCHEME="ISBN"><META
NAME="DC.Subject.Keyword"
CONTENT="PL/SQL SQL Oracle Packages"><META
NAME="DC.Title"
CONTENT="Advanced Oracle PL/SQL Programming with Packages"><META
NAME="DC.Type"
CONTENT="Text.Monograph"><META
NAME="generator"
CONTENT="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><LINK
REL="stylesheet"
TYPE="text/css"
HREF="../style/style1.css"><LINK
REV="made"
HREF="mailto:online-books@oreilly.com"
TITLE="Online Books Comments"><LINK
REL="up"
HREF="ch08_01.htm"
TITLE="8. PLVtab: Easy Access to PL/SQL Tables"><LINK
REL="prev"
HREF="ch08_05.htm"
TITLE="8.5 Setting the Display Prefix"><LINK
REL="next"
HREF="ch08_07.htm"
TITLE="8.7 Implementing PLVtab.display"></HEAD>
<BODY><DIV CLASS="htmlnav"
><H1
><IMG
SRC="gifs/smbanner.gif"
ALT="Advanced Oracle PL/SQL Programming with Packages"
USEMAP="#srchmap"
BORDER="0"></H1
><MAP
NAME="srchmap"
><AREA
SHAPE="RECT"
COORDS="0,0,466,65"
HREF="index.htm"
ALT="Advanced Oracle PL/SQL Programming with Packages"><AREA
SHAPE="RECT"
COORDS="467,0,514,18"
HREF="jobjects/fsearch.htm"
ALT="Search this book"></MAP
><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch08_05.htm"
TITLE="8.5 Setting the Display Prefix"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 8.5 Setting the Display Prefix"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><SPAN
CLASS="NAVTITLE"
><A
CLASS="chapter"
REL="up"
HREF="ch08_01.htm"
TITLE="8. PLVtab: Easy Access to PL/SQL Tables"
>Chapter 8<BR>PLVtab: Easy Access to PL/SQL Tables</A
></SPAN
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch08_07.htm"
TITLE="8.7 Implementing PLVtab.display"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 8.7 Implementing PLVtab.display"
BORDER="0"></A
></TD
></TR
></TABLE
>&nbsp;<HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"></DIV
><DIV
CLASS="sect1"
><H2
CLASS="sect1"
><A
CLASS="title"
NAME="ch08-21426"
>8.6 Emptying Tables<A
CLASS="indexterm"
NAME="ch08-idx-997787-0"
></A
><A
CLASS="indexterm"
NAME="ch08-idx-997787-1"
></A
> with PLVtab</A
></H2
><P
CLASS="para"
>For <SPAN
CLASS="acronym"
>PL/SQL</SPAN
> Releases 2.2 and earlier, the only way to delete all rows from a <SPAN
CLASS="acronym"
>PL/SQL</SPAN
> table (and release all associated memory) is to assign an empty table of the same TYPE to your structure. PLVtab offers the following set of empty tables to facilitate this process for PLVtab-based tables:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>empty_boolean boolean_table;
empty_date date_table;
empty_integer integer_table;
empty_number number_table;

empty_vc30 vc30_table;
empty_vc60 vc60_table;
empty_vc80 vc80_table;
empty_vc2000 vc2000_table;
empty_vcmax vcmax_table;
empty_ident ident_table;</PRE
></BLOCKQUOTE
><P
CLASS="para"
>It is very easy to use these empty tables (of course, they are only empty if you do not define rows in those <SPAN
CLASS="acronym"
>PL/SQL</SPAN
> tables!). The following example shows a package body that has defined within it a <SPAN
CLASS="acronym"
>PL/SQL</SPAN
> table. This table is then modified and emptied by the program units defined in that same package body.</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>PACKAGE BODY paid_subs
IS
   listcount INTEGER := 0;
   namelist PLVtab.vc80_table;

   PROCEDURE addsub (name_in IN VARCHAR2) IS
   BEGIN
      namelist (listcount + 1) := name_in;
      listcount := listcount + 1;
   END;

   PROCEDURE clearlist IS
   BEGIN
      namelist := PLVtab.empty_vc80;
   END;
END paid_subs;</PRE
></BLOCKQUOTE
><P
CLASS="para"
>If you have <SPAN
CLASS="acronym"
>PL/SQL</SPAN
> Release 2.3, you don't have to bother with these empty tables. Instead, you can use the <SPAN
CLASS="acronym"
>PL/SQL</SPAN
> table DELETE attribute to remove the rows from the table. The following examples illustrate the power and flexibility of this syntax:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>namelist.DELETE; -- Delete all rows.
namelist.DELETE (5); -- Delete row 5.
namelist.DELETE (5, 677); -- Delete all rows between 5 and 677.</PRE
></BLOCKQUOTE
><P
CLASS="para"
>This is obviously a much more desirable technique&nbsp;-- and it highlights a drawback to the PLVtab approach to emptying tables.</P
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch08-SECT-6.1"
>8.6.1 Improving the Delete Process</A
></H3
><P
CLASS="para"
>As explained above, to delete all the rows from a (<SPAN
CLASS="acronym"
>PL/SQL</SPAN
> Release 2.2 and earlier) PLVtab table, you would assign an empty table to that table. The problem with this approach is that it exposes the implementation of the delete process. You have to know about the empty table and also the aggregate assignment syntax. Worse, when you do upgrade to <SPAN
CLASS="acronym"
>PL/SQL</SPAN
> Release 2.3 or above, you have to go to each of these assignments and change the code in order to take advantage of the new attribute.</P
><P
CLASS="para"
>A much better approach would be for PLVtab to provide not the empty tables themselves, but procedures that do the emptying for you. Such a program is very simple and is shown below:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
><A
CLASS="indexterm"
NAME="ch08-idx-997788-0"
></A
>PROCEDURE empty (table_out OUT date_table) IS
BEGIN
   table_out := empty_date;
END;</PRE
></BLOCKQUOTE
><P
CLASS="para"
>This procedure would, of course, have to be overloaded for each table TYPE. Notice that this program uses the empty table just as you would, but that detail is hidden from view. There are two advantages to this approach:</P
><UL
CLASS="itemizedlist"
><LI
CLASS="listitem"
><P
CLASS="para"
>Now when I want to empty a table, I simply call the program as shown below:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>PLVtab.empty (my_table);</PRE
></BLOCKQUOTE
><P
CLASS="para"
>I don't have to know about the empty tables and their naming conventions. I leave that to the package.</P
></LI
><LI
CLASS="listitem"
><P
CLASS="para"
>When my installation upgrades to <SPAN
CLASS="acronym"
>PL/SQL</SPAN
> Release 2.3, I can take immediate advantage of the DELETE operator without changing those parts of my application that empty my tables. Instead, I can simply change the implementation of the empty procedure itself. I can implement a procedure with equivalent functionality as follows:</P
></LI
></UL
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>PROCEDURE empty (table_out OUT date_table) IS
BEGIN
   table_out.DELETE;
END;</PRE
></BLOCKQUOTE
><P
CLASS="para"
>Yet I could also enhance the empty procedures of PLVtab to take full advantage of the flexibility offered by the DELETE attribute:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>PROCEDURE empty 
  (table_out OUT date_table, 
   start_in IN INTEGER := NULL,
   end_in IN INTEGER := NULL) 
IS
BEGIN
   table_out.DELETE 
      (NVL (start_in, table_out.FIRST),
       NVL (end_in, table_out.LAST));
END;</PRE
></BLOCKQUOTE
><P
CLASS="para"
>Through careful assignment of default values for the arguments of this new implementation, all previous uses of the empty procedure would still be valid. Future uses could take advantage of the new arguments.[<A
CLASS="footnote"
HREF="#ch08-pgfId-997558"
>1</A
>]</P
><BLOCKQUOTE
CLASS="footnote"
><DIV
CLASS="footnote"
><P
CLASS="para"
><A
CLASS="footnote"
NAME="ch08-pgfId-997558"
>[1]</A
>  Why isn't this technique used in PLVtab? Well, at some point, I had to stop changing my code and instead write a book about it. You are, at least, now aware of the issue and can implement this approach yourself.</P
></DIV
></BLOCKQUOTE
><DIV
CLASS="sidebar"
><H4
CLASS="sidebar"
><A
CLASS="title"
NAME="AUTOID-11795"
>Special Notes on PLVtab</A
></H4
><P
CLASS="para"
>The PLVtab package supports only the table types listed in Table 8-1. You can add additional table types easily, but be sure to make each of these changes: </P
><UL
CLASS="itemizedlist"
><LI
CLASS="listitem"
><P
CLASS="para"
>Add the table TYPE statement for the desired datatype. </P
></LI
><LI
CLASS="listitem"
><P
CLASS="para"
>Declare an "empty" table of that same table type. </P
></LI
><LI
CLASS="listitem"
><P
CLASS="para"
>Create another version of the display procedure that accepts this table type. </P
></LI
></UL
></DIV
></DIV
></DIV
><DIV
CLASS="htmlnav"
><P
></P
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch08_05.htm"
TITLE="8.5 Setting the Display Prefix"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 8.5 Setting the Display Prefix"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="book"
HREF="index.htm"
TITLE="Advanced Oracle PL/SQL Programming with Packages"
><IMG
SRC="../gifs/txthome.gif"
ALT="Advanced Oracle PL/SQL Programming with Packages"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch08_07.htm"
TITLE="8.7 Implementing PLVtab.display"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 8.7 Implementing PLVtab.display"
BORDER="0"></A
></TD
></TR
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
>8.5 Setting the Display Prefix</TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="index"
HREF="index/idx_0.htm"
TITLE="Book Index"
><IMG
SRC="../gifs/index.gif"
ALT="Book Index"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
>8.7 Implementing PLVtab.display</TD
></TR
></TABLE
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"></DIV
><IMG
SRC="../gifs/smnavbar.gif"
USEMAP="#map"
BORDER="0"
ALT="The Oracle Library Navigation">

<P><font size="-1">
<a href="../copyrght.htm#copy">Copyright (c) 2000</a> O'Reilly & Associates. All rights reserved.
</font></P>

<MAP NAME="map">

<AREA SHAPE="RECT"
COORDS="0,0,35,30"
HREF="../index.htm"
ALT="Library Home">

<AREA SHAPE="RECT"
COORDS="40,0,95,30"
HREF="../prog2/index.htm"
ALT="Oracle PL/SQL Programming, 2nd. Ed.">

<AREA SHAPE="RECT"
COORDS="100,0,200,30"
HREF="../guide8i/index.htm"
ALT="Guide to Oracle 8i Features">

<AREA SHAPE="RECT"
COORDS="205,0,245,30"
HREF="../bipack/index.htm"
ALT="Oracle Built-in Packages">

<AREA SHAPE="RECT"
COORDS="250,0,320,30"
HREF="index.htm"
ALT="Advanced PL/SQL Programming with Packages">

<AREA SHAPE="RECT"
COORDS="325,0,420,30"
HREF="../webapp/index.htm"
ALT="Oracle Web Applications">

<AREA SHAPE="RECT"
COORDS="425,0,490,30"
HREF="../langpkt/index.htm"
ALT="Oracle PL/SQL Language Pocket Reference">

<AREA SHAPE="RECT"
COORDS="495,0,570,30"
HREF="../bipkt/index.htm"
ALT="Oracle PL/SQL Built-ins Pocket Reference">
</MAP>
</BODY
>
<!-- Mirrored from liso.cs.pusan.ac.kr by HTTrack Website Copier/3.x [XR&CO'2001] -->
</HTML
>
