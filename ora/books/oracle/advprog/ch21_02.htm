<HTML
><HEAD
><TITLE
>[Chapter 21] 21.2 PLVtrc: Tracing Execution of PL/SQL Programs</TITLE
><META
NAME="DC.Creator"
CONTENT="Steven Feuerstein"><META
NAME="DC.Date"
CONTENT="2000-04-29T18:31:40Z"><META
NAME="DC.Format"
CONTENT="text/html"
SCHEME="MIME"><META
NAME="DC.Identifier"
CONTENT="O'Reilly and Associates-1-56592-238-7E"><META
NAME="DC.Language"
CONTENT="en-US"><META
NAME="DC.Publisher"
CONTENT="O'Reilly &amp; Associates, Inc."><META
NAME="DC.Source"
CONTENT="1-56592-238-7E"
SCHEME="ISBN"><META
NAME="DC.Subject.Keyword"
CONTENT="PL/SQL SQL Oracle Packages"><META
NAME="DC.Title"
CONTENT="Advanced Oracle PL/SQL Programming with Packages"><META
NAME="DC.Type"
CONTENT="Text.Monograph"><META
NAME="generator"
CONTENT="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><LINK
REL="stylesheet"
TYPE="text/css"
HREF="../style/style1.css"><LINK
REV="made"
HREF="mailto:online-books@oreilly.com"
TITLE="Online Books Comments"><LINK
REL="up"
HREF="ch21_01.htm"
TITLE="21. PLVlog and PLVtrc: Logging and Tracing"><LINK
REL="prev"
HREF="ch21_01.htm"
TITLE="21.1 PLVlog: Logging Activity in PL/SQL Programs"><LINK
REL="next"
HREF="ch22_01.htm"
TITLE="22. Exception Handling"></HEAD>
<BODY><DIV CLASS="htmlnav"
><H1
><IMG
SRC="gifs/smbanner.gif"
ALT="Advanced Oracle PL/SQL Programming with Packages"
USEMAP="#srchmap"
BORDER="0"></H1
><MAP
NAME="srchmap"
><AREA
SHAPE="RECT"
COORDS="0,0,466,65"
HREF="index.htm"
ALT="Advanced Oracle PL/SQL Programming with Packages"><AREA
SHAPE="RECT"
COORDS="467,0,514,18"
HREF="jobjects/fsearch.htm"
ALT="Search this book"></MAP
><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch21_01.htm"
TITLE="21.1 PLVlog: Logging Activity in PL/SQL Programs"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 21.1 PLVlog: Logging Activity in PL/SQL Programs"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><SPAN
CLASS="NAVTITLE"
><A
CLASS="chapter"
REL="up"
HREF="ch21_01.htm"
TITLE="21. PLVlog and PLVtrc: Logging and Tracing"
>Chapter 21<BR>PLVlog and PLVtrc: Logging and Tracing</A
></SPAN
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="chapter"
HREF="ch22_01.htm"
TITLE="22. Exception Handling"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 22. Exception Handling"
BORDER="0"></A
></TD
></TR
></TABLE
>&nbsp;<HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"></DIV
><DIV
CLASS="sect1"
><H2
CLASS="sect1"
><A
CLASS="title"
NAME="ch21-14220"
>21.2 PLVtrc: Tracing Execution of PL/SQL Programs</A
></H2
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="ch21-idx-998568-0"
></A
><A
CLASS="indexterm"
NAME="ch21-idx-998568-1"
></A
>The PLVtrc (PL/Vision TRaCe) package offers a generic trace facility for <SPAN
CLASS="acronym"
>PL/SQL</SPAN
> applications. It is especially useful if you do not have access to a source debugger for <SPAN
CLASS="acronym"
>PL/SQL</SPAN
>. It is also used by PLVexc to record the currently executing <SPAN
CLASS="acronym"
>PL/SQL</SPAN
> program unit when an exception occurs.</P
><P
CLASS="para"
>The PLVtrc package offers several capabilities:</P
><UL
CLASS="itemizedlist"
><LI
CLASS="listitem"
><P
CLASS="para"
>Provides a flexible execution trace facility. It inserts trace points anywhere in your code; these fire and display (or write to a log) only if you explicitly turn on the trace. Thus, your trace can remain in place even in production code. </P
></LI
><LI
CLASS="listitem"
><P
CLASS="para"
>Parses the string returned by a call to the DBMS_UTILITY.FORMAT_CALL_STACK function. You can specify retrieval of the <EM
CLASS="emphasis"
>n</EM
>th module in the stack and use this information in your own auditing and trace activities.</P
></LI
><LI
CLASS="listitem"
><P
CLASS="para"
>Is similar to the <KBD
CLASS="command"
>p</KBD
> package. PLVtrc offers a heavily overloaded interface to the PUT_LINE procedure of DBMS_OUTPUT. (In fact, PLVtrc calls the <KBD
CLASS="command"
>p.l</KBD
> procedure to generate its output.)</P
></LI
></UL
><P
CLASS="para"
>The elements provided by PLVtrc can be broken down into three areas: output control, module tracking, and activity trace. They are explored in the following sections.</P
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch21-SECT-2.1"
>21.2.1 <A
CLASS="indexterm"
NAME="ch21-idx-998569-0"
></A
>Directing Output from PLVtrc</A
></H3
><P
CLASS="para"
>As with many other PL/Vision packages, PLVtrc allows you to programmatically control its behavior, in this case its output. PLVtrc offers three different types of output:</P
><UL
CLASS="itemizedlist"
><LI
CLASS="listitem"
><P
CLASS="para"
>Display the trace message to the screen. If not turned on, all calls to PLVtrc programs are ignored.</P
></LI
><LI
CLASS="listitem"
><P
CLASS="para"
>Log the trace message to the PL/Vision log. If tracing is activated, this feature also writes a line out to the current PLVlog repository.</P
></LI
><LI
CLASS="listitem"
><P
CLASS="para"
>Display the currently executing module based on the <SPAN
CLASS="acronym"
>PL/SQL</SPAN
> FORMAT_CALL_STACK function. If tracing is activated, this feature adds the current module to the display.</P
></LI
></UL
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="ch21-idx-998570-0"
></A
><A
CLASS="indexterm"
NAME="ch21-idx-998570-1"
></A
><A
CLASS="indexterm"
NAME="ch21-idx-998570-2"
></A
>PLVtrc offers a separate toggle for each of these aspects of output. Here are the programs to turn the trace facility itself on and off:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>PROCEDURE turn_on;
PROCEDURE turn_off;
FUNCTION tracing RETURN BOOLEAN;</PRE
></BLOCKQUOTE
><P
CLASS="para"
>To activate the trace facility, enter:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>SQL&gt; execute PLVtrc.turn_on;</PRE
></BLOCKQUOTE
><P
CLASS="para"
>To de-activate the trace facility enter:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>SQL&gt; execute PLVtrc.turn_off;</PRE
></BLOCKQUOTE
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="ch21-idx-998571-0"
></A
><A
CLASS="indexterm"
NAME="ch21-idx-998571-1"
></A
>To control logging of trace messages using the PLVlog package, PLVtrc offers these programs:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>PROCEDURE log;
PROCEDURE nolog;
FUNCTION logging RETURN BOOLEAN;</PRE
></BLOCKQUOTE
><P
CLASS="para"
>This command turns on logging of trace message:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>SQL&gt; execute PLVtrc.log;</PRE
></BLOCKQUOTE
><P
CLASS="para"
>To turn off logging, enter:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>SQL&gt; execute PLVtrc.nolog;</PRE
></BLOCKQUOTE
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="ch21-idx-998572-0"
></A
>You can also request that when trace information is displayed the current module is included in the message. You control the inclusion of that data with this toggle:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>PROCEDURE <A
CLASS="indexterm"
NAME="ch21-idx-998573-0"
></A
>dispmod;
PROCEDURE <A
CLASS="indexterm"
NAME="ch21-idx-998574-0"
></A
>nodispmod;
FUNCTION <A
CLASS="indexterm"
NAME="ch21-idx-998575-0"
></A
>displaying_module RETURN BOOLEAN;</PRE
></BLOCKQUOTE
><P
CLASS="para"
>So to include the module in trace messages, enter:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>SQL&gt; execute PLVtrc.dispmod;</PRE
></BLOCKQUOTE
><P
CLASS="para"
>To ignore the module name enter:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>SQL&gt; execute PLVtrc.nodispmod;</PRE
></BLOCKQUOTE
><P
CLASS="para"
>To turn on all these options, you need to execute all three "on" procedures:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>SQL&gt; exec PLVtrc.dispmod;
SQL&gt; exec PLVtrc.log;
SQL&gt; exec PLVtrc.turn_on;</PRE
></BLOCKQUOTE
><P
CLASS="para"
>The order in which you call these toggle programs is not important. Just remember that you cannot write information to the log or display the current module unless the overall trace is turned on.</P
><P
CLASS="para"
>In all examples above I have shown the syntax for executing the programs from within SQL*Plus. You can also call these programs from within a <SPAN
CLASS="acronym"
>PL/SQL</SPAN
> program, in which case you would <EM
CLASS="emphasis"
>not</EM
> use the execute command.</P
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch21-SECT-2.2"
>21.2.2 <A
CLASS="indexterm"
NAME="ch21-idx-998578-0"
></A
><A
CLASS="indexterm"
NAME="ch21-idx-998578-1"
></A
><A
CLASS="indexterm"
NAME="ch21-idx-998578-2"
></A
>Accessing the PL/SQL Call Stack</A
></H3
><P
CLASS="para"
>The PLVtrc package provides you with the ability to access and parse the call stack maintained by the <SPAN
CLASS="acronym"
>PL/SQL</SPAN
> runtime engine. This call stack is available with a call to the DBMS_UTILITY.<A
CLASS="indexterm"
NAME="ch21-idx-998580-0"
></A
><A
CLASS="indexterm"
NAME="ch21-idx-998580-1"
></A
>FORMAT_CALL_STACK function. Here is an example of the string returned by this function:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>----- PL/SQL Call Stack -----
object      line    object
handle      number  name
88ce3f74         8  package STEVEN.DISPCSTK
88e49fc4         2  function STEVEN.COMPANY_TYPE
88e384c8         1  procedure STEVEN.CALC_PROFITS
88e3823c         1  procedure STEVEN.CALC_TOTALS
88e49390         1  procedure STEVEN.CALC_NET_WORTH
88e2bd20         1  anonymous block</PRE
></BLOCKQUOTE
><P
CLASS="para"
>The string actually contains many newline characters (you can find these by searching for CHR(10) with the INSTR function). It is designed for easy display, but not easy manipulation within a programmatic setting. </P
><P
CLASS="para"
>The PLVtrc package offers two programs to access this <SPAN
CLASS="acronym"
>PL/SQL</SPAN
> call stack:</P
><DL
CLASS="variablelist"
><DT
CLASS="term"
><A
CLASS="indexterm"
NAME="ch21-idx-998581-0"
></A
>ps_callstack</DT
><DD
CLASS="listitem"
><P
CLASS="para"
>Returns the same string returned by the FORMAT_CALL_STACK function. It is provided for consistency and to save you some typing.</P
></DD
><DT
CLASS="term"
><A
CLASS="indexterm"
NAME="ch21-idx-998582-0"
></A
>ps_module</DT
><DD
CLASS="listitem"
><P
CLASS="para"
>Returns the <EM
CLASS="emphasis"
>n</EM
>th module in the <SPAN
CLASS="acronym"
>PL/SQL</SPAN
> call stack, with the default being the "most recent module," (i.e., the program that was active before the <KBD
CLASS="command"
>PLVtrc.module</KBD
> function was called.) This, by the way, is the <EM
CLASS="emphasis"
>second</EM
> module in the stack.</P
></DD
></DL
><BLOCKQUOTE
CLASS="note"
><P
CLASS="para"
><STRONG
>NOTE:</STRONG
>  One big problem with FORMAT_CALL_STACK is that it will not provide the name of the current program within a package. If you are executing a standalone function or procedure, FORMAT_CALL_STACK shows you its name. If you are running a function within a package, however, it only shows you the package name. If your code design is package-driven, this fact renders the FORMAT_CALL_STACK function largely irrelevant. This shortcoming is the main reason that PLVtrc also maintains its own program call stack in a PL/Vision stack.</P
></BLOCKQUOTE
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch21-SECT-2.3"
>21.2.3 Tracing Code Execution</A
></H3
><P
CLASS="para"
>PLVtrc offers two programs to trace the execution of your code: <KBD
CLASS="command"
>action</KBD
> and <KBD
CLASS="command"
>show</KBD
>. The <KBD
CLASS="command"
>action</KBD
> program's header is:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>PROCEDURE <A
CLASS="indexterm"
NAME="ch21-idx-998583-0"
></A
>action
   (string_in IN VARCHAR2 := NULL, 
    counter_in IN INTEGER := NULL,
    prefix_in IN VARCHAR2 := NULL);</PRE
></BLOCKQUOTE
><P
CLASS="para"
>You pass a string, a numeric counter or indicator, and another string that is used as a prefix on the trace message. The action procedure is used by <KBD
CLASS="command"
>startup</KBD
>, <KBD
CLASS="command"
>terminate</KBD
>, and the other activity trace module, <KBD
CLASS="command"
>show</KBD
>. It is, in other words, the lowest-level trace procedure.</P
><P
CLASS="para"
>The <KBD
CLASS="command"
>show</KBD
><A
CLASS="indexterm"
NAME="ch21-idx-998584-0"
></A
> procedure is heavily overloaded. Like the <KBD
CLASS="command"
>p.l</KBD
> procedure, the <KBD
CLASS="command"
>show</KBD
> program comes in many flavors of argument combinations, as shown in the list below. This is done to make it easy for you to pass different combinations of data for display without having to perform TO_CHAR conversions and concatenations.</P
><P
CLASS="para"
>The following datatype combinations are supported by <KBD
CLASS="command"
>PLVtrc.show</KBD
>:</P
><TABLE
CLASS="informaltable"
BORDER="1"
CELLPADDING="3"
><THEAD
CLASS="thead"
><TR
CLASS="row"
VALIGN="TOP"
><TH
CLASS="entry"
ALIGN="LEFT"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>Single-value</P
></TH
><TH
CLASS="entry"
ALIGN="LEFT"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>Double-value</P
></TH
><TH
CLASS="entry"
ALIGN="LEFT"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>Triple-value</P
></TH
></TR
></THEAD
><TBODY
CLASS="tbody"
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>string</P
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>string, date</P
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>string, number, number</P
></TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>date</P
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>string, number</P
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>string, number, date</P
></TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>number</P
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>string, boolean</P
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>string, number, boolean</P
></TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>boolean</P
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
></P
>&nbsp;</TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
></P
>&nbsp;</TD
></TR
></TBODY
></TABLE
><P
CLASS="para"
>Here are the headers for the single-value <KBD
CLASS="command"
>show</KBD
> procedures:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>PROCEDURE show (stg1 IN VARCHAR2);
PROCEDURE show (date1 IN DATE, mask_in IN VARCHAR2 := PLV.datemask);
PROCEDURE show (bool1 IN BOOLEAN);
PROCEDURE show (num1 IN NUMBER);</PRE
></BLOCKQUOTE
><P
CLASS="para"
>Here are the headers for the double-value <KBD
CLASS="command"
>show</KBD
> procedures:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>PROCEDURE show (stg1 IN VARCHAR2, num1 IN NUMBER);
PROCEDURE show
   (stg1 IN VARCHAR2,
    date1 IN DATE, mask_in IN VARCHAR2 := PLV.datemask);
PROCEDURE show (stg1 IN VARCHAR2, bool1 IN BOOLEAN);</PRE
></BLOCKQUOTE
><P
CLASS="para"
>Here are the headers for the triple-value <KBD
CLASS="command"
>show</KBD
> procedures:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>PROCEDURE show 
   (stg1 IN VARCHAR2, num1 IN NUMBER, num2 IN NUMBER);
PROCEDURE show 
   (stg1 IN VARCHAR2, num1 IN NUMBER,
    date1 IN DATE, mask_in IN VARCHAR2 := PLV.datemask);
PROCEDURE show 
   (stg1 IN VARCHAR2, num1 IN NUMBER, bool1 IN BOOLEAN);</PRE
></BLOCKQUOTE
><P
CLASS="para"
>You can place calls to both <KBD
CLASS="command"
>action</KBD
> and <KBD
CLASS="command"
>show</KBD
> in your programs. No output is generated from these message lines until you turn on the trace. And since there is very little overhead involved in calling these programs, you can leave the trace in your code even when it goes into production status. When you have to debug the code, you simply call <KBD
CLASS="command"
>PLVtrc.turn_on</KBD
>, run the application, and you have a wealth of information available to you.</P
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch21-SECT-2.4"
>21.2.4 <A
CLASS="indexterm"
NAME="ch21-idx-998585-0"
></A
>The PLVtrc Program Stack</A
></H3
><P
CLASS="para"
>PLVtrc offers two programs to build its own program execution stack: <KBD
CLASS="command"
>startup</KBD
> and <KBD
CLASS="command"
>terminate</KBD
>. You can also get information about the current and previous modules of the stack.</P
><P
CLASS="para"
>The PLVtrc call stack operations provide two key advantages over the builtin:</P
><OL
CLASS="orderedlist"
><LI
CLASS="listitem"
><P
CLASS="para"
>The call stack contains the names of the specific programs being executed (or whatever strings you pass to represent the names of programs). </P
></LI
><LI
CLASS="listitem"
><P
CLASS="para"
>You can call <KBD
CLASS="command"
>startup</KBD
> at any point, so you can give names in your call stack to anonymous blocks as well as named modules. Just don't forget to <KBD
CLASS="command"
>terminate</KBD
> if you run <KBD
CLASS="command"
>startup</KBD
>.</P
></LI
></OL
><DIV
CLASS="sect3"
><H4
CLASS="sect3"
><A
CLASS="title"
NAME="ch21-SECT-2.4.1"
>21.2.4.1 <A
CLASS="indexterm"
NAME="ch21-idx-998586-0"
></A
>startup</A
></H4
><P
CLASS="para"
>You should call <KBD
CLASS="command"
>PLVtrc.startup</KBD
> as the first line in the body of your program. Its header is:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>PROCEDURE startup 
   (module_in IN VARCHAR2, string_in IN VARCHAR2 := NULL);</PRE
></BLOCKQUOTE
><P
CLASS="para"
>You provide the module name or abbreviation or whatever string you want to record as representing the program. You can also pass in a second string argument. This value is displayed or logged by PLVtrc, according to the toggle settings. This second argument allows you to pass variable data into the trace.</P
></DIV
><DIV
CLASS="sect3"
><H4
CLASS="sect3"
><A
CLASS="title"
NAME="ch21-SECT-2.4.2"
>21.2.4.2 <A
CLASS="indexterm"
NAME="ch21-idx-998587-0"
></A
>terminate</A
></H4
><P
CLASS="para"
>The <KBD
CLASS="command"
>terminate</KBD
> program performs a task opposite that of <KBD
CLASS="command"
>startup</KBD
>: it pops off the stack the most recently pushed module and sets the previous module variable. The header for <KBD
CLASS="command"
>terminate</KBD
> is:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>PROCEDURE terminate (string_in IN VARCHAR2 := NULL);</PRE
></BLOCKQUOTE
><P
CLASS="para"
>As with <KBD
CLASS="command"
>startup</KBD
>, you can provide a string to be displayed or logged, depending on the status of the PLVtrc toggles. You should call <KBD
CLASS="command"
>PLVtrc.terminate</KBD
> as the last executable statement in your procedure, and immediately before your RETURN statement in a function. </P
><P
CLASS="para"
>You should also call <KBD
CLASS="command"
>PLVtrc.terminate</KBD
> in each of your exception handlers in a <SPAN
CLASS="acronym"
>PL/SQL</SPAN
> block where startup was called. Otherwise the enclosing module will not be popped off the stack when the block fails. </P
><P
CLASS="para"
>If you use one of the high-level handlers of PLVexc to handle your exception, however, you do not have to&nbsp;-- and should not&nbsp;-- call <KBD
CLASS="command"
>terminate</KBD
>. Those handlers do that for you.</P
></DIV
><DIV
CLASS="sect3"
><H4
CLASS="sect3"
><A
CLASS="title"
NAME="ch21-SECT-2.4.3"
>21.2.4.3 Current module</A
></H4
><P
CLASS="para"
>Each time <KBD
CLASS="command"
>PLVtrc.startup</KBD
> is executed, it pushes the current module onto the PLVtrc execution stack and sets the current module to the first argument in the call to <KBD
CLASS="command"
>startup</KBD
>. </P
><P
CLASS="para"
>You can obtain the name of the current module in the PLVtrc environment by calling the <KBD
CLASS="command"
>currmod</KBD
><A
CLASS="indexterm"
NAME="ch21-idx-998588-0"
></A
> function, whose header is:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>FUNCTION currmod RETURN VARCHAR2;</PRE
></BLOCKQUOTE
></DIV
><DIV
CLASS="sect3"
><H4
CLASS="sect3"
><A
CLASS="title"
NAME="ch21-SECT-2.4.4"
>21.2.4.4 Previous module</A
></H4
><P
CLASS="para"
>To see the name of the previous module, you can call the <KBD
CLASS="command"
>prevmod</KBD
><A
CLASS="indexterm"
NAME="ch21-idx-998589-0"
></A
> function, whose header is:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>FUNCTION prevmod RETURN VARCHAR2;</PRE
></BLOCKQUOTE
><P
CLASS="para"
>The PLVexc package makes use of this function so that it can record the program in which an exception was raised. You might not have too much use for <KBD
CLASS="command"
>prevmod</KBD
>.</P
><P
CLASS="para"
>See <A
CLASS="xref"
HREF="ch21_02.htm#ch21-SECT-2.1"
>Section 21.2.5, "Using PLVtrc"</A
> to see how you put these pieces together.</P
></DIV
><DIV
CLASS="sect3"
><H4
CLASS="sect3"
><A
CLASS="title"
NAME="ch21-SECT-2.4.5"
>21.2.4.5 Emptying the stack</A
></H4
><P
CLASS="para"
>The <KBD
CLASS="command"
>clearecs</KBD
><A
CLASS="indexterm"
NAME="ch21-idx-998590-0"
></A
><A
CLASS="indexterm"
NAME="ch21-idx-998590-1"
></A
> procedure empties the execution stack by recreating it. The header for this procedure is:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>PROCEDURE clearecs;</PRE
></BLOCKQUOTE
><P
CLASS="para"
>You will want to use this program when you have finished running a test and you want to make sure that there aren't any extraneous module names left on the stack.</P
></DIV
><DIV
CLASS="sect3"
><H4
CLASS="sect3"
><A
CLASS="title"
NAME="ch21-SECT-2.4.6"
>21.2.4.6 Displaying the stack</A
></H4
><P
CLASS="para"
>You can display the contents of the stack with a call to <KBD
CLASS="command"
>showecs</KBD
>; the header is:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>PROCEDURE <A
CLASS="indexterm"
NAME="ch21-idx-998591-0"
></A
>showecs;</PRE
></BLOCKQUOTE
><P
CLASS="para"
>This program, in turn, calls <KBD
CLASS="command"
>PLVlst.display</KBD
> to display the contents of the list, which comprise the underlying data structure for the stack (implemented, actually, with the PLVstk package&nbsp;-- an interesting exercise in code layering).</P
></DIV
><DIV
CLASS="sect3"
><H4
CLASS="sect3"
><A
CLASS="title"
NAME="ch21-SECT-2.4.7"
>21.2.4.7 Retrieving stack contents</A
></H4
><P
CLASS="para"
>If you do not want to directly display the PLVtrc stack, you can extract it as a string in much the same format as that provided by the builtin FORMAT_CALL_STACK function with the <KBD
CLASS="command"
>ecs_string</KBD
><A
CLASS="indexterm"
NAME="ch21-idx-998592-0"
></A
> function. Its header is:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>FUNCTION ecs_string RETURN VARCHAR2;</PRE
></BLOCKQUOTE
><P
CLASS="para"
>Each module name in the call stack is separated by a newline character.</P
><P
CLASS="para"
>You can also retrieve a single module from the stack with the <KBD
CLASS="command"
>module</KBD
><A
CLASS="indexterm"
NAME="ch21-idx-998593-0"
></A
> procedure. This program's header is:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>FUNCTION module (pos_in IN INTEGER := c_top_pos)
   RETURN VARCHAR2;</PRE
></BLOCKQUOTE
><P
CLASS="para"
>where <KBD
CLASS="command"
>pos_in</KBD
> is the position in the stack in which you are interested. The current program is stored in the top-most position of 0 (actually not yet on the call stack) and is encapsulated in the package constant, <KBD
CLASS="command"
>c_top_pos</KBD
><A
CLASS="indexterm"
NAME="ch21-idx-998594-0"
></A
>. To obtain the name of the module that called the current program, you would pass in a position of 1.<A
CLASS="indexterm"
NAME="ch21-idx-998595-0"
></A
></P
></DIV
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch21-SECT-2.5"
>21.2.5 Using PLVtrc</A
></H3
><P
CLASS="para"
>The following examples show you how to use the different elements of the PLVtrc package.</P
><OL
CLASS="orderedlist"
><LI
CLASS="listitem"
><P
CLASS="para"
>Use the <KBD
CLASS="command"
>startup</KBD
> and <KBD
CLASS="command"
>terminate</KBD
> procedures in my procedure to integrate it into the PLVtrc call stack. In addition, handle exceptions using the PLVexc component (which also performs a <KBD
CLASS="command"
>terminate</KBD
>).</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>CREATE OR REPLACE PROCEDURE proc (val in number) IS
BEGIN
   PLVtrc.startup ('proc');
   IF 1/val &gt; 1 THEN NULL; END IF;
   PLVtrc.terminate;
EXCEPTION
   WHEN OTHERS THEN PLVexc.rec_continue;
END;
/</PRE
></BLOCKQUOTE
></LI
><LI
CLASS="listitem"
><P
CLASS="para"
>Show the employee name and date before giving them a name.</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>FOR emp_rec IN emp_cur
LOOP
   PLVtrc.show (emp_rec.ename, emp_rec.hiredate);
   give_raise (emp_rec.empno);
END LOOP;</PRE
></BLOCKQUOTE
><P
CLASS="para"
>Remember: this call to <KBD
CLASS="command"
>show</KBD
> will not actually generate any output unless you turn on at least one of the trace features.</P
></LI
><LI
CLASS="listitem"
><P
CLASS="para"
>Use the <KBD
CLASS="command"
>startup</KBD
> and <KBD
CLASS="command"
>terminate</KBD
> procedures to track execution of a nested, anonymous block. Notice that in the exception section, I explicitly call terminate for the <A
CLASS="indexterm"
NAME="ch21-idx-998596-0"
></A
><A
CLASS="indexterm"
NAME="ch21-idx-998596-1"
></A
>NO_DATA_FOUND exception. For all other errors, I let the PLVexc package handle the <KBD
CLASS="command"
>PLVtrc.terminate</KBD
> and the error as well.</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>PROCEDURE annual_calcs (val in number) 
IS
BEGIN
   PLVtrc.startup ('proc');</PRE
></BLOCKQUOTE
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>   calc_gross_revenue;
   BEGIN
      PLVtrc.startup ('analyze');
      calc_rev_distribution;
      PLVtrc.terminate;
   EXCEPTION
      WHEN OTHERS THEN PLVexc.halt;
   END;
   call_profits;
   PLVtrc.terminate;

EXCEPTION
   WHEN NO_DATA_FOUND 
   THEN 
      PLVtrc.terminate;
      p.l ('Invalid value: ' || TO_CHAR (val);

   WHEN OTHERS 
   THEN 
      /* This program calls PLVtrc.terminate */
      PLVexc.rec_continue;
END;
/<A
CLASS="indexterm"
NAME="ch21-idx-998597-0"
></A
><A
CLASS="indexterm"
NAME="ch21-idx-998597-1"
></A
></PRE
></BLOCKQUOTE
></LI
></OL
></DIV
></DIV
><DIV
CLASS="htmlnav"
><P
></P
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch21_01.htm"
TITLE="21.1 PLVlog: Logging Activity in PL/SQL Programs"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 21.1 PLVlog: Logging Activity in PL/SQL Programs"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="book"
HREF="index.htm"
TITLE="Advanced Oracle PL/SQL Programming with Packages"
><IMG
SRC="../gifs/txthome.gif"
ALT="Advanced Oracle PL/SQL Programming with Packages"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="chapter"
HREF="ch22_01.htm"
TITLE="22. Exception Handling"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 22. Exception Handling"
BORDER="0"></A
></TD
></TR
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
>21.1 PLVlog: Logging Activity in PL/SQL Programs</TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="index"
HREF="index/idx_0.htm"
TITLE="Book Index"
><IMG
SRC="../gifs/index.gif"
ALT="Book Index"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
>22. Exception Handling</TD
></TR
></TABLE
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"></DIV
><IMG
SRC="../gifs/smnavbar.gif"
USEMAP="#map"
BORDER="0"
ALT="The Oracle Library Navigation">

<P><font size="-1">
<a href="../copyrght.htm#copy">Copyright (c) 2000</a> O'Reilly & Associates. All rights reserved.
</font></P>

<MAP NAME="map">

<AREA SHAPE="RECT"
COORDS="0,0,35,30"
HREF="../index.htm"
ALT="Library Home">

<AREA SHAPE="RECT"
COORDS="40,0,95,30"
HREF="../prog2/index.htm"
ALT="Oracle PL/SQL Programming, 2nd. Ed.">

<AREA SHAPE="RECT"
COORDS="100,0,200,30"
HREF="../guide8i/index.htm"
ALT="Guide to Oracle 8i Features">

<AREA SHAPE="RECT"
COORDS="205,0,245,30"
HREF="../bipack/index.htm"
ALT="Oracle Built-in Packages">

<AREA SHAPE="RECT"
COORDS="250,0,320,30"
HREF="index.htm"
ALT="Advanced PL/SQL Programming with Packages">

<AREA SHAPE="RECT"
COORDS="325,0,420,30"
HREF="../webapp/index.htm"
ALT="Oracle Web Applications">

<AREA SHAPE="RECT"
COORDS="425,0,490,30"
HREF="../langpkt/index.htm"
ALT="Oracle PL/SQL Language Pocket Reference">

<AREA SHAPE="RECT"
COORDS="495,0,570,30"
HREF="../bipkt/index.htm"
ALT="Oracle PL/SQL Built-ins Pocket Reference">
</MAP>
</BODY
>
<!-- Mirrored from liso.cs.pusan.ac.kr by HTTrack Website Copier/3.x [XR&CO'2001] -->
</HTML
>
