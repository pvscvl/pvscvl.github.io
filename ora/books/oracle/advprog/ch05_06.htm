<HTML
><HEAD
><TITLE
>[Chapter 5] 5.6 PLVchr: Operations on Single Characters</TITLE
><META
NAME="DC.Creator"
CONTENT="Steven Feuerstein"><META
NAME="DC.Date"
CONTENT="2000-04-29T18:24:22Z"><META
NAME="DC.Format"
CONTENT="text/html"
SCHEME="MIME"><META
NAME="DC.Identifier"
CONTENT="O'Reilly and Associates-1-56592-238-7E"><META
NAME="DC.Language"
CONTENT="en-US"><META
NAME="DC.Publisher"
CONTENT="O'Reilly &amp; Associates, Inc."><META
NAME="DC.Source"
CONTENT="1-56592-238-7E"
SCHEME="ISBN"><META
NAME="DC.Subject.Keyword"
CONTENT="PL/SQL SQL Oracle Packages"><META
NAME="DC.Title"
CONTENT="Advanced Oracle PL/SQL Programming with Packages"><META
NAME="DC.Type"
CONTENT="Text.Monograph"><META
NAME="generator"
CONTENT="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><LINK
REL="stylesheet"
TYPE="text/css"
HREF="../style/style1.css"><LINK
REV="made"
HREF="mailto:online-books@oreilly.com"
TITLE="Online Books Comments"><LINK
REL="up"
HREF="ch05_01.htm"
TITLE="5. PL/Vision Package Specifications"><LINK
REL="prev"
HREF="ch05_05.htm"
TITLE="5.5 PLVcat: PL/SQL Code Cataloguing"><LINK
REL="next"
HREF="ch05_07.htm#ch05-SECT-7.0.3"
TITLE="5.7 PLVcmt: Commit Processing"></HEAD>
<BODY><DIV CLASS="htmlnav"
><H1
><IMG
SRC="gifs/smbanner.gif"
ALT="Advanced Oracle PL/SQL Programming with Packages"
USEMAP="#srchmap"
BORDER="0"></H1
><MAP
NAME="srchmap"
><AREA
SHAPE="RECT"
COORDS="0,0,466,65"
HREF="index.htm"
ALT="Advanced Oracle PL/SQL Programming with Packages"><AREA
SHAPE="RECT"
COORDS="467,0,514,18"
HREF="jobjects/fsearch.htm"
ALT="Search this book"></MAP
><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch05_05.htm"
TITLE="5.5 PLVcat: PL/SQL Code Cataloguing"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 5.5 PLVcat: PL/SQL Code Cataloguing"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><SPAN
CLASS="NAVTITLE"
><A
CLASS="chapter"
REL="up"
HREF="ch05_01.htm"
TITLE="5. PL/Vision Package Specifications"
>Chapter 5<BR>PL/Vision Package Specifications</A
></SPAN
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch05_07.htm#ch05-SECT-7.0.3"
TITLE="5.7 PLVcmt: Commit Processing"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 5.7 PLVcmt: Commit Processing"
BORDER="0"></A
></TD
></TR
></TABLE
>&nbsp;<HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"></DIV
><DIV
CLASS="sect1"
><H2
CLASS="sect1"
><A
CLASS="title"
NAME="ch05-SECT-6"
>5.6 PLVchr: Operations on Single Characters</A
></H2
><P
CLASS="para"
>The<A
CLASS="indexterm"
NAME="ch05-idx-1000450-0"
></A
> PLVchr (PL/Vision CHaRacter) packag<A
CLASS="indexterm"
NAME="ch05-idx-1000451-0"
></A
>e provides information about single characters in a string. See the companion disk for details.</P
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch05-SECT-6.0.1"
>5.6.1 PLVchr constants</A
></H3
><DL
CLASS="variablelist"
><DT
CLASS="term"
><CODE
CLASS="literal"
> blank_char CONSTANT CHAR(1) := ' ';</CODE
></DT
><DT
CLASS="term"
><CODE
CLASS="literal"
>space_char CONSTANT CHAR(1) := ' ';</CODE
></DT
><DT
CLASS="term"
><CODE
CLASS="literal"
>quote1_char CONSTANT CHAR(1) := '''';</CODE
></DT
><DT
CLASS="term"
><CODE
CLASS="literal"
>quote2_char CONSTANT CHAR(2) := '''''';</CODE
></DT
><DT
CLASS="term"
><CODE
CLASS="literal"
>tab_char CONSTANT CHAR(1) := CHR(9);</CODE
></DT
><DT
CLASS="term"
><CODE
CLASS="literal"
>newline_char CONSTANT CHAR(1) := CHR(10);</CODE
></DT
><DD
CLASS="listitem"
><P
CLASS="para"
>Named constants to use in place of hard-coded literals. Sure, there is more typing involved. But at least you don't have to mess with single quotes, and the code is a lot more readable.</P
></DD
><DT
CLASS="term"
><CODE
CLASS="literal"
> c_nonprinting CONSTANT CHAR(1) := 'n';</CODE
></DT
><DT
CLASS="term"
><CODE
CLASS="literal"
>c_digit CONSTANT CHAR(1) := '9';</CODE
></DT
><DT
CLASS="term"
><CODE
CLASS="literal"
>c_letter CONSTANT CHAR(1) := 'a';</CODE
></DT
><DT
CLASS="term"
><CODE
CLASS="literal"
>c_other CONSTANT CHAR(1) := '*';</CODE
></DT
><DT
CLASS="term"
><CODE
CLASS="literal"
>c_all CONSTANT CHAR(1) := '%';</CODE
></DT
><DD
CLASS="listitem"
><P
CLASS="para"
>Action codes for use in PLVchr programs that allow you to specify the category of character that you want to work with.</P
></DD
></DL
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch05-SECT-6.0.2"
>5.6.2 Character type <A
CLASS="indexterm"
NAME="ch05-idx-1000452-0"
></A
>functions</A
></H3
><DL
CLASS="variablelist"
><DT
CLASS="term"
><CODE
CLASS="literal"
> FUNCTION is_quote (char_in IN VARCHAR2) RETURN BOOLEAN;</CODE
><A
CLASS="indexterm"
NAME="ch05-idx-1000453-0"
></A
></DT
><DT
CLASS="term"
><CODE
CLASS="literal"
>FUNCTION is_blank (char_in IN VARCHAR2) RETURN BOOLEAN;</CODE
><A
CLASS="indexterm"
NAME="ch05-idx-1000454-0"
></A
></DT
><DD
CLASS="listitem"
><P
CLASS="para"
>Functions to encapsulate hard-coded checks for contents of the strings.</P
></DD
><DT
CLASS="term"
><CODE
CLASS="literal"
> FUNCTION is_nonprinting (code_in IN INTEGER) RETURN BOOLEAN;</CODE
><A
CLASS="indexterm"
NAME="ch05-idx-1000455-0"
></A
></DT
><DT
CLASS="term"
><CODE
CLASS="literal"
>FUNCTION is_nonprinting (letter_in IN VARCHAR2) RETURN BOOLEAN;</CODE
></DT
><DD
CLASS="listitem"
><P
CLASS="para"
>Returns TRUE if the character (or, overloaded as this function is, the <SPAN
CLASS="acronym"
>ASCII</SPAN
> code) is a non-printing character.</P
></DD
><DT
CLASS="term"
><CODE
CLASS="literal"
> FUNCTION is_digit (code_in IN INTEGER) RETURN BOOLEAN;</CODE
><A
CLASS="indexterm"
NAME="ch05-idx-1000457-0"
></A
><A
CLASS="indexterm"
NAME="ch05-idx-1000461-0"
></A
></DT
><DT
CLASS="term"
><CODE
CLASS="literal"
>FUNCTION is_digit (letter_in IN VARCHAR2) RETURN BOOLEAN;</CODE
></DT
><DD
CLASS="listitem"
><P
CLASS="para"
>Returns TRUE if the character (or, overloaded as this function is, the <SPAN
CLASS="acronym"
>ASCII</SPAN
> code) is a digit (0 through 9).</P
></DD
><DT
CLASS="term"
><CODE
CLASS="literal"
> FUNCTION is_letter (letter_in IN VARCHAR2) RETURN BOOLEAN;</CODE
><A
CLASS="indexterm"
NAME="ch05-idx-1000459-0"
></A
></DT
><DT
CLASS="term"
><CODE
CLASS="literal"
>FUNCTION is_letter (code_in IN INTEGER) RETURN BOOLEAN;</CODE
></DT
><DD
CLASS="listitem"
><P
CLASS="para"
>Returns TRUE if the character (or, overloaded as this function is, the <SPAN
CLASS="acronym"
>ASCII</SPAN
> code) is a letter (a-z or A-Z).</P
></DD
><DT
CLASS="term"
><CODE
CLASS="literal"
> FUNCTION is_other (code_in IN INTEGER) RETURN BOOLEAN;</CODE
><A
CLASS="indexterm"
NAME="ch05-idx-1000462-0"
></A
></DT
><DT
CLASS="term"
><CODE
CLASS="literal"
>FUNCTION is_other (letter_in IN VARCHAR2) RETURN BOOLEAN;</CODE
></DT
><DD
CLASS="listitem"
><P
CLASS="para"
>Returns TRUE if the character (or <SPAN
CLASS="acronym"
>ASCII</SPAN
> code) is not a letter, digit, or nonprinting character.</P
></DD
></DL
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch05-SECT-6.0.3"
>5.6.3 Other functions and procedures</A
></H3
><DL
CLASS="variablelist"
><DT
CLASS="term"
><CODE
CLASS="literal"
> FUNCTION char_name (letter_in IN VARCHAR2) RETURN VARCHAR2;</CODE
><A
CLASS="indexterm"
NAME="ch05-idx-1000463-0"
></A
></DT
><DT
CLASS="term"
><CODE
CLASS="literal"
>FUNCTION char_name (code_in IN INTEGER) RETURN VARCHAR2;</CODE
></DT
><DD
CLASS="listitem"
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="ch05-idx-1000469-0"
></A
>Returns the name of the provided character. This name is actually a standard abbreviation for the character, such as <KBD
CLASS="command"
>NL</KBD
> for new line. The name of a printable character is simply the character itself. You can pass either a character or an integer code to see the name.</P
></DD
><DT
CLASS="term"
><CODE
CLASS="literal"
> FUNCTION quoted1 (string_in IN VARCHAR2) RETURN VARCHAR2;</CODE
><A
CLASS="indexterm"
NAME="ch05-idx-1000464-0"
></A
></DT
><DT
CLASS="term"
><CODE
CLASS="literal"
>FUNCTION quoted2 (string_in IN VARCHAR2) RETURN VARCHAR2;</CODE
></DT
><DD
CLASS="listitem"
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="ch05-idx-1000468-0"
></A
>Each function returns a string wrapped inside the number of single quote marks needed to allow the string to be evaluated to a string surrounded by one and two single quote marks, respectively.</P
></DD
><DT
CLASS="term"
><CODE
CLASS="literal"
> FUNCTION stripped (string_in IN VARCHAR2, char_in IN VARCHAR2)</CODE
><A
CLASS="indexterm"
NAME="ch05-idx-1000465-0"
></A
></DT
><DT
CLASS="term"
><CODE
CLASS="literal"
>RETURN VARCHAR2;</CODE
></DT
><DD
CLASS="listitem"
><P
CLASS="para"
>Strips a string of all instances of the specified characters. This function is a frontend to TRANSLATE.</P
></DD
><DT
CLASS="term"
><CODE
CLASS="literal"
> PROCEDURE show_string</CODE
><A
CLASS="indexterm"
NAME="ch05-idx-1000466-0"
></A
></DT
><DT
CLASS="term"
><CODE
CLASS="literal"
>   (string_in IN VARCHAR2, flags_in IN VARCHAR2 := c_all);</CODE
></DT
><DD
CLASS="listitem"
><P
CLASS="para"
>Displays the <SPAN
CLASS="acronym"
>ASCII</SPAN
> code and its associated character for each character in the specified string. You can request to view only certain kinds of characters.</P
></DD
><DT
CLASS="term"
><CODE
CLASS="literal"
> PROCEDURE show_table</CODE
><A
CLASS="indexterm"
NAME="ch05-idx-1000467-0"
></A
></DT
><DT
CLASS="term"
><CODE
CLASS="literal"
>   (start_code_in IN INTEGER := 1,</CODE
></DT
><DT
CLASS="term"
><CODE
CLASS="literal"
>    end_code_in IN INTEGER := NULL);</CODE
></DT
><DD
CLASS="listitem"
><P
CLASS="para"
>Displays the <SPAN
CLASS="acronym"
>ASCII</SPAN
> code and its associated character for all codes within the specified start-end range.</P
></DD
></DL
></DIV
></DIV
><DIV
CLASS="htmlnav"
><P
></P
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch05_05.htm"
TITLE="5.5 PLVcat: PL/SQL Code Cataloguing"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 5.5 PLVcat: PL/SQL Code Cataloguing"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="book"
HREF="index.htm"
TITLE="Advanced Oracle PL/SQL Programming with Packages"
><IMG
SRC="../gifs/txthome.gif"
ALT="Advanced Oracle PL/SQL Programming with Packages"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch05_07.htm#ch05-SECT-7.0.3"
TITLE="5.7 PLVcmt: Commit Processing"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 5.7 PLVcmt: Commit Processing"
BORDER="0"></A
></TD
></TR
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
>5.5 PLVcat: PL/SQL Code Cataloguing</TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="index"
HREF="index/idx_0.htm"
TITLE="Book Index"
><IMG
SRC="../gifs/index.gif"
ALT="Book Index"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
>5.7 PLVcmt: Commit Processing</TD
></TR
></TABLE
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"></DIV
><IMG
SRC="../gifs/smnavbar.gif"
USEMAP="#map"
BORDER="0"
ALT="The Oracle Library Navigation">

<P><font size="-1">
<a href="../copyrght.htm#copy">Copyright (c) 2000</a> O'Reilly & Associates. All rights reserved.
</font></P>

<MAP NAME="map">

<AREA SHAPE="RECT"
COORDS="0,0,35,30"
HREF="../index.htm"
ALT="Library Home">

<AREA SHAPE="RECT"
COORDS="40,0,95,30"
HREF="../prog2/index.htm"
ALT="Oracle PL/SQL Programming, 2nd. Ed.">

<AREA SHAPE="RECT"
COORDS="100,0,200,30"
HREF="../guide8i/index.htm"
ALT="Guide to Oracle 8i Features">

<AREA SHAPE="RECT"
COORDS="205,0,245,30"
HREF="../bipack/index.htm"
ALT="Oracle Built-in Packages">

<AREA SHAPE="RECT"
COORDS="250,0,320,30"
HREF="index.htm"
ALT="Advanced PL/SQL Programming with Packages">

<AREA SHAPE="RECT"
COORDS="325,0,420,30"
HREF="../webapp/index.htm"
ALT="Oracle Web Applications">

<AREA SHAPE="RECT"
COORDS="425,0,490,30"
HREF="../langpkt/index.htm"
ALT="Oracle PL/SQL Language Pocket Reference">

<AREA SHAPE="RECT"
COORDS="495,0,570,30"
HREF="../bipkt/index.htm"
ALT="Oracle PL/SQL Built-ins Pocket Reference">
</MAP>
</BODY
>
<!-- Mirrored from liso.cs.pusan.ac.kr by HTTrack Website Copier/3.x [XR&CO'2001] -->
</HTML
>
