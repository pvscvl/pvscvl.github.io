<HTML
><HEAD
><TITLE
>[Chapter 3] The PL/SQL Development Spiral</TITLE
><META
NAME="DC.Creator"
CONTENT="Steven Feuerstein"><META
NAME="DC.Date"
CONTENT="2000-04-29T18:22:55Z"><META
NAME="DC.Format"
CONTENT="text/html"
SCHEME="MIME"><META
NAME="DC.Identifier"
CONTENT="O'Reilly and Associates-1-56592-238-7E"><META
NAME="DC.Language"
CONTENT="en-US"><META
NAME="DC.Publisher"
CONTENT="O'Reilly &amp; Associates, Inc."><META
NAME="DC.Source"
CONTENT="1-56592-238-7E"
SCHEME="ISBN"><META
NAME="DC.Subject.Keyword"
CONTENT="PL/SQL SQL Oracle Packages"><META
NAME="DC.Title"
CONTENT="Advanced Oracle PL/SQL Programming with Packages"><META
NAME="DC.Type"
CONTENT="Text.Monograph"><META
NAME="generator"
CONTENT="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><LINK
REL="stylesheet"
TYPE="text/css"
HREF="../style/style1.css"><LINK
REV="made"
HREF="mailto:online-books@oreilly.com"
TITLE="Online Books Comments"><LINK
REL="up"
HREF="part01.htm"
TITLE="I. Working With Packages"><LINK
REL="prev"
HREF="ch02_11.htm"
TITLE="2.11 Simultaneous Construction of Multiple Packages"><LINK
REL="next"
HREF="ch03_02.htm"
TITLE="3.2 Adding Value"></HEAD>
<BODY><DIV CLASS="htmlnav"
><H1
><IMG
SRC="gifs/smbanner.gif"
ALT="Advanced Oracle PL/SQL Programming with Packages"
USEMAP="#srchmap"
BORDER="0"></H1
><MAP
NAME="srchmap"
><AREA
SHAPE="RECT"
COORDS="0,0,466,65"
HREF="index.htm"
ALT="Advanced Oracle PL/SQL Programming with Packages"><AREA
SHAPE="RECT"
COORDS="467,0,514,18"
HREF="jobjects/fsearch.htm"
ALT="Search this book"></MAP
><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch02_11.htm"
TITLE="2.11 Simultaneous Construction of Multiple Packages"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 2.11 Simultaneous Construction of Multiple Packages"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><SPAN
CLASS="NAVTITLE"
>Chapter 3</SPAN
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch03_02.htm"
TITLE="3.2 Adding Value"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 3.2 Adding Value"
BORDER="0"></A
></TD
></TR
></TABLE
>&nbsp;<HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"></DIV
><DIV
CLASS="chapter"
><H1
CLASS="chapter"
><A
CLASS="title"
NAME="plsql-adv-ch-3"
>3. The PL/SQL Development Spiral</A
></H1
><DIV
CLASS="htmltoc"
><P
><B
>Contents:</B
><BR><A
CLASS="sect1"
HREF="#ch03-24845"
TITLE="3.1 The Basic Problem"
>The Basic Problem</A
><BR><A
CLASS="sect1"
HREF="ch03_02.htm"
TITLE="3.2 Adding Value"
>Adding Value</A
><BR><A
CLASS="sect1"
HREF="ch03_03.htm"
TITLE="3.3 Supplying Backward Compatibility"
>Supplying Backward Compatibility</A
><BR><A
CLASS="sect1"
HREF="ch03_04.htm"
TITLE="3.4 Improving the User Interface"
>Improving the User Interface</A
><BR><A
CLASS="sect1"
HREF="ch03_05.htm"
TITLE="3.5 Rough Waters Ahead"
>Rough Waters Ahead</A
><BR><A
CLASS="sect1"
HREF="ch03_06.htm"
TITLE="3.6 Building a Structured Function"
>Building a Structured Function</A
><BR><A
CLASS="sect1"
HREF="ch03_07.htm"
TITLE="3.7 Handling Program Assumptions"
>Handling Program Assumptions</A
><BR><A
CLASS="sect1"
HREF="ch03_08.htm#ch03-SECT-8.1"
TITLE="3.8 Broadening the Scope"
>Broadening the Scope</A
><BR><A
CLASS="sect1"
HREF="ch03_09.htm"
TITLE="3.9 Considering Implementation Options"
>Considering Implementation Options</A
><BR><A
CLASS="sect1"
HREF="ch03_10.htm"
TITLE="3.10 Choosing the Best Performer"
>Choosing the Best Performer</A
><BR><A
CLASS="sect1"
HREF="ch03_11.htm"
TITLE="3.11 Don't Forget Backward Compatibility"
>Don't Forget Backward Compatibility</A
><BR><A
CLASS="sect1"
HREF="ch03_12.htm"
TITLE="3.12 Obliterating the Literals"
>Obliterating the Literals</A
><BR><A
CLASS="sect1"
HREF="ch03_13.htm"
TITLE="3.13 Glancing Backward, Looking Upward"
>Glancing Backward, Looking Upward</A
></P
><P
></P
></DIV
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="ch03-idx-999761-0"
></A
><A
CLASS="indexterm"
NAME="ch03-idx-999761-1"
></A
>How many times have you written a program, gotten it to compile first time around, and found that it had no bugs? Let me rephrase that question: have you ever written a program of more than, say, five lines that compiled and executed without bugs the first time around? Please send me your resume if the answer is yes. We need developers like you. I will make a confession: I have never once been able to get it right the first time. Perhaps I am just too impatient to walk through my code properly. I certainly haven't found the patience to discover the joys of computer-assisted software engineering. I am just a hacker at heart.</P
><P
CLASS="para"
>Even with lots of patience and prior analysis, however, I believe that it is wrong to set as a realizable objective to "get it right the first time." Software development should be seen largely as an iterative process. You get closer and closer to "perfection" as you take multiple passes at a solution. I like to think of this process as a spiral towards excellence in code. A spiral is different from a cycle, which is the term often used to portray the, well, "lifecycle" of development. A cycle or circle has you coming back around to where you were before. A spiral implies that when you come back around, you are at a higher place than you were on the previous spin. You are closer to the ideal. </P
><P
CLASS="para"
>There are many ways to apply this philosophical thinking to <SPAN
CLASS="acronym"
>PL/SQL</SPAN
> development. The single most important non-technical (i.e., not specific to computers) skill is that of problem-solving. The single most important technical skill to nurture as a programmer is that of code modularization. In this chapter, I explore the so-called spiral towards excellence in the context of an exercise in building a very basic and&nbsp;-- on the surface&nbsp;-- trivial <SPAN
CLASS="acronym"
>PL/SQL</SPAN
> utility.[<A
CLASS="footnote"
HREF="#ch03-pgfId-999336"
>1</A
>]</P
><BLOCKQUOTE
CLASS="footnote"
><DIV
CLASS="footnote"
><P
CLASS="para"
><A
CLASS="footnote"
NAME="ch03-pgfId-999336"
>[1]</A
> All of the code for this chapter is included on the companion disk in the file <I
CLASS="filename"
>spiral.all</I
>.</P
></DIV
></BLOCKQUOTE
><P
CLASS="para"
>Most of this chapter traces the evolution of a standalone function. Why, in a book about packages, am I showing you how to build this function? First, the lessons you will absorb from this chapter apply very directly to the more complex work on package construction. Second, the best solution to the problem addressed by my function turns out to be a package!</P
><DIV
CLASS="sect1"
><H2
CLASS="sect1"
><A
CLASS="title"
NAME="ch03-24845"
>3.1 The Basic Problem</A
></H2
><P
CLASS="para"
>Let's suppose that I am writing an application that does lots of string manipulation. One action that I find myself coding again and again is the duplication of a string. In other words, I need to convert "abc" to "abcabc". I write this:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>v_new_string := v_old_string || v_old_string;</PRE
></BLOCKQUOTE
><P
CLASS="para"
>and then I write this:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>v_comp_name := v_comp_name || v_comp_name;</PRE
></BLOCKQUOTE
><P
CLASS="para"
>and I sense a pattern.[<A
CLASS="footnote"
HREF="#ch03-pgfId-999345"
>2</A
>]</P
><BLOCKQUOTE
CLASS="footnote"
><DIV
CLASS="footnote"
><P
CLASS="para"
><A
CLASS="footnote"
NAME="ch03-pgfId-999345"
>[2]</A
> You are not allowed to wonder why I would need to do something like this. I am not obligated to construct a real-life application that does this. You just have to take my word for it. </P
></DIV
></BLOCKQUOTE
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="ch03-idx-999769-0"
></A
>Whenever I notice a repetition in my coding, I instinctively put on the brakes and examine more closely. A pattern implies that I can generalize to a formula. I can then encapsulate my formula into a function or procedure. I can then write the formula once and apply it often. This cuts down on my typing and improves my ability to maintain and even enhance my code.</P
><P
CLASS="para"
>In this case, the pattern is clear: I want to double the supplied string and return it to another <SPAN
CLASS="acronym"
>PL/SQL</SPAN
> variable. I want, in other words, to create a function. So in very quick order I write the <I
CLASS="function"
>twice</I
> function as shown in <A
CLASS="xref"
HREF="ch03_01.htm"
>Example 3.1</A
>:</P
><DIV
CLASS="example"
><H4
CLASS="example"
><A
CLASS="title"
NAME="ch03-33777"
>Example 3.1: The First Version of the twice Function </A
></H4
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>CREATE OR REPLACE FUNCTION twice (string_in IN VARCHAR2)
RETURN VARCHAR2
IS
BEGIN
   RETURN string_in || string_in;
END twice;
/</PRE
></BLOCKQUOTE
></DIV
><P
CLASS="para"
>With <I
CLASS="function"
>twice</I
> created in the database, I can replace those two explicit concatenations with these calls to <I
CLASS="function"
>twice</I
>:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>v_new_string := twice (v_old_string);
v_comp_name := twice (v_comp_name);</PRE
></BLOCKQUOTE
><P
CLASS="para"
>I have added another fine implement to my toolbox and I continue on my merry, programming way. Lo and behold, just as I would have predicted, I soon run into the need for <I
CLASS="function"
>twice</I
> again. This time, I want to double-up the description of a product type, but I also need to make sure that it is in upper case, so I type:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>v_prodtype:= twice (UPPER (v_prodtype));</PRE
></BLOCKQUOTE
><P
CLASS="para"
>So far so very good. I code my little heart out until I run into a new variation on my <I
CLASS="function"
>twice</I
> theme: I want to double the string, but this time I need to uppercase the first instance and lowercase the second. It doesn't take too lengthy an analysis to conclude that the <I
CLASS="function"
>twice</I
> function cannot handle this requirement.</P
><P
CLASS="para"
>I now face a crucial and common modularization dilemma: should I try to enhance <KBD
CLASS="command"
>twice</KBD
> to handle this new twist or should I leave it as is and build yet another function for UPPER-lower? A part of me would like to tell you that this isn't really much of a dilemma, that you should always widen the scope of your existing program. That would be the most elegant solution, but it would also be irresponsible advice.</P
><P
CLASS="para"
>We write programs so people can use them, not so we can marvel at their elegance. There are definitely situations in which it makes more sense to leave well enough alone and start with a brand-new build. I am not yet ready to give up on <I
CLASS="function"
>twice</I
>, for several reasons:</P
><UL
CLASS="itemizedlist"
><LI
CLASS="listitem"
><P
CLASS="para"
>The point of this chapter is to step you upwards through the spiral. Abandoning the function now would be to start a <EM
CLASS="emphasis"
>new</EM
> spiral, not climb this one.</P
></LI
><LI
CLASS="listitem"
><P
CLASS="para"
>The <I
CLASS="function"
>twice</I
> function is still very basic and unexplored from the standpoint of scope expansion. It is at least worth trying to incorporate this new requirement. If it proves unnatural, then the effort ought to be abandoned.</P
></LI
></UL
><P
CLASS="para"
>Once I have made this analysis, I am ready to revamp the <I
CLASS="function"
>twice</I
> function in order to add value for the end user (currently myself, but in time others as well).</P
></DIV
></DIV
><DIV
CLASS="htmlnav"
><P
></P
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch02_11.htm"
TITLE="2.11 Simultaneous Construction of Multiple Packages"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 2.11 Simultaneous Construction of Multiple Packages"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="book"
HREF="index.htm"
TITLE="Advanced Oracle PL/SQL Programming with Packages"
><IMG
SRC="../gifs/txthome.gif"
ALT="Advanced Oracle PL/SQL Programming with Packages"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch03_02.htm"
TITLE="3.2 Adding Value"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 3.2 Adding Value"
BORDER="0"></A
></TD
></TR
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
>2.11 Simultaneous Construction of Multiple Packages</TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="index"
HREF="index/idx_0.htm"
TITLE="Book Index"
><IMG
SRC="../gifs/index.gif"
ALT="Book Index"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
>3.2 Adding Value</TD
></TR
></TABLE
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"></DIV
><IMG
SRC="../gifs/smnavbar.gif"
USEMAP="#map"
BORDER="0"
ALT="The Oracle Library Navigation">

<P><font size="-1">
<a href="../copyrght.htm#copy">Copyright (c) 2000</a> O'Reilly & Associates. All rights reserved.
</font></P>

<MAP NAME="map">

<AREA SHAPE="RECT"
COORDS="0,0,35,30"
HREF="../index.htm"
ALT="Library Home">

<AREA SHAPE="RECT"
COORDS="40,0,95,30"
HREF="../prog2/index.htm"
ALT="Oracle PL/SQL Programming, 2nd. Ed.">

<AREA SHAPE="RECT"
COORDS="100,0,200,30"
HREF="../guide8i/index.htm"
ALT="Guide to Oracle 8i Features">

<AREA SHAPE="RECT"
COORDS="205,0,245,30"
HREF="../bipack/index.htm"
ALT="Oracle Built-in Packages">

<AREA SHAPE="RECT"
COORDS="250,0,320,30"
HREF="index.htm"
ALT="Advanced PL/SQL Programming with Packages">

<AREA SHAPE="RECT"
COORDS="325,0,420,30"
HREF="../webapp/index.htm"
ALT="Oracle Web Applications">

<AREA SHAPE="RECT"
COORDS="425,0,490,30"
HREF="../langpkt/index.htm"
ALT="Oracle PL/SQL Language Pocket Reference">

<AREA SHAPE="RECT"
COORDS="495,0,570,30"
HREF="../bipkt/index.htm"
ALT="Oracle PL/SQL Built-ins Pocket Reference">
</MAP>
</BODY
>
<!-- Mirrored from liso.cs.pusan.ac.kr by HTTrack Website Copier/3.x [XR&CO'2001] -->
</HTML
>
