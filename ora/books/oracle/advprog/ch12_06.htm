<HTML
><HEAD
><TITLE
>[Chapter 12] 12.6 Reading From the Source</TITLE
><META
NAME="DC.Creator"
CONTENT="Steven Feuerstein"><META
NAME="DC.Date"
CONTENT="2000-04-29T18:27:54Z"><META
NAME="DC.Format"
CONTENT="text/html"
SCHEME="MIME"><META
NAME="DC.Identifier"
CONTENT="O'Reilly and Associates-1-56592-238-7E"><META
NAME="DC.Language"
CONTENT="en-US"><META
NAME="DC.Publisher"
CONTENT="O'Reilly &amp; Associates, Inc."><META
NAME="DC.Source"
CONTENT="1-56592-238-7E"
SCHEME="ISBN"><META
NAME="DC.Subject.Keyword"
CONTENT="PL/SQL SQL Oracle Packages"><META
NAME="DC.Title"
CONTENT="Advanced Oracle PL/SQL Programming with Packages"><META
NAME="DC.Type"
CONTENT="Text.Monograph"><META
NAME="generator"
CONTENT="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><LINK
REL="stylesheet"
TYPE="text/css"
HREF="../style/style1.css"><LINK
REV="made"
HREF="mailto:online-books@oreilly.com"
TITLE="Online Books Comments"><LINK
REL="up"
HREF="ch12_01.htm"
TITLE="12. PLVio: Reading and Writing PL/SQL Source Code"><LINK
REL="prev"
HREF="ch12_05.htm"
TITLE="12.5 Managing the Target Repository"><LINK
REL="next"
HREF="ch12_07.htm"
TITLE="12.7 Writing to the Target"></HEAD>
<BODY><DIV CLASS="htmlnav"
><H1
><IMG
SRC="gifs/smbanner.gif"
ALT="Advanced Oracle PL/SQL Programming with Packages"
USEMAP="#srchmap"
BORDER="0"></H1
><MAP
NAME="srchmap"
><AREA
SHAPE="RECT"
COORDS="0,0,466,65"
HREF="index.htm"
ALT="Advanced Oracle PL/SQL Programming with Packages"><AREA
SHAPE="RECT"
COORDS="467,0,514,18"
HREF="jobjects/fsearch.htm"
ALT="Search this book"></MAP
><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch12_05.htm"
TITLE="12.5 Managing the Target Repository"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 12.5 Managing the Target Repository"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><SPAN
CLASS="NAVTITLE"
><A
CLASS="chapter"
REL="up"
HREF="ch12_01.htm"
TITLE="12. PLVio: Reading and Writing PL/SQL Source Code"
>Chapter 12<BR>PLVio: Reading and Writing PL/SQL Source Code</A
></SPAN
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch12_07.htm"
TITLE="12.7 Writing to the Target"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 12.7 Writing to the Target"
BORDER="0"></A
></TD
></TR
></TABLE
>&nbsp;<HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"></DIV
><DIV
CLASS="sect1"
><H2
CLASS="sect1"
><A
CLASS="title"
NAME="ch12-30402"
>12.6 Reading From the Source</A
></H2
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="ch12-idx-998734-0"
></A
><A
CLASS="indexterm"
NAME="ch12-idx-998734-1"
></A
><A
CLASS="indexterm"
NAME="ch12-idx-998734-2"
></A
>The <KBD
CLASS="command"
>PLVio.get_line</KBD
> procedure is the core program for reading from the source. This header for this program is:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>PROCEDURE get_line
   (line_inout IN OUT line_type,
    curr_line#_in IN INTEGER := NULL);</PRE
></BLOCKQUOTE
><P
CLASS="para"
>The first argument, <KBD
CLASS="command"
>line_inout</KBD
>, is a record of type <KBD
CLASS="command"
>line_type</KBD
> (defined in the PLVio specification). The second argument, <KBD
CLASS="command"
>curr_line#</KBD
>, provides a current line number; if that number is not NULL, it will be used to increment the <KBD
CLASS="command"
>line#</KBD
> value found in the <KBD
CLASS="command"
>line_inout</KBD
> record. </P
><P
CLASS="para"
>The record contains all the information about a line necessary either for PLVio activity or other actions on a line of text. The definition of the record TYPE is:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>TYPE line_type IS RECORD
   (text VARCHAR2(2000) := NULL,
    len INTEGER := NULL,
    pos INTEGER := 1,
    line INTEGER := 0, /* line # in original */
    line# INTEGER := 0,	/* line # for new */
    is_blank BOOLEAN := FALSE,
    eof BOOLEAN := FALSE);</PRE
></BLOCKQUOTE
><P
CLASS="para"
>The following table explains the different fields of a <KBD
CLASS="command"
>line_type</KBD
> record:</P
><TABLE
CLASS="informaltable"
BORDER="1"
CELLPADDING="3"
><TBODY
CLASS="tbody"
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
><CODE
CLASS="literal"
>text</CODE
></P
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>The line of text.</P
></TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
><CODE
CLASS="literal"
>len</CODE
></P
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>The length of the line of text.</P
></TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
><CODE
CLASS="literal"
>pos</CODE
></P
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>The current position of a scan through this line.</P
></TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
><CODE
CLASS="literal"
>line</CODE
></P
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>The line number associated with this text in the source.</P
></TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
><CODE
CLASS="literal"
>line#</CODE
></P
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>The line number associated with this text in the target.</P
></TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
><CODE
CLASS="literal"
>is_blank</CODE
></P
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>TRUE if the text RTRIMS to NULL.</P
></TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
><CODE
CLASS="literal"
>eof</CODE
></P
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>TRUE if no line was placed into the record.</P
></TD
></TR
></TBODY
></TABLE
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch12-SECT-6.1"
>12.6.1 Main Steps of get_line</A
></H3
><P
CLASS="para"
>The <KBD
CLASS="command"
>get_line</KBD
> procedure has two main steps: </P
><OL
CLASS="orderedlist"
><LI
CLASS="listitem"
><P
CLASS="para"
><EM
CLASS="emphasis"
>Read a line from the source repository.</EM
> If reading from a database table, <KBD
CLASS="command"
>get_line</KBD
> uses the DBMS_SQL builtin package to fetch the next row and read the text and line number from the retrieved data. If reading from a file, <KBD
CLASS="command"
>get_line</KBD
> calls the <KBD
CLASS="command"
>PLVfile.get_line</KBD
> procedure. If reading from a string, <KBD
CLASS="command"
>get_line</KBD
> finds the next newline character and uses SUBSTR to extract the desired characters.</P
></LI
><LI
CLASS="listitem"
><P
CLASS="para"
><EM
CLASS="emphasis"
>Massage the data retrieved from the repository so that the values of all record fields are set properly.</EM
> Assuming that data was found (the <KBD
CLASS="command"
>eof</KBD
> field is not set to TRUE), then the following actions are taken: replace newline characters with single spaces, replace tab characters with three spaces, increment the line number (using the second argument in the call to <KBD
CLASS="command"
>get_line</KBD
>, if provided), set the <KBD
CLASS="command"
>pos</KBD
> field to 1, set <KBD
CLASS="command"
>is_blank</KBD
> to TRUE if the string is composed solely of blanks, and compute the length of the line of text.</P
></LI
></OL
><P
CLASS="para"
>When these two steps are completed, the newly populated record is returned to the calling program.</P
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch12-SECT-6.2"
>12.6.2 Using get_line</A
></H3
><P
CLASS="para"
>To give you an idea of how you can put <KBD
CLASS="command"
>get_line</KBD
> to use, consider the SQL*Plus script shown below. Stored in file <KBD
CLASS="command"
>inline2.sql</KBD
>, this program displays all the lines of code in a given program that contain the specified string.</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>DECLARE
   line PLVio.line_type;
BEGIN
   PLVobj.setcurr ('&amp;1');
   PLVio.asrc (where_in =&gt; 'INSTR (text, ''&amp;2'') &gt; 0');
   LOOP
      PLVio.get_line (line);
      EXIT WHEN line.eof;
      p.l (line.text);
   END LOOP;
   PLVio.closesrc;
END;
/   </PRE
></BLOCKQUOTE
><P
CLASS="para"
>I call <KBD
CLASS="command"
>PLVobj.setcurr</KBD
> to set the current object to the requested program. I then point the source repository to ALL_SOURCE and add an element to the WHERE clause that will find only those lines in which the <SPAN
CLASS="acronym"
>INSTR</SPAN
> on the second argument returns a nonzero location. Now I am all set to loop through the rows identified by this WHERE clause. I exit when the <KBD
CLASS="command"
>eof</KBD
> field is set to TRUE; otherwise, I display the line and then call <KBD
CLASS="command"
>get_line</KBD
> again. Finally, I close the source when I am done, freeing up the memory used to read through ALL_SOURCE.</P
><P
CLASS="para"
>Here is an example of output from the <KBD
CLASS="command"
>inline2</KBD
> program:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>SQL&gt;  start inline2 b:PLVio SUBSTR
         (SUBSTR (srcrep.select_sql, 1, loc-1) ||
          SUBSTR (srcrep.select_sql, loc));
             SUBSTR (srcrep.where_clause, 1, loc-1) ||
             SUBSTR (srcrep.where_clause, loc2+cmnt_len-1);
             SUBSTR
          SUBSTR
      RETURN SUBSTR (line_in.text, pos_in);</PRE
></BLOCKQUOTE
><P
CLASS="para"
>You might compare the implementation of this functionality in <KBD
CLASS="command"
>inline2.sql</KBD
> with the approach taken in the <KBD
CLASS="command"
>inline.sql</KBD
> script. What are the differences between the two implementations? Which would you prefer to use and maintain?<A
CLASS="indexterm"
NAME="ch12-idx-998735-0"
></A
><A
CLASS="indexterm"
NAME="ch12-idx-998735-1"
></A
><A
CLASS="indexterm"
NAME="ch12-idx-998735-2"
></A
></P
></DIV
></DIV
><DIV
CLASS="htmlnav"
><P
></P
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch12_05.htm"
TITLE="12.5 Managing the Target Repository"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 12.5 Managing the Target Repository"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="book"
HREF="index.htm"
TITLE="Advanced Oracle PL/SQL Programming with Packages"
><IMG
SRC="../gifs/txthome.gif"
ALT="Advanced Oracle PL/SQL Programming with Packages"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch12_07.htm"
TITLE="12.7 Writing to the Target"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 12.7 Writing to the Target"
BORDER="0"></A
></TD
></TR
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
>12.5 Managing the Target Repository</TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="index"
HREF="index/idx_0.htm"
TITLE="Book Index"
><IMG
SRC="../gifs/index.gif"
ALT="Book Index"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
>12.7 Writing to the Target</TD
></TR
></TABLE
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"></DIV
><IMG
SRC="../gifs/smnavbar.gif"
USEMAP="#map"
BORDER="0"
ALT="The Oracle Library Navigation">

<P><font size="-1">
<a href="../copyrght.htm#copy">Copyright (c) 2000</a> O'Reilly & Associates. All rights reserved.
</font></P>

<MAP NAME="map">

<AREA SHAPE="RECT"
COORDS="0,0,35,30"
HREF="../index.htm"
ALT="Library Home">

<AREA SHAPE="RECT"
COORDS="40,0,95,30"
HREF="../prog2/index.htm"
ALT="Oracle PL/SQL Programming, 2nd. Ed.">

<AREA SHAPE="RECT"
COORDS="100,0,200,30"
HREF="../guide8i/index.htm"
ALT="Guide to Oracle 8i Features">

<AREA SHAPE="RECT"
COORDS="205,0,245,30"
HREF="../bipack/index.htm"
ALT="Oracle Built-in Packages">

<AREA SHAPE="RECT"
COORDS="250,0,320,30"
HREF="index.htm"
ALT="Advanced PL/SQL Programming with Packages">

<AREA SHAPE="RECT"
COORDS="325,0,420,30"
HREF="../webapp/index.htm"
ALT="Oracle Web Applications">

<AREA SHAPE="RECT"
COORDS="425,0,490,30"
HREF="../langpkt/index.htm"
ALT="Oracle PL/SQL Language Pocket Reference">

<AREA SHAPE="RECT"
COORDS="495,0,570,30"
HREF="../bipkt/index.htm"
ALT="Oracle PL/SQL Built-ins Pocket Reference">
</MAP>
</BODY
>
<!-- Mirrored from liso.cs.pusan.ac.kr by HTTrack Website Copier/3.x [XR&CO'2001] -->
</HTML
>
