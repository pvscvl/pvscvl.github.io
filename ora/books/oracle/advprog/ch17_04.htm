<HTML
><HEAD
><TITLE
>[Chapter 17] 17.4 Using PLVhlp</TITLE
><META
NAME="DC.Creator"
CONTENT="Steven Feuerstein"><META
NAME="DC.Date"
CONTENT="2000-04-29T18:29:58Z"><META
NAME="DC.Format"
CONTENT="text/html"
SCHEME="MIME"><META
NAME="DC.Identifier"
CONTENT="O'Reilly and Associates-1-56592-238-7E"><META
NAME="DC.Language"
CONTENT="en-US"><META
NAME="DC.Publisher"
CONTENT="O'Reilly &amp; Associates, Inc."><META
NAME="DC.Source"
CONTENT="1-56592-238-7E"
SCHEME="ISBN"><META
NAME="DC.Subject.Keyword"
CONTENT="PL/SQL SQL Oracle Packages"><META
NAME="DC.Title"
CONTENT="Advanced Oracle PL/SQL Programming with Packages"><META
NAME="DC.Type"
CONTENT="Text.Monograph"><META
NAME="generator"
CONTENT="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><LINK
REL="stylesheet"
TYPE="text/css"
HREF="../style/style1.css"><LINK
REV="made"
HREF="mailto:online-books@oreilly.com"
TITLE="Online Books Comments"><LINK
REL="up"
HREF="ch17_01.htm"
TITLE="17. PLVhlp: Online Help for PL/SQL Programs"><LINK
REL="prev"
HREF="ch17_03.htm"
TITLE='17.3 What Is "Online Help" for Stored Code?'><LINK
REL="next"
HREF="ch17_05.htm#ch17-SECT-5.2"
TITLE="17.5 Implementing PLVhlp"></HEAD>
<BODY><DIV CLASS="htmlnav"
><H1
><IMG
SRC="gifs/smbanner.gif"
ALT="Advanced Oracle PL/SQL Programming with Packages"
USEMAP="#srchmap"
BORDER="0"></H1
><MAP
NAME="srchmap"
><AREA
SHAPE="RECT"
COORDS="0,0,466,65"
HREF="index.htm"
ALT="Advanced Oracle PL/SQL Programming with Packages"><AREA
SHAPE="RECT"
COORDS="467,0,514,18"
HREF="jobjects/fsearch.htm"
ALT="Search this book"></MAP
><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch17_03.htm"
TITLE='17.3 What Is "Online Help" for Stored Code?'
><IMG
SRC="../gifs/txtpreva.gif"
ALT='Previous: 17.3 What Is "Online Help" for Stored Code?'
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><SPAN
CLASS="NAVTITLE"
><A
CLASS="chapter"
REL="up"
HREF="ch17_01.htm"
TITLE="17. PLVhlp: Online Help for PL/SQL Programs"
>Chapter 17<BR>PLVhlp: Online Help for PL/SQL Programs</A
></SPAN
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch17_05.htm#ch17-SECT-5.2"
TITLE="17.5 Implementing PLVhlp"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 17.5 Implementing PLVhlp"
BORDER="0"></A
></TD
></TR
></TABLE
>&nbsp;<HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"></DIV
><DIV
CLASS="sect1"
><H2
CLASS="sect1"
><A
CLASS="title"
NAME="ch17-11797"
>17.4 Using PLVhlp</A
></H2
><P
CLASS="para"
>There are two aspects to using the PLVhlp package:</P
><OL
CLASS="orderedlist"
><LI
CLASS="listitem"
><P
CLASS="para"
>Display help text using the <KBD
CLASS="command"
>show</KBD
> and <KBD
CLASS="command"
>more</KBD
> procedures. In the PLVhlp architecture, help text is stored with the program unit it documents in specially formatted comment areas. The <KBD
CLASS="command"
>show</KBD
> and <KBD
CLASS="command"
>more</KBD
> procedures then access that text. You can also fine-tune the display of help text by setting the size of a page of text.</P
></LI
><LI
CLASS="listitem"
><P
CLASS="para"
>Create help text to be inserted into stored code for use as online help text. For more details on how to set up this help text, see the sections "Creating Help Text" and "Implementing PLVhlp."</P
></LI
></OL
><P
CLASS="para"
> These aspects are covered in the following sections.</P
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch17-SECT-4.1"
>17.4.1 Showing the Help Text</A
></H3
><P
CLASS="para"
>The <A
CLASS="indexterm"
NAME="ch17-idx-998373-0"
></A
><A
CLASS="indexterm"
NAME="ch17-idx-998373-1"
></A
>show program initiates the display of help text on a topic. Its specification is as follows:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>PROCEDURE show (context_in IN VARCHAR2, part_in IN VARCHAR2 := c_main);</PRE
></BLOCKQUOTE
><P
CLASS="para"
>where <KBD
CLASS="command"
>context_in</KBD
> is the context or program unit that contains the text and <KBD
CLASS="command"
>part_in</KBD
> is the specific topic to be displayed in response to this request. The following call to <KBD
CLASS="command"
>show</KBD
>, for example, requests that the help text in the PLVprs package specification covering the topic "examples" be displayed.</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>SQL&gt; exec PLVhlp.show ('s:PLVprs', 'examples');</PRE
></BLOCKQUOTE
><P
CLASS="para"
>PLVhlp predefines two constants for commonly used help text topics: top-level or main help and examples help. The last call to <KBD
CLASS="command"
>PLVhlp.show</KBD
> could be rewritten using one of those constants as follows:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>SQL&gt; exec PLVhlp.show ('s:PLVprs', PLVhlp.c_examples);</PRE
></BLOCKQUOTE
><P
CLASS="para"
>You might even consider adding constants to the PLVhlp package to make it easier to create and access consistently named areas of help text.</P
><P
CLASS="para"
>The <A
CLASS="indexterm"
NAME="ch17-idx-998374-0"
></A
>more procedure's specification is even simpler than that of show:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>PROCEDURE more;</PRE
></BLOCKQUOTE
><P
CLASS="para"
>This procedure simply requests that the next page of text for the current help topic be displayed. If there is no more help text or if you have not previously called <KBD
CLASS="command"
>PLVhlp.show</KBD
>, <KBD
CLASS="command"
>more</KBD
> displays the following message:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>SQL&gt; exec PLVhlp.more
No more help available...</PRE
></BLOCKQUOTE
><P
CLASS="para"
>PL/Vision also offers some SQL*Plus scripts to make it easier to request help. These scripts are <KBD
CLASS="command"
>help.sql</KBD
> and <KBD
CLASS="command"
>more.sql</KBD
>. The following lines compare the different approaches using <SPAN
CLASS="acronym"
>PL/SQL</SPAN
> program execution and SQL*Plus script execution.</P
><P
CLASS="para"
>Instead of typing:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>SQL&gt; exec PLV.help</PRE
></BLOCKQUOTE
><P
CLASS="para"
>you can simply enter:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>SQL&gt; @help plv</PRE
></BLOCKQUOTE
><P
CLASS="para"
>And instead of typing:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>SQL&gt; exec more</PRE
></BLOCKQUOTE
><P
CLASS="para"
>you can simply enter:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>SQL&gt; @more</PRE
></BLOCKQUOTE
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch17-SECT-4.2"
>17.4.2 Setting the Page Size</A
></H3
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="ch17-idx-998375-0"
></A
><A
CLASS="indexterm"
NAME="ch17-idx-998375-1"
></A
><A
CLASS="indexterm"
NAME="ch17-idx-998375-2"
></A
>One of the more interesting aspects of PLVhlp is that it allows developers to see limited amounts of text at a time (a single page). This makes the reading of help text much less frantic; users do not have to feel panicky about pages of text scrolling past their eyes.</P
><P
CLASS="para"
>The default page size is 25 lines, so that a page of text fits comfortably on a monitor. You can change this value by calling the <KBD
CLASS="command"
>set_pagesize</KBD
><A
CLASS="indexterm"
NAME="ch17-idx-998376-0"
></A
> procedure, whose header is shown below:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>PROCEDURE set_pagesize (pagesize_in IN NUMBER);</PRE
></BLOCKQUOTE
><P
CLASS="para"
>In the following SQL*Plus session, for example, I move the pagesize up to 60, since SQL*Plus in Windows supports vertical scrolling:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>SQL&gt; exec PLVhlp.set_pagesize(60);</PRE
></BLOCKQUOTE
><P
CLASS="para"
>You can also find out the current size of the page by calling the <KBD
CLASS="command"
>pagesize</KBD
><A
CLASS="indexterm"
NAME="ch17-idx-998377-0"
></A
> function. The following little utility (not a part of PLVhlp) makes sure, for instance, that the <KBD
CLASS="command"
>pagesize</KBD
> is no larger than the default:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>PROCEDURE <A
CLASS="indexterm"
NAME="ch17-idx-998378-0"
></A
>limit_ps (size_in IN INTEGER := 25)
IS
BEGIN
   IF PLVhlp.pagesize &gt; size_in
   THEN
      PLVhlp.set_pagesize (size_in);
   END IF;
END;</PRE
></BLOCKQUOTE
><P
CLASS="para"
>The <KBD
CLASS="command"
>set_pagesize</KBD
> program is available to end users of PLVhlp. It can also be used by developers who construct help environments for <SPAN
CLASS="acronym"
>PL/SQL</SPAN
> development to arrange a comfortable viewing area.</P
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch17-SECT-4.3"
>17.4.3 Creating Help Text</A
></H3
><P
CLASS="para"
>A user cannot access help text unless you place that text inside the appropriate program unit. PLVhlp reads its text from the ALL_SOURCE data dictionary; the text is, in other words, stored with the program about which help is needed (the implementational aspects of this technique are explored later in the chapter).</P
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="ch17-idx-998379-0"
></A
>To give you an idea of the format of this help text, consider the following fragment of a package specification:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>PACKAGE call
IS
   PROCEDURE maintain;
/*ABOUT
The maintain procedure maintains the current
set of calls in the system.
ABOUT*/
END call;</PRE
></BLOCKQUOTE
><P
CLASS="para"
>The strings <KBD
CLASS="command"
>/*ABOUT</KBD
> and <KBD
CLASS="command"
>ABOUT*/</KBD
> follow the standard for the starting and ending strings, respectively, of a block of text that will be retrieved by this call to <KBD
CLASS="command"
>PLVhlp.show</KBD
>:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>SQL&gt; exec PLVhlp.show ('s:call', 'about');</PRE
></BLOCKQUOTE
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="ch17-idx-998381-0"
></A
>PLVhlp provides two functions to help you follow the standard for help text comment blocks: <KBD
CLASS="command"
>help_start</KBD
><A
CLASS="indexterm"
NAME="ch17-idx-998380-0"
></A
><A
CLASS="indexterm"
NAME="ch17-idx-998380-1"
></A
> and <KBD
CLASS="command"
>help_end</KBD
>. With both functions, you provide the keyword for text block and receive in return the strings you need to wrap around your help text.</P
><P
CLASS="para"
>The PLVgen package uses these two functions to generate a block of help text you can then cut and paste into your own code. Here is the implementation of the <KBD
CLASS="command"
>PLVgen.helptext</KBD
><A
CLASS="indexterm"
NAME="ch17-idx-998382-0"
></A
> procedure:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>   PROCEDURE put_help 
      (context_in IN VARCHAR2, indent_in IN INTEGER := 0)
   IS
   BEGIN
      IF using_hlp
      THEN
         put_line (PLVhlp.help_start (context_in), indent_in);
         put_line ('Add help text here...', indent_in);
         put_line 
            (PLVhlp.help_end (context_in), indent_in, c_after);
      END IF;
   END;</PRE
></BLOCKQUOTE
><P
CLASS="para"
>and here is an example of the code it generates:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>SQL&gt; exec PLVgen.helptext ('constraints');
   /*CONSTRAINTS
   Add help text here...
   CONSTRAINTS*/</PRE
></BLOCKQUOTE
><P
CLASS="para"
>You can also embed <A
CLASS="indexterm"
NAME="ch17-idx-998383-0"
></A
>blank lines in your help text, which is useful in making text easy to read. If you CREATE OR REPLACE programs with these blank lines in SQL*Plus, however, those lines will be discarded before saving the source code to the database. You can avoid this white space destruction by either not using SQL*Plus or by using a "line separator" in place of a truly blank line. For more information about the line separator feature in PL/Vision, see <A
CLASS="xref"
HREF="ch07_01.htm"
>Chapter 7, <CITE
CLASS="chapter"
>p: A Powerful Substitute for DBMS_OUTPUT</CITE
></A
>.</P
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch17-SECT-4.4"
>17.4.4 A PLVhlp Tutorial</A
></H3
><P
CLASS="para"
>The following scenario illustrates how to use these different elements to obtain help about the PLVprs package (PL/Vision PaRSe):</P
><P
CLASS="para"
><EM
CLASS="emphasis"
>Step 1.</EM
> Before I try to access the help text, I build a few components to make it easier to request the help. First, I add a help program to my PLVprs package specification and body as follows: </P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>PACKAGE PLVprs
IS
   ... other elements ...
   PROCEDURE help;
END PLVprs;
PACKAGE BODY PLVprs
IS
   ... other elements ...</PRE
></BLOCKQUOTE
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>   PROCEDURE help IS
   BEGIN</PRE
></BLOCKQUOTE
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>      PLVhlp.show ('s:PLVprs');
   END help;
END PLVprs;</PRE
></BLOCKQUOTE
><P
CLASS="para"
>This provides a layer over the help package that allows me to ask for help within the context of the PLVprs package. </P
><P
CLASS="para"
><EM
CLASS="emphasis"
>Step 2.</EM
> I also create a SQL*Plus script (<KBD
CLASS="command"
>more.sql</KBD
>) that allows me to call the <KBD
CLASS="command"
>PLVhlp.more</KBD
> procedure with a minimum of typing:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>SET FEEDBACK OFF
exec PLVhlp.more;</PRE
></BLOCKQUOTE
><P
CLASS="para"
><EM
CLASS="emphasis"
>Step 3.</EM
> I start up a SQL*Plus session, set the <KBD
CLASS="command"
>pagesize</KBD
> to 10, and access the help text for the parsing package.</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>SQL&gt; exec PLVhlp.set_pagesize(10);
SQL&gt; exec PLVprs.help
Help for PLVPRS

Overview: PLVprs provides a variety of PaRSing programs. It
   performs parsing for &quot;generic&quot; strings, but also performs
   parsing specifically for &quot;PL/SQL strings&quot;, ie, lines of
   code from a PL/SQL program.

Programs in PLVprs:

   next_atom_loc - Returns location of next atomic.
...more...</PRE
></BLOCKQUOTE
><P
CLASS="para"
>The first page of text has been displayed; the "...more..." indicates that there is more text to be viewed on this topic.</P
><P
CLASS="para"
><EM
CLASS="emphasis"
>Step 4.</EM
> So I will ask for more help:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>SQL&gt; @more
Help for PLVPRS
   display_atomics - Displays distinct atomics in string.
   nth_atomic - Returns Nth atomic in string.
   number_of_atomics - Returns number of atomics in string.
   numinstr - Returns number of occurrences of substring in string.

   string - Returns string's atomics into a PL/SQL table.
   plsql_string - Returns PL/SQL code atomics into PL/SQL table.

   wrap - wraps a long string into a PL/SQL table.
   wrapped_string - wraps a long string into a string
...more...</PRE
></BLOCKQUOTE
><P
CLASS="para"
>And even more help....</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>SQL&gt; @more
Help for PLVPRS
     with carriage returns embedded.
   display_wrap - displays the wrapped string</PRE
></BLOCKQUOTE
><P
CLASS="para"
>Notice that I no longer receive the "...more..." indicator. Now when I ask for more help, I am told that the current topic is depleted:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>SQL&gt; @more
No more help available...</PRE
></BLOCKQUOTE
><DIV
CLASS="sect3"
><H4
CLASS="sect3"
><A
CLASS="title"
NAME="ch17-SECT-4.4.1"
>17.4.4.1 Getting specialized help</A
></H4
><P
CLASS="para"
>What I've shown so far is general help for the PLVprs package. I can also provide more specialized areas of help. My PLVlex package, for example, contains the following help procedure:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>PROCEDURE examples IS
BEGIN
   PLVhlp.show ('s:PLVprs', PLVhlp.c_examples);
END examples;</PRE
></BLOCKQUOTE
><P
CLASS="para"
>With this procedure in place I can now also ask for information about examples for the PLVlex package:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>SQL&gt; exec PLVlex.examples
Help for PLVLEX
Examples
</PRE
></BLOCKQUOTE
><P
CLASS="para"
>Here is a call to get_next_token from PLVcase, which UPPER-lower cases PL/SQL programs:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>   LOOP
      PLVlex.get_next_token
        (text, curr_pos, token, next_pos, FALSE, text_len, TRUE);

      EXIT WHEN v_token IS NULL OR   line_in.pos &gt; line_in.len;
   END LOOP;

The FALSE indicates that I do not want to skip over spaces. This
maintains the program's indentation. The TRUE indicates that I want
qualified names (X.Y.Z) to be returned as one token.</PRE
></BLOCKQUOTE
><P
CLASS="para"
>You are not restricted to creating help topics of "main" and "examples." You can use whatever designators you want. Suppose, for example, that you wanted to provide help on cursors available in the company package. You would create a block of comment text in that package specification as follows:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>/*CURSORS
Company-related Cursors:
...
CURSORS*/</PRE
></BLOCKQUOTE
><P
CLASS="para"
>Then you could add another help-delivering procedure to that package:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>PROCEDURE on_cursors IS
BEGIN
   PLVhlp.show ('s:PLVprs', 'cursors');
END on_cursors;</PRE
></BLOCKQUOTE
><P
CLASS="para"
>With these pieces in place, the following command in SQL*Plus delivers the help you want:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>SQL&gt; exec company.on_cursors;</PRE
></BLOCKQUOTE
><P
CLASS="para"
>And that is how developers can use PLVhlp to get a handle on the stored code available to them. Obviously, someone has to spend the time to enter the help text, breaking it up into useful sections, etc. Once that is done, however, PLVhlp makes that information readily available to any user of the package.</P
></DIV
></DIV
></DIV
><DIV
CLASS="htmlnav"
><P
></P
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch17_03.htm"
TITLE='17.3 What Is "Online Help" for Stored Code?'
><IMG
SRC="../gifs/txtpreva.gif"
ALT='Previous: 17.3 What Is "Online Help" for Stored Code?'
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="book"
HREF="index.htm"
TITLE="Advanced Oracle PL/SQL Programming with Packages"
><IMG
SRC="../gifs/txthome.gif"
ALT="Advanced Oracle PL/SQL Programming with Packages"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch17_05.htm#ch17-SECT-5.2"
TITLE="17.5 Implementing PLVhlp"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 17.5 Implementing PLVhlp"
BORDER="0"></A
></TD
></TR
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
>17.3 What Is "Online Help" for Stored Code?</TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="index"
HREF="index/idx_0.htm"
TITLE="Book Index"
><IMG
SRC="../gifs/index.gif"
ALT="Book Index"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
>17.5 Implementing PLVhlp</TD
></TR
></TABLE
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"></DIV
><IMG
SRC="../gifs/smnavbar.gif"
USEMAP="#map"
BORDER="0"
ALT="The Oracle Library Navigation">

<P><font size="-1">
<a href="../copyrght.htm#copy">Copyright (c) 2000</a> O'Reilly & Associates. All rights reserved.
</font></P>

<MAP NAME="map">

<AREA SHAPE="RECT"
COORDS="0,0,35,30"
HREF="../index.htm"
ALT="Library Home">

<AREA SHAPE="RECT"
COORDS="40,0,95,30"
HREF="../prog2/index.htm"
ALT="Oracle PL/SQL Programming, 2nd. Ed.">

<AREA SHAPE="RECT"
COORDS="100,0,200,30"
HREF="../guide8i/index.htm"
ALT="Guide to Oracle 8i Features">

<AREA SHAPE="RECT"
COORDS="205,0,245,30"
HREF="../bipack/index.htm"
ALT="Oracle Built-in Packages">

<AREA SHAPE="RECT"
COORDS="250,0,320,30"
HREF="index.htm"
ALT="Advanced PL/SQL Programming with Packages">

<AREA SHAPE="RECT"
COORDS="325,0,420,30"
HREF="../webapp/index.htm"
ALT="Oracle Web Applications">

<AREA SHAPE="RECT"
COORDS="425,0,490,30"
HREF="../langpkt/index.htm"
ALT="Oracle PL/SQL Language Pocket Reference">

<AREA SHAPE="RECT"
COORDS="495,0,570,30"
HREF="../bipkt/index.htm"
ALT="Oracle PL/SQL Built-ins Pocket Reference">
</MAP>
</BODY
>
<!-- Mirrored from liso.cs.pusan.ac.kr by HTTrack Website Copier/3.x [XR&CO'2001] -->
</HTML
>
