<HTML
><HEAD
><TITLE
>[Chapter 2] 2.3 Selecting Package Names</TITLE
><META
NAME="DC.Creator"
CONTENT="Steven Feuerstein"><META
NAME="DC.Date"
CONTENT="2000-04-29T18:21:52Z"><META
NAME="DC.Format"
CONTENT="text/html"
SCHEME="MIME"><META
NAME="DC.Identifier"
CONTENT="O'Reilly and Associates-1-56592-238-7E"><META
NAME="DC.Language"
CONTENT="en-US"><META
NAME="DC.Publisher"
CONTENT="O'Reilly &amp; Associates, Inc."><META
NAME="DC.Source"
CONTENT="1-56592-238-7E"
SCHEME="ISBN"><META
NAME="DC.Subject.Keyword"
CONTENT="PL/SQL SQL Oracle Packages"><META
NAME="DC.Title"
CONTENT="Advanced Oracle PL/SQL Programming with Packages"><META
NAME="DC.Type"
CONTENT="Text.Monograph"><META
NAME="generator"
CONTENT="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><LINK
REL="stylesheet"
TYPE="text/css"
HREF="../style/style1.css"><LINK
REV="made"
HREF="mailto:online-books@oreilly.com"
TITLE="Online Books Comments"><LINK
REL="up"
HREF="ch02_01.htm"
TITLE="2. Best Practices for Packages"><LINK
REL="prev"
HREF="ch02_02.htm"
TITLE="2.2 Using Effective Coding Style for Packages"><LINK
REL="next"
HREF="ch02_04.htm"
TITLE="2.4 Organizing Package Source Code"></HEAD>
<BODY><DIV CLASS="htmlnav"
><H1
><IMG
SRC="gifs/smbanner.gif"
ALT="Advanced Oracle PL/SQL Programming with Packages"
USEMAP="#srchmap"
BORDER="0"></H1
><MAP
NAME="srchmap"
><AREA
SHAPE="RECT"
COORDS="0,0,466,65"
HREF="index.htm"
ALT="Advanced Oracle PL/SQL Programming with Packages"><AREA
SHAPE="RECT"
COORDS="467,0,514,18"
HREF="jobjects/fsearch.htm"
ALT="Search this book"></MAP
><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch02_02.htm"
TITLE="2.2 Using Effective Coding Style for Packages"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 2.2 Using Effective Coding Style for Packages"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><SPAN
CLASS="NAVTITLE"
><A
CLASS="chapter"
REL="up"
HREF="ch02_01.htm"
TITLE="2. Best Practices for Packages"
>Chapter 2<BR>Best Practices for Packages</A
></SPAN
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch02_04.htm"
TITLE="2.4 Organizing Package Source Code"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 2.4 Organizing Package Source Code"
BORDER="0"></A
></TD
></TR
></TABLE
>&nbsp;<HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"></DIV
><DIV
CLASS="sect1"
><H2
CLASS="sect1"
><A
CLASS="title"
NAME="ch02-34493"
>2.3 Selecting Package Names</A
></H2
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="ch02-idx-999945-0"
></A
><A
CLASS="indexterm"
NAME="ch02-idx-999945-1"
></A
>Have you ever noticed that a package is never executed or referenced? The package is only a container for all the elements <EM
CLASS="emphasis"
>inside</EM
> the package. In your code you will execute package-based procedures and functions. You will reference package-based constants, variables, cursors, and so on. Consequently, all references to package-based elements are accomplished with <A
CLASS="indexterm"
NAME="ch02-idx-999951-0"
></A
><A
CLASS="indexterm"
NAME="ch02-idx-999951-1"
></A
><A
CLASS="indexterm"
NAME="ch02-idx-999951-2"
></A
>qualified notation: <EM
CLASS="emphasis"
>package</EM
>.<EM
CLASS="emphasis"
>element</EM
>. You should take this format into account when you name both the package and the elements within a package. </P
><P
CLASS="para"
>In this section I discuss the following aspects of naming package-based elements:</P
><UL
CLASS="itemizedlist"
><LI
CLASS="listitem"
><P
CLASS="para"
>Choosing appropriate and accurate names.</P
></LI
><LI
CLASS="listitem"
><P
CLASS="para"
>Avoiding redundancy.</P
></LI
><LI
CLASS="listitem"
><P
CLASS="para"
>Avoiding superfluous naming elements.</P
></LI
></UL
><P
CLASS="para"
>If you follow the advice in this section, you will design packages that are more easily used and understood by other developers.</P
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch02-SECT-3.1"
>2.3.1 Choosing Appropriate and Accurate Names</A
></H3
><P
CLASS="para"
>As a rule, developers are much too careless about the names they give to their packages and the elements inside those packages, (most importantly, procedures and functions.) There are two aspects to coming up with the right names for your code elements:</P
><UL
CLASS="itemizedlist"
><LI
CLASS="listitem"
><P
CLASS="para"
>The structure of the name should match the role that element plays in your code.</P
></LI
><LI
CLASS="listitem"
><P
CLASS="para"
>The name should reflect what the element does in your code.</P
></LI
></UL
><P
CLASS="para"
>Have you ever thought about the <EM
CLASS="emphasis"
>structure</EM
> of the names you choose? <SPAN
CLASS="acronym"
>PL/SQL</SPAN
> is a computer language. It is much simpler than human languages like Japanese or English, but it still has many of the same grammatical components, such as nouns and verbs. RAISE_APPLICATION_ERROR, for example, contains a verb (RAISE)-noun (APPLICATION_ERROR) combination, as in: "Raise this error." The built-in function, SUBSTR, is an example of a noun (SUBSTR), as in: "if the substring is NULL, then ask for a dollar amount."</P
><P
CLASS="para"
><SPAN
CLASS="acronym"
>PL/SQL</SPAN
> on the other hand, is more complicated than human languages because you, the developer, get to make up words in the language as you go. You define new nouns and verbs every time you declare a variable or define a new program. This means that each and every one of us is, at least in part, responsible for the integrity of the <SPAN
CLASS="acronym"
>PL/SQL</SPAN
> language. Keep this in mind as you name your program elements. Let's apply this consideration to packages.</P
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="ch02-idx-999952-0"
></A
>First of all, the name of the package should always be structured as a noun. The package itself does not <EM
CLASS="emphasis"
>do</EM
> anything, so it cannot and should not be an action verb. The package name declares, as simply as possible, the contents of the package. If you are writing a package to analyze sales, the name of the package should be something like: </P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>sales_analysis</PRE
></BLOCKQUOTE
><P
CLASS="para"
>and not either of these:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>perform_sales_analysis
calculate_sales</PRE
></BLOCKQUOTE
><P
CLASS="para"
>It should also probably not be something as vague as "sales". There are many different aspects to sales; there would be no way to tell from the name that this package performs analyses on sales figures.</P
><P
CLASS="para"
>Beyond the package name itself, you must be very careful in your naming of elements within the package. A procedure is an executable statement, a command to the <SPAN
CLASS="acronym"
>PL/SQL</SPAN
> compiler. Consequently, the structure of the procedure name should be similar to a command:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>Verb_Subject</PRE
></BLOCKQUOTE
><P
CLASS="para"
>as in:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>Calculate_P_and_L
Display_Errors
Confirm_New_Entries</PRE
></BLOCKQUOTE
><P
CLASS="para"
>A <A
CLASS="indexterm"
NAME="ch02-idx-999957-0"
></A
><A
CLASS="indexterm"
NAME="ch02-idx-999957-1"
></A
>function, on the other hand, is used like an expression in an executable statement. Because it returns, or represents, a value, the structure of a function name (as well as all constants and variables) should also be a noun:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>Description_of_Returned_Value</PRE
></BLOCKQUOTE
><P
CLASS="para"
>as in:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>Net_Profit
Company_Name
Number_of_Jobs
Earliest_Hire_Date</PRE
></BLOCKQUOTE
><P
CLASS="para"
>If I use the wrong grammatical structure for my names, they do not read properly. </P
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch02-SECT-3.2"
>2.3.2 Avoiding Redundancy</A
></H3
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="ch02-idx-999953-0"
></A
>Keep in mind that when you reference a package element outside of the package you must use <A
CLASS="indexterm"
NAME="ch02-idx-999954-0"
></A
><A
CLASS="indexterm"
NAME="ch02-idx-999954-1"
></A
><A
CLASS="indexterm"
NAME="ch02-idx-999954-2"
></A
>dot notation (<EM
CLASS="emphasis"
>package</EM
>.<EM
CLASS="emphasis"
>element</EM
>). As a result, you will want to avoid redundancy in your package and element names. For example, suppose I have a package named <KBD
CLASS="command"
>emp_maint</KBD
> for employee maintenance. One of the procedures in the package sets the employee salary. </P
><P
CLASS="para"
>Here is a redundant naming scheme:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>PACKAGE emp_maint
IS
   PROCEDURE set_emp_sal;
END;</PRE
></BLOCKQUOTE
><P
CLASS="para"
>With this approach, I would then execute the procedure as follows:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>emp_maint.set_emp_sal;</PRE
></BLOCKQUOTE
><P
CLASS="para"
>I do not need to mention <KBD
CLASS="command"
>emp</KBD
> again in the procedure name. The entire package is all about maintaining employees. That should be assumed in the names of all elements defined within the package. A more sensible approach would be:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>PACKAGE emp_maint
IS
   PROCEDURE set_sal;
END;</PRE
></BLOCKQUOTE
><P
CLASS="para"
>With this new approach, I can then execute the procedure as follows:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>emp_maint.set_sal;</PRE
></BLOCKQUOTE
><P
CLASS="para"
>In this way, I type less and the resulting code is more readable. </P
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch02-SECT-3.3"
>2.3.3 Avoiding Superfluous Naming Elements</A
></H3
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="ch02-idx-999955-0"
></A
><A
CLASS="indexterm"
NAME="ch02-idx-999955-1"
></A
><A
CLASS="indexterm"
NAME="ch02-idx-999955-2"
></A
>I often recommend that you include as a suffix or prefix to an element name an abbreviation that indicates clearly the type of element. So whenever I declare a cursor, for example, I always append a suffix of "_cur" as shown in the example below:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>DECLARE
    CURSOR emp_cur IS
       SELECT ...;
BEGIN
    FOR emp_rec IN emp_cur
    LOOP
        ...
    END LOOP;
END;</PRE
></BLOCKQUOTE
><P
CLASS="para"
>You can go overboard with these <A
CLASS="indexterm"
NAME="ch02-idx-999956-0"
></A
>abbreviations and end up with names that are unwieldy and trip over themselves. The package name is one of those instances. I recommend that you do not append suffixes like "pkg" or "pak" to the names of packages. It will be clear enough from the way the packaged elements are referenced and used that they are defined within a package. Let's look at an example to illustrate the point.</P
><P
CLASS="para"
>Suppose I define my <KBD
CLASS="command"
>emp_maint</KBD
> package as follows:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>PACKAGE emp_maint_pak
IS
   PROCEDURE set_sal;
END;</PRE
></BLOCKQUOTE
><P
CLASS="para"
>With this verbose approach, I then execute the procedure as follows:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>emp_maint_pak.set_sal;</PRE
></BLOCKQUOTE
><P
CLASS="para"
>What do I gain by including the "pak" in the call, except to add to my typing? There can be no doubt at all that the <KBD
CLASS="command"
>set_sal</KBD
> procedure is defined within a package.</P
><P
CLASS="para"
>Similarly, I have worked at companies whose naming conventions dictate that whenever you create a procedure, you must preface the name with "pr" as in:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>pr_calc_totals;</PRE
></BLOCKQUOTE
><P
CLASS="para"
>Function names must, of course, be prefaced with "fu" as in:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>v_totsal := fu_total_salary;</PRE
></BLOCKQUOTE
><P
CLASS="para"
>This is serious overkill; if you have conventions like these, you need to find a better balance between self-documentation, readability, and productivity.</P
><P
CLASS="para"
>Some readers may notice an inconsistency in my approach to using suffixes. I suggest that you do not include "pkg" in your package names. I do continue to recommend, on the other hand, that you use a suffix for cursors and records, such as <KBD
CLASS="command"
>emp_cur</KBD
> and <KBD
CLASS="command"
>obj_rec</KBD
>. Why not drop the suffix for all of these elements? After all, it is usually pretty clear when I refer to a cursor or record. The clearest justification has to do with avoiding name duplication within the same <SPAN
CLASS="acronym"
>PL/SQL</SPAN
> block scope. Package names must be unique within an Oracle account. Within a single package, however, you may well want to define records, cursors, <SPAN
CLASS="acronym"
>PL/SQL</SPAN
> tables, programmer-defined record TYPEs, and so on for, say, the <KBD
CLASS="command"
>emp</KBD
> entity. If you do not use standard suffixes (or prefixes), you will end up with a bewildering variety of names. Conventions based on the entity name&nbsp;-- such as <KBD
CLASS="command"
>emp</KBD
> or <KBD
CLASS="command"
>dept</KBD
> or <KBD
CLASS="command"
>orders</KBD
>&nbsp;-- offer the simplest and clearest way to distinguish between these different elements of the <SPAN
CLASS="acronym"
>PL/SQL</SPAN
> language.[<A
CLASS="footnote"
HREF="#ch02-pgfId-997007"
>1</A
>]<A
CLASS="indexterm"
NAME="ch02-idx-999949-0"
></A
><A
CLASS="indexterm"
NAME="ch02-idx-999949-1"
></A
><A
CLASS="indexterm"
NAME="ch02-idx-999949-2"
></A
><A
CLASS="indexterm"
NAME="ch02-idx-999949-3"
></A
></P
><BLOCKQUOTE
CLASS="footnote"
><DIV
CLASS="footnote"
><P
CLASS="para"
><A
CLASS="footnote"
NAME="ch02-pgfId-997007"
>[1]</A
> Thanks to John Beresniewicz for this insight.</P
></DIV
></BLOCKQUOTE
></DIV
></DIV
><DIV
CLASS="htmlnav"
><P
></P
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch02_02.htm"
TITLE="2.2 Using Effective Coding Style for Packages"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 2.2 Using Effective Coding Style for Packages"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="book"
HREF="index.htm"
TITLE="Advanced Oracle PL/SQL Programming with Packages"
><IMG
SRC="../gifs/txthome.gif"
ALT="Advanced Oracle PL/SQL Programming with Packages"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch02_04.htm"
TITLE="2.4 Organizing Package Source Code"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 2.4 Organizing Package Source Code"
BORDER="0"></A
></TD
></TR
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
>2.2 Using Effective Coding Style for Packages</TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="index"
HREF="index/idx_0.htm"
TITLE="Book Index"
><IMG
SRC="../gifs/index.gif"
ALT="Book Index"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
>2.4 Organizing Package Source Code</TD
></TR
></TABLE
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"></DIV
><IMG
SRC="../gifs/smnavbar.gif"
USEMAP="#map"
BORDER="0"
ALT="The Oracle Library Navigation">

<P><font size="-1">
<a href="../copyrght.htm#copy">Copyright (c) 2000</a> O'Reilly & Associates. All rights reserved.
</font></P>

<MAP NAME="map">

<AREA SHAPE="RECT"
COORDS="0,0,35,30"
HREF="../index.htm"
ALT="Library Home">

<AREA SHAPE="RECT"
COORDS="40,0,95,30"
HREF="../prog2/index.htm"
ALT="Oracle PL/SQL Programming, 2nd. Ed.">

<AREA SHAPE="RECT"
COORDS="100,0,200,30"
HREF="../guide8i/index.htm"
ALT="Guide to Oracle 8i Features">

<AREA SHAPE="RECT"
COORDS="205,0,245,30"
HREF="../bipack/index.htm"
ALT="Oracle Built-in Packages">

<AREA SHAPE="RECT"
COORDS="250,0,320,30"
HREF="index.htm"
ALT="Advanced PL/SQL Programming with Packages">

<AREA SHAPE="RECT"
COORDS="325,0,420,30"
HREF="../webapp/index.htm"
ALT="Oracle Web Applications">

<AREA SHAPE="RECT"
COORDS="425,0,490,30"
HREF="../langpkt/index.htm"
ALT="Oracle PL/SQL Language Pocket Reference">

<AREA SHAPE="RECT"
COORDS="495,0,570,30"
HREF="../bipkt/index.htm"
ALT="Oracle PL/SQL Built-ins Pocket Reference">
</MAP>
</BODY
>
<!-- Mirrored from liso.cs.pusan.ac.kr by HTTrack Website Copier/3.x [XR&CO'2001] -->
</HTML
>
