<HTML
><HEAD
><TITLE
>[Chapter 15] PLVvu: Viewing Source Code and Compile Errors</TITLE
><META
NAME="DC.Creator"
CONTENT="Steven Feuerstein"><META
NAME="DC.Date"
CONTENT="2000-04-29T18:28:27Z"><META
NAME="DC.Format"
CONTENT="text/html"
SCHEME="MIME"><META
NAME="DC.Identifier"
CONTENT="O'Reilly and Associates-1-56592-238-7E"><META
NAME="DC.Language"
CONTENT="en-US"><META
NAME="DC.Publisher"
CONTENT="O'Reilly &amp; Associates, Inc."><META
NAME="DC.Source"
CONTENT="1-56592-238-7E"
SCHEME="ISBN"><META
NAME="DC.Subject.Keyword"
CONTENT="PL/SQL SQL Oracle Packages"><META
NAME="DC.Title"
CONTENT="Advanced Oracle PL/SQL Programming with Packages"><META
NAME="DC.Type"
CONTENT="Text.Monograph"><META
NAME="generator"
CONTENT="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><LINK
REL="stylesheet"
TYPE="text/css"
HREF="../style/style1.css"><LINK
REV="made"
HREF="mailto:online-books@oreilly.com"
TITLE="Online Books Comments"><LINK
REL="up"
HREF="part04.htm"
TITLE="IV. Developer Utility Packages"><LINK
REL="prev"
HREF="ch14_04.htm#ch14-SECT-4.1"
TITLE="14.4 Using PLVtmr in Scripts"><LINK
REL="next"
HREF="ch15_02.htm"
TITLE="15.2 Displaying Compile Errors"></HEAD>
<BODY><DIV CLASS="htmlnav"
><H1
><IMG
SRC="gifs/smbanner.gif"
ALT="Advanced Oracle PL/SQL Programming with Packages"
USEMAP="#srchmap"
BORDER="0"></H1
><MAP
NAME="srchmap"
><AREA
SHAPE="RECT"
COORDS="0,0,466,65"
HREF="index.htm"
ALT="Advanced Oracle PL/SQL Programming with Packages"><AREA
SHAPE="RECT"
COORDS="467,0,514,18"
HREF="jobjects/fsearch.htm"
ALT="Search this book"></MAP
><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch14_04.htm#ch14-SECT-4.1"
TITLE="14.4 Using PLVtmr in Scripts"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 14.4 Using PLVtmr in Scripts"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><SPAN
CLASS="NAVTITLE"
>Chapter 15</SPAN
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch15_02.htm"
TITLE="15.2 Displaying Compile Errors"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 15.2 Displaying Compile Errors"
BORDER="0"></A
></TD
></TR
></TABLE
>&nbsp;<HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"></DIV
><DIV
CLASS="chapter"
><H1
CLASS="chapter"
><A
CLASS="title"
NAME="plsql-adv-ch-15"
>15. PLVvu: Viewing Source Code and Compile Errors</A
></H1
><DIV
CLASS="htmltoc"
><P
><B
>Contents:</B
><BR><A
CLASS="sect1"
HREF="#ch15-38236"
TITLE="15.1 Compiling PL/SQL Code in SQL*Plus"
>Compiling PL/SQL Code in SQL*Plus</A
><BR><A
CLASS="sect1"
HREF="ch15_02.htm"
TITLE="15.2 Displaying Compile Errors"
>Displaying Compile Errors</A
><BR><A
CLASS="sect1"
HREF="ch15_03.htm"
TITLE="15.3 Displaying Source Code"
>Displaying Source Code</A
><BR><A
CLASS="sect1"
HREF="ch15_04.htm#ch15-SECT-4.1"
TITLE="15.4 Implementing PLVvu"
>Implementing PLVvu</A
></P
><P
></P
></DIV
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="ch15-idx-998788-0"
></A
><A
CLASS="indexterm"
NAME="ch15-idx-998788-1"
></A
><A
CLASS="indexterm"
NAME="ch15-idx-998788-2"
></A
>The PLVvu (PL/Vision View) package offers a set of programs which allow you to view both stored source code and compile errors. It provides an alternative to the SQL*Plus SHOW ERRORS command which offers you significantly more information about your compile problem. It allows you to quickly scan <SPAN
CLASS="acronym"
>PL/SQL</SPAN
> source code stored in the data dictionary.</P
><P
CLASS="para"
>This chapter shows you how to use the PLVvu programs and also explores the steps involved in constructing a utility like PLVvu. Before diving into the programs provided by PLVvu, however, let's review the situation most <SPAN
CLASS="acronym"
>PL/SQL</SPAN
> developers around the world face on a daily basis as they try to compile their code.</P
><DIV
CLASS="sect1"
><H2
CLASS="sect1"
><A
CLASS="title"
NAME="ch15-38236"
>15.1 Compiling PL/SQL Code in SQL*Plus</A
></H2
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="ch15-idx-998789-0"
></A
>Suppose that you work really, really hard at building this very complicated <SPAN
CLASS="acronym"
>PL/SQL</SPAN
> program. It's a big one, but you feel as if you've got a handle on it. You "create or replace" it in SQL*Plus and here is what you see:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>SQL&gt; start bigone.sql
Warning: Procedure created with compilation errors.</PRE
></BLOCKQUOTE
><P
CLASS="para"
>You groan. At the same time, you realize that you weren't very likely to get it all right the first time. Well, it's time to find out what the error is. Fortunately, Oracle Corporation provides a utility to view the compile errors: the SHOW ERRORS command.</P
><P
CLASS="para"
></P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>SQL&gt; show errors
LINE/COL ERROR
-------- --------------------------------------------------------------
624/10   PLS-00103: Encountered the symbol &quot;IF&quot; when expecting one of
         the following:
         * &amp; = - + ; &lt; / &gt; in mod not rem an exponent (**)
         &lt;&gt; or != or ~= &gt;= &lt;= &lt;&gt; and or like between is null etc.
         ; was inserted before &quot;IF&quot; to continue.</PRE
></BLOCKQUOTE
><P
CLASS="para"
>Wow. Underwhelmed or what? Let's see...so, this error of some kind was found on the tenth character of line 624. Line 624, eh? I open up the file containing my fantastic new program and go down to line 624. Here is what I find:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>622  FOR data_rec IN data_cur
623  LOOP
624     restructure (data_rec.key_val);
635  END LOOP;</PRE
></BLOCKQUOTE
><P
CLASS="para"
>Not an IF in sight. My sense of elation deflates. Getting this program to compile is going to be more difficult that I had thought. What is going on and why am I so depressed? </P
><P
CLASS="para"
>The most critical problem is that SHOW ERRORS does not actually show the line of code upon which the error was found. And even if it did show you that line, it might not necessarily reveal the error, since the error might actually occur on a <EM
CLASS="emphasis"
>different</EM
> line, as you saw above.</P
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch15-SECT-1.1"
>15.1.1 Compiling Stored Code</A
></H3
><P
CLASS="para"
>When you compile a <SPAN
CLASS="acronym"
>PL/SQL</SPAN
> program in SQL*Plus from a file, the following actions occur:</P
><OL
CLASS="orderedlist"
><LI
CLASS="listitem"
><P
CLASS="para"
>SQL*Plus strips out all blank lines (!) and passes them on to the SQL layer ("create or replace" is a DDL statement). </P
></LI
><LI
CLASS="listitem"
><P
CLASS="para"
>The <SPAN
CLASS="acronym"
>PL/SQL</SPAN
> program is compiled. The source code in the file is loaded into the data dictionary in the SYS.SOURCE$, which has the following structure:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>Name           Null?    Type
-------------- -------- ----
OBJ#           NOT NULL NUMBER
LINE           NOT NULL NUMBER
SOURCE                  VARCHAR2(2000)</PRE
></BLOCKQUOTE
><P
CLASS="para"
>When the compile is complete, the SYS.OBJECT$ table is updated with the date and time of the compile and the status (VALID or INVALID).</P
></LI
><LI
CLASS="listitem"
><P
CLASS="para"
>If there are compile errors, then that information is written to the SYS.ERROR$ table, which has the following structure:</P
></LI
></OL
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>Name           Null?    Type
-------------- -------- ----
OBJ#           NOT NULL NUMBER
SEQUENCE       NOT NULL NUMBER
LINE           NOT NULL NUMBER
POSITION       NOT NULL NUMBER
TEXTLENGTH     NOT NULL NUMBER
TEXT           NOT NULL VARCHAR2(2000)</PRE
></BLOCKQUOTE
><P
CLASS="para"
>The LINE column shows the line on which the error was found. The POSITION column contains the character offset to the token on which the error was found. Sadly, that line number reflects the "stripped" version of my program. So it doesn't correlate back to the source code in the file.</P
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch15-SECT-1.2"
>15.1.2 What SHOW ERRORS Does</A
></H3
><P
CLASS="para"
>The <A
CLASS="indexterm"
NAME="ch15-idx-998790-0"
></A
><A
CLASS="indexterm"
NAME="ch15-idx-998790-1"
></A
><A
CLASS="indexterm"
NAME="ch15-idx-998790-2"
></A
>SHOW ERRORS command simply dumps the contents of SYS.ERROR$ (known, by the way, to mere mortals as the USER_ERRORS view) for the most recently compiled module. You can also display lines from USER_ERRORS for a specific program by specifying the type and name of the program, as shown:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>SQL&gt; show errors procedure greetings</PRE
></BLOCKQUOTE
><P
CLASS="para"
>This comes in handy when you have compiled (or tried to compile) multiple modules from a single script file. I am really glad that Oracle Corporation provides SHOW ERRORS, but I sure wish it were more useful. Even getting the line number on which the error occurs is not all that helpful. Sure, I can check my source code (usually in an operating system file). Yet my file line numbers will probably not match the stored code line numbers since SQL*Plus removes blank lines at compile time. I can write a query against USER_SOURCE to see my stored code, but what would be really great is if the SHOW ERRORS command at least showed the source code with which <SPAN
CLASS="acronym"
>PL/SQL</SPAN
> had its problem.</P
><P
CLASS="para"
>Wishful thinking does not, however, help a developer very much. I could wait until Oracle Corporation gets around to enhancing SHOW ERRORS, or maybe I could do something about it myself right now. I have learned over the years[<A
CLASS="footnote"
HREF="#ch15-pgfId-998322"
>1</A
>] two important lessons:</P
><BLOCKQUOTE
CLASS="footnote"
><DIV
CLASS="footnote"
><P
CLASS="para"
><A
CLASS="footnote"
NAME="ch15-pgfId-998322"
>[1]</A
> This dates from 1991 when I built my own debugger for SQL*Forms, XRay Vision, in SQL*Forms itself.</P
></DIV
></BLOCKQUOTE
><OL
CLASS="orderedlist"
><LI
CLASS="listitem"
><P
CLASS="para"
>Don't wait for Oracle Corporation to provide the finishing touches on products that improve developer productivity and general quality of life. Those enhancement requests are usually way down on the list of priorities.</P
></LI
><LI
CLASS="listitem"
><P
CLASS="para"
>I can usually build some kind of utility that goes a long way towards addressing a deficiency in the Oracle tools. It's not the same as Oracle really doing it right and it's not as polished or "shrink-wrapped" as a real third-party vendor solution, but it can still have a noticeable impact on my productivity.</P
></LI
></OL
><P
CLASS="para"
>The next section offers an alternative to SHOW ERRORS that handles many of the problems of this builtin command. This package should come in very handy, and it should also serve as a lesson (maybe even an inspiration) to all of my readers out there: don't whine, design! If you've got a complaint and you've got a need, take development into your own hands and build yourself a solution.<A
CLASS="indexterm"
NAME="ch15-idx-998791-0"
></A
></P
></DIV
></DIV
></DIV
><DIV
CLASS="htmlnav"
><P
></P
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch14_04.htm#ch14-SECT-4.1"
TITLE="14.4 Using PLVtmr in Scripts"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 14.4 Using PLVtmr in Scripts"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="book"
HREF="index.htm"
TITLE="Advanced Oracle PL/SQL Programming with Packages"
><IMG
SRC="../gifs/txthome.gif"
ALT="Advanced Oracle PL/SQL Programming with Packages"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch15_02.htm"
TITLE="15.2 Displaying Compile Errors"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 15.2 Displaying Compile Errors"
BORDER="0"></A
></TD
></TR
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
>14.4 Using PLVtmr in Scripts</TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="index"
HREF="index/idx_0.htm"
TITLE="Book Index"
><IMG
SRC="../gifs/index.gif"
ALT="Book Index"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
>15.2 Displaying Compile Errors</TD
></TR
></TABLE
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"></DIV
><IMG
SRC="../gifs/smnavbar.gif"
USEMAP="#map"
BORDER="0"
ALT="The Oracle Library Navigation">

<P><font size="-1">
<a href="../copyrght.htm#copy">Copyright (c) 2000</a> O'Reilly & Associates. All rights reserved.
</font></P>

<MAP NAME="map">

<AREA SHAPE="RECT"
COORDS="0,0,35,30"
HREF="../index.htm"
ALT="Library Home">

<AREA SHAPE="RECT"
COORDS="40,0,95,30"
HREF="../prog2/index.htm"
ALT="Oracle PL/SQL Programming, 2nd. Ed.">

<AREA SHAPE="RECT"
COORDS="100,0,200,30"
HREF="../guide8i/index.htm"
ALT="Guide to Oracle 8i Features">

<AREA SHAPE="RECT"
COORDS="205,0,245,30"
HREF="../bipack/index.htm"
ALT="Oracle Built-in Packages">

<AREA SHAPE="RECT"
COORDS="250,0,320,30"
HREF="index.htm"
ALT="Advanced PL/SQL Programming with Packages">

<AREA SHAPE="RECT"
COORDS="325,0,420,30"
HREF="../webapp/index.htm"
ALT="Oracle Web Applications">

<AREA SHAPE="RECT"
COORDS="425,0,490,30"
HREF="../langpkt/index.htm"
ALT="Oracle PL/SQL Language Pocket Reference">

<AREA SHAPE="RECT"
COORDS="495,0,570,30"
HREF="../bipkt/index.htm"
ALT="Oracle PL/SQL Built-ins Pocket Reference">
</MAP>
</BODY
>
<!-- Mirrored from liso.cs.pusan.ac.kr by HTTrack Website Copier/3.x [XR&CO'2001] -->
</HTML
>
