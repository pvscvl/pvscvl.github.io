<HTML
><HEAD
><TITLE
>[Chapter 3] 3.9 Considering Implementation Options</TITLE
><META
NAME="DC.Creator"
CONTENT="Steven Feuerstein"><META
NAME="DC.Date"
CONTENT="2000-04-29T18:23:08Z"><META
NAME="DC.Format"
CONTENT="text/html"
SCHEME="MIME"><META
NAME="DC.Identifier"
CONTENT="O'Reilly and Associates-1-56592-238-7E"><META
NAME="DC.Language"
CONTENT="en-US"><META
NAME="DC.Publisher"
CONTENT="O'Reilly &amp; Associates, Inc."><META
NAME="DC.Source"
CONTENT="1-56592-238-7E"
SCHEME="ISBN"><META
NAME="DC.Subject.Keyword"
CONTENT="PL/SQL SQL Oracle Packages"><META
NAME="DC.Title"
CONTENT="Advanced Oracle PL/SQL Programming with Packages"><META
NAME="DC.Type"
CONTENT="Text.Monograph"><META
NAME="generator"
CONTENT="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><LINK
REL="stylesheet"
TYPE="text/css"
HREF="../style/style1.css"><LINK
REV="made"
HREF="mailto:online-books@oreilly.com"
TITLE="Online Books Comments"><LINK
REL="up"
HREF="ch03_01.htm"
TITLE="3. The PL/SQL Development Spiral"><LINK
REL="prev"
HREF="ch03_08.htm#ch03-SECT-8.1"
TITLE="3.8 Broadening the Scope"><LINK
REL="next"
HREF="ch03_10.htm"
TITLE="3.10 Choosing the Best Performer"></HEAD>
<BODY><DIV CLASS="htmlnav"
><H1
><IMG
SRC="gifs/smbanner.gif"
ALT="Advanced Oracle PL/SQL Programming with Packages"
USEMAP="#srchmap"
BORDER="0"></H1
><MAP
NAME="srchmap"
><AREA
SHAPE="RECT"
COORDS="0,0,466,65"
HREF="index.htm"
ALT="Advanced Oracle PL/SQL Programming with Packages"><AREA
SHAPE="RECT"
COORDS="467,0,514,18"
HREF="jobjects/fsearch.htm"
ALT="Search this book"></MAP
><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch03_08.htm#ch03-SECT-8.1"
TITLE="3.8 Broadening the Scope"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 3.8 Broadening the Scope"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><SPAN
CLASS="NAVTITLE"
><A
CLASS="chapter"
REL="up"
HREF="ch03_01.htm"
TITLE="3. The PL/SQL Development Spiral"
>Chapter 3<BR>The PL/SQL Development Spiral</A
></SPAN
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch03_10.htm"
TITLE="3.10 Choosing the Best Performer"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 3.10 Choosing the Best Performer"
BORDER="0"></A
></TD
></TR
></TABLE
>&nbsp;<HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"></DIV
><DIV
CLASS="sect1"
><H2
CLASS="sect1"
><A
CLASS="title"
NAME="ch03-41586"
>3.9 Considering Implementation Options</A
></H2
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="ch03-idx-999795-0"
></A
>That's right. We're still not finished. As you build more and more complex programs, you should always remember the following piece of wisdom:</P
><TABLE
CLASS="simplelist"
BORDER="0"
><TR
><TD
CLASS="member"
><EM
CLASS="emphasis"
>In PL/SQL, just as in SQL, there is always more than way to implement a requirement.</EM
></TD
></TR
></TABLE
><P
CLASS="para"
>SQL is notorious (at least to me, since I am far from a SQL guru) for having many different potential solutions for a single data request. Usually 99.95% of these solutions perform horribly. The situation is similar, though perhaps less extreme, for the <SPAN
CLASS="acronym"
>PL/SQL</SPAN
> language. You can usually find at least two or three ways to solve a given problem. And it is usually worth the trouble to at least consider more than one implementation. Why? First, even though your instinctive (first) approach may work fine, another technique might be even better from the standpoints of performance, maintainability, or readability. Second, by coming at the problem from another angle, you might well uncover logical flaws in your prior implementation(s), such as unconsidered cases.</P
><P
CLASS="para"
>Let's take another look at the <I
CLASS="function"
>repeated</I
> function with these issues in mind. Actually, as wrote the last sentence of the previous section, I was immediately reminded of another implementation. That sentence read, in part:</P
><P
CLASS="para"
>"I now have a very generic function to generate string repetitions..."</P
><P
CLASS="para"
>I thought to myself: "Big deal. I mean, <SPAN
CLASS="acronym"
>PL/SQL</SPAN
> itself has a very generic function or two to generate repetitions of a string." These builtin functions don't perform case conversion, so I don't feel downright stupid writing my own string-repeater. It is worth, however, considering those builtins for use within the repeated    function.</P
><P
CLASS="para"
>Which functions do I refer to as "string-repeaters"? <A
CLASS="indexterm"
NAME="ch03-idx-999803-0"
></A
><A
CLASS="indexterm"
NAME="ch03-idx-999803-1"
></A
>RPAD and LPAD. These pad functions are commonly used to pad on the left or right with spaces. Yet that is simply the default mode of operation for these functions. You can pad to the specified length with any pattern of characters you want. The following use of LPAD, for example, pads the string "Eli" with the words "My son" to a length of 20 characters:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>SQL&gt; exec DBMS_OUTPUT.PUT_LINE (LPAD ('Eli', 20, 'My son '));
My son My son My Eli</PRE
></BLOCKQUOTE
><P
CLASS="para"
>Notice that it stuck "My" in three times. That's because it pads as far as possible to fill the 20 characters and then stop. I can put this builtin repeater to work quite easily in the <KBD
CLASS="command"
>repeated</KBD
> function. The only trick is to calculate the total length of the string I want to generate. <A
CLASS="xref"
HREF="ch03_09.htm"
>Example 3.8</A
> contains the full implementation of the RPAD version of <I
CLASS="function"
>repeated</I
>.</P
><DIV
CLASS="example"
><H4
CLASS="example"
><A
CLASS="title"
NAME="ch03-36030"
>Example 3.8: An RPAD-Based Implementation of repeated</A
></H4
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>CREATE OR REPLACE FUNCTION rep_rpad
   (string_in IN VARCHAR2, 
    action_in IN VARCHAR2 DEFAULT 'N',
    num_in IN INTEGER := 1)
RETURN VARCHAR2
IS
   v_action VARCHAR2(10) := UPPER (action_in);  
   initval VARCHAR2(32767);
   nextval VARCHAR2(32767); 
   v_retval VARCHAR2(32767);
   
BEGIN
   assert
      (v_action IN ('UL', 'LU', 'N'),
       'Please enter UL LU or N');
   assert
      (num_in &gt;= 0,
       'Duplication count must be at least 0.');

   IF v_action = 'UL'
   THEN
      initval := UPPER (string_in);   
      nextval := LOWER (string_in);
   ELSIF v_action = 'LU'
   THEN
      initval := LOWER (string_in);      
      nextval := UPPER (string_in);
   ELSE
      initval := string_in;      
      nextval := string_in;
   END IF; 

   v_retval := RPAD (initval, LENGTH (string_in) * (num_in+1), nextval);

   RETURN v_retval;      
END rep_rpad;
/</PRE
></BLOCKQUOTE
></DIV
><P
CLASS="para"
>It is exactly the same as the FOR loop version, except that in place of the loop, I use this line:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>v_retval := RPAD (initval, LENGTH (string_in) * (num_in+1), nextval);</PRE
></BLOCKQUOTE
><P
CLASS="para"
>The total length of the return value is the length of the specified string multiplied by the number of repetitions plus one. So if the user specifies zero repetitions, the total length is the same as the original string, and RPAD does nothing. If the user wants one repetition, the total length is double the original, leaving enough room for RPAD to pad <KBD
CLASS="command"
>initval</KBD
> on the right with <I
CLASS="function"
>nextval</I
> just once&nbsp;-- resulting in twice the original string. This pattern works for additional multiples as well.</P
><P
CLASS="para"
>The RPAD approach requires fewer lines of code than the loop version. For example, with RPAD I don't even have to initialize the return value variable to <I
CLASS="function"
>initval</I
>. The single assignment covers the <KBD
CLASS="command"
>num_in</KBD
> = 0 case as well as the non-trivial repetitions. Which technique should I use? More to the point, which should I make available to others to use?</P
><P
CLASS="para"
>The deciding factor in this case should be: which is more efficient? This is a low-level utility. It might be called many times deep down in the bowels of an application. So a minor difference in performance between the two implementations could have a multiplying effect on overall performance of the application.<A
CLASS="indexterm"
NAME="ch03-idx-999797-0"
></A
><A
CLASS="indexterm"
NAME="ch03-idx-999797-1"
></A
></P
></DIV
><DIV
CLASS="htmlnav"
><P
></P
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch03_08.htm#ch03-SECT-8.1"
TITLE="3.8 Broadening the Scope"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 3.8 Broadening the Scope"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="book"
HREF="index.htm"
TITLE="Advanced Oracle PL/SQL Programming with Packages"
><IMG
SRC="../gifs/txthome.gif"
ALT="Advanced Oracle PL/SQL Programming with Packages"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch03_10.htm"
TITLE="3.10 Choosing the Best Performer"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 3.10 Choosing the Best Performer"
BORDER="0"></A
></TD
></TR
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
>3.8 Broadening the Scope</TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="index"
HREF="index/idx_0.htm"
TITLE="Book Index"
><IMG
SRC="../gifs/index.gif"
ALT="Book Index"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
>3.10 Choosing the Best Performer</TD
></TR
></TABLE
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"></DIV
><IMG
SRC="../gifs/smnavbar.gif"
USEMAP="#map"
BORDER="0"
ALT="The Oracle Library Navigation">

<P><font size="-1">
<a href="../copyrght.htm#copy">Copyright (c) 2000</a> O'Reilly & Associates. All rights reserved.
</font></P>

<MAP NAME="map">

<AREA SHAPE="RECT"
COORDS="0,0,35,30"
HREF="../index.htm"
ALT="Library Home">

<AREA SHAPE="RECT"
COORDS="40,0,95,30"
HREF="../prog2/index.htm"
ALT="Oracle PL/SQL Programming, 2nd. Ed.">

<AREA SHAPE="RECT"
COORDS="100,0,200,30"
HREF="../guide8i/index.htm"
ALT="Guide to Oracle 8i Features">

<AREA SHAPE="RECT"
COORDS="205,0,245,30"
HREF="../bipack/index.htm"
ALT="Oracle Built-in Packages">

<AREA SHAPE="RECT"
COORDS="250,0,320,30"
HREF="index.htm"
ALT="Advanced PL/SQL Programming with Packages">

<AREA SHAPE="RECT"
COORDS="325,0,420,30"
HREF="../webapp/index.htm"
ALT="Oracle Web Applications">

<AREA SHAPE="RECT"
COORDS="425,0,490,30"
HREF="../langpkt/index.htm"
ALT="Oracle PL/SQL Language Pocket Reference">

<AREA SHAPE="RECT"
COORDS="495,0,570,30"
HREF="../bipkt/index.htm"
ALT="Oracle PL/SQL Built-ins Pocket Reference">
</MAP>
</BODY
>
<!-- Mirrored from liso.cs.pusan.ac.kr by HTTrack Website Copier/3.x [XR&CO'2001] -->
</HTML
>
