<HTML
><HEAD
><TITLE
>[Chapter 13] 13.2 Specifying the File in PLVfile</TITLE
><META
NAME="DC.Creator"
CONTENT="Steven Feuerstein"><META
NAME="DC.Date"
CONTENT="2000-04-29T18:28:07Z"><META
NAME="DC.Format"
CONTENT="text/html"
SCHEME="MIME"><META
NAME="DC.Identifier"
CONTENT="O'Reilly and Associates-1-56592-238-7E"><META
NAME="DC.Language"
CONTENT="en-US"><META
NAME="DC.Publisher"
CONTENT="O'Reilly &amp; Associates, Inc."><META
NAME="DC.Source"
CONTENT="1-56592-238-7E"
SCHEME="ISBN"><META
NAME="DC.Subject.Keyword"
CONTENT="PL/SQL SQL Oracle Packages"><META
NAME="DC.Title"
CONTENT="Advanced Oracle PL/SQL Programming with Packages"><META
NAME="DC.Type"
CONTENT="Text.Monograph"><META
NAME="generator"
CONTENT="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><LINK
REL="stylesheet"
TYPE="text/css"
HREF="../style/style1.css"><LINK
REV="made"
HREF="mailto:online-books@oreilly.com"
TITLE="Online Books Comments"><LINK
REL="up"
HREF="ch13_01.htm"
TITLE="13. PLVfile: Reading and Writing Operating System Files"><LINK
REL="prev"
HREF="ch13_01.htm"
TITLE="13.1 A Review of UTL_FILE"><LINK
REL="next"
HREF="ch13_03.htm"
TITLE="13.3 Creating and Checking Existence of Files"></HEAD>
<BODY><DIV CLASS="htmlnav"
><H1
><IMG
SRC="gifs/smbanner.gif"
ALT="Advanced Oracle PL/SQL Programming with Packages"
USEMAP="#srchmap"
BORDER="0"></H1
><MAP
NAME="srchmap"
><AREA
SHAPE="RECT"
COORDS="0,0,466,65"
HREF="index.htm"
ALT="Advanced Oracle PL/SQL Programming with Packages"><AREA
SHAPE="RECT"
COORDS="467,0,514,18"
HREF="jobjects/fsearch.htm"
ALT="Search this book"></MAP
><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch13_01.htm"
TITLE="13.1 A Review of UTL_FILE"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 13.1 A Review of UTL_FILE"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><SPAN
CLASS="NAVTITLE"
><A
CLASS="chapter"
REL="up"
HREF="ch13_01.htm"
TITLE="13. PLVfile: Reading and Writing Operating System Files"
>Chapter 13<BR>PLVfile: Reading and Writing Operating System Files</A
></SPAN
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch13_03.htm"
TITLE="13.3 Creating and Checking Existence of Files"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 13.3 Creating and Checking Existence of Files"
BORDER="0"></A
></TD
></TR
></TABLE
>&nbsp;<HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"></DIV
><DIV
CLASS="sect1"
><H2
CLASS="sect1"
><A
CLASS="title"
NAME="ch13-28144"
>13.2 Specifying the File in PLVfile</A
></H2
><P
CLASS="para"
>Now that you are aware of the way that UTL_FILE works, let's look at how PLVfile makes it easier to use the builtin package. </P
><P
CLASS="para"
>First of all, rather than insist that you separate out the file location from the file name to open and manipulate files, PLVfile provides a set of programs to make it easier to specify files. These programs are discussed below.</P
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch13-SECT-2.1"
>13.2.1 Setting the Operating System Delimiter</A
></H3
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="ch13-idx-998478-0"
></A
><A
CLASS="indexterm"
NAME="ch13-idx-998478-1"
></A
>Each operating system has a delimiter that it uses to separate out directories and subdirectories, as well as separating directories from file names. Since PLVfile allows you to specify a file name as a single string (directory and file name combined), it needs to know about the operating system delimiter.</P
><P
CLASS="para"
>Use the <KBD
CLASS="command"
>set_delim</KBD
><A
CLASS="indexterm"
NAME="ch13-idx-998481-0"
></A
> to set the operating system delimiter. Its header is:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>PROCEDURE set_delim (delim_in IN VARCHAR2);</PRE
></BLOCKQUOTE
><P
CLASS="para"
>You can find out the current operating system delimiter by calling the <KBD
CLASS="command"
>delim</KBD
> function:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>FUNCTION <A
CLASS="indexterm"
NAME="ch13-idx-998482-0"
></A
>delim RETURN VARCHAR2;</PRE
></BLOCKQUOTE
><P
CLASS="para"
>The PLVfile package offers two predefined delimiters for <SPAN
CLASS="acronym"
>UNIX</SPAN
> and <SPAN
CLASS="acronym"
>DOS</SPAN
> as shown:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
><A
CLASS="indexterm"
NAME="ch13-idx-998483-0"
></A
><A
CLASS="indexterm"
NAME="ch13-idx-998483-1"
></A
><A
CLASS="indexterm"
NAME="ch13-idx-998483-2"
></A
><A
CLASS="indexterm"
NAME="ch13-idx-998483-3"
></A
><A
CLASS="indexterm"
NAME="ch13-idx-998483-4"
></A
>c_unixdelim CONSTANT VARCHAR2(1) := '/';
c_dosdelim CONSTANT VARCHAR2(1) := '\';</PRE
></BLOCKQUOTE
><P
CLASS="para"
>The default, initial setting for the OS delimiter is the <SPAN
CLASS="acronym"
>UNIX</SPAN
> delimiter: "/". </P
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch13-SECT-2.2"
>13.2.2 Setting the Default Directory</A
></H3
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="ch13-idx-998479-0"
></A
><A
CLASS="indexterm"
NAME="ch13-idx-998479-1"
></A
><A
CLASS="indexterm"
NAME="ch13-idx-998479-2"
></A
>PLVfile maintains a current directory so that you do not have to continually specify a directory if you are always working in the same area on disk. To set the current directory, call the <KBD
CLASS="command"
>set_dir</KBD
><A
CLASS="indexterm"
NAME="ch13-idx-998480-0"
></A
> procedure. To determine the current setting for the directory, call the <KBD
CLASS="command"
>dir</KBD
> function. The headers for these programs are:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>PROCEDURE set_dir (dir_in IN VARCHAR2);
FUNCTION <A
CLASS="indexterm"
NAME="ch13-idx-998484-0"
></A
>dir RETURN VARCHAR2;</PRE
></BLOCKQUOTE
><P
CLASS="para"
>The following call to <KBD
CLASS="command"
>set_dir</KBD
> sets the default directory to a path in DOS:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>SQL&gt; exec PLVfile.set_dir ('c:\orawin\oe_app');</PRE
></BLOCKQUOTE
><BLOCKQUOTE
CLASS="note"
><P
CLASS="para"
><STRONG
>NOTE:</STRONG
>  If you do not call <KBD
CLASS="command"
>PLVfile.set_dir</KBD
> before passing in file names for reading and writing, there is a very good chance that your efforts to use PLVfile will be very frustrating. You will get errors that are difficult to understand, since you know your file exists. One way to minimize the frustration is to place a call to <KBD
CLASS="command"
>PLVfile.set_dir</KBD
> in your <KBD
CLASS="command"
>login.sql</KBD
> script.</P
></BLOCKQUOTE
><P
CLASS="para"
>Notice that I do not include a terminating backslash in the string. That "final" delimiter is needed when attaching the directory to the file name, but is neither needed nor legitimate for specifying a directory. In fact, if you include a final delimiter, PLVfile will strip it from the string, as shown below:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>   PROCEDURE set_dir (dir_in IN VARCHAR2)
   IS
   BEGIN
      v_dir := RTRIM (dir_in, v_delim);
   END;</PRE
></BLOCKQUOTE
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch13-SECT-2.3"
>13.2.3 Parsing the File Name</A
></H3
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="ch13-idx-998485-0"
></A
><A
CLASS="indexterm"
NAME="ch13-idx-998485-1"
></A
>PLVfile allows you to provide the file name as a single string. When you do this, PLVfile calls <KBD
CLASS="command"
>parse_name</KBD
><A
CLASS="indexterm"
NAME="ch13-idx-998486-0"
></A
> to parse the string into its separate components. The header for <KBD
CLASS="command"
>parse_name</KBD
> is:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>PROCEDURE parse_name 
   (file_in IN VARCHAR2, loc_out IN OUT VARCHAR2,
    name_out IN OUT VARCHAR2);</PRE
></BLOCKQUOTE
><P
CLASS="para"
>where <KBD
CLASS="command"
>file_in</KBD
> is the full file specification (location, name, and extension). The <KBD
CLASS="command"
>loc_out</KBD
> argument receives just the directory, while the <KBD
CLASS="command"
>name_out</KBD
> argument receives the name and extension. It relies on the operating system delimiter you assigned with a call to <KBD
CLASS="command"
>set_dir</KBD
> in order to find the start of the file name.</P
><P
CLASS="para"
>If the string you pass to <KBD
CLASS="command"
>parse_name</KBD
> does not have a directory prefixed on the file name, PLVfile will return the default directory as the location.</P
><P
CLASS="para"
>The following table shows how <KBD
CLASS="command"
>parse_name</KBD
> parses and returns values:</P
><TABLE
CLASS="informaltable"
BORDER="1"
CELLPADDING="3"
><THEAD
CLASS="thead"
><TR
CLASS="row"
VALIGN="TOP"
><TH
CLASS="entry"
ALIGN="LEFT"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>parse_name</P
></TH
><TH
CLASS="entry"
ALIGN="LEFT"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>Default Directory</P
></TH
><TH
CLASS="entry"
ALIGN="LEFT"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>File Location Returned</P
></TH
><TH
CLASS="entry"
ALIGN="LEFT"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>File Name Returned</P
></TH
></TR
></THEAD
><TBODY
CLASS="tbody"
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
><I
CLASS="filename"
>/usr/app/names.lis</I
></P
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>NULL</P
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
><I
CLASS="filename"
>/usr/app</I
></P
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
><I
CLASS="filename"
>names.lis</I
></P
></TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
><I
CLASS="filename"
>/usr/app/names.lis</I
></P
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
><I
CLASS="filename"
>/oracle/prod/defdir</I
></P
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
><I
CLASS="filename"
>/usr/app</I
></P
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
><I
CLASS="filename"
>names.lis</I
></P
></TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
><I
CLASS="filename"
>names.lis</I
></P
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>NULL</P
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>NULL</P
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
><I
CLASS="filename"
>names.lis</I
></P
></TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
><I
CLASS="filename"
>names.lis</I
></P
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
><I
CLASS="filename"
>/oracle/prod/defdir</I
></P
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
><I
CLASS="filename"
>/oracle/prod/defdir</I
></P
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
><I
CLASS="filename"
>names.lis</I
></P
></TD
></TR
></TBODY
></TABLE
><P
CLASS="para"
>This procedure is used extensively inside PLVfile (see <A
CLASS="xref"
HREF="ch13_04.htm"
>Section 13.4, "Opening and Closing Files"</A
> for an example of how <KBD
CLASS="command"
>parse_name</KBD
> is used to overload several different versions of <KBD
CLASS="command"
>fopen</KBD
>). You can, however, also call <KBD
CLASS="command"
>parse_name</KBD
> directly in your own application. Just make sure that you have set the OS delimiter before you use <KBD
CLASS="command"
>parse_name</KBD
>.</P
></DIV
></DIV
><DIV
CLASS="htmlnav"
><P
></P
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch13_01.htm"
TITLE="13.1 A Review of UTL_FILE"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 13.1 A Review of UTL_FILE"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="book"
HREF="index.htm"
TITLE="Advanced Oracle PL/SQL Programming with Packages"
><IMG
SRC="../gifs/txthome.gif"
ALT="Advanced Oracle PL/SQL Programming with Packages"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch13_03.htm"
TITLE="13.3 Creating and Checking Existence of Files"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 13.3 Creating and Checking Existence of Files"
BORDER="0"></A
></TD
></TR
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
>13.1 A Review of UTL_FILE</TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="index"
HREF="index/idx_0.htm"
TITLE="Book Index"
><IMG
SRC="../gifs/index.gif"
ALT="Book Index"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
>13.3 Creating and Checking Existence of Files</TD
></TR
></TABLE
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"></DIV
><IMG
SRC="../gifs/smnavbar.gif"
USEMAP="#map"
BORDER="0"
ALT="The Oracle Library Navigation">

<P><font size="-1">
<a href="../copyrght.htm#copy">Copyright (c) 2000</a> O'Reilly & Associates. All rights reserved.
</font></P>

<MAP NAME="map">

<AREA SHAPE="RECT"
COORDS="0,0,35,30"
HREF="../index.htm"
ALT="Library Home">

<AREA SHAPE="RECT"
COORDS="40,0,95,30"
HREF="../prog2/index.htm"
ALT="Oracle PL/SQL Programming, 2nd. Ed.">

<AREA SHAPE="RECT"
COORDS="100,0,200,30"
HREF="../guide8i/index.htm"
ALT="Guide to Oracle 8i Features">

<AREA SHAPE="RECT"
COORDS="205,0,245,30"
HREF="../bipack/index.htm"
ALT="Oracle Built-in Packages">

<AREA SHAPE="RECT"
COORDS="250,0,320,30"
HREF="index.htm"
ALT="Advanced PL/SQL Programming with Packages">

<AREA SHAPE="RECT"
COORDS="325,0,420,30"
HREF="../webapp/index.htm"
ALT="Oracle Web Applications">

<AREA SHAPE="RECT"
COORDS="425,0,490,30"
HREF="../langpkt/index.htm"
ALT="Oracle PL/SQL Language Pocket Reference">

<AREA SHAPE="RECT"
COORDS="495,0,570,30"
HREF="../bipkt/index.htm"
ALT="Oracle PL/SQL Built-ins Pocket Reference">
</MAP>
</BODY
>
<!-- Mirrored from liso.cs.pusan.ac.kr by HTTrack Website Copier/3.x [XR&CO'2001] -->
</HTML
>
