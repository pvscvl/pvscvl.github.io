<HTML
><HEAD
><TITLE
>[Chapter 5] 5.3 Oracle AQ Nonprogram Elements</TITLE
><META
NAME="DC.Creator"
CONTENT="Steven Feuerstein, Charles Dye &amp; John Beresniewicz"><META
NAME="DC.Date"
CONTENT="2000-04-29T17:50:19Z"><META
NAME="DC.Format"
CONTENT="text/html"
SCHEME="MIME"><META
NAME="DC.Identifier"
CONTENT="O'Reilly and Associates-1-56592-375-8E"><META
NAME="DC.Language"
CONTENT="en-US"><META
NAME="DC.Publisher"
CONTENT="O'Reilly &amp; Associates, Inc."><META
NAME="DC.Source"
CONTENT="1-56592-375-8E"
SCHEME="ISBN"><META
NAME="DC.Subject.Keyword"
CONTENT="Oracle Packages"><META
NAME="DC.Title"
CONTENT="Oracle Built-in Packages"><META
NAME="DC.Type"
CONTENT="Text.Monograph"><META
NAME="generator"
CONTENT="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><LINK
REL="stylesheet"
TYPE="text/css"
HREF="../style/style1.css"><LINK
REV="made"
HREF="mailto:online-books@oreilly.com"
TITLE="Online Books Comments"><LINK
REL="up"
HREF="ch05_01.htm"
TITLE="5. Oracle Advanced Queuing"><LINK
REL="prev"
HREF="ch05_02.htm#ch05-SECT-2.2.3"
TITLE="5.2 Getting Started with Oracle AQ"><LINK
REL="next"
HREF="ch05_04.htm#ch05-SECT-4.1.1"
TITLE="5.4 DBMS_AQ: Interfacing to Oracle AQ (Oracle8 only)"></HEAD
><BODY
><DIV
CLASS="htmlnav"
><H1
><IMG
SRC="gifs/smbanner.gif"
ALT="Oracle Built-in Packages"
USEMAP="#srchmap"
BORDER="0"></H1
><MAP
NAME="srchmap"
><AREA
SHAPE="RECT"
COORDS="0,0,466,65"
HREF="index.htm"
ALT="Oracle Built-in Packages"><AREA
SHAPE="RECT"
COORDS="467,0,514,18"
HREF="jobjects/fsearch.htm"
ALT="Search this book"></MAP
><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch05_02.htm#ch05-SECT-2.2.3"
TITLE="5.2 Getting Started with Oracle AQ"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 5.2 Getting Started with Oracle AQ"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><SPAN
CLASS="NAVTITLE"
><A
CLASS="chapter"
REL="up"
HREF="ch05_01.htm"
TITLE="5. Oracle Advanced Queuing"
>Chapter 5<BR>Oracle Advanced Queuing</A
></SPAN
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch05_04.htm#ch05-SECT-4.1.1"
TITLE="5.4 DBMS_AQ: Interfacing to Oracle AQ (Oracle8 only)"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 5.4 DBMS_AQ: Interfacing to Oracle AQ (Oracle8 only)"
BORDER="0"></A
></TD
></TR
></TABLE
>&nbsp;<HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"></DIV
><DIV
CLASS="sect1"
><H2
CLASS="sect1"
><A
CLASS="title"
NAME="ch05-24231"
>5.3 Oracle AQ Nonprogram Elements</A
></H2
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="ch05-idx-15893-0"
></A
>Oracle AQ defines a number of data structures, exceptions, and other nonprogram elements you'll use when creating and manipulating queues. In addition, there are several data structures you will create and pass to Oracle AQ programs. In many cases, you will find yourself creating and manipulating objects, index-by tables (formerly known as PL/SQL tables), and records. If you are not familiar with these programming constructs, you should review the appropriate chapters in the second edition of <CITE
CLASS="citetitle"
>Oracle PL/SQL Programming</CITE
>. </P
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch05-SECT-3.1"
>5.3.1 Constants</A
></H3
><P
CLASS="para"
>Oracle AQ predefines a set of constants that you then use in various calls to procedures and functions. The following two lists break out these constants into those that are used for administrative tasks and those that figure into operational actions. In both cases, I intentionally do not show the values assigned to these constants. You should never hard-code those values into your code. Instead, always rely on the constants. </P
><DIV
CLASS="sect3"
><H4
CLASS="sect3"
><A
CLASS="title"
NAME="ch05-SECT-3.1.1"
>5.3.1.1 Administrative tasks</A
></H4
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="ch05-idx-16505-0"
></A
>When you are performing administrative tasks in AQ (such as creating queue tables and queues), you may need to use one of the following constants:</P
><TABLE
CLASS="informaltable"
BORDER="1"
CELLPADDING="3"
><THEAD
CLASS="thead"
><TR
CLASS="row"
VALIGN="TOP"
><TH
CLASS="entry"
ALIGN="LEFT"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>Task</P
></TH
><TH
CLASS="entry"
ALIGN="LEFT"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>Constant</P
></TH
></TR
></THEAD
><TBODY
CLASS="tbody"
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>Specify the type of payload</P
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>DBMS_AQADM.OBJECT_TYPE_PAYLOAD</P
><P
CLASS="para"
>DBMS_AQADM.RAW_TYPE</P
></TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>Enable or disable a queue for multiple consumers</P
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>DBMS_AQADM.SINGLE</P
><P
CLASS="para"
>DBMS_AQADM.MULTIPLE</P
></TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>Request that messages on a queue never expire</P
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>DBMS_AQADM.INFINITE</P
></TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>Specify type of message grouping for a queue table</P
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>DBMS_AQADM.TRANSACTIONAL</P
><P
CLASS="para"
>DBMS_AQADM.NONE</P
></TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>Specify type of queue<A
CLASS="indexterm"
NAME="ch05-idx-15908-0"
></A
></P
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>DBMS_AQADM.NORMAL_QUEUE</P
><P
CLASS="para"
>DBMS_AQADM.EXCEPTION_QUEUE</P
></TD
></TR
></TBODY
></TABLE
></DIV
><DIV
CLASS="sect3"
><H4
CLASS="sect3"
><A
CLASS="title"
NAME="ch05-SECT-3.1.2"
>5.3.1.2 Operational tasks</A
></H4
><P
CLASS="para"
>When you are enqueuing and dequeuing messages (the operational tasks in AQ), you may need to use one of the following constants:</P
><TABLE
CLASS="informaltable"
BORDER="1"
CELLPADDING="3"
><THEAD
CLASS="thead"
><TR
CLASS="row"
VALIGN="TOP"
><TH
CLASS="entry"
ALIGN="LEFT"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>Description</P
></TH
><TH
CLASS="entry"
ALIGN="LEFT"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>Constant</P
></TH
></TR
></THEAD
><TBODY
CLASS="tbody"
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>Specify visibility of the queue message</P
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>DBMS_AQ.IMMEDIATE</P
><P
CLASS="para"
>DBMS_AQ.ON_COMMIT</P
></TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>Specify dequeuing mode</P
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>DBMS_AQ.BROWSE</P
><P
CLASS="para"
>DBMS_AQ.LOCKED</P
><P
CLASS="para"
>DBMS_AQ.REMOVE</P
></TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>Specify method of inter-message navigation</P
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>DBMS_AQ.FIRST_MESSAGE</P
><P
CLASS="para"
>DBMS_AQ.NEXT_MESSAGE</P
><P
CLASS="para"
>DBMS_AQ.NEXT_TRANSACTION</P
></TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>Specify state of the message</P
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>DBMS_AQ.WAITING</P
><P
CLASS="para"
>DBMS_AQ.READY</P
><P
CLASS="para"
>DBMS_AQ.PROCESSED</P
><P
CLASS="para"
>DBMS_AQ.EXPIRED</P
></TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>Specify deviation from normal dequeuing sequence</P
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>DBMS_AQ.BEFORE</P
><P
CLASS="para"
>DBMS_AQ.TOP</P
></TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>Specify amount of time to wait for a dequeue operation to succeed</P
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>DBMS_AQ.FOREVER</P
><P
CLASS="para"
>DBMS_AQ.NO_WAIT</P
></TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>Specify amount of time to delay before making a message available for dequeuing</P
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>DBMS_AQ.NO_DELAY</P
></TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>Specify amount of time to elapse before a message expires<A
CLASS="indexterm"
NAME="ch05-idx-16526-0"
></A
></P
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>DBMS_AQ.NEVER</P
></TD
></TR
></TBODY
></TABLE
></DIV
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch05-SECT-3.2"
>5.3.2 Object Names</A
></H3
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="ch05-idx-15926-0"
></A
>You will specify the name of an Oracle AQ object (queue, queue table, or object type) in many different program calls. An AQ object name can be up to 24 characters long, and can be qualified by an optional schema name (also a maximum of 24 characters in length). If you do not specify a schema, then the current schema is used.</P
><P
CLASS="para"
>In the following block I create a RAW queue table for use with my own schema:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>DECLARE
   v_queuetable VARCHAR2(24) := 'myqueue';
BEGIN
   DBMS_AQADM.CREATE_QUEUE_TABLE (
      queue_table =&gt; v_queuetable,
      queue_payload_type =&gt; 'RAW');</PRE
></BLOCKQUOTE
><P
CLASS="para"
>But in the next call to the same built-in procedure, I create a queue table in another schema:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>DECLARE
   v_queuetable VARCHAR2(49) := 'scott.myqueue';
BEGIN
   DBMS_AQADM.CREATE_QUEUE_TABLE (
      queue_table =&gt; v_queuetable,
      queue_payload_type =&gt; 'RAW');</PRE
></BLOCKQUOTE
><P
CLASS="para"
>I specified 49 characters, since I needed room (potentially) for the period.</P
><P
CLASS="para"
>Now you know the rules for object names. However, you should never hard-code those rules into your programs as shown in the previous examples. What if Oracle decides to increase the allowable size for these names? Your programs will be stuck using the old limitations. Instead, you should define subtypes that you can then use to declare queue-related variables without any hard-coded restraints. </P
><P
CLASS="para"
>My <A
CLASS="indexterm"
NAME="ch05-idx-15935-0"
></A
>aq package <A
CLASS="indexterm"
NAME="ch05-idx-15936-0"
></A
>(<I
CLASS="filename"
>aq.spp</I
>) demonstrates this technique. Here are the first few lines of that package's specification:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>/* Filename on companion disk: <A
CLASS="indexterm"
NAME="ch05-idx-19322-0"
></A
>aq.spp */*
CREATE OR REPLACE PACKAGE aq
IS
   v_msgid RAW(16);
   SUBTYPE msgid_type IS v_msgid%TYPE;

   v_name VARCHAR2(49);
   SUBTYPE name_type IS v_name%TYPE;</PRE
></BLOCKQUOTE
><P
CLASS="para"
>With the aq package defined in my schema, I would set up my raw queue table as follows:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>DECLARE
   v_queuetable aq.name_type := 'myqueue';
BEGIN
   DBMS_AQADM.CREATE_QUEUE_TABLE (
      queue_table =&gt; v_queuetable,
      queue_payload_type =&gt; 'RAW');</PRE
></BLOCKQUOTE
><P
CLASS="para"
>No more literal value in the datatype of my declaration!<A
CLASS="indexterm"
NAME="ch05-idx-15927-0"
></A
></P
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch05-SECT-3.3"
>5.3.3 Queue Type Names</A
></H3
><P
CLASS="para"
>When you specify the name of a <A
CLASS="indexterm"
NAME="ch05-idx-15938-0"
></A
><A
CLASS="indexterm"
NAME="ch05-idx-15938-1"
></A
><A
CLASS="indexterm"
NAME="ch05-idx-15938-2"
></A
>queue type (also referred to as "payload type"), you provide either the name of an object type (previously defined in the database) or you specify the constant "RAW" (as shown in the previous section). </P
><P
CLASS="para"
>If you specify a payload type of RAW, AQ creates a queue table with a LOB column as the repository for any messages in its queues. The LOB value is limited to a maximum of 32K bytes of data. In addition, since LOB columns are used, the AQ administrator can specify the LOB tablespace and configure the LOB storage by providing a storage string in the storage_clause parameter in the call to the DBMS_AQADM.<A
CLASS="indexterm"
NAME="ch05-idx-15939-0"
></A
><A
CLASS="indexterm"
NAME="ch05-idx-15939-1"
></A
>CREATE_QUEUE_TABLE procedure.</P
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch05-SECT-3.4"
>5.3.4 Agents Object Type</A
></H3
><P
CLASS="para"
>An <A
CLASS="indexterm"
NAME="ch05-idx-15944-0"
></A
>agent is an object that produces or consumes a message. You will create agents in order to specify subscribers for queues and also to create recipient lists for the dissemination of messages. You define an agent as an instance of the following object type,</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>TYPE SYS.AQ$_AGENT IS OBJECT 
  (name VARCHAR2(30),
   address VARCHAR2(1024),
   protocol NUMBER);</PRE
></BLOCKQUOTE
><P
CLASS="para"
>where the name is the name of the agent, and address is a character field of up to 1024 bytes that is interpreted according to the protocol value (of which the only supported value is currently 0). A <A
CLASS="indexterm"
NAME="ch05-idx-15954-0"
></A
>protocol of 0 indicates that the address is to be interpreted as a database link. The address will therefore have this form: queue_name@dblink, where queue_name has the form [schema.]queue and dblink is either a fully qualified database link name or a database link name that does not incorporate the domain name. </P
><P
CLASS="para"
>Here is an example of defining an agent to be used with AQ:<A
CLASS="indexterm"
NAME="ch05-idx-15952-0"
></A
></P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>DECLARE
   consumer_agent SYS.AQ$_AGENT;
BEGIN
   /* And now I use the constructor method to give
      a name to that object. */
   consumer_agent := SYS.AQ$_AGENT ('CLERK');</PRE
></BLOCKQUOTE
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch05-SECT-3.5"
>5.3.5 Recipient and Subscriber List Table Types</A
></H3
><P
CLASS="para"
>The <A
CLASS="indexterm"
NAME="ch05-idx-15956-0"
></A
>subscriber and<A
CLASS="indexterm"
NAME="ch05-idx-15957-0"
></A
> recipient lists are lists of agents, each of which is an instance of one of the following two index-by table types: </P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>TYPE DBMS_AQ.AQ$_RECIPIENT_LIST_T IS TABLE OF SYS.AQ$_AGENT
   INDEX BY BINARY_INTEGER;

TYPE DBMS_AQADM.AQ$_SUBSCRIBER_LIST_T IS TABLE OF SYS.AQ$_AGENT
   INDEX BY BINARY_INTEGER;</PRE
></BLOCKQUOTE
><P
CLASS="para"
>The recipient list is used when enqueuing a message to establish a specific list of agents who can dequeue or consume a message. It is therefore defined in the DBMS_AQ package.</P
><P
CLASS="para"
>The subscriber list is used to enqueue a message to a list of subscribers for a given queue. You will call the DBMS_AQADM.QUEUE_SUBSCRIBERS function to obtain the subscript list for a queue. The subscripter list table type is therefore defined in the DBMS_AQADM package. As you can see, these table types are identical in structure; only their names differ.</P
><P
CLASS="para"
>The following block of code demonstrates the creation of a recipient list:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>DECLARE
   recipients DBMS_AQ.AQ$_RECIPIENT _LIST_T;
BEGIN
   recipients(1) := SYS.AQ$_AGENT ('DBA');
   recipients(2) := SYS.AQ$_AGENT ('DESIGNER');
   recipients(3) := SYS.AQ$_AGENT ('DEVELOPER');</PRE
></BLOCKQUOTE
><P
CLASS="para"
>See the <A
CLASS="xref"
HREF="ch05_07.htm#ch05-SECT-7.5.1"
>Section 5.7</A
>" section entitled <A
CLASS="xref"
HREF="ch05_07.htm#ch05-SECT-7.5.1"
>Section 5.7.8, "Working with Multiple Consumers"</A
>" for a complete example of the creation of recipient lists and the association of those lists with a queued message.</P
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch05-21084"
>5.3.6 Message Properties Record Type</A
></H3
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="ch05-idx-15958-0"
></A
>When you enqueue a message, you can associate a set of properties with that message. You can then also receive these properties (or most of them) when you dequeue the message. You define the properties of a message by declaring and populating a PL/SQL record based on the following record type:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>TYPE DBMS_AQ.MESSAGE_PROPERTIES_T IS RECORD 
   (priority        BINARY_INTEGER DEFAULT 1,
    delay           BINARY_INTEGER DEFAULT DBMS_AQ.NO_DELAY,
    expiration      BINARY_INTEGER DEFAULT DBMS_AQ.NEVER,
    correlation     VARCHAR2(128) DEFAULT NULL,
    attempts        BINARY_INTEGER,
    recipient_list  DBMS_AQ.AQ$_RECIPIENT_LIST_T,
    exception_queue VARCHAR2(51) DEFAULT NULL,
    enqueue_time    DATE,
    state           BINARY_INTEGER);</PRE
></BLOCKQUOTE
><P
CLASS="para"
>Here is an explanation of the various fields of this record type:</P
><DL
CLASS="variablelist"
><DT
CLASS="term"
>priority </DT
><DD
CLASS="listitem"
><P
CLASS="para"
>Specifies the <A
CLASS="indexterm"
NAME="ch05-idx-15960-0"
></A
>priority of the message you are queueing. A smaller number indicates a higher priority. The priority can be any number, including negative numbers. The default is 1.</P
></DD
><DT
CLASS="term"
>delay </DT
><DD
CLASS="listitem"
><P
CLASS="para"
>Specifies the <A
CLASS="indexterm"
NAME="ch05-idx-15961-0"
></A
><A
CLASS="indexterm"
NAME="ch05-idx-15961-1"
></A
>delay of the enqueued message. This value indicates the number of seconds after which a message becomes available for dequeuing. If you specify DBMS_AQ.NO_DELAY (the default), then the message is available for immediate dequeueing. A message enqueued with a delay set will be placed in the WAITING state. When the delay time expires, the message changes to the READY state. Delay processing requires that the Queue Monitor be started.</P
></DD
></DL
><BLOCKQUOTE
CLASS="note"
><P
CLASS="para"
><STRONG
>NOTE:</STRONG
> Dequeuing by the message ID overrides the delay specification. In addition, the delay is set by the <A
CLASS="indexterm"
NAME="ch05-idx-15962-0"
></A
>producer, who enqueues the message, not the <A
CLASS="indexterm"
NAME="ch05-idx-15963-0"
></A
>consumer, who dequeues the message.</P
></BLOCKQUOTE
><DL
CLASS="variablelist"
><DT
CLASS="term"
> <A
CLASS="indexterm"
NAME="ch05-idx-15964-0"
></A
><A
CLASS="indexterm"
NAME="ch05-idx-15964-1"
></A
>expiration </DT
><DD
CLASS="listitem"
><P
CLASS="para"
>Specifies the time in seconds after which the message expires. This value determines the number of seconds a message will remain in the READY state, available for dequeuing. If you specify DBMS_AQ.NEVER, then the message will never expire (the default behavior). If the message is not dequeued before it expires, it will be moved to the exception queue in the EXPIRED state.</P
><P
CLASS="para"
>This parameter is an offset from the delay value specified (see earlier). Expiration processing requires that the Queue Monitor be running. </P
></DD
><DT
CLASS="term"
><A
CLASS="indexterm"
NAME="ch05-idx-15965-0"
></A
><A
CLASS="indexterm"
NAME="ch05-idx-15965-1"
></A
>correlation </DT
><DD
CLASS="listitem"
><P
CLASS="para"
>Specifies identification supplied by the producer for a message at enqueuing. This is a free-form text field. Place whatever value you would like to use to later identify this message for dequeuing.</P
></DD
><DT
CLASS="term"
> <A
CLASS="indexterm"
NAME="ch05-idx-15966-0"
></A
>attempts </DT
><DD
CLASS="listitem"
><P
CLASS="para"
>Specifies the number of attempts that have been made to dequeue this message. This parameter cannot be set at enqueue time. Instead, it is maintained automatically by AQ and is available when you have dequeued the message. </P
></DD
><DT
CLASS="term"
><A
CLASS="indexterm"
NAME="ch05-idx-15967-0"
></A
><A
CLASS="indexterm"
NAME="ch05-idx-15967-1"
></A
>recipient_list </DT
><DD
CLASS="listitem"
><P
CLASS="para"
>A table containing a list of agents. This parameter is valid only for queues that allow multiple consumers. If you do not specify a recipient list, then the default recipients of this message are the agents identified as subscribers to the queue (with a call to DBMS_AQADM.ADD_SUBSCRIBER). This parameter is not returned to a consumer at dequeue time. </P
></DD
><DT
CLASS="term"
> <A
CLASS="indexterm"
NAME="ch05-idx-15968-0"
></A
><A
CLASS="indexterm"
NAME="ch05-idx-15968-1"
></A
>exception_queue </DT
><DD
CLASS="listitem"
><P
CLASS="para"
>Specifies the name of the queue to which the message is moved if it cannot be processed successfully. You specify this value at enqueue time.</P
><P
CLASS="para"
>Messages are moved in two cases: the number of unsuccessful dequeue attempts has exceeded the maximum number of retries, or the message has expired. All messages in the exception queue are set to the EXPIRED state. If you do not specify an exception queue, the exception queue associated with the queue table is used. If the exception queue specified does not exist at the time of the move, the message will be moved to the default exception queue associated with the queue table. A warning will then be logged in the Oracle alert file. If the default exception queue is used, the parameter will return a NULL value at dequeue time.</P
><P
CLASS="para"
>You will find an example of using a non-default exception queue in the <A
CLASS="xref"
HREF="ch05_07.htm#ch05-SECT-7.5.1"
>Section 5.7</A
>" section entitled <A
CLASS="xref"
HREF="ch05_07.htm#ch05-SECT-7.5.1"
>Section 5.7.6, "Using Time Delay and Expiration"</A
>."</P
></DD
><DT
CLASS="term"
><A
CLASS="indexterm"
NAME="ch05-idx-15969-0"
></A
>enqueue_time </DT
><DD
CLASS="listitem"
><P
CLASS="para"
>Specifies the time the message was enqueued. This value is determined by the system and cannot be set by the user. This parameter cannot be set at enqueue time. It is available only when the message is dequeued.</P
></DD
><DT
CLASS="term"
> <A
CLASS="indexterm"
NAME="ch05-idx-15970-0"
></A
>state </DT
><DD
CLASS="listitem"
><P
CLASS="para"
>Specifies the state of the message at the time of the dequeue. This parameter cannot be set at enqueue time. Instead, this state is maintained automatically by AQ and can be one of the following values:</P
></DD
><DT
CLASS="term"
><I
CLASS="filename"
>DBMS_AQ.WAITING</I
></DT
><DD
CLASS="listitem"
><P
CLASS="para"
>The message delay has not yet been reached (value = 1).</P
></DD
><DT
CLASS="term"
><I
CLASS="filename"
>DBMS_AQ.READY</I
></DT
><DD
CLASS="listitem"
><P
CLASS="para"
>The message is ready to be processed (value = 0).</P
></DD
><DT
CLASS="term"
><I
CLASS="filename"
>DBMS_AQ.PROCESSED</I
></DT
><DD
CLASS="listitem"
><P
CLASS="para"
>The message has been processed and is retained (value = 3).</P
></DD
><DT
CLASS="term"
><I
CLASS="filename"
>DBMS_AQ.EXPIRED</I
></DT
><DD
CLASS="listitem"
><P
CLASS="para"
>The message has been moved to the exception queue (value = 4).</P
></DD
></DL
><P
CLASS="para"
>The following block of code demonstrates how to define a message properties record and set several of the fields:<A
CLASS="indexterm"
NAME="ch05-idx-15959-0"
></A
></P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>DECLARE
   msgprop DBMS_AQ.MESSAGE_PROPERTIES_T;
BEGIN
   msgprop.priority := -100; /* high priority */
   msgprop.delay := 60*60*24 /* delay for one day */
   msgprop.expiration := 60*60; /* expire one hour after delay */</PRE
></BLOCKQUOTE
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch05-15593"
>5.3.7 Enqueue Options Record Type</A
></H3
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="ch05-idx-15971-0"
></A
>When you enqueue a message, you can specify the options you want associated with that message. You do this by declaring and populating a record based on the following record type:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>TYPE DBMS_AQ.ENQUEUE_OPTIONS_T IS RECORD 
   (visibility          BINARY_INTEGER DEFAULT DBMS_AQ.ON_COMMIT,
    relative_msgid      RAW(16) DEFAULT NULL,
    sequence_deviation  BINARY_INTEGER DEFAULT NULL);</PRE
></BLOCKQUOTE
><P
CLASS="para"
>Fields have the following meanings:</P
><DL
CLASS="variablelist"
><DT
CLASS="term"
><A
CLASS="indexterm"
NAME="ch05-idx-15975-0"
></A
><A
CLASS="indexterm"
NAME="ch05-idx-15975-1"
></A
>visibility </DT
><DD
CLASS="listitem"
><P
CLASS="para"
>Specifies the transactional behavior of the enqueue request. There are two possible values:</P
></DD
><DT
CLASS="term"
><I
CLASS="filename"
>DBMS_AQ.ON_COMMIT</I
></DT
><DD
CLASS="listitem"
><P
CLASS="para"
>The enqueue is treated as part of the current transaction. The enqueue operation completes only when the transaction commits. This is the default case. </P
></DD
><DT
CLASS="term"
><I
CLASS="filename"
>DBMS_AQ.IMMEDIATE</I
></DT
><DD
CLASS="listitem"
><P
CLASS="para"
>The enqueue is not treated as part of the current transaction. Instead, the enqueue operation acts as its own transaction. The queued message is then immediately available for dequeuing by other Oracle sessions.</P
></DD
><DT
CLASS="term"
><A
CLASS="indexterm"
NAME="ch05-idx-16820-0"
></A
><A
CLASS="indexterm"
NAME="ch05-idx-16820-1"
></A
>relative_msgid </DT
><DD
CLASS="listitem"
><P
CLASS="para"
>Specifies the message identifier of the message referenced in the sequence deviation operation. This field is valid if, and only if, BEFORE is specified in the sequence_deviation field (see the next field description). This parameter will be ignored if sequence deviation is not specified (i.e., if the default of NULL is used for the sequence_deviation field).</P
></DD
><DT
CLASS="term"
><A
CLASS="indexterm"
NAME="ch05-idx-15978-0"
></A
>sequence_deviation </DT
><DD
CLASS="listitem"
><P
CLASS="para"
>Specifies whether the message being enqueued should be dequeued before other message(s) already in the queue. There are three valid options:</P
></DD
><DT
CLASS="term"
><I
CLASS="filename"
>DBMS_AQ.BEFORE</I
></DT
><DD
CLASS="listitem"
><P
CLASS="para"
>The message is enqueued ahead of the message specified by relative_msgid. </P
></DD
><DT
CLASS="term"
><I
CLASS="filename"
>DBMS_AQ.TOP</I
></DT
><DD
CLASS="listitem"
><P
CLASS="para"
>The message is enqueued ahead of any other messages. </P
></DD
><DT
CLASS="term"
><I
CLASS="filename"
>NULL</I
></DT
><DD
CLASS="listitem"
><P
CLASS="para"
>The default value, specifying that there is no deviation from the normal sequence for dequeueing.</P
></DD
></DL
><P
CLASS="para"
>The following block of code sets up the enqueue properties such that the queued message goes to the top of the queue and is made immediately visible to other sessions:<A
CLASS="indexterm"
NAME="ch05-idx-15973-0"
></A
></P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>DECLARE
   queueopts DBMS_AQ.ENQUEUE_OPTIONS_T;
BEGIN
   queueopts.visibility := DBMS_AQ.IMMEDIATE;
   queueopts.sequence_deviation := DBMS_AQ.TOP;</PRE
></BLOCKQUOTE
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch05-25524"
>5.3.8 Dequeue Options Record Type</A
></H3
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="ch05-idx-15979-0"
></A
>When you dequeue a message, you can specify the options you want associated with that message by declaring and populating a record based on the following record type:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>TYPE DBMS_AQ.DEQUEUE_OPTIONS_T IS RECORD 
   (consumer_name  VARCHAR2(30) DEFAULT NULL,
    dequeue_mode   BINARY_INTEGER DEFAULT DBMS_AQ.REMOVE,
    navigation     BINARY_INTEGER DEFAULT DBMS_AQ.NEXT_MESSAGE,
    visibility     BINARY_INTEGER DEFAULT DBMS_AQ.ON_COMMIT,
    wait           BINARY_INTEGER DEFAULT DBMS_AQ.FOREVER
    msgid          RAW(16) DEFAULT NULL,
    correlation    VARCHAR2(128) DEFAULT NULL);</PRE
></BLOCKQUOTE
><P
CLASS="para"
>Fields have the following meanings:</P
><DL
CLASS="variablelist"
><DT
CLASS="term"
><A
CLASS="indexterm"
NAME="ch05-idx-16821-0"
></A
>consumer_name </DT
><DD
CLASS="listitem"
><P
CLASS="para"
>Specifies the name of the consumer of this message. Only those messages matching the consumer name are accessed. If a queue is not set up for multiple consumers (either subscribers to the queue as a whole or the recipient list specified at the time of queuing), this field should be set to NULL (the default). </P
></DD
><DT
CLASS="term"
> <A
CLASS="indexterm"
NAME="ch05-idx-15983-0"
></A
><A
CLASS="indexterm"
NAME="ch05-idx-15983-1"
></A
>dequeue_mode </DT
><DD
CLASS="listitem"
><P
CLASS="para"
>Specifies the locking behavior associated with the dequeue operation. These are the valid options:</P
></DD
><DT
CLASS="term"
><I
CLASS="filename"
>DBMS_AQ.BROWSE</I
></DT
><DD
CLASS="listitem"
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="ch05-idx-15985-0"
></A
><A
CLASS="indexterm"
NAME="ch05-idx-15985-1"
></A
>Read the message without acquiring any lock on the message. This is equivalent to a query: "readers never block writers or readers." </P
></DD
><DT
CLASS="term"
><I
CLASS="filename"
>DBMS_AQ.LOCKED</I
></DT
><DD
CLASS="listitem"
><P
CLASS="para"
>Read and obtain a write lock on the message. The lock lasts for the duration of the transaction. This is equivalent to a SELECT FOR UPDATE statement. </P
></DD
><DT
CLASS="term"
><I
CLASS="filename"
>DBMS_AQ.REMOVE</I
></DT
><DD
CLASS="listitem"
><P
CLASS="para"
>Read the message and update or delete it. This is the default behavior. When you read from the queue, the message is removed from the queue. Note that the message can be retained in the queue table based on its retention properties. </P
></DD
><DT
CLASS="term"
> <A
CLASS="indexterm"
NAME="ch05-idx-15986-0"
></A
><A
CLASS="indexterm"
NAME="ch05-idx-15986-1"
></A
><A
CLASS="indexterm"
NAME="ch05-idx-15986-2"
></A
><A
CLASS="indexterm"
NAME="ch05-idx-15986-3"
></A
>navigation </DT
><DD
CLASS="listitem"
><P
CLASS="para"
>Specifies the position of the message that will be retrieved next. When you perform a dequeue, the following steps are taken: (a) the position in the queue is determined; (b) the search criterion specified by this and other fields is applied; and (c) the appropriate message is retrieved. These are the valid options for this field:</P
></DD
><DT
CLASS="term"
><I
CLASS="filename"
>DBMS_AQ.NEXT_MESSAGE</I
></DT
><DD
CLASS="listitem"
><P
CLASS="para"
>Retrieve the next message that is available and matches all the search criteria. If the previous message belongs to a message group, AQ will retrieve the next available message that matches the search criteria and belongs to the message group. This is the default behavior. </P
></DD
><DT
CLASS="term"
><I
CLASS="filename"
>DBMS_AQ.NEXT_TRANSACTION</I
></DT
><DD
CLASS="listitem"
><P
CLASS="para"
>Skip the remainder of the current transaction group (if any) and retrieve the first message of the next transaction group. This option can be used only if message grouping is enabled for the current queue. </P
></DD
><DT
CLASS="term"
><I
CLASS="filename"
>DBMS_AQ.FIRST_MESSAGE</I
></DT
><DD
CLASS="listitem"
><P
CLASS="para"
>Retrieve the first message that is available and matches the search criteria. This will reset the current position to the beginning of the queue. </P
></DD
><DT
CLASS="term"
><A
CLASS="indexterm"
NAME="ch05-idx-15988-0"
></A
><A
CLASS="indexterm"
NAME="ch05-idx-15988-1"
></A
> visibility </DT
><DD
CLASS="listitem"
><P
CLASS="para"
>Specifies whether the new message is dequeued as part of the current transaction. This parameter is ignored when you have specified the BROWSE mode to read the queue. The following options are valid:</P
></DD
><DT
CLASS="term"
><I
CLASS="filename"
>DBMS_AQ.ON_COMMIT</I
></DT
><DD
CLASS="listitem"
><P
CLASS="para"
>The dequeue is treated as part of the current transaction. The dequeue operation completes only when the transaction commits. This is the default case. </P
></DD
><DT
CLASS="term"
><I
CLASS="filename"
>DBMS_AQ.IMMEDIATE</I
></DT
><DD
CLASS="listitem"
><P
CLASS="para"
>The dequeue is not treated as part of the current transaction. Instead, the dequeue operation acts as its own transaction. The queued message is then immediately available for dequeuing by other Oracle sessions.</P
></DD
><DT
CLASS="term"
> <A
CLASS="indexterm"
NAME="ch05-idx-15989-0"
></A
><A
CLASS="indexterm"
NAME="ch05-idx-15989-1"
></A
>wait </DT
><DD
CLASS="listitem"
><P
CLASS="para"
>Specifies the number of seconds to wait if there is currently no message available matching the search criteria. If the queue table for this queue specified message grouping, then this value is applied only after the last message in a group has been dequeued. You can specify a number of seconds or one of the following named constants:</P
></DD
><DT
CLASS="term"
><I
CLASS="filename"
>DBMS_AQ.FOREVER</I
></DT
><DD
CLASS="listitem"
><P
CLASS="para"
>Wait forever. This is the default. </P
></DD
><DT
CLASS="term"
><I
CLASS="filename"
>DBMS_AQ.NO_WAIT</I
></DT
><DD
CLASS="listitem"
><P
CLASS="para"
>Do not wait at all. If there is no matching message, then return to the calling program immediately.</P
></DD
><DT
CLASS="term"
> <A
CLASS="indexterm"
NAME="ch05-idx-15990-0"
></A
><A
CLASS="indexterm"
NAME="ch05-idx-15990-1"
></A
><A
CLASS="indexterm"
NAME="ch05-idx-15990-2"
></A
>msgid </DT
><DD
CLASS="listitem"
><P
CLASS="para"
>Specifies the message identifier of the message to be dequeued. If you specify the message ID, then you can bypass other criteria establishing the next message for dequeuing.</P
></DD
><DT
CLASS="term"
> <A
CLASS="indexterm"
NAME="ch05-idx-15991-0"
></A
><A
CLASS="indexterm"
NAME="ch05-idx-15991-1"
></A
>correlation </DT
><DD
CLASS="listitem"
><P
CLASS="para"
>Specifies the correlation identifier of the message to be dequeued. If you provided a correlation string when you enqueued this message, that string will be used as part of the criteria to establish the next message. You can perform pattern matching by including the percent sign (%) or the underscore ( _ ) in your correlation identifier. These characters follow the standard SQL wildcard rules. If more than one message matches the pattern, the order of dequeuing is not determined.<A
CLASS="indexterm"
NAME="ch05-idx-15981-0"
></A
></P
></DD
></DL
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch05-SECT-3.9"
>5.3.9 Oracle AQ Exceptions</A
></H3
><P
CLASS="para"
>There are no named <A
CLASS="indexterm"
NAME="ch05-idx-15992-0"
></A
><A
CLASS="indexterm"
NAME="ch05-idx-15992-1"
></A
><A
CLASS="indexterm"
NAME="ch05-idx-15992-2"
></A
>exceptions defined in either of the AQ packages. Instead, Oracle has set aside error messages for Oracle AQ in the following ranges:</P
><TABLE
CLASS="simplelist"
BORDER="0"
><TR
><TD
CLASS="member"
>-24099 through -24000</TD
></TR
><TR
><TD
CLASS="member"
>-25299 through -25200</TD
></TR
></TABLE
><P
CLASS="para"
>Here are some of the more common exceptions you will encounter:</P
><DL
CLASS="variablelist"
><DT
CLASS="term"
>ORA-24010: QUEUE &lt;queue&gt; does not exist</DT
><DD
CLASS="listitem"
><P
CLASS="para"
>You have tried to perform an operation on a queue that does not yet exist.</P
></DD
><DT
CLASS="term"
>ORA-24001: cannot create QUEUE_TABLE, &lt;queue_table&gt; already exists</DT
><DD
CLASS="listitem"
><P
CLASS="para"
>You have tried to create a queue table, but there is already one by that name.</P
></DD
><DT
CLASS="term"
>ORA-24011: cannot drop QUEUE, &lt;queue&gt; should be stopped first</DT
><DD
CLASS="listitem"
><P
CLASS="para"
>You have tried to drop a queue that has not been stopped.</P
></DD
><DT
CLASS="term"
>ORA-24012: cannot drop QUEUE_TABLE, some queues in &lt;queue_table&gt; have not been dropped</DT
><DD
CLASS="listitem"
><P
CLASS="para"
>You must stop and drop all queues in a queue table before the queue table itself can be dropped.</P
></DD
><DT
CLASS="term"
>ORA-24034: application &lt;agent_name&gt; is already a subscriber for queue &lt;queue&gt;</DT
><DD
CLASS="listitem"
><P
CLASS="para"
>You tried to add an agent to a subscriber list that is already present. Note that agent names are not case-sensitive. </P
></DD
><DT
CLASS="term"
>ORA-25215: user_data type and queue type do not match</DT
><DD
CLASS="listitem"
><P
CLASS="para"
>The object type specified in an enqueue operation does not match the object type used to define the queue table.</P
></DD
><DT
CLASS="term"
>ORA-25228: timeout in dequeue from &lt;queue&gt; while waiting for a message</DT
><DD
CLASS="listitem"
><P
CLASS="para"
>This error usually occurs when you try to dequeue a message from an empty queue.</P
></DD
><DT
CLASS="term"
>ORA-25235: fetched all messages in current transaction </DT
><DD
CLASS="listitem"
><P
CLASS="para"
>You have dequeued the last message in the current message group. You must now specify NEXT_TRANSACTION navigation in order to start dequeuing messages from the next available group.</P
></DD
><DT
CLASS="term"
>ORA-25237: navigation option used out of sequence</DT
><DD
CLASS="listitem"
><P
CLASS="para"
>The NEXT_MESSAGE or NEXT_TRANSACTION option was specified after dequeuing all the messages. You must reset the dequeuing position using the FIRST_MESSAGE navigation option and then specify the NEXT_MESSAGE or NEXT_TRANSACTION option.<A
CLASS="indexterm"
NAME="ch05-idx-15895-0"
></A
></P
></DD
></DL
></DIV
></DIV
><DIV
CLASS="htmlnav"
><P
></P
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch05_02.htm#ch05-SECT-2.2.3"
TITLE="5.2 Getting Started with Oracle AQ"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 5.2 Getting Started with Oracle AQ"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="book"
HREF="index.htm"
TITLE="Oracle Built-in Packages"
><IMG
SRC="../gifs/txthome.gif"
ALT="Oracle Built-in Packages"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch05_04.htm#ch05-SECT-4.1.1"
TITLE="5.4 DBMS_AQ: Interfacing to Oracle AQ (Oracle8 only)"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 5.4 DBMS_AQ: Interfacing to Oracle AQ (Oracle8 only)"
BORDER="0"></A
></TD
></TR
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
>5.2 Getting Started with Oracle AQ</TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="index"
HREF="index/idx_0.htm"
TITLE="Book Index"
><IMG
SRC="../gifs/index.gif"
ALT="Book Index"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
>5.4 DBMS_AQ: Interfacing to Oracle AQ (Oracle8 only)</TD
></TR
></TABLE
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"></DIV
><IMG SRC="../gifs/smnavbar.gif"
USEMAP="#map"
BORDER="0"
ALT="The Oracle Library Navigation">

<P><font size="-1">
<a href="../copyrght.htm#copy">Copyright (c) 2000</a> O'Reilly &amp; Associates. All rights reserved.
</font></P>

<MAP NAME="map">

<AREA SHAPE="RECT"
COORDS="0,0,35,30"
HREF="../index.htm"
ALT="Library Home">

<AREA SHAPE="RECT"
COORDS="40,0,95,30"
HREF="../prog2/index.htm"
ALT="Oracle PL/SQL Programming, 2nd. Ed.">

<AREA SHAPE="RECT"
COORDS="100,0,200,30"
HREF="../guide8i/index.htm"
ALT="Guide to Oracle 8i Features">

<AREA SHAPE="RECT"
COORDS="205,0,245,30"
HREF="index.htm"
ALT="Oracle Built-in Packages">

<AREA SHAPE="RECT"
COORDS="250,0,320,30"
HREF="../advprog/index.htm"
ALT="Advanced PL/SQL Programming with Packages">

<AREA SHAPE="RECT"
COORDS="325,0,420,30"
HREF="../webapp/index.htm"
ALT="Oracle Web Applications">

<AREA SHAPE="RECT"
COORDS="425,0,490,30"
HREF="../langpkt/index.htm"
ALT="Oracle PL/SQL Language Pocket Reference">

<AREA SHAPE="RECT"
COORDS="495,0,570,30"
HREF="../bipkt/index.htm"
ALT="Oracle PL/SQL Built-ins Pocket Reference">
</MAP>

</BODY
>
<!-- Mirrored from liso.cs.pusan.ac.kr by HTTrack Website Copier/3.x [XR&CO'2001] -->
</HTML
>
