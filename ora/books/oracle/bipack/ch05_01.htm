<HTML
><HEAD
><TITLE
>[Chapter 5] Oracle Advanced Queuing</TITLE
><META
NAME="DC.Creator"
CONTENT="Steven Feuerstein, Charles Dye &amp; John Beresniewicz"><META
NAME="DC.Date"
CONTENT="2000-04-29T17:49:20Z"><META
NAME="DC.Format"
CONTENT="text/html"
SCHEME="MIME"><META
NAME="DC.Identifier"
CONTENT="O'Reilly and Associates-1-56592-375-8E"><META
NAME="DC.Language"
CONTENT="en-US"><META
NAME="DC.Publisher"
CONTENT="O'Reilly &amp; Associates, Inc."><META
NAME="DC.Source"
CONTENT="1-56592-375-8E"
SCHEME="ISBN"><META
NAME="DC.Subject.Keyword"
CONTENT="Oracle Packages"><META
NAME="DC.Title"
CONTENT="Oracle Built-in Packages"><META
NAME="DC.Type"
CONTENT="Text.Monograph"><META
NAME="generator"
CONTENT="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><LINK
REL="stylesheet"
TYPE="text/css"
HREF="../style/style1.css"><LINK
REV="made"
HREF="mailto:online-books@oreilly.com"
TITLE="Online Books Comments"><LINK
REL="up"
HREF="part02.htm"
TITLE="II. Application Development Packages"><LINK
REL="prev"
HREF="ch04_02.htm#ch04-SECT-2.1.1"
TITLE="4.2 DBMS_TRANSACTION: Interfacing to SQL Transaction Statements"><LINK
REL="next"
HREF="ch05_02.htm#ch05-SECT-2.2.3"
TITLE="5.2 Getting Started with Oracle AQ"></HEAD
><BODY
><DIV
CLASS="htmlnav"
><H1
><IMG
SRC="gifs/smbanner.gif"
ALT="Oracle Built-in Packages"
USEMAP="#srchmap"
BORDER="0"></H1
><MAP
NAME="srchmap"
><AREA
SHAPE="RECT"
COORDS="0,0,466,65"
HREF="index.htm"
ALT="Oracle Built-in Packages"><AREA
SHAPE="RECT"
COORDS="467,0,514,18"
HREF="jobjects/fsearch.htm"
ALT="Search this book"></MAP
><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch04_02.htm#ch04-SECT-2.1.1"
TITLE="4.2 DBMS_TRANSACTION: Interfacing to SQL Transaction Statements"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 4.2 DBMS_TRANSACTION: Interfacing to SQL Transaction Statements"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><SPAN
CLASS="NAVTITLE"
>Chapter 5</SPAN
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch05_02.htm#ch05-SECT-2.2.3"
TITLE="5.2 Getting Started with Oracle AQ"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 5.2 Getting Started with Oracle AQ"
BORDER="0"></A
></TD
></TR
></TABLE
>&nbsp;<HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"></DIV
><DIV
CLASS="chapter"
><H1
CLASS="chapter"
><A
CLASS="title"
NAME="PACKAGES-CH-5"
>5. Oracle Advanced Queuing</A
></H1
><DIV
CLASS="htmltoc"
><P
><B
>Contents:</B
><BR><A
CLASS="sect1"
HREF="#ch05-16340"
TITLE="5.1 Oracle AQ Concepts"
>Oracle AQ Concepts</A
><BR><A
CLASS="sect1"
HREF="ch05_02.htm#ch05-SECT-2.2.3"
TITLE="5.2 Getting Started with Oracle AQ"
>Getting Started with Oracle AQ</A
><BR><A
CLASS="sect1"
HREF="ch05_03.htm#ch05-SECT-3.1.1"
TITLE="5.3 Oracle AQ Nonprogram Elements"
>Oracle AQ Nonprogram Elements</A
><BR><A
CLASS="sect1"
HREF="ch05_04.htm#ch05-SECT-4.1.1"
TITLE="5.4 DBMS_AQ: Interfacing to Oracle AQ (Oracle8 only)"
>DBMS_AQ: Interfacing to Oracle AQ (Oracle8 only)</A
><BR><A
CLASS="sect1"
HREF="ch05_05.htm"
TITLE="5.5 DBMS_AQADM: Performing AQ  Administrative Tasks (Oracle8 only)"
>DBMS_AQADM: Performing AQ  Administrative Tasks (Oracle8 only)</A
><BR><A
CLASS="sect1"
HREF="ch05_06.htm#ch05-SECT-6.2.3"
TITLE="5.6 Oracle AQ Database Objects"
>Oracle AQ Database Objects</A
><BR><A
CLASS="sect1"
HREF="ch05_07.htm#ch05-SECT-7.5.1"
TITLE="5.7 Oracle AQ Examples"
>Oracle AQ Examples</A
></P
><P
></P
></DIV
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="ch05-idx-16238-0"
></A
>Oracle8 offers a facility (new to Oracle 8) called Oracle AQ (Oracle <A
CLASS="indexterm"
NAME="ch05-idx-16237-0"
></A
>Advanced Queuing, referred to as AQ in this chapter) that will make it much easier for developers to build applications that require <A
CLASS="indexterm"
NAME="ch05-idx-16252-0"
></A
>deferred execution of activity. Oracle is positioning Oracle AQ as an alternative to the queuing mechanisms of teleprocessing monitors and messaging interfaces. Oracle AQ will serve as a foundation technology for <A
CLASS="indexterm"
NAME="ch05-idx-16255-0"
></A
>workflow management applications, both those delivered by Oracle Corporation itself and those implemented by third parties.</P
><P
CLASS="para"
>From a PL/SQL standpoint, Oracle AQ is made available through two packages: DBMS_AQADM and DBMS_AQ. The <A
CLASS="indexterm"
NAME="ch05-idx-15617-0"
></A
>DBMS_AQADM package is the interface to the administrative tasks of Oracle AQ. These tasks include:</P
><UL
CLASS="itemizedlist"
><LI
CLASS="listitem"
><P
CLASS="para"
>Creating or dropping queue tables that contain one or more queues </P
></LI
><LI
CLASS="listitem"
><P
CLASS="para"
>Creating, dropping, and altering queues, which are stored in a queue table</P
></LI
><LI
CLASS="listitem"
><P
CLASS="para"
>Starting and stopping queues in accepting message creation or consumption</P
></LI
></UL
><P
CLASS="para"
>Most users of the Oracle AQ facility will not work with DBMS_AQADM. The DBA will most likely initialize all needed queue tables and queues. PL/SQL developers will instead work with the <A
CLASS="indexterm"
NAME="ch05-idx-15618-0"
></A
>DBMS_AQ, whose tasks include:</P
><UL
CLASS="itemizedlist"
><LI
CLASS="listitem"
><P
CLASS="para"
>Creating a message to the specified queue </P
></LI
><LI
CLASS="listitem"
><P
CLASS="para"
>Consuming a message from the specified queue</P
></LI
></UL
><P
CLASS="para"
>Most of the background information presented early in this chapter applies to both packages. Later, we'll provide individual discussions of the two packages and their programs.</P
><P
CLASS="para"
>Oracle AQ is full of features and offers tremendous flexibility in how you manipulate messages in queues. It also has only a handful of programs with which to administer and operate the queues. This relatively small number of procedures and functions can, nevertheless, be misleading. You will probably encounter lots of frustrating moments as you come up to speed on Oracle AQ (I know I did). </P
><P
CLASS="para"
>Some of the frustration will arise from the way that Oracle allows you to modify the characteristics of queues, queue tables, and specific enqueue and dequeue operations by setting individual fields of PL/SQL records, which are then passed to the appropriate programs as arguments. If you are not comfortable with declaring and manipulating record structures in PL/SQL, you should read through <CITE
CLASS="citetitle"
>Chapter 9</CITE
> of <CITE
CLASS="citetitle"
>Oracle PL/SQL Programming</CITE
> (O'Reilly &amp; Associates, 1997) before continuing with this chapter.</P
><BLOCKQUOTE
CLASS="note"
><P
CLASS="para"
><STRONG
>NOTE:</STRONG
> <A
CLASS="indexterm"
NAME="ch05-idx-16259-0"
></A
><A
CLASS="indexterm"
NAME="ch05-idx-16259-1"
></A
>Oracle AQ first became available with Oracle 8.0.3. A number of Oracle AQ features described in this chapter were added in Oracle 8.0.4. These additions will be noted, but it is generally assumed in this chapter that you have installed and are using Oracle 8.0.4, which should be widely available by the time this book is published.</P
></BLOCKQUOTE
><DIV
CLASS="sect1"
><H2
CLASS="sect1"
><A
CLASS="title"
NAME="ch05-16340"
>5.1 Oracle AQ Concepts</A
></H2
><P
CLASS="para"
>Oracle AQ provides <A
CLASS="indexterm"
NAME="ch05-idx-15661-0"
></A
><A
CLASS="indexterm"
NAME="ch05-idx-15661-1"
></A
>message queuing as an integrated part of the Oracle server. It provides this functionality by integrating the queuing system with the database itself. Oracle Corporation is therefore now beginning to describe Oracle8 not only as an object-relational database, but also as a "message-enabled" database. Its intention is to free application developers from having to construct a messaging infrastructure (or rely on a third-party tool such as a TP monitor). Instead they can use AQ and devote their efforts to implementing their own specific business rules. </P
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch05-SECT-1.1"
>5.1.1 General Features</A
></H3
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="ch05-idx-16266-0"
></A
>The following list summarizes Oracle's perspective on the features of the AQ facility that it offers to developers:</P
><DL
CLASS="variablelist"
><DT
CLASS="term"
>SQL-based access and management</DT
><DD
CLASS="listitem"
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="ch05-idx-15625-0"
></A
><A
CLASS="indexterm"
NAME="ch05-idx-15625-1"
></A
><A
CLASS="indexterm"
NAME="ch05-idx-15625-2"
></A
>Messages are placed in normal rows in a database table. They can be queried using standard SQL. Thus, users can use SQL to access the message properties, the message history, and the payload. All available SQL technology, such as indexes, can be used to optimize the access to these messages. </P
></DD
><DT
CLASS="term"
>Integrated database-level operational support </DT
><DD
CLASS="listitem"
><P
CLASS="para"
>All standard database features, such as recovery, restart, and enterprise manager, are supported. Oracle AQ queues are implemented in database tables; thus, all the operational benefits of high availability, scalability, and reliability are applicable to queue data. In addition, database development and management tools can be used with queues. For instance, queue tables can be imported and exported. </P
></DD
><DT
CLASS="term"
>Structured payload</DT
><DD
CLASS="listitem"
><P
CLASS="para"
>Users can use object types to structure and manage the <EM
CLASS="emphasis"
>payload</EM
><A
CLASS="indexterm"
NAME="ch05-idx-15680-0"
></A
><A
CLASS="indexterm"
NAME="ch05-idx-15680-1"
></A
><A
CLASS="indexterm"
NAME="ch05-idx-15680-2"
></A
> (i.e., content). RDBMSs in general have had a far richer typing system than messaging systems. Since Oracle8 is an object-relational DBMS, it supports traditional relational types and also user-defined types. Many powerful features are enabled as a result of having <A
CLASS="indexterm"
NAME="ch05-idx-15681-0"
></A
><A
CLASS="indexterm"
NAME="ch05-idx-15681-1"
></A
>strongly typed content (i.e., content whose format is defined by an external type system). These include: </P
></DD
><DT
CLASS="term"
><EM
CLASS="emphasis"
>Content-based routing</EM
></DT
><DD
CLASS="listitem"
><P
CLASS="para"
>An external agent can examine the content and route the message to another queue based on the content. </P
></DD
><DT
CLASS="term"
><EM
CLASS="emphasis"
>Content-based subscription</EM
></DT
><DD
CLASS="listitem"
><P
CLASS="para"
>A publish and subscribe system built on top of a messaging system can offer content based on subscription. </P
></DD
><DT
CLASS="term"
><EM
CLASS="emphasis"
>Querying</EM
></DT
><DD
CLASS="listitem"
><P
CLASS="para"
>The ability to execute queries on the content of the message enables message warehousing. </P
></DD
><DT
CLASS="term"
>Retention and message history</DT
><DD
CLASS="listitem"
><P
CLASS="para"
>Users can specify that <A
CLASS="indexterm"
NAME="ch05-idx-15697-0"
></A
>messages be retained after consumption. The system administrator can specify the duration for which messages will be retained. Oracle AQ stores information about the history of each message. The information contains the enqueue/dequeue time and the identification of the transaction that executed each request. This allows users to keep a history of relevant messages. The history can be used for tracking, data warehouse, and data mining operations. </P
></DD
><DT
CLASS="term"
>Tracking and event journals</DT
><DD
CLASS="listitem"
><P
CLASS="para"
>If messages are retained they can be related to each other. For example, if a message m2 is produced as a result of the consumption of message m1, m1 is related to m2. This facility allows users to track sequences of related messages. These sequences represent "<A
CLASS="indexterm"
NAME="ch05-idx-15699-0"
></A
>event journals" that are often constructed by applications. Oracle AQ is designed to let applications create event journals automatically. </P
></DD
></DL
><BLOCKQUOTE
CLASS="note"
><P
CLASS="para"
><STRONG
>NOTE:</STRONG
> Oracle AQ does not automatically produce messages as a result of the consumption of other messages. You will do this programmatically. On the other hand, Oracle AQ does automatically track that these messages were processed in the same transaction.</P
></BLOCKQUOTE
><DL
CLASS="variablelist"
><DT
CLASS="term"
>Integrated transactions</DT
><DD
CLASS="listitem"
><P
CLASS="para"
>The integration of control information with content (data payload) simplifies application development and management. </P
></DD
></DL
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch05-SECT-1.2"
>5.1.2 Enqueue Features</A
></H3
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="ch05-idx-15700-0"
></A
><A
CLASS="indexterm"
NAME="ch05-idx-15700-1"
></A
>Oracle AQ offers a wide sweep of options for the way you enqueue messages.</P
><DL
CLASS="variablelist"
><DT
CLASS="term"
>Correlation identifier</DT
><DD
CLASS="listitem"
><P
CLASS="para"
>Users can assign an identifier to each message, thus providing a means of retrieving specific messages at a later time. </P
></DD
><DT
CLASS="term"
><A
CLASS="indexterm"
NAME="ch05-idx-15707-0"
></A
><A
CLASS="indexterm"
NAME="ch05-idx-15708-0"
></A
><A
CLASS="indexterm"
NAME="ch05-idx-15708-1"
></A
>Subscription and recipient lists</DT
><DD
CLASS="listitem"
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="ch05-idx-16291-0"
></A
><A
CLASS="indexterm"
NAME="ch05-idx-16291-1"
></A
>Multiple consumers can consume a single message. A queue administrator can specify the list of subscribers who can retrieve messages from a queue. Different queues can have different subscribers, and a consumer program can be a subscriber to more than one queue. Further, specific messages in a queue can be directed toward specific recipients who may or may not be subscribers to the queue, thereby overriding the subscriber list. </P
></DD
><DT
CLASS="term"
>Prioritization and ordering of messages</DT
><DD
CLASS="listitem"
><P
CLASS="para"
>It is possible to specify the priority of the enqueued message. An enqueued message can also have its exact position in the queue specified. This means that users have three options to specify the order in which messages are consumed: (a) a sort order specifies which properties are used to order all messages in a queue; (b) a priority can be assigned to each message; (c) a sequence deviation allows you to position a message in relation to other messages. Furthermore, if several consumers act on the same queue, a consumer will get the first message that is available for immediate consumption. A message that is in the process of being consumed by another consumer will be skipped. </P
></DD
><DT
CLASS="term"
>Propagation</DT
><DD
CLASS="listitem"
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="ch05-idx-15709-0"
></A
>With Oracle 8.0.4 and later versions, applications can use AQ to communicate with one another without having to be connected to the same database instance or to the same queue. Instead, messages can be propagated from one Oracle AQ environment to another. These AQ instances can be local or remote. AQ propagation relies on database links and Net8.</P
></DD
><DT
CLASS="term"
>Message grouping</DT
><DD
CLASS="listitem"
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="ch05-idx-15710-0"
></A
><A
CLASS="indexterm"
NAME="ch05-idx-15711-0"
></A
>Messages belonging to one queue can be grouped to form a set that can only be consumed by one user at a time. This requires the queue be created in a queue table that is enabled for message grouping. Messages belonging to a group must be created in the same transaction, and all messages created in one transaction belong to the same group. This feature allows users to segment complex messages into simple messages. For example, messages directed to a queue containing invoices could be constructed as a group of messages starting with the header, followed by messages representing details, followed by the trailer message. </P
></DD
><DT
CLASS="term"
>Time specification and scheduling</DT
><DD
CLASS="listitem"
><P
CLASS="para"
>Delay interval and/or expiration intervals can be specified for an enqueued message, thereby providing windows of execution. A message can be marked as available for processing only after a specified time elapses (a delay time) and has to be consumed before a specified time limit expires. Messages can also be scheduled for propagation from a queue to a local or remote destination (Oracle 8.0.4 only). AQ administrators have the option to specify the start time, propagation window, and a function that determines the next propagation window for scheduling on a periodic basis.<A
CLASS="indexterm"
NAME="ch05-idx-15702-0"
></A
></P
></DD
></DL
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch05-SECT-1.3"
>5.1.3 Dequeue Features</A
></H3
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="ch05-idx-15713-0"
></A
><A
CLASS="indexterm"
NAME="ch05-idx-15713-1"
></A
>As you would expect, Oracle AQ also allows you to dequeue messages in a variety of methods.</P
><DL
CLASS="variablelist"
><DT
CLASS="term"
>Multiple recipients</DT
><DD
CLASS="listitem"
><P
CLASS="para"
>A message in a queue can be retrieved by multiple <A
CLASS="indexterm"
NAME="ch05-idx-15721-0"
></A
>recipients without the need to store multiple copies of that same message. </P
></DD
><DT
CLASS="term"
>Navigation of messages for dequeuing</DT
><DD
CLASS="listitem"
><P
CLASS="para"
>Users have several options for selecting a message from a queue. They can select the first message, or, once they have selected a message and established a position, they can retrieve the next. The selection is influenced by the ordering or can be limited by specifying a correlation identifier. Users can also retrieve a specific message using the message identifier. </P
></DD
><DT
CLASS="term"
>Multiple dequeue modes </DT
><DD
CLASS="listitem"
><P
CLASS="para"
>A dequeue request can either <A
CLASS="indexterm"
NAME="ch05-idx-15722-0"
></A
><A
CLASS="indexterm"
NAME="ch05-idx-15722-1"
></A
><A
CLASS="indexterm"
NAME="ch05-idx-15722-2"
></A
>browse or remove a message. If a message is browsed, it remains available for further processing; if a message is removed, it is no longer available for dequeue requests. Depending on the queue properties, a removed message may be retained in the queue table. </P
></DD
><DT
CLASS="term"
>Message-waiting optimization </DT
><DD
CLASS="listitem"
><P
CLASS="para"
>A dequeue could be issued against an empty queue. To avoid polling for the arrival of a new message, a user can specify if and for how long the request is allowed to wait for the arrival of a message. </P
></DD
><DT
CLASS="term"
>Retries with delays </DT
><DD
CLASS="listitem"
><P
CLASS="para"
>A message must be consumed exactly once. If an attempt to dequeue a message fails and the transaction is <A
CLASS="indexterm"
NAME="ch05-idx-15723-0"
></A
><A
CLASS="indexterm"
NAME="ch05-idx-15723-1"
></A
>rolled back, the message will be made available for reprocessing after some user-specified delay elapses. Reprocessing will be attempted up to the user-specified limit. </P
></DD
><DT
CLASS="term"
>Optional transaction protection</DT
><DD
CLASS="listitem"
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="ch05-idx-15724-0"
></A
><A
CLASS="indexterm"
NAME="ch05-idx-15724-1"
></A
><A
CLASS="indexterm"
NAME="ch05-idx-15724-2"
></A
><A
CLASS="indexterm"
NAME="ch05-idx-15724-3"
></A
>Enqueue/dequeue requests are normally part of a transaction that contains the requests, thereby providing the desired transactional behavior. Users can, however, specify that a specific request is a transaction by itself, making the result of that request immediately visible to other transactions. This means that messages can be made visible to the external world either as soon as the ENQUEUE or DEQUEUE statement is issued, or only after the transaction is committed. </P
></DD
><DT
CLASS="term"
>Exception handling</DT
><DD
CLASS="listitem"
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="ch05-idx-15725-0"
></A
>A message may not be consumed within given constraints&nbsp;-- that is, within the window of execution or within the limits of the retries. If such a condition arises, the message will be moved to a user-specified exception queue. <A
CLASS="indexterm"
NAME="ch05-idx-15716-0"
></A
></P
></DD
></DL
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch05-SECT-1.4"
>5.1.4 Propagation Features</A
></H3
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="ch05-idx-16384-0"
></A
><A
CLASS="indexterm"
NAME="ch05-idx-16384-1"
></A
>Oracle AQ with Oracle 8.0.4 supports propagation of messages, allowing automated coordination of enqueuing and dequeuing operations. <A
CLASS="indexterm"
NAME="ch05-idx-16386-0"
></A
><A
CLASS="indexterm"
NAME="ch05-idx-16386-1"
></A
>The recipient of a message can be either in the same database as AQ (local) or in another database (remote). Since Oracle8 does not support distributed object types, it is not possible to rely on standard database links to perform remote AQ operations. Instead, Oracle AQ offers a special message propagation facility to allow an agent to enqueue to a remote queue.</P
><P
CLASS="para"
>You can configure AQ so that any messages enqueued in one (local) queue will be automatically propagated to another queue in either the local or remote database. AQ checks automatically that the type of the local queue to which the message is enqueued is the same as the type of the remote queue (same payload type). You can perform this same check by calling the DBMS_AQADM.VERIFY_QUEUE_TYPES procedure.</P
><P
CLASS="para"
>There are two useful ways to think about employing message propagation in Oracle AQ: <EM
CLASS="emphasis"
>fanning out</EM
> and <EM
CLASS="emphasis"
> funnelling in</EM
> messages.</P
><DL
CLASS="variablelist"
><DT
CLASS="term"
><A
CLASS="indexterm"
NAME="ch05-idx-15739-0"
></A
><A
CLASS="indexterm"
NAME="ch05-idx-15739-1"
></A
><A
CLASS="indexterm"
NAME="ch05-idx-15739-2"
></A
>Fanning out messages</DT
><DD
CLASS="listitem"
><P
CLASS="para"
>Suppose you want to distribute a message to a large number of recipients without forcing those recipients to perform dequeue operations from a single queue. This is most important when working in a distributed database environment. You can accomplish this by defining another queue as a recipient of a message. When a queue is a recipient for a message, the actual recipients are the set of agents defined in the subscription list for that queue.</P
><P
CLASS="para"
>Consider the following scenario: an international human rights organization based in London has received news of the torture and imprisonment of a dissident. It needs to notify its branch organizations throughout the world as quickly as possible&nbsp;-- using Oracle AQ, of course. The subscribers to its <EM
CLASS="emphasis"
>urgent_alert</EM
> queue consist of each of its regional offices: <EM
CLASS="emphasis"
>urgent_alert@new_york</EM
>, <EM
CLASS="emphasis"
>urgent_alert@johannesburg,</EM
> and so on. Each of the regional urgent alert queues has as its subscribers the country offices. So the Johannesburg queue has the following subscribers: <EM
CLASS="emphasis"
>urgent_alert@harare</EM
>, <EM
CLASS="emphasis"
>urgent_alert@cairo,</EM
> and so on. </P
><P
CLASS="para"
>When the headquarters office enqueues the alert message to its <EM
CLASS="emphasis"
>urgent_alert</EM
> queue, the message will be propagated out to each regional office queue. That message will then in turn be propagated to each country office. <A
CLASS="xref"
HREF="ch05_01.htm"
>Figure 5.1</A
> illustrates the fanning out technique.</P
></DD
></DL
><H4
CLASS="figure"
><A
CLASS="title"
NAME="ch05-24457"
>Figure 5.1: Fanning out messages</A
></H4
><IMG
CLASS="graphic"
SRC="figs/obip.0501.gif"
ALT="Figure 5.1"><DL
CLASS="variablelist"
><DT
CLASS="term"
><A
CLASS="indexterm"
NAME="ch05-idx-15740-0"
></A
><A
CLASS="indexterm"
NAME="ch05-idx-15740-1"
></A
>Funnelling in messages</DT
><DD
CLASS="listitem"
><P
CLASS="para"
>It is also very useful to concentrate messages from different queues back to a single queue. Examples of this technique, also called "<A
CLASS="indexterm"
NAME="ch05-idx-15741-0"
></A
>compositing," include roll-up of monthly accounting figures from regional offices and confirmation messages in response to a broadcast.</P
><P
CLASS="para"
>If we use the same scenario as with the fanning out approach, each country office employs a <EM
CLASS="emphasis"
>report_back</EM
> queue to confirm that urgent alerts have been received and responded to. The subscriber list for each office's <EM
CLASS="emphasis"
>re</EM
><I
CLASS="filename"
>port_back</I
> queue include the regional office as well as the international office. As a result, the London-based <EM
CLASS="emphasis"
>report_back@london_hq</EM
> will automatically receive a copy of all confirmation reports without having to wait for those messages to be transferred back through the individual regional offices. <A
CLASS="xref"
HREF="ch05_01.htm"
>Figure 5.2</A
> illustrates the funneling in <A
CLASS="indexterm"
NAME="ch05-idx-15730-0"
></A
><A
CLASS="indexterm"
NAME="ch05-idx-15730-1"
></A
>technique.</P
></DD
></DL
><H4
CLASS="figure"
><A
CLASS="title"
NAME="ch05-17962"
>Figure 5.2: Funneling in messages</A
></H4
><IMG
CLASS="graphic"
SRC="figs/obip.0502.gif"
ALT="Figure 5.2"></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch05-SECT-1.5"
>5.1.5 A Glossary of Terms</A
></H3
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="ch05-idx-15742-0"
></A
>Before diving into the sometimes overwhelming details of configuring queue tables and queues and enqueuing and dequeuing messages, let's review some of the terms used throughout this chapter. Then we'll take a step back and look at the process flow for the queuing facility. At that point, you'll have a much easier job understanding and then deploying Oracle AQ.</P
><P
CLASS="para"
>The basic elements of Oracle AQ follow:</P
><DL
CLASS="variablelist"
><DT
CLASS="term"
>Message</DT
><DD
CLASS="listitem"
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="ch05-idx-15744-0"
></A
>The smallest unit of work in the queue, consisting of information about how the message is to be treated (metadata) and the <A
CLASS="indexterm"
NAME="ch05-idx-15748-0"
></A
><A
CLASS="indexterm"
NAME="ch05-idx-15748-1"
></A
>payload (the data supplied by the user). The metadata or control information is used by AQ to manage the messages. The payload information is stored in the queue and is transparent to AQ (that is, AQ does not try to <EM
CLASS="emphasis"
>interpret</EM
> that information in any way). A message resides in only one queue. It is created by a call to the DBMS_AQ.ENQUEUE procedure and is dequeued by a call to the DBMS_AQ.DEQUEUE procedure.</P
></DD
><DT
CLASS="term"
>Queue</DT
><DD
CLASS="listitem"
><P
CLASS="para"
>A <A
CLASS="indexterm"
NAME="ch05-idx-15749-0"
></A
><A
CLASS="indexterm"
NAME="ch05-idx-15749-1"
></A
>queue is a storage space for messages. You can create two different types of queues: <EM
CLASS="emphasis"
>user queues</EM
><A
CLASS="indexterm"
NAME="ch05-idx-15750-0"
></A
>, also known as<A
CLASS="indexterm"
NAME="ch05-idx-15751-0"
></A
> normal queues, and <EM
CLASS="emphasis"
>exception queues</EM
><A
CLASS="indexterm"
NAME="ch05-idx-15752-0"
></A
>. The user queue is employed for standard message processing. The exception queue is used to hold messages if attempts to retrieve the message through a dequeue operation fail (this is done automatically by AQ) or if the message is not dequeued before its expiration time. You will use the AQ administrative interface, the DBMS_AQADM package, to create, start, stop, and drop queues. </P
></DD
><DT
CLASS="term"
>Queue table</DT
><DD
CLASS="listitem"
><P
CLASS="para"
>A <A
CLASS="indexterm"
NAME="ch05-idx-15753-0"
></A
>queue table is a database table that holds one or more queues; this queue table is created when you create the queue table. Each queue table also contains a default exception queue. You will use the AQ administrative interface (the DBMS_AQADM package) to create and drop queue tables. </P
></DD
><DT
CLASS="term"
>Agent </DT
><DD
CLASS="listitem"
><P
CLASS="para"
>An <A
CLASS="indexterm"
NAME="ch05-idx-19852-0"
></A
><A
CLASS="indexterm"
NAME="ch05-idx-19852-1"
></A
>agent is a user of a queue. There are two types of agents: <EM
CLASS="emphasis"
>producers</EM
>, who place messages in a queue (enqueuing); and <EM
CLASS="emphasis"
>consumers</EM
>, who retrieve messages (dequeuing). Any number of producers and consumers may be accessing the queue at a given time. An agent's name, address, and protocol identify that agent. The address field is a character field of up to 1024 bytes that is interpreted according to the protocol value (of which the only supported value is currently 0). A <A
CLASS="indexterm"
NAME="ch05-idx-19854-0"
></A
>protocol of 0 indicates that the address is to be interpreted as a database link. The address will therefore have this form,</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>	queue_name@dblink </PRE
></BLOCKQUOTE
><P
CLASS="para"
>where queue_name has the form [schema.]queue and dblink is either a fully-qualified database link name or a database link name that does not incorporate the domain name.</P
><P
CLASS="para"
>Agents insert messages into a queue and retrieve messages from the queue by using the Oracle AQ operational interfaces offered in the DBMS_AQ package.</P
></DD
><DT
CLASS="term"
><A
CLASS="indexterm"
NAME="ch05-idx-15759-0"
></A
>Recipient list</DT
><DD
CLASS="listitem"
><P
CLASS="para"
>A list of one or more agents that you can construct to receive a message (through the dequeue operation). With Oracle 8.0.4., a recipient can be either an agent or a queue.</P
></DD
><DT
CLASS="term"
><A
CLASS="indexterm"
NAME="ch05-idx-15764-0"
></A
><A
CLASS="indexterm"
NAME="ch05-idx-15764-1"
></A
>Producer </DT
><DD
CLASS="listitem"
><P
CLASS="para"
>An agent that places messages in a queue with the enqueue operation.</P
></DD
><DT
CLASS="term"
><A
CLASS="indexterm"
NAME="ch05-idx-15765-0"
></A
>Consumer</DT
><DD
CLASS="listitem"
><P
CLASS="para"
>An agent that retrieves messages from a queue with the dequeue operation. Note that you can modify the characteristics of your dequeue operation so that the agent does not actually consume (i.e., read and then remove from the queue) its message. </P
></DD
><DT
CLASS="term"
><A
CLASS="indexterm"
NAME="ch05-idx-15766-0"
></A
><A
CLASS="indexterm"
NAME="ch05-idx-15766-1"
></A
>Message ID</DT
><DD
CLASS="listitem"
><P
CLASS="para"
>The unique handle for a message. This value is generated by AQ. You can use it to retrieve a specific message from a queue (bypassing the default order of dequeuing associated with the queue and/or queue table). You can also use this message ID to find out about the status of a message from the underlying data dictionary views. These message IDs are long, complex values like "105E7A2EBFF11348E03400400B40F149."</P
></DD
><DT
CLASS="term"
><A
CLASS="indexterm"
NAME="ch05-idx-15767-0"
></A
><A
CLASS="indexterm"
NAME="ch05-idx-15767-1"
></A
>Message group</DT
><DD
CLASS="listitem"
><P
CLASS="para"
>One or more messages can be joined together logically as a <EM
CLASS="emphasis"
>group</EM
>. You do this by specifying a queue table as supporting message grouping. All messages queued in a single transaction must then be dequeued as a group for that set of messages to be considered completely dequeued.</P
></DD
><DT
CLASS="term"
><A
CLASS="indexterm"
NAME="ch05-idx-15768-0"
></A
>Queue Monitor</DT
><DD
CLASS="listitem"
><P
CLASS="para"
>The Queue Monitor is an optional background process that monitors the status of messages in your queues. Use the Queue Monitor when you want to set expiration and delay intervals for messages.<A
CLASS="indexterm"
NAME="ch05-idx-15743-0"
></A
></P
></DD
></DL
><P
CLASS="para"
>Lots of concepts, lots of terminology. Let's see if we can obtain some additional clarity from the following figures.</P
><P
CLASS="para"
><A
CLASS="xref"
HREF="ch05_01.htm"
>Figure 5.3</A
> illustrates how you create one or more queues within a <A
CLASS="indexterm"
NAME="ch05-idx-15769-0"
></A
>queue table. Each queue can have one or more messages. Messages in different queues do not have any relation to each other. Each queue table has a single default exception queue, which contains messages that have expired or have otherwise failed to dequeue successfully</P
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="ch05-idx-15771-0"
></A
><A
CLASS="xref"
HREF="ch05_01.htm"
>Figure 5.4</A
> shows that producer agents place messages in a queue and consumer agents remove messages from a queue. The same Oracle process can be both a producer and a consumer; more commonly, you will use Oracle AQ to allow multiple Oracle connections to enqueue and dequeue messages. Some points to keep in mind:</P
><UL
CLASS="itemizedlist"
><LI
CLASS="listitem"
><P
CLASS="para"
>Messages do not have to be dequeued in the same order in which they were enqueued.</P
></LI
><LI
CLASS="listitem"
><P
CLASS="para"
>Messages can be enqueued but never dequeued. </P
></LI
></UL
><H4
CLASS="figure"
><A
CLASS="title"
NAME="ch05-33025"
>Figure 5.3: Multiple queues in a single queue table</A
></H4
><IMG
CLASS="graphic"
SRC="figs/obip.0503.gif"
ALT="Figure 5.3"><H4
CLASS="figure"
><A
CLASS="title"
NAME="ch05-18362"
>Figure 5.4: Producers enqueue, consumers dequeue</A
></H4
><IMG
CLASS="graphic"
SRC="figs/obip.0504.gif"
ALT="Figure 5.4"><P
CLASS="para"
><A
CLASS="xref"
HREF="ch05_01.htm"
>Figure 5.5</A
> illustrates the "<A
CLASS="indexterm"
NAME="ch05-idx-15813-0"
></A
>broadcast" feature of Oracle AQ. You can define a queue table to support "<A
CLASS="indexterm"
NAME="ch05-idx-16299-0"
></A
>multiple consumers." In this configuration, a single message can be consumed by more than one agent, either through the default <A
CLASS="indexterm"
NAME="ch05-idx-15814-0"
></A
>subscription list or with an override recipient list. Under this scenario, a message remains in the queue until it is consumed by all of its intended consumer agents. </P
><P
CLASS="para"
>When you set up a subscriber list for a queue, you are establishing that list of agents as the default set of agents to be able to dequeue messages from the queue. You can change this list at any time, but the change will affect only those messages enqueued after the change is made. The subscription list is, in other words, associated with a message at the time of the enqueue operation, not with the dequeue operation.</P
><P
CLASS="para"
>You will use the r<A
CLASS="indexterm"
NAME="ch05-idx-15815-0"
></A
>ecipient list to override the subscription list for dequeuing. Under this scenario, at the time the message is enqueued, you specify a list of agents to which the message may be dequeued. The default list of subscribers for the queue is then ignored for dequeue operations on this message.</P
><H4
CLASS="figure"
><A
CLASS="title"
NAME="ch05-31558"
>Figure 5.5: Multiple consumers of the same message</A
></H4
><IMG
CLASS="graphic"
SRC="figs/obip.0505.gif"
ALT="Figure 5.5"></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch05-SECT-1.6"
>5.1.6 Components of Oracle AQ</A
></H3
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="ch05-idx-15816-0"
></A
>Oracle AQ is composed of a number of different elements, not just a single built-in package. These elements follow:</P
><DL
CLASS="variablelist"
><DT
CLASS="term"
><EM
CLASS="emphasis"
>The DBMS_AQADM package</EM
></DT
><DD
CLASS="listitem"
><P
CLASS="para"
>An interface to the administrative tasks of Oracle AQ, such as creating and dropping queues and queue tables. This package and the programs it supports, are described in later sections.</P
></DD
><DT
CLASS="term"
><EM
CLASS="emphasis"
>The DBMS_AQ package</EM
></DT
><DD
CLASS="listitem"
><P
CLASS="para"
>The package that offers access to the enqueue and dequeue operations (the "operational tasks") of Oracle AQ. This package, and the programs it supports are described in later sections.</P
></DD
><DT
CLASS="term"
><EM
CLASS="emphasis"
>The Queue Monitor</EM
></DT
><DD
CLASS="listitem"
><P
CLASS="para"
>A background process that can be used to delay and expire messages for dequeuing (described in the <A
CLASS="xref"
HREF="ch05_01.htm"
>Section 5.1.7, "Queue Monitor"</A
>" section following).</P
></DD
><DT
CLASS="term"
><EM
CLASS="emphasis"
>Data dictionary views</EM
></DT
><DD
CLASS="listitem"
><P
CLASS="para"
>A set of views against the underlying AQ tables that allows users of AQ to view the results of administrative and operational tasks (described in the <A
CLASS="xref"
HREF="ch05_01.htm"
>Section 5.1.8, "Data Dictionary Views"</A
>" section following).</P
></DD
></DL
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch05-31278"
>5.1.7 Queue Monitor</A
></H3
><P
CLASS="para"
>The <A
CLASS="indexterm"
NAME="ch05-idx-15817-0"
></A
>Queue Monitor is an Oracle process that runs in the background and monitors the status of messages in your queues. It is optional and is present only when you set the appropriate database initialization parameter, or you call the DBMS_AQADM.START_TIME_MANAGER procedure (see <A
CLASS="xref"
HREF="ch05_02.htm#ch05-SECT-2.2.3"
>Section 5.2.2, "Database Initialization"</A
>," later in this chapter). You will need the Queue Monitor if you want to set expiration and delay intervals for messages.</P
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch05-37981"
>5.1.8 Data Dictionary Views</A
></H3
><P
CLASS="para"
>Oracle AQ offers a set of <A
CLASS="indexterm"
NAME="ch05-idx-15822-0"
></A
>data dictionary views that allows you to monitor the status of queuing operations. This section lists the different views. At the end of the chapter, you will find a section titled <A
CLASS="xref"
HREF="ch05_06.htm#ch05-SECT-6.2.3"
>Section 5.6, "Oracle AQ Database Objects"</A
>," which offers more details on these views and other database objects created and used by Oracle AQ.</P
><DL
CLASS="variablelist"
><DT
CLASS="term"
><A
CLASS="indexterm"
NAME="ch05-idx-19079-0"
></A
>Queue table database table</DT
><DD
CLASS="listitem"
><P
CLASS="para"
>The <A
CLASS="indexterm"
NAME="ch05-idx-15829-0"
></A
>queue table in which message data is stored. This table is created automatically when you create a queue table. The name of this table is &lt;queue_table&gt;, where &lt;queue_table&gt; is the name of the queue table you specified.</P
></DD
><DT
CLASS="term"
>Queue table view</DT
><DD
CLASS="listitem"
><P
CLASS="para"
>A view of the <A
CLASS="indexterm"
NAME="ch05-idx-15830-0"
></A
>queue table in which message data is stored. This view is created automatically when you create a queue table. The name of this view is aq$&lt;queue_table&gt;, where &lt;queue_table&gt; is the name of the queue table you specified.</P
></DD
><DT
CLASS="term"
><A
CLASS="indexterm"
NAME="ch05-idx-15831-0"
></A
>DBA_QUEUE_TABLES</DT
><DD
CLASS="listitem"
><P
CLASS="para"
>This view describes the names and types of all <A
CLASS="indexterm"
NAME="ch05-idx-15833-0"
></A
>queue tables created in the database. To see this view, you must have the DBA authority or the SELECT ANY TABLE privilege.</P
></DD
><DT
CLASS="term"
><A
CLASS="indexterm"
NAME="ch05-idx-15836-0"
></A
>USER_QUEUE_TABLES</DT
><DD
CLASS="listitem"
><P
CLASS="para"
>This view describes the names and types of all queue tables created in your schema. It has the same structure as DBA_QUEUE_TABLES, except that it does not have an OWNER column.</P
></DD
><DT
CLASS="term"
><A
CLASS="indexterm"
NAME="ch05-idx-15834-0"
></A
>DBA_QUEUES</DT
><DD
CLASS="listitem"
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="ch05-idx-15839-0"
></A
>This view displays all operational characteristics for every queue in a database. Operational characteristics include whether the queue is enabled for queuing, the number of retries allowed for a dequeue operation, and so on. To see this view, you must have DBA authority or the SELECT ANY TABLE privilege.</P
></DD
><DT
CLASS="term"
><A
CLASS="indexterm"
NAME="ch05-idx-16233-0"
></A
>USER_QUEUES</DT
><DD
CLASS="listitem"
><P
CLASS="para"
>This view displays all operational characteristics for every queue in your schema. It has the same structure as DBA_QUEUES, except that it does not have an OWNER column.<A
CLASS="indexterm"
NAME="ch05-idx-16227-0"
></A
></P
></DD
></DL
></DIV
></DIV
></DIV
><DIV
CLASS="htmlnav"
><P
></P
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch04_02.htm#ch04-SECT-2.1.1"
TITLE="4.2 DBMS_TRANSACTION: Interfacing to SQL Transaction Statements"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 4.2 DBMS_TRANSACTION: Interfacing to SQL Transaction Statements"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="book"
HREF="index.htm"
TITLE="Oracle Built-in Packages"
><IMG
SRC="../gifs/txthome.gif"
ALT="Oracle Built-in Packages"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch05_02.htm#ch05-SECT-2.2.3"
TITLE="5.2 Getting Started with Oracle AQ"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 5.2 Getting Started with Oracle AQ"
BORDER="0"></A
></TD
></TR
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
>4.2 DBMS_TRANSACTION: Interfacing to SQL Transaction Statements</TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="index"
HREF="index/idx_0.htm"
TITLE="Book Index"
><IMG
SRC="../gifs/index.gif"
ALT="Book Index"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
>5.2 Getting Started with Oracle AQ</TD
></TR
></TABLE
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"></DIV
><IMG SRC="../gifs/smnavbar.gif"
USEMAP="#map"
BORDER="0"
ALT="The Oracle Library Navigation">

<P><font size="-1">
<a href="../copyrght.htm#copy">Copyright (c) 2000</a> O'Reilly &amp; Associates. All rights reserved.
</font></P>

<MAP NAME="map">

<AREA SHAPE="RECT"
COORDS="0,0,35,30"
HREF="../index.htm"
ALT="Library Home">

<AREA SHAPE="RECT"
COORDS="40,0,95,30"
HREF="../prog2/index.htm"
ALT="Oracle PL/SQL Programming, 2nd. Ed.">

<AREA SHAPE="RECT"
COORDS="100,0,200,30"
HREF="../guide8i/index.htm"
ALT="Guide to Oracle 8i Features">

<AREA SHAPE="RECT"
COORDS="205,0,245,30"
HREF="index.htm"
ALT="Oracle Built-in Packages">

<AREA SHAPE="RECT"
COORDS="250,0,320,30"
HREF="../advprog/index.htm"
ALT="Advanced PL/SQL Programming with Packages">

<AREA SHAPE="RECT"
COORDS="325,0,420,30"
HREF="../webapp/index.htm"
ALT="Oracle Web Applications">

<AREA SHAPE="RECT"
COORDS="425,0,490,30"
HREF="../langpkt/index.htm"
ALT="Oracle PL/SQL Language Pocket Reference">

<AREA SHAPE="RECT"
COORDS="495,0,570,30"
HREF="../bipkt/index.htm"
ALT="Oracle PL/SQL Built-ins Pocket Reference">
</MAP>

</BODY
>
<!-- Mirrored from liso.cs.pusan.ac.kr by HTTrack Website Copier/3.x [XR&CO'2001] -->
</HTML
>
