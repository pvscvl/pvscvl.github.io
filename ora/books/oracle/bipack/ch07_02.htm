<HTML
><HEAD
><TITLE
>[Chapter 7] 7.2 DBMS_APPLICATION_INFO Interface </TITLE
><META
NAME="DC.Creator"
CONTENT="Steven Feuerstein, Charles Dye &amp; John Beresniewicz"><META
NAME="DC.Date"
CONTENT="2000-04-29T17:55:07Z"><META
NAME="DC.Format"
CONTENT="text/html"
SCHEME="MIME"><META
NAME="DC.Identifier"
CONTENT="O'Reilly and Associates-1-56592-375-8E"><META
NAME="DC.Language"
CONTENT="en-US"><META
NAME="DC.Publisher"
CONTENT="O'Reilly &amp; Associates, Inc."><META
NAME="DC.Source"
CONTENT="1-56592-375-8E"
SCHEME="ISBN"><META
NAME="DC.Subject.Keyword"
CONTENT="Oracle Packages"><META
NAME="DC.Title"
CONTENT="Oracle Built-in Packages"><META
NAME="DC.Type"
CONTENT="Text.Monograph"><META
NAME="generator"
CONTENT="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><LINK
REL="stylesheet"
TYPE="text/css"
HREF="../style/style1.css"><LINK
REV="made"
HREF="mailto:online-books@oreilly.com"
TITLE="Online Books Comments"><LINK
REL="up"
HREF="ch07_01.htm"
TITLE="7. Defining an Application Profile"><LINK
REL="prev"
HREF="ch07_01.htm"
TITLE="7.1 Getting Started with DBMS_APPLICATION_INFO "><LINK
REL="next"
HREF="ch07_03.htm#ch07-SECT-3.5"
TITLE="7.3 DBMS_APPLICATION_INFO Examples "></HEAD
><BODY
><DIV
CLASS="htmlnav"
><H1
><IMG
SRC="gifs/smbanner.gif"
ALT="Oracle Built-in Packages"
USEMAP="#srchmap"
BORDER="0"></H1
><MAP
NAME="srchmap"
><AREA
SHAPE="RECT"
COORDS="0,0,466,65"
HREF="index.htm"
ALT="Oracle Built-in Packages"><AREA
SHAPE="RECT"
COORDS="467,0,514,18"
HREF="jobjects/fsearch.htm"
ALT="Search this book"></MAP
><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch07_01.htm"
TITLE="7.1 Getting Started with DBMS_APPLICATION_INFO "
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 7.1 Getting Started with DBMS_APPLICATION_INFO "
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><SPAN
CLASS="NAVTITLE"
><A
CLASS="chapter"
REL="up"
HREF="ch07_01.htm"
TITLE="7. Defining an Application Profile"
>Chapter 7<BR>Defining an Application Profile</A
></SPAN
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch07_03.htm#ch07-SECT-3.5"
TITLE="7.3 DBMS_APPLICATION_INFO Examples "
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 7.3 DBMS_APPLICATION_INFO Examples "
BORDER="0"></A
></TD
></TR
></TABLE
>&nbsp;<HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"></DIV
><DIV
CLASS="sect1"
><H2
CLASS="sect1"
><A
CLASS="title"
NAME="ch07-39890"
>7.2 DBMS_APPLICATION_INFO Interface </A
></H2
><P
CLASS="para"
>This section describes all the programs available in the DBMS_APPLICATION_INFO package.</P
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch07-SECT-2.0.1"
>7.2.1 The <A
CLASS="indexterm"
NAME="ch07-idx-13103-0"
></A
>DBMS_APPLICATION_INFO.READ_CLIENT_INFO procedure</A
></H3
><P
CLASS="para"
>The READ_CLIENT_INFO procedure returns the currently registered <A
CLASS="indexterm"
NAME="ch07-idx-13104-0"
></A
>client information for the session. The program header is,</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>PROCEDURE DBMS_APPLICATION_INFO.READ_CLIENT_INFO
    (client_info OUT VARCHAR2);</PRE
></BLOCKQUOTE
><P
CLASS="para"
>where the client_info parameter contains the client information currently registered in V$SESSION.</P
><P
CLASS="para"
>The program does not raise any exceptions, nor does it assert a purity level with the RESTRICT_REFERENCES pragma.</P
><DIV
CLASS="sect3"
><H4
CLASS="sect3"
><A
CLASS="title"
NAME="ch07-SECT-2.0.1.1"
>7.2.1.1 Example</A
></H4
><P
CLASS="para"
>The following function calls DBMS_APPLICATION_INFO.READ_CLIENT_INFO and returns the client information. This function is part of the register_app package discussed in "<A
CLASS="xref"
HREF="ch07_03.htm#ch07-SECT-3.5"
>Section 7.3, "DBMS_APPLICATION_INFO Examples "</A
>" later in this chapter.</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>FUNCTION current_client_info RETURN VARCHAR2
IS
   /*
   || calls DBMS_APPLICATION_INFO.READ_CLIENT_INFO
   || and returns the client info 
   */
temp_client_info VARCHAR2(64);

BEGIN
   SYS.DBMS_APPLICATION_INFO.READ_CLIENT_INFO
      (temp_client_info);

   RETURN temp_client_info;
END current_client_info;</PRE
></BLOCKQUOTE
><P
CLASS="para"
>In this example, I have fully qualified the package name with the package owner (SYS), insuring that the SYS version of the package is called. This is not normally necessary, as there is (usually) a public synonym pointing to SYS.DBMS_APPLICATION_INFO. The reason for using a fully qualified reference in this specific case is discussed in "<A
CLASS="xref"
HREF="ch07_03.htm#ch07-SECT-3.5"
>Section 7.3.6, "Covering DBMS_APPLICATION_INFO"</A
>."</P
></DIV
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch07-SECT-2.0.2"
>7.2.2 The DBMS_APPLICATION_INFO.READ_MODULE procedure</A
></H3
><P
CLASS="para"
>The <A
CLASS="indexterm"
NAME="ch07-idx-14622-0"
></A
><A
CLASS="indexterm"
NAME="ch07-idx-14622-1"
></A
><A
CLASS="indexterm"
NAME="ch07-idx-14622-2"
></A
><A
CLASS="indexterm"
NAME="ch07-idx-14622-3"
></A
><A
CLASS="indexterm"
NAME="ch07-idx-14622-4"
></A
><A
CLASS="indexterm"
NAME="ch07-idx-14622-5"
></A
><A
CLASS="indexterm"
NAME="ch07-idx-14622-6"
></A
>READ_MODULE procedure returns the currently registered module and action names for the session. Here's the program header:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>PROCEDURE DBMS_APPLICATION_INFO.READ_MODULE
   (module_name OUT VARCHAR2
   ,action_name OUT VARCHAR2); </PRE
></BLOCKQUOTE
><P
CLASS="para"
>Parameters are summarized in the following table.</P
><TABLE
CLASS="informaltable"
BORDER="1"
CELLPADDING="3"
><THEAD
CLASS="thead"
><TR
CLASS="row"
VALIGN="TOP"
><TH
CLASS="entry"
ALIGN="LEFT"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>Parameter</P
></TH
><TH
CLASS="entry"
ALIGN="LEFT"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>Description</P
></TH
></TR
></THEAD
><TBODY
CLASS="tbody"
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>module_name</P
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>Name of the module currently registered in V$SESSION</P
></TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>action_name</P
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>Name of the action currently registered in V$SESSION</P
></TD
></TR
></TBODY
></TABLE
><P
CLASS="para"
>The READ_MODULE procedure does not raise any exceptions, nor does it assert a purity level with the RESTRICT_REFERENCES pragma.</P
><DIV
CLASS="sect3"
><H4
CLASS="sect3"
><A
CLASS="title"
NAME="ch07-SECT-2.0.2.1"
>7.2.2.1 Example</A
></H4
><P
CLASS="para"
>The following function calls DBMS_APPLICATION_INFO.READ_MODULE and returns the value of the current action. This function is part of the register_app package discussed in "<A
CLASS="xref"
HREF="ch07_03.htm#ch07-SECT-3.5"
>Section 7.3</A
>."</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>   FUNCTION current_action RETURN VARCHAR2
   IS
      /*
      || calls DBMS_APPLICATION_INFO.READ_MODULE
      || and returns the action name 
      */
      temp_module_name VARCHAR2(64);
      temp_action_name VARCHAR2(64);

   BEGIN
      SYS.DBMS_APPLICATION_INFO.READ_MODULE
         (temp_module_name, temp_action_name);
   
      RETURN temp_action_name;
   END current_action;</PRE
></BLOCKQUOTE
><P
CLASS="para"
>See the section "<A
CLASS="xref"
HREF="ch07_03.htm#ch07-SECT-3.5"
>Section 7.3.6</A
>" for an explanation of why the procedure call is qualified by SYS, the package owner's <A
CLASS="indexterm"
NAME="ch07-idx-14628-0"
></A
><A
CLASS="indexterm"
NAME="ch07-idx-14628-1"
></A
><A
CLASS="indexterm"
NAME="ch07-idx-14628-2"
></A
><A
CLASS="indexterm"
NAME="ch07-idx-14628-3"
></A
><A
CLASS="indexterm"
NAME="ch07-idx-14628-4"
></A
>name.</P
></DIV
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch07-SECT-2.0.3"
>7.2.3 The <A
CLASS="indexterm"
NAME="ch07-idx-13108-0"
></A
>DBMS_APPLICATION_INFO.SET_ACTION procedure</A
></H3
><P
CLASS="para"
>The SET_ACTION procedure is used to set, or register, the <A
CLASS="indexterm"
NAME="ch07-idx-13109-0"
></A
><A
CLASS="indexterm"
NAME="ch07-idx-13109-1"
></A
><A
CLASS="indexterm"
NAME="ch07-idx-13109-2"
></A
>current transaction or <A
CLASS="indexterm"
NAME="ch07-idx-13110-0"
></A
>logical unit of work currently executing within the module. The registered action name appears in the ACTION column of the V$SESSION and V$SQLAREA virtual tables. The program header is,</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>PROCEDURE DBMS_APPLICATION_INFO.SET_ACTION
    (action_name IN VARCHAR2);</PRE
></BLOCKQUOTE
><P
CLASS="para"
>where the action_name parameter provides the name of the action to register into V$SESSION.</P
><P
CLASS="para"
>The SET_ACTION procedure does not raise any exceptions.</P
><DIV
CLASS="sect3"
><H4
CLASS="sect3"
><A
CLASS="title"
NAME="ch07-SECT-2.0.3.1"
>7.2.3.1 Restrictions</A
></H4
><P
CLASS="para"
>Note the following restrictions on calling SET_ACTION:</P
><UL
CLASS="itemizedlist"
><LI
CLASS="listitem"
><P
CLASS="para"
>The action_name parameter is limited to 32 bytes. Longer values will be truncated to this maximum size. </P
></LI
><LI
CLASS="listitem"
><P
CLASS="para"
>The program does not assert a purity level with the RESTRICT_REFERENCES pragma.</P
></LI
></UL
></DIV
><DIV
CLASS="sect3"
><H4
CLASS="sect3"
><A
CLASS="title"
NAME="ch07-SECT-2.0.3.2"
>7.2.3.2 Example</A
></H4
><P
CLASS="para"
>The following procedure could be part of an application that maintains corporate departmental information:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>/* Filename on companion disk: <A
CLASS="indexterm"
NAME="ch07-idx-14826-0"
></A
>apinex1.sql  */*
CREATE OR REPLACE PROCEDURE drop_dept
   (deptno_IN IN NUMBER
   ,reassign_deptno_IN IN NUMBER)
IS
   temp_emp_count  NUMBER;
BEGIN
   DBMS_APPLICATION_INFO.SET_MODULE
      (module_name =&gt; 'DEPARTMENT FIXES'
      ,action_name =&gt; null);

   -- first check dept for employees

   DBMS_APPLICATION_INFO.SET_ACTION
      (action_name =&gt; 'CHECK EMP');

   SELECT COUNT(*) 
     INTO temp_emp_count
     FROM emp
    WHERE deptno = deptno_IN;

   -- reassign any employees 

   IF temp_emp_count &gt;0
   THEN
      DBMS_APPLICATION_INFO.SET_ACTION
         (action_name =&gt; 'REASSIGN EMPLOYEES');
   
      UPDATE emp
         SET deptno = reassign_deptno_IN
       WHERE deptno = deptno_IN;
   END IF;

   -- OK, now drop the department

   DBMS_APPLICATION_INFO.SET_ACTION
      (action_name =&gt; 'DROP DEPT');

   DELETE FROM dept WHERE deptno = deptno_IN;

   COMMIT;

   DBMS_APPLICATION_INFO.SET_MODULE(null,null);

EXCEPTION
   WHEN OTHERS THEN
      DBMS_APPLICATION_INFO.SET_MODULE(null,null);
END drop_dept;</PRE
></BLOCKQUOTE
><P
CLASS="para"
>Notice in this example that DBMS_APPLICATION_INFO is called three times to distinguish between the three steps involved in the process of dropping the department. This gives a very fine granularity to the level at which the application can be tracked.</P
></DIV
><DIV
CLASS="sect3"
><H4
CLASS="sect3"
><A
CLASS="title"
NAME="ch07-SECT-2.0.3.3"
>7.2.3.3 Recommendations for usage</A
></H4
><P
CLASS="para"
>Note the following recommendations for using the SET_ACTION procedure:</P
><UL
CLASS="itemizedlist"
><LI
CLASS="listitem"
><P
CLASS="para"
>Set the action name to a name that can identify the current transaction or logical unit of work within the module. </P
></LI
><LI
CLASS="listitem"
><P
CLASS="para"
>When the transaction terminates, call SET_ACTION and pass a NULL value for the action_name parameter. In case subsequent transactions do not register using DBMS_APPLICATION_INFO, passing the NULL value ensures that they are not incorrectly counted as part of the current action. As in the example, if the program handles exceptions, the exception handler should reset the action information.</P
></LI
></UL
></DIV
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch07-SECT-2.0.4"
>7.2.4 The <A
CLASS="indexterm"
NAME="ch07-idx-13111-0"
></A
>DBMS_APPLICATION_INFO.SET_CLIENT_INFO procedure</A
></H3
><P
CLASS="para"
>The SET_CLIENT_INFO procedure is used to set, or register, additional c<A
CLASS="indexterm"
NAME="ch07-idx-13112-0"
></A
>lient information about the user session. The registered client information appears in the CLIENT_INFO column of the V$SESSION virtual table. The header for this program is,</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>PROCEDURE DBMS_APPLICATION_INFO.SET_CLIENT_INFO
    (client_info IN VARCHAR2);</PRE
></BLOCKQUOTE
><P
CLASS="para"
>where the client_info parameter specifies the client information to register into V$SESSION.</P
><P
CLASS="para"
>The program does not raise any exceptions.</P
><DIV
CLASS="sect3"
><H4
CLASS="sect3"
><A
CLASS="title"
NAME="ch07-SECT-2.0.4.1"
>7.2.4.1 Restrictions</A
></H4
><P
CLASS="para"
> Note the following restrictions on calling SET_CLIENT_INFO:</P
><UL
CLASS="itemizedlist"
><LI
CLASS="listitem"
><P
CLASS="para"
>The client_info parameter is limited to 64 bytes. Longer values will be truncated to this maximum size. </P
></LI
><LI
CLASS="listitem"
><P
CLASS="para"
>The program does not assert a purity level with the RESTRICT_REFERENCES pragma.</P
></LI
></UL
></DIV
><DIV
CLASS="sect3"
><H4
CLASS="sect3"
><A
CLASS="title"
NAME="ch07-SECT-2.0.4.2"
>7.2.4.2 Example</A
></H4
><P
CLASS="para"
>The following procedure could be utilized by an application in which all sessions connect to a common Oracle username and <A
CLASS="indexterm"
NAME="ch07-idx-13117-0"
></A
>security is handled within the application. This would allow the DBA to externally distinguish between user sessions in V$SESSION by examining the CLIENT_INFO column.</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>/* Filename on companion disk:<A
CLASS="indexterm"
NAME="ch07-idx-14828-0"
></A
> apinex1.sql  */*
CREATE OR REPLACE PROCEDURE set_user(app_user_IN IN VARCHAR2)
IS
BEGIN
   DBMS_APPLICATION_INFO.SET_CLIENT_INFO(app_user_IN);
END set_user;</PRE
></BLOCKQUOTE
><P
CLASS="para"
>Suppose that users JOE SMITH and SALLY DALLY log into the application, which connects to Oracle as the user OPBIP. If the application calls the set_user procedure at login, we can distinguish between the database sessions for Joe and Sally in V$SESSION as follows:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>SQL&gt; SELECT sid, username, client_info
  2    FROM v$session
  3   WHERE username='OPBIP';

      SID USERNAME   CLIENT_INFO
--------- ---------- --------------------
       14 OPBIP      JOE SMITH
       24 OPBIP      SALLY DALLY</PRE
></BLOCKQUOTE
></DIV
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch07-SECT-2.0.5"
>7.2.5 The <A
CLASS="indexterm"
NAME="ch07-idx-13428-0"
></A
>DBMS_APPLICATION_INFO.SET_MODULE procedure</A
></H3
><P
CLASS="para"
>The SET_MODULE procedure is used to set, or register, a name for the <A
CLASS="indexterm"
NAME="ch07-idx-13430-0"
></A
>program that the user is currently executing and, optionally, an <A
CLASS="indexterm"
NAME="ch07-idx-13432-0"
></A
><A
CLASS="indexterm"
NAME="ch07-idx-13432-1"
></A
>action name for the current transaction within the program. Registered module and action names appear in the MODULE and ACTION columns of the V$SESSION and V$SQLAREA virtual tables. Here's the header for this procedure:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>PROCEDURE DBMS_APPLICATION_INFO.SET_MODULE
    (module_name IN VARCHAR2
    ,action_name IN VARCHAR2);</PRE
></BLOCKQUOTE
><P
CLASS="para"
>Parameters are summarized in the following table.</P
><TABLE
CLASS="informaltable"
BORDER="1"
CELLPADDING="3"
><THEAD
CLASS="thead"
><TR
CLASS="row"
VALIGN="TOP"
><TH
CLASS="entry"
ALIGN="LEFT"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>Parameter</P
></TH
><TH
CLASS="entry"
ALIGN="LEFT"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>Description</P
></TH
></TR
></THEAD
><TBODY
CLASS="tbody"
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>module_name</P
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>Name of the module to register into V$SESSION</P
></TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>action_name</P
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>Name of the action to register into V$SESSION</P
></TD
></TR
></TBODY
></TABLE
><P
CLASS="para"
>The SET_MODULE procedure does not raise any exceptions.</P
><DIV
CLASS="sect3"
><H4
CLASS="sect3"
><A
CLASS="title"
NAME="ch07-SECT-2.0.5.1"
>7.2.5.1 Restrictions</A
></H4
><P
CLASS="para"
> Note the following restrictions on calling SET_MODULE:</P
><UL
CLASS="itemizedlist"
><LI
CLASS="listitem"
><P
CLASS="para"
>The module_name parameter is limited to 48 bytes, and action_name is limited to 32 bytes. Longer values for either parameter will be truncated to their respective maximum sizes. </P
></LI
><LI
CLASS="listitem"
><P
CLASS="para"
>The program does not assert a purity level with the RESTRICT_REFERENCES pragma.</P
></LI
></UL
></DIV
><DIV
CLASS="sect3"
><H4
CLASS="sect3"
><A
CLASS="title"
NAME="ch07-SECT-2.0.5.2"
>7.2.5.2 Example</A
></H4
><P
CLASS="para"
>The following procedure could be part of an application that maintains employee data:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>/* Filename on companion disk:<A
CLASS="indexterm"
NAME="ch07-idx-14830-0"
></A
> apinex1.sql  */*
CREATE OR REPLACE PROCEDURE award_bonus
   (empno_IN IN NUMBER
   ,pct_IN IN NUMBER)
IS
BEGIN
   DBMS_APPLICATION_INFO.SET_MODULE
      (module_name =&gt; 'EMPLOYEE UPDATE'
      ,action_name =&gt; 'AWARD BONUS');

   UPDATE emp
      SET sal = sal*(1+pct_IN/100)
    WHERE empno = empno_IN;

   COMMIT;

   DBMS_APPLICATION_INFO.SET_MODULE(null,null);
EXCEPTION
   WHEN OTHERS THEN
      DBMS_APPLICATION_INFO.SET_MODULE(null,null);
END award_bonus;</PRE
></BLOCKQUOTE
><P
CLASS="para"
>Oracle recommends that the module name correspond to a recognizable name for the program or logical application unit that is currently executing. Examples Oracle provides include the name of the form executing in a Forms application and the name of a SQL script executing under SQL*Plus.</P
></DIV
><DIV
CLASS="sect3"
><H4
CLASS="sect3"
><A
CLASS="title"
NAME="ch07-SECT-2.0.5.3"
>7.2.5.3 Recommendations for usage</A
></H4
><P
CLASS="para"
>Note the following recommendations for using the SET_MODULE procedure:</P
><UL
CLASS="itemizedlist"
><LI
CLASS="listitem"
><P
CLASS="para"
>Set the action name to one that can identify the current transaction or logical unit of work within the module. </P
></LI
><LI
CLASS="listitem"
><P
CLASS="para"
>When the module terminates, call the SET_MODULE procedure and pass in NULL values for both parameters. In the event that subsequent transactions and programs do not register using DBMS_APPLICATION_INFO, they won't be incorrectly counted as part of the current module. As in the example, if the program handles exceptions, the exception handler should reset the module and action information.</P
></LI
></UL
></DIV
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch07-29480"
>7.2.6 The  <A
CLASS="indexterm"
NAME="ch07-idx-13177-0"
></A
><A
CLASS="indexterm"
NAME="ch07-idx-13177-1"
></A
>DBMS_APPLICATION_INFO.SET_SESSION_LONGOPS procedure</A
></H3
><P
CLASS="para"
>The SET_SESSION_LONGOPS procedure is used to track the progress of long-running operations by allowing the entry and modification of data in the V$SESSION_LONGOPS virtual table. Here's the header for the program:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>PROCEDURE DBMS_APPLICATION_INFO.SET_SESSION_LONGOPS
    (hint IN OUT BINARY_INTEGER
    ,context IN NUMBER DEFAULT 0
    ,stepid IN NUMBER DEFAULT 0
    ,stepsofar IN NUMBER DEFAULT 0
    ,steptotal IN NUMBER DEFAULT 0
    ,sofar IN NUMBER DEFAULT 0
    ,totalwork IN NUMBER DEFAULT 0
    ,application_data_1 IN NUMBER DEFAULT 0
    ,application_data_2 IN NUMBER DEFAULT 0
    ,application_data_3 IN NUMBER DEFAULT 0);</PRE
></BLOCKQUOTE
><P
CLASS="para"
>The parameters are summarized in the following table.</P
><TABLE
CLASS="informaltable"
BORDER="1"
CELLPADDING="3"
><THEAD
CLASS="thead"
><TR
CLASS="row"
VALIGN="TOP"
><TH
CLASS="entry"
ALIGN="LEFT"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>Parameter</P
></TH
><TH
CLASS="entry"
ALIGN="LEFT"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>Description</P
></TH
></TR
></THEAD
><TBODY
CLASS="tbody"
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>hint</P
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>Token representing the row to update</P
></TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>context</P
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>Any number representing the context</P
></TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>stepid</P
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>Any number representing the stepid</P
></TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>stepsofar</P
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>Any number</P
></TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>steptotal</P
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>Any number</P
></TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>sofar</P
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>Any number</P
></TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>totalwork</P
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>Any number</P
></TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>application_data_1</P
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>Any number</P
></TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>application_data_2</P
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>Any number</P
></TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>application_data_3</P
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>Any number</P
></TD
></TR
></TBODY
></TABLE
><P
CLASS="para"
>The program does not raise any exceptions, nor does it assert a purity level with the RESTRICT_REFERENCES pragma.</P
><DIV
CLASS="sect3"
><H4
CLASS="sect3"
><A
CLASS="title"
NAME="ch07-29480.1"
>7.2.6.1 Example</A
></H4
><P
CLASS="para"
>The following script loops 1000 times and sets values in the V$SESSION_LONGOPS table as follows:</P
><UL
CLASS="itemizedlist"
><LI
CLASS="listitem"
><P
CLASS="para"
>The totalwork value is set to 1000.</P
></LI
><LI
CLASS="listitem"
><P
CLASS="para"
>The sofar column is incremented for every iteration.</P
></LI
><LI
CLASS="listitem"
><P
CLASS="para"
>The stepsofar column is incremented every 100 iterations.</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>/* Filename on companion disk: <A
CLASS="indexterm"
NAME="ch07-idx-14832-0"
></A
>apinex2.sql  */</PRE
></BLOCKQUOTE
></LI
></UL
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>DECLARE
   longops_row BINARY_INTEGER:=
      DBMS_APPLICATION_INFO.set_session_longops_nohint;
   step_number  NUMBER:=0;
BEGIN
   -- get new row in V$SESSION_LONGOPS
   DBMS_APPLICATION_INFO.SET_SESSION_LONGOPS
      (hint =&gt; longops_row);

   -- Do operation 1000 times and record
   FOR i IN 1..1000
   LOOP
      DBMS_APPLICATION_INFO.SET_SESSION_LONGOPS
         (hint =&gt; longops_row
         ,sofar =&gt; i
         ,totalwork =&gt; 1000
         ,stepsofar =&gt; step_number);

      -- increment step every 100 iterations
      IF MOD(i,100) = 0
      THEN
         step_number := i/100;
      END IF;
   END LOOP;
END;
/</PRE
></BLOCKQUOTE
><P
CLASS="para"
>After executing the previous PL/SQL block, the following SQL shows the results recorded in V$SESSION_LONGOPS. Notice that the COMPNAM column has been updated by Oracle to indicate that DBMS_APPLICATION_INFO was used to set the row. Also notice that Oracle sets rows in V$SESSION_LONGOPS for internal operations like table scans, and sorts.</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>SELECT sid
      ,compnam
      ,stepsofar
      ,sofar
      ,totalwork
  FROM v$session_longops
 WHERE sid = my_session.sid;


SID  COMPNAM                   STEPSOFAR     SOFAR TOTALWORK
---- ------------------------- --------- --------- ---------
  16 Table Scan                        0         0         1
  16 Sort Progression                  0         1         1
  16 dbms_application_info             9      1000      1000

3 rows selected.</PRE
></BLOCKQUOTE
><P
CLASS="para"
>Each session is allocated a maximum of four rows in the V$SESSION_LONGOPS virtual table for tracking long operations. Rows are identified by the combination of context and stepid. If calls to DBMS_APPLICATION_INFO.SET_SESSION_LONGOPS are made with more than four distinct combinations of context and stepid, rows will be re-used in least-recently-used order. </P
><P
CLASS="para"
>All of the parameters except hint correspond directly to like-named columns in the V$SESSION_LONGOPS virtual table. While there are no restrictions on values stored in these columns, Oracle makes the following suggestions as a way of organizing information about the progress of long running operations:</P
><DL
CLASS="variablelist"
><DT
CLASS="term"
>stepsofar  </DT
><DD
CLASS="listitem"
><P
CLASS="para"
>If the long-running operation consists of distinct individual steps, the amount of work which has been done so far for this step.</P
></DD
><DT
CLASS="term"
>steptotal </DT
><DD
CLASS="listitem"
><P
CLASS="para"
>If the long-running operation consists of distinct individual steps, the total amount of work expected to be done in this step.</P
></DD
><DT
CLASS="term"
>sofar </DT
><DD
CLASS="listitem"
><P
CLASS="para"
>The amount of work that has been done so far.</P
></DD
><DT
CLASS="term"
>totalwork</DT
><DD
CLASS="listitem"
><P
CLASS="para"
>The total amount of work expected to be done in this long-running operation.</P
></DD
><DT
CLASS="term"
> application_data_1, application_data_2, application_data_3  </DT
><DD
CLASS="listitem"
><P
CLASS="para"
>Any numbers the client wishes to store.</P
></DD
></DL
><P
CLASS="para"
>Also note that all parameters to SET_SESSION_LONGOPS (except hint) default to zero. This means that calls to the procedure need not specify values for all parameters, which is convenient in the case of such a long parameter list. However, it also means that any unspecified parameters in a call to SET_SESSION_LONGOPS will have their corresponding columns in V$SESSION_LONGOPS set to zero for that row after the call, which may not be the desired <A
CLASS="indexterm"
NAME="ch07-idx-14734-0"
></A
><A
CLASS="indexterm"
NAME="ch07-idx-14734-1"
></A
>behavior.</P
></DIV
></DIV
></DIV
><DIV
CLASS="htmlnav"
><P
></P
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch07_01.htm"
TITLE="7.1 Getting Started with DBMS_APPLICATION_INFO "
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 7.1 Getting Started with DBMS_APPLICATION_INFO "
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="book"
HREF="index.htm"
TITLE="Oracle Built-in Packages"
><IMG
SRC="../gifs/txthome.gif"
ALT="Oracle Built-in Packages"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch07_03.htm#ch07-SECT-3.5"
TITLE="7.3 DBMS_APPLICATION_INFO Examples "
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 7.3 DBMS_APPLICATION_INFO Examples "
BORDER="0"></A
></TD
></TR
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
>7.1 Getting Started with DBMS_APPLICATION_INFO </TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="index"
HREF="index/idx_0.htm"
TITLE="Book Index"
><IMG
SRC="../gifs/index.gif"
ALT="Book Index"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
>7.3 DBMS_APPLICATION_INFO Examples </TD
></TR
></TABLE
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"></DIV
><IMG SRC="../gifs/smnavbar.gif"
USEMAP="#map"
BORDER="0"
ALT="The Oracle Library Navigation">

<P><font size="-1">
<a href="../copyrght.htm#copy">Copyright (c) 2000</a> O'Reilly &amp; Associates. All rights reserved.
</font></P>

<MAP NAME="map">

<AREA SHAPE="RECT"
COORDS="0,0,35,30"
HREF="../index.htm"
ALT="Library Home">

<AREA SHAPE="RECT"
COORDS="40,0,95,30"
HREF="../prog2/index.htm"
ALT="Oracle PL/SQL Programming, 2nd. Ed.">

<AREA SHAPE="RECT"
COORDS="100,0,200,30"
HREF="../guide8i/index.htm"
ALT="Guide to Oracle 8i Features">

<AREA SHAPE="RECT"
COORDS="205,0,245,30"
HREF="index.htm"
ALT="Oracle Built-in Packages">

<AREA SHAPE="RECT"
COORDS="250,0,320,30"
HREF="../advprog/index.htm"
ALT="Advanced PL/SQL Programming with Packages">

<AREA SHAPE="RECT"
COORDS="325,0,420,30"
HREF="../webapp/index.htm"
ALT="Oracle Web Applications">

<AREA SHAPE="RECT"
COORDS="425,0,490,30"
HREF="../langpkt/index.htm"
ALT="Oracle PL/SQL Language Pocket Reference">

<AREA SHAPE="RECT"
COORDS="495,0,570,30"
HREF="../bipkt/index.htm"
ALT="Oracle PL/SQL Built-ins Pocket Reference">
</MAP>

</BODY
>
<!-- Mirrored from liso.cs.pusan.ac.kr by HTTrack Website Copier/3.x [XR&CO'2001] -->
</HTML
>
