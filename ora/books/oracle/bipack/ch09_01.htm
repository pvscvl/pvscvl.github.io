<HTML
><HEAD
><TITLE
>[Chapter 9] Datatype Packages</TITLE
><META
NAME="DC.Creator"
CONTENT="Steven Feuerstein, Charles Dye &amp; John Beresniewicz"><META
NAME="DC.Date"
CONTENT="2000-04-29T17:56:05Z"><META
NAME="DC.Format"
CONTENT="text/html"
SCHEME="MIME"><META
NAME="DC.Identifier"
CONTENT="O'Reilly and Associates-1-56592-375-8E"><META
NAME="DC.Language"
CONTENT="en-US"><META
NAME="DC.Publisher"
CONTENT="O'Reilly &amp; Associates, Inc."><META
NAME="DC.Source"
CONTENT="1-56592-375-8E"
SCHEME="ISBN"><META
NAME="DC.Subject.Keyword"
CONTENT="Oracle Packages"><META
NAME="DC.Title"
CONTENT="Oracle Built-in Packages"><META
NAME="DC.Type"
CONTENT="Text.Monograph"><META
NAME="generator"
CONTENT="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><LINK
REL="stylesheet"
TYPE="text/css"
HREF="../style/style1.css"><LINK
REV="made"
HREF="mailto:online-books@oreilly.com"
TITLE="Online Books Comments"><LINK
REL="up"
HREF="part02.htm"
TITLE="II. Application Development Packages"><LINK
REL="prev"
HREF="ch08_03.htm#ch08-SECT-3.1.5"
TITLE="8.3 DBMS_LOB Interface"><LINK
REL="next"
HREF="ch09_02.htm#ch09-SECT-2.3.5"
TITLE="9.2 UTL_RAW: Manipulating Raw Data"></HEAD
><BODY
><DIV
CLASS="htmlnav"
><H1
><IMG
SRC="gifs/smbanner.gif"
ALT="Oracle Built-in Packages"
USEMAP="#srchmap"
BORDER="0"></H1
><MAP
NAME="srchmap"
><AREA
SHAPE="RECT"
COORDS="0,0,466,65"
HREF="index.htm"
ALT="Oracle Built-in Packages"><AREA
SHAPE="RECT"
COORDS="467,0,514,18"
HREF="jobjects/fsearch.htm"
ALT="Search this book"></MAP
><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch08_03.htm#ch08-SECT-3.1.5"
TITLE="8.3 DBMS_LOB Interface"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 8.3 DBMS_LOB Interface"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><SPAN
CLASS="NAVTITLE"
>Chapter 9</SPAN
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch09_02.htm#ch09-SECT-2.3.5"
TITLE="9.2 UTL_RAW: Manipulating Raw Data"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 9.2 UTL_RAW: Manipulating Raw Data"
BORDER="0"></A
></TD
></TR
></TABLE
>&nbsp;<HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"></DIV
><DIV
CLASS="chapter"
><H1
CLASS="chapter"
><A
CLASS="title"
NAME="ch09-25175"
>9. Datatype Packages</A
></H1
><DIV
CLASS="htmltoc"
><P
><B
>Contents:</B
><BR><A
CLASS="sect1"
HREF="#ch09-21313"
TITLE="9.1 DBMS_ROWID: Working with the ROWID Pseudo-Column (Oracle8 only)"
>DBMS_ROWID: Working with the ROWID Pseudo-Column (Oracle8 only)</A
><BR><A
CLASS="sect1"
HREF="ch09_02.htm#ch09-SECT-2.3.5"
TITLE="9.2 UTL_RAW: Manipulating Raw Data"
>UTL_RAW: Manipulating Raw Data</A
></P
><P
></P
></DIV
><P
CLASS="para"
>This chapter introduces you to several packages that let you work effectively with particular types of Oracle data:</P
><DL
CLASS="variablelist"
><DT
CLASS="term"
>DBMS_ROWID</DT
><DD
CLASS="listitem"
><P
CLASS="para"
>New in Oracle8, a<A
CLASS="indexterm"
NAME="ch09-idx-18355-0"
></A
><A
CLASS="indexterm"
NAME="ch09-idx-18355-1"
></A
><A
CLASS="indexterm"
NAME="ch09-idx-18355-2"
></A
><A
CLASS="indexterm"
NAME="ch09-idx-18355-3"
></A
><A
CLASS="indexterm"
NAME="ch09-idx-18355-4"
></A
><A
CLASS="indexterm"
NAME="ch09-idx-18355-5"
></A
>llows you to work with the two different ROWID formats: extended (new to Oracle8) and restricted (traditional Oracle7 ROWIDs). </P
></DD
><DT
CLASS="term"
>UTL_RAW</DT
><DD
CLASS="listitem"
><P
CLASS="para"
>Offers a set of functions allowing you to perform concatenation, substring, bit-wise logical analysis, byte translation, and length operations on RAW data.</P
></DD
><DT
CLASS="term"
>UTL_REF</DT
><DD
CLASS="listitem"
><P
CLASS="para"
>New in Oracle8 Release 8.1; provides a PL/SQL interface to select and modify objects (instances of an object type) in an object table without having to specify or know about the underlying database table. </P
></DD
></DL
><DIV
CLASS="sect1"
><H2
CLASS="sect1"
><A
CLASS="title"
NAME="ch09-21313"
>9.1 DBMS_ROWID: Working with the ROWID Pseudo-Column (Oracle8 only)</A
></H2
><P
CLASS="para"
>The <A
CLASS="indexterm"
NAME="ch09-idx-19794-0"
></A
>DBMS_ROWID package lets you work with ROWIDs from within PL/SQL programs and SQL statements. You can use the programs in this package to both  create and manipulate ROWIDs. You can determine the data block number, the object number, and other components of the ROWID without having to write code to translate the base-64 character external ROWID.</P
><BLOCKQUOTE
CLASS="note"
><P
CLASS="para"
><STRONG
>NOTE:</STRONG
> With Oracle8, there are two types of ROWIDs: extended and restricted. Restricted ROWIDs are the ROWIDs available with Oracle Version 7 and earlier. Extended ROWIDs are used only in Oracle8. </P
></BLOCKQUOTE
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch09-SECT-1.1"
>9.1.1 Getting Started with DBMS_ROWID</A
></H3
><P
CLASS="para"
>The <A
CLASS="indexterm"
NAME="ch09-idx-18364-0"
></A
>DBMS_ROWID package is created when the Oracle8 database is installed. The <I
CLASS="filename"
>dbmsutil.sql</I
> script (found in the built-in packages source code directory, as described in <A
CLASS="xref"
HREF="ch01_01.htm"
>Chapter 1, <CITE
CLASS="chapter"
>Introduction</CITE
></A
>), contains the source code for this package's specification. This script is called by <EM
CLASS="emphasis"
>catproc.sql</EM
>, which is normally run immediately after database creation. The script creates the public synonym DBMS_ROWID for the package and grants EXECUTE <A
CLASS="indexterm"
NAME="ch09-idx-20439-0"
></A
>privilege on the package to public. All Oracle users can reference and make use of this package. </P
><P
CLASS="para"
>All of the programs in DBMS_ROWID run as invoker, meaning that the privileges of the programs are taken from the session running the DBMS_ROWID programs and not from the owner of that package.</P
><DIV
CLASS="sect3"
><H4
CLASS="sect3"
><A
CLASS="title"
NAME="ch09-SECT-1.1.1"
>9.1.1.1 DBMS_ROWID programs</A
></H4
><P
CLASS="para"
><A
CLASS="xref"
HREF="ch09_01.htm"
>Table 9.1</A
> lists the programs defined for the DBMS_ROWID package. For a dicussion of some of the concepts underlying these program operations, see the next section, "<A
CLASS="xref"
HREF="ch09_01.htm"
>Section 9.1.2, "ROWID Concepts"</A
>." </P
><BR><TABLE
CLASS="table"
BORDER="1"
CELLPADDING="3"
><CAPTION
CLASS="table"
><A
CLASS="title"
NAME="ch09-24022"
>Table 9.1: DBMS_ROWID <A
CLASS="indexterm"
NAME="ch09-idx-18367-0"
></A
><A
CLASS="indexterm"
NAME="ch09-idx-18367-1"
></A
>Programs </A
></CAPTION
><THEAD
CLASS="thead"
><TR
CLASS="row"
VALIGN="TOP"
><TH
CLASS="entry"
ALIGN="LEFT"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>Name</P
></TH
><TH
CLASS="entry"
ALIGN="LEFT"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>Description</P
></TH
><TH
CLASS="entry"
ALIGN="LEFT"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>Use in SQL</P
></TH
></TR
></THEAD
><TBODY
CLASS="tbody"
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>ROWID_BLOCK_NUMBER </P
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>Returns the database block number of the ROWID.</P
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>Yes</P
></TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>ROWID_CREATE </P
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>Creates a ROWID (either restricted or extended as you request) based on the individual ROWID component values you specify. Use this function for test purposes only. </P
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>Yes</P
></TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>ROWID_INFO </P
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>Returns information about the specified ROWID. This procedure essentially "parses" the ROWID.</P
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>Yes</P
></TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>ROWID_OBJECT </P
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>Returns the data object number for an extended ROWID. Returns 0 if the specified ROWID is restricted.</P
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>Yes</P
></TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>ROWID_RELATIVE_FNO</P
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>Returns the relative file number (relative to the tablespace) of the ROWID.</P
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>Yes</P
></TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>ROWID_ROW_NUMBER </P
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>Returns the row number of the ROWID.</P
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>Yes</P
></TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>ROWID_TO_ABSOLUTE_FNO </P
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>Returns the absolute file number (for a row in a given schema and table) from the ROWID. </P
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>Yes</P
></TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>ROWID_TO_EXTENDED </P
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>Converts a restricted ROWID to an extended ROWID.</P
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>Yes</P
></TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>ROWID_TO_RESTRICTED </P
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>Converts an extended ROWID to a restricted ROWID.</P
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>Yes</P
></TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>ROWID_TYPE </P
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>Returns 0 if the ROWID is restricted, 1 if the ROWID is extended.</P
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>Yes</P
></TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>ROWID_VERIFY </P
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>Returns 0 if the restricted ROWID provided can be converted to an extended format, and  1 otherwise.</P
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>Yes</P
></TD
></TR
></TBODY
></TABLE
></DIV
><DIV
CLASS="sect3"
><H4
CLASS="sect3"
><A
CLASS="title"
NAME="ch09-SECT-1.1.2"
>9.1.1.2 DBMS_ROWID exceptions</A
></H4
><P
CLASS="para"
><A
CLASS="xref"
HREF="ch09_01.htm"
>Table 9.2</A
> lists the named <A
CLASS="indexterm"
NAME="ch09-idx-18368-0"
></A
>exceptions defined in the DBMS_ROWID package; they are associated with the error number listed beside the name. </P
><BR><TABLE
CLASS="table"
BORDER="1"
CELLPADDING="3"
><CAPTION
CLASS="table"
><A
CLASS="title"
NAME="ch09-25723"
>Table 9.2: DBMS_ROWID Exceptions</A
></CAPTION
><THEAD
CLASS="thead"
><TR
CLASS="row"
VALIGN="TOP"
><TH
CLASS="entry"
ALIGN="LEFT"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>Name</P
></TH
><TH
CLASS="entry"
ALIGN="LEFT"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>Number</P
></TH
><TH
CLASS="entry"
ALIGN="LEFT"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>Description</P
></TH
></TR
></THEAD
><TBODY
CLASS="tbody"
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>ROWID_INVALID</P
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>-1410</P
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>The value entered is larger than the maximum width defined for the column.</P
></TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>ROWID_BAD_BLOCK</P
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>-28516</P
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>The block number specified in the ROWID is invalid.</P
></TD
></TR
></TBODY
></TABLE
></DIV
><DIV
CLASS="sect3"
><H4
CLASS="sect3"
><A
CLASS="title"
NAME="ch09-SECT-1.1.3"
>9.1.1.3 DBMS_ROWID nonprogram elements</A
></H4
><P
CLASS="para"
><A
CLASS="xref"
HREF="ch09_01.htm"
>Table 9.3</A
> lists the named constants defined by the DBMS_ROWID package for use with its programs.</P
><BR><TABLE
CLASS="table"
BORDER="1"
CELLPADDING="3"
><CAPTION
CLASS="table"
><A
CLASS="title"
NAME="ch09-30679"
>Table 9.3: DBMS_ROWID <A
CLASS="indexterm"
NAME="ch09-idx-18369-0"
></A
>Constants</A
></CAPTION
><THEAD
CLASS="thead"
><TR
CLASS="row"
VALIGN="TOP"
><TH
CLASS="entry"
ALIGN="LEFT"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>Name/Type</P
></TH
><TH
CLASS="entry"
ALIGN="LEFT"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>Description</P
></TH
></TR
></THEAD
><TBODY
CLASS="tbody"
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>ROWID_TYPE_RESTRICTED</P
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>A ROWID type: integer constant assigned the value of 0.</P
></TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>ROWID_TYPE_EXTENDED</P
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>A ROWID type: integer constant assigned the value of 1.</P
></TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>ROWID_IS_VALID</P
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>A ROWID verification result: integer constant assigned the value of 0.</P
></TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>ROWID_IS_INVALID</P
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>A ROWID verification result: integer constant assigned the value of 1.</P
></TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>ROWID_OBJECT_UNDEFINED</P
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>An object type indicating that the object number is not defined (for restricted ROWIDs): integer constant assigned the value of 0.</P
></TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>ROWID_CONVERT_INTERNAL</P
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>A ROWID conversion type: integer constant assigned the value of 0.</P
></TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>ROWID_CONVERT_EXTERNAL</P
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>A ROWID conversion type: integer constant assigned the value of 1.</P
></TD
></TR
></TBODY
></TABLE
></DIV
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch09-21687"
>9.1.2 ROWID Concepts</A
></H3
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="ch09-idx-18370-0"
></A
>This section offers a quick overview of the Oracle ROWID. You can get much more extensive information on ROWIDs from the Oracle documentation.</P
><P
CLASS="para"
>In the Oracle RDBMS, ROWID is a pseudocolumn that is a part of every table you create. The ROWID is an internally generated and maintained binary value that identifies a row of data in your table. It is called a <A
CLASS="indexterm"
NAME="ch09-idx-18371-0"
></A
><A
CLASS="indexterm"
NAME="ch09-idx-18371-1"
></A
>pseudocolumn because a SQL statement includes it in places where you would normally use a column. However, it is not a column that you create for the table. Instead, the RDBMS generates the ROWID for each row as it is inserted into the database. The information in the ROWID provides the exact physical location of the row in the database. You cannot change the value of a ROWID.</P
><P
CLASS="para"
>You can use the ROWID datatype to store ROWIDs from the database in your PL/SQL program. You can SELECT or FETCH the ROWID for a row into a ROWID variable. To manipulate ROWIDs in Oracle8, you will want to use the DBMS_ROWID package described in this chapter. In Oracle7, you will use the <A
CLASS="indexterm"
NAME="ch09-idx-18372-0"
></A
>ROWIDTOCHAR function to convert the ROWID to a fixed-length string and then perform operations against that string.</P
><P
CLASS="para"
>In <A
CLASS="indexterm"
NAME="ch09-idx-18373-0"
></A
><A
CLASS="indexterm"
NAME="ch09-idx-18373-1"
></A
>Oracle7, the format of the fixed-length ROWID is,</P
><TABLE
CLASS="simplelist"
BORDER="0"
><TR
><TD
CLASS="member"
><I
CLASS="filename"
>BBBBBBB.RRRR.FFFFF</I
></TD
></TR
></TABLE
><P
CLASS="para"
>where components of this format have the following meanings:</P
><DL
CLASS="variablelist"
><DT
CLASS="term"
>BBBBBBB</DT
><DD
CLASS="listitem"
><P
CLASS="para"
>The block in the database file.</P
></DD
><DT
CLASS="term"
>RRRR</DT
><DD
CLASS="listitem"
><P
CLASS="para"
>The row in the block (where the first row is zero, not one).</P
></DD
><DT
CLASS="term"
>FFFFF</DT
><DD
CLASS="listitem"
><P
CLASS="para"
>The database file.</P
></DD
></DL
><P
CLASS="para"
>All these numbers are hexadecimal; the database file is a number that you would then use to look up the actual name of the database file through the data dictionary.</P
><P
CLASS="para"
>In <A
CLASS="indexterm"
NAME="ch09-idx-18375-0"
></A
><A
CLASS="indexterm"
NAME="ch09-idx-18375-1"
></A
><A
CLASS="indexterm"
NAME="ch09-idx-18375-2"
></A
>Oracle8, ROWIDs have been "extended" to support partitioned tables and indexes. The new, extended ROWIDs include a data <A
CLASS="indexterm"
NAME="ch09-idx-18381-0"
></A
><A
CLASS="indexterm"
NAME="ch09-idx-18381-1"
></A
>object number, identifying the d<A
CLASS="indexterm"
NAME="ch09-idx-18382-0"
></A
>atabase segment. Any schema object found in the same segment, such as a cluster of tables, will have the same object number. In Oracle8, then, a ROWID contains the following information:</P
><UL
CLASS="itemizedlist"
><LI
CLASS="listitem"
><P
CLASS="para"
>The data object number</P
></LI
><LI
CLASS="listitem"
><P
CLASS="para"
>The data file (where the first file is 1)</P
></LI
><LI
CLASS="listitem"
><P
CLASS="para"
>The data block within the data file</P
></LI
><LI
CLASS="listitem"
><P
CLASS="para"
>The row in the data block (where the first row is 0)</P
></LI
></UL
><P
CLASS="para"
>Usually (and always in Oracle7), a ROWID will uniquely identify a row of data. Within Oracle8, however, rows in different tables stored in the same cluster can have the same ROWID value.</P
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch09-SECT-1.3"
>9.1.3 The DBMS_ROWID Interface</A
></H3
><P
CLASS="para"
>The following sections describe the procedures and functions available through DBMS_ROWID.</P
><DIV
CLASS="sect3"
><H4
CLASS="sect3"
><A
CLASS="title"
NAME="ch09-SECT-1.3.1"
>9.1.3.1 The DBMS_ROWID.<A
CLASS="indexterm"
NAME="ch09-idx-18383-0"
></A
>ROWID_BLOCK_NUMBER function</A
></H4
><P
CLASS="para"
>The ROWID_BLOCK_NUMBER function returns the <A
CLASS="indexterm"
NAME="ch09-idx-18386-0"
></A
><A
CLASS="indexterm"
NAME="ch09-idx-18386-1"
></A
><A
CLASS="indexterm"
NAME="ch09-idx-18386-2"
></A
>block number of a ROWID. Its header is,</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>FUNCTION DBMS_ROWID.ROWID_BLOCK_NUMBER (row_id IN ROWID)
RETURN NUMBER;</PRE
></BLOCKQUOTE
><P
CLASS="para"
>where the ROWID parameter is the ROWID from which the value is extracted.</P
><DIV
CLASS="sect4"
><H4
CLASS="sect4"
><A
CLASS="title"
NAME="ch09-SECT-1.3.1.1"
>9.1.3.1.1 Restrictions</A
></H4
><P
CLASS="para"
>The DBMS_ROWID package supplies the following pragma for ROWID_BLOCK_NUMBER:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>PRAGMA RESTRICT_REFERENCES (ROWID_BLOCK_NUMBER, WNDS, RNDS, WNPS, RNPS);</PRE
></BLOCKQUOTE
></DIV
></DIV
><DIV
CLASS="sect3"
><H4
CLASS="sect3"
><A
CLASS="title"
NAME="ch09-SECT-1.3.2"
>9.1.3.2 The DBMS_ROWID.<A
CLASS="indexterm"
NAME="ch09-idx-18384-0"
></A
>CREATE_ROWID function</A
></H4
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="ch09-idx-18387-0"
></A
><A
CLASS="indexterm"
NAME="ch09-idx-18387-1"
></A
>The CREATE_ROWID function creates and returns a ROWID (either restricted or extended, as you request) based on the individual ROWID component values you specify. Use this function for test purposes only. Here is its header:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>FUNCTION DBMS_ROWID.ROWID_CREATE
    (rowid_type IN NUMBER
    ,object_number IN NUMBER
    ,relative_fno IN NUMBER
    ,block_number IN NUMBER
    ,row_number IN NUMBER)
RETURN ROWID;</PRE
></BLOCKQUOTE
><P
CLASS="para"
>Parameters are summarized in the following table.</P
><TABLE
CLASS="informaltable"
BORDER="1"
CELLPADDING="3"
><THEAD
CLASS="thead"
><TR
CLASS="row"
VALIGN="TOP"
><TH
CLASS="entry"
ALIGN="LEFT"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>Parameter</P
></TH
><TH
CLASS="entry"
ALIGN="LEFT"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>Description</P
></TH
></TR
></THEAD
><TBODY
CLASS="tbody"
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>rowid_type</P
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>The type of ROWID to be created. Specify either of the named constants ROWID_TYPE_RESTRICTED or ROWID_TYPE_EXTENDED.</P
></TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>object_number</P
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>The data object number for the ROWID. For a restricted ROWID (Oracle7), use the ROWID_OBJECT_UNDEFINED constant.</P
></TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>relative_fno</P
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>The relative file number for the ROWID.</P
></TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>block_number</P
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>The block number for the ROWID.</P
></TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>row_number</P
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>The row number for the ROWID.</P
></TD
></TR
></TBODY
></TABLE
><DIV
CLASS="sect4"
><H4
CLASS="sect4"
><A
CLASS="title"
NAME="ch09-SECT-1.3.2.1"
>9.1.3.2.1 Restrictions</A
></H4
><P
CLASS="para"
>The DBMS_ROWID package supplies the following pragma for CREATE_ROWID:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>PRAGMA RESTRICT_REFERENCES (CREATE_ROWID, WNDS, RNDS, WNPS, RNPS);</PRE
></BLOCKQUOTE
></DIV
><DIV
CLASS="sect4"
><H4
CLASS="sect4"
><A
CLASS="title"
NAME="ch09-SECT-1.3.2.2"
>9.1.3.2.2 Example</A
></H4
><P
CLASS="para"
>Here is an example of a call to the ROWID_CREATE procedure:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>   my_rowid ROWID;
BEGIN 
   my_rowid := DBMS_ROWID.ROWID_CREATE 
     (DBMS_ROWID.ROWID_TYPE_EXTENDED, 100, 15, 103, 345);
END;
/</PRE
></BLOCKQUOTE
></DIV
></DIV
><DIV
CLASS="sect3"
><H4
CLASS="sect3"
><A
CLASS="title"
NAME="ch09-SECT-1.3.3"
>9.1.3.3 The DBMS_ROWID.<A
CLASS="indexterm"
NAME="ch09-idx-18385-0"
></A
>ROWID_INFO procedure</A
></H4
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="ch09-idx-18388-0"
></A
><A
CLASS="indexterm"
NAME="ch09-idx-18388-1"
></A
>The ROWID_INFO procedure parses out and returns the individual components of the specified ROWID. Here is its header:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>PROCEDURE DBMS_ROWID.ROWID_INFO
    (rowid_in IN ROWID
    ,rowid_type OUT NUMBER
    ,object_number OUT NUMBER
    ,relative_fno OUT NUMBER
    ,block_number OUT NUMBER
    ,row_number OUT NUMBER);</PRE
></BLOCKQUOTE
><P
CLASS="para"
>Parameters are summarized in the following table.</P
><TABLE
CLASS="informaltable"
BORDER="1"
CELLPADDING="3"
><THEAD
CLASS="thead"
><TR
CLASS="row"
VALIGN="TOP"
><TH
CLASS="entry"
ALIGN="LEFT"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>Parameter</P
></TH
><TH
CLASS="entry"
ALIGN="LEFT"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>Description</P
></TH
></TR
></THEAD
><TBODY
CLASS="tbody"
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>rowid_in</P
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>The ROWID value to be parsed into components.</P
></TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>rowid_type	</P
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>The type of ROWID. The value returned will be either of the named constants ROWID_TYPE_RESTRICTED or ROWID_TYPE_EXTENDED.</P
></TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>object_number</P
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>The data object number for the ROWID. For a restricted ROWID (Oracle7), the ROWID_OBJECT_UNDEFINED constant is returned.</P
></TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>relative_fno</P
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>The relative file number for the ROWID.</P
></TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>block_number</P
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>The block number for the ROWID in the file.</P
></TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>row_number</P
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>The row number for the ROWID.</P
></TD
></TR
></TBODY
></TABLE
><DIV
CLASS="sect4"
><H4
CLASS="sect4"
><A
CLASS="title"
NAME="ch09-SECT-1.3.3.1"
>9.1.3.3.1 Restrictions</A
></H4
><P
CLASS="para"
>The DBMS_ROWID package supplies the following pragma for ROWID_INFO:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>PRAGMA RESTRICT_REFERENCES (ROWID_INFO, WNDS, RNDS, WNPS, RNPS);</PRE
></BLOCKQUOTE
></DIV
></DIV
><DIV
CLASS="sect3"
><H4
CLASS="sect3"
><A
CLASS="title"
NAME="ch09-SECT-1.3.4"
>9.1.3.4 The DBMS_ROWID.<A
CLASS="indexterm"
NAME="ch09-idx-18389-0"
></A
>ROWID_OBJECT function</A
></H4
><P
CLASS="para"
>The ROWID_OBJECT function returns the <A
CLASS="indexterm"
NAME="ch09-idx-18390-0"
></A
><A
CLASS="indexterm"
NAME="ch09-idx-18390-1"
></A
>object number of a ROWID. The ROWID_OBJECT_UNDEFINED constant is returned for restricted ROWIDs. Its header is,</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>FUNCTION DBMS_ROWID.ROWID_OBJECT (row_id IN ROWID)
RETURN NUMBER;</PRE
></BLOCKQUOTE
><P
CLASS="para"
>where the row_id parameter is the ROWID from which the value is extracted.</P
><DIV
CLASS="sect4"
><H4
CLASS="sect4"
><A
CLASS="title"
NAME="ch09-SECT-1.3.4.1"
>9.1.3.4.1 Restrictions</A
></H4
><P
CLASS="para"
>The DBMS_ROWID package supplies the following pragma for ROWID_OBJECT:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>PRAGMA RESTRICT_REFERENCES (ROWID_OBJECT, WNDS, RNDS, WNPS, RNPS);</PRE
></BLOCKQUOTE
></DIV
><DIV
CLASS="sect4"
><H4
CLASS="sect4"
><A
CLASS="title"
NAME="ch09-SECT-1.3.4.2"
>9.1.3.4.2 Example</A
></H4
><P
CLASS="para"
>You will want to obtain a ROWID's object number only if the ROWID type is extended. You would write code like this to perform that check:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>IF DBMS_ROWID.ROWID_TYPE (v_rowid) = DBMS_ROWID.ROWID_TYPE_EXTENDED 
THEN
   v_objnum := DBMS_ROWID.ROWID_OBJECT (v_rowid);
END IF;</PRE
></BLOCKQUOTE
></DIV
></DIV
><DIV
CLASS="sect3"
><H4
CLASS="sect3"
><A
CLASS="title"
NAME="ch09-SECT-1.3.5"
>9.1.3.5 The DBMS_ROWID.<A
CLASS="indexterm"
NAME="ch09-idx-18391-0"
></A
>ROWID_RELATIVE_FNO function</A
></H4
><P
CLASS="para"
>The ROWID_RELATIVE_FNO function returns the relative <A
CLASS="indexterm"
NAME="ch09-idx-18392-0"
></A
><A
CLASS="indexterm"
NAME="ch09-idx-18392-1"
></A
><A
CLASS="indexterm"
NAME="ch09-idx-18392-2"
></A
>file number of a ROWID. Its header is,</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>FUNCTION DBMS_ROWID.ROWID_RELATIVE_FNO
    (row_id IN ROWID)
RETURN NUMBER;</PRE
></BLOCKQUOTE
><P
CLASS="para"
>where the row_id parameter is the ROWID from which the value is extracted.</P
><DIV
CLASS="sect4"
><H4
CLASS="sect4"
><A
CLASS="title"
NAME="ch09-SECT-1.3.5.1"
>9.1.3.5.1 Restrictions</A
></H4
><P
CLASS="para"
>The DBMS_ROWID package supplies the following pragma for ROWID_RELATIVE_FNO:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>PRAGMA RESTRICT_REFERENCES (ROWID_RELATIVE_FNO, WNDS, RNDS, WNPS, RNPS);</PRE
></BLOCKQUOTE
></DIV
></DIV
><DIV
CLASS="sect3"
><H4
CLASS="sect3"
><A
CLASS="title"
NAME="ch09-SECT-1.3.6"
>9.1.3.6 The DBMS_ROWID.<A
CLASS="indexterm"
NAME="ch09-idx-18393-0"
></A
>ROWID_ROW_NUMBER function</A
></H4
><P
CLASS="para"
>The ROWID_ROW_NUMBER function returns the <A
CLASS="indexterm"
NAME="ch09-idx-18394-0"
></A
><A
CLASS="indexterm"
NAME="ch09-idx-18394-1"
></A
>row number of a ROWID. Its header is,</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>FUNCTION DBMS_ROWID.ROWID_ROW_NUMBER (row_id IN ROWID)
RETURN NUMBER;</PRE
></BLOCKQUOTE
><P
CLASS="para"
>where the row_id parameter is the ROWID from which the value is extracted.</P
><DIV
CLASS="sect4"
><H4
CLASS="sect4"
><A
CLASS="title"
NAME="ch09-SECT-1.3.6.1"
>9.1.3.6.1 Restrictions</A
></H4
><P
CLASS="para"
>The DBMS_ROWID package supplies the following pragma for ROWID_ROW_NUMBER:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>PRAGMA RESTRICT_REFERENCES (ROWID_ROW_NUMBER, WNDS, RNDS, WNPS, RNPS);</PRE
></BLOCKQUOTE
></DIV
></DIV
><DIV
CLASS="sect3"
><H4
CLASS="sect3"
><A
CLASS="title"
NAME="ch09-SECT-1.3.7"
>9.1.3.7 The DBMS_ROWID.<A
CLASS="indexterm"
NAME="ch09-idx-18395-0"
></A
>ROWID_TO_ABSOLUTE_FNO function</A
></H4
><P
CLASS="para"
>The ROWID_TO_ABSOLUTE_FNO function returns the <A
CLASS="indexterm"
NAME="ch09-idx-18396-0"
></A
><A
CLASS="indexterm"
NAME="ch09-idx-18396-1"
></A
>absolute file number of a ROWID. Here is its header:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>FUNCTION DBMS_ROWID.ROWID_TO_ABSOLUTE_FNO
    (row_id IN ROWID
    ,schema_name IN VARCHAR2
    ,object_name IN VARCHAR2)
RETURN NUMBER;</PRE
></BLOCKQUOTE
><P
CLASS="para"
>Parameters are summarized in the following table.</P
><TABLE
CLASS="informaltable"
BORDER="1"
CELLPADDING="3"
><THEAD
CLASS="thead"
><TR
CLASS="row"
VALIGN="TOP"
><TH
CLASS="entry"
ALIGN="LEFT"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>Parameter</P
></TH
><TH
CLASS="entry"
ALIGN="LEFT"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>Description</P
></TH
></TR
></THEAD
><TBODY
CLASS="tbody"
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>row_id</P
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>The ROWID from which the value is extracted.</P
></TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>schema_name</P
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>The name of the schema contains the table.</P
></TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>object_name</P
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>The table name.</P
></TD
></TR
></TBODY
></TABLE
><DIV
CLASS="sect4"
><H4
CLASS="sect4"
><A
CLASS="title"
NAME="ch09-SECT-1.3.7.1"
>9.1.3.7.1 Restrictions</A
></H4
><P
CLASS="para"
>The DBMS_ROWID package supplies the following pragma for ROWID_RELATIVE_FNO:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>PRAGMA RESTRICT_REFERENCES (ROWID_RELATIVE_FNO, WNDS, WNPS, RNPS);</PRE
></BLOCKQUOTE
></DIV
></DIV
><DIV
CLASS="sect3"
><H4
CLASS="sect3"
><A
CLASS="title"
NAME="ch09-SECT-1.3.8"
>9.1.3.8 The DBMS_ROWID.<A
CLASS="indexterm"
NAME="ch09-idx-18397-0"
></A
>ROWID_TO_EXTENDED function</A
></H4
><P
CLASS="para"
>The ROWID_TO_EXTENDED function converts a <A
CLASS="indexterm"
NAME="ch09-idx-18398-0"
></A
><A
CLASS="indexterm"
NAME="ch09-idx-18398-1"
></A
>restricted ROWID, addressing a specific row in a table, to an extended ROWID. Here is its header:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>FUNCTION DBMS_ROWID.ROWID_TO_EXTENDED
    (old_rowid IN ROWID
    ,schema_name IN VARCHAR2
    ,object_name IN VARCHAR2
    ,conversion_type IN INTEGER)
RETURN ROWID;</PRE
></BLOCKQUOTE
><P
CLASS="para"
>Parameters are summarized in the following table.</P
><TABLE
CLASS="informaltable"
BORDER="1"
CELLPADDING="3"
><THEAD
CLASS="thead"
><TR
CLASS="row"
VALIGN="TOP"
><TH
CLASS="entry"
ALIGN="LEFT"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>Parameter</P
></TH
><TH
CLASS="entry"
ALIGN="LEFT"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>Description</P
></TH
></TR
></THEAD
><TBODY
CLASS="tbody"
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>old_rowid</P
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>The ROWID to be converted.</P
></TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>schema_name</P
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>The name of the schema that contains the table.</P
></TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>object_name</P
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>The table name.</P
></TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>conversion_type</P
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>The type of conversion. Pass either the ROWID_CONVERT_INTERNAL constant (if old_ROWID was stored in a column of type ROWID) or ROWID_CONVERT_EXTERNAL (if old_ROWID was stored as a character string).</P
></TD
></TR
></TBODY
></TABLE
><DIV
CLASS="sect4"
><H4
CLASS="sect4"
><A
CLASS="title"
NAME="ch09-SECT-1.3.8.1"
>9.1.3.8.1 Restrictions</A
></H4
><P
CLASS="para"
>Note the following restrictions on calling ROWID_TO_EXTENDED:</P
><UL
CLASS="itemizedlist"
><LI
CLASS="listitem"
><P
CLASS="para"
>The ROWID_TO_EXTENDED function returns a ROWID in the extended character format. If you provide a NULL ROWID, the function will return NULL. If a zero-valued ROWID is supplied (00000000.0000.0000), a zero-valued restricted ROWID is returned. </P
></LI
><LI
CLASS="listitem"
><P
CLASS="para"
>The DBMS_ROWID package supplies the following pragma for ROWID_TO_EXTENDED:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>PRAGMA RESTRICT_REFERENCES (ROWID_TO_EXTENDED, WNDS, WNPS, RNPS);</PRE
></BLOCKQUOTE
></LI
><LI
CLASS="listitem"
><P
CLASS="para"
>If the schema and object names are provided as IN parameters, this function first verifies that you have SELECT privilege on the table named. It then converts the restricted ROWID provided to an extended ROWID, using the data object number of the specified table. Even if ROWID_TO_EXTENDED returns a value, however, that does not guarantee that the converted ROWID actually references a valid row in the table, either at the time that the function is called, or when the extended ROWID is actually used. It is only performing a conversion.</P
></LI
><LI
CLASS="listitem"
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="ch09-idx-18406-0"
></A
><A
CLASS="indexterm"
NAME="ch09-idx-18406-1"
></A
>If the schema and object name are not provided (i.e., are passed as NULL), then this function attempts to fetch the page specified by the restricted ROWID provided. It treats the <A
CLASS="indexterm"
NAME="ch09-idx-18408-0"
></A
>file number stored in this ROWID as the absolute file number. This may cause problems if the file has been dropped, and its number has been reused prior to the data migration. If the fetched page belongs to a valid table, the data object number of this table is used in converting to an extended ROWID value. </P
><P
CLASS="para"
>This approach is very inefficient. Oracle recommends doing this only as a last resort, when the target table is not known. Note that the user must still be aware of the correct table name when using the converted ROWID. </P
></LI
><LI
CLASS="listitem"
><P
CLASS="para"
>If an extended ROWID value is supplied, that ROWID's data object is verified against the data object number calculated from the table name argument. If the two numbers do not match, DBMS_ROWID raises the INVALID_ROWID exception. If there is a match, then the input ROWID is returned.</P
></LI
></UL
></DIV
><DIV
CLASS="sect4"
><H4
CLASS="sect4"
><A
CLASS="title"
NAME="ch09-SECT-1.3.8.2"
>9.1.3.8.2 Example</A
></H4
><P
CLASS="para"
>Suppose that I have a table in my APP schema called ROWID_conversion. This table contains two columns: ROWID_value and table_name. The ROWID_value column contains the restricted-format ROWIDs for rows in the table specifed by the table_name column. I can then convert all of my restricted ROWID values to extended ones with the following UPDATE statement:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>UPDATE app.rowid_conversion
   SET rowid_value = 
       DBMS_ROWID.ROWID_TO_EXTENDED 
          (rowid_value, 
           'APP', 
           table_name,
           DBMS_ROWID.ROWID_CONVERT_INTERNAL)<A
CLASS="indexterm"
NAME="ch09-idx-18403-0"
></A
><A
CLASS="indexterm"
NAME="ch09-idx-18403-1"
></A
>;.<A
CLASS="indexterm"
NAME="ch09-idx-18400-0"
></A
></PRE
></BLOCKQUOTE
></DIV
></DIV
><DIV
CLASS="sect3"
><H4
CLASS="sect3"
><A
CLASS="title"
NAME="ch09-SECT-1.3.9"
>9.1.3.9 The DBMS_ROWID.<A
CLASS="indexterm"
NAME="ch09-idx-18410-0"
></A
>ROWID_TO_RESTRICTED function</A
></H4
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="ch09-idx-18411-0"
></A
><A
CLASS="indexterm"
NAME="ch09-idx-18411-1"
></A
>The ROWID_TO_RESTRICTED<CODE
CLASS="literal"
> </CODE
>function converts an extended ROWID to a restricted ROWID. Here is its header:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>FUNCTION DBMS_ROWID.ROWID_TO_RESTRICTED
    (old_rowid IN ROWID
    ,conversion_type IN INTEGER)
RETURN ROWID;</PRE
></BLOCKQUOTE
><P
CLASS="para"
>Parameters are summarized in the following table.</P
><TABLE
CLASS="informaltable"
BORDER="1"
CELLPADDING="3"
><THEAD
CLASS="thead"
><TR
CLASS="row"
VALIGN="TOP"
><TH
CLASS="entry"
ALIGN="LEFT"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>Parameter</P
></TH
><TH
CLASS="entry"
ALIGN="LEFT"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>Description</P
></TH
></TR
></THEAD
><TBODY
CLASS="tbody"
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>old_rowid</P
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>The ROWID to be converted.</P
></TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>conversion_type</P
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>The format of the returned ROWID. Pass either the ROWID_CONVERT_INTERNAL constant (if the returned ROWID is to be stored in a column of type ROWID) or the ROWID_CONVERT_EXTERNAL constant (if the returned ROWID is to be stored as a character string).</P
></TD
></TR
></TBODY
></TABLE
><DIV
CLASS="sect4"
><H4
CLASS="sect4"
><A
CLASS="title"
NAME="ch09-SECT-1.3.9.1"
>9.1.3.9.1 Restrictions</A
></H4
><P
CLASS="para"
>The DBMS_ROWID package supplies the following pragma for ROWID_TO_RESTRICTED:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>PRAGMA RESTRICT_REFERENCES 
   (ROWID_TO_RESTRICTED, WNDS, RNDS, WNPS, RNPS);</PRE
></BLOCKQUOTE
></DIV
></DIV
><DIV
CLASS="sect3"
><H4
CLASS="sect3"
><A
CLASS="title"
NAME="ch09-SECT-1.3.10"
>9.1.3.10 The DBMS_ROWID.<A
CLASS="indexterm"
NAME="ch09-idx-18412-0"
></A
>ROWID_TYPE function</A
></H4
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="ch09-idx-18413-0"
></A
>The ROWID_TYPE function returns the type of a ROWID via one of the following package constants: ROWID_TYPE_RESTRICTED or ROWID_TYPE_EXTENDED. Its header is,</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>FUNCTION DBMS_ROWID.ROWID_TYPE (row_id IN ROWID)
   RETURN NUMBER;</PRE
></BLOCKQUOTE
><P
CLASS="para"
>where the row_id parameter is the ROWID from which the value is extracted.</P
><DIV
CLASS="sect4"
><H4
CLASS="sect4"
><A
CLASS="title"
NAME="ch09-SECT-1.3.10.1"
>9.1.3.10.1 Restrictions</A
></H4
><P
CLASS="para"
>The DBMS_ROWID package supplies the following pragma for ROWID_TYPE:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>PRAGMA RESTRICT_REFERENCES (ROWID_TYPE, WNDS, RNDS, WNPS, RNPS);</PRE
></BLOCKQUOTE
></DIV
><DIV
CLASS="sect4"
><H4
CLASS="sect4"
><A
CLASS="title"
NAME="ch09-SECT-1.3.10.2"
>9.1.3.10.2 Example</A
></H4
><P
CLASS="para"
>In the following query, I determine the ROWID types in the emp table:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>SELECT DISTINCT (DBMS_ROWID.ROWID_TYPE(ROWID))
  FROM emp;</PRE
></BLOCKQUOTE
><P
CLASS="para"
>This returns the value of 1, that is: DBMS_ROWID.ROWID_TYPE_EXTENDED. The emp table was created under Oracle8 and therefore uses the Oracle8 type of ROWID.</P
></DIV
></DIV
><DIV
CLASS="sect3"
><H4
CLASS="sect3"
><A
CLASS="title"
NAME="ch09-SECT-1.3.11"
>9.1.3.11 The DBMS_ROWID.<A
CLASS="indexterm"
NAME="ch09-idx-18414-0"
></A
><A
CLASS="indexterm"
NAME="ch09-idx-18415-0"
></A
>ROWID_VERIFY function</A
></H4
><P
CLASS="para"
>The ROWID_VERIFY function verifies a ROWID. It returns either the ROWID_VALID or ROWID_INVALID constants. Here is its header:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>FUNCTION DBMS_ROWID.ROWID_VERIFY
    (rowid_in IN ROWID
    ,schema_name IN VARCHAR2
    ,object_name IN VARCHAR2
    ,conversion_type IN INTEGER)
RETURN NUMBER;</PRE
></BLOCKQUOTE
><P
CLASS="para"
>Parameters are summarized in the following table.</P
><TABLE
CLASS="informaltable"
BORDER="1"
CELLPADDING="3"
><THEAD
CLASS="thead"
><TR
CLASS="row"
VALIGN="TOP"
><TH
CLASS="entry"
ALIGN="LEFT"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>Parameter</P
></TH
><TH
CLASS="entry"
ALIGN="LEFT"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>Description</P
></TH
></TR
></THEAD
><TBODY
CLASS="tbody"
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>rowid_in</P
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>The ROWID to be verified.</P
></TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>schema_name</P
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>The name of the schema containing the table.</P
></TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>object_name</P
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>The name of the table.</P
></TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>conversion_type</P
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>The type of conversion to be used for the verification. You should pass either the ROWID_CONVERT_INTERNAL constant (if ROWID_in is stored in a column of type ROWID) or the ROWID_CONVERT_EXTERNAL constant (if ROWID_in is stored as a character string).</P
></TD
></TR
></TBODY
></TABLE
><DIV
CLASS="sect4"
><H4
CLASS="sect4"
><A
CLASS="title"
NAME="ch09-SECT-1.3.11.1"
>9.1.3.11.1 Restrictions</A
></H4
><P
CLASS="para"
>The DBMS_ROWID package supplies the following pragma for ROWID_VERIFY:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>PRAGMA RESTRICT_REFERENCES (ROWID_VERIFY, WNDS, WNPS, RNPS);</PRE
></BLOCKQUOTE
></DIV
><DIV
CLASS="sect4"
><H4
CLASS="sect4"
><A
CLASS="title"
NAME="ch09-SECT-1.3.11.2"
>9.1.3.11.2 Example</A
></H4
><P
CLASS="para"
>Interestingly, you can call this numeric function as a kind of Boolean function within SQL. Suppose that I want to find all the invalid ROWIDs prior to converting them from restricted to extended. I could write the following query (using the same tables used in the example for the ROWID_TO_EXTENDED function):</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>SELECT ROWID, rowid_value 
  FROM app.rowid_conversion
  WHERE DBMS_ROWID.ROWID_VERIFY (rowid_value, NULL, NULL, 0) = 1;<A
CLASS="indexterm"
NAME="ch09-idx-18357-0"
></A
></PRE
></BLOCKQUOTE
></DIV
></DIV
></DIV
></DIV
></DIV
><DIV
CLASS="htmlnav"
><P
></P
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch08_03.htm#ch08-SECT-3.1.5"
TITLE="8.3 DBMS_LOB Interface"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 8.3 DBMS_LOB Interface"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="book"
HREF="index.htm"
TITLE="Oracle Built-in Packages"
><IMG
SRC="../gifs/txthome.gif"
ALT="Oracle Built-in Packages"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch09_02.htm#ch09-SECT-2.3.5"
TITLE="9.2 UTL_RAW: Manipulating Raw Data"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 9.2 UTL_RAW: Manipulating Raw Data"
BORDER="0"></A
></TD
></TR
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
>8.3 DBMS_LOB Interface</TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="index"
HREF="index/idx_0.htm"
TITLE="Book Index"
><IMG
SRC="../gifs/index.gif"
ALT="Book Index"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
>9.2 UTL_RAW: Manipulating Raw Data</TD
></TR
></TABLE
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"></DIV
><IMG SRC="../gifs/smnavbar.gif"
USEMAP="#map"
BORDER="0"
ALT="The Oracle Library Navigation">

<P><font size="-1">
<a href="../copyrght.htm#copy">Copyright (c) 2000</a> O'Reilly &amp; Associates. All rights reserved.
</font></P>

<MAP NAME="map">

<AREA SHAPE="RECT"
COORDS="0,0,35,30"
HREF="../index.htm"
ALT="Library Home">

<AREA SHAPE="RECT"
COORDS="40,0,95,30"
HREF="../prog2/index.htm"
ALT="Oracle PL/SQL Programming, 2nd. Ed.">

<AREA SHAPE="RECT"
COORDS="100,0,200,30"
HREF="../guide8i/index.htm"
ALT="Guide to Oracle 8i Features">

<AREA SHAPE="RECT"
COORDS="205,0,245,30"
HREF="index.htm"
ALT="Oracle Built-in Packages">

<AREA SHAPE="RECT"
COORDS="250,0,320,30"
HREF="../advprog/index.htm"
ALT="Advanced PL/SQL Programming with Packages">

<AREA SHAPE="RECT"
COORDS="325,0,420,30"
HREF="../webapp/index.htm"
ALT="Oracle Web Applications">

<AREA SHAPE="RECT"
COORDS="425,0,490,30"
HREF="../langpkt/index.htm"
ALT="Oracle PL/SQL Language Pocket Reference">

<AREA SHAPE="RECT"
COORDS="495,0,570,30"
HREF="../bipkt/index.htm"
ALT="Oracle PL/SQL Built-ins Pocket Reference">
</MAP>

</BODY
>
<!-- Mirrored from liso.cs.pusan.ac.kr by HTTrack Website Copier/3.x [XR&CO'2001] -->
</HTML
>
