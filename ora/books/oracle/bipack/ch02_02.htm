<HTML
><HEAD
><TITLE
>[Chapter 2] 2.2 Getting Started with DBMS_SQL</TITLE
><META
NAME="DC.Creator"
CONTENT="Steven Feuerstein, Charles Dye &amp; John Beresniewicz"><META
NAME="DC.Date"
CONTENT="2000-04-29T17:44:25Z"><META
NAME="DC.Format"
CONTENT="text/html"
SCHEME="MIME"><META
NAME="DC.Identifier"
CONTENT="O'Reilly and Associates-1-56592-375-8E"><META
NAME="DC.Language"
CONTENT="en-US"><META
NAME="DC.Publisher"
CONTENT="O'Reilly &amp; Associates, Inc."><META
NAME="DC.Source"
CONTENT="1-56592-375-8E"
SCHEME="ISBN"><META
NAME="DC.Subject.Keyword"
CONTENT="Oracle Packages"><META
NAME="DC.Title"
CONTENT="Oracle Built-in Packages"><META
NAME="DC.Type"
CONTENT="Text.Monograph"><META
NAME="generator"
CONTENT="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><LINK
REL="stylesheet"
TYPE="text/css"
HREF="../style/style1.css"><LINK
REV="made"
HREF="mailto:online-books@oreilly.com"
TITLE="Online Books Comments"><LINK
REL="up"
HREF="ch02_01.htm"
TITLE="2. Executing Dynamic SQL and PL/SQL"><LINK
REL="prev"
HREF="ch02_01.htm"
TITLE="2.1 Examples of Dynamic SQL"><LINK
REL="next"
HREF="ch02_03.htm#ch02-SECT-3.4.1"
TITLE="2.3 The DBMS_SQL Interface"></HEAD
><BODY
><DIV
CLASS="htmlnav"
><H1
><IMG
SRC="gifs/smbanner.gif"
ALT="Oracle Built-in Packages"
USEMAP="#srchmap"
BORDER="0"></H1
><MAP
NAME="srchmap"
><AREA
SHAPE="RECT"
COORDS="0,0,466,65"
HREF="index.htm"
ALT="Oracle Built-in Packages"><AREA
SHAPE="RECT"
COORDS="467,0,514,18"
HREF="jobjects/fsearch.htm"
ALT="Search this book"></MAP
><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch02_01.htm"
TITLE="2.1 Examples of Dynamic SQL"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 2.1 Examples of Dynamic SQL"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><SPAN
CLASS="NAVTITLE"
><A
CLASS="chapter"
REL="up"
HREF="ch02_01.htm"
TITLE="2. Executing Dynamic SQL and PL/SQL"
>Chapter 2<BR>Executing Dynamic SQL and PL/SQL</A
></SPAN
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch02_03.htm#ch02-SECT-3.4.1"
TITLE="2.3 The DBMS_SQL Interface"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 2.3 The DBMS_SQL Interface"
BORDER="0"></A
></TD
></TR
></TABLE
>&nbsp;<HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"></DIV
><DIV
CLASS="sect1"
><H2
CLASS="sect1"
><A
CLASS="title"
NAME="ch02-31004"
>2.2 Getting Started with DBMS_SQL</A
></H2
><P
CLASS="para"
>Before you start using DBMS_SQL, you need to make sure that it is installed and that the appropriate users have access to this package. In addition, you should be aware of how privileges are applied to programs that execute dynamic SQL.</P
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch02-SECT-2.1"
>2.2.1 Creating the DBMS_SQL Package</A
></H3
><P
CLASS="para"
>The <A
CLASS="indexterm"
NAME="ch02-idx-19579-0"
></A
>DBMS_SQL package is created when the Oracle database is installed. The <I
CLASS="filename"
>dbmssql.sql</I
><A
CLASS="indexterm"
NAME="ch02-idx-19581-0"
></A
> script (found in the built-in packages source code directory, as described in <A
CLASS="xref"
HREF="ch01_01.htm"
>Chapter 1, <CITE
CLASS="chapter"
>Introduction</CITE
></A
>) contains the source code for this package's specification. This script is called by <I
CLASS="filename"
>catproc.sql</I
>,<I
CLASS="filename"
> </I
>which is normally run immediately after database creation. The script creates the public synonym DBMS_SQL for the package and grants EXECUTE privilege on the package to public. All Oracle users can reference and make use of this package. </P
><P
CLASS="para"
>Given the power, flexibility, and potential impact of dynamic SQL, you may actually want to revoke public access to <A
CLASS="indexterm"
NAME="ch02-idx-19583-0"
></A
><A
CLASS="indexterm"
NAME="ch02-idx-19583-1"
></A
>DBMS_SQL and instead grant EXECUTE privilege to only those users who need to perform dynamic SQL.</P
><P
CLASS="para"
>To "hide" DBMS_SQL, issue this command from the SYS account:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>REVOKE EXECUTE ON DBMS_SQL FROM PUBLIC;</PRE
></BLOCKQUOTE
><P
CLASS="para"
>To grant EXECUTE privilege to a specific user, issue this command from SYS:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>GRANT EXECUTE ON DBMS_SQL TO whatever_user;</PRE
></BLOCKQUOTE
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch02-SECT-2.2"
>2.2.2 Security and Privilege Issues</A
></H3
><P
CLASS="para"
>Generally, when you run stored code (and all DBMS_* built-in packages are certainly stored in the database!), that code executes under the authority and using the privileges associated with the owner of the code. If this rule were applied to DBMS_SQL, then anyone who had EXECUTE privilege on DBMS_SQL would be able to act as SYS. This is clearly not a viable approach. </P
><P
CLASS="para"
>When you execute a DBMS_SQL program from within an anonymous block, that program is executed using the privileges of the current schema. If you embed DBMS_SQL programs within a stored program, those dynamic SQL programs will execute using the privileges of the owner of the stored program. DBMS_SQL is, in other words, a "run as user" package, rather than a "run as owner" package. This can lead to a number of complications, discussed in more detail in the "Tips on Using Dynamic SQL" section later in this chapter.</P
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch02-SECT-2.3"
>2.2.3 DBMS_SQL Programs</A
></H3
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="ch02-idx-23810-0"
></A
><A
CLASS="indexterm"
NAME="ch02-idx-23810-1"
></A
>DBMS_SQL is one of the most complex built-in packages, with a large number of programs and data structures defined in the package specification. <A
CLASS="xref"
HREF="ch02_02.htm#ch02-SECT-2.3"
>Table 2.1</A
> summarizes the programs defined in the DBMS_SQL package.</P
><BR><TABLE
CLASS="table"
BORDER="1"
CELLPADDING="3"
><CAPTION
CLASS="table"
><A
CLASS="title"
NAME="ch02-16195"
>Table 2.1: DBMS_SQL Programs </A
></CAPTION
><THEAD
CLASS="thead"
><TR
CLASS="row"
VALIGN="TOP"
><TH
CLASS="entry"
ALIGN="LEFT"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>Name</P
></TH
><TH
CLASS="entry"
ALIGN="LEFT"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>Description</P
></TH
><TH
CLASS="entry"
ALIGN="LEFT"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>Use in SQL?</P
></TH
></TR
></THEAD
><TBODY
CLASS="tbody"
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="ch02-idx-23831-0"
></A
>BIND_ARRAY</P
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>Binds a specific value to a host array (PL/SQL8 only).</P
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
><B
CLASS="emphasis.bold"
>No</B
></P
></TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="ch02-idx-23838-0"
></A
>BIND_VARIABLE</P
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>Binds a specific value to a host variable.</P
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
><B
CLASS="emphasis.bold"
>No</B
></P
></TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="ch02-idx-23845-0"
></A
>CLOSE_CURSOR</P
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>Closes the cursor.</P
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
><B
CLASS="emphasis.bold"
>No</B
></P
></TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="ch02-idx-23852-0"
></A
>COLUMN_VALUE</P
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>Retrieves a value from the cursor into a local variable.</P
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
><B
CLASS="emphasis.bold"
>No</B
></P
></TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="ch02-idx-23859-0"
></A
>COLUMN_VALUE_LONG</P
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>Retrieves a selected part of a LONG value from a cursor's column defined with DEFINE_COLUMN_LONG.</P
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
><B
CLASS="emphasis.bold"
>No</B
></P
></TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="ch02-idx-23866-0"
></A
>DEFINE_ARRAY</P
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>Defines an array to be selected from the specified cursor (PL/SQL8 only).</P
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
><B
CLASS="emphasis.bold"
>No</B
></P
></TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="ch02-idx-23873-0"
></A
>DEFINE_COLUMN</P
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>Defines a column to be selected from the specified cursor.</P
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
><B
CLASS="emphasis.bold"
>No</B
></P
></TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="ch02-idx-23880-0"
></A
>DEFINE_COLUMN_LONG</P
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>Defines a LONG column to be selected from the specified cursor.</P
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
><B
CLASS="emphasis.bold"
>No</B
></P
></TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="ch02-idx-23887-0"
></A
>DESCRIBE_COLUMNS</P
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>Describes the columns for a dynamic cursor (PL/SQL8 only).</P
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
><B
CLASS="emphasis.bold"
>No</B
></P
></TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="ch02-idx-23894-0"
></A
>EXECUTE</P
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>Executes the cursor.</P
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
><B
CLASS="emphasis.bold"
>No</B
></P
></TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="ch02-idx-23902-0"
></A
>EXECUTE_AND_FETCH</P
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>Executes the cursor and fetches its row(s).</P
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
><B
CLASS="emphasis.bold"
>No</B
></P
></TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="ch02-idx-23909-0"
></A
>FETCH_ROWS</P
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>Fetches the row(s) from the cursor.</P
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
><B
CLASS="emphasis.bold"
>No</B
></P
></TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="ch02-idx-23916-0"
></A
>IS_OPEN</P
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>Returns TRUE if the cursor is open.</P
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
><B
CLASS="emphasis.bold"
>No</B
></P
></TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="ch02-idx-23923-0"
></A
>LAST_ERROR_POSITION</P
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>Returns the byte offset in the SQL statement where the error occurred.</P
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
><B
CLASS="emphasis.bold"
>No</B
></P
></TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="ch02-idx-23930-0"
></A
>LAST_ROW_COUNT</P
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>Returns the total number of rows fetched from the cursor.</P
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
><B
CLASS="emphasis.bold"
>No</B
></P
></TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="ch02-idx-23937-0"
></A
>LAST_ROW_ID</P
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>Returns the ROWID of the last row fetched from the cursor.</P
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
><B
CLASS="emphasis.bold"
>No</B
></P
></TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="ch02-idx-23944-0"
></A
>LAST_SQL_FUNCTION_CODE</P
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>Returns the SQL function code for the SQL statement.</P
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
><B
CLASS="emphasis.bold"
>No</B
></P
></TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="ch02-idx-23951-0"
></A
>OPEN_CURSOR</P
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>Opens the cursor.</P
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
><B
CLASS="emphasis.bold"
>No</B
></P
></TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="ch02-idx-23958-0"
></A
>PARSE</P
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>Parses the specified SQL statement. If the statement is a DDL statement, then the parse also executes the statement.</P
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
><B
CLASS="emphasis.bold"
>No</B
></P
></TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="ch02-idx-23965-0"
></A
>VARIABLE_VALUE</P
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>Gets a value of a variable in a cursor.</P
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
><B
CLASS="emphasis.bold"
>No</B
></P
></TD
></TR
></TBODY
></TABLE
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch02-SECT-2.4"
>2.2.4 Types of Dynamic SQL</A
></H3
><P
CLASS="para"
>There are four distinct types, or methods, of <A
CLASS="indexterm"
NAME="ch02-idx-19610-0"
></A
><A
CLASS="indexterm"
NAME="ch02-idx-19610-1"
></A
>dynamic SQL that you can execute with the programs of DBMS_SQL; these are listed in <A
CLASS="xref"
HREF="ch02_02.htm#ch02-SECT-2.3"
>Table 2.2</A
>. Familiarity with these methods and the kinds of code you need to write for each will help you use DBMS_SQL most effectively. </P
><BR><TABLE
CLASS="table"
BORDER="1"
CELLPADDING="3"
><CAPTION
CLASS="table"
><A
CLASS="title"
NAME="ch02-TABLE-0"
>Table 2.2:  Types of Dynamic SQL</A
></CAPTION
><THEAD
CLASS="thead"
><TR
CLASS="row"
VALIGN="TOP"
><TH
CLASS="entry"
ALIGN="LEFT"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>Type</P
></TH
><TH
CLASS="entry"
ALIGN="LEFT"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>Description</P
></TH
><TH
CLASS="entry"
ALIGN="LEFT"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>DBMS_SQL Programs Used</P
></TH
></TR
></THEAD
><TBODY
CLASS="tbody"
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>Method 1</P
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>No queries; just DDL statements and UPDATEs, INSERTs, or DELETEs, which have no bind variables.</P
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>EXECUTE</P
></TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>Method 2</P
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>No queries; just UPDATEs, INSERTs, or DELETEs, with a fixed number of bind variables.</P
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>EXECUTE</P
></TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>Method 3</P
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>Queries (SELECT statements) with a fixed numbers of columns and bind variables.</P
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>VARIABLE_VALUE</P
></TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>Method 4</P
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>Queries (SELECT statements) with a variable numbers of columns and bind variables. In other words, you don't know until runtime how many bind variables there may be.</P
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>Same as for Method 3, but the code you must write is much more complex.</P
></TD
></TR
></TBODY
></TABLE
><P
CLASS="para"
>The following DDL statement is an example of Method 1 dynamic SQL:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>CREATE INDEX emp_ind_1 on emp (sal, hiredate)</PRE
></BLOCKQUOTE
><P
CLASS="para"
>And this update statement is also Method 1 dynamic SQL:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>UPDATE emp SET sal = 10000 WHERE empno = 1506</PRE
></BLOCKQUOTE
><P
CLASS="para"
>Of course, that UPDATE statement also is not very dynamic. If I now add a placeholder to this DML statement (indicated by the colon) so that I do not "hard-code" the employee number, I then have Method 2 dynamic SQL:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>UPDATE emp SET sal = 10000 WHERE empno = :employee_id</PRE
></BLOCKQUOTE
><P
CLASS="para"
>A call to BIND_VARIABLE will be required for the previous statement to be executed successfully with DBMS_SQL.</P
><P
CLASS="para"
>A Method 3 dynamic SQL statement is a query with a fixed number of bind variables (or none). This will be the most common type of dynamic SQL you will execute. Here is an example:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>SELECT ename, :second_column FROM emp WHERE deptno = :dept_id</PRE
></BLOCKQUOTE
><P
CLASS="para"
>In this case, I am leaving until runtime the decision about which column I will retrieve with my query. Now, this statement looks like Method 3 dynamic SQL, but this dynamic stuff can get very tricky. What if I substituted the string "hiredate, sal" for the placeholder "second_column"? I could then have a variable number of columns in the select list, and this would be Method 4 dynamic SQL.</P
><P
CLASS="para"
>How can you tell the difference? Well, you really <EM
CLASS="emphasis"
>can't</EM
> just by looking at the string. The code, however, will tell. If you do not <EM
CLASS="emphasis"
>plan</EM
> for Method 4 (variable number of columns in the select list, in this case), then your PL/SQL program will fail. It will not issue the right number of calls to DEFINE_COLUMN. </P
><P
CLASS="para"
>Usually, when you are dealing with Method 4 dynamic SQL, you will have strings that look more like this:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>SELECT :select_list FROM emp WHERE :where_clause</PRE
></BLOCKQUOTE
><P
CLASS="para"
>Now there can be no doubt: there is no way to know how many columns you are retrieving. So how do you write your PL/SQL program to handle this complexity? Slowly and carefully, with lots of debugging. You will need to write logic to parse strings, locate placeholders, and then call the appropriate DBMS_SQL program. </P
><P
CLASS="para"
>Very few developers will have to deal with Method 4 dynamic SQL. You can find an example of the kind of code you will have to write in the later section, "Displaying Table Contents with Method 4 Dynamic SQL."</P
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch02-SECT-2.5"
>2.2.5 DBMS_SQL Exceptions</A
></H3
><P
CLASS="para"
>The DBMS_SQL defines a single <A
CLASS="indexterm"
NAME="ch02-idx-19611-0"
></A
>exception in its specification as follows:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>DBMS_SQL.<A
CLASS="indexterm"
NAME="ch02-idx-19612-0"
></A
>INCONSISTENT_TYPE EXCEPTION;
PRAGMA EXCEPTION_INIT(DBMS_SQL.INCONSISTENT_TYPE, -6562);</PRE
></BLOCKQUOTE
><P
CLASS="para"
>This exception can be raised by either the COLUMN_VALUE or the VARIABLE_VALUE procedure if the type of the specified OUT argument is different from the type of the value which is being returned. You can trap this exception and handle it with the following syntax in your exception section:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>EXCEPTION
   WHEN DBMS_SQL.INCONSISTENT_TYPE
   THEN
       . . .</PRE
></BLOCKQUOTE
><P
CLASS="para"
>You may encounter other exceptions when working with dynamic SQL (in fact, there will be times when you believe that all you can do with DBMS_SQL is raise exceptions). The table on the following page displays some of the most common errors.</P
><TABLE
CLASS="informaltable"
BORDER="1"
CELLPADDING="3"
><THEAD
CLASS="thead"
><TR
CLASS="row"
VALIGN="TOP"
><TH
CLASS="entry"
ALIGN="LEFT"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>Error Number</P
></TH
><TH
CLASS="entry"
ALIGN="LEFT"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>Description</P
></TH
></TR
></THEAD
><TBODY
CLASS="tbody"
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>ORA-00942</P
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>Table or view does not exist. You have referenced an object that does not exist in your schema. Remember that when you execute SQL from within a programmatic interface, that SQL is executed under the schema of the owner of the program, not that of the account running the PL/SQL program.</P
></TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>ORA-01001</P
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>Invalid cursor. You have tried to use a value which has not been initialized as a DBMS_SQL cursor through a call to OPEN_CURSOR. </P
></TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>ORA-01002</P
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>Fetch out of sequence. If you execute FETCH_CURSOR more than once after the cursor's result set is exhausted, you will raise this exception.</P
></TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>ORA-01008</P
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>Not all variables bound. You have included a placeholder in your SQL statement string in the form :BINDVAR, but you did not call BIND_VARIABLE to bind a value to that placeholder.</P
></TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>ORA-01027</P
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>Bind variables not allowed for data definition operations. You cannot include a bind variable (an identifier with a colon in front of it) in a DDL statement executed dynamically. </P
></TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>ORA-01031</P
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>Insufficient privileges. You have tried to execute a SQL statement for which you do not have the appropriate privileges. Remember that when you execute a SQL statement inside a PL/SQL program, all roles are disabled. You will need to have <EM
CLASS="emphasis"
>directly granted</EM
> privileges on your objects to affect them from within PL/SQL and the DBMS_SQL package.</P
></TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>ORA-29255</P
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>This occurs with array processing in PL/SQL8. The cursor may not contain both bind and define arrays. For more information, see the section "Array Processing with DBMS_SQL."</P
></TD
></TR
></TBODY
></TABLE
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch02-SECT-2.6"
>2.2.6 DBMS_SQL Nonprogram Elements</A
></H3
><P
CLASS="para"
>DBMS_SQL defines three constants that you use in calls to the <A
CLASS="indexterm"
NAME="ch02-idx-19617-0"
></A
><A
CLASS="indexterm"
NAME="ch02-idx-19617-1"
></A
><A
CLASS="indexterm"
NAME="ch02-idx-19617-2"
></A
><A
CLASS="indexterm"
NAME="ch02-idx-19617-3"
></A
>PARSE procedure to specify how Oracle handles the SQL statement:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>DBMS_SQL.NATIVE CONSTANT INTEGER := 1;
DBMS_SQL.V6 CONSTANT INTEGER := 0;
DBMS_SQL.V7 CONSTANT INTEGER := 2;</PRE
></BLOCKQUOTE
><P
CLASS="para"
>The PL/SQL8 version of the DBMS_SQL package also predefines a number of data structures for use in array processing and column describes. </P
><P
CLASS="para"
>When you want to parse very <A
CLASS="indexterm"
NAME="ch02-idx-19619-0"
></A
><A
CLASS="indexterm"
NAME="ch02-idx-19619-1"
></A
><A
CLASS="indexterm"
NAME="ch02-idx-19619-2"
></A
>long SQL statements (in excess of 32Kbytes), you'll need to declare a table based on the DBMS_SQL.VARCHAR2S index-by table TYPE defined as follows:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>SUBTYPE VARCHAR2S IS SYS.DBMS_SYS_SQL.VARCHAR2S;</PRE
></BLOCKQUOTE
><P
CLASS="para"
>A little investigation reveals that this table is, in turn, defined as:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>TYPE VARCHAR2S IS TABLE OF VARCHAR2(256) 
   INDEX BY BINARY_INTEGER;</PRE
></BLOCKQUOTE
><P
CLASS="para"
>When you use the <A
CLASS="indexterm"
NAME="ch02-idx-19620-0"
></A
>DESCRIBE_COLUMNS procedure, you'll need to declare records based on the DBMS_SQL.DESC_REC record TYPE and index-by tables based on the DBMS_SQL.DESC_TAB table TYPE. These are defined as: </P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>TYPE DESC_REC IS RECORD (
   col_type BINARY_INTEGER := 0, /* type of column */
   col_max_len BINARY_INTEGER := 0, /* maximum length of column */
   col_name VARCHAR2(32) := 0, /* name of column */
   col_name_len BINARY_INTEGER := 0, /* length of column name */
   col_schema_name BINARY_INTEGER := 0, 
      /* name of column type schema if an object type */
   col_schema_name_len VARCHAR2(32) := 0, /* length of schema name */
   col_precision BINARY_INTEGER := 0, /* precision if number */
   col_scale BINARY_INTEGER := 0, /* scale if number */
   col_charsetid BINARY_INTEGER := 0, /* character set identifier */
   col_charsetform BINARY_INTEGER := 0, /* character set form */
   col_null_ok BOOLEAN := TRUE /* TRUE if column can be NULL */
   );

TYPE DESC_TAB IS TABLE OF DESC_REC INDEX BY BINARY_INTEGER;</PRE
></BLOCKQUOTE
><P
CLASS="para"
>When you perform array processing with the<A
CLASS="indexterm"
NAME="ch02-idx-19622-0"
></A
> BIND_ARRAY and <A
CLASS="indexterm"
NAME="ch02-idx-19749-0"
></A
>DEFINE_ARRAY procedures, you will rely on the following predefined <A
CLASS="indexterm"
NAME="ch02-idx-19750-0"
></A
><A
CLASS="indexterm"
NAME="ch02-idx-19750-1"
></A
>index-by tables to set up and manipulate those arrays:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>TYPE NUMBER_TABLE IS TABLE OF NUMBER INDEX BY BINARY_INTEGER;
TYPE VARCHAR2_TABLE IS TABLE OF VARCHAR2(2000) INDEX BY BINARY_INTEGER;
TYPE DATE_TABLE IS TABLE OF DATE INDEX BY BINARY_INTEGER;
TYPE BLOB_TABLE IS TABLE OF BLOB INDEX BY BINARY_INTEGER;
TYPE CLOB_TABLE IS TABLE OF CLOB INDEX BY BINARY_INTEGER;
TYPE BFILE_TABLE IS TABLE OF BFILE INDEX BY BINARY_INTEGER;</PRE
></BLOCKQUOTE
><P
CLASS="para"
>Remember that these index-by tables are also available for your use even when  you are not using, for example, the DEFINE_ARRAY procedure. You can still declare your own CLOB index-by tables based on DBMS_SQL.CLOB_TABLE any time you want and under whichever circumstances. This will save you the trouble of defining the table TYPE.</P
><BLOCKQUOTE
CLASS="note"
><P
CLASS="para"
><STRONG
>NOTE:</STRONG
> BLOB, CLOB, NCLOB, and BFILE are various large object (LOB) datatypes available with PL/SQL8. See the discussion of the DBMS_LOB package in <A
CLASS="xref"
HREF="ch08_01.htm"
>Chapter 8, <CITE
CLASS="chapter"
>Managing Large Objects </CITE
></A
>, for more information on manipulating LOBs from within PL/SQL.</P
></BLOCKQUOTE
></DIV
></DIV
><DIV
CLASS="htmlnav"
><P
></P
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch02_01.htm"
TITLE="2.1 Examples of Dynamic SQL"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 2.1 Examples of Dynamic SQL"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="book"
HREF="index.htm"
TITLE="Oracle Built-in Packages"
><IMG
SRC="../gifs/txthome.gif"
ALT="Oracle Built-in Packages"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch02_03.htm#ch02-SECT-3.4.1"
TITLE="2.3 The DBMS_SQL Interface"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 2.3 The DBMS_SQL Interface"
BORDER="0"></A
></TD
></TR
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
>2.1 Examples of Dynamic SQL</TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="index"
HREF="index/idx_0.htm"
TITLE="Book Index"
><IMG
SRC="../gifs/index.gif"
ALT="Book Index"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
>2.3 The DBMS_SQL Interface</TD
></TR
></TABLE
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"></DIV
><IMG SRC="../gifs/smnavbar.gif"
USEMAP="#map"
BORDER="0"
ALT="The Oracle Library Navigation">

<P><font size="-1">
<a href="../copyrght.htm#copy">Copyright (c) 2000</a> O'Reilly &amp; Associates. All rights reserved.
</font></P>

<MAP NAME="map">

<AREA SHAPE="RECT"
COORDS="0,0,35,30"
HREF="../index.htm"
ALT="Library Home">

<AREA SHAPE="RECT"
COORDS="40,0,95,30"
HREF="../prog2/index.htm"
ALT="Oracle PL/SQL Programming, 2nd. Ed.">

<AREA SHAPE="RECT"
COORDS="100,0,200,30"
HREF="../guide8i/index.htm"
ALT="Guide to Oracle 8i Features">

<AREA SHAPE="RECT"
COORDS="205,0,245,30"
HREF="index.htm"
ALT="Oracle Built-in Packages">

<AREA SHAPE="RECT"
COORDS="250,0,320,30"
HREF="../advprog/index.htm"
ALT="Advanced PL/SQL Programming with Packages">

<AREA SHAPE="RECT"
COORDS="325,0,420,30"
HREF="../webapp/index.htm"
ALT="Oracle Web Applications">

<AREA SHAPE="RECT"
COORDS="425,0,490,30"
HREF="../langpkt/index.htm"
ALT="Oracle PL/SQL Language Pocket Reference">

<AREA SHAPE="RECT"
COORDS="495,0,570,30"
HREF="../bipkt/index.htm"
ALT="Oracle PL/SQL Built-ins Pocket Reference">
</MAP>

</BODY
>
<!-- Mirrored from liso.cs.pusan.ac.kr by HTTrack Website Copier/3.x [XR&CO'2001] -->
</HTML
>
