<HTML
><HEAD
><TITLE
>[Chapter 11] 11.2 DBMS_System: Setting Events for Debugging</TITLE
><META
NAME="DC.Creator"
CONTENT="Steven Feuerstein, Charles Dye &amp; John Beresniewicz"><META
NAME="DC.Date"
CONTENT="2000-04-29T17:58:29Z"><META
NAME="DC.Format"
CONTENT="text/html"
SCHEME="MIME"><META
NAME="DC.Identifier"
CONTENT="O'Reilly and Associates-1-56592-375-8E"><META
NAME="DC.Language"
CONTENT="en-US"><META
NAME="DC.Publisher"
CONTENT="O'Reilly &amp; Associates, Inc."><META
NAME="DC.Source"
CONTENT="1-56592-375-8E"
SCHEME="ISBN"><META
NAME="DC.Subject.Keyword"
CONTENT="Oracle Packages"><META
NAME="DC.Title"
CONTENT="Oracle Built-in Packages"><META
NAME="DC.Type"
CONTENT="Text.Monograph"><META
NAME="generator"
CONTENT="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><LINK
REL="stylesheet"
TYPE="text/css"
HREF="../style/style1.css"><LINK
REV="made"
HREF="mailto:online-books@oreilly.com"
TITLE="Online Books Comments"><LINK
REL="up"
HREF="ch11_01.htm"
TITLE="11. Managing Session Information"><LINK
REL="prev"
HREF="ch11_01.htm"
TITLE="11.1 DBMS_SESSION: Managing Session Information"><LINK
REL="next"
HREF="ch12_01.htm"
TITLE="12. Managing Server Resources"></HEAD
><BODY
><DIV
CLASS="htmlnav"
><H1
><IMG
SRC="gifs/smbanner.gif"
ALT="Oracle Built-in Packages"
USEMAP="#srchmap"
BORDER="0"></H1
><MAP
NAME="srchmap"
><AREA
SHAPE="RECT"
COORDS="0,0,466,65"
HREF="index.htm"
ALT="Oracle Built-in Packages"><AREA
SHAPE="RECT"
COORDS="467,0,514,18"
HREF="jobjects/fsearch.htm"
ALT="Search this book"></MAP
><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch11_01.htm"
TITLE="11.1 DBMS_SESSION: Managing Session Information"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 11.1 DBMS_SESSION: Managing Session Information"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><SPAN
CLASS="NAVTITLE"
><A
CLASS="chapter"
REL="up"
HREF="ch11_01.htm"
TITLE="11. Managing Session Information"
>Chapter 11<BR>Managing Session Information</A
></SPAN
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="chapter"
HREF="ch12_01.htm"
TITLE="12. Managing Server Resources"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 12. Managing Server Resources"
BORDER="0"></A
></TD
></TR
></TABLE
>&nbsp;<HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"></DIV
><DIV
CLASS="sect1"
><H2
CLASS="sect1"
><A
CLASS="title"
NAME="ch11-22820"
>11.2 DBMS_System: Setting Events for Debugging</A
></H2
><P
CLASS="para"
>The <A
CLASS="indexterm"
NAME="ch11-idx-15916-0"
></A
><A
CLASS="indexterm"
NAME="ch11-idx-15916-1"
></A
>DBMS_SYSTEM package contains procedures for setting special internal trace events that can help the DBA or Oracle Technical Support personnel diagnose and debug serious database problems.</P
><P
CLASS="para"
>The procedures in DBMS_SYSTEM are used by DBAs under special circumstances and should not be used by end users or coded into applications. Most of the procedures should be used only under specific instructions from Oracle Technical Support, as improper usage can actually crash or damage the database. The extremely useful SET_SQL_TRACE_IN_SESSION procedure, however, has less serious implications. Both DBAs and developers should be aware of and know how to use it.</P
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch11-SECT-2.1"
>11.2.1 Getting Started with DBMS_SYSTEM </A
></H3
><P
CLASS="para"
>The DBMS_SYSTEM package is <A
CLASS="indexterm"
NAME="ch11-idx-16465-0"
></A
>created when the Oracle database is installed. The <I
CLASS="filename"
>dbmsutil.sql</I
> script (found in the built-in packages source code directory, as described in <A
CLASS="xref"
HREF="ch01_01.htm"
>Chapter 1</A
>) contains the source code for this package's specification. This script is called by <I
CLASS="filename"
>catproc.sql</I
>, which is normally run immediately after database creation. </P
><P
CLASS="para"
>Unlike the other packages created by the <I
CLASS="filename"
>dbmsutil.sql</I
> script, no public synonym for <A
CLASS="indexterm"
NAME="ch11-idx-17155-0"
></A
>DBMS_SYSTEM is created, and no privileges on the package are granted. Thus, only the SYS user can normally reference and make use of this package. Other users (or roles) can be granted access to DBMS_SYSTEM by having the SYS user issue the following SQL command:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>GRANT EXECUTE ON DBMS_SYSTEM TO username;</PRE
></BLOCKQUOTE
><P
CLASS="para"
>In practice, it is probably better and safer to create a cover package around DBMS_SYSTEM and grant EXECUTE privilege on the cover package to specific users or roles, as indiscriminate use of the DBMS_SYSTEM procedures can cause serious problems.</P
><BLOCKQUOTE
CLASS="note"
><P
CLASS="para"
><STRONG
>NOTE:</STRONG
> In Oracle 8.0, the DBMS_SYSTEM package specification was moved from the <I
CLASS="filename"
>dbmsutil.sql</I
><A
CLASS="indexterm"
NAME="ch11-idx-17106-0"
></A
>  script into<A
CLASS="indexterm"
NAME="ch11-idx-17107-0"
></A
> <I
CLASS="filename"
>prvtutil.plb</I
> (the "wrapped" file), protecting it further from inadvertent access.</P
></BLOCKQUOTE
><P
CLASS="para"
><A
CLASS="xref"
HREF="ch11_02.htm#ch11-SECT-2.2.1"
>Table 11.2</A
> <A
CLASS="indexterm"
NAME="ch11-idx-15924-0"
></A
><A
CLASS="indexterm"
NAME="ch11-idx-15924-1"
></A
>lists the programs provided by this package.</P
><BR><TABLE
CLASS="table"
BORDER="1"
CELLPADDING="3"
><CAPTION
CLASS="table"
><A
CLASS="title"
NAME="ch11-24421"
>Table 11.2: DBMS_SYSTEM Programs</A
></CAPTION
><THEAD
CLASS="thead"
><TR
CLASS="row"
VALIGN="TOP"
><TH
CLASS="entry"
ALIGN="LEFT"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>Name</P
></TH
><TH
CLASS="entry"
ALIGN="LEFT"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>Description</P
></TH
><TH
CLASS="entry"
ALIGN="LEFT"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>Use in</P
><P
CLASS="para"
>SQL?</P
></TH
></TR
></THEAD
><TBODY
CLASS="tbody"
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>READ_EV</P
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>Reads trace event level for current session</P
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>No</P
></TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="ch11-idx-15926-0"
></A
>SET_EV</P
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>Sets trace event levels in user session</P
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>No</P
></TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="ch11-idx-15927-0"
></A
>SET_SQL_TRACE_IN_SESSION</P
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>Sets SQL tracing on or off in user session</P
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>No</P
></TD
></TR
></TBODY
></TABLE
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="ch11-idx-17156-0"
></A
>DBMS_SYSTEM does not declare any exceptions or any non-program elements.</P
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch11-SECT-2.2"
>11.2.2 DBMS_SYSTEM Interface</A
></H3
><P
CLASS="para"
>This section describes the programs defined in the DBMS_SYSTEM package.</P
><DIV
CLASS="sect3"
><H4
CLASS="sect3"
><A
CLASS="title"
NAME="ch11-SECT-2.2.1"
>11.2.2.1 The DBMS_SYSTEM.READ_EV procedure</A
></H4
><P
CLASS="para"
>The <A
CLASS="indexterm"
NAME="ch11-idx-15928-0"
></A
><A
CLASS="indexterm"
NAME="ch11-idx-15928-1"
></A
><A
CLASS="indexterm"
NAME="ch11-idx-15928-2"
></A
><A
CLASS="indexterm"
NAME="ch11-idx-15928-3"
></A
>READ_EV procedure is used to read trace event level settings for the current session. Here's the header for this program:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>PROCEDURE DBMS_SYSTEM.READ_EV
    (iev BINARY_INTEGER
    ,oev OUT BINARY_INTEGER);</PRE
></BLOCKQUOTE
><P
CLASS="para"
>Parameters are summarized in the following table.</P
><TABLE
CLASS="informaltable"
BORDER="1"
CELLPADDING="3"
><THEAD
CLASS="thead"
><TR
CLASS="row"
VALIGN="TOP"
><TH
CLASS="entry"
ALIGN="LEFT"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>Parameter</P
></TH
><TH
CLASS="entry"
ALIGN="LEFT"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>Value</P
></TH
></TR
></THEAD
><TBODY
CLASS="tbody"
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
> iev </TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
> Event number </TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
> oev </TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
> Event level </TD
></TR
></TBODY
></TABLE
><P
CLASS="para"
>The program does not raise any exceptions.</P
><DIV
CLASS="sect4"
><H4
CLASS="sect4"
><A
CLASS="title"
NAME="AUTOID-24367"
>11.2.2.1.1 Restrictions</A
></H4
><P
CLASS="para"
>Note the following restrictions on calling READ_EV:</P
><UL
CLASS="itemizedlist"
><LI
CLASS="listitem"
><P
CLASS="para"
>The READ_EV procedure should not be invoked by end users or called by PL/SQL programs. Its usage is limited to Oracle internal purposes or under instruction of Oracle Technical Support. Improper use of the procedure by end users can have adverse effects on database performance. </P
></LI
><LI
CLASS="listitem"
><P
CLASS="para"
>The program does not assert a purity level with the RESTRICT_REFERENCES pragma.</P
></LI
></UL
></DIV
><DIV
CLASS="sect4"
><H4
CLASS="sect4"
><A
CLASS="title"
NAME="AUTOID-24375"
>11.2.2.1.2 Example</A
></H4
><P
CLASS="para"
>The following example[<A
CLASS="footnote"
HREF="#ch11-pgfId-17040"
>1</A
>] will display event-level settings for the current <A
CLASS="indexterm"
NAME="ch11-idx-17042-0"
></A
><A
CLASS="indexterm"
NAME="ch11-idx-17042-1"
></A
>session:</P
><BLOCKQUOTE
CLASS="footnote"
><DIV
CLASS="footnote"
><P
CLASS="para"
><A
CLASS="footnote"
NAME="ch11-pgfId-17040"
>[1]</A
> Supplied by Ken Robinson of Oracle Technical Support. </P
></DIV
></BLOCKQUOTE
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>/* Filename on companion disk: <A
CLASS="indexterm"
NAME="ch11-idx-17149-0"
></A
>readev.sql */*
DECLARE
	event_level number;
BEGIN
	FOR i IN 10000..10999 LOOP
		DBMS_SYSTEM.READ_EV(i,event_level);
		IF (event_level &gt; 0) 
		THEN
			DBMS_OUTPUT.PUT_LINE('Event '||TO_CHAR(i)||' set at level '||
				TO_CHAR(event_level) );
		END IF;
	END LOOP;
END;
/</PRE
></BLOCKQUOTE
></DIV
></DIV
><DIV
CLASS="sect3"
><H4
CLASS="sect3"
><A
CLASS="title"
NAME="ch11-SECT-2.2.2"
>11.2.2.2 The DBMS_SYSTEM.SET_EV procedure</A
></H4
><P
CLASS="para"
>The <A
CLASS="indexterm"
NAME="ch11-idx-15932-0"
></A
><A
CLASS="indexterm"
NAME="ch11-idx-15932-1"
></A
>SET_EV procedure is used to set trace event levels in another user session. It is equivalent to having that session issue the ALTER SESSION SET EVENTS event syntax command. Since the other session may be engaged in an application, setting an event may not be possible. Here's the header for this program:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>PROCEDURE DBMS_SYSTEM.SET_EV
   (si BINARY_INTEGER
   ,se BINARY_INTEGER
   ,ev BINARY_INTEGER
   ,le BINARY_INTEGER
   ,nm IN VARCHAR2);</PRE
></BLOCKQUOTE
><P
CLASS="para"
>Parameters are summarized in the following table.</P
><TABLE
CLASS="informaltable"
BORDER="1"
CELLPADDING="3"
><THEAD
CLASS="thead"
><TR
CLASS="row"
VALIGN="TOP"
><TH
CLASS="entry"
ALIGN="LEFT"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>Parameter</P
></TH
><TH
CLASS="entry"
ALIGN="LEFT"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>Description</P
></TH
></TR
></THEAD
><TBODY
CLASS="tbody"
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>si</P
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>User session id </P
></TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>se</P
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>User session serial number</P
></TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>ev</P
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>Trace event number</P
></TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>le</P
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>Trace event level</P
></TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>nm</P
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>Trace event name</P
></TD
></TR
></TBODY
></TABLE
><P
CLASS="para"
>The program does not raise any exceptions.</P
><DIV
CLASS="sect4"
><H4
CLASS="sect4"
><A
CLASS="title"
NAME="AUTOID-24433"
>11.2.2.2.1 Restrictions</A
></H4
><P
CLASS="para"
>Note the following restrictions on calling SET_EV:</P
><UL
CLASS="itemizedlist"
><LI
CLASS="listitem"
><P
CLASS="para"
>The SET_EV procedure should not be invoked by end users or called by PL/SQL programs. Its usage is limited to Oracle internal purposes or under instruction of Oracle Technical Support. Improper use of the procedure by end users can have adverse effects on database performance or cause database crashes. </P
></LI
><LI
CLASS="listitem"
><P
CLASS="para"
>The program does not assert a purity level with the RESTRICT_REFERENCES pragma.</P
></LI
></UL
><P
CLASS="para"
>To learn more about Oracle trace events and their usage in diagnosing and debugging serious database problems, see the <EM
CLASS="emphasis"
>Oracle Backup &amp; Recovery Handbook</EM
>, by Rama Velpuri (Oracle Press, <A
CLASS="indexterm"
NAME="ch11-idx-15934-0"
></A
><A
CLASS="indexterm"
NAME="ch11-idx-15934-1"
></A
>1995).</P
></DIV
></DIV
><DIV
CLASS="sect3"
><H4
CLASS="sect3"
><A
CLASS="title"
NAME="ch11-SECT-2.2.3"
>11.2.2.3 The DBMS_SYSTEM.SET_SQL_TRACE_IN_SESSION procedure</A
></H4
><P
CLASS="para"
>The <A
CLASS="indexterm"
NAME="ch11-idx-15936-0"
></A
><A
CLASS="indexterm"
NAME="ch11-idx-15936-1"
></A
><A
CLASS="indexterm"
NAME="ch11-idx-15936-2"
></A
>SET_SQL_TRACE_IN_SESSION procedure enables or disables SQL tracing in another user's session. It is especially useful for analyzing and debugging runtime performance issues in applications. Here's the header for this program:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>PROCEDURE DBMS_SYSTEM.SET_SQL_TRACE_IN_SESSION
   (sid IN NUMBER
   ,serial# IN NUMBER
   ,sql_trace IN BOOLEAN);</PRE
></BLOCKQUOTE
><P
CLASS="para"
>Parameters are summarized in the following table.</P
><TABLE
CLASS="informaltable"
BORDER="1"
CELLPADDING="3"
><THEAD
CLASS="thead"
><TR
CLASS="row"
VALIGN="TOP"
><TH
CLASS="entry"
ALIGN="LEFT"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>Parameter</P
></TH
><TH
CLASS="entry"
ALIGN="LEFT"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>Value</P
></TH
></TR
></THEAD
><TBODY
CLASS="tbody"
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>sid</P
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>Session id</P
></TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>serial#</P
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>Session serial number</P
></TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>sql_trace</P
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>TRUE turns trace on, FALSE turns trace off</P
></TD
></TR
></TBODY
></TABLE
><P
CLASS="para"
>The program does not raise any exceptions, nor does it assert a purity level with the RESTRICT_REFERENCES pragma.</P
><DIV
CLASS="sect4"
><H4
CLASS="sect4"
><A
CLASS="title"
NAME="AUTOID-24486"
>11.2.2.3.1 Example</A
></H4
><P
CLASS="para"
>Set SQL tracing on in a session identified by sid = 15 and serial number = 4567 like this:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>BEGIN
   SYS.DBMS_SYSTEM.SET_SQL_TRACE_IN_SESSION(15,4567,TRUE);
END;</PRE
></BLOCKQUOTE
><P
CLASS="para"
>The sid, serial number, and username for all sessions currently connected to the database can be obtained using the following query:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>SELECT sid, serial#, username
  FROM v$session;</PRE
></BLOCKQUOTE
><P
CLASS="para"
>Trace files generated when SQL tracing is turned on are created in the directory specified by the USER_DUMP_DEST initialization parameter for the Oracle database to which the session is connected. SQL trace files can be formatted for readability using the TKPROF utility. See the <EM
CLASS="emphasis"
>Oracle7 Server Tuning</EM
> manual for instructions on using <A
CLASS="indexterm"
NAME="ch11-idx-15938-0"
></A
><A
CLASS="indexterm"
NAME="ch11-idx-15938-1"
></A
><A
CLASS="indexterm"
NAME="ch11-idx-15938-2"
></A
>TKPROF.</P
></DIV
></DIV
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch11-SECT-2.3"
>11.2.3 DBMS_SYSTEM Examples</A
></H3
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="ch11-idx-15941-0"
></A
><A
CLASS="indexterm"
NAME="ch11-idx-15941-1"
></A
>DBMS_SYSTEM has some mysterious and apparently dangerous procedures in it. Obtaining any information about SET_EV and READ_EV was very difficult and promises to be more difficult in the future since the package header is no longer exposed in Oracle 8.0.</P
><P
CLASS="para"
>In spite of Oracle's desire to keep DBMS_SYSTEM "under wraps," I feel strongly that the SET_SQL_TRACE_IN_SESSION procedure is far too valuable to be hidden away in obscurity. DBAs and developers need to find out exactly what is happening at runtime when a user is experiencing unusual performance problems, and the SQL trace facility is one of the best tools available for discovering what the database is doing during a user's session. This is especially useful when investigating problems with software packages where source code (including SQL) is generally unavailable.</P
><P
CLASS="para"
>So how can we get access to the one program in DBMS_SYSTEM we want without exposing those other dangerous elements to the public? The answer, of course, is to build a package of our own to encapsulate DBMS_SYSTEM and expose only what is safe. In the process, we can make DBMS_SYSTEM easier to use as well. Those of us who are "keyboard-challenged" (or just plain lazy) would certainly appreciate not having to type a procedure name with 36 characters.</P
><P
CLASS="para"
>I've created a package called <A
CLASS="indexterm"
NAME="ch11-idx-15957-0"
></A
><A
CLASS="indexterm"
NAME="ch11-idx-15957-1"
></A
>trace to cover DBMS_SYSTEM and provide friendlier ways to set SQL tracing on or off in other user's sessions. Here is the package specification:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>*/ Filename on companion disk: <A
CLASS="indexterm"
NAME="ch11-idx-15958-0"
></A
>trace.sql */*
CREATE OR REPLACE PACKAGE trace
IS
   /*
   || Exposes DBMS_SYSTEM.SET_SQL_TRACE_IN_SESSION
   || with easier to call programs
   ||
   || Author:  John Beresniewicz, Savant Corp
   || Created: 07/30/97
   ||
   || Compilation Requirements:
   || SELECT on SYS.V_$SESSION
   || EXECUTE on SYS.DBMS_SYSTEM (or create as SYS)
   || 
   || Execution Requirements:
   || 
   */
   
   /* turn SQL trace on by session id */
   PROCEDURE Xon(sid_IN IN NUMBER);

   /* turn SQL trace off by session id */
   PROCEDURE off(sid_IN IN NUMBER);

   /* turn SQL trace on by username */
   PROCEDURE Xon(user_IN IN VARCHAR2);

   /* turn SQL trace off by username */
   PROCEDURE off(user_IN IN VARCHAR2);

END trace;</PRE
></BLOCKQUOTE
><P
CLASS="para"
>The trace package provides ways to turn SQL tracing on or off by session id or username. One thing that annoys me about DBMS_SYSTEM.SET_SQL_TRACE_IN_SESSION is having to figure out and pass a session serial number into the procedure. There should always be only one session per sid at any time connected to the database, so trace takes care of figuring out the appropriate serial number behind the scenes.</P
><P
CLASS="para"
>Another improvement (in my mind) is replacing the potentially confusing BOOLEAN parameter sql_trace with two distinct procedures whose names indicate what is being done. Compare the following commands, either of which might be used to turn SQL tracing off in session 15 using SQL*Plus:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>SQL&gt; execute trace.off(sid_IN=&gt;15);

SQL&gt; execute SYS.DBMS_SYSTEM.SET_SQL_TRACE_IN_SESSION(15,4567,FALSE);</PRE
></BLOCKQUOTE
><P
CLASS="para"
>The first method is both more terse and easier to understand.</P
><P
CLASS="para"
>The <A
CLASS="indexterm"
NAME="ch11-idx-15959-0"
></A
>xon and <A
CLASS="indexterm"
NAME="ch11-idx-15961-0"
></A
>off procedures are both overloaded on the single IN parameter, with versions accepting either the numeric session id or a character string for the session username. Allowing session selection by username may be easier than by sids. Why? Because sids are transient and must be looked up at runtime, whereas username is usually permanently associated with an individual. Beware, though, that multiple sessions may be concurrently connected under the same username, and invoking trace.xon by username will turn tracing on in all of them.</P
><P
CLASS="para"
>Let's take a look at the trace package body: </P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>/* Filename on companion disk: <A
CLASS="indexterm"
NAME="ch11-idx-15963-0"
></A
>trace.sql */*
CREATE OR REPLACE PACKAGE BODY trace 
IS

   /*
   || Use DBMS_SYSTEM.SET_SQL_TRACE_IN_SESSION to turn tracing on 
   || or off by either session id or username.  Affects all sessions
   || that match non-NULL values of the user and sid parameters.
   */
   PROCEDURE <A
CLASS="indexterm"
NAME="ch11-idx-15964-0"
></A
>set_trace
      (sqltrace_TF BOOLEAN
      ,user IN VARCHAR2 DEFAULT NULL
      ,sid IN NUMBER DEFAULT NULL)
   IS
   BEGIN
      /*
      || Loop through all sessions that match the sid and user
      || parameters and set trace on in those sessions.  The NVL 
      || function in the cursor WHERE clause allows the single
      || SELECT statement to filter by either sid OR user.
      */
      FOR sid_rec IN 
         (SELECT sid,serial# 
            FROM sys.v_$session   S
           WHERE S.type='USER'
             AND S.username = NVL(UPPER(user),S.username)
             AND S.sid      = NVL(sid,S.sid) )
      LOOP
         SYS.DBMS_SYSTEM.SET_SQL_TRACE_IN_SESSION
            (sid_rec.sid, sid_rec.serial#, sqltrace_TF);
      END LOOP;
   END set_trace;

   /*
   || The programs exposed by the package all simply
   || call set_trace with different parameter combinations.
   */
   PROCEDURE Xon(sid_IN IN NUMBER)
   IS
   BEGIN
      set_trace(sqltrace_TF =&gt; TRUE, sid =&gt; sid_IN);
   END Xon;

   PROCEDURE off(sid_IN IN NUMBER)
   IS
   BEGIN
      set_trace(sqltrace_TF =&gt; FALSE, sid =&gt; sid_IN);
   END off;

   PROCEDURE <A
CLASS="indexterm"
NAME="ch11-idx-15960-0"
></A
>Xon(user_IN IN VARCHAR2)
   IS
   BEGIN
      set_trace(sqltrace_TF =&gt; TRUE, user =&gt; user_IN);
   END Xon;

   PROCEDURE <A
CLASS="indexterm"
NAME="ch11-idx-15962-0"
></A
>off(user_IN IN VARCHAR2)
   IS
   BEGIN
      set_trace(sqltrace_TF =&gt; FALSE, user =&gt; user_IN);
   END off;

END trace;</PRE
></BLOCKQUOTE
><P
CLASS="para"
>All of the real work done in the trace package is contained in a single private procedure called set_trace. The public procedures merely call set_trace with different parameter combinations. This is a structure that many packages exhibit: private programs with complex functionality exposed through public programs with simpler interfaces. </P
><P
CLASS="para"
>One interesting aspect of set_trace is the cursor used to get session identification data from V_$SESSION. I wanted to identify sessions for tracing by either session id or username. I could have just defined two cursors on V_$SESSION with some conditional logic deciding which cursor to use, but that just did not seem clean enough. After all, less code means fewer bugs. The solution I arrived at: make use of the NVL function to have a single cursor effectively ignore either the sid or the user parameter when either is passed in as NULL. Since set_trace is always called with either sid or user, but not both, the NVLs act as a kind of toggle on the cursor. I also supplied both the sid and user parameters to set_trace with the default value of NULL so that only the parameter being used for selection needs be passed in the call.</P
><P
CLASS="para"
>Once set_trace was in place, the publicly visible procedures were trivial. </P
><P
CLASS="para"
>A final note about the procedure name "xon": I wanted to use the procedure name "on," but ran afoul of the PL/SQL compiler since ON is a reserved word in <A
CLASS="indexterm"
NAME="ch11-idx-15971-0"
></A
>SQL <A
CLASS="indexterm"
NAME="ch11-idx-15943-0"
></A
><A
CLASS="indexterm"
NAME="ch11-idx-15943-1"
></A
>and <A
CLASS="indexterm"
NAME="ch11-idx-15918-0"
></A
><A
CLASS="indexterm"
NAME="ch11-idx-15918-1"
></A
>PL/SQL.</P
></DIV
></DIV
><DIV
CLASS="htmlnav"
><P
></P
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch11_01.htm"
TITLE="11.1 DBMS_SESSION: Managing Session Information"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 11.1 DBMS_SESSION: Managing Session Information"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="book"
HREF="index.htm"
TITLE="Oracle Built-in Packages"
><IMG
SRC="../gifs/txthome.gif"
ALT="Oracle Built-in Packages"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="chapter"
HREF="ch12_01.htm"
TITLE="12. Managing Server Resources"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 12. Managing Server Resources"
BORDER="0"></A
></TD
></TR
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
>11.1 DBMS_SESSION: Managing Session Information</TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="index"
HREF="index/idx_0.htm"
TITLE="Book Index"
><IMG
SRC="../gifs/index.gif"
ALT="Book Index"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
>12. Managing Server Resources</TD
></TR
></TABLE
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"></DIV
><IMG SRC="../gifs/smnavbar.gif"
USEMAP="#map"
BORDER="0"
ALT="The Oracle Library Navigation">

<P><font size="-1">
<a href="../copyrght.htm#copy">Copyright (c) 2000</a> O'Reilly &amp; Associates. All rights reserved.
</font></P>

<MAP NAME="map">

<AREA SHAPE="RECT"
COORDS="0,0,35,30"
HREF="../index.htm"
ALT="Library Home">

<AREA SHAPE="RECT"
COORDS="40,0,95,30"
HREF="../prog2/index.htm"
ALT="Oracle PL/SQL Programming, 2nd. Ed.">

<AREA SHAPE="RECT"
COORDS="100,0,200,30"
HREF="../guide8i/index.htm"
ALT="Guide to Oracle 8i Features">

<AREA SHAPE="RECT"
COORDS="205,0,245,30"
HREF="index.htm"
ALT="Oracle Built-in Packages">

<AREA SHAPE="RECT"
COORDS="250,0,320,30"
HREF="../advprog/index.htm"
ALT="Advanced PL/SQL Programming with Packages">

<AREA SHAPE="RECT"
COORDS="325,0,420,30"
HREF="../webapp/index.htm"
ALT="Oracle Web Applications">

<AREA SHAPE="RECT"
COORDS="425,0,490,30"
HREF="../langpkt/index.htm"
ALT="Oracle PL/SQL Language Pocket Reference">

<AREA SHAPE="RECT"
COORDS="495,0,570,30"
HREF="../bipkt/index.htm"
ALT="Oracle PL/SQL Built-ins Pocket Reference">
</MAP>

</BODY
>
<!-- Mirrored from liso.cs.pusan.ac.kr by HTTrack Website Copier/3.x [XR&CO'2001] -->
</HTML
>
