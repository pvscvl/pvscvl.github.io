<HTML
><HEAD
><TITLE
>[Chapter 8] 8.2 LOB Concepts</TITLE
><META
NAME="DC.Creator"
CONTENT="Steven Feuerstein, Charles Dye &amp; John Beresniewicz"><META
NAME="DC.Date"
CONTENT="2000-04-29T17:55:39Z"><META
NAME="DC.Format"
CONTENT="text/html"
SCHEME="MIME"><META
NAME="DC.Identifier"
CONTENT="O'Reilly and Associates-1-56592-375-8E"><META
NAME="DC.Language"
CONTENT="en-US"><META
NAME="DC.Publisher"
CONTENT="O'Reilly &amp; Associates, Inc."><META
NAME="DC.Source"
CONTENT="1-56592-375-8E"
SCHEME="ISBN"><META
NAME="DC.Subject.Keyword"
CONTENT="Oracle Packages"><META
NAME="DC.Title"
CONTENT="Oracle Built-in Packages"><META
NAME="DC.Type"
CONTENT="Text.Monograph"><META
NAME="generator"
CONTENT="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><LINK
REL="stylesheet"
TYPE="text/css"
HREF="../style/style1.css"><LINK
REV="made"
HREF="mailto:online-books@oreilly.com"
TITLE="Online Books Comments"><LINK
REL="up"
HREF="ch08_01.htm"
TITLE="8. Managing Large Objects "><LINK
REL="prev"
HREF="ch08_01.htm"
TITLE="8.1 Getting Started with DBMS_LOB"><LINK
REL="next"
HREF="ch08_03.htm#ch08-SECT-3.1.5"
TITLE="8.3 DBMS_LOB Interface"></HEAD
><BODY
><DIV
CLASS="htmlnav"
><H1
><IMG
SRC="gifs/smbanner.gif"
ALT="Oracle Built-in Packages"
USEMAP="#srchmap"
BORDER="0"></H1
><MAP
NAME="srchmap"
><AREA
SHAPE="RECT"
COORDS="0,0,466,65"
HREF="index.htm"
ALT="Oracle Built-in Packages"><AREA
SHAPE="RECT"
COORDS="467,0,514,18"
HREF="jobjects/fsearch.htm"
ALT="Search this book"></MAP
><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch08_01.htm"
TITLE="8.1 Getting Started with DBMS_LOB"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 8.1 Getting Started with DBMS_LOB"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><SPAN
CLASS="NAVTITLE"
><A
CLASS="chapter"
REL="up"
HREF="ch08_01.htm"
TITLE="8. Managing Large Objects "
>Chapter 8<BR>Managing Large Objects </A
></SPAN
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch08_03.htm#ch08-SECT-3.1.5"
TITLE="8.3 DBMS_LOB Interface"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 8.3 DBMS_LOB Interface"
BORDER="0"></A
></TD
></TR
></TABLE
>&nbsp;<HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"></DIV
><DIV
CLASS="sect1"
><H2
CLASS="sect1"
><A
CLASS="title"
NAME="ch08-40385"
>8.2 LOB Concepts</A
></H2
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="ch08-idx-22406-0"
></A
>This section describes some basic LOB concepts you'll need to understand when you work with large objects.</P
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch08-SECT-2.1"
>8.2.1 LOB Datatypes</A
></H3
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="ch08-idx-22408-0"
></A
>Oracle8 provides four LOB datatypes:</P
><DL
CLASS="variablelist"
><DT
CLASS="term"
>BFILE</DT
><DD
CLASS="listitem"
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="ch08-idx-22410-0"
></A
><A
CLASS="indexterm"
NAME="ch08-idx-22410-1"
></A
><A
CLASS="indexterm"
NAME="ch08-idx-22410-2"
></A
>Large binary objects stored in operating system files outside of the database; for example, a bitmap image file.</P
></DD
><DT
CLASS="term"
>BLOB</DT
><DD
CLASS="listitem"
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="ch08-idx-22411-0"
></A
><A
CLASS="indexterm"
NAME="ch08-idx-22411-1"
></A
><A
CLASS="indexterm"
NAME="ch08-idx-22411-2"
></A
>Large objects consisting of unstructured binary data.</P
></DD
><DT
CLASS="term"
>CLOB</DT
><DD
CLASS="listitem"
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="ch08-idx-22412-0"
></A
><A
CLASS="indexterm"
NAME="ch08-idx-22412-1"
></A
><A
CLASS="indexterm"
NAME="ch08-idx-22412-2"
></A
>Large objects consisting of single-byte <A
CLASS="indexterm"
NAME="ch08-idx-22430-0"
></A
><A
CLASS="indexterm"
NAME="ch08-idx-22430-1"
></A
>fixed-width character data.</P
></DD
><DT
CLASS="term"
>NCLOB</DT
><DD
CLASS="listitem"
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="ch08-idx-22413-0"
></A
><A
CLASS="indexterm"
NAME="ch08-idx-22413-1"
></A
><A
CLASS="indexterm"
NAME="ch08-idx-22413-2"
></A
>Large binary objects consisting of single-byte or multiple-byte fixed-width character data.</P
></DD
></DL
><DIV
CLASS="sect3"
><H4
CLASS="sect3"
><A
CLASS="title"
NAME="ch08-SECT-2.1.1"
>8.2.1.1 Internal and external LOBs</A
></H4
><P
CLASS="para"
>There are two categories of LOBs, depending upon their location with respect to the physical database:</P
><UL
CLASS="itemizedlist"
><LI
CLASS="listitem"
><P
CLASS="para"
><EM
CLASS="emphasis"
>Internal LOBs</EM
><A
CLASS="indexterm"
NAME="ch08-idx-22414-0"
></A
><A
CLASS="indexterm"
NAME="ch08-idx-22414-1"
></A
> (of datatypes BLOB, CLOB, and NCLOB) are stored in the database and can participate in <A
CLASS="indexterm"
NAME="ch08-idx-22420-0"
></A
><A
CLASS="indexterm"
NAME="ch08-idx-22420-1"
></A
>transactions. Changes to internal LOB values can be rolled back or committed. A <A
CLASS="indexterm"
NAME="ch08-idx-22422-0"
></A
><A
CLASS="indexterm"
NAME="ch08-idx-22422-1"
></A
>cursor can select an internal LOB FOR UPDATE. Uncommitted changes to an internal LOB are not seen by a separate session.</P
></LI
><LI
CLASS="listitem"
><P
CLASS="para"
><EM
CLASS="emphasis"
>External LOBs</EM
><A
CLASS="indexterm"
NAME="ch08-idx-22415-0"
></A
><A
CLASS="indexterm"
NAME="ch08-idx-22415-1"
></A
> (of datatype BFILE) are stored outside of the database in operating system files and cannot participate in transactions. Instead, the underlying operating system provides the data integrity. Access to external LOBs is read-only.</P
></LI
></UL
></DIV
><DIV
CLASS="sect3"
><H4
CLASS="sect3"
><A
CLASS="title"
NAME="ch08-SECT-2.1.2"
>8.2.1.2 The BFILE datatype</A
></H4
><P
CLASS="para"
>The <A
CLASS="indexterm"
NAME="ch08-idx-22423-0"
></A
>BFILE datatype is used to store large binary objects (up to four gigabytes) in files outside of the database. </P
><P
CLASS="para"
>A BFILE could be a PL/SQL variable,</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>DECLARE
   my_book_file BFILE;</PRE
></BLOCKQUOTE
><P
CLASS="para"
>or a column in a table,</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>CREATE TABLE my_book_files
   ( file_descr VARCHAR2(40),  book_file BFILE  );</PRE
></BLOCKQUOTE
><P
CLASS="para"
>or an attribute in a TYPE,</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>CREATE OR REPLACE PACKAGE blobby
IS
   TYPE adpage_rectype IS RECORD (
      customer_id NUMBER,
      persuasive_picture BFILE
      ),</PRE
></BLOCKQUOTE
><P
CLASS="para"
>or a parameter/RETURN type in a PL/SQL procedure or function:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>CREATE OR REPLACE FUNCTION blended_image (
   old_image IN BFILE, new_image IN BFILE)
   RETURN BFILE
IS
BEGIN
   ...
END;</PRE
></BLOCKQUOTE
><P
CLASS="para"
>In each case, the BFILE value points to an operating-system file residing on the server and outside of the <A
CLASS="indexterm"
NAME="ch08-idx-22500-0"
></A
>database.</P
></DIV
><DIV
CLASS="sect3"
><H4
CLASS="sect3"
><A
CLASS="title"
NAME="ch08-SECT-2.1.3"
>8.2.1.3 The BLOB datatype</A
></H4
><P
CLASS="para"
>The BLOB datatype is used to store large binary objects within the database; the objects can be up to four gigabytes and may consist of unstructured raw data. A BLOB could be a PL/SQL variable,</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>DECLARE
   corporate_logo BLOB;</PRE
></BLOCKQUOTE
><P
CLASS="para"
>or a column in a table,</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>CREATE TABLE my_book_diagrams
   ( chapter_descr VARCHAR2(40),
     diagram_no INTEGER,
     diagram BLOB );</PRE
></BLOCKQUOTE
><P
CLASS="para"
>or an attribute in a TYPE,</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>CREATE OR REPLACE PACKAGE chapter
IS
   TYPE diagram_rectype IS RECORD (
      chapter_num NUMBER,
      diagram BLOB
      ),</PRE
></BLOCKQUOTE
><P
CLASS="para"
>or a parameter/RETURN type in a PL/SQL procedure or function:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>CREATE OR REPLACE PROCEDURE show_blob (
   blob_in IN BLOB)
IS
BEGIN
   ...
END;</PRE
></BLOCKQUOTE
><P
CLASS="para"
>A BLOB is an internal LOB, and therefore can participate in database transactions. In other words, changes made to a BLOB can be rolled back or committed along with other changes during a transaction. BLOBs cannot span transactions.</P
></DIV
><DIV
CLASS="sect3"
><H4
CLASS="sect3"
><A
CLASS="title"
NAME="ch08-SECT-2.1.4"
>8.2.1.4 The CLOB datatype</A
></H4
><P
CLASS="para"
>The <A
CLASS="indexterm"
NAME="ch08-idx-22424-0"
></A
><A
CLASS="indexterm"
NAME="ch08-idx-22424-1"
></A
>CLOB datatype is used to store large blocks within the database. The blocks can be up to four gigabytes of single-byte character data. A CLOB could be a PL/SQL variable,</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>DECLARE
   gettysburg_address_text   CLOB;</PRE
></BLOCKQUOTE
><P
CLASS="para"
>or a column in a table,</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>CREATE TABLE my_book_text
   ( chapter_descr VARCHAR2(40), chapter_text CLOB );</PRE
></BLOCKQUOTE
><P
CLASS="para"
>or an attribute in a TYPE,</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>CREATE OR REPLACE PACKAGE speechifying
IS
   TYPE poll_results_rectype IS RECORD (
      speech_num NUMBER,
      speech_txt CLOB
      ),</PRE
></BLOCKQUOTE
><P
CLASS="para"
>or a parameter/RETURN type in a PL/SQL procedure or function:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>CREATE OR REPLACE PROCEDURE edit_speech  (
  text_in IN CLOB)
IS
BEGIN
   ...
END;</PRE
></BLOCKQUOTE
><P
CLASS="para"
>A CLOB is an internal LOB and therefore can participate in database transactions. In other words, changes made to a CLOB can be rolled back or committed along with other changes during a transaction. CLOBs cannot span transactions, and do not support <A
CLASS="indexterm"
NAME="ch08-idx-22442-0"
></A
><A
CLASS="indexterm"
NAME="ch08-idx-22442-1"
></A
>variable-width character <A
CLASS="indexterm"
NAME="ch08-idx-22426-0"
></A
><A
CLASS="indexterm"
NAME="ch08-idx-22426-1"
></A
>sets.</P
></DIV
><DIV
CLASS="sect3"
><H4
CLASS="sect3"
><A
CLASS="title"
NAME="ch08-SECT-2.1.5"
>8.2.1.5 The NCLOB datatype</A
></H4
><P
CLASS="para"
>The <A
CLASS="indexterm"
NAME="ch08-idx-22428-0"
></A
><A
CLASS="indexterm"
NAME="ch08-idx-22428-1"
></A
><A
CLASS="indexterm"
NAME="ch08-idx-22428-2"
></A
>NCLOB datatype is used to store large blocks within the database. The blocks can be up to four gigabytes of single-byte or multiple-byte fixed-width character data. A NCLOB could be a PL/SQL variable,</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>DECLARE
   gettysburg_address_in_japanese NCLOB;</PRE
></BLOCKQUOTE
><P
CLASS="para"
>or a column in a table:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>CREATE TABLE my_book_in_japanese
   ( chapter_no INTEGER,
     chapter_in_japanese NCLOB );</PRE
></BLOCKQUOTE
><P
CLASS="para"
>You may also use the NCLOB datatype in the parameter of a PL/SQL program or the RETURN type for a function. However, you may not use NCLOB as the datatype of an attribute in a TYPE statement.</P
><P
CLASS="para"
>A NCLOB is an internal LOB, and therefore can participate in database transactions. In other words, changes made to a NCLOB can be rolled back or committed along with other changes during a transaction. NCLOBs cannot span transactions, and do not support <A
CLASS="indexterm"
NAME="ch08-idx-22429-0"
></A
><A
CLASS="indexterm"
NAME="ch08-idx-22429-1"
></A
>variable-width character sets.</P
></DIV
><DIV
CLASS="sect3"
><H4
CLASS="sect3"
><A
CLASS="title"
NAME="ch08-SECT-2.1.6"
>8.2.1.6 The <A
CLASS="indexterm"
NAME="ch08-idx-22443-0"
></A
>LOB locator</A
></H4
><P
CLASS="para"
>The value held in a <A
CLASS="indexterm"
NAME="ch08-idx-22451-0"
></A
>LOB column or<A
CLASS="indexterm"
NAME="ch08-idx-22452-0"
></A
> variable is not the actual binary data, but a "locator" or pointer to the physical location of the large object.</P
><P
CLASS="para"
>For <A
CLASS="indexterm"
NAME="ch08-idx-22453-0"
></A
><A
CLASS="indexterm"
NAME="ch08-idx-22453-1"
></A
>internal LOBs, since one LOB value can be up to four gigabytes in size, the binary data will be stored "out of line" (i.e., physically separate) from the other column values of a row (unless otherwise specified; see the next paragraph). This allows the physical size of an individual row to be minimized for improved performance (the LOB column contains only a pointer to the large object). Operations involving multiple rows, such as full table scans, can be performed more efficiently.</P
><P
CLASS="para"
>A user can specify that the LOB value be stored in the row itself. This is usually done when working with small LOB values. This approach decreases the time needed to obtain the LOB value. However, the LOB data is migrated out of the row when it gets too big.</P
><P
CLASS="para"
>For <A
CLASS="indexterm"
NAME="ch08-idx-22454-0"
></A
><A
CLASS="indexterm"
NAME="ch08-idx-22454-1"
></A
>external LOBs, the BFILE value represents a filename and an operating system directory, which is also a pointer to the location of the large object.</P
></DIV
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch08-SECT-2.2"
>8.2.2 BFILE Considerations</A
></H3
><P
CLASS="para"
>There are some special considerations you should be aware of when you work with BFILEs.</P
><DIV
CLASS="sect3"
><H4
CLASS="sect3"
><A
CLASS="title"
NAME="ch08-SECT-2.2.1"
>8.2.2.1 The DIRECTORY object</A
></H4
><P
CLASS="para"
>A BFILE locator consists of a <A
CLASS="indexterm"
NAME="ch08-idx-22457-0"
></A
><A
CLASS="indexterm"
NAME="ch08-idx-22457-1"
></A
>directory alias and a filename. The directory alias is an Oracle8 database object that allows references to operating system directories without hard-coding directory pathnames. This statement creates a directory:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>CREATE DIRECTORY IMAGES AS 'c:\images';</PRE
></BLOCKQUOTE
><P
CLASS="para"
>To refer to the <I
CLASS="filename"
>c:\images </I
> directory within SQL, you can use the IMAGES alias, rather than hard-coding the actual directory pathname.</P
><P
CLASS="para"
>To create a directory, you need the CREATE DIRECTORY or CREATE ANY DIRECTORY privilege. To reference a directory, you must be granted the READ privilege, as in:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>GRANT READ ON DIRECTORY IMAGES TO SCOTT;</PRE
></BLOCKQUOTE
></DIV
><DIV
CLASS="sect3"
><H4
CLASS="sect3"
><A
CLASS="title"
NAME="ch08-SECT-2.2.2"
>8.2.2.2 Populating a BFILE locator</A
></H4
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="ch08-idx-22503-0"
></A
>The Oracle8 built-in function BFILENAME can be used to populate a BFILE locator. BFILENAME is passed a directory alias and filename and returns a locator to the file. In the following block, the BFILE variable corporate_logo is assigned a locator for the file named <EM
CLASS="emphasis"
>ourlogo.bmp</EM
> located in the IMAGES directory:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>DECLARE
   corporate_logo     BFILE;
BEGIN
   corporate_logo := BFILENAME ( 'IMAGES', 'ourlogo.bmp' );
END;</PRE
></BLOCKQUOTE
><P
CLASS="para"
>The following statements populate the my_book_files table; each row is associated with a file in the BOOK_TEXT directory:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>INSERT INTO my_book_files ( file_descr, book_file )
     VALUES ( 'Chapter 1', BFILENAME('BOOK_TEXT', 'chapter01.txt') );
UPDATE  my_book_files
   SET  book_file = BFILENAME( 'BOOK_TEXT', 'chapter02rev.txt' )
 WHERE  file_descr = 'Chapter 2';</PRE
></BLOCKQUOTE
><P
CLASS="para"
>Once a BFILE column or variable is associated with a physical file, read operations on the BFILE can be performed using the DBMS_LOB package. Remember that access to physical files via BFILEs is read-only, and that the BFILE value is a pointer. The contents of the file remain outside of the database, but on the same server on which the <A
CLASS="indexterm"
NAME="ch08-idx-22506-0"
></A
>database <A
CLASS="indexterm"
NAME="ch08-idx-22409-0"
></A
>resides.</P
></DIV
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch08-SECT-2.3"
>8.2.3 Internal LOB Considerations</A
></H3
><P
CLASS="para"
>There are also some special considerations you need to be aware of when you work with <A
CLASS="indexterm"
NAME="ch08-idx-22459-0"
></A
><A
CLASS="indexterm"
NAME="ch08-idx-22459-1"
></A
>internal LOBs.</P
><DIV
CLASS="sect3"
><H4
CLASS="sect3"
><A
CLASS="title"
NAME="ch08-SECT-2.3.1"
>8.2.3.1 Retaining the LOB locator</A
></H4
><P
CLASS="para"
>The following statement populates the my_book_text table, which contains CLOB column chapter_text:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>INSERT INTO my_book_text ( chapter_descr, chapter_text )
     VALUES ( 'Chapter 1', 'It was a dark and stormy night.' );</PRE
></BLOCKQUOTE
><P
CLASS="para"
>Programs within the DBMS_LOB package require a LOB locator to be passed as input. If you want to insert the preceding row and then call a DBMS_LOB program using the row's CLOB value, you must retain the LOB locator created by your INSERT statement. You could do this as in the following block, which inserts a row, selects the inserted LOB locator, and then calls the DBMS_LOB.GETLENGTH program to get the size of the CLOB chapter_text column. Note that the GETLENGTH program expects a LOB locator.</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>DECLARE
   chapter_loc          CLOB;
   chapter_length       INTEGER;
BEGIN
   INSERT INTO my_book_text ( chapter_descr, chapter_text )
        VALUES ( 'Chapter 1', 'It was a dark and stormy night.' );
   SELECT  chapter_text
     INTO  chapter_loc
     FROM  my_book_text
    WHERE  chapter_descr = 'Chapter 1';
   chapter_length := DBMS_LOB.GETLENGTH( chapter_loc );
   DBMS_OUTPUT.PUT_LINE( 'Length of Chapter 1: ' || chapter_length );
END;
/</PRE
></BLOCKQUOTE
><P
CLASS="para"
>This is the output of the script:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>Length of Chapter 1: 31</PRE
></BLOCKQUOTE
></DIV
><DIV
CLASS="sect3"
><H4
CLASS="sect3"
><A
CLASS="title"
NAME="ch08-SECT-2.3.2"
>8.2.3.2 The RETURNING clause</A
></H4
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="ch08-idx-22462-0"
></A
>You can avoid the second trip to the database (i.e., the SELECT of the LOB locator after the INSERT)by using a RETURNING clause in the INSERT statement. Using this feature, perform the INSERT operation and the LOB locator value for the new row in a single operation.</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>DECLARE
   chapter_loc        CLOB;
   chapter_length     INTEGER;
BEGIN

   INSERT INTO my_book_text ( chapter_descr, chapter_text )
        VALUES ( 'Chapter 1', 'It was a dark and stormy night.' )
     RETURNING chapter_text INTO chapter_loc;

   chapter_length := DBMS_LOB.GETLENGTH( chapter_loc );

   DBMS_OUTPUT.PUT_LINE( 'Length of Chapter 1: ' || chapter_length );

END;
/</PRE
></BLOCKQUOTE
><P
CLASS="para"
>This is the output of the script:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>Length of Chapter 1: 31</PRE
></BLOCKQUOTE
><P
CLASS="para"
>The RETURNING clause can be used in both INSERT and UPDATE statements.</P
></DIV
><DIV
CLASS="sect3"
><H4
CLASS="sect3"
><A
CLASS="title"
NAME="ch08-SECT-2.3.3"
>8.2.3.3 NULL LOB locators can be a problem</A
></H4
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="ch08-idx-22463-0"
></A
>Programs in the DBMS_LOB package expect to be passed a LOB locator that is not NULL. For example, the GETLENGTH program raises an exception when passed a LOB locator that is NULL.</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>DECLARE
   chapter_loc        CLOB;
   chapter_length     INTEGER;

BEGIN
      UPDATE  my_book_text
         SET  chapter_text = NULL
       WHERE  chapter_descr = 'Chapter 1'
   RETURNING  chapter_text INTO chapter_loc;

   chapter_length := DBMS_LOB.GETLENGTH( chapter_loc );

   DBMS_OUTPUT.PUT_LINE( 'Length of Chapter 1: ' || chapter_length );

EXCEPTION
   WHEN OTHERS
   THEN
      DBMS_OUTPUT.PUT_LINE('OTHERS Exception ' || sqlerrm);

END;
/</PRE
></BLOCKQUOTE
><P
CLASS="para"
>This is the output of the script:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>OTHERS Exception ORA-00600: internal error code, arguments: ...</PRE
></BLOCKQUOTE
><P
CLASS="para"
>When a BLOB, CLOB, or NCLOB column is set to NULL, <EM
CLASS="emphasis"
>both</EM
> the LOB binary data <EM
CLASS="emphasis"
>and</EM
> its LOB locator are NULL; this NULL LOB locator should not be passed to a program in the DBMS_LOB package.</P
></DIV
><DIV
CLASS="sect3"
><H4
CLASS="sect3"
><A
CLASS="title"
NAME="ch08-SECT-2.3.4"
>8.2.3.4 NULL versus "empty" LOB locators</A
></H4
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="ch08-idx-22496-0"
></A
>Oracle8 provides the built-in functions EMPTY_BLOB and EMPTY_CLOB to set BLOB, CLOB, and NCLOB columns to "empty." For example:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>INSERT INTO my_book_text ( chapter_descr, chapter_text )
     VALUES ( 'Table of Contents', EMPTY_CLOB() );</PRE
></BLOCKQUOTE
><P
CLASS="para"
>The LOB data is set to NULL. However, the associated LOB locator is assigned a valid locator value, which points to the NULL data. This LOB locator can then be passed to DBMS_LOB programs.</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>DECLARE
   chapter_loc      CLOB;
   chapter_length   INTEGER;

BEGIN
   INSERT INTO my_book_text (chapter_descr, chapter_text)
        VALUES ( 'Table of Contents', EMPTY_CLOB() )
     RETURNING chapter_text INTO chapter_loc;

   chapter_length := DBMS_LOB.GETLENGTH( chapter_loc );

   DBMS_OUTPUT.PUT_LINE
      ('Length of Table of Contents: ' || chapter_length);

EXCEPTION
   WHEN OTHERS
   THEN
      DBMS_OUTPUT.PUT_LINE( 'OTHERS Exception ' || sqlerrm);

END;
/</PRE
></BLOCKQUOTE
><P
CLASS="para"
>This is the output of the script:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>Length of Table of Contents: 0</PRE
></BLOCKQUOTE
><P
CLASS="para"
>Note that EMPTY_CLOB can be used to populate both CLOB and NCLOB columns. EMPTY_BLOB and EMPTY_CLOB can be called <A
CLASS="indexterm"
NAME="ch08-idx-22497-0"
></A
>with <A
CLASS="indexterm"
NAME="ch08-idx-22487-0"
></A
>or <A
CLASS="indexterm"
NAME="ch08-idx-22468-0"
></A
>without <A
CLASS="indexterm"
NAME="ch08-idx-22460-0"
></A
><A
CLASS="indexterm"
NAME="ch08-idx-22460-1"
></A
>empty <A
CLASS="indexterm"
NAME="ch08-idx-22407-0"
></A
>parentheses.</P
><BLOCKQUOTE
CLASS="note"
><P
CLASS="para"
><STRONG
>NOTE:</STRONG
> Do not populate BLOB, CLOB, or NCLOB columns with NULL values. Instead, use the EMPTY_BLOB or EMPTY_CLOB functions, which will populate the columns with a valid LOB locator and set the associated data to NULL.</P
></BLOCKQUOTE
></DIV
></DIV
></DIV
><DIV
CLASS="htmlnav"
><P
></P
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch08_01.htm"
TITLE="8.1 Getting Started with DBMS_LOB"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 8.1 Getting Started with DBMS_LOB"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="book"
HREF="index.htm"
TITLE="Oracle Built-in Packages"
><IMG
SRC="../gifs/txthome.gif"
ALT="Oracle Built-in Packages"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch08_03.htm#ch08-SECT-3.1.5"
TITLE="8.3 DBMS_LOB Interface"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 8.3 DBMS_LOB Interface"
BORDER="0"></A
></TD
></TR
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
>8.1 Getting Started with DBMS_LOB</TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="index"
HREF="index/idx_0.htm"
TITLE="Book Index"
><IMG
SRC="../gifs/index.gif"
ALT="Book Index"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
>8.3 DBMS_LOB Interface</TD
></TR
></TABLE
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"></DIV
><IMG SRC="../gifs/smnavbar.gif"
USEMAP="#map"
BORDER="0"
ALT="The Oracle Library Navigation">

<P><font size="-1">
<a href="../copyrght.htm#copy">Copyright (c) 2000</a> O'Reilly &amp; Associates. All rights reserved.
</font></P>

<MAP NAME="map">

<AREA SHAPE="RECT"
COORDS="0,0,35,30"
HREF="../index.htm"
ALT="Library Home">

<AREA SHAPE="RECT"
COORDS="40,0,95,30"
HREF="../prog2/index.htm"
ALT="Oracle PL/SQL Programming, 2nd. Ed.">

<AREA SHAPE="RECT"
COORDS="100,0,200,30"
HREF="../guide8i/index.htm"
ALT="Guide to Oracle 8i Features">

<AREA SHAPE="RECT"
COORDS="205,0,245,30"
HREF="index.htm"
ALT="Oracle Built-in Packages">

<AREA SHAPE="RECT"
COORDS="250,0,320,30"
HREF="../advprog/index.htm"
ALT="Advanced PL/SQL Programming with Packages">

<AREA SHAPE="RECT"
COORDS="325,0,420,30"
HREF="../webapp/index.htm"
ALT="Oracle Web Applications">

<AREA SHAPE="RECT"
COORDS="425,0,490,30"
HREF="../langpkt/index.htm"
ALT="Oracle PL/SQL Language Pocket Reference">

<AREA SHAPE="RECT"
COORDS="495,0,570,30"
HREF="../bipkt/index.htm"
ALT="Oracle PL/SQL Built-ins Pocket Reference">
</MAP>

</BODY
>
<!-- Mirrored from liso.cs.pusan.ac.kr by HTTrack Website Copier/3.x [XR&CO'2001] -->
</HTML
>
