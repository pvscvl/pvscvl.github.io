<HTML
><HEAD
><TITLE
>[Chapter 17] 17.3 DBMS_DEFER: Building Deferred Calls</TITLE
><META
NAME="DC.Creator"
CONTENT="Steven Feuerstein, Charles Dye &amp; John Beresniewicz"><META
NAME="DC.Date"
CONTENT="2000-04-29T18:04:52Z"><META
NAME="DC.Format"
CONTENT="text/html"
SCHEME="MIME"><META
NAME="DC.Identifier"
CONTENT="O'Reilly and Associates-1-56592-375-8E"><META
NAME="DC.Language"
CONTENT="en-US"><META
NAME="DC.Publisher"
CONTENT="O'Reilly &amp; Associates, Inc."><META
NAME="DC.Source"
CONTENT="1-56592-375-8E"
SCHEME="ISBN"><META
NAME="DC.Subject.Keyword"
CONTENT="Oracle Packages"><META
NAME="DC.Title"
CONTENT="Oracle Built-in Packages"><META
NAME="DC.Type"
CONTENT="Text.Monograph"><META
NAME="generator"
CONTENT="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><LINK
REL="stylesheet"
TYPE="text/css"
HREF="../style/style1.css"><LINK
REV="made"
HREF="mailto:online-books@oreilly.com"
TITLE="Online Books Comments"><LINK
REL="up"
HREF="ch17_01.htm"
TITLE="17. Deferred  Transactions and Remote Procedure Calls"><LINK
REL="prev"
HREF="ch17_02.htm#ch17-SECT-2.1.1"
TITLE="17.2 DBMS_DEFER_SYS: Managing Deferred Transactions"><LINK
REL="next"
HREF="ch17_04.htm#ch17-SECT-4.1.1"
TITLE="17.4 DBMS_DEFER_QUERY: Performing Diagnostics and Maintenance"></HEAD
><BODY
><DIV
CLASS="htmlnav"
><H1
><IMG
SRC="gifs/smbanner.gif"
ALT="Oracle Built-in Packages"
USEMAP="#srchmap"
BORDER="0"></H1
><MAP
NAME="srchmap"
><AREA
SHAPE="RECT"
COORDS="0,0,466,65"
HREF="index.htm"
ALT="Oracle Built-in Packages"><AREA
SHAPE="RECT"
COORDS="467,0,514,18"
HREF="jobjects/fsearch.htm"
ALT="Search this book"></MAP
><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch17_02.htm#ch17-SECT-2.1.1"
TITLE="17.2 DBMS_DEFER_SYS: Managing Deferred Transactions"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 17.2 DBMS_DEFER_SYS: Managing Deferred Transactions"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><SPAN
CLASS="NAVTITLE"
><A
CLASS="chapter"
REL="up"
HREF="ch17_01.htm"
TITLE="17. Deferred  Transactions and Remote Procedure Calls"
>Chapter 17<BR>Deferred  Transactions and Remote Procedure Calls</A
></SPAN
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch17_04.htm#ch17-SECT-4.1.1"
TITLE="17.4 DBMS_DEFER_QUERY: Performing Diagnostics and Maintenance"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 17.4 DBMS_DEFER_QUERY: Performing Diagnostics and Maintenance"
BORDER="0"></A
></TD
></TR
></TABLE
>&nbsp;<HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"></DIV
><DIV
CLASS="sect1"
><H2
CLASS="sect1"
><A
CLASS="title"
NAME="ch17-SECT-3"
>17.3 DBMS_DEFER: Building Deferred Calls</A
></H2
><P
CLASS="para"
>The <A
CLASS="indexterm"
NAME="ch17-idx-951688-0"
></A
>DBMS_DEFER package builds deferred remote procedure calls.</P
><BLOCKQUOTE
CLASS="warning"
><P
CLASS="para"
><STRONG
>WARNING:</STRONG
> <A
CLASS="indexterm"
NAME="ch17-idx-951690-0"
></A
>DBMS_DEFER can execute procedures at remote sites under a highly privileged account, such as the replication administrator account. Therefore, EXECUTE privileges on DBMS_DEFER should not be widely granted. As a general rule, you should restrict it to DBA accounts. If you want to provide end users with the ability to create their own deferred calls, you should create a cover package and grant EXECUTE on it to end users or end user roles.</P
></BLOCKQUOTE
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch17-SECT-3.1"
>17.3.1 Getting Started with DBMS_DEFER</A
></H3
><P
CLASS="para"
>The DBMS_DEFER package is <A
CLASS="indexterm"
NAME="ch17-idx-951691-0"
></A
>created when the Oracle database is installed. The <I
CLASS="filename"
>dbmsdefr.sql</I
><A
CLASS="indexterm"
NAME="ch17-idx-951692-0"
></A
> script (found in the built-in packages source directory, as described in Chapter 1) contains the source code for this package's specification. This script is called by <I
CLASS="filename"
>catrep.sql</I
><A
CLASS="indexterm"
NAME="ch17-idx-952636-0"
></A
>, which must be run to install the advanced replication packages. The script creates the public synonym DBMS_DEFER. EXECUTE privileges on DBMS_DEFER are not granted. The following procedures grant EXECUTE privilege on DBMS_DEFER to the specified grantees:</P
><TABLE
CLASS="simplelist"
BORDER="0"
><TR
><TD
CLASS="member"
>DBMS_REPCAT_AUTH.GRANT_SURROGATE_REPCAT</TD
></TR
><TR
><TD
CLASS="member"
>DBMS_REPCAT_ADMIN.GRANT_ADMIN_ANY_REPGROUP</TD
></TR
><TR
><TD
CLASS="member"
>DBMS_REPCAT_ADMIN.GRANT_ADMIN_ANY_REPSCHEMA</TD
></TR
><TR
><TD
CLASS="member"
>DBMS_REPCAT_ADMIN.GRANT_ADMIN_REPGROUP</TD
></TR
><TR
><TD
CLASS="member"
>DBMS_REPCAT_ADMIN.GRANT_ADMIN_REPSCHEMA</TD
></TR
><TR
><TD
CLASS="member"
>DBMS_REPCAT_ADMIN.GRANT_ADMIN_ANY_REPGROUP </TD
></TR
></TABLE
><DIV
CLASS="sect3"
><H4
CLASS="sect3"
><A
CLASS="title"
NAME="ch17-SECT-3.1.1"
>17.3.1.1 DBMS_DEFER programs</A
></H4
><P
CLASS="para"
><A
CLASS="xref"
HREF="ch17_03.htm#ch17-SECT-3.1.1"
>Table 17.11</A
> <A
CLASS="indexterm"
NAME="ch17-idx-951693-0"
></A
><A
CLASS="indexterm"
NAME="ch17-idx-951693-1"
></A
>lists the programs available in the DBMS_DEFER package.   </P
><BR><TABLE
CLASS="table"
BORDER="1"
CELLPADDING="3"
><CAPTION
CLASS="table"
><A
CLASS="title"
NAME="ch17-20305"
>Table 17.11: DBMS_DEFER Programs </A
></CAPTION
><THEAD
CLASS="thead"
><TR
CLASS="row"
VALIGN="TOP"
><TH
CLASS="entry"
ALIGN="LEFT"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>Name</P
></TH
><TH
CLASS="entry"
ALIGN="LEFT"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>Description</P
></TH
><TH
CLASS="entry"
ALIGN="LEFT"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>Use in SQL?</P
></TH
></TR
></THEAD
><TBODY
CLASS="tbody"
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="ch17-idx-952532-0"
></A
>CALL</P
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>Defines a remote procedure call</P
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>No</P
></TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="ch17-idx-952539-0"
></A
>COMMIT_WORK</P
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>Commits deferred RPC transaction</P
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>No</P
></TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="ch17-idx-952546-0"
></A
>&lt;datatype&gt;_ARG</P
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>Adds parameter of specified datatype to a deferred call; </P
><P
CLASS="para"
>&lt;datatype&gt;  may be CHAR, DATE, NUMBER, RAW,</P
><P
CLASS="para"
>ROWID, or VARCHAR2</P
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>No</P
></TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="ch17-idx-952553-0"
></A
>TRANSACTION</P
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>Marks a transaction as deferred</P
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>No</P
></TD
></TR
></TBODY
></TABLE
></DIV
><DIV
CLASS="sect3"
><H4
CLASS="sect3"
><A
CLASS="title"
NAME="ch17-SECT-3.1.2"
>17.3.1.2 DBMS_DEFER exceptions</A
></H4
><P
CLASS="para"
>The DBMS_DEFER package may raise any of the <A
CLASS="indexterm"
NAME="ch17-idx-951698-0"
></A
>exceptions listed in <A
CLASS="xref"
HREF="ch17_03.htm#ch17-SECT-3.1.1"
>Table 17.12</A
>.</P
><BR><TABLE
CLASS="table"
BORDER="1"
CELLPADDING="3"
><CAPTION
CLASS="table"
><A
CLASS="title"
NAME="ch17-35171"
>Table 17.12: DBMS_DEFER Exceptions </A
></CAPTION
><THEAD
CLASS="thead"
><TR
CLASS="row"
VALIGN="TOP"
><TH
CLASS="entry"
ALIGN="LEFT"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>Name</P
></TH
><TH
CLASS="entry"
ALIGN="LEFT"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>Number</P
></TH
><TH
CLASS="entry"
ALIGN="LEFT"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>Description</P
></TH
></TR
></THEAD
><TBODY
CLASS="tbody"
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>bad_param_type</P
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>-23325</P
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>Parameter type does not match actual type</P
></TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>deferred_rpc_quiesce</P
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>-23326</P
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>Database is quiescing</P
></TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>dbms_defererror</P
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>-23305</P
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>Generic internal errors</P
></TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>malformedcall</P
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>-23304</P
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>Argument count mismatches, etc.</P
></TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>updateconflict</P
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>-23303</P
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>Remote update failed due to conflict</P
></TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>commfailure</P
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>-23302</P
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>Remote update failed due to communication failure</P
></TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>mixeddest</P
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>-23301</P
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>Destinations for transaction not specified consistently</P
></TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>parameterlength</P
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>-23323</P
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>Parameter length exceeds limits (2000 for CHAR/VARCHAR, 255 for RAW)</P
></TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>executiondisabled</P
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>-23354</P
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>Deferred RPC execution is disabled</P
></TD
></TR
></TBODY
></TABLE
></DIV
><DIV
CLASS="sect3"
><H4
CLASS="sect3"
><A
CLASS="title"
NAME="ch17-SECT-3.1.3"
>17.3.1.3 DBMS_DEFER nonprogram elements</A
></H4
><P
CLASS="para"
><A
CLASS="xref"
HREF="ch17_03.htm#ch17-SECT-3.1.1"
>Table 17.13</A
> lists the constants and other nonprogram elements defined in the DBMS_DEFER package. The DBMS_DEFER.NODE_LIST_T element is a PL/SQL table whose first entry is always placed in row 1. It is filled sequentially, with each subsequent entry placed in row DBMS_DEFER.NODE_LIST_T.LAST + 1.</P
><BR><TABLE
CLASS="table"
BORDER="1"
CELLPADDING="3"
><CAPTION
CLASS="table"
><A
CLASS="title"
NAME="ch17-25857"
>Table 17.13: DBMS_DEFER Other Elements </A
></CAPTION
><THEAD
CLASS="thead"
><TR
CLASS="row"
VALIGN="TOP"
><TH
CLASS="entry"
ALIGN="LEFT"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>Type/Name</P
></TH
><TH
CLASS="entry"
ALIGN="LEFT"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>Description</P
></TH
></TR
></THEAD
><TBODY
CLASS="tbody"
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>CONSTANT arg_csetid_none (Oracle8)</P
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>Internal Character Set ID. Value = 0. Includes types DATE, NUMBER, ROWID, RAW, and BLOB.</P
></TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>CONSTANT arg_form_none (Oracle8)</P
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>Internal Character Set ID. Value = 0. Includes types DATE, NUMBER, ROWID, RAW, and BLOB.</P
></TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>CONSTANT arg_form_implicit (Oracle8)</P
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>Internal Character Set ID. Value = 1. Includes types CHAR, VARCHAR2, and CLOB.</P
></TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>CONSTANT arg_form_nchar (Oracle8)</P
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>Internal Character Set ID. Value = 2. Includes types NCHAR, NVARCHAR2, and NCLOB.</P
></TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>CONSTANT arg_form_any (Oracle8)</P
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>Internal Character Set ID. Value = 4.</P
></TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>CONSTANT arg_type_num</P
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>Used in arg_type column of def$_args table. Value = 2.</P
></TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>CONSTANT arg_type_char</P
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>Used in arg_type column of def$_args table. Value = 96.</P
></TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>CONSTANT arg_type_varchar2</P
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>Used in arg_type column of def$_args table. Value = 1.</P
></TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>CONSTANT arg_type_date</P
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>Used in arg_type column of def$_args table. Value = 12.</P
></TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>CONSTANT arg_type_rowid</P
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>Used in arg_type column of def$_args table. Value = 11.</P
></TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>CONSTANT arg_type_raw</P
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>Used in arg_type column of def$_args table. Value = 23.</P
></TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>CONSTANT arg_type_blob (Oracle8)</P
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>Used in arg_type column of def$_args table. Value = 113.</P
></TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>CONSTANT arg_type_blob (Oracle8)</P
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>Used in arg_type column of def$_args table. Value = 112.</P
></TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>CONSTANT arg_type_blob (Oracle8)</P
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>Used in arg_type column of def$_args table. Value = 114.</P
></TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>CONSTANT arg_type_blob (Oracle8)</P
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>Used in arg_type column of def$_args table. Value = 115.</P
></TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>CONSTANT repcat_status_normal</P
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>Signals normal successful completion. Value = 0.0.</P
></TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>TYPE node_list_t</P
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>Table of VARCHAR2(128).</P
></TD
></TR
></TBODY
></TABLE
></DIV
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch17-SECT-3.2"
>17.3.2 Basic RPCs</A
></H3
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="ch17-idx-951699-0"
></A
><A
CLASS="indexterm"
NAME="ch17-idx-951699-1"
></A
>The simplest RPC calls use default destinations and take no parameters. The basic procedure for building a parameterless deferred transaction or a deferred remote procedure call is to follow these steps:</P
><OL
CLASS="orderedlist"
><LI
CLASS="listitem"
><P
CLASS="para"
>Call DBMS_DEFER.TRANSACTION (optional).</P
></LI
><LI
CLASS="listitem"
><P
CLASS="para"
>Make one or more calls to DBMS_DEFER.CALL.</P
></LI
><LI
CLASS="listitem"
><P
CLASS="para"
>Issue a COMMIT with DBMS_DEFER.COMMIT_WORK.</P
></LI
></OL
><P
CLASS="para"
>The following sections describe in some detail how these procedures work. Later sections describe more complex RPC calls.</P
><DIV
CLASS="sect3"
><H4
CLASS="sect3"
><A
CLASS="title"
NAME="ch17-SECT-3.2.1"
>17.3.2.1 The DBMS_DEFER.TRANSACTION procedure</A
></H4
><P
CLASS="para"
>The <A
CLASS="indexterm"
NAME="ch17-idx-951700-0"
></A
><A
CLASS="indexterm"
NAME="ch17-idx-951700-1"
></A
><A
CLASS="indexterm"
NAME="ch17-idx-951700-2"
></A
>TRANSACTION procedure allows you to specify destination sites for the ensuing call(s) to the DBMS_DEFER.CALL procedure. There are two main reasons why you might wish to identify destinations this way:</P
><UL
CLASS="itemizedlist"
><LI
CLASS="listitem"
><P
CLASS="para"
>You might wish to override the destinations in the DBA_REPSITES data dictionary view.</P
></LI
><LI
CLASS="listitem"
><P
CLASS="para"
>You might be making several calls to DBMS_DEFER.CALL and not wish to specify the destinations in the nodes parameter individually each time.</P
></LI
></UL
><P
CLASS="para"
>The TRANSACTION procedure is overloaded such that the nodes parameter is optional. You can specify either,</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>PROCEDURE DBMS_DEFER.TRANSACTION;</PRE
></BLOCKQUOTE
><P
CLASS="para"
>or:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>PROCEDURE DBMS_DEFER.TRANSACTION
   (nodes IN node_list_t);</PRE
></BLOCKQUOTE
><P
CLASS="para"
>If specified, nodes is a PL/SQL table containing the list of nodes that should receive the RPC call. If you do not specify the nodes parameter, the ensuing call(s) to DBMS_DEFER.CALL will queue the calls to destinations in DEFDEFAULTDEST. If you do specify the nodes parameter, you must populate it with the global name of target destinations.</P
><DIV
CLASS="sect4"
><H4
CLASS="sect4"
><A
CLASS="title"
NAME="AUTOID-40947"
>17.3.2.1.1 Exceptions</A
></H4
><P
CLASS="para"
>DBMS_DEFER.TRANSACTION may raise the following exceptions:</P
><TABLE
CLASS="informaltable"
BORDER="1"
CELLPADDING="3"
><THEAD
CLASS="thead"
><TR
CLASS="row"
VALIGN="TOP"
><TH
CLASS="entry"
ALIGN="LEFT"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>Name</P
></TH
><TH
CLASS="entry"
ALIGN="LEFT"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>Number</P
></TH
><TH
CLASS="entry"
ALIGN="LEFT"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>Description</P
></TH
></TR
></THEAD
><TBODY
CLASS="tbody"
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>malformedcall</P
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>-23304</P
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>Transaction is not properly formed, or transaction terminated</P
></TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>ORA-23319</P
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>-23319</P
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>Parameter value is not appropriate</P
></TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>ORA-23352</P
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>-23352</P
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>node_list_t contains duplicates</P
></TD
></TR
></TBODY
></TABLE
></DIV
><DIV
CLASS="sect4"
><H4
CLASS="sect4"
><A
CLASS="title"
NAME="AUTOID-40985"
>17.3.2.1.2 Restrictions</A
></H4
><P
CLASS="para"
>You can call the TRANSACTION procedure only in conjunction with DBMS_DEFER.CALL.</P
></DIV
><DIV
CLASS="sect4"
><H4
CLASS="sect4"
><A
CLASS="title"
NAME="AUTOID-40988"
>17.3.2.1.3 Example</A
></H4
><P
CLASS="para"
>At the end of the DBMS_DEFER section (in the COMMIT_ WORK subsection) is an example that incorporates the TRANSACTION procedure and the other DBMS_DEFER <A
CLASS="indexterm"
NAME="ch17-idx-951702-0"
></A
><A
CLASS="indexterm"
NAME="ch17-idx-951702-1"
></A
><A
CLASS="indexterm"
NAME="ch17-idx-951702-2"
></A
>procedures.</P
></DIV
></DIV
><DIV
CLASS="sect3"
><H4
CLASS="sect3"
><A
CLASS="title"
NAME="ch17-SECT-3.2.2"
>17.3.2.2 The DBMS_DEFER.CALL procedure</A
></H4
><P
CLASS="para"
>The <A
CLASS="indexterm"
NAME="ch17-idx-951704-0"
></A
><A
CLASS="indexterm"
NAME="ch17-idx-951704-1"
></A
>CALL procedure queues a call to the destination specified in the DEFDEFAULTDEST data dictionary view. Here is the specification:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>PROCEDURE DBMS_DEFER.CALL
  (schema_name IN VARCHAR2,
   package_name IN VARCHAR2,
   proc_name IN VARCHAR2,
   arg_count IN NATURAL,
   {group_name IN VARCHAR2 := ''| 
   nodes IN node_list_t});</PRE
></BLOCKQUOTE
><P
CLASS="para"
>Parameters are summarized in the following table.</P
><TABLE
CLASS="informaltable"
BORDER="1"
CELLPADDING="3"
><THEAD
CLASS="thead"
><TR
CLASS="row"
VALIGN="TOP"
><TH
CLASS="entry"
ALIGN="LEFT"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>Name</P
></TH
><TH
CLASS="entry"
ALIGN="LEFT"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>Description</P
></TH
></TR
></THEAD
><TBODY
CLASS="tbody"
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>package_name</P
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>Name of the package containing the procedure that is being queued.</P
></TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>proc_name</P
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>Name of the procedure being queued.</P
></TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>arg_count</P
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>Number of parameters being passed to the procedure. You must have one call to DBMS_DEFER.&lt;datatype&gt;_ARG for each parameter.</P
></TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>group_name</P
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>Optional. Reserved for internal use.</P
></TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>nodes</P
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>Optional. List of destination nodes (global_names) where the procedure is to be executed. If nodes is not specified, destinations are determined by the list passed to DBMS_DEFER.TRANSACTION.</P
></TD
></TR
></TBODY
></TABLE
><DIV
CLASS="sect4"
><H4
CLASS="sect4"
><A
CLASS="title"
NAME="AUTOID-41040"
>17.3.2.2.1 Exceptions</A
></H4
><P
CLASS="para"
>The CALL procedure may raise the following exceptions:</P
><TABLE
CLASS="informaltable"
BORDER="1"
CELLPADDING="3"
><THEAD
CLASS="thead"
><TR
CLASS="row"
VALIGN="TOP"
><TH
CLASS="entry"
ALIGN="LEFT"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>Name</P
></TH
><TH
CLASS="entry"
ALIGN="LEFT"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>Number</P
></TH
><TH
CLASS="entry"
ALIGN="LEFT"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>Description</P
></TH
></TR
></THEAD
><TBODY
CLASS="tbody"
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>malformedcall</P
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>-23304</P
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>Number of arguments in call does not match value of arg_count</P
></TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>ORA-23319</P
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>-23319</P
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>The parameter is either NULL, misspelled, or not allowed</P
></TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>ORA-23352</P
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>-23352</P
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>The nodes list contains a duplicate</P
></TD
></TR
></TBODY
></TABLE
></DIV
><DIV
CLASS="sect4"
><H4
CLASS="sect4"
><A
CLASS="title"
NAME="AUTOID-41078"
>17.3.2.2.2 Restrictions</A
></H4
><P
CLASS="para"
>The procedures used in deferred RPC calls must be part of a package; it is not possible to queue <A
CLASS="indexterm"
NAME="ch17-idx-951708-0"
></A
>standalone procedures.</P
></DIV
><DIV
CLASS="sect4"
><H4
CLASS="sect4"
><A
CLASS="title"
NAME="AUTOID-41083"
>17.3.2.2.3 Example</A
></H4
><P
CLASS="para"
>At the end of the DBMS_DEFER section (in the COMMIT_WORK subsection) is an example that incorporates the CALL procedure and the other DBMS_DEFER procedures.</P
><P
CLASS="para"
>For an additional example, see the <I
CLASS="filename"
>defcall.sql</I
><A
CLASS="indexterm"
NAME="ch17-idx-952625-0"
></A
> file on the companion disk. The example lists all entries in the deferred call queue (DEFCALL), including the originating database and the package <A
CLASS="indexterm"
NAME="ch17-idx-951706-0"
></A
><A
CLASS="indexterm"
NAME="ch17-idx-951706-1"
></A
>name.</P
></DIV
></DIV
><DIV
CLASS="sect3"
><H4
CLASS="sect3"
><A
CLASS="title"
NAME="ch17-SECT-3.2.3"
>17.3.2.3 The DBMS_DEFER.COMMIT_WORK procedure</A
></H4
><P
CLASS="para"
>The <A
CLASS="indexterm"
NAME="ch17-idx-951709-0"
></A
><A
CLASS="indexterm"
NAME="ch17-idx-951709-1"
></A
><A
CLASS="indexterm"
NAME="ch17-idx-951709-2"
></A
>COMMIT_WORK procedure issues a COMMIT command to commit the transaction constructed by the preceding TRANSACTION and CALL procedures. The specification is,</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>PROCEDURE DBMS_DEFER.COMMIT_WORK
   (commit_work_comment IN VARCHAR2);</PRE
></BLOCKQUOTE
><P
CLASS="para"
>where commit_work_comment is a description of the transaction. The comment may be up to 50 characters.</P
><P
CLASS="para"
>There are no restrictions on calling COMMIT_WORK.</P
><DIV
CLASS="sect4"
><H4
CLASS="sect4"
><A
CLASS="title"
NAME="AUTOID-41106"
>17.3.2.3.1 Exceptions</A
></H4
><P
CLASS="para"
>The COMMIT_WORK procedure may raise the following <A
CLASS="indexterm"
NAME="ch17-idx-951711-0"
></A
><A
CLASS="indexterm"
NAME="ch17-idx-951711-1"
></A
><A
CLASS="indexterm"
NAME="ch17-idx-951711-2"
></A
>exception:</P
><TABLE
CLASS="informaltable"
BORDER="1"
CELLPADDING="3"
><THEAD
CLASS="thead"
><TR
CLASS="row"
VALIGN="TOP"
><TH
CLASS="entry"
ALIGN="LEFT"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>Name</P
></TH
><TH
CLASS="entry"
ALIGN="LEFT"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>Number</P
></TH
><TH
CLASS="entry"
ALIGN="LEFT"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>Description</P
></TH
></TR
></THEAD
><TBODY
CLASS="tbody"
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>malformedcall</P
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>-23304</P
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>Number of arguments in the CALL procedure does not match value arg_count; or missing calls to the &lt;datatype&gt;_ARG procedure, or the TRANSACTION procedure was not called for this transaction</P
></TD
></TR
></TBODY
></TABLE
></DIV
><DIV
CLASS="sect4"
><H4
CLASS="sect4"
><A
CLASS="title"
NAME="AUTOID-41133"
>17.3.2.3.2 Example: </A
></H4
><P
CLASS="para"
>The DBMS_DEFER.TRANSACTION, CALL, &lt;datatype&gt;_ARG, and COMMIT_WORK procedures work together to construct a deferred transaction or deferred RPC call, as described in the following examples.</P
></DIV
><DIV
CLASS="sect4"
><H4
CLASS="sect4"
><A
CLASS="title"
NAME="AUTOID-41136"
>17.3.2.3.3 Using DBMS_DEFER.TRANSACTION</A
></H4
><P
CLASS="para"
>To illustrate the way that you might use the TRANSACTION procedure, consider the following example. The schema SPROCKET has a package called PriceMaint, which contains procedure TenPctIncrease. This package exists at all sites in the DEFDEFAULTDEST data dictionary view. The TenPctIncrease procedure increases the wholesale and retail prices of products in our PRICES table by 10%.</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>CREATE OR REPLACE PACKAGE PriceMaint IS
        PROCEDURE TenPctIncrease;
END PriceMaint;  
/</PRE
></BLOCKQUOTE
><BLOCKQUOTE
><PRE
CLASS="programlisting"
></PRE
></BLOCKQUOTE
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>CREATE OR REPLACE PACKAGE BODY PriceMaint IS
	PROCEDURE TenPctIncrease IS
	BEGIN
	        UPDATE  prices   
	        SET     price_wholesale	= price_wholesale * 1.10,
	                price_retail	  = price_retail * 1.10;
	END TenPctIncrease;  
END PriceMaint;</PRE
></BLOCKQUOTE
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>	/</PRE
></BLOCKQUOTE
><P
CLASS="para"
>Now, suppose that we wish to make a 10% price increase at all of our locations (i.e., all locations in the DEFDEFAULTDEST data dictionary view). We could create a procedure that queues a call to PriceMaint.TenPctIncrease to all of these sites. In this case, we issue the TRANSACTION call without parameters:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>CREATE OR REPLACE PROCEDURE TenPctPriceHike IS
BEGIN
	DBMS_DEFER.TRANSACTION;
	DBMS_DEFER.CALL(	schema_name	=&gt; 'SPROCKET',
				package_name	=&gt; 'PRICEMAINT',
				proc_name	=&gt; 'TENPCTINCREASE'
				arg_count	=&gt; 0 );
	DBMS_DEFER.COMMIT_WORK(commit_work_comment=&gt;'No nodes or args needed');
END;</PRE
></BLOCKQUOTE
><P
CLASS="para"
>Because the nodes parameter isn't specified in either the call to TRANSACTION or the call to CALL, Oracle resolves the destinations by using all sites in the DEFDEFAULTDEST data dictionary view.</P
><P
CLASS="para"
>Here is how you might use the TenPctPriceHike Procedure.</P
><P
CLASS="para"
>Confirm the default destinations:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>SQL&gt; SELECT * FROM defdefaultdest;
DBLINK
--------------------
D7NY.BIGWHEEL.COM
D7OH.BIGWHEEL.COM
D7OR.BIGWHEEL.COM
D7WA.BIGWHEEL.COM
D7TX.BIGWHEEL.COM

5 rows selected.</PRE
></BLOCKQUOTE
><P
CLASS="para"
>Now use TenPctPriceHike to queue the RPC to all five destinations:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>SQL&gt; EXECUTE TenPctPriceHike

PL/SQL procedure successfully completed.
</PRE
></BLOCKQUOTE
><P
CLASS="para"
>Figure 17-1 <A
CLASS="indexterm"
NAME="ch17-idx-951748-0"
></A
>graphically illustrates how a deferred call is queued.</P
><H4
CLASS="figure"
><A
CLASS="title"
NAME="ch17-TABLE-41"
>Figure 17.1: Queueing up a deferred call to TenPctIncrease</A
></H4
><IMG
CLASS="graphic"
SRC="figs/obip.1701.gif"
ALT="Figure 17.1"><P
CLASS="para"
>Now check the entries in DEFTRAN (this call was made from D7CA. BIGWHEEL.COM):</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>SQL&gt; select * from deftrandest;

DEFERRED_TRAN_ID	DEFERRED_TRAN_DB	 DBLINK
----------------------	-----------------	 --------------------
2.44.13			D7CA.BIGWHEEL.COM	 D7NY.BIGWHEEL.COM
2.44.13			D7CA.BIGWHEEL.COM	 D7OH.BIGWHEEL.COM
2.44.13			D7CA.BIGWHEEL.COM	 D7OR.BIGWHEEL.COM
2.44.13			D7CA.BIGWHEEL.COM	 D7WA.BIGWHEEL.COM
2.44.13			D7CA.BIGWHEEL.COM	 D7TX.BIGWHEEL.COM

5 rows selected.</PRE
></BLOCKQUOTE
><P
CLASS="para"
>For an additional example, see the <I
CLASS="filename"
>deftdest.sql</I
><A
CLASS="indexterm"
NAME="ch17-idx-951749-0"
></A
> file on the companion disk. The example queries the DEFTRANDEST data dictionary view and lists destination databases for deferred RPC calls.</P
><BLOCKQUOTE
CLASS="note"
><P
CLASS="para"
><STRONG
>NOTE:</STRONG
> Procedure TenPctPriceHike queues the deferred RPC only if the owner of the procedure has EXECUTE privileges on DBMS_DEFER.</P
></BLOCKQUOTE
></DIV
><DIV
CLASS="sect4"
><H4
CLASS="sect4"
><A
CLASS="title"
NAME="AUTOID-41166"
>17.3.2.3.4 Specifying nondefault destinations with TRANSACTION</A
></H4
><P
CLASS="para"
>What if we wanted to apply the 10% price hike only to our West Coast sites (i.e., D7CA.BIGWHEEL.COM, D7OR.BIGWHEEL.COM, and D7WA.BIGWHEEL.COM)? The following example does just that by specifying the nodes parameter in the TRANSACTION procedure:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>CREATE OR REPLACE PROCEDURE TenPctPriceHikeWest IS
vNodes DBMS_DEFER.NODE_LIST_T;
BEGIN
	vNodes(1) := 'D7CA.BIGWHEEL.COM';
	vNodes(2) := 'D7OR.BIGWHEEL.COM';
	vNodes(3) := 'D7WA.BIGWHEEL.COM';

	DBMS_DEFER.TRANSACTION( vNodes );
	DBMS_DEFER.CALL(	schema_name	=&gt; 'SPROCKET',
				package_name	=&gt; 'PRICEMAINT',
				proc_name	=&gt; 'TENPCTINCREASE'
				arg_count	=&gt; 0 );
	DBMS_DEFER.COMMIT_WORK(commit_work_comment=&gt;'West Coast Price Hike');
END;</PRE
></BLOCKQUOTE
></DIV
><DIV
CLASS="sect4"
><H4
CLASS="sect4"
><A
CLASS="title"
NAME="AUTOID-41170"
>17.3.2.3.5 <A
CLASS="indexterm"
NAME="ch17-idx-951751-0"
></A
><A
CLASS="indexterm"
NAME="ch17-idx-951751-1"
></A
>Committing deferred RPC calls with COMMIT_WORK</A
></H4
><P
CLASS="para"
>Notice that the last two examples include a call to DBMS_DEFER.COMMIT_WORK. All deferred RPCs queued with the CALL procedure <EM
CLASS="emphasis"
>must</EM
> be followed by a call to COMMIT_WORK; an explicit COMMIT or COMMIT WORK is not sufficient. The reason for this restriction is that COMMIT_WORK not only commits the transaction, but also updates the commit_comment and delivery_order field in the DEFTRANS data dictionary view. The commit_comment is updated with the optional string passed to COMMIT_WORK, and the delivery_order field is updated with the transaction's SCN. </P
><P
CLASS="para"
>Remember that the TRANSACTION procedure is not required to queue deferred calls. It is used only to specify destinations. The real power and flexibility of deferred transactions is in the CALL procedure.</P
><P
CLASS="para"
>For an additional example, see the <I
CLASS="filename"
>defcdest.sql</I
><A
CLASS="indexterm"
NAME="ch17-idx-951753-0"
></A
> file on the companion disk. The example queries the DEFCALLDEST data dictionary view and lists the destination databases of all calls in the deferred call <A
CLASS="indexterm"
NAME="ch17-idx-951765-0"
></A
><A
CLASS="indexterm"
NAME="ch17-idx-951765-1"
></A
>queue.</P
></DIV
></DIV
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch17-SECT-3.3"
>17.3.3 Parameterized RPCs</A
></H3
><P
CLASS="para"
>The <A
CLASS="indexterm"
NAME="ch17-idx-951783-0"
></A
><A
CLASS="indexterm"
NAME="ch17-idx-951783-1"
></A
>preceding sections describe the simple version of building deferred RPCs with the DBMS_DEFER package. We saw in those sections that the DBMS_DEFER.CALL procedure is the program that actually queues deferred RPCs. Most of the examples we have seen so far use it in its simplest incarnation, without the nodes parameter and with an arg_count parameter of 0. This is fine when making deferred calls to procedures that take no parameters, and when the default destinations are acceptable, but sooner or later you will want to defer calls to procedures that require parameters, and you will want to specify the destinations for each call individually. The steps to accomplish these more complex operations follow:</P
><OL
CLASS="orderedlist"
><LI
CLASS="listitem"
><P
CLASS="para"
>Specify the destination nodes, either with DBMS_CALL.TRANSACTION or by supplying the nodes parameter to DBMS_DEFER.CALL.</P
></LI
><LI
CLASS="listitem"
><P
CLASS="para"
>Execute DBMS_DEFER.CALL, supplying the schema name, package name, procedure name, number of arguments to the procedure, and (if you do not use DBMS_CALL.TRANSACTION) the nodes parameter.</P
></LI
><LI
CLASS="listitem"
><P
CLASS="para"
>Call DBMS_DEFER.&lt;datatype&gt;_arg arg_count times, where arg_count is the value passed to DBMS_DEFER.CALL. The order in which you call DBMS_DEFER.&lt;datatype&gt;_arg must be the same order as the parameters are listed in the procedure definition.</P
></LI
><LI
CLASS="listitem"
><P
CLASS="para"
>Call DBMS_DEFER.COMMIT_WORK with an optional comment.</P
></LI
></OL
><DIV
CLASS="sect3"
><H4
CLASS="sect3"
><A
CLASS="title"
NAME="ch17-SECT-3.3.1"
>17.3.3.1 The DBMS_DEFER.<A
CLASS="indexterm"
NAME="ch17-idx-951760-0"
></A
><A
CLASS="indexterm"
NAME="ch17-idx-951760-1"
></A
><A
CLASS="indexterm"
NAME="ch17-idx-951760-2"
></A
>&lt;datatype&gt;_ARG procedure</A
></H4
><P
CLASS="para"
>This procedure specifies an argument for a deferred call. The argument is of the datatype specified in &lt;datatype&gt;. Here is the specification:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>PROCEDURE DBMS_DEFER.&lt;datatype&gt;ARG (arg IN &lt;datatype&gt;. 
</PRE
></BLOCKQUOTE
><P
CLASS="para"
> specifications differ for different datatypes, depending on whether you are using Oracle7 or Oracle8. &lt;datatype&gt; can be one of the following:</P
><TABLE
CLASS="simplelist"
BORDER="0"
><TR
><TD
CLASS="member"
>NUMBER</TD
></TR
><TR
><TD
CLASS="member"
>DATE</TD
></TR
><TR
><TD
CLASS="member"
>VARCHAR2</TD
></TR
><TR
><TD
CLASS="member"
>CHAR</TD
></TR
><TR
><TD
CLASS="member"
>ROWID</TD
></TR
><TR
><TD
CLASS="member"
>RAW</TD
></TR
><TR
><TD
CLASS="member"
>NVARCHAR2 (Oracle8 only)</TD
></TR
><TR
><TD
CLASS="member"
>ANY_VARCHAR2 (Oracle8 only)</TD
></TR
><TR
><TD
CLASS="member"
>NCHAR (Oracle8 only)</TD
></TR
><TR
><TD
CLASS="member"
>ANY_CHAR (Oracle8 only)</TD
></TR
><TR
><TD
CLASS="member"
>BLOB (Oracle8 only)</TD
></TR
><TR
><TD
CLASS="member"
>CLOB (Oracle8 only)</TD
></TR
><TR
><TD
CLASS="member"
>ANY_CLOB (Oracle8 only)</TD
></TR
><TR
><TD
CLASS="member"
>NCLOB (Oracle8 only)</TD
></TR
></TABLE
><P
CLASS="para"
>The arg parameter is the value to pass to the parameter of the same datatype in the procedure previously queued via DBMS_DEFER.CALL. </P
><P
CLASS="para"
>The various alternatives are listed here.</P
><P
CLASS="para"
>The following specifications apply to both Oracle7 and Oracle8:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>PROCEDURE <A
CLASS="indexterm"
NAME="ch17-idx-951856-0"
></A
>NUMBER_ARG (arg IN NUMBER);
PROCEDURE <A
CLASS="indexterm"
NAME="ch17-idx-951857-0"
></A
>DATE_ARG (arg IN DATE);
PROCEDURE<A
CLASS="indexterm"
NAME="ch17-idx-951858-0"
></A
> VARCHAR2_ARG (arg IN VARCHAR2);
PROCEDURE<A
CLASS="indexterm"
NAME="ch17-idx-951859-0"
></A
> CHAR_ARG (arg IN CHAR);
PROCEDURE <A
CLASS="indexterm"
NAME="ch17-idx-951860-0"
></A
>ROWID_ARG (arg IN ROWID);
PROCEDURE<A
CLASS="indexterm"
NAME="ch17-idx-951861-0"
></A
> RAW_ARG (arg IN raw);</PRE
></BLOCKQUOTE
><P
CLASS="para"
>These specifications apply only to Oracle8:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>PROCEDURE <A
CLASS="indexterm"
NAME="ch17-idx-951862-0"
></A
>NVARCHAR2_ARG (arg IN NVARCHAR2);
PROCEDURE <A
CLASS="indexterm"
NAME="ch17-idx-951863-0"
></A
>ANY_VARCHAR2_ARG (arg  IN VARCHAR2 CHARACTER SET ANY_CS);
PROCEDURE <A
CLASS="indexterm"
NAME="ch17-idx-951864-0"
></A
>NCHAR_ARG (arg IN NCHAR);
PROCEDURE <A
CLASS="indexterm"
NAME="ch17-idx-951865-0"
></A
>ANY_CHAR_ARG (arg IN CHAR CHARACTER SET ANY_CS);
PROCEDURE <A
CLASS="indexterm"
NAME="ch17-idx-951866-0"
></A
>BLOB_ARG (arg IN BLOB);
PROCEDURE <A
CLASS="indexterm"
NAME="ch17-idx-951867-0"
></A
>CLOB_ARG (arg IN CLOB);
PROCEDURE <A
CLASS="indexterm"
NAME="ch17-idx-951868-0"
></A
>ANY_CLOB_ARG (arg IN CLOB CHARACTER SET ANY_CS);
PROCEDURE <A
CLASS="indexterm"
NAME="ch17-idx-951869-0"
></A
>NCLOB_ARG (arg IN NCLOB);</PRE
></BLOCKQUOTE
><DIV
CLASS="sect4"
><H4
CLASS="sect4"
><A
CLASS="title"
NAME="AUTOID-41269"
>17.3.3.1.1 Exceptions</A
></H4
><P
CLASS="para"
>This procedure may raise the following exception:</P
><TABLE
CLASS="informaltable"
BORDER="1"
CELLPADDING="3"
><THEAD
CLASS="thead"
><TR
CLASS="row"
VALIGN="TOP"
><TH
CLASS="entry"
ALIGN="LEFT"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>Name</P
></TH
><TH
CLASS="entry"
ALIGN="LEFT"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>Number</P
></TH
><TH
CLASS="entry"
ALIGN="LEFT"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>Description</P
></TH
></TR
></THEAD
><TBODY
CLASS="tbody"
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>paramlen_num</P
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>-23323</P
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>Parameter is too long</P
></TD
></TR
></TBODY
></TABLE
></DIV
><DIV
CLASS="sect4"
><H4
CLASS="sect4"
><A
CLASS="title"
NAME="AUTOID-41293"
>17.3.3.1.2 Example</A
></H4
><P
CLASS="para"
>The following scenario describes how to perform the steps required to construct a deferred RPC that takes parameters.</P
><P
CLASS="para"
>Suppose that we have a PRODUCTS table and a procedure that adds new products to it, as follows:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>SQL&gt; desc products
 Name			Null?	  		Type
 -------------------	-------- 		----
 PRODUCT_ID		NOT NULL 		NUMBER(9)
 PRODUCT_TYPE		NOT NULL 		NUMBER(6)
 CATALOG_ID	 	NOT NULL 		VARCHAR2(15)
 DESCRIPTION	 	NOT NULL 		VARCHAR2(30)
 REV_LEVEL 		NOT NULL 		VARCHAR2(15)
 PRODUCTION_DATE 	NOT NULL 		DATE
 PRODUCTION_STATUS 	NOT NULL 		VARCHAR2(10)
 AUDIT_DATE 		NOT NULL 		DATE
 AUDIT_USER 		NOT NULL 		VARCHAR2(30)
 GLOBAL_NAME 		NOT NULL 		VARCHAR2(20)</PRE
></BLOCKQUOTE
><P
CLASS="para"
>Procedure ProductMaint.AddProduct populates this table. We will queue deferred calls to the this procedure.</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>CREATE OR REPLACE PACKAGE ProductMaint IS
	PROCEDURE AddProduct(product_type_ININ NUMBER,
			catalog_id_IN	IN VARCHAR2,
			description_IN	IN VARCHAR2,
			rev_level_IN	IN VARCHAR2,
			production_date_ININ DATE,
			product_status_ININ VARCHAR);
END ProductMaint;  
/ 
CREATE OR REPLACE PACKAGE BODY ProductMaint IS

PROCEDURE AddProduct(product_type_ININ NUMBER,
			catalog_id_IN		IN VARCHAR2,
			description_IN		IN VARCHAR2,
			rev_level_IN		IN VARCHAR2,
			production_date_IN	IN DATE,
			product_status_IN	IN VARCHAR) IS
BEGIN

	INSERT INTO products (product_id,
		    product_type,
		    catalog_id,
		    description,
		    rev_level,
		    production_date,
		    production_status,
		    audit_date,
		    audit_user,
		    global_name )
	VALUES (seq_products.nextval,
		product_type_IN,
		catalog_id_IN,
		description_IN,
		rev_level_IN,
		production_date_IN,
		product_status_IN,
		SYSDATE,
		USER,
		DBMS_REPUTIL.GLOBAL_NAME);
END AddProduct;  </PRE
></BLOCKQUOTE
><BLOCKQUOTE
><PRE
CLASS="programlisting"
></PRE
></BLOCKQUOTE
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>END ProductMaint;  </PRE
></BLOCKQUOTE
><P
CLASS="para"
>Since the procedure ProductMaint.AddProduct accepts parameters, we must supply values for these parameters when building a deferred call. The following procedure does just that:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>CREATE OR REPLACE PROCEDURE qAddProduct IS
vNodes	DBMS_DEFER.NODE_LIST_T;
BEGIN
---------------------------------------------------------------------------
-- 1. Specify the nodes to which the deferred RPC call is to be queued.
---------------------------------------------------------------------------
	vNodes(1) := 'D7NY.BIGWHEEL.COM';
	vNodes(2) := 'D7OH.BIGWHEEL.COM';
	vNodes(3) := 'D7OR.BIGWHEEL.COM';
	vNodes(4) := 'D7WA.BIGWHEEL.COM';
	vNodes(5) := 'D7TX.BIGWHEEL.COM';

---------------------------------------------------------------------------
-- 2. Execute DBMS_DEFER.CALL, supplying the schema name, package name,
--    procedure name, number of arguments to the procedure, and (if you do
--    not use DBMS_CALL.TRANSACTION) the nodes parameter.
---------------------------------------------------------------------------

	DBMS_DEFER.CALL(schema_name	=&gt; 'SPROCKET',
			package_name	=&gt; 'PRODUCTMAINT',
			proc_name	=&gt; 'AddProduct',
			arg_count	=&gt; 6,
			nodes		=&gt; vNodes );

---------------------------------------------------------------------------
-- 3. Call DBMS_DEFER.&lt;datatype&gt;_arg arg_count times, where arg_count is
--     the value passed to DBMS_DEFER.CALL.  The order in which you call
--     DBMS_DEFER.&lt;datatype&gt;_arg must be the same order as the parameters
--     are listed in the procedure definition.
---------------------------------------------------------------------------

	DBMS_DEFER.NUMBER_ARG( 10 );				     -- product_type
	  DBMS_DEFER.VARCHAR2_ARG( 'BIKE-0018' );	             -- catalog_id
	  DBMS_DEFER.VARCHAR2_ARG( 'Mens 18 Speed Racer');           -- Description
	  DBMS_DEFER.VARCHAR2_ARG( '19971031-01' );	             -- Rev Level
	  DBMS_DEFER.DATE_ARG(to_date('31-OCT-1997','DD-MON-YYYY')); --Date
	  DBMS_DEFER.VARCHAR2_ARG( 'PLANNED' );	                     -- status

---------------------------------------------------------------------------
-- 4. Call DBMS_DEFER.COMMIT_WORK with an optional comment.
---------------------------------------------------------------------------
	DBMS_DEFER.COMMIT_WORK(commit_work_comment=&gt;'5 Nodes, 6 args');
END;</PRE
></BLOCKQUOTE
><P
CLASS="para"
>Let's see what happens when we execute AddProduct:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>SQL&gt; execute qAddProduct

PL/SQL procedure successfully completed.</PRE
></BLOCKQUOTE
><P
CLASS="para"
>Note that even though this deferred RPC call is destined for five different databases, there is only one entry in DEFCALL:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>SQL&gt; SELECT		callno,
2  deferred_tran_db,
3  deferred_tran_id,
4  schemaname,
5  packagename,
6  procname,
7  argcount
8  FROM			defcall
9 /

               Deferred           Deferred
               Tran               Tran       Schema     Package     Procedure Arg
Call No        DB                 ID         Name       Name        Name      Count
------------   ------------------ --------------------- ----------- -------------
6631429922096  D7CA.BIGWHEEL.COM  2.125.13   SPROCKET   PRODUCTMAINTAddProduct6</PRE
></BLOCKQUOTE
><P
CLASS="para"
>The DEFTRANDEST data dictionary view, on the other hand, includes all of the destinations for this call:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
> SQL&gt;  SELECT	deferred_tran_id,
  2  	deferred_tran_db,
  3  	dblink
  4  FROM		deftrandest
  5  /
Deferred Deferred
Tran	 Tran
ID	 DB		       DB Link
-------- ------------------- --------------------
2.125.13 D7CA.BIGWHEEL.COM   D7NY.BIGWHEEL.COM
2.125.13 D7CA.BIGWHEEL.COM   D7OH.BIGWHEEL.COM
2.125.13 D7CA.BIGWHEEL.COM   D7OR.BIGWHEEL.COM
2.125.13 D7CA.BIGWHEEL.COM   D7WA.BIGWHEEL.COM
2.125.13 D7CA.BIGWHEEL.COM   D7TX.BIGWHEEL.COM

5 <A
CLASS="indexterm"
NAME="ch17-idx-951762-0"
></A
><A
CLASS="indexterm"
NAME="ch17-idx-951762-1"
></A
>rows <A
CLASS="indexterm"
NAME="ch17-idx-951689-0"
></A
>selected.</PRE
></BLOCKQUOTE
></DIV
></DIV
></DIV
></DIV
><DIV
CLASS="htmlnav"
><P
></P
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch17_02.htm#ch17-SECT-2.1.1"
TITLE="17.2 DBMS_DEFER_SYS: Managing Deferred Transactions"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 17.2 DBMS_DEFER_SYS: Managing Deferred Transactions"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="book"
HREF="index.htm"
TITLE="Oracle Built-in Packages"
><IMG
SRC="../gifs/txthome.gif"
ALT="Oracle Built-in Packages"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch17_04.htm#ch17-SECT-4.1.1"
TITLE="17.4 DBMS_DEFER_QUERY: Performing Diagnostics and Maintenance"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 17.4 DBMS_DEFER_QUERY: Performing Diagnostics and Maintenance"
BORDER="0"></A
></TD
></TR
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
>17.2 DBMS_DEFER_SYS: Managing Deferred Transactions</TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="index"
HREF="index/idx_0.htm"
TITLE="Book Index"
><IMG
SRC="../gifs/index.gif"
ALT="Book Index"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
>17.4 DBMS_DEFER_QUERY: Performing Diagnostics and Maintenance</TD
></TR
></TABLE
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"></DIV
><IMG SRC="../gifs/smnavbar.gif"
USEMAP="#map"
BORDER="0"
ALT="The Oracle Library Navigation">

<P><font size="-1">
<a href="../copyrght.htm#copy">Copyright (c) 2000</a> O'Reilly &amp; Associates. All rights reserved.
</font></P>

<MAP NAME="map">

<AREA SHAPE="RECT"
COORDS="0,0,35,30"
HREF="../index.htm"
ALT="Library Home">

<AREA SHAPE="RECT"
COORDS="40,0,95,30"
HREF="../prog2/index.htm"
ALT="Oracle PL/SQL Programming, 2nd. Ed.">

<AREA SHAPE="RECT"
COORDS="100,0,200,30"
HREF="../guide8i/index.htm"
ALT="Guide to Oracle 8i Features">

<AREA SHAPE="RECT"
COORDS="205,0,245,30"
HREF="index.htm"
ALT="Oracle Built-in Packages">

<AREA SHAPE="RECT"
COORDS="250,0,320,30"
HREF="../advprog/index.htm"
ALT="Advanced PL/SQL Programming with Packages">

<AREA SHAPE="RECT"
COORDS="325,0,420,30"
HREF="../webapp/index.htm"
ALT="Oracle Web Applications">

<AREA SHAPE="RECT"
COORDS="425,0,490,30"
HREF="../langpkt/index.htm"
ALT="Oracle PL/SQL Language Pocket Reference">

<AREA SHAPE="RECT"
COORDS="495,0,570,30"
HREF="../bipkt/index.htm"
ALT="Oracle PL/SQL Built-ins Pocket Reference">
</MAP>

</BODY
>
<!-- Mirrored from liso.cs.pusan.ac.kr by HTTrack Website Copier/3.x [XR&CO'2001] -->
</HTML
>
