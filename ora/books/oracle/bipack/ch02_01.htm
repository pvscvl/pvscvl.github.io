<HTML
><HEAD
><TITLE
>[Chapter 2] Executing Dynamic SQL and PL/SQL</TITLE
><META
NAME="DC.Creator"
CONTENT="Steven Feuerstein, Charles Dye &amp; John Beresniewicz"><META
NAME="DC.Date"
CONTENT="2000-04-29T17:44:23Z"><META
NAME="DC.Format"
CONTENT="text/html"
SCHEME="MIME"><META
NAME="DC.Identifier"
CONTENT="O'Reilly and Associates-1-56592-375-8E"><META
NAME="DC.Language"
CONTENT="en-US"><META
NAME="DC.Publisher"
CONTENT="O'Reilly &amp; Associates, Inc."><META
NAME="DC.Source"
CONTENT="1-56592-375-8E"
SCHEME="ISBN"><META
NAME="DC.Subject.Keyword"
CONTENT="Oracle Packages"><META
NAME="DC.Title"
CONTENT="Oracle Built-in Packages"><META
NAME="DC.Type"
CONTENT="Text.Monograph"><META
NAME="generator"
CONTENT="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><LINK
REL="stylesheet"
TYPE="text/css"
HREF="../style/style1.css"><LINK
REV="made"
HREF="mailto:online-books@oreilly.com"
TITLE="Online Books Comments"><LINK
REL="up"
HREF="part02.htm"
TITLE="II. Application Development Packages"><LINK
REL="prev"
HREF="part02.htm"
TITLE="II. Application Development Packages"><LINK
REL="next"
HREF="ch02_02.htm#ch02-SECT-2.3"
TITLE="2.2 Getting Started with DBMS_SQL"></HEAD
><BODY
><DIV
CLASS="htmlnav"
><H1
><IMG
SRC="gifs/smbanner.gif"
ALT="Oracle Built-in Packages"
USEMAP="#srchmap"
BORDER="0"></H1
><MAP
NAME="srchmap"
><AREA
SHAPE="RECT"
COORDS="0,0,466,65"
HREF="index.htm"
ALT="Oracle Built-in Packages"><AREA
SHAPE="RECT"
COORDS="467,0,514,18"
HREF="jobjects/fsearch.htm"
ALT="Search this book"></MAP
><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="part"
HREF="part02.htm"
TITLE="II. Application Development Packages"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: II. Application Development Packages"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><SPAN
CLASS="NAVTITLE"
>Chapter 2</SPAN
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch02_02.htm#ch02-SECT-2.3"
TITLE="2.2 Getting Started with DBMS_SQL"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 2.2 Getting Started with DBMS_SQL"
BORDER="0"></A
></TD
></TR
></TABLE
>&nbsp;<HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"></DIV
><DIV
CLASS="chapter"
><H1
CLASS="chapter"
><A
CLASS="title"
NAME="ch02-38016"
>2. Executing Dynamic SQL and PL/SQL</A
></H1
><DIV
CLASS="htmltoc"
><P
><B
>Contents:</B
><BR><A
CLASS="sect1"
HREF="#ch02-22328"
TITLE="2.1 Examples of Dynamic SQL"
>Examples of Dynamic SQL</A
><BR><A
CLASS="sect1"
HREF="ch02_02.htm#ch02-SECT-2.3"
TITLE="2.2 Getting Started with DBMS_SQL"
>Getting Started with DBMS_SQL</A
><BR><A
CLASS="sect1"
HREF="ch02_03.htm#ch02-SECT-3.4.1"
TITLE="2.3 The DBMS_SQL Interface"
>The DBMS_SQL Interface</A
><BR><A
CLASS="sect1"
HREF="ch02_04.htm#ch02-SECT-4.5"
TITLE="2.4 Tips on Using Dynamic SQL"
>Tips on Using Dynamic SQL</A
><BR><A
CLASS="sect1"
HREF="ch02_05.htm#ch02-SECT-5.1"
TITLE="2.5 DBMS_SQL Examples"
>DBMS_SQL Examples</A
></P
><P
></P
></DIV
><P
CLASS="para"
>The <A
CLASS="indexterm"
NAME="ch02-idx-19562-0"
></A
>DBMS_SQL package offers access to<A
CLASS="indexterm"
NAME="ch02-idx-19563-0"
></A
> dynamic SQL and dynamic PL/SQL from within PL/SQL programs. "Dynamic" means that the SQL statements you execute with this package are not prewritten into your programs. They are, instead, constructed at runtime as character strings and then passed to the SQL engine for execution. </P
><P
CLASS="para"
>The DBMS_SQL package allows you to perform actions that are otherwise impossible from within PL/SQL programs, including:</P
><DL
CLASS="variablelist"
><DT
CLASS="term"
><EM
CLASS="emphasis"
>Execute DDL statements</EM
> <A
CLASS="indexterm"
NAME="ch02-idx-19459-0"
></A
><A
CLASS="indexterm"
NAME="ch02-idx-19459-1"
></A
><A
CLASS="indexterm"
NAME="ch02-idx-19459-2"
></A
></DT
><DD
CLASS="listitem"
><P
CLASS="para"
>DDL (<A
CLASS="indexterm"
NAME="ch02-idx-19571-0"
></A
>Data Definition Language) statements, such as DROP TABLE or CREATE INDEX, are not legal in native PL/SQL. On the other hand, you can use DBMS_SQL to issue any DDL statement and create generic programs to perform such actions as dropping the specified table. Of course, your session will still need the appropriate database privileges to perform the requested actions.</P
></DD
><DT
CLASS="term"
><EM
CLASS="emphasis"
>Build an ad-hoc query interface </EM
></DT
><DD
CLASS="listitem"
><P
CLASS="para"
>With DBMS_SQL, you no longer have to hard-code a <A
CLASS="indexterm"
NAME="ch02-idx-19573-0"
></A
>SELECT statement for a query or a cursor. Instead, you can let a user specify different sort orders, conditions, and any other portion of a SELECT statement. </P
></DD
><DT
CLASS="term"
><EM
CLASS="emphasis"
>Execute dynamically constructed PL/SQL programs </EM
><A
CLASS="indexterm"
NAME="ch02-idx-19572-0"
></A
></DT
><DD
CLASS="listitem"
><P
CLASS="para"
>In a database table you can store the names of procedures that perform certain calculations. Then build a front-end to that table, which allows a user to select the computation of interest, provide the inputs to that program, and then execute it. When other computations need to be offered to the user, you add a row in a table, instead of modifying one or more screens.</P
></DD
></DL
><P
CLASS="para"
>DBMS_SQL is simultaneously one of the most complex, most useful, and most rewarding of the built-in packages. It may take some time for you to get comfortable with how to apply the technology. Once you are up and running, however, you will be amazed at the feats you will be able to perform!</P
><DIV
CLASS="sect1"
><H2
CLASS="sect1"
><A
CLASS="title"
NAME="ch02-22328"
>2.1 Examples of <A
CLASS="indexterm"
NAME="ch02-idx-19574-0"
></A
>Dynamic SQL</A
></H2
><P
CLASS="para"
>Before explaining the details of DBMS_SQL, let's look at a few concrete examples.</P
><P
CLASS="para"
>When you issue a SQL statement via DBMS_SQL, you will have to write much more code than you would by simply executing a native SQL statement, such as an implicit cursor created with a SELECT statement. To get a feel for the differences between these two approaches, consider the following code. This first procedure uses native SQL to give every employee in the specified department a raise: </P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>PROCEDURE giveraise (dept_in IN INTEGER, raise_in IN NUMBER) IS
BEGIN
   UPDATE employee
      SET salary = salary + raise_in
    WHERE department_id = dept_in;
END;</PRE
></BLOCKQUOTE
><P
CLASS="para"
>The following procedure does the same thing, but with DBMS_SQL. Given the volume of code (and the subsequent overhead), you should only use DBMS_SQL when your SQL statement is truly dynamic or involves DDL. </P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>PROCEDURE giveraise (dept_in IN INTEGER, raise_in IN NUMBER) 
IS
   cursor_handle INTEGER;
   emps_updated INTEGER;
BEGIN
   /* Create a cursor to use for the dynamic SQL */
   cursor_handle := DBMS_SQL.OPEN_CURSOR;
   /* 
   || Construct the SQL statement and parse it in Version 7 mode.
   || Notice that the statement includes two bind variables; these
   || are &quot;placeholders&quot; in the SQL statement.
   */
   DBMS_SQL.PARSE 
      (cursor_handle,
       'UPDATE employee SET salary = salary + :raise_amount ' ||
          'WHERE department_id = :dept', 
       DBMS_SQL.V7);

   /* Now I must supply values for the bind variables */
   DBMS_SQL.BIND_VARIABLE (cursor_handle, 'raise_amount', raise_in);
   DBMS_SQL.BIND_VARIABLE (cursor_handle, 'dept', dept_in);

   /* Execute the SQL statement */
   emps_updated := DBMS_SQL.EXECUTE (cursor_handle);

   /* Close the cursor */
   DBMS_SQL.CLOSE_CURSOR (cursor_handle);
EXCEPTION
   WHEN OTHERS 
   THEN
      /* Clean up on failure too. */
      DBMS_SQL.CLOSE_CURSOR (cursor_handle);
END;</PRE
></BLOCKQUOTE
><P
CLASS="para"
>Truly dynamic SQL occurs when you literally construct the SQL statement from runtime variable values. This is shown in the next example. The create_index procedure creates an index where the name of the index, the name of the table, and the column on which the index is to be created are passed as parameters to the procedure. This action would be impossible without DBMS_SQL for two reasons: this is a DDL call and the SQL statement isn't known until the procedure is called.</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>/* Filename on companion disk: <A
CLASS="indexterm"
NAME="ch02-idx-20741-0"
></A
>creind.sp */
CREATE OR REPLACE PROCEDURE create_index 
   (index_in IN VARCHAR2, table_in IN VARCHAR2, column_in in VARCHAR2)
IS
   cursor_handle INTEGER;
   feedback INTEGER;
BEGIN
   /* Create a cursor to use for the dynamic SQL */
   cursor_handle := DBMS_SQL.OPEN_CURSOR;

   /* Construct the SQL statement and parse it in native mode. */
   DBMS_SQL.PARSE 
      (cursor_handle,
       'CREATE INDEX ' || index_in || ' ON ' || table_in ||
          '( ' || column_in || ')',
       DBMS_SQL.NATIVE);

   /* You should always execute your DDL! */
   feedback := DBMS_SQL.EXECUTE (cursor_handle);

   DBMS_SQL.CLOSE_CURSOR (cursor_handle);
END create_index;
/</PRE
></BLOCKQUOTE
></DIV
></DIV
><DIV
CLASS="htmlnav"
><P
></P
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="part"
HREF="part02.htm"
TITLE="II. Application Development Packages"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: II. Application Development Packages"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="book"
HREF="index.htm"
TITLE="Oracle Built-in Packages"
><IMG
SRC="../gifs/txthome.gif"
ALT="Oracle Built-in Packages"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch02_02.htm#ch02-SECT-2.3"
TITLE="2.2 Getting Started with DBMS_SQL"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 2.2 Getting Started with DBMS_SQL"
BORDER="0"></A
></TD
></TR
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
>II. Application Development Packages</TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="index"
HREF="index/idx_0.htm"
TITLE="Book Index"
><IMG
SRC="../gifs/index.gif"
ALT="Book Index"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
>2.2 Getting Started with DBMS_SQL</TD
></TR
></TABLE
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"></DIV
><IMG SRC="../gifs/smnavbar.gif"
USEMAP="#map"
BORDER="0"
ALT="The Oracle Library Navigation">

<P><font size="-1">
<a href="../copyrght.htm#copy">Copyright (c) 2000</a> O'Reilly &amp; Associates. All rights reserved.
</font></P>

<MAP NAME="map">

<AREA SHAPE="RECT"
COORDS="0,0,35,30"
HREF="../index.htm"
ALT="Library Home">

<AREA SHAPE="RECT"
COORDS="40,0,95,30"
HREF="../prog2/index.htm"
ALT="Oracle PL/SQL Programming, 2nd. Ed.">

<AREA SHAPE="RECT"
COORDS="100,0,200,30"
HREF="../guide8i/index.htm"
ALT="Guide to Oracle 8i Features">

<AREA SHAPE="RECT"
COORDS="205,0,245,30"
HREF="index.htm"
ALT="Oracle Built-in Packages">

<AREA SHAPE="RECT"
COORDS="250,0,320,30"
HREF="../advprog/index.htm"
ALT="Advanced PL/SQL Programming with Packages">

<AREA SHAPE="RECT"
COORDS="325,0,420,30"
HREF="../webapp/index.htm"
ALT="Oracle Web Applications">

<AREA SHAPE="RECT"
COORDS="425,0,490,30"
HREF="../langpkt/index.htm"
ALT="Oracle PL/SQL Language Pocket Reference">

<AREA SHAPE="RECT"
COORDS="495,0,570,30"
HREF="../bipkt/index.htm"
ALT="Oracle PL/SQL Built-ins Pocket Reference">
</MAP>

</BODY
>
<!-- Mirrored from liso.cs.pusan.ac.kr by HTTrack Website Copier/3.x [XR&CO'2001] -->
</HTML
>
