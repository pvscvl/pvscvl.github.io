<HTML
><HEAD
><TITLE
>[Chapter 1] 1.3 Built-in Packages</TITLE
><META
NAME="DC.Creator"
CONTENT="Steven Feuerstein, John Beresniewicz &amp; Chip Dawes"><META
NAME="DC.Date"
CONTENT="2000-04-29T17:34:41Z"><META
NAME="DC.Format"
CONTENT="text/html"
SCHEME="MIME"><META
NAME="DC.Identifier"
CONTENT="O'Reilly and Associates CD-ROM-1-56592-456-8E"><META
NAME="DC.Language"
CONTENT="en-US"><META
NAME="DC.Publisher"
CONTENT="O'Reilly &amp; Associates, Inc."><META
NAME="DC.Source"
CONTENT="1-56592-456-8E"
SCHEME="ISBN"><META
NAME="DC.Subject.Keyword"
CONTENT="PL/SQL Oracle Built-ins SQL"><META
NAME="DC.Title"
CONTENT="Oracle PL/SQL Built-ins Pocket Reference"><META
NAME="DC.Type"
CONTENT="Text.Monograph"><META
NAME="generator"
CONTENT="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><LINK
REL="stylesheet"
TYPE="text/css"
HREF="../style/style1.css"><LINK
REV="made"
HREF="mailto:online-books@oreilly.com"
TITLE="Online Books Comments"><LINK
REL="up"
HREF="ch01_01.htm"
TITLE="1. Oracle PL/SQL Built-ins Pocket Reference"><LINK
REL="prev"
HREF="ch01_02.htm"
TITLE="1.2 Conventions"><LINK
REL="next"
HREF="ch01_04.htm"
TITLE="1.4 Built-in Functions"></HEAD
><BODY
><DIV
CLASS="htmlnav"
><H1
><IMG
SRC="gifs/smbanner.gif"
ALT="Oracle PL/SQL Built-ins Pocket Reference"
USEMAP="#srchmap"
BORDER="0"></H1
><MAP
NAME="srchmap"
><AREA
SHAPE="RECT"
COORDS="0,0,466,65"
HREF="index.htm"
ALT="Oracle PL/SQL Built-ins Pocket Reference"><AREA
SHAPE="RECT"
COORDS="467,0,514,18"
HREF="jobjects/fsearch.htm"
ALT="Search this book"></MAP
><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch01_02.htm"
TITLE="1.2 Conventions"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 1.2 Conventions"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><SPAN
CLASS="NAVTITLE"
><A
CLASS="chapter"
REL="up"
HREF="ch01_01.htm"
TITLE="1. Oracle PL/SQL Built-ins Pocket Reference"
>Chapter 1<BR>Oracle PL/SQL Built-ins Pocket Reference</A
></SPAN
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch01_04.htm"
TITLE="1.4 Built-in Functions"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 1.4 Built-in Functions"
BORDER="0"></A
></TD
></TR
></TABLE
>&nbsp;<HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"></DIV
><DIV
CLASS="sect1"
><H2
CLASS="sect1"
><A
CLASS="title"
NAME="plsqlbip-32347"
>1.3 Built-in Packages</A
></H2
><P
CLASS="para"
>PL/SQL packages allow you to collect related program elements and control access to those elements. Oracle provides a rich set of built-in packages that extend the functionality of PL/SQL in many important ways. Many of the built-ins allow you access to features that would otherwise be unavailable to you. You will find these packages helpful in developing applications, managing server-side resources, and performing many other operations.</P
><P
CLASS="para"
>The built-in packages are listed in this section in alphabetical order. For each package, we've shown the header (calling sequence) for each of the programs defined in the package, and provided a brief description of the program operation.</P
><P
CLASS="para"
>There are two default packages that deserve special mention. The STANDARD package contains many of the basic elements of the PL/SQL language (datatypes, functions, even basic operations like + and -). We describe the STANDARD functions later, in the <A
CLASS="xref"
HREF="ch01_04.htm"
>Section 1.4, "Built-in Functions</A
>" section.</P
><P
CLASS="para"
>The DBMS_STANDARD package, described in this section, contains kernel extensions to the STANDARD package.</P
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="plsqlbip-SECT-3.1"
>1.3.1 DBMS_ALERT</A
></H3
><P
CLASS="para"
>DBMS_ALERT provides mechanisms for synchronous, transaction-based notification to multiple sessions that specific database events have occurred.</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>PROCEDURE DBMS_ALERT.REGISTER
    (name IN VARCHAR2);</PRE
></BLOCKQUOTE
><P
CLASS="para"
>Registers the calling session to receive notification of alert <EM
CLASS="emphasis"
>name</EM
>.</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>PROCEDURE DBMS_ALERT.REMOVE
    (name IN VARCHAR2);</PRE
></BLOCKQUOTE
><P
CLASS="para"
>Unregisters the calling session from receiving notification of alert <EM
CLASS="emphasis"
>name</EM
>.</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>PROCEDURE DBMS_ALERT.REMOVEALL;</PRE
></BLOCKQUOTE
><P
CLASS="para"
>
Unregisters the calling session from notification of all alerts.</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>PROCEDURE DBMS_ALERT.SET_DEFAULTS
    (sensitivity IN NUMBER);</PRE
></BLOCKQUOTE
><P
CLASS="para"
>Defines configurable settings for the calling session. (<EM
CLASS="emphasis"
>sensitivity</EM
> defines the loop interval sleep time in seconds.) </P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>PROCEDURE DBMS_ALERT.SIGNAL
    (name IN VARCHAR2
    ,message IN VARCHAR2);</PRE
></BLOCKQUOTE
><P
CLASS="para"
>Signals the occurrence of alert <EM
CLASS="emphasis"
>name</EM
> and attaches <EM
CLASS="emphasis"
>message</EM
>. (Sessions registered for alert <EM
CLASS="emphasis"
>name</EM
> are notified only when the signaling transaction commits.)</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>PROCEDURE DBMS_ALERT.WAITANY
    (name OUT VARCHAR2
    ,message OUT VARCHAR2
    ,status OUT INTEGER
    ,timeout IN NUMBER DEFAULT MAXWAIT);</PRE
></BLOCKQUOTE
><P
CLASS="para"
>Waits for up to <EM
CLASS="emphasis"
>timeout</EM
> seconds to be notified of any alerts for which the session is registered. If <EM
CLASS="emphasis"
>status</EM
> = 0 then <EM
CLASS="emphasis"
>name</EM
> and <EM
CLASS="emphasis"
>message</EM
> contain alert information. If <EM
CLASS="emphasis"
>status</EM
> = 1 then <EM
CLASS="emphasis"
>timeout</EM
> seconds elapsed without notification of any alert.</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>PROCEDURE DBMS_ALERT.WAITONE
    (name IN VARCHAR2
    ,message OUT VARCHAR2
    ,status OUT INTEGER
    ,timeout IN NUMBER DEFAULT MAXWAIT);</PRE
></BLOCKQUOTE
><P
CLASS="para"
>Waits for up to <EM
CLASS="emphasis"
>timeout</EM
> seconds for notification of alert <EM
CLASS="emphasis"
>name</EM
>. If <EM
CLASS="emphasis"
>status</EM
> = 0 then <EM
CLASS="emphasis"
>message</EM
> contains alert information. If <EM
CLASS="emphasis"
>status</EM
> = 1 then <EM
CLASS="emphasis"
>timeout</EM
> seconds elapsed without notification.</P
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="plsqlbip-SECT-3.2"
>1.3.2 DBMS_APPLICATION_INFO</A
></H3
><P
CLASS="para"
>DBMS_APPLICATION_INFO allows applications to register their current execution status into several of the Oracle V$ virtual tables.</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>PROCEDURE DBMS_APPLICATION_INFO.READ_CLIENT_INFO
    (client_info OUT VARCHAR2);</PRE
></BLOCKQUOTE
><P
CLASS="para"
>Returns the currently registered <EM
CLASS="emphasis"
>client_info</EM
> for the session. </P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>PROCEDURE DBMS_APPLICATION_INFO.READ_MODULE
    (module_name OUT VARCHAR2
    ,action_name OUT VARCHAR2);</PRE
></BLOCKQUOTE
><P
CLASS="para"
>Returns the currently registered <EM
CLASS="emphasis"
>module_name</EM
> and <EM
CLASS="emphasis"
>action_name</EM
> for the session.</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>PROCEDURE DBMS_APPLICATION_INFO.SET_ACTION
    (action_name IN VARCHAR2);</PRE
></BLOCKQUOTE
><P
CLASS="para"
>Registers <EM
CLASS="emphasis"
>action_name</EM
> into V$SESSION and V$SQLAREA as the current action for the session.</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>PROCEDURE DBMS_APPLICATION_INFO.SET_CLIENT_INFO
    (client_info IN VARCHAR2);</PRE
></BLOCKQUOTE
><P
CLASS="para"
>Registers <EM
CLASS="emphasis"
>client_info</EM
> into V$SESSION as the current client information for the session. </P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>PROCEDURE DBMS_APPLICATION_INFO.SET_MODULE
    (module_name IN VARCHAR2
    ,action_name IN VARCHAR2);</PRE
></BLOCKQUOTE
><P
CLASS="para"
>Registers <EM
CLASS="emphasis"
>module_name</EM
> and <EM
CLASS="emphasis"
>action_name</EM
> into V$SESSION and V$SQLAREA as the current module and action for the session.</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>PROCEDURE DBMS_APPLICATION_INFO.SET_SESSION_LONGOPS
    (hint IN OUT BINARY_INTEGER
    ,context IN NUMBER DEFAULT 0
    ,stepid IN NUMBER DEFAULT 0
    ,stepsofar IN NUMBER DEFAULT 0
    ,steptotal IN NUMBER DEFAULT 0
    ,sofar IN NUMBER DEFAULT 0
    ,totalwork IN NUMBER DEFAULT 0
    ,application_data_1 IN NUMBER DEFAULT 0
    ,application_data_2 IN NUMBER DEFAULT 0
    ,application_data_3 IN NUMBER DEFAULT 0);</PRE
></BLOCKQUOTE
><P
CLASS="para"
>Inserts or updates runtime data for long-running operations in the V$SESSION_LONGOPS virtual table. Rows are identified by the value of <EM
CLASS="emphasis"
>hint</EM
>; a new row is acquired when <EM
CLASS="emphasis"
>hint</EM
> is set to the package constant set_session_longops_nohint. Unique combinations of <EM
CLASS="emphasis"
>context</EM
> and <EM
CLASS="emphasis"
>stepid</EM
> also force a new row.</P
><P
CLASS="para"
>The SET_SESSION_LONGOPS procedure is used to track the progress of long-running operations by allowing the entry and modification of data in the V$SESSION_LONGOPS virtual table. </P
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="plsqlbip-SECT-3.3"
>1.3.3 DBMS_AQ</A
></H3
><P
CLASS="para"
>The DBMS_AQ package allows you to enqueue to and dequeue messages from queues created in the Oracle Advanced Queuing facility. Oracle8 only.</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>PROCEDURE DBMS_AQ.ENQUEUE 
    (queue_name IN VARCHAR2
    ,enqueue_options IN DBMS_AQ.ENQUEUE_OPTIONS_T
    ,message_properties IN DBMS_AQ.MESSAGE_PROPERTIES_T
    ,payload IN payload_type
    ,msgid OUT RAW);</PRE
></BLOCKQUOTE
><P
CLASS="para"
>Adds the message <EM
CLASS="emphasis"
>payload</EM
> to the queue <EM
CLASS="emphasis"
>queue_name</EM
>, using the options specified by the <EM
CLASS="emphasis"
>enqueue_options</EM
> record. The <EM
CLASS="emphasis"
>payload_type</EM
> is either RAW or the name of an object TYPE. Returns the pointer to the message in <EM
CLASS="emphasis"
>msgid</EM
>.</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>PROCEDURE DBMS_AQ.DEQUEUE 
    (queue_name IN VARCHAR2
    ,dequeue_options IN DBMS_AQ.DEQUEUE_OPTIONS_T
    ,message_properties OUT DBMS_AQ.MESSAGE_PROPERTIES_T
    ,payload OUT &lt;payload_type&gt;
    ,msgid OUT RAW);</PRE
></BLOCKQUOTE
><P
CLASS="para"
>Retrieves the message <EM
CLASS="emphasis"
>payload</EM
> (either a RAW or an object of the specified TYPE) with <EM
CLASS="emphasis"
>message_properties</EM
> specified by the <EM
CLASS="emphasis"
>dequeue_options</EM
>. Also returns the <EM
CLASS="emphasis"
>msgid</EM
> of that message.</P
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="plsqlbip-SECT-3.4"
>1.3.4 DBMS_AQADM</A
></H3
><P
CLASS="para"
>The DBMS_AQADM package provides a set of programs you can use to create, manage, and drop queues and queue tables in the Oracle Advanced Queuing facility.</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>PROCEDURE DBMS_AQADM.CREATE_QUEUE_TABLE
    (queue_table IN VARCHAR2
    ,queue_payload_type IN VARCHAR2
    ,storage_clause IN VARCHAR2 DEFAULT NULL
    ,sort_list IN VARCHAR2 DEFAULT NULL
    ,multiple_consumers IN BOOLEAN DEFAULT FALSE
    ,message_grouping IN BINARY_INTEGER DEFAULT NONE
    ,comment IN VARCHAR2 DEFAULT NULL
    ,auto_commit IN BOOLEAN DEFAULT TRUE);</PRE
></BLOCKQUOTE
><P
CLASS="para"
>Creates a queue table named <EM
CLASS="emphasis"
>queue_table</EM
> of <EM
CLASS="emphasis"
>queue_payload_type</EM
> (RAW or the name of an object TYPE). </P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>PROCEDURE DBMS_AQADM.CREATE_QUEUE
    (queue_name IN VARCHAR2
    ,queue_table IN VARCHAR2
    ,queue_type IN BINARY_INTEGER DEFAULT NORMAL_QUEUE
    ,max_retries IN NUMBER DEFAULT 0
    ,retry_delay IN NUMBER DEFAULT 0
    ,retention_time IN NUMBER DEFAULT 0
    ,dependency_tracking IN BOOLEAN DEFAULT FALSE
    ,comment IN VARCHAR2 DEFAULT NULL
    ,auto_commit IN BOOLEAN DEFAULT TRUE);</PRE
></BLOCKQUOTE
><P
CLASS="para"
>Creates a queue named <EM
CLASS="emphasis"
>queue_name</EM
> in the queue table <EM
CLASS="emphasis"
>queue_table</EM
>. </P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>PROCEDURE DBMS_AQADM.DROP_QUEUE
    (queue_name IN VARCHAR2
    ,auto_commit IN BOOLEAN DEFAULT TRUE);</PRE
></BLOCKQUOTE
><P
CLASS="para"
>Drops the <EM
CLASS="emphasis"
>queue_name</EM
> queue.</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>PROCEDURE DBMS_AQADM.DROP_QUEUE_TABLE
    (queue_table IN VARCHAR2
    ,force IN BOOLEAN DEFAULT FALSE
    ,auto_commit IN BOOLEAN DEFAULT TRUE);</PRE
></BLOCKQUOTE
><P
CLASS="para"
>Drops the <EM
CLASS="emphasis"
>queue_name</EM
> queue from the queue table <EM
CLASS="emphasis"
>queue_table</EM
>. </P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>PROCEDURE DBMS_AQADM.START_QUEUE
    (queue_name IN VARCHAR2
    ,enqueue IN BOOLEAN DEFAULT TRUE
    ,dequeue IN BOOLEAN DEFAULT TRUE);</PRE
></BLOCKQUOTE
><P
CLASS="para"
>Starts the <EM
CLASS="emphasis"
>queue_name</EM
> queue with <EM
CLASS="emphasis"
>enqueue</EM
> and/or <EM
CLASS="emphasis"
>dequeue</EM
> capabilities. </P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>PROCEDURE DBMS_AQADM.STOP_QUEUE
    (queue_name IN VARCHAR2
    ,enqueue IN BOOLEAN DEFAULT TRUE
    ,dequeue IN BOOLEAN DEFAULT TRUE
    ,wait IN BOOLEAN DEFAULT TRUE);</PRE
></BLOCKQUOTE
><P
CLASS="para"
>Stops the <EM
CLASS="emphasis"
>queue_name</EM
> queue for <EM
CLASS="emphasis"
>enqueue</EM
> and/or <EM
CLASS="emphasis"
>dequeue</EM
> capabilities with/without waiting for completion of outstanding transactions. </P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>PROCEDURE DBMS_AQADM.ALTER_QUEUE
    (queue_name IN VARCHAR2
    ,max_retries IN NUMBER DEFAULT NULL
    ,retry_delay IN NUMBER DEFAULT NULL
    ,retention_time IN NUMBER DEFAULT NULL
    ,auto_commit IN BOOLEAN DEFAULT TRUE);</PRE
></BLOCKQUOTE
><P
CLASS="para"
>Alters the specified characteristics of the <EM
CLASS="emphasis"
>queue_name</EM
> queue.</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>PROCEDURE DBMS_AQADM.ADD_SUBSCRIBER
    (queue_name IN VARCHAR2
    ,subscriber IN SYS.AQ$_AGENT);</PRE
></BLOCKQUOTE
><P
CLASS="para"
>Adds the <EM
CLASS="emphasis"
>subscriber</EM
> agent to the <EM
CLASS="emphasis"
>queue_name</EM
> queue.</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>PROCEDURE DBMS_AQADM.REMOVE_SUBSCRIBER
    (queue_name IN VARCHAR2
    ,subscriber IN SYS.AQ$_AGENT);</PRE
></BLOCKQUOTE
><P
CLASS="para"
>Removes the <EM
CLASS="emphasis"
>subscriber</EM
> agent from the <EM
CLASS="emphasis"
>queue_name</EM
> queue.</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>PROCEDURE DBMS_AQADM.GRANT_TYPE_ACCESS
    (user_name IN VARCHAR2);</PRE
></BLOCKQUOTE
><P
CLASS="para"
>Grants to <EM
CLASS="emphasis"
>user_name</EM
> the ability to create queues that work with multiple consumers.</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>FUNCTION DBMS_AQADM.QUEUE_SUBSCRIBERS
    (queue_name IN VARCHAR2)
RETURN AQ$_SUBSCRIBER_LIST_T;</PRE
></BLOCKQUOTE
><P
CLASS="para"
>Returns the list of subscribers for the <EM
CLASS="emphasis"
>queue_name</EM
> queue.</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>PROCEDURE DBMS_AQADM.START_TIME_MANAGER;</PRE
></BLOCKQUOTE
><P
CLASS="para"
>Starts the Queue Monitor process.</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>PROCEDURE DBMS_AQADM.STOP_TIME_MANAGER;</PRE
></BLOCKQUOTE
><P
CLASS="para"
>Stops the Queue Monitor process.</P
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="plsqlbip-SECT-3.5"
>1.3.5 DBMS_DDL</A
></H3
><P
CLASS="para"
>DBMS_DDL contains programs to recompile stored code, analyze and compute statistics for database objects, and modify the referenceability of object identifiers in Oracle8.</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>PROCEDURE DBMS_DDL.ALTER_COMPILE
    (type IN VARCHAR2
    ,schema IN VARCHAR2
    ,name IN VARCHAR2);</PRE
></BLOCKQUOTE
><P
CLASS="para"
>Recompiles the stored PL/SQL object <EM
CLASS="emphasis"
>name</EM
> (case-sensitive) owned by <EM
CLASS="emphasis"
>schema</EM
> of type <EM
CLASS="emphasis"
>type</EM
>. NULL <EM
CLASS="emphasis"
>schema</EM
> uses current schema. Valid values for type are PROCEDURE, FUNCTION, PACKAGE, PACKAGE BODY, and PACKAGE SPECIFICATION.</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>PROCEDURE DBMS_DDL.ALTER_TABLE_NOT_REFERENCEABLE
    (table_name IN VARCHAR2
    ,table_schema IN VARCHAR2 DEFAULT NULL
    ,affected_schema IN VARCHAR2 DEFAULT NULL);</PRE
></BLOCKQUOTE
><P
CLASS="para"
>Reverts references to object <EM
CLASS="emphasis"
>table_name</EM
> by schema <EM
CLASS="emphasis"
>affected_schema</EM
> from <EM
CLASS="emphasis"
>table_name</EM
> owned by <EM
CLASS="emphasis"
>table_schema</EM
> to the default. Oracle8 only.</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>PROCEDURE DBMS_DDL.ALTER_TABLE_REFERENCEABLE
    (table_name IN VARCHAR2
    ,table_schema IN VARCHAR2 DEFAULT NULL
    ,affected_schema IN VARCHAR2 DEFAULT NULL);</PRE
></BLOCKQUOTE
><P
CLASS="para"
>Makes the object table owned by <EM
CLASS="emphasis"
>table_schema</EM
> the table referenced from schema <EM
CLASS="emphasis"
>affected_schema</EM
> for object name <EM
CLASS="emphasis"
>table_name.</EM
> Oracle8 only.</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>PROCEDURE DBMS_DDL.ANALYZE_OBJECT
    (type IN VARCHAR2
    ,schema IN VARCHAR2
    ,name IN VARCHAR2
    ,method IN VARCHAR2
    ,estimate_rows IN NUMBER DEFAULT NULL
    ,estimate_percent IN NUMBER DEFAULT NULL
    ,method_opt IN VARCHAR2 DEFAULT NULL);</PRE
></BLOCKQUOTE
><P
CLASS="para"
>Analyzes database object <EM
CLASS="emphasis"
>name</EM
> owned by <EM
CLASS="emphasis"
>schema</EM
> of type <EM
CLASS="emphasis"
>type</EM
> (TABLE, INDEX, or CLUSTER) using option <EM
CLASS="emphasis"
>method</EM
> (ESTIMATE, NULL, or DELETE). When <EM
CLASS="emphasis"
>method</EM
> is ESTIMATE, either <EM
CLASS="emphasis"
>estimate_rows</EM
> or <EM
CLASS="emphasis"
>estimate_percent</EM
> must be specified to identify sample size. Additional analyze options specifiable by <EM
CLASS="emphasis"
>method_opt</EM
> are FOR TABLE, FOR ALL COLUMNS [SIZE <EM
CLASS="emphasis"
>N</EM
>], FOR ALL INDEXED COLUMNS [SIZE <EM
CLASS="emphasis"
>N</EM
>], and FOR ALL INDEXES.</P
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="plsqlbip-SECT-3.6"
>1.3.6 DBMS_DESCRIBE</A
></H3
><P
CLASS="para"
>The DBMS_DESCRIBE package contains a single procedure used to describe the arguments of a stored PL/SQL procedure or function.</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>PROCEDURE DBMS_DESCRIBE.DESCRIBE_PROCEDURE
    (object_name IN VARCHAR2
    ,reserved1 IN VARCHAR2
    ,reserved2 IN VARCHAR2
    ,overload OUT DBMS_DESCRIBE.NUMBER_TABLE
    ,position OUT DBMS_DESCRIBE.NUMBER_TABLE
    ,level OUT DBMS_DESCRIBE.NUMBER_TABLE
    ,argument_name OUT DBMS_DESCRIBE.VARCHAR2_TABLE
    ,datatype OUT DBMS_DESCRIBE.NUMBER_TABLE
    ,default_value OUT DBMS_DESCRIBE.NUMBER_TABLE
    ,in_out OUT DBMS_DESCRIBE.NUMBER_TABLE
    ,length OUT DBMS_DESCRIBE.NUMBER_TABLE
    ,precision OUT DBMS_DESCRIBE.NUMBER_TABLE
    ,scale OUT DBMS_DESCRIBE.NUMBER_TABLE
    ,radix OUT DBMS_DESCRIBE.NUMBER_TABLE
    ,spare OUT DBMS_DESCRIBE.NUMBER_TABLE);</PRE
></BLOCKQUOTE
><P
CLASS="para"
>Returns information about the parameters and RETURN type (if a function) of the specified object (procedure or function) in a set of PL/SQL tables, whose types are described in the same package.</P
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="plsqlbip-SECT-3.7"
>1.3.7 DBMS_JOB</A
></H3
><P
CLASS="para"
>DBMS_JOB is an interface into the Oracle job queue subsystem that allows automated, unattended scheduling and execution of PL/SQL programs.</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>PROCEDURE DBMS_JOB.BROKEN
    (job IN BINARY_INTEGER
    ,broken IN BOOLEAN
    ,next_date IN DATE DEFAULT SYSDATE);</PRE
></BLOCKQUOTE
><P
CLASS="para"
>Sets or unsets the Boolean <EM
CLASS="emphasis"
>broken</EM
> flag for the <EM
CLASS="emphasis"
>job</EM
>, and optionally sets the next execution date specified by <EM
CLASS="emphasis"
>next_date</EM
>. Jobs flagged with <EM
CLASS="emphasis"
>broken</EM
> = TRUE are not automatically executed. </P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>PROCEDURE DBMS_JOB.CHANGE
    (job IN BINARY_INTEGER
    ,what IN VARCHAR2
    ,next_date IN DATE
    ,interval IN VARCHAR2);</PRE
></BLOCKQUOTE
><P
CLASS="para"
>Changes one or more of the parameters <EM
CLASS="emphasis"
>what</EM
>, <EM
CLASS="emphasis"
>next_date</EM
>, or <EM
CLASS="emphasis"
>interval</EM
> for <EM
CLASS="emphasis"
>job</EM
>.</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>PROCEDURE DBMS_JOB.INTERVAL
    (job IN BINARY_INTEGER
    ,interval IN VARCHAR2);</PRE
></BLOCKQUOTE
><P
CLASS="para"
>Changes the date expression used to determine the next execution date for <EM
CLASS="emphasis"
>job</EM
> to <EM
CLASS="emphasis"
>interval</EM
>. </P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>PROCEDURE DBMS_JOB.ISUBMIT
    (job IN BINARY_INTEGER
    ,what IN VARCHAR2
    ,next_date IN VARCHAR2
    ,interval IN VARCHAR2 DEFAULT `null'
    ,no_parse IN BOOLEAN DEFAULT FALSE);</PRE
></BLOCKQUOTE
><P
CLASS="para"
>Submits a job with the specified <EM
CLASS="emphasis"
>job</EM
> number and PL/SQL definition <EM
CLASS="emphasis"
>what</EM
>, scheduled to execute at <EM
CLASS="emphasis"
>next_date</EM
> and every <EM
CLASS="emphasis"
>interval</EM
> thereafter. When <EM
CLASS="emphasis"
>no_parse</EM
> is TRUE, parsing of the PL/SQL in <EM
CLASS="emphasis"
>what</EM
> is deferred until execution.</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>PROCEDURE DBMS_JOB.NEXT_DATE
    (job IN BINARY_INTEGER
    ,next_date IN DATE);</PRE
></BLOCKQUOTE
><P
CLASS="para"
>Changes the next scheduled date of execution for <EM
CLASS="emphasis"
>job</EM
> to <EM
CLASS="emphasis"
>next_date</EM
>. </P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>PROCEDURE DBMS_JOB.REMOVE
    (job IN BINARY_INTEGER);</PRE
></BLOCKQUOTE
><P
CLASS="para"
>Removes <EM
CLASS="emphasis"
>job</EM
> from the <EM
CLASS="emphasis"
>job</EM
> queue. If <EM
CLASS="emphasis"
>job</EM
> is currently executing, it will run to normal completion, but will not be rescheduled. </P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>PROCEDURE DBMS_JOB.RUN
    (job IN BINARY_INTEGER);</PRE
></BLOCKQUOTE
><P
CLASS="para"
>Immediately executes <EM
CLASS="emphasis"
>job</EM
> in the current session. </P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>PROCEDURE DBMS_JOB.SUBMIT
    (job OUT BINARY_INTEGER
    ,what IN VARCHAR2
    ,next_date IN DATE DEFAULT SYSDATE
    ,interval IN VARCHAR2 DEFAULT `null'
    ,no_parse IN BOOLEAN DEFAULT FALSE);</PRE
></BLOCKQUOTE
><P
CLASS="para"
>Submits a job to the job queue with PL/SQL definition <EM
CLASS="emphasis"
>what</EM
>, scheduled to execute at <EM
CLASS="emphasis"
>next_date</EM
> and every <EM
CLASS="emphasis"
>interval</EM
> thereafter. <EM
CLASS="emphasis"
>Job</EM
> returns the identification number for the job. When <EM
CLASS="emphasis"
>no_parse</EM
> is TRUE, parsing of the PL/SQL in <EM
CLASS="emphasis"
>what</EM
> is deferred until execution.</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>PROCEDURE DBMS_JOB.USER_EXPORT
    (job IN BINARY_INTEGER
    ,mycall IN OUT VARCHAR2);</PRE
></BLOCKQUOTE
><P
CLASS="para"
>Returns a character string in <EM
CLASS="emphasis"
>mycall</EM
> containing a call to DBMS_JOB.ISUBMIT that can be used to re-submit <EM
CLASS="emphasis"
>job</EM
> to the job queue.</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>PROCEDURE DBMS_JOB.WHAT
    (job IN BINARY_INTEGER
    ,what IN VARCHAR2);</PRE
></BLOCKQUOTE
><P
CLASS="para"
>Changes the PL/SQL definition for <EM
CLASS="emphasis"
>job</EM
> to <EM
CLASS="emphasis"
>what</EM
>. </P
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="plsqlbip-SECT-3.8"
>1.3.8 DBMS_LOB</A
></H3
><P
CLASS="para"
>DBMS_LOB provides a mechanism for accessing and manipulating large objects. LOBs include BLOBs (binary large objects), CLOBs (character large objects), NCLOBs (National Language Support character large objects), and BFILEs (binary files). The CHARACTER SET ANY_CS clauses in the CLOB declarations allow either CLOB or NCLOB locators. Oracle 8 only.</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>PROCEDURE DBMS_LOB.APPEND
    (dest_lob IN OUT BLOB 
    ,src_lob  IN BLOB);

PROCEDURE DBMS_LOB.APPEND
    (dest_lob IN OUT CLOB CHARACTER SET ANY_CS
    ,src_lob IN CLOB CHARACTER SET dest_lob%CHARSET);</PRE
></BLOCKQUOTE
><P
CLASS="para"
>Appends the contents of the source LOB <EM
CLASS="emphasis"
>src_lob</EM
> to the destination LOB <EM
CLASS="emphasis"
>dest_lob</EM
>. Both <EM
CLASS="emphasis"
>src_lob</EM
> and <EM
CLASS="emphasis"
>dest_lob</EM
> must be of the same LOB type: BLOB, CLOB, or NCLOB.</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>FUNCTION DBMS_LOB.COMPARE
    (lob_1 IN BLOB | CLOB CHARACTER SET ANY_CS
    ,lob_2 IN BLOB | CLOB CHARACTER SET lob_1%CHARSET
    ,amount IN INTEGER := 4294967295
    ,offset_1 IN INTEGER := 1
    ,offset_2 IN INTEGER := 1)
RETURN INTEGER;

FUNCTION DBMS_LOB.COMPARE
    (file_1 IN BFILE
    ,file_2 IN BFILE
    ,amount IN INTEGER
    ,offset_1 IN INTEGER := 1
    ,offset_2 IN INTEGER := 1)
RETURN INTEGER;</PRE
></BLOCKQUOTE
><P
CLASS="para"
>Compares input LOBs <EM
CLASS="emphasis"
>lob_1</EM
> and <EM
CLASS="emphasis"
>lob_2</EM
> or <EM
CLASS="emphasis"
>file_1</EM
> and <EM
CLASS="emphasis"
>file_2</EM
> across <EM
CLASS="emphasis"
>amount</EM
> bytes, optionally starting the comparison <EM
CLASS="emphasis"
>offset_1</EM
> and <EM
CLASS="emphasis"
>offset_2</EM
> bytes into the input files. Both inputs must be of the same LOB type: BLOB, CLOB, NCLOB, or BFILE.</P
><P
CLASS="para"
>Returns 0 if they exactly match, non-0 if they don't match, or NULL if any of <EM
CLASS="emphasis"
>amount</EM
>, <EM
CLASS="emphasis"
>offset_1</EM
>, or <EM
CLASS="emphasis"
>offset_2</EM
> are either less than 1 or greater than lobmaxsize.</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>PROCEDURE DBMS_LOB.COPY
    (dest_lob IN OUT BLOB,
    ,src_lob IN BLOB
    ,amount IN INTEGER
    ,dest_offset IN INTEGER := 1
    ,src_offset IN INTEGER := 1);

PROCEDURE DBMS_LOB.COPY
    (dest_lob IN OUT CLOB CHARACTER SET ANY_CS
    ,src_lob IN CLOB CHARACTER SET dest_lob%CHARSET,
    ,amount IN INTEGER
    ,dest_offset IN INTEGER := 1
    ,src_offset IN INTEGER := 1);</PRE
></BLOCKQUOTE
><P
CLASS="para"
>Copies <EM
CLASS="emphasis"
>amount</EM
> bytes (BLOB) or characters (CLOB) from source LOB <EM
CLASS="emphasis"
>lob_loc</EM
>, starting <EM
CLASS="emphasis"
>src_offset</EM
> bytes or characters into the source LOB to the destination (target) LOB, <EM
CLASS="emphasis"
>dest_lob</EM
>, starting <EM
CLASS="emphasis"
>dest_offset</EM
> into the destination LOB. Both <EM
CLASS="emphasis"
>src_lob</EM
> and <EM
CLASS="emphasis"
>dest_lob</EM
> must be the same LOB type: BLOB, CLOB, or NCLOB.</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>PROCEDURE DBMS_LOB.ERASE
    (lob_loc IN OUT BLOB | CLOB CHARACTER SET ANY_CS
    ,amount IN OUT INTEGER
    ,offset IN INTEGER := 1);</PRE
></BLOCKQUOTE
><P
CLASS="para"
>Erases (zero byte fill) <EM
CLASS="emphasis"
>amount</EM
> bytes (BLOB) or characters (CLOB) in the LOB <EM
CLASS="emphasis"
>lob_loc</EM
>, beginning <EM
CLASS="emphasis"
>offset</EM
> bytes or characters into the LOB <EM
CLASS="emphasis"
>lob_loc</EM
>.</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>PROCEDURE DBMS_LOB.FILECLOSE
    (file_loc IN OUT BFILE);</PRE
></BLOCKQUOTE
><P
CLASS="para"
>Closes the BFILE <EM
CLASS="emphasis"
>file_loc</EM
>, whether it is open or not.</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>PROCEDURE DBMS_LOB.FILECLOSEALL;</PRE
></BLOCKQUOTE
><P
CLASS="para"
>Closes all open BFILEs in the current session.</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>FUNCTION DBMS_LOB.FILEEXISTS
    (file_loc IN BFILE)
RETURN INTEGER;</PRE
></BLOCKQUOTE
><P
CLASS="para"
>Returns 1 if BFILE <EM
CLASS="emphasis"
>file_loc</EM
> exists; returns 0 otherwise.</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>PROCEDURE DBMS_LOB.FILEGETNAME
    (file_loc IN BFILE
    ,dir_alias OUT VARCHAR2
    ,filename OUT VARCHAR2);</PRE
></BLOCKQUOTE
><P
CLASS="para"
>Gets directory alias (as previously defined via the CREATE DIRECTORY command) and filename for the given file locator <EM
CLASS="emphasis"
>file_loc</EM
>. </P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>FUNCTION DBMS_LOB.FILEISOPEN
    (file_loc IN BFILE)
RETURN INTEGER;</PRE
></BLOCKQUOTE
><P
CLASS="para"
>Returns 1 if the BFILE <EM
CLASS="emphasis"
>file_loc</EM
> is open; returns 0 otherwise.</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>PROCEDURE DBMS_LOB.FILEOPEN
    (file_loc IN OUT BFILE
    ,open_mode IN BINARY_INTEGER := FILE_READONLY);</PRE
></BLOCKQUOTE
><P
CLASS="para"
>Opens BFILE <EM
CLASS="emphasis"
>file_loc</EM
> for read-only access.</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>FUNCTION DBMS_LOB.GETLENGTH
    (lob_loc IN BLOB) 
RETURN INTEGER;

FUNCTION DBMS_LOB.GETLENGTH
    (lob_loc IN CLOB CHARACTER SET ANY_CS) 
RETURN INTEGER;

FUNCTION DBMS_LOB.GETLENGTH
    (lob_loc IN BFILE) 
RETURN INTEGER;</PRE
></BLOCKQUOTE
><P
CLASS="para"
>Returns the size in bytes or characters of the LOB <EM
CLASS="emphasis"
>lob_loc.</EM
></P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>FUNCTION DBMS_LOB.INSTR
    (lob_loc IN BLOB | BFILE
    ,pattern IN RAW
    ,offset IN INTEGER := 1
    ,nth IN INTEGER := 1)
RETURN INTEGER;

FUNCTION DBMS_LOB.INSTR
    (lob_loc IN CLOB CHARACTER SET ANY_CS
    ,pattern IN VARCHAR2 CHARACTER SET lob_loc%CHARSET 
    ,offset IN INTEGER := 1
    ,nth IN INTEGER := 1)
RETURN INTEGER;</PRE
></BLOCKQUOTE
><P
CLASS="para"
>Similar to the built-in function INSTR. Returns the byte (BLOB) or character (CLOB) offset in LOB <EM
CLASS="emphasis"
>lob_loc</EM
> where the <EM
CLASS="emphasis"
>nth</EM
> occurrence of <EM
CLASS="emphasis"
>pattern</EM
> is found. The search begins <EM
CLASS="emphasis"
>offset</EM
> bytes or characters into <EM
CLASS="emphasis"
>lob_loc</EM
>. </P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>PROCEDURE DBMS_LOB.LOADFROMFILE
    (dest_lob IN OUT BLOB | CLOB CHARACTER SET ANY_CS
    ,src_lob IN BFILE
    ,amount IN INTEGER
    ,dest_offset IN INTEGER := 1
    ,src_offset IN INTEGER := 1);</PRE
></BLOCKQUOTE
><P
CLASS="para"
>Copies <EM
CLASS="emphasis"
>amount</EM
> bytes of data from the source BFILE <EM
CLASS="emphasis"
>src_lob</EM
> to the destination (target) LOB <EM
CLASS="emphasis"
>dest_lob</EM
>, starting <EM
CLASS="emphasis"
>src_offset</EM
> bytes into the source BFILE and <EM
CLASS="emphasis"
>dest_offset</EM
> bytes into the destination (target) LOB.</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>PROCEDURE DBMS_LOB.READ
    (lob_loc IN BLOB | BFILE
    ,amount IN OUT BINARY_INTEGER
    ,offset IN INTEGER
    ,buffer OUT RAW);

PROCEDURE DBMS_LOB.READ
    (lob_loc IN CLOB CHARACTER SET ANY_CS
    ,amount IN OUT BINARY_INTEGER
    ,offset IN INTEGER
    ,buffer OUT VARCHAR2 CHARACTER SET lob_loc%CHARSET);</PRE
></BLOCKQUOTE
><P
CLASS="para"
>Copies <EM
CLASS="emphasis"
>amount</EM
> bytes (BLOB) or characters (CLOB) from source LOB <EM
CLASS="emphasis"
>lob_loc</EM
>, starting <EM
CLASS="emphasis"
>offset</EM
> bytes or characters into the LOB to the destination (target) variable, <EM
CLASS="emphasis"
>buffer</EM
>. Returns the actual number of bytes or characters copied in <EM
CLASS="emphasis"
>amount</EM
>.</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>FUNCTION DBMS_LOB.SUBSTR
    (lob_loc IN BLOB | BFILE
    ,amount IN INTEGER := 32767
    ,offset IN INTEGER := 1)
RETURN RAW;

FUNCTION DBMS_LOB.SUBSTR
    (lob_loc IN CLOB CHARACTER SET ANY_CS
    ,amount IN INTEGER := 32767
    ,offset IN INTEGER := 1)
RETURN VARCHAR2 CHARACTER SET lob_loc%CHARSET; </PRE
></BLOCKQUOTE
><P
CLASS="para"
>Similar to the built-in function SUBSTR. Returns <EM
CLASS="emphasis"
>amount</EM
> bytes (BLOB) or characters (CLOB) of the LOB <EM
CLASS="emphasis"
>lob_loc</EM
> starting <EM
CLASS="emphasis"
>offset</EM
> bytes or characters into the LOB. </P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>PROCEDURE DBMS_LOB.TRIM
    (lob_loc IN OUT BLOB | CLOB CHARACTER SET ANY_CS
    ,newlen IN INTEGER);</PRE
></BLOCKQUOTE
><P
CLASS="para"
>Truncates the LOB <EM
CLASS="emphasis"
>lob_loc</EM
> to <EM
CLASS="emphasis"
>newlen</EM
> bytes (BLOB) or characters (CLOB).</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>PROCEDURE DBMS_LOB.WRITE
    (lob_loc IN OUT BLOB
    ,amount IN BINARY_INTEGER
    ,offset IN INTEGER
    ,buffer IN RAW);

PROCEDURE DBMS_LOB.WRITE
    (lob_loc IN OUT CLOB CHARACTER SET ANY_CS
    ,amount IN BINARY_INTEGER
    ,offset IN INTEGER
    ,buffer IN VARCHAR2 CHARACTER SET lob_loc%CHARSET);</PRE
></BLOCKQUOTE
><P
CLASS="para"
>Copies <EM
CLASS="emphasis"
>amount</EM
> bytes from source variable <EM
CLASS="emphasis"
>buffer</EM
> to the destination LOB <EM
CLASS="emphasis"
>lob_loc</EM
>, starting <EM
CLASS="emphasis"
>offset</EM
> bytes (BLOB) or characters (CLOB) into the LOB, overwriting any existing data in <EM
CLASS="emphasis"
>lob_loc</EM
>.</P
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="plsqlbip-SECT-3.9"
>1.3.9 DBMS_LOCK</A
></H3
><P
CLASS="para"
>DBMS_LOCK makes Oracle lock management services available for implementation of specialized, non-data locking and serialization requirements within applications.</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>PROCEDURE DBMS_LOCK.ALLOCATE_UNIQUE
    (lockname IN VARCHAR2
    ,lockhandle OUT VARCHAR2
    ,expiration_secs IN INTEGER DEFAULT 864000);</PRE
></BLOCKQUOTE
><P
CLASS="para"
>Allocates a unique <EM
CLASS="emphasis"
>lockhandle</EM
> for the lock identified by <EM
CLASS="emphasis"
>lockname</EM
> to last for <EM
CLASS="emphasis"
>expiration_secs</EM
> seconds. Also performs a COMMIT.</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>FUNCTION DBMS_LOCK.CONVERT
    (id IN INTEGER | lockhandle IN VARCHAR2
    ,lockmode IN INTEGER
    ,timeout IN NUMBER DEFAULT MAXWAIT)
RETURN INTEGER;</PRE
></BLOCKQUOTE
><P
CLASS="para"
>Converts the lock identified by either <EM
CLASS="emphasis"
>id</EM
> or <EM
CLASS="emphasis"
>lockhandle</EM
> to the mode specified by <EM
CLASS="emphasis"
>lockmode</EM
>, waiting for up to <EM
CLASS="emphasis"
>timeout</EM
> seconds for successful completion. <EM
CLASS="emphasis"
>lockmode</EM
> must be a valid constant as defined in the DBMS_LOCK package. Return values are 0 = success; 1 = timed out; 2 = deadlock; 3 = parameter error; 4 = do not own lock, cannot convert; or 5 = illegal lockhandle.</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>FUNCTION DBMS_LOCK.RELEASE
    (id IN INTEGER | lockhandle IN VARCHAR2)
RETURN INTEGER;</PRE
></BLOCKQUOTE
><P
CLASS="para"
>Releases the lock identified by either <EM
CLASS="emphasis"
>id</EM
> or <EM
CLASS="emphasis"
>lockhandle</EM
>. Return values are: 0 = success; 3 = parameter error; 4 = do not own lock, cannot release; or 5 = illegal lockhandle.</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>FUNCTION DBMS_LOCK.REQUEST
    (id IN INTEGER | lockhandle IN VARCHAR2
    ,lockmode IN INTEGER DEFAULT X_MODE
    ,timeout IN INTEGER DEFAULT MAXWAIT
    ,release_on_commit IN BOOLEAN DEFAULT FALSE)
RETURN INTEGER;</PRE
></BLOCKQUOTE
><P
CLASS="para"
>Acquires the lock identified by either <EM
CLASS="emphasis"
>id</EM
> or <EM
CLASS="emphasis"
>lockhandle</EM
> in the mode specified by <EM
CLASS="emphasis"
>lockmode</EM
>, waiting for up to <EM
CLASS="emphasis"
>timeout</EM
> seconds for successful completion. When <EM
CLASS="emphasis"
>release_on_commit</EM
> is TRUE, the lock is automatically released by transaction COMMIT or ROLLBACK. <EM
CLASS="emphasis"
>lockmode</EM
> must be a valid constant as defined in the DBMS_LOCK package. Return values are 0 = success; 1 = timed out; 2 = deadlock; 3 = parameter error; 4 = do not own lock, cannot convert; or 5 = illegal lockhandle.</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>PROCEDURE DBMS_LOCK.SLEEP
    (seconds IN NUMBER);</PRE
></BLOCKQUOTE
><P
CLASS="para"
>Suspends the session for <EM
CLASS="emphasis"
>seconds</EM
> seconds. </P
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="plsqlbip-SECT-3.10"
>1.3.10 DBMS_OUTPUT</A
></H3
><P
CLASS="para"
>This package provides a mechanism for displaying information on your session's output device from within a PL/SQL program. You can use it as a crude debugger or trace facility.</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>PROCEDURE DBMS_OUTPUT.DISABLE;</PRE
></BLOCKQUOTE
><P
CLASS="para"
>Disables output from the package and purges the DBMS_OUTPUT buffer.</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>PROCEDURE DBMS_OUTPUT.ENABLE
    (buffer_size IN INTEGER DEFAULT 20000);</PRE
></BLOCKQUOTE
><P
CLASS="para"
>Enables output from the package and sets to <EM
CLASS="emphasis"
>buffer_size</EM
> the maximum number of bytes that can be stored in the buffer.</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>PROCEDURE DBMS_OUTPUT.GET_LINE
    (line OUT VARCHAR2
    ,status OUT INTEGER);</PRE
></BLOCKQUOTE
><P
CLASS="para"
>Gets the next line from the buffer and places it in <EM
CLASS="emphasis"
>line</EM
>. A <EM
CLASS="emphasis"
>status</EM
> of 0 means successful retrieval; 1 means failure.</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>PROCEDURE DBMS_OUTPUT.GET_LINES
    (lines OUT DBMS_OUTPUT.CHARARR
    ,numlines IN OUT INTEGER);</PRE
></BLOCKQUOTE
><P
CLASS="para"
>Gets <EM
CLASS="emphasis"
>numlines</EM
> number of lines from the buffer and places them in the <EM
CLASS="emphasis"
>lines</EM
> PL/SQL table.</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>PROCEDURE DBMS_OUTPUT.NEW_LINE;</PRE
></BLOCKQUOTE
><P
CLASS="para"
>Writes a newline character to the DBMS_OUTPUT buffer.</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>PROCEDURE DBMS_OUTPUT.PUT
    (a IN DATE|NUMBER|VARCHAR2);</PRE
></BLOCKQUOTE
><P
CLASS="para"
>Puts the data contained in <EM
CLASS="emphasis"
>a</EM
> in the DBMS_OUTPUT buffer and does not append a newline character.</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>PROCEDURE DBMS_OUTPUT.PUT_LINE
    (a IN DATE|NUMBER|VARCHAR2);</PRE
></BLOCKQUOTE
><P
CLASS="para"
>Puts the data contained in <EM
CLASS="emphasis"
>a</EM
> in the DBMS_OUTPUT buffer and then appends a newline character.</P
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="plsqlbip-SECT-3.11"
>1.3.11 DBMS_PIPE</A
></H3
><P
CLASS="para"
>DBMS_PIPE permits communication of messages between database sessions using memory-based structures. Communication is asynchronous, non-transactional, and persists beyond session lifetime.</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>FUNCTION DBMS_PIPE.CREATE_PIPE
    (pipename IN VARCHAR2
    ,maxpipesize IN INTEGER DEFAULT 8192
    ,private IN BOOLEAN DEFAULT TRUE)
RETURN INTEGER;</PRE
></BLOCKQUOTE
><P
CLASS="para"
>Creates a pipe identified by <EM
CLASS="emphasis"
>pipename</EM
> with maximum size <EM
CLASS="emphasis"
>maxpipesize</EM
> and returns 0. When <EM
CLASS="emphasis"
>private</EM
> is FALSE, the pipe is publicly accessible.</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>FUNCTION DBMS_PIPE.NEXT_ITEM_TYPE
RETURN INTEGER;</PRE
></BLOCKQUOTE
><P
CLASS="para"
>Returns an integer identifying the datatype of the next item in the session message buffer.</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>PROCEDURE DBMS_PIPE.PACK_MESSAGE
    (item IN VARCHAR2 | NUMBER | DATE);</PRE
></BLOCKQUOTE
><P
CLASS="para"
>Packs <EM
CLASS="emphasis"
>item</EM
> into the session message buffer, overloaded on the datatype of <EM
CLASS="emphasis"
>item</EM
>.</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>PROCEDURE DBMS_PIPE.PACK_MESSAGE_RAW
    (item IN RAW);</PRE
></BLOCKQUOTE
><P
CLASS="para"
>Packs the raw data in <EM
CLASS="emphasis"
>item</EM
> into the session message buffer. </P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>PROCEDURE DBMS_PIPE.PACK_MESSAGE_ROWID
    (item IN ROWID);</PRE
></BLOCKQUOTE
><P
CLASS="para"
>Packs the ROWID data in <EM
CLASS="emphasis"
>item</EM
> into the session message buffer. </P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>PROCEDURE DBMS_PIPE.PURGE
    (pipename IN VARCHAR2);</PRE
></BLOCKQUOTE
><P
CLASS="para"
>Purges all messages from <EM
CLASS="emphasis"
>pipename</EM
>.</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>FUNCTION DBMS_PIPE.RECEIVE_MESSAGE
    (pipename IN VARCHAR2
    ,timeout IN INTEGER DEFAULT MAXWAIT)
RETURN INTEGER;</PRE
></BLOCKQUOTE
><P
CLASS="para"
>Receives a message from <EM
CLASS="emphasis"
>pipename</EM
> into the session message buffer, waiting for up to <EM
CLASS="emphasis"
>timeout</EM
> seconds for successful completion. Returns 0 for success and 1 for timeout.</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>FUNCTION DBMS_PIPE.REMOVE_PIPE
    (pipename IN VARCHAR2)
RETURN INTEGER;</PRE
></BLOCKQUOTE
><P
CLASS="para"
>Removes <EM
CLASS="emphasis"
>pipename</EM
> and frees its memory back to the shared pool, returning 0.</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>PROCEDURE DBMS_PIPE.RESET_BUFFER;</PRE
></BLOCKQUOTE
><P
CLASS="para"
>Resets the session message buffer's pack and unpack indicators, effectively discarding all contents.</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>FUNCTION DBMS_PIPE.SEND_MESSAGE
    (pipename IN VARCHAR2
    ,timeout IN INTEGER DEFAULT MAXWAIT
    ,maxpipesize IN INTEGER DEFAULT 8192)
RETURN INTEGER;</PRE
></BLOCKQUOTE
><P
CLASS="para"
>Sends the contents of the session message buffer onto <EM
CLASS="emphasis"
>pipename</EM
>, waiting for up to <EM
CLASS="emphasis"
>timeout</EM
> seconds for successful completion and optionally increasing the maximum size of <EM
CLASS="emphasis"
>pipename</EM
> to <EM
CLASS="emphasis"
>maxpipesize</EM
>. Returns 0 for success and 1 for timeout.</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>FUNCTION DBMS_PIPE.UNIQUE_SESSION_NAME
RETURN VARCHAR2;</PRE
></BLOCKQUOTE
><P
CLASS="para"
>Returns a string identifier unique to the session up to 30 bytes in length.</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>PROCEDURE DBMS_PIPE.UNPACK_MESSAGE
    (item OUT VARCHAR2 | NUMBER | DATE);</PRE
></BLOCKQUOTE
><P
CLASS="para"
>Unpacks the next data item in the message buffer into <EM
CLASS="emphasis"
>item</EM
>, overloaded on the datatype of <EM
CLASS="emphasis"
>item</EM
>. </P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>PROCEDURE DBMS_PIPE.UNPACK_MESSAGE_RAW
    (item OUT RAW);</PRE
></BLOCKQUOTE
><P
CLASS="para"
>Unpacks the next data item in the message buffer into <EM
CLASS="emphasis"
>item</EM
> when it is of datatype RAW.</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>PROCEDURE DBMS_PIPE.UNPACK_MESSAGE_ROWID
    (item OUT ROWID);</PRE
></BLOCKQUOTE
><P
CLASS="para"
>Unpacks the next data item in the message buffer into <EM
CLASS="emphasis"
>item</EM
> when it is of datatype ROWID.</P
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="plsqlbip-SECT-3.12"
>1.3.12 DBMS_RANDOM</A
></H3
><P
CLASS="para"
>DBMS_RANDOM provides a random number generating utility. Oracle8 only.</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>PROCEDURE DBMS_RANDOM.INITIALIZE
    (seed IN BINARY_INTEGER);</PRE
></BLOCKQUOTE
><P
CLASS="para"
>Initializes the random number generator with the value of <EM
CLASS="emphasis"
>seed</EM
>, which should be at least five digits in length.</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>FUNCTION DBMS_RANDOM.RANDOM
RETURN BINARY_INTEGER;</PRE
></BLOCKQUOTE
><P
CLASS="para"
>Returns a random integer value from the random number generator.</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>PROCEDURE DBMS_RANDOM.SEED
    (seed IN BINARY_INTEGER);</PRE
></BLOCKQUOTE
><P
CLASS="para"
>Changes the random number generator's seed value to <EM
CLASS="emphasis"
>seed</EM
>, which should be at least five digits in length.</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>PROCEDURE DBMS_RANDOM.TERMINATE;</PRE
></BLOCKQUOTE
><P
CLASS="para"
>Releases resources used by the random number generator when no longer needed.</P
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="plsqlbip-SECT-3.13"
>1.3.13 DBMS_ROWID</A
></H3
><P
CLASS="para"
>DBMS_ROWID provides routines for working with ROWIDs. ROWIDs changed structure in Oracle8, and for Oracle8 this built-in works with both the old and new ROWID types.</P
><P
CLASS="para"
>An Oracle7 (restricted) ROWID has three parts in base 16 (hex):</P
><TABLE
CLASS="simplelist"
BORDER="0"
><TR
><TD
CLASS="member"
>BBBBBBBB.RRRR.FFFF</TD
></TR
></TABLE
><P
CLASS="para"
>An Oracle8 (extended) ROWID has four parts in base 64:</P
><TABLE
CLASS="simplelist"
BORDER="0"
><TR
><TD
CLASS="member"
>OOOOOOFFFBBBBBBRRR</TD
></TR
></TABLE
><P
CLASS="para"
>where: </P
><TABLE
CLASS="simplelist"
BORDER="0"
><TR
><TD
CLASS="member"
>OOOOOO is the object number.</TD
></TR
><TR
><TD
CLASS="member"
>FFFF (FFF) is the absolute (V7) or relative (V8) file number.</TD
></TR
><TR
><TD
CLASS="member"
>BBBBBBBB (BBBBBB) is the block number within the file.</TD
></TR
><TR
><TD
CLASS="member"
>RRRR (RRR) is the row number within the block.</TD
></TR
></TABLE
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>FUNCTION DBMS_ROWID.ROWID_BLOCK_NUMBER
    (row_id IN ROWID)
RETURN NUMBER;</PRE
></BLOCKQUOTE
><P
CLASS="para"
>Returns the block number component of <EM
CLASS="emphasis"
>row_id.</EM
></P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>FUNCTION DBMS_ROWID.ROWID_CREATE
    (rowid_type IN NUMBER
    ,object_number IN NUMBER
    ,relative_fno IN NUMBER
    ,block_number IN NUMBER
    ,row_number IN NUMBER)
RETURN ROWID;</PRE
></BLOCKQUOTE
><P
CLASS="para"
>Creates a <EM
CLASS="emphasis"
>rowid_type</EM
> ROWID composed of <EM
CLASS="emphasis"
>object_number</EM
>, <EM
CLASS="emphasis"
>relative_fno, block_number</EM
>, and <EM
CLASS="emphasis"
>row_number</EM
> ROWID. <EM
CLASS="emphasis"
>rowid_type</EM
> can beROWID_TYPE_EXTENDED or ROWID_TYPE_RESTRICTED. <EM
CLASS="emphasis"
>object_number</EM
> can be ROWID_OBJECT_UNDEFINED or the object number (OID).</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>PROCEDURE DBMS_ROWID.ROWID_INFO
    (rowid_in IN ROWID
    ,rowid_type OUT NUMBER
    ,object_number OUT NUMBER
    ,relative_fno OUT NUMBER
    ,block_number OUT NUMBER
    ,row_number OUT NUMBER);</PRE
></BLOCKQUOTE
><P
CLASS="para"
>Parses <EM
CLASS="emphasis"
>rowid_in</EM
> into its individual components. <EM
CLASS="emphasis"
>rowid_type</EM
> can beROWID_TYPE_EXTENDED or ROWID_TYPE_RESTRICTED. <EM
CLASS="emphasis"
>object_number</EM
> can be ROWID_OBJECT_UNDEFINED or the object number (OID).</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>FUNCTION DBMS_ROWID.ROWID_OBJECT
    (row_id IN ROWID)
RETURN NUMBER;</PRE
></BLOCKQUOTE
><P
CLASS="para"
>Returns the object number component of <EM
CLASS="emphasis"
>row_id.</EM
></P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>FUNCTION DBMS_ROWID.ROWID_RELATIVE_FNO
    (row_id IN ROWID)
RETURN NUMBER;</PRE
></BLOCKQUOTE
><P
CLASS="para"
>Returns the relative file number component of <EM
CLASS="emphasis"
>row_id.</EM
></P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>FUNCTION DBMS_ROWID.ROWID_ROW_NUMBER
    (row_id IN ROWID)
RETURN NUMBER;</PRE
></BLOCKQUOTE
><P
CLASS="para"
>Returns the row number component of <EM
CLASS="emphasis"
>row_id.</EM
></P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>FUNCTION DBMS_ROWID.ROWID_TO_ABSOLUTE_FNO
    (row_id IN ROWID
    ,schema_name IN VARCHAR2
    ,object_name IN VARCHAR2)
RETURN NUMBER;</PRE
></BLOCKQUOTE
><P
CLASS="para"
>Returns the absolute file number for <EM
CLASS="emphasis"
>row_id</EM
>, <EM
CLASS="emphasis"
>schema_name</EM
>, and <EM
CLASS="emphasis"
>object_name.</EM
></P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>FUNCTION DBMS_ROWID.ROWID_TO_EXTENDED
    (old_rowid IN ROWID
    ,schema_name IN VARCHAR2
    ,object_name IN VARCHAR2
    ,conversion_type IN INTEGER)
RETURN ROWID;</PRE
></BLOCKQUOTE
><P
CLASS="para"
>Returns the extended ROWID for the restricted <EM
CLASS="emphasis"
>old_rowid</EM
>, <EM
CLASS="emphasis"
>schema_name</EM
>, and <EM
CLASS="emphasis"
>object_name</EM
> using <EM
CLASS="emphasis"
>conversion_type.</EM
> The <EM
CLASS="emphasis"
>conversion_type</EM
> can be either ROWID_CONVERT_INTERNAL (ROWID was stored in a column of type ROWID) or ROWID_CONVERT_EXTERNAL (ROWID was stored in a column of type CHAR/VARCHAR/VARCHAR2).</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>FUNCTION DBMS_ROWID.ROWID_TO_RESTRICTED
    (old_rowid IN ROWID
    ,conversion_type IN INTEGER)
RETURN ROWID;</PRE
></BLOCKQUOTE
><P
CLASS="para"
>Returns a restricted ROWID for the extended <EM
CLASS="emphasis"
>old_rowid</EM
> using <EM
CLASS="emphasis"
>conversion_type</EM
>. The <EM
CLASS="emphasis"
>conversion_type</EM
> can be either ROWID_CONVERT_INTERNAL (ROWID will be stored in a column of type ROWID) or ROWID_CONVERT_EXTERNAL (ROWID will be stored in a column of type CHAR/VARCHAR/VARCHAR2).</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>FUNCTION DBMS_ROWID.ROWID_TYPE
    (row_id IN ROWID)
RETURN NUMBER;</PRE
></BLOCKQUOTE
><P
CLASS="para"
>Returns ROWID_TYPE_EXTENDED or ROWID_TYPE_RESTRICTED for <EM
CLASS="emphasis"
>row_id.</EM
></P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>FUNCTION DBMS_ROWID.ROWID_VERIFY
    (rowid_in IN ROWID
    ,schema_name IN VARCHAR2
    ,object_name IN VARCHAR2
    ,conversion_type IN INTEGER)
RETURN NUMBER;</PRE
></BLOCKQUOTE
><P
CLASS="para"
>Returns ROWID_VALID or ROWID_INVALID for <EM
CLASS="emphasis"
>rowid_in</EM
>, <EM
CLASS="emphasis"
>schema_name</EM
>, and <EM
CLASS="emphasis"
>object_name</EM
>, using <EM
CLASS="emphasis"
>conversion_type</EM
>. The <EM
CLASS="emphasis"
>conversion_type</EM
> can be either ROWID_CONVERT_INTERNAL (<EM
CLASS="emphasis"
>rowid_in</EM
> is stored in a column of type ROWID) or ROWID_CONVERT_EXTERNAL (<EM
CLASS="emphasis"
>rowid_in</EM
> is stored in a column of type CHAR/VARCHAR/VARCHAR2).</P
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="plsqlbip-SECT-3.14"
>1.3.14 DBMS_SESSION</A
></H3
><P
CLASS="para"
>DBMS_SESSION provides facilities to set and modify session settings, enable or disable roles, and manage session resources.</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>PROCEDURE DBMS_SESSION.CLOSE_DATABASE_LINK
    (dblink IN VARCHAR2);</PRE
></BLOCKQUOTE
><P
CLASS="para"
>Closes the database link <EM
CLASS="emphasis"
>dblink</EM
> or raises an exception if <EM
CLASS="emphasis"
>dblink</EM
> is not open or is in use. </P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>PROCEDURE DBMS_SESSION.FREE_UNUSED_USER_MEMORY;</PRE
></BLOCKQUOTE
><P
CLASS="para"
>Releases freeable session memory back to the operating system (dedicated connection) or the Oracle shared pool (shared server connection).</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>FUNCTION DBMS_SESSION.IS_ROLE_ENABLED
    (rolename IN VARCHAR2)
RETURN BOOLEAN;</PRE
></BLOCKQUOTE
><P
CLASS="para"
>Returns TRUE if the <EM
CLASS="emphasis"
>rolename</EM
> is currently enabled in the session. </P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>FUNCTION DBMS_SESSION.IS_SESSION_ALIVE
    (uniqueid IN VARCHAR2)
RETURN BOOLEAN;</PRE
></BLOCKQUOTE
><P
CLASS="para"
>Returns TRUE if the session identified by <EM
CLASS="emphasis"
>uniqueid</EM
> is still alive. Oracle8 only.</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>PROCEDURE DBMS_SESSION.RESET_PACKAGE;</PRE
></BLOCKQUOTE
><P
CLASS="para"
>Resets all package states in the session, destroying the values of all persistent package variables.</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>PROCEDURE DBMS_SESSION.SET_CLOSE_CACHED_OPEN_CURSORS
    (close_cursors IN BOOLEAN);</PRE
></BLOCKQUOTE
><P
CLASS="para"
>Overrides the CLOSE_CACHED_OPEN_CURSORS database parameter at the session level with the value in <EM
CLASS="emphasis"
>close_cursors</EM
>.</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>PROCEDURE DBMS_SESSION.SET_LABEL
    (lbl IN VARCHAR2);</PRE
></BLOCKQUOTE
><P
CLASS="para"
>Sets the session's Trusted Oracle session label to <EM
CLASS="emphasis"
>lbl</EM
>.</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>PROCEDURE DBMS_SESSION.SET_MLS_LABEL_FORMAT
    (fmt IN VARCHAR2);</PRE
></BLOCKQUOTE
><P
CLASS="para"
>Sets the session's default Trusted Oracle label format to <EM
CLASS="emphasis"
>fmt</EM
>. </P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>PROCEDURE DBMS_SESSION.SET_NLS
    (param IN VARCHAR2
    ,value IN VARCHAR2);</PRE
></BLOCKQUOTE
><P
CLASS="para"
>Sets the National Language Support parameter <EM
CLASS="emphasis"
>param</EM
> to <EM
CLASS="emphasis"
>value</EM
>. When <EM
CLASS="emphasis"
>value</EM
> is a format mask, use a triple-quoted string.</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>PROCEDURE DBMS_SESSION.SET_ROLE
    (role_cmd IN VARCHAR2);</PRE
></BLOCKQUOTE
><P
CLASS="para"
>Enables role(s) by appending <EM
CLASS="emphasis"
>role_cmd</EM
> to the SET_ROLE command and executing. Disables all roles by setting <EM
CLASS="emphasis"
>role_cmd</EM
> to NONE.</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>PROCEDURE DBMS_SESSION.SET_SQL_TRACE
    (sql_trace IN BOOLEAN);</PRE
></BLOCKQUOTE
><P
CLASS="para"
>Turns SQL tracing on or off in the session according to <EM
CLASS="emphasis"
>sql_trace</EM
> (TRUE = on, FALSE = off). </P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>FUNCTION DBMS_SESSION.UNIQUE_SESSION_ID
RETURN VARCHAR2;</PRE
></BLOCKQUOTE
><P
CLASS="para"
>Returns a string identifier unique to the session up to 24 bytes in length.</P
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="plsqlbip-SECT-3.15"
>1.3.15 DBMS_SHARED_POOL</A
></H3
><P
CLASS="para"
>DBMS_SHARED_POOL contains programs to help manage the Oracle Shared Global Area (SGA) shared pool.</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>PROCEDURE DBMS_SHARED_POOL.ABORTED_REQUEST_THRESHOLD
    (threshold_size IN NUMBER);</PRE
></BLOCKQUOTE
><P
CLASS="para"
>Sets the maximum object size for which the shared pool will flush other objects to make room. Attempts to load objects larger than <EM
CLASS="emphasis"
>threshold_size</EM
> bytes produce ORA-04031 errors if sufficient space is not available.</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>PROCEDURE DBMS_SHARED_POOL.KEEP
    (name IN VARCHAR2
    ,flag IN CHAR DEFAULT `P');</PRE
></BLOCKQUOTE
><P
CLASS="para"
>Pins the object identified by <EM
CLASS="emphasis"
>name</EM
> in the shared pool. The object's type is identified by <EM
CLASS="emphasis"
>flag</EM
>: "P" or "p" for package, procedure, or function; "Q" or "q" for sequences; and "R" or "r" for triggers. Specifies any other character <EM
CLASS="emphasis"
>flag</EM
> to pin a cursor identified by address and hash value (from V$SQLAREA) in <EM
CLASS="emphasis"
>name.</EM
></P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>PROCEDURE DBMS_SHARED_POOL.SIZES
    (minsize IN NUMBER);</PRE
></BLOCKQUOTE
><P
CLASS="para"
>Displays objects and cursors in the shared pool that exceed <EM
CLASS="emphasis"
>minsize</EM
> kilobytes in size. </P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>PROCEDURE DBMS_SHARED_POOL.UNKEEP
    (name IN VARCHAR2
    ,flag IN CHAR DEFAULT `P');</PRE
></BLOCKQUOTE
><P
CLASS="para"
>Unpins the object of type <EM
CLASS="emphasis"
>flag</EM
> and identified by <EM
CLASS="emphasis"
>name</EM
> from the shared pool. Valid <EM
CLASS="emphasis"
>flag</EM
> values are the same values as for DBMS_SHARED_POOL.KEEP.</P
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="plsqlbip-SECT-3.16"
>1.3.16 DBMS_SPACE</A
></H3
><P
CLASS="para"
>DBMS_SPACE contains procedures that provide internal space utilization and freelist information about table, index, and cluster segments.</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>PROCEDURE DBMS_SPACE.FREE_BLOCKS
    (segment_owner IN VARCHAR2
    ,segment_name IN VARCHAR2
    ,segment_type IN VARCHAR2
    ,freelist_group_id IN NUMBER
    ,free_blks OUT NUMBER
    ,scan_limit IN NUMBER DEFAULT NULL
  [ ,partition_name IN VARCHAR2 DEFAULT NULL ]);</PRE
></BLOCKQUOTE
><P
CLASS="para"
>Returns into <EM
CLASS="emphasis"
>free_blks</EM
> the number of blocks on the freelist for segment <EM
CLASS="emphasis"
>segment_name</EM
> of type <EM
CLASS="emphasis"
>segment_type</EM
> (TABLE, INDEX, or CLUSTER) owned by <EM
CLASS="emphasis"
>segment_owner</EM
> in partition <EM
CLASS="emphasis"
>partition_name</EM
> (optional, and Oracle8 only). <EM
CLASS="emphasis"
>Scan_limit</EM
> (optional) limits the number of free blocks scanned.</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>PROCEDURE DBMS_SPACE.UNUSED_SPACE
    (segment_owner IN VARCHAR2
    ,segment_name IN VARCHAR2
    ,segment_type IN VARCHAR2
    ,total_blocks OUT NUMBER
    ,total_bytes OUT NUMBER
    ,unused_blocks OUT NUMBER
    ,unused_bytes OUT NUMBER
    ,last_used_extent_file_id OUT NUMBER
    ,last_used_extent_block_id OUT NUMBER
    ,last_used_block OUT NUMBER
  [ ,partition_name IN VARCHAR2 DEFAULT NULL ]);</PRE
></BLOCKQUOTE
><P
CLASS="para"
>Returns the highwater mark (<EM
CLASS="emphasis"
>last_used_extent_file_id</EM
>, <EM
CLASS="emphasis"
>last_used_extent_block_id</EM
>, and <EM
CLASS="emphasis"
>last_used_block</EM
>), space used (<EM
CLASS="emphasis"
>total_blocks</EM
>, <EM
CLASS="emphasis"
>total_bytes</EM
>), and space unused (<EM
CLASS="emphasis"
>unused_blocks</EM
>, <EM
CLASS="emphasis"
>unused_bytes</EM
>) in segment <EM
CLASS="emphasis"
>segment_name</EM
> of type <EM
CLASS="emphasis"
>segment_type</EM
> (TABLE, INDEX, or CLUSTER) owned by <EM
CLASS="emphasis"
>segment_owner</EM
> in partition <EM
CLASS="emphasis"
>partition_name.</EM
> Optional, and Oracle8 only. </P
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="plsqlbip-SECT-3.17"
>1.3.17 DBMS_SQL</A
></H3
><P
CLASS="para"
>DBMS_SQL provides routines for using dynamic SQL within PL/SQL. For Oracle8, this is the routine that provides support for array operations in PL/SQL.</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>PROCEDURE DBMS_SQL.BIND_ARRAY
    (c IN INTEGER
    ,name IN VARCHAR2
    ,&lt;table_variable IN datatype&gt;
    [,index1 IN INTEGER
     ,index2 IN INTEGER]);</PRE
></BLOCKQUOTE
><P
CLASS="para"
>Binds the <EM
CLASS="emphasis"
>table_variable</EM
> array to the placeholder <EM
CLASS="emphasis"
>name</EM
> in the parsed (but not executed) SQL statement in the cursor <EM
CLASS="emphasis"
>c</EM
> (returned by the OPEN_CURSOR call). For Oracle8, used to perform array processing. The &lt;<EM
CLASS="emphasis"
>table_variable</EM
> IN <EM
CLASS="emphasis"
>datatype</EM
>&gt; can be any of the following:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>  n_tab IN DBMS_SQL.NUMBER_TABLE
  c_tab IN DBMS_SQL.VARCHAR2_TABLE
  d_tab IN DBMS_SQL.DATE_TABLE
  bl_tab IN DBMS_SQL.BLOB_TABLE
  cl_tab IN DBMS_SQL.CLOB_TABLE
  bf_tab IN DBMS_SQL.BFILE_TABLE</PRE
></BLOCKQUOTE
><P
CLASS="para"
>The optional argument <EM
CLASS="emphasis"
>index1</EM
> defines the lower bound (first row) within the table and <EM
CLASS="emphasis"
>index2</EM
> defines the upper bound (last row). Oracle 8 only.</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>PROCEDURE DBMS_SQL.BIND_VARIABLE
    (c IN INTEGER
    ,name IN VARCHAR2
    ,value IN NUMBER | VARACHAR2 | DATE | BLOB | CLOB
        CHARACTER SET ANY_CS | BFILE
   [,out_value_size IN INTEGER]);</PRE
></BLOCKQUOTE
><P
CLASS="para"
>Binds the scalar <EM
CLASS="emphasis"
>value</EM
> to the placeholder <EM
CLASS="emphasis"
>name</EM
> in the parsed SQL statement in the cursor <EM
CLASS="emphasis"
>c</EM
>, optionally with maximum expected size of <EM
CLASS="emphasis"
>value</EM
> being <EM
CLASS="emphasis"
>out_value_size</EM
>.</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>PROCEDURE DBMS_SQL.BIND_VARIABLE_CHAR
    (c IN INTEGER
    ,name IN VARCHAR2
    ,value IN CHAR CHARACTER SET ANY_CS
   [,out_value_size IN INTEGER]);</PRE
></BLOCKQUOTE
><P
CLASS="para"
>Binds the scalar CHAR/NCHAR <EM
CLASS="emphasis"
>value</EM
> to the placeholder <EM
CLASS="emphasis"
>name</EM
> in the parsed SQL statement in the cursor <EM
CLASS="emphasis"
>c</EM
>, optionally with maximum expected size of <EM
CLASS="emphasis"
>value</EM
> being <EM
CLASS="emphasis"
>out_value_size</EM
>.</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>PROCEDURE DBMS_SQL.BIND_VARIABLE_RAW
    (c IN INTEGER
    ,name IN VARCHAR2
    ,value IN RAW
   [,out_value_size IN INTEGER]);</PRE
></BLOCKQUOTE
><P
CLASS="para"
>Binds the scalar RAW <EM
CLASS="emphasis"
>value</EM
> to the placeholder <EM
CLASS="emphasis"
>name</EM
> in the parsed SQL statement in the cursor <EM
CLASS="emphasis"
>c</EM
> (returned by the OPEN_CURSOR call), optionally with maximum expected size of <EM
CLASS="emphasis"
>value</EM
> being <EM
CLASS="emphasis"
>out_value_size</EM
>.</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>PROCEDURE DBMS_SQL.BIND_VARIABLE_ROWID
    (c IN INTEGER
    ,name IN VARCHAR2
    ,value IN ROWID);</PRE
></BLOCKQUOTE
><P
CLASS="para"
>Binds the scalar ROWID <EM
CLASS="emphasis"
>value</EM
> to the placeholder <EM
CLASS="emphasis"
>name</EM
> in the parsed SQL statement in the cursor <EM
CLASS="emphasis"
>c</EM
>.</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>PROCEDURE DBMS_SQL.CLOSE_CURSOR
    (c IN OUT INTEGER);</PRE
></BLOCKQUOTE
><P
CLASS="para"
>Closes cursor <EM
CLASS="emphasis"
>c</EM
>.</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>PROCEDURE DBMS_SQL.COLUMN_VALUE
    (c IN INTEGER
    ,position IN INTEGER
    ,value OUT NUMBER | VARCHAR | DATE | BLOB | CLOB
        CHARACTER SET ANY_CS | BFILE | MLSLABEL );
        CHARACTER SET ANY_CS | BFILE | MLSLABEL );
   [,column_error OUT NUMBER
   [,actual_length OUT INTEGER]]);</PRE
></BLOCKQUOTE
><P
CLASS="para"
>Transfers the contents of column number <EM
CLASS="emphasis"
>position</EM
> in the SELECT list of the fetched cursor <EM
CLASS="emphasis"
>c</EM
> into the variable <EM
CLASS="emphasis"
>value</EM
>, optionally setting <EM
CLASS="emphasis"
>actual_length</EM
> to the pre-truncated length in bytes, and <EM
CLASS="emphasis"
>column_error</EM
> to the error code for the specified value. Truncation may occur due to a difference in size between the retrieved value in the cursor and the variable length. MLSLABEL is for Trusted Oracle only.</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>PROCEDURE DBMS_SQL.COLUMN_VALUE
    (c IN INTEGER
    ,position IN INTEGER
    ,&lt;table_parameter IN table_type&gt;);</PRE
></BLOCKQUOTE
><P
CLASS="para"
>Transfers the array contents of column number <EM
CLASS="emphasis"
>position</EM
> in the SELECT list of the fetched array from cursor <EM
CLASS="emphasis"
>c</EM
> into the PL/SQL table. For Oracle8 only, the <EM
CLASS="emphasis"
>table_parameter</EM
> and <EM
CLASS="emphasis"
>table_type</EM
> can be any of the following:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>  n_tab IN DBMS_SQL.NUMBER_TABLE
  c_tab IN DBMS_SQL.VARCHAR2_TABLE
  d_tab IN DBMS_SQL.DATE_TABLE
  bl_tab IN DBMS_SQL.BLOB_TABLE
  cl_tab IN DBMS_SQL.CLOB_TABLE
  bf_tab IN DBMS_SQL.BFILE_TABLE</PRE
></BLOCKQUOTE
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>&#13;PROCEDURE DBMS_SQL.COLUMN_VALUE_CHAR
    (c IN INTEGER
    ,position IN INTEGER
    ,value OUT CHAR CHARACTER SET ANY_CS
   [,column_error OUT NUMBER
   [,actual_length OUT INTEGER]]);</PRE
></BLOCKQUOTE
><P
CLASS="para"
>Transfers the contents of column number <EM
CLASS="emphasis"
>position</EM
> in the SELECT list of the fetched cursor <EM
CLASS="emphasis"
>c</EM
> into the CHAR/NCHAR variable <EM
CLASS="emphasis"
>value</EM
>, optionally setting <EM
CLASS="emphasis"
>actual_length</EM
> to the pre-truncated length in characters, and the <EM
CLASS="emphasis"
>column_error</EM
> to the error code for the specified value. Truncation may occur due to a difference in size between the retrieved value in the cursor and the variable length.</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>PROCEDURE DBMS_SQL.COLUMN_VALUE_LONG
    (c IN INTEGER
    ,position IN INTEGER
    ,length IN INTEGER
    ,offset IN INTEGER
    ,value OUT VARCHAR2
    ,value_length OUT INTEGER);</PRE
></BLOCKQUOTE
><P
CLASS="para"
>Transfers the contents of column number <EM
CLASS="emphasis"
>position</EM
> in the SELECT list of the fetched cursor <EM
CLASS="emphasis"
>c</EM
> into the VARCHAR2 variable <EM
CLASS="emphasis"
>value</EM
>, starting <EM
CLASS="emphasis"
>offset</EM
> bytes into the LONG column and extending for <EM
CLASS="emphasis"
>length</EM
> bytes. Also sets <EM
CLASS="emphasis"
>value_length</EM
> to the actual length of the retrieved value.</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>PROCEDURE DBMS_SQL.COLUMN_VALUE_RAW
    (c IN INTEGER
    ,position IN INTEGER
    ,value OUT RAW
   [,column_error OUT NUMBER
   [,actual_length OUT INTEGER]]);</PRE
></BLOCKQUOTE
><P
CLASS="para"
>Transfers the contents of column number <EM
CLASS="emphasis"
>position</EM
> in the SELECT list of the fetched cursor <EM
CLASS="emphasis"
>c</EM
> into the RAW variable <EM
CLASS="emphasis"
>value</EM
>, optionally setting <EM
CLASS="emphasis"
>actual_length</EM
> to the pre-truncated length in bytes, and the <EM
CLASS="emphasis"
>column_error</EM
> to the error code for the specified value. Truncation may occur due to a difference in size between the retrieved value in the cursor and the variable length.</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>PROCEDURE DBMS_SQL.COLUMN_VALUE_ROWID
    (c IN INTEGER
    ,position IN INTEGER
    ,value OUT ROWID);
   [,column_error OUT NUMBER
   [,actual_length OUT INTEGER]]);</PRE
></BLOCKQUOTE
><P
CLASS="para"
>Transfers the contents of column number <EM
CLASS="emphasis"
>position</EM
> in the SELECT list of the fetched cursor <EM
CLASS="emphasis"
>c</EM
> into the ROWID variable <EM
CLASS="emphasis"
>value</EM
>, optionally setting <EM
CLASS="emphasis"
>actual_length</EM
> to the pre-truncated length in bytes, and the <EM
CLASS="emphasis"
>column_error</EM
> to the error code for the specified value. Truncation may occur due to a difference in size between the retrieved value in the cursor and the variable length. </P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>PROCEDURE DBMS_SQL.DEFINE_ARRAY
    (c IN INTEGER
    ,position IN INTEGER
    ,&lt;table_parameter IN table_type&gt;
    ,cnt IN INTEGER
    ,lower_bound IN INTEGER);</PRE
></BLOCKQUOTE
><P
CLASS="para"
>Defines the datatype and size of the elements in the fetch array for column number <EM
CLASS="emphasis"
>position</EM
> in the SELECT list of the cursor <EM
CLASS="emphasis"
>c</EM
> as the same datatype and size as the nested table <EM
CLASS="emphasis"
>table_parameter</EM
>, beginning with row <EM
CLASS="emphasis"
>lower_bound</EM
>, and having a maximum array size of <EM
CLASS="emphasis"
>cnt</EM
> rows. For Oracle8, <EM
CLASS="emphasis"
>table_parameter</EM
> and <EM
CLASS="emphasis"
>table_type</EM
> can be any of these:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>  n_tab IN DBMS_SQL.NUMBER_TABLE
  c_tab IN DBMS_SQL.VARCHAR2_TABLE
  d_tab IN DBMS_SQL.DATE_TABLE
  bl_tab IN DBMS_SQL.BLOB_TABLE
  cl_tab IN DBMS_SQL.CLOB_TABLE
  bf_tab IN DBMS_SQL.BFILE_TABLE</PRE
></BLOCKQUOTE
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>PROCEDURE DBMS_SQL.DEFINE_COLUMN
    (c IN INTEGER
    ,position IN INTEGER
    , column IN NUMBER | DATE | BLOB | CLOB CHARACTER SET
       ANY_CD | BFILE | MLSLABEL);</PRE
></BLOCKQUOTE
><P
CLASS="para"
>The variable or expression <EM
CLASS="emphasis"
>column</EM
> defines the datatype for column number <EM
CLASS="emphasis"
>position</EM
> in the SELECT list of the cursor <EM
CLASS="emphasis"
>c</EM
>. MLSLABEL is for Trusted Oracle only.</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>PROCEDURE DBMS_SQL.DEFINE_COLUMN
    (c IN INTEGER
    ,position IN INTEGER
    ,column IN VARCHAR2 CHARACTER SET ANY_CS
    ,column_size IN INTEGER);</PRE
></BLOCKQUOTE
><P
CLASS="para"
>The variable or expression <EM
CLASS="emphasis"
>column</EM
> defines the datatype as VARCHAR2/NVARCHAR2 and size as <EM
CLASS="emphasis"
>column_size</EM
> characters for column number <EM
CLASS="emphasis"
>position</EM
> in the SELECT list of the cursor <EM
CLASS="emphasis"
>c</EM
>.</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>PROCEDURE DBMS_SQL.DEFINE_COLUMN_CHAR
    (c IN INTEGER
    ,position IN INTEGER
    ,column IN CHAR CHARACTER SET ANY_CS
    ,column_size IN INTEGER);</PRE
></BLOCKQUOTE
><P
CLASS="para"
>The variable or expression <EM
CLASS="emphasis"
>column</EM
> defines the datatype as CHAR/NCHAR and size as <EM
CLASS="emphasis"
>column_size</EM
> characters for column number <EM
CLASS="emphasis"
>position</EM
> in the SELECT list of the cursor <EM
CLASS="emphasis"
>c</EM
>.</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>PROCEDURE DBMS_SQL.DEFINE_COLUMN_LONG
    (c IN INTEGER
    ,position IN INTEGER);</PRE
></BLOCKQUOTE
><P
CLASS="para"
>Defines the datatype as LONG for column number <EM
CLASS="emphasis"
>position</EM
> in the SELECT list of the cursor <EM
CLASS="emphasis"
>c</EM
>.</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>PROCEDURE DBMS_SQL.DEFINE_COLUMN_RAW
    (c IN INTEGER
    ,position IN INTEGER
    ,column IN RAW
    ,column_size IN INTEGER);</PRE
></BLOCKQUOTE
><P
CLASS="para"
>The variable or expression <EM
CLASS="emphasis"
>column</EM
> as RAW of size <EM
CLASS="emphasis"
>column_size</EM
> bytes for column number <EM
CLASS="emphasis"
>position</EM
> in the SELECT list of the cursor <EM
CLASS="emphasis"
>c</EM
>.</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>PROCEDURE DBMS_SQL.DEFINE_COLUMN_ROWID
    (c IN INTEGER
    ,position IN INTEGER
    ,column IN ROWID);</PRE
></BLOCKQUOTE
><P
CLASS="para"
>The variable or expression <EM
CLASS="emphasis"
>column</EM
> defines the datatype as ROWID for column number <EM
CLASS="emphasis"
>position</EM
> in the SELECT list of the cursor <EM
CLASS="emphasis"
>c</EM
>.</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>PROCEDURE DBMS_SQL.DESCRIBE_COLUMNS
    (c IN INTEGER
    ,col_cnt OUT INTEGER
    ,desc_t OUT DESC_TAB);</PRE
></BLOCKQUOTE
><P
CLASS="para"
>Populates PL/SQL table <EM
CLASS="emphasis"
>desc_t</EM
> of type DBMS_SQL.DESC_REC with the description of columns of cursor <EM
CLASS="emphasis"
>c</EM
>. <EM
CLASS="emphasis"
>col_cnt</EM
> is the number of columns in <EM
CLASS="emphasis"
>c</EM
> and the number of rows in <EM
CLASS="emphasis"
>desc_t.</EM
></P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>FUNCTION DBMS_SQL.EXECUTE
    (c IN INTEGER)
RETURN INTEGER;</PRE
></BLOCKQUOTE
><P
CLASS="para"
>For INSERT, UPDATE, or DELETE statements, returns the number of rows processed by executing the cursor <EM
CLASS="emphasis"
>c</EM
>. For all other SQL statements, executes the cursor <EM
CLASS="emphasis"
>c</EM
> and returns an undefined value.</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>FUNCTION DBMS_SQL.EXECUTE_AND_FETCH
    (c IN INTEGER
    ,exact IN BOOLEAN DEFAULT FALSE)
RETURN INTEGER;</PRE
></BLOCKQUOTE
><P
CLASS="para"
>Returns the number of rows fetched by executing and fetching cursor <EM
CLASS="emphasis"
>c</EM
>. Raises an exception if more than one row is fetched when <EM
CLASS="emphasis"
>exact</EM
> is set to TRUE. Multiple rows require Oracle8 and array processing.</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>FUNCTION DBMS_SQL.FETCH_ROWS
    (c IN INTEGER)
RETURN INTEGER;</PRE
></BLOCKQUOTE
><P
CLASS="para"
>Fetches and returns the number of rows fetched from cursor <EM
CLASS="emphasis"
>c</EM
>, or 0 (zero) when there are no more rows to fetch.</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>FUNCTION DBMS_SQL.IS_OPEN
    (c IN INTEGER)
RETURN BOOLEAN;</PRE
></BLOCKQUOTE
><P
CLASS="para"
>Returns TRUE if cursor <EM
CLASS="emphasis"
>c</EM
> is open, FALSE otherwise.</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>FUNCTION DBMS_SQL.LAST_ERROR_POSITION
RETURN INTEGER;</PRE
></BLOCKQUOTE
><P
CLASS="para"
>Returns the byte offset in the SQL statement where the last error occurred. Must be called immediately after an EXECUTE or EXECUTE_AND_FETCH (typically in the exception handler).</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>FUNCTION DBMS_SQL.LAST_ROW_COUNT
RETURN INTEGER;</PRE
></BLOCKQUOTE
><P
CLASS="para"
>Returns the total number of rows fetched so far&nbsp;-- similar to the %ROWCOUNT attribute of static cursors.</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>FUNCTION DBMS_SQL.LAST_ROW_ID
RETURN ROWID;</PRE
></BLOCKQUOTE
><P
CLASS="para"
>Returns the ROWID of the most recently fetched row. Must be called immediately after a FETCH_ROWS or EXECUTE_AND_FETCH.</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>FUNCTION DBMS_SQL.LAST_SQL_FUNCTION_CODE
RETURN INTEGER;</PRE
></BLOCKQUOTE
><P
CLASS="para"
>Returns the SQL function code for the SQL statement. A complete list of these function codes can be found in the Oracle Corporation's Server Reference Manual in the section describing the table column V$SESSION.COMMAND.</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>FUNCTION DBMS_SQL.OPEN_CURSOR
RETURN INTEGER;</PRE
></BLOCKQUOTE
><P
CLASS="para"
>Returns an INTEGER pointer to memory allocated for a dynamic cursor.</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>PROCEDURE DBMS_SQL.PARSE
    (c IN INTEGER
    ,statement IN VARCHAR2
    ,language_flag IN INTEGER);</PRE
></BLOCKQUOTE
><P
CLASS="para"
>Parses a SQL <EM
CLASS="emphasis"
>statement</EM
> less than 32K bytes in length and associates it with cursor <EM
CLASS="emphasis"
>c</EM
>, following database behavior specified by <EM
CLASS="emphasis"
>language_flag</EM
> (either DBMS_SQL.NATIVE, DBMS_SQL.V7, or DBMS_SQL.V6). Do not terminate your SQL string with a semicolon unless it is a PL/SQL block. For DDL statements (e.g., TRUNCATE TABLE), this also executes the statement.</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>PROCEDURE DBMS_SQL.PARSE
    (c IN INTEGER
    ,statement IN VARCHAR2S
    ,lb IN INTEGER
    ,ub IN INTEGER
    ,lfflg IN BOOLEAN
    ,language_flag IN INTEGER);</PRE
></BLOCKQUOTE
><P
CLASS="para"
>Parses a SQL <EM
CLASS="emphasis"
>statement</EM
> contained in rows <EM
CLASS="emphasis"
>lb</EM
> through <EM
CLASS="emphasis"
>ub</EM
> in the PL/SQL table and associates it with cursor <EM
CLASS="emphasis"
>c</EM
>, following database behavior specified by <EM
CLASS="emphasis"
>language_flag</EM
> (either DBMS_SQL.NATIVE, DBMS_SQL.V7, or DBMS_SQL.V6), and appending a line feed after each row from <EM
CLASS="emphasis"
>statement</EM
> if <EM
CLASS="emphasis"
>lfflg</EM
> is set to TRUE.</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>PROCEDURE DBMS_SQL.VARIABLE_VALUE
    (c IN INTEGER
    ,name IN VARCHAR2
    ,value OUT NUMBER | VARCHAR2 | DATE | BLOB | CLOB
        CHARACTER SET ANY_CS| BFILE | MLSLABEL);</PRE
></BLOCKQUOTE
><P
CLASS="para"
>Retrieves the value of the host variable <EM
CLASS="emphasis"
>name</EM
> in cursor <EM
CLASS="emphasis"
>c</EM
> into the PL/SQL NUMBER variable <EM
CLASS="emphasis"
>value</EM
>. MLSLABEL is for Trusted Oracle only.</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>PROCEDURE DBMS_SQL.VARIABLE_VALUE
    (c IN INTEGER
    ,name IN VARCHAR2
    ,value IN &lt;table_type&gt;);</PRE
></BLOCKQUOTE
><P
CLASS="para"
>Retrieves the values of the host variable <EM
CLASS="emphasis"
>name</EM
> in cursor <EM
CLASS="emphasis"
>c</EM
> into the PL/SQL table <EM
CLASS="emphasis"
>value</EM
>. For Oracle8 only, the <EM
CLASS="emphasis"
>table_type</EM
> can be one of the following: </P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>DBMS_SQL.NUMBER_TABLE
DBMS_SQL.VARCHAR2_TABLE
DBMS_SQL.DATE_TABLE
DBMS_SQL.BLOB_TABLE
DBMS_SQL.CLOB_TABLE
DBMS_SQL.BFILE_TABLE</PRE
></BLOCKQUOTE
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>PROCEDURE DBMS_SQL.VARIABLE_VALUE_CHAR
    (c IN INTEGER
    ,name IN VARCHAR2
    ,value OUT CHAR CHARACTER SET ANY_CS);</PRE
></BLOCKQUOTE
><P
CLASS="para"
>Retrieves the value of the host variable <EM
CLASS="emphasis"
>name</EM
> in cursor <EM
CLASS="emphasis"
>c</EM
> into the CHAR/NCHAR table <EM
CLASS="emphasis"
>value.</EM
></P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>PROCEDURE DBMS_SQL.VARIABLE_VALUE_RAW
    (c IN INTEGER
    ,name IN VARCHAR2
    ,value OUT RAW);</PRE
></BLOCKQUOTE
><P
CLASS="para"
>Retrieves the value of the host variable <EM
CLASS="emphasis"
>name</EM
> in cursor <EM
CLASS="emphasis"
>c</EM
> into the RAW variable <EM
CLASS="emphasis"
>value.</EM
></P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>PROCEDURE DBMS_SQL.VARIABLE_VALUE_ROWID
    (c IN INTEGER
    ,name IN VARCHAR2
    ,value OUT ROWID);</PRE
></BLOCKQUOTE
><P
CLASS="para"
>Retrieves the value of the host variable <EM
CLASS="emphasis"
>name</EM
> in cursor <EM
CLASS="emphasis"
>c</EM
> into the ROWID variable <EM
CLASS="emphasis"
>value</EM
>. </P
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="plsqlbip-SECT-3.18"
>1.3.18 DBMS_STANDARD</A
></H3
><P
CLASS="para"
>DBMS_STANDARD contains &quot;kernel extensions to package STANDARD.&quot; These include functions and procedures for use in triggers to support transactions. These functions and procedures, like those in package STANDARD, are special in that they do not need to be qualified with the owner or package name, and are usually assumed to be part of the PL/SQL language.</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>PROCEDURE DBMS_STANDARD.RAISE_APPLICATION_ERROR
    (num BINARY_INTEGER
    ,msg VARCHAR2
    ,keeperrorstack boolean default FALSE);</PRE
></BLOCKQUOTE
><P
CLASS="para"
>Raises PL/SQL exception <EM
CLASS="emphasis"
>num</EM
>, together with text <EM
CLASS="emphasis"
>msg</EM
> from a stored program. The error can be placed together with any other errors on the error stack. If <EM
CLASS="emphasis"
>keeperrorstack</EM
> is set to TRUE, default behavior is to replace the error stack with this single exception. <EM
CLASS="emphasis"
>num</EM
> can range from -20999 to -20000, and <EM
CLASS="emphasis"
>msg</EM
> can be up to 2048 bytes long.</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>FUNCTION INSERTING RETURN boolean;
FUNCTION DELETING  RETURN boolean;
FUNCTION UPDATING  RETURN boolean;
FUNCTION UPDATING (colnam VARCHAR2) RETURN boolean;</PRE
></BLOCKQUOTE
><P
CLASS="para"
>Conditional predicates used to determine the type of Data Manipulation Language (DML) operation that caused a trigger to fire. These functions are only useful within triggers; for example "...IF INSERTING THEN...." </P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>PROCEDURE COMMIT;
PROCEDURE COMMIT_CM (vc VARCHAR2);
PROCEDURE ROLLBACK_NR;
PROCEDURE ROLLBACK_SV(save_point VARCHAR2);
PROCEDURE SAVEPOINT(save_point VARCHAR2);
PROCEDURE SET_TRANSACTION_USE(vc VARCHAR2);   </PRE
></BLOCKQUOTE
><P
CLASS="para"
>These procedures support transaction control. They are analogous to the SQL statements: COMMIT, COMMIT COMMENT, ROLLBACK, ROLLBACK TO SAVEPOINT, SAVEPOINT, and SET TRANSACTION USE ROLLBACK SEGMENT.</P
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="plsqlbip-SECT-3.19"
>1.3.19 DBMS_SYSTEM</A
></H3
><P
CLASS="para"
>DBMS_SYSTEM contains procedures for setting special internal trace events, including SQL tracing, at the session level.</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>PROCEDURE DBMS_SYSTEM.READ_EV
    (iev BINARY_INTEGER
    ,oev OUT BINARY_INTEGER);</PRE
></BLOCKQUOTE
><P
CLASS="para"
>Returns the current session's event level setting for trace event number <EM
CLASS="emphasis"
>iev</EM
> into variable <EM
CLASS="emphasis"
>oev</EM
>.</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>PROCEDURE DBMS_SYSTEM.SET_EV
    (si BINARY_INTEGER
    ,se BINARY_INTEGER
    ,ev BINARY_INTEGER
    ,le BINARY_INTEGER
    ,nm IN VARCHAR2);</PRE
></BLOCKQUOTE
><P
CLASS="para"
>Sets the level for event number <EM
CLASS="emphasis"
>ev</EM
> in the session identified by sid <EM
CLASS="emphasis"
>si</EM
> and serial number <EM
CLASS="emphasis"
>se</EM
> to the value specified by <EM
CLASS="emphasis"
>le</EM
>. Variable <EM
CLASS="emphasis"
>nm</EM
> is used to specify the event name.</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>PROCEDURE DBMS_SYSTEM.SET_SQL_TRACE_IN_SESSION
    (sid IN NUMBER
    ,serial# IN NUMBER
    ,sql_trace IN BOOLEAN);</PRE
></BLOCKQUOTE
><P
CLASS="para"
>Turns SQL tracing on or off in the session identified by sid (<EM
CLASS="emphasis"
>sid)</EM
> and serial number (<EM
CLASS="emphasis"
>serial#)</EM
> according to the value of <EM
CLASS="emphasis"
>sql_trace</EM
> (TRUE = on; FALSE = off).</P
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="plsqlbip-SECT-3.20"
>1.3.20 DBMS_TRANSACTION</A
></H3
><P
CLASS="para"
>DBMS_TRANSACTION contains a number of programs for local and distributed transaction management.</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>PROCEDURE DBMS_TRANSACTION.ADVISE_COMMIT;</PRE
></BLOCKQUOTE
><P
CLASS="para"
>Advises remote databases that in-doubt distributed transactions should be committed if possible.</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>PROCEDURE DBMS_TRANSACTION.ADVISE_NOTHING;</PRE
></BLOCKQUOTE
><P
CLASS="para"
>Removes advice from remote databases regarding in-doubt distributed transactions.</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>PROCEDURE DBMS_TRANSACTION.ADVISE_ROLLBACK;</PRE
></BLOCKQUOTE
><P
CLASS="para"
>Advises remote databases that in-doubt distributed transactions should be rolled back.</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>PROCEDURE DBMS_TRANSACTION.BEGIN_DISCRETE_TRANSACTION;</PRE
></BLOCKQUOTE
><P
CLASS="para"
>Sets the current transaction to use discrete transaction processing.</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>PROCEDURE DBMS_TRANSACTION.COMMIT;</PRE
></BLOCKQUOTE
><P
CLASS="para"
>Commits the current transaction. </P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>PROCEDURE DBMS_TRANSACTION.COMMIT_COMMENT
    (cmnt IN VARCHAR2);</PRE
></BLOCKQUOTE
><P
CLASS="para"
>Commits the current transaction and sends <EM
CLASS="emphasis"
>cmnt</EM
> as the in-doubt transaction comment to remote databases during distributed transactions. </P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>PROCEDURE DBMS_TRANSACTION.COMMIT_FORCE
    (xid IN VARCHAR2
    [,scn IN VARCHAR2 DEFAULT NULL]);</PRE
></BLOCKQUOTE
><P
CLASS="para"
>Forces the local portion of the in-doubt distributed transaction identified by transaction id <EM
CLASS="emphasis"
>xid</EM
> and (optionally) system change number <EM
CLASS="emphasis"
>scn</EM
> to commit. </P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>FUNCTION DBMS_TRANSACTION.LOCAL_TRANSACTION_ID
    (create_transaction IN BOOLEAN := FALSE)
RETURN VARCHAR2;</PRE
></BLOCKQUOTE
><P
CLASS="para"
>Returns Oracle's unique identifier for the current transaction, optionally beginning a new transaction when <EM
CLASS="emphasis"
>create_transaction</EM
> is TRUE.</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>PROCEDURE DBMS_TRANSACTION.PURGE_LOST_DB_ENTRY
    (xid IN VARCHAR2);</PRE
></BLOCKQUOTE
><P
CLASS="para"
>Forces Oracle to purge all local entries for the distributed transaction identified by <EM
CLASS="emphasis"
>xid</EM
> when a participating node has been permanently lost.</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>PROCEDURE DBMS_TRANSACTION.PURGE_MIXED
    (xid IN VARCHAR2);</PRE
></BLOCKQUOTE
><P
CLASS="para"
>Forces Oracle to purge local entries for the mixed outcome distributed transaction identified locally by <EM
CLASS="emphasis"
>xid</EM
>.</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>PROCEDURE DBMS_TRANSACTION.READ_ONLY;</PRE
></BLOCKQUOTE
><P
CLASS="para"
>Establishes transaction-level read consistency, where all queries return read-consistent images of data as of the transaction's start time.</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>PROCEDURE DBMS_TRANSACTION.READ_WRITE;</PRE
></BLOCKQUOTE
><P
CLASS="para"
>Establishes statement-level read consistency, which is also the default behavior.</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>PROCEDURE DBMS_TRANSACTION.ROLLBACK;</PRE
></BLOCKQUOTE
><P
CLASS="para"
>Rolls back the current transaction. </P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>PROCEDURE DBMS_TRANSACTION.ROLLBACK_FORCE
    (xid IN VARCHAR2);</PRE
></BLOCKQUOTE
><P
CLASS="para"
>Rolls back the local portion of the in-doubt distributed transaction identified by <EM
CLASS="emphasis"
>xid</EM
>. </P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>PROCEDURE DBMS_TRANSACTION.ROLLBACK_SAVEPOINT
    (savept IN VARCHAR2);</PRE
></BLOCKQUOTE
><P
CLASS="para"
>Rolls back the current transaction to the savepoint <EM
CLASS="emphasis"
>savept</EM
>. </P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>PROCEDURE DBMS_TRANSACTION.SAVEPOINT
    (savept IN VARCHAR2);</PRE
></BLOCKQUOTE
><P
CLASS="para"
>Sets a savepoint named <EM
CLASS="emphasis"
>savept</EM
> in the current transaction. </P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>FUNCTION DBMS_TRANSACTION.STEP_ID
RETURN NUMBER;</PRE
></BLOCKQUOTE
><P
CLASS="para"
>Returns a unique positive integer that orders the DML operations of the current transaction.</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>PROCEDURE DBMS_TRANSACTION.USE_ROLLBACK_SEGMENT
    (rb_name IN VARCHAR2);</PRE
></BLOCKQUOTE
><P
CLASS="para"
>Assigns the current transaction to rollback segment <EM
CLASS="emphasis"
>rb_name</EM
>.</P
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="plsqlbip-SECT-3.21"
>1.3.21 DBMS_UTILITY</A
></H3
><P
CLASS="para"
>DBMS_UTILITY provides procedures and functions to perform a number of useful tasks, including parsing and tokenizing name references, obtaining database configuration information, analyzing objects, obtaining error and call stack information, and timing code execution.</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>PROCEDURE DBMS_UTILITY.ANALYZE_DATABASE
    (method IN VARCHAR2
    ,estimate_rows IN NUMBER DEFAULT NULL
    ,estimate_percent IN NUMBER DEFAULT NULL
    ,method_opt IN VARCHAR2 DEFAULT NULL);</PRE
></BLOCKQUOTE
><P
CLASS="para"
>Analyzes all tables, clusters, and indexes in the database using option <EM
CLASS="emphasis"
>method</EM
> (ESTIMATE, COMPUTE, or DELETE). When <EM
CLASS="emphasis"
>method</EM
> is ESTIMATE, either <EM
CLASS="emphasis"
>estimate_rows</EM
> or <EM
CLASS="emphasis"
>estimate_percent</EM
> must be specified to identify sample size. Additional analyze options specifiable by <EM
CLASS="emphasis"
>method_opt</EM
> are: FOR TABLE; FOR ALL COLUMNS [SIZE <EM
CLASS="emphasis"
>N</EM
>]; FOR ALL INDEXED COLUMNS [SIZE <EM
CLASS="emphasis"
>N</EM
>]; or FOR ALL INDEXES.</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>PROCEDURE DBMS_UTILITY.ANALYZE_PART_OBJECT
    (schema IN VARCHAR2 DEFAULT NULL
    ,object_name IN VARCHAR2 DEFAULT NULL
    ,object_type IN CHAR DEFAULT `T'
    ,command_type IN CHAR DEFAULT `E'
    ,command_opt IN VARCHAR2 DEFAULT NULL
    ,sample_clause IN VARCHAR2 
        DEFAULT `SAMPLE 5 PERCENT');</PRE
></BLOCKQUOTE
><P
CLASS="para"
>Analyzes the partitioned table or index <EM
CLASS="emphasis"
>object_name</EM
> owned by <EM
CLASS="emphasis"
>schema</EM
> of type <EM
CLASS="emphasis"
>object_type</EM
> (T = TABLE, I = INDEX) in parallel using Oracle job queue processes. <EM
CLASS="emphasis"
>command_type</EM
> indicates the type of analysis to perform and <EM
CLASS="emphasis"
>command_opt</EM
> specifies additional options. <EM
CLASS="emphasis"
>sample_clause</EM
> specifies sample size when <EM
CLASS="emphasis"
>command_type</EM
> is E (estimate) using `SAMPLE N ROWS' or `SAMPLE N PERCENT'. Oracle8 only.</P
><P
CLASS="para"
>Valid <EM
CLASS="emphasis"
>command_type</EM
>values are: C for compute statistics, E for estimate statistics, D for delete statistics, or V for validate structure.</P
><P
CLASS="para"
>Valid <EM
CLASS="emphasis"
>command_opt</EM
> values for <EM
CLASS="emphasis"
>command_type</EM
> C or T are: FOR TABLE, FOR ALL LOCAL INDEXES, FOR ALL COLUMNS, or any combination of FOR options of the ANALYZE command.</P
><P
CLASS="para"
>Valid <EM
CLASS="emphasis"
>command_opt</EM
> values for <EM
CLASS="emphasis"
>command_type</EM
> V are: CASCADE when <EM
CLASS="emphasis"
>object_type</EM
> is T (table).</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>PROCEDURE DBMS_UTILITY.ANALYZE_SCHEMA
    (schema IN VARCHAR2
    ,method IN VARCHAR2
    ,estimate_rows IN NUMBER DEFAULT NULL
    ,estimate_percent IN NUMBER DEFAULT NULL
    ,method_opt IN VARCHAR2 DEFAULT NULL);</PRE
></BLOCKQUOTE
><P
CLASS="para"
>Analyzes all tables, clusters, and indexes in <EM
CLASS="emphasis"
>schema</EM
> using <EM
CLASS="emphasis"
>method</EM
> (ESTIMATE, COMPUTE, or DELETE). When <EM
CLASS="emphasis"
>method</EM
> is ESTIMATE, either <EM
CLASS="emphasis"
>estimate_rows</EM
> or <EM
CLASS="emphasis"
>estimate_percent</EM
> must be specified to identify sample size. Additional analyze options specifiable by <EM
CLASS="emphasis"
>method_opt</EM
> are: FOR TABLE, FOR ALL COLUMNS [SIZE <EM
CLASS="emphasis"
>N</EM
>], FOR ALL INDEXED COLUMNS [SIZE <EM
CLASS="emphasis"
>N</EM
>], or FOR ALL INDEXES.</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>PROCEDURE DBMS_UTILITY.COMMA_TO_TABLE
    (list IN VARCHAR2
    ,tablen OUT BINARY_INTEGER
    ,tab OUT UNCL_ARRAY);</PRE
></BLOCKQUOTE
><P
CLASS="para"
>Parses the comma-delimited <EM
CLASS="emphasis"
>list</EM
> and returns the tokens in the PL/SQL table <EM
CLASS="emphasis"
>tab</EM
> of type DBMS_UTILITY.UNCL_ARRAY. The number of rows in <EM
CLASS="emphasis"
>tab</EM
> is returned in <EM
CLASS="emphasis"
>tablen</EM
>.</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>PROCEDURE DBMS_UTILITY.COMPILE_SCHEMA
    (schema IN VARCHAR2);</PRE
></BLOCKQUOTE
><P
CLASS="para"
>Compiles all stored PL/SQL programs (procedures, functions, and packages) owned by <EM
CLASS="emphasis"
>schema</EM
>.</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>FUNCTION DBMS_UTILITY.DATA_BLOCK_ADDRESS_BLOCK
    (dba IN NUMBER)
RETURN NUMBER;</PRE
></BLOCKQUOTE
><P
CLASS="para"
>Returns the block offset number of the data block address specified in <EM
CLASS="emphasis"
>dba</EM
>.</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>FUNCTION DBMS_UTILITY.DATA_BLOCK_ADDRESS_FILE
   (dba IN NUMBER)
RETURN NUMBER;</PRE
></BLOCKQUOTE
><P
CLASS="para"
>Returns the file number component of the data block address specified in <EM
CLASS="emphasis"
>dba</EM
>.</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>PROCEDURE DBMS_UTILITY.DB_VERSION
    (version OUT VARCHAR2
    ,compatibility OUT VARCHAR2);</PRE
></BLOCKQUOTE
><P
CLASS="para"
>Returns the Oracle version of the database in <EM
CLASS="emphasis"
>version</EM
> and the setting of the <EM
CLASS="emphasis"
>INIT.ORA</EM
> COMPATIBLE parameter in <EM
CLASS="emphasis"
>compatibility</EM
> (or NULL). Oracle8 only.</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>PROCEDURE DBMS_UTILITY.EXEC_DDL_STATEMENT
    (parse_string IN VARCHAR2);</PRE
></BLOCKQUOTE
><P
CLASS="para"
>Executes the DDL statement specified by <EM
CLASS="emphasis"
>parse_string.</EM
> Oracle8 only.</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>FUNCTION DBMS_UTILITY.FORMAT_CALL_STACK
RETURN VARCHAR2;</PRE
></BLOCKQUOTE
><P
CLASS="para"
>Returns the current PL/SQL call stack as a formatted string.</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>FUNCTION DBMS_UTILITY.FORMAT_ERROR_STACK
RETURN VARCHAR2;</PRE
></BLOCKQUOTE
><P
CLASS="para"
>Returns the current PL/SQL error stack as a formatted string.</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>FUNCTION DBMS_UTILITY.GET_HASH_VALUE
    (name IN VARCHAR2
    ,base IN NUMBER
    ,hash_size IN NUMBER)
RETURN NUMBER;</PRE
></BLOCKQUOTE
><P
CLASS="para"
>Returns a hash function value for <EM
CLASS="emphasis"
>name</EM
> with a minimum possible value of <EM
CLASS="emphasis"
>base</EM
> using a hash table of size <EM
CLASS="emphasis"
>hash_size</EM
>.</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>FUNCTION DBMS_UTILITY.GET_PARAMETER_VALUE
    (parnam IN VARCHAR2
    ,intval IN OUT BINARY_INTEGER
    ,strval IN OUT VARCHAR2)
RETURN BINARY_INTEGER;</PRE
></BLOCKQUOTE
><P
CLASS="para"
>Returns information about the current setting of the database initialization (<EM
CLASS="emphasis"
>INIT.ORA</EM
>) parameter <EM
CLASS="emphasis"
>parnam.</EM
> Oracle8 only.</P
><P
CLASS="para"
><EM
CLASS="emphasis"
>intval</EM
> returns the following values:</P
><UL
CLASS="itemizedlist"
><LI
CLASS="listitem"
><P
CLASS="para"
>The value of a numeric <EM
CLASS="emphasis"
>parnam</EM
></P
></LI
><LI
CLASS="listitem"
><P
CLASS="para"
>The length of a string <EM
CLASS="emphasis"
>parnam</EM
></P
></LI
><LI
CLASS="listitem"
><P
CLASS="para"
>0 for FALSE and 1 for TRUE when <EM
CLASS="emphasis"
>parnam</EM
> is Boolean</P
></LI
></UL
><P
CLASS="para"
><EM
CLASS="emphasis"
>strval</EM
> returns NULL, or the value of a string parameter: 0 if the parameter is Boolean or numeric; 1 if the parameter is a string.</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>FUNCTION DBMS_UTILITY.GET_TIME
RETURN NUMBER;</PRE
></BLOCKQUOTE
><P
CLASS="para"
>Returns a number indicating the number of 1/100ths of a seconds elapsed since an (unknown) arbitrary time in the past.</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>FUNCTION DBMS_UTILITY.IS_PARALLEL_SERVER
RETURN BOOLEAN;</PRE
></BLOCKQUOTE
><P
CLASS="para"
>Returns TRUE if the instance is running in parallel server mode, and FALSE otherwise.</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>FUNCTION DBMS_UTILITY.MAKE_DATA_BLOCK_ADDRESS
    (file IN NUMBER
    ,block IN NUMBER)
RETURN NUMBER;</PRE
></BLOCKQUOTE
><P
CLASS="para"
>Returns a valid data block address for <EM
CLASS="emphasis"
>file</EM
> at block offset <EM
CLASS="emphasis"
>block</EM
>.</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>PROCEDURE DBMS_UTILITY.NAME_RESOLVE
    (name IN VARCHAR2
    ,context IN NUMBER
    ,schema OUT VARCHAR2
    ,part1 OUT VARCHAR2
    ,part2 OUT VARCHAR2
    ,dblink OUT VARCHAR2
    ,part1_type OUT NUMBER
    ,object_number OUT NUMBER);</PRE
></BLOCKQUOTE
><P
CLASS="para"
>Resolves the reference <EM
CLASS="emphasis"
>name</EM
> and returns specific identification information about the object referenced as follows: <EM
CLASS="emphasis"
>schema</EM
> is the object's owner; <EM
CLASS="emphasis"
>part1</EM
> is the object name or package name for a package; <EM
CLASS="emphasis"
>part2</EM
> is the program name when object is a package; <EM
CLASS="emphasis"
>dblink</EM
> is the database link if <EM
CLASS="emphasis"
>name</EM
> resolves to a remote object; <EM
CLASS="emphasis"
>part1_type</EM
> identifies the type of object; <EM
CLASS="emphasis"
>object_number</EM
> is the local object number or NULL if <EM
CLASS="emphasis"
>name</EM
> could not be fully resolved locally.</P
><P
CLASS="para"
><EM
CLASS="emphasis"
>part1_type</EM
> is 5 if the object is a synonym; 7 if the object is a procedure; 8 if the object is a function; 9 if the object is a package.</P
><P
CLASS="para"
>Note that <EM
CLASS="emphasis"
>context</EM
> must be set to 1.</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>PROCEDURE DBMS_UTILITY.NAME_TOKENIZE
    (name IN VARCHAR2
    ,a OUT VARCHAR2
    ,b OUT VARCHAR2
    ,c OUT VARCHAR2
    ,dblink OUT VARCHAR2
    ,nextpos OUT BINARY_INTEGER);</PRE
></BLOCKQUOTE
><P
CLASS="para"
>Uses the PL/SQL parser to tokenize the reference <EM
CLASS="emphasis"
>name</EM
> into its constituent components according to the following format:</P
><P
CLASS="para"
><EM
CLASS="emphasis"
>    a</EM
> [ . <EM
CLASS="emphasis"
>b</EM
> [ . <EM
CLASS="emphasis"
>c</EM
> ] ] [ @<EM
CLASS="emphasis"
>dblink</EM
> ]</P
><P
CLASS="para"
><EM
CLASS="emphasis"
>nextpos</EM
> is the starting position of the next token.</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>FUNCTION DBMS_UTILITY.PORT_STRING
RETURN VARCHAR2;</PRE
></BLOCKQUOTE
><P
CLASS="para"
>Returns a string with operating system-specific identifying information about the version of Oracle that is running.</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>PROCEDURE DBMS_UTILITY.TABLE_TO_COMMA
    (tab IN UNCL_ARRAY
    ,tablen OUT BINARY_INTEGER
    ,list OUT VARCHAR2);</PRE
></BLOCKQUOTE
><P
CLASS="para"
>Converts the PL/SQL table <EM
CLASS="emphasis"
>tab</EM
> of type DBMS_UTILITY.UNCL_ARRAY into a comma-delimited string returned in <EM
CLASS="emphasis"
>list</EM
>, with the number of rows converted returned in <EM
CLASS="emphasis"
>tablen</EM
>.</P
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="plsqlbip-SECT-3.22"
>1.3.22 UTL_FILE</A
></H3
><P
CLASS="para"
>UTL_FILE allows PL/SQL programs to read from and write to operating system files on the server where the Oracle database resides.</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>PROCEDURE UTL_FILE.FCLOSE
    (file IN OUT FILE_TYPE);</PRE
></BLOCKQUOTE
><P
CLASS="para"
>Closes the file identified by file handle <EM
CLASS="emphasis"
>file</EM
> and sets the value of file id to NULL.</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>PROCEDURE UTL_FILE.FCLOSE_ALL;</PRE
></BLOCKQUOTE
><P
CLASS="para"
>Closes all opened files; however, the id fields of any file handles will not be set to NULL.</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>PROCEDURE UTL_FILE.FFLUSH
    (file IN FILE_TYPE);</PRE
></BLOCKQUOTE
><P
CLASS="para"
>Forces any buffered data for file handle <EM
CLASS="emphasis"
>file</EM
> to be written out immediately.</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>FUNCTION UTL_FILE.FOPEN
    (location IN VARCHAR2
    ,filename IN VARCHAR2
    ,open_mode IN VARCHAR2)
RETURN FILE_TYPE;</PRE
></BLOCKQUOTE
><P
CLASS="para"
>Returns a file handle of type UTL_FILE.FILE_TYPE upon successfully opening file <EM
CLASS="emphasis"
>filename</EM
> in directory <EM
CLASS="emphasis"
>location</EM
> in mode <EM
CLASS="emphasis"
>open_mode</EM
>, or raises an exception. </P
><P
CLASS="para"
>Valid <EM
CLASS="emphasis"
>open_mode</EM
> values are:</P
><TABLE
CLASS="simplelist"
BORDER="0"
><TR
><TD
CLASS="member"
>R = open file in read-only mode.</TD
></TR
><TR
><TD
CLASS="member"
>W = open file in read-write mode and replace contents.</TD
></TR
><TR
><TD
CLASS="member"
>A = open file in read-write mode and append to contents.</TD
></TR
></TABLE
><P
CLASS="para"
>Valid <EM
CLASS="emphasis"
>location</EM
> values are directories specified by the Oracle initialization parameter UTL_FILE_DIR.</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>PROCEDURE UTL_FILE.GET_LINE
    (file IN FILE_TYPE
    ,buffer OUT VARCHAR2);</PRE
></BLOCKQUOTE
><P
CLASS="para"
>Reads the next line in file handle <EM
CLASS="emphasis"
>file</EM
> into <EM
CLASS="emphasis"
>buffer</EM
>. Raises NO_DATA_FOUND exception when reading past end of file and VALUE_ERROR exception when <EM
CLASS="emphasis"
>buffer</EM
> is too small for the data.</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>FUNCTION UTL_FILE.IS_OPEN
    (file IN FILE_TYPE)
RETURN BOOLEAN;</PRE
></BLOCKQUOTE
><P
CLASS="para"
>Returns TRUE if the file handle <EM
CLASS="emphasis"
>file</EM
> is currently open in any mode and FALSE otherwise.</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>PROCEDURE UTL_FILE.NEW_LINE
    (file IN FILE_TYPE
    ,lines IN NATURAL := 1);</PRE
></BLOCKQUOTE
><P
CLASS="para"
>Places <EM
CLASS="emphasis"
>lines</EM
> newline characters into file handle <EM
CLASS="emphasis"
>file</EM
>.</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>PROCEDURE UTL_FILE.PUT
    (file IN FILE_TYPE
    ,buffer IN VARCHAR2);</PRE
></BLOCKQUOTE
><P
CLASS="para"
>Places the data in <EM
CLASS="emphasis"
>buffer</EM
> into file handle <EM
CLASS="emphasis"
>file</EM
> without a newline terminator.</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>PROCEDURE UTL_FILE.PUT_LINE
    (file IN FILE_TYPE
    ,buffer IN VARCHAR2);</PRE
></BLOCKQUOTE
><P
CLASS="para"
>Places the data in <EM
CLASS="emphasis"
>buffer</EM
> into file handle <EM
CLASS="emphasis"
>file</EM
> with a newline character appended.</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>PROCEDURE UTL_FILE.PUTF
    (file IN FILE_TYPE
    ,format IN VARCHAR2
    ,arg1 IN VARCHAR2 DEFAULT NULL
    ,arg2 IN VARCHAR2 DEFAULT NULL
    ,arg3 IN VARCHAR2 DEFAULT NULL
    ,arg4 IN VARCHAR2 DEFAULT NULL
    ,arg5 IN VARCHAR2 DEFAULT NULL);</PRE
></BLOCKQUOTE
><P
CLASS="para"
>Writes a formatted message out to file handle <EM
CLASS="emphasis"
>file</EM
> using <EM
CLASS="emphasis"
>format</EM
> as the template, replacing up to five %s format elements with the values of <EM
CLASS="emphasis"
>arg1-arg5</EM
>. <EM
CLASS="emphasis"
>format</EM
> can contain the following items: any literal text; %s indicating <EM
CLASS="emphasis"
>argN</EM
> substitution (up to five allowed); or \n indicating newline (any number allowed).</P
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="plsqlbip-SECT-3.23"
>1.3.23 UTL_RAW</A
></H3
><P
CLASS="para"
>UTL_RAW provides routines for accessing and manipulating RAW datatypes. These routines perform conversions, divisions, combinations, and bitwise operations on RAW datatypes.</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>FUNCTION UTL_RAW.BIT_AND
    (r1 IN RAW
    ,r2 IN RAW)
RETURN RAW;</PRE
></BLOCKQUOTE
><P
CLASS="para"
>Returns the bitwise logical AND of <EM
CLASS="emphasis"
>r1</EM
> and <EM
CLASS="emphasis"
>r2</EM
>.</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>FUNCTION UTL_RAW.BIT_COMPLEMENT
    (r1 IN RAW
    ,r2 IN RAW)
RETURN RAW;</PRE
></BLOCKQUOTE
><P
CLASS="para"
>Returns the bitwise logical complement of <EM
CLASS="emphasis"
>r1</EM
> and <EM
CLASS="emphasis"
>r2</EM
>.</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>FUNCTION UTL_RAW.BIT_OR
    (r1 IN RAW
    ,r2 IN RAW)
RETURN RAW;</PRE
></BLOCKQUOTE
><P
CLASS="para"
>Returns the bitwise logical OR of <EM
CLASS="emphasis"
>r1</EM
> and <EM
CLASS="emphasis"
>r2</EM
>.</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>FUNCTION UTL_RAW.BIT_XOR
    (r1 IN RAW
    ,r2 IN RAW)
RETURN RAW;</PRE
></BLOCKQUOTE
><P
CLASS="para"
>Returns the bitwise logical XOR of <EM
CLASS="emphasis"
>r1</EM
> and <EM
CLASS="emphasis"
>r2</EM
>.</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>FUNCTION UTL_RAW.CAST_TO_RAW
    (c IN VARCHAR2)
RETURN RAW;</PRE
></BLOCKQUOTE
><P
CLASS="para"
>Returns VARCHAR2 <EM
CLASS="emphasis"
>c</EM
> to RAW, converting datatype only.</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>FUNCTION UTL_RAW.CAST_TO_VARCHAR2
    (r IN RAW)
RETURN VARCHAR2;</PRE
></BLOCKQUOTE
><P
CLASS="para"
>Returns RAW <EM
CLASS="emphasis"
>c</EM
> to VARCHAR2, converting datatype only.</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>FUNCTION UTL_RAW.COMPARE
    (r1 IN RAW
    ,r2 IN RAW
    ,pad IN RAW DEFAULT NULL)
RETURN NUMBER;</PRE
></BLOCKQUOTE
><P
CLASS="para"
>Returns 0 if <EM
CLASS="emphasis"
>r1</EM
> and <EM
CLASS="emphasis"
>r2</EM
> are identical. Returns first byte position of difference in <EM
CLASS="emphasis"
>r1</EM
> and <EM
CLASS="emphasis"
>r2</EM
>. If <EM
CLASS="emphasis"
>r1</EM
> and <EM
CLASS="emphasis"
>r2</EM
> are different lengths, right pad the shorter with <EM
CLASS="emphasis"
>pad</EM
>.</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>FUNCTION UTL_RAW.CONCAT
    (r1 IN RAW DEFAULT NULL
    ,r2 IN RAW DEFAULT NULL
    ,r3 IN RAW DEFAULT NULL
    ,r4 IN RAW DEFAULT NULL
    ,r5 IN RAW DEFAULT NULL
    ,r6 IN RAW DEFAULT NULL
    ,r7 IN RAW DEFAULT NULL
    ,r8 IN RAW DEFAULT NULL
    ,r9 IN RAW DEFAULT NULL
    ,r10 IN RAW DEFAULT NULL
    ,r11 IN RAW DEFAULT NULL
    ,r12 IN RAW DEFAULT NULL)
RETURN RAW;</PRE
></BLOCKQUOTE
><P
CLASS="para"
>Returns the concatenation of <EM
CLASS="emphasis"
>r1</EM
> through <EM
CLASS="emphasis"
>r12</EM
>. The result must be less than 32K. <EM
CLASS="emphasis"
>r3</EM
> through <EM
CLASS="emphasis"
>r12</EM
> are optional.</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>FUNCTION UTL_RAW.CONVERT
    (r IN RAW
    ,to_charset IN VARCHAR2
    ,from_charset IN VARCHAR2)
RETURN RAW;</PRE
></BLOCKQUOTE
><P
CLASS="para"
>Returns <EM
CLASS="emphasis"
>r</EM
> in <EM
CLASS="emphasis"
>to_charset</EM
> after conversion from <EM
CLASS="emphasis"
>from_charset.</EM
> <EM
CLASS="emphasis"
>from_charset</EM
> and <EM
CLASS="emphasis"
>to_charset</EM
> are NLS character sets.</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>FUNCTION UTL_RAW.COPIES
    (r IN RAW
    ,n IN NUMBER)
RETURN RAW;</PRE
></BLOCKQUOTE
><P
CLASS="para"
>Concatenates <EM
CLASS="emphasis"
>r</EM
>, <EM
CLASS="emphasis"
>n</EM
> number of times, and returns the result.</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>FUNCTION UTL_RAW.LENGTH
    (r IN RAW)
RETURN NUMBER;</PRE
></BLOCKQUOTE
><P
CLASS="para"
>Returns the number of bytes in <EM
CLASS="emphasis"
>r</EM
>.</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>FUNCTION UTL_RAW.OVERLAY
    (overlay_str IN RAW
    ,target IN RAW
    ,pos IN BINARY_INTEGER DEFAULT 1
    ,len IN BINARY_INTEGER DEFAULT NULL
    ,pad IN RAW DEFAULT NULL)
RETURN RAW;</PRE
></BLOCKQUOTE
><P
CLASS="para"
>Returns the <EM
CLASS="emphasis"
>target</EM
> overlaid with the <EM
CLASS="emphasis"
>overlay_str</EM
> string beginning <EM
CLASS="emphasis"
>pos</EM
> bytes into <EM
CLASS="emphasis"
>target</EM
> and continuing for <EM
CLASS="emphasis"
>len</EM
> bytes, right padding with <EM
CLASS="emphasis"
>pad</EM
> as necessary. If <EM
CLASS="emphasis"
>pos</EM
> is greater than the length of <EM
CLASS="emphasis"
>target,</EM
> fills the missing section with <EM
CLASS="emphasis"
>pad</EM
>.</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>FUNCTION UTL_RAW.REVERSE
    (r IN RAW)
RETURN RAW;</PRE
></BLOCKQUOTE
><P
CLASS="para"
>Returns the bytes in <EM
CLASS="emphasis"
>r</EM
> in reverse order.</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>FUNCTION UTL_RAW.SUBSTR
    (r IN RAW
    ,pos IN BINARY_INTEGER
    ,len IN BINARY_INTEGER DEFAULT NULL)
RETURN RAW;</PRE
></BLOCKQUOTE
><P
CLASS="para"
>Returns a portion of <EM
CLASS="emphasis"
>r</EM
> beginning at <EM
CLASS="emphasis"
>pos</EM
> and extending for <EM
CLASS="emphasis"
>len</EM
> bytes.</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>FUNCTION UTL_RAW.TRANSLATE
    (r IN RAW
    ,from_set IN RAW
    ,to_set IN RAW)
RETURN RAW;</PRE
></BLOCKQUOTE
><P
CLASS="para"
>Returns the contents of <EM
CLASS="emphasis"
>r,</EM
> translating bytes found in <EM
CLASS="emphasis"
>from_set</EM
> to <EM
CLASS="emphasis"
>to_set</EM
>. If <EM
CLASS="emphasis"
>from_set</EM
> is longer than <EM
CLASS="emphasis"
>to_set</EM
>, the unmatched bytes are removed from <EM
CLASS="emphasis"
>r</EM
>.</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>FUNCTION UTL_RAW.TRANSLITERATE
    (r IN RAW
    ,to_set IN RAW DEFAULT NULL
    ,from_set IN RAW DEFAULT NULL
    ,pad IN RAW DEFAULT NULL)
RETURN RAW;</PRE
></BLOCKQUOTE
><P
CLASS="para"
>Returns the contents of <EM
CLASS="emphasis"
>r,</EM
> translating bytes found in <EM
CLASS="emphasis"
>from_set</EM
> to <EM
CLASS="emphasis"
>to_set</EM
>. If <EM
CLASS="emphasis"
>from_set</EM
> is longer than <EM
CLASS="emphasis"
>to_set</EM
>, the unmatched bytes are translated to <EM
CLASS="emphasis"
>pad</EM
>.</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>FUNCTION UTL_RAW.XRANGE
    (start_byte IN RAW DEFAULT NULL
    ,end_byte IN RAW DEFAULT NULL)
RETURN RAW;</PRE
></BLOCKQUOTE
><P
CLASS="para"
>Returns a raw string containing all bytes in order between <EM
CLASS="emphasis"
>start_byte</EM
> and <EM
CLASS="emphasis"
>end_byte</EM
>, inclusive. If <EM
CLASS="emphasis"
>start_byte</EM
> is greater than <EM
CLASS="emphasis"
>end_byte</EM
>, the result wraps from 0xFF to 0x00.</P
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="plsqlbip-SECT-3.24"
>1.3.24 UTL_REF</A
></H3
><P
CLASS="para"
>UTL_REF contains routines for selecting and modifying instances of an object type in an object table. The name of the table does not have to be known. Oracle8.0.4 only.</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>PROCEDURE UTL_REF.DELETE_OBJECT
    (reference IN REF ANY);</PRE
></BLOCKQUOTE
><P
CLASS="para"
>Deletes the object (actually the row containing the object) identified by <EM
CLASS="emphasis"
>reference</EM
>.</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>PROCEDURE UTL_REF.LOCK_OBJECT
    (reference IN REF ANY);</PRE
></BLOCKQUOTE
><P
CLASS="para"
>Locks the object referenced by <EM
CLASS="emphasis"
>reference.</EM
></P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>PROCEDURE UTL_REF.LOCK_OBJECT
    (reference IN REF ANY
    ,object IN OUT ANY);</PRE
></BLOCKQUOTE
><P
CLASS="para"
>Locks the object referenced by <EM
CLASS="emphasis"
>reference</EM
> and retrieves the object into <EM
CLASS="emphasis"
>object</EM
>. Similar to a SELECT FOR UPDATE statement.</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>PROCEDURE UTL_REF.SELECT_OBJECT
    (reference IN REF ANY
    ,object IN OUT ANY);</PRE
></BLOCKQUOTE
><P
CLASS="para"
>Retrieves the object referenced by <EM
CLASS="emphasis"
>reference</EM
> into <EM
CLASS="emphasis"
>object</EM
>.</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>PROCEDURE UTL_REF.UPDATE_OBJECT
    (reference IN REF ANY
    ,object IN OUT ANY);</PRE
></BLOCKQUOTE
><P
CLASS="para"
>Replaces an object in the database identified by <EM
CLASS="emphasis"
>reference</EM
> with the object <EM
CLASS="emphasis"
>object</EM
>.</P
></DIV
></DIV
><DIV
CLASS="htmlnav"
><P
></P
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch01_02.htm"
TITLE="1.2 Conventions"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 1.2 Conventions"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="book"
HREF="index.htm"
TITLE="Oracle PL/SQL Built-ins Pocket Reference"
><IMG
SRC="../gifs/txthome.gif"
ALT="Oracle PL/SQL Built-ins Pocket Reference"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch01_04.htm"
TITLE="1.4 Built-in Functions"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 1.4 Built-in Functions"
BORDER="0"></A
></TD
></TR
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
>1.2 Conventions</TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
>&nbsp;</TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
>1.4 Built-in Functions</TD
></TR
></TABLE
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"></DIV
><IMG SRC="../gifs/smnavbar.gif"
USEMAP="#map"
BORDER="0"
ALT="The Oracle Library Navigation">

<P><font size="-1">
<a href="../copyrght.htm#copy">Copyright (c) 2000</a> O'Reilly &amp; Associates. All rights reserved.
</font></P>

<MAP NAME="map">

<AREA SHAPE="RECT"
COORDS="0,0,35,30"
HREF="../index.htm"
ALT="Library Home">

<AREA SHAPE="RECT"
COORDS="40,0,95,30"
HREF="../prog2/index.htm"
ALT="Oracle PL/SQL Programming, 2nd. Ed.">

<AREA SHAPE="RECT"
COORDS="100,0,200,30"
HREF="../guide8i/index.htm"
ALT="Guide to Oracle 8i Features">

<AREA SHAPE="RECT"
COORDS="205,0,245,30"
HREF="../bipack/index.htm"
ALT="Oracle Built-in Packages">

<AREA SHAPE="RECT"
COORDS="250,0,320,30"
HREF="../advprog/index.htm"
ALT="Advanced PL/SQL Programming with Packages">

<AREA SHAPE="RECT"
COORDS="325,0,420,30"
HREF="../webapp/index.htm"
ALT="Oracle Web Applications">

<AREA SHAPE="RECT"
COORDS="425,0,490,30"
HREF="../langpkt/index.htm"
ALT="Oracle PL/SQL Language Pocket Reference">

<AREA SHAPE="RECT"
COORDS="495,0,570,30"
HREF="index.htm"
ALT="Oracle PL/SQL Built-ins Pocket Reference">
</MAP>

</BODY
>
<!-- Mirrored from liso.cs.pusan.ac.kr by HTTrack Website Copier/3.x [XR&CO'2001] -->
</HTML
>
