<HTML
><HEAD
><TITLE
>[Chapter 1] 1.2 Current Web Techniques Are Inadequate</TITLE
><META
NAME="DC.Creator"
CONTENT="Andrew Odewahn"><META
NAME="DC.Date"
CONTENT="2000-04-29T18:34:32Z"><META
NAME="DC.Format"
CONTENT="text/html"
SCHEME="MIME"><META
NAME="DC.Identifier"
CONTENT="O'Reilly and Associates CDROM-1-56592-687-0E"><META
NAME="DC.Language"
CONTENT="en-US"><META
NAME="DC.Publisher"
CONTENT="O'Reilly &amp; Associates, Inc."><META
NAME="DC.Source"
CONTENT="1-56592-687-0E"
SCHEME="ISBN"><META
NAME="DC.Subject.Keyword"
CONTENT="Oracle Web 8i"><META
NAME="DC.Title"
CONTENT="Oracle Web Applications: PL/SQL Developer's Introduction"><META
NAME="DC.Type"
CONTENT="Text.Monograph"><META
NAME="generator"
CONTENT="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><LINK
REL="stylesheet"
TYPE="text/css"
HREF="../style/style1.css"><LINK
REV="made"
HREF="mailto:online-books@oreilly.com"
TITLE="Online Books Comments"><LINK
REL="up"
HREF="ch01_01.htm"
TITLE="1. Introduction"><LINK
REL="prev"
HREF="ch01_01.htm"
TITLE="1.1 The Internet Grows Up"><LINK
REL="next"
HREF="ch01_03.htm#BOOK-CH-1-SECT-3.8.1"
TITLE="1.3 Oracle's Solution&nbsp-- Oracle8i"></HEAD
><BODY
><DIV
CLASS="htmlnav"
><H1
><IMG
SRC="gifs/smbanner.gif"
ALT="Oracle Web Applications: PL/SQL Developer's Introduction"
USEMAP="#srchmap"
BORDER="0"></H1
><MAP
NAME="srchmap"
><AREA
SHAPE="RECT"
COORDS="0,0,466,65"
HREF="index.htm"
ALT="Oracle Web Applications: PL/SQL Developer's Introduction"><AREA
SHAPE="RECT"
COORDS="467,0,514,18"
HREF="jobjects/fsearch.htm"
ALT="Search this book"></MAP
><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch01_01.htm"
TITLE="1.1 The Internet Grows Up"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 1.1 The Internet Grows Up"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><SPAN
CLASS="NAVTITLE"
><A
CLASS="chapter"
REL="up"
HREF="ch01_01.htm"
TITLE="1. Introduction"
>Chapter 1<BR>Introduction</A
></SPAN
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch01_03.htm#BOOK-CH-1-SECT-3.8.1"
TITLE="1.3 Oracle's Solution&nbsp-- Oracle8i"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 1.3 Oracle's Solution&nbsp-- Oracle8i"
BORDER="0"></A
></TD
></TR
></TABLE
>&nbsp;<HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"></DIV
><DIV
CLASS="sect1"
><H2
CLASS="sect1"
><A
CLASS="title"
NAME="BOOK-CH-1-SECT-2"
>1.2 Current Web Techniques Are Inadequate</A
></H2
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="BOOK-CH-1-IDX-18"
></A
>Sure, anyone with Microsoft FrontPage can put a human resources policy manual on the Web, but creating production web sites with existing web technology is simply too much work. Three broad problem areas in current web technology make it hard to build these new applications: <A
CLASS="indexterm"
NAME="AUTOID-291"
></A
> </P
><DL
CLASS="variablelist"
><DT
CLASS="term"
><EM
CLASS="emphasis"
>Content management</EM
></DT
><DD
CLASS="listitem"
><P
CLASS="para"
> <A
CLASS="indexterm"
NAME="AUTOID-298"
></A
> <A
CLASS="indexterm"
NAME="BOOK-CH-1-IDX-19"
></A
><A
CLASS="indexterm"
NAME="BOOK-CH-1-IDX-20"
></A
>Although web servers are good at presenting content, they are bad at managing it. This is partially due to their filesystem-based architecture, which often does not include the ability to build searchable, maintainable, and auditable information systems.</P
></DD
><DT
CLASS="term"
><EM
CLASS="emphasis"
>Application development</EM
></DT
><DD
CLASS="listitem"
><P
CLASS="para"
> <A
CLASS="indexterm"
NAME="AUTOID-310"
></A
> <A
CLASS="indexterm"
NAME="BOOK-CH-1-IDX-21"
></A
><A
CLASS="indexterm"
NAME="BOOK-CH-1-IDX-22"
></A
>A production setting requires tools that can scale both up and down, fit the needs of a specific user base, and are part of a complete developmental framework. Few, if any, current development techniques meet these criteria. </P
></DD
><DT
CLASS="term"
><EM
CLASS="emphasis"
>Application integration and electronic data exchange</EM
></DT
><DD
CLASS="listitem"
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="BOOK-CH-1-IDX-23"
></A
><A
CLASS="indexterm"
NAME="BOOK-CH-1-IDX-24"
></A
><A
CLASS="indexterm"
NAME="BOOK-CH-1-IDX-25"
></A
><A
CLASS="indexterm"
NAME="BOOK-CH-1-IDX-26"
></A
>It's too hard to integrate different systems. To make e-commerce and ERP a reality, a platform must provide a simple method to link different applications, whether they all reside in one site or are spread across multiple sites. Current web servers are only just beginning to address this issue.</P
></DD
></DL
><P
CLASS="para"
>Let's look at these problems in detail.</P
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="BOOK-CH-1-SECT-2.1"
>1.2.1 Content Management</A
></H3
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="BOOK-CH-1-IDX-27"
></A
>Web servers are great for making information available to a wide audience. Unfortunately, they do very little to help web site developers manage all this information. An ideal platform would help us develop sites that make it easy for users to find what they are looking for, are easy to keep up to date, and allow easy tracking of site content changes.</P
><DIV
CLASS="sect3"
><H4
CLASS="sect3"
><A
CLASS="title"
NAME="BOOK-CH-1-SECT-2.1.1"
>1.2.1.1 Finding what you need</A
></H4
><P
CLASS="para"
> <A
CLASS="indexterm"
NAME="AUTOID-341"
></A
> There's universal agreement that good web sites make it easy to find what you need. Unfortunately, the filesystem architecture of most web servers makes it difficult to put searches into specific, meaningful contexts.</P
><P
CLASS="para"
> <A
CLASS="indexterm"
NAME="AUTOID-344"
></A
> <A
CLASS="indexterm"
NAME="AUTOID-346"
></A
> Filesystems are used to manage files on the operating system level. To make it easier for users to find their files, the system automatically keeps various attributes, such as the file's name, size, creation date, and owner. When we create a spreadsheet, for instance, the system saves it and its attributes within the file structure. Later, if we forget the particular name of the file, we can search for it based on its attributes. For example,  <A
CLASS="indexterm"
NAME="AUTOID-348"
></A
> in DOS we can enter <CODE
CLASS="literal"
>dir</CODE
> <CODE
CLASS="literal"
>*.xls</CODE
> <CODE
CLASS="literal"
>/s</CODE
> to find all Excel spreadsheets within the various subdirectories, then look at the name or date to find the file we want.</P
><P
CLASS="para"
>This works great when you are sitting at a command line looking for a file that you created. The model breaks down, however, when you attempt to extend it to the Web. When people are searching for files on the Web, they don't care about the file's name or size (unless they're using a 14.4 modem!). Since they care about the file's contents, not its properties, the attributes maintained by the filesystem are largely irrelevant.</P
><P
CLASS="para"
>Some sites use search engines to overcome this shortfall. When a user enters a search term, the engine churns through an index of all the documents and returns a list of links to the files containing the search terms. Some of the most popular sites on the Web, like Yahoo! or  <A
CLASS="indexterm"
NAME="AUTOID-355"
></A
> <A
CLASS="indexterm"
NAME="AUTOID-357"
></A
> AltaVista, attempt to do this for all files on the Internet.</P
><P
CLASS="para"
>You only have to look for the term "sexual reproduction" on a web search engine to see how laughable this effort really is. While keyword searches can be helpful, they almost always fail to put the search into a meaningful context. For example, suppose I want a list of all works by Harper Lee. I should be able to enter something like "Give me a list of all works where Harper Lee is the author." With a keyword search, however, in addition to her only book, <EM
CLASS="emphasis"
>To Kill a Mockingbird</EM
>, I'm likely to get dozens or hundreds of additional documents ranging from a brochure about Harper's Ferry, West Virginia, to a retrospective of Bruce Lee movies.</P
><P
CLASS="para"
> <A
CLASS="indexterm"
NAME="AUTOID-362"
></A
> The simple fact of the matter is that effective searches on the Web require a broader, more flexible set of attributes than filesystems maintain. In addition to simply describing a file, a web server should automatically keep meaningful <I
CLASS="firstterm"
>metadata</I
>[<A
CLASS="footnote"
HREF="#BOOK-CH-1-FOOTNOTE-1"
>1</A
>] about the file's contents that puts a search into a specific context. This metadata should extend to all files, regardless of format. What if a document isn't ASCII at all or doesn't even represent a spoken language? For executable binaries, for example, it would be nice to be able to directly assign searchable attributes like "purpose" or "platform."</P
><BLOCKQUOTE
CLASS="footnote"
><DIV
CLASS="footnote"
><P
CLASS="para"
><A
CLASS="footnote"
NAME="BOOK-CH-1-FOOTNOTE-1"
>[1]</A
> Metadata is data about other data. For example, a file's size is metadata because it is data about the file, not part of the file itself.</P
></DIV
></BLOCKQUOTE
></DIV
><DIV
CLASS="sect3"
><H4
CLASS="sect3"
><A
CLASS="title"
NAME="BOOK-CH-1-SECT-2.1.2"
>1.2.1.2 Keeping sites up to date</A
></H4
><P
CLASS="para"
> <A
CLASS="indexterm"
NAME="AUTOID-370"
></A
> <A
CLASS="indexterm"
NAME="AUTOID-372"
></A
> A second problem with the current web server technologies' lack of integrated content management features is that it is too hard to keep a complex site up to date. Hyperlinks on the Web act as a mapping function between a logical name, like "Andrew's Homepage," to a literal file that resides on a specific machine, like <I
CLASS="filename"
>C:\andrew\web_stuff  \default.htm</I
>. These links, created through URLs, let us navigate from one page to another. The problem with this dual mapping system is that we have to make every update in two places, in the filesystem and in the URL. If someone deletes or moves a file, but forgets to change the corresponding URL on every page on which it appears, we are guaranteed to have broken links. It's probably impossible to manage this process manually on a large site. </P
><P
CLASS="para"
>This two-step process also creates extra work for the webmaster. Publishing a new document, for example, requires the webmaster to manipulate various files by hand: she must use FTP to copy the new document to the web server and must then edit an existing document (such as the home page) to add a link to the new file. While this process is fine for dozens, maybe even hundreds, of individual documents, it is unrealistic to expect to keep a site completely up to date when there are thousands, or even millions, of individual documents. Consequently, sites contain inaccurate information, broken links, and pages perennially under construction.</P
></DIV
><DIV
CLASS="sect3"
><H4
CLASS="sect3"
><A
CLASS="title"
NAME="BOOK-CH-1-SECT-2.1.3"
>1.2.1.3 Tracking changes</A
></H4
><P
CLASS="para"
> <A
CLASS="indexterm"
NAME="AUTOID-379"
></A
> <A
CLASS="indexterm"
NAME="AUTOID-381"
></A
> Finally, current web servers don't have a way to automatically track all changes to a document. While some operating systems, like VMS, have automatic versioning systems web developers can exploit, most do not. Since the ability to audit changes is a fundamental requirement for any production information system, an ideal web system would handle it automatically.</P
><P
CLASS="para"
>Suppose a webmaster or an end user updates a file, and it turns out later that he or she made a mistake. How do we track down exactly what was changed and fix it? Most filesystems don't automatically maintain logs that let us reconstruct a complex sequence of changes. Instead, we must either rely on the webmaster's memory or reconstruct the sequence of events from backups. Filesystems are simply not designed to handle complex audit tracking.<A
CLASS="indexterm"
NAME="BOOK-CH-1-IDX-28"
></A
></P
></DIV
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="BOOK-CH-1-SECT-2.2"
>1.2.2 Application Development</A
></H3
><P
CLASS="para"
>The Internet has also blurred the traditional line between applications and data to the point where it's unclear how to classify many sites. While a static HTML document is "content" and a Java applet is a "program," how do we classify hybrid systems that are a little bit of each? For example, a data warehouse might have a web interface that seems like a normal web site, but behind the scenes each page is generated dynamically by running a database query. Is this really a web site as we normally think of it, or is it closer to an application acting on underlying data? Although there is no clear agreement, the term <EM
CLASS="emphasis"
>content-driven web site</EM
>, implying equal parts of data and application, is one of the best names for these sorts of sites.</P
><P
CLASS="para"
> <A
CLASS="indexterm"
NAME="AUTOID-390"
></A
> <A
CLASS="indexterm"
NAME="AUTOID-392"
></A
> In web parlance, the applications and programs that create content-driven web sites are called <EM
CLASS="emphasis"
>dynamic resources</EM
>. Dynamic resources are unlike documents created with an HTML editor such as Microsoft FrontPage, although both types of documents are accessed over the Web using a URL, and both return an HTML document. A dynamic resource is a program that creates a page upon a user's request, not a static file that exists beforehand. While such a program traditionally generates HTML, it can create any type of content; for example, you could write a system to create a graph in GIF or JPEG format, using sales data stored in a database table.</P
><P
CLASS="para"
> <A
CLASS="indexterm"
NAME="AUTOID-396"
></A
> <A
CLASS="indexterm"
NAME="AUTOID-398"
></A
> <A
CLASS="indexterm"
NAME="AUTOID-400"
></A
> <A
CLASS="indexterm"
NAME="AUTOID-402"
></A
> As technology has progressed, it has become possible to create more and more complex dynamic resources. Once limited to simple operating system scripts, developers can now choose from a host of viable languages for creating content-driven sites: Perl, Visual Basic, C, C++, Java&nbsp;-- even COBOL or FORTRAN! In addition, web servers now support more sophisticated invocation methods. The list of technologies is growing longer every day: CGI, application servers, cartridges, Java servlets, Object Request Brokers (ORBs), and on and on.</P
><P
CLASS="para"
>The explosive growth of these different technologies and techniques has made it difficult, if not impossible, to select a single platform that can meet all of your current and future needs. Ironically, the overwhelming number of development options is one of the most unsatisfactory things about web development. How do you know which one to pick? Will that technology exist in five years? Is it a viable commercial product or someone's Ph.D. thesis?</P
><P
CLASS="para"
>The profusion of options has led to two related problems. First, no single platform can meet the needs of every type of application and user group. Second, developers have to use a variety of platforms, depending on the type of application they are building, which stretches their ability to become proficient with any particular technology.</P
><DIV
CLASS="sect3"
><H4
CLASS="sect3"
><A
CLASS="title"
NAME="BOOK-CH-1-SECT-2.2.1"
>1.2.2.1 No single platform is scalable enough</A
></H4
><P
CLASS="para"
>Current development platforms rarely scale in both directions. For example, suppose you develop a really slick web application for your department using  Active Server Pages on Windows NT. Word gets out around the company about how great it is and hundreds of people want to start using it. Suddenly, your application, which was designed for use by 10 or 20 people, has to accommodate hundreds. What can you do to scale it up? Conversely, suppose you need to build a small, specialized system that is to reside on its own server. You know it will never have more than a few users. Will you really use a Sun Ultraserver to build it? No, you'll go with something smaller and more affordable. As developers, it's hard for us to remember that technology decisions should scale in price as well as performance.</P
></DIV
><DIV
CLASS="sect3"
><H4
CLASS="sect3"
><A
CLASS="title"
NAME="BOOK-CH-1-SECT-2.2.2"
>1.2.2.2 Developers must know too many platforms</A
></H4
><P
CLASS="para"
> <A
CLASS="indexterm"
NAME="AUTOID-412"
></A
> <A
CLASS="indexterm"
NAME="AUTOID-414"
></A
> <A
CLASS="indexterm"
NAME="AUTOID-416"
></A
> Ideally, developers should be proficient on just one development platform that can scale across different hardware platforms, from Intel to Alpha to Sparc, and operating system platforms, from NT to Unix to VMS. Unfortunately, this is not the case with current web server application development. Developers wander from one platform to the next, worrying, like Goldilocks, that "This one's too small" or "This one's too big," when they need one that's just right.</P
><P
CLASS="para"
>You must factor in the skill levels required by each option. One of the worst situations is that each platform requires its own specific skill set, so you wind up with a development team that is split along platforms. For example, you may have one group of programmers that uses Perl, one that uses Java, one that uses Oracle Forms, and one that uses PL/SQL. Since it's impossible to master all the techniques available on each platform, you wind up with systems that only a small group can support.</P
></DIV
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="BOOK-CH-1-SECT-2.3"
>1.2.3 Application Integration and Electronic Data Interchange (EDI)</A
></H3
><P
CLASS="para"
>As if content management and application development aren't enough of a challenge, the new breed of application must seamlessly interact with internal applications and electronically exchange data with external systems. Data entered by remote users must synchronize with the production systems. Orders placed on your web site must flow into an order entry system, which must then send the customers email notifying them that their orders have been received. Purchase orders must flow from your system into the order entry systems of your business partners.</P
><P
CLASS="para"
>These types of tasks are well beyond the scope of almost all the web servers currently available. While it's possible to build this functionality, it is usually a kludgey process performed with uploads or downloads or, God forbid, rekeying the information by hand.</P
><P
CLASS="para"
> <A
CLASS="indexterm"
NAME="AUTOID-424"
></A
> <A
CLASS="indexterm"
NAME="AUTOID-426"
></A
> Web server vendors are attempting to address this problem by defining universal standards for interoperability and object-to-object communication; some of the most promising solutions, such as CORBA and COM, are already available. However, the battle over what will be the general standard is already brewing and promises to make the browser wars look like a game of touch football at a retirement home. <A
CLASS="indexterm"
NAME="AUTOID-428"
></A
> </P
></DIV
></DIV
><DIV
CLASS="htmlnav"
><P
></P
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch01_01.htm"
TITLE="1.1 The Internet Grows Up"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 1.1 The Internet Grows Up"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="book"
HREF="index.htm"
TITLE="Oracle Web Applications: PL/SQL Developer's Introduction"
><IMG
SRC="../gifs/txthome.gif"
ALT="Oracle Web Applications: PL/SQL Developer's Introduction"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch01_03.htm#BOOK-CH-1-SECT-3.8.1"
TITLE="1.3 Oracle's Solution&nbsp-- Oracle8i"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 1.3 Oracle's Solution&nbsp-- Oracle8i"
BORDER="0"></A
></TD
></TR
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
>1.1 The Internet Grows Up</TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="index"
HREF="index/idx_0.htm"
TITLE="Book Index"
><IMG
SRC="../gifs/index.gif"
ALT="Book Index"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
>1.3 Oracle's Solution&nbsp-- Oracle8i</TD
></TR
></TABLE
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"></DIV
><IMG SRC="../gifs/smnavbar.gif"
USEMAP="#map"
BORDER="0"
ALT="The Oracle Library Navigation">

<P><font size="-1">
<a href="../copyrght.htm#copy">Copyright (c) 2000</a> O'Reilly &amp; Associates. All rights reserved.
</font></P>

<MAP NAME="map">

<AREA SHAPE="RECT"
COORDS="0,0,35,30"
HREF="../index.htm"
ALT="Library Home">

<AREA SHAPE="RECT"
COORDS="40,0,95,30"
HREF="../prog2/index.htm"
ALT="Oracle PL/SQL Programming, 2nd. Ed.">

<AREA SHAPE="RECT"
COORDS="100,0,200,30"
HREF="../guide8i/index.htm"
ALT="Guide to Oracle 8i Features">

<AREA SHAPE="RECT"
COORDS="205,0,245,30"
HREF="../bipack/index.htm"
ALT="Oracle Built-in Packages">

<AREA SHAPE="RECT"
COORDS="250,0,320,30"
HREF="../advprog/index.htm"
ALT="Advanced PL/SQL Programming with Packages">

<AREA SHAPE="RECT"
COORDS="325,0,420,30"
HREF="index.htm"
ALT="Oracle Web Applications">

<AREA SHAPE="RECT"
COORDS="425,0,490,30"
HREF="../langpkt/index.htm"
ALT="Oracle PL/SQL Language Pocket Reference">

<AREA SHAPE="RECT"
COORDS="495,0,570,30"
HREF="../bipkt/index.htm"
ALT="Oracle PL/SQL Built-ins Pocket Reference">
</MAP>

</BODY
>
<!-- Mirrored from liso.cs.pusan.ac.kr by HTTrack Website Copier/3.x [XR&CO'2001] -->
</HTML
>
