<HTML
><HEAD
><TITLE
>[Chapter 1] 1.3 Oracle's Solution&nbsp-- Oracle8i</TITLE
><META
NAME="DC.Creator"
CONTENT="Andrew Odewahn"><META
NAME="DC.Date"
CONTENT="2000-04-29T18:34:36Z"><META
NAME="DC.Format"
CONTENT="text/html"
SCHEME="MIME"><META
NAME="DC.Identifier"
CONTENT="O'Reilly and Associates CDROM-1-56592-687-0E"><META
NAME="DC.Language"
CONTENT="en-US"><META
NAME="DC.Publisher"
CONTENT="O'Reilly &amp; Associates, Inc."><META
NAME="DC.Source"
CONTENT="1-56592-687-0E"
SCHEME="ISBN"><META
NAME="DC.Subject.Keyword"
CONTENT="Oracle Web 8i"><META
NAME="DC.Title"
CONTENT="Oracle Web Applications: PL/SQL Developer's Introduction"><META
NAME="DC.Type"
CONTENT="Text.Monograph"><META
NAME="generator"
CONTENT="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><LINK
REL="stylesheet"
TYPE="text/css"
HREF="../style/style1.css"><LINK
REV="made"
HREF="mailto:online-books@oreilly.com"
TITLE="Online Books Comments"><LINK
REL="up"
HREF="ch01_01.htm"
TITLE="1. Introduction"><LINK
REL="prev"
HREF="ch01_02.htm#BOOK-CH-1-SECT-2.2"
TITLE="1.2 Current Web Techniques Are Inadequate"><LINK
REL="next"
HREF="ch01_04.htm#BOOK-CH-1-SECT-4.2.1"
TITLE="1.4 A Roadmap to Oracle8i"></HEAD
><BODY
><DIV
CLASS="htmlnav"
><H1
><IMG
SRC="gifs/smbanner.gif"
ALT="Oracle Web Applications: PL/SQL Developer's Introduction"
USEMAP="#srchmap"
BORDER="0"></H1
><MAP
NAME="srchmap"
><AREA
SHAPE="RECT"
COORDS="0,0,466,65"
HREF="index.htm"
ALT="Oracle Web Applications: PL/SQL Developer's Introduction"><AREA
SHAPE="RECT"
COORDS="467,0,514,18"
HREF="jobjects/fsearch.htm"
ALT="Search this book"></MAP
><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch01_02.htm#BOOK-CH-1-SECT-2.2"
TITLE="1.2 Current Web Techniques Are Inadequate"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 1.2 Current Web Techniques Are Inadequate"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><SPAN
CLASS="NAVTITLE"
><A
CLASS="chapter"
REL="up"
HREF="ch01_01.htm"
TITLE="1. Introduction"
>Chapter 1<BR>Introduction</A
></SPAN
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch01_04.htm#BOOK-CH-1-SECT-4.2.1"
TITLE="1.4 A Roadmap to Oracle8i"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 1.4 A Roadmap to Oracle8i"
BORDER="0"></A
></TD
></TR
></TABLE
>&nbsp;<HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"></DIV
><DIV
CLASS="sect1"
><H2
CLASS="sect1"
><A
CLASS="title"
NAME="BOOK-CH-1-SECT-3"
>1.3 Oracle's Solution&nbsp;-- Oracle8i</A
></H2
><P
CLASS="para"
> <A
CLASS="indexterm"
NAME="AUTOID-432"
></A
> <A
CLASS="indexterm"
NAME="AUTOID-434"
></A
> To steal a phrase from James Carville, consultant to Bill Clinton's 1992 presidential campaign, "It's the data, stupid." Large companies have realized for years that filesystems are unsuited for sophisticated data management, and have instead relied on <EM
CLASS="emphasis"
>relational database management systems</EM
> (RDBMSs). </P
><P
CLASS="para"
>These databases have quietly provided scalable, secure, and manageable access to the most critical corporate information for over a decade. Companies understand how to plan for auditing, disaster recovery, capacity, maintenance, and application development. There are well-understood tools and proven techniques, and developers know how to build database systems. Given that content will be king for the new generation of web sites and applications, doesn't it make sense to graft web server capabilities onto a database, rather than a filesystem? </P
><P
CLASS="para"
>Oracle has had over 20 years of experience designing information systems that manage the most important corporate data. As the largest database vendor in the world, they have (arguably) the world's most sophisticated and powerful database. Over the past several years, Oracle has moved diligently to apply professional data management concepts like scalability, security, auditability, disaster planning, and so on to an unruly world of Internet content management. With Oracle8<EM
CLASS="emphasis"
>i</EM
>, the "Internet database," these plans have come to fruition.</P
><P
CLASS="para"
> <A
CLASS="indexterm"
NAME="AUTOID-441"
></A
> Oracle8<EM
CLASS="emphasis"
>i</EM
> is a soup-to-nuts platform for web site and web application development that addresses the pressing issues of content management, application development, and application integration by extending traditional database concepts to web content. Oracle8<EM
CLASS="emphasis"
>i</EM
> replaces the traditional filesystem used by most web servers with a database management system, and it supports&nbsp;-- either directly or through various add-on products&nbsp;-- a mind-boggling variety of technologies. <A
CLASS="xref"
HREF="ch01_03.htm#BOOK-CH-1-SECT-3.8.1"
>Table 1.1</A
> summarizes the most important of these; asterisked items must be separately licensed from Oracle.</P
><BR><TABLE
CLASS="table"
BORDER="1"
CELLPADDING="3"
><CAPTION
CLASS="table"
><A
CLASS="title"
NAME="BOOK-CH-1-TABLE-2"
>Table 1.1: Major Web Technologies Supported in Oracle8i</A
></CAPTION
><THEAD
CLASS="thead"
><TR
CLASS="row"
VALIGN="TOP"
><TH
CLASS="entry"
ALIGN="LEFT"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>Technology</P
></TH
><TH
CLASS="entry"
ALIGN="LEFT"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>Description</P
></TH
></TR
></THEAD
><TBODY
CLASS="tbody"
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
> <A
CLASS="indexterm"
NAME="AUTOID-461"
></A
> Internet File System (<EM
CLASS="emphasis"
>i</EM
>FS)</P
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>An Oracle extension[<A
CLASS="footnote"
HREF="#BOOK-CH-1-FOOTNOTE-2"
>2</A
>] that allows Oracle8<EM
CLASS="emphasis"
>i</EM
> to store files inside the database. It combines this capability with a wide variety of networking protocols to let various clients use <EM
CLASS="emphasis"
>i</EM
>FS as a native data store. These clients can include email products like Qualcomm Eudora, productivity products like Microsoft Excel or Word, and HTTP clients like Netscape Navigator. In addition, <EM
CLASS="emphasis"
>i</EM
>FS supports sophisticated version control features, such as check-in and check-out for documents shared by multiple users. </P
></TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
> <A
CLASS="indexterm"
NAME="AUTOID-475"
></A
> HTML</P
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>An ASCII-based markup language used to create web pages. HTML is a non-proprietary specification.</P
></TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
> <A
CLASS="indexterm"
NAME="AUTOID-482"
></A
> XML</P
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>An emerging standard for creating documents that contain structured information. XML, syntactically similar to HTML, allows you to define your own markup tags. XML is expected to be a key technology in electronic commerce systems because it simplifies data interchange among various systems.</P
></TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
> <A
CLASS="indexterm"
NAME="AUTOID-489"
></A
> PL/SQL</P
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>A structured programming language similar to Ada that combines procedural constructs with standard SQL. PL/SQL also supports reusable components called packages; you can write your own packages and use those built into Oracle8<EM
CLASS="emphasis"
>i</EM
>. Like Java, PL/SQL is executed directly in the database. Unlike Java, it's supported in Oracle8 and Oracle7. </P
></TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
> <A
CLASS="indexterm"
NAME="AUTOID-497"
></A
> WebDB*</P
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>An Oracle development environment for building and monitoring content-driven web sites and data-driven applications. WebDB allows users to use a web browser to access and store information in the Oracle8<EM
CLASS="emphasis"
>i</EM
> database. It's also compatible with Oracle8 and Oracle7.</P
></TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
> <A
CLASS="indexterm"
NAME="AUTOID-505"
></A
> <A
CLASS="indexterm"
NAME="AUTOID-507"
></A
> Oracle Application Server (OAS)*</P
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>An extensible web server that uses plug-in programs called cartridges. OAS allows you to develop database-integrated web systems in a variety of languages, including Java, Perl, and PL/SQL. It's also compatible with Oracle8 and Oracle7.</P
></TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
> <A
CLASS="indexterm"
NAME="AUTOID-515"
></A
> Java</P
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>An object-oriented language similar to C++. Oracle8<EM
CLASS="emphasis"
>i</EM
> includes a built-in Java(TM) Virtual Machine (  JVM) to allow Java programs to execute directly inside the database. Java is probably the single most important new technology in Oracle8<EM
CLASS="emphasis"
>i</EM
>.</P
></TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
> <A
CLASS="indexterm"
NAME="AUTOID-524"
></A
> InternetLite*</P
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>The collective name of a set of Oracle products for developing mobile Internet applications. These products are: Oracle Lite, a small footprint version of Oracle8<EM
CLASS="emphasis"
>i</EM
>; EnterpriseSync Lite (ESL), a set of replication technologies that includes AQ Lite, a disconnected version of AQ; and the InternetLite (IL) server and API, a set of software products for replicating both data and applications to mobile applications.</P
></TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
> <A
CLASS="indexterm"
NAME="AUTOID-532"
></A
> Oracle interMedia*</P
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>The collective name of a set of Oracle cartridges for storing multimedia content inside Oracle8<EM
CLASS="emphasis"
>i</EM
>. The cartridges include interMedia Text for storing text information, Visual Information Retrieval (VIR) for storing image and audio files, and Oracle Spatial for storing geographic data.</P
></TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>Advanced Queuing (AQ)</P
></TD
><A
CLASS="indexterm"
NAME="AUTOID-540"
></A
><A
CLASS="indexterm"
NAME="AUTOID-542"
></A
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>A queue-based messaging system that allows programs to communicate asynchronously. While Oracle8<EM
CLASS="emphasis"
>i</EM
> is built on the AQ system available in Oracle8 and Oracle7, it supports a "publish/subscribe" model not available in the earlier versions.</P
></TD
></TR
></TBODY
></TABLE
><BLOCKQUOTE
CLASS="footnote"
><DIV
CLASS="footnote"
><P
CLASS="para"
><A
CLASS="footnote"
NAME="BOOK-CH-1-FOOTNOTE-2"
>[2]</A
>  Available in Oracle8<EM
CLASS="emphasis"
>i</EM
> Release 8.1.5.</P
></DIV
></BLOCKQUOTE
><P
CLASS="para"
>As you can see, Oracle8<EM
CLASS="emphasis"
>i</EM
> supports an extensive number of products and technologies for developing web sites and Internet systems. We'll look at each product in a little more depth in the next several sections.</P
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="BOOK-CH-1-SECT-3.1"
>1.3.1 The Internet File System</A
></H3
><P
CLASS="para"
> <A
CLASS="indexterm"
NAME="AUTOID-552"
></A
> <A
CLASS="indexterm"
NAME="AUTOID-554"
></A
> <A
CLASS="indexterm"
NAME="AUTOID-556"
></A
> <A
CLASS="indexterm"
NAME="AUTOID-558"
></A
> <A
CLASS="indexterm"
NAME="AUTOID-560"
></A
> <A
CLASS="indexterm"
NAME="AUTOID-562"
></A
> <A
CLASS="indexterm"
NAME="AUTOID-564"
></A
> <A
CLASS="indexterm"
NAME="AUTOID-566"
></A
> The <EM
CLASS="emphasis"
>Internet File System</EM
> (<EM
CLASS="emphasis"
>i</EM
>FS) allows Oracle8<EM
CLASS="emphasis"
>i</EM
> to masquerade as different types of data servers, including a file server, an FTP server, and an email server. This makes data accessible to almost any type of client, whether it's a Windows 95 workstation, a web browser, or an email client. <EM
CLASS="emphasis"
>i</EM
> FS supports several networking protocols to accomplish this sleight of hand:</P
><DL
CLASS="variablelist"
><DT
CLASS="term"
>SMB</DT
><DD
CLASS="listitem"
><P
CLASS="para"
>Allows Windows 95, NT, and 98 clients to treat files stored in Oracle8<EM
CLASS="emphasis"
>i</EM
> as if they resided on a normal Windows file server</P
></DD
><DT
CLASS="term"
>FTP and HTTP</DT
><DD
CLASS="listitem"
><P
CLASS="para"
>Allow FTP clients and web browsers to treat data stored in Oracle8<EM
CLASS="emphasis"
>i</EM
> as if it resided on an FTP or web site</P
></DD
><DT
CLASS="term"
>SMTP, IMAP4, and POP3</DT
><DD
CLASS="listitem"
><P
CLASS="para"
> <A
CLASS="indexterm"
NAME="AUTOID-587"
></A
> <A
CLASS="indexterm"
NAME="AUTOID-589"
></A
> Allow email clients like Eudora and Microsoft Outlook to treat data stored in an Oracle8<EM
CLASS="emphasis"
>i</EM
> database as if it resided on an email server</P
></DD
></DL
><P
CLASS="para"
>For example, a user on a Windows workstation can define a network drive like <I
CLASS="filename"
>E:</I
>, <I
CLASS="filename"
>F:</I
>, or <I
CLASS="filename"
>O:</I
> that points to an Oracle8<EM
CLASS="emphasis"
>i</EM
> database instead of to a file server. The user sees no discernible difference between an Oracle8<EM
CLASS="emphasis"
>i</EM
> volume and a file server, and she can open, update, or save Word and Excel files in the usual way.</P
><P
CLASS="para"
>Although <EM
CLASS="emphasis"
>i</EM
> FS is not available at the time of writing, Oracle has laid out the following basic model for its use in conjunction with XML:</P
><OL
CLASS="orderedlist"
><LI
CLASS="listitem"
><P
CLASS="para"
>You create a TYP file (an XML document) to describe the structure of each type of document that can be stored in the <EM
CLASS="emphasis"
>i</EM
>FS repository. Each element in the TYP file is mapped to a corresponding column in a database table.</P
></LI
><LI
CLASS="listitem"
><P
CLASS="para"
>Users can use almost any client to access the <EM
CLASS="emphasis"
>i</EM
>FS repository, including FTP and HTTP clients, email clients, and Windows (SMB) clients. The client treats the <EM
CLASS="emphasis"
>i</EM
>FS repository as it would a native data server. For example, an email client can see Oracle8<EM
CLASS="emphasis"
>i</EM
> as an email server, and a Windows client can see the same information as a network volume.</P
></LI
><LI
CLASS="listitem"
><P
CLASS="para"
><EM
CLASS="emphasis"
>i</EM
>FS executes a server-based event, a chunk of code analogous to a database trigger, whenever a user inserts, deletes, updates, or views a document in the <EM
CLASS="emphasis"
>i</EM
>FS repository. You can develop your own event servers, using Java and CORBA, to override basic <EM
CLASS="emphasis"
>i</EM
>FS functionality. For example, you might want to send an email when a certain type of document, such as a purchase order, is saved to the repository. <EM
CLASS="emphasis"
>i</EM
>FS also has a built-in XML parser to process XML documents.</P
></LI
></OL
><P
CLASS="para"
>Using <EM
CLASS="emphasis"
>i</EM
>FS, you could define a purchase order document and associate it with various events. A customer could place an order electronically by emailing a purchase order document to the Oracle8<EM
CLASS="emphasis"
>i</EM
> <EM
CLASS="emphasis"
>i</EM
>FS repository. This could trigger a "Send Thank You" event that would send an email thanking the customer for the order and a "Process Order" event that would move the document into an order entry system.</P
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="BOOK-CH-1-SECT-3.2"
>1.3.2 HTML</A
></H3
><P
CLASS="para"
>HyperText Markup Language (HTML), the language used to create web pages, is a specification for marking up text documents using a fixed set of tags that control how the document is displayed in a web browser. For example, text enclosed between the <CODE
CLASS="literal"
>&lt;b&gt;</CODE
> and <CODE
CLASS="literal"
>&lt;/b&gt;</CODE
> tags is displayed in bold, and text enclosed within <CODE
CLASS="literal"
>&lt;i&gt;</CODE
> and <CODE
CLASS="literal"
>&lt;/i&gt;</CODE
> is displayed in italics. Tags can also have attributes, parameters that act like instructions. For example, the <CODE
CLASS="literal"
>&lt;a&gt;</CODE
> tag, which is used to create a hyperlink within a document, has an attribute named <CODE
CLASS="literal"
>href </CODE
>that specifies the location (the uniform resource locator, or URL) of the page the user visits when he clicks on the link.</P
><P
CLASS="para"
>HTML is also used to create simple data entry forms you can use to store information inside an Oracle database. Here, for example, is the HTML code needed to produce a guest book screen that asks for a web user's name, email address, and comments:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>&lt;html&gt;
   &lt;title&gt;Sign the guest book&lt;/title&gt;
   &lt;body&gt;
      &lt;form action=&quot;guestbook.insert_entry&quot; method=&quot;post&quot;&gt;
         &lt;b&gt;Name:&lt;/b&gt;    &lt;input name=i_name&gt;  &lt;p&gt;
         &lt;b&gt;E-mail: &lt;/b&gt; &lt;input name=i_email&gt; &lt;p&gt;
         &lt;b&gt;comments:&lt;/b&gt;
            &lt;textarea name=&quot;i_comments&quot; rows=5 cols=40&gt;
            &lt;/textarea&gt;
         &lt;p&gt;
         &lt;input type=submit&gt;
      &lt;/form&gt;
   &lt;/body&gt;
&lt;/html&gt;</PRE
></BLOCKQUOTE
><P
CLASS="para"
><A
CLASS="xref"
HREF="ch01_03.htm#BOOK-CH-1-SECT-3.8.1"
>Figure 1.1</A
> shows how the form is displayed in a web browser. You can learn more about HTML in <A
CLASS="xref"
HREF="ch05_01.htm"
>Chapter 5, <CITE
CLASS="chapter"
>HTML</CITE
></A
>.</P
><H4
CLASS="figure"
><A
CLASS="title"
NAME="BOOK-CH-1-FIG-1"
>Figure 1.1: An HTML form</A
></H4
><IMG
CLASS="graphic"
SRC="figs/owa.0101.gif"
ALT="Figure 1.1"></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="BOOK-CH-1-SECT-3.3"
>1.3.3 XML</A
></H3
><P
CLASS="para"
> <A
CLASS="indexterm"
NAME="AUTOID-640"
></A
> Extensible Markup Language (XML) is an emerging standard for creating structured documents using an HTML-like syntax. Although much of the current enthusiasm for XML is focused on its ability to create complex user interfaces for web systems, XML has much broader applications in the following areas:</P
><UL
CLASS="itemizedlist"
><LI
CLASS="listitem"
><P
CLASS="para"
>Creating complex, browser-based user interfaces. At the time of this writing, though, few browsers support XML (Microsoft's Internet Explorer version 5.0 supports most of the new XML specification).</P
></LI
><LI
CLASS="listitem"
><P
CLASS="para"
>Defining a universal data format for use in productivity tools like spreadsheets and word processors.</P
></LI
><LI
CLASS="listitem"
><P
CLASS="para"
>Applying complex, hierarchical relationships to unstructured data.</P
></LI
><LI
CLASS="listitem"
><P
CLASS="para"
>Providing a platform-independent specification for exchanging information among a variety of electronic systems, including different database systems.</P
></LI
></UL
><P
CLASS="para"
>Surprisingly, XML is also fairly easy to learn and use. The following example shows how you could use XML to create an electronic invoice:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>&lt;?xml version=&quot;1.0&quot;?&gt;
&lt;!DOCTYPE INVOICE SYSTEM &quot;invoice.dtd&quot;&gt;
&lt;INVOICE&gt;
   &lt;INVOICE_NUMBER&gt;876514234&lt;/INVOICE_NUMBER&gt;
   &lt;DATE&gt;05/21/1999&lt;/DATE&gt;
   &lt;CUSTOMER&gt;Megaplex Industries&lt;/CUSTOMER&gt;
   &lt;INVOICE_ITEMS&gt;
      &lt;ITEM&gt;
         &lt;ITEM_NAME ITEM_NUM=&quot;PN-5342&quot;&gt;Widget 1&lt;/ITEM_NAME&gt;
         &lt;QUANTITY&gt;5&lt;/QUANTITY&gt;
         &lt;PRICE&gt;19.99&lt;/PRICE&gt;
      &lt;/ITEM&gt;
      &lt;ITEM&gt;
         &lt;ITEM_NAME ITEM_NUM=&quot;PN-6354&quot;&gt;Widget 2&lt;/ITEM_NAME&gt;
         &lt;QUANTITY&gt;2&lt;/QUANTITY&gt;
         &lt;PRICE&gt;9.99&lt;/PRICE&gt;
      &lt;/ITEM&gt;
   &lt;/INVOICE_ITEMS&gt;
   &lt;TOTAL&gt;119.93&lt;/TOTAL&gt;
&lt;/INVOICE&gt;</PRE
></BLOCKQUOTE
><P
CLASS="para"
>XML allows you to define your own tags and attributes, then set up rules that these tags must follow. An XML parser program reads each document to make sure that it follows these rules and, if it does, moves it into a hierarchical data structure called a document tree. You can then manipulate the structured information using Java or PL/SQL. You can learn more about XML in <A
CLASS="xref"
HREF="ch09_01.htm"
>Chapter 9, <CITE
CLASS="chapter"
>XML</CITE
></A
>.</P
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="BOOK-CH-1-SECT-3.4"
>1.3.4 PL/SQL</A
></H3
><P
CLASS="para"
>PL/SQL is Oracle's procedural language extension to the SQL language. PL/SQL is a structured language that has been extended in Oracle8 and Oracle8<EM
CLASS="emphasis"
>i</EM
> to handle object types and support other object-like features. PL/SQL is especially well suited to modular programming since it allows you to build stored procedures, functions, and packages to perform database operations. PL/SQL provides a rich set of datatypes and supports conditional processing, loops, cursors (for row-at-a-time processing), and collections (PL/SQL's version of arrays, formerly called PL/SQL tables). </P
><P
CLASS="para"
>Packages are an especially powerful PL/SQL construct. A <EM
CLASS="emphasis"
>package</EM
> is a container for other PL/SQL elements, such as variables, constants, procedures, functions, and datatype definitions. Packages let you build standard code libraries with well-defined APIs. In the web environment, for example, you might create standard libraries to handle security, formatting, and other reusable functionality.</P
><P
CLASS="para"
>You can learn more about PL/SQL in <A
CLASS="xref"
HREF="ch06_01.htm"
>Chapter 6, <CITE
CLASS="chapter"
>PL/SQL</CITE
></A
>.</P
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="BOOK-CH-1-SECT-3.5"
>1.3.5 WebDB</A
></H3
><P
CLASS="para"
> <A
CLASS="indexterm"
NAME="AUTOID-666"
></A
> WebDB is an excellent tool for developing database-driven web applications and sites. WebDB lets you perform everything from database administration to application development using only a web browser. Your applications and content area are stored inside the database. WebDB's capabilities are divided into these broad categories:</P
><DL
CLASS="variablelist"
><DT
CLASS="term"
>Database administration</DT
><DD
CLASS="listitem"
><P
CLASS="para"
> <A
CLASS="indexterm"
NAME="AUTOID-673"
></A
> WebDB lets you use a web browser, rather than a "fat" client like Oracle Enterprise Manager (OEM), to perform routine database administration tasks. These tasks might include viewing the definitions of database objects, administering WebDB and database security, and monitoring database and application performance.</P
></DD
><DT
CLASS="term"
>Application development</DT
><DD
CLASS="listitem"
><P
CLASS="para"
>WebDB provides <EM
CLASS="emphasis"
>wizards</EM
> that simplify the development of database objects (e.g., tables and views) and user interface components (e.g., forms and reports).</P
></DD
><DT
CLASS="term"
>Content-driven web management</DT
><DD
CLASS="listitem"
><P
CLASS="para"
> <A
CLASS="indexterm"
NAME="AUTOID-684"
></A
> <A
CLASS="indexterm"
NAME="AUTOID-686"
></A
> WebDB lets you use a browser to build and edit complex sites, add content (e.g., PDF, presentations, papers), and integrate other WebDB applications. You, and better yet, your end users, can add web content directly from a browser and can manage it like any other information.</P
></DD
></DL
><P
CLASS="para"
>You can learn more about WebDB in <A
CLASS="xref"
HREF="ch03_01.htm"
>Chapter 3, <CITE
CLASS="chapter"
>WebDB</CITE
></A
>.</P
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="BOOK-CH-1-SECT-3.6"
>1.3.6 Oracle Application Server</A
></H3
><P
CLASS="para"
>Oracle Application Server (OAS) is another good tool for building web applications. Whereas WebDB may be the most appropriate tool for quickly building and deploying Internet applications, OAS is probably best for electronic commerce and enterprise resource planning applications. OAS performs all the functions of a traditional web server, but in addition, it provides tight integration to an Oracle database.</P
><P
CLASS="para"
>OAS is built on a system of plug-in <EM
CLASS="emphasis"
>cartridges</EM
> used to execute certain kinds of resources. Several language cartridges come with OAS: PL/SQL, used to execute PL/SQL stored procedures; Java, used to execute server-side Java programs; and Perl, used to execute Perl scripts. Other cartridges are also available; for example, the ODBC cartridge executes ODBC (Open Database Connectivity) statements and returns the results directly to your browser.</P
><P
CLASS="para"
>You can learn more about OAS in <A
CLASS="xref"
HREF="ch04_01.htm"
>Chapter 4, <CITE
CLASS="chapter"
>Oracle Application Server (OAS)</CITE
></A
>.</P
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="BOOK-CH-1-SECT-3.7"
>1.3.7 Java</A
></H3
><P
CLASS="para"
> <A
CLASS="indexterm"
NAME="AUTOID-700"
></A
> Java, a popular object-oriented language, is becoming a good choice for developing and deploying Oracle-based web applications. Oracle8<EM
CLASS="emphasis"
>i</EM
> is completely integrated with Java, and supports a wide range of data access and development models. These include:</P
><DL
CLASS="variablelist"
><DT
CLASS="term"
>JDBC(TM)</DT
><DD
CLASS="listitem"
><P
CLASS="para"
> <A
CLASS="indexterm"
NAME="AUTOID-708"
></A
> <A
CLASS="indexterm"
NAME="AUTOID-710"
></A
> The standard specification for interaction between Java and relational databases, as defined by Sun Microsystems. JDBC is the Java version of ODBC. Programmers can take advantage of Oracle's extensions to JDBC, such as convenient access to Oracle-specific datatypes like ROWID.</P
></DD
><DT
CLASS="term"
>SQLJ</DT
><DD
CLASS="listitem"
><P
CLASS="para"
> <A
CLASS="indexterm"
NAME="AUTOID-717"
></A
> <A
CLASS="indexterm"
NAME="AUTOID-719"
></A
> A precompiler technology (similar to Pro*C or Pro*COBOL) that allows the programmer to embed static SQL statements directly into Java code. The SQLJ translator and runtime libraries are available both inside and outside the Oracle8<EM
CLASS="emphasis"
>i</EM
> server. SQLJ also provides access to Oracle-specific datatypes.</P
></DD
><DT
CLASS="term"
>Java stored procedures (JSPs)</DT
><DD
CLASS="listitem"
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="AUTOID-727"
></A
> <A
CLASS="indexterm"
NAME="AUTOID-729"
></A
> <A
CLASS="indexterm"
NAME="AUTOID-731"
></A
> Stored programs that let you invoke static Java methods from Oracle's SQL or PL/SQL languages. The mechanism for publishing Java methods in this fashion is proprietary to Oracle.</P
></DD
><DT
CLASS="term"
>CORBA server objects</DT
><DD
CLASS="listitem"
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="AUTOID-738"
></A
> <A
CLASS="indexterm"
NAME="AUTOID-740"
></A
> Objects that are developed according to Object Management Group (OMG) specifications and that can be distributed. They can communicate with other objects regardless of location. Using CORBA, you can integrate both Java and non-Java applications. CORBA server objects in Oracle8<EM
CLASS="emphasis"
>i</EM
> can both call and be called by CORBA objects outside the server. CORBA is supported by a variety of languages and environments.</P
></DD
><DT
CLASS="term"
>Enterprise Java Beans(TM) (EJBs)</DT
><DD
CLASS="listitem"
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="AUTOID-748"
></A
> <A
CLASS="indexterm"
NAME="AUTOID-750"
></A
> <A
CLASS="indexterm"
NAME="AUTOID-752"
></A
> An approach especially helpful in large distributed systems. EJBs are coarse-grained, reusable components that comply with Sun's EJB specification; they rely on the Oracle8<EM
CLASS="emphasis"
>i</EM
> EJB "execution container" for services such as component location, activation, security, and transaction support. EJBs can be used with non-Java applications.</P
></DD
><DT
CLASS="term"
>Java servlets</DT
><DD
CLASS="listitem"
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="AUTOID-760"
></A
> <A
CLASS="indexterm"
NAME="AUTOID-762"
></A
> Java programs that generate HTML for presentation in a web browser. The Oracle8<EM
CLASS="emphasis"
>i</EM
> server provides HTTP service and a servlet execution environment by incorporating a special version of Sun's Java(TM) Web Server(TM).[<A
CLASS="footnote"
HREF="#BOOK-CH-1-FOOTNOTE-3"
>3</A
>] Servlets can read and write database data using any convenient database access model (   JDBC, SQLJ, etc.) and generate any form of HTML. </P
><BLOCKQUOTE
CLASS="footnote"
><DIV
CLASS="footnote"
><P
CLASS="para"
><A
CLASS="footnote"
NAME="BOOK-CH-1-FOOTNOTE-3"
>[3]</A
> This capability is in beta form in Oracle8<EM
CLASS="emphasis"
>i</EM
>'s initial release.</P
></DIV
></BLOCKQUOTE
></DD
></DL
><P
CLASS="para"
>Consult the appendix for a list of references concerning Java development.</P
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="BOOK-CH-1-SECT-3.8"
>1.3.8 InternetLite</A
></H3
><P
CLASS="para"
> <A
CLASS="indexterm"
NAME="AUTOID-773"
></A
> <A
CLASS="indexterm"
NAME="AUTOID-775"
></A
> <A
CLASS="indexterm"
NAME="ch-01-i_lite"
></A
> InternetLite is a toolkit for building mobile applications that allow users to work while disconnected from a network. A mobile application has two basic parts: a <EM
CLASS="emphasis"
>master sit</EM
><I
CLASS="filename"
>e</I
> and a <EM
CLASS="emphasis"
>snapshot sit</EM
><I
CLASS="filename"
>e</I
>. The master site is usually a complete, production Oracle database. When a user needs to disconnect from the network and use the database on the road, he copies a subset of the production data from the master site to his own local database, the snapshot site. The user makes various changes to the snapshot site, each of which is recorded in a log, until he is ready to reconnect to the master site. At this point, the snapshot site and master site must be <EM
CLASS="emphasis"
>synchronized</EM
> so that changes on the snapshot site are applied to the master site, and vice versa. The logs are reset once the master site and snapshot site are in synch.</P
><P
CLASS="para"
>As you can imagine, handcoding the mechanics for each of these steps can be a tedious, difficult process. The various InternetLite products act as a sort of operating system for distributed computing that provides these services automatically; it handles data and application replication issues, allowing you to concentrate on designing your application without worrying about lower-level details. There are four individual products in the InternetLite product suite: Oracle Lite, EnterpriseSync Lite, AQ Lite, and the InternetLite server and API.</P
><P
CLASS="para"
>Since it's helpful to look at each product in the context of a specific example, let's suppose you want to create a mobile expense sheet application. The system should allow users to record their expenses while they're on the road and, when they return to the office, automatically upload these expense items into the production database. </P
><DIV
CLASS="sect3"
><H4
CLASS="sect3"
><A
CLASS="title"
NAME="BOOK-CH-1-SECT-3.8.1"
>1.3.8.1 Oracle Lite</A
></H4
><P
CLASS="para"
> <A
CLASS="indexterm"
NAME="AUTOID-789"
></A
> <A
CLASS="indexterm"
NAME="AUTOID-791"
></A
> <A
CLASS="indexterm"
NAME="AUTOID-793"
></A
> <A
CLASS="indexterm"
NAME="AUTOID-795"
></A
> <A
CLASS="indexterm"
NAME="AUTOID-797"
></A
> <A
CLASS="indexterm"
NAME="AUTOID-799"
></A
> <A
CLASS="indexterm"
NAME="AUTOID-801"
></A
> <A
CLASS="indexterm"
NAME="AUTOID-803"
></A
> Oracle Lite functions as a miniature version of the full Oracle8<EM
CLASS="emphasis"
>i</EM
> database, which runs in just under one megabyte of memory and supports the major database application objects, such as tables, indexes, and sequences. The Oracle Lite database is used to maintain the snapshot site in a mobile application.</P
><P
CLASS="para"
> <A
CLASS="indexterm"
NAME="AUTOID-807"
></A
> <A
CLASS="indexterm"
NAME="AUTOID-809"
></A
> Oracle Lite supports two modes for application development: client/server and Internet. Client/server mode allows developers to use the Oracle Call Interface (OCI) to write C programs, Open Client Adapter (OCA) to write Developer/2000 applications, and ODBC to write applications using Visual Basic, Access, PowerBuilder, etc. Internet mode supports two access methods: JDBC or the Java Access Classes (   JAC), an API for creating data-aware Java servlets.</P
><P
CLASS="para"
> <A
CLASS="indexterm"
NAME="AUTOID-813"
></A
> To return to our expense report example: Oracle Lite is the application data store that contains the expense items. Our first step in developing the application is to define the various tables, such as the different types of expenses (lodging, mileage, food) and the actual expense items (person submitting the item, date, expense type, dollar amount). We can use Oracle Forms, Java, and an ODBC client such as Microsoft Access to write the application and then use EnterpriseSync Lite to develop a replication strategy to move data between the master and snapshot sites.</P
></DIV
><DIV
CLASS="sect3"
><H4
CLASS="sect3"
><A
CLASS="title"
NAME="BOOK-CH-1-SECT-3.8.2"
>1.3.8.2 EnterpriseSync Lite</A
></H4
><P
CLASS="para"
> <A
CLASS="indexterm"
NAME="AUTOID-818"
></A
> <A
CLASS="indexterm"
NAME="AUTOID-820"
></A
> <A
CLASS="indexterm"
NAME="AUTOID-822"
></A
> <A
CLASS="indexterm"
NAME="AUTOID-824"
></A
> EnterpriseSync Lite (ESL) is the second product in the InternetLite suite. As its name implies, ESL is used to handle the synchronization phase of a mobile application. ESL provides a replication API, called REPAPI, that defines how the table data is moved between the master and snapshot sites.</P
><P
CLASS="para"
>ESL is based on Oracle's database table <EM
CLASS="emphasis"
>snapshot</EM
> technology. A snapshot is basically a copy of a table that's based on a SQL query. For example, to create a snapshot of the expense item table, I could use the command:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>CREATE SNAPSHOT expense_item_snap AS
   SELECT * FROM EXPENSE_ITEMS;</PRE
></BLOCKQUOTE
><P
CLASS="para"
> <A
CLASS="indexterm"
NAME="AUTOID-830"
></A
> <A
CLASS="indexterm"
NAME="AUTOID-832"
></A
> <A
CLASS="indexterm"
NAME="AUTOID-834"
></A
> Periodically, the snapshot must be refreshed to reload the information from its base query. There are two refresh options: complete and fast. A <EM
CLASS="emphasis"
>complete refresh</EM
> will reload the entire table. A <EM
CLASS="emphasis"
>fast refresh</EM
> will reload only the rows that have been changed or added since the last refresh. </P
><BLOCKQUOTE
CLASS="tip"
><P
CLASS="para"
><STRONG
>TIP:</STRONG
> As a rule of thumb, the fast refresh is faster only when fewer than 10% of the rows in the underlying master table have been changed. Otherwise, the complete refresh is faster.</P
></BLOCKQUOTE
><P
CLASS="para"
> <A
CLASS="indexterm"
NAME="AUTOID-841"
></A
> <A
CLASS="indexterm"
NAME="AUTOID-843"
></A
> <A
CLASS="indexterm"
NAME="AUTOID-845"
></A
> <A
CLASS="indexterm"
NAME="AUTOID-847"
></A
> ESL automates the process of creating the snapshot site by allowing you to define how and when the application loads and refreshes the snapshot data. Hooking your program into the REPAPI provides a behind the scenes way to move data from the snapshot site into the master site and vice versa. ESL supports two replication modes: synchronous and asynchronous. In <EM
CLASS="emphasis"
>synchronous mode</EM
>, the user must be connected directly to the database over a standard SQL*Net (Net8) connection; data is transmitted using the standard Oracle protocol. In <EM
CLASS="emphasis"
>asynchronous mode</EM
>, the user uses a file transfer process, such as email or FTP, to send an export file of her snapshot log and receive an import file of snapshot refresh data. The advantage of this approach is that users can synchronize their systems off-site using standard products like Qualcomm Eudora or Microsoft Outlook.</P
></DIV
><DIV
CLASS="sect3"
><H4
CLASS="sect3"
><A
CLASS="title"
NAME="BOOK-CH-1-SECT-3.8.3"
>1.3.8.3 AQ Lite</A
></H4
><A
CLASS="indexterm"
NAME="AUTOID-854"
></A
><P
CLASS="para"
>EnterpriseSync Lite also includes AQ Lite, a scaled-down version of Advanced Queuing (AQ, covered later in this chapter), that's used to create distributed messaging services. Messages are queued to the snapshot site's local data store and sent to the production queues when the user synchronizes.</P
></DIV
><DIV
CLASS="sect3"
><H4
CLASS="sect3"
><A
CLASS="title"
NAME="BOOK-CH-1-SECT-3.8.4"
>1.3.8.4 InternetLite server and API</A
></H4
><P
CLASS="para"
> <A
CLASS="indexterm"
NAME="AUTOID-860"
></A
> <A
CLASS="indexterm"
NAME="AUTOID-862"
></A
> <A
CLASS="indexterm"
NAME="AUTOID-864"
></A
> <A
CLASS="indexterm"
NAME="AUTOID-866"
></A
> <A
CLASS="indexterm"
NAME="AUTOID-868"
></A
> The InternetLite server allows you to synchronize both data and applications on mobile clients, eliminating the problem of installing the correct version of an application on mobile clients. The advantages of this approach should be clear to anyone who has ever tried to provide phone support to an irate user (usually calling from the client's site!) who has a corrupted database or a Dynamic Link Library (DLL) conflict.</P
><P
CLASS="para"
>The catch is that the applications must follow the Internet development model; the client/server model isn't supported. The development process works something like this:</P
><OL
CLASS="orderedlist"
><LI
CLASS="listitem"
><P
CLASS="para"
>The developer defines the master and snapshot sites using Oracle Lite as a local data store.</P
></LI
><LI
CLASS="listitem"
><P
CLASS="para"
>She then writes the application using Java servlets. Typically, these applications use an HTML user interface to access the underlying database tables. </P
></LI
><LI
CLASS="listitem"
><P
CLASS="para"
>Next, she sets up a replication profile for each mobile client that defines the snapshot tables and application components that are replicated.</P
></LI
><LI
CLASS="listitem"
><P
CLASS="para"
>When the user connects to the IL server, it receives the data in the master site as well as all the Java servlets required for the application. IL replicates everything the user needs to run the application in disconnected mode, including the Oracle Lite database engine and the necessary Java classes.</P
></LI
></OL
><P
CLASS="para"
>The InternetLite server, which performs these operations, is a plug-in cartridge for OAS version 4.0. <A
CLASS="xref"
HREF="ch01_03.htm#BOOK-CH-1-SECT-3.8.1"
>Figure 1.2</A
> shows the architecture of an IL-based system.</P
><H4
CLASS="figure"
><A
CLASS="title"
NAME="BOOK-CH-1-FIG-2"
>Figure 1.2: Architecture of an InternetLite-based mobile application</A
></H4
><IMG
CLASS="graphic"
SRC="figs/owa.0102.gif"
ALT="Figure 1.2"><P
CLASS="para"
>Consult the appendix for a list of resources that will help you learn more about the InternetLite product suite and building distributed systems in general.</P
></DIV
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="BOOK-CH-1-SECT-3.9"
>1.3.9 Oracle interMedia</A
></H3
><P
CLASS="para"
> <A
CLASS="indexterm"
NAME="AUTOID-889"
></A
> <A
CLASS="indexterm"
NAME="AUTOID-891"
></A
> <A
CLASS="indexterm"
NAME="AUTOID-893"
></A
> <A
CLASS="indexterm"
NAME="AUTOID-895"
></A
> <A
CLASS="indexterm"
NAME="AUTOID-897"
></A
> <A
CLASS="indexterm"
NAME="AUTOID-899"
></A
>  <A
CLASS="indexterm"
NAME="AUTOID-900"
></A
> Oracle8<EM
CLASS="emphasis"
>i</EM
> has three plug-in cartridges that can manage multimedia data: the interMedia Text cartridge, the Video Information Retrieval (VIR) cartridge, and the Oracle Spatial cartridge. These three products are collectively called Oracle interMedia, and allow Oracle to manage text, multimedia, and spatial data.</P
><DIV
CLASS="sect3"
><H4
CLASS="sect3"
><A
CLASS="title"
NAME="BOOK-CH-1-SECT-3.9.1"
>1.3.9.1 Text data</A
></H4
><P
CLASS="para"
> <A
CLASS="indexterm"
NAME="AUTOID-906"
></A
> <A
CLASS="indexterm"
NAME="AUTOID-908"
></A
> <A
CLASS="indexterm"
NAME="AUTOID-910"
></A
> <A
CLASS="indexterm"
NAME="AUTOID-913"
></A
> The Oracle interMedia Text cartridge is used to manage documents (either inside or outside the database) by automatically indexing them with smart attributes. You can then use SQL to perform a variety of complex searches, such as searching for an exact phrase or performing a fuzzy search to find the closest matches for the search criteria. Text can index nontext documents, such as Word, Excel, PowerPoint, WordPerfect, <A
CLASS="indexterm"
NAME="AUTOID-916"
></A
> Adobe PDF, HTML, and XML, using a filter that converts the document from its native format into one the database can understand. Currently, there are more than 100 such filters.</P
></DIV
><DIV
CLASS="sect3"
><H4
CLASS="sect3"
><A
CLASS="title"
NAME="BOOK-CH-1-SECT-3.9.2"
>1.3.9.2 Multimedia data</A
></H4
><P
CLASS="para"
> <A
CLASS="indexterm"
NAME="AUTOID-921"
></A
> <A
CLASS="indexterm"
NAME="AUTOID-923"
></A
> <A
CLASS="indexterm"
NAME="AUTOID-925"
></A
> <A
CLASS="indexterm"
NAME="AUTOID-927"
></A
> <A
CLASS="indexterm"
NAME="AUTOID-929"
></A
> <A
CLASS="indexterm"
NAME="AUTOID-931"
></A
> <A
CLASS="indexterm"
NAME="AUTOID-933"
></A
> <A
CLASS="indexterm"
NAME="AUTOID-936"
></A
> <A
CLASS="indexterm"
NAME="AUTOID-938"
></A
> <A
CLASS="indexterm"
NAME="AUTOID-940"
></A
> <A
CLASS="indexterm"
NAME="AUTOID-942"
></A
> <A
CLASS="indexterm"
NAME="AUTOID-944"
></A
> <A
CLASS="indexterm"
NAME="AUTOID-946"
></A
> <A
CLASS="indexterm"
NAME="AUTOID-948"
></A
> <A
CLASS="indexterm"
NAME="AUTOID-950"
></A
> <A
CLASS="indexterm"
NAME="AUTOID-952"
></A
> interMedia can manage traditional multimedia files, such as video or audio clips, as well as static image files. Video Information Retrieval (VIR) can store video clips in a variety of formats, including AVI, QuickTime, and MPEG. It can store audio clips in  AUF, AIFF, AIFF-C, and WAV   formats. These clips are accessible through any streaming server, such as RealNetworks or Oracle Audio/Video Server. interMedia can also store image files in a variety of popular formats, including TIFF, GIF, and JPEG. Audio, video, and image data are all compatible with popular authoring tools like  Symantec Visual Page or FrontPage, via the interMedia clipboard.</P
></DIV
><DIV
CLASS="sect3"
><H4
CLASS="sect3"
><A
CLASS="title"
NAME="BOOK-CH-1-SECT-3.9.3"
>1.3.9.3 Spatial data</A
></H4
><P
CLASS="para"
> <A
CLASS="indexterm"
NAME="AUTOID-958"
></A
> <A
CLASS="indexterm"
NAME="AUTOID-960"
></A
> interMedia's Spatial cartridge provides support for a range of geocoding systems that specify a latitude and longitude with a specific piece of information, such as a zip code or an address. This information can be used to calculate distances between locations or to represent information in geographic information systems (GIS). For example, using this information, you could create a query system for a bank that returned the ATM locations closest to a specific address.</P
></DIV
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="BOOK-CH-1-SECT-3.10"
>1.3.10 Advanced Queuing</A
></H3
><A
CLASS="indexterm"
NAME="AUTOID-964"
></A
><A
CLASS="indexterm"
NAME="AUTOID-966"
></A
><P
CLASS="para"
> <A
CLASS="indexterm"
NAME="AUTOID-969"
></A
> Advanced Queuing (AQ), first introduced in Oracle8, is a message-based queuing system you can use to bind a variety of different systems together. A universally accessible API used to send complex messages from one system to another, AQ is built on procedures and functions stored directly in the database. This architecture allows applications in any language or platform, from COBOL to PL/SQL to Java, to communicate through a system of queues maintained in the database.</P
><P
CLASS="para"
>For example, an OAS storefront could use AQ to send an order from its order entry system. This system, perhaps written in C, could use the AQ API to retrieve and process the request. This universal application-to-application communication eliminates the need for clunky import and export routines.</P
><P
CLASS="para"
>As an example of AQ in action, suppose you want to write a simple web site that lets registered customers buy or sell stocks over the Internet. The customer can use a variety of clients, such as a Java applet, an HTML browser, or an Oracle Forms application, to place an order to buy or sell stock. Another program, perhaps written in Pro*COBOL, periodically processes and fulfills the orders placed so far. The next sections illustrate how to design an AQ-based solution. <A
CLASS="xref"
HREF="ch01_03.htm#BOOK-CH-1-SECT-3.8.1"
>Figure 1.3</A
> illustrates its basic architecture.</P
><H4
CLASS="figure"
><A
CLASS="title"
NAME="BOOK-CH-1-FIG-3"
>Figure 1.3: Basic architecture of an AQ-based stock system</A
></H4
><IMG
CLASS="graphic"
SRC="figs/owa.0103.gif"
ALT="Figure 1.3"><DIV
CLASS="sect3"
><H4
CLASS="sect3"
><A
CLASS="title"
NAME="BOOK-CH-1-SECT-3.10.1"
>1.3.10.1 Define the message payload</A
></H4
><P
CLASS="para"
>The first step is to define the structure of the message contained in the queue, which is done with the SQL command, CREATE TYPE. Here, for example, is how we might define a simple payload for the stock example:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>CREATE TYPE aq.customer_order AS OBJECT (
   customer_id NUMBER,
   stock_symbol VARCHAR2(20),
   num_shares NUMBER );</PRE
></BLOCKQUOTE
></DIV
><DIV
CLASS="sect3"
><H4
CLASS="sect3"
><A
CLASS="title"
NAME="BOOK-CH-1-SECT-3.10.2"
>1.3.10.2 Create and start the queue tables</A
></H4
><P
CLASS="para"
>The next step is to use the AQ administrative API to create the queues inside the Oracle database. Each queue is associated with a payload definition and (by default) follows the first-in-first-out protocol. In our example, we want to create two message queues: one for "buy" messages and one for "sell" orders. After you create the queues, you can start and stop them to control when they can receive messages. The following code snippet illustrates these steps for our example:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>-- Create BUY and SELL Queues
EXECUTE DBMS_AQADM.CREATE_QUEUE_TABLE (
   queue_table =&gt; 'aq.BUY_QUEUE',
   queue_payload_type =&gt; 'aq.customer_order');

EXECUTE DBMS_AQADM.CREATE_QUEUE_TABLE (
   queue_table =&gt; 'aq.SELL_QUEUE',
   queue_payload_type =&gt; 'aq.customer_order');

-- Start the Queues
EXECUTE DBMS_AQADM.START_QUEUE (
   queue_name =&gt; 'BUY_QUEUE');

EXECUTE DBMS_AQADM.START_QUEUE (
   queue_name =&gt; 'SELL_QUEUE');</PRE
></BLOCKQUOTE
></DIV
><DIV
CLASS="sect3"
><H4
CLASS="sect3"
><A
CLASS="title"
NAME="BOOK-CH-1-SECT-3.10.3"
>1.3.10.3 Enqueue and dequeue messages to/from a queue</A
></H4
><P
CLASS="para"
> <A
CLASS="indexterm"
NAME="AUTOID-988"
></A
> <A
CLASS="indexterm"
NAME="AUTOID-990"
></A
> Once you've created and defined the queues, you can begin <I
CLASS="filename"
>enqueu</I
><EM
CLASS="emphasis"
>i</EM
><I
CLASS="filename"
>ng</I
> (inserting) and <I
CLASS="filename"
>dequeu</I
><EM
CLASS="emphasis"
>i</EM
><I
CLASS="filename"
>ng</I
> (retrieving) messages. To create a message, you create an object based on the queue payload, set the values you want to insert, and call AQ's ENQUEUE procedure. For example, a browser-based client could enqueue an order at any time by calling the following PL/SQL procedure:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>PROCEDURE buy_stock (
   i_customer_id  IN VARCHAR2 DEFAULT NULL,
   i_stock_symbol IN VARCHAR2 DEFAULT NULL,
   i_num_shares   IN VARCHAR2 DEFAULT NULL
   )
IS
   
   the_order aq.customer_order;
   queueopts dbms_aq.enqueue_options_t;
   msgprops dbms_aq.enqueue_properties_t;
   msg_id RAW(16);

BEGIN
   the_order :=
      message_type (
         i_customer_id,
         i_stock_symbol,
         i_num_shares
      );
   DBMS_AQ.ENQUEUE (
      queue_name =&gt; 'BUY_QUEUE',
      payload =&gt; the_order,
      enqueue_options =&gt; queueopts,
      message_properties =&gt; msgprops,
      msg_id =&gt; msg_handle
   );
END;   </PRE
></BLOCKQUOTE
><P
CLASS="para"
>Dequeuing reverses the process by extracting the item from the queue. To dequeue a message, you create a payload variable and then use the AQ's DEQUEUE procedure to extract the first item off the queue. In our example, we could fairly easily retrofit our legacy system (for example, a Pro*COBOL program) to loop through each item on the BUY and SELL queue.</P
><P
CLASS="para"
>You can learn more about AQ in <CITE
CLASS="citetitle"
>Oracle Built-in Packages</CITE
>, by Steven Feuerstein, Charles Dye, and John Beresniewicz (O'Reilly &amp; Associates).</P
></DIV
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="BOOK-CH-1-SECT-3.11"
>1.3.11 Functional Summary of Oracle8i Web Products</A
></H3
><P
CLASS="para"
><A
CLASS="xref"
HREF="ch01_03.htm#BOOK-CH-1-SECT-3.8.1"
>Table 1.2</A
> illustrates the role each Oracle8<EM
CLASS="emphasis"
>i</EM
> web product plays in fulfilling the requirements for the new generation of systems laid out at the beginning of this chapter.</P
><BR><TABLE
CLASS="table"
BORDER="1"
CELLPADDING="3"
><CAPTION
CLASS="table"
><A
CLASS="title"
NAME="BOOK-CH-1-TABLE-4"
>Table 1.2: Uses for Oracle8i Web Technology </A
></CAPTION
><THEAD
CLASS="thead"
><TR
CLASS="row"
VALIGN="TOP"
><TH
CLASS="entry"
ALIGN="LEFT"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
></P
></TH
><TH
CLASS="entry"
ALIGN="LEFT"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>AQ</P
></TH
><TH
CLASS="entry"
ALIGN="LEFT"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>HTML</P
></TH
><TH
CLASS="entry"
ALIGN="LEFT"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
><EM
CLASS="emphasis"
>i </EM
>FS</P
></TH
><TH
CLASS="entry"
ALIGN="LEFT"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>interMedia</P
></TH
><TH
CLASS="entry"
ALIGN="LEFT"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>IL</P
></TH
><TH
CLASS="entry"
ALIGN="LEFT"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>Java</P
></TH
><TH
CLASS="entry"
ALIGN="LEFT"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>OAS</P
></TH
><TH
CLASS="entry"
ALIGN="LEFT"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>PL/SQL</P
></TH
><TH
CLASS="entry"
ALIGN="LEFT"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>WebDB</P
></TH
><TH
CLASS="entry"
ALIGN="LEFT"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>XML</P
></TH
></TR
></THEAD
><TBODY
CLASS="tbody"
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>Content management</P
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
></P
>&nbsp;</TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
></P
>&nbsp;</TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>X</P
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>X</P
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
></P
>&nbsp;</TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
></P
>&nbsp;</TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
></P
>&nbsp;</TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
></P
>&nbsp;</TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>X</P
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
></P
>&nbsp;</TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>Application development</P
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>X</P
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>X</P
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>X</P
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>X</P
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>X</P
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>X</P
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>X</P
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>X</P
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>X</P
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>X</P
></TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>Application integration</P
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>X</P
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
></P
>&nbsp;</TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>X</P
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
></P
>&nbsp;</TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
></P
>&nbsp;</TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>X</P
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
></P
>&nbsp;</TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
></P
>&nbsp;</TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
></P
>&nbsp;</TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>X</P
></TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>Electronic data exchange</P
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
></P
>&nbsp;</TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
></P
>&nbsp;</TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
></P
>&nbsp;</TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
></P
>&nbsp;</TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
></P
>&nbsp;</TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
></P
>&nbsp;</TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
></P
>&nbsp;</TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
></P
>&nbsp;</TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
></P
>&nbsp;</TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>X</P
></TD
></TR
></TBODY
></TABLE
><P
CLASS="para"
>In addition to supporting a range of tools for content management, application development, and application integration, Oracle8<EM
CLASS="emphasis"
>i</EM
> (as well as Oracle7 and Oracle8) scales across three related dimensions: performance, platform, and price. Oracle8<EM
CLASS="emphasis"
>i</EM
>'s multithreaded architecture ensures high performance through clustering, connection pooling, and multiplexing; it also has a resource management system to precisely control the CPU time given to a user or a group of users. Oracle8<EM
CLASS="emphasis"
>i</EM
> runs on an enormous number of hardware and software platforms, which can range from a palmtop (via Oracle Lite), to a workgroup server, to a mainframe; porting an application from one platform to another is often as simple as exporting and importing the schema. Finally, since Oracle8<EM
CLASS="emphasis"
>i</EM
> is supported on so many different systems, you can decide how much you're willing to spend on an application without locking yourself into a platform that can't, if necessary, scale up.</P
><P
CLASS="para"
>Finally, Oracle8<EM
CLASS="emphasis"
>i</EM
> addresses the pressing problem of development fragmentation by allowing developers to master a single platform that can meet most foreseeable future demands. Of course, there's just one little problem.</P
></DIV
></DIV
><DIV
CLASS="htmlnav"
><P
></P
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch01_02.htm#BOOK-CH-1-SECT-2.2"
TITLE="1.2 Current Web Techniques Are Inadequate"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 1.2 Current Web Techniques Are Inadequate"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="book"
HREF="index.htm"
TITLE="Oracle Web Applications: PL/SQL Developer's Introduction"
><IMG
SRC="../gifs/txthome.gif"
ALT="Oracle Web Applications: PL/SQL Developer's Introduction"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch01_04.htm#BOOK-CH-1-SECT-4.2.1"
TITLE="1.4 A Roadmap to Oracle8i"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 1.4 A Roadmap to Oracle8i"
BORDER="0"></A
></TD
></TR
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
>1.2 Current Web Techniques Are Inadequate</TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="index"
HREF="index/idx_0.htm"
TITLE="Book Index"
><IMG
SRC="../gifs/index.gif"
ALT="Book Index"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
>1.4 A Roadmap to Oracle8i</TD
></TR
></TABLE
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"></DIV
><IMG SRC="../gifs/smnavbar.gif"
USEMAP="#map"
BORDER="0"
ALT="The Oracle Library Navigation">

<P><font size="-1">
<a href="../copyrght.htm#copy">Copyright (c) 2000</a> O'Reilly &amp; Associates. All rights reserved.
</font></P>

<MAP NAME="map">

<AREA SHAPE="RECT"
COORDS="0,0,35,30"
HREF="../index.htm"
ALT="Library Home">

<AREA SHAPE="RECT"
COORDS="40,0,95,30"
HREF="../prog2/index.htm"
ALT="Oracle PL/SQL Programming, 2nd. Ed.">

<AREA SHAPE="RECT"
COORDS="100,0,200,30"
HREF="../guide8i/index.htm"
ALT="Guide to Oracle 8i Features">

<AREA SHAPE="RECT"
COORDS="205,0,245,30"
HREF="../bipack/index.htm"
ALT="Oracle Built-in Packages">

<AREA SHAPE="RECT"
COORDS="250,0,320,30"
HREF="../advprog/index.htm"
ALT="Advanced PL/SQL Programming with Packages">

<AREA SHAPE="RECT"
COORDS="325,0,420,30"
HREF="index.htm"
ALT="Oracle Web Applications">

<AREA SHAPE="RECT"
COORDS="425,0,490,30"
HREF="../langpkt/index.htm"
ALT="Oracle PL/SQL Language Pocket Reference">

<AREA SHAPE="RECT"
COORDS="495,0,570,30"
HREF="../bipkt/index.htm"
ALT="Oracle PL/SQL Built-ins Pocket Reference">
</MAP>

</BODY
>
<!-- Mirrored from liso.cs.pusan.ac.kr by HTTrack Website Copier/3.x [XR&CO'2001] -->
</HTML
>
