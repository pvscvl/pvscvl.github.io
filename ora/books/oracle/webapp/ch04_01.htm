<HTML
><HEAD
><TITLE
>[Chapter 4] Oracle Application Server (OAS)</TITLE
><META
NAME="DC.Creator"
CONTENT="Andrew Odewahn"><META
NAME="DC.Date"
CONTENT="2000-04-29T18:35:48Z"><META
NAME="DC.Format"
CONTENT="text/html"
SCHEME="MIME"><META
NAME="DC.Identifier"
CONTENT="O'Reilly and Associates CDROM-1-56592-687-0E"><META
NAME="DC.Language"
CONTENT="en-US"><META
NAME="DC.Publisher"
CONTENT="O'Reilly &amp; Associates, Inc."><META
NAME="DC.Source"
CONTENT="1-56592-687-0E"
SCHEME="ISBN"><META
NAME="DC.Subject.Keyword"
CONTENT="Oracle Web 8i"><META
NAME="DC.Title"
CONTENT="Oracle Web Applications: PL/SQL Developer's Introduction"><META
NAME="DC.Type"
CONTENT="Text.Monograph"><META
NAME="generator"
CONTENT="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><LINK
REL="stylesheet"
TYPE="text/css"
HREF="../style/style1.css"><LINK
REV="made"
HREF="mailto:online-books@oreilly.com"
TITLE="Online Books Comments"><LINK
REL="up"
HREF="index.htm"
TITLE="Oracle Web Applications: PL/SQL Developer's Introduction"><LINK
REL="prev"
HREF="ch03_02.htm#BOOK-CH-3-SECT-2.2.1"
TITLE="3.2 WebDB Architecture"><LINK
REL="next"
HREF="ch04_02.htm#BOOK-CH-4-SECT-2.3"
TITLE="4.2 Creating Dynamic Resources"></HEAD
><BODY
><DIV
CLASS="htmlnav"
><H1
><IMG
SRC="gifs/smbanner.gif"
ALT="Oracle Web Applications: PL/SQL Developer's Introduction"
USEMAP="#srchmap"
BORDER="0"></H1
><MAP
NAME="srchmap"
><AREA
SHAPE="RECT"
COORDS="0,0,466,65"
HREF="index.htm"
ALT="Oracle Web Applications: PL/SQL Developer's Introduction"><AREA
SHAPE="RECT"
COORDS="467,0,514,18"
HREF="jobjects/fsearch.htm"
ALT="Search this book"></MAP
><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch03_02.htm#BOOK-CH-3-SECT-2.2.1"
TITLE="3.2 WebDB Architecture"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 3.2 WebDB Architecture"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><SPAN
CLASS="NAVTITLE"
>Chapter 4</SPAN
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch04_02.htm#BOOK-CH-4-SECT-2.3"
TITLE="4.2 Creating Dynamic Resources"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 4.2 Creating Dynamic Resources"
BORDER="0"></A
></TD
></TR
></TABLE
>&nbsp;<HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"></DIV
><DIV
CLASS="chapter"
><H1
CLASS="chapter"
><A
CLASS="title"
NAME="BOOK-CH-4"
>4. Oracle Application Server (OAS)</A
></H1
><DIV
CLASS="htmltoc"
><P
><B
>Contents:</B
><BR><A
CLASS="sect1"
HREF="#BOOK-CH-4-SECT-1"
TITLE="4.1 How OAS Returns Web Resources"
>How OAS Returns Web Resources</A
><BR><A
CLASS="sect1"
HREF="ch04_02.htm#BOOK-CH-4-SECT-2.3"
TITLE="4.2 Creating Dynamic Resources"
>Creating Dynamic Resources</A
></P
><P
></P
></DIV
><P
CLASS="para"
> <A
CLASS="indexterm"
NAME="ch-04-oas"
></A
> Oracle Application Server (OAS) is Oracle's enterprise web platform. While OAS performs all the functions of a normal web server, its main advantage is its tight integration with a backend Oracle database. After starting life with the name Oracle Webserver at version 1, then becoming Oracle Web Application Server at version 3, the Oracle Application Server, now at version 4, has steadily grown in size and features.</P
><BLOCKQUOTE
CLASS="tip"
><P
CLASS="para"
><STRONG
>TIP:</STRONG
> The resources required to run OAS have increased along with the new features. For example, the memory requirements (on NT, at least) went from 48 MB in version 3 to 128 MB in version 4.</P
></BLOCKQUOTE
><P
CLASS="para"
>In this chapter, we'll look at the architectural components of OAS as they relate to PL/SQL application development. Be sure that you've read <A
CLASS="xref"
HREF="ch02_01.htm"
>Chapter 2, <CITE
CLASS="chapter"
>Foundations</CITE
></A
>, which introduces the basic concepts behind the web infrastructure on which OAS is built. We'll start with a discussion of how OAS returns web resources to a user's browser. Then we'll look at the PL/SQL cartridge, an OAS component we can use to develop PL/SQL applications.</P
><DIV
CLASS="sect1"
><H2
CLASS="sect1"
><A
CLASS="title"
NAME="BOOK-CH-4-SECT-1"
>4.1 How OAS Returns Web Resources</A
></H2
><P
CLASS="para"
> <A
CLASS="indexterm"
NAME="AUTOID-2630"
></A
> <A
CLASS="indexterm"
NAME="ch-04-cgi"
></A
> OAS has three methods to return resources. The first simply uses a directory mapping system to send static files to the client's browser. The next two methods return dynamic resources: one executes resources using the standard CGI interface, and the other, the Web Request Broker (WRB), executes resources using a program called a cartridge.</P
><P
CLASS="para"
>As we saw in the previous chapter, the HTTP listener (renamed the Web listener in OAS) receives incoming requests either as URLs or as <CODE
CLASS="literal"
>action</CODE
> attributes in an HTML form. If the virtual path maps to a CGI directory, the CGI interface is used. If it maps to a cartridge, the WRB method is used. <A
CLASS="xref"
HREF="ch04_01.htm"
>Figure 4.1</A
> shows the relationship between these components.</P
><H4
CLASS="figure"
><A
CLASS="title"
NAME="BOOK-CH-4-FIG-1"
>Figure 4.1: Overview of OAS components</A
></H4
><IMG
CLASS="graphic"
SRC="figs/owa.0401.gif"
ALT="Figure 4.1"><P
CLASS="para"
>In the next three sections, we'll look at how OAS handles requests for static files, CGI dynamic resources, and WRB dynamic resources.</P
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="BOOK-CH-4-SECT-1.1"
>4.1.1 Static Resources Mapped to a Virtual Directory</A
></H3
><P
CLASS="para"
>A static file is the simplest type of resource the OAS can deliver. A static resource is just a file that resides in a directory on the filesystem. To make the files accessible from the Web, OAS maintains a list of mappings between physical directories and symbolic aliases called <EM
CLASS="emphasis"
>virtual directories</EM
>. A URL uses these aliases, along with the resource name, to retrieve the requested file. <A
CLASS="xref"
HREF="ch04_01.htm"
>Figure 4.2</A
> shows the virtual directory mapping screen for the OAS administration system.</P
><H4
CLASS="figure"
><A
CLASS="title"
NAME="BOOK-CH-4-FIG-2"
>Figure 4.2: Virtual directory mappings</A
></H4
><IMG
CLASS="graphic"
SRC="figs/owa.0402.gif"
ALT="Figure 4.2"></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="BOOK-CH-4-SECT-1.2"
>4.1.2 Dynamic Resources Mapped to the CGI Gateway</A
></H3
><P
CLASS="para"
> <A
CLASS="indexterm"
NAME="AUTOID-2652"
></A
>  The <EM
CLASS="emphasis"
>common gateway interface</EM
> (CGI), the earliest web technology for developing dynamic resources, allows you to execute any kind of server-side program, whether it's written in a third-generation language like C, a scripting language like Perl, or a database language like PL/SQL. One of the advantages of CGI is that you can use it to do almost anything: create gateways between the Web and an email system, build a help system based on Unix's manpages, or execute scripting programs to play tic-tac-toe. The execution of a CGI program follows these steps:</P
><OL
CLASS="orderedlist"
><LI
CLASS="listitem"
><P
CLASS="para"
>The web server spawns a new process under a separate user ID.</P
></LI
><LI
CLASS="listitem"
><P
CLASS="para"
>The program is started in the new execution space. </P
></LI
><LI
CLASS="listitem"
><P
CLASS="para"
>The program executes, sending its output to standard output. The listener sends this output back to the user's browser.</P
></LI
><LI
CLASS="listitem"
><P
CLASS="para"
>The program terminates, and the process is destroyed.</P
></LI
></OL
><P
CLASS="para"
>There are a number of uses for even simple CGI programs. Suppose, for example, you have a table that holds user complaints about your systems. Here is a technique that saves you valuable web-surfing time, allowing you to purge old complaints by clicking on a hyperlink. The system requires two parts. The first is a SQL*Plus script called <I
CLASS="filename"
>msg_maint.sql</I
> that clears the table. The length of time new messages are kept is passed as a command-line argument:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>set feedback off;
delete from tbl_user_complaints where
   date_created &lt; (sysdate - &amp;1);
commit;</PRE
></BLOCKQUOTE
><P
CLASS="para"
>The second part is a script named <I
CLASS="filename"
>clear_msg</I
> that executes the SQL*Plus script and returns a status. The operating system script is necessary because you cannot directly execute a SQL script without SQL*Plus:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>#!/bin/ksh
#
# Print mandatory header info
#
print &quot;Content-type: text/html\n\n&quot;
print &quot;&lt;html&gt;&quot;
print &quot;&lt;title&gt;All work and no play...&lt;/title&gt;&quot;
print &quot;&lt;body&gt;&quot;
print &quot;&lt;h1&gt;Evaluating User Complaints&lt;/h1&gt;&lt;p&gt;&quot;
#
# Execute sqlplus script msg_maint.sql
#
sqlplus scott/tiger @msg_maint.sql 2
#
# Print results
#
print &quot;&lt;h2&gt;User Complaints Resolved&lt;/h2&gt;&quot;
print &quot;&lt;/body&gt;&quot;
print &quot;&lt;/html&gt;&quot;</PRE
></BLOCKQUOTE
><P
CLASS="para"
>The script is saved in a directory that is marked as containing CGI scripts and mapped to a virtual directory, typically named <I
CLASS="filename"
>cgi-bin</I
>. Once these steps are completed, the user can execute the script with a URL. For example:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>http://barney/cgi-bin/clear_msg</PRE
></BLOCKQUOTE
><P
CLASS="para"
>This extremely simplified example reveals some important limitations of the CGI interface:</P
><DL
CLASS="variablelist"
><DT
CLASS="term"
>CGI involves significant overhead</DT
><DD
CLASS="listitem"
><P
CLASS="para"
>Before CGI programs can do any real work, the system must create and maintain processes, allocate resources, and perform a host of other housekeeping activities. Even worse, a CGI program must establish a new connection to the database every time it is executed. This severely affects performance, especially when a series of CGIs is linked together to form an entire application.</P
></DD
><DT
CLASS="term"
>CGI programs can be very insecure</DT
><DD
CLASS="listitem"
><P
CLASS="para"
>The previous example, which embeds a username and password directly into the script, is guaranteed to infuriate almost any DBA. Unless you have a set of library routines you can use in every program, securely connecting a program to the correct account is a thorny problem. In addition to username/password problems, many scripting languages have a complex and subtle syntax that makes it far too easy to unwittingly create insecure programs. A single misplaced character in a Perl program, for instance, can potentially compromise the entire system.</P
></DD
><DT
CLASS="term"
>It is hard to process parameters passed to CGI programs</DT
><DD
CLASS="listitem"
><P
CLASS="para"
>As we've seen, parameters are passed to a CGI program using either the query string of a URL or input elements on a form. Additionally, any non-alphanumeric characters (in a query string, at least) must be encoded before they can be safely transmitted across the Web. Once they arrive at their destination, it is up to the CGI program to manually read and decode all of them before they can be used.</P
></DD
></DL
><P
CLASS="para"
>In the next section, we'll look at how OAS's Web Request Broker architecture alleviates the problems of CGI by using cartridges.</P
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="BOOK-CH-4-SECT-1.3"
>4.1.3 Dynamic Resources Mapped to the Web Request Broker</A
></H3
><P
CLASS="para"
> <A
CLASS="indexterm"
NAME="AUTOID-2690"
></A
> The Web Request Broker (WRB) is another way that OAS can return a dynamic resource, and it is a significant advance over CGI. The WRB architecture maintains a pool of processes that are already running and connected to the appropriate database, and WRB is therefore much faster than CGI. When a request to run a particular program comes in, the OAS simply hands it off to one of these processes, which executes it and returns the results.</P
><P
CLASS="para"
>Each process handles a specific type of dynamic resource, whether it's created with Perl, PL/SQL, or Java, or even less traditional languages like VRML. OAS plug-in cartridges allow developers to use these different development languages. The WRB consists of the cartridges themselves, the executable engines that run the cartridges, and the dispatcher that selects a particular cartridge to execute a request.</P
><DIV
CLASS="sect3"
><H4
CLASS="sect3"
><A
CLASS="title"
NAME="BOOK-CH-4-SECT-1.3.1"
>4.1.3.1 Cartridges</A
></H4
><P
CLASS="para"
> <A
CLASS="indexterm"
NAME="AUTOID-2696"
></A
> OAS uses cartridges to execute, or cause to be executed, specific kinds of resources. When OAS receives a request for a resource, it simply passes it to the appropriate cartridge. Several cartridges come with OAS, including the PL/SQL cartridge for executing PL/SQL stored procedures, the Java cartridge for executing server-side Java programs, and the Perl cartridge for executing Perl scripts. However, cartridges are not limited to serving as gateways to development languages. The ODBC cartridge, for example, executes OBDC statements and returns the results directly to a user's browser. </P
><P
CLASS="para"
>Each cartridge is installed on the web server and mapped to a virtual alias. When the web listener receives a URL that includes one of these virtual mappings, it knows that it must use that cartridge to execute the specified resource. As always, the path section of the URL specifies the virtual mapping, and the resource name section specifies the resource the cartridge is to execute. These two sections must be consistent: the PL/SQL cartridge cannot execute a Java program. <A
CLASS="xref"
HREF="ch04_01.htm"
>Figure 4.3</A
> shows how virtual directory names are mapped to the PL/SQL cartridge in the WRB configuration screen.</P
><H4
CLASS="figure"
><A
CLASS="title"
NAME="BOOK-CH-4-FIG-3"
>Figure 4.3: Virtual directory mappings for the PL/SQL cartridge</A
></H4
><IMG
CLASS="graphic"
SRC="figs/owa.0403.gif"
ALT="Figure 4.3"><P
CLASS="para"
>The number of commercially available cartridges is growing every day. Additionally, because cartridges are based on an open interface, you can develop your own custom cartridges if you cannot buy one from a vendor. For example, you could write a cartridge to Web-enable a backend COBOL system.</P
></DIV
><DIV
CLASS="sect3"
><H4
CLASS="sect3"
><A
CLASS="title"
NAME="BOOK-CH-4-SECT-1.3.2"
>4.1.3.2 WRB Executable Engines</A
></H4
><P
CLASS="para"
> <A
CLASS="indexterm"
NAME="AUTOID-2707"
></A
> <A
CLASS="indexterm"
NAME="AUTOID-2709"
></A
> When OAS initializes, it starts a number of WRB Executable Engines (WRBXs), processes that run particular cartridges. OAS starts a relatively large number of each kind of process (which ones depends on a configuration setting) to make sure that individual WRBXs don't become bottlenecks. </P
><P
CLASS="para"
>For example, the pool of WRBX processes might consist of 20 PL/SQL cartridges, 10 Java cartridges, and 5 Perl cartridges. This way, if one cartridge is busy when a request comes in, another WRBX is ready to handle it. This pool of running processes accounts for most of the performance gains of the WRB architecture over CGI. However, a cartridge does not make your dynamic resource itself run any faster. It simply minimizes the time it takes for the resource to begin executing.</P
></DIV
><DIV
CLASS="sect3"
><H4
CLASS="sect3"
><A
CLASS="title"
NAME="BOOK-CH-4-SECT-1.3.3"
>4.1.3.3 WRB dispatcher</A
></H4
><P
CLASS="para"
>The WRB dispatcher is the final element in the WRB architecture. It has two jobs: the first is to receive incoming requests from the web listener and assign them to free processes in the WRBX pool; the second is to manage the WRBX pool. </P
><P
CLASS="para"
>Like a dispatcher at a police station, the WRB dispatcher assigns incoming tasks to specific agents from a pool of available agents. Its main goal is to fill as many of these requests as possible in the shortest amount of time by managing the various WRBX processes. To do this efficiently, the dispatcher must maintain a list of available agents, what they are currently doing, and when they will finish their assigned tasks.</P
><P
CLASS="para"
>Additionally, the dispatcher conserves system resources by maintaining a proper mix among the different processes. For example, the dispatcher can create new processes or destroy existing ones based on the number and types of requests received by the web listener.</P
><P
CLASS="para"
><A
CLASS="xref"
HREF="ch04_01.htm"
>Figure 4.4</A
> shows the relationship between the parts of the WRB architecture. The diagram illustrates how the dispatcher passes a request to just one of the many available WRBX processes.</P
><H4
CLASS="figure"
><A
CLASS="title"
NAME="BOOK-CH-4-FIG-4"
>Figure 4.4: Overview of the WRB architecture</A
></H4
><IMG
CLASS="graphic"
SRC="figs/owa.0404.gif"
ALT="Figure 4.4"><BLOCKQUOTE
CLASS="tip"
><P
CLASS="para"
><STRONG
>TIP:</STRONG
> OAS has a tendency to lose track of some of these cartridges over time, resulting in dead processes. You can work around this problem by periodically stopping and restarting the listener process using a command like <CODE
CLASS="literal"
>at</CODE
> (in NT or Unix) or <CODE
CLASS="literal"
>cron</CODE
> (Unix).</P
></BLOCKQUOTE
></DIV
></DIV
></DIV
></DIV
><DIV
CLASS="htmlnav"
><P
></P
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch03_02.htm#BOOK-CH-3-SECT-2.2.1"
TITLE="3.2 WebDB Architecture"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 3.2 WebDB Architecture"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="book"
HREF="index.htm"
TITLE="Oracle Web Applications: PL/SQL Developer's Introduction"
><IMG
SRC="../gifs/txthome.gif"
ALT="Oracle Web Applications: PL/SQL Developer's Introduction"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch04_02.htm#BOOK-CH-4-SECT-2.3"
TITLE="4.2 Creating Dynamic Resources"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 4.2 Creating Dynamic Resources"
BORDER="0"></A
></TD
></TR
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
>3.2 WebDB Architecture</TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="index"
HREF="index/idx_0.htm"
TITLE="Book Index"
><IMG
SRC="../gifs/index.gif"
ALT="Book Index"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
>4.2 Creating Dynamic Resources</TD
></TR
></TABLE
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"></DIV
><IMG SRC="../gifs/smnavbar.gif"
USEMAP="#map"
BORDER="0"
ALT="The Oracle Library Navigation">

<P><font size="-1">
<a href="../copyrght.htm#copy">Copyright (c) 2000</a> O'Reilly &amp; Associates. All rights reserved.
</font></P>

<MAP NAME="map">

<AREA SHAPE="RECT"
COORDS="0,0,35,30"
HREF="../index.htm"
ALT="Library Home">

<AREA SHAPE="RECT"
COORDS="40,0,95,30"
HREF="../prog2/index.htm"
ALT="Oracle PL/SQL Programming, 2nd. Ed.">

<AREA SHAPE="RECT"
COORDS="100,0,200,30"
HREF="../guide8i/index.htm"
ALT="Guide to Oracle 8i Features">

<AREA SHAPE="RECT"
COORDS="205,0,245,30"
HREF="../bipack/index.htm"
ALT="Oracle Built-in Packages">

<AREA SHAPE="RECT"
COORDS="250,0,320,30"
HREF="../advprog/index.htm"
ALT="Advanced PL/SQL Programming with Packages">

<AREA SHAPE="RECT"
COORDS="325,0,420,30"
HREF="index.htm"
ALT="Oracle Web Applications">

<AREA SHAPE="RECT"
COORDS="425,0,490,30"
HREF="../langpkt/index.htm"
ALT="Oracle PL/SQL Language Pocket Reference">

<AREA SHAPE="RECT"
COORDS="495,0,570,30"
HREF="../bipkt/index.htm"
ALT="Oracle PL/SQL Built-ins Pocket Reference">
</MAP>

</BODY
>
<!-- Mirrored from liso.cs.pusan.ac.kr by HTTrack Website Copier/3.x [XR&CO'2001] -->
</HTML
>
