<HTML
><HEAD
><TITLE
>[Chapter 7] The PL/SQL Toolkit</TITLE
><META
NAME="DC.Creator"
CONTENT="Andrew Odewahn"><META
NAME="DC.Date"
CONTENT="2000-04-29T18:36:31Z"><META
NAME="DC.Format"
CONTENT="text/html"
SCHEME="MIME"><META
NAME="DC.Identifier"
CONTENT="O'Reilly and Associates CDROM-1-56592-687-0E"><META
NAME="DC.Language"
CONTENT="en-US"><META
NAME="DC.Publisher"
CONTENT="O'Reilly &amp; Associates, Inc."><META
NAME="DC.Source"
CONTENT="1-56592-687-0E"
SCHEME="ISBN"><META
NAME="DC.Subject.Keyword"
CONTENT="Oracle Web 8i"><META
NAME="DC.Title"
CONTENT="Oracle Web Applications: PL/SQL Developer's Introduction"><META
NAME="DC.Type"
CONTENT="Text.Monograph"><META
NAME="generator"
CONTENT="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><LINK
REL="stylesheet"
TYPE="text/css"
HREF="../style/style1.css"><LINK
REV="made"
HREF="mailto:online-books@oreilly.com"
TITLE="Online Books Comments"><LINK
REL="up"
HREF="index.htm"
TITLE="Oracle Web Applications: PL/SQL Developer's Introduction"><LINK
REL="prev"
HREF="ch06_04.htm"
TITLE="6.4 PL/SQL Tools"><LINK
REL="next"
HREF="ch07_02.htm#BOOK-CH-7-SECT-2.2.1"
TITLE="7.2 Text Processing"></HEAD
><BODY
><DIV
CLASS="htmlnav"
><H1
><IMG
SRC="gifs/smbanner.gif"
ALT="Oracle Web Applications: PL/SQL Developer's Introduction"
USEMAP="#srchmap"
BORDER="0"></H1
><MAP
NAME="srchmap"
><AREA
SHAPE="RECT"
COORDS="0,0,466,65"
HREF="index.htm"
ALT="Oracle Web Applications: PL/SQL Developer's Introduction"><AREA
SHAPE="RECT"
COORDS="467,0,514,18"
HREF="jobjects/fsearch.htm"
ALT="Search this book"></MAP
><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch06_04.htm"
TITLE="6.4 PL/SQL Tools"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 6.4 PL/SQL Tools"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><SPAN
CLASS="NAVTITLE"
>Chapter 7</SPAN
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch07_02.htm#BOOK-CH-7-SECT-2.2.1"
TITLE="7.2 Text Processing"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 7.2 Text Processing"
BORDER="0"></A
></TD
></TR
></TABLE
>&nbsp;<HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"></DIV
><DIV
CLASS="chapter"
><H1
CLASS="chapter"
><A
CLASS="title"
NAME="BOOK-CH-7"
>7. The PL/SQL Toolkit</A
></H1
><DIV
CLASS="htmltoc"
><P
><B
>Contents:</B
><BR><A
CLASS="sect1"
HREF="#BOOK-CH-7-SECT-1"
TITLE="7.1 Communicating with the Outside World"
>Communicating with the Outside World</A
><BR><A
CLASS="sect1"
HREF="ch07_02.htm#BOOK-CH-7-SECT-2.2.1"
TITLE="7.2 Text Processing"
>Text Processing</A
><BR><A
CLASS="sect1"
HREF="ch07_03.htm#BOOK-CH-7-SECT-3.2.2"
TITLE="7.3 Maintaining State"
>Maintaining State</A
><BR><A
CLASS="sect1"
HREF="ch07_04.htm#BOOK-CH-7-SECT-4.1.5"
TITLE="7.4 Improving Productivity"
>Improving Productivity</A
></P
><P
></P
></DIV
><P
CLASS="para"
> <A
CLASS="indexterm"
NAME="ch-07-pl_tool"
></A
> <A
CLASS="indexterm"
NAME="ch-07-pl_tool2"
></A
> The PL/SQL toolkit is a set of PL/SQL packages supplied by Oracle for use in developing web applications. These packages are used to generate HTML dynamically, perform text operations, and improve developer productivity. <A
CLASS="xref"
HREF="ch07_01.htm"
>Table 7.1</A
> shows an alphabetical listing of the packages included in the PL/SQL toolkit, along with an explanation of their uses. </P
><BR><TABLE
CLASS="table"
BORDER="1"
CELLPADDING="3"
><CAPTION
CLASS="table"
><A
CLASS="title"
NAME="BOOK-CH-7-TABLE-2"
>Table 7.1: PL/SQL Toolkit Packages </A
></CAPTION
><THEAD
CLASS="thead"
><TR
CLASS="row"
VALIGN="TOP"
><TH
CLASS="entry"
ALIGN="LEFT"
ROWSPAN="1"
COLSPAN="1"
> <P
CLASS="para"
>Package Name</P
> </TH
><TH
CLASS="entry"
ALIGN="LEFT"
ROWSPAN="1"
COLSPAN="1"
> <P
CLASS="para"
>Use</P
> </TH
></TR
></THEAD
><TBODY
CLASS="tbody"
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
> <P
CLASS="para"
>HTF</P
> </TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
> <P
CLASS="para"
>Parses HTML</P
> </TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
> <P
CLASS="para"
>HTP</P
> </TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
> <P
CLASS="para"
>Generates HTML</P
> </TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
> <P
CLASS="para"
>OWA_COOKIE</P
> </TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
> <P
CLASS="para"
>Stores cookies</P
> </TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
> <P
CLASS="para"
>OWA_OPT_LOCK</P
> </TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
> <P
CLASS="para"
>Performs record locking</P
> </TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
> <P
CLASS="para"
>OWA_PATTERN</P
> </TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
> <P
CLASS="para"
>Searches and replaces text</P
> </TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
> <P
CLASS="para"
>OWA_SEC</P
> </TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
> <P
CLASS="para"
>Manages security</P
> </TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
> <P
CLASS="para"
>OWA_TEXT</P
> </TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
> <P
CLASS="para"
>Represents text</P
> </TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
> <P
CLASS="para"
>OWA_UTIL</P
> </TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
> <P
CLASS="para"
>Improves productivity</P
> </TD
></TR
></TBODY
></TABLE
><P
CLASS="para"
>The sections that follow group these packages in categories according to their functionality. HTF and HTP are used for communicating with the outside world; OWA_TEXT and OWA_PATTERN are used for text processing; OWA_COOKIE and OWA_OPT_LOCK are used for maintaining state. The last two packages, OWA_UTIL and OWA_SEC, are used for maintaining productivity and security. </P
><P
CLASS="para"
>In addition to learning how to use dozens of procedures, we'll keep an eye on what these packages can teach us about good design. After all, the developers who created these packages are some of the most talented PL/SQL programmers in the world. We would be wise to learn from their examples. </P
><DIV
CLASS="sect1"
><H2
CLASS="sect1"
><A
CLASS="title"
NAME="BOOK-CH-7-SECT-1"
>7.1 Communicating with the Outside World</A
></H2
><P
CLASS="para"
>When scripting languages like Perl are used to develop dynamic resources, their output is sent to the standard output (<EM
CLASS="emphasis"
>stdout</EM
>) device, then funneled back to the browser. Because PL/SQL cannot communicate directly with <EM
CLASS="emphasis"
>stdout</EM
>, the toolkit includes a package, called HTP, that mimics this behavior. </P
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="BOOK-CH-7-SECT-1.1"
>7.1.1 HTP: Generating HTML</A
></H3
><P
CLASS="para"
> <A
CLASS="indexterm"
NAME="AUTOID-4514"
></A
> The HTP package is a sort of web-enabled version of DBMS_OUTPUT, a built-in package that provides basic output capabilities such as printing text. Like DBMS_OUTPUT, HTP contains commands that store text in a buffer. When a procedure using the package terminates, the contents of the output buffer are "printed" and returned to the user. This buffering is one difference between PL/SQL toolkit programs and standard CGI programs, which immediately return output to the user. As such, the size of the buffer limits the size of a page. In most cases, this is not a problem; however, you should be aware that if you choose to dump a million-row table onto a single page, you will quickly encounter this limit. <A
CLASS="xref"
HREF="ch07_01.htm"
>Table 7.2</A
> shows the procedures included in the HTP package; HTP also includes a large number of wrapper procedures that correspond to various HTML tags. </P
><BR><TABLE
CLASS="table"
BORDER="1"
CELLPADDING="3"
><CAPTION
CLASS="table"
><A
CLASS="title"
NAME="BOOK-CH-7-TABLE-4"
>Table 7.2: Various HTP Procedures </A
></CAPTION
><THEAD
CLASS="thead"
><TR
CLASS="row"
VALIGN="TOP"
><TH
CLASS="entry"
ALIGN="LEFT"
ROWSPAN="1"
COLSPAN="1"
> <P
CLASS="para"
>Procedure</P
> </TH
><TH
CLASS="entry"
ALIGN="LEFT"
ROWSPAN="1"
COLSPAN="1"
> <P
CLASS="para"
>Parameters</P
> </TH
><TH
CLASS="entry"
ALIGN="LEFT"
ROWSPAN="1"
COLSPAN="1"
> <P
CLASS="para"
>Description</P
> </TH
></TR
></THEAD
><TBODY
CLASS="tbody"
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
> <P
CLASS="para"
><A
CLASS="indexterm"
NAME="AUTOID-4535"
></A
>ANCHOR</P
> </TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
> <P
CLASS="para"
>Depend on tag</P
> </TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
> <P
CLASS="para"
>Generates an anchor tag</P
> </TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
> <P
CLASS="para"
>PRINT</P
> <A
CLASS="indexterm"
NAME="AUTOID-4544"
></A
> </TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
> <P
CLASS="para"
>Any value</P
> </TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
> <P
CLASS="para"
>Outputs any value passed as a parameter </P
> </TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
> <P
CLASS="para"
>Various wrapper procedures (e.g., HTMLOPEN)</P
> </TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
> <P
CLASS="para"
>Depend on tag</P
> </TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
> <P
CLASS="para"
>Simplifies coding of an HTML tag</P
> </TD
></TR
></TBODY
></TABLE
><P
CLASS="para"
>The HTP procedure PRINT, which is analogous to DBMS_OUTPUT.PUT_LINE, simply outputs the value that is passed as a parameter. Here, for example, is a procedure that generates a page that prints "Hello, World!": </P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>CREATE OR REPLACE PROCEDURE hello_world
IS
BEGIN
   HTP.print ('&lt;html&gt;');
   HTP.print ('&lt;head&gt;');
   HTP.print ('&lt;title&gt;You knew it was coming...&lt;/title&gt;');
   HTP.print ('&lt;/head&gt;');
   HTP.print ('&lt;!-- ');
   HTP.print ('This phrase is in every computer book.');
   HTP.print ('--!&gt;');
   HTP.print ('&lt;body bgcolor=blue&gt;');
   HTP.print ('And here it is .... Hello, World!');
   HTP.print ('&lt;/body&gt;');
   HTP.print ('&lt;/html&gt;');
END;</PRE
></BLOCKQUOTE
><P
CLASS="para"
>More sophisticated tags require parameters to be included in the wrapper procedure. Each parameter corresponds to a particular tag attribute. As a general rule, a parameter is named after the HTML attribute it represents and is used to complete a template based on the tag's syntax. This parameter can take any valid PL/SQL value, including a literal, variable, concatenation, or function. Optional attributes are declared as DEFAULT NULL. </P
><P
CLASS="para"
> <A
CLASS="indexterm"
NAME="AUTOID-4561"
></A
> <A
CLASS="indexterm"
NAME="AUTOID-4563"
></A
> <A
CLASS="indexterm"
NAME="AUTOID-4565"
></A
> <A
CLASS="indexterm"
NAME="AUTOID-4567"
></A
> To make the HTML syntax more palatable to Oracle developers, HTP has a number of specialized wrapper procedures that correspond to individual tags. These procedures hide HTML's ugly syntax from developers, who are more familiar with PL/SQL and other 3GLs. For example, rather than embedding <CODE
CLASS="literal"
>&lt;html&gt;</CODE
> directly into a program, as we've done in the previous example, the HTP package provides a more aesthetically pleasing procedure called HTMLOPEN to perform the same function. Other HTP wrapper procedures include HTP.HTMLCLOSE for <CODE
CLASS="literal"
>&lt;/html&gt;</CODE
>, and HTP.HEADOPEN and HTP.HEADCLOSE for <CODE
CLASS="literal"
>&lt;head&gt;</CODE
> and <CODE
CLASS="literal"
>&lt;/head&gt;</CODE
>, respectively. </P
><P
CLASS="para"
> <A
CLASS="indexterm"
NAME="AUTOID-4574"
></A
> Although there are many benefits in using an API to isolate programs against underlying changes, the wrapper procedures often cause more problems than they prevent. During development, you may find yourself flipping through manuals to figure out the order of a particular procedure's parameters or trying to match some obscure tag to its toolkit equivalent. Once you locate the procedure, you often find that there is no clear way to create the complex nesting required by many of the most useful tags, such as those for forms or tables. In general, code is simply much more readable if you can see the actual HTML, rather than hiding it away behind a complex API. </P
><P
CLASS="para"
>By convention, the parameters for these attributes are preceded by a single character indicating the parameter's datatype. VARCHAR2 parameters, denoted by a "c," are by far the most common. "N" and "d" denote, respectively, the integer and date datatypes, and appear mainly in overloaded or specialized procedures. </P
><P
CLASS="para"
>Here, for example, is the declaration&nbsp;-- as it appears in the HTP specification&nbsp;-- for a wrapper procedure that generates an anchor (<CODE
CLASS="literal"
>&lt;a&gt;</CODE
>) tag: </P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>PROCEDURE anchor (
   curl IN VARCHAR2,
   ctext IN VARCHAR2,
   cname IN VARCHAR2 DEFAULT NULL,
   cattributes IN VARCHAR2 DEFAULT NULL
   )</PRE
></BLOCKQUOTE
><P
CLASS="para"
>The parameter values are used to complete a template based on the tag the procedure represents. The ANCHOR procedure has the following template: </P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>&lt;a href=&quot;curl&quot; name=&quot;cname&quot; cattributes&gt;ctext&lt;/a&gt;</PRE
></BLOCKQUOTE
><P
CLASS="para"
>Calling the ANCHOR procedure with the following values returns a link to the O'Reilly home page on the Web: </P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>HTP.anchor (
   'www.oreilly.com',
   'O' || CHR (39) || 'Reilly Homepage',
   'oreilly_link',
   'target=_blank'
);</PRE
></BLOCKQUOTE
><P
CLASS="para"
>The URL for the link is <A
CLASS="systemitem.url"
HREF="../../../../../../../www.oreilly.com/"
>http://www.oreilly.com</A
>, its name is 
<code class="literal">oreilly_link</code>, and its text (the part that shows up on the user's screen) is "O'Reilly Homepage." The call uses the cattributes parameter to cause the page to open in a new window. Since HTML has such a flexible syntax that a tag may have dozens of optional attributes, most of the procedures in the HTP package include the cattributes parameter as a sort of catch-all within the tag. Here is the URL returned by the call: </P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>&lt;A HREF='www.oreilly.com' NAME='oreilly_link' target=blank&gt;O'Reilly Homepage&lt;/A&gt;</PRE
></BLOCKQUOTE
><P
CLASS="para"
>Individually, these commands are of limited use. You can combine the various procedures, however, to create a complete page. Here is the "Hello, World" program written using the procedures from HTP: </P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>CREATE OR REPLACE PROCEDURE hello_world2
IS
BEGIN
   HTP.htmlopen;
   HTP.headopen;
   HTP.title ('You knew it was coming...');
   HTP.headclose;
   HTP.comment ('This phrase is in every computer book.');
   HTP.bodyopen (cattributes =&gt; 'body bgcolor=blue');
   HTP.print ('And here it is .... Hello, World!');
   HTP.bodyclose;
   HTP.htmlclose;
END;</PRE
></BLOCKQUOTE
><P
CLASS="para"
>The other wrapper procedures in the package work in exactly the same way as the ANCHOR procedure. In the next section, we'll concentrate on how to make the best use of the wrapper procedures, rather than focus on the gritty details of their API. </P
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="BOOK-CH-7-SECT-1.2"
>7.1.2 WebAlchemy</A
></H3
><P
CLASS="para"
> <A
CLASS="indexterm"
NAME="AUTOID-4594"
></A
> As you can imagine, developing sophisticated interfaces by translating raw HTML into its PL/SQL equivalent is enormously tedious. Fortunately, there is a free tool that does much of this work: WebAlchemy, written by Alan Hobbs of Oracle Consulting, Australia, translates a static HTML file into a corresponding PL/SQL procedure. By combining WebAlchemy with any of the dozens of GUI-based HTML editors, you can create complex screens in PL/SQL quickly and easily. </P
><P
CLASS="para"
>WebAlchemy is simple enough to use that you probably won't even need any documentation. <A
CLASS="xref"
HREF="ch07_01.htm"
>Figure 7.1</A
> shows the main screen, whose menu options should be familiar to any user of PC software. Using the program is simply a matter of opening an HTML file and using the "Generate PL/SQL" option to generate a corresponding procedure. <A
CLASS="xref"
HREF="ch07_01.htm"
>Figure 7.1</A
> illustrates this procedure. The raw HTML file, <I
CLASS="filename"
>hello_world.html</I
>, appears on the left panel; the right panel shows the PL/SQL procedure created by the "Generate PL/SQL" option. </P
><H4
CLASS="figure"
><A
CLASS="title"
NAME="BOOK-CH-7-FIG-1"
>Figure 7.1: WebAlchemy main screen</A
></H4
><IMG
CLASS="graphic"
SRC="figs/owa.0701.gif"
ALT="Figure 7.1"><P
CLASS="para"
>You can download WebAlchemy from:</P
><TABLE
CLASS="simplelist"
BORDER="0"
><TR
><TD
CLASS="member"
><A
CLASS="systemitem.url"
HREF="../../../../../../../www.users.bigpond.com/ahobbs/"
>http://www.users.bigpond.com/ahobbs/</A
></TD
></TR
></TABLE
><P
CLASS="para"
>At first blush, WebAlchemy inspires a sense of euphoria, because it promises to eliminate the need to know both HTML and the PL/SQL toolkit. However, although WebAlchemy is useful for creating static pages whose layout is known ahead of time, most programs generate documents dynamically from information stored in a table. There is simply no getting around the fact that you must understand how to manually construct an HTML document. Fortunately, this is not particularly difficult. </P
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="BOOK-CH-7-SECT-1.3"
>7.1.3 HTF: Parsing HTML</A
></H3
><P
CLASS="para"
> <A
CLASS="indexterm"
NAME="AUTOID-4611"
></A
> <A
CLASS="indexterm"
NAME="AUTOID-4614"
></A
> <A
CLASS="indexterm"
NAME="AUTOID-4617"
></A
> The HTF package turns HTP procedures into functions that return the HTML output as a formatted string. <A
CLASS="xref"
HREF="ch07_01.htm"
>Table 7.3</A
> summarizes the functions available in the HTF package. </P
><BR><TABLE
CLASS="table"
BORDER="1"
CELLPADDING="3"
><CAPTION
CLASS="table"
><A
CLASS="title"
NAME="BOOK-CH-7-TABLE-6"
>Table 7.3: Various HTF Functions </A
></CAPTION
><THEAD
CLASS="thead"
><TR
CLASS="row"
VALIGN="TOP"
><TH
CLASS="entry"
ALIGN="LEFT"
ROWSPAN="1"
COLSPAN="1"
> <P
CLASS="para"
>Function</P
> </TH
><TH
CLASS="entry"
ALIGN="LEFT"
ROWSPAN="1"
COLSPAN="1"
> <P
CLASS="para"
> Parameters</P
> </TH
><TH
CLASS="entry"
ALIGN="LEFT"
ROWSPAN="1"
COLSPAN="1"
> <P
CLASS="para"
>Description</P
> </TH
></TR
></THEAD
><TBODY
CLASS="tbody"
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
> <P
CLASS="para"
>ANCHOR <A
CLASS="indexterm"
NAME="AUTOID-4639"
></A
> </P
> </TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
> <P
CLASS="para"
>Depend on tag</P
> </TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
> <P
CLASS="para"
>Stores anchor tag as a string</P
> </TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
> <P
CLASS="para"
>PRINT <A
CLASS="indexterm"
NAME="AUTOID-4648"
></A
> </P
> </TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
> <P
CLASS="para"
>Any value</P
> </TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
> <P
CLASS="para"
>Stores any value in a string</P
> </TD
></TR
></TBODY
></TABLE
><P
CLASS="para"
>For example, the following procedure stores the results of the HTF.ANCHOR function in a string, and then uses the PL/SQL built-in SUBSTR function to print the result on two lines, using the DBMS_OUTPUT package: </P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>CREATE OR REPLACE PROCEDURE htf_test
IS
   anchor_string VARCHAR2(500);
BEGIN
   anchor_string :=
      HTF.anchor (
         'http://www.ora.com',
         'O' || CHR (39) || 'Reilly',
         'ora_link',
         'target=_blank'
      );
   DBMS_OUTPUT.put_line (SUBSTR (anchor_string, 1, 29));
   DBMS_OUTPUT.put_line (SUBSTR (anchor_string, 30, 50));
END;</PRE
></BLOCKQUOTE
></DIV
></DIV
></DIV
><DIV
CLASS="htmlnav"
><P
></P
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch06_04.htm"
TITLE="6.4 PL/SQL Tools"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 6.4 PL/SQL Tools"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="book"
HREF="index.htm"
TITLE="Oracle Web Applications: PL/SQL Developer's Introduction"
><IMG
SRC="../gifs/txthome.gif"
ALT="Oracle Web Applications: PL/SQL Developer's Introduction"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch07_02.htm#BOOK-CH-7-SECT-2.2.1"
TITLE="7.2 Text Processing"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 7.2 Text Processing"
BORDER="0"></A
></TD
></TR
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
>6.4 PL/SQL Tools</TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="index"
HREF="index/idx_0.htm"
TITLE="Book Index"
><IMG
SRC="../gifs/index.gif"
ALT="Book Index"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
>7.2 Text Processing</TD
></TR
></TABLE
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"></DIV
><IMG SRC="../gifs/smnavbar.gif"
USEMAP="#map"
BORDER="0"
ALT="The Oracle Library Navigation">

<P><font size="-1">
<a href="../copyrght.htm#copy">Copyright (c) 2000</a> O'Reilly &amp; Associates. All rights reserved.
</font></P>

<MAP NAME="map">

<AREA SHAPE="RECT"
COORDS="0,0,35,30"
HREF="../index.htm"
ALT="Library Home">

<AREA SHAPE="RECT"
COORDS="40,0,95,30"
HREF="../prog2/index.htm"
ALT="Oracle PL/SQL Programming, 2nd. Ed.">

<AREA SHAPE="RECT"
COORDS="100,0,200,30"
HREF="../guide8i/index.htm"
ALT="Guide to Oracle 8i Features">

<AREA SHAPE="RECT"
COORDS="205,0,245,30"
HREF="../bipack/index.htm"
ALT="Oracle Built-in Packages">

<AREA SHAPE="RECT"
COORDS="250,0,320,30"
HREF="../advprog/index.htm"
ALT="Advanced PL/SQL Programming with Packages">

<AREA SHAPE="RECT"
COORDS="325,0,420,30"
HREF="index.htm"
ALT="Oracle Web Applications">

<AREA SHAPE="RECT"
COORDS="425,0,490,30"
HREF="../langpkt/index.htm"
ALT="Oracle PL/SQL Language Pocket Reference">

<AREA SHAPE="RECT"
COORDS="495,0,570,30"
HREF="../bipkt/index.htm"
ALT="Oracle PL/SQL Built-ins Pocket Reference">
</MAP>

</BODY
>
<!-- Mirrored from liso.cs.pusan.ac.kr by HTTrack Website Copier/3.x [XR&CO'2001] -->
</HTML
>
