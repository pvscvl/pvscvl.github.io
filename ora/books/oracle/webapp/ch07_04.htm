<HTML
><HEAD
><TITLE
>[Chapter 7] 7.4 Improving Productivity</TITLE
><META
NAME="DC.Creator"
CONTENT="Andrew Odewahn"><META
NAME="DC.Date"
CONTENT="2000-04-29T18:37:04Z"><META
NAME="DC.Format"
CONTENT="text/html"
SCHEME="MIME"><META
NAME="DC.Identifier"
CONTENT="O'Reilly and Associates CDROM-1-56592-687-0E"><META
NAME="DC.Language"
CONTENT="en-US"><META
NAME="DC.Publisher"
CONTENT="O'Reilly &amp; Associates, Inc."><META
NAME="DC.Source"
CONTENT="1-56592-687-0E"
SCHEME="ISBN"><META
NAME="DC.Subject.Keyword"
CONTENT="Oracle Web 8i"><META
NAME="DC.Title"
CONTENT="Oracle Web Applications: PL/SQL Developer's Introduction"><META
NAME="DC.Type"
CONTENT="Text.Monograph"><META
NAME="generator"
CONTENT="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><LINK
REL="stylesheet"
TYPE="text/css"
HREF="../style/style1.css"><LINK
REV="made"
HREF="mailto:online-books@oreilly.com"
TITLE="Online Books Comments"><LINK
REL="up"
HREF="ch07_01.htm"
TITLE="7. The PL/SQL Toolkit"><LINK
REL="prev"
HREF="ch07_03.htm#BOOK-CH-7-SECT-3.2.2"
TITLE="7.3 Maintaining State"><LINK
REL="next"
HREF="ch08_01.htm"
TITLE="8. Developing Applications"></HEAD
><BODY
><DIV
CLASS="htmlnav"
><H1
><IMG
SRC="gifs/smbanner.gif"
ALT="Oracle Web Applications: PL/SQL Developer's Introduction"
USEMAP="#srchmap"
BORDER="0"></H1
><MAP
NAME="srchmap"
><AREA
SHAPE="RECT"
COORDS="0,0,466,65"
HREF="index.htm"
ALT="Oracle Web Applications: PL/SQL Developer's Introduction"><AREA
SHAPE="RECT"
COORDS="467,0,514,18"
HREF="jobjects/fsearch.htm"
ALT="Search this book"></MAP
><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch07_03.htm#BOOK-CH-7-SECT-3.2.2"
TITLE="7.3 Maintaining State"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 7.3 Maintaining State"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><SPAN
CLASS="NAVTITLE"
><A
CLASS="chapter"
REL="up"
HREF="ch07_01.htm"
TITLE="7. The PL/SQL Toolkit"
>Chapter 7<BR>The PL/SQL Toolkit</A
></SPAN
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="chapter"
HREF="ch08_01.htm"
TITLE="8. Developing Applications"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 8. Developing Applications"
BORDER="0"></A
></TD
></TR
></TABLE
>&nbsp;<HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"></DIV
><DIV
CLASS="sect1"
><H2
CLASS="sect1"
><A
CLASS="title"
NAME="BOOK-CH-7-SECT-4"
>7.4 Improving Productivity</A
></H2
><P
CLASS="para"
>The final two packages, OWA_UTIL and OWA_SEC, let you perform a variety of administrative and security-related tasks that help improve overall productivity. </P
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="BOOK-CH-7-SECT-4.1"
>7.4.1 OWA_UTIL: Creating Complex HTML Structures</A
></H3
><P
CLASS="para"
> <A
CLASS="indexterm"
NAME="ch-07-owa-util"
></A
>  The OWA_UTIL package is a grab-bag of useful procedures and functions that simplify many complex tasks. It contains procedures to query the web server environment, simplify debugging, change the default HTTP header, and simplify HTML development. </P
><P
CLASS="para"
><A
CLASS="xref"
HREF="ch07_04.htm#BOOK-CH-7-SECT-4.1.5"
>Table 7.15</A
> shows the various functions and procedures contained in the OWA_UTIL package, which are grouped in categories in the following sections according to their uses. </P
><BLOCKQUOTE
CLASS="note"
><P
CLASS="para"
><STRONG
>NOTE:</STRONG
> I've attempted to classify the OWA_UTIL procedures into broad, general categories (debugging, querying the environment, representing dates, etc.). These classifications reflect my own experience and are not intended to limit other possible uses. </P
></BLOCKQUOTE
><BR><TABLE
CLASS="table"
BORDER="1"
CELLPADDING="3"
><CAPTION
CLASS="table"
><A
CLASS="title"
NAME="BOOK-CH-7-TABLE-30"
>Table 7.15: Various OWA_UTIL Procedures and Functions </A
></CAPTION
><THEAD
CLASS="thead"
><TR
CLASS="row"
VALIGN="TOP"
><TH
CLASS="entry"
ALIGN="LEFT"
ROWSPAN="1"
COLSPAN="1"
> <P
CLASS="para"
>Procedure/Function</P
> </TH
><TH
CLASS="entry"
ALIGN="LEFT"
ROWSPAN="1"
COLSPAN="1"
> <P
CLASS="para"
>Description</P
> </TH
></TR
></THEAD
><TBODY
CLASS="tbody"
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
> <P
CLASS="para"
>BIND_VARIABLES</P
> </TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
> <P
CLASS="para"
>Creates complex HTML structures</P
> </TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
> <P
CLASS="para"
>CALENDARPRINT</P
> </TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
> <P
CLASS="para"
>Creates complex HTML structures</P
> </TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
> <P
CLASS="para"
>CELLSPRINT</P
> </TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
> <P
CLASS="para"
>Creates complex HTML structures</P
> </TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
> <P
CLASS="para"
>CHOOSE_DATE</P
> </TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
> <P
CLASS="para"
>Represents dates</P
> </TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
> <P
CLASS="para"
>DATETYPE</P
> </TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
> <P
CLASS="para"
>Represents dates</P
> </TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
> <P
CLASS="para"
>GET_CGI_ENV</P
> </TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
> <P
CLASS="para"
>Queries the environment</P
> </TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
> <P
CLASS="para"
>GET_OWA_SERVICE_PATH</P
> </TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
> <P
CLASS="para"
>Queries the environment</P
> </TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
> <P
CLASS="para"
>GET_PROCEDURE</P
> </TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
> <P
CLASS="para"
>Performs debugging</P
> </TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
> <P
CLASS="para"
>HTTP_HEADER_CLOSE</P
> </TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
> <P
CLASS="para"
>HTML and HTTP utilities</P
> </TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
> <P
CLASS="para"
>IP_ADDRESS</P
> </TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
> <P
CLASS="para"
>Queries the environment</P
> </TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
> <P
CLASS="para"
>LISTPRINT</P
> </TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
> <P
CLASS="para"
>Creates complex HTML structures</P
> </TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
> <P
CLASS="para"
>MIME_HEADER</P
> </TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
> <P
CLASS="para"
>HTML and HTTP utilities</P
> </TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
> <P
CLASS="para"
>PRINT_CGI_ENV</P
> </TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
> <P
CLASS="para"
>Queries the environment</P
> </TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
> <P
CLASS="para"
>REDIRECT_URL</P
> </TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
> <P
CLASS="para"
>HTML and HTTP utilities</P
> </TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
> <P
CLASS="para"
>SHOWPAGE</P
> </TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
> <P
CLASS="para"
>Performs debugging</P
> </TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
> <P
CLASS="para"
>SHOWSOURCE</P
> </TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
> <P
CLASS="para"
>Performs debugging</P
> </TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
> <P
CLASS="para"
>SIGNATURE</P
> </TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
> <P
CLASS="para"
>HTML and HTTP utilities</P
> </TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
> <P
CLASS="para"
>STATUS_LINE</P
> </TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
> <P
CLASS="para"
>HTML and HTTP utilities</P
> </TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
> <P
CLASS="para"
>TABLEPRINT</P
> </TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
> <P
CLASS="para"
>Creates complex HTML structures</P
> </TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
> <P
CLASS="para"
>TODATE</P
> </TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
> <P
CLASS="para"
>Represents dates</P
> </TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
> <P
CLASS="para"
>WHO_CALLED_ME</P
> </TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
> <P
CLASS="para"
>Performs debugging</P
> </TD
></TR
></TBODY
></TABLE
><DIV
CLASS="sect3"
><H4
CLASS="sect3"
><A
CLASS="title"
NAME="BOOK-CH-7-SECT-4.1.1"
>7.4.1.1 Debugging</A
></H4
><P
CLASS="para"
> <A
CLASS="indexterm"
NAME="AUTOID-5943"
></A
> OWA_UTIL has a number of procedures useful for debugging, many of which are built on top of the DBMS_UTILITY built-in package. These debugging procedures are listed in <A
CLASS="xref"
HREF="ch07_04.htm#BOOK-CH-7-SECT-4.1.5"
>Table 7.16</A
>. </P
><BR><TABLE
CLASS="table"
BORDER="1"
CELLPADDING="3"
><CAPTION
CLASS="table"
><A
CLASS="title"
NAME="BOOK-CH-7-TABLE-32"
>Table 7.16: OWA_UTIL Procedures and Functions Used for Debugging </A
></CAPTION
><THEAD
CLASS="thead"
><TR
CLASS="row"
VALIGN="TOP"
><TH
CLASS="entry"
ALIGN="LEFT"
ROWSPAN="1"
COLSPAN="1"
> <P
CLASS="para"
>Procedure/</P
>  <P
CLASS="para"
>Function</P
> </TH
><TH
CLASS="entry"
ALIGN="LEFT"
ROWSPAN="1"
COLSPAN="1"
> <P
CLASS="para"
>Parameters</P
> </TH
><TH
CLASS="entry"
ALIGN="LEFT"
ROWSPAN="1"
COLSPAN="1"
> <P
CLASS="para"
>Description</P
> </TH
></TR
></THEAD
><TBODY
CLASS="tbody"
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
> <P
CLASS="para"
>GET_PROCEDURE</P
> </TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
> <P
CLASS="para"
>None</P
> </TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
> <P
CLASS="para"
>Returns the name of the procedure being executed by the PL/SQL agent</P
> </TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
> <P
CLASS="para"
>SHOWPAGE</P
> </TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
> <P
CLASS="para"
>None</P
> </TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
> <P
CLASS="para"
>Prints the HTML generated by the HTP package</P
> </TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
> <P
CLASS="para"
>SHOWSOURCE</P
> </TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
> <P
CLASS="para"
>None</P
> </TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
> <P
CLASS="para"
>Prints the PL/SQL source code for a particular procedure, function, or package </P
> </TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
> <P
CLASS="para"
>WHO_CALLED_ME</P
> </TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
> <P
CLASS="para"
>owner IN VARCHAR2</P
>  <P
CLASS="para"
>name IN VARCHAR2</P
>  <P
CLASS="para"
>lineno IN NUMBER</P
>  <P
CLASS="para"
>caller_t IN VARCHAR2</P
> </TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
> <P
CLASS="para"
>Returns information about the procedure that called the currently executing procedure </P
> </TD
></TR
></TBODY
></TABLE
><DIV
CLASS="sect4"
><H4
CLASS="sect4"
><A
CLASS="title"
NAME="BOOK-CH-7-SECT-4.1.1.1"
>7.4.1.1.1 The SHOWPAGE procedure.</A
></H4
><P
CLASS="para"
> <A
CLASS="indexterm"
NAME="AUTOID-5996"
></A
> <A
CLASS="indexterm"
NAME="AUTOID-5999"
></A
> This procedure allows you to print the HTML generated by the HTP package. As mentioned earlier, output from this package is stored in a buffer. The SHOWPAGE procedure lets you view the contents of this buffer in SQL*Plus. To use SHOWPAGE: </P
><OL
CLASS="orderedlist"
><LI
CLASS="listitem"
><P
CLASS="para"
>Use SQL*Plus to log into the account that owns the desired procedure.</P
></LI
><LI
CLASS="listitem"
><P
CLASS="para"
>Use the SQL*Plus command SET SERVEROUT ON to turn on server output.</P
></LI
><LI
CLASS="listitem"
><P
CLASS="para"
>Execute the procedure, making sure to provide necessary parameters.</P
></LI
><LI
CLASS="listitem"
><P
CLASS="para"
>Execute OWA_UTIL.SHOWPAGE to print the results.</P
></LI
></OL
></DIV
><DIV
CLASS="sect4"
><H4
CLASS="sect4"
><A
CLASS="title"
NAME="BOOK-CH-7-SECT-4.1.1.2"
>7.4.1.1.2 The SHOWSOURCE procedure.</A
></H4
><P
CLASS="para"
> <A
CLASS="indexterm"
NAME="AUTOID-6013"
></A
> <A
CLASS="indexterm"
NAME="AUTOID-6016"
></A
> This procedure prints the PL/SQL source code for a given procedure, function, or package. </P
></DIV
><DIV
CLASS="sect4"
><H4
CLASS="sect4"
><A
CLASS="title"
NAME="BOOK-CH-7-SECT-4.1.1.3"
>7.4.1.1.3 The GET_PROCEDURE function.</A
></H4
><P
CLASS="para"
> <A
CLASS="indexterm"
NAME="AUTOID-6021"
></A
> <A
CLASS="indexterm"
NAME="AUTOID-6024"
></A
> This function returns the name of the procedure that is being executed by the PL/SQL agent. </P
></DIV
><DIV
CLASS="sect4"
><H4
CLASS="sect4"
><A
CLASS="title"
NAME="BOOK-CH-7-SECT-4.1.1.4"
>7.4.1.1.4 The WHO_CALLED_ME procedure.</A
></H4
><P
CLASS="para"
> <A
CLASS="indexterm"
NAME="AUTOID-6029"
></A
> <A
CLASS="indexterm"
NAME="AUTOID-6032"
></A
> This procedure returns information about the procedure that called the currently executing procedure. This information is particularly useful when you are trying to trace a program's execution. The parameters to the WHO_CALLED_ME procedure, which are all defined as OUT variables, are the following: </P
><DL
CLASS="variablelist"
><DT
CLASS="term"
>owner IN VARCHAR2</DT
><DD
CLASS="listitem"
><P
CLASS="para"
>The owner of the calling program unit.</P
></DD
><DT
CLASS="term"
>name IN VARCHAR2</DT
><DD
CLASS="listitem"
><P
CLASS="para"
>The name of the calling unit (procedure name, function name, or ANONYMOUS). </P
></DD
><DT
CLASS="term"
>lineno IN NUMBER</DT
><DD
CLASS="listitem"
><P
CLASS="para"
>The line number of the call within the calling unit.</P
></DD
><DT
CLASS="term"
>caller_t IN VARCHAR2</DT
><DD
CLASS="listitem"
><P
CLASS="para"
>The type of call made. Here is an example:</P
></DD
></DL
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>-- Parameters to who_called_me must be declared as local variables
OWA_UTIL.who_called_me (cowner, cname, clineno, ccaller);
HTP.print (cowner || '&lt;p&gt;');
HTP.print (cname || '&lt;p&gt;');
HTP.print (clineno || '&lt;p&gt;');
HTP.print (ccaller || '&lt;p&gt;');</PRE
></BLOCKQUOTE
></DIV
></DIV
><DIV
CLASS="sect3"
><H4
CLASS="sect3"
><A
CLASS="title"
NAME="BOOK-CH-7-SECT-4.1.2"
>7.4.1.2 Querying the environment</A
></H4
><P
CLASS="para"
>Like any web server, OAS maintains environment variables. Several procedures within OWA_UTIL allow you to query these settings, as shown in <A
CLASS="xref"
HREF="ch07_04.htm#BOOK-CH-7-SECT-4.1.5"
>Table 7.17</A
>. </P
><BR><TABLE
CLASS="table"
BORDER="1"
CELLPADDING="3"
><CAPTION
CLASS="table"
><A
CLASS="title"
NAME="BOOK-CH-7-TABLE-34"
>Table 7.17: OWA_UTIL Procedures, Functions, and Datatypes for Querying the Environment</A
></CAPTION
><THEAD
CLASS="thead"
><TR
CLASS="row"
VALIGN="TOP"
><TH
CLASS="entry"
ALIGN="LEFT"
ROWSPAN="1"
COLSPAN="1"
> <P
CLASS="para"
>Procedure/Function</P
> </TH
><TH
CLASS="entry"
ALIGN="LEFT"
ROWSPAN="1"
COLSPAN="1"
> <P
CLASS="para"
>Parameters</P
> </TH
><TH
CLASS="entry"
ALIGN="LEFT"
ROWSPAN="1"
COLSPAN="1"
> <P
CLASS="para"
>Description</P
> </TH
></TR
></THEAD
><TBODY
CLASS="tbody"
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
> <P
CLASS="para"
>GET_CGI_ENV</P
> </TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
> <P
CLASS="para"
>param_name</P
>  <P
CLASS="para"
>  IN VARCHAR2</P
> </TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
> <P
CLASS="para"
>Returns the value of an environment variable</P
> </TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
> <P
CLASS="para"
>GET_OWA_SERVICE_PATH</P
> </TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
> <P
CLASS="para"
>None</P
> </TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
> <P
CLASS="para"
>Returns the full path of the PL/SQL agent that executed the request</P
> </TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
> <P
CLASS="para"
>IP_ADDRESS</P
> </TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
> <P
CLASS="para"
>None</P
> </TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
> <P
CLASS="para"
>Datatype to hold the TCP/IP address of the client machine that executed a procedure or function </P
> </TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
> <P
CLASS="para"
>PRINT_CGI_ENV</P
> </TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
> <P
CLASS="para"
>None</P
> </TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
> <P
CLASS="para"
>Generates a list of the names and values for all environment variables</P
> </TD
></TR
></TBODY
></TABLE
><DIV
CLASS="sect4"
><H4
CLASS="sect4"
><A
CLASS="title"
NAME="BOOK-CH-7-SECT-4.1.2.1"
>7.4.1.2.1 The PRINT_CGI_ENV procedure.</A
></H4
><P
CLASS="para"
> <A
CLASS="indexterm"
NAME="AUTOID-6103"
></A
> <A
CLASS="indexterm"
NAME="AUTOID-6106"
></A
> This procedure generates a list of names and values for all the environment variables. The procedure is used like the HTML procedures. As a general rule, it is not a good idea to allow casual users to view these settings, which provide detailed information, such as path settings, that can be exploited by malicious deviants. <A
CLASS="xref"
HREF="ch07_04.htm#BOOK-CH-7-SECT-4.1.5"
>Figure 7.4</A
> illustrates the output of this procedure. </P
><H4
CLASS="figure"
><A
CLASS="title"
NAME="BOOK-CH-7-FIG-4"
>Figure 7.4: The output of OWA_UTIL.PRINT_CGI_ENV</A
></H4
><IMG
CLASS="graphic"
SRC="figs/owa.0704.gif"
ALT="Figure 7.4"></DIV
><DIV
CLASS="sect4"
><H4
CLASS="sect4"
><A
CLASS="title"
NAME="BOOK-CH-7-SECT-4.1.2.2"
>7.4.1.2.2 The GET_CGI_ENV function.</A
></H4
><P
CLASS="para"
> <A
CLASS="indexterm"
NAME="AUTOID-6115"
></A
> <A
CLASS="indexterm"
NAME="AUTOID-6118"
></A
>  This function returns the value of an environment variable. It accepts a single VARCHAR2 parameter, param_name, and returns the value as a string. If the environment variable is not defined, the function returns NULL. For example: </P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>-- Fetch the server name into a local variable
server := OWA_UTIL.get_cgi_env ('SERVER_NAME');
HTP.print ('The server is: ' || server);</PRE
></BLOCKQUOTE
></DIV
><DIV
CLASS="sect4"
><H4
CLASS="sect4"
><A
CLASS="title"
NAME="BOOK-CH-7-SECT-4.1.2.3"
>7.4.1.2.3 The IP_ADDRESS datatype.</A
></H4
><P
CLASS="para"
> <A
CLASS="indexterm"
NAME="AUTOID-6124"
></A
> <A
CLASS="indexterm"
NAME="AUTOID-6127"
></A
> The TCP/IP address of the client machine that executed a procedure or function is a particularly useful environment variable. For this reason, OWA_UTIL declares a special data structure just to hold this address. Inexplicably, however, this structure seems to be used only by the OWA_SEC package's GET_CLIENT_IP_ADDRESS function. Go figure! </P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>TYPE ip_address IS TABLE OF INTEGER
   INDEX BY BINARY_INTEGER;</PRE
></BLOCKQUOTE
><P
CLASS="para"
>The four elements of the ip_address array correspond to the four components of the address. </P
></DIV
><DIV
CLASS="sect4"
><H4
CLASS="sect4"
><A
CLASS="title"
NAME="BOOK-CH-7-SECT-4.1.2.4"
>7.4.1.2.4 The GET_OWA_SERVICE_PATH function.</A
></H4
><P
CLASS="para"
> <A
CLASS="indexterm"
NAME="AUTOID-6134"
></A
> <A
CLASS="indexterm"
NAME="AUTOID-6137"
></A
> This function returns the full path of the PL/SQL agent used to execute the request. This string is typically the name of the PL/SQL agent followed by "/plsql/" (depending on the agent's configuration). </P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>-- SP is a local VARCHAR2 variable
sp := OWA_UTIL.get_owa_service_path;
HTP.print (sp);</PRE
></BLOCKQUOTE
></DIV
></DIV
><DIV
CLASS="sect3"
><H4
CLASS="sect3"
><A
CLASS="title"
NAME="BOOK-CH-7-SECT-4.1.3"
>7.4.1.3 Representing dates</A
></H4
><P
CLASS="para"
>With dozens of possible formats, dates are troublesome in almost every development environment. OWA_UTIL can help simplify date entry by providing a standard input format for the day, month, and year. The procedures used to do this are shown in <A
CLASS="xref"
HREF="ch07_04.htm#BOOK-CH-7-SECT-4.1.5"
>Table 7.18</A
>. </P
><BR><TABLE
CLASS="table"
BORDER="1"
CELLPADDING="3"
><CAPTION
CLASS="table"
><A
CLASS="title"
NAME="BOOK-CH-7-TABLE-36"
>Table 7.18: OWA_UTIL Procedures for Representing Dates </A
></CAPTION
><THEAD
CLASS="thead"
><TR
CLASS="row"
VALIGN="TOP"
><TH
CLASS="entry"
ALIGN="LEFT"
ROWSPAN="1"
COLSPAN="1"
> <P
CLASS="para"
>Procedure/Function</P
> </TH
><TH
CLASS="entry"
ALIGN="LEFT"
ROWSPAN="1"
COLSPAN="1"
> <P
CLASS="para"
>Parameters</P
> </TH
><TH
CLASS="entry"
ALIGN="LEFT"
ROWSPAN="1"
COLSPAN="1"
> <P
CLASS="para"
>Description</P
> </TH
></TR
></THEAD
><TBODY
CLASS="tbody"
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
> <P
CLASS="para"
>CHOOSE_DATE</P
> </TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
> <P
CLASS="para"
>p_name IN VARCHAR2</P
>  <P
CLASS="para"
>p_date IN DATE</P
>  <P
CLASS="para"
>  DEFAULT SYSDATE</P
> </TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
> <P
CLASS="para"
>Generates input elements for date, month, and year</P
> </TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
> <P
CLASS="para"
>DATETYPE</P
> </TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
> <P
CLASS="para"
>None</P
> </TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
> <P
CLASS="para"
>Datatype for day, month, and year from choose_date</P
> </TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
> <P
CLASS="para"
>TODATE</P
> </TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
> <P
CLASS="para"
>None</P
> </TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
> <P
CLASS="para"
>Converts a datetype into a normal date variable</P
> </TD
></TR
></TBODY
></TABLE
><DIV
CLASS="sect4"
><H4
CLASS="sect4"
><A
CLASS="title"
NAME="BOOK-CH-7-SECT-4.1.3.1"
>7.4.1.3.1 The CHOOSE_DATE procedure.</A
></H4
><P
CLASS="para"
> <A
CLASS="indexterm"
NAME="AUTOID-6185"
></A
> <A
CLASS="indexterm"
NAME="AUTOID-6188"
></A
>  This procedure generates input elements for the day, month, and year that are used as part of a data entry form. Since each element has the same name, the date is passed as an array. Its parameters are as follows: </P
><DL
CLASS="variablelist"
><DT
CLASS="term"
>p_name IN VARCHAR2</DT
><DD
CLASS="listitem"
><P
CLASS="para"
>The name of the form element.</P
></DD
><DT
CLASS="term"
>p_date IN DATE DEFAULT SYSDATE </DT
><DD
CLASS="listitem"
><P
CLASS="para"
>The value of the date.</P
></DD
></DL
><P
CLASS="para"
>The following procedure creates a nicely formatted form for entering a hire date: </P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>HTP.print ('form action=proc_date');
HTP.print ('Date Hired:');
OWA_UTIL.choose_date ('date_hired','31-OCT-98');</PRE
></BLOCKQUOTE
><P
CLASS="para"
><A
CLASS="xref"
HREF="ch07_04.htm#BOOK-CH-7-SECT-4.1.5"
>Figure 7.5</A
> shows the output from this procedure.</P
><H4
CLASS="figure"
><A
CLASS="title"
NAME="BOOK-CH-7-FIG-5"
>Figure 7.5: A form that uses OWA_UTIL.CHOOSE_DATE</A
></H4
><IMG
CLASS="graphic"
SRC="figs/owa.0705.gif"
ALT="Figure 7.5"></DIV
><DIV
CLASS="sect4"
><H4
CLASS="sect4"
><A
CLASS="title"
NAME="BOOK-CH-7-SECT-4.1.3.2"
>7.4.1.3.2 The DATETYPE datatype.</A
></H4
><P
CLASS="para"
> <A
CLASS="indexterm"
NAME="AUTOID-6209"
></A
> <A
CLASS="indexterm"
NAME="AUTOID-6212"
></A
>  The day, month, and year created with the CHOOSE_DATE procedure are held as three elements in an array: </P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>TYPE datetype IS TABLE OF VARCHAR2(10)
   INDEX BY BINARY_INTEGER;</PRE
></BLOCKQUOTE
><P
CLASS="para"
>The specification also includes a DATETYPE variable called empty_date that is used as the default value for parameters that receive a DATETYPE value. </P
></DIV
><DIV
CLASS="sect4"
><H4
CLASS="sect4"
><A
CLASS="title"
NAME="BOOK-CH-7-SECT-4.1.3.3"
>7.4.1.3.3 The TODATE function.</A
></H4
><P
CLASS="para"
> <A
CLASS="indexterm"
NAME="AUTOID-6219"
></A
> <A
CLASS="indexterm"
NAME="AUTOID-6222"
></A
>  This function is used in the procedure that processes a form and converts a DATETYPE into a normal date variable: </P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>CREATE OR REPLACE PROCEDURE proc_date (
   date_hired OWA_UTIL.datetype DEFAULT OWA_UTIL.empty_date
   )
IS
   
   dhire DATE;

BEGIN
   dhire := OWA_UTIL.todate (date_hired);
   HTP.print (TO_CHAR (dhire, 'Month DD, YYYY'));
END;</PRE
></BLOCKQUOTE
></DIV
></DIV
><DIV
CLASS="sect3"
><H4
CLASS="sect3"
><A
CLASS="title"
NAME="BOOK-CH-7-SECT-4.1.4"
>7.4.1.4 HTML and HTTP utilities</A
></H4
><P
CLASS="para"
>OWA_UTIL contains a number of specialized HTTP and HTML procedures that don't fit cleanly into the HTP package. These are shown in <A
CLASS="xref"
HREF="ch07_04.htm#BOOK-CH-7-SECT-4.1.5"
>Table 7.19</A
>. </P
><BR><TABLE
CLASS="table"
BORDER="1"
CELLPADDING="3"
><CAPTION
CLASS="table"
><A
CLASS="title"
NAME="BOOK-CH-7-TABLE-38"
>Table 7.19: OWA_UTIL Procedures Used for HTML and HTTP </A
></CAPTION
><THEAD
CLASS="thead"
><TR
CLASS="row"
VALIGN="TOP"
><TH
CLASS="entry"
ALIGN="LEFT"
ROWSPAN="1"
COLSPAN="1"
> <P
CLASS="para"
>Procedure</P
> </TH
><TH
CLASS="entry"
ALIGN="LEFT"
ROWSPAN="1"
COLSPAN="1"
> <P
CLASS="para"
>Parameters</P
> </TH
><TH
CLASS="entry"
ALIGN="LEFT"
ROWSPAN="1"
COLSPAN="1"
> <P
CLASS="para"
>Description</P
> </TH
></TR
></THEAD
><TBODY
CLASS="tbody"
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
> <P
CLASS="para"
>HTTP_HEADER_CLOSE</P
> </TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
> <P
CLASS="para"
>ccontent_type IN VARCHAR2</P
>  <P
CLASS="para"
>bclose_header IN BOOLEAN</P
>  <P
CLASS="para"
>  DEFAULT TRUE</P
> </TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
> <P
CLASS="para"
>Manually closes a web page header</P
> </TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
> <P
CLASS="para"
>MIME_HEADER</P
> </TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
> <P
CLASS="para"
>ccontent_type IN VARCHAR2</P
>  <P
CLASS="para"
>bclose_header IN BOOLEAN</P
>  <P
CLASS="para"
>  DEFAULT TRUE</P
> </TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
> <P
CLASS="para"
>Signals the PL/SQL agent to change the default header for a document</P
> </TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
> <P
CLASS="para"
>REDIRECT_URL</P
> </TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
> <P
CLASS="para"
>curl IN VARCHAR2</P
>  <P
CLASS="para"
>bclose_header IN BOOLEAN</P
>  <P
CLASS="para"
>  DEFAULT TRUE</P
> </TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
> <P
CLASS="para"
>Sends a user to a URL (passed as a parameter)</P
> </TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
> <P
CLASS="para"
>SIGNATURE</P
> </TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
> <P
CLASS="para"
>cname (optional; not </P
>  <P
CLASS="para"
>recommended)</P
> </TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
> <P
CLASS="para"
>Generates a single document signature showing the date the page was last updated </P
> </TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
> <P
CLASS="para"
>STATUS_LINE</P
> </TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
> <P
CLASS="para"
>nstatus IN INTEGER</P
>  <P
CLASS="para"
>creason IN VARCHAR2</P
>  <P
CLASS="para"
>  DEFAULT NULL</P
>  <P
CLASS="para"
>bclose_header IN BOOLEAN</P
>  <P
CLASS="para"
>  DEFAULT TRUE</P
> </TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
> <P
CLASS="para"
>Sends a numerical code to the browser indicating the status of a request </P
> </TD
></TR
></TBODY
></TABLE
><DIV
CLASS="sect4"
><H4
CLASS="sect4"
><A
CLASS="title"
NAME="BOOK-CH-7-SECT-4.1.4.1"
>7.4.1.4.1 The SIGNATURE procedure.</A
></H4
><P
CLASS="para"
> <A
CLASS="indexterm"
NAME="AUTOID-6293"
></A
> <A
CLASS="indexterm"
NAME="AUTOID-6296"
></A
>  A signature is a standardized line that usually appears at the end of a document. For example, an email signature often lists the sender's company, position, and phone number. Similarly, an HTML signature appears at the end of a web page. The SIGNATURE procedure generates a simple signature that gives the date the page was last updated: </P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>&lt;b&gt;This page was produced by the PL/SQL Agent on sysdate&lt;/b&gt;</PRE
></BLOCKQUOTE
><P
CLASS="para"
>You can also provide the name for a procedure or function in an optional parameter called cname. This adds an additional hyperlink to the signature that, when clicked, displays the PL/SQL code for the procedure or function specified in the parameter. This is a dangerous practice you should probably avoid. </P
></DIV
><DIV
CLASS="sect4"
><H4
CLASS="sect4"
><A
CLASS="title"
NAME="BOOK-CH-7-SECT-4.1.4.2"
>7.4.1.4.2 The MIME_HEADER procedure.</A
></H4
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="AUTOID-6303"
></A
> <A
CLASS="indexterm"
NAME="AUTOID-6306"
></A
>  Every resource is identified as a particular type of content. This classification, called the MIME (Multipurpose Internet Mail Extension) type, is based on a set of standards used for transmitting ASCII and binary files across the Internet. </P
><P
CLASS="para"
>This MIME type is set in a section called the HTTP header that is separate from the actual content.[<A
CLASS="footnote"
HREF="#BOOK-CH-7-FOOTNOTE-3"
>4</A
>] The header section begins with a header that (like normal HTML) must be closed by another instruction. By default, the PL/SQL agent automatically sends <CODE
CLASS="literal"
>text/html</CODE
> as the MIME type and closes the header. To perform certain tasks, such as creating a cookie or activating a content handler on the user's browser, we must interrupt this normal flow of events. </P
><BLOCKQUOTE
CLASS="footnote"
><DIV
CLASS="footnote"
><P
CLASS="para"
><A
CLASS="footnote"
NAME="BOOK-CH-7-FOOTNOTE-3"
>[4]</A
> Although they have similar names, the HTTP header is <EM
CLASS="emphasis"
>not</EM
> the same as the HTML header created by the <CODE
CLASS="literal"
>&lt;head&gt;</CODE
> tag.</P
></DIV
></BLOCKQUOTE
><P
CLASS="para"
>For example, suppose we want to place the results of a query in a spreadsheet, rather than in an HTML document. To accomplish this, we must tell the browser that the content is not a normal HTML document, then generate a data stream, such as a tab-delimited set of columns, that is funneled to the spreadsheet program. We need to change the default <CODE
CLASS="literal"
>text/html</CODE
> type to something like <CODE
CLASS="literal"
>text/tab</CODE
> (the MIME type for tab-delimited content) to signal the browser to start a new content handler. </P
><P
CLASS="para"
>This is done with the OWA_UTIL procedures that change the default HTTP header. These procedures are not normal HTML; instead, they are special instructions that cause the browser to act in a particular way, and each must be used before any of the normal HTP procedures. </P
><P
CLASS="para"
>The MIME_HEADER procedure signals the PL/SQL agent to change the default header that is normally sent with the document. It has two parameters: </P
><DL
CLASS="variablelist"
><DT
CLASS="term"
>ccontent_type IN VARCHAR2</DT
><DD
CLASS="listitem"
><P
CLASS="para"
>The new content type.</P
></DD
><DT
CLASS="term"
>bclose_header IN BOOLEAN DEFAULT TRUE</DT
><DD
CLASS="listitem"
><P
CLASS="para"
>Flag indicating if the header should be immediately closed; a value of FALSE leaves it open so that more instructions (like these to set cookies) can be included as part of the header. </P
></DD
></DL
></DIV
><DIV
CLASS="sect4"
><H4
CLASS="sect4"
><A
CLASS="title"
NAME="BOOK-CH-7-SECT-4.1.4.3"
>7.4.1.4.3 The STATUS_LINE procedure.</A
></H4
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="AUTOID-6331"
></A
> <A
CLASS="indexterm"
NAME="AUTOID-6334"
></A
>  This procedure sends a numerical code to the browser indicating the status of a request. There are three parameters to the procedure: </P
><DL
CLASS="variablelist"
><DT
CLASS="term"
>nstatus IN INTEGER</DT
><DD
CLASS="listitem"
><P
CLASS="para"
>The numeric status code.</P
></DD
><DT
CLASS="term"
>creason IN VARCHAR2 DEFAULT NULL</DT
><DD
CLASS="listitem"
><P
CLASS="para"
>Code description.</P
></DD
><DT
CLASS="term"
>bclose_header IN BOOLEAN DEFAULT TRUE</DT
><DD
CLASS="listitem"
><P
CLASS="para"
>Flag to close the HTTP header. </P
></DD
></DL
><P
CLASS="para"
>The Internet community has developed a standard set of number/message result codes, the most common of which are: </P
><TABLE
CLASS="simplelist"
BORDER="0"
><TR
><TD
CLASS="member"
>200: Success</TD
></TR
><TR
><TD
CLASS="member"
>401: Unauthorized</TD
></TR
><TR
><TD
CLASS="member"
>403: Forbidden</TD
></TR
><TR
><TD
CLASS="member"
>404: Not Found</TD
></TR
></TABLE
></DIV
><DIV
CLASS="sect4"
><H4
CLASS="sect4"
><A
CLASS="title"
NAME="BOOK-CH-7-SECT-4.1.4.4"
>7.4.1.4.4 The REDIRECT_URL procedure. </A
></H4
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="AUTOID-6358"
></A
> <A
CLASS="indexterm"
NAME="AUTOID-6361"
></A
>  It is often necessary to transparently send users from one web page to another. Most often, this is done when a page is moved to another location. Rather than having users reenter the new location, we simply redirect them to the new page. </P
><P
CLASS="para"
>Sometimes we want to direct users to a static page from within a PL/SQL program. For example, suppose you need to make some changes to a popular PL/SQL web application and you want to keep users out for a while. You can use redirection to send users who attempt to use the application to a new page that explains why the application is closed and when it will be available again (assuming, of course, that you haven't shut the database down entirely). This basic courtesy can save you lots of calls from irate users. </P
><P
CLASS="para"
>The REDIRECT_URL procedure sends a user to the URL passed as a parameter. This URL can refer to a static page or another PL/SQL program; you can even pass parameters using the query string. Like MIME_HEADER and STATUS_LINE, REDIRECT_URL places its output within the HTTP header and must appear before any other HTP calls. It has two parameters: </P
><DL
CLASS="variablelist"
><DT
CLASS="term"
>curl IN VARCHAR2</DT
><DD
CLASS="listitem"
><P
CLASS="para"
>The new URL.</P
></DD
><DT
CLASS="term"
>bclose_header IN BOOLEAN DEFAULT TRUE</DT
><DD
CLASS="listitem"
><P
CLASS="para"
>Flag to close the HTTP header.</P
></DD
></DL
><P
CLASS="para"
>The following procedure illustrates how you could redirect a user to a static page if you wanted to shut down an application temporarily: </P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>PROCEDURE popular_app_main
IS
BEGIN
   IF popular_app_is_closed
   THEN
      -- Redirect to static page
      OWA_UTIL.redirect_url ('http://server/alert/status.html');
   ELSE
      HTP.title ('The application you know and love...');
      popular_app.show_main_page;
   END IF;
END;</PRE
></BLOCKQUOTE
></DIV
><DIV
CLASS="sect4"
><H4
CLASS="sect4"
><A
CLASS="title"
NAME="BOOK-CH-7-SECT-4.1.4.5"
>7.4.1.4.5 The HTTP_HEADER_CLOSE procedure.</A
></H4
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="AUTOID-6379"
></A
> <A
CLASS="indexterm"
NAME="AUTOID-6382"
></A
>  This procedure is used to manually close the header when the bclose_header flag to any of the previous procedures is FALSE. It does not have any parameters. </P
></DIV
></DIV
><DIV
CLASS="sect3"
><H4
CLASS="sect3"
><A
CLASS="title"
NAME="BOOK-CH-7-SECT-4.1.5"
>7.4.1.5 Creating complex HTML structures</A
></H4
><P
CLASS="para"
>The OWA_UTIL procedures and functions listed in <A
CLASS="xref"
HREF="ch07_04.htm#BOOK-CH-7-SECT-4.1.5"
>Table 7.20</A
> help you create more complex HTML structures. They are described in the following sections. </P
><BR><TABLE
CLASS="table"
BORDER="1"
CELLPADDING="3"
><CAPTION
CLASS="table"
><A
CLASS="title"
NAME="BOOK-CH-7-TABLE-40"
>Table 7.20: OWA_UTIL Procedures and Functions for Creating Complex HTML Structures </A
></CAPTION
><THEAD
CLASS="thead"
><TR
CLASS="row"
VALIGN="TOP"
><TH
CLASS="entry"
ALIGN="LEFT"
ROWSPAN="1"
COLSPAN="1"
> <P
CLASS="para"
>Procedure/Function</P
> </TH
><TH
CLASS="entry"
ALIGN="LEFT"
ROWSPAN="1"
COLSPAN="1"
> <P
CLASS="para"
>Parameters</P
> </TH
><TH
CLASS="entry"
ALIGN="LEFT"
ROWSPAN="1"
COLSPAN="1"
> <P
CLASS="para"
>Description</P
> </TH
></TR
></THEAD
><TBODY
CLASS="tbody"
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
> <P
CLASS="para"
>BIND_VARIABLES</P
> </TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
> <P
CLASS="para"
>theQuery IN VARCHAR2 DEFAULT</P
>  <P
CLASS="para"
>  NULL</P
>  <P
CLASS="para"
>bv<EM
CLASS="emphasis"
>n</EM
>Name IN VARCHAR2 DEFAULT</P
>  <P
CLASS="para"
>  NULL</P
>  <P
CLASS="para"
>bv<EM
CLASS="emphasis"
>n</EM
>Value IN VARCHAR2 DEFAULT</P
>  <P
CLASS="para"
>  NULL</P
> </TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
> <P
CLASS="para"
>Provides an interface to the built-in package DBMS_SQL</P
> </TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
> <P
CLASS="para"
>CALENDARPRINT</P
> </TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
> <P
CLASS="para"
>p_theQuery IN VARCHAR2 </P
>  <P
CLASS="para"
>  OR NUMBER</P
>  <P
CLASS="para"
>p_cname IN VARCHAR2</P
>  <P
CLASS="para"
>p_nsize IN NUMBER</P
>  <P
CLASS="para"
>p_multiple IN BOOLEAN DEFAULT</P
>  <P
CLASS="para"
>  FALSE</P
> </TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
> <P
CLASS="para"
>Creates an HTML-based monthly calendar</P
> </TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
> <P
CLASS="para"
>CELLSPRINT</P
> </TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
> <P
CLASS="para"
>theQuery IN VARCHAR2 OR NUMBER</P
>  <P
CLASS="para"
>p_max_rows IN NUMBER</P
>  <P
CLASS="para"
>p_format_numbers IN VARCHAR2</P
>  <P
CLASS="para"
>  DEFAULT NULL</P
>  <P
CLASS="para"
>p_skip_rec IN NUMBER DEFAULT 0</P
>  <P
CLASS="para"
>p_more_data OUT BOOLEAN</P
> </TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
> <P
CLASS="para"
>A stripped-down version of TABLEPRINT</P
> </TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
> <P
CLASS="para"
>LISTPRINT</P
> </TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
> <P
CLASS="para"
>p_theQuery IN VARCHAR2 </P
>  <P
CLASS="para"
>  OR NUMBER</P
>  <P
CLASS="para"
>p_cname IN VARCHAR2</P
>  <P
CLASS="para"
>p_nsize IN NUMBER</P
>  <P
CLASS="para"
>p_multiple IN BOOLEAN DEFAULT</P
>  <P
CLASS="para"
>  FALSE</P
> </TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
> <P
CLASS="para"
>Creates a list of values (LOV) on an HTML form</P
> </TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
> <P
CLASS="para"
>TABLEPRINT</P
> </TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
> <P
CLASS="para"
>ctable IN VARCHAR2</P
>  <P
CLASS="para"
>cattributes IN VARCHAR2 DEFAULT</P
>  <P
CLASS="para"
>  NULL</P
>  <P
CLASS="para"
>ntable_type IN INTEGER DEFAULT</P
>  <P
CLASS="para"
>  HTML_TABLE</P
>  <P
CLASS="para"
>ccolumns IN VARCHAR2 DEFAULT `*'</P
>  <P
CLASS="para"
>cclauses IN VARCHAR2 DEFAULT</P
>  <P
CLASS="para"
>  NULL</P
>  <P
CLASS="para"
>ccol_aliases IN VARCHAR2 DEFAULT</P
>  <P
CLASS="para"
>  NULL</P
>  <P
CLASS="para"
>nrow_min IN NUMBER DEFAULT 0</P
>  <P
CLASS="para"
>nrow_max IN NUMBER DEFAULT 0</P
> </TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
> <P
CLASS="para"
>Produces a formatted HTML table based on a SQL query</P
> </TD
></TR
></TBODY
></TABLE
><DIV
CLASS="sect4"
><H4
CLASS="sect4"
><A
CLASS="title"
NAME="BOOK-CH-7-SECT-4.1.5.1"
>7.4.1.5.1 The TABLEPRINT function.</A
></H4
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="AUTOID-6474"
></A
> <A
CLASS="indexterm"
NAME="AUTOID-6477"
></A
>  This function produces a formatted HTML table based on a SQL query whose appearance is similar to that of a SELECT statement in SQL*Plus. The function's return value indicates if all the rows in the underlying table have been displayed. Its parameters are: </P
><DL
CLASS="variablelist"
><DT
CLASS="term"
>ctable IN VARCHAR2</DT
><DD
CLASS="listitem"
><P
CLASS="para"
>The database table that is being reported on.</P
></DD
><DT
CLASS="term"
>cattributes IN VARCHAR2 DEFAULT NULL</DT
><DD
CLASS="listitem"
><P
CLASS="para"
>Free-format attributes to be included as part of the table tag (i.e., <CODE
CLASS="literal"
>&lt;table cattributes&gt;</CODE
>). </P
></DD
><DT
CLASS="term"
>ntable_type IN INTEGER DEFAULT HTML_TABLE</DT
><DD
CLASS="listitem"
><P
CLASS="para"
>The output type; can be either an HTML table or a text table; two numeric constants, HTML_TABLE (value = 1) and PRE_TABLE (value = 2) are defined to represent these types. </P
></DD
><DT
CLASS="term"
>ccolumns IN VARCHAR2 DEFAULT '*'</DT
><DD
CLASS="listitem"
><P
CLASS="para"
>The columns to include in the output; the list is delimited with commas. </P
></DD
><DT
CLASS="term"
>cclauses IN VARCHAR2 DEFAULT NULL</DT
><DD
CLASS="listitem"
><P
CLASS="para"
>A WHERE or ORDER BY clause used to select specific rows from the underlying table; the clause must be syntactically correct and include all necessary keywords (such as WHERE...). </P
></DD
><DT
CLASS="term"
>ccol_aliases IN VARCHAR2 DEFAULT NULL</DT
><DD
CLASS="listitem"
><P
CLASS="para"
>The column aliases used for each column; this list is comma-delimited and should correspond to the columns specified in the ccolumns parameter. </P
></DD
><DT
CLASS="term"
>nrow_min IN NUMBER DEFAULT 0</DT
><DD
CLASS="listitem"
><P
CLASS="para"
>The ordinal position of the first row in the result set to display; not the same as rownum. </P
></DD
><DT
CLASS="term"
>nrow_max IN NUMBER DEFAULT 0</DT
><DD
CLASS="listitem"
><P
CLASS="para"
>The ordinal position of the last row in the result set to display; not the same as rownum. </P
></DD
></DL
><P
CLASS="para"
>The tprint procedure, shown in the following code, uses the TABLEPRINT procedure to page through the EMP table five rows at a time. The i_page_num parameter is used to calculate corresponding values for the nrow_min and nrow_max parameters. The output is shown in <A
CLASS="xref"
HREF="ch07_04.htm#BOOK-CH-7-SECT-4.1.5"
>Figure 7.6</A
>. </P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>CREATE OR REPLACE PROCEDURE tprint (
   i_page_num IN VARCHAR2 DEFAULT '1'
   )
IS
   
   more_rows BOOLEAN;
   
   cur_page NUMBER
      := TO_NUMBER (i_page_num);
   min_row NUMBER;
   max_row NUMBER;
   
   i_num_rows CONSTANT NUMBER := 5;

BEGIN
   min_row :=  (cur_page - 1) * i_num_rows + 1;
   max_row := min_row + i_num_rows - 1;
   more_rows :=
      OWA_UTIL.tableprint (
         ctable       =&gt; 'scott.emp',
         cattributes  =&gt; 'border=1',
         ntable_type  =&gt; OWA_UTIL.html_table,
         ccolumns     =&gt; 'job, ename, hiredate, sal',
         cclauses     =&gt; 'order by job, ename',
         ccol_aliases =&gt; 'Job, Employee Name, Date Hired, Salary',
         nrow_min     =&gt; min_row,
         nrow_max     =&gt; max_row
      );
   -- Put a &quot;Prev&quot; hyperlink if min_row &gt; 1
   IF cur_page &gt; 1
   THEN
      HTP.anchor (
         'tprint?i_page_num=' ||  (cur_page - 1),
         'Previous'
      );
   END IF;
   -- Put a &quot;Next&quot; hyperlink if there are more rows in the query
   IF more_rows
   THEN
      HTP.anchor (
         'tprint?i_page_num=' ||  (cur_page + 1),
         'Next'
      );
   END IF;

END;</PRE
></BLOCKQUOTE
><H4
CLASS="figure"
><A
CLASS="title"
NAME="BOOK-CH-7-FIG-6"
>Figure 7.6: The output of the tprint procedure</A
></H4
><IMG
CLASS="graphic"
SRC="figs/owa.0706.gif"
ALT="Figure 7.6"></DIV
><DIV
CLASS="sect4"
><H4
CLASS="sect4"
><A
CLASS="title"
NAME="BOOK-CH-7-SECT-4.1.5.2"
>7.4.1.5.2 The BIND_VARIABLES procedure.</A
></H4
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="AUTOID-6522"
></A
> <A
CLASS="indexterm"
NAME="AUTOID-6525"
></A
>  This procedure puts a friendly face on DBMS_SQL, one of the most flexible and powerful of all the built-in packages. DBMS_SQL allows you to dynamically construct and execute SQL statements as your program executes. The queries constructed by BIND_VARIABLES can even contain variables that are bound to values entered on the HTML form. </P
><P
CLASS="para"
>The BIND_VARIABLES procedure accepts a SQL statement and up to 25 name/value pairs of bind variables. It returns a cursor handle (not an actual cursor) that can be passed to other OWA_UTIL procedures to create complex HTML structures. This handle is also used by the various procedures in DBMS_SQL to fetch, parse, and close dynamic queries. For an excellent discussion of DBMS_SQL, see <CITE
CLASS="citetitle"
>Oracle Built-in Packages</CITE
> by Steven Feuerstein, Charles Dye, and John Beresniewicz (O'Reilly &amp; Associates, 1998). </P
><P
CLASS="para"
>The parameters to the BIND_VARIABLES procedure are:</P
><DL
CLASS="variablelist"
><DT
CLASS="term"
>theQuery IN VARCHAR2 DEFAULT NULL</DT
><DD
CLASS="listitem"
><P
CLASS="para"
>The select query to use in creating the dynamic cursor; it can contain up to 25 bind variables. </P
></DD
><DT
CLASS="term"
>bvnName IN VARCHAR2 DEFAULT NULL</DT
><DD
CLASS="listitem"
><P
CLASS="para"
>The name of the <EM
CLASS="emphasis"
>n</EM
>th bind variable (i.e., bv1Name, bv2Name, . . . bv25Name); there must be a bind variable parameter for each bind variable in the SELECT statement. </P
></DD
><DT
CLASS="term"
>bvnValue IN VARCHAR2 DEFAULT NULL</DT
><DD
CLASS="listitem"
><P
CLASS="para"
>The value of the <EM
CLASS="emphasis"
>n</EM
> th bind variable (i.e., bv1Value, bv2Value, . . . bv25Value); there must be a corresponding value for each bind variable name. </P
></DD
></DL
><P
CLASS="para"
>Here is a simple code snippet illustrating the use of the BIND_VARIABLES procedure. The SELECT statement is built and stored in a string: </P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>stmt :=
      'select emp.ename, emp.job, emp.sal, dpt.dname, dpt.loc';
   stmt := stmt || ' from scott.emp emp, scott.dept dpt';
   stmt := stmt || ' where emp.deptno = dpt.deptno and';
   stmt := stmt || ' dpt.dname like :bvDept and';
   stmt := stmt || ' emp.job like :bvJob and ';
   stmt := stmt || ' emp.sal &gt; :bvSal';
   stmt := stmt || ' order by emp.ename';
   --
   cur_handle :=
      OWA_UTIL.bind_variables (
         TheQuery =&gt; stmt,
         bv1Name  =&gt; 'bvDept',
         bv1Value =&gt; 'RESEARCH',
         bv2Name  =&gt; 'bvJob',
         bv2Value =&gt; '%',
         bv3Name  =&gt; 'bvSal',
         bv3Value =&gt; 1000
      );</PRE
></BLOCKQUOTE
></DIV
><DIV
CLASS="sect4"
><H4
CLASS="sect4"
><A
CLASS="title"
NAME="BOOK-CH-7-SECT-4.1.5.3"
>7.4.1.5.3 The CELLSPRINT procedure.</A
></H4
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="AUTOID-6550"
></A
> <A
CLASS="indexterm"
NAME="AUTOID-6553"
></A
>  CELLSPRINT is a stripped-down version of TABLEPRINT. The main difference between the two procedures is that CELLSPRINT can accept a dynamic query generated with BIND_VARIABLES in addition to a simple VARCHAR2 query string. This is especially useful when the underlying query contains a number of bind variables. Its parameters are: </P
><DL
CLASS="variablelist"
><DT
CLASS="term"
>theQuery IN VARCHAR2 OR NUMBER</DT
><DD
CLASS="listitem"
><P
CLASS="para"
>The query on which to build the table; it can be a simple string or a cursor handle returned by BIND_VARIABLES. </P
></DD
><DT
CLASS="term"
>p_max_rows IN NUMBER</DT
><DD
CLASS="listitem"
><P
CLASS="para"
>The maximum number of rows allowed in the HTML output; this parameter is not optional. </P
></DD
><DT
CLASS="term"
>p_  format_numbers IN VARCHAR2 DEFAULT NULL</DT
><DD
CLASS="listitem"
><P
CLASS="para"
>If this value is non-null, numbers in the table are right-justified and formatted to two decimal places. </P
></DD
><DT
CLASS="term"
>p_skip_rec IN NUMBER DEFAULT 0</DT
><DD
CLASS="listitem"
><P
CLASS="para"
>Optional offset; sets the first row of the result set that is displayed; similar to the nrow_min parameter of TABLEPRINT. </P
></DD
><DT
CLASS="term"
>p_more_data OUT BOOLEAN</DT
><DD
CLASS="listitem"
><P
CLASS="para"
>Optional flag used in conjunction with p_skip_rec that indicates if there are more rows in the underlying table; similar to the return value of the TABLEPRINT function. </P
></DD
></DL
><P
CLASS="para"
>Here is a simple example based on a VARCHAR2 query string:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>OWA_UTIL.cellsprint (
   'select * from emp where job like ' || iename || '%',
   10,
   'Y'
);</PRE
></BLOCKQUOTE
><P
CLASS="para"
>We could use CELLSPRINT to quickly print the results of the SELECT statement defined in a call to the BIND_VARIABLES procedure: </P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>OWA_UTIL.cellsprint (cur_handle, 10, 'Y');</PRE
></BLOCKQUOTE
></DIV
><DIV
CLASS="sect4"
><H4
CLASS="sect4"
><A
CLASS="title"
NAME="BOOK-CH-7-SECT-4.1.5.4"
>7.4.1.5.4 The LISTPRINT procedure.</A
></H4
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="AUTOID-6583"
></A
> <A
CLASS="indexterm"
NAME="AUTOID-6586"
></A
>  This procedure is handy for creating lists of values (LOVs) on an HTML form. Like traditional LOVs, the elements in the list come from an underlying query. However, since HTTP is stateless, the entire contents of the query must be downloaded to the HTML form, which can present a problem for very large numbers of elements. It has the following parameters: </P
><DL
CLASS="variablelist"
><DT
CLASS="term"
>p_theQuery IN VARCHAR2 OR NUMBER</DT
><DD
CLASS="listitem"
><P
CLASS="para"
>The underlying query on which the LOV is based; can be either a VARCHAR2 string or a cursor handle to a dynamic query created with the BIND_VARIABLES procedure. </P
></DD
><DT
CLASS="term"
>p_cname IN VARCHAR2</DT
><DD
CLASS="listitem"
><P
CLASS="para"
>The name of the HTML input element.</P
></DD
><DT
CLASS="term"
>p_nsize IN NUMBER</DT
><DD
CLASS="listitem"
><P
CLASS="para"
>The size of the input list; setting this value to "1" creates a drop-down list; otherwise, it creates a scrollbox with the specified number of items visible. </P
></DD
><DT
CLASS="term"
>p_multiple IN BOOLEAN DEFAULT FALSE</DT
><DD
CLASS="listitem"
><P
CLASS="para"
>Flag indicating that the select list can contain multiple selections; if TRUE, the input element must be treated as an array of elements when the form is processed. </P
></DD
></DL
><P
CLASS="para"
>The underlying query must have the following layout:</P
><DL
CLASS="variablelist"
><DT
CLASS="term"
>Column 1</DT
><DD
CLASS="listitem"
><P
CLASS="para"
>The value returned when the element is selected from the list (e.g., empno, deptno, etc.). </P
></DD
><DT
CLASS="term"
>Column 2</DT
><DD
CLASS="listitem"
><P
CLASS="para"
>The value the user sees on the form (e.g., ename, deptname, etc.).</P
></DD
><DT
CLASS="term"
>Column 3</DT
><DD
CLASS="listitem"
><P
CLASS="para"
>A non-NULL value in the third column marks the row as "selected" on the form. </P
></DD
></DL
><P
CLASS="para"
>The following procedure call creates an input element we can include within an HTML form: </P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>OWA_UTIL.listprint (
   'select empno, ename, null from scott.emp order by ename',
   'iempno',
   1
);</PRE
></BLOCKQUOTE
><P
CLASS="para"
>The procedure generates the following HTML:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>&lt;SELECT NAME=&quot;emp_no&quot; SIZE=&quot;1&quot;&gt;
&lt;OPTION value=&quot;7876&quot;&gt;ADAMS
&lt;OPTION value=&quot;7499&quot;&gt;ALLEN
&lt;OPTION value=&quot;7698&quot;&gt;BLAKE
....
&lt;OPTION value=&quot;7844&quot;&gt;TURNER
&lt;OPTION value=&quot;7521&quot;&gt;WARD
&lt;/SELECT&gt;</PRE
></BLOCKQUOTE
></DIV
><DIV
CLASS="sect4"
><H4
CLASS="sect4"
><A
CLASS="title"
NAME="BOOK-CH-7-SECT-4.1.5.5"
>7.4.1.5.5 The CALENDARPRINT procedure.</A
></H4
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="AUTOID-6626"
></A
> <A
CLASS="indexterm"
NAME="AUTOID-6629"
></A
>  This procedure creates an HTML-based monthly calendar. The procedure has the following parameters: </P
><DL
CLASS="variablelist"
><DT
CLASS="term"
>p_query IN VARCHAR2 OR INTEGER</DT
><DD
CLASS="listitem"
><P
CLASS="para"
>The underlying query for the calendar; can be either a simple VARCHAR2 string or a handle to a dynamic cursor created with the BIND_VALUES procedure. </P
></DD
><DT
CLASS="term"
>p_mf_only IN VARCHAR2 DEFAULT `N'</DT
><DD
CLASS="listitem"
><P
CLASS="para"
>Flag to exclude Sunday and Saturday from the calendar; an "N" (the default) includes them, a "Y" excludes them. </P
></DD
></DL
><P
CLASS="para"
>The underlying query must have the following layout:</P
><DL
CLASS="variablelist"
><DT
CLASS="term"
>Column 1</DT
><DD
CLASS="listitem"
><P
CLASS="para"
>A date; CALENDARPRINT generates a one-month calendar for each unique month/year combination in this column. The query should be ordered by this column. </P
></DD
><DT
CLASS="term"
>Column 2</DT
><DD
CLASS="listitem"
><P
CLASS="para"
>The text printed on the calendar for the date.</P
></DD
><DT
CLASS="term"
>Column 3</DT
><DD
CLASS="listitem"
><P
CLASS="para"
>If non-NULL, this column turns the text into a hyperlink. The column must contain a valid URL. </P
></DD
></DL
><P
CLASS="para"
>For example, suppose we want to print a calendar based on a to-do list stored in a database table with the following columns and data: </P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>DUE_DATE    DESCRIPTION                   HYPERLINK
---------   ----------------------------  -----------------------
20-OCT-98   Give cat pill                 http://www.sickcat.com
22-OCT-98   Research Dev2K                http://www.oracle.com
28-OCT-98   Check out new O'Reilly books  http://www.oreilly.com
30-OCT-98   Buy Costume
31-OCT-98   Trick-or-Treat!</PRE
></BLOCKQUOTE
><P
CLASS="para"
>We can use the following line to create the calendar:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>str := 'select due_date, description, hyperlink ';
str := str || 'from to_do order by due_date';
OWA_UTIL.calendarprint (str);</PRE
></BLOCKQUOTE
><P
CLASS="para"
> <A
CLASS="indexterm"
NAME="AUTOID-6659"
></A
> <A
CLASS="xref"
HREF="ch07_04.htm#BOOK-CH-7-SECT-4.1.5"
>Figure 7.7</A
> shows the output of this call.</P
><H4
CLASS="figure"
><A
CLASS="title"
NAME="BOOK-CH-7-FIG-7"
>Figure 7.7: A calendar based on a to-do list</A
></H4
><IMG
CLASS="graphic"
SRC="figs/owa.0707.gif"
ALT="Figure 7.7"></DIV
></DIV
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="BOOK-CH-7-SECT-4.2"
>7.4.2 OWA_SEC: Managing Security </A
></H3
><P
CLASS="para"
> <A
CLASS="indexterm"
NAME="AUTOID-6667"
></A
> <A
CLASS="indexterm"
NAME="AUTOID-6669"
></A
> The toolkit includes a package, OWA_SEC, that is used to query and set various security options, such as realms, domains, etc. Most of these procedures are conceptually similar to the procedures of OWA_UTIL that query the environment variables. <A
CLASS="xref"
HREF="ch07_04.htm#BOOK-CH-7-SECT-4.1.5"
>Table 7.21</A
> summarizes the various security procedures and functions. </P
><BR><TABLE
CLASS="table"
BORDER="1"
CELLPADDING="3"
><CAPTION
CLASS="table"
><A
CLASS="title"
NAME="BOOK-CH-7-TABLE-42"
>Table 7.21: Various OWA_SEC Procedures and Functions </A
></CAPTION
><THEAD
CLASS="thead"
><TR
CLASS="row"
VALIGN="TOP"
><TH
CLASS="entry"
ALIGN="LEFT"
ROWSPAN="1"
COLSPAN="1"
> <P
CLASS="para"
>Procedure/Function</P
> </TH
><TH
CLASS="entry"
ALIGN="LEFT"
ROWSPAN="1"
COLSPAN="1"
> <P
CLASS="para"
>Parameters</P
> </TH
><TH
CLASS="entry"
ALIGN="LEFT"
ROWSPAN="1"
COLSPAN="1"
> <P
CLASS="para"
>Description</P
> </TH
></TR
></THEAD
><TBODY
CLASS="tbody"
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
> <P
CLASS="para"
> <A
CLASS="indexterm"
NAME="AUTOID-6691"
></A
> GET_CLIENT_HOSTNAME</P
> </TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
> <P
CLASS="para"
>None</P
> </TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
> <P
CLASS="para"
>Returns the web server's hostname</P
> </TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
> <P
CLASS="para"
> <A
CLASS="indexterm"
NAME="AUTOID-6700"
></A
> GET_CLIENT_IP</P
> </TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
> <P
CLASS="para"
>None</P
> </TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
> <P
CLASS="para"
>Returns the TCP/IP address of the client browser that executed the procedure </P
> </TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
> <P
CLASS="para"
> <A
CLASS="indexterm"
NAME="AUTOID-6709"
></A
> GET_USER_ID</P
> </TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
> <P
CLASS="para"
>None</P
> </TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
> <P
CLASS="para"
>Returns the username of the user executing the procedure</P
> </TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
> <P
CLASS="para"
> <A
CLASS="indexterm"
NAME="AUTOID-6718"
></A
> GET_PASSWORD</P
> </TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
> <P
CLASS="para"
>None</P
> </TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
> <P
CLASS="para"
>Returns the password used to log in</P
> </TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
> <P
CLASS="para"
> <A
CLASS="indexterm"
NAME="AUTOID-6727"
></A
> SET_AUTHORIZATION</P
> </TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
> <P
CLASS="para"
>scheme IN INTEGER</P
> </TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
> <P
CLASS="para"
>Forces the PL/SQL agent to call a custom authentication function called AUTHORIZE </P
> </TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
> <P
CLASS="para"
> <A
CLASS="indexterm"
NAME="AUTOID-6736"
></A
> SET_PROTECTION_REALM</P
> </TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
> <P
CLASS="para"
>realm IN VARCHAR2</P
> </TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
> <P
CLASS="para"
> <A
CLASS="indexterm"
NAME="AUTOID-6742"
></A
> <A
CLASS="indexterm"
NAME="AUTOID-6743"
></A
> Forces the user to provide a valid login name and password for the specified security realm </P
> </TD
></TR
></TBODY
></TABLE
></DIV
></DIV
><DIV
CLASS="htmlnav"
><P
></P
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch07_03.htm#BOOK-CH-7-SECT-3.2.2"
TITLE="7.3 Maintaining State"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 7.3 Maintaining State"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="book"
HREF="index.htm"
TITLE="Oracle Web Applications: PL/SQL Developer's Introduction"
><IMG
SRC="../gifs/txthome.gif"
ALT="Oracle Web Applications: PL/SQL Developer's Introduction"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="chapter"
HREF="ch08_01.htm"
TITLE="8. Developing Applications"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 8. Developing Applications"
BORDER="0"></A
></TD
></TR
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
>7.3 Maintaining State</TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="index"
HREF="index/idx_0.htm"
TITLE="Book Index"
><IMG
SRC="../gifs/index.gif"
ALT="Book Index"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
>8. Developing Applications</TD
></TR
></TABLE
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"></DIV
><IMG SRC="../gifs/smnavbar.gif"
USEMAP="#map"
BORDER="0"
ALT="The Oracle Library Navigation">

<P><font size="-1">
<a href="../copyrght.htm#copy">Copyright (c) 2000</a> O'Reilly &amp; Associates. All rights reserved.
</font></P>

<MAP NAME="map">

<AREA SHAPE="RECT"
COORDS="0,0,35,30"
HREF="../index.htm"
ALT="Library Home">

<AREA SHAPE="RECT"
COORDS="40,0,95,30"
HREF="../prog2/index.htm"
ALT="Oracle PL/SQL Programming, 2nd. Ed.">

<AREA SHAPE="RECT"
COORDS="100,0,200,30"
HREF="../guide8i/index.htm"
ALT="Guide to Oracle 8i Features">

<AREA SHAPE="RECT"
COORDS="205,0,245,30"
HREF="../bipack/index.htm"
ALT="Oracle Built-in Packages">

<AREA SHAPE="RECT"
COORDS="250,0,320,30"
HREF="../advprog/index.htm"
ALT="Advanced PL/SQL Programming with Packages">

<AREA SHAPE="RECT"
COORDS="325,0,420,30"
HREF="index.htm"
ALT="Oracle Web Applications">

<AREA SHAPE="RECT"
COORDS="425,0,490,30"
HREF="../langpkt/index.htm"
ALT="Oracle PL/SQL Language Pocket Reference">

<AREA SHAPE="RECT"
COORDS="495,0,570,30"
HREF="../bipkt/index.htm"
ALT="Oracle PL/SQL Built-ins Pocket Reference">
</MAP>

</BODY
>
<!-- Mirrored from liso.cs.pusan.ac.kr by HTTrack Website Copier/3.x [XR&CO'2001] -->
</HTML
>
