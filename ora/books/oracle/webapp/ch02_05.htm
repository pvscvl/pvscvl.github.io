<HTML
><HEAD
><TITLE
>[Chapter 2] 2.5 Database Security Review</TITLE
><META
NAME="DC.Creator"
CONTENT="Andrew Odewahn"><META
NAME="DC.Date"
CONTENT="2000-04-29T18:35:28Z"><META
NAME="DC.Format"
CONTENT="text/html"
SCHEME="MIME"><META
NAME="DC.Identifier"
CONTENT="O'Reilly and Associates CDROM-1-56592-687-0E"><META
NAME="DC.Language"
CONTENT="en-US"><META
NAME="DC.Publisher"
CONTENT="O'Reilly &amp; Associates, Inc."><META
NAME="DC.Source"
CONTENT="1-56592-687-0E"
SCHEME="ISBN"><META
NAME="DC.Subject.Keyword"
CONTENT="Oracle Web 8i"><META
NAME="DC.Title"
CONTENT="Oracle Web Applications: PL/SQL Developer's Introduction"><META
NAME="DC.Type"
CONTENT="Text.Monograph"><META
NAME="generator"
CONTENT="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><LINK
REL="stylesheet"
TYPE="text/css"
HREF="../style/style1.css"><LINK
REV="made"
HREF="mailto:online-books@oreilly.com"
TITLE="Online Books Comments"><LINK
REL="up"
HREF="ch02_01.htm"
TITLE="2. Foundations"><LINK
REL="prev"
HREF="ch02_04.htm#BOOK-CH-2-SECT-4.1"
TITLE="2.4 Database Integration"><LINK
REL="next"
HREF="ch03_01.htm"
TITLE="3. WebDB"></HEAD
><BODY
><DIV
CLASS="htmlnav"
><H1
><IMG
SRC="gifs/smbanner.gif"
ALT="Oracle Web Applications: PL/SQL Developer's Introduction"
USEMAP="#srchmap"
BORDER="0"></H1
><MAP
NAME="srchmap"
><AREA
SHAPE="RECT"
COORDS="0,0,466,65"
HREF="index.htm"
ALT="Oracle Web Applications: PL/SQL Developer's Introduction"><AREA
SHAPE="RECT"
COORDS="467,0,514,18"
HREF="jobjects/fsearch.htm"
ALT="Search this book"></MAP
><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch02_04.htm#BOOK-CH-2-SECT-4.1"
TITLE="2.4 Database Integration"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 2.4 Database Integration"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><SPAN
CLASS="NAVTITLE"
><A
CLASS="chapter"
REL="up"
HREF="ch02_01.htm"
TITLE="2. Foundations"
>Chapter 2<BR>Foundations</A
></SPAN
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="chapter"
HREF="ch03_01.htm"
TITLE="3. WebDB"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 3. WebDB"
BORDER="0"></A
></TD
></TR
></TABLE
>&nbsp;<HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"></DIV
><DIV
CLASS="sect1"
><H2
CLASS="sect1"
><A
CLASS="title"
NAME="BOOK-CH-2-SECT-5"
>2.5 Database Security Review</A
></H2
><P
CLASS="para"
> <A
CLASS="indexterm"
NAME="ch-02-security"
></A
> <A
CLASS="indexterm"
NAME="ch-02-data_sec"
></A
> Even though security policies are developed and enforced by the DBA, you should still understand how database security issues can impact application design. For example, you should have a clear grasp of schemas and object privileges if you're going to secure your systems by allowing access only through a minimally privileged account.</P
><BLOCKQUOTE
CLASS="tip"
><P
CLASS="para"
><STRONG
>TIP:</STRONG
> Depending on the application, you might need to create an application-specific security scheme (unless you create a DAD for every account, which is a maintenance nightmare) to differentiate between users. For example, in <A
CLASS="xref"
HREF="ch08_01.htm"
>Chapter 8</A
>, we'll look at a threaded discussion list application in which we create our own username and password list to allow users to post messages.</P
></BLOCKQUOTE
><P
CLASS="para"
>This section is a security refresher, covering security relationships among database users, database objects, object privileges, and roles. If these terms are new to you, or you need to dust off a few cobwebs, read on. Otherwise, feel free to skip to the next chapter.</P
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="BOOK-CH-2-SECT-5.1"
>2.5.1 Database Users</A
></H3
><P
CLASS="para"
> <A
CLASS="indexterm"
NAME="AUTOID-1784"
></A
> <A
CLASS="indexterm"
NAME="AUTOID-1786"
></A
> A user account is the first line of defense in an Oracle database. Similar to an account on a Unix or NT system, each user account has an associated username and password. A user must log in to a particular account by providing the correct password before running scripts, inputting data, executing PL/SQL programs, or performing any other meaningful activity.</P
><P
CLASS="para"
>The term <EM
CLASS="emphasis"
>schema</EM
> is often used synonymously with "user" or "account." Although the concepts are closely related, schema is slightly more specific and refers not only to the account itself, but also to the collection of objects (tables, indexes, packages, etc.) owned by the account. </P
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="BOOK-CH-2-SECT-5.2"
>2.5.2 Database Objects</A
></H3
><P
CLASS="para"
> <A
CLASS="indexterm"
NAME="AUTOID-1794"
></A
><A
CLASS="indexterm"
NAME="AUTOID-1796"
></A
> <A
CLASS="indexterm"
NAME="AUTOID-1799"
></A
><A
CLASS="indexterm"
NAME="AUTOID-1801"
></A
> The word <EM
CLASS="emphasis"
>object</EM
> is one of the most overused in the computer world. Languages like Java and C++ create objects with wonderful properties like polymorphism, inheritance, and a slew of other four-syllable words. Object-relational databases like Oracle8<EM
CLASS="emphasis"
>i</EM
> give us pseudo-objects that mimic the important properties of the objects in Java. Finally, life itself gives us everyday objects like buses, rutabagas, and human resources managers.</P
><P
CLASS="para"
>In Oracle, a <EM
CLASS="emphasis"
>database object</EM
> is a general term for anything created and stored in an Oracle database, including tables, indexes, views, synonyms, and stored procedures. Each object is owned by the account in which it was created. To follow our Unix example, database objects are sort of like files; they belong to the user that created them and to no one else.</P
><P
CLASS="para"
>Each object has a unique name. A table may be named emp, a procedure may be named give_raise, and an index may be named emp_pk1. Once a name is given to an object, no other object within the schema&nbsp;-- even if it is a different kind of object&nbsp;-- can use the same name. Attempting to create an object with an existing name results in the error "ORA-00955: name is already used by an existing object."</P
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="BOOK-CH-2-SECT-5.3"
>2.5.3 Privileges</A
></H3
><P
CLASS="para"
> <A
CLASS="indexterm"
NAME="AUTOID-1812"
></A
> <A
CLASS="indexterm"
NAME="AUTOID-1815"
></A
> <A
CLASS="indexterm"
NAME="AUTOID-1817"
></A
> Just as every Unix account shouldn't have system administrator authority, every Oracle account shouldn't have DBA power. For example, Bob in accounting shouldn't be able to issue the DROP TABLE command just to see what will happen. Privileges allow us to control how much power a particular account can have. </P
><P
CLASS="para"
>There are two types of privileges: system and object. As a rule of thumb, <EM
CLASS="emphasis"
>system privileges</EM
> let an account execute SQL Data Definition Language (DDL) commands, while <EM
CLASS="emphasis"
>object privileges</EM
> let an account execute SQL Data Manipulation Language (DML) commands. </P
><P
CLASS="para"
>A privilege is granted to or revoked from a specific user account with the SQL commands GRANT and REVOKE. For example, the following two commands give the scott account the right to create a table and select from the emp table in the HR schema:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>GRANT CREATE TABLE TO scott;
GRANT SELECT ON hr.emp TO scott;</PRE
></BLOCKQUOTE
><P
CLASS="para"
>The next two commands show how to remove a privilege using the REVOKE statement:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>REVOKE CREATE TABLE FROM scott;
REVOKE SELECT ON hr.emp FROM scott;</PRE
></BLOCKQUOTE
><DIV
CLASS="sect3"
><H4
CLASS="sect3"
><A
CLASS="title"
NAME="BOOK-CH-2-SECT-5.3.1"
>2.5.3.1 System privileges</A
></H4
><P
CLASS="para"
> <A
CLASS="indexterm"
NAME="AUTOID-1830"
></A
> <A
CLASS="indexterm"
NAME="AUTOID-1832"
></A
> <EM
CLASS="emphasis"
>System privileges</EM
> give an account the right to perform specific actions. For example, an account must be given permission, usually by the DBA, to create, alter, drop, or execute various database objects. An account can also be given permission to perform these actions in other schemas by including the ANY option.</P
><P
CLASS="para"
>There are a number of system privileges,[<A
CLASS="footnote"
HREF="#BOOK-CH-2-FOOTNOTE-3"
>3</A
>] including:</P
><BLOCKQUOTE
CLASS="footnote"
><DIV
CLASS="footnote"
><P
CLASS="para"
><A
CLASS="footnote"
NAME="BOOK-CH-2-FOOTNOTE-3"
>[3]</A
> The SYSTEM_PRIVILEGE_MAP data dictionary table lists all the system privileges.</P
></DIV
></BLOCKQUOTE
><TABLE
CLASS="simplelist"
BORDER="0"
><TR
><TD
CLASS="member"
>CREATE TABLE</TD
></TR
><TR
><TD
CLASS="member"
>CREATE PROCEDURE</TD
></TR
><TR
><TD
CLASS="member"
>ALTER USER</TD
></TR
><TR
><TD
CLASS="member"
>EXECUTE ANY PROCEDURE</TD
></TR
><TR
><TD
CLASS="member"
>GRANT ANY PRIVILEGE</TD
></TR
></TABLE
><P
CLASS="para"
>The most minimal system privilege is the CREATE SESSION privilege, which allows the account only to log in to the database. Unless granted other privileges, these accounts cannot do much damage. For this reason, they are often used as gateways to more privileged accounts, which selectively grant the account access to a limited number of objects.</P
></DIV
><DIV
CLASS="sect3"
><H4
CLASS="sect3"
><A
CLASS="title"
NAME="BOOK-CH-2-SECT-5.3.2"
>2.5.3.2 Object privileges</A
></H4
><P
CLASS="para"
> <A
CLASS="indexterm"
NAME="AUTOID-1849"
></A
> <A
CLASS="indexterm"
NAME="AUTOID-1851"
></A
> <EM
CLASS="emphasis"
>Object privileges</EM
> allow an account to make its objects available to other accounts. Each type of object has its own set of applicable privileges. After a privilege on an object is granted to another account, that account can perform a variety of operations that fall within the limits of the granted privileges. In WebDB, some of the most commonly used privileges (by object) include:</P
><UL
CLASS="itemizedlist"
><LI
CLASS="listitem"
><P
CLASS="para"
>Tables and views</P
><UL
CLASS="itemizedlist"
><LI
CLASS="listitem"
><P
CLASS="para"
>SELECT: Select rows from the table.</P
></LI
><LI
CLASS="listitem"
><P
CLASS="para"
>INSERT: Insert rows into the table.</P
></LI
><LI
CLASS="listitem"
><P
CLASS="para"
>UPDATE: Update rows in the table.</P
></LI
><LI
CLASS="listitem"
><P
CLASS="para"
>DELETE: Delete rows from the table.</P
></LI
></UL
></LI
><LI
CLASS="listitem"
><P
CLASS="para"
>Procedures, functions, and packages</P
><UL
CLASS="itemizedlist"
><LI
CLASS="listitem"
><P
CLASS="para"
>EXECUTE: Execute a stored program.</P
></LI
></UL
></LI
><LI
CLASS="listitem"
><P
CLASS="para"
>Sequences</P
><UL
CLASS="itemizedlist"
><LI
CLASS="listitem"
><P
CLASS="para"
>SELECT: Select the sequence value.</P
></LI
></UL
></LI
></UL
><BLOCKQUOTE
CLASS="tip"
><P
CLASS="para"
><STRONG
>TIP:</STRONG
> A stored procedure or function executes with the privileges of its owner, not those of the account that is executing it, unless overridden with the Oracle8<EM
CLASS="emphasis"
>i</EM
> "invoker's rights" option.</P
></BLOCKQUOTE
><P
CLASS="para"
>An account may access an object once it has been granted the necessary privilege. If it tries to perform an action for which it does not have the necessary privilege, the RDBMS generates an error. The account references the object using its <EM
CLASS="emphasis"
>fully qualified object name</EM
>, which is simply the object's name prepended with its owning schema. The two names are separated with a period. For example, suppose the accounts bob, sue, and cato each own a table named emp. Assuming we have the right privileges, we can use the fully qualified object name in the following SQL statement to get an aggregate list: </P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>SELECT * FROM bob.emp
UNION
SELECT * FROM sue.emp
UNION
SELECT * FROM cato.emp;</PRE
></BLOCKQUOTE
><P
CLASS="para"
>For example, suppose Alice in accounting wants to dump some of her work on Bob, who was recently demoted to clerk for destroying a production database. She can use the SQL GRANT command to give Bob's account (bob) privileges on tables she owns so that Bob can run various scripts:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>GRANT SELECT ON employees TO bob;
GRANT INSERT ON employees TO bob;</PRE
></BLOCKQUOTE
><P
CLASS="para"
>Once Bob has the proper privilege, he can execute SELECT commands on Alice's table by using the table's fully qualified name:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>SELECT * FROM alice.employees</PRE
></BLOCKQUOTE
><P
CLASS="para"
>Notice that Alice has withheld the DELETE privilege; Bob will get an error if he tries the DELETE statement.</P
><DIV
CLASS="sidebar"
><H4
CLASS="sidebar"
><A
CLASS="title"
NAME="BOOK-SIDEBAR-1"
>Using Synonyms to Achieve Location Transparency</A
></H4
><P
CLASS="para"
> <A
CLASS="indexterm"
NAME="AUTOID-1891"
></A
> <A
CLASS="indexterm"
NAME="AUTOID-1894"
></A
> <A
CLASS="indexterm"
NAME="AUTOID-1896"
></A
> Occasionally, an object must be moved from one schema to another to accommodate new circumstances. For example, what happens if Alice is promoted and wants Cato (the new upstart in accounting) to own and maintain the employees table? Bob&nbsp;-- and anyone else using the table&nbsp;-- must update his scripts to reflect the table's new location. For this reason, it's a bad idea to embed an object's owner directly into a SQL or a PL/SQL statement.</P
><P
CLASS="para"
>Synonyms eliminate this problem. A <EM
CLASS="emphasis"
>synonym</EM
> is simply an alias, or pointer, for another object. Used in place of a fully qualified object name, the synonym allows us to design systems that achieve <EM
CLASS="emphasis"
>location transparency</EM
>. This is just a fancy way of saying that our programs do not depend on a particular account's owning a particular object. If an object is moved to a new owner, we can simply change the synonym in one place and everything will continue to work.</P
><P
CLASS="para"
>In the previous example, Bob could achieve location transparency by creating a synonym for the employees table:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>CREATE SYNONYM employees_syn FOR
   alice.employees</PRE
></BLOCKQUOTE
><P
CLASS="para"
>He could then use the synonym name instead of making an explicit reference to the owning schema:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>SELECT * FROM employees_syn;</PRE
></BLOCKQUOTE
><P
CLASS="para"
>When Alice moves the table to Cato, Bob can simply change the synonym to reflect the new location.</P
></DIV
></DIV
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="BOOK-CH-2-SECT-5.4"
>2.5.4 Roles</A
></H3
><P
CLASS="para"
> <A
CLASS="indexterm"
NAME="AUTOID-1909"
></A
> It would be a strange site indeed that let accountants control critical database objects. Instead, these objects are usually owned by a highly privileged account that is accessible to only the database administrator and a few trusted developers. The DBA creates less privileged accounts for average users and selectively grants them privileges based on their needs.</P
><P
CLASS="para"
>For example, an account named HR might own all the objects for the company's human resource management system. The DBA might create a view of the employees table and grant Bob's or Alice's account permission to query it. She might also create a separate account for data entry clerks with INSERT privileges on a few important tables. Finally, she might create an account for a web application that displays employee information stored in database snapshots. Ideally, each account has the minimum privileges it needs to fulfill its goal.</P
><P
CLASS="para"
>Managing these privileges by hand is a daunting task. Even a small company can have dozens of applications, hundreds of tables, and zillions of users. It is simply impossible for the DBA to manually grant the correct privileges to every user in a way that is convenient and safe. Remember, lurking in the back of every DBA's mind is the secret (and sometimes not so secret) fear that his or her users and developers are idiots who will drop critical tables just for kicks. It is crucial for both security and the DBA's sanity that each user have access to only what he or she needs.</P
><P
CLASS="para"
>This is where the concept of a database role comes to the rescue. A <I
CLASS="firstterm"
>role</I
> is a collection of privileges grouped under a single name. Instead of granting privileges to individual users, the DBA grants them to a role. This role, in turn, is granted to the users that need the corresponding privileges. The DBA can add or revoke privileges from a role at any time, and these changes automatically flow to the users assigned to the role.</P
><P
CLASS="para"
>For example, the DBA might create a role called ACCOUNTANT and grant it selected privileges on tables and views owned by the HR account. The role reduces the maintenance on Alice's, Bob's, Cato's, and Xena's accounts to a single grant. <A
CLASS="xref"
HREF="ch02_05.htm#BOOK-CH-2-SECT-5.5"
>Figure 2.3</A
> shows a typical scenario in which roles are used to create access rights for various classes of users, such as pay clerks, managers, and receivables clerks.</P
><H4
CLASS="figure"
><A
CLASS="title"
NAME="BOOK-CH-2-FIG-3"
>Figure 2.3: A common use for roles</A
></H4
><IMG
CLASS="graphic"
SRC="figs/owa.0203.gif"
ALT="Figure 2.3"><BLOCKQUOTE
CLASS="warning"
><P
CLASS="para"
><STRONG
>WARNING:</STRONG
> When writing stored PL/SQL program units, such as packages, note that the compiler ignores the privileges granted through roles. To work around this problem you must either create the program in the account that owns the object or explicitly grant the necessary privilege to the account that owns the stored procedure. However, users can still execute procedures granted through roles.</P
></BLOCKQUOTE
><P
CLASS="para"
>A role is a database object just like any other. Assuming you have the CREATE ROLE privilege, you create a role with the following syntax:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>CREATE ROLE <I
CLASS="replaceable"
>role_name</I
>;</PRE
></BLOCKQUOTE
><P
CLASS="para"
>You then grant privileges on various objects to the new role, just as you would to a normal user. For example:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>GRANT SELECT ON customers TO accts_pay_role;
GRANT SELECT ON cust_orders TO accts_pay_role;</PRE
></BLOCKQUOTE
><P
CLASS="para"
>Finally, you grant the role to individual users, treating the role as though it were a new privilege. For example:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>GRANT ACCTS_PAY_ROLE TO bob;
GRANT ACCTS_PAY_ROLE TO cato;</PRE
></BLOCKQUOTE
><P
CLASS="para"
>Revoking a privilege from the role automatically revokes it from all the users assigned to the role.</P
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="BOOK-CH-2-SECT-5.5"
>2.5.5 Additional Security Precautions</A
></H3
><P
CLASS="para"
>In addition to database security features, there are three other security precautions worth noting, although we won't cover them in any detail. These include:</P
><DL
CLASS="variablelist"
><DT
CLASS="term"
>Secure Sockets Layer (SSL)</DT
><A
CLASS="indexterm"
NAME="AUTOID-1936"
></A
><A
CLASS="indexterm"
NAME="AUTOID-1938"
></A
><DD
CLASS="listitem"
><P
CLASS="para"
> <A
CLASS="indexterm"
NAME="AUTOID-1942"
></A
> <A
CLASS="indexterm"
NAME="AUTOID-1944"
></A
> <A
CLASS="indexterm"
NAME="AUTOID-1946"
></A
> A standard for securing a web session by encrypting the traffic between a browser and a web server. The method relies on a <I
CLASS="firstterm"
>digital certificate,</I
> a special file assigned to a site by a trusted source called a <I
CLASS="firstterm"
>certification authority</I
> (CA). The CA generates the certificate and sends it to the web site. Browsers wishing to connect to the site must first download and accept the certificate, which is used in an encryption scheme to secure the subsequent traffic.</P
></DD
><DT
CLASS="term"
>Firewall</DT
><A
CLASS="indexterm"
NAME="AUTOID-1952"
></A
><DD
CLASS="listitem"
><P
CLASS="para"
>A machine placed between two networks that controls what traffic can cross the boundary. Companies almost always have a firewall between their internal network and, for instance, the Internet. The firewall can be configured to block traffic originating from certain areas, let through certain types of traffic (for instance, HTTP) and reject others (Telnet traffic), and force users to supply a username and password before they can go through the firewall.</P
></DD
><DT
CLASS="term"
>Advanced Networking Option (ANO)</DT
><A
CLASS="indexterm"
NAME="AUTOID-1958"
></A
><A
CLASS="indexterm"
NAME="AUTOID-1960"
></A
><DD
CLASS="listitem"
><P
CLASS="para"
> <A
CLASS="indexterm"
NAME="AUTOID-1964"
></A
> <A
CLASS="indexterm"
NAME="AUTOID-1966"
></A
> A security server used to encrypt SQL*Net and Net8 traffic. This is useful in a web setting because (depending on the configuration of the firewall), users can establish a SQL*Net or Net8 connection over the Internet, allowing them to use tools like SQL*Plus. ANO secures the conversation.</P
></DD
></DL
><P
CLASS="para"
>Web security (and computer security in general) is a complex and broad subject that encompasses many different areas handled by different individuals. The DBA sets database security policies, system administrators check on operating system security, application developers build security features into their applications, and the network administrator designs hardware and software configurations to secure the network. Even the security guard at the front door has an important role in maintaining the physical security of your site.</P
><BLOCKQUOTE
CLASS="tip"
><P
CLASS="para"
><STRONG
>TIP:</STRONG
> No matter how you secure your system, you are still vulnerable to an attack. One of the simplest and most effective hacking techniques, <I
CLASS="filename"
>social engineering</I
>, simply tricks people into revealing otherwise secure information through deception. For example, it's much easier to call an internal help desk and sweet-talk someone out of a password than to penetrate a secured system.</P
></BLOCKQUOTE
><P
CLASS="para"
>As an application developer, your main security duty is to make sure that your applications do as little as possible to compromise the system (for example, writing a web system that reveals a password list). In general, though, you'll have very little direct involvement in the other areas. While you'll certainly work with the DBA to gain privileges to various objects, you will probably not work with the network administrator (other than to listen to complaints about how the administrator doesn't have enough bandwidth for your application). </P
><A
CLASS="indexterm"
NAME="AUTOID-1973"
></A
><A
CLASS="indexterm"
NAME="AUTOID-1974"
></A
></DIV
></DIV
><DIV
CLASS="htmlnav"
><P
></P
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch02_04.htm#BOOK-CH-2-SECT-4.1"
TITLE="2.4 Database Integration"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 2.4 Database Integration"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="book"
HREF="index.htm"
TITLE="Oracle Web Applications: PL/SQL Developer's Introduction"
><IMG
SRC="../gifs/txthome.gif"
ALT="Oracle Web Applications: PL/SQL Developer's Introduction"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="chapter"
HREF="ch03_01.htm"
TITLE="3. WebDB"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 3. WebDB"
BORDER="0"></A
></TD
></TR
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
>2.4 Database Integration</TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="index"
HREF="index/idx_0.htm"
TITLE="Book Index"
><IMG
SRC="../gifs/index.gif"
ALT="Book Index"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
>3. WebDB</TD
></TR
></TABLE
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"></DIV
><IMG SRC="../gifs/smnavbar.gif"
USEMAP="#map"
BORDER="0"
ALT="The Oracle Library Navigation">

<P><font size="-1">
<a href="../copyrght.htm#copy">Copyright (c) 2000</a> O'Reilly &amp; Associates. All rights reserved.
</font></P>

<MAP NAME="map">

<AREA SHAPE="RECT"
COORDS="0,0,35,30"
HREF="../index.htm"
ALT="Library Home">

<AREA SHAPE="RECT"
COORDS="40,0,95,30"
HREF="../prog2/index.htm"
ALT="Oracle PL/SQL Programming, 2nd. Ed.">

<AREA SHAPE="RECT"
COORDS="100,0,200,30"
HREF="../guide8i/index.htm"
ALT="Guide to Oracle 8i Features">

<AREA SHAPE="RECT"
COORDS="205,0,245,30"
HREF="../bipack/index.htm"
ALT="Oracle Built-in Packages">

<AREA SHAPE="RECT"
COORDS="250,0,320,30"
HREF="../advprog/index.htm"
ALT="Advanced PL/SQL Programming with Packages">

<AREA SHAPE="RECT"
COORDS="325,0,420,30"
HREF="index.htm"
ALT="Oracle Web Applications">

<AREA SHAPE="RECT"
COORDS="425,0,490,30"
HREF="../langpkt/index.htm"
ALT="Oracle PL/SQL Language Pocket Reference">

<AREA SHAPE="RECT"
COORDS="495,0,570,30"
HREF="../bipkt/index.htm"
ALT="Oracle PL/SQL Built-ins Pocket Reference">
</MAP>

</BODY
>
<!-- Mirrored from liso.cs.pusan.ac.kr by HTTrack Website Copier/3.x [XR&CO'2001] -->
</HTML
>
