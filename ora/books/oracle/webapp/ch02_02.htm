<HTML
><HEAD
><TITLE
>[Chapter 2] 2.2 Server-to-Client Communication</TITLE
><META
NAME="DC.Creator"
CONTENT="Andrew Odewahn"><META
NAME="DC.Date"
CONTENT="2000-04-29T18:35:08Z"><META
NAME="DC.Format"
CONTENT="text/html"
SCHEME="MIME"><META
NAME="DC.Identifier"
CONTENT="O'Reilly and Associates CDROM-1-56592-687-0E"><META
NAME="DC.Language"
CONTENT="en-US"><META
NAME="DC.Publisher"
CONTENT="O'Reilly &amp; Associates, Inc."><META
NAME="DC.Source"
CONTENT="1-56592-687-0E"
SCHEME="ISBN"><META
NAME="DC.Subject.Keyword"
CONTENT="Oracle Web 8i"><META
NAME="DC.Title"
CONTENT="Oracle Web Applications: PL/SQL Developer's Introduction"><META
NAME="DC.Type"
CONTENT="Text.Monograph"><META
NAME="generator"
CONTENT="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><LINK
REL="stylesheet"
TYPE="text/css"
HREF="../style/style1.css"><LINK
REV="made"
HREF="mailto:online-books@oreilly.com"
TITLE="Online Books Comments"><LINK
REL="up"
HREF="ch02_01.htm"
TITLE="2. Foundations"><LINK
REL="prev"
HREF="ch02_01.htm"
TITLE="2.1 Resources"><LINK
REL="next"
HREF="ch02_03.htm#BOOK-CH-2-SECT-3.1"
TITLE="2.3 Content Delivery Model"></HEAD
><BODY
><DIV
CLASS="htmlnav"
><H1
><IMG
SRC="gifs/smbanner.gif"
ALT="Oracle Web Applications: PL/SQL Developer's Introduction"
USEMAP="#srchmap"
BORDER="0"></H1
><MAP
NAME="srchmap"
><AREA
SHAPE="RECT"
COORDS="0,0,466,65"
HREF="index.htm"
ALT="Oracle Web Applications: PL/SQL Developer's Introduction"><AREA
SHAPE="RECT"
COORDS="467,0,514,18"
HREF="jobjects/fsearch.htm"
ALT="Search this book"></MAP
><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch02_01.htm"
TITLE="2.1 Resources"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 2.1 Resources"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><SPAN
CLASS="NAVTITLE"
><A
CLASS="chapter"
REL="up"
HREF="ch02_01.htm"
TITLE="2. Foundations"
>Chapter 2<BR>Foundations</A
></SPAN
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch02_03.htm#BOOK-CH-2-SECT-3.1"
TITLE="2.3 Content Delivery Model"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 2.3 Content Delivery Model"
BORDER="0"></A
></TD
></TR
></TABLE
>&nbsp;<HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"></DIV
><DIV
CLASS="sect1"
><H2
CLASS="sect1"
><A
CLASS="title"
NAME="BOOK-CH-2-SECT-2"
>2.2 Server-to-Client Communication</A
></H2
><P
CLASS="para"
> <A
CLASS="indexterm"
NAME="AUTOID-1292"
></A
> The Internet (or an intranet) is a network that links different computers together. Before we can start writing web applications, we must understand how the output from these systems actually gets from the server to the browser, which means that we have to learn a little about how the Internet and the Web work. </P
><P
CLASS="para"
>OAS and WebDB use standard Internet conventions and protocols to send resources to a client. The most important parts of this interchange are:</P
><UL
CLASS="itemizedlist"
><LI
CLASS="listitem"
><P
CLASS="para"
>A TCP/IP network to connect the server to the client</P
></LI
><LI
CLASS="listitem"
><P
CLASS="para"
>A software communication port to serve as a collection point for incoming requests</P
></LI
><LI
CLASS="listitem"
><P
CLASS="para"
>A transfer protocol called HTTP to govern how server and client communicate</P
></LI
><LI
CLASS="listitem"
><P
CLASS="para"
>A client program called a web browser to allow users to request and receive resources from the OAS or WebDB server</P
></LI
><LI
CLASS="listitem"
><P
CLASS="para"
>A uniform resource locator (URL) to allow the browser to find a particular resource</P
></LI
><LI
CLASS="listitem"
><P
CLASS="para"
>A MIME type to tell the browser what to do with resources once received from the OAS or WebDB server</P
></LI
></UL
><P
CLASS="para"
>The following sections briefly describe each of these parts.</P
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="BOOK-CH-2-SECT-2.1"
>2.2.1 The TCP/IP Network</A
></H3
><P
CLASS="para"
> <A
CLASS="indexterm"
NAME="AUTOID-1312"
></A
> <A
CLASS="indexterm"
NAME="AUTOID-1315"
></A
> <A
CLASS="indexterm"
NAME="AUTOID-1318"
></A
> <A
CLASS="indexterm"
NAME="AUTOID-1321"
></A
> <A
CLASS="indexterm"
NAME="AUTOID-1323"
></A
> <A
CLASS="indexterm"
NAME="AUTOID-1326"
></A
> <A
CLASS="indexterm"
NAME="AUTOID-1328"
></A
> <A
CLASS="indexterm"
NAME="AUTOID-1330"
></A
> Browsers connect to an OAS or WebDB server using the TCP/IP networking protocol. Although there are a number of different types of networking protocols, such as DECNet or IPX, web systems only work with TCP/IP. Fortunately, more and more operating systems have this functionality built in, including Unix, Windows 95, Windows 98, Windows NT, OS/2, and Linux.</P
><P
CLASS="para"
>Every machine on a TCP/IP network is identified by a four-part IP address. Each number in the address can range from 0 to 255, and the four numbers are separated by periods. For example, 253.4.99.17 might be the address for the machine running the human resources department's web server. Every machine on a TCP/IP network has a unique IP address.</P
><P
CLASS="para"
> <A
CLASS="indexterm"
NAME="AUTOID-1334"
></A
> <A
CLASS="indexterm"
NAME="AUTOID-1336"
></A
> Most TCP/IP networks have a special class of servers called Domain Name Servers (DNSs). Their job is to translate IP addresses into meaningful hostnames that are easy to remember. For example, assigning the address 253.4.99.17 to the name "HR" in the DNS allows users to refer to the human resources server as "HR," rather than its actual IP address.</P
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="BOOK-CH-2-SECT-2.2"
>2.2.2 The Communication Port</A
></H3
><P
CLASS="para"
> <A
CLASS="indexterm"
NAME="AUTOID-1341"
></A
> <A
CLASS="indexterm"
NAME="AUTOID-1343"
></A
> A <I
CLASS="firstterm"
>software p</I
><EM
CLASS="emphasis"
>ort</EM
> (as opposed to a physical hardware port) is a common reference point on the server that is used to exchange messages. Each TCP/IP-based networking application, like OAS or WebDB, is assigned a specific port that it monitors for incoming requests. Client programs that need to communicate with the server connect to the server's assigned port. Once connected, the two systems exchange information according to a standard protocol (HTTP, FTP, etc.). Each port is identified by a port number, its ordinal position in the range of all ports. On Unix systems, for example, there are 64,536 different ports.</P
><BLOCKQUOTE
CLASS="tip"
><P
CLASS="para"
><STRONG
>TIP:</STRONG
>  <A
CLASS="indexterm"
NAME="AUTOID-1350"
></A
> 	As a security precaution, a user with root privilege must start programs that use the first 1024 ports. Less privileged users can use ports higher than 1024.</P
></BLOCKQUOTE
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="BOOK-CH-2-SECT-2.3"
>2.2.3 The HyperText Transfer Protocol (HTTP)</A
></H3
><P
CLASS="para"
> <A
CLASS="indexterm"
NAME="AUTOID-1355"
></A
>  A transfer protocol is a convention that governs how systems exchange information. Take, for example, a phone conversation. When you call someone, you (hopefully!) don't start blurting out whatever comes to mind as soon as they pick up the receiver. Instead, your conversation follows a set pattern that civilized society has agreed upon to make communication more efficient:</P
><OL
CLASS="orderedlist"
><LI
CLASS="listitem"
><P
CLASS="para"
>I initiate a conversation by calling you.</P
></LI
><LI
CLASS="listitem"
><P
CLASS="para"
>You say "Hello."</P
></LI
><LI
CLASS="listitem"
><P
CLASS="para"
>I identify myself.</P
></LI
><LI
CLASS="listitem"
><P
CLASS="para"
>We exchange a message.</P
></LI
><LI
CLASS="listitem"
><P
CLASS="para"
>We say "Goodbye."</P
></LI
><LI
CLASS="listitem"
><P
CLASS="para"
>We hang up.</P
></LI
></OL
><P
CLASS="para"
>This sort of formalized exchange is the idea behind a protocol: it lets the sender and receiver know the order in which communications will occur. While computers use much more formalized systems than humans, the idea is basically the same.[<A
CLASS="footnote"
HREF="#BOOK-CH-2-FOOTNOTE-1"
>1</A
>] OAS and WebDB follow a standard Internet protocol called HyperText Transfer Protocol (HTTP) to communicate with client web browsers. OAS supports HTTP 1.0 and HTTP 1.1, while WebDB supports only HTTP 1.0. </P
><BLOCKQUOTE
CLASS="footnote"
><DIV
CLASS="footnote"
><P
CLASS="para"
><A
CLASS="footnote"
NAME="BOOK-CH-2-FOOTNOTE-1"
>[1]</A
> Sometimes it's almost identical; SMTP communications begin when the client says "HELO" to the server!</P
></DIV
></BLOCKQUOTE
><P
CLASS="para"
>By convention, several special TCP ports are associated with specific protocols. For example, port 21 is usually used for FTP, port 25 is used for SMTP (a common email protocol), and port 80 is used for HTTP.</P
><P
CLASS="para"
> <A
CLASS="indexterm"
NAME="AUTOID-1376"
></A
> <A
CLASS="indexterm"
NAME="AUTOID-1378"
></A
> <A
CLASS="indexterm"
NAME="AUTOID-1380"
></A
> Protocols vary in complexity. Unlike client/server protocols, such as SQL*Net or Net8, HTTP is relatively simple because it is <EM
CLASS="emphasis"
>stateless</EM
>, meaning that the client and server terminate their connection once their conversation is complete. Unlike client/server systems, which maintain state by keeping open a continuous connection to the database, HTTP systems are connected only in bursts and not for the duration of the session.</P
><P
CLASS="para"
>Because the client and server forget everything that happened during previous connections, developers must take explicit steps to maintain information, or <EM
CLASS="emphasis"
>state</EM
>, from page to page. In other words, there are no global variables in a web application; they are all local. Anything you want to retain from screen to screen has to be stored and retrieved in every page. For example, if you're building a web-based threaded discussion list that begins with a login screen, you must manually program it to remember the login information. We'll discuss strategies for doing this in <A
CLASS="xref"
HREF="ch07_01.htm"
>Chapter 7, <CITE
CLASS="chapter"
>The PL/SQL Toolkit</CITE
></A
>, and <A
CLASS="xref"
HREF="ch08_01.htm"
>Chapter 8, <CITE
CLASS="chapter"
>Developing Applications</CITE
></A
>.</P
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="BOOK-CH-2-SECT-2.4"
>2.2.4 The Web Browser</A
></H3
><P
CLASS="para"
> <A
CLASS="indexterm"
NAME="AUTOID-1390"
></A
> <A
CLASS="indexterm"
NAME="AUTOID-1393"
></A
> <A
CLASS="indexterm"
NAME="AUTOID-1395"
></A
> <A
CLASS="indexterm"
NAME="AUTOID-1398"
></A
> <A
CLASS="indexterm"
NAME="AUTOID-1400"
></A
> Users request information from a WebDB or OAS server using a web browser such as Microsoft Internet Explorer or Netscape Communicator. The browser is responsible for presenting web content on these servers to the user. In the early days of the Web, a browser could handle only basic HTML and text documents, but the explosion of web content has turned the browser into an information kiosk, multimedia center, and minicomputer all rolled into one. For example, most modern browsers can display an HTML document filled with pictures, sounds, and even movies. With the advent of Java, the browser has become a <EM
CLASS="emphasis"
>virtual machine</EM
>, a computer within a computer capable of running Java programs.</P
><P
CLASS="para"
>There are a number of browsers on the market, and each one behaves slightly differently. For example, the appearance of any given HTML document often varies from browser to browser. To differentiate their product from the competition, browser vendors add features that work only with their browser. You should test your content on a number of different browsers, even if your company has adopted a standard, since many users refuse to give up browsers to which they are fanatically attached. Additionally, more and more people are dialing in from home, and they will often have older (or, depending on your company, newer) software than your company standard.</P
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="BOOK-CH-2-SECT-2.5"
>2.2.5 The Uniform Resource Locator</A
></H3
><P
CLASS="para"
> <A
CLASS="indexterm"
NAME="AUTOID-1407"
></A
> <A
CLASS="indexterm"
NAME="AUTOID-1409"
></A
> Uniform Resource Locators (URLs) are used to request a resource from an OAS or WebDB server independently of the operating system used on the machine. A URL abstracts the machine name, resource path, and resource name into a string with the following syntax:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
><I
CLASS="replaceable"
>protocol:</I
>//<I
CLASS="replaceable"
>server:port</I
>/<I
CLASS="replaceable"
>path</I
>/<I
CLASS="replaceable"
>resource?query_string</I
></PRE
></BLOCKQUOTE
><DL
CLASS="variablelist"
><DT
CLASS="term"
>protocol</DT
><DD
CLASS="listitem"
><P
CLASS="para"
> <A
CLASS="indexterm"
NAME="AUTOID-1422"
></A
> Specifies the network protocol that the browser and the server use to communicate. The most common values are HTTP and FTP.</P
></DD
><DT
CLASS="term"
>server</DT
><DD
CLASS="listitem"
><P
CLASS="para"
> <A
CLASS="indexterm"
NAME="AUTOID-1428"
></A
> Identifies the name of the machine that hosts the resource. Although you can use the machine's IP address, it's better to use the name defined in the DNS since it helps isolate the URL from the network reconfiguration.</P
></DD
><DT
CLASS="term"
>port</DT
><DD
CLASS="listitem"
><P
CLASS="para"
> <A
CLASS="indexterm"
NAME="AUTOID-1434"
></A
> Specifies the TCP port used by the OAS or WebDB server. If the port is omitted, then port 80 is used by default.</P
></DD
><DT
CLASS="term"
>path</DT
><DD
CLASS="listitem"
><P
CLASS="para"
> <A
CLASS="indexterm"
NAME="AUTOID-1440"
></A
> <A
CLASS="indexterm"
NAME="AUTOID-1442"
></A
> <A
CLASS="indexterm"
NAME="AUTOID-1445"
></A
> Specifies the virtual directory or schema containing the resource. The path usually maps to either a virtual directory mapping on the web server or, in Oracle web servers, to a Database Access Descriptor (DAD), a logical name used to map a procedure call in a URL to the database schema in which it resides.</P
></DD
><DT
CLASS="term"
>resource name</DT
><DD
CLASS="listitem"
><P
CLASS="para"
> <A
CLASS="indexterm"
NAME="AUTOID-1451"
></A
> Typically specifies the actual name of the file to return. If the name is omitted, the listener returns a default file, if one is available. The name of the default file varies: <I
CLASS="filename"
>index.html</I
> is used on many Unix systems, and <I
CLASS="filename"
>default.htm</I
> is usually used on Windows NT systems. On Oracle web servers, the resource can also correspond to a PL/SQL procedure.</P
></DD
><DT
CLASS="term"
>query string (optional)</DT
><DD
CLASS="listitem"
><P
CLASS="para"
> <A
CLASS="indexterm"
NAME="AUTOID-1459"
></A
> Optionally passes parameters to dynamic resources. The string begins with a question mark (?) and is followed by ampersand (&amp;)-delimited sets of name/value pairs. Each name/value pair consists of a parameter name followed by an equals sign (=) and a value for the parameter. The parameter name must match a name in the procedure's formal parameter list. The parameter value must be encoded by converting its nonalphanumeric characters to their hexadecimal equivalents; converted characters are preceded with a percent sign (%). The exceptions to this rule are the underscore character, which is left alone, and the space, which can be converted to either a plus (+) sign or %20. For example, "w/in second(s)" converts to "w%2Fin+second%28s%29".</P
></DD
></DL
><P
CLASS="para"
>You can omit the server, port, and path sections from hyperlinks (links the user clicks to go to other locations) inside other documents, which allows you to create relative, rather than absolute, URLs. Relative URLs are like relative directories in a filesystem: they let you describe the location of one resource in relation to the current resource. Most resources don't stand on their own; they are part of a larger hierarchical site that usually begins with a "home" and branches out from there. There are practical as well as aesthetic reasons to define a site's structure using relative rather than absolute URLs. For example, if a site is moved to a new host, the server section on all the links in the site must be changed to the new hostname. This is very tedious work. If the site is defined using relative URLs, however, the relative structure of its pages is unaffected by the move.</P
><P
CLASS="para"
>You create a relative URL by omitting the server, port, and path section from the URLs for hyperlinks and for <CODE
CLASS="literal"
>ACTION</CODE
> attributes in HTML forms. The omitted information is filled in with the server and path information for the current resource, just as the file path information in an operating system command can be assumed from the current directory. The "current directory" of a URL is called the <EM
CLASS="emphasis"
>base URL</EM
>.</P
><P
CLASS="para"
>For example, if a page's URL is http://betty/somepage.html, links on that page to other resources on the site do not have to explicitly include "betty" in the URL. Instead, they can simply begin with the path and name of other resources. The server part, "betty," is implied by the base URL. You can even include new subdirectories off the base URL.</P
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="BOOK-CH-2-SECT-2.6"
>2.2.6 The Resource MIME Type</A
></H3
><P
CLASS="para"
> <A
CLASS="indexterm"
NAME="AUTOID-1469"
></A
> <A
CLASS="indexterm"
NAME="AUTOID-1472"
></A
> Every resource is associated with a <I
CLASS="filename"
>MIME type</I
> that tells the browser what to do with the resource once the transfer is complete (e.g., display it in the main window, launch a file viewer, and so on). MIME, which stands for Multipurpose Internet Mail Extensions, is a standard for exchanging various types of files (such as images, text, and video) over the Internet so that each computer platform, whether NT, Unix, or VMS, will interpret and correctly handle the resource's contents.</P
><P
CLASS="para"
>MIME types describe the data format using two parts. The first part, the <EM
CLASS="emphasis"
>type</EM
>, identifies the resource's general format, such as <CODE
CLASS="literal"
>text</CODE
>, <CODE
CLASS="literal"
>image</CODE
>, or <CODE
CLASS="literal"
>audio</CODE
>. The second part, the <EM
CLASS="emphasis"
>subtype</EM
>, identifies the resource's specific data format. For example, the subtypes for the <CODE
CLASS="literal"
>image</CODE
> type include <CODE
CLASS="literal"
>gif</CODE
> and <CODE
CLASS="literal"
>jpeg</CODE
>. The type and subtype are delimited with a slash (/ ); for example, a picture's full MIME type could be <CODE
CLASS="literal"
>image/gif</CODE
> or <CODE
CLASS="literal"
>image/jpeg</CODE
>.<CODE
CLASS="literal"
> </CODE
>The default for WebDB and OAS is <CODE
CLASS="literal"
>text/html</CODE
>.</P
><P
CLASS="para"
>Browsers must be configured to handle each MIME type. Almost all browsers can display <CODE
CLASS="literal"
>text/plain</CODE
>, <CODE
CLASS="literal"
>text/html</CODE
>, and <CODE
CLASS="literal"
>image/jpeg</CODE
> documents without any extra configuration. When a browser receives a document with a MIME type it doesn't recognize, it asks the user to select a helper program to display the document. This is similar to selecting a file association based on a file extension in Windows (i.e., mapping the <I
CLASS="filename"
>.doc</I
> extension to the Microsoft Word application). Once the user makes an association, subsequent requests for that MIME type are opened using the associated application.</P
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="BOOK-CH-2-SECT-2.7"
>2.2.7 A Helpful Analogy</A
></H3
><P
CLASS="para"
>I've covered a lot of important material in this section. It might be useful to summarize it by making an analogy to the telephone system network, as shown in <A
CLASS="xref"
HREF="ch02_02.htm#BOOK-CH-2-SECT-2.6"
>Table 2.1</A
>.</P
><BR><TABLE
CLASS="table"
BORDER="1"
CELLPADDING="3"
><CAPTION
CLASS="table"
><A
CLASS="title"
NAME="BOOK-CH-2-TABLE-2"
>Table 2.1: An Analogy Between the Web and the Phone System </A
></CAPTION
><THEAD
CLASS="thead"
><TR
CLASS="row"
VALIGN="TOP"
><TH
CLASS="entry"
ALIGN="LEFT"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>Term</P
></TH
><TH
CLASS="entry"
ALIGN="LEFT"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>Analogy</P
></TH
></TR
></THEAD
><TBODY
CLASS="tbody"
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>Resources</P
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>A resource is like the message you want to transmit during the call. It's the actual information you want to send or receive.</P
></TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>TCP/IP network</P
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>The TCP/IP network is like the standards used by the phone company to route your call from your phone to the person that you're calling.</P
></TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>Port</P
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>The port is like the circuit that's opened across the network. It is the conduit through which the message is sent. </P
></TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>HTTP</P
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>HTTP is like the "hello" and "goodbye" parts of your conversation, the agreed-upon convention that governs how the conversation takes place.</P
></TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>Web browser</P
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>The web browser is like the telephone, the component that allows you to place the call.</P
></TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>URL</P
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>The URL is like the phone number, the convention that associates a particular resource with an abstract location.</P
></TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>MIME type</P
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>The MIME type is like the "nature" of the conversation (i.e., business, pleasure, etc.). It is the specific classification of the message; additionally, it implies a specific action that must be taken based on the message.</P
></TD
></TR
></TBODY
></TABLE
></DIV
></DIV
><DIV
CLASS="htmlnav"
><P
></P
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch02_01.htm"
TITLE="2.1 Resources"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 2.1 Resources"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="book"
HREF="index.htm"
TITLE="Oracle Web Applications: PL/SQL Developer's Introduction"
><IMG
SRC="../gifs/txthome.gif"
ALT="Oracle Web Applications: PL/SQL Developer's Introduction"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch02_03.htm#BOOK-CH-2-SECT-3.1"
TITLE="2.3 Content Delivery Model"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 2.3 Content Delivery Model"
BORDER="0"></A
></TD
></TR
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
>2.1 Resources</TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="index"
HREF="index/idx_0.htm"
TITLE="Book Index"
><IMG
SRC="../gifs/index.gif"
ALT="Book Index"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
>2.3 Content Delivery Model</TD
></TR
></TABLE
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"></DIV
><IMG SRC="../gifs/smnavbar.gif"
USEMAP="#map"
BORDER="0"
ALT="The Oracle Library Navigation">

<P><font size="-1">
<a href="../copyrght.htm#copy">Copyright (c) 2000</a> O'Reilly &amp; Associates. All rights reserved.
</font></P>

<MAP NAME="map">

<AREA SHAPE="RECT"
COORDS="0,0,35,30"
HREF="../index.htm"
ALT="Library Home">

<AREA SHAPE="RECT"
COORDS="40,0,95,30"
HREF="../prog2/index.htm"
ALT="Oracle PL/SQL Programming, 2nd. Ed.">

<AREA SHAPE="RECT"
COORDS="100,0,200,30"
HREF="../guide8i/index.htm"
ALT="Guide to Oracle 8i Features">

<AREA SHAPE="RECT"
COORDS="205,0,245,30"
HREF="../bipack/index.htm"
ALT="Oracle Built-in Packages">

<AREA SHAPE="RECT"
COORDS="250,0,320,30"
HREF="../advprog/index.htm"
ALT="Advanced PL/SQL Programming with Packages">

<AREA SHAPE="RECT"
COORDS="325,0,420,30"
HREF="index.htm"
ALT="Oracle Web Applications">

<AREA SHAPE="RECT"
COORDS="425,0,490,30"
HREF="../langpkt/index.htm"
ALT="Oracle PL/SQL Language Pocket Reference">

<AREA SHAPE="RECT"
COORDS="495,0,570,30"
HREF="../bipkt/index.htm"
ALT="Oracle PL/SQL Built-ins Pocket Reference">
</MAP>

</BODY
>
<!-- Mirrored from liso.cs.pusan.ac.kr by HTTrack Website Copier/3.x [XR&CO'2001] -->
</HTML
>
