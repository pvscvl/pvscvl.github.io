<HTML
><HEAD
><TITLE
>[Chapter 2] 2.4 Database Integration</TITLE
><META
NAME="DC.Creator"
CONTENT="Andrew Odewahn"><META
NAME="DC.Date"
CONTENT="2000-04-29T18:35:18Z"><META
NAME="DC.Format"
CONTENT="text/html"
SCHEME="MIME"><META
NAME="DC.Identifier"
CONTENT="O'Reilly and Associates CDROM-1-56592-687-0E"><META
NAME="DC.Language"
CONTENT="en-US"><META
NAME="DC.Publisher"
CONTENT="O'Reilly &amp; Associates, Inc."><META
NAME="DC.Source"
CONTENT="1-56592-687-0E"
SCHEME="ISBN"><META
NAME="DC.Subject.Keyword"
CONTENT="Oracle Web 8i"><META
NAME="DC.Title"
CONTENT="Oracle Web Applications: PL/SQL Developer's Introduction"><META
NAME="DC.Type"
CONTENT="Text.Monograph"><META
NAME="generator"
CONTENT="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><LINK
REL="stylesheet"
TYPE="text/css"
HREF="../style/style1.css"><LINK
REV="made"
HREF="mailto:online-books@oreilly.com"
TITLE="Online Books Comments"><LINK
REL="up"
HREF="ch02_01.htm"
TITLE="2. Foundations"><LINK
REL="prev"
HREF="ch02_03.htm#BOOK-CH-2-SECT-3.1"
TITLE="2.3 Content Delivery Model"><LINK
REL="next"
HREF="ch02_05.htm#BOOK-CH-2-SECT-5.5"
TITLE="2.5 Database Security Review"></HEAD
><BODY
><DIV
CLASS="htmlnav"
><H1
><IMG
SRC="gifs/smbanner.gif"
ALT="Oracle Web Applications: PL/SQL Developer's Introduction"
USEMAP="#srchmap"
BORDER="0"></H1
><MAP
NAME="srchmap"
><AREA
SHAPE="RECT"
COORDS="0,0,466,65"
HREF="index.htm"
ALT="Oracle Web Applications: PL/SQL Developer's Introduction"><AREA
SHAPE="RECT"
COORDS="467,0,514,18"
HREF="jobjects/fsearch.htm"
ALT="Search this book"></MAP
><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch02_03.htm#BOOK-CH-2-SECT-3.1"
TITLE="2.3 Content Delivery Model"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 2.3 Content Delivery Model"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><SPAN
CLASS="NAVTITLE"
><A
CLASS="chapter"
REL="up"
HREF="ch02_01.htm"
TITLE="2. Foundations"
>Chapter 2<BR>Foundations</A
></SPAN
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch02_05.htm#BOOK-CH-2-SECT-5.5"
TITLE="2.5 Database Security Review"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 2.5 Database Security Review"
BORDER="0"></A
></TD
></TR
></TABLE
>&nbsp;<HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"></DIV
><DIV
CLASS="sect1"
><H2
CLASS="sect1"
><A
CLASS="title"
NAME="BOOK-CH-2-SECT-4"
>2.4 Database Integration</A
></H2
><P
CLASS="para"
> <A
CLASS="indexterm"
NAME="ch-02-data_integrate"
></A
> <A
CLASS="indexterm"
NAME="AUTOID-1633"
></A
>  <A
CLASS="indexterm"
NAME="AUTOID-1636"
></A
> The HTTP listener and PL/SQL gateway are used to build web-enabled systems that provide tight integration with a backend Oracle database. PL/SQL-based OAS and WebDB applications are developed using a set of packages called the PL/SQL toolkit. In this section, we'll take a quick look at the toolkit and see an example procedure. The last section covers how to pass parameters.</P
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="BOOK-CH-2-SECT-4.1"
>2.4.1 The PL/SQL Toolkit</A
></H3
><P
CLASS="para"
>WebDB and OAS both include the PL/SQL toolkit. The toolkit contains a variety of PL/SQL packages written and supplied by Oracle that perform a range of tasks, including generating HTML tags, manipulating cookies (name/value pairs used to save information throughout an entire session), and creating complex HTML structures based on information in a database table. In general, procedures built with the toolkit will work in either product, although you may run into minor database privilege issues that the DBA can help you resolve.</P
><P
CLASS="para"
>The packages in the toolkit (described in detail in <A
CLASS="xref"
HREF="ch07_01.htm"
>Chapter 7</A
>) are:</P
><DL
CLASS="variablelist"
><DT
CLASS="term"
>HTP and HTF</DT
><DD
CLASS="listitem"
><P
CLASS="para"
> <A
CLASS="indexterm"
NAME="AUTOID-1649"
></A
> <A
CLASS="indexterm"
NAME="AUTOID-1651"
></A
> HTP is a set of procedures that print syntactically correct HTML tags, which are returned to the user's web browser. HTF is an equivalent set of functions that return HTML strings whose output is returned to the program that called the function. In either package, procedures and functions correspond to specific HTML tags; their parameters correspond to tag attributes.</P
></DD
><DT
CLASS="term"
>OWA_COOKIE</DT
><DD
CLASS="listitem"
><P
CLASS="para"
> <A
CLASS="indexterm"
NAME="AUTOID-1657"
></A
> A set of data structures, procedures, and functions used to create and manipulate cookies. </P
></DD
><DT
CLASS="term"
>OWA_IMAGE</DT
><DD
CLASS="listitem"
><P
CLASS="para"
> <A
CLASS="indexterm"
NAME="AUTOID-1663"
></A
> A set of data structures, procedures, and functions used to manipulate image maps.</P
></DD
><DT
CLASS="term"
>OWA_OPT_LOCK</DT
><DD
CLASS="listitem"
><P
CLASS="para"
> <A
CLASS="indexterm"
NAME="AUTOID-1669"
></A
> A set of data structures, procedures, and functions used to perform optimistic record locking. The package can either compute a checksum that's used to test for differences or compare each field of the old and new records (we'll look at this in detail in <A
CLASS="xref"
HREF="ch07_01.htm"
>Chapter 7</A
>).</P
></DD
><DT
CLASS="term"
>OWA_PATTERN</DT
><DD
CLASS="listitem"
><P
CLASS="para"
> <A
CLASS="indexterm"
NAME="AUTOID-1676"
></A
> A set of data structures, procedures, and functions that perform advanced search and replace operations on text strings using regular expressions.</P
></DD
><DT
CLASS="term"
>OWA_SEC</DT
><DD
CLASS="listitem"
><P
CLASS="para"
> <A
CLASS="indexterm"
NAME="AUTOID-1682"
></A
> A set of data structures, procedures, and functions used to develop customized security and authentication procedures, such as GET_USER_ID (to return the user executing the procedure) or GET_CLIENT_IP (to return the IP address of the machine making the request).</P
></DD
><DT
CLASS="term"
>OWA_TEXT</DT
><DD
CLASS="listitem"
><P
CLASS="para"
> <A
CLASS="indexterm"
NAME="AUTOID-1688"
></A
> A set of data structures, procedures, and functions used to perform operations on large strings. Also used as the basis of many of the procedures in OWA_PATTERN.</P
></DD
><DT
CLASS="term"
>OWA_UTIL</DT
><DD
CLASS="listitem"
><P
CLASS="para"
> <A
CLASS="indexterm"
NAME="AUTOID-1694"
></A
> A set of data structures, procedures, and functions used to create advanced HTML structures, such as calendars or tables. Many of the WebDB components, such as forms or calendars, are based directly on this package.</P
></DD
></DL
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="BOOK-CH-2-SECT-4.2"
>2.4.2 A PL/SQL Example</A
></H3
><P
CLASS="para"
>The following example gives the flavor of how the toolkit creates web content. The example is a relatively simple PL/SQL procedure that displays rows in an employee table. The output is formatted into HTML using the procedures in the toolkit's HTP package:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>/* Formatted by PL/Formatter v.1.1.13 */
PROCEDURE show_emps (
   i_job IN VARCHAR2 DEFAULT 'SALESMAN'
   )
AS
   
   CURSOR emp_cur
   IS
      SELECT *
      FROM scott.emp
      WHERE job LIKE i_job
      ORDER BY ename;
   emp_rec emp_cur%ROWTYPE;
BEGIN
   HTP.title ('Employees in the EMP table');
   HTP.tableopen (cattributes =&gt; 'border=1 width=100%');
   OPEN emp_cur;
   LOOP
      FETCH emp_cur INTO emp_rec;
      EXIT WHEN emp_cur%notfound;
      HTP.tablerowopen;
      HTP.tabledata (emp_rec.ename);
      HTP.tabledata (emp_rec.job);
      HTP.tabledata (emp_rec.hiredate);
      HTP.tabledata (emp_rec.sal);
      HTP.tablerowclose;
   END LOOP;
   CLOSE emp_cur;
   HTP.tableclose;
END;	  </PRE
></BLOCKQUOTE
><P
CLASS="para"
><A
CLASS="xref"
HREF="ch02_04.htm#BOOK-CH-2-SECT-4.1"
>Figure 2.2</A
> shows the output from the procedure. For a more advanced discussion of the PL/SQL toolkit, see <A
CLASS="xref"
HREF="ch07_01.htm"
>Chapter 7</A
>.</P
><H4
CLASS="figure"
><A
CLASS="title"
NAME="BOOK-CH-2-FIG-2"
>Figure 2.2: Output of the show_emps procedure</A
></H4
><IMG
CLASS="graphic"
SRC="figs/owa.0202.gif"
ALT="Figure 2.2"></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="BOOK-CH-2-SECT-4.3"
>2.4.3 Calling the Example</A
></H3
><P
CLASS="para"
>You can pass parameters to a WebDB or an OAS PL/SQL procedure by including them either in the query string of a URL or as named elements on an HTML form. These parameters are mapped to the procedure's formal argument list using named notation. For example, let's suppose we want to develop a web page that inserts a new user into a table. The procedure we want to call is defined as:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>/* Formatted by PL/Formatter v.1.1.13 */
PROCEDURE add (
   lname IN VARCHAR2 DEFAULT NULL,
   fname IN VARCHAR2 DEFAULT NULL,
   dpt_code IN VARCHAR2 DEFAULT NULL
   )
IS
BEGIN
   INSERT INTO emp_table (last_name,first_name,dept)
        VALUES (lname, fname, dpt_code);
   COMMIT;
   HTP.print ('User was inserted');
EXCEPTION
   WHEN OTHERS
   THEN
      HTP.print ('Sorry, could not insert user.');
END;</PRE
></BLOCKQUOTE
><DIV
CLASS="sect3"
><H4
CLASS="sect3"
><A
CLASS="title"
NAME="BOOK-CH-2-SECT-4.3.1"
>2.4.3.1 Using a query string</A
></H4
><P
CLASS="para"
> <A
CLASS="indexterm"
NAME="AUTOID-1713"
></A
> The first way to call the procedure is to embed the parameter values in the URL's query string. Recall that the query string is made up of sets of name/value pairs. When we call a PL/SQL procedure, the "name" part of the pair selects the formal parameter to which we are assigning a value. The "value" part specifies the actual value to pass. The URL to call the procedure is:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>http://<I
CLASS="replaceable"
>server</I
>/<I
CLASS="replaceable"
>DAD</I
>/add?lname=odewahn&amp;fname=andrew&amp;dpt_code=MIS</PRE
></BLOCKQUOTE
></DIV
><DIV
CLASS="sect3"
><H4
CLASS="sect3"
><A
CLASS="title"
NAME="BOOK-CH-2-SECT-4.3.2"
>2.4.3.2 Using an HTML form</A
></H4
><P
CLASS="para"
> <A
CLASS="indexterm"
NAME="AUTOID-1721"
></A
> <A
CLASS="indexterm"
NAME="AUTOID-1723"
></A
> We can call the same procedure with an HTML form. In this case, the form's <CODE
CLASS="literal"
>action</CODE
> field specifies the procedure to execute, and the named input elements on the HTML form pass parameters. The name of an input element must match the name of a parameter to the procedure. Here are the HTML tags needed to create a form to call the add procedure:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>&lt;form action=http://wilma/hr/plsql/add&gt;
   First Name: &lt;input type=text name=fname&gt;&lt;br&gt;
   Last Name:  &lt;input type=text name=lname&gt;&lt;br&gt;
   Department: &lt;select name=dpt_code&gt;
      &lt;option value=HR&gt;Human Resources
      &lt;option value=MIS&gt;Computer department
      &lt;option value=ACCT&gt;Accounting
   &lt;/select&gt;
&lt;/form&gt;</PRE
></BLOCKQUOTE
><BLOCKQUOTE
CLASS="tip"
><P
CLASS="para"
><STRONG
>TIP:</STRONG
> The PL/SQL gateway translates the information in the query string or on the form to a named notation procedure call:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>add ( lname =&gt; 'odewahn', fname =&gt; 'andrew',
    dpt_code =&gt; 'MIS' );</PRE
></BLOCKQUOTE
></BLOCKQUOTE
></DIV
><DIV
CLASS="sect3"
><H4
CLASS="sect3"
><A
CLASS="title"
NAME="BOOK-CH-2-SECT-4.3.3"
>2.4.3.3 Parameter arrays</A
></H4
><P
CLASS="para"
> <A
CLASS="indexterm"
NAME="AUTOID-1734"
></A
> Sometimes it is desirable to process multiple values for the same parameter, such as when you want to allow a user to enter multiple rows of data in a single form. In a query string, this is accomplished by giving the same name to multiple name/value pairs. In a form, it is accomplished by using the same name for multiple input elements. On the PL/SQL side, the corresponding parameter for the procedure must be declared as an array datatype. We'll see an example of this in <A
CLASS="xref"
HREF="ch08_01.htm"
>Chapter 8</A
>.</P
></DIV
><DIV
CLASS="sect3"
><H4
CLASS="sect3"
><A
CLASS="title"
NAME="BOOK-CH-2-SECT-4.3.4"
>2.4.3.4 Parameter gotchas</A
></H4
><P
CLASS="para"
>Calling a procedure from the Web circumvents the compiler safeguards that occur in normal procedure calls. When the gateway receives a URL to execute, it will try to do so whether the URL represents a syntactically correct call or not. If the call contains even the slightest error, the listener bombs out and presents an ugly error page to the user. Some of the most common sources of errors are:</P
><DL
CLASS="variablelist"
><DT
CLASS="term"
>Misspelling a formal parameter</DT
><DD
CLASS="listitem"
><P
CLASS="para"
>The named notation calling method uses the formal parameter name to match the corresponding actual parameter. The gateway generates an error if, for any reason<EM
CLASS="emphasis"
>,</EM
> an actual parameter doesn't match one of the procedure's formal parameters. </P
></DD
><DT
CLASS="term"
>Omitting a required actual parameter</DT
><DD
CLASS="listitem"
><P
CLASS="para"
>All procedure calls, regardless of notation, must provide an actual parameter for a formal parameter that does not have a default value. Failing to do so results in an exception.</P
></DD
><DT
CLASS="term"
>Passing the wrong datatype as a parameter value</DT
><DD
CLASS="listitem"
><P
CLASS="para"
>An actual parameter value must match the declared type of its corresponding formal parameter. Unfortunately, users can create an exception by passing garbage data.</P
></DD
></DL
><P
CLASS="para"
>The following guidelines help minimize these and other errors:</P
><UL
CLASS="itemizedlist"
><LI
CLASS="listitem"
><P
CLASS="para"
>Follow a convention for naming formal parameters to reduce the chance of misspelling or misnaming a parameter.</P
></LI
><LI
CLASS="listitem"
><P
CLASS="para"
>Provide default values for every formal parameter, even if it's only DEFAULT NULL, to reduce the chance that a required parameter is omitted.</P
></LI
><LI
CLASS="listitem"
><P
CLASS="para"
>Declare parameters as a VARCHAR2 to protect against garbage data. Converting this value into the required type (i.e., VARCHAR2 to NUMBER) inside the procedure allows you to trap exceptions. You can also use the WebDB form wizard to automatically create JavaScript code to perform these checks (you can write your own JavaScript programs, but that's beyond the scope of this book). </P
><A
CLASS="indexterm"
NAME="AUTOID-1762"
></A
></LI
></UL
><BLOCKQUOTE
CLASS="warning"
><P
CLASS="para"
><STRONG
>WARNING:</STRONG
> Don't give a parameter the same name as a column in a table, as this can totally confuse the compiler. For example, in the <CODE
CLASS="literal"
>add</CODE
> procedure presented in the previous section, naming the last name parameter <CODE
CLASS="literal"
>last_name</CODE
> instead of <CODE
CLASS="literal"
>lname</CODE
> would cause a subtle error in the INSERT statement because <CODE
CLASS="literal"
>last_name</CODE
> has two different meanings: it's both a parameter and a table column. You can spend hours trying to track down this relatively simple problem.</P
></BLOCKQUOTE
></DIV
></DIV
></DIV
><DIV
CLASS="htmlnav"
><P
></P
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch02_03.htm#BOOK-CH-2-SECT-3.1"
TITLE="2.3 Content Delivery Model"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 2.3 Content Delivery Model"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="book"
HREF="index.htm"
TITLE="Oracle Web Applications: PL/SQL Developer's Introduction"
><IMG
SRC="../gifs/txthome.gif"
ALT="Oracle Web Applications: PL/SQL Developer's Introduction"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch02_05.htm#BOOK-CH-2-SECT-5.5"
TITLE="2.5 Database Security Review"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 2.5 Database Security Review"
BORDER="0"></A
></TD
></TR
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
>2.3 Content Delivery Model</TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="index"
HREF="index/idx_0.htm"
TITLE="Book Index"
><IMG
SRC="../gifs/index.gif"
ALT="Book Index"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
>2.5 Database Security Review</TD
></TR
></TABLE
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"></DIV
><IMG SRC="../gifs/smnavbar.gif"
USEMAP="#map"
BORDER="0"
ALT="The Oracle Library Navigation">

<P><font size="-1">
<a href="../copyrght.htm#copy">Copyright (c) 2000</a> O'Reilly &amp; Associates. All rights reserved.
</font></P>

<MAP NAME="map">

<AREA SHAPE="RECT"
COORDS="0,0,35,30"
HREF="../index.htm"
ALT="Library Home">

<AREA SHAPE="RECT"
COORDS="40,0,95,30"
HREF="../prog2/index.htm"
ALT="Oracle PL/SQL Programming, 2nd. Ed.">

<AREA SHAPE="RECT"
COORDS="100,0,200,30"
HREF="../guide8i/index.htm"
ALT="Guide to Oracle 8i Features">

<AREA SHAPE="RECT"
COORDS="205,0,245,30"
HREF="../bipack/index.htm"
ALT="Oracle Built-in Packages">

<AREA SHAPE="RECT"
COORDS="250,0,320,30"
HREF="../advprog/index.htm"
ALT="Advanced PL/SQL Programming with Packages">

<AREA SHAPE="RECT"
COORDS="325,0,420,30"
HREF="index.htm"
ALT="Oracle Web Applications">

<AREA SHAPE="RECT"
COORDS="425,0,490,30"
HREF="../langpkt/index.htm"
ALT="Oracle PL/SQL Language Pocket Reference">

<AREA SHAPE="RECT"
COORDS="495,0,570,30"
HREF="../bipkt/index.htm"
ALT="Oracle PL/SQL Built-ins Pocket Reference">
</MAP>

</BODY
>
<!-- Mirrored from liso.cs.pusan.ac.kr by HTTrack Website Copier/3.x [XR&CO'2001] -->
</HTML
>
