<HTML
><HEAD
><TITLE
>[Chapter 8] 8.2 Example 1: An Anonymous Survey</TITLE
><META
NAME="DC.Creator"
CONTENT="Andrew Odewahn"><META
NAME="DC.Date"
CONTENT="2000-04-29T18:37:21Z"><META
NAME="DC.Format"
CONTENT="text/html"
SCHEME="MIME"><META
NAME="DC.Identifier"
CONTENT="O'Reilly and Associates CDROM-1-56592-687-0E"><META
NAME="DC.Language"
CONTENT="en-US"><META
NAME="DC.Publisher"
CONTENT="O'Reilly &amp; Associates, Inc."><META
NAME="DC.Source"
CONTENT="1-56592-687-0E"
SCHEME="ISBN"><META
NAME="DC.Subject.Keyword"
CONTENT="Oracle Web 8i"><META
NAME="DC.Title"
CONTENT="Oracle Web Applications: PL/SQL Developer's Introduction"><META
NAME="DC.Type"
CONTENT="Text.Monograph"><META
NAME="generator"
CONTENT="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><LINK
REL="stylesheet"
TYPE="text/css"
HREF="../style/style1.css"><LINK
REV="made"
HREF="mailto:online-books@oreilly.com"
TITLE="Online Books Comments"><LINK
REL="up"
HREF="ch08_01.htm"
TITLE="8. Developing Applications"><LINK
REL="prev"
HREF="ch08_01.htm"
TITLE="8.1 Designing a Web Application"><LINK
REL="next"
HREF="ch08_03.htm#BOOK-CH-8-SECT-3.4"
TITLE="8.3 Example 2: A Discussion Forum"></HEAD
><BODY
><DIV
CLASS="htmlnav"
><H1
><IMG
SRC="gifs/smbanner.gif"
ALT="Oracle Web Applications: PL/SQL Developer's Introduction"
USEMAP="#srchmap"
BORDER="0"></H1
><MAP
NAME="srchmap"
><AREA
SHAPE="RECT"
COORDS="0,0,466,65"
HREF="index.htm"
ALT="Oracle Web Applications: PL/SQL Developer's Introduction"><AREA
SHAPE="RECT"
COORDS="467,0,514,18"
HREF="jobjects/fsearch.htm"
ALT="Search this book"></MAP
><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch08_01.htm"
TITLE="8.1 Designing a Web Application"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 8.1 Designing a Web Application"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><SPAN
CLASS="NAVTITLE"
><A
CLASS="chapter"
REL="up"
HREF="ch08_01.htm"
TITLE="8. Developing Applications"
>Chapter 8<BR>Developing Applications</A
></SPAN
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch08_03.htm#BOOK-CH-8-SECT-3.4"
TITLE="8.3 Example 2: A Discussion Forum"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 8.3 Example 2: A Discussion Forum"
BORDER="0"></A
></TD
></TR
></TABLE
>&nbsp;<HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"></DIV
><DIV
CLASS="sect1"
><H2
CLASS="sect1"
><A
CLASS="title"
NAME="BOOK-CH-8-SECT-2"
>8.2 Example 1: An Anonymous Survey</A
></H2
><P
CLASS="para"
> <A
CLASS="indexterm"
NAME="AUTOID-6829"
></A
> Our first application will let users fill out anonymous surveys using a web browser. Surveys and opinion polls are some of the most common web applications, and usually consist of a list of questions. Users respond by selecting an answer from a small list of options. Most systems also have an option that lets users see the tabulated results for each survey. </P
><P
CLASS="para"
>This section walks through a simple process you can use to create a generic survey system. Our first step is to design a storyboard to define each screen in the system. This sketch helps us in the next step: designing a generic data model that we can use to construct each page. Our last step is to actually code the system. </P
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="BOOK-CH-8-SECT-2.1"
>8.2.1 Storyboard</A
></H3
><P
CLASS="para"
>In a typical survey application, the first screen presents a list of all available surveys. There are usually two options for each survey: to answer it or to view its tabulated results. If the user decides to answer a survey, she's presented with a bunch of questions and a corresponding list of possible answers. She then answers the questions and presses "Submit" to save the responses in a database table. If the user chooses to view the results of a survey, she's presented with a table summarizing all the previous responses. <A
CLASS="xref"
HREF="ch08_02.htm#BOOK-CH-8-SECT-2.4"
>Figure 8.2</A
> is a simple storyboard that captures these functions. </P
><H4
CLASS="figure"
><A
CLASS="title"
NAME="BOOK-CH-8-FIG-2"
>Figure 8.2: The storyboard for the anonymous survey </A
></H4
><IMG
CLASS="graphic"
SRC="figs/owa.0802.gif"
ALT="Figure 8.2"></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="BOOK-CH-8-SECT-2.2"
>8.2.2 Data Model</A
></H3
><P
CLASS="para"
>We can use the storyboard to design a data model. The first storyboard screen tells us that we need some sort of table to hold the survey list. The screen used to respond to a survey suggests three more tables. The first table holds the text of each question, the second holds the possible answers for each question, and the third holds the actual user responses. The "view results" screen queries these tables. </P
><P
CLASS="para"
><A
CLASS="xref"
HREF="ch08_02.htm#BOOK-CH-8-SECT-2.4"
>Figure 8.3</A
> shows a data model that uses these four tables. The SURVEY table contains information about the survey itself, such as its name, description, and the date range during which it is available. The rows in QUESTIONS represent the individual questions on a survey. ANSWERS defines the list of valid responses for each question. The final table, RESPONSES, holds the actual responses given by the respondents. </P
><H4
CLASS="figure"
><A
CLASS="title"
NAME="BOOK-CH-8-FIG-3"
>Figure 8.3: A data design for the anonymous survey</A
></H4
><IMG
CLASS="graphic"
SRC="figs/owa.0803.gif"
ALT="Figure 8.3"></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="BOOK-CH-8-SECT-2.3"
>8.2.3 Implementation Notes</A
></H3
><P
CLASS="para"
>Since the survey application is a fairly simple system, we can implement it using a single package, which we'll call EMP_SURVEY. We'll store all the application objects, including code and tables, in a schema named SURVEY. </P
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="BOOK-CH-8-SECT-2.4"
>8.2.4 The EMP_SURVEY Package</A
></H3
><P
CLASS="para"
> <A
CLASS="indexterm"
NAME="ch-08-empserv"
></A
> Now that we've got the basic screen layout and data model, we're finally ready to develop the actual package. <A
CLASS="xref"
HREF="ch08_02.htm#BOOK-CH-8-SECT-2.4"
>Table 8.1</A
> shows the five procedures contained in EMP_SURVEY. </P
><BR><TABLE
CLASS="table"
BORDER="1"
CELLPADDING="3"
><CAPTION
CLASS="table"
><A
CLASS="title"
NAME="BOOK-CH-8-TABLE-2"
>Table 8.1: The EMP_SURVEY Package </A
></CAPTION
><THEAD
CLASS="thead"
><TR
CLASS="row"
VALIGN="TOP"
><TH
CLASS="entry"
ALIGN="LEFT"
ROWSPAN="1"
COLSPAN="1"
> <P
CLASS="para"
>Procedure</P
> </TH
><TH
CLASS="entry"
ALIGN="LEFT"
ROWSPAN="1"
COLSPAN="1"
> <P
CLASS="para"
>Parameters</P
> </TH
><TH
CLASS="entry"
ALIGN="LEFT"
ROWSPAN="1"
COLSPAN="1"
> <P
CLASS="para"
>Description</P
> </TH
></TR
></THEAD
><TBODY
CLASS="tbody"
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
> <P
CLASS="para"
> <A
CLASS="indexterm"
NAME="AUTOID-6875"
></A
> display_survey_list</P
> </TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
> <P
CLASS="para"
>None</P
> </TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
> <P
CLASS="para"
>Generates an HTML list of available surveys, with descriptions.</P
> </TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
> <P
CLASS="para"
> <A
CLASS="indexterm"
NAME="AUTOID-6884"
></A
> answer_survey</P
> </TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
> <P
CLASS="para"
>i_survey_id IN VARCHAR2</P
> </TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
> <P
CLASS="para"
>Creates the HTML form that allows a user to respond to the survey.</P
> </TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
> <P
CLASS="para"
> <A
CLASS="indexterm"
NAME="AUTOID-6893"
></A
> process_survey</P
> </TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
> <P
CLASS="para"
>question IN response_array</P
>  <P
CLASS="para"
>  DEFAULT emp_survey.no_</P
>  <P
CLASS="para"
>  response</P
>  <P
CLASS="para"
>response IN response_array</P
>  <P
CLASS="para"
>  DEFAULT emp_survey.no_</P
>  <P
CLASS="para"
>   response</P
> </TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
> <P
CLASS="para"
>Inserts the user's answers into the RESPONSES table.</P
> </TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
> <P
CLASS="para"
> <A
CLASS="indexterm"
NAME="AUTOID-6907"
></A
> view_results</P
> </TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
> <P
CLASS="para"
>i_survey_id IN VARCHAR2</P
> </TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
> <P
CLASS="para"
>Prints each question in the survey. Together, view_results and print_answers tabulate the results for the survey. </P
> </TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
> <P
CLASS="para"
> <A
CLASS="indexterm"
NAME="AUTOID-6916"
></A
> print_answers</P
> </TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
> <P
CLASS="para"
>i_question_id IN VARCHAR2</P
> </TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
> <P
CLASS="para"
>Prints the corresponding summary information for a question. Together, view_results and print_answers tabulate the results for the survey. </P
> </TD
></TR
></TBODY
></TABLE
><P
CLASS="para"
>Like all packages, EMP_SURVEY requires a specification and a body.</P
><DIV
CLASS="sect3"
><H4
CLASS="sect3"
><A
CLASS="title"
NAME="BOOK-CH-8-SECT-2.4.1"
>8.2.4.1 Specification</A
></H4
><P
CLASS="para"
>We can translate the storyboard almost directly into a package specification. The four boxes on the diagram, each of which represents a screen in the system, indicate that we'll need at least four procedures. The lines connecting the boxes give us the formal parameter list for each procedure. Not everything is on the storyboard, though; we'll also need to declare an array to hold the user's survey answers. We'll discuss how to use this when we write the program to create the form. </P
><P
CLASS="para"
>The code for the EMP_SURVEY package is as follows:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>/* Formatted by PL/Formatter v.1.1.13 */
CREATE OR REPLACE PACKAGE emp_survey
AS
   
   /*
   || Datatype used to hold the responses to the survey
   */
   TYPE response_array IS TABLE OF VARCHAR2(20)
      INDEX BY BINARY_INTEGER;
   no_response response_array;
   
   -- Display the list of available surveys
   PROCEDURE display_survey_list;
   
   -- Display the form so that the user can respond
   PROCEDURE answer_survey (i_survey_id IN VARCHAR2);
   
   -- Save the responses
   PROCEDURE process_survey (
      question IN response_array DEFAULT emp_survey.no_response,
      response IN response_array DEFAULT emp_survey.no_response
      );
   
   -- Display the results of a survey
   PROCEDURE view_results (i_survey_id IN VARCHAR2);

END;</PRE
></BLOCKQUOTE
></DIV
><DIV
CLASS="sect3"
><H4
CLASS="sect3"
><A
CLASS="title"
NAME="BOOK-CH-8-SECT-2.4.2"
>8.2.4.2 Body</A
></H4
><P
CLASS="para"
>With the basic design complete, all that's left is to fill in the pieces. In the survey system, this consists largely of building screens based on the information in our data model. Recalling the specification, we have to write five procedures for the package body: display_survey_list, answer_survey, process_survey, view_results, and print_answers. </P
><DIV
CLASS="sect4"
><H4
CLASS="sect4"
><A
CLASS="title"
NAME="BOOK-CH-8-SECT-2.4.2.1"
>8.2.4.2.1 The display_survey_list procedure</A
></H4
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="AUTOID-6934"
></A
> The first procedure, display_survey_list, generates the first page of the storyboard. This page presents an HTML list of all available surveys along with their descriptions. Each survey requires two hyperlinks: one to link to the "response" page and one to link to the "view results" page. </P
><P
CLASS="para"
>The following procedure uses the SURVEY table to create the list. For each row in the table, the procedure creates a new HTML list item based on the survey_name and survey_desc columns. It also creates the two hyperlinks that include the survey_id as a parameter in the query string: </P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>PROCEDURE display_survey_list
IS
   -- Create cursor of all surveys that are active
   -- Done by testing the start_date and end_date columns
   -- of the SURVEY table
   CURSOR survey_cur
   IS
      SELECT *
        FROM survey
       WHERE SYSDATE BETWEEN start_date AND end_date;
   survey_rec survey_cur%ROWTYPE;
   rec_count NUMBER DEFAULT 0;

BEGIN
   HTP.print ('&lt;title&gt;Available Surveys&lt;/title&gt;');
   HTP.print ('&lt;body bgcolor=white&gt;');
   HTP.print ('&lt;ol&gt;');   -- Begin an ordered list
   OPEN survey_cur;
   LOOP
      FETCH survey_cur INTO survey_rec;
      EXIT WHEN survey_cur%notfound;
      HTP.print ('&lt;li&gt;');
      HTP.bold (survey_rec.survey_name);
      HTP.print ('&lt;br&gt;');
      HTP.print ('&lt;i&gt;' || survey_rec.survey_desc || '&lt;/i&gt;&lt;br&gt;');
      -- Put an anchor to take the survey
      HTP.anchor (
         'emp_survey.answer_survey?i_survey_id=' ||
         survey_rec.survey_id,
         'Take the survey'
      );
      -- Put an anchor to view the results
      HTP.anchor (
         'emp_survey.view_results?i_survey_id=' ||
         survey_rec.survey_id,
         'View the results'
      );
      HTP.print ('&lt;p&gt;&lt;/li&gt;');
   END LOOP;
   HTP.print ('&lt;/ol&gt;');
   CLOSE survey_cur;
END display_survey_list;	</PRE
></BLOCKQUOTE
><P
CLASS="para"
><A
CLASS="xref"
HREF="ch08_02.htm#BOOK-CH-8-SECT-2.4"
>Figure 8.4</A
> shows the procedure's output.</P
><H4
CLASS="figure"
><A
CLASS="title"
NAME="BOOK-CH-8-FIG-4"
>Figure 8.4: The main screen of the survey application</A
></H4
><IMG
CLASS="graphic"
SRC="figs/owa.0804.gif"
ALT="Figure 8.4"></DIV
><DIV
CLASS="sect4"
><H4
CLASS="sect4"
><A
CLASS="title"
NAME="BOOK-CH-8-SECT-2.4.2.2"
>8.2.4.2.2 The answer_survey procedure</A
></H4
><P
CLASS="para"
> <A
CLASS="indexterm"
NAME="AUTOID-6946"
></A
> <A
CLASS="indexterm"
NAME="AUTOID-6948"
></A
> The next procedure creates the HTML form that allows a user to respond to the survey. answer_survey has one parameter, survey_id, to indicate the survey the user selected on the preceding screen. answer_survey uses the rows of the QUESTION table for the specified survey to build corresponding rows in a two-column table. The first column in the table holds the question's text. The second column holds two form <CODE
CLASS="literal"
>&lt;input&gt;</CODE
> elements. The first element, a hidden field containing the question's ID, is needed to associate the user's answer with a corresponding question. The second element, created by the OWA_UTIL.LISTPRINT procedure, is a selectable list of the question's possible answers as they appear in the ANSWERS table. When the user submits the form, both the hidden field and the response field are passed as parameter arrays to the process_survey procedure. </P
><P
CLASS="para"
>The code for this procedure is as follows:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>PROCEDURE answer_survey (i_survey_id IN VARCHAR2)
IS
   CURSOR q_cur
   IS
      SELECT *
        FROM questions
       WHERE survey_id = i_survey_id
       ORDER BY question_num;
   
   q_rec q_cur%ROWTYPE;
   stmt VARCHAR2(500);

BEGIN
   HTP.title ('Survey');
   HTP.print ('&lt;body bgcolor=white&gt;');
   HTP.print ('&lt;form action=emp_survey.process_survey&gt;');
   HTP.print ('&lt;table width=80%&gt;');
   OPEN q_cur;
   LOOP
      FETCH q_cur INTO q_rec;
      EXIT WHEN q_cur%notfound;
      -- Start a new row in the HTML table
      HTP.print ('&lt;tr&gt;');
      -- Print the question in column 1
      HTP.print ('&lt;th align=left valign=top&gt;');
      HTP.print (q_rec.question_text);
      HTP.print ('&lt;/th&gt;');
      -- Put the question_id and select list in column 2
      HTP.print ('&lt;td&gt;');
      -- Put the question_id in as a hidden field
      HTP.formhidden (
         cname =&gt; 'question',
         cvalue =&gt; q_rec.question_id
      );
      -- Use owa_util.listprint to build the LOV for the answer 
      stmt :=
         'select answer_id, answer_text, default_ans_flag ';
      stmt := stmt || ' from survey.answers where';
      stmt := stmt || ' question_id = ' || q_rec.question_id;
      stmt := stmt || ' order by answer_order';
      OWA_UTIL.listprint (stmt, 'response', 4, FALSE);
      HTP.print ('&lt;/td&gt;');
      HTP.print ('&lt;/tr&gt;');
   END LOOP;
   HTP.print ('&lt;/table&gt;');
   HTP.formsubmit;
   CLOSE q_cur;
END;</PRE
></BLOCKQUOTE
><P
CLASS="para"
><A
CLASS="xref"
HREF="ch08_02.htm#BOOK-CH-8-SECT-2.4"
>Figure 8.5</A
> shows the output of this procedure for a sample survey. </P
><H4
CLASS="figure"
><A
CLASS="title"
NAME="BOOK-CH-8-FIG-5"
>Figure 8.5: The form used to answer a survey</A
></H4
><IMG
CLASS="graphic"
SRC="figs/owa.0805.gif"
ALT="Figure 8.5"></DIV
><DIV
CLASS="sect4"
><H4
CLASS="sect4"
><A
CLASS="title"
NAME="BOOK-CH-8-SECT-2.4.2.3"
>8.2.4.2.3 The process_survey procedure</A
></H4
><P
CLASS="para"
> <A
CLASS="indexterm"
NAME="AUTOID-6961"
></A
> The third procedure, process_survey, inserts the user's answers into the RESPONSES table. It accepts two response_array parameters (see the specification), question and response. For each question on the answer form, these parameters hold (respectively) the ID of the question as defined in QUESTIONS and the ID of the user's corresponding answer as defined in ANSWERS. </P
><P
CLASS="para"
>The procedure loops through each element, inserting a new row in the RESPONSES table for each question. The procedure calls the display_survey_list procedure to return the user to the main screen: </P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>PROCEDURE process_survey (
   question IN response_array DEFAULT emp_survey.no_response,
   response IN response_array DEFAULT emp_survey.no_response
   )
IS
   
   count NUMBER DEFAULT 0;

BEGIN
   HTP.title ('Saving Responses');
   HTP.print ('&lt;body bgcolor=white&gt;');
   -- COUNT attribute available in PL/SQL 2.3
   FOR count IN 1 .. question.count
   LOOP
      INSERT INTO responses (response_id,question_id,answer_id)
         VALUES (
            response_seq.nextval,
            question (item_count),
            response (item_count)
          );
   END LOOP;
   HTP.print ('&lt;h1&gt;Values Saved&lt;/h1&gt;&lt;hr&gt;');
   display_survey_list;
END;</PRE
></BLOCKQUOTE
></DIV
><DIV
CLASS="sect4"
><H4
CLASS="sect4"
><A
CLASS="title"
NAME="BOOK-CH-8-SECT-2.4.2.4"
>8.2.4.2.4 The view_results procedure</A
></H4
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="AUTOID-6968"
></A
> The last procedure in the application tabulates the results for the survey specified by the survey_id parameter. The procedure is split into two parts: a main procedure (view_results) to print each question and a secondary procedure (print_answers) to print a corresponding summary. The code for the main procedure is as follows: </P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>PROCEDURE view_results (i_survey_id IN VARCHAR2)
IS
   CURSOR q_cur
   IS
      SELECT *
        FROM questions
       WHERE survey_id = i_survey_id
       ORDER BY question_num;
   q_rec q_cur%ROWTYPE;
BEGIN
   HTP.title ('Survey Responses');
   HTP.print ('&lt;body bgcolor=white&gt;');
   HTP.print ('&lt;ol&gt;');
   OPEN q_cur;
   LOOP
      FETCH q_cur INTO q_rec;
      EXIT WHEN q_cur%notfound;
      HTP.print ('&lt;li&gt;');
      HTP.print ('&lt;b&gt;' || q_rec.question_text || '&lt;/b&gt;');
      HTP.print ('&lt;br&gt;');
      -- Call another procedure to generate the response summary
      print_answers (q_rec.question_id);
      HTP.print ('&lt;/td&gt;');
   END LOOP;
   HTP.print ('&lt;/ol&gt;');
   CLOSE q_cur;
END;</PRE
></BLOCKQUOTE
><P
CLASS="para"
>The secondary procedure, print_answers, generates the summary information for a question. The procedure opens a cursor based on the ANSWERS table to retrieve all the answers for a particular question. It then queries the RESPONSES table to calculate the percentages for that response. The code for the procedure is as follows: </P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>PROCEDURE print_answers (i_question_id IN VARCHAR2)
IS
   CURSOR ans_cur
   IS
      SELECT *
        FROM answers
       WHERE question_id = i_question_id
       ORDER BY answer_order;
   ans_rec ans_cur%ROWTYPE;
   total_responses NUMBER;
   num_responses NUMBER;
BEGIN
   -- Fetch the total number of responses
   SELECT COUNT (*)
     INTO total_responses
     FROM responses
    WHERE question_id = i_question_id;
   HTP.print ('&lt;table width=50%&gt;');
   OPEN ans_cur;
   LOOP
      FETCH ans_cur INTO ans_rec;
      EXIT WHEN ans_cur%notfound;
      HTP.print ('&lt;tr&gt;');
      -- Print question text
      HTP.print ('&lt;td nowrap&gt;' ||
                 ans_rec.answer_text ||
                 '&lt;/td&gt;');
      -- Fetch and print number of responses
      SELECT COUNT (*)
        INTO num_responses
        FROM responses
       WHERE answer_id = ans_rec.answer_id;
      HTP.print ('&lt;td align=right&gt;' ||
                 ROUND (
                    num_responses / total_responses * 100,
                    2
                 ) ||
                 '%&lt;/td&gt;');
      HTP.print ('&lt;/tr&gt;');
   END LOOP;
   HTP.print ('&lt;/table&gt;');
   CLOSE ans_cur;
END;</PRE
></BLOCKQUOTE
><P
CLASS="para"
><A
CLASS="xref"
HREF="ch08_02.htm#BOOK-CH-8-SECT-2.4"
>Figure 8.6</A
> shows the combined results of these procedures. </P
><H4
CLASS="figure"
><A
CLASS="title"
NAME="BOOK-CH-8-FIG-6"
>Figure 8.6: A sample summary</A
></H4
><IMG
CLASS="graphic"
SRC="figs/owa.0806.gif"
ALT="Figure 8.6"></DIV
></DIV
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="BOOK-CH-8-SECT-2.5"
>8.2.5 Security Privileges</A
></H3
><P
CLASS="para"
> <A
CLASS="indexterm"
NAME="AUTOID-6981"
></A
> Our last formal step is to make the package accessible to the user's web browser. Rather than creating a new PL/SQL agent for the SURVEY schema, we can make the package available to an existing agent's schema (in this case, WEBTEST). This makes the system more secure and reduces maintenance for the webmaster. Here are the steps to follow: </P
><OL
CLASS="orderedlist"
><LI
CLASS="listitem"
><P
CLASS="para"
>Log in to the SURVEY schema using SQL*Plus.</P
></LI
><LI
CLASS="listitem"
><P
CLASS="para"
>Grant EXECUTE privileges on the EMP_SURVEY package to the agent account (WEBTEST). </P
></LI
><LI
CLASS="listitem"
><P
CLASS="para"
>Connect to the agent account (again, WEBTEST).</P
></LI
><LI
CLASS="listitem"
><P
CLASS="para"
>Create a synonym called EMP_SURVEY for survey.emp_survey.</P
></LI
></OL
><P
CLASS="para"
><A
CLASS="xref"
HREF="ch08_02.htm#BOOK-CH-8-SECT-2.4"
>Figure 8.7</A
> shows how these commands are used in SQL*Plus. </P
><H4
CLASS="figure"
><A
CLASS="title"
NAME="BOOK-CH-8-FIG-7"
>Figure 8.7: Using SQL*Plus to grant privileges to the PL/SQL agent</A
></H4
><IMG
CLASS="graphic"
SRC="figs/owa.0807.gif"
ALT="Figure 8.7"></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="BOOK-CH-8-SECT-2.6"
>8.2.6 Summary</A
></H3
><P
CLASS="para"
>Developing the anonymous survey has taught us several things about web development. First, we have seen that a storyboard is a good place to start when faced with a new application. We can use the information on our diagram to define how the user will navigate, get a good idea of the database tables we'll need, and get a jump-start on defining the package specification. Second, this example has illustrated how to use parameter arrays to pass multiple field values, as well as how (and under what circumstances) you should use hidden fields. We'll expand these ideas further in the next sample application. <A
CLASS="indexterm"
NAME="AUTOID-7001"
></A
> </P
></DIV
></DIV
><DIV
CLASS="htmlnav"
><P
></P
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch08_01.htm"
TITLE="8.1 Designing a Web Application"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 8.1 Designing a Web Application"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="book"
HREF="index.htm"
TITLE="Oracle Web Applications: PL/SQL Developer's Introduction"
><IMG
SRC="../gifs/txthome.gif"
ALT="Oracle Web Applications: PL/SQL Developer's Introduction"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch08_03.htm#BOOK-CH-8-SECT-3.4"
TITLE="8.3 Example 2: A Discussion Forum"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 8.3 Example 2: A Discussion Forum"
BORDER="0"></A
></TD
></TR
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
>8.1 Designing a Web Application</TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="index"
HREF="index/idx_0.htm"
TITLE="Book Index"
><IMG
SRC="../gifs/index.gif"
ALT="Book Index"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
>8.3 Example 2: A Discussion Forum</TD
></TR
></TABLE
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"></DIV
><IMG SRC="../gifs/smnavbar.gif"
USEMAP="#map"
BORDER="0"
ALT="The Oracle Library Navigation">

<P><font size="-1">
<a href="../copyrght.htm#copy">Copyright (c) 2000</a> O'Reilly &amp; Associates. All rights reserved.
</font></P>

<MAP NAME="map">

<AREA SHAPE="RECT"
COORDS="0,0,35,30"
HREF="../index.htm"
ALT="Library Home">

<AREA SHAPE="RECT"
COORDS="40,0,95,30"
HREF="../prog2/index.htm"
ALT="Oracle PL/SQL Programming, 2nd. Ed.">

<AREA SHAPE="RECT"
COORDS="100,0,200,30"
HREF="../guide8i/index.htm"
ALT="Guide to Oracle 8i Features">

<AREA SHAPE="RECT"
COORDS="205,0,245,30"
HREF="../bipack/index.htm"
ALT="Oracle Built-in Packages">

<AREA SHAPE="RECT"
COORDS="250,0,320,30"
HREF="../advprog/index.htm"
ALT="Advanced PL/SQL Programming with Packages">

<AREA SHAPE="RECT"
COORDS="325,0,420,30"
HREF="index.htm"
ALT="Oracle Web Applications">

<AREA SHAPE="RECT"
COORDS="425,0,490,30"
HREF="../langpkt/index.htm"
ALT="Oracle PL/SQL Language Pocket Reference">

<AREA SHAPE="RECT"
COORDS="495,0,570,30"
HREF="../bipkt/index.htm"
ALT="Oracle PL/SQL Built-ins Pocket Reference">
</MAP>

</BODY
>
<!-- Mirrored from liso.cs.pusan.ac.kr by HTTrack Website Copier/3.x [XR&CO'2001] -->
</HTML
>
