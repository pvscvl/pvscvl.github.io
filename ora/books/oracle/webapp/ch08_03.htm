<HTML
><HEAD
><TITLE
>[Chapter 8] 8.3 Example 2: A Discussion Forum</TITLE
><META
NAME="DC.Creator"
CONTENT="Andrew Odewahn"><META
NAME="DC.Date"
CONTENT="2000-04-29T18:37:26Z"><META
NAME="DC.Format"
CONTENT="text/html"
SCHEME="MIME"><META
NAME="DC.Identifier"
CONTENT="O'Reilly and Associates CDROM-1-56592-687-0E"><META
NAME="DC.Language"
CONTENT="en-US"><META
NAME="DC.Publisher"
CONTENT="O'Reilly &amp; Associates, Inc."><META
NAME="DC.Source"
CONTENT="1-56592-687-0E"
SCHEME="ISBN"><META
NAME="DC.Subject.Keyword"
CONTENT="Oracle Web 8i"><META
NAME="DC.Title"
CONTENT="Oracle Web Applications: PL/SQL Developer's Introduction"><META
NAME="DC.Type"
CONTENT="Text.Monograph"><META
NAME="generator"
CONTENT="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><LINK
REL="stylesheet"
TYPE="text/css"
HREF="../style/style1.css"><LINK
REV="made"
HREF="mailto:online-books@oreilly.com"
TITLE="Online Books Comments"><LINK
REL="up"
HREF="ch08_01.htm"
TITLE="8. Developing Applications"><LINK
REL="prev"
HREF="ch08_02.htm#BOOK-CH-8-SECT-2.4"
TITLE="8.2 Example 1: An Anonymous Survey"><LINK
REL="next"
HREF="ch09_01.htm"
TITLE="9. XML"></HEAD
><BODY
><DIV
CLASS="htmlnav"
><H1
><IMG
SRC="gifs/smbanner.gif"
ALT="Oracle Web Applications: PL/SQL Developer's Introduction"
USEMAP="#srchmap"
BORDER="0"></H1
><MAP
NAME="srchmap"
><AREA
SHAPE="RECT"
COORDS="0,0,466,65"
HREF="index.htm"
ALT="Oracle Web Applications: PL/SQL Developer's Introduction"><AREA
SHAPE="RECT"
COORDS="467,0,514,18"
HREF="jobjects/fsearch.htm"
ALT="Search this book"></MAP
><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch08_02.htm#BOOK-CH-8-SECT-2.4"
TITLE="8.2 Example 1: An Anonymous Survey"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 8.2 Example 1: An Anonymous Survey"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><SPAN
CLASS="NAVTITLE"
><A
CLASS="chapter"
REL="up"
HREF="ch08_01.htm"
TITLE="8. Developing Applications"
>Chapter 8<BR>Developing Applications</A
></SPAN
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="chapter"
HREF="ch09_01.htm"
TITLE="9. XML"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 9. XML"
BORDER="0"></A
></TD
></TR
></TABLE
>&nbsp;<HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"></DIV
><DIV
CLASS="sect1"
><H2
CLASS="sect1"
><A
CLASS="title"
NAME="BOOK-CH-8-SECT-3"
>8.3 Example 2: A Discussion Forum</A
></H2
><P
CLASS="para"
> <A
CLASS="indexterm"
NAME="AUTOID-7005"
></A
> <A
CLASS="indexterm"
NAME="AUTOID-7007"
></A
> Our second, more complex example allows users to post messages in a browser-based threaded discussion forum. The granddaddy of all discussion lists, Usenet, allows the Internet community to share its views on literally thousands of topics, ranging from C programming to <EM
CLASS="emphasis"
>The X-Files</EM
>. A more focused list, run by RevealNet at <A
CLASS="systemitem.url"
HREF="../../../../../../../www.revealnet.com/"
>http://www.revealnet.com</A
>, is geared to PL/SQL developers. </P
><P
CLASS="para"
>The system presented here is based loosely on the forums run by the online version of <EM
CLASS="emphasis"
>InfoWorld</EM
> computer magazine (<A
CLASS="systemitem.url"
HREF="../../../../../../../www.infoworld.com/"
>http://www.infoworld.com</A
>). Each week, the editors at <EM
CLASS="emphasis"
>InfoWorld</EM
> select a number of topical issues in the computer industry for its readers to discuss. These forums allow registered users to express their opinions on both the forum topic and the posts from other readers. <A
CLASS="xref"
HREF="ch08_03.htm#BOOK-CH-8-SECT-3.4"
>Figure 8.8</A
> shows the user interface for the discussion forum we'll develop in this section. </P
><H4
CLASS="figure"
><A
CLASS="title"
NAME="BOOK-CH-8-FIG-8"
>Figure 8.8: A typical discussion list</A
></H4
><IMG
CLASS="graphic"
SRC="figs/owa.0808.gif"
ALT="Figure 8.8"><P
CLASS="para"
>A vibrant internal discussion forum is a great way for users and developers to communicate simply and efficiently. For example, a forum about an IS application provides users with the ability to report bugs (e.g., "the total dollars on this report should be double-underlined") and suggest new, potentially interesting ideas ("It'd be cool if we could click on the client number and get an AR report"). Monitoring these discussions can help you design better systems and establish your department, or at least you, as responsive and customer friendly. </P
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="BOOK-CH-8-SECT-3.1"
>8.3.1 Storyboard</A
></H3
><P
CLASS="para"
>Our system follows a well-established format. Users begin at a login screen where they provide a username and password. To allow users to express both personality and anonymity in their postings, we'll create our own list of users and not use the OWA_SEC package described in <A
CLASS="xref"
HREF="ch07_01.htm"
>Chapter 7, <CITE
CLASS="chapter"
>The PL/SQL Toolkit</CITE
></A
>. (This also saves the DBA from user maintenance.) Of course, the downside is that you now have a new list of users, possibly increasing maintenance. However, building maintenance features into the system (such as allowing a user to create a new account) helps shift the burden some so that users are maintaining their own information. </P
><P
CLASS="para"
>Initially, a user must enroll in the system and provide some optional information, such as a real name, an email address, and a personal description. Once the user logs in, he is presented with a list of the various forums. He can choose to create a new forum topic or respond to a previous post. If he chooses to create a forum, he is brought to a screen where he can enter the forum subject and its topic. If he chooses to view a forum discussion, he is brought to a list of all the previous responses. </P
><P
CLASS="para"
>These posts are arranged hierarchically, meaning that responses to a particular post are indented beneath the original message. Each post shows the subject of the message, the author, and the date it was created. Clicking one of these posts presents its full text, as well as a hyperlink labeled "Respond." Clicking the link allows the user to enter a response to the message. <A
CLASS="xref"
HREF="ch08_03.htm#BOOK-CH-8-SECT-3.4"
>Figure 8.9</A
> shows the storyboard for the system. </P
><H4
CLASS="figure"
><A
CLASS="title"
NAME="BOOK-CH-8-FIG-9"
>Figure 8.9: A storyboard for a threaded discussion list</A
></H4
><IMG
CLASS="graphic"
SRC="figs/owa.0809.gif"
ALT="Figure 8.9"></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="BOOK-CH-8-SECT-3.2"
>8.3.2 Data Model</A
></H3
><P
CLASS="para"
> <A
CLASS="indexterm"
NAME="AUTOID-7034"
></A
> <A
CLASS="indexterm"
NAME="AUTOID-7037"
></A
> <A
CLASS="xref"
HREF="ch08_03.htm#BOOK-CH-8-SECT-3.4"
>Figure 8.10</A
> shows a straightforward data design for the discussion list. The first table we'll need is one to hold information about the forum members. The table, called MEMBERS, contains fields for the username, password, real name, and a personal description. All fields except the username are optional. </P
><H4
CLASS="figure"
><A
CLASS="title"
NAME="BOOK-CH-8-FIG-10"
>Figure 8.10: The data model for the discussion forum system</A
></H4
><IMG
CLASS="graphic"
SRC="figs/owa.0810.gif"
ALT="Figure 8.10"><P
CLASS="para"
>The second table, named MESSAGES, holds the posts submitted by the forum members. Its fields include a primary key based on a sequence value, the username of the member who submitted the message, a subject line, and the text of the message itself. To represent the hierarchical relationship between the messages, MEMBERS is defined recursively: an additional field must hold the primary key of the message's parent. </P
><P
CLASS="para"
>Notice that it isn't necessary to create a separate table to hold the forums. Instead, we can simply treat a forum as a message that is the root of a thread of other messages. By convention, we'll differentiate a forum from a normal post by setting its parent field to zero. </P
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="BOOK-CH-8-SECT-3.3"
>8.3.3 Implementation Notes</A
></H3
><P
CLASS="para"
>The threaded discussion list is complex enough that we should break it into simpler parts. The storyboard suggests at least two components: a package to register new members and a package to display the discussion list itself. Breaking the system into pieces lets us tackle the problem in discrete, logical steps. </P
><P
CLASS="para"
>In the next sections, we'll implement the system using three packages. The first package, GENERAL_FORM, will contain useful formatting procedures that are shared between the other packages. The second package, FORUM_USERS, will handle user management. The third package, FORUM, will handle all the code needed to allow users to post and view messages. <A
CLASS="xref"
HREF="ch08_03.htm#BOOK-CH-8-SECT-3.4"
>Table 8.2</A
> shows these packages with their procedures. </P
><BR><TABLE
CLASS="table"
BORDER="1"
CELLPADDING="3"
><CAPTION
CLASS="table"
><A
CLASS="title"
NAME="BOOK-CH-8-TABLE-4"
>Table 8.2: The Discussion Forum Packages </A
></CAPTION
><THEAD
CLASS="thead"
><TR
CLASS="row"
VALIGN="TOP"
><TH
CLASS="entry"
ALIGN="LEFT"
ROWSPAN="1"
COLSPAN="1"
> <P
CLASS="para"
>Package</P
> </TH
><TH
CLASS="entry"
ALIGN="LEFT"
ROWSPAN="1"
COLSPAN="1"
> <P
CLASS="para"
>Procedures</P
> </TH
><TH
CLASS="entry"
ALIGN="LEFT"
ROWSPAN="1"
COLSPAN="1"
> <P
CLASS="para"
>Description</P
> </TH
></TR
></THEAD
><TBODY
CLASS="tbody"
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
> <P
CLASS="para"
> <A
CLASS="indexterm"
NAME="AUTOID-7068"
></A
> GENERAL_FORM</P
> </TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
> <P
CLASS="para"
>print_input_row</P
>  <P
CLASS="para"
>print_textarea_row</P
> </TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
> <P
CLASS="para"
>Contains formatting procedures for the various forum procedures</P
> </TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
> <P
CLASS="para"
> <A
CLASS="indexterm"
NAME="AUTOID-7078"
></A
> FORUM_USERS</P
> </TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
> <P
CLASS="para"
>login_form</P
>  <P
CLASS="para"
>login</P
>  <P
CLASS="para"
>get_current_user</P
>  <P
CLASS="para"
>create_user_form</P
>  <P
CLASS="para"
>save_user_info</P
> </TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
> <P
CLASS="para"
>Handles user management for the forum</P
> </TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
> <P
CLASS="para"
> <A
CLASS="indexterm"
NAME="AUTOID-7091"
></A
> FORUM</P
> </TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
> <P
CLASS="para"
>print_thread_links</P
>  <P
CLASS="para"
>current_forum_list</P
>  <P
CLASS="para"
>view_message</P
>  <P
CLASS="para"
>create_msg_form</P
>  <P
CLASS="para"
>save_message</P
> </TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
> <P
CLASS="para"
>Handles users' posting and viewing of forum messages</P
> </TD
></TR
></TBODY
></TABLE
><P
CLASS="para"
>Finally, we'll create all the application's objects (tables, packages, etc.) in a database schema named DISC_LIST. </P
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="BOOK-CH-8-SECT-3.4"
>8.3.4 The GENERAL_FORM Package</A
></H3
><P
CLASS="para"
> <A
CLASS="indexterm"
NAME="AUTOID-7105"
></A
> The GENERAL_FORM package contains two procedures that format form input elements into an HTML table. Both do the following basic things: </P
><UL
CLASS="itemizedlist"
><LI
CLASS="listitem"
><P
CLASS="para"
>Open a new table row.</P
></LI
><LI
CLASS="listitem"
><P
CLASS="para"
>Print the passed label in the first column.</P
></LI
><LI
CLASS="listitem"
><P
CLASS="para"
>Print an input element in the second column; the element's attributes are set using the various parameters. </P
></LI
></UL
><P
CLASS="para"
>Conceptually similar to the HTP package procedures, the GENERAL_FORM procedures use parameters to set the tag attributes. Creating a library of simple procedures like these can encapsulate line after line of clumsy HTML code in a single call, resulting in cleaner and shorter programs. <A
CLASS="xref"
HREF="ch08_03.htm#BOOK-CH-8-SECT-3.4"
>Table 8.3</A
> shows the procedures and functions of the GENERAL_FORM package. </P
><BR><TABLE
CLASS="table"
BORDER="1"
CELLPADDING="3"
><CAPTION
CLASS="table"
><A
CLASS="title"
NAME="BOOK-CH-8-TABLE-6"
>Table 8.3: The GENERAL_FORM Procedures</A
></CAPTION
><THEAD
CLASS="thead"
><TR
CLASS="row"
VALIGN="TOP"
><TH
CLASS="entry"
ALIGN="LEFT"
ROWSPAN="1"
COLSPAN="1"
> <P
CLASS="para"
>Procedure</P
> </TH
><TH
CLASS="entry"
ALIGN="LEFT"
ROWSPAN="1"
COLSPAN="1"
> <P
CLASS="para"
>Parameters</P
> </TH
><TH
CLASS="entry"
ALIGN="LEFT"
ROWSPAN="1"
COLSPAN="1"
> <P
CLASS="para"
>Description</P
> </TH
></TR
></THEAD
><TBODY
CLASS="tbody"
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
> <P
CLASS="para"
> <A
CLASS="indexterm"
NAME="AUTOID-7134"
></A
> print_input_row</P
> </TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
> <P
CLASS="para"
>i_label IN VARCHAR2</P
>  <P
CLASS="para"
>i_input_name IN VARCHAR2</P
>  <P
CLASS="para"
>i_hidden_flag IN BOOLEAN</P
>  <P
CLASS="para"
>  DEFAULT TRUE</P
>  <P
CLASS="para"
>i_size IN NUMBER DEFAULT 40</P
>  <P
CLASS="para"
>i_value IN VARCHAR2 DEFAULT </P
>  <P
CLASS="para"
>  NULL</P
> </TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
> <P
CLASS="para"
>Formats a text input box using a table</P
> </TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
> <P
CLASS="para"
><A
CLASS="indexterm"
NAME="AUTOID-7149"
></A
> print_textarea_row</P
> </TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
> <P
CLASS="para"
>i_label IN VARCHAR2</P
>  <P
CLASS="para"
>i_input_name IN VARCHAR2</P
>  <P
CLASS="para"
>i_cols IN NUMBER DEFAULT 40</P
>  <P
CLASS="para"
>i_rows IN NUMBER DEFAULT 7</P
> </TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
> <P
CLASS="para"
>Formats a textarea input box using a table</P
> </TD
></TR
></TBODY
></TABLE
><DIV
CLASS="sect3"
><H4
CLASS="sect3"
><A
CLASS="title"
NAME="BOOK-CH-8-SECT-3.4.1"
>8.3.4.1 Specification</A
></H4
><P
CLASS="para"
>Here's the specification for the GENERAL_FORM package:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>/* Formatted by PL/Formatter v.1.1.13 */
CREATE OR REPLACE PACKAGE general_form
IS

   PROCEDURE print_input_row (
      i_label IN VARCHAR2,
      i_input_name IN VARCHAR2,
      i_hidden_flag IN BOOLEAN DEFAULT FALSE,
      i_size IN NUMBER DEFAULT 40,
      i_value IN VARCHAR2 DEFAULT NULL
      );
   
   PROCEDURE print_textarea_row (
      i_label IN VARCHAR2,
      i_input_name IN VARCHAR2,
      i_cols IN NUMBER DEFAULT 40,
      i_rows IN NUMBER DEFAULT 7
      );

END;</PRE
></BLOCKQUOTE
></DIV
><DIV
CLASS="sect3"
><H4
CLASS="sect3"
><A
CLASS="title"
NAME="BOOK-CH-8-SECT-3.4.2"
>8.3.4.2 Body</A
></H4
><P
CLASS="para"
>The GENERAL_FORM procedures are simple enough that they don't require any annotation. Here's the code: </P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>/* Formatted by PL/Formatter v.1.1.13 */
CREATE OR REPLACE PACKAGE BODY general_form
IS
   
   /*
   || Prints a single two-column table row; 
   ||    Column 1 is description,
   ||    Column 2 has either an input element plain text
   */
   PROCEDURE print_input_row (
      i_label IN VARCHAR2,
      i_input_name IN VARCHAR2,
      i_hidden_flag IN BOOLEAN DEFAULT FALSE,
      i_size IN NUMBER DEFAULT 40,
      i_value IN VARCHAR2 DEFAULT NULL
      )
   IS
   BEGIN
      HTP.print ('&lt;tr&gt;');
      HTP.print ('&lt;th align=right&gt;' || i_label || ':&lt;/th&gt;');
      HTP.print ('&lt;td&gt;');
      IF NOT i_hidden_flag
      THEN
         HTP.formtext (
            cname =&gt; i_input_name,
            csize =&gt; i_size,
            cvalue =&gt; i_value
         );
      ELSE
         HTP.formpassword (
            cname =&gt; i_input_name,
            cvalue =&gt; i_value
         );
      END IF;
      HTP.print ('&lt;/td&gt;');
      HTP.print ('&lt;/tr&gt;');
   END;
   
   /*
   || Create a two-column table
   ||    Column 1 is description
   ||    Column 2 is a &lt;textarea&gt; field
   */
   PROCEDURE print_textarea_row (
      i_label IN VARCHAR2,
      i_input_name IN VARCHAR2,
      i_cols IN NUMBER DEFAULT 40,
      i_rows IN NUMBER DEFAULT 7
      )
   IS
   BEGIN
      HTP.print ('&lt;tr&gt;');
      HTP.print ('&lt;th align=right&gt;' || i_label || ':&lt;/th&gt;');
      HTP.print ('&lt;td&gt;');
      HTP.formtextarea (i_input_name, i_rows, i_cols);
      HTP.print ('&lt;/td&gt;&lt;/tr&gt;');
      HTP.print ('&lt;/table&gt;');
   END;
END;</PRE
></BLOCKQUOTE
></DIV
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="BOOK-CH-8-SECT-3.5"
>8.3.5 The FORUM_USERS Package</A
></H3
><P
CLASS="para"
> <A
CLASS="indexterm"
NAME="ch-08-forum_users"
></A
> Our second package, FORUM_USERS, will implement the user management portions of our discussion list. It performs two basic functions: user authentication and user enrollment. The authentication code is responsible for displaying a login form, verifying the username and password, and setting a cookie to save the username throughout the user's session. The enrollment code is responsible for displaying a user information screen and saving that data in the MEMBERS table. </P
><P
CLASS="para"
>One thing to note about the enrollment system is that it only inserts new users; once created, a user cannot update his profile. Although it would be relatively straightforward to also update a row, doing so would require considerably more code. Since updating a row adds little that is interesting to the example, users of the application in its current state (after all, this is just an example) simply have to make sure they spell their names right on the first try! </P
><P
CLASS="para"
><A
CLASS="xref"
HREF="ch08_03.htm#BOOK-CH-8-SECT-3.4"
>Table 8.4</A
> shows the procedures and functions of the FORUM_USERS package. </P
><BR><TABLE
CLASS="table"
BORDER="1"
CELLPADDING="3"
><CAPTION
CLASS="table"
><A
CLASS="title"
NAME="BOOK-CH-8-TABLE-8"
>Table 8.4: The FORUM_USERS Procedures and Functions </A
></CAPTION
><THEAD
CLASS="thead"
><TR
CLASS="row"
VALIGN="TOP"
><TH
CLASS="entry"
ALIGN="LEFT"
ROWSPAN="1"
COLSPAN="1"
> <P
CLASS="para"
>Procedure/Function</P
> </TH
><TH
CLASS="entry"
ALIGN="LEFT"
ROWSPAN="1"
COLSPAN="1"
> <P
CLASS="para"
>Parameters</P
> </TH
><TH
CLASS="entry"
ALIGN="LEFT"
ROWSPAN="1"
COLSPAN="1"
> <P
CLASS="para"
>Description</P
> </TH
></TR
></THEAD
><TBODY
CLASS="tbody"
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
> <P
CLASS="para"
>login_form <A
CLASS="indexterm"
NAME="AUTOID-7192"
></A
> <A
CLASS="indexterm"
NAME="AUTOID-7194"
></A
> </P
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
> <P
CLASS="para"
>i_username IN VARCHAR2 </P
>  <P
CLASS="para"
>  DEFAULT NULL</P
>  <P
CLASS="para"
>i_message IN VARCHAR2 </P
>  <P
CLASS="para"
>  DEFAULT NULL</P
> </TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
> <P
CLASS="para"
>Creates a login screen for users</P
> </TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
> <P
CLASS="para"
>login <A
CLASS="indexterm"
NAME="AUTOID-7207"
></A
> <A
CLASS="indexterm"
NAME="AUTOID-7209"
></A
> </P
> </TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
> <P
CLASS="para"
>i_username IN VARCHAR2</P
>  <P
CLASS="para"
>i_password IN VARCHAR2</P
> </TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
> <P
CLASS="para"
>Verifies the user's login</P
> </TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
> <P
CLASS="para"
> <A
CLASS="indexterm"
NAME="AUTOID-7220"
></A
> <A
CLASS="indexterm"
NAME="AUTOID-7223"
></A
> get_current_user</P
> </TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
> <P
CLASS="para"
>None</P
> </TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
> <P
CLASS="para"
>Assigns the author of a message</P
> </TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
> <P
CLASS="para"
> <A
CLASS="indexterm"
NAME="AUTOID-7232"
></A
> <A
CLASS="indexterm"
NAME="AUTOID-7235"
></A
> create_user_form</P
> </TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
> <P
CLASS="para"
>None</P
> </TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
> <P
CLASS="para"
>Displays the data entry form to create a new user</P
> </TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
> <P
CLASS="para"
> <A
CLASS="indexterm"
NAME="AUTOID-7244"
></A
>save_user_info <A
CLASS="indexterm"
NAME="AUTOID-7247"
></A
>save_user_info</P
> </TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
> <P
CLASS="para"
>i_username IN VARCHAR2 </P
>  <P
CLASS="para"
>  DEFAULT NULL</P
>  <P
CLASS="para"
>i_name IN VARCHAR2 </P
>  <P
CLASS="para"
>  DEFAULT NULL</P
>  <P
CLASS="para"
>i_password IN VARCHAR2 </P
>  <P
CLASS="para"
>  DEFAULT NULL</P
>  <P
CLASS="para"
>i_email_address IN VARCHAR2 </P
>  <P
CLASS="para"
>  DEFAULT NULL</P
>  <P
CLASS="para"
>i_desc IN VARCHAR2 </P
>  <P
CLASS="para"
>  DEFAULT NULL</P
> </TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
> <P
CLASS="para"
>Inserts new user data into the MEMBERS table</P
> </TD
></TR
></TBODY
></TABLE
><DIV
CLASS="sect3"
><H4
CLASS="sect3"
><A
CLASS="title"
NAME="BOOK-CH-8-SECT-3.5.1"
>8.3.5.1 Specification</A
></H4
><P
CLASS="para"
>The leftmost portion of the storyboard lays out how users log in to the system. By referring back to the diagram, we can see that we need at least three procedures in the specification: a procedure to create the login form itself (login_form); one to enroll new users (create_user_form); and one to insert the new user's information into the MEMBERS table (save_user_info). Since HTTP is a stateless protocol, we'll also need a function to pass the user's login name to the package that implements the discussion list code. This function is named get_current_user. </P
><P
CLASS="para"
>Here's the specification for FORUM_USERS:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>/* Formatted by PL/Formatter v.1.1.13 */
CREATE OR REPLACE PACKAGE forum_users
IS
   
   PROCEDURE login_form (
      i_username IN VARCHAR2 DEFAULT NULL,
      i_message IN VARCHAR2 DEFAULT 'Please Log-In'
      );
   
   PROCEDURE login (
      i_username IN VARCHAR2,
      i_password IN VARCHAR2
      );
   
   FUNCTION get_current_user
      RETURN VARCHAR2;
   
   PROCEDURE create_user_form;
   
   PROCEDURE save_user_info (
      i_username IN VARCHAR2 DEFAULT NULL,
      i_name IN VARCHAR2 DEFAULT NULL,
      i_password IN VARCHAR2 DEFAULT NULL,
      i_email_address IN VARCHAR2 DEFAULT NULL,
      i_desc IN VARCHAR2 DEFAULT NULL
      );
END;</PRE
></BLOCKQUOTE
></DIV
><DIV
CLASS="sect3"
><H4
CLASS="sect3"
><A
CLASS="title"
NAME="BOOK-CH-8-SECT-3.5.2"
>8.3.5.2 Body</A
></H4
><P
CLASS="para"
>In the following sections, we'll develop each procedure in the specification for USER_FORUM. </P
><DIV
CLASS="sect4"
><H4
CLASS="sect4"
><A
CLASS="title"
NAME="BOOK-CH-8-SECT-3.5.2.1"
>8.3.5.2.1 The login_form procedure.</A
></H4
><P
CLASS="para"
> <A
CLASS="indexterm"
NAME="AUTOID-7273"
></A
> <A
CLASS="indexterm"
NAME="AUTOID-7276"
></A
> This procedure creates a login screen that has three elements: a username field, a password field,[<A
CLASS="footnote"
HREF="#AUTOID-7278"
>2</A
>] and a hyperlink used to enroll as a new user. The procedure has two parameters: the first parameter, i_username, sets the default text of the username. The second parameter, i_message, is used to change the message displayed on the form; this gives us added flexibility so that the form can serve multiple purposes. Note how this procedure calls the GENERAL_FORM package to create and format the form input elements: </P
><BLOCKQUOTE
CLASS="footnote"
><DIV
CLASS="footnote"
><P
CLASS="para"
><A
CLASS="footnote"
NAME="AUTOID-7278"
>[2]</A
> While the HTML <CODE
CLASS="literal"
>password</CODE
> attribute adds a measure of security to the password field, it's important to remember that the text has only been masked, not encrypted! When the user submits the form, hackers can use a program called a <I
CLASS="firstterm"
>packet sniffer</I
> to intercept and read the password. Your database administrator or webmaster must secure your site with a tool such as SSL to prevent this possibility.</P
></DIV
></BLOCKQUOTE
><BLOCKQUOTE
><PRE
CLASS="programlisting"
> PROCEDURE login_form (
   i_username IN VARCHAR2 DEFAULT NULL,
   i_message IN VARCHAR2 DEFAULT 'Please Log-In'
   )
IS

BEGIN
   HTP.print ('&lt;body bgcolor=white&gt;');
   HTP.print ('&lt;h1&gt;' || i_message || '&lt;/h1&gt;');
   HTP.print ('&lt;form action=forum_users.login&gt;');
   general_form.print_input_row (
      'Forum User Name',
      'i_username',
      FALSE,
      30,
      i_username
   );
   general_form.print_input_row (
      'Forum Password',
      'i_password',
      TRUE
   );
   HTP.print ('&lt;/table&gt;');
   HTP.formsubmit (cvalue =&gt; 'Login');
   HTP.print ('&lt;/form&gt;');
   HTP.print ('&lt;p&gt;&lt;p&gt;');
   HTP.anchor (
      'forum_users.create_user_form',
      'Enroll as a new user'
   );
END;	</PRE
></BLOCKQUOTE
><P
CLASS="para"
><A
CLASS="xref"
HREF="ch08_03.htm#BOOK-CH-8-SECT-3.4"
>Figure 8.11</A
> shows the output of the login_form procedure. </P
><H4
CLASS="figure"
><A
CLASS="title"
NAME="BOOK-CH-8-FIG-11"
>Figure 8.11: The forum login screen</A
></H4
><IMG
CLASS="graphic"
SRC="figs/owa.0811.gif"
ALT="Figure 8.11"></DIV
><DIV
CLASS="sect4"
><H4
CLASS="sect4"
><A
CLASS="title"
NAME="BOOK-CH-8-SECT-3.5.2.2"
>8.3.5.2.2 The login procedure.</A
></H4
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="AUTOID-7291"
></A
> <A
CLASS="indexterm"
NAME="AUTOID-7293"
></A
> This procedure, called when the user submits the information from the login form, is the gateway to the FORUM package, which we'll describe later. The procedure begins by calling the verify_user function to determine if the person has entered a valid username and password. If the user has done this, login executes the set_user procedure, which saves the user's login name in a cookie named forum_user, then calls the procedure to display the forum topic list. </P
><BLOCKQUOTE
CLASS="note"
><P
CLASS="para"
><STRONG
>NOTE:</STRONG
> Since cookies are relatively easy to hack, this approach is very insecure. For a system in which security (in the "I wanna keep out the bad guys" meaning of the word) is a serious issue, you would also need to use a protocol like SSL or HTTP and set the cookies to expire so they aren't saved on the user's machine. </P
></BLOCKQUOTE
><P
CLASS="para"
>If the user has entered an invalid username or password, the procedure calls login_form to display an error message along with the original login form: </P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>/*
|| Check to see if username and password are valid
*/
FUNCTION verify_user (
   i_username IN VARCHAR2,
   i_password IN VARCHAR2
   )
   RETURN BOOLEAN
IS
   
   match_count NUMBER := 0;

BEGIN
   SELECT COUNT (*)
     INTO match_count
     FROM members
    WHERE username = i_username
      AND password = i_password;
   IF match_count = 1
   THEN
      RETURN TRUE;
   ELSE
      RETURN FALSE;
   END IF;
END;

/*
|| Save username into a cookie
*/
PROCEDURE set_user (i_username IN VARCHAR2)
IS
BEGIN
   OWA_UTIL.mime_header ('text/html', FALSE);
   OWA_COOKIE.send ('forum_user', i_username);
   OWA_UTIL.http_header_close;
END;

/*
|| Main procedure -- perform logic test and take 
|| appropriate action
*/
PROCEDURE login (i_username IN VARCHAR2, i_password IN VARCHAR2)
IS
BEGIN
   IF verify_user (i_username, i_password)
   THEN
      set_user (i_username);
      forum.current_forum_list;
   ELSE
      login_form (i_username, 'Username/Password not found');
   END IF;
END;	 	  </PRE
></BLOCKQUOTE
></DIV
><DIV
CLASS="sect4"
><H4
CLASS="sect4"
><A
CLASS="title"
NAME="BOOK-CH-8-SECT-3.5.2.3"
>8.3.5.2.3 The get_current_user function. </A
></H4
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="AUTOID-7303"
></A
> <A
CLASS="indexterm"
NAME="AUTOID-7306"
></A
> This function, the third block of code in the FORUM_USERS package, fetches and returns the original username stored in the forum_user cookie. The function is used by the FORUM package to assign the author of a message. While this function could also go in the actual FORUM package, there's a nice symmetry to keeping all functions that act on the same data structure (in this case, a cookie) together in the same package. Here's the code: </P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>FUNCTION get_current_user
   RETURN VARCHAR2
IS
   cookie OWA_COOKIE.cookie;
   ret_val VARCHAR2(50) DEFAULT NULL;
BEGIN
   cookie := OWA_COOKIE.get ('forum_user');
   IF cookie.num_vals != 0
   THEN
      ret_val := cookie.vals (1);
   END IF;
   RETURN ret_val;
END;</PRE
></BLOCKQUOTE
></DIV
><DIV
CLASS="sect4"
><H4
CLASS="sect4"
><A
CLASS="title"
NAME="BOOK-CH-8-SECT-3.5.2.4"
>8.3.5.2.4 The create_user_form procedure</A
></H4
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="AUTOID-7312"
></A
> <A
CLASS="indexterm"
NAME="AUTOID-7315"
></A
> This procedure displays the data entry form to create a new user. This screen, which the storyboard labels as "Fill out form to enroll as new user," is displayed when the user clicks "Enroll as a new user" on the login form. Here's the code: </P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>PROCEDURE create_user_form
IS
BEGIN
   HTP.print ('&lt;body bgcolor=white&gt;');
   HTP.print ('&lt;h1&gt;Welcome, New User!&lt;/h1&gt;&lt;hr&gt;');
   HTP.print ('&lt;form action=forum_users.save_user_info&gt;');
   -- Existing users cannot change their name or username
   HTP.print ('&lt;table&gt;');
   general_form.print_input_row (
      'Forum User Name',
      'i_username'
   );
   general_form.print_input_row ('Real Name', 'i_name');
   general_form.print_input_row (
      'Forum Password',
      'i_password',
      TRUE
   );
   general_form.print_input_row (
      'Email Address',
      'i_email_address'
   );
   general_form.print_textarea_row ('Description', 'i_desc');
   HTP.print ('&lt;/table&gt;');
   HTP.formsubmit (cvalue =&gt; 'Create New User Profile');
   HTP.print ('&lt;/form&gt;');
END;	</PRE
></BLOCKQUOTE
><P
CLASS="para"
><A
CLASS="xref"
HREF="ch08_03.htm#BOOK-CH-8-SECT-3.4"
>Figure 8.12</A
> shows the output generated by the procedure. </P
><H4
CLASS="figure"
><A
CLASS="title"
NAME="BOOK-CH-8-FIG-12"
>Figure 8.12: The "add new user" screen</A
></H4
><IMG
CLASS="graphic"
SRC="figs/owa.0812.gif"
ALT="Figure 8.12"></DIV
><DIV
CLASS="sect4"
><H4
CLASS="sect4"
><A
CLASS="title"
NAME="BOOK-CH-8-SECT-3.5.2.5"
>8.3.5.2.5 The save_user_info procedure.</A
></H4
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="AUTOID-7326"
></A
> <A
CLASS="indexterm"
NAME="AUTOID-7329"
></A
> This procedure, the last procedure in the FORUM_USERS package, attempts to insert the data entered on the "Create User" form into the MEMBERS table after the user presses the "Create New User Profile" button. If the insert is successful, the procedure calls set_user to save the new username and calls the procedure to display the forum list. If the insert fails, either because the user already exists or because there is some other error, the exception section prints an appropriate error message. <A
CLASS="indexterm"
NAME="AUTOID-7331"
></A
> </P
><P
CLASS="para"
>Here's the code:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>PROCEDURE save_user_info (
   i_username IN VARCHAR2 DEFAULT NULL,
   i_name IN VARCHAR2 DEFAULT NULL,
   i_password IN VARCHAR2 DEFAULT NULL,
   i_email_address IN VARCHAR2 DEFAULT NULL,
   i_desc IN VARCHAR2 DEFAULT NULL
   )
IS
BEGIN
   -- Create the new user
   INSERT INTO members (
      username,
      password,
      name,
      email_address,
      personal_desc
      )
        VALUES (
           i_username,
           i_password,
           i_name,
           i_email_address,
           i_desc
        );
   COMMIT;
   set_user (i_username);
   forum.current_forum_list;
EXCEPTION
   WHEN DUP_VAL_ON_INDEX
   THEN
      HTP.print ('&lt;h1&gt;User already exists!&lt;/h1&gt;');
   WHEN OTHERS
   THEN
      HTP.print ('&lt;h1&gt;An unidentified error occurred!&lt;/h1&gt;');
END;</PRE
></BLOCKQUOTE
></DIV
></DIV
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="BOOK-CH-8-SECT-3.6"
>8.3.6 The FORUM Package</A
></H3
><P
CLASS="para"
>Now that we've built our supporting packages, we can turn our attention to the real meat of the application. The FORUM package displays and manipulates the records in the MESSAGES table. <A
CLASS="xref"
HREF="ch08_03.htm#BOOK-CH-8-SECT-3.4"
>Table 8.5</A
> shows the procedures in the FORUM package. </P
><BR><TABLE
CLASS="table"
BORDER="1"
CELLPADDING="3"
><CAPTION
CLASS="table"
><A
CLASS="title"
NAME="BOOK-CH-8-TABLE-10"
>Table 8.5: The FORUM Procedures </A
></CAPTION
><THEAD
CLASS="thead"
><TR
CLASS="row"
VALIGN="TOP"
><TH
CLASS="entry"
ALIGN="LEFT"
ROWSPAN="1"
COLSPAN="1"
> <P
CLASS="para"
>Procedure</P
> </TH
><TH
CLASS="entry"
ALIGN="LEFT"
ROWSPAN="1"
COLSPAN="1"
> <P
CLASS="para"
>Parameters</P
> </TH
><TH
CLASS="entry"
ALIGN="LEFT"
ROWSPAN="1"
COLSPAN="1"
> <P
CLASS="para"
>Description</P
> </TH
></TR
></THEAD
><TBODY
CLASS="tbody"
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
> <P
CLASS="para"
> <A
CLASS="indexterm"
NAME="AUTOID-7357"
></A
> <A
CLASS="indexterm"
NAME="AUTOID-7360"
></A
> print_thread_links</P
> </TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
> <P
CLASS="para"
>i_thread_list IN VARCHAR2</P
>  <P
CLASS="para"
>i_expand_thread IN VARCHAR2</P
>  <P
CLASS="para"
>  DEFAULT `N'</P
> </TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
> <P
CLASS="para"
>Private procedure used for formatting other procedures</P
> </TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
> <P
CLASS="para"
> <A
CLASS="indexterm"
NAME="AUTOID-7371"
></A
> <A
CLASS="indexterm"
NAME="AUTOID-7374"
></A
> current_forum_list</P
> </TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
> <P
CLASS="para"
>None</P
> </TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
> <P
CLASS="para"
>Generates the list of available forums</P
> </TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
> <P
CLASS="para"
> <A
CLASS="indexterm"
NAME="AUTOID-7383"
></A
> <A
CLASS="indexterm"
NAME="AUTOID-7386"
></A
> view_message</P
> </TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
> <P
CLASS="para"
>i_thread_id IN VARCHAR2</P
>  <P
CLASS="para"
>  DEFAULT NULL</P
>  <P
CLASS="para"
>i_hierarchy_flag IN VARCHAR2</P
>  <P
CLASS="para"
>  DEFAULT NULL</P
> </TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
> <P
CLASS="para"
>Prints the full text of a message, a link for posting a response, and the threaded list of previous responses </P
> </TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
> <P
CLASS="para"
> <A
CLASS="indexterm"
NAME="AUTOID-7398"
></A
> <A
CLASS="indexterm"
NAME="AUTOID-7401"
></A
> create_msg_form</P
> </TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
> <P
CLASS="para"
>i_parent_msg IN VARCHAR2</P
>  <P
CLASS="para"
>  DEFAULT NULL</P
> </TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
> <P
CLASS="para"
>Creates an HTML form used to respond to a message</P
> </TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
> <P
CLASS="para"
> <A
CLASS="indexterm"
NAME="AUTOID-7411"
></A
> <A
CLASS="indexterm"
NAME="AUTOID-7414"
></A
> save_message</P
> </TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
> <P
CLASS="para"
>i_parent_msg IN VARCHAR2</P
>  <P
CLASS="para"
>  DEFAULT NULL</P
>  <P
CLASS="para"
>i_subject IN VARCHAR2</P
>  <P
CLASS="para"
>  DEFAULT NULL</P
>  <P
CLASS="para"
>i_msg_body IN VARCHAR2</P
>  <P
CLASS="para"
>  DEFAULT NULL</P
> </TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
> <P
CLASS="para"
>MESSAGES table</P
> </TD
></TR
></TBODY
></TABLE
><DIV
CLASS="sect3"
><H4
CLASS="sect3"
><A
CLASS="title"
NAME="BOOK-CH-8-SECT-3.6.1"
>8.3.6.1 Specification</A
></H4
><P
CLASS="para"
>We'll need four procedures: one to display a list of forum topics, one to view the full text of a message, one to create a message, and one to save the new message into the MESSAGES table. Here's the specification for FORUM that includes procedures for each of these tasks: </P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>/* Formatted by PL/Formatter v.1.1.13 */
CREATE OR REPLACE PACKAGE forum
IS
   
   PROCEDURE current_forum_list;
   
   PROCEDURE view_message (
      i_thread_id IN VARCHAR2 DEFAULT NULL,
      i_hierarchy_flag IN VARCHAR2 DEFAULT NULL
      );
   
   PROCEDURE create_msg_form (
      i_parent_msg IN VARCHAR2 DEFAULT NULL
      );
   
   PROCEDURE save_message (
      i_parent_msg IN VARCHAR2 DEFAULT NULL,
      i_subject IN VARCHAR2 DEFAULT NULL,
      i_msg_body IN VARCHAR2 DEFAULT NULL
      );

END;</PRE
></BLOCKQUOTE
></DIV
><DIV
CLASS="sect3"
><H4
CLASS="sect3"
><A
CLASS="title"
NAME="BOOK-CH-8-SECT-3.6.2"
>8.3.6.2 Body</A
></H4
><P
CLASS="para"
>In addition to implementing the procedures listed in the specification, the body of the FORUM package contains a private procedure called print_thread_links. Even though it can't be called directly from the Web, this procedure is used in all of FORUM's public procedures. Consequently, we'll begin by examining this private procedure, even though it's not declared in the specification. </P
><DIV
CLASS="sect4"
><H4
CLASS="sect4"
><A
CLASS="title"
NAME="BOOK-CH-8-SECT-3.6.2.1"
>8.3.6.2.1 The print_thread_links procedure.</A
></H4
><P
CLASS="para"
> <A
CLASS="indexterm"
NAME="AUTOID-7435"
></A
> <A
CLASS="indexterm"
NAME="AUTOID-7438"
></A
> This procedure calls itself recursively to produce the indented list of hyperlinked subject headers illustrated in <A
CLASS="xref"
HREF="ch08_03.htm#BOOK-CH-8-SECT-3.4"
>Figure 8.8</A
>. Clicking on one of these links displays the full body of the original message. </P
><P
CLASS="para"
>The procedure accepts two parameters. The first, i_thread_id, is the primary key (as defined in MESSAGES) for the root of the thread. The second parameter, i_expand_flag, is used to make the procedure expand the child elements under the root thread. If the flag is "Y," then the procedure will call itself again, this time using the ID of the child message as the new root thread. Here's the code: </P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>PROCEDURE print_thread_links (
   i_thread_id IN VARCHAR2,
   i_expand_thread IN VARCHAR2 DEFAULT 'N'
   )
IS
   
   CURSOR t_cur
   IS
      SELECT *
        FROM messages
       WHERE msg_parent = i_thread_id
       ORDER BY date_created;
   
   t_rec t_cur%ROWTYPE;
   link VARCHAR2(500);

BEGIN
   HTP.print ('&lt;h4&gt;');
   HTP.print ('&lt;ol&gt;');   -- Start a new ordered list
   OPEN t_cur;
   LOOP
      FETCH t_cur INTO t_rec;
      EXIT WHEN t_cur%notfound;
      HTP.print ('&lt;li&gt;');
      link := 'forum.view_message?i_thread_id=' || t_rec.msg_id;
      HTP.anchor (link, t_rec.msg_subject);
      HTP.italic ('(' ||
                  t_rec.msg_author ||
                  ',' ||
                  t_rec.date_created ||
                  ')');
      HTP.print ('&lt;/li&gt;');
      -- Recursively print the children if necessary
      IF i_expand_thread = 'Y'
      THEN
         print_thread_links (t_rec.msg_id, 'Y');
      END IF;
   END LOOP;
   HTP.print ('&lt;/ol&gt;');  -- End the ordered list
   HTP.print ('&lt;/h4&gt;');
   CLOSE t_cur;
END;	 </PRE
></BLOCKQUOTE
></DIV
><DIV
CLASS="sect4"
><H4
CLASS="sect4"
><A
CLASS="title"
NAME="BOOK-CH-8-SECT-3.6.2.2"
>8.3.6.2.2 The current_ forum_list procedure.</A
></H4
><P
CLASS="para"
> <A
CLASS="indexterm"
NAME="AUTOID-7446"
></A
> <A
CLASS="indexterm"
NAME="AUTOID-7449"
></A
> This procedure generates the list of available forums that serves as the main entry point of the forum system. From here, the user selects the forum topic that he or she would like to discuss. </P
><P
CLASS="para"
>If you'll recall from the <A
CLASS="xref"
HREF="ch08_02.htm#BOOK-CH-8-SECT-2.4"
>Section 8.2.2, "Data Model"</A
>" section, we defined a forum (as opposed to normal posts) as rows in the MESSAGES table where the parent column equals 0. current_forum_list works by passing the print_thread_links a value of for the root thread and a value of `N' for the expand flag, as shown in this example: </P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>PROCEDURE current_forum_list
IS
   link VARCHAR2(200);
BEGIN
   HTP.print ('&lt;body bgcolor=white&gt;');
   HTP.print ('&lt;h1&gt;Forums&lt;/h1&gt;&lt;br&gt;');
   link := 'forum.create_msg_form?i_parent_msg=0';
   HTP.anchor (link, 'Create a new forum');
   HTP.print ('&lt;hr&gt;');
   -- Print the threads, but do not recurse
   print_thread_links (0, 'N');
END;</PRE
></BLOCKQUOTE
><P
CLASS="para"
><A
CLASS="xref"
HREF="ch08_03.htm#BOOK-CH-8-SECT-3.4"
>Figure 8.13</A
> shows the output of the procedure.</P
><H4
CLASS="figure"
><A
CLASS="title"
NAME="BOOK-CH-8-FIG-13"
>Figure 8.13: The available forum list</A
></H4
><IMG
CLASS="graphic"
SRC="figs/owa.0813.gif"
ALT="Figure 8.13"></DIV
><DIV
CLASS="sect4"
><H4
CLASS="sect4"
><A
CLASS="title"
NAME="BOOK-CH-8-SECT-3.6.2.3"
>8.3.6.2.3 The view_message procedure.</A
></H4
><A
CLASS="indexterm"
NAME="AUTOID-7461"
></A
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="AUTOID-7465"
></A
> This procedure prints the full text of a message, a link that allows the user to post a response, and the threaded list of previous responses: </P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>PROCEDURE view_message (
   i_thread_id IN VARCHAR2 DEFAULT NULL,
   i_hierarchy_flag IN VARCHAR2 DEFAULT NULL
   )
IS
   
   m_rec messages%ROWTYPE;
   msg_found BOOLEAN;
   link VARCHAR2(500);
BEGIN
   SELECT *
     INTO m_rec
     FROM messages
    WHERE msg_id = i_thread_id
    ORDER BY date_created;
   HTP.print ('&lt;body bgcolor=white&gt;');
   HTP.print ('&lt;h2&gt;' || m_rec.msg_subject || '&lt;/h2&gt;');
   HTP.print ('&lt;i&gt;Posted by ' || m_rec.msg_author);
   HTP.print (' on ' || m_rec.date_created || '&lt;/i&gt;&lt;p&gt;');
   HTP.print ('&lt;h2&gt;Message:&lt;/h2&gt;&lt;p&gt;' || m_rec.msg_body || '&lt;p&gt;');
   link := 'forum.create_msg_form?i_parent_msg=' || i_thread_id;
   HTP.anchor (link, 'Respond');
   HTP.print ('&lt;h2&gt;Previous Responses:&lt;/h2&gt;&lt;p&gt;');
   print_thread_links (i_thread_id, 'Y');
   HTP.print ('&lt;p&gt;');
   IF m_rec.msg_parent != 0
   THEN
      link :=
         'forum.view_message?i_thread_id=' || m_rec.msg_parent;
      HTP.anchor (link, 'Previous Message');
   END IF;
EXCEPTION
   WHEN NO_DATA_FOUND
   THEN
      HTP.print ('&lt;h1&gt;Message Not Found!&lt;/h1&gt;');
END;	 </PRE
></BLOCKQUOTE
></DIV
><DIV
CLASS="sect4"
><H4
CLASS="sect4"
><A
CLASS="title"
NAME="BOOK-CH-8-SECT-3.6.2.4"
>8.3.6.2.4 The create_msg_form procedure.</A
></H4
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="AUTOID-7471"
></A
> <A
CLASS="indexterm"
NAME="AUTOID-7473"
></A
> This procedure creates an HTML form used to respond to a message. Before displaying the form, the procedure first confirms that the user is logged in. If not, the procedure calls FORUM_USERS.login_form to force the user to log on. Here's the code: </P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>PROCEDURE create_msg_form (
   i_parent_msg IN VARCHAR2 DEFAULT NULL
   )
IS
BEGIN
   -- Only allow users that are logged in to post
   IF forum_users.get_current_user IS NULL
   THEN
      forum_users.login_form (
         NULL,
         'You must login to post a message'
      );
   ELSE
      -- Print message form
      HTP.print ('&lt;body bgcolor=white&gt;');
      -- Print a header; a msg_id of zero indicates a forum topic
      IF i_parent_msg = 0
      THEN
         HTP.print ('&lt;h1&gt;Create Forum Topic&lt;/h1&gt;&lt;hr&gt;');
      ELSE
         HTP.print ('&lt;h1&gt;Post response&lt;/h1&gt;&lt;hr&gt;');
      END IF;
      HTP.print ('&lt;form action=forum.save_message method=POST&gt;');
      HTP.print ('&lt;table&gt;');
      HTP.formhidden (
         cname =&gt; 'i_parent_msg',
         cvalue =&gt; i_parent_msg
      );
      general_form.print_input_row ('Subject', 'i_subject');
      general_form.print_textarea_row (
         'Body',
         'i_msg_body',
         80,
         10
      );
      HTP.print ('&lt;/table&gt;');
      HTP.formsubmit;
      HTP.print ('&lt;/form&gt;');
   END IF;
END;	  </PRE
></BLOCKQUOTE
><P
CLASS="para"
><A
CLASS="xref"
HREF="ch08_03.htm#BOOK-CH-8-SECT-3.4"
>Figure 8.14</A
> shows the output of the procedure.</P
><H4
CLASS="figure"
><A
CLASS="title"
NAME="BOOK-CH-8-FIG-14"
>Figure 8.14: Posting a response to a message</A
></H4
><IMG
CLASS="graphic"
SRC="figs/owa.0814.gif"
ALT="Figure 8.14"></DIV
><DIV
CLASS="sect4"
><H4
CLASS="sect4"
><A
CLASS="title"
NAME="BOOK-CH-8-SECT-3.6.2.5"
>8.3.6.2.5 The save_message procedure.</A
></H4
><A
CLASS="indexterm"
NAME="AUTOID-7484"
></A
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="AUTOID-7488"
></A
> This final procedure inserts the user's posts into the MESSAGES table. Like create_msg_form, the procedure first checks to make sure that the user is logged in.[<A
CLASS="footnote"
HREF="#AUTOID-7490"
>3</A
>] Otherwise, people would be able to easily forge messages from other users, which can lead to big trouble. If the user checks out, the procedure inserts the record and redisplays the updated message list. If not, the exception section traps the error and prints a message. Here's the code for this procedure: </P
><BLOCKQUOTE
CLASS="footnote"
><DIV
CLASS="footnote"
><P
CLASS="para"
><A
CLASS="footnote"
NAME="AUTOID-7490"
>[3]</A
> Despite our best efforts, users are still free to jump into the application at any point simply by entering the URL into the browser's "Navigation" box. The cookie simply allows us to determine if the user has logged in.</P
></DIV
></BLOCKQUOTE
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>PROCEDURE save_message (
   i_parent_msg IN VARCHAR2 DEFAULT NULL,
   i_subject IN VARCHAR2 DEFAULT NULL,
   i_msg_body IN VARCHAR2 DEFAULT NULL
   )
IS
   
   author members.username%TYPE
      := forum_users.get_current_user;

BEGIN
   -- Only allow users that are logged in to post
   IF forum_users.get_current_user IS NULL
   THEN
      forum_users.login_form (
         NULL,
         'You must login to post a message'
      );
   ELSE
      -- Save message
      INSERT INTO messages (
         msg_id,
         msg_parent,
         msg_author,
         msg_subject,
         msg_body
         )
           VALUES (
              message_seq.nextval,
              i_parent_msg,
              author,
              i_subject,
              i_msg_body
           );
      COMMIT;
      -- Now return to the original message to display the new post
      IF i_parent_msg = 0
      THEN
         current_forum_list;
      ELSE
         view_message (i_parent_msg);
      END IF;
   END IF;
EXCEPTION
   WHEN OTHERS
   THEN
      HTP.print ('&lt;body bgcolor=white&gt;');
      HTP.print ('&lt;b&gt;An error has occurred&lt;p&gt;');
END;</PRE
></BLOCKQUOTE
></DIV
></DIV
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="BOOK-CH-8-SECT-3.7"
>8.3.7 Security Privileges</A
></H3
><P
CLASS="para"
>We'll follow the same steps we used in the survey example to make the discussion list available on the Web. Since we have two packages, though, we'll have to use two sets of grants: </P
><OL
CLASS="orderedlist"
><LI
CLASS="listitem"
><P
CLASS="para"
>Log in to disc_list using SQL*Plus.</P
></LI
><LI
CLASS="listitem"
><P
CLASS="para"
>Grant the EXECUTE privilege on FORUM to the agent account (WEBTEST).</P
></LI
><LI
CLASS="listitem"
><P
CLASS="para"
>Grant the EXECUTE privilege on FORUM_USERS to the agent account (WEBTEST). </P
></LI
><LI
CLASS="listitem"
><P
CLASS="para"
>Connect to the agent account (WEBTEST).</P
></LI
><LI
CLASS="listitem"
><P
CLASS="para"
>Create a synonym named FORUM for disc_list.forum.</P
></LI
><LI
CLASS="listitem"
><P
CLASS="para"
>Create a synonym named FORUM_USERS for disc_list.forum_users.</P
></LI
></OL
><P
CLASS="para"
><A
CLASS="xref"
HREF="ch08_03.htm#BOOK-CH-8-SECT-3.4"
>Figure 8.15</A
> shows how these commands are used in SQL*Plus. </P
><H4
CLASS="figure"
><A
CLASS="title"
NAME="BOOK-CH-8-FIG-15"
>Figure 8.15: Using SQL*Plus to grant privileges to the PL/SQL agent</A
></H4
><IMG
CLASS="graphic"
SRC="figs/owa.0815.gif"
ALT="Figure 8.15"></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="BOOK-CH-8-SECT-3.8"
>8.3.8 What Next?</A
></H3
><P
CLASS="para"
>The FORUM package is the most complex example we'll look at in this book. It illustrates how to break complex systems into multiple packages, how to create reasonably complex navigation schemes, and how to use cookies to save state information. If you have understood this example, you're well on the way to being able to write almost any PL/SQL-and-HTML-based system. </P
></DIV
></DIV
><DIV
CLASS="htmlnav"
><P
></P
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch08_02.htm#BOOK-CH-8-SECT-2.4"
TITLE="8.2 Example 1: An Anonymous Survey"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 8.2 Example 1: An Anonymous Survey"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="book"
HREF="index.htm"
TITLE="Oracle Web Applications: PL/SQL Developer's Introduction"
><IMG
SRC="../gifs/txthome.gif"
ALT="Oracle Web Applications: PL/SQL Developer's Introduction"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="chapter"
HREF="ch09_01.htm"
TITLE="9. XML"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 9. XML"
BORDER="0"></A
></TD
></TR
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
>8.2 Example 1: An Anonymous Survey</TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="index"
HREF="index/idx_0.htm"
TITLE="Book Index"
><IMG
SRC="../gifs/index.gif"
ALT="Book Index"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
>9. XML</TD
></TR
></TABLE
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"></DIV
><IMG SRC="../gifs/smnavbar.gif"
USEMAP="#map"
BORDER="0"
ALT="The Oracle Library Navigation">

<P><font size="-1">
<a href="../copyrght.htm#copy">Copyright (c) 2000</a> O'Reilly &amp; Associates. All rights reserved.
</font></P>

<MAP NAME="map">

<AREA SHAPE="RECT"
COORDS="0,0,35,30"
HREF="../index.htm"
ALT="Library Home">

<AREA SHAPE="RECT"
COORDS="40,0,95,30"
HREF="../prog2/index.htm"
ALT="Oracle PL/SQL Programming, 2nd. Ed.">

<AREA SHAPE="RECT"
COORDS="100,0,200,30"
HREF="../guide8i/index.htm"
ALT="Guide to Oracle 8i Features">

<AREA SHAPE="RECT"
COORDS="205,0,245,30"
HREF="../bipack/index.htm"
ALT="Oracle Built-in Packages">

<AREA SHAPE="RECT"
COORDS="250,0,320,30"
HREF="../advprog/index.htm"
ALT="Advanced PL/SQL Programming with Packages">

<AREA SHAPE="RECT"
COORDS="325,0,420,30"
HREF="index.htm"
ALT="Oracle Web Applications">

<AREA SHAPE="RECT"
COORDS="425,0,490,30"
HREF="../langpkt/index.htm"
ALT="Oracle PL/SQL Language Pocket Reference">

<AREA SHAPE="RECT"
COORDS="495,0,570,30"
HREF="../bipkt/index.htm"
ALT="Oracle PL/SQL Built-ins Pocket Reference">
</MAP>

</BODY
>
<!-- Mirrored from liso.cs.pusan.ac.kr by HTTrack Website Copier/3.x [XR&CO'2001] -->
</HTML
>
