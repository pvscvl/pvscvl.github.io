<HTML
><HEAD
><TITLE
>[Chapter 5] 5.2 A Whirlwind Tour</TITLE
><META
NAME="DC.Creator"
CONTENT="Andrew Odewahn"><META
NAME="DC.Date"
CONTENT="2000-04-29T18:35:57Z"><META
NAME="DC.Format"
CONTENT="text/html"
SCHEME="MIME"><META
NAME="DC.Identifier"
CONTENT="O'Reilly and Associates CDROM-1-56592-687-0E"><META
NAME="DC.Language"
CONTENT="en-US"><META
NAME="DC.Publisher"
CONTENT="O'Reilly &amp; Associates, Inc."><META
NAME="DC.Source"
CONTENT="1-56592-687-0E"
SCHEME="ISBN"><META
NAME="DC.Subject.Keyword"
CONTENT="Oracle Web 8i"><META
NAME="DC.Title"
CONTENT="Oracle Web Applications: PL/SQL Developer's Introduction"><META
NAME="DC.Type"
CONTENT="Text.Monograph"><META
NAME="generator"
CONTENT="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><LINK
REL="stylesheet"
TYPE="text/css"
HREF="../style/style1.css"><LINK
REV="made"
HREF="mailto:online-books@oreilly.com"
TITLE="Online Books Comments"><LINK
REL="up"
HREF="ch05_01.htm"
TITLE="5. HTML"><LINK
REL="prev"
HREF="ch05_01.htm"
TITLE="5.1 Programming in HTML"><LINK
REL="next"
HREF="ch06_01.htm"
TITLE="6. PL/SQL"></HEAD
><BODY
><DIV
CLASS="htmlnav"
><H1
><IMG
SRC="gifs/smbanner.gif"
ALT="Oracle Web Applications: PL/SQL Developer's Introduction"
USEMAP="#srchmap"
BORDER="0"></H1
><MAP
NAME="srchmap"
><AREA
SHAPE="RECT"
COORDS="0,0,466,65"
HREF="index.htm"
ALT="Oracle Web Applications: PL/SQL Developer's Introduction"><AREA
SHAPE="RECT"
COORDS="467,0,514,18"
HREF="jobjects/fsearch.htm"
ALT="Search this book"></MAP
><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch05_01.htm"
TITLE="5.1 Programming in HTML"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 5.1 Programming in HTML"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><SPAN
CLASS="NAVTITLE"
><A
CLASS="chapter"
REL="up"
HREF="ch05_01.htm"
TITLE="5. HTML"
>Chapter 5<BR>HTML</A
></SPAN
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="chapter"
HREF="ch06_01.htm"
TITLE="6. PL/SQL"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 6. PL/SQL"
BORDER="0"></A
></TD
></TR
></TABLE
>&nbsp;<HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"></DIV
><DIV
CLASS="sect1"
><H2
CLASS="sect1"
><A
CLASS="title"
NAME="BOOK-CH-5-SECT-2"
>5.2 A Whirlwind Tour</A
></H2
><P
CLASS="para"
> <A
CLASS="indexterm"
NAME="ch-05-html_tags"
></A
> <A
CLASS="indexterm"
NAME="ch-05-tags_html"
></A
>  Although somewhat artificial, it's useful to draw a distinction between text and content when talking about HTML documents. For example, in HTML, you can create a list of items. These items might be simple text, but they can also be HTML tags, such as hyperlinks. </P
><P
CLASS="para"
>The following sections present some common tags you will need to build the content of your user interfaces. They are listed here with their functions: </P
><DL
CLASS="variablelist"
><DT
CLASS="term"
>Structural tags</DT
><DD
CLASS="listitem"
><P
CLASS="para"
> <A
CLASS="indexterm"
NAME="AUTOID-2916"
></A
> <A
CLASS="indexterm"
NAME="AUTOID-2920"
></A
>  Delineate the part of an HTML document (head, body, comments) to which the content belongs. </P
></DD
><DT
CLASS="term"
>Text formatting tags</DT
><DD
CLASS="listitem"
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="AUTOID-2927"
></A
> <A
CLASS="indexterm"
NAME="AUTOID-2931"
></A
> Change the size and appearance of the text within a document.</P
></DD
><DT
CLASS="term"
>Content flow tags</DT
><DD
CLASS="listitem"
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="AUTOID-2938"
></A
> <A
CLASS="indexterm"
NAME="AUTOID-2942"
></A
> Delineate line and paragraph breaks within a document.</P
></DD
><DT
CLASS="term"
>Anchor tags</DT
><DD
CLASS="listitem"
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="AUTOID-2949"
></A
> <A
CLASS="indexterm"
NAME="AUTOID-2953"
></A
> Create links within a document to other documents on the Web.</P
></DD
><DT
CLASS="term"
>List tags</DT
><DD
CLASS="listitem"
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="AUTOID-2960"
></A
> <A
CLASS="indexterm"
NAME="AUTOID-2964"
></A
> Create a variety of useful formats for listing content more effectively. </P
></DD
><DT
CLASS="term"
>Table tags</DT
><DD
CLASS="listitem"
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="AUTOID-2971"
></A
> <A
CLASS="indexterm"
NAME="AUTOID-2975"
></A
> Break the normal vertical flow of a document to present content information in a grid of columns and rows. </P
></DD
><DT
CLASS="term"
>Form tags</DT
><DD
CLASS="listitem"
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="AUTOID-2982"
></A
> <A
CLASS="indexterm"
NAME="AUTOID-2986"
></A
> Create various types of input structures to facilitate user interaction with the site. </P
></DD
></DL
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="BOOK-CH-5-SECT-2.1"
>5.2.1 Structural Tags</A
></H3
><P
CLASS="para"
> <A
CLASS="indexterm"
NAME="AUTOID-2992"
></A
> <A
CLASS="indexterm"
NAME="AUTOID-2996"
></A
> All useful documents, whether large or small, have structures that organize the information they contain. For example, a book begins with a table of contents that provides an overview of the topics covered. These topics are divided into self-contained chapters, each with its own structure, including headings and subheadings. Finally, a book ends with an index that provides a much more granular view of the book's content. </P
><P
CLASS="para"
>An ASCII report has a simpler structure. Each page begins with a header, is followed by some sort of structured data, and ends with a footer. An HTML document, which falls somewhere between these extremes, has three major structural elements, described in the following list: head, body, and comment. The job of the structural tag is to bring order to the otherwise unruly world of HTML. </P
><DL
CLASS="variablelist"
><DT
CLASS="term"
><EM
CLASS="emphasis"
>Head</EM
> </DT
><DD
CLASS="listitem"
><P
CLASS="para"
> <A
CLASS="indexterm"
NAME="AUTOID-3006"
></A
> <A
CLASS="indexterm"
NAME="AUTOID-3008"
></A
> Specifies general information about the document, such as its title, the default font size (basefont), and information about its contents. Unlike the Hydra of Greek mythology, each document can have only one head, which must come at the beginning. If a user prints out a web page that spans multiple printed pages (e.g., a table with a large number of rows), the head appears only on the first page. </P
></DD
><DT
CLASS="term"
><EM
CLASS="emphasis"
>Body</EM
> </DT
><DD
CLASS="listitem"
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="AUTOID-3016"
></A
>  What the user sees when viewing your document with a browser. It includes all text, forms, and images that make up the document. You set all aspects of the document appearance in the body, such as background color and background image. </P
></DD
><DT
CLASS="term"
><EM
CLASS="emphasis"
>Comment</EM
></DT
><DD
CLASS="listitem"
><P
CLASS="para"
> <A
CLASS="indexterm"
NAME="AUTOID-3023"
></A
> Allows HTML authors to include notes to themselves, such as the last revision date or document version; these comments are not displayed by the browser. Unlike their third-generation language (3GL) counterparts, HTML comments are not ignored completely, and often contain (somewhat ironically, given that these are comments) the source code for scripting language functions. </P
></DD
></DL
><P
CLASS="para"
>The following list gives the main structural tags:</P
><DL
CLASS="variablelist"
><DT
CLASS="term"
><CODE
CLASS="literal"
>&lt;html&gt;...&lt;/html&gt;</CODE
></DT
><DD
CLASS="listitem"
><P
CLASS="para"
>Marks the beginning and end of an HTML document.</P
></DD
><DT
CLASS="term"
><CODE
CLASS="literal"
>&lt;head&gt;...&lt;/head&gt;</CODE
></DT
><DD
CLASS="listitem"
><P
CLASS="para"
>Defines the head section of a document.</P
></DD
><DT
CLASS="term"
><CODE
CLASS="literal"
>&lt;body&gt;...&lt;/body&gt;</CODE
></DT
><DD
CLASS="listitem"
><P
CLASS="para"
>Begins and ends the body of an HTML document; accepts the following attributes: </P
></DD
></DL
><TABLE
CLASS="simplelist"
BORDER="0"
><TR
><TD
CLASS="member"
><CODE
CLASS="literal"
>background</CODE
> <CODE
CLASS="literal"
>=</CODE
> URL of background image   </TD
></TR
><TR
><TD
CLASS="member"
><CODE
CLASS="literal"
>bgcolor</CODE
> <CODE
CLASS="literal"
>=</CODE
> red, green, blue, etc.</TD
></TR
></TABLE
><DL
CLASS="variablelist"
><DT
CLASS="term"
><CODE
CLASS="literal"
>&lt;title&gt;...&lt;/title&gt;</CODE
></DT
><DD
CLASS="listitem"
><P
CLASS="para"
>Specifies the browser's titlebar.</P
></DD
><DT
CLASS="term"
><CODE
CLASS="literal"
>&lt;!--</CODE
> <CODE
CLASS="literal"
>...</CODE
> <CODE
CLASS="literal"
>--!&gt;</CODE
></DT
><DD
CLASS="listitem"
><P
CLASS="para"
>Delineates a comment; information not displayed by the browser.</P
></DD
></DL
><P
CLASS="para"
>The following example is a skeleton HTML document that shows the structural tags in action. Note that each section is delimited by the corresponding start and end tags, including the <CODE
CLASS="literal"
>&lt;html&gt;</CODE
> tags that enclose the entire document. </P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>&lt;html&gt;
&lt;head&gt;
&lt;title&gt;You knew it was coming...&lt;/title&gt;
&lt;/head&gt;
&lt;!-- 
This phrase is in every computer book on any subject.
--!&gt;
&lt;body bgcolor=blue&gt;
   And here it is...Hello, World!
&lt;/body&gt;
&lt;/html&gt;</PRE
></BLOCKQUOTE
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="BOOK-CH-5-SECT-2.2"
>5.2.2 Text Formatting Tags</A
></H3
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="AUTOID-3068"
></A
> <A
CLASS="indexterm"
NAME="AUTOID-3072"
></A
> The text markup tags modify the appearance of the text in a document, between the start tag and the corresponding end tag. There is a wide variety of effects, ranging from the traditional to the bizarre and practically useless. Nesting the tags combines their effects; for example, you can create a bold, italicized word by nesting <CODE
CLASS="literal"
>&lt;b&gt;</CODE
> and <CODE
CLASS="literal"
>&lt;i&gt;</CODE
>. A list of text formatting tags follows: </P
><DL
CLASS="variablelist"
><DT
CLASS="term"
><CODE
CLASS="literal"
>&lt;b&gt;...&lt;/b&gt;</CODE
></DT
><DD
CLASS="listitem"
><P
CLASS="para"
> <A
CLASS="indexterm"
NAME="AUTOID-3083"
></A
> Sets the text between the tags to bold.</P
></DD
><DT
CLASS="term"
><CODE
CLASS="literal"
>&lt;font&gt;...&lt;/font&gt;</CODE
></DT
><DD
CLASS="listitem"
><P
CLASS="para"
> <A
CLASS="indexterm"
NAME="AUTOID-3090"
></A
> Changes the font properties for the text between the start and end tags; accepts the following attributes: </P
></DD
></DL
><TABLE
CLASS="simplelist"
BORDER="0"
><TR
><TD
CLASS="member"
><CODE
CLASS="literal"
>size</CODE
> <CODE
CLASS="literal"
>=</CODE
> 8, 10, 12 . . .</TD
></TR
><TR
><TD
CLASS="member"
><CODE
CLASS="literal"
>color</CODE
> <CODE
CLASS="literal"
>=</CODE
> red, green, blue, etc.</TD
></TR
></TABLE
><DL
CLASS="variablelist"
><DT
CLASS="term"
><CODE
CLASS="literal"
>&lt;hn&gt;...&lt;/hn&gt;</CODE
></DT
><DD
CLASS="listitem"
><P
CLASS="para"
> <A
CLASS="indexterm"
NAME="AUTOID-3105"
></A
> Specifies font heading size <EM
CLASS="emphasis"
>n</EM
>, which can range from 1 to 6, with <CODE
CLASS="literal"
>&lt;h1&gt;</CODE
> the largest and <CODE
CLASS="literal"
>&lt;h6&gt;</CODE
> the smallest. </P
></DD
><DT
CLASS="term"
><CODE
CLASS="literal"
>&lt;i&gt;...&lt;/i&gt;</CODE
></DT
><DD
CLASS="listitem"
><P
CLASS="para"
> <A
CLASS="indexterm"
NAME="AUTOID-3115"
></A
> Sets the text between the tags to italic.</P
></DD
><DT
CLASS="term"
><CODE
CLASS="literal"
>&lt;small&gt;...&lt;/small&gt;</CODE
></DT
><DD
CLASS="listitem"
><P
CLASS="para"
> <A
CLASS="indexterm"
NAME="AUTOID-3122"
></A
> Makes the intervening text smaller than the default font.</P
></DD
><DT
CLASS="term"
><CODE
CLASS="literal"
>&lt;sup&gt;...&lt;/sup&gt;</CODE
></DT
><DD
CLASS="listitem"
><P
CLASS="para"
> <A
CLASS="indexterm"
NAME="AUTOID-3129"
></A
> Superscripts the text; useful for creating footnotes.</P
></DD
><DT
CLASS="term"
><CODE
CLASS="literal"
>&lt;tt&gt;...&lt;/tt&gt;</CODE
></DT
><DD
CLASS="listitem"
><P
CLASS="para"
>T <A
CLASS="indexterm"
NAME="AUTOID-3136"
></A
> eletype; formats text using monospace font.</P
></DD
></DL
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="BOOK-CH-5-SECT-2.3"
>5.2.3 Content Flow Tags</A
></H3
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="AUTOID-3141"
></A
> <A
CLASS="indexterm"
NAME="AUTOID-3145"
></A
> HTML completely ignores whitespace and line breaks within a document. For example, the following document displays one line, even though the author obviously intends that each word appear on its own line: </P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>&lt;body bgcolor=white&gt;
The
quick
brown
fox
&lt;/body&gt;</PRE
></BLOCKQUOTE
><P
CLASS="para"
>The flow tags prevent a document from becoming one long, uninterrupted jumble of words. To fix the document above, the author would put a paragraph tag, <CODE
CLASS="literal"
>&lt;p&gt;</CODE
>, at the end of each line. This is one of the few tags where the corresponding end tag is not required. The flow tags are summarized in the following list: </P
><DL
CLASS="variablelist"
><DT
CLASS="term"
><CODE
CLASS="literal"
>&lt;br&gt;</CODE
></DT
><DD
CLASS="listitem"
><P
CLASS="para"
> <A
CLASS="indexterm"
NAME="AUTOID-3157"
></A
> Break; creates a line break.</P
></DD
><DT
CLASS="term"
><CODE
CLASS="literal"
>&lt;center&gt;...&lt;/center&gt;</CODE
></DT
><DD
CLASS="listitem"
><P
CLASS="para"
> <A
CLASS="indexterm"
NAME="AUTOID-3164"
></A
> Center; centers the content between the tags.</P
></DD
><DT
CLASS="term"
><CODE
CLASS="literal"
>&lt;hr&gt;</CODE
></DT
><DD
CLASS="listitem"
><P
CLASS="para"
> <A
CLASS="indexterm"
NAME="AUTOID-3171"
></A
> Horizontal rule; breaks content flow with a horizontal bar.</P
></DD
><DT
CLASS="term"
><CODE
CLASS="literal"
>&lt;p&gt;</CODE
></DT
><DD
CLASS="listitem"
><P
CLASS="para"
> <A
CLASS="indexterm"
NAME="AUTOID-3178"
></A
> Paragraph; same as <CODE
CLASS="literal"
>&lt;br&gt;</CODE
>, but with more space between the lines. </P
></DD
><DT
CLASS="term"
><CODE
CLASS="literal"
>&lt;pre&gt;...&lt;/pre&gt;</CODE
></DT
><DD
CLASS="listitem"
><P
CLASS="para"
> <A
CLASS="indexterm"
NAME="AUTOID-3186"
></A
> Preformatted; treat text as unformatted ASCII. The <CODE
CLASS="literal"
>&lt;pre&gt;</CODE
> tag is most often used to force the browser to present the text exactly as written because it preserves whitespace and pagebreaks. </P
></DD
></DL
><P
CLASS="para"
>As mentioned earlier, the author of the previous example would have to include the <CODE
CLASS="literal"
>&lt;p&gt;</CODE
> tag at the end of each line to create line breaks. The same effect can be achieved with the following line: </P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>&lt;p&gt;The&lt;p&gt;quick&lt;p&gt;brown&lt;p&gt;fox</PRE
></BLOCKQUOTE
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="BOOK-CH-5-SECT-2.4"
>5.2.4 Anchor Tags</A
></H3
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="AUTOID-3195"
></A
> <A
CLASS="indexterm"
NAME="AUTOID-3199"
></A
> Anchor tags are used to create links within a document to other documents on the Web. When a user clicks an anchor tag, he or she is transported to the page specified in the underlying hyperlink. The anchor tag initially appears as blue, underlined text unless users have overridden its default appearance in their browsers' preferences. Following is a summary of the anchor tag: </P
><DL
CLASS="variablelist"
><DT
CLASS="term"
><CODE
CLASS="literal"
>&lt;a&gt;...&lt;/a&gt;</CODE
></DT
><DD
CLASS="listitem"
><P
CLASS="para"
> <A
CLASS="indexterm"
NAME="AUTOID-3208"
></A
> Anchor; creates a hyperlink labeled with the text between the tags. This tag accepts the following attribute: </P
></DD
></DL
><TABLE
CLASS="simplelist"
BORDER="0"
><TR
><TD
CLASS="member"
><CODE
CLASS="literal"
>href</CODE
> <CODE
CLASS="literal"
>=</CODE
> URL</TD
></TR
></TABLE
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="BOOK-CH-5-SECT-2.5"
>5.2.5 List Tags</A
></H3
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="AUTOID-3217"
></A
> <A
CLASS="indexterm"
NAME="AUTOID-3221"
></A
> Almost any type of content, from plain text to hyperlinks, can be put into list format. A list begins with a tag that indicates if it is ordered or unordered, followed by a number of items enclosed between the list item tags. Though few in number, these tags can create a wide variety of useful formats. The following list summarizes the list tags and their common attributes: </P
><DL
CLASS="variablelist"
><DT
CLASS="term"
><CODE
CLASS="literal"
>&lt;ul&gt;...&lt;/ul&gt;</CODE
></DT
><DD
CLASS="listitem"
><P
CLASS="para"
> <A
CLASS="indexterm"
NAME="AUTOID-3230"
></A
> Unordered list; all entries between the tags are bulleted.</P
></DD
></DL
><TABLE
CLASS="simplelist"
BORDER="0"
><TR
><TD
CLASS="member"
><CODE
CLASS="literal"
>type</CODE
> <CODE
CLASS="literal"
>=</CODE
> disc, circle, square</TD
></TR
></TABLE
><DL
CLASS="variablelist"
><DT
CLASS="term"
><CODE
CLASS="literal"
>&lt;ol&gt;...&lt;/ol&gt;</CODE
></DT
><DD
CLASS="listitem"
><P
CLASS="para"
> <A
CLASS="indexterm"
NAME="AUTOID-3242"
></A
> Ordered list; all entries between the tags are lettered or numbered, depending on the settings of the <CODE
CLASS="literal"
>type</CODE
> and <CODE
CLASS="literal"
>start</CODE
> attributes: </P
></DD
></DL
><TABLE
CLASS="simplelist"
BORDER="0"
><TR
><TD
CLASS="member"
><CODE
CLASS="literal"
>type</CODE
> <CODE
CLASS="literal"
>=</CODE
> 1, A, a, I, i</TD
></TR
><TR
><TD
CLASS="member"
><CODE
CLASS="literal"
>start</CODE
> <CODE
CLASS="literal"
>=</CODE
> 1, 2, . . . , N</TD
></TR
></TABLE
><DL
CLASS="variablelist"
><DT
CLASS="term"
><CODE
CLASS="literal"
>&lt;li&gt;...&lt;/li&gt;</CODE
></DT
><DD
CLASS="listitem"
><P
CLASS="para"
> <A
CLASS="indexterm"
NAME="AUTOID-3259"
></A
> List item; this tag is always nested between either the <CODE
CLASS="literal"
>&lt;ul&gt;</CODE
> tags or the <CODE
CLASS="literal"
>&lt;ol&gt;</CODE
> tags. It puts each item in the list on a separate line. </P
></DD
></DL
><P
CLASS="para"
>The unordered list tag, <CODE
CLASS="literal"
>&lt;ul&gt;</CODE
>, begins a list where the order of each item doesn't matter, such as a list of favorite web sites. Each element in the list is preceded by a specified bullet character. The bullet's shape is determined by the <CODE
CLASS="literal"
>type</CODE
> attribute. Here's an example snippet of the HTML for an unordered list; the HTML code on the left produces the output on the right. Clicking on the underlined link will bring you to the URL: </P
><TABLE
CLASS="informaltable"
BORDER="1"
CELLPADDING="3"
><TBODY
CLASS="tbody"
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
> <BLOCKQUOTE
><PRE
CLASS="programlisting"
>&lt;b&gt;Cities in MA&lt;/b&gt;&lt;p&gt;
&lt;ul&gt;
   &lt;li&gt;
      &lt;a href=www.boston.com&gt;
         Boston
      &lt;/a&gt;
   &lt;/li&gt;
   &lt;li&gt;Cambridge&lt;/li&gt;
   &lt;li&gt;Somerville&lt;/li&gt;
&lt;/ul&gt;
</PRE
></BLOCKQUOTE
> </TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
> <BLOCKQUOTE
CLASS="literallayout"
><P
CLASS="literallayout"
><BR><B
CLASS="emphasis.bold"
>Cities in MA</B
><BR>&#183; <U
CLASS="emphasis.underline"
>Boston</U
><BR>&#183; Cambridge<BR>&#183; Somerville<BR></P
></BLOCKQUOTE
> </TD
></TR
></TBODY
></TABLE
><P
CLASS="para"
>The ordered list tag, <CODE
CLASS="literal"
>&lt;ol&gt;</CODE
>, creates lists in which each item is preceded by one in a sequence of numbers or letters indicating its position in the list. A series of instructions, a "to do" list, and a top ten list are all ordered lists. The <CODE
CLASS="literal"
>&lt;ol&gt;</CODE
> tag has two attributes to control the appearance of the sequence indicator. The value of the <CODE
CLASS="literal"
>type</CODE
> attribute sets the type of sequence. The value "A" begins the sequence "A, B, C, . . .," while "a" begins "a, b, c, . . . ." "I" or "i" starts a list of Roman numerals based on the case of the value. Not specifying a value for <CODE
CLASS="literal"
>type</CODE
>, or setting it to "1", will begin a numeric sequence. The <CODE
CLASS="literal"
>start</CODE
> attribute sets the initial value of the sequence. Here's an example of an ordered list; the HTML code on the left produces the output on the right: </P
><TABLE
CLASS="informaltable"
BORDER="1"
CELLPADDING="3"
><TBODY
CLASS="tbody"
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
> <BLOCKQUOTE
><PRE
CLASS="programlisting"
>&lt;b&gt;&lt;i&gt;SEC&lt;/i&gt; Football Teams&lt;/b&gt;
&lt;p&gt;
&lt;ol&gt;
   &lt;!-- The end tag is implied --!&gt;
   &lt;li&gt;Alabama Crimson Tide
   &lt;li&gt;Tennesse Volunteers
   &lt;li&gt;Auburn Tigers
&lt;/ol&gt;
</PRE
></BLOCKQUOTE
> </TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
> <BLOCKQUOTE
CLASS="literallayout"
><P
CLASS="literallayout"
><BR><B
CLASS="emphasis.bold"
><EM
CLASS="emphasis"
>SEC</EM
> Football Teams</B
><BR>1. Alabama Crimson Tide<BR>2. Tennessee Volunteers<BR>3. Auburn Tigers<BR></P
></BLOCKQUOTE
> </TD
></TR
></TBODY
></TABLE
><P
CLASS="para"
>The next example uses nesting to create a standard outline by creating a list within the <CODE
CLASS="literal"
>&lt;li&gt;</CODE
> and <CODE
CLASS="literal"
>&lt;/li&gt;</CODE
> tags; the HTML code on the left produces the output on the right: </P
><TABLE
CLASS="informaltable"
BORDER="1"
CELLPADDING="3"
><TBODY
CLASS="tbody"
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
> <BLOCKQUOTE
><PRE
CLASS="programlisting"
>&lt;ol&gt;
&lt;li&gt;Introduction&lt;li&gt;
   &lt;ol type=a&gt;
      &lt;li&gt;CGI
      &lt;li&gt;HTML
      &lt;li&gt;PL/SQL
   &lt;/ol&gt;
&lt;li&gt;OAS&lt;/li&gt;
&lt;/ol&gt;</PRE
></BLOCKQUOTE
> </TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
> <BLOCKQUOTE
CLASS="literallayout"
><P
CLASS="literallayout"
><BR>1. Introduction<BR>    a. CGI<BR>    b. HTML<BR>    c. PL/SQL<BR>2. OAS<BR></P
></BLOCKQUOTE
> </TD
></TR
></TBODY
></TABLE
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="BOOK-CH-5-SECT-2.6"
>5.2.6 Table Tags</A
></H3
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="AUTOID-3312"
></A
> <A
CLASS="indexterm"
NAME="AUTOID-3316"
></A
> We can use an HTML table to break the normally vertical flow of a document into a grid of columns and rows. The cell at the intersection of the column and row can contain any type of content, including text, lists, forms, and even other tables. You can create almost any layout by breaking a complex document into smaller, simpler pieces that you place within the cell of a table. Following is a list of the four main table tags and some of their most commonly used attributes: </P
><DL
CLASS="variablelist"
><DT
CLASS="term"
><CODE
CLASS="literal"
>&lt;table&gt;...&lt;/table&gt;</CODE
></DT
><DD
CLASS="listitem"
><P
CLASS="para"
> <A
CLASS="indexterm"
NAME="AUTOID-3325"
></A
> Begins and ends an HTML table.</P
></DD
></DL
><TABLE
CLASS="simplelist"
BORDER="0"
><TR
><TD
CLASS="member"
><CODE
CLASS="literal"
>align</CODE
> <CODE
CLASS="literal"
>=</CODE
> right, left, center</TD
></TR
><TR
><TD
CLASS="member"
><CODE
CLASS="literal"
>bgcolor</CODE
> <CODE
CLASS="literal"
>=</CODE
> red, green, blue, etc.</TD
></TR
><TR
><TD
CLASS="member"
><CODE
CLASS="literal"
>border</CODE
> <CODE
CLASS="literal"
>=</CODE
> 1, 2, . . .</TD
></TR
><TR
><TD
CLASS="member"
><CODE
CLASS="literal"
>width</CODE
> <CODE
CLASS="literal"
>=</CODE
> 10%, 20%, . . .</TD
></TR
></TABLE
><DL
CLASS="variablelist"
><DT
CLASS="term"
><CODE
CLASS="literal"
>&lt;tr&gt;...&lt;/tr&gt;</CODE
></DT
><DD
CLASS="listitem"
><P
CLASS="para"
> <A
CLASS="indexterm"
NAME="AUTOID-3346"
></A
> Creates a new row; used between <CODE
CLASS="literal"
>&lt;table&gt;</CODE
> and <CODE
CLASS="literal"
>&lt;/table&gt;</CODE
>. </P
></DD
></DL
><TABLE
CLASS="simplelist"
BORDER="0"
><TR
><TD
CLASS="member"
><CODE
CLASS="literal"
>align</CODE
> <CODE
CLASS="literal"
>=</CODE
> right, left, center</TD
></TR
><TR
><TD
CLASS="member"
><CODE
CLASS="literal"
>bgcolor</CODE
> <CODE
CLASS="literal"
>=</CODE
> red, green, blue, etc.</TD
></TR
></TABLE
><DL
CLASS="variablelist"
><DT
CLASS="term"
><CODE
CLASS="literal"
>&lt;th&gt;...&lt;/th&gt;</CODE
> and <CODE
CLASS="literal"
>&lt;td&gt;...&lt;/td&gt;</CODE
></DT
><DD
CLASS="listitem"
><P
CLASS="para"
> <A
CLASS="indexterm"
NAME="AUTOID-3364"
></A
> <A
CLASS="indexterm"
NAME="AUTOID-3366"
></A
> Create a header cell (<CODE
CLASS="literal"
>&lt;th&gt;</CODE
>) or data cell (<CODE
CLASS="literal"
>&lt;td&gt;</CODE
>); used between <CODE
CLASS="literal"
>&lt;tr&gt;</CODE
> and <CODE
CLASS="literal"
>&lt;/tr&gt;</CODE
>. </P
></DD
></DL
><TABLE
CLASS="simplelist"
BORDER="0"
><TR
><TD
CLASS="member"
><CODE
CLASS="literal"
>align</CODE
> <CODE
CLASS="literal"
>=</CODE
> right, left, center</TD
></TR
><TR
><TD
CLASS="member"
><CODE
CLASS="literal"
>bgcolor</CODE
> <CODE
CLASS="literal"
>=</CODE
> red, green, blue, etc.</TD
></TR
><TR
><TD
CLASS="member"
><CODE
CLASS="literal"
>colspan</CODE
> <CODE
CLASS="literal"
>=</CODE
> 1, 2, 3, . . .</TD
></TR
><TR
><TD
CLASS="member"
><CODE
CLASS="literal"
>rowspan</CODE
> <CODE
CLASS="literal"
>=</CODE
> 1, 2, 3, . . .</TD
></TR
><TR
><TD
CLASS="member"
><CODE
CLASS="literal"
>width</CODE
> <CODE
CLASS="literal"
>=</CODE
> 10%, 20%, . . .</TD
></TR
></TABLE
><P
CLASS="para"
>A table begins with the <CODE
CLASS="literal"
>&lt;table&gt;</CODE
> tag, which always breaks the flow of the document by inserting a new line. If the <CODE
CLASS="literal"
>border</CODE
> attribute is used, then the cells in the table are enclosed within a grid. The table stops at the <CODE
CLASS="literal"
>&lt;/table&gt;</CODE
> tag. The <CODE
CLASS="literal"
>&lt;tr&gt;</CODE
> begins a new row within the table, so a table with a row for each state in the United States has 50 <CODE
CLASS="literal"
>&lt;tr&gt;</CODE
> tags. The <CODE
CLASS="literal"
>&lt;th&gt;</CODE
> and <CODE
CLASS="literal"
>&lt;td&gt;</CODE
> tags divide each row into columns (cells): <CODE
CLASS="literal"
>&lt;th&gt;</CODE
> indicates header cells and <CODE
CLASS="literal"
>&lt;td&gt;</CODE
> indicates data cells. While any number of these tags can appear within a row, the total number of columns in the table is always equal to the maximum number of columns within any row. </P
><P
CLASS="para"
>A number of attributes are shared hierarchically by the table, row, and cell tags. The <CODE
CLASS="literal"
>align</CODE
> attribute sets the text alignment for all the cells, and <CODE
CLASS="literal"
>bgcolor</CODE
> sets their background color. The <CODE
CLASS="literal"
>width</CODE
> attribute specifies the element's horizontal width as a percentage of the total width. For example, when used in the <CODE
CLASS="literal"
>&lt;table</CODE
>&gt; tag, a width of 100% makes the table use the full width of the screen. The <CODE
CLASS="literal"
>colspan</CODE
> and <CODE
CLASS="literal"
>rowspan</CODE
> attributes, which are used only in the cell tags, allow you to create cells that span multiple columns. For example, you could use the line <CODE
CLASS="literal"
>&lt;th</CODE
> <CODE
CLASS="literal"
>colspan=5&gt;Here's</CODE
> <CODE
CLASS="literal"
>some</CODE
> <CODE
CLASS="literal"
>data&lt;/th&gt;</CODE
> to put a heading row on a table with five columns. </P
><P
CLASS="para"
>Here is a simple table with five columns and four rows:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>&lt;title&gt;Sales Data&lt;/title&gt;
&lt;center&gt;
&lt;table border=1 width=70%&gt;
   &lt;th colspan=6 align=center&gt;Sales Data&lt;/th&gt;
   &lt;tr&gt;
      &lt;!-- Column Headers --!&gt;
      &lt;th&gt;Office&lt;/th&gt;
      &lt;th&gt;Q1&lt;/th&gt;
      &lt;th&gt;Q2&lt;/th&gt;
      &lt;th&gt;Q3&lt;/th&gt;
      &lt;th&gt;Q4&lt;/th&gt;
   &lt;tr align=right&gt;
      &lt;!-- Row for the Boston office --!&gt;
      &lt;th&gt;&lt;a href=/offices/boston.html&gt;Boston&lt;/a&gt;&lt;/th&gt; 
      &lt;td&gt;1000&lt;/td&gt;
      &lt;td&gt;1500&lt;/td&gt;
      &lt;td&gt;1750&lt;/td&gt;
      &lt;td&gt;1800&lt;/td&gt;
   &lt;tr align=right&gt;
      &lt;!-- Row for the New York office --!&gt;
      &lt;th&gt;&lt;a href=/offices/nyc.html&gt;New York&lt;/a&gt;&lt;/th&gt; 
      &lt;td&gt;2900&lt;/td&gt;
      &lt;td&gt;2000&lt;/td&gt; 
      &lt;td&gt;2300&lt;/td&gt;
      &lt;td&gt;2475&lt;/td&gt;
&lt;/table&gt;
&lt;/center&gt;</PRE
></BLOCKQUOTE
><P
CLASS="para"
>The first row uses the <CODE
CLASS="literal"
>&lt;th&gt;</CODE
> tag to create headers for each of the five columns. The next two rows contain sales data by office, and have an identical structure. The first column, created using the <CODE
CLASS="literal"
>&lt;tr&gt;</CODE
> tag, creates a hyperlinked row header. The <CODE
CLASS="literal"
>&lt;td&gt;</CODE
> tag is then used to format the quarterly information by office into cells. <A
CLASS="xref"
HREF="ch05_02.htm#BOOK-CH-5-SECT-2.7.1"
>Figure 5.2</A
> shows how a browser displays the page. </P
><H4
CLASS="figure"
><A
CLASS="title"
NAME="BOOK-CH-5-FIG-5"
>Figure 5.2: A simple table</A
></H4
><IMG
CLASS="graphic"
SRC="figs/owa.0502.gif"
ALT="Figure 5.2"></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="BOOK-CH-5-SECT-2.7"
>5.2.7 Form Tags</A
></H3
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="AUTOID-3422"
></A
> <A
CLASS="indexterm"
NAME="AUTOID-3426"
></A
> Up to this point, we've looked at the output side of our HTML to format text, create lists of items, and put other HTML elements into tables. Now we're ready to use HTML form tags to create documents that can be used to put information into a database. </P
><P
CLASS="para"
>A <EM
CLASS="emphasis"
>form</EM
> encompasses a set of tags, exactly like those we've been using, that create various types of input widgets that are displayed by the browser. These tags can be text boxes, radio buttons, and checkboxes that accept input from users. Once users have filled out the form, they submit it to the server for processing. A backend program, which in this book will be a PL/SQL routine, parses their input and performs some type of processing. </P
><P
CLASS="para"
>When building HTML form applications, it's important to remember there is absolutely no communication with the database until the form is submitted. HTML forms are no replacement for traditional tools like Oracle Forms, and you should not treat them as such.[<A
CLASS="footnote"
HREF="#AUTOID-3432"
>1</A
>] However, their portability and simplicity offer compelling advantages in many circumstances. </P
><BLOCKQUOTE
CLASS="footnote"
><DIV
CLASS="footnote"
><P
CLASS="para"
><A
CLASS="footnote"
NAME="AUTOID-3432"
>[1]</A
> This is because HTTP is a stateless protocol. <A
CLASS="xref"
HREF="ch07_01.htm"
>Chapter 7, <CITE
CLASS="chapter"
>The PL/SQL Toolkit</CITE
></A
>, and <A
CLASS="xref"
HREF="ch08_01.htm"
>Chapter 8, <CITE
CLASS="chapter"
>Developing Applications</CITE
></A
>, will suggest some ways to mitigate this problem.</P
></DIV
></BLOCKQUOTE
><P
CLASS="para"
>With HTML forms, as long as end users have a browser, they can enter data into your application without having any special configuration or software. Additionally, all the processing for your input form occurs at the server, allowing you to consolidate the business rules of your application into one place. Best of all, because these forms reside on a central server, any update you make is instantly distributed to all your users, eliminating the need for client-side upgrades or new installs. The form tags are displayed in the following list with their associated attributes, followed by a more detailed discussion of their properties. At the end of this section, I will offer some advice on how to improve the layout of a form or any other HTML document. </P
><DL
CLASS="variablelist"
><DT
CLASS="term"
><CODE
CLASS="literal"
>&lt;form&gt;...&lt;/form&gt;</CODE
></DT
><DD
CLASS="listitem"
><P
CLASS="para"
> <A
CLASS="indexterm"
NAME="AUTOID-3443"
></A
> Begins and ends a form.</P
></DD
></DL
><TABLE
CLASS="simplelist"
BORDER="0"
><TR
><TD
CLASS="member"
><CODE
CLASS="literal"
>action</CODE
> <CODE
CLASS="literal"
>=</CODE
> URL of PL/SQL procedure to execute</TD
></TR
><TR
><TD
CLASS="member"
><CODE
CLASS="literal"
>method</CODE
> <CODE
CLASS="literal"
>=</CODE
> GET, POST</TD
></TR
></TABLE
><DL
CLASS="variablelist"
><DT
CLASS="term"
><CODE
CLASS="literal"
>&lt;input&gt;</CODE
></DT
><DD
CLASS="listitem"
><P
CLASS="para"
> <A
CLASS="indexterm"
NAME="AUTOID-3458"
></A
> Creates an input element based on the <CODE
CLASS="literal"
>type</CODE
> attribute. This tag has other attributes that are not listed here because they only apply for certain types. </P
></DD
></DL
><TABLE
CLASS="simplelist"
BORDER="0"
><TR
><TD
CLASS="member"
><CODE
CLASS="literal"
>name</CODE
> <CODE
CLASS="literal"
>=</CODE
> name of element </TD
></TR
><TR
><TD
CLASS="member"
><CODE
CLASS="literal"
>type</CODE
> <CODE
CLASS="literal"
>=</CODE
> text, password, checkbox, radio, submit, hidden</TD
></TR
></TABLE
><DL
CLASS="variablelist"
><DT
CLASS="term"
><CODE
CLASS="literal"
>&lt;select&gt;...&lt;/select&gt;</CODE
></DT
><DD
CLASS="listitem"
><P
CLASS="para"
> <A
CLASS="indexterm"
NAME="AUTOID-3474"
></A
> Creates a drop-down list.</P
></DD
></DL
><TABLE
CLASS="simplelist"
BORDER="0"
><TR
><TD
CLASS="member"
><CODE
CLASS="literal"
>name</CODE
> <CODE
CLASS="literal"
>=</CODE
> name of element</TD
></TR
><TR
><TD
CLASS="member"
><CODE
CLASS="literal"
>size</CODE
> <CODE
CLASS="literal"
>=</CODE
> number of visible items</TD
></TR
></TABLE
><DL
CLASS="variablelist"
><DT
CLASS="term"
><CODE
CLASS="literal"
>&lt;option&gt;...&lt;/option&gt;</CODE
></DT
><DD
CLASS="listitem"
><P
CLASS="para"
> <A
CLASS="indexterm"
NAME="AUTOID-3489"
></A
> Creates an item in a <CODE
CLASS="literal"
>&lt;select&gt;</CODE
> list; the string in the selected item's value field is passed as the parameter when the form is submitted. </P
></DD
></DL
><TABLE
CLASS="simplelist"
BORDER="0"
><TR
><TD
CLASS="member"
><CODE
CLASS="literal"
>value</CODE
> <CODE
CLASS="literal"
>=</CODE
> string</TD
></TR
></TABLE
><DL
CLASS="variablelist"
><DT
CLASS="term"
><CODE
CLASS="literal"
>&lt;textarea&gt;...&lt;/textarea&gt;</CODE
></DT
><DD
CLASS="listitem"
><P
CLASS="para"
> <A
CLASS="indexterm"
NAME="AUTOID-3502"
></A
> Creates a free-form text entry box.</P
></DD
></DL
><TABLE
CLASS="simplelist"
BORDER="0"
><TR
><TD
CLASS="member"
><CODE
CLASS="literal"
>name</CODE
> <CODE
CLASS="literal"
>=</CODE
> name of element</TD
></TR
><TR
><TD
CLASS="member"
><CODE
CLASS="literal"
>cols</CODE
> <CODE
CLASS="literal"
>=</CODE
> number of columns (characters in a line)</TD
></TR
><TR
><TD
CLASS="member"
><CODE
CLASS="literal"
>rows</CODE
> <CODE
CLASS="literal"
>=</CODE
> number of rows (number of lines)</TD
></TR
></TABLE
><DIV
CLASS="sect3"
><H4
CLASS="sect3"
><A
CLASS="title"
NAME="BOOK-CH-5-SECT-2.7.1"
>5.2.7.1 The &lt; form&gt; tag</A
></H4
><P
CLASS="para"
> <A
CLASS="indexterm"
NAME="AUTOID-3517"
></A
> The most important parameter in the <CODE
CLASS="literal"
>&lt;form&gt;</CODE
> tag is the <CODE
CLASS="literal"
>action</CODE
> attribute, which specifies the program that will execute on the server when the form is submitted. In our case, this program is a PL/SQL procedure whose arguments correspond in name and number to each named input element in the form. When the user presses the Submit button, the values in the form are passed as parameters to the procedure, which then processes the user's input. </P
><P
CLASS="para"
>The <CODE
CLASS="literal"
>method</CODE
> attribute determines how those values are passed. If GET is used, the names and encoded values of each element are appended and sent as one long string that is parsed and decoded at the server. Because the entire length of the string must be under 256 characters for some operating systems, this method should be used only for simple forms, but it is useful when you want to allow the user to include the values entered into a form as part of a bookmark. The POST method, on the other hand, is not limited in character length, but it does not allow for the bookmarking feature. Each element is processed individually by the server. In either case, OAS parses the parameters and passes them to the procedure. </P
></DIV
><DIV
CLASS="sect3"
><H4
CLASS="sect3"
><A
CLASS="title"
NAME="BOOK-CH-5-SECT-2.7.2"
>5.2.7.2 The &lt;input&gt; tag</A
></H4
><P
CLASS="para"
> <A
CLASS="indexterm"
NAME="AUTOID-3526"
></A
> Form input elements are created with the <CODE
CLASS="literal"
>&lt;input&gt;</CODE
> tag. The <CODE
CLASS="literal"
>name</CODE
> attribute links the element to a parameter in the procedure specified by the <CODE
CLASS="literal"
>&lt;form&gt;</CODE
> tag's <CODE
CLASS="literal"
>action</CODE
> attribute. When the form is submitted, the value of the element is passed as the value of its corresponding parameter. </P
><P
CLASS="para"
>The <CODE
CLASS="literal"
>type</CODE
> attribute determines what kind of input element appears on the screen. The following list displays the attributes for the <CODE
CLASS="literal"
>&lt;input&gt;</CODE
> tag: </P
><DL
CLASS="variablelist"
><DT
CLASS="term"
><CODE
CLASS="literal"
>type=text</CODE
></DT
><DD
CLASS="listitem"
><P
CLASS="para"
>Single-line text input box.</P
></DD
></DL
><TABLE
CLASS="simplelist"
BORDER="0"
><TR
><TD
CLASS="member"
><CODE
CLASS="literal"
>maxlength</CODE
> <CODE
CLASS="literal"
>=</CODE
> maximum number of characters that can be entered</TD
></TR
><TR
><TD
CLASS="member"
><CODE
CLASS="literal"
>size</CODE
> <CODE
CLASS="literal"
>=</CODE
> character width of the field: 5, 8, 15, . . . </TD
></TR
><TR
><TD
CLASS="member"
><CODE
CLASS="literal"
>value</CODE
> <CODE
CLASS="literal"
>=</CODE
> string (default value for the field)</TD
></TR
></TABLE
><DL
CLASS="variablelist"
><DT
CLASS="term"
><CODE
CLASS="literal"
>type=hidden</CODE
></DT
><DD
CLASS="listitem"
><P
CLASS="para"
>Placeholder for a value; while it does not show up on the screen, it is passed as a parameter when the form is submitted. Hidden fields are often used to help pass information between multiple forms in a web application. Maxlength, size, and value are the same as <CODE
CLASS="literal"
>type=text</CODE
>, but characters are masked using an asterisk. </P
></DD
><DT
CLASS="term"
><CODE
CLASS="literal"
>type=checkbox</CODE
></DT
><DD
CLASS="listitem"
><P
CLASS="para"
>Checkbox for on/off values; the string in the value field is passed as the parameter value when the form is submitted. </P
></DD
></DL
><TABLE
CLASS="simplelist"
BORDER="0"
><TR
><TD
CLASS="member"
><CODE
CLASS="literal"
>value</CODE
> <CODE
CLASS="literal"
>=</CODE
> string</TD
></TR
><TR
><TD
CLASS="member"
><CODE
CLASS="literal"
>checked</CODE
></TD
></TR
></TABLE
><DL
CLASS="variablelist"
><DT
CLASS="term"
><CODE
CLASS="literal"
>type=radio</CODE
></DT
><DD
CLASS="listitem"
><P
CLASS="para"
>Radio button; radio buttons with the same name form a single group in which the user can select one value. The string in the selected item's value field is passed as the parameter when the form is submitted. </P
></DD
></DL
><TABLE
CLASS="simplelist"
BORDER="0"
><TR
><TD
CLASS="member"
><CODE
CLASS="literal"
>value</CODE
> <CODE
CLASS="literal"
>=</CODE
> string</TD
></TR
><TR
><TD
CLASS="member"
><CODE
CLASS="literal"
>checked</CODE
> </TD
></TR
></TABLE
><DL
CLASS="variablelist"
><DT
CLASS="term"
><CODE
CLASS="literal"
>type=submit</CODE
></DT
><DD
CLASS="listitem"
><P
CLASS="para"
>Submit button; for named buttons, the string in the value field is passed as the parameter when the form is submitted. </P
></DD
></DL
><TABLE
CLASS="simplelist"
BORDER="0"
><TR
><TD
CLASS="member"
><CODE
CLASS="literal"
>name</CODE
> <CODE
CLASS="literal"
>=</CODE
> action to take when the form is submitted</TD
></TR
><TR
><TD
CLASS="member"
><CODE
CLASS="literal"
>value</CODE
> <CODE
CLASS="literal"
>=</CODE
> string (appears as the button's label)</TD
></TR
></TABLE
><P
CLASS="para"
>The next example shows an HTML form with an input box, a set of a radio buttons, a checkbox, and a Submit button that, when pressed, executes a PL/SQL procedure called update_employee. This procedure has three parameters: emp_name, emp_office, and kissup_flag: </P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>&lt;html&gt;
&lt;head&gt;&lt;title&gt;Employee Info&lt;/title&gt;&lt;/head&gt;
&lt;body&gt;
&lt;form action=/hr/plsql/update_employee&gt;
   Employee Name:
      &lt;input type=text name=emp_name size=20 maxlength=10&gt;
   &lt;p&gt;
   Office:
      &lt;input type=radio name=emp_office checked value=BOS&gt;Boston
      &lt;input type=radio name=emp_office value=NYC&gt;New York
      &lt;input type=radio name=emp_office value=CHI&gt;Chicago
   &lt;p&gt;
      &lt;input type=checkbox name=kissup_flag value=&quot;Yes&quot;&gt;
         Loves Job?
   &lt;p&gt;
      &lt;input type=submit&gt;
&lt;/form&gt;
&lt;/body&gt;
&lt;/html&gt;</PRE
></BLOCKQUOTE
><P
CLASS="para"
><A
CLASS="xref"
HREF="ch05_02.htm#BOOK-CH-5-SECT-2.7.1"
>Figure 5.3</A
> shows how a browser displays the form.</P
><H4
CLASS="figure"
><A
CLASS="title"
NAME="BOOK-CH-5-FIG-6"
>Figure 5.3: A simple HTML form</A
></H4
><IMG
CLASS="graphic"
SRC="figs/owa.0503.gif"
ALT="Figure 5.3"><P
CLASS="para"
>The employee text field passes the employee name as the emp_name parameter. The <CODE
CLASS="literal"
>maxlength</CODE
> attribute limits the number of characters that can be entered to 10. The <CODE
CLASS="literal"
>size</CODE
> attribute sets the name field's width to 20, so the size of the field is twice the size of the number of characters that can be entered. This prevents user input from scrolling within the field as text is entered. </P
><P
CLASS="para"
>A radio button allows the user to select one office from a list of three. The options in a set of radio buttons, related to one another by the <CODE
CLASS="literal"
>name</CODE
> attribute, correspond to just one server-side parameter. In the previous example, there are three radio buttons named "office" that correspond to Boston, New York, and Chicago. If the user's gender were required, then the form would require two more radio buttons, named "gender," for male and female. </P
><P
CLASS="para"
>When the form is submitted, the string in the <CODE
CLASS="literal"
>value</CODE
> attribute is used as the parameter when the user makes a selection. For example, "CHI" is passed when "Chicago" is the selected option. </P
><P
CLASS="para"
>A check in the kissup_flag checkbox indicates that the user loves his job. The default <CODE
CLASS="literal"
>checked</CODE
> attribute here gives the user a subtle hint as to what the answer should be. If the box is checked, kissup_flag's value is "Yes" when the form is submitted. </P
><P
CLASS="para"
>The last input tag creates a Submit button that, when pressed, sends the information on the form to the server for processing. Each form must have at least one Submit button. Otherwise, you risk (perhaps purposefully) damning your users to a Kafkaesque hell of entering data that never gets processed. You can use the <CODE
CLASS="literal"
>value</CODE
> attribute if you want to take an action based on what button the user presses. For example, if you want the user to click a button labeled "Add" to insert a record and "Delete" to remove a record, you can create two Submit buttons, both named "action." The value for one is "Add," and the value for the second is "Delete." When the user presses either button, its value is sent to the server as the "action" parameter. You can use this parameter to decide what to do with the information. </P
></DIV
><DIV
CLASS="sect3"
><H4
CLASS="sect3"
><A
CLASS="title"
NAME="BOOK-CH-5-SECT-2.7.3"
>5.2.7.3 The &lt;select&gt; tag</A
></H4
><P
CLASS="para"
> <A
CLASS="indexterm"
NAME="AUTOID-3615"
></A
> You can use the <CODE
CLASS="literal"
>&lt;select&gt;</CODE
> tag to create drop-down lists of items. The name of the <CODE
CLASS="literal"
>&lt;select&gt;</CODE
> list, as specified in the <CODE
CLASS="literal"
>name</CODE
> attribute, corresponds to the input parameter of the server process. The items in the list, which must be enclosed with the <CODE
CLASS="literal"
>&lt;option&gt;</CODE
> tag, supply the value of that parameter. In the previous example, you can create a cleaner interface by replacing the three radio buttons with a single list of offices, as shown in the following example. The HTML code on the left produces the output on the right: </P
><TABLE
CLASS="informaltable"
BORDER="1"
CELLPADDING="3"
><TBODY
CLASS="tbody"
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
> <BLOCKQUOTE
><PRE
CLASS="programlisting"
>&lt;select name=office&gt;
   &lt;option value=BOS&gt;Boston
   &lt;option value=NYC&gt;New York
   &lt;option value=CHI&gt;Chicago
&lt;/select&gt;</PRE
></BLOCKQUOTE
> </TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
> <IMG
CLASS="graphic"
SRC="figs/owa.select.gif"
ALT="Graphic"> </TD
></TR
></TBODY
></TABLE
><P
CLASS="para"
>The <CODE
CLASS="literal"
>size</CODE
> attribute transforms the drop-down list into a scrollable list. In this example, the number of items visible is equal to the size. The following example shows the effect of using the <CODE
CLASS="literal"
>size</CODE
> attribute; the HTML code on the left produces the output on the right: </P
><TABLE
CLASS="informaltable"
BORDER="1"
CELLPADDING="3"
><TBODY
CLASS="tbody"
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
> <BLOCKQUOTE
><PRE
CLASS="programlisting"
>&lt;select name=office size=3&gt;
   &lt;option value=BOS&gt;Boston
   &lt;option value=NYC&gt;New York
   &lt;option value=CHI&gt;Chicago
   &lt;option value=LA&gt;Los Angeles 
&lt;/select&gt;</PRE
></BLOCKQUOTE
> </TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
> <IMG
CLASS="graphic"
SRC="figs/owa.scrollable.gif"
ALT="Graphic"> </TD
></TR
></TBODY
></TABLE
></DIV
><DIV
CLASS="sect3"
><H4
CLASS="sect3"
><A
CLASS="title"
NAME="BOOK-CH-5-SECT-2.7.4"
>5.2.7.4 The &lt;textarea&gt; tag</A
></H4
><P
CLASS="para"
> <A
CLASS="indexterm"
NAME="AUTOID-3647"
></A
> The standard text input box is limited to a single line of input; to create multiline input areas to hold user comments, complaints, and the like, you must use the <CODE
CLASS="literal"
>&lt;textarea&gt;</CODE
> and the <CODE
CLASS="literal"
>&lt;/textarea&gt;</CODE
> tags. Like all the other input tags, each text area must be named using the <CODE
CLASS="literal"
>name</CODE
> attribute. The other main attributes, <CODE
CLASS="literal"
>rows</CODE
> and <CODE
CLASS="literal"
>cols</CODE
>, determine a field's character height and width. Unlike the other input fields, however, the <CODE
CLASS="literal"
>textarea</CODE
> tag does not use the <CODE
CLASS="literal"
>value</CODE
> attribute to set default values. Instead, any plain text between the start and end <CODE
CLASS="literal"
>textarea</CODE
> tags appears as the default value for the field. The following snippet shows how to create a comment field that lets the user enter up to four lines of 40 characters each: </P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>&lt;textarea name=comments cols=40 rows=4&gt;&lt;/textarea&gt;</PRE
></BLOCKQUOTE
></DIV
><DIV
CLASS="sect3"
><H4
CLASS="sect3"
><A
CLASS="title"
NAME="BOOK-CH-5-SECT-2.7.5"
>5.2.7.5 Cleaning up the form</A
></H4
><P
CLASS="para"
>One of the best and worst aspects of HTML is its inability to precisely format a page. For example, when you are laying out an input screen in Oracle Forms, you have exact control, down to the X and Y coordinates, of the placement of each text box, label, and button. However, forcing the browser to display a document in such a highly specific way runs counter to the HTML philosophy. Remember, the browser's built-in rendering engine is meant to eliminate this grunt work. Standard HTML in a browser automatically compensates for changes in both window size and overall resolution. </P
><P
CLASS="para"
>This problem is especially noticeable in HTML forms. Input elements are either crammed up on one row, making the form look sloppy, or lined up one on top of the other, making the form scroll on and on forever. However, there are a few tricks that help overcome some of the inherent HTML limitations. </P
><P
CLASS="para"
>You can use any HTML constructs to improve a form's layout. This includes using flow tags to break the form into logical sections, formatting tags to emphasize labels, lists to create attractive radio buttons, and tables to align each item. The following example combines all these elements to create a nice-looking form: </P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>&lt;form action=/hr/plsql/update_employee&gt;
   &lt;table&gt;
      &lt;tr&gt;
         &lt;th align=right&gt;Name:&lt;/th&gt;
         &lt;td&gt;&lt;input type=text name=emp_name&gt;&lt;/td&gt;
      &lt;tr&gt;  
         &lt;th align=right&gt;Office:&lt;/th&gt;
         &lt;td&gt; 
            &lt;select name=office size=3&gt;
               &lt;option value=BOS&gt;Boston
               &lt;option value=NYC&gt;New York
               &lt;option value=CHI&gt;Chicago
            &lt;/select&gt;
      &lt;tr&gt;
         &lt;th align=right&gt;&lt;i&gt;Loves&lt;/i&gt; Job?&lt;/th&gt;
         &lt;td&gt;&lt;input type=checkbox name=kissup_flag value=Y&gt;&lt;/td&gt;
   &lt;/table&gt;
   &lt;input type=submit value=&quot;Save Responses&quot;&gt;
&lt;/form&gt;</PRE
></BLOCKQUOTE
><P
CLASS="para"
><A
CLASS="xref"
HREF="ch05_02.htm#BOOK-CH-5-SECT-2.7.1"
>Figure 5.4</A
> shows how this form is displayed in a browser. <A
CLASS="indexterm"
NAME="AUTOID-3666"
></A
>  <A
CLASS="indexterm"
NAME="AUTOID-3667"
></A
> </P
><H4
CLASS="figure"
><A
CLASS="title"
NAME="BOOK-CH-5-FIG-9"
>Figure 5.4: A form formatted with a table</A
></H4
><IMG
CLASS="graphic"
SRC="figs/owa.0504.gif"
ALT="Figure 5.4"></DIV
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="BOOK-CH-5-SECT-2.8"
>5.2.8 Beware Browser-Specific Extensions</A
></H3
><P
CLASS="para"
> <A
CLASS="indexterm"
NAME="AUTOID-3674"
></A
> <A
CLASS="indexterm"
NAME="AUTOID-3676"
></A
> Browser vendors have created many browser-specific additions to the base HTML language. Some of these, like tables, are extremely useful and have been incorporated into nearly every major graphical browser. However, many "innovations" are simply pawns in the battle between Microsoft and Netscape to control the future of the web browser. You will find that your worst enemies are often browser vendors themselves; web technology is changing at a feverish pitch as each side tries to one-up the other with a new feature. </P
><P
CLASS="para"
>Although vendors are adding new extensions and features every day, it's probably safest to focus on the basic language and consider very carefully whether you should use a vendor-specific extension. If you are unwilling to constantly tweak your application to keep it compatible with the extensions as they change, you should probably avoid extensions altogether. <A
CLASS="indexterm"
NAME="AUTOID-3680"
></A
>  </P
></DIV
></DIV
><DIV
CLASS="htmlnav"
><P
></P
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch05_01.htm"
TITLE="5.1 Programming in HTML"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 5.1 Programming in HTML"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="book"
HREF="index.htm"
TITLE="Oracle Web Applications: PL/SQL Developer's Introduction"
><IMG
SRC="../gifs/txthome.gif"
ALT="Oracle Web Applications: PL/SQL Developer's Introduction"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="chapter"
HREF="ch06_01.htm"
TITLE="6. PL/SQL"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 6. PL/SQL"
BORDER="0"></A
></TD
></TR
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
>5.1 Programming in HTML</TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="index"
HREF="index/idx_0.htm"
TITLE="Book Index"
><IMG
SRC="../gifs/index.gif"
ALT="Book Index"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
>6. PL/SQL</TD
></TR
></TABLE
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"></DIV
><IMG SRC="../gifs/smnavbar.gif"
USEMAP="#map"
BORDER="0"
ALT="The Oracle Library Navigation">

<P><font size="-1">
<a href="../copyrght.htm#copy">Copyright (c) 2000</a> O'Reilly &amp; Associates. All rights reserved.
</font></P>

<MAP NAME="map">

<AREA SHAPE="RECT"
COORDS="0,0,35,30"
HREF="../index.htm"
ALT="Library Home">

<AREA SHAPE="RECT"
COORDS="40,0,95,30"
HREF="../prog2/index.htm"
ALT="Oracle PL/SQL Programming, 2nd. Ed.">

<AREA SHAPE="RECT"
COORDS="100,0,200,30"
HREF="../guide8i/index.htm"
ALT="Guide to Oracle 8i Features">

<AREA SHAPE="RECT"
COORDS="205,0,245,30"
HREF="../bipack/index.htm"
ALT="Oracle Built-in Packages">

<AREA SHAPE="RECT"
COORDS="250,0,320,30"
HREF="../advprog/index.htm"
ALT="Advanced PL/SQL Programming with Packages">

<AREA SHAPE="RECT"
COORDS="325,0,420,30"
HREF="index.htm"
ALT="Oracle Web Applications">

<AREA SHAPE="RECT"
COORDS="425,0,490,30"
HREF="../langpkt/index.htm"
ALT="Oracle PL/SQL Language Pocket Reference">

<AREA SHAPE="RECT"
COORDS="495,0,570,30"
HREF="../bipkt/index.htm"
ALT="Oracle PL/SQL Built-ins Pocket Reference">
</MAP>

</BODY
>
<!-- Mirrored from liso.cs.pusan.ac.kr by HTTrack Website Copier/3.x [XR&CO'2001] -->
</HTML
>
