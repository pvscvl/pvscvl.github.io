<HTML
><HEAD
><TITLE
>[Chapter 5] HTML</TITLE
><META
NAME="DC.Creator"
CONTENT="Andrew Odewahn"><META
NAME="DC.Date"
CONTENT="2000-04-29T18:35:54Z"><META
NAME="DC.Format"
CONTENT="text/html"
SCHEME="MIME"><META
NAME="DC.Identifier"
CONTENT="O'Reilly and Associates CDROM-1-56592-687-0E"><META
NAME="DC.Language"
CONTENT="en-US"><META
NAME="DC.Publisher"
CONTENT="O'Reilly &amp; Associates, Inc."><META
NAME="DC.Source"
CONTENT="1-56592-687-0E"
SCHEME="ISBN"><META
NAME="DC.Subject.Keyword"
CONTENT="Oracle Web 8i"><META
NAME="DC.Title"
CONTENT="Oracle Web Applications: PL/SQL Developer's Introduction"><META
NAME="DC.Type"
CONTENT="Text.Monograph"><META
NAME="generator"
CONTENT="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><LINK
REL="stylesheet"
TYPE="text/css"
HREF="../style/style1.css"><LINK
REV="made"
HREF="mailto:online-books@oreilly.com"
TITLE="Online Books Comments"><LINK
REL="up"
HREF="index.htm"
TITLE="Oracle Web Applications: PL/SQL Developer's Introduction"><LINK
REL="prev"
HREF="ch04_02.htm#BOOK-CH-4-SECT-2.3"
TITLE="4.2 Creating Dynamic Resources"><LINK
REL="next"
HREF="ch05_02.htm#BOOK-CH-5-SECT-2.7.1"
TITLE="5.2 A Whirlwind Tour"></HEAD
><BODY
><DIV
CLASS="htmlnav"
><H1
><IMG
SRC="gifs/smbanner.gif"
ALT="Oracle Web Applications: PL/SQL Developer's Introduction"
USEMAP="#srchmap"
BORDER="0"></H1
><MAP
NAME="srchmap"
><AREA
SHAPE="RECT"
COORDS="0,0,466,65"
HREF="index.htm"
ALT="Oracle Web Applications: PL/SQL Developer's Introduction"><AREA
SHAPE="RECT"
COORDS="467,0,514,18"
HREF="jobjects/fsearch.htm"
ALT="Search this book"></MAP
><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch04_02.htm#BOOK-CH-4-SECT-2.3"
TITLE="4.2 Creating Dynamic Resources"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 4.2 Creating Dynamic Resources"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><SPAN
CLASS="NAVTITLE"
>Chapter 5</SPAN
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch05_02.htm#BOOK-CH-5-SECT-2.7.1"
TITLE="5.2 A Whirlwind Tour"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 5.2 A Whirlwind Tour"
BORDER="0"></A
></TD
></TR
></TABLE
>&nbsp;<HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"></DIV
><DIV
CLASS="chapter"
><H1
CLASS="chapter"
><A
CLASS="title"
NAME="BOOK-CH-5"
>5. HTML</A
></H1
><DIV
CLASS="htmltoc"
><P
><B
>Contents:</B
><BR><A
CLASS="sect1"
HREF="#BOOK-CH-5-SECT-1"
TITLE="5.1 Programming in HTML"
>Programming in HTML</A
><BR><A
CLASS="sect1"
HREF="ch05_02.htm#BOOK-CH-5-SECT-2.7.1"
TITLE="5.2 A Whirlwind Tour"
>A Whirlwind Tour</A
></P
><P
></P
></DIV
><P
CLASS="para"
> <A
CLASS="indexterm"
NAME="ch-05-html"
></A
> Now that we've discussed WebDB and OAS, we're ready to begin building applications. As you learned in Computer Science 101, user applications have a user interface, whether it's a simple command line, like the one in DOS or Unix, or a full windowing system, like Windows or X. In this chapter you'll learn how to use HTML (HyperText Markup Language) to create an interface that's somewhere in between these two extremes. </P
><P
CLASS="para"
>This chapter, while by no means comprehensive, provides enough of an introduction to HTML to get you started building useful systems. We'll begin with the basics of HTML programming, covering how to best start learning the language (if you don't know it already) and how to use its tag- and attribute-based syntax. We'll then take a whirlwind tour of HTML, examining most of the major tags you'll use every day. You can find a listing of more complete reference works in the appendix, <EM
CLASS="emphasis"
>Resources for the Oracle Web Developer</EM
>. </P
><DIV
CLASS="sect1"
><H2
CLASS="sect1"
><A
CLASS="title"
NAME="BOOK-CH-5-SECT-1"
>5.1 Programming in HTML</A
></H2
><P
CLASS="para"
> <A
CLASS="indexterm"
NAME="AUTOID-2815"
></A
> Your company's human resources department may have its personnel policy on an internal web site. You can go to a main page and click on policies that cover various things HR types find important: dress codes, organization charts, inter-employee dating rules, and so on. Almost invariably, these documents have been converted from existing documents, such as Word or WordPerfect documents, using an editor like Microsoft FrontPage, Adobe PageMill, or Netscape Composer. While these tools are certainly useful, we must understand the actual HTML they generate before we can create a user interface for our web systems. </P
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="BOOK-CH-5-SECT-1.1"
>5.1.1 Learning the Language</A
></H3
><P
CLASS="para"
>The first thing you need to know about HTML is that you don't need a fancy editor to create an HTML document. HTML is a text file format, so you can use any editor you want to create a document. The second thing to know is that, unlike many other Internet standards, HTML is fairly simple. You can learn much of what you'll need to know about HTML in an afternoon. </P
><P
CLASS="para"
>The best way to learn HTML is to create a skeleton document in your favorite editor, save it to a file, and view the results with a browser. You don't even have to be on the Web to see your creation; almost all browsers can open a file directly from your system. Once you get bored tinkering with the basic tags, you can justify hours of web surfing as an educational expense by using the "View Source" option to see the underlying HTML code (but not the source code of the dynamic resource that created the document) for the pages you visit. Of course, like any other language, HTML has a syntax you must master before you can use it. This is subject of the next section. </P
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="BOOK-CH-5-SECT-1.2"
>5.1.2 Syntax</A
></H3
><P
CLASS="para"
> <A
CLASS="indexterm"
NAME="AUTOID-2825"
></A
> <A
CLASS="indexterm"
NAME="AUTOID-2828"
></A
> HTML consists of plain ASCII text that is marked up using special instructions called <EM
CLASS="emphasis"
>tags</EM
> that define the document's structure and format. It's a very forgiving language: errors that in other languages would be devastating (like misspelling a reserved word) are usually ignored. It's not case sensitive, the instructions can appear in practically any order or combination, and most browsers are now smart enough to fill in anything you might mistakenly omit. </P
><P
CLASS="para"
>The tradeoff for this simplicity is that HTML doesn't give you absolute control over the placement of each element, which makes it significantly different from a tool like Oracle Reports or Oracle Forms. For instance, rather than specify the exact X and Y coordinates for an input box, you simply tell the browser that you want a text field. The browser decides the best location for the box, based on the rules you've specified. You will constantly face the temptation to mangle the HTML syntax to bend the browser to your will. You should resist this urge. Letting the browser do the grunt work is well worth losing absolute control of the GUI interface, and is actually one of the most liberating aspects of this type of design. </P
><P
CLASS="para"
>The basic building blocks of HTML, tags and attributes, are described in the following sections. </P
><DIV
CLASS="sect3"
><H4
CLASS="sect3"
><A
CLASS="title"
NAME="BOOK-CH-5-SECT-1.2.1"
>5.1.2.1 Tags</A
></H4
><P
CLASS="para"
>Tags are instructions that look a lot like the formatting controls of older, pre- WYSIWYG word processors. A tag is descriptive: for example, the <CODE
CLASS="literal"
>&lt;b&gt;</CODE
> tag makes a section of text appear in bold, and the <CODE
CLASS="literal"
>&lt;big&gt;</CODE
> tag increases the size of the text. In addition to simply controlling the appearance and format of text, tags can create structural elements such as tables or data entry forms, as well as hyperlinks that create links between documents. </P
><P
CLASS="para"
>Each tag has a complementary <EM
CLASS="emphasis"
>end tag</EM
> that ends the action it is performing. For the tags just cited, <CODE
CLASS="literal"
>&lt;/b&gt;</CODE
> stops the text from appearing in bold, and <CODE
CLASS="literal"
>&lt;/big</CODE
>&gt; returns the text to normal size. In an HTML list, individual items are denoted by enclosing them between <CODE
CLASS="literal"
>&lt;li&gt;</CODE
> and <CODE
CLASS="literal"
>&lt;/li&gt;</CODE
> tags. Some tags don't require a corresponding end tag. For example, the <CODE
CLASS="literal"
>&lt;p&gt;</CODE
> tag, which is used to create a line break in a string of text, doesn't require a corresponding <CODE
CLASS="literal"
>&lt;/p&gt;</CODE
>. </P
><P
CLASS="para"
>Because one item ends where the next one begins, some browsers allow you to omit some end tags. For example, in Microsoft Internet Explorer, you can leave off the <CODE
CLASS="literal"
>&lt;/li&gt;</CODE
> tag; its presence is assumed by the <CODE
CLASS="literal"
>&lt;li&gt;</CODE
> which starts the next item. In Netscape, on the other hand, you must explicitly include the <CODE
CLASS="literal"
>&lt;/li&gt;</CODE
> tag. This is one reason why it's always a good idea to test your systems on at least the two major browsers, and stick to HTML standards as much as possible. </P
><P
CLASS="para"
>Tags are often nested to create effects. For example, the nested tags in the HTML sequence &lt;<CODE
CLASS="literal"
>b&gt;&lt;i&gt;HTML&lt;/i&gt;</CODE
> <CODE
CLASS="literal"
>is</CODE
> <CODE
CLASS="literal"
>great&lt;/b</CODE
>&gt; cause the text to appear as "<EM
CLASS="emphasis"
>HTML</EM
><CODE
CLASS="sgmltag"
>&lt; &gt;</CODE
><B
CLASS="emphasis.bold"
> is great</B
>". You can also nest tags to create more complex structures, such as an input form formatted using an HTML table, or a list of hyperlinks. </P
></DIV
><DIV
CLASS="sect3"
><H4
CLASS="sect3"
><A
CLASS="title"
NAME="BOOK-CH-5-SECT-1.2.2"
>5.1.2.2 Attributes</A
></H4
><P
CLASS="para"
> <A
CLASS="indexterm"
NAME="AUTOID-2860"
></A
> Most tags have optional parameters, called <EM
CLASS="emphasis"
>attributes</EM
>, that provide more information about how they are to function. The tag <CODE
CLASS="literal"
>&lt;font</CODE
> <CODE
CLASS="literal"
>color=red</CODE
> <CODE
CLASS="literal"
>size=3&gt;</CODE
> has two attributes, color and size. Not surprisingly, in this example the <CODE
CLASS="literal"
>color</CODE
> attribute makes the text red, and the <CODE
CLASS="literal"
>size</CODE
> attribute makes it appear as size 3. Attributes can appear in any order, so <CODE
CLASS="literal"
>&lt;font</CODE
> <CODE
CLASS="literal"
>size=3</CODE
> <CODE
CLASS="literal"
>color=red&gt;</CODE
> has the same effect as the previous example. </P
><P
CLASS="para"
>Attributes usually begin with the name of the attribute, followed by an equal sign, and then the desired value. If the value is not a single word or number, it must be enclosed in double quotes. Sometimes an attribute does not have any values. For example, the <CODE
CLASS="literal"
>&lt;checkbox&gt;</CODE
> tag, used to create a checkbox in an HTML form, has a <CODE
CLASS="literal"
>checked</CODE
> attribute. This attribute, unlike the <CODE
CLASS="literal"
>color</CODE
> attribute, for example, has no associated values. Including the <CODE
CLASS="literal"
>checked</CODE
> attribute is all that is necessary for the box to show up on the form with a check in it. </P
><P
CLASS="para"
>An end tag never has attributes.</P
></DIV
><DIV
CLASS="sect3"
><H4
CLASS="sect3"
><A
CLASS="title"
NAME="BOOK-CH-5-SECT-1.2.3"
>5.1.2.3 A sample document</A
></H4
><P
CLASS="para"
>Here is a typical HTML document your company's human resources department might want you to develop. It asks users to enter their names and select whether they would like a raise. </P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>&lt;html&gt;
   &lt;head&gt;
      &lt;title&gt;HR Salary Survey&lt;/title&gt;
   &lt;/head&gt;
   &lt;body&gt;
      &lt;h1&gt;Salary Survey&lt;/h1&gt;
      &lt;hr&gt;
      &lt;form action=/hr_dcd/plsql/survey&gt;
         1. What is your name?
            &lt;input type=text name=employee_name value=&quot;Enter Name&quot;&gt;
         &lt;p&gt;
         2. Do you want a raise?
            &lt;input name=answer type=radio&gt; Yes
            &lt;input name=answer type=radio checked&gt; No
         &lt;p&gt;
         &lt;input type=submit&gt;
      &lt;/form&gt; 
   &lt;/body&gt;
&lt;/html&gt;</PRE
></BLOCKQUOTE
><P
CLASS="para"
> <A
CLASS="indexterm"
NAME="AUTOID-2883"
></A
> The survey begins with the <CODE
CLASS="literal"
>&lt;html</CODE
>&gt; tag, which announces that the document is in HTML format. HTML documents have two parts: a head and a body. The header section, which begins with the <CODE
CLASS="literal"
>&lt;head&gt;</CODE
> tag, contains descriptive information about the document, sometimes referred to as <I
CLASS="firstterm"
>metainformation</I
>. In this document, the only descriptive information in the head is the title (denoted with the <CODE
CLASS="literal"
>&lt;title&gt;</CODE
> tag) that appears in the browser's titlebar. </P
><P
CLASS="para"
>The body section comes after the head. The first item in the body is an instruction to the user. The <CODE
CLASS="literal"
>&lt;h1&gt;</CODE
> tag (heading level 1) increases the size of the message to make it more noticeable. The <CODE
CLASS="literal"
>&lt;p&gt;</CODE
> tag starts a new paragraph on the page. The <CODE
CLASS="literal"
>&lt;p&gt;</CODE
> tag is needed because browsers ignore extra whitespace and line breaks. All the text in a document appears as one long string unless you explicitly use tags to insert breaks where you want them. </P
><P
CLASS="para"
>The next set of tags creates an input form. The form has three items: a text box in which the user can enter his name, a Yes/No radio button to answer the question "Do you want a raise?" (conveniently defaulted to "No"), and a button to submit the form. </P
><P
CLASS="para"
>The information on the form is processed when the user presses the Submit button. Submitting the form invokes the PL/SQL procedure specified in the <CODE
CLASS="literal"
>action</CODE
> attribute declared in the <CODE
CLASS="literal"
>&lt;form&gt;</CODE
> tag. This program might insert the information into a table, write it to a file, or call the fire_employee procedure if a user fails to give a satisfactory answer to the survey. </P
><P
CLASS="para"
><A
CLASS="xref"
HREF="ch05_01.htm"
>Figure 5.1</A
> shows how a browser displays the document. </P
><H4
CLASS="figure"
><A
CLASS="title"
NAME="BOOK-CH-5-FIG-1"
>Figure 5.1: An HTML salary survey</A
></H4
><IMG
CLASS="graphic"
SRC="figs/owa.0501.gif"
ALT="Figure 5.1"></DIV
></DIV
></DIV
></DIV
><DIV
CLASS="htmlnav"
><P
></P
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch04_02.htm#BOOK-CH-4-SECT-2.3"
TITLE="4.2 Creating Dynamic Resources"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 4.2 Creating Dynamic Resources"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="book"
HREF="index.htm"
TITLE="Oracle Web Applications: PL/SQL Developer's Introduction"
><IMG
SRC="../gifs/txthome.gif"
ALT="Oracle Web Applications: PL/SQL Developer's Introduction"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch05_02.htm#BOOK-CH-5-SECT-2.7.1"
TITLE="5.2 A Whirlwind Tour"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 5.2 A Whirlwind Tour"
BORDER="0"></A
></TD
></TR
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
>4.2 Creating Dynamic Resources</TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="index"
HREF="index/idx_0.htm"
TITLE="Book Index"
><IMG
SRC="../gifs/index.gif"
ALT="Book Index"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
>5.2 A Whirlwind Tour</TD
></TR
></TABLE
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"></DIV
><IMG SRC="../gifs/smnavbar.gif"
USEMAP="#map"
BORDER="0"
ALT="The Oracle Library Navigation">

<P><font size="-1">
<a href="../copyrght.htm#copy">Copyright (c) 2000</a> O'Reilly &amp; Associates. All rights reserved.
</font></P>

<MAP NAME="map">

<AREA SHAPE="RECT"
COORDS="0,0,35,30"
HREF="../index.htm"
ALT="Library Home">

<AREA SHAPE="RECT"
COORDS="40,0,95,30"
HREF="../prog2/index.htm"
ALT="Oracle PL/SQL Programming, 2nd. Ed.">

<AREA SHAPE="RECT"
COORDS="100,0,200,30"
HREF="../guide8i/index.htm"
ALT="Guide to Oracle 8i Features">

<AREA SHAPE="RECT"
COORDS="205,0,245,30"
HREF="../bipack/index.htm"
ALT="Oracle Built-in Packages">

<AREA SHAPE="RECT"
COORDS="250,0,320,30"
HREF="../advprog/index.htm"
ALT="Advanced PL/SQL Programming with Packages">

<AREA SHAPE="RECT"
COORDS="325,0,420,30"
HREF="index.htm"
ALT="Oracle Web Applications">

<AREA SHAPE="RECT"
COORDS="425,0,490,30"
HREF="../langpkt/index.htm"
ALT="Oracle PL/SQL Language Pocket Reference">

<AREA SHAPE="RECT"
COORDS="495,0,570,30"
HREF="../bipkt/index.htm"
ALT="Oracle PL/SQL Built-ins Pocket Reference">
</MAP>

</BODY
>
<!-- Mirrored from liso.cs.pusan.ac.kr by HTTrack Website Copier/3.x [XR&CO'2001] -->
</HTML
>
