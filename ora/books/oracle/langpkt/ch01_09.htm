<HTML
><HEAD
><TITLE
>[Chapter 1] 1.9 Cursors in PL/SQL </TITLE
><META
NAME="DC.Creator"
CONTENT="Steven Feuerstein, Bill Pribyl &amp; Chip Dawes"><META
NAME="DC.Date"
CONTENT="2000-04-29T17:32:00Z"><META
NAME="DC.Format"
CONTENT="text/html"
SCHEME="MIME"><META
NAME="DC.Identifier"
CONTENT="O'Reilly and Associates CD-ROM-1-56592-457-6E"><META
NAME="DC.Language"
CONTENT="en-US"><META
NAME="DC.Publisher"
CONTENT="O'Reilly &amp; Associates, Inc."><META
NAME="DC.Source"
CONTENT="1-56592-457-6E"
SCHEME="ISBN"><META
NAME="DC.Subject.Keyword"
CONTENT="Oracle PL/SQL Reference"><META
NAME="DC.Title"
CONTENT="Oracle PL/SQL Language Pocket Reference"><META
NAME="DC.Type"
CONTENT="Text.Monograph"><META
NAME="generator"
CONTENT="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><LINK
REL="stylesheet"
TYPE="text/css"
HREF="../style/style1.css"><LINK
REV="made"
HREF="mailto:online-books@oreilly.com"
TITLE="Online Books Comments"><LINK
REL="up"
HREF="ch01_01.htm"
TITLE="1. Oracle PL/SQL Language Pocket Reference"><LINK
REL="prev"
HREF="ch01_08.htm"
TITLE="1.8 Database Interaction and Cursors "><LINK
REL="next"
HREF="ch01_10.htm"
TITLE="1.10 Exception Handling "></HEAD
><BODY
><DIV
CLASS="htmlnav"
><H1
><IMG
SRC="gifs/smbanner.gif"
ALT="Oracle PL/SQL Language Pocket Reference"
USEMAP="#srchmap"
BORDER="0"></H1
><MAP
NAME="srchmap"
><AREA
SHAPE="RECT"
COORDS="0,0,466,65"
HREF="index.htm"
ALT="Oracle PL/SQL Language Pocket Reference"><AREA
SHAPE="RECT"
COORDS="467,0,514,18"
HREF="jobjects/fsearch.htm"
ALT="Search this book"></MAP
><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch01_08.htm"
TITLE="1.8 Database Interaction and Cursors "
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 1.8 Database Interaction and Cursors "
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><SPAN
CLASS="NAVTITLE"
><A
CLASS="chapter"
REL="up"
HREF="ch01_01.htm"
TITLE="1. Oracle PL/SQL Language Pocket Reference"
>Chapter 1<BR>Oracle PL/SQL Language Pocket Reference</A
></SPAN
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch01_10.htm"
TITLE="1.10 Exception Handling "
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 1.10 Exception Handling "
BORDER="0"></A
></TD
></TR
></TABLE
>&nbsp;<HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"></DIV
><DIV
CLASS="sect1"
><H2
CLASS="sect1"
><A
CLASS="title"
NAME="plsql-toc443895353"
>1.9 Cursors in PL/SQL </A
></H2
><P
CLASS="para"
>Every SQL statement executed by the RDBMS has a private SQL area that contains information about the SQL statement and the set of data returned. In PL/SQL, a cursor is a name assigned to a specific private SQL area for a specific SQL statement. There can be either static cursors, whose SQL statement is determined at compile time, or dynamic cursors, whose SQL statement is determined at runtime. Static cursors are covered in greater detail in this section. Dynamic cursors in PL/SQL are implemented via the built-in package DBMS_SQL. See the  book <CITE
CLASS="citetitle"
> <EM
CLASS="emphasis"
>Oracle Built-in Packages</EM
></CITE
> and the corresponding  <CITE
CLASS="citetitle"
><EM
CLASS="emphasis"
>Oracle PL/SQL Built-ins Pocket Reference</EM
></CITE
>, both from O'Reilly &amp; Associates, for full coverage on DBMS_SQL and the other built-in packages.</P
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="plsql-toc443895354"
>1.9.1 Explicit Cursors </A
></H3
><P
CLASS="para"
>Explicit cursors are SELECT statements that are DECLAREd explicitly in the declaration section of the current block or in a package specification. Use OPEN, FETCH, and CLOSE in the execution or exception sections of your programs. </P
><DIV
CLASS="sect3"
><H4
CLASS="sect3"
><A
CLASS="title"
NAME="plsql-toc443895355"
>1.9.1.1 Declaring explicit cursors </A
></H4
><P
CLASS="para"
>To use an explicit cursor, you must first declare it in the declaration section of a block or package. There are three types of explicit cursor declarations:</P
><UL
CLASS="itemizedlist"
><LI
CLASS="listitem"
><P
CLASS="para"
>A cursor without parameters, such as:</P
></LI
></UL
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>      CURSOR company_cur 
         IS
         SELECT company_id FROM company;</PRE
></BLOCKQUOTE
><UL
CLASS="itemizedlist"
><LI
CLASS="listitem"
><P
CLASS="para"
>A cursor that accepts arguments through a parameter list:</P
></LI
></UL
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>      CURSOR company_cur (id_in IN NUMBER) IS
      SELECT name FROM company
      WHERE  company_id = id_in;</PRE
></BLOCKQUOTE
><UL
CLASS="itemizedlist"
><LI
CLASS="listitem"
><P
CLASS="para"
>A cursor <EM
CLASS="emphasis"
>header</EM
> that contains a RETURN clause in place of the SELECT statement:</P
></LI
></UL
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>      CURSOR company_cur (id_in IN NUMBER) 
      RETURN company%ROWTYPE IS
      SELECT * FROM company;</PRE
></BLOCKQUOTE
><P
CLASS="para"
>This technique can be used in packages to hide the implementation of the cursor in the package body. See the <A
CLASS="xref"
HREF="ch01_14.htm"
>Section 1.14</A
>" section for more information.</P
></DIV
><DIV
CLASS="sect3"
><H4
CLASS="sect3"
><A
CLASS="title"
NAME="plsql-toc443895356"
>1.9.1.2 Opening explicit cursors</A
></H4
><P
CLASS="para"
>To open a cursor, use the following syntax:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>OPEN cursor_name [(argument [,argument ...])];</PRE
></BLOCKQUOTE
><P
CLASS="para"
>where <EM
CLASS="emphasis"
>cursor_name</EM
> is the name of the cursor as declared in the declaration section. The arguments are required if the definition of the cursor contains a parameter list. </P
><P
CLASS="para"
>You must open an explicit cursor before you can fetch rows from that cursor. When the cursor is opened, the processing includes the PARSE, BIND, OPEN, and EXECUTE statements. This OPEN processing includes: determining an execution plan, associating host variables and cursor parameters with the placeholders in the SQL statement, determining the result set, and, finally, setting the current row pointer to the first row in the result set. </P
><P
CLASS="para"
>When using a cursor FOR loop, the OPEN is implicit in the FOR statement. If you try to open a cursor that is already open, PL/SQL will raise an "ORA-06511: PL/SQL: cursor already open" exception.</P
></DIV
><DIV
CLASS="sect3"
><H4
CLASS="sect3"
><A
CLASS="title"
NAME="plsql-toc443895357"
>1.9.1.3 Fetching from explicit cursors</A
></H4
><P
CLASS="para"
>The FETCH statement places the contents of the current row into local variables. To retrieve all rows in a result set, each row needs to be fetched. The syntax for a FETCH statement is:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>FETCH cursor_name INTO record_or_variable_list;</PRE
></BLOCKQUOTE
><P
CLASS="para"
>where <EM
CLASS="emphasis"
>cursor_name</EM
> is the name of the cursor as declared and opened. </P
></DIV
><DIV
CLASS="sect3"
><H4
CLASS="sect3"
><A
CLASS="title"
NAME="plsql-toc443895358"
>1.9.1.4 Closing explicit cursors</A
></H4
><P
CLASS="para"
>The syntax of the CLOSE statement is:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>CLOSE cursor_name;</PRE
></BLOCKQUOTE
><P
CLASS="para"
>where <EM
CLASS="emphasis"
>cursor_name</EM
> is the name of the cursor declared and opened. </P
><P
CLASS="para"
>After all rows have been fetched, a cursor needs to be closed. Closing a cursor releases the private SQL area used by the cursor, freeing the memory used by that cursor.</P
><P
CLASS="para"
>If you declare a cursor in a local anonymous, procedure, or function block, that cursor will automatically close when the block terminates. Package-based cursors must be closed explicitly, or they stay open for the duration of your session. Closing a cursor that is not open raises an INVALID CURSOR exception.</P
></DIV
><DIV
CLASS="sect3"
><H4
CLASS="sect3"
><A
CLASS="title"
NAME="plsql-toc443895359"
>1.9.1.5 Explicit cursor attributes</A
></H4
><P
CLASS="para"
>There are four attributes associated with cursors: ISOPEN, FOUND, NOTFOUND, and ROWCOUNT. These attributes can be accessed with the % delimiter to obtain information about the state of the cursor. The syntax for a cursor attribute is:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>cursor_name%attribute</PRE
></BLOCKQUOTE
><P
CLASS="para"
>where <EM
CLASS="emphasis"
>cursor_name</EM
> is the name of the explicit cursor. </P
><P
CLASS="para"
>The behaviors of the explicit cursor attributes are described in the following table.</P
><TABLE
CLASS="informaltable"
BORDER="1"
CELLPADDING="3"
><THEAD
CLASS="thead"
><TR
CLASS="row"
VALIGN="TOP"
><TH
CLASS="entry"
ALIGN="LEFT"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>Attribute</P
></TH
><TH
CLASS="entry"
ALIGN="LEFT"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>Description</P
></TH
></TR
></THEAD
><TBODY
CLASS="tbody"
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>%ISOPEN</P
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>TRUE if cursor is open.</P
><P
CLASS="para"
>FALSE if cursor is not open.</P
></TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>%FOUND</P
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>INVALID_CURSOR is raised if cursor has not been OPENed. </P
><P
CLASS="para"
>NULL before the first fetch. </P
><P
CLASS="para"
>TRUE if record was fetched successfully.</P
><P
CLASS="para"
>FALSE if no row was returned.</P
><P
CLASS="para"
>INVALID_CURSOR if cursor has been CLOSEd.</P
></TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>%NOTFOUND</P
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>INVALID_CURSOR is raised if cursor has not been OPENed.</P
><P
CLASS="para"
>NULL before the first fetch. </P
><P
CLASS="para"
>FALSE if record was fetched successfully.</P
><P
CLASS="para"
>TRUE if no row was returned.</P
><P
CLASS="para"
>INVALID_CURSOR if cursor has been CLOSEd.</P
></TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>%ROWCOUNT</P
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>INVALID_CURSOR is raised if cursor has not been OPENed.</P
><P
CLASS="para"
>The number of rows fetched from the cursor.</P
><P
CLASS="para"
>INVALID_CURSOR if cursor has been CLOSEd.</P
></TD
></TR
></TBODY
></TABLE
><P
CLASS="para"
>Frequently a cursor attribute is checked as part of a WHILE loop that fetches rows from a cursor:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>DECLARE
   caller_rec caller_pkg.caller_cur%ROWTYPE;
BEGIN
   OPEN caller_pkg.caller_cur;
   LOOP
      FETCH caller_pkg.caller_cur into caller_rec;
      EXIT WHEN caller_pkg.caller_cur%NOTFOUND
               OR 
               caller_pkg.caller_cur%ROWCOUNT &gt; 10;

      UPDATE call
         SET caller_id = caller_rec.caller_id
         WHERE call_timestamp &lt; SYSDATE;
   END LOOP;
   CLOSE caller_pkg.caller_cur;
END;</PRE
></BLOCKQUOTE
></DIV
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="plsql-toc443895360"
>1.9.2 Implicit Cursors </A
></H3
><P
CLASS="para"
>Whenever a SQL statement is directly in the execution or exception section of a PL/SQL block, you are working with implicit cursors. These statements include INSERT, UPDATE, DELETE, and SELECT INTO statements. Unlike explicit cursors, implicit cursors do not need to be declared, OPENed, FETCHed, or CLOSEd. </P
><P
CLASS="para"
>SELECT statements handle the %FOUND and %NOTFOUND attributes differently from explicit cursors. When an implicit SELECT statement does not return any rows, PL/SQL immediately raises the NO_DATA_FOUND exception and control passes to the exception section. When an implicit SELECT returns more than one row, PL/SQL immediately raises the TOO_MANY_ROWS exception and control passes to the exception section. </P
><P
CLASS="para"
>Implicit cursor attributes are referenced via the SQL cursor. For example:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>BEGIN
   UPDATE activity SET last_accessed := SYSDATE
   WHERE UID = user_id;

   IF SQL%NOTFOUND THEN
      INSERT INTO activity_log (uid,last_accessed)
      VALUES (user_id,SYSDATE);
   END IF
END;</PRE
></BLOCKQUOTE
><TABLE
CLASS="informaltable"
BORDER="1"
CELLPADDING="3"
><THEAD
CLASS="thead"
><TR
CLASS="row"
VALIGN="TOP"
><TH
CLASS="entry"
ALIGN="LEFT"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>SQL Attributes</P
></TH
><TH
CLASS="entry"
ALIGN="LEFT"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>Description</P
></TH
></TR
></THEAD
><TBODY
CLASS="tbody"
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>%ISOPEN</P
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>Always FALSE since the cursor is opened implicitly and closed immediately after the statement is executed.</P
></TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>%FOUND</P
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>NULL before the statement.</P
><P
CLASS="para"
>TRUE if one or more rows were inserted, updated, or deleted or if only one row was selected.</P
><P
CLASS="para"
>FALSE if no row was selected, updated, inserted, or deleted.</P
></TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>%NOTFOUND</P
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>NULL before the statement.</P
><P
CLASS="para"
>TRUE if no row was selected, updated, inserted, or deleted. </P
><P
CLASS="para"
>FALSE if one or more rows were inserted, updated, or deleted.</P
></TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>%ROWCOUNT</P
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>The number of rows affected by the cursor.</P
></TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>%BULK_ROWCOUNT (Oracle8<EM
CLASS="emphasis"
>i)</EM
></P
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>A pseudo index-by table containing the numbers of rows affected by the statements executed in bulk bind operations. See the "Bulk Binds (Oracle8<EM
CLASS="emphasis"
>i</EM
>)" section for more information on %BULK_ROWCOUNT.</P
></TD
></TR
></TBODY
></TABLE
><P
CLASS="para"
>Use the RETURNING clause in INSERT, UPDATE, and DELETE statements to obtain data modified by the associated DML statement. This clause allows you to avoid an additional SELECT statement to query the results of the DML statement. For example:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>BEGIN
   UPDATE activity SET last_accessed := SYSDATE
   WHERE UID = user_id
   RETURNING last_accessed, cost_center 
   INTO timestamp, chargeback_acct;</PRE
></BLOCKQUOTE
><DIV
CLASS="sect3"
><H4
CLASS="sect3"
><A
CLASS="title"
NAME="plsql-toc443895361"
>1.9.2.1 The SELECT FOR UPDATE clause</A
></H4
><P
CLASS="para"
>By default, the Oracle RDBMS locks rows as they are changed. To lock all rows in a result set, use the FOR UPDATE clause in your SELECT statement when you OPEN the cursor, instead of when you change the data. Using the FOR UPDATE clause does not require you to actually make changes to the data; it only locks the rows when opening the cursor. These locks are released on the next COMMIT or ROLLBACK. As always, these row locks do not affect other SELECT statements unless they, too, are FOR UPDATE. The FOR UPDATE clause is appended to the end of the SELECT statement and has the following syntax:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>SELECT ...
  FROM ...
   FOR UPDATE [OF column_reference] [NOWAIT];</PRE
></BLOCKQUOTE
><P
CLASS="para"
>where <EM
CLASS="emphasis"
>column_reference</EM
> is a comma-delimited list of columns that appear in the SELECT clause. The NOWAIT keyword tells the RDBMS to not wait for other blocking locks to be released. The default is to wait forever. </P
><P
CLASS="para"
>In the following example, only columns from the inventory (pet) table are referenced FOR UPDATE, so no rows in the <EM
CLASS="emphasis"
>dog_breeds</EM
> (dog) table are locked when <EM
CLASS="emphasis"
>hounds_in_stock_cur</EM
> is opened: </P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>DECLARE
   CURSOR hounds_in_stock_cur IS
      SELECT pet.stock_no, pet.breeder, dog.size
        FROM dog_breeds dog ,inventory pet
       WHERE dog.breed = pet.breed
         AND dog.class = 'HOUND'
         FOR UPDATE OF pet.stock_no, pet.breeder;
BEGIN</PRE
></BLOCKQUOTE
></DIV
><DIV
CLASS="sect3"
><H4
CLASS="sect3"
><A
CLASS="title"
NAME="plsql-toc443895362"
>1.9.2.2 The WHERE CURRENT OF clause</A
></H4
><P
CLASS="para"
>UPDATE and DELETE statements can use a WHERE CURRENT OF clause if they reference a cursor declared FOR UPDATE. This syntax indicates that the UPDATE or DELETE should modify the current row identified by the FOR UPDATE cursor. The syntax is:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>[UPDATE | DELETE ] ...
   WHERE CURRENT OF cursor_name;</PRE
></BLOCKQUOTE
><P
CLASS="para"
>By using WHERE CURRENT OF, you do not have to repeat the WHERE clause in the SELECT statement. For example:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>DECLARE
   CURSOR wip_cur IS
      SELECT acct_no, enter_date FROM wip
       WHERE enter_date &lt; SYSDATE -7
         FOR UPDATE;
BEGIN
   FOR wip_rec IN wip_cur
   LOOP
      INSERT INTO acct_log (acct_no, order_date)
         VALUES (wip_rec.acct_no, wip_rec.enter_
            date);
      DELETE FROM wip 
         WHERE CURRENT OF wip_cur;
   END LOOP;
END; </PRE
></BLOCKQUOTE
></DIV
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="plsql-toc443895363"
>1.9.3 Cursor Variables</A
></H3
><P
CLASS="para"
>A cursor variable is a data structure that points to a cursor object, which in turn points to the cursor's result set. You can use cursor variables to more easily retrieve rows in a result set from client and server programs. You can also use cursor variables to hide minor variations in queries. </P
><P
CLASS="para"
>The syntax for a REF_CURSOR type is:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>TYPE ref_cursor_name IS REF CURSOR 
   [RETURN record_type];</PRE
></BLOCKQUOTE
><P
CLASS="para"
>If you do not include a RETURN clause, then you are declaring a weak REF CURSOR. Cursor variables declared from weak REF CURSORs can be associated with any query at runtime. A REF CURSOR declaration with a RETURN clause defines a "strong" REF CURSOR. A cursor variable based on a strong REF CURSOR can be associated with queries whose result sets match the number and datatype of the record structure after the RETURN at runtime.</P
><P
CLASS="para"
>To use cursor variables, you must first create a REF_CURSOR type, then declare a cursor variable based on that type. </P
><P
CLASS="para"
>The following example shows the use of both weak and strong REF CURSORs:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>DECLARE
   -- Create a cursor type based on the companies   
      table.
   TYPE company_curtype IS REF CURSOR 
      RETURN companies%ROWTYPE;

   -- Create the variable based on the REF CURSOR.
   company_cur company_curtype;

   -- And now the weak, general approach.
   TYPE any_curtype IS REF CURSOR;
   generic_curvar any_curtype;</PRE
></BLOCKQUOTE
><P
CLASS="para"
>The syntax to OPEN a cursor variable is:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>OPEN cursor_name FOR select_statement;</PRE
></BLOCKQUOTE
><P
CLASS="para"
>FETCH and CLOSE a cursor variable using the same syntax as for explicit cursors. There are a number of restrictions on cursor variables:</P
><UL
CLASS="itemizedlist"
><LI
CLASS="listitem"
><P
CLASS="para"
>Cursor variables cannot be declared in a package since they do not have a persistent state. </P
></LI
><LI
CLASS="listitem"
><P
CLASS="para"
>You cannot use the FOR UPDATE clause with cursor variables. </P
></LI
><LI
CLASS="listitem"
><P
CLASS="para"
>You cannot assign NULLs to a cursor variable nor use comparison operators to test for equality, inequality, or nullity. </P
></LI
><LI
CLASS="listitem"
><P
CLASS="para"
>Neither database columns nor collections can store cursor variables. </P
></LI
><LI
CLASS="listitem"
><P
CLASS="para"
>You cannot use RPCs to pass cursor variables from one server to another. </P
></LI
><LI
CLASS="listitem"
><P
CLASS="para"
>Cursor variables cannot be used with the dynamic SQL built-in package DBMS_SQL.</P
></LI
></UL
></DIV
></DIV
><DIV
CLASS="htmlnav"
><P
></P
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch01_08.htm"
TITLE="1.8 Database Interaction and Cursors "
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 1.8 Database Interaction and Cursors "
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="book"
HREF="index.htm"
TITLE="Oracle PL/SQL Language Pocket Reference"
><IMG
SRC="../gifs/txthome.gif"
ALT="Oracle PL/SQL Language Pocket Reference"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch01_10.htm"
TITLE="1.10 Exception Handling "
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 1.10 Exception Handling "
BORDER="0"></A
></TD
></TR
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
>1.8 Database Interaction and Cursors </TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
>&nbsp;</TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
>1.10 Exception Handling </TD
></TR
></TABLE
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"></DIV
><IMG SRC="../gifs/smnavbar.gif"
USEMAP="#map"
BORDER="0"
ALT="The Oracle Library Navigation">

<P><font size="-1">
<a href="../copyrght.htm#copy">Copyright (c) 2000</a> O'Reilly &amp; Associates. All rights reserved.
</font></P>

<MAP NAME="map">

<AREA SHAPE="RECT"
COORDS="0,0,35,30"
HREF="../index.htm"
ALT="Library Home">

<AREA SHAPE="RECT"
COORDS="40,0,95,30"
HREF="../prog2/index.htm"
ALT="Oracle PL/SQL Programming, 2nd. Ed.">

<AREA SHAPE="RECT"
COORDS="100,0,200,30"
HREF="../guide8i/index.htm"
ALT="Guide to Oracle 8i Features">

<AREA SHAPE="RECT"
COORDS="205,0,245,30"
HREF="../bipack/index.htm"
ALT="Oracle Built-in Packages">

<AREA SHAPE="RECT"
COORDS="250,0,320,30"
HREF="../advprog/index.htm"
ALT="Advanced PL/SQL Programming with Packages">

<AREA SHAPE="RECT"
COORDS="325,0,420,30"
HREF="../webapp/index.htm"
ALT="Oracle Web Applications">

<AREA SHAPE="RECT"
COORDS="425,0,490,30"
HREF="index.htm"
ALT="Oracle PL/SQL Language Pocket Reference">

<AREA SHAPE="RECT"
COORDS="495,0,570,30"
HREF="../bipkt/index.htm"
ALT="Oracle PL/SQL Built-ins Pocket Reference">
</MAP>

</BODY
>
<!-- Mirrored from liso.cs.pusan.ac.kr by HTTrack Website Copier/3.x [XR&CO'2001] -->
</HTML
>
