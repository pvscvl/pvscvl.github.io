<HTML
><HEAD
><TITLE
>[Chapter 1] 1.15 Calling PL/SQL Functions in SQL</TITLE
><META
NAME="DC.Creator"
CONTENT="Steven Feuerstein, Bill Pribyl &amp; Chip Dawes"><META
NAME="DC.Date"
CONTENT="2000-04-29T17:32:35Z"><META
NAME="DC.Format"
CONTENT="text/html"
SCHEME="MIME"><META
NAME="DC.Identifier"
CONTENT="O'Reilly and Associates CD-ROM-1-56592-457-6E"><META
NAME="DC.Language"
CONTENT="en-US"><META
NAME="DC.Publisher"
CONTENT="O'Reilly &amp; Associates, Inc."><META
NAME="DC.Source"
CONTENT="1-56592-457-6E"
SCHEME="ISBN"><META
NAME="DC.Subject.Keyword"
CONTENT="Oracle PL/SQL Reference"><META
NAME="DC.Title"
CONTENT="Oracle PL/SQL Language Pocket Reference"><META
NAME="DC.Type"
CONTENT="Text.Monograph"><META
NAME="generator"
CONTENT="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><LINK
REL="stylesheet"
TYPE="text/css"
HREF="../style/style1.css"><LINK
REV="made"
HREF="mailto:online-books@oreilly.com"
TITLE="Online Books Comments"><LINK
REL="up"
HREF="ch01_01.htm"
TITLE="1. Oracle PL/SQL Language Pocket Reference"><LINK
REL="prev"
HREF="ch01_14.htm"
TITLE="1.14 Packages"><LINK
REL="next"
HREF="ch01_16.htm"
TITLE="1.16 Oracle8 Objects"></HEAD
><BODY
><DIV
CLASS="htmlnav"
><H1
><IMG
SRC="gifs/smbanner.gif"
ALT="Oracle PL/SQL Language Pocket Reference"
USEMAP="#srchmap"
BORDER="0"></H1
><MAP
NAME="srchmap"
><AREA
SHAPE="RECT"
COORDS="0,0,466,65"
HREF="index.htm"
ALT="Oracle PL/SQL Language Pocket Reference"><AREA
SHAPE="RECT"
COORDS="467,0,514,18"
HREF="jobjects/fsearch.htm"
ALT="Search this book"></MAP
><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch01_14.htm"
TITLE="1.14 Packages"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 1.14 Packages"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><SPAN
CLASS="NAVTITLE"
><A
CLASS="chapter"
REL="up"
HREF="ch01_01.htm"
TITLE="1. Oracle PL/SQL Language Pocket Reference"
>Chapter 1<BR>Oracle PL/SQL Language Pocket Reference</A
></SPAN
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch01_16.htm"
TITLE="1.16 Oracle8 Objects"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 1.16 Oracle8 Objects"
BORDER="0"></A
></TD
></TR
></TABLE
>&nbsp;<HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"></DIV
><DIV
CLASS="sect1"
><H2
CLASS="sect1"
><A
CLASS="title"
NAME="plsql-toc443895405"
>1.15 Calling PL/SQL Functions in SQL</A
></H2
><P
CLASS="para"
>Stored functions can be called from SQL statements in a manner similar to built-in functions like DECODE, NVL, or RTRIM. This is a powerful technique for incorporating business rules into SQL in a simple and elegant way. Unfortunately, there are a number of caveats and restrictions. </P
><P
CLASS="para"
>The most notable caveat is that stored functions executed from SQL are not guaranteed to follow the read consistency model of the database. Unless the SQL statement and any stored functions in that statement are in the same read-consistent transaction (even if they are read-only), each execution of the stored function will look at a different time-consistent set of data. To avoid this potential problem, you need to ensure read consistency programmatically by issuing the SET TRANSACTION READ ONLY or SET TRANSACTION SERIALIZABLE statement before executing your SQL statement containing the stored function. A COMMIT or ROLLBACK then needs to follow the SQL statement to end this read-consistent transaction.</P
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="plsql-toc443895406"
>1.15.1 Syntax for Calling Stored Functions in SQL </A
></H3
><P
CLASS="para"
>The syntax for calling a stored function from SQL is the same as referencing it from PL/SQL:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>[schema_name.][pkg_name.]func_name[@db_link]
   [parm_list]</PRE
></BLOCKQUOTE
><P
CLASS="para"
><EM
CLASS="emphasis"
>schema_name</EM
> is optional and refers to the user/owner of the function or package. <EM
CLASS="emphasis"
>pkg_name</EM
> is optional and refers to the package containing the called function. <EM
CLASS="emphasis"
>func_name</EM
> is mandatory and is the function name. <EM
CLASS="emphasis"
>db_link</EM
> is optional and refers to the database link name to the remote database containing the function. <EM
CLASS="emphasis"
>parm_list</EM
> is optional, as are the parameters passed to the function. </P
><P
CLASS="para"
>The following are example calls to the GetTimestamp function in the <EM
CLASS="emphasis"
>time_pkg</EM
> example seen earlier in the  <A
CLASS="xref"
HREF="ch01_14.htm"
>Section 1.14.1, "Overview of Package Structure </A
>" section:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>-- Capture system events.
INSERT INTO v_sys_event (timestamp ,event 
   ,qty_waits)
   SELECT time_pkg.GetTimestamp ,event ,total_waits
   FROM v$system_event

-- Capture system statistics.
INSERT INTO v_sys_stat (timestamp,stat#,value)
   SELECT time_pkg.GetTimestamp ,statistic# ,value
   FROM v$sysstat;</PRE
></BLOCKQUOTE
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="plsql-toc443895407"
>1.15.2 Requirements and Restrictions on Stored Functions in SQL </A
></H3
><P
CLASS="para"
>There are a number of requirements for calling stored functions in SQL:</P
><UL
CLASS="itemizedlist"
><LI
CLASS="listitem"
><P
CLASS="para"
>The function must be a single-row function&nbsp;-- not one that operates on a column or group function. </P
></LI
><LI
CLASS="listitem"
><P
CLASS="para"
>All parameters must be IN; no IN OUT or OUT parameters are allowed. </P
></LI
><LI
CLASS="listitem"
><P
CLASS="para"
>The datatypes of the function's parameters and RETURN must be compatible with RDBMS datatypes. You cannot have arguments or RETURN types like BOOLEAN, programmer-defined record, index-by table, etc. </P
></LI
><LI
CLASS="listitem"
><P
CLASS="para"
>The parameters passed to the function must use positional notation; named notation is not supported. </P
></LI
><LI
CLASS="listitem"
><P
CLASS="para"
>Functions defined in packages must have a RESTRICT_REFERENCES pragma in the specification (Oracle8.0 and earlier). </P
></LI
><LI
CLASS="listitem"
><P
CLASS="para"
>The function must be stored in the database, not a local program, Developer/2000 PL/SQL library, or Form.</P
></LI
></UL
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="plsql-toc443895408"
>1.15.3 Calling Packaged Functions in SQL </A
></H3
><P
CLASS="para"
>Prior to Oracle8<EM
CLASS="emphasis"
>i</EM
> Release 8.1, it was necessary to assert the purity level of a packaged procedure or function when using it directly or indirectly in a SQL statement. Beginning with Oracle8<EM
CLASS="emphasis"
>i</EM
> Release 8.1, the PL/SQL runtime engine determines a program's purity level automatically if no assertion exists.</P
><P
CLASS="para"
>The RESTRICT_REFERENCES pragma asserts a purity level. The syntax for the RESTRICT_REFERENCES pragma is:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>PRAGMA RESTRICT_REFERENCES (program_name | 
   DEFAULT, purity_level);</PRE
></BLOCKQUOTE
><P
CLASS="para"
>The keyword DEFAULT applies to all methods of an object type or all programs in a package. </P
><P
CLASS="para"
>There can be from one to five purity levels, in any order, in a comma-delimited list. The purity level describes to what extent the program or method is free of <EM
CLASS="emphasis"
>side effects</EM
>. Side effects are listed in the following table with the purity levels they address. </P
><TABLE
CLASS="informaltable"
BORDER="1"
CELLPADDING="3"
><THEAD
CLASS="thead"
><TR
CLASS="row"
VALIGN="TOP"
><TH
CLASS="entry"
ALIGN="LEFT"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>Purity Level</P
></TH
><TH
CLASS="entry"
ALIGN="LEFT"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>Description</P
></TH
><TH
CLASS="entry"
ALIGN="LEFT"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>Restriction</P
></TH
></TR
></THEAD
><TBODY
CLASS="tbody"
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>WNDS</P
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>Write No Database State</P
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>Executes no INSERT, UPDATE, or DELETE statements.</P
></TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>RNDS</P
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>Read No Database State</P
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>Executes no SELECT statements.</P
></TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>WNPS</P
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>Write No Package State</P
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>Does not modify any package variables.</P
></TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>RNPS</P
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>Read No Package State</P
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>Does not read any package variables.</P
></TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>TRUST (Oracle8<EM
CLASS="emphasis"
>i</EM
>)</P
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
></P
>&nbsp;</TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>Does not enforce the restrictions declared but allows the compiler to trust they are true.</P
></TD
></TR
></TBODY
></TABLE
><P
CLASS="para"
>The purity level requirements for packaged functions are different depending on where in the SQL statement the stored functions are used:</P
><UL
CLASS="itemizedlist"
><LI
CLASS="listitem"
><P
CLASS="para"
>To be called from SQL, all stored functions must assert WNDS. </P
></LI
><LI
CLASS="listitem"
><P
CLASS="para"
>All functions not used in a SELECT, VALUES, or SET clause must assert WNPS. </P
></LI
><LI
CLASS="listitem"
><P
CLASS="para"
>To be executed remotely, the function must assert WNPS and RNPS. </P
></LI
><LI
CLASS="listitem"
><P
CLASS="para"
>To be executed in parallel, the function must assert all four purity levels or, in Oracle8<EM
CLASS="emphasis"
>i</EM
>, use PARALLEL_ENABLED in the declaration. </P
></LI
><LI
CLASS="listitem"
><P
CLASS="para"
>These functions must not call any other program that does not also assert the minimum purity level. </P
></LI
><LI
CLASS="listitem"
><P
CLASS="para"
>If a package has an initialization section, it too must assert purity in Oracle7. </P
></LI
><LI
CLASS="listitem"
><P
CLASS="para"
>If a function is overloaded, each overloading must assert its own purity level, and the levels don't have to be the same. To do this, place the pragma immediately after each overloaded declaration. </P
></LI
></UL
><P
CLASS="para"
>Many of the built-in packages, including DBMS_OUTPUT, DBMS_PIPE, and DBMS_SQL, do not assert WNPS or RNPS, so their use in SQL stored functions is necessarily limited. </P
><DIV
CLASS="sect3"
><H4
CLASS="sect3"
><A
CLASS="title"
NAME="plsql-toc443895409"
>1.15.3.1 Column/function name precedence </A
></H4
><P
CLASS="para"
>If your function has the same name as a table column in your SELECT statement and the function has no parameter, then the column takes precedence over the function. To force the RDBMS to resolve the name to your function, prepend the schema name to it:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>CREATE TABLE emp(new_sal NUMBER ...);
CREATE FUNCTION new_sal RETURN NUMBER IS ...;

SELECT new_sal FROM emp;      -- Resolves to column.
SELECT scott.new_sal FROM emp;-- Resolves to 
                                 function.</PRE
></BLOCKQUOTE
></DIV
></DIV
></DIV
><DIV
CLASS="htmlnav"
><P
></P
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch01_14.htm"
TITLE="1.14 Packages"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 1.14 Packages"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="book"
HREF="index.htm"
TITLE="Oracle PL/SQL Language Pocket Reference"
><IMG
SRC="../gifs/txthome.gif"
ALT="Oracle PL/SQL Language Pocket Reference"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch01_16.htm"
TITLE="1.16 Oracle8 Objects"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 1.16 Oracle8 Objects"
BORDER="0"></A
></TD
></TR
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
>1.14 Packages</TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
>&nbsp;</TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
>1.16 Oracle8 Objects</TD
></TR
></TABLE
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"></DIV
><IMG SRC="../gifs/smnavbar.gif"
USEMAP="#map"
BORDER="0"
ALT="The Oracle Library Navigation">

<P><font size="-1">
<a href="../copyrght.htm#copy">Copyright (c) 2000</a> O'Reilly &amp; Associates. All rights reserved.
</font></P>

<MAP NAME="map">

<AREA SHAPE="RECT"
COORDS="0,0,35,30"
HREF="../index.htm"
ALT="Library Home">

<AREA SHAPE="RECT"
COORDS="40,0,95,30"
HREF="../prog2/index.htm"
ALT="Oracle PL/SQL Programming, 2nd. Ed.">

<AREA SHAPE="RECT"
COORDS="100,0,200,30"
HREF="../guide8i/index.htm"
ALT="Guide to Oracle 8i Features">

<AREA SHAPE="RECT"
COORDS="205,0,245,30"
HREF="../bipack/index.htm"
ALT="Oracle Built-in Packages">

<AREA SHAPE="RECT"
COORDS="250,0,320,30"
HREF="../advprog/index.htm"
ALT="Advanced PL/SQL Programming with Packages">

<AREA SHAPE="RECT"
COORDS="325,0,420,30"
HREF="../webapp/index.htm"
ALT="Oracle Web Applications">

<AREA SHAPE="RECT"
COORDS="425,0,490,30"
HREF="index.htm"
ALT="Oracle PL/SQL Language Pocket Reference">

<AREA SHAPE="RECT"
COORDS="495,0,570,30"
HREF="../bipkt/index.htm"
ALT="Oracle PL/SQL Built-ins Pocket Reference">
</MAP>

</BODY
>
<!-- Mirrored from liso.cs.pusan.ac.kr by HTTrack Website Copier/3.x [XR&CO'2001] -->
</HTML
>
