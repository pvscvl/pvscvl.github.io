<HTML
><HEAD
><TITLE
>[Chapter 1] 1.18 External Procedures </TITLE
><META
NAME="DC.Creator"
CONTENT="Steven Feuerstein, Bill Pribyl &amp; Chip Dawes"><META
NAME="DC.Date"
CONTENT="2000-04-29T17:32:55Z"><META
NAME="DC.Format"
CONTENT="text/html"
SCHEME="MIME"><META
NAME="DC.Identifier"
CONTENT="O'Reilly and Associates CD-ROM-1-56592-457-6E"><META
NAME="DC.Language"
CONTENT="en-US"><META
NAME="DC.Publisher"
CONTENT="O'Reilly &amp; Associates, Inc."><META
NAME="DC.Source"
CONTENT="1-56592-457-6E"
SCHEME="ISBN"><META
NAME="DC.Subject.Keyword"
CONTENT="Oracle PL/SQL Reference"><META
NAME="DC.Title"
CONTENT="Oracle PL/SQL Language Pocket Reference"><META
NAME="DC.Type"
CONTENT="Text.Monograph"><META
NAME="generator"
CONTENT="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><LINK
REL="stylesheet"
TYPE="text/css"
HREF="../style/style1.css"><LINK
REV="made"
HREF="mailto:online-books@oreilly.com"
TITLE="Online Books Comments"><LINK
REL="up"
HREF="ch01_01.htm"
TITLE="1. Oracle PL/SQL Language Pocket Reference"><LINK
REL="prev"
HREF="ch01_17.htm"
TITLE="1.17 Collections "><LINK
REL="next"
HREF="ch01_19.htm"
TITLE="1.19 Java Language Integration"></HEAD
><BODY
><DIV
CLASS="htmlnav"
><H1
><IMG
SRC="gifs/smbanner.gif"
ALT="Oracle PL/SQL Language Pocket Reference"
USEMAP="#srchmap"
BORDER="0"></H1
><MAP
NAME="srchmap"
><AREA
SHAPE="RECT"
COORDS="0,0,466,65"
HREF="index.htm"
ALT="Oracle PL/SQL Language Pocket Reference"><AREA
SHAPE="RECT"
COORDS="467,0,514,18"
HREF="jobjects/fsearch.htm"
ALT="Search this book"></MAP
><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch01_17.htm"
TITLE="1.17 Collections "
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 1.17 Collections "
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><SPAN
CLASS="NAVTITLE"
><A
CLASS="chapter"
REL="up"
HREF="ch01_01.htm"
TITLE="1. Oracle PL/SQL Language Pocket Reference"
>Chapter 1<BR>Oracle PL/SQL Language Pocket Reference</A
></SPAN
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch01_19.htm"
TITLE="1.19 Java Language Integration"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 1.19 Java Language Integration"
BORDER="0"></A
></TD
></TR
></TABLE
>&nbsp;<HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"></DIV
><DIV
CLASS="sect1"
><H2
CLASS="sect1"
><A
CLASS="title"
NAME="plsql-toc443895434"
>1.18 External Procedures </A
></H2
><P
CLASS="para"
>External procedures provide a mechanism for calling out to a non-database program, such as a DLL under NT or a shared library under Unix. Every session calling an external procedure will have its own <EM
CLASS="emphasis"
>extproc</EM
> process started by the listener. This extproc process is started with the first call to the external procedure and terminates when the session exits. The shared library needs to have a corresponding library created for it in the database.</P
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="plsql-SECT-18.1"
>1.18.1 Creating an External Procedure </A
></H3
><P
CLASS="para"
>The following are the steps you need to follow in order to create an external procedure.</P
><DIV
CLASS="sect3"
><H4
CLASS="sect3"
><A
CLASS="title"
NAME="plsql-toc443895436"
>1.18.1.1 Set up the listener</A
></H4
><P
CLASS="para"
>External procedures require a listener. If you are running a Net8 listener, it can be used as the extproc listener as well. See the <EM
CLASS="emphasis"
>Oracle8 Administrators' Guide</EM
> or the <EM
CLASS="emphasis"
>Net8 Administrators' Guide</EM
> for the details on configuring your listener.</P
></DIV
><DIV
CLASS="sect3"
><H4
CLASS="sect3"
><A
CLASS="title"
NAME="plsql-toc443895437"
>1.18.1.2 Identify or create the shared library or DLL</A
></H4
><P
CLASS="para"
>This step has nothing to do with PL/SQL or the database. You must write your own C routines and link them into a shared library/DLL or use an existing library's functions or procedures. In the simple example below, we will use the existing random number generating calls available from the operating system.</P
></DIV
><DIV
CLASS="sect3"
><H4
CLASS="sect3"
><A
CLASS="title"
NAME="plsql-toc443895438"
>1.18.1.3 Create the library in the database</A
></H4
><P
CLASS="para"
>Create a library in the database for the shared library or DLL using the CREATE LIBRARY statement:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>CREATE [OR REPLACE] LIBRARY library_name IS | AS 
	'absolute_path_and_file';</PRE
></BLOCKQUOTE
><P
CLASS="para"
>To remove libraries from the database, you use the DROP LIBRARY statement:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>DROP LIBRARY library_name;</PRE
></BLOCKQUOTE
><P
CLASS="para"
>To call out to the C runtime library's <EM
CLASS="emphasis"
>rand</EM
> function, you don't have to code any C routines at all, since the call is already linked into a shared library, and because its arguments are directly type-mappable to PL/SQL. If the rand function is in the standard <EM
CLASS="emphasis"
>/lib/libc.so</EM
> shared library, as on Solaris, you would issue the following CREATE LIBRARY statement:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>CREATE OR REPLACE LIBRARY libc_l AS 
   '/lib/libc.so';  -- References C runtime library.</PRE
></BLOCKQUOTE
><P
CLASS="para"
>This is the typical corresponding statement for NT:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>CREATE OR REPLACE LIBRARY libc_l AS
   'C:\WINNT\SYSTEM32\CRTDLL.DLL';</PRE
></BLOCKQUOTE
></DIV
><DIV
CLASS="sect3"
><H4
CLASS="sect3"
><A
CLASS="title"
NAME="plsql-toc443895439"
>1.18.1.4 Create the PL/SQL wrapper for the external procedure</A
></H4
><P
CLASS="para"
>The syntax for the wrapper procedure is:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>CREATE [OR REPLACE] PROCEDURE proc_name 
   [parm_list]
AS|IS EXTERNAL
   LIBRARY library_name
   [NAME external_name]
   [LANGUAGE language_name]
   [CALLING STANDARD  C | PASCAL]
   [WITH CONTEXT]
   [PARAMETERS (external_parameter_list)];</PRE
></BLOCKQUOTE
><P
CLASS="para"
>The following are the syntactic elements defined:</P
><DL
CLASS="variablelist"
><DT
CLASS="term"
><EM
CLASS="emphasis"
>proc_name</EM
> </DT
><DD
CLASS="listitem"
><P
CLASS="para"
>The name of the wrapper procedure. </P
></DD
><DT
CLASS="term"
><EM
CLASS="emphasis"
>library_name</EM
> </DT
><DD
CLASS="listitem"
><P
CLASS="para"
>The name of the library created with the CREATE LIBRARY statement. </P
></DD
><DT
CLASS="term"
><EM
CLASS="emphasis"
>external_name</EM
> </DT
><DD
CLASS="listitem"
><P
CLASS="para"
>The name of the external routine as it appears in the library. It defaults to the wrapper package name. PL/SQL package names are usually saved in uppercase, so the <EM
CLASS="emphasis"
>external_name</EM
> may need to be enclosed in double quotes to preserve case. </P
></DD
><DT
CLASS="term"
><EM
CLASS="emphasis"
>language_name</EM
> </DT
><DD
CLASS="listitem"
><P
CLASS="para"
>The language that the external routine was written in. It defaults to C. </P
></DD
><DT
CLASS="term"
>CALLING STANDARD </DT
><DD
CLASS="listitem"
><P
CLASS="para"
>The calling standard, which defaults to C. The Pascal calling standard reverses the order of the parameters, and the called routine is responsible for popping the parameters off the stack. </P
></DD
><DT
CLASS="term"
>WITH CONTEXT </DT
><DD
CLASS="listitem"
><P
CLASS="para"
>Used to pass a context pointer to the external routine, so it can make OCI calls back to the database. </P
></DD
><DT
CLASS="term"
>PARAMETERS </DT
><DD
CLASS="listitem"
><P
CLASS="para"
>Identify the <EM
CLASS="emphasis"
>external_parameter_list</EM
>, which is a comma-delimited list containing the position and datatype of parameters that get passed to the external routine. For more details on the <EM
CLASS="emphasis"
>external_parameter_list,</EM
> see the next section, <A
CLASS="xref"
HREF="ch01_12.htm"
>Section 1.12.3, "Parameters</A
>".</P
></DD
></DL
><P
CLASS="para"
>The wrapper PL/SQL function or procedure is usually in a package. Using the preceding random number generator example, we could create the wrapper package as follows:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>CREATE OR REPLACE PACKAGE random_utl
AS
   FUNCTION rand RETURN PLS_INTEGER;
   PRAGMA RESTRICT_REFERENCES(rand,WNDS,RNDS,WNPS,RNPS);

   PROCEDURE srand (seed IN PLS_INTEGER);
   PRAGMA RESTRICT_REFERENCES(srand,WNDS,RNDS,WNPS,RNPS);
END random_utl;

CREATE PACKAGE BODY random_utl
AS
   FUNCTION rand RETURN PLS_INTEGER
   IS
      EXTERNAL       -- Keyword to indicate external 
                        routine.
      LIBRARY libc_l -- The library created above.
      NAME &quot;rand&quot;    -- Function name in the 
                        library.
      LANGUAGE C;    -- Language of routine.

   PROCEDURE srand (seed IN PLS_INTEGER)
   IS
      EXTERNAL LIBRARY libc_l
      NAME &quot;srand&quot;   -- Name is lowercase in this 
                        library.
      LANGUAGE C
      PARAMETERS (seed ub4); --Map to unsigned 
                               4byte. 
INT
END random_utl;</PRE
></BLOCKQUOTE
><P
CLASS="para"
>To use this external random number function, we simply call the package procedure <EM
CLASS="emphasis"
>srand</EM
> to seed the generator, then the package function <EM
CLASS="emphasis"
>rand</EM
> to get random numbers:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>DECLARE
   random_nbr  PLS_INTEGER;
   seed        PLS_INTEGER;
BEGIN
   SELECT TO_CHAR(SYSDATE,'SSSSS') INTO seed 
      FROM dual;

   random_utl.srand(seed);  -- Seed the generator.

   random_nbr := random_utl.rand; -- Get the number.
   DBMS_OUTPUT.PUT_LINE('number='||random_nbr);

   random_nbr := random_utl.rand; -- Get the number.
   DBMS_OUTPUT.PUT_LINE('number='||random_nbr);
END;</PRE
></BLOCKQUOTE
><P
CLASS="para"
>You can generate random numbers without the complexity or overhead of an external call by using the built-in package DBMS_RANDOM. To learn more about DBMS_RANDOM and other built-ins, see O'Reilly's books <EM
CLASS="emphasis"
>Oracle Built-in Packages</EM
> and <EM
CLASS="emphasis"
>Oracle PL/SQL Built-ins Pocket Reference</EM
>.</P
></DIV
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="plsql-toc443895440"
>1.18.2 Parameters </A
></H3
><P
CLASS="para"
>When it comes to passing PL/SQL variables to C variables, we encounter many inconsistencies. For example, PL/SQL supports nullity, while C does not; PL/SQL can have variables in different character sets, while C cannot; and the datatypes in PL/SQL do not directly map to C datatypes. </P
><P
CLASS="para"
>The PARAMETERS clause specifies the external parameter list, a comma-delimited list containing parameters. The syntax for each parameter in the list is:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>CONTEXT | RETURN | parameter_name [property] 
   [BY REFERENCE] [external_datatype]</PRE
></BLOCKQUOTE
><P
CLASS="para"
>The keyword CONTEXT indicates the position in the parameter list at which the context pointer will be passed. It is required if the WITH CONTEXT clause is being used to pass a context pointer to the called program. By convention, CONTEXT appears as the first parameter in the external parameter list. If CONTEXT is used, the <EM
CLASS="emphasis"
>property,</EM
> BY REFERENCE, and <EM
CLASS="emphasis"
>external_datatype</EM
> optional sections are invalid.</P
><P
CLASS="para"
>The keyword RETURN indicates that the descriptions are for the return value from the external routine. By default, RETURN is passed by value. You can use the keywords BY REFERENCE to pass by reference (use pointers).</P
><P
CLASS="para"
><EM
CLASS="emphasis"
>parameter_name</EM
> is a PL/SQL formal parameter name. By default, IN formal parameters are passed by value. You can use the key words BY REFERENCE to pass by reference (as a pointer). IN OUT and OUT formal parameters are always passed by reference. </P
><P
CLASS="para"
><EM
CLASS="emphasis"
>property</EM
> breaks out further to the general Oracle8 syntax:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>INDICATOR | LENGTH | MAXLEN | CHARSETID| CHARSETFORM</PRE
></BLOCKQUOTE
><P
CLASS="para"
>The general Oracle8<EM
CLASS="emphasis"
>i</EM
> syntax is:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>INDICATOR [STRUCT | TDO ] | LENGTH | MAXLEN | 
   CHARSETID | CHARSETFORM | SELF</PRE
></BLOCKQUOTE
><P
CLASS="para"
>INDICATOR indicates whether the corresponding parameter is NULL. In the C program, if the indicator equals the constant OCI_IND_NULL, the parameter is NULL. If the indicator equals the constant OCI_IND_NOTNULL, the indicator is not NULL. For IN parameters, INDICATOR is passed by value (by default). For IN OUT, OUT, and RETURN parameters, INDICATOR is passed by reference. </P
><P
CLASS="para"
>In Oracle8<EM
CLASS="emphasis"
>i</EM
>, you can pass a user-defined type to an external procedure. To do so, you will typically pass three parameters: the actual object value; a TDO (Type Descriptor Object) parameter as defined in C by the Oracle Type Translator; and an INDICATOR STRUCT parameter, to designate whether the object is NULL.</P
><P
CLASS="para"
>LENGTH and MAXLEN can be used to pass the current and maximum length of strings or RAWs. For IN parameters, LENGTH is passed by value (by default). For IN OUT, OUT, and RETURN parameters, LENGTH is passed by reference. MAXLEN is not valid for IN parameters. For IN OUT, OUT, and RETURN parameters, MAXLEN is passed by reference and is read-only.</P
><P
CLASS="para"
>CHARSETID and CHARSETFORM are used to support NLS character sets. They are the same as the OCI attributes OCI_ATTR_CHARSET_ID and OCI_ATTR_CHARSET_FORM. For IN parameters, CHARSETID and CHARSETFORM are passed by value (by default) and are read-only. For IN OUT, OUT, and RETURN parameters, CHARSETID and CHARSETFORM are passed by reference and are read-only.</P
><P
CLASS="para"
>SELF is used if an object member function is implemented as a callout instead of a PL/SQL routine. </P
></DIV
></DIV
><DIV
CLASS="htmlnav"
><P
></P
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch01_17.htm"
TITLE="1.17 Collections "
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 1.17 Collections "
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="book"
HREF="index.htm"
TITLE="Oracle PL/SQL Language Pocket Reference"
><IMG
SRC="../gifs/txthome.gif"
ALT="Oracle PL/SQL Language Pocket Reference"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch01_19.htm"
TITLE="1.19 Java Language Integration"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 1.19 Java Language Integration"
BORDER="0"></A
></TD
></TR
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
>1.17 Collections </TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
>&nbsp;</TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
>1.19 Java Language Integration</TD
></TR
></TABLE
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"></DIV
><IMG SRC="../gifs/smnavbar.gif"
USEMAP="#map"
BORDER="0"
ALT="The Oracle Library Navigation">

<P><font size="-1">
<a href="../copyrght.htm#copy">Copyright (c) 2000</a> O'Reilly &amp; Associates. All rights reserved.
</font></P>

<MAP NAME="map">

<AREA SHAPE="RECT"
COORDS="0,0,35,30"
HREF="../index.htm"
ALT="Library Home">

<AREA SHAPE="RECT"
COORDS="40,0,95,30"
HREF="../prog2/index.htm"
ALT="Oracle PL/SQL Programming, 2nd. Ed.">

<AREA SHAPE="RECT"
COORDS="100,0,200,30"
HREF="../guide8i/index.htm"
ALT="Guide to Oracle 8i Features">

<AREA SHAPE="RECT"
COORDS="205,0,245,30"
HREF="../bipack/index.htm"
ALT="Oracle Built-in Packages">

<AREA SHAPE="RECT"
COORDS="250,0,320,30"
HREF="../advprog/index.htm"
ALT="Advanced PL/SQL Programming with Packages">

<AREA SHAPE="RECT"
COORDS="325,0,420,30"
HREF="../webapp/index.htm"
ALT="Oracle Web Applications">

<AREA SHAPE="RECT"
COORDS="425,0,490,30"
HREF="index.htm"
ALT="Oracle PL/SQL Language Pocket Reference">

<AREA SHAPE="RECT"
COORDS="495,0,570,30"
HREF="../bipkt/index.htm"
ALT="Oracle PL/SQL Built-ins Pocket Reference">
</MAP>

</BODY
>
<!-- Mirrored from liso.cs.pusan.ac.kr by HTTrack Website Copier/3.x [XR&CO'2001] -->
</HTML
>
