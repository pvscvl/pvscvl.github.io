<HTML
><HEAD
><TITLE
>[Chapter 1] 1.16 Oracle8 Objects</TITLE
><META
NAME="DC.Creator"
CONTENT="Steven Feuerstein, Bill Pribyl &amp; Chip Dawes"><META
NAME="DC.Date"
CONTENT="2000-04-29T17:32:41Z"><META
NAME="DC.Format"
CONTENT="text/html"
SCHEME="MIME"><META
NAME="DC.Identifier"
CONTENT="O'Reilly and Associates CD-ROM-1-56592-457-6E"><META
NAME="DC.Language"
CONTENT="en-US"><META
NAME="DC.Publisher"
CONTENT="O'Reilly &amp; Associates, Inc."><META
NAME="DC.Source"
CONTENT="1-56592-457-6E"
SCHEME="ISBN"><META
NAME="DC.Subject.Keyword"
CONTENT="Oracle PL/SQL Reference"><META
NAME="DC.Title"
CONTENT="Oracle PL/SQL Language Pocket Reference"><META
NAME="DC.Type"
CONTENT="Text.Monograph"><META
NAME="generator"
CONTENT="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><LINK
REL="stylesheet"
TYPE="text/css"
HREF="../style/style1.css"><LINK
REV="made"
HREF="mailto:online-books@oreilly.com"
TITLE="Online Books Comments"><LINK
REL="up"
HREF="ch01_01.htm"
TITLE="1. Oracle PL/SQL Language Pocket Reference"><LINK
REL="prev"
HREF="ch01_15.htm"
TITLE="1.15 Calling PL/SQL Functions in SQL"><LINK
REL="next"
HREF="ch01_17.htm"
TITLE="1.17 Collections "></HEAD
><BODY
><DIV
CLASS="htmlnav"
><H1
><IMG
SRC="gifs/smbanner.gif"
ALT="Oracle PL/SQL Language Pocket Reference"
USEMAP="#srchmap"
BORDER="0"></H1
><MAP
NAME="srchmap"
><AREA
SHAPE="RECT"
COORDS="0,0,466,65"
HREF="index.htm"
ALT="Oracle PL/SQL Language Pocket Reference"><AREA
SHAPE="RECT"
COORDS="467,0,514,18"
HREF="jobjects/fsearch.htm"
ALT="Search this book"></MAP
><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch01_15.htm"
TITLE="1.15 Calling PL/SQL Functions in SQL"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 1.15 Calling PL/SQL Functions in SQL"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><SPAN
CLASS="NAVTITLE"
><A
CLASS="chapter"
REL="up"
HREF="ch01_01.htm"
TITLE="1. Oracle PL/SQL Language Pocket Reference"
>Chapter 1<BR>Oracle PL/SQL Language Pocket Reference</A
></SPAN
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch01_17.htm"
TITLE="1.17 Collections "
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 1.17 Collections "
BORDER="0"></A
></TD
></TR
></TABLE
>&nbsp;<HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"></DIV
><DIV
CLASS="sect1"
><H2
CLASS="sect1"
><A
CLASS="title"
NAME="plsql-toc443895410"
>1.16 Oracle8 Objects</A
></H2
><P
CLASS="para"
>In Oracle8, an <EM
CLASS="emphasis"
>object type</EM
> combines attributes (data structures) and methods (functions and procedures) into a single programming construct. The object type construct allows programmers to defined their own reusable datatypes for use in PL/SQL programs and table and column definitions. </P
><P
CLASS="para"
>An instance of an object type is an <EM
CLASS="emphasis"
>object</EM
> in the same way that variables are instances of scalar types. Objects are either <EM
CLASS="emphasis"
>persistent</EM
> (stored in the database) or <EM
CLASS="emphasis"
>transient</EM
> (stored only in PL/SQL variables). Objects can be stored in a database as a row in a table (a row object) or as a column in a table. A table of row objects can be created with syntax such as this:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>CREATE TABLE table_name OF object_type;</PRE
></BLOCKQUOTE
><P
CLASS="para"
>When stored in the database as a row object, the object (row) has an OID (Object IDentifier) that is unique throughout the database. </P
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="plsql-toc443895411"
>1.16.1 Object Types </A
></H3
><P
CLASS="para"
>An object type has two parts: the specification and the body. The specification is required and contains the attributes and method specifications. The syntax for creating the object type specification is:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>CREATE [OR REPLACE] TYPE obj_type_name 
[AUTHID CURRENT_USER | DEFINER] -- Oracle8i
AS OBJECT (
   attribute_name datatype,...,
   [MEMBER | STATIC PROCEDURE | FUNCTION   
      program_spec],
   [ORDER | MAP MEMBER FUNCTION 
      comparison_function_spec],
   [PRAGMA RESTRICT_REFERENCES(program_name, 
      purities)]
);</PRE
></BLOCKQUOTE
><P
CLASS="para"
>All attribute specifications must appear before all method specifications. Object attributes, like variables, are declared with a name and a datatype. The name can be any legal identifier. Attribute datatypes can be any SQL datatype except LONG, LONG RAW, NCHAR, NVARCHAR2, NCLOB, ROWID, and UROWID. Attributes cannot have datatypes unique to PL/SQL such as BOOLEAN.</P
><P
CLASS="para"
>Member function and procedure headers are listed in the object type specification in a comma-delimited list. Unlike in a package specification, commas (not semicolons) terminate the object type program specifications. To support object comparisons and sorting, the type can optionally include one comparison method&nbsp;-- either ORDER or MAP. </P
><P
CLASS="para"
>Member programs can assert purity with the RESTRICT_REFERENCES pragma. (See the earlier <A
CLASS="xref"
HREF="ch01_15.htm"
>Section 1.15.1, "Syntax for Calling Stored Functions in SQL </A
>" section for more information on this pragma.) Member methods can be overloaded in object types following the same rules as function and procedure overloading in packages.</P
><P
CLASS="para"
>The syntax for creating the object type body is:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>CREATE [OR REPLACE] TYPE BODY obj_type_name 
AS OBJECT (
      [MEMBER | STATIC PROCEDURE | FUNCTION 
         program_body;]
   [ORDER | MAP MEMBER FUNCTION 
      comparison_function_body;]
);</PRE
></BLOCKQUOTE
><P
CLASS="para"
>The keyword STATIC is new starting with Oracle8<EM
CLASS="emphasis"
>i.</EM
> Static methods do not use the current SELF object.</P
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="plsql-toc443895412"
>1.16.2 Methods</A
></H3
><P
CLASS="para"
>Every object has a default method, a <EM
CLASS="emphasis"
>constructor</EM
>, which has the same name as the object type. The constructor <EM
CLASS="emphasis"
>constructs</EM
> an instance of the object type from the elements passed to it, and returns the new object. This built-in method:</P
><UL
CLASS="itemizedlist"
><LI
CLASS="listitem"
><P
CLASS="para"
>Has the same name as the object type</P
></LI
><LI
CLASS="listitem"
><P
CLASS="para"
>Is a function that returns an object of that type </P
></LI
><LI
CLASS="listitem"
><P
CLASS="para"
>Accepts attributes in named or positional notation</P
></LI
><LI
CLASS="listitem"
><P
CLASS="para"
>Must be called with a value (or NULL) for every attribute&nbsp;-- there is no DEFAULT clause for object attributes</P
></LI
><LI
CLASS="listitem"
><P
CLASS="para"
>Cannot be modified</P
></LI
></UL
><P
CLASS="para"
>If you wish to create your own pseudo-constructor, create a STATIC function that returns an object of the corresponding type.</P
><P
CLASS="para"
>All non-static methods have the built-in parameter SELF, which references the instance of the object. The default mode for the SELF parameter is IN for functions and IN OUT for procedures. SELF can be explicitly declared with a non-default mode.</P
><P
CLASS="para"
>ORDER and MAP methods establish ordinal positions of objects for non-equality comparisons such as "&lt;" or "between" and for sorting (ORDER BY, GROUP BY, DISTINCT). An ORDER function accepts two parameters: SELF, and another object of the same type. It must return an INTEGER with values of -1, 0, 1, or NULL. </P
><P
CLASS="para"
>See the following table for a description of these return values. </P
><TABLE
CLASS="informaltable"
BORDER="1"
CELLPADDING="3"
><THEAD
CLASS="thead"
><TR
CLASS="row"
VALIGN="TOP"
><TH
CLASS="entry"
ALIGN="LEFT"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>Return Value</P
></TH
><TH
CLASS="entry"
ALIGN="LEFT"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>Object Comparison</P
></TH
></TR
></THEAD
><TBODY
CLASS="tbody"
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>-1</P
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>SELF &lt; second object</P
></TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
> 0</P
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>SELF = second object</P
></TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
> 1</P
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>SELF &gt; second object</P
></TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>NULL</P
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>Undefined comparison, i.e., attributes needed for the comparison are NULL</P
></TD
></TR
></TBODY
></TABLE
><P
CLASS="para"
>For example, the Senate ranks majority party members higher than non-majority party members and within the majority (or non-majority), by years of service. Here is an example ORDER function incorporating these rules:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>CREATE TYPE senator_t AS OBJECT (
   majority boolean_t,
   yrs_service NUMBER,
   ORDER MEMBER FUNCTION ranking (other IN 
      senator_t)
      RETURN INTEGER  );

CREATE OR REPLACE TYPE BODY senator_t AS 
   ORDER MEMBER FUNCTION ranking (other IN 
      senator_t)
      RETURN INTEGER
   IS
   BEGIN
      IF SELF.majority.istrue() 
         AND other.majority.istrue()
      THEN
         RETURN SIGN(SELF.yrs_service -
            other.yrs_service);
      ELSIF SELF.majority.istrue() 
         AND other.majority.isfalse()
      THEN
         RETURN 1;
      ELSIF SELF.majority.isfalse() 
         AND other.majority.istrue()
      THEN
         RETURN -1;
      ELSIF SELF.majority.isfalse() 
         AND other.majority.isfalse()
      THEN
         RETURN SIGN(SELF.yrs_service - 
            other.yrs_service);
      END IF;
   END ranking;
END;</PRE
></BLOCKQUOTE
><P
CLASS="para"
>A MAP function accepts no parameters and returns a scalar datatype such as DATE, NUMBER, or VARCHAR2 for which Oracle already knows a collating sequence. The MAP function translates, or <EM
CLASS="emphasis"
>maps</EM
>, each object into a scalar datatype space that Oracle knows how to compare. When they exist, MAP methods are often more efficient than ORDER methods and are required for hash joins on the object in SQL.</P
><P
CLASS="para"
>If no ORDER or MAP function exists for an object type, SQL, but not PL/SQL, supports only limited equality comparisons of objects. Objects are equal if they are of the same object type and if each attribute is equal.</P
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="plsql-toc443895413"
>1.16.3 Manipulating Objects in PL/SQL and SQL </A
></H3
><P
CLASS="para"
>There are three ways to initialize an object:</P
><OL
CLASS="orderedlist"
><LI
CLASS="listitem"
><P
CLASS="para"
>Using the constructor method</P
></LI
><LI
CLASS="listitem"
><P
CLASS="para"
>Directly assignmening an existing object to a new object</P
></LI
><LI
CLASS="listitem"
><P
CLASS="para"
>Using SELECT INTO or FETCH INTO</P
></LI
></OL
><P
CLASS="para"
>Here is an example using each initialization technique:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>DECLARE
   project_boiler_plate  project_t;
   build_web_site        project_t;

   -- Initialize via constructor.
   new_web_mgr  proj_mgr_t := 
         proj_mgr_t('Ruth', 'Home Office');

   CURSOR template_cur IS
      SELECT VALUE(proj)
        FROM projects
       WHERE project_type = 'TEMPLATE'
         AND  sub_type = 'WEB SITE';
   BEGIN
      OPEN template_cur;
      -- Initialize via FETCH INTO.
      FETCH template_cur
         INTO project_boiler_plate;

      -- Initialize via assignment.
      build_web_site := project_boiler_plate;
      ...</PRE
></BLOCKQUOTE
><P
CLASS="para"
>After an object is initialized, it can be stored in the database, and you can then locate and use that object with the REF, VALUE, and DEREF operators.</P
><DIV
CLASS="sect3"
><H4
CLASS="sect3"
><A
CLASS="title"
NAME="plsql-toc443895414"
>1.16.3.1 The REF operator</A
></H4
><P
CLASS="para"
>REF, short for REFerence, designates a datatype modifier or an operator to retrieve a logical pointer to an object. This pointer encapsulates the OID and can simplify navigation among related database objects. </P
><P
CLASS="para"
>The syntax for a REF operator is:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>REF(table_alias_name)</PRE
></BLOCKQUOTE
><P
CLASS="para"
>For example:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>SELECT REF(p) FROM pets p WHERE ...</PRE
></BLOCKQUOTE
><P
CLASS="para"
>A PL/SQL variable can hold a reference to a particular object type:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>DECLARE
   petref REF Pet_t;
BEGIN
   SELECT REF(p) INTO petref FROM pets p WHERE ...</PRE
></BLOCKQUOTE
><P
CLASS="para"
>Through deletions, REFs can reference a nonexistent object&nbsp;-- called a dangling REF&nbsp;-- resulting in a state that can be detected with the IS DANGLING predicate. For example:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>UPDATE pets
   SET owner_ref = NULL
 WHERE owner_ref IS DANGLING.</PRE
></BLOCKQUOTE
></DIV
><DIV
CLASS="sect3"
><H4
CLASS="sect3"
><A
CLASS="title"
NAME="plsql-toc443895415"
>1.16.3.2 The VALUE operator</A
></H4
><P
CLASS="para"
>Use the VALUE operator to retrieve a row object as a single object rather than multiple columns. The syntax for the VALUE operator is:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>VALUE(table_alias_name)</PRE
></BLOCKQUOTE
><P
CLASS="para"
>For example:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>SELECT VALUE(p) FROM pets p WHERE ...</PRE
></BLOCKQUOTE
></DIV
><DIV
CLASS="sect3"
><H4
CLASS="sect3"
><A
CLASS="title"
NAME="plsql-toc443895416"
>1.16.3.3 The DEREF operator</A
></H4
><P
CLASS="para"
>Use the DEREF operator to retrieve the value of an object for which you have a REF. The syntax for the DEREF operator is: </P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>DEREF(table_alias_name)</PRE
></BLOCKQUOTE
><P
CLASS="para"
>For example:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>DECLARE
   person_ref   REF person_t;
   author       person_t;
BEGIN
   -- Get the ref. 
   SELECT REF(p) INTO person_ref 
      FROM persons WHERE p.last_name ='Pribyl';

   -- Dereference the pointer back to the value.
   SELECT DEREF(person_ref) INTO author FROM dual;
   ...</PRE
></BLOCKQUOTE
><P
CLASS="para"
>Additionally, Oracle uses an OID internally as a unique key to each object. Like a ROWID, you don't typically use an OID directly. </P
><P
CLASS="para"
>The following table shows ways of referencing persistent objects. </P
><TABLE
CLASS="informaltable"
BORDER="1"
CELLPADDING="3"
><THEAD
CLASS="thead"
><TR
CLASS="row"
VALIGN="TOP"
><TH
CLASS="entry"
ALIGN="LEFT"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>Scheme</P
></TH
><TH
CLASS="entry"
ALIGN="LEFT"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>Description</P
></TH
><TH
CLASS="entry"
ALIGN="LEFT"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>Applications</P
></TH
></TR
></THEAD
><TBODY
CLASS="tbody"
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>OID</P
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>An opaque, globally unique handle, produced when the object is stored in the database as a table (row) object.</P
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>This is the persistent object's handle; it's what REFs point to. Your program never uses it directly.</P
></TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>VALUE</P
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>An operator. In SQL, it acts on an object in an object table and returns the object's <EM
CLASS="emphasis"
>contents</EM
>. Different from the VALUES keyword found in some INSERT statements.</P
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>Allows quasi-normalizing of object-relational databases and joining of object tables using dot navigation. In PL/SQL, REFs serve as input/output variables.</P
></TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>REF</P
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>A pointer to an object. May be used within a SQL statement as an operator or in a declaration as a type modifier.</P
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>Used when fetching a table (row) object into a variable, or when you need to refer to an object table as an object instead of a list of columns.</P
></TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>DEREF</P
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>Reverse pointer lookup for REFs.</P
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>Used for retrieving the contents of an object when all you know is its REF.</P
></TD
></TR
></TBODY
></TABLE
></DIV
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="plsql-SECT-16.4"
>1.16.4 Changing Object Types </A
></H3
><P
CLASS="para"
>You can add methods, but not attributes, to an object type stored in the database using the ALTER TYPE statement:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>ALTER TYPE type_name REPLACE AS OBJECT (
   new_object_type_specification
);</PRE
></BLOCKQUOTE
><P
CLASS="para"
>The only supported change you can make in the new object type specification is to include new methods.</P
><P
CLASS="para"
>It is also possible to rebuild an object table with different physical storage characteristics by using the built-in procedure DBMS_DDL.ALTER_TABLE_REFERENCEABLE.</P
><P
CLASS="para"
>The syntax for dropping an object type is:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>DROP TYPE type_name [FORCE];</PRE
></BLOCKQUOTE
><P
CLASS="para"
>You can drop only an object type that has not been implemented in a table (or you can drop the tables first). The FORCE option will drop object types even if they have dependencies, but FORCE will irreversibly invalidate any dependent objects such as tables. FORCE does not do a DROP CASCADE.</P
></DIV
></DIV
><DIV
CLASS="htmlnav"
><P
></P
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch01_15.htm"
TITLE="1.15 Calling PL/SQL Functions in SQL"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 1.15 Calling PL/SQL Functions in SQL"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="book"
HREF="index.htm"
TITLE="Oracle PL/SQL Language Pocket Reference"
><IMG
SRC="../gifs/txthome.gif"
ALT="Oracle PL/SQL Language Pocket Reference"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch01_17.htm"
TITLE="1.17 Collections "
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 1.17 Collections "
BORDER="0"></A
></TD
></TR
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
>1.15 Calling PL/SQL Functions in SQL</TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
>&nbsp;</TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
>1.17 Collections </TD
></TR
></TABLE
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"></DIV
><IMG SRC="../gifs/smnavbar.gif"
USEMAP="#map"
BORDER="0"
ALT="The Oracle Library Navigation">

<P><font size="-1">
<a href="../copyrght.htm#copy">Copyright (c) 2000</a> O'Reilly &amp; Associates. All rights reserved.
</font></P>

<MAP NAME="map">

<AREA SHAPE="RECT"
COORDS="0,0,35,30"
HREF="../index.htm"
ALT="Library Home">

<AREA SHAPE="RECT"
COORDS="40,0,95,30"
HREF="../prog2/index.htm"
ALT="Oracle PL/SQL Programming, 2nd. Ed.">

<AREA SHAPE="RECT"
COORDS="100,0,200,30"
HREF="../guide8i/index.htm"
ALT="Guide to Oracle 8i Features">

<AREA SHAPE="RECT"
COORDS="205,0,245,30"
HREF="../bipack/index.htm"
ALT="Oracle Built-in Packages">

<AREA SHAPE="RECT"
COORDS="250,0,320,30"
HREF="../advprog/index.htm"
ALT="Advanced PL/SQL Programming with Packages">

<AREA SHAPE="RECT"
COORDS="325,0,420,30"
HREF="../webapp/index.htm"
ALT="Oracle Web Applications">

<AREA SHAPE="RECT"
COORDS="425,0,490,30"
HREF="index.htm"
ALT="Oracle PL/SQL Language Pocket Reference">

<AREA SHAPE="RECT"
COORDS="495,0,570,30"
HREF="../bipkt/index.htm"
ALT="Oracle PL/SQL Built-ins Pocket Reference">
</MAP>

</BODY
>
<!-- Mirrored from liso.cs.pusan.ac.kr by HTTrack Website Copier/3.x [XR&CO'2001] -->
</HTML
>
