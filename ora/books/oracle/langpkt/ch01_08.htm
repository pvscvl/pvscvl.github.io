<HTML
><HEAD
><TITLE
>[Chapter 1] 1.8 Database Interaction and Cursors </TITLE
><META
NAME="DC.Creator"
CONTENT="Steven Feuerstein, Bill Pribyl &amp; Chip Dawes"><META
NAME="DC.Date"
CONTENT="2000-04-29T17:31:57Z"><META
NAME="DC.Format"
CONTENT="text/html"
SCHEME="MIME"><META
NAME="DC.Identifier"
CONTENT="O'Reilly and Associates CD-ROM-1-56592-457-6E"><META
NAME="DC.Language"
CONTENT="en-US"><META
NAME="DC.Publisher"
CONTENT="O'Reilly &amp; Associates, Inc."><META
NAME="DC.Source"
CONTENT="1-56592-457-6E"
SCHEME="ISBN"><META
NAME="DC.Subject.Keyword"
CONTENT="Oracle PL/SQL Reference"><META
NAME="DC.Title"
CONTENT="Oracle PL/SQL Language Pocket Reference"><META
NAME="DC.Type"
CONTENT="Text.Monograph"><META
NAME="generator"
CONTENT="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><LINK
REL="stylesheet"
TYPE="text/css"
HREF="../style/style1.css"><LINK
REV="made"
HREF="mailto:online-books@oreilly.com"
TITLE="Online Books Comments"><LINK
REL="up"
HREF="ch01_01.htm"
TITLE="1. Oracle PL/SQL Language Pocket Reference"><LINK
REL="prev"
HREF="ch01_07.htm"
TITLE="1.7 Loops "><LINK
REL="next"
HREF="ch01_09.htm"
TITLE="1.9 Cursors in PL/SQL "></HEAD
><BODY
><DIV
CLASS="htmlnav"
><H1
><IMG
SRC="gifs/smbanner.gif"
ALT="Oracle PL/SQL Language Pocket Reference"
USEMAP="#srchmap"
BORDER="0"></H1
><MAP
NAME="srchmap"
><AREA
SHAPE="RECT"
COORDS="0,0,466,65"
HREF="index.htm"
ALT="Oracle PL/SQL Language Pocket Reference"><AREA
SHAPE="RECT"
COORDS="467,0,514,18"
HREF="jobjects/fsearch.htm"
ALT="Search this book"></MAP
><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch01_07.htm"
TITLE="1.7 Loops "
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 1.7 Loops "
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><SPAN
CLASS="NAVTITLE"
><A
CLASS="chapter"
REL="up"
HREF="ch01_01.htm"
TITLE="1. Oracle PL/SQL Language Pocket Reference"
>Chapter 1<BR>Oracle PL/SQL Language Pocket Reference</A
></SPAN
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch01_09.htm"
TITLE="1.9 Cursors in PL/SQL "
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 1.9 Cursors in PL/SQL "
BORDER="0"></A
></TD
></TR
></TABLE
>&nbsp;<HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"></DIV
><DIV
CLASS="sect1"
><H2
CLASS="sect1"
><A
CLASS="title"
NAME="plsql-toc443895344"
>1.8 Database Interaction and Cursors </A
></H2
><P
CLASS="para"
>PL/SQL is tightly integrated with the underlying SQL layer of the Oracle database. You can execute SQL statements (UPDATE, INSERT, DELETE, and SELECT) directly in PL/SQL programs. You can also execute Data Definition Language (DDL) statements through the use of dynamic SQL (DBMS_SQL in Oracle7 and Oracle8, native dynamic SQL in Oracle8<EM
CLASS="emphasis"
>i</EM
>). In addition, you can manage transactions with COMMIT, ROLLBACK, and other Data Control Language (DCL) statements.</P
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="plsql-toc443895345"
>1.8.1 Transaction Management </A
></H3
><P
CLASS="para"
>The Oracle RDBMS provides a transaction model based on a unit of work. The PL/SQL language supports most, but not all, of the database model for transactions (you cannot, for example, ROLLBACK FORCE). Transactions begin with the first change to data and end with either a COMMIT or ROLLBACK. Transactions are independent of PL/SQL blocks. Transactions can span multiple PL/SQL blocks, or there can be multiple transactions in a single PL/SQL block. The PL/SQL supported transaction statements are: COMMIT, ROLLBACK, SAVEPOINT, SET TRANSACTION, and LOCK TABLE. Each is detailed here:</P
><DIV
CLASS="sect3"
><H4
CLASS="sect3"
><A
CLASS="title"
NAME="plsql-toc443895346"
>1.8.1.1 COMMIT</A
></H4
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>COMMIT [WORK] [COMMENT text];</PRE
></BLOCKQUOTE
><P
CLASS="para"
>COMMIT makes the database changes permanent and visible to other database sessions. The WORK keyword is optional and only aids readability&nbsp;-- it is rarely used. The COMMENT text is optional and can be up to 50 characters in length. It is only germane to in-doubt distributed (two-phase commit) transactions. The database statement COMMIT FORCE for distributed transactions is not supported in PL/SQL.</P
></DIV
><DIV
CLASS="sect3"
><H4
CLASS="sect3"
><A
CLASS="title"
NAME="plsql-toc443895347"
>1.8.1.2 ROLLBACK</A
></H4
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>ROLLBACK [WORK] [TO [SAVEPOINT] savepoint_name];</PRE
></BLOCKQUOTE
><P
CLASS="para"
>ROLLBACK undoes the changes made in the current transaction either to the beginning of the transaction or to a <EM
CLASS="emphasis"
>savepoint</EM
>. A savepoint is a named processing point in a transaction, created with the SAVEPOINT statement. Rolling back to a savepoint is a partial rollback of a transaction, wiping out all changes (and savepoints) that occurred later than the named savepoint.</P
></DIV
><DIV
CLASS="sect3"
><H4
CLASS="sect3"
><A
CLASS="title"
NAME="plsql-toc443895348"
>1.8.1.3 SAVEPOINT</A
></H4
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>SAVEPOINT savepoint_name;</PRE
></BLOCKQUOTE
><P
CLASS="para"
>SAVEPOINT establishes a savepoint in the current transaction. <EM
CLASS="emphasis"
>savepoint_name</EM
> is an undeclared identifier&nbsp;-- you do not declare it. More than one savepoint can be established within a transaction. If you reuse a savepoint name, that savepoint is <EM
CLASS="emphasis"
>moved</EM
> to the later position and you will not be able to rollback to the initial savepoint position.</P
></DIV
><DIV
CLASS="sect3"
><H4
CLASS="sect3"
><A
CLASS="title"
NAME="plsql-toc443895349"
>1.8.1.4 SET TRANSACTION</A
></H4
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>SET TRANSACTION READ ONLY;
SET TRANSACTION ISOLATION LEVEL SERIALIZABLE;
SET TRANSACTION USE ROLLBACK SEGMENT rbseg_name;</PRE
></BLOCKQUOTE
><P
CLASS="para"
>SET TRANSACTION has three transaction control functions:</P
><DL
CLASS="variablelist"
><DT
CLASS="term"
>READ ONLY </DT
><DD
CLASS="listitem"
><P
CLASS="para"
>Marks the beginning of a read-only transaction. This indicates to the RDBMS that a read-consistent view of the database is to be enforced for the transaction (the default is for the statement). This read-consistent view means that only changes committed before the transaction begins are visible for the duration of the transaction. The transaction is ended with either a COMMIT or ROLLBACK. Only LOCK TABLE, SELECT, SELECT INTO, OPEN, FETCH, CLOSE, COMMIT, or ROLLBACK statements are permitted during a read-only transaction. Issuing other statements, such as INSERT or UPDATE, in a read-only transaction results in an ORA-1456 error.</P
></DD
><DT
CLASS="term"
>ISOLATION LEVEL SERIALIZABLE </DT
><DD
CLASS="listitem"
><P
CLASS="para"
>Similar to a READ ONLY transaction in that transaction-level read consistency is enforced instead of the default statement-level read consistency. Serializable transactions do allow changes to data, however.</P
></DD
><DT
CLASS="term"
>USE ROLLBACK SEGMENT </DT
><DD
CLASS="listitem"
><P
CLASS="para"
>Tells the RDBMS to use the specifically named rollback segment <EM
CLASS="emphasis"
>rbseg_name</EM
>. This statement is useful when only one rollback segment is large and a program knows that it needs to use the large rollback segment, such as during a month-end close operation. For example, if we know our large rollback segment is named <EM
CLASS="emphasis"
>rbs_large</EM
>, we can tell the database to use it by issuing the following statement before our first change to data:</P
></DD
></DL
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>SET TRANSACTION USE ROLLBACK SEGMENT rbs_large;</PRE
></BLOCKQUOTE
></DIV
><DIV
CLASS="sect3"
><H4
CLASS="sect3"
><A
CLASS="title"
NAME="plsql-toc443895350"
>1.8.1.5 LOCK TABLE</A
></H4
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>LOCK TABLE table_list IN lock_mode MODE [NOWAIT];</PRE
></BLOCKQUOTE
><P
CLASS="para"
>This statement bypasses the implicit database row-level locks by explicitly locking one or more tables in the specified mode. The <EM
CLASS="emphasis"
>table_list</EM
> is a comma-delimited list of tables. The <EM
CLASS="emphasis"
>lock_mode</EM
> is one of ROW SHARE, ROW EXCLUSIVE, SHARE UPDATE, SHARE, SHARE ROW EXCLUSIVE, or EXCLUSIVE. The NOWAIT keyword specifies that the RDBMS should not wait for a lock to be released. If there is a lock when NOWAIT is specified, the RDBMS raises the exception "ORA-00054: resource busy and acquire with NOWAIT specified". The default RDBMS locking behavior is to wait indefinitely.</P
></DIV
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="plsql-toc443895351"
>1.8.2 Native Dynamic SQL (Oracle8i)</A
></H3
><P
CLASS="para"
>Native dynamic SQL introduces a new PL/SQL statement, EXECUTE IMMEDIATE, and new semantics for the OPEN FOR, FETCH, and CLOSE statement family. The former applies to single-row queries and DDL, while the latter supports dynamic multi-row queries. The syntax for these statements is:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>EXECUTE IMMEDIATE SQL_statement_string 
[INTO { define_variable_list | record | 
   object_variable }]
[USING [IN | OUT | IN OUT] bind_argument_list];

OPEN cursor_variable FOR 
   SELECT_statement_string;

FETCH cursor_variable INTO {define_variable_list 
    | record | object_variable};
CLOSE cursor_variable;</PRE
></BLOCKQUOTE
><P
CLASS="para"
>The EXECUTE IMMEDIATE statement parses and executes the SQL statement in a single step. It can be used for any SQL statement except a multi-row query. <EM
CLASS="emphasis"
>define_variable_list</EM
> is a comma-delimited list of variable names; the <EM
CLASS="emphasis"
>bind_argument_list</EM
> is a comma-delimited list of bind arguments. The parameter mode is optional and defaults to IN. Do not place a trailing semicolon in the <EM
CLASS="emphasis"
>SQL_statement_string</EM
>.</P
><P
CLASS="para"
>This is the statement that can be used to execute DDL without the DBMS_SQL package. For example:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>EXECUTE IMMEDIATE 'TRUNCATE TABLE foo';
EXECUTE IMMEDIATE 'GRANT SELECT ON '|| tabname_v ||
   ' TO ' || grantee_list;</PRE
></BLOCKQUOTE
><P
CLASS="para"
>The OPEN FOR statement assigns a multi-row query to a weakly typed cursor variable. The rows are then FETCHed and the cursor CLOSEd. </P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>DECLARE 
   TYPE cv_typ IS REF CURSOR;
   cv cv_typ;
   laccount_no NUMBER;
   lbalance NUMBER;
BEGIN
   OPEN cv FOR
      'SELECT account_no, balance
         FROM accounts
        WHERE balance &lt; 500';
   LOOP
      FETCH cv INTO laccount_no, lbalance;
      EXIT WHEN cv%NOTFOUND;
      -- Process the row.
   END LOOP;
   CLOSE cv;
END;</PRE
></BLOCKQUOTE
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="plsql-toc443895352"
>1.8.3 Autonomous Transactions (Oracle8i)</A
></H3
><P
CLASS="para"
>Autonomous transactions execute within a block of code as separate transactions from the outer (main) transaction. Changes can be committed or rolled back in an autonomous transaction without committing or rolling back the main transaction. Changes committed in an autonomous transaction are visible to the main transaction, even though they occur after the start of the main transaction. Changes committed in an autonomous transaction are visible to other transactions as well. The RDBMS suspends the main transaction while the autonomous transaction executes: </P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>PROCEDURE main IS
BEGIN
   UPDATE ...-- Main transaction begins here.
   DELETE ...
   at_proc;  -- Call the autonomous transaction.
   SELECT ...
   INSERT ...
   COMMIT;   -- Main transaction ends here.
END;

PROCEDURE at_proc IS
   PRAGMA AUTONOMOUS_TRANSACTION;
BEGIN        -- Main transaction suspends here.
   SELECT ...
   INSERT ...-- Autonomous transaction begins here.
   UPDATE ...
   DELETE ...
   COMMIT;   -- Autonomous transaction ends here.
END;         -- Main transaction resumes here.</PRE
></BLOCKQUOTE
><P
CLASS="para"
>So, changes made in the main transaction are not visible to the autonomous transaction and if the main transaction holds any locks that the autonomous transaction waits for, a deadlock occurs. Using the NOWAIT option on UPDATE statements in autonomous transactions can help to minimize this kind of deadlock. Functions and procedures (local program, standalone, or packaged), database triggers, top-level anonymous PL/SQL blocks, and object methods can be declared autonomous via the compiler directive PRAGMA AUTONOMOUS_TRANSACTION. </P
><P
CLASS="para"
>In the example below, the COMMIT does not make permanent pending changes in the calling program. Any rollback in the calling program would also have no effect on the changes committed in this autonomous procedure: </P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>CREATE OR REPLACE PROCEDURE add_company (
   name_in   company.name%TYPE
   )
IS
   PRAGMA AUTONOMOUS_TRANSACTION;
BEGIN
   determine_credit(name);
   create_account(name);
   ...
   COMMIT;  -- Only commit this procedure's changes.
END add_company;</PRE
></BLOCKQUOTE
></DIV
></DIV
><DIV
CLASS="htmlnav"
><P
></P
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch01_07.htm"
TITLE="1.7 Loops "
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 1.7 Loops "
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="book"
HREF="index.htm"
TITLE="Oracle PL/SQL Language Pocket Reference"
><IMG
SRC="../gifs/txthome.gif"
ALT="Oracle PL/SQL Language Pocket Reference"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch01_09.htm"
TITLE="1.9 Cursors in PL/SQL "
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 1.9 Cursors in PL/SQL "
BORDER="0"></A
></TD
></TR
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
>1.7 Loops </TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
>&nbsp;</TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
>1.9 Cursors in PL/SQL </TD
></TR
></TABLE
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"></DIV
><IMG SRC="../gifs/smnavbar.gif"
USEMAP="#map"
BORDER="0"
ALT="The Oracle Library Navigation">

<P><font size="-1">
<a href="../copyrght.htm#copy">Copyright (c) 2000</a> O'Reilly &amp; Associates. All rights reserved.
</font></P>

<MAP NAME="map">

<AREA SHAPE="RECT"
COORDS="0,0,35,30"
HREF="../index.htm"
ALT="Library Home">

<AREA SHAPE="RECT"
COORDS="40,0,95,30"
HREF="../prog2/index.htm"
ALT="Oracle PL/SQL Programming, 2nd. Ed.">

<AREA SHAPE="RECT"
COORDS="100,0,200,30"
HREF="../guide8i/index.htm"
ALT="Guide to Oracle 8i Features">

<AREA SHAPE="RECT"
COORDS="205,0,245,30"
HREF="../bipack/index.htm"
ALT="Oracle Built-in Packages">

<AREA SHAPE="RECT"
COORDS="250,0,320,30"
HREF="../advprog/index.htm"
ALT="Advanced PL/SQL Programming with Packages">

<AREA SHAPE="RECT"
COORDS="325,0,420,30"
HREF="../webapp/index.htm"
ALT="Oracle Web Applications">

<AREA SHAPE="RECT"
COORDS="425,0,490,30"
HREF="index.htm"
ALT="Oracle PL/SQL Language Pocket Reference">

<AREA SHAPE="RECT"
COORDS="495,0,570,30"
HREF="../bipkt/index.htm"
ALT="Oracle PL/SQL Built-ins Pocket Reference">
</MAP>

</BODY
>
<!-- Mirrored from liso.cs.pusan.ac.kr by HTTrack Website Copier/3.x [XR&CO'2001] -->
</HTML
>
