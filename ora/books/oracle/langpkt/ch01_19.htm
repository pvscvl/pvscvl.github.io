<HTML
><HEAD
><TITLE
>[Chapter 1] 1.19 Java Language Integration</TITLE
><META
NAME="DC.Creator"
CONTENT="Steven Feuerstein, Bill Pribyl &amp; Chip Dawes"><META
NAME="DC.Date"
CONTENT="2000-04-29T17:33:02Z"><META
NAME="DC.Format"
CONTENT="text/html"
SCHEME="MIME"><META
NAME="DC.Identifier"
CONTENT="O'Reilly and Associates CD-ROM-1-56592-457-6E"><META
NAME="DC.Language"
CONTENT="en-US"><META
NAME="DC.Publisher"
CONTENT="O'Reilly &amp; Associates, Inc."><META
NAME="DC.Source"
CONTENT="1-56592-457-6E"
SCHEME="ISBN"><META
NAME="DC.Subject.Keyword"
CONTENT="Oracle PL/SQL Reference"><META
NAME="DC.Title"
CONTENT="Oracle PL/SQL Language Pocket Reference"><META
NAME="DC.Type"
CONTENT="Text.Monograph"><META
NAME="generator"
CONTENT="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><LINK
REL="stylesheet"
TYPE="text/css"
HREF="../style/style1.css"><LINK
REV="made"
HREF="mailto:online-books@oreilly.com"
TITLE="Online Books Comments"><LINK
REL="up"
HREF="ch01_01.htm"
TITLE="1. Oracle PL/SQL Language Pocket Reference"><LINK
REL="prev"
HREF="ch01_18.htm"
TITLE="1.18 External Procedures "></HEAD
><BODY
><DIV
CLASS="htmlnav"
><H1
><IMG
SRC="gifs/smbanner.gif"
ALT="Oracle PL/SQL Language Pocket Reference"
USEMAP="#srchmap"
BORDER="0"></H1
><MAP
NAME="srchmap"
><AREA
SHAPE="RECT"
COORDS="0,0,466,65"
HREF="index.htm"
ALT="Oracle PL/SQL Language Pocket Reference"><AREA
SHAPE="RECT"
COORDS="467,0,514,18"
HREF="jobjects/fsearch.htm"
ALT="Search this book"></MAP
><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch01_18.htm"
TITLE="1.18 External Procedures "
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 1.18 External Procedures "
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><SPAN
CLASS="NAVTITLE"
><A
CLASS="chapter"
REL="up"
HREF="ch01_01.htm"
TITLE="1. Oracle PL/SQL Language Pocket Reference"
>Chapter 1<BR>Oracle PL/SQL Language Pocket Reference</A
></SPAN
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
>&nbsp;</TD
></TR
></TABLE
>&nbsp;<HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"></DIV
><DIV
CLASS="sect1"
><H2
CLASS="sect1"
><A
CLASS="title"
NAME="plsql-toc443895441"
>1.19 Java Language Integration</A
></H2
><P
CLASS="para"
>In Oracle8<EM
CLASS="emphasis"
>i</EM
>, Java(TM) programmers can write server-side classes that invoke SQL and PL/SQL using standard JDBC(TM) or SQLJ calls. PL/SQL programmers can call server-side Java methods by writing a PL/SQL cover or <EM
CLASS="emphasis"
>call spec</EM
> for Java using Oracle DDL.</P
><P
CLASS="para"
>Server-side Java in Oracle may be faster than PL/SQL for compute-intensive programs, but not as nimble for database access. PL/SQL is much more efficient for database-intensive routines because, unlike Java, it doesn't have to pay the overhead for converting SQL datatypes for use inside the stored program. Oracle programmers will want to continue to use PL/SQL for programs that perform a lot of database I/O, and use Java for the best raw computation performance.</P
><P
CLASS="para"
>The first step in creating a <EM
CLASS="emphasis"
>Java stored procedure</EM
> ( JSP) is writing or otherwise obtaining functional Java code. Having source code is not necessary, though, so you can use class libraries from third parties. The classes must, however, meet the following requirements:</P
><UL
CLASS="itemizedlist"
><LI
CLASS="listitem"
><P
CLASS="para"
>Methods published to SQL and PL/SQL must be declared static. PL/SQL has no mechanisms for instantiating non-static Java classes.</P
></LI
><LI
CLASS="listitem"
><P
CLASS="para"
>The classes must not issue any GUI calls (for example, to AWT) at runtime.</P
></LI
></UL
><P
CLASS="para"
>If you write your own JSP, and it needs to connect to the database for access to tables or stored procedures, use standard JDBC and/or SQLJ calls in your code. Many JDBC and SQLJ reference materials are available to provide assistance in calling SQL or PL/SQL from Java, but be sure to review the Oracle-specific documentation that ships with Oracle8<EM
CLASS="emphasis"
>i</EM
>.</P
><P
CLASS="para"
>Once you have the Java class in hand, either in source or <EM
CLASS="emphasis"
>.class</EM
> file format, the next step is loading it into the database. Oracle's <EM
CLASS="emphasis"
>loadjava</EM
> command-line utility is a convenient way to accomplish the load. Refer to Oracle's documentation for further assistance with <EM
CLASS="emphasis"
>loadjava</EM
>.</P
><P
CLASS="para"
>The third step is to create a call spec for the Java method, specifying the AS LANGUAGE JAVA clause of the CREATE command. You may create a function or procedure cover as appropriate.</P
><P
CLASS="para"
>Finally, you may grant execute privileges on the new JSP using GRANT EXECUTE, and PL/SQL routines can now call the JSP as if it were another PL/SQL module.</P
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="plsql-toc443895442"
>1.19.1 Example</A
></H3
><P
CLASS="para"
>Let's write a simple "Hello, World" JSP that will accept an argument:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>package oreilly.plsquick.demos;

public class Hello {
   public static String sayIt (String toWhom) {
      return &quot;Hello, &quot; + toWhom + &quot;!&quot;;
   }
}</PRE
></BLOCKQUOTE
><P
CLASS="para"
>Saved in a file called <EM
CLASS="emphasis"
>Hello.java</EM
>, we can load the source code directly into Oracle. Doing so will automatically compile the code. A simple form of the <EM
CLASS="emphasis"
>loadjava</EM
> command:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>loadjava -user scott/tiger -oci8 oreilly/plsquick/
   demos/Hello.java</PRE
></BLOCKQUOTE
><P
CLASS="para"
>The <EM
CLASS="emphasis"
>Hello.java</EM
> file follows the Java file placement convention for packages and so exists in a subdirectory named <EM
CLASS="emphasis"
>oreilly/plsquick/demos</EM
>.</P
><P
CLASS="para"
>Now we can fire up our favorite SQL interpreter, connect as SCOTT/TIGER, and create the call spec for the Hello.sayIt(  ) method:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>CREATE FUNCTION hello_there (to_whom IN VARCHAR2)
   RETURN VARCHAR2
   AS LANGUAGE JAVA
   NAME 'oreilly.plsquick.demos.Hello.sayIt
     (java.lang.String) return java.lang.String';
/</PRE
></BLOCKQUOTE
><P
CLASS="para"
>Now we can call our function very easily:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>BEGIN
   DBMS_OUTPUT.PUT_LINE(hello_there('world'));
END;
/</PRE
></BLOCKQUOTE
><P
CLASS="para"
>And we get:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>Hello, world!</PRE
></BLOCKQUOTE
><P
CLASS="para"
>as the expected output.</P
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="plsql-toc443895443"
>1.19.2 Publishing Java to PL/SQL</A
></H3
><P
CLASS="para"
>To write a call spec, use the AS LANGUAGE JAVA clause in a CREATE statement. The syntax for this clause is:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>{ IS | AS } LANGUAGE JAVA
   NAME 'method_fullname [ (type_fullname,... ] 
      [ return type_fullname ]'</PRE
></BLOCKQUOTE
><P
CLASS="para"
><EM
CLASS="emphasis"
>method_fullname</EM
> is the package-qualified name of the Java class and method. It is case-sensitive and uses dots to separate parts of the package full name. <EM
CLASS="emphasis"
>type_fullname</EM
> is the package-qualified name of the Java datatype.</P
><P
CLASS="para"
>Notice that a simple string, not an SQL name, follows the NAME keyword.</P
><P
CLASS="para"
>Type mapping follows most JDBC rules regarding the legal mapping of SQL types to Java types. Oracle extensions exist for Oracle-specific datatypes. </P
><P
CLASS="para"
>Most datatype mappings are relatively straightforward, but passing Oracle8 objects of a user-defined type is harder than one would think. Oracle provides a JPublisher tool that generates the Java required to encapsulate an Oracle8 object and its corresponding REF. Refer to Oracle's JPublisher documentation for guidelines on usage.</P
><P
CLASS="para"
>The AS LANGUAGE JAVA clause is the same whether you are using Java as a standalone JSP, the implementation of a packaged program, or the body of an object type method. For example, here is the complete syntax for creating JSPs as PL/SQL-callable functions or procedures:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>CREATE [OR REPLACE]
{  PROCEDURE procedure_name [(param[, param]...)]
   | FUNCTION function_name [(param[, param]...)] 
      RETURN sql_type
}
[AUTHID {DEFINER | CURRENT_USER}]
[PARALLEL_ENABLE]
[DETERMINISTIC]
{ IS | AS } LANGUAGE JAVA
   NAME 'method_fullname [ (type_fullname,... ] 
      [ return type_fullname ]'</PRE
></BLOCKQUOTE
><P
CLASS="para"
>When using Java as the implementation of a packaged procedure or function, Oracle allows you to place the Java call spec in either the package specification (where the call spec substitutes for the subprogram specification) or in the package body (where the call spec substitutes for the subprogram body).</P
><P
CLASS="para"
>Similarly, when using JSPs in object type methods, the Java call spec can substitute for either the object type method specification or its body.</P
><P
CLASS="para"
>Note that Java functions typically map to PL/SQL functions, but Java functions declared void map to PL/SQL procedures. Also, you will quickly learn that mistakes in mapping PL/SQL parameters to Java parameters become evident only at runtime.</P
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="plsql-toc443895444"
>1.19.3 Data Dictionary</A
></H3
><P
CLASS="para"
>To learn what Java library units are available in your schema, look in the USER_OBJECTS data dictionary view where the <EM
CLASS="emphasis"
>object_type</EM
> is like  `JAVA%'. If you see a Java class with INVALID status, it has not yet been successfully resolved. Note that the names of the Java source library units need not match the names of the classes they produce. </P
><P
CLASS="para"
>As of press time, there is no apparent way to discover which stored programs are implemented as Java stored procedures. You can look in the USER_SOURCE view for named programs that contain the source text `AS LANGUAGE JAVA', but that may not yield accurate results. The USER_DEPENDENCIES view does not track the relationship between PL/SQL cover programs and their underlying Java class.</P
><P
CLASS="para"
>Even if you have loaded the Java source code into the database, there is no supported way of retrieving the source from the data dictionary.</P
></DIV
></DIV
><DIV
CLASS="htmlnav"
><P
></P
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch01_18.htm"
TITLE="1.18 External Procedures "
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 1.18 External Procedures "
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="book"
HREF="index.htm"
TITLE="Oracle PL/SQL Language Pocket Reference"
><IMG
SRC="../gifs/txthome.gif"
ALT="Oracle PL/SQL Language Pocket Reference"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
>&nbsp;</TD
></TR
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
>1.18 External Procedures </TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
>&nbsp;</TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
>&nbsp;</TD
></TR
></TABLE
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"></DIV
><IMG SRC="../gifs/smnavbar.gif"
USEMAP="#map"
BORDER="0"
ALT="The Oracle Library Navigation">

<P><font size="-1">
<a href="../copyrght.htm#copy">Copyright (c) 2000</a> O'Reilly &amp; Associates. All rights reserved.
</font></P>

<MAP NAME="map">

<AREA SHAPE="RECT"
COORDS="0,0,35,30"
HREF="../index.htm"
ALT="Library Home">

<AREA SHAPE="RECT"
COORDS="40,0,95,30"
HREF="../prog2/index.htm"
ALT="Oracle PL/SQL Programming, 2nd. Ed.">

<AREA SHAPE="RECT"
COORDS="100,0,200,30"
HREF="../guide8i/index.htm"
ALT="Guide to Oracle 8i Features">

<AREA SHAPE="RECT"
COORDS="205,0,245,30"
HREF="../bipack/index.htm"
ALT="Oracle Built-in Packages">

<AREA SHAPE="RECT"
COORDS="250,0,320,30"
HREF="../advprog/index.htm"
ALT="Advanced PL/SQL Programming with Packages">

<AREA SHAPE="RECT"
COORDS="325,0,420,30"
HREF="../webapp/index.htm"
ALT="Oracle Web Applications">

<AREA SHAPE="RECT"
COORDS="425,0,490,30"
HREF="index.htm"
ALT="Oracle PL/SQL Language Pocket Reference">

<AREA SHAPE="RECT"
COORDS="495,0,570,30"
HREF="../bipkt/index.htm"
ALT="Oracle PL/SQL Built-ins Pocket Reference">
</MAP>

</BODY
>
<!-- Mirrored from liso.cs.pusan.ac.kr by HTTrack Website Copier/3.x [XR&CO'2001] -->
</HTML
>
