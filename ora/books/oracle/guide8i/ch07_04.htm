<HTML
><HEAD
><TITLE
>[Chapter 7] 7.4 UTL_COLL: Using Collection Locators</TITLE
><META
NAME="DC.Creator"
CONTENT="Steven Feuerstein"><META
NAME="DC.Date"
CONTENT="2000-04-29T19:26:35Z"><META
NAME="DC.Format"
CONTENT="text/html"
SCHEME="MIME"><META
NAME="DC.Identifier"
CONTENT="O'Reilly and Associates CDROM-1-56592-675-7E"><META
NAME="DC.Language"
CONTENT="en-US"><META
NAME="DC.Publisher"
CONTENT="O'Reilly &amp; Associates, Inc."><META
NAME="DC.Source"
CONTENT="1-56592-675-7E"
SCHEME="ISBN"><META
NAME="DC.Subject.Keyword"
CONTENT="Oracle 8i Features"><META
NAME="DC.Title"
CONTENT="Oracle PL/SQL Programming Guide to Oracle 8i Features"><META
NAME="DC.Type"
CONTENT="Text.Monograph"><META
NAME="generator"
CONTENT="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><LINK
REL="stylesheet"
TYPE="text/css"
HREF="../style/style1.css"><LINK
REV="made"
HREF="mailto:online-books@oreilly.com"
TITLE="Online Books Comments"><LINK
REL="up"
HREF="ch07_01.htm"
TITLE="7. New and Enhanced Built-in Packages in Oracle8i"><LINK
REL="prev"
HREF="ch07_03.htm#ch07-SECT-3.4"
TITLE="7.3 DBMS_RLS: Implementing Fine-Grained Access Control"><LINK
REL="next"
HREF="ch07_05.htm#ch07-SECT-5.2.1"
TITLE="7.5 LOB Enhancements"></HEAD
><BODY
><DIV
CLASS="htmlnav"
><H1
><IMG
SRC="gifs/smbanner.gif"
ALT="Oracle PL/SQL Programming Guide to Oracle 8i Features"
USEMAP="#srchmap"
BORDER="0"></H1
><MAP
NAME="srchmap"
><AREA
SHAPE="RECT"
COORDS="0,0,466,65"
HREF="index.htm"
ALT="Oracle PL/SQL Programming Guide to Oracle 8i Features"><AREA
SHAPE="RECT"
COORDS="467,0,514,18"
HREF="jobjects/fsearch.htm"
ALT="Search this book"></MAP
><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch07_03.htm#ch07-SECT-3.4"
TITLE="7.3 DBMS_RLS: Implementing Fine-Grained Access Control"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 7.3 DBMS_RLS: Implementing Fine-Grained Access Control"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><SPAN
CLASS="NAVTITLE"
><A
CLASS="chapter"
REL="up"
HREF="ch07_01.htm"
TITLE="7. New and Enhanced Built-in Packages in Oracle8i"
>Chapter 7<BR>New and Enhanced Built-in Packages in Oracle8i</A
></SPAN
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch07_05.htm#ch07-SECT-5.2.1"
TITLE="7.5 LOB Enhancements"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 7.5 LOB Enhancements"
BORDER="0"></A
></TD
></TR
></TABLE
>&nbsp;<HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"></DIV
><DIV
CLASS="sect1"
><H2
CLASS="sect1"
><A
CLASS="title"
NAME="ch07-72357"
>7.4 UTL_COLL: Using Collection Locators</A
></H2
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="AUTOID-4385"
></A
>The UTL_COLL package lets PL/SQL programs use collection locators to query and update. This package currently has only a single program: the IS_LOCATOR function. It determines whether a collection item is actually a locator. The header for this program is:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>UTL_COLL.IS_LOCATOR (<I
CLASS="replaceable"
>collection</I
> IN ANY) 
   RETURNS BOOLEAN;</PRE
></BLOCKQUOTE
><P
CLASS="para"
> <A
CLASS="indexterm"
NAME="AUTOID-4390"
></A
> <A
CLASS="indexterm"
NAME="AUTOID-4392"
></A
> <A
CLASS="indexterm"
NAME="AUTOID-4394"
></A
><A
CLASS="indexterm"
NAME="AUTOID-4396"
></A
>where <EM
CLASS="emphasis"
>collection</EM
> is a nested table or variable array. This function returns TRUE if the collection is a locator, FALSE if the collection is not a locator. It asserts the WNDS (writes no database state), WNPS (writes no program state), and RNPS (reads no package state) pragmas; thus, it can be used within SQL.</P
><P
CLASS="para"
>At the time of table creation, the user may specify that a collection locator is to be returned when a nested table column or attribute is fetched. Use UTL_COLL.IS_LOCATOR in your PL/SQL program to check whether a nested table attribute or variable is locator based. You might want to do this before performing certain collection operations that could cause a large nested table value to be materialized in memory.</P
><P
CLASS="para"
>The following script demonstrates the use of UTL_COLL.IS_LOCATOR. Its data is based on a true story drawn from the pages of a major Midwestern newspaper. It seems that in a recent election, a candidate pledged firm opposition to an expansion of gambling in the state. After receiving hundreds of thousands of dollars in "contributions" from various gambling forces in that state, however, this candidate (who won the election) changed that position and supported the expansion of gambling venues.</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>/* Filename on companion disk: utlcoll.sql */
CREATE OR REPLACE TYPE legal_bribe_t as TABLE OF NUMBER; 
/ 
 
CREATE OR REPLACE TYPE legal_briber_t AS OBJECT ( 
  source VARCHAR2(100), legal_bribes legal_bribe_t ); 
/ 
 
CREATE TABLE legal_briber OF legal_briber_t 
   NESTED TABLE legal_bribes STORE AS nt_bribes; 

INSERT INTO legal_briber VALUES (
   'RIVERBOAT CASINO INDUSTRY', 
   legal_bribe_t (385584, 632000, 267000)
   ); 

CREATE TABLE legal_briber1 OF legal_briber_t 
   NESTED TABLE legal_bribes STORE AS nt_bribes1 
   RETURN LOCATOR; 
 
INSERT INTO legal_briber1 VALUES (
   'RIVERBOAT CASINO INDUSTRY', 
   legal_bribe_t (385584, 632000, 267000)
   ); 

DECLARE
  pocket_liners legal_bribe_t; 
  pocket_liners1 legal_bribe_t; 
BEGIN 
  SELECT legal_bribes INTO pocket_liners 
    FROM legal_briber 
   WHERE source = 'RIVERBOAT CASINO INDUSTRY'; 
 
  SELECT legal_bribes INTO pocket_liners1 
    FROM legal_briber1 
   WHERE source = 'RIVERBOAT CASINO INDUSTRY'; 
 
  /* Boolean &quot;put line&quot; procedure */
  bpl (UTL_COLL.IS_LOCATOR (pocket_liners)); 
 
  bpl (UTL_COLL.IS_LOCATOR (pocket_liners1)); 
END;
/</PRE
></BLOCKQUOTE
><P
CLASS="para"
>How would you put this function to use in your code? Here is one example:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>/* Filename on companion disk: utlcoll2.sql */
CREATE OR REPLACE FUNCTION getpets_like
   (petlist IN Pettab_t, like_str IN VARCHAR2)
   RETURN pettab_t
IS
   list_to_return Pettab_t := Pettab_t();
   onepet Pet_t;
   counter PLS_INTEGER := 1;
BEGIN
   IF UTL_COLL.IS_LOCATOR (petlist)
   THEN
      FOR theRec IN
         (SELECT VALUE(petList) apet
           FROM TABLE(CAST(petlist AS Pettab_t)) petList
          WHERE petList.name LIKE like_str)
      LOOP
         list_to_return.EXTEND;
         list_to_return(counter) := theRec.apet;
         counter := counter + 1;
      END LOOP;
   ELSE
      FOR i IN 1..petlist.COUNT
      LOOP
         IF petlist(i).name LIKE like_str
         THEN
            list_to_return.EXTEND;
            list_to_return(i) := petlist(i);
         END IF;
      END LOOP;
   END IF;
   RETURN list_to_return;
END;
/</PRE
></BLOCKQUOTE
><P
CLASS="para"
> <A
CLASS="indexterm"
NAME="AUTOID-4405"
></A
> <A
CLASS="indexterm"
NAME="AUTOID-4407"
></A
><A
CLASS="indexterm"
NAME="AUTOID-4409"
></A
>The getpets_like function accepts a list of pets and a filter or "like string." It returns a list of pets whose names match that filter. It uses the UTL_COLL.IS_LOCATOR function to optimize access to the nested table. If you have a locator, then the TABLE CAST operators are used to access the table contents via SQL. Otherwise, a numeric FOR loop is used to access each row individually. For large collections that return a locator, the TABLE CAST approach should be more efficient.</P
></DIV
><DIV
CLASS="htmlnav"
><P
></P
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch07_03.htm#ch07-SECT-3.4"
TITLE="7.3 DBMS_RLS: Implementing Fine-Grained Access Control"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 7.3 DBMS_RLS: Implementing Fine-Grained Access Control"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="book"
HREF="index.htm"
TITLE="Oracle PL/SQL Programming Guide to Oracle 8i Features"
><IMG
SRC="../gifs/txthome.gif"
ALT="Oracle PL/SQL Programming Guide to Oracle 8i Features"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch07_05.htm#ch07-SECT-5.2.1"
TITLE="7.5 LOB Enhancements"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 7.5 LOB Enhancements"
BORDER="0"></A
></TD
></TR
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
>7.3 DBMS_RLS: Implementing Fine-Grained Access Control</TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="index"
HREF="index/idx_0.htm"
TITLE="Book Index"
><IMG
SRC="../gifs/index.gif"
ALT="Book Index"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
>7.5 LOB Enhancements</TD
></TR
></TABLE
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"></DIV
><IMG SRC="../gifs/smnavbar.gif"
USEMAP="#map"
BORDER="0"
ALT="The Oracle Library Navigation">

<P><font size="-1">
<a href="../copyrght.htm#copy">Copyright (c) 2000</a> O'Reilly &amp; Associates. All rights reserved.
</font></P>

<MAP NAME="map">

<AREA SHAPE="RECT"
COORDS="0,0,35,30"
HREF="../index.htm"
ALT="Library Home">

<AREA SHAPE="RECT"
COORDS="40,0,95,30"
HREF="../prog2/index.htm"
ALT="Oracle PL/SQL Programming, 2nd. Ed.">

<AREA SHAPE="RECT"
COORDS="100,0,200,30"
HREF="index.htm"
ALT="Guide to Oracle 8i Features">

<AREA SHAPE="RECT"
COORDS="205,0,245,30"
HREF="../bipack/index.htm"
ALT="Oracle Built-in Packages">

<AREA SHAPE="RECT"
COORDS="250,0,320,30"
HREF="../advprog/index.htm"
ALT="Advanced PL/SQL Programming with Packages">

<AREA SHAPE="RECT"
COORDS="325,0,420,30"
HREF="../webapp/index.htm"
ALT="Oracle Web Applications">

<AREA SHAPE="RECT"
COORDS="425,0,490,30"
HREF="../langpkt/index.htm"
ALT="Oracle PL/SQL Language Pocket Reference">

<AREA SHAPE="RECT"
COORDS="495,0,570,30"
HREF="../bipkt/index.htm"
ALT="Oracle PL/SQL Built-ins Pocket Reference">
</MAP>

</BODY
>
<!-- Mirrored from liso.cs.pusan.ac.kr by HTTrack Website Copier/3.x [XR&CO'2001] -->
</HTML
>
