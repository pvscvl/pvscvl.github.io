<HTML
><HEAD
><TITLE
>[Chapter 7] 7.6 New DBMS_AQ and DBMS_AQADM Features</TITLE
><META
NAME="DC.Creator"
CONTENT="Steven Feuerstein"><META
NAME="DC.Date"
CONTENT="2000-04-29T19:26:40Z"><META
NAME="DC.Format"
CONTENT="text/html"
SCHEME="MIME"><META
NAME="DC.Identifier"
CONTENT="O'Reilly and Associates CDROM-1-56592-675-7E"><META
NAME="DC.Language"
CONTENT="en-US"><META
NAME="DC.Publisher"
CONTENT="O'Reilly &amp; Associates, Inc."><META
NAME="DC.Source"
CONTENT="1-56592-675-7E"
SCHEME="ISBN"><META
NAME="DC.Subject.Keyword"
CONTENT="Oracle 8i Features"><META
NAME="DC.Title"
CONTENT="Oracle PL/SQL Programming Guide to Oracle 8i Features"><META
NAME="DC.Type"
CONTENT="Text.Monograph"><META
NAME="generator"
CONTENT="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><LINK
REL="stylesheet"
TYPE="text/css"
HREF="../style/style1.css"><LINK
REV="made"
HREF="mailto:online-books@oreilly.com"
TITLE="Online Books Comments"><LINK
REL="up"
HREF="ch07_01.htm"
TITLE="7. New and Enhanced Built-in Packages in Oracle8i"><LINK
REL="prev"
HREF="ch07_05.htm#ch07-SECT-5.2.1"
TITLE="7.5 LOB Enhancements"><LINK
REL="next"
HREF="ch07_07.htm#ch07-SECT-7.2"
TITLE="7.7 New DBMS_UTILITY Features"></HEAD
><BODY
><DIV
CLASS="htmlnav"
><H1
><IMG
SRC="gifs/smbanner.gif"
ALT="Oracle PL/SQL Programming Guide to Oracle 8i Features"
USEMAP="#srchmap"
BORDER="0"></H1
><MAP
NAME="srchmap"
><AREA
SHAPE="RECT"
COORDS="0,0,466,65"
HREF="index.htm"
ALT="Oracle PL/SQL Programming Guide to Oracle 8i Features"><AREA
SHAPE="RECT"
COORDS="467,0,514,18"
HREF="jobjects/fsearch.htm"
ALT="Search this book"></MAP
><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch07_05.htm#ch07-SECT-5.2.1"
TITLE="7.5 LOB Enhancements"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 7.5 LOB Enhancements"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><SPAN
CLASS="NAVTITLE"
><A
CLASS="chapter"
REL="up"
HREF="ch07_01.htm"
TITLE="7. New and Enhanced Built-in Packages in Oracle8i"
>Chapter 7<BR>New and Enhanced Built-in Packages in Oracle8i</A
></SPAN
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch07_07.htm#ch07-SECT-7.2"
TITLE="7.7 New DBMS_UTILITY Features"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 7.7 New DBMS_UTILITY Features"
BORDER="0"></A
></TD
></TR
></TABLE
>&nbsp;<HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"></DIV
><DIV
CLASS="sect1"
><H2
CLASS="sect1"
><A
CLASS="title"
NAME="ch07-47203"
>7.6 New DBMS_AQ and DBMS_AQADM Features</A
></H2
><P
CLASS="para"
> <A
CLASS="indexterm"
NAME="ch-07-que_migrate"
></A
> <A
CLASS="indexterm"
NAME="ch-07-AQF"
></A
><A
CLASS="indexterm"
NAME="ch-07-dbmspkg"
></A
><A
CLASS="indexterm"
NAME="AUTOID-4592"
></A
>DBMS_AQ provides an API to the enqueue and dequeue operations in the Oracle Advanced Queuing (AQ) facility. Oracle8<EM
CLASS="emphasis"
>i</EM
> enhances AQ in a number of ways, many reflected in changes in the DBMS_AQ and DBMS_AQADM packages.</P
><BLOCKQUOTE
CLASS="tip"
><P
CLASS="para"
><STRONG
>TIP:</STRONG
> A working knowledge of the Oracle Advanced Queuing facility and the DBMS_AQ and DBMS_AQADM packages is assumed for this section. If you need to learn more, you might want to check out <CITE
CLASS="citetitle"
>Chapter 5</CITE
> of <CITE
CLASS="citetitle"
>Oracle Built-in Packages</CITE
>.</P
></BLOCKQUOTE
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch07-SECT-6.1"
>7.6.1 CREATE_QUEUE_TABLE and MIGRATE_QUEUE_TABLE: Setting Version Compatibility and Queue Migration</A
></H3
><P
CLASS="para"
> <A
CLASS="indexterm"
NAME="ch-07-versioncompat"
></A
> <A
CLASS="indexterm"
NAME="AUTOID-4604"
></A
> <A
CLASS="indexterm"
NAME="ch-07-cqt"
></A
><A
CLASS="indexterm"
NAME="ch-07-mqtdaqp"
></A
><A
CLASS="indexterm"
NAME="ch-07-queuemigset"
></A
>Oracle has changed the security model for Oracle AQ in Oracle8<EM
CLASS="emphasis"
>i</EM
>. You can now set security at the system and queue level (discussed in the next section). These features are only available, however, for AQ 8.1-style queues. </P
><P
CLASS="para"
>To create queues in Oracle 8.1 that can make use of the new security features, you must set the <EM
CLASS="emphasis"
>compatible</EM
> parameter in DBMS_AQADM.CREATE_QUEUE_TABLE to `8.1' or above. Here is the new, expanded header:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>PROCEDURE DBMS_AQADM.CREATE_QUEUE_TABLE (
   queue_table        IN VARCHAR2,
   queue_payload_type IN VARCHAR2,
   storage_clause     IN VARCHAR2       DEFAULT NULL,
   sort_list          IN VARCHAR2       DEFAULT NULL,
   multiple_consumers IN BOOLEAN        DEFAULT FALSE,
   message_grouping   IN BINARY_INTEGER DEFAULT NONE,
   comment            IN VARCHAR2       DEFAULT NULL,
   auto_commit        IN BOOLEAN        DEFAULT TRUE,
   primary_instance   IN BINARY_INTEGER DEFAULT 0, 
   secondary_instance IN BINARY_INTEGER DEFAULT 0,
   compatible         IN VARCHAR2       DEFAULT NULL);</PRE
></BLOCKQUOTE
><P
CLASS="para"
>The first eight parameters are the same as in Oracle 8.0. The final three parameters have the meanings shown here:</P
><DL
CLASS="variablelist"
><DT
CLASS="term"
>primary_instance</DT
><DD
CLASS="listitem"
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="AUTOID-4622"
></A
>The primary owner of the queue table. This instance performs the queue monitor scheduling and propagation for the queues in the queue table. The default is 0, which means scheduling and propagation will be performed in any available instance.</P
></DD
><DT
CLASS="term"
>secondary_instance</DT
><DD
CLASS="listitem"
><P
CLASS="para"
> <A
CLASS="indexterm"
NAME="AUTOID-4628"
></A
> The queue table fails over to this instance if the primary instance is not available. </P
></DD
><DT
CLASS="term"
>compatible</DT
><DD
CLASS="listitem"
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="AUTOID-4634"
></A
>The lowest database version with which the queue table is compatible: currently `8.0' or `8.1'. The default is `8.0'.</P
></DD
></DL
><P
CLASS="para"
>If you want to define a queue table with 8.1 compatibility, you will need to make a call like this:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>BEGIN
   DBMS_AQADM.CREATE_QUEUE_TABLE (
      'workflow',
       'workflow_ot',
      compatible =&gt; '8.1');
END;</PRE
></BLOCKQUOTE
><P
CLASS="para"
>I have used named notation to skip over all the intervening parameters (thereby accepting their default values) and set the compatibility level.</P
><P
CLASS="para"
>If you want to use the AQ 8.1 security features on a queue that was defined originally in an 8.0 database, you must convert the queue table to 8.1 compatibility by executing DBMS_AQADM.MIGRATE_QUEUE_TABLE on the queue table. Here is the header for this procedure:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>PROCEDURE DBMS_AQADM.MIGRATE_QUEUE_TABLE( 
   queue_table IN VARCHAR2, 
   compatible  IN VARCHAR2) </PRE
></BLOCKQUOTE
><P
CLASS="para"
>where <EM
CLASS="emphasis"
>queue_table</EM
> is the name of the queue table to be migrated, and <EM
CLASS="emphasis"
>compatible</EM
> indicates the direction of the migration, as shown in the following table.</P
><TABLE
CLASS="informaltable"
BORDER="1"
CELLPADDING="3"
><THEAD
CLASS="thead"
><TR
CLASS="row"
VALIGN="TOP"
><TH
CLASS="entry"
ALIGN="LEFT"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>Compatible Value</P
></TH
><TH
CLASS="entry"
ALIGN="LEFT"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>Meaning</P
></TH
></TR
></THEAD
><TBODY
CLASS="tbody"
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>`8.0'</P
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>Downgrade an 8.1 queue table to be 8.0 compatible.</P
></TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>`8.1'</P
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>Upgrade an 8.0 queue table to be 8.1 compatible.</P
></TD
></TR
></TBODY
></TABLE
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch07-SECT-6.2"
>7.6.2 System-Level Access Control</A
></H3
><P
CLASS="para"
> <A
CLASS="indexterm"
NAME="AUTOID-4666"
></A
> <A
CLASS="indexterm"
NAME="AUTOID-4668"
></A
> <A
CLASS="indexterm"
NAME="AUTOID-4670"
></A
><A
CLASS="indexterm"
NAME="AUTOID-4672"
></A
><A
CLASS="indexterm"
NAME="AUTOID-4674"
></A
>Back in Oracle 8.0, administrators granted access to AQ operations by assigning roles that provided execution privileges on the AQ procedures. There was no security at the database object level, which meant that in Oracle 8.0 a user with the AQ_USER_ROLE could enqueue and dequeue to <EM
CLASS="emphasis"
>any</EM
> queue in the system. This is obviously inadequate, and in Oracle8<EM
CLASS="emphasis"
>i</EM
>, AQ offers a much more granular approach to security. An owner of an 8.1-compatible queue can now grant or revoke queue-level privileges on the queue (described in the " section). DBAs can grant or revoke new AQ system-level privileges to any database user. DBAs can also make any database user an AQ administrator.</P
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="AUTOID-4680"
></A
><A
CLASS="indexterm"
NAME="AUTOID-4682"
></A
><A
CLASS="indexterm"
NAME="AUTOID-4684"
></A
>The grant and revoke operations for AQ are not performed through the GRANT and REVOKE DDL statements. Instead, the DBMS_AQADM package provides a set of procedures. Some of these procedures were present in Oracle 8.0, but with limited capabilities.</P
><DIV
CLASS="sect3"
><H4
CLASS="sect3"
><A
CLASS="title"
NAME="ch07-SECT-6.2.1"
>7.6.2.1 GRANT_SYSTEM_PRIVILEGE: Granting system-level privileges</A
></H4
><P
CLASS="para"
>To set a system-level privilege, call the following procedure:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>PROCEDURE DBMS_AQADM.GRANT_SYSTEM_PRIVILEGE (
   privilege    IN VARCHAR2,
   grantee      IN VARCHAR2,
   admin_option IN BOOLEAN := FALSE);</PRE
></BLOCKQUOTE
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="AUTOID-4691"
></A
><A
CLASS="indexterm"
NAME="AUTOID-4693"
></A
>where <EM
CLASS="emphasis"
>privilege</EM
> is the AQ system privilege to grant, <EM
CLASS="emphasis"
>grantee</EM
> is the user or role (including PUBLIC) to which the privilege is granted, and <EM
CLASS="emphasis"
>admin_option</EM
> controls whether the grantee is allowed to use this procedure to grant the system privilege to other users or roles. The options for <EM
CLASS="emphasis"
>privilege</EM
> are shown here: </P
><DL
CLASS="variablelist"
><DT
CLASS="term"
>ENQUEUE_ANY</DT
><DD
CLASS="listitem"
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="AUTOID-4704"
></A
>Users granted this privilege are allowed to enqueue messages to any queues in the database. </P
></DD
><DT
CLASS="term"
>DEQUEUE_ANY</DT
><DD
CLASS="listitem"
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="AUTOID-4710"
></A
>Users granted this privilege are allowed to dequeue messages from any queues in the database. </P
></DD
><DT
CLASS="term"
>MANAGE_ANY</DT
><DD
CLASS="listitem"
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="AUTOID-4716"
></A
>Users granted this privilege are allowed to run DBMS_AQADM calls on any schemas in the database. </P
></DD
></DL
><BLOCKQUOTE
CLASS="tip"
><P
CLASS="para"
><STRONG
>TIP:</STRONG
> <A
CLASS="indexterm"
NAME="AUTOID-4720"
></A
>Immediately after database installation, only SYS and SYSTEM have the privileges to run this program successfully. If you do not want to manage AQ from either of these schemas, you will want to grant MANAGE_ANY with the <EM
CLASS="emphasis"
>admin_option</EM
> parameter set to TRUE to another schema (such as AQADMIN) and then work from there for future AQ administrative activities.</P
></BLOCKQUOTE
></DIV
><DIV
CLASS="sect3"
><H4
CLASS="sect3"
><A
CLASS="title"
NAME="ch07-SECT-6.2.2"
>7.6.2.2 REVOKE_SYSTEM_PRIVILEGE: Revoking system-level privileges</A
></H4
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="ch-07-revsyssev"
></A
>You can revoke system privileges with the following procedure:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>PROCEDURE DBMS_AQADM.REVOKE_SYSTEM_PRIVILEGE (
   privilege IN VARCHAR2,
   grantee   IN VARCHAR2);</PRE
></BLOCKQUOTE
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="AUTOID-4730"
></A
>where the parameters have the same meanings as for the GRANT_SYSTEM_PRIVILEGE procedure.</P
></DIV
><DIV
CLASS="sect3"
><H4
CLASS="sect3"
><A
CLASS="title"
NAME="ch07-SECT-6.2.3"
>7.6.2.3 Example</A
></H4
><P
CLASS="para"
>Let's take a look at the steps a DBA will commonly take to set up a schema as an AQ administrator. First, create the user (I'll call it "WFADM" for "workflow administration") and grant the roles needed to function in the database and work as an AQ administrator:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>CREATE USER WFADM IDENTIFIED BY WFADM; 
GRANT CONNECT, RESOURCE, aq_administrator_role TO WFADM; </PRE
></BLOCKQUOTE
><P
CLASS="para"
>Next, make sure that this schema can execute both of the AQ packages:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>GRANT EXECUTE ON dbms_aq TO WFADM; 
GRANT EXECUTE ON dbms_aqadm TO WFADM; </PRE
></BLOCKQUOTE
><P
CLASS="para"
>Finally, give this schema the ability to work with any queues in the database:<A
CLASS="indexterm"
NAME="AUTOID-4739"
></A
></P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>BEGIN
    DBMS_AQADM.GRANT_SYSTEM_PRIVILEGE (
       'ENQUEUE_ANY', 'WFADM', FALSE); 
    DBMS_AQADM.GRANT_SYSTEM_PRIVILEGE (
       'DEQUEUE_ANY', 'WFADM', FALSE);
END;
/</PRE
></BLOCKQUOTE
></DIV
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch07-19024"
>7.6.3 Queue-Level Access Control</A
></H3
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="ch-07-gqpp"
></A
>This section describes how you can grant and revoke privileges at the queue level.</P
><DIV
CLASS="sect3"
><H4
CLASS="sect3"
><A
CLASS="title"
NAME="ch07-SECT-6.3.1"
>7.6.3.1 GRANT_QUEUE_PRIVILEGE: Granting queue-level privileges</A
></H4
><P
CLASS="para"
>To set a queue-level privilege, call the following procedure:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>PROCEDURE DBMS_AQADM.GRANT_QUEUE_PRIVILEGE (
   privilege    IN VARCHAR2,
   queue_name   IN VARCHAR2,
   grantee      IN VARCHAR2,
   admin_option IN BOOLEAN := FALSE);</PRE
></BLOCKQUOTE
><P
CLASS="para"
>where <EM
CLASS="emphasis"
>privilege</EM
> is the AQ system privilege to grant, <EM
CLASS="emphasis"
>queue_name</EM
> is the name of the queue on which the grant is to be made, <EM
CLASS="emphasis"
>grantee</EM
> is the user or role (including PUBLIC) to which the privilege is granted, and <EM
CLASS="emphasis"
>admin_option</EM
> controls whether the grantee is allowed to use this procedure to grant the privilege to other users or roles. </P
><P
CLASS="para"
>The options for <EM
CLASS="emphasis"
>privilege</EM
> are shown here: </P
><DL
CLASS="variablelist"
><DT
CLASS="term"
>ENQUEUE</DT
><DD
CLASS="listitem"
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="AUTOID-4762"
></A
>Users granted this privilege are allowed to enqueue messages to this queue. </P
></DD
><DT
CLASS="term"
>DEQUEUE</DT
><DD
CLASS="listitem"
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="AUTOID-4768"
></A
>Users granted this privilege are allowed to dequeue messages from this queue. </P
></DD
><DT
CLASS="term"
>ALL</DT
><DD
CLASS="listitem"
><P
CLASS="para"
>Both ENQUEUE and DEQUEUE</P
></DD
></DL
></DIV
><DIV
CLASS="sect3"
><H4
CLASS="sect3"
><A
CLASS="title"
NAME="ch07-SECT-6.3.2"
>7.6.3.2 REVOKE_QUEUE_PRIVILEGE: Revoking queue-level privileges</A
></H4
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="AUTOID-4777"
></A
>You can revoke queue privileges with the following procedure:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>PROCEDURE DBMS_AQADM.REVOKE_QUEUE_PRIVILEGE (
   privilege  IN VARCHAR2,
   queue_name IN VARCHAR2,
   grantee    IN VARCHAR2);</PRE
></BLOCKQUOTE
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="AUTOID-4781"
></A
>where the parameters have the same meaning as for the GRANT_QUEUE_PRIVILEGE procedure.</P
></DIV
><DIV
CLASS="sect3"
><H4
CLASS="sect3"
><A
CLASS="title"
NAME="ch07-SECT-6.3.3"
>7.6.3.3 Example</A
></H4
><P
CLASS="para"
>Queue-level grants are crucial when you want to set up individual schemas to be able to only enqueue or only dequeue for specific queues. Suppose, for example, that I am constructing a system to support universal health care in the United States. I want doctors to be able to enqueue a record of services performed, but I don't want them to be able to dequeue that information. I want my administrators to be able to dequeue that information, but not to enqueue it. I might execute a block like this:<A
CLASS="indexterm"
NAME="AUTOID-4786"
></A
></P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>BEGIN
   DBMS_AQADM.GRANT_QUEUE_PRIVILEGE (
      'DEQUEUE', 'FEELGOOD_service_record_q', 'Doctor_Role', FALSE); 
 
   DBMS_AQADM.GRANT_QUEUE_PRIVILEGE(
      'ENQUEUE', 'FEELGOOD_service_record_q', 'Admin_Role', FALSE);
END;
/</PRE
></BLOCKQUOTE
></DIV
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch07-SECT-6.4"
>7.6.4 Improved Publish/Subscribe Support</A
></H3
><P
CLASS="para"
>Oracle AQ adds various features in Oracle 8.1 that allow you to develop an application based on a publish/subscribe model. This model allows different components of the application to communicate with each other in a very flexible way, based on an important principle: publisher application components interact with subscriber application components only through messages and message content. </P
><P
CLASS="para"
>This means that publisher applications don't have to know about, or ever have to manage, recipient information. They "publish" their messages by putting information in queues. They don't worry about who is going to receive it, when, and how. The subscriber applications receive messages through the dequeue operation, based solely on the content of those messages. The identity of the publisher does not play a role in determining the enqueue operation, and the identities and number of subscriber applications can be modified without affecting the messages.</P
><P
CLASS="para"
>This basic approach was available in Oracle 8.0, when the AQ facility was first introduced. Oracle8<EM
CLASS="emphasis"
>i</EM
> significantly improves the ability to implement a publish/subscribe model with the following features:</P
><UL
CLASS="itemizedlist"
><LI
CLASS="listitem"
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="ch-07-rulebased"
></A
>Rule-based subscribers</P
></LI
><LI
CLASS="listitem"
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="AUTOID-4801"
></A
>The LISTEN procedure</P
></LI
><LI
CLASS="listitem"
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="AUTOID-4805"
></A
><A
CLASS="indexterm"
NAME="AUTOID-4807"
></A
>Notification capabilities, available currently only through OCI (the Oracle Call Interface) and not through PL/SQL</P
></LI
></UL
><P
CLASS="para"
>The following sections focus on the new PL/SQL features&nbsp;-- rule-based subscribers and the new LISTEN procedure.</P
><DIV
CLASS="sect3"
><H4
CLASS="sect3"
><A
CLASS="title"
NAME="ch07-SECT-6.4.1"
>7.6.4.1 Rule-based subscribers</A
></H4
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="AUTOID-4813"
></A
>Oracle AQ has always let you define subscriber lists and add subscribers with the DBMS_AQADM.ADD_SUBSCRIBER procedure. The 8.1 implementation adds another parameter to this procedure, allowing you to associate a <EM
CLASS="emphasis"
>rule</EM
> with a subscriber. Here is the new procedure header:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>PROCEDURE DBMS_AQADM.ADD_SUBSCRIBER (
   queue_name  IN  VARCHAR2,
   subscriber  IN  sys.aq$_agent,
   rule        IN  VARCHAR2 DEFAULT NULL);</PRE
></BLOCKQUOTE
><P
CLASS="para"
>where <EM
CLASS="emphasis"
>queue_name</EM
> is the name of the queue in which the subscriber is interested, <EM
CLASS="emphasis"
>subscriber</EM
> is an object instance of type SYS.AQ$_AGENT that identifies the agent to be added to the subscription list, and <EM
CLASS="emphasis"
>rule</EM
> is a string that contains a conditional expression.</P
><P
CLASS="para"
>The rule must be a string that is evaluated dynamically to a Boolean value: TRUE, FALSE, or NULL. The string may contain references to message properties (fields in the DBMS_AQ.MESSAGE_PROPERTIES_T record type), to attributes of the queue's payload (object payloads only, not RAW) and to PL/SQL functions (either built-in or your own).</P
><P
CLASS="para"
>Let's go over some rules and then look at some examples. The rule must conform to the following guidelines:</P
><UL
CLASS="itemizedlist"
><LI
CLASS="listitem"
><P
CLASS="para"
>The only message properties currently supported are PRIORITY and CORRID (correlation identifier).</P
></LI
><LI
CLASS="listitem"
><P
CLASS="para"
>If you wish to reference attributes of the object payload in a queue, you must prefix each attribute with a qualifier of TAB.USER_DATA (a hardcoded string).</P
></LI
><LI
CLASS="listitem"
><P
CLASS="para"
>The maximum length of the <EM
CLASS="emphasis"
>rule</EM
> parameter is 4000 characters.</P
></LI
><LI
CLASS="listitem"
><P
CLASS="para"
>Any PL/SQL functions you reference in the rule must be callable from within the WHERE clause of a SQL statement. </P
></LI
><LI
CLASS="listitem"
><P
CLASS="para"
>If you need to surround a literal with single quotes inside the rule, then you must use two single quotes in sequence. </P
></LI
></UL
><P
CLASS="para"
>The following examples should clarify these rules and their application:</P
><OL
CLASS="orderedlist"
><LI
CLASS="listitem"
><P
CLASS="para"
>Add a subscriber to the War Criminals Prosecution queue who is interested only in dequeuing messages of top priority:</P
></LI
></OL
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>DECLARE
   most_urgent SYS.AQ$_AGENT :=
      SYS.AQ$_AGENT ('ChiefProsecutor', 'Cases_queue');
BEGIN
   DBMS_AQADM.ADD_SUBSCRIBER (
      'Cases_queue', most_urgent, 'PRIORITY = 1');
END;</PRE
></BLOCKQUOTE
><OL
CLASS="orderedlist"
START="2"
><LI
CLASS="listitem"
><P
CLASS="para"
>The War Crimes Tribunal has just hired a junior prosecutor to handle cases involving atrocities in Latin America. The following block of code ensures that this agent will only handle low-priority cases from that region. Notice the use of multiple single quotes to ensure that the literal for region name is passed through properly:</P
></LI
></OL
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>DECLARE
   back_burner SYS.AQ$_AGENT :=
      SYS.AQ$_AGENT ('JuniorProsecutor', 'Cases_queue');
BEGIN
   DBMS_AQADM.ADD_SUBSCRIBER (
      'Cases_queue', back_burner, 
      'PRIORITY &gt; 3 AND CORRID = ''LATIN AMERICA''');
END;_</PRE
></BLOCKQUOTE
><OL
CLASS="orderedlist"
START="3"
><LI
CLASS="listitem"
><P
CLASS="para"
>Big changes in the year 2015! Even as the fast food chains come to dominate the delivery of food to the world's population, the percentage of humans living in hunger increases. A worldwide protest movement rises up&nbsp;-- and the three biggest chains are purchased by the United Nations. Now all that technology and food delivery capability will be used directly to make sure that no one in the world starves. But wait&nbsp;-- we need to set up subscribers to receive orders for food in their specific regions. So I set up an object type to be used as the queue payload:</P
></LI
></OL
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>CREATE TYPE food_order_t AS OBJECT (
   country VARCHAR2(100),
   region VARCHAR2(100),
   child_population NUMBER,
   adult_population NUMBER
   );</PRE
></BLOCKQUOTE
><P
CLASS="para"
>I can now define a subscriber in the North American Midwest who is responsible for the distribution of food within an area that has a child population of more than 10,000:<A
CLASS="indexterm"
NAME="AUTOID-4849"
></A
></P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>DECLARE
   lotsa_kids SYS.AQ$_AGENT  :=
      SYS.AQ$_AGENT ('FoodManager', 'Food_distribution_queue');
BEGIN
   DBMS_AQADM.ADD_SUBSCRIBER (
      'Food_distribution_queue', 
      lotsa_kids, 
      'TAB.USER_DATA.country = ''USER'' AND
       TAB.USER_DATA.region = ''MIDWEST'' AND
       TAB.USER_DATA.child_population &gt; 10000');
END;_</PRE
></BLOCKQUOTE
></DIV
><DIV
CLASS="sect3"
><H4
CLASS="sect3"
><A
CLASS="title"
NAME="ch07-SECT-6.4.2"
>7.6.4.2 LISTEN: Listening for messages</A
></H4
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="ch-07-dequeue"
></A
><A
CLASS="indexterm"
NAME="ch-07-listprod"
></A
>Oracle8<EM
CLASS="emphasis"
>i</EM
> adds a procedure to DBMS_AQ that you can use to listen for the enqueuing of a message to which one or more agents have subscribed. The header for this program is as follows:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>PROCEDURE DBMS_AQ.LISTEN (
   agent_list IN  AQ$_AGENT_LIST_T,
   wait       IN  BINARY_INTEGER DEFAULT DBMS_AQ.FOREVER, 
   agent      OUT SYS.AQ$_AGENT);</PRE
></BLOCKQUOTE
><P
CLASS="para"
>where <EM
CLASS="emphasis"
>agent_list</EM
> is an index-by table defined in DBMS_AQ as follows:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>TYPE DBMS_AQ.AQ$_AGENT_LIST_T IS TABLE of AQ$_AGENT 
    INDEXED BY BINARY_INTEGER;</PRE
></BLOCKQUOTE
><P
CLASS="para"
><EM
CLASS="emphasis"
>wait</EM
> is the number of seconds the LISTEN procedure will wait or block as it waits for a message (the default is forever), and <EM
CLASS="emphasis"
>agent</EM
> is the value returned by the procedure: an object. </P
><P
CLASS="para"
> <A
CLASS="indexterm"
NAME="AUTOID-4867"
></A
> The DBMS_AQ.LISTEN procedure is very similar to DBMS_ALERT.WAITANY. You can call the procedure to monitor one or more queues, which are identified by the address field of the agent object (only local queues are supported as addresses). When you call DBMS_AQ.LISTEN, your session will be blocked until a message is available in one of the queues, or until the wait time expires.</P
><P
CLASS="para"
>If a message is available for consumption on one of the queues indicated by the agents in <EM
CLASS="emphasis"
>agent_list</EM
>, then that address will be returned in the <EM
CLASS="emphasis"
>agent</EM
> OUT parameter. A successful completion of this call to DBMS_AQ.LISTEN does not, however, dequeue the message. Once you retrieve the agent, you must obtain the queue name and then issue an explicit DBMS_AQ.DEQUEUE call against that queue to get the payload. </P
><P
CLASS="para"
>If there are no messages found when the wait time expires in a call to DBMS_AQ.LISTEN, then the following error is raised:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>ORA-25254: time-out in LISTEN while waiting for a message</PRE
></BLOCKQUOTE
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="AUTOID-4875"
></A
>Let's look at an example. All the members of my family love ice cream and we each have our own favorite flavor. We have installed Oracle8<EM
CLASS="emphasis"
>i</EM
> on our local ice cream truck, along with a cellular modem. Whenever Sally, who drives the truck, is coming into our neighborhood, she will queue up messages indicating the flavors available that day. Every hot summer afternoon, we issue a call to DBMS_AQ.LISTEN and wait to hear who will have first (and hopefully not only) dibs on the ice cream. So let's walk through the code needed to accomplish this task (all to be found in the <I
CLASS="filename"
>aqlisten.sql</I
> file on the companion disk).</P
><P
CLASS="para"
>Here is the payload for my queue:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>/* Filename on companion disk: aqlisten.sql */
CREATE TYPE ice_cream_t IS OBJECT ( 
   flavor VARCHAR2(30),
   calories INTEGER);
/</PRE
></BLOCKQUOTE
><P
CLASS="para"
>Then I create a package to hold the queue-related data structures and also initialize my queue. The package specification contains a named constant for the queue name and the list of subscribers I will use in my call to DBMS_AQ.LISTEN:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>CREATE OR REPLACE PACKAGE aqlisten
IS
   qname CONSTANT CHAR(15) := 'ice_cream_queue';
   tell_us DBMS_AQ.AQ$_AGENT_LIST_T;
END;
/</PRE
></BLOCKQUOTE
><P
CLASS="para"
>The package body defines a procedure that I use to define subscribers for my queue and also build the listen list:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>PROCEDURE subscribe_me (
   name IN VARCHAR2, flavor IN VARCHAR2)
IS 
   tell_me SYS.AQ$_AGENT
       := SYS.AQ$_AGENT (name, qname, NULL);
BEGIN
   DBMS_AQADM.ADD_SUBSCRIBER (
      qname,
      tell_me,
      'TAB.USER_DATA.flavor = ''' || flavor || '''');

   tell_us (NVL(tell_us.LAST,0)+1) := tell_me;
END;</PRE
></BLOCKQUOTE
><P
CLASS="para"
>Notice that each subscriber has a rule associated with it: his or her favorite flavor of ice cream. The assignment to the tell_us index-by table always adds to the end of the table.</P
><P
CLASS="para"
>There is nothing else in the package body but the initialization section. This section contains code that will be executed for each session the first time that session references any element in the package. In the case of aqlisten, there are only two ways to reference it: use aqlisten.qname or the aqlisten.tell_us table. The first step in the initialization is to clean out any old versions of my queue table and queue:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>DBMS_AQADM.STOP_QUEUE (qname, TRUE, TRUE, FALSE);
DBMS_AQADM.DROP_QUEUE (qname);
DBMS_AQADM.DROP_QUEUE_TABLE ('ice_cream_qtable');</PRE
></BLOCKQUOTE
><P
CLASS="para"
>Then I can create the elements anew, making sure that they are defined as I need them for the example:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>DBMS_AQADM.CREATE_QUEUE_TABLE (
   queue_table =&gt; 'ice_cream_qtable',
   queue_payload_type =&gt; 'ice_cream_t',
   multiple_consumers =&gt; TRUE,
   compatible =&gt; '8.1'); 

DBMS_AQADM.CREATE_QUEUE (qname, 'ice_cream_qtable');

DBMS_AQADM.START_QUEUE (qname);</PRE
></BLOCKQUOTE
><P
CLASS="para"
>Notice that I specify the ice cream queue table as an 8.1 queue table able to support multiple consumers. Great! Now I can define my subscribers and their favorite flavors and confirm the number of subscribers in my list:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>subscribe_me ('Steven', 'ROCKY ROAD');
subscribe_me ('Veva', 'BUTTER PECAN');
subscribe_me ('Chris', 'VANILLA');
subscribe_me ('Eli', 'MINT CHOCOLATE CHIP');

DBMS_OUTPUT.PUT_LINE (tell_us.COUNT || ' subscribers in tell_us.');</PRE
></BLOCKQUOTE
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="AUTOID-4893"
></A
>Now I am ready to try it out. I create a procedure that allows me to enqueue a particular flavor and then listen for the corresponding agent. I then use DBMS_OUTPUT to confirm the agent by name and queue:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>CREATE OR REPLACE PROCEDURE tasty_treat_time (
   flavor IN VARCHAR2)
IS
   tell_me SYS.AQ$_AGENT;
   queueOpts DBMS_AQ.ENQUEUE_OPTIONS_T;
   msgProps DBMS_AQ.MESSAGE_PROPERTIES_T;
   mmmmmm ice_cream_t;
   msgid RAW(16);   
BEGIN
   queueopts.visibility := DBMS_AQ.IMMEDIATE;

   /* Populate the object. */
   mmmmmm := ice_cream_t (flavor, 10);

   DBMS_AQ.ENQUEUE (
      aqlisten.qname, queueOpts, msgProps, mmmmmm, msgid);
      
   DBMS_AQ.LISTEN (aqlisten.tell_us, 0, tell_me);
   
   DBMS_OUTPUT.PUT_LINE (
      'Message for ' || tell_me.name || 
      ' in queue ' || tell_me.address);
END;
/  </PRE
></BLOCKQUOTE
><P
CLASS="para"
>When I run this script I see the following output: </P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>BEGIN   
   tasty_treat_time ('MINT CHOCOLATE CHIP');
   tasty_treat_time ('VANILLA');
   tasty_treat_time ('STRAWBERRY');
EXCEPTION
   WHEN OTHERS
   THEN
      DBMS_OUTPUT.PUT_LINE (SQLERRM);   
END;
/

Message for ELI in queue SCOTT.ICE_CREAM_QUEUE
Message for CHRIS in queue SCOTT.ICE_CREAM_QUEUE
ORA-24033: no recipients for message</PRE
></BLOCKQUOTE
><BLOCKQUOTE
CLASS="tip"
><P
CLASS="para"
><STRONG
>TIP:</STRONG
> If the address (queue) for an agent is a multiconsumer queue, then you must supply the agent name. If the queue is a single-consumer queue, then you must leave the agent name unspecified or NULL.<A
CLASS="indexterm"
NAME="AUTOID-4900"
></A
><A
CLASS="indexterm"
NAME="AUTOID-4901"
></A
><A
CLASS="indexterm"
NAME="AUTOID-4902"
></A
><A
CLASS="indexterm"
NAME="AUTOID-4903"
></A
><A
CLASS="indexterm"
NAME="AUTOID-4904"
></A
><A
CLASS="indexterm"
NAME="AUTOID-4905"
></A
><A
CLASS="indexterm"
NAME="AUTOID-4906"
></A
> <A
CLASS="indexterm"
NAME="AUTOID-4907"
></A
> <A
CLASS="indexterm"
NAME="AUTOID-4908"
></A
> </P
></BLOCKQUOTE
></DIV
></DIV
></DIV
><DIV
CLASS="htmlnav"
><P
></P
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch07_05.htm#ch07-SECT-5.2.1"
TITLE="7.5 LOB Enhancements"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 7.5 LOB Enhancements"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="book"
HREF="index.htm"
TITLE="Oracle PL/SQL Programming Guide to Oracle 8i Features"
><IMG
SRC="../gifs/txthome.gif"
ALT="Oracle PL/SQL Programming Guide to Oracle 8i Features"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch07_07.htm#ch07-SECT-7.2"
TITLE="7.7 New DBMS_UTILITY Features"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 7.7 New DBMS_UTILITY Features"
BORDER="0"></A
></TD
></TR
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
>7.5 LOB Enhancements</TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="index"
HREF="index/idx_0.htm"
TITLE="Book Index"
><IMG
SRC="../gifs/index.gif"
ALT="Book Index"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
>7.7 New DBMS_UTILITY Features</TD
></TR
></TABLE
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"></DIV
><IMG SRC="../gifs/smnavbar.gif"
USEMAP="#map"
BORDER="0"
ALT="The Oracle Library Navigation">

<P><font size="-1">
<a href="../copyrght.htm#copy">Copyright (c) 2000</a> O'Reilly &amp; Associates. All rights reserved.
</font></P>

<MAP NAME="map">

<AREA SHAPE="RECT"
COORDS="0,0,35,30"
HREF="../index.htm"
ALT="Library Home">

<AREA SHAPE="RECT"
COORDS="40,0,95,30"
HREF="../prog2/index.htm"
ALT="Oracle PL/SQL Programming, 2nd. Ed.">

<AREA SHAPE="RECT"
COORDS="100,0,200,30"
HREF="index.htm"
ALT="Guide to Oracle 8i Features">

<AREA SHAPE="RECT"
COORDS="205,0,245,30"
HREF="../bipack/index.htm"
ALT="Oracle Built-in Packages">

<AREA SHAPE="RECT"
COORDS="250,0,320,30"
HREF="../advprog/index.htm"
ALT="Advanced PL/SQL Programming with Packages">

<AREA SHAPE="RECT"
COORDS="325,0,420,30"
HREF="../webapp/index.htm"
ALT="Oracle Web Applications">

<AREA SHAPE="RECT"
COORDS="425,0,490,30"
HREF="../langpkt/index.htm"
ALT="Oracle PL/SQL Language Pocket Reference">

<AREA SHAPE="RECT"
COORDS="495,0,570,30"
HREF="../bipkt/index.htm"
ALT="Oracle PL/SQL Built-ins Pocket Reference">
</MAP>

</BODY
>
<!-- Mirrored from liso.cs.pusan.ac.kr by HTTrack Website Copier/3.x [XR&CO'2001] -->
</HTML
>
