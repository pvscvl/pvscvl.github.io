<HTML
><HEAD
><TITLE
>[Chapter 10] 10.2 Calling Packaged Functions in SQL</TITLE
><META
NAME="DC.Creator"
CONTENT="Steven Feuerstein"><META
NAME="DC.Date"
CONTENT="2000-04-29T19:27:47Z"><META
NAME="DC.Format"
CONTENT="text/html"
SCHEME="MIME"><META
NAME="DC.Identifier"
CONTENT="O'Reilly and Associates CDROM-1-56592-675-7E"><META
NAME="DC.Language"
CONTENT="en-US"><META
NAME="DC.Publisher"
CONTENT="O'Reilly &amp; Associates, Inc."><META
NAME="DC.Source"
CONTENT="1-56592-675-7E"
SCHEME="ISBN"><META
NAME="DC.Subject.Keyword"
CONTENT="Oracle 8i Features"><META
NAME="DC.Title"
CONTENT="Oracle PL/SQL Programming Guide to Oracle 8i Features"><META
NAME="DC.Type"
CONTENT="Text.Monograph"><META
NAME="generator"
CONTENT="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><LINK
REL="stylesheet"
TYPE="text/css"
HREF="../style/style1.css"><LINK
REV="made"
HREF="mailto:online-books@oreilly.com"
TITLE="Online Books Comments"><LINK
REL="up"
HREF="ch10_01.htm"
TITLE="10. More Goodies for Oracle8i PL/SQL Developers"><LINK
REL="prev"
HREF="ch10_01.htm"
TITLE="10.1 The NOCOPY Parameter Mode Hint"><LINK
REL="next"
HREF="ch10_03.htm#ch10-SECT-3.2"
TITLE="10.3 SQL99 Compliance"></HEAD
><BODY
><DIV
CLASS="htmlnav"
><H1
><IMG
SRC="gifs/smbanner.gif"
ALT="Oracle PL/SQL Programming Guide to Oracle 8i Features"
USEMAP="#srchmap"
BORDER="0"></H1
><MAP
NAME="srchmap"
><AREA
SHAPE="RECT"
COORDS="0,0,466,65"
HREF="index.htm"
ALT="Oracle PL/SQL Programming Guide to Oracle 8i Features"><AREA
SHAPE="RECT"
COORDS="467,0,514,18"
HREF="jobjects/fsearch.htm"
ALT="Search this book"></MAP
><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch10_01.htm"
TITLE="10.1 The NOCOPY Parameter Mode Hint"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 10.1 The NOCOPY Parameter Mode Hint"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><SPAN
CLASS="NAVTITLE"
><A
CLASS="chapter"
REL="up"
HREF="ch10_01.htm"
TITLE="10. More Goodies for Oracle8i PL/SQL Developers"
>Chapter 10<BR>More Goodies for Oracle8i PL/SQL Developers</A
></SPAN
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch10_03.htm#ch10-SECT-3.2"
TITLE="10.3 SQL99 Compliance"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 10.3 SQL99 Compliance"
BORDER="0"></A
></TD
></TR
></TABLE
>&nbsp;<HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"></DIV
><DIV
CLASS="sect1"
><H2
CLASS="sect1"
><A
CLASS="title"
NAME="ch10-34291"
>10.2 Calling Packaged Functions in SQL</A
></H2
><P
CLASS="para"
>In Oracle8<EM
CLASS="emphasis"
>i</EM
>, Oracle has made changes in the way you define programs and assert their <EM
CLASS="emphasis"
>purity levels</EM
>, or lack of side effects.</P
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch10-SECT-2.1"
>10.2.1 RESTRICT_REFERENCES Pragma</A
></H3
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="ch-10-resrefp"
></A
>Back in Oracle 7.3, PL/SQL offered a new pragma (compiler directive) called RESTRICT_REFERENCES. This pragma was used to assert to the PL/SQL compiler the purity level of a packaged procedure or function. The RESTRICT_REFERENCES pragma had to be included in the package specification if you were to use that program inside a SQL statement (directly or indirectly).</P
><P
CLASS="para"
>This pragma has always been a major headache for PL/SQL developers, and as of Oracle 8.1 it is no longer required. The SQL engine will determine at the time you run your SQL statement whether or not the function call is valid. Many of the restrictions on how and when you can use functions in SQL have been relaxed, but the following rules still apply:</P
><UL
CLASS="itemizedlist"
><LI
CLASS="listitem"
><P
CLASS="para"
>Named notation is not supported; you can only use positional notation. However, you cannot provide actual parameters for formal parameters with default values. </P
></LI
><LI
CLASS="listitem"
><P
CLASS="para"
>A function called from a query or DML statement may not end the current transaction, commit or roll back to a savepoint, or ALTER the system or session. </P
></LI
><LI
CLASS="listitem"
><P
CLASS="para"
>A function called from a SELECT statement or from a parallelized DML statement may not execute a DML statement or otherwise modify the database.</P
></LI
><LI
CLASS="listitem"
><P
CLASS="para"
>A function called from a DML statement may not read or modify the particular table being modified by that DML statement. </P
></LI
></UL
><P
CLASS="para"
>The last three restrictions can be avoided if you take advantage of PL/SQL 8.1's autonomous transaction feature (described in <A
CLASS="xref"
HREF="ch02_01.htm"
>Chapter 2, <CITE
CLASS="chapter"
>Choose Your Transaction!</CITE
></A
>  ) in your function. With this approach, the function executes in its own transaction space, so a commit or DML statement has no impact on the "calling" SQL statement.</P
><P
CLASS="para"
>Oracle 8.1 also offers much better error messages. Instead of the double-negative, mind-bending:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>ORA-06571: Function TOTCOMP does not guarantee not to update database</PRE
></BLOCKQUOTE
><P
CLASS="para"
>you will see this much more sensible message:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>ORA-14551: cannot perform a DML operation inside a query</PRE
></BLOCKQUOTE
><P
CLASS="para"
>You can still include the PRAGMA RESTRICT_REFERENCES if you wish. You might, for example, want to use the PL/SQL compiler as a verification mechanism. It will tell you if your function has the side effects that you would expect, informing you of potential complications in underlying layers of code.<A
CLASS="indexterm"
NAME="AUTOID-7152"
></A
></P
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch10-SECT-2.2"
>10.2.2 Related New Developments</A
></H3
><P
CLASS="para"
>Oracle has added several new options to the way you define programs and assert their purity levels to make it easier to deploy stored code in the new world of integration with Java and C, as well as with parallel databases.</P
><DIV
CLASS="sect3"
><H4
CLASS="sect3"
><A
CLASS="title"
NAME="ch10-SECT-2.2.1"
>10.2.2.1 The TRUST option</A
></H4
><P
CLASS="para"
> <A
CLASS="indexterm"
NAME="AUTOID-7159"
></A
> You no longer need to use PRAGMA RESTRICT_REFERENCES to enable PL/SQL programs for use in SQL; the runtime engine will figure it out all by itself. However, what if you want to call Java or C routines from within SQL? You can now build wrappers around code written in those languages to make them accessible in PL/SQL. But the SQL engine cannot analyze those programs to determine freedom from side effects.</P
><P
CLASS="para"
>Oracle has, therefore, added a new option in the PRAGMA RESTRICT_REFERENCES statement: TRUST. The complete syntax for this pragma is now as follows:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>PRAGMA RESTRICT_REFERENCES ( 
    <I
CLASS="replaceable"
>function_name</I
>, WNDS [, WNPS] [, RNDS] [, RNPS] [, TRUST] );</PRE
></BLOCKQUOTE
><P
CLASS="para"
>The TRUST option makes it easier to call Java and C routines from functions that have a RESTRICT_REFERENCES pragma. When TRUST is used in the pragma, the restrictions listed in that pragma are not actually enforced. They are, instead, simply trusted to be true. Now that's flexibility!</P
><P
CLASS="para"
>You can deploy the TRUST option on the top-level program that then calls other programs, or you can use TRUST with each of the lower-level programs, allowing you to then assert whatever purity levels are necessary on routines that call them. Let's look at some examples.</P
><P
CLASS="para"
>When calling from a section of code that is using pragmas to a section that is not, there are two likely usage styles. One is to place a pragma on the routine to be called, for example, on a call specification for a Java method. Calls from PL/SQL to this method will then complain if the method is less restricted than the calling function.</P
><P
CLASS="para"
>The following package declares two programs. The maxsal function is based on a Java method; it uses the TRUST option to assert WNDS (writes no database state) and RNDS (reads no database state). The analyze_compensation procedure, which needs to assert WNDS so that it can be called from within a SQL query (indirectly), can then call maxsal. Note that if I wanted to assert WNPS or use this procedure in a function that is called in a WHERE clause, it would be rejected because the underlying pragma does not assert this purity level: </P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>CREATE OR REPLACE PACKAGE personnel
IS 
   FUNCTION maxsal (ssn_in IN VARCHAR2) RETURN NUMBER 
   IS 
      LANGUAGE JAVA NAME 
         'Person.max_salary (Java.lang.String) return long'; 
      PRAGMA RESTRICT_REFERENCES (maxsal, WNDS, RNDS, TRUST); 

   PROCEDURE analyze_compensation (ssn_in IN VARCHAR2); 

   PRAGMA RESTRICT_REFERENCES (analyze_compensation, WNDS); 
END; </PRE
></BLOCKQUOTE
><P
CLASS="para"
>In the next example, I have rewritten the personnel package specification to demonstrate the second usage style. Here, the top-level program, analyze_compensation, is the only program with a RESTRICT_REFERENCES pragma. I still won't have any problem calling maxsal and deploying it inside SQL, because I have added the TRUST option:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>CREATE OR REPLACE PACKAGE personnel
IS 
   FUNCTION maxsal (ssn_in IN VARCHAR2) RETURN NUMBER 
   IS 
      LANGUAGE JAVA NAME 
         'Person.max_salary (Java.lang.String) return long'; 

   PROCEDURE analyze_compensation (ssn_in IN VARCHAR2); 

   PRAGMA RESTRICT_REFERENCES (
      analyze_compensation, WNDS, WNPS, TRUST); 
END; </PRE
></BLOCKQUOTE
><P
CLASS="para"
>The SQL runtime engine will not even check the purity level of maxsal; it has been instructed to "trust" the program.</P
></DIV
><DIV
CLASS="sect3"
><H4
CLASS="sect3"
><A
CLASS="title"
NAME="ch10-SECT-2.2.2"
>10.2.2.2 Deterministic functions </A
></H4
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="ch-10-detfunc"
></A
>What, you might ask, is a <I
CLASS="filename"
>deterministic function</I
>? It's a program that doesn't have any free will. If you pass it <EM
CLASS="emphasis"
>X</EM
> and <EM
CLASS="emphasis"
>Y</EM
> values for its arguments, it always returns the same value(s). According to Oracle documentation:</P
><BLOCKQUOTE
CLASS="blockquote"
><P
CLASS="para"
>A function that is dependent solely on the values passed into it as arguments, and does not meaningfully reference or modify the contents of package variables or the database, or have any other side-effects, is termed deterministic.</P
></BLOCKQUOTE
><P
CLASS="para"
>Here is an example of a deterministic function:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>CREATE FUNCTION ceo_compensation (
   stock_increase IN NUMBER,
   layoffs IN NUMBER) 
   RETURN NUMBER 
IS 
BEGIN 
  RETURN 1000000 * (layoffs + stock_increase); 
END;</PRE
></BLOCKQUOTE
><P
CLASS="para"
>Even if the company's assembly line killed three workers due to faulty wiring, as long as the stock price goes up and the CEO lays off a bunch of people, he receives a huge paycheck. </P
><P
CLASS="para"
>What's the big deal about this sort of function? If Oracle can be sure that the function will return the same value for a given set of arguments, then it can avoid re-executing the function if it remembers the value from the last execution with those arguments. </P
><P
CLASS="para"
>If you tell Oracle that a function is deterministic, this declaration becomes an optimization hint. The Oracle8<EM
CLASS="emphasis"
>i</EM
> engine then knows that this function does not need to be called repetitively for the same arguments. It can instead cache the results and then simply use those results again and again.</P
><P
CLASS="para"
>This feature is especially useful within a parallelized query or parallelized DML statement. In addition, two new features in Oracle8<EM
CLASS="emphasis"
>i</EM
> require that any function used with them be declared deterministic:</P
><UL
CLASS="itemizedlist"
><LI
CLASS="listitem"
><P
CLASS="para"
>Any function used in a function-based index is required to be deterministic. </P
></LI
><LI
CLASS="listitem"
><P
CLASS="para"
>Any function used in a materialized view must be deterministic if that view is to be marked ENABLE QUERY REWRITE. </P
></LI
></UL
><P
CLASS="para"
>How do you declare a function to have this property? Simply place the DETERMINISTIC keyword after the return value type in the header of your function. In the following block, I have redefined the ceo_compensation function to be deterministic: </P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>CREATE FUNCTION ceo_compensation (
   stock_increase IN NUMBER,
   layoffs IN NUMBER) 
   RETURN NUMBER DETERMINISTIC 
IS 
BEGIN 
  RETURN 1000000 * (layoffs + stock_increase); 
END; </PRE
></BLOCKQUOTE
><P
CLASS="para"
>You can add this DETERMINISTIC clause in a header of any of the following: </P
><UL
CLASS="itemizedlist"
><LI
CLASS="listitem"
><P
CLASS="para"
>A standalone function</P
></LI
><LI
CLASS="listitem"
><P
CLASS="para"
>A packaged function</P
></LI
><LI
CLASS="listitem"
><P
CLASS="para"
>An object type function</P
></LI
></UL
><P
CLASS="para"
>Do not place the DETERMINISTIC keyword in the header of the function in the package body or object type body. You can also declare a procedure to be deterministic. There are several situations in which deterministic functions are not required but are strongly recommended by Oracle:</P
><UL
CLASS="itemizedlist"
><LI
CLASS="listitem"
><P
CLASS="para"
>Any materialized view or snapshot that is declared REFRESH FAST should only call deterministic functions. </P
></LI
><LI
CLASS="listitem"
><P
CLASS="para"
>If your function is called in a WHERE, ORDER BY, or GROUP BY clause, or is a MAP or ORDER method of a SQL type, or in any other way helps determine whether or where a row should appear in a result set, that function should be deterministic. (This characteristic was specified through the RESTRICT_REFERENCES pragma in earlier versions of Oracle with the WNDS and WNPS purity levels.) </P
></LI
></UL
><BLOCKQUOTE
CLASS="warning"
><P
CLASS="para"
><STRONG
>WARNING:</STRONG
> All you have to do is include the DETERMINISTIC keyword in your program declaration, and the SQL engine will automatically take one of a number of optimization steps. Yet the PL/SQL compiler really doesn't have any way to tell whether a function truly is deterministic. So if you label a program as deterministic erroneously, the results of any queries that call that function may also be erroneous.<A
CLASS="indexterm"
NAME="AUTOID-7213"
></A
></P
></BLOCKQUOTE
></DIV
><DIV
CLASS="sect3"
><H4
CLASS="sect3"
><A
CLASS="title"
NAME="ch10-SECT-2.2.3"
>10.2.2.3 PARALLEL_ENABLE functions </A
></H4
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="ch-10-paraenable"
></A
>The execution of a SQL statement can involve many distinct actions (for example, updating multiple indexes on an INSERT). Oracle's parallel execution feature allows these multiple operations to be executed simultaneously on different processes. If a function is called in a SQL statement that is run in parallel, then Oracle may make and run a separate copy of the function in each process. </P
><P
CLASS="para"
>Oracle's parallel execution feature divides the work of executing a SQL statement across multiple processes. Functions called from a SQL statement that is run in parallel may have a separate copy run in each of these processes, with each copy called for only the subset of rows handled by that process. Each process has its own copy of package data structures, as well as Java STATIC class attributes. Oracle cannot assume that it is safe to parallelize the execution of user-defined functions if they might possibly modify any of those variables.</P
><P
CLASS="para"
>Prior to Oracle8<EM
CLASS="emphasis"
>i</EM
>, a packaged function could be run in a parallel DML statement if its RESTRICT_REFERENCES pragma asserted all purity levels: WNDS, RNDS, WNPS, and RNPS. Those same purity levels also needed to be applicable to a standalone function if it were to be called in parallelized SQL. A parallel query required RNPS and WNPS, in addition to WNDS. </P
><P
CLASS="para"
>In Oracle8<EM
CLASS="emphasis"
>i</EM
>, since RESTRICT_REFERENCES is no longer required and parallel function execution is still desired, a new and optional keyword, PARALLEL_ENABLE, has been added for the program header. This keyword is placed before the IS or AS keyword as shown in this example:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>CREATE FUNCTION ceo_compensation (
   stock_increase IN NUMBER,
   layoffs IN NUMBER) 
   RETURN NUMBER <CODE
CLASS="userinput"
><B
>PARALLEL_ENABLE</B
></CODE
> 
IS 
BEGIN 
  RETURN 1000000 * (layoffs + stock_increase); 
END; 
/</PRE
></BLOCKQUOTE
><P
CLASS="para"
>You can use this keyword in a function defined in a CREATE FUNCTION statement, in a function's declaration in a CREATE PACKAGE statement, or on a method's declaration in a CREATE TYPE statement. You do <EM
CLASS="emphasis"
>not</EM
> repeat this keyword in the function's or method's body in a CREATE PACKAGE BODY or CREATE TYPE BODY statement. </P
><P
CLASS="para"
>You don't <EM
CLASS="emphasis"
>have</EM
> to use the PARALLEL_ENABLE keyword to identify functions that are eligible for parallel execution; Oracle suggests, however, that you use it, rather than a RESTRICT_REFERENCES pragma, when you need to achieve this effect. Here are some things to keep in mind:</P
><UL
CLASS="itemizedlist"
><LI
CLASS="listitem"
><P
CLASS="para"
>If you define a standalone function with the CREATE FUNCTION statement, it may still be eligible for parallel execution if the SQL runtime engine can determine that the function neither reads nor writes package variables, nor calls any function that might do so. </P
></LI
><LI
CLASS="listitem"
><P
CLASS="para"
>A Java method or C function can never be seen by Oracle as safe to run in parallel <EM
CLASS="emphasis"
>unless</EM
> the programmer explicitly indicates PARALLEL_ENABLE on the call specification or provides a PRAGMA RESTRICT_REFERENCES indicating that the function is pure enough for the operation. </P
></LI
><LI
CLASS="listitem"
><P
CLASS="para"
>If your function executes in parallel as part of a parallelized DML statement, it is not permitted to execute another DML statement. This function is, in fact, subject to the same restrictions enforced on functions that are run inside a query.</P
></LI
><LI
CLASS="listitem"
><P
CLASS="para"
>You can combine PARALLEL_ENABLE and DETERMINISTIC in the same program header.<A
CLASS="indexterm"
NAME="AUTOID-7240"
></A
></P
></LI
></UL
></DIV
></DIV
></DIV
><DIV
CLASS="htmlnav"
><P
></P
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch10_01.htm"
TITLE="10.1 The NOCOPY Parameter Mode Hint"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 10.1 The NOCOPY Parameter Mode Hint"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="book"
HREF="index.htm"
TITLE="Oracle PL/SQL Programming Guide to Oracle 8i Features"
><IMG
SRC="../gifs/txthome.gif"
ALT="Oracle PL/SQL Programming Guide to Oracle 8i Features"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch10_03.htm#ch10-SECT-3.2"
TITLE="10.3 SQL99 Compliance"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 10.3 SQL99 Compliance"
BORDER="0"></A
></TD
></TR
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
>10.1 The NOCOPY Parameter Mode Hint</TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="index"
HREF="index/idx_0.htm"
TITLE="Book Index"
><IMG
SRC="../gifs/index.gif"
ALT="Book Index"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
>10.3 SQL99 Compliance</TD
></TR
></TABLE
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"></DIV
><IMG SRC="../gifs/smnavbar.gif"
USEMAP="#map"
BORDER="0"
ALT="The Oracle Library Navigation">

<P><font size="-1">
<a href="../copyrght.htm#copy">Copyright (c) 2000</a> O'Reilly &amp; Associates. All rights reserved.
</font></P>

<MAP NAME="map">

<AREA SHAPE="RECT"
COORDS="0,0,35,30"
HREF="../index.htm"
ALT="Library Home">

<AREA SHAPE="RECT"
COORDS="40,0,95,30"
HREF="../prog2/index.htm"
ALT="Oracle PL/SQL Programming, 2nd. Ed.">

<AREA SHAPE="RECT"
COORDS="100,0,200,30"
HREF="index.htm"
ALT="Guide to Oracle 8i Features">

<AREA SHAPE="RECT"
COORDS="205,0,245,30"
HREF="../bipack/index.htm"
ALT="Oracle Built-in Packages">

<AREA SHAPE="RECT"
COORDS="250,0,320,30"
HREF="../advprog/index.htm"
ALT="Advanced PL/SQL Programming with Packages">

<AREA SHAPE="RECT"
COORDS="325,0,420,30"
HREF="../webapp/index.htm"
ALT="Oracle Web Applications">

<AREA SHAPE="RECT"
COORDS="425,0,490,30"
HREF="../langpkt/index.htm"
ALT="Oracle PL/SQL Language Pocket Reference">

<AREA SHAPE="RECT"
COORDS="495,0,570,30"
HREF="../bipkt/index.htm"
ALT="Oracle PL/SQL Built-ins Pocket Reference">
</MAP>

</BODY
>
<!-- Mirrored from liso.cs.pusan.ac.kr by HTTrack Website Copier/3.x [XR&CO'2001] -->
</HTML
>
