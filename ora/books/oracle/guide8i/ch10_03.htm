<HTML
><HEAD
><TITLE
>[Chapter 10] 10.3 SQL99 Compliance</TITLE
><META
NAME="DC.Creator"
CONTENT="Steven Feuerstein"><META
NAME="DC.Date"
CONTENT="2000-04-29T19:27:53Z"><META
NAME="DC.Format"
CONTENT="text/html"
SCHEME="MIME"><META
NAME="DC.Identifier"
CONTENT="O'Reilly and Associates CDROM-1-56592-675-7E"><META
NAME="DC.Language"
CONTENT="en-US"><META
NAME="DC.Publisher"
CONTENT="O'Reilly &amp; Associates, Inc."><META
NAME="DC.Source"
CONTENT="1-56592-675-7E"
SCHEME="ISBN"><META
NAME="DC.Subject.Keyword"
CONTENT="Oracle 8i Features"><META
NAME="DC.Title"
CONTENT="Oracle PL/SQL Programming Guide to Oracle 8i Features"><META
NAME="DC.Type"
CONTENT="Text.Monograph"><META
NAME="generator"
CONTENT="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><LINK
REL="stylesheet"
TYPE="text/css"
HREF="../style/style1.css"><LINK
REV="made"
HREF="mailto:online-books@oreilly.com"
TITLE="Online Books Comments"><LINK
REL="up"
HREF="ch10_01.htm"
TITLE="10. More Goodies for Oracle8i PL/SQL Developers"><LINK
REL="prev"
HREF="ch10_02.htm#ch10-SECT-2.2.1"
TITLE="10.2 Calling Packaged Functions in SQL"><LINK
REL="next"
HREF="ch10_04.htm"
TITLE="10.4 SQL Operations on Collections"></HEAD
><BODY
><DIV
CLASS="htmlnav"
><H1
><IMG
SRC="gifs/smbanner.gif"
ALT="Oracle PL/SQL Programming Guide to Oracle 8i Features"
USEMAP="#srchmap"
BORDER="0"></H1
><MAP
NAME="srchmap"
><AREA
SHAPE="RECT"
COORDS="0,0,466,65"
HREF="index.htm"
ALT="Oracle PL/SQL Programming Guide to Oracle 8i Features"><AREA
SHAPE="RECT"
COORDS="467,0,514,18"
HREF="jobjects/fsearch.htm"
ALT="Search this book"></MAP
><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch10_02.htm#ch10-SECT-2.2.1"
TITLE="10.2 Calling Packaged Functions in SQL"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 10.2 Calling Packaged Functions in SQL"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><SPAN
CLASS="NAVTITLE"
><A
CLASS="chapter"
REL="up"
HREF="ch10_01.htm"
TITLE="10. More Goodies for Oracle8i PL/SQL Developers"
>Chapter 10<BR>More Goodies for Oracle8i PL/SQL Developers</A
></SPAN
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch10_04.htm"
TITLE="10.4 SQL Operations on Collections"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 10.4 SQL Operations on Collections"
BORDER="0"></A
></TD
></TR
></TABLE
>&nbsp;<HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"></DIV
><DIV
CLASS="sect1"
><H2
CLASS="sect1"
><A
CLASS="title"
NAME="ch10-85655"
>10.3 SQL99 Compliance</A
></H2
><P
CLASS="para"
> <A
CLASS="indexterm"
NAME="AUTOID-7244"
></A
> PL/SQL 8.1 adds support for several functions to come into compliance with the SQL99 standard.</P
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch10-SECT-3.1"
>10.3.1 The TRIM Function</A
></H3
><P
CLASS="para"
> <A
CLASS="indexterm"
NAME="AUTOID-7249"
></A
> The TRIM function allows you to trim leading or trailing characters (or both) from a character string. Here is the header of the function:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>FUNCTION TRIM ( [LEADING | TRAILING | BOTH] <I
CLASS="replaceable"
>trim_chars</I
> FROM <I
CLASS="replaceable"
>trim_source</I
> ) 
   RETURN VARCHAR2;</PRE
></BLOCKQUOTE
><P
CLASS="para"
>where <I
CLASS="filename"
>trim_chars</I
> is the number of characters to trim from <I
CLASS="filename"
>trim_source</I
>.</P
><P
CLASS="para"
>This function conforms to these rules:</P
><UL
CLASS="itemizedlist"
><LI
CLASS="listitem"
><P
CLASS="para"
>If <EM
CLASS="emphasis"
>trim_chars</EM
> or <EM
CLASS="emphasis"
>trim_source</EM
> is a character literal, you must enclose it in single quotes. </P
></LI
><LI
CLASS="listitem"
><P
CLASS="para"
>If you specify LEADING, Oracle removes any leading characters that are found in the <EM
CLASS="emphasis"
>trim_chars</EM
> string (equivalent to the LTRIM built-in function). </P
></LI
><LI
CLASS="listitem"
><P
CLASS="para"
>If you specify TRAILING, PL/SQL removes any trailing characters found in <EM
CLASS="emphasis"
>trim_chars</EM
> (equivalent to the RTRIM built-in function). </P
></LI
><LI
CLASS="listitem"
><P
CLASS="para"
>If you specify BOTH or none of the three, Oracle removes leading and trailing characters found in <EM
CLASS="emphasis"
>trim_chars</EM
>. </P
></LI
><LI
CLASS="listitem"
><P
CLASS="para"
>If you do not specify <EM
CLASS="emphasis"
>trim_chars</EM
>, the default value is a blank space. </P
></LI
><LI
CLASS="listitem"
><P
CLASS="para"
>The maximum length of the value is the length of <EM
CLASS="emphasis"
>trim_source</EM
>. </P
></LI
></UL
><P
CLASS="para"
>The following block exercises the various forms of the TRIM command:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>/* Filename on companion disk: trim.sql */
DECLARE
   mystr VARCHAR2(10);
   yourstr VARCHAR2(10) := 'Toronto';
BEGIN
   DBMS_OUTPUT.PUT_LINE (
      TRIM (LEADING 'x' FROM 'xyzabc'));
   DBMS_OUTPUT.PUT_LINE (
      TRIM (TRAILING 'cb' FROM 'xyzabc'));
   DBMS_OUTPUT.PUT_LINE (
      TRIM (BOTH 'x1' FROM '1x1yzabc111x'));
   DBMS_OUTPUT.PUT_LINE (
      TRIM ('x1' FROM '1x1yzabc111x'));
   DBMS_OUTPUT.PUT_LINE (
      TRIM (mystr FROM yourstr));
END;
/   </PRE
></BLOCKQUOTE
><P
CLASS="para"
>and results in this output:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>yzabc
xyza
yzabc
yzabc
Toronto</PRE
></BLOCKQUOTE
><BLOCKQUOTE
CLASS="tip"
><P
CLASS="para"
><STRONG
>TIP:</STRONG
> Oracle documentation states that "if either trim_source or trim_chars is a NULL value, then the TRIM function returns a null value." My tests indicate, however, that if trim_chars is NULL, then trim_source is returned unchanged.</P
></BLOCKQUOTE
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch10-SECT-3.2"
>10.3.2 The CAST Function</A
></H3
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="ch-10-castfun"
></A
>The CAST function converts one built-in datatype or collection-typed value into another built-in datatype or collection-typed value. CAST was first made available in Oracle 8.0 and has been extended in a variety of ways in Oracle8<EM
CLASS="emphasis"
>i.</EM
> CAST, in essence, offers a single program name (and different syntax) to replace a variety of conversion programs, such as ROWIDTOHEX, TO_DATE, TO_CHAR, and so on. Here is the general syntax of the CAST statement:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>CAST (<I
CLASS="replaceable"
>expression</I
> AS <I
CLASS="replaceable"
>type</I
>)</PRE
></BLOCKQUOTE
><P
CLASS="para"
>where <EM
CLASS="emphasis"
>expression</EM
> is the expression to be converted and <EM
CLASS="emphasis"
>type</EM
> is the name of the datatype to which the expression is converted.</P
><P
CLASS="para"
>You can cast an unnamed expression (such as a date or the result set of a subquery) or a named collection (such as a VARRAY or a nested table) into a type-compatible datatype or named collection. The type must be the name of a built-in datatype or collection type and the expression must be a built-in datatype or must evaluate to a collection value. </P
><P
CLASS="para"
>The expression can be either a built-in datatype or a collection type, and a subquery must return a single value of the collection type or the built-in type. If you are casting the result set of a subquery, you must then specify the MULTISET keyword to tell Oracle to return a collection value. MULTISET is illustrated in the last example in <A
CLASS="xref"
HREF="ch10_03.htm#ch10-SECT-3.2"
>Section 10.3.2.2, "Collection examples</A
>.</P
><P
CLASS="para"
><A
CLASS="xref"
HREF="ch10_03.htm#ch10-SECT-3.2"
>Table 10.1</A
> shows which built-in datatypes can be cast into which other built-in datatypes. </P
><BR><TABLE
CLASS="table"
BORDER="1"
CELLPADDING="3"
><CAPTION
CLASS="table"
><A
CLASS="title"
NAME="ch10-72977"
>Table 10.1: Conversions Supported by CAST </A
></CAPTION
><THEAD
CLASS="thead"
><TR
CLASS="row"
VALIGN="TOP"
><TH
CLASS="entry"
ALIGN="LEFT"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>From/ To</P
></TH
><TH
CLASS="entry"
ALIGN="LEFT"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>CHAR, VARCHAR2</P
></TH
><TH
CLASS="entry"
ALIGN="LEFT"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>NUMBER</P
></TH
><TH
CLASS="entry"
ALIGN="LEFT"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>DATE</P
></TH
><TH
CLASS="entry"
ALIGN="LEFT"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>RAW</P
></TH
><TH
CLASS="entry"
ALIGN="LEFT"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>ROWID, UROWID</P
></TH
><TH
CLASS="entry"
ALIGN="LEFT"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>NCHAR, NVARCHAR2</P
></TH
></TR
></THEAD
><TBODY
CLASS="tbody"
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>CHAR, VARCHAR2</P
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>&#10003;</P
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>&#10003;</P
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>&#10003;</P
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>&#10003;</P
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>&#10003;</P
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
></P
>&nbsp;</TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>NUMBER</P
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>&#10003;</P
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>&#10003;</P
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
></P
>&nbsp;</TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
></P
>&nbsp;</TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
></P
>&nbsp;</TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
></P
>&nbsp;</TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>DATE</P
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>&#10003;</P
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
></P
>&nbsp;</TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>&#10003;</P
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
></P
>&nbsp;</TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
></P
>&nbsp;</TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
></P
>&nbsp;</TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>RAW</P
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>&#10003;</P
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
></P
>&nbsp;</TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
></P
>&nbsp;</TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>&#10003;</P
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
></P
>&nbsp;</TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
></P
>&nbsp;</TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>ROWID, UROWID</P
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>&#10003;</P
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
></P
>&nbsp;</TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
></P
>&nbsp;</TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
></P
>&nbsp;</TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>&#10003;[<A
CLASS="footnote"
HREF="#ch10-pgfId-1000001410"
>1</A
>]</P
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
></P
>&nbsp;</TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>NCHAR, NVARCHAR2</P
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
></P
>&nbsp;</TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>&#10003;</P
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>&#10003;</P
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>&#10003;</P
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>&#10003;</P
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>&#10003;</P
></TD
></TR
></TBODY
></TABLE
><BLOCKQUOTE
CLASS="footnote"
><DIV
CLASS="footnote"
><P
CLASS="para"
><A
CLASS="footnote"
NAME="ch10-pgfId-1000001410"
>[1]</A
> <SUP
CLASS="superscript"
></SUP
>You can't cast a UROWID to a ROWID if the UROWID contains the value of a ROWID of an index-organized table.</P
></DIV
></BLOCKQUOTE
><P
CLASS="para"
>Note the following about using CAST:</P
><UL
CLASS="itemizedlist"
><LI
CLASS="listitem"
><P
CLASS="para"
>CAST does not support LONG, LONG RAW, or any of the LOB datatypes.</P
></LI
><LI
CLASS="listitem"
><P
CLASS="para"
>If the UROWID contains the value of a ROWID of an index-organized table, you cannot cast that UROWID to a ROWID.</P
></LI
><LI
CLASS="listitem"
><P
CLASS="para"
>To cast a named collection type into another named collection type, the elements of both collections must be of the same TYPE. </P
></LI
><LI
CLASS="listitem"
><P
CLASS="para"
>If the result set of a subquery can evaluate to multiple rows, you must specify the MULTISET keyword. The rows resulting from the subquery form the elements of the collection value into which they are cast. Without the MULTISET keyword, the subquery is treated as a scalar subquery, which is not supported in the CAST expression. In other words, scalar subqueries as arguments of the CAST operator are not valid in Oracle8<EM
CLASS="emphasis"
>i</EM
>. </P
></LI
><LI
CLASS="listitem"
><P
CLASS="para"
>In many cases, you will not be able to use CAST directly within PL/SQL. It is primarily a SQL operator.</P
></LI
></UL
><P
CLASS="para"
>Let's take a look at some examples (you will find all of these grouped together in the <I
CLASS="filename"
>cast.sql</I
> file on the disk).</P
><DIV
CLASS="sect3"
><H4
CLASS="sect3"
><A
CLASS="title"
NAME="ch10-SECT-3.2.1"
>10.3.2.1 Built-in datatype examples</A
></H4
><P
CLASS="para"
>You can use CAST instead of other datatype conversion functions:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>/* Filename on companion disk: cast.sql */
BEGIN
   /* CAST for TO_DATE...no way to pass format mask.
      Instead, the database default or session setting of
      NLS_DATE_FORMAT is used. */
   DBMS_OUTPUT.PUT_LINE (<CODE
CLASS="userinput"
><B
>CAST</B
></CODE
> ('10-JAN-99' AS DATE));
   
   /* CAST as TO_NUMBER...no way to pass format mask.  */ 
   DBMS_OUTPUT.PUT_LINE (<CODE
CLASS="userinput"
><B
>CAST</B
></CODE
> ('107898888' AS NUMBER));
END;
/</PRE
></BLOCKQUOTE
><P
CLASS="para"
>As noted, there isn't any way to include a format mask with which to drive the conversion. If I use a different format for my date string, I get an error:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>SQL&gt;
  1  BEGIN
  2     DBMS_OUTPUT.PUT_LINE (
  3        CAST ('1/1/99' AS DATE));
  4* END;
  5  /

ERROR at line 1:
ORA-01843: not a valid month</PRE
></BLOCKQUOTE
><P
CLASS="para"
>I can use CAST to convert a ROWID to a string as follows:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>SQL&gt; SELECT CAST (ROWID AS VARCHAR2(20)) Vrowid 
       FROM department;

VROWID
--------------------
AAADIKAACAAAAMeAAA
AAADIKAACAAAAMeAAB
AAADIKAACAAAAMeAAC
AAADIKAACAAAAMeAAD</PRE
></BLOCKQUOTE
><P
CLASS="para"
>Yet I cannot run this same query inside PL/SQL:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>SQL&gt; DECLARE
  2     my_rowid VARCHAR2(20);
  3  BEGIN
  4     FOR rec IN (
  5        SELECT CAST (ROWID AS VARCHAR2(20)) Vrowid 
  6          FROM department)
  7     LOOP
  8        DBMS_OUTPUT.PUT_LINE (rec.Vrowid);
  9     END LOOP;
 10  END;
 11  /      
ERROR at line 1:
PLS-00220: simple name required in this context</PRE
></BLOCKQUOTE
><P
CLASS="para"
>So I am not sure how useful CAST will ever be for PL/SQL developers for conversion of scalar datatypes.</P
></DIV
><DIV
CLASS="sect3"
><H4
CLASS="sect3"
><A
CLASS="title"
NAME="ch10-16979"
>10.3.2.2 Collection examples</A
></H4
><P
CLASS="para"
>CAST will almost certainly come in very handy when you want to convert between types of collections, or if you want to convert a subquery directly into a collection.</P
><P
CLASS="para"
>To demonstrate these capabilities, I will use the following structures (see <I
CLASS="filename"
>cast.sql</I
> for all of these statements and the actual exercises):</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>/* Filename on companion disk: cast.sql */
CREATE TYPE address_t AS OBJECT 
   (street VARCHAR2(100), city VARCHAR2(100));
/       
CREATE TYPE address_book_t AS TABLE OF address_t; 
/
CREATE TYPE address_array_t AS VARRAY(3) OF address_t; 
/
CREATE TABLE addresses OF address_t;

INSERT INTO addresses VALUES (
    address_t('19th St', 'St. Louis')); 
INSERT INTO addresses VALUES (
    address_t('Biglanes Blvd', 'Dallas'));
INSERT INTO addresses VALUES (
    address_t('Upanddown Lane', 'San Francisco'));</PRE
></BLOCKQUOTE
><P
CLASS="para"
>I now have a nested table, variable array, and database table all with the same structure. I can then use CAST&nbsp;-- along with the MULTISET operator in SQL&nbsp;-- to move between the different structures.</P
><P
CLASS="para"
>Suppose, for example, that I have a nested table declared in PL/SQL, and I want to move that to a VARRAY. Here are the steps I would take:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>/* Filename on companion disk: cast.sql */
DECLARE
   addr_varray address_array_t;
   
   addr_ntable address_book_t := 
      address_book_t (
         address_t('Madison Ave', 'Chicago'), 
         address_t('Devon Ave', 'Chicago')); 
BEGIN 
   SELECT CAST (addr_ntable AS address_array_t)
     INTO addr_varray
     FROM dual;</PRE
></BLOCKQUOTE
><P
CLASS="para"
>I would love to be able to do this:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>addr_varray := CAST (addr_ntable AS address_array_t); /* INVALID! */</PRE
></BLOCKQUOTE
><P
CLASS="para"
>Unfortunately, the CAST operator cannot be used directly (natively) in PL/SQL to operate on collections.</P
><P
CLASS="para"
>I can also transform the result set of a query into a nested table or VARRAY using CAST and MULTISET, as shown in the following:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>/* Filename on companion disk: cast.sql */
DECLARE
   addr_varray address_array_t;
BEGIN
   SELECT CAST (MULTISET (
             SELECT street, city
               FROM addresses p
              ORDER BY city) 
       AS address_array_t)
     INTO addr_varray
     FROM dual;</PRE
></BLOCKQUOTE
><P
CLASS="para"
>Notice that I have included an ORDER BY in my query; it will generally be much more efficient to rely on SQL to do your sorting <EM
CLASS="emphasis"
>before</EM
> moving your data to a PL/SQL structure.<A
CLASS="indexterm"
NAME="AUTOID-7458"
></A
></P
></DIV
></DIV
></DIV
><DIV
CLASS="htmlnav"
><P
></P
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch10_02.htm#ch10-SECT-2.2.1"
TITLE="10.2 Calling Packaged Functions in SQL"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 10.2 Calling Packaged Functions in SQL"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="book"
HREF="index.htm"
TITLE="Oracle PL/SQL Programming Guide to Oracle 8i Features"
><IMG
SRC="../gifs/txthome.gif"
ALT="Oracle PL/SQL Programming Guide to Oracle 8i Features"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch10_04.htm"
TITLE="10.4 SQL Operations on Collections"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 10.4 SQL Operations on Collections"
BORDER="0"></A
></TD
></TR
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
>10.2 Calling Packaged Functions in SQL</TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="index"
HREF="index/idx_0.htm"
TITLE="Book Index"
><IMG
SRC="../gifs/index.gif"
ALT="Book Index"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
>10.4 SQL Operations on Collections</TD
></TR
></TABLE
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"></DIV
><IMG SRC="../gifs/smnavbar.gif"
USEMAP="#map"
BORDER="0"
ALT="The Oracle Library Navigation">

<P><font size="-1">
<a href="../copyrght.htm#copy">Copyright (c) 2000</a> O'Reilly &amp; Associates. All rights reserved.
</font></P>

<MAP NAME="map">

<AREA SHAPE="RECT"
COORDS="0,0,35,30"
HREF="../index.htm"
ALT="Library Home">

<AREA SHAPE="RECT"
COORDS="40,0,95,30"
HREF="../prog2/index.htm"
ALT="Oracle PL/SQL Programming, 2nd. Ed.">

<AREA SHAPE="RECT"
COORDS="100,0,200,30"
HREF="index.htm"
ALT="Guide to Oracle 8i Features">

<AREA SHAPE="RECT"
COORDS="205,0,245,30"
HREF="../bipack/index.htm"
ALT="Oracle Built-in Packages">

<AREA SHAPE="RECT"
COORDS="250,0,320,30"
HREF="../advprog/index.htm"
ALT="Advanced PL/SQL Programming with Packages">

<AREA SHAPE="RECT"
COORDS="325,0,420,30"
HREF="../webapp/index.htm"
ALT="Oracle Web Applications">

<AREA SHAPE="RECT"
COORDS="425,0,490,30"
HREF="../langpkt/index.htm"
ALT="Oracle PL/SQL Language Pocket Reference">

<AREA SHAPE="RECT"
COORDS="495,0,570,30"
HREF="../bipkt/index.htm"
ALT="Oracle PL/SQL Built-ins Pocket Reference">
</MAP>

</BODY
>
<!-- Mirrored from liso.cs.pusan.ac.kr by HTTrack Website Copier/3.x [XR&CO'2001] -->
</HTML
>
