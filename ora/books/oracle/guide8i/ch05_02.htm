<HTML
><HEAD
><TITLE
>[Chapter 5] 5.2 Bulk DML with the FORALL Statement</TITLE
><META
NAME="DC.Creator"
CONTENT="Steven Feuerstein"><META
NAME="DC.Date"
CONTENT="2000-04-29T19:25:48Z"><META
NAME="DC.Format"
CONTENT="text/html"
SCHEME="MIME"><META
NAME="DC.Identifier"
CONTENT="O'Reilly and Associates CDROM-1-56592-675-7E"><META
NAME="DC.Language"
CONTENT="en-US"><META
NAME="DC.Publisher"
CONTENT="O'Reilly &amp; Associates, Inc."><META
NAME="DC.Source"
CONTENT="1-56592-675-7E"
SCHEME="ISBN"><META
NAME="DC.Subject.Keyword"
CONTENT="Oracle 8i Features"><META
NAME="DC.Title"
CONTENT="Oracle PL/SQL Programming Guide to Oracle 8i Features"><META
NAME="DC.Type"
CONTENT="Text.Monograph"><META
NAME="generator"
CONTENT="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><LINK
REL="stylesheet"
TYPE="text/css"
HREF="../style/style1.css"><LINK
REV="made"
HREF="mailto:online-books@oreilly.com"
TITLE="Online Books Comments"><LINK
REL="up"
HREF="ch05_01.htm"
TITLE="5. Bulking Up with PL/SQL 8.1"><LINK
REL="prev"
HREF="ch05_01.htm"
TITLE="5.1 Context-Switching Problem Scenarios"><LINK
REL="next"
HREF="ch05_03.htm"
TITLE="5.3 Bulk Querying with the BULK COLLECT Clause"></HEAD
><BODY
><DIV
CLASS="htmlnav"
><H1
><IMG
SRC="gifs/smbanner.gif"
ALT="Oracle PL/SQL Programming Guide to Oracle 8i Features"
USEMAP="#srchmap"
BORDER="0"></H1
><MAP
NAME="srchmap"
><AREA
SHAPE="RECT"
COORDS="0,0,466,65"
HREF="index.htm"
ALT="Oracle PL/SQL Programming Guide to Oracle 8i Features"><AREA
SHAPE="RECT"
COORDS="467,0,514,18"
HREF="jobjects/fsearch.htm"
ALT="Search this book"></MAP
><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch05_01.htm"
TITLE="5.1 Context-Switching Problem Scenarios"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 5.1 Context-Switching Problem Scenarios"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><SPAN
CLASS="NAVTITLE"
><A
CLASS="chapter"
REL="up"
HREF="ch05_01.htm"
TITLE="5. Bulking Up with PL/SQL 8.1"
>Chapter 5<BR>Bulking Up with PL/SQL 8.1</A
></SPAN
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch05_03.htm"
TITLE="5.3 Bulk Querying with the BULK COLLECT Clause"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 5.3 Bulk Querying with the BULK COLLECT Clause"
BORDER="0"></A
></TD
></TR
></TABLE
>&nbsp;<HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"></DIV
><DIV
CLASS="sect1"
><H2
CLASS="sect1"
><A
CLASS="title"
NAME="ch05-48958"
>5.2 Bulk DML with the FORALL Statement</A
></H2
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="ch-05-forst"
></A
><A
CLASS="indexterm"
NAME="ch-05-bulkforall"
></A
>PL/SQL has a new keyword: FORALL. This keyword tells the PL/SQL runtime engine to bulk bind into the SQL statement all the elements of one or more collections <EM
CLASS="emphasis"
>before</EM
> sending anything to the SQL engine.</P
><P
CLASS="para"
>Although the FORALL statement contains an iteration scheme (it iterates through all the rows of a collection), it is not a FOR loop. It does not, consequently, have either a LOOP or an END LOOP statement. Its syntax is as follows:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>FORALL <I
CLASS="replaceable"
>index_row</I
> IN <I
CLASS="replaceable"
>lower_bound</I
> ... <I
CLASS="replaceable"
>upper_bound</I
>
   <I
CLASS="replaceable"
>sql_statement</I
>;
</PRE
></BLOCKQUOTE
><DL
CLASS="variablelist"
><DT
CLASS="term"
>index_row</DT
><DD
CLASS="listitem"
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="AUTOID-2446"
></A
>The specified collection; the FORALL will iterate through the rows of this collection</P
></DD
><DT
CLASS="term"
>lower_bound</DT
><DD
CLASS="listitem"
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="AUTOID-2452"
></A
>The starting index number (row or collection element) for the operation</P
></DD
><DT
CLASS="term"
>upper_bound</DT
><DD
CLASS="listitem"
><P
CLASS="para"
> <A
CLASS="indexterm"
NAME="AUTOID-2458"
></A
> The ending index number (row or collection element) for the operation</P
></DD
><DT
CLASS="term"
>sql_statement</DT
><DD
CLASS="listitem"
><P
CLASS="para"
> <A
CLASS="indexterm"
NAME="AUTOID-2464"
></A
> The SQL statement to be performed on each collection element</P
></DD
></DL
><P
CLASS="para"
>You must follow these rules when using FORALL:</P
><UL
CLASS="itemizedlist"
><LI
CLASS="listitem"
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="AUTOID-2470"
></A
>The body of the FORALL statement is a single DML statement&nbsp;-- an INSERT, UPDATE, or DELETE. </P
></LI
><LI
CLASS="listitem"
><P
CLASS="para"
>The DML must reference collection elements, indexed by the <EM
CLASS="emphasis"
>index_row</EM
> variable in the FORALL statement. The scope of the <EM
CLASS="emphasis"
>index_row</EM
> variable is the FORALL statement only; you may not reference it outside of that statement. </P
></LI
><LI
CLASS="listitem"
><P
CLASS="para"
>Do not declare an INTEGER variable for <EM
CLASS="emphasis"
>index_row</EM
>. It is declared implicitly by the PL/SQL engine.</P
></LI
><LI
CLASS="listitem"
><P
CLASS="para"
>The lower and upper bounds must specify a valid range of consecutive index numbers for the collection(s) referenced in the SQL statement. The following script, for example:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>DECLARE
   TYPE NumList IS TABLE OF NUMBER;
   ceo_payoffs NumList := 
      NumList(1000000, 42000000, 20000000, 17900000);
BEGIN
   ceo_payoffs.DELETE(3);  -- delete third element
   FORALL indx IN ceo_payoffs.FIRST..ceo_payoffs.LAST
      UPDATE excessive_comp
         SET salary = ceo_payoffs(indx)
       WHERE layoffs &gt; 10000;
END;</PRE
></BLOCKQUOTE
><P
CLASS="para"
>will cause the following error:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>ORA-22160: element at index [3] does not exist</PRE
></BLOCKQUOTE
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="AUTOID-2486"
></A
>This error occurs because the DELETE method has removed an element from the collection; the FORALL statement requires a densely filled collection. See the <I
CLASS="filename"
>diffcount.sql</I
> file on the companion disk for an example (and resulting behavior) of this scenario.</P
></LI
><LI
CLASS="listitem"
><P
CLASS="para"
>The collection subscript referenced in the DML statement cannot be an expression. For example, the following script:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>DECLARE
   names name_varray := name_varray();
BEGIN
   FORALL indx IN names.FIRST .. names.LAST
      DELETE FROM emp WHERE ename = names(indx+10);
END;
/</PRE
></BLOCKQUOTE
><P
CLASS="para"
>will cause the following error:</P
></LI
></UL
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>PLS-00430: FORALL iteration variable INDX is not allowed in this context</PRE
></BLOCKQUOTE
><P
CLASS="para"
>The DML statement can reference more than one collection. The upper and lower bounds do not have to span the entire contents of the collection(s). When this statement is bulk bound and passed to SQL, the SQL engine executes the statement once for each index number in the range. In other words, the same SQL statements will be executed, but they will all be run in the same round-trip to the SQL layer, minimizing the context switches, as shown in <A
CLASS="xref"
HREF="ch05_02.htm"
>Figure 5.3</A
>.</P
><H4
CLASS="figure"
><A
CLASS="title"
NAME="ch05-45590"
>Figure 5.3: One context switch with FORALL</A
></H4
><IMG
CLASS="graphic"
SRC="figs/o8if.0503.gif"
ALT="Figure 5.3"><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch05-SECT-2.1"
>5.2.1 FORALL Examples</A
></H3
><P
CLASS="para"
>Here are some examples of the use of the FORALL statement:</P
><OL
CLASS="orderedlist"
><LI
CLASS="listitem"
><P
CLASS="para"
>Let's rewrite the update_tragedies procedure to use FORALL:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>CREATE OR REPLACE PROCEDURE update_tragedies (
   warcrim_ids IN name_varray,
   num_victims IN number_varray
   )
IS
BEGIN
   FORALL indx IN warcrim_ids.FIRST .. warcrim_ids.LAST 
      UPDATE war_criminal
         SET victim_count = num_victims (indx)
       WHERE war_criminal_id = warcrim_ids (indx);
END;</PRE
></BLOCKQUOTE
><P
CLASS="para"
>Notice that the only changes in this example are to change FOR to FORALL, and to remove the LOOP and END LOOP keywords. This use of FORALL accesses and passes to SQL each of the rows defined in the war criminals array (and the corresponding values for the number of victims).</P
></LI
><LI
CLASS="listitem"
><P
CLASS="para"
>In the following call to FORALL, I am passing a subset of the collection's full range of values to the SQL statement:</P
></LI
></OL
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>DECLARE
   TYPE not_enough_names IS VARRAY(2000) OF VARCHAR2(100);
   usda_inspectors not_enough_names := not_enough_names ();
BEGIN
   -- Fill varray with the names of the US Department of Agriculture
   -- inspectors who are supposed to inspect over 7,000,000 businesses
   -- in the United States. 
   ...

   -- Make government smaller: DELETE all but 100 inspectors
   -- and then wait for the E. coli to attack.
   FORALL indx IN 101 .. usda_inspectors.LAST 
      DELETE FROM federal_employee
       WHERE name = usda_inspectors(indx);
END;</PRE
></BLOCKQUOTE
><OL
CLASS="orderedlist"
START="3"
><LI
CLASS="listitem"
><P
CLASS="para"
>The previous example shows how the DML statement can reference more than one collection. In this next case, I have three: denial, patient_name, and illnesses. Only the first two are subscripted. Since the PL/SQL engine bulk binds only subscripted collections, the same illnesses collection is inserted as a whole into the hmo_coverage table for each of the rows inserted:</P
></LI
></OL
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>FORALL indx IN denial.FIRST .. denial.LAST
   INSERT INTO hmo_coverage 
      VALUES (denial(indx), patient_name(indx), illnesses);</PRE
></BLOCKQUOTE
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch05-SECT-2.2"
>5.2.2 ROLLBACK Behavior with FORALL</A
></H3
><P
CLASS="para"
>The FORALL statement allows you to pass multiple SQL statements all together (in bulk) to the SQL engine. This means that as far as context switching is concerned, you have one SQL "block," but these blocks are still treated as individual DML operations.</P
><P
CLASS="para"
>What happens when one of those DML statements fails? The following rules apply:</P
><UL
CLASS="itemizedlist"
><LI
CLASS="listitem"
><P
CLASS="para"
>The FORALL statement stops executing. It isn't possible to request that the FORALL skip over the offending statement and continue on to the next row in the collection. </P
></LI
><LI
CLASS="listitem"
><P
CLASS="para"
>The DML statement being executed is rolled back to an implicit savepoint marked by the PL/SQL engine before execution of the statement.</P
></LI
><LI
CLASS="listitem"
><P
CLASS="para"
>Any previous DML operations in that FORALL statement that already executed without error are <EM
CLASS="emphasis"
>not</EM
> rolled back.</P
></LI
></UL
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="AUTOID-2527"
></A
>The following script demonstrates this behavior; it's available in the <I
CLASS="filename"
>forallerr.sql</I
> file on the companion disk.</P
><P
CLASS="para"
>First, I create a table for lobbyists of the National Rifle Association (if they are not "gun happy," then I don't know who is) and fill it with some gun information:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>/* Filename on companion disk: forallerr.sql */
CREATE TABLE gun_happy (
   name VARCHAR2(15), country VARCHAR2(100), killed INTEGER);
INSERT INTO gun_happy VALUES('AK-47', 'Russia', 100000);
INSERT INTO gun_happy VALUES('Uzi', 'Israel', 50000);  
INSERT INTO gun_happy VALUES('Colt-45', 'USA', 25000000);</PRE
></BLOCKQUOTE
><P
CLASS="para"
>Then I use FORALL to update the names of the guns to include the number of people killed by those guns. (Whoops! Guns don't kill people. People kill people.)</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>DECLARE
   TYPE StgList IS TABLE OF VARCHAR2(100);
   countries StgList := StgList ('Israel', 'Russia', 'USA');
BEGIN
   FORALL indx IN countries.FIRST..countries.LAST
      UPDATE gun_happy SET name = name || '-' || killed 
         WHERE country = countries(indx);
         
   DBMS_OUTPUT.PUT_LINE ('Update performed!');
EXCEPTION
   WHEN OTHERS THEN
      DBMS_OUTPUT.PUT_LINE ('Update did not complete!');
      COMMIT;
END; 
/</PRE
></BLOCKQUOTE
><P
CLASS="para"
>Take note of two things:</P
><UL
CLASS="itemizedlist"
><LI
CLASS="listitem"
><P
CLASS="para"
>I place the countries in the nested table named "countries" in alphabetical order; thus, the update for the Colt .45 will be the last one processed.</P
></LI
><LI
CLASS="listitem"
><P
CLASS="para"
>When I concatenate the name and killed tables for the Colt .45, the length of this string exceeds 15 characters. This will raise a VALUE_ERROR exception.</P
></LI
></UL
><P
CLASS="para"
>To see the impact of this block, I run my script with queries to show the contents of the gun_happy table: </P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>SQL&gt; @forallerr

Gun Names
---------------
AK-47
Uzi
Colt-45

Use FORALL for update...
Update did not complete!

Gun Names
---------------
AK-47-100000
Uzi-50000
Colt-45</PRE
></BLOCKQUOTE
><P
CLASS="para"
>As you can see, the first two changes stuck, whereas the last attempt to change the name failed, causing a rollback, but only to the beginning of that third UPDATE statement.</P
><P
CLASS="para"
> <A
CLASS="indexterm"
NAME="AUTOID-2544"
></A
> How do you know how many of your DML statements succeeded? You can check the SQL%BULK_ROWCOUNT cursor attribute; this new attribute, used exclusively with bulk binds, is discussed later in <A
CLASS="xref"
HREF="ch05_04.htm"
>Section 5.4, "Using Cursor Attributes</A
>.<A
CLASS="indexterm"
NAME="AUTOID-2547"
></A
><A
CLASS="indexterm"
NAME="AUTOID-2548"
></A
></P
></DIV
></DIV
><DIV
CLASS="htmlnav"
><P
></P
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch05_01.htm"
TITLE="5.1 Context-Switching Problem Scenarios"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 5.1 Context-Switching Problem Scenarios"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="book"
HREF="index.htm"
TITLE="Oracle PL/SQL Programming Guide to Oracle 8i Features"
><IMG
SRC="../gifs/txthome.gif"
ALT="Oracle PL/SQL Programming Guide to Oracle 8i Features"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch05_03.htm"
TITLE="5.3 Bulk Querying with the BULK COLLECT Clause"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 5.3 Bulk Querying with the BULK COLLECT Clause"
BORDER="0"></A
></TD
></TR
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
>5.1 Context-Switching Problem Scenarios</TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="index"
HREF="index/idx_0.htm"
TITLE="Book Index"
><IMG
SRC="../gifs/index.gif"
ALT="Book Index"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
>5.3 Bulk Querying with the BULK COLLECT Clause</TD
></TR
></TABLE
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"></DIV
><IMG SRC="../gifs/smnavbar.gif"
USEMAP="#map"
BORDER="0"
ALT="The Oracle Library Navigation">

<P><font size="-1">
<a href="../copyrght.htm#copy">Copyright (c) 2000</a> O'Reilly &amp; Associates. All rights reserved.
</font></P>

<MAP NAME="map">

<AREA SHAPE="RECT"
COORDS="0,0,35,30"
HREF="../index.htm"
ALT="Library Home">

<AREA SHAPE="RECT"
COORDS="40,0,95,30"
HREF="../prog2/index.htm"
ALT="Oracle PL/SQL Programming, 2nd. Ed.">

<AREA SHAPE="RECT"
COORDS="100,0,200,30"
HREF="index.htm"
ALT="Guide to Oracle 8i Features">

<AREA SHAPE="RECT"
COORDS="205,0,245,30"
HREF="../bipack/index.htm"
ALT="Oracle Built-in Packages">

<AREA SHAPE="RECT"
COORDS="250,0,320,30"
HREF="../advprog/index.htm"
ALT="Advanced PL/SQL Programming with Packages">

<AREA SHAPE="RECT"
COORDS="325,0,420,30"
HREF="../webapp/index.htm"
ALT="Oracle Web Applications">

<AREA SHAPE="RECT"
COORDS="425,0,490,30"
HREF="../langpkt/index.htm"
ALT="Oracle PL/SQL Language Pocket Reference">

<AREA SHAPE="RECT"
COORDS="495,0,570,30"
HREF="../bipkt/index.htm"
ALT="Oracle PL/SQL Built-ins Pocket Reference">
</MAP>

</BODY
>
<!-- Mirrored from liso.cs.pusan.ac.kr by HTTrack Website Copier/3.x [XR&CO'2001] -->
</HTML
>
