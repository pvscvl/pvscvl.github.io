<HTML
><HEAD
><TITLE
>[Chapter 4] 4.3 Multirow Queries with Cursor Variables</TITLE
><META
NAME="DC.Creator"
CONTENT="Steven Feuerstein"><META
NAME="DC.Date"
CONTENT="2000-04-29T19:25:19Z"><META
NAME="DC.Format"
CONTENT="text/html"
SCHEME="MIME"><META
NAME="DC.Identifier"
CONTENT="O'Reilly and Associates CDROM-1-56592-675-7E"><META
NAME="DC.Language"
CONTENT="en-US"><META
NAME="DC.Publisher"
CONTENT="O'Reilly &amp; Associates, Inc."><META
NAME="DC.Source"
CONTENT="1-56592-675-7E"
SCHEME="ISBN"><META
NAME="DC.Subject.Keyword"
CONTENT="Oracle 8i Features"><META
NAME="DC.Title"
CONTENT="Oracle PL/SQL Programming Guide to Oracle 8i Features"><META
NAME="DC.Type"
CONTENT="Text.Monograph"><META
NAME="generator"
CONTENT="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><LINK
REL="stylesheet"
TYPE="text/css"
HREF="../style/style1.css"><LINK
REV="made"
HREF="mailto:online-books@oreilly.com"
TITLE="Online Books Comments"><LINK
REL="up"
HREF="ch04_01.htm"
TITLE="4. Native Dynamic SQL in Oracle8i"><LINK
REL="prev"
HREF="ch04_02.htm#ch04-18443"
TITLE="4.2 NDS Statement Summary"><LINK
REL="next"
HREF="ch04_04.htm#ch04-SECT-4.3"
TITLE="4.4 Binding Variables"></HEAD
><BODY
><DIV
CLASS="htmlnav"
><H1
><IMG
SRC="gifs/smbanner.gif"
ALT="Oracle PL/SQL Programming Guide to Oracle 8i Features"
USEMAP="#srchmap"
BORDER="0"></H1
><MAP
NAME="srchmap"
><AREA
SHAPE="RECT"
COORDS="0,0,466,65"
HREF="index.htm"
ALT="Oracle PL/SQL Programming Guide to Oracle 8i Features"><AREA
SHAPE="RECT"
COORDS="467,0,514,18"
HREF="jobjects/fsearch.htm"
ALT="Search this book"></MAP
><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch04_02.htm#ch04-18443"
TITLE="4.2 NDS Statement Summary"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 4.2 NDS Statement Summary"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><SPAN
CLASS="NAVTITLE"
><A
CLASS="chapter"
REL="up"
HREF="ch04_01.htm"
TITLE="4. Native Dynamic SQL in Oracle8i"
>Chapter 4<BR>Native Dynamic SQL in Oracle8i</A
></SPAN
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch04_04.htm#ch04-SECT-4.3"
TITLE="4.4 Binding Variables"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 4.4 Binding Variables"
BORDER="0"></A
></TD
></TR
></TABLE
>&nbsp;<HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"></DIV
><DIV
CLASS="sect1"
><H2
CLASS="sect1"
><A
CLASS="title"
NAME="ch04-76014"
>4.3 Multirow Queries with Cursor Variables</A
></H2
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="ch-04-BULKROW"
></A
><A
CLASS="indexterm"
NAME="ch-04-multinative"
></A
><A
CLASS="indexterm"
NAME="ch-04-multiqcv"
></A
>Now that you have seen the syntax of OPEN FOR and been introduced to cursor variables, let's explore the nuances involved in multirow queries with NDS.</P
><P
CLASS="para"
>When you execute an OPEN FOR statement, the PL/SQL runtime engine does the following:</P
><OL
CLASS="orderedlist"
><LI
CLASS="listitem"
><P
CLASS="para"
>Associates a cursor variable with the query found in the query string</P
></LI
><LI
CLASS="listitem"
><P
CLASS="para"
>Evaluates any bind arguments and substitutes those values for the placeholders found in the query string</P
></LI
><LI
CLASS="listitem"
><P
CLASS="para"
>Executes the query</P
></LI
><LI
CLASS="listitem"
><P
CLASS="para"
>Identifies the result set</P
></LI
><LI
CLASS="listitem"
><P
CLASS="para"
>Positions the cursor on the first row in the result set</P
></LI
><LI
CLASS="listitem"
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="ch-04-rowcnt"
></A
>Zeros out the rows-processed count returned by %ROWCOUNT</P
></LI
></OL
><P
CLASS="para"
>Note that any bind arguments (provided in the USING clause) in the query are evaluated only when the cursor variable is opened. This means that if you want to use a different set of bind arguments for the same dynamic query, you must issue a new OPEN FOR statement with those arguments. </P
><BLOCKQUOTE
CLASS="tip"
><P
CLASS="para"
><STRONG
>TIP:</STRONG
> This approach is actually less efficient than the DBMS_SQL approach, which will allow you to simply rebind and then execute without having to reparse.</P
></BLOCKQUOTE
><P
CLASS="para"
>To perform a multirow query, you take these steps:</P
><OL
CLASS="orderedlist"
><LI
CLASS="listitem"
><P
CLASS="para"
>Declare a REF CURSOR type (if one is not already available, as it could be if defined in a package specification).</P
></LI
><LI
CLASS="listitem"
><P
CLASS="para"
>Declare a cursor variable based on the REF CURSOR.</P
></LI
><LI
CLASS="listitem"
><P
CLASS="para"
>OPEN the cursor variable FOR your query string.</P
></LI
><LI
CLASS="listitem"
><P
CLASS="para"
>Use the FETCH statement to fetch one row at a time from the query.</P
></LI
><LI
CLASS="listitem"
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="AUTOID-1751"
></A
><A
CLASS="indexterm"
NAME="AUTOID-1753"
></A
><A
CLASS="indexterm"
NAME="AUTOID-1755"
></A
>Check cursor attributes (%FOUND, %NOTFOUND, %ROWCOUNT, %ISOPEN) as necessary.</P
></LI
><LI
CLASS="listitem"
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="AUTOID-1759"
></A
>Close the cursor variable using the normal CLOSE statement.</P
></LI
></OL
><P
CLASS="para"
>Here is a simple program to display the specified column of any table for the rows indicated by the WHERE clause (it will work for number, date, and string columns):<A
CLASS="indexterm"
NAME="AUTOID-1762"
></A
><A
CLASS="indexterm"
NAME="AUTOID-1763"
></A
></P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>/* Filename on companion disk: showcol.sp */
CREATE OR REPLACE PROCEDURE showcol (
   tab IN VARCHAR2, 
   col IN VARCHAR2, 
   whr IN VARCHAR2 := NULL)
IS
   TYPE cv_type IS REF CURSOR;
   cv cv_type; 
   val VARCHAR2(32767);  
BEGIN
   /* Construct the very dynamic query and open the cursor. */
   OPEN cv FOR 
      'SELECT ' || col || 
      '  FROM ' || tab ||
      ' WHERE ' || NVL (whr, '1 = 1');
      
   LOOP
      /* Fetch the next row, and stop if no more rows. */
      FETCH cv INTO val;
      EXIT WHEN cv%NOTFOUND;

      /* Display the data, with a header before the first row. */
      IF cv%ROWCOUNT = 1
      THEN
         DBMS_OUTPUT.PUT_LINE (RPAD ('-', 60, '-'));
         DBMS_OUTPUT.PUT_LINE (
            'Contents of ' || 
            UPPER (tab) || '.' || UPPER (col));
         DBMS_OUTPUT.PUT_LINE (RPAD ('-', 60, '-'));
      END IF;
      DBMS_OUTPUT.PUT_LINE (val);
   END LOOP;
   
   CLOSE cv; --All done, so clean up!
END;
/   </PRE
></BLOCKQUOTE
><P
CLASS="para"
>Here are some examples of output from this procedure:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>SQL&gt; exec showcol ('emp', 'ename', 'deptno=10')
--------------------------------------------------
Contents of EMP.ENAME
--------------------------------------------------
CLARK
KING
MILLER</PRE
></BLOCKQUOTE
><P
CLASS="para"
>I can even combine columns:<A
CLASS="indexterm"
NAME="AUTOID-1768"
></A
></P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>BEGIN
   showcol (
      'emp', 
      'ename || ''-$'' || sal', 
      'comm IS NOT NULL');
END;
/
--------------------------------------------------
Contents of EMP.ENAME || '-$' || SAL
--------------------------------------------------
ALLEN-$1600
WARD-$1250
MARTIN-$1250
TURNER-$1500</PRE
></BLOCKQUOTE
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch04-SECT-3.1"
>4.3.1 FETCH into Variables or Records</A
></H3
><P
CLASS="para"
> <A
CLASS="indexterm"
NAME="ch-04-fetchst"
></A
> <A
CLASS="indexterm"
NAME="ch-04-nds"
></A
>The FETCH statement in the showcol procedure shown in the previous section fetches into an individual variable. You could also FETCH into a sequence of variables, as shown here:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>DECLARE
   TYPE cv_type IS REF CURSOR;
   cv cv_type; 
   mega_bucks company.ceo_compensation%TYPE;
   achieved_by company.layoff_count%TYPE;  
BEGIN
   OPEN cv FOR 
      'SELECT ceo_compensation, layoff_count
        FROM company
       WHERE ' || NVL (whr, '1 = 1');
      
   LOOP
      FETCH cv INTO mega_bucks, achieved_by;</PRE
></BLOCKQUOTE
><P
CLASS="para"
>Working with a long list of variables in the FETCH list gets cumbersome and inflexible: you have to declare the variables, keep that set of values synchronized with the FETCH statement, and so on. To ease our troubles, NDS allows us to fetch into a record, as shown here:<A
CLASS="indexterm"
NAME="AUTOID-1780"
></A
></P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>DECLARE
   TYPE cv_type IS REF CURSOR;
   cv cv_type; 
   ceo_info company%ROWTYPE;
BEGIN
   OPEN cv FOR 
      'SELECT *
        FROM company
       WHERE ' || NVL (whr, '1 = 1');
      
   LOOP
      FETCH cv INTO ceo_info;</PRE
></BLOCKQUOTE
><P
CLASS="para"
>Of course, in many situations you will not want to do a SELECT *; this statement can be very inefficient if your table has hundreds of columns and you only need to work with three of those hundreds. A better approach is to create record TYPEs that correspond to different requirements. The best place to put these structures is in a package specification, so they can be used throughout your application. Here's one such package:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>CREATE OR REPLACE PACKAGE company_struc
IS
   TYPE dynsql_curtype IS REF CURSOR;

   TYPE ceo_info_rt IS RECORD (
      mega_bucks company.ceo_compensation%TYPE,
      achieved_by company.layoff_count%TYPE);

END company_struc;</PRE
></BLOCKQUOTE
><P
CLASS="para"
>With this package in place, I can rewrite my CEO-related code as follows:<A
CLASS="indexterm"
NAME="AUTOID-1785"
></A
></P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>DECLARE
   cur company_struc.dynsql_curtype; 
   rec company_struc.ceo_info_rt; 
BEGIN
   OPEN cv FOR 
      'SELECT ceo_compensation, layoff_count
        FROM company
       WHERE ' || NVL (whr, '1 = 1');
      
   LOOP
      FETCH cv INTO rec;</PRE
></BLOCKQUOTE
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch04-SECT-3.2"
>4.3.2 The USING Clause in OPEN FOR</A
></H3
><P
CLASS="para"
> <A
CLASS="indexterm"
NAME="AUTOID-1790"
></A
> <A
CLASS="indexterm"
NAME="ch-04-usopenst"
></A
>As with the EXECUTE IMMEDIATE statement, you can pass in bind arguments when you open a cursor. You can only provide IN arguments for a query. By using bind arguments you can improve the performance of your SQL also, and also make it easier to write and maintain that code. (See <A
CLASS="xref"
HREF="ch04_04.htm#ch04-SECT-4.3"
>Section 4.4, "Binding Variables</A
> later in this chapter for information about this technique.)</P
><P
CLASS="para"
>Let's revisit the showcol procedure. That procedure accepted a completely generic WHERE clause. Suppose that I have a more specialized requirement: I want to display (or in some other way process) all column information for rows that contain a date column with a value within a certain range. In other words, I want to be able to satisfy this query:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>SELECT ename
  FROM emp
 WHERE hiredate BETWEEN x AND y;</PRE
></BLOCKQUOTE
><P
CLASS="para"
>as well as this query: </P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>SELECT name
  FROM war_criminal
 WHERE killing_date BETWEEN x AND y;</PRE
></BLOCKQUOTE
><P
CLASS="para"
>I also want to make sure that the time component of the date column does not play a role in the WHERE condition.</P
><P
CLASS="para"
>Here is the header for the procedure:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>/* Filename on companion disk: showcol2.sp */
PROCEDURE showcol (
   tab IN VARCHAR2,
   col IN VARCHAR2,
   dtcol IN VARCHAR2,
   dt1 IN DATE,
   dt2 IN DATE := NULL)</PRE
></BLOCKQUOTE
><P
CLASS="para"
>The OPEN FOR statement now contains two placeholders and a USING clause to match:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>OPEN cv FOR 
      'SELECT ' || col || 
      '  FROM ' || tab ||
      ' WHERE ' || dtcol || 
         ' BETWEEN TRUNC (:startdt) 
               AND TRUNC (:enddt)'
   USING dt1, NVL (dt2, dt1+1);</PRE
></BLOCKQUOTE
><P
CLASS="para"
>I have crafted this statement so that if the user does not supply an end date, the WHERE clause returns rows whose date column is the same day as the dt1 provided. The rest of the showcol procedure remains the same, except for some cosmetic changes in the display of the header.</P
><P
CLASS="para"
>The following call to this new version of showcol asks to see the names of all employees hired in 1982:<A
CLASS="indexterm"
NAME="AUTOID-1807"
></A
></P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>BEGIN
   showcol ('emp', 
      'ename', 'hiredate', 
      '01-jan-82', '31-dec-82');
END;
/
----------------------------------------------------------------------
Contents of EMP.ENAME for HIREDATE between 01-JAN-82 and 31-DEC-82
----------------------------------------------------------------------
MILLER</PRE
></BLOCKQUOTE
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch04-SECT-3.3"
>4.3.3 Generic GROUP BY Procedure</A
></H3
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="ch-04-gengroup"
></A
><A
CLASS="indexterm"
NAME="ch-04-genbyprod"
></A
>How many times have you written a query along these lines:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>SELECT some-columns, COUNT(*)
  FROM your-table
 GROUP BY some-columns;</PRE
></BLOCKQUOTE
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="AUTOID-1819"
></A
>And then there is the variation involving the HAVING clause (you don't want to see <EM
CLASS="emphasis"
>all </EM
>the counts, you just want to see those groupings where there is more than one identical value, and so on). These are very common requirements, but with NDS, you can easily build a program that does all the work for you, for any table, and for any single column (and this is extensible to multiple columns as well).</P
><P
CLASS="para"
>Here is the header of such a procedure:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>/* Filename on companion disk: countby.sp */
PROCEDURE countBy (
   tab IN VARCHAR2,
   col IN VARCHAR2, 
   atleast IN INTEGER := NULL,
   sch IN VARCHAR2 := NULL,
   maxlen IN INTEGER := 30)
</PRE
></BLOCKQUOTE
><DL
CLASS="variablelist"
><DT
CLASS="term"
><EM
CLASS="emphasis"
>tab</EM
> </DT
><DD
CLASS="listitem"
><P
CLASS="para"
>The name of the table.</P
></DD
><DT
CLASS="term"
><EM
CLASS="emphasis"
>col</EM
> </DT
><DD
CLASS="listitem"
><P
CLASS="para"
>The name of the column.</P
></DD
><DT
CLASS="term"
><EM
CLASS="emphasis"
>sch</EM
> </DT
><DD
CLASS="listitem"
><P
CLASS="para"
>The name of the schema (default of NULL = USER). </P
></DD
><DT
CLASS="term"
>atleast </DT
><DD
CLASS="listitem"
><P
CLASS="para"
>If you supply a non-NULL value for atleast, then the SELECT statement includes a HAVING COUNT(*) greater than that value.</P
></DD
><DT
CLASS="term"
><EM
CLASS="emphasis"
>maxlen</EM
> </DT
><DD
CLASS="listitem"
><P
CLASS="para"
>Used for formatting of the output.</P
></DD
></DL
><P
CLASS="para"
>You can look at the <I
CLASS="filename"
>countby.sp</I
> file on the companion disk to see the full implementation; here is all the code except that used to do the formatting (header string and so on):</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>IS
   TYPE cv_type IS REF CURSOR;
   cv cv_type;
   
   SQL_string VARCHAR2(32767) := 
      'SELECT ' || col || ', COUNT(*) 
         FROM ' || NVL (sch, USER) || '.' || tab ||
      ' GROUP BY ' || col;
   
   v_val VARCHAR2(32767);
   v_count INTEGER;
BEGIN
   IF atleast IS NOT NULL
   THEN
      SQL_string := SQL_string || ' HAVING COUNT(*) &gt;= ' || atleast;
   END IF;
 
   OPEN cv FOR SQL_String;
   
   LOOP
      FETCH cv INTO v_val, v_count;
      EXIT WHEN cv%NOTFOUND;
      DBMS_OUTPUT.PUT_LINE (RPAD (v_val, maxlen) || ' ' || v_count);
   END LOOP;
   
   CLOSE cv;
END;
/   </PRE
></BLOCKQUOTE
><P
CLASS="para"
>As you start to build more and more of these generic utilities, you will find that it doesn't take very much code or effort&nbsp;-- you just have to think through the steps of the SQL string construction carefully.<A
CLASS="indexterm"
NAME="AUTOID-1853"
></A
><A
CLASS="indexterm"
NAME="AUTOID-1854"
></A
></P
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch04-SECT-3.4"
>4.3.4 Generic GROUP BY Package</A
></H3
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="ch-04-gengroup2"
></A
><A
CLASS="indexterm"
NAME="ch-04-genpak"
></A
>Displaying information is useful for test purposes, but in many cases you want to work with the queried information further, not simply show it. Let's build on the countby procedure shown in the previous section to provide an implementation in which the results of the dynamic query are stored in an index-by table for subsequent analysis. </P
><P
CLASS="para"
>Here is the specification of the package:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>/* Filename on companion disk: countby.pkg */
CREATE OR REPLACE PACKAGE grp
IS
   TYPE results_rt IS RECORD (
      val VARCHAR2(4000),
      countby INTEGER);
      
   TYPE results_tt IS TABLE OF results_rt 
      INDEX BY BINARY_INTEGER;

   FUNCTION countBy (
      tab IN VARCHAR2,
      col IN VARCHAR2, 
      atleast IN INTEGER := NULL,
      sch IN VARCHAR2 := NULL,
      maxlen IN INTEGER := 30)
      RETURN results_tt;
END grp;
/      </PRE
></BLOCKQUOTE
><P
CLASS="para"
>The implementation of the countby function is virtually the same as the procedure. The main difference is that I now have a record structure to fetch into, and an index-by table to fill. You can see both these changes in the loop that fetches the rows:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>LOOP
   FETCH cv INTO rec;
   EXIT WHEN cv%NOTFOUND;
   retval(cv%ROWCOUNT) := rec;
END LOOP;</PRE
></BLOCKQUOTE
><P
CLASS="para"
>With this package in place, I can very easily build programs that access this analytical information. Here is one example:<A
CLASS="indexterm"
NAME="AUTOID-1868"
></A
>:<A
CLASS="indexterm"
NAME="AUTOID-1869"
></A
></P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>/* Filename on companion disk: countby.tst */
DECLARE
   results grp.results_tt;
   indx PLS_INTEGER;
   minrow PLS_INTEGER;
   maxrow PLS_INTEGER;
BEGIN
   results := grp.countby ('employee', 'department_id');
   
   /* Find min and max counts. */
   indx := results.FIRST;
   LOOP
      EXIT WHEN indx IS NULL;

      IF minrow IS NULL OR
         minrow &gt; results(indx).countby
      THEN 
         minrow := indx; 
      END IF;
      
      IF maxrow IS NULL OR
         maxrow &lt; results(indx).countby
      THEN   
         maxrow := indx; 
      END IF;

      /* Perform other processing as well... */

      /* Move to next group count. */
      indx := results.NEXT(indx);
   END LOOP;
END;
/</PRE
></BLOCKQUOTE
></DIV
></DIV
><DIV
CLASS="htmlnav"
><P
></P
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch04_02.htm#ch04-18443"
TITLE="4.2 NDS Statement Summary"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 4.2 NDS Statement Summary"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="book"
HREF="index.htm"
TITLE="Oracle PL/SQL Programming Guide to Oracle 8i Features"
><IMG
SRC="../gifs/txthome.gif"
ALT="Oracle PL/SQL Programming Guide to Oracle 8i Features"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch04_04.htm#ch04-SECT-4.3"
TITLE="4.4 Binding Variables"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 4.4 Binding Variables"
BORDER="0"></A
></TD
></TR
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
>4.2 NDS Statement Summary</TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="index"
HREF="index/idx_0.htm"
TITLE="Book Index"
><IMG
SRC="../gifs/index.gif"
ALT="Book Index"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
>4.4 Binding Variables</TD
></TR
></TABLE
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"></DIV
><IMG SRC="../gifs/smnavbar.gif"
USEMAP="#map"
BORDER="0"
ALT="The Oracle Library Navigation">

<P><font size="-1">
<a href="../copyrght.htm#copy">Copyright (c) 2000</a> O'Reilly &amp; Associates. All rights reserved.
</font></P>

<MAP NAME="map">

<AREA SHAPE="RECT"
COORDS="0,0,35,30"
HREF="../index.htm"
ALT="Library Home">

<AREA SHAPE="RECT"
COORDS="40,0,95,30"
HREF="../prog2/index.htm"
ALT="Oracle PL/SQL Programming, 2nd. Ed.">

<AREA SHAPE="RECT"
COORDS="100,0,200,30"
HREF="index.htm"
ALT="Guide to Oracle 8i Features">

<AREA SHAPE="RECT"
COORDS="205,0,245,30"
HREF="../bipack/index.htm"
ALT="Oracle Built-in Packages">

<AREA SHAPE="RECT"
COORDS="250,0,320,30"
HREF="../advprog/index.htm"
ALT="Advanced PL/SQL Programming with Packages">

<AREA SHAPE="RECT"
COORDS="325,0,420,30"
HREF="../webapp/index.htm"
ALT="Oracle Web Applications">

<AREA SHAPE="RECT"
COORDS="425,0,490,30"
HREF="../langpkt/index.htm"
ALT="Oracle PL/SQL Language Pocket Reference">

<AREA SHAPE="RECT"
COORDS="495,0,570,30"
HREF="../bipkt/index.htm"
ALT="Oracle PL/SQL Built-ins Pocket Reference">
</MAP>

</BODY
>
<!-- Mirrored from liso.cs.pusan.ac.kr by HTTrack Website Copier/3.x [XR&CO'2001] -->
</HTML
>
