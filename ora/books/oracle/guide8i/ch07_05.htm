<HTML
><HEAD
><TITLE
>[Chapter 7] 7.5 LOB Enhancements</TITLE
><META
NAME="DC.Creator"
CONTENT="Steven Feuerstein"><META
NAME="DC.Date"
CONTENT="2000-04-29T19:26:36Z"><META
NAME="DC.Format"
CONTENT="text/html"
SCHEME="MIME"><META
NAME="DC.Identifier"
CONTENT="O'Reilly and Associates CDROM-1-56592-675-7E"><META
NAME="DC.Language"
CONTENT="en-US"><META
NAME="DC.Publisher"
CONTENT="O'Reilly &amp; Associates, Inc."><META
NAME="DC.Source"
CONTENT="1-56592-675-7E"
SCHEME="ISBN"><META
NAME="DC.Subject.Keyword"
CONTENT="Oracle 8i Features"><META
NAME="DC.Title"
CONTENT="Oracle PL/SQL Programming Guide to Oracle 8i Features"><META
NAME="DC.Type"
CONTENT="Text.Monograph"><META
NAME="generator"
CONTENT="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><LINK
REL="stylesheet"
TYPE="text/css"
HREF="../style/style1.css"><LINK
REV="made"
HREF="mailto:online-books@oreilly.com"
TITLE="Online Books Comments"><LINK
REL="up"
HREF="ch07_01.htm"
TITLE="7. New and Enhanced Built-in Packages in Oracle8i"><LINK
REL="prev"
HREF="ch07_04.htm"
TITLE="7.4 UTL_COLL: Using Collection Locators"><LINK
REL="next"
HREF="ch07_06.htm#ch07-SECT-6.4.1"
TITLE="7.6 New DBMS_AQ and DBMS_AQADM Features"></HEAD
><BODY
><DIV
CLASS="htmlnav"
><H1
><IMG
SRC="gifs/smbanner.gif"
ALT="Oracle PL/SQL Programming Guide to Oracle 8i Features"
USEMAP="#srchmap"
BORDER="0"></H1
><MAP
NAME="srchmap"
><AREA
SHAPE="RECT"
COORDS="0,0,466,65"
HREF="index.htm"
ALT="Oracle PL/SQL Programming Guide to Oracle 8i Features"><AREA
SHAPE="RECT"
COORDS="467,0,514,18"
HREF="jobjects/fsearch.htm"
ALT="Search this book"></MAP
><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch07_04.htm"
TITLE="7.4 UTL_COLL: Using Collection Locators"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 7.4 UTL_COLL: Using Collection Locators"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><SPAN
CLASS="NAVTITLE"
><A
CLASS="chapter"
REL="up"
HREF="ch07_01.htm"
TITLE="7. New and Enhanced Built-in Packages in Oracle8i"
>Chapter 7<BR>New and Enhanced Built-in Packages in Oracle8i</A
></SPAN
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch07_06.htm#ch07-SECT-6.4.1"
TITLE="7.6 New DBMS_AQ and DBMS_AQADM Features"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 7.6 New DBMS_AQ and DBMS_AQADM Features"
BORDER="0"></A
></TD
></TR
></TABLE
>&nbsp;<HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"></DIV
><DIV
CLASS="sect1"
><H2
CLASS="sect1"
><A
CLASS="title"
NAME="ch07-41943"
>7.5 LOB Enhancements</A
></H2
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="ch-09-largeobj"
></A
>Oracle8<EM
CLASS="emphasis"
>i</EM
> offers several enhancements to the way you work with large objects (LOBs). It adds a new top-level function, TO_LOB, and also allows you to create and manipulate temporary LOBs.</P
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch07-SECT-5.1"
>7.5.1 The TO_LOB Function</A
></H3
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="AUTOID-4420"
></A
><A
CLASS="indexterm"
NAME="AUTOID-4422"
></A
>Oracle offers a new built-in conversion function, TO_LOB, to convert a LONG or LONG RAW datatype to a LOB. You can apply this function only to a LONG or LONG RAW column, and only in the SELECT list of a subquery in an INSERT statement. This function was designed to allow you to migrate your LONG data to LOB columns, in anticipation of Oracle's discontinuing support for LONGs in a future release.</P
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="AUTOID-4425"
></A
><A
CLASS="indexterm"
NAME="AUTOID-4427"
></A
><A
CLASS="indexterm"
NAME="AUTOID-4429"
></A
><A
CLASS="indexterm"
NAME="AUTOID-4431"
></A
>Before using this function, you must create a LOB column to receive the converted LONG values. To convert LONGs, the LOB column must be of type CLOB (character large object) or NCLOB (NLS character large object). To convert LONG RAWs, the LOB column must be of type BLOB (binary large object). </P
><P
CLASS="para"
>Given the following tables: </P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>CREATE TABLE long_table (n NUMBER, long_col LONG);
CREATE TABLE lob_table (n NUMBER, lob_col CLOB);</PRE
></BLOCKQUOTE
><P
CLASS="para"
>use this function to convert LONG to LOB values as follows: </P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>INSERT INTO lob_table
   SELECT n, TO_LOB(long_col) FROM long_table;</PRE
></BLOCKQUOTE
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch07-SECT-5.2"
>7.5.2 DBMS_LOB: Working with Temporary LOBs</A
></H3
><A
CLASS="indexterm"
NAME="AUTOID-4440"
></A
><P
CLASS="para"
> <A
CLASS="indexterm"
NAME="AUTOID-4443"
></A
> <A
CLASS="indexterm"
NAME="AUTOID-4445"
></A
>Oracle8 provided support for permanently storing large unstructured data by means of LOB datatypes; these are known as <I
CLASS="filename"
>persistent LOBs</I
>. But many applications have a need for <I
CLASS="filename"
>temporary LOBs</I
> that act like local variables but do not exist permanently in the database. This section discusses temporary LOBs and the use of the DBMS_LOB built-in package to manipulate these data structures.</P
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="AUTOID-4450"
></A
><A
CLASS="indexterm"
NAME="AUTOID-4452"
></A
>Oracle8<EM
CLASS="emphasis"
>i</EM
> supports the creation, freeing, access, and update of temporary LOBs through the Oracle Call Interface (OCI) and DBMS_LOB calls. The default lifetime of a temporary LOB is a session, but such LOBs may be explicitly freed sooner by the application. Temporary LOBs are ideal as transient workspaces for data manipulation, and because no logging is done or redo records generated, they offer better performance than persistent LOBs. In addition, remember that whenever you rewrite or update a LOB, Oracle copies the entire LOB to a new segment. Applications that perform lots of piecewise operations on LOBs should see significant performance improvements with temporary LOBs. </P
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="AUTOID-4457"
></A
><A
CLASS="indexterm"
NAME="AUTOID-4459"
></A
><A
CLASS="indexterm"
NAME="AUTOID-4461"
></A
><A
CLASS="indexterm"
NAME="AUTOID-4463"
></A
>A temporary LOB is empty when it is created&nbsp;-- you don't need to (and, in fact, you will not be able to) use the EMPTY_CLOB and EMPTY_BLOB functions to initialize LOB locators for a temporary LOB. By default, all temporary LOBs are deleted at the end of the session in which they were created. If a process dies unexpectedly or if the database crashes, then temporary LOBs are deleted, and the space for temporary LOBs is freed. </P
><P
CLASS="para"
>Let's take a look at the DBMS_LOB programs provided to work with temporary LOBs, follow that with an example, and finish up by covering some of the administrative details.[<A
CLASS="footnote"
HREF="#ch07-pgfId-714736"
>1</A
>]</P
><BLOCKQUOTE
CLASS="footnote"
><DIV
CLASS="footnote"
><P
CLASS="para"
><A
CLASS="footnote"
NAME="ch07-pgfId-714736"
>[1]</A
> For information about the DBMS_LOB package, see <CITE
CLASS="citetitle"
>Oracle Built-in Packages</CITE
>; the next edition of that book will describe temporary LOBs.</P
></DIV
></BLOCKQUOTE
><DIV
CLASS="sect3"
><H4
CLASS="sect3"
><A
CLASS="title"
NAME="ch07-SECT-5.2.1"
>7.5.2.1 CREATETEMPORARY: Creating a temporary LOB</A
></H4
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="AUTOID-4472"
></A
><A
CLASS="indexterm"
NAME="AUTOID-4474"
></A
>Before you can work with a temporary LOB, you need to create it with a call to the CREATETEMPORARY procedure. This program creates a temporary BLOB or CLOB and its corresponding index in your default temporary tablespace. The header is:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>DBMS_LOB.CREATETEMPORARY (
   lob_loc IN OUT NOCOPY [ BLOB | CLOB CHARACTER SET ANY_CS ],
   cache   IN BOOLEAN,
   dur     IN PLS_INTEGER := DBMS_LOB.SESSION);</PRE
></BLOCKQUOTE
><P
CLASS="para"
>The parameters are listed in <A
CLASS="xref"
HREF="ch07_05.htm#ch07-SECT-5.2.1"
>Table 7.9</A
>.</P
><BR><TABLE
CLASS="table"
BORDER="1"
CELLPADDING="3"
><CAPTION
CLASS="table"
><A
CLASS="title"
NAME="ch07-43004"
>Table 7.9: CREATETEMPORARY Parameters </A
></CAPTION
><THEAD
CLASS="thead"
><TR
CLASS="row"
VALIGN="TOP"
><TH
CLASS="entry"
ALIGN="LEFT"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>Parameter</P
></TH
><TH
CLASS="entry"
ALIGN="LEFT"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>Description</P
></TH
></TR
></THEAD
><TBODY
CLASS="tbody"
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="AUTOID-4492"
></A
>lob_loc</P
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>Receives the locator to the LOB.</P
></TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="AUTOID-4499"
></A
>cache</P
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>Specifies whether the LOB should be read into the buffer cache.</P
></TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>dur</P
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="AUTOID-4508"
></A
>Controls the duration of the LOB. The dur argument can be one of the following two named constants:</P
> <DL
CLASS="variablelist"
><DT
CLASS="term"
>DBMS_LOB.SESSION</DT
><DD
CLASS="listitem"
><P
CLASS="para"
>Specifies that the temporary LOB created should be cleaned up (memory freed) at the end of the session. This is the default.</P
></DD
><DT
CLASS="term"
>DBMS_LOB.CALL</DT
><DD
CLASS="listitem"
><P
CLASS="para"
>Specifies that the temporary LOB created should be cleaned up (memory freed) at the end of the current program call in which the LOB was created.</P
></DD
></DL
> </TD
></TR
></TBODY
></TABLE
></DIV
><DIV
CLASS="sect3"
><H4
CLASS="sect3"
><A
CLASS="title"
NAME="ch07-SECT-5.2.2"
>7.5.2.2 FREETEMPORARY: Freeing the temporary LOB</A
></H4
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="AUTOID-4522"
></A
>The FREETEMPORARY procedure frees the temporary BLOB or CLOB in your default temporary tablespace. The header for this procedure is:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>PROCEDURE DBMS_LOB.FREETEMPORARY (
   lob_loc IN OUT NOCOPY 
      [ BLOB | CLOB CHARACTER SET ANY_CS ]); </PRE
></BLOCKQUOTE
><P
CLASS="para"
>After the call to FREETEMPORARY, the LOB locator that was freed (<EM
CLASS="emphasis"
>lob_loc</EM
>) is marked as invalid. If an invalid LOB locator is assigned to another LOB locator through an assignment operation in PL/SQL, then the target of the assignment is also freed and marked as invalid. </P
></DIV
><DIV
CLASS="sect3"
><H4
CLASS="sect3"
><A
CLASS="title"
NAME="ch07-SECT-5.2.3"
>7.5.2.3 ISTEMPORARY: Is it a temporary LOB?</A
></H4
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="ch-07-istempprod"
></A
>The ISTEMPORARY function tells you if the LOB locator (<EM
CLASS="emphasis"
>lob_loc</EM
>) points to a temporary or persistent LOB. The function returns an integer value: 1 means that it is a temporary LOB, 0 means that it is not (it's a persistent LOB instead):</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>DBMS_LOB.ISTEMPORARY (
   lob_loc IN [ BLOB | CLOB CHARACTER SET ANY_CS ])
  RETURN INTEGER;</PRE
></BLOCKQUOTE
><P
CLASS="para"
>This function is designed to be called from within SQL; that, presumably, is the reason that Oracle did not define ISTEMPORARY to be a Boolean function.<A
CLASS="indexterm"
NAME="AUTOID-4535"
></A
></P
></DIV
><DIV
CLASS="sect3"
><H4
CLASS="sect3"
><A
CLASS="title"
NAME="ch07-SECT-5.2.4"
>7.5.2.4 Example</A
></H4
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="AUTOID-4539"
></A
>Let's combine a number of these temporary LOB operations into a single example, found in the <I
CLASS="filename"
>cretemplob.sql</I
> file on the disk. First, I create a directory; this is needed in order to reference a BFILE&nbsp;-- a file locator pointing to an operating system file outside the database:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>/* Filename on companion disk: cretemplob.sql */
CREATE DIRECTORY trainings AS 'E:\Oracle8i-Training';</PRE
></BLOCKQUOTE
><P
CLASS="para"
>Next, I declare my local data structures: a named constant to hide the integer value used to represent "TRUE" by the ISTEMPORARY function, a BLOB to hold the locator to my temporary LOB, a BFILE that points to one of my PowerPoint presentations, and the number of bytes of that presentation that I want to load to my temporary LOB:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>DECLARE
   /* Hide the 1/0 values for ISTEMPORARY. */
   c_truetemp CONSTANT INTEGER := 1;
   
   tempBLOB BLOB;
   
   my_presentation BFILE :=
      /* Note: Must pass the directory in uppercase. */ 
      BFILENAME ('TRAININGS', 'collections.ppt');
      
   lobLength INTEGER := 150000;
BEGIN</PRE
></BLOCKQUOTE
><P
CLASS="para"
>Next, I create my temporary LOB and specify this call or block as the duration of the LOB. By taking this action, I avoid the need for an explicit call to DBMS_LOB. FREETEMPORARY to free the memory associated with the LOB:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>   DBMS_LOB.CREATETEMPORARY (
      tempBLOB, TRUE, DBMS_LOB.CALL);</PRE
></BLOCKQUOTE
><P
CLASS="para"
>Now let's see if this new LOB really <EM
CLASS="emphasis"
>is</EM
> a temporary one:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>      IF DBMS_LOB.ISTEMPORARY (tempBLOB) = c_truetemp
   THEN
      DBMS_OUTPUT.PUT_LINE (
         'It won''t be around for long...');
   END IF;</PRE
></BLOCKQUOTE
><P
CLASS="para"
>On to the real work of the example: transfer a BFILE's contents to a temporary LOB. I will open the BFILE and then use the very convenient LOADFROMFILE procedure to do the transfer:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>   DBMS_LOB.OPEN (
      my_presentation, DBMS_LOB.LOB_READONLY);
   
   DBMS_LOB.LOADFROMFILE (
      tempBLOB, my_presentation, lobLength);</PRE
></BLOCKQUOTE
><P
CLASS="para"
>Notice that I open the BFILE but not the temporary LOB. That's because the OPEN step is optional for the temporary LOB. Now that I have transferred the contents, I will find out the length of the temporary LOB to confirm the transfer, and then close the BFILE:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>   lobLength := DBMS_LOB.GETLENGTH (tempBLOB);
   IF lobLength = 0 
   THEN
       DBMS_OUTPUT.PUT_LINE ('LOB is empty.');
   ELSE
       DBMS_OUTPUT.PUT_LINE (
          'The length is ' || lobLength);
   END IF;
   
   DBMS_LOB.CLOSE(my_presentation);
END;
/</PRE
></BLOCKQUOTE
></DIV
><DIV
CLASS="sect3"
><H4
CLASS="sect3"
><A
CLASS="title"
NAME="ch07-SECT-5.2.5"
>7.5.2.5 Managing temporary LOBs</A
></H4
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="AUTOID-4557"
></A
>Temporary LOBs are handled quite differently from normal, persistent, internal LOBs. With temporary LOBs, there is no support for transaction management, consistent read operations, rollbacks, and so forth. There are various consequences to this lack of support:</P
><UL
CLASS="itemizedlist"
><LI
CLASS="listitem"
><P
CLASS="para"
>If you encounter an error when processing with a temporary LOB, you must free that LOB and start your processing over again.</P
></LI
><LI
CLASS="listitem"
><P
CLASS="para"
>You should not assign multiple LOB locators to the same temporary LOB. Lack of support for consistent read and undo operations can cause performance degradation with multiple locators.</P
></LI
><LI
CLASS="listitem"
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="AUTOID-4566"
></A
><A
CLASS="indexterm"
NAME="AUTOID-4568"
></A
>If a user modifies a temporary LOB while another locator is pointing to it, a copy (referred to by Oracle as a <I
CLASS="filename"
>deep copy</I
>) of that LOB is made. The different locators will then no longer see the same data. To minimize these deep copies, use the NOCOPY compiler hint whenever passing LOB locators as arguments.</P
></LI
><LI
CLASS="listitem"
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="AUTOID-4573"
></A
>To make a temporary LOB permanent, you must call the DBMS_LOB.COPY program and copy the temporary LOB into a permanent one.</P
></LI
><LI
CLASS="listitem"
><P
CLASS="para"
>Temporary LOB locators are unique to a session. You cannot pass a locator from one session to another (through a database pipe, for example), and make the associated temporary LOB visible in that other session.</P
></LI
></UL
><P
CLASS="para"
> <A
CLASS="indexterm"
NAME="AUTOID-4578"
></A
> <A
CLASS="indexterm"
NAME="AUTOID-4580"
></A
>Oracle offers a new V$ view called V$TEMPORARY_LOBS that shows how many cached and uncached LOBs exist per session. Your DBA can combine information from V$TEMPORARY_LOBS and the DBA_SEGMENTS data dictionary view to see how much space a session is using for temporary LOBs.<A
CLASS="indexterm"
NAME="AUTOID-4582"
></A
> </P
></DIV
></DIV
></DIV
><DIV
CLASS="htmlnav"
><P
></P
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch07_04.htm"
TITLE="7.4 UTL_COLL: Using Collection Locators"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 7.4 UTL_COLL: Using Collection Locators"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="book"
HREF="index.htm"
TITLE="Oracle PL/SQL Programming Guide to Oracle 8i Features"
><IMG
SRC="../gifs/txthome.gif"
ALT="Oracle PL/SQL Programming Guide to Oracle 8i Features"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch07_06.htm#ch07-SECT-6.4.1"
TITLE="7.6 New DBMS_AQ and DBMS_AQADM Features"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 7.6 New DBMS_AQ and DBMS_AQADM Features"
BORDER="0"></A
></TD
></TR
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
>7.4 UTL_COLL: Using Collection Locators</TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="index"
HREF="index/idx_0.htm"
TITLE="Book Index"
><IMG
SRC="../gifs/index.gif"
ALT="Book Index"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
>7.6 New DBMS_AQ and DBMS_AQADM Features</TD
></TR
></TABLE
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"></DIV
><IMG SRC="../gifs/smnavbar.gif"
USEMAP="#map"
BORDER="0"
ALT="The Oracle Library Navigation">

<P><font size="-1">
<a href="../copyrght.htm#copy">Copyright (c) 2000</a> O'Reilly &amp; Associates. All rights reserved.
</font></P>

<MAP NAME="map">

<AREA SHAPE="RECT"
COORDS="0,0,35,30"
HREF="../index.htm"
ALT="Library Home">

<AREA SHAPE="RECT"
COORDS="40,0,95,30"
HREF="../prog2/index.htm"
ALT="Oracle PL/SQL Programming, 2nd. Ed.">

<AREA SHAPE="RECT"
COORDS="100,0,200,30"
HREF="index.htm"
ALT="Guide to Oracle 8i Features">

<AREA SHAPE="RECT"
COORDS="205,0,245,30"
HREF="../bipack/index.htm"
ALT="Oracle Built-in Packages">

<AREA SHAPE="RECT"
COORDS="250,0,320,30"
HREF="../advprog/index.htm"
ALT="Advanced PL/SQL Programming with Packages">

<AREA SHAPE="RECT"
COORDS="325,0,420,30"
HREF="../webapp/index.htm"
ALT="Oracle Web Applications">

<AREA SHAPE="RECT"
COORDS="425,0,490,30"
HREF="../langpkt/index.htm"
ALT="Oracle PL/SQL Language Pocket Reference">

<AREA SHAPE="RECT"
COORDS="495,0,570,30"
HREF="../bipkt/index.htm"
ALT="Oracle PL/SQL Built-ins Pocket Reference">
</MAP>

</BODY
>
<!-- Mirrored from liso.cs.pusan.ac.kr by HTTrack Website Copier/3.x [XR&CO'2001] -->
</HTML
>
