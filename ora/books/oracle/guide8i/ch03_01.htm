<HTML
><HEAD
><TITLE
>[Chapter 3] Invoker Rights: Your Schema or Mine? </TITLE
><META
NAME="DC.Creator"
CONTENT="Steven Feuerstein"><META
NAME="DC.Date"
CONTENT="2000-04-29T19:25:03Z"><META
NAME="DC.Format"
CONTENT="text/html"
SCHEME="MIME"><META
NAME="DC.Identifier"
CONTENT="O'Reilly and Associates CDROM-1-56592-675-7E"><META
NAME="DC.Language"
CONTENT="en-US"><META
NAME="DC.Publisher"
CONTENT="O'Reilly &amp; Associates, Inc."><META
NAME="DC.Source"
CONTENT="1-56592-675-7E"
SCHEME="ISBN"><META
NAME="DC.Subject.Keyword"
CONTENT="Oracle 8i Features"><META
NAME="DC.Title"
CONTENT="Oracle PL/SQL Programming Guide to Oracle 8i Features"><META
NAME="DC.Type"
CONTENT="Text.Monograph"><META
NAME="generator"
CONTENT="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><LINK
REL="stylesheet"
TYPE="text/css"
HREF="../style/style1.css"><LINK
REV="made"
HREF="mailto:online-books@oreilly.com"
TITLE="Online Books Comments"><LINK
REL="up"
HREF="index.htm"
TITLE="Oracle PL/SQL Programming Guide to Oracle 8i Features"><LINK
REL="prev"
HREF="ch02_05.htm#ch02-60041"
TITLE="2.5 Examples"><LINK
REL="next"
HREF="ch03_02.htm#ch03-SECT-2.2"
TITLE="3.2 The Invoker Rights Model"></HEAD
><BODY
><DIV
CLASS="htmlnav"
><H1
><IMG
SRC="gifs/smbanner.gif"
ALT="Oracle PL/SQL Programming Guide to Oracle 8i Features"
USEMAP="#srchmap"
BORDER="0"></H1
><MAP
NAME="srchmap"
><AREA
SHAPE="RECT"
COORDS="0,0,466,65"
HREF="index.htm"
ALT="Oracle PL/SQL Programming Guide to Oracle 8i Features"><AREA
SHAPE="RECT"
COORDS="467,0,514,18"
HREF="jobjects/fsearch.htm"
ALT="Search this book"></MAP
><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch02_05.htm#ch02-60041"
TITLE="2.5 Examples"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 2.5 Examples"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><SPAN
CLASS="NAVTITLE"
>Chapter 3</SPAN
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch03_02.htm#ch03-SECT-2.2"
TITLE="3.2 The Invoker Rights Model"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 3.2 The Invoker Rights Model"
BORDER="0"></A
></TD
></TR
></TABLE
>&nbsp;<HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"></DIV
><DIV
CLASS="chapter"
><H1
CLASS="chapter"
><A
CLASS="title"
NAME="ch03-89853"
>3. Invoker Rights: Your Schema or Mine? </A
></H1
><DIV
CLASS="htmltoc"
><P
><B
>Contents:</B
><BR><A
CLASS="sect1"
HREF="#ch03-13999"
TITLE="3.1 A Look at the Definer Rights Model"
>A Look at the Definer Rights Model</A
><BR><A
CLASS="sect1"
HREF="ch03_02.htm#ch03-SECT-2.2"
TITLE="3.2 The Invoker Rights Model"
>The Invoker Rights Model</A
><BR><A
CLASS="sect1"
HREF="ch03_03.htm"
TITLE="3.3 One Program, Multiple Schemas"
>One Program, Multiple Schemas</A
><BR><A
CLASS="sect1"
HREF="ch03_04.htm"
TITLE="3.4 Combining the Definer and Invoker Rights Models"
>Combining the Definer and Invoker Rights Models</A
></P
><P
></P
></DIV
><P
CLASS="para"
><EM
CLASS="emphasis"
>Invoker rights</EM
> refers to a new model for resolving references to database elements (tables, views, objects, programs) in a PL/SQL program unit. </P
><P
CLASS="para"
>Back in the "old days" of Oracle7 and Oracle 8.0 (those days, of course, in which most of us still spend our time), whenever you executed a stored program, it executed under the authority of the owner of that program. This was not a big deal if your entire application&nbsp;-- code, data, and users&nbsp;-- worked out of the same Oracle account, a scenario that probably covers about 0.5% of all Oracle shops. It proved to be a real pain in the neck for the other 99.5%, though, because code was usually stored in one schema and then shared through GRANT EXECUTE statements with other users (directly or through roles).</P
><P
CLASS="para"
>For one thing, that centralized, stored code would not automatically apply the privileges of a user (also known as an <EM
CLASS="emphasis"
>invoker</EM
>) to the code's objects. The user might not have had DELETE privileges on a table, but the stored code did, so delete away! Now, in some circumstances, that is just how you wanted it to work. In other situations, particularly when you were executing programs relying on the DBMS_SQL (dynamic SQL) package, awesome complications could ensue.</P
><P
CLASS="para"
>In Oracle 8.1, PL/SQL has now been enhanced so that at the time of compilation, you can decide whether a program (or all programs in a package) should run under the authority of the definer (the only choice in Oracle 8.0 and earlier) or of the invoker of that program.</P
><DIV
CLASS="sect1"
><H2
CLASS="sect1"
><A
CLASS="title"
NAME="ch03-13999"
>3.1 A Look at the Definer Rights Model</A
></H2
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="ch-03-defrightsmod"
></A
>Before exploring the new invoker rights feature of PL/SQL, let's review the definer rights model. You need to understand the nuances of both models, because most PL/SQL applications will very likely rely on a <EM
CLASS="emphasis"
>combination</EM
> of those models. </P
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="AUTOID-1173"
></A
>Before a PL/SQL program can be executed from within a database instance, it must be compiled and stored in the database itself. Thus, program units are always stored within a specific schema or Oracle account. A program can reference other PL/SQL programs, database tables, and so on. These are called <EM
CLASS="emphasis"
>external references</EM
>, since these database elements are not defined within the current program unit.</P
><P
CLASS="para"
>With the definer rights model, you should keep the following rules in mind:</P
><UL
CLASS="itemizedlist"
><LI
CLASS="listitem"
><P
CLASS="para"
>Any external reference in a program unit is resolved at compile time using the directly granted privileges of the schema in which the program unit is compiled.</P
></LI
><LI
CLASS="listitem"
><P
CLASS="para"
>Database roles are ignored completely at compile time.</P
></LI
><LI
CLASS="listitem"
><P
CLASS="para"
>Whenever you run a program compiled with the definer rights model (the default), it executes under the authority of the schema that owns the program.</P
></LI
><LI
CLASS="listitem"
><P
CLASS="para"
>Although direct grants are needed to compile a program, you can rely on grants of EXECUTE authority to give other schemas the ability to run your program.</P
></LI
></UL
><P
CLASS="para"
><A
CLASS="xref"
HREF="ch03_01.htm"
>Figure 3.1</A
> shows how you can use the definer rights model to control access to underlying data objects. All the order entry data is stored in the OEData schema. All the order entry code is defined in the OECode schema. OECode has been granted the direct privileges necessary to compile the Order_Mgt package, which allows you to both place and cancel orders. </P
><H4
CLASS="figure"
><A
CLASS="title"
NAME="ch03-83552"
>Figure 3.1: Controlling access to data with the definer rights model</A
></H4
><IMG
CLASS="graphic"
SRC="figs/o8if.0301.gif"
ALT="Figure 3.1"><P
CLASS="para"
>To make sure that the orders table is updated properly, no direct access (either via roles or privileges) is allowed to that table through any schema other than OECode. Suppose, for example, that the Sam_Sales schema needs to run through all the outstanding orders and close out old ones. Sam will <EM
CLASS="emphasis"
>not</EM
> be able to issue a DELETE statement from the Close_Old_Orders procedure. Instead, Sam will have to call Order_Mgt.cancel to get the job done. </P
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch03-SECT-1.1"
>3.1.1 The Advantages of Definer Rights</A
></H3
><P
CLASS="para"
>There are certainly situations that cry out for (and are handled well by) the definer rights model. With definer rights:</P
><UL
CLASS="itemizedlist"
><LI
CLASS="listitem"
><P
CLASS="para"
>You are better able to control access to underlying data structures. You can guarantee that the only way the contents of a table can be changed is by going through a specific programmatic interface (usually a package). </P
></LI
><LI
CLASS="listitem"
><P
CLASS="para"
>Application performance improves, because the PL/SQL engine does not have to perform checks at runtime to determine if you have the appropriate privileges or&nbsp;-- just as important&nbsp;-- which object you should actually be manipulating (my accounts table may be quite different from yours!).</P
></LI
><LI
CLASS="listitem"
><P
CLASS="para"
> <A
CLASS="indexterm"
NAME="AUTOID-1203"
></A
> You don't have to worry about manipulating the wrong table. With definer rights, your code will work with the same data structure you would be accessing directly in SQL in your SQL*Plus (or other execution) environment. It is simply more intuitive.</P
></LI
></UL
><P
CLASS="para"
>But there are problems with the definer rights model as well. These are explored in the next sections.</P
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch03-SECT-1.2"
>3.1.2 Where'd My Table Go?</A
></H3
><P
CLASS="para"
>Let's see what all those definer rights rules can mean to a PL/SQL developer on a day-to-day basis. In many database instances, developers write code against tables and views that are owned by other schemas, with public synonyms created for them to hide the schema. Privileges are then granted via database roles.</P
><P
CLASS="para"
>This very common setup can result in some frustrating experiences. Suppose that my organization relies on roles to grant access to objects. I am working with a table called accounts, and can execute this query without any problem in SQL*Plus:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>SQL&gt; SELECT account#, name FROM accounts;</PRE
></BLOCKQUOTE
><P
CLASS="para"
>Yet, when I try to use that same table (same query, even) inside a procedure, I get an error:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>SQL&gt; CREATE OR REPLACE PROCEDURE show_accounts
  2  IS
  3  BEGIN
  4     FOR rec IN (SELECT account#, name FROM accounts)
  5     LOOP
  6        DBMS_OUTPUT.PUT_LINE (rec.name);
  7     END LOOP;
  8  END;
  9  /

Warning: Procedure created with compilation errors.

SQL&gt; sho err
Errors for PROCEDURE SHOW_ACCOUNTS:

LINE/COL ERROR
-------- ------------------------------------------------------
4/16     PL/SQL: SQL Statement ignored
4/43     PLS-00201: identifier 'ACCOUNTS' must be declared</PRE
></BLOCKQUOTE
><P
CLASS="para"
>This doesn't make any sense . . . or does it? The problem is that accounts is actually owned by another schema; I was unknowingly relying on a synonym and roles to get at the data. So if you are ever faced with this seemingly contradictory situation, don't bang your head against the wall in frustration. Instead, obtain the directly granted privileges you require to get the job done.</P
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch03-SECT-1.3"
>3.1.3 How Do I Maintain All That Code?</A
></H3
><P
CLASS="para"
>Suppose that my database instance is set up with a separate schema for each of the regional offices in my company. I build a large body of code that each office uses to analyze and maintain its data. Everybody has the same sets of tables, but the data is different. </P
><P
CLASS="para"
>Now, I would like to install this code so that I spend the absolute minimum amount of time and effort setting up and maintaining the application. The way to do that would be to install the code in one schema and share that code among all the regional office schemas. </P
><P
CLASS="para"
>With the definer rights model, unfortunately, this goal and architecture would be impossible to achieve. If I install the code in a central schema and grant EXECUTE authority to all regional schemas, then all those offices will be working with whatever set of tables is accessible to the central schema (perhaps one particular regional office or, more likely, a dummy set of tables). That's no good. I must instead install this body of code in each separate regional schema, as shown in <A
CLASS="xref"
HREF="ch03_01.htm"
>Figure 3.2</A
>.</P
><H4
CLASS="figure"
><A
CLASS="title"
NAME="ch03-66338"
>Figure 3.2: Repetitive installations of code needed with definer rights</A
></H4
><IMG
CLASS="graphic"
SRC="figs/o8if.0302.gif"
ALT="Figure 3.2"><P
CLASS="para"
>The result is a maintenance and enhancement nightmare. Perhaps invoker rights will give us new options for a better solution.<A
CLASS="indexterm"
NAME="AUTOID-1224"
></A
></P
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch03-SECT-1.4"
>3.1.4 Dynamic SQL and Definer Rights</A
></H3
><P
CLASS="para"
> <A
CLASS="indexterm"
NAME="AUTOID-1228"
></A
> <A
CLASS="indexterm"
NAME="ch-03-dynsqldefrt"
></A
>Another common source of confusion with definer rights occurs when using dynamic SQL. Suppose I create a generic "run DDL" program using DBMS_SQL as follows:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>/* Filename on companion disk: runddl.sp */
CREATE OR REPLACE PROCEDURE runddl (ddl_in in VARCHAR2)
IS
   cur INTEGER:= DBMS_SQL.OPEN_CURSOR;
   fdbk INTEGER;
BEGIN
   DBMS_SQL.PARSE (cur, ddl_in, DBMS_SQL.NATIVE);
   fdbk := DBMS_SQL.EXECUTE (cur);
   DBMS_SQL.CLOSE_CURSOR (cur);
EXCEPTION
   WHEN OTHERS
   THEN   
      DBMS_OUTPUT.PUT_LINE (
         'RunDDL Failure on ' || ddl_in);
      DBMS_OUTPUT.PUT_LINE (SQLERRM);
      DBMS_SQL.CLOSE_CURSOR (cur);
END;
/</PRE
></BLOCKQUOTE
><P
CLASS="para"
>Now, dynamic SQL can be tricky stuff (notice the exception handler that closes the cursor instead of leaving it hanging open&nbsp;-- we often forget housekeeping like this). So I decide to share this neat utility (after testing it in my schema with outstanding results) with everyone else in my development organization. I compile it into the COMMON schema, where all reusable code is managed, grant EXECUTE to public, and create a public synonym. Then I send out an email announcing its availability.</P
><P
CLASS="para"
>A few weeks later, I start getting calls from my coworkers. "Steven, I asked it to create a table and it ran without any errors, but I don't have the table." "Steven, I asked it to drop my table, and runddl said that there is no such table. But I can do a DESCRIBE on it." "Steven. . . ." Well, you get the idea. I begin to have serious doubts about sharing my code with other people. Sheesh, if they can't use something as simple as runddl without screwing things up . . . but I decide to withhold judgment and do some research.</P
><P
CLASS="para"
>I log into the COMMON schema and find that, sure enough, all of the objects people were trying to create or drop or alter were sitting here in COMMON. And then it dawns on me: unless a user of runddl specifies his own schema when he asks to create a table, the results will be most unexpected.</P
><P
CLASS="para"
>In other words, this call to runddl:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>SQL&gt; exec runddl ('create table newone (rightnow DATE)');</PRE
></BLOCKQUOTE
><P
CLASS="para"
>would create the newone table in the COMMON schema. And this call to runddl:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>SQL&gt; exec runddl ('create table scott.newone (rightnow DATE)');</PRE
></BLOCKQUOTE
><P
CLASS="para"
>might solve the problem, but would <EM
CLASS="emphasis"
>fail</EM
> with the following error:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>ORA-01031: insufficient privileges</PRE
></BLOCKQUOTE
><P
CLASS="para"
>unless I grant CREATE ANY TABLE to the COMMON schema. Yikes . . . my attempt to share a useful piece of code got very complicated very fast! It sure would be nice to let people run the runddl procedure under their own authority and not that of COMMON, without having to install multiple copies of the code.<A
CLASS="indexterm"
NAME="AUTOID-1245"
></A
></P
></DIV
></DIV
></DIV
><DIV
CLASS="htmlnav"
><P
></P
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch02_05.htm#ch02-60041"
TITLE="2.5 Examples"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 2.5 Examples"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="book"
HREF="index.htm"
TITLE="Oracle PL/SQL Programming Guide to Oracle 8i Features"
><IMG
SRC="../gifs/txthome.gif"
ALT="Oracle PL/SQL Programming Guide to Oracle 8i Features"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch03_02.htm#ch03-SECT-2.2"
TITLE="3.2 The Invoker Rights Model"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 3.2 The Invoker Rights Model"
BORDER="0"></A
></TD
></TR
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
>2.5 Examples</TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="index"
HREF="index/idx_0.htm"
TITLE="Book Index"
><IMG
SRC="../gifs/index.gif"
ALT="Book Index"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
>3.2 The Invoker Rights Model</TD
></TR
></TABLE
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"></DIV
><IMG SRC="../gifs/smnavbar.gif"
USEMAP="#map"
BORDER="0"
ALT="The Oracle Library Navigation">

<P><font size="-1">
<a href="../copyrght.htm#copy">Copyright (c) 2000</a> O'Reilly &amp; Associates. All rights reserved.
</font></P>

<MAP NAME="map">

<AREA SHAPE="RECT"
COORDS="0,0,35,30"
HREF="../index.htm"
ALT="Library Home">

<AREA SHAPE="RECT"
COORDS="40,0,95,30"
HREF="../prog2/index.htm"
ALT="Oracle PL/SQL Programming, 2nd. Ed.">

<AREA SHAPE="RECT"
COORDS="100,0,200,30"
HREF="index.htm"
ALT="Guide to Oracle 8i Features">

<AREA SHAPE="RECT"
COORDS="205,0,245,30"
HREF="../bipack/index.htm"
ALT="Oracle Built-in Packages">

<AREA SHAPE="RECT"
COORDS="250,0,320,30"
HREF="../advprog/index.htm"
ALT="Advanced PL/SQL Programming with Packages">

<AREA SHAPE="RECT"
COORDS="325,0,420,30"
HREF="../webapp/index.htm"
ALT="Oracle Web Applications">

<AREA SHAPE="RECT"
COORDS="425,0,490,30"
HREF="../langpkt/index.htm"
ALT="Oracle PL/SQL Language Pocket Reference">

<AREA SHAPE="RECT"
COORDS="495,0,570,30"
HREF="../bipkt/index.htm"
ALT="Oracle PL/SQL Built-ins Pocket Reference">
</MAP>

</BODY
>
<!-- Mirrored from liso.cs.pusan.ac.kr by HTTrack Website Copier/3.x [XR&CO'2001] -->
</HTML
>
