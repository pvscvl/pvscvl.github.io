<HTML
><HEAD
><TITLE
>[Chapter 4] Native Dynamic SQL in Oracle8i</TITLE
><META
NAME="DC.Creator"
CONTENT="Steven Feuerstein"><META
NAME="DC.Date"
CONTENT="2000-04-29T19:25:14Z"><META
NAME="DC.Format"
CONTENT="text/html"
SCHEME="MIME"><META
NAME="DC.Identifier"
CONTENT="O'Reilly and Associates CDROM-1-56592-675-7E"><META
NAME="DC.Language"
CONTENT="en-US"><META
NAME="DC.Publisher"
CONTENT="O'Reilly &amp; Associates, Inc."><META
NAME="DC.Source"
CONTENT="1-56592-675-7E"
SCHEME="ISBN"><META
NAME="DC.Subject.Keyword"
CONTENT="Oracle 8i Features"><META
NAME="DC.Title"
CONTENT="Oracle PL/SQL Programming Guide to Oracle 8i Features"><META
NAME="DC.Type"
CONTENT="Text.Monograph"><META
NAME="generator"
CONTENT="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><LINK
REL="stylesheet"
TYPE="text/css"
HREF="../style/style1.css"><LINK
REV="made"
HREF="mailto:online-books@oreilly.com"
TITLE="Online Books Comments"><LINK
REL="up"
HREF="index.htm"
TITLE="Oracle PL/SQL Programming Guide to Oracle 8i Features"><LINK
REL="prev"
HREF="ch03_04.htm"
TITLE="3.4 Combining the Definer and Invoker Rights Models"><LINK
REL="next"
HREF="ch04_02.htm#ch04-18443"
TITLE="4.2 NDS Statement Summary"></HEAD
><BODY
><DIV
CLASS="htmlnav"
><H1
><IMG
SRC="gifs/smbanner.gif"
ALT="Oracle PL/SQL Programming Guide to Oracle 8i Features"
USEMAP="#srchmap"
BORDER="0"></H1
><MAP
NAME="srchmap"
><AREA
SHAPE="RECT"
COORDS="0,0,466,65"
HREF="index.htm"
ALT="Oracle PL/SQL Programming Guide to Oracle 8i Features"><AREA
SHAPE="RECT"
COORDS="467,0,514,18"
HREF="jobjects/fsearch.htm"
ALT="Search this book"></MAP
><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch03_04.htm"
TITLE="3.4 Combining the Definer and Invoker Rights Models"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 3.4 Combining the Definer and Invoker Rights Models"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><SPAN
CLASS="NAVTITLE"
>Chapter 4</SPAN
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch04_02.htm#ch04-18443"
TITLE="4.2 NDS Statement Summary"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 4.2 NDS Statement Summary"
BORDER="0"></A
></TD
></TR
></TABLE
>&nbsp;<HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"></DIV
><DIV
CLASS="chapter"
><H1
CLASS="chapter"
><A
CLASS="title"
NAME="ch04-54462"
>4. Native Dynamic SQL in Oracle8i</A
></H1
><DIV
CLASS="htmltoc"
><P
><B
>Contents:</B
><BR><A
CLASS="sect1"
HREF="#ch04-64055"
TITLE="4.1 DBMS_SQL Versus NDS"
>DBMS_SQL Versus NDS</A
><BR><A
CLASS="sect1"
HREF="ch04_02.htm#ch04-18443"
TITLE="4.2 NDS Statement Summary"
>NDS Statement Summary</A
><BR><A
CLASS="sect1"
HREF="ch04_03.htm"
TITLE="4.3 Multirow Queries with Cursor Variables"
>Multirow Queries with Cursor Variables</A
><BR><A
CLASS="sect1"
HREF="ch04_04.htm#ch04-SECT-4.3"
TITLE="4.4 Binding Variables"
>Binding Variables</A
><BR><A
CLASS="sect1"
HREF="ch04_05.htm"
TITLE="4.5 Working with Objects and Collections"
>Working with Objects and Collections</A
><BR><A
CLASS="sect1"
HREF="ch04_06.htm#ch04-22394"
TITLE="4.6 Building Applications with NDS"
>Building Applications with NDS</A
><BR><A
CLASS="sect1"
HREF="ch04_07.htm"
TITLE="4.7 NDS Utility Package"
>NDS Utility Package</A
></P
><P
></P
></DIV
><P
CLASS="para"
> <A
CLASS="indexterm"
NAME="AUTOID-1435"
></A
>  <A
CLASS="indexterm"
NAME="AUTOID-1437"
></A
><A
CLASS="indexterm"
NAME="AUTOID-1439"
></A
><A
CLASS="indexterm"
NAME="ch-04-natdyn2"
></A
>Ever since Oracle 7.1, we PL/SQL developers have been able to use the built-in DBMS_SQL package to execute dynamic SQL and PL/SQL. This means, for example, that at runtime you can construct a query, a DELETE statement, a CREATE TABLE statement, or even a PL/SQL block as a string&nbsp;-- and then execute it. Dynamic SQL comes in extremely handy when you are building ad hoc query systems, when you need to execute DDL inside PL/SQL, and just generally when you don't know in advance exactly what you need to do or what the user will want to do. Dynamic SQL is a frequent requirement in Web-based applications.</P
><P
CLASS="para"
>But there are some problems with DBMS_SQL:</P
><UL
CLASS="itemizedlist"
><LI
CLASS="listitem"
><P
CLASS="para"
>It is a very complicated package.</P
></LI
><LI
CLASS="listitem"
><P
CLASS="para"
>It has a number of restrictions (such as not recognizing and being able to work with new Oracle8 datatypes). </P
></LI
><LI
CLASS="listitem"
><P
CLASS="para"
>It is relatively slow.</P
></LI
></UL
><P
CLASS="para"
>So our dear friends at PL/SQL Central in Redwood Shores took pity on us all and reimplemented dynamic SQL directly in the PL/SQL language itself. This new facility is called <EM
CLASS="emphasis"
>native dynamic SQL</EM
>. I will refer to it as NDS in this chapter.</P
><P
CLASS="para"
>Here's the free advertisement for Oracle Corporation: NDS is faster and easier than DBMS_SQL. Truth in advertising? Absolutely, although my tests indicate that with the performance enhancements already in place for DBMS_SQL, NDS is on average just slightly faster. There is no doubt, however, that NDS is much easier to use&nbsp;-- when you can use it.</P
><P
CLASS="para"
>Before diving into the syntax and details of NDS, let's take a look at a comparison between the two approaches to dynamic SQL.<A
CLASS="indexterm"
NAME="AUTOID-1455"
></A
></P
><DIV
CLASS="sect1"
><H2
CLASS="sect1"
><A
CLASS="title"
NAME="ch04-64055"
>4.1 DBMS_SQL Versus NDS</A
></H2
><P
CLASS="para"
> <A
CLASS="indexterm"
NAME="AUTOID-1459"
></A
> <A
CLASS="indexterm"
NAME="ch-04-DSQcom"
></A
><A
CLASS="indexterm"
NAME="ch-04-dbmscom"
></A
>Let's compare the DBMS_SQL and NDS implementations of a program that displays all the employees for the specified and very dynamic WHERE clause.</P
><P
CLASS="para"
>The DBMS_SQL implementation:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>CREATE OR REPLACE PROCEDURE showemps (
   where_in IN VARCHAR2 := NULL)
IS
   cur INTEGER := DBMS_SQL.OPEN_CURSOR;
   rec employee%ROWTYPE;
   fdbk INTEGER;
BEGIN
   DBMS_SQL.PARSE
     (cur, 
      'SELECT employee_id, last_name 
         FROM employee 
        WHERE ' || NVL (where_in, '1=1'),
      DBMS_SQL.NATIVE);

   DBMS_SQL.DEFINE_COLUMN (cur, 1, 1);
   DBMS_SQL.DEFINE_COLUMN (cur, 2, user, 30);

   fdbk := DBMS_SQL.EXECUTE (cur);
   LOOP
      /* Fetch next row. Exit when done. */
      EXIT WHEN DBMS_SQL.FETCH_ROWS (cur) = 0;
      DBMS_SQL.COLUMN_VALUE (cur, 1, rec.employee_id);
      DBMS_SQL.COLUMN_VALUE (cur, 2, rec.last_name);
      DBMS_OUTPUT.PUT_LINE (
         TO_CHAR (rec.employee_id) || '=' || 
         rec.last_name);
   END LOOP;

   DBMS_SQL.CLOSE_CURSOR (cur);
END;
/</PRE
></BLOCKQUOTE
><P
CLASS="para"
>The NDS implementation:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>CREATE OR REPLACE PROCEDURE showemps (
   where_in IN VARCHAR2 := NULL)
IS
   TYPE cv_typ IS REF CURSOR;
   cv cv_typ;
   v_id employee.employee_id%TYPE;
   v_nm employee.last_name%TYPE;
BEGIN
   OPEN cv FOR 
      'SELECT employee_id, last_name 
         FROM employee 
        WHERE ' || NVL (where_in, '1=1');
   LOOP
      FETCH cv INTO v_id, v_nm;
      EXIT WHEN cv%NOTFOUND;
      DBMS_OUTPUT.PUT_LINE (
         TO_CHAR (v_id) || '=' || v_nm);
   END LOOP;
   CLOSE cv;
END;
/</PRE
></BLOCKQUOTE
><P
CLASS="para"
>As you can see (and this is true in general), you can write dramatically less code using NDS. And since the code you write relies less on built-in packaged programs and more on native, standard elements of PL/SQL, that code is easier to build, read, and maintain.</P
><P
CLASS="para"
>Given this situation, why would anyone use DBMS_SQL ever again? Because NDS cannot do everything and anything you might want to do. The following lists show the operations that can be performed exclusively by each of these dynamic SQL implementations.<A
CLASS="indexterm"
NAME="AUTOID-1472"
></A
></P
><P
CLASS="para"
>Exclusive NDS capabilities:</P
><UL
CLASS="itemizedlist"
><A
CLASS="indexterm"
NAME="AUTOID-1475"
></A
><A
CLASS="indexterm"
NAME="AUTOID-1477"
></A
><LI
CLASS="listitem"
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="AUTOID-1481"
></A
><A
CLASS="indexterm"
NAME="AUTOID-1483"
></A
><A
CLASS="indexterm"
NAME="AUTOID-1486"
></A
>Works with all SQL datatypes, including user-defined objects and collection types (variable arrays, nested tables, and index-by tables). DBMS_SQL only works with Oracle7-compatible datatypes.</P
></LI
><LI
CLASS="listitem"
><P
CLASS="para"
>Allows you to fetch multiple columns of information directly into a PL/SQL record. With DBMS_SQL, you must fetch into individual variables.</P
></LI
></UL
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="AUTOID-1492"
></A
>Exclusive DBMS_SQL capabilities:</P
><UL
CLASS="itemizedlist"
><LI
CLASS="listitem"
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="AUTOID-1497"
></A
><A
CLASS="indexterm"
NAME="AUTOID-1500"
></A
>Supports Method 4 dynamic SQL, which means that at compile time, you don't know how many columns you will be querying and/or how many bind variables will need to be set. Method 4 is the most complex form of dynamic SQL, and NDS doesn't support it (except under certain restricted circumstances).</P
></LI
><LI
CLASS="listitem"
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="AUTOID-1504"
></A
>As of Oracle8, allows you to describe the columns of your dynamic cursor, obtaining column information in an index-by table of records.</P
></LI
><LI
CLASS="listitem"
><P
CLASS="para"
>Supports SQL statements that are more than 32KB in length.</P
></LI
><LI
CLASS="listitem"
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="AUTOID-1510"
></A
>Supports the use of the RETURNING clause into an array of values; NDS only allows the use of RETURNING for a single statement.</P
></LI
><LI
CLASS="listitem"
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="AUTOID-1514"
></A
><A
CLASS="indexterm"
NAME="AUTOID-1517"
></A
>Allows you to reuse your dynamic SQL cursors, which can improve performance.</P
></LI
><LI
CLASS="listitem"
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="AUTOID-1521"
></A
>Can be executed from client-side (Oracle Developer) applications.</P
></LI
></UL
><P
CLASS="para"
>For more information about DBMS_SQL and the listed capabilities of this code, please see <CITE
CLASS="citetitle"
>Chapter 3</CITE
> of <CITE
CLASS="citetitle"
>Oracle Built-in Packages</CITE
> (O'Reilly &amp; Associates, 1998).</P
><P
CLASS="para"
>What can we conclude from these lists? The NDS implementation will be able to handle something like 80 to 90% of the dynamic SQL requirements you are likely to face. It is good to know, however, that there is still a place for DBMS_SQL (especially since I wrote a 100-page chapter on that package in <CITE
CLASS="citetitle"
>Oracle Built-in Packages</CITE
>).<A
CLASS="indexterm"
NAME="AUTOID-1528"
></A
></P
></DIV
></DIV
><DIV
CLASS="htmlnav"
><P
></P
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch03_04.htm"
TITLE="3.4 Combining the Definer and Invoker Rights Models"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 3.4 Combining the Definer and Invoker Rights Models"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="book"
HREF="index.htm"
TITLE="Oracle PL/SQL Programming Guide to Oracle 8i Features"
><IMG
SRC="../gifs/txthome.gif"
ALT="Oracle PL/SQL Programming Guide to Oracle 8i Features"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch04_02.htm#ch04-18443"
TITLE="4.2 NDS Statement Summary"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 4.2 NDS Statement Summary"
BORDER="0"></A
></TD
></TR
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
>3.4 Combining the Definer and Invoker Rights Models</TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="index"
HREF="index/idx_0.htm"
TITLE="Book Index"
><IMG
SRC="../gifs/index.gif"
ALT="Book Index"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
>4.2 NDS Statement Summary</TD
></TR
></TABLE
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"></DIV
><IMG SRC="../gifs/smnavbar.gif"
USEMAP="#map"
BORDER="0"
ALT="The Oracle Library Navigation">

<P><font size="-1">
<a href="../copyrght.htm#copy">Copyright (c) 2000</a> O'Reilly &amp; Associates. All rights reserved.
</font></P>

<MAP NAME="map">

<AREA SHAPE="RECT"
COORDS="0,0,35,30"
HREF="../index.htm"
ALT="Library Home">

<AREA SHAPE="RECT"
COORDS="40,0,95,30"
HREF="../prog2/index.htm"
ALT="Oracle PL/SQL Programming, 2nd. Ed.">

<AREA SHAPE="RECT"
COORDS="100,0,200,30"
HREF="index.htm"
ALT="Guide to Oracle 8i Features">

<AREA SHAPE="RECT"
COORDS="205,0,245,30"
HREF="../bipack/index.htm"
ALT="Oracle Built-in Packages">

<AREA SHAPE="RECT"
COORDS="250,0,320,30"
HREF="../advprog/index.htm"
ALT="Advanced PL/SQL Programming with Packages">

<AREA SHAPE="RECT"
COORDS="325,0,420,30"
HREF="../webapp/index.htm"
ALT="Oracle Web Applications">

<AREA SHAPE="RECT"
COORDS="425,0,490,30"
HREF="../langpkt/index.htm"
ALT="Oracle PL/SQL Language Pocket Reference">

<AREA SHAPE="RECT"
COORDS="495,0,570,30"
HREF="../bipkt/index.htm"
ALT="Oracle PL/SQL Built-ins Pocket Reference">
</MAP>

</BODY
>
<!-- Mirrored from liso.cs.pusan.ac.kr by HTTrack Website Copier/3.x [XR&CO'2001] -->
</HTML
>
