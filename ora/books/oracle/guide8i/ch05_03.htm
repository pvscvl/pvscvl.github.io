<HTML
><HEAD
><TITLE
>[Chapter 5] 5.3 Bulk Querying with the BULK COLLECT Clause</TITLE
><META
NAME="DC.Creator"
CONTENT="Steven Feuerstein"><META
NAME="DC.Date"
CONTENT="2000-04-29T19:25:52Z"><META
NAME="DC.Format"
CONTENT="text/html"
SCHEME="MIME"><META
NAME="DC.Identifier"
CONTENT="O'Reilly and Associates CDROM-1-56592-675-7E"><META
NAME="DC.Language"
CONTENT="en-US"><META
NAME="DC.Publisher"
CONTENT="O'Reilly &amp; Associates, Inc."><META
NAME="DC.Source"
CONTENT="1-56592-675-7E"
SCHEME="ISBN"><META
NAME="DC.Subject.Keyword"
CONTENT="Oracle 8i Features"><META
NAME="DC.Title"
CONTENT="Oracle PL/SQL Programming Guide to Oracle 8i Features"><META
NAME="DC.Type"
CONTENT="Text.Monograph"><META
NAME="generator"
CONTENT="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><LINK
REL="stylesheet"
TYPE="text/css"
HREF="../style/style1.css"><LINK
REV="made"
HREF="mailto:online-books@oreilly.com"
TITLE="Online Books Comments"><LINK
REL="up"
HREF="ch05_01.htm"
TITLE="5. Bulking Up with PL/SQL 8.1"><LINK
REL="prev"
HREF="ch05_02.htm"
TITLE="5.2 Bulk DML with the FORALL Statement"><LINK
REL="next"
HREF="ch05_04.htm"
TITLE="5.4 Using Cursor Attributes"></HEAD
><BODY
><DIV
CLASS="htmlnav"
><H1
><IMG
SRC="gifs/smbanner.gif"
ALT="Oracle PL/SQL Programming Guide to Oracle 8i Features"
USEMAP="#srchmap"
BORDER="0"></H1
><MAP
NAME="srchmap"
><AREA
SHAPE="RECT"
COORDS="0,0,466,65"
HREF="index.htm"
ALT="Oracle PL/SQL Programming Guide to Oracle 8i Features"><AREA
SHAPE="RECT"
COORDS="467,0,514,18"
HREF="jobjects/fsearch.htm"
ALT="Search this book"></MAP
><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch05_02.htm"
TITLE="5.2 Bulk DML with the FORALL Statement"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 5.2 Bulk DML with the FORALL Statement"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><SPAN
CLASS="NAVTITLE"
><A
CLASS="chapter"
REL="up"
HREF="ch05_01.htm"
TITLE="5. Bulking Up with PL/SQL 8.1"
>Chapter 5<BR>Bulking Up with PL/SQL 8.1</A
></SPAN
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch05_04.htm"
TITLE="5.4 Using Cursor Attributes"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 5.4 Using Cursor Attributes"
BORDER="0"></A
></TD
></TR
></TABLE
>&nbsp;<HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"></DIV
><DIV
CLASS="sect1"
><H2
CLASS="sect1"
><A
CLASS="title"
NAME="ch05-18062"
>5.3 Bulk Querying with the BULK COLLECT Clause</A
></H2
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="ch-05-bulkcoll"
></A
><A
CLASS="indexterm"
NAME="ch-05-bcc"
></A
><A
CLASS="indexterm"
NAME="ch-05-bcclause5"
></A
>So now you know how to perform bulk DML with FORALL. What about bulk querying? I showed an example earlier of the kind of code that cries out for a bulk transfer. Here is the executable section of that example:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>BEGIN
   FOR bad_car IN major_polluters
   LOOP
      names.EXTEND;
      names (major_polluters%ROWCOUNT) := bad_car.name;
      mileages.EXTEND;
      mileages (major_polluters%ROWCOUNT) := bad_car.mileage;
   END LOOP;

   ... now work with data in the arrays ...
END;</PRE
></BLOCKQUOTE
><P
CLASS="para"
>Not only do I have to write a bunch of code, but it is also much slower than I would like, because of the context switches. </P
><P
CLASS="para"
>To help out in this scenario, PL/SQL now offers the BULK COLLECT keywords. This clause in your cursor (explicit or implicit) tells the SQL engine to bulk bind the output from the multiple rows fetched by the query into the specified collections <EM
CLASS="emphasis"
>before</EM
> returning control to the PL/SQL engine. The syntax for this clause is:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>... BULK COLLECT INTO <I
CLASS="replaceable"
>collection_name</I
>[, <I
CLASS="replaceable"
>collection_name</I
>] ...</PRE
></BLOCKQUOTE
><P
CLASS="para"
>where <I
CLASS="filename"
>collection_name</I
> identifies a collection.</P
><P
CLASS="para"
>Here are some rules and restrictions to keep in mind when using BULK COLLECT:</P
><UL
CLASS="itemizedlist"
><LI
CLASS="listitem"
><P
CLASS="para"
> <A
CLASS="indexterm"
NAME="AUTOID-2573"
></A
> <A
CLASS="indexterm"
NAME="AUTOID-2575"
></A
><A
CLASS="indexterm"
NAME="AUTOID-2577"
></A
>You can use these keywords in any of the following clauses: SELECT INTO, FETCH INTO, and RETURNING INTO.</P
></LI
><LI
CLASS="listitem"
><P
CLASS="para"
> <A
CLASS="indexterm"
NAME="AUTOID-2581"
></A
> The collections you reference can only store scalar values (string, number, date). In other words, you cannot fetch a row of data into a record structure that is a row in a collection.</P
></LI
><LI
CLASS="listitem"
><P
CLASS="para"
>The SQL engine automatically initializes and extends the collections you reference in the BULK COLLECT clause. It starts filling the collections at index 1, inserts elements consecutively (densely), and overwrites the values of any elements that were previously defined.</P
></LI
><LI
CLASS="listitem"
><P
CLASS="para"
> <A
CLASS="indexterm"
NAME="AUTOID-2587"
></A
> You cannot use the SELECT...BULK COLLECT statement in a FORALL statement.</P
></LI
></UL
><P
CLASS="para"
>Let's explore these rules and the usefulness of BULK COLLECT through a series of examples.</P
><P
CLASS="para"
>First, here is a recoding of the "major polluters" example using BULK COLLECT:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>DECLARE
   names name_varray;
   mileages number_varray;
BEGIN
   SELECT name, mileage
     FROM cars_and_trucks
     <B
CLASS="emphasis.bold"
>BULK COLLECT INTO names, mileages</B
>
    WHERE vehicle_type IN ('SUV', 'PICKUP');

   ... now work with data in the arrays ...
END;</PRE
></BLOCKQUOTE
><P
CLASS="para"
>I am now able to remove the initialization and extension code from the row-by-row fetch implementation.</P
><P
CLASS="para"
>But I don't have to rely on implicit cursors to get this job done. Here is another re-working of the major polluters example, retaining the explicit cursor:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>DECLARE
   CURSOR major_polluters IS
      SELECT name, mileage
        FROM cars_and_trucks
       WHERE vehicle_type IN ('SUV', 'PICKUP');
   names name_varray;
   mileages number_varray;
BEGIN
   OPEN major_polluters;
   FETCH major_polluters BULK COLLECT INTO names, mileages;

   ... now work with data in the arrays ...
END;</PRE
></BLOCKQUOTE
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="AUTOID-2597"
></A
> recommend that you use this second, explicit cursor-based approach&nbsp;-- and that you store your cursors in packages, so that they can be reused. In fact, the optimal approach would involve a bundling of these operations into a procedure, as follows:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>/* Filename on companion disk: polluters.pkg */
CREATE OR REPLACE PACKAGE pollution
IS
   CURSOR major_polluters (typelist IN VARCHAR2)
   IS
      SELECT name, mileage
        FROM cars_and_trucks
       WHERE INSTR (typelist, vehicle_type) &gt; 0;

   PROCEDURE get_major_polluters (
      typelist IN VARCHAR2,
      names OUT name_varray,
      mileages OUT number_varray);
END;
/

CREATE OR REPLACE PACKAGE BODY pollution
IS
   PROCEDURE get_major_polluters (
      typelist IN VARCHAR2,
      names OUT name_varray,
      mileages OUT number_varray)
   IS
   BEGIN
      IF major_polluters%ISOPEN
      THEN
         CLOSE major_polluters;
      END IF;
      OPEN major_polluters (typelist);
      FETCH major_polluters BULK COLLECT INTO names, mileages;
      CLOSE major_polluters;
   END;
END;
/</PRE
></BLOCKQUOTE
><P
CLASS="para"
>Then I can populate my arrays with a minimum of fuss and a maximum of reusability (of both code and SQL):<A
CLASS="indexterm"
NAME="AUTOID-2601"
></A
></P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>DECLARE
   names name_varray;
   mileages number_varray;
BEGIN
   pollution.get_major_polluters ('SUV,PICKUP');

   ... now work with data in the arrays ...
END;</PRE
></BLOCKQUOTE
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch05-SECT-3.1"
>5.3.1 Restricting Bulk Collection with ROWNUM </A
></H3
><P
CLASS="para"
> <A
CLASS="indexterm"
NAME="AUTOID-2606"
></A
> <A
CLASS="indexterm"
NAME="AUTOID-2608"
></A
> <A
CLASS="indexterm"
NAME="ch-05-resbulk"
></A
>There is no regulator mechanism built into BULK COLLECT. If your SQL statement identifies 100,000 rows of data, then the column values of all 100,000 rows will be loaded into the target collections. This can, of course, cause serious problems in your application&nbsp;-- and in system memory. Remember: these collections are allocated for each session. So if you have 100 users all running the same program that bulk collects 100,000 rows of information, then real memory is needed for a total of 10 million rows.</P
><P
CLASS="para"
>What can you do about this potentially hazardous scenario? First of all (as should be common sense in your application regardless of the use of BULK COLLECT), be careful about the queries you write and those you offer to developers and/or users to run. You shouldn't provide unrestricted access to very large tables.</P
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="AUTOID-2615"
></A
>You can also fall back on ROWNUM to limit the number of rows processed by your query. For example, suppose that my cars_and_trucks table has a <EM
CLASS="emphasis"
>very</EM
> large number of rows of vehicles that qualify as major polluters. I could then add a ROWNUM condition to my WHERE clause and another parameter to my packaged cursor as follows: </P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>CREATE OR REPLACE PACKAGE pollution
IS
   CURSOR major_polluters (
      typelist IN VARCHAR2, maxrows IN INTEGER := NULL)
   IS
      SELECT name, mileage
        FROM cars_and_trucks
       WHERE INSTR (typelist, vehicle_type) &gt; 0
         AND ROWNUM &lt; LEAST (maxrows, 10000);

   PROCEDURE get_major_polluters (
      typelist IN VARCHAR2,
      names OUT name_varray,
      mileages OUT number_varray);
END;
/</PRE
></BLOCKQUOTE
><P
CLASS="para"
>Now there is no way that anyone can ever get more than 10,000 rows in a single query&nbsp;-- and the user of that cursor (an individual developer) can also add a further regulatory capability by overriding that 10,000 with an even smaller number.<A
CLASS="indexterm"
NAME="AUTOID-2620"
></A
></P
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch05-SECT-3.2"
>5.3.2 Bulk Fetching of Multiple Columns</A
></H3
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="ch-05-bfmc"
></A
>As you have seen in previous examples, you certainly can bulk fetch the contents of multiple columns. However, you must fetch them into separate collections, one per column. </P
><P
CLASS="para"
>You cannot fetch into a collection of records (or objects). The following example demonstrates the error that you will receive if you try to do this:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>DECLARE
   TYPE VehTab IS TABLE OF cars_and_trucks%ROWTYPE;
   gas_guzzlers VehTab;
   CURSOR low_mileage_cur IS SELECT * FROM cars_and_trucks WHERE mileage &lt; 10;
BEGIN
   OPEN low_mileage_cur;
   FETCH low_mileage_cur BULK COLLECT INTO gas_guzzlers;
END;
/</PRE
></BLOCKQUOTE
><P
CLASS="para"
>When I run this code, I get the following somewhat obscure error message:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>PLS-00493: invalid reference to a server-side object or 
           function in a local context</PRE
></BLOCKQUOTE
><P
CLASS="para"
>You will instead have to write this block as follows:<A
CLASS="indexterm"
NAME="AUTOID-2632"
></A
></P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>DECLARE
   guzzler_type name_varray;
   guzzler_name name_varray;
   guzzler_mileage number_varray;

   CURSOR low_mileage_cur IS 
      SELECT vehicle_type, name, mileage
        FROM cars_and_trucks WHERE mileage &lt; 10;
BEGIN
   OPEN low_mileage_cur;
   FETCH low_mileage_cur BULK COLLECT 
    INTO guzzler_type, guzzler_name, guzzler_mileage;
END;
/</PRE
></BLOCKQUOTE
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch05-SECT-3.3"
>5.3.3 Using the RETURNING Clause with Bulk Operations</A
></H3
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="ch-05-retclause"
></A
><A
CLASS="indexterm"
NAME="AUTOID-2640"
></A
>You've now seen BULK COLLECT put to use for both implicit and explicit query cursors. You can also use BULK COLLECT inside a FORALL statement, in order to take advantage of the RETURNING clause.</P
><P
CLASS="para"
>The RETURNING clause, new to Oracle8, allows you to obtain information (such as a newly updated value for a salary) from a DML statement. RETURNING can help you avoid additional queries to the database to determine the results of DML operations that just completed.</P
><P
CLASS="para"
>Suppose Congress has passed a law (overriding the almost certain presidential veto) requiring that a company pay its highest-compensated employee no more than 50 times the salary of its lowest-paid employee.[<A
CLASS="footnote"
HREF="#ch05-pgfId-840856"
>1</A
>] I work in the IT department of the newly merged company Northrop-Ford-Mattel-Yahoo-ATT, which employs a total of 250,000 workers. The word has come down from on high: the CEO is not taking a pay cut, so we need to increase the salaries of everyone who makes less than 50 times his 2004 total compensation package of $145 million&nbsp;-- and decrease the salaries of all upper management except for the CEO. After all, somebody's got to make up for this loss in profit. </P
><BLOCKQUOTE
CLASS="footnote"
><DIV
CLASS="footnote"
><P
CLASS="para"
><A
CLASS="footnote"
NAME="ch05-pgfId-840856"
>[1]</A
> Currently in the United States, the average is more like 250 times, a very inequitable situation that almost certainly causes hundreds of thousands of children to go hungry each day in our very rich nation.</P
></DIV
></BLOCKQUOTE
><P
CLASS="para"
>Wow! I have lots of updating to do, and I want to use FORALL to get the job done as quickly as possible. However, I also need to perform various kinds of processing on the employee data and then print a report showing the change in salary for each affected employee. That RETURNING clause would come in awfully handy here, so let's give it a try. </P
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="AUTOID-2648"
></A
>See the <EM
CLASS="emphasis"
>onlyfair.sql</EM
> file on the companion disk for all of the steps shown here, plus table creation and INSERT statements.</P
><P
CLASS="para"
>First, I'll create a reusable function to return the compensation for an executive:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>/* Filename on companion disk: onlyfair.sql */
FUNCTION salforexec (title_in IN VARCHAR2) RETURN NUMBER
IS
   CURSOR ceo_compensation IS
      SELECT salary + bonus + stock_options + 
             mercedes_benz_allowance + yacht_allowance
        FROM compensation
       WHERE title = title_in;       
   big_bucks NUMBER;
BEGIN
   OPEN ceo_compensation; 
   FETCH ceo_compensation INTO big_bucks;
   RETURN big_bucks;
END;
/</PRE
></BLOCKQUOTE
><P
CLASS="para"
>In the main block of the update program, I declare a number of local variables and the following query to identify underpaid employees and overpaid employees who are not lucky enough to be the CEO:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>DECLARE  
   big_bucks NUMBER := salforexec ('CEO');
   min_sal NUMBER := big_bucks / 50;
   names name_varray;
   old_salaries number_varray;
   new_salaries number_varray;
   
   CURSOR affected_employees (ceosal IN NUMBER)
   IS
      SELECT name, salary + bonus old_salary
        FROM compensation
       WHERE title != 'CEO'
         AND ((salary + bonus &lt; ceosal / 50) 
              OR (salary + bonus &gt; ceosal / 10)) ;</PRE
></BLOCKQUOTE
><P
CLASS="para"
>At the start of my executable section, I load all this data into my collections with a BULK COLLECT query:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>OPEN affected_employees (big_bucks);
FETCH affected_employees 
   BULK COLLECT INTO names, old_salaries;</PRE
></BLOCKQUOTE
><P
CLASS="para"
>Then I can use the names collection in my FORALL update:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>FORALL indx IN names.FIRST .. names.LAST
   UPDATE compensation
      SET salary = 
          DECODE (
             GREATEST (min_sal, salary), 
                min_sal, min_sal,
             salary / 5)
    WHERE name = names (indx)
    RETURNING salary BULK COLLECT INTO new_salaries;</PRE
></BLOCKQUOTE
><P
CLASS="para"
>I use DECODE to give an employee either a major boost in yearly income or an 80% cut in pay to keep the CEO comfy. I end it with a RETURNING clause that relies on BULK COLLECT to populate a third collection: the new salaries.</P
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="AUTOID-2661"
></A
>Finally, since I used RETURNING and don't have to write another query against the compensation table to obtain the new salaries, I can immediately move to report generation:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>FOR indx IN names.FIRST .. names.LAST
LOOP
   DBMS_OUTPUT.PUT_LINE (
      RPAD (names(indx), 20) || 
      RPAD (' Old: ' || old_salaries(indx), 15) ||
      ' New: ' || new_salaries(indx)
      );
END LOOP;</PRE
></BLOCKQUOTE
><P
CLASS="para"
>Here, then, is the report generated from the <EM
CLASS="emphasis"
>onlyfair.sql</EM
> script:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>John DayAndNight     Old: 10500     New: 2900000
Holly Cubicle        Old: 52000     New: 2900000
Sandra Watchthebucks Old: 22000000  New: 4000000</PRE
></BLOCKQUOTE
><P
CLASS="para"
>Now everyone can afford quality housing and health care; tax revenue at all levels will increase (nobody's a better tax deadbeat than the ultra-rich), so public schools can get the funding they need. Hey, and rich people are even still rich&nbsp;-- just not <EM
CLASS="emphasis"
>as</EM
> rich as before. Now that is what I call a humming economy!<A
CLASS="indexterm"
NAME="AUTOID-2669"
></A
></P
><BLOCKQUOTE
CLASS="tip"
><P
CLASS="para"
><STRONG
>TIP:</STRONG
> <A
CLASS="indexterm"
NAME="AUTOID-2672"
></A
>The RETURNING column values or expressions returned by each execution in FORALL are added to the collection after the values returned previously. If you use RETURNING inside a non-bulk FOR loop, previous values are overwritten by the latest DML execution.<A
CLASS="indexterm"
NAME="AUTOID-2674"
></A
><A
CLASS="indexterm"
NAME="AUTOID-2675"
></A
></P
></BLOCKQUOTE
></DIV
></DIV
><DIV
CLASS="htmlnav"
><P
></P
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch05_02.htm"
TITLE="5.2 Bulk DML with the FORALL Statement"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 5.2 Bulk DML with the FORALL Statement"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="book"
HREF="index.htm"
TITLE="Oracle PL/SQL Programming Guide to Oracle 8i Features"
><IMG
SRC="../gifs/txthome.gif"
ALT="Oracle PL/SQL Programming Guide to Oracle 8i Features"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch05_04.htm"
TITLE="5.4 Using Cursor Attributes"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 5.4 Using Cursor Attributes"
BORDER="0"></A
></TD
></TR
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
>5.2 Bulk DML with the FORALL Statement</TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="index"
HREF="index/idx_0.htm"
TITLE="Book Index"
><IMG
SRC="../gifs/index.gif"
ALT="Book Index"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
>5.4 Using Cursor Attributes</TD
></TR
></TABLE
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"></DIV
><IMG SRC="../gifs/smnavbar.gif"
USEMAP="#map"
BORDER="0"
ALT="The Oracle Library Navigation">

<P><font size="-1">
<a href="../copyrght.htm#copy">Copyright (c) 2000</a> O'Reilly &amp; Associates. All rights reserved.
</font></P>

<MAP NAME="map">

<AREA SHAPE="RECT"
COORDS="0,0,35,30"
HREF="../index.htm"
ALT="Library Home">

<AREA SHAPE="RECT"
COORDS="40,0,95,30"
HREF="../prog2/index.htm"
ALT="Oracle PL/SQL Programming, 2nd. Ed.">

<AREA SHAPE="RECT"
COORDS="100,0,200,30"
HREF="index.htm"
ALT="Guide to Oracle 8i Features">

<AREA SHAPE="RECT"
COORDS="205,0,245,30"
HREF="../bipack/index.htm"
ALT="Oracle Built-in Packages">

<AREA SHAPE="RECT"
COORDS="250,0,320,30"
HREF="../advprog/index.htm"
ALT="Advanced PL/SQL Programming with Packages">

<AREA SHAPE="RECT"
COORDS="325,0,420,30"
HREF="../webapp/index.htm"
ALT="Oracle Web Applications">

<AREA SHAPE="RECT"
COORDS="425,0,490,30"
HREF="../langpkt/index.htm"
ALT="Oracle PL/SQL Language Pocket Reference">

<AREA SHAPE="RECT"
COORDS="495,0,570,30"
HREF="../bipkt/index.htm"
ALT="Oracle PL/SQL Built-ins Pocket Reference">
</MAP>

</BODY
>
<!-- Mirrored from liso.cs.pusan.ac.kr by HTTrack Website Copier/3.x [XR&CO'2001] -->
</HTML
>
