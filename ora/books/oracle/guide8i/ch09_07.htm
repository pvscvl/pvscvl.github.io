<HTML
><HEAD
><TITLE
>[Chapter 9] 9.7 Using DBMS_JAVA and DBMS_JAVA_TEST</TITLE
><META
NAME="DC.Creator"
CONTENT="Steven Feuerstein"><META
NAME="DC.Date"
CONTENT="2000-04-29T19:27:22Z"><META
NAME="DC.Format"
CONTENT="text/html"
SCHEME="MIME"><META
NAME="DC.Identifier"
CONTENT="O'Reilly and Associates CDROM-1-56592-675-7E"><META
NAME="DC.Language"
CONTENT="en-US"><META
NAME="DC.Publisher"
CONTENT="O'Reilly &amp; Associates, Inc."><META
NAME="DC.Source"
CONTENT="1-56592-675-7E"
SCHEME="ISBN"><META
NAME="DC.Subject.Keyword"
CONTENT="Oracle 8i Features"><META
NAME="DC.Title"
CONTENT="Oracle PL/SQL Programming Guide to Oracle 8i Features"><META
NAME="DC.Type"
CONTENT="Text.Monograph"><META
NAME="generator"
CONTENT="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><LINK
REL="stylesheet"
TYPE="text/css"
HREF="../style/style1.css"><LINK
REV="made"
HREF="mailto:online-books@oreilly.com"
TITLE="Online Books Comments"><LINK
REL="up"
HREF="ch09_01.htm"
TITLE="9. Calling Java from PL/SQL"><LINK
REL="prev"
HREF="ch09_06.htm#ch09-SECT-6.2"
TITLE="9.6 Managing Java in the Database"><LINK
REL="next"
HREF="ch09_08.htm#ch09-SECT-8.1"
TITLE="9.8 Publishing and Using Java in PL/SQL"></HEAD
><BODY
><DIV
CLASS="htmlnav"
><H1
><IMG
SRC="gifs/smbanner.gif"
ALT="Oracle PL/SQL Programming Guide to Oracle 8i Features"
USEMAP="#srchmap"
BORDER="0"></H1
><MAP
NAME="srchmap"
><AREA
SHAPE="RECT"
COORDS="0,0,466,65"
HREF="index.htm"
ALT="Oracle PL/SQL Programming Guide to Oracle 8i Features"><AREA
SHAPE="RECT"
COORDS="467,0,514,18"
HREF="jobjects/fsearch.htm"
ALT="Search this book"></MAP
><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch09_06.htm#ch09-SECT-6.2"
TITLE="9.6 Managing Java in the Database"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 9.6 Managing Java in the Database"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><SPAN
CLASS="NAVTITLE"
><A
CLASS="chapter"
REL="up"
HREF="ch09_01.htm"
TITLE="9. Calling Java from PL/SQL"
>Chapter 9<BR>Calling Java from PL/SQL</A
></SPAN
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch09_08.htm#ch09-SECT-8.1"
TITLE="9.8 Publishing and Using Java in PL/SQL"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 9.8 Publishing and Using Java in PL/SQL"
BORDER="0"></A
></TD
></TR
></TABLE
>&nbsp;<HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"></DIV
><DIV
CLASS="sect1"
><H2
CLASS="sect1"
><A
CLASS="title"
NAME="ch09-79440"
>9.7 Using DBMS_JAVA and DBMS_JAVA_TEST</A
></H2
><P
CLASS="para"
> <A
CLASS="indexterm"
NAME="ch-09-javapak"
></A
> <A
CLASS="indexterm"
NAME="AUTOID-6382"
></A
> <A
CLASS="indexterm"
NAME="ch-09-jpackage"
></A
> <A
CLASS="indexterm"
NAME="AUTOID-6387"
></A
>The new Oracle built-in package DBMS_JAVA gives you access to, and the ability to modify, various characteristics of the Aurora Java Virtual Machine. The DBMS_JAVA_TEST package lets you test your Java stored procedures.</P
><P
CLASS="para"
>The DBMS_JAVA package contains a large number of programs, many of which are intended for Oracle internal use only. Nevertheless, there are a number of very useful programs that we can take advantage of. Most of these programs can also be called within SQL statements. <A
CLASS="xref"
HREF="ch09_07.htm#ch09-SECT-7.2"
>Table 9.5</A
> summarizes the programs.</P
><BR><TABLE
CLASS="table"
BORDER="1"
CELLPADDING="3"
><CAPTION
CLASS="table"
><A
CLASS="title"
NAME="ch09-78602"
>Table 9.5: DBMS_JAVA Programs </A
></CAPTION
><THEAD
CLASS="thead"
><TR
CLASS="row"
VALIGN="TOP"
><TH
CLASS="entry"
ALIGN="LEFT"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>Program</P
></TH
><TH
CLASS="entry"
ALIGN="LEFT"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>Description</P
></TH
></TR
></THEAD
><TBODY
CLASS="tbody"
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>LONGNAME function</P
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="AUTOID-6407"
></A
>Obtains the full (long) Java name for a given Oracle short name</P
></TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>GET_COMPILER_OPTION function</P
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>Looks up an option in the Java options table</P
></TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
> <A
CLASS="indexterm"
NAME="AUTOID-6417"
></A
> SET_COMPILER_OPTION procedure</P
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>Sets a value in the Java options table and creates the table, if one does not exist</P
></TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="ch-09-resetnine"
></A
>RESET_COMPILER_OPTION procedure</P
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>Resets a compiler option in the Java options table</P
></TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
> <A
CLASS="indexterm"
NAME="AUTOID-6431"
></A
> SET_OUTPUT procedure</P
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>Redirects Java output to the DBMS_OUTPUT text buffer</P
></TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="AUTOID-6438"
></A
>EXPORT_SOURCE </P
><P
CLASS="para"
>procedure</P
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>Exports a Java source schema object into an Oracle large object (LOB)</P
></TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="AUTOID-6446"
></A
>EXPORT_RESOURCE procedure</P
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>Exports a Java resource schema object into an Oracle large object (LOB)</P
></TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="AUTOID-6453"
></A
>EXPORT_CLASS </P
><P
CLASS="para"
>procedure</P
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>Exports a Java class schema object into an Oracle large object (LOB)</P
></TD
></TR
></TBODY
></TABLE
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch09-SECT-7.1"
>9.7.1 LONGNAME: Converting Java Long Names</A
></H3
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="AUTOID-6461"
></A
>Java class and method names can easily exceed the maximum SQL identifier length of 30 characters. In such cases, Oracle creates a unique "short name" for the Java code element and uses that name for SQL- and PL/SQL-related access. </P
><P
CLASS="para"
>Use the following function to obtain the full (long) name for a given short name:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>FUNCTION DBMS_JAVA.LONGNAME (shortname VARCHAR2) RETURN VARCHAR2 </PRE
></BLOCKQUOTE
><P
CLASS="para"
>The following query displays the long name for all Java classes defined in the currently connected schema for which the long name and short names do not match:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>/* Filename on companion disk: longname.sql */
SELECT object_name shortname,
       DBMS_JAVA.LONGNAME (object_name) longname
  FROM USER_OBJECTS 
  WHERE object_type = 'JAVA CLASS'
    AND object_name != DBMS_JAVA.LONGNAME (object_name);</PRE
></BLOCKQUOTE
><P
CLASS="para"
>This query is also available inside the myJava package found in the <I
CLASS="filename"
>myJava.pkg</I
> file; its use is shown here. Suppose that I define a class with this name:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>public class DropAnyObjectIdentifiedByTypeAndName {</PRE
></BLOCKQUOTE
><P
CLASS="para"
>That is too long for Oracle, and we can verify that Oracle creates its own short name as follows:<A
CLASS="indexterm"
NAME="AUTOID-6471"
></A
></P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>SQL&gt; exec myjava.showlongnames
Short Name | Long Name
----------------------------------------------------
Short: /247421b0_DropAnyObjectIdentif
Long:  DropAnyObjectIdentifiedByTypeAndName</PRE
></BLOCKQUOTE
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch09-SECT-7.2"
>9.7.2 GET_, SET_, and RESET_COMPILER OPTIONS: Getting and Setting Compiler Options </A
></H3
><P
CLASS="para"
> <A
CLASS="indexterm"
NAME="AUTOID-6476"
></A
> <A
CLASS="indexterm"
NAME="ch-09-getcomp"
></A
>You can also set compiler option values in the database table JAVA$OPTIONS (called the <I
CLASS="filename"
>options table</I
> from here on). Then, you can selectively override those settings using loadjava command-line options. A row in the options table contains the names of source schema objects to which an option setting applies. You can use multiple rows to set the options differently for different source schema objects. </P
><P
CLASS="para"
>The compiler looks up options in the options table unless they are specified on the loadjava command line. If there is no options-table entry or command-line value for an option, the compiler uses the following default values (you can find more information about nondefault values in the <A
CLASS="systemitem.url"
HREF="Oracle8i SQLJ Developer&.html#8217%3Bs%20Guide%20and%20Reference"
>Oracle8i SQLJ Developer's Guide and Reference</A
> documentation): </P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>encoding = latin1
online = true      // applies only to SQLJ source files</PRE
></BLOCKQUOTE
><P
CLASS="para"
>You can get and set options-table entries using the following DBMS_  JAVA functions and procedures: </P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>FUNCTION DBMS_JAVA.GET_COMPILER_OPTION (
   what VARCHAR2, optionName VARCHAR2) 

PROCEDURE DBMS_JAVA.SET_COMPILER_OPTION (
   what VARCHAR2, optionName VARCHAR2, value VARCHAR2) 

PROCEDURE DBMS_JAVA.RESET_COMPILER_OPTION (
   what VARCHAR2, optionName VARCHAR2) </PRE
></BLOCKQUOTE
><P
CLASS="para"
>The parameter <I
CLASS="filename"
>what</I
> is the name of a Java package, the full name of a class, or the empty string. After searching the options table, the compiler selects the row in which <I
CLASS="filename"
>what</I
> most closely matches the full name of the schema object. If <I
CLASS="filename"
>what</I
> is the empty string, it matches the name of any schema object. </P
><P
CLASS="para"
><EM
CLASS="emphasis"
>optionName</EM
> is the name of the option being set. Initially, a schema does not have an options table. To create one, use the procedure DBMS_  JAVA.SET_COMPILER_OPTION to set a <EM
CLASS="emphasis"
>value</EM
>. The procedure creates the table if it does not exist. Enclose parameters in single quotes, as shown in the following example: </P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>SQL&gt; DBMS_JAVA.SET_COMPILER_OPTION ('X.sqlj', 'online', 'false');</PRE
></BLOCKQUOTE
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch09-SECT-7.3"
>9.7.3 SET_OUTPUT: Enabling Output from Java </A
></H3
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="AUTOID-6497"
></A
>  The System.out and System.err classes send their output to the current trace files (when executed within the Oracle database). This is certainly not a very convenient repository if you simply want to test your code to see if it is working properly. DBMS_JAVA supplies a procedure you can call to redirect output to the DBMS_OUTPUT text buffer so that it can be flushed to your SQL*Plus screen automatically. The syntax of this procedure is:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>PROCEDURE DBMS_JAVA.SET_OUTPUT (buffersize NUMBER);</PRE
></BLOCKQUOTE
><P
CLASS="para"
>Here is an example of how you would use this program:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>//* Filename on companion disk:  ssoo.sql */
SET SERVEROUTPUT ON SIZE 1000000
CALL DBMS_JAVA.SET_OUTPUT (1000000);</PRE
></BLOCKQUOTE
><P
CLASS="para"
>Documentation on the interaction between these two commands is skimpy; my testing has uncovered the following rules:</P
><UL
CLASS="itemizedlist"
><LI
CLASS="listitem"
><P
CLASS="para"
>The minimum (and default) buffer size is a measly 2000 bytes; the maximum size is 1,000,000 bytes. You can pass a number outside of that range without causing an error (unless the number is <EM
CLASS="emphasis"
>really</EM
> big); it will simply be ignored.</P
></LI
><LI
CLASS="listitem"
><P
CLASS="para"
>The buffer size specified by SET SERVEROUTPUT supersedes that of DBMS_JAVA.SET_OUTPUT. If, in other words, you provide a smaller value for the DBMS_JAVA call, it will be ignored, and the larger size used.</P
></LI
><LI
CLASS="listitem"
><P
CLASS="para"
>If your output in Java exceeds the buffer size, you will <EM
CLASS="emphasis"
>not</EM
> receive the error you get with DBMS_OUTPUT, namely:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>ORU-10027: buffer overflow, limit of <I
CLASS="replaceable"
>nnn</I
> bytes</PRE
></BLOCKQUOTE
><P
CLASS="para"
>The output will instead be truncated to the buffer size specified, and execution of your code will continue. </P
></LI
></UL
><P
CLASS="para"
>As is the case with DBMS_OUTPUT, you will not see any output from your Java calls until the stored procedure through which they are called finishes executing.<A
CLASS="indexterm"
NAME="AUTOID-6516"
></A
></P
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch09-SECT-7.4"
>9.7.4 EXPORT_SOURCE, _RESOURCE, and _CLASS: Exporting Schema Objects</A
></H3
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="ch-09-exclass"
></A
><A
CLASS="indexterm"
NAME="ch-09-resource"
></A
><A
CLASS="indexterm"
NAME="ch-09-source"
></A
>Oracle's DBMS_JAVA package offers the following set of procedures to export source, resources, and classes:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>PROCEDURE DBMS_JAVA.EXPORT_SOURCE (
   name VARCHAR2,
   [ blob BLOB | clob CLOB ]
   );

PROCEDURE DBMS_JAVA.EXPORT_SOURCE (
   name VARCHAR2,
   schema VARCHAR2,
   [ blob BLOB | clob CLOB ]
   );

PROCEDURE DBMS_JAVA.EXPORT_RESOURCE (
   name VARCHAR2,
   [ blob BLOB | clob CLOB ]
   );

PROCEDURE DBMS_JAVA.EXPORT_RESOURCE (
   name VARCHAR2,
   schema VARCHAR2,
   [ blob BLOB | clob CLOB ]
   );

PROCEDURE DBMS_JAVA.EXPORT_CLASS (
   name VARCHAR2,
   blob BLOB 
   );

PROCEDURE DBMS_JAVA.EXPORT_CLASS (
   name VARCHAR2,
   schema VARCHAR2,
   blob BLOB
   );</PRE
></BLOCKQUOTE
><P
CLASS="para"
>In all cases, <EM
CLASS="emphasis"
>name</EM
> is the name of the Java schema object to be exported, <EM
CLASS="emphasis"
>schema</EM
> is the name of the schema owning the object (if not supplied, then the current schema is used), and <EM
CLASS="emphasis"
>blob|clob</EM
> is the large object that receives the specified Java schema object. </P
><P
CLASS="para"
>You cannot export a class into a CLOB, only into a BLOB. In addition, the internal representation of the source uses the UTF8 format, so that format is used to store the source in the BLOB as well.</P
><P
CLASS="para"
>The following prototype procedure offers an idea of how you might use the export programs to obtain source code of your Java schema objects, when appropriate:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>/* Filename on companion disk: showjava.sp */
CREATE OR REPLACE PROCEDURE show_java_source (
   name IN VARCHAR2,
   schema IN VARCHAR2 := NULL
   )
IS
  b CLOB;
  v VARCHAR2(2000) ;
  i INTEGER ;
BEGIN
  /* Move the Java source code to a CLOB. */
  DBMS_LOB.CREATETEMPORARY (b, FALSE);
  DBMS_JAVA.EXPORT_SOURCE (name, NVL (schema, USER), b);

  /* Read the CLOB to a VARCHAR2 variable and display it. */
  i := 1000;
  DBMS_LOB.READ (b, i, 1, v);
  pl (v); /* run pl.sp to create this procedure */
END;
/</PRE
></BLOCKQUOTE
><P
CLASS="para"
>If I then create a Java source object using the CREATE JAVA statement as follows:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>CREATE OR REPLACE JAVA SOURCE NAMED &quot;Hello&quot; 
AS
   public class Hello {
      public static String hello() {
         return &quot;Hello Oracle World&quot;;   
         }
      };
/</PRE
></BLOCKQUOTE
><P
CLASS="para"
>I can view the source code as shown here (assuming that DBMS_OUTPUT has been enabled):<A
CLASS="indexterm"
NAME="AUTOID-6537"
></A
><A
CLASS="indexterm"
NAME="AUTOID-6538"
></A
><A
CLASS="indexterm"
NAME="AUTOID-6539"
></A
><A
CLASS="indexterm"
NAME="AUTOID-6540"
></A
><A
CLASS="indexterm"
NAME="AUTOID-6541"
></A
></P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>SQL&gt; exec show_java_source ('Hello')
public class Hello {
      public static String hello() {
         return &quot;Hello
 Oracle World&quot;;
         }
      };</PRE
></BLOCKQUOTE
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch09-SECT-7.5"
>9.7.5 Using DBMS_JAVA_TEST </A
></H3
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="ch-09-javatestpak"
></A
><A
CLASS="indexterm"
NAME="ch-09-jtpackage"
></A
>DBMS_  JAVA_TEST provides a facility for testing your Java stored procedures. It contains a single, overloaded function named FUNCALL, as in "function call." It has this header:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>FUNCTION DBMS_JAVA_TEST.FUNCALL (
 class  IN VARCHAR2,
 method IN VARCHAR2,
 s1  IN VARCHAR2 := NULL, s2  IN VARCHAR2 := NULL,
 s3  IN VARCHAR2 := NULL, s4  IN VARCHAR2 := NULL,
 s5  IN VARCHAR2 := NULL, s6  IN VARCHAR2 := NULL,
 s7  IN VARCHAR2 := NULL, s8  IN VARCHAR2 := NULL,
 s9  IN VARCHAR2 := NULL, s10 IN VARCHAR2 := NULL,
 s11 IN VARCHAR2 := NULL, s12 IN VARCHAR2 := NULL,
 s13 IN VARCHAR2 := NULL, s14 IN VARCHAR2 := NULL,
 s15 IN VARCHAR2 := NULL, s16 IN VARCHAR2 := NULL,
 s17 IN VARCHAR2 := NULL, s18 IN VARCHAR2 := NULL,
 s19 IN VARCHAR2 := NULL, s20 IN VARCHAR2 := NULL)
 RETURN VARCHAR2</PRE
></BLOCKQUOTE
><P
CLASS="para"
>In actuality, DBMS_  JAVA_TEST contains 20 overloadings of FUNCALL, each with a different number of s1 through s20 parameters, without any NULL default values. That interface is required for the call through to Java.</P
><P
CLASS="para"
>Here is an example of calling this function: </P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>BEGIN
   p.l (DBMS_JAVA_TEST.FUNCALL (
          'JFile2', 'length', 'd:\java\jfile2.java'));
END;
/</PRE
></BLOCKQUOTE
><BLOCKQUOTE
CLASS="tip"
><P
CLASS="para"
><STRONG
>TIP:</STRONG
> At the time of publication, calls to DBMS_JAVA_TEST.FUNCALL did not return any values; it is unclear whether this functionality is to be used by PL/SQL developers.<A
CLASS="indexterm"
NAME="AUTOID-6557"
></A
><A
CLASS="indexterm"
NAME="AUTOID-6558"
></A
></P
></BLOCKQUOTE
></DIV
></DIV
><DIV
CLASS="htmlnav"
><P
></P
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch09_06.htm#ch09-SECT-6.2"
TITLE="9.6 Managing Java in the Database"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 9.6 Managing Java in the Database"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="book"
HREF="index.htm"
TITLE="Oracle PL/SQL Programming Guide to Oracle 8i Features"
><IMG
SRC="../gifs/txthome.gif"
ALT="Oracle PL/SQL Programming Guide to Oracle 8i Features"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch09_08.htm#ch09-SECT-8.1"
TITLE="9.8 Publishing and Using Java in PL/SQL"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 9.8 Publishing and Using Java in PL/SQL"
BORDER="0"></A
></TD
></TR
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
>9.6 Managing Java in the Database</TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="index"
HREF="index/idx_0.htm"
TITLE="Book Index"
><IMG
SRC="../gifs/index.gif"
ALT="Book Index"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
>9.8 Publishing and Using Java in PL/SQL</TD
></TR
></TABLE
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"></DIV
><IMG SRC="../gifs/smnavbar.gif"
USEMAP="#map"
BORDER="0"
ALT="The Oracle Library Navigation">

<P><font size="-1">
<a href="../copyrght.htm#copy">Copyright (c) 2000</a> O'Reilly &amp; Associates. All rights reserved.
</font></P>

<MAP NAME="map">

<AREA SHAPE="RECT"
COORDS="0,0,35,30"
HREF="../index.htm"
ALT="Library Home">

<AREA SHAPE="RECT"
COORDS="40,0,95,30"
HREF="../prog2/index.htm"
ALT="Oracle PL/SQL Programming, 2nd. Ed.">

<AREA SHAPE="RECT"
COORDS="100,0,200,30"
HREF="index.htm"
ALT="Guide to Oracle 8i Features">

<AREA SHAPE="RECT"
COORDS="205,0,245,30"
HREF="../bipack/index.htm"
ALT="Oracle Built-in Packages">

<AREA SHAPE="RECT"
COORDS="250,0,320,30"
HREF="../advprog/index.htm"
ALT="Advanced PL/SQL Programming with Packages">

<AREA SHAPE="RECT"
COORDS="325,0,420,30"
HREF="../webapp/index.htm"
ALT="Oracle Web Applications">

<AREA SHAPE="RECT"
COORDS="425,0,490,30"
HREF="../langpkt/index.htm"
ALT="Oracle PL/SQL Language Pocket Reference">

<AREA SHAPE="RECT"
COORDS="495,0,570,30"
HREF="../bipkt/index.htm"
ALT="Oracle PL/SQL Built-ins Pocket Reference">
</MAP>

</BODY
>
<!-- Mirrored from liso.cs.pusan.ac.kr by HTTrack Website Copier/3.x [XR&CO'2001] -->
</HTML
>
