<HTML
><HEAD
><TITLE
>[Chapter 9] 9.3 A Simple Demonstration</TITLE
><META
NAME="DC.Creator"
CONTENT="Steven Feuerstein"><META
NAME="DC.Date"
CONTENT="2000-04-29T19:27:11Z"><META
NAME="DC.Format"
CONTENT="text/html"
SCHEME="MIME"><META
NAME="DC.Identifier"
CONTENT="O'Reilly and Associates CDROM-1-56592-675-7E"><META
NAME="DC.Language"
CONTENT="en-US"><META
NAME="DC.Publisher"
CONTENT="O'Reilly &amp; Associates, Inc."><META
NAME="DC.Source"
CONTENT="1-56592-675-7E"
SCHEME="ISBN"><META
NAME="DC.Subject.Keyword"
CONTENT="Oracle 8i Features"><META
NAME="DC.Title"
CONTENT="Oracle PL/SQL Programming Guide to Oracle 8i Features"><META
NAME="DC.Type"
CONTENT="Text.Monograph"><META
NAME="generator"
CONTENT="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><LINK
REL="stylesheet"
TYPE="text/css"
HREF="../style/style1.css"><LINK
REV="made"
HREF="mailto:online-books@oreilly.com"
TITLE="Online Books Comments"><LINK
REL="up"
HREF="ch09_01.htm"
TITLE="9. Calling Java from PL/SQL"><LINK
REL="prev"
HREF="ch09_02.htm#ch09-SECT-2.1"
TITLE="9.2 Getting Ready to Use Java in Oracle"><LINK
REL="next"
HREF="ch09_04.htm"
TITLE="9.4 Using loadjava"></HEAD
><BODY
><DIV
CLASS="htmlnav"
><H1
><IMG
SRC="gifs/smbanner.gif"
ALT="Oracle PL/SQL Programming Guide to Oracle 8i Features"
USEMAP="#srchmap"
BORDER="0"></H1
><MAP
NAME="srchmap"
><AREA
SHAPE="RECT"
COORDS="0,0,466,65"
HREF="index.htm"
ALT="Oracle PL/SQL Programming Guide to Oracle 8i Features"><AREA
SHAPE="RECT"
COORDS="467,0,514,18"
HREF="jobjects/fsearch.htm"
ALT="Search this book"></MAP
><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch09_02.htm#ch09-SECT-2.1"
TITLE="9.2 Getting Ready to Use Java in Oracle"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 9.2 Getting Ready to Use Java in Oracle"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><SPAN
CLASS="NAVTITLE"
><A
CLASS="chapter"
REL="up"
HREF="ch09_01.htm"
TITLE="9. Calling Java from PL/SQL"
>Chapter 9<BR>Calling Java from PL/SQL</A
></SPAN
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch09_04.htm"
TITLE="9.4 Using loadjava"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 9.4 Using loadjava"
BORDER="0"></A
></TD
></TR
></TABLE
>&nbsp;<HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"></DIV
><DIV
CLASS="sect1"
><H2
CLASS="sect1"
><A
CLASS="title"
NAME="ch09-82757"
>9.3 A Simple Demonstration</A
></H2
><P
CLASS="para"
>Before diving into the details, let's just walk through all the different steps needed to access Java from within PL/SQL. In the process, I'll introduce the various pieces of technology you need to get the job done.</P
><P
CLASS="para"
>So here is my challenge: I need to be able to delete a file from within PL/SQL. Prior to Oracle 8.1, I had the following options:</P
><UL
CLASS="itemizedlist"
><LI
CLASS="listitem"
><P
CLASS="para"
>Even in Oracle 7.3, I could send a message to a database pipe, and then have a C listener program grab the message ("Delete file X") and do all the work.</P
></LI
><LI
CLASS="listitem"
><P
CLASS="para"
>In Oracle 8.0, I could set up a library that pointed to a C DLL or shared library, and then from within PL/SQL, call a program in that library to delete the file.</P
></LI
></UL
><P
CLASS="para"
>The pipe technique is handy, but it is a clumsy workaround. The external procedure implementation in Oracle 8.0 is a better solution, but it is far less than straightforward, especially if you don't know the C language.</P
><P
CLASS="para"
>Java, on the other hand, comes with prebuilt (   <I
CLASS="firstterm"
>foundation</I
>) classes that offer clean, easy-to-use APIs to a wide array of functionality, including file I/O.</P
><P
CLASS="para"
>Here are the steps I will perform in this demonstration:</P
><OL
CLASS="orderedlist"
><LI
CLASS="listitem"
><P
CLASS="para"
>Identify the Java functionality I need to access.</P
></LI
><LI
CLASS="listitem"
><P
CLASS="para"
>Build a class of my own to make the underlying Java feature callable through PL/SQL.</P
></LI
><LI
CLASS="listitem"
><P
CLASS="para"
>Compile the class and load it into the database.</P
></LI
><LI
CLASS="listitem"
><P
CLASS="para"
>Build a PL/SQL program to call the class method I created.</P
></LI
><LI
CLASS="listitem"
><P
CLASS="para"
>Delete files from within PL/SQL.</P
></LI
></OL
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch09-SECT-3.1"
>9.3.1 Finding the Java Functionality</A
></H3
><P
CLASS="para"
>My O'Reilly &amp; Associates editor, Deborah Russell, was kind enough to send me a whole bunch of their Java books, so I grabbed the big, fat <EM
CLASS="emphasis"
>Java Fundamental Class Reference</EM
>, by Mark Grand and Jonathan Knudsen, and looked up "File" in the index (sure, I could use HTML documentation, too, but I <EM
CLASS="emphasis"
>like</EM
> books). The entry for "File class" caught my eye and I hurried to page 161.</P
><P
CLASS="para"
>There I found information about the class named java.io.File, namely, that it "provides a set of methods to obtain information about files and directories." Well, fortunately, it doesn't just let you obtain information. It also contains methods (procedures and functions) to delete and rename files, make directories, and so on. I had come to the right place!</P
><P
CLASS="para"
>Here is a portion of the API offered by the File class:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>public class java.io.File {
   public boolean delete();
   public boolean mkdir ();
}</PRE
></BLOCKQUOTE
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="AUTOID-5907"
></A
>I will, in other words, call a Boolean function in Java to delete a file. It the file is deleted, the function returns TRUE; otherwise, it returns FALSE.</P
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch09-SECT-3.2"
>9.3.2 Building a Custom Java Class</A
></H3
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="ch-09-cjcb"
></A
><A
CLASS="indexterm"
NAME="ch-09-cusclass"
></A
>Now, you might be asking yourself: why should Steven have to build his own Java class on top of the File class? Why can't I just call that function directly inside my PL/SQL wrapper? There are two reasons:</P
><UL
CLASS="itemizedlist"
><LI
CLASS="listitem"
><P
CLASS="para"
>A Java class method is, in almost every case (except for static methods), executed for a specific object instantiated from the class. From within PL/SQL, I cannot instantiate a Java object and then call the method against that object. </P
></LI
><LI
CLASS="listitem"
><P
CLASS="para"
>Even though Java and PL/SQL both have Boolean datatypes (  Java even offers a Boolean primitive and a Boolean class), they do not map to each other. I cannot pass a Boolean from Java back directly to a PL/SQL Boolean.</P
></LI
></UL
><P
CLASS="para"
>As a direct consequence, I need to build my own class that will:</P
><UL
CLASS="itemizedlist"
><LI
CLASS="listitem"
><P
CLASS="para"
>Instantiate an object from the File class</P
></LI
><LI
CLASS="listitem"
><P
CLASS="para"
>Execute the delete method against that object</P
></LI
><LI
CLASS="listitem"
><P
CLASS="para"
>Return a value that PL/SQL interprets properly</P
></LI
></UL
><P
CLASS="para"
>Here is the very simple class that I wrote to take advantage of the File.delete method:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>/* Filename on companion disk: JDelete.java */
import java.io.File;

public class JDelete {
 
   public static int delete (String fileName) {
      File myFile = new File (fileName);
      boolean retval = myFile.delete();
      if (retval) return 1; else return 0;
      }
}</PRE
></BLOCKQUOTE
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="AUTOID-5934"
></A
><A
CLASS="xref"
HREF="ch09_03.htm#ch09-SECT-3.2"
>Figure 9.2</A
> explains each of the steps in this code, but the main effect is clear: the JDelete.delete method simply instantiates a dummy File object for the specified filename, so that I can call the delete method for that file. By declaring my method to be static, I make that method available without the need to instantiate an object. Static methods are associated with the <EM
CLASS="emphasis"
>class</EM
> and not with objects declared from that class.</P
><P
CLASS="para"
>This class highlights a number of differences between Java and PL/SQL you should keep in mind:</P
><UL
CLASS="itemizedlist"
><LI
CLASS="listitem"
><P
CLASS="para"
>There are no BEGIN and END statements in Java for blocks, loops, or conditional statements. Instead, you use an open-brace (   { ) to start a block of related code, and a close-brace (  }  ) to close the block. </P
></LI
><LI
CLASS="listitem"
><P
CLASS="para"
>Java is case sensitive; "if " is definitely not the same thing as "IF". </P
></LI
><LI
CLASS="listitem"
><P
CLASS="para"
>The assignment operator is a plain equals sign (=) rather than the complex symbol used in PL/SQL (:=).</P
></LI
><LI
CLASS="listitem"
><P
CLASS="para"
>When you call a method that does not have any arguments (such as delete), you still must provide open and close parentheses. Otherwise, the Java compiler will try to interpret the method as a class member or data structure.</P
></LI
></UL
><H4
CLASS="figure"
><A
CLASS="title"
NAME="ch09-19414"
>Figure 9.2: A simple Java class used to delete a file</A
></H4
><IMG
CLASS="graphic"
SRC="figs/o8if.0902.gif"
ALT="Figure 9.2"><P
CLASS="para"
><A
CLASS="indexterm"
NAME="AUTOID-5952"
></A
>Hey, that was easy! Of course, you didn't watch me fumble around with Java for a day, getting over the nuisance of minor syntax errors, the agony of a case-sensitive language (I have a hard time with operating systems and programming languages that are case sensitive), and confusion concerning setting the CLASSPATH. I'll leave all that to the imagination of my readers&nbsp;-- and your own day of fumbling!<A
CLASS="indexterm"
NAME="AUTOID-5954"
></A
><A
CLASS="indexterm"
NAME="AUTOID-5955"
></A
></P
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch09-SECT-3.3"
>9.3.3 Compiling and Loading into Oracle</A
></H3
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="ch-09-comjava"
></A
><A
CLASS="indexterm"
NAME="ch-09-calio"
></A
>Now that my class is written, I need to compile. To do this I open an MS-DOS session in Windows NT, change to the <I
CLASS="filename"
>d:\Java</I
> directory, and compile the class:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>D:\Java&gt; javac JDelete.java</PRE
></BLOCKQUOTE
><P
CLASS="para"
>Now that it's compiled, I realize that it would make an awful lot of sense to test the function before I stick it inside Oracle and try it from PL/SQL. You are always better off building and testing <EM
CLASS="emphasis"
>incrementally</EM
>. Java gives us an easy way to do this: the main method. If you provide a void method (procedure) called <I
CLASS="firstterm"
>main</I
> in your class&nbsp;-- and give it the right parameter list&nbsp;-- you can then call the class, and this code will execute.</P
><BLOCKQUOTE
CLASS="tip"
><P
CLASS="para"
><STRONG
>TIP:</STRONG
> The main method is one example of how Java treats certain elements in a special way if they have the right signature. Another example is the toString method. If you add a method with this name to your class, then whenever you reference an object of that class where a string is needed, it will automatically call the toString method to display your custom description of the object. </P
></BLOCKQUOTE
><P
CLASS="para"
>So let's add a simple main method to JDelete (shown in bold in the following code):</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>public class JDelete {
   public static int delete ... 
      
<B
CLASS="emphasis.bold"
>&#13;   public static void main (String args[]) {
      System.out.println (
         delete (args[0])
         );
   }</B
>
}</PRE
></BLOCKQUOTE
><P
CLASS="para"
>In other words: call delete for the first value passed to the class and then display the value being returned. Now I will recompile the class and then run it, as shown (this example is taken from a DOS Window):</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>D:\Java&gt;javac JDelete.java

D:\Java&gt;java JDelete c:\temp\te_employee.pks
1

D:\Java&gt;java JDelete c:\temp\te_employee.pks
0</PRE
></BLOCKQUOTE
><P
CLASS="para"
>Notice that the first time I run the main method it displays 1 (TRUE), indicating that the file was deleted. So it will come as no surprise that when I run the same command, main displays 0. It couldn't delete a file that had already been deleted.</P
><P
CLASS="para"
>That didn't take too much work or know-how, did it?</P
><BLOCKQUOTE
CLASS="tip"
><P
CLASS="para"
><STRONG
>TIP:</STRONG
> <A
CLASS="indexterm"
NAME="AUTOID-5980"
></A
>In another demonstration of the superiority of Java over PL/SQL, please note that whereas you have to type 20 characters in PL/SQL to display output (DBMS_OUTPUT.PUT_LINE), you needn't type any more than 18 characters in Java (System.out.println). Give us a <EM
CLASS="emphasis"
>break</EM
>, you language designers!</P
></BLOCKQUOTE
><P
CLASS="para"
>Now that my class compiles and I have verified that the delete method works, I will load it into the SCOTT schema of the Oracle database using the loadjava command:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>D:\Java&gt;loadjava -user scott/tiger -oci8 -resolve JDelete.class</PRE
></BLOCKQUOTE
><P
CLASS="para"
>I can even verify that the class is loaded by querying the contents of the USER_OBJECTS data dictionary via a utility I'll introduce later in this chapter:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>SQL&gt; exec myjava.showobjects
Object Name  Object Type   Status  Timestamp
---------------------------------------------------
Hello        JAVA CLASS    VALID   1999-05-19:16:42
JDelete      JAVA CLASS    VALID   1999-06-07:13:20
JFile2       JAVA CLASS    VALID   1999-05-26:17:07
JFile3       JAVA CLASS    VALID   1999-05-27:12:53</PRE
></BLOCKQUOTE
><P
CLASS="para"
>That takes care of all the Java-specific steps, which means that it's time to return to the cozy world of PL/SQL.<A
CLASS="indexterm"
NAME="AUTOID-5988"
></A
><A
CLASS="indexterm"
NAME="AUTOID-5989"
></A
></P
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch09-SECT-3.4"
>9.3.4 Building a PL/SQL Wrapper</A
></H3
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="ch-09-wrapone"
></A
><A
CLASS="indexterm"
NAME="ch-09-wrapbuil"
></A
>I will now make it easy for anyone connecting to my instance to delete files from within PL/SQL. To accomplish this goal, I will create a PL/SQL wrapper that looks like a PL/SQL function on the outside, but is really nothing more than a pass-through to the underlying Java code.</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>/* Filename on companion disk: fdelete.sf */
CREATE OR REPLACE FUNCTION fDelete (
   file IN VARCHAR2) 
   RETURN NUMBER
AS LANGUAGE JAVA
   NAME 'JDelete.delete (
            java.lang.String) 
            return int';
/</PRE
></BLOCKQUOTE
><P
CLASS="para"
>The implementation of the fdelete function consists of a string describing the Java method invocation. The parameter list must reflect the parameters of the method, but in place of each parameter I specify the fully qualified datatype name. In this case, that means that I cannot simply say "String", but instead must add the full name of the package containing the String class. The RETURN clause simply lists int for integer. The int is a primitive datatype and not a class, so that is the complete specification.<A
CLASS="indexterm"
NAME="AUTOID-6001"
></A
><A
CLASS="indexterm"
NAME="AUTOID-6002"
></A
></P
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch09-SECT-3.5"
>9.3.5 Deleting Files from PL/SQL</A
></H3
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="AUTOID-6006"
></A
><A
CLASS="indexterm"
NAME="AUTOID-6008"
></A
>So I compile the function and then perform my magical, previously difficult if not impossible feat:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>SQL&gt; @fdelete.sf

Function created.

Input truncated to 12 characters
SQL&gt; exec DBMS_OUTPUT.PUT_LINE (
       fdelete('c:\temp\te_employee.pkb'))
1

SQL&gt; exec DBMS_OUTPUT.PUT_LINE (
       fdelete('c:\temp\te_employee.pkb'))
0</PRE
></BLOCKQUOTE
><P
CLASS="para"
>I can also build utilities on top of this function. How about a procedure that deletes all of the files found in the rows of a nested table? Even better, a procedure that accepts a directory name and filter ("all files like *.tmp", for example) and deletes all files found in that directory that pass the filter. </P
><P
CLASS="para"
>In reality, of course, what I should do is build a package and then put all this great new stuff in there. And that is just what I will do in <A
CLASS="xref"
HREF="ch09_09.htm#ch09-SECT-9.1.1"
>Section 9.9</A
>. Before we do that, however, let's take a closer look at each of the steps I just performed. </P
></DIV
></DIV
><DIV
CLASS="htmlnav"
><P
></P
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch09_02.htm#ch09-SECT-2.1"
TITLE="9.2 Getting Ready to Use Java in Oracle"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 9.2 Getting Ready to Use Java in Oracle"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="book"
HREF="index.htm"
TITLE="Oracle PL/SQL Programming Guide to Oracle 8i Features"
><IMG
SRC="../gifs/txthome.gif"
ALT="Oracle PL/SQL Programming Guide to Oracle 8i Features"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch09_04.htm"
TITLE="9.4 Using loadjava"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 9.4 Using loadjava"
BORDER="0"></A
></TD
></TR
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
>9.2 Getting Ready to Use Java in Oracle</TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="index"
HREF="index/idx_0.htm"
TITLE="Book Index"
><IMG
SRC="../gifs/index.gif"
ALT="Book Index"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
>9.4 Using loadjava</TD
></TR
></TABLE
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"></DIV
><IMG SRC="../gifs/smnavbar.gif"
USEMAP="#map"
BORDER="0"
ALT="The Oracle Library Navigation">

<P><font size="-1">
<a href="../copyrght.htm#copy">Copyright (c) 2000</a> O'Reilly &amp; Associates. All rights reserved.
</font></P>

<MAP NAME="map">

<AREA SHAPE="RECT"
COORDS="0,0,35,30"
HREF="../index.htm"
ALT="Library Home">

<AREA SHAPE="RECT"
COORDS="40,0,95,30"
HREF="../prog2/index.htm"
ALT="Oracle PL/SQL Programming, 2nd. Ed.">

<AREA SHAPE="RECT"
COORDS="100,0,200,30"
HREF="index.htm"
ALT="Guide to Oracle 8i Features">

<AREA SHAPE="RECT"
COORDS="205,0,245,30"
HREF="../bipack/index.htm"
ALT="Oracle Built-in Packages">

<AREA SHAPE="RECT"
COORDS="250,0,320,30"
HREF="../advprog/index.htm"
ALT="Advanced PL/SQL Programming with Packages">

<AREA SHAPE="RECT"
COORDS="325,0,420,30"
HREF="../webapp/index.htm"
ALT="Oracle Web Applications">

<AREA SHAPE="RECT"
COORDS="425,0,490,30"
HREF="../langpkt/index.htm"
ALT="Oracle PL/SQL Language Pocket Reference">

<AREA SHAPE="RECT"
COORDS="495,0,570,30"
HREF="../bipkt/index.htm"
ALT="Oracle PL/SQL Built-ins Pocket Reference">
</MAP>

</BODY
>
<!-- Mirrored from liso.cs.pusan.ac.kr by HTTrack Website Copier/3.x [XR&CO'2001] -->
</HTML
>
