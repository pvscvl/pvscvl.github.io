<HTML
><HEAD
><TITLE
>[Chapter 10] 10.4 SQL Operations on Collections</TITLE
><META
NAME="DC.Creator"
CONTENT="Steven Feuerstein"><META
NAME="DC.Date"
CONTENT="2000-04-29T19:27:57Z"><META
NAME="DC.Format"
CONTENT="text/html"
SCHEME="MIME"><META
NAME="DC.Identifier"
CONTENT="O'Reilly and Associates CDROM-1-56592-675-7E"><META
NAME="DC.Language"
CONTENT="en-US"><META
NAME="DC.Publisher"
CONTENT="O'Reilly &amp; Associates, Inc."><META
NAME="DC.Source"
CONTENT="1-56592-675-7E"
SCHEME="ISBN"><META
NAME="DC.Subject.Keyword"
CONTENT="Oracle 8i Features"><META
NAME="DC.Title"
CONTENT="Oracle PL/SQL Programming Guide to Oracle 8i Features"><META
NAME="DC.Type"
CONTENT="Text.Monograph"><META
NAME="generator"
CONTENT="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><LINK
REL="stylesheet"
TYPE="text/css"
HREF="../style/style1.css"><LINK
REV="made"
HREF="mailto:online-books@oreilly.com"
TITLE="Online Books Comments"><LINK
REL="up"
HREF="ch10_01.htm"
TITLE="10. More Goodies for Oracle8i PL/SQL Developers"><LINK
REL="prev"
HREF="ch10_03.htm#ch10-SECT-3.2"
TITLE="10.3 SQL99 Compliance"><LINK
REL="next"
HREF="ch10_05.htm#ch10-SECT-5.2"
TITLE="10.5 Miscellaneous and Minor Improvements"></HEAD
><BODY
><DIV
CLASS="htmlnav"
><H1
><IMG
SRC="gifs/smbanner.gif"
ALT="Oracle PL/SQL Programming Guide to Oracle 8i Features"
USEMAP="#srchmap"
BORDER="0"></H1
><MAP
NAME="srchmap"
><AREA
SHAPE="RECT"
COORDS="0,0,466,65"
HREF="index.htm"
ALT="Oracle PL/SQL Programming Guide to Oracle 8i Features"><AREA
SHAPE="RECT"
COORDS="467,0,514,18"
HREF="jobjects/fsearch.htm"
ALT="Search this book"></MAP
><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch10_03.htm#ch10-SECT-3.2"
TITLE="10.3 SQL99 Compliance"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 10.3 SQL99 Compliance"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><SPAN
CLASS="NAVTITLE"
><A
CLASS="chapter"
REL="up"
HREF="ch10_01.htm"
TITLE="10. More Goodies for Oracle8i PL/SQL Developers"
>Chapter 10<BR>More Goodies for Oracle8i PL/SQL Developers</A
></SPAN
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch10_05.htm#ch10-SECT-5.2"
TITLE="10.5 Miscellaneous and Minor Improvements"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 10.5 Miscellaneous and Minor Improvements"
BORDER="0"></A
></TD
></TR
></TABLE
>&nbsp;<HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"></DIV
><DIV
CLASS="sect1"
><H2
CLASS="sect1"
><A
CLASS="title"
NAME="ch10-30379"
>10.4 SQL Operations on Collections</A
></H2
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="ch-10-coll"
></A
>In Oracle 8.1, you can now more easily use SQL to operate on PL/SQL collections (nested tables and variable arrays). This feature, built upon the CAST operator, allows you to employ SQL capabilities against data stored in such structures, and also to integrate data in these collections with data in tables.</P
><P
CLASS="para"
>Here is the syntax needed to reference a collection inside a query:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>SELECT <I
CLASS="replaceable"
>column_list</I
>
  FROM TABLE (CAST (
       <I
CLASS="replaceable"
>collection</I
> AS <I
CLASS="replaceable"
>collection_type</I
>)) 
       [<I
CLASS="replaceable"
>collection_alias</I
>]</PRE
></BLOCKQUOTE
><P
CLASS="para"
>Where <EM
CLASS="emphasis"
>collection</EM
> is a collection declared in a PL/SQL block, <EM
CLASS="emphasis"
>collection_type</EM
> is the TYPE from which the collection is declared, and <EM
CLASS="emphasis"
>collection_alias</EM
> is an optional alias for the collection-cast-into-table. </P
><P
CLASS="para"
><EM
CLASS="emphasis"
>column_list</EM
> is a list of expressions returned by the query. If the collection TYPE is a nested table or variable array based on a scalar, then <EM
CLASS="emphasis"
>column_list</EM
> must be the keyword COLUMN_VALUE, as shown:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>SELECT COLUMN_VALUE FROM TABLE (CAST ...);</PRE
></BLOCKQUOTE
><P
CLASS="para"
>If the collection is based on an object, then the column list can directly reference individual elements of the object by name.</P
><P
CLASS="para"
>Let's look at a few examples. I will create a type of nested table and a database table to use in the scripts (see <I
CLASS="filename"
>collsql.sql</I
> for the full set of steps):</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>/* Filename on companion disk: collsql.sql */
CREATE TYPE cutbacks_for_taxcuts AS TABLE OF VARCHAR2(100);
/
CREATE TABLE lobbying_results (
   activity VARCHAR2(200));

INSERT INTO lobbying_results 
   VALUES ('No tax on stock transactions');
INSERT INTO lobbying_results 
   VALUES ('Cut city income taxes');</PRE
></BLOCKQUOTE
><P
CLASS="para"
>Then I can merge the data for these two structures together, as follows:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>/* Filename on companion disk: collsql.sql */
DECLARE
   nyc_devolution cutbacks_for_taxcuts := 
      cutbacks_for_taxcuts (
         'Stop rat extermination programs', 
         'Fire building inspectors',
         'Close public hospitals');
BEGIN
   DBMS_OUTPUT.PUT_LINE (
      'How to Make the NYC Rich Much, Much Richer:');
   FOR rec IN (
      SELECT COLUMN_VALUE ohmy
        FROM TABLE (CAST (
               nyc_devolution AS cutbacks_for_taxcuts)) 
      UNION
      SELECT activity FROM lobbying_results)
   LOOP
      DBMS_OUTPUT.PUT_LINE (rec.ohmy);
   END LOOP;
END;
/</PRE
></BLOCKQUOTE
><P
CLASS="para"
>And out comes the following data:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>How to Make the NYC Rich Much, Much Richer:
Close public hospitals
Cut city income taxes
Fire building inspectors
No tax on stock transactions
Stop rat extermination programs</PRE
></BLOCKQUOTE
><P
CLASS="para"
>As you can see, the data is sorted, as will happen automatically with a UNION.</P
><P
CLASS="para"
>Now let's try this capability with a nested table of objects (see <I
CLASS="filename"
>collsql2.sql </I
>):</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>CREATE TYPE labor_source AS OBJECT 
  (labor_type VARCHAR2(30), hourly_rate NUMBER);
/
CREATE TYPE union_busters AS TABLE OF labor_source;
/</PRE
></BLOCKQUOTE
><P
CLASS="para"
>In the following block, I query both members of the object individually, employing an ORDER BY clause to rearrange the data:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>/* Filename on companion disk: collsql2.sql */
DECLARE
   low_wage_pressure union_busters := 
      union_busters (
         labor_source ('Workfare', 0), 
         labor_source ('Prisoner', '5'));
BEGIN
   FOR rec IN (
      SELECT labor_type, hourly_rate 
        FROM TABLE (
           CAST (low_wage_pressure AS union_busters))
       ORDER BY labor_type)
   LOOP
      DBMS_OUTPUT.PUT_LINE (
         rec.labor_type || '-$' || rec.hourly_rate);
   END LOOP;
END;
/</PRE
></BLOCKQUOTE
><P
CLASS="para"
>And we see this output:<A
CLASS="indexterm"
NAME="AUTOID-7493"
></A
></P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>Prisoner-$5
Workfare-$0</PRE
></BLOCKQUOTE
></DIV
><DIV
CLASS="htmlnav"
><P
></P
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch10_03.htm#ch10-SECT-3.2"
TITLE="10.3 SQL99 Compliance"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 10.3 SQL99 Compliance"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="book"
HREF="index.htm"
TITLE="Oracle PL/SQL Programming Guide to Oracle 8i Features"
><IMG
SRC="../gifs/txthome.gif"
ALT="Oracle PL/SQL Programming Guide to Oracle 8i Features"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch10_05.htm#ch10-SECT-5.2"
TITLE="10.5 Miscellaneous and Minor Improvements"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 10.5 Miscellaneous and Minor Improvements"
BORDER="0"></A
></TD
></TR
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
>10.3 SQL99 Compliance</TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="index"
HREF="index/idx_0.htm"
TITLE="Book Index"
><IMG
SRC="../gifs/index.gif"
ALT="Book Index"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
>10.5 Miscellaneous and Minor Improvements</TD
></TR
></TABLE
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"></DIV
><IMG SRC="../gifs/smnavbar.gif"
USEMAP="#map"
BORDER="0"
ALT="The Oracle Library Navigation">

<P><font size="-1">
<a href="../copyrght.htm#copy">Copyright (c) 2000</a> O'Reilly &amp; Associates. All rights reserved.
</font></P>

<MAP NAME="map">

<AREA SHAPE="RECT"
COORDS="0,0,35,30"
HREF="../index.htm"
ALT="Library Home">

<AREA SHAPE="RECT"
COORDS="40,0,95,30"
HREF="../prog2/index.htm"
ALT="Oracle PL/SQL Programming, 2nd. Ed.">

<AREA SHAPE="RECT"
COORDS="100,0,200,30"
HREF="index.htm"
ALT="Guide to Oracle 8i Features">

<AREA SHAPE="RECT"
COORDS="205,0,245,30"
HREF="../bipack/index.htm"
ALT="Oracle Built-in Packages">

<AREA SHAPE="RECT"
COORDS="250,0,320,30"
HREF="../advprog/index.htm"
ALT="Advanced PL/SQL Programming with Packages">

<AREA SHAPE="RECT"
COORDS="325,0,420,30"
HREF="../webapp/index.htm"
ALT="Oracle Web Applications">

<AREA SHAPE="RECT"
COORDS="425,0,490,30"
HREF="../langpkt/index.htm"
ALT="Oracle PL/SQL Language Pocket Reference">

<AREA SHAPE="RECT"
COORDS="495,0,570,30"
HREF="../bipkt/index.htm"
ALT="Oracle PL/SQL Built-ins Pocket Reference">
</MAP>

</BODY
>
<!-- Mirrored from liso.cs.pusan.ac.kr by HTTrack Website Copier/3.x [XR&CO'2001] -->
</HTML
>
