<HTML
><HEAD
><TITLE
>[Chapter 4] 4.6 Building Applications with NDS</TITLE
><META
NAME="DC.Creator"
CONTENT="Steven Feuerstein"><META
NAME="DC.Date"
CONTENT="2000-04-29T19:25:32Z"><META
NAME="DC.Format"
CONTENT="text/html"
SCHEME="MIME"><META
NAME="DC.Identifier"
CONTENT="O'Reilly and Associates CDROM-1-56592-675-7E"><META
NAME="DC.Language"
CONTENT="en-US"><META
NAME="DC.Publisher"
CONTENT="O'Reilly &amp; Associates, Inc."><META
NAME="DC.Source"
CONTENT="1-56592-675-7E"
SCHEME="ISBN"><META
NAME="DC.Subject.Keyword"
CONTENT="Oracle 8i Features"><META
NAME="DC.Title"
CONTENT="Oracle PL/SQL Programming Guide to Oracle 8i Features"><META
NAME="DC.Type"
CONTENT="Text.Monograph"><META
NAME="generator"
CONTENT="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><LINK
REL="stylesheet"
TYPE="text/css"
HREF="../style/style1.css"><LINK
REV="made"
HREF="mailto:online-books@oreilly.com"
TITLE="Online Books Comments"><LINK
REL="up"
HREF="ch04_01.htm"
TITLE="4. Native Dynamic SQL in Oracle8i"><LINK
REL="prev"
HREF="ch04_05.htm"
TITLE="4.5 Working with Objects and Collections"><LINK
REL="next"
HREF="ch04_07.htm"
TITLE="4.7 NDS Utility Package"></HEAD
><BODY
><DIV
CLASS="htmlnav"
><H1
><IMG
SRC="gifs/smbanner.gif"
ALT="Oracle PL/SQL Programming Guide to Oracle 8i Features"
USEMAP="#srchmap"
BORDER="0"></H1
><MAP
NAME="srchmap"
><AREA
SHAPE="RECT"
COORDS="0,0,466,65"
HREF="index.htm"
ALT="Oracle PL/SQL Programming Guide to Oracle 8i Features"><AREA
SHAPE="RECT"
COORDS="467,0,514,18"
HREF="jobjects/fsearch.htm"
ALT="Search this book"></MAP
><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch04_05.htm"
TITLE="4.5 Working with Objects and Collections"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 4.5 Working with Objects and Collections"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><SPAN
CLASS="NAVTITLE"
><A
CLASS="chapter"
REL="up"
HREF="ch04_01.htm"
TITLE="4. Native Dynamic SQL in Oracle8i"
>Chapter 4<BR>Native Dynamic SQL in Oracle8i</A
></SPAN
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch04_07.htm"
TITLE="4.7 NDS Utility Package"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 4.7 NDS Utility Package"
BORDER="0"></A
></TD
></TR
></TABLE
>&nbsp;<HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"></DIV
><DIV
CLASS="sect1"
><H2
CLASS="sect1"
><A
CLASS="title"
NAME="ch04-69897"
>4.6 Building Applications with NDS</A
></H2
><P
CLASS="para"
>By now, you should have a solid understanding of how native dynamic SQL works in PL/SQL. This section covers some topics that you should be aware of as you start to build production applications with this new PL/SQL feature. </P
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch04-SECT-6.1"
>4.6.1 Sharing NDS Programs with Invoker Rights</A
></H3
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="ch-04-sharingnds"
></A
><A
CLASS="indexterm"
NAME="ch-04-snpir"
></A
>I have created a number of useful generic programs in my presentation on NDS, including functions and procedures that do the following:</P
><UL
CLASS="itemizedlist"
><LI
CLASS="listitem"
><P
CLASS="para"
>Execute any DDL statement</P
></LI
><LI
CLASS="listitem"
><P
CLASS="para"
>Return the count of rows in any table</P
></LI
><LI
CLASS="listitem"
><P
CLASS="para"
>Return the count for each grouping by specified column</P
></LI
></UL
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="AUTOID-2098"
></A
><A
CLASS="indexterm"
NAME="AUTOID-2100"
></A
><A
CLASS="indexterm"
NAME="AUTOID-2102"
></A
>These are pretty darn useful utilities and I want to let everyone on my development team use them. So I compile them into the COMMON schema and grant EXECUTE authority on the programs to PUBLIC.</P
><P
CLASS="para"
>However, there is a problem with this strategy. When Sandra connects to her SANDRA schema and executes this command:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>SQL&gt; exec COMMON.execDDL ('create table temp (x date)');</PRE
></BLOCKQUOTE
><P
CLASS="para"
>she will inadvertently create a table in the COMMON schema&nbsp;-- unless I take advantage of the invoker rights model described in <A
CLASS="xref"
HREF="ch03_01.htm"
>Chapter 3, <CITE
CLASS="chapter"
>Invoker Rights: Your Schema or Mine? </CITE
></A
> </P
><P
CLASS="para"
>The invoker rights model means that you define your stored programs so they execute under the authority, and with the privileges, of the invoking schema rather than the defining schema (which is the default in Oracle 8.1 and the only option prior to Oracle 8.1).</P
><P
CLASS="para"
>Fortunately, there isn't much you have to do to take advantage of this new feature. Here is a version of execDDL that executes any DDL statement&nbsp;-- but always having an impact in the calling or invoking schema:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>CREATE OR REPLACE PROCEDURE execDDL (ddl_string IN VARCHAR2)
   AUTHID CURRENT_USER
IS
BEGIN
   EXECUTE IMMEDIATE ddl_string;
END;
/</PRE
></BLOCKQUOTE
><P
CLASS="para"
>I recommend that you use the AUTHID CURRENT_USER clause in <EM
CLASS="emphasis"
>all</EM
> of your dynamic SQL programs, particularly in those that you plan to share among a group of developers. The package discussed at the end of this chapter in <A
CLASS="xref"
HREF="ch04_07.htm"
>Section 4.7, "NDS Utility Package</A
>" follows this standard.<A
CLASS="indexterm"
NAME="AUTOID-2114"
></A
><A
CLASS="indexterm"
NAME="AUTOID-2115"
></A
></P
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch04-SECT-6.2"
>4.6.2 Error Handling</A
></H3
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="ch-04-errhand"
></A
><A
CLASS="indexterm"
NAME="ch-04-errorhan"
></A
>Any robust application needs to anticipate and handle errors. Error detection and correction with dynamic SQL can be especially challenging.</P
><P
CLASS="para"
>Sometimes the most challenging aspect to building and executing dynamic SQL programs is getting the string of dynamic SQL correct. You might be combining a list of columns in a query with a list of tables and then a WHERE clause that changes with each execution. You have to concatenate that stuff, getting the commas right, the ANDs and ORs right, and so on. What happens if you get it wrong? </P
><P
CLASS="para"
>Well, Oracle raises an error. And this error usually tells you exactly what is wrong with the SQL string, but that information can still leave lots to be desired and figured out. Consider the following nightmare scenario: I am building the most complicated PL/SQL application ever. It uses dynamic SQL left and right, but that's OK. I am a pro at the new NDS. I can, in a flash, type EXECUTE IMMEDIATE, OPEN FOR, and all the other statements I need. I blast through the development phase. I also rely on some standard exception-handling programs I have built that display an error message when an exception is encountered.</P
><P
CLASS="para"
>Then the time comes to test my application. I build a test script that runs through a lot of my code; I place it in a file named <I
CLASS="filename"
>testall.sql</I
> (you'll find it on the companion disk). With trembling fingers, I start my test:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>SQL&gt; @testall</PRE
></BLOCKQUOTE
><P
CLASS="para"
>And, to my severe disappointment, here is what shows up on my screen:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>ORA-00942: table or view does not exist
ORA-00904: invalid column name
ORA-00921: unexpected end of SQL command
ORA-00936: missing expression</PRE
></BLOCKQUOTE
><P
CLASS="para"
>Now, what am I supposed to make of all these error messages? Which error message goes with which SQL statement? Bottom line: when you do lots of dynamic SQL, it is very easy to get very confused and waste lots of time debugging your code&nbsp;-- unless you take precautions <EM
CLASS="emphasis"
>as</EM
> you write your dynamic SQL.</P
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="ch-04-eis2"
></A
>Here are my recommendations:</P
><UL
CLASS="itemizedlist"
><LI
CLASS="listitem"
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="ch-04-openfsthree"
></A
>Always include an error handling section in code that calls EXECUTE IMMEDIATE and OPEN FOR.</P
></LI
><LI
CLASS="listitem"
><P
CLASS="para"
>In each handler, record and/or display the error message <EM
CLASS="emphasis"
>and</EM
> the SQL statement when an error occurs.</P
></LI
></UL
><P
CLASS="para"
>How do these recommendations translate into changes in your code? First, let's apply these changes to the execDDL routine, and then generalize from there. Here is the starting point:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>CREATE OR REPLACE PROCEDURE execDDL (ddl_string IN VARCHAR2)
   AUTHID CURRENT_USER IS
BEGIN
   EXECUTE IMMEDIATE ddl_string;
END;</PRE
></BLOCKQUOTE
><P
CLASS="para"
>Now let's add an error handling section to show us problems when they occur:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>/* Filename on companion disk: execddl.sp */
CREATE OR REPLACE PROCEDURE execDDL (ddl_string IN VARCHAR2)
   AUTHID CURRENT_USER IS
BEGIN
   EXECUTE IMMEDIATE ddl_string;
EXCEPTION
   WHEN OTHERS
   THEN
      DBMS_OUTPUT.PUT_LINE (
         'Dynamic SQL Failure: ' || SQLERRM);
      DBMS_OUTPUT.PUT_LINE (
         '   on statement: &quot;' || ddl_string || '&quot;');
      RAISE;
END;</PRE
></BLOCKQUOTE
><P
CLASS="para"
>When I use this version to attempt to create a table using really bad syntax, this is what I see:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>SQL&gt; exec execddl ('create table x')
Dynamic SQL Failure: ORA-00906: missing left parenthesis
   on statement: &quot;create table x&quot;</PRE
></BLOCKQUOTE
><P
CLASS="para"
>Of course, in your production version, you might want to consider something a bit more sophisticated than the DBMS_OUTPUT built-in package.</P
><BLOCKQUOTE
CLASS="tip"
><P
CLASS="para"
><STRONG
>TIP:</STRONG
> With DBMS_SQL, if your parse request fails and you do not explicitly close your cursor in the error section, that cursor remains open (and uncloseable), leading to possible "maximum open cursors exceeded" errors. This will not happen with NDS; cursor variables declared in a local scope are automatically closed&nbsp;-- and memory released&nbsp;-- when the block terminates.</P
></BLOCKQUOTE
><P
CLASS="para"
>Now let's broaden our view a bit: when you think about it, the execDDL procedure is not really specific to DDL statements. It can be used to execute <EM
CLASS="emphasis"
>any</EM
> SQL string that does not require either USING or INTO clauses. From that perspective, we now have a single program that can and should be used in place of a direct call to EXECUTE IMMEDIATE&nbsp;-- it has all that error handling built in. I supply such a procedure in the ndsutil package (see <A
CLASS="xref"
HREF="ch04_07.htm"
>Section 4.7</A
>). </P
><P
CLASS="para"
>We could even create a similar program for OPEN FOR&nbsp;-- again, only for situations that do not require a USING clause. Since OPEN FOR sets a cursor value, we would probably want to implement it as a function, which would return a type of weak REF CURSOR. This leads right to a packaged implementation along these lines:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>PACKAGE ndsutil
IS
   TYPE cv_type IS REF CURSOR;

   FUNCTION openFor (sql_string IN VARCHAR2) RETURN cv_type;
END;</PRE
></BLOCKQUOTE
><P
CLASS="para"
>The NDS utility package (available on the companion disk in <I
CLASS="filename"
>ndsutil.pkg </I
>) contains the complete implementation of this function; the body is quite similar to the execDDL procedure shown earlier.<A
CLASS="indexterm"
NAME="AUTOID-2160"
></A
><A
CLASS="indexterm"
NAME="AUTOID-2161"
></A
><A
CLASS="indexterm"
NAME="AUTOID-2162"
></A
><A
CLASS="indexterm"
NAME="AUTOID-2163"
></A
></P
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch04-22394"
>4.6.3 Dynamic PL/SQL </A
></H3
><P
CLASS="para"
> <A
CLASS="indexterm"
NAME="AUTOID-2167"
></A
> <A
CLASS="indexterm"
NAME="AUTOID-2169"
></A
>I think I can safely say that some of the most enjoyable moments I have had with PL/SQL (and, believe me, given all the time I spend with the language, I keep a sharp eye out for those moments!) occurred when I was constructing and executing PL/SQL blocks of code dynamically. </P
><P
CLASS="para"
>Think of it: while a user is running your application, it can do any of the following:</P
><UL
CLASS="itemizedlist"
><LI
CLASS="listitem"
><P
CLASS="para"
>Create a program, including a package that contains globally accessible data structures</P
></LI
><LI
CLASS="listitem"
><P
CLASS="para"
>Obtain (and modify) by name the value of global variables</P
></LI
><LI
CLASS="listitem"
><P
CLASS="para"
>Call functions and procedures whose names are not known at compile time</P
></LI
></UL
><P
CLASS="para"
>I have used this technique to build very flexible code generators, softcoded calculation engines for users, and much more. Dynamic PL/SQL allows you to work at a higher level of generality, which can be both challenging and exhilarating.</P
><P
CLASS="para"
>There are some rules and tips you need to keep in mind when working with dynamic PL/SQL blocks and NDS:</P
><UL
CLASS="itemizedlist"
><LI
CLASS="listitem"
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="AUTOID-2185"
></A
><A
CLASS="indexterm"
NAME="AUTOID-2187"
></A
>The dynamic string must be a valid PL/SQL block. It must start with the DECLARE or BEGIN keywords, and end with an END statement and a semicolon. The string will not be considered PL/SQL code unless it ends with a semicolon.</P
></LI
><LI
CLASS="listitem"
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="AUTOID-2191"
></A
>In your dynamic block, you can only access PL/SQL code elements that have global scope (standalone functions and procedures, and elements defined in the specification of a package). Dynamic PL/SQL blocks execute outside the scope of the local enclosing block.</P
></LI
><LI
CLASS="listitem"
><P
CLASS="para"
>Errors raised within a dynamic PL/SQL block can be trapped and handled by the local block in which the string was run with the EXECUTE IMMEDIATE statement.</P
></LI
></UL
><P
CLASS="para"
>Let's explore these rules so as to avoid any confusion. First of all, I will build a little utility to execute dynamic PL/SQL:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>/* Filename on companion disk: <A
CLASS="indexterm"
NAME="ch04-idx-80201-0"
></A
>dynplsql.sp */
CREATE OR REPLACE PROCEDURE dynPLSQL (blk IN VARCHAR2)
IS
BEGIN
   EXECUTE IMMEDIATE
      'BEGIN ' || RTRIM (blk, ';') || '; END;';
END;
/</PRE
></BLOCKQUOTE
><P
CLASS="para"
>This one program encapsulates many of the rules mentioned previously for PL/SQL execution. By enclosing the string within a BEGIN-END pairing, I guarantee that whatever I pass in is executed as a valid PL/SQL block. For instance, I can execute the calc_ totals procedure dynamically as simply as this:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>SQL&gt; exec dynPLSQL ('calc_totals');</PRE
></BLOCKQUOTE
><P
CLASS="para"
>Now let's use this program to examine what kind of data structures you can reference within a dynamic PL/SQL block. In the following anonymous block, I want to use DBMS_SQL to assign a value of 5 to the local variable num: </P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>&lt;&lt;dynamic&gt;&gt;
DECLARE
   num NUMBER;
BEGIN   
   dynPLSQL ('num := 5');
END;
/   </PRE
></BLOCKQUOTE
><P
CLASS="para"
>This string is executed within its own BEGIN-END block, which would <EM
CLASS="emphasis"
>appear</EM
> to be a nested block within the anonymous block named "dynamic" with the label. Yet when I execute this script I receive the following error:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>PLS-00302: component 'NUM' must be declared
ORA-06512: at &quot;SYS.DBMS_SYS_SQL&quot;, line 239</PRE
></BLOCKQUOTE
><P
CLASS="para"
>The PL/SQL engine is unable to resolve the reference to the variable named num. I get the same error even if I qualify the variable name with its block name:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>&lt;&lt;dynamic&gt;&gt;
DECLARE
   num NUMBER;
BEGIN   
   /* Also causes a PLS-00302 error! */
   dynPLSQL ('dynamic.num := 5');
END;
/   </PRE
></BLOCKQUOTE
><P
CLASS="para"
>Now suppose that I define the num variable inside a package called dynamic:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>CREATE OR REPLACE PACKAGE dynamic
IS
   num NUMBER;
END;
/</PRE
></BLOCKQUOTE
><P
CLASS="para"
>I am now able to execute the dynamic assignment to this newly defined variable successfully:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>BEGIN   
   dynPLSQL ('dynamic.num := 5');
END;
/   </PRE
></BLOCKQUOTE
><P
CLASS="para"
>What's the difference between these two pieces of data? In my first attempt, the variable num is defined locally in the anonymous PL/SQL block. In my second attempt, num is a public global variable defined in the dynamic package. This distinction makes all the difference with dynamic PL/SQL.</P
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="ch-04-nestblock"
></A
>It turns out that a dynamically constructed and executed PL/SQL block is not treated as a <EM
CLASS="emphasis"
>nested</EM
> block; instead, it is handled as if it were a procedure or function called from within the current block. So any variables local to the current or enclosing blocks are not recognized in the dynamic PL/SQL block. You can only make references to globally defined programs and data structures. These PL/SQL elements include standalone functions and procedures and any elements defined in the specification of a package. </P
><P
CLASS="para"
>Fortunately, the dynamic block <EM
CLASS="emphasis"
>is</EM
> executed within the context of the calling block. If you have an exception section within the calling block, it will trap exceptions raised in the dynamic block. So if I execute this anonymous block in SQL*Plus:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>BEGIN
   dynPLSQL ('undefined.packagevar := ''abc''');
EXCEPTION
   WHEN OTHERS THEN DBMS_OUTPUT.PUT_LINE (SQLCODE);
END;
/</PRE
></BLOCKQUOTE
><P
CLASS="para"
>I will not get an unhandled <A
CLASS="indexterm"
NAME="ch04-idx-80303-0"
></A
><A
CLASS="indexterm"
NAME="ch04-idx-80303-1"
></A
><A
CLASS="indexterm"
NAME="ch04-idx-80303-2"
></A
>exception.<A
CLASS="indexterm"
NAME="AUTOID-2232"
></A
></P
><BLOCKQUOTE
CLASS="tip"
><P
CLASS="para"
><STRONG
>TIP:</STRONG
> <A
CLASS="indexterm"
NAME="AUTOID-2235"
></A
><A
CLASS="indexterm"
NAME="AUTOID-2237"
></A
><A
CLASS="indexterm"
NAME="AUTOID-2239"
></A
><A
CLASS="indexterm"
NAME="AUTOID-2241"
></A
>The assignment performed in this anonymous block is an example of <I
CLASS="firstterm"
>indirect referencing</I
>. I don't reference the variable directly, but instead do so by specifying the <EM
CLASS="emphasis"
>name</EM
> of the variable. Oracle Developer's FormsBuilder product (formerly known as SQL*Forms and Oracle Forms) offers an implementation of indirect referencing with the NAME_IN and COPY programs. This feature allows developers to build logic that can be shared across all forms in the application. PL/SQL does not support indirect referencing, but you can implement it with dynamic PL/SQL. See the <I
CLASS="filename"
>dynvar.pkg</I
> file on the disk for an example of such an implementation.</P
></BLOCKQUOTE
><P
CLASS="para"
>In the following sections, I offer several examples of dynamic PL/SQL to spark your interest and, perhaps, inspire your creativity.</P
><DIV
CLASS="sect3"
><H4
CLASS="sect3"
><A
CLASS="title"
NAME="ch04-SECT-6.3.1"
>4.6.3.1 Dramatic code reduction</A
></H4
><P
CLASS="para"
>Here is a true story, I kid you not. I once spent some time at an insurance company here in Chicago. Now, top management at insurance companies is notorious for burying any sense of compassion under a mountain of red tape&nbsp;-- and that inclination gets pushed down into the software we have to write. So, for example, a policy might have hundreds of lines of fine print, each of which has a number associated with it, and each of which applies or does not apply to a given claim.</P
><P
CLASS="para"
>For each line number, the developers had written a "process line" procedure. So if they needed to process line 1, they would call:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>process_line1</PRE
></BLOCKQUOTE
><P
CLASS="para"
>If line 514 applied to the claim, then it was time to call:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>process_line514</PRE
></BLOCKQUOTE
><P
CLASS="para"
>The remarkable thing about this situation is that the developers ended up with a program like this:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>CREATE OR REPLACE PROCEDURE process_line (line IN INTEGER)
IS
BEGIN
   IF line = 1 THEN process_line1;
   ELSIF line = 2 THEN process_line2;
   ...
   ELSIF line = 514 THEN process_line514;
   ...
   END IF;
END;</PRE
></BLOCKQUOTE
><P
CLASS="para"
>and it was so long that it often would fail to compile, and when it did manage to compile, it took a long time to execute. Nasty!</P
><P
CLASS="para"
>Dynamic SQL is, of course, suited perfectly to this scenario, and I was able to fix their problem in no time at all (well, to be honest, at the time I fixed it using DBMS_SQL, but here's the NDS implementation):</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>CREATE OR REPLACE PROCEDURE process_line (line IN INTEGER)
IS
BEGIN
   EXECUTE IMMEDIATE
      'BEGIN process_line' || line || '; END;';
END;</PRE
></BLOCKQUOTE
><P
CLASS="para"
>From thousands of lines of code down to one executable statement. I like it!</P
></DIV
><DIV
CLASS="sect3"
><H4
CLASS="sect3"
><A
CLASS="title"
NAME="ch04-SECT-6.3.2"
>4.6.3.2 Generic calculator function</A
></H4
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="ch-04-gencalc"
></A
>Here's the scenario for which I wrote the dyncalc function shown in this section: suppose I have to build a GUI application that allows users to select their calculation of choice, enter the arguments, and then display the results. There are a dozen different calculations, accepting from one to five arguments, all returning a single value. </P
><P
CLASS="para"
>I could write a separate screen for each calculation. However, that approach is not only labor-intensive, but also high-maintenance. Every time a new calculation is added to the mix, I have to go in and write another screen. Yuck! Wouldn't it be nice if I could "soft code" my application, so that (ideally) when users need access to another calculation, they can essentially add it themselves? </P
><P
CLASS="para"
>So I build a set of database tables to store header-level information about the calculation, including a description, the name of the calculation function, the number of arguments, descriptions of each argument, and so forth. But now I need a utility that will run any of the calculations I send to it. This is where dynamic PL/SQL comes into play.</P
><P
CLASS="para"
>Here is the header of a function that accepts up to five arguments and runs whatever function is requested:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>/* Filename on companion disk: dyncalc.sf */
CREATE OR REPLACE FUNCTION dyncalc (
   oper_in IN VARCHAR2,
   nargs_in IN INTEGER := 0,
   arg1_in IN VARCHAR2 := NULL,
   arg2_in IN VARCHAR2 := NULL,
   arg3_in IN VARCHAR2 := NULL,
   arg4_in IN VARCHAR2 := NULL,
   arg5_in IN VARCHAR2 := NULL
   )
   RETURN VARCHAR2</PRE
></BLOCKQUOTE
><P
CLASS="para"
>The implementation uses the EXECUTE IMMEDIATE statement in a cascading IF statement. Here is a portion of the function body:<A
CLASS="indexterm"
NAME="AUTOID-2270"
></A
></P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>ELSIF nargs_in = 2
THEN
   EXECUTE IMMEDIATE v_code || '(:1, :2); END;'
      USING OUT retval, arg1_in, arg2_in;
ELSIF nargs_in = 3
THEN
   EXECUTE IMMEDIATE v_code || '(:1, :2, :3); END;'
      USING OUT retval, arg1_in, arg2_in, arg3_in;</PRE
></BLOCKQUOTE
><P
CLASS="para"
>No rocket science here . . . but it gets the job done, as shown in the SQL*Plus session below: </P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>SQL&gt; BEGIN
  2     DBMS_OUTPUT.PUT_LINE (dyncalc('sysdate'));
  3     DBMS_OUTPUT.PUT_LINE (dyncalc('power', 2, 2, 44));
  4     DBMS_OUTPUT.PUT_LINE (
  5        dyncalc ('greatest', 5, 66, 5, 88, 1020, -4));
  6  END;
  7  /      
05-MAY-99
17592186044416
1020</PRE
></BLOCKQUOTE
></DIV
></DIV
></DIV
><DIV
CLASS="htmlnav"
><P
></P
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch04_05.htm"
TITLE="4.5 Working with Objects and Collections"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 4.5 Working with Objects and Collections"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="book"
HREF="index.htm"
TITLE="Oracle PL/SQL Programming Guide to Oracle 8i Features"
><IMG
SRC="../gifs/txthome.gif"
ALT="Oracle PL/SQL Programming Guide to Oracle 8i Features"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch04_07.htm"
TITLE="4.7 NDS Utility Package"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 4.7 NDS Utility Package"
BORDER="0"></A
></TD
></TR
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
>4.5 Working with Objects and Collections</TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="index"
HREF="index/idx_0.htm"
TITLE="Book Index"
><IMG
SRC="../gifs/index.gif"
ALT="Book Index"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
>4.7 NDS Utility Package</TD
></TR
></TABLE
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"></DIV
><IMG SRC="../gifs/smnavbar.gif"
USEMAP="#map"
BORDER="0"
ALT="The Oracle Library Navigation">

<P><font size="-1">
<a href="../copyrght.htm#copy">Copyright (c) 2000</a> O'Reilly &amp; Associates. All rights reserved.
</font></P>

<MAP NAME="map">

<AREA SHAPE="RECT"
COORDS="0,0,35,30"
HREF="../index.htm"
ALT="Library Home">

<AREA SHAPE="RECT"
COORDS="40,0,95,30"
HREF="../prog2/index.htm"
ALT="Oracle PL/SQL Programming, 2nd. Ed.">

<AREA SHAPE="RECT"
COORDS="100,0,200,30"
HREF="index.htm"
ALT="Guide to Oracle 8i Features">

<AREA SHAPE="RECT"
COORDS="205,0,245,30"
HREF="../bipack/index.htm"
ALT="Oracle Built-in Packages">

<AREA SHAPE="RECT"
COORDS="250,0,320,30"
HREF="../advprog/index.htm"
ALT="Advanced PL/SQL Programming with Packages">

<AREA SHAPE="RECT"
COORDS="325,0,420,30"
HREF="../webapp/index.htm"
ALT="Oracle Web Applications">

<AREA SHAPE="RECT"
COORDS="425,0,490,30"
HREF="../langpkt/index.htm"
ALT="Oracle PL/SQL Language Pocket Reference">

<AREA SHAPE="RECT"
COORDS="495,0,570,30"
HREF="../bipkt/index.htm"
ALT="Oracle PL/SQL Built-ins Pocket Reference">
</MAP>

</BODY
>
<!-- Mirrored from liso.cs.pusan.ac.kr by HTTrack Website Copier/3.x [XR&CO'2001] -->
</HTML
>
