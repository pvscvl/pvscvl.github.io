<HTML
><HEAD
><TITLE
>[Chapter 9] 9.8 Publishing and Using Java in PL/SQL</TITLE
><META
NAME="DC.Creator"
CONTENT="Steven Feuerstein"><META
NAME="DC.Date"
CONTENT="2000-04-29T19:27:25Z"><META
NAME="DC.Format"
CONTENT="text/html"
SCHEME="MIME"><META
NAME="DC.Identifier"
CONTENT="O'Reilly and Associates CDROM-1-56592-675-7E"><META
NAME="DC.Language"
CONTENT="en-US"><META
NAME="DC.Publisher"
CONTENT="O'Reilly &amp; Associates, Inc."><META
NAME="DC.Source"
CONTENT="1-56592-675-7E"
SCHEME="ISBN"><META
NAME="DC.Subject.Keyword"
CONTENT="Oracle 8i Features"><META
NAME="DC.Title"
CONTENT="Oracle PL/SQL Programming Guide to Oracle 8i Features"><META
NAME="DC.Type"
CONTENT="Text.Monograph"><META
NAME="generator"
CONTENT="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><LINK
REL="stylesheet"
TYPE="text/css"
HREF="../style/style1.css"><LINK
REV="made"
HREF="mailto:online-books@oreilly.com"
TITLE="Online Books Comments"><LINK
REL="up"
HREF="ch09_01.htm"
TITLE="9. Calling Java from PL/SQL"><LINK
REL="prev"
HREF="ch09_07.htm#ch09-SECT-7.2"
TITLE="9.7 Using DBMS_JAVA and DBMS_JAVA_TEST"><LINK
REL="next"
HREF="ch09_09.htm#ch09-SECT-9.1.1"
TITLE="9.9 Examples"></HEAD
><BODY
><DIV
CLASS="htmlnav"
><H1
><IMG
SRC="gifs/smbanner.gif"
ALT="Oracle PL/SQL Programming Guide to Oracle 8i Features"
USEMAP="#srchmap"
BORDER="0"></H1
><MAP
NAME="srchmap"
><AREA
SHAPE="RECT"
COORDS="0,0,466,65"
HREF="index.htm"
ALT="Oracle PL/SQL Programming Guide to Oracle 8i Features"><AREA
SHAPE="RECT"
COORDS="467,0,514,18"
HREF="jobjects/fsearch.htm"
ALT="Search this book"></MAP
><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch09_07.htm#ch09-SECT-7.2"
TITLE="9.7 Using DBMS_JAVA and DBMS_JAVA_TEST"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 9.7 Using DBMS_JAVA and DBMS_JAVA_TEST"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><SPAN
CLASS="NAVTITLE"
><A
CLASS="chapter"
REL="up"
HREF="ch09_01.htm"
TITLE="9. Calling Java from PL/SQL"
>Chapter 9<BR>Calling Java from PL/SQL</A
></SPAN
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch09_09.htm#ch09-SECT-9.1.1"
TITLE="9.9 Examples"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 9.9 Examples"
BORDER="0"></A
></TD
></TR
></TABLE
>&nbsp;<HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"></DIV
><DIV
CLASS="sect1"
><H2
CLASS="sect1"
><A
CLASS="title"
NAME="ch09-15948"
>9.8 Publishing and Using Java in PL/SQL</A
></H2
><P
CLASS="para"
>Once you have written your Java classes and loaded them into the Oracle RDBMS, you can call their methods from within PL/SQL (and SQL)&nbsp;-- but only after you "publish" those methods via a PL/SQL wrapper.</P
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch09-SECT-8.1"
>9.8.1 Call Specs</A
></H3
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="ch-09-callspecs"
></A
><A
CLASS="indexterm"
NAME="ch-09-javacallspecs"
></A
>You only need to build wrappers in PL/SQL for those Java methods you want to make available through a PL/SQL interface. Java methods can access other Java methods in the Java Virtual Machine directly, without any need for a wrapper. To publish a Java method, you write a <I
CLASS="filename"
>call spec&nbsp;-- </I
>a PL/SQL program header (function or procedure) whose body is actually a call to a Java method via the LANGUAGE JAVA clause. This clause contains the following information about the Java method: its full name, its parameter types, and its return type. You can define these call specs as standalone functions or procedures, as programs within a package, and as methods in an object type: </P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>CREATE [OR REPLACE] --Only if a standalone program
<I
CLASS="replaceable"
>&lt;Standard PL/SQL procedure/function header&gt;</I
>
{IS | AS} LANGUAGE JAVA
NAME '<I
CLASS="replaceable"
>method_fullname</I
> (<I
CLASS="replaceable"
>java_type_fullname</I
>[, <I
CLASS="replaceable"
>java_type_fullname</I
>]...)
  [return <I
CLASS="replaceable"
>java_type_fullname</I
>]';</PRE
></BLOCKQUOTE
><P
CLASS="para"
>Where <EM
CLASS="emphasis"
>java_type_fullname</EM
> is the full name of the Java type, such as java.lang.String. </P
><P
CLASS="para"
>The NAME clause string identifies uniquely the Java method being wrapped. The fully qualified Java names and the call spec parameters, which are mapped by position only, must correspond, one to one, with the parameters in the program. If the Java method takes no arguments, code an empty parameter list for it but not for the function or procedure. </P
><P
CLASS="para"
>Here are a few examples:</P
><UL
CLASS="itemizedlist"
><LI
CLASS="listitem"
><P
CLASS="para"
>A standalone function calling a method:</P
></LI
></UL
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>CREATE OR REPLACE FUNCTION fDelete (
   file IN VARCHAR2) 
   RETURN NUMBER
AS LANGUAGE JAVA
   NAME 'JDelete.delete (
            java.lang.String) 
            return int';</PRE
></BLOCKQUOTE
><UL
CLASS="itemizedlist"
><LI
CLASS="listitem"
><P
CLASS="para"
>A packaged procedure with the LANGUAGE clause in the specification that passes an object type as a parameter:<A
CLASS="indexterm"
NAME="AUTOID-6588"
></A
><A
CLASS="indexterm"
NAME="AUTOID-6589"
></A
></P
></LI
></UL
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>CREATE OR REPLACE PACKAGE nat_health_care
IS
   PROCEDURE consolidate_insurer (ins Insurer) 
      AS LANGUAGE JAVA
      NAME 'NHC_consolidation.process(oracle.sql.STRUCT)';
END nat_health_care;</PRE
></BLOCKQUOTE
><UL
CLASS="itemizedlist"
><LI
CLASS="listitem"
><P
CLASS="para"
>An object type method with the LANGUAGE clause in the specification:</P
></LI
></UL
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>CREATE TYPE WarCriminal AS OBJECT (
  name VARCHAR2(100),
  victim_count NUMBER,
  MEMBER FUNCTION sentencing_date (
    name_in IN VARCHAR2) RETURN DATE
    AS LANGUAGE JAVA
    NAME 'warCriminal.dos (java.lang.String) 
             return java.sql.Timestamp'</PRE
></BLOCKQUOTE
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch09-SECT-8.2"
>9.8.2 Some Rules for Java Wrappers</A
></H3
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="ch-09-wraptwo"
></A
><A
CLASS="indexterm"
NAME="ch-09-wrapjav"
></A
>Note the following rules for Java wrappers:</P
><UL
CLASS="itemizedlist"
><LI
CLASS="listitem"
><P
CLASS="para"
>A PL/SQL call spec and the Java method it publishes must reside in the same schema. </P
></LI
><LI
CLASS="listitem"
><P
CLASS="para"
>A call spec exposes a Java method's top-level entry point to Oracle. As a result, you can publish only public static methods, unless you are defining a member method of a SQL object type. In this case, you can publish instance methods as member methods of that type. </P
></LI
><LI
CLASS="listitem"
><P
CLASS="para"
>A method in object-oriented languages cannot assign values to objects passed as arguments; the point of the method is to apply to the object to which it is attached. When you want to call a method from SQL or PL/SQL and change the value of an argument, you must declare it as an OUT or IN OUT parameter in the call spec. The corresponding Java parameter must then be a one-element array. </P
></LI
><LI
CLASS="listitem"
><P
CLASS="para"
>You can replace the element value with another Java object of the appropriate type, or (for IN OUT parameters only) modify the value if the Java type permits. Either way, the new value propagates back to the caller. For example, you might map a call spec OUT parameter of type NUMBER to a Java parameter declared as <CODE
CLASS="literal"
>float[]</CODE
> <CODE
CLASS="literal"
>p</CODE
>, then assign a new value to <CODE
CLASS="literal"
>p[0]</CODE
>. </P
></LI
></UL
><BLOCKQUOTE
CLASS="tip"
><P
CLASS="para"
><STRONG
>TIP:</STRONG
> A function that declares OUT or IN OUT parameters cannot be called from SQL DML statements.<A
CLASS="indexterm"
NAME="AUTOID-6618"
></A
><A
CLASS="indexterm"
NAME="AUTOID-6619"
></A
></P
></BLOCKQUOTE
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch09-SECT-8.3"
>9.8.3 Mapping Datatypes</A
></H3
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="ch-09-dml"
></A
><A
CLASS="indexterm"
NAME="ch-09-mapdata"
></A
>Earlier, I showed you one very simple example of a PL/SQL wrapper. That delete function passed a VARCHAR2 value to a java.lang.String parameter. The Java method returned an int, which was then passed back through the RETURN NUMBER clause of the PL/SQL function. Those are two straightforward examples of datatype <I
CLASS="firstterm"
>mapping</I
>, that is, setting up a correspondence between a PL/SQL datatype and a Java datatype.</P
><P
CLASS="para"
>When you build a PL/SQL call spec, the PL/SQL and Java parameters, as well as the function result, are related by position and must have compatible datatypes. <A
CLASS="xref"
HREF="ch09_08.htm#ch09-SECT-8.1"
>Table 9.6</A
> lists all the datatype mappings currently allowed between PL/SQL and Java. If you rely on a supported datatype mapping, Oracle will convert from one to the other automatically.</P
><P
CLASS="para"
>As you can see with a quick glance at the mapping table, Oracle supports only automatic conversion for SQL datatypes. PL/SQL-specific datatypes, including BINARY_INTEGER, PLS_INTEGER, BOOLEAN, and index-by table types, are not supported. In those cases, you will have to perform manual conversion steps to transfer data between these two execution environments. See <A
CLASS="xref"
HREF="ch09_09.htm#ch09-SECT-9.1.1"
>Section 9.9</A
> for examples of nondefault mappings; see Oracle documentation for even more detailed examples involving the use of JDBC.</P
><P
CLASS="para"
></P
><BR><TABLE
CLASS="table"
BORDER="1"
CELLPADDING="3"
><CAPTION
CLASS="table"
><A
CLASS="title"
NAME="ch09-54597"
>Table 9.6: Legal Datatype Mappings </A
></CAPTION
><THEAD
CLASS="thead"
><TR
CLASS="row"
VALIGN="TOP"
><TH
CLASS="entry"
ALIGN="LEFT"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>SQL Type </P
></TH
><TH
CLASS="entry"
ALIGN="LEFT"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>Java Class </P
></TH
></TR
></THEAD
><TBODY
CLASS="tbody"
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>CHAR, NCHAR, LONG, VARCHAR2, NVARCHAR2 </P
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
> <BLOCKQUOTE
><PRE
CLASS="programlisting"
>oracle.sql.CHAR 
java.lang.String 
java.sql.Date 
java.sql.Time 
java.sql.Timestamp 
java.lang.Byte 
java.lang.Short 
java.lang.Integer 
java.lang.Long 
java.lang.Float 
java.lang.Double 
java.math.BigDecimal 
byte, short, int, long, float, double </PRE
></BLOCKQUOTE
> </TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>DATE </P
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
> <BLOCKQUOTE
><PRE
CLASS="programlisting"
>oracle.sql.DATE 
java.sql.Date 
java.sql.Time 
java.sql.Timestamp 
java.lang.String </PRE
></BLOCKQUOTE
> </TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>NUMBER </P
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
> <BLOCKQUOTE
><PRE
CLASS="programlisting"
>oracle.sql.NUMBER 
java.lang.Byte 
java.lang.Short 
java.lang.Integer 
java.lang.Long 
java.lang.Float 
java.lang.Double 
java.math.BigDecimal 
byte, short, int, long, float, double </PRE
></BLOCKQUOTE
> </TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>RAW, LONG RAW </P
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
> <BLOCKQUOTE
><PRE
CLASS="programlisting"
>oracle.sql.RAW 
byte[] </PRE
></BLOCKQUOTE
> </TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>ROWID </P
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
> <BLOCKQUOTE
><PRE
CLASS="programlisting"
>oracle.sql.CHAR 
oracle.sql.ROWID 
java.lang.String </PRE
></BLOCKQUOTE
> </TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>BFILE </P
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
> <BLOCKQUOTE
><PRE
CLASS="programlisting"
>oracle.sql.BFILE </PRE
></BLOCKQUOTE
> </TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>BLOB </P
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
> <BLOCKQUOTE
><PRE
CLASS="programlisting"
>oracle.sql.BLOB 
oracle.jdbc2.Blob </PRE
></BLOCKQUOTE
> </TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>CLOB, NCLOB </P
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
> <BLOCKQUOTE
><PRE
CLASS="programlisting"
>oracle.sql.CLOB 
oracle.jdbc2.Clob<I
CLASS="lineannotation"
> </I
></PRE
></BLOCKQUOTE
> </TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>OBJECT </P
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
> <BLOCKQUOTE
><PRE
CLASS="programlisting"
>oracle.sql.STRUCT 
oracle.SqljData 
oracle.jdbc2.Struct<I
CLASS="lineannotation"
> </I
></PRE
></BLOCKQUOTE
> </TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>REF </P
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
> <BLOCKQUOTE
><PRE
CLASS="programlisting"
>oracle.sql.REF 
oracle.jdbc2.Ref<I
CLASS="lineannotation"
> </I
></PRE
></BLOCKQUOTE
> </TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>TABLE, VARRAY </P
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
> <BLOCKQUOTE
><PRE
CLASS="programlisting"
>oracle.sql.ARRAY 
oracle.jdbc2.Array<I
CLASS="lineannotation"
> </I
></PRE
></BLOCKQUOTE
> </TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>Any of the above SQL types<A
CLASS="indexterm"
NAME="AUTOID-6706"
></A
><A
CLASS="indexterm"
NAME="AUTOID-6707"
></A
></P
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
> <BLOCKQUOTE
><PRE
CLASS="programlisting"
>oracle.sql.CustomDatum 
oracle.sql.Datum<I
CLASS="lineannotation"
> </I
></PRE
></BLOCKQUOTE
> </TD
></TR
></TBODY
></TABLE
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch09-SECT-8.4"
>9.8.4 Calling a Java Method in SQL</A
></H3
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="ch-09-methcall"
></A
><A
CLASS="indexterm"
NAME="ch-09-jcallsql"
></A
>You can call PL/SQL functions of your own creation from within SQL DML statements. You can also call Java methods wrapped in PL/SQL from within SQL. However, these methods must conform to the following purity rules:</P
><UL
CLASS="itemizedlist"
><LI
CLASS="listitem"
><P
CLASS="para"
>If you call a method from a SELECT statement or a parallelized INSERT, UPDATE, or DELETE statement, the method is not allowed to modify any database tables. </P
></LI
><LI
CLASS="listitem"
><P
CLASS="para"
>If you call a method from an INSERT, UPDATE, or DELETE statement, the method cannot query or modify any database tables modified by that statement. </P
></LI
><LI
CLASS="listitem"
><P
CLASS="para"
>If you call a method from a SELECT, INSERT, UPDATE, or DELETE statement, it cannot execute SQL transaction control statements (such as COMMIT), session control statements (such as SET ROLE), or system control statements (such as ALTER SYSTEM). You also cannot execute DDL statements, since they automatically perform a commit in your session. </P
></LI
></UL
><P
CLASS="para"
>The objective of these restrictions is to control side effects that might disrupt your SQL statements. If you try to execute a SQL statement that calls a method violating any of these rules, you will receive a runtime error when the SQL statement is parsed.</P
><P
CLASS="para"
>It is also possible to call Java from PL/SQL via the SQL layer using the CALL command syntax and native dynamic SQL, as shown in the following code (the implementation of dropany is shown in the next section):<A
CLASS="indexterm"
NAME="AUTOID-6728"
></A
><A
CLASS="indexterm"
NAME="AUTOID-6729"
></A
></P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>DECLARE
   Tp varchar2(30):='TABLE';
   Nm varchar2(30):='mytable';
BEGIN
   EXECUTE IMMEDIATE 'CALL dropany(:tp,:nm)' USING tp, nm;
END;</PRE
></BLOCKQUOTE
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch09-SECT-8.5"
>9.8.5 Exception Handling with Java</A
></H3
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="ch-09-exhand"
></A
><A
CLASS="indexterm"
NAME="ch-09-excephandling"
></A
>On the one hand, the Java exception handling architecture is very similar to that of PL/SQL. In Java-speak, you throw an exception and then catch it. In PL/SQL-speak, you raise an exception and then handle it. </P
><P
CLASS="para"
>On the other hand, exception handling in Java is much more robust. Java offers a foundation class called Exception. All exceptions are objects based on that class, or on classes derived from (extending) Exception. You can pass exceptions as parameters and manipulate them pretty much as you would objects of any other class. </P
><P
CLASS="para"
>When a Java stored method executes a SQL statement and an exception is thrown, then that exception is an object from a subclass of java.sql.SQLException. That class contains two methods that return the Oracle error code and error message: getErrorCode(  ) and getMessage(  ). </P
><P
CLASS="para"
>If a Java stored procedure called from SQL or PL/SQL throws an exception that is <EM
CLASS="emphasis"
>not</EM
> caught by the JVM, the caller gets an exception thrown from a Java error message. This is how all uncaught exceptions (including non-SQL exceptions) are reported. Let's take a look at different ways of handling errors and the resulting output. </P
><P
CLASS="para"
>Suppose that I create a class that relies on JDBC to drop objects in the database (this is drawn from an example in Oracle documentation):</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>/* Filename on companion disk: dropany.java */
import java.sql.*;
import java.io.*;
import oracle.jdbc.driver.*;
 
public class DropAny {
  public static void object (String object_type, String object_name)
  throws SQLException {
    // Connect to Oracle using JDBC driver
    Connection conn = new OracleDriver().defaultConnection();
    // Build SQL statement
    String sql = &quot;DROP &quot; + object_type + &quot; &quot; + object_name;
    try {
      Statement stmt = conn.createStatement();
      stmt.executeUpdate(sql);
      stmt.close();
    } catch (SQLException e) {System.err.println(e.getMessage());}
  }
}</PRE
></BLOCKQUOTE
><BLOCKQUOTE
CLASS="tip"
><P
CLASS="para"
><STRONG
>TIP:</STRONG
> Of course, it doesn't really make any sense to rely on JDBC to perform a drop object action, since this can be done much more easily in native PL/SQL. On the other hand, building it in Java does make the functionality available to other Java programs.</P
></BLOCKQUOTE
><P
CLASS="para"
>This version traps and displays any SQLException with this line:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>} catch (SQLException e) {System.err.println(e.getMessage());}</PRE
></BLOCKQUOTE
><P
CLASS="para"
>I wrap this class inside a PL/SQL procedure as follows:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>CREATE OR REPLACE PROCEDURE dropany (
   tp IN VARCHAR2,
   nm IN VARCHAR2
   )
AS LANGUAGE JAVA
   NAME 'DropAny.object (
            java.lang.String,
            java.lang.String)';
/</PRE
></BLOCKQUOTE
><P
CLASS="para"
>When I attempt to drop a nonexistent object, I will see one of the following two outcomes:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>SQL&gt; CONNECT scott/tiger
Connected.
SQL&gt; SET SERVEROUTPUT ON
SQL&gt; BEGIN dropany ('TABLE', 'blip'); END;
/
PL/SQL procedure successfully completed.

SQL&gt; CALL DBMS_JAVA.SET_OUTPUT (1000000);

Call completed.

SQL&gt; BEGIN dropany ('TABLE', 'blip'); END;
/
ORA-00942: table or view does not exist</PRE
></BLOCKQUOTE
><P
CLASS="para"
>What you are seeing in these examples is a reminder that output from System.err.println will <EM
CLASS="emphasis"
>not </EM
>appear on your screen until you explicitly enable it with a call to DBMS_  JAVA.SET_OUTPUT. In either case, however, no exception was raised back to the calling block, since it was caught inside Java. After the second call to dropany, you can see that the error message supplied through the getMessage(  ) method is one taken directly from Oracle.</P
><P
CLASS="para"
>If I comment out the try and catch lines in the DropAny.obj method, I will get very different behavior, as shown:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>SQL&gt; BEGIN  
  2     dropany ('TABLE', 'blip');
  3  EXCEPTION
  4     WHEN OTHERS
  5     THEN
  6        DBMS_OUTPUT.PUT_LINE (SQLCODE);
  7        DBMS_OUTPUT.PUT_LINE (SQLERRM);
  8  END;
  9  /
java.sql.SQLException: ORA-00942: table or view does not exist
  at oracle.jdbc.kprb.KprbDBAccess.check_error(KprbDBAccess.java)
  at oracle.jdbc.kprb.KprbDBAccess.parseExecuteFetch(KprbDBAccess.java)
  at oracle.jdbc.driver.OracleStatement.doExecuteOther(OracleStatement.java)
  at oracle.jdbc.driver.OracleStatement.doExecuteWithBatch(OracleStatement.java)
  at oracle.jdbc.driver.OracleStatement.doExecute(OracleStatement.java)
  at oracle.jdbc.driver.OracleStatement.doExecuteWithTimeout(OracleStatement.java)
  at oracle.jdbc.driver.OracleStatement.executeUpdate(OracleStatement.java)
  at DropAny.object(DropAny.java:14)

-29532
ORA-29532: Java call terminated by uncaught Java exception: java.sql.SQLException: ORA-00942: table or view does not exist</PRE
></BLOCKQUOTE
><P
CLASS="para"
>This takes a little explaining. Everything between:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>java.sql.SQLException: ORA-00942: table or view does not exist</PRE
></BLOCKQUOTE
><P
CLASS="para"
>and</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>-29532</PRE
></BLOCKQUOTE
><P
CLASS="para"
>represents an error stack dump generated by Java and sent to standard output, <EM
CLASS="emphasis"
>regardless</EM
> of how you handle the error in PL/SQL. In other words, even if my exception section looked like this:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>EXCEPTION WHEN OTHERS THEN NULL;</PRE
></BLOCKQUOTE
><P
CLASS="para"
>I would still get all that output to the screen, and then processing in the outer block (if any) would continue. The last three lines of output displayed are generated by the calls to DBMS_OUTPUT.PUT_LINE. Notice that the Oracle error is <EM
CLASS="emphasis"
>not</EM
> ORA-00942, but instead is ORA-29532, a generic Java error. This is a problem. If you trap the error, how can you discover what the real error is? Looks like it's time for Write-A-Utility Man!</P
><P
CLASS="para"
>It appears to me that the error returned by SQLERRM is of this form:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>ORA-29532: Java call ...: java.sql.SQLException: ORA-<I
CLASS="replaceable"
>NNNNN</I
> ...</PRE
></BLOCKQUOTE
><P
CLASS="para"
>So I can scan for the presence of "java.sql.SQLException" and then SUBSTR from there. Here is a procedure that returns the error code and message for the current error, building in the smarts to compensate for the Java error message format:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>/* Filename on companion disk: getErrorInfo.sp */
CREATE OR REPLACE PROCEDURE getErrorInfo (
   errcode OUT INTEGER,
   errtext OUT VARCHAR2)
IS
   c_keyword CONSTANT CHAR(23) := 'java.sql.SQLException: ';
   c_keyword_len CONSTANT PLS_INTEGER := 23;
   v_keyword_loc PLS_INTEGER;
   v_msg VARCHAR2(1000) := SQLERRM;
BEGIN
   v_keyword_loc := INSTR (v_msg, c_keyword);
   IF v_keyword_loc = 0
   THEN
      errcode := SQLCODE;
      errtext := SQLERRM;
   ELSE
      errtext := SUBSTR (
         v_msg, v_keyword_loc + c_keyword_len);
      errcode := 
         SUBSTR (errtext, 4, 6 /* ORA-NNNNN */);
   END IF;
END;
/   </PRE
></BLOCKQUOTE
><P
CLASS="para"
>The following block demonstrates how I might use this procedure (it relies on the log81 package, created by the <I
CLASS="filename"
>log81.pkg</I
> file, to write the error information to the log):</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>/* Filename on companion disk: dropany2.tst */
BEGIN  
   dropany ('TABLE', 'blip');
EXCEPTION
   WHEN OTHERS
   THEN 
      DECLARE  
         v_errcode PLS_INTEGER;
         v_errtext VARCHAR2(1000);
      BEGIN
         getErrorInfo (v_errcode, v_errtext);
         log81.saveline (v_errcode, v_errtext);
      END;
END;
/</PRE
></BLOCKQUOTE
><BLOCKQUOTE
CLASS="tip"
><P
CLASS="para"
><STRONG
>TIP:</STRONG
> Even though I am saving error information to the database log table, the Java exception stack will still be returned to the host session. If, for example, I were running the script in SQL*Plus, the Java exception stack would be displayed on the screen.<A
CLASS="indexterm"
NAME="AUTOID-6776"
></A
><A
CLASS="indexterm"
NAME="AUTOID-6777"
></A
></P
></BLOCKQUOTE
></DIV
></DIV
><DIV
CLASS="htmlnav"
><P
></P
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch09_07.htm#ch09-SECT-7.2"
TITLE="9.7 Using DBMS_JAVA and DBMS_JAVA_TEST"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 9.7 Using DBMS_JAVA and DBMS_JAVA_TEST"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="book"
HREF="index.htm"
TITLE="Oracle PL/SQL Programming Guide to Oracle 8i Features"
><IMG
SRC="../gifs/txthome.gif"
ALT="Oracle PL/SQL Programming Guide to Oracle 8i Features"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch09_09.htm#ch09-SECT-9.1.1"
TITLE="9.9 Examples"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 9.9 Examples"
BORDER="0"></A
></TD
></TR
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
>9.7 Using DBMS_JAVA and DBMS_JAVA_TEST</TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="index"
HREF="index/idx_0.htm"
TITLE="Book Index"
><IMG
SRC="../gifs/index.gif"
ALT="Book Index"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
>9.9 Examples</TD
></TR
></TABLE
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"></DIV
><IMG SRC="../gifs/smnavbar.gif"
USEMAP="#map"
BORDER="0"
ALT="The Oracle Library Navigation">

<P><font size="-1">
<a href="../copyrght.htm#copy">Copyright (c) 2000</a> O'Reilly &amp; Associates. All rights reserved.
</font></P>

<MAP NAME="map">

<AREA SHAPE="RECT"
COORDS="0,0,35,30"
HREF="../index.htm"
ALT="Library Home">

<AREA SHAPE="RECT"
COORDS="40,0,95,30"
HREF="../prog2/index.htm"
ALT="Oracle PL/SQL Programming, 2nd. Ed.">

<AREA SHAPE="RECT"
COORDS="100,0,200,30"
HREF="index.htm"
ALT="Guide to Oracle 8i Features">

<AREA SHAPE="RECT"
COORDS="205,0,245,30"
HREF="../bipack/index.htm"
ALT="Oracle Built-in Packages">

<AREA SHAPE="RECT"
COORDS="250,0,320,30"
HREF="../advprog/index.htm"
ALT="Advanced PL/SQL Programming with Packages">

<AREA SHAPE="RECT"
COORDS="325,0,420,30"
HREF="../webapp/index.htm"
ALT="Oracle Web Applications">

<AREA SHAPE="RECT"
COORDS="425,0,490,30"
HREF="../langpkt/index.htm"
ALT="Oracle PL/SQL Language Pocket Reference">

<AREA SHAPE="RECT"
COORDS="495,0,570,30"
HREF="../bipkt/index.htm"
ALT="Oracle PL/SQL Built-ins Pocket Reference">
</MAP>

</BODY
>
<!-- Mirrored from liso.cs.pusan.ac.kr by HTTrack Website Copier/3.x [XR&CO'2001] -->
</HTML
>
