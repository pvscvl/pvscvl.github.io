<HTML
><HEAD
><TITLE
>[Chapter 7] 7.3 DBMS_RLS: Implementing Fine-Grained Access Control</TITLE
><META
NAME="DC.Creator"
CONTENT="Steven Feuerstein"><META
NAME="DC.Date"
CONTENT="2000-04-29T19:26:24Z"><META
NAME="DC.Format"
CONTENT="text/html"
SCHEME="MIME"><META
NAME="DC.Identifier"
CONTENT="O'Reilly and Associates CDROM-1-56592-675-7E"><META
NAME="DC.Language"
CONTENT="en-US"><META
NAME="DC.Publisher"
CONTENT="O'Reilly &amp; Associates, Inc."><META
NAME="DC.Source"
CONTENT="1-56592-675-7E"
SCHEME="ISBN"><META
NAME="DC.Subject.Keyword"
CONTENT="Oracle 8i Features"><META
NAME="DC.Title"
CONTENT="Oracle PL/SQL Programming Guide to Oracle 8i Features"><META
NAME="DC.Type"
CONTENT="Text.Monograph"><META
NAME="generator"
CONTENT="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><LINK
REL="stylesheet"
TYPE="text/css"
HREF="../style/style1.css"><LINK
REV="made"
HREF="mailto:online-books@oreilly.com"
TITLE="Online Books Comments"><LINK
REL="up"
HREF="ch07_01.htm"
TITLE="7. New and Enhanced Built-in Packages in Oracle8i"><LINK
REL="prev"
HREF="ch07_02.htm#ch07-SECT-2.3"
TITLE="7.2 DBMS_TRACE: Providing a PL/SQL Trace Facility"><LINK
REL="next"
HREF="ch07_04.htm"
TITLE="7.4 UTL_COLL: Using Collection Locators"></HEAD
><BODY
><DIV
CLASS="htmlnav"
><H1
><IMG
SRC="gifs/smbanner.gif"
ALT="Oracle PL/SQL Programming Guide to Oracle 8i Features"
USEMAP="#srchmap"
BORDER="0"></H1
><MAP
NAME="srchmap"
><AREA
SHAPE="RECT"
COORDS="0,0,466,65"
HREF="index.htm"
ALT="Oracle PL/SQL Programming Guide to Oracle 8i Features"><AREA
SHAPE="RECT"
COORDS="467,0,514,18"
HREF="jobjects/fsearch.htm"
ALT="Search this book"></MAP
><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch07_02.htm#ch07-SECT-2.3"
TITLE="7.2 DBMS_TRACE: Providing a PL/SQL Trace Facility"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 7.2 DBMS_TRACE: Providing a PL/SQL Trace Facility"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><SPAN
CLASS="NAVTITLE"
><A
CLASS="chapter"
REL="up"
HREF="ch07_01.htm"
TITLE="7. New and Enhanced Built-in Packages in Oracle8i"
>Chapter 7<BR>New and Enhanced Built-in Packages in Oracle8i</A
></SPAN
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch07_04.htm"
TITLE="7.4 UTL_COLL: Using Collection Locators"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 7.4 UTL_COLL: Using Collection Locators"
BORDER="0"></A
></TD
></TR
></TABLE
>&nbsp;<HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"></DIV
><DIV
CLASS="sect1"
><H2
CLASS="sect1"
><A
CLASS="title"
NAME="ch07-59331"
>7.3 DBMS_RLS: Implementing Fine-Grained Access Control</A
></H2
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="ch-07-dbmsrlspkg"
></A
><A
CLASS="indexterm"
NAME="AUTOID-4132"
></A
>Fine-grained access control (FGAC) is a new feature in Oracle8<EM
CLASS="emphasis"
>i</EM
> that allows you to implement security policies with functions and then associate those security policies with tables or views. The database server enforces those policies automatically, no matter how the data is accessed. For lots more information on FGAC, see <A
CLASS="xref"
HREF="ch08_01.htm"
>Chapter 8</A
>. I'll focus here on the new built-in package, DBMS_RLS. </P
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch07-SECT-3.1"
>7.3.1 Installing DBMS_RLS</A
></H3
><P
CLASS="para"
> <A
CLASS="indexterm"
NAME="AUTOID-4139"
></A
> <A
CLASS="indexterm"
NAME="AUTOID-4141"
></A
> The DBMS_RLS package should have been installed automatically with the rest of the built-in packages. If you are not able to execute the procedures in the package, you can install the package yourself. To do this, connect to the SYS schema and run the following files in the order specified:</P
><TABLE
CLASS="simplelist"
BORDER="0"
><TR
><TD
CLASS="member"
><I
CLASS="filename"
>\Oracle\Ora81\Rdbms\Admin\dbmsrlsa.sql</I
></TD
></TR
><TR
><TD
CLASS="member"
><I
CLASS="filename"
>\Oracle\Ora81\Rdbms\Admin\prvtrlsa.plb</I
></TD
></TR
></TABLE
><BLOCKQUOTE
CLASS="tip"
><P
CLASS="para"
><STRONG
>TIP:</STRONG
> The directory shown here is the default for a Windows NT installation. Your Oracle 8.1 home directory may be different, but these files will always be found in the <I
CLASS="filename"
>Rdbms\Admin</I
> subdirectory under the Oracle 8.1 home directory.</P
></BLOCKQUOTE
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch07-SECT-3.2"
>7.3.2 DBMS_RLS Programs</A
></H3
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="AUTOID-4154"
></A
>The DBMS_RLS package offers a set of procedures to administer your security policies. Fine-grained access control usually affects the rows a user can access&nbsp;-- hence the name of the package, the Row-Level Security (RLS) administrative interface. Using this package, you can add, drop, enable, disable, and refresh the policies you create. <A
CLASS="xref"
HREF="ch07_03.htm#ch07-SECT-3.4"
>Table 7.6</A
> lists the programs in this package.</P
><BR><TABLE
CLASS="table"
BORDER="1"
CELLPADDING="3"
><CAPTION
CLASS="table"
><A
CLASS="title"
NAME="ch07-47798"
>Table 7.6: DBMS_RLS Programs </A
></CAPTION
><THEAD
CLASS="thead"
><TR
CLASS="row"
VALIGN="TOP"
><TH
CLASS="entry"
ALIGN="LEFT"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>Program</P
></TH
><TH
CLASS="entry"
ALIGN="LEFT"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>Description</P
></TH
></TR
></THEAD
><TBODY
CLASS="tbody"
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="AUTOID-4170"
></A
>ADD_POLICY procedure</P
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>Creates or registers a fine-grained access control policy for a table or view </P
></TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>DROP_POLICY procedure</P
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="AUTOID-4179"
></A
>Drops a fine-grained access control policy from a table or view </P
></TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="AUTOID-4184"
></A
>ENABLE_POLICY procedure</P
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>Enables or disables a fine-grained access control policy</P
></TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="AUTOID-4191"
></A
>REFRESH_POLICY procedure</P
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>Causes all the cached statements associated with the policy to be reparsed </P
></TD
></TR
></TBODY
></TABLE
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch07-SECT-3.3"
>7.3.3 Committing with DBMS_RLS</A
></H3
><P
CLASS="para"
>Each of the DBMS_RLS procedures causes the current transaction to commit before carrying out the specified operation. The procedures will also issue a commit at the end of their operations. </P
><P
CLASS="para"
>This commit processing does not occur if the DBMS_RLS action takes place within a DDL event trigger. In this case, the DBMS_RLS action becomes a part of the DDL transaction. You might, for example, place a trigger on the CREATE TABLE user event (another new Oracle8<EM
CLASS="emphasis"
>i</EM
> capability, described in <A
CLASS="xref"
HREF="ch06_01.htm"
>Chapter 6, <CITE
CLASS="chapter"
>New Trigger Features in Oracle8i</CITE
></A
>). This trigger can then call DBMS_RLS.ADD_POLICY to add a policy on that table.</P
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch07-SECT-3.4"
>7.3.4 ADD_POLICY: Adding a Policy</A
></H3
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="ch-07-addpol"
></A
>Use the DBMS_RLS.ADD_POLICY procedure to add a policy for use in the FGAC architecture. Here is the header for this program:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>DBMS_RLS.ADD_POLICY (
   object_schema   IN VARCHAR2 := NULL,
   object_name     IN VARCHAR2,
   policy_name     IN VARCHAR2,
   function_schema IN VARCHAR2 := NULL,
   policy_function IN VARCHAR2,
   statement_types IN VARCHAR2 := NULL,
   update_check    IN BOOLEAN  := FALSE,
   enable          IN BOOLEAN  := TRUE);</PRE
></BLOCKQUOTE
><P
CLASS="para"
>The parameters for this procedure are listed in <A
CLASS="xref"
HREF="ch07_03.htm#ch07-SECT-3.4"
>Table 7.7</A
>.</P
><BR><TABLE
CLASS="table"
BORDER="1"
CELLPADDING="3"
><CAPTION
CLASS="table"
><A
CLASS="title"
NAME="ch07-29955"
>Table 7.7: DBMS_RLS.ADD_POLICY Parameters </A
></CAPTION
><THEAD
CLASS="thead"
><TR
CLASS="row"
VALIGN="TOP"
><TH
CLASS="entry"
ALIGN="LEFT"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>Parameter</P
></TH
><TH
CLASS="entry"
ALIGN="LEFT"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>Description</P
></TH
></TR
></THEAD
><TBODY
CLASS="tbody"
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="AUTOID-4222"
></A
>object_schema</P
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>Schema containing the table or view. The default is the currently connected schema (that returned by USER). </P
></TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="AUTOID-4229"
></A
>object_name</P
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>Name of the table or view to which the policy is added. </P
></TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="AUTOID-4236"
></A
>policy_name</P
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>Name of the policy to be added. It must be unique for the same table or view. If not, you will get this error:</P
> <BLOCKQUOTE
><PRE
CLASS="programlisting"
>ORA-28101: policy already exists</PRE
></BLOCKQUOTE
> </TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="AUTOID-4244"
></A
>function_schema</P
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>Schema of the function that is used to implement the policy. The default is the currently connected schema (that returned by USER).</P
></TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="AUTOID-4251"
></A
>policy_function</P
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>Name of the function that generates a predicate for the policy. If the function is defined within a package, then you must specify the function in the form <I
CLASS="filename"
>package.function</I
>, as in the following example:</P
> <BLOCKQUOTE
><PRE
CLASS="programlisting"
>'personnel_rules.by_department'</PRE
></BLOCKQUOTE
></TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>statement_types</P
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
> <A
CLASS="indexterm"
NAME="AUTOID-4262"
></A
> Statement types to which the policy will apply. Those types can be any combination of SELECT, INSERT, UPDATE, and DELETE. The default is to apply to all of these types. This is a comma-delimited list. If you provide a list with the wrong structure, you will receive one of these compile-time errors:</P
> <BLOCKQUOTE
><PRE
CLASS="programlisting"
>ORA-00911: invalid character
ORA-28106: input value for argument #6 is not valid</PRE
></BLOCKQUOTE
> </TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>update_check</P
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
> <A
CLASS="indexterm"
NAME="AUTOID-4270"
></A
> Optional argument for INSERT or UPDATE statement types. The default is FALSE. Setting update_check to TRUE causes the server to check the policy against the value after the insert or update has been performed. </P
></TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>enable</P
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>Indicates if the policy is enabled when it is added. The default is TRUE. If you specify FALSE, then you must also call DBMS_RLS.ENABLE_POLICY after you have added the policy.</P
></TD
></TR
></TBODY
></TABLE
><P
CLASS="para"
>The following rules apply when adding a policy:</P
><UL
CLASS="itemizedlist"
><LI
CLASS="listitem"
><P
CLASS="para"
>The policy function that generates a dynamic predicate is called by the Oracle server. Your function must conform to the following header: </P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>FUNCTION policy_function (
   object_schema IN VARCHAR2, 
   object_name VARCHAR2) 
    RETURN VARCHAR2;</PRE
></BLOCKQUOTE
><P
CLASS="para"
>Where <EM
CLASS="emphasis"
>object_schema</EM
> is the schema owning the table or view and <EM
CLASS="emphasis"
>object_name</EM
> is the table or view to which the policy applies. Your function does not necessarily have to use those arguments, but they must be included in the parameter list.</P
></LI
><LI
CLASS="listitem"
><P
CLASS="para"
>The maximum length of the predicate that the policy function can return is 2000 bytes. </P
></LI
><LI
CLASS="listitem"
><P
CLASS="para"
> <A
CLASS="indexterm"
NAME="AUTOID-4289"
></A
> The policy function must have a purity level of WNDS (writes no database state), so that the function can be called within a SQL statement.</P
></LI
><LI
CLASS="listitem"
><P
CLASS="para"
>If a SQL statement causes the generation of more than one dynamic predicate for the same object, these predicates are combined with an AND operator. In other words, all dynamic predicates must be satisfied. </P
></LI
><LI
CLASS="listitem"
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="AUTOID-4295"
></A
>The definer rights model is used to resolve any references in the policy function. Any object lookups required are performed against the owner of the policy function, not the owner of the table or view on which the policy is based. </P
></LI
><LI
CLASS="listitem"
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="AUTOID-4299"
></A
>If your function returns a NULL predicate, then the predicate is ignored. In other words, no filtering of rows takes place for the current user.</P
></LI
><LI
CLASS="listitem"
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="AUTOID-4303"
></A
>In some cases, usually involving object types, Oracle requires an alias for the table name. In these cases, the name of the table or view itself must be used as the name of the alias. </P
></LI
><LI
CLASS="listitem"
><P
CLASS="para"
>The policy function is not checked until runtime. The program you specify in the call to DBMS_RLS.ADD_POLICY does not need to exist or be compilable when the policy is added. </P
><P
CLASS="para"
>Here is an example of adding a policy:<A
CLASS="indexterm"
NAME="AUTOID-4308"
></A
></P
></LI
></UL
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>BEGIN
   DBMS_RLS.ADD_POLICY (
      'SCOTT',
      'patient',
      'patient_privacy',
      'SCOTT',
      'nhc_pkg.person_predicate',
      'SELECT,UPDATE,DELETE');
END;
/      </PRE
></BLOCKQUOTE
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch07-SECT-3.5"
>7.3.5 ENABLE_POLICY: Enabling or Disabling a Policy</A
></H3
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="ch-07-enable"
></A
>You can enable or disable a policy with the DBMS_RLS.ENABLE_POLICY procedure:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>DBMS_RLS.ENABLE_POLICY (
   object_schema IN VARCHAR2 := NULL,
   object_name   IN VARCHAR2,
   policy_name   IN VARCHAR2,
   enable        IN BOOLEAN);</PRE
></BLOCKQUOTE
><P
CLASS="para"
>The parameters for this procedure are listed in <A
CLASS="xref"
HREF="ch07_03.htm#ch07-SECT-3.4"
>Table 7.8</A
>.  </P
><BR><TABLE
CLASS="table"
BORDER="1"
CELLPADDING="3"
><CAPTION
CLASS="table"
><A
CLASS="title"
NAME="ch07-37844"
>Table 7.8: DBMS_RLS.ENABLE_POLICY Parameters </A
></CAPTION
><THEAD
CLASS="thead"
><TR
CLASS="row"
VALIGN="TOP"
><TH
CLASS="entry"
ALIGN="LEFT"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>Parameter</P
></TH
><TH
CLASS="entry"
ALIGN="LEFT"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>Description</P
></TH
></TR
></THEAD
><TBODY
CLASS="tbody"
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>object_schema</P
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>Schema containing the table or view. The default is the currently connected schema (that returned by USER). </P
></TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>object_name</P
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>Name of the table or view for which the policy is enabled or disabled. </P
></TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>policy_name</P
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>Name of the policy to be enabled or disabled. It must be unique for the same table or view. If not, you will get this error:</P
> <BLOCKQUOTE
><PRE
CLASS="programlisting"
>ORA-28101: policy already exists</PRE
></BLOCKQUOTE
> </TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>enable</P
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>TRUE to enable the policy, FALSE to disable the policy.<A
CLASS="indexterm"
NAME="AUTOID-4349"
></A
></P
></TD
></TR
></TBODY
></TABLE
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch07-SECT-3.6"
>7.3.6 DROP_POLICY: Dropping a Policy</A
></H3
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="ch-07-droppolicy"
></A
>The DBMS_RLS package also provides the interface to drop security policies with the DBMS_RLS.DROP_POLICY procedure: </P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>DBMS_RLS.DROP_POLICY (
   object_schema IN VARCHAR2 := NULL,
   object_name   IN VARCHAR2,
   policy_name   IN VARCHAR2); </PRE
></BLOCKQUOTE
><P
CLASS="para"
>Parameters have essentially the same meanings as those shown in <A
CLASS="xref"
HREF="ch07_03.htm#ch07-SECT-3.4"
>Table 7.7</A
>.</P
><P
CLASS="para"
>The following procedure uses the DBMS_RLS package's DROP_POLICY procedure to drop all policies for a specific schema and database object: </P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>/* Filename on companion disk: droppol.sp */
CREATE OR REPLACE PROCEDURE drop_policy (
   objname IN VARCHAR2,
   polname IN VARCHAR2 := '%',
   objschema IN VARCHAR2 := NULL)
   AUTHID CURRENT_USER
IS
BEGIN
   FOR rec IN (
      SELECT object_owner, 
             object_name, 
             policy_name
        FROM ALL_POLICIES
       WHERE object_owner LIKE NVL (objschema, USER)
         AND object_name LIKE objname
         AND policy_name LIKE polname)
   LOOP
      DBMS_RLS.DROP_POLICY (
         rec.object_owner, rec.object_name, rec.policy_name);
   END LOOP;
END;
/</PRE
></BLOCKQUOTE
><BLOCKQUOTE
CLASS="warning"
><P
CLASS="para"
><STRONG
>WARNING:</STRONG
> In Oracle8<EM
CLASS="emphasis"
>i</EM
> Release 8.1.5, the behavior of the DBMS_RLS.DROP_POLICY procedure was erratic inside <I
CLASS="filename"
>droppol.sp</I
> Sometimes it worked, but often it raised an exception along these lines:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>ORA-28106: input value for argument #2 is not valid</PRE
></BLOCKQUOTE
><P
CLASS="para"
>If you pass hardcoded string literals to DBMS_RLS_DROP_POLICY, the procedure doesn't seem to have any difficulties.</P
></BLOCKQUOTE
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch07-SECT-3.7"
>7.3.7 REFRESH_POLICY: Refreshing a Policy</A
></H3
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="ch-07-refr"
></A
>The DBMS_RLS.REFRESH_POLICY procedure causes all the cached SQL statements associated with the policy to be reparsed. This guarantees that the latest change to this policy will have an immediate effect after the procedure is executed. This procedure is needed because parsed SQL statements are cached in the System Global Area to improve performance. The header is as follows:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>DBMS_RLS.REFRESH_POLICY (
   object_schema IN VARCHAR2 := NULL,
   object_name   IN VARCHAR2 := NULL,
   policy_name   IN VARCHAR2 := NULL);</PRE
></BLOCKQUOTE
><P
CLASS="para"
>Parameters have essentially the same meanings as those shown in <A
CLASS="xref"
HREF="ch07_03.htm#ch07-SECT-3.4"
>Table 7.7</A
>.</P
><P
CLASS="para"
>Every time you change the set of policies associated with a table or view, you should issue a refresh for that object. To ensure that this happens, you might consider building an encapsulation around DBMS_RLS so that a call to <EM
CLASS="emphasis"
>your</EM
> ADD_POLICY procedure would automatically add the policy and then refresh as well. Your encapsulated add would then look like this: </P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>/* Filename on companion disk: my_rls.pkg */
CREATE OR REPLACE PACKAGE BODY my_rls
IS
   ...
   PROCEDURE add_policy (
      object_schema   IN VARCHAR2 := NULL,
      object_name     IN VARCHAR2,
      policy_name     IN VARCHAR2,
      function_schema IN VARCHAR2 := NULL,
      policy_function IN VARCHAR2,
      statement_types IN VARCHAR2 := NULL,
      update_check    IN BOOLEAN  := FALSE,
      enable          IN BOOLEAN  := TRUE);
   IS
   BEGIN
      DBMS_RLS.ADD_POLICY (
         object_schema   ,
         object_name     ,
         policy_name     ,
         function_schema ,
         policy_function ,
         statement_types ,
         update_check    ,
         enable);

      IF enable 
      THEN
         DBMS_RLS.REFRESH_POLICY (
            object_schema,
            object_name  ,
            policy_name);
      END IF;
   END;
END;
/</PRE
></BLOCKQUOTE
><P
CLASS="para"
>See <A
CLASS="xref"
HREF="ch08_01.htm"
>Chapter 8</A
> to explore in much more detail the features supported by DBMS_RLS.<A
CLASS="indexterm"
NAME="AUTOID-4379"
></A
><A
CLASS="indexterm"
NAME="AUTOID-4380"
></A
><A
CLASS="indexterm"
NAME="AUTOID-4381"
></A
></P
></DIV
></DIV
><DIV
CLASS="htmlnav"
><P
></P
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch07_02.htm#ch07-SECT-2.3"
TITLE="7.2 DBMS_TRACE: Providing a PL/SQL Trace Facility"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 7.2 DBMS_TRACE: Providing a PL/SQL Trace Facility"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="book"
HREF="index.htm"
TITLE="Oracle PL/SQL Programming Guide to Oracle 8i Features"
><IMG
SRC="../gifs/txthome.gif"
ALT="Oracle PL/SQL Programming Guide to Oracle 8i Features"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch07_04.htm"
TITLE="7.4 UTL_COLL: Using Collection Locators"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 7.4 UTL_COLL: Using Collection Locators"
BORDER="0"></A
></TD
></TR
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
>7.2 DBMS_TRACE: Providing a PL/SQL Trace Facility</TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="index"
HREF="index/idx_0.htm"
TITLE="Book Index"
><IMG
SRC="../gifs/index.gif"
ALT="Book Index"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
>7.4 UTL_COLL: Using Collection Locators</TD
></TR
></TABLE
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"></DIV
><IMG SRC="../gifs/smnavbar.gif"
USEMAP="#map"
BORDER="0"
ALT="The Oracle Library Navigation">

<P><font size="-1">
<a href="../copyrght.htm#copy">Copyright (c) 2000</a> O'Reilly &amp; Associates. All rights reserved.
</font></P>

<MAP NAME="map">

<AREA SHAPE="RECT"
COORDS="0,0,35,30"
HREF="../index.htm"
ALT="Library Home">

<AREA SHAPE="RECT"
COORDS="40,0,95,30"
HREF="../prog2/index.htm"
ALT="Oracle PL/SQL Programming, 2nd. Ed.">

<AREA SHAPE="RECT"
COORDS="100,0,200,30"
HREF="index.htm"
ALT="Guide to Oracle 8i Features">

<AREA SHAPE="RECT"
COORDS="205,0,245,30"
HREF="../bipack/index.htm"
ALT="Oracle Built-in Packages">

<AREA SHAPE="RECT"
COORDS="250,0,320,30"
HREF="../advprog/index.htm"
ALT="Advanced PL/SQL Programming with Packages">

<AREA SHAPE="RECT"
COORDS="325,0,420,30"
HREF="../webapp/index.htm"
ALT="Oracle Web Applications">

<AREA SHAPE="RECT"
COORDS="425,0,490,30"
HREF="../langpkt/index.htm"
ALT="Oracle PL/SQL Language Pocket Reference">

<AREA SHAPE="RECT"
COORDS="495,0,570,30"
HREF="../bipkt/index.htm"
ALT="Oracle PL/SQL Built-ins Pocket Reference">
</MAP>

</BODY
>
<!-- Mirrored from liso.cs.pusan.ac.kr by HTTrack Website Copier/3.x [XR&CO'2001] -->
</HTML
>
