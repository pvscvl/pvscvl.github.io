<HTML
><HEAD
><TITLE
>[Chapter 6] New Trigger Features in Oracle8i</TITLE
><META
NAME="DC.Creator"
CONTENT="Steven Feuerstein"><META
NAME="DC.Date"
CONTENT="2000-04-29T19:25:59Z"><META
NAME="DC.Format"
CONTENT="text/html"
SCHEME="MIME"><META
NAME="DC.Identifier"
CONTENT="O'Reilly and Associates CDROM-1-56592-675-7E"><META
NAME="DC.Language"
CONTENT="en-US"><META
NAME="DC.Publisher"
CONTENT="O'Reilly &amp; Associates, Inc."><META
NAME="DC.Source"
CONTENT="1-56592-675-7E"
SCHEME="ISBN"><META
NAME="DC.Subject.Keyword"
CONTENT="Oracle 8i Features"><META
NAME="DC.Title"
CONTENT="Oracle PL/SQL Programming Guide to Oracle 8i Features"><META
NAME="DC.Type"
CONTENT="Text.Monograph"><META
NAME="generator"
CONTENT="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><LINK
REL="stylesheet"
TYPE="text/css"
HREF="../style/style1.css"><LINK
REV="made"
HREF="mailto:online-books@oreilly.com"
TITLE="Online Books Comments"><LINK
REL="up"
HREF="index.htm"
TITLE="Oracle PL/SQL Programming Guide to Oracle 8i Features"><LINK
REL="prev"
HREF="ch05_05.htm"
TITLE="5.5 Analyzing the Impact of Bulk Operations"><LINK
REL="next"
HREF="ch06_02.htm"
TITLE="6.2 Database-Level Event Triggers"></HEAD
><BODY
><DIV
CLASS="htmlnav"
><H1
><IMG
SRC="gifs/smbanner.gif"
ALT="Oracle PL/SQL Programming Guide to Oracle 8i Features"
USEMAP="#srchmap"
BORDER="0"></H1
><MAP
NAME="srchmap"
><AREA
SHAPE="RECT"
COORDS="0,0,466,65"
HREF="index.htm"
ALT="Oracle PL/SQL Programming Guide to Oracle 8i Features"><AREA
SHAPE="RECT"
COORDS="467,0,514,18"
HREF="jobjects/fsearch.htm"
ALT="Search this book"></MAP
><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch05_05.htm"
TITLE="5.5 Analyzing the Impact of Bulk Operations"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 5.5 Analyzing the Impact of Bulk Operations"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><SPAN
CLASS="NAVTITLE"
>Chapter 6</SPAN
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch06_02.htm"
TITLE="6.2 Database-Level Event Triggers"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 6.2 Database-Level Event Triggers"
BORDER="0"></A
></TD
></TR
></TABLE
>&nbsp;<HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"></DIV
><DIV
CLASS="chapter"
><H1
CLASS="chapter"
><A
CLASS="title"
NAME="ch06-61286"
>6. New Trigger Features in Oracle8i</A
></H1
><DIV
CLASS="htmltoc"
><P
><B
>Contents:</B
><BR><A
CLASS="sect1"
HREF="#ch06-19849"
TITLE="6.1 Triggers on Nested Table View Columns"
>Triggers on Nested Table View Columns</A
><BR><A
CLASS="sect1"
HREF="ch06_02.htm"
TITLE="6.2 Database-Level Event Triggers"
>Database-Level Event Triggers</A
><BR><A
CLASS="sect1"
HREF="ch06_03.htm"
TITLE="6.3 Schema-Level Event Triggers"
>Schema-Level Event Triggers</A
></P
><P
></P
></DIV
><P
CLASS="para"
> <A
CLASS="indexterm"
NAME="ch-06-triggers1"
></A
>  <A
CLASS="indexterm"
NAME="AUTOID-2836"
></A
> <A
CLASS="indexterm"
NAME="AUTOID-2839"
></A
><A
CLASS="indexterm"
NAME="AUTOID-2841"
></A
>Oracle8<EM
CLASS="emphasis"
>i</EM
> expands significantly the use of triggers to administer a database and publish information about events taking place within the database. By employing database triggers on the system events defined in Oracle8<EM
CLASS="emphasis"
>i</EM
>, and using Oracle Advanced Queuing within those triggers, you can take advantage of the publish/subscribe capabilities of Oracle8<EM
CLASS="emphasis"
>i</EM
>. </P
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="AUTOID-2847"
></A
>The database event publication feature allows applications to subscribe to database events just as they subscribe to messages from other applications. Trigger syntax is extended to support system and other data events on the database level or on a particular schema level. Trigger syntax also supports a CALL to a procedure as the trigger body. </P
><P
CLASS="para"
>You can now enable the publication of (i.e., define a programmatic trigger on) the following actions:</P
><UL
CLASS="itemizedlist"
><LI
CLASS="listitem"
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="AUTOID-2853"
></A
><A
CLASS="indexterm"
NAME="AUTOID-2855"
></A
>DML statements (DELETE, INSERT, and UPDATE) </P
></LI
><LI
CLASS="listitem"
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="AUTOID-2859"
></A
><A
CLASS="indexterm"
NAME="AUTOID-2861"
></A
><A
CLASS="indexterm"
NAME="AUTOID-2863"
></A
>DDL events (e.g., CREATE, DROP, and ALTER)</P
></LI
><LI
CLASS="listitem"
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="AUTOID-2867"
></A
><A
CLASS="indexterm"
NAME="AUTOID-2869"
></A
>Database events (SERVERERROR, LOGON, LOGOFF, STARTUP, and SHUTDOWN) <A
CLASS="indexterm"
NAME="AUTOID-2871"
></A
> <A
CLASS="indexterm"
NAME="AUTOID-2873"
></A
> <A
CLASS="indexterm"
NAME="AUTOID-2875"
></A
>  </P
></LI
></UL
><P
CLASS="para"
>Here are the new trigger features available in Oracle8<EM
CLASS="emphasis"
>i</EM
>:</P
><DL
CLASS="variablelist"
><DT
CLASS="term"
>Triggers on nested table columns</DT
><DD
CLASS="listitem"
><P
CLASS="para"
> <A
CLASS="indexterm"
NAME="AUTOID-2884"
></A
> <A
CLASS="indexterm"
NAME="AUTOID-2887"
></A
>Use of the CAST...MULTISET operation allows you to trigger activity when only an attribute in a nested table column is modified.</P
></DD
><DT
CLASS="term"
>Database-level (also known as system-level) event triggers</DT
><DD
CLASS="listitem"
><P
CLASS="para"
> <A
CLASS="indexterm"
NAME="AUTOID-2894"
></A
> <A
CLASS="indexterm"
NAME="AUTOID-2896"
></A
> You can now define triggers to respond to such database-level events as LOGON, DATABASE SHUTDOWN, and even SERVERERROR.</P
></DD
><DT
CLASS="term"
>Schema-level (also known as user-level) event triggers</DT
><DD
CLASS="listitem"
><P
CLASS="para"
>You can now define triggers to respond to such schema-level events as CREATE, DROP, and ALTER.</P
></DD
></DL
><DIV
CLASS="sect1"
><H2
CLASS="sect1"
><A
CLASS="title"
NAME="ch06-19849"
>6.1 Triggers on Nested Table View Columns</A
></H2
><P
CLASS="para"
> <A
CLASS="indexterm"
NAME="AUTOID-2905"
></A
> <A
CLASS="indexterm"
NAME="AUTOID-2907"
></A
> <A
CLASS="indexterm"
NAME="AUTOID-2910"
></A
><A
CLASS="indexterm"
NAME="AUTOID-2912"
></A
><A
CLASS="indexterm"
NAME="ch-06-tabviewcol"
></A
>Oracle8 Release 8.0 allowed developers to create INSTEAD OF triggers, which could then be applied to any view but were especially handy with object views and any inherently unmodifiable view. Oracle8<EM
CLASS="emphasis"
>i</EM
> expands further the usefulness of triggers by allowing you to define a trigger to fire when one or more attributes of a nested table view column are modified. This feature allows you to change an element of a collection synthesized using the CAST...MULTISET operation.</P
><P
CLASS="para"
><A
CLASS="xref"
HREF="ch06_01.htm"
>Figure 6.1</A
> illustrates the ability of the nested table trigger to zoom inside the outer table structure and respond to changes made to the nested table.</P
><H4
CLASS="figure"
><A
CLASS="title"
NAME="ch06-70795"
>Figure 6.1: Nested table trigger fired by change to nested table</A
></H4
><IMG
CLASS="graphic"
SRC="figs/o8if.0601.gif"
ALT="Figure 6.1"><P
CLASS="para"
><A
CLASS="indexterm"
NAME="AUTOID-2924"
></A
>Let's walk through an example illustrating the steps you would take to achieve this effect (use the <I
CLASS="filename"
>nesttrig.sql</I
> file on the companion disk to run all of the following statements in sequence). I'll use membership in the National Rifle Association as an example here. Using the NRA slogan (but not necessarily the belief of all its members) "Guns don't kill people, people kill people" and a little sleight of hand, I've generated the following two relational tables:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>/* Filename on companion disk: nesttrig.sql */
CREATE TABLE nra_members (   
   person_id INTEGER,                 
   last_name VARCHAR2(100),           
   first_name VARCHAR2(20),  );
   age NUMBER);

CREATE TABLE non_killers (
   person_id INTEGER,
   gun_name VARCHAR2(75)</PRE
></BLOCKQUOTE
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="AUTOID-2929"
></A
>I want to build an object view over these two tables that implements the non_killers table as a nested table column. First I must create two object types (a bug in Oracle 8.1.5 requires that I create a table of objects, rather than scalars, for the nested table column to function properly):</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>CREATE OR REPLACE TYPE gun_name_ot AS OBJECT (
   gun_name VARCHAR2(75)
);
/
CREATE OR REPLACE TYPE non_killer_t
    AS TABLE OF gun_name_ot;
/
CREATE OR REPLACE TYPE nra_member_t 
AS OBJECT (
   person_id INTEGER,
   last_name VARCHAR2(100),
   first_name VARCHAR2(12),
   age INTEGER,
   gun_names non_killer_t
);
/</PRE
></BLOCKQUOTE
><P
CLASS="para"
>Now I can create my object view, using CAST...MULTISET to convert my normalized relational table into a nested table column:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>CREATE OR REPLACE VIEW nra_members_ov 
   OF nra_member_t
   WITH OBJECT OID (person_id)
AS
   SELECT luvguns.person_id, 
          luvguns.last_name, 
          luvguns.first_name, 
          luvguns.age,
<CODE
CLASS="userinput"
><B
>          CAST (MULTISET (</B
></CODE
>
             SELECT gun_name
               FROM non_killers bestfriend
              WHERE bestfriend.person_id = 
                    bestfriend.person_id)
            AS non_killer_t)
FROM nra_members luvguns;</PRE
></BLOCKQUOTE
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="AUTOID-2936"
></A
>Once I have this view in place, I also need to provide INSTEAD OF triggers to allow a user to update, insert, or delete through the view, making the illusion of my use of objects complete. These capabilities have been present since Oracle 8.0, so I will not repeat the code here (see the <I
CLASS="filename"
>nesttrig.sql</I
> trigger named nra_members_nest_insert for an example). I will, instead, focus on the new nested table trigger capability.</P
><P
CLASS="para"
>Here is the trigger definition; notice that the only difference is the line in bold, indicating that the trigger applies only to the specified nested table: </P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>/* Filename on companion disk: nesttrig.sql */
CREATE OR REPLACE TRIGGER nra_members_gun_rename
INSTEAD OF INSERT OR UPDATE
<B
CLASS="emphasis.bold"
>&#13;ON NESTED TABLE gun_names OF nra_members_ov</B
>
BEGIN
   IF INSERTING 
   THEN
      INSERT INTO non_killers (person_id, gun_name)
      VALUES (:PARENT.person_id, :NEW.gun_name);
   END IF;
   
   IF UPDATING
   THEN
      UPDATE non_killers
         SET gun_name = :NEW.gun_name
       WHERE gun_name = :OLD.gun_name
         AND person_id = :PARENT.person_id;
   END IF;
END;
/</PRE
></BLOCKQUOTE
><P
CLASS="para"
>Let's try it out. I inserted Charlton Heston (national spokesperson of the NRA as of May 1999) and hypothetical information about his guns into the two tables:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>INSERT INTO nra_members (
   person_id, last_name, first_name, age)
VALUES (100, 'HESTON', 'CHARLTON', 70);

INSERT INTO non_killers (
   person_id, gun_name)
   VALUES (100, 'COLT-45');
INSERT INTO non_killers (
   person_id, gun_name)
   VALUES (100, 'M-16');
INSERT INTO non_killers (
   person_id, gun_name)
   VALUES (100, 'DOUBLE-BARRELED JUSTICE');</PRE
></BLOCKQUOTE
><P
CLASS="para"
>Suppose then that Charlton Heston undergoes a sea change in philosophy. To demonstrate his new principles, he renames each of his guns, stored in that nested table. Here is the update in a single statement:</P
><BLOCKQUOTE
><PRE
CLASS="programlisting"
>UPDATE TABLE (SELECT gun_names
                FROM nra_members_ov
               WHERE person_id = 100)
   SET gun_name =
         DECODE (gun_name,
           'COLT-45', 'Pretty Pony',
           'M-16', 'I Love Mom',
           'DOUBLE-BARRELED JUSTICE', 'Peace on Earth',
           gun_name);</PRE
></BLOCKQUOTE
><P
CLASS="para"
> <A
CLASS="indexterm"
NAME="AUTOID-2947"
></A
> <A
CLASS="indexterm"
NAME="AUTOID-2949"
></A
> I use the TABLE...SELECT combination to extract just the nested table column from the object view. The SET clause then applies to the attributes of that nested table. </P
><BLOCKQUOTE
CLASS="tip"
><P
CLASS="para"
><STRONG
>TIP:</STRONG
> Tests indicate that these new nested table triggers will fire only when the DML action occurs on the nested table column, and <EM
CLASS="emphasis"
>not</EM
> on any other columns in the table.<A
CLASS="indexterm"
NAME="AUTOID-2954"
></A
></P
></BLOCKQUOTE
></DIV
></DIV
><DIV
CLASS="htmlnav"
><P
></P
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch05_05.htm"
TITLE="5.5 Analyzing the Impact of Bulk Operations"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 5.5 Analyzing the Impact of Bulk Operations"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="book"
HREF="index.htm"
TITLE="Oracle PL/SQL Programming Guide to Oracle 8i Features"
><IMG
SRC="../gifs/txthome.gif"
ALT="Oracle PL/SQL Programming Guide to Oracle 8i Features"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch06_02.htm"
TITLE="6.2 Database-Level Event Triggers"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 6.2 Database-Level Event Triggers"
BORDER="0"></A
></TD
></TR
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
>5.5 Analyzing the Impact of Bulk Operations</TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="index"
HREF="index/idx_0.htm"
TITLE="Book Index"
><IMG
SRC="../gifs/index.gif"
ALT="Book Index"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
>6.2 Database-Level Event Triggers</TD
></TR
></TABLE
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"></DIV
><IMG SRC="../gifs/smnavbar.gif"
USEMAP="#map"
BORDER="0"
ALT="The Oracle Library Navigation">

<P><font size="-1">
<a href="../copyrght.htm#copy">Copyright (c) 2000</a> O'Reilly &amp; Associates. All rights reserved.
</font></P>

<MAP NAME="map">

<AREA SHAPE="RECT"
COORDS="0,0,35,30"
HREF="../index.htm"
ALT="Library Home">

<AREA SHAPE="RECT"
COORDS="40,0,95,30"
HREF="../prog2/index.htm"
ALT="Oracle PL/SQL Programming, 2nd. Ed.">

<AREA SHAPE="RECT"
COORDS="100,0,200,30"
HREF="index.htm"
ALT="Guide to Oracle 8i Features">

<AREA SHAPE="RECT"
COORDS="205,0,245,30"
HREF="../bipack/index.htm"
ALT="Oracle Built-in Packages">

<AREA SHAPE="RECT"
COORDS="250,0,320,30"
HREF="../advprog/index.htm"
ALT="Advanced PL/SQL Programming with Packages">

<AREA SHAPE="RECT"
COORDS="325,0,420,30"
HREF="../webapp/index.htm"
ALT="Oracle Web Applications">

<AREA SHAPE="RECT"
COORDS="425,0,490,30"
HREF="../langpkt/index.htm"
ALT="Oracle PL/SQL Language Pocket Reference">

<AREA SHAPE="RECT"
COORDS="495,0,570,30"
HREF="../bipkt/index.htm"
ALT="Oracle PL/SQL Built-ins Pocket Reference">
</MAP>

</BODY
>
<!-- Mirrored from liso.cs.pusan.ac.kr by HTTrack Website Copier/3.x [XR&CO'2001] -->
</HTML
>
