<html><head><title>[Chapter 12] 12.3 Spare Details of the masterindex Program</TITLE
><meta name="DC.title" content="sed &amp; awk"><meta name="DC.creator" content="Dale Dougherty &amp; Arnold Robbins"><meta name="DC.publisher" content="O'Reilly &amp; Associates, Inc."><meta name="DC.date" content="1998-08-03T21:04:47Z"><meta name="DC.type" content="Text.Monograph"><meta name="DC.format" content="text/html" scheme="MIME"><meta name="DC.source" content="1-56592-225-5" scheme="ISBN"><meta name="DC.language" content="en-US"><meta name="generator" content="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><link rev="made" href="mailto:online-books@oreilly.com" title="Online Books Comments"><link rel="up" href="ch12_01.htm" webstripperlinkwas="ch12_01.htm" title="12. Full-Featured Applications"><link rel="prev" href="ch12_02.htm" webstripperlinkwas="ch12_02.htm" title="12.2 Generating a Formatted Index"><link rel="next" href="ch13_01.htm" webstripperlinkwas="ch13_01.htm" title="13. A Miscellany of Scripts"></HEAD
><body bgcolor="#FFFFFF" text="#000000"><div class="htmlnav"><h1><img src="gifs/smbanner.gif" webstripperlinkwas="gifs/smbanner.gif" alt="sed &amp; awk" usemap="#srchmap" border="0"></H1
><map name="srchmap"><area shape="RECT" coords="0,0,466,65" href="index.htm" webstripperlinkwas="http://www.ms.itb.ac.id/buku/unix-bookshelf/sedawk/index.htm" alt="sed &amp; awk"><area shape="RECT" coords="467,0,514,18" href="jobjects/fsearch.htm" webstripperlinkwas="jobjects/fsearch.htm" alt="Search this book"></MAP
><table width="515" border="0" cellspacing="0" cellpadding="0"><tr><td align="LEFT" valign="TOP" width="172"><a class="SECT1" href="ch12_02.htm" webstripperlinkwas="ch12_02.htm" title="12.2 Generating a Formatted Index"><img src="../gifs/txtpreva.gif" webstripperlinkwas="../gifs/txtpreva.gif" alt="Previous: 12.2 Generating a Formatted Index" border="0"></A
></TD
><td align="CENTER" valign="TOP" width="171"><b><font face="ARIEL,HELVETICA,HELV,SANSERIF" size="-1">Chapter 12<br>Full-Featured Applications</FONT
></B
></TD
><td align="RIGHT" valign="TOP" width="172"><a class="CHAPTER" href="ch13_01.htm" webstripperlinkwas="ch13_01.htm" title="13. A Miscellany of Scripts"><img src="../gifs/txtnexta.gif" webstripperlinkwas="../gifs/txtnexta.gif" alt="Next: 13. A Miscellany of Scripts" border="0"></A
></TD
></TR
></TABLE
>&nbsp;<hr align="LEFT" width="515" title="footer"></DIV
><div class="SECT1"><h2 class="sect1"><a class="title" name="SEDAWK-CH-12-SECT-3">12.3 Spare Details of the masterindex Program</A
></H2
><p class="para">This section presents a few interesting details of the
<kbd class="command">masterindex</KBD
> program that might otherwise escape
attention.  The purpose of this section is to extract some interesting
program fragments and show how they solve a particular problem.</P
><div class="sect2"><h3 class="sect2"><a class="title" name="SEDAWK-CH-12-SECT-3.1">12.3.1 How to Hide a Special Character</A
></H3
><p class="para"><a class="indexterm" name="AUTOID-11027"></A
><a class="indexterm" name="AUTOID-11029"></A
><a class="indexterm" name="AUTOID-11032"></A
><a class="indexterm" name="AUTOID-11036"></A
><a class="indexterm" name="AUTOID-11040"></A
>Our first fragment is from the <kbd class="command">input.idx</KBD
> script,
whose job it is to standardize the index entries before they are
sorted.  This program takes as its input a record consisting of two
tab-separated fields: the index entry and its page number.  A colon is
used as part of the syntax for indicating the parts of an index entry.</P
><p class="para">Because the program uses a colon as a special character, we must
provide a way to pass a literal colon through the program.  To do
this, we allow the indexer to specify two consecutive colons in the
input.  However, we can't simply convert the sequence to a literal
colon because the rest of the program modules called by
<kbd class="command">masterindex</KBD
> read three colon-separated fields.  The
solution is to convert the colon to its octal value using the
<kbd class="command">gsub()</KBD
> function.</P
><p class="para"><blockquote class="screen"><pre class="screen">#&lt; from input.idx
# convert literal colon to octal value
$1 ~ /::/ {
        # substitute octal value for &quot;::&quot;
        gsub(/::/, &quot;\\72&quot;, $1)</PRE
></BLOCKQUOTE
></P
><p class="para">&quot;\\72&quot; represents the octal value of a colon.  (You can find
this value by scanning a table of hexadecimal and octal equivalents in
the file <i class="filename">/usr/pub/ascii</I
>.)  In the last program
module, we use <kbd class="command">gsub()</KBD
> to convert the octal
value back to a colon.  Here's the code from
<kbd class="command">format.idx</KBD
>.</P
><p class="para"><blockquote class="screen"><pre class="screen">#&lt; from format.idx
# convert octal colon to &quot;literal&quot; colon
# make sub for each field, not $0, so that fields are not parsed
        gsub(/\\72/, &quot;:&quot;, $1)
        gsub(/\\72/, &quot;:&quot;, $2)
        gsub(/\\72/, &quot;:&quot;, $3)</PRE
></BLOCKQUOTE
></P
><p class="para">The first thing you notice is that we make this substitution
for each of the three fields separately, instead of having
one substitution command that operates on $0.  The reason for
this is that the input fields are colon-separated.  When
awk scans an input line, it breaks the line into fields.  If you 
change the contents of $0 at any point in the script, awk will 
reevaluate the value of $0 and parse the line into fields again.
Thus, if you have three fields prior to making the substitution,
and the substitution makes one change, adding a colon to $0,
then awk will recognize four fields.  By doing the substitution
for each field, we avoid having the line parsed again into
fields.</P
></DIV
><div class="sect2"><h3 class="sect2"><a class="title" name="SEDAWK-CH-12-SECT-3.2">12.3.2 Rotating Two Parts</A
></H3
><p class="para">Above we talked about the colon syntax for separating the primary and
secondary keys.  With some kinds of entries, it makes sense to
classify the item under its secondary key as well.  For instance, we
might have a group of program statements or user commands, such as
&quot;sed command.&quot;  The indexer might create two entries: one for &quot;sed
command&quot; and one for &quot;command: sed.&quot;  To make coding this kind of
entry easier, we implemented a coding convention that uses a tilde (~)
character to mark the two parts of this entry so that the first and
second part can be swapped to create the second entry automatically.[5]

Thus, coding the following index entry</P
><blockquote class="footnote"><p class="para">[5] The idea of rotating index entries was derived from <em class="emphasis">The AWK
Programming Language</EM
>.  There, however, an entry is
automatically rotated where a blank is found; the tilde is used to
prevent a rotation by &quot;filling in&quot; the space.  Rather than have
rotation be the default action, we use a different coding convention,
where the tilde indicates where the rotation should occur.</P
></BLOCKQUOTE
><p class="para"><blockquote class="screen"><pre class="screen">.XX &quot;sed~command&quot;</PRE
></BLOCKQUOTE
></P
><p class="para">produces two entries:</P
><p class="para"><blockquote class="screen"><pre class="screen">sed command	 43
command: sed	 43</PRE
></BLOCKQUOTE
></P
><p class="para">Here's the code that rotates entries. </P
><p class="para"><blockquote class="screen"><pre class="screen">#&lt; from input.idx 
# Match entries that need rotating that contain a single tilde
$1 ~ /~/ &amp;&amp; $1 !~ /~~/ { 
	# split first field into array named subfield 
	n = split($1, subfield, &quot;~&quot;)
	if (n == 2) {
	# print entry without &quot;~&quot; and then rotated
		printf(&quot;%s %s::%s\n&quot;, subfield[1], subfield[2], $2)
		printf(&quot;%s:%s:%s\n&quot;, subfield[2], subfield[1], $2)
	}
        next
}</PRE
></BLOCKQUOTE
></P
><p class="para">The pattern-matching rule matches any entry containing a tilde but not
two consecutive tildes, which indicate a literal tilde.  The procedure
uses the <kbd class="command">split()</KBD
> function to break the
first field into two &quot;subfields.&quot;  This gives us two substrings, one
before and one after the tilde.  The original entry is output and then
the rotated entry is output, both using the <kbd class="command">printf</KBD
>
statement.</P
><p class="para">Because the tilde is used as a special character, we use two
consecutive tildes to represent a literal tilde in the input.  The
following code occurs in the program after the code that swaps the two
parts of an entry.</P
><p class="para"><blockquote class="screen"><pre class="screen">#&lt; from input.idx 
# Match entries that contain two tildes 
$1 ~ /~~/ { 
	# replace ~~ with ~	
	gsub(/~~/, &quot;~&quot;, $1)
}</PRE
></BLOCKQUOTE
></P
><p class="para">Unlike the colon, which retains a special meaning throughout the
<kbd class="command">masterindex</KBD
> program, the tilde has no significance
after this module so we can simply output a literal tilde.</P
></DIV
><div class="sect2"><h3 class="sect2"><a class="title" name="SEDAWK-CH-12-SECT-3.3">12.3.3 Finding a Replacement</A
></H3
><p class="para">The next fragment also comes from <kbd class="command">input.idx</KBD
>.  The
problem was to look for two colons separated by text and change the
second colon to a semicolon.  If the input line contains</P
><p class="para"><blockquote class="screen"><pre class="screen">class: class initialize: (see also methods)</PRE
></BLOCKQUOTE
></P
><p class="para">then the result is:</P
><p class="para"><blockquote class="screen"><pre class="screen">class: class initialize; (see also methods)</PRE
></BLOCKQUOTE
></P
><p class="para">The problem is fairly simple to formulate&nbsp;- we want to change the
second colon, not the first one.  It is pretty easy to solve in sed
because of the ability to select and recall a portion of what is
matched in the replacement section (using \(...\) to
surround the portion to match and \1 to recall the first portion).
Lacking the same ability in awk, you have to be more clever.  Here's
one possible solution:</P
><p class="para"><blockquote class="screen"><pre class="screen">#&lt; from input.idx
#  replace 2nd colon with semicolon
if (sub(/:.*:/, &quot;&amp;;&quot;, $1)) 
         sub(/:;/, &quot;;&quot;, $1)</PRE
></BLOCKQUOTE
></P
><p class="para">The first substitution matches the entire span between two colons.  It
makes a replacement with what is matched (&amp;) followed by a
semicolon.  This substitution occurs within a conditional expression
that evaluates the return value of the
<kbd class="command">sub()</KBD
> function.  Remember, this function
returns 1 if a substitution is made&nbsp;- it does not return the
resulting string. In other words, if we make the first substitution,
then we make the second one.  The second substitution replaces &quot;:;&quot;
with &quot;;&quot;.  Because we can't make the replacement directly, we do it
indirectly by making the context in which the second colon appears
distinct.</P
></DIV
><div class="sect2"><h3 class="sect2"><a class="title" name="SEDAWK-CH-12-SECT-3.4">12.3.4 A Function for Reporting Errors</A
></H3
><p class="para"><a class="indexterm" name="AUTOID-11096"></A
><a class="indexterm" name="AUTOID-11098"></A
>The purpose of the <kbd class="command">input.idx</KBD
> program is to allow
variations (or less kindly, inconsistencies) in the coding of index
entries.  By reducing these variations to one basic form, the other
programs are made easier to write.</P
><p class="para">The other side is that if the <kbd class="command">input.idx</KBD
> program
cannot accept an entry, it must report it to the user and drop the
entry so that it does not affect the other programs.  The
<kbd class="command">input.idx</KBD
> program has a function used for error
reporting called <kbd class="command">printerr()</KBD
>, as shown
below:</P
><p class="para"><blockquote class="screen"><pre class="screen">function printerr (message) {
	# print message, record number and record
	printf(&quot;ERROR:%s (%d) %s\n&quot;, message, NR, $0) &gt; &quot;/dev/tty&quot;
}</PRE
></BLOCKQUOTE
></P
><p class="para">This function makes it easier to report errors in a standard manner.
It takes as an argument a <kbd class="command">message</KBD
>, which is usually
a string that describes the error.  It outputs this message along with
the record number and the record itself.  The output is directed to
the user's terminal &quot;/dev/tty.&quot;  This is a good practice since the
standard output of the program might be, as it is in this case,
directed to a pipe or to a file.  We could also send the error message
to standard error, like so:</P
><p class="para"><blockquote class="screen"><pre class="screen">print &quot;ERROR:&quot; message &quot; (&quot; NR &quot;) &quot;  $0 | &quot;cat 1&gt;&amp;2&quot;</PRE
></BLOCKQUOTE
></P
><p class="para">This opens a pipe to <kbd class="command">cat</KBD
>, with
<kbd class="command">cat</KBD
>'s standard output redirected to the standard
error.  If you are using gawk, mawk, or the Bell Labs awk, you could
instead say:</P
><p class="para"><blockquote class="screen"><pre class="screen">printf(&quot;ERROR:%s (%d) %s\n&quot;, message, NR, $0) &gt; &quot;/dev/stderr&quot;</PRE
></BLOCKQUOTE
></P
><p class="para">In the program, the <kbd class="command">printerr()</KBD
>
function is called as follows:</P
><p class="para"><blockquote class="screen"><pre class="screen">printerr(&quot;No page number&quot;)</PRE
></BLOCKQUOTE
></P
><p class="para">When this error occurs, the user sees the following error message:</P
><p class="para"><blockquote class="screen"><pre class="screen">ERROR:No page number (612) geometry management:set_values_almost</PRE
></BLOCKQUOTE
></P
></DIV
><div class="sect2"><h3 class="sect2"><a class="title" name="SEDAWK-CH-12-SECT-3.5">12.3.5 Handling See Also Entries</A
></H3
><p class="para">One type of index entry is a &quot;see also.&quot;  Like a &quot;see&quot; reference, it
refers the reader to another entry.  However, a &quot;see also&quot; entry may
have a page number as well.  In other words, this entry contains
information of its own but refers the reader elsewhere for additional
information.  Here are a few sample entries.</P
><p class="para"><blockquote class="screen"><pre class="screen">error procedure	34
error procedure (see also XtAppSetErrorMsgHandler)	35
error procedure (see also XtAppErrorMsg)</PRE
></BLOCKQUOTE
></P
><p class="para">The first entry in this sample has a page number while the last one
does not.  When the <kbd class="command">input.idx</KBD
> program finds a &quot;see
also&quot; entry, it checks to see if a page number ($2) is supplied.  If
there is one, it outputs two records, the first of which is the entry
without the page number and the second of which is an entry and page
number without the &quot;see also&quot; reference.</P
><p class="para"><blockquote class="screen"><pre class="screen">#&lt; input.idx
# if no page number
        if ($2 == &quot;&quot;) {
                print $0 &quot;:&quot;
                next
        }
        else {
        # output two entries:
        # print See Also entry w/out page number
                print $1 &quot;:&quot;
        # remove See Also
                sub(/ *~zz\(see also.*$/, &quot;&quot;, $1)
                sub(/;/, &quot;&quot;, $1)
        # print as normal entry
                if ( $1 ~ /:/ )
                        print $1 &quot;:&quot; $2
                else
                        print $1 &quot;::&quot; $2
                next
        }</PRE
></BLOCKQUOTE
></P
><p class="para">The next problem to be solved was how to get the entries sorted in the
proper order.  The <kbd class="command">sort</KBD
> program, using the options
we gave it, sorted the secondary keys for &quot;see also&quot; entries together
under &quot;s.&quot; (The <i class="option">-d</I
> option causes the parenthesis to
be ignored.)  To change the order of the sort, we alter the sort key
by adding the sequence &quot;~zz&quot; to the front of it.</P
><p class="para"><blockquote class="screen"><pre class="screen">#&lt; input.idx
# add &quot;~zz&quot; for sort at end
        sub(/\([Ss]ee [Aa]lso/, &quot;~zz(see also&quot;, $1)</PRE
></BLOCKQUOTE
></P
><p class="para">The tilde is not interpreted by the sort but it helps us identify the
string later when we remove it.  Adding &quot;~zz&quot; assures us of sorting to
the end of the list of secondary or tertiary keys.</P
><p class="para">The <kbd class="command">pagenums.idx</KBD
> script removes the sort string
from &quot;see also&quot; entries.  However, as we described earlier, we look
for a series of &quot;see also&quot; entries for the same key and create a list.
Therefore, we also remove that which is the same for all entries, and
put the reference itself in an array:</P
><p class="para"><blockquote class="screen"><pre class="screen">#&lt; pagenums.idx
# remove secondary key along with &quot;~zz&quot;
      sub(/^.*~zz\([Ss]ee +[Aa]lso */, &quot;&quot;, SECONDARY)
      sub(/\) */, &quot;&quot;, SECONDARY)
# assign to next element of seeAlsoList
      seeAlsoList[++eachSeeAlso] = SECONDARY &quot;; &quot;</PRE
></BLOCKQUOTE
></P
><p class="para">There is a function that outputs the list of &quot;see also&quot; entries,
separating each of them by a semicolon.  Thus, the output of the &quot;see
also&quot; entry by <kbd class="command">pagenums.idx</KBD
> looks like:</P
><p class="para"><blockquote class="screen"><pre class="screen">error procedure:(see also XtAppErrorMsg; XtAppSetErrorHandler.)</PRE
></BLOCKQUOTE
></P
></DIV
><div class="sect2"><h3 class="sect2"><a class="title" name="SEDAWK-CH-12-SECT-3.6">12.3.6 Alternative Ways to Sort</A
></H3
><p class="para">In this program, we chose not to support <kbd class="command">troff</KBD
> font
and point size requests in index entries.  If you'd like to support
special escape sequences, one way to do so is shown in <cite class="citetitle">The
AWK Programming Language</CITE
>.  For each record, take the first
field and prepend it to the record as the sort key.  Now that there is
a duplicate of the first field, remove the escape sequences from the
sort key.  Once the entries are sorted, you can remove the sort key.
This process prevents the escape sequences from disturbing the sort.</P
><p class="para">Yet another way is to do something similar to what we did for &quot;see also&quot;
entries.  Because special characters are ignored in the sort, we could
use the <kbd class="command">input.idx</KBD
> program to convert a
<kbd class="command">troff</KBD
> font change sequence such as &quot;\fB&quot; to
&quot;~~~&quot; and &quot;\fI&quot; to
&quot;~~~~,&quot; or any convenient
escape sequence.  This would get the sequence through the
<kbd class="command">sort</KBD
> program without disturbing the sort.  (This
technique was used by Steve Talbott in his original indexing script.)</P
><p class="para">The only additional problem that needs to be recognized in both cases
is that two entries for the same term, one with font information and
one without, will be treated as different entries when one is compared
to the other.</P
></DIV
></DIV
><div class="htmlnav"><p></P
><hr align="LEFT" width="515" title="footer"><table width="515" border="0" cellspacing="0" cellpadding="0"><tr><td align="LEFT" valign="TOP" width="172"><a class="SECT1" href="ch12_02.htm" webstripperlinkwas="ch12_02.htm" title="12.2 Generating a Formatted Index"><img src="../gifs/txtpreva.gif" webstripperlinkwas="../gifs/txtpreva.gif" alt="Previous: 12.2 Generating a Formatted Index" border="0"></A
></TD
><td align="CENTER" valign="TOP" width="171"><a class="book" href="index.htm" webstripperlinkwas="http://www.ms.itb.ac.id/buku/unix-bookshelf/sedawk/index.htm" title="sed &amp; awk"><img src="../gifs/txthome.gif" webstripperlinkwas="../gifs/txthome.gif" alt="sed &amp; awk" border="0"></A
></TD
><td align="RIGHT" valign="TOP" width="172"><a class="CHAPTER" href="ch13_01.htm" webstripperlinkwas="ch13_01.htm" title="13. A Miscellany of Scripts"><img src="../gifs/txtnexta.gif" webstripperlinkwas="../gifs/txtnexta.gif" alt="Next: 13. A Miscellany of Scripts" border="0"></A
></TD
></TR
><tr><td align="LEFT" valign="TOP" width="172">12.2 Generating a Formatted Index</TD
><td align="CENTER" valign="TOP" width="171"><a class="index" href="index/idx_0.htm" webstripperlinkwas="index/idx_0.htm" title="Book Index"><img src="../gifs/index.gif" webstripperlinkwas="../gifs/index.gif" alt="Book Index" border="0"></A
></TD
><td align="RIGHT" valign="TOP" width="172">13. A Miscellany of Scripts</TD
></TR
></TABLE
><hr align="LEFT" width="515" title="footer"><img src="../gifs/smnavbar.gif" webstripperlinkwas="../gifs/smnavbar.gif" usemap="#map" border="0" alt="The UNIX CD Bookshelf Navigation"><map name="map"><area shape="RECT" coords="0,0,73,21" href="../index.html" webstripperlinkwas="http://www.ms.itb.ac.id/buku/unix-bookshelf/index.html" alt="The UNIX CD Bookshelf"><area shape="RECT" coords="74,0,163,21" href="../upt/index.htm" webstripperlinkwas="http://www.ms.itb.ac.id/buku/unix-bookshelf/upt/index.htm" alt="UNIX Power Tools"><area shape="RECT" coords="164,0,257,21" href="../unixnut/index.htm" webstripperlinkwas="http://www.ms.itb.ac.id/buku/unix-bookshelf/unixnut/index.htm" alt="UNIX in a Nutshell"><area shape="RECT" coords="258,0,321,21" href="../vi/index.htm" webstripperlinkwas="http://www.ms.itb.ac.id/buku/unix-bookshelf/vi/index.htm" alt="Learning the vi Editor"><area shape="RECT" coords="322,0,378,21" href="index.htm" webstripperlinkwas="http://www.ms.itb.ac.id/buku/unix-bookshelf/sedawk/index.htm" alt="sed &amp; awk"><area shape="RECT" coords="379,0,438,21" href="../ksh/index.htm" webstripperlinkwas="http://www.ms.itb.ac.id/buku/unix-bookshelf/ksh/index.htm" alt="Learning the Korn Shell"><area shape="RECT" coords="439,0,514,21" href="../lrnunix/index.htm" webstripperlinkwas="http://www.ms.itb.ac.id/buku/unix-bookshelf/lrnunix/index.htm" alt="Learning the UNIX Operating System"></MAP
></DIV
></BODY
></HTML
>
