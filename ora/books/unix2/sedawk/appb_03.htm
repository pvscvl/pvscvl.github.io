<html><head><title>[Appendix B] B.3 Command Summary for awk</TITLE
><meta name="DC.title" content="sed &amp; awk"><meta name="DC.creator" content="Dale Dougherty &amp; Arnold Robbins"><meta name="DC.publisher" content="O'Reilly &amp; Associates, Inc."><meta name="DC.date" content="1998-08-03T21:06:51Z"><meta name="DC.type" content="Text.Monograph"><meta name="DC.format" content="text/html" scheme="MIME"><meta name="DC.source" content="1-56592-225-5" scheme="ISBN"><meta name="DC.language" content="en-US"><meta name="generator" content="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><link rev="made" href="mailto:online-books@oreilly.com" title="Online Books Comments"><link rel="up" href="appb_01.htm" webstripperlinkwas="appb_01.htm" title="B. Quick Reference for awk"><link rel="prev" href="appb_02.htm" webstripperlinkwas="appb_02.htm" title="B.2 Language Summary for awk"><link rel="next" href="appc_01.htm" webstripperlinkwas="appc_01.htm" title="C. Supplement for Chapter 12"></HEAD
><body bgcolor="#FFFFFF" text="#000000"><div class="htmlnav"><h1><img src="gifs/smbanner.gif" webstripperlinkwas="gifs/smbanner.gif" alt="sed &amp; awk" usemap="#srchmap" border="0"></H1
><map name="srchmap"><area shape="RECT" coords="0,0,466,65" href="index.htm" webstripperlinkwas="http://www.ms.itb.ac.id/buku/unix-bookshelf/sedawk/index.htm" alt="sed &amp; awk"><area shape="RECT" coords="467,0,514,18" href="jobjects/fsearch.htm" webstripperlinkwas="jobjects/fsearch.htm" alt="Search this book"></MAP
><table width="515" border="0" cellspacing="0" cellpadding="0"><tr><td align="LEFT" valign="TOP" width="172"><a class="SECT1" href="appb_02.htm" webstripperlinkwas="appb_02.htm" title="B.2 Language Summary for awk"><img src="../gifs/txtpreva.gif" webstripperlinkwas="../gifs/txtpreva.gif" alt="Previous: B.2 Language Summary for awk" border="0"></A
></TD
><td align="CENTER" valign="TOP" width="171"><b><font face="ARIEL,HELVETICA,HELV,SANSERIF" size="-1">Appendix B<br>Quick Reference for awk</FONT
></B
></TD
><td align="RIGHT" valign="TOP" width="172"><a class="APPENDIX" href="appc_01.htm" webstripperlinkwas="appc_01.htm" title="C. Supplement for Chapter 12"><img src="../gifs/txtnexta.gif" webstripperlinkwas="../gifs/txtnexta.gif" alt="Next: C. Supplement for Chapter 12" border="0"></A
></TD
></TR
></TABLE
>&nbsp;<hr align="LEFT" width="515" title="footer"></DIV
><div class="SECT1"><h2 class="sect1"><a class="title" name="SEDAWK-APP-B-SECT-3">B.3 Command Summary for awk</A
></H2
><p class="para"><a class="indexterm" name="B.AWK2"></A
><a class="indexterm" name="B.AWK3"></A
>The following alphabetical list of statements and functions includes
all that are available in POSIX awk, nawk, or gawk.  See 
<a class="xref" href="ch11_01.htm" webstripperlinkwas="ch11_01.htm" title="A Flock of awks">Chapter 11, A Flock of awks</A
>, for extensions available in different
implementations.</P
><dl class="variablelist"><dt class="term"><kbd class="command">atan2()</KBD
></DT
><dd class="listitem"><p class="para"><kbd class="command">atan2</KBD
>(<em class="emphasis">y</EM
>, <em class="emphasis">x</EM
>)</P
><p class="para">Returns the arctangent of
<em class="emphasis">y</EM
>/<em class="emphasis">x</EM
> in radians.</P
></DD
><dt class="term"><kbd class="command">break</KBD
></DT
><dd class="listitem"><p class="para">Exit from a <kbd class="command">while</KBD
>, <kbd class="command">for</KBD
>, or
<kbd class="command">do</KBD
> loop.</P
></DD
><dt class="term"><kbd class="command">close()</KBD
></DT
><dd class="listitem"><p class="para"><kbd class="command">close</KBD
>(<em class="emphasis">filename-expr</EM
>)</P
><p class="para"><kbd class="command">close</KBD
>(<em class="emphasis">command-expr</EM
>)</P
><p class="para">In most implementations of awk, you can only have a limited number of
files and/or pipes open simultaneously.  Therefore, awk provides a
<kbd class="command">close()</KBD
> function that allows you to close a
file or a pipe.  It takes as an argument the same expression that
opened the pipe or file.  This expression must be identical, character
by character, to the one that opened the file or pipe&nbsp;- even whitespace
is significant.</P
></DD
><dt class="term"><kbd class="command">continue</KBD
></DT
><dd class="listitem"><p class="para">Begin next iteration of <kbd class="command">while</KBD
>,
<kbd class="command">for</KBD
>, or <kbd class="command">do</KBD
> loop.</P
></DD
><dt class="term"><kbd class="command">cos()</KBD
></DT
><dd class="listitem"><p class="para"><kbd class="command">cos</KBD
>(<em class="emphasis">x</EM
>)</P
><p class="para">Return cosine of <em class="emphasis">x</EM
> in radians. </P
></DD
><dt class="term"><kbd class="command">delete</KBD
></DT
><dd class="listitem"><p class="para"><kbd class="command">delete</KBD
> <em class="emphasis">array</EM
>[<em class="emphasis">element</EM
>]</P
><p class="para">Delete element of an array.</P
></DD
><dt class="term"><kbd class="command">do</KBD
></DT
><dd class="listitem"><p class="para"><kbd class="command">do</KBD
></P
><p class="para"> <em class="emphasis">body</EM
></P
><p class="para"><kbd class="command">while</KBD
> (<em class="emphasis">expr</EM
>) </P
><p class="para">Looping statement.  Execute statements in
<em class="emphasis">body</EM
> then evaluate
<em class="emphasis">expr</EM
> and if true, execute
<em class="emphasis">body</EM
> again.</P
></DD
><dt class="term"><kbd class="command">exit</KBD
></DT
><dd class="listitem"><p class="para"><kbd class="command">exit</KBD
> [<em class="emphasis">expr</EM
>]</P
><p class="para">Exit from script, reading no new input.  The <kbd class="command">END</KBD
> rule,
if it exists, will be executed. An optional <em class="emphasis">expr</EM
>
becomes awk's return value.</P
></DD
><dt class="term"><kbd class="command">exp()</KBD
></DT
><dd class="listitem"><p class="para"><kbd class="command">exp</KBD
>(<em class="emphasis">x</EM
>)</P
><p class="para">Return exponential of <em class="emphasis">x</EM
>
(<em class="emphasis">e</EM
> ^ <em class="emphasis">x</EM
>).</P
></DD
><dt class="term"><kbd class="command">for</KBD
></DT
><dd class="listitem"><p class="para"><kbd class="command">for</KBD
> (<em class="emphasis">init-expr</EM
>; <em class="emphasis">test-expr</EM
>; <em class="emphasis">incr-expr</EM
>) <em class="emphasis">statement</EM
></P
><p class="para">C-style looping construct.  <em class="emphasis">init-expr</EM
>
assigns the initial value of the counter
variable. <em class="emphasis">test-expr</EM
> is a relational
expression that is evaluated each time before executing the
statement. When <em class="emphasis">test-expr</EM
> is false, the
loop is exited. <em class="emphasis">incr-expr</EM
> is used to
increment the counter variable after each pass.</P
><p class="para"><kbd class="command">for</KBD
> (<em class="emphasis">item</EM
> <kbd class="command">in</KBD
> <em class="emphasis">array</EM
>) <em class="emphasis">statement</EM
></P
><p class="para">Special loop designed for reading associative arrays.  For each
element of the array, the <em class="emphasis">statement</EM
> is
executed; the element can be referenced by
<em class="emphasis">array</EM
>[<em class="emphasis">item</EM
>].</P
></DD
><dt class="term"><kbd class="command">getline</KBD
></DT
><dd class="listitem"><p class="para">Read next line of input.</P
><p class="para"><kbd class="command">getline</KBD
> [<em class="emphasis">var</EM
>] [&lt;<em class="emphasis">file</EM
>]</P
><p class="para"><em class="emphasis">command</EM
> | <kbd class="command">getline</KBD
> [<em class="emphasis">var</EM
>] </P
><p class="para">The first form reads input from <em class="emphasis">file</EM
> and the
second form reads the output of <em class="emphasis">command</EM
>.  Both
forms read one line at a time, and each time the statement is executed
it gets the next line of input.  The line of input is assigned to $0
and it is parsed into fields, setting <kbd class="command">NF</KBD
>,
<kbd class="command">NR</KBD
>, and <kbd class="command">FNR</KBD
>.  If
<em class="emphasis">var</EM
> is specified, the result is assigned to
<em class="emphasis">var</EM
> and the $0 is not changed.  Thus, if the
result is assigned to a variable, the current line does not change.
<kbd class="command">getline</KBD
> is actually a function and it returns 1 if
it reads a record successfully, 0 if end-of-line is encountered, and
-1 if for some reason it is otherwise unsuccessful.</P
></DD
><dt class="term"><kbd class="command">gsub()</KBD
></DT
><dd class="listitem"><p class="para"><kbd class="command">gsub</KBD
>(<em class="emphasis">r</EM
>, <em class="emphasis">s</EM
>, <em class="emphasis">t</EM
>)</P
><p class="para">Globally substitute <em class="emphasis">s</EM
> for each match of the
regular expression <em class="emphasis">r</EM
> in the string
<em class="emphasis">t</EM
>.  Return the number of substitutions.  If
<em class="emphasis">t</EM
> is not supplied, defaults to $0.</P
></DD
><dt class="term"><kbd class="command">if</KBD
></DT
><dd class="listitem"><p class="para"><kbd class="command">if</KBD
> (<em class="emphasis">expr</EM
>) <em class="emphasis">statement1</EM
></P
><p class="para">[ <kbd class="command">else</KBD
> <em class="emphasis">statement2</EM
> ]</P
><p class="para">Conditional statement.  Evaluate <em class="emphasis">expr</EM
> and,
if true, execute <em class="emphasis">statement1</EM
>; if
<kbd class="command">else</KBD
> clause is supplied, execute
<em class="emphasis">statement2</EM
> if
<em class="emphasis">expr</EM
> is false.</P
></DD
><dt class="term"><kbd class="command">index()</KBD
></DT
><dd class="listitem"><p class="para"><kbd class="command">index</KBD
>(<em class="emphasis">str</EM
>, <em class="emphasis">substr</EM
>)</P
><p class="para">Return position (starting at 1) of substring in string.</P
></DD
><dt class="term"><kbd class="command">int()</KBD
></DT
><dd class="listitem"><p class="para"><kbd class="command">int</KBD
>(<em class="emphasis">x</EM
>)</P
><p class="para">Return integer value of <em class="emphasis">x</EM
> by truncating any
digits following a decimal point.</P
></DD
><dt class="term"><kbd class="command">length()</KBD
></DT
><dd class="listitem"><p class="para"><kbd class="command">length</KBD
>(<em class="emphasis">str</EM
>)</P
><p class="para">Return length of string, or the length of $0 if no argument.</P
></DD
><dt class="term"><kbd class="command">log()</KBD
></DT
><dd class="listitem"><p class="para"><kbd class="command">log</KBD
>(<em class="emphasis">x</EM
>)</P
><p class="para">Return natural logarithm (base <em class="emphasis">e</EM
>) of
<em class="emphasis">x</EM
>.</P
></DD
><dt class="term"><kbd class="command">match()</KBD
></DT
><dd class="listitem"><p class="para"><kbd class="command">match</KBD
>(<em class="emphasis">s</EM
>, <em class="emphasis">r</EM
>)</P
><p class="para">Function that matches the pattern, specified by the regular expression
<em class="emphasis">r</EM
>, in the string
<em class="emphasis">s</EM
> and returns either the position in
<em class="emphasis">s</EM
> where the match begins, or 0 if no
occurrences are found.  Sets the values of <kbd class="command">RSTART</KBD
>
and <kbd class="command">RLENGTH</KBD
> to the start and length of the match,
respectively.</P
></DD
><dt class="term"><kbd class="command">next</KBD
></DT
><dd class="listitem"><p class="para">Read next input line and begin executing script at first rule.</P
></DD
><dt class="term"><kbd class="command">print</KBD
></DT
><dd class="listitem"><p class="para"><kbd class="command">print</KBD
> [ <em class="emphasis">output-expr</EM
> ] [ <em class="emphasis">dest-expr</EM
> ]</P
><p class="para">Evaluate the <em class="emphasis">output-expr</EM
> and direct it to
standard output followed by the value of <kbd class="command">ORS</KBD
>.  Each
<em class="emphasis">output-expr</EM
> is separated by the value of
<kbd class="command">OFS</KBD
>.  <em class="emphasis">dest-expr</EM
> is an
optional expression that directs the output to a file or pipe.  &quot;&gt;
<em class="emphasis">file</EM
>&quot; directs the output to a file,
overwriting its previous contents.  &quot;&gt;&gt;
<em class="emphasis">file</EM
>&quot; appends the output to a file,
preserving its previous contents.  In both of these cases, the file will be
created if it does not already exist.  &quot;| <em class="emphasis">command</EM
>&quot;
directs the output as the input to a system command.</P
></DD
><dt class="term"><kbd class="command">printf</KBD
></DT
><dd class="listitem"><p class="para"><kbd class="command">printf</KBD
> (<em class="emphasis">format-expr</EM
> [, <em class="emphasis">expr-list</EM
> ]) [ <em class="emphasis">dest-expr</EM
> ]</P
><p class="para">An alternative output statement borrowed from the C language.  It has
the ability to produce formatted output.  It can also be used to
output data without automatically producing a newline.
<em class="emphasis">format-expr</EM
> is a string of format
specifications and constants; see next section for a list of format
specifiers.  <em class="emphasis">expr-list</EM
> is a list of
arguments corresponding to format specifiers.  See the
<kbd class="command">print</KBD
> statement for a description of
<em class="emphasis">dest-expr</EM
>.</P
></DD
><dt class="term"><kbd class="command">rand()</KBD
></DT
><dd class="listitem"><p class="para"><kbd class="command">rand()</KBD
></P
><p class="para">Generate a random number between 0 and 1.  This function returns the
same series of numbers each time the script is executed, unless the
random number generator is seeded using the
<kbd class="command">srand()</KBD
> function.</P
></DD
><dt class="term"><kbd class="command">return</KBD
></DT
><dd class="listitem"><p class="para"><kbd class="command">return</KBD
> [<em class="emphasis">expr</EM
>]</P
><p class="para">Used at end of user-defined functions to exit function, returning
value of expression.</P
></DD
><dt class="term"><kbd class="command">sin()</KBD
></DT
><dd class="listitem"><p class="para"><kbd class="command">sin</KBD
>(<em class="emphasis">x</EM
>)</P
><p class="para">Return sine of <em class="emphasis">x</EM
> in radians.</P
></DD
><dt class="term"><kbd class="command">split()</KBD
></DT
><dd class="listitem"><p class="para"><kbd class="command">split</KBD
>(<em class="emphasis">str</EM
>, <em class="emphasis">array</EM
>, <em class="emphasis">sep</EM
>)</P
><p class="para">Function that parses string into elements of array using field
separator, returning number of elements in array.  Value of
<kbd class="command">FS</KBD
> is used if no field separator is specified.
Array splitting works the same as field splitting.</P
></DD
><dt class="term"><kbd class="command">sprintf()</KBD
></DT
><dd class="listitem"><p class="para"><kbd class="command">sprintf</KBD
> (<em class="emphasis">format-expr</EM
> [, <em class="emphasis">expr-list</EM
> ] )</P
><p class="para">Function that returns string formatted according to
<kbd class="command">printf</KBD
> format specification. It formats data but
does not output it.  <em class="emphasis">format-expr</EM
> is a
string of format specifications and constants; see the next section for a
list of format specifiers.  <em class="emphasis">expr-list</EM
> is a
list of arguments corresponding to format specifiers.</P
></DD
><dt class="term"><kbd class="command">sqrt()</KBD
></DT
><dd class="listitem"><p class="para"><kbd class="command">sqrt</KBD
>(<em class="emphasis">x</EM
>)</P
><p class="para">Return square root of <em class="emphasis">x</EM
>.</P
></DD
><dt class="term"><kbd class="command">srand()</KBD
></DT
><dd class="listitem"><p class="para"><kbd class="command">srand</KBD
>(<em class="emphasis">expr</EM
>)</P
><p class="para">Use <em class="emphasis">expr</EM
> to set a new seed for random
number generator.  Default is time of day.  Return value is the old
seed.</P
></DD
><dt class="term"><kbd class="command">sub()</KBD
></DT
><dd class="listitem"><p class="para"><kbd class="command">sub</KBD
>(<em class="emphasis">r</EM
>, <em class="emphasis">s</EM
>, <em class="emphasis">t</EM
>)</P
><p class="para">Substitute <em class="emphasis">s</EM
> for first match of the regular
expression <em class="emphasis">r</EM
> in the string
<em class="emphasis">t</EM
>.  Return 1 if successful; 0 otherwise.
If <em class="emphasis">t</EM
> is not supplied, defaults to $0.</P
></DD
><dt class="term"><kbd class="command">substr()</KBD
></DT
><dd class="listitem"><p class="para"><kbd class="command">substr</KBD
>(<em class="emphasis">str</EM
>, <em class="emphasis">beg</EM
>, <em class="emphasis">len</EM
>)</P
><p class="para">Return substring of string <em class="emphasis">str</EM
> at beginning
position <em class="emphasis">beg</EM
>, and the characters that
follow to maximum specified length <em class="emphasis">len</EM
>.  If
no length is given, use the rest of the string.</P
></DD
><dt class="term"><kbd class="command">system()</KBD
></DT
><dd class="listitem"><p class="para"><kbd class="command">system</KBD
>(<em class="emphasis">command</EM
>)</P
><p class="para">Function that executes the specified
<em class="emphasis">command</EM
> and returns its status.  The status
of the executed command typically indicates success or failure.  A
value of 0 means that the command executed successfully. A non-zero
value, whether positive or negative, indicates a failure of some sort.
The documentation for the command you're running will give you the
details.  The output of the command is not available for processing
within the awk script.  Use &quot;<em class="emphasis">command</EM
>
<kbd class="command">| getline</KBD
>&quot; to read the output of a command into
the script.</P
></DD
><dt class="term"><kbd class="command">tolower()</KBD
></DT
><dd class="listitem"><p class="para"><kbd class="command">tolower</KBD
>(<em class="emphasis">str</EM
>)</P
><p class="para">Translate all uppercase characters in <em class="emphasis">str</EM
>
to lowercase and return the new string.[3]</P
><blockquote class="footnote"><p class="para">[3] Very early versions of nawk, such as that in SunOS 4.1.x, don't
support <kbd class="command">tolower()</KBD
> and
<kbd class="command">toupper()</KBD
>. However, they are now part of
the POSIX specification for awk.  </P
></BLOCKQUOTE
></DD
><dt class="term"><kbd class="command">toupper()</KBD
></DT
><dd class="listitem"><p class="para"><kbd class="command">toupper</KBD
>(<em class="emphasis">str</EM
>)</P
><p class="para">Translate all lowercase characters in <em class="emphasis">str</EM
>
to uppercase and return the new string.</P
></DD
><dt class="term"><kbd class="command">while</KBD
></DT
><dd class="listitem"><p class="para"><kbd class="command">while</KBD
> (<em class="emphasis">expr</EM
>)
   <em class="emphasis">statement</EM
></P
><p class="para">Looping construct.  While <em class="emphasis">expr</EM
> is true,
execute <em class="emphasis">statement</EM
>.</P
></DD
></DL
><div class="sect2"><h3 class="sect2"><a class="title" name="SEDAWK-APP-B-SECT-3.1.1">B.3.1 Format Expressions Used in printf and sprintf</A
></H3
><p class="para">A format expression can take three optional modifiers following &quot;%&quot;
and preceding the format specifier:</P
><blockquote class="literallayout"><p class="literallayout"><kbd class="command">%-</KBD
><em class="emphasis">width</EM
>.<em class="emphasis">precision format-specifier</EM
></P
></BLOCKQUOTE
><p class="para">The <em class="emphasis">width</EM
> of the output field is a numeric
value.  When you specify a field width, the contents of the field will
be right-justified by default.  You must specify &quot;-&quot; to get
left-justification.  Thus, &quot;%-20s&quot; outputs a string left-justified in
a field 20 characters wide.  If the string is less than 20 characters,
the field will be padded with spaces to fill.</P
><p class="para">The <em class="emphasis">precision</EM
> modifier, used for decimal or
floating-point values, controls the number of digits that appear to
the right of the decimal point.  For string formats, it controls the
number of characters from the string to print.</P
><p class="para">You can specify both the <em class="emphasis">width</EM
> and
<em class="emphasis">precision</EM
> dynamically, via values in the
<kbd class="command">printf</KBD
> or <kbd class="command">sprintf</KBD
> argument list.
You do this by specifying asterisks, instead of specifying literal values.</P
><p class="para"><blockquote class="screen"><pre class="screen">printf(&quot;%*.*g\n&quot;, 5, 3, myvar);</PRE
></BLOCKQUOTE
></P
><p class="para">In this example, the width is 5, the precision is 3, and the value to
print will come from <kbd class="command">myvar</KBD
>.  Older versions of nawk
may not support this.</P
><p class="para">Note that the default precision for the output of numeric values is
&quot;%.6g.&quot;  The default can be changed by setting the system variable
<kbd class="command">OFMT</KBD
>.  This affects the precision used by the
<kbd class="command">print</KBD
> statement when outputting numbers.  For
instance, if you are using awk to write reports that contain dollar
values, you might prefer to change <kbd class="command">OFMT</KBD
> to &quot;%.2f.&quot;</P
><p class="para">The format specifiers, shown in <a class="xref" href="#SEDAWK-APP-B-TAB-6" title="Format Specifiers Used in printf">Table 13.7</A
>, 
are used with
<kbd class="command">printf</KBD
> and <kbd class="command">sprintf</KBD
> statements.</P
><table class="table"><caption class="table"><a class="title" name="SEDAWK-APP-B-TAB-6">Table B.6: Format Specifiers Used in printf</A
></CAPTION
><thead class="thead"><tr class="row" valign="TOP"><th class="entry" align="LEFT" rowspan="1" colspan="1">Character</TH
><th class="entry" align="LEFT" rowspan="1" colspan="1">Description</TH
></TR
></THEAD
><tbody class="tbody"><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><b class="emphasis.bold">c</B
></TD
><td class="entry" rowspan="1" colspan="1">ASCII character.</TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><b class="emphasis.bold">d</B
></TD
><td class="entry" rowspan="1" colspan="1">Decimal integer.</TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><b class="emphasis.bold">i</B
></TD
><td class="entry" rowspan="1" colspan="1">Decimal integer. Added in POSIX.</TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><b class="emphasis.bold">e</B
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">Floating-point format
([-]<em class="emphasis">d</EM
>.<em class="emphasis">precision</EM
><kbd class="command">e</KBD
>[+-]<em class="emphasis">dd</EM
>).</P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><b class="emphasis.bold">E</B
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">Floating-point format ([-]<em class="emphasis">d</EM
>.<em class="emphasis">precision</EM
><kbd class="command">E</KBD
>[+-]<em class="emphasis">dd</EM
>).</P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><b class="emphasis.bold">f</B
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">Floating-point format ([-]<em class="emphasis">ddd</EM
>.<em class="emphasis">precision</EM
>).</P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><b class="emphasis.bold">g</B
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para"><kbd class="command">e</KBD
> or <kbd class="command">f</KBD
> conversion, whichever is
shortest, with trailing zeros removed.</P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><b class="emphasis.bold">G</B
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para"><kbd class="command">E</KBD
> or <kbd class="command">f</KBD
> conversion, whichever is
shortest, with trailing zeros removed.</P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><b class="emphasis.bold">o</B
></TD
><td class="entry" rowspan="1" colspan="1">Unsigned octal value.</TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><b class="emphasis.bold">s</B
></TD
><td class="entry" rowspan="1" colspan="1">String.</TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><b class="emphasis.bold">x</B
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">Unsigned hexadecimal number. Uses
<kbd class="command">a</KBD
>-<kbd class="command">f</KBD
> for 10 to 15.</P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><b class="emphasis.bold">X</B
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">Unsigned hexadecimal number. Uses
<kbd class="command">A</KBD
>-<kbd class="command">F</KBD
> for 10 to 15.</P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><b class="emphasis.bold">%</B
></TD
><td class="entry" rowspan="1" colspan="1">Literal %.</TD
></TR
></TBODY
></TABLE
><p class="para">Often, whatever format specifiers are available in the system's
<em class="emphasis">sprintf</EM
>(3) subroutine are available in awk.</P
><p class="para">The way <kbd class="command">printf</KBD
> and
<kbd class="command">sprintf()</KBD
> do rounding will often depend
upon the system's C <em class="emphasis">sprintf</EM
>(3) subroutine.
On many machines, <em class="emphasis">sprintf</EM
> rounding is
&quot;unbiased,&quot; which means it doesn't always round a trailing &quot;.5&quot; up,
contrary to naive expectations.  In unbiased rounding, &quot;.5&quot; rounds to
even, rather than always up, so 1.5 rounds to 2 but 4.5 rounds to 4.
The result is that if you are using a format that does rounding (e.g.,
<kbd class="command">&quot;%.0f&quot;</KBD
>) you should check what your system does.
The following function does traditional rounding; it might be useful
if your awk's <kbd class="command">printf</KBD
> does unbiased rounding.</P
><p class="para"><blockquote class="screen"><pre class="screen"># round --- do normal rounding
#	Arnold Robbins, arnold@gnu.ai.mit.edu
#	Public Domain
function round(x,       ival, aval, fraction)
{
        ival = int(x)	# integer part, int() truncates
	# see if fractional part
	if (ival == x)	# no fraction
		return x
	if (x &lt; 0) {
		aval = -x	# absolute value
		ival = int(aval)
		fraction = aval - ival
		if (fraction &gt;= .5)
			return int(x) - 1		# -2.5 --&gt; -3
		else
			return int(x)		# -2.3 --&gt; -2
	} else {
		fraction = x - ival
		if (fraction &gt;= .5)
			return ival + 1
		else
			return ival
	}
}</PRE
></BLOCKQUOTE
></P
></DIV
><a class="indexterm" name="AUTOID-13365"></A
><a class="indexterm" name="AUTOID-13366"></A
><a class="indexterm" name="AUTOID-13367"></A
></DIV
><div class="htmlnav"><p></P
><hr align="LEFT" width="515" title="footer"><table width="515" border="0" cellspacing="0" cellpadding="0"><tr><td align="LEFT" valign="TOP" width="172"><a class="SECT1" href="appb_02.htm" webstripperlinkwas="appb_02.htm" title="B.2 Language Summary for awk"><img src="../gifs/txtpreva.gif" webstripperlinkwas="../gifs/txtpreva.gif" alt="Previous: B.2 Language Summary for awk" border="0"></A
></TD
><td align="CENTER" valign="TOP" width="171"><a class="book" href="index.htm" webstripperlinkwas="http://www.ms.itb.ac.id/buku/unix-bookshelf/sedawk/index.htm" title="sed &amp; awk"><img src="../gifs/txthome.gif" webstripperlinkwas="../gifs/txthome.gif" alt="sed &amp; awk" border="0"></A
></TD
><td align="RIGHT" valign="TOP" width="172"><a class="APPENDIX" href="appc_01.htm" webstripperlinkwas="appc_01.htm" title="C. Supplement for Chapter 12"><img src="../gifs/txtnexta.gif" webstripperlinkwas="../gifs/txtnexta.gif" alt="Next: C. Supplement for Chapter 12" border="0"></A
></TD
></TR
><tr><td align="LEFT" valign="TOP" width="172">B.2 Language Summary for awk</TD
><td align="CENTER" valign="TOP" width="171"><a class="index" href="index/idx_0.htm" webstripperlinkwas="index/idx_0.htm" title="Book Index"><img src="../gifs/index.gif" webstripperlinkwas="../gifs/index.gif" alt="Book Index" border="0"></A
></TD
><td align="RIGHT" valign="TOP" width="172">C. Supplement for Chapter 12</TD
></TR
></TABLE
><hr align="LEFT" width="515" title="footer"><img src="../gifs/smnavbar.gif" webstripperlinkwas="../gifs/smnavbar.gif" usemap="#map" border="0" alt="The UNIX CD Bookshelf Navigation"><map name="map"><area shape="RECT" coords="0,0,73,21" href="../index.html" webstripperlinkwas="http://www.ms.itb.ac.id/buku/unix-bookshelf/index.html" alt="The UNIX CD Bookshelf"><area shape="RECT" coords="74,0,163,21" href="../upt/index.htm" webstripperlinkwas="http://www.ms.itb.ac.id/buku/unix-bookshelf/upt/index.htm" alt="UNIX Power Tools"><area shape="RECT" coords="164,0,257,21" href="../unixnut/index.htm" webstripperlinkwas="http://www.ms.itb.ac.id/buku/unix-bookshelf/unixnut/index.htm" alt="UNIX in a Nutshell"><area shape="RECT" coords="258,0,321,21" href="../vi/index.htm" webstripperlinkwas="http://www.ms.itb.ac.id/buku/unix-bookshelf/vi/index.htm" alt="Learning the vi Editor"><area shape="RECT" coords="322,0,378,21" href="index.htm" webstripperlinkwas="http://www.ms.itb.ac.id/buku/unix-bookshelf/sedawk/index.htm" alt="sed &amp; awk"><area shape="RECT" coords="379,0,438,21" href="../ksh/index.htm" webstripperlinkwas="http://www.ms.itb.ac.id/buku/unix-bookshelf/ksh/index.htm" alt="Learning the Korn Shell"><area shape="RECT" coords="439,0,514,21" href="../lrnunix/index.htm" webstripperlinkwas="http://www.ms.itb.ac.id/buku/unix-bookshelf/lrnunix/index.htm" alt="Learning the UNIX Operating System"></MAP
></DIV
></BODY
></HTML
>
