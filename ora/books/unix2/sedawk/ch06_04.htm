<html><head><title>[Chapter 6] 6.4 Advanced Flow Control Commands</TITLE
><meta name="DC.title" content="sed &amp; awk"><meta name="DC.creator" content="Dale Dougherty &amp; Arnold Robbins"><meta name="DC.publisher" content="O'Reilly &amp; Associates, Inc."><meta name="DC.date" content="1998-08-03T20:55:17Z"><meta name="DC.type" content="Text.Monograph"><meta name="DC.format" content="text/html" scheme="MIME"><meta name="DC.source" content="1-56592-225-5" scheme="ISBN"><meta name="DC.language" content="en-US"><meta name="generator" content="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><link rev="made" href="mailto:online-books@oreilly.com" title="Online Books Comments"><link rel="up" href="ch06_01.htm" webstripperlinkwas="ch06_01.htm" title="6. Advanced sed Commands"><link rel="prev" href="ch06_03.htm" webstripperlinkwas="ch06_03.htm" title="6.3 Hold That Line"><link rel="next" href="ch06_05.htm" webstripperlinkwas="ch06_05.htm" title="6.5 To Join a Phrase"></HEAD
><body bgcolor="#FFFFFF" text="#000000"><div class="htmlnav"><h1><img src="gifs/smbanner.gif" webstripperlinkwas="gifs/smbanner.gif" alt="sed &amp; awk" usemap="#srchmap" border="0"></H1
><map name="srchmap"><area shape="RECT" coords="0,0,466,65" href="index.htm" webstripperlinkwas="http://www.ms.itb.ac.id/buku/unix-bookshelf/sedawk/index.htm" alt="sed &amp; awk"><area shape="RECT" coords="467,0,514,18" href="jobjects/fsearch.htm" webstripperlinkwas="jobjects/fsearch.htm" alt="Search this book"></MAP
><table width="515" border="0" cellspacing="0" cellpadding="0"><tr><td align="LEFT" valign="TOP" width="172"><a class="SECT1" href="ch06_03.htm" webstripperlinkwas="ch06_03.htm" title="6.3 Hold That Line"><img src="../gifs/txtpreva.gif" webstripperlinkwas="../gifs/txtpreva.gif" alt="Previous: 6.3 Hold That Line" border="0"></A
></TD
><td align="CENTER" valign="TOP" width="171"><b><font face="ARIEL,HELVETICA,HELV,SANSERIF" size="-1">Chapter 6<br>Advanced sed Commands</FONT
></B
></TD
><td align="RIGHT" valign="TOP" width="172"><a class="SECT1" href="ch06_05.htm" webstripperlinkwas="ch06_05.htm" title="6.5 To Join a Phrase"><img src="../gifs/txtnexta.gif" webstripperlinkwas="../gifs/txtnexta.gif" alt="Next: 6.5 To Join a Phrase" border="0"></A
></TD
></TR
></TABLE
>&nbsp;<hr align="LEFT" width="515" title="footer"></DIV
><div class="SECT1"><h2 class="sect1"><a class="title" name="SEDAWK-CH-6-SECT-4">6.4 Advanced Flow Control Commands</A
></H2
><p class="para">You have already seen several examples of changes in sed's normal flow
control.  In this section, we'll look at two commands that allow you
to direct which portions of the script get executed and when.  The
branch (<kbd class="command">b</KBD
>) and test (<kbd class="command">t</KBD
>) commands
transfer control in a script to a line containing a specified label.
If no label is specified, control passes to the end of the script.
The branch command transfers control unconditionally while the test
command is a conditional transfer, occurring only if a substitute
command has changed the current line.</P
><p class="para"><a class="indexterm" name="AUTOID-4556"></A
><a class="indexterm" name="AUTOID-4558"></A
><a class="indexterm" name="AUTOID-4560"></A
>A label is any sequence of up to seven characters.[1]  
A label is put on a line by itself that begins with a colon:</P
><blockquote class="footnote"><p class="para">[1] The POSIX standard says that an
implementation can allow longer labels if it wishes to. GNU sed
allows labels to be of any length.  <a class="indexterm" name="AUTOID-4564"></A
></P
></BLOCKQUOTE
><blockquote class="screen"><pre class="screen">:mylabel</PRE
></BLOCKQUOTE
><p class="para">There are no spaces permitted between the colon and the label.  Spaces
at the end of the line will be considered part of the label.  When you
specify the label in a branch or test command, a space is permitted
between the command and the label itself:</P
><blockquote class="screen"><pre class="screen">b mylabel</PRE
></BLOCKQUOTE
><p class="para">Be sure you don't put a space after the label.</P
><div class="sect2"><h3 class="sect2"><a class="title" name="SEDAWK-CH-6-SECT-4.1">6.4.1 Branching</A
></H3
><p class="para"><a class="indexterm" name="AUTOID-4574"></A
><a class="indexterm" name="CH06.BRANCH1"></A
><a class="indexterm" name="CH06.BRANCH2"></A
><a class="indexterm" name="CH06.BRANCH3"></A
>The branch command allows you to transfer control to another line in
the script.</P
><blockquote class="literallayout"><p class="literallayout">[<code class="replaceable"><i>address</I
></CODE
>]<kbd class="command">b</KBD
>[<code class="replaceable"><i>label</I
></CODE
>]</P
></BLOCKQUOTE
><p class="para">The <em class="emphasis">label</EM
> is optional, and if not supplied,
control is transferred to the end of the script.  If a label is
supplied, execution resumes at the line following the label.</P
><p class="para">In <a class="xref" href="ch04_01.htm" webstripperlinkwas="ch04_01.htm" title="Writing sed Scripts">Chapter 4, Writing sed Scripts</A
>, we looked at a typesetting script
that transformed quotation marks and hyphens into their typesetting
counterparts.  If we wanted to avoid making these changes on certain
lines, then we could use the branch command to skip that portion of
the script.  For instance, text inside computer-generated examples
marked by the .ES and .EE macros should not be changed.  Thus, we
could write the previous script like this:</P
><blockquote class="screen"><pre class="screen">/^\.ES/,/^\.EE/b
s/^&quot;/``/
s/&quot;$/''/
s/&quot;?<img src="../chars/squ.gif" webstripperlinkwas="../chars/squ.gif" alt=" ">/''?<img src="../chars/squ.gif" webstripperlinkwas="../chars/squ.gif" alt=" ">/g
.<br>.<br>.<br>s/\\(em\\^&quot;/\\(em``/g
s/&quot;\\(em/''\\(em/g
s/\\(em&quot;/\\(em``/g
s/@DQ@/&quot;/g</PRE
></BLOCKQUOTE
><p class="para">Because no label is supplied, the branch command branches to the end of the
script, skipping all subsequent commands.  </P
><p class="para">The branch command can be used to execute a set of commands as a
procedure, one that can be called repeatedly from the main body of the
script.  As in the case above, it also allows you to avoid executing
the procedure at all based on matching a pattern in the input.</P
><p class="para"><a class="indexterm" name="AUTOID-4596"></A
>You can have a similar effect by using <kbd class="command">!</KBD
> and
grouping a set of commands.  The advantage of the branch command over
<kbd class="command">!</KBD
> for our application is that we can more easily
specify multiple conditions to avoid.  The <kbd class="command">!</KBD
> symbol
can apply to a single command, or it can apply to a set of commands
enclosed in braces that immediately follows.  The branch command, on
the other hand, gives you almost unlimited control over movement
around the script.</P
><p class="para">For example, if we are using multiple macro packages, there may be
other macro pairs besides .ES and .EE that define a range of lines
that we want to avoid altogether.  So, for example, we can write:</P
><blockquote class="screen"><pre class="screen">/^\.ES/,/^\.EE/b
/^\.PS/,/^\.PE/b
/^\.G1/,/^\.G2/b</PRE
></BLOCKQUOTE
><p class="para">To get a good idea of the types of flow control possible in a sed
script, let's look at some simple but abstract examples.  The first
example shows you how to use the branch command to create a loop.
Once an input line is read, command1 and command2 will be applied to
the line; afterwards, if the contents of the pattern space match the
pattern, then control will be passed to the line following the label
&quot;top,&quot; which means command1 then command2 will be executed again.</P
><blockquote class="screen"><pre class="screen">:top
command1
command2
/pattern/b top
command3</PRE
></BLOCKQUOTE
><p class="para">The script executes command3 only if the pattern doesn't match.  All
three commands will be executed, although the first two may be
executed multiple times.</P
><p class="para">In the next example, command1 is executed.  If the pattern is matched,
control passes to the line following the label &quot;end.&quot; This means
command2 is skipped.</P
><blockquote class="screen"><pre class="screen">command1
/pattern/b end
command2
:end
command3</PRE
></BLOCKQUOTE
><p class="para">In all cases, command1 and command3 are executed.</P
><p class="para">Now let's look at
how to specify that either command2 or command3 are executed, but not
both.  In the next script, there are two branch commands.</P
><blockquote class="screen"><pre class="screen">command1
/pattern/b dothree
command2
b
:dothree
command3</PRE
></BLOCKQUOTE
><p class="para">The first branch command transfers control to command3.  If that
pattern is not matched, then command2 is executed.  The branch command
following command2 sends control to the end of the script, bypassing
command3.  The first of the branch commands is conditional upon
matching the pattern; the second is not. We will look at a
&quot;real-world&quot; example after looking at the test command.</P
><a class="indexterm" name="AUTOID-4613"></A
><a class="indexterm" name="AUTOID-4614"></A
></DIV
><div class="sect2"><h3 class="sect2"><a class="title" name="SEDAWK-CH-6-SECT-4.2">6.4.2 The Test Command</A
></H3
><p class="para"><a class="indexterm" name="AUTOID-4618"></A
><a class="indexterm" name="AUTOID-4621"></A
>The test command branches to a label (or the end of the script) if a
successful substitution has been made on the currently addressed line.
Thus, it implies a conditional branch.  Its syntax follows:</P
><blockquote class="literallayout"><p class="literallayout">[<code class="replaceable"><i>address</I
></CODE
>]<kbd class="command">t</KBD
>[<code class="replaceable"><i>label</I
></CODE
>]</P
></BLOCKQUOTE
><p class="para">If no <em class="emphasis">label</EM
> is supplied, control falls
through to the end of the script.  If the label is supplied, then
execution resumes at the line following the label.</P
><p class="para">Let's look at an example from Tim O'Reilly.  He was trying to generate
automatic index entries based on evaluating the arguments in a macro
that produced the top of a command reference page.  If there were
three quoted arguments, he wanted to do something different than if
there were two or only one. The task was to try to match each of
these cases in succession (3,2,1) and when a successful substitution
was made, avoid making any further matches.  Here's Tim's script:</P
><blockquote class="screen"><pre class="screen">/\.Rh 0/{
s/&quot;\(.*\)&quot; &quot;\(.*\)&quot; &quot;\(.*\)&quot;/&quot;\1&quot; &quot;\2&quot; &quot;\3&quot;/
t
s/&quot;\(.*\)&quot; &quot;\(.*\)&quot;/&quot;\1&quot; &quot;\2&quot;/
t
s/&quot;\(.*\)&quot;/&quot;\1&quot;/
}</PRE
></BLOCKQUOTE
><p class="para">The test command allows us to drop to the end of the script once a
substitution has been made.  If there are three arguments on the .Rh
line, the test command after the first substitute command will be
true, and sed will go on to the next input line.  If there are fewer
than three arguments, no substitution will be made, the test command
will be evaluated false, and the next substitute command will be
tried.  This will be repeated until all the possibilities are used up.</P
><p class="para">The test command provides functionality similar to a case statement in
the C programming language or the shell programming languages.  You
can test each case and when a case proves true, then you exit the
construct.</P
><p class="para">If the above script were part of a larger script, we could use a
label, perhaps tellingly named &quot;break,&quot; to drop to the end of the
command grouping where additional commands can be applied.</P
><blockquote class="screen"><pre class="screen">/\.Rh 0/{
s/&quot;\(.*\)&quot; &quot;\(.*\)&quot; &quot;\(.*\)&quot;/&quot;\1&quot; &quot;\2&quot; &quot;\3&quot;/
t break
.<br>.<br>.<br>}
:break
<i class="lineannotation">more commands</I
></PRE
></BLOCKQUOTE
><p class="para">The next section gives a full example of the test command and the use
of labels.</P
><a class="indexterm" name="AUTOID-4637"></A
></DIV
><div class="sect2"><h3 class="sect2"><a class="title" name="SEDAWK-CH-6-SECT-4.3">6.4.3 One More Case</A
></H3
><p class="para">Remember Lenny?  He was the fellow given the task of converting Scribe
documents to <kbd class="command">troff</KBD
>.  We had sent him the following
script:</P
><blockquote class="screen"><pre class="screen"># Scribe font change script. 
s/@f1(\([^)]*\))/\\fB\1\\fR/g
/@f1(.*/{
N
s/@f1(\(.*\n[^)]*\))/\\fB\1\\fR/g
P
D
}</PRE
></BLOCKQUOTE
><p class="para">He sent the following mail after using the script:</P
><blockquote class="screen"><pre class="screen">Thank you so much!  You've not only fixed the script but shown me
where I was confused about the way it works.  I can repair the
conversion script so that it works with what you've done, but to be
optimal it should do two more things that I can't seem to get working
at all&nbsp;- maybe it's hopeless and I should be content with what's
there.  

First, I'd like to reduce multiple blank lines down to one.
Second, I'd like to make sed match the pattern over more than two
(say, even only three) lines.  

Thanks again.  

Lenny</PRE
></BLOCKQUOTE
><p class="para">The first request to reduce a series of blank lines to one has already
been shown in this chapter.  The following four lines perform this
function:</P
><blockquote class="screen"><pre class="screen">/^$/{
N
/^\n$/D
}</PRE
></BLOCKQUOTE
><p class="para">We want to look mainly at accomplishing the second request.  Our
previous font-change script created a two-line pattern space, tried to
make the match across those lines, and then output the first line.
The second line became the first line in the pattern space and control
passed to the top of the script where another line was read in.</P
><p class="para">We can use labels to set up a loop that reads multiple lines and makes
it possible to match a pattern across multiple lines.  The following
script sets up two labels: <kbd class="command">begin</KBD
> at the top of the
script and <kbd class="command">again</KBD
> near the bottom.  Look at the
improved script:</P
><blockquote class="screen"><pre class="screen"># Scribe font change script.  New and Improved.
:begin
/@f1(\([^)]*\))/{
s//\\fB\1\\fR/g
b begin
}
/@f1(.*/{
N
s/@f1(\([^)]*\n[^)]*\))/\\fB\1\\fR/g
t again
b begin
}
:again
P
D</PRE
></BLOCKQUOTE
><p class="para">Let's look more closely at this script, which has three parts.
Beginning with the line that follows <kbd class="command">:begin</KBD
>, the
first part attempts to match the font change syntax if it is found
completely on one line.  After making the substitution, the branch
command transfers control back to the label <kbd class="command">begin</KBD
>.
In other words, once we have made a match, we want to go back to the
top and look for other possible matches, including the instruction
that has already been applied&nbsp;- there could be multiple
occurrences on the line.</P
><p class="para">The second part attempts to match the pattern over multiple lines.
The Next command builds a multiple line pattern space.  The
substitution command attempts to locate the pattern with an embedded
newline.  If it succeeds, the test command passes control to the line
following the <kbd class="command">again</KBD
> label.  If no substitution is
made, control is passed to the line following the label
<kbd class="command">begin</KBD
> so that we can read in another line.  This is
a loop that goes into effect when we've matched the beginning sequence
of a font change request but have not yet found the ending sequence.
Sed will loop back and keep appending lines into the pattern space
until a match has been found.</P
><p class="para">The third part is the procedure following the label
<kbd class="command">again</KBD
>.  The first line in the pattern space is
output and then deleted.  Like the previous version of this script, we
deal with multiple lines in succession.  Control never reaches the
bottom of the script but is redirected by the Delete command to the
top of the script.</P
></DIV
></DIV
><div class="htmlnav"><p></P
><hr align="LEFT" width="515" title="footer"><table width="515" border="0" cellspacing="0" cellpadding="0"><tr><td align="LEFT" valign="TOP" width="172"><a class="SECT1" href="ch06_03.htm" webstripperlinkwas="ch06_03.htm" title="6.3 Hold That Line"><img src="../gifs/txtpreva.gif" webstripperlinkwas="../gifs/txtpreva.gif" alt="Previous: 6.3 Hold That Line" border="0"></A
></TD
><td align="CENTER" valign="TOP" width="171"><a class="book" href="index.htm" webstripperlinkwas="http://www.ms.itb.ac.id/buku/unix-bookshelf/sedawk/index.htm" title="sed &amp; awk"><img src="../gifs/txthome.gif" webstripperlinkwas="../gifs/txthome.gif" alt="sed &amp; awk" border="0"></A
></TD
><td align="RIGHT" valign="TOP" width="172"><a class="SECT1" href="ch06_05.htm" webstripperlinkwas="ch06_05.htm" title="6.5 To Join a Phrase"><img src="../gifs/txtnexta.gif" webstripperlinkwas="../gifs/txtnexta.gif" alt="Next: 6.5 To Join a Phrase" border="0"></A
></TD
></TR
><tr><td align="LEFT" valign="TOP" width="172">6.3 Hold That Line</TD
><td align="CENTER" valign="TOP" width="171"><a class="index" href="index/idx_0.htm" webstripperlinkwas="index/idx_0.htm" title="Book Index"><img src="../gifs/index.gif" webstripperlinkwas="../gifs/index.gif" alt="Book Index" border="0"></A
></TD
><td align="RIGHT" valign="TOP" width="172">6.5 To Join a Phrase</TD
></TR
></TABLE
><hr align="LEFT" width="515" title="footer"><img src="../gifs/smnavbar.gif" webstripperlinkwas="../gifs/smnavbar.gif" usemap="#map" border="0" alt="The UNIX CD Bookshelf Navigation"><map name="map"><area shape="RECT" coords="0,0,73,21" href="../index.html" webstripperlinkwas="http://www.ms.itb.ac.id/buku/unix-bookshelf/index.html" alt="The UNIX CD Bookshelf"><area shape="RECT" coords="74,0,163,21" href="../upt/index.htm" webstripperlinkwas="http://www.ms.itb.ac.id/buku/unix-bookshelf/upt/index.htm" alt="UNIX Power Tools"><area shape="RECT" coords="164,0,257,21" href="../unixnut/index.htm" webstripperlinkwas="http://www.ms.itb.ac.id/buku/unix-bookshelf/unixnut/index.htm" alt="UNIX in a Nutshell"><area shape="RECT" coords="258,0,321,21" href="../vi/index.htm" webstripperlinkwas="http://www.ms.itb.ac.id/buku/unix-bookshelf/vi/index.htm" alt="Learning the vi Editor"><area shape="RECT" coords="322,0,378,21" href="index.htm" webstripperlinkwas="http://www.ms.itb.ac.id/buku/unix-bookshelf/sedawk/index.htm" alt="sed &amp; awk"><area shape="RECT" coords="379,0,438,21" href="../ksh/index.htm" webstripperlinkwas="http://www.ms.itb.ac.id/buku/unix-bookshelf/ksh/index.htm" alt="Learning the Korn Shell"><area shape="RECT" coords="439,0,514,21" href="../lrnunix/index.htm" webstripperlinkwas="http://www.ms.itb.ac.id/buku/unix-bookshelf/lrnunix/index.htm" alt="Learning the UNIX Operating System"></MAP
></DIV
></BODY
></HTML
>
