<html><head><title>[Chapter 11] 11.2 Freely Available awks</TITLE
><meta name="DC.title" content="sed &amp; awk"><meta name="DC.creator" content="Dale Dougherty &amp; Arnold Robbins"><meta name="DC.publisher" content="O'Reilly &amp; Associates, Inc."><meta name="DC.date" content="1998-08-06T21:56:21Z"><meta name="DC.type" content="Text.Monograph"><meta name="DC.format" content="text/html" scheme="MIME"><meta name="DC.source" content="1-56592-225-5" scheme="ISBN"><meta name="DC.language" content="en-US"><meta name="generator" content="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><link rev="made" href="mailto:online-books@oreilly.com" title="Online Books Comments"><link rel="up" href="ch11_01.htm" webstripperlinkwas="ch11_01.htm" title="11. A Flock of awks"><link rel="prev" href="ch11_01.htm" webstripperlinkwas="ch11_01.htm" title="11.1 Original awk"><link rel="next" href="ch11_03.htm" webstripperlinkwas="ch11_03.htm" title="11.3 Commercial awks"></HEAD
><body bgcolor="#FFFFFF" text="#000000"><div class="htmlnav"><h1><img src="gifs/smbanner.gif" webstripperlinkwas="gifs/smbanner.gif" alt="sed &amp; awk" usemap="#srchmap" border="0"></H1
><map name="srchmap"><area shape="RECT" coords="0,0,466,65" href="index.htm" webstripperlinkwas="http://www.ms.itb.ac.id/buku/unix-bookshelf/sedawk/index.htm" alt="sed &amp; awk"><area shape="RECT" coords="467,0,514,18" href="jobjects/fsearch.htm" webstripperlinkwas="jobjects/fsearch.htm" alt="Search this book"></MAP
><table width="515" border="0" cellspacing="0" cellpadding="0"><tr><td align="LEFT" valign="TOP" width="172"><a class="SECT1" href="ch11_01.htm" webstripperlinkwas="ch11_01.htm" title="11.1 Original awk"><img src="../gifs/txtpreva.gif" webstripperlinkwas="../gifs/txtpreva.gif" alt="Previous: 11.1 Original awk" border="0"></A
></TD
><td align="CENTER" valign="TOP" width="171"><b><font face="ARIEL,HELVETICA,HELV,SANSERIF" size="-1">Chapter 11<br>A Flock of awks</FONT
></B
></TD
><td align="RIGHT" valign="TOP" width="172"><a class="SECT1" href="ch11_03.htm" webstripperlinkwas="ch11_03.htm" title="11.3 Commercial awks"><img src="../gifs/txtnexta.gif" webstripperlinkwas="../gifs/txtnexta.gif" alt="Next: 11.3 Commercial awks" border="0"></A
></TD
></TR
></TABLE
>&nbsp;<hr align="LEFT" width="515" title="footer"></DIV
><div class="SECT1"><h2 class="sect1"><a class="title" name="SEDAWK-CH-11-SECT-2">11.2 Freely Available awks</A
></H2
><p class="para">There are three versions of awk whose source code is freely available.
They are the Bell Labs awk, GNU awk, and mawk, by Michael Brennan.
This section discusses the extensions that are common to two or more
of them, and then looks at each version in detail and describes how to
obtain it.</P
><div class="sect2"><h3 class="sect2"><a class="title" name="SEDAWK-CH-11-SECT-2.1">11.2.1 Common Extensions</A
></H3
><p class="para"><a class="indexterm" name="CH11.EXT1"></A
><a class="indexterm" name="CH11.EXT2"></A
>This section discusses extensions to the awk language that are available
in two or more of the freely available awks.[2]</P
><blockquote class="footnote"><p class="para">[2] As the maintainer of gawk and the author of many of the extensions
described here and in the section below on gawk, my opinion about the
usefulness of these extensions may be biased. :-)  You should
make your own evaluation. [A.R.]</P
></BLOCKQUOTE
><div class="sect3"><h4 class="sect3"><a class="title" name="SEDAWK-CH-11-SECT-2.1.1">11.2.1.1 Deleting all elements of an array</A
></H4
><p class="para"><a class="indexterm" name="AUTOID-9319"></A
><a class="indexterm" name="AUTOID-9322"></A
><a class="indexterm" name="AUTOID-9325"></A
>All three free awks extend
the <kbd class="command">delete</KBD
> statement, making it possible to delete
all the elements of an array at one time.
The syntax is:</P
><blockquote class="literallayout"><p class="literallayout"><kbd class="command">delete</KBD
> <code class="replaceable"><i>array</I
></CODE
></P
></BLOCKQUOTE
><p class="para">Normally, to delete every element from an array, you have to use a
loop, like this.</P
><blockquote class="screen"><pre class="screen">for (i in data)
	delete data[i]</PRE
></BLOCKQUOTE
><p class="para">With the extended version of the <kbd class="command">delete</KBD
> statement, you can simply use</P
><blockquote class="screen"><pre class="screen">delete data</PRE
></BLOCKQUOTE
><p class="para">This is particularly useful for arrays with lots of subscripts; this
version is considerably faster than the one using a loop.</P
><p class="para">Even though it no longer has any elements, you cannot use
the array name as a simple variable. Once an array, always an array.</P
><p class="para">This extension appeared first in gawk, then in mawk and the Bell Labs awk.</P
></DIV
><div class="sect3"><h4 class="sect3"><a class="title" name="SEDAWK-CH-11-SECT-2.1.2">11.2.1.2 Obtaining individual characters</A
></H4
><p class="para"><a class="indexterm" name="AUTOID-9342"></A
><a class="indexterm" name="AUTOID-9345"></A
><a class="indexterm" name="AUTOID-9348"></A
><a class="indexterm" name="AUTOID-9351"></A
><a class="indexterm" name="AUTOID-9354"></A
><a class="indexterm" name="AUTOID-9356"></A
>All three awks extend field splitting and array splitting as follows.
If the value of <b class="emphasis.bold">FS</B
> is the empty string, then each character of
the input record becomes a separate field.  This greatly simplifies
cases where it's necessary to work with individual
characters.</P
><p class="para"><a class="indexterm" name="AUTOID-9361"></A
>Similarly, if the third argument to the <b class="emphasis.bold">split()</B
> function is
the empty string, each character in the original string will become a
separate element of the target array.</P
><p class="para"><a class="indexterm" name="AUTOID-9365"></A
>Without these extensions, you have to use repeated calls to the
<b class="emphasis.bold">substr()</B
> function to obtain individual characters.</P
><p class="para">This extension appeared first in mawk, then in gawk and the Bell Labs awk.</P
></DIV
><div class="sect3"><h4 class="sect3"><a class="title" name="SEDAWK-CH-11-SECT-2.1.3">11.2.1.3 Flushing buffered output</A
></H4
><p class="para"><a class="indexterm" name="AUTOID-9372"></A
><a class="indexterm" name="AUTOID-9374"></A
><a class="indexterm" name="AUTOID-9376"></A
><a class="indexterm" name="AUTOID-9378"></A
>The 1993 version of the Bell Labs awk introduced a new function that
is not in the
POSIX standard, <b class="emphasis.bold">fflush()</B
>.  Like <b class="emphasis.bold">close()</B
>, the argument to
<b class="emphasis.bold">fflush()</B
> is the name of an open file or pipe.
Unlike <b class="emphasis.bold">close()</B
>, the <b class="emphasis.bold">fflush()</B
> function only works on
<em class="emphasis">output</EM
> files and pipes.</P
><p class="para">Most programs <em class="emphasis">buffer</EM
> their output, storing data
to be written to a file or pipe in an internal chunk of memory until
there's enough to send on to the destination. Occasionally, it's
useful for the programmer to be able to explicitly
<em class="emphasis">flush</EM
> the buffer, that is, force all buffered
data to actually be delivered. This is the purpose of the
<b class="emphasis.bold">fflush()</B
> function.</P
><p class="para">This function appeared first in the Bell Labs awk, then in gawk and mawk.</P
></DIV
><div class="sect3"><h4 class="sect3"><a class="title" name="SEDAWK-CH-11-SECT-2.1.4">11.2.1.4 Special filenames</A
></H4
><p class="para"><a class="indexterm" name="AUTOID-9395"></A
><a class="indexterm" name="AUTOID-9398"></A
><a class="indexterm" name="AUTOID-9401"></A
><a class="indexterm" name="AUTOID-9403"></A
><a class="indexterm" name="AUTOID-9405"></A
><a class="indexterm" name="AUTOID-9408"></A
>With any version of awk, you can write directly to the special UNIX file,
<i class="filename">/dev/tty</I
>, that is a name for the user's terminal.
This can be used to direct prompts or messages to the user's
attention when the output of the program is directed to a file:</P
><blockquote class="screen"><pre class="screen">printf &quot;Enter your name:&quot; &gt;&quot;/dev/tty&quot;</PRE
></BLOCKQUOTE
><p class="para">This prints &quot;Enter your name:&quot; directly on the terminal, no matter
where the standard output and the standard error are directed.</P
><p class="para">The three free awks support
several special filenames, as listed in <a class="xref" href="#SEDAWK-CH-11-TAB-3" title="Special Filenames">Table 11.4</A
>.</P
><table class="table"><caption class="table"><a class="title" name="SEDAWK-CH-11-TAB-3">Table 11.4: Special Filenames</A
></CAPTION
><thead class="thead"><tr class="row" valign="TOP"><th class="entry" align="LEFT" rowspan="1" colspan="1">Filename</TH
><th class="entry" align="LEFT" rowspan="1" colspan="1">Description</TH
></TR
></THEAD
><tbody class="tbody"><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><em class="emphasis">/dev/stdin</EM
></TD
><td class="entry" rowspan="1" colspan="1">Standard input (not mawk)[3]</TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><em class="emphasis">/dev/stdout</EM
></TD
><td class="entry" rowspan="1" colspan="1">Standard output</TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><em class="emphasis">/dev/stderr</EM
></TD
><td class="entry" rowspan="1" colspan="1">Standard error</TD
></TR
></TBODY
></TABLE
><blockquote class="footnote"><p class="para">[3] The mawk manpage
recommends using <b class="emphasis.bold">&quot;-&quot;</B
>
for the standard input, which is most portable.</P
></BLOCKQUOTE
><p class="para">Note that a special filename, like any filename, 
must be quoted when specified as a string constant.</P
><p class="para">The <i class="filename">/dev/stdin</I
>, <i class="filename">/dev/stdout</I
>, and <i class="filename">/dev/stderr</I
> special
files originated in V8 UNIX.  Gawk was the first to build in special
recognition of these files, followed by mawk and the Bell Labs awk.</P
><div class="sidebar"><h4 class="sidebar"><a class="title" name="AUTOID-9443">A printerr() function</A
></H4
><p class="para">Error messages inform users about problems 
often related to missing or incorrect input.  You can
simply inform the user with a <kbd class="command">print</KBD
> statement.  However,
if the output of the program is redirected to a file, the
user won't see it.  Therefore, it is good practice
to specify explicitly that the error message be sent to 
the terminal.  <a class="indexterm" name="AUTOID-9447"></A
></P
><p class="para"><a class="indexterm" name="AUTOID-9450"></A
>The following <b class="emphasis.bold">printerr()</B
> function helps to create
consistent user error messages.  It prints the word &quot;ERROR&quot;
followed by a supplied message, the record number, and the
current record. 
The following example directs output to <i class="filename">/dev/tty</I
>:</P
><blockquote class="screen"><pre class="screen">function printerr (message) {
	# print message, record number and record
	printf(&quot;ERROR:%s (%d) %s\n&quot;, message, NR, $0) &gt; &quot;/dev/tty&quot;
}</PRE
></BLOCKQUOTE
><p class="para">If the output of the program is sent to the terminal screen, then
error messages will be mixed in with the output.  Outputting
&quot;ERROR&quot; will help the user recognize error messages.</P
><p class="para">In UNIX, the standard destination for error messages is standard
error.  The rationale for writing to standard error is the same as
above.  To write to standard error explicitly, you must use the 
convoluted syntax &quot;cat 1&gt;&amp;2&quot; as in the following example:</P
><blockquote class="screen"><pre class="screen">print &quot;ERROR&quot; | &quot;cat 1&gt;&amp;2&quot;</PRE
></BLOCKQUOTE
><p class="para">This directs the output of the <kbd class="command">print</KBD
> statement to a pipe
which executes the <kbd class="command">cat</KBD
> command.
You can also use the <b class="emphasis.bold">system()</B
> function to execute a UNIX
command such as <kbd class="command">cat</KBD
> or <kbd class="command">echo</KBD
> and direct its output to
standard error.</P
><p class="para">When the special file <i class="filename">/dev/stderr</I
> is available,
this gets much simpler:</P
><blockquote class="screen"><pre class="screen">print &quot;ERROR&quot; &gt; &quot;/dev/stderr&quot;  # recent awks only</PRE
></BLOCKQUOTE
></DIV
></DIV
><div class="sect3"><h4 class="sect3"><a class="title" name="SEDAWK-CH-11-SECT-2.1.5">11.2.1.5 The nextfile statement</A
></H4
><p class="para"><a class="indexterm" name="AUTOID-9470"></A
><a class="indexterm" name="AUTOID-9472"></A
>The <b class="emphasis.bold">nextfile</B
> statement is similar to <kbd class="command">next</KBD
>, but it
operates at a higher level. When <b class="emphasis.bold">nextfile</B
> is executed, the current
data file is abandoned, and processing starts over at the top of the
script, using the first record of the following file.
This is useful when you know that
you only need to process part of a file;
there's no need to then set up a loop to skip records using <kbd class="command">next</KBD
>.</P
><p class="para">The <b class="emphasis.bold">nextfile</B
> statement originated in gawk, and then was added
to the Bell Labs awk.
It will be available in mawk, starting with
version 1.4.</P
></DIV
><div class="sect3"><h4 class="sect3"><a class="title" name="SEDAWK-CH-11-SECT-2.1.6">11.2.1.6 Regular expression record separators (gawk and mawk)</A
></H4
><p class="para"><a class="indexterm" name="AUTOID-9484"></A
><a class="indexterm" name="AUTOID-9487"></A
><a class="indexterm" name="AUTOID-9490"></A
>Gawk and mawk allow <b class="emphasis.bold">RS</B
> to be a full regular expression,
not just a single character.
In that case, the records are separated by the longest
text in the input that matches the regular expression. Gawk also
sets <b class="emphasis.bold">RT</B
> (the record terminator) to the actual input
text that matched <b class="emphasis.bold">RS</B
>.  An example of this is given below.</P
><p class="para">The ability to have <b class="emphasis.bold">RS</B
> be a regular expression first appeared
in mawk, and was later added to gawk.</P
></DIV
><a class="indexterm" name="AUTOID-9498"></A
><a class="indexterm" name="AUTOID-9499"></A
></DIV
><div class="sect2"><h3 class="sect2"><a class="title" name="SEDAWK-CH-11-SECT-2.2">11.2.2 Bell Labs awk</A
></H3
><p class="para"><a class="indexterm" name="CH11.VERS1"></A
><a class="indexterm" name="CH11.VERS2"></A
><a class="indexterm" name="AUTOID-9508"></A
>The Bell Labs awk is, of course, the direct descendant of the original
V7 awk, and of the &quot;new&quot; awk that first became avaliable
with System V Release 3.1.
Source code
is freely available
via anonymous FTP to the host <em class="emphasis">netlib.bell-labs.com</EM
>. It is in the
file <i class="filename">/netlib/research/awk.bundle.Z</I
>.  This is a compressed shell
archive file.
Be sure to use &quot;binary,&quot; or &quot;image&quot; mode to transfer the file.
This version of awk requires an ANSI C compiler.</P
><p class="para">There have been several distinct versions; we will identify them here
according to the year they became available.</P
><p class="para">The first version of new awk became available in late 1987. It had
almost everything we've described in the previous four chapters
(although there are footnotes that
indicate those things that are not available).
This version is still in use on SunOS 4.1.x systems and some System V
Release 3 UNIX systems.</P
><p class="para">In 1989, for System V Release 4, several new things were added.
The only difference between this version and POSIX awk is that
POSIX uses <b class="emphasis.bold">CONVFMT</B
> for number-to-string conversions, while the
1989 version still used <b class="emphasis.bold">OFMT</B
>.
The new features were:</P
><ul class="itemizedlist"><li class="listitem"><p class="para">Escape characters in command-line assignments were now interpreted.</P
></LI
><li class="listitem"><p class="para">The <b class="emphasis.bold">tolower()</B
> and <b class="emphasis.bold">toupper()</B
> functions were added.</P
></LI
><li class="listitem"><p class="para"><kbd class="command">printf</KBD
> was improved: dynamic width and precision were added,
and the behavior for &quot;%c&quot; was rationalized.</P
></LI
><li class="listitem"><p class="para">The return value from the <b class="emphasis.bold">srand()</B
> function was defined to be
the previous seed. (The awk book didn't state what <b class="emphasis.bold">srand()</B
>
returned.)</P
></LI
><li class="listitem"><p class="para">It became possible to use regular expressions as simple expressions.
For example:</P
><blockquote class="screen"><pre class="screen">if (/cute/ || /sweet/)
	print &quot;potential here!&quot;</PRE
></BLOCKQUOTE
></LI
><li class="listitem"><p class="para">The <i class="option">-v</I
> option was added to allow setting variables on the
command line before execution of the <kbd class="command">BEGIN</KBD
> procedure.</P
></LI
><li class="listitem"><p class="para">Multiple <em class="emphasis">-f</EM
> options could now be used to have multiple source
files. (This originated in MKS awk, was adopted by gawk, and then
added to the Bell Labs awk.)</P
></LI
><li class="listitem"><p class="para">The <b class="emphasis.bold">ENVIRON</B
> array was added.
(This was developed independently for both MKS awk and gawk, and then
added to the Bell Labs awk.)</P
></LI
></UL
><p class="para">In 1993, Brian Kernighan of Bell Labs was able to release the source
code to his awk.
At this point, <b class="emphasis.bold">CONVFMT</B
> became available, and the <b class="emphasis.bold">fflush()</B
>
function, described above, was added.
A bug-fix release was made in August of 1994.</P
><p class="para">In June of 1996, Brian Kernighan made another release.
It can be retrieved either from the FTP site given above,
or via a World Wide Web browser
from Dr. Kernighan's Web page (<a class="systemitem.sitename" href="../../../../../../../cm.bell-labs.com/who/bwk">http://cm.bell-labs.com/who/bwk</A
>),
which refers to this version as &quot;the one true awk.&quot; :-)
This version adds several features that originated in gawk and mawk,
described earlier in this chapter in the &quot;Common Extensions&quot; section.</P
></DIV
><div class="sect2"><h3 class="sect2"><a class="title" name="SEDAWK-CH-11-SECT-2.3">11.2.3 GNU awk (gawk)</A
></H3
><p class="para"><a class="indexterm" name="CH11.GAWK"></A
><a class="indexterm" name="CH11.GAWK2"></A
>The Free Software Foundation GNU project's version of awk, gawk,
implements all the features of the POSIX awk, and many more. 
It is perhaps
the most popular of the freely available implementations; gawk is
used on Linux systems, as well as various other
freely available UNIX-like systems, such as NetBSD and FreeBSD.</P
><p class="para"><a class="indexterm" name="AUTOID-9558"></A
>Source code for gawk is available
via anonymous FTP[4]
to the host <a class="systemitem.sitename" href="ftp.gnu.ai.mit.edu" webstripperlinkwas="http://www.ms.itb.ac.id/buku/unix-bookshelf/sedawk/ftp.gnu.ai.mit.edu">ftp.gnu.ai.mit.edu</A
>.
It is in the file <i class="filename">/pub/gnu/gawk-3.0.3.tar.gz</I
>
(there may be a later version there by the time you read this).
This is a tar
file compressed with the <kbd class="command">gzip</KBD
> program, whose source code is
available in the same directory.
There are many sites worldwide that &quot;mirror&quot; the files from the main
GNU distribution site; if you know of one close to you, you should get
the files from there.
Be sure to use &quot;binary&quot; or &quot;image&quot; mode to transfer the file(s).</P
><blockquote class="footnote"><p class="para">[4] If you don't have Internet access and wish to get a copy
of gawk, contact the Free Software 
Foundation, Inc.,
59 Temple Place, Suite 330,
Boston, MA 02111-1307 U.S.A.
The telephone number is 617-542-5942, and the fax number is
617-542-2652.</P
></BLOCKQUOTE
><p class="para">Besides the common extensions listed earlier, gawk has a number
of additional features. We examine them in this section.</P
><div class="sect3"><h4 class="sect3"><a class="title" name="SEDAWK-CH-11-SECT-2.3.1">11.2.3.1 Command line options</A
></H4
><p class="para"><a class="indexterm" name="AUTOID-9570"></A
>Gawk has several very useful command-line options.  Like most GNU programs,
these options are spelled out and begin with two dashes, &quot;--&quot;.</P
><ul class="itemizedlist"><li class="listitem"><p class="para"><i class="option">--lint</I
> and <i class="option">--lint-old</I
> cause gawk to check your program,
both at parse-time and at run-time, for constructs that are dubious or
nonportable to other versions of awk.  The <i class="option">--lint-old</I
> option
warns about function calls that are not portable to the original version
of awk. It is separate from <i class="option">--lint</I
>, since most systems now have
some version of new awk.<a class="indexterm" name="AUTOID-9579"></A
></P
></LI
><li class="listitem"><p class="para"><i class="option">--traditional</I
> disables GNU-specific extensions, such as the
time functions and <b class="emphasis.bold">gensub()</B
> (see below).  With this option,
gawk is intended
to behave the same as the Bell Labs awk.<a class="indexterm" name="AUTOID-9585"></A
></P
></LI
><li class="listitem"><p class="para"><i class="option">--re-interval</I
> enables full POSIX regular expression matching,
by allowing gawk to recognize interval expressions (such as &quot;/stuff{1,3}/&quot;).<a class="indexterm" name="AUTOID-9590"></A
></P
></LI
><li class="listitem"><p class="para"><i class="option">--posix</I
> disables <em class="emphasis">all</EM
> extensions that
are not specified in the POSIX standard.
This option also turns on recognition of interval expressions.<a class="indexterm" name="AUTOID-9596"></A
></P
></LI
></UL
><p class="para">There are a number of other options that are less important for everyday
programming and script portability; see the gawk documentation for details.</P
><p class="para"><a class="indexterm" name="AUTOID-9600"></A
><a class="indexterm" name="AUTOID-9602"></A
>Although POSIX awk allows you to have multiple instances of the 
<i class="option">-f</I
>
option, there is no easy way to use library functions from a command-line program.  
The <i class="option">--source</I
> option in gawk makes this possible.</P
><blockquote class="screen"><pre class="screen">gawk --source '<code class="replaceable"><i>script</I
></CODE
>' -f mylibs.awk file1 file2</PRE
></BLOCKQUOTE
><p class="para">This example runs the program in <em class="emphasis">script</EM
>, which can use awk
functions from the file <i class="filename">mylibs.awk</I
>.  The input data comes
from <i class="filename">file1</I
> and <i class="filename">file2</I
>.</P
></DIV
><div class="sect3"><h4 class="sect3"><a class="title" name="SEDAWK-CH-11-SECT-2.3.2">11.2.3.2 An awk program search path</A
></H4
><p class="para"><a class="indexterm" name="AUTOID-9616"></A
><a class="indexterm" name="AUTOID-9618"></A
><a class="indexterm" name="AUTOID-9621"></A
>Gawk allows you to specify an environment variable named <b class="emphasis.bold">AWKPATH</B
>
that defines a search path for awk program files.  By default, it is
defined to be <b class="emphasis.bold">.:/usr/local/share/awk</B
>. 
Thus, when a filename is specified with the <i class="option">-f</I
> option, 
the two default directories will be searched, beginning with the 
current directory.  Note that if the filename 
contains a &quot;/&quot;, then no search is performed.</P
><p class="para">For example, if <i class="filename">mylibs.awk</I
> was a file of awk functions in
<i class="filename">/usr/local/share/awk</I
>, and 
<i class="filename">myprog.awk</I
> was a program in
the current directory, we run gawk like this:</P
><blockquote class="screen"><pre class="screen">gawk -f myprog.awk -f mylibs.awk datafile1</PRE
></BLOCKQUOTE
><p class="para">Gawk would find each file in the appropriate place. This makes it much
easier to have and use awk library functions.</P
></DIV
><div class="sect3"><h4 class="sect3"><a class="title" name="SEDAWK-CH-11-SECT-2.3.3">11.2.3.3 Line continuation</A
></H4
><p class="para"><a class="indexterm" name="AUTOID-9635"></A
><a class="indexterm" name="AUTOID-9637"></A
><a class="indexterm" name="AUTOID-9639"></A
><a class="indexterm" name="AUTOID-9641"></A
>Gawk allows you to break lines after either a &quot;?&quot; or &quot;:&quot;.
You can also continue strings across newlines using a backslash.</P
><blockquote class="screen"><pre class="screen">$ <code class="userinput"><b>gawk 'BEGIN { print &quot;hello, \</B
></CODE
>
&gt; <code class="userinput"><b>world&quot; }'</B
></CODE
>
hello, world</PRE
></BLOCKQUOTE
></DIV
><div class="sect3"><h4 class="sect3"><a class="title" name="SEDAWK-CH-11-SECT-2.3.4">11.2.3.4 Extended regular expressions</A
></H4
><p class="para"><a class="indexterm" name="AUTOID-9650"></A
>Gawk provides several additional regular expression operators. These
are common to most GNU programs that work with regular expressions.
The extended operators are listed in <a class="xref" href="#SEDAWK-CH-11-TAB-4" title="Gawk Extended Regular Expressions">Table 11.5</A
>.</P
><table class="table"><caption class="table"><a class="title" name="SEDAWK-CH-11-TAB-4">Table 11.5: Gawk Extended Regular Expressions</A
></CAPTION
><thead class="thead"><tr class="row" valign="TOP"><th class="entry" align="LEFT" rowspan="1" colspan="1"><p class="para">Special Operators</P
></TH
><th class="entry" align="LEFT" rowspan="1" colspan="1"><p class="para">Usage</P
></TH
></TR
></THEAD
><tbody class="tbody"><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><p class="para">\w</P
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">Matches any <em class="emphasis">word-constituent</EM
>
character (a letter, digit, or underscore).<a class="indexterm" name="AUTOID-9674"></A
></P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><p class="para">\W</P
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">Matches any character that is not word-constituent.<a class="indexterm" name="AUTOID-9681"></A
></P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><p class="para">\&lt;</P
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">Matches the empty string at the beginning of a word.<a class="indexterm" name="AUTOID-9688"></A
><a class="indexterm" name="AUTOID-9691"></A
><a class="indexterm" name="AUTOID-9694"></A
><a class="indexterm" name="AUTOID-9697"></A
></P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><p class="para">\&gt;</P
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">Matches the empty string at the end of a word.</P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><p class="para">\y</P
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">Matches the empty string at either the beginning or end of a word (the word boundar<b class="emphasis.bold">y</B
>). Other GNU software uses &quot;\b&quot;, but that was already taken.<a class="indexterm" name="AUTOID-9711"></A
></P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><p class="para">\B</P
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">Matches the empty string within a word.<a class="indexterm" name="AUTOID-9718"></A
></P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><p class="para">\`</P
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">Matches the empty string at the beginning of a buffer. This is the same as a string in awk, and thus is the same as <b class="emphasis.bold">^</B
>. It is provided for compatibility with GNU Emacs and other GNU software.<a class="indexterm" name="AUTOID-9726"></A
><a class="indexterm" name="AUTOID-9729"></A
></P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><p class="para">\'</P
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">Matches the empty string at the end of a buffer. This is the same as a string in awk, and thus is the same as <b class="emphasis.bold">$</B
>. It is provided for compatibility with GNU Emacs and other GNU software.</P
></TD
></TR
></TBODY
></TABLE
><p class="para">You can think of &quot;\w&quot; as a shorthand for the (POSIX) notation
<b class="emphasis.bold">[[:alnum:]_]</B
> and &quot;\W&quot; as a shorthand for <b class="emphasis.bold">[^[:alnum:]_]</B
>.
The following table gives examples of what the middle four operators match,
borrowed from <cite class="citetitle">Effective AWK Programming</CITE
>.</P
><table class="table"><caption class="table"><a class="title" name="SEDAWK-CH-11-TAB-5">Table 11.6: Examples of gawk Extended Regular Expression Operators</A
></CAPTION
><thead class="thead"><tr class="row" valign="TOP"><th class="entry" align="LEFT" rowspan="1" colspan="1">Expression</TH
><th class="entry" align="LEFT" rowspan="1" colspan="1">Matches</TH
><th class="entry" align="LEFT" rowspan="1" colspan="1">Does Not Match</TH
></TR
></THEAD
><tbody class="tbody"><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><b class="emphasis.bold">\&lt;away</B
></TD
><td class="entry" rowspan="1" colspan="1">away</TD
><td class="entry" rowspan="1" colspan="1">stowaway</TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><b class="emphasis.bold">stow\&gt;</B
></TD
><td class="entry" rowspan="1" colspan="1">stow</TD
><td class="entry" rowspan="1" colspan="1">stowaway</TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><b class="emphasis.bold">\yballs?\y</B
></TD
><td class="entry" rowspan="1" colspan="1">ball or balls</TD
><td class="entry" rowspan="1" colspan="1">ballroom or baseball</TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><b class="emphasis.bold">\Brat\B</B
></TD
><td class="entry" rowspan="1" colspan="1">crate</TD
><td class="entry" rowspan="1" colspan="1">dirty rat</TD
></TR
></TBODY
></TABLE
></DIV
><div class="sect3"><h4 class="sect3"><a class="title" name="SEDAWK-CH-11-SECT-2.3.5">11.2.3.5 Regular expression record terminators</A
></H4
><p class="para"><a class="indexterm" name="AUTOID-9775"></A
><a class="indexterm" name="AUTOID-9777"></A
><a class="indexterm" name="AUTOID-9780"></A
>Besides allowing <b class="emphasis.bold">RS</B
> to be a regular expression, gawk sets the
variable <b class="emphasis.bold">RT</B
> (record terminator) to the actual input text that matched
the value of <b class="emphasis.bold">RS</B
>.</P
><p class="para">Here is a simple example, due to Michael Brennan, that shows the power
of gawk's <b class="emphasis.bold">RS</B
> and <b class="emphasis.bold">RT</B
> variables.
As we have seen, one of the most common uses of sed is its substitute
command (<kbd class="command">s/old/new/g</KBD
>).
By setting <b class="emphasis.bold">RS</B
> to the pattern to match, and <b class="emphasis.bold">ORS</B
> to the
replacement text, a simple <kbd class="command">print</KBD
> statement can print the unchanged
text followed by the replacement text.</P
><blockquote class="screen"><pre class="screen">$ <code class="userinput"><b>cat simplesed.awk</B
></CODE
>
# simplesed.awk --- do s/old/new/g using just print
#    Thanks to Michael Brennan for the idea
#
# NOTE! RS and ORS must be set on the command line
{
    if (RT == &quot;&quot;)
        printf &quot;%s&quot;, $0
    else
        print
}</PRE
></BLOCKQUOTE
><p class="para">There is one wrinkle; at end of file, <b class="emphasis.bold">RT</B
>
will be empty, so we use a <kbd class="command">printf</KBD
> statement
to print the record.[5]
We could run the program like this.</P
><blockquote class="footnote"><p class="para">[5] See <cite class="citetitle">Effective AWK
Programming</CITE
> [Robbins], Section 16.2.8, for an
elaborate version of this program.</P
></BLOCKQUOTE
><blockquote class="screen"><pre class="screen">$ <code class="userinput"><b>cat simplesed.data</B
></CODE
>
&quot;This OLD house&quot; is a great show.
I like shopping for old things at garage sales.
$ <code class="userinput"><b>gawk -f simplesed.awk RS=&quot;old|OLD&quot; ORS=&quot;brand new&quot; simplesed.data</B
></CODE
>
&quot;This brand new house&quot; is a great show.
I like shopping for brand new things at garage sales.</PRE
></BLOCKQUOTE
></DIV
><div class="sect3"><h4 class="sect3"><a class="title" name="SEDAWK-CH-11-SECT-2.3.6">11.2.3.6 Separating fields</A
></H4
><p class="para"><a class="indexterm" name="AUTOID-9806"></A
>Besides the regular way that awk lets you split the input into records and
the record into fields, gawk gives you some additional capabilities.</P
><p class="para">First, as mentioned above,
if the value of <b class="emphasis.bold">FS</B
> is the empty string, then each character of
the input record becomes a separate field.</P
><p class="para"><a class="indexterm" name="AUTOID-9812"></A
>Second, the special variable <b class="emphasis.bold">FIELDWIDTHS</B
> can be used to split out
data that occurs in fixed-width columns.  Such data may or may not have
whitespace separating the values of the fields.</P
><blockquote class="screen"><pre class="screen">FIELDWIDTHS = &quot;5 6 8 3&quot;</PRE
></BLOCKQUOTE
><p class="para">Here, the record has four fields: $1 is five characters wide, $2 is six
characters wide, and so on.
Assigning a value to <b class="emphasis.bold">FIELDWIDTHS</B
> causes gawk to start using it for
field splitting. Assigning a value to <b class="emphasis.bold">FS</B
> causes gawk to return to
the regular field splitting mechanism.
Use <b class="emphasis.bold">FS = FS</B
> to make this happen without
having to save the value of <b class="emphasis.bold">FS</B
> in an extra variable.</P
><p class="para">This facility would be of most use when working with fixed-width
field data, where there may not be any whitespace separating fields,
or when intermediate fields may be all blank.</P
></DIV
><div class="sect3"><h4 class="sect3"><a class="title" name="SEDAWK-CH-11-SECT-2.3.7">11.2.3.7 Additional special files</A
></H4
><p class="para"><a class="indexterm" name="AUTOID-9825"></A
><a class="indexterm" name="AUTOID-9828"></A
><a class="indexterm" name="AUTOID-9831"></A
><a class="indexterm" name="AUTOID-9833"></A
>Gawk has a number of additional special filenames that it
interprets internally.
All of the special filenames are listed in <a class="xref" href="#SEDAWK-CH-11-TAB-6" title="Gawk's Special Filenames">Table 11.7</A
>.</P
><table class="table"><caption class="table"><a class="title" name="SEDAWK-CH-11-TAB-6">Table 11.7: Gawk's Special Filenames</A
></CAPTION
><thead class="thead"><tr class="row" valign="TOP"><th class="entry" align="LEFT" rowspan="1" colspan="1">Filename</TH
><th class="entry" align="LEFT" rowspan="1" colspan="1">Description</TH
></TR
></THEAD
><tbody class="tbody"><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><i class="filename">/dev/stdin</I
></TD
><td class="entry" rowspan="1" colspan="1">Standard input.</TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><i class="filename">/dev/stdout</I
></TD
><td class="entry" rowspan="1" colspan="1">Standard output.</TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><i class="filename">/dev/stderr</I
></TD
><td class="entry" rowspan="1" colspan="1">Standard error.</TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><i class="filename">/dev/fd/<code class="replaceable"><i>n</I
></CODE
></I
></TD
><td class="entry" rowspan="1" colspan="1">The file referenced as file descriptor <em class="emphasis">n</EM
>.</TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><b class="emphasis.bold">Obsolete Filename</B
></TD
><td class="entry" rowspan="1" colspan="1"><b class="emphasis.bold">Description</B
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><i class="filename">/dev/pid</I
></TD
><td class="entry" rowspan="1" colspan="1">Returns a record containing the process ID number.</TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><i class="filename">/dev/ppid</I
></TD
><td class="entry" rowspan="1" colspan="1">Returns a record containing the parent process ID number.</TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><i class="filename">/dev/pgrpid</I
></TD
><td class="entry" rowspan="1" colspan="1">Returns a record containing the process group ID number.</TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><i class="filename">/dev/user</I
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">Returns a record with the real and effective user IDs, the real and effective group IDs, and if available, any secondary group IDs.</P
></TD
></TR
></TBODY
></TABLE
><p class="para">The first three were described earlier.
The fourth filename provides access to any open file descriptor
that may have been inherited from gawk's parent process (usually the shell).
You can use file descriptor 0 for standard input,
1 for standard output, and 2 for standard error.</P
><p class="para"><a class="indexterm" name="AUTOID-9887"></A
>The second group of special files, labeled &quot;obsolete,&quot; have been in
gawk for a while, but are being phased out. They will be replaced by
a <b class="emphasis.bold">PROCINFO</B
> array, whose subscipts are the desired item and whose
element value is the associated value.</P
><p class="para">For example, you would use
<b class="emphasis.bold">PROCINFO[&quot;pid&quot;]</B
> to get the current process ID, instead of using
<b class="emphasis.bold">getline pid &lt; &quot;/dev/pid&quot;</B
>.
Check the gawk documentation to see if <b class="emphasis.bold">PROCINFO</B
> is available
and if these filenames are still supported.</P
></DIV
><div class="sect3"><h4 class="sect3"><a class="title" name="SEDAWK-CH-11-SECT-2.3.8">11.2.3.8 Additional variables</A
></H4
><p class="para"><a class="indexterm" name="AUTOID-9897"></A
><a class="indexterm" name="AUTOID-9901"></A
><a class="indexterm" name="AUTOID-9904"></A
>Gawk has several more system variables. They are listed
in <a class="xref" href="#SEDAWK-CH-11-TAB-7" title="Additional gawk System Variables">Table 11.8</A
>.</P
><table class="table"><caption class="table"><a class="title" name="SEDAWK-CH-11-TAB-7">Table 11.8: Additional gawk System Variables</A
></CAPTION
><thead class="thead"><tr class="row" valign="TOP"><th class="entry" align="LEFT" rowspan="1" colspan="1">Variable</TH
><th class="entry" align="LEFT" rowspan="1" colspan="1">Description</TH
></TR
></THEAD
><tbody class="tbody"><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><b class="emphasis.bold">ARGIND</B
></TD
><td class="entry" rowspan="1" colspan="1">The index in <b class="emphasis.bold">ARGV</B
> of the current input file.</TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><b class="emphasis.bold">ERRNO</B
></TD
><td class="entry" rowspan="1" colspan="1">A message describing the error if <kbd class="command">getline</KBD
> or <kbd class="command">close()</KBD
> fail.</TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><b class="emphasis.bold">FIELDWIDTHS</B
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">A space-separated list of numbers describing the widths of the input fields.</P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><b class="emphasis.bold">IGNORECASE</B
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">If non-zero, pattern matches and string comparisons are case-independent.</P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><b class="emphasis.bold">RT</B
></TD
><td class="entry" rowspan="1" colspan="1">The value of the input text that matched <b class="emphasis.bold">RS</B
>.</TD
></TR
></TBODY
></TABLE
><p class="para">We have already seen the record terminator variable, <b class="emphasis.bold">RT</B
>, so
we'll proceed to the other variables that we haven't covered yet.</P
><p class="para"><a class="indexterm" name="AUTOID-9946"></A
><a class="indexterm" name="AUTOID-9948"></A
>All pattern matching and string comparison in awk is case sensitive.
Gawk introduced the <b class="emphasis.bold">IGNORECASE</B
> variable so that you
can specify that regular expressions
be interpreted without regard for upper- or lowercase
characters.  
Beginning with version 3.0 of gawk, string comparisons can also be
done without case sensitivity.</P
><p class="para">The default value of <b class="emphasis.bold">IGNORECASE</B
> is
zero, which means that pattern matching and string comparison are
performed the same as in traditional awk.  If <b class="emphasis.bold">IGNORECASE</B
> is set to a non-zero value, then case
distinctions are ignored.  This applies to all places where regular
expressions are used, including the field separator <b class="emphasis.bold">FS</B
>, the record separator <b class="emphasis.bold">RS</B
>, and all string comparisons.  It does
<em class="emphasis">not</EM
> apply to array subscripting.</P
><p class="para"><a class="indexterm" name="AUTOID-9959"></A
><a class="indexterm" name="AUTOID-9961"></A
>Two more gawk variables are of interest.
<b class="emphasis.bold">ARGIND</B
> is set automatically by gawk to be the index in <b class="emphasis.bold">ARGV</B
>
of the current input file name.  This variable gives you a way to track
how far along you are in the list of filenames.</P
><p class="para"><a class="indexterm" name="AUTOID-9967"></A
>Finally, if an error occurs doing a redirection for <b class="emphasis.bold">getline</B
> or during a
<b class="emphasis.bold">close()</B
>, gawk sets
<b class="emphasis.bold">ERRNO</B
> to a string describing the error.
This makes it possible to provide descriptive error messages when
something goes wrong.</P
></DIV
><div class="sect3"><h4 class="sect3"><a class="title" name="SEDAWK-CH-11-SECT-2.3.9">11.2.3.9 Additional functions</A
></H4
><p class="para"><a class="indexterm" name="AUTOID-9975"></A
><a class="indexterm" name="AUTOID-9978"></A
><a class="indexterm" name="AUTOID-9981"></A
>Gawk has one additional string function, and two functions for
dealing with the current date and time.
They are listed in <a class="xref" href="#SEDAWK-CH-11-TAB-8" title="Additional gawk Functions">Table 11.9</A
>.</P
><table class="table"><caption class="table"><a class="title" name="SEDAWK-CH-11-TAB-8">Table 11.9: Additional gawk Functions</A
></CAPTION
><thead class="thead"><tr class="row" valign="TOP"><th class="entry" align="LEFT" rowspan="1" colspan="1">Gawk Function</TH
><th class="entry" align="LEFT" rowspan="1" colspan="1">Description</TH
></TR
></THEAD
><tbody class="tbody"><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><p class="para"><b class="emphasis.bold">gensub</B
>(<em class="emphasis">r</EM
>, <em class="emphasis">s</EM
>, <em class="emphasis">h</EM
>, <em class="emphasis">t</EM
>)</P
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">If <em class="emphasis">h</EM
> is a string starting with <b class="emphasis.bold">g</B
> or <b class="emphasis.bold">G</B
>, globally substitutes <em class="emphasis">s</EM
> for <em class="emphasis">r</EM
> in <em class="emphasis">t</EM
>. Otherwise, <em class="emphasis">h</EM
> is a number: substitutes for the <em class="emphasis">h</EM
>'th occurrence. Returns the new value, <em class="emphasis">t</EM
> is unchanged. If <em class="emphasis">t</EM
> is not supplied, defaults to <b class="emphasis.bold">$0</B
>.</P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><p class="para"><b class="emphasis.bold">systime</B
>()</P
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">Returns the current time of day in seconds since the Epoch (00:00 a.m., January 1, 1970 UTC).</P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><p class="para"><b class="emphasis.bold">strftime</B
>(<em class="emphasis">format</EM
>, <em class="emphasis">timestamp</EM
>)</P
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">Formats <em class="emphasis">timestamp</EM
> (of the same form returned by <kbd class="command">systime()</KBD
>) according to <em class="emphasis">format</EM
>. If no <em class="emphasis">timestamp</EM
>, use current time. If no <em class="emphasis">format</EM
> either, use a default format whose output is similar to the <kbd class="command">date</KBD
> command.</P
></TD
></TR
></TBODY
></TABLE
></DIV
><div class="sect3"><h4 class="sect3"><a class="title" name="SEDAWK-CH-11-SECT-2.3.9.2">11.2.3.10 A general substitution function</A
></H4
><p class="para"><a class="indexterm" name="AUTOID-10039"></A
><a class="indexterm" name="AUTOID-10041"></A
><a class="indexterm" name="AUTOID-10043"></A
><a class="indexterm" name="AUTOID-10045"></A
><a class="indexterm" name="AUTOID-10047"></A
>The 3.0 version of gawk introduced a new general substitution function,
named <b class="emphasis.bold">gensub()</B
>.
The <b class="emphasis.bold">sub()</B
> and <b class="emphasis.bold">gsub()</B
> functions have some problems.

<ul class="itemizedlist"><li class="listitem"><p class="para">You can change either the first occurrence of a pattern or all the
occurrences of a pattern.  There is no way to change, say, only the
third occurrence of a pattern but not the ones before it or after it.</P
></LI
><li class="listitem"><p class="para">Both <b class="emphasis.bold">sub()</B
> and <b class="emphasis.bold">gsub()</B
> change the actual target string, which
may be undesirable.</P
></LI
><li class="listitem"><p class="para">It is impossible to get <b class="emphasis.bold">sub()</B
> and <b class="emphasis.bold">gsub()</B
>
to emit a literal backslash followed by the matched text,
because an ampersand preceded by a backslash is never replaced.[6]</P
><blockquote class="footnote"><p class="para">[6] A full discussion is given in <cite class="citetitle">Effective AWK Programming</CITE
> [Robbins], Section 12.3. The details are not for the faint of heart.</P
></BLOCKQUOTE
></LI
><li class="listitem"><p class="para">There is no way to get at parts of the matched text, analogous to the
<b class="emphasis.bold">\(...\)</B
> construct in sed.</P
></LI
></UL
></P
><p class="para">For all these reasons, gawk introduced the <b class="emphasis.bold">gensub()</B
> function.
The function takes at least three arguments. The first is a regular expression
to search for.
The second is the replacement string.
The third is a flag that controls how many substitutions should be performed.
The fourth argument, if present, is the original string to change. If it
is not provided, the current input record ($0) is used.</P
><p class="para">The pattern can have subpatterns delimited by parentheses. For
example, it can have &quot;/(part) (one|two|three)/&quot;.  Within the replacement
string, a backslash followed by a digit represents the text that
matched the <em class="emphasis">n</EM
>th subpattern.</P
><blockquote class="screen"><pre class="screen">$ <code class="userinput"><b>echo part two | gawk '{ print gensub(/(part) (one|two|three)/, &quot;\\2&quot;, &quot;g&quot;) }'</B
></CODE
>
two</PRE
></BLOCKQUOTE
><p class="para">The flag is either a string beginning with <b class="emphasis.bold">g</B
> or <b class="emphasis.bold">G</B
>, in which
case the substitution happens globally, or it is a number indicating
that the <em class="emphasis">n</EM
>th occurrence should be replaced.</P
><blockquote class="screen"><pre class="screen">$ <code class="userinput"><b>echo a b c a b c a b c | gawk '{ print gensub(/a/, &quot;AA&quot;, 2) }'</B
></CODE
>
a b c AA b c a b c</PRE
></BLOCKQUOTE
><p class="para">The fourth argument is the string in which to make the change. Unlike
<b class="emphasis.bold">sub()</B
> and <b class="emphasis.bold">gsub()</B
>, the target string is not changed.
Instead, the new string is the return value from <b class="emphasis.bold">gensub()</B
>.</P
><blockquote class="screen"><pre class="screen">$ <code class="userinput"><b>gawk '
BEGIN { old = &quot;hello, world&quot;
        new = gensub(/hello/, &quot;goodbye&quot;, 1, old)
        printf(&quot;&lt;%s&gt;, &lt;%s&gt;\n&quot;, old, new)
}'</B
></CODE
>
&lt;hello, world&gt;, &lt;goodbye, world&gt;</PRE
></BLOCKQUOTE
></DIV
><div class="sect3"><h4 class="sect3"><a class="title" name="SEDAWK-CH-11-SECT-2.3.9.3">11.2.3.11 Time management for programmers</A
></H4
><p class="para"><a class="indexterm" name="CH11.TIME1"></A
><a class="indexterm" name="CH11.TIME2"></A
>Awk programs are very often used for processing the log files
produced by various programs.  Often, each record in a log file contains
a timestamp, indicating when the record was produced. For both conciseness
and precision, the timestamp is written as the result of the UNIX
<em class="emphasis">time</EM
>(2) system call, which is the number of seconds since midnight,
January 1, 1970 UTC.  (This date is often referred to as &quot;the Epoch.&quot;)
To make it easier to generate and process log file records with
these kinds of timestamps in them, gawk has two functions,
<b class="emphasis.bold">systime()</B
> and <b class="emphasis.bold">strftime()</B
>.</P
><p class="para"><a class="indexterm" name="AUTOID-10100"></A
><a class="indexterm" name="AUTOID-10102"></A
><a class="indexterm" name="AUTOID-10104"></A
><a class="indexterm" name="AUTOID-10107"></A
>The <b class="emphasis.bold">systime()</B
> function is primarily intended for generating
timestamps to go into log records.  Suppose, for example, that we
use an awk script to respond to CGI queries to our WWW server.
We might log each query to a log file.</P
><blockquote class="screen"><pre class="screen">{
...
printf(&quot;%s:%s:%d\n&quot;, User, Host, systime()) &gt;&gt; &quot;/var/log/cgi/querylog&quot;
...
}</PRE
></BLOCKQUOTE
><p class="para">Such a record might look like</P
><blockquote class="screen"><pre class="screen">arnold:some.domain.com:831322007</PRE
></BLOCKQUOTE
><p class="para"><a class="indexterm" name="AUTOID-10114"></A
><a class="indexterm" name="AUTOID-10116"></A
>The <b class="emphasis.bold">strftime()</B
> function[7]
makes it easy to turn timestamps into
human-readable dates.
The format string is similar to the one used by <b class="emphasis.bold">sprintf()</B
>; it
consists of literal text mixed with format specifications for different
components of date and time.</P
><blockquote class="footnote"><p class="para">[7] This function is patterned after the function of the same name in ANSI C.</P
></BLOCKQUOTE
><blockquote class="screen"><pre class="screen">$ <code class="userinput"><b>gawk 'BEGIN { print strftime(&quot;Today is %A, %B %d, %Y&quot;) }'</B
></CODE
>
Today is Sunday, May 05, 1996</PRE
></BLOCKQUOTE
><p class="para">The list of available formats is quite long.
See your local <em class="emphasis">strftime</EM
>(3) manpage, and the gawk documentation
for the full list.
Our hypothetical CGI log file might be processed by this program:</P
><blockquote class="screen"><pre class="screen"># cgiformat --- process CGI logs
# data format is user:host:timestamp
#1
BEGIN {	FS = &quot;:&quot;; SUBSEP = &quot;@&quot; }

#2
{
# make data more obvious
	user = $1; host = $2; time = $3
# store first contact by this user
	if (! ((user, host) in first))
		first[user, host] = time
# count contacts
	count[user, host]++
# save last contact
	last[user, host] = time
}

#3
END {
# print the results
	for (contact in count) {
		i = strftime(&quot;%y-%m-%d %H:%M&quot;, first[contact])
		j = strftime(&quot;%y-%m-%d %H:%M&quot;, last[contact])
		printf &quot;%s -&gt; %d times between %s and %s\n&quot;,
			contact, count[contact], i, j
	}
}</PRE
></BLOCKQUOTE
><p class="para">The first step is to set <b class="emphasis.bold">FS</B
> to &quot;:&quot; to split the field correctly.
We also use a neat trick and set the subscript separator to &quot;@&quot;, so that
the arrays become indexed by &quot;user@host&quot; strings.</P
><p class="para">In the second step, we look to see if this is the first time we've seen
this user. If so (they're not in the <b class="emphasis.bold">first</B
> array), we add them.
Then we increment the count of how many times they've connected. Finally
we store this record's timestamp in the <b class="emphasis.bold">last</B
> array.  This element
keeps getting overwritten each time we see a new connection by the user.
That's OK; what we will end up with is the last (most recent) connection
stored in the array.</P
><p class="para">The <kbd class="command">END</KBD
> procedure formats the data for us.
It loops through the <b class="emphasis.bold">count</B
>
array, formatting the timestamps in the <b class="emphasis.bold">first</B
> and <b class="emphasis.bold">last</B
> arrays
for printing.
Consider a log file with the following records in it.</P
><blockquote class="screen"><pre class="screen">$ <code class="userinput"><b>cat /var/log/cgi/querylog</B
></CODE
>
arnold:some.domain.com:831322007
mary:another.domain.org:831312546
arnold:some.domain.com:831327215
mary:another.domain.org:831346231
arnold:some.domain.com:831324598</PRE
></BLOCKQUOTE
><p class="para">Here's what running the program produces:</P
><blockquote class="screen"><pre class="screen">$ <code class="userinput"><b>gawk -f cgiformat.awk /var/log/cgi/querylog</B
></CODE
>
mary@another.domain.org -&gt; 2 times between 96-05-05 12:09 and 96-05-05 21:30
arnold@some.domain.com -&gt; 3 times between 96-05-05 14:46 and 96-05-05 15:29</PRE
></BLOCKQUOTE
><a class="indexterm" name="AUTOID-10143"></A
><a class="indexterm" name="AUTOID-10144"></A
></DIV
><a class="indexterm" name="AUTOID-10145"></A
><a class="indexterm" name="AUTOID-10146"></A
></DIV
><div class="sect2"><h3 class="sect2"><a class="title" name="SEDAWK-CH-11-SECT-2.4">11.2.4 Michael's awk (mawk)</A
></H3
><p class="para"><a class="indexterm" name="AUTOID-10150"></A
><a class="indexterm" name="AUTOID-10153"></A
><a class="indexterm" name="AUTOID-10155"></A
>The third freely available awk is
mawk, written by Michael Brennan.
This program is upwardly compatible with POSIX awk, and has
a few extensions as well. It is solid and performs very well.
Source code for mawk is freely available
via anonymous FTP from <a class="systemitem.sitename" href="ftp.whidbey.net" webstripperlinkwas="http://www.ms.itb.ac.id/buku/unix-bookshelf/sedawk/ftp.whidbey.net">ftp.whidbey.net</A
>. It is in <i class="filename">/pub/brennan/mawk1.3.3.tar.gz</I
>. (There may be a later version
there by the time you read this.)  This is also a tar
file compressed with the <kbd class="command">gzip</KBD
> program.
Be sure to use &quot;binary,&quot; or &quot;image&quot; mode to transfer the file.</P
><p class="para">Mawk's primary advantages are its speed and robustness.
Although it has fewer features than gawk, it almost always outperforms it.[8]
Besides UNIX systems, mawk also runs under MS-DOS.</P
><blockquote class="footnote"><p class="para">[8] Gawk's advantages are that it has a larger feature set, it has been
ported to more non-UNIX kinds of systems, and it comes with much more
extensive documentation.</P
></BLOCKQUOTE
><p class="para">The common extensions described above are also available in mawk.</P
></DIV
></DIV
><div class="htmlnav"><p></P
><hr align="LEFT" width="515" title="footer"><table width="515" border="0" cellspacing="0" cellpadding="0"><tr><td align="LEFT" valign="TOP" width="172"><a class="SECT1" href="ch11_01.htm" webstripperlinkwas="ch11_01.htm" title="11.1 Original awk"><img src="../gifs/txtpreva.gif" webstripperlinkwas="../gifs/txtpreva.gif" alt="Previous: 11.1 Original awk" border="0"></A
></TD
><td align="CENTER" valign="TOP" width="171"><a class="book" href="index.htm" webstripperlinkwas="http://www.ms.itb.ac.id/buku/unix-bookshelf/sedawk/index.htm" title="sed &amp; awk"><img src="../gifs/txthome.gif" webstripperlinkwas="../gifs/txthome.gif" alt="sed &amp; awk" border="0"></A
></TD
><td align="RIGHT" valign="TOP" width="172"><a class="SECT1" href="ch11_03.htm" webstripperlinkwas="ch11_03.htm" title="11.3 Commercial awks"><img src="../gifs/txtnexta.gif" webstripperlinkwas="../gifs/txtnexta.gif" alt="Next: 11.3 Commercial awks" border="0"></A
></TD
></TR
><tr><td align="LEFT" valign="TOP" width="172">11.1 Original awk</TD
><td align="CENTER" valign="TOP" width="171"><a class="index" href="index/idx_0.htm" webstripperlinkwas="index/idx_0.htm" title="Book Index"><img src="../gifs/index.gif" webstripperlinkwas="../gifs/index.gif" alt="Book Index" border="0"></A
></TD
><td align="RIGHT" valign="TOP" width="172">11.3 Commercial awks</TD
></TR
></TABLE
><hr align="LEFT" width="515" title="footer"><img src="../gifs/smnavbar.gif" webstripperlinkwas="../gifs/smnavbar.gif" usemap="#map" border="0" alt="The UNIX CD Bookshelf Navigation"><map name="map"><area shape="RECT" coords="0,0,73,21" href="../index.html" webstripperlinkwas="http://www.ms.itb.ac.id/buku/unix-bookshelf/index.html" alt="The UNIX CD Bookshelf"><area shape="RECT" coords="74,0,163,21" href="../upt/index.htm" webstripperlinkwas="http://www.ms.itb.ac.id/buku/unix-bookshelf/upt/index.htm" alt="UNIX Power Tools"><area shape="RECT" coords="164,0,257,21" href="../unixnut/index.htm" webstripperlinkwas="http://www.ms.itb.ac.id/buku/unix-bookshelf/unixnut/index.htm" alt="UNIX in a Nutshell"><area shape="RECT" coords="258,0,321,21" href="../vi/index.htm" webstripperlinkwas="http://www.ms.itb.ac.id/buku/unix-bookshelf/vi/index.htm" alt="Learning the vi Editor"><area shape="RECT" coords="322,0,378,21" href="index.htm" webstripperlinkwas="http://www.ms.itb.ac.id/buku/unix-bookshelf/sedawk/index.htm" alt="sed &amp; awk"><area shape="RECT" coords="379,0,438,21" href="../ksh/index.htm" webstripperlinkwas="http://www.ms.itb.ac.id/buku/unix-bookshelf/ksh/index.htm" alt="Learning the Korn Shell"><area shape="RECT" coords="439,0,514,21" href="../lrnunix/index.htm" webstripperlinkwas="http://www.ms.itb.ac.id/buku/unix-bookshelf/lrnunix/index.htm" alt="Learning the UNIX Operating System"></MAP
></DIV
></BODY
></HTML
>
