<html><head><title>[Chapter 7] 7.10 Passing Parameters Into a Script</TITLE
><meta name="DC.title" content="sed &amp; awk"><meta name="DC.creator" content="Dale Dougherty &amp; Arnold Robbins"><meta name="DC.publisher" content="O'Reilly &amp; Associates, Inc."><meta name="DC.date" content="1998-08-03T20:57:58Z"><meta name="DC.type" content="Text.Monograph"><meta name="DC.format" content="text/html" scheme="MIME"><meta name="DC.source" content="1-56592-225-5" scheme="ISBN"><meta name="DC.language" content="en-US"><meta name="generator" content="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><link rev="made" href="mailto:online-books@oreilly.com" title="Online Books Comments"><link rel="up" href="ch07_01.htm" webstripperlinkwas="ch07_01.htm" title="7. Writing Scripts for awk"><link rel="prev" href="ch07_09.htm" webstripperlinkwas="ch07_09.htm" title="7.9 Formatted Printing"><link rel="next" href="ch07_11.htm" webstripperlinkwas="ch07_11.htm" title="7.11 Information Retrieval"></HEAD
><body bgcolor="#FFFFFF" text="#000000"><div class="htmlnav"><h1><img src="gifs/smbanner.gif" webstripperlinkwas="gifs/smbanner.gif" alt="sed &amp; awk" usemap="#srchmap" border="0"></H1
><map name="srchmap"><area shape="RECT" coords="0,0,466,65" href="index.htm" webstripperlinkwas="http://www.ms.itb.ac.id/buku/unix-bookshelf/sedawk/index.htm" alt="sed &amp; awk"><area shape="RECT" coords="467,0,514,18" href="jobjects/fsearch.htm" webstripperlinkwas="jobjects/fsearch.htm" alt="Search this book"></MAP
><table width="515" border="0" cellspacing="0" cellpadding="0"><tr><td align="LEFT" valign="TOP" width="172"><a class="SECT1" href="ch07_09.htm" webstripperlinkwas="ch07_09.htm" title="7.9 Formatted Printing"><img src="../gifs/txtpreva.gif" webstripperlinkwas="../gifs/txtpreva.gif" alt="Previous: 7.9 Formatted Printing" border="0"></A
></TD
><td align="CENTER" valign="TOP" width="171"><b><font face="ARIEL,HELVETICA,HELV,SANSERIF" size="-1">Chapter 7<br>Writing Scripts for awk</FONT
></B
></TD
><td align="RIGHT" valign="TOP" width="172"><a class="SECT1" href="ch07_11.htm" webstripperlinkwas="ch07_11.htm" title="7.11 Information Retrieval"><img src="../gifs/txtnexta.gif" webstripperlinkwas="../gifs/txtnexta.gif" alt="Next: 7.11 Information Retrieval" border="0"></A
></TD
></TR
></TABLE
>&nbsp;<hr align="LEFT" width="515" title="footer"></DIV
><div class="SECT1"><h2 class="sect1"><a class="title" name="SEDAWK-CH-7-SECT-10">7.10 Passing Parameters Into a Script</A
></H2
><p class="para"><a class="indexterm" name="CH07.PARAM1"></A
><a class="indexterm" name="CH07.PARAM2"></A
><a class="indexterm" name="CH07.PARAM3"></A
>One of the more confusing subtleties of programming in awk
is passing parameters into a script. 
A parameter assigns a value to a variable that can be accessed
within the awk script.
The variable can be set on
the command line, after the script and before the filename.</P
><blockquote class="screen"><pre class="screen">awk 'script' var=value inputfile</PRE
></BLOCKQUOTE
><p class="para">Each parameter must be interpreted as a single argument.  Therefore,
spaces are not permitted on either side of the equal sign.
Multiple parameters can be passed this way.
For instance, if you wanted to define the variables 
<b class="emphasis.bold">high</B
> and <b class="emphasis.bold">low</B
>
from the command line, you could invoke awk as follows:</P
><blockquote class="screen"><pre class="screen">$ <code class="userinput"><b>awk -f scriptfile high=100 low=60 datafile</B
></CODE
></PRE
></BLOCKQUOTE
><p class="para">Inside the script, these two variables are available and can be
accessed as any awk variable.
If you were to put this script in a shell script wrapper, then
you could pass the shell's command-line arguments as values.  
(The shell makes available command-line arguments in the 
positional variables&nbsp;- $1 for the first parameter, $2 for
the second, and so on.)[13]
For instance, look at the shell script version of the previous command:</P
><blockquote class="footnote"><p class="para">[13] Careful! Don't confuse
the shell's parameters with awk's field variables.</P
></BLOCKQUOTE
><blockquote class="screen"><pre class="screen">awk -f scriptfile &quot;high=$1&quot; &quot;low=$2&quot; datafile</PRE
></BLOCKQUOTE
><p class="para">If this shell script were named <kbd class="command">awket</KBD
>, it could be invoked
as:</P
><blockquote class="screen"><pre class="screen">$ <code class="userinput"><b>awket 100 60</B
></CODE
></PRE
></BLOCKQUOTE
><p class="para">&quot;100&quot; would be $1 and passed as the value assigned to the variable <b class="emphasis.bold">high</B
>.</P
><p class="para">In addition, environment variables or the output of 
a command can be passed as the value of a variable.
Here are two examples:</P
><blockquote class="screen"><pre class="screen">awk '{ ... }' directory=$cwd file1 ...
awk '{ ... }' directory=`pwd` file1 ...</PRE
></BLOCKQUOTE
><p class="para">&quot;$cwd&quot; returns the value of the variable <b class="emphasis.bold">cwd</B
>, the current working directory
(<kbd class="command">csh</KBD
> only).  The second example uses backquotes to
execute the <kbd class="command">pwd</KBD
> command and assign its result to
the variable <b class="emphasis.bold">directory</B
> (this is more
portable).</P
><p class="para">You can also use command-line parameters to define system
variables, as in the following example:</P
><blockquote class="screen"><pre class="screen">$ <code class="userinput"><b>awk '{ print NR, $0 }' OFS='. ' names</B
></CODE
>
1. Tom 656-5789
2. Dale 653-2133
3. Mary 543-1122
4. Joe 543-2211</PRE
></BLOCKQUOTE
><p class="para">The output field separator is redefined to be a period followed
by a space.</P
><p class="para"><a class="indexterm" name="AUTOID-6194"></A
>An important restriction 
on command-line parameters is that they are not available in 
the <kbd class="command">BEGIN</KBD
> procedure.  That is, they are not available
until <em class="emphasis">after</EM
> the first line of input is read.
Why?  Well, here's the confusing part. 
A parameter passed from the command line
is treated as though it were a filename.  The assignment does not
occur until the parameter, if it were a filename, is actually
evaluated.</P
><p class="para">Look at the following script that sets a variable <i class="option">n</I
>
as a command-line parameter.</P
><blockquote class="screen"><pre class="screen">awk  'BEGIN { print n }
{
if (n == 1) print &quot;Reading the first file&quot;
if (n == 2) print &quot;Reading the second file&quot;
}' n=1 test n=2 test2</PRE
></BLOCKQUOTE
><p class="para">There are four command-line parameters:  &quot;n=1,&quot; &quot;test,&quot; &quot;n=2,&quot;
and &quot;test2&quot;.  
Now, if you remember that a <kbd class="command">BEGIN</KBD
> procedure is &quot;what we do
before processing input,&quot; you'll understand why the reference
to <i class="option">n</I
> in the <kbd class="command">BEGIN</KBD
> procedure returns nothing.  So the <kbd class="command">print</KBD
>
statement will print a blank line.  If
the first parameter were a file and not a
variable assignment, the file would not be opened until
the <kbd class="command">BEGIN</KBD
> procedure had been executed. </P
><p class="para">The variable <i class="option">n</I
> is given
an initial value of 1 from the first parameter.
The second parameter supplies the name of the file.
Thus, for each line in <i class="filename">test</I
>, the conditional &quot;n == 1&quot;
will be true.  After the input is exhausted from <i class="filename">test</I
>,
the third parameter is evaluated, and it
sets <b class="emphasis.bold">n</B
> to 2.  Finally, the fourth parameter supplies
the name of a second file.
Now the conditional &quot;n == 2&quot; in the main procedure will be
true.</P
><p class="para">One consequence of the way parameters are evaluated is
that you cannot use the <kbd class="command">BEGIN</KBD
> procedure to
test or verify parameters that are supplied on the command line.  
They are available only after a line of input has been read.
You can get around this limitation by composing the rule &quot;NR == 1&quot; and
using its procedure to verify the assignment.
Another way is to test the command-line parameters 
in the shell script before invoking awk.</P
><p class="para"><a class="indexterm" name="AUTOID-6216"></A
>POSIX awk provides a solution to the problem of defining parameters
before any input is read.  The <i class="option">-v</I
> option[14]
specifies variable assignments that you want to take place
before executing the <kbd class="command">BEGIN</KBD
> procedure (i.e., before the first line
of input is read.) 
The <i class="option">-v</I
> option must be specified before a command-line script.
For instance, the following command uses the <i class="option">-v</I
> option
to set the record separator for multiline records. </P
><blockquote class="footnote"><p class="para">[14] The <i class="option">-v</I
> option was not part of the original (1987) version of nawk
(still used on SunOS 4.1.x systems and some System V Release 3.x
systems).
It was added in 1989 after Brian Kernighan of Bell Labs, the GNU awk
authors, and the authors of MKS awk agreed on a
way to set variables on the command line that would be available
inside the <kbd class="command">BEGIN</KBD
> block. It is now part of the POSIX specification
for awk.</P
></BLOCKQUOTE
><blockquote class="screen"><pre class="screen">$ awk -F&quot;\n&quot; -v RS=&quot;&quot; '{ print }' phones.block</PRE
></BLOCKQUOTE
><p class="para">A separate <i class="option">-v</I
> option is required for each variable assignment
that is passed to the program.</P
><p class="para">Awk also provides the system variables 
<b class="emphasis.bold">ARGC</B
> and <b class="emphasis.bold">ARGV</B
>, 
which will be familiar to C programmers.  Because
this requires an understanding of arrays, we will discuss this
feature in <a class="xref" href="ch08_01.htm" webstripperlinkwas="ch08_01.htm" title="Conditionals, Loops, and Arrays">Chapter 8, Conditionals, Loops, and Arrays</A
>.</P
><a class="indexterm" name="AUTOID-6233"></A
><a class="indexterm" name="AUTOID-6234"></A
><a class="indexterm" name="AUTOID-6235"></A
></DIV
><div class="htmlnav"><p></P
><hr align="LEFT" width="515" title="footer"><table width="515" border="0" cellspacing="0" cellpadding="0"><tr><td align="LEFT" valign="TOP" width="172"><a class="SECT1" href="ch07_09.htm" webstripperlinkwas="ch07_09.htm" title="7.9 Formatted Printing"><img src="../gifs/txtpreva.gif" webstripperlinkwas="../gifs/txtpreva.gif" alt="Previous: 7.9 Formatted Printing" border="0"></A
></TD
><td align="CENTER" valign="TOP" width="171"><a class="book" href="index.htm" webstripperlinkwas="http://www.ms.itb.ac.id/buku/unix-bookshelf/sedawk/index.htm" title="sed &amp; awk"><img src="../gifs/txthome.gif" webstripperlinkwas="../gifs/txthome.gif" alt="sed &amp; awk" border="0"></A
></TD
><td align="RIGHT" valign="TOP" width="172"><a class="SECT1" href="ch07_11.htm" webstripperlinkwas="ch07_11.htm" title="7.11 Information Retrieval"><img src="../gifs/txtnexta.gif" webstripperlinkwas="../gifs/txtnexta.gif" alt="Next: 7.11 Information Retrieval" border="0"></A
></TD
></TR
><tr><td align="LEFT" valign="TOP" width="172">7.9 Formatted Printing</TD
><td align="CENTER" valign="TOP" width="171"><a class="index" href="index/idx_0.htm" webstripperlinkwas="index/idx_0.htm" title="Book Index"><img src="../gifs/index.gif" webstripperlinkwas="../gifs/index.gif" alt="Book Index" border="0"></A
></TD
><td align="RIGHT" valign="TOP" width="172">7.11 Information Retrieval</TD
></TR
></TABLE
><hr align="LEFT" width="515" title="footer"><img src="../gifs/smnavbar.gif" webstripperlinkwas="../gifs/smnavbar.gif" usemap="#map" border="0" alt="The UNIX CD Bookshelf Navigation"><map name="map"><area shape="RECT" coords="0,0,73,21" href="../index.html" webstripperlinkwas="http://www.ms.itb.ac.id/buku/unix-bookshelf/index.html" alt="The UNIX CD Bookshelf"><area shape="RECT" coords="74,0,163,21" href="../upt/index.htm" webstripperlinkwas="http://www.ms.itb.ac.id/buku/unix-bookshelf/upt/index.htm" alt="UNIX Power Tools"><area shape="RECT" coords="164,0,257,21" href="../unixnut/index.htm" webstripperlinkwas="http://www.ms.itb.ac.id/buku/unix-bookshelf/unixnut/index.htm" alt="UNIX in a Nutshell"><area shape="RECT" coords="258,0,321,21" href="../vi/index.htm" webstripperlinkwas="http://www.ms.itb.ac.id/buku/unix-bookshelf/vi/index.htm" alt="Learning the vi Editor"><area shape="RECT" coords="322,0,378,21" href="index.htm" webstripperlinkwas="http://www.ms.itb.ac.id/buku/unix-bookshelf/sedawk/index.htm" alt="sed &amp; awk"><area shape="RECT" coords="379,0,438,21" href="../ksh/index.htm" webstripperlinkwas="http://www.ms.itb.ac.id/buku/unix-bookshelf/ksh/index.htm" alt="Learning the Korn Shell"><area shape="RECT" coords="439,0,514,21" href="../lrnunix/index.htm" webstripperlinkwas="http://www.ms.itb.ac.id/buku/unix-bookshelf/lrnunix/index.htm" alt="Learning the UNIX Operating System"></MAP
></DIV
></BODY
></HTML
>
