<html><head><title>[Chapter 5] 5.11 Reading and Writing Files</TITLE
><meta name="DC.title" content="sed &amp; awk"><meta name="DC.creator" content="Dale Dougherty &amp; Arnold Robbins"><meta name="DC.publisher" content="O'Reilly &amp; Associates, Inc."><meta name="DC.date" content="1998-08-03T20:54:37Z"><meta name="DC.type" content="Text.Monograph"><meta name="DC.format" content="text/html" scheme="MIME"><meta name="DC.source" content="1-56592-225-5" scheme="ISBN"><meta name="DC.language" content="en-US"><meta name="generator" content="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><link rev="made" href="mailto:online-books@oreilly.com" title="Online Books Comments"><link rel="up" href="ch05_01.htm" webstripperlinkwas="ch05_01.htm" title="5. Basic sed Commands"><link rel="prev" href="ch05_10.htm" webstripperlinkwas="ch05_10.htm" title="5.10 Next"><link rel="next" href="ch05_12.htm" webstripperlinkwas="ch05_12.htm" title="5.12 Quit"></HEAD
><body bgcolor="#FFFFFF" text="#000000"><div class="htmlnav"><h1><img src="gifs/smbanner.gif" webstripperlinkwas="gifs/smbanner.gif" alt="sed &amp; awk" usemap="#srchmap" border="0"></H1
><map name="srchmap"><area shape="RECT" coords="0,0,466,65" href="index.htm" webstripperlinkwas="http://www.ms.itb.ac.id/buku/unix-bookshelf/sedawk/index.htm" alt="sed &amp; awk"><area shape="RECT" coords="467,0,514,18" href="jobjects/fsearch.htm" webstripperlinkwas="jobjects/fsearch.htm" alt="Search this book"></MAP
><table width="515" border="0" cellspacing="0" cellpadding="0"><tr><td align="LEFT" valign="TOP" width="172"><a class="SECT1" href="ch05_10.htm" webstripperlinkwas="ch05_10.htm" title="5.10 Next"><img src="../gifs/txtpreva.gif" webstripperlinkwas="../gifs/txtpreva.gif" alt="Previous: 5.10 Next" border="0"></A
></TD
><td align="CENTER" valign="TOP" width="171"><b><font face="ARIEL,HELVETICA,HELV,SANSERIF" size="-1">Chapter 5<br>Basic sed Commands</FONT
></B
></TD
><td align="RIGHT" valign="TOP" width="172"><a class="SECT1" href="ch05_12.htm" webstripperlinkwas="ch05_12.htm" title="5.12 Quit"><img src="../gifs/txtnexta.gif" webstripperlinkwas="../gifs/txtnexta.gif" alt="Next: 5.12 Quit" border="0"></A
></TD
></TR
></TABLE
>&nbsp;<hr align="LEFT" width="515" title="footer"></DIV
><div class="SECT1"><h2 class="sect1"><a class="title" name="SEDAWK-CH-5-SECT-11">5.11 Reading and Writing Files</A
></H2
><p class="para"><a class="indexterm" name="AUTOID-3835"></A
><a class="indexterm" name="AUTOID-3838"></A
><a class="indexterm" name="CH05.RW1"></A
><a class="indexterm" name="CH05.RW3"></A
><a class="indexterm" name="CH05.RW6"></A
><a class="indexterm" name="CH05.RW2"></A
><a class="indexterm" name="AUTOID-3851"></A
><a class="indexterm" name="AUTOID-3854"></A
>The read (<kbd class="command">r</KBD
>) and write (<kbd class="command">w</KBD
>)
commands allow you to work directly with files.  Both take a single
argument, the name of a file.  The syntax follows:</P
><blockquote class="literallayout"><p class="literallayout">[<code class="replaceable"><i>line-address</I
></CODE
>]<kbd class="command">r</KBD
> <code class="replaceable"><i>file</I
></CODE
><br>[<code class="replaceable"><i>address</I
></CODE
>]<kbd class="command">w</KBD
> <code class="replaceable"><i>file</I
></CODE
></P
></BLOCKQUOTE
><p class="para"><a class="indexterm" name="AUTOID-3867"></A
>The read command reads the contents of <em class="emphasis">file</EM
> into
the pattern space after the addressed line.  It cannot operate on a
range of lines.  The write command writes the contents of the pattern
space to the <em class="emphasis">file</EM
>.</P
><p class="para">You must have a single space between the command and the filename.
(Everything after that space and up to the newline is taken to be the
filename.  Thus, leading or embedded spaces will become part of
the filename.)  The read command will not complain if the file does
not exist.  The write command will create a file if it does not exist;
if the file already exists, the write command will overwrite it each
time the script is invoked.  If there are multiple instructions
writing to the same file in one script, then each write command
appends to the file.  Also, be aware that you can only open up to 10
files per script.</P
><p class="para">The read command can be useful for inserting the contents of one file
at a particular place in another file.  For instance, let's say that
there is a set of files and each file should close with the same one-
or two-paragraph statement.  A sed script would allow you to maintain
the closing separately while inserting it as needed, for instance,
when sending the file to the printer.</P
><blockquote class="screen"><pre class="screen">sed '$r closing' $* | pr | lp</PRE
></BLOCKQUOTE
><p class="para">The $ is an addressing symbol specifying the last line of the file.
The contents of the file named <i class="filename">closing</I
> are placed
after the contents of pattern space and output with it.  This example
does not specify a pathname, assuming the file to be in the same
directory as the command.  A more general-purpose command should use
the full pathname.</P
><p class="para">You may want to test out a few quirks of the read command.  Let's look
at the following command:</P
><blockquote class="screen"><pre class="screen">/^&lt;Company-list&gt;/r company.list</PRE
></BLOCKQUOTE
><p class="para">That is, when sed matches a line beginning with the string
&quot;&lt;Company-list&gt;&quot;, it is going to append the contents of the file
<em class="emphasis">company.list</EM
> to the end of the matched line.  No
subsequent command will affect the lines read from the file.  For
instance, you can't make any changes to the list of companies that
you've read into the file.  However, commands that address the
original line will work.  The previous command could be
followed by a second command:</P
><blockquote class="screen"><pre class="screen">/^&lt;Company-list&gt;/d</PRE
></BLOCKQUOTE
><p class="para">to delete the original line.  So that if the input file was as
follows:</P
><blockquote class="screen"><pre class="screen">For service, contact any of the following companies:
&lt;Company-list&gt;
Thank you.</PRE
></BLOCKQUOTE
><p class="para">running the two-line script would produce:</P
><blockquote class="screen"><pre class="screen">For service, contact any of the following companies:
	Allied
	Mayflower
	United
Thank you.</PRE
></BLOCKQUOTE
><p class="para">Suppressing the automatic output, using the <i class="option">-n</I
> option
or <kbd class="command">#n</KBD
> script syntax, prevents the original line in
the pattern space from being output, but the result of a read command
still goes to standard output.</P
><p class="para"><a class="indexterm" name="CH05.RW5"></A
>Now let's look at examples of the write command.  One use is to
extract information from one file and place it in its own file.
For instance, imagine that we had a file listing the names of
salespeople alphabetically.   For each person, the listing designates
which of four regions the person is assigned to.  Here's a sample:</P
><blockquote class="screen"><pre class="screen">Adams, Henrietta        Northeast
Banks, Freda            South
Dennis, Jim             Midwest
Garvey, Bill            Northeast
Jeffries, Jane          West
Madison, Sylvia         Midwest
Sommes, Tom             South</PRE
></BLOCKQUOTE
><p class="para">Writing a script for a seven-line file, of course, is ridiculous.
Yet such a script can potentially handle as many names as you
can put together, and is reusable.  </P
><p class="para">If all we wanted was to extract the names for a particular region,
we could easily use <kbd class="command">grep</KBD
> to do it.  The advantage with
sed is that we can break up the file into four separate files
in a single step.  The following four-line script does it:</P
><blockquote class="screen"><pre class="screen">/Northeast$/w region.northeast
/South$/w region.south
/Midwest$/w region.midwest
/West$/w region.west</PRE
></BLOCKQUOTE
><p class="para">All of the names of salespeople that are assigned to the Northeast region will
be placed in a file named <i class="filename">region.northeast</I
>.</P
><p class="para">The write command writes out the contents of the pattern space when
the command is invoked, not when end of the script is reached.  In the
previous example, we might want to remove the name of the region
before writing it to file.  For each case, we could handle it as we
show for the Northeast region:</P
><blockquote class="screen"><pre class="screen">/Northeast$/{
	s///
	w region.northeast
	}</PRE
></BLOCKQUOTE
><p class="para">The substitute command matches the same pattern as the address and
removes it.  There are many different uses for the write command; 
for example, you could use it in a script to generate several customized
versions of the same source file.</P
><div class="sect2"><h3 class="sect2"><a class="title" name="SEDAWK-CH-5-SECT-11.1">5.11.1 Checking Out Reference Pages</A
></H3
><p class="para">Like many programs, a sed script often starts out small, and is simple
to write and simple to read.  In testing the script, you may discover
specific cases for which the general rules do not apply.  To account
for these, you add lines to your script, making it longer, more
complex, and more complete.  While the amount of time you spend
refining your script may cancel out the time saved by not doing the editing
manually, at least during that time your mind has been engaged by your
own seeming sleight-of-hand: &quot;See!  The computer did it.&quot;</P
><p class="para">We encountered one such problem in preparing a formatted copy of
command pages that the writer had typed as a text file without any
formatting information.  Although the files had no formatting codes,
headings were used consistently to identify the format of the command
pages.  A sample file is shown below.</P
><blockquote class="screen"><pre class="screen">******************************************************************

NAME:	DBclose - closes a database

SYNTAX:
	void	DBclose(fdesc)
		DBFILE *fdesc;

USAGE:
	fdesc	- pointer to database file descriptor

DESC: 
DBclose() closes a file when given its database file descriptor.  
Your pending writes to that file will be completed before the
file is closed.  All of your update locks are removed. 
*fdesc becomes invalid.

Other users are not affected when you call DBclose().  Their update
locks and pending writes are not changed.

Note that there is no default file as there is in BASIC.  
*fdesc must specify an open file.

DBclose() is analogous to the CLOSE statement in BASIC.

RETURNS:
	There is no return value

******************************************************************</PRE
></BLOCKQUOTE
><p class="para">The task was to format this document for the laser printer, using the
reference header macros we had developed.  Because there were perhaps
forty of these command pages, it would have been utter drudgery to go
through and add codes by hand.  However, because there were that many,
and even though the writer was generally consistent in entering them,
there would be enough differences from command to command to have
required several passes.</P
><p class="para">We'll examine the process of building this sed script.  In a sense,
this is a process of looking carefully at each line of a sample input
file and determining whether or not an edit must be made on that line.
Then we look at the rest of the file for similar occurrences.  We try
to find specific patterns that mark the lines or range of lines that
need editing.</P
><p class="para">For instance, by looking at the first line, we know we need to
eliminate the row of asterisks separating each command.  We specify an
address for any line beginning and ending with an asterisk and look
for zero or more asterisks in between.  The regular expression uses an
asterisk as a literal and as a metacharacter:</P
><blockquote class="screen"><pre class="screen">/^\*\**\*$/d</PRE
></BLOCKQUOTE
><p class="para">This command deletes entire lines of asterisks anywhere they occur in
the file.  We saw that blank lines were used to separate paragraphs,
but replacing every blank line with a paragraph macro would cause
other problems.  In many cases, the blank lines can be removed because
spacing has been provided in the macro.  This is a case where we put
off deleting or replacing blank lines on a global basis until we have
dealt with specific cases.  For instance, some blank lines separate
labeled sections, and we can use them to define the end of a range of
lines.  The script, then, is designed to delete unwanted blank lines
as the last operation.</P
><p class="para">Tabs were a similar problem.  Tabs were used to indent syntax lines
and in some cases after the colon following a label, such as &quot;NAME&quot;.
Our first thought was to remove all tabs by replacing them with eight
spaces, but there were tabs we wanted to keep, such as those
inside the syntax line.  So we removed only specific cases, tabs at
the beginning of lines and tabs following a colon.</P
><blockquote class="screen"><pre class="screen">/^<img src="../chars/bull.gif" webstripperlinkwas="../chars/bull.gif" alt="&#183;">/s///
/:<img src="../chars/bull.gif" webstripperlinkwas="../chars/bull.gif" alt="&#183;">/s//:/</PRE
></BLOCKQUOTE
><p class="para">The next line we come across has the name of the command and a
description.</P
><blockquote class="screen"><pre class="screen">NAME:	DBclose - closes a database</PRE
></BLOCKQUOTE
><p class="para">We need to replace it with the macro .Rh 0.  Its syntax is:</P
><blockquote class="literallayout"><p class="literallayout"><kbd class="command">.Rh 0</KBD
> &quot;<code class="replaceable"><i>command</I
></CODE
>&quot; &quot;<code class="replaceable"><i>description</I
></CODE
>&quot;</P
></BLOCKQUOTE
><p class="para">We insert the macro at the beginning of the line, remove the hyphen,
and surround the arguments with quotation marks.</P
><blockquote class="screen"><pre class="screen">/NAME:/ {
	s//.Rh 0 &quot;/
	s/ - /&quot; &quot;/
	s/$/&quot;/
	}</PRE
></BLOCKQUOTE
><p class="para">We can jump ahead of ourselves a bit here and look at what this
portion of our script does to the sample line:</P
><blockquote class="screen"><pre class="screen">.Rh 0 &quot;DBclose&quot; &quot;closes a database&quot;</PRE
></BLOCKQUOTE
><p class="para">The next part that we examine begins with &quot;SYNTAX.&quot;  What we need to
do here is put in the .Rh macro, plus some additional
<kbd class="command">troff</KBD
> requests for indentation, a font change, and
no-fill and no-adjust.  (The indentation is required because we
stripped the tabs at the beginning of the line.)  These requests must
go in before and after the syntax lines, turning the capabilities on
and off.  To do this, we define an address that specifies the range of
lines between two patterns, the label and a blank line.  Then, using
the change command, we replace the label and the blank line with a
series of formatting requests.</P
><blockquote class="screen"><pre class="screen">/SYNTAX:/,/^$/ {
	/SYNTAX:/c\
.Rh Syntax\
.in +5n\
.ft B\
.nf\
.na
	/^$/c\
.in -5n\
.ft R\
.fi\
.ad b
	}</PRE
></BLOCKQUOTE
><p class="para">Following the change command, each line of input ends with a backslash
except the last line.  As a side effect of the change command, the
current line is deleted from the pattern space.</P
><p class="para">The USAGE portion is next, consisting of one or more descriptions of
variable items.  Here we want to format each item as an indented
paragraph with a hanging italicized label.  First, we output the .Rh
macro; then we search for lines having two parts separated by a tab
and a hyphen.  Each part is saved, using backslash-parentheses, and
recalled during the substitution.</P
><blockquote class="screen"><pre class="screen">/USAGE:/,/^$/ {
	/USAGE:/c\
.Rh Usage
	/\(.*\)<img src="../chars/bull.gif" webstripperlinkwas="../chars/bull.gif" alt="&#183;">- \(.*\)/s//.IP &quot;\\fI\1\\fR&quot; 15n\
\2./
	}</PRE
></BLOCKQUOTE
><p class="para">This is a good example of the power of regular expressions. 
Let's look ahead, once again, and preview the output for the sample.</P
><blockquote class="screen"><pre class="screen">.Rh Usage
.IP &quot;\fIfdesc\fR&quot; 15n
pointer to database file descriptor.</PRE
></BLOCKQUOTE
><p class="para">The next part we come across is the description.  We notice that blank
lines are used in this portion to separate paragraphs.  In specifying
the address for this portion, we use the next label, &quot;RETURNS.&quot;</P
><blockquote class="screen"><pre class="screen">/DESC:/,/RETURNS/ {
	/DESC:/i\
.LP
	s/DESC: *$/.Rh Description/
	s/^$/.LP/
}</PRE
></BLOCKQUOTE
><p class="para">The first thing we do is insert a paragraph macro because the
preceding USAGE section consisted of indented paragraphs.  (We could
have used the variable-list macros from the <kbd class="command">-mm</KBD
>
package in the USAGE section; if so, we would insert the .LE at this
point.)  This is done only once, which is why it is keyed to the
&quot;DESC&quot; label.  Then we substitute the label &quot;DESC&quot; with the .Rh macro
and replace all blank lines in this section with a paragraph macro.</P
><p class="para">When we tested this portion of the sed script on our sample file, it
didn't work because there was a single space following the DESC label.
We changed the regular expression to look for zero or more spaces
following the label.  Although this worked for the sample file, there
were other problems when we used a larger sample.  The writer was
inconsistent in his use of the &quot;DESC&quot; label.  Mostly, it occurred on a
line by itself; sometimes, though, it was included at the start of the
second paragraph.  So we had to add another pattern to deal with this
case.  It searches for the label followed by a space and one or more
characters.</P
><blockquote class="screen"><pre class="screen">s/DESC: *$/.Rh Description/
s/DESC: \(.*\)/.Rh Description\
\\1/</PRE
></BLOCKQUOTE
><p class="para">In the second case, the reference header macro is output followed by a
newline.</P
><p class="para">The next section, labeled &quot;RETURNS,&quot; is handled in the same way
as the SYNTAX section.   </P
><p class="para">We do make minor content changes, replacing the label &quot;RETURNS&quot; with
&quot;Return Value&quot; and consequently adding this substitution:</P
><blockquote class="screen"><pre class="screen">s/There is no return value\.*/None./</PRE
></BLOCKQUOTE
><p class="para">The very last thing we do is delete remaining blank lines. </P
><blockquote class="screen"><pre class="screen">/^$/d</PRE
></BLOCKQUOTE
><p class="para">Our script is put in a file named <em class="emphasis">refsed</EM
>. 
Here it is in full:</P
><blockquote class="screen"><pre class="screen"># refsed -- add formatting codes to reference pages
/^\*\**\*$/d
/^<img src="../chars/bull.gif" webstripperlinkwas="../chars/bull.gif" alt="&#183;">/s///
/:<img src="../chars/bull.gif" webstripperlinkwas="../chars/bull.gif" alt="&#183;">/s//:/
/NAME:/ {
	s//.Rh 0 &quot;/
	s/ - /&quot; &quot;/
	s/$/&quot;/
}
/SYNTAX:/,/^$/ {
	/SYNTAX:/c\
.Rh Syntax\
.in +5n\
.ft B\
.nf\
.na
	/^$/c\
.in -5n\
.ft R\
.fi\
.ad b
}
/USAGE:/,/^$/ {
	/USAGE:/c\
.Rh Usage
	/\(.*\)<img src="../chars/bull.gif" webstripperlinkwas="../chars/bull.gif" alt="&#183;">- \(.*\)/s//.IP &quot;\\fI\1\\fR&quot; 15n\
\2./
}
/DESC:/,/RETURNS/ {
	/DESC:/i\
.LP
	s/DESC: *$/.Rh Description/
	s/DESC: \(.*\)/.Rh Description\
\1/
	s/^$/.LP/
}
/RETURNS:/,/^$/ {
	/RETURNS:/c\
.Rh &quot;Return Value&quot;
	s/There is no return value\.*/None./
}
/^$/d</PRE
></BLOCKQUOTE
><p class="para">As we have remarked, you should not have sed overwrite the original.
It is best to redirect the output of sed to another file or let it go
to the screen.  If the sed script does not work properly, you will
find that it is generally easier to change the script and re-run it on
the original file than to write a new script to correct the problems
caused by a previous run.</P
><blockquote class="screen"><pre class="screen">$<code class="userinput"><b> sed -f refsed refpage  </B
></CODE
>
.Rh 0 &quot;DBclose&quot; &quot;closes a database&quot;
.Rh Syntax
.in +5n
.ft B
.nf
.na
void	DBclose(fdesc)
	DBFILE *fdesc;
.in -5n
.ft R
.fi
.ad b
.Rh Usage
.IP &quot;\fIfdesc\fR&quot; 15n
pointer to database file descriptor.
.LP
.Rh Description
DBclose() closes a file when given its database file descriptor.  
Your pending writes to that file will be completed before the
file is closed.  All of your update locks are removed. 
*fdesc becomes invalid.
.LP
Other users are not effected when you call DBclose().  Their update
locks and pending writes are not changed.
.LP
Note that there is no default file as there is in BASIC.  
*fdesc must specify an open file.
.LP
DBclose() is analogous to the CLOSE statement in BASIC.
.LP
.Rh &quot;Return Value&quot;
None.</PRE
></BLOCKQUOTE
></DIV
><a class="indexterm" name="AUTOID-3953"></A
><a class="indexterm" name="AUTOID-3954"></A
><a class="indexterm" name="AUTOID-3955"></A
><a class="indexterm" name="AUTOID-3956"></A
><a class="indexterm" name="AUTOID-3957"></A
></DIV
><div class="htmlnav"><p></P
><hr align="LEFT" width="515" title="footer"><table width="515" border="0" cellspacing="0" cellpadding="0"><tr><td align="LEFT" valign="TOP" width="172"><a class="SECT1" href="ch05_10.htm" webstripperlinkwas="ch05_10.htm" title="5.10 Next"><img src="../gifs/txtpreva.gif" webstripperlinkwas="../gifs/txtpreva.gif" alt="Previous: 5.10 Next" border="0"></A
></TD
><td align="CENTER" valign="TOP" width="171"><a class="book" href="index.htm" webstripperlinkwas="http://www.ms.itb.ac.id/buku/unix-bookshelf/sedawk/index.htm" title="sed &amp; awk"><img src="../gifs/txthome.gif" webstripperlinkwas="../gifs/txthome.gif" alt="sed &amp; awk" border="0"></A
></TD
><td align="RIGHT" valign="TOP" width="172"><a class="SECT1" href="ch05_12.htm" webstripperlinkwas="ch05_12.htm" title="5.12 Quit"><img src="../gifs/txtnexta.gif" webstripperlinkwas="../gifs/txtnexta.gif" alt="Next: 5.12 Quit" border="0"></A
></TD
></TR
><tr><td align="LEFT" valign="TOP" width="172">5.10 Next</TD
><td align="CENTER" valign="TOP" width="171"><a class="index" href="index/idx_0.htm" webstripperlinkwas="index/idx_0.htm" title="Book Index"><img src="../gifs/index.gif" webstripperlinkwas="../gifs/index.gif" alt="Book Index" border="0"></A
></TD
><td align="RIGHT" valign="TOP" width="172">5.12 Quit</TD
></TR
></TABLE
><hr align="LEFT" width="515" title="footer"><img src="../gifs/smnavbar.gif" webstripperlinkwas="../gifs/smnavbar.gif" usemap="#map" border="0" alt="The UNIX CD Bookshelf Navigation"><map name="map"><area shape="RECT" coords="0,0,73,21" href="../index.html" webstripperlinkwas="http://www.ms.itb.ac.id/buku/unix-bookshelf/index.html" alt="The UNIX CD Bookshelf"><area shape="RECT" coords="74,0,163,21" href="../upt/index.htm" webstripperlinkwas="http://www.ms.itb.ac.id/buku/unix-bookshelf/upt/index.htm" alt="UNIX Power Tools"><area shape="RECT" coords="164,0,257,21" href="../unixnut/index.htm" webstripperlinkwas="http://www.ms.itb.ac.id/buku/unix-bookshelf/unixnut/index.htm" alt="UNIX in a Nutshell"><area shape="RECT" coords="258,0,321,21" href="../vi/index.htm" webstripperlinkwas="http://www.ms.itb.ac.id/buku/unix-bookshelf/vi/index.htm" alt="Learning the vi Editor"><area shape="RECT" coords="322,0,378,21" href="index.htm" webstripperlinkwas="http://www.ms.itb.ac.id/buku/unix-bookshelf/sedawk/index.htm" alt="sed &amp; awk"><area shape="RECT" coords="379,0,438,21" href="../ksh/index.htm" webstripperlinkwas="http://www.ms.itb.ac.id/buku/unix-bookshelf/ksh/index.htm" alt="Learning the Korn Shell"><area shape="RECT" coords="439,0,514,21" href="../lrnunix/index.htm" webstripperlinkwas="http://www.ms.itb.ac.id/buku/unix-bookshelf/lrnunix/index.htm" alt="Learning the UNIX Operating System"></MAP
></DIV
></BODY
></HTML
>
