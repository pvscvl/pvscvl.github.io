<html><head><title>[Chapter 8] 8.2 Looping</TITLE
><meta name="DC.title" content="sed &amp; awk"><meta name="DC.creator" content="Dale Dougherty &amp; Arnold Robbins"><meta name="DC.publisher" content="O'Reilly &amp; Associates, Inc."><meta name="DC.date" content="1998-08-03T20:58:45Z"><meta name="DC.type" content="Text.Monograph"><meta name="DC.format" content="text/html" scheme="MIME"><meta name="DC.source" content="1-56592-225-5" scheme="ISBN"><meta name="DC.language" content="en-US"><meta name="generator" content="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><link rev="made" href="mailto:online-books@oreilly.com" title="Online Books Comments"><link rel="up" href="ch08_01.htm" webstripperlinkwas="ch08_01.htm" title="8. Conditionals, Loops, and Arrays"><link rel="prev" href="ch08_01.htm" webstripperlinkwas="ch08_01.htm" title="8.1 Conditional Statements"><link rel="next" href="ch08_03.htm" webstripperlinkwas="ch08_03.htm" title="8.3 Other Statements That Affect Flow Control"></HEAD
><body bgcolor="#FFFFFF" text="#000000"><div class="htmlnav"><h1><img src="gifs/smbanner.gif" webstripperlinkwas="gifs/smbanner.gif" alt="sed &amp; awk" usemap="#srchmap" border="0"></H1
><map name="srchmap"><area shape="RECT" coords="0,0,466,65" href="index.htm" webstripperlinkwas="http://www.ms.itb.ac.id/buku/unix-bookshelf/sedawk/index.htm" alt="sed &amp; awk"><area shape="RECT" coords="467,0,514,18" href="jobjects/fsearch.htm" webstripperlinkwas="jobjects/fsearch.htm" alt="Search this book"></MAP
><table width="515" border="0" cellspacing="0" cellpadding="0"><tr><td align="LEFT" valign="TOP" width="172"><a class="SECT1" href="ch08_01.htm" webstripperlinkwas="ch08_01.htm" title="8.1 Conditional Statements"><img src="../gifs/txtpreva.gif" webstripperlinkwas="../gifs/txtpreva.gif" alt="Previous: 8.1 Conditional Statements" border="0"></A
></TD
><td align="CENTER" valign="TOP" width="171"><b><font face="ARIEL,HELVETICA,HELV,SANSERIF" size="-1">Chapter 8<br>Conditionals, Loops, and Arrays</FONT
></B
></TD
><td align="RIGHT" valign="TOP" width="172"><a class="SECT1" href="ch08_03.htm" webstripperlinkwas="ch08_03.htm" title="8.3 Other Statements That Affect Flow Control"><img src="../gifs/txtnexta.gif" webstripperlinkwas="../gifs/txtnexta.gif" alt="Next: 8.3 Other Statements That Affect Flow Control" border="0"></A
></TD
></TR
></TABLE
>&nbsp;<hr align="LEFT" width="515" title="footer"></DIV
><div class="SECT1"><h2 class="sect1"><a class="title" name="SEDAWK-CH-8-SECT-2">8.2 Looping</A
></H2
><p class="para"><a class="indexterm" name="CH08.LOOP"></A
>A loop is a construct that allows us to perform one or more actions
again and again.  In awk, a loop can be specified using a
<kbd class="command">while</KBD
>, <kbd class="command">do</KBD
>, or
<kbd class="command">for</KBD
> statement.</P
><div class="sect2"><h3 class="sect2"><a class="title" name="SEDAWK-CH-8-SECT-2.1">8.2.1 While Loop</A
></H3
><p class="para"><a class="indexterm" name="AUTOID-6412"></A
>The syntax of a <kbd class="command">while</KBD
> loop is:</P
><blockquote class="literallayout"><p class="literallayout"><kbd class="command">while</KBD
> (<code class="replaceable"><i>condition</I
></CODE
>) <br>	<code class="replaceable"><i>action</I
></CODE
></P
></BLOCKQUOTE
><p class="para">The newline is optional after the right parenthesis.  The conditional
expression is evaluated at the top of the loop and, if true, the
action is performed.  If the expression is never true, the action is
not performed.  Typically, the conditional expression evaluates to
true and the action changes a value such that the conditional
expression eventually returns false and the loop is exited.  For
instance, if you wanted to perform an action four times, you could
write the following loop:</P
><p class="para"><blockquote class="screen"><pre class="screen">i = 1
while ( i &lt;= 4 ) {
	print $i
	++i 
}</PRE
></BLOCKQUOTE
></P
><p class="para">As in an <kbd class="command">if</KBD
> statement, an action consisting of more
than one statement must be enclosed in braces.  Note the role of each
statement.  The first statement assigns an initial value to
<kbd class="command">i</KBD
>.  The expression &quot;i &lt;= 4&quot; compares
<kbd class="command">i</KBD
> to 4 to determine if the action should be
executed.  The action consists of two statements, one that simply
prints the value of a field referenced as &quot;$i&quot; and another that
increments <kbd class="command">i</KBD
>.  <kbd class="command">i</KBD
> is a counter
variable and is used to keep track of how many times we go through the
loop.  If we did not increment the counter variable or if the
comparison would never evaluate to false (e.g., i &gt; 0), then the
action would be repeated without end.</P
></DIV
><div class="sect2"><h3 class="sect2"><a class="title" name="SEDAWK-CH-8-SECT-2.2">8.2.2 Do Loop</A
></H3
><p class="para"><a class="indexterm" name="CH08.DO"></A
>The <kbd class="command">do</KBD
> loop is a variation of the
<kbd class="command">while</KBD
> loop.  The syntax of a <kbd class="command">do</KBD
>
loop is:</P
><blockquote class="literallayout"><p class="literallayout"><kbd class="command">do</KBD
><br>	<code class="replaceable"><i>action</I
></CODE
><br><kbd class="command">while</KBD
> (<code class="replaceable"><i>condition</I
></CODE
>)</P
></BLOCKQUOTE
><p class="para">The newline is optional after <kbd class="command">do</KBD
>.  It is also optional
after <code class="replaceable"><i>action</I
></CODE
> providing the statement is terminated
by a semicolon. The main feature of this loop is that the conditional
expression appears <em class="emphasis">after</EM
> the action.  Thus, the action is
performed at least once. Look at the following <kbd class="command">do</KBD
> loop.</P
><p class="para"><blockquote class="screen"><pre class="screen">BEGIN {
	do {
		++x
		print x
	} while ( x &lt;= 4 )
}</PRE
></BLOCKQUOTE
></P
><p class="para">In this example, the value of <kbd class="command">x</KBD
> is set in the body
of the loop using the auto-increment operator.  The body of the loop
is executed once and the expression is evaluated.  In the previous
example of a <kbd class="command">while</KBD
> loop, the initial value of
<kbd class="command">i</KBD
> was set before the loop.  The expression was
evaluated first, then the body of the loop was executed once.  Note
the value of <kbd class="command">x</KBD
> when we run this example:</P
><p class="para"><blockquote class="screen"><pre class="screen">$ <code class="userinput"><b>awk -f do.awk</B
></CODE
>
1
2
3
4
5</PRE
></BLOCKQUOTE
></P
><p class="para">Before the conditional expression is first evaluated,
<kbd class="command">x</KBD
> is incremented to 1. (This relies on the fact
that all awk variables are initialized to zero.)  The body of the loop
is executed five times, not four; when <kbd class="command">x</KBD
> equals 4,
the conditional expression is true and the body of the loop is
executed again, incrementing <kbd class="command">x</KBD
> to 5 and printing
its value.  Only then is the conditional expression evaluated to false
and the loop exited.  By changing the operator from &quot;&lt;=&quot; to &quot;&lt;&quot;,
or less than, the body of the loop will be executed four times.</P
><p class="para">To keep in mind the difference between the <kbd class="command">do</KBD
> loop
and the <kbd class="command">while</KBD
> loop, remember that the
<kbd class="command">do</KBD
> loop always executes the body of the loop
<em class="emphasis">at least once</EM
>.  At the bottom of the procedure,
you decide if you need to execute it again.</P
><p class="para">For an example, let's look at a program that loops through the fields
of a record, referencing as many fields as necessary until their
cumulative value exceeds 100.  The reason we use a
<kbd class="command">do</KBD
> loop is that we will reference at least one of
the fields.  We add the value of the field to the total, and if the
total exceeds 100 we don't reference any other fields.  We reference
the second field only if the first field is less than 100.  Its value
is added to the total and if the total exceeds 100 then we exit the
loop.  If it is still less than 100, we execute the loop once again.</P
><p class="para"><blockquote class="screen"><pre class="screen">{
	total = i = 0
	do {
		++i
		total += $i
	} while ( total &lt;= 100 )
	print i, &quot;:&quot;, total
}</PRE
></BLOCKQUOTE
></P
><p class="para">The first line of the script initializes the values of two variables:
<kbd class="command">total</KBD
> and <kbd class="command">i</KBD
>.  The loop
increments the value of <kbd class="command">i</KBD
> and uses the field
operator to reference a particular field.  Each time through the loop,
it refers to a different field.  When the loop is executed for the
first time, the field reference gets the value of field one and
assigns it to the variable <kbd class="command">total</KBD
>.  The conditional
expression at the end of the loop evaluates whether
<kbd class="command">total</KBD
> exceeds 100.  If it does, the loop is exited.
Then the value of <kbd class="command">i</KBD
>, the number of fields that
we've referred to, and the total are printed.  (This script assumes
that each record totals at least 100; otherwise, we'd have to check
that <kbd class="command">i</KBD
> does not exceed the number of fields for the
record.  We construct such a test in the example presented in next
section to show the <kbd class="command">for</KBD
> loop.)</P
><p class="para">Here's a test file containing a series of numbers:</P
><p class="para"><blockquote class="screen"><pre class="screen">$ <code class="userinput"><b>cat test.do</B
></CODE
>
45 25 60 20
10 105 50 40
33 5 9 67
108 3 5 4</PRE
></BLOCKQUOTE
></P
><p class="para">Running the script on the test file produces the following:</P
><p class="para"><blockquote class="screen"><pre class="screen">$ <code class="userinput"><b>awk -f do.awk test.do</B
></CODE
>
3 : 130
2 : 115
4 : 114
1 : 108</PRE
></BLOCKQUOTE
></P
><p class="para">For each record, only as many fields are referenced as needed for the total
to exceed 100.</P
><a class="indexterm" name="AUTOID-6487"></A
></DIV
><div class="sect2"><h3 class="sect2"><a class="title" name="SEDAWK-CH-8-SECT-2.3">8.2.3 For Loop</A
></H3
><p class="para"><a class="indexterm" name="CH08.FOR"></A
>The <kbd class="command">for</KBD
> statement offers a more compact syntax that
achieves the same result as a <kbd class="command">while</KBD
> loop.  Although
it looks more difficult, this syntax is much easier to use and makes
sure that you provide all the required elements of a loop.  The syntax
of a <kbd class="command">for</KBD
> loop is:</P
><blockquote class="literallayout"><p class="literallayout"><kbd class="command">for</KBD
> ( <code class="replaceable"><i>set_counter</I
></CODE
> ; <code class="replaceable"><i>test_counter</I
></CODE
> ; <code class="replaceable"><i>increment_counter</I
></CODE
> ) <br>    <code class="replaceable"><i>action</I
></CODE
></P
></BLOCKQUOTE
><p class="para">The newline after the right parenthesis is optional.  The
<kbd class="command">for</KBD
> loop consists of three expressions:</P
><dl class="variablelist"><dt class="term"><em class="emphasis">set_counter</EM
></DT
><dd class="listitem"><p class="para">Sets the initial value for a counter variable.  <a class="indexterm" name="AUTOID-6510"></A
></P
></DD
><dt class="term"><em class="emphasis">test_counter</EM
></DT
><dd class="listitem"><p class="para">States a condition that is tested at the top of the loop.  </P
></DD
><dt class="term"><em class="emphasis">increment_counter</EM
></DT
><dd class="listitem"><p class="para">Increments the counter each time at the bottom of the loop,
right before testing the <em class="emphasis">test_counter</EM
> again. </P
></DD
></DL
><p class="para">Look at this rather common <kbd class="command">for</KBD
> loop that prints
each field on the input line.</P
><p class="para"><blockquote class="screen"><pre class="screen">for ( i = 1; i &lt;= NF; i++ )
	print $i</PRE
></BLOCKQUOTE
></P
><p class="para">As in the previous example, <kbd class="command">i</KBD
> is a variable that is
used to reference a field using the field operator.  The system
variable <kbd class="command">NF</KBD
> contains the number of fields for the
current input record, and we test it to determine if
<kbd class="command">i</KBD
> has reached the last field on the line.  The
value of <kbd class="command">NF</KBD
> is the maximum number of times to go
through the loop.  Inside the loop, the <kbd class="command">print</KBD
>
statement is executed, printing each field on its own line.  A script
using this construct can print each word on a line by itself, which
can then be run through <kbd class="command">sort | uniq -c</KBD
> to get word
distribution statistics for a file.</P
><p class="para">You can also write a loop to print from the last field to the first.</P
><p class="para"><blockquote class="screen"><pre class="screen">for ( i = NF; i &gt;= 1; i-- )
	print $i</PRE
></BLOCKQUOTE
></P
><p class="para">Each time through the loop the counter is decremented.  You could use
this to reverse the order of fields.</P
><p class="para">The <kbd class="command">grades.awk</KBD
> script that we showed earlier
determined the average of five grades.  We can make the script much
more useful by averaging any number of grades.  That is, if you were
to run this script throughout the school year, the number of grades to
average would increase.  Rather than revising the script to
accommodate the specific number of fields, we can write a generalized
script that loops to read however many fields there are.  Our
earlier version of the program calculated the average of 5 grades
using these two statements:</P
><p class="para"><blockquote class="screen"><pre class="screen">total = $2 + $3 + $4 + $5 + $6
avg = total / 5</PRE
></BLOCKQUOTE
></P
><p class="para">We can revise that using a <kbd class="command">for</KBD
> loop to sum each
field in the record.</P
><p class="para"><blockquote class="screen"><pre class="screen">total = 0
for (i = 2; i &lt;= NF; ++i)
      total += $i
avg = total / (NF - 1)</PRE
></BLOCKQUOTE
></P
><p class="para">We initialize the variable <kbd class="command">total</KBD
> each time because
we don't want its value to accumulate from one record to the next.  At
the beginning of the <kbd class="command">for</KBD
> loop, the counter
<kbd class="command">i</KBD
> is initialized to 2 because the first numeric
field is field 2.  Each time through the loop the value of the current
field is added to <kbd class="command">total</KBD
>.  When the last field has
been referenced (<kbd class="command">i</KBD
> is greater than
<kbd class="command">NF</KBD
>), we break out of the loop and calculate the
average.  For instance, if the record consists of 4 fields, the first
time through the loop, we assign the value of $2 to
<kbd class="command">total</KBD
>.  At the bottom of the loop,
<kbd class="command">i</KBD
> is incremented by 1, then compared to
<kbd class="command">NF</KBD
>, which is 4.  The expression evaluates to true
and <kbd class="command">total</KBD
> is incremented by the value of $3.</P
><p class="para">Notice how we divide the total by the number of fields minus 1 to
remove the student name from the count.  The parentheses are required
around &quot;NF - 1&quot; because the precedence of operators would otherwise
divide <kbd class="command">total</KBD
> by <kbd class="command">NF</KBD
> and then
subtract 1, instead of subtracting 1 from <kbd class="command">NF</KBD
> first.</P
><a class="indexterm" name="AUTOID-6561"></A
></DIV
><div class="sect2"><h3 class="sect2"><a class="title" name="SEDAWK-CH-8-SECT-2.4">8.2.4 Deriving Factorials</A
></H3
><p class="para"><a class="indexterm" name="CH08.FACT"></A
><a class="indexterm" name="CH08.FACT2"></A
>The factorial of a number is the product of successively multiplying
that number by one less than that number.  The factorial of 4 is 4
&#215; 3 &#215; 2 &#215; 1, or 24.  The factorial of 5 is 5 times
the factorial of 4 or 5 &#215; 24, or 120.  Deriving a factorial for a
given number can be expressed using a loop as follows:</P
><p class="para"><blockquote class="screen"><pre class="screen">fact = number
for (x = number - 1 ; x &gt; 1; x--)
	fact *= x</PRE
></BLOCKQUOTE
></P
><p class="para">where <kbd class="command">number</KBD
> is the number for which we will derive
the factorial <kbd class="command">fact</KBD
>.  Let's say that
<kbd class="command">number</KBD
> equals 5.  The first time through the loop
<kbd class="command">x</KBD
> is equal to 4.  The action evaluates &quot;5 * 4&quot; and
assigns the value to <kbd class="command">fact</KBD
>.  The next time through
the loop, <kbd class="command">x</KBD
> is 3 and 20 is multiplied by it.  We go
through the loop until <kbd class="command">x</KBD
> equals 1.</P
><p class="para">Here is the above fragment incorporated into a standalone script
that prompts the user for a number and then prints the factorial
of that number.</P
><p class="para"><blockquote class="screen"><pre class="screen">awk '# factorial: return factorial of user-supplied number
BEGIN {
	# prompt user; use printf, not print, to avoid the newline
	printf(&quot;Enter number: &quot;)
}

# check that user enters a number
$1 ~ /^[0-9]+$/ { 
	# assign value of $1 to number &amp; fact
	number = $1
	if (number == 0)
		fact = 1
	else
		fact = number
	# loop to multiply fact*x until x = 1
	for (x = number - 1; x &gt; 1; x--)
		fact *= x
	printf(&quot;The factorial of %d is %g\n&quot;, number, fact)
	# exit -- saves user from typing CRTL-D.
	exit
}

# if not a number, prompt again.
{ printf(&quot;\nInvalid entry. Enter a number: &quot;) 
}' -</PRE
></BLOCKQUOTE
></P
><p class="para">This is an interesting example of a main input loop that prompts for
input and reads the reply from standard input.  The
<kbd class="command">BEGIN</KBD
> rule is used to prompt the user to enter a
number.  Because we have specified that input is to come not from a
file but from standard input, the program will halt after putting out
the prompt and then wait for the user to type a number.  The first
rule checks that a number has been entered.  If not, the second rule
will be applied, prompting the user again to re-enter a number.  We
set up an input loop that will continue to read from standard input
until a valid entry is found.  See the <kbd class="command">lookup</KBD
>
program in the next section for another example of constructing an
input loop.</P
><p class="para">Here's an example of how the <kbd class="command">factorial</KBD
> program works:</P
><p class="para"><blockquote class="screen"><pre class="screen">$ <code class="userinput"><b>factorial</B
></CODE
>
Enter number: <code class="userinput"><b>5</B
></CODE
>
The factorial of 5 is 120</PRE
></BLOCKQUOTE
></P
><p class="para">Note that the result uses &quot;%g&quot; as the conversion specification format
in the <kbd class="command">printf</KBD
> statement.  This permits floating
point notation to be used to express very large numbers.  Look at the
following example:</P
><p class="para"><blockquote class="screen"><pre class="screen">$<code class="userinput"><b> factorial</B
></CODE
>
Enter number: <code class="userinput"><b>33</B
></CODE
>
The factorial of 33 is 8.68332e+36</PRE
></BLOCKQUOTE
></P
><a class="indexterm" name="AUTOID-6598"></A
><a class="indexterm" name="AUTOID-6599"></A
></DIV
><a class="indexterm" name="AUTOID-6600"></A
></DIV
><div class="htmlnav"><p></P
><hr align="LEFT" width="515" title="footer"><table width="515" border="0" cellspacing="0" cellpadding="0"><tr><td align="LEFT" valign="TOP" width="172"><a class="SECT1" href="ch08_01.htm" webstripperlinkwas="ch08_01.htm" title="8.1 Conditional Statements"><img src="../gifs/txtpreva.gif" webstripperlinkwas="../gifs/txtpreva.gif" alt="Previous: 8.1 Conditional Statements" border="0"></A
></TD
><td align="CENTER" valign="TOP" width="171"><a class="book" href="index.htm" webstripperlinkwas="http://www.ms.itb.ac.id/buku/unix-bookshelf/sedawk/index.htm" title="sed &amp; awk"><img src="../gifs/txthome.gif" webstripperlinkwas="../gifs/txthome.gif" alt="sed &amp; awk" border="0"></A
></TD
><td align="RIGHT" valign="TOP" width="172"><a class="SECT1" href="ch08_03.htm" webstripperlinkwas="ch08_03.htm" title="8.3 Other Statements That Affect Flow Control"><img src="../gifs/txtnexta.gif" webstripperlinkwas="../gifs/txtnexta.gif" alt="Next: 8.3 Other Statements That Affect Flow Control" border="0"></A
></TD
></TR
><tr><td align="LEFT" valign="TOP" width="172">8.1 Conditional Statements</TD
><td align="CENTER" valign="TOP" width="171"><a class="index" href="index/idx_0.htm" webstripperlinkwas="index/idx_0.htm" title="Book Index"><img src="../gifs/index.gif" webstripperlinkwas="../gifs/index.gif" alt="Book Index" border="0"></A
></TD
><td align="RIGHT" valign="TOP" width="172">8.3 Other Statements That Affect Flow Control</TD
></TR
></TABLE
><hr align="LEFT" width="515" title="footer"><img src="../gifs/smnavbar.gif" webstripperlinkwas="../gifs/smnavbar.gif" usemap="#map" border="0" alt="The UNIX CD Bookshelf Navigation"><map name="map"><area shape="RECT" coords="0,0,73,21" href="../index.html" webstripperlinkwas="http://www.ms.itb.ac.id/buku/unix-bookshelf/index.html" alt="The UNIX CD Bookshelf"><area shape="RECT" coords="74,0,163,21" href="../upt/index.htm" webstripperlinkwas="http://www.ms.itb.ac.id/buku/unix-bookshelf/upt/index.htm" alt="UNIX Power Tools"><area shape="RECT" coords="164,0,257,21" href="../unixnut/index.htm" webstripperlinkwas="http://www.ms.itb.ac.id/buku/unix-bookshelf/unixnut/index.htm" alt="UNIX in a Nutshell"><area shape="RECT" coords="258,0,321,21" href="../vi/index.htm" webstripperlinkwas="http://www.ms.itb.ac.id/buku/unix-bookshelf/vi/index.htm" alt="Learning the vi Editor"><area shape="RECT" coords="322,0,378,21" href="index.htm" webstripperlinkwas="http://www.ms.itb.ac.id/buku/unix-bookshelf/sedawk/index.htm" alt="sed &amp; awk"><area shape="RECT" coords="379,0,438,21" href="../ksh/index.htm" webstripperlinkwas="http://www.ms.itb.ac.id/buku/unix-bookshelf/ksh/index.htm" alt="Learning the Korn Shell"><area shape="RECT" coords="439,0,514,21" href="../lrnunix/index.htm" webstripperlinkwas="http://www.ms.itb.ac.id/buku/unix-bookshelf/lrnunix/index.htm" alt="Learning the UNIX Operating System"></MAP
></DIV
></BODY
></HTML
>
