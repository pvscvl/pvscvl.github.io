<html><head><title>[Chapter 5] 5.3 Substitution</TITLE
><meta name="DC.title" content="sed &amp; awk"><meta name="DC.creator" content="Dale Dougherty &amp; Arnold Robbins"><meta name="DC.publisher" content="O'Reilly &amp; Associates, Inc."><meta name="DC.date" content="1998-08-03T20:53:31Z"><meta name="DC.type" content="Text.Monograph"><meta name="DC.format" content="text/html" scheme="MIME"><meta name="DC.source" content="1-56592-225-5" scheme="ISBN"><meta name="DC.language" content="en-US"><meta name="generator" content="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><link rev="made" href="mailto:online-books@oreilly.com" title="Online Books Comments"><link rel="up" href="ch05_01.htm" webstripperlinkwas="ch05_01.htm" title="5. Basic sed Commands"><link rel="prev" href="ch05_02.htm" webstripperlinkwas="ch05_02.htm" title="5.2 Comment"><link rel="next" href="ch05_04.htm" webstripperlinkwas="ch05_04.htm" title="5.4 Delete"></HEAD
><body bgcolor="#FFFFFF" text="#000000"><div class="htmlnav"><h1><img src="gifs/smbanner.gif" webstripperlinkwas="gifs/smbanner.gif" alt="sed &amp; awk" usemap="#srchmap" border="0"></H1
><map name="srchmap"><area shape="RECT" coords="0,0,466,65" href="index.htm" webstripperlinkwas="http://www.ms.itb.ac.id/buku/unix-bookshelf/sedawk/index.htm" alt="sed &amp; awk"><area shape="RECT" coords="467,0,514,18" href="jobjects/fsearch.htm" webstripperlinkwas="jobjects/fsearch.htm" alt="Search this book"></MAP
><table width="515" border="0" cellspacing="0" cellpadding="0"><tr><td align="LEFT" valign="TOP" width="172"><a class="SECT1" href="ch05_02.htm" webstripperlinkwas="ch05_02.htm" title="5.2 Comment"><img src="../gifs/txtpreva.gif" webstripperlinkwas="../gifs/txtpreva.gif" alt="Previous: 5.2 Comment" border="0"></A
></TD
><td align="CENTER" valign="TOP" width="171"><b><font face="ARIEL,HELVETICA,HELV,SANSERIF" size="-1">Chapter 5<br>Basic sed Commands</FONT
></B
></TD
><td align="RIGHT" valign="TOP" width="172"><a class="SECT1" href="ch05_04.htm" webstripperlinkwas="ch05_04.htm" title="5.4 Delete"><img src="../gifs/txtnexta.gif" webstripperlinkwas="../gifs/txtnexta.gif" alt="Next: 5.4 Delete" border="0"></A
></TD
></TR
></TABLE
>&nbsp;<hr align="LEFT" width="515" title="footer"></DIV
><div class="SECT1"><h2 class="sect1"><a class="title" name="SEDAWK-CH-5-SECT-3">5.3 Substitution</A
></H2
><p class="para"><a class="indexterm" name="CH05.SUB1"></A
><a class="indexterm" name="CH05.SUB2"></A
><a class="indexterm" name="AUTOID-3245"></A
>We have already demonstrated many uses of the substitute command.
Let's look carefully at its syntax:</P
><blockquote class="literallayout"><p class="literallayout">[<code class="replaceable"><i>address</I
></CODE
>]<kbd class="command">s</KBD
>/<code class="replaceable"><i>pattern</I
></CODE
>/<code class="replaceable"><i>replacement</I
></CODE
>/<code class="replaceable"><i>flags</I
></CODE
></P
></BLOCKQUOTE
><p class="para">where the <em class="emphasis">flags</EM
> that modify the substitution are:</P
><dl class="variablelist"><dt class="term"><kbd class="command">n</KBD
></DT
><dd class="listitem"><p class="para">A number (1 to 512) indicating that a replacement should be made for
only the <em class="emphasis">n</EM
>th occurrence of the<a class="indexterm" name="AUTOID-3263"></A
><a class="indexterm" name="AUTOID-3265"></A
>
<em class="emphasis">pattern</EM
>.</P
></DD
><dt class="term"><kbd class="command">g</KBD
></DT
><dd class="listitem"><p class="para">Make changes globally on all occurrences in the pattern space.  Normally
only the first occurrence is replaced.<a class="indexterm" name="AUTOID-3274"></A
><a class="indexterm" name="AUTOID-3276"></A
></P
></DD
><dt class="term"><kbd class="command">p</KBD
></DT
><dd class="listitem"><p class="para">Print the contents of the pattern space.<a class="indexterm" name="AUTOID-3284"></A
><a class="indexterm" name="AUTOID-3286"></A
></P
></DD
><dt class="term"><kbd class="command">w</KBD
> <em class="emphasis">file</EM
></DT
><dd class="listitem"><p class="para">Write the contents of the pattern space to <em class="emphasis">file</EM
>.<a class="indexterm" name="AUTOID-3296"></A
><a class="indexterm" name="AUTOID-3298"></A
></P
></DD
></DL
><p class="para">The substitute command is applied to the lines matching the
<em class="emphasis">address</EM
>.  If no address is specified, it is
applied to all lines that match the <em class="emphasis">pattern</EM
>, a
regular expression.  If a regular expression is supplied as an
address, and no <em class="emphasis">pattern</EM
> is specified, the
substitute command matches what is matched by the address.  This can
be useful when the substitute command is one of multiple commands
applied at the same address.  For an example,
see the section &quot;Checking Out Reference Pages&quot; later in this chapter.</P
><p class="para"><a class="indexterm" name="AUTOID-3306"></A
><a class="indexterm" name="AUTOID-3309"></A
><a class="indexterm" name="AUTOID-3312"></A
><a class="indexterm" name="AUTOID-3315"></A
><a class="indexterm" name="AUTOID-3318"></A
>Unlike addresses, which require a slash (/) as a delimiter,
the regular expression can be delimited by any character except
a newline.  Thus, if the pattern contained slashes, you could
choose another character, such as an exclamation mark, as the
delimiter.</P
><blockquote class="screen"><pre class="screen">s!/usr/mail!/usr2/mail!</PRE
></BLOCKQUOTE
><p class="para">Note that the delimiter appears three times and is required after the
<em class="emphasis">replacement</EM
>.  Regardless of which delimiter
you use, if it does appear in the regular expression, or in the
replacement text, use a backslash (\) to escape it.</P
><p class="para"><a class="indexterm" name="AUTOID-3325"></A
>Once upon a time, computers stored text in fixed-length records.  A
line ended after so many characters (typically 80), and then the next
line started. There was no explicit character in the data to mark the
end of one line and the beginning of the next; every line had the same
(fixed) number of characters.  Modern systems are more flexible; they
use a special character (referred to as <em class="emphasis">newline</EM
>)
to mark the end of the line.  This allows lines to be of arbitrary[3]
length.</P
><blockquote class="footnote"><p class="para">[3] Well, more or less. Many UNIX programs have internal limits on the
length of the lines that they will process. Most GNU programs, though,
do not have such limits.</P
></BLOCKQUOTE
><p class="para">Since newline is just another character when stored internally, a
regular expression can use &quot;\n&quot; to match an
<em class="emphasis">embedded</EM
> newline.  This occurs, as you will see
in the next chapter, in the special case when another line is appended
to the current line in the pattern space.  (See
<a class="xref" href="ch02_01.htm" webstripperlinkwas="ch02_01.htm" title="Understanding Basic Operations">Chapter 2, Understanding Basic Operations</A
>, for a discussion of line addressing and 
<a class="xref" href="ch03_01.htm" webstripperlinkwas="ch03_01.htm" title="Understanding Regular Expression Syntax">Chapter 3, Understanding Regular Expression Syntax</A
>, for a discussion of regular expression syntax.)</P
><p class="para">The <em class="emphasis">replacement</EM
> is a string of characters that
will replace what is matched by the regular expression.  (See
the section &quot;The Extent of the Match&quot; in Chapter 3.)  In the
<code class="replaceable"><i>replacement</I
></CODE
> section, only the following
characters have special meaning:</P
><dl class="variablelist"><dt class="term">&amp;</DT
><dd class="listitem"><p class="para">Replaced by the string matched by the regular expression. <a class="indexterm" name="AUTOID-3342"></A
><a class="indexterm" name="AUTOID-3345"></A
></P
></DD
><dt class="term">\<em class="emphasis">n</EM
></DT
><dd class="listitem"><p class="para">Matches the <em class="emphasis">n</EM
>th substring
(<em class="emphasis">n</EM
> is a single digit) previously specified
in the <code class="replaceable"><i>pattern</I
></CODE
> using &quot;\(&quot; and &quot;\)&quot;.</P
></DD
><dt class="term">\</DT
><dd class="listitem"><p class="para"><a class="indexterm" name="AUTOID-3360"></A
><a class="indexterm" name="AUTOID-3363"></A
>Used to escape the ampersand (&amp;), the backslash (\), and the
substitution command's delimiter when they are used literally in the
replacement section.  In addition, it can be used to escape the
newline and create a multiline <em class="emphasis">replacement</EM
>
string.</P
></DD
></DL
><p class="para">Thus, besides metacharacters in regular expressions, sed also has
metacharacters in the replacement.  See
the next section, &quot;Replacement Metacharacters,&quot; for examples of using them.</P
><p class="para"><a class="indexterm" name="AUTOID-3369"></A
><em class="emphasis">Flags</EM
> can be used in combination where it
makes sense.  For instance, <kbd class="command">gp</KBD
> makes the
substitution globally on the line and prints the line.  The global
flag is by far the most commonly used.  Without it, the replacement is
made only for the first occurrence on the line.  The print flag and
the write flag both provide the same functionality as the print and
write commands (which are discussed later in this chapter) with one
important difference.  These actions are contingent upon a successful<a class="indexterm" name="AUTOID-3373"></A
><a class="indexterm" name="AUTOID-3376"></A
><a class="indexterm" name="AUTOID-3379"></A
><a class="indexterm" name="AUTOID-3382"></A
><a class="indexterm" name="AUTOID-3384"></A
><a class="indexterm" name="AUTOID-3386"></A
>
substitution occurring.  In other words, if the replacement is made,
the line is printed or written to file.  Because the default action is
to pass through all lines, regardless of whether any action is taken,
the print and write flags are typically used when the default output
is suppressed (the <i class="option">-n</I
> option).  In addition, if a
script contains multiple substitute commands that match the same line,
multiple copies of that line will be printed or written to file.</P
><p class="para"><a class="indexterm" name="AUTOID-3390"></A
><a class="indexterm" name="AUTOID-3392"></A
>The numeric flag can be used in the rare instances where the
regular expression repeats itself on a line and the replacement must
be made for only one of those occurrences by position.  For instance,
a line, perhaps containing <kbd class="command">tbl</KBD
> input, might contain
multiple tabs.  Let's say that there are three tabs per line, and
you'd like to replace the second tab with &quot;&gt;&quot;.  The
following substitute command would do it:</P
><blockquote class="screen"><pre class="screen">s/<img src="../chars/bull.gif" webstripperlinkwas="../chars/bull.gif" alt="&#183;">/&gt;/2</PRE
></BLOCKQUOTE
><p class="para">&quot;<img src="../chars/bull.gif" webstripperlinkwas="../chars/bull.gif" alt="&#183;">&quot; represents an actual tab character, which is otherwise
invisible on the screen.  If the input is a one-line file such as the
following:</P
><blockquote class="screen"><pre class="screen">Column1<img src="../chars/bull.gif" webstripperlinkwas="../chars/bull.gif" alt="&#183;">Column2<img src="../chars/bull.gif" webstripperlinkwas="../chars/bull.gif" alt="&#183;">Column3<img src="../chars/bull.gif" webstripperlinkwas="../chars/bull.gif" alt="&#183;">Column4</PRE
></BLOCKQUOTE
><p class="para">the output produced by running the script on this file will be:</P
><blockquote class="screen"><pre class="screen">Column1<img src="../chars/bull.gif" webstripperlinkwas="../chars/bull.gif" alt="&#183;">Column2&gt;Column3<img src="../chars/bull.gif" webstripperlinkwas="../chars/bull.gif" alt="&#183;">Column4</PRE
></BLOCKQUOTE
><p class="para">Note that without the numeric flag, the substitute command would
replace only the first tab.  (Therefore &quot;1&quot; can be considered the
default numeric flag.)</P
><div class="sect2"><h3 class="sect2"><a class="title" name="SEDAWK-CH-5-SECT-3.1">5.3.1 Replacement Metacharacters</A
></H3
><p class="para"><a class="indexterm" name="CH05.REP1"></A
><a class="indexterm" name="CH05.REP2"></A
><a class="indexterm" name="CH05.REP3"></A
>The replacement metacharacters are backslash (\), ampersand (&amp;),
and \<em class="emphasis">n</EM
>.  The backslash is generally
used to escape the other metacharacters but it is also used to include
a newline in a replacement string.<a class="indexterm" name="AUTOID-3414"></A
><a class="indexterm" name="AUTOID-3417"></A
><a class="indexterm" name="AUTOID-3420"></A
></P
><p class="para">We can do a variation on the previous example to replace the second
tab on each line with a newline.</P
><blockquote class="screen"><pre class="screen">s/<img src="../chars/bull.gif" webstripperlinkwas="../chars/bull.gif" alt="&#183;">/\
/2</PRE
></BLOCKQUOTE
><p class="para">Note that no spaces are permitted after the backslash.  This script
produces the following result:</P
><blockquote class="screen"><pre class="screen">Column1<img src="../chars/bull.gif" webstripperlinkwas="../chars/bull.gif" alt="&#183;">Column2
Column3<img src="../chars/bull.gif" webstripperlinkwas="../chars/bull.gif" alt="&#183;">Column4</PRE
></BLOCKQUOTE
><p class="para">Another example comes from the conversion of a file for
<kbd class="command">troff</KBD
> to an ASCII input format for Ventura
Publisher.  It converts the following line for
<kbd class="command">troff</KBD
>:</P
><blockquote class="screen"><pre class="screen">.Ah &quot;Major Heading&quot;</PRE
></BLOCKQUOTE
><p class="para">to a similar line for Ventura Publisher:</P
><blockquote class="screen"><pre class="screen">@A HEAD = Major Heading</PRE
></BLOCKQUOTE
><p class="para">The twist in this problem is that the line needs to be preceded and followed
by blank lines.  It is an example of writing a multiline replacement
string.</P
><blockquote class="screen"><pre class="screen">/^\.Ah/{
s/\.Ah */\
\
@A HEAD = /
s/&quot;//g
s/$/\
/    
}</PRE
></BLOCKQUOTE
><p class="para">The first substitute command replaces &quot;.Ah&quot; with two newlines
and &quot;@A HEAD =&quot;.  A backslash at the end of the line is necessary to escape
the newline.  The second substitution removes the quotation marks.
The last command matches the end of line in the pattern space (not the
embedded newlines) and adds a newline after it.</P
><p class="para"><a class="indexterm" name="AUTOID-3437"></A
><a class="indexterm" name="AUTOID-3440"></A
>In the next example, the backslash is used to escape the ampersand,
which appears literally in the replacement section.</P
><blockquote class="screen"><pre class="screen">s/ORA/O'Reilly \&amp; Associates, Inc./g</PRE
></BLOCKQUOTE
><p class="para">It's easy to forget about the ampersand appearing literally in the
replacement string.  If we had not escaped it in this example, the
output would have been &quot;O'Reilly ORA Associates, Inc.&quot;</P
><p class="para">As a metacharacter, the ampersand (&amp;) represents the extent of the
pattern match, not the line that was matched.  You might use the
ampersand to match a word and surround it by <kbd class="command">troff</KBD
>
requests.  The following example surrounds a word with point-size
requests:</P
><blockquote class="screen"><pre class="screen">s/UNIX/\\s-2&amp;\\s0/g</PRE
></BLOCKQUOTE
><p class="para">Because backslashes are also replacement metacharacters, two
backslashes are necessary to output a single backslash.  The &quot;&amp;&quot;
in the replacement string refers to &quot;UNIX.&quot;  If the input line is:</P
><blockquote class="screen"><pre class="screen">on the UNIX Operating System.</PRE
></BLOCKQUOTE
><p class="para">then the substitute command produces:</P
><blockquote class="screen"><pre class="screen">on the \s-2UNIX\s0 Operating System.</PRE
></BLOCKQUOTE
><p class="para">The ampersand is particularly useful when the regular expression
matches variations of a word.  It allows you to specify a variable
replacement string that corresponds to what was actually matched.  For
instance, let's say that you wanted to surround with parentheses any
cross reference to a numbered section in a document.  In other words,
any reference such as &quot;See Section 1.4&quot; or &quot;See Section 12.9&quot; should
appear in parentheses, as &quot;(See Section 12.9).&quot;  A regular expression
can match the different combination of numbers, so we use &quot;&amp;&quot; in
the replacement string and surround whatever was matched.</P
><blockquote class="screen"><pre class="screen">s/See Section [1-9][0-9]*\.[1-9][0-9]*/(&amp;)/</PRE
></BLOCKQUOTE
><p class="para">The ampersand makes it possible to reference the entire match in the
replacement string.</P
><p class="para"><a class="indexterm" name="AUTOID-3456"></A
><a class="indexterm" name="AUTOID-3459"></A
><a class="indexterm" name="AUTOID-3462"></A
><a class="indexterm" name="AUTOID-3465"></A
><a class="indexterm" name="AUTOID-3468"></A
>Now let's look at the metacharacters that allow us to select any
individual portion of a string that is matched and recall it in the
replacement string.  A pair of escaped parentheses are used in sed to
enclose any part of a regular expression and save it for recall.  Up
to nine &quot;saves&quot; are permitted for a single line.
&quot;<em class="emphasis">\n</EM
>&quot; is used to recall the portion of the
match that was saved, where <em class="emphasis">n</EM
> is a number
from 1 to 9 referencing a particular &quot;saved&quot; string in order of use.</P
><p class="para">For example, to put the section numbers in boldface when they appeared as a
cross reference, we could write the following substitution:</P
><blockquote class="screen"><pre class="screen">s/\(See Section \)\([1-9][0-9]*\.[1-9][0-9]*\)/\1\\fB\2\\fP/</PRE
></BLOCKQUOTE
><p class="para">Two pairs of escaped parentheses are specified.  The first captures
&quot;See Section<img src="../chars/squ.gif" webstripperlinkwas="../chars/squ.gif" alt=" ">&quot; (because this is a fixed string, it could have been
simply retyped in the replacement string).  The second captures the
section number.  The replacement string recalls the first saved
substring as &quot;\1&quot; and the second as &quot;\2,&quot; which is surrounded by
bold-font requests.</P
><p class="para">We can use a similar technique to match parts of a line and swap them.
For instance, let's say there are two parts of a line separated by a
colon.  We can match each part, putting them within escaped
parentheses and swapping them in the replacement.</P
><blockquote class="screen"><pre class="screen">$<code class="userinput"><b> cat test1</B
></CODE
>
first:second
one:two
$ <code class="userinput"><b>sed  's/\(.*\):\(.*\)/\2:\1/' test1</B
></CODE
>
second:first
two:one</PRE
></BLOCKQUOTE
><p class="para">The larger point is that you can recall a saved substring in any order,
and multiple times, as you'll see in the next example. </P
><div class="sect3"><h4 class="sect3"><a class="title" name="SEDAWK-CH-5-SECT-3.1.1">5.3.1.1 Correcting index entries</A
></H4
><p class="para">Later, in the awk section of this book, we will present a program for
formatting an index, such as the one for this book.  The first step in
creating an index is to place index codes in the document files.  We
use an index macro named .XX, which takes a single argument, the index
entry.  A sample index entry might be:</P
><blockquote class="screen"><pre class="screen">.XX &quot;sed, substitution command&quot;</PRE
></BLOCKQUOTE
><p class="para">Each index entry appears on a line by itself.  When you run an index,
you get a collection of index entries with page numbers that are then
sorted and merged in a list.  An editor poring over that list will
typically find errors and inconsistencies that need to be corrected.
It is, in short, a pain to have to track down the file where an index
entry resides and then make the correction, particularly when there
are dozens of entries to be corrected.</P
><p class="para">Sed can be a great help in making these edits across a group of files.
One can simply create a list of edits in a sed script and then run it
on all the files.  A key point is that the substitute command needs an
address that limits it to lines beginning &quot;.XX&quot;.  Your script should
not make changes in the text itself.</P
><p class="para">Let's say that we wanted to change the index entry above to &quot;sed,
substitute command.&quot;  The following command would do it:</P
><blockquote class="screen"><pre class="screen">/^\.XX /s/sed, substitution command/sed, substitute command/</PRE
></BLOCKQUOTE
><p class="para">The address matches all lines that begin with &quot;.XX &quot; and only on those
lines does it attempt to make the replacement.  You might wonder, why
not specify a shorter regular expression?  For example:</P
><blockquote class="screen"><pre class="screen">/^\.XX /s/substitution/substitute/</PRE
></BLOCKQUOTE
><p class="para">The answer is simply that there could be other entries which use the
word &quot;substitution&quot; correctly and which we would not want to change.</P
><p class="para">We can go a step further and provide a shell script that creates a
list of index entries prepared for editing as a series of sed
substitute commands.</P
><blockquote class="screen"><pre class="screen">#! /bin/sh
# index.edit -- compile list of index entries for editing.
grep &quot;^\.XX&quot; $* | sort -u |
sed '
s/^\.XX \(.*\)$/\/^\\.XX \/s\/\1\/\1\//'</PRE
></BLOCKQUOTE
><p class="para">The <kbd class="command">index.edit</KBD
> shell script
uses <b class="emphasis.bold">grep</B
> to extract
all lines containing index entries from any number of files specified
on the command line.  It passes this list through
<kbd class="command">sort</KBD
> which, with the <i class="option">-u</I
> option,
sorts and removes duplicate entries.  The list is then piped to sed,
and the one-line sed script builds a substitution command.</P
><p class="para">Let's look at it more closely.  Here's just the regular expression:</P
><blockquote class="screen"><pre class="screen">^\.XX \(.*\)$</PRE
></BLOCKQUOTE
><p class="para">It matches the entire line, saving the index entry for recall.  Here's
just the replacement string:</P
><blockquote class="screen"><pre class="screen">\/^\\.XX \/s\/\1\/\1\/</PRE
></BLOCKQUOTE
><p class="para">It generates a substitute command beginning with an address: a slash,
followed by two backslashes&nbsp;- to output one backslash to protect
the dot in the &quot;.XX&quot; that follows&nbsp;- then comes a space, then
another slash to complete the address.  Next we output an &quot;s&quot; followed
by a slash, and then recall the saved portion to be used as a regular
expression.  That is followed by another slash and again we
recall the saved substring as the replacement string.  A slash finally
ends the command.</P
><p class="para">When the <kbd class="command">index.edit</KBD
> script is run on a file, it
creates a listing similar to this:</P
><blockquote class="screen"><pre class="screen">$ <code class="userinput"><b>index.edit ch05</B
></CODE
>
/^\.XX /s/&quot;append command(a)&quot;/&quot;append command(a)&quot;/
/^\.XX /s/&quot;change command&quot;/&quot;change command&quot;/
/^\.XX /s/&quot;change command(c)&quot;/&quot;change command(c)&quot;/
/^\.XX /s/&quot;commands:sed, summary of&quot;/&quot;commands:sed, summary of&quot;/
/^\.XX /s/&quot;delete command(d)&quot;/&quot;delete command(d)&quot;/
/^\.XX /s/&quot;insert command(i)&quot;/&quot;insert command(i)&quot;/
/^\.XX /s/&quot;line numbers:printing&quot;/&quot;line numbers:printing&quot;/
/^\.XX /s/&quot;list command(l)&quot;/&quot;list command(l)&quot;/</PRE
></BLOCKQUOTE
><p class="para">This output could be captured in a file.  Then you can delete the
entries that don't need to change and you can make changes by editing
the replacement string.  At that point, you can use this file as a sed
script to correct the index entries in all document files.</P
><p class="para">When doing a large book with lots of entries, you
might use <kbd class="command">grep</KBD
> again to extract particular entries
from the output of <kbd class="command">index.edit</KBD
> and direct them into
their own file for editing.  This saves you from having to wade through
numerous entries.</P
><p class="para">There is one small failing in this program.  It should look for
metacharacters that might appear literally in index entries and
protect them in regular expressions.  For instance, if an index entry
contains an asterisk, it will not be interpreted as such, but as a
metacharacter.  To make that change effectively requires the use of
several advanced commands, so we'll put off improving this script until
the next chapter.</P
></DIV
><a class="indexterm" name="AUTOID-3512"></A
><a class="indexterm" name="AUTOID-3513"></A
><a class="indexterm" name="AUTOID-3514"></A
></DIV
><a class="indexterm" name="AUTOID-3515"></A
><a class="indexterm" name="AUTOID-3516"></A
></DIV
><div class="htmlnav"><p></P
><hr align="LEFT" width="515" title="footer"><table width="515" border="0" cellspacing="0" cellpadding="0"><tr><td align="LEFT" valign="TOP" width="172"><a class="SECT1" href="ch05_02.htm" webstripperlinkwas="ch05_02.htm" title="5.2 Comment"><img src="../gifs/txtpreva.gif" webstripperlinkwas="../gifs/txtpreva.gif" alt="Previous: 5.2 Comment" border="0"></A
></TD
><td align="CENTER" valign="TOP" width="171"><a class="book" href="index.htm" webstripperlinkwas="http://www.ms.itb.ac.id/buku/unix-bookshelf/sedawk/index.htm" title="sed &amp; awk"><img src="../gifs/txthome.gif" webstripperlinkwas="../gifs/txthome.gif" alt="sed &amp; awk" border="0"></A
></TD
><td align="RIGHT" valign="TOP" width="172"><a class="SECT1" href="ch05_04.htm" webstripperlinkwas="ch05_04.htm" title="5.4 Delete"><img src="../gifs/txtnexta.gif" webstripperlinkwas="../gifs/txtnexta.gif" alt="Next: 5.4 Delete" border="0"></A
></TD
></TR
><tr><td align="LEFT" valign="TOP" width="172">5.2 Comment</TD
><td align="CENTER" valign="TOP" width="171"><a class="index" href="index/idx_0.htm" webstripperlinkwas="index/idx_0.htm" title="Book Index"><img src="../gifs/index.gif" webstripperlinkwas="../gifs/index.gif" alt="Book Index" border="0"></A
></TD
><td align="RIGHT" valign="TOP" width="172">5.4 Delete</TD
></TR
></TABLE
><hr align="LEFT" width="515" title="footer"><img src="../gifs/smnavbar.gif" webstripperlinkwas="../gifs/smnavbar.gif" usemap="#map" border="0" alt="The UNIX CD Bookshelf Navigation"><map name="map"><area shape="RECT" coords="0,0,73,21" href="../index.html" webstripperlinkwas="http://www.ms.itb.ac.id/buku/unix-bookshelf/index.html" alt="The UNIX CD Bookshelf"><area shape="RECT" coords="74,0,163,21" href="../upt/index.htm" webstripperlinkwas="http://www.ms.itb.ac.id/buku/unix-bookshelf/upt/index.htm" alt="UNIX Power Tools"><area shape="RECT" coords="164,0,257,21" href="../unixnut/index.htm" webstripperlinkwas="http://www.ms.itb.ac.id/buku/unix-bookshelf/unixnut/index.htm" alt="UNIX in a Nutshell"><area shape="RECT" coords="258,0,321,21" href="../vi/index.htm" webstripperlinkwas="http://www.ms.itb.ac.id/buku/unix-bookshelf/vi/index.htm" alt="Learning the vi Editor"><area shape="RECT" coords="322,0,378,21" href="index.htm" webstripperlinkwas="http://www.ms.itb.ac.id/buku/unix-bookshelf/sedawk/index.htm" alt="sed &amp; awk"><area shape="RECT" coords="379,0,438,21" href="../ksh/index.htm" webstripperlinkwas="http://www.ms.itb.ac.id/buku/unix-bookshelf/ksh/index.htm" alt="Learning the Korn Shell"><area shape="RECT" coords="439,0,514,21" href="../lrnunix/index.htm" webstripperlinkwas="http://www.ms.itb.ac.id/buku/unix-bookshelf/lrnunix/index.htm" alt="Learning the UNIX Operating System"></MAP
></DIV
></BODY
></HTML
>
