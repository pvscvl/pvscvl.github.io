<html><head><title>[Chapter 10] 10.5 Directing Output to Files and Pipes</TITLE
><meta name="DC.title" content="sed &amp; awk"><meta name="DC.creator" content="Dale Dougherty &amp; Arnold Robbins"><meta name="DC.publisher" content="O'Reilly &amp; Associates, Inc."><meta name="DC.date" content="1998-08-03T21:01:46Z"><meta name="DC.type" content="Text.Monograph"><meta name="DC.format" content="text/html" scheme="MIME"><meta name="DC.source" content="1-56592-225-5" scheme="ISBN"><meta name="DC.language" content="en-US"><meta name="generator" content="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><link rev="made" href="mailto:online-books@oreilly.com" title="Online Books Comments"><link rel="up" href="ch10_01.htm" webstripperlinkwas="ch10_01.htm" title="10. The Bottom Drawer"><link rel="prev" href="ch10_04.htm" webstripperlinkwas="ch10_04.htm" title="10.4 A Menu-Based Command Generator"><link rel="next" href="ch10_06.htm" webstripperlinkwas="ch10_06.htm" title="10.6 Generating Columnar Reports"></HEAD
><body bgcolor="#FFFFFF" text="#000000"><div class="htmlnav"><h1><img src="gifs/smbanner.gif" webstripperlinkwas="gifs/smbanner.gif" alt="sed &amp; awk" usemap="#srchmap" border="0"></H1
><map name="srchmap"><area shape="RECT" coords="0,0,466,65" href="index.htm" webstripperlinkwas="http://www.ms.itb.ac.id/buku/unix-bookshelf/sedawk/index.htm" alt="sed &amp; awk"><area shape="RECT" coords="467,0,514,18" href="jobjects/fsearch.htm" webstripperlinkwas="jobjects/fsearch.htm" alt="Search this book"></MAP
><table width="515" border="0" cellspacing="0" cellpadding="0"><tr><td align="LEFT" valign="TOP" width="172"><a class="SECT1" href="ch10_04.htm" webstripperlinkwas="ch10_04.htm" title="10.4 A Menu-Based Command Generator"><img src="../gifs/txtpreva.gif" webstripperlinkwas="../gifs/txtpreva.gif" alt="Previous: 10.4 A Menu-Based Command Generator" border="0"></A
></TD
><td align="CENTER" valign="TOP" width="171"><b><font face="ARIEL,HELVETICA,HELV,SANSERIF" size="-1">Chapter 10<br>The Bottom Drawer</FONT
></B
></TD
><td align="RIGHT" valign="TOP" width="172"><a class="SECT1" href="ch10_06.htm" webstripperlinkwas="ch10_06.htm" title="10.6 Generating Columnar Reports"><img src="../gifs/txtnexta.gif" webstripperlinkwas="../gifs/txtnexta.gif" alt="Next: 10.6 Generating Columnar Reports" border="0"></A
></TD
></TR
></TABLE
>&nbsp;<hr align="LEFT" width="515" title="footer"></DIV
><div class="SECT1"><h2 class="sect1"><a class="title" name="SEDAWK-CH-10-SECT-5">10.5 Directing Output to Files and Pipes</A
></H2
><p class="para"><a class="indexterm" name="CH10.OUT1"></A
><a class="indexterm" name="CH10.OUT3"></A
><a class="indexterm" name="CH10.OUT4"></A
><a class="indexterm" name="AUTOID-8572"></A
><a class="indexterm" name="AUTOID-8575"></A
><a class="indexterm" name="AUTOID-8578"></A
><a class="indexterm" name="AUTOID-8580"></A
><a class="indexterm" name="AUTOID-8582"></A
><a class="indexterm" name="AUTOID-8584"></A
>The output of any <kbd class="command">print</KBD
> or
<kbd class="command">printf</KBD
> statement can be directed to a file, using
the output redirection operators &quot;&gt;&quot; or &quot;&gt;&gt;&quot;. For example, the
following statement writes the current record to the file
<i class="filename">data.out</I
>:</P
><p class="para"><blockquote class="screen"><pre class="screen">print &gt; &quot;data.out&quot;</PRE
></BLOCKQUOTE
></P
><p class="para">The filename can be any expression that evaluates to a valid filename.
A file is opened by the first use of the redirection operator, and
subsequent uses append data to the file.  The difference between
&quot;&gt;&quot; and &quot;&gt;&gt;&quot; is the same as between the shell redirection
operators.  A right-angle bracket (&quot;&gt;&quot;) truncates
the file when opening it while &quot;&gt;&gt;&quot; preserves whatever the file
contains and appends data to it.</P
><p class="para">Because the redirection operator &quot;&gt;&quot; is the same as the relational
operator, there is the potential for confusion when you specify an
expression as an argument to the <kbd class="command">print</KBD
> command.
The rule is that &quot;&gt;&quot; will be interpreted as a redirection operator
when it appears in an argument list for any of the print statements.
To use &quot;&gt;&quot; as a relational operator in an expression that appears
in the argument list, put either the expression or the argument list
in parentheses.  For example, the following example uses parentheses
around the conditional expression to make sure that the relational
expression is evaluated properly:</P
><p class="para"><blockquote class="screen"><pre class="screen">print &quot;a =&quot;, a, &quot;b =&quot;, b, &quot;max =&quot;, (a &gt; b ? a : b) &gt; &quot;data.out&quot;</PRE
></BLOCKQUOTE
></P
><p class="para">The conditional expression evaluates whether <kbd class="command">a</KBD
> is
greater than <kbd class="command">b</KBD
>; if it is, then the value of
<kbd class="command">a</KBD
> is printed as the maximum value; otherwise,
<kbd class="command">b</KBD
>'s value is used.</P
><div class="sect2"><h3 class="sect2"><a class="title" name="SEDAWK-CH-10-SECT-5.1">10.5.1 Directing Output to a Pipe</A
></H3
><p class="para"><a class="indexterm" name="AUTOID-8604"></A
><a class="indexterm" name="AUTOID-8607"></A
><a class="indexterm" name="AUTOID-8610"></A
><a class="indexterm" name="AUTOID-8613"></A
>You can also direct output to a pipe.  The command</P
><blockquote class="literallayout"><p class="literallayout"><code class="literal">print |</CODE
> <code class="replaceable"><i>command</I
></CODE
></P
></BLOCKQUOTE
><p class="para">opens a pipe the first time it is executed and sends the current
record as input to that command.  In other words, the command is only
invoked once, but each execution of the <kbd class="command">print</KBD
>
command supplies another line of input.</P
><p class="para">The following script strips <kbd class="command">troff</KBD
> macros and
requests from the current input line and then sends the line as input
to <kbd class="command">wc</KBD
> to determine how many words are in the file:</P
><p class="para"><blockquote class="screen"><pre class="screen">{# words.awk - strip macros then get word count
sub(/^\.../,&quot;&quot;)
print | &quot;wc -w&quot; 
}</PRE
></BLOCKQUOTE
></P
><p class="para">By removing formatting codes, we get a truer word count.</P
><p class="para">In most cases, we prefer to use a shell script to pipe the output of
the awk command to another command rather than do it inside the awk
script.  For instance, we'd write the previous example as a shell
script invoking awk and piping its output to <kbd class="command">wc</KBD
>:</P
><p class="para"><blockquote class="screen"><pre class="screen">awk '{ # words -- strip macros 
sub(/^\.../,&quot;&quot;)
print 
}' $* | 
# get word count
wc -w</PRE
></BLOCKQUOTE
></P
><p class="para">This method seems simpler and easier to understand.
Nonetheless, the other method has the advantage of accomplishing the
same thing without creating a shell script.</P
><p class="para">Remember that you can only have so many pipes open at a time.  Use the
<kbd class="command">close()</KBD
> function to close the pipe when you
are done with it.</P
></DIV
><div class="sect2"><h3 class="sect2"><a class="title" name="SEDAWK-CH-10-SECT-5.2">10.5.2 Working with Multiple Files</A
></H3
><p class="para"><a class="indexterm" name="CH10.FILE1"></A
><a class="indexterm" name="CH10.FILE2"></A
>A file is opened whenever you read from or write to a file.  Every
operating system has some limit on the number of files a running
program may have open.  Furthermore, each implementation of awk may
have an internal limit on the number of open files; this number could
be smaller than the system's limit.[4] 
<a class="indexterm" name="AUTOID-8648"></A
><a class="indexterm" name="AUTOID-8650"></A
><a class="indexterm" name="AUTOID-8652"></A
>
So that you don't run out of open files, awk provides a
<kbd class="command">close()</KBD
> function that allows you to close
an open file.  Closing files that you have finished processing allows
your program to open more files later on.</P
><blockquote class="footnote"><p class="para">[4]  


Gawk will attempt to appear to have more files open than the system
limit by closing and reopening files as needed. Even though gawk is
&quot;smart,&quot; it is still more efficient to close your files when you're
done with them.  <a class="indexterm" name="AUTOID-8645"></A
></P
></BLOCKQUOTE
><p class="para">A common use for directing output to files is to split up a large file
into a number of smaller files.  Although UNIX provides
utilities, <kbd class="command">split</KBD
> and <kbd class="command">csplit</KBD
>,
that do a similar job, they do not have the ability to give the new
file a useful filename.</P
><p class="para">Similarly, sed can be used to write to a
file, but you must specify a fixed filename.  With awk, you can use a
variable to specify the filename and pick up the value from a pattern
in the file.  For instance, if $1 provided a string that could be used
as a filename, you could write a script to output each record to its
own file:</P
><p class="para"><blockquote class="screen"><pre class="screen">print $0 &gt; $1</PRE
></BLOCKQUOTE
></P
><p class="para">You should perhaps test the filename, either to determine its length
or to look for characters that cannot be used in a filename.</P
><p class="para">If you don't close your files, such a program would eventually run out
of available open files, and have to give up.  The example we are
going to look at works because it uses the
<kbd class="command">close()</KBD
> function so that you will not run
into any open-file limitations.</P
><p class="para">The following script was used to split up a large file containing
dozens of manpages.  Each manual page began by setting a number
register and ended with a blank line:</P
><p class="para"><blockquote class="screen"><pre class="screen">.nr X 0</PRE
></BLOCKQUOTE
></P
><p class="para">(Although they used the <kbd class="command">-man</KBD
> macros for the most
part, the beginning of a manpage was strangely coded, making things a
little harder.)  The line that provides the filename looks like this:</P
><p class="para"><blockquote class="screen"><pre class="screen">.if \nX=0 .ds x}  XDrawLine &quot;&quot; &quot;Xlib - Drawing Primitives&quot;</PRE
></BLOCKQUOTE
></P
><p class="para">The fifth field on this line, &quot;XDrawLine,&quot; contains the filename.
Perhaps the only difficulty in writing the script is that the first
line is not the one that provides the filename.  Therefore, we collect
the lines in an array until we get a filename.  Once we get the
filename, we output the array, and from that point on we simply write
each input line to the new file.  Here's the
<kbd class="command">man.split</KBD
> script:</P
><p class="para"><blockquote class="screen"><pre class="screen"># man.split -- split up a file containing X manpages. 
BEGIN { file = 0; i = 0; filename = &quot;&quot; }

# First line of new manpage is &quot;.nr X 0&quot;
# Last line is blank
/^\.nr X 0/,/^$/ {
	# this conditional collects lines until we get a filename.
	if (file == 0)
		line[++i] = $0
	else
		print $0 &gt; filename

	# this matches the line that gives us the filename
	if ($4 == &quot;x}&quot;) {
		# now we have a filename
		filename = $5 
		file = 1
		# output name to screen 
		print filename 
		# print any lines collected
		for (x = 1; x &lt;= i; ++x){
			print line[x] &gt; filename
		}
		i = 0
	}

	# close up and clean up for next one
	if ($0 ~ /^$/) {
		close(filename)
		filename = &quot;&quot;
		file = 0
		i = 0
	}
}</PRE
></BLOCKQUOTE
></P
><p class="para">As you can see, we use the variable <kbd class="command">file</KBD
> as a flag
to convey whether or not we have a valid filename and can write to the
file.  Initially, <kbd class="command">file</KBD
> is 0, and the current input
line is stored in an array. The variable <kbd class="command">i</KBD
> is a
counter used to index the array.  When we encounter the line that sets
the filename, then we set <kbd class="command">file</KBD
> to 1.  The name of
the new file is printed to the screen so that the user can get some
feedback on the progress of the script.  Then we loop through the
array and output it to the new file.  When the next input line is
read, <kbd class="command">file</KBD
> will be set to 1 and the
<kbd class="command">print</KBD
> statement will output it to the named file.</P
><a class="indexterm" name="AUTOID-8683"></A
><a class="indexterm" name="AUTOID-8684"></A
></DIV
><a class="indexterm" name="AUTOID-8685"></A
><a class="indexterm" name="AUTOID-8686"></A
><a class="indexterm" name="AUTOID-8687"></A
></DIV
><div class="htmlnav"><p></P
><hr align="LEFT" width="515" title="footer"><table width="515" border="0" cellspacing="0" cellpadding="0"><tr><td align="LEFT" valign="TOP" width="172"><a class="SECT1" href="ch10_04.htm" webstripperlinkwas="ch10_04.htm" title="10.4 A Menu-Based Command Generator"><img src="../gifs/txtpreva.gif" webstripperlinkwas="../gifs/txtpreva.gif" alt="Previous: 10.4 A Menu-Based Command Generator" border="0"></A
></TD
><td align="CENTER" valign="TOP" width="171"><a class="book" href="index.htm" webstripperlinkwas="http://www.ms.itb.ac.id/buku/unix-bookshelf/sedawk/index.htm" title="sed &amp; awk"><img src="../gifs/txthome.gif" webstripperlinkwas="../gifs/txthome.gif" alt="sed &amp; awk" border="0"></A
></TD
><td align="RIGHT" valign="TOP" width="172"><a class="SECT1" href="ch10_06.htm" webstripperlinkwas="ch10_06.htm" title="10.6 Generating Columnar Reports"><img src="../gifs/txtnexta.gif" webstripperlinkwas="../gifs/txtnexta.gif" alt="Next: 10.6 Generating Columnar Reports" border="0"></A
></TD
></TR
><tr><td align="LEFT" valign="TOP" width="172">10.4 A Menu-Based Command Generator</TD
><td align="CENTER" valign="TOP" width="171"><a class="index" href="index/idx_0.htm" webstripperlinkwas="index/idx_0.htm" title="Book Index"><img src="../gifs/index.gif" webstripperlinkwas="../gifs/index.gif" alt="Book Index" border="0"></A
></TD
><td align="RIGHT" valign="TOP" width="172">10.6 Generating Columnar Reports</TD
></TR
></TABLE
><hr align="LEFT" width="515" title="footer"><img src="../gifs/smnavbar.gif" webstripperlinkwas="../gifs/smnavbar.gif" usemap="#map" border="0" alt="The UNIX CD Bookshelf Navigation"><map name="map"><area shape="RECT" coords="0,0,73,21" href="../index.html" webstripperlinkwas="http://www.ms.itb.ac.id/buku/unix-bookshelf/index.html" alt="The UNIX CD Bookshelf"><area shape="RECT" coords="74,0,163,21" href="../upt/index.htm" webstripperlinkwas="http://www.ms.itb.ac.id/buku/unix-bookshelf/upt/index.htm" alt="UNIX Power Tools"><area shape="RECT" coords="164,0,257,21" href="../unixnut/index.htm" webstripperlinkwas="http://www.ms.itb.ac.id/buku/unix-bookshelf/unixnut/index.htm" alt="UNIX in a Nutshell"><area shape="RECT" coords="258,0,321,21" href="../vi/index.htm" webstripperlinkwas="http://www.ms.itb.ac.id/buku/unix-bookshelf/vi/index.htm" alt="Learning the vi Editor"><area shape="RECT" coords="322,0,378,21" href="index.htm" webstripperlinkwas="http://www.ms.itb.ac.id/buku/unix-bookshelf/sedawk/index.htm" alt="sed &amp; awk"><area shape="RECT" coords="379,0,438,21" href="../ksh/index.htm" webstripperlinkwas="http://www.ms.itb.ac.id/buku/unix-bookshelf/ksh/index.htm" alt="Learning the Korn Shell"><area shape="RECT" coords="439,0,514,21" href="../lrnunix/index.htm" webstripperlinkwas="http://www.ms.itb.ac.id/buku/unix-bookshelf/lrnunix/index.htm" alt="Learning the UNIX Operating System"></MAP
></DIV
></BODY
></HTML
>
