<html><head><title>[Chapter 10] The Bottom Drawer</TITLE
><meta name="DC.title" content="sed &amp; awk"><meta name="DC.creator" content="Dale Dougherty &amp; Arnold Robbins"><meta name="DC.publisher" content="O'Reilly &amp; Associates, Inc."><meta name="DC.date" content="1998-08-03T21:01:25Z"><meta name="DC.type" content="Text.Monograph"><meta name="DC.format" content="text/html" scheme="MIME"><meta name="DC.source" content="1-56592-225-5" scheme="ISBN"><meta name="DC.language" content="en-US"><meta name="generator" content="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><link rev="made" href="mailto:online-books@oreilly.com" title="Online Books Comments"><link rel="up" href="index.htm" webstripperlinkwas="http://www.ms.itb.ac.id/buku/unix-bookshelf/sedawk/index.htm" title="sed &amp; awk"><link rel="prev" href="ch09_03.htm" webstripperlinkwas="ch09_03.htm" title="9.3 Writing Your Own Functions"><link rel="next" href="ch10_02.htm" webstripperlinkwas="ch10_02.htm" title="10.2 The close() Function"></HEAD
><body bgcolor="#FFFFFF" text="#000000"><div class="htmlnav"><h1><img src="gifs/smbanner.gif" webstripperlinkwas="gifs/smbanner.gif" alt="sed &amp; awk" usemap="#srchmap" border="0"></H1
><map name="srchmap"><area shape="RECT" coords="0,0,466,65" href="index.htm" webstripperlinkwas="http://www.ms.itb.ac.id/buku/unix-bookshelf/sedawk/index.htm" alt="sed &amp; awk"><area shape="RECT" coords="467,0,514,18" href="jobjects/fsearch.htm" webstripperlinkwas="jobjects/fsearch.htm" alt="Search this book"></MAP
><table width="515" border="0" cellspacing="0" cellpadding="0"><tr><td align="LEFT" valign="TOP" width="172"><a class="SECT1" href="ch09_03.htm" webstripperlinkwas="ch09_03.htm" title="9.3 Writing Your Own Functions"><img src="../gifs/txtpreva.gif" webstripperlinkwas="../gifs/txtpreva.gif" alt="Previous: 9.3 Writing Your Own Functions" border="0"></A
></TD
><td align="CENTER" valign="TOP" width="171"><b><font face="ARIEL,HELVETICA,HELV,SANSERIF" size="-1">Chapter 10</FONT
></B
></TD
><td align="RIGHT" valign="TOP" width="172"><a class="SECT1" href="ch10_02.htm" webstripperlinkwas="ch10_02.htm" title="10.2 The close() Function"><img src="../gifs/txtnexta.gif" webstripperlinkwas="../gifs/txtnexta.gif" alt="Next: 10.2 The close() Function" border="0"></A
></TD
></TR
></TABLE
>&nbsp;<hr align="LEFT" width="515" title="footer"></DIV
><div class="CHAPTER"><h1 class="chapter"><a class="title" name="SEDAWK-CH-10">10. The Bottom Drawer</A
></H1
><div class="htmltoc"><p><b>Contents:</B
><br><a class="sect1" href="#SEDAWK-CH-10-SECT-1" title="10.1 The getline Function">The getline Function</A
><br><a class="sect1" href="ch10_02.htm" webstripperlinkwas="ch10_02.htm" title="10.2 The close() Function">The close() Function</A
><br><a class="sect1" href="ch10_03.htm" webstripperlinkwas="ch10_03.htm" title="10.3 The system() Function">The system() Function</A
><br><a class="sect1" href="ch10_04.htm" webstripperlinkwas="ch10_04.htm" title="10.4 A Menu-Based Command Generator">A Menu-Based Command Generator</A
><br><a class="sect1" href="ch10_05.htm" webstripperlinkwas="ch10_05.htm" title="10.5 Directing Output to Files and Pipes">Directing Output to Files and Pipes</A
><br><a class="sect1" href="ch10_06.htm" webstripperlinkwas="ch10_06.htm" title="10.6 Generating Columnar Reports">Generating Columnar Reports</A
><br><a class="sect1" href="ch10_07.htm" webstripperlinkwas="ch10_07.htm" title="10.7 Debugging">Debugging</A
><br><a class="sect1" href="ch10_08.htm" webstripperlinkwas="ch10_08.htm" title="10.8 Limitations">Limitations</A
><br><a class="sect1" href="ch10_09.htm" webstripperlinkwas="ch10_09.htm" title="10.9 Invoking awk Using the #! Syntax">Invoking awk Using the #! Syntax</A
></P
><p></P
></DIV
><p class="para">This chapter is proof that not everything has its place.  Some things
just don't seem to fit, no matter how you organize them.  This chapter
is a collection of such things. It is tempting to label it &quot;Advanced
Topics,&quot; as if to explain its organization (or lack thereof), but some
readers might feel they need to make more progress before reading
it. We have therefore called it &quot;The Bottom Drawer,&quot; thinking of the
organization of a chest of drawers, with underwear, socks, and other
day-to-day things in the top drawers and heavier things that are less frequently used, like
sweaters, in the bottom drawers.  All of
it is equally accessible, but you have to bend over to get things in
the bottom drawer.  It requires a little more effort to get something,
that's all.</P
><p class="para">In this chapter we cover a number of topics, including the
following:</P
><ul class="itemizedlist"><li class="listitem"><p class="para">The <kbd class="command">getline</KBD
> function</P
></LI
><li class="listitem"><p class="para">The <kbd class="command">system()</KBD
> function</P
></LI
><li class="listitem"><p class="para">Directing output to files and pipes</P
></LI
><li class="listitem"><p class="para">Debugging awk scripts</P
></LI
></UL
><div class="sect1"><h2 class="sect1"><a class="title" name="SEDAWK-CH-10-SECT-1">10.1 The getline Function</A
></H2
><p class="para"><a class="indexterm" name="CH10.GET1"></A
><a class="indexterm" name="CH10.GET2"></A
><a class="indexterm" name="CH10.GET3"></A
><a class="indexterm" name="CH10.GET4"></A
>The <kbd class="command">getline</KBD
> function is used to read another line
of input.  Not only can <kbd class="command">getline</KBD
> read from the
regular input data stream, it can also handle input from files and
pipes.</P
><p class="para"><a class="indexterm" name="AUTOID-8173"></A
>The <kbd class="command">getline</KBD
> function
is similar to awk's <kbd class="command">next</KBD
> statement.  While both
cause the next input line to be read, the <kbd class="command">next</KBD
> statement passes 
control back to the top of the script.  The <kbd class="command">getline</KBD
>
function gets the next line without changing control in the script. 
Possible return values are: </P
><table class="informaltable"><tbody class="tbody"><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1">1</TD
><td class="entry" rowspan="1" colspan="1"><p class="para">If it was able to read a line.</P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1">0</TD
><td class="entry" rowspan="1" colspan="1"><p class="para">If it encounters the end-of-file.</P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1">-1</TD
><td class="entry" rowspan="1" colspan="1"><p class="para">If it encounters an error.</P
></TD
></TR
></TBODY
></TABLE
><blockquote class="note"><p class="para"><strong>NOTE:</STRONG
> Although <kbd class="command">getline</KBD
> is called a function and it does
return a value, its syntax resembles a statement.  Do not write
<kbd class="command">getline()</KBD
>; its syntax does not permit
parentheses.</P
></BLOCKQUOTE
><p class="para">In the previous chapter, we used a manual page source file as an
example.  The <kbd class="command">-man</KBD
> macros typically place the text
argument on the next line.  Although the macro is the pattern that you
use to find the line, it is actually the next line that you process.
For instance, to extract the name of the command from the manpage,
the following example matches the heading &quot;Name,&quot; reads the
next line, and prints the first field of it:</P
><p class="para"><blockquote class="screen"><pre class="screen"># getline.awk -- test getline function
/^\.SH &quot;?Name&quot;?/ { 
	getline # get next line
	print $1 # print $1 of new line.
}</PRE
></BLOCKQUOTE
></P
><p class="para">The pattern matches any line with &quot;.SH&quot; followed by &quot;Name,&quot; which
might be enclosed in quotes.  Once this line is matched, we use
<kbd class="command">getline</KBD
> to read the next input line.  When the new
line is read, <kbd class="command">getline</KBD
> assigns it $0 and parses it
into fields.  The system variables <kbd class="command">NF</KBD
>,
<kbd class="command">NR</KBD
>, and <kbd class="command">FNR</KBD
> are also set.  Thus,
the new line becomes the current line, and we are able to refer to
&quot;$1&quot; and retrieve the first field.  Note that the previous line is no
longer available as $0.  However, if necessary, you can assign the
line read by <kbd class="command">getline</KBD
> to a variable and avoid
changing $0, as we'll see shortly.</P
><p class="para">Here's an example that shows how the previous script works, printing
out the first field of the line following &quot;.SH Name.&quot;</P
><p class="para"><blockquote class="screen"><pre class="screen">$ <code class="userinput"><b>awk -f getline.awk test</B
></CODE
>
XSubImage</PRE
></BLOCKQUOTE
></P
><p class="para">The <kbd class="command">sorter.awk</KBD
> program that we demonstrated at the
end of <a class="xref" href="ch09_01.htm" webstripperlinkwas="ch09_01.htm" title="Functions">Chapter 9, Functions</A
>, could have used <kbd class="command">getline</KBD
>
to read all the lines after the heading &quot;Related Commands.&quot;  We can
test the return value of <kbd class="command">getline</KBD
> in a
<kbd class="command">while</KBD
> loop to read a number of lines from the
input.  The following procedure replaces the first two procedures in
the <kbd class="command">sorter</KBD
> program:</P
><p class="para"><blockquote class="screen"><pre class="screen"># Match &quot;Related Commands&quot; and collect them
/^\.SH &quot;?Related Commands&quot;?/ {
	print
	while (getline &gt; 0)
		commandList = commandList $0
}</PRE
></BLOCKQUOTE
></P
><p class="para">The expression &quot;getline &gt; 0&quot; will be true as long as
<kbd class="command">getline</KBD
> successfully reads an input line.  When it
gets to the end-of-file, <kbd class="command">getline</KBD
> returns 0 and the
loop is exited.</P
><div class="sect2"><h3 class="sect2"><a class="title" name="SEDAWK-CH-10-SECT-1.1">10.1.1 Reading Input from Files</A
></H3
><p class="para"><a class="indexterm" name="AUTOID-8229"></A
><a class="indexterm" name="AUTOID-8232"></A
>Besides reading from the regular input stream, the
<kbd class="command">getline</KBD
> function allows you to read input from a
file or a pipe.  For instance, the following statement reads the next
line from the file <i class="filename">data</I
>:</P
><p class="para"><blockquote class="screen"><pre class="screen">getline &lt; &quot;data&quot;</PRE
></BLOCKQUOTE
></P
><p class="para">Although the filename can be supplied through a variable, it is
typically specified as a string constant, which must be enclosed in
quotes.  The symbol &quot;&lt;&quot; is the same as the shell's input
redirection symbol and will not be interpreted as the &quot;less than&quot;
symbol.  We can use a <kbd class="command">while</KBD
> loop to read all the
lines from a file, testing for an end-of-file to exit the loop.  The
following example opens the file <em class="emphasis">data</EM
> and prints
all of its lines:</P
><p class="para"><blockquote class="screen"><pre class="screen">while ( (getline &lt; &quot;data&quot;) &gt; 0 )
	print</PRE
></BLOCKQUOTE
></P
><p class="para">(We parenthesize to avoid confusion; the &quot;&lt;&quot; is a redirection,
while the &quot;&gt;&quot; is a comparison of the return value.)  The input can
also come from standard input.  You can use <kbd class="command">getline</KBD
>
following a prompt for the user to enter information:</P
><p class="para"><blockquote class="screen"><pre class="screen">BEGIN { printf &quot;Enter your name: &quot;
	getline &lt; &quot;-&quot;
	print  
}</PRE
></BLOCKQUOTE
></P
><p class="para">This sample code prints the prompt &quot;Enter your name:&quot;
(<kbd class="command">printf</KBD
> is used because we don't want a carriage
return after the prompt), and then calls <kbd class="command">getline</KBD
> to
gather the user's response.[1]
The response is assigned to $0, and the <kbd class="command">print</KBD
>
statement outputs that value.</P
><blockquote class="footnote"><p class="para">[1] At least at one time, SGI
versions of nawk did not support the use of &quot;-&quot; with
<kbd class="command">getline</KBD
> to read from standard input. Caveat emptor.  </P
></BLOCKQUOTE
></DIV
><div class="sect2"><h3 class="sect2"><a class="title" name="SEDAWK-CH-10-SECT-1.2">10.1.2 Assigning the Input to a Variable</A
></H3
><p class="para"><a class="indexterm" name="AUTOID-8258"></A
><a class="indexterm" name="AUTOID-8260"></A
><a class="indexterm" name="AUTOID-8263"></A
>The <kbd class="command">getline</KBD
> function allows you to assign the input
record to a variable.  The name of the variable is supplied as an
argument.  Thus, the following statement reads the next line of input
into the variable <kbd class="command">input</KBD
>:</P
><p class="para"><blockquote class="screen"><pre class="screen">getline input</PRE
></BLOCKQUOTE
></P
><p class="para"><a class="indexterm" name="AUTOID-8271"></A
><a class="indexterm" name="AUTOID-8273"></A
><a class="indexterm" name="AUTOID-8275"></A
><a class="indexterm" name="AUTOID-8277"></A
>Assigning the input to a variable does not affect the current input
line; that is, $0 is not affected.  The new input line is not split
into fields, and thus the variable <kbd class="command">NF</KBD
> is also
unaffected.  It does increment the record counters,
<kbd class="command">NR</KBD
> and <kbd class="command">FNR</KBD
>.</P
><p class="para">The previous example demonstrated how to prompt the user.  That
example could be written as follows, assigning the user's response to
the variable <kbd class="command">name</KBD
>.</P
><p class="para"><blockquote class="screen"><pre class="screen">BEGIN { printf &quot;Enter your name: &quot;
	getline name &lt; &quot;-&quot;
	print name
}</PRE
></BLOCKQUOTE
></P
><p class="para">Study the syntax for assigning the input data to a variable because it
is a common mistake to instead write:</P
><p class="para"><blockquote class="screen"><pre class="screen">name = getline     # wrong</PRE
></BLOCKQUOTE
></P
><p class="para">which assigns the return value of <kbd class="command">getline</KBD
> to the
variable <kbd class="command">name</KBD
>.</P
></DIV
><div class="sect2"><h3 class="sect2"><a class="title" name="SEDAWK-CH-10-SECT-1.3">10.1.3 Reading Input from a Pipe</A
></H3
><p class="para"><a class="indexterm" name="CH10.PIPE1"></A
><a class="indexterm" name="CH10.PIPE2"></A
>You can execute a command and pipe the output into
<kbd class="command">getline</KBD
>.  For example, look at the following
expression:</P
><p class="para"><blockquote class="screen"><pre class="screen">&quot;who am i&quot; | getline</PRE
></BLOCKQUOTE
></P
><p class="para">That expression sets &quot;$0&quot; to the output of the <kbd class="command">who am
i</KBD
> command.</P
><p class="para"><blockquote class="screen"><pre class="screen">dale       ttyC3        Jul 18 13:37</PRE
></BLOCKQUOTE
></P
><p class="para">The line is parsed into fields and the system variable <kbd class="command">NF</KBD
>
is set.  Similarly, you can assign the result to a variable:</P
><p class="para"><blockquote class="screen"><pre class="screen">&quot;who am i&quot; | getline me</PRE
></BLOCKQUOTE
></P
><p class="para">By assigning the output to a variable, you avoid
setting $0 and <b class="emphasis.bold">NF</B
>, but
the line is not split into fields.</P
><p class="para">The following script is a fairly simple example of piping the output
of a command to <kbd class="command">getline</KBD
>.  It uses the output from the
<kbd class="command">who am i</KBD
> command to get the user's name. It then looks up
the name in <i class="filename">/etc/passwd</I
>, printing out the fifth
field of that file, the user's full name:</P
><p class="para"><blockquote class="screen"><pre class="screen">awk '# getname - print users fullname from /etc/passwd
BEGIN { &quot;who am i&quot; | getline 
	name = $1
	FS = &quot;:&quot;
}
name ~ $1 { print $5 }
' /etc/passwd</PRE
></BLOCKQUOTE
></P
><p class="para">The command is executed from the <kbd class="command">BEGIN</KBD
> procedure,
and it provides us with the name of the user that will be used to find
the user's entry in <i class="filename">/etc/passwd</I
>.  As explained
above, <kbd class="command">who am i</KBD
> outputs a single line, which
<kbd class="command">getline</KBD
> assigns to $0.  $1, the first field of that
output, is then assigned to <kbd class="command">name</KBD
>.</P
><p class="para">The field separator is set to a colon (:) to allow us to access
individual fields in entries in the <i class="filename">/etc/passwd</I
>
file.  Notice that <kbd class="command">FS</KBD
> is set after
<kbd class="command">getline</KBD
> or else the parsing of the command's output
would be affected.</P
><p class="para">Finally, the main procedure is designed to test that the
first field matches <kbd class="command">name</KBD
>.  If it does, the fifth
field of the entry is printed.  For instance, when Dale runs
this script, it prints &quot;Dale Dougherty.&quot;</P
><p class="para">When the output of a command is piped to <kbd class="command">getline</KBD
>
and it contains multiple lines, <kbd class="command">getline</KBD
> reads a
line at a time.  The first time <kbd class="command">getline</KBD
> is called
it reads the first line of output.  If you call it again, it reads the
second line.  To read all the lines of output, you must set up a loop
that executes <kbd class="command">getline</KBD
> until there is no more
output.  For instance, the following example uses a
<kbd class="command">while</KBD
> loop to read each line of output and assign
it to the next element of the array, <kbd class="command">who_out</KBD
>:</P
><p class="para"><blockquote class="screen"><pre class="screen">while (&quot;who&quot; | getline)
	who_out[++i] = $0</PRE
></BLOCKQUOTE
></P
><p class="para">Each time the <kbd class="command">getline</KBD
> function is called, it reads
the next line of output.  The <kbd class="command">who</KBD
> command, however,
is executed only once.</P
><p class="para">The next example looks for &quot;@date&quot; in a document and replaces it with
today's date:</P
><p class="para"><blockquote class="screen"><pre class="screen"># subdate.awk -- replace @date with todays date
/@date/ {
	&quot;date +'%a., %h %d, %Y'&quot; | getline today
	gsub(/@date/, today)
}
{ print }</PRE
></BLOCKQUOTE
></P
><p class="para">The <kbd class="command">date</KBD
> command, using its formatting options,[2] 
provides the date and <kbd class="command">getline</KBD
> assigns it to the
variable <kbd class="command">today</KBD
>.  The
<kbd class="command">gsub()</KBD
> function replaces each instance of
&quot;@date&quot; with today's date.</P
><blockquote class="footnote"><p class="para">[2] Older versions of <kbd class="command">date</KBD
> don't support formatting
options.  Particularly the one on SunOS 4.1.x systems; there you have
to use <i class="filename">/usr/5bin/date</I
>. Check your local
documentation.  </P
></BLOCKQUOTE
><p class="para">This script might be used to insert the
date in a form letter:</P
><p class="para"><blockquote class="screen"><pre class="screen">To: Peabody
From: Sherman 
Date: @date

I am writing you on @date to 
remind you about our special offer.</PRE
></BLOCKQUOTE
></P
><p class="para">All lines of the input file would be passed through as is, except
the lines containing &quot;@date&quot;, which are replaced with
today's date:</P
><p class="para"><blockquote class="screen"><pre class="screen">$ <code class="userinput"><b>awk -f subdate.awk subdate.test</B
></CODE
>
To: Peabody
From: Sherman
Date: Sun., May 05, 1996

I am writing you on Sun., May 05, 1996 to
remind you about our special offer.</PRE
></BLOCKQUOTE
></P
><a class="indexterm" name="AUTOID-8364"></A
><a class="indexterm" name="AUTOID-8365"></A
></DIV
><a class="indexterm" name="AUTOID-8366"></A
><a class="indexterm" name="AUTOID-8367"></A
><a class="indexterm" name="AUTOID-8368"></A
><a class="indexterm" name="AUTOID-8369"></A
></DIV
></DIV
><div class="htmlnav"><p></P
><hr align="LEFT" width="515" title="footer"><table width="515" border="0" cellspacing="0" cellpadding="0"><tr><td align="LEFT" valign="TOP" width="172"><a class="SECT1" href="ch09_03.htm" webstripperlinkwas="ch09_03.htm" title="9.3 Writing Your Own Functions"><img src="../gifs/txtpreva.gif" webstripperlinkwas="../gifs/txtpreva.gif" alt="Previous: 9.3 Writing Your Own Functions" border="0"></A
></TD
><td align="CENTER" valign="TOP" width="171"><a class="book" href="index.htm" webstripperlinkwas="http://www.ms.itb.ac.id/buku/unix-bookshelf/sedawk/index.htm" title="sed &amp; awk"><img src="../gifs/txthome.gif" webstripperlinkwas="../gifs/txthome.gif" alt="sed &amp; awk" border="0"></A
></TD
><td align="RIGHT" valign="TOP" width="172"><a class="SECT1" href="ch10_02.htm" webstripperlinkwas="ch10_02.htm" title="10.2 The close() Function"><img src="../gifs/txtnexta.gif" webstripperlinkwas="../gifs/txtnexta.gif" alt="Next: 10.2 The close() Function" border="0"></A
></TD
></TR
><tr><td align="LEFT" valign="TOP" width="172">9.3 Writing Your Own Functions</TD
><td align="CENTER" valign="TOP" width="171"><a class="index" href="index/idx_0.htm" webstripperlinkwas="index/idx_0.htm" title="Book Index"><img src="../gifs/index.gif" webstripperlinkwas="../gifs/index.gif" alt="Book Index" border="0"></A
></TD
><td align="RIGHT" valign="TOP" width="172">10.2 The close() Function</TD
></TR
></TABLE
><hr align="LEFT" width="515" title="footer"><img src="../gifs/smnavbar.gif" webstripperlinkwas="../gifs/smnavbar.gif" usemap="#map" border="0" alt="The UNIX CD Bookshelf Navigation"><map name="map"><area shape="RECT" coords="0,0,73,21" href="../index.html" webstripperlinkwas="http://www.ms.itb.ac.id/buku/unix-bookshelf/index.html" alt="The UNIX CD Bookshelf"><area shape="RECT" coords="74,0,163,21" href="../upt/index.htm" webstripperlinkwas="http://www.ms.itb.ac.id/buku/unix-bookshelf/upt/index.htm" alt="UNIX Power Tools"><area shape="RECT" coords="164,0,257,21" href="../unixnut/index.htm" webstripperlinkwas="http://www.ms.itb.ac.id/buku/unix-bookshelf/unixnut/index.htm" alt="UNIX in a Nutshell"><area shape="RECT" coords="258,0,321,21" href="../vi/index.htm" webstripperlinkwas="http://www.ms.itb.ac.id/buku/unix-bookshelf/vi/index.htm" alt="Learning the vi Editor"><area shape="RECT" coords="322,0,378,21" href="index.htm" webstripperlinkwas="http://www.ms.itb.ac.id/buku/unix-bookshelf/sedawk/index.htm" alt="sed &amp; awk"><area shape="RECT" coords="379,0,438,21" href="../ksh/index.htm" webstripperlinkwas="http://www.ms.itb.ac.id/buku/unix-bookshelf/ksh/index.htm" alt="Learning the Korn Shell"><area shape="RECT" coords="439,0,514,21" href="../lrnunix/index.htm" webstripperlinkwas="http://www.ms.itb.ac.id/buku/unix-bookshelf/lrnunix/index.htm" alt="Learning the UNIX Operating System"></MAP
></DIV
></BODY
></HTML
>
