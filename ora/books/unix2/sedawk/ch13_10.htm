<html><head><title>[Chapter 13] 13.10 m1&nbsp;- Simple Macro Processor</TITLE
><meta name="DC.title" content="sed &amp; awk"><meta name="DC.creator" content="Dale Dougherty &amp; Arnold Robbins"><meta name="DC.publisher" content="O'Reilly &amp; Associates, Inc."><meta name="DC.date" content="1998-08-03T21:05:49Z"><meta name="DC.type" content="Text.Monograph"><meta name="DC.format" content="text/html" scheme="MIME"><meta name="DC.source" content="1-56592-225-5" scheme="ISBN"><meta name="DC.language" content="en-US"><meta name="generator" content="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><link rev="made" href="mailto:online-books@oreilly.com" title="Online Books Comments"><link rel="up" href="ch13_01.htm" webstripperlinkwas="ch13_01.htm" title="13. A Miscellany of Scripts"><link rel="prev" href="ch13_09.htm" webstripperlinkwas="ch13_09.htm" title="13.9 transpose&nbsp;- Perform a Matrix Transposition"><link rel="next" href="appa_01.htm" webstripperlinkwas="appa_01.htm" title="A. Quick Reference for sed"></HEAD
><body bgcolor="#FFFFFF" text="#000000"><div class="htmlnav"><h1><img src="gifs/smbanner.gif" webstripperlinkwas="gifs/smbanner.gif" alt="sed &amp; awk" usemap="#srchmap" border="0"></H1
><map name="srchmap"><area shape="RECT" coords="0,0,466,65" href="index.htm" webstripperlinkwas="http://www.ms.itb.ac.id/buku/unix-bookshelf/sedawk/index.htm" alt="sed &amp; awk"><area shape="RECT" coords="467,0,514,18" href="jobjects/fsearch.htm" webstripperlinkwas="jobjects/fsearch.htm" alt="Search this book"></MAP
><table width="515" border="0" cellspacing="0" cellpadding="0"><tr><td align="LEFT" valign="TOP" width="172"><a class="SECT1" href="ch13_09.htm" webstripperlinkwas="ch13_09.htm" title="13.9 transpose&nbsp;- Perform a Matrix Transposition"><img src="../gifs/txtpreva.gif" webstripperlinkwas="../gifs/txtpreva.gif" alt="Previous: 13.9 transpose&nbsp;- Perform a Matrix Transposition" border="0"></A
></TD
><td align="CENTER" valign="TOP" width="171"><b><font face="ARIEL,HELVETICA,HELV,SANSERIF" size="-1">Chapter 13<br>A Miscellany of Scripts</FONT
></B
></TD
><td align="RIGHT" valign="TOP" width="172"><a class="APPENDIX" href="appa_01.htm" webstripperlinkwas="appa_01.htm" title="A. Quick Reference for sed"><img src="../gifs/txtnexta.gif" webstripperlinkwas="../gifs/txtnexta.gif" alt="Next: A. Quick Reference for sed" border="0"></A
></TD
></TR
></TABLE
>&nbsp;<hr align="LEFT" width="515" title="footer"></DIV
><div class="SECT1"><h2 class="sect1"><a class="title" name="AUTOID-11566">13.10 m1&nbsp;- Simple Macro Processor</A
></H2
><p class="para"><em class="emphasis">Contributed by Jon Bentley</EM
></P
><p class="para"><a class="indexterm" name="CH13.G"></A
>The <kbd class="command">m1</KBD
> program is a &quot;little brother&quot; to the <kbd class="command">m4</KBD
> macro
processor found on UNIX systems.
It was originally published in the article
<cite class="citetitle">m1: A Mini Macro Processor</CITE
>, in <cite class="citetitle">Computer Language</CITE
>, June 1990,
Volume 7, Number 6, pages 47-61.
This program was brought to my attention by
Ozan Yigit.
Jon Bentley kindly sent me his current version of the program, as
well as an early draft of his article (I was having trouble getting a
copy of the published one). A PostScript version of this paper is included
with the example programs, available from O'Reilly's FTP server (see
the Preface).
I wrote these introductory notes, and the program notes below. [A.R.]</P
><p class="para">A macro processor copies its input to its output, while
performing several jobs. The tasks are:

<ol class="orderedlist"><li class="listitem"><p class="para">Define and expand macros. Macros have two parts, a name and a body.
All occurrences of
a macro's name are replaced with the macro's body.</P
></LI
><li class="listitem"><p class="para">Include files.  Special include directives in a data file are replaced
with the contents of the named file.  Includes can usually be nested,
with one included file including another. Included files are processed
for macros.</P
></LI
><li class="listitem"><p class="para">Conditional text inclusion and exclusion. Different parts of the text
can be included in the final output, often based upon whether a
macro is or isn't defined.</P
></LI
><li class="listitem"><p class="para">Depending on the macro processor, comment lines can appear that
will be removed from the final output.</P
></LI
></OL
></P
><p class="para">If you're a C or C++ programmer, you're already familiar with the built-in
preprocessor in those languages.
UNIX systems have a general-purpose macro processor
called <kbd class="command">m4</KBD
>.  This is a powerful program, but somewhat difficult
to master, since macro definitions are processed for expansion
at definition time, instead of at expansion time. <kbd class="command">m1</KBD
> is considerably
simpler than <kbd class="command">m4</KBD
>, making it much easier to learn and to use.</P
><p class="para">Here is Jon's first cut at
a very simple macro processor.
All it does is define and expand macros.
We can call it <kbd class="command">m0a</KBD
>.
In this and the following programs, the
&quot;at&quot; symbol (@) distinguishes lines that are directives,
and also indicates the presence of macros that should be expanded.</P
><blockquote class="screen"><pre class="screen">/^@define[ \t]/ {
	name = $2
	$1 = $2 = &quot;&quot;; sub(/^[ \t]+/, &quot;&quot;)
	symtab[name] = $0
	next
}
{
	for (i in symtab)
		gsub(&quot;@&quot; i &quot;@&quot;, symtab[i])
	print
}</PRE
></BLOCKQUOTE
><p class="para">This version looks for lines beginning with &quot;@define.&quot; This keyword is
$1 and the macro name is taken to be $2. The rest of the line becomes
the body of the macro. The next input line is then fetched using <kbd class="command">next</KBD
>.
The second rule simply loops through all the defined macros, performing
a global substitution of each macro with its body in the input line, and
then printing the line.
Think about the tradeoffs in this version of simplicity versus
program execution time.</P
><p class="para">The next version (<kbd class="command">m0b</KBD
>) adds file inclusion:</P
><blockquote class="screen"><pre class="screen">function dofile(fname) {
	while (getline &lt;fname &gt; 0) {
		if (/^@define[ \t]/) {		# @define name value
			name = $2
			$1 = $2 = &quot;&quot;; sub(/^[ \t]+/, &quot;&quot;)
			symtab[name] = $0
		} else if (/^@include[ \t]/)	# @include filename
			dofile($2)
		else {				# Anywhere in line @name@
			for (i in symtab)
				gsub(&quot;@&quot; i &quot;@&quot;, symtab[i])
			print
		}
	}
	close(fname)
}
BEGIN {
	if (ARGC == 2)
		dofile(ARGV[1])
	else
		dofile(&quot;/dev/stdin&quot;)
}</PRE
></BLOCKQUOTE
><p class="para">Note the way <kbd class="command">dofile()</KBD
> is called recursively to handle nested
include files.</P
><p class="para">With all of that introduction out of the way, here is the full-blown
<kbd class="command">m1</KBD
> program.</P
><blockquote class="screen"><pre class="screen">#! /bin/awk -f
# NAME
#
# m1
#
# USAGE
#
# awk -f m1.awk [file...]
#
# DESCRIPTION
#
# M1 copies its input file(s) to its output unchanged except as modified by
# certain &quot;macro expressions.&quot;  The following lines define macros for
# subsequent processing:
#
#     @comment Any text
#     @@                     same as @comment
#     @define name value
#     @default name value    set if name undefined
#     @include filename
#     @if varname            include subsequent text if varname != 0
#     @unless varname        include subsequent text if varname == 0
#     @fi                    terminate @if or @unless
#     @ignore DELIM          ignore input until line that begins with DELIM
#     @stderr stuff          send diagnostics to standard error
#
# A definition may extend across many lines by ending each line with
# a backslash, thus quoting the following newline.
#
# Any occurrence of @name@ in the input is replaced in the output by
# the corresponding value.
#
# @name at beginning of line is treated the same as @name@.
#
# BUGS
#
# M1 is three steps lower than m4.  You'll probably miss something
# you have learned to expect.
#
# AUTHOR
#
# Jon L. Bentley, jlb@research.bell-labs.com
#

function error(s) {
	print &quot;m1 error: &quot; s | &quot;cat 1&gt;&amp;2&quot;; exit 1
}

function dofile(fname,  savefile, savebuffer, newstring) {
	if (fname in activefiles)
		error(&quot;recursively reading file: &quot; fname)
	activefiles[fname] = 1
	savefile = file; file = fname
	savebuffer = buffer; buffer = &quot;&quot;
	while (readline() != EOF) {
		if (index($0, &quot;@&quot;) == 0) {
			print $0
		} else if (/^@define[ \t]/) {
			dodef()
		} else if (/^@default[ \t]/) {
			if (!($2 in symtab))
				dodef()
		} else if (/^@include[ \t]/) {
			if (NF != 2) error(&quot;bad include line&quot;)
			dofile(dosubs($2))
		} else if (/^@if[ \t]/) {
			if (NF != 2) error(&quot;bad if line&quot;)
			if (!($2 in symtab) || symtab[$2] == 0)
				gobble()
		} else if (/^@unless[ \t]/) {
			if (NF != 2) error(&quot;bad unless line&quot;)
			if (($2 in symtab) &amp;&amp; symtab[$2] != 0)
				gobble()
		} else if (/^@fi([ \t]?|$)/) { # Could do error checking here
		} else if (/^@stderr[ \t]?/) { 
			print substr($0, 9) | &quot;cat 1&gt;&amp;2&quot;
		} else if (/^@(comment|@)[ \t]?/) {
		} else if (/^@ignore[ \t]/) { # Dump input until $2
			delim = $2
			l = length(delim)
			while (readline() != EOF)
				if (substr($0, 1, l) == delim)
					break
		} else {
			newstring = dosubs($0)
			if ($0 == newstring || index(newstring, &quot;@&quot;) == 0)
				print newstring
			else
				buffer = newstring &quot;\n&quot; buffer
		}
	}
	close(fname)
	delete activefiles[fname]
	file = savefile
	buffer = savebuffer
}

# Put next input line into global string &quot;buffer&quot;
# Return &quot;EOF&quot; or &quot;&quot; (null string)

function readline(  i, status) {
	status = &quot;&quot;
	if (buffer != &quot;&quot;) {
		i = index(buffer, &quot;\n&quot;)
		$0 = substr(buffer, 1, i-1)
		buffer = substr(buffer, i+1)
	} else {
		# Hume: special case for non v10: if (file == &quot;/dev/stdin&quot;)
		if (getline &lt;file &lt;= 0)
			status = EOF
	}
	# Hack: allow @Mname at start of line w/o closing @
	if ($0 ~ /^@[A-Z][a-zA-Z0-9]*[ \t]*$/)
		sub(/[ \t]*$/, &quot;@&quot;)
	return status
}

function gobble(  ifdepth) {
	ifdepth = 1
	while (readline() != EOF) {
		if (/^@(if|unless)[ \t]/)
			ifdepth++
		if (/^@fi[ \t]?/ &amp;&amp; --ifdepth &lt;= 0)
			break
	}
}

function dosubs(s,  l, r, i, m) {
	if (index(s, &quot;@&quot;) == 0)
		return s
	l = &quot;&quot;	# Left of current pos; ready for output
	r = s	# Right of current; unexamined at this time
	while ((i = index(r, &quot;@&quot;)) != 0) {
		l = l substr(r, 1, i-1)
		r = substr(r, i+1)	# Currently scanning @
		i = index(r, &quot;@&quot;)
		if (i == 0) {
			l = l &quot;@&quot;
			break
		}
		m = substr(r, 1, i-1)
		r = substr(r, i+1)
		if (m in symtab) {
			r = symtab[m] r
		} else {
			l = l &quot;@&quot; m
			r = &quot;@&quot; r
		}
	}
	return l r
}

function dodef(fname,  str, x) {
	name = $2
	sub(/^[ \t]*[^ \t]+[ \t]+[^ \t]+[ \t]*/, &quot;&quot;)  # OLD BUG: last * was +
	str = $0
	while (str ~ /\\$/) {
		if (readline() == EOF)
			error(&quot;EOF inside definition&quot;)
		x = $0
		sub(/^[ \t]+/, &quot;&quot;, x)
		str = substr(str, 1, length(str)-1) &quot;\n&quot; x
	}
	symtab[name] = str
}

BEGIN {	EOF = &quot;EOF&quot;
	if (ARGC == 1)
		dofile(&quot;/dev/stdin&quot;)
	else if (ARGC &gt;= 2) {
		for (i = 1; i &lt; ARGC; i++)
			dofile(ARGV[i])
	} else
		error(&quot;usage: m1 [fname...]&quot;)
}</PRE
></BLOCKQUOTE
><div class="sect2"><h3 class="sect2"><a class="title" name="SEDAWK-CH-13-SECT-0.0.0.10">13.10.1 Program Notes for m1</A
></H3
><p class="para">The program is nicely modular, with an <b class="emphasis.bold">error()</B
> function
similar to the one presented in <a class="xref" href="ch11_01.htm" webstripperlinkwas="ch11_01.htm" title="A Flock of awks">Chapter 11, A Flock of awks</A
>, and each task cleanly
divided into separate functions.</P
><p class="para">The main program occurs in the <kbd class="command">BEGIN</KBD
> procedure at the bottom.
It simply processes either standard input, if there are no arguments,
or all of the files named on the command line.</P
><p class="para">The high-level processing happens in the <b class="emphasis.bold">dofile()</B
> function, which
reads one line at a time, and decides what to do with each line. The <b class="emphasis.bold">activefiles</B
> array keeps track of open files.
The variable <b class="emphasis.bold">fname</B
> indicates the current file to read data from.
When an &quot;@include&quot; directive is seen, <b class="emphasis.bold">dofile()</B
> simply calls itself
recursively on the new file, as in <kbd class="command">m0b</KBD
>.
Interestingly, the included filename is first processed for macros.
Read this function carefully&nbsp;- there are some nice tricks here.</P
><p class="para">The <b class="emphasis.bold">readline()</B
> function manages the &quot;pushback.&quot; After expanding
a macro, macro processors examine the newly created text for any additional
macro names.  Only after all expanded text has been processed and
sent to the output does the program get a fresh line of input.</P
><p class="para">The <b class="emphasis.bold">dosubs()</B
> function actually performs the macro substitution.
It processes the line left-to-right, replacing macro names with their
bodies. The rescanning of the new line is left to the higher-level
logic that is jointly managed by <b class="emphasis.bold">readline()</B
> and <b class="emphasis.bold">dofile()</B
>.
This version is considerably more efficient than the brute-force
approach used in the <kbd class="command">m0</KBD
> programs.</P
><p class="para">Finally, the <b class="emphasis.bold">dodef()</B
> function handles the defining of macros.
It saves the macro name from $2, and then uses <b class="emphasis.bold">sub()</B
> to remove
the first two fields.
The new value of $0 now contains just (the first line of) the macro body.
The <cite class="citetitle">Computer Language</CITE
> article explains that <b class="emphasis.bold">sub()</B
> is used
on purpose, in order to preserve whitespace in the macro body.
Simply assigning the empty string to $1 and $2 would rebuild the record,
but with all occurrences of whitespace collapsed into single occurrences
of the value of <b class="emphasis.bold">OFS</B
> (a single blank).
The function then proceeds to gather the rest of the macro body, indicated
by lines that end with a &quot;\&quot;.
This is an additional improvement over <kbd class="command">m0</KBD
>: macro bodies can be
more than one line long.</P
><p class="para">The rest of the program is concerned with conditional inclusion or
exclusion of text; this part is straightforward. What's nice is that
these conditionals can be nested inside each other.</P
><p class="para"><kbd class="command">m1</KBD
> is a very nice start at a macro processor.  You might want to
think about how you could expand upon it; for instance, by allowing
conditionals to have an &quot;@else&quot; clause; processing the command line
for macro definitions; &quot;undefining&quot; macros, and the other sorts of
things that macro processors usually do.</P
><p class="para">Some other extensions suggested by Jon Bentley are:

<ol class="orderedlist"><li class="listitem"><p class="para">Add &quot;@shell DELIM shell line here,&quot; which would read input lines
up to &quot;DELIM,&quot; and send the expanded output through a pipe to the
given shell command.</P
></LI
><li class="listitem"><p class="para">Add commands &quot;@longdef&quot; and &quot;@longend.&quot; These commands would define
macros with long bodies, i.e., those that extend over more than one
line, simplifying the logic in <kbd class="command">dodoef()</KBD
>.</P
></LI
><li class="listitem"><p class="para">Add &quot;@append MacName MoreText,&quot; like &quot;.am&quot; in <kbd class="command">troff</KBD
>.
This macro in <kbd class="command">troff</KBD
> appends text to an already defined macro.
In <kbd class="command">m1</KBD
>, this would allow you to add on to the body of an
already defined macro.</P
></LI
><li class="listitem"><p class="para">Avoid the V10 <i class="filename">/dev/stdin</I
> special file.
The Bell Labs UNIX systems[1]
have a special file actually named <i class="filename">/dev/stdin</I
>,
that gives you access to standard input.
It occurs to me that the use of <b class="emphasis.bold">&quot;-&quot;</B
> would do the trick, quite
portably.  This is also not a real issue if you use gawk or the Bell
Labs awk, which interpret the special file name <i class="filename">/dev/stdin</I
>
internally (see Chapter 11).</P
><blockquote class="footnote"><p class="para">[1] And some other UNIX systems, as well.</P
></BLOCKQUOTE
></LI
></OL
></P
><p class="para">As a final note, Jon often makes use of awk in two of his
books, <cite class="citetitle">Programming Pearls</CITE
>, and 
<cite class="citetitle">More Programming Pearls&nbsp;- Confessions of a Coder</CITE
> (both published by Addison-Wesley).
These books are both excellent reading.</P
></DIV
><a class="indexterm" name="AUTOID-11657"></A
><a class="indexterm" name="AUTOID-11658"></A
></DIV
><div class="htmlnav"><p></P
><hr align="LEFT" width="515" title="footer"><table width="515" border="0" cellspacing="0" cellpadding="0"><tr><td align="LEFT" valign="TOP" width="172"><a class="SECT1" href="ch13_09.htm" webstripperlinkwas="ch13_09.htm" title="13.9 transpose&nbsp;- Perform a Matrix Transposition"><img src="../gifs/txtpreva.gif" webstripperlinkwas="../gifs/txtpreva.gif" alt="Previous: 13.9 transpose&nbsp;- Perform a Matrix Transposition" border="0"></A
></TD
><td align="CENTER" valign="TOP" width="171"><a class="book" href="index.htm" webstripperlinkwas="http://www.ms.itb.ac.id/buku/unix-bookshelf/sedawk/index.htm" title="sed &amp; awk"><img src="../gifs/txthome.gif" webstripperlinkwas="../gifs/txthome.gif" alt="sed &amp; awk" border="0"></A
></TD
><td align="RIGHT" valign="TOP" width="172"><a class="APPENDIX" href="appa_01.htm" webstripperlinkwas="appa_01.htm" title="A. Quick Reference for sed"><img src="../gifs/txtnexta.gif" webstripperlinkwas="../gifs/txtnexta.gif" alt="Next: A. Quick Reference for sed" border="0"></A
></TD
></TR
><tr><td align="LEFT" valign="TOP" width="172">13.9 transpose&nbsp;- Perform a Matrix Transposition</TD
><td align="CENTER" valign="TOP" width="171"><a class="index" href="index/idx_0.htm" webstripperlinkwas="index/idx_0.htm" title="Book Index"><img src="../gifs/index.gif" webstripperlinkwas="../gifs/index.gif" alt="Book Index" border="0"></A
></TD
><td align="RIGHT" valign="TOP" width="172">A. Quick Reference for sed</TD
></TR
></TABLE
><hr align="LEFT" width="515" title="footer"><img src="../gifs/smnavbar.gif" webstripperlinkwas="../gifs/smnavbar.gif" usemap="#map" border="0" alt="The UNIX CD Bookshelf Navigation"><map name="map"><area shape="RECT" coords="0,0,73,21" href="../index.html" webstripperlinkwas="http://www.ms.itb.ac.id/buku/unix-bookshelf/index.html" alt="The UNIX CD Bookshelf"><area shape="RECT" coords="74,0,163,21" href="../upt/index.htm" webstripperlinkwas="http://www.ms.itb.ac.id/buku/unix-bookshelf/upt/index.htm" alt="UNIX Power Tools"><area shape="RECT" coords="164,0,257,21" href="../unixnut/index.htm" webstripperlinkwas="http://www.ms.itb.ac.id/buku/unix-bookshelf/unixnut/index.htm" alt="UNIX in a Nutshell"><area shape="RECT" coords="258,0,321,21" href="../vi/index.htm" webstripperlinkwas="http://www.ms.itb.ac.id/buku/unix-bookshelf/vi/index.htm" alt="Learning the vi Editor"><area shape="RECT" coords="322,0,378,21" href="index.htm" webstripperlinkwas="http://www.ms.itb.ac.id/buku/unix-bookshelf/sedawk/index.htm" alt="sed &amp; awk"><area shape="RECT" coords="379,0,438,21" href="../ksh/index.htm" webstripperlinkwas="http://www.ms.itb.ac.id/buku/unix-bookshelf/ksh/index.htm" alt="Learning the Korn Shell"><area shape="RECT" coords="439,0,514,21" href="../lrnunix/index.htm" webstripperlinkwas="http://www.ms.itb.ac.id/buku/unix-bookshelf/lrnunix/index.htm" alt="Learning the UNIX Operating System"></MAP
></DIV
></BODY
></HTML
>
