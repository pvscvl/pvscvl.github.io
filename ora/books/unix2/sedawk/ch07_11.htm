<html><head><title>[Chapter 7] 7.11 Information Retrieval</TITLE
><meta name="DC.title" content="sed &amp; awk"><meta name="DC.creator" content="Dale Dougherty &amp; Arnold Robbins"><meta name="DC.publisher" content="O'Reilly &amp; Associates, Inc."><meta name="DC.date" content="1998-08-03T20:58:15Z"><meta name="DC.type" content="Text.Monograph"><meta name="DC.format" content="text/html" scheme="MIME"><meta name="DC.source" content="1-56592-225-5" scheme="ISBN"><meta name="DC.language" content="en-US"><meta name="generator" content="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><link rev="made" href="mailto:online-books@oreilly.com" title="Online Books Comments"><link rel="up" href="ch07_01.htm" webstripperlinkwas="ch07_01.htm" title="7. Writing Scripts for awk"><link rel="prev" href="ch07_10.htm" webstripperlinkwas="ch07_10.htm" title="7.10 Passing Parameters Into a Script"><link rel="next" href="ch08_01.htm" webstripperlinkwas="ch08_01.htm" title="8. Conditionals, Loops, and Arrays"></HEAD
><body bgcolor="#FFFFFF" text="#000000"><div class="htmlnav"><h1><img src="gifs/smbanner.gif" webstripperlinkwas="gifs/smbanner.gif" alt="sed &amp; awk" usemap="#srchmap" border="0"></H1
><map name="srchmap"><area shape="RECT" coords="0,0,466,65" href="index.htm" webstripperlinkwas="http://www.ms.itb.ac.id/buku/unix-bookshelf/sedawk/index.htm" alt="sed &amp; awk"><area shape="RECT" coords="467,0,514,18" href="jobjects/fsearch.htm" webstripperlinkwas="jobjects/fsearch.htm" alt="Search this book"></MAP
><table width="515" border="0" cellspacing="0" cellpadding="0"><tr><td align="LEFT" valign="TOP" width="172"><a class="SECT1" href="ch07_10.htm" webstripperlinkwas="ch07_10.htm" title="7.10 Passing Parameters Into a Script"><img src="../gifs/txtpreva.gif" webstripperlinkwas="../gifs/txtpreva.gif" alt="Previous: 7.10 Passing Parameters Into a Script" border="0"></A
></TD
><td align="CENTER" valign="TOP" width="171"><b><font face="ARIEL,HELVETICA,HELV,SANSERIF" size="-1">Chapter 7<br>Writing Scripts for awk</FONT
></B
></TD
><td align="RIGHT" valign="TOP" width="172"><a class="CHAPTER" href="ch08_01.htm" webstripperlinkwas="ch08_01.htm" title="8. Conditionals, Loops, and Arrays"><img src="../gifs/txtnexta.gif" webstripperlinkwas="../gifs/txtnexta.gif" alt="Next: 8. Conditionals, Loops, and Arrays" border="0"></A
></TD
></TR
></TABLE
>&nbsp;<hr align="LEFT" width="515" title="footer"></DIV
><div class="SECT1"><h2 class="sect1"><a class="title" name="SEDAWK-CH-7-SECT-11">7.11 Information Retrieval</A
></H2
><p class="para"><a class="indexterm" name="CH07.FILE3"></A
><a class="indexterm" name="CH07.FILE4"></A
>An awk program can be used to retrieve information from
a database, the database basically being any kind of 
text file.  The more structured the text file,
the easier it is to work with, although the structure might be
no more than a line consisting of individual words.</P
><p class="para">The list of acronyms below is a simple database.</P
><blockquote class="screen"><pre class="screen">$ <code class="userinput"><b>cat acronyms</B
></CODE
>
BASIC	Beginner's All-Purpose Symbolic Instruction Code
CICS	Customer Information Control System
COBOL	Common Business Oriented Language
DBMS	Data Base Management System
GIGO	Garbage In, Garbage Out
GIRL 	Generalized Information Retrieval Language</PRE
></BLOCKQUOTE
><p class="para">A tab is used as the field separator.
We're going to look at a program
that takes an acronym as input and displays
the appropriate line from the database as output.
(In the next chapter, we're going to 
look at two other programs that use
the acronym database.
One program reads the list of acronyms
and then finds occurrences of these acronyms in another file. 
The other program locates the first occurrence of
these acronyms in a text file and inserts the description
of the acronym.) </P
><p class="para">The shell script that we develop is named <kbd class="command">acro</KBD
>.
It takes the first 
argument from the command line (the name of the acronym) 
and passes it to the awk script.
The <kbd class="command">acro</KBD
> script follows: </P
><blockquote class="screen"><pre class="screen">$ <code class="userinput"><b>cat acro</B
></CODE
>
#! /bin/sh
# assign shell's $1 to awk search variable
awk '$1 == search' search=$1 acronyms</PRE
></BLOCKQUOTE
><p class="para">The first argument specified on the shell command line ($1) is assigned to
the variable named <b class="emphasis.bold">search</B
>; this variable is
passed as a parameter into the awk program. 
Parameters passed to an awk program 
are specified <em class="emphasis">after</EM
> the script section. 
(This gets somewhat confusing, because <b class="emphasis.bold">$1</B
> inside the awk
program represents the first field of each input line, 
while <b class="emphasis.bold">$1</B
> in the shell represents the first argument supplied
on the command line.)</P
><p class="para">The example below demonstrates how this program can be used
to find a particular acronym on our list.</P
><blockquote class="screen"><pre class="screen">$ <code class="userinput"><b>acro CICS</B
></CODE
>
CICS Customer Information Control System</PRE
></BLOCKQUOTE
><p class="para">Notice that we tested the parameter as a string (<b class="emphasis.bold">$1 == search</B
>).
We could also have written this as a regular expression match
(<b class="emphasis.bold">$1 ~ search</B
>).</P
><div class="sect2"><h3 class="sect2"><a class="title" name="SEDAWK-CH-7-SECT-11.1">7.11.1 Finding a Glitch</A
></H3
><p class="para">A net posting was once forwarded to one of us because it contained
a problem that could be solved using awk.
Here's the original posting by Emmett Hogan:</P
><blockquote class="screen"><pre class="screen">I have been trying to rewrite a sed/tr/fgrep script that we use quite
a bit here in Perl, but have thus far been unsuccessful...hence this
posting.  Having never written anything in perl, and not wishing to
wait for the Nutshell Perl Book, I figured I'd tap the knowledge of this
group.

Basically, we have several files which have the format:

item	info line 1
	info line 2
	  .
	  .
	  .
	info line n

Where each info line refers to the item and is indented by either
spaces or tabs.  Each item &quot;block&quot; is separated by a blank line.

What I need to do, is to be able to type:

info glitch filename

Where info is the name of the perl script, glitch is what I want to
find out about, and filename is the name of the file with the
information in it.  The catch is that I need it to print the entire
&quot;block&quot; if it finds glitch anywhere in the file, i.e.:

machine		Sun 3/75
		8 meg memory
		Prone to memory glitches
		more info
		more info

would get printed if you looked for &quot;glitch&quot; along with any other
&quot;blocks&quot; which contained the word glitch.

Currently we are using the following script:

#!/bin/csh -f
#
sed '/^ /\!s/^/@/' $2 | tr '\012@' '@\012' | fgrep -i $1 | tr '@' '\012'

Which is in a word....SLOW.

I am sure Perl can do it faster, better, etc...but I cannot figure it out.

Any, and all, help is greatly appreciated.

Thanks in advance,
Emmett

-------------------------------------------------------------------
Emmett Hogan              Computer Science Lab, SRI International</PRE
></BLOCKQUOTE
><p class="para">The problem yielded a solution based on awk.  You may want to try to
tackle the problem yourself before reading any further.  The solution
relies on awk's multiline record capability and requires that you be
able to pass the search string as a command-line parameter.</P
><p class="para">Here's the <kbd class="command">info</KBD
> script using awk:</P
><blockquote class="screen"><pre class="screen">awk 'BEGIN { FS = &quot;\n&quot;; RS = &quot;&quot; }
$0 ~ search { print $0 }' search=$1 $2</PRE
></BLOCKQUOTE
><p class="para">Given a test file with multiple entries, <kbd class="command">info</KBD
> was tested
to see if it could find the word &quot;glitch.&quot;</P
><blockquote class="screen"><pre class="screen">$ <code class="userinput"><b>info glitch glitch.test</B
></CODE
>
machine		Sun 3/75
		8 meg memory
		Prone to memory glitches
		more info
		more info</PRE
></BLOCKQUOTE
><p class="para">In the next chapter, we look at conditional and looping
constructs, and arrays.</P
></DIV
><a class="indexterm" name="AUTOID-6277"></A
><a class="indexterm" name="AUTOID-6278"></A
></DIV
><div class="htmlnav"><p></P
><hr align="LEFT" width="515" title="footer"><table width="515" border="0" cellspacing="0" cellpadding="0"><tr><td align="LEFT" valign="TOP" width="172"><a class="SECT1" href="ch07_10.htm" webstripperlinkwas="ch07_10.htm" title="7.10 Passing Parameters Into a Script"><img src="../gifs/txtpreva.gif" webstripperlinkwas="../gifs/txtpreva.gif" alt="Previous: 7.10 Passing Parameters Into a Script" border="0"></A
></TD
><td align="CENTER" valign="TOP" width="171"><a class="book" href="index.htm" webstripperlinkwas="http://www.ms.itb.ac.id/buku/unix-bookshelf/sedawk/index.htm" title="sed &amp; awk"><img src="../gifs/txthome.gif" webstripperlinkwas="../gifs/txthome.gif" alt="sed &amp; awk" border="0"></A
></TD
><td align="RIGHT" valign="TOP" width="172"><a class="CHAPTER" href="ch08_01.htm" webstripperlinkwas="ch08_01.htm" title="8. Conditionals, Loops, and Arrays"><img src="../gifs/txtnexta.gif" webstripperlinkwas="../gifs/txtnexta.gif" alt="Next: 8. Conditionals, Loops, and Arrays" border="0"></A
></TD
></TR
><tr><td align="LEFT" valign="TOP" width="172">7.10 Passing Parameters Into a Script</TD
><td align="CENTER" valign="TOP" width="171"><a class="index" href="index/idx_0.htm" webstripperlinkwas="index/idx_0.htm" title="Book Index"><img src="../gifs/index.gif" webstripperlinkwas="../gifs/index.gif" alt="Book Index" border="0"></A
></TD
><td align="RIGHT" valign="TOP" width="172">8. Conditionals, Loops, and Arrays</TD
></TR
></TABLE
><hr align="LEFT" width="515" title="footer"><img src="../gifs/smnavbar.gif" webstripperlinkwas="../gifs/smnavbar.gif" usemap="#map" border="0" alt="The UNIX CD Bookshelf Navigation"><map name="map"><area shape="RECT" coords="0,0,73,21" href="../index.html" webstripperlinkwas="http://www.ms.itb.ac.id/buku/unix-bookshelf/index.html" alt="The UNIX CD Bookshelf"><area shape="RECT" coords="74,0,163,21" href="../upt/index.htm" webstripperlinkwas="http://www.ms.itb.ac.id/buku/unix-bookshelf/upt/index.htm" alt="UNIX Power Tools"><area shape="RECT" coords="164,0,257,21" href="../unixnut/index.htm" webstripperlinkwas="http://www.ms.itb.ac.id/buku/unix-bookshelf/unixnut/index.htm" alt="UNIX in a Nutshell"><area shape="RECT" coords="258,0,321,21" href="../vi/index.htm" webstripperlinkwas="http://www.ms.itb.ac.id/buku/unix-bookshelf/vi/index.htm" alt="Learning the vi Editor"><area shape="RECT" coords="322,0,378,21" href="index.htm" webstripperlinkwas="http://www.ms.itb.ac.id/buku/unix-bookshelf/sedawk/index.htm" alt="sed &amp; awk"><area shape="RECT" coords="379,0,438,21" href="../ksh/index.htm" webstripperlinkwas="http://www.ms.itb.ac.id/buku/unix-bookshelf/ksh/index.htm" alt="Learning the Korn Shell"><area shape="RECT" coords="439,0,514,21" href="../lrnunix/index.htm" webstripperlinkwas="http://www.ms.itb.ac.id/buku/unix-bookshelf/lrnunix/index.htm" alt="Learning the UNIX Operating System"></MAP
></DIV
></BODY
></HTML
>
