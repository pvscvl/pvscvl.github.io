<html><head><title>[Chapter 8] 8.4 Arrays</TITLE
><meta name="DC.title" content="sed &amp; awk"><meta name="DC.creator" content="Dale Dougherty &amp; Arnold Robbins"><meta name="DC.publisher" content="O'Reilly &amp; Associates, Inc."><meta name="DC.date" content="1998-08-03T20:58:54Z"><meta name="DC.type" content="Text.Monograph"><meta name="DC.format" content="text/html" scheme="MIME"><meta name="DC.source" content="1-56592-225-5" scheme="ISBN"><meta name="DC.language" content="en-US"><meta name="generator" content="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><link rev="made" href="mailto:online-books@oreilly.com" title="Online Books Comments"><link rel="up" href="ch08_01.htm" webstripperlinkwas="ch08_01.htm" title="8. Conditionals, Loops, and Arrays"><link rel="prev" href="ch08_03.htm" webstripperlinkwas="ch08_03.htm" title="8.3 Other Statements That Affect Flow Control"><link rel="next" href="ch08_05.htm" webstripperlinkwas="ch08_05.htm" title="8.5 An Acronym Processor"></HEAD
><body bgcolor="#FFFFFF" text="#000000"><div class="htmlnav"><h1><img src="gifs/smbanner.gif" webstripperlinkwas="gifs/smbanner.gif" alt="sed &amp; awk" usemap="#srchmap" border="0"></H1
><map name="srchmap"><area shape="RECT" coords="0,0,466,65" href="index.htm" webstripperlinkwas="http://www.ms.itb.ac.id/buku/unix-bookshelf/sedawk/index.htm" alt="sed &amp; awk"><area shape="RECT" coords="467,0,514,18" href="jobjects/fsearch.htm" webstripperlinkwas="jobjects/fsearch.htm" alt="Search this book"></MAP
><table width="515" border="0" cellspacing="0" cellpadding="0"><tr><td align="LEFT" valign="TOP" width="172"><a class="SECT1" href="ch08_03.htm" webstripperlinkwas="ch08_03.htm" title="8.3 Other Statements That Affect Flow Control"><img src="../gifs/txtpreva.gif" webstripperlinkwas="../gifs/txtpreva.gif" alt="Previous: 8.3 Other Statements That Affect Flow Control" border="0"></A
></TD
><td align="CENTER" valign="TOP" width="171"><b><font face="ARIEL,HELVETICA,HELV,SANSERIF" size="-1">Chapter 8<br>Conditionals, Loops, and Arrays</FONT
></B
></TD
><td align="RIGHT" valign="TOP" width="172"><a class="SECT1" href="ch08_05.htm" webstripperlinkwas="ch08_05.htm" title="8.5 An Acronym Processor"><img src="../gifs/txtnexta.gif" webstripperlinkwas="../gifs/txtnexta.gif" alt="Next: 8.5 An Acronym Processor" border="0"></A
></TD
></TR
></TABLE
>&nbsp;<hr align="LEFT" width="515" title="footer"></DIV
><div class="SECT1"><h2 class="sect1"><a class="title" name="SEDAWK-CH-8-SECT-4">8.4 Arrays</A
></H2
><p class="para"><a class="indexterm" name="CH08.ARRAY"></A
><a class="indexterm" name="AUTOID-6677"></A
>An array is a variable that can be used to store a set of values.
Usually the values are related in some way.  Individual elements are
accessed by their <em class="emphasis">index</EM
> in the array. Each index
is enclosed in square brackets.  The following statement assigns a
value to an element of an array:</P
><blockquote class="literallayout"><p class="literallayout"><code class="replaceable"><i>array</I
></CODE
>[<code class="replaceable"><i>subscript</I
></CODE
>] = <code class="replaceable"><i>value</I
></CODE
></P
></BLOCKQUOTE
><p class="para">In awk, you don't have to declare the size of the array; you only have
to use the identifier as an array.  This is best done by assigning a
value to an array element.  For instance, the following example
assigns the string <code class="literal">&quot;</CODE
><b class="emphasis.bold">cherry</B
><code class="literal">&quot;</CODE
> to an element of the array named
<kbd class="command">flavor</KBD
>.</P
><p class="para"><blockquote class="screen"><pre class="screen">flavor[1] = &quot;cherry&quot;</PRE
></BLOCKQUOTE
></P
><p class="para">The index or subscript of this element of the array is &quot;1&quot;.  The
following statement prints the string &quot;cherry&quot;:</P
><p class="para"><blockquote class="screen"><pre class="screen">print flavor[1]</PRE
></BLOCKQUOTE
></P
><p class="para"><a class="indexterm" name="AUTOID-6695"></A
>Loops can be used to load and extract elements from arrays.  For
instance, if the array <kbd class="command">flavor</KBD
> has five elements,
you can write a loop to print each element:</P
><p class="para"><blockquote class="screen"><pre class="screen">flavor_count = 5
for (x = 1; x &lt;= flavor_count; ++x)
	print flavor[x]</PRE
></BLOCKQUOTE
></P
><p class="para"><a class="indexterm" name="AUTOID-6702"></A
>One way that arrays are used in awk is to store a value from each
record, using the record number as the index to the array.
Let's suppose we wanted to keep track of the averages calculated for each
student and come up with a class average.  Each time a record is read
we make the following assignment.</P
><p class="para"><blockquote class="screen"><pre class="screen">student_avg[NR] = avg</PRE
></BLOCKQUOTE
></P
><p class="para"><a class="indexterm" name="AUTOID-6708"></A
><a class="indexterm" name="AUTOID-6710"></A
>The system variable <kbd class="command">NR</KBD
> is used as the subscript for
the array because it is incremented for each record.  When the first
record is read, the value of <kbd class="command">avg</KBD
> is placed in
<kbd class="command">student_avg[1]</KBD
>; for the second record, the value is
placed in <kbd class="command">student_avg[2]</KBD
>, and so on.  After we have
read all of the records, we have a list of averages in the array
<kbd class="command">student_avg</KBD
>.  In an <kbd class="command">END</KBD
> rule, we
can average all of these grades by writing a loop to get the total of
the grades and then dividing it by the value of <kbd class="command">NR</KBD
>.
Then we can compare each student average to the class average to
collect totals for the number of students at or above average and the
number below.</P
><p class="para"><blockquote class="screen"><pre class="screen">END {
	for ( x = 1; x &lt;= NR; x++ ) 
		class_avg_total += student_avg[x]
	
	class_average = class_avg_total / NR
	
	for ( x = 1; x &lt;= NR; x++ )
		if (student_avg[x] &gt;= class_average)
			++above_average
		else
			++below_average
	
	print &quot;Class Average: &quot;, class_average
	print &quot;At or Above Average: &quot;, above_average
	print &quot;Below Average: &quot;, below_average
}</PRE
></BLOCKQUOTE
></P
><p class="para">There are two <kbd class="command">for</KBD
> loops for accessing the elements
of the array.  The first one totals the averages so that it can be
divided by the number of student records.  The next loop retrieves
each student average so that it can be compared to the class average.
If it is at or above average, we increment the variable
<kbd class="command">above_average</KBD
>; otherwise, we increment
<kbd class="command">below_average</KBD
>.</P
><div class="sect2"><h3 class="sect2"><a class="title" name="SEDAWK-CH-8-SECT-4.1">8.4.1 Associative Arrays</A
></H3
><p class="para"><a class="indexterm" name="CH08.ASSOC1"></A
>In awk, all arrays are <em class="emphasis">associative</EM
> arrays.  What
makes an associative array unique is that its index can be a string or
a number.</P
><p class="para">In most programming languages, the indices of arrays are exclusively
numeric.  In these implementations, an array is a sequence of
locations where values are stored.  The indices of the array are
derived from the order in which the values are stored.  There is no
need to keep track of indices.  For instance, the index of the first
element of an array is &quot;1&quot; or the first location in the array.</P
><p class="para">An associative array makes an &quot;association&quot; between the indices and
the elements of an array.  For each element of the array, a pair of
values is maintained: the index of the element and the value of the
element.  The elements are not stored in any particular order as in a
conventional array.  Thus, even though you can use numeric subscripts
in awk, the numbers do not have the same meaning that they do in other
programming languages&nbsp;- they do not necessarily refer to
sequential locations.  However, with numeric indices, you can still
access all the elements of an array in sequence, as we did in previous
examples.  You can create a loop to increment a counter that
references the elements of the array in order.</P
><p class="para">Sometimes, the distinction between numeric and string indices is
important.  For instance, if you use &quot;04&quot; as the index to an element
of the array, you cannot reference that element using &quot;4&quot; as its
subscript.  You'll see how to handle this problem in a sample program
<kbd class="command">date-month</KBD
>, shown later in this chapter.</P
><p class="para">Associative arrays are a distinctive feature of awk, and a very
powerful one that allows you to use a string as an index to another
value.  For instance, you could use a word as the index to its
definition.  If you know the word, you can retrieve the definition.</P
><p class="para">For example, you could use the first field of the input line as the
index to the second field with the following assignment:</P
><p class="para"><blockquote class="screen"><pre class="screen">array[$1] = $2</PRE
></BLOCKQUOTE
></P
><p class="para">Using this technique, we could take our list of acronyms and load it
into an array named <kbd class="command">acro</KBD
>.</P
><p class="para"><blockquote class="screen"><pre class="screen">acro[$1] = $2</PRE
></BLOCKQUOTE
></P
><p class="para">Each element of the array would be the description of an acronym and
the subscript used to retrieve the element would be the acronym
itself.  The following expression:</P
><p class="para"><blockquote class="screen"><pre class="screen">acro[&quot;BASIC&quot;]</PRE
></BLOCKQUOTE
></P
><p class="para">produces:</P
><p class="para"><blockquote class="screen"><pre class="screen">Beginner's All-Purpose Symbolic Instruction Code</PRE
></BLOCKQUOTE
></P
><p class="para"><a class="indexterm" name="AUTOID-6751"></A
>There is a special looping syntax for accessing all the elements of an
associative array.  It is a version of the <kbd class="command">for</KBD
>
loop.</P
><blockquote class="literallayout"><p class="literallayout"><kbd class="command">for</KBD
> ( <code class="replaceable"><i>variable</I
></CODE
> <kbd class="command">in</KBD
> <code class="replaceable"><i>array</I
></CODE
> )<br>     <code class="replaceable"><i>do something with array</I
></CODE
>[<code class="replaceable"><i>variable</I
></CODE
>]</P
></BLOCKQUOTE
><p class="para">The <em class="emphasis">array</EM
> is the name of an array, as it
was defined.  The <em class="emphasis">variable</EM
> is any variable,
which you can think of as a temporary variable similar to a counter
that is incremented in a conventional <kbd class="command">for</KBD
> loop.
This variable is set to a particular subscript each time through the
loop.  (Because <code class="replaceable"><i>variable</I
></CODE
> is an arbitrary
name, you often see <kbd class="command">item</KBD
> used, regardless of what
variable name was used for the subscript when the array was loaded.)
For example, the following <kbd class="command">for</KBD
> loop prints the name
of the acronym <b class="emphasis.bold">item</B
> and the definition referenced by that name,
<b class="emphasis.bold">acro[item]</B
>.</P
><p class="para"><blockquote class="screen"><pre class="screen">for ( item in acro )
	print item, acro[item]</PRE
></BLOCKQUOTE
></P
><p class="para">In this example, the print statement prints the current subscript
(&quot;BASIC,&quot; for instance) followed by the element of the
<kbd class="command">acro</KBD
> array referenced by the subscript (&quot;Beginner's
All-Purpose Symbolic Instruction Code&quot;).</P
><p class="para">This syntax can be applied to arrays with numeric subscripts.
However, the order in which the items are retrieved is somewhat
random.[2]
The order is very likely to vary among awk implementations; be careful
to write your programs so that they don't depend on any one version of
awk.</P
><blockquote class="footnote"><p class="para">[2] The technical term used in <cite class="citetitle">The AWK Programming
Language</CITE
> is &quot;implementation dependent.&quot;  </P
></BLOCKQUOTE
><p class="para"><a class="indexterm" name="AUTOID-6779"></A
>It is important to remember that all array indices in awk are strings.
Even when you use a number as an index, awk automatically converts it
to a string first.  You don't have to worry about this when you use
integer indices, since they get converted to strings as integers, no
matter what the value may be of <kbd class="command">OFMT</KBD
> (original awk
and earlier versions of new awk) or <kbd class="command">CONVFMT</KBD
> (POSIX
awk).  But if you use a real number as an index, the number to string
conversion might affect you.  For instance:<a class="indexterm" name="AUTOID-6783"></A
></P
><p class="para"><blockquote class="screen"><pre class="screen">$ <kbd class="command">gawk 'BEGIN { data[1.23] = &quot;3.21&quot;; CONVFMT = &quot;%d&quot;</KBD
>
&gt; <kbd class="command">printf &quot;&lt;%s&gt;\n&quot;, data[1.23] }'</KBD
>
&lt;&gt;</PRE
></BLOCKQUOTE
></P
><p class="para">Here, nothing was printed between the angle brackets, since the second
time, <kbd class="command">1.23</KBD
> was converted to just
<kbd class="command">1</KBD
>, and <kbd class="command">data[&quot;1&quot;]</KBD
> has the empty
string as its value.  </P
><blockquote class="note"><p class="para"><strong>NOTE:</STRONG
> Not all implementations of awk get the number to
string conversion right when <kbd class="command">CONVFMT</KBD
> has changed
between one use of a number and the next.  Test the above example with
your awk to be sure it works correctly.</P
></BLOCKQUOTE
><p class="para">Now let's return to our student grade program for an example.  Let's
say that we wanted to report how many students got an &quot;A,&quot; how many
got a &quot;B,&quot; and so on.  Once we determine the grade, we could increment
a counter for that grade.  We could set up individual variables for
each letter grade and then test which one to increment.</P
><p class="para"><blockquote class="screen"><pre class="screen">if ( grade == &quot;A&quot; )
	++gradeA
else if (grade == &quot;B&quot; )
	++gradeB
.<br>.<br>.<br></PRE
></BLOCKQUOTE
></P
><p class="para">However, an array makes this task much easier.  We can define an array
called <kbd class="command">class_grade</KBD
>, and simply use the letter grade
(A through F) as the index to the array.</P
><p class="para"><blockquote class="screen"><pre class="screen">++class_grade[grade]</PRE
></BLOCKQUOTE
></P
><p class="para">Thus, if the grade is an &quot;A&quot; then the value of
<kbd class="command">class_grade[&quot;A&quot;]</KBD
> is incremented by one.  At the end
of the program, we can print out these values in the
<kbd class="command">END</KBD
> rule using the special <kbd class="command">for</KBD
>
loop:</P
><p class="para"><blockquote class="screen"><pre class="screen">for (letter_grade in class_grade)
     print letter_grade &quot;:&quot;, class_grade[letter_grade] | &quot;sort&quot;</PRE
></BLOCKQUOTE
></P
><p class="para">The variable <kbd class="command">letter_grade</KBD
> references a single
subscript of the array <kbd class="command">class_grade</KBD
> each time
through the loop.  The output is piped to <kbd class="command">sort</KBD
>, to
make sure the grades come out in the proper order.  (Piping output to
programs is discussed in <a class="xref" href="ch10_01.htm" webstripperlinkwas="ch10_01.htm" title="The Bottom Drawer">Chapter 10, The Bottom Drawer</A
>.)  Since this
is the last addition we make to the <kbd class="command">grades.awk</KBD
>
script, we can look at the full listing.</P
><p class="para"><blockquote class="screen"><pre class="screen"># grades.awk -- average student grades and determine 
# letter grade as well as class averages.
# $1 = student name; $2 - $NF = test scores.

# set output field separator to tab.
BEGIN { OFS = &quot;\t&quot; }

# action applied to all input lines
{ 
  # add up grades
	total = 0
	for (i = 2; i &lt;= NF; ++i)
		total += $i 
  # calculate average
	avg = total / (NF - 1)
  # assign student's average to element of array
	student_avg[NR] = avg
  # determine letter grade
	if (avg &gt;= 90)  grade = &quot;A&quot;
	else if (avg &gt;= 80) grade = &quot;B&quot;
	else if (avg &gt;= 70) grade = &quot;C&quot;
	else if (avg &gt;= 60) grade = &quot;D&quot;
	else grade = &quot;F&quot;	
  # increment counter for letter grade array
	++class_grade[grade]
  # print student name, average and letter grade
	print $1, avg, grade 
}
# print out class statistics
END {
  # calculate class average
	for (x = 1; x &lt;= NR; x++)
		class_avg_total += student_avg[x]
	class_average = class_avg_total / NR
  # determine how many above/below average
	for (x = 1; x &lt;= NR; x++)
		if (student_avg[x] &gt;= class_average)
			++above_average
		else
			++below_average
  # print results
	print &quot;&quot;
	print &quot;Class Average: &quot;, class_average
	print &quot;At or Above Average: &quot;, above_average
	print &quot;Below Average: &quot;, below_average     
  # print number of students per letter grade
	for (letter_grade in class_grade)
		print letter_grade &quot;:&quot;, class_grade[letter_grade] | &quot;sort&quot;
}</PRE
></BLOCKQUOTE
></P
><p class="para">Here's a sample run:</P
><p class="para"><blockquote class="screen"><pre class="screen">$ <code class="userinput"><b>cat grades.test</B
></CODE
>
mona 70 77 85 83 70 89
john 85 92 78 94 88 91
andrea 89 90 85 94 90 95
jasper 84 88 80 92 84 82
dunce 64 80 60 60 61 62
ellis 90 98 89 96 96 92
$<code class="userinput"><b> awk -f grades.awk grades.test</B
></CODE
>
mona    79      C
john    88      B
andrea  90.5    A
jasper  85      B
dunce   64.5    D
ellis   93.5    A

Class Average:  83.4167
At or Above Average:    4
Below Average:  2
A:      2
B:      2
C:      1
D:      1</PRE
></BLOCKQUOTE
></P
><a class="indexterm" name="AUTOID-6822"></A
></DIV
><div class="sect2"><h3 class="sect2"><a class="title" name="SEDAWK-CH-8-SECT-4.2">8.4.2 Testing for Membership in an Array</A
></H3
><p class="para"><a class="indexterm" name="AUTOID-6826"></A
><a class="indexterm" name="AUTOID-6828"></A
><a class="indexterm" name="AUTOID-6830"></A
><a class="indexterm" name="AUTOID-6833"></A
>The keyword <kbd class="command">in</KBD
> is also an operator that can be used
in a conditional expression to test that a subscript is a
<em class="emphasis">member</EM
> of an array.  The expression:</P
><p class="para"><blockquote class="screen"><pre class="screen">item in array</PRE
></BLOCKQUOTE
></P
><p class="para">returns 1 if <kbd class="command">array[item]</KBD
> exists and 0 if it does
not.  For example, the following conditional statement is true if the
string &quot;BASIC&quot; is a subscript of the array <kbd class="command">acro</KBD
>.</P
><p class="para"><blockquote class="screen"><pre class="screen">if ( &quot;BASIC&quot; in acro )
	print &quot;Found BASIC&quot;</PRE
></BLOCKQUOTE
></P
><p class="para">This is true if &quot;BASIC&quot; is a subscript used to access an element of
<kbd class="command">acro</KBD
>.  This syntax cannot tell you whether &quot;BASIC&quot;
is the value of an element of <kbd class="command">acro</KBD
>.  This
expression is the same as writing a loop to check that such a
subscript exists, although the above expression is much easier to
write, and much more efficient to execute.</P
></DIV
><div class="sect2"><h3 class="sect2"><a class="title" name="SEDAWK-CH-8-SECT-4.3">8.4.3 A Glossary Lookup Script</A
></H3
><p class="para"><a class="indexterm" name="AUTOID-6851"></A
>This program reads a series of glossary entries from a file named
<em class="emphasis">glossary</EM
> and puts them into an array.  The user
is prompted to enter a glossary term and if it is found, the
definition of the term is printed.</P
><p class="para">Here's the <kbd class="command">lookup</KBD
> program:</P
><p class="para"><blockquote class="screen"><pre class="screen">awk '# lookup -- reads local glossary file and prompts user for query

#0
BEGIN { FS = &quot;\t&quot;; OFS = &quot;\t&quot;
	# prompt user
	printf(&quot;Enter a glossary term: &quot;)
} 

#1 read local file named glossary
FILENAME == &quot;glossary&quot; {
	# load each glossary entry into an array
	entry[$1] = $2
	next
} 

#2 scan for command to exit program
$0 ~ /^(quit|[qQ]|exit|[Xx])$/ { exit }

#3 process any non-empty line 
$0 != &quot;&quot; {
	if ( $0 in entry ) {
		# it is there, print definition
		print entry[$0]
	} else
		print $0 &quot; not found&quot;
}

#4 prompt user again for another term
{
	printf(&quot;Enter another glossary term (q to quit): &quot;)
}' glossary -</PRE
></BLOCKQUOTE
></P
><p class="para">The pattern-matching rules are numbered to make this discussion
easier.  As we look at the individual rules, we'll discuss them in the
order in which they are encountered in the flow of the script.  Rule
#0 is the <kbd class="command">BEGIN</KBD
> rule, which is performed only once
before any input is read.  It sets <kbd class="command">FS</KBD
> and
<kbd class="command">OFS</KBD
> to a tab and then prompts the user to enter a
glossary item.  The response will come from standard input, but that
is read after the <i class="filename">glossary</I
> file.</P
><p class="para">Rule #1 tests to see if the current filename (the value of
<kbd class="command">FILENAME</KBD
>) is &quot;glossary&quot; and is therefore only
applied while reading input from this file.  This rule loads the
glossary entries into an array:</P
><p class="para"><blockquote class="screen"><pre class="screen">entry[term] = definition</PRE
></BLOCKQUOTE
></P
><p class="para">where $1 is the term and $2 is the definition.  The
<kbd class="command">next</KBD
> statement at the end of rule #1 is used to
skip other rules in the script and causes a new line of input to be
read.  So, until all the entries in the <i class="filename">glossary</I
>
file are read, no other rule is evaluated.</P
><p class="para">Once input from <i class="filename">glossary</I
> is exhausted, awk reads
from standard input because &quot;-&quot; is specified on the command line.
Standard input is where the user's response comes from.  Rule #3 tests
that the input line ($0) is not empty.  This rule should match
whatever the user types.  The action uses <kbd class="command">in</KBD
> to see
if the input line is an index in the array.  If it is, it simply
prints out the corresponding value. Otherwise, we tell the user that
no valid entry was found.</P
><p class="para">After rule #3, rule #4 will be evaluated.  This rule simply prompts
the user for another entry.  Note that regardless of whether a valid
entry was processed in rule #3, rule #4 is executed.  The prompt also
tells the user how to quit the program.  After this rule, awk looks
for the next line of input.</P
><p class="para">If the user chooses to quit by entering &quot;q&quot; as the next line of input,
rule #2 will be matched.  The pattern looks for a complete line
consisting of alternative words or single letters that the user might
enter to quit.  The &quot;^&quot; and &quot;$&quot; are important, signifying that the
input line contains no other characters but these; otherwise a &quot;q&quot;
appearing in a glossary entry would be matched.  Note that the
placement of this rule in the sequence of rules is significant.  It
must appear before rules #3 and #4 because these rules will match
anything, including the words &quot;quit&quot; and &quot;exit.&quot;</P
><p class="para">Let's look at how the program works.  For this example, we will make a
copy of the <i class="filename">acronyms</I
> file and use it as the
<i class="filename">glossary</I
> file.</P
><p class="para"><blockquote class="screen"><pre class="screen">$ <code class="userinput"><b>cp acronyms glossary</B
></CODE
>
$ <code class="userinput"><b>lookup</B
></CODE
>
Enter a glossary term: <code class="userinput"><b>GIGO</B
></CODE
>
Garbage in, garbage out
Enter another glossary term (q to quit): <code class="userinput"><b>BASIC</B
></CODE
>
Beginner's All-Purpose Symbolic Instruction Code
Enter another glossary term (q to quit): <code class="userinput"><b>q </B
></CODE
></PRE
></BLOCKQUOTE
></P
><p class="para">As you can see, the program is set up to prompt the user for
additional items until the user enters &quot;q&quot;.</P
><p class="para">Note that this program can be easily revised to read a glossary
anywhere on the file system, including the user's home directory.  The
shell script that invokes awk could handle command-line options that
allow the user to specify the glossary filename.  You could also read
a shared glossary file and then read a local one by writing separate
rules to process the entries.</P
></DIV
><div class="sect2"><h3 class="sect2"><a class="title" name="SEDAWK-CH-8-SECT-4.4">8.4.4 Using split() to Create Arrays</A
></H3
><p class="para"><a class="indexterm" name="AUTOID-6890"></A
><a class="indexterm" name="AUTOID-6892"></A
><a class="indexterm" name="AUTOID-6895"></A
><a class="indexterm" name="AUTOID-6898"></A
>The built-in function <kbd class="command">split()</KBD
> can parse any
string into elements of an array.  This function can be useful to
extract &quot;subfields&quot; from a field.  The syntax of the
<kbd class="command">split()</KBD
> function is:</P
><blockquote class="literallayout"><p class="literallayout"><code class="literal">n = split</CODE
>(<code class="replaceable"><i>string</I
></CODE
>, <code class="replaceable"><i>array</I
></CODE
>, <code class="replaceable"><i>separator</I
></CODE
>)</P
></BLOCKQUOTE
><p class="para"><em class="emphasis">string</EM
> is the input string to be parsed
into elements of the named <em class="emphasis">array</EM
>.  The
array's indices start at 1 and go to <code class="replaceable"><i>n</I
></CODE
>, the
number of elements in the array.  The elements will be split based on
the specified <em class="emphasis">separator</EM
> character.  If a
separator is not specified, then the field separator
(<kbd class="command">FS</KBD
>) is used.  The
<em class="emphasis">separator</EM
> can be a full regular expression,
not just a single character.  Array splitting behaves identically to
field splitting; see the section &quot;Referencing and Separating Fields&quot; in Chapter 7.</P
><p class="para">For example, if you had a record in which the first field consisted of
the person's full name, you could use the
<kbd class="command">split()</KBD
> function to extract the person's
first and last names.  The following statement breaks up the first
field into elements of the array <kbd class="command">fullname</KBD
>:</P
><p class="para"><blockquote class="screen"><pre class="screen">z = split($1, fullname, &quot; &quot;)</PRE
></BLOCKQUOTE
></P
><p class="para">A space is specified as the delimiter.  The person's first name
can be referenced as:</P
><p class="para"><blockquote class="screen"><pre class="screen">fullname[1]</PRE
></BLOCKQUOTE
></P
><p class="para">and the person's last name can be referenced as:</P
><p class="para"><blockquote class="screen"><pre class="screen">fullname[z]</PRE
></BLOCKQUOTE
></P
><p class="para">because <kbd class="command">z</KBD
> contains the number of elements in the
array.  This works, regardless of whether the person's full name
contains a middle name.  If <kbd class="command">z</KBD
> is the value returned
by <kbd class="command">split()</KBD
>, you can write a loop to read
all the elements of this array.</P
><p class="para"><blockquote class="screen"><pre class="screen">z = split($1, array, &quot; &quot;)
for (i = 1; i &lt;= z; ++i)
	print i, array[i]</PRE
></BLOCKQUOTE
></P
><p class="para">The next section contains additional examples of using the
<kbd class="command">split()</KBD
> function.</P
></DIV
><div class="sect2"><h3 class="sect2"><a class="title" name="SEDAWK-CH-8-SECT-4.5">8.4.5 Making Conversions</A
></H3
><p class="para"><a class="indexterm" name="CH08.CONV"></A
>This section looks at two examples that demonstrate similar methods of
converting output from one format to another.</P
><p class="para">When working on the index program shown in 
<a class="xref" href="ch12_01.htm" webstripperlinkwas="ch12_01.htm" title="Full-Featured Applications">Chapter 12, Full-Featured Applications</A
>, we needed a quick way to assign roman
numerals to volume numbers.  In other words, volume 4 needed to be
identified as &quot;IV&quot; in the index.  Since there was no immediate
prospect of the number of volumes exceeding 10, we wrote a script that
took as input a number between 1 and 10 and converted it to a roman
numeral.</P
><p class="para">This shell script takes the first argument from the command
line and echoes it as input to the awk program.</P
><p class="para"><blockquote class="screen"><pre class="screen">echo $1 | 
awk '# romanum -- convert number 1-10 to roman numeral

# define numerals as list of roman numerals 1-10
BEGIN { 
	# create array named numerals from list of roman numerals
	split(&quot;I,II,III,IV,V,VI,VII,VIII,IX,X&quot;, numerals, &quot;,&quot;)
}

# look for number between 1 and 10
$1 &gt; 0 &amp;&amp; $1 &lt;= 10 {
	# print specified element
	print numerals[$1]
	exit
}

{ 	print &quot;invalid number&quot;
  	exit
}'</PRE
></BLOCKQUOTE
></P
><p class="para">This script defines a list of 10 roman numerals, then uses
<kbd class="command">split()</KBD
> to load them into an array named
<kbd class="command">numerals</KBD
>.  This is done in the
<kbd class="command">BEGIN</KBD
> action because it only needs to be done once.</P
><p class="para">The second rule checks that the first field of the input line contains
a number between 1 and 10.  If it does, this number is used as the
index to the <kbd class="command">numerals</KBD
> array, retrieving the
corresponding element.  The <kbd class="command">exit</KBD
> statement
terminates the program.  The last rule is executed only if there is no
valid entry.</P
><p class="para">Here's an example of how it works:</P
><p class="para"><blockquote class="screen"><pre class="screen">$ <code class="userinput"><b>romanum 4</B
></CODE
>
IV</PRE
></BLOCKQUOTE
></P
><p class="para">Following along on the same idea, here's a script that converts dates
in the form &quot;mm-dd-yy&quot; or &quot;mm/dd/yy&quot; to &quot;month day, year.&quot;</P
><p class="para"><blockquote class="screen"><pre class="screen">awk '
# date-month -- convert mm/dd/yy or mm-dd-yy to month day, year

# build list of months and put in array. 
BEGIN { 
	# the 3-step assignment is done for printing in book
	listmonths = &quot;January,February,March,April,May,June,&quot;
	listmonths = listmonths &quot;July,August,September,&quot;
	listmonths = listmonths &quot;October,November,December&quot; 
	split(listmonths, month, &quot;,&quot;)
}

# check that there is input
$1 != &quot;&quot; {

# split on &quot;/&quot; the first input field into elements of array
	sizeOfArray = split($1, date, &quot;/&quot;)

# check that only one field is returned
	if (sizeOfArray == 1)
		# try to split on &quot;-&quot;
		sizeOfArray = split($1, date, &quot;-&quot;)

# must be invalid
	if (sizeOfArray == 1)
		exit

# add 0 to number of month to coerce numeric type 
	date[1] += 0

# print month day, year
	print month[date[1]], (date[2] &quot;, 19&quot; date[3])
}'</PRE
></BLOCKQUOTE
></P
><p class="para">This script reads from standard input.  The <kbd class="command">BEGIN</KBD
>
action creates an array named <kbd class="command">month</KBD
> whose elements
are the names of the months of the year.  The second rule verifies
that we have a non-empty input line.  The first statement in the
associated action splits the first field of input looking for
&quot;/&quot; as the delimiter.  <kbd class="command">sizeOfArray</KBD
> contains
the number of elements in the array.  If awk was unable to parse the
string, it creates the array with only one element.  Thus, we can test
the value of <kbd class="command">sizeOfArray</KBD
> to determine if we have
several elements.  If we do not, we assume that perhaps &quot;-&quot; was used
as the delimiter.  If that fails to produce an array with multiple
elements, we assume the input is invalid, and exit.  If we have
successfully parsed the input, <kbd class="command">date[1]</KBD
> contains the
number of the month.  This value can be used as the index to the array
<kbd class="command">month</KBD
>, nesting one array inside another.  However,
before using <kbd class="command">date[1]</KBD
>, we coerce the type of
<kbd class="command">date[1]</KBD
> by adding 0 to it.  While awk will
correctly interpret &quot;11&quot; as a number, leading zeros may cause a number
to be treated as a string.  Thus, &quot;06&quot; might not be recognized properly
without type coercion. The element referenced by
<kbd class="command">date[1]</KBD
> is used as the subscript for
<kbd class="command">month</KBD
>.</P
><p class="para">Here's a sample run:</P
><p class="para"><blockquote class="screen"><pre class="screen">$ <code class="userinput"><b>echo &quot;5/11/55&quot; | date-month</B
></CODE
>
May 11, 1955</PRE
></BLOCKQUOTE
></P
><a class="indexterm" name="AUTOID-6973"></A
></DIV
><div class="sect2"><h3 class="sect2"><a class="title" name="SEDAWK-CH-8-SECT-4.6">8.4.6 Deleting Elements of an Array</A
></H3
><p class="para"><a class="indexterm" name="AUTOID-6977"></A
><a class="indexterm" name="AUTOID-6980"></A
><a class="indexterm" name="AUTOID-6982"></A
>Awk provides a statement for deleting an element of an array.  The
syntax is:</P
><blockquote class="literallayout"><p class="literallayout"><kbd class="command">delete</KBD
> <code class="replaceable"><i>array</I
></CODE
>[<code class="replaceable"><i>subscript</I
></CODE
>]</P
></BLOCKQUOTE
><p class="para">The brackets are required.  This statement removes the element indexed
by <em class="emphasis">subscript</EM
> from
<em class="emphasis">array</EM
>. In particular, the
<kbd class="command">in</KBD
> test for <em class="emphasis">subscript</EM
>
will now return false.  This is different than just assigning the
empty string to that element; in that case <kbd class="command">in</KBD
> would
still be true.  See the <kbd class="command">lotto</KBD
> script in the next
chapter for an example of using the <kbd class="command">delete</KBD
>
statement.</P
></DIV
><a class="indexterm" name="AUTOID-6997"></A
></DIV
><div class="htmlnav"><p></P
><hr align="LEFT" width="515" title="footer"><table width="515" border="0" cellspacing="0" cellpadding="0"><tr><td align="LEFT" valign="TOP" width="172"><a class="SECT1" href="ch08_03.htm" webstripperlinkwas="ch08_03.htm" title="8.3 Other Statements That Affect Flow Control"><img src="../gifs/txtpreva.gif" webstripperlinkwas="../gifs/txtpreva.gif" alt="Previous: 8.3 Other Statements That Affect Flow Control" border="0"></A
></TD
><td align="CENTER" valign="TOP" width="171"><a class="book" href="index.htm" webstripperlinkwas="http://www.ms.itb.ac.id/buku/unix-bookshelf/sedawk/index.htm" title="sed &amp; awk"><img src="../gifs/txthome.gif" webstripperlinkwas="../gifs/txthome.gif" alt="sed &amp; awk" border="0"></A
></TD
><td align="RIGHT" valign="TOP" width="172"><a class="SECT1" href="ch08_05.htm" webstripperlinkwas="ch08_05.htm" title="8.5 An Acronym Processor"><img src="../gifs/txtnexta.gif" webstripperlinkwas="../gifs/txtnexta.gif" alt="Next: 8.5 An Acronym Processor" border="0"></A
></TD
></TR
><tr><td align="LEFT" valign="TOP" width="172">8.3 Other Statements That Affect Flow Control</TD
><td align="CENTER" valign="TOP" width="171"><a class="index" href="index/idx_0.htm" webstripperlinkwas="index/idx_0.htm" title="Book Index"><img src="../gifs/index.gif" webstripperlinkwas="../gifs/index.gif" alt="Book Index" border="0"></A
></TD
><td align="RIGHT" valign="TOP" width="172">8.5 An Acronym Processor</TD
></TR
></TABLE
><hr align="LEFT" width="515" title="footer"><img src="../gifs/smnavbar.gif" webstripperlinkwas="../gifs/smnavbar.gif" usemap="#map" border="0" alt="The UNIX CD Bookshelf Navigation"><map name="map"><area shape="RECT" coords="0,0,73,21" href="../index.html" webstripperlinkwas="http://www.ms.itb.ac.id/buku/unix-bookshelf/index.html" alt="The UNIX CD Bookshelf"><area shape="RECT" coords="74,0,163,21" href="../upt/index.htm" webstripperlinkwas="http://www.ms.itb.ac.id/buku/unix-bookshelf/upt/index.htm" alt="UNIX Power Tools"><area shape="RECT" coords="164,0,257,21" href="../unixnut/index.htm" webstripperlinkwas="http://www.ms.itb.ac.id/buku/unix-bookshelf/unixnut/index.htm" alt="UNIX in a Nutshell"><area shape="RECT" coords="258,0,321,21" href="../vi/index.htm" webstripperlinkwas="http://www.ms.itb.ac.id/buku/unix-bookshelf/vi/index.htm" alt="Learning the vi Editor"><area shape="RECT" coords="322,0,378,21" href="index.htm" webstripperlinkwas="http://www.ms.itb.ac.id/buku/unix-bookshelf/sedawk/index.htm" alt="sed &amp; awk"><area shape="RECT" coords="379,0,438,21" href="../ksh/index.htm" webstripperlinkwas="http://www.ms.itb.ac.id/buku/unix-bookshelf/ksh/index.htm" alt="Learning the Korn Shell"><area shape="RECT" coords="439,0,514,21" href="../lrnunix/index.htm" webstripperlinkwas="http://www.ms.itb.ac.id/buku/unix-bookshelf/lrnunix/index.htm" alt="Learning the UNIX Operating System"></MAP
></DIV
></BODY
></HTML
>
