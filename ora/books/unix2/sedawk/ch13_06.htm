<html><head><title>[Chapter 13] 13.6 readsource&nbsp;- Format Program Source Files for troff</TITLE
><meta name="DC.title" content="sed &amp; awk"><meta name="DC.creator" content="Dale Dougherty &amp; Arnold Robbins"><meta name="DC.publisher" content="O'Reilly &amp; Associates, Inc."><meta name="DC.date" content="1998-08-03T21:05:38Z"><meta name="DC.type" content="Text.Monograph"><meta name="DC.format" content="text/html" scheme="MIME"><meta name="DC.source" content="1-56592-225-5" scheme="ISBN"><meta name="DC.language" content="en-US"><meta name="generator" content="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><link rev="made" href="mailto:online-books@oreilly.com" title="Online Books Comments"><link rel="up" href="ch13_01.htm" webstripperlinkwas="ch13_01.htm" title="13. A Miscellany of Scripts"><link rel="prev" href="ch13_05.htm" webstripperlinkwas="ch13_05.htm" title="13.5 adj&nbsp;- Adjust Lines for Text Files"><link rel="next" href="ch13_07.htm" webstripperlinkwas="ch13_07.htm" title="13.7 gent&nbsp;- Get a termcap Entry"></HEAD
><body bgcolor="#FFFFFF" text="#000000"><div class="htmlnav"><h1><img src="gifs/smbanner.gif" webstripperlinkwas="gifs/smbanner.gif" alt="sed &amp; awk" usemap="#srchmap" border="0"></H1
><map name="srchmap"><area shape="RECT" coords="0,0,466,65" href="index.htm" webstripperlinkwas="http://www.ms.itb.ac.id/buku/unix-bookshelf/sedawk/index.htm" alt="sed &amp; awk"><area shape="RECT" coords="467,0,514,18" href="jobjects/fsearch.htm" webstripperlinkwas="jobjects/fsearch.htm" alt="Search this book"></MAP
><table width="515" border="0" cellspacing="0" cellpadding="0"><tr><td align="LEFT" valign="TOP" width="172"><a class="SECT1" href="ch13_05.htm" webstripperlinkwas="ch13_05.htm" title="13.5 adj&nbsp;- Adjust Lines for Text Files"><img src="../gifs/txtpreva.gif" webstripperlinkwas="../gifs/txtpreva.gif" alt="Previous: 13.5 adj&nbsp;- Adjust Lines for Text Files" border="0"></A
></TD
><td align="CENTER" valign="TOP" width="171"><b><font face="ARIEL,HELVETICA,HELV,SANSERIF" size="-1">Chapter 13<br>A Miscellany of Scripts</FONT
></B
></TD
><td align="RIGHT" valign="TOP" width="172"><a class="SECT1" href="ch13_07.htm" webstripperlinkwas="ch13_07.htm" title="13.7 gent&nbsp;- Get a termcap Entry"><img src="../gifs/txtnexta.gif" webstripperlinkwas="../gifs/txtnexta.gif" alt="Next: 13.7 gent&nbsp;- Get a termcap Entry" border="0"></A
></TD
></TR
></TABLE
>&nbsp;<hr align="LEFT" width="515" title="footer"></DIV
><div class="SECT1"><h2 class="sect1"><a class="title" name="AUTOID-11443">13.6 readsource&nbsp;- Format Program Source Files for troff</A
></H2
><p class="para"><em class="emphasis">Contributed by Martin Weitzel</EM
></P
><p class="para"><a class="indexterm" name="CH13.C"></A
>I am often preparing technical documents, especially
for courses and training.  In these documents, I often
need to print source files of different kinds (C programs,
<kbd class="command">awk</KBD
> programs, shell scripts, makefiles).  The problem is that the 
sources often change with time and I want
the most recent version when I print. 
I also want to avoid typos in print.</P
><p class="para">As I'm using <kbd class="command">troff</KBD
> for text processing, 
it should be easy to include
the original sources into the text.  But
there are some characters (especially &quot;&quot; and &quot;.&quot;
and &quot;,&quot; at the beginning of a line) that I must escape 
to prevent interpretation by <kbd class="command">troff</KBD
>.</P
><p class="para">I often want excerpts from sources 
rather than a complete file.  I also need a mechanism for
setting page breaks. 
Well, perhaps I'm being a perfectionist, but
I don't want to see a C function printed nearly complete
on one page, but only the two last lines appear on the
next.  As I frequently change the documents, I cannot
hunt for &quot;nice&quot; page breaks&nbsp;- this must be done
automatically.</P
><p class="para">To solve these set of problems, I wrote a filter that
preprocesses any source for inclusion
as text in <kbd class="command">troff</KBD
>.  This
is the <kbd class="command">awk</KBD
> program I send with this letter.  [He didn't offer
a name for it so it is here named <kbd class="command">readsource</KBD
>.] </P
><p class="para">The
whole process can be further automated through 
<em class="emphasis">makefiles</EM
>.  I include a preprocessed version of
the sources into my <kbd class="command">troff</KBD
> documents, and I make the formatting
dependent on these preprocessed files.  These files
again are dependent on their originals, so if I &quot;make&quot;
the document to print it, the
preprocessed sources will be checked to see if 
they are still current; otherwise
they will be generated new from their originals.</P
><p class="para">My program contains a complete description in the form of
comments.  But as the description is more for me than
for others, I'll give you some more hints.  Basically,
the program simply guards some characters, e.g., &quot;\&quot; is
turned into &quot;\e&quot; and &quot;\&amp;&quot; is written before every line.
Tabs may be expanded to spaces (there's a switch for
it), and you may even generate line numbers in front
of every line (switch selectable).  The format of these
line numbers can be set through an environmental variable.</P
><p class="para">If you want only <em class="emphasis">parts</EM
> of a file to be processed, you
can select these parts with two regular expressions (with
another switch).  You must specify the first line to 
be included and the first line not to be.  I've
found that this is often practical:  If you want to show
only a certain function of a C program, you can give the
first line of the function definition and the first line
of the next function definition.  If the source is
changed such that new functions are inserted between the two
or the order is changed, the pattern matching will not 
work correctly.  But this will accommodate the
more frequently made, smaller changes in a program.</P
><p class="para">The final feature, getting the page breaks right, 
is a bit tricky.  Here a technique has evolved that
I call &quot;here-you-may-break.&quot;  Those points are marked by
a special kind of line (I use &quot;/*!&quot; in C programs and
&quot;#!&quot; in awk, shell, makefiles, etc.).  How the points are
marked doesn't matter too much, you may have your own
conventions, but it must be possible to give a regular
expression that matches exactly this kind of line and
no others (e.g., if your sources are written so that a page
break is acceptable wherever you have an empty line, you
can specify this very easily, as all you need is the regular
expression for empty lines). </P
><p class="para">Before all the marked lines, a special sequence will be inserted
which again is given by an environmental variable.  With <kbd class="command">troff</KBD
>,
I use the technique of opening a &quot;display&quot; (.DS) before
I include such preprocessed text, and inserting a close (.DE) and
new open (.DS) display wherever I would accept a page break.
After this, <kbd class="command">troff</KBD
> does the work of gathering as many lines
as fit onto the current page.  I suppose that suitable techniques
for other text processors exist.</P
><blockquote class="screen"><pre class="screen">#! /bin/sh
# Copyright 1990 by EDV-Beratung Martin Weitzel, D-6100 Darmstadt
# ==================================================================
# PROJECT:	Printing Tools
# SH-SCRIPT:	Source to Troff Pre-Formatter
# ==================================================================

#!
# ------------------------------------------------------------------
# This programm is a tool to preformat source files, so that they
# can be included (.so) within nroff/troff-input. Problems when
# including arbitrary files within nroff/troff-input occur on lines,
# starting with dot (.) or an apostrophe ('), or with the respective
# chars, if these are changed, furthermore from embedded backslashes.
# While changing the source so that none of the above will cause
# any problems, some other useful things can be done, including
# line numbering and selecting interesting parts.
# ------------------------------------------------------------------
#!
  USAGE=&quot;$0 [-x d] [-n] [-b pat] [-e pat] [-p pat] [file ...]&quot;
#
# SYNOPSIS:
# The following options are supported:
#	-x d	expand tabs to &quot;d&quot; spaces
#	-n 	number source lines (see also: NFMT)
#	-b pat	start output on a line containing &quot;pat&quot;,
#		including this line (Default: from beginning)
#	-e pat	end output on a line containing &quot;pat&quot;
#		excluding this line (Default: upto end)
#	-p pat	before lines containing &quot;pat&quot;, page breaks
#		may occur (Default: no page breaks)
# &quot;pat&quot; may be an &quot;extended regular expression&quot; as supported by awk.
# The following variables from the environment are used:
#	NFMT	specify format for line numbers (Default: see below)
#	PBRK	string, to mark page breaks. (Default: see below)
#!
# PREREQUISITES:
# Common UNIX-Environment, including awk.
#
# CAVEATS:
# &quot;pat&quot;s are not checked before they are used (processing may have
# started, before problems are detected).
# &quot;NFMT&quot; must contain exactly one %d-format specifier, if -n
# option is used.
# In &quot;NFMT&quot; and &quot;PBRK&quot;, embedded double quotes must be guarded with
# a leading backslash.
# In &quot;pat&quot;s, &quot;NFMT&quot; and &quot;PBRK&quot; embedded TABs and NLs must be written
# as \t and \n. Backslashes that should &quot;go thru&quot; to the output as
# such, should be doubled. (The latter is only *required* in a few
# special cases, but it does no harm the other cases).
# 
#!
# BUGS:
# Slow - but may serve as prototype for a faster implementation.
# (Hint: Guarding backslashes the way it is done by now is very
# expensive and could also be done using sed 's/\\/\\e/g', but tab
# expansion would be much harder then, because I can't imagine how
# to do it with sed. If you have no need for tab expansion, you may
# change the program. Another option would be to use gsub(), which
# would limit the program to environments with nawk.)
# 
# Others bugs may be, please mail me.
#!
# AUTHOR:	Martin Weitzel, D-6100 DA (martin@mwtech.UUCP)
#
# RELEASED: 	25. Nov 1989, Version 1.00
# ------------------------------------------------------------------

#! CSOPT
# ------------------------------------------------------------------
# 	check/set options
# ------------------------------------------------------------------

xtabs=0 nfmt= bpat= epat= ppat=
for p
do
case $sk in
1) shift; sk=0; continue
esac
case $p in
-x)	shift;
	case $1 in
	[1-9]|1[0-9]) xtabs=$1; sk=1;;
	*) { &gt;&amp;2 echo &quot;$0: bad value for option -x: $1&quot;; exit 1; }
	esac
	;;
-n)	nfmt=&quot;${NFMT:-&lt;%03d&gt;\<img src="../chars/bull.gif" webstripperlinkwas="../chars/bull.gif" alt="&#183;">}&quot;; shift ;;
-b)	shift; bpat=$1; sk=1 ;;
-e)	shift; epat=$1; sk=1 ;;
-p)	shift; ppat=$1; sk=1 ;;
--)	shift; break ;;
*)	break
esac
done

#! MPROC
# ------------------------------------------------------------------
# 	now the &quot;real work&quot;
# ------------------------------------------------------------------

awk '
#. prepare for tab-expansion, page-breaks and selection
BEGIN {
	if (xt = '$xtabs') while (length(sp) &lt; xt) sp = sp &quot; &quot;;
	PBRK = &quot;'&quot;${PBRK-'.DE\n.DS\n'}&quot;'&quot;
	'${bpat:+' skip = 1; '}'
} #! limit selection range
{
	'${epat:+' if (!skip &amp;&amp; $0 ~ /'&quot;$epat&quot;'/) skip = 1; '}'
	'${bpat:+' if (skip &amp;&amp; $0 ~ /'&quot;$bpat&quot;'/) skip = 0; '}'
	if (skip) next;
}
#! process one line of input as required
{
	line = &quot;&quot;; ll = 0;
	for (i = 1; i &lt;= length; i++) {
		c = substr($0, i, 1);
		if (xt &amp;&amp; c == &quot;\t&quot;) {
			# expand tabs
			nsp = 8 - ll % xt;
			line = line substr(sp, 1, nsp);
			ll += nsp;
		}
		else {
			if (c == &quot;\\&quot;) c = &quot;\\e&quot;;
			line = line c;
			ll++;
		}
	}
}
#! finally print this line
{
	'${ppat:+' if ($0 ~ /'&quot;$ppat&quot;'/) printf(&quot;%s&quot;, PBRK); '}'
	'${nfmt:+' printf(&quot;'&quot;$nfmt&quot;'&quot;, NR) '}'
	printf(&quot;\\&amp;%s\n&quot;, line);
}
' $*
&#13;</PRE
></BLOCKQUOTE
><p class="para">For an example of how it works, we ran <kbd class="command">readsource</KBD
> to extract
a part of its own program.</P
><blockquote class="screen"><pre class="screen">$ <code class="userinput"><b>readsource -x 3 -b &quot;process one line&quot; -e &quot;finally print&quot; readsource</B
></CODE
>
\&amp;#! process one line of input as required
\&amp;{
\&amp;   line = &quot;&quot;; ll = 0;
\&amp;   for (i = 1; i &lt;= length; i++) {
\&amp;      c = substr($0, i, 1);
\&amp;      if (xt &amp;&amp; c == &quot;\\et&quot;) {
\&amp;         # expand tabs
\&amp;         nsp = 8 - ll % xt;
\&amp;         line = line substr(sp, 1, nsp);
\&amp;         ll += nsp;
\&amp;      }
\&amp;      else {
\&amp;         if (c == &quot;\\e\\e&quot;) c = &quot;\\e\\ee&quot;;
\&amp;         line = line c;
\&amp;         ll++;
\&amp;      }
\&amp;   }
\&amp;}</PRE
></BLOCKQUOTE
><div class="sect2"><h3 class="sect2"><a class="title" name="SEDAWK-CH-13-SECT-0.0.0.6">13.6.1 Program Notes for readsource</A
></H3
><p class="para">This program is, first of all, quite useful, as it helped us prepare
the listings in this book.  The author does really stretch (old) awk to
its limits, using shell variables to pass information into the script.
It gets the job done, but it is quite obscure.  </P
><p class="para">The program does run slowly. We followed up on the author's suggestion
and changed the way the program replaced tabs and backslashes.
The original program uses an expensive character-by-character
comparison, obtaining the character using the <b class="emphasis.bold">substr()</B
> function.
(It is the procedure that is extracted in the example above.) 
Its performance points out how costly it is in awk to read a line
one character at a time, something that is very simple in C.</P
><p class="para">Running <kbd class="command">readsource</KBD
> on itself produced the following
times:</P
><blockquote class="screen"><pre class="screen">$ timex readsource -x 3 readsource &gt; /dev/null
real        1.56
user        1.22
sys         0.20</PRE
></BLOCKQUOTE
><p class="para">The procedure that changes the way tabs and 
backslashes are handled can be re-written in nawk
to use the <b class="emphasis.bold">gsub()</B
> function:</P
><blockquote class="screen"><pre class="screen">#! process one line of input as required
{
        if ( xt &amp;&amp; $0 ~ &quot;\t&quot; )
                gsub(/\t/, sp)
        if ($0 ~ &quot;\\&quot;)
                gsub(/\\/, &quot;\\e&quot;)
}</PRE
></BLOCKQUOTE
><p class="para">The last procedure needs a small change, replacing the variable
<b class="emphasis.bold">line</B
> with &quot;$0&quot;.  (We don't use the temporary variable 
<b class="emphasis.bold">line</B
>.)  The nawk version produces:</P
><blockquote class="screen"><pre class="screen">$<code class="userinput"><b> timex readsource.2 -x 3 readsource &gt; /dev/null</B
></CODE
>
real        0.44
user        0.10
sys         0.22</PRE
></BLOCKQUOTE
><p class="para">The difference is pretty remarkable.</P
><p class="para">One final speedup might be to use <b class="emphasis.bold">index()</B
> to look for backslashes:</P
><blockquote class="screen"><pre class="screen">#! process one line of input as required
{
        if ( xt &amp;&amp; index($0, &quot;\t&quot;) &gt; 0 )
                gsub(/\t/, sp)
        if (index($0, &quot;\\&quot;) &gt; 0)
                gsub(/\\/, &quot;\\e&quot;)
}</PRE
></BLOCKQUOTE
></DIV
><a class="indexterm" name="AUTOID-11494"></A
></DIV
><div class="htmlnav"><p></P
><hr align="LEFT" width="515" title="footer"><table width="515" border="0" cellspacing="0" cellpadding="0"><tr><td align="LEFT" valign="TOP" width="172"><a class="SECT1" href="ch13_05.htm" webstripperlinkwas="ch13_05.htm" title="13.5 adj&nbsp;- Adjust Lines for Text Files"><img src="../gifs/txtpreva.gif" webstripperlinkwas="../gifs/txtpreva.gif" alt="Previous: 13.5 adj&nbsp;- Adjust Lines for Text Files" border="0"></A
></TD
><td align="CENTER" valign="TOP" width="171"><a class="book" href="index.htm" webstripperlinkwas="http://www.ms.itb.ac.id/buku/unix-bookshelf/sedawk/index.htm" title="sed &amp; awk"><img src="../gifs/txthome.gif" webstripperlinkwas="../gifs/txthome.gif" alt="sed &amp; awk" border="0"></A
></TD
><td align="RIGHT" valign="TOP" width="172"><a class="SECT1" href="ch13_07.htm" webstripperlinkwas="ch13_07.htm" title="13.7 gent&nbsp;- Get a termcap Entry"><img src="../gifs/txtnexta.gif" webstripperlinkwas="../gifs/txtnexta.gif" alt="Next: 13.7 gent&nbsp;- Get a termcap Entry" border="0"></A
></TD
></TR
><tr><td align="LEFT" valign="TOP" width="172">13.5 adj&nbsp;- Adjust Lines for Text Files</TD
><td align="CENTER" valign="TOP" width="171"><a class="index" href="index/idx_0.htm" webstripperlinkwas="index/idx_0.htm" title="Book Index"><img src="../gifs/index.gif" webstripperlinkwas="../gifs/index.gif" alt="Book Index" border="0"></A
></TD
><td align="RIGHT" valign="TOP" width="172">13.7 gent&nbsp;- Get a termcap Entry</TD
></TR
></TABLE
><hr align="LEFT" width="515" title="footer"><img src="../gifs/smnavbar.gif" webstripperlinkwas="../gifs/smnavbar.gif" usemap="#map" border="0" alt="The UNIX CD Bookshelf Navigation"><map name="map"><area shape="RECT" coords="0,0,73,21" href="../index.html" webstripperlinkwas="http://www.ms.itb.ac.id/buku/unix-bookshelf/index.htm" alt="The UNIX CD Bookshelf"><area shape="RECT" coords="74,0,163,21" href="../upt/index.htm" webstripperlinkwas="http://www.ms.itb.ac.id/buku/unix-bookshelf/upt/index.htm" alt="UNIX Power Tools"><area shape="RECT" coords="164,0,257,21" href="../unixnut/index.htm" webstripperlinkwas="http://www.ms.itb.ac.id/buku/unix-bookshelf/unixnut/index.htm" alt="UNIX in a Nutshell"><area shape="RECT" coords="258,0,321,21" href="../vi/index.htm" webstripperlinkwas="http://www.ms.itb.ac.id/buku/unix-bookshelf/vi/index.htm" alt="Learning the vi Editor"><area shape="RECT" coords="322,0,378,21" href="index.htm" webstripperlinkwas="http://www.ms.itb.ac.id/buku/unix-bookshelf/sedawk/index.htm" alt="sed &amp; awk"><area shape="RECT" coords="379,0,438,21" href="../ksh/index.htm" webstripperlinkwas="http://www.ms.itb.ac.id/buku/unix-bookshelf/ksh/index.htm" alt="Learning the Korn Shell"><area shape="RECT" coords="439,0,514,21" href="../lrnunix/index.htm" webstripperlinkwas="http://www.ms.itb.ac.id/buku/unix-bookshelf/lrnunix/index.htm" alt="Learning the UNIX Operating System"></MAP
></DIV
></BODY
></HTML
>
