<html><head><title>[Chapter 10] 10.7 Debugging</TITLE
><meta name="DC.title" content="sed &amp; awk"><meta name="DC.creator" content="Dale Dougherty &amp; Arnold Robbins"><meta name="DC.publisher" content="O'Reilly &amp; Associates, Inc."><meta name="DC.date" content="1998-08-03T21:01:51Z"><meta name="DC.type" content="Text.Monograph"><meta name="DC.format" content="text/html" scheme="MIME"><meta name="DC.source" content="1-56592-225-5" scheme="ISBN"><meta name="DC.language" content="en-US"><meta name="generator" content="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><link rev="made" href="mailto:online-books@oreilly.com" title="Online Books Comments"><link rel="up" href="ch10_01.htm" webstripperlinkwas="ch10_01.htm" title="10. The Bottom Drawer"><link rel="prev" href="ch10_06.htm" webstripperlinkwas="ch10_06.htm" title="10.6 Generating Columnar Reports"><link rel="next" href="ch10_08.htm" webstripperlinkwas="ch10_08.htm" title="10.8 Limitations"></HEAD
><body bgcolor="#FFFFFF" text="#000000"><div class="htmlnav"><h1><img src="gifs/smbanner.gif" webstripperlinkwas="gifs/smbanner.gif" alt="sed &amp; awk" usemap="#srchmap" border="0"></H1
><map name="srchmap"><area shape="RECT" coords="0,0,466,65" href="index.htm" webstripperlinkwas="http://www.ms.itb.ac.id/buku/unix-bookshelf/sedawk/index.htm" alt="sed &amp; awk"><area shape="RECT" coords="467,0,514,18" href="jobjects/fsearch.htm" webstripperlinkwas="jobjects/fsearch.htm" alt="Search this book"></MAP
><table width="515" border="0" cellspacing="0" cellpadding="0"><tr><td align="LEFT" valign="TOP" width="172"><a class="SECT1" href="ch10_06.htm" webstripperlinkwas="ch10_06.htm" title="10.6 Generating Columnar Reports"><img src="../gifs/txtpreva.gif" webstripperlinkwas="../gifs/txtpreva.gif" alt="Previous: 10.6 Generating Columnar Reports" border="0"></A
></TD
><td align="CENTER" valign="TOP" width="171"><b><font face="ARIEL,HELVETICA,HELV,SANSERIF" size="-1">Chapter 10<br>The Bottom Drawer</FONT
></B
></TD
><td align="RIGHT" valign="TOP" width="172"><a class="SECT1" href="ch10_08.htm" webstripperlinkwas="ch10_08.htm" title="10.8 Limitations"><img src="../gifs/txtnexta.gif" webstripperlinkwas="../gifs/txtnexta.gif" alt="Next: 10.8 Limitations" border="0"></A
></TD
></TR
></TABLE
>&nbsp;<hr align="LEFT" width="515" title="footer"></DIV
><div class="SECT1"><h2 class="sect1"><a class="title" name="SEDAWK-CH-10-SECT-7">10.7 Debugging</A
></H2
><p class="para"><a class="indexterm" name="CH10.BUG1"></A
><a class="indexterm" name="CH10.BUG2"></A
><a class="indexterm" name="CH10.BUG3"></A
>No aspect of programming is more frustrating or more essential than
debugging.  In this section, we'll look at ways to debug awk scripts
and offer advice on how to correct an awk program that fails to do
what it is supposed to do.</P
><p class="para">Modern versions of awk do a pretty good job of reporting syntax
errors.  But even with good error detection, it is often difficult to
isolate the problem.  The techniques for discovering the source of the
problem are a modest few and are fairly obvious.  Unfortunately, most
awk implementations come with no debugging tools or extensions.</P
><p class="para">There are two classes of problems with a program.  The first is really
a bug in the program's logic.  The program runs&nbsp;- that is, it
finishes without reporting any error messages, but it does not produce
the result you wanted.  For instance, perhaps it does not create any
output.  This bug could be caused by failing to use a
<kbd class="command">print</KBD
> statement to output the result of a
calculation.  Program errors are mental errors, if you will.</P
><p class="para">The second class of error is one in which the program fails to execute
or complete execution.  This could result from a syntax error and
cause awk to spit code at you that it is unable to interpret.  Many
syntax errors are the result of a typo or a missing brace or
parenthesis.  Syntax errors usually generate error messages that help
direct you to the problem.  Sometimes, however, a program may cause
awk to fail (or &quot;core dump&quot;) without producing any reasonable error
message.[5] 
This may also be caused by a syntax error, but there could be problems
specific to the machine.  We have had a few larger scripts that dumped
core on one machine while they ran without a problem on another.  You
could, for instance, be running up against limitations set for awk for
that particular implementation.  See the section &quot;Limitations&quot;,
later in this chapter.</P
><blockquote class="footnote"><p class="para">[5] This indicates that the awk implementation is poor. Core dumps are
very rare in modern versions of awk.  </P
></BLOCKQUOTE
><p class="para">You should be clear in your mind which type of program bug
you are trying to find: an error in the script's logic or an error in
its syntax.  </P
><div class="sect2"><h3 class="sect2"><a class="title" name="SEDAWK-CH-10-SECT-7.1">10.7.1 Make a Copy</A
></H3
><p class="para"><a class="indexterm" name="AUTOID-8771"></A
>Before you begin debugging a program, make a copy of it.  This is
extremely important.  To debug an awk script, you have to change it.
These modifications may point you to the error but many changes will
have no effect or may introduce new problems.  It's good to be able to
restore changes that you make.  However, it is bothersome to restore
each change that you make, so I like to continue making changes until
I have found the problem.  When I know what it is, I go back to the
original and make the change.  In effect, that restores all the other
inconsequential changes that were made in the copy.</P
><p class="para">It is also helpful to view the process of creating a program as a
series of stages.  Look at a core set of features as a single stage.
Once you have implemented these features and tested them, make a copy
of the program before going to the next stage to develop new features.
That way, you can always return to the previous stage if you have
problems with the code that you add.</P
><p class="para"><a class="indexterm" name="AUTOID-8775"></A
>We would recommend that you formalize this process, and go so far as
to use a source code management system, such as SCCS (Source Code
Control System), RCS (Revision Control System), or CVS (Concurrent
Versioning System, which is compatible with RCS).  The latter two are
freely available from any GNU FTP mirror site.</P
></DIV
><div class="sect2"><h3 class="sect2"><a class="title" name="SEDAWK-CH-10-SECT-7.2">10.7.2 Before and After Photos</A
></H3
><p class="para">What is difficult in debugging awk is that you don't always know what
is happening during the course of the program.  You can inspect the
input and the output, but there is no way to stop the program in
mid-course and examine its state.  Thus, it is difficult to know which
part of the program is causing a problem.</P
><p class="para">A common problem is determining when or where in the program the
assignment of a variable takes place.  The first method of attack is
to use the <kbd class="command">print</KBD
> statement to print the value of
the variable at various points in the program.  For instance, it is
common to use a variable as a flag to determine that a certain
condition has occurred.  At the beginning of the program, the flag
might be set to 0.  At one or more points in the program, the value of
this flag might be set to 1.  The problem is to find where the change
actually occurs.  If you want to check the flag at a particular part
of the program, use <kbd class="command">print</KBD
> statements before and
after the assignment.  For instance:</P
><p class="para"><blockquote class="screen"><pre class="screen">print flag, &quot;before&quot;
if (! $1) {
	.
	.
	.
	flag = 1
}
print flag, &quot;after&quot;</PRE
></BLOCKQUOTE
></P
><p class="para">If you are unsure about the result of a substitution command or any
function, print the string before and after the function is called:</P
><p class="para"><blockquote class="screen"><pre class="screen">print $2
sub(/ *\(/, &quot;(&quot;, $2)
print $2</PRE
></BLOCKQUOTE
></P
><p class="para">The value of printing the value before the substitution command is to
make sure that the command sees the value that you think should be
there.  A previous command might have changed that variable.  The
problem may turn out to be that the format of the input record is not
as you thought.  Checking the input carefully is a very important step
in debugging.  In particular, use <kbd class="command">print</KBD
> statements
to verify that the sequence of fields is as you expect.  When you find
that input is causing the problem, you can either fix the input or
write new code to accommodate it.</P
></DIV
><div class="sect2"><h3 class="sect2"><a class="title" name="SEDAWK-CH-10-SECT-7.3">10.7.3 Finding Out Where the Problem Is</A
></H3
><p class="para"><a class="indexterm" name="AUTOID-8793"></A
><a class="indexterm" name="AUTOID-8795"></A
>The more modular a script is&nbsp;- that is, the more it can be broken
down into separate parts&nbsp;- the easier it is to test and debug the
program.  One of the advantages of writing functions is that you can
isolate what is going on inside the function and test it without
affecting other parts of the program.  You can omit an entire action
and see what happens.</P
><p class="para">If a program has a number of branching constructs, you might find that
an input line falls through one of branches.  Test that the input
reaches part of a program.  For instance, when debugging the
<kbd class="command">masterindex</KBD
> program,
described in <a class="xref" href="ch12_01.htm" webstripperlinkwas="ch12_01.htm" title="Full-Featured Applications">Chapter 12, Full-Featured Applications</A
>, we wanted to know if an entry
containing the word &quot;retrieving&quot; was being handled in a particular
part of the program. We inserted the following line in the part of the
program where we thought it should be encountered:</P
><p class="para"><blockquote class="screen"><pre class="screen">if ($0 ~ /retrieving/) print &quot;&gt;&gt; retrieving&quot; &gt; &quot;/dev/tty&quot;</PRE
></BLOCKQUOTE
></P
><p class="para">When the program runs, if it encounters the string &quot;retrieving,&quot; it
will print the message.  (&quot;&gt;&gt;&quot; is used as a pair of characters that
will instantly call attention to the output; &quot;!!&quot; is also a good one.)</P
><p class="para">Sometimes you might not be sure which of several
<kbd class="command">print</KBD
> statements are causing a problem.  Insert
identifiers into the <kbd class="command">print</KBD
> statement that will
alert you to the <kbd class="command">print</KBD
> statement being executed.
In the following example, we simply use the variable name to identify
what is printed with a label:</P
><p class="para"><blockquote class="screen"><pre class="screen">if (PRIMARY)
	print (&quot;&gt;&gt;PRIMARY:&quot;, PRIMARY)
else
	if (SECONDARY)
		print (&quot;&gt;&gt;SECONDARY:&quot;, SECONDARY)
	else
		print (&quot;&gt;&gt;TERTIARY:&quot;, TERTIARY)</PRE
></BLOCKQUOTE
></P
><p class="para">This technique is also useful for investigating whether or not parts
of the program are executed at all.  Some programs get to be like
remodeled homes: a room is added here, a wall is taken down there.
Trying to understand the basic structure can be difficult.  You might
wonder if each of the parts is truly needed or indeed if it is ever
executed at all.</P
><p class="para">If an awk program is part of a pipeline of several programs, even
other awk programs, you can use the <kbd class="command">tee</KBD
> command to
redirect output to a file, while also piping the output to the next
command.  For instance, look at the shell script for running the
<kbd class="command">masterindex</KBD
> program, as shown in <a class="xref" href="ch12_01.htm" webstripperlinkwas="ch12_01.htm" title="Full-Featured Applications">Chapter 12</A
>:</P
><p class="para"><blockquote class="screen"><pre class="screen">$INDEXDIR/input.idx $FILES |
sort -bdf -t:  +0 -1 +1 -2 +3 -4 +2n -3n | uniq |
$INDEXDIR/pagenums.idx | tee page.tmp |
$INDEXDIR/combine.idx |
$INDEXDIR/format.idx</PRE
></BLOCKQUOTE
></P
><p class="para">By adding &quot;tee page.tmp&quot;, we are able to capture the output of the
<kbd class="command">pagenums.idx</KBD
> program in a file named
<i class="filename">page.tmp</I
>.  The same output is also piped to
<kbd class="command">combine.idx</KBD
>.</P
></DIV
><div class="sect2"><h3 class="sect2"><a class="title" name="SEDAWK-CH-10-SECT-7.4">10.7.4 Commenting Out Loud</A
></H3
><p class="para"><a class="indexterm" name="AUTOID-8824"></A
>Another technique is simply commenting out a series of lines that may
be causing problems to see whether they really are. We recommend
developing a consistent two-character symbol such as &quot;#%&quot; to comment
out lines temporarily.  Then you will notice them on subsequent
editing and remember to deal with them.  It also becomes easier to
remove the symbols and restore the lines with a single editing command
that does not affect program comments:</P
><p class="para"><blockquote class="screen"><pre class="screen">#% if ( thisFails )
	print &quot;I give up&quot;</PRE
></BLOCKQUOTE
></P
><p class="para">Using the comment here eliminates the conditional, so the
<kbd class="command">print</KBD
> statement is executed unconditionally.</P
></DIV
><div class="sect2"><h3 class="sect2"><a class="title" name="SEDAWK-CH-10-SECT-7.5">10.7.5 Slash and Burn</A
></H3
><p class="para">When all else fails, arm yourself with your editor's delete command
and begin deleting portions of the program until the error disappears.
Of course, make a copy of the program and delete lines from the
temporary copy.  This is a very crude technique, but an effective one
to use before giving up altogether or starting over from scratch.  It
is sometimes the only way to discover what is wrong when the only
result you get is that the program dumps core.  The idea is the same
as above, to isolate the problem code.  Remove a function, for
instance, or a <kbd class="command">for</KBD
> loop to see if it is the cause
of the problem.  Be sure to cut out complete units: for instance, all
the statements within braces and the matching braces.  If the problem
persists&nbsp;- the program continues to break&nbsp;- then cut out
another large section of the program.  Sooner or later, you will find
the part that is causing the problem.</P
><p class="para">You can use &quot;slash and burn&quot; to learn how a program works.  First, run
the original program on sample input, saving the output.  Begin by
removing a part of the program that you don't understand.  Then run
the modified program on sample input and compare the output to the
original.  Look to see what changed.</P
></DIV
><div class="sect2"><h3 class="sect2"><a class="title" name="SEDAWK-CH-10-SECT-7.6">10.7.6 Getting Defensive About Your Script</A
></H3
><p class="para">There are all types of input errors and inconsistencies that will turn
up bugs in your script.  You probably didn't consider that
<em class="emphasis">user</EM
> errors will be pointed to as problems with
<em class="emphasis">your</EM
> program.  Therefore, it is a good idea to
surround your core program with &quot;defensive&quot; procedures designed to
trap inconsistent input records and prevent the program from failing
unexpectedly.  For instance, you might want to verify each input
record before processing it, making sure that the proper number of
fields exist or that the kind of data that you expect is found in a
particular field.</P
><p class="para">Another aspect of incorporating defensive techniques is error
handling.  In other words, what do you want to have happen once the
program detects an error?  While in some cases you can have the
program continue, in other cases it may be preferable that the program
print an error message and/or halt.</P
><p class="para">It is also appropriate to recognize that awk scripts are typically
confined to the realm of quick fixes, programs that solve a particular
problem rather than solving a class of problems encountered by many
different users.  Because of the nature of these programs, it is not
really necessary that they be professional quality.  Thus, it is not
necessary to write 100% user-proof programs.  For one thing, defensive
programming is quite time-consuming and frequently tedious.  Secondly,
as amateurs, we are at liberty to write programs that perform the way
we expect them to; a professional has to write for an audience and
must account for their expectations. In brief, if you are writing the
script for others to use, consider how it may be used and what
problems its users may encounter before considering the program
complete.  If not, maybe the fact that the script works&nbsp;- even for
a very narrow set of circumstances&nbsp;- is good enough and all there
is time for.</P
></DIV
><a class="indexterm" name="AUTOID-8842"></A
><a class="indexterm" name="AUTOID-8843"></A
><a class="indexterm" name="AUTOID-8844"></A
></DIV
><div class="htmlnav"><p></P
><hr align="LEFT" width="515" title="footer"><table width="515" border="0" cellspacing="0" cellpadding="0"><tr><td align="LEFT" valign="TOP" width="172"><a class="SECT1" href="ch10_06.htm" webstripperlinkwas="ch10_06.htm" title="10.6 Generating Columnar Reports"><img src="../gifs/txtpreva.gif" webstripperlinkwas="../gifs/txtpreva.gif" alt="Previous: 10.6 Generating Columnar Reports" border="0"></A
></TD
><td align="CENTER" valign="TOP" width="171"><a class="book" href="index.htm" webstripperlinkwas="http://www.ms.itb.ac.id/buku/unix-bookshelf/sedawk/index.htm" title="sed &amp; awk"><img src="../gifs/txthome.gif" webstripperlinkwas="../gifs/txthome.gif" alt="sed &amp; awk" border="0"></A
></TD
><td align="RIGHT" valign="TOP" width="172"><a class="SECT1" href="ch10_08.htm" webstripperlinkwas="ch10_08.htm" title="10.8 Limitations"><img src="../gifs/txtnexta.gif" webstripperlinkwas="../gifs/txtnexta.gif" alt="Next: 10.8 Limitations" border="0"></A
></TD
></TR
><tr><td align="LEFT" valign="TOP" width="172">10.6 Generating Columnar Reports</TD
><td align="CENTER" valign="TOP" width="171"><a class="index" href="index/idx_0.htm" webstripperlinkwas="index/idx_0.htm" title="Book Index"><img src="../gifs/index.gif" webstripperlinkwas="../gifs/index.gif" alt="Book Index" border="0"></A
></TD
><td align="RIGHT" valign="TOP" width="172">10.8 Limitations</TD
></TR
></TABLE
><hr align="LEFT" width="515" title="footer"><img src="../gifs/smnavbar.gif" webstripperlinkwas="../gifs/smnavbar.gif" usemap="#map" border="0" alt="The UNIX CD Bookshelf Navigation"><map name="map"><area shape="RECT" coords="0,0,73,21" href="../index.html" webstripperlinkwas="http://www.ms.itb.ac.id/buku/unix-bookshelf/index.html" alt="The UNIX CD Bookshelf"><area shape="RECT" coords="74,0,163,21" href="../upt/index.htm" webstripperlinkwas="http://www.ms.itb.ac.id/buku/unix-bookshelf/upt/index.htm" alt="UNIX Power Tools"><area shape="RECT" coords="164,0,257,21" href="../unixnut/index.htm" webstripperlinkwas="http://www.ms.itb.ac.id/buku/unix-bookshelf/unixnut/index.htm" alt="UNIX in a Nutshell"><area shape="RECT" coords="258,0,321,21" href="../vi/index.htm" webstripperlinkwas="http://www.ms.itb.ac.id/buku/unix-bookshelf/vi/index.htm" alt="Learning the vi Editor"><area shape="RECT" coords="322,0,378,21" href="index.htm" webstripperlinkwas="http://www.ms.itb.ac.id/buku/unix-bookshelf/sedawk/index.htm" alt="sed &amp; awk"><area shape="RECT" coords="379,0,438,21" href="../ksh/index.htm" webstripperlinkwas="http://www.ms.itb.ac.id/buku/unix-bookshelf/ksh/index.htm" alt="Learning the Korn Shell"><area shape="RECT" coords="439,0,514,21" href="../lrnunix/index.htm" webstripperlinkwas="http://www.ms.itb.ac.id/buku/unix-bookshelf/lrnunix/index.htm" alt="Learning the UNIX Operating System"></MAP
></DIV
></BODY
></HTML
>
