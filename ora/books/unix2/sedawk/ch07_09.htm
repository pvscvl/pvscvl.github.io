<html><head><title>[Chapter 7] 7.9 Formatted Printing</TITLE
><meta name="DC.title" content="sed &amp; awk"><meta name="DC.creator" content="Dale Dougherty &amp; Arnold Robbins"><meta name="DC.publisher" content="O'Reilly &amp; Associates, Inc."><meta name="DC.date" content="1998-08-03T20:57:42Z"><meta name="DC.type" content="Text.Monograph"><meta name="DC.format" content="text/html" scheme="MIME"><meta name="DC.source" content="1-56592-225-5" scheme="ISBN"><meta name="DC.language" content="en-US"><meta name="generator" content="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><link rev="made" href="mailto:online-books@oreilly.com" title="Online Books Comments"><link rel="up" href="ch07_01.htm" webstripperlinkwas="ch07_01.htm" title="7. Writing Scripts for awk"><link rel="prev" href="ch07_08.htm" webstripperlinkwas="ch07_08.htm" title="7.8 Relational and Boolean Operators"><link rel="next" href="ch07_10.htm" webstripperlinkwas="ch07_10.htm" title="7.10 Passing Parameters Into a Script"></HEAD
><body bgcolor="#FFFFFF" text="#000000"><div class="htmlnav"><h1><img src="gifs/smbanner.gif" webstripperlinkwas="gifs/smbanner.gif" alt="sed &amp; awk" usemap="#srchmap" border="0"></H1
><map name="srchmap"><area shape="RECT" coords="0,0,466,65" href="index.htm" webstripperlinkwas="http://www.ms.itb.ac.id/buku/unix-bookshelf/sedawk/index.htm" alt="sed &amp; awk"><area shape="RECT" coords="467,0,514,18" href="jobjects/fsearch.htm" webstripperlinkwas="jobjects/fsearch.htm" alt="Search this book"></MAP
><table width="515" border="0" cellspacing="0" cellpadding="0"><tr><td align="LEFT" valign="TOP" width="172"><a class="SECT1" href="ch07_08.htm" webstripperlinkwas="ch07_08.htm" title="7.8 Relational and Boolean Operators"><img src="../gifs/txtpreva.gif" webstripperlinkwas="../gifs/txtpreva.gif" alt="Previous: 7.8 Relational and Boolean Operators" border="0"></A
></TD
><td align="CENTER" valign="TOP" width="171"><b><font face="ARIEL,HELVETICA,HELV,SANSERIF" size="-1">Chapter 7<br>Writing Scripts for awk</FONT
></B
></TD
><td align="RIGHT" valign="TOP" width="172"><a class="SECT1" href="ch07_10.htm" webstripperlinkwas="ch07_10.htm" title="7.10 Passing Parameters Into a Script"><img src="../gifs/txtnexta.gif" webstripperlinkwas="../gifs/txtnexta.gif" alt="Next: 7.10 Passing Parameters Into a Script" border="0"></A
></TD
></TR
></TABLE
>&nbsp;<hr align="LEFT" width="515" title="footer"></DIV
><div class="SECT1"><h2 class="sect1"><a class="title" name="SEDAWK-CH-7-SECT-9">7.9 Formatted Printing</A
></H2
><p class="para"><a class="indexterm" name="CH07.PRINT1"></A
><a class="indexterm" name="CH07.PRINT2"></A
><a class="indexterm" name="CH07.PRINT4"></A
><a class="indexterm" name="CH07.PRINT5"></A
>Many of the scripts that we've written so far perform the
data processing tasks just fine, but the output has not
been formatted properly.  That is because there is only
so much you can do with the basic <kbd class="command">print</KBD
>
statement.  And since one of awk's most common functions
is to produce reports, it is crucial that we be able to
format our reports in an orderly fashion.
The <kbd class="command">filesum</KBD
> program performs the arithmetic tasks well but 
the report lacks an orderly format. </P
><p class="para"><a class="indexterm" name="CH07.PRINT3"></A
>Awk offers an alternative to the <kbd class="command">print</KBD
> statement, <kbd class="command">printf</KBD
>,
which is borrowed from the C programming language.  
The <kbd class="command">printf</KBD
> statement can output a simple string
just like the <kbd class="command">print</KBD
> statement.</P
><blockquote class="screen"><pre class="screen">awk 'BEGIN { printf (&quot;Hello, world\n&quot;) }'</PRE
></BLOCKQUOTE
><p class="para">The main difference that you will notice at the outset is
that, unlike <kbd class="command">print</KBD
>, <kbd class="command">printf</KBD
> does not
automatically supply a newline.  You must specify it 
explicitly as &quot;\n&quot;.</P
><p class="para">The full syntax of the <kbd class="command">printf</KBD
> statement has two parts: </P
><blockquote class="literallayout"><p class="literallayout"><kbd class="command">printf</KBD
> ( <em class="emphasis">format-expression</EM
> [<b class="emphasis.bold">,</B
> <em class="emphasis">arguments</EM
>]<b class="emphasis.bold"> )</B
></P
></BLOCKQUOTE
><p class="para">The parentheses are optional. 
The first part is an expression that 
describes the format specifications; usually this is supplied
as a string constant in quotes.  The second
part is an argument list, such as a list of variable names,
that correspond to the format specifications.  <a class="indexterm" name="AUTOID-6000"></A
><a class="indexterm" name="AUTOID-6003"></A
>
A format specification is preceded by a percent sign (%) and the
specifier is one of the characters shown in <a class="xref" href="#SEDAWK-CH-7-TAB-6" title="Format Specifiers Used in printf">Table 7.6</A
>.
The two main format specifiers are <b class="emphasis.bold">s</B
> for strings and <b class="emphasis.bold">d</B
>
for decimal integers.[11]</P
><blockquote class="footnote"><p class="para">[11] The way <kbd class="command">printf</KBD
> does rounding is
discussed in <a class="xref" href="appb_01.htm" webstripperlinkwas="appb_01.htm" title="Quick Reference for awk">Appendix B</A
>.</P
></BLOCKQUOTE
><table class="table"><caption class="table"><a class="title" name="SEDAWK-CH-7-TAB-6">Table 7.6: Format Specifiers Used in printf</A
></CAPTION
><thead class="thead"><tr class="row" valign="TOP"><th class="entry" align="LEFT" rowspan="1" colspan="1">Character</TH
><th class="entry" align="LEFT" rowspan="1" colspan="1">Description</TH
></TR
></THEAD
><tbody class="tbody"><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1">c</TD
><td class="entry" rowspan="1" colspan="1">ASCII character</TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1">d</TD
><td class="entry" rowspan="1" colspan="1">Decimal integer</TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1">i</TD
><td class="entry" rowspan="1" colspan="1">Decimal integer. (Added in POSIX)</TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1">e</TD
><td class="entry" rowspan="1" colspan="1">Floating-point format ([-]<em class="emphasis">d</EM
>.<em class="emphasis">precision</EM
><b class="emphasis.bold">e</B
>[+-]<em class="emphasis">dd</EM
>)</TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1">E</TD
><td class="entry" rowspan="1" colspan="1">Floating-point format ([-]<em class="emphasis">d</EM
>.<em class="emphasis">precision</EM
><b class="emphasis.bold">E</B
>[+-]<em class="emphasis">dd</EM
>)</TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1">f</TD
><td class="entry" rowspan="1" colspan="1">Floating-point format ([-]<em class="emphasis">ddd</EM
>.<em class="emphasis">precision</EM
>)</TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1">g</TD
><td class="entry" rowspan="1" colspan="1"><b class="emphasis.bold">e</B
> or <b class="emphasis.bold">f</B
> conversion, whichever is shortest, with trailing zeros removed</TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1">G</TD
><td class="entry" rowspan="1" colspan="1"><b class="emphasis.bold">E</B
> or <b class="emphasis.bold">f</B
> conversion, whichever is shortest, with trailing zeros removed</TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1">o</TD
><td class="entry" rowspan="1" colspan="1">Unsigned octal value</TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1">s</TD
><td class="entry" rowspan="1" colspan="1">String</TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1">x</TD
><td class="entry" rowspan="1" colspan="1">Unsigned hexadecimal number. Uses <b class="emphasis.bold">a</B
>-<b class="emphasis.bold">f</B
> for 10 to 15</TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1">X</TD
><td class="entry" rowspan="1" colspan="1">Unsigned hexadecimal number. Uses <b class="emphasis.bold">A</B
>-<b class="emphasis.bold">F</B
> for 10 to 15</TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1">%</TD
><td class="entry" rowspan="1" colspan="1">Literal %</TD
></TR
></TBODY
></TABLE
><p class="para">This example uses the <kbd class="command">printf</KBD
> statement to produce
the output for rule 2 in the <kbd class="command">filesum</KBD
> program.
It outputs a string and a decimal value found in two different
fields:</P
><blockquote class="screen"><pre class="screen">printf(&quot;%d\t%s\n&quot;, $5, $9)</PRE
></BLOCKQUOTE
><p class="para">The value of <b class="emphasis.bold">$5</B
> is to be output, followed by a tab (\t) and
<b class="emphasis.bold">$9</B
> and then a newline (\n).[12]
For each format specification, you must supply a corresponding 
argument. </P
><blockquote class="footnote"><p class="para">[12] Compare this statement with the <kbd class="command">print</KBD
> statement in the
<kbd class="command">filesum</KBD
> program that prints the header line. The <kbd class="command">print</KBD
>
statement automatically supplies a newline (the value of <b class="emphasis.bold">ORS</B
>);
when using <kbd class="command">printf</KBD
>, you must supply the newline, it is never
automatically provided for you.</P
></BLOCKQUOTE
><p class="para"><a class="indexterm" name="AUTOID-6093"></A
><a class="indexterm" name="AUTOID-6095"></A
>This <kbd class="command">printf</KBD
> statement can be used to specify the width
and alignment of output fields.  A format expression
can take three optional modifiers following &quot;%&quot; and preceding the format
specifier:</P
><blockquote class="screen"><pre class="screen"><code class="userinput"><b>%-</B
></CODE
><code class="replaceable"><i>width</I
></CODE
><code class="userinput"><b>.</B
></CODE
><code class="replaceable"><i>precision format-specifier</I
></CODE
></PRE
></BLOCKQUOTE
><p class="para">The <em class="emphasis">width</EM
> of the output field is a numeric value. 
When you specify a field width, the contents of the field
will be right-justified by default.  You must specify
&quot;-&quot; to get left-justification.  Thus, &quot;%-20s&quot; outputs
a string left-justified in a field 20 characters wide.  If
the string is less than 20 characters, the field will be
padded with whitespace to fill.
In the following examples,
a &quot;|&quot; is output to indicate the actual width of the field.
The first example right-justifies the text: </P
><blockquote class="screen"><pre class="screen">printf(&quot;|%10s|\n&quot;, &quot;hello&quot;)</PRE
></BLOCKQUOTE
><p class="para">It produces:</P
><blockquote class="screen"><pre class="screen">|     hello|</PRE
></BLOCKQUOTE
><p class="para">The next example left-justifies the text: </P
><blockquote class="screen"><pre class="screen">printf(&quot;|%-10s|\n&quot;, &quot;hello&quot;)</PRE
></BLOCKQUOTE
><p class="para">It produces:</P
><blockquote class="screen"><pre class="screen">|hello     |</PRE
></BLOCKQUOTE
><p class="para"><a class="indexterm" name="AUTOID-6113"></A
><a class="indexterm" name="AUTOID-6115"></A
>The <em class="emphasis">precision</EM
> modifier, used for decimal
or floating-point values, controls the number of digits
that appear to the right of the decimal point.
For string values, it controls the maximum number of characters
from the string that will be printed.
Note that the default precision for the output of numeric
values is &quot;%.6g&quot;.</P
><p class="para">You can specify both the <em class="emphasis">width</EM
> and <em class="emphasis">precision</EM
> dynamically,
via values in the <kbd class="command">printf</KBD
> or <kbd class="command">sprintf</KBD
> argument list.
You do this by specifying asterisks, instead of literal values.</P
><blockquote class="screen"><pre class="screen">printf(&quot;%*.*g\n&quot;, 5, 3, myvar);</PRE
></BLOCKQUOTE
><p class="para">In this example, the width is 5, the precision is 3, and the value
to print will come from <b class="emphasis.bold">myvar</B
>.</P
><p class="para">The default precision used by the <kbd class="command">print</KBD
> statement when outputting
numbers
can be changed
by setting the system variable <b class="emphasis.bold">OFMT</B
>.<a class="indexterm" name="AUTOID-6130"></A
>
For instance, if you are using awk 
to write reports that contain dollar values, you might
prefer to change <b class="emphasis.bold">OFMT</B
> to &quot;%.2f&quot;.</P
><p class="para">Using the full syntax of the format expression
can solve the problem with <kbd class="command">filesum</KBD
> 
of getting fields and headings properly aligned. 
One reason we output the file size before the filename was that
the fields had a greater chance of aligning themselves
if they were output in that order.
The solution that <kbd class="command">printf</KBD
> offers us is the ability to
fix the width of output fields; therefore, each field begins
in the same column.  </P
><p class="para">Let's rearrange the output fields in the <kbd class="command">filesum</KBD
> report.
We want a minimum field width so that the second field begins
at the same position.  You specify 
the field width place between the <b class="emphasis.bold">%</B
> and the conversion
specification.  &quot;%-15s&quot; specifies a minimum field width 
of 15 characters in which 
the value is left-justified.  &quot;%10d&quot;, without the hyphen, 
is right-justified, which is what we want for a decimal value. </P
><blockquote class="screen"><pre class="screen">printf(&quot;%-15s\t%10d\n&quot;, $9, $5)       # print filename and size</PRE
></BLOCKQUOTE
><p class="para">This will produce a report in which the data 
is aligned in columns and the numbers are right-justified.
Look at how the <kbd class="command">printf</KBD
> statement
is used in the <kbd class="command">END</KBD
> action:</P
><blockquote class="screen"><pre class="screen">printf(&quot;Total: %d bytes  (%d files)\n&quot;, sum, filenum)</PRE
></BLOCKQUOTE
><p class="para">The column header in the <kbd class="command">BEGIN</KBD
> rule is also changed appropriately.
With the use of the <kbd class="command">printf</KBD
> statement, <kbd class="command">filesum</KBD
>
now produces the following output: </P
><blockquote class="screen"><pre class="screen">$ <code class="userinput"><b>filesum g*</B
></CODE
>
FILE                 BYTES
g                       23
gawk                  2237
gawk.mail             1171
gawk.test               74
gawkro                 264
gfilesum               610
grades                  64
grades.awk             231
grepscript               6
Total: 4680 bytes  (9 files)</PRE
></BLOCKQUOTE
><a class="indexterm" name="AUTOID-6150"></A
><a class="indexterm" name="AUTOID-6151"></A
><a class="indexterm" name="AUTOID-6152"></A
><a class="indexterm" name="AUTOID-6153"></A
><a class="indexterm" name="AUTOID-6154"></A
></DIV
><div class="htmlnav"><p></P
><hr align="LEFT" width="515" title="footer"><table width="515" border="0" cellspacing="0" cellpadding="0"><tr><td align="LEFT" valign="TOP" width="172"><a class="SECT1" href="ch07_08.htm" webstripperlinkwas="ch07_08.htm" title="7.8 Relational and Boolean Operators"><img src="../gifs/txtpreva.gif" webstripperlinkwas="../gifs/txtpreva.gif" alt="Previous: 7.8 Relational and Boolean Operators" border="0"></A
></TD
><td align="CENTER" valign="TOP" width="171"><a class="book" href="index.htm" webstripperlinkwas="http://www.ms.itb.ac.id/buku/unix-bookshelf/sedawk/index.htm" title="sed &amp; awk"><img src="../gifs/txthome.gif" webstripperlinkwas="../gifs/txthome.gif" alt="sed &amp; awk" border="0"></A
></TD
><td align="RIGHT" valign="TOP" width="172"><a class="SECT1" href="ch07_10.htm" webstripperlinkwas="ch07_10.htm" title="7.10 Passing Parameters Into a Script"><img src="../gifs/txtnexta.gif" webstripperlinkwas="../gifs/txtnexta.gif" alt="Next: 7.10 Passing Parameters Into a Script" border="0"></A
></TD
></TR
><tr><td align="LEFT" valign="TOP" width="172">7.8 Relational and Boolean Operators</TD
><td align="CENTER" valign="TOP" width="171"><a class="index" href="index/idx_0.htm" webstripperlinkwas="index/idx_0.htm" title="Book Index"><img src="../gifs/index.gif" webstripperlinkwas="../gifs/index.gif" alt="Book Index" border="0"></A
></TD
><td align="RIGHT" valign="TOP" width="172">7.10 Passing Parameters Into a Script</TD
></TR
></TABLE
><hr align="LEFT" width="515" title="footer"><img src="../gifs/smnavbar.gif" webstripperlinkwas="../gifs/smnavbar.gif" usemap="#map" border="0" alt="The UNIX CD Bookshelf Navigation"><map name="map"><area shape="RECT" coords="0,0,73,21" href="../index.html" webstripperlinkwas="http://www.ms.itb.ac.id/buku/unix-bookshelf/index.html" alt="The UNIX CD Bookshelf"><area shape="RECT" coords="74,0,163,21" href="../upt/index.htm" webstripperlinkwas="http://www.ms.itb.ac.id/buku/unix-bookshelf/upt/index.htm" alt="UNIX Power Tools"><area shape="RECT" coords="164,0,257,21" href="../unixnut/index.htm" webstripperlinkwas="http://www.ms.itb.ac.id/buku/unix-bookshelf/unixnut/index.htm" alt="UNIX in a Nutshell"><area shape="RECT" coords="258,0,321,21" href="../vi/index.htm" webstripperlinkwas="http://www.ms.itb.ac.id/buku/unix-bookshelf/vi/index.htm" alt="Learning the vi Editor"><area shape="RECT" coords="322,0,378,21" href="index.htm" webstripperlinkwas="http://www.ms.itb.ac.id/buku/unix-bookshelf/sedawk/index.htm" alt="sed &amp; awk"><area shape="RECT" coords="379,0,438,21" href="../ksh/index.htm" webstripperlinkwas="http://www.ms.itb.ac.id/buku/unix-bookshelf/ksh/index.htm" alt="Learning the Korn Shell"><area shape="RECT" coords="439,0,514,21" href="../lrnunix/index.htm" webstripperlinkwas="http://www.ms.itb.ac.id/buku/unix-bookshelf/lrnunix/index.htm" alt="Learning the UNIX Operating System"></MAP
></DIV
></BODY
></HTML
>
