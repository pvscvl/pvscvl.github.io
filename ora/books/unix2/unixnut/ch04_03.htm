<html><head><title>[Chapter 4] 4.3 Variables</TITLE
><meta name="DC.Creator" content="Arnold Robbins"><meta name="DC.Date" content="1999-12-03T20:23:30Z"><meta name="DC.Format" content="text/html" scheme="MIME"><meta name="DC.Identifier" content="O'Reilly-CDROM-1-56592-427-4"><meta name="DC.Language" content="en-US"><meta name="DC.Publisher" content="O'Reilly &amp; Associates, Inc."><meta name="DC.Source" content="1-56592-427-4" scheme="ISBN"><meta name="DC.Subject.Keyword" content="HTML, Web, CSS"><meta name="DC.Title" content="UNIX in a Nutshell: System V Edition"><meta name="DC.Type" content="Text.Monograph"><meta name="generator" content="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><link rev="made" href="mailto:online-books@oreilly.com" title="Online Books Comments"><link rel="up" href="ch04_01.htm" webstripperlinkwas="ch04_01.htm" title="4. The Bourne Shell and Korn Shell"><link rel="prev" href="ch04_02.htm" webstripperlinkwas="ch04_02.htm" title="4.2 Syntax"><link rel="next" href="ch04_04.htm" webstripperlinkwas="ch04_04.htm" title="4.4 Arithmetic Expressions"></HEAD
><body bgcolor="#FFFFFF" text="#000000"><div class="htmlnav"><h1><img src="gifs/smbanner.gif" webstripperlinkwas="gifs/smbanner.gif" alt="UNIX in a Nutshell: System V Edition" usemap="#srchmap" border="0"></H1
><map name="srchmap"><area shape="RECT" coords="0,0,466,65" href="index.htm" webstripperlinkwas="http://www.ms.itb.ac.id/buku/unix-bookshelf/unixnut/index.htm" alt="UNIX in a Nutshell: System V Edition"><area shape="RECT" coords="467,0,514,18" href="jobjects/fsearch.htm" webstripperlinkwas="jobjects/fsearch.htm" alt="Search this book"></MAP
><table width="515" border="0" cellspacing="0" cellpadding="0"><tr><td align="LEFT" valign="TOP" width="172"><a class="SECT1" href="ch04_02.htm" webstripperlinkwas="ch04_02.htm" title="4.2 Syntax"><img src="../gifs/txtpreva.gif" webstripperlinkwas="../gifs/txtpreva.gif" alt="Previous: 4.2 Syntax" border="0"></A
></TD
><td align="CENTER" valign="TOP" width="171"><b><font face="ARIEL,HELVETICA,HELV,SANSERIF" size="-1"><a class="chapter" rel="up" href="ch04_01.htm" webstripperlinkwas="ch04_01.htm" title="4. The Bourne Shell and Korn Shell">Chapter 4<br>The Bourne Shell and Korn Shell</A
></FONT
></B
></TD
><td align="RIGHT" valign="TOP" width="172"><a class="SECT1" href="ch04_04.htm" webstripperlinkwas="ch04_04.htm" title="4.4 Arithmetic Expressions"><img src="../gifs/txtnexta.gif" webstripperlinkwas="../gifs/txtnexta.gif" alt="Next: 4.4 Arithmetic Expressions" border="0"></A
></TD
></TR
></TABLE
>&nbsp;<hr align="LEFT" width="515" title="footer"></DIV
><div class="SECT1"><h2 class="sect1"><a class="title" name="UNUT-CH-4-SECT-3">4.3 Variables</A
></H2
><p class="para"><a class="indexterm" name="UNUT-CH-4-IX-VARIABLES-SH-AND-KSH-SHELLS"></A
><a class="indexterm" name="UNUT-CH-4-IX-KSH-KORN-SHELL-VARIABLES"></A
><a class="indexterm" name="UNUT-CH-4-IX-SH-BOURNE-SHELL-VARIABLES"></A
>This section describes the following:</P
><ul class="itemizedlist"><li class="listitem"><p class="para">Variable substitution</P
></LI
><li class="listitem"><p class="para">Built-in shell variables</P
></LI
><li class="listitem"><p class="para">Other shell variables</P
></LI
><li class="listitem"><p class="para">Arrays (Korn shell only)</P
></LI
><li class="listitem"><p class="para">Discipline functions (<kbd class="command">ksh93</KBD
> only)</P
></LI
></UL
><div class="sect2"><h3 class="sect2"><a class="title" name="UNUT-CH-4-SECT-3.1">4.3.1 Variable Substitution</A
></H3
><p class="para"><kbd class="command">ksh93</KBD
> provides structured variables, such as <code class="literal"><b>pos.x</B
></CODE
> and <code class="literal"><b>pos.y</B
></CODE
>. To create either one, <code class="literal"><b>pos</B
></CODE
> must already exist, and braces must be used to retrieve their values. Names beginning with <code class="literal"><b>.sh</B
></CODE
> are reserved for use by <kbd class="command">ksh</KBD
>.</P
><p class="para"><a class="indexterm" name="AUTOID-24137"></A
>No spaces should be used in the following expressions.  The colon (<code class="literal"><b>:</B
></CODE
>) is optional; if it's included, <em class="emphasis">var</EM
> must be nonnull as well as set.</P
><table class="informaltable" border="1" cellpadding="3"><tbody class="tbody"><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><p class="para"><i class="replaceable">var</I
><code class="literal"><b>=</B
></CODE
><i class="replaceable">value</I
> ...</P
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">Set each variable <em class="emphasis">var</EM
> to a <em class="emphasis">value</EM
>.</P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><p class="para"><code class="literal"><b>${</B
></CODE
><i class="replaceable">var</I
><code class="literal"><b>}</B
></CODE
></P
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">Use value of <em class="emphasis">var</EM
>; braces are optional if <em class="emphasis">var</EM
> is separated from the following text. They are required in <kbd class="command">ksh93</KBD
> if a variable name contains periods.</P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><p class="para"><code class="literal"><b>${</B
></CODE
><i class="replaceable">var</I
><code class="literal"><b>:-</B
></CODE
><i class="replaceable">value</I
><code class="literal"><b>}</B
></CODE
></P
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">Use <em class="emphasis">var</EM
> if set; otherwise, use <em class="emphasis">value</EM
>.</P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><p class="para"><code class="literal"><b>${</B
></CODE
><i class="replaceable">var</I
><code class="literal"><b>:=</B
></CODE
><i class="replaceable">value</I
><code class="literal"><b>}</B
></CODE
></P
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">Use <em class="emphasis">var</EM
> if set; otherwise, use <em class="emphasis">value</EM
> and assign <em class="emphasis">value</EM
> to <em class="emphasis">var</EM
>.</P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><p class="para"><code class="literal"><b>${</B
></CODE
><i class="replaceable">var</I
><code class="literal"><b>:?</B
></CODE
><i class="replaceable">value</I
><code class="literal"><b>}</B
></CODE
></P
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">Use <em class="emphasis">var</EM
> if set; otherwise, print <em class="emphasis">value</EM
> and exit (if not interactive). If <em class="emphasis">value</EM
> isn't supplied, print the phrase &quot;parameter null or not set.&quot;</P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><p class="para"><code class="literal"><b>${</B
></CODE
><i class="replaceable">var</I
><code class="literal"><b>:+</B
></CODE
><i class="replaceable">value</I
><code class="literal"><b>}</B
></CODE
></P
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">Use <em class="emphasis">value</EM
> if <em class="emphasis">var</EM
> is set; otherwise, use nothing.</P
></TD
></TR
></TBODY
></TABLE
><p class="para">In the Korn shell:</P
><table class="informaltable" border="1" cellpadding="3"><tbody class="tbody"><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><p class="para"><code class="literal"><b>${#</B
></CODE
><i class="replaceable">var</I
><code class="literal"><b>}</B
></CODE
></P
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">Use the length of <em class="emphasis">var</EM
>.</P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><p class="para"><code class="literal"><b>${#*}</B
></CODE
></P
></TD
><td class="entry" rowspan="2" colspan="1"><p class="para">Use the number of positional parameters.</P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><p class="para"><code class="literal"><b>${#@}</B
></CODE
></P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><p class="para"><code class="literal"><b>${</B
></CODE
><i class="replaceable">var</I
><code class="literal"><b>#</B
></CODE
><i class="replaceable">pattern</I
><code class="literal"><b>}</B
></CODE
></P
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">Use value of <em class="emphasis">var</EM
> after removing <em class="emphasis">pattern</EM
> from the left. Remove the shortest matching piece.</P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><p class="para"><code class="literal"><b>${</B
></CODE
><i class="replaceable">var</I
><code class="literal"><b>##</B
></CODE
><i class="replaceable">pattern</I
><code class="literal"><b>}</B
></CODE
></P
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">Same as <code class="literal"><b>#</B
></CODE
><em class="emphasis">pattern</EM
>, but remove the longest matching piece.</P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><p class="para"><code class="literal"><b>${</B
></CODE
><i class="replaceable">var</I
><code class="literal"><b>%</B
></CODE
><i class="replaceable">pattern</I
><code class="literal"><b>}</B
></CODE
></P
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">Use value of <em class="emphasis">var</EM
> after removing <em class="emphasis">pattern</EM
> from the right. Remove the shortest matching piece.</P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><p class="para"><code class="literal"><b>${</B
></CODE
><i class="replaceable">var</I
><code class="literal"><b>%%</B
></CODE
><i class="replaceable">pattern</I
><code class="literal"><b>}</B
></CODE
></P
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">Same as <code class="literal"><b>%</B
></CODE
><em class="emphasis">pattern</EM
>, but remove the longest matching piece.</P
></TD
></TR
></TBODY
></TABLE
><p class="para">In <kbd class="command">ksh93</KBD
>:</P
><table class="informaltable" border="1" cellpadding="3"><tbody class="tbody"><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><p class="para"><code class="literal"><b>${!</B
></CODE
><i class="replaceable">prefix</I
><code class="literal"><b>*}</B
></CODE
></P
></TD
><td class="entry" rowspan="2" colspan="1"><p class="para">List of variables whose names begin with <em class="emphasis">prefix</EM
>.</P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><p class="para"><code class="literal"><b>${!</B
></CODE
><i class="replaceable">prefix</I
><code class="literal"><b>@}</B
></CODE
></P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><p class="para"><code class="literal"><b>${</B
></CODE
><i class="replaceable">var</I
><code class="literal"><b>:</B
></CODE
><i class="replaceable">pos</I
><code class="literal"><b>}</B
></CODE
></P
></TD
><td class="entry" rowspan="2" colspan="1"><p class="para">Starting at position <em class="emphasis">pos</EM
> (0-based) in variable <em class="emphasis">var</EM
>, extract <em class="emphasis">len</EM
> characters, or rest of string if no <em class="emphasis">len</EM
>.  <em class="emphasis">pos</EM
> and <em class="emphasis">len</EM
> may be arithmetic expressions.</P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><p class="para"><code class="literal"><b>${</B
></CODE
><i class="replaceable">var</I
><code class="literal"><b>:</B
></CODE
><i class="replaceable">pos</I
><code class="literal"><b>:</B
></CODE
><i class="replaceable">len</I
><code class="literal"><b>}</B
></CODE
></P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><p class="para"><code class="literal"><b>${</B
></CODE
><i class="replaceable">var</I
><code class="literal"><b>/</B
></CODE
><i class="replaceable">pat</I
><code class="literal"><b>/</B
></CODE
><i class="replaceable">repl</I
><code class="literal"><b>}</B
></CODE
></P
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">Use value of <em class="emphasis">var</EM
>, with first match of <em class="emphasis">pat</EM
> replaced with <em class="emphasis">repl</EM
>.</P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><p class="para"><code class="literal"><b>${</B
></CODE
><i class="replaceable">var</I
><code class="literal"><b>/</B
></CODE
><i class="replaceable">pat</I
><code class="literal"><b>}</B
></CODE
></P
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">Use value of <em class="emphasis">var</EM
>, with first match of <em class="emphasis">pat</EM
> deleted.</P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><p class="para"><code class="literal"><b>${</B
></CODE
><i class="replaceable">var</I
><code class="literal"><b>//</B
></CODE
><i class="replaceable">pat</I
><code class="literal"><b>/</B
></CODE
><i class="replaceable">repl</I
><code class="literal"><b>}</B
></CODE
></P
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">Use value of <em class="emphasis">var</EM
>, with every match of <em class="emphasis">pat</EM
> replaced with <em class="emphasis">repl</EM
>.</P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><p class="para"><code class="literal"><b>${</B
></CODE
><i class="replaceable">var</I
><code class="literal"><b>/#</B
></CODE
><i class="replaceable">pat</I
><code class="literal"><b>/</B
></CODE
><i class="replaceable">repl</I
><code class="literal"><b>}</B
></CODE
></P
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">Use value of <em class="emphasis">var</EM
>, with match of <em class="emphasis">pat</EM
> replaced with <em class="emphasis">repl</EM
>. Match must occur at beginning of the value.</P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><p class="para"><code class="literal"><b>${</B
></CODE
><i class="replaceable">var</I
><code class="literal"><b>/%</B
></CODE
><i class="replaceable">pat</I
><code class="literal"><b>/</B
></CODE
><i class="replaceable">repl</I
><code class="literal"><b>}</B
></CODE
></P
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">Use value of <em class="emphasis">var</EM
>, with match of <em class="emphasis">pat</EM
> replaced with <em class="emphasis">repl</EM
>. Match must occur at end of the value.</P
></TD
></TR
></TBODY
></TABLE
><p class="para">In <kbd class="command">ksh93</KBD
>, indirect variables allow you to &quot;alias&quot; one variable name to affect the value of another.  This is accomplished using <code class="literal"><b>typeset -n</B
></CODE
>:</P
><blockquote class="screen"><pre class="screen">$ <code class="userinput"><b>greet=&quot;hello, world&quot;</B
></CODE
>			<i class="lineannotation">Create initial variable</I
>
$ <code class="userinput"><b>typeset -n friendly_message=greet</B
></CODE
>		<i class="lineannotation">Set up alias</I
>
$ <code class="userinput"><b>echo $friendly_message</B
></CODE
>			<i class="lineannotation">Access old value through new name</I
>
hello, world
$ <code class="userinput"><b>friendly_message=&quot;don't panic&quot;</B
></CODE
>		<i class="lineannotation">Change the value</I
>
$ <code class="userinput"><b>echo $greet</B
></CODE
>				<i class="lineannotation">Old variable is changed</I
>
don't panic</PRE
></BLOCKQUOTE
><div class="sect3"><h4 class="sect3"><a class="title" name="UNUT-CH-4-SECT-3.1.1">4.3.1.1 Examples</A
></H4
><p class="para"><blockquote class="screen"><pre class="screen">$ <code class="userinput"><b>u=up d=down blank=</B
></CODE
>		<i class="lineannotation">Assign values to three variables (last is null)</I
>
$ <code class="userinput"><b>echo ${u}root</B
></CODE
>			<i class="lineannotation">Braces are needed here</I
>
uproot
$ <code class="userinput"><b>echo ${u-$d}</B
></CODE
>                         <i class="lineannotation">Display value of u or d; since u is set, it's printed</I
>
up
$ <code class="userinput"><b>echo ${tmp-`date`}</B
></CODE
>	          <i class="lineannotation">If tmp is not set, the date command is executed</I
>
Thu Feb  4 15:03:46 EST 1993
$ <code class="userinput"><b>echo ${blank=&quot;no data&quot;}</B
></CODE
>		<i class="lineannotation">blank is set, so it is printed (a blank line)</I
>
$ <code class="userinput"><b>echo ${blank:=&quot;no data&quot;}</B
></CODE
>		<i class="lineannotation">blank is set but null, so the string is printed</I
>
no data	
$ <code class="userinput"><b>echo $blank</B
></CODE
>			<i class="lineannotation">blank now has a new value </I
>
no data</PRE
></BLOCKQUOTE
></P
></DIV
><div class="sect3"><h4 class="sect3"><a class="title" name="UNUT-CH-4-SECT-3.1.2">4.3.1.2 Korn shell example</A
></H4
><p class="para"><blockquote class="screen"><pre class="screen">tail='${PWD##*/}'	<i class="lineannotation">Take the current directory name and remove the longest character string ending</I
>
		<i class="lineannotation">with /, which removes the leading pathname and leaves the tail</I
></PRE
></BLOCKQUOTE
></P
></DIV
></DIV
><div class="sect2"><h3 class="sect2"><a class="title" name="UNUT-CH-4-SECT-3.2">4.3.2 Built-in Shell Variables</A
></H3
><p class="para"><a class="indexterm" name="AUTOID-24452"></A
><a class="indexterm" name="UNUT-CH-4-IX-SHELL-VARIABLES-SH-AND-KSH-SHELLS"></A
><a class="indexterm" name="AUTOID-24458"></A
>Built-in variables are automatically set by the shell and are typically used inside shell scripts.   Built-in variables can make use of the variable substitution  patterns shown previously. Note that the <code class="literal"><b>$</B
></CODE
> is not actually part of the variable name, although the variable is always referenced this way.<a class="indexterm" name="AUTOID-24462"></A
></P
><table class="informaltable" border="1" cellpadding="3"><tbody class="tbody"><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><p class="para"><code class="literal"><b>$#</B
></CODE
></P
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">Number of command-line arguments.</P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><p class="para"><code class="literal"><b>$-</B
></CODE
></P
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">Options currently in effect (arguments supplied to <kbd class="command">sh</KBD
> or to <kbd class="command">set</KBD
>). </P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><p class="para"><code class="literal"><b>$?</B
></CODE
></P
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">Exit value of last executed command.</P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><p class="para"><code class="literal"><b>$$</B
></CODE
></P
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">Process number of current process.</P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><p class="para"><code class="literal"><b>$!</B
></CODE
></P
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">Process number of last background command.</P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><p class="para"><code class="literal"><b>$0</B
></CODE
></P
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">First word; that is, command name. This will have the full path name if it was found via a PATH search.</P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><p class="para"><code class="literal"><b>$</B
></CODE
><i class="replaceable">n</I
></P
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">Individual arguments on command line (positional parameters). The Bourne shell allows only nine parameters to be referenced directly (<em class="emphasis">n</EM
> = 1-9); the Korn shell allows <em class="emphasis">n</EM
> to be greater than 9 if specified as <code class="literal"><b>${</B
></CODE
><i class="replaceable">n</I
><code class="literal"><b>}</B
></CODE
>.</P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><p class="para"><code class="literal"><b>$*</B
></CODE
>, <code class="literal"><b>$@</B
></CODE
></P
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">All arguments on command line (<code class="literal"><b>$1 $2</B
></CODE
> ...).</P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><p class="para"><code class="literal"><b>&quot;$*&quot;</B
></CODE
></P
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">All arguments on command line as one string (<code class="literal"><b>&quot;$1&nbsp;$2...&quot;</B
></CODE
>).</P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><p class="para"><code class="literal"><b>&quot;$@&quot;</B
></CODE
></P
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">All arguments on command line, individually quoted (<code class="literal"><b>&quot;$1&quot; &quot;$2&quot;</B
></CODE
> ...).</P
></TD
></TR
></TBODY
></TABLE
><p class="para">The Korn shell automatically sets these additional variables:</P
><table class="informaltable" border="1" cellpadding="3"><tbody class="tbody"><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><p class="para"><code class="literal"><b>$_</B
></CODE
></P
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">Temporary variable; initialized to pathname of script or program being executed.  Later, stores the last argument of previous command.  Also stores name of matching MAIL file during mail checks.</P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><p class="para"><code class="literal"><b>LINENO</B
></CODE
></P
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">Current line number within the script or function.<a class="indexterm" name="AUTOID-24560"></A
></P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><p class="para"><code class="literal"><b>OLDPWD</B
></CODE
></P
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">Previous working directory (set by <kbd class="command">cd</KBD
>).<a class="indexterm" name="AUTOID-24569"></A
></P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><p class="para"><code class="literal"><b>OPTARG</B
></CODE
></P
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">Name of last option processed by <kbd class="command">getopts</KBD
>.<a class="indexterm" name="AUTOID-24578"></A
></P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><p class="para"><code class="literal"><b>OPTIND</B
></CODE
></P
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">Numerical index of OPTARG.<a class="indexterm" name="AUTOID-24586"></A
></P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><p class="para"><code class="literal"><b>PPID</B
></CODE
></P
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">Process number of this shell's parent.<a class="indexterm" name="AUTOID-24594"></A
></P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><p class="para"><code class="literal"><b>PWD</B
></CODE
></P
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">Current working directory (set by <kbd class="command">cd</KBD
>).<a class="indexterm" name="AUTOID-24603"></A
></P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><p class="para"><code class="literal"><b>RANDOM</B
></CODE
>[<code class="literal"><b>=</B
></CODE
><i class="replaceable">n</I
>]</P
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">Generate a new random number with each reference;<a class="indexterm" name="AUTOID-24613"></A
> start with integer <em class="emphasis">n</EM
>, if given.</P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><p class="para"><code class="literal"><b>REPLY</B
></CODE
></P
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">Default reply, used by <kbd class="command">select</KBD
> and <kbd class="command">read</KBD
>.<a class="indexterm" name="AUTOID-24624"></A
></P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><p class="para"><code class="literal"><b>SECONDS</B
></CODE
>[<code class="literal"><b>=</B
></CODE
><i class="replaceable">n</I
>]</P
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">Number of seconds since the shell was started,<a class="indexterm" name="AUTOID-24634"></A
> or, if <em class="emphasis">n</EM
> is given, number of seconds + <em class="emphasis">n</EM
> since the shell started.</P
></TD
></TR
></TBODY
></TABLE
><p class="para"><kbd class="command">ksh93</KBD
> automatically sets these additional variables. Variables whose names contain &quot;.&quot; must be enclosed in braces when referenced, e.g., <code class="literal"><b>${.sh.edchar}</B
></CODE
>.</P
><table class="informaltable" border="1" cellpadding="3"><tbody class="tbody"><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><p class="para"><code class="literal"><b>HISTCMD</B
></CODE
></P
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">The history number of the current command.</P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><p class="para"><a class="indexterm" name="AUTOID-24655"></A
><code class="literal"><b>.sh.edchar</B
></CODE
></P
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">The character(s) entered when processing a <code class="literal"><b>KEYBD</B
></CODE
> trap.  Changing it replaces the characters that caused the trap.</P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><p class="para"><code class="literal"><b>.sh.edcol</B
></CODE
></P
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">The position of the cursor in the most recent <code class="literal"><b>KEYBD</B
></CODE
> trap.</P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><p class="para"><code class="literal"><b>.sh.edmode</B
></CODE
></P
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">Will be equal to ESCAPE if in a <code class="literal"><b>KEYBD</B
></CODE
> trap in <kbd class="command">vi</KBD
> mode, otherwise empty.</P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><p class="para"><code class="literal"><b>.sh.edtext</B
></CODE
></P
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">The characters in the input buffer during a <code class="literal"><b>KEYBD</B
></CODE
> trap.</P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><p class="para"><code class="literal"><b>.sh.name</B
></CODE
></P
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">The name of the variable running a discipline function.</P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><p class="para"><code class="literal"><b>.sh.subscript</B
></CODE
></P
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">The subscript of the variable running a discipline function.</P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><p class="para"><code class="literal"><b>.sh.value</B
></CODE
></P
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">The value of the variable inside the <code class="literal"><b>set</B
></CODE
> and <code class="literal"><b>get</B
></CODE
> discipline functions.</P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><p class="para"><code class="literal"><b>.sh.version</B
></CODE
></P
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">The version of <kbd class="command">ksh93</KBD
>.</P
></TD
></TR
></TBODY
></TABLE
></DIV
><div class="sect2"><h3 class="sect2"><a class="title" name="UNUT-CH-4-SECT-3.3">4.3.3 Other Shell Variables</A
></H3
><p class="para">The following variables are not automatically set by the shell. They are typically used in your <i class="filename">.profile</I
> file, where you can define them to suit your needs. Variables can be assigned values by issuing commands of the form:</P
><blockquote class="screen"><pre class="screen"><i class="replaceable">variable</I
>=<i class="replaceable">value</I
></PRE
></BLOCKQUOTE
><p class="para">This list includes the type of value expected when defining these variables. Those that are specific to the Korn shell are marked as (K). Those that are specific to <kbd class="command">ksh93</KBD
> are marked (K93).</P
><table class="informaltable" border="1" cellpadding="3"><tbody class="tbody"><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><p class="para"><code class="literal"><b>CDPATH=</B
></CODE
><i class="replaceable">dirs</I
></P
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">Directories searched by <kbd class="command">cd</KBD
>; allows shortcuts in changing directories; unset by default.</P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><p class="para"><a class="indexterm" name="AUTOID-24735"></A
><code class="literal"><b>COLUMNS=</B
></CODE
><i class="replaceable">n</I
></P
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">(K) Screen's column width; used in line edit modes and <kbd class="command">select</KBD
> lists.<a class="indexterm" name="AUTOID-24742"></A
></P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><p class="para"><code class="literal"><b>EDITOR=</B
></CODE
><i class="replaceable">file</I
></P
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">(K) Pathname of line edit mode to turn on<a class="indexterm" name="AUTOID-24751"></A
><a class="indexterm" name="AUTOID-24753"></A
> (can end in <kbd class="command">emacs</KBD
> or <kbd class="command">vi</KBD
>); used when VISUAL is not set.</P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><p class="para"><code class="literal"><b>ENV=</B
></CODE
><i class="replaceable">file</I
></P
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">(K) Name of script that gets executed at startup;<a class="indexterm" name="AUTOID-24764"></A
> useful for storing alias and function definitions. For example, <code class="literal"><b>ENV=$HOME/.kshrc</B
></CODE
> (like C shell's <i class="filename">.cshrc</I
>).</P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><p class="para"><code class="literal"><b>FCEDIT=</B
></CODE
><i class="replaceable">file</I
></P
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">(K) Editor used by <kbd class="command">fc</KBD
> command (default is <kbd class="command">/bin/ed</KBD
>). Obsoleted in <kbd class="command">ksh93</KBD
> by HISTEDIT.<a class="indexterm" name="AUTOID-24778"></A
></P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><p class="para"><code class="literal"><b>FIGNORE=</B
></CODE
><i class="replaceable">pattern</I
></P
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">(K93) Pattern describing the set of filenames to ignore during pattern matching.<a class="indexterm" name="AUTOID-24787"></A
></P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><p class="para"><code class="literal"><b>FPATH=</B
></CODE
><i class="replaceable">dirs</I
></P
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">(K) Directories to search for function definitions;<a class="indexterm" name="AUTOID-24796"></A
> undefined functions are set via <code class="literal"><b>typeset -fu</B
></CODE
>; FPATH is searched when these functions are first referenced. (<kbd class="command">ksh93</KBD
> also searches PATH.)</P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><p class="para"><code class="literal"><b>HISTEDIT=</B
></CODE
><i class="replaceable">file</I
></P
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">(K93) Editor used by <kbd class="command">hist</KBD
> command, if set.  Overrides the setting of FCEDIT.<a class="indexterm" name="AUTOID-24808"></A
></P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><p class="para"><code class="literal"><b>HISTFILE=</B
></CODE
><i class="replaceable">file</I
></P
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para"><a class="indexterm" name="AUTOID-24817"></A
>(K) File in which to store command history (must be set before <kbd class="command">ksh</KBD
> is started); default is <i class="filename">$HOME/.sh_history</I
>.</P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><p class="para"><code class="literal"><b>HISTSIZE=</B
></CODE
><i class="replaceable">n</I
></P
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para"><a class="indexterm" name="AUTOID-24828"></A
>(K) Number of history commands available (must be set before <kbd class="command">ksh</KBD
> is started); default is 128.</P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><p class="para"><code class="literal"><b>HOME=</B
></CODE
><i class="replaceable">dir</I
></P
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para"><a class="indexterm" name="AUTOID-24838"></A
>Home directory; set by <kbd class="command">login</KBD
> (from <i class="filename">/etc/passwd</I
> file).</P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><p class="para"><code class="literal"><b>IFS='</B
></CODE
><i class="replaceable">chars</I
><code class="literal"><b>'</B
></CODE
></P
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para"><a class="indexterm" name="AUTOID-24850"></A
>Input field separators; default is space, tab, and newline.</P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><p class="para"><code class="literal"><b>LANG=</B
></CODE
><i class="replaceable">dir</I
></P
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">Directory to use for certain language-dependent programs.<a class="indexterm" name="AUTOID-24859"></A
></P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><p class="para"><code class="literal"><b>LC_ALL=</B
></CODE
><i class="replaceable">locale</I
></P
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">(K93) Current locale; overrides LANG and the other LC_* variables.<a class="indexterm" name="AUTOID-24868"></A
></P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><p class="para"><code class="literal"><b>LC_COLLATE=</B
></CODE
><i class="replaceable">locale</I
></P
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">(K93) Locale to use for character collation (sorting order).<a class="indexterm" name="AUTOID-24877"></A
></P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><p class="para"><code class="literal"><b>LC_CTYPE=</B
></CODE
><i class="replaceable">locale</I
></P
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">(K93) Locale to use for character class functions. (See the earlier section &quot;Filename Metacharacters.&quot;)<a class="indexterm" name="AUTOID-24886"></A
></P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><p class="para"><code class="literal"><b>LC_NUMERIC=</B
></CODE
><i class="replaceable">locale</I
></P
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">(K93) Locale to use for the decimal-point character.<a class="indexterm" name="AUTOID-24895"></A
></P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><p class="para"><code class="literal"><b>LINES=</B
></CODE
><i class="replaceable">n</I
></P
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">(K) Screen's height; used for <kbd class="command">select</KBD
> lists.<a class="indexterm" name="AUTOID-24905"></A
></P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><p class="para"><code class="literal"><b>MAIL=</B
></CODE
><i class="replaceable">file</I
></P
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">Default file in which to receive mail; set by <kbd class="command">login</KBD
>.<a class="indexterm" name="AUTOID-24915"></A
></P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><p class="para"><code class="literal"><b>MAILCHECK=</B
></CODE
><i class="replaceable">n</I
></P
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">Number of seconds between mail checks; default is 600 (10 minutes).<a class="indexterm" name="AUTOID-24924"></A
></P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><p class="para"><code class="literal"><b>MAILPATH=</B
></CODE
><i class="replaceable">files</I
></P
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para"><a class="indexterm" name="AUTOID-24933"></A
>One or more files, delimited by a colon, in which to receive mail. Along with each file, you may supply an optional message that the shell prints when the file increases in size. Messages are separated from the file name by a separator character. The Korn shell separator is <code class="literal"><b>?</B
></CODE
>, and the default message is <code class="literal"><b>You have mail in $_</B
></CODE
>. <code class="literal"><b>$_</B
></CODE
> is replaced with the name of the file. The Bourne shell separator is <code class="literal"><b>%</B
></CODE
>, and the default message is <code class="literal"><b>You have mail</B
></CODE
>. For example, for <kbd class="command">ksh</KBD
>, you might have:  <blockquote class="screen"><pre class="screen">MAILPATH=&quot;$MAIL?Ring! Candygram!:/etc/motd?New Login Message&quot;</PRE
></BLOCKQUOTE
> </P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><p class="para"><code class="literal"><b>PATH=</B
></CODE
><i class="replaceable">dirlist</I
></P
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">One or more pathnames, delimited by colons, in which to search<a class="indexterm" name="AUTOID-24949"></A
> for commands to execute. Default for SVR4 is <code class="literal"><b>/bin:/usr/bin</B
></CODE
>. On Solaris, the default is <code class="literal"><b>/usr/bin:</B
></CODE
>. However, the standard start-up scripts change it to: <blockquote class="screen"><pre class="screen">/usr/bin:/usr/ucb:/etc:.</PRE
></BLOCKQUOTE
> <kbd class="command">ksh93</KBD
>: PATH is also searched for function definitions for undefined functions.</P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><p class="para"><code class="literal"><b>PS1=</B
></CODE
><i class="replaceable">string</I
></P
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">Primary prompt string; default is <code class="literal"><b>$</B
></CODE
>.<a class="indexterm" name="AUTOID-24963"></A
></P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><p class="para"><code class="literal"><b>PS2=</B
></CODE
><i class="replaceable">string</I
></P
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">Secondary prompt (used in multiline commands);  default is <code class="literal"><b>&gt;</B
></CODE
>.</P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><p class="para"><code class="literal"><b>PS3=</B
></CODE
><i class="replaceable">string</I
></P
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">(K) Prompt string in <kbd class="command">select</KBD
> loops; default is <code class="literal"><b>#?</B
></CODE
>.</P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><p class="para"><code class="literal"><b>PS4=</B
></CODE
><i class="replaceable">string</I
></P
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">(K) Prompt string for execution trace (<code class="literal"><b>ksh -x</B
></CODE
> or <code class="literal"><b>set -x</B
></CODE
>); default is <code class="literal"><b>+</B
></CODE
>.</P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><p class="para"><code class="literal"><b>SHACCT=</B
></CODE
><i class="replaceable">file</I
></P
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">&quot;Shell account&quot;; file in which to log executed shell scripts.<a class="indexterm" name="AUTOID-24999"></A
> Not in Korn shell.</P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><p class="para"><code class="literal"><b>SHELL=</B
></CODE
><i class="replaceable">file</I
></P
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">Name of default shell (e.g., <kbd class="command">/bin/sh</KBD
>).<a class="indexterm" name="AUTOID-25009"></A
></P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><p class="para"><code class="literal"><b>TERM=</B
></CODE
><i class="replaceable">string</I
></P
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">Terminal type.<a class="indexterm" name="AUTOID-25018"></A
></P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><p class="para"><code class="literal"><b>TMOUT=</B
></CODE
><i class="replaceable">n</I
></P
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para"><a class="indexterm" name="AUTOID-25027"></A
>(K) If no command is typed after <em class="emphasis">n</EM
> seconds, exit the shell.</P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><p class="para"><code class="literal"><b>VISUAL=</B
></CODE
><i class="replaceable">path</I
></P
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para"><a class="indexterm" name="AUTOID-25037"></A
>(K) Same as EDITOR, but VISUAL is checked first.</P
></TD
></TR
></TBODY
></TABLE
><a class="indexterm" name="AUTOID-25039"></A
></DIV
><div class="sect2"><h3 class="sect2"><a class="title" name="UNUT-CH-4-SECT-3.4">4.3.4 Arrays</A
></H3
><p class="para"><a class="indexterm" name="AUTOID-25043"></A
><a class="indexterm" name="AUTOID-25046"></A
>The Korn shell supports one-dimensional arrays of up to 1024 elements. The first element is numbered 0. An array <em class="emphasis">name</EM
> can be initialized as follows:</P
><blockquote class="screen"><pre class="screen">set -A <i class="replaceable">name value0 value1 ...</I
></PRE
></BLOCKQUOTE
><p class="para">where the specified values become elements of <em class="emphasis">name</EM
>. Declaring arrays is not required, however.  Any valid reference to a subscripted variable can create an array.</P
><p class="para"><a class="indexterm" name="AUTOID-25055"></A
>When referencing arrays, use the <code class="literal"><b>${</B
></CODE
> ... <code class="literal"><b>}</B
></CODE
> syntax. This isn't needed when referencing arrays inside <code class="literal"><b>((  ))</B
></CODE
>  (the form of <kbd class="command">let</KBD
> that does automatic quoting). Note that <code class="literal"><b>[</B
></CODE
> and <code class="literal"><b>]</B
></CODE
> are typed literally (i.e., they don't  stand for optional syntax).</P
><table class="informaltable" border="1" cellpadding="3"><tbody class="tbody"><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><p class="para"><code class="literal"><b>${</B
></CODE
><i class="replaceable">name</I
><code class="literal"><b>[</B
></CODE
><i class="replaceable">i</I
><code class="literal"><b>]}</B
></CODE
></P
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">Use element <em class="emphasis">i</EM
> of array <em class="emphasis">name</EM
>. <em class="emphasis">i</EM
> can be any arithmetic expression as described under <kbd class="command">let</KBD
>. The expression must return a value between 0 and 1023.</P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><p class="para"><code class="literal"><b>${</B
></CODE
><i class="replaceable">name</I
><code class="literal"><b>}</B
></CODE
></P
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">Use element 0 of array <em class="emphasis">name</EM
>.</P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><p class="para"><code class="literal"><b>${</B
></CODE
><i class="replaceable">name</I
><code class="literal"><b>[*]}</B
></CODE
></P
></TD
><td class="entry" rowspan="2" colspan="1"><p class="para">Use all elements of array <em class="emphasis">name</EM
>.</P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><p class="para"><code class="literal"><b>${</B
></CODE
><i class="replaceable">name</I
><code class="literal"><b>[@]}</B
></CODE
></P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><p class="para"><code class="literal"><b>${#</B
></CODE
><i class="replaceable">name</I
><code class="literal"><b>[*]}</B
></CODE
></P
></TD
><td class="entry" rowspan="2" colspan="1"><p class="para">Use the number of elements in array <em class="emphasis">name</EM
>.</P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><p class="para"><code class="literal"><b>${#</B
></CODE
><i class="replaceable">name</I
><code class="literal"><b>[@]}</B
></CODE
></P
></TD
></TR
></TBODY
></TABLE
><p class="para"><kbd class="command">ksh93</KBD
> provides associative arrays, where the indices are strings instead of numbers (as in <kbd class="command">awk</KBD
>). In this case, <code class="literal"><b>[</B
></CODE
> and <code class="literal"><b>]</B
></CODE
> act like double quotes. Associative arrays are created with <code class="literal"><b>typeset -A</B
></CODE
>. A special syntax   allows assigning to multiple elements at once:</P
><blockquote class="screen"><pre class="screen">data=([joe]=30 [mary]=25)</PRE
></BLOCKQUOTE
><p class="para">The values would be retrieved as <code class="literal"><b>${data[joe]}</B
></CODE
> and <code class="literal"><b>${data[mary]}</B
></CODE
>.</P
><a class="indexterm" name="AUTOID-25131"></A
><a class="indexterm" name="AUTOID-25132"></A
><a class="indexterm" name="AUTOID-25133"></A
></DIV
><div class="sect2"><h3 class="sect2"><a class="title" name="UNUT-CH-4-SECT-3.5">4.3.5 Discipline Functions (ksh93 only)</A
></H3
><p class="para"><a class="indexterm" name="AUTOID-25137"></A
><a class="indexterm" name="AUTOID-25139"></A
>Along with structured variables, <kbd class="command">ksh93</KBD
> introduces <em class="emphasis">discipline functions</EM
>. These are special functions that are called whenever a variable's value is accessed or changed. For a shell variable named <code class="literal"><b>x</B
></CODE
>, you can define the following functions:</P
><table class="informaltable" border="1" cellpadding="3"><tbody class="tbody"><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><code class="literal"><b>x.get</B
></CODE
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">Called when <code class="literal"><b>x</B
></CODE
>'s value is retrieved (<code class="literal"><b>$x</B
></CODE
>).</P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><code class="literal"><b>x.set</B
></CODE
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">Called when <code class="literal"><b>x</B
></CODE
>'s value is changed (<code class="literal"><b>x=2</B
></CODE
>).</P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><code class="literal"><b>x.unset</B
></CODE
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">Called when <code class="literal"><b>x</B
></CODE
> is unset (<code class="literal"><b>unset x</B
></CODE
>).</P
></TD
></TR
></TBODY
></TABLE
><p class="para">Within the discipline functions, special variables provide information about the variable being changed:</P
><table class="informaltable" border="1" cellpadding="3"><tbody class="tbody"><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><code class="literal"><b>.sh.name</B
></CODE
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">The name of the variable being changed.</P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><code class="literal"><b>.sh.subscript</B
></CODE
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">The subscript of the array element being changed.</P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><code class="literal"><b>.sh.value</B
></CODE
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">The value of the variable being assigned or returned.  Changing it within the discipline function changes the value that is actually assigned or returned.</P
></TD
></TR
></TBODY
></TABLE
></DIV
></DIV
><div class="htmlnav"><p></P
><hr align="LEFT" width="515" title="footer"><table width="515" border="0" cellspacing="0" cellpadding="0"><tr><td align="LEFT" valign="TOP" width="172"><a class="SECT1" href="ch04_02.htm" webstripperlinkwas="ch04_02.htm" title="4.2 Syntax"><img src="../gifs/txtpreva.gif" webstripperlinkwas="../gifs/txtpreva.gif" alt="Previous: 4.2 Syntax" border="0"></A
></TD
><td align="CENTER" valign="TOP" width="171"><a class="book" href="index.htm" webstripperlinkwas="http://www.ms.itb.ac.id/buku/unix-bookshelf/unixnut/index.htm" title="UNIX in a Nutshell: System V Edition"><img src="../gifs/txthome.gif" webstripperlinkwas="../gifs/txthome.gif" alt="UNIX in a Nutshell: System V Edition" border="0"></A
></TD
><td align="RIGHT" valign="TOP" width="172"><a class="SECT1" href="ch04_04.htm" webstripperlinkwas="ch04_04.htm" title="4.4 Arithmetic Expressions"><img src="../gifs/txtnexta.gif" webstripperlinkwas="../gifs/txtnexta.gif" alt="Next: 4.4 Arithmetic Expressions" border="0"></A
></TD
></TR
><tr><td align="LEFT" valign="TOP" width="172">4.2 Syntax</TD
><td align="CENTER" valign="TOP" width="171"><a class="index" href="index/idx_0.htm" webstripperlinkwas="index/idx_0.htm" title="Book Index"><img src="../gifs/index.gif" webstripperlinkwas="../gifs/index.gif" alt="Book Index" border="0"></A
></TD
><td align="RIGHT" valign="TOP" width="172">4.4 Arithmetic Expressions</TD
></TR
></TABLE
><hr align="LEFT" width="515" title="footer"><img src="../gifs/smnavbar.gif" webstripperlinkwas="../gifs/smnavbar.gif" usemap="#map" border="0" alt="The UNIX CD Bookshelf Navigation"><map name="map"><area shape="RECT" coords="0,0,73,21" href="../index.html" webstripperlinkwas="http://www.ms.itb.ac.id/buku/unix-bookshelf/index.html" alt="The UNIX CD Bookshelf"><area shape="RECT" coords="74,0,163,21" href="../upt/index.htm" webstripperlinkwas="http://www.ms.itb.ac.id/buku/unix-bookshelf/upt/index.htm" alt="UNIX Power Tools"><area shape="RECT" coords="164,0,257,21" href="index.htm" webstripperlinkwas="http://www.ms.itb.ac.id/buku/unix-bookshelf/unixnut/index.htm" alt="UNIX in a Nutshell"><area shape="RECT" coords="258,0,321,21" href="../vi/index.htm" webstripperlinkwas="http://www.ms.itb.ac.id/buku/unix-bookshelf/vi/index.htm" alt="Learning the vi Editor"><area shape="RECT" coords="322,0,378,21" href="../sedawk/index.htm" webstripperlinkwas="http://www.ms.itb.ac.id/buku/unix-bookshelf/sedawk/index.htm" alt="sed &amp; awk"><area shape="RECT" coords="379,0,438,21" href="../ksh/index.htm" webstripperlinkwas="http://www.ms.itb.ac.id/buku/unix-bookshelf/ksh/index.htm" alt="Learning the Korn Shell"><area shape="RECT" coords="439,0,514,21" href="../lrnunix/index.htm" webstripperlinkwas="http://www.ms.itb.ac.id/buku/unix-bookshelf/lrnunix/index.htm" alt="Learning the UNIX Operating System"></MAP
></DIV
></BODY
></HTML
>


