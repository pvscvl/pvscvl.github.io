<html><head><title>Reference: expr</TITLE
><meta name="DC.Creator" content="Arnold Robbins"><meta name="DC.Date" content="1999-12-03T20:09:38Z"><meta name="DC.Format" content="text/html" scheme="MIME"><meta name="DC.Identifier" content="O'Reilly-CDROM-1-56592-427-4"><meta name="DC.Language" content="en-US"><meta name="DC.Publisher" content="O'Reilly &amp; Associates, Inc."><meta name="DC.Source" content="1-56592-427-4" scheme="ISBN"><meta name="DC.Subject.Keyword" content="HTML, Web, CSS"><meta name="DC.Title" content="UNIX in a Nutshell: System V Edition"><meta name="DC.Type" content="Text.Monograph"><meta name="generator" content="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><link rev="made" href="mailto:online-books@oreilly.com" title="Online Books Comments"><link rel="up" href="ch02_01.htm" webstripperlinkwas="ch02_01.htm" title="2. Unix Commands"><link rel="prev" href="c02_076.htm" webstripperlinkwas="c02_076.htm" title="Reference: expand"><link rel="next" href="c02_078.htm" webstripperlinkwas="c02_078.htm" title="Reference: exstr"></HEAD
><body bgcolor="#FFFFFF" text="#000000"><div class="htmlnav"><h1><img src="gifs/smbanner.gif" webstripperlinkwas="gifs/smbanner.gif" alt="UNIX in a Nutshell: System V Edition" usemap="#srchmap" border="0"></H1
><map name="srchmap"><area shape="RECT" coords="0,0,466,65" href="index.htm" webstripperlinkwas="http://www.ms.itb.ac.id/buku/unix-bookshelf/unixnut/index.htm" alt="UNIX in a Nutshell: System V Edition"><area shape="RECT" coords="467,0,514,18" href="jobjects/fsearch.htm" webstripperlinkwas="jobjects/fsearch.htm" alt="Search this book"></MAP
><table width="515" border="0" cellspacing="0" cellpadding="0"><tr><td align="LEFT" valign="TOP" width="172"><a class="NUTENTRY" href="c02_076.htm" webstripperlinkwas="c02_076.htm" title="Reference: expand"><img src="../gifs/txtpreva.gif" webstripperlinkwas="../gifs/txtpreva.gif" alt="Previous: Reference: expand" border="0"></A
></TD
><td align="CENTER" valign="TOP" width="171"><b><font face="ARIEL,HELVETICA,HELV,SANSERIF" size="-1"><a class="chapter" rel="up" href="ch02_01.htm" webstripperlinkwas="ch02_01.htm" title="2. Unix Commands">Chapter 2<br>Unix Commands</A
></FONT
></B
></TD
><td align="RIGHT" valign="TOP" width="172"><a class="NUTENTRY" href="c02_078.htm" webstripperlinkwas="c02_078.htm" title="Reference: exstr"><img src="../gifs/txtnexta.gif" webstripperlinkwas="../gifs/txtnexta.gif" alt="Next: Reference: exstr" border="0"></A
></TD
></TR
></TABLE
>&nbsp;<hr align="LEFT" width="515" title="footer"></DIV
><div class="NUTENTRY"><h2 class="nutentry"><a class="term" name="AUTOID-7090">expr</A
></H2
><code class="literal"><b>expr</B
></CODE
> <i class="replaceable">arg1 operator arg2</I
> [ <i class="replaceable">operator arg3 ...</I
> ]<br><dl class="nutentrybody"><p class="para"><a class="indexterm" name="AUTOID-7098"></A
><a class="indexterm" name="AUTOID-7100"></A
><a class="indexterm" name="AUTOID-7102"></A
>Evaluate arguments as expressions and print the result. Strings can be compared and searched. Arguments and operators must be separated by spaces. In most cases, an argument is an integer, typed literally or represented by a shell variable. There are three types of operators:  arithmetic, relational, and logical. Exit status for <kbd class="command">expr</KBD
> is 0 (expression is nonzero and nonnull), 1 (expression is 0 or null), or 2 (expression is invalid).</P
><p class="para"><kbd class="command">expr</KBD
> is typically used in shell scripts to perform simple mathematics, such as addition or subtraction. It is made obsolete in the Korn shell by that program's built-in arithmetic capabilities.</P
><div class="refsect2"><h3 class="refsect2"><a class="title" name="AUTOID-7107">Arithmetic Operators</A
></H3
><p class="para">Use the following operators to produce mathematical expressions whose results are printed:</P
><table class="informaltable" border="1" cellpadding="3"><tbody class="tbody"><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><code class="literal"><b>+</B
></CODE
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">Add <em class="emphasis">arg2</EM
> to <em class="emphasis">arg1</EM
>.</P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><code class="literal"><b>-</B
></CODE
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">Subtract <em class="emphasis">arg2</EM
> from <em class="emphasis">arg1</EM
>.</P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><code class="literal"><b>*</B
></CODE
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">Multiply the arguments.</P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><code class="literal"><b>/</B
></CODE
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">Divide <em class="emphasis">arg1</EM
> by <em class="emphasis">arg2</EM
>.</P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><code class="literal"><b>%</B
></CODE
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">Take the remainder when <em class="emphasis">arg1</EM
> is divided by <em class="emphasis">arg2</EM
>.</P
></TD
></TR
></TBODY
></TABLE
><p class="para">Addition and subtraction are evaluated last, unless they are grouped inside parentheses. The symbols <code class="literal"><b>*</B
></CODE
>, <code class="literal"><b>(</B
></CODE
>, and <code class="literal"><b>)</B
></CODE
> have meaning to the shell, so they must be escaped (preceded by a backslash or enclosed in single or double quotes).</P
></DIV
><div class="refsect2"><h3 class="refsect2"><a class="title" name="AUTOID-7152">Relational Operators</A
></H3
><p class="para">Use relational operators to compare two arguments. Arguments can also be words, in which case comparisons assume <code class="literal"><b>a &lt; z</B
></CODE
> and <code class="literal"><b>A &lt; Z</B
></CODE
>. If the comparison statement is true, the result is 1; if false,  the result is 0. Symbols <code class="literal"><b>&lt;</B
></CODE
> and <code class="literal"><b>&gt;</B
></CODE
> must be escaped.</P
><table class="informaltable" border="1" cellpadding="3"><tbody class="tbody"><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><code class="literal"><b>=</B
></CODE
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">Are the arguments equal?</P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><code class="literal"><b>!=</B
></CODE
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">Are the arguments different?</P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><code class="literal"><b>&gt;</B
></CODE
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">Is <em class="emphasis">arg1</EM
> greater than <em class="emphasis">arg2</EM
>?</P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><code class="literal"><b>&gt;=</B
></CODE
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">Is <em class="emphasis">arg1</EM
> greater than or equal to <em class="emphasis">arg2</EM
>?</P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><code class="literal"><b>&lt;</B
></CODE
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">Is <em class="emphasis">arg1</EM
> less than <em class="emphasis">arg2</EM
>?</P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><code class="literal"><b>&lt;=</B
></CODE
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">Is <em class="emphasis">arg1</EM
> less than or equal to <em class="emphasis">arg2</EM
>?</P
></TD
></TR
></TBODY
></TABLE
></DIV
><div class="refsect2"><h3 class="refsect2"><a class="title" name="AUTOID-7202">Logical Operators</A
></H3
><p class="para">Use logical operators to compare two arguments. Depending on the values, the result can be <em class="emphasis">arg1</EM
> (or some portion of it), <em class="emphasis">arg2</EM
>, or 0. Symbols <code class="literal"><b>|</B
></CODE
> and <code class="literal"><b>&amp;</B
></CODE
> must be escaped.</P
><dl class="variablelist"><dt class="term"><code class="literal"><b>|</B
></CODE
></DT
><dd class="listitem"><p class="para">Logical OR; if <em class="emphasis">arg1</EM
> has a nonzero (and nonnull) value, the result is <em class="emphasis">arg1</EM
>; otherwise, the result is <em class="emphasis">arg2</EM
>.</P
></DD
><dt class="term"><code class="literal"><b>&amp;</B
></CODE
></DT
><dd class="listitem"><p class="para">Logical AND; if both <em class="emphasis">arg1</EM
> and <em class="emphasis">arg2</EM
> have a nonzero  (and nonnull) value, the result is <em class="emphasis">arg1</EM
>; otherwise,  the result is 0.</P
></DD
><dt class="term">:</DT
><dd class="listitem"><p class="para">Similar to <kbd class="command">grep</KBD
>; <em class="emphasis">arg2</EM
> is a pattern to search for in <em class="emphasis">arg1</EM
>. <em class="emphasis">arg2</EM
> must be a regular expression in this case. If the <em class="emphasis">arg2</EM
> pattern is enclosed in <code class="literal"><b>\(  \)</B
></CODE
>, the result is the portion of <em class="emphasis">arg1</EM
> that matches; otherwise, the result is simply the number of characters that match. By default, a  pattern match always applies to the beginning of the first argument (the search string implicitly begins with a <code class="literal"><b>^</B
></CODE
>). To match other parts of the string, start the search string with <code class="literal"><b>.*</B
></CODE
>.</P
></DD
></DL
></DIV
><div class="refsect2"><h3 class="refsect2"><a class="title" name="AUTOID-7239">Examples</A
></H3
><p class="para">Division happens first; result is 10:</P
><p class="para"><blockquote class="screen"><pre class="screen"><code class="userinput"><b>expr 5 + 10 / 2</B
></CODE
></PRE
></BLOCKQUOTE
></P
><p class="para">Addition happens first; result is 7 (truncated from 7.5):</P
><p class="para"><blockquote class="screen"><pre class="screen"><code class="userinput"><b>expr \( 5 + 10 \) / 2</B
></CODE
></PRE
></BLOCKQUOTE
></P
><p class="para">Add 1 to variable <code class="literal"><b>i</B
></CODE
>; this is how variables are incremented in shell scripts:</P
><p class="para"><blockquote class="screen"><pre class="screen"><code class="userinput"><b>i=`expr $i + 1`</B
></CODE
></PRE
></BLOCKQUOTE
></P
><p class="para">Print 1 (true) if variable <code class="literal"><b>a</B
></CODE
> is the string &quot;hello&quot;:</P
><p class="para"><blockquote class="screen"><pre class="screen"><code class="userinput"><b>expr $a = hello</B
></CODE
></PRE
></BLOCKQUOTE
></P
><p class="para">Print 1 (true) if variable <code class="literal"><b>b</B
></CODE
> plus 5 equals 10 or more:</P
><p class="para"><blockquote class="screen"><pre class="screen"><code class="userinput"><b>expr $b + 5 \&gt;= 10</B
></CODE
></PRE
></BLOCKQUOTE
></P
><p class="para">In the following examples, variable <code class="literal"><b>p</B
></CODE
> is the string  <code class="literal"><b>&quot;version.100&quot;</B
></CODE
>. This command prints the number of characters in <code class="literal"><b>p</B
></CODE
>:</P
><p class="para"><blockquote class="screen"><pre class="screen"><code class="userinput"><b>expr $p : '.*'</B
></CODE
>        <i class="lineannotation">Result is 11</I
></PRE
></BLOCKQUOTE
></P
><p class="para">Match all characters and print them:</P
><p class="para"><blockquote class="screen"><pre class="screen"><code class="userinput"><b>expr $p : '\(.*\)'</B
></CODE
>    <i class="lineannotation">Result is &quot;version.100&quot;</I
></PRE
></BLOCKQUOTE
></P
><p class="para">Print the number of lowercase letters at the beginning of <code class="literal"><b>p</B
></CODE
>:</P
><p class="para"><blockquote class="screen"><pre class="screen"><code class="userinput"><b>expr $p : '[a-z]*'</B
></CODE
>     <i class="lineannotation">Result is 7</I
></PRE
></BLOCKQUOTE
></P
><p class="para">Match the lowercase letters at the beginning of <code class="literal"><b>p</B
></CODE
>:</P
><p class="para"><blockquote class="screen"><pre class="screen"><code class="userinput"><b>expr $p : '\([a-z]*\)'</B
></CODE
> <i class="lineannotation">Result is &quot;version&quot;</I
></PRE
></BLOCKQUOTE
></P
><p class="para">Truncate <code class="literal"><b>$x</B
></CODE
> if it contains five or more characters;  if not, just print <code class="literal"><b>$x</B
></CODE
>. (Logical OR uses the second argument when the first one is 0 or null; i.e., when the match fails.) Double-quoting is a good idea, in case <code class="literal"><b>$x</B
></CODE
> contains whitespace characters.</P
><p class="para"><blockquote class="screen"><pre class="screen"><code class="userinput"><b>expr &quot;$x&quot; : '\(.....\)' \| &quot;$x&quot;</B
></CODE
></PRE
></BLOCKQUOTE
></P
><p class="para">In a shell script, rename files to their first five letters:</P
><p class="para"><blockquote class="screen"><pre class="screen"><code class="userinput"><b>mv &quot;$x&quot; `expr &quot;$x&quot; : '\(.....\)' \| &quot;$x&quot;</B
></CODE
>`</PRE
></BLOCKQUOTE
></P
><p class="para">(To avoid overwriting files with similar names, use <code class="literal"><b>mv -i</B
></CODE
>.)</P
></DIV
></DL
></DIV
><div class="htmlnav"><p></P
><hr align="LEFT" width="515" title="footer"><table width="515" border="0" cellspacing="0" cellpadding="0"><tr><td align="LEFT" valign="TOP" width="172"><a class="NUTENTRY" href="c02_076.htm" webstripperlinkwas="c02_076.htm" title="Reference: expand"><img src="../gifs/txtpreva.gif" webstripperlinkwas="../gifs/txtpreva.gif" alt="Previous: Reference: expand" border="0"></A
></TD
><td align="CENTER" valign="TOP" width="171"><a class="book" href="index.htm" webstripperlinkwas="http://www.ms.itb.ac.id/buku/unix-bookshelf/unixnut/index.htm" title="UNIX in a Nutshell: System V Edition"><img src="../gifs/txthome.gif" webstripperlinkwas="../gifs/txthome.gif" alt="UNIX in a Nutshell: System V Edition" border="0"></A
></TD
><td align="RIGHT" valign="TOP" width="172"><a class="NUTENTRY" href="c02_078.htm" webstripperlinkwas="c02_078.htm" title="Reference: exstr"><img src="../gifs/txtnexta.gif" webstripperlinkwas="../gifs/txtnexta.gif" alt="Next: Reference: exstr" border="0"></A
></TD
></TR
><tr><td align="LEFT" valign="TOP" width="172">Reference: expand</TD
><td align="CENTER" valign="TOP" width="171"><a class="index" href="index/idx_0.htm" webstripperlinkwas="index/idx_0.htm" title="Book Index"><img src="../gifs/index.gif" webstripperlinkwas="../gifs/index.gif" alt="Book Index" border="0"></A
></TD
><td align="RIGHT" valign="TOP" width="172">Reference: exstr</TD
></TR
></TABLE
><hr align="LEFT" width="515" title="footer"><img src="../gifs/smnavbar.gif" webstripperlinkwas="../gifs/smnavbar.gif" usemap="#map" border="0" alt="The UNIX CD Bookshelf Navigation"><map name="map"><area shape="RECT" coords="0,0,73,21" href="../index.html" webstripperlinkwas="http://www.ms.itb.ac.id/buku/unix-bookshelf/index.html" alt="The UNIX CD Bookshelf"><area shape="RECT" coords="74,0,163,21" href="../upt/index.htm" webstripperlinkwas="http://www.ms.itb.ac.id/buku/unix-bookshelf/upt/index.htm" alt="UNIX Power Tools"><area shape="RECT" coords="164,0,257,21" href="index.htm" webstripperlinkwas="http://www.ms.itb.ac.id/buku/unix-bookshelf/unixnut/index.htm" alt="UNIX in a Nutshell"><area shape="RECT" coords="258,0,321,21" href="../vi/index.htm" webstripperlinkwas="http://www.ms.itb.ac.id/buku/unix-bookshelf/vi/index.htm" alt="Learning the vi Editor"><area shape="RECT" coords="322,0,378,21" href="../sedawk/index.htm" webstripperlinkwas="http://www.ms.itb.ac.id/buku/unix-bookshelf/sedawk/index.htm" alt="sed &amp; awk"><area shape="RECT" coords="379,0,438,21" href="../ksh/index.htm" webstripperlinkwas="http://www.ms.itb.ac.id/buku/unix-bookshelf/ksh/index.htm" alt="Learning the Korn Shell"><area shape="RECT" coords="439,0,514,21" href="../lrnunix/index.htm" webstripperlinkwas="http://www.ms.itb.ac.id/buku/unix-bookshelf/lrnunix/index.htm" alt="Learning the UNIX Operating System"></MAP
></DIV
></BODY
></HTML
>


