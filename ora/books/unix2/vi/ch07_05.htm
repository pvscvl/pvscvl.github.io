<html><head><title>[Chapter 7] 7.5 Editing Program Source Code </TITLE
><meta name="DC.Creator" content="Linda Lamb &amp; Arnold Robbins"><meta name="DC.Date" content="1999-11-23T17:57:06Z"><meta name="DC.Format" content="text/html" scheme="MIME"><meta name="DC.Identifier" content="O'Reilly Unix CDROM-unknown"><meta name="DC.Language" content="en-US"><meta name="DC.Publisher" content="O'Reilly &amp; Associates, Inc."><meta name="DC.Source" content="unknown" scheme="ISBN"><meta name="DC.Subject.Keyword" content="Unix, vi, text, editor, tool"><meta name="DC.Title" content="Learning the vi Editor"><meta name="DC.Type" content="Text.Monograph"><meta name="generator" content="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><link rev="made" href="mailto:online-books@oreilly.com" title="Online Books Comments"><link rel="up" href="ch07_01.htm" webstripperlinkwas="ch07_01.htm" title="7. Advanced Editing"><link rel="prev" href="ch07_04.htm" webstripperlinkwas="ch07_04.htm" title="7.4 Using ex Scripts "><link rel="next" href="part02.htm" webstripperlinkwas="part02.htm" title="II. Extensions and Clones"></HEAD
><body bgcolor="#FFFFFF" text="#000000"><div class="htmlnav"><h1><img src="gifs/smbanner.gif" webstripperlinkwas="gifs/smbanner.gif" alt="Learning the vi Editor" usemap="#srchmap" border="0"></H1
><map name="srchmap"><area shape="RECT" coords="0,0,466,65" href="index.htm" webstripperlinkwas="http://www.ms.itb.ac.id/buku/unix-bookshelf/vi/index.htm" alt="Learning the vi Editor"><area shape="RECT" coords="467,0,514,18" href="jobjects/fsearch.htm" webstripperlinkwas="jobjects/fsearch.htm" alt="Search this book"></MAP
><table width="515" border="0" cellspacing="0" cellpadding="0"><tr><td align="LEFT" valign="TOP" width="172"><a class="SECT1" href="ch07_04.htm" webstripperlinkwas="ch07_04.htm" title="7.4 Using ex Scripts "><img src="../gifs/txtpreva.gif" webstripperlinkwas="../gifs/txtpreva.gif" alt="Previous: 7.4 Using ex Scripts " border="0"></A
></TD
><td align="CENTER" valign="TOP" width="171"><b><font face="ARIEL,HELVETICA,HELV,SANSERIF" size="-1"><a class="chapter" rel="up" href="ch07_01.htm" webstripperlinkwas="ch07_01.htm" title="7. Advanced Editing">Chapter 7<br>Advanced Editing</A
></FONT
></B
></TD
><td align="RIGHT" valign="TOP" width="172"><a class="PART" href="part02.htm" webstripperlinkwas="part02.htm" title="II. Extensions and Clones"><img src="../gifs/txtnexta.gif" webstripperlinkwas="../gifs/txtnexta.gif" alt="Next: II. Extensions and Clones" border="0"></A
></TD
></TR
></TABLE
>&nbsp;<hr align="LEFT" width="515" title="footer"></DIV
><div class="SECT1"><h2 class="sect1"><a class="title" name="VI6-CH-7-SECT-5">7.5 Editing Program Source Code </A
></H2
><p class="para"><a class="indexterm" name="CH07.SOURCE1"></A
><a class="indexterm" name="CH07.SOURCE2"></A
><a class="indexterm" name="CH07.SOURCE3"></A
>All of the features discussed so far are of interest
whether you are editing English text or program source code. However,
there are a number of additional features that are of interest chiefly
to programmers. These include indentation control, searching for the
beginning and end of procedures, and using <code class="literal">ctags</CODE
>.</P
><p class="para"><a class="indexterm" name="AUTOID-9741"></A
>The following discussion is adapted from documentation provided by
Mortice Kern Systems with their excellent implementation of <kbd class="command">vi</KBD
>
for DOS and Windows-based systems, available as a part of the MKS Toolkit or
separately as MKS Vi. It is
reprinted by permission of Mortice Kern Systems.</P
><div class="sect2"><h3 class="sect2"><a class="title" name="VI6-CH-7-SECT-5.1">7.5.1 Indentation Control </A
></H3
><p class="para"><a class="indexterm" name="CH07.INDENT1"></A
><a class="indexterm" name="CH07.INDENT2"></A
><a class="indexterm" name="CH07.INDENT3"></A
><a class="indexterm" name="CH07.SOURCEINDENT1"></A
><a class="indexterm" name="CH07.SOURCEINDENT2"></A
><a class="indexterm" name="CH07.SOURCEINDENT3"></A
>The source code for a program differs from ordinary text in
a number of ways. One of the most important of these is the way
in which source code uses indentation. Indentation shows the
logical structure of the program: the way in which statements are
grouped into blocks.
<kbd class="command">vi</KBD
> provides automatic indentation control. To use it,
issue the command:</P
><blockquote class="screen"><pre class="screen">:set autoindent</PRE
></BLOCKQUOTE
><p class="para">Now, when you indent a line with spaces or tabs, the
following lines will automatically be indented by the same
amount. When you press
<kbd class="keycap">[RETURN]</KBD
>
after typing the first indented
line, the cursor goes to the next line and automatically
indents the same distance as the previous line.</P
><p class="para">As a programmer, you will find this saves you quite a bit of work
getting the indentation right, especially when you have several
levels of indentation.</P
><p class="para">When you are entering code with autoindent enabled, typing
<kbd class="keycap">[CTRL-T]</KBD
>
at the start of a line gives you another level of indentation and
typing
<kbd class="keycap">[CTRL-D]</KBD
>
takes one away.</P
><p class="para">We should point out that
<kbd class="keycap">[CTRL-T]</KBD
>
and
<kbd class="keycap">[CTRL-D]</KBD
>
are typed while you are in insert mode, unlike most other commands,
which are typed in command mode.</P
><p class="para">There are two additional variants of the
<kbd class="keycap">[CTRL-D]</KBD
> command.[<a class="footnote" href="#AUTOID-9779">8</A
>]</P
><blockquote class="footnote"><div class="footnote"><p class="para"><a class="footnote" name="AUTOID-9779">[8]</A
> These do not work in <kbd class="command">elvis</KBD
> 2.0.</P
></DIV
></BLOCKQUOTE
><dl class="variablelist"><dt class="term"><code class="literal">^ ^D</CODE
></DT
><dd class="listitem"><p class="para">When you type <code class="literal">^ ^D</CODE
>
(<kbd class="keycap">[^]</KBD
> <kbd class="keycap">[CTRL-D]</KBD
>), <kbd class="command">vi</KBD
>
shifts the cursor back to the beginning of the line, but only for
the current line. The next line you enter will start at
the current auto-indent level.
This is particularly useful for entering C preprocessor commands
while typing in C/C++ source code.</P
></DD
><dt class="term"><code class="literal">0 ^D</CODE
></DT
><dd class="listitem"><p class="para">When you type <code class="literal">0 ^D</CODE
>, <kbd class="command">vi</KBD
>
shifts the cursor back to the beginning of the line. In addition,
the current auto-indent level is reset to zero; the next line you
enter will not be auto-indented.[<a class="footnote" href="#AUTOID-9799">9</A
>]</P
><blockquote class="footnote"><div class="footnote"><p class="para"><a class="footnote" name="AUTOID-9799">[9]</A
> The <kbd class="command">nvi</KBD
> 1.79 documentation has these two
commands switched, but the program actually behaves as
described here.</P
></DIV
></BLOCKQUOTE
></DD
></DL
><p class="para">Try using the <code class="literal">autoindent</CODE
> option when you are entering
source code. It simplifies the job of getting indentation
correct. It can even sometimes help you avoid bugs (e.g., in C
source code, where you usually need one closing curly brace
(<code class="literal">}</CODE
>) for every
level of indentation you go backwards).</P
><p class="para">The <code class="literal">&lt;&lt;</CODE
> and <code class="literal">&gt;&gt;</CODE
>
commands are also helpful when indenting
source code.
By default, <code class="literal">&gt;&gt;</CODE
> shifts a line right eight spaces
(i.e., adds eight spaces of indentation)
and <code class="literal">&lt;&lt;</CODE
> shifts a line left eight spaces.
For example, move the cursor to the beginning of a line and
press the <code class="literal">&gt;</CODE
> key twice (<code class="literal">&gt;&gt;</CODE
>).
You will see the line move right.
If you now press the <code class="literal">&lt;</CODE
>
key twice (<code class="literal">&lt;&lt;</CODE
>), the line will move back again.</P
><p class="para">You can shift a number of lines by typing the number followed
by <code class="literal">&gt;&gt;</CODE
> or <code class="literal">&lt;&lt;</CODE
>.
For example, move the cursor to the first line of
a good-size paragraph and type <code class="literal">5&gt;&gt;</CODE
>.
You will shift the first five lines in
the paragraph.</P
><p class="para">The default shift is eight spaces (right or left). This default
can be changed with a command like:</P
><p class="para"><blockquote class="screen"><pre class="screen"><code class="literal">:set shiftwidth=4</CODE
></PRE
></BLOCKQUOTE
></P
><p class="para">You will find it convenient to have a shiftwidth that is the
same size as the width between tab stops.</P
><p class="para"><kbd class="command">vi</KBD
> attempts to be smart when doing indenting.
Usually, when you see text indented by eight spaces at a time,
<kbd class="command">vi</KBD
> will actually insert tab characters into
the file, since tabs usually expand to eight spaces.
This is the UNIX default; it is most noticable when you type
a tab during normal input, and when files are sent to a
printer&nbsp;-- UNIX expands them with a tab stop of eight spaces.</P
><p class="para">If you wish, you can change how <kbd class="command">vi</KBD
> represents
tabs on your screen, by changing the <code class="literal">tabstop</CODE
>
option. For example, if you have something that is deeply indented,
you might wish to have use a tab stop setting of every four
characters, so that the lines will not wrap.
The following command will make this change:
 
 </P
><blockquote class="screen"><pre class="screen">:set tabstop=4</PRE
></BLOCKQUOTE
><blockquote class="note"><p class="para"><strong>NOTE:</STRONG
> Changing your tab stops is not recommended. Although <kbd class="command">vi</KBD
>
will display the file using an arbitrary tabstop setting, the tab characters
in your files will still be expanded using an eight-character tab
stop by every other UNIX program.
Eight-character tab stops are one of the facts of life on UNIX,
and you should just get used to them.</P
></BLOCKQUOTE
><p class="para">Sometimes indentation won't work the way you expect, because
what you believe to be a tab character is actually one or more
spaces.
Normally, your screen displays both a tab and a space
as whitespace, making the two indistinguishable.
You can, however, issue the command:</P
><p class="para"><blockquote class="screen"><pre class="screen">:set list</PRE
></BLOCKQUOTE
></P
><p class="para"> 
 
This alters your display so that a tab appears as the control
character <code class="literal">^I</CODE
> and an end-of-line appears as a <code class="literal">$</CODE
>.
This way, you can spot a true space, and you can see extra spaces
at the end of a line. A temporary equivalent is the
<code class="literal">:l</CODE
> command.
For example, the command:</P
><p class="para"><blockquote class="screen"><pre class="screen">:5,20 l</PRE
></BLOCKQUOTE
></P
><p class="para">displays lines 5 through 20,
showing tab characters and end-of-line characters.
 </P
><a class="indexterm" name="AUTOID-9843"></A
><a class="indexterm" name="AUTOID-9844"></A
><a class="indexterm" name="AUTOID-9845"></A
><a class="indexterm" name="AUTOID-9846"></A
><a class="indexterm" name="AUTOID-9847"></A
><a class="indexterm" name="AUTOID-9848"></A
></DIV
><div class="sect2"><h3 class="sect2"><a class="title" name="VI6-CH-7-SECT-5.2">7.5.2 A Special Search Command </A
></H3
><p class="para"><a class="indexterm" name="CH07.SOURCEBRACKET1"></A
><a class="indexterm" name="CH07.SOURCEBRACKET2"></A
><a class="indexterm" name="CH07.SOURCEBRACKET3"></A
><a class="indexterm" name="CH07.BRACKET1"></A
><a class="indexterm" name="CH07.BRACKET2"></A
><a class="indexterm" name="CH07.BRACKET3"></A
><a class="indexterm" name="CH07.BRACKET4"></A
><a class="indexterm" name="CH07.BRACKET5"></A
><a class="indexterm" name="CH07.BRACKET6"></A
><a class="indexterm" name="CH07.BRACKET7"></A
><a class="indexterm" name="CH07.BRACKET8"></A
><a class="indexterm" name="CH07.BRACKET9"></A
><a class="indexterm" name="CH07.BRACKET10"></A
><a class="indexterm" name="AUTOID-9892"></A
><a class="indexterm" name="AUTOID-9895"></A
><a class="indexterm" name="AUTOID-9898"></A
>
The characters <code class="literal">(</CODE
>,
<code class="literal">[</CODE
>, <code class="literal">{</CODE
>,
and <code class="literal">&lt;</CODE
> can all be called
opening brackets. When the cursor is resting on one of these
characters, pressing the <code class="literal">%</CODE
> key moves the cursor from the opening
bracket forward to the corresponding closing
bracket&nbsp;-- <code class="literal">)</CODE
>,
<code class="literal">]</CODE
>,
<code class="literal">}</CODE
>,
or <code class="literal">&gt;</CODE
>&nbsp;-- keeping in mind the usual
rules for nesting brackets.[<a class="footnote" href="#AUTOID-9910">10</A
>]
For example, if you were to move the cursor to the
first <code class="literal">(</CODE
> in:</P
><blockquote class="footnote"><div class="footnote"><p class="para"><a class="footnote" name="AUTOID-9910">[10]</A
> Of the versions tested, only <kbd class="command">nvi</KBD
>
supported matching <code class="literal">&lt;</CODE
> and
<code class="literal">&gt;</CODE
> with <code class="literal">%</CODE
>.
<kbd class="command">vile</KBD
> lets you set an option with the sets of pairs
of characters that match for <code class="literal">%</CODE
>.</P
></DIV
></BLOCKQUOTE
><p class="para"><blockquote class="screen"><pre class="screen">if ( cos(a[i]) &gt; sin(b[i]+c[i]) )
{
	printf(&quot;cos and sin equal!\n&quot;);
}</PRE
></BLOCKQUOTE
></P
><p class="para">and press <code class="literal">%</CODE
>, you would see that the cursor jumps to the
parenthesis at the end of the line. This is the closing
parenthesis that matches the opening one.</P
><p class="para">Similarly if the cursor is on one of the closing bracket
characters, pressing <code class="literal">%</CODE
> will move the cursor backwards to the
corresponding opening bracket character. For example, move the
cursor to the closing brace after the <code class="literal">printf</CODE
> line above
and press <code class="literal">%</CODE
>.</P
><p class="para"><kbd class="command">vi</KBD
> is even smart enough to find a bracket character
for you. If the cursor is not on a bracket character, when you press
<code class="literal">%</CODE
>, <kbd class="command">vi</KBD
> will search forward on the
current line to the first open or close bracket character it finds,
and then move to the matching bracket!
For instance, with the cursor on the <code class="literal">&gt;</CODE
> in the
first line of the example above, <code class="literal">%</CODE
> will find the
open parenthesis, and then move to the close parenthesis.</P
><p class="para">Not only does this search character help you move forward and
backward through a program in long jumps, it lets you check the
nesting of brackets and parentheses in source code. For example, if you put
the cursor on the first <code class="literal">{</CODE
> at the beginning of a C function,
pressing <code class="literal">%</CODE
> should move you to the <code class="literal">}</CODE
>
that (you think) ends the
function. If it's the wrong one, something has gone wrong somewhere.
If there is no matching <code class="literal">}</CODE
> in the file,
<kbd class="command">vi</KBD
> will beep at you.</P
><p class="para">Another technique for finding matching brackets is to turn on
the following option:
 
 </P
><p class="para"><blockquote class="screen"><pre class="screen">:set showmatch</PRE
></BLOCKQUOTE
></P
><p class="para">Unlike <code class="literal">%</CODE
>, setting <code class="literal">showmatch</CODE
>
(or its abbreviation <code class="literal">sm</CODE
>) helps you
while you're in insert mode. When you type a <code class="literal">)</CODE
> or a
<code class="literal">}</CODE
>,[<a class="footnote" href="#AUTOID-9948">11</A
>]
the cursor will briefly move back to the matching <code class="literal">(</CODE
> or
<code class="literal">{</CODE
> before returning to your current position.
If the match doesn't exist, the terminal beeps.
If the match is merely off-screen, <kbd class="command">vi</KBD
> silently keeps going.
 </P
><blockquote class="footnote"><div class="footnote"><p class="para"><a class="footnote" name="AUTOID-9948">[11]</A
> In <kbd class="command">elvis</KBD
>, <kbd class="command">vim</KBD
>,
and <kbd class="command">vile</KBD
>, <code class="literal">showmatch</CODE
>
also shows you matching square brackets
(<code class="literal">[</CODE
> and <code class="literal">]</CODE
>).</P
></DIV
></BLOCKQUOTE
><a class="indexterm" name="AUTOID-9959"></A
><a class="indexterm" name="AUTOID-9960"></A
><a class="indexterm" name="AUTOID-9961"></A
><a class="indexterm" name="AUTOID-9962"></A
><a class="indexterm" name="AUTOID-9963"></A
><a class="indexterm" name="AUTOID-9964"></A
><a class="indexterm" name="AUTOID-9965"></A
><a class="indexterm" name="AUTOID-9966"></A
><a class="indexterm" name="AUTOID-9967"></A
><a class="indexterm" name="AUTOID-9968"></A
><a class="indexterm" name="AUTOID-9969"></A
><a class="indexterm" name="AUTOID-9970"></A
><a class="indexterm" name="AUTOID-9971"></A
></DIV
><div class="sect2"><h3 class="sect2"><a class="title" name="VI6-CH-7-SECT-5.3">7.5.3 Using Tags</A
></H3
><p class="para"><a class="indexterm" name="AUTOID-9975"></A
><a class="indexterm" name="AUTOID-9979"></A
><a class="indexterm" name="AUTOID-9982"></A
><a class="indexterm" name="AUTOID-9986"></A
>The source code for a large C or C++ program will usually be spread
over several files. Sometimes, it is difficult to keep track of
which file contains which function definitions. To simplify
matters, a UNIX command called <code class="literal">ctags</CODE
> can be used together
with the <code class="literal">:tag</CODE
> command of <kbd class="command">vi</KBD
>.<a class="indexterm" name="AUTOID-9991"></A
></P
><blockquote class="note"><p class="para"><strong>NOTE:</STRONG
> UNIX versions of <code class="literal">ctags</CODE
> handle the C language, and
often Pascal and Fortran 77. Sometimes they even handle assembly language.
Almost universally, however, they do not handle C++.
Other versions are available that can generate <i class="filename">tags</I
>
files for C++, and for
other languages and file types.</P
></BLOCKQUOTE
><p class="para">The <code class="literal">ctags</CODE
> command is issued at the UNIX command line.
Its purpose is to create an information file
that <kbd class="command">vi</KBD
> can use later to determine which files define which
functions. By default, this file is called <i class="filename">tags</I
>.
From within <kbd class="command">vi</KBD
>, a command of the form:</P
><p class="para"><blockquote class="screen"><pre class="screen"><code class="literal">:!ctags file.c</CODE
></PRE
></BLOCKQUOTE
></P
><p class="para">will create a file named <i class="filename">tags</I
> in your current directory
that contains information on the functions defined in <i class="filename">file.c</I
>.
A command like:</P
><p class="para"><blockquote class="screen"><pre class="screen"><code class="literal">:!ctags *.c</CODE
></PRE
></BLOCKQUOTE
></P
><p class="para">will create a <i class="filename">tags</I
> file describing all the C source files in the
directory.</P
><p class="para">Now suppose your <i class="filename">tags</I
> file contains information on all the
source files that make up a C program. Also suppose that you want
to look at or edit a function in the program, but do not know where
the function is.
From within <kbd class="command">vi</KBD
>, the command:</P
><p class="para"><blockquote class="screen"><pre class="screen">:tag <code class="replaceable"><i>name</I
></CODE
></PRE
></BLOCKQUOTE
></P
><p class="para">will look at the <i class="filename">tags</I
> file to find out which file contains the
definition of the function <em class="emphasis">name</EM
>.
It will then read in the file and position
the cursor on the line where the name is defined. In this way,
you don't have to know which file you have to edit; you only have
to decide which function you want to edit.</P
><p class="para">You can use the tag facility from <kbd class="command">vi</KBD
>'s command
mode as well. Place the cursor on the identifier you wish to look
up, and then type <code class="literal">^]</CODE
>.  <kbd class="command">vi</KBD
> will
perform the tag lookup and move to the file that defines the identifier.
Be careful where you place the cursor; <kbd class="command">vi</KBD
> uses the
&quot;word&quot; under the cursor starting at the current cursor
position, not the entire word containing the cursor.</P
><blockquote class="note"><p class="para"><strong>NOTE:</STRONG
> If you try to use the <code class="literal">:tag</CODE
> command to
read in a new file and you haven't saved your current text since
the last time you changed it, <kbd class="command">vi</KBD
> will not let you go
to the new file. You must either write out your current file with the
<code class="literal">:w</CODE
> command and then issue <code class="literal">:tag</CODE
>,
or else type:</P
><blockquote class="screen"><pre class="screen">:tag! <code class="replaceable"><i>name</I
></CODE
></PRE
></BLOCKQUOTE
><p class="para">to override <kbd class="command">vi</KBD
>'s reluctance to discard edits.</P
></BLOCKQUOTE
><p class="para"><a class="indexterm" name="AUTOID-10038"></A
><a class="indexterm" name="AUTOID-10041"></A
><a class="indexterm" name="AUTOID-10045"></A
><a class="indexterm" name="AUTOID-10048"></A
>The Solaris 2.6 version of <kbd class="command">vi</KBD
> actually
supports tag <em class="emphasis">stacks</EM
>.
It appears, however, to be completely undocumented in the
Solaris man pages.
Because many, if not most, versions of UNIX <kbd class="command">vi</KBD
>
don't do tag stacking, we have moved the discussion of this feature
to <a class="xref" href="ch08_05.htm" webstripperlinkwas="ch08_05.htm">Section 8.5.3, "Tag Stacks"</A
> in <a class="xref" href="ch08_01.htm" webstripperlinkwas="ch08_01.htm">Chapter 8</A
>,
where tag stacking is introduced.
 </P
></DIV
><a class="indexterm" name="AUTOID-10055"></A
><a class="indexterm" name="AUTOID-10056"></A
><a class="indexterm" name="AUTOID-10057"></A
></DIV
><div class="htmlnav"><p></P
><hr align="LEFT" width="515" title="footer"><table width="515" border="0" cellspacing="0" cellpadding="0"><tr><td align="LEFT" valign="TOP" width="172"><a class="SECT1" href="ch07_04.htm" webstripperlinkwas="ch07_04.htm" title="7.4 Using ex Scripts "><img src="../gifs/txtpreva.gif" webstripperlinkwas="../gifs/txtpreva.gif" alt="Previous: 7.4 Using ex Scripts " border="0"></A
></TD
><td align="CENTER" valign="TOP" width="171"><a class="book" href="index.htm" webstripperlinkwas="http://www.ms.itb.ac.id/buku/unix-bookshelf/vi/index.htm" title="Learning the vi Editor"><img src="../gifs/txthome.gif" webstripperlinkwas="../gifs/txthome.gif" alt="Learning the vi Editor" border="0"></A
></TD
><td align="RIGHT" valign="TOP" width="172"><a class="PART" href="part02.htm" webstripperlinkwas="part02.htm" title="II. Extensions and Clones"><img src="../gifs/txtnexta.gif" webstripperlinkwas="../gifs/txtnexta.gif" alt="Next: II. Extensions and Clones" border="0"></A
></TD
></TR
><tr><td align="LEFT" valign="TOP" width="172">7.4 Using ex Scripts </TD
><td align="CENTER" valign="TOP" width="171"><a class="index" href="index/idx_0.htm" webstripperlinkwas="index/idx_0.htm" title="Book Index"><img src="../gifs/index.gif" webstripperlinkwas="../gifs/index.gif" alt="Book Index" border="0"></A
></TD
><td align="RIGHT" valign="TOP" width="172">II. Extensions and Clones</TD
></TR
></TABLE
><hr align="LEFT" width="515" title="footer"><img src="../gifs/smnavbar.gif" webstripperlinkwas="../gifs/smnavbar.gif" usemap="#map" border="0" alt="The UNIX CD Bookshelf Navigation"><map name="map"><area shape="RECT" coords="0,0,73,21" href="../index.html" webstripperlinkwas="http://www.ms.itb.ac.id/buku/unix-bookshelf/index.html" alt="The UNIX CD Bookshelf"><area shape="RECT" coords="74,0,163,21" href="../upt/index.htm" webstripperlinkwas="http://www.ms.itb.ac.id/buku/unix-bookshelf/upt/index.htm" alt="UNIX Power Tools"><area shape="RECT" coords="164,0,257,21" href="../unixnut/index.htm" webstripperlinkwas="http://www.ms.itb.ac.id/buku/unix-bookshelf/unixnut/index.htm" alt="UNIX in a Nutshell"><area shape="RECT" coords="258,0,321,21" href="index.htm" webstripperlinkwas="http://www.ms.itb.ac.id/buku/unix-bookshelf/vi/index.htm" alt="Learning the vi Editor"><area shape="RECT" coords="322,0,378,21" href="../sedawk/index.htm" webstripperlinkwas="http://www.ms.itb.ac.id/buku/unix-bookshelf/sedawk/index.htm" alt="sed &amp; awk"><area shape="RECT" coords="379,0,438,21" href="../ksh/index.htm" webstripperlinkwas="http://www.ms.itb.ac.id/buku/unix-bookshelf/ksh/index.htm" alt="Learning the Korn Shell"><area shape="RECT" coords="439,0,514,21" href="../lrnunix/index.htm" webstripperlinkwas="http://www.ms.itb.ac.id/buku/unix-bookshelf/lrnunix/index.htm" alt="Learning the UNIX Operating System"></MAP
></DIV
></BODY
></HTML
>

