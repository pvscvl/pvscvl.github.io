<html><head><title>[Chapter 6] 6.3 Pattern-Matching Rules </TITLE
><meta name="DC.Creator" content="Linda Lamb &amp; Arnold Robbins"><meta name="DC.Date" content="1999-11-23T17:56:32Z"><meta name="DC.Format" content="text/html" scheme="MIME"><meta name="DC.Identifier" content="O'Reilly Unix CDROM-unknown"><meta name="DC.Language" content="en-US"><meta name="DC.Publisher" content="O'Reilly &amp; Associates, Inc."><meta name="DC.Source" content="unknown" scheme="ISBN"><meta name="DC.Subject.Keyword" content="Unix, vi, text, editor, tool"><meta name="DC.Title" content="Learning the vi Editor"><meta name="DC.Type" content="Text.Monograph"><meta name="generator" content="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><link rev="made" href="mailto:online-books@oreilly.com" title="Online Books Comments"><link rel="up" href="ch06_01.htm" webstripperlinkwas="ch06_01.htm" title="6. Global Replacement"><link rel="prev" href="ch06_02.htm" webstripperlinkwas="ch06_02.htm" title="6.2 Context-Sensitive Replacement"><link rel="next" href="ch06_04.htm" webstripperlinkwas="ch06_04.htm" title="6.4 Pattern-Matching Examples "></HEAD
><body bgcolor="#FFFFFF" text="#000000"><div class="htmlnav"><h1><img src="gifs/smbanner.gif" webstripperlinkwas="gifs/smbanner.gif" alt="Learning the vi Editor" usemap="#srchmap" border="0"></H1
><map name="srchmap"><area shape="RECT" coords="0,0,466,65" href="index.htm" webstripperlinkwas="http://www.ms.itb.ac.id/buku/unix-bookshelf/vi/index.htm" alt="Learning the vi Editor"><area shape="RECT" coords="467,0,514,18" href="jobjects/fsearch.htm" webstripperlinkwas="jobjects/fsearch.htm" alt="Search this book"></MAP
><table width="515" border="0" cellspacing="0" cellpadding="0"><tr><td align="LEFT" valign="TOP" width="172"><a class="SECT1" href="ch06_02.htm" webstripperlinkwas="ch06_02.htm" title="6.2 Context-Sensitive Replacement"><img src="../gifs/txtpreva.gif" webstripperlinkwas="../gifs/txtpreva.gif" alt="Previous: 6.2 Context-Sensitive Replacement" border="0"></A
></TD
><td align="CENTER" valign="TOP" width="171"><b><font face="ARIEL,HELVETICA,HELV,SANSERIF" size="-1"><a class="chapter" rel="up" href="ch06_01.htm" webstripperlinkwas="ch06_01.htm" title="6. Global Replacement">Chapter 6<br>Global Replacement</A
></FONT
></B
></TD
><td align="RIGHT" valign="TOP" width="172"><a class="SECT1" href="ch06_04.htm" webstripperlinkwas="ch06_04.htm" title="6.4 Pattern-Matching Examples "><img src="../gifs/txtnexta.gif" webstripperlinkwas="../gifs/txtnexta.gif" alt="Next: 6.4 Pattern-Matching Examples " border="0"></A
></TD
></TR
></TABLE
>&nbsp;<hr align="LEFT" width="515" title="footer"></DIV
><div class="SECT1"><h2 class="sect1"><a class="title" name="VI6-CH-6-SECT-3">6.3 Pattern-Matching Rules </A
></H2
><p class="para"><a class="indexterm" name="CH06.MATCHING1"></A
><a class="indexterm" name="CH06.MATCHING2"></A
><a class="indexterm" name="CH06.MATCHING3"></A
><a class="indexterm" name="CH06.MATCHING4"></A
>In making global replacements, UNIX editors such as <kbd class="command">vi</KBD
> allow you to
search not just for fixed strings of characters,
but also for variable patterns of words, referred to as <em class="emphasis">regular
expressions</EM
>.</P
><p class="para">When you specify a literal string of characters, the search
might turn up other occurrences that you didn't want to match.
The problem with searching for words in a file is that a word
can be used in different ways.
Regular expressions
help you conduct a search for words in context.
Note that regular expressions can be used with the <kbd class="command">vi</KBD
> search
commands <code class="literal">/</CODE
> and <code class="literal">?</CODE
> as well as in the <kbd class="command">ex</KBD
> <code class="literal">:g</CODE
>
and <code class="literal">:s</CODE
> commands.</P
><p class="para">For the most part, the same regular
expressions work with other UNIX programs such as <kbd class="command">grep</KBD
>,
<kbd class="command">sed</KBD
>, and <kbd class="command">awk</KBD
>.[<a class="footnote" href="#AUTOID-6730">2</A
>]</P
><blockquote class="footnote"><div class="footnote"><p class="para"><a class="footnote" name="AUTOID-6730">[2]</A
> Much more information on regular expressions can be found in
the two O'Reilly books <cite class="citetitle">sed &amp; awk</CITE
>, by
Dale Dougherty and Arnold Robbins, and
<cite class="citetitle">Mastering Regular Expressions</CITE
>, by
Jeffrey E.F. Friedl.</P
></DIV
></BLOCKQUOTE
><p class="para"><a class="indexterm" name="CH06.METACHARACTERS"></A
><a class="indexterm" name="CH06.METACHARACTERS2"></A
><a class="indexterm" name="AUTOID-6740"></A
>Regular expressions are made up by combining normal characters with a number
of special characters called <em class="emphasis">metacharacters</EM
>.[<a class="footnote" href="#AUTOID-6745">3</A
>]
The metacharacters and their uses are listed below.</P
><blockquote class="footnote"><div class="footnote"><p class="para"><a class="footnote" name="AUTOID-6745">[3]</A
> Technically speaking, we should probably call these
<em class="emphasis">metasequences</EM
>, since sometimes two characters
together have special meaning, and not just single characters.
Nevertheless, the term <em class="emphasis">metacharacters</EM
> is in
common use in UNIX literature, so we follow that convention here.</P
></DIV
></BLOCKQUOTE
><div class="sect2"><h3 class="sect2"><a class="title" name="VI6-CH-6-SECT-3.1">6.3.1 Metacharacters Used in Search Patterns </A
></H3
><p class="para"><a class="indexterm" name="CH06.META1"></A
><a class="indexterm" name="CH06.META2"></A
><a class="indexterm" name="CH06.META3"></A
><a class="indexterm" name="CH06.META4"></A
><a class="indexterm" name="CH06.META5"></A
><a class="indexterm" name="CH06.META6"></A
><a class="indexterm" name="CH06.META7"></A
></P
><dl class="variablelist"><dt class="term"><code class="literal">.</CODE
></DT
><dd class="listitem"><p class="para"><a class="indexterm" name="AUTOID-6783"></A
><a class="indexterm" name="AUTOID-6786"></A
><a class="indexterm" name="AUTOID-6789"></A
>Matches any <em class="emphasis">single</EM
> character except a newline.
Remember that spaces are treated as characters.
For example, <code class="literal">p.p</CODE
> matches character strings such as
<em class="emphasis">pep</EM
>, <em class="emphasis">pip</EM
>, and <em class="emphasis">pcp</EM
>.</P
></DD
><dt class="term"><code class="literal">*</CODE
></DT
><dd class="listitem"><p class="para"><a class="indexterm" name="AUTOID-6802"></A
><a class="indexterm" name="AUTOID-6804"></A
>Matches zero or more (as many as there are) of the single character
that immediately precedes it. For example, <code class="literal">bugs*</CODE
> will
match <em class="emphasis">bugs</EM
> (one <em class="emphasis">s</EM
>) or <em class="emphasis">bug</EM
> (no <em class="emphasis">s</EM
>'s).</P
><p class="para">The <code class="literal">*</CODE
> can follow a metacharacter.
For example, since <code class="literal">.</CODE
> (dot) means any character,
<code class="literal">.*</CODE
> means &quot;match any number of any character.&quot;</P
><p class="para">Here's a specific
example of this. The command <code class="literal">:s/End.*/End/</CODE
> removes
all characters after <em class="emphasis">End</EM
> (it replaces the remainder of the
line with nothing).</P
></DD
><dt class="term"><code class="literal">^</CODE
></DT
><dd class="listitem"><p class="para"><a class="indexterm" name="AUTOID-6823"></A
><a class="indexterm" name="AUTOID-6826"></A
>When used at the start of a regular expression,
requires that the following regular expression be found at the beginning of
the line; for example, <code class="literal">^Part</CODE
> matches
<em class="emphasis">Part</EM
> when it occurs at the beginning of a line, and <code class="literal">^...</CODE
>
matches the first three characters of a line.
When not at the beginning of a regular expression, <code class="literal">^</CODE
>
stands for itself.</P
></DD
><dt class="term"><code class="literal">$</CODE
></DT
><dd class="listitem"><p class="para"><a class="indexterm" name="AUTOID-6838"></A
><a class="indexterm" name="AUTOID-6841"></A
>When used at the end of a regular expression,
requires that the preceding regular expression be found at the end
of the line; for example, <code class="literal">here:$</CODE
>
matches only when <code class="literal">here:</CODE
> occurs at the end of a line.
When not at the end of a regular expression, <code class="literal">$</CODE
>
stands for itself.</P
></DD
><dt class="term"><code class="literal">\</CODE
></DT
><dd class="listitem"><p class="para"><a class="indexterm" name="AUTOID-6852"></A
><a class="indexterm" name="AUTOID-6854"></A
>Treats the following special character as an ordinary character.
For example,
<code class="literal">\.</CODE
> matches an actual period instead of &quot;any single
character,&quot; and <code class="literal">\*</CODE
> matches an actual asterisk instead of
&quot;any number of a character.&quot;  The \ (backslash)
prevents the interpretation of a special character.
This prevention is called &quot;escaping the character.&quot;
(Use \\ to get a literal backslash.)</P
></DD
><dt class="term"><code class="literal">[  ]</CODE
></DT
><dd class="listitem"><p class="para"><a class="indexterm" name="AUTOID-6864"></A
><a class="indexterm" name="AUTOID-6867"></A
>Matches any <em class="emphasis">one</EM
> of the characters enclosed between the brackets.
For example,
<code class="literal">[AB]</CODE
>
matches either
<em class="emphasis">A</EM
>
or
<em class="emphasis">B</EM
>,
and
<code class="literal">p[aeiou]t</CODE
>
matches
<em class="emphasis">pat</EM
>, <em class="emphasis">pet</EM
>, <em class="emphasis">pit</EM
>, <em class="emphasis">pot</EM
>, or <em class="emphasis">put</EM
>.
A range of consecutive characters can be specified by separating
the first and last characters in the range with a hyphen.
For example, <code class="literal">[A-Z]</CODE
> will match any uppercase
letter from <em class="emphasis">A</EM
> to <em class="emphasis">Z</EM
>, and <code class="literal">[0-9]</CODE
> will match any
digit from <em class="emphasis">0</EM
> to <em class="emphasis">9</EM
>.</P
><p class="para">You can include more than one
range inside brackets, and you can specify a mix of ranges and
separate characters. For example, <code class="literal">[:;A-Za-z()]</CODE
>
will match four different punctuation marks, plus all letters.</P
><p class="para">Most metacharacters lose their special meaning inside brackets,
so you don't need to escape them if you want to use them as
ordinary characters. Within brackets, the three metacharacters
you still need to escape
are <code class="literal">\</CODE
> <code class="literal">-</CODE
> <code class="literal">]</CODE
>.  
The hyphen (<code class="literal">-</CODE
>)
acquires meaning as a range specifier; to use an actual hyphen,
you can also place it as the first character inside the
brackets.</P
><p class="para"><a class="indexterm" name="AUTOID-6894"></A
><a class="indexterm" name="AUTOID-6897"></A
>A caret (<code class="literal">^</CODE
>) has special meaning only when it is the
first character inside the brackets, but in this case the meaning
differs from that of the normal <code class="literal">^</CODE
> metacharacter.
As the first character within brackets, a <code class="literal">^</CODE
> reverses their sense: the brackets
will match any one character <em class="emphasis">not</EM
> in the list. For example,
<code class="literal">[^a-z]</CODE
> matches any character that is not a lowercase letter.&#13;</P
></DD
><dt class="term"><code class="literal">\(&nbsp;\)</CODE
></DT
><dd class="listitem"><p class="para"><a class="indexterm" name="AUTOID-6910"></A
><a class="indexterm" name="AUTOID-6913"></A
><a class="indexterm" name="AUTOID-6916"></A
><a class="indexterm" name="AUTOID-6919"></A
><a class="indexterm" name="AUTOID-6921"></A
>Saves the pattern enclosed between <code class="literal">\(</CODE
> and <code class="literal">\)</CODE
>
into a special holding space or &quot;hold buffer.&quot;
Up to nine patterns can be saved in this way on a single line.
For example, the pattern:</P
><p class="para"><blockquote class="screen"><pre class="screen">\(That\) or \(this\)</PRE
></BLOCKQUOTE
></P
><p class="para">saves <em class="emphasis">That</EM
> in hold buffer number 1 and
saves <em class="emphasis">this</EM
> in hold buffer number 2.
The patterns held can be &quot;replayed&quot; in substitutions by the sequences
<code class="literal">\1</CODE
> to <code class="literal">\9</CODE
>.
For example, to rephrase <em class="emphasis">That or this</EM
> to read
<em class="emphasis">this or That</EM
>, you could enter:</P
><p class="para"><blockquote class="screen"><pre class="screen">:%s/\(That\) or \(this\)/\2 or \1/</PRE
></BLOCKQUOTE
></P
><p class="para">You can also use the <code class="literal">\</CODE
><code class="replaceable"><i>n</I
></CODE
>
notation within a search or substitute string:
<blockquote class="screen"><pre class="screen">:s/\(abcd\)\1/alphabet-soup/</PRE
></BLOCKQUOTE
>
changes <em class="emphasis">abcdabcd</EM
> into
<em class="emphasis">alphabet-soup</EM
>.[<a class="footnote" href="#AUTOID-6943">4</A
>]</P
><blockquote class="footnote"><div class="footnote"><p class="para"><a class="footnote" name="AUTOID-6943">[4]</A
> This works with <kbd class="command">vi</KBD
>, <kbd class="command">nvi</KBD
>, and
<kbd class="command">vim</KBD
>, but not with <kbd class="command">elvis</KBD
> 2.0,
<kbd class="command">vile</KBD
> 7.4, or <kbd class="command">vile</KBD
> 8.0.</P
></DIV
></BLOCKQUOTE
></DD
><dt class="term"><code class="literal">\&lt;&nbsp;\&gt;</CODE
></DT
><dd class="listitem"><p class="para"><a class="indexterm" name="AUTOID-6956"></A
><a class="indexterm" name="AUTOID-6959"></A
><a class="indexterm" name="AUTOID-6962"></A
>Matches characters at the beginning (<code class="literal">\&lt;</CODE
>) or at the end
(<code class="literal">\&gt;</CODE
>) of a word.
The end or beginning of a
word is determined either by a punctuation mark or by a space.
For example, the expression <code class="literal">\&lt;ac</CODE
> will match only words
that begin with <em class="emphasis">ac</EM
>, such as <em class="emphasis">action</EM
>.
The expression <code class="literal">ac\&gt;</CODE
> will match only words
that end with <em class="emphasis">ac</EM
>, such as <em class="emphasis">maniac</EM
>.
Neither expression will match <em class="emphasis">react</EM
>.
Note that unlike <code class="literal">\(...\)</CODE
>,
these do not have to be used in matched pairs.</P
></DD
><dt class="term"><code class="literal">~</CODE
></DT
><dd class="listitem"><p class="para"><a class="indexterm" name="AUTOID-6980"></A
><a class="indexterm" name="AUTOID-6983"></A
>Matches whatever regular expression was used in the <em class="emphasis">last</EM
>
search. For example, if you searched for <em class="emphasis">The</EM
>, you
could search for <em class="emphasis">Then</EM
> with <code class="literal">/~n</CODE
>.
Note that you can use this pattern only in a regular search
(with <code class="literal">/</CODE
>).[<a class="footnote" href="#AUTOID-6991">5</A
>]
It won't work as the pattern in a substitute command. It does,
however, have a similar
meaning in the replacement portion of a substitute command.</P
><blockquote class="footnote"><div class="footnote"><p class="para"><a class="footnote" name="AUTOID-6991">[5]</A
> This is a rather flaky feature of the original <kbd class="command">vi</KBD
>.
After using it, the saved search pattern is set to
the <em class="emphasis">new</EM
> text typed after the <code class="literal">~</CODE
>,
<em class="emphasis">not</EM
> the combined new pattern,
as one might expect.
Also, none of the clones behaves this way.
So, while this feature exists, it has little to recommend its use.</P
></DIV
></BLOCKQUOTE
></DD
></DL
><p class="para">Several of the clones support optional, extended regular
expression syntaxes. See <a class="xref" href="ch08_04.htm" webstripperlinkwas="ch08_04.htm">Section 8.4, "Extended Regular Expressions"</A
> in <a class="xref" href="ch08_01.htm" webstripperlinkwas="ch08_01.htm">Chapter 8</A
> for more information.</P
><a class="indexterm" name="AUTOID-6999"></A
><a class="indexterm" name="AUTOID-7000"></A
><a class="indexterm" name="AUTOID-7001"></A
><a class="indexterm" name="AUTOID-7002"></A
><a class="indexterm" name="AUTOID-7003"></A
><a class="indexterm" name="AUTOID-7004"></A
><a class="indexterm" name="AUTOID-7005"></A
><a class="indexterm" name="AUTOID-7006"></A
><a class="indexterm" name="AUTOID-7007"></A
></DIV
><div class="sect2"><h3 class="sect2"><a class="title" name="VI6-CH-6-SECT-3.2">6.3.2 POSIX Bracket Expressions</A
></H3
><a class="indexterm" name="CH06.POSIX1"></A
><a class="indexterm" name="CH06.POSIX2"></A
><a class="indexterm" name="CH06.POSIX3"></A
><a class="indexterm" name="CH06.POSIX4"></A
><a class="indexterm" name="CH06.POSIX5"></A
><a class="indexterm" name="CH06.POSIX6"></A
><a class="indexterm" name="CH06.POSIX7"></A
><a class="indexterm" name="CH06.POSIX8"></A
><a class="indexterm" name="CH06.POSIX9"></A
><p class="para">We have just described
the use of brackets for matching
any one of the enclosed characters, such as <code class="literal">[a-z]</CODE
>.
The POSIX standard introduced additional facilities for matching
characters that are not
in the English alphabet. For example, the French &egrave; is an alphabetic
character, but the typical character class <code class="literal">[a-z]</CODE
> would not
match it.
Additionally,
the standard provides for sequences of characters that should be
treated as a single unit when matching and collating (sorting) string data.</P
><p class="para">POSIX also formalizes the terminology. Groups of characters within
brackets are called
a &quot;bracket expression&quot; in the POSIX
standard. Within bracket expressions, beside literal characters such as
<em class="emphasis">a</EM
>, <em class="emphasis">!</EM
>,
and so on, you can have additional components. These are:</P
><ul class="itemizedlist"><li class="listitem"><p class="para"><em class="emphasis">Character classes</EM
>.<a class="indexterm" name="CH06.CHARACTERCLASS"></A
><a class="indexterm" name="AUTOID-7050"></A
><a class="indexterm" name="AUTOID-7053"></A
>
A POSIX character class consists of keywords bracketed by
<code class="literal">[:</CODE
> and <code class="literal">:]</CODE
>. The
keywords describe different classes of characters such as alphabetic
characters, control characters, and so on (see <a class="xref" href="#VI6-CH-6-TAB-1">Table 6.1</A
>).</P
></LI
><li class="listitem"><p class="para"><em class="emphasis">Collating symbols</EM
>.<a class="indexterm" name="AUTOID-7062"></A
><a class="indexterm" name="AUTOID-7064"></A
><a class="indexterm" name="AUTOID-7067"></A
>
A collating symbol is a multi-character sequence that should be treated
as a unit. It consists of the characters bracketed by <code class="literal">[.</CODE
>
and <code class="literal">.]</CODE
>.</P
></LI
><li class="listitem"><p class="para"><em class="emphasis">Equivalence classes</EM
>.<a class="indexterm" name="AUTOID-7075"></A
><a class="indexterm" name="AUTOID-7077"></A
><a class="indexterm" name="AUTOID-7080"></A
>
An equivalence class lists a set of characters that should be considered
equivalent, such as <code class="literal">e</CODE
> and
<code class="literal">&egrave;</CODE
>.
It consists of a named element from the locale,
bracketed by <code class="literal">[=</CODE
>
and <code class="literal">=]</CODE
>.</P
></LI
></UL
><p class="para">All three of these constructs must appear inside the square
brackets of a bracket expression.
For example <code class="literal">[[:alpha:]!]</CODE
> matches
any single alphabetic character or the exclamation point,
<code class="literal">[[.ch.]]</CODE
>
matches the collating element
<em class="emphasis">ch</EM
>, but does not match just the letter
<em class="emphasis">c</EM
> or the letter
<em class="emphasis">h</EM
>.
In a French locale,
<code class="literal">[[=e=]]</CODE
> might match any of
<em class="emphasis">e</EM
>, <em class="emphasis">&egrave;</EM
>,
or <em class="emphasis">&eacute;</EM
>. Classes and matching
characters are shown in <a class="xref" href="#VI6-CH-6-TAB-1">Table 6.1</A
>.</P
><br><table class="table" border="1" cellpadding="3"><caption class="table"><a class="title" name="VI6-CH-6-TAB-1">Table 6.1: POSIX Character Classes</A
></CAPTION
><thead class="thead"><tr class="row" valign="TOP"><th class="entry" align="LEFT" rowspan="1" colspan="1">Class</TH
><th class="entry" align="LEFT" rowspan="1" colspan="1">Matching Characters</TH
></TR
></THEAD
><tbody class="tbody"><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><code class="literal">[:alnum:]</CODE
></TD
><td class="entry" rowspan="1" colspan="1">Alphanumeric characters</TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><code class="literal">[:alpha:]</CODE
></TD
><td class="entry" rowspan="1" colspan="1">Alphabetic characters</TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><code class="literal">[:blank:]</CODE
></TD
><td class="entry" rowspan="1" colspan="1">Space and tab characters</TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><code class="literal">[:cntrl:]</CODE
></TD
><td class="entry" rowspan="1" colspan="1">Control characters</TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><code class="literal">[:digit:]</CODE
></TD
><td class="entry" rowspan="1" colspan="1">Numeric characters</TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><code class="literal">[:graph:]</CODE
></TD
><td class="entry" rowspan="1" colspan="1">Printable and visible (non-space) characters</TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><code class="literal">[:lower:]</CODE
></TD
><td class="entry" rowspan="1" colspan="1">Lowercase characters</TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><code class="literal">[:print:]</CODE
></TD
><td class="entry" rowspan="1" colspan="1">Printable characters (includes whitespace)</TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><code class="literal">[:punct:]</CODE
></TD
><td class="entry" rowspan="1" colspan="1">Punctuation characters</TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><code class="literal">[:space:]</CODE
></TD
><td class="entry" rowspan="1" colspan="1">Whitespace characters</TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><code class="literal">[:upper:]</CODE
></TD
><td class="entry" rowspan="1" colspan="1">Uppercase characters</TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><code class="literal">[:xdigit:]</CODE
></TD
><td class="entry" rowspan="1" colspan="1">Hexadecimal digits</TD
></TR
></TBODY
></TABLE
><p class="para">You will have to do some research to determine if you have this
facility in your version of <kbd class="command">vi</KBD
>. You may
need to use a special option to enable POSIX compliance,
have a particular environment variable set, or use a version of
<kbd class="command">vi</KBD
> that is in an unusual directory.<a class="indexterm" name="AUTOID-7157"></A
></P
><p class="para"><em class="emphasis">vi</EM
> on HP-UX 9.x (and newer) systems support
POSIX bracket expressions,
as does <i class="filename">/usr/xpg4/bin/vi</I
>, on Solaris
(but not <i class="filename">/usr/bin/vi</I
>).
This facility is also available in <kbd class="command">nvi</KBD
>, and in
<kbd class="command">elvis</KBD
> 2.1.
As commercial UNIX vendors become standards-compliant,
expect to see this feature become more widespread.</P
><a class="indexterm" name="AUTOID-7164"></A
><a class="indexterm" name="AUTOID-7165"></A
><a class="indexterm" name="AUTOID-7166"></A
><a class="indexterm" name="AUTOID-7167"></A
><a class="indexterm" name="AUTOID-7168"></A
><a class="indexterm" name="AUTOID-7169"></A
><a class="indexterm" name="AUTOID-7170"></A
><a class="indexterm" name="AUTOID-7171"></A
><a class="indexterm" name="AUTOID-7172"></A
></DIV
><div class="sect2"><h3 class="sect2"><a class="title" name="VI6-CH-6-SECT-3.3">6.3.3 Metacharacters Used in Replacement Strings </A
></H3
><p class="para"><a class="indexterm" name="CH06.METASTRING1"></A
><a class="indexterm" name="CH06.METASTRING2"></A
><a class="indexterm" name="CH06.METASTRING3"></A
><a class="indexterm" name="CH06.METASTRING4"></A
><a class="indexterm" name="CH06.METASTRING5"></A
><a class="indexterm" name="CH06.METASTRING6"></A
><a class="indexterm" name="CH06.METASTRING7"></A
><a class="indexterm" name="CH06.GLOBALMETA1"></A
><a class="indexterm" name="CH06.GLOBALMETA2"></A
>

When you make global replacements, the regular expressions above
carry their special meaning only within the search portion
(the first part) of the command.</P
><p class="para">For example, when you type this:</P
><blockquote class="screen"><pre class="screen">:%s/1\.  Start/2.  Next, start with $100/</PRE
></BLOCKQUOTE
><p class="para">note that the replacement string
treats the characters <code class="literal">.</CODE
> and <code class="literal">$</CODE
>
literally, without your
having to escape them.
By the same token, let's say you enter:</P
><p class="para"><blockquote class="screen"><pre class="screen">:%s/[ABC]/[abc]/g</PRE
></BLOCKQUOTE
></P
><p class="para">If you're hoping to replace <em class="emphasis">A</EM
> with
<em class="emphasis">a</EM
>, <em class="emphasis">B</EM
> with <em class="emphasis">b</EM
>,
and <em class="emphasis">C</EM
> with <em class="emphasis">c</EM
>,
you'll be surprised. Since brackets behave like
ordinary characters in a replacement string, this command
will change every occurrence of <em class="emphasis">A</EM
>,
<em class="emphasis">B</EM
>, or <em class="emphasis">C</EM
> to the
five-character string <em class="emphasis">[abc]</EM
>.</P
><p class="para">To solve problems like this,
you need a way to specify variable
replacement strings. Fortunately, there are additional metacharacters
that have special meaning in a <em class="emphasis">replacement</EM
> string.</P
><dl class="variablelist"><dt class="term"><code class="literal">\</CODE
><code class="replaceable"><i>n</I
></CODE
></DT
><dd class="listitem"><p class="para"><a class="indexterm" name="AUTOID-7236"></A
><a class="indexterm" name="AUTOID-7239"></A
><a class="indexterm" name="AUTOID-7241"></A
>Is replaced with text matched by the <em class="emphasis">n</EM
>th pattern
previously saved by <code class="literal">\(</CODE
> and
<code class="literal">\)</CODE
>, where
<em class="emphasis">n</EM
> is a number from 1 to 9, and previously saved patterns
(kept in hold buffers) are counted
from the left on the line.
See the explanation for
<code class="literal">\(</CODE
>
and <code class="literal">\)</CODE
> earlier in this chapter.</P
></DD
><dt class="term"><code class="literal">\</CODE
></DT
><dd class="listitem"><p class="para"><a class="indexterm" name="AUTOID-7256"></A
>Treats the following special character as an ordinary character.
Backslashes are metacharacters in replacement strings
as well as in search patterns.
To specify a real backslash, type two in a row (\\).</P
></DD
><dt class="term"><code class="literal">&amp;</CODE
></DT
><dd class="listitem"><p class="para"><a class="indexterm" name="AUTOID-7263"></A
><a class="indexterm" name="AUTOID-7266"></A
>Is replaced with the entire text matched by the search pattern when
used in a replacement
string. This is useful when you want to avoid retyping text:</P
><p class="para"><blockquote class="screen"><pre class="screen">:%s/Yazstremski/&amp;, Carl/</PRE
></BLOCKQUOTE
></P
><p class="para">The replacement will say <em class="emphasis">Yazstremski, Carl</EM
>.  The
<code class="literal">&amp;</CODE
> can
also replace a variable pattern (as specified by a regular
expression). For example, to surround each line from 1 to 10 with
parentheses, type:</P
><p class="para"><blockquote class="screen"><pre class="screen">:1,10s/.*/(&amp;)/</PRE
></BLOCKQUOTE
></P
><p class="para">The search pattern matches the whole line, and the <code class="literal">&amp;</CODE
>
&quot;replays&quot; the line, followed by your text.</P
></DD
><dt class="term"><code class="literal">~</CODE
></DT
><dd class="listitem"><p class="para"><a class="indexterm" name="AUTOID-7283"></A
><a class="indexterm" name="AUTOID-7286"></A
>Has a similar meaning as when it is used in a search pattern;
the string found is replaced with the replacement
text specified in the last substitute command. This is useful for
repeating an edit. For example, you could say
<code class="literal">:s/thier/their/</CODE
> on
one line and repeat the change on another with  
<code class="literal">:s/thier/~/</CODE
>. The search pattern
doesn't need to be the same, though. </P
></DD
><dt class="term"></DT
><dd class="listitem"><p class="para">For example, you could say <code class="literal">:s/his/their/</CODE
> on
one line and repeat the replacement on another with
<code class="literal">:s/her/~/</CODE
>.[<a class="footnote" href="#AUTOID-7297">6</A
>]</P
><blockquote class="footnote"><div class="footnote"><p class="para"><a class="footnote" name="AUTOID-7297">[6]</A
> Modern versions of the <kbd class="command">ed</KBD
> editor use <code class="literal">%</CODE
>
as the sole character in the replacement text
to mean &quot;the replacement text of the last substitute command.&quot;</P
></DIV
></BLOCKQUOTE
></DD
><dt class="term"><code class="literal">\u</CODE
>&nbsp;or&nbsp;<code class="literal">\l</CODE
></DT
><dd class="listitem"><p class="para"><a class="indexterm" name="CH06.CASE1"></A
><a class="indexterm" name="CH06.CASE1A"></A
><a class="indexterm" name="CH06.CASE1B"></A
><a class="indexterm" name="CH06.CASE2"></A
><a class="indexterm" name="CH06.CASE3"></A
><a class="indexterm" name="CH06.CASE4"></A
><a class="indexterm" name="CH06.CASE5"></A
><a class="indexterm" name="CH06.CASE6"></A
><a class="indexterm" name="CH06.CASE7"></A
>Causes the next character in the replacement string to be changed to
uppercase or lowercase, respectively. For example, to change
<em class="emphasis">yes, doctor</EM
> into <em class="emphasis">Yes, Doctor</EM
>, you could say:</P
><p class="para"><blockquote class="screen"><pre class="screen">:%s/yes, doctor/\uyes, \udoctor/</PRE
></BLOCKQUOTE
></P
><p class="para">This is a pointless example, though, since it's easier
just to type the replacement string with initial caps in the
first place. As with any regular expression, <code class="literal">\u</CODE
> and
<code class="literal">\l</CODE
> are most useful with a variable string. Take, for
example, the command we used earlier:</P
><p class="para"><blockquote class="screen"><pre class="screen">:%s/\(That\) or \(this\)/\2 or \1/</PRE
></BLOCKQUOTE
></P
><p class="para">The result is <em class="emphasis">this or That</EM
>, but we need to adjust the
cases. We'll use <code class="literal">\u</CODE
> to uppercase the first letter in
<em class="emphasis">this</EM
> (currently saved in hold buffer 2);
we'll use <code class="literal">\l</CODE
> to lowercase the first letter in
<em class="emphasis">That</EM
> (currently saved in hold buffer 1):</P
><p class="para"><blockquote class="screen"><pre class="screen">:s/\(That\) or \(this\)/\u\2 or \l\1/</PRE
></BLOCKQUOTE
></P
><p class="para">The result is <em class="emphasis">This or that</EM
>.  (Don't confuse the number one
with the lowercase <code class="literal">l</CODE
>; the one comes after.)</P
></DD
><dt class="term"><code class="literal">\U</CODE
>&nbsp;or&nbsp;<code class="literal">\L</CODE
>&nbsp;and&nbsp;<code class="literal">\e</CODE
>&nbsp;or&nbsp;<code class="literal">\E</CODE
></DT
><dd class="listitem"><p class="para"><a class="indexterm" name="AUTOID-7356"></A
><a class="indexterm" name="AUTOID-7359"></A
><a class="indexterm" name="AUTOID-7362"></A
><a class="indexterm" name="AUTOID-7365"></A
><a class="indexterm" name="AUTOID-7367"></A
><a class="indexterm" name="AUTOID-7369"></A
><a class="indexterm" name="AUTOID-7371"></A
><code class="literal">\U</CODE
> and <code class="literal">\L</CODE
>
are similar to <code class="literal">\u</CODE
> or <code class="literal">\l</CODE
>,
but all following characters are
converted to uppercase or lowercase until the end of the
replacement string or until <code class="literal">\e</CODE
> or <code class="literal">\E</CODE
> is reached.
If there is no <code class="literal">\e</CODE
> or <code class="literal">\E</CODE
>, all characters of the
replacement text are affected by the <code class="literal">\U</CODE
> or <code class="literal">\L</CODE
>.
For example, to uppercase <em class="emphasis">Fortran</EM
>, you could say:</P
><p class="para"><blockquote class="screen"><pre class="screen">:%s/Fortran/\UFortran/</PRE
></BLOCKQUOTE
></P
><p class="para">or, using the <code class="literal">&amp;</CODE
> character to repeat the search string:</P
><p class="para"><blockquote class="screen"><pre class="screen">:%s/Fortran/\U&amp;/</PRE
></BLOCKQUOTE
></P
><p class="para"></P
></DD
></DL
><p class="para"><a class="indexterm" name="AUTOID-7392"></A
>All pattern searches are case-sensitive. That is,
a search for <em class="emphasis">the</EM
> will
not find <em class="emphasis">The</EM
>.  You can get around this by specifying both
uppercase and lowercase in the pattern:</P
><p class="para"><blockquote class="screen"><pre class="screen"><code class="literal">/[Tt]he</CODE
></PRE
></BLOCKQUOTE
></P
><p class="para"><a class="indexterm" name="AUTOID-7400"></A
>You can also instruct <kbd class="command">vi</KBD
> to ignore case by typing
<code class="literal">:set</CODE
> <code class="literal">ic</CODE
>.
See <a class="xref" href="ch07_01.htm" webstripperlinkwas="ch07_01.htm">Chapter 7, <cite class="CHAPTER">Advanced Editing</CITE
></A
>,
for additional details.<a class="indexterm" name="AUTOID-7406"></A
><a class="indexterm" name="AUTOID-7407"></A
><a class="indexterm" name="AUTOID-7408"></A
><a class="indexterm" name="AUTOID-7409"></A
><a class="indexterm" name="AUTOID-7410"></A
><a class="indexterm" name="AUTOID-7411"></A
><a class="indexterm" name="AUTOID-7412"></A
><a class="indexterm" name="AUTOID-7413"></A
><a class="indexterm" name="AUTOID-7414"></A
>&#13;</P
><a class="indexterm" name="AUTOID-7415"></A
><a class="indexterm" name="AUTOID-7416"></A
><a class="indexterm" name="AUTOID-7417"></A
><a class="indexterm" name="AUTOID-7418"></A
><a class="indexterm" name="AUTOID-7419"></A
><a class="indexterm" name="AUTOID-7420"></A
><a class="indexterm" name="AUTOID-7421"></A
><a class="indexterm" name="AUTOID-7422"></A
><a class="indexterm" name="AUTOID-7423"></A
></DIV
><div class="sect2"><h3 class="sect2"><a class="title" name="VI6-CH-6-SECT-3.4">6.3.4 More Substitution Tricks</A
></H3
><p class="para"><a class="indexterm" name="CH06.TRICKS1"></A
><a class="indexterm" name="CH06.TRICKS2"></A
><a class="indexterm" name="CH06.TRICKS9"></A
><a class="indexterm" name="CH06.TRICKS3"></A
><a class="indexterm" name="CH06.TRICKS4"></A
><a class="indexterm" name="CH06.TRICKS5"></A
><a class="indexterm" name="CH06.TRICKS6"></A
>
<a class="indexterm" name="CH06.TRICKS7"></A
><a class="indexterm" name="CH06.TRICKS8"></A
>

You should know some additional important facts about the
substitute command:</P
><ol class="orderedlist"><li class="listitem"><p class="para"><a class="indexterm" name="AUTOID-7463"></A
>A simple <code class="literal">:s</CODE
> is the same as <code class="literal">:s//~/</CODE
>.
In other words, repeat the last substitution.
This can save enormous amounts of time and typing when you
are working your way through a document making the same change
repeatedly, but you don't want to use a global substitution.</P
></LI
><li class="listitem"><p class="para"><a class="indexterm" name="AUTOID-7470"></A
><a class="indexterm" name="AUTOID-7473"></A
>If you think of the <code class="literal">&amp;</CODE
> as meaning
&quot;the same thing&quot;
(as in what was just matched), this command is relatively mnemonic.
You can follow the <code class="literal">&amp;</CODE
> with a <code class="literal">g</CODE
>,
to make the substitution
globally on the line, and even use it with a line range:</P
><p class="para"><blockquote class="screen"><pre class="screen">:%&amp;g	<i class="lineannotation">repeat the last substitution everywhere</I
></PRE
></BLOCKQUOTE
></P
></LI
><li class="listitem"><p class="para">The <kbd class="keycap">[&amp;]</KBD
> key can be used as a <kbd class="command">vi</KBD
> command
to perform the <code class="literal">:&amp;</CODE
> command, i.e., to repeat the
last substitution. This can save even more typing than
<code class="literal">:s</CODE
><kbd class="keycap">[RETURN]</KBD
>; one keystroke versus three.</P
></LI
><li class="listitem"><p class="para"><a class="indexterm" name="AUTOID-7491"></A
><a class="indexterm" name="AUTOID-7494"></A
>The <code class="literal">:~</CODE
> command is similar to the <code class="literal">:&amp;</CODE
>
command, but with a subtle difference.
The search pattern used is the last regular
expression used in <em class="emphasis">any</EM
>
command, not necessarily the one used in the last substitute command.</P
><p class="para">For example,[<a class="footnote" href="#AUTOID-7501">7</A
>]
in the sequence:</P
><blockquote class="footnote"><div class="footnote"><p class="para"><a class="footnote" name="AUTOID-7501">[7]</A
> Thanks to Keith Bostic, in the <kbd class="command">nvi</KBD
>
documentation, for this example.</P
></DIV
></BLOCKQUOTE
><blockquote class="screen"><pre class="screen">:s/red/blue/
:/green
:~</PRE
></BLOCKQUOTE
><p class="para">The <code class="literal">:~</CODE
>
is equivalent to
<code class="literal">:s/green/blue/</CODE
>.</P
></LI
><li class="listitem"><p class="para">Besides the <code class="literal">/</CODE
> character,
you may use any non-alphanumeric, non-whitespace
character as your delimiter,
except backslash, double-quote, and the vertical bar
(<code class="literal">\</CODE
>, <code class="literal">&quot;</CODE
>,
and <code class="literal">|</CODE
>).
This is particularly handy when you have to make a change to
a pathname.</P
><p class="para"><blockquote class="screen"><pre class="screen">:%s;/user1/tim;/home/tim;g</PRE
></BLOCKQUOTE
></P
></LI
><li class="listitem"><p class="para"><a class="indexterm" name="AUTOID-7518"></A
>When the <code class="literal">edcompatible</CODE
> option is
enabled, <kbd class="command">vi</KBD
> remembers the flags
(<code class="literal">g</CODE
> for global and <code class="literal">c</CODE
> for
confirmation) used on the last substitute, and applies them
to the next one.</P
><p class="para">This is most useful when you are moving through a file and
you wish to make global substitutions. You can make the
first change:</P
><blockquote class="screen"><pre class="screen">:s/<code class="replaceable"><i>old</I
></CODE
>/<code class="replaceable"><i>new</I
></CODE
>/g
:set edcompatible</PRE
></BLOCKQUOTE
><p class="para">After that, subsequent substitute commands will be global.</P
><p class="para">Despite the name, no known version of UNIX <kbd class="command">ed</KBD
>
actually works this way.</P
></LI
></OL
><a class="indexterm" name="AUTOID-7531"></A
><a class="indexterm" name="AUTOID-7532"></A
><a class="indexterm" name="AUTOID-7533"></A
><a class="indexterm" name="AUTOID-7534"></A
><a class="indexterm" name="AUTOID-7535"></A
><a class="indexterm" name="AUTOID-7536"></A
><a class="indexterm" name="AUTOID-7537"></A
><a class="indexterm" name="AUTOID-7538"></A
><a class="indexterm" name="AUTOID-7539"></A
></DIV
><a class="indexterm" name="AUTOID-7540"></A
><a class="indexterm" name="AUTOID-7541"></A
><a class="indexterm" name="AUTOID-7542"></A
><a class="indexterm" name="AUTOID-7543"></A
></DIV
><div class="htmlnav"><p></P
><hr align="LEFT" width="515" title="footer"><table width="515" border="0" cellspacing="0" cellpadding="0"><tr><td align="LEFT" valign="TOP" width="172"><a class="SECT1" href="ch06_02.htm" webstripperlinkwas="ch06_02.htm" title="6.2 Context-Sensitive Replacement"><img src="../gifs/txtpreva.gif" webstripperlinkwas="../gifs/txtpreva.gif" alt="Previous: 6.2 Context-Sensitive Replacement" border="0"></A
></TD
><td align="CENTER" valign="TOP" width="171"><a class="book" href="index.htm" webstripperlinkwas="http://www.ms.itb.ac.id/buku/unix-bookshelf/vi/index.htm" title="Learning the vi Editor"><img src="../gifs/txthome.gif" webstripperlinkwas="../gifs/txthome.gif" alt="Learning the vi Editor" border="0"></A
></TD
><td align="RIGHT" valign="TOP" width="172"><a class="SECT1" href="ch06_04.htm" webstripperlinkwas="ch06_04.htm" title="6.4 Pattern-Matching Examples "><img src="../gifs/txtnexta.gif" webstripperlinkwas="../gifs/txtnexta.gif" alt="Next: 6.4 Pattern-Matching Examples " border="0"></A
></TD
></TR
><tr><td align="LEFT" valign="TOP" width="172">6.2 Context-Sensitive Replacement</TD
><td align="CENTER" valign="TOP" width="171"><a class="index" href="index/idx_0.htm" webstripperlinkwas="index/idx_0.htm" title="Book Index"><img src="../gifs/index.gif" webstripperlinkwas="../gifs/index.gif" alt="Book Index" border="0"></A
></TD
><td align="RIGHT" valign="TOP" width="172">6.4 Pattern-Matching Examples </TD
></TR
></TABLE
><hr align="LEFT" width="515" title="footer"><img src="../gifs/smnavbar.gif" webstripperlinkwas="../gifs/smnavbar.gif" usemap="#map" border="0" alt="The UNIX CD Bookshelf Navigation"><map name="map"><area shape="RECT" coords="0,0,73,21" href="../index.html" webstripperlinkwas="http://www.ms.itb.ac.id/buku/unix-bookshelf/index.html" alt="The UNIX CD Bookshelf"><area shape="RECT" coords="74,0,163,21" href="../upt/index.htm" webstripperlinkwas="http://www.ms.itb.ac.id/buku/unix-bookshelf/upt/index.htm" alt="UNIX Power Tools"><area shape="RECT" coords="164,0,257,21" href="../unixnut/index.htm" webstripperlinkwas="http://www.ms.itb.ac.id/buku/unix-bookshelf/unixnut/index.htm" alt="UNIX in a Nutshell"><area shape="RECT" coords="258,0,321,21" href="index.htm" webstripperlinkwas="http://www.ms.itb.ac.id/buku/unix-bookshelf/vi/index.htm" alt="Learning the vi Editor"><area shape="RECT" coords="322,0,378,21" href="../sedawk/index.htm" webstripperlinkwas="http://www.ms.itb.ac.id/buku/unix-bookshelf/sedawk/index.htm" alt="sed &amp; awk"><area shape="RECT" coords="379,0,438,21" href="../ksh/index.htm" webstripperlinkwas="http://www.ms.itb.ac.id/buku/unix-bookshelf/ksh/index.htm" alt="Learning the Korn Shell"><area shape="RECT" coords="439,0,514,21" href="../lrnunix/index.htm" webstripperlinkwas="http://www.ms.itb.ac.id/buku/unix-bookshelf/lrnunix/index.htm" alt="Learning the UNIX Operating System"></MAP
></DIV
></BODY
></HTML
>

