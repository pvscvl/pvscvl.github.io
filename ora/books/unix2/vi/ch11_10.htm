<html><head><title>[Chapter 11] 11.10 Interesting Features</TITLE
><meta name="DC.Creator" content="Linda Lamb &amp; Arnold Robbins"><meta name="DC.Date" content="1999-11-23T17:59:06Z"><meta name="DC.Format" content="text/html" scheme="MIME"><meta name="DC.Identifier" content="O'Reilly Unix CDROM-unknown"><meta name="DC.Language" content="en-US"><meta name="DC.Publisher" content="O'Reilly &amp; Associates, Inc."><meta name="DC.Source" content="unknown" scheme="ISBN"><meta name="DC.Subject.Keyword" content="Unix, vi, text, editor, tool"><meta name="DC.Title" content="Learning the vi Editor"><meta name="DC.Type" content="Text.Monograph"><meta name="generator" content="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><link rev="made" href="mailto:online-books@oreilly.com" title="Online Books Comments"><link rel="up" href="ch11_01.htm" webstripperlinkwas="ch11_01.htm" title="11. vim&nbsp;-- vi Improved"><link rel="prev" href="ch11_09.htm" webstripperlinkwas="ch11_09.htm" title="11.9 Programming Assistance"><link rel="next" href="ch11_11.htm" webstripperlinkwas="ch11_11.htm" title="11.11 Sources and Supported Operating Systems"></HEAD
><body bgcolor="#FFFFFF" text="#000000"><div class="htmlnav"><h1><img src="gifs/smbanner.gif" webstripperlinkwas="gifs/smbanner.gif" alt="Learning the vi Editor" usemap="#srchmap" border="0"></H1
><map name="srchmap"><area shape="RECT" coords="0,0,466,65" href="index.htm" webstripperlinkwas="http://www.ms.itb.ac.id/buku/unix-bookshelf/vi/index.htm" alt="Learning the vi Editor"><area shape="RECT" coords="467,0,514,18" href="jobjects/fsearch.htm" webstripperlinkwas="jobjects/fsearch.htm" alt="Search this book"></MAP
><table width="515" border="0" cellspacing="0" cellpadding="0"><tr><td align="LEFT" valign="TOP" width="172"><a class="SECT1" href="ch11_09.htm" webstripperlinkwas="ch11_09.htm" title="11.9 Programming Assistance"><img src="../gifs/txtpreva.gif" webstripperlinkwas="../gifs/txtpreva.gif" alt="Previous: 11.9 Programming Assistance" border="0"></A
></TD
><td align="CENTER" valign="TOP" width="171"><b><font face="ARIEL,HELVETICA,HELV,SANSERIF" size="-1"><a class="chapter" rel="up" href="ch11_01.htm" webstripperlinkwas="ch11_01.htm" title="11. vim&nbsp;-- vi Improved">Chapter 11<br>vim&nbsp;-- vi Improved</A
></FONT
></B
></TD
><td align="RIGHT" valign="TOP" width="172"><a class="SECT1" href="ch11_11.htm" webstripperlinkwas="ch11_11.htm" title="11.11 Sources and Supported Operating Systems"><img src="../gifs/txtnexta.gif" webstripperlinkwas="../gifs/txtnexta.gif" alt="Next: 11.11 Sources and Supported Operating Systems" border="0"></A
></TD
></TR
></TABLE
>&nbsp;<hr align="LEFT" width="515" title="footer"></DIV
><div class="SECT1"><h2 class="sect1"><a class="title" name="VI6-CH-11-SECT-10">11.10 Interesting Features</A
></H2
><p class="para"><a class="indexterm" name="CH11.INTERESTING"></A
><kbd class="command">vim</KBD
> is a <em class="emphasis">very</EM
> featureful
editor. We cannot describe everything in full detail here.
Instead, we've chosen to discuss several of the most
important and unique features that it has.</P
><dl class="variablelist"><dt class="term">Automatic file type detection</DT
><dd class="listitem"><p class="para"><a class="indexterm" name="AUTOID-17666"></A
><a class="indexterm" name="AUTOID-17668"></A
><a class="indexterm" name="AUTOID-17670"></A
><kbd class="command">vim</KBD
> will notice how the lines of a text file end.
It sets the <code class="literal">fileformat</CODE
> variable to
one of <code class="literal">dos</CODE
> (CR-LF),
<code class="literal">unix</CODE
> (LF), or
<code class="literal">mac</CODE
> (CR) to indicate the file's current mode.
By default, <kbd class="command">vim</KBD
> will write the file back out in
the same format, but if you change the value of <code class="literal">fileformat</CODE
>,
<kbd class="command">vim</KBD
> will use that convention.
This is an easy way to convert between Linux (or UNIX) and MS-DOS files,
and makes editing DOS files under UNIX or Linux very easy.
(In contrast, the other clones all display a <code class="literal">^M</CODE
>
at the end of each line.)</P
></DD
><dt class="term">vim is &quot;charityware&quot;</DT
><dd class="listitem"><p class="para">The licensing terms are described later in this chapter; they
are fairly liberal.
However, the author encourages users who like <kbd class="command">vim</KBD
> to
send a donation to a children's center in Uganda.</P
></DD
><dt class="term">Significant C programming extensions</DT
><dd class="listitem"><p class="para"><kbd class="command">vim</KBD
> has a large set of features for working
with C and C++ programs.</P
></DD
><dt class="term">The &quot;auto command&quot; facility</DT
><dd class="listitem"><p class="para"><kbd class="command">vim</KBD
> defines a large number of events, such
as before or after reading a file, entering or leaving a window,
and so on. For each event, you can set up an &quot;auto command,&quot;
i.e., a command to be executed when that event occurs.</P
></DD
></DL
><div class="sect2"><h3 class="sect2"><a class="title" name="VI6-CH-11-SECT-10.1">11.10.1 vim Is Charityware</A
></H3
><p class="para"><a class="indexterm" name="AUTOID-17699"></A
><a class="indexterm" name="AUTOID-17701"></A
>With <kbd class="command">vim</KBD
>, Bram Moolenaar has taken a different
approach from the usual shareware or freeware author.
If you use <kbd class="command">vim</KBD
> and you like it, Mr. Moolenaar
requests that you send a donation to help orphans in Uganda.
We applaud his efforts.</P
><p class="para"><a class="indexterm" name="AUTOID-17706"></A
>Mr. Moolenaar spent a year as a volunteer at
Kibaale Children's Centre (KCC), located in Kibaale, a small town in the
south of Uganda, near Tanzania.
The KCC works to provide food, medical care, and education for children
in this area, which is suffering from AIDS more than in any other part
of the world.
Because of the high incidence of AIDS, many of the children are orphans.</P
><p class="para">In order to continue supporting KCC, Mr. Moolenaar is trying to
raise funds and organize sponsorship.
You can find a much longer explanation in the file
<i class="filename">uganda.txt</I
> in the <kbd class="command">vim</KBD
> distribution.
This includes directions for sending donations.
You can also look at
<a class="ulink" href="../../../../../../../www.vim.org/iccf/">http://www.vim.org/iccf/</A
>.</P
></DIV
><div class="sect2"><h3 class="sect2"><a class="title" name="VI6-CH-11-SECT-10.2">11.10.2 C and C++ Programming Features</A
></H3
><p class="para"><a class="indexterm" name="CH11.CFEATURE1"></A
><a class="indexterm" name="CH11.CFEATURE2"></A
><kbd class="command">vim</KBD
>, in the grand tradition of <kbd class="command">vi</KBD
>,
is first and foremost a programmer's editor. In particular,
it is a C programmer's editor, and happily, C++ programmers
can take advantage of it too. There are <em class="emphasis">lots</EM
>
of features that make the C programmer's life easier.
We describe the most significant ones here.</P
><div class="sect3"><h4 class="sect3"><a class="title" name="VI6-CH-11-SECT-10.2.1">11.10.2.1 Smart indenting</A
></H4
><p class="para"><a class="indexterm" name="AUTOID-17727"></A
><a class="indexterm" name="AUTOID-17730"></A
>All versions of <kbd class="command">vi</KBD
> have the <code class="literal">autoindent</CODE
>
option, which, when set, automatically indents the current line by the
same amount as the one next to it. This is handy for C programmers
who indent their code, and for anyone else who may need to indicate
some kind of structure in their text via indentation.</P
><p class="para"><a class="indexterm" name="AUTOID-17736"></A
><a class="indexterm" name="AUTOID-17738"></A
><kbd class="command">vim</KBD
> carries this feature further, with two
options, <code class="literal">smartindent</CODE
> and <code class="literal">cindent</CODE
>.
The <code class="literal">cindent</CODE
> option is the more interesting of the
two, and is the topic of this subsection. See <a class="xref" href="#VI6-CH-11-TAB-14">Table 11.14</A
> for a list of <em class="emphasis">vim</EM
> indentation and formatting options.</P
><br><table class="table" border="1" cellpadding="3"><caption class="table"><a class="title" name="VI6-CH-11-TAB-14">Table 11.14: vim Indentation and Formatting Options</A
></CAPTION
><thead class="thead"><tr class="row" valign="TOP"><th class="entry" align="LEFT" rowspan="1" colspan="1">Option</TH
><th class="entry" align="LEFT" rowspan="1" colspan="1">Function</TH
></TR
></THEAD
><tbody class="tbody"><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><code class="literal">autoindent</CODE
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para"><em class="emphasis"></EM
>Simple-minded indentation,<a class="indexterm" name="AUTOID-17762"></A
>
uses that of the previous line.</P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><code class="literal">smartindent</CODE
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para"><em class="emphasis"></EM
>Similar to <code class="literal">autoindent</CODE
>,
but knows a little about C syntax. Deprecated in favor
of <code class="literal">cindent</CODE
>.</P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><code class="literal">cindent</CODE
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para"><em class="emphasis"></EM
>Enables automatic indenting
for C programs, and is quite smart. C formatting is affected
by the rest of the options in this table.</P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><code class="literal">cinkeys</CODE
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para"><em class="emphasis"></EM
>Input keys that trigger<a class="indexterm" name="AUTOID-17784"></A
>
indentation options.</P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><code class="literal">cinoptions</CODE
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para"><em class="emphasis"></EM
>Allows you to tailor your<a class="indexterm" name="AUTOID-17792"></A
>
preferred indentation style.</P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><code class="literal">cinwords</CODE
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para"><em class="emphasis"></EM
>Keywords that start an<a class="indexterm" name="AUTOID-17800"></A
>
extra indentation on the following line.</P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><code class="literal">formatoptions</CODE
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para"><em class="emphasis"></EM
>Made up of a number of
single letter flags that control several behaviors,<a class="indexterm" name="AUTOID-17808"></A
>
notably how comments are formatted as you type them.</P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><code class="literal">comments</CODE
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para"><em class="emphasis"></EM
>Describes different formatting
options for different kinds of comments, both those with<a class="indexterm" name="AUTOID-17816"></A
>
starting and ending delimiters, as in C, and those that start
with a single symbol and go to the end of the line, such as
in a <i class="filename">Makefile</I
> or shell program.</P
></TD
></TR
></TBODY
></TABLE
><p class="para">When set up appropriately, <kbd class="command">vim</KBD
> automatically
rearranges the indentation of your C program as you type.
For instance, after an <code class="literal">if</CODE
>, <kbd class="command">vim</KBD
>
automatically indents the next line. If the body of the
<code class="literal">if</CODE
> is enclosed in braces, when you type
the right brace, <kbd class="command">vim</KBD
> will automatically
indent it back one tab stop, to line up underneath the
<code class="literal">if</CODE
>.
As another example, with the settings shown below,
upon typing the colon that goes with a <code class="literal">case</CODE
>,
<kbd class="command">vim</KBD
> will shift the line with the <code class="literal">case</CODE
>
left one tab stop to line up under the <code class="literal">switch</CODE
>.</P
><p class="para">The following <i class="filename">.vimrc</I
> produces, in our
opinion, very nicely formatted C code:</P
><blockquote class="screen"><pre class="screen">set nocp incsearch
set cinoptions=:0,p0,t0
set cinwords=if,else,while,do,for,switch,case
set formatoptions=tcqr
set cindent
syntax on
source ~/.exrc</PRE
></BLOCKQUOTE
><p class="para"><a class="indexterm" name="AUTOID-17834"></A
><a class="indexterm" name="AUTOID-17836"></A
>The <code class="literal">nocp</CODE
> option turns off strict <kbd class="command">vi</KBD
>
compatibility. The <code class="literal">incsearch</CODE
> option turns on
incremental searching. The settings for <code class="literal">cinoptions</CODE
>,
<code class="literal">cinwords</CODE
>, and <code class="literal">formatoptions</CODE
>
differ from the defaults; the result is to produce a
fairly strict &quot;K&amp;R&quot; C formatting style.
Finally, syntax coloring is turned on, and then the rest
of the <kbd class="command">vi</KBD
> options are read in from
the user's <i class="filename">.exrc</I
> file.</P
><p class="para">We recommend that you start up <kbd class="command">vim</KBD
>, set
these options as shown, and then spend some time working on a
C or C++ program.
Five minutes of playing 
with this facility will give you a better feel for it than
whatever static examples we could present on the printed page.
We think you'll find the facility really
enjoyable to use.</P
></DIV
><div class="sect3"><h4 class="sect3"><a class="title" name="VI6-CH-11-SECT-10.2.2">11.10.2.2 Include file searching</A
></H4
><p class="para"><a class="indexterm" name="AUTOID-17851"></A
><a class="indexterm" name="AUTOID-17853"></A
>Often, when working with large C programs, it is helpful to be able
to see where a particular type name, function, variable or
macro is defined. The tag facility can help with this, but doing a
tag lookup actually moves you to the found location, which may be
more than you need.</P
><p class="para"><kbd class="command">vim</KBD
> has a number of commands that
search through the current file <em class="emphasis">and</EM
>
through included files
to find other occurrences of
a keyword. We summarize them here.</P
><p class="para">The <kbd class="command">vi</KBD
> and <kbd class="command">ex</KBD
> commands
fall into four categories: those that display the first occurrence
of a particular object (in the status line), those that display
all occurrences of a particular object, those that jump to the
location of the first occurrence, and those that open a new window
and jump to the first occurrence.
Commands that do all four exist to look for keywords, 
usually the identifier under the cursor, and to look for macro
definitions of the identifier under the cursor.</P
><p class="para">These commands use the smart syntax facilities (the
<code class="literal">comments</CODE
> variable described earlier)
to ignore occurrences of the searched-for identifier
inside comments.
With a preceding count,
they go to the <code class="literal">count</CODE
>th occurrence.
The search for the identifier starts at the beginning of the file,
unless otherwise noted.</P
><p class="para">See <a class="xref" href="#VI6-CH-11-TAB-15">Table 11.15</A
> for 
a list of the <em class="emphasis">vim</EM
> identifier searching commands.</P
><br><table class="table" border="1" cellpadding="3"><caption class="table"><a class="title" name="VI6-CH-11-TAB-15">Table 11.15: vim Identifier Search Commands</A
></CAPTION
><thead class="thead"><tr class="row" valign="TOP"><th class="entry" align="LEFT" rowspan="1" colspan="1">Command</TH
><th class="entry" align="LEFT" rowspan="1" colspan="1">Function</TH
></TR
></THEAD
><tbody class="tbody"><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><code class="literal">[i</CODE
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">Display the first line that contains
the keyword under the cursor.<a class="indexterm" name="AUTOID-17882"></A
><a class="indexterm" name="AUTOID-17884"></A
><a class="indexterm" name="AUTOID-17887"></A
></P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><code class="literal">]i</CODE
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">Display the first line that contains
the keyword under the cursor, but start the search at
the current position in the file.
This command is most effective when given a count.</P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><code class="literal">[I</CODE
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">Display all lines that contain the<a class="indexterm" name="AUTOID-17900"></A
><a class="indexterm" name="AUTOID-17902"></A
><a class="indexterm" name="AUTOID-17905"></A
>
keyword under the cursor. Filenames and line
numbers are displayed.</P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><code class="literal">]I</CODE
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">Display all lines that contain the
keyword under the cursor, but start from the current
position in the file.</P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><code class="literal">[ ^I</CODE
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">Jump to the first occurrence of the
keyword under the cursor.<a class="indexterm" name="AUTOID-17918"></A
><a class="indexterm" name="AUTOID-17920"></A
><a class="indexterm" name="AUTOID-17923"></A
>
(Note that <code class="literal">^I</CODE
> is a TAB.)</P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><code class="literal">] ^I</CODE
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">Jump to the first occurrence of the
keyword under the cursor, but start the search
from the current position.</P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><code class="literal">^W i</CODE
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">Open a new window showing the<a class="indexterm" name="AUTOID-17937"></A
>
location of the first (or <em class="emphasis">count</EM
>th)
occurrence of the identifier under the cursor.</P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><code class="literal">^W ^I</CODE
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><code class="literal">[d</CODE
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">Display the first macro definition for<a class="indexterm" name="AUTOID-17950"></A
><a class="indexterm" name="AUTOID-17952"></A
><a class="indexterm" name="AUTOID-17955"></A
>
the identifier under the cursor.</P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><code class="literal">]d</CODE
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">Display the first macro definition for
the identifier under the cursor, but start the search
from the current position.</P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><code class="literal">[D</CODE
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">Display all macro definitions for the<a class="indexterm" name="AUTOID-17968"></A
><a class="indexterm" name="AUTOID-17970"></A
><a class="indexterm" name="AUTOID-17973"></A
>
identifier under the cursor. Filenames and
line numbers are displayed.</P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><code class="literal">]D</CODE
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">Display all macro definitions for the
identifier under the cursor, but start the search
from the current position.</P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><code class="literal">[ ^D</CODE
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">Jump to the first macro definition for the
identifier under the cursor.<a class="indexterm" name="AUTOID-17986"></A
><a class="indexterm" name="AUTOID-17988"></A
><a class="indexterm" name="AUTOID-17991"></A
></P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><code class="literal">] ^D</CODE
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">Jump to the first macro definition for the
identifier under the cursor, but start the search
from the current position.</P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><code class="literal">^W d</CODE
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">Open a new window showing the
location of the first (or <em class="emphasis">count</EM
>th)
macro definition of the identifier under the cursor.</P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><code class="literal">^W ^D</CODE
></TD
></TR
></TBODY
></TABLE
><p class="para"><a class="indexterm" name="AUTOID-18009"></A
><a class="indexterm" name="AUTOID-18011"></A
>Two options, <code class="literal">define</CODE
> and <code class="literal">include</CODE
>,
describe the source code lines that define macros and include
source files. They have default values appropriate for C, but
can be changed to suit your programming language (e.g., the value
<code class="literal">^\(#\s*define\|[a-z]*\s*const\s*[a-z]*\)</CODE
>
for <code class="literal">define</CODE
>
could be used
to also look for definitions of C++ named constants).</P
><p class="para">The same facilities are also available as <kbd class="command">ex</KBD
>
commands, shown in <a class="xref" href="#VI6-CH-11-TAB-16">Table 11.16</A
>.</P
><br><table class="table" border="1" cellpadding="3"><caption class="table"><a class="title" name="VI6-CH-11-TAB-16">Table 11.16: vim Identifier Search Commands from ex Mode</A
></CAPTION
><thead class="thead"><tr class="row" valign="TOP"><th class="entry" align="LEFT" rowspan="1" colspan="1">Command</TH
><th class="entry" align="LEFT" rowspan="1" colspan="1">Function</TH
></TR
></THEAD
><tbody class="tbody"><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1">[<code class="replaceable"><i>range</I
></CODE
>]<code class="literal">is</CODE
>[<code class="literal">earch</CODE
>][<code class="literal">!</CODE
>] [<code class="replaceable"><i>count</I
></CODE
>] [<code class="literal">/</CODE
>]<code class="replaceable"><i>pattern</I
></CODE
>[<code class="literal">/</CODE
>]</TD
><td class="entry" rowspan="1" colspan="1"><p class="para">Like <code class="literal">[i</CODE
> and<a class="indexterm" name="AUTOID-18043"></A
>
<code class="literal">]i</CODE
>, but searches in <em class="emphasis">range</EM
>
lines. The default is the whole file.
The <code class="literal">!</CODE
>, if supplied, forces comments
to be searched also.
Without the
<code class="literal">/</CODE
>'s, a word search is done.
With them, a regular expression search is done.</P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1">[<code class="replaceable"><i>range</I
></CODE
>]<code class="literal">il</CODE
>[<code class="literal">ist</CODE
>][<code class="literal">!</CODE
>] [<code class="literal">/</CODE
>]<code class="replaceable"><i>pattern</I
></CODE
>[<code class="literal">/</CODE
>]</TD
><td class="entry" rowspan="1" colspan="1"><p class="para">Like <code class="literal">[I</CODE
> and<a class="indexterm" name="AUTOID-18061"></A
>
<code class="literal">]I</CODE
>, but searches in <em class="emphasis">range</EM
>
lines. The default is the whole file.</P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1">[<code class="replaceable"><i>range</I
></CODE
>]<code class="literal">ij</CODE
>[<code class="literal">ump</CODE
>][<code class="literal">!</CODE
>] [<code class="replaceable"><i>count</I
></CODE
>] [<code class="literal">/</CODE
>]<code class="replaceable"><i>pattern</I
></CODE
>[<code class="literal">/</CODE
>]</TD
><td class="entry" rowspan="1" colspan="1"><p class="para">Like <code class="literal">[ ^I</CODE
> and<a class="indexterm" name="AUTOID-18078"></A
>
<code class="literal">] ^I</CODE
>, but searches in <em class="emphasis">range</EM
>
lines. The default is the whole file.</P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1">[<code class="replaceable"><i>range</I
></CODE
>]<code class="literal">isp</CODE
>[<code class="literal">lit</CODE
>][<code class="literal">!</CODE
>] [<code class="replaceable"><i>count</I
></CODE
>] [<code class="literal">/</CODE
>]<code class="replaceable"><i>pattern</I
></CODE
>[<code class="literal">/</CODE
>]</TD
><td class="entry" rowspan="1" colspan="1"><p class="para">Like <code class="literal">^W i</CODE
> and<a class="indexterm" name="AUTOID-18095"></A
>
<code class="literal">^W ^I</CODE
>, but searches in <em class="emphasis">range</EM
>
lines. The default is the whole file.</P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1">[<code class="replaceable"><i>range</I
></CODE
>]<code class="literal">ds</CODE
>[<code class="literal">earch</CODE
>][<code class="literal">!</CODE
>] [<code class="replaceable"><i>count</I
></CODE
>] [<code class="literal">/</CODE
>]<code class="replaceable"><i>pattern</I
></CODE
>[<code class="literal">/</CODE
>]</TD
><td class="entry" rowspan="1" colspan="1"><p class="para">Like <code class="literal">[d</CODE
> and<a class="indexterm" name="AUTOID-18112"></A
>
<code class="literal">]d</CODE
>, but searches in <em class="emphasis">range</EM
>
lines. The default is the whole file.</P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1">[<code class="replaceable"><i>range</I
></CODE
>]<code class="literal">dl</CODE
>[<code class="literal">ist</CODE
>][<code class="literal">!</CODE
>] [<code class="literal">/</CODE
>]<code class="replaceable"><i>pattern</I
></CODE
>[<code class="literal">/</CODE
>]</TD
><td class="entry" rowspan="1" colspan="1"><p class="para">Like <code class="literal">[D</CODE
> and<a class="indexterm" name="AUTOID-18128"></A
>
<code class="literal">]D</CODE
>, but searches in <em class="emphasis">range</EM
>
lines. The default is the whole file.</P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1">[<code class="replaceable"><i>range</I
></CODE
>]<code class="literal">dj</CODE
>[<code class="literal">ump</CODE
>][<code class="literal">!</CODE
>] [<code class="replaceable"><i>count</I
></CODE
>] [<code class="literal">/</CODE
>]<code class="replaceable"><i>pattern</I
></CODE
>[<code class="literal">/</CODE
>]</TD
><td class="entry" rowspan="1" colspan="1"><p class="para">Like <code class="literal">[ ^D</CODE
> and<a class="indexterm" name="AUTOID-18145"></A
>
<code class="literal">] ^D</CODE
>, but searches in <em class="emphasis">range</EM
>
lines. The default is the whole file.</P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1">[<code class="replaceable"><i>range</I
></CODE
>]<code class="literal">dsp</CODE
>[<code class="literal">lit</CODE
>][<code class="literal">!</CODE
>] [<code class="replaceable"><i>count</I
></CODE
>] [<code class="literal">/</CODE
>]<code class="replaceable"><i>pattern</I
></CODE
>[<code class="literal">/</CODE
>]</TD
><td class="entry" rowspan="1" colspan="1"><p class="para">Like <code class="literal">^W d</CODE
> and<a class="indexterm" name="AUTOID-18162"></A
>
<code class="literal">^W ^D</CODE
>, but searches in <em class="emphasis">range</EM
>
lines. The default is the whole file.</P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><code class="literal">che</CODE
>[<code class="literal">ckpath</CODE
>][<code class="literal">!</CODE
>]</TD
><td class="entry" rowspan="1" colspan="1"><p class="para">List all the included files that could not be<a class="indexterm" name="AUTOID-18173"></A
>
found. With the <code class="literal">!</CODE
>, list all the
included files.</P
></TD
></TR
></TBODY
></TABLE
><p class="para"><a class="indexterm" name="AUTOID-18177"></A
>The <code class="literal">path</CODE
> option is used to search for included files
that do not have an absolute pathname. Its default value is
<code class="literal">.,/usr/include,,</CODE
>, which looks in
the directory where the edited file resides,
in <i class="filename">/usr/include</I
>, and in the current directory.</P
></DIV
><div class="sect3"><h4 class="sect3"><a class="title" name="VI6-CH-11-SECT-10.2.3">11.10.2.3 Cursor motion commands for programming</A
></H4
><p class="para"><a class="indexterm" name="AUTOID-18185"></A
><a class="indexterm" name="AUTOID-18188"></A
><a class="indexterm" name="AUTOID-18191"></A
>A number of enhanced and new cursor motion commands make it
easier to find the opposite ends of matching constructs, as well
as to find unmatched constructs that should be matched, for
example, <code class="literal">#if</CODE
> statements that do not have
a corresponding <code class="literal">#endif</CODE
>.
Most of these commands may be preceded by a count, which
defaults to one if not given.</P
><p class="para">See <a class="xref" href="#VI6-CH-11-TAB-17">Table 11.17</A
> for a list of the
extending matching commands.</P
><br><table class="table" border="1" cellpadding="3"><caption class="table"><a class="title" name="VI6-CH-11-TAB-17">Table 11.17: vim Extended Matching Commands</A
></CAPTION
><thead class="thead"><tr class="row" valign="TOP"><th class="entry" align="LEFT" rowspan="1" colspan="1">Command</TH
><th class="entry" align="LEFT" rowspan="1" colspan="1">Function</TH
></TR
></THEAD
><tbody class="tbody"><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><code class="literal">%</CODE
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">Extended to match the <code class="literal">/*</CODE
>
and <code class="literal">*/</CODE
> of C comments,<a class="indexterm" name="AUTOID-18216"></A
><a class="indexterm" name="AUTOID-18219"></A
>
nd also the C preprocessor conditionals,
<code class="literal">#if</CODE
>,
<code class="literal">#ifdef</CODE
>,
<code class="literal">#ifndef</CODE
>,
<code class="literal">#elif</CODE
>,
<code class="literal">#else</CODE
>, and
<code class="literal">#endif</CODE
>.</P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><code class="literal">[(</CODE
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">Move to the <em class="emphasis">count</EM
>th<a class="indexterm" name="AUTOID-18234"></A
><a class="indexterm" name="AUTOID-18237"></A
><a class="indexterm" name="AUTOID-18240"></A
><a class="indexterm" name="AUTOID-18243"></A
>
previous unmatched <code class="literal">(</CODE
>.</P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><code class="literal">[)</CODE
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">Move to the <em class="emphasis">count</EM
>th
next unmatched <code class="literal">)</CODE
>.</P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><code class="literal">[{</CODE
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">Move to the <em class="emphasis">count</EM
>th<a class="indexterm" name="AUTOID-18260"></A
><a class="indexterm" name="AUTOID-18263"></A
><a class="indexterm" name="AUTOID-18266"></A
><a class="indexterm" name="AUTOID-18269"></A
>
previous unmatched <code class="literal">{</CODE
>.</P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><code class="literal">[}</CODE
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">Move to the <em class="emphasis">count</EM
>th
next unmatched <code class="literal">}</CODE
>.</P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><code class="literal">[#</CODE
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">Move to the <em class="emphasis">count</EM
>th<a class="indexterm" name="AUTOID-18286"></A
><a class="indexterm" name="AUTOID-18289"></A
><a class="indexterm" name="AUTOID-18292"></A
><a class="indexterm" name="AUTOID-18295"></A
>
previous unmatched <code class="literal">#if</CODE
> or <code class="literal">#else</CODE
>.</P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><code class="literal">]#</CODE
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">Move to the <em class="emphasis">count</EM
>th
next unmatched <code class="literal">#else</CODE
> or
<code class="literal">#endif</CODE
>.</P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><code class="literal">[*</CODE
>, <code class="literal">[/</CODE
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">Move to the <em class="emphasis">count</EM
>th
previous unmatched start of a C comment, <code class="literal">/*</CODE
>.<a class="indexterm" name="AUTOID-18316"></A
><a class="indexterm" name="AUTOID-18319"></A
><a class="indexterm" name="AUTOID-18322"></A
><a class="indexterm" name="AUTOID-18325"></A
>
<a class="indexterm" name="AUTOID-18328"></A
><a class="indexterm" name="AUTOID-18331"></A
><a class="indexterm" name="AUTOID-18334"></A
><a class="indexterm" name="AUTOID-18337"></A
></P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><code class="literal">]*</CODE
>, <code class="literal">]/</CODE
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">Move to the <em class="emphasis">count</EM
>th
next unmatched end of a C comment, <code class="literal">*/</CODE
>.</P
></TD
></TR
></TBODY
></TABLE
></DIV
><a class="indexterm" name="AUTOID-18348"></A
><a class="indexterm" name="AUTOID-18349"></A
></DIV
><div class="sect2"><h3 class="sect2"><a class="title" name="VI6-CH-11-SECT-10.3">11.10.3 Autocommands</A
></H3
><p class="para"><a class="indexterm" name="AUTOID-18353"></A
><a class="indexterm" name="AUTOID-18356"></A
><a class="indexterm" name="AUTOID-18358"></A
><kbd class="command">vim</KBD
> allows you to specify actions that should
be executed when a particular event occurs. This facility gives
you a great deal of flexibility and control.
As always though, with power comes responsibility; the <kbd class="command">vim</KBD
>
documentation warns that you should be careful with the autocommand
facility so that you don't accidentally destroy your text!</P
><p class="para">The facility is complicated and detailed. In this section we
outline its general capabilities, and provide an example to give
you a sense of its flavor.</P
><p class="para"><a class="indexterm" name="AUTOID-18364"></A
>The autocommand command is named <code class="literal">:autocmd</CODE
>.
The general syntax is:</P
><blockquote class="screen"><pre class="screen">:au <code class="replaceable"><i>event</I
></CODE
> <code class="replaceable"><i>filepat</I
></CODE
> <code class="replaceable"><i>command</I
></CODE
></PRE
></BLOCKQUOTE
><p class="para">The <em class="emphasis">event</EM
> is the kind of event to which this
command applies, for example, before and after reading a file
(<code class="literal">FileReadPre</CODE
> and <code class="literal">FileReadPost</CODE
>),
before and after writing a file
(<code class="literal">FileWritePre</CODE
> and <code class="literal">FileWritePost</CODE
>),
and upon entering or leaving a window
(<code class="literal">WinEnter</CODE
> and <code class="literal">Winleave</CODE
>).
There are more defined events, and case in the event name does not matter.</P
><p class="para">The <em class="emphasis">filepat</EM
> is a shell-style wildcard pattern
that <kbd class="command">vim</KBD
> applies to filenames. If they match,
then the autocommand will be applied for this file.</P
><p class="para">The <em class="emphasis">command</EM
> is any
<kbd class="command">ex</KBD
> mode command.
<kbd class="command">vim</KBD
> has
a special syntax for
retrieving the different parts of filenames, such
as the file's extension, or the name without the
extension.
These can be used in any <kbd class="command">ex</KBD
> command, but
are very useful with autocommands.</P
><p class="para">Multiple autocommands for the same events and file patterns
add commands onto the list. Autocommands can be removed
for a particular combination of events and file patterns
by appending <code class="literal">!</CODE
> to the <code class="literal">:autocmd</CODE
>
command.</P
><p class="para">A particularly elegant example allows you to edit
files compressed with the <kbd class="command">gzip</KBD
> program.
The file is automatically decompressed when
editing starts, and then recompressed when the file is written out
(the fourth line is broken for readability):</P
><blockquote class="screen"><pre class="screen">:autocmd! BufReadPre,FileReadPre        *.gz set bin
:autocmd! BufReadPost,FileReadPost      *.gz '[,']!gunzip
:autocmd  BufReadPost,FileReadPost      *.gz set nobin
:autocmd  BufReadPost,FileReadPost      *.gz \
          execute &quot;:doautocmd BufReadPost &quot; . expand(&quot;%:r&quot;)

:autocmd! BufWritePost,FileWritePost    *.gz !mv &lt;afile&gt; &lt;afile&gt;:r
:autocmd  BufWritePost,FileWritePost    *.gz !gzip &lt;afile&gt;:r

:autocmd! FileAppendPre                 *.gz !gunzip &lt;afile&gt;
:autocmd  FileAppendPre                 *.gz !mv &lt;afile&gt;:r &lt;afile&gt;

:autocmd! FileAppendPost                *.gz !mv &lt;afile&gt; &lt;afile&gt;:r
:autocmd  FileAppendPost                *.gz !gzip &lt;afile&gt;:r</PRE
></BLOCKQUOTE
><p class="para">The first four commands are for reading compressed files.
The first two in this set use <code class="literal">!</CODE
> to
remove any previously defined autocommands
for compressed files (<i class="filename">*.gz</I
>).
The compressed file is read into the buffer as a binary file, so
the first command turns on
the <code class="literal">bin</CODE
> (short for <code class="literal">binary</CODE
>)
option.</P
><p class="para"><kbd class="command">vim</KBD
> sets the marks
<code class="literal">'[</CODE
> and <code class="literal">']</CODE
> to the first and
last lines of the just read text. The second command uses this to
uncompress the just read file in the buffer.</P
><p class="para">The next two lines unset the <code class="literal">binary</CODE
>
option, and then apply any autocommands that apply to the
uncompressed version of the file (e.g., syntax highlighting).
The <code class="literal">%:r</CODE
> is the current filename without the extension.</P
><p class="para">The next two lines are for writing the compressed file.
The first one in this set first removes any previously defined autocommands
for compressed files (<i class="filename">*.gz</I
>), with these events.
The commands invoke a shell to rename the file to not have the
<code class="literal">.gz</CODE
> extension, and then run <kbd class="command">gzip</KBD
>
to compress the file.
The <code class="literal">&lt;afile&gt;:r</CODE
> is the filename
without the extension.
(The use of <code class="literal">&lt;afile&gt;:r</CODE
> is restricted
to autocommands.)
<kbd class="command">vim</KBD
> writes the uncompressed buffer to
the file with the <i class="filename">.gz</I
> extension, thus the
need for the renaming.</P
><p class="para">The second line in this set runs <em class="emphasis">gzip</EM
> to compress
the file. <em class="emphasis">gzip</EM
> automatically renames the file, adding
the <em class="emphasis">.gz</EM
> extension.</P
><p class="para">The last four lines handle the case of appending to a compressed file.
The first two of these lines uncompress the file and rename it
before appending the contents to the file.</P
><p class="para">Finally, the last two lines recompress the file after writing
to it, so that the uncompressed file is not left laying around.</P
><p class="para">This section just touches the tip of the iceberg of autocommands.
For example, autocommands can be placed into groups, so that they
can all be executed or removed together.
All of the syntax coloring commands
described in
<a class="xref" href="ch11_09.htm" webstripperlinkwas="ch11_09.htm#VI6-CH-11-SECT-9.2">Section 11.9.2</A
>
are placed into the <code class="literal">highlight</CODE
>
group.
An autocommand then executes all of them together when an
appropriate file is read.</P
><p class="para">As an example, instead of having your <i class="filename">.vimrc</I
> file
always execute <code class="literal">set cindent</CODE
> for smart C indenting,
you might use an autocommand to do it just for C source code, like
this:</P
><blockquote class="screen"><pre class="screen">autocmd BufReadPre,FileReadPre   *.[chy] set cindent</PRE
></BLOCKQUOTE
></DIV
><a class="indexterm" name="AUTOID-18426"></A
></DIV
><div class="htmlnav"><p></P
><hr align="LEFT" width="515" title="footer"><table width="515" border="0" cellspacing="0" cellpadding="0"><tr><td align="LEFT" valign="TOP" width="172"><a class="SECT1" href="ch11_09.htm" webstripperlinkwas="ch11_09.htm" title="11.9 Programming Assistance"><img src="../gifs/txtpreva.gif" webstripperlinkwas="../gifs/txtpreva.gif" alt="Previous: 11.9 Programming Assistance" border="0"></A
></TD
><td align="CENTER" valign="TOP" width="171"><a class="book" href="index.htm" webstripperlinkwas="http://www.ms.itb.ac.id/buku/unix-bookshelf/vi/index.htm" title="Learning the vi Editor"><img src="../gifs/txthome.gif" webstripperlinkwas="../gifs/txthome.gif" alt="Learning the vi Editor" border="0"></A
></TD
><td align="RIGHT" valign="TOP" width="172"><a class="SECT1" href="ch11_11.htm" webstripperlinkwas="ch11_11.htm" title="11.11 Sources and Supported Operating Systems"><img src="../gifs/txtnexta.gif" webstripperlinkwas="../gifs/txtnexta.gif" alt="Next: 11.11 Sources and Supported Operating Systems" border="0"></A
></TD
></TR
><tr><td align="LEFT" valign="TOP" width="172">11.9 Programming Assistance</TD
><td align="CENTER" valign="TOP" width="171"><a class="index" href="index/idx_0.htm" webstripperlinkwas="index/idx_0.htm" title="Book Index"><img src="../gifs/index.gif" webstripperlinkwas="../gifs/index.gif" alt="Book Index" border="0"></A
></TD
><td align="RIGHT" valign="TOP" width="172">11.11 Sources and Supported Operating Systems</TD
></TR
></TABLE
><hr align="LEFT" width="515" title="footer"><img src="../gifs/smnavbar.gif" webstripperlinkwas="../gifs/smnavbar.gif" usemap="#map" border="0" alt="The UNIX CD Bookshelf Navigation"><map name="map"><area shape="RECT" coords="0,0,73,21" href="../index.html" webstripperlinkwas="http://www.ms.itb.ac.id/buku/unix-bookshelf/index.html" alt="The UNIX CD Bookshelf"><area shape="RECT" coords="74,0,163,21" href="../upt/index.htm" webstripperlinkwas="http://www.ms.itb.ac.id/buku/unix-bookshelf/upt/index.htm" alt="UNIX Power Tools"><area shape="RECT" coords="164,0,257,21" href="../unixnut/index.htm" webstripperlinkwas="http://www.ms.itb.ac.id/buku/unix-bookshelf/unixnut/index.htm" alt="UNIX in a Nutshell"><area shape="RECT" coords="258,0,321,21" href="index.htm" webstripperlinkwas="http://www.ms.itb.ac.id/buku/unix-bookshelf/vi/index.htm" alt="Learning the vi Editor"><area shape="RECT" coords="322,0,378,21" href="../sedawk/index.htm" webstripperlinkwas="http://www.ms.itb.ac.id/buku/unix-bookshelf/sedawk/index.htm" alt="sed &amp; awk"><area shape="RECT" coords="379,0,438,21" href="../ksh/index.htm" webstripperlinkwas="http://www.ms.itb.ac.id/buku/unix-bookshelf/ksh/index.htm" alt="Learning the Korn Shell"><area shape="RECT" coords="439,0,514,21" href="../lrnunix/index.htm" webstripperlinkwas="http://www.ms.itb.ac.id/buku/unix-bookshelf/lrnunix/index.htm" alt="Learning the UNIX Operating System"></MAP
></DIV
></BODY
></HTML
>

