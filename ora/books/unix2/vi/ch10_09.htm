<html><head><title>[Chapter 10] 10.9 Programming Assistance</TITLE
><meta name="DC.Creator" content="Linda Lamb &amp; Arnold Robbins"><meta name="DC.Date" content="1999-11-23T17:58:15Z"><meta name="DC.Format" content="text/html" scheme="MIME"><meta name="DC.Identifier" content="O'Reilly Unix CDROM-unknown"><meta name="DC.Language" content="en-US"><meta name="DC.Publisher" content="O'Reilly &amp; Associates, Inc."><meta name="DC.Source" content="unknown" scheme="ISBN"><meta name="DC.Subject.Keyword" content="Unix, vi, text, editor, tool"><meta name="DC.Title" content="Learning the vi Editor"><meta name="DC.Type" content="Text.Monograph"><meta name="generator" content="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><link rev="made" href="mailto:online-books@oreilly.com" title="Online Books Comments"><link rel="up" href="ch10_01.htm" webstripperlinkwas="ch10_01.htm" title="10. elvis"><link rel="prev" href="ch10_08.htm" webstripperlinkwas="ch10_08.htm" title="10.8 Improved Editing Facilities"><link rel="next" href="ch10_10.htm" webstripperlinkwas="ch10_10.htm" title="10.10 Interesting Features"></HEAD
><body bgcolor="#FFFFFF" text="#000000"><div class="htmlnav"><h1><img src="gifs/smbanner.gif" webstripperlinkwas="gifs/smbanner.gif" alt="Learning the vi Editor" usemap="#srchmap" border="0"></H1
><map name="srchmap"><area shape="RECT" coords="0,0,466,65" href="index.htm" webstripperlinkwas="http://www.ms.itb.ac.id/buku/unix-bookshelf/vi/index.htm" alt="Learning the vi Editor"><area shape="RECT" coords="467,0,514,18" href="jobjects/fsearch.htm" webstripperlinkwas="jobjects/fsearch.htm" alt="Search this book"></MAP
><table width="515" border="0" cellspacing="0" cellpadding="0"><tr><td align="LEFT" valign="TOP" width="172"><a class="SECT1" href="ch10_08.htm" webstripperlinkwas="ch10_08.htm" title="10.8 Improved Editing Facilities"><img src="../gifs/txtpreva.gif" webstripperlinkwas="../gifs/txtpreva.gif" alt="Previous: 10.8 Improved Editing Facilities" border="0"></A
></TD
><td align="CENTER" valign="TOP" width="171"><b><font face="ARIEL,HELVETICA,HELV,SANSERIF" size="-1"><a class="chapter" rel="up" href="ch10_01.htm" webstripperlinkwas="ch10_01.htm" title="10. elvis">Chapter 10<br>elvis</A
></FONT
></B
></TD
><td align="RIGHT" valign="TOP" width="172"><a class="SECT1" href="ch10_10.htm" webstripperlinkwas="ch10_10.htm" title="10.10 Interesting Features"><img src="../gifs/txtnexta.gif" webstripperlinkwas="../gifs/txtnexta.gif" alt="Next: 10.10 Interesting Features" border="0"></A
></TD
></TR
></TABLE
>&nbsp;<hr align="LEFT" width="515" title="footer"></DIV
><div class="SECT1"><h2 class="sect1"><a class="title" name="VI6-CH-10-SECT-9">10.9 Programming Assistance</A
></H2
><p class="para"><a class="indexterm" name="CH10.PROG1"></A
><a class="indexterm" name="CH10.PROG2"></A
><a class="indexterm" name="CH10.PROG3"></A
><kbd class="command">elvis</KBD
>' programming assistance capabilities are described in this section.</P
><div class="sect2"><h3 class="sect2"><a class="title" name="VI6-CH-10-SECT-9.1">10.9.1 Edit-Compile Speedup</A
></H3
><p class="para"><a class="indexterm" name="AUTOID-14130"></A
><a class="indexterm" name="AUTOID-14134"></A
><a class="indexterm" name="AUTOID-14137"></A
><kbd class="command">elvis</KBD
> provides commands that make it easier
to stay within the editor while working on a program. You can recompile
a single file, rebuild your entire program, and work through compiler
errors one at a time.
The <kbd class="command">elvis</KBD
> commands are summarized in
<a class="xref" href="#VI6-CH-10-TAB-10">Table 10.10</A
>.</P
><br><table class="table" border="1" cellpadding="3"><caption class="table"><a class="title" name="VI6-CH-10-TAB-10">Table 10.10: elvis Program Development Commands</A
></CAPTION
><thead class="thead"><tr class="row" valign="TOP"><th class="entry" align="LEFT" rowspan="1" colspan="1">Command</TH
><th class="entry" align="LEFT" rowspan="1" colspan="1">Option</TH
><th class="entry" align="LEFT" rowspan="1" colspan="1">Function</TH
></TR
></THEAD
><tbody class="tbody"><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><code class="literal">cc</CODE
>[<code class="literal">!</CODE
>] [<code class="replaceable"><i>args</I
></CODE
>]</TD
><td class="entry" rowspan="1" colspan="1"><code class="literal">ccprg</CODE
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para"><em class="emphasis"></EM
>Run the C compiler. Useful for<a class="indexterm" name="AUTOID-14165"></A
><a class="indexterm" name="AUTOID-14167"></A
>
recompiling an individual file.</P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><code class="literal">mak</CODE
>[<code class="literal">e</CODE
>][<code class="literal">!</CODE
>] [<code class="replaceable"><i>args</I
></CODE
>]</TD
><td class="entry" rowspan="1" colspan="1"><code class="literal">makeprg</CODE
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para"><em class="emphasis"></EM
>Recompile everything that<a class="indexterm" name="AUTOID-14180"></A
><a class="indexterm" name="AUTOID-14182"></A
>
needs recompiling (usually via <code class="literal">make</CODE
>(1)).</P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><code class="literal">er</CODE
>[<code class="literal">rlist</CODE
>][<code class="literal">!</CODE
>] [<code class="replaceable"><i>file</I
></CODE
>]</TD
><td class="entry" rowspan="1" colspan="1"></TD
><td class="entry" rowspan="1" colspan="1"><p class="para"><em class="emphasis"></EM
>Move to the next error's<a class="indexterm" name="AUTOID-14195"></A
>
location.</P
></TD
></TR
></TBODY
></TABLE
><p class="para">The <code class="literal">cc</CODE
> command recompiles an individual source
file. You run it from the colon command line. For
example, if you are editing the file <i class="filename">hello.c</I
>,
and you type <code class="literal">:cc</CODE
>, <kbd class="command">elvis</KBD
> will
compile <i class="filename">hello.c</I
> for you.</P
><p class="para">If you supply additional arguments to the <code class="literal">:cc</CODE
>
command, those arguments will be passed on to the C compiler.
In this case, you need to supply <em class="emphasis">all</EM
> the
arguments, including the filename.</P
><p class="para">The <code class="literal">:cc</CODE
> command works by executing
the text of the <code class="literal">ccprg</CODE
> option.
The default value is <code class="literal">&quot;cc ($1?$1:$2)&quot;</CODE
>.
<kbd class="command">elvis</KBD
> sets <code class="literal">$2</CODE
> to the name
of the current source file, and <code class="literal">$1</CODE
> to the
arguments you give to the <code class="literal">:cc</CODE
> command.
The value of <code class="literal">ccprg</CODE
> thus uses your arguments
if they are present; otherwise, it just passes the current file's
name to the system <code class="literal">cc</CODE
> command.
(You can, of course, change <code class="literal">ccprg</CODE
> to suit your taste.)</P
><p class="para">Similarly, the <code class="literal">:make</CODE
> command is intended to
recompile everything that needs recompiling. It does this by executing
the contents of the <code class="literal">makeprg</CODE
> option, which
by default is <code class="literal">&quot;make $1&quot;</CODE
>.
Thus, you could type <code class="literal">:make hello</CODE
> to make just
the <kbd class="command">hello</KBD
> program, or just <code class="literal">:make</CODE
>
to make everything.</P
><p class="para"><kbd class="command">elvis</KBD
> captures the output of the
compile or <kbd class="command">make</KBD
>, and looks for things that look
like filenames and line numbers. When it finds likely candidates, it
treats them as such, and moves to the location of the first error.
The <code class="literal">:errlist</CODE
> command moves to each successive
error location, in turn.
<kbd class="command">elvis</KBD
> displays the error message text in the
status line as you move to each location.</P
><p class="para">If you supply a <em class="emphasis">filename</EM
> argument to
<code class="literal">:errlist</CODE
>, <kbd class="command">elvis</KBD
> will load
a fresh batch of error messages from that file, and move to the
location of the first error.</P
><p class="para">The <kbd class="command">vi</KBD
> mode command <code class="literal">*</CODE
> (asterisk)
is equivalent to <code class="literal">:errlist</CODE
>. This is more convenient
to use when you have a lot of errors to step through.</P
><p class="para">Finally, one really nice feature is that <kbd class="command">elvis</KBD
>
compensates for changes in the file.
As you add or delete lines, <kbd class="command">elvis</KBD
> keeps track,
so that when you go to the next error, you end up on the correct
line, which is not necessarily the one
with the same absolute line number as
in the compiler's error message.</P
></DIV
><div class="sect2"><h3 class="sect2"><a class="title" name="VI6-CH-10-SECT-9.2">10.9.2 Syntax Highlighting</A
></H3
><p class="para"><a class="indexterm" name="AUTOID-14243"></A
><a class="indexterm" name="AUTOID-14246"></A
><a class="indexterm" name="AUTOID-14250"></A
><a class="indexterm" name="AUTOID-14252"></A
><a class="indexterm" name="AUTOID-14254"></A
><a class="indexterm" name="AUTOID-14258"></A
><a class="indexterm" name="AUTOID-14262"></A
>To cause <kbd class="command">elvis</KBD
> to do syntax highlighting, use
the <code class="literal">:display syntax</CODE
> command.
This is a per-window command.
(The other <kbd class="command">elvis</KBD
> display modes are
described in
<a class="xref" href="ch10_10.htm" webstripperlinkwas="ch10_10.htm">Section 10.10.1</A
>.)
<kbd class="command">elvis</KBD
> displays text in up to six different fonts:
<em class="emphasis">normal</EM
>,
<em class="emphasis">bold</EM
>,
<em class="emphasis">italic</EM
>,
<em class="emphasis">underlined</EM
>,
<em class="emphasis">emphasized</EM
>,
and
<em class="emphasis">fixed</EM
>.
(These can
be abbreviated to a single letter.) The syntax display modes use
the following options to associate fonts with various parts of the syntax:</P
><ul class="itemizedlist"><li class="listitem"><p class="para"><code class="literal">commentfont</CODE
>: The font (<em class="emphasis">normal</EM
>,<a class="indexterm" name="AUTOID-14282"></A
>
<em class="emphasis">italic</EM
>, etc.) to use for programming language
comments</P
></LI
><li class="listitem"><p class="para"><code class="literal">functionfont</CODE
>: The font to use for identifiers
that are function names<a class="indexterm" name="AUTOID-14288"></A
></P
></LI
><li class="listitem"><p class="para"><code class="literal">keywordfont</CODE
>: The font to use for programming language
keywords<a class="indexterm" name="AUTOID-14293"></A
></P
></LI
><li class="listitem"><p class="para"><code class="literal">prepfont</CODE
>: The font to use for C and C++
preprocessor directives<a class="indexterm" name="AUTOID-14298"></A
></P
></LI
><li class="listitem"><p class="para"><code class="literal">stringfont</CODE
>: The font to use for string constants<a class="indexterm" name="AUTOID-14303"></A
>
(such as <code class="literal">&quot;Don't panic!&quot;</CODE
> in Awk)</P
></LI
><li class="listitem"><p class="para"><code class="literal">variablefont</CODE
>: The font to use for variables,<a class="indexterm" name="AUTOID-14309"></A
>
fields, and so on</P
></LI
><li class="listitem"><p class="para"><code class="literal">otherfont</CODE
>: The font to use for things that don't<a class="indexterm" name="AUTOID-14314"></A
>
fall into the other categories but that should not be displayed
in the normal font (e.g., type names defined with the C
<code class="literal">typedef</CODE
> keyword)</P
></LI
></UL
><p class="para">The description of each language's comments, functions, keywords,
etc., is stored in the <i class="filename">elvis.syn</I
>
file. This file comes with a number of specifications in it already.
As an example, here is the syntax specification for Awk:</P
><blockquote class="screen"><pre class="screen"># Awk.  This is actually for Thompson Automation's AWK compiler, which is
# somewhat beefier than the standard AWK interpreter.
language tawk awk
extension .awk
keyword BEGIN BEGINFILE END ENDFILE INIT break continue do else for function
keyword global if in local next return while
comment #
function (
string &quot;
regexp /
useregexp (,~
other allcaps</PRE
></BLOCKQUOTE
><p class="para">The format is mostly self-explanatory, and is fully
documented in the <kbd class="command">elvis</KBD
> online documentation.</P
><p class="para">The reason <kbd class="command">elvis</KBD
> associates fonts with different
parts of a file's syntax is its ability to print files as they're
shown on the screen (see the discussion of the <code class="literal">:lpr</CODE
>
command in
<a class="xref" href="ch10_10.htm" webstripperlinkwas="ch10_10.htm">Section 10.10.1</A
>).</P
><p class="para">In addition to specifying the font to use for each kind of item,
you can associate a color with each kind of font (<em class="emphasis">normal</EM
>,
<em class="emphasis">italic</EM
>, and so on).
This is done with the <code class="literal">:color</CODE
> command.</P
><p class="para">On a non-bitmapped display such as the Linux console, all of the
fonts map into the one used by the console driver.
This makes it rather difficult to distinguish <em class="emphasis">normal</EM
>
from <em class="emphasis">italic</EM
>, for example.
However, on some displays (such as the Linux console), you
can still change the color of the different fonts.
If you have a Linux system with <kbd class="command">elvis</KBD
>, use it
to edit a convenient C source file, and then issue the following
commands:</P
><blockquote class="screen"><pre class="screen">:display syntax
:color normal white
:color bold yellow
:color emphasized green
:color italic cyan
:color fixed red</PRE
></BLOCKQUOTE
><p class="para">Your screen will change to highlight C keywords in yellow,
comments in  light blue,
preprocessor directives in green,
and character and string constants in red.
We regret that we can't reproduce the effect here in print. :-)</P
><p class="para">In <kbd class="command">elvis</KBD
>, the syntax colors are per-window
attributes. You can change the color for the italic font in one
window, and it will not affect the color for the italic font in
another window. This is true even if both windows are showing
the same file.</P
><p class="para">Syntax coloring makes program editing much more interesting
and lively. But you have to be careful in your choice of colors!</P
></DIV
><a class="indexterm" name="AUTOID-14339"></A
><a class="indexterm" name="AUTOID-14340"></A
><a class="indexterm" name="AUTOID-14341"></A
></DIV
><div class="htmlnav"><p></P
><hr align="LEFT" width="515" title="footer"><table width="515" border="0" cellspacing="0" cellpadding="0"><tr><td align="LEFT" valign="TOP" width="172"><a class="SECT1" href="ch10_08.htm" webstripperlinkwas="ch10_08.htm" title="10.8 Improved Editing Facilities"><img src="../gifs/txtpreva.gif" webstripperlinkwas="../gifs/txtpreva.gif" alt="Previous: 10.8 Improved Editing Facilities" border="0"></A
></TD
><td align="CENTER" valign="TOP" width="171"><a class="book" href="index.htm" webstripperlinkwas="http://www.ms.itb.ac.id/buku/unix-bookshelf/vi/index.htm" title="Learning the vi Editor"><img src="../gifs/txthome.gif" webstripperlinkwas="../gifs/txthome.gif" alt="Learning the vi Editor" border="0"></A
></TD
><td align="RIGHT" valign="TOP" width="172"><a class="SECT1" href="ch10_10.htm" webstripperlinkwas="ch10_10.htm" title="10.10 Interesting Features"><img src="../gifs/txtnexta.gif" webstripperlinkwas="../gifs/txtnexta.gif" alt="Next: 10.10 Interesting Features" border="0"></A
></TD
></TR
><tr><td align="LEFT" valign="TOP" width="172">10.8 Improved Editing Facilities</TD
><td align="CENTER" valign="TOP" width="171"><a class="index" href="index/idx_0.htm" webstripperlinkwas="index/idx_0.htm" title="Book Index"><img src="../gifs/index.gif" webstripperlinkwas="../gifs/index.gif" alt="Book Index" border="0"></A
></TD
><td align="RIGHT" valign="TOP" width="172">10.10 Interesting Features</TD
></TR
></TABLE
><hr align="LEFT" width="515" title="footer"><img src="../gifs/smnavbar.gif" webstripperlinkwas="../gifs/smnavbar.gif" usemap="#map" border="0" alt="The UNIX CD Bookshelf Navigation"><map name="map"><area shape="RECT" coords="0,0,73,21" href="../index.html" webstripperlinkwas="http://www.ms.itb.ac.id/buku/unix-bookshelf/index.html" alt="The UNIX CD Bookshelf"><area shape="RECT" coords="74,0,163,21" href="../upt/index.htm" webstripperlinkwas="http://www.ms.itb.ac.id/buku/unix-bookshelf/upt/index.htm" alt="UNIX Power Tools"><area shape="RECT" coords="164,0,257,21" href="../unixnut/index.htm" webstripperlinkwas="http://www.ms.itb.ac.id/buku/unix-bookshelf/unixnut/index.htm" alt="UNIX in a Nutshell"><area shape="RECT" coords="258,0,321,21" href="index.htm" webstripperlinkwas="http://www.ms.itb.ac.id/buku/unix-bookshelf/vi/index.htm" alt="Learning the vi Editor"><area shape="RECT" coords="322,0,378,21" href="../sedawk/index.htm" webstripperlinkwas="http://www.ms.itb.ac.id/buku/unix-bookshelf/sedawk/index.htm" alt="sed &amp; awk"><area shape="RECT" coords="379,0,438,21" href="../ksh/index.htm" webstripperlinkwas="http://www.ms.itb.ac.id/buku/unix-bookshelf/ksh/index.htm" alt="Learning the Korn Shell"><area shape="RECT" coords="439,0,514,21" href="../lrnunix/index.htm" webstripperlinkwas="http://www.ms.itb.ac.id/buku/unix-bookshelf/lrnunix/index.htm" alt="Learning the UNIX Operating System"></MAP
></DIV
></BODY
></HTML
>

