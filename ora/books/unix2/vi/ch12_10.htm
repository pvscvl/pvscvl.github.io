<html><head><title>[Chapter 12] 12.10 Interesting Features</TITLE
><meta name="DC.Creator" content="Linda Lamb &amp; Arnold Robbins"><meta name="DC.Date" content="1999-11-23T17:59:37Z"><meta name="DC.Format" content="text/html" scheme="MIME"><meta name="DC.Identifier" content="O'Reilly Unix CDROM-unknown"><meta name="DC.Language" content="en-US"><meta name="DC.Publisher" content="O'Reilly &amp; Associates, Inc."><meta name="DC.Source" content="unknown" scheme="ISBN"><meta name="DC.Subject.Keyword" content="Unix, vi, text, editor, tool"><meta name="DC.Title" content="Learning the vi Editor"><meta name="DC.Type" content="Text.Monograph"><meta name="generator" content="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><link rev="made" href="mailto:online-books@oreilly.com" title="Online Books Comments"><link rel="up" href="ch12_01.htm" webstripperlinkwas="ch12_01.htm" title="12. vile&nbsp;-- vi Like Emacs"><link rel="prev" href="ch12_09.htm" webstripperlinkwas="ch12_09.htm" title="12.9 Programming Assistance"><link rel="next" href="ch12_11.htm" webstripperlinkwas="ch12_11.htm" title="12.11 Sources and Supported Operating Systems"></HEAD
><body bgcolor="#FFFFFF" text="#000000"><div class="htmlnav"><h1><img src="gifs/smbanner.gif" webstripperlinkwas="gifs/smbanner.gif" alt="Learning the vi Editor" usemap="#srchmap" border="0"></H1
><map name="srchmap"><area shape="RECT" coords="0,0,466,65" href="index.htm" webstripperlinkwas="http://www.ms.itb.ac.id/buku/unix-bookshelf/vi/index.htm" alt="Learning the vi Editor"><area shape="RECT" coords="467,0,514,18" href="jobjects/fsearch.htm" webstripperlinkwas="jobjects/fsearch.htm" alt="Search this book"></MAP
><table width="515" border="0" cellspacing="0" cellpadding="0"><tr><td align="LEFT" valign="TOP" width="172"><a class="SECT1" href="ch12_09.htm" webstripperlinkwas="ch12_09.htm" title="12.9 Programming Assistance"><img src="../gifs/txtpreva.gif" webstripperlinkwas="../gifs/txtpreva.gif" alt="Previous: 12.9 Programming Assistance" border="0"></A
></TD
><td align="CENTER" valign="TOP" width="171"><b><font face="ARIEL,HELVETICA,HELV,SANSERIF" size="-1"><a class="chapter" rel="up" href="ch12_01.htm" webstripperlinkwas="ch12_01.htm" title="12. vile&nbsp;-- vi Like Emacs">Chapter 12<br>vile&nbsp;-- vi Like Emacs</A
></FONT
></B
></TD
><td align="RIGHT" valign="TOP" width="172"><a class="SECT1" href="ch12_11.htm" webstripperlinkwas="ch12_11.htm" title="12.11 Sources and Supported Operating Systems"><img src="../gifs/txtnexta.gif" webstripperlinkwas="../gifs/txtnexta.gif" alt="Next: 12.11 Sources and Supported Operating Systems" border="0"></A
></TD
></TR
></TABLE
>&nbsp;<hr align="LEFT" width="515" title="footer"></DIV
><div class="SECT1"><h2 class="sect1"><a class="title" name="VI6-CH-12-SECT-10">12.10 Interesting Features</A
></H2
><p class="para"><a class="indexterm" name="CH12.INTERESTING"></A
><kbd class="command">vile</KBD
> has a number of interesting features that
are the topic of this section.</P
><dl class="variablelist"><dt class="term">The vile editing model</DT
><dd class="listitem"><p class="para"><kbd class="command">vile</KBD
>'s editing model is somewhat different
from <kbd class="command">vi</KBD
>'s. Based on concepts from
<kbd class="command">emacs</KBD
>, it provides key rebinding and a more dynamic
command line.</P
></DD
><dt class="term">Major modes</DT
><dd class="listitem"><p class="para"><kbd class="command">vile</KBD
> supports editing &quot;modes.&quot;
These are groups of option settings that make it convenient
for editing different kinds of files.</P
></DD
><dt class="term">The procedure language</DT
><dd class="listitem"><p class="para"><kbd class="command">vile</KBD
>'s procedure language allows you to
define functions and macros that make the editor more programmable
and flexible.</P
></DD
><dt class="term">Miscellaneous small features</DT
><dd class="listitem"><p class="para">A number of smaller features make day-to-day editing easier.</P
></DD
></DL
><div class="sect2"><h3 class="sect2"><a class="title" name="VI6-CH-12-SECT-10.1">12.10.1 The vile Editing Model</A
></H3
><p class="para"><a class="indexterm" name="AUTOID-20316"></A
><a class="indexterm" name="AUTOID-20319"></A
><a class="indexterm" name="AUTOID-20322"></A
>In <kbd class="command">vi</KBD
> and the other clones,
editing functionality is &quot;hardwired&quot;
into the editor. The association between command characters and
what they do is built into the code. For example,
the <code class="literal">x</CODE
> key deletes characters, and the <code class="literal">i</CODE
>
key enters insert mode.
Without resorting to severe trickery, you cannot switch the
functionality of the two keys (if it can even be done at all).</P
><p class="para"><kbd class="command">vile</KBD
>'s editing model, derived from <kbd class="command">emacs</KBD
>
through MicroEMACS, is different.
The editor has defined, named functions, each of which performs a single
editing task, such as <code class="literal">delete-next-character</CODE
>
or <code class="literal">delete-previous-character</CODE
>.
Many of the functions are then bound to keystrokes, such as binding
<code class="literal">delete-next-character</CODE
> to <code class="literal">x</CODE
>.</P
><p class="para"><a class="indexterm" name="AUTOID-20336"></A
>Changing bindings is very easy to do. You use the
<code class="literal">:bind-key</CODE
> command. As arguments, you give it the
name of the function, and then the key sequence to bind the
function to. You might put the following commands into
your <i class="filename">.vilerc</I
> file:</P
><blockquote class="screen"><pre class="screen">bind-key incremental-search /
bind-key reverse-incremental-search ?</PRE
></BLOCKQUOTE
><p class="para">These commands change the <code class="literal">/</CODE
> and <code class="literal">?</CODE
>
search commands to do incremental searching.</P
><p class="para">In addition to pre-defined functions, <kbd class="command">vile</KBD
> contains a simple
programming language that allows you to write procedures.
You may then bind the command for executing a procedure to a keystroke
sequence.
GNU <kbd class="command">emacs</KBD
> uses a variant of Lisp for its language,
which is extremely powerful.  <kbd class="command">vile</KBD
> has a somewhat simpler,
less general-purpose language.</P
><p class="para">Also, as in <kbd class="command">emacs</KBD
>, the <kbd class="command">vile</KBD
>
command line is very interactive. Many commands display a default
value for their operand, which you can edit if not appropriate, or
select by hitting <kbd class="keycap">[RETURN]</KBD
>.
As you type <kbd class="command">vi</KBD
> mode editing commands, such as those that
change or delete characters, you will see feedback about the
operation in the status line.</P
><p class="para"><a class="indexterm" name="AUTOID-20354"></A
><a class="indexterm" name="AUTOID-20357"></A
>The &quot;amazing&quot; <kbd class="command">ex</KBD
> mode that Paul
referred to earlier is best reflected in the behavior of the
<code class="literal">:s</CODE
> (substitute) command. It prompts for
each part of the command: the search pattern, the replacement
text, and any flags.</P
><p class="para">As an example, let's assume
you wish to change all instances of <em class="emphasis">perl</EM
>
to <em class="emphasis">awk</EM
> everywhere in your file.
In the other editors, you'd simply type
<code class="literal">:1,$s/perl/awk/g</CODE
><kbd class="keycap">[RETURN]</KBD
>,
and that's what would appear on the command line.
The following set of screens describes what you see on the
<kbd class="command">vile</KBD
> colon command line <em class="emphasis">as you
type</EM
>:</P
><table class="informaltable" border="1" cellpadding="3"><thead class="thead"><tr class="row" valign="TOP"><th class="entry" align="LEFT" rowspan="1" colspan="1">Keystrokes</TH
><th class="entry" align="LEFT" rowspan="1" colspan="1">Results</TH
></TR
></THEAD
><tbody class="tbody"><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><code class="literal">:1,$s</CODE
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">The first part of the substitute command.</P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><code class="literal">/</CODE
></TD
><td class="entry" rowspan="1" colspan="1"><blockquote class="screen"><pre class="screen">substitute pattern: _</PRE
></BLOCKQUOTE
><p class="para"><kbd class="command">vile</KBD
> prompts you for the pattern to search for.
Any previous pattern is placed there for you to re-use.</P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><code class="literal">perl/</CODE
></TD
><td class="entry" rowspan="1" colspan="1"><blockquote class="screen"><pre class="screen">replacement string: _</PRE
></BLOCKQUOTE
><p class="para">At the next <em class="emphasis">/</EM
> delimiter,
<kbd class="command">vile</KBD
> prompts you for the replacement text.
Any previous text is placed there for you to re-use.</P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><code class="literal">awk/</CODE
></TD
><td class="entry" rowspan="1" colspan="1"><blockquote class="screen"><pre class="screen"> (g)lobally, ([1-9])th occurrence on line, 
(c)onfirm, and/or (p)rint result: _</PRE
></BLOCKQUOTE
><p class="para">At the final delimiter,
<kbd class="command">vile</KBD
> prompts for the optional flags. Enter any
desired flags, then <kbd class="keycap">[RETURN]</KBD
>.</P
></TD
></TR
></TBODY
></TABLE
><p class="para">The last prompt line is broken for readability. <kbd class="command">vile</KBD
>
prints it all on one line.</P
><p class="para"><kbd class="command">vile</KBD
> follows through with this style of behavior
on all appropriate <kbd class="command">ex</KBD
> commands. For example, the
read command (<code class="literal">:r</CODE
>)
will prompt you with the name of the
last file you read.
To read that file again, just hit <kbd class="keycap">[RETURN]</KBD
>.</P
><p class="para">Finally, <kbd class="command">vile</KBD
>'s <kbd class="command">ex</KBD
> command parser
is weaker than in the other editors.
For example, you cannot use search patterns to specify
line ranges (<code class="literal">:/now/,/forever/s/perl/awk/g</CODE
>),
and the move command (<code class="literal">m</CODE
>) is not implemented.
In practice, what's not implemented does not seem to hinder
you very much.</P
></DIV
><div class="sect2"><h3 class="sect2"><a class="title" name="VI6-CH-12-SECT-10.2">12.10.2 Major Modes</A
></H3
><p class="para"><a class="indexterm" name="AUTOID-20421"></A
>A <em class="emphasis">major mode</EM
> is a collection of option settings
that apply when editing a certain class of file. Many of these options
apply on a per-buffer basis, such as the tab-stop settings.
The major mode concept was first introduced in <kbd class="command">vile</KBD
> 7.2,
and is more fully developed in 7.4 and 8.0.</P
><p class="para"><a class="indexterm" name="AUTOID-20426"></A
><a class="indexterm" name="AUTOID-20429"></A
><kbd class="command">vile</KBD
> has one pre-defined major mode,
<code class="literal">cmode</CODE
>,
for editing C and C++ programs. With <code class="literal">cmode</CODE
>,
you can use <code class="literal">%</CODE
> to match C preprocessor conditionals
(<code class="literal">#if</CODE
>, <code class="literal">#else</CODE
>, and
<code class="literal">#endif</CODE
>).
<kbd class="command">vile</KBD
> will do automatic source code indentation
based on the placement of braces (<code class="literal">{</CODE
>
and <code class="literal">}</CODE
>).
And it will do smart formatting of C comments.
The <code class="literal">tabstop</CODE
> and <code class="literal">shiftwidth</CODE
>
options are set on a per-major-mode basis as well.</P
><p class="para">Using major modes, you can apply the same features to programs
written in other languages. This example, courtesy of<a class="indexterm" name="AUTOID-20444"></A
>
Tom Dickey, defines a new major mode, <code class="literal">shmode</CODE
>,
for editing Bourne shell scripts.
(This is useful for any Bourne-style shell, such as
<kbd class="command">ksh</KBD
>, <kbd class="command">bash</KBD
>, or
<kbd class="command">zsh</KBD
>.)</P
><blockquote class="screen"><pre class="screen">define-mode sh
set shsuf &quot;\.sh$&quot;
set shpre &quot;^#!\\s*\/.*sh\\&gt;$&quot;
define-submode sh comment-prefix &quot;^\\s*/[:#]&quot;
define-submode sh comments &quot;^\\s*/\\?[:#]\\s+/\\?\\s*$&quot;
define-submode sh fence-if   &quot;^\\s*\\&lt;if\\&gt;&quot;
define-submode sh fence-elif &quot;^\\s*\\&lt;elif\\&gt;&quot;
define-submode sh fence-else &quot;^\\s*\\&lt;else\\&gt;&quot;
define-submode sh fence-fi   &quot;^\\s*\\&lt;fi\\&gt;&quot;</PRE
></BLOCKQUOTE
><p class="para">The <code class="literal">shsuf</CODE
> (shell suffix) variable describes the
file name suffix that indicates a file is a shell script.
The <code class="literal">shpre</CODE
> (shell preamble) variable describes a
first line of the file that indicates that the file contains
shell code.
The <code class="literal">define-submode</CODE
> commands then add options
that apply only to buffers where the corresponding major mode is
set. The examples here set up the smart comment formatting
and the smart <code class="literal">%</CODE
> command matching for shell programs.</P
></DIV
><div class="sect2"><h3 class="sect2"><a class="title" name="VI6-CH-12-SECT-10.3">12.10.3 The Procedure Language</A
></H3
><p class="para"><a class="indexterm" name="AUTOID-20459"></A
><a class="indexterm" name="AUTOID-20461"></A
><kbd class="command">vile</KBD
>'s procedure language is almost
unchanged from that of MicroEMACS.
Comments begin with a semi-colon or a double quote character.
Environment variable names (editor options) start with a
<code class="literal">$</CODE
>, user variable names start with <code class="literal">%</CODE
>.
A number of built-in functions exist for doing comparisons and
testing conditions; their names all begin with <code class="literal">&amp;</CODE
>.
Flow control commands and certain others begin with <code class="literal">~</CODE
>.
An <code class="literal">@</CODE
> with a string prompts the user for input, and
the user's answer is returned.
This rather whimsical example from the <i class="filename">macros.doc</I
>
file should give you a taste of the language's flavor:</P
><blockquote class="screen"><pre class="screen">~if &amp;sequal %curplace &quot;timespace vortex&quot;
	insert-string &quot;First, rematerialize\n&quot;
~endif
~if &amp;sequal %planet &quot;earth&quot;     ;If we have landed on earth...
	~if &amp;sequal %time &quot;late 20th century&quot;  ;and we are then
		write-message &quot;Contact U.N.I.T.&quot;
	~else
		insert-string &quot;Investigate the situation....\n&quot;
		insert-string &quot;(SAY 'stay here Sara')\n&quot;
	~endif
~elseif &amp;sequal %planet &quot;luna&quot;  ;If we have landed on our neighbor...
	write-message &quot;Keep the door closed&quot;
~else
	setv %conditions @&quot;Atmosphere conditions outside? &quot;
	~if &amp;sequal %conditions &quot;safe&quot;
		insert-string &amp;cat &quot;Go outside......&quot; &quot;\n&quot;
		insert-string &quot;lock the door\n&quot;
	~else
		insert-string &quot;Dematerialize..try somewhen else&quot;
		newline
	~endif
~endif</PRE
></BLOCKQUOTE
><p class="para">You can store these procedures into a numbered macro, or
give them names that can be bound to keystrokes.
The above procedure is most useful when using the Tardis
<kbd class="command">vile</KBD
> port. :-)</P
><p class="para">This more realistic example from Paul Fox
runs <kbd class="command">grep</KBD
>, searching for the word under the cursor in all C
source files. It then puts the results in a buffer named after the word,
and sets things up so that the built-in error finder (<code class="literal">^X ^X</CODE
>)
will use this output as its list of lines to visit.
Finally, the macro is bound to <code class="literal">^A g</CODE
>.
The <code class="literal">~force</CODE
> command allows the following command
to fail without generating an error message:</P
><blockquote class="screen"><pre class="screen">14 store-macro
	set-variable %grepfor $identifier
	edit-file &amp;cat &quot;!egrep -n &quot; &amp;cat %grepfor &quot; *.[ch]&quot;
	~force rename-buffer %grepfor
	error-buffer $cbufname
~endm
bind-key execute-macro-14 ^A-g</PRE
></BLOCKQUOTE
><p class="para"><a class="indexterm" name="AUTOID-20481"></A
><a class="indexterm" name="AUTOID-20483"></A
>Finally, the <code class="literal">read-hook</CODE
> and <code class="literal">write-hook</CODE
>
variables can be set to names of procedures to run after reading and
before writing a file, respectively.
This allows you to do things similar to pre- and post-operation
files in <kbd class="command">elvis</KBD
> and the autocommand
facility in <kbd class="command">vim</KBD
>.</P
><p class="para">The language is quite capable, including flow control and
comparison features, and variables that provide access to a large
amount of <kbd class="command">vile</KBD
>'s internal state.
The <i class="filename">macros.doc</I
> file in the <kbd class="command">vile</KBD
>
distribution describes the language in detail.</P
></DIV
><div class="sect2"><h3 class="sect2"><a class="title" name="VI6-CH-12-SECT-10.4">12.10.4 Miscellaneous Small Features</A
></H3
><p class="para">Several other, smaller features are worth mentioning:</P
><dl class="variablelist"><dt class="term">Piping into <kbd class="command">vile</KBD
></DT
><dd class="listitem"><p class="para"><a class="indexterm" name="AUTOID-20502"></A
>If you make <kbd class="command">vile</KBD
> the last command in a
pipeline, it will create a buffer named
<code class="literal">[Standard Input]</CODE
> and edit that buffer for you.
This is perhaps the &quot;pager to end all pagers.&quot;</P
></DD
><dt class="term">Editing DOS files</DT
><dd class="listitem"><p class="para">When set to true, the<a class="indexterm" name="AUTOID-20510"></A
>
<code class="literal">dos</CODE
> option causes <kbd class="command">vile</KBD
>
to strip carriage returns at the end of a line in files when reading,
and to write them back out again.
This makes it easy to edit DOS files on a UNIX or Linux system.</P
></DD
><dt class="term">Text reformatting</DT
><dd class="listitem"><p class="para"><a class="indexterm" name="AUTOID-20518"></A
><a class="indexterm" name="AUTOID-20520"></A
>The <code class="literal">^A f</CODE
> command reformats text, performing
word wrapping on selected text. It understands C and shell
comments (lines with a leading <code class="literal">*</CODE
> or <code class="literal">#</CODE
>)
and quoted email (a leading <code class="literal">&gt;</CODE
>).
It is similar to the UNIX <kbd class="command">fmt</KBD
> command, but
faster.</P
></DD
><dt class="term">Formatting the information line</DT
><dd class="listitem"><p class="para">The <code class="literal">modeline-format</CODE
> variable is a string<a class="indexterm" name="AUTOID-20533"></A
>
which controls the way <kbd class="command">vile</KBD
> formats the
mode line. This is the line at the bottom of each window that
describes the buffer's status, such as its name, current major
mode, modification status, insert versus command mode, and so on.</P
><p class="para">The string consists of <code class="literal">printf</CODE
>(3)
style percent-sequences. For example, <code class="literal">%b</CODE
>
for the buffer name, <code class="literal">%m</CODE
> for the
major mode, and <code class="literal">%l</CODE
> for the line number if
<code class="literal">ruler</CODE
> has been set.
Characters in the string which are not part of a format specifier
are output verbatim.</P
></DD
></DL
><p class="para"><kbd class="command">vile</KBD
> has many other features.
The <kbd class="command">vi</KBD
> finger-feel makes it easy to move to.
The programmability provides flexibility, and its interactive
nature and use of defaults is perhaps friendlier for the novice
than traditional <kbd class="command">vi</KBD
>.</P
></DIV
><a class="indexterm" name="AUTOID-20546"></A
></DIV
><div class="htmlnav"><p></P
><hr align="LEFT" width="515" title="footer"><table width="515" border="0" cellspacing="0" cellpadding="0"><tr><td align="LEFT" valign="TOP" width="172"><a class="SECT1" href="ch12_09.htm" webstripperlinkwas="ch12_09.htm" title="12.9 Programming Assistance"><img src="../gifs/txtpreva.gif" webstripperlinkwas="../gifs/txtpreva.gif" alt="Previous: 12.9 Programming Assistance" border="0"></A
></TD
><td align="CENTER" valign="TOP" width="171"><a class="book" href="index.htm" webstripperlinkwas="http://www.ms.itb.ac.id/buku/unix-bookshelf/vi/index.htm" title="Learning the vi Editor"><img src="../gifs/txthome.gif" webstripperlinkwas="../gifs/txthome.gif" alt="Learning the vi Editor" border="0"></A
></TD
><td align="RIGHT" valign="TOP" width="172"><a class="SECT1" href="ch12_11.htm" webstripperlinkwas="ch12_11.htm" title="12.11 Sources and Supported Operating Systems"><img src="../gifs/txtnexta.gif" webstripperlinkwas="../gifs/txtnexta.gif" alt="Next: 12.11 Sources and Supported Operating Systems" border="0"></A
></TD
></TR
><tr><td align="LEFT" valign="TOP" width="172">12.9 Programming Assistance</TD
><td align="CENTER" valign="TOP" width="171"><a class="index" href="index/idx_0.htm" webstripperlinkwas="index/idx_0.htm" title="Book Index"><img src="../gifs/index.gif" webstripperlinkwas="../gifs/index.gif" alt="Book Index" border="0"></A
></TD
><td align="RIGHT" valign="TOP" width="172">12.11 Sources and Supported Operating Systems</TD
></TR
></TABLE
><hr align="LEFT" width="515" title="footer"><img src="../gifs/smnavbar.gif" webstripperlinkwas="../gifs/smnavbar.gif" usemap="#map" border="0" alt="The UNIX CD Bookshelf Navigation"><map name="map"><area shape="RECT" coords="0,0,73,21" href="../index.html" webstripperlinkwas="http://www.ms.itb.ac.id/buku/unix-bookshelf/index.html" alt="The UNIX CD Bookshelf"><area shape="RECT" coords="74,0,163,21" href="../upt/index.htm" webstripperlinkwas="http://www.ms.itb.ac.id/buku/unix-bookshelf/upt/index.htm" alt="UNIX Power Tools"><area shape="RECT" coords="164,0,257,21" href="../unixnut/index.htm" webstripperlinkwas="http://www.ms.itb.ac.id/buku/unix-bookshelf/unixnut/index.htm" alt="UNIX in a Nutshell"><area shape="RECT" coords="258,0,321,21" href="index.htm" webstripperlinkwas="http://www.ms.itb.ac.id/buku/unix-bookshelf/vi/index.htm" alt="Learning the vi Editor"><area shape="RECT" coords="322,0,378,21" href="../sedawk/index.htm" webstripperlinkwas="http://www.ms.itb.ac.id/buku/unix-bookshelf/sedawk/index.htm" alt="sed &amp; awk"><area shape="RECT" coords="379,0,438,21" href="../ksh/index.htm" webstripperlinkwas="http://www.ms.itb.ac.id/buku/unix-bookshelf/ksh/index.htm" alt="Learning the Korn Shell"><area shape="RECT" coords="439,0,514,21" href="../lrnunix/index.htm" webstripperlinkwas="http://www.ms.itb.ac.id/buku/unix-bookshelf/lrnunix/index.htm" alt="Learning the UNIX Operating System"></MAP
></DIV
></BODY
></HTML
>

