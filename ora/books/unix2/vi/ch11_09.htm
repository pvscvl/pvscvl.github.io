<html><head><title>[Chapter 11] 11.9 Programming Assistance</TITLE
><meta name="DC.Creator" content="Linda Lamb &amp; Arnold Robbins"><meta name="DC.Date" content="1999-11-23T17:59:05Z"><meta name="DC.Format" content="text/html" scheme="MIME"><meta name="DC.Identifier" content="O'Reilly Unix CDROM-unknown"><meta name="DC.Language" content="en-US"><meta name="DC.Publisher" content="O'Reilly &amp; Associates, Inc."><meta name="DC.Source" content="unknown" scheme="ISBN"><meta name="DC.Subject.Keyword" content="Unix, vi, text, editor, tool"><meta name="DC.Title" content="Learning the vi Editor"><meta name="DC.Type" content="Text.Monograph"><meta name="generator" content="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><link rev="made" href="mailto:online-books@oreilly.com" title="Online Books Comments"><link rel="up" href="ch11_01.htm" webstripperlinkwas="ch11_01.htm" title="11. vim&nbsp;-- vi Improved"><link rel="prev" href="ch11_08.htm" webstripperlinkwas="ch11_08.htm" title="11.8 Improved Editing Facilities"><link rel="next" href="ch11_10.htm" webstripperlinkwas="ch11_10.htm" title="11.10 Interesting Features"></HEAD
><body bgcolor="#FFFFFF" text="#000000"><div class="htmlnav"><h1><img src="gifs/smbanner.gif" webstripperlinkwas="gifs/smbanner.gif" alt="Learning the vi Editor" usemap="#srchmap" border="0"></H1
><map name="srchmap"><area shape="RECT" coords="0,0,466,65" href="index.htm" webstripperlinkwas="http://www.ms.itb.ac.id/buku/unix-bookshelf/vi/index.htm" alt="Learning the vi Editor"><area shape="RECT" coords="467,0,514,18" href="jobjects/fsearch.htm" webstripperlinkwas="jobjects/fsearch.htm" alt="Search this book"></MAP
><table width="515" border="0" cellspacing="0" cellpadding="0"><tr><td align="LEFT" valign="TOP" width="172"><a class="SECT1" href="ch11_08.htm" webstripperlinkwas="ch11_08.htm" title="11.8 Improved Editing Facilities"><img src="../gifs/txtpreva.gif" webstripperlinkwas="../gifs/txtpreva.gif" alt="Previous: 11.8 Improved Editing Facilities" border="0"></A
></TD
><td align="CENTER" valign="TOP" width="171"><b><font face="ARIEL,HELVETICA,HELV,SANSERIF" size="-1"><a class="chapter" rel="up" href="ch11_01.htm" webstripperlinkwas="ch11_01.htm" title="11. vim&nbsp;-- vi Improved">Chapter 11<br>vim&nbsp;-- vi Improved</A
></FONT
></B
></TD
><td align="RIGHT" valign="TOP" width="172"><a class="SECT1" href="ch11_10.htm" webstripperlinkwas="ch11_10.htm" title="11.10 Interesting Features"><img src="../gifs/txtnexta.gif" webstripperlinkwas="../gifs/txtnexta.gif" alt="Next: 11.10 Interesting Features" border="0"></A
></TD
></TR
></TABLE
>&nbsp;<hr align="LEFT" width="515" title="footer"></DIV
><div class="SECT1"><h2 class="sect1"><a class="title" name="VI6-CH-11-SECT-9">11.9 Programming Assistance</A
></H2
><a class="indexterm" name="CH11.PROG1"></A
><a class="indexterm" name="CH11.PROG2"></A
><a class="indexterm" name="CH11.PROG3"></A
><p class="para"><em class="emphasis">vim</EM
> has extensive facilities for both the edit-compile-debug
cycle and syntax highlighting.</P
><div class="sect2"><h3 class="sect2"><a class="title" name="VI6-CH-11-SECT-9.1">11.9.1 Edit-Compile Speedup</A
></H3
><p class="para"><a class="indexterm" name="AUTOID-17377"></A
><a class="indexterm" name="AUTOID-17381"></A
><a class="indexterm" name="AUTOID-17384"></A
>The facilities in <kbd class="command">vim</KBD
> were inspired by
the &quot;quick fix&quot; mode of the Manx Aztec C compiler
for the Amiga.
In fact, the <kbd class="command">vim</KBD
> documentation refers to this
feature as &quot;quick fix&quot; mode.
The features are quite flexible, allowing you to
tailor them to your programming environment (see <a class="xref" href="#VI6-CH-11-TAB-12">Table 11.12</A
>).</P
><br><table class="table" border="1" cellpadding="3"><caption class="table"><a class="title" name="VI6-CH-11-TAB-12">Table 11.12: vim Program Development Commands</A
></CAPTION
><thead class="thead"><tr class="row" valign="TOP"><th class="entry" align="LEFT" rowspan="1" colspan="1">Command</TH
><th class="entry" align="LEFT" rowspan="1" colspan="1">Function</TH
></TR
></THEAD
><tbody class="tbody"><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><code class="literal">mak</CODE
>[<code class="literal">e</CODE
>] [<code class="replaceable"><i>arguments</I
></CODE
>]</TD
><td class="entry" rowspan="1" colspan="1"><p class="para"><em class="emphasis"></EM
>Run <kbd class="command">make</KBD
>, based<a class="indexterm" name="AUTOID-17409"></A
>
on the settings of several options as described below, then go to the
location of the first error.</P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><code class="literal">cf</CODE
>[<code class="literal">ile</CODE
>][<code class="literal">!</CODE
>] [<code class="replaceable"><i>errorfile</I
></CODE
>]</TD
><td class="entry" rowspan="1" colspan="1"><p class="para"><em class="emphasis"></EM
>Read the error file and<a class="indexterm" name="AUTOID-17420"></A
>
jump to the first error. With an <em class="emphasis">errorfile</EM
>,
use that file for errors and set the <code class="literal">errorfile</CODE
>
option to it.
The <code class="literal">!</CODE
> forces <kbd class="command">vim</KBD
> to move to
another buffer if the current one
has been modified but not saved.</P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><code class="literal">cl</CODE
>[<code class="literal">ist</CODE
>][<code class="literal">!</CODE
>]</TD
><td class="entry" rowspan="1" colspan="1"><p class="para"><em class="emphasis"></EM
>List the errors that
include a filename.<a class="indexterm" name="AUTOID-17434"></A
>
With <code class="literal">!</CODE
>, list all errors.</P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1">[<code class="replaceable"><i>count</I
></CODE
>]<code class="literal">cn</CODE
>[<code class="literal">ext</CODE
>][<code class="literal">!</CODE
>]</TD
><td class="entry" rowspan="1" colspan="1"><p class="para"><em class="emphasis"></EM
>Display the
<em class="emphasis">count</EM
>th next error that
includes a filename. If there are no filenames at<a class="indexterm" name="AUTOID-17447"></A
>
all, go to the <em class="emphasis">count</EM
>th next error.</P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1">[<code class="replaceable"><i>count</I
></CODE
>]<code class="literal">cN</CODE
>[<code class="literal">ext</CODE
>][<code class="literal">!</CODE
>]</TD
><td class="entry" rowspan="1" colspan="1"><p class="para"><em class="emphasis"></EM
>Display the
<em class="emphasis">count</EM
>th previous error that
includes a filename. If there are no filenames at<a class="indexterm" name="AUTOID-17460"></A
>
all, go to the <em class="emphasis">count</EM
>th previous error.</P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1">[<code class="replaceable"><i>count</I
></CODE
>]<code class="literal">cp</CODE
>[<code class="literal">revious</CODE
>][<code class="literal">!</CODE
>]<a class="indexterm" name="AUTOID-17469"></A
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><code class="literal">clast</CODE
>[<code class="literal">!</CODE
>] [<code class="replaceable"><i>n</I
></CODE
>]</TD
><td class="entry" rowspan="1" colspan="1"><p class="para"><em class="emphasis"></EM
>Display error
<em class="emphasis">n</EM
> if supplied.<a class="indexterm" name="AUTOID-17480"></A
>
Otherwise, display the last error.</P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><code class="literal">crewind</CODE
>[<code class="literal">!</CODE
>] [<code class="replaceable"><i>n</I
></CODE
>]</TD
><td class="entry" rowspan="1" colspan="1"><p class="para"><em class="emphasis"></EM
>Display error
<em class="emphasis">n</EM
> if supplied.<a class="indexterm" name="AUTOID-17491"></A
>
Otherwise, display the first error.</P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><code class="literal">cc</CODE
>[<code class="literal">!</CODE
>] [<code class="replaceable"><i>n</I
></CODE
>]</TD
><td class="entry" rowspan="1" colspan="1"><p class="para"><em class="emphasis"></EM
>Displays error <em class="emphasis">n</EM
><a class="indexterm" name="AUTOID-17502"></A
>
if supplied, otherwise redisplays the current error.</P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><code class="literal">cq</CODE
>[<code class="literal">uit</CODE
>]</TD
><td class="entry" rowspan="1" colspan="1"><p class="para"><em class="emphasis"></EM
>Quit with an error code,<a class="indexterm" name="AUTOID-17511"></A
>
so that the compiler will not compile the same file again.
This is intended primarily for use with the Amiga compiler.</P
></TD
></TR
></TBODY
></TABLE
><p class="para">Like <kbd class="command">elvis</KBD
>,
as you move through the errors
<kbd class="command">vim</KBD
> also compensates for changes in the file,
so that when you go to the next error, you end up on the correct
line.</P
><p class="para"><a class="indexterm" name="AUTOID-17517"></A
>The <kbd class="command">vim</KBD
> options that control the <code class="literal">:make</CODE
>
command are presented in
<a class="xref" href="#VI6-CH-11-TAB-13">Table 11.13</A
>.</P
><br><table class="table" border="1" cellpadding="3"><caption class="table"><a class="title" name="VI6-CH-11-TAB-13">Table 11.13: vim Program Development Options</A
></CAPTION
><thead class="thead"><tr class="row" valign="TOP"><th class="entry" align="LEFT" rowspan="1" colspan="1">Option</TH
><th class="entry" align="LEFT" rowspan="1" colspan="1">Value</TH
><th class="entry" align="LEFT" rowspan="1" colspan="1">Function</TH
></TR
></THEAD
><tbody class="tbody"><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><code class="literal">shell</CODE
></TD
><td class="entry" rowspan="1" colspan="1"><code class="literal">/bin/sh</CODE
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para"><em class="emphasis"></EM
>The shell to use to execute<a class="indexterm" name="AUTOID-17542"></A
>
the command for rebuilding your program.</P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><code class="literal">makeprg</CODE
></TD
><td class="entry" rowspan="1" colspan="1"><code class="literal">make</CODE
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para"><em class="emphasis"></EM
>The program that will actually<a class="indexterm" name="AUTOID-17552"></A
>
handle all the recompilation.</P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><code class="literal">shellpipe</CODE
></TD
><td class="entry" rowspan="1" colspan="1"><code class="literal">2&gt;&amp;1| tee</CODE
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para"><em class="emphasis"></EM
>Whatever is needed to cause
the shell to save both standard output and standard error<a class="indexterm" name="AUTOID-17562"></A
>
from the compilation in the error file.</P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><code class="literal">makeef</CODE
></TD
><td class="entry" rowspan="1" colspan="1"><code class="literal">/tmp/vim##.err</CODE
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para"><em class="emphasis"></EM
>The name of a file which will
contain the compiler output. The <code class="literal">##</CODE
> causes<a class="indexterm" name="AUTOID-17573"></A
>
<kbd class="command">vim</KBD
> to create unique filenames.</P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><code class="literal">errorformat</CODE
></TD
><td class="entry" rowspan="1" colspan="1"><code class="literal">%f:%l:\ %m</CODE
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para"><em class="emphasis"></EM
>A description of what<a class="indexterm" name="AUTOID-17584"></A
>
error messages from the compiler look like. This example
value is for GCC, the GNU C compiler.</P
></TD
></TR
></TBODY
></TABLE
><p class="para">When you execute <code class="literal">:make</CODE
>,
<kbd class="command">vim</KBD
> constructs a command by concatenating
the various pieces described above.
Any arguments you supply are passed to <kbd class="command">make</KBD
>
in the appropriate place.
It then echoes this command to your screen.
For example, if you type
<code class="literal">:make -k</CODE
>, you might see something like this:</P
><blockquote class="screen"><pre class="screen">:!make -k 2&gt;&amp;1| tee /tmp/vim34215.err
...</PRE
></BLOCKQUOTE
><p class="para">By using the <kbd class="command">tee</KBD
>(1) program, the output from
<kbd class="command">make</KBD
> and the compiler is saved in the error file
(<i class="filename">/tmp/vim34215.err</I
>), and also sent to standard
output, in this case your screen.</P
><p class="para">When the <kbd class="command">make</KBD
> finishes, <kbd class="command">vim</KBD
> reads
the error file, and goes to the location of the first error.
It uses the value of the <code class="literal">errorformat</CODE
> option
to parse the contents of the error file, in order to find file
names and line numbers.
(The format of this variable is described in full in
<code class="literal">:help errorformat</CODE
>.)
You can then use the <code class="literal">:cc</CODE
>
command to see the error messages, and the <code class="literal">:cnext</CODE
>
command to move to the next error.</P
></DIV
><div class="sect2"><h3 class="sect2"><a class="title" name="VI6-CH-11-SECT-9.2">11.9.2 Syntax Highlighting</A
></H3
><p class="para"><a class="indexterm" name="AUTOID-17606"></A
><a class="indexterm" name="AUTOID-17609"></A
><a class="indexterm" name="AUTOID-17613"></A
>Highlighting in <kbd class="command">vim</KBD
> is based primarily on colors.
To enable syntax highlighting, put <code class="literal">syntax on</CODE
>
into your <i class="filename">.vimrc</I
> file.
This will cause <kbd class="command">vim</KBD
> to read<a class="indexterm" name="AUTOID-17621"></A
>
the <i class="filename">syntax.vim</I
> file, which defines the default
highlight coloring and then sets things up to use highlighting
appropriate to each language.</P
><p class="para"><kbd class="command">vim</KBD
> has a very powerful sub-language for
defining syntax highlighting. The <i class="filename">syntax.txt</I
>
help file in <kbd class="command">vim</KBD
> 5.1 that describes it
is over 1,500 lines long. Therefore, we won't attempt
to give all the details here. Instead, the sample file
below should give you some taste for what <kbd class="command">vim</KBD
> can
do. The example consists of portions of the syntax file for Awk:</P
><blockquote class="screen"><pre class="screen">&quot; Vim syntax file
&quot; Language:	awk, nawk, gawk, mawk
&quot; Maintainer:	Antonio Colombo &lt;antonio.colombo@jrc.org&gt;
&quot; Last change:	1997 November 29

&quot; Remove any old syntax stuff hanging around
syn clear

&quot; A bunch of useful Awk keywords
syn keyword awkStatement        break continue delete exit
...

syn keyword awkFunction         atan2 close cos exp int log rand sin \
                                sqrt srand
...

syn keyword awkConditional      if else
syn keyword awkRepeat           while for do

syn keyword awkPatterns         BEGIN END
syn keyword awkVariables        ARGC ARGV FILENAME FNR FS NF NR
...

&quot; Octal format character.
syn match   awkSpecialCharacter contained &quot;\\[0-7]\{1,3\}&quot;
&quot; Hex   format character.
syn match   awkSpecialCharacter contained &quot;\\x[0-9A-Fa-f]\+&quot;

syn match   awkFieldVars        &quot;\$[0-9]\+&quot;

syn match   awkCharClass        contained &quot;\[:[^:\]]*:\]&quot;
syn match   awkRegExp	contained &quot;/\^&quot;ms=s+1
syn match   awkRegExp	contained &quot;\$/&quot;me=e-1
syn match   awkRegExp	contained &quot;[?.*{}|+]&quot;
...

&quot; Numbers, allowing signs (both -, and +)
&quot; Integer number.
syn match  awkNumber            &quot;[+-]\=\&lt;[0-9]\+\&gt;&quot;
&quot; Floating point number.
syn match  awkFloat             &quot;[+-]\=\&lt;[0-9]\+\.[0-9]+\&gt;&quot;
...

syn match  awkComment	&quot;#.*&quot; contains=awkTodo

if !exists(&quot;did_awk_syntax_inits&quot;)
  let did_awk_syntax_inits = 1
  &quot; The default methods for highlighting.  Can be overridden later
  hi link awkConditional        Conditional
  hi link awkFunction           Function
  hi link awkRepeat             Repeat
  hi link awkStatement          Statement
  ...
  hi link awkNumber             Number
  hi link awkFloat              Float
  ...

  hi link awkComment            Comment
  ...
endif

let b:current_syntax = &quot;awk&quot;</PRE
></BLOCKQUOTE
><p class="para">The file above uses <code class="literal">syntax keyword</CODE
> to give names
to certain classes of keywords (such as real Awk keywords and built-in
functions), and <code class="literal">syntax match</CODE
>
to give names to regular expressions that match certain kinds of
objects (such as numbers).
Then the <code class="literal">hi link</CODE
> statements link the named classes
of objects to the predefined highlighting conventions.</P
><p class="para">The <i class="filename">syntax.vim</I
> file predefines the standard
conventions, with a number of lines like these:</P
><blockquote class="screen"><pre class="screen">hi Comment	term=bold ctermfg=Cyan guifg=#80a0ff
hi Constant	term=underline ctermfg=Magenta guifg=#ffa0a0
hi Special	term=bold ctermfg=LightRed guifg=Orange
hi Identifier	term=underline ctermfg=DarkCyan guifg=#40ffff
...</PRE
></BLOCKQUOTE
><p class="para">The first argument defines the class, and the rest define what kind
of highlighting to do on what kind of terminal. <code class="literal">term</CODE
>
is for a normal terminal, <code class="literal">cterm</CODE
> is for a color
terminal (in this case, the ForeGround color), and <code class="literal">gui</CODE
>
is for <kbd class="command">vim</KBD
>'s GUI interface.</P
><p class="para">In <kbd class="command">vim</KBD
>, the syntax colors are global
attributes. Changing the <code class="literal">Comment</CODE
> color
changes the color for all comments in all windows, no
matter what programming language you're editing.</P
><p class="para">Since the syntax descriptions use attribute linking, you can
make language-specific changes. For example, to change the comment
color for Awk, you can define attributes for <code class="literal">awkComment</CODE
>,
like this:</P
><blockquote class="screen"><pre class="screen">hi awkComment guifg=Green</PRE
></BLOCKQUOTE
><p class="para"><kbd class="command">vim</KBD
> comes with a large number of syntax descriptions
for different languages. The coloring for Awk is
slightly psychedelic (lots of red and pink), although the coloring
for context diffs is actually rather pleasant,
as is the color scheme for UNIX mailbox files.
The HTML mode is also pretty interesting.
Overall, it's quite a lot of fun to use.</P
></DIV
><a class="indexterm" name="AUTOID-17650"></A
><a class="indexterm" name="AUTOID-17651"></A
><a class="indexterm" name="AUTOID-17652"></A
></DIV
><div class="htmlnav"><p></P
><hr align="LEFT" width="515" title="footer"><table width="515" border="0" cellspacing="0" cellpadding="0"><tr><td align="LEFT" valign="TOP" width="172"><a class="SECT1" href="ch11_08.htm" webstripperlinkwas="ch11_08.htm" title="11.8 Improved Editing Facilities"><img src="../gifs/txtpreva.gif" webstripperlinkwas="../gifs/txtpreva.gif" alt="Previous: 11.8 Improved Editing Facilities" border="0"></A
></TD
><td align="CENTER" valign="TOP" width="171"><a class="book" href="index.htm" webstripperlinkwas="http://www.ms.itb.ac.id/buku/unix-bookshelf/vi/index.htm" title="Learning the vi Editor"><img src="../gifs/txthome.gif" webstripperlinkwas="../gifs/txthome.gif" alt="Learning the vi Editor" border="0"></A
></TD
><td align="RIGHT" valign="TOP" width="172"><a class="SECT1" href="ch11_10.htm" webstripperlinkwas="ch11_10.htm" title="11.10 Interesting Features"><img src="../gifs/txtnexta.gif" webstripperlinkwas="../gifs/txtnexta.gif" alt="Next: 11.10 Interesting Features" border="0"></A
></TD
></TR
><tr><td align="LEFT" valign="TOP" width="172">11.8 Improved Editing Facilities</TD
><td align="CENTER" valign="TOP" width="171"><a class="index" href="index/idx_0.htm" webstripperlinkwas="index/idx_0.htm" title="Book Index"><img src="../gifs/index.gif" webstripperlinkwas="../gifs/index.gif" alt="Book Index" border="0"></A
></TD
><td align="RIGHT" valign="TOP" width="172">11.10 Interesting Features</TD
></TR
></TABLE
><hr align="LEFT" width="515" title="footer"><img src="../gifs/smnavbar.gif" webstripperlinkwas="../gifs/smnavbar.gif" usemap="#map" border="0" alt="The UNIX CD Bookshelf Navigation"><map name="map"><area shape="RECT" coords="0,0,73,21" href="../index.html" webstripperlinkwas="http://www.ms.itb.ac.id/buku/unix-bookshelf/index.html" alt="The UNIX CD Bookshelf"><area shape="RECT" coords="74,0,163,21" href="../upt/index.htm" webstripperlinkwas="http://www.ms.itb.ac.id/buku/unix-bookshelf/upt/index.htm" alt="UNIX Power Tools"><area shape="RECT" coords="164,0,257,21" href="../unixnut/index.htm" webstripperlinkwas="http://www.ms.itb.ac.id/buku/unix-bookshelf/unixnut/index.htm" alt="UNIX in a Nutshell"><area shape="RECT" coords="258,0,321,21" href="index.htm" webstripperlinkwas="http://www.ms.itb.ac.id/buku/unix-bookshelf/vi/index.htm" alt="Learning the vi Editor"><area shape="RECT" coords="322,0,378,21" href="../sedawk/index.htm" webstripperlinkwas="http://www.ms.itb.ac.id/buku/unix-bookshelf/sedawk/index.htm" alt="sed &amp; awk"><area shape="RECT" coords="379,0,438,21" href="../ksh/index.htm" webstripperlinkwas="http://www.ms.itb.ac.id/buku/unix-bookshelf/ksh/index.htm" alt="Learning the Korn Shell"><area shape="RECT" coords="439,0,514,21" href="../lrnunix/index.htm" webstripperlinkwas="http://www.ms.itb.ac.id/buku/unix-bookshelf/lrnunix/index.htm" alt="Learning the UNIX Operating System"></MAP
></DIV
></BODY
></HTML
>

