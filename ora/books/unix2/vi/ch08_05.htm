<html><head><title>[Chapter 8] 8.5 Enhanced Tags</TITLE
><meta name="DC.Creator" content="Linda Lamb &amp; Arnold Robbins"><meta name="DC.Date" content="1999-11-23T17:57:27Z"><meta name="DC.Format" content="text/html" scheme="MIME"><meta name="DC.Identifier" content="O'Reilly Unix CDROM-unknown"><meta name="DC.Language" content="en-US"><meta name="DC.Publisher" content="O'Reilly &amp; Associates, Inc."><meta name="DC.Source" content="unknown" scheme="ISBN"><meta name="DC.Subject.Keyword" content="Unix, vi, text, editor, tool"><meta name="DC.Title" content="Learning the vi Editor"><meta name="DC.Type" content="Text.Monograph"><meta name="generator" content="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><link rev="made" href="mailto:online-books@oreilly.com" title="Online Books Comments"><link rel="up" href="ch08_01.htm" webstripperlinkwas="ch08_01.htm" title="8. vi Clones Feature Summary"><link rel="prev" href="ch08_04.htm" webstripperlinkwas="ch08_04.htm" title="8.4 Extended Regular Expressions"><link rel="next" href="ch08_06.htm" webstripperlinkwas="ch08_06.htm" title="8.6 Improved Facilities"></HEAD
><body bgcolor="#FFFFFF" text="#000000"><div class="htmlnav"><h1><img src="gifs/smbanner.gif" webstripperlinkwas="gifs/smbanner.gif" alt="Learning the vi Editor" usemap="#srchmap" border="0"></H1
><map name="srchmap"><area shape="RECT" coords="0,0,466,65" href="index.htm" webstripperlinkwas="http://www.ms.itb.ac.id/buku/unix-bookshelf/vi/index.htm" alt="Learning the vi Editor"><area shape="RECT" coords="467,0,514,18" href="jobjects/fsearch.htm" webstripperlinkwas="jobjects/fsearch.htm" alt="Search this book"></MAP
><table width="515" border="0" cellspacing="0" cellpadding="0"><tr><td align="LEFT" valign="TOP" width="172"><a class="SECT1" href="ch08_04.htm" webstripperlinkwas="ch08_04.htm" title="8.4 Extended Regular Expressions"><img src="../gifs/txtpreva.gif" webstripperlinkwas="../gifs/txtpreva.gif" alt="Previous: 8.4 Extended Regular Expressions" border="0"></A
></TD
><td align="CENTER" valign="TOP" width="171"><b><font face="ARIEL,HELVETICA,HELV,SANSERIF" size="-1"><a class="chapter" rel="up" href="ch08_01.htm" webstripperlinkwas="ch08_01.htm" title="8. vi Clones Feature Summary">Chapter 8<br>vi Clones Feature Summary</A
></FONT
></B
></TD
><td align="RIGHT" valign="TOP" width="172"><a class="SECT1" href="ch08_06.htm" webstripperlinkwas="ch08_06.htm" title="8.6 Improved Facilities"><img src="../gifs/txtnexta.gif" webstripperlinkwas="../gifs/txtnexta.gif" alt="Next: 8.6 Improved Facilities" border="0"></A
></TD
></TR
></TABLE
>&nbsp;<hr align="LEFT" width="515" title="footer"></DIV
><div class="SECT1"><h2 class="sect1"><a class="title" name="VI6-CH-8-SECT-5">8.5 Enhanced Tags</A
></H2
><p class="para"><a class="indexterm" name="CH08.CTAGS1"></A
><a class="indexterm" name="CH08.CTAGS2"></A
><a class="indexterm" name="CH08.CTAGS3"></A
><a class="indexterm" name="CH08.CTAGS4"></A
><a class="indexterm" name="CH08.CTAGS5"></A
><a class="indexterm" name="CH08.CTAGS6"></A
><a class="indexterm" name="CH08.CTAGS7"></A
>The &quot;Exuberant <kbd class="command">ctags</KBD
>&quot; program
is a <kbd class="command">ctags</KBD
> clone that is considerably more capable
than UNIX <kbd class="command">ctags</KBD
>.
It produces an
extended <i class="filename">tags</I
> file format that makes tag
searching and matching a more flexible and capable process.
We describe it first, since it is
supported by several of the <kbd class="command">vi</KBD
> clones.</P
><p class="para">This section also describes tag stacks:
the ability to save multiple
locations visited with the <code class="literal">:tag</CODE
> or
<code class="literal">^]</CODE
> commands.
All of the clones provide tag stacking.</P
><div class="sect2"><h3 class="sect2"><a class="title" name="VI6-CH-8-SECT-5.1">8.5.1 Exuberant ctags</A
></H3
><p class="para">The &quot;Exuberant <kbd class="command">ctags</KBD
>&quot;
program was written<a class="indexterm" name="AUTOID-10475"></A
>
by Darren Hiebert. Its home page is
<i class="systemitem.sitename">http://home.hiwaay.net/~darren/ctags/</I
>.
As of this writing, the current version is 2.0.3.
The following list of the program's features is
adapted from the <i class="filename">README</I
>
file in the <kbd class="command">ctags</KBD
> distribution:</P
><ul class="itemizedlist"><li class="listitem"><p class="para">It is capable of generating tags for <em class="emphasis">all</EM
> types
of C and C++ language tags, including class names,
macro definitions,
enum names,
enumerators (values inside an enumeration),
function (method) definitions,
function (method) prototypes/declarations,
structure members and class data members,
struct names,
typedefs,
union names and
variables.</P
></LI
><li class="listitem"><p class="para">It supports both C and C++ code.</P
></LI
><li class="listitem"><p class="para">It is very robust in parsing code and is far less easily fooled by code
containing <code class="literal">#if</CODE
> preprocessor conditional constructs.</P
></LI
><li class="listitem"><p class="para">It can be used to print out a human-readable list of selected objects
found in source files.</P
></LI
><li class="listitem"><p class="para">It supports generation of GNU <kbd class="command">emacs</KBD
>-style
tag files (<i class="filename">etags</I
>).</P
></LI
><li class="listitem"><p class="para">It works on
UNIX, QNX, MS-DOS, Windows 95/NT, OS/2, and the Amiga.
Some precompiled binaries are available on the web site.</P
></LI
></UL
><p class="para">Exuberant <kbd class="command">ctags</KBD
> produces <i class="filename">tags</I
>
files in the form described in the next subsection.</P
></DIV
><div class="sect2"><h3 class="sect2"><a class="title" name="VI6-CH-8-SECT-5.1.2">8.5.2 The New tags Format</A
></H3
><p class="para"><a class="indexterm" name="CH08.TAGS"></A
>Traditionally, a <i class="filename">tags</I
> file has three tab-separated
fields: the tag name (typically an identifier), the source file
containing the tag, and an indication of where to find the identifier.
This indication is either a simple line number, or
a <code class="literal">nomagic</CODE
> search
pattern enclosed either in slashes or question marks.
Furthermore, the <i class="filename">tags</I
> file is always sorted.</P
><p class="para">This is the format generated by the UNIX <kbd class="command">ctags</KBD
> program.
In fact, many versions of <kbd class="command">vi</KBD
> allowed <em class="emphasis">any</EM
>
command in the search pattern field (a rather gaping security hole).
Furthermore, due to an undocumented implementation quirk,
if the line ended with a semicolon and then a double-quote
(<code class="literal">;&quot;</CODE
>), anything following those two
characters would be ignored.
(The double-quote starts a comment, as it does in <i class="filename">.exrc</I
>
files.)</P
><p class="para">The new format is backwards-compatible with the traditional one.
The first three fields are the same: tag, filename, and search pattern.
Exuberant <kbd class="command">ctags</KBD
> only generates search patterns, not
arbitrary commands. Extended attributes are placed after a
separating <code class="literal">;&quot;</CODE
>.
Each attribute is separated from the next by a tab character,
and consists of two colon-separated subfields.
The first subfield is a keyword describing the attribute, the
second is the actual value.
<a class="xref" href="#VI6-CH-8-TAB-2">Table 8.2</A
>
lists the supported keywords.</P
><br><table class="table" border="1" cellpadding="3"><caption class="table"><a class="title" name="VI6-CH-8-TAB-2">Table 8.2: Extended ctags Keywords</A
></CAPTION
><thead class="thead"><tr class="row" valign="TOP"><th class="entry" align="LEFT" rowspan="1" colspan="1">Keyword</TH
><th class="entry" align="LEFT" rowspan="1" colspan="1">Meaning</TH
></TR
></THEAD
><tbody class="tbody"><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1">kind</TD
><td class="entry" rowspan="1" colspan="1"><p class="para"><em class="emphasis"></EM
>The value is a single
letter that indicates the lexical type of
the tag.<a class="indexterm" name="AUTOID-10533"></A
>
It can be <code class="literal">f</CODE
> for a function,
<code class="literal">v</CODE
> for a variable, and so on.
Since the default attribute name is <code class="literal">kind</CODE
>, a solitary
letter can denote the tag's type
(e.g., <code class="literal">f</CODE
> for a function).</P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1">file</TD
><td class="entry" rowspan="1" colspan="1"><p class="para"><em class="emphasis"></EM
>For tags that<a class="indexterm" name="AUTOID-10544"></A
>
are &quot;static&quot;, i.e., local to the file.
The value should be the name of the file.</P
><p class="para">If the value is
given as an empty string (just <code class="literal">file:</CODE
>),
it is understood to be the same as the filename field; this special
case was added partly for the sake of compactness, and partly to
provide an easy way to handle tags files that aren't in the current
directory. The value of the filename field is always relative to the
directory in which the <i class="filename">tags</I
> file
itself resides.</P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1">function</TD
><td class="entry" rowspan="1" colspan="1"><p class="para"><em class="emphasis"></EM
>For local tags.<a class="indexterm" name="AUTOID-10554"></A
>
The value is the name of function in
which they're defined.</P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1">struct</TD
><td class="entry" rowspan="1" colspan="1"><p class="para"><em class="emphasis"></EM
>For fields in a <code class="literal">struct</CODE
>.
The value is the name of the structure.<a class="indexterm" name="AUTOID-10562"></A
></P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1">enum</TD
><td class="entry" rowspan="1" colspan="1"><p class="para"><em class="emphasis"></EM
>For values in an <code class="literal">enum</CODE
>
data type.<a class="indexterm" name="AUTOID-10570"></A
>
The value is the name of
the <code class="literal">enum</CODE
> type.</P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1">class</TD
><td class="entry" rowspan="1" colspan="1"><p class="para"><em class="emphasis"></EM
>For C++ member functions and variables.<a class="indexterm" name="AUTOID-10578"></A
>
The value is the name of the class.</P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1">scope</TD
><td class="entry" rowspan="1" colspan="1"><p class="para"><em class="emphasis"></EM
>Intended mostly for<a class="indexterm" name="AUTOID-10585"></A
>
C++ class member functions. It will usually be
<code class="literal">private</CODE
> for private members
or omitted for public members, so
users can restrict tag searches to only public members.</P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1">arity</TD
><td class="entry" rowspan="1" colspan="1"><p class="para"><em class="emphasis"></EM
>For functions.<a class="indexterm" name="AUTOID-10593"></A
>
The number of arguments.</P
></TD
></TR
></TBODY
></TABLE
><p class="para">If the field does not contain a colon, it is assumed to be of
type <code class="literal">kind</CODE
>.
Here are some examples:</P
><blockquote class="screen"><pre class="screen">ARRAYMAXED      awk.h    427;&quot;   d
AVG_CHAIN_MAX   array.c   38;&quot;   d     file:
array.c         array.c    1;&quot;   F</PRE
></BLOCKQUOTE
><p class="para"><code class="literal">ARRAYMAXED</CODE
> is a C <code class="literal">#define</CODE
> macro
defined in <i class="filename">awk.h</I
>. <code class="literal">AVG_CHAIN_MAX</CODE
>
is also a C macro but it is used only in <i class="filename">array.c</I
>.
The third line is a bit different: it is a tag for the actual source file!
This is generated with the <code class="literal">-i F</CODE
> option to Exuberant
<kbd class="command">ctags</KBD
>, and allows you to give the command
<code class="literal">:tag array.c</CODE
>.  More usefully, you can put the
cursor over a filename and use the <code class="literal">^]</CODE
>
command to go to that file.</P
><p class="para">Within the value part of each attribute, the characters
backslash, tab, carriage return and newline should be
encoded as <code class="literal">\\</CODE
>, <code class="literal">\t</CODE
>,
<code class="literal">\r</CODE
>, and <code class="literal">\n</CODE
>, respectively.</P
><p class="para">Extended <i class="filename">tags</I
> files may have some number of initial
tags that begin with <code class="literal">!_TAG_</CODE
>.
These tags usually sort to the
front of the file, and are useful for identifying which program
created the file.
Here is what Exuberant <kbd class="command">ctags</KBD
> generates:</P
><blockquote class="screen"><pre class="screen">!_TAG_FILE_FORMAT      2                /extended format; ..../
!_TAG_FILE_SORTED      1                /0=unsorted, 1=sorted/
!_TAG_PROGRAM_AUTHOR   Darren Hiebert   /darren@hiebert.com/
!_TAG_PROGRAM_NAME     Exuberant Ctags  //
!_TAG_PROGRAM_URL      http://home.hiwaay.net/~darren/ctags   /.../
!_TAG_PROGRAM_VERSION  2.0.3            /with C++ support/</PRE
></BLOCKQUOTE
><p class="para">Editors may take advantage of these special tags to implement
special features. For example, <kbd class="command">vim</KBD
> pays attention
to the <code class="literal">!_TAG_FILE_SORTED</CODE
> tag and will use a
binary search to search the <i class="filename">tags</I
> file
instead of a linear search if the file is indeed sorted.</P
><p class="para">If you use <i class="filename">tags</I
> files,
we recommend that you get and install Exuberant <kbd class="command">ctags</KBD
>.</P
><a class="indexterm" name="AUTOID-10625"></A
></DIV
><div class="sect2"><h3 class="sect2"><a class="title" name="VI6-CH-8-SECT-5.2">8.5.3 Tag Stacks</A
></H3
><p class="para"><a class="indexterm" name="CH08.STACK1"></A
><a class="indexterm" name="CH08.STACK2"></A
><a class="indexterm" name="CH08.STACK3"></A
><a class="indexterm" name="CH08.STACK4"></A
><a class="indexterm" name="CH08.STACK5"></A
>The <code class="literal">:tag</CODE
> <kbd class="command">ex</KBD
> command and the <code class="literal">^]</CODE
>
<kbd class="command">vi</KBD
> mode command provide a limited means of
finding identifiers, based on the information provided in a
<i class="filename">tags</I
> file.
Each of the clones extends this ability by maintaining a
<em class="emphasis">stack</EM
> of tag locations.
Each time you issue the <code class="literal">:tag</CODE
> <kbd class="command">ex</KBD
>
command, or use the <code class="literal">^]</CODE
> <kbd class="command">vi</KBD
> mode
command, the editor saves the current location before searching
for the specified tag. You may then return to a saved location
using (usually) the <code class="literal">^T</CODE
> command or an
<kbd class="command">ex</KBD
> command.</P
><p class="para">Solaris <kbd class="command">vi</KBD
> tag stacking and an example
are presented below.
The way each clone handles tag stacking is described in
each editor's respective chapter.</P
><div class="sect3"><h4 class="sect3"><a class="title" name="VI6-CH-8-SECT-5.2.1">8.5.3.1 Solaris vi</A
></H4
><p class="para"><a class="indexterm" name="CH08.STACK6A"></A
><a class="indexterm" name="CH08.STACK6B"></A
><a class="indexterm" name="CH08.STACK6C"></A
><a class="indexterm" name="CH08.STACK6D"></A
>Surprisingly enough, the Solaris 2.6 version of <kbd class="command">vi</KBD
>
supports tag stacking. Perhaps not so surprisingly, this
feature is completely undocumented
in the Solaris
<kbd class="command">ex</KBD
>(1) and <kbd class="command">vi</KBD
>(1)
manual pages.
For completeness, we summarize Solaris <kbd class="command">vi</KBD
> tag
stacking in <a class="xref" href="#VI6-CH-8-TAB-3">Table 8.3</A
>, <a class="xref" href="#VI6-CH-8-TAB-4">Table 8.4</A
>, 
and <a class="xref" href="#VI6-CH-8-TAB-5">Table 8.5</A
>. Tag stacking in Solaris
<kbd class="command">vi</KBD
> is quite simple.[<a class="footnote" href="#AUTOID-10679">6</A
>]</P
><blockquote class="footnote"><div class="footnote"><p class="para"><a class="footnote" name="AUTOID-10679">[6]</A
> This information
was discovered based on experimentation. YMMV (your mileage may vary).</P
></DIV
></BLOCKQUOTE
><br><table class="table" border="1" cellpadding="3"><caption class="table"><a class="title" name="VI6-CH-8-TAB-3">Table 8.3: Solaris vi Tag Commands</A
></CAPTION
><thead class="thead"><tr class="row" valign="TOP"><th class="entry" align="LEFT" rowspan="1" colspan="1">Command</TH
><th class="entry" align="LEFT" rowspan="1" colspan="1">Function</TH
></TR
></THEAD
><tbody class="tbody"><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><code class="literal">ta</CODE
>[<code class="literal">g</CODE
>][<code class="literal">!</CODE
>] <code class="replaceable"><i>tagstring</I
></CODE
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para"><em class="emphasis"></EM
>Edit the file containing<a class="indexterm" name="AUTOID-10700"></A
>
<em class="emphasis">tagstring</EM
> as defined in the <i class="filename">tags</I
>
file. The <code class="literal">!</CODE
> forces <kbd class="command">vi</KBD
> to
switch to the new file if the current buffer has been modified
but not saved.</P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><code class="literal">po</CODE
>[<code class="literal">p</CODE
>][<code class="literal">!</CODE
>]</TD
><td class="entry" rowspan="1" colspan="1"><p class="para"><em class="emphasis"></EM
>Pop the tag stack<a class="indexterm" name="AUTOID-10714"></A
>
by one element.</P
></TD
></TR
></TBODY
></TABLE
><br><table class="table" border="1" cellpadding="3"><caption class="table"><a class="title" name="VI6-CH-8-TAB-4">Table 8.4: Solaris vi Command Mode Tag Commands</A
></CAPTION
><thead class="thead"><tr class="row" valign="TOP"><th class="entry" align="LEFT" rowspan="1" colspan="1">Command</TH
><th class="entry" align="LEFT" rowspan="1" colspan="1">Function</TH
></TR
></THEAD
><tbody class="tbody"><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><code class="literal">^]</CODE
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para"><em class="emphasis"></EM
>Look up the location of the identifier
under the cursor in the <i class="filename">tags</I
> file, and move to that
location. If tag stacking is enabled,
the current location is automatically pushed onto the
tag stack.</P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><code class="literal">^T</CODE
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para"><em class="emphasis"></EM
>Return to the previous location<a class="indexterm" name="AUTOID-10739"></A
>
in the tag stack, i.e., pop off one element.</P
></TD
></TR
></TBODY
></TABLE
><br><table class="table" border="1" cellpadding="3"><caption class="table"><a class="title" name="VI6-CH-8-TAB-5">Table 8.5: Solaris vi Options for Tag Management</A
></CAPTION
><thead class="thead"><tr class="row" valign="TOP"><th class="entry" align="LEFT" rowspan="1" colspan="1">Option</TH
><th class="entry" align="LEFT" rowspan="1" colspan="1">Function</TH
></TR
></THEAD
><tbody class="tbody"><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><code class="literal">taglength</CODE
>, <code class="literal">tl</CODE
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para"><em class="emphasis"></EM
>Controls the number of<a class="indexterm" name="AUTOID-10759"></A
><a class="indexterm" name="AUTOID-10761"></A
>
significant characters in a tag
that is to be looked up. The default value of zero indicates that all
characters are significant.</P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><code class="literal">tags</CODE
>, <code class="literal">tagpath</CODE
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para"><em class="emphasis"></EM
>The value is a list of<a class="indexterm" name="AUTOID-10770"></A
><a class="indexterm" name="AUTOID-10772"></A
>
filenames in which to look for tags.
The default value is <code class="literal">&quot;tags /usr/lib/tags&quot;</CODE
>.</P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><code class="literal">tagstack</CODE
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para"><em class="emphasis"></EM
>When set to true,<a class="indexterm" name="AUTOID-10781"></A
>
<kbd class="command">vi</KBD
> stacks each location on the tag stack.
Use <code class="literal">:set notagstack</CODE
> to disable tag stacking.</P
></TD
></TR
></TBODY
></TABLE
><p class="para">To give you a feel for using tag stacks, we present a short
example, using Exuberant <kbd class="command">ctags</KBD
> and <kbd class="command">vim</KBD
>.</P
><p class="para">Suppose you are working with a program that uses the GNU
<em class="emphasis">getopt_long</EM
> function, and that you need
to understand more about it.</P
><p class="para">GNU <em class="emphasis">getopt</EM
> consists of three files,
<i class="filename">getopt.h</I
>, <i class="filename">getopt.c</I
>,
and <i class="filename">getopt1.c</I
>.</P
><p class="para">First, you create the <i class="filename">tags</I
> file, then
you start by editing the main program, found in <i class="filename">main.c</I
>:</P
><blockquote class="screen"><pre class="screen">$ <code class="userinput"><b>ctags *.[ch]</B
></CODE
>
$ <code class="userinput"><b>ls</B
></CODE
>
Makefile   getopt.c   getopt.h   getopt1.c   main.c   tags
$ <code class="userinput"><b>vim main.c</B
></CODE
></PRE
></BLOCKQUOTE
><table class="informaltable" border="1" cellpadding="3"><thead class="thead"><tr class="row" valign="TOP"><th class="entry" align="LEFT" rowspan="1" colspan="1">Keystrokes</TH
><th class="entry" align="LEFT" rowspan="1" colspan="1">Results</TH
></TR
></THEAD
><tbody class="tbody"><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><code class="literal">/getopt</CODE
></TD
><td class="entry" rowspan="1" colspan="1"><img class="graphic" src="figs/vi.0801.gif" webstripperlinkwas="figs/vi.0801.gif" alt="Graphic"><p class="para">Edit <i class="filename">main.c</I
> and move to the call to
<em class="emphasis">getopt_long</EM
>.</P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><code class="literal">^]</CODE
></TD
><td class="entry" rowspan="1" colspan="1"><img class="graphic" src="figs/vi.0802.gif" webstripperlinkwas="figs/vi.0802.gif" alt="Graphic"><p class="para">Do a tag lookup on <em class="emphasis">getopt_long</EM
>.
<kbd class="command">vim</KBD
> moves to <i class="filename">getopt1.c</I
>,
placing the cursor on the definition of <i class="filename">getopt_long</I
>.</P
></TD
></TR
></TBODY
></TABLE
><p class="para">It turns out that <em class="emphasis">getopt_long</EM
>
is a &quot;wrapper&quot; function for
<em class="emphasis">_getopt_internal</EM
>.  You place the
cursor on <em class="emphasis">_getopt_internal</EM
> and do another tag search.</P
><table class="informaltable" border="1" cellpadding="3"><thead class="thead"><tr class="row" valign="TOP"><th class="entry" align="LEFT" rowspan="1" colspan="1">Keystrokes</TH
><th class="entry" align="LEFT" rowspan="1" colspan="1">Results</TH
></TR
></THEAD
><tbody class="tbody"><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><code class="literal">8jf_ ^]</CODE
></TD
><td class="entry" rowspan="1" colspan="1"><img class="graphic" src="figs/vi.0803.gif" webstripperlinkwas="figs/vi.0803.gif" alt="Graphic"><p class="para">You have now moved to <i class="filename">getopt.c</I
>. To find out
more about <code class="literal">struct option</CODE
>, move the cursor
to <em class="emphasis">option</EM
> and do another tag search.</P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><code class="literal">5jfo; ^]</CODE
></TD
><td class="entry" rowspan="1" colspan="1"><img class="graphic" src="figs/vi.0804.gif" webstripperlinkwas="figs/vi.0804.gif" alt="Graphic"><p class="para">The editor moves to the definition of <code class="literal">struct<a class="indexterm" name="AUTOID-10858"></A
>
option</CODE
> in <em class="emphasis">getopt.h</EM
>. You may now look
over the comments explaining how it's used.</P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><code class="literal">:tags</CODE
></TD
><td class="entry" rowspan="1" colspan="1"><img class="graphic" src="figs/vi.0805.gif" webstripperlinkwas="figs/vi.0805.gif" alt="Graphic"><p class="para">The <code class="literal">:tags</CODE
> command in <kbd class="command">vim</KBD
>
displays the tag stack.</P
></TD
></TR
></TBODY
></TABLE
><p class="para">Typing <code class="literal">^T</CODE
> three times would move you back to
<i class="filename">main.c</I
>, where you started. The tag facilities
make it easy to move around as you edit source code.</P
><a class="indexterm" name="AUTOID-10872"></A
><a class="indexterm" name="AUTOID-10873"></A
><a class="indexterm" name="AUTOID-10874"></A
><a class="indexterm" name="AUTOID-10875"></A
></DIV
><a class="indexterm" name="AUTOID-10876"></A
><a class="indexterm" name="AUTOID-10877"></A
><a class="indexterm" name="AUTOID-10878"></A
><a class="indexterm" name="AUTOID-10879"></A
><a class="indexterm" name="AUTOID-10880"></A
></DIV
><a class="indexterm" name="AUTOID-10881"></A
><a class="indexterm" name="AUTOID-10882"></A
><a class="indexterm" name="AUTOID-10883"></A
><a class="indexterm" name="AUTOID-10884"></A
><a class="indexterm" name="AUTOID-10885"></A
><a class="indexterm" name="AUTOID-10886"></A
><a class="indexterm" name="AUTOID-10887"></A
></DIV
><div class="htmlnav"><p></P
><hr align="LEFT" width="515" title="footer"><table width="515" border="0" cellspacing="0" cellpadding="0"><tr><td align="LEFT" valign="TOP" width="172"><a class="SECT1" href="ch08_04.htm" webstripperlinkwas="ch08_04.htm" title="8.4 Extended Regular Expressions"><img src="../gifs/txtpreva.gif" webstripperlinkwas="../gifs/txtpreva.gif" alt="Previous: 8.4 Extended Regular Expressions" border="0"></A
></TD
><td align="CENTER" valign="TOP" width="171"><a class="book" href="index.htm" webstripperlinkwas="http://www.ms.itb.ac.id/buku/unix-bookshelf/vi/index.htm" title="Learning the vi Editor"><img src="../gifs/txthome.gif" webstripperlinkwas="../gifs/txthome.gif" alt="Learning the vi Editor" border="0"></A
></TD
><td align="RIGHT" valign="TOP" width="172"><a class="SECT1" href="ch08_06.htm" webstripperlinkwas="ch08_06.htm" title="8.6 Improved Facilities"><img src="../gifs/txtnexta.gif" webstripperlinkwas="../gifs/txtnexta.gif" alt="Next: 8.6 Improved Facilities" border="0"></A
></TD
></TR
><tr><td align="LEFT" valign="TOP" width="172">8.4 Extended Regular Expressions</TD
><td align="CENTER" valign="TOP" width="171"><a class="index" href="index/idx_0.htm" webstripperlinkwas="index/idx_0.htm" title="Book Index"><img src="../gifs/index.gif" webstripperlinkwas="../gifs/index.gif" alt="Book Index" border="0"></A
></TD
><td align="RIGHT" valign="TOP" width="172">8.6 Improved Facilities</TD
></TR
></TABLE
><hr align="LEFT" width="515" title="footer"><img src="../gifs/smnavbar.gif" webstripperlinkwas="../gifs/smnavbar.gif" usemap="#map" border="0" alt="The UNIX CD Bookshelf Navigation"><map name="map"><area shape="RECT" coords="0,0,73,21" href="../index.html" webstripperlinkwas="http://www.ms.itb.ac.id/buku/unix-bookshelf/index.html" alt="The UNIX CD Bookshelf"><area shape="RECT" coords="74,0,163,21" href="../upt/index.htm" webstripperlinkwas="http://www.ms.itb.ac.id/buku/unix-bookshelf/upt/index.htm" alt="UNIX Power Tools"><area shape="RECT" coords="164,0,257,21" href="../unixnut/index.htm" webstripperlinkwas="http://www.ms.itb.ac.id/buku/unix-bookshelf/unixnut/index.htm" alt="UNIX in a Nutshell"><area shape="RECT" coords="258,0,321,21" href="index.htm" webstripperlinkwas="http://www.ms.itb.ac.id/buku/unix-bookshelf/vi/index.htm" alt="Learning the vi Editor"><area shape="RECT" coords="322,0,378,21" href="../sedawk/index.htm" webstripperlinkwas="http://www.ms.itb.ac.id/buku/unix-bookshelf/sedawk/index.htm" alt="sed &amp; awk"><area shape="RECT" coords="379,0,438,21" href="../ksh/index.htm" webstripperlinkwas="http://www.ms.itb.ac.id/buku/unix-bookshelf/ksh/index.htm" alt="Learning the Korn Shell"><area shape="RECT" coords="439,0,514,21" href="../lrnunix/index.htm" webstripperlinkwas="http://www.ms.itb.ac.id/buku/unix-bookshelf/lrnunix/index.htm" alt="Learning the UNIX Operating System"></MAP
></DIV
></BODY
></HTML
>

