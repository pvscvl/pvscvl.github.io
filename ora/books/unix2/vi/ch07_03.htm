<html><head><title>[Chapter 7] 7.3 Saving Commands </TITLE
><meta name="DC.Creator" content="Linda Lamb &amp; Arnold Robbins"><meta name="DC.Date" content="1999-11-23T17:56:52Z"><meta name="DC.Format" content="text/html" scheme="MIME"><meta name="DC.Identifier" content="O'Reilly Unix CDROM-unknown"><meta name="DC.Language" content="en-US"><meta name="DC.Publisher" content="O'Reilly &amp; Associates, Inc."><meta name="DC.Source" content="unknown" scheme="ISBN"><meta name="DC.Subject.Keyword" content="Unix, vi, text, editor, tool"><meta name="DC.Title" content="Learning the vi Editor"><meta name="DC.Type" content="Text.Monograph"><meta name="generator" content="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><link rev="made" href="mailto:online-books@oreilly.com" title="Online Books Comments"><link rel="up" href="ch07_01.htm" webstripperlinkwas="ch07_01.htm" title="7. Advanced Editing"><link rel="prev" href="ch07_02.htm" webstripperlinkwas="ch07_02.htm" title="7.2 Executing UNIX Commands "><link rel="next" href="ch07_04.htm" webstripperlinkwas="ch07_04.htm" title="7.4 Using ex Scripts "></HEAD
><body bgcolor="#FFFFFF" text="#000000"><div class="htmlnav"><h1><img src="gifs/smbanner.gif" webstripperlinkwas="gifs/smbanner.gif" alt="Learning the vi Editor" usemap="#srchmap" border="0"></H1
><map name="srchmap"><area shape="RECT" coords="0,0,466,65" href="index.htm" webstripperlinkwas="http://www.ms.itb.ac.id/buku/unix-bookshelf/vi/index.htm" alt="Learning the vi Editor"><area shape="RECT" coords="467,0,514,18" href="jobjects/fsearch.htm" webstripperlinkwas="jobjects/fsearch.htm" alt="Search this book"></MAP
><table width="515" border="0" cellspacing="0" cellpadding="0"><tr><td align="LEFT" valign="TOP" width="172"><a class="SECT1" href="ch07_02.htm" webstripperlinkwas="ch07_02.htm" title="7.2 Executing UNIX Commands "><img src="../gifs/txtpreva.gif" webstripperlinkwas="../gifs/txtpreva.gif" alt="Previous: 7.2 Executing UNIX Commands " border="0"></A
></TD
><td align="CENTER" valign="TOP" width="171"><b><font face="ARIEL,HELVETICA,HELV,SANSERIF" size="-1"><a class="chapter" rel="up" href="ch07_01.htm" webstripperlinkwas="ch07_01.htm" title="7. Advanced Editing">Chapter 7<br>Advanced Editing</A
></FONT
></B
></TD
><td align="RIGHT" valign="TOP" width="172"><a class="SECT1" href="ch07_04.htm" webstripperlinkwas="ch07_04.htm" title="7.4 Using ex Scripts "><img src="../gifs/txtnexta.gif" webstripperlinkwas="../gifs/txtnexta.gif" alt="Next: 7.4 Using ex Scripts " border="0"></A
></TD
></TR
></TABLE
>&nbsp;<hr align="LEFT" width="515" title="footer"></DIV
><div class="SECT1"><h2 class="sect1"><a class="title" name="VI6-CH-7-SECT-3">7.3 Saving Commands </A
></H2
><p class="para"><a class="indexterm" name="CH07.COMSAVE1"></A
><a class="indexterm" name="CH07.COMSAVE2"></A
>Often you type the same long phrases over and over in a file.
<kbd class="command">vi</KBD
> and <kbd class="command">ex</KBD
> have a number of different ways of saving long
sequences of commands, both in command mode and in insert mode.
When you call up one of these saved sequences to execute
it, all you do is type a few characters (or even only one), and the
entire sequence is executed as if you had entered the whole sequence
of commands one by one.</P
><div class="sect2"><h3 class="sect2"><a class="title" name="VI6-CH-7-SECT-3.1">7.3.1 Word Abbreviation </A
></H3
><p class="para"><a class="indexterm" name="AUTOID-8716"></A
><a class="indexterm" name="AUTOID-8718"></A
><a class="indexterm" name="AUTOID-8720"></A
>You can define abbreviations that <kbd class="command">vi</KBD
> will automatically
expand into the full text whenever you type the abbreviation in insert mode.
To define an abbreviation, use the <kbd class="command">ex</KBD
> command:<a class="indexterm" name="AUTOID-8725"></A
></P
><p class="para"><blockquote class="screen"><pre class="screen">:ab <code class="replaceable"><i>abbr phrase</I
></CODE
></PRE
></BLOCKQUOTE
></P
><p class="para"><em class="emphasis">abbr</EM
> is an abbreviation for the specified
<em class="emphasis">phrase</EM
>.
The sequence of characters that make up the abbreviation will be
expanded in insert mode only if you type it as a full word;
<em class="emphasis">abbr</EM
> will not be expanded within a word.</P
><p class="para">Suppose in the file <i class="filename">practice</I
> you want to enter text that
contains a frequently recurring phrase such as a difficult product
or company name. The command:

<blockquote class="screen"><pre class="screen">:ab imrc International Materials Research Center</PRE
></BLOCKQUOTE
>

abbreviates <em class="emphasis">International Materials Research Center</EM
>
to the initials <em class="emphasis">imrc</EM
>.
Now whenever you type <em class="emphasis">imrc</EM
> in insert mode,
<em class="emphasis">imrc</EM
> expands to the full text.</P
><table class="informaltable" border="1" cellpadding="3"><thead class="thead"><tr class="row" valign="TOP"><th class="entry" align="LEFT" rowspan="1" colspan="1">Keystrokes</TH
><th class="entry" align="LEFT" rowspan="1" colspan="1">Results</TH
></TR
></THEAD
><tbody class="tbody"><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><code class="literal">ithe imrc</CODE
></TD
><td class="entry" rowspan="1" colspan="1"><img class="graphic" src="figs/vi.0706.gif" webstripperlinkwas="figs/vi.0706.gif" alt="Graphic"></TD
></TR
></TBODY
></TABLE
><p class="para">Abbreviations expand as soon as you press a non-alphanumeric character
(e.g., punctuation), a space, a carriage return, or
<kbd class="keycap">[ESC]</KBD
>
(returning to command mode).
When you are choosing abbreviations, choose combinations of
characters that don't ordinarily occur while you are typing text.
If you create an abbreviation that ends up expanding in places
where you don't want it to, you can disable the abbreviation by
typing:</P
><p class="para"><blockquote class="screen"><pre class="screen">:unab <code class="replaceable"><i>abbr</I
></CODE
></PRE
></BLOCKQUOTE
></P
><p class="para">To list your currently defined abbreviations, type:</P
><p class="para"><blockquote class="screen"><pre class="screen">:ab</PRE
></BLOCKQUOTE
></P
><p class="para">The characters that compose your abbreviation
cannot also appear at the end of your phrase.
For example, if you issue the command:</P
><p class="para"><blockquote class="screen"><pre class="screen">:ab PG This movie is rated PG</PRE
></BLOCKQUOTE
></P
><p class="para">you'll get the message &quot;No tail recursion,&quot;
and the abbreviation won't be set.
The message means that you have tried to define something that will
expand itself repeatedly, creating an infinite loop.
 
If you issue the command:</P
><p class="para"><blockquote class="screen"><pre class="screen">:ab PG the PG rating system</PRE
></BLOCKQUOTE
></P
><p class="para">you may or may not produce an infinite loop, but in either case
you won't get a warning message.
For example, when the above command was tested on a System V version
of UNIX, the expansion worked.
Circa 1990
on a Berkeley version,
the abbreviation expanded repeatedly, like this:</P
><p class="para"><blockquote class="screen"><pre class="screen">the the the the the ...</PRE
></BLOCKQUOTE
></P
><p class="para">until a memory error occurred and <kbd class="command">vi</KBD
> quit.</P
><p class="para">When tested, we obtained the following results
on these <kbd class="command">vi</KBD
> versions:</P
><dl class="variablelist"><dt class="term">Solaris 2.6 <kbd class="command">vi</KBD
></DT
><dd class="listitem"><p class="para"><a class="indexterm" name="AUTOID-8782"></A
>The tail recursive version is not allowed, while the version
with the name in the middle of the expansion only expands once.</P
></DD
><dt class="term"><kbd class="command">nvi</KBD
> 1.79</DT
><dd class="listitem"><p class="para"><a class="indexterm" name="AUTOID-8790"></A
>Both versions exceed an internal expansion limit, the
expansion stops, and <kbd class="command">nvi</KBD
> produces an error message.</P
></DD
><dt class="term"><kbd class="command">elvis</KBD
> 2.0</DT
><dd class="listitem"><p class="para"><a class="indexterm" name="AUTOID-8799"></A
>The tail recursive version runs infinitely until the editor is
interrupted. The version with the name in the middle eventually
stops expanding, but without any error message.</P
></DD
><dt class="term"><kbd class="command">vim</KBD
> 5.0 and 5.1</DT
><dd class="listitem"><p class="para">Both forms are detected and only expand once.<a class="indexterm" name="AUTOID-8807"></A
></P
></DD
><dt class="term"><kbd class="command">vile</KBD
> 7.4 and 8.0</DT
><dd class="listitem"><p class="para">Both forms are detected and only expand once.<a class="indexterm" name="AUTOID-8815"></A
></P
></DD
></DL
><p class="para">We recommend that you avoid repeating your abbreviation
as part of the defined phrase.</P
></DIV
><div class="sect2"><h3 class="sect2"><a class="title" name="VI6-CH-7-SECT-3.2">7.3.2 Using the map Command </A
></H3
><p class="para"><a class="indexterm" name="CH07.MAP0"></A
><a class="indexterm" name="CH07.MAP1"></A
><a class="indexterm" name="CH07.MAP2"></A
><a class="indexterm" name="CH07.MAP3"></A
>While you're editing, you may find that you are using a command sequence
frequently, or you may occasionally use a very complex command
sequence.
To save yourself keystrokes, or the time that it takes
to remember the sequence, you can assign the sequence to an unused key
by using the <code class="literal">map</CODE
> command.</P
><p class="para">The <code class="literal">map</CODE
> command acts a lot like <code class="literal">ab</CODE
>
except that you define a macro for <kbd class="command">vi</KBD
>'s command
mode instead of for insert mode.</P
><dl class="variablelist"><dt class="term"><code class="literal">:map</CODE
>&nbsp;<code class="replaceable"><i>x&nbsp;sequence</I
></CODE
></DT
><dd class="listitem"><p class="para">Define character <em class="emphasis">x</EM
> as a <em class="emphasis">sequence</EM
> of editing commands.</P
></DD
><dt class="term"><code class="literal">:unmap</CODE
>&nbsp;<code class="replaceable"><i>x</I
></CODE
></DT
><dd class="listitem"><p class="para">Disable the <em class="emphasis">sequence</EM
> defined for <em class="emphasis">x</EM
>.</P
></DD
><dt class="term"><code class="literal">:map</CODE
></DT
><dd class="listitem"><p class="para">List the characters that are currently mapped.</P
></DD
></DL
><p class="para">Before you can start creating your own maps, you need to know the
keys not used in command mode that are available for user-defined
commands:
 </P
><dl class="variablelist"><dt class="term">Letters</DT
><dd class="listitem"><p class="para"><code class="literal">g K q V v</CODE
></P
></DD
><dt class="term">Control keys</DT
><dd class="listitem"><p class="para"><code class="literal">^A ^K ^O ^W ^X</CODE
></P
></DD
><dt class="term">Symbols</DT
><dd class="listitem"><p class="para"><code class="literal">_ * \ =</CODE
></P
></DD
></DL
><blockquote class="note"><p class="para"><strong>NOTE:</STRONG
> The <code class="literal">=</CODE
> is used by <kbd class="command">vi</KBD
> if Lisp mode is set,
and to do text formatting by several of the clones.
In many modern versions of <kbd class="command">vi</KBD
>, the <code class="literal">_</CODE
>
is equivalent to the <code class="literal">^</CODE
> command, and
<kbd class="command">elvis</KBD
> and <kbd class="command">vim</KBD
>
have a &quot;visual mode&quot; that uses the
<code class="literal">v</CODE
>, <code class="literal">V</CODE
>, and
<code class="literal">^V</CODE
> keys. The moral is to test
your version carefully.</P
></BLOCKQUOTE
><p class="para">Depending on your terminal, you may also be able to associate map
sequences with special function keys.</P
><p class="para"><a class="indexterm" name="AUTOID-8889"></A
><a class="indexterm" name="AUTOID-8892"></A
><a class="indexterm" name="AUTOID-8894"></A
>With maps you can create simple or complex command sequences.
As a simple example, you could define a command to reverse the order of
words.
In <kbd class="command">vi</KBD
>, with the cursor as shown:</P
><p class="para"><blockquote class="screen"><pre class="screen">you can <u class="emphasis.underline">t</U
>he scroll page</PRE
></BLOCKQUOTE
></P
><p class="para">the sequence to put <em class="emphasis">the</EM
> after
<em class="emphasis">scroll</EM
> would be <code class="literal">dwelp</CODE
>:
delete word, <code class="literal">dw</CODE
>;  move to the end of next word,
<code class="literal">e</CODE
>; move one space to the right, <code class="literal">l</CODE
>;
put the deleted word there, <code class="literal">p</CODE
>. Saving this sequence:</P
><p class="para"><blockquote class="screen"><pre class="screen">:map v dwelp</PRE
></BLOCKQUOTE
></P
><p class="para">enables you to reverse the order of two words at any time in the editing
session with the single keystroke <code class="literal">v</CODE
>.</P
></DIV
><div class="sect2"><h3 class="sect2"><a class="title" name="VI6-CH-7-SECT-3.3">7.3.3 Protecting Keys from Interpretation by ex </A
></H3
><p class="para"><a class="indexterm" name="AUTOID-8915"></A
>Note that when defining a map, you cannot simply type certain keys,
such as
<kbd class="keycap">[RETURN]</KBD
>,
<kbd class="keycap">[ESC]</KBD
>,
<kbd class="keycap">[BACKSPACE]</KBD
>,
and
<kbd class="keycap">[DELETE]</KBD
>
as part of the command to be mapped, because
these keys already have meaning within <kbd class="command">ex</KBD
>.
If you want to include one of these keys as part of the command
sequence, you must escape the normal meaning
by preceding the key with <kbd class="keycap">[CTRL-V]</KBD
>.
The keystroke <code class="literal">^V</CODE
> appears in the map as the ^ character.
Characters following the <code class="literal">^V</CODE
> also
do not appear as you expect.
For example, a carriage return appears as <code class="literal">^M</CODE
>, escape as <code class="literal">^[</CODE
>, backspace as
<code class="literal">^H</CODE
>, and so on.</P
><p class="para">On the other hand, if you want to use a control character as the
character to be mapped,
in most cases all you have to do is hold down the
<kbd class="keycap">[CTRL]</KBD
>
key and press the letter key at the same time.
So, for example, all you need to do in order to map <code class="literal">^A</CODE
> is to type:</P
><p class="para"><blockquote class="screen"><pre class="screen">:map <kbd class="keycap">[CTRL-A]</KBD
> <code class="replaceable"><i>sequence</I
></CODE
></PRE
></BLOCKQUOTE
></P
><p class="para">There are, however, three control characters that must be
escaped with a <code class="literal">^V</CODE
>.  They are
<code class="literal">^T</CODE
>, <code class="literal">^W</CODE
>, and <code class="literal">^X</CODE
>.
So, for example, if you want to map <code class="literal">^T</CODE
>, you must type:</P
><p class="para"><blockquote class="screen"><pre class="screen">:map <kbd class="keycap">[CTRL-V]</KBD
> <kbd class="keycap">[CTRL-T]</KBD
> <code class="replaceable"><i>sequence</I
></CODE
></PRE
></BLOCKQUOTE
></P
><p class="para">The use of
<kbd class="keycap">[CTRL-V]</KBD
>
applies to any <kbd class="command">ex</KBD
> command, not just a map command.
This means that you can type a carriage return in an abbreviation
or a substitution command. For example, the abbreviation:
 </P
><p class="para"><blockquote class="screen"><pre class="screen">:ab 123 one^Mtwo^Mthree</PRE
></BLOCKQUOTE
></P
><p class="para">expands to this:</P
><p class="para"><blockquote class="screen"><pre class="screen">one
two
three</PRE
></BLOCKQUOTE
></P
><p class="para">(Here we show the sequence
<kbd class="keycap">[CTRL-V]</KBD
>
<kbd class="keycap">[RETURN]</KBD
>
as <code class="literal">^M</CODE
>, the way it would appear on your screen.)</P
><p class="para">You can also globally add lines at certain locations.
 
The command:</P
><p class="para"><blockquote class="screen"><pre class="screen">:g/^Section/s//As you recall, in^M&amp;/</PRE
></BLOCKQUOTE
></P
><p class="para">inserts, before all lines beginning with the word <em class="emphasis">Section</EM
>,
a phrase on a separate line. The <code class="literal">&amp;</CODE
> restores the search pattern.</P
><p class="para">Unfortunately,
one character always has special meaning in <kbd class="command">ex</KBD
> commands,
even if you try to quote it with
<kbd class="keycap">[CTRL-V]</KBD
>.
Recall that the vertical bar (<code class="literal">|</CODE
>)
has special meaning as a separator of multiple <kbd class="command">ex</KBD
> commands.
You cannot use a vertical bar in insert mode maps.</P
><p class="para">Now that you've seen how to use
<kbd class="keycap">[CTRL-V]</KBD
>
to protect certain keys inside <kbd class="command">ex</KBD
> commands, you're ready to
define some powerful map sequences.</P
></DIV
><div class="sect2"><h3 class="sect2"><a class="title" name="VI6-CH-7-SECT-3.4">7.3.4 Complex Mapping Example </A
></H3
><p class="para"><a class="indexterm" name="AUTOID-8976"></A
><a class="indexterm" name="AUTOID-8979"></A
>Assume that you have a glossary with entries like this:</P
><p class="para"><blockquote class="screen"><pre class="screen">map - an ex command which allows you to associate
a complex command sequence with a single key.</PRE
></BLOCKQUOTE
></P
><p class="para">You would like to convert this glossary list to <kbd class="command">troff</KBD
>
format, so that it looks like this:</P
><p class="para"><blockquote class="screen"><pre class="screen">.IP &quot;map&quot; 10 n
An ex command...</PRE
></BLOCKQUOTE
></P
><p class="para">The best way to define a complex map is to do the edit once manually,
writing down each keystroke that you have to type.
Then recreate these keystrokes as a map.
You want to:</P
><ol class="orderedlist"><li class="listitem"><p class="para">Insert the MS macro for an indented paragraph at the beginning of the line.
Insert the first quotation mark as well (<code class="literal">I.IP &quot;</CODE
>).</P
></LI
><li class="listitem"><p class="para">Press
<kbd class="keycap">[ESC]</KBD
>
to terminate insert mode.</P
></LI
><li class="listitem"><p class="para">Move to the end of the first word (<code class="literal">e</CODE
>) and add a second
quotation mark,
followed by a space and the size of the indent (<code class="literal">a&quot; 10n</CODE
>).</P
></LI
><li class="listitem"><p class="para">Press
<kbd class="keycap">[RETURN]</KBD
>
to insert a new line.</P
></LI
><li class="listitem"><p class="para">Press
<kbd class="keycap">[ESC]</KBD
>
to terminate insert mode.</P
></LI
><li class="listitem"><p class="para">Remove the hyphen and two surrounding spaces (<code class="literal">3x</CODE
>) and capitalize the next word (~).</P
></LI
></OL
><p class="para">That will be quite an editing chore if you have to repeat it more
than just a few times.</P
><p class="para">With <code class="literal">:map</CODE
> you can save the entire sequence so that it
can be re-executed with a single keystroke:</P
><p class="para"><blockquote class="screen"><pre class="screen">:map g I.IP &quot;^[ea&quot; 10n^M^[3x~</PRE
></BLOCKQUOTE
></P
><p class="para">Note that you have to &quot;quote&quot; both the
<kbd class="keycap">[ESC]</KBD
>
and
<kbd class="keycap">[RETURN]</KBD
>
characters with
<kbd class="keycap">[CTRL-V]</KBD
>.
<code class="literal">^[</CODE
> is the sequence that appears when you type
<kbd class="keycap">[CTRL-V]</KBD
>
followed by
<kbd class="keycap">[ESC]</KBD
>.
<code class="literal">^M</CODE
> is the sequence shown when you type
<kbd class="keycap">[CTRL-V]</KBD
>
<kbd class="keycap">[RETURN]</KBD
>.</P
><p class="para">Now, simply typing <code class="literal">g</CODE
> will perform the entire series of edits.
At a slow baud rate you can actually see the edits happening individually.
At a fast baud rate it will seem to happen by magic.</P
><p class="para">Don't be discouraged if your first attempt at key mapping fails.
A small error in defining the map can give very different results
from the ones you expect.
Type <code class="literal">u</CODE
> to undo the edit, and try again.</P
></DIV
><div class="sect2"><h3 class="sect2"><a class="title" name="VI6-CH-7-SECT-3.5">7.3.5 More Examples of Mapping Keys </A
></H3
><p class="para"><a class="indexterm" name="CH07.USEFUL0"></A
><a class="indexterm" name="CH07.USEFUL1"></A
><a class="indexterm" name="CH07.USEFUL2"></A
><a class="indexterm" name="CH07.USEFUL3"></A
>These examples will give you an idea of the clever
shortcuts possible when defining keyboard maps:</P
><ol class="orderedlist"><li class="listitem"><p class="para">Add text whenever you move to the end of a word:</P
><p class="para"><blockquote class="screen"><pre class="screen">:map e ea</PRE
></BLOCKQUOTE
></P
><p class="para">Most of the time, the only reason you want to move to the end of
a word is to add text. This map sequence puts you in insert mode
automatically.
Note that the mapped key, <code class="literal">e</CODE
>, has meaning in <kbd class="command">vi</KBD
>.
You're allowed to map a key that is already used by <kbd class="command">vi</KBD
>,
but the key's normal function will be unavailable as long
as the map is in effect. This isn't so bad in this case, since
the <code class="literal">E</CODE
> command is often identical to <code class="literal">e</CODE
>.</P
></LI
><li class="listitem"><p class="para"><a class="indexterm" name="AUTOID-9057"></A
><a class="indexterm" name="AUTOID-9060"></A
><a class="indexterm" name="AUTOID-9062"></A
>Transpose two words:</P
><p class="para"><blockquote class="screen"><pre class="screen">:map K dwElp</PRE
></BLOCKQUOTE
></P
><p class="para">We discussed this sequence earlier in the chapter, but now
you need to use <code class="literal">E</CODE
>
(assume here, and in the remaining examples,
that the <code class="literal">e</CODE
> command is mapped to <code class="literal">ea</CODE
>).
Remember that the cursor begins on the first of the two words.
Unfortunately, because of the <code class="literal">l</CODE
> command, this sequence
(and the earlier version)
doesn't work if the two words are at the end of a line:
during the sequence, the cursor ends up at the end of the line,
and <code class="literal">l</CODE
> cannot move further right.
Here's a better solution:</P
><p class="para"><blockquote class="screen"><pre class="screen">:map K dwwP</PRE
></BLOCKQUOTE
></P
><p class="para">You could also use <code class="literal">W</CODE
> instead of <code class="literal">w</CODE
>.</P
></LI
><li class="listitem"><p class="para"><a class="indexterm" name="AUTOID-9079"></A
><a class="indexterm" name="AUTOID-9082"></A
><a class="indexterm" name="AUTOID-9085"></A
>Save a file and edit the next one in a series:</P
><p class="para"><blockquote class="screen"><pre class="screen">:map q :w^M:n^M</PRE
></BLOCKQUOTE
></P
><p class="para">Notice that you can map keys to <kbd class="command">ex</KBD
> commands, but be sure
to finish each <kbd class="command">ex</KBD
> command with a carriage return.
This sequence makes it easy to move from one file to the next
and is useful when you've opened many short files with one <kbd class="command">vi</KBD
>
command. Mapping the letter <code class="literal">q</CODE
> helps you
remember that the sequence is similar to a &quot;quit.&quot;</P
></LI
><li class="listitem"><p class="para"><a class="indexterm" name="AUTOID-9097"></A
><a class="indexterm" name="AUTOID-9100"></A
>Put <kbd class="command">troff</KBD
> emboldening codes around a word:</P
><p class="para"><blockquote class="screen"><pre class="screen">:map v i\fB^[e\fP^[</PRE
></BLOCKQUOTE
></P
><p class="para">This sequence assumes that the cursor is at the beginning of the
word. First, you enter insert mode, then you type the code for the
bold font. In map commands, you don't need to type two backslashes to
produce one backslash. Next, you return to command mode
by typing a &quot;quoted&quot;
<kbd class="keycap">[ESC]</KBD
>.
Finally, you append the closing <kbd class="command">troff</KBD
> code at the
end of the word, and you return to command mode.
Notice that when we appended to the end of the word,
we didn't need to use <code class="literal">ea</CODE
>, since this sequence is itself
mapped to the single letter <code class="literal">e</CODE
>.
This shows you that map sequences are allowed to contain
other mapped commands. (The ability to use nested map sequences is
controlled by <kbd class="command">vi</KBD
>'s <code class="literal">remap</CODE
> option, which is normally
enabled.)</P
></LI
><li class="listitem"><p class="para">Put <kbd class="command">troff</KBD
> emboldening codes around a word, even when the
cursor is not at the beginning of the word:</P
><p class="para"><blockquote class="screen"><pre class="screen">:map V lbi\fB^[e\fP^[</PRE
></BLOCKQUOTE
></P
><p class="para">This sequence is the same as the previous one, except that it
uses <code class="literal">lb</CODE
> to
handle the additional task of positioning the cursor at the
beginning of the word. The cursor might be in the middle of the
word, so you want to move to the beginning with the <code class="literal">b</CODE
>
command. But if the cursor were already at the beginning of the
word, the <code class="literal">b</CODE
> command would move the cursor to the previous
word instead. To guard against that case,
type an <code class="literal">l</CODE
> before moving back with <code class="literal">b</CODE
>, so that
the cursor never starts on the first letter of the word.
You can define variations of this sequence by replacing the
<code class="literal">b</CODE
> with <code class="literal">B</CODE
> and the <code class="literal">e</CODE
> with <code class="literal">Ea</CODE
>.
In all cases, though, the <code class="literal">l</CODE
> command prevents this sequence
from working if the cursor is at the end of a line.
(You could append a space to get around this.)</P
></LI
><li class="listitem"><p class="para"><a class="indexterm" name="AUTOID-9131"></A
><a class="indexterm" name="AUTOID-9134"></A
><a class="indexterm" name="AUTOID-9137"></A
><a class="indexterm" name="AUTOID-9140"></A
><a class="indexterm" name="AUTOID-9143"></A
>Repeatedly find and remove parentheses from around a word or phrase:
[<a class="footnote" href="#AUTOID-9146">5</A
>]</P
><blockquote class="footnote"><div class="footnote"><p class="para"><a class="footnote" name="AUTOID-9146">[5]</A
> From the article by Walter Zintz, in <cite class="citetitle">UNIX World</CITE
>, April 1990.</P
></DIV
></BLOCKQUOTE
><blockquote class="screen"><pre class="screen">:map = xf)xn</PRE
></BLOCKQUOTE
><p class="para">This sequence assumes that you first
found an open parenthesis, by typing <code class="literal">/(</CODE
> followed by
<kbd class="keycap">[RETURN]</KBD
>.</P
><p class="para">If you choose to remove the parentheses, then use the map command:
delete the open parenthesis with <code class="literal">x</CODE
>, find the
closing one with <code class="literal">f)</CODE
>, delete it with <code class="literal">x</CODE
>, and
then repeat your search for an open parenthesis with <code class="literal">n</CODE
>.</P
><p class="para">If you don't want to remove the parentheses (for example,
if they're being used correctly), then don't use the map command:
press <code class="literal">n</CODE
> instead to find the next open parenthesis.</P
><p class="para">You could also modify the map sequence above to handle matching
pairs of quotes.</P
></LI
><li class="listitem"><p class="para"><a class="indexterm" name="AUTOID-9163"></A
><a class="indexterm" name="AUTOID-9165"></A
><a class="indexterm" name="AUTOID-9168"></A
>Place C/C++ comments around an entire line:</P
><p class="para"><blockquote class="screen"><pre class="screen">:map g I/* ^[A */^[</PRE
></BLOCKQUOTE
></P
><p class="para">This sequence inserts <code class="literal">/*</CODE
> at the line's beginning
and appends <code class="literal">*/</CODE
> at the line's end.
You could also map a substitute command to do the same thing:</P
><p class="para"><blockquote class="screen"><pre class="screen">:map g :s;.*;/* &amp; */;^M</PRE
></BLOCKQUOTE
></P
><p class="para">Here, you match the entire line (with <code class="literal">.*</CODE
>), and when you
replay it (with <code class="literal">&amp;</CODE
>), you surround the line with the
comment symbols. Note the use of semicolon delimiters, to avoid
having to escape the <code class="literal">/</CODE
>
in the comment.</P
></LI
><li class="listitem"><p class="para"><a class="indexterm" name="AUTOID-9184"></A
><a class="indexterm" name="AUTOID-9187"></A
><a class="indexterm" name="AUTOID-9189"></A
><a class="indexterm" name="AUTOID-9192"></A
><a class="indexterm" name="AUTOID-9196"></A
><a class="indexterm" name="AUTOID-9199"></A
>Safely repeat a long insertion:</P
><p class="para"><blockquote class="screen"><pre class="screen">:map ^J :set wm=0^M.:set wm=10^M</PRE
></BLOCKQUOTE
></P
><p class="para">We mentioned in <a class="xref" href="ch02_01.htm" webstripperlinkwas="ch02_01.htm">Chapter 2, <cite class="CHAPTER">Simple Editing</CITE
></A
>, that
<kbd class="command">vi</KBD
> occasionally has difficulty repeating long insertions
of text when <code class="literal">wrapmargin</CODE
> is set.
This map command is a useful workaround. It temporarily turns off
the wrapmargin (by setting it to 0), gives the repeat command, and
then restores the wrapmargin.
Note that a map sequence can combine <kbd class="command">ex</KBD
> and <kbd class="command">vi</KBD
> commands.</P
></LI
></OL
><p class="para">In the previous example,
even though <code class="literal">^J</CODE
> is a <kbd class="command">vi</KBD
> command (it moves the cursor
down a line), this key is safe to map because
it's really the same as the <code class="literal">j</CODE
> command.
There are many keys that either perform the same tasks as other
keys or that are rarely used. However, you should be familiar
with the <kbd class="command">vi</KBD
> commands before you boldly disable
their normal use by using them in map definitions.</P
><a class="indexterm" name="AUTOID-9215"></A
><a class="indexterm" name="AUTOID-9216"></A
><a class="indexterm" name="AUTOID-9217"></A
><a class="indexterm" name="AUTOID-9218"></A
></DIV
><div class="sect2"><h3 class="sect2"><a class="title" name="VI6-CH-7-SECT-3.6">7.3.6 Mapping Keys for Insert Mode </A
></H3
><p class="para"><a class="indexterm" name="AUTOID-9222"></A
><a class="indexterm" name="AUTOID-9225"></A
><a class="indexterm" name="AUTOID-9228"></A
><a class="indexterm" name="AUTOID-9231"></A
>Normally, maps apply only to command mode&nbsp;-- after all, in insert mode,
keys stand for themselves and shouldn't be mapped as commands.
However, by adding an exclamation mark (<code class="literal">!</CODE
>) to the <code class="literal">map</CODE
> command,
you can force it to override the ordinary meaning of a key and produce
the map in insert mode. This feature is useful when you find
yourself in insert mode but need to escape briefly to command
mode, run a command, and then return to insert mode.</P
><p class="para">For example, suppose you just typed a word but forgot to
italicize it (or place quotes around it, etc.).
You can define this map:</P
><p class="para"><blockquote class="screen"><pre class="screen">:map! + ^[bi&lt;I&gt;^[ea&lt;/I&gt;</PRE
></BLOCKQUOTE
></P
><p class="para">Now, when you type a <code class="literal">+</CODE
> at the end of a word, you will surround
the word with HTML italicization codes. The <code class="literal">+</CODE
> won't show up
in the text.</P
><p class="para">The sequence above escapes to command mode (<code class="literal">^[</CODE
>),
backs up to insert the first code (<code class="literal">bi&lt;I&gt;</CODE
>),
escapes again (<code class="literal">^[</CODE
>), and moves ahead to append the
second code (<code class="literal">ea&lt;/I&gt;</CODE
>).
Since the map sequence
begins and ends in insert mode, you can continue entering text after
marking the word.</P
><p class="para">Here's another example.
Suppose that you've been typing your text, and you realize
that the previous line should have ended with a colon.
You can correct that by defining this map sequence:[<a class="footnote" href="#AUTOID-9248">6</A
>]</P
><blockquote class="footnote"><div class="footnote"><p class="para"><a class="footnote" name="AUTOID-9248">[6]</A
> From an article by Walter Zintz, in <cite class="citetitle">UNIX World</CITE
>,
April 1990.</P
></DIV
></BLOCKQUOTE
><p class="para"><blockquote class="screen"><pre class="screen">:map! % ^[kA:^[jA</PRE
></BLOCKQUOTE
></P
><p class="para">Now, if you type a <code class="literal">%</CODE
> anywhere along your current line,
you'll append a colon to the end of the previous line.
This command escapes to command mode, moves up a line, and
appends the colon (<code class="literal">^[kA:</CODE
>). The command then
escapes again,
moves down to the line you were on,
and leaves you in insert mode (<code class="literal">^[jA</CODE
>).</P
><p class="para">Note that we wanted to use uncommon characters (<code class="literal">%</CODE
> and
<code class="literal">+</CODE
>) for the previous map commands.
When a character is mapped for insert mode, you
can no longer type that character as text.</P
><p class="para">To reinstate a character for normal typing, use the command:</P
><p class="para"><blockquote class="screen"><pre class="screen">:unmap! <code class="replaceable"><i>x</I
></CODE
></PRE
></BLOCKQUOTE
></P
><p class="para">where <em class="emphasis">x</EM
> is the character that was previously mapped for
insert mode.
(Although <kbd class="command">vi</KBD
> will expand <em class="emphasis">x</EM
> on the
command line as you type it, making it look like you are unmapping the expanded
text, it will correctly unmap the character.)</P
><p class="para">Insert-mode mapping is often more
appropriate for tying character strings to special keys
that you wouldn't otherwise use.
It is especially useful with programmable function keys.
 </P
></DIV
><div class="sect2"><h3 class="sect2"><a class="title" name="VI6-CH-7-SECT-3.7">7.3.7 Mapping Function Keys </A
></H3
><p class="para"><a class="indexterm" name="CH07.SPECIAL1"></A
><a class="indexterm" name="CH07.SPECIAL2"></A
><a class="indexterm" name="CH07.SPECIAL3"></A
><a class="indexterm" name="CH07.SPECIAL4"></A
>Many terminals have programmable function keys
(which are faithfully emulated by today's terminal emulators
on bitmapped workstations).
You can usually set
up these keys to print whatever character or characters you want using
a special setup mode on the terminal.
However, keys programmed using a terminal's setup mode only work on
that terminal; they may also
limit the action of programs that want to
set up those function keys themselves.</P
><p class="para"><kbd class="command">ex</KBD
> allows you to map function keys by number, using the syntax:</P
><p class="para"><blockquote class="screen"><pre class="screen">:map #1 <code class="replaceable"><i>commands</I
></CODE
></PRE
></BLOCKQUOTE
></P
><p class="para">for function key number 1, and so on.
(It can do this because the
editor has access to the entry for that terminal found in either the
<em class="emphasis">terminfo</EM
> or <em class="emphasis">termcap</EM
> database and knows the
escape sequence normally put out by the function key.)</P
><p class="para">As with other keys, maps apply by default to command mode, but by
using the <code class="literal">map!</CODE
> commands as well, you can define two separate
values for a function key&nbsp;-- one to be used in command mode, the other in
insert mode.
For example, if you are an HTML user, you might
want to put font-switch codes on function keys.
For example:</P
><p class="para"><blockquote class="screen"><pre class="screen">:map #1 i&lt;I&gt;^[
:map! #1 &lt;I&gt;</PRE
></BLOCKQUOTE
></P
><p class="para">If you are in command mode, the first function key will enter insert
mode, type in the three characters <code class="literal">&lt;I&gt;</CODE
>, and return to command mode.
If you are already in insert mode,
the key will simply type the
three-character HTML code.
 
 </P
><blockquote class="note"><p class="para"><strong>NOTE:</STRONG
> If function keys have been redefined in the terminal's setup
mode, the <code class="literal">#</CODE
><code class="replaceable"><i>n</I
></CODE
>
syntax might not work since the function keys no longer put
out the expected control
or escape sequence as described in its terminal database entry.
You will need to examine the <em class="emphasis">terminfo</EM
> source
(or <em class="emphasis">termcap</EM
> entry)
for your terminal and check the definitions for the function keys.
In addition, there are some terminals whose function keys perform only
local actions and don't actually send any characters to the computer.
Such function keys can't be mapped.</P
></BLOCKQUOTE
><p class="para">The terminal capabilities <code class="literal">k1</CODE
>, <code class="literal">k2</CODE
>
through <code class="literal">k0</CODE
> describe the first ten function keys.
The capabilities <code class="literal">l1</CODE
>, <code class="literal">l2</CODE
> through
<code class="literal">l0</CODE
> describe the remaining function keys.
Using your terminal's setup mode, you can change the control
or escape sequence output by the function key to correspond with
the <em class="emphasis">terminfo</EM
> or <em class="emphasis">termcap</EM
> entry.
(For more information, see <em class="emphasis">termcap &amp; terminfo</EM
>,
published by O'Reilly &amp; Associates.)</P
><p class="para">If the sequence contains <code class="literal">^M</CODE
>, which is a carriage return,
press
<kbd class="keycap">[CTRL-M]</KBD
>.
For instance, in order to have function key 1 available for
mapping, the terminal database entry for your terminal must
have a definition of <code class="literal">k1</CODE
>, such as:</P
><p class="para"><blockquote class="screen"><pre class="screen">k1=^A@^M</PRE
></BLOCKQUOTE
></P
><p class="para">In turn, the definition:</P
><p class="para"><blockquote class="screen"><pre class="screen">^A@^M</PRE
></BLOCKQUOTE
></P
><p class="para">must be what is output when you press that key.</P
><p class="para">To see what the function key puts out, use the <kbd class="command">od</KBD
> (octal dump)
command with the <code class="literal">-c</CODE
> option (show each character).
You will need to press
<kbd class="keycap">[RETURN]</KBD
>
after the function key, and then
<kbd class="keycap">[CTRL-D]</KBD
>
to get <kbd class="command">od</KBD
> to print the information.
For example:</P
><p class="para"><blockquote class="screen"><pre class="screen">$ <code class="userinput"><b>od -c
^[[[A
^D</B
></CODE
>
0000000 033   [   [   A  \n
0000005</PRE
></BLOCKQUOTE
></P
><p class="para">Here, the function key sent Escape, two left brackets,
and an <em class="emphasis">A</EM
>.</P
></DIV
><div class="sect2"><h3 class="sect2"><a class="title" name="VI6-CH-7-SECT-3.8">7.3.8 Mapping Other Special Keys </A
></H3
><p class="para"><a class="indexterm" name="AUTOID-9338"></A
><a class="indexterm" name="AUTOID-9340"></A
><a class="indexterm" name="AUTOID-9342"></A
>Many keyboards have special keys, such as
<kbd class="keycap">[HOME]</KBD
>,
<kbd class="keycap">[END]</KBD
>,
<kbd class="keycap">[PAGE UP]</KBD
>,
and
<kbd class="keycap">[PAGE DOWN]</KBD
>
that duplicate commands in <kbd class="command">vi</KBD
>.
If the terminal's <em class="emphasis">terminfo</EM
> or <em class="emphasis">termcap</EM
> description is
complete,
<kbd class="command">vi</KBD
> will be able to recognize these keys.
But if it isn't, you can use the <code class="literal">map</CODE
> command to make them
available to <kbd class="command">vi</KBD
>.
These keys generally send an escape sequence to the computer&nbsp;-- an
escape character followed by a string of one or more other characters.
In order to trap the escape, you should press <code class="literal">^V</CODE
> before
pressing the special key in the map.
For example, to map the
<kbd class="keycap">[HOME]</KBD
>
key on the keyboard of an IBM PC to a reasonable <kbd class="command">vi</KBD
> equivalent,
you might define the following map:</P
><p class="para"><blockquote class="screen"><pre class="screen">:map&nbsp;<kbd class="keycap">[CTRL-V]</KBD
>&nbsp;<kbd class="keycap">[HOME]</KBD
>&nbsp;1G</PRE
></BLOCKQUOTE
></P
><p class="para">This appears on your screen as:</P
><p class="para"><blockquote class="screen"><pre class="screen">:map ^[[H 1G</PRE
></BLOCKQUOTE
></P
><p class="para">Similar map commands display as follows:</P
><blockquote class="screen"><pre class="screen">:map <kbd class="keycap">[CTRL-V]</KBD
> <kbd class="keycap">[END]</KBD
> &nbsp;G 	    <i class="lineannotation">displays</I
>    :map ^[[Y G
:map <kbd class="keycap">[CTRL-V]</KBD
> <kbd class="keycap">[PAGE&nbsp;UP]</KBD
> &nbsp;^F	   <i class="lineannotation">displays</I
>    :map ^[[V ^F
:map <kbd class="keycap">[CTRL-V]</KBD
> <kbd class="keycap">[PAGE&nbsp;DOWN]</KBD
> &nbsp;^B	   <i class="lineannotation">displays</I
>    :map ^[[U ^B</PRE
></BLOCKQUOTE
><p class="para">You'll probably want to place these maps in your <i class="filename">.exrc</I
> file.
Note that if a special key generates a long escape sequence
(containing multiple non-printing characters),
<code class="literal">^V</CODE
> quotes only the initial escape
character, and the map doesn't work.
You will have to find the entire escape sequence (perhaps
from the terminal manual) and type it in manually, quoting at the
appropriate points, rather than simply pressing <code class="literal">^V</CODE
> and then the key.</P
><a class="indexterm" name="AUTOID-9379"></A
><a class="indexterm" name="AUTOID-9380"></A
><a class="indexterm" name="AUTOID-9381"></A
><a class="indexterm" name="AUTOID-9382"></A
></DIV
><div class="sect2"><h3 class="sect2"><a class="title" name="VI6-CH-7-SECT-3.9">7.3.9 Mapping Multiple Input Keys</A
></H3
><p class="para">Mapping multiple key strokes is not restricted just to function keys.
You can also map sequences of regular keystrokes.
This can help make it easier to enter certain kinds of text, such
as SGML or HTML.</P
><p class="para">Here are some <code class="literal">:map</CODE
> commands, thanks to Jerry Peek, 
co-author of O'Reilly's
<em class="emphasis">Learning the UNIX Operating System</EM
>,
which make it easier to enter SGML markup. (The lines beginning
with a double quote are comments. This is discussed below in
<a class="xref" href="ch07_04.htm" webstripperlinkwas="ch07_04.htm#VI6-CH-7-SECT-4.4">Section 7.4.4, "Comments in ex Scripts "</A
>.)</P
><blockquote class="screen"><pre class="screen">&quot; ADR: need this
:set noremap
&quot; bold:
map! =b &lt;/emphasis&gt;^[F&lt;i&lt;emphasis role=bold&gt;
map =B i&lt;emphasis role=bold&gt;^[
map =b a&lt;/emphasis&gt;^[
&quot; Move to end of next tag:
map! =e ^[f&gt;a
map =e f&gt;
&quot; footnote (tacks opening tag directly after cursor in text-input mode):
map! =f &lt;footnote&gt;^M&lt;para&gt;^M&lt;/para&gt;^M&lt;/footnote&gt;^[kO
&quot; Italics (&quot;emphasis&quot;):
map! =i &lt;/emphasis&gt;^[F&lt;i&lt;emphasis&gt;
map =I i&lt;emphasis&gt;^[
map =i a&lt;/emphasis&gt;^[
&quot; paragraphs:
map! =p ^[jo&lt;para&gt;^M&lt;/para&gt;^[O
map =P O&lt;para&gt;^[
map =p o&lt;/para&gt;^[
&quot; less-than:
map! *l &amp;lt;
...</PRE
></BLOCKQUOTE
><p class="para">Using these commands, to enter a footnote you would enter insert mode,
and type <code class="literal">=f</CODE
>.  <kbd class="command">vi</KBD
> would then insert the opening
and closing tags, and leave you in insert mode between them:</P
><blockquote class="screen"><pre class="screen">All the world's a stage.&lt;footnote&gt;
&lt;para&gt;
_
&lt;/para&gt;
&lt;/footnote&gt;</PRE
></BLOCKQUOTE
><p class="para">Needless to say, these macros proved quite useful during the
development of this book.</P
><a class="indexterm" name="AUTOID-9396"></A
><a class="indexterm" name="AUTOID-9397"></A
><a class="indexterm" name="AUTOID-9398"></A
><a class="indexterm" name="AUTOID-9399"></A
></DIV
><div class="sect2"><h3 class="sect2"><a class="title" name="VI6-CH-7-SECT-3.10">7.3.10 @-Functions </A
></H3
><p class="para"><a class="indexterm" name="CH07.BUFFER1"></A
><a class="indexterm" name="CH07.BUFFER2"></A
><a class="indexterm" name="AUTOID-9408"></A
><a class="indexterm" name="AUTOID-9411"></A
><a class="indexterm" name="AUTOID-9413"></A
>Named buffers provide yet another way to create &quot;macros&quot;&nbsp;-- complex
command sequences that you can repeat with only a few keystrokes.</P
><p class="para">If you type a command line in your text (either a <kbd class="command">vi</KBD
> sequence
or an <kbd class="command">ex</KBD
> command <em class="emphasis">preceded by a colon</EM
>), then delete it
into a named buffer, you can execute the contents of that buffer with
the <code class="literal">@</CODE
> command.
For example, open a new line and enter:</P
><img class="graphic" src="figs/vi.0707.gif" webstripperlinkwas="figs/vi.0707.gif" alt="Graphic"><p class="para">This will appear as:</P
><p class="para"><blockquote class="screen"><pre class="screen">cwgadfly^[</PRE
></BLOCKQUOTE
></P
><p class="para">on your screen.
Press
<kbd class="keycap">[ESC]</KBD
>
again to exit insert mode, then delete the line
into buffer <code class="literal">g</CODE
> by typing <code class="literal">&quot;gdd</CODE
>.
Now whenever you place the cursor at the beginning of a word and
type <code class="literal">@g</CODE
>, that word in your text will be changed to
<em class="emphasis">gadfly</EM
>.</P
><p class="para">Since <code class="literal">@</CODE
> is interpreted as a <kbd class="command">vi</KBD
> command,
a dot (.) will repeat the entire sequence, even if the buffer
contains an <kbd class="command">ex</KBD
> command.
<code class="literal">@@</CODE
> repeats the last <code class="literal">@</CODE
>, and <code class="literal">u</CODE
> or <code class="literal">U</CODE
> can
be used to undo the effect of <code class="literal">@</CODE
>.</P
><p class="para">This is a simple example.
@-functions are useful because they can be adapted to very specific
commands.
They are especially useful when you are editing between files, because
you can store the commands in their named buffers
and access them from any file you edit.
@-functions are also useful in combination with the global
replacement commands discussed in <a class="xref" href="ch06_01.htm" webstripperlinkwas="ch06_01.htm">Chapter 6, <cite class="CHAPTER">Global Replacement</CITE
></A
>.</P
></DIV
><div class="sect2"><h3 class="sect2"><a class="title" name="VI6-CH-7-SECT-3.11">7.3.11 Executing Buffers from ex</A
></H3
><p class="para"><a class="indexterm" name="AUTOID-9445"></A
>You can also execute text saved in a buffer from <kbd class="command">ex</KBD
> mode.
In this case, you would enter an <kbd class="command">ex</KBD
> command, delete
it into a named buffer, and then use the <code class="literal">@</CODE
> command from
the <kbd class="command">ex</KBD
> colon prompt. For example, enter the following text:</P
><blockquote class="screen"><pre class="screen">ORA publishes great books.
ORA is my favorite publisher.
1,$s/ORA/O'Reilly \&amp; Associates/g</PRE
></BLOCKQUOTE
><p class="para">With your cursor on the last line, delete the command into the
<code class="literal">g</CODE
> buffer: <code class="literal">&quot;gdd</CODE
>.
Move your cursor to the first line: <code class="literal">kk</CODE
>.
Then execute the buffer from the colon command line:
<code class="literal">:@g</CODE
><kbd class="keycap">[RETURN]</KBD
>.
Your screen should now look like this:</P
><blockquote class="screen"><pre class="screen">O'Reilly &amp; Associates publishes great books.
O'Reilly &amp; Associates is my favorite publisher.</PRE
></BLOCKQUOTE
><p class="para">Some versions treat <code class="literal">*</CODE
> identically to
<code class="literal">@</CODE
> when used from the <kbd class="command">ex</KBD
> command line.
In addition, if the buffer character supplied after the
<code class="literal">@</CODE
> or <code class="literal">*</CODE
> command
is <code class="literal">*</CODE
>,
the command will be taken from the default (unnamed) buffer.</P
><a class="indexterm" name="AUTOID-9467"></A
><a class="indexterm" name="AUTOID-9468"></A
></DIV
><a class="indexterm" name="AUTOID-9469"></A
><a class="indexterm" name="AUTOID-9470"></A
></DIV
><div class="htmlnav"><p></P
><hr align="LEFT" width="515" title="footer"><table width="515" border="0" cellspacing="0" cellpadding="0"><tr><td align="LEFT" valign="TOP" width="172"><a class="SECT1" href="ch07_02.htm" webstripperlinkwas="ch07_02.htm" title="7.2 Executing UNIX Commands "><img src="../gifs/txtpreva.gif" webstripperlinkwas="../gifs/txtpreva.gif" alt="Previous: 7.2 Executing UNIX Commands " border="0"></A
></TD
><td align="CENTER" valign="TOP" width="171"><a class="book" href="index.htm" webstripperlinkwas="http://www.ms.itb.ac.id/buku/unix-bookshelf/vi/index.htm" title="Learning the vi Editor"><img src="../gifs/txthome.gif" webstripperlinkwas="../gifs/txthome.gif" alt="Learning the vi Editor" border="0"></A
></TD
><td align="RIGHT" valign="TOP" width="172"><a class="SECT1" href="ch07_04.htm" webstripperlinkwas="ch07_04.htm" title="7.4 Using ex Scripts "><img src="../gifs/txtnexta.gif" webstripperlinkwas="../gifs/txtnexta.gif" alt="Next: 7.4 Using ex Scripts " border="0"></A
></TD
></TR
><tr><td align="LEFT" valign="TOP" width="172">7.2 Executing UNIX Commands </TD
><td align="CENTER" valign="TOP" width="171"><a class="index" href="index/idx_0.htm" webstripperlinkwas="index/idx_0.htm" title="Book Index"><img src="../gifs/index.gif" webstripperlinkwas="../gifs/index.gif" alt="Book Index" border="0"></A
></TD
><td align="RIGHT" valign="TOP" width="172">7.4 Using ex Scripts </TD
></TR
></TABLE
><hr align="LEFT" width="515" title="footer"><img src="../gifs/smnavbar.gif" webstripperlinkwas="../gifs/smnavbar.gif" usemap="#map" border="0" alt="The UNIX CD Bookshelf Navigation"><map name="map"><area shape="RECT" coords="0,0,73,21" href="../index.html" webstripperlinkwas="http://www.ms.itb.ac.id/buku/unix-bookshelf/index.html" alt="The UNIX CD Bookshelf"><area shape="RECT" coords="74,0,163,21" href="../upt/index.htm" webstripperlinkwas="http://www.ms.itb.ac.id/buku/unix-bookshelf/upt/index.htm" alt="UNIX Power Tools"><area shape="RECT" coords="164,0,257,21" href="../unixnut/index.htm" webstripperlinkwas="http://www.ms.itb.ac.id/buku/unix-bookshelf/unixnut/index.htm" alt="UNIX in a Nutshell"><area shape="RECT" coords="258,0,321,21" href="index.htm" webstripperlinkwas="http://www.ms.itb.ac.id/buku/unix-bookshelf/vi/index.htm" alt="Learning the vi Editor"><area shape="RECT" coords="322,0,378,21" href="../sedawk/index.htm" webstripperlinkwas="http://www.ms.itb.ac.id/buku/unix-bookshelf/sedawk/index.htm" alt="sed &amp; awk"><area shape="RECT" coords="379,0,438,21" href="../ksh/index.htm" webstripperlinkwas="http://www.ms.itb.ac.id/buku/unix-bookshelf/ksh/index.htm" alt="Learning the Korn Shell"><area shape="RECT" coords="439,0,514,21" href="../lrnunix/index.htm" webstripperlinkwas="http://www.ms.itb.ac.id/buku/unix-bookshelf/lrnunix/index.htm" alt="Learning the UNIX Operating System"></MAP
></DIV
></BODY
></HTML
>

