<html><head>
<title>[Chapter 8] 8.3 Signals</TITLE>
<meta name="DC.title" content="Learning the Korn Shell"><meta name="DC.creator" content="Bill Rosenblatt"><meta name="DC.publisher" content="O'Reilly &amp; Associates, Inc."><meta name="DC.date" content="1998-08-03T21:15:02Z"><meta name="DC.type" content="Text.Monograph"><meta name="DC.format" content="text/html" scheme="MIME"><meta name="DC.source" content="1-56592-054-6" scheme="ISBN"><meta name="DC.language" content="en-US"><meta name="generator" content="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><link rev="made" href="mailto:online-books@oreilly.com" title="Online Books Comments"><link rel="up" href="ch08_01.htm" webstripperlinkwas="ch08_01.htm" title="8. Process Handling"><link rel="prev" href="ch08_02.htm" webstripperlinkwas="ch08_02.htm" title="8.2 Job Control"><link rel="next" href="ch08_04.htm" webstripperlinkwas="ch08_04.htm" title="8.4 trap"></HEAD
><body bgcolor="#FFFFFF" text="#000000"><div class="htmlnav"><h1><img src="gifs/smbanner.gif" webstripperlinkwas="gifs/smbanner.gif" alt="Learning the Korn Shell" usemap="#srchmap" border="0"></H1
><map name="srchmap"><area shape="RECT" coords="0,0,466,66" href="index.htm" webstripperlinkwas="http://www.ms.itb.ac.id/buku/unix-bookshelf/ksh/index.htm" alt="Learning the Korn Shell"><area shape="RECT" coords="467,0,514,18" href="jobjects/fsearch.htm" webstripperlinkwas="jobjects/fsearch.htm" alt="Search this book"></MAP
><table width="515" border="0" cellspacing="0" cellpadding="0"><tr><td align="LEFT" valign="TOP" width="172"><a class="SECT1" href="ch08_02.htm" webstripperlinkwas="ch08_02.htm" title="8.2 Job Control"><img src="../gifs/txtpreva.gif" webstripperlinkwas="../gifs/txtpreva.gif" alt="Previous: 8.2 Job Control" border="0"></A
></TD
><td align="CENTER" valign="TOP" width="171"><b><font face="ARIEL,HELVETICA,HELV,SANSERIF" size="-1">Chapter 8<br>Process Handling</FONT
></B
></TD
><td align="RIGHT" valign="TOP" width="172"><a class="SECT1" href="ch08_04.htm" webstripperlinkwas="ch08_04.htm" title="8.4 trap"><img src="../gifs/txtnexta.gif" webstripperlinkwas="../gifs/txtnexta.gif" alt="Next: 8.4 trap" border="0"></A
></TD
></TR
></TABLE
>&nbsp;<hr align="LEFT" width="515" title="footer"></DIV
><div class="SECT1"><h2 class="sect1"><a class="title" name="KSH-CH-8-SECT-3">8.3 Signals</A
></H2
><p class="para"><a class="indexterm" name="KSH-CH-8-IX-SIGNALS"></A
><a class="indexterm" name="AUTOID-13653"></A
><a class="indexterm" name="AUTOID-13655"></A
>We mentioned earlier that typing <span class="acronym">CTRL-Z</SPAN
> to suspend a job is similar to 
typing <span class="acronym">CTRL-C</SPAN
> to stop a job, except that you can resume the job later.  
They are actually similar in a deeper way: both are particular cases
of the act of sending a <em class="emphasis">signal</EM
> to a process.</P
><p class="para"><a class="indexterm" name="AUTOID-13663"></A
>A signal is a message that one process
sends to another when some abnormal
event takes place or when it wants the other process to do something.
Most of the time, a process send a signal to a subprocess it created.
You're undoubtedly already comfortable with the idea that one process
can communicate with another through an I/O pipeline; think of a signal
as another way for processes to communicate with each other.  <a class="indexterm" name="AUTOID-13666"></A
>
(In fact, any textbook on operating systems will tell you that both
are examples of the general concept of <em class="emphasis">interprocess communication</EM
>,
or IPC.)
[6]</P
><blockquote class="footnote"><p class="para">[6] <a class="indexterm" name="AUTOID-13671"></A
><a class="indexterm" name="AUTOID-13674"></A
><a class="indexterm" name="AUTOID-13678"></A
>Pipes and signals were the only IPC mechanisms in early versions of
UNIX. More modern versions like System V and 4.x BSD have additional
mechanisms, such as sockets, named pipes, and shared memory.<a class="indexterm" name="AUTOID-13682"></A
>
Named pipes are accessible to shell programmers through the <em class="emphasis">mknod(1)</EM
>
command, which is beyond the scope of this book.</P
></BLOCKQUOTE
><p class="para">Depending on the version of UNIX, there are two or three dozen
types of signals, including a few that can be used for whatever purpose
a programmer wishes. Signals have numbers (from 1 to the number of 
signals the system supports) and names; we'll use the latter.  <a class="indexterm" name="AUTOID-13686"></A
><a class="indexterm" name="AUTOID-13689"></A
>
You can get
a list of all the signals on your system, by name and number,
by typing <b class="emphasis.bold">kill -l</B
>. Bear in mind, when you write shell code
involving signals, that signal names are more portable to other
versions of UNIX than signal numbers.</P
><div class="sect2"><h3 class="sect2"><a class="title" name="KSH-CH-8-SECT-3.1">8.3.1 Control-key Signals</A
></H3
><p class="para"><a class="indexterm" name="KSH-CH-8-IX-SIGNALS-SENDING-CTRL-KEYS"></A
><a class="indexterm" name="AUTOID-13699"></A
><a class="indexterm" name="AUTOID-13702"></A
><a class="indexterm" name="AUTOID-13705"></A
><a class="indexterm" name="AUTOID-13708"></A
><a class="indexterm" name="AUTOID-13710"></A
><a class="indexterm" name="AUTOID-13712"></A
>When you type <span class="acronym">CTRL-C</SPAN
>, you tell the shell to send the INT (for &quot;interrupt&quot;)
signal to the current job; <kbd class="keycap">[CTRL-Z]</KBD
> sends TSTP (on most systems, for &quot;terminal 
stop&quot;). You can also send the current job a QUIT signal 
by typing <b class="emphasis.bold">CTRL-\</B
> (control-backslash);
this is sort of like a &quot;stronger&quot; version of <kbd class="keycap">[CTRL-C]</KBD
>.
[7]
You would normally
use <kbd class="keycap">[CTRL-]</KBD
>&nbsp;when (and <em class="emphasis">only</EM
> when) <kbd class="keycap">[CTRL-C]</KBD
> doesn't work.  </P
><blockquote class="footnote"><p class="para">[7] <a class="indexterm" name="AUTOID-13721"></A
><kbd class="keycap">[CTRL-]</KBD
>\&nbsp;can also cause the shell to leave a file called <em class="emphasis">core</EM
> in your
current directory. This file contains an image of the process to which
you sent the signal; a programmer could use it to help debug
the program that was running. The file's name is a (very) old-fashioned
term for a computer's memory. Other signals leave these &quot;core dumps&quot;
as well; you should feel free to delete them unless a systems programmer
tells you otherwise.</P
></BLOCKQUOTE
><p class="para"><a class="indexterm" name="AUTOID-13729"></A
><a class="indexterm" name="AUTOID-13732"></A
>As we'll see soon,
there is also a &quot;panic&quot; signal called KILL that you can send to a process
when even <kbd class="keycap">[CTRL-]</KBD
>&nbsp;doesn't work. But it isn't attached to any control key, 
which means that you can't use it to stop the currently running process.<a class="indexterm" name="AUTOID-13735"></A
><a class="indexterm" name="AUTOID-13738"></A
><a class="indexterm" name="AUTOID-13741"></A
>
INT, TSTP, and QUIT are the only signals you can use with control keys.
[8]</P
><blockquote class="footnote"><p class="para">[8] Some BSD-derived systems have additional control-key signals.</P
></BLOCKQUOTE
><p class="para"><a class="indexterm" name="AUTOID-13747"></A
>You can customize the control keys used to send signals with options
of the <em class="emphasis">stty</EM
>(1) command. These vary from system to system-consult
your man page for the command-but the usual syntax is 
<b class="emphasis.bold">stty</B
> <em class="emphasis">signame char</EM
>. <em class="emphasis">signame</EM
> is a name for the signal
that, unfortunately, is often not the same as the names we use 
here. <a class="xref" href="ch01_09.htm" webstripperlinkwas="ch01_09.htm#KSH-CH-1-TAB-6" title="Control Keys">Table 1.7</A
> in <a class="xref" href="ch01_01.htm" webstripperlinkwas="ch01_01.htm" title="Korn Shell Basics">Chapter 1, Korn Shell Basics</A
> lists <em class="emphasis">stty</EM
> names for signals
found on all versions of UNIX. <em class="emphasis">char</EM
> is the control character,
which you can give in the same notation we use. For example,
to set your INT key to <kbd class="keycap">[CTRL-X]</KBD
> on most systems, use:</P
><p class="para"><blockquote class="screen"><pre class="screen">stty intr ^X</PRE
></BLOCKQUOTE
></P
><p class="para">Now that we've told you how to do this, we should add that we don't
recommend it. Changing your signal keys could lead to trouble if
someone else has to stop a runaway process on your machine.<a class="indexterm" name="AUTOID-13762"></A
></P
><p class="para"><a class="indexterm" name="AUTOID-13764"></A
>Most of the other signals are used by the operating system to advise 
processes of error conditions, like a bad machine code instruction, bad 
memory address, or division by zero, or &quot;interesting&quot; events 
such as a user logging out or a timer (&quot;alarm&quot;) going off.
The remaining signals are used for esoteric error conditions that are
of interest only to low-level systems programmers;
newer versions of UNIX have more and more arcane signal types.</P
></DIV
><div class="sect2"><h3 class="sect2"><a class="title" name="KSH-CH-8-SECT-3.2">8.3.2 kill</A
></H3
><p class="para"><a class="indexterm" name="KSH-CH-8-IX-KILL"></A
>You can use the built-in shell command <b class="emphasis.bold">kill</B
> to send a
signal to any process you created-not just the currently running job.<a class="indexterm" name="AUTOID-13773"></A
>
<b class="emphasis.bold">kill</B
> takes as argument the process ID, job number, or command name
of the process to which you want to 
send the signal.  <a class="indexterm" name="AUTOID-13777"></A
><a class="indexterm" name="AUTOID-13780"></A
><a class="indexterm" name="AUTOID-13783"></A
><a class="indexterm" name="AUTOID-13786"></A
>
By default, <b class="emphasis.bold">kill</B
> sends the TERM 
(&quot;terminate&quot;) signal,
which usually has the same effect as the INT signal that you send with 
<kbd class="keycap">[CTRL-C]</KBD
>. But you can specify a different signal by using
the signal name (or number) as an option, preceded by a dash.</P
><p class="para"><b class="emphasis.bold">kill</B
> is so-named because of the nature of the default TERM signal,
but there is another reason, which has to do with the way UNIX handles
signals in general. The full details are too complex to go into here,
but the following explanation should suffice.</P
><p class="para"><a class="indexterm" name="AUTOID-13793"></A
>Most signals cause a process that receives them to roll over and die;
therefore if you send any one of these signals, you &quot;kill&quot; the process
that receives it.
However, programs can be set up to &quot;trap&quot; specific signals and take
some other action.<a class="indexterm" name="AUTOID-13796"></A
><a class="indexterm" name="AUTOID-13799"></A
><a class="indexterm" name="AUTOID-13802"></A
>
For example, a text editor would do well to save the file being
edited before terminating 
when it receives a signal such as INT, TERM, or QUIT. Determining
what to do when various signals come in is part of the fun of UNIX
systems programming.</P
><p class="para"><a class="indexterm" name="KSH-CH-8-IX-JOBS-WAYS-REFER-BY-JOB-NUMBER"></A
><a class="indexterm" name="KSH-CH-8-IX-PERCENT-SPECIFYING-JOBS-2"></A
>Here is an example of <b class="emphasis.bold">kill</B
>. Say you have a <b class="emphasis.bold">fred</B
>
process in the background, with process ID 480 and
job number 1, that needs to be stopped.
You would start with this command:</P
><p class="para"><blockquote class="screen"><pre class="screen">$ <b class="emphasis.bold">kill %1</B
></PRE
></BLOCKQUOTE
></P
><p class="para">If you were successful, you would see a message like this:</P
><p class="para"><blockquote class="screen"><pre class="screen">[1] + Terminated                fred &amp;</PRE
></BLOCKQUOTE
></P
><p class="para"><a class="indexterm" name="AUTOID-13822"></A
><a class="indexterm" name="AUTOID-13825"></A
>If you don't see this, then the TERM signal failed to terminate the job.
The next step would be to try QUIT:</P
><p class="para"><blockquote class="screen"><pre class="screen">$ <b class="emphasis.bold">kill -QUIT %1</B
></PRE
></BLOCKQUOTE
></P
><p class="para">If that worked, you would see these messages:</P
><p class="para"><blockquote class="screen"><pre class="screen">fred[1]: 480 Quit(coredump)
[1] +  Done(131)                fred &amp;</PRE
></BLOCKQUOTE
></P
><p class="para">The 131 is the exit status returned by <b class="emphasis.bold">fred</B
>.
[9]<a class="indexterm" name="AUTOID-13844"></A
>
But if even QUIT doesn't work, the &quot;last-ditch&quot; method would be to use 
KILL:</P
><blockquote class="footnote"><p class="para">[9] <a class="indexterm" name="AUTOID-13838"></A
>When a shell script is sent a signal, it exits with status 128+<em class="emphasis">N</EM
>,
where <em class="emphasis">N</EM
> is the number of the signal it received
(128 changes to 256 in future releases). In this case,
<b class="emphasis.bold">fred</B
> is a shell script, and QUIT happens to be signal number 3.</P
></BLOCKQUOTE
><p class="para"><blockquote class="screen"><pre class="screen">$ <b class="emphasis.bold">kill -KILL %1</B
></PRE
></BLOCKQUOTE
></P
><p class="para">(Notice how this has the flavor of &quot;yelling&quot; at the runaway process.)
This produces the message:</P
><p class="para"><blockquote class="screen"><pre class="screen">[1] + Killed                    fred &amp;</PRE
></BLOCKQUOTE
></P
><p class="para"><a class="indexterm" name="AUTOID-13854"></A
><a class="indexterm" name="AUTOID-13855"></A
>It is impossible for a process to &quot;trap&quot; a KILL signal-the operating
system should terminate the process immediately and
unconditionally. If it doesn't,
then either your process is in one of the &quot;funny states&quot; we'll
see later in this chapter, or (far less likely) there's a bug
in your version of UNIX.</P
><p class="para">Here's another example.</P
><div class="task"><h4>Task 8.1</H4
><blockquote class="taskinfo"><p class="para">Write a script called <b class="emphasis.bold">killalljobs</B
> that kills all background
jobs.</P
></BLOCKQUOTE
><p class="para">The solution to this task is simple, relying on <b class="emphasis.bold">jobs -p</B
>:<a class="indexterm" name="AUTOID-13863"></A
></P
><p class="para"><blockquote class="screen"><pre class="screen">kill &quot;$@&quot; $(jobs -p)</PRE
></BLOCKQUOTE
></P
></DIV
><p class="para"><a class="indexterm" name="AUTOID-13870"></A
><a class="indexterm" name="AUTOID-13873"></A
><a class="indexterm" name="AUTOID-13876"></A
>You may be tempted to use the KILL signal immediately, instead of trying TERM
(the default) and QUIT
first. Don't do this. TERM and QUIT are designed to give a 
process
the chance to &quot;clean up&quot; before exiting, whereas KILL will stop the
process, wherever it may be in its computation. <em class="emphasis">Use KILL only as a 
last resort!</EM
></P
><p class="para">You can use the <b class="emphasis.bold">kill</B
> command with any process you create, 
not just 
jobs in the background of your current shell. For example, if you use
a windowing system, then you may have several terminal windows, each of
which runs its own shell. If one shell is running a process that you 
want
to stop, you can <b class="emphasis.bold">kill</B
> it from another window-but you can't refer
to it with a job number because it's running under a different shell.  
You must instead use its process ID.<a class="indexterm" name="AUTOID-13883"></A
></P
></DIV
><div class="sect2"><h3 class="sect2"><a class="title" name="KSH-CH-8-SECT-3.3">8.3.3 ps</A
></H3
><p class="para"><a class="indexterm" name="KSH-CH-8-IX-PS"></A
>This is probably the only situation in which a casual user would need
to know the ID of a process. The command <em class="emphasis">ps</EM
>(1) gives you this
information; however, it can give you lots of extra information
that you must wade through as well.</P
><p class="para"><em class="emphasis">ps</EM
> is a complex command. It takes several options, some of which
differ from one version of UNIX to another. To add to the confusion,
you may need different options on different UNIX versions to get the 
same information!  <a class="indexterm" name="AUTOID-13892"></A
><a class="indexterm" name="AUTOID-13896"></A
><a class="indexterm" name="AUTOID-13900"></A
><a class="indexterm" name="AUTOID-13904"></A
><a class="indexterm" name="AUTOID-13908"></A
><a class="indexterm" name="AUTOID-13912"></A
>
We will use options available on the two major types
of UNIX systems, those derived from System V (such as most of the 
versions for Intel 386/486 PCs, as well as IBM's AIX and 
Hewlett-Packard's HP/UX) and BSD (DEC's Ultrix, SunOS). If you 
aren't sure which kind of UNIX
version you have, try the System V options first.</P
><p class="para">You can invoke <em class="emphasis">ps</EM
> in its simplest form without any options.
In this case, it will print a line of information about the current 
login shell and any processes running under it (i.e., background jobs).<a class="indexterm" name="AUTOID-13918"></A
>
For example, if you invoked three background jobs, as we saw earlier in
the chapter, <em class="emphasis">ps</EM
> on System V-derived versions of UNIX
would produce output that looks something like this:</P
><p class="para"><blockquote class="screen"><pre class="screen">   PID TTY      TIME COMD
   146 pts/10   0:03 ksh
  2349 pts/10   0:03 fred
  2367 pts/10   0:17 bob
  2389 pts/10   0:09 dave
  2390 pts/10   0:00 ps</PRE
></BLOCKQUOTE
></P
><p class="para"><a class="indexterm" name="AUTOID-13925"></A
>The output on BSD-derived systems looks like this:</P
><p class="para"><blockquote class="screen"><pre class="screen">   PID TT STAT  TIME COMMAND
   146 10 S     0:03 /bin/ksh -i
  2349 10 R     0:03 fred
  2367 10 D     0:17 bob -f /dev/rmt0
  2389 10 R     0:09 dave
  2390 10 R     0:00 ps</PRE
></BLOCKQUOTE
></P
><p class="para">(You can ignore the STAT column.)   <a class="indexterm" name="AUTOID-13931"></A
><a class="indexterm" name="AUTOID-13935"></A
>
This is a bit like the <b class="emphasis.bold">jobs</B
> command. PID is the process ID;
TTY (or TT) is the terminal (or pseudo-terminal, if you are using a windowing
system) the process was invoked from; TIME is the amount of processor time
(not real or &quot;wall clock&quot; time) the process has used so far; COMD
(or COMMAND) is the command. Notice that the BSD version includes
the command's arguments, if any;
also notice that the first line reports on the
parent shell process, and in the last line, <em class="emphasis">ps</EM
> reports on itself.</P
><p class="para"><em class="emphasis">ps</EM
> without arguments lists all processes started from the 
current terminal or pseudo-terminal. But since <em class="emphasis">ps</EM
> is not a shell
command, it doesn't
correlate process IDs with the shell's job numbers. It also doesn't 
help you find the ID of the runaway process in another shell window.  </P
><p class="para">To get this information, use <em class="emphasis">ps</EM
> <b class="emphasis.bold">-a</B
> (for &quot;all&quot;);
this lists information on a different set of processes, depending on
your UNIX version.</P
><p class="para"><a class="indexterm" name="KSH-CH-8-IX-PS-A-SYSTEM-V-VERSION"></A
><a class="indexterm" name="AUTOID-13950"></A
></P
><div class="sect3"><h4 class="sect3"><a class="title" name="KSH-CH-8-SECT-3.3.1">8.3.3.1 System V</A
></H4
><p class="para">Instead of listing all of those that were started under a specific
terminal, 
<em class="emphasis">ps</EM
> <b class="emphasis.bold">-a</B
> on System V-derived systems
lists all processes associated with any terminal
that aren't group leaders. <a class="indexterm" name="AUTOID-13959"></A
>
For our purposes, a &quot;group leader&quot;
is the parent shell of a terminal or window. Therefore, if you are
using a windowing system, <em class="emphasis">ps</EM
> <b class="emphasis.bold">-a</B
> lists all jobs started 
in all windows (by all users), but not their parent shells.</P
><p class="para">Assume that, in the above example, you have only one terminal or
window. Then <em class="emphasis">ps</EM
> <b class="emphasis.bold">-a</B
> will print the same output as plain <em class="emphasis">ps</EM
>
except for the first line, since that's the parent shell.
This doesn't seem to be very useful.  </P
><p class="para">But consider what
happens when you have multiple windows open.  <a class="indexterm" name="AUTOID-13969"></A
><a class="indexterm" name="AUTOID-13971"></A
>
Let's say you have
three windows, all running terminal emulators like <em class="emphasis">xterm</EM
>
for the X Window System.  
You start background jobs <b class="emphasis.bold">fred</B
>, <b class="emphasis.bold">dave</B
>, and <b class="emphasis.bold">bob</B
> in 
windows
with pseudo-terminal numbers 1, 2, and 3, respectively. This situation
is shown in <a class="xref" href="#KSH-CH-8-FIG-0" title="Background jobs in multiple windows">Figure 8.1</A
>.</P
><h4 class="figure"><a class="title" name="KSH-CH-8-FIG-0">Figure 8.1: Background jobs in multiple windows</A
></H4
><img class="graphic" src="figs/korn0801.gif" webstripperlinkwas="figs/korn0801.gif" alt="Figure 8.1"><p class="para">Assume you are in the uppermost window. If you type <b class="emphasis.bold">ps</B
>, you will see
something like this:</P
><p class="para"><blockquote class="screen"><pre class="screen">   PID TTY      TIME COMD
   146 pts/1    0:03 ksh
  2349 pts/1    0:03 fred
  2390 pts/1    0:00 ps</PRE
></BLOCKQUOTE
></P
><p class="para">But if you type <b class="emphasis.bold">ps -a</B
>, you will see this:</P
><p class="para"><blockquote class="screen"><pre class="screen">   PID TTY      TIME COMD
  2349 pts/1    0:03 fred
  2367 pts/2    0:17 bob
  2389 pts/3    0:09 dave
  2390 pts/1    0:00 ps</PRE
></BLOCKQUOTE
></P
><p class="para"><a class="indexterm" name="AUTOID-13990"></A
><a class="indexterm" name="KSH-CH-8-IX-KILL-KILLING-RUNAWAY-PROCESSES"></A
><a class="indexterm" name="AUTOID-13996"></A
><a class="indexterm" name="AUTOID-13999"></A
><a class="indexterm" name="AUTOID-14002"></A
>Now you should see how <b class="emphasis.bold">ps -a</B
> can help you track down a runaway
process. If it's <b class="emphasis.bold">dave</B
>, you can type <b class="emphasis.bold">kill 2389</B
>.
If that doesn't work, try <b class="emphasis.bold">kill -QUIT 2389</B
>, or in the worst case,
<b class="emphasis.bold">kill -KILL 2389</B
>.<a class="indexterm" name="AUTOID-14008"></A
></P
></DIV
><div class="sect3"><h4 class="sect3"><a class="title" name="KSH-CH-8-SECT-3.3.2">8.3.3.2 BSD</A
></H4
><p class="para"><a class="indexterm" name="KSH-CH-8-IX-PS-A-BSD-VERSION"></A
><a class="indexterm" name="AUTOID-14016"></A
>On BSD-derived systems, <em class="emphasis">ps</EM
> <b class="emphasis.bold">-a</B
> lists all jobs that were started
on any terminal; in other words, it's a bit like concatenating the
the results of plain <em class="emphasis">ps</EM
> for every user on the system.<a class="indexterm" name="AUTOID-14023"></A
>
Given the above scenario, <em class="emphasis">ps</EM
> <b class="emphasis.bold">-a</B
> will show you all processes
that the System V version shows, plus the group leaders (parent shells).<a class="indexterm" name="AUTOID-14028"></A
></P
><p class="para">Unfortunately, <em class="emphasis">ps</EM
> <b class="emphasis.bold">-a</B
> (on any version of UNIX)
will not report processes that are in
certain pathological conditions where they &quot;forget&quot; things
like what shell invoked them and what terminal they belong to.<a class="indexterm" name="AUTOID-14032"></A
><a class="indexterm" name="AUTOID-14035"></A
><a class="indexterm" name="AUTOID-14038"></A
>
Such processes have colorful names (&quot;zombies,&quot; &quot;orphans&quot;) that
are actually used in UNIX technical literature, not just informally
by systems hackers. If you have a serious runaway process problem,
it's possible that the process has entered one of these states.</P
><p class="para">Let's not worry about why or how a process gets this way.
All you need to understand is that the process doesn't show up when
you type <b class="emphasis.bold">ps -a</B
>.  <a class="indexterm" name="KSH-CH-8-IX-PS-LISTING-ALL-PROCESSES"></A
><a class="indexterm" name="KSH-CH-8-IX-PS-E-SYSTEM-V"></A
><a class="indexterm" name="KSH-CH-8-IX-PS-AX-BSD"></A
>
You need another option to <em class="emphasis">ps</EM
> to see it:
on System V, it's <em class="emphasis">ps</EM
> <b class="emphasis.bold">-e</B
> (&quot;everything&quot;), whereas on BSD, it's
<em class="emphasis">ps</EM
> <b class="emphasis.bold">-ax</B
>.</P
><p class="para">These options tell <em class="emphasis">ps</EM
> to list processes that either weren't
started from terminals or &quot;forgot&quot; what terminal they were
started from. <a class="indexterm" name="AUTOID-14059"></A
>
The former category includes lots of
processes that you probably didn't even know existed: these
include basic processes that run the system and so-called
<em class="emphasis">daemons</EM
> (pronounced &quot;demons&quot;) that handle system services
like mail, printing, network file systems, etc.  </P
><p class="para">In fact, the output of <em class="emphasis">ps</EM
> <b class="emphasis.bold">-e</B
> or <em class="emphasis">ps</EM
> <b class="emphasis.bold">-ax</B
> is an excellent
source of education about UNIX system internals, if you're curious
about them.  <a class="indexterm" name="AUTOID-14068"></A
><a class="indexterm" name="AUTOID-14071"></A
>
Run the command on your system and, for each line of
the listing that looks interesting,
invoke <em class="emphasis">man</EM
> on the process name or look it up in the
Unix Programmer's Manual for your system.</P
><p class="para">User shells and processes are listed at the very bottom of 
<em class="emphasis">ps</EM
> <b class="emphasis.bold">-e</B
> or <em class="emphasis">ps</EM
> <b class="emphasis.bold">-ax</B
> output;
this is where you should look for runaway processes. Notice
that many processes in the listing have <code class="literal">?</CODE
> instead of
a terminal. Either these aren't supposed to have one (such as the
basic daemons) or they're runaways.
Therefore it's likely that if <em class="emphasis">ps</EM
> <b class="emphasis.bold">-a</B
> doesn't find a process
you're trying to kill, <em class="emphasis">ps</EM
> <b class="emphasis.bold">-e</B
> (or <em class="emphasis">ps</EM
> <b class="emphasis.bold">-ax</B
>)
will list it with <code class="literal">?</CODE
> in the TTY (or TT) column. You can determine
which process you want by looking at the COMD (or COMMAND) column.<a class="indexterm" name="AUTOID-14087"></A
><a class="indexterm" name="AUTOID-14088"></A
><a class="indexterm" name="AUTOID-14089"></A
><a class="indexterm" name="AUTOID-14090"></A
><a class="indexterm" name="AUTOID-14091"></A
></P
></DIV
></DIV
></DIV
><div class="htmlnav"><p></P
><hr align="LEFT" width="515" title="footer"><table width="515" border="0" cellspacing="0" cellpadding="0"><tr><td align="LEFT" valign="TOP" width="172"><a class="SECT1" href="ch08_02.htm" webstripperlinkwas="ch08_02.htm" title="8.2 Job Control"><img src="../gifs/txtpreva.gif" webstripperlinkwas="../gifs/txtpreva.gif" alt="Previous: 8.2 Job Control" border="0"></A
></TD
><td align="CENTER" valign="TOP" width="171"><a class="book" href="index.htm" webstripperlinkwas="http://www.ms.itb.ac.id/buku/unix-bookshelf/ksh/index.htm" title="Learning the Korn Shell"><img src="../gifs/txthome.gif" webstripperlinkwas="../gifs/txthome.gif" alt="Learning the Korn Shell" border="0"></A
></TD
><td align="RIGHT" valign="TOP" width="172"><a class="SECT1" href="ch08_04.htm" webstripperlinkwas="ch08_04.htm" title="8.4 trap"><img src="../gifs/txtnexta.gif" webstripperlinkwas="../gifs/txtnexta.gif" alt="Next: 8.4 trap" border="0"></A
></TD
></TR
><tr><td align="LEFT" valign="TOP" width="172">8.2 Job Control</TD
><td align="CENTER" valign="TOP" width="171"><a class="index" href="index/idx_0.htm" webstripperlinkwas="index/idx_0.htm" title="Book Index"><img src="../gifs/index.gif" webstripperlinkwas="../gifs/index.gif" alt="Book Index" border="0"></A
></TD
><td align="RIGHT" valign="TOP" width="172">8.4 trap</TD
></TR
></TABLE
><hr align="LEFT" width="515" title="footer"><img src="../gifs/smnavbar.gif" webstripperlinkwas="../gifs/smnavbar.gif" usemap="#map" border="0" alt="The UNIX CD Bookshelf Navigation"><map name="map"><area shape="RECT" coords="0,0,73,21" href="../index.html" webstripperlinkwas="http://www.ms.itb.ac.id/buku/unix-bookshelf/index.htm" alt="The UNIX CD Bookshelf"><area shape="RECT" coords="74,0,163,21" href="../upt/index.htm" webstripperlinkwas="http://www.ms.itb.ac.id/buku/unix-bookshelf/upt/index.htm" alt="UNIX Power Tools"><area shape="RECT" coords="164,0,257,21" href="../unixnut/index.htm" webstripperlinkwas="http://www.ms.itb.ac.id/buku/unix-bookshelf/unixnut/index.htm" alt="UNIX in a Nutshell"><area shape="RECT" coords="258,0,321,21" href="../vi/index.htm" webstripperlinkwas="http://www.ms.itb.ac.id/buku/unix-bookshelf/vi/index.htm" alt="Learning the vi Editor"><area shape="RECT" coords="322,0,378,21" href="../sedawk/index.htm" webstripperlinkwas="http://www.ms.itb.ac.id/buku/unix-bookshelf/sedawk/index.htm" alt="sed &amp; awk"><area shape="RECT" coords="379,0,438,21" href="index.htm" webstripperlinkwas="http://www.ms.itb.ac.id/buku/unix-bookshelf/ksh/index.htm" alt="Learning the Korn Shell"><area shape="RECT" coords="439,0,514,21" href="../lrnunix/index.htm" webstripperlinkwas="http://www.ms.itb.ac.id/buku/unix-bookshelf/lrnunix/index.htm" alt="Learning the UNIX Operating System"></MAP
></DIV
></BODY
></HTML
>
