<html><head>
<title>[Chapter 8] 8.5 Coroutines</TITLE>
<meta name="DC.title" content="Learning the Korn Shell"><meta name="DC.creator" content="Bill Rosenblatt"><meta name="DC.publisher" content="O'Reilly &amp; Associates, Inc."><meta name="DC.date" content="1998-08-03T21:15:32Z"><meta name="DC.type" content="Text.Monograph"><meta name="DC.format" content="text/html" scheme="MIME"><meta name="DC.source" content="1-56592-054-6" scheme="ISBN"><meta name="DC.language" content="en-US"><meta name="generator" content="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><link rev="made" href="mailto:online-books@oreilly.com" title="Online Books Comments"><link rel="up" href="ch08_01.htm" webstripperlinkwas="ch08_01.htm" title="8. Process Handling"><link rel="prev" href="ch08_04.htm" webstripperlinkwas="ch08_04.htm" title="8.4 trap"><link rel="next" href="ch08_06.htm" webstripperlinkwas="ch08_06.htm" title="8.6 Subshells"></HEAD
><body bgcolor="#FFFFFF" text="#000000"><div class="htmlnav"><h1><img src="gifs/smbanner.gif" webstripperlinkwas="gifs/smbanner.gif" alt="Learning the Korn Shell" usemap="#srchmap" border="0"></H1
><map name="srchmap"><area shape="RECT" coords="0,0,466,66" href="index.htm" webstripperlinkwas="http://www.ms.itb.ac.id/buku/unix-bookshelf/ksh/index.htm" alt="Learning the Korn Shell"><area shape="RECT" coords="467,0,514,18" href="jobjects/fsearch.htm" webstripperlinkwas="jobjects/fsearch.htm" alt="Search this book"></MAP
><table width="515" border="0" cellspacing="0" cellpadding="0"><tr><td align="LEFT" valign="TOP" width="172"><a class="SECT1" href="ch08_04.htm" webstripperlinkwas="ch08_04.htm" title="8.4 trap"><img src="../gifs/txtpreva.gif" webstripperlinkwas="../gifs/txtpreva.gif" alt="Previous: 8.4 trap" border="0"></A
></TD
><td align="CENTER" valign="TOP" width="171"><b><font face="ARIEL,HELVETICA,HELV,SANSERIF" size="-1">Chapter 8<br>Process Handling</FONT
></B
></TD
><td align="RIGHT" valign="TOP" width="172"><a class="SECT1" href="ch08_06.htm" webstripperlinkwas="ch08_06.htm" title="8.6 Subshells"><img src="../gifs/txtnexta.gif" webstripperlinkwas="../gifs/txtnexta.gif" alt="Next: 8.6 Subshells" border="0"></A
></TD
></TR
></TABLE
>&nbsp;<hr align="LEFT" width="515" title="footer"></DIV
><div class="SECT1"><h2 class="sect1"><a class="title" name="KSH-CH-8-SECT-5">8.5 Coroutines</A
></H2
><p class="para"><a class="indexterm" name="KSH-CH-8-IX-COROUTINES"></A
>We've spent the last several pages on almost microscopic details
of process behavior. Rather than continue our descent into the murky
depths, we'll revert to a higher-level view of processes.</P
><p class="para">Earlier in this chapter, we
covered ways of controlling multiple simultaneous jobs within an 
interactive login session; now we'll consider multiple process control
within shell programs.  <a class="indexterm" name="AUTOID-14450"></A
>
When two (or more) processes are explicitly
programmed to run simultaneously and possibly communicate with each
other, we call them <em class="emphasis">coroutines</EM
>.</P
><p class="para"><a class="indexterm" name="KSH-CH-8-IX-COROUTINES-PIPELINES-AS-EXAMPLE"></A
><a class="indexterm" name="KSH-CH-8-IX-PIPELINES"></A
>This is actually nothing new: a pipeline is an example of 
coroutines. The shell's pipeline construct 
encapsulates a fairly sophisticated set of rules about 
how processes interact with each other. If we take a closer look at 
these rules, we'll be better able to understand other ways of handling 
coroutines-most of which turn out to be simpler than pipelines.</P
><p class="para"><a class="indexterm" name="KSH-CH-8-IX-PIPELINES-SYSTEM-CALLS-USED-IN"></A
><a class="indexterm" name="AUTOID-14464"></A
><a class="indexterm" name="AUTOID-14466"></A
>When you invoke a simple pipeline, say <b class="emphasis.bold">ls | more</B
>, the shell 
invokes a series of UNIX primitive operations, a.k.a. <em class="emphasis">system calls</EM
>.
In effect, the shell tells UNIX to do the following things;
in case you're interested, we include in parentheses
the actual system call used at each step:<a class="indexterm" name="AUTOID-14470"></A
><a class="indexterm" name="AUTOID-14473"></A
><a class="indexterm" name="AUTOID-14476"></A
><a class="indexterm" name="AUTOID-14479"></A
></P
><ol class="orderedlist"><li class="listitem"><p class="para">Create two subprocesses, which we'll call P1 and P2 
(the <em class="emphasis">fork</EM
> system call).</P
></LI
><li class="listitem"><p class="para">Set up I/O between the processes so that P1's standard output feeds 
into P2's standard input (<em class="emphasis">pipe</EM
>).</P
></LI
><li class="listitem"><p class="para">Start <em class="emphasis">/bin/ls</EM
> in process P1 (<em class="emphasis">exec</EM
>).</P
></LI
><li class="listitem"><p class="para">Start <em class="emphasis">/bin/more</EM
> in process P2 (<em class="emphasis">exec</EM
>).</P
></LI
><li class="listitem"><p class="para">Wait for both processes to finish (<em class="emphasis">wait</EM
>).</P
></LI
></OL
><p class="para">You can probably imagine how the above steps change when the 
pipeline involves more than two processes.<a class="indexterm" name="AUTOID-14501"></A
><a class="indexterm" name="AUTOID-14502"></A
><a class="indexterm" name="AUTOID-14503"></A
></P
><p class="para">Now let's make things simpler. We'll see how to get multiple processes 
to run 
at the same time if the processes do not need to communicate. For 
example, we want the processes <b class="emphasis.bold">dave</B
> and <b class="emphasis.bold">bob</B
> to run as 
coroutines, without communication, in a shell script. Our initial 
solution would be this:</P
><p class="para"><blockquote class="screen"><pre class="screen">dave &amp;
bob</PRE
></BLOCKQUOTE
></P
><p class="para">Assume for the moment that <b class="emphasis.bold">bob</B
> is the last command in the script.  
The above will work-but only if <b class="emphasis.bold">dave</B
> finishes first.  <a class="indexterm" name="AUTOID-14512"></A
>
If  <b class="emphasis.bold">dave</B
> is still running when the script finishes, then it becomes an 
<em class="emphasis">orphan</EM
>, i.e., it enters one of the &quot;funny states&quot; we mentioned 
earlier in this chapter. Never mind the details of orphanhood; just 
believe that you don't want this to happen, and if it does, you may
need to use the &quot;runaway process&quot; method of stopping it, discussed
earlier in this chapter.</P
><div class="sect2"><h3 class="sect2"><a class="title" name="KSH-CH-8-SECT-5.1">8.5.1 wait</A
></H3
><p class="para"><a class="indexterm" name="KSH-CH-8-IX-WAIT"></A
>There is a way of making sure the script doesn't finish before 
<b class="emphasis.bold">dave</B
> does: the built-in command <b class="emphasis.bold">wait</B
>. Without arguments, 
<b class="emphasis.bold">wait</B
> simply waits until all background jobs have finished. So to 
make sure the above code behaves properly, we would 
add <b class="emphasis.bold">wait</B
>, like this:</P
><p class="para"><blockquote class="screen"><pre class="screen">dave &amp;
bob
wait</PRE
></BLOCKQUOTE
></P
><p class="para">Here, if <b class="emphasis.bold">bob</B
> finishes first, the parent shell will wait for 
<b class="emphasis.bold">dave</B
> to finish before finishing itself.</P
><p class="para"><a class="indexterm" name="AUTOID-14532"></A
>If your script has more than one background job and you need to wait for 
specific ones to finish, you can give <b class="emphasis.bold">wait</B
> the same type of job 
argument (with a percent sign) as you would use with <b class="emphasis.bold">kill</B
>, 
<b class="emphasis.bold">fg</B
>, or <b class="emphasis.bold">bg</B
>.  </P
><p class="para">However, you will probably find that <b class="emphasis.bold">wait</B
> 
without arguments suffices for all coroutines you will ever program.  
Situations in which you would need to wait for specific background jobs 
are quite complex and beyond the scope of this book.<a class="indexterm" name="AUTOID-14541"></A
></P
></DIV
><div class="sect2"><h3 class="sect2"><a class="title" name="KSH-CH-8-SECT-5.2">8.5.2 Advantages and Disadvantages of Coroutines</A
></H3
><p class="para"><a class="indexterm" name="KSH-CH-8-IX-COROUTINES-PERFORMANCE-ISSUES"></A
>In fact, you may be wondering why you would ever need to program 
coroutines that don't communicate with each other. For example, why not 
just run <b class="emphasis.bold">bob</B
> after <b class="emphasis.bold">dave</B
> in the usual way? What advantage is 
there in running the two jobs simultaneously?  </P
><p class="para"><a class="indexterm" name="AUTOID-14551"></A
>If you are running 
on a computer with one processor (CPU), then there is a performance
advantage-but only if you have the <b class="emphasis.bold">bgnice</B
> option turned off
(see <a class="xref" href="ch03_01.htm" webstripperlinkwas="ch03_01.htm" title="Customizing Your Environment">Chapter 3, Customizing Your Environment</A
>), and even then only in certain situations.</P
><p class="para"><a class="indexterm" name="AUTOID-14557"></A
>Roughly speaking, you can
characterize a process in terms of how it uses system resources in
three ways: whether it is <em class="emphasis">CPU intensive</EM
> (e.g., does lots of
number crunching), <em class="emphasis">I/O intensive</EM
> (does a lot of reading or
writing to the disk), or <em class="emphasis">interactive</EM
> (requires user
intervention).  </P
><p class="para">We already know from <a class="xref" href="ch01_01.htm" webstripperlinkwas="ch01_01.htm" title="Korn Shell Basics">Chapter 1</A
> that it makes no sense to run an
interactive job in the background. But apart from that,
the more two or more processes differ with respect to these three
criteria, the more advantage there is in running them simultaneously.  
For example, a number-crunching statistical calculation would do well
when running at the same time as a long, I/O-intensive database query.</P
><p class="para">On the other hand, if two processes use resources in similar ways,
it may even be less efficient to run them at the same time
as it would be to run them sequentially. Why? Basically, because
under such circumstances, the operating system often has to 
&quot;time-slice&quot; the resource(s) in contention.  </P
><p class="para">For example, if both
processes are &quot;disk hogs,&quot; the operating system may enter a mode
where it constantly switches control of the disk back and forth between the
two competing processes; the system ends up spending at least as
much time doing the switching as it does on the processes themselves.<a class="indexterm" name="AUTOID-14567"></A
>
This phenomenon is known as <em class="emphasis">thrashing</EM
>; at its most severe,
it can cause a system to come to a virtual standstill.
Thrashing is a common problem; system administrators and operating 
system designers both spend lots of time trying to minimize it.</P
></DIV
><div class="sect2"><h3 class="sect2"><a class="title" name="KSH-CH-8-SECT-5.3">8.5.3 Parallelization</A
></H3
><p class="para"><a class="indexterm" name="KSH-CH-8-IX-COROUTINES-MULTIPLE-CPUS"></A
><a class="indexterm" name="KSH-CH-8-IX-PARALLELIZING-SHELL-SCRIPTS"></A
>But if you have a computer with multiple CPUs (such as a Pyramid, 
Sequent, or Sun MP), you should be less concerned about thrashing.
Furthermore, coroutines can provide dramatic increases in 
speed on this type of machine, which is often called a
<em class="emphasis">parallel</EM
> computer; analogously,
breaking up a process into coroutines is sometimes called 
<em class="emphasis">parallelizing</EM
> the job.  </P
><p class="para">Normally, when you start a background job on a multiple-CPU machine,
the computer will assign it to the next available processor. This 
means that the two jobs are actually-not just metaphorically-running 
at the same time.  </P
><p class="para">In this case, the running time of the coroutines is essentially equal to 
that of the longest-running job plus a bit of overhead, instead of the 
sum of the run times of all processes (although if the CPUs all share
a common disk drive, the possibility of I/O-related thrashing still
exists). In the best case-all jobs 
having the same run time and no I/O contention-you get a
speedup factor equal to the number of jobs.<a class="indexterm" name="AUTOID-14583"></A
></P
><p class="para">Parallelizing a program is often not easy; there are several
subtle issues involved and there's plenty of room for error.
Nevertheless,
it's worthwhile to know how to parallelize a shell script whether or
not you have a parallel machine, especially since such machines are
becoming more and more common.</P
><p class="para">We'll show how to do this-and give you an idea of some of the
problems involved-by means of a simple task whose 
solution is amenable to parallelization.</P
><div class="task"><h4>Task 8.3</H4
><blockquote class="taskinfo"><p class="para">Write a utility that allows you to make multiple copies of
a file at the same time.</P
></BLOCKQUOTE
><p class="para">We'll call this script <em class="emphasis">mcp</EM
>. The command 
<b class="emphasis.bold">mcp</B
> <em class="emphasis">filename dest1 dest2 ...</EM
> should copy <em class="emphasis">filename</EM
>
to all of the destinations given. The code for this 
should be fairly obvious:</P
><p class="para"><blockquote class="screen"><pre class="screen">file=$1
shift
for dest in &quot;$@&quot;; do
    cp $file $dest
done</PRE
></BLOCKQUOTE
></P
><p class="para">Now let's say we have a parallel computer and we want this command
to run as fast as possible.  <a class="indexterm" name="AUTOID-14597"></A
>
To parallelize this script, it's a simple
matter of firing off the <em class="emphasis">cp</EM
> commands in the background
and adding a <b class="emphasis.bold">wait</B
> at the end:</P
><p class="para"><blockquote class="screen"><pre class="screen">file=$1
shift
for dest in &quot;$@&quot;; do
    cp $file $dest &amp;
done
wait</PRE
></BLOCKQUOTE
></P
><p class="para">Simple, right? Well, there is one little problem:
what happens if the user specifies duplicate destinations?
If you're lucky, the file just gets copied to the same place twice.  
Otherwise, the identical <em class="emphasis">cp</EM
> commands will interfere with each other, 
possibly resulting in a file that contains two interspersed copies
of the original file. In contrast, if you give the regular <em class="emphasis">cp</EM
>
command two arguments that point to the same file, it will print an
error message and do nothing.</P
><p class="para">To fix this problem, we would have to write code that checks the
argument list for duplicates. Although this isn't too hard to do
(see the exercises at the end of this chapter), the time it takes
that code to run might offset any gain in speed from parallelization;
furthermore, the code that does the checking detracts from the
simple elegance of the script.</P
><p class="para">As you can see, even a seemingly trivial parallelization task
has problems resulting from multiple processes having concurrent
access to a given system resource (a file in this case).
Such problems, known as <em class="emphasis">concurrency control</EM
> issues, become
much more difficult as the complexity of the application
increases. Complex concurrent programs often have much more
code for handling the special cases than for the actual job
the program is supposed to do!</P
><p class="para">Therefore it shouldn't surprise you that much research has been
and is being done on parallelization, the ultimate goal being
to devise a tool that parallelizes code automatically.  
(Such tools do exist; they usually work in the confines of some
narrow subset of the problem.)
Even if you don't have access to a multiple-CPU machine, 
parallelizing a shell script is an interesting exercise that should 
acquaint you with some of the issues that surround coroutines.<a class="indexterm" name="AUTOID-14610"></A
><a class="indexterm" name="AUTOID-14611"></A
></P
></DIV
></DIV
><div class="sect2"><h3 class="sect2"><a class="title" name="KSH-CH-8-SECT-5.4">8.5.4 Coroutines with Two-way Pipes</A
></H3
><p class="para"><a class="indexterm" name="AUTOID-14615"></A
><a class="indexterm" name="AUTOID-14619"></A
><a class="indexterm" name="KSH-CH-8-IX-TWO-WAY-PIPES"></A
>Now that we have seen how to program coroutines that don't communicate
with each other, we'll build on that foundation and discuss how to
get them to communicate-in a more sophisticated way than with a 
pipeline. The Korn shell has
a set of features that allow programmers to set up two-way 
communication between coroutines.  <a class="indexterm" name="AUTOID-14625"></A
>
These features aren't included in most Bourne shells.</P
><p class="para"><a class="indexterm" name="AUTOID-14628"></A
><a class="indexterm" name="AUTOID-14631"></A
><a class="indexterm" name="AUTOID-14634"></A
>If you start a background process by appending <b class="emphasis.bold">|&amp;</B
> to a command
instead of <b class="emphasis.bold">&amp;</B
>, the Korn shell will set up a special two-way 
pipeline between the parent shell and the new background process.  <a class="indexterm" name="AUTOID-14639"></A
><a class="indexterm" name="AUTOID-14643"></A
>
<b class="emphasis.bold">read -p</B
> in the parent shell reads a line of the background
process' standard output; similarly, <b class="emphasis.bold">print -p</B
> in the parent shell 
feeds into the standard input of the background process. 
<a class="xref" href="#KSH-CH-8-FIG-1" title="Coroutine I/O">Figure 8.2</A
> shows how this works.<a class="indexterm" name="AUTOID-14650"></A
></P
><h4 class="figure"><a class="title" name="KSH-CH-8-FIG-1">Figure 8.2: Coroutine I/O</A
></H4
><img class="graphic" src="figs/korn0802.gif" webstripperlinkwas="figs/korn0802.gif" alt="Figure 8.2"><p class="para"><a class="indexterm" name="AUTOID-14657"></A
>This scheme has some intriguing possibilities. Notice the following 
things: first, the parent shell communicates with the background process 
independently of its own standard input and output. Second, the 
background process need not have any idea that a shell script is 
communicating with it in this manner. This means that the background 
process can be any pre-existing program that uses its standard input 
and output in normal ways.</P
><p class="para">Here's a task that shows a simple example:</P
><div class="task"><h4>Task 8.4</H4
><blockquote class="taskinfo"><p class="para"><a class="indexterm" name="KSH-CH-8-IX-DC"></A
><a class="indexterm" name="KSH-CH-8-IX-REVERSE-POLISH-NOTATION-RPN"></A
><a class="indexterm" name="KSH-CH-8-IX-ALGEBRAIC-NOTATION"></A
>You would like to have an online calculator, but the existing UNIX
utility <em class="emphasis">dc</EM
>(1) uses Reverse Polish Notation (RPN), <em class="emphasis">a la</EM
> 
Hewlett-Packard calculators. You'd rather have one that works like the 
$3.95 model you got with that magazine subscription. Write a calculator 
program that accepts standard algebraic notation.</P
></BLOCKQUOTE
><p class="para">The objective here is to write the program without re-implementing the 
calculation engine that <em class="emphasis">dc</EM
> already has-in other words, to write a 
program that translates algebraic notation to RPN and passes the 
translated line to <em class="emphasis">dc</EM
> to do the actual calculation.
[12]</P
><blockquote class="footnote"><p class="para">[12] <a class="indexterm" name="AUTOID-14677"></A
>The utility <em class="emphasis">bc</EM
>(1) actually provides similar functionality.</P
></BLOCKQUOTE
><p class="para">We'll assume that the function <em class="emphasis">alg2rpn</EM
>, which does the 
translation, already exists: given a line of algebraic notation as
argument, it prints the RPN equivalent on the standard output. If we 
have this, then the calculator program (which we'll call <em class="emphasis">adc</EM
>) is 
very simple:</P
><p class="para"><blockquote class="screen"><pre class="screen">dc |&amp;

while read line'?adc&gt; '; do
    print -p &quot;$(alg2rpn $line)&quot;
    read -p answer
    print &quot;    = $answer&quot;
done</PRE
></BLOCKQUOTE
></P
><p class="para">The first line of this code starts <em class="emphasis">dc</EM
> as a coroutine with a 
two-way pipe. Then the <b class="emphasis.bold">while</B
> loop prompts the user for a line
and reads it until the user types <kbd class="keycap">[CTRL-D]</KBD
> for end-of-input.
The loop body converts the line to RPN, passes it to <em class="emphasis">dc</EM
> through 
the pipe, reads <em class="emphasis">dc</EM
>'s answer, and prints it after an equal sign.  
For example:</P
><p class="para"><blockquote class="screen"><pre class="screen">$ <b class="emphasis.bold">adc</B
>
adc&gt; <b class="emphasis.bold">2 + 3</B
>
    = 5
adc&gt; <b class="emphasis.bold">(7 * 8) + 54</B
>
    = 110
adc&gt; <b class="emphasis.bold">^D</B
>
$</PRE
></BLOCKQUOTE
></P
><p class="para"><a class="indexterm" name="AUTOID-14698"></A
><a class="indexterm" name="AUTOID-14699"></A
><a class="indexterm" name="AUTOID-14700"></A
>Actually-as you may have noticed-it's not entirely necessary to have a 
two-way pipe with <em class="emphasis">dc</EM
>. You could do it with a standard pipe and 
let <em class="emphasis">dc</EM
> do its own output, like this:</P
><p class="para"><blockquote class="screen"><pre class="screen">{ while read line'?adc&gt; '; do
      print &quot;$(alg2rpn $line)&quot;
  done 
} | dc</PRE
></BLOCKQUOTE
></P
><p class="para">The only difference from the above is the lack 
of equal sign before each answer is printed.</P
><p class="para"><a class="indexterm" name="AUTOID-14707"></A
><a class="indexterm" name="AUTOID-14709"></A
>But: what if you wanted to make a fancy graphical user interface 
(GUI), like the <em class="emphasis">xcalc</EM
> program that comes with many X Window System 
installations? Then, clearly, <em class="emphasis">dc</EM
>'s own output would not be 
satisfactory, and you would need full control of your own standard 
output in the parent process. The user interface would have to capture 
<em class="emphasis">dc</EM
>'s output and display it in the window properly.  
The two-way pipe is an excellent solution to this problem: just imagine 
that, instead of 
<b class="emphasis.bold">print &quot;    = $answer</B
>
&quot;, there is a call to a 
routine that displays the answer in the &quot;readout&quot;
section of the calculator window.<a class="indexterm" name="AUTOID-14715"></A
></P
><p class="para"><a class="indexterm" name="AUTOID-14717"></A
>All of this suggests that the two-way pipe scheme is great for writing 
shell scripts that interpose a software layer between the user (or some 
other program) and an existing program that uses standard input and 
output. In particular, it's great for writing new interfaces to old, 
standard UNIX programs that expect line-at-a-time, character-based user 
input and output. The new interfaces could be GUIs, or they could be 
network interface programs that talk to users over links to remote 
machines. In other words, the Korn shell's two-way pipe construct is 
designed to help develop very up-to-date software!</P
></DIV
></DIV
><div class="sect2"><h3 class="sect2"><a class="title" name="KSH-CH-8-SECT-5.5">8.5.5 Two-way Pipes Versus Standard Pipes</A
></H3
><p class="para"><a class="indexterm" name="KSH-CH-8-IX-TWO-WAY-PIPES-COMP-STD-PIPES"></A
><a class="indexterm" name="KSH-CH-8-IX-PIPES-COMPARED-TO-TWO-WAY-PIPES"></A
>Before we leave the subject of coroutines, we'll complete the circle by 
showing how the two-way pipe construct compares to regular pipelines.  <a class="indexterm" name="AUTOID-14729"></A
><a class="indexterm" name="AUTOID-14732"></A
>
As you may have been able to figure out by now, it is possible to 
program a standard pipeline by using <b class="emphasis.bold">|&amp;</B
> with 
<b class="emphasis.bold">print -p</B
>.  </P
><p class="para">This has the advantage of reserving the parent shell's standard output 
for other use.  <a class="indexterm" name="AUTOID-14739"></A
>
The disadvantage is that the child process' 
standard output is directed to the two-way pipe: if the parent process 
doesn't read it with <b class="emphasis.bold">read -p</B
>, then it's effectively lost.<a class="indexterm" name="AUTOID-14744"></A
><a class="indexterm" name="AUTOID-14745"></A
><a class="indexterm" name="AUTOID-14746"></A
></P
></DIV
></DIV
><div class="htmlnav"><p></P
><hr align="LEFT" width="515" title="footer"><table width="515" border="0" cellspacing="0" cellpadding="0"><tr><td align="LEFT" valign="TOP" width="172"><a class="SECT1" href="ch08_04.htm" webstripperlinkwas="ch08_04.htm" title="8.4 trap"><img src="../gifs/txtpreva.gif" webstripperlinkwas="../gifs/txtpreva.gif" alt="Previous: 8.4 trap" border="0"></A
></TD
><td align="CENTER" valign="TOP" width="171"><a class="book" href="index.htm" webstripperlinkwas="http://www.ms.itb.ac.id/buku/unix-bookshelf/ksh/index.htm" title="Learning the Korn Shell"><img src="../gifs/txthome.gif" webstripperlinkwas="../gifs/txthome.gif" alt="Learning the Korn Shell" border="0"></A
></TD
><td align="RIGHT" valign="TOP" width="172"><a class="SECT1" href="ch08_06.htm" webstripperlinkwas="ch08_06.htm" title="8.6 Subshells"><img src="../gifs/txtnexta.gif" webstripperlinkwas="../gifs/txtnexta.gif" alt="Next: 8.6 Subshells" border="0"></A
></TD
></TR
><tr><td align="LEFT" valign="TOP" width="172">8.4 trap</TD
><td align="CENTER" valign="TOP" width="171"><a class="index" href="index/idx_0.htm" webstripperlinkwas="index/idx_0.htm" title="Book Index"><img src="../gifs/index.gif" webstripperlinkwas="../gifs/index.gif" alt="Book Index" border="0"></A
></TD
><td align="RIGHT" valign="TOP" width="172">8.6 Subshells</TD
></TR
></TABLE
><hr align="LEFT" width="515" title="footer"><img src="../gifs/smnavbar.gif" webstripperlinkwas="../gifs/smnavbar.gif" usemap="#map" border="0" alt="The UNIX CD Bookshelf Navigation"><map name="map"><area shape="RECT" coords="0,0,73,21" href="../index.html" webstripperlinkwas="http://www.ms.itb.ac.id/buku/unix-bookshelf/index.html" alt="The UNIX CD Bookshelf"><area shape="RECT" coords="74,0,163,21" href="../upt/index.htm" webstripperlinkwas="http://www.ms.itb.ac.id/buku/unix-bookshelf/upt/index.htm" alt="UNIX Power Tools"><area shape="RECT" coords="164,0,257,21" href="../unixnut/index.htm" webstripperlinkwas="http://www.ms.itb.ac.id/buku/unix-bookshelf/unixnut/index.htm" alt="UNIX in a Nutshell"><area shape="RECT" coords="258,0,321,21" href="../vi/index.htm" webstripperlinkwas="http://www.ms.itb.ac.id/buku/unix-bookshelf/vi/index.htm" alt="Learning the vi Editor"><area shape="RECT" coords="322,0,378,21" href="../sedawk/index.htm" webstripperlinkwas="http://www.ms.itb.ac.id/buku/unix-bookshelf/sedawk/index.htm" alt="sed &amp; awk"><area shape="RECT" coords="379,0,438,21" href="index.htm" webstripperlinkwas="http://www.ms.itb.ac.id/buku/unix-bookshelf/ksh/index.htm" alt="Learning the Korn Shell"><area shape="RECT" coords="439,0,514,21" href="../lrnunix/index.htm" webstripperlinkwas="http://www.ms.itb.ac.id/buku/unix-bookshelf/lrnunix/index.htm" alt="Learning the UNIX Operating System"></MAP
></DIV
></BODY
></HTML
>
