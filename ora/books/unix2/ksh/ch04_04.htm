<html><head>
<title>[Chapter 4] 4.4 Command Substitution</TITLE>
<meta name="DC.title" content="Learning the Korn Shell"><meta name="DC.creator" content="Bill Rosenblatt"><meta name="DC.publisher" content="O'Reilly &amp; Associates, Inc."><meta name="DC.date" content="1998-08-03T21:06:12Z"><meta name="DC.type" content="Text.Monograph"><meta name="DC.format" content="text/html" scheme="MIME"><meta name="DC.source" content="1-56592-054-6" scheme="ISBN"><meta name="DC.language" content="en-US"><meta name="generator" content="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><link rev="made" href="mailto:online-books@oreilly.com" title="Online Books Comments"><link rel="up" href="ch04_01.htm" webstripperlinkwas="ch04_01.htm" title="4. Basic Shell Programming"><link rel="prev" href="ch04_03.htm" webstripperlinkwas="ch04_03.htm" title="4.3 String Operators"><link rel="next" href="ch04_05.htm" webstripperlinkwas="ch04_05.htm" title="4.5 Advanced Examples: pushd and popd"></HEAD
><body bgcolor="#FFFFFF" text="#000000"><div class="htmlnav"><h1><img src="gifs/smbanner.gif" webstripperlinkwas="gifs/smbanner.gif" alt="Learning the Korn Shell" usemap="#srchmap" border="0"></H1
><map name="srchmap"><area shape="RECT" coords="0,0,466,66" href="index.htm" webstripperlinkwas="http://www.ms.itb.ac.id/buku/unix-bookshelf/ksh/index.htm" alt="Learning the Korn Shell"><area shape="RECT" coords="467,0,514,18" href="jobjects/fsearch.htm" webstripperlinkwas="jobjects/fsearch.htm" alt="Search this book"></MAP
><table width="515" border="0" cellspacing="0" cellpadding="0"><tr><td align="LEFT" valign="TOP" width="172"><a class="SECT1" href="ch04_03.htm" webstripperlinkwas="ch04_03.htm" title="4.3 String Operators"><img src="../gifs/txtpreva.gif" webstripperlinkwas="../gifs/txtpreva.gif" alt="Previous: 4.3 String Operators" border="0"></A
></TD
><td align="CENTER" valign="TOP" width="171"><b><font face="ARIEL,HELVETICA,HELV,SANSERIF" size="-1">Chapter 4<br>Basic Shell Programming</FONT
></B
></TD
><td align="RIGHT" valign="TOP" width="172"><a class="SECT1" href="ch04_05.htm" webstripperlinkwas="ch04_05.htm" title="4.5 Advanced Examples: pushd and popd"><img src="../gifs/txtnexta.gif" webstripperlinkwas="../gifs/txtnexta.gif" alt="Next: 4.5 Advanced Examples: pushd and popd" border="0"></A
></TD
></TR
></TABLE
>&nbsp;<hr align="LEFT" width="515" title="footer"></DIV
><div class="SECT1"><h2 class="sect1"><a class="title" name="KSH-CH-4-SECT-4">4.4 Command Substitution</A
></H2
><p class="para"><a class="indexterm" name="KSH-CH-4-IX-COMMAND-SUBSTITUTION"></A
>From the discussion so far, we've 
seen two ways of getting values into variables: by assignment
statements and by the user supplying them as command-line
arguments (positional parameters). There is another way:
<em class="emphasis">command substitution</EM
>, which allows you to use the
standard output of a command as if it were the value of a variable.
You will soon see how powerful this feature is.</P
><p class="para"><a class="indexterm" name="AUTOID-6951"></A
>The syntax of command substitution is:
[11]</P
><blockquote class="footnote"><p class="para">[11] <a class="indexterm" name="AUTOID-6956"></A
><a class="indexterm" name="AUTOID-6958"></A
><a class="indexterm" name="AUTOID-6960"></A
>Bourne and C shell users should note that the command substitution
syntax of those shells, 
<code class="literal">`</CODE
><em class="emphasis">UNIX command</EM
><code class="literal">`</CODE
> (with backward
quotes, a.k.a. grave accents), 
is also supported by the Korn
shell for backward compatibility reasons. However, Korn shell documentation
considers this syntax archaic. It is harder to read and less
conducive to nesting.</P
></BLOCKQUOTE
><p class="para"><blockquote class="screen"><pre class="screen">$(<em class="emphasis">UNIX command</EM
>)</PRE
></BLOCKQUOTE
></P
><p class="para">The command inside the parenthesis is run, and
anything the command writes to standard output is returned as
the value of the expression.  
These constructs can be nested, i.e., the UNIX command
can contain command substitutions.</P
><p class="para"><a class="indexterm" name="AUTOID-6971"></A
>Here are some simple examples:</P
><ul class="itemizedlist"><li class="listitem"><p class="para">The value of <b class="emphasis.bold">$(pwd</B
>) is the current directory
(same as the environment variable <b class="emphasis.bold">$PWD</B
>).</P
></LI
><li class="listitem"><p class="para">The value of <b class="emphasis.bold">$(ls)</B
> is the names of all files in the
current directory, separated by NEWLINEs.</P
></LI
><li class="listitem"><p class="para"><a class="indexterm" name="AUTOID-6984"></A
>To find out detailed information about a command if you don't
know where its file resides, type 
<b class="emphasis.bold">ls -l $(whence -p</B
> <em class="emphasis">command</EM
>).
The <b class="emphasis.bold">-p</B
> option forces <b class="emphasis.bold">whence</B
> to do a pathname lookup
and not consider keywords, built-ins, etc.</P
></LI
><li class="listitem"><p class="para"><a class="indexterm" name="AUTOID-6993"></A
>To get the contents of a file into a variable, you can use 
<em class="emphasis">varname</EM
><b class="emphasis.bold">=$(&lt; </B
><em class="emphasis">filename</EM
>).
<b class="emphasis.bold">$(cat</B
> <em class="emphasis">filename</EM
>) will do the same thing, but
the shell catches the former as a built-in shorthand and
runs it more efficiently.  </P
></LI
><li class="listitem"><p class="para"><a class="indexterm" name="AUTOID-7003"></A
><a class="indexterm" name="AUTOID-7005"></A
>If you want to edit (with <em class="emphasis">emacs</EM
>) every chapter of your book 
on the Korn shell that has the phrase &quot;command substitution,&quot; 
assuming that your chapter files all begin with <em class="emphasis">ch</EM
>, you could type: </P
><p class="para"><blockquote class="screen"><pre class="screen"><b class="emphasis.bold">emacs $(grep -l 'command substitution' ch</B
><code class="literal">*</CODE
>)</PRE
></BLOCKQUOTE
></P
><p class="para">The <b class="emphasis.bold">-l</B
> option to <em class="emphasis">grep</EM
> prints only the names of files
that contain matches.</P
></LI
></UL
><p class="para"><a class="indexterm" name="AUTOID-7018"></A
>Command substitution, like variable and tilde expansion, is done
within double quotes. Therefore, our rule in <a class="xref" href="ch01_01.htm" webstripperlinkwas="ch01_01.htm" title="Korn Shell Basics">Chapter 1</A
> and <a class="xref" href="ch03_01.htm" webstripperlinkwas="ch03_01.htm" title="Customizing Your Environment">Chapter 3</A
>,
about using single quotes for strings unless they contain variables
will now be extended: &quot;When in doubt, use single quotes, unless
the string contains variables or command substitutions, in which
case use double quotes.&quot;</P
><p class="para">You will undoubtedly think of many ways to use command
substitution as you gain experience with the Korn shell.
One that is a bit more complex than those mentioned previously relates
to a customization task that we
saw 
in <a class="xref" href="ch03_01.htm" webstripperlinkwas="ch03_01.htm" title="Customizing Your Environment">Chapter 3</A
>: personalizing your prompt string.</P
><p class="para"><a class="indexterm" name="KSH-CH-4-IX-PROMPTS-CUSTOM-MACHINE-NAME"></A
><a class="indexterm" name="AUTOID-7030"></A
><a class="indexterm" name="AUTOID-7033"></A
>Recall that you can personalize your prompt string by assigning a value to the variable
<b class="emphasis.bold">PS1</B
>. If you are on a network of computers, and you use different
machines from time to time, you may find it handy to have the
name of the machine you're on in your prompt string.  <a class="indexterm" name="AUTOID-7036"></A
>
Most
newer versions of UNIX have the command <em class="emphasis">hostname</EM
>(1), which
prints the network name of the machine you are on to standard output.
(If you do not have this command, you may have a similar one like
<em class="emphasis">gethostname</EM
>.) This command enables you to get the machine name into
your prompt string by putting a line like this in your 
<em class="emphasis">.profile</EM
> or environment file:</P
><p class="para"><blockquote class="screen"><pre class="screen">PS1=&quot;$(hostname) \$ &quot;</PRE
></BLOCKQUOTE
></P
><p class="para">(The second dollar sign must be preceded by a backslash so that
the shell will take it literally.)
For example, if your machine had the name <b class="emphasis.bold">coltrane</B
>, then this
statement would set your prompt string to 
&quot;<b class="emphasis.bold">coltrane</B
> $ &quot;.<a class="indexterm" name="AUTOID-7046"></A
></P
><p class="para">Command substitution helps us with the solution to the next
programming task, which relates to the album database in Task 4-1.</P
><div class="task"><h4>Task 4.4</H4
><blockquote class="taskinfo"><p class="para">The file used in Task 4-1 is actually a report derived from
a bigger table of data about albums. This table consists of several
columns, or <em class="emphasis">fields</EM
>, to which
a user refers by names like &quot;artist,&quot; &quot;title,&quot; &quot;year,&quot; etc.
The columns are separated by vertical bars (<b class="emphasis.bold">|</B
>, the same as the UNIX
pipe character).
To deal with individual columns in the table, 
field names need to be converted to field numbers.</P
><p class="para">Suppose there is a shell function called <em class="emphasis">getfield</EM
> that 
takes the field name as argument and writes the corresponding
field number on the standard output. Use this routine to help
extract a column from the data table.</P
></BLOCKQUOTE
><p class="para"><a class="indexterm" name="KSH-CH-4-IX-CUT"></A
>The <em class="emphasis">cut</EM
>(1) utility is a natural for this task.
<em class="emphasis">cut</EM
> is a data filter: it extracts columns from tabular data.
[12]
If you supply the numbers of columns you want to extract from the input,
<em class="emphasis">cut</EM
> will print only those columns on the standard output.
Columns can be character positions or-relevant in this example-fields 
that are separated by <span class="acronym">TAB</SPAN
> characters or other delimiters.</P
><blockquote class="footnote"><p class="para">[12] <a class="indexterm" name="AUTOID-7062"></A
><a class="indexterm" name="AUTOID-7065"></A
><a class="indexterm" name="AUTOID-7068"></A
>Some older BSD-derived systems don't have <em class="emphasis">cut</EM
>, 
but you can use <em class="emphasis">awk</EM
> instead.  
Whenever you see a command of the form:</P
><p class="para"><blockquote class="screen"><pre class="screen">cut -f<em class="emphasis">N</EM
> -d<em class="emphasis">C filename</EM
></PRE
></BLOCKQUOTE
></P
><p class="para">Use this instead:</P
><p class="para"><blockquote class="screen"><pre class="screen">awk -F<em class="emphasis">C</EM
> '{print $<em class="emphasis">N</EM
>}' <em class="emphasis">filename</EM
></PRE
></BLOCKQUOTE
></P
></BLOCKQUOTE
><p class="para">Assume that the data table in our task is a file called
<em class="emphasis">albums</EM
> and that it looks like this:</P
><p class="para"><blockquote class="screen"><pre class="screen">Coltrane, John|Giant Steps|Atlantic|1960|Ja
Coltrane, John|Coltrane Jazz|Atlantic|1960|Ja
Coltrane, John|My Favorite Things|Atlantic|1961|Ja
Coltrane, John|Coltrane Plays the Blues|Atlantic|1961|Ja
...</PRE
></BLOCKQUOTE
></P
><p class="para">Here is how we would use <em class="emphasis">cut</EM
> to extract the fourth
(year) column:</P
><p class="para"><blockquote class="screen"><pre class="screen">cut -f4 -d\| albums</PRE
></BLOCKQUOTE
></P
><p class="para"><a class="indexterm" name="AUTOID-7095"></A
>The <b class="emphasis.bold">-d</B
> argument is used to specify the character
used as field delimiter (<span class="acronym">TAB</SPAN
> is the default).
The vertical bar must be backslash-escaped so that the
shell doesn't try to interpret it as a pipe.</P
><p class="para">From this line of code and the <em class="emphasis">getfield</EM
> routine, we can
easily derive the solution to the task. Assume that 
the first argument to <em class="emphasis">getfield</EM
> is the name
of the field the user wants to extract. Then the solution is:</P
><p class="para"><blockquote class="screen"><pre class="screen">fieldname=$1
cut -f$(getfield $fieldname) -d\| albums</PRE
></BLOCKQUOTE
></P
><p class="para">If we called this script with the argument <b class="emphasis.bold">year</B
>, the output would be:</P
><p class="para"><blockquote class="screen"><pre class="screen">1960
1960
1961
1961
...</PRE
></BLOCKQUOTE
></P
></DIV
><a class="indexterm" name="AUTOID-7109"></A
><p class="para">Here's another small task that makes use of <em class="emphasis">cut</EM
>.</P
><div class="task"><h4>Task 4.5</H4
><blockquote class="taskinfo"><p class="para"><a class="indexterm" name="AUTOID-7115"></A
>Send a mail message to everyone who is currently logged in.</P
></BLOCKQUOTE
><a class="indexterm" name="AUTOID-7117"></A
><p class="para">The command 
<em class="emphasis">who</EM
>(1) tells you who is logged in (as well as which
terminal they're on and when they logged in). Its 
output looks like this:</P
><p class="para"><blockquote class="screen"><pre class="screen">billr      console      May 22 07:57
fred       tty02        May 22 08:31
bob        tty04        May 22 08:12</PRE
></BLOCKQUOTE
></P
><p class="para">The fields are separated by spaces, not <span class="acronym">TAB</SPAN
>s.  <a class="indexterm" name="AUTOID-7125"></A
>
Since we need the first
field, we can get away with using a space as the field separator
in the <em class="emphasis">cut</EM
> command. (Otherwise we'd have to use the option
to <em class="emphasis">cut</EM
> that uses character columns 
instead of fields.)
To provide a space character as an argument
on a command line, you can surround it by quotes:</P
><p class="para"><blockquote class="screen"><pre class="screen"><code class="literal">$ </CODE
><b class="emphasis.bold">who | cut -d' ' -f1</B
></PRE
></BLOCKQUOTE
></P
><p class="para">With the above <em class="emphasis">who</EM
> output, this command's output would
look like this:</P
><p class="para"><blockquote class="screen"><pre class="screen">billr
fred
bob</PRE
></BLOCKQUOTE
></P
><p class="para">This leads directly to a solution to the task. Just type:</P
><p class="para"><blockquote class="screen"><pre class="screen">$ <b class="emphasis.bold">mail $(who | cut -d<code class="literal">' '</CODE
>  -f1)</B
></PRE
></BLOCKQUOTE
></P
><p class="para">The command <b class="emphasis.bold">mail billr fred bob</B
> will run and then you can type your message.</P
></DIV
><p class="para">Here is another task that shows how useful command pipelines can be
in command substitution.</P
><div class="task"><h4>Task 4.6</H4
><blockquote class="taskinfo"><p class="para">The <em class="emphasis">ls</EM
> command gives you pattern-matching capability
with wildcards, but it doesn't allow you to select files by
<em class="emphasis">modification date</EM
>. Devise a mechanism that lets you do this.</P
></BLOCKQUOTE
><p class="para"><a class="indexterm" name="AUTOID-7151"></A
>This task was inspired by the feature of the VAX/VMS operating system
that lets you specify files by date with <b class="emphasis.bold">BEFORE</B
> and <b class="emphasis.bold">SINCE</B
>
parameters.
We'll do this in a limited way now and add features in the next chapter.</P
><p class="para">Here is a function that allows you to list all files that were
last modified on the date you give as argument. Once again, we
choose a function for speed reasons. No pun is intended
by the function's name:</P
><p class="para"><blockquote class="screen"><pre class="screen">function lsd {
    date=$1
    ls -l | grep -i '^.\{41\}$date' | cut -c55-
}</PRE
></BLOCKQUOTE
></P
><p class="para"><a class="indexterm" name="AUTOID-7159"></A
>This function depends on the column layout of the <b class="emphasis.bold">ls -l</B
> command.
In particular, it depends on dates starting in column 42 and
filenames starting in column 55. If this isn't the case in your
version of UNIX, you will need to adjust the column numbers.
[13]</P
><blockquote class="footnote"><p class="para">[13] <a class="indexterm" name="AUTOID-7166"></A
><a class="indexterm" name="AUTOID-7168"></A
>For example, <b class="emphasis.bold">ls -l</B
> on SunOS 4.1.x has dates starting in
column 33 and filenames starting in column 46.</P
></BLOCKQUOTE
><p class="para"><a class="indexterm" name="AUTOID-7174"></A
><a class="indexterm" name="AUTOID-7176"></A
>We use the <em class="emphasis">grep</EM
> search utility to match the date given
as argument (in the form <em class="emphasis">Mon</EM
> <em class="emphasis">DD</EM
>, e.g., <b class="emphasis.bold">Jan 15</B
> or 
<b class="emphasis.bold">Oct&nbsp;&nbsp;6</B
>, the latter having two spaces) to the output
of <b class="emphasis.bold">ls -l</B
>. This gives us a long listing of only those files
whose dates match the argument. The <b class="emphasis.bold">-i</B
> option to <em class="emphasis">grep</EM
>
allows you to use all lowercase letters in the month name, while
the rather fancy argument means, &quot;Match any line that contains 41
characters followed by the function argument.&quot; 

For example, typing 
<b class="emphasis.bold">lsd</B
> <code class="literal">'</CODE
><b class="emphasis.bold">jan 15</B
><code class="literal">'</CODE
> causes <em class="emphasis">grep</EM
> to search for lines
that match any 41 characters followed by <b class="emphasis.bold">jan</B
> <b class="emphasis.bold">15</B
> (or <b class="emphasis.bold">Jan</B
> <b class="emphasis.bold">15</B
>).
[14]</P
><blockquote class="footnote"><p class="para">[14] <a class="indexterm" name="AUTOID-7198"></A
><a class="indexterm" name="AUTOID-7202"></A
>Some older BSD-derived versions of UNIX (without System V
extensions) do not support 
the <b class="emphasis.bold">\{</B
><em class="emphasis">N</EM
><b class="emphasis.bold">\}</B
> option. For this
example, use 41 periods in a row instead of <b class="emphasis.bold">.\{41\}</B
>.</P
></BLOCKQUOTE
><p class="para"><a class="indexterm" name="AUTOID-7210"></A
>The output of <em class="emphasis">grep</EM
> is piped through 
our ubiquitous friend <em class="emphasis">cut</EM
> to retrieve the filenames only.
The argument to <em class="emphasis">cut</EM
> tells it to extract characters in column
55 through the end of the line.</P
><p class="para">With command substitution, you can use this function with <em class="emphasis">any</EM
>
command that accepts filename arguments. For example, if you want
to print all files in your current directory that were last modified
today, and today is January 15th, you could type:</P
><p class="para"><blockquote class="screen"><pre class="screen">$ <b class="emphasis.bold">lp $(lsd <code class="literal">'</CODE
>jan 15<code class="literal">'</CODE
>)</B
></PRE
></BLOCKQUOTE
></P
><p class="para">The output of <em class="emphasis">lsd</EM
> is on multiple lines (one for each
filename), but <span class="acronym">LINEFEED</SPAN
>s are legal field separators for the
<em class="emphasis">lp</EM
> command, because the environment variable <b class="emphasis.bold">IFS</B
>
(see earlier in this chapter) contains LINEFEED by default.<a class="indexterm" name="AUTOID-7228"></A
></P
></DIV
></DIV
><div class="htmlnav"><p></P
><hr align="LEFT" width="515" title="footer"><table width="515" border="0" cellspacing="0" cellpadding="0"><tr><td align="LEFT" valign="TOP" width="172"><a class="SECT1" href="ch04_03.htm" webstripperlinkwas="ch04_03.htm" title="4.3 String Operators"><img src="../gifs/txtpreva.gif" webstripperlinkwas="../gifs/txtpreva.gif" alt="Previous: 4.3 String Operators" border="0"></A
></TD
><td align="CENTER" valign="TOP" width="171"><a class="book" href="index.htm" webstripperlinkwas="http://www.ms.itb.ac.id/buku/unix-bookshelf/ksh/index.htm" title="Learning the Korn Shell"><img src="../gifs/txthome.gif" webstripperlinkwas="../gifs/txthome.gif" alt="Learning the Korn Shell" border="0"></A
></TD
><td align="RIGHT" valign="TOP" width="172"><a class="SECT1" href="ch04_05.htm" webstripperlinkwas="ch04_05.htm" title="4.5 Advanced Examples: pushd and popd"><img src="../gifs/txtnexta.gif" webstripperlinkwas="../gifs/txtnexta.gif" alt="Next: 4.5 Advanced Examples: pushd and popd" border="0"></A
></TD
></TR
><tr><td align="LEFT" valign="TOP" width="172">4.3 String Operators</TD
><td align="CENTER" valign="TOP" width="171"><a class="index" href="index/idx_0.htm" webstripperlinkwas="index/idx_0.htm" title="Book Index"><img src="../gifs/index.gif" webstripperlinkwas="../gifs/index.gif" alt="Book Index" border="0"></A
></TD
><td align="RIGHT" valign="TOP" width="172">4.5 Advanced Examples: pushd and popd</TD
></TR
></TABLE
><hr align="LEFT" width="515" title="footer"><img src="../gifs/smnavbar.gif" webstripperlinkwas="../gifs/smnavbar.gif" usemap="#map" border="0" alt="The UNIX CD Bookshelf Navigation"><map name="map"><area shape="RECT" coords="0,0,73,21" href="../index.html" webstripperlinkwas="http://www.ms.itb.ac.id/buku/unix-bookshelf/index.html" alt="The UNIX CD Bookshelf"><area shape="RECT" coords="74,0,163,21" href="../upt/index.htm" webstripperlinkwas="http://www.ms.itb.ac.id/buku/unix-bookshelf/upt/index.htm" alt="UNIX Power Tools"><area shape="RECT" coords="164,0,257,21" href="../unixnut/index.htm" webstripperlinkwas="http://www.ms.itb.ac.id/buku/unix-bookshelf/unixnut/index.htm" alt="UNIX in a Nutshell"><area shape="RECT" coords="258,0,321,21" href="../vi/index.htm" webstripperlinkwas="http://www.ms.itb.ac.id/buku/unix-bookshelf/vi/index.htm" alt="Learning the vi Editor"><area shape="RECT" coords="322,0,378,21" href="../sedawk/index.htm" webstripperlinkwas="http://www.ms.itb.ac.id/buku/unix-bookshelf/sedawk/index.htm" alt="sed &amp; awk"><area shape="RECT" coords="379,0,438,21" href="index.htm" webstripperlinkwas="http://www.ms.itb.ac.id/buku/unix-bookshelf/ksh/index.htm" alt="Learning the Korn Shell"><area shape="RECT" coords="439,0,514,21" href="../lrnunix/index.htm" webstripperlinkwas="http://www.ms.itb.ac.id/buku/unix-bookshelf/lrnunix/index.htm" alt="Learning the UNIX Operating System"></MAP
></DIV
></BODY
></HTML
>
