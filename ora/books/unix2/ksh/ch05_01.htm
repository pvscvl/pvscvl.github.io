<html><head>
<title>[Chapter 5] Flow Control</TITLE>
<meta name="DC.title" content="Learning the Korn Shell"><meta name="DC.creator" content="Bill Rosenblatt"><meta name="DC.publisher" content="O'Reilly &amp; Associates, Inc."><meta name="DC.date" content="1998-08-03T21:07:32Z"><meta name="DC.type" content="Text.Monograph"><meta name="DC.format" content="text/html" scheme="MIME"><meta name="DC.source" content="1-56592-054-6" scheme="ISBN"><meta name="DC.language" content="en-US"><meta name="generator" content="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><link rev="made" href="mailto:online-books@oreilly.com" title="Online Books Comments"><link rel="up" href="index.htm" webstripperlinkwas="http://www.ms.itb.ac.id/buku/unix-bookshelf/ksh/index.htm" title="Learning the Korn Shell"><link rel="prev" href="ch04_05.htm" webstripperlinkwas="ch04_05.htm" title="4.5 Advanced Examples: pushd and popd"><link rel="next" href="ch05_02.htm" webstripperlinkwas="ch05_02.htm" title="5.2 for"></HEAD
><body bgcolor="#FFFFFF" text="#000000"><div class="htmlnav"><h1><img src="gifs/smbanner.gif" webstripperlinkwas="gifs/smbanner.gif" alt="Learning the Korn Shell" usemap="#srchmap" border="0"></H1
><map name="srchmap"><area shape="RECT" coords="0,0,466,66" href="index.htm" webstripperlinkwas="http://www.ms.itb.ac.id/buku/unix-bookshelf/ksh/index.htm" alt="Learning the Korn Shell"><area shape="RECT" coords="467,0,514,18" href="jobjects/fsearch.htm" webstripperlinkwas="jobjects/fsearch.htm" alt="Search this book"></MAP
><table width="515" border="0" cellspacing="0" cellpadding="0"><tr><td align="LEFT" valign="TOP" width="172"><a class="SECT1" href="ch04_05.htm" webstripperlinkwas="ch04_05.htm" title="4.5 Advanced Examples: pushd and popd"><img src="../gifs/txtpreva.gif" webstripperlinkwas="../gifs/txtpreva.gif" alt="Previous: 4.5 Advanced Examples: pushd and popd" border="0"></A
></TD
><td align="CENTER" valign="TOP" width="171"><b><font face="ARIEL,HELVETICA,HELV,SANSERIF" size="-1">Chapter 5</FONT
></B
></TD
><td align="RIGHT" valign="TOP" width="172"><a class="SECT1" href="ch05_02.htm" webstripperlinkwas="ch05_02.htm" title="5.2 for"><img src="../gifs/txtnexta.gif" webstripperlinkwas="../gifs/txtnexta.gif" alt="Next: 5.2 for" border="0"></A
></TD
></TR
></TABLE
>&nbsp;<hr align="LEFT" width="515" title="footer"></DIV
><div class="CHAPTER"><h1 class="chapter"><a class="title" name="KSH-CH5-FLOWCON">5. Flow Control</A
></H1
><div class="htmltoc"><p><b>Contents:</B
><br><a class="sect1" href="#KSH-CH-5-SECT-1" title="5.1 if/else">if/else</A
><br><a class="sect1" href="ch05_02.htm" webstripperlinkwas="ch05_02.htm" title="5.2 for">for</A
><br><a class="sect1" href="ch05_03.htm" webstripperlinkwas="ch05_03.htm" title="5.3 case">case</A
><br><a class="sect1" href="ch05_04.htm" webstripperlinkwas="ch05_04.htm" title="5.4 select">select</A
><br><a class="sect1" href="ch05_05.htm" webstripperlinkwas="ch05_05.htm" title="5.5 while and until">while and until</A
></P
><p></P
></DIV
><p class="para"><a class="indexterm" name="AUTOID-7450"></A
>If you are a programmer, you may have read the last chapter-with 
its claim at the outset that the Korn shell has an advanced
set of programming capabilities&nbsp;- and wondered where many features
from conventional languages are.
Perhaps the most glaringly obvious &quot;hole&quot; in our coverage
thus far concerns <em class="emphasis">flow control</EM
> constructs
like <b class="emphasis.bold">if</B
>, <b class="emphasis.bold">for</B
>, <b class="emphasis.bold">while</B
>, and so on.</P
><p class="para">Flow control gives a programmer the power to specify that
only certain portions of a program run, or that certain portions
run repeatedly, according to conditions such as the values
of variables, whether or not commands execute properly, and others.
We call this the ability to control the flow of
a program's execution.</P
><p class="para">Almost every shell
script or function shown thus far has had no flow control-they have
just been lists of commands
to be run! Yet the Korn shell, like the C and Bourne shells,
has all of the flow control abilities you would expect and more;
we will examine them in this chapter. We'll use them to
enhance the solutions to some of the programming tasks we saw in
the last chapter and to solve tasks that we will introduce here.</P
><p class="para">Although we have attempted to explain flow control so
that non-programmers can understand it, we also sympathize with
programmers who dread having to slog through yet another
<em class="emphasis">tabula rasa</EM
> explanation. For this reason, some of our
discussions relate the Korn shell's flow-control mechanisms to
those that programmers should know already. Therefore
you will be in a better position
to understand this chapter if you already have a basic knowledge
of flow control concepts.</P
><p class="para"><a class="indexterm" name="KSH-CH-5-IX-FLOW-CONTROL-SUMMARY-CONSTRUCTS"></A
>The Korn shell supports the following flow control constructs:</P
><dl class="variablelist"><dt class="term"><b class="emphasis.bold">if</B
>/<b class="emphasis.bold">else</B
></DT
><dd class="listitem"><p class="para">Execute a list of statements if a certain condition is/is not true</P
></DD
><dt class="term"><b class="emphasis.bold">for</B
></DT
><dd class="listitem"><p class="para">Execute a list of statements a fixed number of times</P
></DD
><dt class="term"><b class="emphasis.bold">while</B
></DT
><dd class="listitem"><p class="para">Execute a list of statements repeatedly <em class="emphasis">while</EM
> a certain condition
holds true</P
></DD
><dt class="term"><b class="emphasis.bold">until</B
></DT
><dd class="listitem"><p class="para">Execute a list of statements repeatedly <em class="emphasis">until</EM
> a certain condition
holds true</P
></DD
><dt class="term"><b class="emphasis.bold">case</B
></DT
><dd class="listitem"><p class="para">Execute one of several lists of statements depending on the value
of a variable</P
></DD
></DL
><p class="para">In addition, the Korn shell provides a new type of flow-control
construct:</P
><dl class="variablelist"><dt class="term"><b class="emphasis.bold">select</B
></DT
><dd class="listitem"><p class="para">Allow the user to select one of a list of possibilities from a menu<a class="indexterm" name="AUTOID-7501"></A
></P
></DD
></DL
><p class="para">We will cover each of these, but be warned:
the syntax is not pretty.</P
><div class="sect1"><h2 class="sect1"><a class="title" name="KSH-CH-5-SECT-1">5.1 if/else</A
></H2
><p class="para"><a class="indexterm" name="KSH-CH-5-IX-IF"></A
><a class="indexterm" name="AUTOID-7508"></A
><a class="indexterm" name="AUTOID-7511"></A
><a class="indexterm" name="AUTOID-7514"></A
>The simplest type of flow control construct is the <em class="emphasis">conditional</EM
>,
embodied in the Korn shell's <b class="emphasis.bold">if</B
> statement. You use a
conditional when you want to choose whether or not to do something,
or to choose among a small number of things to do, according to
the truth or falsehood of <em class="emphasis">conditions</EM
>. Conditions test
values of shell variables, characteristics of files, whether or
not commands run successfully, and other factors. The shell
has a large set of built-in tests that are relevant to
the task of shell programming.</P
><p class="para"><a class="indexterm" name="AUTOID-7521"></A
>The <b class="emphasis.bold">if</B
> construct has the following syntax:</P
><p class="para"><blockquote class="screen"><pre class="screen">if <em class="emphasis">condition</EM
>
then
    <em class="emphasis">statements</EM
>
[elif <em class="emphasis">condition</EM
>
    then <em class="emphasis">statements</EM
>...]
[else
    <em class="emphasis">statements</EM
>]
fi</PRE
></BLOCKQUOTE
></P
><p class="para">The simplest form (without the <b class="emphasis.bold">elif</B
> and <b class="emphasis.bold">else</B
> parts, a.k.a. <em class="emphasis">clauses</EM
>)
executes the <em class="emphasis">statements</EM
> only if the <em class="emphasis">condition</EM
> is true.
If you add an <b class="emphasis.bold">else</B
> clause, you get the ability to execute
one set of statements if a condition is true or another set of
statements if the condition is false. You can use as many
<b class="emphasis.bold">elif</B
> (a contraction of &quot;else if&quot;) clauses as you wish; they introduce
more conditions, and thus more choices for which set of statements
to execute. If you use one or more <b class="emphasis.bold">elif</B
>s, you can think of
the <b class="emphasis.bold">else</B
> clause as the &quot;if all <em class="emphasis">else</EM
> fails&quot; part.</P
><div class="sect2"><h3 class="sect2"><a class="title" name="KSH-CH-5-SECT-1.1">5.1.1 Exit Status and Return</A
></H3
><p class="para"><a class="indexterm" name="KSH-CH-5-IX-EXIT-STATUS"></A
><a class="indexterm" name="AUTOID-7548"></A
><a class="indexterm" name="AUTOID-7550"></A
>Perhaps the only aspect of this syntax that differs from that
of conventional languages like C and Pascal is
that the &quot;condition&quot; is really a list of statements rather than the
more usual Boolean (true or false) expression.
How is the truth or falsehood of the condition determined?
It has to do with a general UNIX concept that we haven't
covered yet: the <em class="emphasis">exit status</EM
> of commands.</P
><p class="para">Every UNIX command, whether it comes from source code in C,
some other language, or a shell script/function, returns an
integer code to its calling process-the shell in this case-when 
it finishes.  <a class="indexterm" name="AUTOID-7554"></A
>
This is called the exit status. 0 is <em class="emphasis">usually</EM
>
the &quot;OK&quot; exit status, while anything else (1 to 255)
<em class="emphasis">usually</EM
> denotes an error.
[1]</P
><blockquote class="footnote"><p class="para">[1] <a class="indexterm" name="AUTOID-7561"></A
>Because this is a &quot;convention&quot; and not a &quot;law,&quot; there are exceptions.
For example, <em class="emphasis">diff</EM
> (1) (find differences between two files)
returns 0 for &quot;no differences,&quot; 1 for &quot;differences found,&quot; or 2 for
an error such as an invalid filename argument.</P
></BLOCKQUOTE
><p class="para"><b class="emphasis.bold">if</B
> checks the exit status of the <em class="emphasis">last</EM
> statement in the list
following the <b class="emphasis.bold">if</B
> keyword.
[2]
(The list is usually just a single statement.)
If the status is 0, the condition evaluates to true; if it is anything else,
the condition is considered false. The same is true
for each condition attached to an <b class="emphasis.bold">elif</B
> statement (if any).</P
><blockquote class="footnote"><p class="para">[2] <a class="indexterm" name="AUTOID-7570"></A
>LISP programmers will find this idea familiar.</P
></BLOCKQUOTE
><p class="para">This enables us to write code of the form:</P
><p class="para"><blockquote class="screen"><pre class="screen">if command ran successfully
then
    normal processing
else
    error processing
fi</PRE
></BLOCKQUOTE
></P
><p class="para"><a class="indexterm" name="KSH-CH-5-IX-PUSHD"></A
>More specifically, we can now improve on the <em class="emphasis">pushd</EM
> function
that we saw in the last chapter:</P
><p class="para"><blockquote class="screen"><pre class="screen">function pushd {		# push current directory onto stack
    dirname=$1
    cd ${dirname:?&quot;missing directory name.&quot;}
    DIRSTACK=&quot;$dirname ${DIRSTACK:-$PWD}&quot;
    print $DIRSTACK
}</PRE
></BLOCKQUOTE
></P
><p class="para">This function requires a valid directory as its argument.
Let's look at how it handles error conditions:
if no argument is given, the second line of code prints an error
message and exits. This is fine.</P
><p class="para">However, the function
reacts deceptively when an argument is given that isn't a valid
directory. In case you didn't figure it out when reading the
last chapter, here is what happens: the <b class="emphasis.bold">cd</B
> fails, leaving
you in the same directory you were in. This is also appropriate.
But then the third line of code pushes the bad directory onto the
stack anyway, and the last line prints a message that leads you to
believe that the push was successful.</P
><p class="para">We need to prevent the bad directory from being pushed and to
print an error message. Here is how we can do this:</P
><p class="para"><blockquote class="screen"><pre class="screen">function pushd {                # push current directory onto stack
    dirname=$1
    if cd ${dirname:?&quot;missing directory name.&quot;}   # if cd was successful
    then
        DIRSTACK=&quot;$dirname ${DIRSTACK:-$PWD}&quot;
        print $DIRSTACK
    else
        print still in $PWD.
    fi
}</PRE
></BLOCKQUOTE
></P
><p class="para">The call to <b class="emphasis.bold">cd</B
> is now inside an <b class="emphasis.bold">if</B
> construct.
If <b class="emphasis.bold">cd</B
> is successful, it will return 0; the next two lines
of code are run, finishing the <em class="emphasis">pushd</EM
> operation.
But if the <b class="emphasis.bold">cd</B
> fails, it returns with exit status
1, and <em class="emphasis">pushd</EM
> will
print a message saying that you haven't gone anywhere.<a class="indexterm" name="AUTOID-7595"></A
></P
><p class="para">You can usually rely on built-in commands and standard
UNIX utilities to return appropriate exit statuses, but what
about your own shell scripts and functions?
For example, what if you wrote a <b class="emphasis.bold">cd</B
> function that
overrides the built-in command?</P
><p class="para">Let's say you have the following code in your <em class="emphasis">.profile</EM
>
or environment file:</P
><p class="para"><blockquote class="screen"><pre class="screen">function _cd {
    &quot;cd&quot; $*
    print $OLDPWD -&gt; $PWD
}
alias cd=_cd</PRE
></BLOCKQUOTE
></P
><p class="para"><a class="indexterm" name="AUTOID-7603"></A
><a class="indexterm" name="AUTOID-7605"></A
><a class="indexterm" name="AUTOID-7607"></A
><a class="indexterm" name="AUTOID-7610"></A
>The function <em class="emphasis">_cd</EM
> simply changes directories and prints
a message saying where you were and where you are now.
Because functions have lower priority than built-in commands
in the shell's order of command lookup, we need to define <b class="emphasis.bold">cd</B
> itself as an alias so
that it overrides the built-in <b class="emphasis.bold">cd</B
>.</P
><p class="para"><a class="indexterm" name="AUTOID-7617"></A
>The function calls the built-in <b class="emphasis.bold">cd</B
> command, but notice
that it's surrounded in double quotes: that prevents the shell
from looking it up as an alias. (This may seem like a kludge
in the aliasing mechanism, but it's really just a ramification
of the shell's command-line processing rules, which we list
in <a class="xref" href="ch07_01.htm" webstripperlinkwas="ch07_01.htm" title="Input/Output and Command-line Processing">Chapter 7, Input/Output and Command-line Processing</A
>.)  
[3]
If it did find <b class="emphasis.bold">cd</B
> as an alias, the shell would go into
an &quot;infinite recursion&quot; in which the alias is expanded
to <em class="emphasis">_cd</EM
>, which runs the function, which calls <b class="emphasis.bold">cd</B
>,
which the shell expands to the alias again, etc.</P
><blockquote class="footnote"><p class="para">[3] <a class="indexterm" name="AUTOID-7624"></A
>A related result of command-line processing
is that if you surround a command with 
<em class="emphasis">single</EM
> quotes, the shell won't look it up as an alias
or as a function.</P
></BLOCKQUOTE
><p class="para">Anyway, we want this function to return the same exit
status that the built-in <b class="emphasis.bold">cd</B
> returns.
The problem is that the exit status is reset by every command,
so it &quot;disappears&quot; if you don't save it immediately. In this function,
the built-in <b class="emphasis.bold">cd</B
>'s exit status disappears when the <b class="emphasis.bold">print</B
>
statement runs (and sets its own exit status).</P
><p class="para">Therefore, we need to save the status that <b class="emphasis.bold">cd</B
>
sets and use it as the entire function's exit status.
Two shell features we haven't seen yet provide the way.<a class="indexterm" name="AUTOID-7637"></A
><a class="indexterm" name="AUTOID-7640"></A
>
First is the special shell variable
<code class="literal">?</CODE
>, whose value (<b class="emphasis.bold">$</B
><code class="literal">?</CODE
>) is the exit status of the last
command that ran. For example:</P
><p class="para"><blockquote class="screen"><pre class="screen">cd <em class="emphasis">baddir</EM
>
print $?</PRE
></BLOCKQUOTE
></P
><p class="para">causes the shell to print <b class="emphasis.bold">1</B
>, while:</P
><p class="para"><blockquote class="screen"><pre class="screen">cd <em class="emphasis">gooddir</EM
>
print $?</PRE
></BLOCKQUOTE
></P
><p class="para">causes the shell to print <b class="emphasis.bold">0</B
>.</P
><div class="sect3"><h4 class="sect3"><a class="title" name="KSH-CH-5-SECT-1.1.1">5.1.1.1 Return</A
></H4
><p class="para"><a class="indexterm" name="KSH-CH-5-IX-RETURN"></A
>The second feature we need
is the statement <b class="emphasis.bold">return</B
> <em class="emphasis">N</EM
>, which causes the surrounding
script or function to exit with exit status <em class="emphasis">N</EM
>.
<em class="emphasis">N</EM
> is actually optional; it defaults to 0. Scripts that
finish without a <b class="emphasis.bold">return</B
> statement (i.e., every one we
have seen so far) return whatever the last statement returns.
If you use <b class="emphasis.bold">return</B
> within a function, it will just exit the
function.  <a class="indexterm" name="AUTOID-7667"></A
>
(In contrast, the statement <b class="emphasis.bold">exit</B
> <em class="emphasis">N</EM
> exits
the entire script, no matter how deeply you are nested in functions.)</P
><p class="para">Getting back to our example: if the call to &quot;real&quot; <b class="emphasis.bold">cd</B
> were last in
our <em class="emphasis">_cd</EM
> function, it would behave properly. Unfortunately,
we really need the assignment statement where it is, so that we can avoid lots
of ugly error processing. 
Therefore we need to save <b class="emphasis.bold">cd</B
>'s
exit status and return it as the function's exit status. Here is
how to do it:</P
><p class="para"><blockquote class="screen"><pre class="screen">function _cd {
    &quot;cd&quot; $*
    es=$?
    print $OLDPWD -&gt; $PWD
    return $es
}</PRE
></BLOCKQUOTE
></P
><p class="para">The second line saves the exit status of <b class="emphasis.bold">cd</B
> in the variable
<b class="emphasis.bold">es</B
>; the fourth returns it as the function's exit status.
We'll see a more substantial &quot;wrapper&quot; for <b class="emphasis.bold">cd</B
> in <a class="xref" href="ch07_01.htm" webstripperlinkwas="ch07_01.htm" title="Input/Output and Command-line Processing">Chapter 7</A
>.</P
><p class="para"><a class="indexterm" name="AUTOID-7683"></A
><a class="indexterm" name="AUTOID-7684"></A
><a class="indexterm" name="AUTOID-7686"></A
>Exit statuses aren't very useful for anything other than
their intended purpose. In particular, you may be tempted to use
them as &quot;return values&quot; of functions, as you would with functions
in C or Pascal. That won't work;
you should use variables or command substitution
instead to simulate this effect.</P
></DIV
></DIV
><div class="sect2"><h3 class="sect2"><a class="title" name="KSH-CH-5-SECT-1.2">5.1.2 Combinations of Exit Statuses</A
></H3
><p class="para"><a class="indexterm" name="KSH-CH-5-IX-EXIT-STATUS-LOGICAL-COMBINATIONS"></A
>One of the more obscure parts of Korn shell syntax allows you
to combine exit statuses logically, so that you can test more
than one thing at a time.  </P
><p class="para"><a class="indexterm" name="KSH-CH-5-IX-AMPAMP-FOR-EXIT-STATS"></A
><a class="indexterm" name="KSH-CH-5-IX-PIPEPIPE-EXIT-STATS"></A
>The syntax <em class="emphasis">statement1</EM
><b class="emphasis.bold"> &amp;&amp;</B
> <em class="emphasis">statement2</EM
> means, &quot;execute
<em class="emphasis">statement1</EM
>, and if its exit status is 0, execute <em class="emphasis">statement2</EM
>.&quot;
The syntax <em class="emphasis">statement1</EM
><b class="emphasis.bold"> || </B
><em class="emphasis">statement2</EM
> is the converse:
it means, &quot;execute <em class="emphasis">statement1</EM
>, and if its exit status is
<em class="emphasis">not</EM
> 0, execute <em class="emphasis">statement2</EM
>.&quot;</P
><p class="para">At first, these look like &quot;if/then&quot; and &quot;if not/then&quot; constructs,
respectively. But they are really intended for use within 
conditions of <b class="emphasis.bold">if</B
> constructs-as C programmers will
readily understand.  </P
><p class="para">It's much more useful to think of these constructs as &quot;and&quot; and
&quot;or,&quot; respectively. Consider this:</P
><p class="para"><blockquote class="screen"><pre class="screen">if <em class="emphasis">statement1</EM
> &amp;&amp; <em class="emphasis">statement2</EM
>
then
    ...
fi</PRE
></BLOCKQUOTE
></P
><p class="para">In this case, <em class="emphasis">statement1</EM
> is executed. If it returns a 0
status, then presumably it ran without error. Then <em class="emphasis">statement2</EM
>
runs. The <b class="emphasis.bold">then</B
> clause is executed if <em class="emphasis">statement2</EM
> returns
a 0 status. Conversely, if <em class="emphasis">statement1</EM
> fails (returns a
non-0 exit status), then <em class="emphasis">statement2</EM
> doesn't even run;
the &quot;last statement&quot; in the condition was <em class="emphasis">statement1</EM
>, which
failed-so the <b class="emphasis.bold">then</B
> clause 
doesn't run. Taken all together,
it's fair to conclude that the <b class="emphasis.bold">then</B
> clause runs if
<em class="emphasis">statement1</EM
> and <em class="emphasis">statement2</EM
> both succeeded.</P
><p class="para">Similarly, consider this:</P
><p class="para"><blockquote class="screen"><pre class="screen">if <em class="emphasis">statement1</EM
> || <em class="emphasis">statement2</EM
>
then
    ...
fi</PRE
></BLOCKQUOTE
></P
><p class="para">If <em class="emphasis">statement1</EM
> succeeds, then <em class="emphasis">statement2</EM
> does <em class="emphasis">not</EM
>
run. This makes <em class="emphasis">statement1</EM
> the last statement, which means
that the <b class="emphasis.bold">then</B
> clause runs. On the other hand, if <em class="emphasis">statement1</EM
>
fails, then <em class="emphasis">statement2</EM
> runs, and whether the <b class="emphasis.bold">then</B
> clause
runs or not depends on the success of <em class="emphasis">statement2</EM
>. The upshot
is that the <b class="emphasis.bold">then</B
> clause runs if <em class="emphasis">statement1 or statement2</EM
>
succeeds.</P
><p class="para">As a simple example, assume that we need to write a script that checks
a file for the presence of two words and just prints a message
saying whether <em class="emphasis">either</EM
> word is in the file or not.<a class="indexterm" name="AUTOID-7750"></A
>
We can use <em class="emphasis">grep</EM
> for this: it returns exit status 0 if
it found the given string in its input, non-0 if not:</P
><p class="para"><blockquote class="screen"><pre class="screen">filename=$1
word1=$2
word2=$3
if grep $word1 $filename || grep $word2 $filename
then
    print &quot;$word1 or $word2 is in $filename.&quot;
fi</PRE
></BLOCKQUOTE
></P
><p class="para">The <b class="emphasis.bold">then</B
> clause of this code runs if either <em class="emphasis">grep</EM
>
statement succeeds. Now assume that we want the script to say 
whether 
or not the input file contains <em class="emphasis">both</EM
> words.
Here's how to do it:</P
><p class="para"><blockquote class="screen"><pre class="screen">filename=$1
word1=$2
word2=$3
if grep $word1 $filename &amp;&amp; grep $word2 $filename
then
    print &quot;$word1 and $word2 are both in $filename.&quot;
fi</PRE
></BLOCKQUOTE
></P
><p class="para">We'll see more examples of these logical operators later in 
this chapter and in the code for the <em class="emphasis">kshdb</EM
> debugger in
<a class="xref" href="ch09_01.htm" webstripperlinkwas="ch09_01.htm" title="Debugging Shell Programs">Chapter 9, Debugging Shell Programs</A
>.<a class="indexterm" name="AUTOID-7764"></A
><a class="indexterm" name="AUTOID-7765"></A
><a class="indexterm" name="AUTOID-7766"></A
><a class="indexterm" name="AUTOID-7767"></A
></P
></DIV
><div class="sect2"><h3 class="sect2"><a class="title" name="KSH-CH-5-SECT-1.3">5.1.3 Condition Tests</A
></H3
><p class="para"><a class="indexterm" name="KSH-CH-5-IX-CND-TSTS"></A
><a class="indexterm" name="AUTOID-7773"></A
>Exit statuses are the only things 
an <b class="emphasis.bold">if</B
> construct can test. But that doesn't mean you can
check only whether or not commands ran properly. The shell provides
a way of testing a variety of conditions with the <b class="emphasis.bold">[[ ]]</B
>
construct.
[4]</P
><blockquote class="footnote"><p class="para">[4] <a class="indexterm" name="AUTOID-7780"></A
><a class="indexterm" name="AUTOID-7783"></A
><a class="indexterm" name="AUTOID-7786"></A
>The Korn shell also accepts the external <em class="emphasis">[]</EM
> and
<em class="emphasis">test</EM
> commands.<a class="indexterm" name="AUTOID-7792"></A
><a class="indexterm" name="AUTOID-7795"></A
>
The <b class="emphasis.bold">[[ ]]</B
> construct has many more options and
is better integrated into the Korn shell language:
specifically, word splitting and wildcard expansion
aren't done within <b class="emphasis.bold">[[</B
> and <b class="emphasis.bold">]]</B
>, making quoting
less necessary.</P
></BLOCKQUOTE
><p class="para">You can use the construct to check many different attributes of a file
(whether it exists, what type of file it is, what its permissions
and ownership are, etc.), compare two files to see which is newer,
do comparisons and pattern matching on strings, and more.</P
><p class="para"><a class="indexterm" name="AUTOID-7803"></A
><b class="emphasis.bold">[[</B
> <em class="emphasis">condition</EM
><b class="emphasis.bold"> ]]</B
> is actually a statement just like any
other, except that the only thing it does is return an exit status
that tells whether <em class="emphasis">condition</EM
> is true or not. Thus it fits
within the <b class="emphasis.bold">if</B
> construct's syntax of <b class="emphasis.bold">if</B
> <em class="emphasis">statements</EM
>.</P
><div class="sect3"><h4 class="sect3"><a class="title" name="KSH-CH-5-SECT-1.3.1">5.1.3.1 String comparisons</A
></H4
><p class="para"><a class="indexterm" name="KSH-CH-5-IX-CND-TSTS-STR-COMPARISON-OPRTRS"></A
>The double square brackets (<b class="emphasis.bold">[[]]</B
>) surround expressions that include
various types of <em class="emphasis">operators</EM
>. We will
start with the string comparison operators, which are listed
in 
<a class="xref" href="#KSH-CH-5-TAB-0" title="String Comparison Operators">Table 5.1</A
>.
(Notice that there are no operators for 
&quot;greater than or equal&quot; or &quot;less than or equal.&quot;)
In the table, <em class="emphasis">str</EM
> refers to an expression with
a string value, and <em class="emphasis">pat</EM
> refers to a pattern that can contain
wildcards (just like the patterns in the string-handling operators
we saw in the last chapter).<a class="indexterm" name="AUTOID-7824"></A
><a class="indexterm" name="AUTOID-7828"></A
><a class="indexterm" name="AUTOID-7832"></A
><a class="indexterm" name="AUTOID-7836"></A
><a class="indexterm" name="AUTOID-7840"></A
><a class="indexterm" name="AUTOID-7844"></A
></P
><table class="table"><caption class="table"><a class="title" name="KSH-CH-5-TAB-0">Table 5.1: String Comparison Operators</A
></CAPTION
><thead class="thead"><tr class="row" valign="TOP"><th class="entry" align="LEFT" rowspan="1" colspan="1">Operator </TH
><th class="entry" align="LEFT" rowspan="1" colspan="1">True if...</TH
></TR
></THEAD
><tbody class="tbody"><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><em class="emphasis">str</EM
> = <em class="emphasis">pat</EM
>[5]</TD
><td class="entry" rowspan="1" colspan="1"><em class="emphasis">str</EM
> matches <em class="emphasis">pat</EM
>.</TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><em class="emphasis">str</EM
> != <em class="emphasis">pat</EM
></TD
><td class="entry" rowspan="1" colspan="1"><em class="emphasis">str</EM
> does not match <em class="emphasis">pat</EM
>.</TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><em class="emphasis">str1</EM
> &lt; <em class="emphasis">str2</EM
></TD
><td class="entry" rowspan="1" colspan="1"><em class="emphasis">str1</EM
> is less than <em class="emphasis">str2</EM
>.</TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><em class="emphasis">str1</EM
> &gt; <em class="emphasis">str2</EM
></TD
><td class="entry" rowspan="1" colspan="1"><em class="emphasis">str1</EM
> is greater than <em class="emphasis">str2</EM
>.</TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><b class="emphasis.bold">-n</B
> <em class="emphasis">str</EM
></TD
><td class="entry" rowspan="1" colspan="1"><em class="emphasis">str</EM
> is not null (has length greater than 0).</TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><b class="emphasis.bold">-z</B
> <em class="emphasis">str</EM
></TD
><td class="entry" rowspan="1" colspan="1"><em class="emphasis">str</EM
> is null (has length 0).</TD
></TR
></TBODY
></TABLE
><blockquote class="footnote"><p class="para">[5] Note
that there is only one equal sign (<b class="emphasis.bold">=</B
>).
This is a common source of errors.</P
></BLOCKQUOTE
><p class="para"><a class="indexterm" name="KSH-CH-5-IX-POPD"></A
>We can use one of these operators to improve our <em class="emphasis">popd</EM
> function,
which reacts badly if you try to pop and the
stack is empty. Recall that the code for <em class="emphasis">popd</EM
> is:</P
><p class="para"><blockquote class="screen"><pre class="screen">function popd {			# pop directory off the stack, cd there
    DIRSTACK=${DIRSTACK#* }
    cd ${DIRSTACK%% *}
    print &quot;$PWD&quot;
}</PRE
></BLOCKQUOTE
></P
><p class="para">If the stack is empty, then <b class="emphasis.bold">$DIRSTACK</B
> is the null string,
as is the expression <b class="emphasis.bold">${DIRSTACK%% *}</B
>. This means that you
will change to your home directory; instead, we want <em class="emphasis">popd</EM
> to print
an error message and do nothing.</P
><p class="para">To accomplish this, we need to test for an empty stack, i.e., whether
<b class="emphasis.bold">$DIRSTACK</B
> is null or not. Here is one way to do it:<a class="indexterm" name="AUTOID-7912"></A
></P
><p class="para"><blockquote class="screen"><pre class="screen">function popd {                 # pop directory off the stack, cd there
    if [[ -n $DIRSTACK ]]; then
        DIRSTACK=${DIRSTACK#* }
        cd ${DIRSTACK%% *}
        print &quot;$PWD&quot;
    else
        print &quot;stack empty, still in $PWD.&quot;
    fi
}</PRE
></BLOCKQUOTE
></P
><p class="para"><a class="indexterm" name="AUTOID-7919"></A
>Notice that instead of putting <b class="emphasis.bold">then</B
> on a separate line,
we put it on the same line as the <b class="emphasis.bold">if</B
> after a semicolon,
which is the shell's standard statement separator character.</P
><p class="para">We could have used operators other than <b class="emphasis.bold">-n</B
>.  <a class="indexterm" name="AUTOID-7926"></A
>
For example,
we could have used <b class="emphasis.bold">-z</B
> and switched the code in the <b class="emphasis.bold">then</B
>
and <b class="emphasis.bold">else</B
> clauses. We also could have used:
[6]</P
><blockquote class="footnote"><p class="para">[6] <a class="indexterm" name="AUTOID-7935"></A
>Note that this code does <em class="emphasis">not</EM
> work under the older <em class="emphasis">[ ]</EM
>
or <em class="emphasis">test</EM
> syntax, which will complain about a missing argument
if the variable is null.  <a class="indexterm" name="AUTOID-7941"></A
>
This means that it is no longer necessary to surround
both sides with double quotes (or to use
hacks like <b class="emphasis.bold">[ x$DIRSTACK = x ]</B
>) as you had to with
the Bourne shell;
the Korn shell's <b class="emphasis.bold">[[</B
>/<b class="emphasis.bold">]]</B
> syntax handles null values correctly.</P
></BLOCKQUOTE
><p class="para"><blockquote class="screen"><pre class="screen">if [[ $DIRSTACK = &quot;&quot; ]]; then
        ...</PRE
></BLOCKQUOTE
></P
><a class="indexterm" name="AUTOID-7948"></A
><p class="para">While we're cleaning up code we wrote in the last chapter,
let's fix up the error handling in the <em class="emphasis">highest</EM
> script
(Task 4-1). The code for that script is:</P
><p class="para"><blockquote class="screen"><pre class="screen">filename=${1:?&quot;filename missing.&quot;}
howmany=${2:-10}
sort -nr $filename | head -$howmany</PRE
></BLOCKQUOTE
></P
><p class="para">Recall that if you omit the first argument (the filename),
the shell prints the message <b class="emphasis.bold">highest: 1: filename missing</B
>.
We can make this better by substituting a more standard &quot;usage&quot; message:</P
><p class="para"><blockquote class="screen"><pre class="screen">if [[ -z $1 ]]; then
    print 'usage: howmany filename [-N]'
else
    filename=$1
    howmany=${2:-10}
    sort -nr $filename | head -$howmany
fi</PRE
></BLOCKQUOTE
></P
><p class="para">It is considered better programming style to enclose all
of the code in the <b class="emphasis.bold">if</B
>-<b class="emphasis.bold">then</B
>-<b class="emphasis.bold">else</B
>, but such code can
get confusing if you are writing a long script in which you need
to check for errors and bail out at several points along the way.
Therefore, a more usual style for shell programming is this:<a class="indexterm" name="AUTOID-7961"></A
></P
><p class="para"><blockquote class="screen"><pre class="screen">if [[ -z $1 ]]; then
    print 'usage: howmany filename [-N]'
    return 1
fi
filename=$1
howmany=${2:-10}
sort -nr $filename | head -$howmany</PRE
></BLOCKQUOTE
></P
><p class="para"><a class="indexterm" name="AUTOID-7968"></A
>The <b class="emphasis.bold">return</B
> statement informs any calling program that needs to know whether it ran
successfully or not.</P
><p class="para"><a class="indexterm" name="KSH-CH-5-IX-C-COMPILERS"></A
>As an example of the <b class="emphasis.bold">=</B
> and <b class="emphasis.bold">!=</B
> operators, we can add the shell script front end to a C compiler 
to our solution for Task 4-2. 
Recall that we are given a filename
ending in <em class="emphasis">.c</EM
> (the source code file),
and we need to construct a filename that is the
same but ends in <em class="emphasis">.o</EM
> (the object code file).
The modifications we will make have to do with other types of
files that can be passed to a C compiler.</P
></DIV
><div class="sect3"><h4 class="sect3"><a class="title" name="KSH-CH-5-SECT-1.3.2">5.1.3.2 About C Compilers</A
></H4
><p class="para">Before we get to the shell code, it is necessary to understand
a few things about C compilers.
We already know that they translate C source code into
object code. Actually, they are part of <em class="emphasis">compilation systems</EM
>
that also perform several other tasks. The term &quot;compiler&quot; is often
used instead of &quot;compilation system,&quot; so we'll use it in both senses.</P
><p class="para"><a class="indexterm" name="KSH-CH-5-IX-ASSEMBLY-LANGUAGE"></A
><a class="indexterm" name="AUTOID-7985"></A
><a class="indexterm" name="AUTOID-7988"></A
><a class="indexterm" name="KSH-CH-5-IX-LINKING"></A
><a class="indexterm" name="AUTOID-7993"></A
>We're interested here in two tasks that compilers perform other
than compiling C code:
they can translate <em class="emphasis">assembly language</EM
> code into object code,
and they can
<em class="emphasis">link</EM
> object code files together to form an <em class="emphasis">executable</EM
> program.</P
><p class="para"><a class="indexterm" name="KSH-CH-5-IX-C-PROGRAMMING-LANGUAGE"></A
><em class="emphasis">Assembly language</EM
> works at a level that is close to
the bare computer; each assembly statement
is directly translatable into a statement of object code-as
opposed to C or other higher-level languages, in which a single source
statement could translate to dozens of object code instructions.
Translating a file of assembly language code into object code
is called, not surprisingly, <em class="emphasis">assembling</EM
> the code.</P
><p class="para">Although many people consider assembly language to be quaintly
old-fashioned&nbsp;- like a typewriter in this age of
WYSIWYG word processing and desktop publishing-some 
programmers still need to use it when dealing with precise
details of computer hardware. It's not uncommon for a program to
consist of several files' worth of code in a higher-level language
(such as C) and a few low-level routines in assembly language.<a class="indexterm" name="AUTOID-8005"></A
></P
><p class="para">The other task we'll worry about is called <em class="emphasis">linking</EM
>. Most real-world programs,
unlike those assigned for a first-year programming class, consist of
several files of source code, possibly written by several different
programmers.  <a class="indexterm" name="AUTOID-8008"></A
>
These files are compiled into object code; then the object
code must be combined to form the final, runnable program, known as
an <em class="emphasis">executable</EM
>. The task
of combining is often called &quot;linking&quot;: each object code component usually
contains references to other components, and these references must
be resolved or &quot;linked&quot; together.</P
><p class="para">C compilation systems 
are capable of assembling files of assembly language
into object code
and linking object code files into executables. In particular, a
compiler calls
a separate <em class="emphasis">assembler</EM
> to deal with assembly code and a <em class="emphasis">linker</EM
>
(also known as a &quot;loader,&quot; &quot;linking loader,&quot; or &quot;link editor&quot;)
to deal with object code files. These separate tools are known in
the UNIX world as <em class="emphasis">as</EM
> and <em class="emphasis">ld</EM
>, respectively. The 
C compiler itself is invoked with the command <em class="emphasis">cc</EM
>.</P
><p class="para">We can express all of these steps in terms of the suffixes of files
passed as arguments to the C compiler. Basically, the compiler does
the following:</P
><ol class="orderedlist"><li class="listitem"><p class="para">If the argument ends in <em class="emphasis">.c</EM
> it's a C source file;
compile into a <em class="emphasis">.o</EM
> object code file.</P
></LI
><li class="listitem"><p class="para">If the argument ends in <em class="emphasis">.s</EM
>, it's assembly language;
assemble into a <em class="emphasis">.o</EM
> file.</P
></LI
><li class="listitem"><p class="para">If the argument ends in <em class="emphasis">.o</EM
>, do nothing; save for the linking step later.</P
></LI
><li class="listitem"><p class="para">If the argument ends in some other suffix, print an error message and
exit.
[7]</P
><blockquote class="footnote"><p class="para">[7] For the purposes of this example. We know this isn't 
strictly true in real life.</P
></BLOCKQUOTE
></LI
><li class="listitem"><p class="para"><a class="indexterm" name="AUTOID-8037"></A
><a class="indexterm" name="AUTOID-8041"></A
>Link all <em class="emphasis">.o</EM
> object code files into an executable file called <em class="emphasis">a.out</EM
>.
This file is usually renamed to something more descriptive.</P
></LI
></OL
><p class="para">Step 3 allows object code files that have already been compiled
(or assembled) to be re-used to build other executables.<a class="indexterm" name="AUTOID-8046"></A
>
For example, an object code file that implements an interface to
a <span class="acronym">CD-ROM</SPAN
> drive could be useful in any program that reads from <span class="acronym">CD-ROMS</SPAN
>.</P
><p class="para"><a class="xref" href="#KSH-CH-5-FIG-0" title="Files produced by a C compiler">Figure 5.1</A
> should make the compilation process clearer; it shows how the compiler processes
the C source files <em class="emphasis">a.c</EM
> and <em class="emphasis">b.c</EM
>, the assembly language file
<em class="emphasis">c.s</EM
>, and the already-compiled object code file <em class="emphasis">d.o</EM
>.
In other words, it shows how the compiler handles the command
<b class="emphasis.bold">cc a.c b.c c.s d.o</B
>.</P
><h4 class="figure"><a class="title" name="KSH-CH-5-FIG-0">Figure 5.1: Files produced by a C compiler</A
></H4
><img class="graphic" src="figs/korn0501.gif" webstripperlinkwas="figs/korn0501.gif" alt="Figure 5.1"><p class="para">Here is how we would begin to implement this behavior in a shell script.
Assume that the
variable <b class="emphasis.bold">filename</B
> holds the argument in question, and that
<em class="emphasis">ccom</EM
> is the name of the program that actually compiles a C source
file into object code. Assume further that <em class="emphasis">ccom</EM
> and <em class="emphasis">as</EM
>
(assembler) take arguments for the names of the source and object files:</P
><p class="para"><blockquote class="screen"><pre class="screen">if [[ $filename = *.c ]]; then
    objname=${filename%.c}.o
    ccom $filename $objname
elif [[ $filename = *.s ]]; then
    objname=${filename%.s}.o
    as $filename $objname
elif [[ $filename != *.o ]]; then
    print &quot;error: $filename is not a source or object file.&quot;
    return 1
fi
<em class="emphasis">further processing...</EM
></PRE
></BLOCKQUOTE
></P
><p class="para">Recall from the previous chapter that the expression
<b class="emphasis.bold">${filename%.c}.o</B
> deletes <em class="emphasis">.c</EM
> from <b class="emphasis.bold">filename</B
> and
appends <em class="emphasis">.o</EM
>; <b class="emphasis.bold">${filename%.s}.o</B
> does the analogous
thing for files ending in <em class="emphasis">.s</EM
>.</P
><p class="para">The &quot;further processing&quot; is the link step, which we will see when
we complete this example later in the chapter.<a class="indexterm" name="AUTOID-8076"></A
><a class="indexterm" name="AUTOID-8077"></A
><a class="indexterm" name="AUTOID-8078"></A
><a class="indexterm" name="AUTOID-8079"></A
></P
></DIV
><div class="sect3"><h4 class="sect3"><a class="title" name="KSH-CH-5-SECT-1.3.3">5.1.3.3 File Attribute Checking</A
></H4
><p class="para"><a class="indexterm" name="KSH-CH-5-IX-CND-TSTS-FILE-ATTR-OPRTRS"></A
>The other kind of operator that can be used in conditional
expressions checks a file 
for certain properties. There are 21 such operators. We
will cover those of most general interest here; the rest refer
to arcana like sticky bits, sockets, and file descriptors,
and thus are of interest only to systems hackers. Refer to
<a class="xref" href="appb_01.htm" webstripperlinkwas="appb_01.htm" title="Reference Lists">Appendix B, Reference Lists</A
> for the complete list. 
<a class="xref" href="#KSH-CH-5-TAB-1" title="File Attribute Operators">Table 5.2</A
>
lists those that
we will examine.<a class="indexterm" name="AUTOID-8088"></A
><a class="indexterm" name="AUTOID-8092"></A
><a class="indexterm" name="AUTOID-8096"></A
><a class="indexterm" name="AUTOID-8100"></A
><a class="indexterm" name="AUTOID-8104"></A
><a class="indexterm" name="AUTOID-8108"></A
><a class="indexterm" name="AUTOID-8112"></A
><a class="indexterm" name="AUTOID-8116"></A
><a class="indexterm" name="AUTOID-8120"></A
><a class="indexterm" name="AUTOID-8124"></A
><a class="indexterm" name="AUTOID-8128"></A
></P
><table class="table"><caption class="table"><a class="title" name="KSH-CH-5-TAB-1">Table 5.2: File Attribute Operators</A
></CAPTION
><thead class="thead"><tr class="row" valign="TOP"><th class="entry" align="LEFT" rowspan="1" colspan="1">Operator </TH
><th class="entry" align="LEFT" rowspan="1" colspan="1">True if...</TH
></TR
></THEAD
><tbody class="tbody"><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1">-a <em class="emphasis">file</EM
></TD
><td class="entry" rowspan="1" colspan="1"><em class="emphasis">file</EM
> exists</TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1">-d <em class="emphasis">file</EM
></TD
><td class="entry" rowspan="1" colspan="1"><em class="emphasis">file</EM
> is a directory</TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1">-f <em class="emphasis">file</EM
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para"><em class="emphasis">file</EM
> is a regular file (i.e., not a directory or 
other special type of file)</P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1">-r <em class="emphasis">file</EM
></TD
><td class="entry" rowspan="1" colspan="1">You have read permission on <em class="emphasis">file</EM
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1">-s <em class="emphasis">file</EM
></TD
><td class="entry" rowspan="1" colspan="1"><em class="emphasis">file</EM
> exists and is not empty</TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1">-w <em class="emphasis">file</EM
></TD
><td class="entry" rowspan="1" colspan="1">You have write permission on <em class="emphasis">file</EM
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1">-x <em class="emphasis">file</EM
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">You have execute permission on <em class="emphasis">file</EM
>,
or directory search permission if it is a directory</P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1">-O <em class="emphasis">file</EM
></TD
><td class="entry" rowspan="1" colspan="1">You own <em class="emphasis">file</EM
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1">-G <em class="emphasis">file</EM
></TD
><td class="entry" rowspan="1" colspan="1">Your group ID is the same as that of <em class="emphasis">file</EM
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><em class="emphasis">file1</EM
> -nt <em class="emphasis">file2</EM
></TD
><td class="entry" rowspan="1" colspan="1"><em class="emphasis">file1</EM
> is newer than <em class="emphasis">file2</EM
>[8]</TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><em class="emphasis">file1</EM
> -ot <em class="emphasis">file2</EM
></TD
><td class="entry" rowspan="1" colspan="1"><em class="emphasis">file1</EM
> is older than <em class="emphasis">file2</EM
></TD
></TR
></TBODY
></TABLE
><blockquote class="footnote"><p class="para">[8] Specifically, the <b class="emphasis.bold">-nt</B
> and 
<b class="emphasis.bold">-ot</B
> operators compare 
<em class="emphasis">modification times</EM
> of two files.</P
></BLOCKQUOTE
><p class="para"><a class="indexterm" name="AUTOID-8207"></A
><a class="indexterm" name="AUTOID-8210"></A
><a class="indexterm" name="AUTOID-8213"></A
>Before we get to an example, you should know that conditional
expressions inside <b class="emphasis.bold">[[</B
> and <b class="emphasis.bold">]]</B
> can also be combined using
the logical operators <b class="emphasis.bold">&amp;&amp;</B
> and <b class="emphasis.bold">||</B
>, just as we saw
with plain shell commands above, in the section entitled &quot;Combinations
of Exit Statuses.&quot; It's also possible to
combine shell commands with conditional expressions
using logical operators, like this:</P
><p class="para"><blockquote class="screen"><pre class="screen">if <code class="replaceable"><i>command</I
></CODE
> &amp;&amp; [[ <code class="replaceable"><i>condition</I
></CODE
> ]]; then
    ...</PRE
></BLOCKQUOTE
></P
><p class="para"><a class="xref" href="ch07_01.htm" webstripperlinkwas="ch07_01.htm" title="Input/Output and Command-line Processing">Chapter 7</A
> contains an example of this combination.</P
><p class="para">You can also negate the
truth value of a conditional expression by preceding it with
an exclamation point (<b class="emphasis.bold">!</B
>), so that <b class="emphasis.bold">!</B
> <em class="emphasis">expr</EM
> evaluates to
true only if <em class="emphasis">expr</EM
> is false.<a class="indexterm" name="AUTOID-8231"></A
>
Furthermore, you can 
make complex logical expressions of conditional operators by
grouping them with parentheses.
[9]</P
><blockquote class="footnote"><p class="para">[9] <a class="indexterm" name="AUTOID-8236"></A
>It turns out that this is true outside of the <b class="emphasis.bold">[[</B
>/<b class="emphasis.bold">]]</B
>
construct as well. As we will see in <a class="xref" href="ch08_01.htm" webstripperlinkwas="ch08_01.htm" title="Process Handling">Chapter 8, Process Handling</A
>
the construct <b class="emphasis.bold">(</B
><em class="emphasis">statement list</EM
><b class="emphasis.bold">)</B
> runs the statement list
in a subshell, whose exit status is that of the last statement in 
the list. However, there is no equivalent of the negation (!)
operator outside of the <b class="emphasis.bold">[[</B
>/<b class="emphasis.bold">]]</B
> construct, although there
will be in future releases.</P
></BLOCKQUOTE
><p class="para"><a class="indexterm" name="KSH-CH-5-IX-PUSHD2"></A
>Here is how we would use two of the file operators to embellish
(yet again) our <em class="emphasis">pushd</EM
> function. Instead of having <b class="emphasis.bold">cd</B
>
determine whether the argument given is a valid directory-i.e., 
by returning with a bad exit status if it's not-we
can do the checking ourselves. Here is the code:</P
><p class="para"><blockquote class="screen"><pre class="screen">function pushd {                # push current directory onto stack
    dirname=$1
    if [[ -d $dirname &amp;&amp; -x $dirname ]]; then
        cd $dirname
        DIRSTACK=&quot;$dirname ${DIRSTACK:-$PWD}&quot;
        print &quot;$DIRSTACK&quot;
    else
        print &quot;still in $PWD.&quot;
    fi
}</PRE
></BLOCKQUOTE
></P
><p class="para"><a class="indexterm" name="AUTOID-8255"></A
><a class="indexterm" name="AUTOID-8259"></A
>The conditional expression evaluates to true only if the argument
<b class="emphasis.bold">$1</B
> is a directory (<b class="emphasis.bold">-d</B
>) <em class="emphasis">and</EM
> the user has permission
to change to it (<b class="emphasis.bold">-x</B
>).
[10]
Notice that this conditional also handles the case where the
argument is missing: <b class="emphasis.bold">$dirname</B
> is null, and since the null
string isn't a valid directory name, the conditional will fail.<a class="indexterm" name="AUTOID-8271"></A
></P
><blockquote class="footnote"><p class="para">[10] Remember that
the same permission flag that determines execute permission
on a regular file determines search permission on a directory.
This is why
the <b class="emphasis.bold">-x</B
> operator checks both things depending on file type.</P
></BLOCKQUOTE
><p class="para">Here is a more comprehensive example of the use of file operators.</P
><div class="task"><h4>Task 5.1</H4
><blockquote class="taskinfo"><p class="para"><a class="indexterm" name="AUTOID-8276"></A
>Write a script that prints essentially the same information 
as <b class="emphasis.bold">ls -l</B
> but in a more user-friendly way.</P
></BLOCKQUOTE
><p class="para">Although this task requires relatively long-winded code, it
is a straightforward application of many of the file operators:<a class="indexterm" name="AUTOID-8281"></A
><a class="indexterm" name="AUTOID-8285"></A
><a class="indexterm" name="AUTOID-8289"></A
><a class="indexterm" name="AUTOID-8293"></A
><a class="indexterm" name="AUTOID-8297"></A
><a class="indexterm" name="AUTOID-8301"></A
><a class="indexterm" name="AUTOID-8305"></A
></P
><p class="para"><blockquote class="screen"><pre class="screen">if [[ ! -a $1 ]]; then
    print &quot;file $1 does not exist.&quot;
    return 1
fi
if [[ -d $1 ]]; then
    print -n &quot;$1 is a directory that you may &quot;
    if [[ ! -x $1 ]]; then
        print -n &quot;not &quot;
    fi
    print &quot;search.&quot;
elif [[ -f $1 ]]; then
    print &quot;$1 is a regular file.&quot;
else
    print &quot;$1 is a special type of file.&quot;
fi
if [[ -O $1 ]]; then
    print 'you own the file.'
else
    print 'you do not own the file.'
fi
if [[ -r $1 ]]; then
    print 'you have read permission on the file.'
fi
if [[ -w $1 ]]; then
    print 'you have write permission on the file.'
fi
if [[ -x $1 &amp;&amp; ! -d $1 ]]; then
    print 'you have execute permission on the file.'
fi</PRE
></BLOCKQUOTE
></P
><p class="para">We'll call this script <em class="emphasis">fileinfo</EM
>. Here's how it works:</P
><ul class="itemizedlist"><li class="listitem"><p class="para"><a class="indexterm" name="AUTOID-8316"></A
>The first conditional tests if the file given as argument
does <em class="emphasis">not</EM
> exist (the exclamation point is the &quot;not&quot; operator;
the spaces around it are required). If the file does not exist, the script
prints an error message and exits with error status.</P
></LI
><li class="listitem"><p class="para">The second conditional tests if the file is a directory.<a class="indexterm" name="AUTOID-8322"></A
>
If so, the first <em class="emphasis">print</EM
> prints part of a message; 
remember that the
<b class="emphasis.bold">-n</B
> option tells <em class="emphasis">print</EM
> not to print a LINEFEED at the end.
The inner conditional checks if you do <em class="emphasis">not</EM
> have search
permission on the directory. If you don't have search permission, the word &quot;not&quot; is added to
the partial message. Then, the message is completed with
&quot;search.&quot; and a LINEFEED.</P
></LI
><li class="listitem"><p class="para">The <b class="emphasis.bold">elif</B
> clause checks if the file is a regular file;
if so, it prints a message.</P
></LI
><li class="listitem"><p class="para">The <b class="emphasis.bold">else</B
> clause accounts for the various special file types
on recent UNIX systems, such as sockets, devices, FIFO files, etc.
We assume that the casual user isn't interested in details of these.</P
></LI
><li class="listitem"><p class="para">The next conditional tests to see if the file is owned by you
(i.e., if its owner ID is the same as your login ID). If so, it
prints a message saying that you own it.</P
></LI
><li class="listitem"><p class="para">The next two conditionals test for your read and write permission on
the file.</P
></LI
><li class="listitem"><p class="para">The last conditional checks if you can execute the file.
It checks to see if you have execute permission and that
the file is <em class="emphasis">not</EM
> a directory. (If the file were a directory,
execute permission would really mean directory search permission.)</P
></LI
></UL
><p class="para"><a class="indexterm" name="AUTOID-8344"></A
><a class="indexterm" name="AUTOID-8345"></A
>As an example of <em class="emphasis">fileinfo</EM
>'s output, assume that you do an <b class="emphasis.bold">ls -l</B
> of
your current directory and it contains these lines:</P
><p class="para"><blockquote class="screen"><pre class="screen">-rwxr-xr-x   1 billr    other        594 May 28 09:49 bob
-rw-r-r-     1 billr    other      42715 Apr 21 23:39 custom.tbl
drwxr-xr-x   2 billr    other         64 Jan 12 13:42 exp
-r-r-r-      1 root     other        557 Mar 28 12:41 lpst</PRE
></BLOCKQUOTE
></P
><p class="para"><em class="emphasis">custom.tbl</EM
> and <em class="emphasis">lpst</EM
> are regular text files,
<em class="emphasis">exp</EM
> is a directory,
and <em class="emphasis">bob</EM
> is a shell script.
Typing <b class="emphasis.bold">fileinfo bob</B
> produces this output:</P
><p class="para"><blockquote class="screen"><pre class="screen">bob is a regular file.
you own the file.
you have read permission on the file.
you have write permission on the file.
you have execute permission on the file.</PRE
></BLOCKQUOTE
></P
><p class="para">Typing <b class="emphasis.bold">fileinfo custom.tbl</B
> results in this:</P
><p class="para"><blockquote class="screen"><pre class="screen">custom.tbl is a regular file.
you own the file.
you have read permission on the file.
you have write permission on the file.</PRE
></BLOCKQUOTE
></P
><p class="para">Typing <b class="emphasis.bold">fileinfo exp</B
> results in this:</P
><p class="para"><blockquote class="screen"><pre class="screen">exp is a directory that you may search.
you own the file.
you have read permission on the file.
you have write permission on the file.</PRE
></BLOCKQUOTE
></P
><p class="para">Finally, typing <b class="emphasis.bold">fileinfo lpst</B
> produces this:</P
><p class="para"><blockquote class="screen"><pre class="screen">lpst is a regular file.
you do not own the file.
you have read permission on the file.</PRE
></BLOCKQUOTE
></P
><p class="para"><a class="xref" href="ch07_01.htm" webstripperlinkwas="ch07_01.htm" title="Input/Output and Command-line Processing">Chapter 7</A
> contains an example of the <b class="emphasis.bold">-nt</B
> test operator.</P
></DIV
></DIV
></DIV
><div class="sect2"><h3 class="sect2"><a class="title" name="KSH-CH-5-SECT-1.4">5.1.4 Integer Conditionals</A
></H3
><p class="para"><a class="indexterm" name="KSH-CH-5-IX-CND-TSTS-INTR-COMPARISON-OPRTRS"></A
><a class="indexterm" name="AUTOID-8381"></A
>The shell also provides a set of <em class="emphasis">arithmetic</EM
> tests.  
These are different from <em class="emphasis">character string</EM
> comparisons
like <b class="emphasis.bold">&lt;</B
> and <b class="emphasis.bold">&gt;</B
>, which compare <em class="emphasis">lexicographic</EM
> values
of strings, not numeric values. For example, &quot;6&quot; is greater than
&quot;57&quot; lexicographically, just as &quot;p&quot; is greater than &quot;ox,&quot;
but of course the opposite is true when they're compared
as integers.</P
><p class="para"><a class="indexterm" name="AUTOID-8390"></A
>The integer comparison operators
are summarized in 
<a class="xref" href="#KSH-CH-5-TAB-2" title="Arithmetic Test Operators">Table 5.3</A
>.
FORTRAN programmers will find
their syntax slightly familiar.<a class="indexterm" name="AUTOID-8393"></A
><a class="indexterm" name="AUTOID-8397"></A
><a class="indexterm" name="AUTOID-8401"></A
><a class="indexterm" name="AUTOID-8405"></A
><a class="indexterm" name="AUTOID-8409"></A
><a class="indexterm" name="AUTOID-8413"></A
></P
><table class="table"><caption class="table"><a class="title" name="KSH-CH-5-TAB-2">Table 5.3: Arithmetic Test Operators</A
></CAPTION
><thead class="thead"><tr class="row" valign="TOP"><th class="entry" align="LEFT" rowspan="1" colspan="1">Test</TH
><th class="entry" align="LEFT" rowspan="1" colspan="1">Comparison</TH
></TR
></THEAD
><tbody class="tbody"><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1">-lt</TD
><td class="entry" rowspan="1" colspan="1">Less than</TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1">-le</TD
><td class="entry" rowspan="1" colspan="1">Less than or equal</TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1">-eq</TD
><td class="entry" rowspan="1" colspan="1">Equal</TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1">-ge</TD
><td class="entry" rowspan="1" colspan="1">Greater than or equal</TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1">-gt</TD
><td class="entry" rowspan="1" colspan="1">Greater than</TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1">-ne</TD
><td class="entry" rowspan="1" colspan="1">Not equal</TD
></TR
></TBODY
></TABLE
><p class="para">You'll find these to be of the most use in the context of the
integer variables we'll see in the next chapter. They're 
necessary if you want to combine integer tests with other types of
tests within the same conditional expression.  </P
><p class="para">However, the shell has a separate syntax for conditional
expressions that involve integers only. It's considerably
more efficient, so you should use it in preference to the arithmetic
test operators listed above.
Again, we'll cover the shell's integer conditionals in the next chapter.<a class="indexterm" name="AUTOID-8445"></A
><a class="indexterm" name="AUTOID-8446"></A
><a class="indexterm" name="AUTOID-8447"></A
></P
></DIV
></DIV
></DIV
><div class="htmlnav"><p></P
><hr align="LEFT" width="515" title="footer"><table width="515" border="0" cellspacing="0" cellpadding="0"><tr><td align="LEFT" valign="TOP" width="172"><a class="SECT1" href="ch04_05.htm" webstripperlinkwas="ch04_05.htm" title="4.5 Advanced Examples: pushd and popd"><img src="../gifs/txtpreva.gif" webstripperlinkwas="../gifs/txtpreva.gif" alt="Previous: 4.5 Advanced Examples: pushd and popd" border="0"></A
></TD
><td align="CENTER" valign="TOP" width="171"><a class="book" href="index.htm" webstripperlinkwas="http://www.ms.itb.ac.id/buku/unix-bookshelf/ksh/index.htm" title="Learning the Korn Shell"><img src="../gifs/txthome.gif" webstripperlinkwas="../gifs/txthome.gif" alt="Learning the Korn Shell" border="0"></A
></TD
><td align="RIGHT" valign="TOP" width="172"><a class="SECT1" href="ch05_02.htm" webstripperlinkwas="ch05_02.htm" title="5.2 for"><img src="../gifs/txtnexta.gif" webstripperlinkwas="../gifs/txtnexta.gif" alt="Next: 5.2 for" border="0"></A
></TD
></TR
><tr><td align="LEFT" valign="TOP" width="172">4.5 Advanced Examples: pushd and popd</TD
><td align="CENTER" valign="TOP" width="171"><a class="index" href="index/idx_0.htm" webstripperlinkwas="index/idx_0.htm" title="Book Index"><img src="../gifs/index.gif" webstripperlinkwas="../gifs/index.gif" alt="Book Index" border="0"></A
></TD
><td align="RIGHT" valign="TOP" width="172">5.2 for</TD
></TR
></TABLE
><hr align="LEFT" width="515" title="footer"><img src="../gifs/smnavbar.gif" webstripperlinkwas="../gifs/smnavbar.gif" usemap="#map" border="0" alt="The UNIX CD Bookshelf Navigation"><map name="map"><area shape="RECT" coords="0,0,73,21" href="../index.html" webstripperlinkwas="http://www.ms.itb.ac.id/buku/unix-bookshelf/index.html" alt="The UNIX CD Bookshelf"><area shape="RECT" coords="74,0,163,21" href="../upt/index.htm" webstripperlinkwas="http://www.ms.itb.ac.id/buku/unix-bookshelf/upt/index.htm" alt="UNIX Power Tools"><area shape="RECT" coords="164,0,257,21" href="../unixnut/index.htm" webstripperlinkwas="http://www.ms.itb.ac.id/buku/unix-bookshelf/unixnut/index.htm" alt="UNIX in a Nutshell"><area shape="RECT" coords="258,0,321,21" href="../vi/index.htm" webstripperlinkwas="http://www.ms.itb.ac.id/buku/unix-bookshelf/vi/index.htm" alt="Learning the vi Editor"><area shape="RECT" coords="322,0,378,21" href="../sedawk/index.htm" webstripperlinkwas="http://www.ms.itb.ac.id/buku/unix-bookshelf/sedawk/index.htm" alt="sed &amp; awk"><area shape="RECT" coords="379,0,438,21" href="index.htm" webstripperlinkwas="http://www.ms.itb.ac.id/buku/unix-bookshelf/ksh/index.htm" alt="Learning the Korn Shell"><area shape="RECT" coords="439,0,514,21" href="../lrnunix/index.htm" webstripperlinkwas="http://www.ms.itb.ac.id/buku/unix-bookshelf/lrnunix/index.htm" alt="Learning the UNIX Operating System"></MAP
></DIV
></BODY
></HTML
>
