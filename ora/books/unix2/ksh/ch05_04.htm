<html><head>
<title>[Chapter 5] 5.4 select</TITLE>
<meta name="DC.title" content="Learning the Korn Shell"><meta name="DC.creator" content="Bill Rosenblatt"><meta name="DC.publisher" content="O'Reilly &amp; Associates, Inc."><meta name="DC.date" content="1998-08-03T21:09:51Z"><meta name="DC.type" content="Text.Monograph"><meta name="DC.format" content="text/html" scheme="MIME"><meta name="DC.source" content="1-56592-054-6" scheme="ISBN"><meta name="DC.language" content="en-US"><meta name="generator" content="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><link rev="made" href="mailto:online-books@oreilly.com" title="Online Books Comments"><link rel="up" href="ch05_01.htm" webstripperlinkwas="ch05_01.htm" title="5. Flow Control"><link rel="prev" href="ch05_03.htm" webstripperlinkwas="ch05_03.htm" title="5.3 case"><link rel="next" href="ch05_05.htm" webstripperlinkwas="ch05_05.htm" title="5.5 while and until"></HEAD
><body bgcolor="#FFFFFF" text="#000000"><div class="htmlnav"><h1><img src="gifs/smbanner.gif" webstripperlinkwas="gifs/smbanner.gif" alt="Learning the Korn Shell" usemap="#srchmap" border="0"></H1
><map name="srchmap"><area shape="RECT" coords="0,0,466,66" href="index.htm" webstripperlinkwas="http://www.ms.itb.ac.id/buku/unix-bookshelf/ksh/index.htm" alt="Learning the Korn Shell"><area shape="RECT" coords="467,0,514,18" href="jobjects/fsearch.htm" webstripperlinkwas="jobjects/fsearch.htm" alt="Search this book"></MAP
><table width="515" border="0" cellspacing="0" cellpadding="0"><tr><td align="LEFT" valign="TOP" width="172"><a class="SECT1" href="ch05_03.htm" webstripperlinkwas="ch05_03.htm" title="5.3 case"><img src="../gifs/txtpreva.gif" webstripperlinkwas="../gifs/txtpreva.gif" alt="Previous: 5.3 case" border="0"></A
></TD
><td align="CENTER" valign="TOP" width="171"><b><font face="ARIEL,HELVETICA,HELV,SANSERIF" size="-1">Chapter 5<br>Flow Control</FONT
></B
></TD
><td align="RIGHT" valign="TOP" width="172"><a class="SECT1" href="ch05_05.htm" webstripperlinkwas="ch05_05.htm" title="5.5 while and until"><img src="../gifs/txtnexta.gif" webstripperlinkwas="../gifs/txtnexta.gif" alt="Next: 5.5 while and until" border="0"></A
></TD
></TR
></TABLE
>&nbsp;<hr align="LEFT" width="515" title="footer"></DIV
><div class="SECT1"><h2 class="sect1"><a class="title" name="KSH-CH-5-SECT-4">5.4 select</A
></H2
><p class="para"><a class="indexterm" name="KSH-CH-5-IX-SELECT"></A
><a class="indexterm" name="AUTOID-8963"></A
><a class="indexterm" name="AUTOID-8965"></A
>All of the flow-control constructs we have seen so far are also
available in the Bourne shell, and the C shell has equivalents with
different syntax. Our next construct, <b class="emphasis.bold">select</B
>, is new for the Korn shell;
moreover, it has no analog in conventional programming languages.</P
><p class="para"><b class="emphasis.bold">select</B
> allows you to generate simple menus easily.<a class="indexterm" name="AUTOID-8970"></A
>
It has concise syntax, but it does quite a lot of work.
The syntax is:</P
><p class="para"><blockquote class="screen"><pre class="screen">select <em class="emphasis">name</EM
> [in <em class="emphasis">list</EM
>]
do
    <em class="emphasis">statements that can use </EM
>$name...
done</PRE
></BLOCKQUOTE
></P
><p class="para">This is the same syntax as <b class="emphasis.bold">for</B
> except for
the keyword <b class="emphasis.bold">select</B
>.  <a class="indexterm" name="AUTOID-8981"></A
><a class="indexterm" name="AUTOID-8984"></A
><a class="indexterm" name="AUTOID-8988"></A
>
And like <b class="emphasis.bold">for</B
>, you can omit
the <b class="emphasis.bold">in</B
> <em class="emphasis">list</EM
> and it will default to <b class="emphasis.bold">&quot;$@&quot;</B
>, i.e.,
the list of quoted command-line arguments.</P
><p class="para"><a class="indexterm" name="AUTOID-8997"></A
>Here is what <b class="emphasis.bold">select</B
> does:</P
><ul class="itemizedlist"><li class="listitem"><p class="para">Generates a menu of each item in <em class="emphasis">list</EM
>, formatted with
numbers for each choice</P
></LI
><li class="listitem"><p class="para">Prompts the user for a number</P
></LI
><li class="listitem"><p class="para"><a class="indexterm" name="AUTOID-9009"></A
><a class="indexterm" name="AUTOID-9013"></A
>Stores the selected choice in the variable <em class="emphasis">name</EM
>
and the selected number in the built-in variable <b class="emphasis.bold">REPLY</B
></P
></LI
><li class="listitem"><p class="para">Executes the statements in the body</P
></LI
><li class="listitem"><p class="para">Repeats the process forever (but see below for how to exit)</P
></LI
></UL
><p class="para">Once again, an example should help make this process clearer.
Assume you need to write the code for Task 5-4, but your life
is not as simple. You don't have terminals hardwired to your computer;
instead, your users communicate through a terminal server.
This means, among other things, that the tty number does <em class="emphasis">not</EM
>
determine the type of terminal.</P
><p class="para">Therefore, you have no choice but to prompt the user for his or
her terminal type at login time.  <a class="indexterm" name="AUTOID-9025"></A
>
To do this, you can put the following
code in <em class="emphasis">/etc/profile</EM
> (assume you have the same choice of
terminal types):<a class="indexterm" name="KSH-CH-5-IX-TERM-2"></A
><a class="indexterm" name="KSH-CH-5-IX-ENVVARS-TERM-2"></A
><a class="indexterm" name="AUTOID-9033"></A
></P
><p class="para"><blockquote class="screen"><pre class="screen">PS3='terminal? '
select term in gl35a t2000 s531 vt99; do
    if [[ -n $term ]]; then
        TERM=$term
        print TERM is $TERM
        break
    else
        print 'invalid.'
    fi
done</PRE
></BLOCKQUOTE
></P
><p class="para">If you run this code, you will see this menu:</P
><p class="para"><blockquote class="screen"><pre class="screen">1) gl35a
2) t2000
3) s531
4) vt99
terminal?</PRE
></BLOCKQUOTE
></P
><p class="para"><a class="indexterm" name="AUTOID-9043"></A
><a class="indexterm" name="AUTOID-9046"></A
><a class="indexterm" name="AUTOID-9048"></A
>The built-in shell variable <b class="emphasis.bold">PS3</B
> contains the prompt string
that <b class="emphasis.bold">select</B
> uses; its default value is the not particularly
useful &quot;<b class="emphasis.bold">#</B
><code class="literal">? </CODE
>&quot;.  So the first line of the above code sets it to
a more relevant value.</P
><p class="para">The <b class="emphasis.bold">select</B
> statement constructs
the menu from the list of choices. If the user enters a valid
number (from 1 to 4), then the variable <b class="emphasis.bold">term</B
> is set to
the corresponding value; otherwise it is null. (If the user
just presses RETURN, the shell prints the menu again.)</P
><p class="para">The code in the loop body checks if <b class="emphasis.bold">term</B
>
is non-null. If so, it assigns <b class="emphasis.bold">$term</B
> to the environment
variable <b class="emphasis.bold">TERM</B
> and prints a confirmation message; then
the <b class="emphasis.bold">break</B
> statement exits the <b class="emphasis.bold">select</B
> loop. If <b class="emphasis.bold">term</B
>
is null, the code prints an error message and repeats the prompt
(but not the menu).</P
><p class="para"><a class="indexterm" name="AUTOID-9066"></A
><a class="indexterm" name="AUTOID-9068"></A
>The <b class="emphasis.bold">break</B
> statement is the usual way of exiting a <b class="emphasis.bold">select</B
>
loop. Actually (like its analog in C),
it can be used to exit any surrounding control structure we've
seen so far <a class="indexterm" name="AUTOID-9072"></A
><a class="indexterm" name="AUTOID-9075"></A
><a class="indexterm" name="AUTOID-9078"></A
><a class="indexterm" name="AUTOID-9080"></A
>
(except <b class="emphasis.bold">case</B
>, where the double-semicolons
act like <b class="emphasis.bold">break</B
>) as well as the <b class="emphasis.bold">while</B
> and
<b class="emphasis.bold">until</B
> we will see soon. We haven't introduced <b class="emphasis.bold">break</B
> until now
because it is considered bad coding style to use it to
exit a loop. However, it is necessary for exiting
<b class="emphasis.bold">select</B
> when the user makes a valid choice.
[18]</P
><blockquote class="footnote"><p class="para">[18] <a class="indexterm" name="AUTOID-9090"></A
><a class="indexterm" name="AUTOID-9093"></A
>A user can also type <kbd class="keycap">[CTRL-D]</KBD
> (for end-of-input) to get
out of a <b class="emphasis.bold">select</B
> loop. This gives the user a uniform way
of exiting, but it doesn't help the shell programmer much.</P
></BLOCKQUOTE
><p class="para"><a class="indexterm" name="AUTOID-9098"></A
>Let's refine our solution by making the menu more user-friendly,
so that the user doesn't have to know the <em class="emphasis">terminfo</EM
> name of
his or her terminal. We do this by using quoted character
strings as menu items and then using <b class="emphasis.bold">case</B
> to determine the
termcap name:</P
><p class="para"><blockquote class="screen"><pre class="screen">print 'Select your terminal type:'
PS3='terminal? '
select term in \
    'Givalt GL35a' \
    'Tsoris T-2000' \
    'Shande 531' \
    'Vey VT99'
do
    case $REPLY in
        1 ) TERM=gl35a ;;
        2 ) TERM=t2000 ;;
        3 ) TERM=s531 ;;
        4 ) TERM=vt99 ;;
        * ) print 'invalid.' ;;
    esac
    if [[ -n $term ]]; then
        print TERM is $TERM
        break
    fi
done</PRE
></BLOCKQUOTE
></P
><p class="para">This code looks a bit more like a menu routine in a
conventional program, though <b class="emphasis.bold">select</B
> still provides the shortcut
of converting the menu choices into numbers.
We list each of the menu choices on its own
line for reasons of readability, but once again we need continuation
characters to keep the shell from complaining about syntax.</P
><p class="para">Here is what the user will see when this code is run:</P
><p class="para"><blockquote class="screen"><pre class="screen">Select your terminal type:
1) Givalt GL35a
2) Tsoris T-2000
3) Shande 531
4) Vey VT99
terminal?</PRE
></BLOCKQUOTE
></P
><p class="para">This is a bit more informative than the previous code's output.</P
><p class="para"><a class="indexterm" name="AUTOID-9111"></A
><a class="indexterm" name="AUTOID-9115"></A
>When the body of the <b class="emphasis.bold">select</B
> loop is entered, <b class="emphasis.bold">$term</B
> equals
one of the four strings (or is null if the user made an invalid
choice), while the built-in variable <b class="emphasis.bold">REPLY</B
> contains the
number the user selects. We need a <b class="emphasis.bold">case</B
> statement to assign the correct
value to <b class="emphasis.bold">TERM</B
>; we use the value of <b class="emphasis.bold">REPLY</B
> as the <b class="emphasis.bold">case</B
>
selector.</P
><p class="para">Once the <b class="emphasis.bold">case</B
> statement is finished, the <b class="emphasis.bold">if</B
> checks to
see if a valid choice was made, as in the previous solution.
If the choice was valid, then <b class="emphasis.bold">TERM</B
> has already been assigned,
so the code just prints a confirmation message and exits the
<b class="emphasis.bold">select</B
> loop. If it wasn't valid, the <b class="emphasis.bold">select</B
> loop 
repeats the prompt and goes through the process again.<a class="indexterm" name="AUTOID-9131"></A
><a class="indexterm" name="AUTOID-9132"></A
><a class="indexterm" name="AUTOID-9133"></A
></P
></DIV
><div class="htmlnav"><p></P
><hr align="LEFT" width="515" title="footer"><table width="515" border="0" cellspacing="0" cellpadding="0"><tr><td align="LEFT" valign="TOP" width="172"><a class="SECT1" href="ch05_03.htm" webstripperlinkwas="ch05_03.htm" title="5.3 case"><img src="../gifs/txtpreva.gif" webstripperlinkwas="../gifs/txtpreva.gif" alt="Previous: 5.3 case" border="0"></A
></TD
><td align="CENTER" valign="TOP" width="171"><a class="book" href="index.htm" webstripperlinkwas="http://www.ms.itb.ac.id/buku/unix-bookshelf/ksh/index.htm" title="Learning the Korn Shell"><img src="../gifs/txthome.gif" webstripperlinkwas="../gifs/txthome.gif" alt="Learning the Korn Shell" border="0"></A
></TD
><td align="RIGHT" valign="TOP" width="172"><a class="SECT1" href="ch05_05.htm" webstripperlinkwas="ch05_05.htm" title="5.5 while and until"><img src="../gifs/txtnexta.gif" webstripperlinkwas="../gifs/txtnexta.gif" alt="Next: 5.5 while and until" border="0"></A
></TD
></TR
><tr><td align="LEFT" valign="TOP" width="172">5.3 case</TD
><td align="CENTER" valign="TOP" width="171"><a class="index" href="index/idx_0.htm" webstripperlinkwas="index/idx_0.htm" title="Book Index"><img src="../gifs/index.gif" webstripperlinkwas="../gifs/index.gif" alt="Book Index" border="0"></A
></TD
><td align="RIGHT" valign="TOP" width="172">5.5 while and until</TD
></TR
></TABLE
><hr align="LEFT" width="515" title="footer"><img src="../gifs/smnavbar.gif" webstripperlinkwas="../gifs/smnavbar.gif" usemap="#map" border="0" alt="The UNIX CD Bookshelf Navigation"><map name="map"><area shape="RECT" coords="0,0,73,21" href="../index.html" webstripperlinkwas="http://www.ms.itb.ac.id/buku/unix-bookshelf/index.html" alt="The UNIX CD Bookshelf"><area shape="RECT" coords="74,0,163,21" href="../upt/index.htm" webstripperlinkwas="http://www.ms.itb.ac.id/buku/unix-bookshelf/upt/index.htm" alt="UNIX Power Tools"><area shape="RECT" coords="164,0,257,21" href="../unixnut/index.htm" webstripperlinkwas="http://www.ms.itb.ac.id/buku/unix-bookshelf/unixnut/index.htm" alt="UNIX in a Nutshell"><area shape="RECT" coords="258,0,321,21" href="../vi/index.htm" webstripperlinkwas="http://www.ms.itb.ac.id/buku/unix-bookshelf/vi/index.htm" alt="Learning the vi Editor"><area shape="RECT" coords="322,0,378,21" href="../sedawk/index.htm" webstripperlinkwas="http://www.ms.itb.ac.id/buku/unix-bookshelf/sedawk/index.htm" alt="sed &amp; awk"><area shape="RECT" coords="379,0,438,21" href="index.htm" webstripperlinkwas="http://www.ms.itb.ac.id/buku/unix-bookshelf/ksh/index.htm" alt="Learning the Korn Shell"><area shape="RECT" coords="439,0,514,21" href="../lrnunix/index.htm" webstripperlinkwas="http://www.ms.itb.ac.id/buku/unix-bookshelf/lrnunix/index.htm" alt="Learning the UNIX Operating System"></MAP
></DIV
></BODY
></HTML
>
