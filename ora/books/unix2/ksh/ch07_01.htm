<html><head>
<title>[Chapter 7] Input/Output and Command-line Processing</TITLE>
<meta name="DC.title" content="Learning the Korn Shell"><meta name="DC.creator" content="Bill Rosenblatt"><meta name="DC.publisher" content="O'Reilly &amp; Associates, Inc."><meta name="DC.date" content="1998-08-03T21:11:40Z"><meta name="DC.type" content="Text.Monograph"><meta name="DC.format" content="text/html" scheme="MIME"><meta name="DC.source" content="1-56592-054-6" scheme="ISBN"><meta name="DC.language" content="en-US"><meta name="generator" content="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><link rev="made" href="mailto:online-books@oreilly.com" title="Online Books Comments"><link rel="up" href="index.htm" webstripperlinkwas="http://www.ms.itb.ac.id/buku/unix-bookshelf/ksh/index.htm" title="Learning the Korn Shell"><link rel="prev" href="ch06_03.htm" webstripperlinkwas="ch06_03.htm" title="6.3 Arrays"><link rel="next" href="ch07_02.htm" webstripperlinkwas="ch07_02.htm" title="7.2 String I/O"></HEAD
><body bgcolor="#FFFFFF" text="#000000"><div class="htmlnav"><h1><img src="gifs/smbanner.gif" webstripperlinkwas="gifs/smbanner.gif" alt="Learning the Korn Shell" usemap="#srchmap" border="0"></H1
><map name="srchmap"><area shape="RECT" coords="0,0,466,66" href="index.htm" webstripperlinkwas="http://www.ms.itb.ac.id/buku/unix-bookshelf/ksh/index.htm" alt="Learning the Korn Shell"><area shape="RECT" coords="467,0,514,18" href="jobjects/fsearch.htm" webstripperlinkwas="jobjects/fsearch.htm" alt="Search this book"></MAP
><table width="515" border="0" cellspacing="0" cellpadding="0"><tr><td align="LEFT" valign="TOP" width="172"><a class="SECT1" href="ch06_03.htm" webstripperlinkwas="ch06_03.htm" title="6.3 Arrays"><img src="../gifs/txtpreva.gif" webstripperlinkwas="../gifs/txtpreva.gif" alt="Previous: 6.3 Arrays" border="0"></A
></TD
><td align="CENTER" valign="TOP" width="171"><b><font face="ARIEL,HELVETICA,HELV,SANSERIF" size="-1">Chapter 7</FONT
></B
></TD
><td align="RIGHT" valign="TOP" width="172"><a class="SECT1" href="ch07_02.htm" webstripperlinkwas="ch07_02.htm" title="7.2 String I/O"><img src="../gifs/txtnexta.gif" webstripperlinkwas="../gifs/txtnexta.gif" alt="Next: 7.2 String I/O" border="0"></A
></TD
></TR
></TABLE
>&nbsp;<hr align="LEFT" width="515" title="footer"></DIV
><div class="CHAPTER"><h1 class="chapter"><a class="title" name="KSH-CH7-INOUTCOM">7. Input/Output and Command-line Processing</A
></H1
><div class="htmltoc"><p><b>Contents:</B
><br><a class="sect1" href="#KSH-CH-7-SECT-1" title="7.1 I/O Redirectors">I/O Redirectors</A
><br><a class="sect1" href="ch07_02.htm" webstripperlinkwas="ch07_02.htm" title="7.2 String I/O">String I/O</A
><br><a class="sect1" href="ch07_03.htm" webstripperlinkwas="ch07_03.htm" title="7.3 Command-line Processing">Command-line Processing</A
></P
><p></P
></DIV
><p class="para">The past few chapters have gone into detail about various shell
programming techniques, mostly focused on the flow of data and
control through shell programs. In this chapter,
we'll switch the focus to two related topics.
The first is the shell's mechanisms for doing file-oriented input
and output. We'll present information that expands on what you
already know about the shell's basic I/O redirectors.  </P
><p class="para">Second, we'll &quot;zoom in&quot; and talk about I/O at the line and word level.
This is a fundamentally different topic, since it involves moving 
information between the domains of files/terminals and shell variables.
<b class="emphasis.bold">print</B
> and
command substitution are two ways of doing this that we've seen so far.</P
><p class="para">Our discussion of line and word I/O will lead into a more detailed 
explanation of how the shell processes command lines. 
This information is necessary so that you can understand exactly
how the shell deals with <em class="emphasis">quotation</EM
>, and so that you can appreciate
the power of an advanced command called <b class="emphasis.bold">eval</B
>, which we will cover
at the end of the chapter.</P
><div class="sect1"><h2 class="sect1"><a class="title" name="KSH-CH-7-SECT-1">7.1 I/O Redirectors</A
></H2
><p class="para"><a class="indexterm" name="KSH-CH-7-IX-I-O-REDIRECTION"></A
>In <a class="xref" href="ch01_01.htm" webstripperlinkwas="ch01_01.htm" title="Korn Shell Basics">Chapter 1, Korn Shell Basics</A
> you learned about the shell's basic I/O redirectors, 
<b class="emphasis.bold">&gt;</B
>, <b class="emphasis.bold">&lt;</B
>, and <b class="emphasis.bold">|</B
>. Although these are enough to get you
through 95% of your UNIX life, you should know that the Korn shell
supports a total of 16 I/O redirectors.  
<a class="xref" href="#KSH-CH-7-TAB-0" title="I/O Redirectors">Table 7.1</A
>
lists them, including the three we've already seen.
Although some of the rest are useful, others are mainly for
systems programmers.<a class="indexterm" name="AUTOID-11147"></A
>
We will wait until the next chapter to discuss
the last three, which, 
along with <b class="emphasis.bold">&gt;|</B
>, are not present in most Bourne shell
versions.<a class="indexterm" name="AUTOID-11150"></A
><a class="indexterm" name="AUTOID-11154"></A
><a class="indexterm" name="AUTOID-11158"></A
><a class="indexterm" name="AUTOID-11162"></A
><a class="indexterm" name="AUTOID-11166"></A
><a class="indexterm" name="AUTOID-11170"></A
><a class="indexterm" name="AUTOID-11174"></A
><a class="indexterm" name="AUTOID-11179"></A
><a class="indexterm" name="AUTOID-11183"></A
><a class="indexterm" name="AUTOID-11186"></A
><a class="indexterm" name="AUTOID-11190"></A
><a class="indexterm" name="AUTOID-11194"></A
><a class="indexterm" name="AUTOID-11198"></A
><a class="indexterm" name="AUTOID-11202"></A
></P
><table class="table"><caption class="table"><a class="title" name="KSH-CH-7-TAB-0">Table 7.1: I/O Redirectors</A
></CAPTION
><thead class="thead"><tr class="row" valign="TOP"><th class="entry" align="LEFT" rowspan="1" colspan="1">Redirector</TH
><th class="entry" align="LEFT" rowspan="1" colspan="1">Function</TH
></TR
></THEAD
><tbody class="tbody"><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><b class="emphasis.bold">&gt;</B
> <em class="emphasis">file</EM
></TD
><td class="entry" rowspan="1" colspan="1">Direct standard output to <em class="emphasis">file</EM
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><b class="emphasis.bold">&lt;</B
> <em class="emphasis">file</EM
></TD
><td class="entry" rowspan="1" colspan="1">Take standard input from <em class="emphasis">file</EM
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><em class="emphasis">cmd1</EM
> | <em class="emphasis">cmd2</EM
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">Pipe; take standard output of <em class="emphasis">cmd1</EM
> as standard input to 
<em class="emphasis">cmd2</EM
></P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><b class="emphasis.bold">&gt;&gt;</B
> <em class="emphasis">file</EM
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">Direct standard output to <em class="emphasis">file</EM
>;
append to <em class="emphasis">file</EM
> if it already exists</P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><b class="emphasis.bold">&gt;|</B
> <em class="emphasis">file</EM
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">Force standard output to <em class="emphasis">file</EM
> even if <b class="emphasis.bold">noclobber</B
> set</P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><b class="emphasis.bold">&lt;&gt;</B
> <em class="emphasis">file</EM
></TD
><td class="entry" rowspan="1" colspan="1">Use <em class="emphasis">file</EM
> as both standard input and standard output</TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><b class="emphasis.bold">&lt;&lt;</B
> <em class="emphasis">label</EM
></TD
><td class="entry" rowspan="1" colspan="1">Here-document; see text</TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><em class="emphasis">n</EM
><b class="emphasis.bold">&gt;</B
> <em class="emphasis">file</EM
></TD
><td class="entry" rowspan="1" colspan="1">Direct file descriptor <em class="emphasis">n</EM
> to <em class="emphasis">file</EM
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><em class="emphasis">n</EM
><b class="emphasis.bold">&lt;</B
> <em class="emphasis">file</EM
></TD
><td class="entry" rowspan="1" colspan="1">Set <em class="emphasis">file</EM
> as file descriptor <em class="emphasis">n</EM
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><b class="emphasis.bold">&gt;&amp;</B
><em class="emphasis">n</EM
></TD
><td class="entry" rowspan="1" colspan="1">Duplicate standard output to file descriptor <em class="emphasis">n</EM
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><b class="emphasis.bold">&lt;&amp;</B
><em class="emphasis">n</EM
></TD
><td class="entry" rowspan="1" colspan="1">Duplicate standard input from file descriptor <em class="emphasis">n</EM
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><b class="emphasis.bold">&lt;&amp;-</B
></TD
><td class="entry" rowspan="1" colspan="1">Close the standard input</TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><b class="emphasis.bold">&gt;&amp;-</B
></TD
><td class="entry" rowspan="1" colspan="1">Close the standard output</TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><b class="emphasis.bold">|&amp;</B
></TD
><td class="entry" rowspan="1" colspan="1">Background process with I/O from parent shell</TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><b class="emphasis.bold">&gt;&amp;p</B
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">Direct background process' standard output to the parent shell's
standard output</P
></TD
></TR
><tr class="row" valign="TOP"><td class="entry" rowspan="1" colspan="1"><b class="emphasis.bold">&lt;&amp;p</B
></TD
><td class="entry" rowspan="1" colspan="1"><p class="para">Direct parent shell's standard input to background process'
standard input</P
></TD
></TR
></TBODY
></TABLE
><p class="para"><a class="indexterm" name="AUTOID-11312"></A
>Notice that some of the redirectors in 
<a class="xref" href="#KSH-CH-7-TAB-0" title="I/O Redirectors">Table 7.1</A
>
contain a digit <em class="emphasis">n</EM
>,
and that their descriptions contain the term <em class="emphasis">file descriptor</EM
>;
we'll cover that in a little while.</P
><p class="para"><a class="indexterm" name="AUTOID-11318"></A
><a class="indexterm" name="AUTOID-11322"></A
><a class="indexterm" name="AUTOID-11326"></A
>The first two new redirectors, <b class="emphasis.bold">&gt;&gt;</B
> and <b class="emphasis.bold">&gt;|</B
>, are simple
variations on the standard output redirector <b class="emphasis.bold">&gt;</B
>. The <b class="emphasis.bold">&gt;&gt;</B
>
appends to the output file (instead of overwriting it)
if it already exists; otherwise it acts
exactly like <b class="emphasis.bold">&gt;</B
>.  <a class="indexterm" name="AUTOID-11335"></A
><a class="indexterm" name="AUTOID-11337"></A
>
A common use of <b class="emphasis.bold">&gt;&gt;</B
> is for adding
a line to an initialization file (such as <em class="emphasis">.profile</EM
> or
<em class="emphasis">.mailrc</EM
>) when you don't want to bother with a text editor. For example:</P
><p class="para"><blockquote class="screen"><pre class="screen"><b class="emphasis.bold">cat &gt;&gt; .mailrc
alias fred frederick@longmachinename.longcompanyname.com
^D</B
></PRE
></BLOCKQUOTE
></P
><p class="para"><a class="indexterm" name="AUTOID-11346"></A
><a class="indexterm" name="AUTOID-11348"></A
><a class="indexterm" name="AUTOID-11350"></A
>As we saw in <a class="xref" href="ch01_01.htm" webstripperlinkwas="ch01_01.htm" title="Korn Shell Basics">Chapter 1</A
>,
<em class="emphasis">cat</EM
> without an argument uses standard input as its input. This
allows you to type the input and end it with <kbd class="keycap">[CTRL-D]</KBD
> on its own line.
The <b class="emphasis.bold">alias</B
> line will be appended to the file <em class="emphasis">.mailrc</EM
>
if it already exists; if it doesn't, the file is created with
that one line.</P
><p class="para"><a class="indexterm" name="AUTOID-11358"></A
><a class="indexterm" name="AUTOID-11361"></A
>Recall from <a class="xref" href="ch03_01.htm" webstripperlinkwas="ch03_01.htm" title="Customizing Your Environment">Chapter 3, Customizing Your Environment</A
> that you can prevent the shell from
overwriting a file with <b class="emphasis.bold">&gt;</B
> <em class="emphasis">file</EM
> by typing <b class="emphasis.bold">set -o noclobber</B
>.
<b class="emphasis.bold">&gt;|</B
> overrides <b class="emphasis.bold">noclobber</B
>&nbsp;- it's the &quot;Do it anyway, dammit!&quot;
redirector.</P
><p class="para"><a class="indexterm" name="AUTOID-11372"></A
>The redirector <b class="emphasis.bold">&lt;&gt;</B
> is mainly meant for use with device files
(in the <em class="emphasis">/dev</EM
> directory), i.e., files that correspond to
hardware devices such as terminals and communication lines.
Low-level systems programmers can use it to test device drivers;
otherwise, it's not very useful. <a class="indexterm" name="AUTOID-11378"></A
>
But if you use a windowing system like X, you can try the following
to see how it works:</P
><ol class="orderedlist"><li class="listitem"><p class="para"><a class="indexterm" name="AUTOID-11383"></A
>Create two terminal windows (e.g., <em class="emphasis">xterm</EM
>s).</P
></LI
><li class="listitem"><p class="para"><a class="indexterm" name="AUTOID-11388"></A
>In one of them, type <b class="emphasis.bold">who am i</B
> to find out the name of the
window's &quot;pseudo-device.&quot;  This will be the second word in the
output.</P
></LI
><li class="listitem"><p class="para"><a class="indexterm" name="AUTOID-11394"></A
>In the other, type <b class="emphasis.bold">cat &lt;&gt; /dev/</B
><em class="emphasis">pty</EM
>, where <em class="emphasis">pty</EM
> is
the name you found in the last step.</P
></LI
><li class="listitem"><p class="para">Back in the first window, type some characters. You will see
them appear in <em class="emphasis">alternate</EM
> windows.</P
></LI
><li class="listitem"><p class="para"><a class="indexterm" name="AUTOID-11406"></A
>Type <kbd class="keycap">[CTRL-C]</KBD
> in both windows to end the process.</P
></LI
></OL
><div class="sect2"><h3 class="sect2"><a class="title" name="KSH-CH-7-SECT-1.1">7.1.1 Here-documents</A
></H3
><p class="para"><a class="indexterm" name="KSH-CH-7-IX-HERE-DOCUMENTS"></A
>The <b class="emphasis.bold">&lt;&lt;</B
> <em class="emphasis">label</EM
> redirector essentially forces the input to a
command to be the shell's standard input, which is read until there is
a line that contains only <em class="emphasis">label</EM
>. The input in between is called
a <em class="emphasis">here-document</EM
>.
Here-documents aren't very interesting when used from the command prompt.
In fact, it's the same as the normal use of standard input except
for the label.  <a class="indexterm" name="AUTOID-11418"></A
>
We could have used a here-document in the previous example
of <b class="emphasis.bold">&gt;&gt;</B
>, like this (EOF, for &quot;end of file,&quot;
is an often-used label):</P
><p class="para"><blockquote class="screen"><pre class="screen"><b class="emphasis.bold">cat &gt;&gt; .mailrc &lt;&lt; EOF
alias fred frederick@longmachinename.longcompanyname.com
EOF</B
></PRE
></BLOCKQUOTE
></P
><p class="para">Here-documents are meant to be used from within shell scripts;
they let you specify &quot;batch&quot; input to programs.  <a class="indexterm" name="KSH-CH-7-IX-ED"></A
>
A common use of here-documents is with simple text editors like <em class="emphasis">ed(1)</EM
>.
Here is a programming task that uses a here-document in this way:</P
><div class="task"><h4>Task 7.1</H4
><blockquote class="taskinfo"><p class="para"><a class="indexterm" name="AUTOID-11433"></A
>The <b class="emphasis.bold">s</B
> <em class="emphasis">file</EM
> command in <em class="emphasis">mail(1)</EM
> saves the current
message in <em class="emphasis">file</EM
>.  <a class="indexterm" name="AUTOID-11439"></A
>
If the message came over a network (such
as the Internet), then it has several header lines prepended
that give information about network routing.
Write a shell script that deletes the header lines from the file.</P
></BLOCKQUOTE
><p class="para">We can use <em class="emphasis">ed</EM
> to delete the header lines.
To do this, we need to know something about the syntax of mail messages;
specifically, that there is always a blank line between the header lines
and the message text.
The <em class="emphasis">ed</EM
> command <b class="emphasis.bold">1,/^[]</B
><code class="literal">*</CODE
><b class="emphasis.bold">$/d</B
> does the trick: it means,
&quot;Delete from line 1 until the first blank line.&quot;
We also need the <em class="emphasis">ed</EM
> commands <b class="emphasis.bold">w</B
> (write the changed file)
and <b class="emphasis.bold">q</B
> (quit).
Here is the code that solves the task:</P
><p class="para"><blockquote class="screen"><pre class="screen">ed $1 &lt;&lt; EOF
1,/^[]*$/d
w
q
EOF</PRE
></BLOCKQUOTE
></P
><p class="para"><a class="indexterm" name="AUTOID-11453"></A
></P
><p class="para"><a class="indexterm" name="AUTOID-11455"></A
>The shell does parameter (variable) substitution
and command substitution on text in a
here-document, meaning that you can use shell variables and commands to 
customize the text. Here is a simple task for system administrators
that shows how this works:</P
></DIV
><div class="task"><h4>Task 7.2</H4
><blockquote class="taskinfo"><p class="para">Write a script that sends a mail message to a set of users saying
that a new version of a certain program has been installed in
a certain directory.</P
></BLOCKQUOTE
><p class="para"><a class="indexterm" name="AUTOID-11462"></A
><a class="indexterm" name="AUTOID-11464"></A
>You can get a list of all users on the system in various ways;
perhaps the easiest is to use <em class="emphasis">cut</EM
> to
extract the first field of <em class="emphasis">/etc/passwd</EM
>,
the file that contains all user account information.  Fields in
this file are separated by colons (<code class="literal">:</CODE
>).
[1]</P
><blockquote class="footnote"><p class="para">[1] <a class="indexterm" name="AUTOID-11471"></A
><a class="indexterm" name="AUTOID-11473"></A
>There are a few possible problems with this; for example, <em class="emphasis">/etc/passwd</EM
>
usually contains information on &quot;accounts&quot; that aren't associated with
people, like <b class="emphasis.bold">uucp</B
>, <b class="emphasis.bold">lp</B
>, and <b class="emphasis.bold">daemon</B
>. We'll
ignore such problems for the purpose of this example.</P
></BLOCKQUOTE
><p class="para">Given such a list of users, the following code does the trick:</P
><p class="para"><blockquote class="screen"><pre class="screen">pgmname=$1
for user in $(cut -f1 -d: /etc/passwd); do
    mail $user &lt;&lt; EOF
Dear $user,

A new version of $pgmname has been installed in $(whence pgmname).

Regards,
Your friendly neighborhood sysadmin.
EOF
done</PRE
></BLOCKQUOTE
></P
><p class="para">The shell will substitute the appropriate values for the name of
the program and its directory.</P
><p class="para">The redirector <b class="emphasis.bold">&lt;&lt;</B
> has two variations. First, you can
prevent the shell from doing parameter and command substitution by surrounding
the <em class="emphasis">label</EM
> in single or double quotes. In the above example, if you
used the line <b class="emphasis.bold">mail $</B
>user <b class="emphasis.bold">&lt;&lt;</B
> <code class="literal">'</CODE
><b class="emphasis.bold">EOF</B
><code class="literal">'</CODE
>, then <b class="emphasis.bold">$pgmname</B
>
and <b class="emphasis.bold">$(whence pgmname)</B
> would remain untouched.</P
><p class="para"><a class="indexterm" name="AUTOID-11494"></A
>The second variation is <b class="emphasis.bold">&lt;&lt;-</B
>, which deletes leading TABs
(but not blanks) from the here-document and the label line.
This allows you to indent the here-document's text, making the
shell script more readable:</P
><p class="para"><blockquote class="screen"><pre class="screen">pgmname=$1
for user in $(cut -f1 -d: /etc/passwd); do
    mail $user &lt;&lt;- EOF
        Dear user,

        A new version of $pgmname has been installed in $(whence pgmname).

        Regards,

        Your friendly neighborhood sysadmin.
EOF
done</PRE
></BLOCKQUOTE
></P
><p class="para">Of course, you need to choose your <em class="emphasis">label</EM
> so that it
doesn't appear as an actual input line. <a class="indexterm" name="AUTOID-11502"></A
></P
></DIV
></DIV
><div class="sect2"><h3 class="sect2"><a class="title" name="KSH-CH-7-SECT-1.2">7.1.2 File Descriptors</A
></H3
><p class="para"><a class="indexterm" name="KSH-CH-7-IX-FILE-DESCRIPTORS"></A
>The next few redirectors in 
<a class="xref" href="#KSH-CH-7-TAB-0" title="I/O Redirectors">Table 7.1</A
>
depend on the notion of a
<em class="emphasis">file descriptor</EM
>.  <a class="indexterm" name="AUTOID-11510"></A
>
Like the device files used with <b class="emphasis.bold">&lt;&gt;</B
>,
this is a low-level UNIX I/O concept that is of interest only to
systems programmers&nbsp;- and then only occasionally. File descriptors are
historical relics that really should be banished from the
realm of shell use.
[2]
You can get by with a few basic facts about them; for
the whole bloody story, look at the entries for <em class="emphasis">read</EM
>(),
<em class="emphasis">write</EM
>(), <em class="emphasis">fcntl</EM
>(), and others in Section 2 of the UNIX
manual.</P
><blockquote class="footnote"><p class="para">[2] <a class="indexterm" name="AUTOID-11517"></A
><a class="indexterm" name="AUTOID-11519"></A
>The C shell's set of redirectors contains no mention of file
descriptors whatsoever.  </P
></BLOCKQUOTE
><p class="para">File descriptors are integers starting at 0 that index
an array of file information within a process. When a
process starts, it usually has three file descriptors open.  <a class="indexterm" name="AUTOID-11525"></A
>
These correspond to the three <em class="emphasis">standards</EM
>: standard input (file descriptor
0), standard output (1), and standard error (2). If a process
opens UNIX files for input or output, 
they are assigned to the
next available file descriptors, starting with 3.</P
><p class="para"><a class="indexterm" name="AUTOID-11530"></A
>By far the most common use of file descriptors with the Korn shell
is in saving standard error in a file. For example, if you want
to save the error messages from a long job in a file so that they
don't scroll off the screen, append <b class="emphasis.bold">2&gt;</B
> <em class="emphasis">file</EM
> to your command.
If you also want to save standard output, append
<b class="emphasis.bold">&gt;</B
> <em class="emphasis">file1</EM
><b class="emphasis.bold"> 2&gt;</B
> <em class="emphasis">file2</EM
>.</P
><p class="para">This leads to another programming task.</P
><div class="task"><h4>Task 7.3</H4
><blockquote class="taskinfo"><p class="para">You want to start a long job in the background (so that your terminal
is freed up) and save
both standard output and standard error in a single log file.
Write a script that does this.</P
></BLOCKQUOTE
><p class="para"><a class="indexterm" name="AUTOID-11545"></A
></P
><p class="para">We'll call this script <em class="emphasis">start</EM
>. The code is very terse:</P
><p class="para"><blockquote class="screen"><pre class="screen">&quot;$@&quot; &gt; logfile 2&gt;&amp;1 &amp;</PRE
></BLOCKQUOTE
></P
><p class="para">This line executes whatever command and parameters follow <b class="emphasis.bold">start</B
>.
(The command cannot contain pipes or output redirectors.)
It sends the command's standard output to <em class="emphasis">logfile</EM
>.</P
><p class="para"><a class="indexterm" name="AUTOID-11556"></A
><a class="indexterm" name="AUTOID-11560"></A
>Then, the redirector <b class="emphasis.bold">2&gt;&amp;1</B
> says, &quot;send standard error (file descriptor
2) to the same place as standard output (file descriptor 1).&quot;
<b class="emphasis.bold">2&gt;&amp;1</B
> is actually a combination of two redirectors in
<a class="xref" href="#KSH-CH-7-TAB-0" title="I/O Redirectors">Table 7.1</A
>:
<em class="emphasis">n</EM
><b class="emphasis.bold">&gt;</B
> <em class="emphasis">file</EM
> and <b class="emphasis.bold">&gt;&amp;</B
><em class="emphasis">n</EM
>.
Since standard output is redirected to <em class="emphasis">logfile</EM
>, standard error
will go there too.
The final <b class="emphasis.bold">&amp;</B
> puts the job in the background so that you get
your shell prompt back.</P
><p class="para"><a class="indexterm" name="AUTOID-11574"></A
>As a small variation on this theme, we can send
both standard output and standard error into a <em class="emphasis">pipe</EM
> instead
of a file: <em class="emphasis">command</EM
> <b class="emphasis.bold">2&gt;&amp;1 | ...</B
> does this.
(Make sure you understand why.)
Here is a script that sends both standard output and
standard error to the logfile (as above) and to the terminal:</P
><p class="para"><blockquote class="screen"><pre class="screen">&quot;$@&quot; 2&gt;&amp;1 | tee logfile &amp;</PRE
></BLOCKQUOTE
></P
><p class="para"><a class="indexterm" name="AUTOID-11584"></A
>The command <em class="emphasis">tee</EM
>(1) takes its standard input and copies it
to standard output <em class="emphasis">and</EM
> the file given as argument.</P
><p class="para">These scripts have one shortcoming: you must remain logged in until
the job completes.  <a class="indexterm" name="AUTOID-11589"></A
>
Although you can always type <b class="emphasis.bold">jobs</B
> (see
<a class="xref" href="ch01_01.htm" webstripperlinkwas="ch01_01.htm" title="Korn Shell Basics">Chapter 1</A
>) to check on progress, you can't leave your office for the day
unless you want to risk a breach
of security or waste electricity. We'll see how to solve this problem in the next chapter.</P
><p class="para"><a class="indexterm" name="AUTOID-11594"></A
><a class="indexterm" name="AUTOID-11598"></A
>The other file-descriptor-oriented redirectors (e.g., <b class="emphasis.bold">&lt;&amp;</B
><em class="emphasis">n</EM
>)
are usually used for reading input from (or writing output to)
more than one file at the same time. We'll see an example later in this chapter. Otherwise, they're
mainly meant for systems programmers, as are 
<b class="emphasis.bold">&lt;&amp;-</B
> (force standard input to close) and <b class="emphasis.bold">&gt;&amp;-</B
>
(force standard output to close).  </P
><p class="para">Before we leave this topic,
we should just note that <b class="emphasis.bold">1&gt;</B
> is the same as <b class="emphasis.bold">&gt;</B
>, and
<b class="emphasis.bold">0&lt;</B
> is the same as <b class="emphasis.bold">&lt;</B
>. If you understand this, then you
probably know all you need to know about file descriptors.<a class="indexterm" name="AUTOID-11611"></A
><a class="indexterm" name="AUTOID-11612"></A
></P
></DIV
></DIV
></DIV
></DIV
><div class="htmlnav"><p></P
><hr align="LEFT" width="515" title="footer"><table width="515" border="0" cellspacing="0" cellpadding="0"><tr><td align="LEFT" valign="TOP" width="172"><a class="SECT1" href="ch06_03.htm" webstripperlinkwas="ch06_03.htm" title="6.3 Arrays"><img src="../gifs/txtpreva.gif" webstripperlinkwas="../gifs/txtpreva.gif" alt="Previous: 6.3 Arrays" border="0"></A
></TD
><td align="CENTER" valign="TOP" width="171"><a class="book" href="index.htm" webstripperlinkwas="http://www.ms.itb.ac.id/buku/unix-bookshelf/ksh/index.htm" title="Learning the Korn Shell"><img src="../gifs/txthome.gif" webstripperlinkwas="../gifs/txthome.gif" alt="Learning the Korn Shell" border="0"></A
></TD
><td align="RIGHT" valign="TOP" width="172"><a class="SECT1" href="ch07_02.htm" webstripperlinkwas="ch07_02.htm" title="7.2 String I/O"><img src="../gifs/txtnexta.gif" webstripperlinkwas="../gifs/txtnexta.gif" alt="Next: 7.2 String I/O" border="0"></A
></TD
></TR
><tr><td align="LEFT" valign="TOP" width="172">6.3 Arrays</TD
><td align="CENTER" valign="TOP" width="171"><a class="index" href="index/idx_0.htm" webstripperlinkwas="index/idx_0.htm" title="Book Index"><img src="../gifs/index.gif" webstripperlinkwas="../gifs/index.gif" alt="Book Index" border="0"></A
></TD
><td align="RIGHT" valign="TOP" width="172">7.2 String I/O</TD
></TR
></TABLE
><hr align="LEFT" width="515" title="footer"><img src="../gifs/smnavbar.gif" webstripperlinkwas="../gifs/smnavbar.gif" usemap="#map" border="0" alt="The UNIX CD Bookshelf Navigation"><map name="map"><area shape="RECT" coords="0,0,73,21" href="../index.html" webstripperlinkwas="http://www.ms.itb.ac.id/buku/unix-bookshelf/index.html" alt="The UNIX CD Bookshelf"><area shape="RECT" coords="74,0,163,21" href="../upt/index.htm" webstripperlinkwas="http://www.ms.itb.ac.id/buku/unix-bookshelf/upt/index.htm" alt="UNIX Power Tools"><area shape="RECT" coords="164,0,257,21" href="../unixnut/index.htm" webstripperlinkwas="http://www.ms.itb.ac.id/buku/unix-bookshelf/unixnut/index.htm" alt="UNIX in a Nutshell"><area shape="RECT" coords="258,0,321,21" href="../vi/index.htm" webstripperlinkwas="http://www.ms.itb.ac.id/buku/unix-bookshelf/vi/index.htm" alt="Learning the vi Editor"><area shape="RECT" coords="322,0,378,21" href="../sedawk/index.htm" webstripperlinkwas="http://www.ms.itb.ac.id/buku/unix-bookshelf/sedawk/index.htm" alt="sed &amp; awk"><area shape="RECT" coords="379,0,438,21" href="index.htm" webstripperlinkwas="http://www.ms.itb.ac.id/buku/unix-bookshelf/ksh/index.htm" alt="Learning the Korn Shell"><area shape="RECT" coords="439,0,514,21" href="../lrnunix/index.htm" webstripperlinkwas="http://www.ms.itb.ac.id/buku/unix-bookshelf/lrnunix/index.htm" alt="Learning the UNIX Operating System"></MAP
></DIV
></BODY
></HTML
>
